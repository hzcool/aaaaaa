[
    {
        "content": "[P5200 Sleepy Cow Sorting](https://www.luogu.org/problem/P5200)\n\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u6570\u5217\u7684\u540e\u7f00\u662f\u9012\u589e\u7684\uff0c\u90a3\u4e48\u662f\u53ef\u4ee5\u4e0d\u7528\u5904\u7406\u7684.\n\n\u7531\u6b64\u5f15\u7533\u51fa\u4e00\u79cd\u601d\u8def\uff1a\u628a\u6574\u4e2a\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u524d\u4e00\u4e2a\u90e8\u5206\u662f\u8fd8\u672a\u6392\u597d\u5e8f\u7684\uff0c\u540e\u4e00\u4e2a\u90e8\u5206\u662f\u5df2\u7ecf\u6392\u597d\u5e8f\u7684.\n\n\u53c8\u56e0\u4e3a\u6bcf\u5934\u725b\u6700\u591a\u88ab\u79fb\u52a8\u4e00\u6b21\uff08\u663e\u7136\u6bcf\u6b21\u53ea\u80fd\u79fb\u52a8\u961f\u5934\uff0c\u6700\u591a$n-1$\u6b21\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6709\u5e8f\u4e86\uff09\uff0c\u540e\u7f00\u4e0d\u7528\u79fb\u52a8\uff0c\u56e0\u6b64\uff0c\u4ece\u540e\u5f80\u524d\u6570\u7b2c\u4e00\u4e2a**\u4e0d\u9012\u51cf\u7684\u6570**\uff0c1~\u5b83\u5168\u90fd\u5f97\u79fb\u52a8\uff08\u4e0d\u7136\u79fb\u52a8\u4e0d\u4e86\u5b83\uff09\uff0c\u5b83\u7684\u4f4d\u7f6e\u5c31\u662f\u6700\u5c0f\u79fb\u52a8\u6570. \n\n\n\u6700\u5c0f\u79fb\u52a8\u6570\u6c42\u5f97\u540e\uff0c\u8fd8\u8981\u6c42\u6bcf\u5934\u725b\u79fb\u52a8\u7684\u8ddd\u79bb. \u8fd9\u4e5f\u4e0d\u96be\u60f3\u5230\uff0c\u8be5\u8ddd\u79bb\u5c31\u662f\u5f53\u524d\u672a\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u7684\u957f\u5ea6-1 \u52a0\u4e0a \u8fd9\u4e2a\u5143\u7d20\u5e94\u8be5\u5728\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e**\u524d\u9762\u5143\u7d20**\u7684\u6570\u91cf.\n\n\n\u4e3a\u6b64\u5e94\u8be5\u7ef4\u62a4\u4e00\u4e2a\u6700\u957f\u7684\u4e0a\u5347\u540e\u7f00\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u5230\u8fd9\u4e2a\u6570\u5728\u4e0a\u5347\u540e\u7f00\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e.\n\n\u6211\u4eec\u4e0d\u59a8\u8bbe\u8ba1$1-n$\u7684\u6570\u7ec4\uff0c\u5176\u4e2d$1$\u8868\u793a\u8be5\u5143\u7d20\u5df2\u7ecf\u5728\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u4e2d\uff0c$0$\u8868\u793a\u8be5\u5143\u7d20\u8fd8\u672a\u6392\u5e8f. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6307\u5b9a\u5143\u7d20\u7684\u201c\u524d\u9762\u5143\u7d20\u201d\u7684\u6570\u91cf\u4e86.\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5df2\u6392\u597d\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u8ba1\u7b97\u524d\u7f00\u548c\u548c\u5355\u70b9\u4fee\u6539. \n\n### \u800c\u4e141e5\u7684\u6570\u636e\u89c4\u6a21\uff0c\u590d\u6742\u5ea6\u5927\u7ea6\u5728$O(nlogn)$\u5de6\u53f3\n\n~~\u4e0d\u96be\u60f3\u5230\u4f7f\u7528\u6811\u72b6\u6570\u7ec4.~~\n\n\u7136\u540e\u672c\u9898\u5c31\u5b8c\u6210\u4e86.\n\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\nint n,a[maxn],tree[maxn],ans[maxn];\nint lowbit(int x){return x&(-x);}\nvoid add(int x,int k){\n\tfor(int i=x;i<=n;i+=lowbit(i))tree[i]+=k;\n}\nint query(int x){\n\tint ret=0;\n\tfor(int i=x;i;i-=lowbit(i))ret+=tree[i];\n\treturn ret;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tint k=0,sum=n;\n\twhile(a[n-k]>a[n-k-1]){\n\t\tadd(a[n-k],1);//\u52a0\u5165\u6709\u5e8f\u5e8f\u5217\n\t\tsum--;\n\t\tk++;\n\t}\n\tadd(a[n-k],1),sum--;//\u65e0\u8bba\u5982\u4f55\uff0c\u90fd\u8981\u628a\u540e\u7f00\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\uff0ca[n-k]<a[n-k-1]\uff0ca[n-k]\u624d\u662f\u4e0d\u964d\u540e\u7f00\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\tfor(int i=1;i<=sum;i++){\n\t\tadd(a[i],1);\n\t\tans[i]=sum-i+query(a[i]-1);//\u6c42\u6709\u5e8f\u5e8f\u5217\u524d\u7f00\u548c\n\t}\n\tprintf(\"%d\\n\",sum);\n\tfor(int i=1;i<=sum;i++){\n\t\tprintf(\"%d \",ans[i]);\n\t}\n\treturn 0;\n}\n```\n\u6211\u4eec\u4e3b\u8981\u8981\u5b66\u4e60\u8fd9\u9898\u7684\u5206\u6bb5\u7ef4\u62a4\u601d\u60f3\uff0c\u5206\u6bb5\u5904\u7406\u662f\u5426\u6392\u597d\u5e8f\u7684\u60c5\u51b5\uff0c\u628a\u590d\u6742\u95ee\u9898\u5206\u89e3\u4e3a\u5df2\u89e3\u51b3\u4e0d\u5f71\u54cd\u540e\u9762\u64cd\u4f5c\u548c\u672a\u89e3\u51b3\u4e24\u90e8\u5206\uff0c\u65e2\u65b9\u4fbf\u601d\u8003\uff0c\u4e5f\u65b9\u4fbf\u5199\u4ee3\u7801.\n\n",
        "postTime": 1565784731,
        "uid": 126621,
        "name": "HRLYB",
        "ccfLevel": 6,
        "title": "P5200 [USACO19JAN]Sleepy Cow Sorting\uff08\u6811\u72b6\u6570\u7ec4\uff0c\u6a21\u62df\uff09"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6811\u72b6\u6570\u7ec4\u597d\u9898\uff0c~~\u7adf\u7136\u662f\u7d2b\u9898~~\uff0c\u4f46\u662f\u65e2\u7136\u662f\u6559\u7ec3\u7684\uff0c\u6211\u5c31\u5199\u7bc7\u9898\u89e3\u5427\u3002\n\n\u6211\u662f\u5b66\u4e86\u7ebf\u6bb5\u6811\u53c8\u5b66\u7684\u6811\u72b6\u6570\u7ec4\uff0c~~\u4ee5\u540e\u6c38\u8fdc\u4e0d\u5199\u7ebf\u6bb5\u6811\u4e86~~\uff0c\u800c\u4e14\u8fd8\u6bd4\u7ebf\u6bb5\u6811\u5feb\uff0c\u6559\u7ec3\u8ba9\u6211\u4eec\u75db\u82e6\u4e86\u90a3\u4e48\u957f\u65f6\u95f4\uff0cwtnl\u3002\n\n### **\u5173\u4e8e\u6811\u72b6\u6570\u7ec4\uff1a**\n\n\u4e0d\u4f1a\u6811\u72b6\u6570\u7ec4\u7684\u53ef\u4ee5\u6233[\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3374#submit)\u505a\u4e00\u4e0b\u6a21\u677f\u3002~~\u4f46\u662f\u6211\u7a0d\u5faeBB\u4e24\u53e5~~\n\n\u6811\u72b6\u6570\u7ec4\u5c31\u662f\u5de7\u5999\u5730\u8fd0\u7528\u4e86lowbit\u51fd\u6570\uff0c\u8868\u793a\u79bb\u7236\u4eb2\u8fd8\u6709\u591a\u5c11\u6b65\u3002\u6b64\u5904lowbit\u5c31\u662f\u8f6c\u6362\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u53d6\u53cd\uff0c\u4e4b\u540e\u52a0\u4e00\uff0c\u8fd9\u5c31\u662flowbit\u3002\n\n\u5b9a\u4e00\u4e2ac\u6570\u7ec4\u7ef4\u62a4\u8fd9\u4e2a\u6570\u5217\u4e0a\u67d0\u4e2a\u533a\u95f4\u7684\u548c\u3002\n\n\u8fd9\u6837\u9020\u51fa\u4e86\u4e00\u68f5\u6811\uff0c\u5355\u70b9\u4fee\u6539\u5c31\u662f\u6cbf\u7740\u6811\u5f80\u53f3\u8d70\uff0c\u4fee\u6539\u6240\u6709\u7684c\u3002\n\n\u6b64\u5904\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u590d\u6742\u5ea6\u90fd\u662f$O(log n)$\uff0c\u5efa\u6811\u590d\u6742\u5ea6$O(n log n)$\u5e38\u6570\u6bd4\u7ebf\u6bb5\u6811\u90fd\u5c0f\u3002 \n\n### **\u8fd9\u9898\u601d\u8def\uff1a**\n\n\u53ea\u8981\u6570\u5217\u4e2d\u9006\u5e8f\u5bf9 $i<j$ && $p_i>p_j$ \u90a3\u4e48\u5c31\u9700\u8981\u5f80\u540e\u79fb\u52a8\u3002\n\u6240\u4ee5\u53ea\u6709\u540e\u9762\u7684\u6570\u4e0d\u7528\u52a8\uff0c\u6240\u4ee5\u961f\u5c3e\u90fd\u4e0d\u662f\u9006\u5e8f\u3002\u6240\u4ee5\u6211\u4eec\u8ba1\u7b97\u4e00\u4e0b\u672b\u5c3e\u7684\u90a3\u51e0\u4e2a\u6570\u7684\u957f\u5ea6\uff0c\u8fd9\u5c31\u662f\u6709\u591a\u5c11\u4e2a\u4e0d\u7528\u64cd\u4f5c\u7684\u6570\uff0c\u8fd9\u6837\u7b2c\u4e00\u95ee\u7684$K$\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u76ee\u524d\u51fa\u73b0\u8fc7\u7684\u5143\u7d20\u3002\n\n\u6211\u4eec\u7528update\u51fd\u6570\u6807\u8bb0\u8fd9\u4e2a\u533a\u95f4$p_i$ \u8fd9\u4e2a\u5730\u65b9\u3002\n \n\u6211\u4eec\u53ef\u4ee5\u7136\u540e\u4ece1\u5230k\u5faa\u73af\uff0c\u5f97\u5230\u7b54\u6848\uff0c\u6c42\u5b8c\u7b54\u6848\u518dupdate\u4e00\u4e0b\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u6ce8\u91ca\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n\nconst int MAXN = 500005;\n\nint n;\n\nint c[MAXN], a[MAXN];\n\ninline int lowbit(int x) { return x & -x; }//lowbit\n\nvoid update(int x) {//\u6807\u8bb0\u51fd\u6570\n    while (x <= n) {\n        c[x]++;\n        x += lowbit(x);\n    }\n}\n\nint sum(int x) {//\u6c42\u548c\u51fd\u6570\n    int res = 0;\n    while (x > 0) {\n        res += c[x];\n        x -= lowbit(x);\n    }\n    return res;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%d\", &a[i]);\n    }\n    int k = n - 1;\n    while (k > 0 && a[k] < a[k + 1]) { //\u6c42k\n        k--;\n    }\n    printf(\"%d\\n\", k); //\u5148\u8f93\u51fak\n    for (int i = k + 1; i <= n; ++i) { //\u4e00\u5f00\u59cb\u6807\u8bb0\u4e0d\u9700\u8981\u52a8\u7684\n        update(a[i]);\n    }\n    for (int i = 1; i <= k; ++i) { //\u6c42\u9700\u8981\u52a8\u7684\u7b54\u6848\n        printf(\"%d \", k - i + sum(a[i]));\n        update(a[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n\n\u770b\u849f\u84bb\u5199\u7684\u8fd9\u4e48\u8ba4\u771f\uff0c\u70b9\u4e2a\u8d5e\u518d\u8d70\u5457~\n",
        "postTime": 1594643330,
        "uid": 298325,
        "name": "Marshadow",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting G\u3011"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u4e00\u6b21USACO Gold\u7684\u9898\u76ee\u597d\u7b80\u5355\u554a\u3002\u3002~~\u4e00\u5c0f\u65f6\u6ca1\u6709\u5c31AK\u4e86\u3002\u3002~~\n\n---\n\n\u8fd9\u9053\u9898\u7684\u8bdd\u3002\u3002~~\u5982\u679c\u505a\u4e86Bronze\u7684\u7ae5\u978b\u5c31\u77e5\u9053\u8fd9\u9053\u9898\u5c31\u662f\u591a\u8f93\u51fa\u4e86\u4e00\u4e2a\u65b9\u6848\u6570~~\n\n\u5176\u5b9e\u8fd8\u662f\u5f88\u7b80\u5355\u3002\u3002\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u6700\u957f\u7684\u4e0a\u5347\u540e\u7f00\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u7684\u8bdd\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u6570\u5728\u4e0a\u5347\u540e\u7f00\u5e94\u8be5\u5728\u7684\u5730\u65b9\u5c31\u597d\u4e86\u3002\u3002\n\n\u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u5462\uff1f\uff1f\n\n\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f \u5f53\u524d\u9700\u8981\u63d2\u5165\u7684\u6570\u7684\u4f4d\u7f6e\u5230\u4e0a\u5347\u540e\u7f00\u7684\u6700\u524d\u7aef\u7684\u8ddd\u79bb+\u4e0a\u5347\u540e\u7f00\u91cc\u9762\u5c0f\u4e8e\u5f53\u524d\u6570\u7684\u6570\u7684\u4e2a\u6570\u3002\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u5f53\u524d\u8fd9\u4e2a\u6570\u9700\u8981\u5f80\u540e\u632a\u52a8\u7684\u8ddd\u79bb\u3002\n\n\u5bf9\u4e8e\u6c42\u6709\u591a\u5c11\u4e2a\u6570\u5c0f\u4e8e\u5f53\u524d\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4,\u975e\u5e38\u77ed~~(\u51fd\u6570\u5c31\u4e24\u884c)~~\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define reg register\n#define ge getchar()\n#define Re read()\n#define FI \"sleepy.in\"\n#define FO \"sleepy.out\"\n#define MAXN 100000\n\ninline int read() {\n\treg int x = 0, ch;\n\twhile(!isdigit(ch = ge)) ;\n\twhile(isdigit(ch)) x = (x << 1) + (x << 3) + (ch & 15), ch = ge;\n\treturn x;\n}\n\nint a[MAXN + 1];\nint T[MAXN + 1];\n\ninline void Add(reg int p) { while(p <= MAXN) T[p]++, p += p & -p; }\ninline int Ask(reg int p) { reg int x = 0; while(p) x += T[p], p ^= p & -p; return x; }\n\nint main() {\n\treg int n = Re;\n\tfor(reg int i = 1; i <= n; i++) a[i] = Re;\n\treg int la = n + 1;\n\tfor(reg int i = n; i >= 1; i--) {\n\t\tif(a[i] > la) {\n\t\t\tprintf(\"%d\\n\", i);\n\t\t\tfor(reg int j = 1; j <= i; j++) {\n\t\t\t\tprintf(\"%d%c\", i - j + Ask(a[j]), \" \\n\"[j == i]);\n\t\t\t\tAdd(a[j]);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tla = a[i], Add(a[i]);\n\t}\n}\n```",
        "postTime": 1548589456,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting\u3011"
    },
    {
        "content": "### \u3010\u8f6c+\u7ffb\u8bd1\u3011\n\n\u6bd5\u7adf\u8fd9\u662fUSACO\u7684\u9898\uff0c\u5b98\u65b9\u6709\u9898\u89e3\uff0c~~\u5728\u8fd9\u91cc\u7f3a\u5e2d\u4f3c\u4e4e\u4e0d\u592a\u597d~~\uff0c**\u8bb2\u5f97\u5f88\u8be6\u7ec6**\uff0c\u867d\u7136\u548c\u5df2\u6709\u7684\u51e0\u7bc7\u610f\u601d\u76f8\u8fd1\uff0c\u4f46\u6211\u8fd8\u662f\u7ed9\u4e00\u4e0b\u3002\n\n### \u7ffb\u8bd1+\u89e3\u91ca\n\n\u9996\u5148\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u5982\u679c\u7b54\u6848\u662fk\uff0c**\u610f\u5473\u7740\u4ec0\u4e48**\uff1f \u8fd9\u610f\u5473\u7740**\u6700\u540e\u6709n-k\u4e2a\u6570**\u6ca1\u6709\u88ab\u64cd\u4f5c\u8fc7\uff08**\u6ca1\u6709\u88ab\u53d8\u66f4\u8fc7\u987a\u5e8f**\uff09\n\n\n**\u4e5f\u5c31\u662f\u8bf4k\u6709\u4e00\u4e2a\u4e0b\u9650\uff0c\u4e5f\u5c31\u662f\u7b54\u6848**\uff1a\u90a3**n-k\u4e2a\u4e0d\u7528\u53d8\u66f4\u987a\u5e8f\u7684\u6570\u5b57\u4ee5\u5916\u7684\u6570\u5b57**\u5c06\u4f1a**\u63d2\u5165\u5230\u672b\u5c3ek\u4e2a**\u5df2\u7ecf\u6784\u5efa\u987a\u5e8f\u7684**\u5143\u7d20\u4e2d\u7684\u6b63\u786e\u7684\u4f4d\u7f6e**\u4e2d\u3002\n\n**\u4f8b\u5982\uff1a**$(3, 4, 5, 2, (1, 6)) \\rightarrow (4, 5, 2, (1, 3, 6)) \\rightarrow (5, 2, (1, 3, 4, 6)) \\rightarrow (2, (1, 3, 4, 5, 6)) \\rightarrow (1, 2, 3, 4, 5, 6)$\n\n\u73b0\u5728\u6211\u4eec\u8981\u5e72\u7684\uff0c\u5c31\u662f\u5f97\u5230\u90a3\u957f\u5ea6\u4e3an-k\u7684\u6307\u4ee4\u5e8f\u5217\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5728\u961f\u5934\u725b\u7684\u79fb\u52a8\u6b65\u6570\u5373\u662f**\u672a\u6392\u5e8f\u7684\u725b\u6570\u91cf-1\u52a0\u4e0a\u540e\u9762\u5df2\u7ecf\u5efa\u7acb\u987a\u5e8f\u7684\u725b\u4e2d\u5c0f\u4e8e\u961f\u5934\u725b\u7684\u6570\u91cf\u3002** \u4f8b\u5982\u4ee5\u4e0a\u4f8b\u5b50\u4e2d\uff0c\u7b2c\u4e00\u5934\u725b\u9700\u8981\u79fb\u52a83+1\u6b65\u3002\n\n\u6bcf\u6b21\u5b8c\u6210\u8fd9\u4e2a\u64cd\u4f5c\u540e\uff0c\u961f\u5934\u7684\u725b\u5c06\u4f1a\u6210\u4e3a\u5df2\u7ecf\u88ab\u6392\u5e8f\u7684\u725b\u7684\u4e00\u90e8\u5206\u3002**\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e2anaive\u7684\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u6700\u5dee\u80fd\u8fbe\u5230 $O(N^2)$**\n\n~~\u522b\u7070\u5fc3\uff0c\u522b\u53bb\u770b\u4e0b\u4e00\u7bc7\u9898\u89e3\uff0c\u8fd8\u6ca1\u5b8c~~\n\n\u6211\u4eec\u53ef\u4ee5**\u901a\u8fc7\u6570\u636e\u7ed3\u6784\u6765\u4f18\u5316**\u8fd9\u4e2a$N^2$\u73a9\u610f\uff1a**\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408$S \\subseteq \\{1,\\dots,n\\}$\uff0c\u5e76\u53ef\u4ee5\u9ad8\u6548\u5730\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a**\n\n1. \u5f80$S$\u4e2d\u63d2\u5165$x \\in \\{1,\\dots,n\\}$\n2. \u5bf9\u4e8e\u4e00\u4e2a$y \\in \\{1,\\dots,n\\}$\uff0c\u8be2\u95ee\u96c6\u5408\u4e2d\u5c0f\u4e8ey\u7684\u5143\u7d20\u4e2a\u6570\n\n\u6709\u5f88\u591a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u89e3\u51b3\uff0c\u6700\u7b80\u5355\u7684\u6216\u8bb8\u662f\u6811\u72b6\u6570\u7ec4\uff08Fenwick tree\uff09\uff0c\u4e00\u79cd**\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u548c\u533a\u95f4\u67e5\u8be2**\uff08\u95ee\u8be2$A_1 + \\dots + A_i$)\u7684\u6570\u636e\u7ed3\u6784\uff0c~~\uff08\u5982\u4e0d\u4f1a\uff0c\u8bf7\u81ea\u884cB**du)~~\n\n _\u539f\u6587\u4e2d\u7a0d\u7a0d\u5bf9\u5b9e\u73b0\u8fdb\u884c\u4e86\u4e00\u70b9\u89e3\u91ca\uff0c\u4f46\u6211\u8ba4\u4e3a\u6811\u72b6\u6570\u7ec4\u4e0d\u7528\u5728\u8fd9\u91cc\u591a\u8bf4\u4e86_\n \n\u4e24\u79cd\u64cd\u4f5c\u90fd\u53ea\u9700\u8981**\u5bf9\u6570\u7ea7\u522b\u7684\u65f6\u95f4**\uff0c\u7b97\u6cd5\u6267\u884c$O(n)$\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c**\u590d\u6742\u5ea6\u4e5f\u5c31\u662f$O(N \\log N)$**\n\n**\u5bf9\u6211\u7684\u7ffb\u8bd1\u548c\u89e3\u91ca\u6709\u5f02\u8bae\u548c\u7591\u95ee\uff0c\u6b22\u8fce\u8bc4\u8bba\u6216\u79c1\u4fe1\u3002**\n\n\u4ee3\u7801\u89c1\u540e\n\n### \u539f\u6587\n(Analysis by Franklyn Wang and Dhruv Rohatgi)\nWe first ask ourselves, if the answer is $k$, what does that entail? If the answer is $k$, this means that none of the final $n - k$ change their relative order, and that they must already be in order.\n\nThis gives a lower bound on $k$. It turns out that it also gives the answer, since we can insert the other $n - k$ numbers into their correct positions in the last numbers $k$.\n\nFor an example: $(3, 4, 5, 2, (1, 6)) \\rightarrow (4, 5, 2, (1, 3, 6)) \\rightarrow (5, 2, (1, 3, 4, 6)) \\rightarrow (2, (1, 3, 4, 5, 6)) \\rightarrow (1, 2, 3, 4, 5, 6)$\n\nNow we need to find a sequence of instructions of length $n-k$. The first instruction is the number of unsorted cows minus one, plus the number of cows in the sorted suffix with indices smaller than the first cow's index. In the above example, the first cow needs to move $3 + 1$ spaces down the line.\n\nAfter this instruction, the first cow will become part of the sorted suffix, and we recurse. Unfortunately, a naive implementation of this algorithm will take $O(N^2)$ time in the worst case.\n\nWe can speed it up with a data structure that maintains a set $S \\subseteq \\{1,\\dots,n\\}$ and performs the following operations efficiently: (1) For some $x \\in \\{1,\\dots,n\\}$, insert $x$ into $S$; (2) for some $y \\in \\{1,\\dots,n\\}$, count the number of elements of $S$ which are smaller than $y$.\n\nThere are a number of data structures which can solve this; perhaps the simplest is a Fenwick tree, which supports point updates (add $v$ to element $i$ of an array $A$) and prefix sums (given some $i$, compute $A_1 + \\dots + A_i$). Inserting an element $x$ corresponds to incrementing $A_x$, and counting the elements smaller than $y$ corresponds to computing $A_1 + \\dots + A_{y-1}$.\n\nBoth operations take logarithmic time, and the algorithm performs $O(N)$ such operations, for an overall time complexity of $O(N \\log N)$.\n\n```\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#define MAXN 100100\n \nint T[MAXN];\n \nvoid inc(int i)\n{\n\tfor(i++;i<MAXN;i+=(i&-i))\n\t\tT[i]++;\n}\n \nint getSum(int i)\n{\n\tint c = 0;\n\tfor(i++;i>0;i-=(i&-i))\n\t\tc += T[i];\n\treturn c;\n}\n \n \nint p[MAXN];\n \nint main()\n{\n\tint N;\n\tcin >> N;\n\tfor(int i=0;i<N;i++)\n\t{\n\t\tcin >> p[i];\n\t\tp[i]--;\n\t}\n\tint j = N-1;\n\twhile(j > 0 && p[j-1] < p[j])\n\t\tj--;\n\tcout << j << '\\n';\n\tfor(int i=j;i<N;i++)\n\t\tinc(p[i]);\n\tfor(int i=0;i<j;i++)\n\t{\n\t\tcout << (j - 1 - i) + getSum(p[i]);\n\t\tif(i < j - 1) cout << ' ';\n\t\tinc(p[i]);\n\t}\n\tcout << '\\n';\n\treturn 0;\n}\n```",
        "postTime": 1569050554,
        "uid": 170162,
        "name": "Boeing737_MAX_8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting\u3011"
    },
    {
        "content": "\n### \u5341\u5206\u5efa\u8bae\u505a\u8fd9\u9053\u9898\u524d\u628a\u4e24\u9053\u6811\u72b6\u6570\u7ec4\u7684\u6a21\u677f\u9898\u505a\u597d\n\n## \u9898\u76ee\u5927\u610f\n\n\u6709 $n$ \u4e2a\u6570\u5b57\uff0c\u6309\u7167\u6253\u4e71\u7684\u987a\u5e8f\u6392\u653e\u3002\u4f60\u6bcf\u6b21\u53ef\u4ee5\u64cd\u63a7\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u8ba9\u5b83\u5f80\u540e\u79fb\u4efb\u610f\u4f4d\u3002\u6700\u540e\u8981\u6c42\u8fd9\u4e9b\u6570\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5217\u3002\n\n\u7b2c\u4e00\u95ee\u662f\uff1a\u6700\u5c11\u79fb\u52a8\u51e0\u6b21\u53ef\u4ee5\u79fb\u52a8\u5b8c\u3002\n\n\u7b2c\u4e8c\u95ee\u662f\uff1a\u6bcf\u6b21\u79fb\u52a8\u51e0\u4e2a\u3002\n\n\u8fd9\u9053\u9898\u628a\u7b2c\u4e00\u5c0f\u95ee\u505a\u51fa\u6765\u4e86\uff0c\u7b2c\u4e8c\u5c0f\u95ee\u5176\u5b9e\u5c31\u8fce\u5203\u800c\u89e3\u4e86\u3002\n\n## \u5206\u6790\n\u672c\u849f\u84bb\u5f53\u7136\u4e0d\u4f1a\u4e00\u4e0b\u5c31\u60f3\u5230\u6b63\u89e3\uff0c\u4e8e\u662f\u5c31\u968f\u4fbf\u62ff\u4e24\u7ec4\u6570\u636e\u8bd5\u4e86\u8bd5\uff1a\n\n| \u6837\u4f8b | \u79fb\u52a8\u6b21\u6570 |\n| -----------: | -----------: |\n| 124356 | 3 |\n| 342516 | 4 |\n| 516342 | 5 |\n\n\u5230\u8fd9\u91cc\u5176\u5b9e\u5f88\u591a\u5927\u4f6c\u5df2\u7ecf\u53ef\u4ee5\u770b\u51fa\u6765\u4e86\uff0c\u4f46\u672c\u4eba\u6bd5\u7adf\u8fd8\u662f\u849f\u84bb\uff0c\u6ca1\u770b\u51fa\u6765\u89c4\u5f8b\u3002\u56e0\u4e3a\u5bf9\u90a3\u4e9b\u4e0d\u7528\u79fb\u52a8\u7684\u6570\u5b57\u7279\u522b\u70e6\u611f\uff0c\u4e8e\u662f\u51b3\u5b9a\u628a\u5b83\u4eec\u62ff\u51fa\u6765\u7814\u7a76\u7814\u7a76\u3002\n\n| \u6837\u4f8b |\u4e0d\u7528\u79fb\u52a8\u7684\u6570\u5b57| \u79fb\u52a8\u6b21\u6570 |\n| -----------: | -----------: | -----------: |\n| 124356 | 356 | 3 |\n| 342516 | 16 | 4 |\n| 516342 | 2 | 5 |\n\u901a\u8fc7\u4e0a\u56fe\uff0c\u672c\u849f\u84bb\u7ec8\u4e8e\u53d1\u73b0\u4e86\u5176\u4e2d\u7684\u5965\u5999\u3002\n#### \u4e0d\u7528\u79fb\u52a8\u7684\u6570\u5b57\u5176\u5b9e\u5c31\u662f\u4ece\u7ed3\u5c3e\u5f00\u59cb\u5012\u7740\u770b\u7684\u4e0d\u4e0a\u5347\u8fde\u7eed\u5e8f\u5217\n\u6211\u4eec\u6765\u8bc1\u5b9e\u4e00\u4e0b\uff1a\n\n\u56e0\u4e3a\u6700\u540e\u8981\u6392\u5217\u6210\u4e0a\u5347\u5e8f\u5217\uff0c\u5e76\u4e14\u8fd8\u8981\u79fb\u52a8\u6b21\u6570\u6700\u5c11\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a\u524d\u9762\u7684\u6570\u63d2\u5728\u4e00\u4e2a\u6700\u4e00\u5f00\u59cb\u5c31\u4e0a\u5347\u7684\u5b50\u5e8f\u5217\u91cc\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u7528\u79fb\u52a8\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u539f\u672c\u7684\u5143\u7d20\uff0c\u8fbe\u5230\u6700\u5c11\u79fb\u52a8\u7684\u6548\u679c\uff0c\u4f46\u662f\u6bcf\u6b21\u53ea\u80fd\u79fb\u52a8\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5e8f\u5217\u5fc5\u987b\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u6700\u540e\u4e00\u4f4d\u662f\u7ed3\u5c3e\u3002\n\n### \u7b2c\u4e00\u95ee\u5c31\u8fd9\u6837\u641e\u5b9a\u4e86\uff01\n```cpp\n\tint ans;\n\tfor(ans=n;a[ans]>a[ans-1];ans--){\n\t\t......\n\t}\n\t......\n\tcout<<ans<<endl;\n```\n\u505a\u7b2c\u4e8c\u95ee\u7684\u65f6\u5019\u9700\u8981\u770b\u8fd9\u4e2a\u6570\u5728\u7b2c\u4e00\u95ee\u6c42\u51fa\u7684\u4e0d\u7528\u79fb\u52a8\u7684\u6570\u5b57\u4e2d\u5e94\u8be5\u6392\u5728\u7b2c\u51e0\u4f4d\uff0c\u8fd9\u5c31\u7528\u5230\u4e86\u6811\u72b6\u6570\u7ec4\u3002\n\n\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u4e0d\u7528\u79fb\u52a8\u7684\u6570\u5b57\uff0c\u5c31\u5728\u628a\u8fd9\u4e2a\u6570\u5b57\u4f5c\u4e3a\u4e0b\u6807\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u52a0\u4e00\u3002\u4e4b\u540e\u63d2\u5165\u6570\u5b57\u7684\u65f6\u5019\u53ea\u7528\u67e5\u6811\u72b6\u6570\u7ec4\u4e2d\u6709\u591a\u5c11\u4e2a\u6bd4\u5f85\u63d2\u5165\u7684\u6570\u5b57\u5c0f\u7684\u5c31\u53ef\u4ee5\u5f97\u5230\u5f80\u540e\u79fb\u52a8\u51e0\u4f4d\u4e86\u3002\n\n## \u4ee3\u7801\n\u4ee3\u7801\u8fd8\u9700\u8981\u5417\uff1f\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint t[500010],g_n,g_m;//\u672c\u9898\u4e0d\u5f00long long \u4e5f\u53ef\u4ee5\n\nint lowbit(int x){\n\treturn x&-x;\n}\nint g_a[500010];\nvoid modify(int x,int delta){//\u6807\u51c6\u6811\u72b6\u6570\u7ec4\u51fd\u6570\n\tfor(int i=x;i<=g_n;i+=lowbit(i))\n\t\tt[i]+=delta;\n}\n\nint query(int x){\n\tint ans=0;\n\tfor(int i=x;i>0;i-=lowbit(i)){\n\t\tans+=t[i];\n\t}\n\treturn ans;\n}\nint main(){\n\tcin>>g_n;\n\tfor(int i=1;i<=g_n;i++){\n\t\tcin>>g_a[i];\n\t}\n\tint ans;\n\tfor(ans=g_n;g_a[ans]>g_a[ans-1];ans--){//\u7b2c\u4e00\u95ee\n\t\tmodify(g_a[ans],1);\n\t}\n\tmodify(g_a[ans--],1);\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=ans;i++){\n\t\tcout<<ans-i+query(g_a[i])<<\" \";//\u8fd9\u4e2a\u539f\u7406\u4e0a\u9762\u89e3\u91ca\u4e86\n\t\tmodify(g_a[i],1);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1626872494,
        "uid": 422348,
        "name": "Yang818",
        "ccfLevel": 4,
        "title": "p5200"
    },
    {
        "content": "\u4e00\u9053\u5341\u5206\u7ecf\u5178\u7684\u6811\u72b6\u6570\u7ec4\u7684\u9898\u76ee\u3002\n\n\u770b\u5230\u8fd9\u9053\u9898\u76ee\u65f6\uff0c\u6211\u83ab\u540d\u5730\u60f3\u5230\u4e86\u90a3\u9053\u6c42\u5192\u6ce1\u6392\u5e8f\u64cd\u4f5c\u6570\u7684\u9898\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e0e\u90a3\u9053\u9898\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u9053\u9898\u7684\u5bf9\u8c61\u662f\u56fa\u5b9a\u552f\u4e00\u7684\u3002\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u5192\u6ce1\u6392\u5e8f\u7684\u9898\u3002\n\n\u5f88\u5bb9\u6613\uff0c\u6211\u4eec\u80fd\u53d1\u73b0\u8fd9\u4e2a\u8fd9\u4e2a\u5e8f\u5217\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u4f4d\u4e8e\u524d\u6bb5\u7684\u201c\u975e\u6709\u5e8f\u5e8f\u5217\u201d\uff0c\u91cc\u9762\u5305\u542b\u7684\u5143\u7d20**\u4e0d\u662f\u4e00\u76f4\u5355\u8c03\u9012\u589e\u7684**\u3002\u53e6\u4e00\u90e8\u5206\u662f\u4f4d\u4e8e\u540e\u6bb5\u7684\u201c\u6709\u5e8f\u5e8f\u5217\u201d\uff0c\u91cc\u9762\u7684\u5143\u7d20\u80af\u5b9a\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u800c\u7b2c\u4e00\u90e8\u5206\u7684\u672b\u5c3e\uff0c\u5c31\u662f\u4e24\u90e8\u5206\u7684\u5206\u754c\uff0c\u4e5f\u662f\u7b2c\u4e00\u95ee\u7684\u7b54\u6848\u3002\n\n\u8981\u60f3\u6c42\u51fa\u8fd9\u4e2a\u5206\u754c\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u4ece\u540e\u5f80\u524d\u679a\u4e3e\uff0c\u4fdd\u8bc1\u5143\u7d20\u4ece\u540e\u5f80\u524d\u9012\u51cf\u5c31\u884c\u4e86\uff08\u5343\u4e07\u4e0d\u8981\u4ece\u524d\u5f80\u540e\uff0c\u6211\u521a\u5f00\u59cb\u5c31\u662f\u9519\u5728\u8fd9\u91cc\u7684\uff09\u3002\n\n\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u8003\u8651\u524d\u534a\u90e8\u5206\uff0c\u90a3\u662f\u9700\u8981\u64cd\u4f5c\u7684\u90e8\u5206\u3002\n\n\u6211\u4eec\u5c06\u540e\u534a\u90e8\u5206\u4f5c\u4e3a\u53c2\u7167\uff0c\u524d\u534a\u90e8\u5206\u91cc\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3a\u9700\u8981\u79fb\u52a8\u7684\u5bf9\u8c61\uff0c\u4ece\u5de6\u5f80\u53f3\u679a\u4e3e\u5bf9\u8c61\uff0c\u4e00\u4e2a\u5bf9\u8c61\u9700\u8981\u79fb\u52a8\u7684\u8ddd\u79bb\u662f\u5176\u4f4d\u7f6e\u4e0e\u5206\u754c\u7684\u8ddd\u79bb\uff0c\u52a0\u4e0a\u5728\u540e\u534a\u90e8\u5206\u5176\u5e94\u5446\u7684\u4f4d\u7f6e\u4e0e\u5206\u754c\u7684\u8ddd\u79bb\u3002\u8bf4\u8d77\u6765\u6709\u70b9\u7ed5\uff0c\u4f46\u662f\u8bf4\u767d\u4e86\u5c31\u662f\u5728\u540e\u534a\u90e8\u5206\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5176\u524d\u9762\u7684\u5143\u7d20\u521a\u597d\u5c0f\u4e8e\u5f53\u524d\u5bf9\u8c61\uff0c\u540e\u9762\u7684\u5143\u7d20\u521a\u597d\u5927\u4e8e\u5f53\u524d\u5bf9\u8c61\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u4f4d\u7f6e\u4e0e\u5bf9\u8c61\u7684\u4f4d\u7f6e\u6c42\u53d6\u8ddd\u79bb\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5bf9\u8c61\u9700\u8981\u79fb\u52a8\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e8c\u95ee\u7684\u7b54\u6848\u3002\n\n\u8981\u60f3\u5feb\u901f\u6c42\u53d6\u540e\u534a\u90e8\u5206\u4e2d\u6bd4\u5bf9\u8c61\u5c0f\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u7136\u540e\u7528\u6c42\u5728\u7b2c\u4e8c\u90e8\u5206\u91cc\u6709\u591a\u5c11\u6570\u662f\u5c0f\u4e8e\u8fd9\u4e2a\u5bf9\u8c61\u7684\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define Maxn 120000\nusing namespace std;\ntypedef long long ll;\nint n,num[Maxn],ans1;\nstruct Tree{//\u6811\u72b6\u6570\u7ec4 \n\tll tree[Maxn];\n\tll lowbit(ll x){return x&(-x);}\n\tvoid add(ll i,ll x){for(;i<=n;i+=lowbit(i)) tree[i]+=x;}\n\tll search(ll i){ll res=0;for(;i;i-=lowbit(i))res+=tree[i];return res;}\n}t;\nint main(){\n\tscanf(\"%lld\",&n);\n\tans1=n;\n\tfor(ll i=1;i<=n;i++) scanf(\"%lld\",&num[i]);\n\twhile(ans1&&num[ans1-1]<num[ans1]) ans1--;//\u4e00\u5b9a\u8981\u4ece\u540e\u5f80\u524d\u679a\u4e3e \n\tans1--;//\u5206\u754c\u662f\u5728\u7b2c\u4e00\u90e8\u5206\u7684\uff0c\u800c\u6b64\u65f6\u7684 ans1 \u662f\u5728\u7b2c\u4e8c\u90e8\u5206\u7684\u4e34\u754c\u70b9\u7684\uff0c\u6240\u4ee5\u8981\u8df3\u5230\u7b2c\u4e00\u90e8\u5206\u53bb \n\tprintf(\"%lld\\n\",ans1);\n\tfor(ll i=ans1+1;i<=n;i++) t.add(num[i],1);//\u6211\u4eec\u5c06\u7b2c\u4e8c\u90e8\u5206\u5b58\u5165\u6811\u72b6\u6570\u7ec4\u4e2d\u4f5c\u4e3a\u5bf9\u7167 \n\tfor(ll i=1;i<=ans1;i++){printf(\"%lld \",ans1-i+t.search(num[i]));t.add(num[i],1);}//\u7ecf\u5178\u7684\u9006\u5e8f\u5bf9\u95ee\u9898 \n\t//\u79fb\u52a8\u7684\u8ddd\u79bb\u662f\u5f53\u524d\u4f4d\u7f6e\u4e0e\u5206\u754c\u7684\u8ddd\u79bb\u52a0\u4e0a\u5728\u7b2c\u4e8c\u90e8\u5206\u6709\u591a\u5c11\u6570\u662f\u5c0f\u4e8e\u5f53\u524d\u5bf9\u8c61\u70b9\u7684\n\t//\u5728\u5904\u7406\u5b8c\u4e00\u4e2a\u5bf9\u8c61\u540e\uff0c\u6211\u4eec\u8981\u5c06\u5b83\u653e\u5165\u540e\u534a\u90e8\u5206\u4e2d\uff0c\u4e5f\u5c31\u662f\u5b58\u5165\u6811\u72b6\u6570\u7ec4\u4e2d \n\treturn 0;\n}\n```\n",
        "postTime": 1628682110,
        "uid": 387230,
        "name": "lxxwxxxxx",
        "ccfLevel": 0,
        "title": "P5200 [USACO19JAN]Sleepy Cow Sorting G\u9898\u89e3"
    },
    {
        "content": "**[\u5b89\u5229\u4e00\u4e0b\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/linzhengmin/p/11039120.html)**  \n\u62ff\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u601d\u8003\u3002  \n\u6211\u4eec\u628a\u5e8f\u5217\u770b\u505a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5728\u524d\u8868\u793a**\u5f85\u6392\u5e8f**\u7684\uff0c\u8bb0\u4e3a**\u5e8f\u52171**\uff0c\u4e00\u90e8\u5206\u5728\u540e\u8868\u793a**\u5df2\u6392\u5e8f**\u7684\uff0c\u8bb0\u4e3a**\u5e8f\u52172**\u3002  \n\u56e0\u4e3a**\u5e8f\u52172**\u5728\u540e\uff0c\u6240\u4ee5\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u5f71\u54cd**\u5e8f\u52171**\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e**\u5e8f\u52171**\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u663e\u7136\u73c2\u4ee5\u653e\u5230**\u5e8f\u52172**\u7684\u67d0\u4e2a\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u4f7f**\u5e8f\u52172**\u4ecd\u7136\u4fdd\u6301\u6709\u5e8f  \n\u90a3\u4e48\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u9700\u8981\u5c06**\u5e8f\u52171**\u7684**\u6bcf\u4e2a\u5143\u7d20**\u90fd\u79fb\u52a8\u4e00\u6b21\u5373\u53ef\u5b8c\u6210\u6392\u5e8f\uff0c\u8fd9\u663e\u7136\u662f\u6700\u4f18\u7684  \n\u8bb2\u4e00\u4e0b\u521d\u59cb\u5316\uff0c\u5bf9\u4e8e**\u5e8f\u52172**\uff0c\u6211\u4eec\u53d1\u73b0\u663e\u7136\u4ece\u6700\u540e\u4e00\u4e2a\u9006\u5e8f\u5bf9\u7684**\u7b2c\u4e8c\u4e2a\u5143\u7d20**\u5f00\u59cb\u4e00\u76f4\u5230**\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20**\u73c2\u4ee5\u76f4\u63a5\u4f5c\u4e3a**\u5e8f\u52172**\u7684\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5143\u7d20\u6309\u539f\u6765\u7684\u987a\u5e8f\u653e\u5165**\u5e8f\u52171**\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u73c2\u4ee5\u76f4\u63a5\u6a21\u62df\u8fd9\u4e2a\u64cd\u4f5c\u3002  \n\u76ee\u524d\u7684\u590d\u6742\u5ea6\u662f$\\Theta(n^2)$\uff0c\u663e\u7136\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u65e0\u6cd5\u901a\u8fc7\u3002  \n\u90a3\u4e48\u6d88\u8017\u65f6\u95f4\u6bd4\u8f83\u591a\u7684\u90e8\u5206\u662f\u4ec0\u4e48\u5462\uff1f\u5c31\u662f\u5982\u4f55\u627e\u5230**\u5e8f\u52171\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20**\u5728\u5e8f\u52172\u4e2d\u7684**\u5bf9\u5e94\u4f4d\u7f6e**\uff08\u6362\u800c\u8a00\u4e4b\u5c31\u662f\u8ba1\u7b97\u7b54\u6848\uff09\u3002  \n\u6211\u4eec\u9700\u8981\u5728$\\Theta(log_2n)$\u7684\u65f6\u95f4\u5185\u6c42\u51fa**\u5e8f\u52171\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20**\u5728\u5e8f\u52172\u4e2d\u7684**\u5bf9\u5e94\u4f4d\u7f6e**\uff08\u4e3a\u4ec0\u4e48\u662f$\\Theta(log_2n)$\u800c\u4e0d\u662f$\\Theta(1)$\u770b\u6570\u636e\u8303\u56f4\u5c31\u77e5\u9053\u5566\uff09\u3002\u9996\u5148\u6211\u4eec\u53d1\u73b0**\u5e8f\u52172**\u662f\u6709\u5e8f\u7684\uff0c\u65e0\u9700\u6a21\u62df\uff0c\u7136\u540e\u600e\u4e48\u505a\u5462\uff1f\u57fa\u4e8e$\\Theta(log_2n)$\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u795e\u5947\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u5f00\u59cb\u5728**\u5e8f\u52172**\u4e2d\u7684\u6240\u6709\u5143\u7d20\u7684\u4f4d\u7f6e\u4e0a\u63d2\u5165\u4e00\u4e2a1\uff0c\u7136\u540e\u5bf9\u4e8e**\u5e8f\u52171**\u7684\u7b2ci\u4e2a\u5143\u7d20\uff0c\u8bb0\u4e3a$a_i$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2$[1,a_i)$\u6709\u51e0\u4e2a\u6570\u5c31\u77e5\u9053\u7b54\u6848\u4e86\uff0c\u7136\u540e\u518d\u5f80$a_i$\u7684\u4f4d\u7f6e\u4e0a\u63d2\u5165\u4e00\u4e2a1\uff0c\u6301\u7eed\u6a21\u62df\u5373\u53ef\u3002  \n\n\u597d\u4e86\u653e\u4e2a\u4ee3\u7801  \n```cpp\n#include <cstdio>\n#include <vector>\n#define ll long long\n\nusing namespace std;\n\nll read(){\n    ll x = 0; int zf = 1; char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') zf = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); return x * zf;\n}\n\nint p[100005];\nint fen[100005];\n\n#define lowbit(x) (x&(-x))\n\nint n;\n\nvoid add(int pos){\n    for ( ; pos <= n; pos += lowbit(pos)) ++fen[pos];\n}\n\nint query(int pos){\n    int sum = 0;\n    for ( ; pos; pos -= lowbit(pos)) sum += fen[pos];\n    return sum;\n}\n\nvector<int> ans(0); \n\nint main(){\n    n = read(); bool flg = 1;\n    for (int i = 1; i <= n; ++i){\n        p[i] = read();\n        if (p[i] != i) flg = 0;\n    }\n    if (flg){puts(\"0\"); return 0;}\n    int i;\n    for (i = n; i >= 1; --i)\n        if (p[i] < p[i - 1])\n            break;\n    for (int j = i; j <= n; ++j)\n        add(p[j]);\n    for (int j = 1; j < i; ++j){\n        ans.push_back(query(p[j]) + i - j - 1);\n        add(p[j]);\n    }\n    printf(\"%d\\n\", ans.size());\n    for (int j = 0; j < ans.size(); ++j)\n        printf(\"%d%c\", ans[j], ((j == ans.size() - 1) ? '\\n' : ' '));\n    return 0;\n}\n```",
        "postTime": 1560748105,
        "uid": 20462,
        "name": "lukelin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u505a\u51fa\u6765\u7684\u5173\u952e\u5728\u4e8e\u5982\u4f55\u5212\u5206\u5e8f\u5217\u8fdb\u800c\u8fdb\u884c\u8d2a\u5fc3\u6c42\u89e3\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u5e8f\u5217\u622a\u6210\u4e24\u6bb5\uff0c\u524d\u534a\u6bb5\u6ee1\u8db3\u9012\u51cf\uff0c\u7136\u540e\u6211\u4eec\u53ea\u9700\u4fee\u6539\u540e\u534a\u6bb5\u5373\u53ef\u3002\n\n\u800c\u5728\u540e\u534a\u6bb5\u7684\u975e\u5355\u8c03\u5e8f\u5217\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u8be5\u5217\u957f\u5e76\u4f9d\u6b21\u8fdb\u884c\u4fee\u6539\u5373\u53ef\u3002\n\n\u5177\u4f53\u8fdb\u884c\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u7684\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6216\u6570\u72b6\u6570\u7ec4\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u6bd4\u8f83\u597d\u5199\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u590d\u6742\u5ea6\u5927\u6982\u5728O(nlogn)\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\uff1a\n```cpp\ninline int lowbit(int x)\n{\n\treturn x&(-x);//lowbit\n}\n\ninline void adds(int x,int y)\n{\n\tfor(fint i=x;i<=ns;i+=lowbit(i))\n\ttree[i]+=y;\n\treturn ;//\u5355\u70b9\u4fee\u6539\n}\n\ninline int get_tot(int x)\n{\n\tint ans=0;\n\tfor(fint i=x;i;i-=lowbit(i))\n\tans+=tree[i];//\u533a\u95f4\u67e5\u8be2\n\treturn ans;\n}\n```\n\u6811\u72b6\u6570\u7ec4\u7684lowbit\uff0c\u6c42\u548c\uff0c\u4fee\u6539\n\nPS:\u4e0d\u4e86\u89e3\u6811\u72b6\u6570\u7ec4\u7684\u53ef\u4ee5->[\u6811\u72b6\u6570\u7ec4\u6a21\u677f\u9898\u7684\u8bb2\u89e3](https://www.luogu.com.cn/blog/kingxbz/solution-p3368)\uff08\u8d81\u673a\u5b89\u5229\u6211\u7684\u535a\u5ba2\uff09\n\n\u7136\u540e\u662f\u8d2a\u5fc3\u7684\u5b9e\u73b0\uff1b\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528do-while\u5faa\u73af\u7ed3\u6784\uff0c\u5e76\u5b9a\u4e49flag\u4f5c\u4e3a\u5faa\u73af\u8fb9\u754c\u4ee5\u4fbf\u53ca\u65f6\u7ec8\u6b62\n```cpp\ninline void begin_todo()\n{\n\tint now=n+1;\n\tdo\n\t{\n\t\tif(a[n]>now)//\u5982\u679c\u4e0d\u6ee1\u8db3\u9012\u51cf\n\t    cout<<n<<endl,flag=1;\n\t    if(flag)\n\t    for(fint i=1;i<=n;i++)\n\t    cout<<n-i+get_tot(a[i])<<\" \",adds(a[i],1);\n\t    adds(a[n],1),now=a[n];//\u66f4\u65b0\u6700\u957f\u9012\u51cf\u5e8f\u5217\n\t}\n\twhile(n--&&!flag);//\u7ec8\u6b62\u5faa\u73af\u6761\u4ef6\n\treturn ;\n}\n```\n\u6700\u540e\u4e0a\u5b8c\u6574\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define fint register int\n#define p 436534\n#define h 5001\nusing namespace std;\nint n,ns;\nbool flag;\nint tree[p];\nint a[p];\ninline int read();\ninline int lowbit(int x);\ninline void begin_todo();\ninline int get_tot(int x);\ninline void adds(int x,int y);\nsigned main()\n{\n\tn=read(),ns=n;\n\tfor(fint i=1;i<=n;i++)\n\ta[i]=read();\n\tbegin_todo();\n\treturn 0;\n}\n\ninline int read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')\n\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn x*f;\n} \n\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\n\ninline void adds(int x,int y)\n{\n\tfor(fint i=x;i<=ns;i+=lowbit(i))\n\ttree[i]+=y;\n\treturn ;\n}\n\ninline int get_tot(int x)\n{\n\tint ans=0;\n\tfor(fint i=x;i;i-=lowbit(i))\n\tans+=tree[i];\n\treturn ans;\n}\n\ninline void begin_todo()\n{\n\tint now=n+1;\n\tdo\n\t{\n\t\tif(a[n]>now)\n\t    cout<<n<<endl,flag=1;\n\t    if(flag)\n\t    for(fint i=1;i<=n;i++)\n\t    cout<<n-i+get_tot(a[i])<<\" \",adds(a[i],1);\n\t    adds(a[n],1),now=a[n];\n\t}\n\twhile(n--&&!flag);\n\treturn ;\n}\n```\n\u795d\u5927\u5bb6ac\u6109\u5feb",
        "postTime": 1580876027,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u2014\u2014\u2014\u2014[USACO19JAN]Sleepy Cow Sorting"
    },
    {
        "content": "\u60f3\u51fa\u6765\u4e00\u4e2a\u7ed3\u8bba\u7684\u8bdd\u5c31\u53ef\u4ee5\u633a\u987a\u7406\u6210\u7ae0\u5730\u628a\u540e\u9762\u60f3\u51fa\u6765\u4e86\u3002\n\n**\u6bcf\u5934\u725b\u6700\u591a\u88ab\u79fb\u52a8\u4e00\u6b21**\u3002\n\n\u5176\u5b9e\u4e5f\u633a\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u6bcf\u6b21\u53ea\u80fd\u79fb\u52a8\u961f\u5934\u3002\n\n\u8003\u8651\u4ec0\u4e48\u725b\u4e0d\u4f1a\u88ab\u79fb\u52a8\uff0c\u5176\u5b9e\u5c31\u662f\u6700\u540e\u9762\u90a3\u6bb5\u9012\u589e\u5e8f\u5217\u4e0d\u7528\u79fb\u52a8\u3002\u4ece\u540e\u5f80\u524d\u6570\u7b2c\u4e00\u4e2a\u4e0d\n\u9012\u589e\u7684\u6570\uff0c1~\u5b83\u5168\u90fd\u5f97\u79fb\u52a8\uff08\u56e0\u4e3a\u8981\u628a\u524d\u9762\u7684\u79fb\u52a8\u4e86\u624d\u80fd\u79fb\u52a8\u5b83\uff09\u3002\n\n\u800c\u53c8\u7531\u4e0a\u9762\u90a3\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u77e5\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u79fb\u52a8\u7684\u8fc7\u7a0b\u4e2d\u987a\u4fbf\u7ef4\u62a4\u51fa\u5b83\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002\n\u8fd9\u4e2a\u53ef\u4ee5\u7528bit\u89e3\u51b3\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a$j(1\\leq i \\leq x)$\uff08x\u4e3a\u4ece\u540e\u5f80\u524d\u6570\u7b2c\u4e00\u4e2a\u4e0d\u9012\u589e\u7684\u6570\uff09\uff0c\u5b83\u81f3\u5c11\u8981\u5f80\u540e$x-i$\u5934\u725b\uff08\u8fd9\u6837\u624d\u80fd\u628ax\u6254\u5230\u524d\u9762\uff09\uff0c\u7136\u540e\u8003\u8651\u628a\u5b83\u63d2\u5165\u5230\u540e\u9762\u90a3\u4e2a\u9012\u589e\u5e8f\u5217\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u5373\u6bd4\u5b83\u5c0f\u7684\u6570\u6709\u591a\u5c11\u4e2a\uff08\u8fd9\u4e2a\u4e1c\u897f\u7528bit\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4\uff09\u3002\n\n\u90a3\u8fd9\u6837\u7684\u6548\u7387\u5c31\u662f$O(nlogn)$\u7684\u4e86\u3002\n\n~~\u5b89\u5229\u81ea\u5df1\u7684[$blog$](https://www.cnblogs.com/henry-1202/)~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define N 100010\nint c[N], a[N], n, tot, ans[N];\n\n#define lowbit(i) (i&(-i))\nvoid add(int x, int v) {\n    for(int i = x; i <= n; i += lowbit(i)) c[i] += v;\n}\nint query(int x) { int ans = 0;\n    for(int i = x; i; i -= lowbit(i)) ans += c[i];\n    return ans;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i) scanf(\"%d\", &a[i]);\n    int now = n + 1;\n    for(int i = n; i; --i) {\n        if(a[i] > now) {\n            printf(\"%d\\n\", i);\n            for(int j = 1; j <= i; ++j) {\n                printf(\"%d \", i - j + query(a[j]));\n                add(a[j], 1);\n            }\n            puts(\"\");\n            break;\n        }\n        add(a[i], 1); now = a[i];\n    }\n}\n```",
        "postTime": 1554211366,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting\u3011"
    },
    {
        "content": "## \u524d\u8a00\n~~\u7eaa\u5ff5\u8003\u8bd5\u62ff\u4e86\u4e00\u6b21\u6ee1\u5206\u3002~~\n\n## \u9898\u610f\u7b80\u8ff0\n\u6bcf\u6b21\u64cd\u4f5c\u53ef\u5c06\u5e8f\u5217\u9996\u540e\u79fb\u4efb\u610f\u6b65\uff0c\u6c42\u4f7f\u5f97\u5e8f\u5217\u5347\u5e8f\u6392\u5217\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u627e\u5230\u8d2a\u5fc3\u7b56\u7565\uff1a\u627e\u5230\u4ece\u5de6\u5f80\u53f3\u6700\u540e\u4e00\u4e2a\u9012\u51cf\u7684\u4f4d\u7f6e\uff08\u79f0\u4f5c\u76ee\u6807\u4f4d\u7f6e\uff09\uff0c\u5e76\u5c06\u5176\u53ca\u4e4b\u524d\u7684\u6570\u63d2\u5165\u4e4b\u540e\u7684\u5e8f\u5217\u3002\n\n\u6b63\u786e\u6027\u6613\u5f97\uff1a\n- \u5fc5\u8981\u6027\uff1a\u76ee\u6807\u4f4d\u7f6e\u4e4b\u524d\u7684\u6570\u79fb\u52a8\u4e0d\u4f1a\u4f7f\u5f97\u8be5\u4f4d\u7f6e\u7684\u9006\u5e8f\u88ab\u8c03\u6574\uff0c\u56e0\u6b64\u64cd\u4f5c\u81f3\u5c11\u8fdb\u884c\u5230\u76ee\u6807\u4f4d\u7f6e\uff1b\n- \u5145\u5206\u6027\uff1a\u76ee\u6807\u4f4d\u7f6e\u4e4b\u540e\u7684\u5e8f\u5217\u4e00\u5f00\u59cb\u4e3a\u5347\u5e8f\uff1b\u7531\u4e8e\u540e\u79fb\u6b65\u6570\u4efb\u610f\uff0c\u603b\u53ef\u4ee5\u627e\u5230\u4e00\u79cd\u79fb\u52a8\u65b9\u5f0f\uff0c\u4f7f\u76ee\u6807\u4f4d\u7f6e\u4e4b\u524d\u7684\u6570\u63d2\u5165\u5176\u540e\u7684\u5347\u5e8f\u5e8f\u5217\u540e\u4fdd\u6301\u5347\u5e8f\u3002\n\n\u4e4b\u540e\u7ed9\u51fa\u53ef\u884c\u65b9\u6848\uff1a\u5728\u64cd\u4f5c\u8fdb\u884c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u5e94\u5f53\u5c06\u5176\u5411\u540e\u79fb\u81f3\u76ee\u6807\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u79fb\u52a8\u81f3\u5b83\u5728\u5347\u5e8f\u5e8f\u5217\u4e2d\u7684\u5e94\u5904\u4f4d\u7f6e\u3002\u524d\u4e00\u6b65\u5bb9\u6613\u8ba1\u7b97\uff1b\u540e\u4e00\u6b65\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5347\u5e8f\u5e8f\u5217\u4e2d\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u6570\u76ee\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int maxn=1e5;\nint n,pos,c[maxn+1],BIT[maxn+1];\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\nvoid add(int x)\n{\n\tfor(int i=x;i<=n;i+=lowbit(i))\n\t\t++BIT[i];\n\treturn;\n}\nint sum(int x)\n{\n\tint res=0;\n\tfor(int i=x;i;i-=lowbit(i))\n\t\tres+=BIT[i];\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&c[i]);\n\tc[0]=n+1;\n\tfor(int i=n;i;--i)\n\t\tif(c[i]<c[i-1])\n\t\t{\n\t\t\tpos=i;\n\t\t\tbreak;\n\t\t}\n\tprintf(\"%d\\n\",pos-1);\n\tfor(int i=pos;i<=n;++i)\n\t\tadd(c[i]);\n\tfor(int i=1;i<pos;++i)\n\t{\n\t\tprintf(\"%d \",pos-i+sum(c[i])-1);\n\t\tadd(c[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1612781433,
        "uid": 67952,
        "name": "\u767d\u9c9f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting G\u3011"
    },
    {
        "content": "T1 [Cow Poetry](https://www.luogu.com.cn/problem/P5196)\n\n\u9996\u5148\u662f\u5b8c\u5168\u80cc\u5305\u6c42\u65b9\u6848\u6570\u7684\u95ee\u9898\uff0c\u8bb0$f[i][j]$\u8868\u793a\u957f\u4e3a$i$\u7684\u8bd7\u53e5\u97f5\u811a\u4e3a$j$\u7684\u65b9\u6848\u603b\u6570\uff0c\u7531\u4e8e\u5f53\u524d\u5355\u8bcd\u7684\u97f5\u811a\u53ea\u51b3\u5b9a\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u3002\u6240\u4ee5\u5b9e\u9645\u4e0a\u5b83\u53ef\u4ee5\u4ece\u4efb\u610f\u97f5\u811a\u7684\u65b9\u6848\u8f6c\u79fb\u8fc7\u6765\uff08\u53ca\u6ca1\u6709\u4efb\u4f55\u9650\u5236)\u6240\u4ee5\u6211\u4eec\u4ee5$dp[i]$\u8868\u793a\u957f\u4e3a$i$\u7684\u8bd7\u53e5\u7684\u603b\u65b9\u6848\u6570\u3002\n\n\u518d\u4e4b\u540e\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u97f5\u811a\u7684\u8bd7\u53e5\uff0c\u8bb0\u6709$t[i]$\u4e2a\u8fd9\u6837\u7684\u8bd7\u53e5\uff0c\u4ed6\u4eec\u6240\u6709\u7684\u90fd\u6709$s[i]=\\sum_{j=1}^{n}{f[k][j]^{t[i]}}$,\u6700\u540e$ans=\\prod_{i=1}^{26}s[i]$\n```\n#include<bits/stdc++.h>\n#define N 5005\n#define mod 1000000007\n#define ll long long\nusing namespace std;\nint n,k,m;\nint a[N],b[N];\nint f[N][N],dp[N];\nint t[N*10];\nll ksm(ll x,ll y){\n\tll ans=1;\n\twhile(y){\n\t\tif(y&1) ans=(ans*x)%mod;\n\t\tx=(x*x)%mod;\n\t\ty>>=1;\n\t}\n\treturn ans;\n}\nint main(){\n\tfreopen(\"poetry.in\",\"r\",stdin);\n\tfreopen(\"poetry.out\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1;i<=n;i++) scanf(\"%d%d\",&a[i],&b[i]);\n\tfor(int i=1;i<=m;i++){\n\t\tchar c;\n\t\tcin>>c;\n\t\tt[c-'A'+1]++;\n\t}\n\tdp[0]=1;\n\tfor(int i=1;i<=k;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(i>=a[j]){\n\t\t\t\tf[i][b[j]]=(f[i][b[j]]+dp[i-a[j]])%mod;\n\t\t\t\tdp[i]=(dp[i]+dp[i-a[j]])%mod;\n\t\t\t}\n\t\t}\n\t}\n\tll ans=1;\n\tfor(int i=1;i<=26;i++){\n\t\tif(!t[i]) continue;\n\t\tll res=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(f[k][j]) res=(res+ksm(f[k][j],t[i]))%mod;\n\t\tans=(ans*res)%mod;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n\nT2 [Sleepy Cow Sorting](https://www.luogu.com.cn/problem/P5200)\n\n\u4e0d\u96be\u53d1\u73b0\u53ea\u6709\u6700\u540e\u7684\u9012\u589e\u540e\u7f00\u662f\u4e0d\u7528\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u76f4\u63a5\u627e\u51fa\uff0c\u90a3\u4e48\u7b2c\u4e00\u95ee\u5c31\u8fce\u5203\u800c\u89e3\uff0c\u90a3\u4e48\u540e\u9762\u7684\u9012\u589e\u540e\u7f00\u5176\u5b9e\u5c31\u5df2\u7ecf\u662f\u6392\u597d\u5e8f\u7684\u4e86\uff0c\u7b2c\u4e8c\u95ee\u5176\u5b9e\u5c31\u662f\u5728\u95ee\u628a\u4e00\u4e2a\u6570\u63d2\u5165\u5230\u4e00\u4e2a\u5df2\u7ecf\u6709\u5e8f\u7684\u6570\u5217\u4e2d\uff0c\u95ee\u5176\u5e94\u8be5\u653e\u5728\u653e\u5728\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u662f\u518d\u5e73\u8861\u6811\u4e2d\u7684 rank\uff0c\u4f46\u5728\u8fd9\u91cc\u4f7f\u7528\u5e73\u8861\u6811\u672a\u514d\u6709\u70b9\u5927\u9898\u5c0f\u4f5c\u4e86\u3002\n\n\u90a3\u5c31\u7528\u503c\u57df\u6811\u72b6\u6570\u7ec4\u6765\u4ee3\u66ff\u5427\uff01\uff08\u6811\u72b6\u6570\u7ec4\u5176\u5b9e\u53ef\u4ee5\u79bb\u7ebf\u5b9e\u73b0\u5e73\u8861\u6811\uff09\n\n```\n#include<bits/stdc++.h>\n#define N 100010\n#define lb(x) x&-x\nusing namespace std;\nint n,a[N],c[N],ans[N];\nvoid add(int x,int v){\n\tfor(;x<=N;x+=lb(x)) c[x]+=v;\n}\nint ask(int x){\n\tint ans=0;\n\tfor(;x;x-=lb(x)) ans+=c[x];\n\treturn ans;\n}\nint main(){\n\tfreopen(\"sleepy.in\",\"r\",stdin);\n\tfreopen(\"sleepy.out\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tint l=0;\n\tfor(int i=n;i>1;i--){\n\t\tif(a[i-1]>a[i]) break;\n\t\tl++;\n\t\tadd(a[i],1);\n\t}\n\tadd(a[n-l],1);l++;\n\tcout<<n-l<<endl;\n\tfor(int i=1;i<=n-l;i++){\n\t\tadd(a[i],1);\n\t\tans[i]=n-l-i+ask(a[i]-1);\n\t}\n\tfor(int i=1;i<=n-l;i++) printf(\"%d \",ans[i]);\n\treturn 0;\n}\n```\nT3 [Shortcut](https://www.luogu.com.cn/problem/P5201)\n\n\u65b0\u77e5get\uff01\uff01\uff01\n\n\u6700\u77ed\u8def\u6811\n\n\u5bf9\u4e8e\u4e00\u4e2a\u56fe\uff0c\u6211\u4eec\u4ee5\u67d0\u4e2a\u6e90\u70b9\u6765\u8fdb\u884c\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u5047\u5982\u8bf4\u6bcf\u4e00\u6761\u6700\u77ed\u8def\u90fd\u662f\u552f\u4e00\uff0c\u90a3\u4e48\u5c06\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5220\u6389\uff0c\u5269\u4e0b\u7684\u56fe\u662f\u4e00\u4e2a\u6811\u3002\n\n\u8bc1\u660e\u5148\u9e3d\u4e86\u3002\u3002\u3002\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u6211\u4eec\u5c31\u53ea\u7528\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u7531\u4e8e\u725b\u53ea\u4f1a\u8d70\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u8def\u5f84\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u6700\u77ed\u8def\u552f\u4e00\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6700\u77ed\u8def\u6811\u7ed9\u5efa\u51fa\u6765\u3002\u90a3\u4e48\u5982\u679c\u5f53\u524d\u7684\u8282\u70b9$x$\u5411\u6e90\u70b9\u6dfb\u4e86\u4e00\u6761\u8fb9\uff0c\u53ea\u4f1a\u5f71\u54cd$x$\u53ca\u5176\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u4e14\u5f71\u54cd\u7a0b\u5ea6\u90fd\u4e3a$(dis[x]-t)*size[x]$\u3002\uff08$size[x]$\u8868\u793a\u5728\u6700\u77ed\u8def\u6811\u4e0a\u7684\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u70b9\u6743\u548c\n\n```\n#include<bits/stdc++.h>\n#define N 10005\n#define M 50005 \n#define ll long long\nusing namespace std;\nint n,m,t,head[N],idx;\nstruct edge{\n\tint v,next;\n}e[2*N];\nvoid add(int u,int v){\n\te[++idx].v=v;\n\te[idx].next=head[u];\n\thead[u]=idx;\n}\nvector<pair<int,int> > v[N];\nll dis[N];\nbool vis[N];\nvoid dijkstra(){\n\tfor(int i=1;i<=n;i++) dis[i]=1ll<<62;\n\tmemset(vis,0,sizeof(vis));\n\tpriority_queue<pair<ll,int> > q;\n\tdis[1]=0;\n\tq.push(make_pair(0,1));\n\twhile(!q.empty()){\n\t\tint x=q.top().second;\n\t\tq.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(int i=0;i<v[x].size();i++){\n\t\t\tint y=v[x][i].first,w=v[x][i].second;\n\t\t\tif(dis[y]>dis[x]+w){\n\t\t\t\tdis[y]=dis[x]+w;\n\t\t\t\tq.push(make_pair(-dis[y],y));\n\t\t\t}\n\t\t}\n\t}\n}\nll size[N],c[N];\nll ans=0;\nvoid dfs(int x,int fa){\n\tsize[x]=c[x];\n\tfor(int i=head[x];i;i=e[i].next){\n\t\tint y=e[i].v;\n\t\tif(y==fa) continue;\n\t\tdfs(y,x);\n\t\tsize[x]+=size[y];\n\t}\n\tans=max(ans,(ll)(dis[x]-t)*size[x]);\n}\nint main(){\n\tfreopen(\"shortcut.in\",\"r\",stdin);\n\tfreopen(\"shortcut.out\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&n,&m,&t);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&c[i]);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tv[x].push_back(make_pair(y,z));\n\t\tv[y].push_back(make_pair(x,z));\n\t}\n\tfor(int i=1;i<=n;i++) sort(v[i].begin(),v[i].end());\n\tdijkstra();\n\tfor(int x=1;x<=n;x++){\n\t\tfor(int i=0;i<v[x].size();i++){\n\t\t\tint y=v[x][i].first,w=v[x][i].second;\n\t\t\tif(dis[y]+w==dis[x]){\n\t\t\t\tadd(x,y);\n\t\t\t\tadd(y,x);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tdfs(1,0);\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1611963897,
        "uid": 128870,
        "name": "chen_qian",
        "ccfLevel": 7,
        "title": "USACO 2019 January Contest, Gold\u9898\u89e3+\u6700\u77ed\u8def\u6811"
    },
    {
        "content": "\u8d2a\u5fc3\u561b\uff0c\u601d\u8def\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\u3002\u3002\n\n\u5f15\u7528\u524d\u4e00\u7bc7\u5927\u4f6c\u9898\u89e3\u7684\u8bdd\uff0c\u201c\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u6700\u957f\u7684\u4e0a\u5347\u540e\u7f00\uff0c\u6bcf\u4e00\u6b21\u63d2\u5165\u7684\u8bdd\u5c31\u63d2\u5165\u5230\u8fd9\u4e2a\u6570\u5728\u4e0a\u5347\u540e\u7f00\u5e94\u8be5\u5728\u7684\u5730\u65b9\u5c31\u597d\u4e86\u201d\u3002\n\n\u63d2\u5728\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u67e5\u627e\u5f53\u524d\u6570\u5728\u4e0a\u5347\u540e\u7f00\u4e2d\u7684\u6392\u540d\n\u6211\u4e00\u77a7\uff0c\u8fd9\u4e0d\u662f\u660e\u6446\u7740\u7684\u5e73\u8861\u6811\u5417\uff0c\u53ea\u9700\u63d0\u4f9b\u63d2\u5165\u548c\u6392\u540d\u64cd\u4f5c\u5417\uff1f\n\n\u672c\u849f\u84bb\u624b\u6b8b\uff0c\u4e0d\u60f3\u6253\u66ff\u7f6a\u7f8a\uff0c\u4e8e\u662f\u5c31\u7528pbds\u51d1\u5408\u4e86\u3010~~\u4e0d\u8981\u63cd\u6211~~\u3011\n\n\u4e0b\u9762\u8d34\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801....\n\n```\n#pragma comment(linker,\"/STACK:1024000000,1024000000\")\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\n#define ms(a,x) memset(a,x,sizeof a)\n#define sz(x) (int)(x.size())\n#define pb push_back\n#define mkp make_pair\n#define inf 0x3f3f3f3f\n#define N 100005\nusing namespace std;\nusing namespace __gnu_pbds;\nusing ll=long long;\nusing ull=unsigned long long;\nusing pii=pair<int,int>;\nusing Balanced_Tree=tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>;\nBalanced_Tree seq;\nint n,a[N];\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin>>n;\n\tms(a,0x3f);\n\tfor(int i=1;i<=n;i++) cin>>a[i];\n\tfor(int i=n;i&&a[i]<a[i+1];i--) seq.insert(a[i]);\n\tint k=n-sz(seq);\n\tcout<<k<<endl;\n\tfor(int i=1;i<=k;i++){\n\t\tcout<<n-sz(seq)+seq.order_of_key(a[i])-1;\n\t\tif(i!=k) cout<<\" \";\n\t\tseq.insert(a[i]);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1548603913,
        "uid": 62031,
        "name": "ValiZpg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5200 \u3010[USACO19JAN]Sleepy Cow Sorting\u3011"
    }
]