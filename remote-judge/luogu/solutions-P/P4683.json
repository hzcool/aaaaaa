[
    {
        "content": "### \u524d\u8a00\n\n\u7b2c\u4e00\u773c\u770b\u5230\u9898\u76ee\uff0c~~\u6d3b\u5b57\u5370\u5237\u672f\uff1f~~\n\n\u5176\u5b9e\u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a~~\u5f88\u6076\u5fc3\u7684~~\u6253\u5370\u673a\uff0c\u5171\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n1. \u5728\u5f53\u524d\u8bcd\u7684\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\uff1b\n2. \u5728\u5f53\u524d\u6b21\u7684\u5c3e\u90e8\u51cf\u53bb\u4e00\u4e2a\u5b57\u6bcd\uff08\u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u6bcd\u65f6\uff09\uff1b\n3. \u6253\u5370\u5f53\u524d\u8bcd\u3002\n\n\u5176\u6b21\uff0c\u6709\u4e09\u4e2a\u6ce8\u610f\u70b9\uff1a\n\n1. \u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\uff0c\u7528\u8fd9\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7684\u81ea\u8eab\u6765\u8868\u793a\uff1b\n2. \u5220\u53bb\u4e00\u4e2a\u5b57\u6bcd\uff0c\u7528\u51cf\u53f7\u8868\u793a\uff1b\n3. \u6253\u5370\u5355\u8bcd\u65f6\uff0c\u7528 `P` \u8868\u793a\u3002\n\n\u7279\u522b\u7684\uff1a\n\n1. \u6240\u6709\u5355\u8bcd\u90fd\u4e0d\u76f8\u540c\uff1b\n2. \u6253\u5370\u7ed3\u675f\u65f6\uff0c\u5141\u8bb8\u6709\u90e8\u5206\u5b57\u6bcd\u7559\u5728\u6253\u5370\u673a\u5185\uff1b\n3. \u5141\u8bb8\u6309\u7167\u4efb\u610f\u7684\u6b21\u5e8f\u6253\u5370\u5355\u8bcd\u3002\n\n\u8bf4\u53e5\u9898\u5916\u8bdd\uff1a\u8fd9\u6253\u5370\u673a\u8c01\u9020\u7684\u3002\n\n\u4e0b\u9762\u7684\u770b\u61c2\u4e86\u9898\u76ee\u518d\u6765\u770b\u3002\n\n---\n\n### \u601d\u8def\n\n\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6811\u6765\u5b8c\u6210\u3002\n\n\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u70b9\u5927\u5927\u7684\u964d\u4f4e\u4e86\u9898\u76ee\u96be\u5ea6\uff0c\u5c31\u662f `\u6253\u5370\u7ed3\u675f\u65f6\uff0c\u5141\u8bb8\u6709\u90e8\u5206\u5b57\u6bcd\u7559\u5728\u6253\u5370\u673a\u5185`\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0c\u5b57\u5178\u6811\u5f88\u597d\u5730\u5229\u7528\u4e86\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e0a\u4e00\u884c\u51fa\u73b0\u7684\u539f\u56e0\u3002\n\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u64cd\u4f5c\u6570\u5c3d\u53ef\u80fd\u5c11\uff0c\u90a3\u6211\u4eec\u7684\u5220\u9664\u6570\u7684\u64cd\u4f5c\u5c31\u8981\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\n\n\u6211\u4eec\u6765\u6a21\u62df\u4e00\u4e0b\uff08\u6572\u9ed1\u677f\uff09\u3002\n\n\u6ce8\uff1a\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff0c\u6211\u6539\u4e86\u81ea\u5df1\u9020\u7684\u6837\u4f8b\u7684\u987a\u5e8f\u3002\n\n```\n\u8f93\u5165\uff1a\n8\nabcd\nabcdef\ndfg\ndfgr\ndgrt\nplwoe\nplwpo\nplwpoq\n```\n\n\u6784\u5efa\u51fa\u6765\u7684\u6811\u6570\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2tjvqzkn.png)\n\n~~\u7c89\u8272\uff0c\u591f\u6e29\u99a8\u5427\u3002~~\n\n\u867d\u7136\u56fe\u753b\u7684\u6709\u70b9\u4e11\uff0c\u5c06\u5c31\u770b\u5427\u3002\n\n\u8ba9\u6211\u4eec\u770b\u56de\u5230\u4e0a\u9762\u90a3\u53e5\u8bdd\uff1a\n\n> \u5982\u679c\u6211\u4eec\u60f3\u8981\u64cd\u4f5c\u6570\u5c3d\u53ef\u80fd\u5c11\uff0c\u90a3\u6211\u4eec\u7684\u5220\u9664\u6570\u7684\u64cd\u4f5c\u5c31\u8981\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\n\n\u600e\u4e48\u6837\uff0c\u770b\u51fa\u5b57\u5178\u6811\u7684\u7279\u5f81\u4e86\u5427\u3002\n\n\u5148\u8bb2\u600e\u4e48\u904d\u5386\u3002\n\n\u6211\u4eec\u4ee5\u4e2d\u95f4\u90a3\u4e00\u5768\u4e3a\u4f8b\uff1a\n\n- \u5148\u904d\u5386 `d`\uff0c\u7136\u540e\u5f00\u59cb\u641c\u7d22\u6240\u6709\u5b50\u6811\uff1b\n- \u53d1\u73b0\u4e86 `f`\uff0c\u7ee7\u7eed\u5f80\u4e0b\u641c\u7d22\uff1b\n- \u9047\u5230\u4e86 `g`\uff0c\u53d1\u73b0\u662f\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e\uff0c\u8f93\u51fa\uff0c\u8fd8\u6709\u5b50\u6811\uff0c\u7ee7\u7eed\u5f80\u4e0b\uff1b\n- \u9047\u5230\u4e86 `r`\uff0c\u53d1\u73b0\u662f\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e\uff0c\u8f93\u51fa\uff0c\u53d1\u73b0\u6ca1\u4e86\uff0c\u505c\u6b62\u3002\n\n\u5567\uff0c\u662f\u56de\u6eaf\u3002\n\n\u6211\u4eec\u8981\u5220\u5230\u53ef\u4ee5\u7ee7\u7eed\u641c\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684 dfs \u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\nfor(int i = 0; i < 26; i++){\n  if(\u5b58\u5728\u8be5\u5b50\u8282\u70b9 && \u8fd8\u6709\u4e00\u4e2a\uff0c\u4e0b\u9762\u4f1a\u8bf4){\n    \u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32 += \u8be5\u5b50\u8282\u70b9;\n    dfs(\u8be5\u5b50\u8282\u70b9);\n    \u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32 += '-';\n  }\n}\n```\n\n\u597d\u8036\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u6709\u4eba\u8981\u95ee\u4e86\uff0c\u4e0d\u5e94\u8be5\u5148\u904d\u5386\u66f4\u77ed\u7684\u5b50\u6811\u5417\uff1f\u8fd9\u4e0d\u662f\u5220\u9664\u6570\u91cf\u66f4\u5c11\u5417\uff1f\n\n\u5bf9\uff0c\u8fd9\u5c31\u662f\u53e6\u5916\u4e00\u4e2a\u91cd\u70b9\u3002\n\n\u5728\u8f93\u5165\u65f6\uff0c\u6211\u4eec\u5b58\u4e0b\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u7ed9\u8be5\u5b57\u7b26\u4e32\u5728\u6811\u4e2d\u6253\u6807\u8bb0\u3002\n\n\u4ee5\u8fd9\u4e2a\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u60f3\u8981\u5220\u5f97\u66f4\u5c11\uff0c\u521a\u521a\u597d `plwpoe` \u8fd9\u4e00\u6761\u4e0d\u7528\u5220\u3002\n\n\u5176\u4f59\u7684\u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5fc5\u5220\u7684\u3002\n\n\u800c `plwpoe` \u8fd9\u4e00\u6761\u662f\u8f93\u5165\u4e2d\u6700\u957f\u7684\u3002\n\n\u563f\u563f\uff0c\u61c2\u4e86\u5417\u3002\n\n\u6211\u4eec\u5728\u8f93\u5165\u7684\u65f6\u5019\u8bb0\u4e0b\u6700\u957f\u7684\uff0c\u4e8b\u540e\u6807\u8bb0\u4e00\u4e0b\uff0c\u4f18\u5148\u904d\u5386\u6ca1\u6709\u6807\u8bb0\u7684\uff0c\u8fd9\u6837\u5220\u7684\u6b21\u6570\u6700\u5c11\u3002\n\n\u6807\u8bb0\u7684\u51fd\u6570\u4e5f\u5f88\u7b80\u5355\u3002\n\n```cpp\nvoid mark(string s){\n  int p = 0; // \u5f53\u524d\u904d\u5386\u7684\u5b50\u6811\u7684\u6839\n  for(int i = 0; s[i]; i++){ //\u904d\u5386\uff0c\u5b57\u7b26\u4e32 s \u5fc5\u5b58\u5728\n    int x = s[i] - 'a';\n    tick[p][x] = 1; // \u6807\u8bb0\n    p = tree[p][x]; // \u4e0b\u4e00\u4e2a\n  }\n}\n```\n\n---\n\n### \u4ee3\u7801\n\n\u63d2\u5165\uff1a\n\n```cpp\ninline void insert(string s)\n{\n    int p = 0;\n    for (int i = 0; s[i]; i++) {\n        int x = s[i] - 'a';\n        if (!tree[p][x])\n            tree[p][x] = ++ind; // \u5efa\u70b9\n        le[tree[p][x]] = x + 'a'; // \u8bb0\u5f55\n        p = tree[p][x];\n    }\n    en[p] = 1; //\u6807\u8bb0\u7ed3\u5c3e\n}\n```\n\n\u6807\u8bb0\u6700\u957f\uff1a\n\n```cpp\ninline void mark(string s)\n{\n    int p = 0;\n    for (int i = 0; s[i]; i++) {\n        int x = s[i] - 'a';\n        k[tree[p][x]] = 1;\n        p = tree[p][x];\n    }\n}\n```\n\ndfs\uff1a\n\n```cpp\ninline void dfs(int x)\n{\n    if (en[x] == 1 && x != 0) {\n        ans++;\n        output += \"P\";\n    }\n\n    if (ans == n) {\n        cout << output.size() << endl;\n        for (int i = 0; output[i]; i++)\n            cout << output[i] << endl;\n        return;\n    }\n\n    int reg;\n    for (int i = 0; i < 26; i++) {\n        reg = tree[x][i];\n        if (k[reg] == 0 && reg != 0) {\n            output += le[reg];\n            dfs(reg);\n            output += \"-\";\n        }\n    }\n\n    for (int i = 0; i < 26; i++) {\n        reg = tree[x][i];\n        if (k[reg] && reg) {\n            output += le[reg];\n            dfs(reg);\n            output += \"-\";\n        }\n    }\n}\n```\n\n\u5176\u5b9e\u6211\u683c\u5f0f\u5316\u4e86\u4ee3\u7801\uff0c\u4f46\u662f\u539f\u7801\u98ce\u633a\u6b63\u5e38\u7684\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6 + 10;\n\nbool en[N]; // \u7ed3\u5c3e\nbool k[N]; // \u6807\u8bb0\nchar le[N]; // \u8bb0\u5f55\u6811\u7684\u51e0\u53f7\u8282\u70b9\u4e3a\u4ec0\u4e48\nint tree[N][26];\n\nint n, m, ind, ans;\nstring s, output, l;\n\ninline void insert(string s)\n{\n    int p = 0;\n    for (int i = 0; s[i]; i++) {\n        int x = s[i] - 'a';\n        if (!tree[p][x])\n            tree[p][x] = ++ind; // \u5efa\u70b9\n        le[tree[p][x]] = x + 'a'; // \u8bb0\u5f55\n        p = tree[p][x];\n    }\n    en[p] = 1; //\u6807\u8bb0\u7ed3\u5c3e\n}\n\ninline void mark(string s)\n{\n    int p = 0;\n    for (int i = 0; s[i]; i++) {\n        int x = s[i] - 'a';\n        k[tree[p][x]] = 1;\n        p = tree[p][x];\n    }\n}\n\ninline void dfs(int x)\n{\n    if (en[x] == 1 && x != 0) {\n        ans++;\n        output += \"P\";\n    }\n\n    if (ans == n) {\n        cout << output.size() << endl;\n        for (int i = 0; output[i]; i++)\n            cout << output[i] << endl;\n        return;\n    }\n\n    int reg;\n    for (int i = 0; i < 26; i++) {\n        reg = tree[x][i];\n        if (k[reg] == 0 && reg != 0) {\n            output += le[reg];\n            dfs(reg);\n            output += \"-\";\n        }\n    }\n\n    for (int i = 0; i < 26; i++) {\n        reg = tree[x][i];\n        if (k[reg] && reg) {\n            output += le[reg];\n            dfs(reg);\n            output += \"-\";\n        }\n    }\n}\n\nint main()\n{\n\n    cin >> n;\n    getchar();\n    for (int i = 1; i <= n; i++) {\n        cin >> s;\n        insert(s);\n        if (l.size() < s.size())\n            l = s;\n    }\n\n    mark(l);\n    dfs(0);\n\n    return 0;\n}\n```\n\n\u8bf4\u4e24\u53e5\u9898\u5916\u8bdd\uff1a\n\n1. \u6211\u4e00\u5f00\u59cb\u4e00\u8fb9\u63d2\u5165\u4e00\u8fb9\u6807\u8bb0\uff1b\n2. \u5927\u5199\u6253\u6210\u4e86\u5c0f\u5199\u3002\n\n\u6ca1\u4eba\u50cf\u6211\u8fd9\u6837\u5427\uff08\u5c0f\u58f0\uff09\u3002",
        "postTime": 1675170678,
        "uid": 781159,
        "name": "wind_kaka",
        "ccfLevel": 0,
        "title": "P4683 \u8be6\u89e3"
    },
    {
        "content": "~~\u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u4e2aTrie\u6811\u677f\u5b50\u9898~~\uff08\u9003\n\n\u9898\u76ee\u5927\u610f\u662f\u7ed9\u4f60\u82e5\u5e72\u4e2a\u5355\u8bcd\uff0c\u4ee5\u53ca\u4e00\u53f0\u6253\u5370\u673a= =\n\n\u4f60\u73c2\u4ee5\u5bf9\u8fd9\u4e2a\u6253\u5370\u673a\u8fdb\u884c3\u79cd\u64cd\u4f5c\uff1a\n\n\u2460\uff1a\u5728\u6253\u5370\u673a\u672b\u7aef\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26(\u8f93\u51fa\u6dfb\u52a0\u7684\u5355\u8bcd)\n\n \u2461\uff1a\u5220\u9664\u6253\u5370\u673a\u672b\u7aef\u7684\u5355\u8bcd(\u8f93\u51fa\u4e00\u4e2a '**-**' )\n\n\u2462\uff1a\u6253\u5370\u8be5\u5355\u8bcd(\u8f93\u51fa\u4e00\u4e2a**P**\uff09\n\n\u8981\u6c42\u4f60\u5728**\u6700\u5c11**\u7684\u6b65\u9aa4\u5185\u6253\u5370\u51fa\u6240\u6709\u5355\u8bcd\u5e76\u8f93\u51fa\u4f60\u7684\u64cd\u4f5c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6253\u5370\u673a\u60f3\u8c61\u6210\u4e00\u4e2a\u5927\u7684\u5b57\u7b26\u4e32, \u2460\u64cd\u4f5c\u5c31\u662f\u5728\u5b57\u7b26\u4e32\u672b\u5c3e**\u6dfb\u52a0**\u4e00\u4e2a\u5b57\u7b26,\u2461\u64cd\u4f5c\u5c31\u662f**\u5220\u53bb**\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u4e00\u4e2a\u5b57\u7b26,\u2462\u64cd\u4f5c\u5c31\u662f\u6253\u5370\u5f53\u524d\u7684\u5b57\u7b26\u4e32\u3002\n\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u770b\u8d77\u6765\u5f88\u7b80\u5355\u4e86\uff08\u5176\u5b9e\u4ee3\u7801\u4e5f\u5f88\u7b80\u53550-0\uff09\n\u6211\u4eec\u53ea\u9700\u8981\u5728Trie\u6811\u4e0a\u904d\u5386\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u9898\u76ee\u8981\u6c42\u7684\u662f\u6700\u5c11\u7684\u64cd\u4f5c,\u6240\u4ee5\u6211\u4eec\u8981\u601d\u8003\u4e00\u4e0b\u600e\u4e48\u53bb\u51cf\u5c11\u64cd\u4f5c\u3002\n\n\u663e\u7136\uff0c\u6240\u6709\u5355\u8bcd\u90fd\u662f\u8981\u904d\u5386\u4e00\u904d\u7684\uff0c\u6211\u4eec\u65e0\u6cd5\u7f29\u51cf\u8fd9\u4e2a\u6b21\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u601d\u8003\u600e\u4e48\u51cf\u5c11\u5220\u9664\u6b21\u6570\u3002\n\n\u6839\u636e\u9898\u610f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a\u6211\u4eec\u5728\u6253\u5370\u5b8c\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u65f6\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\u7ed3\u675f\u7a0b\u5e8f\uff0c\u4e0d\u7528\u518d\u53bb\u5c06\u6253\u5370\u673a\u6e05\u7a7a\u3002\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u51fa\u4e00\u79cd\u65b9\u6cd5\uff1a\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6700\u957f\u7684\u5355\u8bcd\u653e\u5728\u6700\u540e\u53bb\u6253\u5370\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5c3d\u91cf\u51cf\u5c11\u5220\u9664\u6b21\u6570\u4e86\uff08\u56e0\u4e3a\u5355\u8bcd\u6700\u957f\u6240\u4ee5\u5220\u9664\u6b21\u6570\u4e5f\u5c31\u6700\u591a\uff09\u3002\n\n\u8fd9\u4e2a\u601d\u8def\u5bf9\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\u662f\u5bf9\u7684\u3002\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5bf9\u8fd9\u4e9b\u5355\u8bcd\u5efa\u6811\uff0c\u5e76\u5728\u8f93\u5165\u7684\u8fc7\u7a0b\u4e2d\u627e\u5230\u6700\u957f\u7684\u5355\u8bcd\uff0c\u5728\u63d2\u5165\u8fd9\u4e2a\u5355\u8bcd\u65f6\uff0c\u8dd1\u4e00\u904ddfs\u5c06\u4ece\u6839\u8282\u70b9\uff080\u53f7\u8282\u70b9\uff09\u5230\u8fd9\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\u4e4b\u95f4\u7684\u8def\u5f84\uff08\u540e\u9762\u4e3a\u4e86\u65b9\u4fbf\u6211\u81ea\u5df1\u79f0\u4e4b\u4e3a\u6700\u957f\u5355\u8bcd\u8def\u5f84\uff09\u4e0a\u7684\u8282\u70b9\u90fd\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u904d\u5386\u7684\u65f6\u5019\u4f18\u5148\u53bb\u8dd1\u6ca1\u6709\u6807\u8bb0\u7684\u8282\u70b9\u3002\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u5b8c\u6210\u4e86\u3002\n\nCODE\uff1a\n\n\nTrie\u5efa\u6811\u57fa\u672c\u64cd\u4f5c\uff1a\n```cpp\nvoid ins(string a){\n\tint u=0;//\u4e3a\u4e86\u65b9\u4fbf\u6839\u8282\u70b9\u4e3a0\uff0c\u4ece0\u5f00\u59cb\u63d2\u5165\n\tfor(int i=0;a[i];i++){//\u4e2a\u4eba\u4e60\u60ef\u8fd9\u79cd\u5b57\u7b26\u4e32\u904d\u5386\u65b9\u6cd5\n\t\tint now=a[i]-'a';//\u6839\u636e\u60c5\u51b5\u51b3\u5b9a\u51cf\u20180\u2019\u8fd8\u662f\u2018a\u2019\n\t\tif(tr[u][now]==0) tr[u][now]=++cnt;\n\t\tle[tr[u][now]]=now+'a';//\u53cd\u5411\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u6240\u5b58\u7684\u5b57\u6bcd\n\t\tu=tr[u][now];//\u66f4\u65b0\u5f53\u524d\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u5411\u4e0b\u63d2\u5165\n\t}\n\tp[u]=1;//\u6253\u4e0a\u7ed3\u5c3e\u6807\u8bb0\n}\n```\n\u5efa\u6811\u8fc7\u7a0b\u4e2d\u7684dfs\uff1a\n```cpp\nvoid dfs(string a){\n\tint u=0;\n\tfor(int i=0;a[i];i++){  // \u5c06\u4ece\u6700\u957f\u5355\u8bcd\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u5168\u90fd\u6253\u4e0a\u6807\u8bb0 \n\t\tint now=a[i]-'a';\n\t\tk[tr[u][now]]=1;\n\t\tu=tr[u][now];\n\t}\n}\n```\n\n\u904d\u5386\u7684\u8bdd\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff1a\n```cpp\nvoid solve(int now){   //now \u4e3a\u5f53\u524d\u4f4d\u7f6e\u8282\u70b9\u7f16\u53f7\n\tif(p[now]==1){    //\u5982\u679c\u662f\u5355\u8bcd\u7ed3\u5c3e \n\t\tans++;\t\t //\u5df2\u6253\u5370\u7684\u5355\u8bcd\u6570\u52a0\u4e00 \n\t\tss+=\"P\";\t//\u76f4\u63a5\u6253\u5370\uff0c\u8f93\u51faP \n\t}\t\n\t\n\tif(ans==n){\t  //\u5982\u679c\u5df2\u7ecf\u5168\u90e8\u6253\u5370\u5b8c\u4e86 \n\t\tcout<<ss.size()<<endl;  //\u8f93\u51fa\u64cd\u4f5c\u6b65\u6570 \n\t\tfor(int i=0;ss[i];i++){\n\t\t\tcout<<ss[i]<<endl;  //\u8f93\u51fa\u64cd\u4f5c\u987a\u5e8f \n\t\t}\n\t}\n\t \n\tfor(int i=0;i<26;i++){\t\t//\u679a\u4e3e26\u4e2a\u5b57\u6bcd\u770b\u662f\u5426\u6709\u8def\u5f84 \n\t\tif(k[tr[now][i]]==0&&tr[now][i]!=0){  //\u5982\u679c\u5b58\u5728\u8be5\u8282\u70b9\u5e76\u4e14\u4e0d\u662f \u6700\u957f\u7684\u5355\u8bcd\u8def\u5f84\u4e0a\u7684\u8282\u70b9 \n\t\t\t\n\t\t//\tsystem(\"pause\");\n\t\t\tss+=le[tr[now][i]];\t\t//\u5c06\u5f53\u524d\u5b57\u6bcd\u6dfb\u52a0\u5165\u6253\u5370\u673a \n\t\t\tsolve(tr[now][i]);\t\t//\u7ee7\u7eed\u5411\u4e0b\u904d\u5386 \n\t\t\tss+=\"-\";\t\t\t\t//\u904d\u5386\u5b8c\u540e\u56de\u6eaf\u65f6\u8981\u5c06\u5b57\u6bcd\u5220\u9664\uff0c\u6240\u4ee5\u8f93\u51fa - \n\t\t}\n\t}\n\t\n\tfor(int i=0;i<26;i++){\t\t\t//\u5c06\u6709\u6807\u8bb0\u7684\u8282\u70b9\u653e\u5728\u6700\u540e\u53bb\u8dd1 \n\t\tif(k[tr[now][i]]==1&&tr[now][i]!=0){\t//\u56e0\u4e3a\u6ca1\u6709\u6807\u8bb0\u7684\u8282\u70b9\u5728\u4e4b\u524d\u90fd\u5df2\u7ecf\u904d\u5386\u5b8c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u9700\u8981\u904d\u5386\u6709\u6807\u8bb0\u7684 \n\t\t\tss+=le[tr[now][i]];\t\t\t\t   //\u64cd\u4f5c\u540c\u4e0a \n\t\t\tsolve(tr[now][i]);\t\n\t\t\tss+=\"-\";\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\n}\n```\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u7b97\u662f\u5b8c\u4e8b\u4e86\u3002\n\n\n  AC\u4ee3\u7801\uff1a\n[\u6233\u8fd9\u91cc](https://www.luogu.com.cn/paste/7yrajunm)\n\n**\u7ed3\u8bed:**\n\n\u8fd9\u9053\u9898\u62ff\u6765\u7ec3Trie\u633a\u597d\u7684\uff0c\u8fd8\u6709\u5176\u4ed6\u51e0\u9053Trie\u7684\u7ec3\u624b\u9898\uff1a\n\n[P2922](https://www.luogu.com.cn/problem/P2922)\n\n                                              \n[UVA11362](https://www.luogu.com.cn/problem/UVA11362)\n\n[P3879](https://www.luogu.com.cn/problem/P3879)\n\n**\u6700\u540e\u795d\u5927\u5bb62020NOIP RP++**\n\n\n\n\n\n\n\n",
        "postTime": 1606444757,
        "uid": 106103,
        "name": "Rikka__",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u9898\u76ee\u544a\u8bc9\u4e86\u6211\u4eec\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\uff0c\u800c\u4e14\u7a7a\u95f4\u5141\u8bb8\uff0c\u6240\u4ee5\u660e\u663e\u9700\u8981\u5efa\u51fa\u5b57\u5178\u6811\u3002   \n``` cpp\nvoid add(string s)\n{\n\tint now=0;\n\tint n=s.length();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(a[now].nxt[s[i]-'a']==0)\n\t\t{\n\t\t\tss++;\n\t\t\ta[now].nxt[s[i]-'a']=ss;\n\t\t}\n\t\tnow=a[now].nxt[s[i]-'a'];\n\t}\n\ta[now].end=true;\n}\n```   \n\u7136\u540e\u4ee5\u8d2a\u5fc3\u7684\u601d\u8def\u89e3\u9898\uff0c\u9898\u76ee\u8981\u6c42\u64cd\u4f5c\u6b21\u6570\u6700\u5c11\uff0c\u6240\u4ee5\u8981\u5c3d\u53ef\u80fd\u591a\u5229\u7528\u4ee5\u524d\u6253\u51fa\u7684\u5b57\u6bcd\uff0c\u4e8e\u662f\u5c31\u8981\u4ee5\u6700\u957f\u7684\u5355\u8bcd\u4e3a\u57fa\u7840\u6253\u5b57\u3002   \n\u4e8e\u662f\u8003\u8651\u5728\u6700\u957f\u5355\u8bcd\u7684\u6240\u6709\u5b57\u6bcd\u4e0a\u52a0\u4e0a\u6807\u8bb0\uff0c\u6700\u540e\u8d70\u3002   \n``` cpp\nvoid mark(string s)\n{\n\tint now=0;\n\tint n=s.length();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tnow=a[now].nxt[s[i]-'a'];\n\t\ta[now].use=true;\n\t}\n}\n```   \n\u6700\u540e\u660e\u663e\u5e94\u5bf9\u6574\u68f5trie\u8fdb\u884cdfs\uff0cdfs\u5e8f\u5c31\u662f\u64cd\u4f5c\u5e8f\u5217\u3002   \n\u6ce8\u610f\uff1a\u5728\u5df2\u7ecf\u5b8c\u6210\u6253\u5b57\u4e4b\u540e\u5c31\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u5220\u5b57\u6bcd\u64cd\u4f5c\u4e86\u3002   \n``` cpp\nvoid dfs(int now)\n{\n\tint mark=-1;\n\tif(a[now].end==true)\n\t{\n\t\tans[++sum]='P';\n\t}\n\tfor(int i=0;i<26;i++)\n\t{\n\t\tif(a[a[now].nxt[i]].use==true)\n\t\t{\n\t\t\tmark=i;\n\t\t}\n\t\telse if(a[now].nxt[i]!=0)\n\t\t{\n\t\t\tans[++sum]=i+'a';\n\t\t\tdfs(a[now].nxt[i]);\n\t\t}\n\t}\n\tif(mark!=-1)\n\t{\n\t\tans[++sum]=mark+'a';\n\t\tdfs(a[now].nxt[mark]);\n\t}\n\tif(mark==-1&&a[now].use==true)\n\t{\n\t\tok=true;\n\t}\n\tif(ok==false)\n\t{\n\t\tans[++sum]='-';\n\t}\n}\n```   \n\u6700\u540e\u8f93\u51fa\u7b54\u6848\u5c31\u884c\u4e86\u3002   \n#### \u653e\u4ee3\u7801\u4e4b\u524d\uff0c\u9884\u795d\u5404\u4f4dOIer NOIP2018 RP++   \n\u6700\u540e\uff0c\u9644\u4e0a\u5b8c\u6574AC\u7684\u4ee3\u7801\uff1a\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Node\n{\n\tint nxt[26];\n\tbool use;\n\tbool end;\n};\nNode a[500005];\nchar ans[1000005];\nint sum;\nint ss;\nvoid add(string s)\n{\n\tint now=0;\n\tint n=s.length();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(a[now].nxt[s[i]-'a']==0)\n\t\t{\n\t\t\tss++;\n\t\t\ta[now].nxt[s[i]-'a']=ss;\n\t\t}\n\t\tnow=a[now].nxt[s[i]-'a'];\n\t}\n\ta[now].end=true;\n}\nvoid mark(string s)\n{\n\tint now=0;\n\tint n=s.length();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tnow=a[now].nxt[s[i]-'a'];\n\t\ta[now].use=true;\n\t}\n}\nbool ok=false;\nvoid dfs(int now)\n{\n\tint mark=-1;\n\tif(a[now].end==true)\n\t{\n\t\tans[++sum]='P';\n\t}\n\tfor(int i=0;i<26;i++)\n\t{\n\t\tif(a[a[now].nxt[i]].use==true)\n\t\t{\n\t\t\tmark=i;\n\t\t}\n\t\telse if(a[now].nxt[i]!=0)\n\t\t{\n\t\t\tans[++sum]=i+'a';\n\t\t\tdfs(a[now].nxt[i]);\n\t\t}\n\t}\n\tif(mark!=-1)\n\t{\n\t\tans[++sum]=mark+'a';\n\t\tdfs(a[now].nxt[mark]);\n\t}\n\tif(mark==-1&&a[now].use==true)\n\t{\n\t\tok=true;\n\t}\n\tif(ok==false)\n\t{\n\t\tans[++sum]='-';\n\t}\n}\nint main()\n{\n\tint n;\n\tcin>>n;\n\tstring a;\n\tstring maxn;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a;\n\t\tadd(a);\n\t\tif(a.length()>maxn.length())\n\t\t{\n\t\t\tmaxn=a;\n\t\t}\n\t}\n\tmark(maxn);\n\tdfs(0);\n\tcout<<sum<<endl;\n\tfor(int i=1;i<=sum;i++)\n\t{\n\t\tprintf(\"%c\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540436774,
        "uid": 70780,
        "name": "wasa855",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "# \u9898\u610f\u63cf\u8ff0\n\n[[IOI2008] Type Printer \u6253\u5370\u673a](https://www.luogu.com.cn/problem/P4683)\n\n\u51e0\u767e\u5e74\u524d\u7684 IOI \u7684\u9898\u76ee\u8fd8\u662f\u5f88\u597d\u7684\u5440\u3002\n\n\u7ed9\u4f60\u4e00\u4e2a ~~\u8be1\u5f02\u7684~~ \u6253\u5370\u673a\uff0c\u5b83\u53ea\u80fd\u7528\u5df2\u6709\u7684\u5b57\u7b26\u6765\u6253\u5370\uff0c\u800c\u4e14\u5fc5\u987b\u6bcf\u4e00\u4e2a\u90fd\u7528\u5230\u3002\uff08\u8fd9\u5c82\u4e0d\u662f\u6d3b\u5b57\u5370\u5237\u672f\uff09\n\n\u4f60\u53ef\u4ee5\u5bf9\u5176\u6267\u884c\u4e09\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u6253\u5370\uff0c\u7528\u5927\u5199\u5b57\u6bcd P \u8868\u793a\uff0c\u8f93\u51fa\u987a\u5e8f\u4efb\u610f\uff0c\u4f46\u4ec5\u80fd\u4e14\u5fc5\u987b\u7528\u5230\u5f53\u524d\u6253\u5370\u673a\u91cc\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u3002\n2. \u63d2\u5165\uff0c\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26 c\uff0c\u8868\u793a\u5728\u6253\u5370\u673a\u4e2d\u63d2\u5165\u5b57\u7b26 c\u3002\uff08\u6253\u5370\u673a\u7684\u5b58\u50a8\u662f\u4e00\u4e2a\u961f\u5217\uff09\n3. \u5220\u9664\uff0c\u4ece\u961f\u5217\u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u3002\n\n\u7ed9\u5b9a $N$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u95ee\u5f53\u524d\u9700\u8981\u81f3\u5c11\u591a\u5c11\u6b65\u624d\u80fd\u5b8c\u6210\u6240\u6709\u6253\u5370\u3002\n\n# \u7b97\u6cd5\u5206\u6790\n\n\u8003\u8651\u53ef\u7231\u7684 $trie$ \u6811\uff0c\u5148\u5efa\u4e00\u68f5\u6811\uff0c\u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u5efa\u597d\u4e86\u3002\uff08\u5982\u679c\u4e0d\u4f1a ~~\u4f60\u505a\u8fd9\u9053\u9898\u5e72\u4ec0\u4e48~~ \u53ef\u4ee5\u770b\u770b[\u8fd9\u7bc7\u6587\u7ae0](https://www.cnblogs.com/lpf-666/p/12463685.html)\uff09\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u9898\u76ee\u53d8\u6210\u4e86\uff1a\u786e\u5b9a\u4e00\u4e2a $DFS$ \u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u904d\u5386\u5230\uff0c\u5e76\u4e14\u7ed3\u675f\u4e8e\u67d0\u4e2a\u53f6\u8282\u70b9\u3002\n\n## \u601d\u60f3\u4e00\n\n\u663e\u7136\uff0c\u5018\u82e5\u8981\u6c42\u56de\u5230\u6839\u8282\u70b9\uff0c\u6b65\u6570\u6c38\u8fdc\u4e3a $2\\times (N-1)$\u3002\uff08\u6bcf\u6761\u8fb9\u90fd\u7ecf\u8fc7\u4e24\u6b21\uff09\n\n\u4f46\u662f\u6700\u540e\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u4e0d\u56de\u53bb\uff0c\u5047\u8bbe\u6700\u540e\u6253\u5370\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a $len$\uff0c\u663e\u7136\u6700\u7ec8\u904d\u5386\u6b65\u6570\u4e3a $2\\times (N-1)-len$\u3002\n\n**\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u904d\u5386\u6b65\u6570 $\\neq$ \u7b54\u6848\u6b65\u6570\uff0c\u56e0\u4e3a\u7b54\u6848\u4e2d\u8fd8\u6709\u5220\u9664\u64cd\u4f5c**\u3002\n\n\u663e\u7136 $ans_{min}=2\\times (N-1)-len_{max}$\u3002\n\n## \u601d\u60f3\u4e8c\n\n\u65e2\u7136\u6bcf\u4e00\u4e2a\u5355\u8bcd\u90fd\u8981\u8f93\u51fa\uff0c\u6253\u5370\u7684\u64cd\u4f5c\u6b21\u6570\u4e00\u5b9a = \u603b\u5b57\u7b26\u4e32\u6570\u3002\n\n\u90a3\u4e48\u5173\u952e\u5c31\u662f\u63d2\u5165\u4e0e\u5220\u9664\u6b21\u6570\u5c3d\u91cf\u5c11\uff0c\u90a3\u4e48\u663e\u7136\u5018\u82e5\u8981\u6c42\u5220\u9664\u6b21\u6570\u5c3d\u91cf\u5c11\uff0c\u4e4b\u524d\u63d2\u5165\u7684\u5b57\u7b26\u957f\u5ea6\u5e94\u5f53\u5c3d\u91cf\u5c0f\u3002\n\n\u6240\u4ee5\u6700\u957f\u7684\u5355\u8bcd\u5f53\u7136\u8981\u6700\u540e\u6253\u5370\u3002\n\n\u5f53\u7136\u4ee5\u4e0a\u7684\u8bc1\u660e\u662f\u4e0d\u4e25\u8c28\u7684\uff0c\u4f46\u662f\u6709\u52a9\u4e8e\u5927\u5bb6\u7406\u89e3\u3002\n\n**\u6240\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u786e\u5b9a\u8d2a\u5fc3\u7b56\u7565\uff1a\u6700\u540e\u8d70\u6700\u957f\u7684\u5355\u8bcd\uff0c\u5176\u4ed6\u968f\u610f\u3002**\n\n# \u4ee3\u7801\u5b9e\u73b0\n\n\u5176\u5b9e\u8fd8\u633a\u7b80\u5355\u7684\u3002\n\n1. \u5efa\u6811\u3002\u4e0d\u7528\u8bb2\u89e3\u5427\u3002\n2. \u6807\u8bb0\u3002\u6807\u8bb0\u4e00\u4e0b\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5f88\u7b80\u5355\u3002\n3. dfs\u3002\u6700\u91cd\u8981\u7684\u73af\u8282\u4e86\u3002\u5728 dfs \u65f6\u4e3b\u8981\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\u6253\u5370\uff0c\u5411\u4e0b\u904d\u5386\uff0c\u56de\u6eaf\u3002\n\n\u5728\u6253\u5370\u65f6\u901a\u8fc7\u5224\u65ad\u5f53\u524d\u662f\u5426\u4e3a\u5355\u8bcd\u7684\u5c3e\u90e8\u6765\u8fdb\u884c\u5224\u65ad\u3002\n\n\u5411\u4e0b\u904d\u5386\u65f6\u7279\u6b8a\u5904\u7406\u88ab\u6807\u8bb0\u7684\u8282\u70b9\u3002\n\n\u56de\u6eaf\u65f6\u5018\u82e5\u8be5\u70b9\u4e0d\u662f\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u5c31\u6253\u5370 \"-\"\u3002\n\n\u770b\u4e0d\u61c2\u7684\u8bdd\u770b\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\n#include<cstring>\n#include<string>\n#define N 500010//\u51e0\u6b21\u7a7a\u95f4\u5f00\u5c0f\u4e86\u90fd RE\uff0c\u6240\u4ee5\u7d22\u6027\u5f00\u5927\u4e00\u70b9\uff0cdalao \u52ff\u55b7\u3002\nusing namespace std;\n\nint n,trie[N][30],tot=1;\nbool sum[N],flag[N],finish=false;\n//\u4e0a\u9762\u4e09\u4e2a\u5206\u522b\u7528\u6765\u6807\u8bb0\uff1a\u662f\u5426\u662f\u5355\u8bcd\u7ed3\u5c3e\uff08trie \u57fa\u672c\u64cd\u4f5c\uff09\uff0c\u662f\u5426\u662f\u6700\u957f\u5b57\u7b26\u4e32\u4e0a\u7684\u70b9\uff0c\u662f\u5426\u5230\u4e86\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u3002\nstring a,jl,ans;\n\nvoid insert(string a){\n\tint p=1;\n\tfor(int i=0;i<a.length();i++){\n\t\tint ch=a[i]-'a';\n\t\tif(!trie[p][ch]) trie[p][ch]=++tot;\n\t\tp=trie[p][ch];\n\t}\n\tsum[p]=true;\n\treturn;\n}\n//\u5e38\u89c4\u63d2\u5165\u64cd\u4f5c\u3002\nvoid Mark(string a){\n\tint p=1;\n\tfor(int i=0;i<a.length();i++){\n\t\tint ch=a[i]-'a';\n\t\tp=trie[p][ch];\n\t\tflag[p]=true;\n\t}\n\treturn;\n}\n//\u6807\u8bb0\u64cd\u4f5c\uff0c\u987a\u7740 trie \u8d70\u4e00\u904d\u5c31\u597d\u4e86\u3002\nvoid dfs(int now){\n\tif(sum[now]){\n\t\tans+='P';//\u6253\u5370\u60c5\u51b5\u3002\n        //\u6ce8\u610f\u8fd9\u91cc\u4e00\u5b9a\u4e0d\u8981\u5199 return;\n        //\u56e0\u4e3a\u6709\u53ef\u80fd\u8fd9\u662f\u4e00\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\uff0c\u8fd9\u6837\u5c31\u5c11\u4e86\u4e00\u4e2a\u751a\u81f3\u66f4\u591a\u7684\u5355\u8bcd\u3002\n\t}\n\tint x=-1;\n\tfor(int i=0;i<26;i++){\n\t\tint t=trie[now][i];\n\t\tif(!t) continue;\n\t\tif(flag[t]) x=i;//\u8bb0\u5f55\u6700\u957f\u4e32\u4e0a\u7684\u70b9\uff0c\u6700\u540e\u904d\u5386\u3002\n\t\telse{\n\t\t\tans+=(i+'a');\n\t\t\tdfs(t);\n\t\t}\n\t}\n\tif(x!=-1){\n\t\tans+=(x+'a');\n\t\tdfs(trie[now][x]);\n\t}//\u6700\u540e\u904d\u5386\u7684\u6700\u957f\u4e32\u3002\n\tif(flag[now] && x==-1)//\u5f53\u904d\u5386\u5230\u4e86\u6700\u957f\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u5c31\u4e0d\u7528\u518d\u56de\u9000\uff08\u5220\u9664\uff09\u4e86\u3002\n\t\tfinish=true;\n\tif(!finish) ans+='-';//\u56de\u6eaf\u65f6\u5220\u9664\u3002\n\treturn;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tmemset(flag,false,sizeof(flag));\n\tmemset(sum,false,sizeof(sum));\n\tmemset(trie,0,sizeof(trie));//\u4e0d\u5fc5\u8981\u7684\u521d\u59cb\u5316\u3002\n\tfor(int i=1;i<=n;i++){\n\t\tcin >> a;insert(a);\n\t\tif(jl.length()<a.length()) jl=a;\n\t}//\u5bfb\u627e\u6700\u957f\u4e32\u3002\n\tMark(jl);\n\tdfs(1);\n\tprintf(\"%d\\n\",ans.length());\n\tfor(int i=0;i<ans.length();i++)\n\t\tprintf(\"%c\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n# \u7ed3\u8bed\n\n\u65e0\u803b\u5b89\u5229 [blog](https://www.cnblogs.com/lpf-666/)\u3002\n\n\u7b80\u5355\u7684 $trie + dfs$\uff0c\u611f\u89c9\u633a\u7b80\u5355\u7684...\u3002\n\n\u4e3b\u8981\u662f\u8981\u6709**\u9898\u76ee\u7b80\u5316**\u4ee5\u53ca**\u5c06\u9898\u76ee\u8f6c\u5316\u4e3a\u62bd\u8c61\u6570\u636e\u7ed3\u6784**\u7684\u80fd\u529b\u3002\n\n\u5b8c\u7ed3\u6492\u82b1\u3002",
        "postTime": 1585893932,
        "uid": 117941,
        "name": "_LPF_",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "\u8fd9\u9898\u600e\u4e48\u6ca1\u4eba\u505a\u5462\uff1fNOIP\u96be\u5ea6\u7684\u6c34\u9898\n\n\u7b80\u5316\u4e00\u4e0b\u9898\u610f\uff0c\u627e\u4e00\u79cd\u5b57\u5178\u6811\u7684DFS\u5e8f\uff0c\u6ee1\u8db3\uff1a\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u7ecf\u8fc7\u6240\u6709\u8282\u70b9\uff0c\u6700\u540e\u5230\u8fbe\u4e00\u4e2a\u53f6\u8282\u70b9\uff0c\u4e14\u957f\u5ea6\u6700\u77ed\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u8981\u627e\u51fa\u4e00\u4e2a\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u5148\u5728\u5176\u4ed6\u5b57\u7b26\u4e32\u4e0a\u8d70\uff0c\u540e\u8d70\u6700\u957f\u7684\u5b57\u7b26\u4e32\u5373\u53ef\u3002DFS\u524d\uff0c\u5728\u6700\u957f\u7684\u4e32\u4e0a\u4e00\u8def\u6253\u6807\u8bb0\uff0c\u5728DFS\u65f6\u540e\u8d70\u6709\u6807\u8bb0\u7684\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6700\u77ed\u3002\n\n```\n#include<cstdio>\n#include<iostream>\n#include<string>\n\nstruct Node\n{\n    int next[26];\n    bool mark,end;\n}trie[25000*20];\nint cnt;\n\nusing std::string;\n\nstring l;\n\nvoid Insert(string s)\n{\n    int length=s.length();\n    int u=0;\n    for(int i=0;i<length;++i)\n    {\n        if(!trie[u].next[s[i]-'a'])\n            trie[u].next[s[i]-'a']=++cnt;\n        u=trie[u].next[s[i]-'a'];\n    }\n    trie[u].end=1;\n}\n\nvoid Mark(string s)\n{\n    int length=s.length();\n    int u=0;\n    for(int i=0;i<length;++i)\n    {\n        u=trie[u].next[s[i]-'a'];\n        trie[u].mark=1;\n    }\n}\n\nchar opt[1000000];\nint m;\nbool finish;\n\nvoid dfs(int u)\n{\n    int mark=-1;\n    if(trie[u].end)\n        opt[++m]='P';\n    for(int i=0;i<26;++i)\n    {\n        if(trie[trie[u].next[i]].mark)\n            mark=i;\n        else if(trie[u].next[i])\n        {\n            opt[++m]=i+'a';\n            dfs(trie[u].next[i]);\n        }\n    }\n    if(mark!=-1)\n    {\n        opt[++m]='a'+mark;\n        dfs(trie[u].next[mark]);\n    }\n    if(trie[u].mark&&mark==-1)\n        finish=1;\n    if(!finish)\n        opt[++m]=45;\n    return;\n}\n\nint main()\n{\n    int n;\n    std::cin>>n;\n    string s;\n    for(int i=0;i<n;++i)\n    {\n        std::cin>>s;\n        Insert(s);\n        if(s.length()>l.length())\n            l=s;\n    }\n    Mark(l);\n    dfs(0);\n    \n    printf(\"%d\\n\",m);\n    for(int i=1;i<=m;++i)\n    {\n        printf(\"%c\\n\",opt[i]);\n    }\n    return 0;\n}\n```",
        "postTime": 1529315178,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u8fd9\u9898\u4e5f\u592a\u6bd2\u7624\u4e86\u5427\u3002\u3002\u3002\n\n\u5982\u679c\u4f60\u88ab\u5361 MLE \u4e86\u4e09\u4e2a\u70b9\uff0c\u8bf7\u770b\u4e00\u4e0b [\u8fd9\u4e2a\u5e16\u5b50](https://www.luogu.com.cn/discuss/546700)\u3002\n\n## \u601d\u8def\n\n\u601d\u8def\u8fd8\u662f\u5f88\u597d\u60f3\u7684\u3002~~\u771f\u7684\u6709\u7d2b\u5417~~\n\n\u4e00\u773c\u5efa Trie\uff0c\u7136\u540e dfs Trie\u3002\n\n\u672c\u9898\u552f\u4e00\u96be\u70b9\u5c31\u5728\u6253\u5370\u673a\u6700\u540e\u53ef\u4ee5\u4e0d\u6e05\u7a7a\u3002\uff08\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4f30\u8ba1\u964d\u84dd\u4e86\uff1f\uff09\n\n\u5f88\u663e\u7136\u7684\u4e00\u4e2a\u8d2a\u5fc3\u5c31\u662f\uff0c\u628a Trie \u6700\u957f\u7684\u4e00\u6761\u94fe\u7559\u5230\u6700\u540e\u53bb\u641c\u3002\n\n\u600e\u4e48\u5224\u65ad\u54ea\u4e2a\u6700\u957f\u5462\uff0c\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u6761\u94fe\u957f\u5ea6\u4e0d\u5c31\u884c\u4e86\u3002\n\n\u5b9e\u73b0\uff1a\uff08\u63d0\u793a\uff1a\u8bf7\u5148\u770b\u5b8c\u6574\u7bc7\u6587\u7ae0\uff0c\u5426\u5219\u540e\u679c\u81ea\u8d1f\uff09\n\n\u521d\u59cb\u5316\uff1a\n\n```cpp\ninline void insert(string s)\n{\n    int cur = 0, curlen = s.size();\n    for (char c : s)\n    {\n        len[cur][c] = max(len[cur][c], curlen--);\n        if (!t[cur][c])\n            t[cur][c] = ++tot;\n        cur = t[cur][c];\n    }\n    tag[cur] = true;\n}\n```\n\n\u904d\u5386\uff1a\n\n```cpp\ninline void dfs(int x, bool islast)\n{\n    if (!islast)\n    {\n        if (tag[x])\n            ans += 'P', cnt++;\n        for (int i = 0; i < 26; i++)\n            if (t[x][i])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 0);\n                ans += '-';\n                cnt += 2;\n            }\n    }\n    else\n    {\n        if (tag[x])\n            ans += 'P', cnt++;\n        int mxp = -1, mxlen = 0;\n        for (int i = 0; i < 26; i++)\n            if (t[x][i] && len[x][i] > mxlen)\n            {\n                mxlen = len[x][i];\n                mxp = i;\n            }\n        for (int i = 0; i < 26; i++)\n            if (t[x][i] && i != mxp)\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 0);\n                ans += '-';\n                cnt += 2;\n            }\n        if (~mxp)\n        {\n            ans += char(mxp + 'a');\n            dfs(t[x][mxp], 1);\n            cnt++;\n        }\n    }\n}\n```\n\n\u4e8e\u662f\u4fbf\u6709\u4e86\u6211\u7684\u7b2c\u4e00\u6b21\u63d0\u4ea4\uff1a[link](https://www.luogu.com.cn/record/97686473)\u3002\n\nMLE \u4e86\u4e09\u4e2a\u70b9\u2026\u2026\n\n~~\u4ec0\u4e48**\u51fa\u9898\u4eba\u554a~~\n\n\u5b9e\u9645\u4e0a\uff0c$62.5$ MB \u8fd9\u4e48\u5c0f\u7684\u7a7a\u95f4\u5c31\u4e0d\u662f\u7528\u6765\u5f00\u8fd9\u4e48\u5927\u6570\u7ec4\u7684\u2026\u2026\n\n\u8003\u8651\u628a $len[][]$ \u4f18\u5316\u6389\u3002\n\n\u5f88\u663e\u7136\uff0c\u6700\u957f\u7684\u4e00\u6761\u94fe\u7684\u672c\u8d28\u4e0a\u5176\u5b9e\u5c31\u662f\u6700\u957f\u7684\u90a3\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\u6240\u4ee5\u628a\u6700\u957f\u7684\u5b57\u7b26\u4e32\u627e\u51fa\u6765\uff0c\u628a\u5b83\u5728 Trie \u4e0a\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u6253\u4e0a\u6807\u8bb0\uff0c\u4e0d\u5c31\u884c\u4e86\u5417\uff1f\n\n\u8fd9\u6837\u5c31\u53ea\u9700\u8981\u4e00\u4e2a `bool ismax[5e5]` \u4e86\u3002\n\n\u5b9e\u73b0\uff1a\n\n\u6253\u6807\u8bb0\uff1a\n\n```cpp\ninline void addtag(string s)\n{\n    int cur = 0;\n    for (char c : s)\n    {\n        cur = t[cur][c];\n        ismax[cur] = true;\n    }\n}\n```\n\n\u904d\u5386\uff1a\n\n```cpp\ninline void dfs(int x, bool islast)\n{\n    if (!islast)\n    {\n        if (tag[x])\n            ans += 'P', cnt++;\n        for (int i = 0; i < 26; i++)\n            if (t[x][i])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 0);\n                ans += '-';\n                cnt += 2;\n            }\n    }\n    else\n    {\n        if (tag[x])\n            ans += 'P', cnt++;\n        for (int i = 0; i < 26; i++)\n            if (t[x][i] && !ismax[t[x][i]])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 0);\n                ans += '-';\n                cnt += 2;\n            }\n        for (int i = 0; i < 26; i++)\n            if (t[x][i] && ismax[t[x][i]])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 1);\n                cnt++;\n                break;\n            }\n    }\n}\n```\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 5e5 + 5;\nint n;\nint t[N][26], tot, cnt, pos;\nbool tag[N], ismax[N];\nstring ans;\ninline void insert(string s)\n{\n    int cur = 0;\n    for (char c : s)\n    {\n        if (!t[cur][c])\n            t[cur][c] = ++tot;\n        cur = t[cur][c];\n    }\n    tag[cur] = true;\n}\ninline void dfs(int x, bool islast)\n{\n    if (!islast)\n    {\n        if (tag[x])\n            ans += 'P', cnt++;\n        for (int i = 0; i < 26; i++)\n            if (t[x][i])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 0);\n                ans += '-';\n                cnt += 2;\n            }\n    }\n    else\n    {\n        if (tag[x])\n            ans += 'P', cnt++;\n        for (int i = 0; i < 26; i++)\n            if (t[x][i] && !ismax[t[x][i]])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 0);\n                ans += '-';\n                cnt += 2;\n            }\n        for (int i = 0; i < 26; i++)\n            if (t[x][i] && ismax[t[x][i]])\n            {\n                ans += char(i + 'a');\n                dfs(t[x][i], 1);\n                cnt++;\n                break;\n            }\n    }\n}\ninline void solve()\n{\n    dfs(0, 1);\n    cout << cnt << '\\n';\n    for (char c : ans)\n        cout << c << '\\n';\n}\ninline void tonum(string &s)\n{\n    for (int i = 0; i < s.size(); i++)\n        s[i] -= 'a';\n}\ninline void addtag(string s)\n{\n    int cur = 0;\n    for (char c : s)\n    {\n        cur = t[cur][c];\n        ismax[cur] = true;\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cin >> n;\n    string mxs;\n    for (int i = 1; i <= n; i++)\n    {\n        string s;\n        cin >> s;\n        tonum(s);\n        if (s.size() > mxs.size())\n            mxs = s;\n        insert(s);\n    }\n    addtag(mxs);\n    solve();\n    return 0;\n}\n```",
        "postTime": 1671537221,
        "uid": 576378,
        "name": "creation_hy",
        "ccfLevel": 5,
        "title": "P4683 \u9898\u89e3"
    },
    {
        "content": "## \u9898\u9762\u7406\u89e3\n\n\u672c\u9898\u9898\u9762\u4e2d\u5bf9\u4e8e\u4e00\u4e2a\u6253\u5b57\u673a\u8fdb\u884c\u4e86\u6a21\u62df\uff0c\u8981\u6c42\u6a21\u62df\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n* \u5728\u5f53\u524d\u5355\u8bcd\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u5c3e\u90e8\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u3002\n\n* \u5728\u5f53\u524d\u5355\u8bcd\u7684\u60c5\u51b5\u4e0b\uff0c\u5220\u9664\u5c3e\u90e8\u7684\u4e00\u4e2a\u5b57\u7b26\u3002\n\n* \u6253\u5370\u51fa\u5f53\u524d\u7684\u5355\u8bcd\u3002\n\n\u6211\u4eec\u9700\u8981\u7684\u5c31\u662f\u7ed9\u51fa\u4e00\u4e2a\u65b9\u6848\uff0c\u4f7f\u6574\u4f53\u7684\u64cd\u4f5c\u6b21\u6570\u6700\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u6253\u5370\u51fa\u6240\u6709\u7684\u5355\u8bcd\u3002\n\n## \u601d\u8def\n\n\u5f88\u660e\u663e\uff0c\u9898\u9762\u5c31\u662f\u8ba9\u6211\u4eec\u60f3\u51fa\u4e00\u79cd **\u8d2a\u5fc3** \u7684\u7b56\u7565\uff0c\u4f7f\u6574\u4f53\u7684\u64cd\u4f5c\u6b21\u6570\u5c11\u3002\n\n\u90a3\u4e48\u672c\u9898\u6709\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e0b\u9762\u4e24\u4e2a\u5b57\u7b26\u4e32\uff1a\n\n~~~\nkamiyasigoyi\nkamiyahentai\n~~~\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u524d\u9762\u7684 `kamiya` \u662f\u53ef\u4ee5\u4e0d\u7528\u5220\u6389\u4e4b\u540e\u518d\u8f93\u5165\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u5728\u628a\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 `sigoyi` \u7ed9\u5f39\u51fa\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u641e\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u5f53\u4e2d\u7684 `hentai` \uff0c\u8fd9\u5c31\u662f\u7b2c\u4e00\u4e2a\u4f18\u5316\u65b9\u5f0f\u3002\n\n\u8fd9\u4e2a\u4f18\u5316\u6211\u4eec\u662f\u53ef\u4ee5\u7528 Trie \u6811\u6765\u4f18\u5316\u7684\u3002\u5f88\u660e\u663e\uff0c\u5728\u4e00\u4e2a Trie \u6811\u4e2d\uff0c\u6240\u6709\u7684\u524d\u7f00\u53ea\u4f1a\u4fbf\u5229\u4e00\u6b21\uff0c\u6240\u4ee5\u8bf4\u6839\u636e Trie \u6811\u5efa\u56fe\u7136\u540e dfs \u5c31\u53ef\u4ee5\u5f97\u5230\u6211\u4eec\u6240\u9700\u8981\u7684\u7b54\u6848\u4e86\u3002\n\n**\u897f\u5361\u897f\uff01** \n\n\u8fd9\u6837\u7684\u4ee3\u7801\u4ea4\u4e0a\u53bb\uff0c\u4f60\u53ea\u80fd\u5f97\u5230 36pts \u7684\u6210\u7ee9\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u5b9a\u7136\u662f\u54ea\u91cc\u7684\u65b9\u6848\u4e0d\u591f\u4f18\u79c0\u3002\n\n\u90a3\u4e48\u6211\u4eec\u518d\u8003\u8651\u8fd9\u6837\u4e24\u4e2a\u4e32\u3002\n\n~~~\nabssabsdfff\nabssac\n~~~\n\n\u5047\u5982\u8bf4\u5f53\u524d\u7684\u64cd\u4f5c\u53ea\u6709\u8fd9\u4e24\u4e2a\u4e32\uff0c\u90a3\u4e48\u4f60\u7684\u64cd\u4f5c\u5e94\u8be5\u662f\u5148\u628a `abssac` \u7ed9\u8f93\u51fa\u6765\uff0c\u7136\u540e **\u9000\u683c\u4e00\u4e2a** \uff0c\u518d\u8f93\u51fa\u7b2c\u4e8c\u4e2a\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u4e0d\u4f1a\u50cf\u5148\u8f93\u51fa `abssabsdfff` \u90a3\u6837 **\u9000\u683c\u516d\u4e2a** \uff0c\u90a3\u4e48\u8bc1\u660e\u4e86\u8fd9\u4e5f\u662f\u4e00\u79cd\u8d2a\u5fc3\u7b56\u7565\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u7528\u5728\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5c06\u6240\u6709\u7684\u5b57\u7b26\u4e32\u6309\u7167\u957f\u5ea6 **\u4ece\u5927\u5230\u5c0f** \u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31 AC \u4e86\u8fd9\u9053\u5341\u5206\u6709\u610f\u601d\u7684 Trie \u6811\u677f\u5b50\u9898\u2026\u2026\n\n\u7b49\u7b49\u5148\u522b\u6376\u6211\uff0c\u6211\u77e5\u9053\u4f60\u4eec\u4ec0\u4e48\u610f\u601d\uff0c\u4e3a\u4ec0\u4e48 **\u4ece\u5927\u5230\u5c0f** \u5462\uff1f\u56e0\u4e3a\u6211\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u7528\u7684\u662f\u94fe\u5f0f\u524d\u5411\u661f\u6765\u5b58\u50a8\u4e00\u4e2a\u56fe\u7684\uff0c\u8fd9\u6837\u5b50\u7684\u8bdd\u5c31\u4e0d\u7528\u4fbf\u5229\u6240\u6709\u7684\u6839\u8282\u70b9\u4ece\u800c\u66f4\u5feb\u800c\u4e14\u64cd\u4f5c\u4e5f\u5341\u5206\u65b9\u4fbf\u3002\n\n\u5982\u679c\u8bf4\u4f60\u4e0d\u662f\u5f88\u4f1a\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u90a3\u5c31\u770b\u6211\u64cd\u4f5c\u3002\n\n## CODE\n\n~~~cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N = 3e4 + 1;\nconst int S = 21;\nvector<char>ans;//\u8bb0\u5f55\u7b54\u6848\nstring str[N];\nint n;\nint hd[N * S],nxt[(N * S) << 1],to[(N * S) << 1],tot = 0;//\u94fe\u5f0f\u524d\u5411\u661f\n\ninline void add(const int u,const int v) {\n\tnxt[++tot] = hd[u],to[tot] = v,hd[u] = tot;\n}\n/*\n\u7531\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u662f\u524d\u63d2\u7684\uff0c\u90a3\u4e48\u4e45\u8bc1\u660e\u66f4\u5c0f\u7684\u5b57\u7b26\u4e32\u66f4\u540e\u9762\u88ab\u63d2\u5165\u8fdb\u6765\uff0c\u90a3\u4e48\u5c31\u662f\u8bf4\u6211\u5728dfs\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5148\u884c\u4fbf\u5229\u66f4\u5c0f\u7684\u5b57\u7b26\u4e32\u518d\u53bb\u4fbf\u5229\u66f4\u5927\u7684\u5b57\u7b26\u4e32\u3002\n\u4f8b\u5982\uff1a\uff08\u6570\u5b57\u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c0\u8868\u793a\u521d\u59cb\u8282\u70b9\uff0c\u662f\u4e00\u4e2a\u7a7a\u8282\u70b9\uff09\n0 -> 4\n0 -> 3 -> 4\n0 -> 1 -> 3 -> 4\n\u6700\u7ec8\u4fbf\u5229\u7684\u65f6\u5019\u5c31\u4f1a\u7531 1,3,4\u7684\u987a\u5e8f\u4fbf\u5229\u3002\n*/\nint trie[N * S][26],cnt = 1;//Trie\u6811\n\nchar ch[N * S];//\u5f53\u524d\u4f4d\u7f6e\u7684\u5b57\u7b26\nbool book[N * S];//\u5f53\u524d\u4f4d\u7f6e\u662f\u5426\u662f\u5355\u8bcd\u7684\u7ed3\u5c3e\nbool comp(string a,string b) {\n\treturn a.size() > b.size();\n}\ninline void input() {\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++) cin >> str[i],str[i] = '0' + str[i];\n\tsort(str + 1,str + 1 + n,comp);//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\tfor(int i = 1; i <= n; i++) {\n\t\tint p = 1;\n\t\tint len = str[i].size();\n\t\tfor(int j = 1,tem; j < len; j++,p = trie[p][tem]) {\n\t\t\ttem = str[i][j] - 'a';\n\t\t\tif(!trie[p][tem]) trie[p][tem] = ++cnt,add(p,trie[p][tem]);\n\t\t\tch[trie[p][tem]] = str[i][j];\n\t\t}\n\t\tbook[p] = true;\n\t}\n\treturn ;\n}\nvoid dfs(const int now) {\n\tif(book[now]) ans.push_back('P');\n\tfor(int eg = hd[now];eg;eg = nxt[eg]) {\n\t\tans.push_back(ch[to[eg]]);\n\t\tdfs(to[eg]);\n\t\tans.push_back('-');\n\t}\n\treturn ;//\u7531\u4e8e\u662f\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5728for\u5faa\u73af\u5185\u5c42return\n}\ninline void work() {\n\tdfs(1);\n\treturn;\n}\ninline void print() {\n\twhile((char)ans.back() == '-') ans.pop_back();//\u6211\u7684\u7a0b\u5e8f\u6709\u70b9\u9505\u5c31\u662f\u8bf4\u5728\u641e\u5b8c\u4e4b\u540e\u8fd8\u4f1a\u628a\u6240\u6709\u7684\u5355\u8bcd\u90e8\u5206\u5220\u6389\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u64cd\u4f5c\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u6240\u4ee5\u8bf4\u5c31\u76f4\u63a5\u5220\u6389\u5c31\u53ef\u4ee5\u4e86\u3002\n\tint l = ans.size();\n\tprintf(\"%d\\n\",l);\n\tfor(int i = 0; i < l; i++) {\n\t\tputchar(ans[i]);\n\t\tputchar(10);\n\t}\n\treturn ;\n}\nint main() {\n\tinput();\n\twork();\n\tprint();\n\treturn 0;\n}\n~~~\n\n\n\n##  \u505a\u9898\u5c0f\u6545\u4e8b\n\nMerry \uff1a \u5b57\u6bcd\u8868\u7b2c\u5341\u516d\u4e2a\u662f\u5565\u554a\uff1f\n\nKAMIYA \uff1a p\u3002\n\nMerry \uff1a \u6211\u8fd9\u4e2a\u4e3a\u4ec0\u4e48\u4f1a\u9519\u5462\uff1f\n\nKAMIYA \uff1a \u4f60\u4e0d\u662f\u51cf `'a'` \u4e4b\u540e\u4ece\u96f6\u5f00\u59cb\u6570\u5417\uff1f\n\nMerry \uff1a \u4f46\u662f\u6211\u5168\u90e8\u7684\u90fd\u52a0\u4e00\u4e86\u5440\u3002\n\nKAMIYA \uff1a \u6211\u521a\u521a\u770b\u5230\u4f60\u6709\u4e00\u4e2a\u5730\u65b9\u6ca1\u6709\u52a0\u4e00\u3002\uff08\u987a\u624b\u4e00\u6307\uff09\n\nMerry \uff1a\u54e6\uff01\n\n\uff08Merry\u63d0\u4ea4\u4e86\u4ee3\u7801\uff09\n\n\uff08Merry \u5f97\u4e8664pts\uff09\n\nKAMIYA \uff1a\u4e3a\u5565\u8fd9\u4e2a\u9898\u8fd8\u4f1a T \uff1f\n\nMerry \uff1a\u6211\u4e5f\u4e0d\u77e5\u9053\u3002\n\nKAMIYA \uff1a \u4f60\u8fd9 `string` \u524d\u63d2\u4e0d\u662f\u627e\u6b7b\uff1f\n\nMerry \uff1a \u54e6\uff01\n\n\uff08Merry\u628a `string` \u6539\u6210\u4e86 `vector` \uff09\n\n\uff08Merry AC \u4e86\uff09\n\nKAMIYA \uff1a\u5c31\u79bb\u8c31\u3002",
        "postTime": 1615037129,
        "uid": 366935,
        "name": "KAMIYA_KINA",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011P4683 [IOI2008] Type Printer \u6253\u5370\u673a"
    },
    {
        "content": "\u9996\u5148\u5efa\u51fa Trie \u6811\uff0c\u5bb9\u6613\u53d1\u73b0\u6211\u4eec\u7684\u76ee\u6807\u662f\u786e\u5b9a\u4e00\u79cd DFS \u5e8f\uff0c\u4f7f\u5f97\u5728\u904d\u5386\u6240\u6709\u8282\u70b9\u7684\u524d\u63d0\u4e0b\u8d70\u8fc7\u7684\u8fb9\u6570\u5c3d\u53ef\u80fd\u5c11\u3002\n\n\u5982\u679c\u8d70\u5b8c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u8981\u8fd4\u56de\u6839\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u663e\u7136\u6bcf\u6761\u8fb9\u81f3\u5c11\u8981\u8d70\u4e24\u6b21\uff08\u9012\u5f52\u7684\u65f6\u5019\u8d70\u4e00\u6b21\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u8fd8\u8981\u8d70\u4e00\u6b21\uff09\u3002\n\n\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u8d70\u5b8c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u5c31\u4e0d\u9700\u8981\u8fd4\u56de\u4e86\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c11\u8d70\u4ece\u6700\u540e\u4e00\u4e2a\u70b9\u5230\u6839\u7684\u8fd9\u4e9b\u8fb9\u3002\n\n\u600e\u6837\u8ba9\u5c11\u8d70\u7684\u8fb9\u5c3d\u53ef\u80fd\u591a\u5462\uff1f\u663e\u7136\u53ea\u9700\u8ba9\u6700\u6df1\u7684\u8282\u70b9\u6700\u540e\u8d70\u5230\u5373\u53ef\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6309\u8fd9\u6837\u7684\u65b9\u5f0f\u8fdb\u884c DFS\uff1a\u5148\u627e\u51fa\u6bcf\u4e2a\u8282\u70b9\u6df1\u5ea6\u6700\u6df1\u7684\u5b50\u6811\uff0c\u6bcf\u6b21 DFS \u5148\u8d70\u5b8c\u5176\u4ed6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6700\u6df1\u7684\u5b50\u6811\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int sig=26;\nchar res[1000005];\nint ans;\nstruct trie\n{\n struct node\n {\n  int son[sig],end,ls,dep,maxd;\n }tr[500005];\n int cnt;\n void insert(char* s)\n {\n  int u=0;\n  for(int i=0;s[i];i++)\n  {\n   int &v=tr[u].son[s[i]-'a'];\n   if(!v)v=++cnt;\n   u=v;\n  }\n  tr[u].end=1;\n }\n void dfs1(int u,int fa)\n {\n  tr[u].maxd=tr[u].dep=tr[fa].dep+1;\n  tr[u].ls=-1;\n  for(int i=0;i<sig;i++)\n  {\n   int v=tr[u].son[i];\n   if(v)\n   {\n    dfs1(v,u);\n    if(tr[v].maxd>tr[u].maxd)\n    {\n     tr[u].maxd=tr[v].maxd;\n     tr[u].ls=i;\n    }\n   }\n  }\n }\n void dfs2(int u)\n {\n  if(tr[u].end)res[++ans]='P';\n  int ls=tr[u].ls;\n  for(int i=0;i<sig;i++)\n  {\n   int v=tr[u].son[i];\n   if(v&&i!=ls)\n   {\n    res[++ans]='a'+i;\n    dfs2(v);\n   }\n  }\n  if(ls!=-1)\n  {\n   res[++ans]='a'+ls;\n   dfs2(tr[u].son[ls]);\n  }\n  res[++ans]='-';\n }\n}t;\nchar s[25];\nint main()\n{\n int n;\n scanf(\"%d\",&n);\n int maxl=0;\n for(int i=1;i<=n;i++)\n {\n  scanf(\"%s\",s);\n  maxl=max(maxl,(int)strlen(s));\n  t.insert(s);\n }\n t.dfs1(0,0);\n t.dfs2(0);\n ans-=maxl+1;//\u6392\u9664\u8d70\u5b8c\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u56de\u6eaf\u8fc7\u7a0b\n printf(\"%d\\n\",ans);\n for(int i=1;i<=ans;i++)\n  printf(\"%c\\n\",res[i]);\n return 0;\n}\n```\n",
        "postTime": 1574943868,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u6700\u503c\uff1a\n\n\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff1a(~~\u4e00\u8138\u61f5\u903c~~\uff09\u66b4\u529b\u80af\u5b9a\u8fc7\u4e0d\u4e86\uff1a\n\n\u90a3\u4e48\u5c31\u662f\u8d2a\u5fc3\u6216\u8005$DP$:\n\n\u8fd9\u9898\u4f1a$DP$\u7684\u90fd\u662f\u7279\u522b\u5de8\u7684\uff0c\u6240\u4ee5\u53ea\u6709\u8d2a\u5fc3\u4e86\u3002\n\n\u770b\u5b8c\u4f53\u9762\u5c31\u60f3\u5230Trie\n\n\u7136\u540e\u8d2a\u5fc3\uff1a\n\n\u5148\u628a\u4efb\u610f\u4e00\u4e2a\u6700\u957f\u7684\u5b57\u7b26\u4e32\u6253\u6807\u8bb0\uff0c\u7136\u540eDFS\uff0c\u8d70\u6253\u6807\u8bb0\u7684\u70b9\u3002\n\n~~\u597d\u50cf\u5b8c\u4e86~~\n\n\u4ee3\u7801\uff1a\n\n```\n#include <iostream>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#define Rint register int\nusing namespace std;\nconst int N=5e5+10;\nstruct trie{\n\tint nxt[26];\n\tbool done,vis;\n}a[N];\nchar ans[N<<1];\nint sum,cnt=0,n;\nstring d,maxn=\"\";\ninline void add(string s) {\n\tint now=0,len=s.length();\n\tfor (Rint i=0;i<len;++i) {\n\t\tif(a[now].nxt[s[i]-'a']==0) {\n\t\t\t++cnt;\n\t\t\ta[now].nxt[s[i]-'a']=cnt;\n\t\t}\n\t\tnow=a[now].nxt[s[i]-'a'];\n\t}\n\ta[now].done=true;\n}\ninline void mark(string s) {\n\tint len=s.length(),now=0;\n\tfor (Rint i=0;i<len;++i) {\n\t\tnow=a[now].nxt[s[i]-'a'];\n\t\ta[now].vis=true;\n\t}\n}\nbool flag=false;\ninline void dfs(int now) {\n\tint res=-1;\n\tif(a[now].done) {\n\t\tans[++sum]='P';\n\t}\n\tfor (Rint i=0;i<26;++i) {\n\t\tif(a[a[now].nxt[i]].vis) {\n\t\t\tres=i;\n\t\t}\n\t\telse if(a[now].nxt[i]!=0) {\n\t\t\tans[++sum]=i+'a';\n\t\t\tdfs(a[now].nxt[i]);\n\t\t}\n\t}\n\tif(res!=-1) {\n\t\tans[++sum]=res+'a';\n\t\tdfs(a[now].nxt[res]);\n\t}\n\tif(res==-1&&a[now].vis) {\n\t\tflag=true;\n\t}\n\tif(!flag) {\n\t\tans[++sum]='-';\n\t}\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tfor (Rint i=1;i<=n;++i) {\n\t\tcin>>d;\n\t\tadd(d);\n\t\tif(d.length()>maxn.length()) {\n\t\t\tmaxn=d;\n\t\t}\n\t}\n\tmark(maxn);\n\tdfs(0);\n\tprintf(\"%d\\n\",sum);\n\tfor (Rint i=1;i<=sum;++i) {\n\t\tputchar(ans[i]);\n\t\tputchar('\\n');\n\t}\n}\n```",
        "postTime": 1545390544,
        "uid": 78187,
        "name": "zjjcth330",
        "ccfLevel": 0,
        "title": "IOI2008--\u6253\u5370\u673a"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\uff0c\u5e94\u8be5\u6ca1\u6709\u5230\u7d2b\u9898\u6c34\u5e73\u5427\u3002\u3002\u3002\n\n\u5f88\u5bb9\u6613\u770b\u51fa\u6765\uff0c\u8fd9\u5c31\u662f\u628a\u5b57\u7b26\u4e32\u5168\u63d2\u5165\u540e$dfs$\u4e00\u904d\uff0c\u7136\u540e\u4ed6\u53c8\u8bf4\u64cd\u4f5c\u6b21\u6570\n\n\u6700\u5c0f\uff0c\u5176\u5b9e\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u6700\u957f\u7684\u90a3\u4e2a\u8bcd\u6700\u540e\u8f93\u5c31\u5b8c\u4e86\uff0c\u5565\uff1f\u6709\u4e0d\u61c2\u7684\u5417\uff1f\n\n\u4f60\u770b\uff0c\u4f60\u8981\u662f\u628a\u8bcd\u5168\u8f93\u51fa\u6765\uff0c\u80af\u5b9a\u6574\u68f5\u6811\u90fd\u8981\u904d\u5386\u6ca1\u5f97\u8dd1\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u6837\n\n\u4e00\u6765$P$\u4e0e\u5355\u8bcd\u7684\u64cd\u4f5c\u6570\u91cf\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u5269\u4e0b\u7684\u53ea\u6709\u9000\u683c\uff0c\u90a3\u8981\u60f3\u9000\u683c\u6b21\n\n\u6570\u6700\u5c11\uff0c\u662f\u4e0d\u662f\u8981\u8ba9\u6700\u957f\u7684\u6700\u540e\u8f93\uff08\u56e0\u4e3a\u6700\u540e\u8f93\u5c31\u4e0d\u7528\u9000\u683c\u4e86\uff09\n\n\u56e0\u6b64\u6211\u4eec\u5728\u63d2\u5165\u5230\u65f6\u5019\uff0c\u627e\u5230\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u7ed9\u5b83\u6253\u4e2a\u6807\u8bb0\u5f3a\u5236\u8ba9\u5b83\u6700\n\n\u540e\u8f93\u51fa\uff0c\u5c31\u5b8c\u4e86\u3002\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u8fd9\u4e2a\u9898\u5f88\u5361\u7a7a\u95f4\uff0c\u6211\u673a\u623f\u5927dalao\u90fd\u662f\u56e0\u4e3a\u8fd9\u4e2as\u6389\u4e86\uff0c\u6240\n\n\u4ee5\u6570\u7ec4\u53ef\u5343\u4e07\u522b\u4e71\u5f00\u54e6\n\n\u8fd9\u91cc\u5c31\u7ed9\u4e2a$dfs$\u7684\u4ee3\u7801\u5427\uff0c\u53cd\u6b63\u5176\u4ed6\u5b83\u4e5f\u5c31\u662f\u4e2a\u5957\u8def\n\n## code\n\n```cpp\nvoid dfs(int x) {//f\u8bb0\u5f55\u6253\u5370\u987a\u5e8f\uff0cv\u662f\u5224\u65ad\u6700\u957f\u5355\u8bcd\u4e0a\u7684\u4e00\u4e2a\u503c\n\tint v = -1;\n\tif(End[x]) f[++ ans] = 'P';//\u8d70\u5230\u672b\u5c3e\u8981\u6253\u5370\u2018P\u2019\n\tfor(R int i = 0;i < 26;++ i) {\n\t\tif(vis[Trie[x][i]]) v = i;\n\t\telse if(Trie[x][i]) {//\u8d70\u4e0d\u662f\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\n\t\t\tf[++ ans] = i + 'a';\n\t\t\tdfs(Trie[x][i]);\n\t\t}\n\t}\n\tif(v != -1) {\n\t\tf[++ ans] = v + 'a';\n\t\tdfs(Trie[x][v]);\n\t}\n\telse if(vis[x]) flag = false;//\u5982\u679c\u8fd9\u4e2a\u8bcd\u6709\u6807\u8bb0\uff0c\u5c31\u4e0d\u6253\u5370\u2018-\u2019\n\tif(flag) f[++ ans] = '-';\n}\n```\n",
        "postTime": 1569413863,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "# P4683 Type Printer\n\n\u9996\u5148\uff0c**\u8fd9\u9053\u9898\u6ca1\u6709\u7d2b\u9898\u96be\u5ea6\uff0c\u751a\u81f3\u8fde\u84dd\u9898\u90fd\u7b97\u4e0d\u4e0a**\uff0c\u6240\u4ee5\u90a3\u4e9b\u770b\u5230\u662f\u7d2b\u9898\u5c31\u6765\u770b\u9898\u89e3\u7684\u540c\u5b66\u53ef\u4ee5\u597d\u597d\u601d\u8003\u4e4b\u540e\u518d\u6765\u770b\u3002\n\n### \u9898\u610f\n\n\u4f60\u8981\u6253\u5370 $N$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u6253\u5370\u673a\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\u5728\u5b57\u7b26\u4e32\u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u3001\u5728\u5b57\u7b26\u4e32\u5c3e\u90e8\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\u3001\u6253\u5370\u5f53\u524d\u5b57\u7b26\u4e32\u5185\u7684\u5b57\u7b26\u3002\u4f60\u9700\u8981\u6c42\u51fa\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u4e0e\u4e0e\u4e4b\u5bf9\u5e94\u7684\u64cd\u4f5c\u5e8f\u5217\u3002\n\n### \u601d\u8def\n\n\u89c2\u5bdf\u5230\u8fd9\u4e2a\u6253\u5370\u673a\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6808\u7684\u7ed3\u6784\uff0c\u4e8e\u662f\u6211\u4eec\u81ea\u7136\u5730\u8054\u60f3\u5230\u4e0e\u6808\u6709\u5173\u7684\u601d\u60f3\uff1aDFS\u3002\u53c8\u6709\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u76f8\u540c\u7684\u524d\u7f00\u53ea\u9700\u8981\u6253\u5370\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u5c06\u4e0d\u540c\u5b57\u7b26\u4e32\u7684\u76f8\u540c\u524d\u7f00\u5408\u5e76\u8d77\u6765\uff0c\u4e8e\u662f\u6211\u4eec\u53c8\u8054\u60f3\u5230\u4e00\u79cd\u53ef\u4ee5\u6309\u524d\u7f00\u50a8\u5b58\u5b57\u7b26\u4e32\u7684\u6570\u636e\u7ed3\u6784\uff1a\u5b57\u5178\u6811\u3002\n\n\u90a3\u4e48\u6b64\u65f6\u8fd9\u9053\u9898\u6240\u9700\u7684\u5168\u90e8\u5de5\u5177\u5c31\u9f50\u4e86\u3002\u505a\u6cd5\u5c31\u662f\uff1a\u5efa\u51fa\u5b57\u5178\u6811\uff0c\u7136\u540e\u5728\u5b57\u5178\u6811\u4e0a\u8dd1\u4e00\u904d DFS\u3002\u5efa\u6811\u6211\u5c31\u4e0d\u8bf4\u4e86\uff0c\u6734\u7d20\u7684 DFS \u4e5f\u662f\u5f88\u597d\u5199\u7684\uff1a\n\n```cpp\nvoid dfs(int cur = 0, int ch = 0) {\n\tif (cur != 0) ansSeq += 'a' + ch, ans++;\n\twhile (trie.nxt[cur][27]--) ansSeq += 'P', all--, ans++; \n\tfor (int i = 0; i < 26; i++) {\n\t\tif (trie.nxt[cur][i]) dfs(trie.nxt[cur][i], i);\n\t}\n\tif (all) ansSeq += '-', ans++;\n\treturn;\n}\n```\n\n\u5176\u4e2d\u7684 $\\textrm{all}$ \u662f\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\uff0c$\\textrm{ansSeq}$ \u662f\u7b54\u6848\u7684\u64cd\u4f5c\u5e8f\u5217\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u4e2a\u4e1c\u897f\u8fde\u6837\u4f8b\u90fd\u8dd1\u4e0d\u8fc7\u53bb\u3002\n\n\u539f\u56e0\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f**\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u7528\u5220\u9664\u7684**\uff0c\u8981\u6700\u4f18\u5316\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c31\u8981\u5c3d\u91cf\u957f\u4e00\u4e9b\u3002\u800c\u5982\u679c\u50cf\u4e0a\u8fb9\u8fd9\u6837\u5199\uff0c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e0d\u662f\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5b57\u7b26\u4e32\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u65f6\u8bb0\u5f55\u4e0b\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5728\u63d2\u5165 Trie \u65f6\u7ed9\u6700\u957f\u7684\u4e32\u4e0a\u7684\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u5728 DFS \u65f6\u5229\u7528\u7c7b\u4f3c\u6811\u94fe\u5256\u5206\u4e2d\u4f18\u5148\u8bbf\u95ee\u91cd\u513f\u5b50\u7684\u65b9\u6cd5\uff0c\u5f3a\u5236\u5730\u5c06\u5e26\u6807\u8bb0\u7684\u8282\u70b9\u653e\u5728\u6700\u540e\u8bbf\u95ee\u5c31\u884c\u4e86\u3002\n\n### \u4ee3\u7801\n\n\u666e\u901a\u7684\u5b57\u5178\u6811\u7684\u8f6c\u79fb\u6570\u7ec4\u53ea\u7528\u5f00\u5230 $|\\Sigma|$ \u5927\u5c0f\uff0c\u6211\u591a\u5f00\u4e86\u4e24\u4e2a\uff0c\u4e00\u4e2a\u8868\u793a\u662f\u5426\u4e3a\u5b57\u7b26\u4e32\u7ec8\u6b62\u70b9\uff0c\u4e00\u4e2a\u8868\u793a\u662f\u5426\u4e3a\u6700\u957f\u94fe\u4e0a\u8282\u70b9\u3002\n  \n\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5355\u5f00\u51fa\u6765\u3002\n\n\u8fd9\u9053\u9898\u7684\u7a7a\u95f4\u9650\u5236\u76f8\u5f53\u7684\u4e25\u683c\uff0c\u6ce8\u610f\u628a\u63e1\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u907f\u514d MLE\uff0c\u4e5f\u53ef\u4ee5\u5199\u6307\u9488\u6765\u52a8\u6001\u5730\u5206\u914d\u5185\u5b58\uff0c\u4e0d\u8fc7\u611f\u89c9\u5e76\u6ca1\u4ec0\u4e48\u7528\u3002\n\n```cpp\n/**\n * @file \tP4683 Type Printer.cpp\n * @author \tForgotDream\n * @brief \tTrie + DFS\n * @date \t2023-02-03\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing i64 = long long;\nusing i64u = unsigned long long;\nusing i128 = __int128;\nusing Edge = pair<int, int>;\n\nstatic const int N = 1e5 + 50;\nint all, ans;\nstruct Trie {\n\tint cnt;\n\tint nxt[5 * N][28];\n\n\tvoid insert(string s, bool isLongest = false) {\n\t\t// isLongest \u662f\u6700\u957f\u4e32\u6807\u8bb0\n\t\tint cur = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (!nxt[cur][s[i] - 'a']) {\n\t\t\t\tnxt[cur][s[i] - 'a'] = ++cnt;\n\t\t\t}\n\t\t\tcur = nxt[cur][s[i] - 'a'], nxt[cur][26] = nxt[cur][26] | isLongest;\n \t\t}\n\t\tnxt[cur][27]++, all++;\n\t\treturn;\n\t}\n} trie;\nint n, pivot;\nstring ansSeq, in[N];\n\nvoid dfs(int cur = 0, int ch = 0) {\n\t// pivot \u662f\u6700\u957f\u4e32\u6807\u8bb0\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\n\tint pivot = -1;\n\tif (cur != 0) ansSeq += 'a' + ch, ans++;\n\twhile (trie.nxt[cur][27]--) ansSeq += 'P', all--, ans++; \n\tfor (int i = 0; i < 26; i++) {\n\t\tif (trie.nxt[cur][i] && trie.nxt[trie.nxt[cur][i]][26]) {\n\t\t\tpivot = i;\n\t\t\tcontinue;\n\t\t}\n\t\tif (trie.nxt[cur][i]) dfs(trie.nxt[cur][i], i);\n\t}\n\t// \u5f3a\u5236\u5730\u628a pivot \u653e\u5728\u6700\u540e\u8bbf\u95ee\n\tif (~pivot) dfs(trie.nxt[cur][pivot], pivot);\n\tif (all) ansSeq += '-', ans++;\n\treturn;\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\t\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++) {\n\t\tcin >> in[i];\n\t\tif (i == 1) pivot = 1;\n\t\telse if (in[pivot].length() < in[i].length()) pivot = i;\n\t}\n\n\tfor (int i = 1; i <= n; i++) trie.insert(in[i], pivot == i);\n\n\tdfs();\n\t\n\tcout << ans << '\\n';\n\tfor (char c : ansSeq) cout << c << '\\n';\n\treturn 0;\n}\n```",
        "postTime": 1675410020,
        "uid": 750067,
        "name": "ForgotDream_CHN",
        "ccfLevel": 0,
        "title": "P4683 Type Printer"
    },
    {
        "content": "\u672c\u9898\u8ba9\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6253\u5b57\u673a\uff0c\u6a21\u62df\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n1. \u5c06\u5f53\u524d\u5355\u8bcd\u7684\u5c3e\u90e8\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u3002\n\n1. \u5c06\u5f53\u524d\u5355\u8bcd\u7684\u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u3002\n\n1. \u6253\u5370\u5f53\u524d\u5355\u8bcd\u3002\n\n\u4f7f\u7ed9\u51fa\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u6574\u4f53\u64cd\u4f5c\u6700\u5c11\u7684\u60c5\u51b5\u4e0b\u6253\u5370\u51fa\u6240\u6709\u5355\u8bcd\u3002\n\n\u6211\u4eec\u60f3\u5230\u662f\u6700\u5c11\u6709\u51e0\u6b21\uff0c\u4e8e\u662f\u6211\u4eec\u80fd\u60f3\u5230\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u4e8e\u662f\u5c31\u80fd\u60f3\u5230 Trie \u6811\u3002\n\n\u6240\u4ee5\uff0c\u9898\u76ee\u5c31\u53d8\u6210\u4e86\uff1a\u786e\u5b9a\u4e00\u4e2a dfs \u7684\u987a\u5e8f\u4f7f\u5f97\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u80fd\u8bbf\u95ee\u5230\uff0c\u5e76\u4e14\u90fd\u7ea6\u675f\u4e8e\u67d0\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u3002\n\n\u5176\u5b9e\u6211\u4eec\u80fd\u53d1\u73b0\uff0c\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u6700\u957f\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5148\u904d\u5386\u5176\u4ed6\u5355\u8bcd\uff0c\u6700\u540e\u5728\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u800c\u4e14\u8981\u5728 dfs \u524d\u5728\u6700\u957f\u5b57\u7b26\u4e32\u505a\u6807\u8bb0\uff0c dfs \u7684\u65f6\u5019\u5c3d\u91cf\u8d70\u505a\u8fc7\u6807\u8bb0\u7684\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6b21\u6570\u6700\u77ed\u3002\n\n dfs \u65f6\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\uff0c\u5c31\u8981\u6253\u5370-\u3002\n\n## AC \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\ntypedef long long LL;\nconst int MAXN = 1e6 + 10;\nconst int INF = 0x3f;\nstruct node{\n\tint ne[27];\n\tbool used;\n\tbool f;\n}head[MAXN];\nstring l;\nint id;\nvoid add(string s){\n\tint num = 0;\n\tfor(int i = 0;i < s.size(); i++){\n\t\tint now = s[i] - 'a';\n\t\tif(!head[num].ne[now])head[num].ne[now] = ++id;\n\t\tnum = head[num].ne[now];\n\t}\n\thead[num].f = 1;\n} \nvoid find(string s){\n\tint num = 0;\n\tfor(int i = 0;i < s.size(); i++){\n\t\tint now = s[i] - 'a';\n\t\tnum = head[num].ne[now];\n\t\thead[num].used = true;\n\t}\n}\nstring x = \"\";\nint m;\nbool flag;\n#define addP (x += \"P\")\nvoid dfs(int u){\n\tint num = -1;\n\tif(head[u].f)addP;\n\tfor(int i = 0;i < 26; i++){\n\t\tif(head[head[u].ne[i]].used)num = i;\n\t\telse if(head[u].ne[i]){\n\t\t\tx += (i + 'a');\n\t\t\tdfs(head[u].ne[i]);\n\t\t}\n\t}\n\tif(num != -1){\n\t\tx += (num + 'a');\n\t\tdfs(head[u].ne[num]);\n\t}\n\tif(head[u].used && num == -1)flag = 1;\n\tif(!flag)x += \"-\";\n\treturn ;\n}\nint main()\n{\n\tint n;\n\tcin >> n;\n\tstring a;\n\tfor(int i = 0;i < n; i++){\n\t\tcin >> a; \n\t\tadd(a);\n\t\tif(a.size() > l.size())l = a;\n\t}\n\tfind(l);\n\tdfs(0);\n\tcout << x.size() << endl;\n\tfor(int i =0;i < x.size(); i++)cout << x[i] << endl;\n    return 0;\n}\n\n```\n~~\u8dea\u6c42\u7ba1\u7406\u5458\u901a\u8fc7~~",
        "postTime": 1648286697,
        "uid": 341036,
        "name": "\u8521\u7ae3\u51ef",
        "ccfLevel": 4,
        "title": "[IOI 2008]Type Printer"
    },
    {
        "content": "## P4683 [ IOI2008 ] Type Printer \u9898\u89e3\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u4e00\u4e2a\u6253\u5370\u673a\u652f\u6301\u5220\u9664\uff0c\u6dfb\u52a0\u5b57\u7b26\u548c\u6253\u5370\u4e09\u79cd\u64cd\u4f5c\uff0c\u6c42\u6253\u5370\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u9700\u8981\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\n\n### \u5206\u6790\n\n\u4f9d\u7167\u6837\u4f8b\u6570\u636e\uff0c\u5047\u8bbe\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u4e00\u4e2a\u4e00\u4e2a\u6253\u5370\u5e76\u5220\u9664\uff0c\u90a3\u4e48\u4f1a\u53d1\u73b0\u5728\u8fd9\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5220\u53bb\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u5220\u9664\u7684\u8fd9\u4e9b\u5b57\u7b26\u4e3a**\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\u7684\u524d\u7f00**\u3002\n\n\u601d\u8003\u5982\u4f55\u4f18\u5316\u8fd9\u4e9b\u524d\u7f00\uff0c\u53ef\u4ee5\u81ea\u7136\u5730\u60f3\u5230 trie \u6811\u5b9e\u73b0\u65f6\u4f1a\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u540c\u524d\u7f00\u5408\u5e76\uff0c\u4e8e\u662f\u53ef\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u63d2\u5165\u4e00\u4e2a trie \u6811\uff0c\u4f7f\u7528\u6df1\u641c\u641c\u7d22\u8fd9\u68f5\u6811\uff0c\u5e76\u5c06\u64cd\u4f5c\u5e8f\u5217\u8f93\u51fa\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6700\u540e\u4e00\u4e2a\u6253\u5370\u7684\u5b57\u7b26\u4e32\u4e0d\u9700\u8981\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u5220\u9664\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u6700\u957f\u7684\u5b57\u7b26\u4e32\u653e\u5230\u6700\u540e\u5904\u7406\uff0c\u51cf\u5c11\u5220\u9664\u7684\u957f\u5ea6\uff0c\u4f7f\u7ed3\u679c\u6700\u4f18\u3002\n\n### \u4ee3\u7801\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nchar tmp[21],way[5005000];\nint maxlen,ti,tot=1,trie[500500][27],ans,all,n;\nint en[500500],lar[500500];\nvoid dfs(int x){\n\tint tmp=0;\n\tif(lar[x]==ti && en[x]==1 && all==n-1){\n\t\tway[++ans]='P';//\u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u9700\u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u4e14\u6700\u957f\u90a3\u4e48\u4e0d\u9700\u8981\u5220\u9664\uff0c\u76f4\u63a5\u8fd4\u56de\n\t\treturn;\n\t}\n\tif(en[x]==1){\n\t\tway[++ans]='P';\n\t\tall++;//\u5df2\u6253\u5370++\n\t}\n\tfor(int i=1;i<=26;i++){\n\t\tif(trie[x][i] && lar[trie[x][i]]!=ti){//\u4e0d\u662f\u6700\u957f\u7684\u5219\u6df1\u641c\n\t\t\tway[++ans]=char('a'+i-1);\n\t\t\tdfs(trie[x][i]);\n\t\t\tway[++ans]='-';\n\t\t}\n\t\telse if(trie[x][i]) tmp=i;//\u662f\u5219\u6807\u8bb0\n\t}\n\tif(tmp){\n\t\tway[++ans]=char('a'+tmp-1);//\u5982\u679c\u88ab\u6807\u8bb0\u5219\u4e0d\u5220\u9664\u76f4\u63a5\u6df1\u641c\uff08\u6700\u540e\u5904\u7406\uff09\n\t\tdfs(trie[x][tmp]);\n\t}\n}\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>(tmp+1);\n\t\tint p=1,len=strlen(tmp+1),flag=0;\n\t\tif(len>maxlen){//\u67e5\u627e\u6700\u5927\u7684\u5b57\u7b26\u4e32\u5e76\u6807\u8bb0\n\t\t\tmaxlen=len;\n\t\t\tti++;//\u7d2f\u52a0\u7248\u672c\uff0c\u5224\u65ad\u65f6\u82e5\u4e3a\u6700\u65b0\u7248\u5219\u4e3a\u6700\u957f\u5b57\u7b26\u4e32\n\t\t\tflag=1;\n\t\t}\n\t\tfor(int j=1;j<=len;j++){\n\t\t\tint num=tmp[j]-'a'+1;\n\t\t\tif(trie[p][num]==0)trie[p][num]=++tot;\n\t\t\tp=trie[p][num];\n\t\t\tif(flag)lar[p]=ti;//\u8bb0\u5f55\u7248\u672c\u53f7\n\t\t\tif(j==len) en[p]=1;\n\t\t}// trie \u6811\u63d2\u5165\u64cd\u4f5c\n\t\tmemset(tmp,0,sizeof(tmp));\n\t}\n\tdfs(1);//\u8d77\u70b9\u4e3a\u6839\u8282\u70b9\n\tcout<<ans<<endl;\n\tfor(int i=1;i<=ans;i++)cout<<way[i]<<endl;\n}\n```\n",
        "postTime": 1646225077,
        "uid": 421265,
        "name": "eastcloud",
        "ccfLevel": 4,
        "title": "P4683 [IOI2008] Type Printer \u9898\u89e3"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e\u4e2a\u4eba\u535a\u5ba2\uff1a[Link](https://www.watertomato.com/p4683-ioi2008-type-printer-%e6%89%93%e5%8d%b0%e6%9c%ba-%e9%a2%98%e8%a7%a3/)\u3002\n\n\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6253\u5b57\u7b26\u4e32\u76f8\u5173\u7684\u9898\u4e86\uff0c\u627e\u9053\u7b80\u5355\u7684 Trie \u7ec3\u7ec3\u624b\u3002\n\n## \u9898\u610f\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4683)\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u590d\u53e4\u6253\u5370\u673a\uff0c\u652f\u6301\u6dfb\u52a0\u5b57\u6bcd\uff0c\u5220\u9664\u5b57\u6bcd\uff0c\u6253\u5370\u5b57\u6bcd\u3002\u6c42\u7528\u6700\u5c0f\u6b65\u9aa4\u6253\u5370\u51fa\u6240\u9700\u7684\u6240\u6709\u5355\u8bcd\u3002\n\n## \u89e3\u6790\n\n\u9996\u5148\u5bb9\u6613\u60f3\u5230\u5efa Trie\uff0c\u7136\u540e\u5728 Trie \u4e0a\u8fdb\u884c dfs\uff0c\u6bcf\u6b21\u8d70\u5230\u4e00\u4e2a\u7ed3\u70b9\u5c31\u6dfb\u52a0\u8fd9\u4e2a\u7ed3\u70b9\u5bf9\u5e94\u7684\u5b57\u6bcd\uff0c\u82e5\u8d70\u5230\u4e86\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\u5c31\u6253\u5370\uff0c\u7136\u540e\u5728\u6bcf\u5c42 dfs \u8fd4\u56de\u4e4b\u524d\u5220\u9664\u5f53\u524d\u5b57\u6bcd\u3002\n\n\u4f46\u662f\u8fd9\u5e76\u4e0d\u80fd\u6ee1\u8db3\u6700\u5c0f\u6b65\u9aa4\u3002\u5148\u8bf4\u7ed3\u8bba\uff1a**\u6700\u957f\u7684\u5355\u8bcd\u6700\u540e\u6253\u5370**\u3002\n\n\u601d\u8def\u53ca\u8bc1\u660e\u5982\u4e0b\uff1a\n\n\u6211\u4eec\u8003\u8651\u6700\u7ec8\u64cd\u4f5c\u5e8f\u5217\u4e2d\u4e09\u79cd\u64cd\u4f5c\u6240\u5360\u7684\u6570\u91cf\u3002\u5bb9\u6613\u53d1\u73b0\u6dfb\u52a0\u5b57\u6bcd\u7684\u64cd\u4f5c\u662f\u4e00\u5b9a\u7684\uff08\u4e00\u5b9a\u4e3a\u7ed3\u70b9\u6570\uff09\uff0c\u540c\u65f6\u6253\u5370\u64cd\u4f5c\u4e5f\u662f\u4e00\u5b9a\u7684\uff08\u4e00\u5b9a\u4e3a\u5355\u8bcd\u6570\uff09\u3002\u6211\u4eec\u8003\u8651**\u6700\u5c0f\u5316\u5220\u9664\u64cd\u4f5c\u7684\u6570\u91cf**\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c**\u6700\u540e**\u6253\u5370\u7684\u90a3\u4e2a\u5355\u8bcd\u5728 Trie \u6811\u4e0a\u7684**\u4e00\u6574\u6761\u94fe\u662f\u4e0d\u7528\u5220\u9664**\u7684\u3002\u800c\u5220\u9664\u64cd\u4f5c\u7684\u6570\u91cf\u5373\u4e3a\u7ed3\u70b9\u6570\u51cf\u53bb\u8fd9\u6761\u94fe\u7684\u957f\u5ea6\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u8fd9\u6761\u94fe\u6700\u957f\uff0c\u5373\u6700\u540e\u6253\u5370\u7684\u5355\u8bcd\u6700\u957f\u5373\u53ef\uff0c\u5bb9\u6613\u7ef4\u62a4\uff08\u8be6\u89c1\u4e0b\u65b9\u4ee3\u7801\uff09\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=25005;\nint n,tree[N<<5][26];\nint tot,cnt,Ans,maxx;\nbool p[N<<5],tag[N<<5];\nchar s[50],ans[N<<7];\nchar S[50];\ninline void insert(){\n\tscanf(\"%s\",s);\n\tint len=strlen(s);\n\tint u=0;\n\tif(len>maxx){//\u8bb0\u5f55\u6700\u957f\u5355\u8bcd\n\t\tmaxx=len;\n\t\tfor(int i=0;i<len;i++){\n\t\t\tS[i]=s[i];\n\t\t}\n\t} \n\tfor(int i=0;i<len;i++){\n\t\tint c=s[i]-'a';\n\t\tif(!tree[u][c]) tree[u][c]=++tot;\n\t\tu=tree[u][c];\n\t}\n\tp[u]=1;\n}\ninline void pre(){//\u9884\u5904\u7406\u6700\u957f\u5355\u8bcd\u6240\u5728\u94fe\n\tint len=maxx;\n\tint u=0;\n\tfor(int i=0;i<len;i++){\n\t\tint c=S[i]-'a';\n\t\ttag[tree[u][c]]=1;//tag \u8bb0\u5f55\u662f\u5426\u4e3a\u6700\u957f\u5355\u8bcd\u6240\u5728\u94fe\n\t\tu=tree[u][c];\n\t}\n}\ninline void print(){\n\tprintf(\"%d\\n\",cnt);\n\tfor(int i=1;i<=cnt;i++) printf(\"%c\\n\",ans[i]);\n}\ninline void dfs(int u){\n\tif(p[u]){//\u6253\u5370\n\t\tAns++;\n\t\tans[++cnt]='P';\n\t\tif(Ans==n) print();//\u4e3a\u4e86\u9632\u6b62\u8fdb\u884c\u591a\u4f59\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u8f93\u51fa\n\t}\n\tfor(int i=0;i<26;i++){\n\t\tif(tree[u][i]&&!tag[tree[u][i]]){\n\t\t\tans[++cnt]='a'+i;\n\t\t\tdfs(tree[u][i]);\n\t\t}\n\t}\n\tfor(int i=0;i<26;i++){\n\t\tif(tree[u][i]&&tag[tree[u][i]]){\n\t\t\tans[++cnt]='a'+i;\n\t\t\tdfs(tree[u][i]);\n\t\t}\n\t}//\u5148\u8d70\u5176\u4ed6\u7684\uff0c\u6700\u540e\u8d70\u6700\u957f\u5355\u8bcd\u6240\u5728\u94fe\n\tif(u!=0) ans[++cnt]='-';\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) insert();\n\tpre();\n\tdfs(0);\n\treturn 0;\n}\n```",
        "postTime": 1619698424,
        "uid": 195229,
        "name": "water_tomato",
        "ccfLevel": 7,
        "title": "P4683 [IOI2008] Type Printer \u6253\u5370\u673a \u9898\u89e3"
    },
    {
        "content": "\u53d1\u6211\u7684\u7b2c\u4e00\u7bc7IOI\u7684\u9898\u89e3\n\n\u672c\u9898\u5bb9\u6613\u60f3\u5230\u6700\u540e\u4fdd\u7559\u7684\u80af\u5b9a\u662f\u4e00\u6761\u94fe\n\n\u5e76\u4e14\u80fd\u591fprint\u7684\uff0c\u80fd\u65e9print\u4e00\u5b9a\u6bd4\u665aprint\u8981\u4f18\n\n\u6240\u4ee5\u53ea\u7528\u4e00\u904ddfs\u5148dfs\u4e0d\u662f\u6700\u957f\u94fe\u4e0a\u7684\n\n\u8fb9\u505a\u8fb9\u8f93\u51fa\u5373\u53ef\n\n```\n//code by luotc\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=500005;\n\nint n,ed[maxn],lenth[25005],td,mx,tot,ans,last;\nint ch[500005][26],belong[maxn];\nstring s[25005];\n\ninline void insert(string s){\n\tint len=s.length(),now=0;\n\tfor(int i=0;i<len;i++){\n\t\tint t=s[i]-'a';\n\t\tif(!ch[now][t]) ch[now][t]=++tot;\n\t\tnow=ch[now][t];\n\t}\n\ted[now]=1;\n}\n\ninline void modify(string s){\n\tint len=s.length(),now=0;\n\tfor(int i=0;i<len;i++){\n\t\tint t=s[i]-'a';\n\t\tif(!ch[now][t]) ch[now][t]=++tot;\n\t\tnow=ch[now][t];\n\t\tbelong[now]=1;\n\t}\n\ted[now]=1;\n\tlast=now;\n}\n\ninline void dfs(int x){\n\tif(ed[x]) printf(\"P\\n\");\n\tif(x==last) return;\n\tfor(int i=0;i<=25;i++){\n\t\tif(ch[x][i]){\n\t\t\tif(belong[ch[x][i]]) continue;\n\t\t\tprintf(\"%c\\n\",i+'a');\n\t\t\tdfs(ch[x][i]);\n\t\t\tprintf(\"-\\n\");\n\t\t}\n\t}\n\tfor(int i=0;i<=25;i++){\n\t\tif(belong[ch[x][i]]){\n\t\t\tprintf(\"%c\\n\",i+'a');\n\t\t\tdfs(ch[x][i]);\n\t\t}\n\t}\n}\n\nint main(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>s[i];\n\t\tlenth[i]=s[i].length();\n\t\tif(mx<lenth[i]){\n\t\t\ttd=i;\n\t\t\tmx=lenth[i];\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(i==td){\n\t\t\tmodify(s[i]);\n\t\t\tcontinue;\n\t\t}\n\t\tinsert(s[i]);\n\t}\n\tcout<<tot*2+n-mx<<endl;\n\tdfs(0);\n\treturn 0;\n}\n```\n\u6c42\u7ba1\u7406\u5927\u5927\u653e\u8fc7\u3002\u3002\u3002\u3002",
        "postTime": 1569641335,
        "uid": 118918,
        "name": "whyl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": "### \u6765\u4e00\u7bc7\u6307\u9488\u9898\u89e3&\u6700\u5feb\u4ee3\u7801(\u76ee\u524d)\n\n\u8fd9\u9898\u5c31\u662f\u628a$n$\u4e2a\u5b57\u7b26\u4e32\u63d2\u5165\u5230Tire\u6811\u4e2d\uff0c\u4e4b\u540e\u5728Tire\u6811\u4e0aDFS\n\n\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u6253\u5370\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u9000\u683c\u952e \u6240\u4ee5\u6211\u4eec\u8003\u8651\u8ba9\u6700\u957f\u7684\u90a3\u4e2a\u4e32\u505a\u6700\u540e\u6253\u5370\u7684\u4e32\n\n\u6211\u4eec\u5728Trie\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u8fd9\u9897\u5b50\u6811\u4e2d\u6700\u6df1\u7684\u94fe\u7684\u6df1\u5ea6\n\n\u5f80\u4e0b\u8d70\u7684\u65f6\u5019\u6211\u4eec\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u6700\u957f\u7684\u513f\u5b50\u6700\u540e\u904d\u5386\u5373\u53ef\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u9898\u7528\u6307\u9488\u5199\u666e\u901a\u7684Trie\u6811\u4f1aMLE\u4e09\u4e2a\u70b9\n\n\u4f46\u662f\u6307\u9488\u662f\u4e00\u79cd\u4fe1\u4ef0(~~\u5199\u6570\u7ec4\u4e0d\u53ef\u80fd\u7684\u8fd9\u8f88\u5b50\u90fd\u4e0d\u53ef\u80fd\u7684~~)\uff0c\u6211\u6700\u540e\u60f3\u8d77\u4e86\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u5b9e\u73b0\u7684Trie(\u4e00\u5171\u7528\u4e8615.77MB)\n\n\u6211\u4eec\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u50a8\u5b58\u5f53\u524d\u8282\u70b9\u662f\u54ea\u4e2a\u5b57\u7b26\u548c\u4e24\u4e2a\u6307\u9488(\u4e00\u4e2a\u6307\u5411\u5b69\u5b50\uff0c\u4e00\u4e2a\u6307\u5411\u5144\u5f1f)\n\u5177\u4f53\u7ec6\u8282\u8bf7\u770b\u4ee3\u7801\n\n\u4e8e\u662f\u6211\u7528\u6307\u9488A\u4e86\u8be5\u9898\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long LL;\nconst int N = 200000;\nconst int inf = 2147483647;\nchar obuf[1 << 23], *O = obuf;\ninline void _(char ch){*O++ = ch;} void print(int x) {if(x < 0) _('-'), x = -x; if(x>9) print(x/10);*O++ = x % 10 ^ 48;}\ninline LL read(){\n\tLL res = 0; char ch = getchar(); bool bo = false;\n\twhile(ch < '0' || ch > '9') bo = (ch == '-'), ch = getchar();\n\twhile(ch >= '0' && ch <= '9') res = (res << 1) + (res << 3) + (ch ^ 48), ch = getchar();\n\treturn bo ? -res : res;\n}\n\nint n, sum, ans;\n\nstruct node {\n\tint Max;\n\tchar c;//\u8fd9\u4e2a\u8282\u70b9\u7684\u5b57\u7b26\u662f\u3002\u3002\u3002\n\tbool last;//\u662f\u5426\u662f\u4e00\u4e2a\u4e32\u7684\u7ed3\u5c3e\n\tnode *ch, *xd;//ch\u662f\u6307\u5411\u5b69\u5b50\u7684\u6307\u9488\uff0cxd\u662f\u6307\u5411\u5144\u5f1f\u7684\u6307\u9488\n\tnode (int Max = 0, char c = 0) : Max(Max), c(c) { xd = ch = NULL; last = false; }\n} *root;\n\nnode* find(node *&o, char c) {//\u6ce8\u610fo\u52a0\u4e86\u5f15\u7528\n\to = o->ch; node *lst = o;\n\twhile(o && o->c != c) lst = o, o = o->xd;//o\u7684\u5b69\u5b50\u4e2d\u662f\u5426\u6709c\u8fd9\u4e2a\u5b57\u7b26\n\treturn lst;//\u8fd4\u56dec\u7684\u54e5\u54e5\n}\n\nvoid insert(char *s) {\n\tint len = strlen(s + 1); \n\tif(root == NULL) root = new node(len);\n\tnode *o = root;\n\tfor(int i = 1; i <= len; ++i) {\n\t\to->Max = std::max(o->Max, len);\n\t\tif(o->ch == NULL) o->ch = new node(len, s[i]);\n\t\tnode *lst = find(o, s[i]);//\u67e5\u627e\u6211\u4eec\u662f\u5426\u6709\u4e86\u8fd9\u4e2a\u8282\u70b9\n\t\tif(o == NULL) o = new node(len, s[i]), lst->xd = o;//\u6ca1\u6709\u6211\u4eec\u5c31new\u4e00\u4e2a\uff0c\u8ba9\u8be5\u8282\u70b9\u7684\u5144\u5f1f\u6307\u5411\u8be5\u8282\u70b9\n\t}\n\to->last = true;//\u6253\u4e0a\u7ed3\u5c3e\u6807\u8bb0\n}\n\nvoid print(node *o) {\n\tif(o->last) { _('P'), _('\\n'), ++sum, ++ans; }//\u5982\u679c\u8be5\u8282\u70b9\u5df2\u7ecf\u662f\u4e00\u4e2a\u4e32\u7684\n\tnode *k = NULL;\n\tfor(node *i = o->ch; i; i = i->xd) {//\u8bbf\u95eeo\u7684\u6240\u6709\u513f\u5b50\n\t\tif(k == NULL && i->Max == o->Max) { k = i; continue; } \n\t\t_(i->c), _('\\n'); ++ans;//\u6211\u7528\u4e86fwrite\u5728\u6700\u540e\u7edf\u4e00\u8f93\u51fa\uff0c\u548c\u522b\u4eba\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u4e0b\u6765\u8f93\u51fa\u662f\u4e00\u4e2a\u9053\u7406\n\t\tprint(i);\n\t}\n\tif(k) _(k->c), _('\\n'), print(k), ++ans;//\u6709\u7684\u65f6\u5019o->ch == NULL\n\tif(sum != n) _('-'), _('\\n'), ++ans;//\u6211\u4eec\u662f\u5426\u5df2\u7ecf\u6253\u5370\u4e86\u6240\u6709\u7684\u4e32\uff0c\u6253\u5370\u4e86\u5c31\u4e0d\u7528\u6253\u5370\u6700\u540e\u4e00\u4e2a\u4e32\n}\n\nchar s[N];\n\nint main() {\t\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; ++i) {\n\t\tscanf(\"%s\", s + 1);\n\t\tinsert(s);\n\t}\n\tprint(root);\n\tprintf(\"%d\\n\", ans);\n\tfwrite(obuf, O - obuf, 1, stdout);//fwrite\u6700\u540e\u7edf\u4e00\u6253\u5370\u6240\u6709\u7684\u64cd\u4f5c\u5e8f\u5217\n\treturn 0;\n}\n```\n",
        "postTime": 1569407542,
        "uid": 162451,
        "name": "__wfx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    },
    {
        "content": " [\u5b89\u5229\u4e00\u6ce2\u535a\u5ba2](https://www.cnblogs.com/cold-cold/p/10226718.html)\n\n\n\u6211\u4eec\u8003\u8651\u5982\u679c\u6253\u5370\u7ed3\u675f\u65f6\uff0c\u4e0d\u5141\u8bb8\u6709\u90e8\u5206\u5b57\u6bcd\u7559\u5728\u6253\u5370\u673a\u5185\u3002\n\n\u8fd9\u9898\u5e94\u8be5\u600e\u4e48\u505a\n\n\u663e\u7136\u6211\u4eec\u5c06\u6240\u6709\u8981\u6253\u5370\u7684\u5b57\u7b26\u4e32\u653e\u5165\u4e00\u68f5Trie\u6811\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662fTrie\u6811\u7684\u8282\u70b9\u6570\u4e582+m\n\n\u6253\u5370\u987a\u5e8f\u53ea\u8981\u6cbf\u6811\u8d70\u5373\u53ef\n\n\u73b0\u5728\u6211\u4eec\u518d\u6765\u8003\u8651\u6253\u5370\u7ed3\u675f\u65f6\uff0c\u5141\u8bb8\u6709\u90e8\u5206\u5b57\u6bcd\u7559\u5728\u6253\u5370\u673a\u5185\u7684\u60c5\u51b5\n\n\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u4e0d\u7528\u5220\u9664\n\n\u90a3\u4e48\u6211\u4eec\u8ba9\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\u6700\u540e\u8f93\u51fa\u5373\u53ef\n\n\u5b9e\u73b0\u65b9\u5f0f\u4e3a\uff0c\u8bb0\u5f55\u4e0b\u6700\u957f\u7684\u4e32\u540e\uff0c\u5728Trie\u6811\u4e0a\u6253\u4e0a\u6807\u8bb0\n\n\u904d\u5386Trie\u6811\u65f6\uff0c\u78b0\u5230\u6807\u8bb0\u5c31\u6700\u540e\u8bbf\u95ee\n\n\u6b64\u5904\u5b9e\u73b0\u7ec6\u8282\u8f83\u591a\uff0c\u8981\u5c0f\u5fc3\u8c28\u614e\n\n\u603b\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <map>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <cstdio>\n#include <cstdlib>\nusing namespace std;\ntypedef long long ll;\ninline int read()\n{\n    register int p(1),a(0);register char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') p=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') a=a*10+ch-48,ch=getchar();\n    return a*p;\n}\nconst int N=500010;\nint n,tot=0,root,all=0,finish;\nchar du[N],ji[N],ans[1001000];\nstruct Trie\n{\n    int nxt[26];\n    bool end,mark;\n}tree[N];\nint newnode()\n{\n    ++tot;\n    memset(tree[tot].nxt,-1,sizeof(tree[tot].nxt));\n    return tot;\n}\nvoid insert(char *a)\n{\n    int cur=root,len=strlen(a+1),idx;\n    for(int i=1;i<=len;i++)\n    {\n        idx=a[i]-'a';\n        if(tree[cur].nxt[idx]==-1)\n            tree[cur].nxt[idx]=newnode();\n        cur=tree[cur].nxt[idx];\n    }\n    tree[cur].end=1;            \n}\nvoid biao(char *a)\n{\n    int cur=root,len=strlen(a+1),idx;\n    for(int i=1;i<=len;i++)\n    {\n        idx=a[i]-'a';\n        cur=tree[cur].nxt[idx];\n        tree[cur].mark=1;\n    }            \n}\nvoid DFS(int xx)\n{\n    if(tree[xx].end) ans[++all]='P';\n    int temp=-1,cur;\n    for(int i=0;i<26;i++) if(tree[xx].nxt[i]!=-1)\n    {\n        cur=tree[xx].nxt[i];\n        if(!tree[cur].mark)\n        {\n            ans[++all]=i+'a';\n            DFS(tree[xx].nxt[i]);\n        }\n        else temp=i;\n    }\n    if(temp!=-1) ans[++all]=temp+'a',DFS(tree[xx].nxt[temp]);\n    if(temp==-1&&tree[xx].mark) finish=1;\n    if(!finish) ans[++all]='-';\n}\nint main()\n{\n    // freopen(\"input\",\"r\",stdin);\n    // freopen(\"output\",\"w\",stdout);\n    n=read();\n    root=newnode();\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",du+1);insert(du);\n        if(i==1||strlen(du+1)>strlen(ji+1)) strcpy(ji+1,du+1);        \n    }\n    biao(ji);\n    DFS(root);\n    printf(\"%d\\n\",all);\n    for(int i=1;i<=all;i++) printf(\"%c\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1546701386,
        "uid": 48934,
        "name": "cold_cold",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4683 \u3010[IOI2008] Type Printer \u6253\u5370\u673a\u3011"
    }
]