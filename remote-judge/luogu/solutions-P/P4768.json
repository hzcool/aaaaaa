[
    {
        "content": "\u65b0\u9c9c\u51fa\u7089\u7684noi2018\u8bd5\u9898\u3002\n\u4e0b\u9762\u8bb2\u8bb2\u8fd9\u9898\u7684\u89e3\u6cd5\uff1a\n\u9996\u5148\u8981\u5b66\u4e60\u4e00\u4e2a\u53eb\u505a$kruskal$\u91cd\u6784\u6811\u7684\u4e1c\u4e1c\u3002\n\n\u542c\u540d\u5b57\u5c31\u77e5\u9053\u8ddf$kruskal$\u7b97\u6cd5\u6709\u5173\uff0c\u6ca1\u9519\uff0c\u539f\u6765\u7684$kruskal$\u7b97\u6cd5\u5c31\u662f\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u7684\uff0c\u4f46\u5f53\u6211\u4eec\u4f7f\u7528$kruskal$\u91cd\u6784\u6811\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u627e\u51fa\u7684\u4e0d\u540c\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u7956\u5148\uff0c\u6211\u4eec\u90fd\u65b0\u5efa\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u4e24\u4e2a\u7956\u5148\u7684\u7236\u4eb2\uff0c\u5e76\u5c06\u5f53\u524d\u8fb9\u7684\u8fb9\u6743\u8f6c\u5316\u4e3a\u65b0\u70b9\u7684\u70b9\u6743\u3002\u7136\u800c\uff0c\u8def\u5f84\u538b\u7f29\u7684\u65f6\u5019\u4f1a\u8ba9\u6211\u4eec\u4e22\u5931\u8fd9\u79cd\u8f9b\u8f9b\u82e6\u82e6\u521b\u9020\u7684\u6811\u7684\u5f62\u72b6\u3002\u3002\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u540c\u65f6\u4f7f\u7528\u4e8c\u53c9\u6811\u6765\u7ef4\u62a4\u6811\u7684\u5f62\u72b6\u3002\u8fd9\u6837\u7ef4\u62a4\u51fa\u6765\u7684\u6811\u5c31\u662f$kruskal$\u91cd\u6784\u6811\u3002\n\n\u4e0d\u96be\u53d1\u73b0$kruskal$\u91cd\u6784\u6811\u6709\u51e0\u6761\u91cd\u8981\u7684\u6027\u8d28\uff1a\n1.\u6811\u4e0a\u9664\u53f6\u5b50\u7ed3\u70b9\u4ee5\u5916\u7684\u70b9\u90fd\u5bf9\u5e94\u7740\u539f\u6765\u751f\u6210\u6811\u4e2d\u7684\u8fb9\uff0c\u53f6\u5b50\u7ed3\u70b9\u5c31\u662f\u539f\u6765\u751f\u6210\u6811\u4e0a\u7684\u8282\u70b9\u3002\n2.\u7531\u4e8e\u65b0\u70b9\u7684\u521b\u5efa\u987a\u5e8f\u4e0e\u539f\u6765\u751f\u6210\u6811\u4e0a\u8fb9\u6743\u7684\u5927\u5c0f\u6709\u5173\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u4e0a\u9664\u53f6\u5b50\u7ed3\u70b9\u5916\u6309\u987a\u5e8f\u8bbf\u95ee\u5230\u7684\u70b9\u7684\u70b9\u6743\u662f\u5355\u8c03\u7684\u3002\n3.\u51fa\u4e8e$kruskal$\u7b97\u6cd5\u8d2a\u5fc3\u7684\u6027\u8d28\uff0c\u4e24\u4e2a\u70b9$u$\u548c$v$\u7684$lca$\u7684\u70b9\u6743\u5c31\u5bf9\u5e94\u7740\u5b83\u4eec\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u74f6\u9888\u3002\n4.\u5b9e\u9645\u4e0a\u8fd9\u68f5\u6811\u5c31\u662f\u4e00\u4e2a\u4e8c\u53c9\u5806\n\n\u6240\u4ee5\u8fd9\u9053\u9898\u5982\u4f55\u7528$krukal$\u91cd\u6784\u6811\u505a\u5462\uff1f\n\n\u5982\u679c\u6211\u4eec\u4ee5\u6d77\u62d4\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u5bf9\u8fb9\u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\uff0c\u7136\u540e\u4fee\u5efa$kruskal$\u91cd\u6784\u6811\uff0c\u8fd9\u6837\u5c31\u5f04\u51fa\u4e86\u4e00\u9897\u4ee5\u6d77\u62d4\u4e3a\u5173\u952e\u5b57\u7684\u5c0f\u6839\u5806\u3002\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u5b50\u6811\uff0c\u5982\u679c\u8be2\u95ee\u4e2d\u7684\u6c34\u4f4d\u7ebf\u662f\u4f4e\u4e8e\u5b50\u6811\u7684\u6839\u8282\u70b9\u7684\uff0c\u90a3\u4e48\u6b64\u65f6\u8fd9\u68f5\u5b50\u6811\u4e2d\u7684\u6240\u6709\u53f6\u5b50\u7ed3\u70b9\u90fd\u662f\u8fde\u901a\u7684\u3002\u653e\u5230\u9898\u4e2d\u5c31\u662f\u8bf4\u8fd9\u9897\u5b50\u6811\u4e2d\u4efb\u9009\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u5230\u5b50\u6811\u4e2d\u7684\u5176\u5b83\u70b9\u90fd\u4e0d\u9700\u8981\u82b1\u8d39\u3002\n\n\u7136\u540e\u6211\u4eec\u5047\u8bbe\u5bf9\u4e8e\u5f53\u524d\u8be2\u95ee\uff0c\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9$u$\uff0c\u6ee1\u8db3$d[u]>p$\u4e14$d[fa[u]]<=p$\u4e14\u51fa\u53d1\u70b9$v$\u5728\u5b50\u6811\u4e2d\uff0c\u8fd9\u65f6\u4ece$v$\u51fa\u53d1\u53ef\u4ee5\u76f4\u63a5\u62b5\u8fbe\u5b50\u6811\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4ece\u4f17\u591a\u53f6\u5b50\u8282\u70b9\u4e2d\u9009\u51fa\u4e00\u4e2a\u8ddd\u79bb$1$\u53f7\u70b9\u82b1\u8d39\u6700\u5c0f\u7684\u3002\n\n\u7136\u540e\u518d\u634b\u4e00\u634b\u601d\u8def\u3002\u6211\u4eec\u9996\u5148\u8981\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230$1$\u53f7\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u8fd9\u4e2a\u76f4\u63a5$dijstra$+\u6700\u77ed\u8def\u9884\u5904\u7406\u3002\u7136\u540e\u662f\u8981\u5efa\u51fa$kruskal$\u91cd\u6784\u6811\uff0c\u518d\u7136\u540e\u7ef4\u62a4\u4ee5\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u65f6\u5b50\u6811\u4e2d\u8ddd\u79bb$1$\u53f7\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u8fd9\u4e2a\u5efa\u5b8c\u6811\u540e\u4e00\u4e2a\u7b80\u5355\u7684$dfs$\u641e\u5b9a\u3002\u6700\u540e\u662f\u5982\u4f55\u627e\u5230\u70b9$u$\uff0c\u8fd9\u65f6\u6211\u4eec\u8981\u8ba9\u4e00\u4e2a\u91cd\u8981\u7684\u7b97\u6cd5\u767b\u573a\uff1a\u500d\u589e\u7b97\u6cd5\u3002\u76f4\u63a5\u52a0\u4e0a\u70b9\u6743$>p$\u7684\u9650\u5236\u5728\u6811\u4e0a\u500d\u589e\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O$\uff08$T*nlogn$\uff09\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\n#define N 400005\n#define M 800005\nusing namespace std;\ninline int read(){\n\tint ans=0;\n\tchar ch=getchar();\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))ans=(ans<<3)+(ans<<1)+(ch^48),ch=getchar();\n\treturn ans;\n}\ninline void write(int x){\n\tif(x>9)write(x/10);\n\tputchar(x%10+'0');\n}\nint n,m,T,q,k,s,vis[N],first[N<<1],head[N],cntx=0,d[N],dep[N],f[N][20],fa[N<<1],lastans=0,totx=0;\nstruct Node{int u,v,l,a;}e[M],p[N<<1];\nstruct edge{int v,next;}tr[M<<1];\nstruct node{int v,next,w;}t[M];\nstruct heap{int u,v;};\ninline bool operator<(heap a,heap b){return a.v>b.v;}\ninline void dijstra(int s=1){\n\tmemset(vis,false,sizeof(vis));\n\tmemset(d,0x3f,sizeof(d));\n\tpriority_queue<heap>q;\n\td[s]=0;\n\tq.push((heap){s,d[s]});\n\twhile(!q.empty()){\n\t\theap x=q.top();\n\t\tq.pop();\n\t\tif(vis[x.u])continue;\n\t\tvis[x.u]=true;\n\t\tfor(int i=head[x.u];i;i=t[i].next){\n\t\t\tint v=t[i].v;\n\t\t\tif(vis[v])continue;\n\t\t\tif(d[v]>d[x.u]+t[i].w){\n\t\t\t\td[v]=d[x.u]+t[i].w\n\t\t\t\t;\n\t\t\t\tq.push((heap){v,d[v]});\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)p[i].l=d[i];\n}\ninline bool cmp(Node a,Node b){return a.a>b.a;}\ninline int find(int x){return x==fa[x]?fa[x]:fa[x]=find(fa[x]);}\ninline void add(int u,int v){\n\ttr[++cntx].v=v;\n\ttr[cntx].next=first[u];\n\tfirst[u]=cntx;\n}\ninline void addx(int u,int v,int w){\n\tt[++totx].v=v;\n\tt[totx].next=head[u];\n\tt[totx].w=w;\n\thead[u]=totx;\n}\ninline void dfs(int u,int pa){\n\tdep[u]=dep[pa]+1,f[u][0]=pa;\n\tfor(int i=1;i<=19;++i)f[u][i]=f[f[u][i-1]][i-1];\n\tfor(int i=first[u];i;i=tr[i].next){\n\t\tint v=tr[i].v;\n\t\tdfs(v,u);\n\t\tp[u].l=min(p[u].l,p[v].l);\n\t}\n}\ninline int query(int x,int y){\n\tfor(int i=19;i>=0;--i)if(dep[x]-(1<<i)>0&&p[f[x][i]].a>y)x=f[x][i];\n\treturn p[x].l;\n}\ninline void kruskal(){\n\tint tot=0,cnt=n;\n\tfor(int i=1;i<=(n<<1);++i)fa[i]=i;\n\tsort(e+1,e+m+1,cmp);\n\tfor(int i=1;i<=m;++i){\n\t\tint u=e[i].u,v=e[i].v;\n\t\tint fx=find(u),fy=find(v);\n\t\tif(fx!=fy){\n\t\t\tadd(++cnt,fx);\n\t\t\tadd(cnt,fy);\n\t\t\tfa[fx]=cnt;\n\t\t\tfa[fy]=cnt;\n\t\t\tp[cnt].a=e[i].a;\n\t\t\t++tot;\n\t\t}\n\t\tif(tot==n-1)break;\n\t}\n\tdfs(cnt,0);\n\twhile(q--){\n\t\tint x=(k*lastans+read()-1)%n+1,y=(k*lastans+read())%(s+1);\n\t\twrite(lastans=query(x,y));\n\t\tputs(\"\");\n\t}\n}\nint main(){\n\tT=read();\n\twhile(T--){\n\t\tlastans=0,n=read(),m=read();\n\t\tmemset(e,0,sizeof(e)),cntx=0,totx=0;\n\t\tmemset(first,0,sizeof(first));\n\t\tmemset(head,0,sizeof(head));\n\t\tmemset(f,0,sizeof(f));\n\t\tfor(int i=1;i<=m;++i)e[i].u=read(),e[i].v=read(),e[i].l=read(),e[i].a=read(),addx(e[i].u,e[i].v,e[i].l),addx(e[i].v,e[i].u,e[i].l);\n\t\tfor(int i=n+1;i<=(n<<1);++i)p[i].l=0x3f3f3f3f;\n\t\tdijstra();\n\t\tq=read(),k=read(),s=read();\n\t\tkruskal();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1531971381,
        "uid": 47765,
        "name": "ldxcaicai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "### \u95f2\u8bdd\n\n\u4e00\u4e2a\u849f\u84bb\uff0c\u5728\u7f51\u7edc\u540c\u6b65\u8d5b\u4e0a\u8fdb\u884c\u4e86\u8fd9\u6837\u7684\u8868\u6f14\u2014\u2014\n\nT2\u7ec4\u5408\u8ba1\u6570\u4e0d\u4f1a\uff0cT3\u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u4e0d\u4f1a\uff0c\u4e8e\u662f\u7206\u809dT1\n\n\u4e00\u5f00\u59cb\u4ee5\u4e3a\u6574\u4e2a\u5730\u56fe\u90fd\u6709\u8f66\uff0c\u7136\u540e\u5199\u4e862h+\u7684\u6811\u5957\u6811\uff0c\u7ec8\u4e8e\u53d1\u73b0\u6837\u4f8b\u8fc7\u4e0d\u53bb\n\n\u7136\u540e\u5199\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6Debug\u523013:20\u8fc7\u4e86\u524d4\u4e2a\u6837\u4f8b\uff0c\u7136\u540e\u7b2c5\u4e2aT\u98de\u4e86\u3002\n\nFST\uff1f\n\n\u3002\u3002\u3002\u3002\u3002\u3002\n\nFST\uff01\n\n\u5b8c\u7f8e\u6536\u83b750\u5206\u66b4\u529b\u5206\u3002\n\n\u539f\u6765\u662f\u6309\u79e9\u5408\u5e76\u90a3\u91cc\u5495\u5495\u4e86\u3002\n\n\u4ece50\u5230100\u7684\u8715\u53d8\uff0c\u53ea\u9700\u4e00\u884c\uff0c\u4f60\u503c\u7684\u62e5\u6709\u3002\n\n## \u601d\u8def\n\n\u4e0d\u4f1akruscal\u91cd\u6784\u6811\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5047\u8bbe\u6211\u4eec\u786e\u5b9a\u4e86\u6c34\u4f4d\u7ebf\uff0c\u90a3\u4e48\u5c31\u786e\u5b9a\u4e86\u56fe\u4e2d\u6709\u54ea\u4e9b\u8fb9\u662f\u8fde\u901a\u7684\u3002\u8fd9\u65f6\u5019\u7684\u7b54\u6848\u8be5\u5982\u4f55\u786e\u5b9a\u5462\uff1f\u56e0\u4e3a\u8f66\u53ef\u4ee5\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u968f\u4fbf\u5f00\uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u7684\u70b9\u7684\u7b54\u6848\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u8fde\u901a\u5757\u5185\u79bb$1$\u6700\u8fd1\u7684\u70b9\u5230$1$\u7684\u8ddd\u79bb\u3002\n\n\u90a3\u5f53\u7136\u8981\u9996\u5148\u628a\u5355\u6e90\u6700\u77ed\u8def\u6c42\u51fa\u6765\u3002~~SPFA\u6b7b\u4e86\uff1f\u88ab\u56fa\u5b9a\u4e86\uff1f\uff08\u53c2\u8003\u751f\u7269\u5fc5\u4fee3\uff09~~\uff0c\u8fd8\u597d\u849f\u84bb\u5199\u7684\u662fdijkstra\u3002\n\n\u56e0\u4e3a\u5e76\u67e5\u96c6\u53ea\u80fd\u5408\u5e76\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6309\u9ad8\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u4f9d\u6b21\u52a0\u8fb9\u3002\u5982\u679c\u662f\u79bb\u7ebf\u90a3\u597d\u529e\u4e86\uff0c\u628a\u8be2\u95ee\u4e5f\u6309\u9ad8\u5ea6\u6392\u4e2a\u5e8f\uff0c\u6bcf\u5728\u5e76\u67e5\u96c6\u91cc\u52a0\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u5b8c\u6210\u82e5\u5e72\u4e2a\u8be2\u95ee\u3002\n\n\u90a3\u5f3a\u5236\u5728\u7ebf\uff1f\u5f53\u7136\u8981\u628a\u5408\u5e76\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u7248\u672c\u90fd\u5b58\u8d77\u6765\u5566\uff01\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff08\u849f\u84bb\u4e4b\u524d\u5199\u8fc7\u4e00\u7bc7[blog](https://www.cnblogs.com/flashhu/p/8419760.html)\uff09\n\n\u5f53\u7136\uff0c\u9ad8\u5ea6\u8981\u79bb\u6563\u5316\uff0c\u4e3a\u4e86\u8ba9\u6bcf\u4e2a\u8be2\u95ee\u901a\u8fc7\u4e8c\u5206\u627e\u5230\u5bf9\u5e94\u7248\u672c\u3002\n\n\u590d\u6742\u5ea6$O(n\\log m+(m+q)\\log^2n)$\uff0c\u5f53\u7136\u8fd9\u91cc\u5199\u7684\u6709\u70b9\u4e11\uff0c\u5728\u5012\u5e8f\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5728\u5916\u9762\u653e\u5e76\u67e5\u96c6\uff0c\u7956\u5148\u5230\u5e76\u67e5\u96c6\u91cc\u8df3\uff0c\u6bd4\u5728\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u91cc\u8df3\u5feb\u591a\u4e86\uff0c\u590d\u6742\u5ea6$O(n\\log m+m\\log n+q\\log^2n)$\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define UI unsigned int\n#define RG register\n#define I inline\n#define R RG UI\n#define G c=getchar()\nusing namespace std;\nconst int N=2e5+9,M=8e5+9,S=2e7;\nstruct NODE{\n\tUI u,d;\n\tI bool operator<(RG NODE x)const{return d>x.d;}\n};//\u5806\u4f18\u5316dijkstra\u7684\u8282\u70b9\nstruct EDGE{\n\tUI u,v,a;\n\tI bool operator<(RG EDGE x)const{return a<x.a;}\n}e[M];//\u5bf9\u8fb9\u6392\u5e8f\npriority_queue<NODE>q;\nUI n,L,p,he[N],ne[M],to[M],l[M],a[M],b[M],d[N],rt[M],lc[S],rc[S],f[S],mn[S],dep[S];\nbool vis[N];\nI UI in(){\n\tRG char G;\n\twhile(c<'-')G;\n\tR x=c&15;G;\n\twhile(c>'-')x*=10,x+=c&15,G;\n\treturn x;\n}\nvoid build(R&u,R l,R r){//\u5efa\u521d\u59cb\u5e76\u67e5\u96c6\n\tu=++p;\n\tif(l==r){mn[u]=d[f[u]=l];return;}\n\tR m=(l+r)>>1;\n\tbuild(lc[u],l,m);\n\tbuild(rc[u],m+1,r);\n}\nUI ins(R*u,R v,R t){//\u63d2\u5165\n\tR l=1,r=n,m;\n\twhile(l!=r){\n\t\t*u=++p;m=(l+r)>>1;\n\t\tif(t<=m)r=m,rc[*u]=rc[v],u=lc+*u,v=lc[v];\n\t\telse  l=m+1,lc[*u]=lc[v],u=rc+*u,v=rc[v];\n\t}\n\treturn *u=++p;\n}\nUI getf(R rt,R t){//\u8df3\u7956\u5148\n\tR u,l,r,m;\n\twhile(1){\n\t\tu=rt;l=1;r=n;\n\t\twhile(l!=r){\n\t\t\tm=(l+r)>>1;\n\t\t\tif(t<=m)r=m,u=lc[u];\n\t\t\telse  l=m+1,u=rc[u];\n\t\t}\n\t\tif(t==f[u])break;\n\t\tt=f[u];\n\t}\n\treturn u;\n}\nint main(){\n\tfreopen(\"return.in\",\"r\",stdin);\n\tfreopen(\"return.out\",\"w\",stdout);\n\tR T=in(),m,i,j,u,v,w;\n\twhile(T--){\n\t\tp=0;n=in();m=in();//\u65f6\u523b\u6ce8\u610f\u6e05\u7a7a\u53d8\u91cf\uff01\n\t\tfor(i=1;i<=m;++i){\n\t\t\tu=in();v=in();\n\t\t\tne[++p]=he[u];to[he[u]=p]=v;\n\t\t\tne[++p]=he[v];to[he[v]=p]=u;\n\t\t\tl[p]=l[p-1]=in();\n\t\t\te[i]=(EDGE){u,v,a[p]=a[p-1]=in()};\n\t\t}\n\t\tmemset(d,-1,(n+1)<<2);//dijkstra\u5f00\u59cb\n\t\tp=d[1]=0;q.push((NODE){1,0});\n\t\twhile(!q.empty()){\n\t\t\tRG NODE cur=q.top();q.pop();\n\t\t\tif(vis[u=cur.u])continue;\n\t\t\tvis[u]=1;\n\t\t\tfor(i=he[u];i;i=ne[i])\n\t\t\t\tif(d[to[i]]>d[u]+l[i])\n\t\t\t\t\tq.push((NODE){to[i],d[to[i]]=d[u]+l[i]});\n\t\t}\n\t\tR q=in(),k=in(),s=in(),lans=0;\n\t\tsort(e+1,e+m+1);\n\t\tfor(i=1;i<=m;++i)b[i]=e[i].a;\n\t\tb[m+1]=s+1;L=unique(b+1,b+m+2)-b-1;//\u79bb\u6563\u5316\uff0c\u6ce8\u610f\u52a0\u5165s+1\n\t\tbuild(rt[L],1,n);\n\t\tfor(i=L-1,j=m;i;--i){\n\t\t\trt[i]=rt[i+1];\n\t\t\tfor(;j&&e[j].a==b[i];--j){\n\t\t\t\tif((u=getf(rt[i],e[j].u))==(v=getf(rt[i],e[j].v)))continue;//\u53ef\u4f18\u5316\u7684\u5730\u65b9\n\t\t\t\tif(dep[u]>dep[v])swap(u,v);//\u6309\u79e9\u5408\u5e76\n\t\t\t\tf[ins(&rt[i],rt[i],f[u])]=f[v];\n\t\t\t\tw=ins(&rt[i],rt[i],f[v]);\n\t\t\t\tf[w]=f[v];mn[w]=min(mn[u],mn[v]);//\u56e0\u4e3a\u6309\u79e9\u5408\u5e76\u6240\u4ee5min\u5fc5\u987b\u8981\u8bb0\n\t\t\t\tdep[w]=dep[v]+(dep[u]==dep[v]);//50\u5206\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e00\u884c\uff01\n\t\t\t}\n\t\t}\n\t\twhile(q--){\n\t\t\tv=(in()+k*lans-1)%n+1;u=(in()+k*lans)%(s+1);\n\t\t\tprintf(\"%u\\n\",lans=mn[getf(rt[upper_bound(b+1,b+L+1,u)-b],v)]);\n\t\t}//\u8c28\u614e\u9009\u62e9lower_bound\u548cupper_bound\n\t\tmemset(vis,0,n+1);\n\t\tmemset(he,0,(n+1)<<2);\n\t\tmemset(rt,0,(L+1)<<2);\n\t\tmemset(lc,0,(p+1)<<2);\n\t\tmemset(rc,0,(p+1)<<2);\n\t\tmemset(f,0,(p+1)<<2);\n\t\tmemset(mn,0,(p+1)<<2);\n\t\tmemset(dep,0,(p+1)<<2);//\u8be5\u6e05\u7a7a\u7684\u90fd\u8981\u6e05\u7a7a\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1531923215,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "####update8.31\n\n\u6700\u8fd1\u6709\u5c0f\u4f19\u4f34\u79c1\u4fe1\u95ee\u6211\u6709\u6ca1\u6709Kruskal\u91cd\u6784\u6811\u7684\u8bb2\u89e3\uff0c\u8bf4\u5b9e\u8bdd\u7f51\u4e0a\u786e\u5b9e\u7279\u522b\u5c11~~(\u5176\u5b9e\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u6bd4\u8f83\u51b7\u95e8)~~\uff0c\u6240\u4ee5\u849f\u84bb\u81ea\u5df1\u7b80\u5355\u603b\u7ed3\u4e86\u4e00\u4e0b\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\n####[Kruskal\u91cd\u6784\u6811\u2014\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/niiick/article/details/81952126)\n*********************\n\u849f\u84bb\u6253\u540c\u6b65\u8d5b\u7684\u65f6\u5019\u5199\u4e86\u4e2a\u66b4\u529b\u53ea\u5f97\u4e86\u516d\u5341\u591a\uff0c\n\u6bd4\u8d5b\u7ed3\u675f\u540e\u51a5\u601d\u82e6\u60f3\u7ec8\u4e8e\u60f3\u51fa\u4e86\u6b63\u89e3\uff0c\n\u7136\u800c\u8fd8\u662f\u8c03\u4e86\u4e00\u5929\u624d\u8c03\u51fa\u6765\n\n\u54b3\u54b3\uff0c\u56de\u5230\u6b63\u9898\n\uff0c\u8fd9\u9898\u6b63\u89e3\u5c31\u662f**Kruskal\u91cd\u6784\u6811**\n\n\u4ece\u5927\u4f53\u601d\u8def\u5165\u624b\uff0c\n\u6211\u4eec\u53ef\u4ee5\u628a\u4ecev\u52301\u7684\u8def\u5f84\u5206\u6210\u4e24\u90e8\u5206\uff0c\n\u4e00\u534a\u5168\u5f00\u8f66\uff0c\u4e00\u534a\u5168\u8d70\u8def\n\n\u4e5f\u5c31\u662f\u8bf4\u8981**\u679a\u4e3en\u4e2a\u8282\u70b9\u4f5c\u4e3a\u65ad\u70b9**(\u5047\u8bbe\u5f53\u524d\u65ad\u70b9\u4e3au)\uff0c\n\u8fd9\u4e2a\u65ad\u70b9\u662f\u53ef\u884c\u89e3\u4e0e\u6700\u4f18\u89e3\u5f53\u4e14\u4ec5\u5f53\n\n**\u5b58\u5728\u4e00\u6761\u4ecev\u5230u\u7684\u8def\u5f84\u53ef\u4ee5\u5168\u90e8\u5f00\u8f66**\n\n**\u4e14\u4eceu\u52301\u5168\u90e8\u8d70\u8def\u7684\u6700\u77ed\u8def\u662f\u6ee1\u8db3\u4e0a\u4e00\u6761\u4ef6\u4e2d\u6700\u77ed\u7684**\n\n\u90a3\u4e48\u8981\u600e\u4e48\u6c42\u51fa\u4ecev\u51fa\u53d1\u53ef\u4ee5\u5f00\u8f66\u5230\u7684\u70b9\u5462\uff0c\n\u663e\u7136\u4ecev\u51fa\u53d1\u5f00\u8f66\u53ef\u4ee5\u5230\u7684\u70b9\uff0c\n\u4e00\u5b9a\u6ee1\u8db3**\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u6d77\u62d4\u90fd\u9ad8\u4e8e\u6c34\u4f4d**\n\n\u8fd9\u91cc\u5df2\u7ecf\u5f88\u660e\u663e\u53ef\u4ee5\u7528**Kruskal\u91cd\u6784\u6811**\u6c42\u89e3\u4e86\n\n\u6211\u4eec\u628a\u6bcf\u6761\u8fb9**\u6309\u6d77\u62d4\u964d\u5e8f\u6392\u5e8f**\uff0c\n\u91cd\u6784\u6811\u5b8c\u6210\u540e\uff0c\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\n\u627e\u5230\u6811\u4e2d**\u6df1\u5ea6\u6700\u5c0f\u4e14\u6d77\u62d4\u5927\u4e8e\u6c34\u4f4d\u7684\u8282\u70b9**\uff0c\n\u90a3\u4e48**\u4ed6\u7684\u5b50\u6811\u7684\u5168\u90e8\u8282\u70b9\u90fd\u53ef\u4ee5\u7531v\u5f00\u8f66\u5230\u8fbe**\n\n\u8fd9\u4e00\u70b9\u53ef\u4ee5\u7531**\u91cd\u6784\u6811\u662f\u5c0f\u6839\u5806**\u7684\u6027\u8d28\u7b80\u5355\u5f97\u8bc1\uff0c\n\u5373\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u6d77\u62d4\u90fd\u6bd4\u8be5\u8282\u70b9\u5927\n\n\u800c\u6c42\u89e3\u8fd9\u4e2a**\u6df1\u5ea6\u6700\u5c0f\u4e14\u6d77\u62d4\u5927\u4e8e\u6c34\u4f4d\u7684\u8282\u70b9**\u53ef\u4ee5\u7528\u6811\u4e0a\u500d\u589e\uff0c\u4e24\u884c\u89e3\u51b3\n\n\u73b0\u5728\u8981\u6c42\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u8fd9\u4e2a\u5b50\u6811\u5185**\u6240\u6709\u8282\u70b9\u52301\u53f7\u8282\u70b9\u7684\u6b65\u884c\u6700\u77ed\u8def**\uff0c\n\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u9884\u5904\u74061\u8282\u70b9\u5230\u6240\u6709\u8282\u70b9\u6700\u77ed\u8def\u5c31\u597d\uff0c\n\u7136\u540edfs\u53ef\u4ee5\u987a\u4fbf\u6c42\u51fa\u67d0\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u6700\u77ed\u8def\n*******************\n\n```\n//niiick\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\ntypedef long long lt;\n\nlt read()\n{\n    lt f=1,x=0;\n    char ss=getchar();\n    while(ss<'0'||ss>'9'){if(ss=='-')f=-1;ss=getchar();}\n    while(ss>='0'&&ss<='9'){x=x*10+ss-'0';ss=getchar();}\n    return f*x;\n}\n\n\nconst int maxn=800010;\nint n,m,cnt;\nlt Q,K,S;\n\nstruct node{int u, v;lt hi;}edge[maxn<<1];\nbool cmp(node a,node b){return a.hi>b.hi;}\n\nstruct node2{int v,nxt;lt dis;}E[maxn<<1];\nint head[maxn],tot;\n\nlt d[maxn],vis[maxn],ff[maxn];\npriority_queue< pair<lt,int> > q;\n\nlt mi[maxn],val[maxn];\nint gra[maxn][23];\n\nvoid add(int u,int v,lt dis)\n{\n    E[++tot].nxt=head[u];\n    E[tot].v=v; E[tot].dis=dis;\n    head[u]=tot;\n}\n\nvoid dij()\n{\n    memset(vis,0,sizeof(vis));\n    memset(d,111,sizeof(d)); d[1]=0;\n    q.push(make_pair(0,1));\n\n    while(!q.empty())\n    {\n        int u=q.top().second; q.pop();\n        if(vis[u]) continue;\n\n        vis[u]=1;\n        for(int i=head[u];i;i=E[i].nxt)\n        {\n            int v=E[i].v;\n            if(d[u]+E[i].dis<d[v])\n            {\n                d[v]=d[u]+E[i].dis;\n                q.push(make_pair(-d[v],v));\n            }\n        }\n    }\n}\n\nint find(int x)\n{\n    if(x==ff[x])return x;\n    else return ff[x]=find(ff[x]);\n}\n\nvoid dfs(int u) \n{\n    mi[u]=d[u];\n    for(int i=head[u];i;i=E[i].nxt)\n    {\n        int v=E[i].v;\n        gra[v][0]=u;\n        dfs(v);\n        mi[u]=min(mi[u],mi[v]);\n    }\n    //if(u<=n) \n}\n\nvoid kruskal()\n{\n    memset(head,0,sizeof(head)); tot=1;\n    sort(edge+1,edge+1+m,cmp);\n    for(int i=1;i<=n;++i)ff[i]=i; \n    for(int i=1;i<=m;i++) \n    {\n        int fu=find(edge[i].u), fv=find(edge[i].v);\n        if(fu!=fv)\n        {\n            val[++cnt]=edge[i].hi;\n            ff[fu]=ff[fv]=ff[cnt]=cnt;\n            add(cnt,fu,0); add(cnt,fv,0);\n        }\n    }\n    dfs(cnt);\n}\n\nvoid init()\n{\n    memset(head,0,sizeof(head)); tot=1;\n    memset(gra,0,sizeof(gra)); \n    memset(mi,111,sizeof(mi));\n}\n\nint main() \n{\n    int T=read();\n    while(T--) \n    {\n        init();\n        n=read();m=read();cnt=n;\n        \n        for(int i=1;i<=m;i++)\n        {\n            int u=read(),v=read(),dis=read(),hi=read();\n            add(u,v,dis); add(v,u,dis);\n            edge[i].u=u; edge[i].v=v; edge[i].hi=hi;\n        }\n        dij();//\u9884\u5904\u74061\u5230\u6240\u6709\u8282\u70b9\u6700\u77ed\u8def\n        kruskal();//\u91cd\u6784\u6811\n        \n        for(int i=1;(1<<i)<=cnt;i++)\n        for(int u=1;u<=cnt;u++)\n        gra[u][i]=gra[gra[u][i-1]][i-1];\n                \n        Q=read();K=read();S=read();\n        lt last=0;\n        while(Q--) \n        {\n            int vi=read(),pi=read();\n            vi=(vi+K*last-1)%n+1;\n            pi=(pi+K*last)%(S+1);\n            \n            for(int j=22;j>=0;--j)//\u627e\u5230\u6df1\u5ea6\u6700\u5c0f\u4e14\u6d77\u62d4\u5927\u4e8e\u6c34\u4f4d\u7684\u8282\u70b9\n            if(gra[vi][j]&&val[gra[vi][j]]>pi) \n            vi=gra[vi][j];\n            \n            printf(\"%lld\\n\",last=mi[vi]);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1532091273,
        "uid": 60885,
        "name": "niiick",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "### \u6b64\u9898\u90e8\u5206\u5206\u5f88\u591a\uff0c\u9010\u5c42\u6b21\u8003\u8651\u90e8\u5206\u5206\n\n## $30\\%$\n\n\u5bf9\u4e8e\u53ea\u6709\u4e00\u79cd\u6d77\u62d4\u7684\u60c5\u51b5\uff0c\u8981\u4e48\u6240\u6709\u8fb9\u6d77\u62d4\u9ad8\u4e8e\u5f53\u524d\u6c34\u4f4d\u7ebf(\u6c7d\u8f66\u80fd\u7ecf\u8fc7\u6240\u6709\u8fb9\uff0c\u8f93\u51fa $0$ ) \uff0c\u8981\u4e48\u53ea\u80fd\u6b65\u884c\u3002\u8dd1\u4e00\u904d $dijkstra$\uff0c \u7136\u540e $O(1)$ \u7279\u5224\u4e00\u4e0b\uff0c\u671f\u671b\u5f97\u5206 $30$\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nconst int M = 400040;\nconst int N = 200020;\nusing namespace std;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x * f;\n}\nstruct node{\n    int nxt, to, dis, h;\n}edge[M << 1];\nint head[N], num;\nvoid build(int from, int to, int dis, int h){\n    edge[++num].nxt = head[from];\n    edge[num].h = h;\n    edge[num].to = to;\n    edge[num].dis = dis;\n    head[from] = num;\n}\nint Q, K, S;\nint n, m, s, H, T, lastans = 0;\nint getv(int lastans, int v0){\n    return (v0 + K * lastans - 1) % n + 1;\n}\nint geth(int lastans, int p0){\n    return (p0 + K * lastans) % (S+1);\n}\nint dist[N], vis[N];\nvoid dijkstra(){\n    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;\n    memset(dist, 0x3f, sizeof(dist));\n    memset(vis, 0, sizeof(vis));\n    q.push( make_pair(0, 1) ); dist[1] = 0;\n    while(!q.empty()){\n        int u = q.top().second; q.pop();\n        if(vis[u]) continue; vis[u] = 1;\n        for(int i=head[u]; i; i=edge[i].nxt){\n            int v = edge[i].to, d = edge[i].dis;\n            if(dist[v] > dist[u] + d){\n                dist[v] = dist[u] + d;\n                q.push( make_pair(dist[v], v) );\n            }\n        }\n    }\n}\nvoid clearx(){\n    memset(head, 0, sizeof(head));\n    num = 0;\n}\nint main(){\n    T = read();\n    while(T --){\n        lastans = 0;\n        clearx();\n        n = read(); m = read();\n        for(int i=1; i<=m; i++){\n            int u, v, l, a;\n            u = read(); v = read(); l = read(); a = read();\n            build(u, v, l, a);\n            build(v, u, l, a);\n        }\n        Q = read(); K = read(); S = read();\n        dijkstra();\n        while(Q --){\n            int v0, p0; v0 = read(); p0 = read();\n            s = getv(lastans, v0);\n            H = geth(lastans, p0);\n            if(H < edge[1].h){\n                puts(\"0\");\n                lastans = 0;\n                continue;\n            }\n            else{\n                lastans = dist[s];\n                cout<<dist[s]<<endl;\n            }\n        }\n    }\n    return 0;\n}\n\n```\n\n## \u53e6\u5916 $ 25\\% $\n\n\u5bf9\u4e8e\u6811\u548c\u94fe\u7684\u60c5\u51b5\uff0c\u7531\u4e8e\u5404\u4e2a\u70b9\u5230\u5bb6\u7684\u8def\u5f84\u552f\u4e00\uff0c\u53ea\u8981\u627e\u5230\u5f53\u524d\u8def\u5f84\u4e0a\uff0c\u6b64\u6c34\u4f4d\u7ebf\u80fd\u5230\u8fbe\u7684\u5e76\u4e14\u79bb\u8d77\u70b9\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u5373\u53ef\uff0c$dijkstra$\u9884\u5904\u7406\uff0c\u8003\u8651\u500d\u589e\uff0c\u671f\u671b\u5f97\u5206 $25$\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nconst int M = 400040;\nconst int N = 200020;\nusing namespace std;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x * f;\n}\n\n\nstruct node{\n    int nxt, to, dis, h;\n}edge[M << 1];\nint head[N], num;\nvoid build(int from, int to, int dis, int h){\n    edge[++num].nxt = head[from];\n    edge[num].h = h;\n    edge[num].to = to;\n    edge[num].dis = dis;\n    head[from] = num;\n}\nint dist[N], vis[N];\nvoid dijkstra(){\n    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;\n    memset(dist, 0x3f, sizeof(dist));\n    memset(vis, 0, sizeof(vis));\n    q.push( make_pair(0, 1) ); dist[1] = 0;\n    while(!q.empty()){\n        int u = q.top().second; q.pop();\n        if(vis[u]) continue; vis[u] = 1;\n        for(int i=head[u]; i; i=edge[i].nxt){\n            int v = edge[i].to, d = edge[i].dis;\n            if(dist[v] > dist[u] + d){\n                dist[v] = dist[u] + d;\n                q.push( make_pair(dist[v], v) );\n            }\n        }\n    }\n}\n\n\nint n, m, S, K, T, Q, lastans;\nint fa[N][21], H[N][21];\nvoid dfs(int u, int f){\n    for(int i=head[u]; i; i=edge[i].nxt){\n        int v = edge[i].to, h = edge[i].h;\n        if(v == f) continue;\n        fa[v][0] = u;\n        H[v][0] = h;\n        dfs(v, u);\n    }\n}\nvoid init(){\n    dfs(1, 0);\n    for(int i=1; i<=20; i++)\n        for(int j=1; j<=n; j++){\n            fa[j][i] = fa[fa[j][i-1]][i-1];\n            H[j][i] = min(H[fa[j][i-1]][i-1], H[j][i-1]);\n        }\n}\n\n\nint getv(int lastans, int v0){\n    return (v0 + K * lastans - 1) % n + 1;\n}\nint geth(int lastans, int p0){\n    return (p0 + K * lastans) % (S+1);\n}\nint work(int x, int now){\n    if(now == 0) return 1;\n    for(int i=20; i>=0; i--){\n        if(H[x][i] > now) x = fa[x][i];\n    }\n    return x;\n}\nvoid clearx(){\n    memset(head, 0, sizeof(head));\n    memset(H, 0, sizeof(H));\n    memset(fa, 0, sizeof(fa));\n    num = 0;\n}\nint main(){\n    T = read();\n    while(T --){\n        lastans = 0;\n        clearx();\n        n = read(); m = read();\n        for(int i=1; i<=m; i++){\n            int u, v, l, a;\n            u = read(); v = read(); l = read(); a = read();\n            build(u, v, l, a);\n            build(v, u, l, a);\n        }\n        Q = read(); K = read(); S = read();\n        dijkstra(); init();\n        for(int i=1; i<=Q; i++){\n            int v0, p0; v0 = read(); p0 = read();\n            int v = getv(lastans, v0), h = geth(lastans, p0);\n            lastans = dist[work(v, h)];\n            cout<<lastans<<endl;\n        }\n    }\n    return 0;\n}\n\n```\n\n## \u79bb\u7ebf\uff1f\n## $65\\%$\n\n\n\u53ef\u4ee5\u60f3\u5230\u5c06\u8be2\u95ee\u6309\u7167\u67d0\u4e2a\u503c\u6392\u5e8f\uff0c\u5355\u8c03\u5730\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u3002\n\n$dijkstra$\u9884\u5904\u7406\u6700\u77ed\u8def\uff0c\u5c06\u8be2\u95ee\u6309\u6c34\u4f4d\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5c06\u6240\u6709\u8fb9\u6309\u7167\u6d77\u62d4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f9d\u6b21\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u8fb9\u7684\u6d77\u62d4\u9ad8\u4e8e\u5f53\u524d\u6c34\u4f4d\u7ebf\uff0c\u52a0\u5165\u8be5\u8fb9\uff0c\u7531\u4e8e\u6c34\u4f4d\u7ebf\u662f\u5355\u8c03\u4e0b\u964d\u7684\uff0c\u6240\u4ee5\u52a0\u5b8c\u8fb9\u540e\u8be5\u8fb9\u6c38\u4e45\u6709\u6548\uff0c\u8003\u8651\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u671f\u671b\u5f97\u5206 $65$\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nconst int M = 400040;\nconst int N = 200020;\nusing namespace std;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x * f;\n}\n\n\nstruct node{\n    int nxt, from, to, dis, h;\n}edge[M << 1], tmp[M << 1];\nint head[N], num;\nvoid build(int from, int to, int dis, int h){\n    edge[++num].nxt = head[from];\n    edge[num].h = h;\n    edge[num].from = from;\n    edge[num].to = to;\n    edge[num].dis = dis;\n    head[from] = num;\n}\nbool cmp(node a, node b){\n    return a.h > b.h;\n}\n\n\nint n, m, S, K, T, Q, lastans;\nstruct node2{\n    int u, h, ans, id;\n}Que[M];\nbool cmp2(node2 a, node2 b){\n    return a.h > b.h;\n}\nbool cmp3(node2 a, node2 b){\n    return a.id < b.id;\n}\nint getv(int lastans, int v0){\n    return (v0 + K * lastans - 1) % n + 1;\n}\nint geth(int lastans, int p0){\n    return (p0 + K * lastans) % (S+1);\n}\n\n\nint dist[N], vis[N];\nvoid dijkstra(){\n    priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;\n    memset(dist, 0x3f, sizeof(dist));\n    memset(vis, 0, sizeof(vis));\n    q.push( make_pair(0, 1) ); dist[1] = 0;\n    while(!q.empty()){\n        int u = q.top().second; q.pop();\n        if(vis[u]) continue; vis[u] = 1;\n        for(int i=head[u]; i; i=edge[i].nxt){\n            int v = edge[i].to, d = edge[i].dis;\n            if(dist[v] > dist[u] + d){\n                dist[v] = dist[u] + d;\n                q.push( make_pair(dist[v], v) );\n            }\n        }\n    }\n}\nvoid clearx(){\n    memset(head, 0, sizeof(head));\n    memset(Que, 0, sizeof(Que));\n    num = 0;\n}\n\n\nint fa[N];\nint findx(int x){\n    if(fa[x] == x) return x;\n    return fa[x] = findx(fa[x]);\n}\nvoid mergex(int x, int y){\n    int fx = findx(x), fy = findx(y);\n    if(fx == fy) return;\n    if(dist[fx] > dist[fy]) fa[fx] = fy;\n    else fa[fy] = fx;\n}\n\n\nint main(){\n    T = read();\n    while(T --){\n        lastans = 0;\n        clearx();\n        n = read(); m = read();\n        for(int i=1; i<=n; i++) fa[i] = i;\n        for(int i=1; i<=m; i++){\n            int u, v, l, a;\n            u = read(); v = read(); l = read(); a = read();\n            tmp[i].from = u; tmp[i].to = v; tmp[i].h = a; tmp[i].dis = l;\n            build(u, v, l, a);\n            build(v, u, l, a);\n        }\n        sort(tmp+1, tmp+m+1, cmp);\n        Q = read(); K = read(); S = read();\n        dijkstra();\n        for(int i=1; i<=Q; i++){\n            int v0, p0; v0 = read(); p0 = read();\n            Que[i].u = v0;\n            Que[i].h = p0;\n            Que[i].id = i;\n        }\n        sort(Que+1, Que+Q+1, cmp2);\n        int now = 1;\n        for(int i=1; i<=Q; i++){\n            while(now<=m && tmp[now].h > Que[i].h){\n                mergex(tmp[now].from, tmp[now].to); now ++;\n            }\n            Que[i].ans = dist[findx(Que[i].u)];\n        }\n        sort(Que+1, Que+Q+1, cmp3);\n        for(int i=1; i<=Q; i++){\n            cout<<Que[i].ans<<endl;\n        }\n    }\n    return 0;\n}\n\n```\n\n\n## \u6570\u636e\u5206\u6cbb\n## $70\\% $ ~ $ 80\\% $\n\n\u5bf9\u540e\u51e0\u4e2a\u5c0f\u8303\u56f4\u7684\u70b9\u6570\u636e\u5206\u6cbb\u7ed3\u5408\u524d\u9762\u7684\u79bb\u7ebf\u7b97\u6cd5\u53ef\u4ee5\u62ff$70$ ~ $80 pts$\uff0c\u5341\u5206\u4f18\u79c0\n\n## $kruskal$\u91cd\u6784\u6811 / \u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\n## $100\\%$\n\n\u6839\u636e\u79bb\u7ebf\u7b97\u6cd5\uff0c\u53ef\u4ee5\u60f3\u5230\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u5b9e\u73b0\u5728\u7ebf\uff0c\u7136\u800c\u6b63\u89e3\u597d\u50cf\u662f $kruskal$\u91cd\u6784\u6811\uff0c(\u5728\u505a\u8fd9\u9898\u4e4b\u524d\u6211\u8fd8\u6ca1\u542c\u8bf4\u8fc7qwq)\uff0c(\u5148\u5c06\u8fb9\u6743\u6392\u5e8f)\uff0c$kruskal$\u91cd\u6784\u6811\u5176\u5b9e\u5c31\u662f\u5c06\u8fb9\u8f6c\u6362\u4e3a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fb9\u6743\u8f6c\u6362\u4e3a\u8be5\u8282\u70b9\u70b9\u6743\uff0c\u5c06\u6b64\u8282\u70b9\u4f5c\u4e3a\u4e24\u70b9\u7684\u7236\u8282\u70b9\uff0c\u8fde\u8fb9\uff1b\u53ef\u4ee5\u77e5\u9053\uff0c$kruskal$\u91cd\u6784\u6811\u4e3a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6839\u8282\u70b9\u4e3a\u6700\u540e\u52a0\u5165\u7684\u8fb9\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f/\u6700\u5927\u6743\u503c\u4e3a\u4e24\u70b9 $lca$ \u7684\u6743\u503c\u3002\n\n\u5bf9\u4e8e\u8be5\u9898\uff0c\u53ef\u4ee5\u5c06\u8fb9\u6309\u7167\u6d77\u62d4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u5efa\u6811\uff0c\u8fd9\u6837\uff0c\u5efa\u7684\u6811\u5c31\u662f\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u67d0\u8282\u70b9\u7684\u6743\u503c\u4e3a\u5b83\u5b50\u6811\u6d77\u62d4\u7684\u6700\u5c0f\u503c\u3002\u67e5\u8be2\u65f6\uff0c\u53ea\u8981\u627e\u5230\u6743\u503c\u5927\u4e8e\u5f53\u524d\u6c34\u4f4d\u7ebf\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u6240\u6709\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u5f00\u8f66\u90fd\u53ef\u4ee5\u5230\u8fbe\uff0c\u9884\u5904\u7406\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u79bb\u5bb6\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u5373\u53ef\uff0c(\u6839\u636e\u6811\u7684\u90e8\u5206\u5206),\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528\u500d\u589e\u6cd5\u627e\u5b50\u6811\u6839\u8282\u70b9\u3002\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nconst int M = 800080;\nconst int N = 400040;\nusing namespace std;\ntypedef long long ll;\nll read(){\n    ll x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x * f;\n}\n\n\nll n, m, S, K, T, Q, lastans, cnt;\nstruct node{\n    int nxt, from, to;\n    ll dis, h;\n}edge[M << 1], E[M << 1];\nint head[N << 1], num;\nvoid build(int from, int to, ll dis, ll h){\n    edge[++num].nxt = head[from];\n    edge[num].h = h;\n    edge[num].to = to;\n    edge[num].dis = dis;\n    head[from] = num;\n}\nbool cmp(node a, node b){\n    return a.h > b.h;\n}\n\n\nll dist[N << 1];\nint vis[N << 1];\nvoid dijkstra(){\n    priority_queue<pair<ll, int>, vector<pair<ll, int> >, greater<pair<ll, int> > > q;\n    memset(dist, 111, sizeof(dist));\n    memset(vis, 0, sizeof(vis));\n    q.push( make_pair(0, 1) ); dist[1] = 0;\n    while(!q.empty()){\n        int u = q.top().second; q.pop();\n        if(vis[u]) continue; vis[u] = 1;\n        for(int i=head[u]; i; i=edge[i].nxt){\n            ll v = edge[i].to; ll d = edge[i].dis;\n            if(dist[v] > dist[u] + d){\n                dist[v] = dist[u] + d;\n                q.push( make_pair(dist[v], v) );\n            }\n        }\n    }\n}\n\n\nll fa[N << 1];\nll findx(ll x){\n    if(fa[x] == x) return x;\n    return fa[x] = findx(fa[x]);\n}\n\n\nll ch[N<<1][2], f[N<<1][21], d[N<<1], val[N<<1];\nll MIN[N<<1];\nvoid dfs(int u) {\n    MIN[u] = dist[u];\n    for(int i=head[u]; i; i=edge[i].nxt){\n        int v = edge[i].to;\n        f[v][0]=u;\n        dfs(v);\n        MIN[u] = min(MIN[u], MIN[v]);\n    }\n}\nvoid kruskal(){\n    memset(head, 0, sizeof(head)); num = 0;\n    sort(E+1, E+m+1, cmp);\n    for(int i=1; i<=m; i++){\n        int u = E[i].from, v = E[i].to;\n        int fu = findx(u), fv = findx(v);\n        if(fu == fv) continue;\n        cnt ++;\n        fa[fu] = fa[fv] = fa[cnt] = cnt;\n        build(cnt, fu, 0, 0); build(cnt, fv, 0, 0);\n        val[cnt] = E[i].h;\n    }\n    d[cnt] = 1;\n    dfs(cnt);\n    for(int j=1; (1<<j)<=cnt; j++)\n        for(int i=1; i<=(n<<1); i++)\n            f[i][j] = f[f[i][j-1]][j-1];\n}\n\n\nvoid clearx(){\n    memset(head, 0, sizeof(head));\n    memset(f, 0, sizeof(f));\n    memset(MIN, 111, sizeof(MIN));\n    num = 0;\n}\nll getv(ll lastans, int v0){\n    return (v0 + K * lastans - 1) % n + 1;\n}\nll geth(ll lastans, int p0){\n    return (p0 + K * lastans) % (S+1);\n}\n\n\nint main(){\n    T = read();\n    while(T --){\n        lastans = 0;\n        clearx();\n        n = read(); m = read(); cnt = n;\n        for(int i=1; i<=n; i++) fa[i] = i;\n        for(int i=1; i<=m; i++){\n            ll u, v, l, a;\n            u = read(); v = read(); l = read(); a = read();\n            E[i].from = u; E[i].to = v; E[i].h = a;\n            build(u, v, l, a);\n            build(v, u, l, a);\n        }\n        Q = read(); K = read(); S = read();\n        dijkstra();\n        kruskal();\n        while(Q --){\n            ll v0, p0; v0 = read(); p0 = read();\n            ll v = (v0 + K * lastans - 1) % n + 1;\n            ll p = (p0 + K * lastans) % (S+1);\n            for(int i=20; i>=0; i--)\n                if(f[v][i] && val[f[v][i]] > p)\n                    v = f[v][i];\n            lastans = MIN[v];\n            printf(\"%lld\\n\", lastans);\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1538544121,
        "uid": 60108,
        "name": "alecli",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u5199\u4e00\u4e0b\u8fd9\u4f4ddalao@\u6813\u72ac \u544a\u8bc9\u6211\u7684\u505a\u6cd5\u3002$Orz$  \n$Dijkstra$\u4e4b\u540e~~\uff08\u51fa\u9898\u4eba\uff1a$Spfa$\u6b7b\u4e86\uff09~~\uff0c\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u79bb\u7ebf\u60f3\u6cd5\u662f\uff0c\u8be2\u95ee\u4e0e\u8fb9\u90fd\u6309\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5012\u5e8f\u8fdb\u53bb\u7684\u65f6\u5019\u6309\u6bd4\u6d77\u62d4\u9ad8\u7684\u7ea6\u675f\u52a0\u5165\u80fd\u5f00\u8f66\u7684\u8fb9\uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\u6bcf\u6b21\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u5b50\u6811\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u76f4\u63a5\u8f93\u51fa\u5c31\u597d\u4e86\u3002\u590d\u6742\u5ea6$O(n\\log m+m\\log n+q\\log n)$\u3002~~\u7136\u540e\u5c31\u6709\u8bb8\u591a\u540c\u5b66\u76f4\u63a5\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u76f4\u63a5$O(n\\log m+m\\log n+q\\log ^2n)$\u66b4\u529b\u8279\u8fc7\u53bb\u4e86~~  \n\u4f46\u5b9e\u9645\u4e0a\u8fd9\u9898\u662f\u53ef\u4ee5\u5199\u5230$1$\u4e2a$\\log$\u7684\uff0c\u9664\u4e86$Kruskal$\u91cd\u6784\u6811\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528$vector$+\u4e8c\u5206\u7684\u505a\u6cd5\u3002  \n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fb9\u6392\u5e8f\u540e\uff0c\u7b54\u6848\u968f\u7740\u9ad8\u5ea6\u53d8\u4f4e\u3001\u5e76\u67e5\u96c6\u5408\u5e76\u800c\u9010\u6e10\u51cf\u5c11\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u7b54\u6848\u90fd\u5177\u6709\u5355\u8c03\u9012\u51cf\u6027\u3002  \n\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a$vector$\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5728\u4ee5\u9ad8\u5ea6\u4e3a\u7248\u672c\uff08\u9ad8\u5ea6\u8d8a\u9ad8\uff0c\u7248\u672c\u8d8a\u8001\uff09\u7684\u7b54\u6848\uff0c\u4e8e\u662f\u5e76\u67e5\u96c6\u5408\u5e76\u65f6\u76f4\u63a5\u628a\u5c0f\u7684\u7b54\u6848\u52a0\u5165\u7236\u4eb2\u7684$vector$\u91cc\u3002\u5728\u8be2\u95ee\u65f6\uff0c\u627e\u5230\u6700\u8fd1\u7684\u7248\u672c\u6bd4\u5b83\u8001\u7684\u7b54\u6848\u6700\u5c0f\u7684\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u6700\u9760\u8fd1\u5b83\u4e14\u9ad8\u5ea6\u6bd4\u5b83\u5927\u7684\u7248\u672c\u3002  \n\u6ce8\u610f\u6bcf\u4e2a\u70b9\u5148\u52a0\u5165\u4e00\u4e2a\u7248\u672c\u4e3a$inf$\uff0c\u7b54\u6848\u4e3a$dis_i$\u7684\u7b54\u6848\u3002  \n\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log m+m\\log n+q\\log n)$\u3002  \n~~\u8fd8\u6709\u6ca1\u6709\u4eba\u548c\u6211\u4e00\u6837\u8003\u573a\u4e0a\u6ca1\u6e05\u7a7a$lastans$\u62ff\u4e86$65/70pts$\u7684\u9009\u624b\u554aqwq~~\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<ext/pb_ds/assoc_container.hpp>\n#define neko 1000010\n#define meko 1000010\n#define qeko 1000010\n#define fi first\n#define se second\n#define chkmin(a,b) ((a)<(b)?(a):(b))\n#define chkmax(a,b) ((a)>(b)?(a):(b))\n#define f(i,a,b) for(register int i=(a);i<=(b);i=-(~(i)))\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,int> pi;\nstruct qwq\n{ll ver,ans;};\nvector<qwq>vec[neko];\nstruct node\n{int u,v,h,nex;ll w;}e[meko<<1],E[meko];\nint t,Et,tp,n,m,Q,K,maxA;\ntypedef int arr[neko];\narr head,fa,verfa,book,dep;\nll mindis[neko],dis[neko],ans[neko],inf=2e9+1e8,lastans;\ntemplate<typename T>\nvoid read(T &x)\n{\n\tchar c=getchar();x=0;\n\twhile(!isdigit(c))c=getchar();\n\twhile(isdigit(c))x=(x<<1)+(x<<3)+(c^'0'),c=getchar();\n}\nnamespace Path\n{\n\tvoid add(int x,int y,ll z,int o)\n\t{\n\t\te[++t].u=E[++Et].u=x;\n\t\te[t].v=E[Et].v=y;\n\t\te[t].w=E[Et].w=z;\n\t\te[t].h=E[Et].h=o;\n\t\te[t].nex=head[x];\n\t\thead[x]=t;\n\t\te[++t].u=y;\n\t\te[t].v=x;\n\t\te[t].w=z;\n\t\te[t].h=o;\n\t\te[t].nex=head[y];\n\t\thead[y]=t;\n\t}\n\tvoid dijkstra()\n\t{\n\t\tpriority_queue<pi,vector<pi>,greater<pi> >q;\n\t\tmemset(dis,0x3f,sizeof(dis));\n\t\tdis[1]=0,q.push(pi(0,1));\n\t\tint u;pi x;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tx=q.top(),q.pop();\n\t\t\tu=x.se;\n\t\t\tif(!book[u])\n\t\t\t{\n\t\t\t\tbook[u]=1;\n\t\t\t\tfor(register int i=head[u],v=e[i].v;i;i=e[i].nex,v=e[i].v)\n\t\t\t\t{\n\t\t\t\t\tif(dis[v]>=x.fi+e[i].w)\n\t\t\t\t\t{\n\t\t\t\t\t\tdis[v]=x.fi+e[i].w;\n\t\t\t\t\t\tq.push(pi(dis[v],v));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nnamespace Uset\n{\n\tint find(int x)\n\t{\n\t\twhile(fa[x])x=fa[x];\n\t\treturn x;\n\t}\n\tvoid insert(int x,ll nowans,ll ver)\n\t{\n\t\tint len=vec[x].size()-1;\n\t\tif(nowans<vec[x][len].ans)vec[x].push_back((qwq){ver,nowans});\n\t\t//printf(\"xx %lld %lld\\n\",ver,nowans);\n\t}\n\tvoid merge(int u,int v,ll w)\n\t{\n\t\tint x=find(u),y=find(v);\t\n\t\tif(x^y)\n\t\t{\n\t\t\tif(dep[x]>dep[y])std::swap(x,y);\n\t\t\tfa[x]=y,verfa[x]=w;\n\t\t\tdep[y]=chkmax(dep[x]+1,dep[y]);\n\t\t\tinsert(y,vec[x][vec[x].size()-1].ans,w);\n\t\t}\n\t}\n\tll solve(int x,int ver)\n\t{\n\t\twhile(fa[x]&&verfa[x]>ver)x=fa[x];\n\t\tll now=2e9+1e8;\n\t\tint l=0,r=vec[x].size()-1;\n\t\twhile(l<=r)\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(vec[x][mid].ver>ver)now=chkmin(now,vec[x][mid].ans),l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}return lastans=now;\n\t}\n\tvoid init()\n\t{memset(dep,0,sizeof(dep)),memset(fa,0,sizeof(fa));}\n}\nvoid Init()\n{\n\tmemset(book,0,sizeof(book));\n\tmemset(head,0,sizeof(head));\n\tt=Et=lastans=0;\n}\nbool cmp2(node a,node b)\n{return a.h>b.h;}\nint main()\n{\n\tusing namespace Path;\n\tusing namespace Uset;\n\tint x,y,o,cas;ll z;\n\tread(cas);\n\twhile(cas--)\n\t{\n\t\tInit();\n\t\tread(n),read(m);\n\t\tf(i,1,m)\n\t\t{\n\t\t\tread(x),read(y),read(z),read(o);\n\t\t\tadd(x,y,z,o);\n\t\t}dijkstra(),init();\n\t\tf(i,1,n)vec[i].clear(),vec[i].push_back((qwq){inf,dis[i]});\n\t\tsort(E+1,E+Et+1,cmp2);\n\t\tf(i,1,m)merge(E[i].u,E[i].v,E[i].h);\n\t\tread(Q),read(K),read(maxA);\n\t\tf(i,1,Q)\n\t\t{\n\t\t\tread(x),read(y);\n\t\t\tx=(x+K*lastans-1)%n+1,y=(y+K*lastans)%(maxA+1);\n\t\t\tprintf(\"%lld\\n\",solve(x,y));\n\t\t}\n\t\t//cerr<<clock()<<endl;\n\t}\n}\n\n```",
        "postTime": 1531962602,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/)\n\n---\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 4768](https://www.luogu.org/problemnew/show/P4768)\n\n\u9b54\u529b\u4e4b\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u4e2a $n$ \u4e2a\u8282\u70b9\u3001$m$ \u6761\u8fb9\u7684**\u65e0\u5411\u8fde\u901a\u56fe**\u3002\u6211\u4eec\u4f9d\u6b21\u7528 $l,a$ \u63cf\u8ff0\u4e00\u6761\u8fb9\u7684**\u957f\u5ea6**\u3001**\u6d77\u62d4**\u3002\n\n\u4f5c\u4e3a\u5b63\u98ce\u6c14\u5019\u7684\u4ee3\u8868\u57ce\u5e02\uff0c\u9b54\u529b\u4e4b\u90fd\u65f6\u5e38\u6709\u96e8\u6c34\u76f8\u4f34\uff0c\u56e0\u6b64\u9053\u8def\u79ef\u6c34\u603b\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u7531\u4e8e\u6574\u4e2a\u57ce\u5e02\u7684\u6392\u6c34\u7cfb\u7edf\u8fde\u901a\uff0c\u56e0\u6b64**\u6709\u79ef\u6c34\u7684\u8fb9\u4e00\u5b9a\u662f\u6d77\u62d4\u76f8\u5bf9\u6700\u4f4e\u7684\u4e00\u4e9b\u8fb9**\u3002\n\n\u6211\u4eec\u7528**\u6c34\u4f4d\u7ebf**\u6765\u63cf\u8ff0\u964d\u96e8\u7684\u7a0b\u5ea6\uff0c\u5b83\u7684\u610f\u4e49\u662f\uff1a\u6240\u6709\u6d77\u62d4**\u4e0d\u8d85\u8fc7**\u6c34\u4f4d\u7ebf\u7684\u8fb9\u90fd\u662f**\u6709\u79ef\u6c34**\u7684\u3002\n\nYazid \u662f\u4e00\u540d\u6765\u81ea\u9b54\u529b\u4e4b\u90fd\u7684 OIer\uff0c\u521a\u53c2\u52a0\u5b8c ION2018 \u7684\u4ed6\u5c06\u8e0f\u4e0a\u5f52\u7a0b\uff0c\u56de\u5230\u4ed6\u6e29\u6696\u7684\u5bb6\u3002\n\nYazid \u7684\u5bb6\u6070\u597d\u5728\u9b54\u529b\u4e4b\u90fd\u7684 $1$ \u53f7\u8282\u70b9\u3002\u5bf9\u4e8e\u63a5\u4e0b\u6765 $Q$ \u5929\uff0c\u6bcf\u4e00\u5929 Yazid \u90fd\u4f1a\u544a\u8bc9\u4f60\u4ed6\u7684\u51fa\u53d1\u70b9 $v$ \uff0c\u4ee5\u53ca\u5f53\u5929\u7684\u6c34\u4f4d\u7ebf $p$\u3002\n\n\u6bcf\u4e00\u5929\uff0cYazid \u5728\u51fa\u53d1\u70b9\u90fd\u62e5\u6709\u4e00\u8f86**\u8f66**\u3002\u8fd9\u8f86\u8f66\u7531\u4e8e\u4e00\u4e9b\u6545\u969c\u4e0d\u80fd\u7ecf\u8fc7\u6709\u79ef\u6c34\u7684\u8fb9\u3002Yazid \u53ef\u4ee5\u5728\u4efb\u610f\u8282\u70b9\u4e0b\u8f66\uff0c\u8fd9\u6837\u63a5\u4e0b\u6765\u4ed6\u5c31\u53ef\u4ee5\u6b65\u884c\u7ecf\u8fc7\u6709\u79ef\u6c34\u7684\u8fb9\u3002\u4f46\u8f66\u4f1a\u88ab\u7559\u5728\u4ed6\u4e0b\u8f66\u7684\u8282\u70b9\u5e76\u4e0d\u4f1a\u518d\u88ab\u4f7f\u7528\u3002\n\n\u9700\u8981\u7279\u6b8a\u8bf4\u660e\u7684\u662f\uff0c\u7b2c\u4e8c\u5929\u8f66\u4f1a\u88ab\u91cd\u7f6e\uff0c\u8fd9\u610f\u5473\u7740\uff1a\n\n- \u8f66\u4f1a\u5728\u65b0\u7684\u51fa\u53d1\u70b9\u88ab\u51c6\u5907\u597d\u3002\n- Yazid \u4e0d\u80fd\u5229\u7528\u4e4b\u524d\u5728\u67d0\u5904\u505c\u653e\u7684\u8f66\u3002\n\nYazid \u975e\u5e38\u8ba8\u538c\u5728\u96e8\u5929\u6b65\u884c\uff0c\u56e0\u6b64\u4ed6\u5e0c\u671b\u5728\u5b8c\u6210\u56de\u5bb6\u8fd9\u4e00\u76ee\u6807\u7684\u540c\u65f6\uff0c\u6700\u5c0f\u5316\u4ed6**\u6b65\u884c\u7ecf\u8fc7\u7684**\u8fb9\u7684\u603b\u957f\u5ea6\u3002\u8bf7\u4f60\u5e2e\u52a9 Yazid \u8fdb\u884c\u8ba1\u7b97\u3002\n\n\u6ce8\u610f\uff1a\u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\uff0c\u5e76\u4e14**\u5f3a\u5236\u5728\u7ebf**\uff01\n\n\u6570\u636e\u8303\u56f4\uff1a$T\\le 3$\uff0c$n\\le 2\\times 10^5$\uff0c$m,Q\\le 4\\times 10^5$\uff0c$l\\le 10^4$\uff0c$a\\le 10^9$\n\n------\n\n## Solution\n\n\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u8be2\u95ee\u7684\u672c\u8d28\uff1a\u5c06 $1$ \u5230 $v$ \u7684\u8def\u5f84\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u6bb5\u5168\u90e8\u5f00\u59cb\uff0c\u540e\u4e00\u6bb5\u5168\u90e8\u8d70\u8def\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e2a**\u65ad\u70b9** $u$\uff0c\u5728\u6ee1\u8db3 $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u7684\u6d77\u62d4\u90fd\u5927\u4e8e $p$ \u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42 $1$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u6700\u77ed\u3002\n\n\u6211\u4eec\u600e\u4e48\u6c42\u51fa\u4ece $v$ \u51fa\u53d1\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u5462\uff1f\u8fd9\u4e9b\u70b9\u663e\u7136\u6ee1\u8db3\u4ece $v$ \u51fa\u53d1\uff0c\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u6d77\u62d4\u90fd\u5927\u4e8e $p$\u3002\u7531\u6b64\u53ef\u4ee5\u60f3\u5230\uff0c\u8fd9\u4e9b\u8def\u5f84\u4e00\u5b9a\u5728\u539f\u56fe\u7684**\u6700\u5927\u751f\u6210\u6811**\u4e0a\uff01\n\n\u81f3\u6b64\uff0c\u5df2\u7ecf\u53ef\u4ee5\u53d1\u73b0\u80fd\u7528 $\\texttt{Kruskal}$ \u91cd\u6784\u6811\u6c42\u89e3\u4e86\u3002\u5173\u4e8e $\\texttt{Kruskal}$ \u91cd\u6784\u6811\u7684\u6c42\u6cd5\uff0c\u8bf7\u89c1[\u300c\u7b97\u6cd5\u7b14\u8bb0\u300dKruskal \u91cd\u6784\u6811](https://hydingsy.github.io/articles/algorithm-Extended-Kruskal/)\u3002\n\n\u6211\u4eec\u628a\u6bcf\u6761\u8fb9**\u6309\u7167\u6d77\u62d4\u964d\u5e8f\u6392\u5217**\uff0c\u6c42\u51fa\u5173\u4e8e\u6d77\u62d4\u7684\u6700\u5927\u751f\u6210\u6811\u3002\u7531\u4e8e\u8fd9\u6837\u7684\u91cd\u6784\u6811\u662f\u4e00\u4e2a**\u5c0f\u6839\u5806**\uff08\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u6240\u6709\u8282\u70b9\u7684\u70b9\u6743\u90fd\u4e0d\u5c0f\u4e8e\u8be5\u8282\u70b9\uff09\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u6c42\u51fa\u5305\u542b $v$ \u7684\u5b50\u6811\u4e2d\u6839\u8282\u70b9\u6df1\u5ea6\u6700\u5c0f\u5e76\u4e14\u6d77\u62d4\uff08\u70b9\u6743\uff09\u5927\u4e8e $p$ \u7684\u5b50\u6811 $x$\uff0c\u90a3\u4e48 $x$ \u5b50\u6811\u5185\u7684\u6240\u6709\u8282\u70b9\u90fd\u53ef\u4ee5\u7531 $v$ \u5f00\u8f66\u5230\u8fbe\uff01\n\n\u6c42\u89e3\u6df1\u5ea6\u6700\u5c0f\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u6811\u4e0a\u500d\u589e\u89e3\u51b3\uff0c\u8fd9\u4e2a\u500d\u589e\u6570\u7ec4\u53ef\u4ee5\u5728 $\\texttt{Kruskal}$ \u7684\u8fc7\u7a0b\u4e2d\u6c42\u51fa\u6765\u3002\n\n\u73b0\u5728\uff0c\u8fd9\u68f5\u5b50\u6811\u5185\u7684\u6240\u6709\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e0a\u6587\u6240\u8bf4\u7684\u65ad\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u5b50\u6811\u5185\u7684\u70b9\u5230\u70b9 $1$ \u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u5230 $1$ \u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u68f5\u5b50\u6811\u6c42\u4e2a $\\min$ \u5373\u53ef\u3002\u7531\u4e8e\u91cd\u6784\u6811\u7684\u6c42\u89e3\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u68f5\u6811\u7684\u5f62\u6001\uff0c\u6240\u4ee5\u8fd9\u4e2a\u53d6 $\\min$ \u7684\u8fc7\u7a0b\u4e0d\u9700\u8981 $\\texttt{DFS}$\uff0c\u800c\u662f\u53ef\u4ee5\u76f4\u63a5\u5728 $\\texttt{Kruskal}$ \u4e2d\u5b8c\u6210\uff01\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(T\\cdot n\\log n)$\uff08\u6b64\u5904\u8ba4\u4e3a $n,m,Q$ \u4e09\u8005\u540c\u9636\uff09\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\ntypedef std::pair<int,int> pii;\n#define mk std::make_pair\ninline char nc() {\n    static char buf[1000000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\ntemplate <class Tp> inline void read(register Tp &s) {\n    s=0;char c=nc();for(;c<'0'||c>'9';c=nc());for(;c>='0'&&c<='9';s=s*10+(c^48),c=nc());\n}\n\nconst int N=4e5+5,M=8e5+5,logN=19+1;\nint n,m,tot,lnk[N],ter[M],nxt[M],val[M],fa[N],f[N][logN],dis[N],hei[N];\nbool vis[N];\nstruct Edge {\n    int u,v,h;\n    bool operator < (const Edge &rhs) const {\n        return h>rhs.h;\n    }\n}e[M];\n\nvoid add(int u,int v,int w) {\n    ter[++tot]=v,nxt[tot]=lnk[u],val[tot]=w,lnk[u]=tot;\n}\nvoid input() {\n    tot=0,memset(lnk,0,sizeof(lnk));\n    read(n),read(m);\n    for(int i=1;i<=m;++i) {\n        int u,v,w,h;\n        read(u),read(v),read(w),read(h);\n        add(u,v,w),add(v,u,w);\n        e[i].u=u,e[i].v=v,e[i].h=h;\n    }\n}\nvoid dijkstra(int s) {\n    memset(dis,0x7f,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    std::priority_queue<pii,std::vector<pii>,std::greater<pii> > q;\n    q.push(mk(dis[s]=0,s));\n    while(!q.empty()) {\n        int u=q.top().second; q.pop();\n        if(vis[u]) continue;\n        vis[u]=1;\n        for(int i=lnk[u];i;i=nxt[i]) {\n            int v=ter[i];\n            if(dis[v]>dis[u]+val[i]) {\n                dis[v]=dis[u]+val[i];\n                if(!vis[v]) q.push(mk(dis[v],v));\n            }\n        }\n    }\n}\nint find(int x) {\n    return fa[x]==x?x:fa[x]=find(fa[x]);\n}\nvoid exKruskal() {\n    std::sort(e+1,e+m+1);\n    for(int i=1;i<=n+n;++i) fa[i]=i;\n    int idx=n;\n    for(int i=1;i<=m;++i) {\n        int fu=find(e[i].u),fv=find(e[i].v);\n        if(fu==fv) continue;\n        fa[fu]=fa[fv]=++idx,hei[idx]=e[i].h;\n        dis[idx]=std::min(dis[fu],dis[fv]);\n        f[fu][0]=f[fv][0]=idx;\n    }\n    for(int j=1;(1<<j)<=idx;++j) for(int i=1;i<=idx;++i) f[i][j]=f[f[i][j-1]][j-1];\n}\nint query(int u,int p) {\n    for(int i=19;~i;--i) if(f[u][i]&&hei[f[u][i]]>p) u=f[u][i];\n    return dis[u];\n}\nvoid solve() {\n    int q,k,s;\n    read(q),read(k),read(s);\n    int lastans=0;\n    while(q--) {\n        int v,p;\n        read(v),read(p);\n        v=(v+k*lastans-1)%n+1;\n        p=(p+1LL*k*lastans)%(s+1);\n        printf(\"%d\\n\",lastans=query(v,p));\n    }\n}\nint main() {\n    int T;\n    for(scanf(\"%d\",&T);T--;) {\n        input();\n        dijkstra(1);\n        exKruskal();\n        solve();\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1543850975,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "# Solution\n\u90a3\u4e48\u5927\u6982\u590d\u8ff0\u4e00\u4e0b\u9898\u76ee\u5927\u610f\n\nn\u4e2a\u70b9,m\u6761\u8fb9,\u4fdd\u8bc1\u56fe\u8054\u901a,\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u6743\u503c,\u4e00\u4e2a**\u957f\u5ea6**,\u4e00\u4e2a**\u6d77\u62d4**,\u591a\u7ec4\u8be2\u95ee,\u544a\u8bc9\u4f60\u8d77\u70b9\u548c\u6c34\u4f4d\u7ebf,**\u5c0f\u4e8e\u7b49\u4e8e**\u6c34\u4f4d\u7ebf\u7684\u8fb9\u90fd\u4f1a\u88ab\u6df9\u6ca1,\u53ea\u80fd\u8d70\u8def,\u5426\u5219\u53ef\u4ee5\u5f00\u8f66,\u95ee\u4ece\u5f53\u5929\u8d77\u70b9\u52301\u53f7\u8282\u70b9\u6700\u5c11**\u6b65\u884c\u7ecf\u8fc7\u7684\u957f\u5ea6**,\u6709\u4e9b\u8be2\u95ee\u4f1a\u5f3a\u5236\u5728\u7ebf\n\n\u8fd9\u9053\u9898\u662f\u4eca\u5e74NOI\u7684D1T1,\u5f53\u65f6\u5728\u7ebf\u6253\u7684\u65f6\u5019,\u53ea\u6253\u4e86\u4e2aSPFA48\u5206(\u76f4\u63a5\u8dd1),\u500d\u589e\u4f18\u531660\u5206\n\n- - -\n\n**\u6b63\u89e3:Kruskal\u91cd\u6784\u6811/\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6**\n\n\u7531\u4e8e\u535a\u4e3b\u849f\u84bb\u4e0d\u4f1a\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784,\u6240\u4ee5\u8bb2Kruskal\u91cd\u6784\u6811\n\n\u9996\u5148\u590d\u4e60\u4e00\u4e0bKruskal\u6700\u5c0f\u751f\u6210\u6811,\u662f\u4ee5\u5e76\u67e5\u96c6\u4e3a\u8f85\u52a9\u5b9e\u73b0\u7684,\u5e76\u901a\u8fc7\u8def\u5f84\u538b\u7f29\u4fdd\u8bc1\u4e86\u65f6\u95f4\u590d\u6742\u5ea6,\u663e\u7136\u8fd9\u6837\u540c\u65f6\u4e5f\u4f1a\u7834\u574f\u6811\u7684\u539f\u672c\u7684\u7ed3\u6784,\u4f46\u7531\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u7528\u4fdd\u5b58\u8fd9\u4e9b\u4fe1\u606f,\u6240\u4ee5\u6ca1\u4ec0\u4e48\u5f71\u54cd,\u4f46Kruskal\u91cd\u6784\u6811\u5c31\u4e0d\u540c\u4e86....\n\nKruskal\u91cd\u6784\u6811\u7684\u7ecf\u5178\u4f8b\u9898:\u7ed9\u4f60\u4e00\u5f20\u56fe,\u6bcf\u6b21\u8be2\u95ee\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e2d\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n\n\u5e38\u89c4\u505a\u6cd5,\u5efa\u51fa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811,\u7b54\u6848\u5c31\u662f\u6811\u4e0a\u7684\u8fb9\u6743\u6700\u5c0f\u503c\n\n- - -\n\n\u90a3\u4e48Kruskal\u91cd\u6784\u6811\u600e\u4e48\u505a\u5462?\n\u548ckruskal\u7c7b\u4f3c,\u4f9d\u7136\u9700\u8981\u5c06\u8fb9\u6392\u5e8f.\n\u4e0d\u540c\u7684\u662f,\u6211\u4eec\u5efa\u4e00\u4e2a\u865a\u70b9,\u8ba9\u4e24\u4e2a\u8054\u901a\u5feb(\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\u7684\u7956\u5148)\u5206\u522b\u4e0e\u865a\u70b9\u76f8\u8fde,\u8fd9\u4e2a\u865a\u70b9\u5e26\u6709\u70b9\u6743,\u70b9\u6743\u5c31\u662f\u672c\u5e94\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\n\n\u8fd9\u6837\u7684\u6811\u6709\u4e24\u4e2a\u4f18\u96c5\u7684\u6027\u8d28\n>1. \u8fd9\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5806\uff0c\u56e0\u4e3a\u8fb9\u662f\u6709\u987a\u5e8f\u5408\u5e76\u7684.\n>2.  \u6700\u5c0f\u751f\u6210\u6811\u4e0a\u8def\u5f84\u7684\u8fb9\u6743\u4fe1\u606f\u8f6c\u5316\u6210\u4e86\u70b9\u6743\u4fe1\u606f.\n\n\u90a3\u4e48\u521a\u624d\u90a3\u9053\u7ecf\u5178\u4f8b\u9898\u5c31\u53d8\u6210\u4e86\u8be2\u95ee\u4e24\u70b9lca\u7684\u6743\u503c\n\n\u90a3\u4e48\u56de\u770b\u8fd9\u9053\u9898,\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\u4e86,\u56e0\u4e3a\u8981\u6c42\u8fb9\u7684\u6d77\u62d4\u8981**\u5927\u4e8e**\u6c34\u4f4d\u7ebf,\u6240\u4ee5\u628a\u6d77\u62d4**\u4ece\u5927\u5230\u5c0f**\u6392\u5e8f,\u4e3a\u4ec0\u4e48\u662f\u4ece\u5927\u5230\u5c0f,\u56e0\u4e3a\u8fd9\u6837\u6d77\u62d4\u9ad8\u7684\u5148\u5408\u5e76,\u4e5f\u5c31\u662f\u6811\u6839\u7684\u70b9\u6743\u5c31\u662f\u6700\u5c0f\u7684\u8fb9\u6743,\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u5927\u4e8e\u6c34\u4f4d\u7ebf,\u90a3\u4e48\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u4e5f\u4f1a\u5927\u4e8e\u6c34\u4f4d\u7ebf,\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u627e\u5230\u6b65\u884c\u8ddd\u79bb\u6700\u5c0f\u662f\u591a\u5c11\n\u6240\u4ee5\u6bcf\u6b21\u8df3lca\u76f4\u5230\u70b9\u6743\u5927\u4e8e\u6c34\u4f4d\u7ebf\n\n- - - \n\n\u518d\u590d\u8ff0\u4e00\u904d\u601d\u8def\n1. \u9996\u5148\u4e00\u904ddijkstra\u9884\u5904\u7406\u51fa\u6240\u6709\u70b9\u52301\u7684\u6700\u77ed\u6b65\u884c\u8ddd\u79bb\n2. \u5efa\u51faKruskal\u91cd\u6784\u6811\n3. dfs\u4e00\u904d$O(n)$\u5904\u7406\u5904\u4ee5Kruskal\u91cd\u6784\u6811\u7684\u6839\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u52301\u70b9\u7684\u6700\u77ed\u6b65\u884c\u8ddd\u79bb\n4. lca\u9884\u5904\u7406\n5. \u6c42\u4e24\u70b9lca\u5728\u7ebf\u56de\u7b54\u8be2\u95ee\n\n**\u63d0\u793a1:\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5efa\u4e86\u865a\u70b9\u6765\u8fde\u5411\u4e24\u4e2a\u8054\u901a\u5feb,\u6240\u4ee5\u8def\u5f84\u538b\u7f29\u5e76\u4e0d\u4f1a\u7834\u574fKruskal\u91cd\u6784\u6811\u7684\u7ed3\u6784,\u53ea\u4f1a\u5f71\u54cd\u539f\u6811\u7684\u7ed3\u6784**\n\n\n**\u63d0\u793a2:\u5173\u4e8e\u8fb9\u548c\u70b9\u7684\u6570\u7ec4\u5927\u5c0f,\u6bcf\u5efa\u4e00\u4e2a\u865a\u70b9\u8981\u5efa4\u6761\u8fb9,\u56e0\u4e3a\u539f\u56fe\u6709M\u6761\u8fb9,\u6240\u4ee5\u5efaM\u4e2a\u865a\u70b9,\u90a3\u4e48\u5c31\u8981\u5f00$M*4$\u7684\u6570\u7ec4,\u81f3\u4e8e\u70b9,\u6bcf\u4e24\u6761\u8fb9\u4e00\u4e2a\u865a\u70b9,\u5c31\u662fM/2\u4e2a\u70b9\u52a0\u4e0a\u539f\u6765\u6709N\u4e2a\u70b9**\n\n\n\u6b22\u8fce\u8e29\u535a\u5ba2[real_l](https://www.cnblogs.com/real-l/p/9568354.html)\n# Code\n```cpp\n\n#include<bits/stdc++.h>\n#define Min(a,b) (a)<(b)?(a):(b)\n#define Max(a,b) (a)>(b)?(a):(b)\nusing namespace std;\ntypedef long long lol;\nconst int N=200010,M=400010;\n\nvoid in(int &ans)\n{\n    ans=0;int f=1;char i=getchar();\n    while(i<'0' || i>'9') {if(i=='-') f=-1;i=getchar();}\n    while(i>='0' && i<='9') ans=(ans<<1)+(ans<<3)+(i^48),i=getchar();\n    ans*=f;\n}\n\nint T,n,m,Q,k,s,cnt,tq;\nlol to[M<<2],nex[M<<2],w[M<<2],h[M<<2],head[N<<1];\nlol fa[N<<1],dp[N<<1],dis[N<<1],vis[N],f[20][N<<1],v[N<<1];\n\nstruct node {\n    lol x,y,v,h;\n}A[M];\n\nstruct Node{\n    lol id,v;\n    bool operator < (const Node &a) const {return v>a.v;}\n};\n\ninline void add(lol a,lol b,lol c,lol d)\n{\n    to[++cnt]=b,nex[cnt]=head[a];\n    w[cnt]=c,h[cnt]=d,head[a]=cnt;\n}\n\nint find(int x) {\n    if(x!=fa[x]) fa[x]=find(fa[x]);\n    return fa[x];\n}\n\nbool cmp(node a,node b) {return a.h>b.h;}\n\nvoid dijkstra()\n{\n    memset(dis,0x3f,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    priority_queue<Node>q;\n    Node tmp; tmp = (Node) {1,0};\n    q.push(tmp); dis[1]=0;\n    while(!q.empty()) {\n        lol u=q.top().id; q.pop();\n        if(vis[u]) continue; vis[u]=1;\n        for(lol i=head[u];i;i=nex[i]) {\n            if(dis[to[i]]>dis[u]+w[i]) {\n                dis[to[i]]=dis[u]+w[i];\n                tmp=(Node){to[i],dis[to[i]]};\n                q.push(tmp);\n            }\n        }\n    }\n}\n\nvoid init()\n{\n    for(lol i=1;i<=19;i++)\n        for(lol j=1;j<=tq;j++)\n            f[i][j]=f[i-1][f[i-1][j]];\n}\n\nvoid dfs(int u,int father)\n{\n    dp[u]=dis[u];\n    for(lol i=head[u];i;i=nex[i]) {\n        if(to[i]!=father) {\n            f[0][to[i]]=u;\n            dfs(to[i],u);\n            dp[u]=Min(dp[u],dp[to[i]]);\n        }\n    }\n}\n\nlol lca(lol x,lol y) {\n    for(lol i=19;i>=0;i--)\n        if(v[f[i][x]]>y) x=f[i][x];\n    return x;\n}\n\nint main()\n{\n    //freopen(\"return.in\",\"r\",stdin);\n    //freopen(\"return.out\",\"w\",stdout);\n    lol last; in(T);\n    while(T--) {\n        memset(head,0,sizeof(head));\n\t\n        in(n), in(m), tq=n, last=cnt=0;\n\t\n        for(int i=1;i<=m;i++) {\n            int a, b, c, d;\n            in(a), in(b), in(c), in(d);\n            add(a,b,c,d), add(b,a,c,d);\n            A[i] = (node) {a,b,c,d};\n        }\n\t\n        dijkstra();\n\t\n        cnt=0; memset(head,0,sizeof(head));\n\t\n        for(int i=1;i<=n;i++) fa[i]=i;\n\t\n        sort(A+1, A+1+m, cmp);\n\t\n        for(int i=1;i<=m;i++) {\n            int fx = find(A[i].x),fy = find(A[i].y);\n            if(fx == fy) continue;\n            fa[fx] = ++tq, fa[fy] = tq, fa[tq] = tq, v[tq] = A[i].h;\n            add(tq,fx,0,0), add(fx,tq,0,0);\n            add(tq,fy,0,0), add(fy,tq,0,0);\n        }\n\t\n        dfs(tq,0); init();\n        in(Q), in(k), in(s);\n        /*for(int i=1;i<=tq;i++) cout<<dp[i]<<\" \";\n          cout<<endl;*/\n\t\n        for(int i=1;i<=Q;i++) {\n            int v,p; in(v), in(p);\n            v=(v+k*last-1)%n+1, p=(p+k*last)%(s+1);\n            printf(\"%lld\\n\",last=dp[lca(v,p)]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1535885135,
        "uid": 45210,
        "name": "kikuss",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u773c\u770b\u51fa\u6765\u662f\u6700\u77ed\u8def\n\n\u6240\u4ee5\u5148\u7528dijkstra\u7b97\u6cd5\u6c42\u51fa1\u5230\u5404\u70b9\u7684\u6700\u77ed\u8def\uff0c\u5982\u679c\u662f\u66b4\u529b\u505a\uff0c\u90a3\u4e48\u53ea\u8981\u4ece\u641c\u7d22\u4e0ev\u8fde\u901a\u7684(\u4e5f\u5c31\u662f\u4e0d\u7ecf\u8fc7\u6709\u79ef\u6c34\u7684\u8fb9\u4fbf\u80fd\u5230\u8fbe\u7684)\u70b9\u4e2d\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\uff0c\u65f6\u95f4O(n^2)\uff0c\u671f\u671b\u5f9750\u5206\n\n\u8003\u8651\u5982\u4f55\u4f18\u5316\uff0c\u5982\u679c\u4e0d\u662f\u5728\u7ebf\u505a\uff0c\u53ef\u4ee5\u5c06\u6c34\u4f4d\u7ebf\u6392\u5e8f\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4(\u56e0\u4e3a\u53ea\u4f1a\u6709\u52a0\u8fb9\u64cd\u4f5c),\u53ef\u5f9765\u5206\n\n\u90a3\u4e48\u5728\u7ebf\u505a\u662f\u4e00\u6837\u7684\uff0c\u5148\u5c06\u8fb9\u7684\u6d77\u62d4\u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u52a0\u5230\u5e76\u67e5\u96c6\u4e2d\uff0c\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u5c31\u80fd\u505a\u4e86\uff0c\u4f46\u8fd9\u8fd8\u662f\u5f88\u9ebb\u70e6(\u6211\u4e5f\u4e0d\u4f1a\u5199\u2026\u2026)\n\n\u8003\u8651\u5efa\u4e00\u68f5\u6811\uff0c\u7528\u6b63\u5e38\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\u5b83\uff0c\u5b83\u8868\u793a\u6700\u4f18\u65f6\u8f66\u7684\u884c\u9a76\u8def\u5f84(\u4e0d\u4e00\u5b9a\u6309\u7167\u56fe\u4e2d\u7684\u8fb9\u6765\u5efa),\u5b83\u7684\u7236\u4eb2j\u5230\u7ed3\u70b9i\u7684\u8fb9\u8868\u793a\u56fe\u4e2di\u5230j\u7ecf\u8fc7\u8fb9\u7684\u6d77\u62d4\u7684\u6700\u5c0f\u503c\u6700\u5927\u662f\u591a\u5c11\uff0c\u5176\u4e2d1\u5230j\u7684\u8ddd\u79bb\u5927\u4e8e1\u5230i\u7684\u8ddd\u79bb\uff0c\u4e14\u6839\u5230\u4efb\u610f\u4e00\u70b9\u4e0a\u7684\u8fb9\u6743\u662f\u9012\u589e\u7684\n\n\u8fd9\u6837\u7684\u6811\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u663e\u7136\u8981\u7684\u5230\u66f4\u4f18\u503c\uff0c\u8981\u5c3d\u53ef\u80fd\u5730\u5f80\u6839\u8d70\uff0c\u8fd9\u6837\u5c31\u80fd\u7528\u500d\u589e\u7b97\u6cd5\uff0c\u5177\u4f53\u4e0d\u96be\u5b9e\u73b0\n\n\u8fd9\u68f5\u6811\u600e\u4e48\u7ef4\u62a4\u5462\uff1f\u7528\u5e76\u67e5\u96c6\uff0c\u5e76\u67e5\u96c6\u7684\u6839\u52301\u7684\u8ddd\u79bb\u5728\u5b83\u6240\u5728\u96c6\u5408\u4e2d\u6700\u5c0f\u3002\u5c06\u8fb9\u6309\u6d77\u62d4\u6392\u5e8f\uff0c\u4f9d\u6b21\u63d2\u5165\uff0c\u5f53\u4e24\u4e2a\u5e76\u67e5\u96c6\u5408\u5e76\u65f6\uff0c\u628a\u6839\u7ed3\u70b9\u8ddd\u79bb\u5c0f\u7684\u5411\u6839\u8282\u70b9\u8ddd\u79bb\u5927\u7684\u8fde\u4e00\u6761\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u68f5\u6811\u5c31\u662f\u5e76\u67e5\u96c6\u4e0d\u8def\u5f84\u538b\u7f29\u65f6\u7684\u5f62\u6001\uff0c\u7531\u4e8e\u8fb9\u662f\u964d\u5e8f\u7684\uff0c\u8fd9\u6761\u6811\u8fb9\u8fb9\u6743\u5c31\u662f\u5f53\u524d\u8fb9\u7684\u6d77\u62d4\u9ad8\u5ea6\uff0c\u6811\u5c31\u5efa\u597d\u4e86\uff01\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n\n\n\n```cpp\n#include<stdio.h>\n#include<algorithm>\n#include<queue>\n#include<string.h>\n#include<iostream>\nusing namespace std;\nint d[200005],i,j,head[200005],Next[800005],adj[800005],t,k,lea[800005],ans,n,m,u,v,h,l,vis[200005],f[200005],fa[25][200005],fac[25][200005],qq,s,p;\nvoid Push(int u,int v,int l)\n{\n\tNext[++k]=head[u];\n\thead[u]=k;\n\tadj[k]=v;\n\tlea[k]=l;\n}\nstruct str{\n\tint s,x;\n};\nstruct edge{\n\tint u,v,h;\n}e[400005];\nbool operator <(str a,str b)\n{\n\treturn a.s>b.s;\n}\npriority_queue<str> q;\nvoid Dijkstra()\n{\n\tint j;\n\tq.push((str){0,1});\n\tmemset(vis,0,sizeof(vis));\n\tmemset(d,0x7f,sizeof(d));\n\td[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tstr t=q.top();\n\t\tq.pop();\n\t\tif(vis[t.x]==1)\n\t\t\tcontinue;\n\t\tvis[t.x]=0;\n\t\tfor(j=head[t.x];j!=0;j=Next[j])\n\t\t\tif(d[adj[j]]>d[t.x]+lea[j])\n\t\t\t{\n\t\t\t\td[adj[j]]=d[t.x]+lea[j];\n\t\t\t\tq.push((str){d[adj[j]],adj[j]});\n\t\t\t}\n\t}\n}\nbool cmp(edge a,edge b)\n{\n\treturn a.h>b.h;\n}\nint Find(int x)\n{\n\tif(f[x]==0)\n\t\treturn x;\n\treturn f[x]=Find(f[x]);\n}\nint main()\n{\n\tscanf(\"%d\",&t);\n\twhile(t--)\n\t{\n\t\tscanf(\"%d %d\",&n,&m);\n\t\tk=0;\n\t\tmemset(head,0,sizeof(head));\n\t\tfor(i=1;i<=m;i++)\n\t\t{\n\t\t\tscanf(\"%d %d %d %d\",&u,&v,&l,&h);\n\t\t\tPush(u,v,l);\n\t\t\tPush(v,u,l);\n\t\t\te[i]=(edge){u,v,h};\n\t\t}\n\t\tDijkstra();\n\t\tsort(e+1,e+1+m,cmp);\n\t\tmemset(f,0,sizeof(f));\n\t\tfor(i=1;i<=m;i++)\n\t\t{\n\t\t\tint x=Find(e[i].u),y=Find(e[i].v);\n\t\t\tif(x!=y)\n\t\t\t\tif(d[x]<d[y])\n\t\t\t\t{\n\t\t\t\t\tf[y]=x;\n\t\t\t\t\tfa[0][y]=x;\n\t\t\t\t\tfac[0][y]=e[i].h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tf[x]=y;\n\t\t\t\t\tfa[0][x]=y;\n\t\t\t\t\tfac[0][x]=e[i].h;\n\t\t\t\t}\n\t\t}\n\t\tfor(i=1;i<=20;i++)\n\t\t\tfor(j=1;j<=n;j++)\n\t\t\t{\n\t\t\t\tfa[i][j]=fa[i-1][fa[i-1][j]];\n\t\t\t\tfac[i][j]=min(fac[i-1][j],fac[i-1][fa[i-1][j]]);\n\t\t\t}\n\t\tscanf(\"%d %d %d\",&qq,&k,&s);\n\t\tans=0;\n\t\twhile(qq--)\n\t\t{\n\t\t\tscanf(\"%d %d\",&v,&p);\n\t\t\tv=(v+k*ans-1)%n+1;\n\t\t\tp=(p+k*ans)%(s+1);\n\t\t\tfor(i=0;fa[i][v]!=0&&fac[i][v]>p;i++);\n\t\t\tfor(i--;i>=0;i--)\n\t\t\t\tif(fa[i][v]!=0&&fac[i][v]>p)\n\t\t\t\t\tv=fa[i][v];\n\t\t\tans=d[v];\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\n\n```",
        "postTime": 1531929786,
        "uid": 13185,
        "name": "\u53cc\u7ba1\u8367\u5149\u706f",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u6b63\u89e3\u597d\u50cf\u53eb\u505a\u201ckruskal\u91cd\u6784\u6811\u201d\uff0c\u4e0d\u8fc7\u672c\u849f\u84bb\u8868\u793a\u6ca1\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u540d\u8bcd\uff0c\u90a3\u5c31\u5c3d\u91cf\u7528\u901a\u4fd7\u6613\u61c2\u7684\u8bed\u8a00\u8bb2\u660e\u767d\u8fd9\u662f\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5427\u3002\n\n\u5982\u679c\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u89c2\u7684\u505a\u6cd5\uff1a\u6309\u9ad8\u5ea6\u964d\u5e8f\u6392\u5e8f\u540e\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\u76f8\u5f53\u4e8e\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u8be2\u95ee\u76f8\u5f53\u4e8e\u67e5\u8be2\u5f53\u524d\u8fde\u901a\u5757\u4e2ddis\u7684\u6700\u5c0f\u503c\uff0c\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u7136\u800c\u8fd9\u9898\u8981\u5f3a\u5236\u5728\u7ebf\uff0c\u548b\u529e\uff1f\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff1f\n\n\u5176\u5b9e\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a \u53ea\u6709\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u6ca1\u6709\u4fee\u6539\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u64cd\u4f5c\u4f7f\u5f97\u590d\u6742\u5ea6\u63a7\u5236\u5728\u4e00\u4e2alog\uff0c\u4e0d\u8fc7\u672c\u849f\u84bb\u5e76\u4e0d\u4f1a\u5199\u2026\u2026\n\n\uff08\u597d\u50cf\u76f4\u63a5\u5199\u666e\u901a\u7684\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u518d\u5361\u5361\u5e38\u4e5f\u80fd\u8fc7\u7684\u6837\u5b50\uff09\u3002\n\n\u5f53\u7136\u8fd9\u4e1c\u897f\u6bd4\u8f83\u70e6\u8c01\u90fd\u4e0d\u60f3\u5199\uff0c\u90a3\u4e48\u8fd8\u53ef\u4ee5\u600e\u6837\uff1f\u5229\u7528\u201c\u53ea\u6709\u8bbf\u95ee\u5386\u53f2\u7248\u672c\u6ca1\u6709\u4fee\u6539\u201d\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u5982\u4e0b\u7b97\u6cd5\uff1a\n\n\u5728\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\u5408\u5e76\u4e0a\u53bb\uff0c\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u7684dis\u662f\u4e24\u4e2a\u96c6\u5408\u7684dis\u7684min\uff0c\u9ad8\u5ea6\u662f\u5f53\u524d\u8fb9\u7684\u9ad8\u5ea6\u3002\n\n\u8fd9\u6837\u9884\u5904\u7406\u5b8c\u4e4b\u540e\uff0c\u6574\u5f20\u56fe\u4f1a\u88ab\u5efa\u6210\u4e00\u68f5\u6811\uff0c\u539f\u59cb\u8282\u70b9\u662f\u53f6\u5b50\uff0c\u9ad8\u5ea6\u4fe1\u606f\u662f\u4ece\u53f6\u5b50\u5230\u6839\u9012\u51cf\u7684\u3002\n\n\u4e8e\u662f\uff0c\u5bf9\u4e8e\u4e00\u7ec4\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u500d\u589e\u627e\u5230\u5bf9\u5e94\u7684\u5408\u5e76\u8282\u70b9\uff0c\u7136\u540e\u76f4\u63a5\u67e5\u8be2dis\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6O(nlogn)\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u5c0f\u63d2\u66f2\uff1a\u6c42\u6700\u77ed\u8def\u65f6\uff0c\u5199spfa\u4f1a\u88ab\u5361\uff01\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint t,n,m;\n#define li long long\n#define gc getchar()\n#define pc putchar\nint read(){\n\tint x = 0,c = gc;\n\twhile(!isdigit(c)) c = gc;\n\twhile(isdigit(c)){\n\t\tx = (x << 1) + (x << 3) + (c ^ '0');\n\t\tc = gc;\n\t}\n\treturn x;\n}\nvoid print(int x){\n\tif(x >= 10) print(x / 10);\n\tpc(x % 10 + '0');\n}\nstruct edge{\n\tint fr,to,nxt,val,hg;\n}e[800010];\nint ct,cnt,tc,fir[200010];\nstruct eg{\n\tint fr,to,hg;\n}o[400010];\nvoid ins(int u,int v,int w,int x){\n\te[++cnt].fr = u;e[cnt].to = v;e[cnt].nxt = fir[u];fir[u] = cnt;e[cnt].val = w;e[cnt].hg = x;\n\te[++cnt].fr = v;e[cnt].to = u;e[cnt].nxt = fir[v];fir[v] = cnt;e[cnt].val = w;e[cnt].hg = x;\n\to[++ct].fr = u;o[ct].to = v;o[ct].hg = x;\n}\nbool operator < (eg q,eg w){\n\treturn q.hg > w.hg;\n}\nint f[400010],vl[400010];\nint fa[400010];\nint st[20][400010],mn[400010];\nli dis[200010];\nconst int inf = 2007654321;\nint p,k,s;\nli as; \npriority_queue<pair<int,int> > q;\n#define mp make_pair\n#define fi first\n#define se second\nvoid dij(){\n\tint i,j;\n\tfor(i = 2;i <= n;++i) dis[i] = inf;\n\tdis[1] = 0;q.push(mp(0,1));\n\twhile(!q.empty()){\n\t\tpair<int,int> t = q.top();q.pop();\n\t\tif(-t.fi != dis[t.se]) continue;\n\t\tfor(i = fir[t.se];i;i = e[i].nxt){\n\t\t\tj = e[i].to;\n\t\t\tif(-t.fi + e[i].val < dis[j]){\n\t\t\t\tdis[j] = -t.fi + e[i].val;\n\t\t\t\tq.push(mp(-dis[j],j));\n\t\t\t}\n\t\t}\n\t}\n} \nint getf(int q){\n\treturn f[q] == q ? q : f[q] = getf(f[q]);\n}\nvoid mg(int u,int v,int w){\n\tint x = getf(u),y = getf(v);\n\tif(x == y) return;\n\tf[x] = f[y] = st[0][x] = st[0][y] = ++tc;\n\tmn[tc] = w;\n\tvl[tc] = min(vl[x],vl[y]);\n}\nint lgo[400010],dpt[400010];\nvoid buildst(){\n\tregister int i,j;\n\tfor(i = 1;i <= lgo[tc];++i){\n\t\tfor(j = 1;j <= tc;++j) st[i][j] = st[i - 1][st[i - 1][j]];\n\t}\n}\nvoid dfs(int q){\n\tif(dpt[q] || q == tc) return;\n\tdfs(st[0][q]);\n\tdpt[q] = dpt[st[0][q]] + 1;\n}\nint main(){\n\tint u,v,w,x;\n\tint i,j;\n\tfor(i = 2;i <= 400000;++i) lgo[i] = lgo[i >> 1] + 1;\n\tt = read();\n\twhile(t--){\n\t\tmemset(fir,0,sizeof(fir));ct = cnt = as = 0;\n\t\tn = read();m = read();tc = n;\n\t\tfor(i = 1;i <= m;++i){\n\t\t\tu = read();v = read();w = read();x = read();ins(u,v,w,x);\n\t\t}\n\t\tdij();\n\t\tsort(o + 1,o + ct + 1);\n\t\tfor(i = 1;i <= n * 2;++i) f[i] = i,fa[i] = dpt[i] = 0;\n\t\tfor(i = 1;i <= n;++i) vl[i] = dis[i];\n\t\tfor(i = 1;i <= ct;++i) mg(o[i].fr,o[i].to,o[i].hg);\n\t\tbuildst();\n\t\tfor(i = 1;i <= tc;++i) if(!dpt[i]) dfs(i);\n\t\tp = read();k = read();s = read();\n\t\tint tot = 0; \n\t\tfor(i = 1;i <= p;++i){\n\t\t\tu = read();v = read();\n\t\t\tu = (u + k * as - 1) % n + 1;\n\t\t\tv = (v + k * as) % (s + 1);\n\t\t\tfor(j = lgo[dpt[u]];j >= 0;--j) mn[st[j][u]] > v ? u = st[j][u] : 0;\n\t\t\tprint(as = vl[u]);pc('\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1531923192,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u672c\u9898\u5927\u81f4\u6709\u4e24\u79cd\u65b9\u6cd5\uff0ckruskal\u91cd\u6784\u6811\u6216\u8005\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\n\n~~\u5f53\u7136dijkstra\u5fc5\u4e0d\u53ef\u5c11~~\n\n~~spfa\u7684\u6b7b\u4ea1\u796d~~\n\n### kruscal \u91cd\u6784\u6811\n[kruskal\u91cd\u6784\u6811\u5b66\u4e60\u7b14\u8bb0](https://blog.csdn.net/zty_ju/article/details/105150534)\n\n\u8fd9\u91cc\u5c31\u4e0d\u518d\u590d\u8ff0\n\n### \u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\n\n\u8be2\u95ee\u4ecev\u70b9\u51fa\u53d1\u53ea\u7ecf\u8fc7\u6d77\u62d4\u5927\u4e8ep\u7684\u8fb9\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u4e2d\uff0c\u91cc\u70b91\u6700\u8fd1\u8ddd\u79bb\u6700\u5c0f\u7684\u503c\n\n\u7528$dis_i$\u8868\u793a\u4ece1\u5230i\u70b9\u7684\u6700\u77ed\u8def\u8ddd\u79bb\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u4e8e\u4e00\u4e2ap\uff0c\u6211\u4eec\u5efa\u4e00\u4e2a\u56fe\n\n\u56fe\u4e2d\u53ea\u6709\u6d77\u62d4\u5c0f\u4e8e\u7b49\u4e8ep\u7684\u8fb9\n\n\u90a3\u4e48v\u70b9\u6240\u5728\u7684\u8054\u901a\u5757\u4e2d\u7684\u6700\u5c0fdis\u503c\u5373\u4e3a\u6240\u6c42\n\n\u800c\u8054\u901a\u5757\u6700\u7ecf\u5178\u7684\u7ef4\u62a4\u4fbf\u662f\u5e76\u67e5\u96c6\n\n\u5148\u628ap\u79bb\u6563\u5316\u6210m\u8303\u56f4\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2ap\u90fd\u8981\u4e00\u4e2a\u5e76\u67e5\u96c6\u8fd9\u6837\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8\u8fbe$nm$\n\n\u6211\u4eec\u7528\u53ef\u6301\u4e45\u5316\u628a\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u5230$n*logn$\n\n\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7528**\u6309\u79e9\u5408\u5e76**\n\n\u8def\u5f84\u538b\u7f29\u4f1a\u6539\u5f88\u591a\u5730\u65b9\uff0c\u800c\u4ee5\u53ef\u6301\u4e45\u5316\u4fee\u6539\u5c31\u52a0\u70b9\u7684\u539f\u5219\u6765\u8bf4\uff0c\u7a7a\u95f4\u65f6\u95f4\u90fd\u4e0d\u592a\u5bf9\n\n\u7531\u4e8e\u5bf9\u4e8ep\u5230p+1\uff0c\u5e76\u67e5\u96c6\u53ef\u80fd\u65b0\u589e\u591a\u6761\u8fb9\n\n\u6211\u4eec\u4fee\u6539\u5e76\u67e5\u96c6\u65f6\u5e76\u975e\u6bcf\u4e00\u4e2ap\u53ea\u52a0log\u4e2a\u70b9\n\n\u4f46\u5747\u644a\u590d\u6742\u5ea6$O(mlogn)$\n\n\u5bf9\u4e8e\u5199\u8fd9\u79cd\u7801\u91cf\u6076\u5fc3\u7684\u4e1c\u897f\uff0c\u6211\u60f3\u8bf4\n\n**kruskal\u91cd\u6784\u6811NB!!**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=200005,maxm=400005;\nconst long long inf=0x3f3f3f3f3f3f3f3f;\nstruct node{\n\tint ls,rs;\n\tint f,rk;\n\tlong long mn;\n}tree[41*maxm];\nint tot=0;\nint root[maxm];\nstruct edge{\n\tint u,v,a;\n\tbool operator <(edge i)const{\n\t\treturn a>i.a;\n\t}\n}ed[maxm];\nstruct que{\n\tint id;\n\tlong long data;\n\tbool operator <(que i)const{\n\t\treturn data>i.data;\n\t}\n};\nstruct Edge{\n\tint to;\n\tlong long w;\n\tint nxt;\n}e[2*maxm];\nint cnt;\nint head[maxn];\nint n,m,Q,K,S;\nlong long dis[maxn];\nbool vis[maxn];\npriority_queue<que>q1;\nint read(){\n\tint x=0,y=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x*y;\n}\nvoid add(int u,int v,long long w){\n\te[cnt].to=v;\n\te[cnt].w=w;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt++;\n\treturn ;\t\n}\nvoid dijkstra(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tque u;\n\tu.id=1;u.data=0;dis[1]=0;\n\tq1.push(u);\n\twhile(!q1.empty()){\n\t\tint k=q1.top().id;\n\t\tq1.pop();\n\t\tif(vis[k])continue;\n\t\tvis[k]=1;\n\t\tfor(int i=head[k];i!=-1;i=e[i].nxt){\n\t\t\tint tmp=e[i].to;\n\t\t\tif(dis[tmp]<=dis[k]+e[i].w)continue;\n\t\t\tdis[tmp]=dis[k]+e[i].w;\n\t\t\tque o;\n\t\t\to.id=tmp;o.data=dis[tmp];\n\t\t\tq1.push(o);\n\t\t}\n\t}\n\treturn ;\n}\nvoid build(int x,int l,int r){\n\tif(l==r){\n\t\ttree[x].ls=tree[x].rs=0;\n\t\ttree[x].f=l;\n\t\ttree[x].rk=1;\n\t\ttree[x].mn=dis[l];\n\t\treturn ;\n\t}\n\tint mid=l+((r-l)>>1);\n\ttree[x].f=tree[x].rk=0;\n\ttree[x].mn=inf;\n\ttree[x].ls=++tot;\n\tbuild(tree[x].ls,l,mid);\n\ttree[x].rs=++tot;\n\tbuild(tree[x].rs,mid+1,r);\n\treturn ;\n}\nvoid modify(int x,int y,int l,int r,int p,int fa,int q,long long mn,int rk){\n\tif(l==r){\n\t\tif(l==p){\n\t\t\ttree[x].ls=tree[x].rs=0;\n\t\t\ttree[x].f=fa;\n//\t\t\tcout<<\"###\"<<p<<\" \"<<fa<<endl;\n\t\t\ttree[x].rk=tree[y].rk;\n\t\t\ttree[x].mn=tree[y].mn;\n\t\t}\n\t\tif(l==q){\n\t\t\ttree[x].ls=tree[x].rs=0;\n\t\t\ttree[x].f=tree[y].f;\n\t\t\ttree[x].rk=max(tree[y].rk,rk+1);\n//\t\t\tcout<<\"$$$\"<<q<<\" \"<<tree[y].mn<<\" \"<<mn<<endl;\n\t\t\ttree[x].mn=min(tree[y].mn,mn);\n\t\t}\n\t\treturn ;\n\t}\n\tint mid=l+((r-l)>>1);\n\ttree[x].f=tree[x].rk=0;\n\ttree[x].mn=inf;\n\tif((p>=l&&p<=mid)||(q>=l&&q<=mid)){\n\t\ttree[x].ls=++tot;\n\t\tif(!((p<=r&&p>mid)||(q<=r&&q>mid)))\n\t\t\ttree[x].rs=tree[y].rs;\n\t\tmodify(tree[x].ls,tree[y].ls,l,mid,p,fa,q,mn,rk);\n\t}\n\tif((p<=r&&p>mid)||(q<=r&&q>mid)){\n\t\ttree[x].rs=++tot;\n\t\tif(!((p>=l&&p<=mid)||(q>=l&&q<=mid)))\n\t\t\ttree[x].ls=tree[y].ls;\n\t\tmodify(tree[x].rs,tree[y].rs,mid+1,r,p,fa,q,mn,rk);\n\t}\n\treturn ;\n}\nlong long query(int x,int l,int r,int p,int flag){\n\tif(l>p||r<p)return -1;\n\tif(l==r){\n\t\tif(flag==0)return tree[x].f;\n\t\tif(flag==1)return tree[x].rk;\n\t\tif(flag==2)return tree[x].mn;\n\t}\n\tint mid=l+((r-l)>>1);\n\tlong long tmp1=query(tree[x].ls,l,mid,p,flag);\n\tlong long tmp2=query(tree[x].rs,mid+1,r,p,flag);\n\treturn max(tmp1,tmp2);\n}\nint getroot(int v,int p){\n//\tcout<<\"@@@\"; \n\twhile(1){\n//\t\tcout<<p<<\" \";\n\t\tint fa=query(root[v],1,n,p,0);\n\t\tif(fa==p)break;\n\t\tp=fa;\n\t}\n//\tcout<<endl;\n\treturn p;\n}\nint search(int x){\n\tint l=0,r=m+1;\n\twhile(l+1<r){\n\t\tint mid=l+((r-l)>>1);\n\t\tif(ed[mid].a>=x)\n\t\t\tl=mid;\n\t\telse\n\t\t\tr=mid;\n\t}\n\treturn l;\n}\nint main(){\n\tint t;\n\tt=read();\n\twhile(t--){\n\t\tn=read();m=read();\n\t\tcnt=0;\n\t\tmemset(head,-1,sizeof(head));\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint u,v,l,a;\n\t\t\tu=read();v=read();l=read();a=read();\n\t\t\tadd(u,v,l);\n\t\t\tadd(v,u,l);\n\t\t\ted[i].u=u;ed[i].v=v;ed[i].a=a;\n\t\t}\n\t\tdijkstra();\n\t\ttot=0;\n\t\troot[0]=++tot;\n\t\tbuild(1,1,n);\n\t\tsort(ed+1,ed+m+1);\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint u=ed[i].u,v=ed[i].v,w=ed[i].a;\n\t\t\tu=getroot(i-1,u);\n\t\t\tv=getroot(i-1,v);\n\t\t\tif(u==v){root[i]=root[i-1];continue;}\n\t\t\tint rk1=query(root[i-1],1,n,u,1);\n\t\t\tint rk2=query(root[i-1],1,n,v,1);\n\t\t\tif(rk1>rk2){swap(u,v);swap(rk1,rk2);}\n\t\t\tlong long mn=query(root[i-1],1,n,u,2);\n\t\t\troot[i]=++tot;\n\t\t\tmodify(root[i],root[i-1],1,n,u,v,v,mn,rk1);\n\t\t}\n\t\tlong long lastans=0;\n\t\tQ=read();K=read();S=read();\n\t\tfor(int i=1;i<=Q;i++){\n\t\t\tint v,p;\n\t\t\tv=(read()+K*lastans-1)%n+1;\n\t\t\tp=(read()+K*lastans)%(S+1);\n\t\t\tint b=search(p+1);\n//\t\t\tcout<<b<<endl;\n//\t\t\tcout<<\"*\"<<getroot(b,v)<<endl;\n\t\t\tlastans=query(root[b],1,n,getroot(b,v),2);\n\t\t\tprintf(\"%lld\\n\",lastans);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1585316138,
        "uid": 98527,
        "name": "juju527",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u8fd9\u9053\u9898\u4f5c\u4e3a\u7b7e\u5230\u9898\u601d\u8def\u8fd8\u662f\u975e\u5e38\u7b80\u5355\u7684\u3002\u628a\u6ca1\u6709\u79ef\u6c34\u5f00\u8f66\u53ef\u4ee5\u76f8\u4e92\u62b5\u8fbe\u7684\u70b9\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u201c\u8054\u901a\u5757\u201d\u91cc\u8d70\u8def\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u9898\u76ee\u8981\u6c42\u5728\u7ebf\uff0c\u90a3\u5c31\u7528\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u3002\n\n\u521d\u59cb\u72b6\u6001\u662f\u6bcf\u4e2a\u70b9\u76f8\u4e92\u72ec\u7acb\uff0c\u6211\u4eec\u6309\u6d77\u62d4\u4ece\u9ad8\u5230\u4f4e\u7684\u987a\u5e8f\u4f9d\u6b21\u5408\u5e76\u8fb9\u7684\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u4e8c\u5206\u4e00\u4e0b\u7248\u672c\u76f4\u63a5\u5728\u4e3b\u5e2d\u6811\u91cc\u67e5\u627e\u5c31\u53ef\u4ee5\u3002\n\n\u4ee3\u7801\u7684\u8bdd\uff0c\u7406\u89e3\u4e86\u601d\u8def\u662f\u6bd4\u8f83\u597d\u6253\u7684\uff0c\u5c31\u662f\u5f88\u591a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002\u5efa\u8bae\u5728\u5199\u8fd9\u9053\u9898\u4e4b\u524d\u5148 AC [\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6](https://www.luogu.org/problemnew/show/P3402)\u3002\n\n\u9996\u53d1\u4e8e[\u4e2a\u4eba\u535a\u5ba2](https://www.xgzepto.cn/post/noi-2018-return)\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define mid ((l+r)>>1)\n#define maxn 400010\n#define minn(a,b) a<b?a:b\n#define maxx(a,b) a>b?a:b \nusing namespace std;\nint root[maxn],head[maxn],dis[maxn],n,m,cnt,cnt_e;\nstruct Edge{\n    int to,next,val,lev;\n    Edge(int a=0,int b=0,int c=0,int d=0){\n        to=a,next=b,val=c,lev=d;\n    }\n}l[maxn<<2];//\u50a8\u5b58\u539f\u56fe\nstruct Sp_Edge{\n    int from,to,lev;\n    Sp_Edge(int a=0,int b=0,int c=0){\n        from=a,to=b,lev=c;\n    }\n    bool operator < (const Sp_Edge &x) const{\n        return lev>x.lev;\n    }\n}e[maxn<<2];//\u7528\u4e8e\u6392\u5e8f\u548c\u5e76\u67e5\u96c6\u5408\u5e76\nstruct Node{\n    int f,p,d;\n    Node(int a=0,int b=0,int c=0){\n        f=a,p=b,d=c;\n    }\n};//\u4e3b\u5e2d\u6811\u8282\u70b9\nstruct PT{\n    int ls[maxn*44],rs[maxn*44],now;\n    Node tree[maxn*44],ins;\n    void ctl(int f,int p,int d){\n        ins=Node(f,p,d);\n    }//\u8981\u63d2\u5165\u7684\u4fe1\u606f\n    inline int build(int l,int r){\n        int o=++now;\n        if (l==r){\n            tree[o]=Node(l,1,dis[l]);\n            return o;\n        }\n        ls[o]=build(l,mid);\n        rs[o]=build(mid+1,r);\n        return o;\n    }\n    inline int insert(int pre,int l,int r,int x){\n        int o=++now;\n        tree[o]=tree[pre];\n        ls[o]=ls[pre],rs[o]=rs[pre];\n        if (l==r){\n            tree[o]=ins;\n            return o;\n        }\n        if (x<=mid) ls[o]=insert(ls[pre],l,mid,x);\n            else rs[o]=insert(rs[pre],mid+1,r,x);\n        return o;\n    }\n    inline Node query(int o,int l,int r,int x){\n        if (l==r) return tree[o];\n        if (x<=mid) return query(ls[o],l,mid,x);\n        else return query(rs[o],mid+1,r,x);\n    }\n    inline void reset(){\n        memset(ls,0,sizeof(ls));\n        memset(rs,0,sizeof(rs));\n        memset(tree,0,sizeof(tree));\n        now=0;\n    }\n}ds;//\u4e3b\u5e2d\u6811\u57fa\u672c\u64cd\u4f5c\nstruct d_node{\n    int v,d;\n    d_node(int a=0,int b=0){\n        v=a,d=b;\n    }\n    bool operator < (const d_node &x) const{\n        return d>x.d;\n    }\n};//\u7528\u4e8e\u5806\u4f18\u5316 Dijistra\ninline void Dijstra(){\n    int vis[maxn];\n    memset(dis,0x3f,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    priority_queue<d_node>q;\n    q.push((d_node){1,0});\n    dis[1]=0;\n    while(!q.empty()){\n        d_node hq=q.top();q.pop();\n        if (vis[hq.v]) continue;\n        vis[hq.v]=1;\n        for (register int i=head[hq.v];i;i=l[i].next){\n            int v=l[i].to;if (vis[v]) continue;\n            if (dis[v]>dis[hq.v]+l[i].val)\n            dis[v]=dis[hq.v]+l[i].val,q.push((d_node){v,dis[v]});\n        }\n    }\n}\ninline void Add(int fr,int to,int dis,int lev){\n    l[++cnt]=Edge(to,head[fr],dis,lev);\n    head[fr]=cnt;\n    l[++cnt]=Edge(fr,head[to],dis,lev);\n    head[to]=cnt;\n    e[++cnt_e]=Sp_Edge(fr,to,lev);\n}\ninline int search(int x){\n    int l=1,r=m,res=0;\n    while(l<=r){\n        if (e[mid].lev>x)\n            res=mid,l=mid+1;\n        else r=mid-1;\n    }\n    return res;\n}//\u4e8c\u5206\u67e5\u627e\u7248\u672c\ninline int find(int now,int x){\n    Node tem=ds.query(root[now],1,n,x);\n    int fx=tem.f;\n    if (fx==x) return x;\n    return find(now,fx);\n}//\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\ninline void merge(int now,int x,int y){\n    int fx=find(now,x),fy=find(now,y);\n    if (fx==fy) return;\n    Node infx=ds.query(root[now],1,n,fx);\n    Node infy=ds.query(root[now],1,n,fy);\n    if (infx.p>=infy.p) swap(infx,infy),swap(fx,fy);//\u6309\u6df1\u5ea6\u5408\u5e76\n    ds.ctl(fy,infx.p,infx.d);\n    root[now]=ds.insert(root[now],1,n,fx);\n    ds.ctl(infy.f,maxx(infx.p+1,infy.p),minn(infx.d,infy.d));\n    root[now]=ds.insert(root[now],1,n,fy);\n}\ninline void Solve(){\n    cin>>n>>m;\n    int x,y,z,w,v0,p0;\n    for (register int i=1;i<=m;i++){\n        cin>>x>>y>>z>>w;\n        Add(x,y,z,w);\n    }\n    Dijstra();//\u9884\u5904\u7406\u6700\u77ed\u8def\n    sort(e+1,e+1+m);\n    root[0]=ds.build(1,n);\n    for (register int i=1;i<=m;i++){\n        root[i]=root[i-1];\n        merge(i,e[i].from,e[i].to);\n    }//\u6309\u6d77\u62a5\u9ad8\u5ea6\u5408\u5e76\n    int q,k,s,lastans=0;\n    cin>>q>>k>>s;\n    for (register int i=1;i<=q;i++){\n        cin>>v0>>p0;\n        v0=(v0+k*lastans-1)%n+1;\n        p0=(p0+k*lastans)%(s+1);\n        int pos=search(p0);\n        int loc=find(pos,v0);\n        Node tem=ds.query(root[pos],1,n,loc);\n        lastans=tem.d;\n        printf(\"%d\\n\",lastans);\n    }\n}\ninline void Reset(){\n    memset(root,0,sizeof(root));\n    memset(head,0,sizeof(head));\n    memset(l,0,sizeof(l));\n    memset(e,0,sizeof(e));\n    n=0,m=0,cnt=0,cnt_e=0;\n    ds.reset();\n}\nint main(){\n    int T;\n    cin>>T;\n    for (int i=1;i<=T;i++){\n        Solve();\n        if (i==T) break;\n        Reset();\n    }\n    return 0;\n}\n```",
        "postTime": 1532419125,
        "uid": 37158,
        "name": "XG_Zepto",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u4e2a$n$\u4e2a\u70b9$m$\u6761\u8fb9\u7684\u65e0\u5411\u8054\u901a\u56fe\uff0c \u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a\u957f\u5ea6$d$\uff0c\u6d77\u62d4$h$\n\n\u6709$q$\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u5b9a\u4e24\u4e2a\u6570$v$, $p$\uff0c\u4f60\u8981\u627e\u5230\u4e00\u4e2a\u8282\u70b9$u$\uff0c\u5176\u4e2d$u$\u8981\u6ee1\u8db3$v$\u5230$u$\u5b58\u5728\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u6d77\u62d4\u5168\u90e8\u5927\u4e8e$p$\uff0c\u6c42\u6240\u6709\u53ef\u80fd\u7684$u$\u5230$1$\u7684\u6700\u77ed\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\n\n### \u5206\u6790\n\n\u663e\u7136\uff0c\u6211\u4eec\u53d1\u73b0$v$\u5230$u$\u7684\u8def\u5f84\u4e00\u5b9a\u5728$u$\u5230$v$\u7684\u6700\u5927\u751f\u6210\u6811\u4e0a\u3002\uff08\u4f8b\uff1a\u8d27\u8f66\u8fd0\u8f93\uff09\n\n\u628a\u8fb9\u6309\u7167\u6d77\u62d4\u964d\u5e8f\u6392\u5217\uff0c\u5efa\u51fa\u8be5\u56fe\u7684$\\texttt{kruskal}$\u91cd\u6784\u6811\uff0c\u5219\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$s$\uff0c \u82e5$s$\u7684\u70b9\u6743$val \\leq p$\u5219\u8be5\u5b50\u6811\u91cc\u7684\u6240\u6709\u8282\u70b9\u90fd\u4e92\u76f8\u8fde\u901a\uff08\u5373\u80fd\u5f00\u8f66\u62b5\u8fbe\uff09\u3002\n\n\u6211\u4eec\u901a\u8fc7$\\texttt{dijkstra}$\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230$1$\u7684\u6700\u77ed\u8def$dis_i$\uff0c \u5e76\u5728\u5efa\u51fa$\\texttt{kruskal}$\u91cd\u6784\u6811\u4e4b\u540e\u5728\u91cd\u6784\u6811\u4e0a$\\texttt{dfs}$\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u91cc$dis$\u7684\u6700\u5c0f\u503c$mind_i$\u3002\u8be2\u95ee\u65f6\u53ea\u8981\u627e\u5230$v$\u6700\u5927\u7684\u70b9\u6743$\\leq p$\u7684\u7956\u5148$x$\uff0c\u5219$mind_x$\u5c31\u662f\u672c\u9898\u7684\u7b54\u6848\u3002\n\n$x$\u7684\u5bfb\u627e\u53ef\u4ee5\u4f7f\u7528\u6811\u4e0a\u500d\u589e\u7b97\u6cd5\uff0c\uff08\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff09\u9010\u7ea7\u5f80\u4e0a\u8df3\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m \\log m)$\n\n### \u4e00\u4e9b\u989d\u5916\u7684\u4e1c\u897f\n\n\u8fd9\u91cc\u8865\u5145\u8bb2\u4e00\u4e0b$\\texttt{kruskal}$\u91cd\u6784\u6811\u662f\u600e\u4e48\u5efa\u51fa\u6765\u7684\uff1a\n\n1.\u50cf\u6b63\u5e38\u7684$\\texttt{kruskal}$\u91cd\u6784\u6811\u90a3\u6837\u628a\u6240\u6709\u8fb9\u6309\u7167\u8fb9\u6743\u964d\u5e8f/\u5347\u5e8f\u6392\u5e8f\n\n2.\u5728\u5408\u5e76\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9$u, \\; v$\u65f6\uff0c\u6211\u4eec\u4e0d\u50cf\u539f\u6765\u90a3\u6837\u628a$v$\u8054\u901a\u5757\u7684\u6839\u8282\u70b9$fv$\u8bbe\u4e3a$fu$\uff0c\u800c\u662f\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9$new$\u5e76\u628a$new$\u8bbe\u4e3a$fu, \\; fv$\u7684\u7236\u4eb2\uff0c\u5e76\u5728\u56fe\u4e2d\u8fde\u4e0a$(new, \\; fu)$\u548c$(new, \\; fv)$\u4e24\u6761\u8fb9\uff0c\u6b64\u65f6\u8be5\u65b0\u70b9\u7684\u70b9\u6743\u5c31\u662f$u$, $v$\u6700\u5927/\u5c0f\u751f\u6210\u6811\u8def\u5f84\u4e0a\u6700\u5c0f/\u5927\u503c\n\n3.\u91cd\u590d\u6b65\u9aa4$2$\u76f4\u5230\u6240\u6709\u8fb9\u90fd\u88ab\u904d\u5386\u4e00\u904d\n\n### \u4ee3\u7801\n\n``` cpp\n#include <bits/stdc++.h>\n\n#define R register\n#define ll long long\n#define sum(a, b, mod) (((a) + (b)) % mod)\n\nconst int MaxN = 8e5 + 10;\nconst int MaxM = 1e6 + 10;\n\nstruct edge\n{\n    int next, to, dis;\n};\n\nstruct Edge\n{\n    int u, v, ht;\n};\n\nstruct node\n{\n    int pos, dis;\n    bool operator<(node x) const { return dis > x.dis; }\n};\n\nedge e[MaxM];\nEdge t[MaxN];\nint n, m, q, k, s, cnt, num;\nint head[MaxM], dep[MaxM], f[MaxM], val[MaxM], mind[MaxN];\nint u[MaxN], v[MaxN], l[MaxN], a[MaxN], dis[MaxN], vis[MaxN], fa[MaxN][21];\n\nint cmp(Edge a, Edge b) { return a.ht > b.ht; }\n\nvoid link(int u, int v, int a) { ++cnt, t[cnt].u = u, t[cnt].v = v, t[cnt].ht = a; }\n\nint getf(int x)\n{\n    if (x != f[x])\n        f[x] = getf(f[x]);\n    return f[x];\n}\n\nvoid rebuild()\n{\n    cnt = 0;\n    for (int i = 1; i <= m; i++)\n        link(u[i], v[i], a[i]);\n}\n\nint jump(int u, int k)\n{\n    for (int i = 20; ~i; i--)\n        if (val[fa[u][i]] > k)\n            u = fa[u][i];\n    return u;\n}\n\nvoid add_edge(int u, int v, int d)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].dis = d;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nvoid init()\n{\n    n = m = cnt = num = 0;\n    memset(f, 0, sizeof(fa));\n    memset(fa, 0, sizeof(fa));\n    memset(dep, 0, sizeof(dep));\n    memset(vis, 0, sizeof(vis));\n    memset(val, 0, sizeof(val));\n    memset(head, 0, sizeof(head));\n    memset(mind, 0x3f, sizeof(mind));\n}\n\ninline int read()\n{\n    int x = 0;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n        ch = getchar();\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return x;\n}\n\nvoid dfs(int u, int fa)\n{\n    dep[u] = dep[fa] + 1, ::fa[u][0] = fa;\n    for (int i = 1; i <= 20; i++)\n        ::fa[u][i] = ::fa[::fa[u][i - 1]][i - 1];\n    for (int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].to;\n        if (v == fa)\n            continue;\n        dfs(v, u), mind[u] = std::min(mind[u], mind[v]);\n    }\n}\n\nvoid kruskal()\n{\n    num = n, cnt = 0;\n    memset(head, 0, sizeof(head));\n    std::sort(t + 1, t + m + 1, cmp);\n    for (int i = 1; i <= n; i++)\n        f[i] = i;\n    for (int i = 1; i <= m; i++)\n    {\n        int fu = getf(t[i].u), fv = getf(t[i].v);\n        if (fu != fv)\n        {\n            val[++num] = t[i].ht;\n            f[num] = f[fu] = f[fv] = num;\n            add_edge(fu, num, 0), add_edge(num, fu, 0);\n            add_edge(fv, num, 0), add_edge(num, fv, 0);\n        }\n    }\n    dfs(num, 0);\n}\n\nvoid dijkstra(int u)\n{\n    std::priority_queue<node> q;\n    memset(dis, 0x3f, sizeof(dis));\n    dis[u] = 0, q.push((node){u, 0});\n    while (!q.empty())\n    {\n        node x = q.top();\n        q.pop(), u = x.pos;\n        if (vis[u])\n            continue;\n        vis[u] = 1;\n        for (int i = head[u]; i; i = e[i].next)\n        {\n            int v = e[i].to;\n            if (dis[u] + e[i].dis < dis[v])\n            {\n                dis[v] = dis[u] + e[i].dis;\n                if (!vis[v])\n                    q.push((node){v, dis[v]});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n        mind[i] = dis[i];\n}\n\nint main()\n{\n    int T = read();\n    while (T--)\n    {\n        int lastans = 0;\n        init(), n = read(), m = read();\n        for (int i = 1; i <= m; i++)\n        {\n            u[i] = read(), v[i] = read(), l[i] = read(), a[i] = read();\n            add_edge(u[i], v[i], l[i]), add_edge(v[i], u[i], l[i]);\n        }\n        dijkstra(1), rebuild(), kruskal();\n        q = read(), k = read(), s = read();\n        while (q--)\n        {\n            int v = (read() + k * lastans - 1) % n + 1, p = (read() + k * lastans) % (s + 1);\n            lastans = mind[jump(v, p)], printf(\"%d\\n\", lastans);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1583074871,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\n[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p4768-noi2018%E5%BD%92%E7%A8%8B/)\n\n---\n# Solution\n\u8fd9\u9898\u53ef\u80fd\u8981\u7528\u5230Kruskal\u91cd\u6784\u6811\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u5982\u679c\u6709\u9700\u6c42\u7684\u540c\u5b66\u53ef\u4ee5[\u770b\u8fd9\u91cc](https://www.goldenpotato.cn/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/kruskal%E9%87%8D%E6%9E%84%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)\n\n\u9996\u5148\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u8fd0\u8f93\u8ba1\u5212\u90a3\u9053\u9898\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u5f00\u8f66\u80fd\u7ecf\u8fc7\u7684\u8fb9\u4e00\u5b9a\u5728**\u4ee5\u6d77\u62d4\u4e3a\u5173\u952e\u5b57\u7684\u6700\u5927\u751f\u6210\u6811\u4e0a**\u3002\n\n\u6839\u636eKruskal\u91cd\u6784\u6811\u7684\u6027\u8d28\uff1a**Kruskal\u91cd\u6784\u6811\u662f\u4e00\u4e2a\u5806**\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u505a\uff1a\n\u6211\u4eec\u5148\u628aKruskal\u91cd\u6784\u6811\u6309\u6bcf\u6761\u8def\u7684\u6d77\u62d4\u4ece\u5927\u5230\u5c0f\u5efa\u51fa\u6765\uff0c\u90a3\u4e48**\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u80fd\u5f00\u8f66\u5230\u8fbe\u7684\u70b9\u4e00\u5b9a\u662f\u8fd9\u4e2a\u70b9\u7684\u67d0\u4e2a\u7956\u5148\u7684\u5b50\u6811\u5185\u7684\u6240\u6709\u7684\u70b9**\uff0c\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3aKruskal\u91cd\u6784\u6811\u662f\u4e00\u4e2a\u5806\uff0c\u90a3\u4e48\u5806\u4e4b\u5185\u7684\u70b9\u7684\u8def\u4e00\u5b9a>\u5806\u9876\uff0c\u5806\u5916\u7684\u70b9\u4e00\u5b9a<=\u5806\u9876\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5148\u628a\u6bcf\u4e2a\u70b9\u5230**1\u53f7\u8282\u70b9\u7684\u6700\u77ed\u8def**\u5148\u6c42\u51fa\u6765\uff0c\u6bcf\u6b21\u6211\u4eec**\u4ece\u51fa\u53d1\u70b9\u5411\u4e0a\u500d\u589e**\uff0c\u627e\u5230\u521a\u597d>\u79ef\u6c34\u7ebf\u7684\u70b9\uff0c\u7136\u540e\u627e\u5230\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5185\u8ddd\u79bb1\u6700\u77ed\u7684\u70b9\u5373\u53ef\uff0c\u8fd9\u4e2a\u7528\u7b80\u5355\u7684\u6811\u5f62DP\u5373\u53ef\u5b8c\u6210\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O((q+n)logn)$\n\u5c31\u9171\uff0c\u8fd9\u9898\u5c31\u88ab\u6211\u4eec\u5207\u6389\u5566~(*\u00b4\uff9f\u2200\uff9f\uff40)\uff89 \n\n---\n# Code\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=2*200000+2000;\nconst int M=400000+1000;\nstruct EDGE\n{\n    int s,to,l,h;\n}e1[M];\nvector <EDGE> e2[N];//e2\u9700\u8981\u521d\u59cb\u5316\nint n,m;\nlong long dis[N];\nstruct SIT\n{\n    int to;\n    long long w;\n    SIT (int x,long long y)\n    {\n        to=x,w=y;\n    }\n    friend bool operator < (SIT x,SIT y)\n    {\n        return x.w>y.w;\n    }\n};\npriority_queue <SIT> mqueue;\nvoid dj()\n{\n    static bool vis[N];\n    memset(vis,0,sizeof vis);\n    memset(dis,0x3f,sizeof dis);\n    dis[1]=0,mqueue.push(SIT(1,0));\n    while(mqueue.empty()==false)\n    {\n        int now=mqueue.top().to;\n        mqueue.pop();\n        if(vis[now]==true) continue;\n        vis[now]=true;\n        for(int i=0;i<int(e2[now].size());i++)\n            if(dis[e2[now][i].to] > dis[now]+e2[now][i].l)\n            {\n                dis[e2[now][i].to]=dis[now]+e2[now][i].l;\n                mqueue.push(SIT(e2[now][i].to,dis[e2[now][i].to]));\n            }\n    }\n}\nint fa[N][21],depth[N],cnt;//fa\u9700\u8981\u521d\u59cb\u5316\nvector <int> e3[N];//e3\u9700\u8981\u521d\u59cb\u5316\nint MIN[N],sl[N];//\u5b58\u653e\u8ddd\u79bb\u6700\u5c0f\u503c\u4f4d\u7f6e\nbool cmp(EDGE x,EDGE y)\n{\n    return x.h>y.h;\n}\nint FindFather(int x)\n{\n    if(fa[x][0]==0) return x;\n    return fa[x][0]=FindFather(fa[x][0]);\n}\nvoid Kruskal()\n{\n    for(int i=1;i<=n;i++)\n        MIN[i]=i;\n    sort(e1+1,e1+1+m,cmp);\n    cnt=n;\n    for(int i=1;i<=m;i++)\n    {\n        int fa1=FindFather(e1[i].s),fa2=FindFather(e1[i].to);\n        if(fa1==fa2) continue;\n        fa[fa1][0]=fa[fa2][0]=++cnt;\n        sl[cnt]=e1[i].h,MIN[cnt]=cnt;\n        e3[cnt].push_back(fa1),e3[cnt].push_back(fa2);\n    }\n    fa[cnt][0]=cnt;\n}\nvoid dfs(int now)\n{\n    for(int i=1;i<=20;i++)\n        fa[now][i]=fa[fa[now][i-1]][i-1];\n    for(int i=0;i<int(e3[now].size());i++)\n    {\n        depth[e3[now][i]]=depth[now]+1;\n        fa[e3[now][i]][0]=now;\n        dfs(e3[now][i]);\n        if(dis[MIN[e3[now][i]]]<dis[MIN[now]])\n            MIN[now]=MIN[e3[now][i]];\n    }\n}\nint Query(int x,int h)\n{\n    for(int i=20;i>=0;i--)\n        if(sl[fa[x][i]]>h)\n            x=fa[x][i];\n    return dis[MIN[x]];\n}\nint main()\n{\n    int T=read();\n    for(;T>0;T--)\n    {\n        n=read(),m=read();\n        \n        for(int i=0;i<=2*n+10;i++)\n            e2[i].clear(),e2[i].reserve(4);\n        memset(fa,0,sizeof fa);\n        for(int i=0;i<=2*n+10;i++)\n            e3[i].clear(),e3[i].reserve(4);\n        \n        for(int i=1;i<=m;i++)\n        {\n            e1[i].s=read(),e1[i].to=read(),e1[i].l=read(),e1[i].h=read();\n            e2[e1[i].s].push_back(e1[i]);\n            swap(e1[i].s,e1[i].to);\n            e2[e1[i].s].push_back(e1[i]);\n        }\n        \n        dj();\n        Kruskal();\n        dfs(cnt);\n        \n        long long ans=0,q=read(),K=read(),S=read();\n        for(int i=1;i<=q;i++)\n        {\n            long long v=read(),p=read();\n            v=(v+K*ans-1)%n+1,p=(p+K*ans)%(S+1);\n            printf(\"%lld\\n\",ans=Query(v,p));\n        }\n    }\n    return 0;\n}\n\n```\n\n\n\n\n\n\n\n",
        "postTime": 1551952646,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u8c03\u4e86\u4e00\u5929\u7684\u5e76\u67e5\u96c6~~mdzz~~\uff0c\u5fd8\u52a0\u8def\u5f84\u538b\u7f29\u548c\u5224\u4e00\u4e2a\u8fde\u901a\u5757\u662f\u4ec0\u4e48\u9b3c\u554a\uff01\uff01\uff01~~\uff08\u51b7\u9759\u4e00\u4e0b\u60c5\u7eea\uff09~~\n\n\u597d\u4e86\uff0c\u5148\u8bb2\u79bb\u7ebf\u505a\u6cd5\uff1a\n> \u5bf9\u8fb9\u7684$high$\u964d\u5e8f\u6392\u5e8f\uff0c\u5bf9\u8be2\u95ee\u7684$p$\u964d\u5e8f\u6392\u5e8f\u3002\n\n> \u6211\u4eec\u8003\u8651\u8bb2$high>p$\u7684\u6240\u6709\u8fb9\u6dfb\u52a0\u5230\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u8bb0\u5f55\u8fde\u901a\u5757\u4e2d\u70b9\u79bb1\u53f7\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u6b64\u65f6\u53ef\u4ee5\u7528$Dijkstra$+\u5e76\u67e5\u96c6\u6765\u5b9e\u73b0~~\uff08SPFA\u4f1a\u88ab\u5361\u662f\u5e38\u8bc6...\uff09~~\u3002\n\n\u63a5\u4e0b\u4e86\u4ee3\u7801\u957f\u8fd9\u6837\uff1a\n\n```cpp\nfor(int i=1;i<=n;++i)fat[i]=i;\nfor(int i=0;i<Q;++i)\n{\n\tint v=que[i].v,p=que[i].p;\n\tfor(;!pq.empty()&&pq.top().a>p;pq.pop())\n\t{\n\t\tint x=Fin(pq.top().u),y=Fin(pq.top().v);\n\t\tif(x==y)continue;\n\t\tdis[x]=min(dis[x],dis[y]);\n\t\tfat[y]=x;\n\t}\n\tans[que[i].id]=dis[Fin(v)];\n}\n//pq\u662fpriority_queue\uff0c\u5b58\u8fb9\n//que\u662f\u8be2\u95ee\uff0cFin\u627e\u6839\n```\n\n`Dijkstra`\u957f\u8fd9\u6837\uff1a\n```cpp\nmemset(vis,0,sizeof vis);\nmemset(dis,63,sizeof dis);\ndis[1]=0;pq.push(E{0,1});\nfor(;!pq.empty();)\n{\n\tE t=pq.top();pq.pop();\n\tif(vis[t.v])continue;vis[t.v]=1;\n\tfor(E x:fir[t.v])\n\t\tif(t.w+x.w<dis[x.v])\n\t\t\tpq.push(E{dis[x.v]=t.w+x.w,x.v});\n}\n```\n\n\u4ece\u79bb\u7ebf\u6269\u5c55\u5230\u5728\u7ebf\uff1a\n> \u4f9d\u65e7\u5bf9$high$\u964d\u5e8f\u6392\u5e8f\uff0c\u7531\u4e8e$p$\u7684\u8be2\u95ee\u4e0d\u786e\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06$edge$\u6309$high$\u52a0\u5165\u56fe\u4e2d\uff0c\u540c\u65f6\u7ef4\u62a4\u4e0a\u8ff0\u503c\uff0c\u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8981\u5c06\u52a0\u8fb9\u7684\u8fc7\u7a0b\u53ef\u6301\u4e45\u5316\u4e00\u4e0b\uff0c*\u5c31*\u597d\u4e86~~(\u4ec0\u4e48\u53eb\u5c31\uff0c\u6839\u672c\u4e0d\u4f1a\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6...)~~\u3002\n\n> \u8003\u8651\u5e76\u67e5\u96c6\u7684\u6bcf\u4e00\u6b21\u5408\u5e76\uff0c\u5c31\u53ea\u662f$father$\u6570\u7ec4\u4e0e$mindis$\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u4e8e\u662f*\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6*$->$*\u53ef\u6301\u4e45\u5316\u6570\u7ec4*\u3002\n\n> \u6211\u4eec\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230*\u53ef\u6301\u4e45\u5316\u6570\u7ec4*\u7684\u4e00\u79cd\u6c34\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5c06\u5176$father$\u5f00\u6210\u4e00\u4e2a$vector$\uff0c\u6bcf\u5f53\u5176$father$\u6539\u53d8\u65f6\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a$vector$\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a$pair$\uff0c\u8bb0\u5f55\u5728\u54ea\u4e2a$high$\u6539\u6210\u4ec0\u4e48\uff0c$mindis$\u540c\u7406\u3002\n\n\u9884\u5904\u7406\u8dc3\u7136\u7eb8\u4e0a\uff1a\n```cpp\n//a.rbegin()\u4e3aa\u8fd9\u4e2avector\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\nfor(int i=0;i<m;++i)\n{\n\tint p=edg[i].p,u=Fin(edg[i].u),v=Fin(edg[i].v);if(u==v)continue;\n\tif(siz[u]<siz[v])\n\t\tu^=v^=u^=v;\n\tsiz[u]=siz[u]+siz[v];\n\tfa[v]=u;\n\tmnn[u].push_back(E{p,min(mnn[u].rbegin()->v,mnn[v].rbegin()->v)});\n\tfat[v].push_back(E{p,u});\n}\n```\n\u90a3\u6211\u4eec\u600e\u4e48\u77e5\u9053\u8be2\u95ee$p$\u65f6$v$\u7684$father$\u662f\u4ec0\u4e48\u5462\uff1a\n\n> \u9996\u5148\u4e00\u4e2a\u70b9\u7684$fat$\u4e2d\u5143\u7d20\u662f\u5355\u8c03\u9012\u51cf\u7684\uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u6709\u6548\u8303\u56f4\u662f$[now.first,las.first)$\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5728$fat$\u91cc`lower_bound`\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n> \u5f53\u6211\u4eec\u627e\u5230$v$\u5728$p$\u6c34\u4f4d\u7ebf\u65f6\u7684\u6839\u65f6\uff0c\u518d\u5728$mindis$\u4e2d`lower_bound`\u4e00\u4e0b\u5c31\u51fa\u7b54\u6848\u4e86\u3002\n\n\u6e90\u7801\uff1a\n```cpp\n#pragma GCC optimize(3,\"inline,Ofast\")\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\n#define N 200005\n#define M 400005\ninline int read(){\n\tint x=0,f=0;\n\tregister char ch=getchar();\n\tfor(;ch<48||ch>57;ch=getchar())f|=ch=='-';\n\tfor(;ch>47&&ch<58;ch=getchar())\n\tx=(x<<1)+(x<<3)+(ch^48);\n\treturn f?~x+1:x;\n}\nusing namespace std;\nstruct E{int w,v;bool operator<(const E&o)const{return w>o.w;}};\nstruct O{int p,u,v;bool operator<(const O&o)const{return p>o.p;}}edg[M];\npriority_queue<E>pq;\nvector<E>fir[N],fat[N],mnn[N];\nint vis[N],dis[N],siz[N],fa[N];\nint Fin(int x){return fa[x]==x?x:fa[x]=Fin(fa[x]);}\nint main()\n{\n\tfor(int cas=0,T=read();cas<T;++cas)\n\t{\n\t\tint n=read(),m=read(),las=0;\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tfir[i].clear(),fat[i].clear(),mnn[i].clear();\n\t\tfor(int i=0;i<m;++i)\n\t\t{\n\t\t\tint u=read(),v=read(),l=read(),a=read();\n\t\t\tfir[u].push_back(E{l,v});\n\t\t\tfir[v].push_back(E{l,u});\n\t\t\tedg[i]=O{a,u,v};\n\t\t}sort(edg,edg+m);\n        //Dijkstra begin\n\t\tmemset(vis,0,sizeof vis);\n\t\tmemset(dis,63,sizeof dis);\n\t\tdis[1]=0;pq.push(E{0,1});\n\t\tfor(;!pq.empty();)\n\t\t{\n\t\t\tE t=pq.top();pq.pop();\n\t\t\tif(vis[t.v])continue;vis[t.v]=1;\n\t\t\tfor(E x:fir[t.v])\n\t\t\t\tif(t.w+x.w<dis[x.v])\n\t\t\t\t\tpq.push(E{dis[x.v]=t.w+x.w,x.v});\n\t\t}\n        //end\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tfat[i].push_back(E{(int)2e9,fa[i]=i}),\n\t\t\tmnn[i].push_back(E{(int)2e9,dis[i]}),siz[i]=1;\n        //init begin\n\t\tfor(int i=0;i<m;++i)\n\t\t{\n\t\t\tint p=edg[i].p,u=Fin(edg[i].u),v=Fin(edg[i].v);if(u==v)continue;\n\t\t\tif(siz[u]<siz[v])u^=v^=u^=v;siz[u]=siz[u]+siz[v];fa[v]=u;\n\t\t\tmnn[u].push_back(E{p,min(mnn[u].rbegin()->v,mnn[v].rbegin()->v)});\n\t\t\tfat[v].push_back(E{p,u});\n\t\t}\n        //end\n\t\tint q=read(),k=read(),s=read();\n\t\tfor(int i=0;i<q;++i)\n\t\t{\n\t\t\tint v=(read()+k*las-1)%n+1,p=(read()+k*las)%(s+1);\n\t\t\tfor(int f;v!=(f=(--lower_bound(fat[v].begin(),fat[v].end(),E{p,0}))->v);v=f);\n\t\t\tprintf(\"%d\\n\",las=(--lower_bound(mnn[v].begin(),mnn[v].end(),E{p,0}))->v);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u5199\u5728\u540e\u9762\uff1a\n> \u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f$O(n*logm*logn)$\uff0c\u7a0d\u5fae\u7b97\u4e00\u4e0b\u662f\u80fd\u8fc7\u7684\uff0c\u53ef\u662f\u6211\u4e00\u76f4$TLE$\uff0c\u6700\u7ec8\u53d1\u73b0\u6ca1\u6709\u8def\u5f84\u538b\u7f29\u548c\u540c\u8fde\u901a\u5757\u8df3\u8fc7\uff0c\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\u90fd\u6ca1\u53d1\u73b0\uff0c~~md~~\u6211\u8fd8\u4ee5\u4e3a\u6211\u590d\u6742\u5ea6\u9519\u4e86\u5462\uff0c\u614c\u4e86\u534a\u5929\u3002\u3002\u3002",
        "postTime": 1531989332,
        "uid": 27029,
        "name": "Hades18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u573a\u5916\u9009\u624b\u4f11\u95f2\u505a\u9898 \n\nkruskal\u91cd\u6784\u6811\u4ec0\u4e48\u7684\u6839\u672c\u6ca1\u542c\u8bf4\u8fc7\u554a\u2026\u2026\n\n~~\u8fd9\u91cc\u662f\u611a\u8822\u7684$O(nlog^2n)$\u505a\u6cd5\uff0c\u7136\u800c\u8dd1\u7684\u98de\u8d77~~\n\n__________________\n\n\u9996\u5148\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u60f3\u4e00\u4e0b\u7684\u8bdd\uff0c\u7531\u4e8e\u4e0b\u8f66\u4e4b\u540e\u65e0\u8bba\u662f\u4e0d\u662f\u79ef\u6c34\u7684\u8fb9\u90fd\u80fd\u8d70\uff0c\u6240\u4ee5\u4e0b\u8f66\u4e4b\u540e\u4e00\u5b9a\u4f1a\u8d70\u52301\u53f7\u70b9\u7684\u6700\u77ed\u8def\n\n\u5982\u6b64\u8bf4\u6765\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528dijkstra\u7b97\u6cd5\u5904\u7406\u51fa1\u53f7\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\n\n\u90a3\u4e48\u6211\u4eec\u4e58\u8f66\u7684\u76ee\u7684\u5c31\u662f\u9009\u62e9\u4e00\u4e2a\u5230\u4e00\u53f7\u70b9\u6700\u77ed\u8def\u6700\u5c0f\u7684\u70b9\u4e0b\u8f66\n\n\u4f46\u662f\u8f66\u662f\u6709\u4f7f\u7528\u9650\u5236\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u8d70\u4e0d\u79ef\u6c34\u7684\u8fb9\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u975e\u5e38\u66b4\u529b\u7684\u65b9\u5f0f\u5c31\u662f\u6bcf\u6b21\u66b4\u529b\u7684\u628a\u6240\u6709\u8fd8\u4e0d\u79ef\u6c34\u7684\u8fb9\u585e\u5230\u5e76\u67e5\u96c6\u91cc\uff0c\u6b64\u65f6\u6211\u4eec\u67e5\u4e00\u53d1\u5e76\u67e5\u96c6\u4e2d\u6bcf\u4e2a\u70b9\u5230\u4e00\u53f7\u70b9\u7684\u6700\u5c0f\u503c\u5373\u53ef\u77e5\u9053\u6b64\u65f6\u5230\u8fbe\u4e00\u53f7\u70b9\u7684\u6700\u5c0f\u6b65\u884c\u8ddd\u79bb\n\n\u5f53\u7136\u66b4\u529b\u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u4f18\u5316\u8fd9\u4e2a\u4e1c\u897f\n\n\u53d1\u73b0\u6bcf\u6b21\u7684\u8be2\u95ee\u65f6\u7ed9\u51fa\u4e86\u4e00\u4e2a\u79ef\u6c34\u91cf\uff0c\u6d77\u62d4\u5927\u4e8e\u8fd9\u4e2a\u79ef\u6c34\u91cf\u7684\u8fb9\u624d\u6709\u6548\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u628a\u6240\u6709\u8fb9\u6309\u7167\u6d77\u62d4\u6392\u4e00\u4e2a\u5e8f\uff0c\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u6bcf\u6b21\u8be2\u95ee\u76f8\u5f53\u4e8e\u89c4\u5b9a\u4e86\u4e00\u4e2a\u524d\u7f00\u662f\u751f\u6548\u7684\u3002\n\n\u7b49\u7b49\uff0c\u6bcf\u6b21\u4e00\u4e2a\u8fb9\u7684\u524d\u7f00\u662f\u751f\u6548\u7684\uff1f\n\n\u73b0\u5728\u6211\u4eec\u5c06\u8fb9\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u52a0\u5165\u5e76\u67e5\u96c6\u4e2d\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e2a\u987a\u5e8f\u5c31\u662f\u65f6\u95f4\u987a\u5e8f\n\n\u663e\u7136\u6211\u4eec\u7684\u5e76\u67e5\u96c6\u4f1a\u6709n\u4e2a\u7248\u672c(\u56e0\u4e3a\u6bcf\u6b21\u5408\u5e76\u96c6\u5408\u603b\u6570\u51cf\u5c111)\n\n\u6bcf\u6b21\u5e94\u5bf9\u8be2\u95ee\u7684\u65f6\u5019\u6211\u4eec\u4e8c\u5206\u4e00\u4e0b\u53ef\u4ee5\u786e\u5b9a\u5230\u5e95\u54ea\u4e9b\u8fb9\u662f\u751f\u6548\u7684\n\n\u8fd9\u4e9b\u8fb9\u90fd\u751f\u6548\u4e14\u53e6\u5916\u7684\u8fb9\u90fd\u4e0d\u751f\u6548\u65f6\u7684\u5e76\u67e5\u96c6\uff0c\u5176\u5b9e\u65f6\u6211\u4eec\u628a\u8fb9\u6392\u5e8f\u4f9d\u6b21\u52a0\u5165\u5e76\u67e5\u96c6\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\n\n\u4e3a\u4e86\u56de\u7b54\u8be2\u95ee\u6211\u4eec\u9700\u8981\u77e5\u9053\u67d0\u4e00\u4e2a\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u957f\u4ec0\u4e48\u6837\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u7684\u5e76\u67e5\u96c6\u7684\u5386\u53f2\u7248\u672c\u91cc\u9762\u67e5\u4e00\u4e0b\u6700\u5c0f\u503c\u5373\u53ef\u4e86\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u5e76\u67e5\u96c6\u8d44\u74f7\u5feb\u901f\u8bbf\u95ee\u5386\u53f2\u7248\u672c\n\n\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff01\n\n\u5982\u679c\u4e0d\u4f1a\u7684\u7684\u8bdd\u53ef\u4ee5\u5de6\u8f6c\u4f60\u7ad9\u6a21\u677f\u533a\n\n\u53e6\u5916\u4e00\u4ef6\u4e8b\u65f6\u5982\u679c\u6211\u4eec\u53ea\u662f\u5b9e\u73b0\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7684\u8bdd\u4f1a\u53d1\u73b0\u590d\u6742\u5ea6\u65f6$O((E+Q)log^2N)$\u57fa\u672c\u8fc7\u4e0d\u53bb\n\n\u4f46\u662f\u6211\u4eec\u505a\u4e2a\u5c0f\u4f18\u5316\uff0c\u6211\u4eec\u5199\u4e00\u4e2a\u771f\u5b9e\u7684\u4e0d\u53ef\u6301\u4e45\u5316\u7684\u5e76\u67e5\u96c6\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u53d8\u5316\u7528\u53ef\u6301\u4e45\u5316\u6570\u7ec4\u8bb0\u5f55\u4e0b\u6765\n\n\u6b64\u65f6\u6211\u4eec\u7684\u590d\u6742\u5ea6\u53d8\u6210\u4e86$O((N+E)logN+Qlog^2N)$\u6b64\u65f6\u5e38\u6570\u538b\u529b\u5c31\u6bd4\u8f83\u5c0f\u4e86\u6211\u4eec\u5c31\u53ef\u4ee5(\u52a0)\u8f7b(\u4e0a)\u677e(\u5feb)\u7684(\u8bfb)\u901a\u8fc7\u672c\u9898\n\n\u5bf9\u4e86\u4e5f\u662f\u6700\u91cd\u8981\u7684\u4e00\u70b9\n\n# \u5173\u4e8espfa\n\n~~\u5b83\u6b7b\u4e86~~\n\n\u88ab\u8d1f\u8d23\u4efb\u7684\u51fa\u9898\u4eba\u5e72\u6389\u4e86\uff0c\u6240\u4ee5\u8bf7\u4f7f\u7528dijkstra\n\n\u4e0a\u4ee3\u7801~\n\n```C\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\ntemplate <class T>\nvoid read(T &x){\n    char c;\n    bool op = 0;\n    while(c = getchar(), c < '0' || c > '9')\n    if(c == '-') op = 1;\n    x = c - '0';\n    while(c = getchar(), c >= '0' && c <= '9')\n    x = x * 10 + c - '0';\n    if(op) x = -x;\n}\nconst int N=2*1e5+10;const int E=4*1e5+10;typedef long long ll;\nint n;int m;int q;ll k;ll s;int T;int dis[N];int cnt;\nstruct data\n{\n    int u;int v;int dep;\n    friend bool operator <(data a,data b){return a.dep>b.dep;}\n}ed[E];\nnamespace dijkstra//\u6700\u77ed\u8def\u9884\u5904\u7406\n{\n    int v[2*E];int x[2*E];int ct;int al[N];int val[2*E];\n    inline void add(int u,int V,int va){v[++ct]=V;x[ct]=al[u];al[u]=ct;val[ct]=va;}\n    struct nod{int dis;int u;friend bool operator <(nod a,nod b){return a.dis>b.dis;}};\n    priority_queue <nod> pq;bool book[N];\n    inline void solve()\n    {\n        for(int i=1;i<=n;i++)dis[i]=0x7f7f7f7f;dis[1]=0;pq.push((nod){0,1});\n        while(!pq.empty())\n        {\n            nod nw=pq.top();pq.pop();if(book[nw.u])continue;book[nw.u]=true;\n            for(int i=al[nw.u];i;i=x[i])\n                if(!book[v[i]]&&dis[v[i]]>nw.dis+val[i])\n                    dis[v[i]]=nw.dis+val[i],pq.push((nod){dis[v[i]],v[i]});\n        }\n    }\n    inline void clear()\n    {for(int i=1;i<=n;i++)book[i]=false;for(int i=1;i<=n;i++)al[i]=0;ct=0;}\n}\nstruct per_array//\u53ef\u6301\u4e45\u5316\u6570\u7ec4\n{\n    int s[20*E][2];int root[E];int w[20*E];int ct;int tim;\n    inline void setval(int p1,int p2,int l,int r,const int& pos,const int& val)\n    {\n        if(r-l==1){w[p1]=val;return;}int mid=(l+r)/2;\n        if(pos<=mid)s[p1][0]=++ct,s[p1][1]=s[p2][1],setval(ct,s[p2][0],l,mid,pos,val);\n        else s[p1][1]=++ct,s[p1][0]=s[p2][0],setval(ct,s[p2][1],mid,r,pos,val);\n    }\n    inline int find(int p,int l,int r,const int& pos)\n    {\n        if(r-l==1){return w[p];}int mid=(l+r)/2;\n        if(pos<=mid)return find(s[p][0],l,mid,pos);\n        else return find(s[p][1],mid,r,pos);\n    }\n    inline void ih(int p,int l,int r,int* st)//\u5e76\u67e5\u96c6\u7531\u4e8e\u4e00\u5f00\u59cb\u6570\u7ec4\u4e0d\u4e3a\u7a7a\u6240\u4ee5\u8981\u521d\u59cb\u5316\n    {\n        if(r-l==1){w[p]=st[r];return;}int mid=(l+r)/2;\n        s[p][0]=++ct;s[p][1]=++ct;ih(s[p][0],l,mid,st);ih(s[p][1],mid,r,st);\n    }\n    inline void csval(const int& pos,const int& val)\n    {root[++tim]=++ct;setval(root[tim],root[tim-1],0,n,pos,val);}\n    inline void cih(int* st){ih(root[0]=++ct,0,n,st);}\n    inline int cfind(const int& t,const int& p){return find(root[t],0,n,p);}\n    inline void skip(){++tim;root[tim]=root[tim-1];}\n    inline void clear(){ct=0;tim=0;}\n}pa1,pa2;\nstruct bcj//\u666e\u901a\u7684\u5e76\u67e5\u96c6\uff0c\u6ce8\u610f\u7684\u662f\u4e0d\u8981\u52a0\u8def\u5f84\u538b\u7f29\n{\n    int fa[N];int siz[N];int mi[N];\n    inline void ih()\n    {\n        for(int i=1;i<=n;i++)fa[i]=i;for(int i=1;i<=n;i++)siz[i]=1;for(int i=1;i<=n;i++)mi[i]=dis[i];\n        pa1.cih(fa);pa2.cih(mi);\n    }\n    inline int f(int x){++cnt;return (fa[x]==x)?x:f(fa[x]);}\n    inline void u(int x,int y)\n    {\n        int u=f(x);int v=f(y);\n        if(u==v){pa1.skip();pa2.skip();return;}\n        if(siz[u]>siz[v])swap(u,v);\n        fa[u]=v;siz[v]+=siz[u];mi[v]=min(mi[v],mi[u]);\n        pa1.csval(u,v);pa2.csval(v,mi[v]);\n    }\n}bj;\ninline void solve()//\u89e3\u51b3\u95ee\u9898\n{\n    read(n);read(m);\n    for(int i=1,u,v,w,d;i<=m;i++)\n    {\n        read(u);read(v);read(w);read(d);\n        dijkstra::add(u,v,w);dijkstra::add(v,u,w);ed[i]=(data){u,v,d};}\n    dijkstra::solve();bj.ih();sort(ed+1,ed+m+1);ed[0].dep=0x7f7f7f7f;\n    for(int i=1;i<=m;i++){bj.u(ed[i].u,ed[i].v);}\n    ll lastans=0;read(q);read(k);read(s);\n    for(int i=1;i<=q;i++)\n    {\n        ll v0;ll p0;read(v0);read(p0);\n        v0=(v0+k*lastans-1)%n+1;p0=(p0+k*lastans)%(s+1);int l=0;int r=m;\n        while(l!=r){int mid=(l+r+1)/2;if(ed[mid].dep<=p0)r=mid-1;else l=mid;}\n        int p=v0;while(1){int fa=pa1.cfind(l,p);if(p==fa)break;else p=fa;}\n        lastans=pa2.cfind(l,p);printf(\"%lld\\n\",lastans);\n    }\n}\ninline void clear(){dijkstra::clear();pa1.clear();pa2.clear();}\nint main(){scanf(\"%d\",&T);for(int z=1;z<=T;z++)solve(),clear();return 0;}\n\n```\n\n\n\n\n",
        "postTime": 1531987924,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "Kruskal\u91cd\u6784\u6811\u53ef\u4ee5\u7528\u4e8e\u6c42\u89e3\u4e24\u70b9\u4e4b\u95f4\u4efb\u610f\u8def\u5f84\u6700\u5927\u8fb9\u7684\u6700\u5c0f\u503c\u3002\n\n\u5c31\u4e0a\u9762\u63d0\u5230\u7684\u8fd9\u4e2a\u95ee\u9898\u6765\u8bf4\uff0c\u5982\u679c\u662f\u79bb\u7ebf\u7684\u8bdd\uff0c\u76f4\u63a5Kruskal\u505a\u5c31\u884c\u4e86\u3002\u4e5f\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u60f3\u3002\n\n\u4e0b\u9762\u662f\u5f15\u7528\u81ea[\u8fd9\u91cc](https://www.cnblogs.com/ZegWe/p/6243883.html)\u7684Kruskal\u751f\u6210\u6811\u6784\u9020\u6cd5\u548c\u6027\u8d28\u3002\n\n> \u6211\u4eec\u6309\u7167kruskal\u6c42\u6700\u5c0f\u2f63\u6210\u6811\u7684\u65b9\u5f0f\u52a0\u8fb9\uff0c\u4f46\u6bcf\u6b21\u5728\u52a0\u8fb9\u65f6\uff0c\u65b0\u5efa\u2f00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u628a\u4e24\u4e2a\u8054\u901a\u5757\uff08\u5176\u5b9e\u662f\u4e24\u68f5\u2f06\u53c9\u6811\uff09\u7684\u6839\u8282\u70b9\u4f5c\u4e3a\u5176\u5de6\u53f3\u513f\u2f26\uff0c\u628a\u8fb9\u6743\u8d4b\u503c\u7ed9\u65b0\u5efa\u8282\u70b9\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u68f5\u6811\u6709\u51e0\u4e2a\u6027\u8d28\u3002\n1. \u662f\u2f00\u68f5\u2f06\u53c9\u6811\uff1b\n2. \u6ee1\u2f9c\u7236\u8282\u70b9\u7684\u503c\u2f24\u4e8e\u7b49\u4e8e\u513f\u2f26\u8282\u70b9\uff0c\u662f\u2f00\u4e2a\u5927\u9876\u5806\uff0c\u8fd9\u662f\u6700\u5173\u952e\u7684\u2f00\u70b9\uff1b\n3. \u539f\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u8def\u5f84\u6700\u957f\u8fb9\u7684\u6700\u5c0f\u503c\u7b49\u4e8e\u5176lca\u7684\u503c\uff1b\n\n\u5f53\u7136\u5982\u679c\u662f\u4ece\u5927\u5230\u5c0f\u5efa\u7684\u8bdd\uff0c\u539f\u7406\u4e5f\u4e00\u6837\u3002\u672c\u9898\u9700\u8981\u4ece\u5927\u5230\u5c0f\u5efa\uff0c\u7136\u540elca\u7684\u610f\u4e49\u5c31\u53d8\u6210\u4e86\u8def\u4e0a\u6700\u77ed\u8fb9\u7684\u6700\u5927\u503c\u3002\u4e5f\u5c31\u662f\u8bf4u,v\u7684\u8fd9\u4e2a\u503c\u5982\u679c>T\uff0c\u5219u,v\u8054\u901a\u3002\n\n\u5219\u5bf9\u4e8e\u70b9\u6743>T\u7684\u5b50\u6811\uff0c\u5176\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff08\u56e0\u4e3a\u4efb\u610f\u53f6\u5b50\u8282\u70b9\u7684\u4efb\u610f\u8def\u5f84\u7684\u6700\u77ed\u8fb9\u7684\u6700\u5927\u503c>T\uff09\uff0c\u800c\u5b50\u6811\u80af\u5b9a\u4e0d\u80fd\u4e0e\u5b50\u6811\u5916\u7684\u7ed3\u70b9\u6784\u6210\u8fde\u901a\u5757\uff08<=T\uff09\u3002\n\n\u6240\u4ee5\u53ea\u9700\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u52301\u7684\u6700\u77ed\u8def\u503c\uff0c\u518d\u5efaKruskal\u91cd\u6784\u6811\u9884\u5904\u7406\u5b50\u6811min\u503c\uff0c\u67e5\u8be2\u65f6\u500d\u589e\u5373\u53ef\u3002\n\n\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003...\n## Code\n```cpp\n// Code by ajcxsu\n// Problem: return\n\n#include<bits/stdc++.h>\n#define CLR(x, y) memset(x, y, sizeof(x))\nusing namespace std;\ntypedef long long ll;\n\ntemplate<typename T> void gn(T &x) {\n    char ch=getchar();\n    x=0;\n    while(ch<'0' || ch>'9') ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0', ch=getchar();\n}\n\nconst int N=4e5+10, M=1e6+10;\nint h[N], to[M], nexp[M], p=1;\nll W[M], f[N], nw[N];\ninline void ins(int a, int b, ll w) { nexp[p]=h[a], h[a]=p, to[p]=b, W[p]=w, p++; }\nstruct Edge { int u, v; ll w; } e[M];\nbool cmp(const Edge &a, const Edge &b) { return a.w>b.w; }\nint n, m;\nll U;\n\nll dist[N];\nbool S[N];\ntypedef pair<ll, int> mpair;\nvoid SPFA() {\n    CLR(dist, 0x3f), CLR(S, 0);\n    priority_queue<mpair, vector<mpair>, greater<mpair> > pq;\n    pq.push(mpair(0, 1));\n    dist[1]=0;\n    int na;\n    for(int i=1;i<=n;i++) {\n        while(S[pq.top().second] || pq.top().first>dist[pq.top().second]) pq.pop();\n        na=pq.top().second, S[na]=1;\n        for(int u=h[na];u;u=nexp[u])\n            if(dist[to[u]]>dist[na]+W[u] && !S[to[u]])\n                dist[to[u]]=dist[na]+W[u], pq.push(mpair(dist[to[u]], to[u]));\n    }\n}\n\nint fa[N];\nint Find(int x) { return fa[x]?fa[x]=Find(fa[x]):x; }\n\nconst int OP=22;\nint gup[N][OP];\nvoid dfs(int x) {\n    for(int u=h[x];u;u=nexp[u])\n        dfs(to[u]), f[x]=min(f[x], f[to[u]]), gup[to[u]][0]=x;\n    if(x<=n) f[x]=dist[x];\n}\n\nint main() {\n    int T;\n    gn(T);\n    while(T--) {\n        CLR(h, 0), p=1;\n        gn(n), gn(m);\n        int u, v, w, a;\n        for(int i=1;i<=m;i++)\n            gn(u), gn(v), gn(w), gn(a),\n            ins(u, v, w), ins(v, u, w),\n            e[i]={u, v, a};\n        sort(e+1, e+1+m, cmp);\n        SPFA();\n        int idx=n;\n        CLR(h, 0), CLR(fa, 0), p=1;\n        for(int i=1;i<=n;i++) W[i]=0;\n        for(int i=1;i<=m;i++) {\n            int af=Find(e[i].u), bf=Find(e[i].v);\n            if(af==bf) continue;\n            fa[af]=fa[bf]=++idx;\n            ins(idx, af, 0), ins(idx, bf, 0);\n            nw[idx]=e[i].w;\n        }\n        CLR(gup, 0), CLR(f, 0x3f);\n        dfs(idx);\n        for(int j=1;j<OP;j++)\n            for(int i=1;i<=idx;i++)\n                gup[i][j]=gup[gup[i][j-1]][j-1];\n        ll Q,K,S;\n        gn(Q), gn(K), gn(S);\n        ll lastans=0;\n        while(Q--) {\n            gn(u), gn(U);\n            u=(u+K*lastans-1)%n+1;\n            U=(U+K*lastans)%(S+1);\n            for(int j=OP-1;j>=0;j--)\n                if(nw[gup[u][j]]>U) u=gup[u][j];\n            printf(\"%lld\\n\", lastans=f[u]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1531921642,
        "uid": 5554,
        "name": "Sino_E",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "\u7a81\u7136\u5c31\u60f3\u7ed9\u90a3\u4e9b\u4e0d\u4f1aKruscal\u91cd\u6784\u6811\u7684\u540c\u5b66\u5199\u4e00\u4e2a80\u5206\u7684\u9898\u89e3\uff08\u4e00\u5b9a\u53ea\u6709\u6211\u4e0d\u4f1a\uff09\n\u600e\u4e48\u8bf4\u5462\uff0c\u8fd9\u4e2a\u9898\u6253\u540c\u6b65\u8d5b\u60f3\u4e86\u4e00\u4e0a\u5348\uff0c\u5404\u79cd\u5947\u602a\u7684\u60f3\u6cd5+\u6570\u636e\u5206\u6cbb\u7ed3\u5408\u8d77\u6765\u9a97\u4e8680\u8d76\u811a\u5f88\u5f00\u5fc3\uff08\u7136\u800c\u5927\u5bb6\u90fdA\u4e86\uff09\n\n\u5148\u770b\u4e00\u4e0b\u6570\u636e\uff0c\u670965\u5206\u662f\u53ef\u4ee5\u79bb\u7ebf\u7684\u3002\u90a3\u79bb\u7ebf\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\u9996\u5148\u8dd1\u4e2a\u6700\u77ed\u8def\u6c42\u4e00\u4e0b1\u53f7\u70b9\u5230\u6240\u6709\u70b9\u7684\u8ddd\u79bb\uff0c\u6309\u7167\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5bf9\u4e8e\u8be2\u95ee\u4e5f\u6309\u7167\u6c34\u4f4d\u7ebf\u4ece\u5927\u5230\u5c0f\u6392\u4e00\u4e0b\u5e8f\u3002\u663e\u7136\uff0c\u5f53\u4e00\u6761\u8fb9\u52a0\u5165\u4ee5\u540e\uff0c\u5c31\u4e0d\u53ef\u80fd\u518d\u5220\u9664\uff0c\u56e0\u4e3a\u6c34\u4f4d\u7ebf\u53ea\u4f1a\u6162\u6162\u964d\u4f4e\u3002\u8fd9\u6837\u8fd9\u4e2a\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\uff0c\u5f53\u524d\u8be2\u95ee\u4e0b\uff0c\u5982\u679c\u628a\u6240\u6709\u5927\u4e8e\u5f53\u524d\u6c34\u4f4d\u7ebf\u7684\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u90a3\u4e48\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u6c42\u5b83\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u4e2d\u4e0e1\u53f7\u70b9\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u5373\u53ef\u3002\u52a0\u8fb9\u65f6\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\uff1a\u5373\u5bf9\u4e8e\u4e24\u4e2a\u70b9a\uff0cb\u5728\u5e76\u67e5\u96c6\u4e2d\u7684\u7956\u5148x\uff0cy\uff0c\u5982\u679cdis[x]>dis[y]\uff0c\u5219\u4ee4fa[x]=y\u3002\u8fd9\u6837\u5e76\u67e5\u96c6\u5728\u67e5\u8be2\u65f6\uff0c\u5c31\u53ef\u4ee5\u4ee5\u5e38\u6570\u7684\u590d\u6742\u5ea6\u627e\u5230\u5f53\u524d\u8be2\u95ee\u4e0b\u7684\u7b54\u6848\u3002\u6ce8\u610f\u52a0\u8fb9\u662f\u5728\u4e00\u4e2a\u67e5\u8be2\u5f00\u59cb\u524d\uff0c\u5c06\u6240\u6709\u6d77\u62d4\u5927\u4e8e\u6c34\u4f4d\u7ebf\u7684\u8fb9\u52a0\u8fdb\u53bb\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u670965\u5206\u4e86\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd8\u6709\u4e00\u4e2a\u6811\u7684\u70b9\uff085\u5206\uff09\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u663e\u7136\u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u552f\u4e00\uff0c\u90a3\u4e48\u4ee51\u4e3a\u6839\uff0c\u53ea\u9700\u500d\u589e\u7ef4\u62a4\u4e00\u4e0bi\u70b9\u5411\u4e0a\u8df32^j\u4e2a\u5355\u4f4d\u65f6\u7684\u70b9\u65f6\u591a\u5c11\uff0c\u4e24\u70b9\u95f4\u6700\u5c0f\u503c\u662f\u591a\u5c11\u5373\u53ef\uff0c\u80fd\u8df3\u5c31\u5f80\u4e0a\u8df3\u3002\u6700\u540e\u67e5\u5230\u7684\u90a3\u4e2a\u70b9\u7684dis\u503c\u6781\u4e3a\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u540e\u8fb94\u4e2a\u70b9\uff0c\u53d1\u73b0n,m,q\u90fd\u5f88\u5c0f\uff0c\u6240\u4ee5\u5bf9\u6bcf\u4e00\u6b21\u8be2\u95ee\u505a\u4e00\u6b21\u79bb\u7ebf\u7684\u90a3\u4e2a\u8fc7\u7a0b\u5c31\u884c\u4e86\u3002\u53ea\u8981\u4e0d\u5199\u6302T1\u768480\u5c31\u5230\u624b\u5566~\n```c\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#define M 100010\n#define INF 99999999\nusing namespace std;\ninline int read()\n{\n    char c=getchar();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1; c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0'; c=getchar();}\n    return x*f;\n}\n\nstruct point{\n    int next,to,dis,height,from;\n}e[M<<3],a[M<<3];\n\nstruct Question{\n    int v,p,id,ans;\n}ask[M<<2];\n\nint n,m,num,K,S,Q,lastans,T;\nint head[M],dis[M],fa[M];\nint fa1[M][21],fa2[M][21];\nbool f[M];\n\nvoid add(int from,int to,int dis,int aa)\n{\n    e[++num].next=head[from];\n    e[num].to=to;\n    e[num].dis=dis;\n    e[num].height=aa;\n    head[from]=num;\n}\n\ntypedef pair<int,int> pii;\npriority_queue<pii,vector<pii>,greater<pii> >q;\n\ninline void DJ()\n{\n    for(int i=1;i<=n;i++) dis[i]=INF;\n    dis[1]=0;\n    q.push(make_pair(dis[1],1));\n    while(!q.empty())\n    {\n        pii mind=q.top();\n        q.pop();\n        int k=mind.second;\n        if(f[k]) continue;\n        else\n        {\n            f[k]=true;\n            for(int i=head[k];i;i=e[i].next)\n            if(dis[e[i].to]>e[i].dis+dis[k])\n            {\n                dis[e[i].to]=e[i].dis+dis[k];\n                q.push(make_pair(dis[e[i].to],e[i].to));\n            }\n        }\n    }\n}\n\nint cmp1(Question x1,Question x2) {return x1.p>x2.p;}\nint cmp2(point x1,point x2) {return x1.height>x2.height;}\nint cmp3(Question x1,Question x2) {return x1.id<x2.id;}\nint find(int x) {return fa[x]==x?x:fa[x]=find(fa[x]);}\n\ninline void merge(int x,int y)\n{\n    int r1=find(x),r2=find(y);\n    if(r1==r2) return;\n    if(dis[r1]>dis[r2]) fa[r1]=r2;\n    else fa[r2]=r1;\n}\n\ninline void work1()\n{\n    for(int i=1;i<=Q;i++) ask[i].v=read(),ask[i].p=read(),ask[i].id=i;\n    sort(ask+1,ask+1+Q,cmp1);\n    sort(a+1,a+1+m,cmp2);\n    for(int i=1;i<=n;i++) fa[i]=i;\n    int now=1;\n    for(int i=1;i<=Q;i++)\n    {\n        while(now<=m&&a[now].height>ask[i].p) merge(a[now].from,a[now].to),now++;\n        ask[i].ans=dis[find(ask[i].v)];\n    }\n    sort(ask+1,ask+1+Q,cmp3);\n    for(int i=1;i<=Q;i++) printf(\"%d\\n\",ask[i].ans);\n}\n\ninline void dfs(int x,int fa)\n{\n    for(int i=head[x];i;i=e[i].next)\n    {\n        int to=e[i].to;\n        if(to==fa) continue;\n        fa1[to][0]=x;\n        fa2[to][0]=e[i].height;\n        dfs(to,x);\n    }\n}\n\nint jump(int x,int limit)\n{\n    if(limit==0) return 1;\n    for(int i=20;i>=0;i--)\n        if(fa2[x][i]>limit)\n            x=fa1[x][i];\n    return x;\n}\n\ninline void work2()\n{\n    dfs(1,0);\n    for(int j=1;j<=20;j++)\n    for(int i=1;i<=n;i++)\n    {\n        fa1[i][j]=fa1[fa1[i][j-1]][j-1];\n        fa2[i][j]=min(fa2[i][j-1],fa2[fa1[i][j-1]][j-1]);\n    }\n    for(int i=1;i<=Q;i++)\n    {\n        int v=(read()+K*lastans-1)%n+1;\n        int p=(read()+K*lastans)%(S+1);\n        int to=jump(v,p);\n        lastans=dis[to];\n        printf(\"%d\\n\",lastans);\n    }\n}\ninline void work3()\n{\n    sort(a+1,a+1+m,cmp2);\n    for(int kkk=1;kkk<=Q;kkk++)\n    {\n        for(int i=1;i<=n;i++) fa[i]=i;\n        int now=1;\n        int v=(read()+K*lastans-1)%n+1;\n        int p=(read()+K*lastans)%(S+1);\n        while(now<=m&&a[now].height>p) merge(a[now].from,a[now].to),now++;\n        int x=find(v);\n        lastans=dis[x];\n        printf(\"%d\\n\",lastans);\n    }\n}\n\nint main()\n{\n//\tfreopen(\"return.in\",\"r\",stdin);\n//\tfreopen(\"return.out\",\"w\",stdout);\n    cin>>T;\n    while(T--)\n    {\n        memset(head,0,sizeof(head));\n        memset(e,0,sizeof(e));\n        memset(f,0,sizeof(f));\n        lastans=num=0;\n        n=read(); m=read();\n        for(int i=1;i<=m;i++)\n        {\n            int u=read(),v=read(),l=read(),aa=read();\n            a[i].from=u; a[i].to=v; a[i].dis=l; a[i].height=aa;\n            add(u,v,l,aa); add(v,u,l,aa);\n        }\n        DJ();\n        Q=read(),K=read(),S=read();\n        if(K==0) work1();\n        else if(m==n-1) work2();\n        else if(n<=1500) work3();\n    }\n    return 0;\n}\n```",
        "postTime": 1531921227,
        "uid": 49248,
        "name": "Slr\u795e\u9f99\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "# \u9898\u89e3\uff1a\u5f52\u7a0b\n\n\u6807\u7b7e\uff08\u7a7a\u683c\u5206\u9694\uff09\uff1a \u9898\u89e3 NOI Kruskal\u91cd\u6784\u6811 \u53ef\u6301\u4e45\u5316 \n\n---\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u4ecev\u52301\u7684\u8def\u5f84\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u534a\u5168\u5f00\u8f66\uff0c\u4e00\u534a\u5168\u8d70\u8def\n\n\u4e5f\u5c31\u662f\u8bf4\u8981\u679a\u4e3en\u4e2a\u8282\u70b9\u4f5c\u4e3a\u65ad\u70b9(\u5047\u8bbe\u5f53\u524d\u65ad\u70b9\u4e3au)\uff0c\u8fd9\u4e2a\u65ad\u70b9\u662f\u53ef\u884c\u89e3\u4e0e\u6700\u4f18\u89e3\u5f53\u4e14\u4ec5\u5f53\u5b58\uff1a\u5728\u4e00\u6761\u4ecev\u5230u\u7684\u8def\u5f84\u53ef\u4ee5\u5168\u90e8\u5f00\u8f66\u4e14\u4eceu\u52301\u5168\u90e8\u8d70\u8def\u7684\u6700\u77ed\u8def\u662f\u6ee1\u8db3\u4e0a\u4e00\u6761\u4ef6\u4e2d\u6700\u77ed\u7684\n\n\u4ecev\u51fa\u53d1\u5f00\u8f66\u53ef\u4ee5\u5230\u7684\u70b9\uff0c \u4e00\u5b9a\u6ee1\u8db3\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u6d77\u62d4\u90fd\u9ad8\u4e8e\u6c34\u4f4d\n\n## Kruskal\u91cd\u6784\u6811:\n\n\u8fd9\u91cc\u5df2\u7ecf\u5f88\u660e\u663e\u53ef\u4ee5\u7528Kruskal\u91cd\u6784\u6811\u6c42\u89e3\u4e86\n\n\u6211\u4eec\u628a\u6bcf\u6761\u8fb9\u6309\u6d77\u62d4\u964d\u5e8f\u6392\u5e8f\uff0c\u91cd\u6784\u6811\u5b8c\u6210\u540e\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u627e\u5230\u6811\u4e2d\u6df1\u5ea6\u6700\u5c0f\u4e14\u6d77\u62d4\u5927\u4e8e\u6c34\u4f4d\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u4ed6\u7684\u5b50\u6811\u7684\u5168\u90e8\u8282\u70b9\u90fd\u53ef\u4ee5\u7531v\u5f00\u8f66\u5230\u8fbe\n\n\u8fd9\u4e00\u70b9\u53ef\u4ee5\u7531\u91cd\u6784\u6811\u662f\u5c0f\u6839\u5806\u7684\u6027\u8d28\u7b80\u5355\u5f97\u8bc1\uff0c\u5373\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u6d77\u62d4\u90fd\u6bd4\u8be5\u8282\u70b9\u5927\n\n\u73b0\u5728\u8981\u6c42\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u8fd9\u4e2a\u5b50\u6811\u5185\u6240\u6709\u8282\u70b9\u52301\u53f7\u8282\u70b9\u7684\u6b65\u884c\u6700\u77ed\u8def\uff0c \u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u9884\u5904\u74061\u8282\u70b9\u5230\u6240\u6709\u8282\u70b9\u6700\u77ed\u8def\u5c31\u597d\uff0c\u7136\u540edfs\u53ef\u4ee5\u987a\u4fbf\u6c42\u51fa\u67d0\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u6700\u77ed\u8def\n\n--\n\n$ps$\uff1a\n\u8fd9\u4e2a\u9898\u5361 $SPFA$ ~~CCF\u600e\u4e48\u80fd\u8fd9\u6837\u5bf9\u6211\u53ef\u7231\u7684SPFA~~\n\u6240\u4ee5\u5fc5\u987b\u6253\u8fea\u6770\u65af\u7279\u62c9\n\n---\n\n\u5904\u7406\u7ec6\u8282\uff1a\n\n1. \u83ab\u540d\u5361\u5e38\uff08\u53ef\u80fd\u662f\u6211\u4e0d\u4f18\u79c0\uff09\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u6570\u7ec4\u4e0d\u7528\u6e05\u96f6\u7684\u5c31\u522b\u6e05\u4e86\uff0c\u6bd4\u5982\u500d\u589e\u6570\u7ec4\u548c\u6700\u5c0f\u503c\u6570\u7ec4\uff08\u5220\u4e86HSYOJ\u5c31\u8fc7\u4e86\uff09\n2. \u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u5957\u8def\uff1a\u6e05\u96f6!!!\uff08\u6570\u636e\u4e0d\u6e05\u7a7a\uff0c\u7206\u96f6\u4e24\u884c\u6cea\uff09\n\n---\n\n## \u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\n\n\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\uff0c\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7684\u9002\u7528\u8303\u56f4\u662f\u5927\u4e8e\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u7684\uff0c\u867d\u7136\u5728\u8fd9\u91cc\u4e0d\u662f\u6700\u4f18\u79c0\u7684\u505a\u6cd5\uff0c\u628a$NlogN$\u7684\u590d\u6742\u5ea6\u786c\u751f\u751f\u53d8\u6210\u4e86$Nlog^2N$\uff08\u5361\u5361\u5e38\u4e5f\u662f\u80fd\u8fc7\u7684\uff09\uff0c\u8fd9\u91cc\u867d\u7136\u4e0d\u662f\u6b63\u89e3\uff0c\u4f46\u4e5f\u662f\u4e00\u4e2a\u597d\u65b9\u6848\n\n#### \u505a\u6cd5\uff1a\n\u8fea\u6770\u65af\u7279\u62c9\u9884\u5904\u7406\uff0c\u7136\u540e\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u5757\uff08\u53e3\u80e1\u5b8c\u4e86\uff09\n\n#### \u5b9e\u73b0\u7ec6\u8282\uff1a\n\u6ce8\u610f\u5e38\u6570\n\n---\n\n## \u4ee3\u7801\uff1a\n\uff08\u8fd9\u91cc\u7528\u7684\u662fKruskal\u91cd\u6784\u6811\uff09\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <queue>\nusing namespace std;\n\n#define ll long long\n#define re register\n#define gc getchar()\ninline int read()\n{\n    re int x(0),f(1);re char ch(gc);\n    while(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=gc;}\n    while(ch>='0'&&ch<='9') x=(x*10)+(ch^48),ch=gc;\n    return x*f;\n}\n\nconst int N=8e5+10;\nint h[N],cnt,n,m,f[N][22],tot;\nll val[N],_min[N],dis[N];\n\nstruct edge{int next,to;ll w;}e[N<<1];\nvoid add(int u,int v,ll w){e[++cnt]=(edge){h[u],v,w},h[u]=cnt;} \n#define QXX(u) for(int i=h[u],v;v=e[i].to,i;i=e[i].next)\n\nstruct node{int u,v;ll h;}E[N<<1];\nbool operator < (node a,node b){return a.h>b.h;}\n\nstruct Node{ll x;int id;};\nbool operator < (Node a,Node b){return a.x<b.x;}\npriority_queue <Node> q;\nint vis[N];\n\nint fa[N];\nint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n\nvoid djs()\n{\n    memset(vis,0,sizeof(vis));\n    memset(dis,127,sizeof(dis));\n    q.push((Node){0,1});\n    dis[1]=0;\n    while(!q.empty())\n    {\n        Node t=q.top();q.pop();\n        int u=t.id;\n        if(vis[u]) continue;\n        vis[u]=1;\n        QXX(u)\n            if(dis[u]+e[i].w<dis[v])\n            {\n                dis[v]=dis[u]+e[i].w;\n                q.push((Node){-dis[v],v});\n            }\n        \n    }\n}\nvoid dfs(int u)\n{\n    _min[u]=dis[u];\n    QXX(u)\n    {\n        f[v][0]=u;\n        dfs(v);\n        _min[u]=min(_min[u],_min[v]);\n    }\n}\nvoid kruskal()\n{\n    memset(h,0,sizeof(h));\n    cnt=0;\n    sort(E+1,E+1+m);\n    for(int i=1;i<=n;++i) fa[i]=i;\n    for(int i=1;i<=m;++i)\n    {\n        int u=find(E[i].u),v=find(E[i].v);\n        if(u!=v)\n        {\n            val[++tot]=E[i].h;\n            fa[u]=fa[v]=fa[tot]=tot;\n            add(tot,u,0),add(tot,v,0);\n        }\n    }\n    dfs(tot);\n}\nint main()\n{\n//\tfreopen(\"return.in\",\"r\",stdin);\n    int T=read();\n    while(T--)\n    {\n        memset(h,0,sizeof(h));\n        memset(f,0,sizeof(f));\n        memset(_min,127,sizeof(_min));\n        n=read(),m=read(),cnt=0;tot=n;\n        for(int i=1;i<=m;++i)\n        {\n            re int u=read(),v=read(),w=read(),h=read();\n            add(u,v,w),add(v,u,w);\n            E[i].u=u,E[i].v=v,E[i].h=h;\n        }\n        djs();\n        kruskal();\n        for(int i=1;(1<<i)<=tot;i++)\n            for(int u=1;u<=tot;u++)\n    \t\t    f[u][i]=f[f[u][i-1]][i-1];\n    \tint Q=read(),K=read(),S=read();\n        ll la=0;\n        while(Q--) \n        {\n            int vi=read(),pi=read();\n            vi=(vi+K*la-1)%n+1;\n            pi=(pi+K*la)%(S+1);\n            for(int j=21;j>=0;--j)\n                if(f[vi][j]&&val[f[vi][j]]>pi) \n    \t\t        vi=f[vi][j];\n    \t\tla=_min[vi];\n    \t\tcout<<la<<endl;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1559373319,
        "uid": 119086,
        "name": "zijinjun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    },
    {
        "content": "Kruskal\u91cd\u6784\u6811\n\n\u6211\u4eec\u5b66LCA\u7684\u65f6\u5019\u77e5\u9053\u500d\u589e\u662f\u9664\u4e86baoli\u4e4b\u5916\u6700\u6162\u7684\u505a\u6cd5\n\n\u5728\u7ebf\u60c5\u51b5\u4e0b\u6bd4\u8f83\u5feb\u7684\u662f\u6811\u5256\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5224\u4e00\u4e0btop\u662f\u5426\u4e3aroot\u548ctop\u7684fa\u662f\u5426\u6ee1\u8db3\u8981\u6c42\n\n\u662f\u5c31\u5f80\u4e0a\u8df3\uff0c\u5426\u5c31\u4e8c\u5206\n\n\u7b97\u662f\u7528\u4ee3\u7801\u590d\u6742\u5ea6\u6362\u4e86\u4ee3\u7801\u7684\u6548\u7387\n\n```cpp\n#include\"cstdio\"\n#include\"cstring\"\n#include\"iostream\"\n#include\"algorithm\"\nusing namespace std;\n\nconst int MAXN=2e5+5;\nconst int MAXM=4e5+5;\n\nint T,n,m,np,las;\nint h[MAXM],ln[MAXM],hp[MAXN],id[MAXM];\nstruct rpg{\n\tint li,nx,ln;\n}a[MAXM<<1];\nstruct l{\n\tint ls,nx,ln;\n}L[MAXM];\n\nint read()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||'9'<ch) ch=getchar();\n\twhile('0'<=ch&&ch<='9') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\n\nvoid add(int ls,int nx,int ln)\n{\n\ta[++np]=(rpg){h[ls],nx,ln};h[ls]=np;\n\ta[++np]=(rpg){h[nx],ls,ln};h[nx]=np;\n}\n\nvoid up(int x)\n{\n\tfor(int i=x,j=i>>1;j;i=j,j>>=1){\n\t\tif(ln[hp[j]]>ln[hp[i]]) swap(id[hp[i]],id[hp[j]]),swap(hp[i],hp[j]);\n\t\telse break;\n\t}return;\n}\n\nvoid ins(int x)\n{\n\thp[++hp[0]]=x;\n\tid[x]=hp[0];\n\tup(id[x]);\n\treturn;\n}\n\nvoid pop()\n{\n\tid[hp[1]]=0;\n\thp[1]=hp[hp[0]--];\n\tfor(int i=1,j=2;j<=hp[0];i=j,j<<=1){\n\t\tif(j<hp[0]&&ln[hp[j+1]]<ln[hp[j]]) ++j;\n\t\tif(ln[hp[j]]<ln[hp[i]]) swap(hp[i],hp[j]),swap(id[hp[i]],id[hp[j]]);\n\t\telse break;\n\t}return;\n}\n\nvoid SPkstra()\n{\n\tmemset(id,0,sizeof(id));\n\tmemset(ln,0x7f,sizeof(ln));\n\tln[1]=0;ins(1);\n\twhile(hp[0]){\n\t\tint nw=hp[1];pop();\n\t\tfor(int i=h[nw];i;i=a[i].li){\n\t\t\tif(ln[a[i].nx]>ln[nw]+a[i].ln){\n\t\t\t\tln[a[i].nx]=ln[nw]+a[i].ln;\n\t\t\t\tif(id[a[i].nx]) up(id[a[i].nx]);\n\t\t\t\telse ins(a[i].nx);\n\t\t\t}\n\t\t}\n\t}return;\n}\n\nint f[MAXM];\nint v[MAXM];\nint dep[MAXM],siz[MAXM],sn[MAXM],rid[MAXM],top[MAXM];\n\nbool cmp(l a,l b){return a.ln>b.ln;}\nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nvoid ad(int ls,int nx){a[++np]=(rpg){h[ls],nx};h[ls]=np;}\n\nvoid dfs1(int x,int fa,int tp)\n{\n\tsiz[x]=1;\n\tf[x]=fa;\n\tdep[x]=tp;\n\tsn[x]=0;\n\tif(h[x]) ln[x]=2e9;\n\tfor(int i=h[x];i;i=a[i].li){\n\t\tdfs1(a[i].nx,x,tp+1);\n\t\tsiz[x]+=siz[a[i].nx];\n\t\tln[x]=min(ln[x],ln[a[i].nx]);\n\t\tif(siz[a[i].nx]>siz[sn[x]]) sn[x]=a[i].nx;\n\t}return;\n}\n\nvoid dfs2(int x,int tpx)\n{\n\ttop[x]=tpx;\n\tid[x]=++id[0];\n\trid[id[x]]=x;\n\tif(!sn[x]) return;\n\tdfs2(sn[x],tpx);\n\tfor(int i=h[x];i;i=a[i].li){\n\t\tif(a[i].nx==sn[x]) continue;\n\t\tdfs2(a[i].nx,a[i].nx);\n\t}return;\n}\n\nvoid init()\n{\n\tmemset(h,0,sizeof(h));np=id[0]=0;\n\tn=read(),m=read();\n\tfor(int i=1;i<=n<<1;++i) f[i]=i,v[i]=2e9;\n\tfor(int i=1;i<=m;++i){\n\t\tint x=read(),y=read(),z1=read(),z2=read();\n\t\tL[i]=(l){x,y,z2};\n\t\tadd(x,y,z1);\n\t}SPkstra();\n\tmemset(h,0,sizeof(h));np=0;\n\tsort(L+1,L+m+1,cmp);int ct=0;\n\tfor(int i=1;i<=m;++i){\n\t\tint fa=find(L[i].ls),fb=find(L[i].nx);\n\t\tif(fa!=fb){\n\t\t\t++ct;\n\t\t\tf[fa]=ct+n;\n\t\t\tf[fb]=ct+n;\n\t\t\tv[ct+n]=L[i].ln;\n\t\t\tad(ct+n,fa);\n\t\t\tad(ct+n,fb);\n\t\t}if(ct==n-1) break;\n\t}dfs1((n<<1)-1,(n<<1)-1,1);dfs2((n<<1)-1,(n<<1)-1);\n\treturn;\n}\n\nint cq(int x,int vl)\n{\n\twhile(top[x]!=(n<<1)-1&&v[f[top[x]]]>vl) x=f[top[x]];\n\tint l=id[top[x]],r=id[x];\n\twhile(l<r){\n\t\tint mid=l+r>>1;\n\t\tif(v[rid[mid]]>vl) r=mid;\n\t\telse l=mid+1;\n\t}return rid[l];\n}\n\nvoid solve()\n{\n\tlas=0;\n\tint Q=read(),K=read(),S=read();\n\twhile(Q--){\n\t\tint v=(read()+K*las-1)%n+1,w=(read()+K*las)%(S+1);\n\t\tprintf(\"%d\\n\",las=ln[cq(v,w)]);\n\t}return;\n}\n\nint main()\n{\n\tT=read();\n\twhile(T--){\n\t\tinit();\n\t\tsolve();\n\t}return 0;\n}\n```",
        "postTime": 1555579327,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4768 \u3010[NOI2018]\u5f52\u7a0b\u3011"
    }
]