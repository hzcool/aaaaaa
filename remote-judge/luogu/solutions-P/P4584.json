[
    {
        "content": "\u597d\u50cf\u8fd8\u6ca1\u6709\u9898\u89e3\uff1f\u6765\u7b80\u8981\u7684\u5199\u4e00\u4e0b\u4e00\u7bc7\u4e0d\u4f1a\u8bc1\u660e\u7684\u9898\u89e3\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u9898\u76ee\u8f6c\u5316\u6210\u4e24\u4e2a\u4e0d\u540c\u7684\u95ee\u9898\u7136\u540e\u8fdb\u884c\u5408\u5e76\n\n\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a\n\u6211\u4eec\u53d1\u73b0\u8981\u6c42\u7684\u662f\u591a\u4e32\u95ee\u9898\uff0c\u7136\u540e\u8fd9\u4e9b\u4e32\u90fd\u8981\u540c\u65f6\u51fa\u73b0\u5728\u4e00\u4e2a\u4e32\u5185\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5efa\u51faac\u81ea\u52a8\u673a\uff0c\u7136\u540e\u53d1\u73b0k<=6\uff0c\u56e0\u6b64\u53ef\u4ee5\u72b6\u538b\u51fa\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u8bb0\u5f55\u5f53\u524d\u6240\u5728\u8282\u70b9\n\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\n\u6211\u4eec\u8981\u6c42\u8fd9\u4e2a\u4e32\u662f\u7ed9\u51fa\u7684\u4e24\u4e2a\u4e32\u7684\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u7136\u540e\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u7684\u88f8\u9898\uff0c\u53ea\u9700\u8981\u5efa\u51fa\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u7136\u540e\u5728\u81ea\u52a8\u673a\u4e0a\u904d\u5386\u5373\u53ef\uff0c\u8bb0\u5f55\u5728\u4e24\u4e2a\u4e32\u4e0a\u5f53\u524d\u7684\u4f4d\u7f6e\u5c31\u597d\u4e86\n\n\u6240\u4ee5\u7efc\u4e0a\u6240\u8ff0\u8981\u8bb0\u5f55\u56db\u4e2a\u72b6\u6001\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u4e24\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u95ee\u9898\u7684\u4e24\u4e2a\u4e32\u7684\u51fa\u73b0\u4f4d\u7f6e\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e9b\u72b6\u6001\u4e4b\u95f4\u7684\u8f6c\u79fb\u50cf\u662f\u4e00\u4e2a\u62d3\u6251\u56fe\uff0c\u7136\u540e\u6700\u957f\u8def\u8f6c\u79fb\u5c31\u597d\u4e86\n\n\u7136\u540e\u53d1\u73b0\u72b6\u6001\u6570\u7528\u6570\u7ec4\u8bb0\u5f55\u4e0d\u4e0b\uff0c\u6240\u4ee5\u8981\u7528map\uff0c\u5177\u4f53\u72b6\u6001\u6570\u4e0d\u4f1a\u592a\u5927\uff08~~\u611f\u6027\u7406\u89e3~~\uff09\n\u590d\u6742\u5ea6\uff1aO(\u80fd\u8fc7)\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 1805;\n\nint n, m, k, ch[N][52], tot, fail[N], ed[N], ans;\nint tsx[305][52], tsy[305][52], l[N], lst[52];\nchar strx[305], stry[305], str[305];\n\nstruct node {\n\tint px, py, u, mask;\n\tnode(int cpx = 0, int cpy = 0, int cu = 0, int cmask = 0) {\n\t\tpx = cpx, py = cpy, u = cu, mask = cmask;\n\t}\n\tbool operator < (const node &c) const {\n\t\tif (px != c.px) return px < c.px;\n\t\tif (py != c.py) return py < c.py;\n\t\tif (u != c.u) return u < c.u;\n\t\treturn mask < c.mask;\n\t}\n};\nmap<node, int> stp; map<node, bool> inq;\n\nint Type(char c) {\n\tif (c >= 'a' && c <= 'z') return c - 'a';\n\treturn c - 'A' + 26;\n}\n\n#define SS ch[u][i]\nvoid BFS() {\n\tqueue<int> que; while (!que.empty()) que.pop();\n\tfor (int i = 0; i < 52; i++) if (ch[0][i]) que.push(ch[0][i]);\n\twhile (!que.empty()) {\n\t\tint u = que.front(); que.pop();\n\t\tfor (int i = 0; i < 52; i++)\n\t\t\tif (!SS) SS = ch[fail[u]][i];\n\t\t\telse que.push(SS), fail[SS] = ch[fail[u]][i], ed[SS] |= ed[fail[SS]];\n\t}\n}\n\nvoid DP() {\n\tqueue<node> que; while (!que.empty()) que.pop();\n\tstp[node(0, 0, 0, 0)] = 1; que.push(node(0, 0, 0, 0)), inq[node(0, 0, 0, 0)] = true;\n\twhile (!que.empty()) {\n\t\tnode now = que.front(); que.pop(); inq[now] = false;\n\t\tint ntp = stp[now];\n\t\tint px = now.px, py = now.py, u = now.u, mask = now.mask;\n\t\tif (mask == (1 << k) - 1) ans = max(ans, ntp);\n\t\tfor (int i = 0; i < 52; i++) {\n\t\t\tint nx = tsx[px][i], ny = tsy[py][i], v = ch[u][i], nsk = mask | ed[v];\n\t\t\tif (nx > n || ny > m) continue; node to = node(nx, ny, v, nsk);\n\t\t\tif (!stp[to] || stp[to] < ntp + 1) {\n\t\t\t\tstp[to] = ntp + 1;\n\t\t\t\tif (!inq[to]) que.push(to);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tn = read(); m = read(); k = read();\n\tfor (int i = 1; i <= k; i++) l[i] = read();\n\tscanf(\"%s\", strx + 1), scanf(\"%s\", stry + 1);\n\tfor (int i = 0; i < 52; i++) lst[i] = n + 1;\n\tfor (int i = n; i >= 0; i--) {\n\t\tfor (int j = 0; j < 52; j++) tsx[i][j] = lst[j];\n\t\tlst[Type(strx[i])] = i;\n\t}\n\tfor (int i = 0; i < 52; i++) lst[i] = m + 1;\n\tfor (int i = m; i >= 0; i--) {\n\t\tfor (int j = 0; j < 52; j++) tsy[i][j] = lst[j];\n\t\tlst[Type(stry[i])] = i;\n\t}\n\tfor (int i = 1; i <= k; i++) {\n\t\tscanf(\"%s\", str + 1); int u = 0;\n\t\tfor (int j = 1; j <= l[i]; j++) {\n\t\t\tint p = Type(str[j]);\n\t\t\tif (!ch[u][p]) ch[u][p] = ++tot;\n\t\t\tu = ch[u][p];\n\t\t}\n\t\ted[u] |= (1 << i - 1);\n\t}\n\tBFS(), DP();\n\tprintf(\"%d\\n\", ans - 1);\n\treturn 0;\n}\n```\n",
        "postTime": 1593921706,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4584 \u3010[FJOI2015]\u5e26\u5b50\u4e32\u5305\u542b\u7ea6\u675fLCS\u95ee\u9898\u3011"
    }
]