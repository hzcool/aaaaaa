[
    {
        "content": "## \u524d\u65b9\u9ad8\u80fd\u9884\u8b66\n## \u975e\u6218\u6597\u4eba\u5458\u8bf7\u9a6c\u4e0a\u64a4\u79bb QwQ\n## \u8fd9\u91cc\u662f\u5f53\u524d\n# \u4e0d\u7528\u7ed3\u6784\u4f53\u5185\u7f6e\u51fd\u6570\u6700\u901a\u4fd7\u6613\u61c2\n# \u7801\u98ce\u6700\u5177\u5f3a\u8feb\u75c7\n# \u6ce8\u91ca\u6700\u4e3a\u8be6\u7ec6\n# ~~\u6700\u53ef\u7231~~\uff08\u849f\u84bb&&\u840c\u65b0\u9884\u8b66\uff09\n## \u7684\u9898\u89e3\uff01\uff01\uff01\n\n\n\n------------\n\n\n## \u6b63\u6587\u5f00\u59cb\uff1a\n\n\n\u9996\u5148\n\n\u663e\u7136\u8fd9\u662f\u4e00\u9053\u6a21\u62df~~\uff08\u5e9f\u8bdd\uff09~~\n\n\u601d\u8def\u4e5f\u5f88\u5bb9\u6613\u60f3~~\uff08\u6309\u7167\u9898\u76ee\u8bf4\u5f97\u4e00\u6b65\u6b65\u5199\u5c31\u53ef\u4ee5\u6c34\u8fc7\u4e86\uff09~~\n\n\u751f\u6210\u8682\u8681-->\u91ca\u653e\u4fe1\u606f\u7d20-->\u8682\u8681\u79fb\u52a8-->\u68c0\u67e5\u86cb\u7cd5\u662f\u5426\u88ab\u83b7\u53d6-->\u70ae\u5854\u5f00\u706b-->\u6e05\u7406\u8682\u8681\u5c38\u4f53-->\u68c0\u67e5\u6e38\u620f\u662f\u5426\u7ed3\u675f-->\u8682\u8681\u751f\u957f-->\u4fe1\u606f\u7d20\u6d41\u901d\n\n\u4e4b\u6240\u4ee5\u8fd9\u6837\u5b50\u8bbe\u8ba1\u601d\u8def\u662f\u56e0\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u5751\u70b9\uff1a\n\n1.\u70ae\u5854\u662f\u5168\u4f53\u9009\u5b9a\u597d\u5404\u79cd\u7684\u76ee\u6807\u540e\u540c\u65f6\u5c04\u51fb\uff0c\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u4e00\u4e2a\u8682\u8681\u5728\u8fd9\u4e00\u79d2\u949f\u88ab\u5c04\u81f3\u8d1f\u8840\uff0c\u5176\u4f59\u70ae\u5854\u5f53\u524d\u4f9d\u65e7\u4f1a\u653b\u51fb\u5b83\uff08\u5982\u679c\u5b83\u4e4b\u524d\u88ab\u9009\u4e3a\u76ee\u6807\uff09\n\n2.\u8682\u8681\u88ab\u5361\u4f4f\u4e00\u6b21\u540e\u5c31**\u53ef\u4ee5\u8fd4\u56de**\u539f\u8def\n\n3.\u5224\u65ad\u4e00\u4e2a\u8682\u8681\u662f\u5426\u88ab\u6fc0\u5149\u51fb\u4e2d\u9700\u8981\u9ad8\u4e2d\u77e5\u8bc6\u6253**\u51e0\u4f55\u6a21\u677f**\n\n4.\u8682\u8681\u521d\u59cb\u5e74\u9f84\u662f**\u96f6**\n\n5.\u5f53\u8682\u8681\u5b58\u6d3b\u65f6\u95f4\u8fbe\u52305\u7684\u500d\u6570\u65f6\u7684\u4e0d\u6b63\u5e38\u8f6c\u5411\u662f\u6709\u5408\u6cd5\u7684\u9053\u8def\u5c31\u8d70\uff0c\u4f46**\u81f3\u5c11**\u8981\u5728\u627e\u5230\u539f\u6b63\u786e\u65b9\u6848\u7684\u60c5\u51b5\u4e0b\u9006\u65f6\u9488\u8f6c\u4e00\u6b21\n\n6.\u8682\u8681\u7684\u521d\u59cb\u8840\u91cf\u8981\u7528**\u6d6e\u70b9\u6570**\u8bb0\u5f55\uff0c\u56e0\u4e3a\u86cb\u7cd5\u56de\u8840\u65f6\u662f\u521d\u59cb\u8840\u91cf\u96642\u624d\u5411\u4e0b\u53d6\u6574\n\n7.\u70ae\u5854**\u53ef\u4ee5\u4e0d\u5f00\u706b**\uff0c\u6fc0\u5149**\u4e0d\u4f1a\u900f\u8fc7\u5176\u76ee\u6807**\n\n8.\u751f\u6210\u8682\u8681\u7684\u6761\u4ef6\u4e4b\u4e00\u662f**\u8682\u8681\u7a9d\u4e0a\u4e0d\u80fd\u6709\u8682\u8681**\n\n9.\u67d0\u4e2a\u8682\u8681\u8840\u91cf\u4e3a\u8d1f\u4e14\u5f53\u524d\u5904\u4e8e\u7684\u4f4d\u7f6e\u88ab\u5360\u7528**\u4e0d\u4ee3\u8868**\u5b83\u7684\u5c38\u4f53\u6ca1\u6709\u88ab\u5904\u7406\uff08\u6b7b\u4ea1\u6ca1\u6709\u88ab\u8bb0\u5f55\uff09\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u662f\u522b\u7684\u8682\u8681\u5728\u8be5\u70b9\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u505a\uff08bei\uff09\u9898(xue)\u4e86~\n\n\u5f88\u5feb\u4f60\u5c31\u4f1a\u53d1\u73b0\u4f60\u6210\u529f\u7684\u88ab\u6781\u9650\u6570\u636e\u5361\u4f4f **QwQ**\n\n\u8fd9\u91cc\u5c31\u63d0\u4f9b\u4e24\u4e2a\u5c0f\u4f18\u5316\n\n\u7b2c\u4e00\u4e2a\u662f~~\u663e\u800c\u6613\u89c1~~\u7684\uff1a\u5f53\u70ae\u5854\u7684\u653b\u51fb\u7684\u76ee\u6807\u4e0d\u662fTarget\u65f6\uff0c\u663e\u7136\u8be5\u76ee\u6807\u662f\u79bb\u70ae\u5854\u6700\u8fd1\u7684\uff0c\u800c\u70ae\u5854\u5bf9\u5176\u7684\u6fc0\u5149\u653b\u51fb\u5c31\u663e\u7136\u4e0d\u80fd\u6ce2\u53ca\u5176\u4ed6\u8682\u8681\uff0c\u5426\u5219\u5176\u5c31\u4e0d\u662f\u6700\u8fd1\u76ee\u6807\n\n\u7b2c\u4e8c\u4e2a\u662f\u672c\u541b**\u4e0d\u540c\u4e8e\u4e0a\u8ff0\u4e24\u4e2a\u9898\u89e3**\u7684~~\u5f3a\u529b\u53c8\u6613\u61c2\u7684~~\u4f18\u5316\u64cd\u4f5c\uff08\u524d\u65b9\u849f\u84bb\u9884\u8b66\uff09\n\n\u5148\u6765\u770b\u4e00\u7ec4\u6781\u9650\u6570\u636e\uff1a\n\nn=8 m=8\n\ns=1 d=200000 r=9\n\nx=1 y=1\n\nt=200000\n\n\u5373\u4ec5\u6709\u4e00\u4e2a\u653b\u51fb\u529b\u65e0\u7a77\u5927\u7684\u70ae\u53f0\u4e8e\u8682\u8681\u7a9d\u65c1\u8fb9\uff0c\u65f6\u95f4\u4e3a200000\u79d2\n\n\u6b64\u65f6\u8682\u8681\u4e00\u51fa\u6765\u5c31\u88ab\u6740\u6b7b\uff0c\u4ee5\u81f3\u4e8e\u8682\u8681\u7a9d\u4e00\u76f4\u751f\u4ea7\u8682\u8681\n\n\u5982\u679c\u4f60\u5bf9\u8682\u8681\u8fdb\u884c\u7684\u64cd\u4f5c\uff08\u7559\u4e0b\u4fe1\u606f\u7d20\u3001\u751f\u957f\u3001\u79fb\u52a8\u7b49\uff09\u90fd\u662f\u679a\u4e3e\u5168\u90e8\u7684\u8682\u8681\u7136\u540e\u5224\u65ad\u6d3b\u7740\u518d\u5bf9\u5176\u64cd\u4f5c\uff0c\u6bcf\u6b21\u76f8\u5173\u64cd\u4f5c\u663e\u7136\u4f1a\u8d85\u65f6\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u50cf\u4e4b\u524d\u7684\u4e24\u7bc7\u9898\u89e3\u4e00\u6837\u7ef4\u62a4\u4e00\u4e2a\u4ec5\u5b58\u6709\u6d3b\u7740\u7684\u8682\u8681\u7684\u6570\u7ec4\n\n**\u4e5f\u53ef\u4ee5**\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cflast\u8bb0\u5f55\u7b2c\u4e00\u53ea\u6d3b\u7740\u7684\u8682\u8681\u7684\u7f16\u53f7\uff0c\u4ee5\u540e\u6bcf\u6b21\u679a\u4e3e\u90fd\u4ece\u5b83\u5f00\u59cb\uff0c\u5f53\u7136\u8fd9\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4f46\u662f\u8fd9\u662f\u6700\u5bb9\u6613\u7684\u60f3\u5230\u7684\uff0c\u65e2\u7136\u4e4b\u524d\u7684\u8682\u8681\u90fd\u6b7b\u4e86\u5c31\u6ca1\u6709\u5fc5\u8981\u4ece\u5934\u679a\u4e3e\uff0c\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u5927\u964d\u4f4e~~\uff08\u5f53\u7136\u4f9d\u65e7\u53ef\u4ee5\u88ab\u6781\u4e3a\u5201\u94bb\u7684\u624b\u9020200000\u6570\u636e\u5361\u6b7b\uff09\n\n\u4ee3\u7801\u89c1\u4e0b\uff08\u51e0\u4e4e\u6bcf\u4e00\u884c\u90fd\u6709\u6ce8\u91ca\uff0c\u4e00\u5b9a\u8981\u6109\u5feb\u7684AC\u54df~~~\u7136\u540e\u628a\u8fd9\u9053\u9898\u8bc4\u4e3a\u9ed1\u8272~~\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<ctime>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define N 1001003\n#define inf 0x3fffffff\n#define eps 1e-10\nusing namespace std;\n\nll inline read()//\u5feb\u8bfb \n{\n\tll ret=0;\n\tchar ch=getchar();\n\tint f=1;\n\t\n\twhile(!isdigit(ch) && ch!='-')\n\tch=getchar();\n\t\n\tif(ch=='-')\n\t{\n\t\tf=-1;\n\t\tch=getchar();\n\t}\n\t\n\twhile(isdigit(ch))\n\t{\n\t\tret=(ret<<1)+(ret<<3)+(ch^48);\n\t\tch=getchar(); \n\t}\n\t\n\treturn ret*f;\n}\n\n//Math\uff08\u51e0\u4f55\u6a21\u677f\uff09\uff08\u9ad8\u4e2d\u5411\u91cf QAQ\uff09 \n\nstruct Point\n{\n\tdouble x;\n\tdouble y;\n};\n\nPoint inline TurnPoint(double x,double y)\n{\n\tPoint NewPoint;\n\t\n\tNewPoint.x=x;\n\tNewPoint.y=y;\n\t\n\treturn NewPoint;\n}\n\nPoint operator + (Point A,Point B)\n{\n\tPoint NewPoint=TurnPoint(A.x+B.x,A.y+B.y);\n\t\n\treturn NewPoint;\n}\n\nPoint operator - (Point A,Point B)\n{\n\tPoint NewPoint=TurnPoint(A.x-B.x,A.y-B.y);\n\t\n\treturn NewPoint;\n}\n\nint inline DoublePositive(double x)\n{\n\tif( fabs(x)<eps )\n\treturn 0;\n\t\n\tif(x<0)\n\treturn -1;\n\treturn 1;\n}\n\ndouble inline Dot(Point A,Point B)\n{\n\tdouble sum=A.x*B.x+A.y*B.y;\n\t\n\treturn sum;\n}\n\ndouble inline Length(Point A)\n{\n\tdouble sum=sqrt( Dot(A,A) );\n\t\n\treturn sum;\n}\n\ndouble inline Cross(Point A,Point B)\n{\n\tdouble sum=A.x*B.y-A.y*B.x;\n\t\n\treturn sum;\n}\n\ndouble inline GetSlope(Point A)\n{\n\tdouble sum=A.y/A.x;\n\t\n\treturn sum;\n}\n\ndouble inline GetPointDistantToSegment(Point P,Point A,Point B)\n{\n\tPoint Vector_1=B-A;\n\tPoint Vector_2=P-A;\n\tPoint Vector_3=P-B;\n\t\n\tif( DoublePositive( Dot(Vector_1,Vector_2) )<0 )\n\treturn Length(Vector_2);\n\t\n\tif( DoublePositive( Dot(Vector_1,Vector_3) )>0 )\n\treturn Length(Vector_3);\n\t\n\treturn fabs( Cross(Vector_1,Vector_2) / Length(Vector_1) );\n}\n\n//\u6570\u5b66\u6bd4NOI\u8fd8\u8981\u4f7f\u6211\u8131\u53d1 QAQ\n\nint last=1;//\u539f\u521b\u91cd\u8981\u4f18\u5316 \u8868\u793a\u7b2c\u4e00\u53ea\u6d3b\u7740\u7684\u8682\u8681 \n\nint n,m;//\u5730\u56fe\u7684\u957f\u548c\u5bbd \n\nstruct Map//\u5730\u56fe \n{\n\tint InformationSum;//\u5730\u56fe\u4e0a\u67d0\u70b9\u7684\u4fe1\u606f\u7d20 \n\tbool used;//\u5730\u56fe\u4e0a\u67d0\u70b9\u6709\u6ca1\u6709\u88ab\u5360\u7528 \n};\nMap g[25][25];//\u5730\u56fe\u6570\u7ec4 \n\nint EndTime;//\u7ed3\u675f\u65f6\u95f4 \n\nbool GameWin=false;//\u6e38\u620f\u662f\u5426\u7ed3\u675f \nbool CakeFly=false;//\u86cb\u7cd5\u6709\u6ca1\u6709\u4e0d\u7ffc\u800c\u98de QwQ\n\nint TurretSum;//\u70ae\u5854\u6570 \nint TurretRadius;//\u70ae\u5854\u653b\u51fb\u8303\u56f4 \nint TurretDamage;//\u70ae\u5854\u4f24\u5bb3 \nint Target;//\u70ae\u5854\u9996\u9009\u76ee\u6807\uff08\u62ff\u86cb\u7cd5\u7684\u54e5\u4eec\u7f16\u53f7 @w@ \uff09 \n\nstruct Turret//\u70ae\u5854 \n{\n\tint goal;//\u70ae\u5854\u76ee\u6807 \n\tint x;\n\tint y;\n};\nTurret t[25];//\u70ae\u5854\u6570\u7ec4 \n\nint BornAntSum=0;//\u751f\u51fa\u7684\u8682\u8681\u603b\u6570 \nint NowAntSum=0;//\u73b0\u5728\u5b58\u6d3b\u7684\u8682\u8681\u6570 \nconst double AntSize=0.5;//\u8682\u8681\u7684\u5c3a\u5bf8\uff08\u5360\u5730\u534a\u5f84\uff09 \n\nstruct Ant//\u8682\u8681 \n{\n\tint x;//\u5f53\u524d\u6240\u5728\u5750\u6807 \n\tint y;\n\tint old;//\u5e74\u9f84 \n\tint level;//\u7b49\u7ea7 \n\tint health;//\u8840\u91cf \n\tdouble BornHealth;//\u521d\u59cb\u8840\u91cf \n\tint x_from;//\u4e0a\u4e00\u79d2\u6240\u5728\u5750\u6807 \n\tint y_from;\n\tbool get;//\u662f\u5426\u83b7\u5f97\u86cb\u7cd5 \n\tbool dead;//\u662f\u5426\u6b7b\u4ea1 \n};\nAnt a[300000];\n\nvoid AntBorn()//\u8682\u8681\u7684\u51fa\u751f \n{\n\tif(NowAntSum>=6)//\u573a\u4e0a\u8682\u8681\u6570\u4e0d\u5f97\u8d85\u8fc76 \n\treturn ;\n\t\n\tif(g[0][0].used)//\u8682\u8681\u7a9d\u4e0d\u5f97\u6709\u8682\u8681 \n\treturn ;\n\t\n\tBornAntSum++;//\u751f\u51fa\u7684\u8682\u8681\u6570++ \n\tNowAntSum++;//\u5f53\u524d\u5b58\u6d3b\u7684\u8682\u8681\u6570++ \n\t\n\ta[BornAntSum].x=0;//\u521d\u59cb\u5750\u6807\u4e3a\u8681\u7a9d \n\ta[BornAntSum].y=0;\n\ta[BornAntSum].x_from=99;//\u6765\u7740\u5730\u72f1\uff08\u65e0\u7a77\u8fdc QwQ\uff09 \n\ta[BornAntSum].y_from=99;\n\t\n\tg[0][0].used=true;//\u8681\u7a9d\u5df2\u88ab\u5360\u636e \n\t\n\ta[BornAntSum].old=0;//\u521d\u59cb\u65f6\u4e3a\u96f6\u5c81 \n\ta[BornAntSum].level=( (BornAntSum-1)/6 )+1;//\u7b49\u7ea7\u4e3a\u4e4b\u524d\u751f\u6210\u7684\u8682\u8681\u6570/6 +1 \n\ta[BornAntSum].get=false;//\u521d\u59cb\u6ca1\u6709\u86cb\u7cd5 \n\ta[BornAntSum].dead=false;//\u521d\u59cb\u6ca1\u6b7b QwQ \n\t\n\tdouble Health=floor(4*pow(1.1,a[BornAntSum].level));//\u521d\u59cb\u8840\u91cf\u8ba1\u7b97 \n\t\n\ta[BornAntSum].health=(int)Health;//\u8840\u91cf\u53d6\u6574 \n\ta[BornAntSum].BornHealth=Health;//\u521d\u59cb\u8840\u91cf\u8bb0\u5f55 \n\t\n\treturn ;\n}\n\nvoid inline ReleaseInformation()//\u91ca\u653e\u4fe1\u606f\u7d20 \n{\n\tfor(int i=last;i<=BornAntSum;i++)//\u4ece\u7b2c\u4e00\u53ea\u6d3b\u7740\u7684\u8682\u8681\u5f00\u59cb\u679a\u4e3e \n\t{\n\t\tif(a[i].dead)//\u6b7b\u8682\u8681\u8df3\u8fc7 \n\t\tcontinue;\n\t\t\n\t\tif(!a[i].get)\n\t\tg[ a[i].x ][ a[i].y ].InformationSum+=2;//\u6ca1\u86cb\u7cd5\u653e2\u70b9 \n\t\telse\n\t\tg[ a[i].x ][ a[i].y ].InformationSum+=5;//\u6709\u86cb\u7cd5\u653e5\u70b9 \n\t}\n\t\n\treturn ;\n}\n\nconst int dx[4]={0,1,0,-1};//\u65b9\u5411\u6570\u7ec4 \nconst int dy[4]={1,0,-1,0};//\u4e1c\u5357\u897f\u5317 \n\nbool inline CheakPoint(int x,int y)//\u68c0\u67e5\u4e00\u4e2a\u70b9\u80fd\u5426\u653e\u8682\u8681 \n{\n\t//\u56db\u79cd\u51fa\u754c\u60c5\u51b5 \n\tif(x<0)\n\treturn false;\n\t\n\tif(x>n)\n\treturn false;\n\t\n\tif(y<0)\n\treturn false;\n\t\n\tif(y>m)\n\treturn false;\n\t\n\t//\u88ab\u5360\u7528\u7684\u60c5\u51b5 \n\tif(g[x][y].used)\n\treturn false;\n\t\n\treturn true;\n}\n\nvoid inline AntMove()//\u8682\u8681\u79fb\u52a8 \n{\n\tfor(int i=last;i<=BornAntSum;i++)//\u540c\u6837\u4ece\u7b2c\u4e00\u53ea\u6d3b\u7740\u7684\u8682\u8681\u5f00\u59cb\u679a\u4e3e \n\t{\n\t\tif(a[i].dead)//\u6b7b\u8682\u8681\u8df3\u8fc7 \n\t\tcontinue;\n\t\t\n\t\tint MaxInformation=-1;//\u80fd\u8d70\u7684\u65b9\u5411\u4e0a\u6700\u591a\u7684\u4fe1\u606f\u7d20 \n\t\tint NowDirection=-1;//\u4e0d\u6b63\u5e38\u8f6c\u5411\u540e\u7684\u65b9\u5411\uff08\u6d3b\u52a8\u65f6\u95f4\u4e3a5\u7684\u500d\u6570\uff09 \n\t\tint direction=-1;//\u6b63\u5e38\u60c5\u51b5\u7684\u65b9\u5411 \n\t\tint nowx;//\u8981\u53bb\u7684\u5750\u6807 \n\t\tint nowy;\n\t\tint nowd;//\u8981\u8d70\u7684\u65b9\u5411 \n\t\t\n\t\tfor(int j=0;j<4;j++)//\u56db\u65b9\u5411\u679a\u4e3e \n\t\t{\t\n\t\t\tnowx=a[i].x+dx[j];//\u8981\u53bb\u7684\u5750\u6807\u66f4\u65b0 \n\t\t\tnowy=a[i].y+dy[j];\n\n\t\t\tif(!CheakPoint(nowx,nowy)) \n\t\t\tcontinue;//\u68c0\u67e5\u80fd\u5426\u53bb\n\t\t\t\n\t\t\tif(nowx==a[i].x_from && nowy==a[i].y_from)\n\t\t\tcontinue;//\u68c0\u67e5\u662f\u5426\u4ece\u8981\u53bb\u7684\u70b9\u6765 \n\t\t\t\n\t\t\tif(MaxInformation<g[nowx][nowy].InformationSum)\n\t\t\t{\n\t\t\t\tMaxInformation=g[nowx][nowy].InformationSum;\n\t\t\t\tdirection=j;//\u80fd\u8d70\u5c31\u5c1d\u8bd5\u66f4\u65b0\u6700\u591a\u4fe1\u606f\u6570\u4e0e\u65b9\u5411 \n\t\t\t} \n\t\t}\n\n\t\tif( (a[i].old+1)%5==0 && direction!=-1 )//\u81f3\u5c11\u539f\u5148\u8981\u6709\u65b9\u5411\u53ef\u8d70 \n\t\t{\n\t\t\tMaxInformation=-1;//\u5f53\u8682\u8681\u5b58\u6d3b\u79d2\u6570\u4e3a5\u7684\u500d\u6570\u5c31\u5f00\u59cb\u6d6a~ \n\t\t\tNowDirection=-1;//\u65b0\u65b9\u5411 \n\t\t\t\n\t\t\tfor(int j=1;j<=4;j++)//\u4ee5\u539f\u65b9\u5411\u4e3a\u57fa\u51c6\u9006\u65f6\u9488\u65cb\u8f6c \n\t\t\t{\n\t\t\t\tnowd=(direction-j)%4;\n\t\t\t\t\n\t\t\t\tif(nowd<0)//\u6ce8\u610f\u8f6c\u4e86\u4e00\u5708\u7684\u60c5\u51b5 \n\t\t\t\tnowd+=4;\n\t\t\t\t\n\t\t\t\tnowx=a[i].x+dx[nowd];//\u540c\u6837\u5e94\u53bb\u7684\u5750\u6807 \n\t\t\t\tnowy=a[i].y+dy[nowd];\n\t\t\t\t\n\t\t\t\tif(!CheakPoint(nowx,nowy))\n\t\t\t\tcontinue;//\u540c\u6837\u68c0\u67e5\u662f\u5426\u80fd\u8d70 \n\t\t\t\t\n\t\t\t\tif(nowx==a[i].x_from && nowy==a[i].y_from)\n\t\t\t\tcontinue;//\u540c\u4e0a\u68c0\u67e5\u662f\u5426\u4ece\u8be5\u70b9\u6765 \n\t\t\t\t\n\t\t\t\tif(MaxInformation<g[nowx][nowy].InformationSum)\n\t\t\t\t{\n\t\t\t\t\tMaxInformation=g[nowx][nowy].InformationSum;\n\t\t\t\t\tNowDirection=nowd;//\u540c\u6837\u66f4\u65b0\u65b9\u5411\u548c\u6700\u5927\u4fe1\u606f\u7d20 \n\t\t\t\t\t//\u4e8b\u5b9e\u4e0a\u6700\u5927\u4fe1\u606f\u7d20\u7684\u66f4\u65b0\u6ca1\u591a\u5c11\u7528\uff08\u53ea\u662f\u5224\u65ad\u8be5\u8682\u8681\u80fd\u5426\u79fb\u52a8\uff09 \n\t\t\t\t\tbreak;//\u8f6c\u540e\u4e00\u6709\u5408\u6cd5\u7684\u65b9\u5411\u5c31\u51fa\u53d1 \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\ta[i].x_from=a[i].x;//\u4e0a\u4e00\u79d2\u5728\u7684\u5750\u6807\u66f4\u65b0 \n\t\ta[i].y_from=a[i].y;//\u66f4\u65b0\u540e\u8682\u8681\u5c31\u6ca1\u6709\u4e0d\u80fd\u8fd4\u56de\uff08\u5f53\u524d\uff09\u539f\u8def\u7684\u9650\u5236\u4e86 \n\t\t\n\t\tif(MaxInformation==-1)\n\t\tcontinue;//\u6700\u5927\u4fe1\u606f\u7d20\u6ca1\u6709\u88ab\u66f4\u65b0\u8bf4\u660e\u6ca1\u6709\u70b9\u53ef\u4ee5\u8d70 \n\t\t\n\t\tif( (a[i].old+1)%5==0 )//\u53db\u9006\u671f QwQ \n\t\t{\n\t\t\ta[i].x+=dx[NowDirection];//\u7acb\u5373\u8d70\u81f3\u8be5\u70b9 \n\t\t\ta[i].y+=dy[NowDirection];\n\t\t\t\n\t\t\tg[ a[i].x_from ][ a[i].y_from ].used=false;\n\t\t\tg[ a[i].x ][ a[i].y ].used=true;//\u6ce8\u610f\u5360\u7528\u7684\u70b9\u8981\u6539\u53d8 \n\t\t}\n\t\telse//\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e00\u6837 \n\t\t{\n\t\t\ta[i].x+=dx[direction];\n\t\t\ta[i].y+=dy[direction];\n\t\t\t\n\t\t\tg[ a[i].x_from ][ a[i].y_from ].used=false;\n\t\t\tg[ a[i].x ][ a[i].y ].used=true;\n\t\t}\n\t}\n\t\n\treturn ;\n}\n \nvoid inline CheakCake()//\u68c0\u67e5\u662f\u5426\u6709\u8682\u8681\u80fd\u62ff\u8d70\u86cb\u7cd5 \n{\n\tif(CakeFly)//\u5982\u679c\u86cb\u7cd5\u65e9\u5c31\u5df2\u7ecf\u88ab\u62ff\u8d70\u5219\u8fd4\u56de \n\treturn ;\n\t\n\tfor(int i=last;i<=BornAntSum;i++)//\u679a\u4e3e\u6d3b\u7740\u7684\u8682\u8681 \n\t{\n\t\tif(a[i].dead)//\u540c\u4e0a \n\t\tcontinue;\n\t\t \n\t\tif(a[i].x==n && a[i].y==m)//\u5982\u679c\u5230\u8fbe\u4e86\u6709\u86cb\u7cd5\u7684\u70b9 \n\t\t{\n\t\t\tTarget=i;//\u6210\u4e3a\u8fc7\u8857\u8001\u9f20 QwQ \n\t\t\t\n\t\t\tCakeFly=true;//\u524d\u9762\u5df2\u4fdd\u8bc1\u86cb\u7cd5\u5728\u8be5\u70b9 \n\t\t\ta[i].get=true;//\u8682\u8681\u83b7\u5f97\u86cb\u7cd5 \n\t\t\t\n\t\t\ta[i].health+=(int)(a[i].BornHealth/2);//\u5077\u5403\u86cb\u7cd5\u56de\u8840 \n\t\t\ta[i].health=min((int)a[i].BornHealth,a[i].health);//\u6ce8\u610f\u8840\u91cf\u4e0d\u8d85\u4e0a\u9650 \n\n\t\t\treturn ;\n\t\t}\n\t}\n\t\n\treturn ;\n}\n\ndouble inline GetDistant(int x1,int y1,int x2,int y2)//\u4e24\u70b9\u8ddd\u79bb\u516c\u5f0f \n{\n\tint Sum=( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) );\n\t\n\treturn sqrt( (double)Sum );\n}\n \nvoid inline FireAnt()//\u4e8c\u8425\u957f\u7684\u610f\u5927\u5229\u70ae\u9884\u5907\u5f00\u706b QwQ \n{\n\tfor(int i=1;i<=TurretSum;i++)//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70ae\u5854 \n\t{\n\t\tdouble TargetDistant=GetDistant(t[i].x,t[i].y,a[Target].x,a[Target].y);//\u70ae\u5854\u4e0e\u9996\u9009\u76ee\u6807\u7684\u8ddd\u79bb \n\t\t//\u5982\u679c\u6ca1\u6709\u9996\u9009\u76ee\u6807\u6216\u8005\u79bb\u9996\u9009\u76ee\u6807\u592a\u8fdc\u5c31\u6b63\u5e38\u6253\u6700\u8fd1\u7684\u8682\u8681 \n\t\tif(!CakeFly || TargetDistant-(double)TurretRadius>eps)//\u6ce8\u610f\u5b9e\u6570\u57df\u7684\u8ba1\u7b97\u8981\u4e0e\u6781\u5c0f\u503c\u6bd4\u8f83 \n\t\t{\n\t\t\tdouble GoalDistant;//\u70ae\u5854\u4e0e\u5f53\u524d\u76ee\u6807\u7684\u8ddd\u79bb \n\t\t\tdouble MinDistant=inf;//\u79bb\u70ae\u5854\u6700\u8fd1\u7684\u8682\u8681\u4e0e\u70ae\u5854\u7684\u8ddd\u79bb \n\t\t\t\n\t\t\tfor(int j=last;j<=BornAntSum;j++)//\u540c\u6837\u679a\u4e3e\u5b58\u6d3b\u7684\u8682\u8681 \n\t\t\t{\t\n\t\t\t\tif(a[j].dead)//\u540c\u4e0a \n\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\t//\u4e0e\u5f53\u524d\u8682\u8681\u7684\u8ddd\u79bb\u8ba1\u7b97 \n\t\t\t\tGoalDistant=GetDistant(t[i].x,t[i].y,a[j].x,a[j].y);\n\t\t\t\t\n\t\t\t\tif(GoalDistant<MinDistant)//\u67e5\u770b\u80fd\u5426\u66f4\u65b0\u6700\u8fd1\u8ddd\u79bb \n\t\t\t\t{\n\t\t\t\t\tMinDistant=GoalDistant;\n\t\t\t\t\tt[i].goal=j;//\u66f4\u65b0\u6700\u8fd1\u8682\u8681\u4f5c\u76ee\u6807 \n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(MinDistant-(double)TurretRadius>eps)\n\t\t\t{\n\t\t\t\t//\u5982\u679c\u6700\u8fd1\u8ddd\u79bb\u90fd\u4e0d\u80fd\u6ee1\u8db3\u5c31\u8fd4\u56de \n\t\t\t\tt[i].goal=0;\n\t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t//\u653b\u51fb\u6700\u8fd1\u76ee\u6807 \n\t\t\ta[ t[i].goal ].health-=TurretDamage;\n\t\t}\n\t\telse//\u5982\u679c\u5b58\u5728\u9996\u9009\u76ee\u6807\u4e14\u80fd\u6253\u5230 \n\t\t{\n\t\t\tt[i].goal=Target;//\u76ee\u6807\u4e3a\u9996\u9009\u76ee\u6807 \n\t\t\t\n\t\t\tPoint A=TurnPoint(a[ t[i].goal ].x,a[ t[i].goal ].y);\n\t\t\tPoint B=TurnPoint(t[i].x,t[i].y);//\u5411\u91cf\u9884\u5907 \n\t\t\t\n\t\t\tfor(int j=last;j<=BornAntSum;j++)//\u679a\u4e3e\u6d3b\u7740\u7684\u8682\u8681 \n\t\t\t{\n\t\t\t\tif(a[j].dead)//\uff08\u6d3b\u7740\u7684\u76ee\u6807\u90fd\u6709\u53ef\u80fd\u88ab\u6ce2\u53ca\uff09 \n\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\tif(a[j].get)//\u5982\u679c\u662f\u9996\u9009\u7684\u76ee\u6807\u5c31\u76f4\u63a5\u6253\u51fb \n\t\t\t\t{\n\t\t\t\t\ta[j].health-=TurretDamage;\n\t\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tPoint P=TurnPoint(a[j].x,a[j].y);//\u70b9\u9884\u5907 \n\t\t\t\t\n\t\t\t\tdouble NotGoalDistant=GetPointDistantToSegment(P,A,B);//\u70b9\u4e0e\u76f4\u7ebf\u7684\u8ddd\u79bb \n\t\t\t\t\n\t\t\t\tif(NotGoalDistant-AntSize<eps)//\u5982\u679c\u80fd\u88ab\u6fc0\u5149\u6ce2\u53ca\u5230\u5c31\u51cf\u8840 \n\t\t\t\ta[j].health-=TurretDamage;\n\t\t\t\t\n\t\t\t}\n\t\t}\t\t\t\n\t}\n}\n\nvoid inline ClearBulletField()//\u6e05\u7406\u6218\u573a \n{\n\tfor(int i=last;i<=BornAntSum;i++)//\u679a\u4e3e\u53ef\u80fd\u6b7b\u6389\u7684\u8682\u8681 \n\t{\n\t\tif(a[i].health>=0)//\u8be5\u8682\u8681\u5f53\u524d\u8840\u91cf\u5e94\u8be5<0 \n\t\tcontinue;\n\t\t\n\t\tif(!g[ a[i].x ][ a[i].y ].used)//\u5f53\u524d\u5e94\u8be5\u5360\u7528\u4e00\u4e2a\u70b9 \n\t\tcontinue;\n\t\t\n\t\tif(a[i].dead)//\u5f53\u524d\u5e94\u8be5\u6ca1\u89c6\u4f5c\u6b7b\u4ea1 \n\t\tcontinue;\n\t\t\n\t\tNowAntSum--;//\u5b58\u6d3b\u8682\u8681\u6570-- \n\t\tg[ a[i].x ][ a[i].y ].used=false;//\u4e0d\u5360\u7528\u7a7a\u95f4\uff08\u5904\u7406\u5c38\u4f53\uff09 \n\t\t\n\t\ta[i].x=99;//\u6eda\u53bb\u5730\u72f1  \n\t\ta[i].y=99;//QwQ \n\t\ta[i].dead=true;//\u786e\u8ba4\u6b7b\u4ea1 \n\t\t\n\t\tif(a[i].get)//\u5982\u679c\u6709\u86cb\u7cd5 \n\t\t{\n\t\t\tCakeFly=false;//\u628a\u86cb\u7cd5\u653e\u56de\u53bb \n\t\t\tTarget=0;//\u9996\u9009\u76ee\u6807\u6b7b\u4ea1 \n\t\t}\n\n\t}\n}\n\nvoid inline CheakGameContinue()//\u68c0\u67e5\u6e38\u620f\u662f\u5426\u7ee7\u7eed \n{\n\tif(!CakeFly)//\u86cb\u7cd5\u6ca1\u6709\u88ab\u62ff\u8d70\u5219\u7ee7\u7eed \n\treturn ;\n\t\n\tfor(int i=last;i<=BornAntSum;i++)//\u679a\u4e3e\u53ef\u80fd\u5e26\u86cb\u7cd5\u56de\u8681\u7a9d\u7684\u8682\u8681 \n\t{\n\t\tif(a[i].dead)//\u9996\u5148\u5b83\u5e94\u8be5\u662f\u6d3b\u7740\u7684 \n\t\tcontinue;\n\t\t\n\t\tif(a[i].x || a[i].y)//\u800c\u4e14\u5b83\u5750\u6807\u5e94\u8be5\u4e3a\uff080,0\uff09 \n\t\tcontinue;\n\t\t\n\t\tif(!a[i].get)//\u800c\u4e14\u5b83\u8981\u6709\u86cb\u7cd5 \n\t\tcontinue;\n\t\t\n\t\tGameWin=true;//\u6e38\u620f\u80dc\u5229 \n\n\t\tbreak;\n\t}\n\t\n\treturn ;\n}\n\nvoid inline AntGrow()//\u8682\u8681\u957f\u5927 \n{\n\tfor(int i=last;i<=BornAntSum;i++)//\u9996\u5148\u4f9d\u7136\u5f97\u6d3b\u7740 \n\t{\n\t\tif(a[i].dead)//\u540c\u4e0a \n\t\tcontinue;\n\t\t\n\t\ta[i].old++;//\u957f\u5927 \n\t}\n\t\n\treturn ;\n}\n\nvoid inline InformationGone()//\u4fe1\u606f\u7d20\u6d88\u5931 \n{\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<=m;j++)\n\t\t{\n\t\t\tif(g[i][j].InformationSum)//\u6ce8\u610f\u8981\u6709\u4fe1\u606f\u7d20 \n\t\t\tg[i][j].InformationSum--;\n\t\t}\n\t}\n\t\n\treturn ;\n}\n \nvoid inline Enter()//\u8f93\u5165 \n{\n\tn=read();//\u8bfb\u5165\u5730\u56fe\u5927\u5c0f \n\tm=read();\n\t\n\tTurretSum=read();//\u8bfb\u5165\u70ae\u5854\u76f8\u5173\u4fe1\u606f \n\tTurretDamage=read();\n\tTurretRadius=read();\n\t\n\tfor(int i=1;i<=TurretSum;i++)//\u8bfb\u5165\u70ae\u5854 \n\t{\n\t\tt[i].x=read();\n\t\tt[i].y=read();\n\t\t//\u8bb0\u5f97\u70ae\u5854\u4e5f\u8981\u5360\u4e00\u4e2a\u70b9 \n\t\tg[ t[i].x ][ t[i].y ].used=true;\n\t}\n\t\n\tEndTime=read();//\u8bfb\u5165\u7ed3\u675f\u65f6\u95f4 \n\t\n\treturn ;\n}\n\nvoid inline Work()//\u5de5\u4f5c \n{\n\tfor(int Time=1;Time<=EndTime;Time++)//\u65f6\u5149\u98de\u901d \n\t{\n\t\tAntBorn();//\u8682\u8681\u51fa\u751f \n\n\t\tReleaseInformation();//\u91ca\u653e\u4fe1\u606f\u7d20 \n\n\t\tAntMove();//\u8682\u8681\u8dd1\u8def \n\n\t\tCheakCake();//\u68c0\u67e5\u662f\u5426\u6709\u8682\u8681\u80fd\u62ff\u5230\u86cb\u7cd5 \n\n\t\tFireAnt();//\u5f00\u706b \n\t\t\n\t\tClearBulletField();//\u6e05\u7406\u6218\u573a \n\t\t\n\t\tCheakGameContinue();//\u68c0\u67e5\u6e38\u620f\u662f\u5426\u80fd\u7ee7\u7eed \n\t\t\n\t\tif(GameWin)//\u5982\u679c\u8682\u8681\u5df2\u7ecf\u83b7\u80dc \n\t\t{\n\t\t\tprintf(\"Game over after %d seconds\\n\",Time);\n\t\t\t\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tAntGrow();//\u8682\u8681\u751f\u957f \n\t\t\n\t\tInformationGone();//\u4fe1\u606f\u7d20\u6d41\u901d \n\t\t\n\t\tfor(int i=last;i<=BornAntSum;i++)//\u66f4\u65b0\u7b2c\u4e00\u53ea\u5b58\u6d3b\u7684\u8682\u8681 \n\t\t{\n\t\t\tif(a[i].dead)\n\t\t\tcontinue;\n\t\t\telse\n\t\t\t{\n\t\t\t\tlast=i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn ;\n}\n\nvoid inline Output()\n{\n\tif(!GameWin)//\u5982\u679c\u8682\u8681\u6ca1\u6709\u83b7\u80dc \n\tprintf(\"The game is going on\\n\");\n\t\n\tprintf(\"%d\\n\",NowAntSum);//\u8f93\u51fa\u5b58\u6d3b\u7684\u8682\u8681\u6570 \n\t\n\tfor(int i=last;i<=BornAntSum;i++)//\u8f93\u51fa\u76f8\u5173\u4fe1\u606f \n\t{\n\t\tif(a[i].dead)//\u9996\u5148\u8682\u8681\u5e94\u8be5\u662f\u6d3b\u7740\u7684 \n\t\tcontinue;\n\t\t\n\t\tprintf(\"%d \",a[i].old);//\u8f93\u51fa\u5e74\u9f84 \n\t\tprintf(\"%d \",a[i].level);//\u8f93\u51fa\u7b49\u7ea7 \n\t\tprintf(\"%d \",a[i].health);//\u8f93\u51fa\u8840\u91cf \n\t\tprintf(\"%d \",a[i].x);//\u8f93\u51fa\u5f53\u524d\u5750\u6807 \n\t\tprintf(\"%d \",a[i].y);//\n\t\t\n\t\tprintf(\"\\n\");//\u6362\u884c \n\t}\n\t\n\treturn ;\n}\n\nint main()//\u4f18\u7f8e\u7684\u4e3b\u51fd\u6570 QwQ \n{\n\t/*freopen(\"Enter.in\",\"r\",stdin);//\u4e60\u60ef\u6027\u6253\u5f00\u6587\u4ef6 \n\tfreopen(\"Output.out\",\"w\",stdout);*/\n\t\n\tEnter();//\u8f93\u5165 \n\t\n\tWork();//\u5de5\u4f5c \n\t\n\tOutput();//\u8f93\u51fa \n\n\treturn 0;//\u7a0b\u5e8f\u7ed3\u675f \n}\n\n\n\n```\n\n\n\n------------\n\n## \u540e\u8bb0\n**\u4e0d\u559c\u8bf7\u8df3\u8fc7**\n\n\u518d\u8fc7\u4e24\u5929\u5c31\u662f\u521d\u8d5b\uff0c\u60f3\u60f3\u770b\uff0c\u73b0\u5728\u7684\u81ea\u5df1\u4e5f\u624d\u4e0d\u8fc7\u63a5\u89e6oi\u4e5d\u4e2a\u6708\u5427\uff0c\u5e0c\u671b\u80fd\u62ff\u4e00\u4e2a\u7701\u4e00\u7b49\u5956\u5c31\u5fc3\u6ee1\u610f\u8db3\u4e86~\n\n\u8fd9\u9053\u9898\u662f\u6211\u5199\u8fc7\u7684\u4ee3\u7801\u91cf\u6700\u5927\u7684\u9898\u76ee\u4e86QAQ\n\n\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u6211\u7684OI\u4e4b\u65c5\n\n\u867d\u7136\u624d\u521a\u521a\u8d77\u6b65\uff0c\u4f46\u662f\u4ecd\u7136\u56f0\u96be\u91cd\u91cd\n\n\u505c\u8bfe\uff0c\u71ac\u591c\uff0c\u57f9\u8bad\n\n\u6211\u70ed\u7231\u8fd9\u79cd\u5f85\u5728\u673a\u623f\u7684\u65e5\u5b50\n\n\u5c31\u50cf\u6211\u5e76\u4e0d\u8ba8\u538c\u8fd9\u9053\u70e6\u7410\u7684\u6a21\u62df\n\n\u5199\u4e86\u8bb8\u4e45\uff0c\u4e0d\u6b62\u4e00\u6b21\u840c\u751f\u9000\u610f\n\n\u4f46\u662f\u5c31\u50cfOI\u4e00\u6837\n\n\u8e0f\u4e0a\u4e86\u65c5\u9014\u5c31\u6ca1\u6709\u9000\u8def\n\n\u6211\u4eec\u4e0d\u662f\u575a\u6301\uff0c\u662f\u5b9e\u5728\u9000\u65e0\u53ef\u9000\u2026\u2026\n\n",
        "postTime": 1539268383,
        "uid": 81494,
        "name": "Ace_Heart",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "\u601d\u8def\u81ea\u7136\uff0c\u89e3\u6cd5\u6e05\u6670\uff0c\u7801\u91cf\u7a0d\u9ad8\u7684\u4e00\u4e2a\u6a21\u62df\u9898\u3002\n\n\u9996\u5148\u8981\u8bfb\u61c2\u9898\u76ee\u2026\u2026\n\n\u6ce8\u91ca\u4ec0\u4e48\u7684\u90fd\u5728\u4ee3\u7801\u91cc\u9762QAQ\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n\nusing namespace std;\n\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\nconst int dx[4]={0,1,0,-1};\n\nconst int dy[4]={1,0,-1,0};\n\n//\u8ba9\u8682\u8681\u884c\u8d70\u7684\u65f6\u5019\u7684\u4e24\u4e2a\u65b9\u5411\u6570\u7ec4\u3002\n\nint n,m,s,d,r;\n\nint Message_Element[10][10];\n\n//\u4fe1\u606f\u7d20\u6570\u7ec4\n\nbool Is_Cake_Pick_Up=false;\n\n//\u86cb\u7cd5\u6709\u6ca1\u6709\u88ab\u6361\u8d77\u6765\n\nint target_ant;\n\n//\u6361\u5230\u86cb\u7cd5\u7684\u8682\u8681\n\nbool Has_Taken_Up[20][20];\n\n//\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u6ca1\u6709\u88ab\u5360\u7528\uff08\u4e0d\u7ba1\u662f\u8682\u8681\u8fd8\u662f\u70ae\u53f0\u4ec0\u4e48\u7684\uff09\n\nint count_alive_ant=0,count_total_ant=0;\n\n//\u76ee\u524d\u6d3b\u7740\u7684\u8682\u8681\u6570\u91cf\u548c\u8682\u8681\u603b\u5171\u7684\u6570\u91cf\n\nbool check_is_vaild_block(int x,int y)\n{\n\tif (x<0 || y<0 || x>n || y>m || Has_Taken_Up[x][y])\n\t\treturn false;\n\treturn true;\n}\n\n//\u5224\u65ad\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\n\n//\u5f80\u4e0b\u90fd\u662f\u4e00\u4e9b\u70b9\u7684\u8ba1\u7b97\u4e4b\u7c7b\u7684\uff0c\u968f\u4fbf\u627e\u4e2a\u8ba1\u7b97\u51e0\u4f55\u9898\u76ee\u7684\u6a21\u677f\u90fd\u80fd\u627e\u5f97\u5230\n\nstruct Point\n{\n\tdouble x,y;\n\tPoint(double X=0,double Y=0)\n\t{\n\t\tx=X;\n\t\ty=Y;\n\t}\n    //\u6784\u9020\u51fd\u6570\n};\n\nPoint operator + (Point A,Point B)\n{\n    return Point(A.x+B.x,A.y+B.y);\n}\n\nPoint operator - (Point A,Point B)\n{\n    return Point(A.x-B.x,A.y-B.y);\n}\n\nconst double eps=1e-10;\n\nint double_comp_positive(double x)\n{\n\tif (fabs(x)<eps)\n\t\treturn 0;\n\treturn x<0?-1:1;\n}\n\ndouble Dot(Point A,Point B)\n{\n    return A.x*B.x+A.y*B.y;\n}\n\ndouble Length(Point A)\n{\n    return sqrt(Dot(A,A));\n}\n\ndouble Cross(Point A,Point B)\n{\n    return A.x*B.y-A.y*B.x;\n}\n\ndouble GetSlope(Point A)\n{\n    return A.y/A.x;\n}\n\ndouble Get_Distance_To_Segment(Point P,Point A,Point B)\n{\n\tPoint v1=B-A;\n\tPoint v2=P-A;\n\tPoint v3=P-B;\n\tif (double_comp_positive(Dot(v1,v2))<0)\n\t\treturn Length(v2);\n\telse if (double_comp_positive(Dot(v1,v3))>0)\n\t\treturn Length(v3);\n\telse\n\t\treturn fabs(Cross(v1,v2))/Length(v1);\n}\n\ndouble GetDis(int x1,int y1,int x2,int y2)\n{\n\treturn sqrt(1.0*(x1-x2)*(x1-x2)+1.0*(y1-y2)*(y1-y2));\n}\n\n//\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f\n\nstruct ANT\n{\n\tint last_x,last_y,now_x,now_y,age,start_blood,blood,level;\n\t//\u5206\u522b\u662f\uff1a\u4e0a\u4e00\u6b65\u7684\u6a2a\u5750\u6807\u7eb5\u5750\u6807\uff0c\u8fd9\u4e00\u6b65\u7684\u6a2a\u5750\u6807\u7eb5\u5750\u6807\uff0c\u8fd9\u4e2a\u8682\u8681\u6d3b\u4e86\u591a\u957f\u65f6\u95f4\uff0c\u521d\u59cb\u8840\u91cf\uff0c\u5f53\u524d\u8840\u91cf\u548c\u8682\u8681\u7684\u7b49\u7ea7\n\tbool hascake;\n    //\u5224\u65ad\u662f\u5426\u6709\u86cb\u7cd5\n\t\n\tANT(int lx=0,int ly=0,int nx=0,int ny=0,int ag=0,int sb=0,int b=0,int lv=0,bool cake=false)\n\t{\n\t\tlast_x=lx;\n\t\tlast_y=ly;\n\t\tnow_x=nx;\n\t\tnow_y=ny;\n\t\tage=ag;\n\t\tstart_blood=sb;\n\t\tblood=b;\n\t\tlevel=lv;\n\t\thascake=cake;\n\t}\n    //\u6784\u9020\u51fd\u6570\n    \n\tvoid Leave_Message_Element()\n\t{\n\t\tMessage_Element[now_x][now_y]+=hascake?5:2;\n\t}\n    //\u5904\u7406\u7559\u4e0b\u4fe1\u606f\u7d20\n\t\n\tvoid Move_Ant()\n\t{\n\t\t//puts(\"-----\");\n\t\tint max_message_element=-1;\n\t\tint next_go_x=0;\n\t\tint next_go_y=0;\n\t\tint next_go_direction=0;\n        //\u5206\u522b\u662f\u6700\u5927\u7684\u4fe1\u606f\u7d20\uff0c\u4e0b\u4e00\u6b65\u8981\u8d70\u7684\u6a2a\u7eb5\u5750\u6807\u4ee5\u53ca\u65b9\u5411\n\t\tfor (int i=0;i<=3;i++)\n\t\t{\n\t\t\tint nx=now_x+dx[i];\n\t\t\tint ny=now_y+dy[i];\n\t\t\t//cout << nx << \" \" << ny << endl;\n\t\t\tif (!check_is_vaild_block(nx,ny))\n\t\t\t\tcontinue;\n\t\t\tif (max_message_element<Message_Element[nx][ny] && (nx!=last_x || ny!=last_y))\n\t\t\t{\n\t\t\t\tmax_message_element=Message_Element[nx][ny];\n\t\t\t\tnext_go_x=nx;\n\t\t\t\tnext_go_y=ny;\n\t\t\t\tnext_go_direction=i;\n\t\t\t}\n            //\u5224\u65ad\u5468\u56f4\u4e00\u5468\u7684\u70b9\u80fd\u4e0d\u80fd\u8d70\n\t\t}\n        //\u6309\u7167\u539f\u6587\u7b2c\u56db\u6761\u201c\u5982\u679c\u5c06\u6bcf\u53ea\u8682\u8681\u5728\u6d1e\u53e3\u51fa\u73b0\u7684\u65f6\u95f4\u4f5c\u4e3a\u5b83\u7684\u6d3b\u52a8\u65f6\u95f4\u7684\u7b2c1\u79d2\u2026\u2026\u51b3\u5b9a\u65b9\u5411\u201d\n\t\tif (age%5==4 && max_message_element!=-1)\n\t\t{\n\t\t\tmax_message_element=-1;\n\t\t\tfor (int times=1;times<=4;times++)\n\t\t\t{\n\t\t\t\tint i=(next_go_direction-times)%4;\n\t\t\t\tif (i<0)\n\t\t\t\t\ti+=4;\n\t\t\t\tint nx=now_x+dx[i];\n\t\t\t\tint ny=now_y+dy[i];\n\t\t\t\t//cout << nx << \" \" << ny << endl;\n\t\t\t\tif (!check_is_vaild_block(nx,ny))\n\t\t\t\t\tcontinue;\n\t\t\t\tif (max_message_element<Message_Element[nx][ny] && (nx!=last_x || ny!=last_y))\n\t\t\t\t{\n\t\t\t\t\tmax_message_element=Message_Element[nx][ny];\n\t\t\t\t\tnext_go_x=nx;\n\t\t\t\t\tnext_go_y=ny;\n\t\t\t\t\tnext_go_direction=i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        //\u72b6\u6001\u7ee7\u627f\n\t\tlast_x=now_x;\n\t\tlast_y=now_y;\n\t\tif (max_message_element<0)\n\t\t\treturn;\n\t\tHas_Taken_Up[now_x][now_y]=false;\n\t\tHas_Taken_Up[next_go_x][next_go_y]=true;\n\t\tnow_x=next_go_x;\n\t\tnow_y=next_go_y;\n\t}\n\t\n\tvoid Get_Cake()\n\t{\n    \t//\u5224\u65ad\u86cb\u7cd5\u662f\u5426\u88ab\u6361\u8d77\u6765\uff0c\u8fd8\u6709\u8865\u8840\n\t\tif (Is_Cake_Pick_Up)\n\t\t\treturn;\n\t\tif (now_x==n && now_y==m)\n\t\t{\n\t\t\thascake=Is_Cake_Pick_Up=true;\n\t\t\tblood+=(int)(start_blood/2);\n\t\t\tif (blood>start_blood)\n\t\t\t\tblood=start_blood;\n            //\u6ce8\u610f\u8682\u8681\u7684\u8840\u91cf\u662f\u4e0d\u80fd\u8d85\u8fc7\u8840\u4e0a\u9650\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u8840\u91cf\u3002\n\t\t}\n\t}\n\t\n\tvoid AddAge()\n\t{\n\t\tage++; \n        //\u7ed9\u8682\u8681\u7684\u5e74\u9f84+1s\n\t}\n\t\n\tvoid PrintAnt()\n\t{\n\t\tprintf(\"%d %d %d %d %d\\n\",age,level,blood,now_x,now_y);\n        //\u8f93\u51fa\u8682\u8681\u7684\u72b6\u6001\n\t}\n\t\n}ant[1000];\n\nstruct TOWER //\u70ae\u53f0\u7684\u7ed3\u6784\u4f53\n{\n\tint x,y;\n\t\n\tvoid Shoot_The_Bullet()\n\t{\n    \t//\u70ae\u53f0\u5c04\u6fc0\u5149\u3002\uff08~~\u4e1c\u65b9\u6587\u82b1\u5e16~~\uff09\n        //\u5982\u679c\u6ca1\u6709\u86cb\u7cd5\u88ab\u6361\u8d77\u6765\u6216\u8005\u6361\u8d77\u86cb\u7cd5\u7684\u8682\u8681\u8ddd\u79bb\u70ae\u53f0\u592a\u8fdc\uff0c\u8fdc\u5230\u6253\u4e0d\u4e2d\u7684\u65f6\u5019\u7684\u5224\u65ad\n\t\tif (!Is_Cake_Pick_Up || GetDis(ant[target_ant].now_x,ant[target_ant].now_y,x,y)-1.0*r>eps)\n\t\t{\n\t\t\tdouble dis;\n\t\t\tdouble min_dis=(1e9)*1.0;\n\t\t\tint ant_id;\n\t\t\tfor (int i=1;i<=count_alive_ant;i++)\n\t\t\t{\n\t\t\t\tdis=GetDis(ant[i].now_x,ant[i].now_y,x,y);\n\t\t\t\tif (dis-1.0*r<=eps)\n\t\t\t\t{\n\t\t\t\t\tif (dis<min_dis)\n\t\t\t\t\t{\n\t\t\t\t\t\tmin_dis=dis;\n\t\t\t\t\t\tant_id=i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (min_dis>r)\n\t\t\t\treturn;\n\t\t\tant[ant_id].blood-=d;\n\t\t\treturn;\n            //\u56e0\u4e3a\u4ed6\u9009\u62e9\u7684\u662f\u6700\u8fd1\u7684\u4e00\u53ea\u8682\u8681A\uff0c\u6240\u4ee5\u5982\u679c\u5728\u70ae\u53f0->\u8682\u8681A\u8fd9\u4e2a\u8def\u5f84\u4e0a\u6709\u8682\u8681\u88ab\u6fc0\u5149\u6ce2\u53ca\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u8682\u8681A\u4e0d\u662f\u6700\u8fd1\u7684\u8682\u8681\uff0c\u56e0\u6b64\u4e0d\u7528\u8003\u8651\u6709\u8682\u8681\u5728\u70ae\u53f0\u5230\u8682\u8681A\u8fd9\u4e2a\u8def\u5f84\u4e0a\u7684\u60c5\u51b5\u3002\n            //\u4f46\u662f\u4e0b\u4e00\u79cd\u5c31\u65e0\u6cd5\u8fd9\u4e48\u4fdd\u8bc1\uff0c\u56e0\u4e3a\u6709\u86cb\u7cd5\u7684\u8682\u8681\u4e0d\u4e00\u5b9a\u662f\u6700\u8fd1\u7684\u8682\u8681\u3002\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPoint A=Point(ant[target_ant].now_x,ant[target_ant].now_y);\n\t\t\tPoint B=Point(x,y);\n\t\t\tfor (int i=1;i<=count_alive_ant;i++)\n\t\t\t{\n\t\t\t\tif (ant[i].hascake)\n\t\t\t\t{\n\t\t\t\t\tant[i].blood-=d;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tPoint P=Point(ant[i].now_x,ant[i].now_y);\n\t\t\t\tif (Get_Distance_To_Segment(P,A,B)-0.5<=eps)\n\t\t\t\t\tant[i].blood-=d;\n\t\t\t}\n\t\t}\n\t}\n}turret[25];\n\ndouble Calc_Blood(int cnt)\n{\n    //\u8ba1\u7b97\u521d\u59cb\u8840\u6761\n\tdouble res=1;\n\tfor (int i=1;i<=cnt;i++)\n\t\tres*=1.1;\n\treturn res;\n}\n\nvoid Ant_Born()\n{\n\t//\u8682\u8681\u51fa\u751f\u3002\u8981\u5224\u65ad\u5f53\u524d\u7684\u4e2a\u6570\u548c\u51fa\u751f\u70b9\u6709\u6ca1\u6709\u8682\u8681\u3002\n\tif (count_alive_ant==6 || Has_Taken_Up[0][0])\n\t\treturn;\n\tHas_Taken_Up[0][0]=true;\n\tcount_alive_ant++;\n\tcount_total_ant++;\n\tint now_level=1+(count_total_ant-1)/6;\n\tint now_blood=(int)(1.0*4*Calc_Blood(now_level));\n    //\u8ba1\u7b97\u5f53\u524d\u8682\u8681\u7684\u7b49\u7ea7\u548c\u8840\u6761\u3002\u6ce8\u610f\u7b49\u7ea7\u522b\u7b97\u9519\u3002\n\tant[count_alive_ant]=ANT(-1,-1,0,0,0,now_blood,now_blood,now_level,false);\n\t\n}\n\nvoid Kill(int tmp)\n{\n\tfor (int i=tmp+1;i<=count_alive_ant;i++)\n\t\tant[i-1]=ant[i];\n\tcount_alive_ant--;\n    //\u5982\u679c\u4e2d\u95f4\u6709\u4e00\u53ea\u8682\u8681\u6b7b\u4e86\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u7f16\u53f7\u7684\u8fde\u7eed\uff0c\u540e\u9762\u7684\u8682\u8681\u8981\u8865\u4e0a\u6765\u3002\n}\n\nvoid CheckDead()\n{\n\t//\u5224\u65ad\u8682\u8681\u6b7b\u4ea1\u3002\u6ce8\u610f\u5982\u679c\u6b7b\u7684\u8682\u8681\u6709\u86cb\u7cd5\uff0c\u90a3\u4e48\u8981\u628a\u6361\u5230\u86cb\u7cd5\u7684\u53d8\u91cf\u7f6e\u4e3afalse\n\tfor (int i=1;i<=count_alive_ant;i++)\n\t{\n\t\tif (ant[i].blood<0)\n\t\t{\n\t\t\tif (ant[i].hascake)\n\t\t\t{\n\t\t\t\tIs_Cake_Pick_Up=false;\n\t\t\t\ttarget_ant=0;\n\t\t\t}\n\t\t\tHas_Taken_Up[ant[i].now_x][ant[i].now_y]=false;\n\t\t\tKill(i);\n\t\t\ti--;\n            //\u56e0\u4e3a\u7f16\u53f7\u8981\u8fde\u7eed\uff0c\u6240\u4ee5\u8fd9\u91cci\u8981\u51cf\u53bb1\n\t\t}\n\t}\n}\n\nbool Check_Game_Over()\n{\n\tif (!Is_Cake_Pick_Up)\n\t\treturn false;\n\tfor (int i=1;i<=count_alive_ant;i++)\n\t\tif (ant[i].now_x==0 && ant[i].now_y==0 && ant[i].hascake)\n\t\t\treturn true;\n\treturn false;\n    //\u5982\u679c\u6709\u4e00\u4e2a\u6709\u86cb\u7cd5\u7684\u8682\u8681\u5728\u51fa\u751f\u70b9\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6e38\u620f\u7ed3\u675f\u3002\n}\n\nvoid Delete_Message_Element()\n{\n\tfor (int i=0;i<=n;i++)\n\t\tfor (int j=0;j<=m;j++)\n\t\t\tif (Message_Element[i][j])\n\t\t\t\tMessage_Element[i][j]--;\n    //\u904d\u5386\u6574\u5f20\u5730\u56fe\u51cf\u53bb\u4fe1\u606f\u7d20\u3002\u6ce8\u610f\u4fe1\u606f\u7d20\u6700\u5c11\u662f0\n}\n\nvoid Debug()\n{\n\tcout << count_alive_ant << endl;\n\tfor (int i=1;i<=count_alive_ant;i++)\n\t\tant[i].PrintAnt();\n\tcout << \"\u4fe1\u606f\u7d20\uff1a\" << endl;\n\tfor (int i=0;i<=n;i++)\n\t{\n\t\tfor (int j=0;j<=m;j++)\n\t\t\tcout << Message_Element[i][j] << \" \";\n\t\tcout << endl;\n\t}\n\tcout << \"\u88ab\u5360\u7528\u7684\u683c\u5b50\uff1a\" << endl;\n\tfor (int i=0;i<=n;i++)\n\t{\n\t\tfor (int j=0;j<=m;j++)\n\t\t\tcout << Has_Taken_Up[i][j] << \" \";\n\t\tcout << endl;\n\t}\n}\n\nint main()\n{\n\tn=read();\n\tm=read();\n\ts=read();\n\td=read();\n\tr=read();\n\tfor (int i=1;i<=s;i++)\n\t{\n\t\tturret[i].x=read();\n\t\tturret[i].y=read();\n\t\tHas_Taken_Up[turret[i].x][turret[i].y]=true;\n\t}\n\tint t=read();\n\tbool The_Game_Is_Going_On=true;\n\tfor (int res=1;res<=t;res++)\n\t{\n\t\tAnt_Born();\n\t\tfor (int i=1;i<=count_alive_ant;i++)\n\t\t\tant[i].Leave_Message_Element();\n\t\tfor (int i=1;i<=count_alive_ant;i++)\n\t\t\tant[i].Move_Ant();\n\t\tfor (int i=1;i<=count_alive_ant;i++)\n\t\t{\n\t\t\tant[i].Get_Cake();\n\t\t\tif (ant[i].hascake)\n\t\t\t\ttarget_ant=i;\n\t\t}\n\t\tif (!Is_Cake_Pick_Up)\n\t\t\ttarget_ant=0;\n\t\tfor (int i=1;i<=s;i++)\n\t\t\tturret[i].Shoot_The_Bullet();\n\t\tCheckDead();\n\t\tif (Check_Game_Over())\n\t\t{\n\t\t\tThe_Game_Is_Going_On=false;\n\t\t\tprintf(\"Game over after %d seconds\\n\",res);\n            break;\n\t\t}\n\t\tfor (int i=1;i<=count_alive_ant;i++)\n\t\t\tant[i].AddAge();\n\t\tDelete_Message_Element();\n\t\t//Debug();\n\t\t//system(\"pause\");\n\t}\n\tif (The_Game_Is_Going_On)\n\t\tputs(\"The game is going on\");\n\tprintf(\"%d\\n\",count_alive_ant);\n\tfor (int i=1;i<=count_alive_ant;i++)\n\t\tant[i].PrintAnt();\n\treturn 0;\n}\n\n```",
        "postTime": 1535882929,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u8fd9\u4e48\u7b80\u5355\u7684\u9898\u76ee\u5199\u9898\u89e3\u7684\u4ec0\u4e48\u5c11\uff1f\u4e0d\u53ef\u601d\u8bae\u3002\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\u533a\uff0c\u5927\u90e8\u5206\u4eba\u90fd\u662f\u66b4\u529b\u7ef4\u62a4\u6570\u7ec4\uff0c\u6216\u8005\u662f\u624b\u52a8\u5b9e\u73b0\u94fe\u8868\u7b49\u64cd\u4f5c\u3002\u4e8b\u5b9e\u4e0a\uff0c$STL$\u4e2d\u8fd8\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u5bb9\u5668\u2014\u2014$List$\u3002\u5bf9\u4e8e\u8fd9\u79cd\u504f\u5de5\u7a0b\u5411\u7684\u9898\u76ee\uff0c\u663e\u7136\uff0c\u7528$List$\u4e0e\u8fed\u4ee3\u5668\u5b9e\u73b0\u4f1a\u66f4\u52a0\u7b80\u5355\uff0c\u76f4\u89c2\uff0c\u597d\u5199\u3002\n\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;**ps\uff1a\u8003\u8651\u5230\u9898\u76ee\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a\u5bf9\u8c61\u6240\u9700\u5b58\u50a8\u7684\u4fe1\u606f\u5e76\u4e0d\u591a\uff0c\u6211\u4fbf\u4f7f\u7528\u4e86\u66f4\u5feb\u7684$Struct$\u6765\u5b9e\u73b0\u6211\u7684\u4ee3\u7801\u3002**\n\n------------\n## \u8bfb\u9898 \u5206\u6790\u9898\u76ee\u9700\u6c42\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u9996\u5148\uff0c\u6211\u4eec\u4ed4\u7ec6\u5730\u9605\u8bfb\u4e00\u904d\u9898\u76ee\uff0c\u9996\u5148\uff0c\u5bf9\u4e8e\u5730\u56fe\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u5730\u56fe\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u9700\u8981\u50a8\u5b58\u4e24\u79cd\u4fe1\u606f\u2014\u2014\u80fd\u5426\u901a\u8fc7\uff0c\u4e0e\u4fe1\u606f\u7d20\u6570\u91cf\u3002\u6211\u4eec\u8fd9\u4e48\u5b9a\u4e49\u5730\u56fe\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\uff1a\n\n```cpp\nstruct mpNode\n{\n    int message=0;\n    bool canMove=true;\n};\n\nmpNode mp[MAXN][MAXN];\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u540c\u6837\u5730\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u53ea\u8682\u8681\uff0c\u6211\u4eec\u90fd\u53ea\u9700\u8981\u50a8\u5b58\u5b83\u4eec\u7684\u5e74\u9f84\uff0c\u7b49\u7ea7\uff0c\u8840\u91cf\uff0c\u5f53\u524d\u4f4d\u7f6e\uff0c\u4e0a\u4e00\u79d2\u7684\u4f4d\u7f6e\uff0c\u8840\u91cf\u6700\u5927\u503c\uff0c\u662f\u5426\u62e5\u6709\u86cb\u7cd5\u5c31\u53ef\u4ee5\u4e86\u3002\u4e3a\u4e86\u80fd\u591f\u66f4\u597d\u5730\u521b\u5efa\u4e00\u4e2a\u8682\u8681\u4e2a\u4f53\uff0c\u6211\u4eec\u624b\u52a8\u5199\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff1a\n\n```cpp\nstruct antNode\n{\n    int age;\n    int level;\n    int HP;\n    int posx;\n    int posy;\n    int prex;\n    int prey;\n    int maxHP;\n    bool isCake;\n    antNode(int age,int level,int HP,int x,int y,bool isCake=false):\n            age(age),level(level),HP(HP),posx(x),posy(y),isCake(isCake),prex(x),prey(y),maxHP(HP){}\n};\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u8003\u8651\u8682\u8681\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u6e38\u620f\u7684\u6240\u6709\u8fc7\u7a0b\u4e2d\uff0c\u8682\u8681\u7684\u884c\u52a8\u987a\u5e8f\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4ece\u5e74\u9f84\u6700\u5927\u7684\u5230\u5e74\u9f84\u6700\u5c0f\u7684\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u4f7f\u7528$Set$\u6765\u7ef4\u62a4\u6211\u4eec\u7684\u8682\u8681\u5e8f\u5217\u3002\u4f46\u662f\uff0c\u5728$STL$\u4e2d\u7684$Set$\u662f\u5177\u6709\u53ea\u8bfb\u5c5e\u6027\u7684\uff0c\u4e0d\u80fd\u5bf9\u5176\u4e2d\u5143\u7d20\u8fdb\u884c\u4fee\u6539\u3002\u6211\u4eec\u518d\u4ed4\u7ec6\u601d\u8003\u751f\u6210\u8682\u8681\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u8682\u8681\u7684\u94fe\u8868\u5373\u53ef\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u8682\u8681\u7684\u6700\u5927\u6570\u91cf\u662f\u56fa\u5b9a\u7684\uff0c\u5bf9\u4e8e\u540e\u751f\u6210\u7684\u8682\u8681\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u5b83\u4eec\u653e\u5230\u94fe\u8868\u7684\u6700\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u4ece\u524d\u5f80\u540e\u904d\u5386\u94fe\u8868\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e86\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528$STL$\u7684$List$\n\n>\uff08\u5982\u679c\u4f60\u5e76\u4e0d\u4f1a\u4f7f\u7528$List$\uff0c\u53ef\u4ee5\u53bb\u81ea\u884c\u767e\u5ea6\u5730\u8bf4$QwQ$\uff0c\u64cd\u4f5c\u5f88\u5c11$der$\uff09\n\n```cpp\nlist<antNode> antList;\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u90a3\u4e48\uff0c\u65e2\u7136\u6211\u4eec\u4f7f\u7528\u4e86$List$\u6765\u7ef4\u62a4\u8682\u8681\u5e8f\u5217\uff0c\u5bf9\u4e8e\u5355\u4e2a\u9632\u5fa1\u5854\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u653b\u51fb\u7684\u5bf9\u8c61\u4ee5\u8fed\u4ee3\u5668\u7684\u65b9\u5f0f\u50a8\u5b58\u8d77\u6765\uff0c\u5b9e\u73b0\u66f4\u76f4\u89c2\uff0c\u66f4\u7b80\u4fbf\u7684\u653b\u51fb\u64cd\u4f5c\u4e86\u3002\n\n```cpp\nstruct towerNode\n{\n    int x;\n    int y;\n    double minDis;\n    bool haveTarget;\n    bool haveCakeTarget;\n    list<antNode>::iterator target;\n};\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u8003\u8651\u5168\u5c40\u53d8\u91cf\uff0c\u5bf9\u4e8e\u8682\u8681\u751f\u6210\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u4e00\u5171\u751f\u6210\u4e86\u591a\u5c11\u53ea\u8682\u8681\uff0c\u800c\u7531\u4e8e\u5bf9$List$\u7684\u6c42$Size$\u64cd\u4f5c\u662f$O(n)$\u7684\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5408\u683c\u7684$OIer$\uff0c\u6211\u4eec\u81ea\u7136\u8981\u9009\u62e9\u66f4\u5feb\u7684\u65b9\u6cd5\uff0c\u4e8e\u662f\u6211\u4eec\u518d\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5f53\u524d\u5b58\u6d3b\u4e86\u591a\u5c11\u53ea\u8682\u8681\u3002\u5bf9\u4e8e\u8f6c\u5411\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4ece\u5411\u4e1c\u5f00\u59cb\uff0c\u50a8\u5b58\u4e00\u4e2a\u987a\u65f6\u9488\u65cb\u8f6c\u7684\u65b9\u5411\u6570\u7ec4\uff0c\u5bf9\u4e8e\u53d6\u86cb\u7cd5\u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u5f55\u86cb\u7cd5\u662f\u5426\u5df2\u7ecf\u88ab\u53d6\u8d70\u3002\u91cd\u65b0\u8003\u8651\u8682\u8681\u751f\u6210\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u4e00\u5c40\u6e38\u620f\u4e2d\uff0c\u8682\u8681\u7684\u7b49\u7ea7\u662f\u62e5\u6709\u6700\u5927\u503c\u7684\uff0c\u90a3\u4e48\uff0c\u5f88\u663e\u7136\uff0c\u5728\u7ed9\u5b9a\u4e86$t$\u4e4b\u540e\uff0c$1.1^k$\u662f\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\u7684\uff0c\u6211\u4eec\u4e5f\u7528\u5168\u5c40\u53d8\u91cf\u5c06\u5b83\u50a8\u5b58\u8d77\u6765\u3002\n\n```cpp\nconst double eps=1e-10;\nconst int MAXN=10;\nint n,m,s,d,t;\ndouble r;\nint antCnt;\nint nowt;\nint dirx[4]={0,1,0,-1};\nint diry[4]={1,0,-1,0};\nint totalSpawn;\n\nbool cakeBeTaken;\n\ndouble prepow[35000];\n```\n\n\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u6e38\u620f\u8fc7\u7a0b\uff0c\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u9053\u9898\u867d\u7136\u662f\u4e00\u4e2a\u5927\u6a21\u62df\uff0c\u4f46\u662f\u51fa\u9898\u4eba\u5df2\u7ecf\u628a\u6574\u4e2a\u8fdb\u884c\u8fc7\u7a0b\u5199\u5728\u4e86\u9898\u9762\u4e2d\u4e86\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u628a\u4e3b\u7a0b\u5e8f\u548c\u8f93\u5165\u8f93\u51fa\u7a0b\u5e8f\u7ed9\u5199\u5b8c\u3002\u5bf9\u4e8e\u8fd9\u4e48\u826f\u5fc3\u7684\u51fa\u9898\u4eba\uff0c\u4f60\u4eec\u600e\u4e48\u597d\u610f\u601d\u628a\u5b83\u8bc4\u6210\u7d2b\u9898\u5462\uff1f\u8981\u50cf\u6211\u4e00\u6837\u9009\u62e9\u5165\u95e8\u96be\u5ea6\uff01\n\n```cpp\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n    while (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n    return x*f;\n}\n\ninline void print()\n{\n    if(nowt==t+1)\n        cout<<\"The game is going on\"<<endl;\n    else\n        cout<<\"Game over after \"<<nowt<<\" seconds\"<<endl;\n    list<antNode>::iterator it;\n    cout<<antCnt<<endl;\n    for(it=antList.begin();it!=antList.end();it++)\n        cout<<it->age<<\" \"<<it->level<<\" \"<<it->HP<<\" \"<<it->posx<<\" \"<<it->posy<<endl;\n}\n\nint main()\n{\n    totalSpawn=0;\n    cakeBeTaken=false;\n    antCnt=0;\n    n=read(),m=read(),s=read(),d=read(),r=read();\n    for(int i=1;i<=s;i++)\n    {\n        tower[i].x=read();\n        tower[i].y=read();\n        mp[tower[i].x][tower[i].y].canMove=false;\n    }\n    t=read();\n    prepow[1]=1.1;\n    for(int i=2;i<=(t/6)+1;i++)\n        prepow[i]=prepow[i-1]*1.1;\n    for(nowt=1;nowt<=t;nowt++)\n    {\n        AntSpawn();\n        LeaveMessage();\n        Move();\n        GetCake();\n        TowerAttack();\n        DestoryBody();\n        if(GameOverCheck())\n            break;\n        LastUpdate();\n    }\n    print();\n    return 0;\n}\n```\n\n------------\n## \u8003\u8651\u7b80\u5355\u64cd\u4f5c\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5206\u6790\u6574\u4e2a\u6e38\u620f\u8fc7\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5168\u90e8\u7684\u64cd\u4f5c\u800c\u8a00\uff0c\u53ea\u6709\u79fb\u52a8\u548c\u653b\u51fb\u662f\u5341\u5206\u9ebb\u70e6\u7684\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7684\u64cd\u4f5c\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e86$List$\u5bb9\u5668\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u7ef4\u62a4\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u5148\u5b9e\u73b0\u90a3\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u9700\u6c42\u3002\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u8682\u8681\u751f\u6210\uff0c\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5f53\u524d\u80fd\u5426\u751f\u6210\u8682\u8681\uff0c\u5982\u679c\u8682\u8681\u5df2\u7ecf\u5230\u4e86\u4e0a\u9650\uff0c\u6216\u8005$(0,0)$\u5df2\u7ecf\u6709\u4e86\u4e00\u53ea\u8682\u8681\uff0c\u5c31\u4e0d\u751f\u6210\uff0c\u5426\u5219\uff0c\u751f\u6210\u4e00\u53ea\u65b0\u7684\u8682\u8681\u3002\u5bf9\u4e8e\u65b0\u8682\u8681\u7684\u7b49\u7ea7\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u603b\u8682\u8681\u6570\u91cf\u6765\u8ba1\u7b97\u5f97\u5230\uff0c\u5bf9\u4e8e\u65b0\u8682\u8681\u7684\u8840\u91cf\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u9884\u5904\u7406\u4e86$1.1^k$\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528$pow$\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u5f97\u5230\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u5199\u51fa\u751f\u6210\u8682\u8681\u7684\u51fd\u6570\u4e86\u3002\n\n```cpp\ninline void AntSpawn()\n{\n    if(antCnt>=6||mp[0][0].canMove==false)\n        return;\n    antCnt++;\n    totalSpawn++;\n    int nowLevel=((totalSpawn-1)/6)+1;\n    antList.push_back(antNode(0,nowLevel,(int)(4.0*prepow[nowLevel]),0,0,false));\n    mp[0][0].canMove=false;\n    return;\n}\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u4fe1\u606f\u7d20\u7684\u751f\u6210\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u524d\u5f80\u540e\u904d\u5386\u4e00\u904d\u6211\u4eec\u7684\u8682\u8681\u5e8f\u5217\uff0c\u5bf9\u4e8e\u80cc\u7740\u86cb\u7cd5\u7684\u8682\u8681\uff0c\u6211\u4eec\u7559\u4e0b$5$\u4fe1\u606f\u7d20\uff0c\u53cd\u4e4b\u6211\u4eec\u7559\u4e0b$2$\u4fe1\u606f\u7d20\u3002\n\n```cpp\ninline void LeaveMessage()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        if(it->isCake==true)\n            mp[it->posx][it->posy].message+=5;\n        else\n            mp[it->posx][it->posy].message+=2;\n    }\n    return;\n}\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u86cb\u7cd5\u83b7\u53d6\u64cd\u4f5c\uff0c\u6211\u4eec\u9996\u5148\u904d\u5386\u6bcf\u4e00\u53ea\u8682\u8681\uff0c\u5982\u679c\u8bf4\u5f53\u524d\u8682\u8681\u5728\u86cb\u7cd5\u4e0a\uff0c\u4e14\u86cb\u7cd5\u6ca1\u6709\u88ab\u522b\u7684\u8682\u8681\u62ff\u8d70\uff0c\u6211\u4eec\u5c31\u8ba9\u8fd9\u53ea\u8682\u8681\u62ff\u8d70\u86cb\u7cd5\uff0c\u66f4\u65b0\u86cb\u7cd5\u72b6\u6001\u4e0e\u8682\u8681\u8840\u91cf\u3002\n\n```cpp\ninline void GetCake()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        if(it->posx==n&&it->posy==m&&cakeBeTaken==false)\n        {\n            cakeBeTaken=true;\n            it->isCake=true;\n            it->HP=min(it->HP+(int)(floor)((double)it->maxHP/2.0),it->maxHP);\n        }\n    }\n    return;\n}\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u6e05\u7406\u5c38\u4f53\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u904d\u5386\u6bcf\u4e00\u53ea\u8682\u8681\uff0c\u5982\u679c\u5f53\u524d\u8682\u8681\u7684\u8840\u91cf\u5df2\u7ecf\u5c0f\u4e8e$0$\u4e86\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u53ea\u8682\u8681\u7ed9$erase$\u6389\uff0c\u5982\u679c\u6b7b\u4ea1\u7684\u8682\u8681\u80cc\u7740\u86cb\u7cd5\uff0c\u90a3\u6211\u4eec\u91cd\u65b0\u66f4\u65b0\u86cb\u7cd5\u72b6\u6001\uff0c\u53cd\u4e4b\u5219\u4e0d\u66f4\u65b0\u3002\u7136\u540e\uff0c\u6211\u4eec\u66f4\u65b0\u8682\u8681\u7684\u6570\u91cf\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u5230\uff0c\u5982\u679c\u5bf9\u4e8e\u5f53\u524d\u7684\u8682\u8681\uff0c\u6211\u54e6\u4eec\u5c06\u5176\u5220\u9664\uff0c\u90a3\u6211\u4eec\u7684\u8fed\u4ee3\u5668\u8fd8\u662f\u4f1a\u6307\u5728\u90a3\u4e2a\u5220\u9664\u7684\u4f4d\u7f6e\uff0c\u5f53\u5b83\u81ea\u52a0\u4e4b\u540e\uff0c\u540e\u9762\u7684\u8682\u8681\u4e5f\u4f1a\u5f80\u524d\u8fdb\uff0c\u8fd9\u5c31\u5bfc\u81f4\u6211\u4eec\u4f1a\u5c11\u904d\u5386\u5230\u90a3\u4e9b\u672c\u5e94\u8be5\u5220\u9664\u7684\u8682\u8681\uff0c\u4e3a\u4e86\u51cf\u5c11\u4ee3\u7801\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u6765\u50a8\u5b58\u6709\u6ca1\u6709\u8682\u8681\u88ab\u5220\u9664\uff0c\u5982\u679c\u6709\u8682\u8681\u88ab\u5220\u9664\u4e86\uff0c\u90a3\u4e48\u5728\u4e0b\u4e00\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53c8\u4ece\u5934\u5f00\u59cb\u904d\u5386\uff0c\u7531\u4e8e\u8682\u8681\u6570\u91cf\u7684\u6700\u5927\u503c\u662f\u5df2\u77e5\u7684\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5e76\u4e0d\u4f1a\u592a\u6d6a\u8d39\u65f6\u95f4\u3002\n\n```cpp\ninline void DestoryBody()\n{\n    bool isErase=false;\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        if(isErase==true)\n        {\n            it=antList.begin();\n            isErase=false;\n        }\n        if(it->HP<0)\n        {\n            if(it->isCake)\n            {\n                it->isCake=false;\n                cakeBeTaken=false;\n            }\n            mp[it->posx][it->posy].canMove=true;\n            antList.erase(it);\n            antCnt--;\n            isErase=true;\n        }\n    }\n    return;\n}\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u5224\u65ad\u6e38\u620f\u662f\u5426\u5931\u8d25\uff0c\u6211\u4eec\u540c\u6837\u53ea\u9700\u8981\u904d\u5386\u6bcf\u4e00\u53ea\u8682\u8681\uff0c\u5982\u679c\u8bf4\u8fd9\u53ea\u8682\u8681\u5b58\u6d3b\uff0c\u80cc\u7740\u86cb\u7cd5\uff0c\u4e14\u5728$(0,0)$\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\uff0c\u90a3\u5c31\u7ec8\u6b62\u6e38\u620f\u3002\n\n```cpp\ninline bool GameOverCheck()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n        if(it->isCake==true&&it->HP>=0&&it->posx==0&&it->posy==0)\n            return true;\n    return false;\n}\n```\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5bf9\u4e8e\u6bcf\u4e00\u79d2\u7ed3\u675f\uff0c\u6211\u4eec\u90fd\u9700\u8981\u51cf\u5c11\u5730\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u4fe1\u606f\u7d20\uff0c\u5e76\u589e\u52a0\u5f53\u524d\u5b58\u6d3b\u7684\u8682\u8681\u5e74\u9f84\u3002\n\n```cpp\ninline void LastUpdate()\n{\n    for(int i=0;i<=n;i++)\n        for(int j=0;j<=m;j++)\n            if(mp[i][j].message)\n                mp[i][j].message--;\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n        it->age++;\n    return;\n}\n```\n\n------------\n## \u8003\u8651\u79fb\u52a8\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u9996\u5148\uff0c\u6211\u4eec\u9605\u8bfb\u9898\u76ee\uff0c\u5173\u4e8e\u79fb\u52a8\u7684\u63cf\u8ff0\u975e\u5e38\u957f\u800c\u590d\u6742\uff0c\u5728\u63d0\u53d6\u6709\u7528\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u79fb\u52a8\u65e0\u975e\u662f\u8fd9\u4e48\u4e00\u4e2a\u8fc7\u7a0b\u3002\n1. \u4ece\u5411\u4e1c\u5f00\u59cb\u987a\u65f6\u9488\u904d\u5386\u6bcf\u4e00\u4e2a\u65b9\u5411\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u4fe1\u606f\u7d20\u6700\u5927\u7684\u70b9\uff0c\u6211\u4eec\u671d\u7740\u4fe1\u606f\u7d20\u6700\u5927\u7684\u70b9\u524d\u8fdb\uff0c\u5982\u679c\u6709\u591a\u4e2a\uff0c\u6211\u4eec\u5f80\u6700\u5148\u904d\u5386\u5230\u7684\u70b9\u524d\u8fdb\u3002\n2. \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u70b9\u53ef\u4ee5\u524d\u5f80\uff0c\u6211\u4eec\u628a\u8682\u8681\u4e0a\u4e00\u79d2\u7684\u4f4d\u7f6e\u66f4\u65b0\u5230\u73b0\u5728\u7684\u4f4d\u7f6e\uff0c\u8fd9\u610f\u5473\u7740\u5230\u4e86\u4e0b\u4e00\u79d2\uff0c\u8682\u8681\u5c31\u53ef\u4ee5\u539f\u8def\u8fd4\u56de\u4e86\u3002\n3. \u5982\u679c\u8682\u8681\u7684\u5e74\u9f84$+1$\u4e4b\u540e\u662f$5$\u7684\u500d\u6570\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u8fd9\u53ea\u8682\u8681\u9006\u65f6\u9488\u627e\u5230\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u79fb\u52a8\u7684\u65b9\u5411\u4f5c\u4e3a\u5b83\u7684\u524d\u8fdb\u65b9\u5411\u3002\n4. \u66f4\u65b0\u5730\u56fe\u4e0a\u70b9\u7684\u72b6\u6001\uff0c\u66f4\u65b0\u8682\u8681\u7684\u4f4d\u7f6e\u3002\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f$List$\u5bb9\u5668\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u8fed\u4ee3\u5668\u8bbf\u95ee\u5bb9\u5668\u5185\u5143\u7d20\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5b9e\u73b0\u66f4\u6539\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\ninline void Move()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        int pos;\n        int ccMaxMessage=0;\n        int chooseCount=0;\n        for(int i=0;i<4;i++)\n        {\n            int ccx=it->posx+dirx[i],ccy=it->posy+diry[i];\n            if(mp[ccx][ccy].canMove==true&&(ccx!=it->prex||ccy!=it->prey)&&ccx>=0&&ccx<=n&&ccy>=0&&ccy<=m)\n            {\n                if(mp[ccx][ccy].message==ccMaxMessage)\n                {\n                    pos=i;\n                    chooseCount++;\n                }\n                else if(mp[ccx][ccy].message>ccMaxMessage)\n                {\n                    ccMaxMessage=mp[ccx][ccy].message;\n                    pos=i;\n                    chooseCount=1;\n                }\n            }\n        }\n        if(chooseCount==0)\n        {\n            it->prex=it->posx;\n            it->prey=it->posy;\n            continue;\n        }\n        else if(chooseCount>1)\n        {\n            for(pos=0;pos<4;pos++)\n            {\n                int ccx=it->posx+dirx[pos],ccy=it->posy+diry[pos];\n                if(mp[ccx][ccy].canMove==true&&(ccx!=it->prex||ccy!=it->prey)&&ccx>=0&&ccx<=n&&ccy>=0&&ccy<=m&&mp[ccx][ccy].message==ccMaxMessage)\n                    break;\n            }\n        }\n        if((it->age+1)%5==0)\n        {\n            for(int i=0;i<4;i++)\n            {\n                pos--;\n                if(pos<0)\n                    pos+=4;\n                int ccx=it->posx+dirx[pos],ccy=it->posy+diry[pos];\n                if(mp[ccx][ccy].canMove==true&&(ccx!=it->prex||ccy!=it->prey)&&ccx>=0&&ccx<=n&&ccy>=0&&ccy<=m)\n                    break;\n            }\n        }\n        it->prex=it->posx;\n        it->prey=it->posy;\n        it->posx+=dirx[pos];\n        it->posy+=diry[pos];\n        mp[it->prex][it->prey].canMove=true;\n        mp[it->posx][it->posy].canMove=false;\n    }\n    return;\n}\n```\n\n------------\n## \u8003\u8651\u653b\u51fb\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u9996\u5148\uff0c\u6211\u4eec\u4ed4\u7ec6\u5730\u9605\u8bfb\u9898\u76ee\uff0c\u53d1\u73b0\u653b\u51fb\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\u3002\n1. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9632\u5fa1\u5854\u7684\u653b\u51fb\u76ee\u6807\uff0c\u6211\u4eec\u904d\u5386\u6bcf\u4e00\u53ea\u8682\u8681\uff0c\u5982\u679c\u6709\u8682\u8681\u5728\u5176\u653b\u51fb\u8303\u56f4\u5185\uff0c\u6211\u4eec\u4f18\u5148\u9009\u62e9\u653b\u51fb\u643a\u5e26\u86cb\u7cd5\u7684\u8682\u8681\uff0c\u5176\u6b21\u9009\u62e9\u8ddd\u79bb\u6700\u8fd1\u7684\u8682\u8681\u3002\n2. \u6bcf\u4e00\u4e2a\u9632\u5fa1\u5854\u5f00\u59cb\u653b\u51fb\uff0c\u5982\u679c\u9632\u5fa1\u5854\u7684\u76ee\u6807\u662f\u8ddd\u79bb\u6700\u8fd1\u7684\u8682\u8681\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6263\u9664\u76ee\u6807\u76f8\u5e94\u7684\u8840\u91cf\uff0c\u53cd\u4e4b\uff0c\u6211\u4eec\u8fd0\u7528\u5411\u91cf\u7684\u76f8\u5173\u77e5\u8bc6\uff0c\u5224\u65ad\u653b\u51fb\u8303\u56f4\u4e2d\u7684\u8682\u8681\u662f\u5426\u4e0e\u6fc0\u5149\u6709\u516c\u5171\u70b9\uff0c\u6709\u5c31\u6263\u8840\u3002\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;\u5728\u5199\u5b8c\u51e0\u4f55\u6a21\u677f\u4e4b\u540e\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u5199\u51fa\u653b\u51fb\u7684\u4ee3\u7801\u4e86\u3002\n\n```cpp\nstruct Point\n{\n    double x;\n    double y;\n};\n\nPoint inline TurnPoint(double x,double y)\n{\n    Point NewPoint;\n    NewPoint.x=x;\n    NewPoint.y=y;\n    return NewPoint;\n}\n\nPoint operator +(Point A,Point B)\n{\n    Point NewPoint=TurnPoint(A.x+B.x,A.y+B.y);\n    return NewPoint;\n}\n\nPoint operator -(Point A,Point B)\n{\n    Point NewPoint=TurnPoint(A.x-B.x,A.y-B.y);\n    return NewPoint;\n}\n\ninline int DoublePositive(double x)\n{\n    if(fabs(x)<eps)\n        return 0;\n    if(x<0)\n        return -1;\n    return 1;\n}\n\ninline double Dot(Point A,Point B)\n{\n    double sum=A.x*B.x+A.y*B.y;\n    return sum;\n}\n\ninline double Length(Point A)\n{\n    double sum=sqrt(Dot(A,A));\n    return sum;\n}\n\ninline double Cross(Point A,Point B)\n{\n    double sum=A.x*B.y-A.y*B.x;\n    return sum;\n}\n\ninline double GetSlope(Point A)\n{\n    double sum=A.y/A.x;\n    return sum;\n}\n\ninline double GetPointDistantToSegment(Point P,Point A,Point B)\n{\n    Point Vector_1=B-A;\n    Point Vector_2=P-A;\n    Point Vector_3=P-B;\n    if(DoublePositive(Dot(Vector_1,Vector_2))<0)\n        return Length(Vector_2);\n    if(DoublePositive(Dot(Vector_1,Vector_3))>0)\n        return Length(Vector_3);\n    return fabs(Cross(Vector_1,Vector_2)/Length(Vector_1));\n}\n\ninline double GetDistance(double tx,double ty,double ax,double ay)\n{\n    return sqrt((tx-ax)*(tx-ax)+(ty-ay)*(ty-ay));\n}\n\ninline void TowerAttack()\n{\n    list<antNode>::iterator it;\n    for(int i=1;i<=s;i++)\n    {\n        tower[i].haveTarget=false;\n        tower[i].minDis=99999999;\n        tower[i].haveCakeTarget=false;\n        for(it=antList.begin();it!=antList.end();it++)\n        {\n            double dis=GetDistance(tower[i].x,tower[i].y,it->posx,it->posy);\n            if(dis-r<=eps)\n            {\n                tower[i].haveTarget=true;\n                if(it->isCake)\n                {\n                    tower[i].haveCakeTarget=true;\n                    tower[i].target=it;\n                }\n                else if(dis<tower[i].minDis&&tower[i].haveCakeTarget==false)\n                {\n                    tower[i].target=it;\n                    tower[i].minDis=dis;\n                }\n            }\n            if(tower[i].haveCakeTarget)\n                break;\n        }\n    }\n    for(int i=1;i<=s;i++)\n    {\n        if(tower[i].haveTarget==false)\n            continue;\n        if(tower[i].haveCakeTarget==false)\n            tower[i].target->HP-=d;\n        else\n        {\n            Point A=TurnPoint(tower[i].target->posx,tower[i].target->posy);\n            Point B=TurnPoint(tower[i].x,tower[i].y);\n            for(it=antList.begin();it!=antList.end();it++)\n            {\n                if(it->isCake)\n                {\n                    it->HP-=d;\n                    continue;\n                }\n                Point P=TurnPoint(it->posx,it->posy);\n                double QAQDistance=GetPointDistantToSegment(P,A,B);\n                if(QAQDistance-0.5<eps)\n                    it->HP-=d;\n            }\n        }\n    }\n    return;\n}\n```\n\n------------\n## \u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst double eps=1e-10;\nconst int MAXN=10;\nint n,m,s,d,t;\ndouble r;\nint antCnt;\nint nowt;\nint dirx[4]={0,1,0,-1};\nint diry[4]={1,0,-1,0};\nint totalSpawn;\n\nbool cakeBeTaken;\n\ndouble prepow[35000];\n\nstruct mpNode\n{\n    int message=0;\n    bool canMove=true;\n};\n\nstruct antNode\n{\n    int age;\n    int level;\n    int HP;\n    int posx;\n    int posy;\n    int prex;\n    int prey;\n    int maxHP;\n    bool isCake;\n    antNode(int age,int level,int HP,int x,int y,bool isCake=false):\n            age(age),level(level),HP(HP),posx(x),posy(y),isCake(isCake),prex(x),prey(y),maxHP(HP){}\n};\n\nstruct towerNode\n{\n    int x;\n    int y;\n    double minDis;\n    bool haveTarget;\n    bool haveCakeTarget;\n    list<antNode>::iterator target;\n};\n\nmpNode mp[MAXN][MAXN];\nlist<antNode> antList;\ntowerNode tower[22];\n\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n    while (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n    return x*f;\n}\n\nstruct Point\n{\n    double x;\n    double y;\n};\n\nPoint inline TurnPoint(double x,double y)\n{\n    Point NewPoint;\n    NewPoint.x=x;\n    NewPoint.y=y;\n    return NewPoint;\n}\n\nPoint operator +(Point A,Point B)\n{\n    Point NewPoint=TurnPoint(A.x+B.x,A.y+B.y);\n    return NewPoint;\n}\n\nPoint operator -(Point A,Point B)\n{\n    Point NewPoint=TurnPoint(A.x-B.x,A.y-B.y);\n    return NewPoint;\n}\n\ninline int DoublePositive(double x)\n{\n    if(fabs(x)<eps)\n        return 0;\n    if(x<0)\n        return -1;\n    return 1;\n}\n\ninline double Dot(Point A,Point B)\n{\n    double sum=A.x*B.x+A.y*B.y;\n    return sum;\n}\n\ninline double Length(Point A)\n{\n    double sum=sqrt(Dot(A,A));\n    return sum;\n}\n\ninline double Cross(Point A,Point B)\n{\n    double sum=A.x*B.y-A.y*B.x;\n    return sum;\n}\n\ninline double GetSlope(Point A)\n{\n    double sum=A.y/A.x;\n    return sum;\n}\n\ninline double GetPointDistantToSegment(Point P,Point A,Point B)\n{\n    Point Vector_1=B-A;\n    Point Vector_2=P-A;\n    Point Vector_3=P-B;\n    if(DoublePositive(Dot(Vector_1,Vector_2))<0)\n        return Length(Vector_2);\n    if(DoublePositive(Dot(Vector_1,Vector_3))>0)\n        return Length(Vector_3);\n    return fabs(Cross(Vector_1,Vector_2)/Length(Vector_1));\n}\n\ninline double GetDistance(double tx,double ty,double ax,double ay)\n{\n    return sqrt((tx-ax)*(tx-ax)+(ty-ay)*(ty-ay));\n}\n\ninline void AntSpawn()\n{\n    if(antCnt>=6||mp[0][0].canMove==false)\n        return;\n    antCnt++;\n    totalSpawn++;\n    int nowLevel=((totalSpawn-1)/6)+1;\n    antList.push_back(antNode(0,nowLevel,(int)(4.0*prepow[nowLevel]),0,0,false));\n    mp[0][0].canMove=false;\n    return;\n}\n\ninline void LeaveMessage()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        if(it->isCake==true)\n            mp[it->posx][it->posy].message+=5;\n        else\n            mp[it->posx][it->posy].message+=2;\n    }\n    return;\n}\n\ninline void Move()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        int pos;\n        int ccMaxMessage=0;\n        int chooseCount=0;\n        for(int i=0;i<4;i++)\n        {\n            int ccx=it->posx+dirx[i],ccy=it->posy+diry[i];\n            if(mp[ccx][ccy].canMove==true&&(ccx!=it->prex||ccy!=it->prey)&&ccx>=0&&ccx<=n&&ccy>=0&&ccy<=m)\n            {\n                if(mp[ccx][ccy].message==ccMaxMessage)\n                {\n                    pos=i;\n                    chooseCount++;\n                }\n                else if(mp[ccx][ccy].message>ccMaxMessage)\n                {\n                    ccMaxMessage=mp[ccx][ccy].message;\n                    pos=i;\n                    chooseCount=1;\n                }\n            }\n        }\n        if(chooseCount==0)\n        {\n            it->prex=it->posx;\n            it->prey=it->posy;\n            continue;\n        }\n        else if(chooseCount>1)\n        {\n            for(pos=0;pos<4;pos++)\n            {\n                int ccx=it->posx+dirx[pos],ccy=it->posy+diry[pos];\n                if(mp[ccx][ccy].canMove==true&&(ccx!=it->prex||ccy!=it->prey)&&ccx>=0&&ccx<=n&&ccy>=0&&ccy<=m&&mp[ccx][ccy].message==ccMaxMessage)\n                    break;\n            }\n        }\n        if((it->age+1)%5==0)\n        {\n            for(int i=0;i<4;i++)\n            {\n                pos--;\n                if(pos<0)\n                    pos+=4;\n                int ccx=it->posx+dirx[pos],ccy=it->posy+diry[pos];\n                if(mp[ccx][ccy].canMove==true&&(ccx!=it->prex||ccy!=it->prey)&&ccx>=0&&ccx<=n&&ccy>=0&&ccy<=m)\n                    break;\n            }\n        }\n        it->prex=it->posx;\n        it->prey=it->posy;\n        it->posx+=dirx[pos];\n        it->posy+=diry[pos];\n        mp[it->prex][it->prey].canMove=true;\n        mp[it->posx][it->posy].canMove=false;\n    }\n    return;\n}\n\ninline void GetCake()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        if(it->posx==n&&it->posy==m&&cakeBeTaken==false)\n        {\n            cakeBeTaken=true;\n            it->isCake=true;\n            it->HP=min(it->HP+(int)(floor)((double)it->maxHP/2.0),it->maxHP);\n        }\n    }\n    return;\n}\n\ninline void TowerAttack()\n{\n    list<antNode>::iterator it;\n    for(int i=1;i<=s;i++)\n    {\n        tower[i].haveTarget=false;\n        tower[i].minDis=99999999;\n        tower[i].haveCakeTarget=false;\n        for(it=antList.begin();it!=antList.end();it++)\n        {\n            double dis=GetDistance(tower[i].x,tower[i].y,it->posx,it->posy);\n            if(dis-r<=eps)\n            {\n                tower[i].haveTarget=true;\n                if(it->isCake)\n                {\n                    tower[i].haveCakeTarget=true;\n                    tower[i].target=it;\n                }\n                else if(dis<tower[i].minDis&&tower[i].haveCakeTarget==false)\n                {\n                    tower[i].target=it;\n                    tower[i].minDis=dis;\n                }\n            }\n            if(tower[i].haveCakeTarget)\n                break;\n        }\n    }\n    for(int i=1;i<=s;i++)\n    {\n        if(tower[i].haveTarget==false)\n            continue;\n        if(tower[i].haveCakeTarget==false)\n            tower[i].target->HP-=d;\n        else\n        {\n            Point A=TurnPoint(tower[i].target->posx,tower[i].target->posy);\n            Point B=TurnPoint(tower[i].x,tower[i].y);\n            for(it=antList.begin();it!=antList.end();it++)\n            {\n                if(it->isCake)\n                {\n                    it->HP-=d;\n                    continue;\n                }\n                Point P=TurnPoint(it->posx,it->posy);\n                double QAQDistance=GetPointDistantToSegment(P,A,B);\n                if(QAQDistance-0.5<eps)\n                    it->HP-=d;\n            }\n        }\n    }\n    return;\n}\n\ninline void DestoryBody()\n{\n    bool isErase=false;\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n    {\n        if(isErase==true)\n        {\n            it=antList.begin();\n            isErase=false;\n        }\n        if(it->HP<0)\n        {\n            if(it->isCake)\n            {\n                it->isCake=false;\n                cakeBeTaken=false;\n            }\n            mp[it->posx][it->posy].canMove=true;\n            antList.erase(it);\n            antCnt--;\n            isErase=true;\n        }\n    }\n    return;\n}\n\ninline bool GameOverCheck()\n{\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n        if(it->isCake==true&&it->HP>=0&&it->posx==0&&it->posy==0)\n            return true;\n    return false;\n}\n\ninline void LastUpdate()\n{\n    for(int i=0;i<=n;i++)\n        for(int j=0;j<=m;j++)\n            if(mp[i][j].message)\n                mp[i][j].message--;\n    list<antNode>::iterator it;\n    for(it=antList.begin();it!=antList.end();it++)\n        it->age++;\n    return;\n}\n\ninline void print()\n{\n    if(nowt==t+1)\n        cout<<\"The game is going on\"<<endl;\n    else\n        cout<<\"Game over after \"<<nowt<<\" seconds\"<<endl;\n    list<antNode>::iterator it;\n    cout<<antCnt<<endl;\n    for(it=antList.begin();it!=antList.end();it++)\n        cout<<it->age<<\" \"<<it->level<<\" \"<<it->HP<<\" \"<<it->posx<<\" \"<<it->posy<<endl;\n}\n\nint main()\n{\n    totalSpawn=0;\n    cakeBeTaken=false;\n    antCnt=0;\n    n=read(),m=read(),s=read(),d=read(),r=read();\n    for(int i=1;i<=s;i++)\n    {\n        tower[i].x=read();\n        tower[i].y=read();\n        mp[tower[i].x][tower[i].y].canMove=false;\n    }\n    t=read();\n    prepow[1]=1.1;\n    for(int i=2;i<=(t/6)+1;i++)\n        prepow[i]=prepow[i-1]*1.1;\n    for(nowt=1;nowt<=t;nowt++)\n    {\n        AntSpawn();\n        LeaveMessage();\n        Move();\n        GetCake();\n        TowerAttack();\n        DestoryBody();\n        if(GameOverCheck())\n            break;\n        LastUpdate();\n    }\n    print();\n    return 0;\n}\n```",
        "postTime": 1544165573,
        "uid": 102473,
        "name": "Setsugesuka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "\u6539\u4e86\u4e24\u5929\uff0c~~\u6700\u540e\u53d1\u73b0\u6253\u9519\u53d8\u91cf\u540d\u4e86~~\uff0c\u7ec8\u4e8e\u8fc7\u4e86\u3002\u53d1\u7bc7\u9898\u89e3\u5e86\u795d\u4e00\u4e0b\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u5927\u6a21\u62df\uff0c\u7406\u6e05\u601d\u8def\u8981\u6bd4\u5199\u4ee3\u7801\u91cd\u8981\u3002\u9898\u76ee\u5f88\u5584\u826f\u5730\u7406\u987a\u4e86\u6bcf\u79d2\u5185\u53d1\u751f\u7684\u4e8b\u53ca\u5176\u987a\u5e8f\uff0c\u63a8\u8350\u5199\u6210\u51fd\u6570\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u3002\u4e0b\u9762\u5206\u5757\u8fdb\u884c\u4ecb\u7ecd\uff1a\n\n## \u5168\u5c40\u53d8\u91cf\n`used[i][j]` \u8868\u793a $(i,j)$\u662f\u5426\u6709\u8682\u8681/\u5854\u53f0\u3002  \n`occupy` \u8868\u793a \u86cb\u7cd5\u662f\u5426\u88ab\u62ff\u8d70\u3002  \n`fn` \u8868\u793a \u6e38\u620f\u662f\u5426\u7ed3\u675f\u3002  \n`n,m,s,r,d,t` \u5982\u9898\u610f\u3002  \n`count` \u8868\u793a \u65b0\u8682\u8681\u7684\u7f16\u53f7\n`matrix[i][j]` \u8868\u793a $(i,j)$\u7684\u4fe1\u606f\u7d20\u3002\n\n## \u8682\u8681\n**\u8682\u8681\u6709\u5173\u7684\u51fd\u6570\u90fd\u662f\u7ed3\u6784\u4f53\u91cc\u7684\u6210\u5458\u51fd\u6570**\u3002  \n**\u8682\u8681\u6709\u5173\u7684\u51fd\u6570\u90fd\u662f\u7ed3\u6784\u4f53\u91cc\u7684\u6210\u5458\u51fd\u6570**\u3002  \n**\u8682\u8681\u6709\u5173\u7684\u51fd\u6570\u90fd\u662f\u7ed3\u6784\u4f53\u91cc\u7684\u6210\u5458\u51fd\u6570**\u3002  \n### \u7fa4\u4f53\u50a8\u5b58\n\u7528\u4e00\u4e2a\u961f\u5217\u6765\u50a8\u5b58\u6d3b\u7740\u7684\u8682\u8681\u7f16\u53f7\u3002  \n\u9996\u5148\uff0c\u6240\u6709\u64cd\u4f5c\u7684\u8682\u8681\u90fd\u662f\u6309\u51fa\u751f\u65f6\u95f4\u65e9\u7684\u4f18\u5148\u3002  \n\u8003\u8651\u521a\u51fa\u751f\u7684\u8682\u8681\u4f1a\u8fdb\u961f\u5c3e\uff0c\u5355\u8c03\u6027\u4e0d\u4f1a\u6539\u53d8\u3002 \n\u904d\u5386\u8682\u8681\u65f6\u53ea\u8981\u628a\u6240\u6709\u8682\u8681\u53d6\u51fa\u518d\u653e\u56de\uff0c\u6839\u636e**\u5148\u8fdb\u5148\u51fa**\u539f\u5219\u5355\u8c03\u6027\u4ecd\u4e0d\u53d8\u3002  \n\u56e0\u6b64\u7528\u961f\u5217\u50a8\u5b58\u662f\u53ef\u884c\u7684\uff0c\u4f46\u5fc5\u987b\u786e\u4fdd\u6bcf\u6b21\u53d6\u5b8c\u6d3b\u7740\u7684\u8682\u8681\u3002  \n\n### \u4e2a\u4f53\u50a8\u5b58\n\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5404\u53d8\u91cf\u542b\u4e49\u5728\u6ce8\u91ca\u4e2d\u3002  \n```cpp\nstruct Ant{\n    bool cake; //\u662f\u5426\u62ff\u6709\u86cb\u7cd5\n    int age,x,y,lx,ly; //\u5e74\u9f84\u3001\u5750\u6807\u3001\u4e0a\u4e00\u4f4d\u7f6e\n    int lev,HP,limit; //\u7b49\u7ea7\u3001\u5f53\u524d\u8840\u91cf\u3001\u8840\u91cf\u4e0a\u9650\n} ant[maxm];\n```\n\n### \u65b0\u751f\n\u5176\u5b9e\u5c31\u662f\u8d4b\u521d\u59cb\u503c\uff0c\u8bbe\u73b0\u5728\u662f\u7b2c$count$\u53ea\u8682\u8681\uff0c\u5219\uff1a  \n```cpp\nvoid init(){\n    age = x = y = lx = ly = 0;\n    lev = (count + 5) / 6;\n    HP = limit = 4*(pow(1.1,lev));\n    used[0][0] = 1; //\u4e0d\u8981\u5fd8\u4e86\u5360\u6d1e\u53e3\u4f4d\u7f6e\n}\n```\n\n### \u5206\u6ccc\u4fe1\u606f\u7d20\n\u6709\u86cb\u7cd5\u5206\u6ccc$5$\uff0c\u6ca1\u6709\u86cb\u7cd5\u5206\u6ccc$2$\u3002  \n```cpp\nvoid secret(){\n    if (cake) matrix[x][y] += 5;\n    else matrix[x][y] += 2;\n}\n```\n\n### \u79fb\u52a8\n\u8fd9\u91cc\u6bd4\u8f83\u9ebb\u70e6\u3002\u9996\u5148\u6309 **\u4e1c \u5357 \u897f \u5317 \u4e0d\u52a8** \u7684\u987a\u5e8f\u6784\u5efa\u79fb\u52a8\u6570\u7ec4\uff1a    \n```cpp\nconst int dx[] = {0,1,0,-1,0}; \nconst int dy[] = {1,0,-1,0,0};\n```\n\n\u4ece\u4e1c\u5f00\u59cb\uff0c\u987a\u65f6\u9488\u8f6c\u5230\u5317\uff0c\u5f53\u4e14\u4ec5\u5f53\u4fe1\u606f\u7d20\u53d8\u5927\u65f6\u66f4\u65b0\u65b9\u5411\u3002  \n\u53ef\u4ee5\u53d1\u73b0 $\u6d3b\u52a8\u65f6\u95f4 = \u5e74\u9f84+1$\u3002\u5f53 $(age+1)%5 == 0$ \u65f6\uff0c\u8682\u8681\u4f1a\u4ee5\u5df2\u7ecf\u786e\u5b9a\u7684\u65b9\u5411\u4e3a\u57fa\u51c6\u518d\u9006\u65f6\u9488\u5730\u91cd\u65b0\u627e\u65b9\u5411\uff0c\u8fd9\u65f6\u5019**\u4e0d**\u9700\u8981\u6ee1\u8db3\u4fe1\u606f\u7d20\u6700\u5927\u3002  \n```cpp\nvoid move(){\n    int goal = 4, maxx = -1; //\u9ed8\u8ba4\u4e0d\u52a8\n    \n    //\u6b63\u5e38\u79fb\u52a8\n    for (int i = 0; i < 4; i++){\n        int nx = x + dx[i];\n        int ny = y + dy[i];\n        if (used[nx][ny] || !inMap(nx,ny) || (nx == lx && ny == ly))\n            continue;\n        if (matrix[nx][ny] > maxx)\n            maxx = matrix[nx][ny],\n            goal = i;\n    }\n    \n    //\u9006\u65f6\u9488\n    if ((age+1)%5 == 0 && goal < 4){ //\u53db\u9006 && \u6709\u8def \n        for (int i = 1; i <= 4; i++){\n            int nx = x + dx[(goal-i+4)%4];\n            int ny = y + dy[(goal-i+4)%4];\n            if (used[nx][ny] || !inMap(nx,ny) || (nx == lx && ny == ly))\n                continue;    \n            goal = (goal-i+4)%4; \n            break; //\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u5c31\u9000\u51fa \n        }\n    }\n    \n    //\u79fb\u52a8\n    lx = x; ly = y; used[lx][ly] = 0; \n    x += dx[goal]; y += dy[goal]; used[x][y] = 1;\n}\n```\n\n### \u625b\u86cb\u7cd5\n\u625b\u86cb\u7cd5\u65f6\u4e3b\u8981\u5224\u65ad \u86cb\u7cd5\u5728\u4e0d\u5728\u539f\u4f4d \u4ee5\u53ca \u8682\u8681\u5728\u4e0d\u5728\u86cb\u7cd5\u5904\u3002  \n```cpp\nvoid getCake(){\n    if (occupy) return ; \n    if (x == n && y == m){\n        cake = occupy = 1;\n        HP = min(limit,HP+limit/2); //\u56de\u8840 \u4e14 \u4e0d\u80fd\u8d85\u8fc7\u4e0a\u9650\n    }\n}\n```\n\n### \u6b7b\u4ea1\n\u6b7b\u4ea1\u8981\u5904\u7406\u4e24\u4ef6\u4e8b\uff1a\u86cb\u7cd5\u5f52\u4f4d \u5c38\u4f53\u6d88\u5931\u3002  \n```cpp\nbool die(){\n    if (HP >= 0) return false;\n    if (cake) occupy = 0; //\u86cb\u7cd5\u5f52\u4f4d\n    used[x][y] = 0; //\u5c38\u4f53\u6d88\u5931\n    return true;\n}\n```\n\n### \u8f93\u51fa\n\u6309\u9898\u76ee\u8981\u6c42\u8f93\u51fa\u76f8\u5e94\u4fe1\u606f\u3002\n```cpp  \nvoid output(){ \n    printf(\"%d %d %d %d %d\\n\",age,lev,HP,x,y);\n}\n```\n\n## \u70ae\u53f0\n**\u70ae\u53f0\u6709\u5173\u7684\u51fd\u6570\u90fd\u662f\u7ed3\u6784\u4f53\u91cc\u7684\u6210\u5458\u51fd\u6570**\u3002  \n**\u70ae\u53f0\u6709\u5173\u7684\u51fd\u6570\u90fd\u662f\u7ed3\u6784\u4f53\u91cc\u7684\u6210\u5458\u51fd\u6570**\u3002  \n**\u70ae\u53f0\u6709\u5173\u7684\u51fd\u6570\u90fd\u662f\u7ed3\u6784\u4f53\u91cc\u7684\u6210\u5458\u51fd\u6570**\u3002\n### \u4e2a\u4f53\u50a8\u5b58\n\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5404\u53d8\u91cf\u542b\u4e49\u5728\u6ce8\u91ca\u4e2d\u3002\n```cpp\nstruct Tower{\n    int x,y,tar; //\u70ae\u53f0\u4f4d\u7f6e\u3001\u76ee\u6807\u8682\u8681\u7684\u7f16\u53f7\n    Tower(int _x = 0, int _y = 0, int _tar = 0) : x(_x), y(_y), tar(_tar) {}\n} tower[maxn];\n```\n\n### \u8ba1\u7b97\u8ddd\u79bb\n\u4e3a\u4e86\u4fdd\u8bc1\u7cbe\u5ea6\uff0c\u4e0d\u8fdb\u884c\u5f00\u65b9\u64cd\u4f5c\u3002\n```cpp\nint getDis(int x, int y, int a, int b){\n    return pow(x-a,2)+pow(y-b,2);\n}\n```\n\n### \u5bfb\u627e\u76ee\u6807\n\u5f53\u76ee\u6807\u6709\u86cb\u7cd5\u65f6\uff0ctar\u4e3a\u8d1f\uff1b    \n\u76ee\u6807\u662f\u6700\u8fd1\u8ddd\u79bb\u65f6\uff0ctar\u4e3a\u6b63\uff1b  \n\u8303\u56f4\u5185\u6ca1\u6709\u8682\u8681\u65f6\uff0ctar\u4e3a0\u3002  \n```cpp\nvoid getTar(){\n    int minn = maxm; tar = 0;\n    for (int p = 1; p <= q.size(); p++){\n        int id = q.front(); \n        q.push(id); q.pop(); \n        if (tar < 0) continue; //\u76ee\u6807\u625b\u86cb\u7cd5\u5c31\u4e0d\u5fc5\u518d\u627e\u76ee\u6807\u4e86\uff0c\u4e0dbreak\u662f\u786e\u4fdd\u961f\u5217\u5355\u8c03\u6027\u4e0d\u53d8\n        \n        int d = getDis(x,y,ant[id].x,ant[id].y);\n        if (d <= r*r && minn > d) tar = id, minn = d; //\u6709\u66f4\u8fd1\u8ddd\u79bb\uff0c\u66f4\u65b0\u76ee\u6807\n        if (d <= r*r && ant[id].cake) tar = -id; //\u627e\u5230\u625b\u86cb\u7cd5\u7684\uff0c\u66f4\u65b0\u76ee\u6807\n    }\n}\n```\n\n### \u5224\u65ad\u662f\u5426\u88ab\u6b83\u53ca\n\u672c\u9898\u96be\u70b9\u4e4b\u4e00\uff1a\u5224\u65ad\u7ebf\u6bb5\u4e0e\u5706\u662f\u5426\u76f8\u4ea4\u3002  \n\u5927\u6982\u5c31\u662f\u5148\u7b97\u5706\u4e0e\u76f4\u7ebf\u7684\u8ddd\u79bb\uff0c\u82e5\u5927\u4e8e$0.5$\u5219\u80af\u5b9a\u4e0d\u76f8\u4ea4\u3002  \n\u63a5\u7740\u5224\u4ea4\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\u3002\u5176\u4ed6\u7684\u5927\u4f6c\u8bb2\u5f97\u5f88\u6e05\u695a\uff0c~~\u90fd\u628a\u6211\u8bb2\u4f1a\u4e86~~\uff0c\u5706\u5fc3\u5230\u7ebf\u6bb5\u4e24\u7aef\u70b9\u8fde\u7ebf\uff0c\u5404\u81ea\u4e0e\u7ebf\u6bb5\u6240\u5939\u7684\u89d2\u82e5\u5168\u662f\u9510\u89d2\uff0c\u5219\u4ea4\u70b9\u5728\u7ebf\u6bb5\u4e0a\u3002\n```cpp\nbool involved(int id, int tar){\n    if (id == tar) return true; //\u80af\u5b9a\u8981\u6253\u76ee\u6807\n\n    Ant g = ant[tar], p = ant[id]; //g\u662f\u76ee\u6807\u8682\u8681\uff0cp\u662f\u8def\u8fc7\u7684\u8682\u8681\n    int A = 0, B = 0, C = 0; \n    A = g.y-y; B = x-g.x; C = g.x*y - x*g.y; //\u76f4\u7ebf\u4e00\u822c\u5f0f\n    \n    double dis1 = 1.0*A*p.x+B*p.y+C; dis1 *= dis1; //\u4e3a\u786e\u4fdd\u7cbe\u5ea6\u4e0d\u5f00\u65b9\n    double dis2 = 0.25*(A*A+B*B);\n    if (dis1 > dis2) return false;\n    \n    int ang1 = (g.x-x)*(p.x-x)+(g.y-y)*(p.y-y); \n    int ang2 = (x-g.x)*(p.x-g.x)+(y-g.y)*(p.y-g.y);\n    return ang1 > 0 && ang2 > 0;\n}\n```\n\n### \u53d1\u52a8\u653b\u51fb\n\u904d\u5386\u6240\u6709\u6d3b\u7740\u7684\u8682\u8681\uff0c\u5224\u65ad\u662f\u5426\u88ab\u653b\u51fb\u5373\u53ef\u3002  \n\u4e0d\u96be\u53d1\u73b0\u82e5\u76ee\u6807\u662f\u6700\u8fd1\u7684\u8682\u8681\u5219\u53ea\u6709\u4ed6\u88ab\u653b\u51fb\u3002\n```cpp\nvoid attack(){\n    if (!tar) return ; //\u6ca1\u6709\u76ee\u6807\u5c31\u4e0d\u653b\u51fb\n    \n    if (tar > 0) ant[id].HP -= d;\n    else for (int p = 1; p <= q.size(); p++){\n        int id = q.front();\n        q.push(id); q.pop();\n        if (involved(id,-tar)) //\u6b64\u8682\u8681\u88ab\u6b83\u53ca\n            ant[id].HP -= d;\n    }\n}\n```\n\n## \u4fe1\u606f\u7d20\u51cf\u5c11 \n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u4f46\u8981\u6ce8\u610f\u4ece0\u5f00\u59cb\uff0c\u8fd9\u91cc\u88ab\u5751\u4e86\u597d\u4e45\u3002\n```cpp\nvoid reduce(){\n    for (int i = 0; i <= n; i++)\n        for (int j = 0; j <= m; j++)\n            if (matrix[i][j]) matrix[i][j]--; \n}\n```\n\n## \u5e74\u9f84\u589e\u52a0\n```cpp\nvoid raise(){\n    for (int p = 1; p <= q.size(); p++){\n        ant[q.front()].age++;\n        q.push(q.front()); q.pop();\n    }\n}\n```\n\n## \u8f93\u51fa\u6d3b\u7740\u7684\u8682\u8681\n```cpp\nvoid output(){\n    printf(\"%d\\n\",q.size());\n    for (int p = 1; p <= q.size(); p++){\n        ant[q.front()].output();\n        q.push(q.front()); q.pop();\n    }\n}\n```\n\n## \u4e3b\u51fd\u6570\n\u81f3\u6b64\uff0c\u5b8c\u6210\u4e86\u6240\u6709\u7684\u51fd\u6570\u3002\u63a5\u4e0b\u6765\u8981\u505a\u7684\u5c31\u662f\u628a\u6240\u6709\u7684\u64cd\u4f5c\u6309\u9898\u76ee\u8bb2\u7684\u987a\u5e8f\u653e\u5728\u4e00\u8d77\uff1a\n```cpp\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%d%d%d\",&s,&d,&r);\n    for (int i = 1; i <= s; i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y); \n        tower[i] = Tower(x,y);\n        used[x][y] = 1;\n    }\n    scanf(\"%d\",&t); \n    \n    for (int i = 1; i <= t; i++){\n        //\u8682\u8681\u51fa\u751f \n        if (q.size() < 6 && !used[0][0])\n            ant[++count].init(), q.push(count);\n            \n        //\u5206\u6ccc\u4fe1\u606f\u7d20 \n        for (int p = 1; p <= q.size(); p++){\n            ant[q.front()].secret();\n            q.push(q.front()); q.pop();\n        }\n        \n        //\u79fb\u52a8 + \u625b\u86cb\u7cd5 \n        for (int p = 1; p <= q.size(); p++){\n            ant[q.front()].move();\n            ant[q.front()].getCake();\n            q.push(q.front()); q.pop();\n        }\n        \n        //\u7784\u51c6 \n        for (int p = 1; p <= s; p++)\n            tower[p].getTar();\n            \n        //\u653b\u51fb\n        for (int p = 1; p <= s; p++) \n            tower[p].attack();\n            \n        //\u6b7b\u4ea1\n        int l = q.size();\n        for (int p = 1; p <= l; p++){\n            if (!ant[q.front()].die())  //\u6b7b\u4e86\u5c31\u4e0d\u7528push\u4e86\n                q.push(q.front());\n            q.pop();\n        }\n        \n        //\u68c0\u6d4b\u6e38\u620f\u7ed3\u675f\n        for (int p = 1; p <= q.size(); p++){\n            int id = q.front();\n            q.push(id); q.pop();\n            if (!ant[id].x && !ant[id].y && ant[id].cake)\n                fn = 1;\n        }\n        \n        //\u7ed3\u675f \n        if (fn){\n            printf(\"Game over after %d seconds\\n\",i); \n            output(); return 0;\n        }\n        \n        //\u4fe1\u606f\u7d20\u51cf\u5c11 \u5e74\u9f84\u589e\u52a0\n        reduce(); raise(); \n    }\n    \n    printf(\"The game is going on\\n\");\n    output();\n    return 0;    \n}\n```\n",
        "postTime": 1571230534,
        "uid": 129873,
        "name": "ReModer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "\u8bf4\u51e0\u4e2a(\u6211\u88ab\u5751\u5230\u7684)\u5751\u70b9\uff1a\n\n1.\u6700\u9ad8\u8840\u91cf\u8981\u7528\u6d6e\u70b9\u6570\u8bb0\u5f55(\u56e0\u4e3a\u56de\u8840\u7684\u8ba1\u7b97\u53d6\u5f97\u6700\u9ad8\u8840\u91cf\u7684\u4e00\u534a\u662f\u6700\u9ad8\u8840\u91cf\u53d6\u6574\u524d\u7684\u4e00\u534a)\n\n2.\u65b0\u751f\u8682\u8681\u7684\u7b49\u7ea7\u8ba1\u7b97/\u662f\u4f9d\u636e/\u65b0\u751f\u8682\u8681\u4ece\u5f00\u5c40\u7b97\u8d77\u662f\u7b2c\u51e0\u4e2a\u65b0\u751f\u8682\u8681\u800c\u4e0d\u662f\u65f6\u95f4\n\n\u55ef\u3002\u3002\n\n\u603b\u4e4b\u8fd9\u9898\u5c31\u662f\u8981\u597d\u597d\u8bfb\u9898\n\n\u7136\u540e\u601d\u7ef4\u96be\u5ea6\u5927\u4e00\u4e9b\u7684\u662f\u8682\u8681\u662f\u5426\u88ab\u6253\u4e2d\u7684\u5224\u5b9a\uff0c\u518d\u5c0f\u5fc3\u4e00\u4e0b\u4e0d\u8981\u5199\u4e32\u4e0b\u6807\u53d8\u91cf\u4e00\u7c7b\uff0c\u5012\u817e\u597d\u5750\u6807\u4ec0\u4e48\u7684\u5c31\u5dee\u4e0d\u591a\u4e86...\n\n\u5bf9\u4e8e\u6253\u4e2d\u5224\u5b9a\uff08\u76f8\u5f53\u4e8e\u5706\u548c\u76f4\u7ebf\u76f8\u4ea4\u7684\u5224\u5b9a\uff09\uff1a\n\n0.\u5176\u5b9e\u6211 \u4e00\u5f00\u59cb\u4e5f\u4e0d\u4f1a\uff0c\u6211\u662f\u770b\u7740\u8fd9\u4e2a\u535a\u5ba2\u5199\u51fa\u6765\u7684https://blog.csdn.net/syz201558503103/article/details/78400858\n\n\u8fdb\u5165\u6b63\u9898\n\n1.\u9996\u5148\u770b\u7ebf\u6bb5\u7aef\u70b9\uff0c\u53ea\u8981\u6709\u4e00\u5934\u5728\u5706\u5185\u5c31\u80af\u5b9a\u76f8\u4ea4\n\n2.\u4e24\u5934\u90fd\u4e0d\u5728\u5706\u5185\uff0c\u770b\u5706\u5fc3\u5230\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u8ddd\u79bb\n\n\u70b9(x0,y0)\u5230\u76f4\u7ebf(Ax+By+C=0)\u8ddd\u79bb\u516c\u5f0f:\n\n|Ax0+By0+C|/sqrt(A\u00d7A+B\u00d7B)\n\n\u7136\u540e\u8bbe\u6fc0\u5149\u4e3a\u7ebf\u6bb5AB\uff0cA(x1,y1)B(x2,y2)\n\n\u53ef\u63a8\u5bfc\u51faAB\u6240\u5728\u76f4\u7ebf\u7684\u4e00\u822c\u5f0f\u4e2d\u7684A=y1-y2,B=x2-x1,C=x1y2-x2y1\n\n3.\u4e3a\u9632\u6b62\u5706\u5fc3\u5230\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u5782\u7ebf\u5782\u8db3\u4e0d\u5728\u7ebf\u6bb5\u4e0a\uff0c\u8fd8\u9700\u8981\u518d\u5224\u65ad\u4e00\u4e0b\n\n\u5706\u5fc3\u5230\u7ebf\u6bb5\u4e24\u7aef\u70b9\u5404\u8fde\u4e00\u6761\u8fb9\uff0c\u8bbe\u7ebf\u6bb5\u4e24\u7aef\u70b9\u4e3aA,B,\u5706\u5fc3\u4e3aO\n\n\u5219\u53ea\u6709\u5728\u2220OBA\u548c\u2220OAB\u90fd\u4e3a\u9510\u89d2\u65f6\u624d\u7b97\u76f8\u4ea4\n\n\u53ef\u4ee5\u7528\u4e24\u4e2a\u89d2\u4f59\u5f26\u503c\u7684\u6b63\u8d1f\u5224\u65ad\n\n\u7136\u540e\u4f59\u5f26\u503c\u53ef\u4ee5\u7528cos<b,c>=b\u00b7c/|b|\u00d7|c|\u6c42(b,c\u4e3a\u5411\u91cf)\n\n\u7531\u4e8e\u53ea\u5173\u5fc3\u6b63\u8d1f\uff0c\u6700\u540e\u53ea\u7b97b\u00b7c\u6b63\u8d1f\u5c31\u597d\u4e86\u3002\n\n\u6bd4\u5982\u7b97\u2220BAO\n\nb\u00b7c=AB\u00b7AO=(x2-x1,y2-y1)\u00b7(x0-x1,y0-y1)=(x2-x1)(x0-x1)+(y2-y1)(y0-y1)\n\n\u7b97\u2220ABO\u5c31\u628ax1\u5168\u53d8x2,x2\u5168\u53d8x1,y1\u5168\u53d8y2,y2\u5168\u53d8y1\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u6700\u597d\u5728\u52a0\u4e2a\u7cbe\u5ea6\u63a7\u5236\u4ec0\u4e48\u7684\n\n\u6700\u540eAC\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\nint n,m,t,s,d,r,antcnt,messagemap[11][11],things[11][11],spawnidx,//1--ant,2--tower\n//n,m,s,d,r\u662f\u9898\u76ee\u4e2d\u7684nmsdr\n//antcnt:\u5b58\u6d3b\u8682\u8681\u4e2a\u6570,messagemap:\u8bb0\u5f55\u4fe1\u606f\u7d20,things:\u8bb0\u5f55\u5f53\u524d\u4f4d\u7f6e\u662f\u5426\u6709\u8682\u8681\u6216\u70ae\u53f0\n//spawnidx:\u4ece\u5f00\u5c40\u7b97\u65b0\u751f\u4e86\u51e0\u53ea\u8682\u8681 \nposdet[7][2],cakealive=1;\nstruct ant\n{\n    int age,lvl,health,x,y,alive,cakeon,nowfact;\n    //\u4f9d\u6b21\u4e3a\u5e74\u9f84\uff0c\u7b49\u7ea7\uff0c\u5f53\u524d\u8840\u91cf\uff0c\u6240\u5728\u5750\u6807\uff0c\u662f\u5426\u5b58\u6d3b\uff0c\u662f\u5426\u6301\u6709\u86cb\u7cd5\uff0c\u73b0\u5728\u671d\u5411\n\t//1\u5411\u4e1c,2\u5411\u5357,3\u5411\u897f,4\u5411\u5317,5\u9759\u6b62 \n    double maxh;//\u6d6e\u70b9\u6570\u8bb0\u5f55\u6700\u5927\u8840\u91cf\uff08\u5751\u70b9\u4e4b\u4e00\uff09 \n    bool operator<(struct ant b)const//\u7531\u9898\u610f\u53ef\u77e5\u4e0d\u7ba1\u4ec0\u4e48\u4e8b\u60c5\u6bcf\u6b21\u603b\u662f\u6311\u5e74\u8fc8\u7684\u8682\u8681\u5148\u64cd\u4f5c \n    {\n        if(alive!=b.alive)return alive>b.alive;\n        return age>b.age;\n    }\n}ants[10];\nstruct tower{int x,y,target;}towers[22];\ndouble ksm(int y)\n{\n    if(y==0)return 1;\n    if(y==1)return 1.1;\n    double tp=ksm(y>>1);\n    if(y&1)return tp*tp*1.1;\n    return tp*tp;\n}\nvoid spawnant()\n{\n    if(antcnt<6)\n    {\n        for(int i=1;i<=6;i++)if(ants[i].alive&&ants[i].x==0&&ants[i].y==0)return;//0,0\u4e0d\u80fd\u6709\u8682\u8681 \n        spawnidx++;//\u8bb0\u5f55\u597d\u65b0\u751f\u8682\u8681\u81ea\u7684\u5f00\u5c40\u6765\u662f\u7b2c\u51e0\u53ea\u8682\u8681 \n        for(int i=1;i<=6;i++)\n        {\n            if(ants[i].alive==0)//\u5982\u679c\u53d1\u73b0\u7a7a\u7f3a\u8682\u8681\u4f4d\uff0c\u5c06\u5176\u8f6c\u751f\u590d\u6d3b(emm...) \n            {\n                ants[i].alive=1;\n                ants[i].age=0;//\u5e74\u9f84\u4ece\u96f6\u5f00\u59cb \n                ants[i].lvl=(spawnidx+5)/6;//\u5751\u70b9\u4e4b\u4e00\uff1a\u8682\u8681\u7b49\u7ea7\u662f\u6309\u8682\u8681\u751f\u6210\u6b21\u5e8f\u7b97\uff0c\u4e0d\u662f\u6309\u8682\u8681\u751f\u6210\u65f6\u95f4\u7b97 \n                ants[i].health=floor(ants[i].maxh=ksm(ants[i].lvl)*4.0);\n                ants[i].x=ants[i].y=0;\n                ants[i].nowfact=5;\n                ants[i].cakeon=0;\n                things[ants[i].x][ants[i].y]=1;\n                antcnt++;\n                break;\n            }\n        }\n    }\n}\nvoid message(int antidx)//\u9057\u7559\u4fe1\u606f\u7d20 \n{\n    if(ants[antidx].alive)\n    messagemap[ants[antidx].x][ants[antidx].y]+=(2+ants[antidx].cakeon*3);\n}\nbool oppo(int a,int b)//\u5224\u65ad\u4e24\u4e2a\u6570\u5b57\u4ee3\u8868\u65b9\u5411\u662f\u5426\u76f8\u53cd \n{\n    if(a>b)\n    {\n        int t=a;\n        a=b;\n        b=t;\n    }\n    if(b==5)return false;\n    return b-a==2;\n}\nint getfact(int id,int spt)\n{\n    message(id);//\u9057\u7559\u4fe1\u606f\u7d20 \n    int tprt=5,mxmess=-1;\n    for(int f=1;f<=4;f++)//\u6b63\u4e1c\u5f00\u59cb\u987a\u65f6\u9488\u8f6c \n    {\n        if(oppo(f,ants[id].nowfact))continue;//\u548c\u4ee5\u524d\u7684\u65b9\u5411\u53cd\u7740\u6765\u4f1a\u56de\u53bb \n        int fx=ants[id].x+posdet[f][0],fy=ants[id].y+posdet[f][1];\n        if(fx<0||fx>n||fy<0||fy>m)continue;//\u4e0d\u80fd\u51fa\u8fb9\u754c \n        if(things[fx][fy])continue;//\u4e0d\u80fd\u8e29\u5728\u8682\u8681\u6216\u5854\u4e0a \n        if(messagemap[fx][fy]>mxmess)//\u9009\u62e9\u4fe1\u606f\u7d20\u6700\u591a \n        {\n            mxmess=messagemap[fx][fy];\n            tprt=f;\n        }\n    }//\u5982\u679c\u56db\u9762\u78b0\u58c1tprt\u5c31\u4e0d\u4f1a\u66f4\u65b0\uff0c\u5c31\u4f1a\u53d8\u4e3a5\uff0c\u4e5f\u5c31\u662f\u8682\u8681\u88ab\u5361\u4f4f\u4e0d\u52a8\u7684\u60c5\u51b5 \n    if(spt&&tprt!=5)//\u6bcf5s\u7684\u7279\u6b8a\u884c\u52a8 \n    {\n        for(int de=1;de<=4;de++)\n        {\n            tprt=(tprt+2)%4+1;//\u671d\u5411\u9006\u65f6\u948890 \n            if(oppo(ants[id].nowfact,tprt))continue;//\u4e0d\u80fd\u56de\u53bb \n            int fx=ants[id].x+posdet[tprt][0],fy=ants[id].y+posdet[tprt][1];\n            if(fx<0||fx>n||fy<0||fy>m)continue;//\u4e0d\u51fa\u8fb9\u754c \n            if(things[fx][fy])continue;//\u4e0d\u80fd\u6709\u4e1c\u897f\u963b\u6321 \n            break;//\u8f6c\u5230\u7b2c\u4e00\u4e2a\u5408\u6cd5\u4f4d\u7f6e\u7ed3\u675f \n        }\n    }\n    return tprt;\n}\nvoid move()\n{\n    std::sort(ants+1,ants+7);//\u5e74\u9f84\u5927\u7684\u5148\u79fb\u52a8 \n    for(int i=1;i<=6;i++)\n    {\n        if(!ants[i].alive)continue;\n        ants[i].nowfact=getfact(i,!((ants[i].age+1)%5));//\u83b7\u53d6\u79fb\u52a8\u65b9\u5411 \n        things[ants[i].x][ants[i].y]=0;//\u79fb\u52a8 \n        ants[i].x+=posdet[ants[i].nowfact][0];\n        ants[i].y+=posdet[ants[i].nowfact][1];\n        things[ants[i].x][ants[i].y]=1;\n    }\n}\nvoid trycake()\n{\n    if(cakealive)//\u5982\u679c\u86cb\u7cd5\u8fd8\u5728 \n    for(int i=1;i<=6;i++)\n    {\n        if(ants[i].alive)\n        {\n            if(ants[i].x==n&&ants[i].y==m)//\u82e5\u5b58\u5728\u8682\u8681\u80fd\u62ac\u8d70\u86cb\u7cd5 \n            {\n                ants[i].cakeon=1;//\u62ac\u8d70 \n                ants[i].health+=floor(ants[i].maxh/2.0);//\u56de\u8840 \n                cakealive=0;//\u6709\u7684\u86cb\u7cd5\u8fd8\u6d3b\u7740\uff0c\u4f46\u5b83\u5df2\u7ecf\u6b7b\u4e86 \n                if(ants[i].health>floor(ants[i].maxh))ants[i].health=floor(ants[i].maxh);\n                break;\n            }\n        }\n    }\n}\nint getdis2(int x1,int y1,int x2,int y2){return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);}//\u83b7\u53d6\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9 \ndouble eps=1e-8;\nint seg(double nu)\n{\n    if(nu<-eps)return -1;\n    if(nu>eps)return 1;\n    return 0;\n}\nbool damagejudge(int tid,int aid)//\u5224\u65ad\u6709\u6ca1\u6709\u6253\u5230(\u76f4\u7ebf\u4e0e\u5706\u7684\u76f8\u4ea4\u5224\u5b9a) \n{\n    int bex=towers[tid].x,bey=towers[tid].y;//\u76f4\u7ebf\u8d77\u59cb\u4f4d\u7f6e\u662f\u6fc0\u5149\u5854\u4f4d\u7f6e \n    int enx=ants[towers[tid].target].x,eny=ants[towers[tid].target].y;//\u7ec8\u6b62\u4f4d\u7f6e\u662f\u7784\u51c6\u4f4d\u7f6e \n    int tax=ants[aid].x,tay=ants[aid].y;//\u88ab\u5224\u65ad\u662f\u5426\u6263\u8840\u7684\u8682\u8681!=\u88ab\u7784\u51c6\u7684\u8682\u8681 \n    //\u5751\u70b9\u4e4b\u4e00:\u4ee3\u8868\u8682\u8681\u7684\u5706\u7684\u76f4\u5f84\u662f1\uff01\uff01\uff01\u3010\u6240\u4ee5\u534a\u5f84\u662f0.5\u3011 \n    if(seg(sqrt((double)getdis2(bex,bey,tax,tay))-0.5)<=0)return true;//\u53ea\u8981\u7ebf\u6bb5\u6709\u4e00\u5934\u8fdb\u4e86\u5706\u4e00\u5b9a\u662f\u6253\u5230\u4e86 \n    if(seg(sqrt((double)getdis2(enx,eny,tax,tay))-0.5)<=0)return true;\n    //if(bex==enx&&bey==eny)return false;\n    double dis=0,a=bey-eny,b=enx-bex,c=bex*eny-enx*bey;//\u5426\u5219\u770b\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u4e0e\u5706\u95f4\u8ddd \n    dis=abs(a*tax+b*tay+c)/sqrt((double)a*a+b*b);\n    if(seg(dis-0.5)>0)return false;\n    double ang1=(enx-bex)*(tax-bex)+(eny-bey)*(tay-bey);//\u9632\u6b62\u51fa\u73b0\u5706\u5fc3\u5230\u76f4\u7ebf\u5782\u7ebf\u4e0d\u5728\u7ebf\u6bb5\u4e0a\u7684\u60c5\u51b5 \n    double ang2=(bex-enx)*(tax-enx)+(bey-eny)*(tay-eny); \n    return seg(ang1)>0&&seg(ang2)>0;\n}\nvoid attack()\n{\n    std::sort(ants+1,ants+7);//\u9898\u610f\u53ef\u77e5\u9632\u5fa1\u5854\u662f\u559c\u6b22\u5148\u6b3a\u8d1f\u5148\u8f88\u7684\u5c51 \n    for(int i=1;i<=s;i++)//\u786e\u5b9a\u6bcf\u4e00\u4e2a\u9632\u5fa1\u5854\u7784\u51c6\u7684\u8682\u8681 \n    {\n        int mx=2000000000,pos=0;\n        for(int j=1;j<=6;j++)\n        {\n            int disd=getdis2(ants[j].x,ants[j].y,towers[i].x,towers[i].y);\n            if(ants[j].alive==0)continue;//\u4e0d\u6253\u6b7b\u7684 \n            if(disd>r*r)continue;//\u5c04\u7a0b\u4e4b\u5916\u7784\u4e0d\u5230 \n            if(ants[j].cakeon)//\u5148\u6253\u6709\u86cb\u7cd5\u7684 \n            {\n                pos=j;\n                break;\n            }\n            if(mx>disd)//\u5426\u5219\u6311\u8fd1\u7684\u6253 \n            {\n                mx=disd;\n                pos=j;\n            }\n        }\n        towers[i].target=pos;//\u5b9a\u4e0b\u76ee\u6807 \n    }\n    for(int i=1;i<=s;i++)//\u679a\u4e3e\u6240\u6709\u5854 \n    {\n        if(towers[i].target==0)continue;//\u6ca1\u6709\u80fd\u6253\u5230\u7684\u76ee\u6807\u5c31\u8df3\u8fc7 \n        for(int j=1;j<=6;j++)\n        {\n            if(ants[j].alive==0)continue;//\u4e0d\u6253\u6b7b\u7684(\u4f46\u5141\u8bb8\u97ad\u5c38\u5f53\u524d\u79d2\u7684\u8682\u8681) \n            if(damagejudge(i,j))ants[j].health-=d;//\u5982\u679c\u6fc0\u5149\u78b0\u5230\u8682\u8681\u6263\u8840 \n        }\n    }\n}\nvoid deathjudge()\n{\n    for(int i=1;i<=6;i++)\n    if(ants[i].alive)\n    {\n        if(ants[i].health<0)//\u6709\u7684\u8682\u8681\u6d3b\u7740\uff0c\u4f46\u5b83\u5df2\u7ecf\u6b7b\u4e86 \n        {\n            ants[i].alive=0;\n            things[ants[i].x][ants[i].y]=0;//\u6b7b\u8682\u8681\u8bf7\u51fa\u5730\u56fe \n            if(ants[i].cakeon)//\u5f52\u8fd8\u86cb\u7cd5 \n            {\n                ants[i].cakeon=0;\n                cakealive=1;\n            }\n            antcnt--;\n        }\n    }\n}\nbool failjudge()\n{\n    if(cakealive)return false;\n    for(int i=1;i<=6;i++)//\u679a\u4e3e\u6240\u6709\u8682\u8681\uff0c\u82e5\u5b58\u5728\u6d3b\u7740\u4e14\u6709\u86cb\u7cd5\u4e14\u5728\u8681\u7a9d\u7684\u8682\u8681\u5c31\u51c9\u4e86 \n    if(ants[i].alive&&ants[i].cakeon&&ants[i].x==0&&ants[i].y==0)\n    return true;\n    return false;\n}\nvoid dessage(){for(int i=0;i<=n;i++)for(int j=0;j<=m;j++)messagemap[i][j]-=(bool)messagemap[i][j];}//\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u5427 \nvoid ageupdate(){for(int i=1;i<=6;i++)if(ants[i].alive)ants[i].age++;}//\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u5427 \nint main()\n{\n    posdet[1][0]=0,posdet[1][1]=1;\n    posdet[2][0]=1,posdet[2][1]=0;\n    posdet[3][0]=0,posdet[3][1]=-1;\n    posdet[4][0]=-1,posdet[4][1]=0;\n    posdet[5][0]=0,posdet[5][1]=0;//\u521d\u59cb\u5316\u4f4d\u79fb\u6570\u7ec4 \n    //freopen(\"antbuster_ex.in\",\"r\",stdin);\n    //freopen(\"antbuster_ex.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    scanf(\"%d%d%d\",&s,&d,&r);\n    for(int i=1;i<=s;i++)\n    {\n        scanf(\"%d%d\",&towers[i].x,&towers[i].y);//\u8f93\u5165\u5854\u5750\u6807 \n        things[towers[i].x][towers[i].y]=2;\n    }\n    scanf(\"%d\",&t);\n    int i,fail=0;\n    for(i=1;i<=t;i++)\n    {\n        spawnant();//\uff08\u8bd5\u56fe\uff09\u751f\u6210\u8682\u8681 \n        move();//\u79fb\u52a8 \n        trycake();//\uff08\u8bd5\u56fe\uff09 \u62a2\u86cb\u7cd5 \n        attack();//\u9632\u5fa1\u5854\u8fdb\u653b \n        deathjudge();//\u6b7b\u4ea1\u5224\u65ad(\u6e05\u7406\u6b7b\u4ea1\u8682\u8681) \n        fail=failjudge();//\u5931\u8d25\u5224\u65ad \n        if(fail)break;\n        dessage();//\u4fe1\u606f\u7d20\u6325\u53d1 \n        ageupdate();//\u6da8\u5e74\u9f84 \n    }\n    std::sort(ants+1,ants+7);//\u6392\u5e8f\u8f93\u51fa \n    if(fail)//fl=true,\u5931\u8d25\n    printf(\"Game over after %d seconds\\n\",i);\n    else printf(\"The game is going on\\n\");\n    printf(\"%d\\n\",antcnt);\n    for(int i=1;i<=6;i++)\n    if(ants[i].alive)printf(\"%d %d %d %d %d\\n\",ants[i].age,ants[i].lvl,ants[i].health,ants[i].x,ants[i].y);\n    return 0;\n}\n```",
        "postTime": 1540637370,
        "uid": 53998,
        "name": "ejfbdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "\u771f\u662f\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u662f\u4e00\u9053\u8003\u9a8c\u8010\u5fc3\u3001\u6bc5\u529b\u548c\u9605\u8bfb\u80fd\u529b\u7684\u4e00\u9053\u597d\u9898\u3002\u4f5c\u4e3a\u7d2b\u9898\u5927\u6a21\u62df\uff0c\u601d\u7ef4\u96be\u5ea6\u548c\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u5012\u4e0d\u662f\u5f88\u9ad8\uff1b\u4f46\u662f\u4f17\u591a\u7ec6\u8282\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u5bf9\u9898\u76ee\u7684\u8bef\u89e3\u5c31\u8db3\u4ee5\u8ba9\u4f60\u9762\u5bf9\u5c4f\u5e55\u81ea\u95ed\u4e0a\u4e00\u6574\u5929\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u819c\u62dc\u8003\u573a\u4e0a\u505a\u51fa\u8fd9\u9053\u9898\u7684\u5927\u4f6c\u4eec\uff0c\u540c\u65f6\u5411\u6240\u6709\u8fc7\u6389\u8fd9\u9053\u9898\uff0c\u6216\u8005\u6b63\u5728\u52aa\u529b\u8c03\u8fd9\u9053\u9898\u7684\u540c\u5b66\u4eec\u81f4\u4ee5\u656c\u610f\u3002\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u6211\u4eec\u5206\u6790\u5206\u6790\u8fd9\u9053\u9898\u3002\n\n\u9898\u610f\uff1a[P2586 [ZJOI2008]\u6740\u8682\u8681](https://www.luogu.com.cn/problem/P2586)\n\n\uff08\u9ed8\u8ba4\u5927\u5bb6\u5df2\u7ecf\u77e5\u9053\u9898\u610f\u4e86\uff09\n\n\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff0c\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u4ea7\u751f\u65b0\u8682\u8681\uff1b\n- \u8682\u8681\u9009\u62e9\u65b9\u5411\u5e76\u79fb\u52a8\uff1b\n- \u8682\u8681\u62a2\u86cb\u7cd5\uff1b\n- \u5927\u70ae\u653b\u51fb\u8682\u8681\uff1b\n- \u6e05\u7406\u6b7b\u4ea1\u7684\u8682\u8681\uff1b\n- \u5176\u4ed6\u7410\u788e\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u653e\u4fe1\u606f\u7d20\uff0c\u5927\u70ae AOE \u4f24\u5bb3\uff0c\u86cb\u7cd5 buff \u7b49\u3002\n\n\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e00\u5927\u5806\u4fe1\u606f\u8fdb\u884c\u7ef4\u62a4\uff0c\u5199\u4e00\u5927\u5806\u51fd\u6570\u6765\u7ef4\u62a4\u5b83\u4eec\u3002\u5728\u8fd9\u91cc\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u5b9e\u73b0\uff0c\u6211\u501f\u52a9\u4e86 OOP \u7684\u601d\u60f3\u6765\u7ef4\u62a4\u8fd9\u4e9b\u4fe1\u606f\u3002\n\n\u56e0\u4e3a OOP \u8fd9\u73a9\u610f\u513f\u5728 OI \u4e2d\u5f88\u5c11\u4e13\u95e8\u63d0\u53ca\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\uff08\u6458\u81ea\u7ef4\u57fa\u767e\u79d1\uff09\uff1a\n\n> \u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\uff08\u82f1\u8bed\uff1aObject-oriented programming\uff0c\u7f29\u5199\uff1aOOP\uff09\u662f\u79cd\u5177\u6709\u5bf9\u8c61\u6982\u5ff5\u7684\u7f16\u7a0b\u5178\u8303\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u79cd\u7a0b\u5e8f\u5f00\u53d1\u7684\u62bd\u8c61\u65b9\u9488\u3002\u5b83\u53ef\u80fd\u5305\u542b\u6570\u636e\u3001\u7279\u6027\u3001\u4ee3\u7801\u4e0e\u65b9\u6cd5\u3002\u5bf9\u8c61\u5219\u6307\u7684\u662f\u7c7b\uff08class\uff09\u7684\u5b9e\u4f8b\u3002\u5b83\u5c06\u5bf9\u8c61\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u57fa\u672c\u5355\u5143\uff0c\u5c06\u7a0b\u5e8f\u548c\u6570\u636e\u5c01\u88c5\u5176\u4e2d\uff0c\u4ee5\u63d0\u9ad8\u8f6f\u4ef6\u7684\u91cd\u7528\u6027\u3001\u7075\u6d3b\u6027\u548c\u6269\u5c55\u6027\uff0c\u5bf9\u8c61\u91cc\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8bbf\u95ee\u53ca\u7ecf\u5e38\u4fee\u6539\u5bf9\u8c61\u76f8\u5173\u8fde\u7684\u6570\u636e\u3002\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u53ef\u4ee5\u770b\u4f5c\u4e00\u79cd\u5728\u7a0b\u5e8f\u4e2d\u5305\u542b\u5404\u79cd\u72ec\u7acb\u800c\u53c8\u4e92\u76f8\u8c03\u7528\u7684\u5bf9\u8c61\u7684\u601d\u60f3\u3002\n\n\u7ffb\u8bd1\u6210\u4eba\u8bdd\u5c31\u662f\uff0c\u6211\u4eec\u628a\u9700\u8981\u8ddf\u8e2a\u7ef4\u62a4\u7684\u4e1c\u897f\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u5355\u5143\u5c01\u88c5\u8d77\u6765\uff0c\u5e76\u8ba9\u5b83\u4eec\u5f7c\u6b64\u5173\u8054\uff0c\u8bbf\u95ee\u5e76\u4fee\u6539\u4fe1\u606f\u3002\n\n\u56de\u5230\u8fd9\u4e2a\u9898\u3002\u7528\u8fd9\u6837\u7684\u601d\u60f3\u5206\u6790\u4e00\u4e0b\uff0c\u5f97\u5230\u8fd9\u4e9b\u7ed3\u679c\uff1a\n\n\u6211\u8981\u7ef4\u62a4\u7684\u662f\u4ec0\u4e48\uff1f\u5730\u56fe\u3001\u8682\u8681\u3001\u70ae\u548c\u86cb\u7cd5\u3002\u597d\u7684\uff0c\u86cb\u7cd5\u53ef\u4ee5\u7a0b\u5e8f\u4e2d\u4e00\u7b14\u5e26\u8fc7\u3002\u4ee5\u8682\u8681\u4e3a\u4f8b\uff0c\u6211\u4eec\u8981\u5c31\u9700\u8981\u4e00\u4e2a\u5bf9\u8c61\u6765\u8868\u793a\u8682\u8681\u7684\u5404\u4e2a\u65b9\u9762\uff0c\u6bd4\u5982\u5750\u6807\u3001\u751f\u547d\u503c\u3001\u662f\u5426\u6301\u6709\u86cb\u7cd5\u7b49\u3002\u662f\u7684\uff0c\u8fd9\u5c06\u662f\u57fa\u672c\u6570\u636e\u5355\u5143\u2014\u2014\u4e00\u4e2a\u8868\u793a\u8682\u8681\u7684\u5404\u79cd\u4fe1\u606f\u548c\u72b6\u6001\u7684\u5bf9\u8c61\u3002\u6211\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u5904\u7406\u8be5\u5bf9\u8c61\u3002\u5176\u6b21\uff0c\u8ba1\u7b97\u673a\u9700\u8981\u4e00\u4e9b\u65b9\u6cd5\u6765\u6267\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982\u51cf\u5c11\u751f\u547d\u503c\u4ec0\u4e48\u7684\u3002\u6700\u540e\uff0c\u8682\u8681\u8981\u548c\u5927\u70ae\u8fdb\u884c\u4ea4\u4e92\uff0c\u6240\u4ee5\u6211\u4e5f\u8981\u6709\u76f8\u5173\u7684\u5b9e\u73b0\u3002\n\n\u597d\u7684\uff0c\u6211\u4eec\u50cf\u8fd9\u6837\u5206\u6790\uff0c\u5f97\u51fa\u4e86\u7a0b\u5e8f\u7684\u57fa\u672c\u6846\u67b6\u3002\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5199\u4ee3\u7801\u4e86\u3002\n\n\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u91cc\uff0c\u6211\u91c7\u53d6\u4e86\u7c7b+\u5bf9\u8c61\u7684\u5199\u6cd5\uff0c\u672c\u8d28\u4e0a\u548c\u7ed3\u6784\u4f53\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\n\n\u9996\u5148\u6211\u4eec\u5bf9\u5730\u56fe\u9020\u4e00\u4e2a\u7c7b\u51fa\u6765\u3002\u8fd9\u4e2a\u7c7b\u9700\u8981\u5b58\u50a8\u4ee5\u4e0b\u4fe1\u606f\uff1a\n- \u5730\u56fe\u4e0a\u7684\u4fe1\u606f\u7d20\uff1b\n- \u5730\u56fe\u4e0a\u7684\u4e0d\u53ef\u8fbe\u70b9\u3002\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u628a\u957f\u548c\u5bbd\u5b9a\u4e49\u6210\u5168\u5c40\u53d8\u91cf\u3002\n\n\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd9\u91cc\u628a\u4fe1\u606f\u7d20\u4e3a $-1$ \u7684\u70b9\u4f5c\u4e3a\u4e0d\u53ef\u8fbe\u7684\u70b9\u3002\u5468\u56f4\u4e00\u5708\u76f4\u63a5\u8bbe\u6210 $-1$\uff0c\u5c31\u4e0d\u7528\u989d\u5916\u8003\u8651\u8fb9\u754c\u60c5\u51b5\u4e86\u3002\n\n\u6211\u4eec\u9700\u8981\u8ba9\u5b83\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n- \u521d\u59cb\u5316\uff1b\n- \u6bcf\u4e00\u56de\u5408\u4fe1\u606f\u7d20\u51cf\u4e00\uff1b\n- \u4fee\u6539\u4fe1\u606f\u7d20\u6570\u636e\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u7c7b\uff1a\n```cpp\nint n, m;\nclass map\n{\nprivate:\n\tstruct node\n\t{\n\t\tstruct nodee\n\t\t{\n\t\t\tint a[20];\n\t\t\tint&operator[](int x)\n\t\t\t{\n\t\t\t\treturn a[x + 3];\n\t\t\t}\n\t\t}a[20];\n\t\tnodee&operator[](int x)\n\t\t{\n\t\t\treturn a[x + 3];\n\t\t}\n\t}g;//\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\u4e0b\u6807\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u5904\u7406\u4e00\u4e0b\u3002\npublic:\n\tmap();\n\tvoid decrase();//\u4fe1\u606f\u7d20\u51cf\u5c11\n\tvoid init();//\u521d\u59cb\u5316\n\tint &operator()(int x, int y);\n}mp;\n```\n\n\u76f4\u63a5\u7ed9\u51fa\u51fd\u6570\u5b9e\u73b0\u4ee3\u7801\uff1a\n```cpp\nmap::map()\n{\n\tfor (int i = -2;i <= 15;i++)\n\t{\n\t\tfor (int j = -2;j <= 15;j++)\n\t\t{\n\t\t\tg[i][j] = -1;\n\t\t}\n\t}\n}\nvoid map::init()\n{\n\tfor (int i = 0;i <= n;i++)\n\t{\n\t\tfor (int j = 0;j <= m;j++)\n\t\t{\n\t\t\tg[i][j] = 0;\n\t\t}\n\t}\n}\nint &map::operator()(int x, int y)\n{\n\treturn g[x][y];\n}\n```\n\n\u6bcf\u4e00\u56de\u5408\u4fe1\u606f\u7d20\u51cf\u5c11\u7684\u64cd\u4f5c\u540e\u9762\u53e6\u5916\u8bf4\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u5199\u8682\u8681\u7684\u7c7b\u3002\u5bf9\u4e8e\u4e00\u53ea\u8682\u8681\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u4e0b\u6570\u636e\uff1a\n\n- \u8682\u8681\u7684\u5750\u6807\uff1b\n- \u8682\u8681\u7684\u5e74\u9f84\u3001\u751f\u547d\u503c\uff1b\n- \u8682\u8681\u7684 LV \u503c\u3002\uff08\u4ec0\u4e48\uff0c\u4f60\u95ee LV \u662f\u4ec0\u4e48\u610f\u601d\uff1f\u5f53\u7136\u662f LOVE \u4e86\uff01\uff09\uff1b\n- \u8682\u8681\u662f\u5426\u6301\u6709\u86cb\u7cd5\uff1b\n- \u8682\u8681\u4e0a\u4e00\u6b21\u7684\u5750\u6807\uff0c\u8fd9\u4e00\u6b21\u548c\u4e0a\u4e00\u6b21\u6240\u5728\u4f4d\u7f6e\u7684\u4fe1\u606f\u7d20\u503c\u3002\n\n\u8bb0\u4e0b\u4e0a\u4e00\u6b21\u5750\u6807\u548c\u4f4d\u7f6e\u6240\u5728\u4fe1\u606f\u7d20\u503c\uff0c\u6709\u4e24\u4e2a\u539f\u56e0\uff1a\n1. \u8682\u8681\u6240\u5728\u7684\u4f4d\u7f6e\u4fe1\u606f\u7d20\u4e3a $-1$ \uff0c\u6211\u4eec\u5fc5\u987b\u5f00\u4e00\u4e2a\u53d8\u91cf\u8bb0\u4e0b\u4fe1\u606f\u7d20\u503c\uff1b\n2. \u8682\u8681\u4e0d\u80fd\u8d70\u56de\u5934\u8def\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u4e5f\u9700\u8981\u7f6e\u4e3a $-1$\u3002\n\n\u540c\u6837\uff0c\u6211\u4eec\u4e5f\u8981\u5199\u4e00\u5806\u51fd\u6570\u6765\u7ef4\u62a4\u5b83\u4eec\u3002\n\n\u90a3\u4e48\u7c7b\u7684\u6846\u67b6\u5982\u4e0b\uff1a\n```cpp\nbool cake;\nint cnt;\nclass ant\n{\nprivate:\n\tbool iscarrying;\n\tint age;\n\tint hp;\n\tint LOVE;\n\tint x, y, tmpm;//tmpm\uff1a\u5f53\u524d\u4f4d\u7f6e\u7684\u4fe1\u606f\u7d20\u503c\u3002\n\tint lstx, lsty, lsttmpm;//lsttmpm\uff1a\u4e0a\u4e00\u4f4d\u7f6e\u7684\u4fe1\u606f\u7d20\u503c\u3002\nprotected:\n\tint selectdir(map &mp);\n\tvoid carrycake();//\u80cc\u7740\u86cb\u7cd5\u8d70\u4e86\n\tdouble calchp();\n\tvoid move(map &mp, int dir);\npublic:\n\tant();\n\tvoid decrase();//\u4fe1\u606f\u7d20\u51cf\u5c11\n\tvoid release(map &mp);//\u628a\u4fe1\u606f\u7d20\u653e\u56de\u539f\u4f4d\n\tvoid attacked(int atk);//\u53d7\u5230\u653b\u51fb\n\tbool isdead();//\u5224\u65ad\u662f\u5426\u6b7b\u4ea1\n\tvoid information();//\u653e\u4fe1\u606f\u7d20\n\tvoid action(map &mp);\n\tint &xpos(), &ypos();\n\tint &getage();\n\tvoid output();//\u8f93\u51fa\u76f8\u5173\uff0c\u540e\u9762\u8f93\u51fa\u8682\u8681\u4fe1\u606f\u7528\u7684\n\tbool iscarryingcake();\n};\n```\n\n\u8003\u8651\u5b9e\u73b0\u51fd\u6570\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u7ec6\u8282\u8981\u6ce8\u610f\uff1a\n\n- \u8682\u8681\u521d\u59cb\u5e74\u9f84\u662f $0$\u3002\n- \u82e5\u6700\u5927\u7684\u4fe1\u606f\u7d20\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u6309\u7167\u4e1c\u5357\u897f\u5317\u7684\u987a\u5e8f\u9009\u62e9\u6709\u6700\u591a\u4fe1\u606f\u7d20\u7684\u683c\u70b9\u3002\uff08\u5c31\u56e0\u4e3a\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u8c03\u4e86\u4e00\u6574\u5929\uff09\n- \u5f53\u8682\u8681\u5e74\u9f84 $\\bmod 4=1$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8ba9\u5b83\u9006\u65f6\u9488\u8f6c\uff0c\u81f3\u5c11\u8f6c\u4e00\u6b21\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u5c31\u8d70\u3002\n- \u8682\u8681\u7684 Hp \u8981\u7528\u6d6e\u70b9\u6570\u4fdd\u5b58\u3002\n- \u8682\u8681\u5fc5\u987b\u5728\u79fb\u52a8\u4e4b\u540e\u624d\u80fd\u83b7\u5f97\u86cb\u7cd5\uff0c\u5176\u4ed6\u65f6\u95f4\u90fd\u4e0d\u884c\uff08\u6bd4\u5982\u8bf4\u4f60\u5728 $(n,m)$ \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u4e00\u8f6e\u5f00\u70ae\u4e4b\u540e\u625b\u86cb\u7cd5\u7684\u90a3\u4f4d\u6302\u4e86\uff0c\u86cb\u7cd5\u98de\u56de\u6765\uff0c\u4f60\u4e5f\u4e0d\u80fd\u7acb\u523b\u6361\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4fdd\u8bc1\u8682\u8681\u4e0d\u8d70\u56de\u5934\u8def\u5462\uff1f\u5728\u524d\u9762\u7684\u58f0\u660e\u4e2d\uff0c\u6211\u8bb0\u5f55\u4e86\u4e0a\u4e00\u6b21\u7684\u4f4d\u7f6e\u548c\u4fe1\u606f\u7d20\uff0c\u6bcf\u6b21\u9009\u65b9\u5411\u4e4b\u524d\u7f6e\u4e3a $-1$\uff0c\u9009\u5b8c\u65b9\u5411\u518d\u6539\u56de\u6765\u5373\u53ef\u3002\n\n\u7ed9\u51fa\u5b9e\u73b0\uff1a\n```cpp\nant::ant()\n{\n\tiscarrying = 0,age = 0;\n\tLOVE = cnt / 6 + 1;cnt++;\n\thp = calchp();\n\tx = y = 0;\ttmpm = mp(x, y);\n\tlstx = lsty = 0,lsttmpm = -1;\n\tmp(0, 0) = -1;\n}\nvoid ant::information()\n{\n\tif (iscarrying)\n\t{\n\t\ttmpm += 5;\n\t}\n\telse\n\t{\n\t\ttmpm += 2;\n\t}\n}\nvoid ant::attacked(int atk)\n{\n\thp -= atk;\n}\nbool ant::isdead()\n{\n\treturn hp < 0;\n}\nvoid ant::carrycake()\n{\n\tiscarrying = 1,cake = 0;\n\thp = std::min(hp + calchp() / 2.0, calchp());\n}\nint ant::selectdir(map &mp)\n{\n\tlsttmpm = mp(lstx, lsty);\n\tmp(lstx, lsty) = -1;//\u4e0a\u4e00\u6b21\u7684\u4f4d\u7f6e\u4e0d\u53ef\u8fbe\n\tint res = 0;\n\t//////#3\n\t//////1:E  2:S  3:W  4:N\n\tstruct node\n\t{\n\t\tint dir, val;\n\t\tbool operator<(const node x)const\n\t\t{\n\t\t\treturn val == x.val ? dir<x.dir : val>x.val;\n\t\t}\n\t}a[10];\n\tfor (int i = 1;i <= 4;i++)a[i].dir = i;\n\ta[1].val = mp(x, y + 1);\n\ta[2].val = mp(x + 1, y);\n\ta[3].val = mp(x, y - 1);\n\ta[4].val = mp(x - 1, y);\n\tstd::sort(a + 1, a + 1 + 4);\n\tif (a[1].val == -1)//\u56db\u4e2a\u65b9\u5411\u90fd\u662f-1\uff0c\u8682\u8681\u88ab\u5361\u4f4f\u4e86\n\t{\n\t\treturn 0;\n\t}\n\tres = a[1].dir;\n\tif (age % 5 == 4)//\u8682\u8681\u5f00\u59cb\u9006\u65f6\u9488\u8f6c\u5708\n\t{\n\t\tint xxx = 5;\n\t\twhile (xxx--)\n\t\t{\n\t\t\tres--;\n\t\t\tif (res == 0)res = 4;\n\t\t\tint xx = x, yy = y;\n\t\t\tif (res == 1)yy++;\n\t\t\tif (res == 2)xx++;\n\t\t\tif (res == 3)yy--;\n\t\t\tif (res == 4)xx--;\n\t\t\tif (mp(xx, yy) != -1)break;\n\t\t}\n\t}\n\treturn res;\n}\nvoid ant::move(map &mp, int dir)\n{\n\tmp(lstx, lsty) = lsttmpm;\n\trelease(mp);//\u5148\u628a\u4fe1\u606f\u7d20\u5730\u56fe\u590d\u539f\n\tlstx = x, lsty = y;\n\tif (dir == 1)y += 1;\n\tif (dir == 2)x += 1;\n\tif (dir == 3)y -= 1;\n\tif (dir == 4)x -= 1;\n\ttmpm = mp(x, y);\n\tmp(x, y) = -1;//\u81ea\u5df1\u7684\u4f4d\u7f6e\n}\ndouble ant::calchp()//\u6ce8\u610f\uff0c\u8fd9\u91cc\u8981\u7528\u6d6e\u70b9\u6570\u6765\u5b58\n{\n\tdouble res = 4 * pow(1.1, LOVE);\n\treturn res;\n}\nvoid ant::action(map &mp)//\u4e00\u6b21\u5b8c\u6574\u7684\u884c\u52a8\n{\n\tint dir = selectdir(mp);\n\tmove(mp, dir);\n\tif (x == n && y == m && cake == 1)cake = 0, carrycake();//\u5982\u679c\u53ef\u4ee5\u62ff\u86cb\u7cd5\u5c31\u62ff\u8d70\uff0c\u987a\u4fbf\u83b7\u5f97buff\n}\nvoid ant::release(map &mp)\n{\n\tmp(x, y) = tmpm;\n}\nvoid ant::decrase()\n{\n\ttmpm = std::max(tmpm - 1, 0);\n}\nvoid ant::output()\n{\n\tprintf(\"%d %d %d %d %d\\n\", age, LOVE, hp, x, y);\n}\nint &ant::getage()\n{\n\treturn age;\n}\nbool ant::iscarryingcake()\n{\n\treturn iscarrying;\n}\nint &ant::xpos()\n{\n\treturn x;\n}\nint &ant::ypos()\n{\n\treturn y;\n}\nstd::vector<ant*>enemy;\n```\n\n\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u9700\u8981\u65f6\u523b\u4fdd\u8bc1\u8682\u8681\u7684\u884c\u52a8\u987a\u5e8f\u662f\u6309\u7167\u5e74\u9f84\u987a\u5e8f\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u8682\u8681\u4f9d\u6b21\u585e\u5230\u4e00\u4e2a vector \u4e2d\uff0c\u6bcf\u6b21\u4ece\u5934\u5230\u5c3e\u904d\u5386\u8682\u8681\u5e76\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u518d\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u5047\u5982\u5927\u70ae\u67b6\u5728\u8682\u8681\u7a9d\u95e8\u53e3\uff0c\u653b\u51fb\u529b\u8fd8\u7279\u522b\u9ad8\uff08\u79d2\u6740\uff09\uff0c\u6bcf\u6b21\u51fa\u751f\u4e00\u53ea\u8682\u8681\u5c31\u88ab\u6253\u6b7b\uff0c\u6301\u7eed $20$ \u4e07\u6b21\uff0c\u8fd9\u79cd\u6392\u961f\u67aa\u6bd9\u7684\u60c5\u51b5\u975e\u5e38\u5360\u7528\u65f6\u7a7a\u3002\u6211\u4eec\u5df2\u7ecf\u5229\u7528 vector \u907f\u514d\u4e86\u6bcf\u6b21\u904d\u5386\u5f15\u8d77\u7684\u8d85\u65f6\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u6b7b\u6389\u7684\u8682\u8681\u5bf9\u540e\u9762\u7684\u64cd\u4f5c\u6ca1\u6709\u4efb\u4f55\u8d21\u732e\uff0c\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u62a5\u5e9f\u6389\uff0c\u8003\u8651\u52a8\u6001\u4e3a\u6bcf\u4e00\u53ea\u8682\u8681\u5206\u914d\u5185\u5b58\u3002\u8fd9\u6837\u505a\u7684\u4e00\u4e2a\u4ee3\u4ef7\u5c31\u662f\uff0cvector \u91cc\u5c06\u4e0d\u5f97\u4e0d\u5b58\u50a8\u4e00\u5806\u6307\u9488\u3002\n\n\u73b0\u5728\u56de\u8fc7\u5934\u6765\u8bf4\u6bcf\u6b21\u7684\u4fe1\u606f\u7d20\u51cf\u4e00\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5206\u4e3a\u4e24\u6b65\uff1a\n\n1. \u5730\u56fe\u4e0a\uff0c\u53ea\u8981\u662f\u7a7a\u4f4d\uff0c\u5c31\u8003\u8651\u4fe1\u606f\u7d20\u51cf $1$\uff08\u56e0\u4e3a\u6709\u8682\u8681\u7684\u5730\u65b9\u4fe1\u606f\u7d20\u5c31\u662f $-1$\uff09\uff1b\n2. \u6bcf\u4e00\u53ea\u8682\u8681\u7684\u4f4d\u7f6e\u4e0a\u7684\u4fe1\u606f\u7d20\u51cf $1$\u3002\n\n\u90a3\u4e48\uff0c\u4ee3\u7801\u7684\u5b9e\u73b0\u5c31\u662f\u8fd9\u6837\uff1a\n```cpp\nvoid map::decrase()\n{\n\tfor (int i = 0;i <= n;i++)\n\t{\n\t\tfor (int j = 0;j <= m;j++)\n\t\t{\n\t\t\tif (g[i][j] != -1)g[i][j] = std::max(0, g[i][j] - 1);\n\t\t}\n\t}\n\tfor (std::vector<ant*>::iterator it = enemy.begin();it != enemy.end();it++)\n\t{\n\t\t(*it)->decrase();\n\t}\n}\n```\n\n\u6700\u540e\uff0c\u6211\u4eec\u518d\u6765\u5199\u5927\u70ae\u7684\u4ee3\u7801\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u53f0\u70ae\uff0c\u6211\u4eec\u90fd\u8bb0\u5f55\u4e0b\u5b83\u7684\u5750\u6807\u3001\u5c04\u7a0b\u548c\u653b\u51fb\u529b\u3002\n\n\u652f\u6301\u7684\u64cd\u4f5c\u5f88\u663e\u7136\u4e86\uff0c\u4e00\u4e2a\u662f\u9009\u62e9\u76ee\u6807\uff0c\u4e00\u4e2a\u662f\u653b\u51fb\u3002\n\n\u6839\u636e\u9898\u610f\uff0c\u53ea\u8981\u76ee\u6807\u5728\u5176\u5c04\u7a0b\u5185\uff0c\u5854\u5230\u76ee\u6807\u8682\u8681\u5706\u5fc3\u7684\u8fde\u7ebf\u4e0a\u7684\u6240\u6709\u8682\u8681\uff08\u8fd9\u91cc\u201c\u88ab\u6253\u5230\u201d\u7684\u5224\u5b9a\u53d8\u6210\u4e86\u8868\u793a\u6fc0\u5149\u7684\u7ebf\u6bb5\u4e0e\u8868\u793a\u8682\u8681\u7684\u5706\u6709\u516c\u5171\u70b9\uff09\u90fd\u4f1a\u88ab\u6253\u5230\u5e76\u635f $d$ \u683c\u8840\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u5224\u65ad\u5176\u4ed6\u7684\u8682\u8681\u662f\u5426\u5728\u8fd9\u4e00\u6761\u7ebf\u4e0a\uff0c\u5c31\u9700\u8981\u5199\u4e00\u4e2a\u8ba1\u7b97\u51e0\u4f55\u6a21\u677f\u4e86\u3002\u8fd8\u597d\u8fd8\u597d\uff0c\u8682\u8681\u6700\u591a\u53ea\u6709 $6$\uff0c\u76f4\u63a5\u904d\u5386\u6240\u6709\u8682\u8681\u5c31\u884c\u3002\n\n\u8ba1\u7b97\u51e0\u4f55\u6a21\u677f\u5c31\u4e0d\u653e\u51fa\u6765\u4e86\uff0c\u6574\u4e2a\u7c7b\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\nclass nuclear\n{\nprivate:\n\tint range;\n\tint x, y;\n\tint atk;\nprotected:\n\tvoid attack(int target);\n\tint selecttarget();\npublic:\nnuclear(int _x, int _y, int _atk, int _range);\n\tvoid action();\n};\nnuclear::nuclear(int _x, int _y, int _atk, int _range)\n{\n\tx = _x, y = _y;\n\tatk = _atk, range = _range;\n\tmp(x, y) = -1;\n}\nint nuclear::selecttarget()\n{\n\tint res = -1;\n\tdouble dis = 10000;\n\tfor (int i = 0;i < enemy.size();i++)\n\t{\n\t\tdouble now = GetDis(x, y, enemy[i]->xpos(), enemy[i]->ypos());//GetDis\uff1a\u83b7\u53d6\u8ddd\u79bb\n\t\tif (now - 1.0*range <= eps)\n\t\t{\n\t\t\tif (enemy[i]->iscarryingcake())\n\t\t\t{\n\t\t\t\treturn i;//\u4f18\u5148\u9009\u62e9\u62ff\u7740\u86cb\u7cd5\u7684\u8682\u8681\n\t\t\t}\n\t\t\telse if (now < dis)//\u4e0d\u7136\u5c31\u9009\u62e9\u6700\u8fd1\u7684\u90a3\u4e2a\n\t\t\t{\n\t\t\t\tdis = now;\n\t\t\t\tres = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nvoid nuclear::attack(int target)\n{\n\tif (target == -1)return;\n\tPoint A = { (double)x,(double)y }, B = { (double)enemy[target]->xpos(),(double)enemy[target]->ypos() };\n\t//point\uff1a\u5b58\u50a8\u76f8\u5173\u70b9\u7684\u5750\u6807\n\tenemy[target]->attacked(atk);\n\tfor (int i = 0;i < enemy.size();i++)//\u5224\u65ad AOE \u7684\u60c5\u51b5\n\t{\n\t\tif (i == target)continue;\n\t\tPoint P = { (double)enemy[i]->xpos(),(double)enemy[i]->ypos() };\n\t\tif (checkcircle(P, A, B) - 0.5 <= eps)//checkcircle\uff1a\u68c0\u6d4b\u5706\u548c\u7ebf\u6bb5\u662f\u5426\u6709\u4ea4\u70b9\n\t\t{\n\t\t\tenemy[i]->attacked(atk);\n\t\t}\n\t}\n}\nvoid nuclear::action()\n{\n\tattack(selecttarget());\n}\nstd::vector<nuclear>tower;\n```\n\n\u6536\u5c3e\u5de5\u4f5c\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u6309\u7167\u9898\u76ee\u7ed9\u51fa\u7684\u987a\u5e8f\u6a21\u62df\u5c31\u884c\u3002\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e9b\u51fd\u6570\uff0c\u6211\u4eec\u5199\u4e3b\u51fd\u6570\u7684\u65f6\u5019\u5c06\u4f1a\u975e\u5e38\u8f7b\u677e\u6109\u5feb\u3002\u5b8c\u7f8e\u3002\n```cpp\nvoid clear()\n{\n\tfor (int i = 0;i < enemy.size();i++)\n\t{\n\t\tif (enemy[i]->isdead())\n\t\t{\n\t\t\tif (enemy[i]->iscarryingcake())cake = 1;//\u5982\u679c\u8682\u8681\u625b\u7740\u86cb\u7cd5\uff0c\u5c31\u628a\u86cb\u7cd5\u4f20\u9001\u56de\u53bb\n\t\t\tenemy[i]->release(mp);//\u8682\u8681\u6240\u5728\u4f4d\u7f6e\u7684\u4fe1\u606f\u7d20\n\t\t\tdelete enemy[i];\n\t\t\tenemy.erase(enemy.begin() + i);\n\t\t\ti--;\n\t\t}\n\t}\n}\nint s, d, r, t;\nvoid end()\n{\n\tfor (std::vector<ant*>::iterator it = enemy.begin();it != enemy.end();it++)\n\t{\n\t\t(*it)->output();\n\t}\n\texit(0);\n}\nvoid work()\n{\n\tusing std::cin;\n\tcin >> n >> m >> s >> d >> r;\n\tmp.init();\n\tfor (int i = 1;i <= s;i++)\n\t{\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tmp(x, y) = 1;\n\t\ttower.push_back(nuclear(x, y, d, r));\n\t}\n\tcin >> t;\n\tfor (int o = 1;o <= t;o++)//\u4e00\u79d2\u5f00\u59cb\u4e86\n\t{\n\t\tif (enemy.size() < 6 && mp(0, 0) != -1)\n\t\t{\n\t\t\tenemy.push_back(new ant());//\u9996\u5148\u51fa\u751f\u8682\u8681\n\t\t}\n\t\tfor (int i = 0;i < enemy.size();i++)\n\t\t{\n\t\t\tenemy[i]->information();//\u8682\u8681\u653e\u4fe1\u606f\u7d20\n\t\t}\n\t\tfor (int i = 0;i < enemy.size();i++)\n\t\t{\n\t\t\tenemy[i]->action(mp);//\u8682\u8681\u79fb\u52a8\n\t\t}\n\t\tfor (std::vector<nuclear>::iterator it = tower.begin();it != tower.end();it++)\n\t\t{\n\t\t\tit->action();//\u4e8c\u8425\u957f\uff0c\u5f00\u70ae\uff01\n\t\t}\n\t\tclear();//\u6e05\u9664\u6389\u6b7b\u4ea1\u8682\u8681\u7684\u5c38\u4f53\n\t\tmp.decrase();//\u4fe1\u606f\u7d20\u51cf1\n\t\tfor (std::vector<ant*>::iterator it = enemy.begin();it != enemy.end();it++)\n\t\t{\n\t\t\tif ((*it)->iscarryingcake() && (*it)->xpos() == 0 && (*it)->ypos() == 0)//\u8682\u8681\u65b9\u6761\u4ef6\u8fbe\u6210\uff0c\u6e38\u620f\u7ed3\u675f\n\t\t\t{\n\t\t\t\tprintf(\"Game over after %u seconds\\n%d\\n\", o, enemy.size());\n\t\t\t\tend();\n\t\t\t}\n\t\t}\n\t\tfor (std::vector<ant*>::iterator it = enemy.begin();it != enemy.end();it++)\n\t\t{\n\t\t\t(*it)->getage()++;//\u6240\u6709\u8682\u8681\u5e74\u9f84+1\n\t\t}\n\t}\n\tprintf(\"The game is going on\\n%d\\n\", enemy.size());\n\tend();\n}\n```\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\uff1a\u4e0d\u7528\u90a3\u4e48\u8d39\u5c3d\u5fc3\u601d\u53bb\u5206\u6790\uff0c\u53ea\u8981\u77e5\u9053\u7edd\u5bf9\u4e0d\u4f1a\u88c2\u5f00\u5c31\u662f\u4e86\u3002\n\n\u5047\u5982\u4f60\u9762\u5bf9\u4e00\u4e2a\u95ee\u9898\u6539\u4e86\u597d\u4e45\u6539\u4e0d\u51fa\u6765\uff0c\u5efa\u8bae\u770b\u770b\u81ea\u5df1\u662f\u5426\u6ca1\u6ce8\u610f\u5230\u67d0\u4e9b\u7ec6\u8282\u6216\u8005\u5bf9\u9898\u9762\u7684\u7406\u89e3\u6709\u8bef\u3002\u540c\u65f6\uff0c\u5efa\u8bae\u91c7\u7528\u8f93\u51fa\u8c03\u8bd5\u3002\n\n\u7ed9\u51fa\u8c03\u8bd5\u7684\u4ee3\u7801\u5427\uff0c\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c31\u628a\u6240\u6709\u7684\u7c7b\u6210\u5458\u5168\u8bbe\u6210\u4e86 public\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u3002\n```cpp\nnamespace DEBUG//\u8c03\u8bd5\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7c7b\u6210\u5458\u5168\u90e8\u8bbe\u4e3apublic\n{\n\tvoid printmap(int t)//\u5f53\u524d\u5730\u56fe\u7684\u4fe1\u606f\u7d20\n\t{\n\t\tprintf(\"time:%d\\ninformationmap:\\n\", t);\n\t\tmap tmp = mp;\n\t\tfor (std::vector<ant*>::iterator it = enemy.begin();it != enemy.end();it++)\n\t\t{\n\t\t\ttmp((*it)->xpos(), (*it)->ypos()) = (*it)->tmpm;\n\t\t}\n\t\tfor (int i = 0;i <= n;i++)\n\t\t{\n\t\t\tfor (int j = 0;j <= m;j++)\n\t\t\t{\n\t\t\t\tstd::cout << tmp(i, j) << ' ';\n\t\t\t}\n\t\t\tputs(\"\");\n\t\t}\n\t\tstd::cout << \"\\n-----------------\\n-----------------\\n\";\n\t}\n\tvoid printantpos(int t)//\u5f53\u524d\u8682\u8681\u7684\u5206\u5e03\u60c5\u51b5\uff0c\u5e8f\u53f7\u6309\u7167\u5e74\u9f84\u987a\u5e8f\u6392\u5217\u3002\n\t{\n\t\tprintf(\"time:%d\\nantmap:\\n\", t);\n\t\tmap tmp;\n\t\ttmp.init();\n\t\tfor (int i = 0;i < enemy.size();i++)\n\t\t{\n\t\t\ttmp(enemy[i]->xpos(), enemy[i]->ypos()) = i + 1;\n\t\t}\n\t\tfor (int i = 0;i <= n;i++)\n\t\t{\n\t\t\tfor (int j = 0;j <= m;j++)\n\t\t\t{\n\t\t\t\tstd::cout << tmp(i, j) << ' ';\n\t\t\t}\n\t\t\tputs(\"\");\n\t\t}\n\t\tstd::cout << \"\\n-----------------\\n-----------------\\n\";\n\t}\n\tvoid printallants(int t)//\u6240\u6709\u8682\u8681\u7684\u8be6\u7ec6\u6570\u636e\n\t{\n\t\tprintf(\"time:%d\\nmap:\\n\", t);\n\t\tfor (std::vector<ant*>::iterator it = enemy.begin();it != enemy.end();it++)\n\t\t{\n\t\t\t//tmp((*it)->xpos(), (*it)->ypos()) = (*it)->tmpm;\n\t\t\tprintf(\"id:%d\\nlove:%d\\nage:%d\\nhp:%d\\nlstx:%d lsty:%d\\n   x:%d    y:%d\\niscarryingcake:%d\\n-------------------\\n\",\n\t\t\t\t(*it)->id + 1, (*it)->love, (*it)->age, (*it)->hp, (*it)->lstx, (*it)->lsty, (*it)->x, (*it)->y, (*it)->iscarryingcake());\n\t\t}\n\t\tputs(\"\\n----------------------------------------\\n\");\n\t}\n}\n```\n\n\u5f69\u86cb\uff1a\n\u6211\u4eec\u8bb0\u5f55\u4e0b\u4e86\u6bcf\u4e00\u53ea\u8682\u8681\u7684 LV\u3002LV\uff0c\u4e5f\u5c31\u662f LOVE\u3002\u4f46\u90a3\u7edd\u4e0d\u662f love\uff0c\u800c\u662f\u4e00\u4e2a\u7f29\u5199\u3002\u610f\u601d\u662f\uff0c\u66b4\u529b\u6307\u6570\uff08level of violence\uff09\uff0c\u4e00\u79cd\u91cf\u5316\u4f60\u5bf9\u8682\u8681\u9020\u6210\u4f24\u5bb3\u7684\u6570\u503c\u3002\u4f60\u6740\u5f97\u8d8a\u591a\uff0c\u8fd9\u4e2a\u503c\u5c31\u8d8a\u9ad8\uff0c\u8682\u8681\u7684\u751f\u547d\u529b\u4e5f\u5c31\u8d8a\u987d\u5f3a\uff0c\u5e72\u6389\u4e00\u53ea\u8682\u8681\u5c31\u8d8a\u56f0\u96be\uff0c\u4f60\u7684\u8ba1\u7b97\u4e5f\u5c31\u66f4\u5bb9\u6613\u504f\u79bb\u65b9\u5411\uff0c\u51fa\u73b0\u9519\u8bef\u7684\u7ed3\u679c\u3002",
        "postTime": 1630686202,
        "uid": 400781,
        "name": "Troubadour",
        "ccfLevel": 0,
        "title": "P2586 [ZJOI2008]\u6740\u8682\u8681 \u9898\u89e3"
    },
    {
        "content": "\u6253\u4e2a\u5e7f\u544a[\u6b64\u5904\u89c2\u611f\u66f4\u4f73](https://aokiumi.github.io/2018/11/05/%E9%A2%98%E8%A7%A3%EF%BC%9ABZOJ1033%20%E6%9D%80%E8%9A%82%E8%9A%81/)\n\nNOIP\u8003\u524d\u60f3\u7ec3\u4e00\u4e0b\u7801\u529b\u5c31\u6311\u4e86\u4e00\u9053\u4e0d\u7b97\u975e\u5e38\u96be\u7684\u5927\u6a21\u62df\u6765\u5199\u4e86\u4e00\u4e0b\u3002\n\n\u9996\u5148\uff0c\u56e0\u4e3a\u6b64\u9898\u9898\u9762\u8fc7\u957f\u5c31\u4e0d\u653e\u9898\u76ee\n\n\u539f\u9898\u8bf7\u53bb[Link](https://www.lydsy.com/JudgeOnline/problem.php?id=1033)\n\nps\uff1a\u56e0\u4e3a\u4e00\u5f00\u59cb\u6253\u7684\u4ee3\u7801\u975e\u5e38\u4e11\uff0c\u8fd8\u5f88\u7e41\u590d\u6240\u4ee5\u90e8\u5206\u501f\u9274\u4e86\u4e00\u4e0b\u9ec4\u5b66\u957f\u7684\u5199\u6cd5\u89c1\u8c05\u3002\u6211\u7684\u4ee3\u7801\u4e5f\u662f\u5bf9\u7740\u9ec4\u5b66\u957f\u7684std\u6b65\u6b65\u8f93\u51fa\u624d\u8c03\u51fa\u6765\u7684\uff0c\u56e0\u4e3a\u4e00\u4e9b\u5f88\u667a\u969c\u7684\u9519\u8bef\u8c03\u4e86\u4e00\u5e74\u3002\u3002\u3002\n\n**\u4ee3\u7801\u53c8\u81ed\u53c8\u957f\u6ce8\u610f** \n\n**\u4e0d\u8fc7\u6b64\u9898\u89e3\u4e0d\u538b\u884c\uff0c\u601d\u8def\u6e05\u6670\u597d\u8bc4\uff01** \n\n# \u5751\u70b9\n\n- \u539f\u9898\u63cf\u8ff0\u5982\u4e0b \n\n\u200b  \u201c \u6fc0\u5149\u5854\u6709\u4e2a\u6bd4\u8f83\u5947\u602a\u7684\u7279\u6027\uff1a\u5b83\u5728\u9009\u5b9a\u4e86\u6253\u51fb\u76ee\u6807\u540e\uff0c\n\u53ea\u8981\u76ee\u6807\u5728\u5176\u5c04\u7a0b\u5185\uff0c\u5854\u5230\u76ee\u6807\u8682\u8681\u5706\u5fc3\u7684\u8fde\u7ebf\u4e0a\u7684\u6240\u6709\u8682\u8681\n\n\uff08\u8fd9\u91cc\u201c\u88ab\u6253\u5230\u201d\u7684\u5224\u5b9a\u53d8\u6210\u4e86\u8868\u793a\u6fc0\u5149\u7684\u7ebf\u6bb5\u4e0e\u8868\u793a\u8682\u8681\u7684\u5706\u6709\u516c\u5171\n\u70b9\uff09\u90fd\u4f1a\u88ab\u6253\u5230\u5e76\u635fd\u683c\u8840\uff0c\n**\u4f46\u6fc0\u5149\u4e0d\u4f1a\u7a7f\u900f\u5b83\u7684\u6253\u51fb\u76ee\u6807\u6253\u5230\u540e\u9762\u7684\u8682\u8681\u3002** \u201d\n\n\u200b      \u8fd9\u91cc\u5c31\u53ef\u4ee5\u6e05\u6670\u7684\u53d1\u73b0\u8fd9\u91cc\u4e0d\u4ec5\u662f\u8981\u5224\u65ad\u76f4\u7ebf\u548c\u5706\u6709\u6ca1\u6709\u4ea4\u70b9\uff0c\u800c\u662f\u8981\u5224\u65ad**\u7ebf\u6bb5\u548c\u5706\u662f\u5426\u6709\u7126\u70b9**\n\n\u200b      \u6240\u4ee5\u8fd9\u91cc\u7684\u5224\u65ad\u51fd\u6570\u4e00\u5b9a\u8981\u5199\u5bf9~~\u5426\u5219\u4f1a\u8c03\u4e00\u5e74\uff0c\u5c31\u50cf\u6211~~\n\n- \u6ce8\u610f\u5148\u5224\u65ad\u8682\u8681\u6b7b\u4e86\u6ca1\u6709\uff0c\u5148\u66f4\u65b0\u72b6\u6001\u518djudge\u662f\u5426\u6210\u529f\u3002\n\n- \u8682\u8681\u5e74\u9f84\u4e00\u5f00\u59cb\u662f0\uff0c\u800c\u5b58\u6d3b\u65f6\u95f4\u4e00\u5f00\u59cb\u7684\u5c31\u662f1\u3002\n\n- \u6240\u6709\u7684\u70ae\u662f\u540c\u65f6\u5f00\u70ae\uff0c\u6240\u4ee5\u8981\u5148\u7edf\u8ba1\u4e00\u8fb9\u6bcf\u4e2a\u70ae\u53f0\u7684target\u518d\u7edf\u4e00\u6263\u8840\u3002\n\n- \u9898\u76ee\u4e2d\u7684\u5750\u6807\u4e0d\u662f\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u5750\u6807\uff0c\u662f\u5e7f\u4e49OI\u7406\u89e3\u4e2d\u7684\u884c\u5217\u3002\u3002\u6211\u5c31\u5199\u53cd\u4e86\u3002\u3002\n\n- \u8682\u8681\u534a\u5f84\u662f0.5\u4e0d\u662f1\uff01\uff01\u6ce8\u610f\n\n\u76f8\u4fe1\u6ce8\u610f\u5230\u8fd9\u4e9b\u5730\u65b9\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u5f62\u6210\u66f4\u52a0\u6e05\u6670\uff0c~~\u8fd9\u53ef\u662f\u8840\u7684\u6559\u8bad~~\n\n# \u9898\u89e3\n\n\u73b0\u5728\u5f00\u59cb\u653e\u9898\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u770b\u4e00\u4e0b\u7f8e\u89c2\u7684\u4e3b\u5de5\u4f5c\u51fd\u6570\uff0c\n\n\u8fd9\u90e8\u5206\u4ee3\u8868\u4e86\u6211\u5199\u9898\u7684\u601d\u8def\u548c\u6d41\u7a0b\uff0c\n\n\u4e0b\u9762\u5c31\u6309\u7167\u8fd9\u4e9b\u51fd\u6570\u7684\u6392\u5217\u987a\u5e8f\u4f9d\u4f9d\u8bb2\u89e3\u6bcf\u4e2a\u6b65\u9aa4\u4eec\u4e5f\u662f\u4e25\u683c\u6309\u7167\u9898\u76ee\u63cf\u8ff0\u6765\u7684\n\n```cpp\nint work()\n{\n    birth();\n    leave();\n    Move();\n    take_cake();\n    attack();\n    kill();\n    if(check_win())return 1;\n    End();\n    return 0;\n}\n```\n\n## \u57fa\u672c\u53d8\u91cf\n\n\u5148\u628a\u6bcf\u4e2a\u53d8\u91cf\u5217\u51fa\u6765\u65b9\u4fbf\u7406\u89e3\n\n```cpp\nint n,m,s,H,T,total;\n//total\u573a\u4e0a\u603b\u8682\u8681\u7684\u4e2a\u6570\uff0cH \u70ae\u53f0\u4f24\u5bb3\u2014\u2014>harm\nbool cake_taken=0;//\u86cb\u7cd5\u73b0\u5728\u662f\u5426\u88ab\u62ff\u8d70\ndouble R;//R \u70ae\u53f0\u5c04\u7a0b\u534a\u5f84\uff0c\u9632\u6b62\u6389\u7cbe\u5ea6\nint mp[9][9],vis[9][9];//\u4fe1\u606f\u7d20\uff0c\u8bb0\u5f55\u969c\u788d\u7269\nint dy1[]={1,0,-1,0},dx1[]={0,1,0,-1};//\u987a\u65f6\u9488\nint dy2[]={1,0,-1,0},dx2[]={0,-1,0,1};//\u9006\u65f6\u9488\nint read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct ant\n{\n    int x,y,age,hp,rk,sur;//\u5750\u6807\uff0c\u5e74\u9f84\uff0c\u8840\u91cf\uff0c\u7ea7\u522b,\u5b58\u6d3b\u65f6\u95f4\n    int pre_x,pre_y;//\u4e0a\u4e00\u79d2\u6240\u5728\u7684\u5750\u6807\n    double mx;//\u6700\u5927\u8840\u91cf\u4e0a\u9650\n    bool cake=0,live=0;//\u662f\u5426\u62ff\u7740\u86cb\u7cd5\uff0c\u662f\u5426\u6d3b\u7740\n}a[100];\nstruct point\n{\n    double x,y;\n};\nbool cmp_age(ant A,ant B)\n{\n    return A.age>B.age;\n}\nstruct turret//\u70ae\u53f0\n{\n    int x,y;\n}t[100];\n```\n\n## \u51fa\u751f\n\nbirth\u51fd\u6570\u6bd4\u8f83\u7b80\u5355\uff0c\u6ce8\u610f\u6bcf\u4e2a\u6570\u503c\u8981\u8d4b\u6e05\u695a\n\n\u8fd8\u6709\u5c31\u662f\u5b58\u50a8\u8682\u8681\u7684\u65b9\u5f0f\u9009\u62e9\uff0c\u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\uff01\uff01\u56e0\u4e3a\u9009\u62e9\u65b9\u5f0f\u4e0d\u5f53\u53ef\u80fd\u4f1a\u9020\u6210\u5199\u4ee3\u7801\u5f88\u5927\u7684\u56f0\u6270\u3002\n\n\u4f8b\u5982\u6211\u4e4b\u524d\u5c31\u662f\u6bcf\u6b21\u628a\u6b7b\u7684\u8682\u8681sort\u5230\u6570\u7ec4\u6700\u540e\uff0c\u518d\u4e0b\u4e00\u6b21\u51fa\u751f\u8682\u8681\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u8986\u76d6\u6389\n\n\u7136\u800c\u8fd9\u6837\u4f1a\u51fa\u4e00\u4e9b\u5947\u602a\u7684\u95ee\u9898\uff0c\u5bf9\u4e8ecnt\u7684\u63a7\u5236\u5c31\u6709\u4e9b\u5947\u602a\u7684\u7ec6\u8282\u3002\u3002\u3002\u53cd\u6b63\u8c03\u4e86\u5f88\u4e45\u6ca1\u6709A\n\n\u4e8e\u662f\u540e\u6765\u5c31\u6362\u6210\u4e86\u6bcf\u6b21\u627e\u5230\u4e00\u53ea\u6b7b\u8682\u8681\u5c31\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u53ea\u9488\u5bf9\u6d3b\u7740\u7684\u8682\u8681\u64cd\u4f5c\u800c\u4e0d\u662f\u524dcnt\u4e2a\u8fd9\u6837\u7684\uff0c\u6bd5\u7adf\u573a\u4e0a\u6700\u591a\u4e5f\u5c316\u53ea\u8682\u8681\uff0c\u590d\u6742\u5ea6\u4e0d\u7528\u62c5\u5fc3\u3002\u3002\n\n```cpp\nvoid birth()\n{\n    if(vis[0][0])return;\n    for(int i=1;i<=6;i++)\n     if(!a[i].live)\n    {\n        int l=total/6+1;\n        a[i].x=a[i].y=a[i].pre_x=a[i].pre_y=0;\n        a[i].age=0;a[i].rk=l;\n        a[i].mx=(4*pow(1.1,l));\n        a[i].hp=(int)(4*pow(1.1,l));\n        a[i].sur=1;a[i].cake=0;a[i].live=1;\n        vis[0][0]=1;\n        total++;\n        break;\n    }\n}\n```\n\n\u5c31\u4e0d\u89e3\u91ca\u4e86\n\n## \u7559\u6807\n\n\u8fd9\u4e2a\u5f88\u7b80\u5355\u4e0d\u89e3\u91ca\uff0c\u8d70\u6d41\u7a0b\n\n```cpp\nvoid leave()\n{\n    for(int i=1;i<=6;i++)\n    if(a[i].live)//\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u8981\u5224\u65ad\u6b7b\u6d3b\u6ce8\u610f\u3002\u3002\n    {\n        if(!a[i].cake)mp[a[i].x][a[i].y]+=2;\n        else mp[a[i].x][a[i].y]+=5;\n    }\n}\n```\n\n## \u79fb\u52a8\n\n\u8fd9\u662f\u975e\u5e38\u9ebb\u70e6\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u601d\u8def\u4e00\u5b9a\u8981\u6e05\u6670\uff0c\u5426\u5219\u975e\u5e38\u60e8\u75db\u3002\n\n\u60f3\u4e86\u89e3\u79fb\u52a8\u662f\u5426\u6b63\u786e\u53ef\u4ee5\u8c03BZOJ\u7b2c4\u7ec4\u6570\u636e\uff0c\u8fd9\u4e2a\u662f\u6ca1\u6709\u653b\u51fb\u64cd\u4f5c\u7684\uff0c\u7eaf\u79fb\u52a8\u3002\u6570\u636e\u54ea\u6765\u7684\uff1f\u5927\u5bb6\u90fd\u5fc3\u77e5\u809a\u660e\u5c31\u4e0d\u8bf4\u4e86\u3002\u3002\n\n### \u601d\u8def\u6574\u7406\n\n- \u679a\u4e3e\u65b9\u5411\u65f6\u6309\u987a\u65f6\u9488\u76f4\u63a5\u5199\u597d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u591a\u6b21\u5224\u65ad\n\n- \u5148\u626b\u904d\u627e\u5230\u4fe1\u606f\u7d20\u6700\u5927\u7684\u4e00\u4e2a\u65b9\u5411\uff0c\uff08\u4e0d\u7528\u7ba1\u6709\u6ca1\u6709\u591a\u4e2a\u76f8\u540c\u7684\uff0c\u56e0\u4e3a\u987a\u65f6\u9488\u679a\u4e3e\u76f8\u5f53\u4e8e\u5df2\u7ecf\u7b5b\u8fc7\u4e00\u904d\uff09\n\n- \u518d\u5224\u65ad\u65f6\u95f4\u662f\u5426\u4e3a5\u7684\u500d\u6570\uff0c\u662f\u5c31\u518d\u8fdb\u884c\u9006\u65f6\u9488\u7b5b\u9009\u64cd\u4f5c\n\n- \u6ce8\u610f\u6e05\u96f6\u4e4b\u524d\u7684\u6807\u8bb0\uff0c\u5904\u7406pre_x,pre_y\n\n### \u4ee3\u7801\n\n```cpp\nint c(int x)\n{\n    switch(x)\n    {\n        case 0:return 0;\n        case 1:return 3;\n        case 2:return 2;\n        case 3:return 1;\n    }\n}\nvoid update(int tx,int ty,int k)\n{\n    a[k].pre_x=a[k].x;a[k].pre_y=a[k].y;\n    vis[a[k].x][a[k].y]=0;\n    a[k].x=tx;a[k].y=ty;\n    vis[tx][ty]=1;\n}\nbool judge(int tx,int ty,int i)\n{\n    if(tx<0||ty<0||tx>n||ty>m||vis[tx][ty]||(tx==a[i].pre_x&&ty==a[i].pre_y))return 1;\n    else return 0;\n}\nvoid Move()\n{\n    sort(a+1,a+7,cmp_age);\n    for(int i=1;i<=6;i++)\n    {\n        if(!a[i].live)continue;\n        int max_val=-(1<<30);\n        int choose_dirtion=-1;\n        for(int j=0;j<4;j++)\n        {\n            int tx=a[i].x+dx1[j],ty=a[i].y+dy1[j];\n            if(judge(tx,ty,i))continue;\n            max_val=max(max_val,mp[tx][ty]);//\u627e\u6700\u5927\u503c\n        }\n        for(int j=0;j<4;j++)\n        {\n            int tx=a[i].x+dx1[j],ty=a[i].y+dy1[j];\n            if(judge(tx,ty,i))continue;\n            if(max_val==mp[tx][ty]){choose_dirtion=j;break;}//\u627e\u5230\u6700\u4f18\u65b9\u5411\n        }\n        if(choose_dirtion!=-1)\n        {\n            if(a[i].sur%5==0)//\u65f6\u95f4\u662f\u5426\u4e3a5\u7684\u500d\u6570\n            {\n                int change=c(choose_dirtion)+1;//\u66b4\u529b\u6253\u8868\u8f6c\u6362\n                for(int k=change;k;k++)\n                {\n                    int j=k%4;\n                    if(k==change+4)break;\n                    int tx=dx2[j]+a[i].x;\n                    int ty=dy2[j]+a[i].y;\n                    if(judge(tx,ty,i))continue;\n                    update(tx,ty,i);\n                    break;\n                }\n            }\n            else//\u4e0d\u662f\u76f4\u63a5\u5904\u7406\n            {\n                int tx=a[i].x+dx1[choose_dirtion],ty=a[i].y+dy1[choose_dirtion];\n                update(tx,ty,i);\n            }\n        }\n        else\n          a[i].pre_x=a[i].x,a[i].pre_y=a[i].y;\n\n    }\n}\n```\n\n## \u62ff\u7269\n\n\u5148\u6ce8\u610f\u5224\u65ad\u6b64\u65f6\u662f\u5426\u6709\u86cb\u7cd5\uff0c\u4e14\u8fd9\u53ea\u8682\u8681\u662f\u5426\u6d3b\u7740\u5c31\u884c\u3002\n\n```cpp\nvoid take_cake()\n{\n    if(!cake_taken)\n    for(int i=1;i<=6;i++)\n     if(a[i].live)\n         if(a[i].x==n&&a[i].y==m)\n        {\n            a[i].cake=1;\n            a[i].hp=min((int)a[i].mx,a[i].hp+(int)a[i].mx/2);//\u9632\u6b62\u6389\u7cbe\u5ea6\n            cake_taken=1;\n            return;\n        }\n    \n}\n```\n\n## \u653b\u51fb\n\n\u8fd9\u53c8\u662f\u672c\u9898\u7684\u4e00\u4e2a\u5927\u96be\u70b9\uff0c\u53c8\u5f88\u591a\u7ec6\u8282\u7279\u522b\u662f\u5bf9\u7ebf\u6bb5\u4e0e\u76f4\u7ebf\u662f\u5426\u6709\u4ea4\u70b9\u7684\u5224\u65ad\u3002\n\n### \u601d\u8def\u6574\u7406\n\n- \u5148\u6309\u5e74\u9f84sort\u4e00\u904d\n\n- \u5148\u626b\u4e00\u904d\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u653b\u51fb\u76ee\u6807\uff0c\u4e0d\u884c\u518d\u6839\u636e\u8ddd\u79bb\u8fdc\u8fd1\u9009\u62e9\u4e00\u4e2a\u6700\u7ec8\u76ee\u6807\n\n- \u53ea\u6709\u6253\u62ff\u86cb\u7cd5\u7684\u8682\u8681\u662f\u624d\u4f1a\u6709\u8eba\u67aa\u7684\u60c5\u51b5\uff0c\u6211\u53ea\u5199\u4e86\u5224\u65ad\u7ebf\u6bb5\u4e24\u70b9\u90fd\u5728\u5706\u5916\u7684\u60c5\u51b5\uff0c\u907f\u514d\u9ebb\u70e6\n\n\u5173\u4e8e\u5982\u4f55\u5224\u65ad\u4ea4\u70b9\u7684\u95ee\u9898\u3002\n\n\u53ef\u4ee5\u770b\u8fd9\u7bc7[BLOG](https://blog.csdn.net/syz201558503103/article/details/78400858)\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u53ea\u5b58\u5728\u4e24\u70b9\u90fd\u5728\u5706\u5916\u7684\u60c5\u51b5\uff08\u53ea\u7b97\u8eba\u67aa\uff09\uff0c\u6240\u4ee5\u9996\u5148\u6c42\u51fa\u76f4\u7ebf\u8868\u8fbe\u5f0f\uff0c\u7528$ax+by+c=0$\u6765\u8868\u793a\n\n\u7528\u516c\u5f0f\u7b97\u51fa\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb\n\n$$\nd= \\frac {|a \\times x_0+b \\times y_0 + c|}{\\sqrt{a^2+b^2}}\n$$\n\n\u5f53\u4e14\u4ec5\u5f53$d<=r$\u65f6\u624d\u7b26\u5408\u6761\u4ef6\n\n\n\u6700\u540e\u5224\u65ad\u65f6\u518d\u7ebf\u6bb5\u4e0a\u800c\u4e0d\u662f\u5728\u5ef6\u957f\u7ebf\u4e0a\u6709\u4ea4\u70b9\uff0c\u5229\u7528\u7ebf\u6bb5\u4e24\u4e2a\u7aef\u70b9\u4e0e\u5706\u5fc3\u6784\u6210\u7684\u4e09\u89d2\u5f62\u662f\u5426\u662f\u9510\u89d2\u4e09\u89d2\u5f62\u5373\u53ef\u3002\n\n\u4ee4\u7aef\u70b9$A(x_a,y_a)$ ,$B(x_b,y_b)$ \u5706\u5fc3$C(x_0,y_0)$\n\n\u5219\n$\\overrightarrow{A B} = (x_b-x_a,y_b-y_a)$ \n$\\overrightarrow{A O } = (x_0-x_a,y_0-y_a)$ \n\n\n$$\n\\cos\\theta =\\frac{\\overrightarrow{A B} \u00b7\\overrightarrow{A O}}{|\\overrightarrow{A B}|\u00b7|\\overrightarrow{A O}|}\n$$\n\n\n\u6ee1\u8db3$\\cos\\theta $ \u5927\u4e8e0\uff0c\u56e0\u4e3a\u5411\u91cf\u7684\u6a21\u4e00\u5b9a\u4f7f\u6b63\u6570\uff0c\u6ee1\u8db3\n\n$\\overrightarrow{A B} \u00b7\\overrightarrow{A O}>0$\u4e14$\\overrightarrow{B A} \u00b7\\overrightarrow{B O}>0$ \u5c31\u884c\n\n### \u4ee3\u7801 \n\n\u5224\u65ad\u51fd\u6570\n\n```cpp\nbool Cross(point A,point B,point O)//\u5224\u65ad\u662f\u5426\u6709\u4ea4\u70b9\u7684\u51fd\u6570\n{\n    double a,b,c;//ax+by+c=0\n    if(A.x==B.x)\n        a=1,b=0,c=-A.x;\n    else if(A.y==B.y)\n        a=0,b=1,c=-A.y;\n    else\n    {\n        a=A.y-B.y;\n        b=B.x-A.x;\n        c=A.x*B.y-A.y*B.x;\n    }\n    double dis1=a*O.x+b*O.y+c;dis1*=dis1;//\u7528\u5e73\u65b9\u4ee3\u66ffsqrt\u9632\u6b62\u6389\u7cbe\n    double dis2=(a*a+b*b)*0.5*0.5;\n    if(dis1>dis2)return 0;\n    double angle1=(O.x-A.x)*(B.x-A.x)+(O.y-A.y)*(B.y-A.y);//\u5224\u65ad\u4f59\u5f26\n    double angle2=(O.x-B.x)*(A.x-B.x)+(O.y-B.y)*(A.y-B.y);\n    if(angle1>0&&angle2>0)return 1;\n    return 0;\n}\n```\n\n\u8fc7\u7a0b\u51fd\u6570\n\n```cpp\nint dist(int x1,int y1,int x2,int y2)\n{\n    return ((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\nvoid ATTACK(int t_x,int t_y,int tur,int target)\n{\n    for(int i=1;i<=6;i++)\n     if(a[i].live)\n    {\n        if(i==target)//\u907f\u514d\u70b9\u5728\u5706\u5185\u7684\u60c5\u51b5\n            a[i].hp-=H;\n        else\n        {\n            if(cake_taken)\n             if(Cross((point){t[tur].x,t[tur].y},(point){t_x,t_y},(point){a[i].x,a[i].y}))\n                a[i].hp-=H;\n\n        }\n    }\n}\nvoid attack()\n{\n    sort(a+1,a+7,cmp_age);\n    int goal[30];\n    memset(goal,0,sizeof(goal));\n    for(int i=1;i<=s;i++)\n    {\n        int min_dis=(1<<30);\n        for(int j=1;j<=6;j++)\n            if(a[j].live)\n        {\n            int d=dist(t[i].x,t[i].y,a[j].x,a[j].y);\n            if(d<=R*R)\n            {\n                if(a[j].cake)goal[i]=j;//\u5148\u627etarget\n                else if(!a[goal[i]].cake&&d<min_dis)//\u518d\u6839\u636e\u8ddd\u79bb\u5224\u65ad\n                    {min_dis=d,goal[i]=j;}\n            }\n        }\n\n    }\n    for(int i=1;i<=s;i++)\n        if(goal[i])\n           ATTACK(a[goal[i]].x,a[goal[i]].y,i,goal[i]);//\u9010\u4e2a\u51fb\u7834\n\n}\n```\n\n## \u51fb\u6740\n\n\u771f\u00b7 \u6740\u8682\u8681\u5566~~\n\n```cpp\nvoid kill()\n{\n    int kill_num=0;\n    for(int i=1;i<=6;i++)\n    if(a[i].live)\n        if(a[i].hp<0)\n    {\n        vis[a[i].x][a[i].y]=0;\n        if(a[i].cake)a[i].cake=cake_taken=0;//\u6ce8\u610f\u5f52\u96f6\n        a[i].live=0;\n    }\n}\n```\n\n## \u8d62\u5c40\n\n\u76f4\u63a5check\u6ca1\u4ec0\u4e48\u8bf4\u7684\n\n```cpp\nint check_win()\n{\n    for(int i=1;i<=6;i++)\n        if(a[i].live)//\u5148\u5224\u65ad\u5b58\u6d3b\n    {\n        if(a[i].cake&&a[i].x==0&&a[i].y==0)\n            return 1;\n    }\n    return 0;\n}\n```\n\n## \u7ed3\u675f\n\n\u56de\u5408\u7ed3\u675f\uff0c\u571f\u5730\u4fe1\u606f\u7d20-- \uff0c\u8682\u8681\u5e74\u9f84\u589e\u957f\n\n```cpp\nvoid End()\n{\n    for(int i=0;i<=n;i++)\n        for(int j=0;j<=m;j++)\n        if(mp[i][j])mp[i][j]--;\n    for(int i=1;i<=6;i++)\n    if(a[i].live)\n    {\n        a[i].age++;\n        a[i].sur++;\n    }\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5f88\u4e11\u5c31\u4e0d\u653e\u4e86\n\n# \u603b\u7ed3\n\n- \u5bf9\u4e8e\u4e00\u4e2a300\u884c\u5de6\u53f3\u7684\u5927\u6a21\u62df\uff0c\u9700\u8981\u8010\u5fc3\uff0c\u7801\u529b\uff0c\u4ee5\u53ca\u6c38\u4e0d\u8a00\u5f03\u7684\u8c03\u8bd5\u80fd\u529b\u3002\n\n- \u5bf9\u4e8e\u5927\u6a21\u62df\uff0c\u552f\u6709\u8f93\u51fa\u8c03\u8bd5\u624d\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u5176\u4e2d\u8f93\u51fa\u4e00\u5b9a\u4e0d\u8981\u6015\u5199\u7684\u5f88\u7e41\u590d\uff0c\u8d8a\u6e05\u6670\u8d8a\u597d\u3002\n\n\u4f8b\u5982\uff1a\n\n```cpp\n        cout<<\"******************\"<<endl;//\u7528\u9002\u5f53\u661f\u53f7\u9694\u79bb\n        cout<<\"ant_id \"<<i<<' '<<endl;\n        cout<<\"ant_hp \"<<a[i].hp<<endl;\n        cout<<\"now_pos \"<<a[i].x<<' '<<a[i].y<<endl;\n        cout<<\"ant_age \"<<a[i].age<<endl;\n        cout<<\"ant_mx \"<<a[i].mx<<endl;\n        cout<<\"ant_cake \"<<a[i].cake<<endl;//\u6bcf\u4e2a\u53d8\u91cf\u540d\u5b57\u6e05\u6670\n```\n\n- \u5f53\u7136\u5728\u975e\u8003\u573a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0estd\u8fdb\u884c\u8f93\u51fa\u8c03\u8bd5\u5bf9\u62cd\u4e5f\u662f\u975e\u5e38\u4e0d\u9519\u7684\u627e\u9519\u65b9\u6cd5\n\n- \u8003\u8bd5\u5c31\u53ea\u80fd\u81ea\u5df1\u6574\u7406\u601d\u8def\u4ece\u5934\u5230\u5c3e\u67e5\u4e00\u904d\u9519\u4e86\u3002\u3002\u3002\n\n\u6700\u7ec8\u795d\u5404\u4f4dNOIP2018rp++\uff01\uff01\n\nQWQ\n",
        "postTime": 1541412561,
        "uid": 55501,
        "name": "Aoki_\u704f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "\u8d85\u7ea7\u5927\u6a21\u62df\uff5e\uff5e\uff5e\u52a0\u4e0a\u4e00\u70b9\u5c0f\u5c0f\u7684\u4e00\u70b9\u8ba1\u7b97\u51e0\u4f55\uff0c\n\n\n\u5343\u4e07\u6ce8\u610f\u8bfb\u9898\u554a\uff0c\u6309\u7167\u9898\u76ee\u6240\u8ff0\u76f4\u63a5\u66b4\u529b\u6c42\u5373\u53ef\uff01\u7279\u522b\u662f\u8682\u8681\u7684\u79fb\u52a8\uff0c\u554a\u554a\u554a\uff0c\u8c03\u4e86\u597d\u4e45\uff5e\uff5e\uff5e\n\nmyblog: <http://blog.csdn.net/miaomiao\\_ymxl/article/details/53715918>\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define LL long long\n#define pb push_back\n#define Set(a, v) memset(a, v, sizeof(a))\n#define For(i, a, b) for(int i = (a); i <= (int)(b); i++)\n#define Forr(i, a, b) for(int i = (a); i >= (int)(b); i--)\n#define MAXN (10+5)\n#define MAXP (20+5)\n#define INF 0x3f3f3f3f\nint rt, n, m, s, d, r;\nint tar;\nint info[MAXN][MAXN], fx[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\nbool hb[MAXN][MAXN], CAKE;\nbool pd(int x, int y){\n    if(x < 0 || y < 0 || x > n || y > m || hb[x][y]) return false;\n    return true;\n}\nstruct Ant{\n    int lx, ly, x, y, age, nb, blo, lv;\n    bool cake;\n    void addxx(){\n        info[x][y] += cake? 5: 2;\n    }\n    void addage(){age++;}\n    void move(){\n        int mxi = -1, mx, my, mfx;\n        For(i, 0, 3){\n            int nx = x+fx[i][0], ny = y+fx[i][1];\n            if(!pd(nx, ny)) continue;\n            if(mxi < info[nx][ny] && (nx!=lx || ny!=ly)){mfx = i, mx = nx, my = ny, mxi = info[nx][ny];}\n        }\n        if(age%5 == 4 && mxi != -1){\n            mxi = -1;\n            For(times, 1, 4){\n                int i = (mfx-times)%4;\n                if(i < 0) i += 4;\n                int nx = x+fx[i][0], ny = y+fx[i][1];\n                if(!pd(nx, ny)) continue;\n                if(mxi < info[nx][ny] && (nx!=lx || ny!=ly)){mfx = i, mx = nx, my = ny, mxi = info[nx][ny]; break;}\n            }\n        }\n        lx = x; ly = y;\n        if(mxi < 0) return;\n        hb[x][y] = false; hb[mx][my] = true;\n        x = mx; y = my;\n    }\n    void getcake(){\n        if(CAKE) return;              \n        if(x == n && y == m){\n             cake = CAKE = true; \n             blo += (int)nb/2;\n             if(blo > nb) blo = nb;\n        }\n    }\n    void print(){\n        printf(\"%d %d %d %d %d\\n\", age, lv, blo, x, y);\n    }\n};\nAnt ant[MAXN];\nint an, ant_tot;\ndouble dist(int x1, int y1, int x2, int y2){\n    return sqrt((x1-x2)*(x1-x2)*1.0 + 1.0*(y1-y2)*(y1-y2));\n}\nvoid kill(int tp){\n    Ant tmp;\n    For(i, tp+1, an) ant[i-1] = ant[i];\n    an--;  \n}\nvoid lose(){\n    For(i, 0, n) For(j, 0, m) \n            if(info[i][j]) info[i][j]--;\n}\n//\nstruct Point{\n    double x, y;\n    Point(double x=0, double y=0):x(x), y(y){};\n};\ntypedef Point Vector;\nconst double eps = 1e-10;\nint dcmp(double x){\n    if(fabs(x) < eps) return 0;\n    return x < 0? -1: 1;\n}\nVector operator -(Point A, Point B){return Vector(A.x-B.x, A.y-B.y);}\ndouble Dot(Vector A, Vector B){return A.x*B.x+A.y*B.y;}\ndouble Length(Vector A){return sqrt(Dot(A, A));}\ndouble Cross(Vector A, Vector B){return A.x*B.y-A.y*B.x;};\ndouble DistanceToSegment(Point P, Point A, Point B){\n    Vector v1 = B-A, v2 = P-A, v3 = P-B;\n    if(dcmp(Dot(v1, v2)) < 0) return Length(v2);\n    else if(dcmp(Dot(v1, v3)) > 0) return Length(v3);\n    else return fabs(Cross(v1, v2)) / Length(v1);\n}\n//\nstruct node{\n    int x, y;\n    void attack(){\n        if(!CAKE || dist(ant[tar].x, ant[tar].y, x, y)-1.0*r > 1e-10){\n            double dis, mind = INF*1.0;\n            int anum;\n            For(i, 1, an)\n                if((dis = dist(ant[i].x, ant[i].y, x, y))-1.0*r <= 1e-10){\n                    if(dis < mind){mind = dis; anum = i;}\n                }\n            if(mind > r) return;\n            ant[anum].blo -= d;\n            return;\n        }\n        Point A = (Point){ant[tar].x, ant[tar].y}, B = (Point){x, y};\n        For(i, 1, an){\n            if(ant[i].cake){\n                ant[i].blo -= d;\n                continue;\n            }\n            Point P = (Point){ant[i].x, ant[i].y};\n            if(DistanceToSegment(P, A, B)-0.5 <= 1e-10) ant[i].blo -= d;\n        }\n    }\n};\nnode bomb[MAXP];\ndouble make(int cnt){\n    double ret = 1;\n    For(i, 1, cnt) ret *= 1.1;\n    return ret;\n}\nvoid born(){\n    if(an == 6 || hb[0][0]) return;\n    an++; ant_tot++; hb[0][0] = true;\n    int lv = 1+(ant_tot-1)/6;\n    int blood = (int)(1.0*4*make(lv)); \n    Ant newa = (Ant){-1, -1, 0, 0, 0, blood, blood, lv, 0};\n    ant[an] = newa;\n}\nbool game_over(){\n    if(!CAKE) return false;\n    For(i, 1, an)\n        if(ant[i].x == 0 && ant[i].y == 0 && ant[i].cake) return true;\n    return false;\n}\nvoid checkDead(){\n    For(i, 1, an)\n        if(ant[i].blo < 0){\n            if(ant[i].cake) CAKE = false, tar = 0;\n            hb[ant[i].x][ant[i].y] = false;\n            kill(i); i--;\n        }\n}\nint main(){\n    scanf(\"%d%d%d%d%d\", &n, &m, &s, &d, &r);\n    For(i, 1, s){\n        scanf(\"%d%d\", &bomb[i].x, &bomb[i].y);\n        hb[bomb[i].x][bomb[i].y] = true;\n    }\n    int t;\n    bool going = true;\n    scanf(\"%d\", &t);\n    for(rt = 1; rt <= t; rt++){\n        born();\n        For(i, 1, an) ant[i].addxx();\n        For(i, 1, an) ant[i].move();\n        For(i, 1, an){\n            ant[i].getcake();\n            if(ant[i].cake) tar = i;\n        }\n        if(!CAKE) tar = 0;\n        For(i, 1, s) bomb[i].attack();\n        checkDead();\n        if(game_over()){\n            going = false;\n            printf(\"Game over after %d seconds\\n\", rt);\n            break;\n        }\n        For(i, 1, an) ant[i].addage();\n        lose();\n    }\n    if(going) printf(\"The game is going on\\n\");\n    printf(\"%d\\n\", an);\n    For(i, 1, an) ant[i].print();\n    return 0;\n}\n\n```",
        "postTime": 1481986789,
        "uid": 8925,
        "name": "miaowey",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "## \u9898\u610f\u5206\u6790\uff1a\n\n\u8fd9\u662f\u4e00\u9053\u6a21\u62df\u9898\n\n\u4ee3\u7801\u957f\u5ea6\u5176\u5b9e\u8fd8\u597d\uff0c\u4e3b\u8981\u662f\u7ec6\u8282\u591a\n\n\u53ea\u8981\u77e5\u9053\u4e00\u4e9b\u8ba1\u7b97\u51e0\u4f55\u57fa\u7840\u77e5\u8bc6\u5373\u53ef\u5feb\u4e50\u6a21\u62df\uff0c\u6309\u7740\u9898\u76ee\u8981\u6c42\u4e00\u6b65\u6b65\u5b9e\u73b0\u5c31\u884c\u5566\n\n\u6ce8\u610f\u4ed4\u7ec6\u8bfb\u9898\uff0c\u8682\u8681\u6bcf 5 \u79d2\u4e71\u8d70\u4e00\u6b21\u7684\u65f6\u5019\u662f\u53ea\u8981\u80fd\u8d70\u5c31\u8d70\u4e86\uff0c\u4e0d\u4e00\u5b9a\u8981\u4fe1\u606f\u7d20\u6700\u591a\n\n\u8fd8\u6709\u56e0\u4e3a\u70ae\u53f0\u662f\u540c\u65f6\u6253\u7684\uff0c\u6240\u4ee5\u76ee\u6807\u8981\u63d0\u524d\u9009\u597d\uff0c\u5c31\u7b97\u67d0\u53ea\u8682\u8681\u88ab\u6253\u6210\u8d1f\u8840\u4e86\uff0c\u8fd8\u662f\u4f1a\u7ee7\u7eed\u88ab\u6253\n\n\u8682\u8681\u521d\u59cb\u5e74\u9f84\u4e3a 0 \uff0c\u6d3b\u52a8\u65f6\u95f4\u662f\u6309 1 \u5f00\u59cb\u7684\uff08\u770b\u6837\u4f8b\u5c31\u61c2\u4e86\uff09\n\n\u6211\u7528 set \u6309\u5e74\u9f84\u7ef4\u62a4\u8682\u8681\u4fe1\u606f\uff0c\u6ce8\u610f\u679a\u4e3e  set \u5185\u7684\u8682\u8681\u65f6\u8981\u5148\u628a set \u7684\u4fe1\u606f\u7edf\u4e00\u53d6\u51fa\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u6307\u9488\u8d8a\u754c\n\n\u628a\u53d6\u51fa\u540e\u4fee\u6539\u7684\u4fe1\u606f\u518d\u91cd\u65b0\u653e\u56de set \u5373\u53ef\uff0c\u5177\u4f53\u6a21\u62df\u5b9e\u73b0\u5f53\u7136\u8fd8\u662f\u770b\u4ee3\u7801\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<set>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ninline int read()\n{\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9') { if(ch=='-') f=-1; ch=getchar(); }\n    while(ch>='0'&&ch<='9') { x=(x<<1)+(x<<3)+(ch^48); ch=getchar(); }\n    return x*f;\n}\nconst db eps=1e-6;\nconst int N=233,xx[4]={0,1,0,-1},yy[4]={1,0,-1,0};\ninline int dcmp(db x) { if(fabs(x)<eps) return 0; return x<0 ? -1 : 1; }\nint n,m,S,attack,R,T,ant_cnt;\n//\u77e9\u9635\u957f\u5bbd,\u70ae\u53f0\u6570\u91cf,\u653b\u51fb,\u534a\u5f84,\u65f6\u95f4,\u76ee\u524d\u8682\u8681\u6570\u91cf\nint Map[N][N],Vis[N][N];\n//\u7ef4\u62a4\u5730\u56fe\u4fe1\u606f\u7d20,\u7ef4\u62a4\u5730\u56fe\u88ab\u5360\u7528\u7684\u4f4d\u7f6e\nbool Cake=1,GG;//\u662f\u5426\u6709\u86cb\u7cd5,\u6e38\u620f\u662f\u5426\u7ed3\u675f\nstruct Point {\n    int x,y;\n    Point (int a=0,int b=0) { x=a,y=b; }\n    inline bool operator == (const Point &tmp) const { return x==tmp.x&&y==tmp.y; }\n    inline Point operator - (const Point &tmp) const { return Point(x-tmp.x,y-tmp.y); }\n    inline Point to(int k) { return Point(x+xx[k],y+yy[k]); }\n};\ninline db Cross(Point A,Point B) { return A.x*B.y-A.y*B.x; }\ninline db Dot(Point A,Point B) { return A.x*B.x+A.y*B.y; }\ninline db Len(Point A) { return sqrt(Dot(A,A)); }\n//\u4ee5\u4e0a\u8ba1\u7b97\u51e0\u4f55\u677f\u5b50\ninline bool pd(Point P) { return P.x<0||P.x>n||P.y<0||P.y>m||Vis[P.x][P.y]; }//\u5224\u65ad\u4f4d\u7f6e\u5408\u6cd5\u6027\nstruct Ant {//\u8682\u8681\u4fe1\u606f\n    int blood,age,mxbld,lev;\n    //\u5f53\u524d\u8840\u91cf,\u5e74\u9f84,\u6700\u5927\u751f\u547d,\u7b49\u7ea7\n    bool target; Point P,pre;\n    //\u662f\u5426\u6709\u86cb\u7cd5,\u5f53\u524d\u4f4d\u7f6e\uff0c\u4e0a\u4e00\u6b65\u7684\u4f4d\u7f6e\n    Ant (int c=0,int d=0,int e=0,int f=0,bool h=0,Point A=Point(0,0),Point B=Point(0,0)) {\n        blood=c,age=d,mxbld=e,lev=f,target=h; P=A; pre=B;\n    }\n    void Move()//\u8fdb\u884c\u79fb\u52a8\n    {\n        int X[5],tot=0,mx=0; Vis[P.x][P.y]=0;//\u539f\u672c\u4f4d\u7f6e\u8682\u8681\u8d70\u4e86\n        for(int i=0;i<4;i++)//\u6309\u65b9\u5411\u679a\u4e3e\n        {\n            Point t=P.to(i);\n            if(pd(t)||t==pre||(tot && Map[t.x][t.y]<mx)) continue;//\u5224\u65ad\u4e0d\u5408\u6cd5\n            if(Map[t.x][t.y]>mx) mx=Map[t.x][t.y],tot=0;//\u4fee\u6539\u5408\u6cd5\u65b9\u5411\n            X[++tot]=i;\n        }\n        if(!tot) { pre=P; Vis[P.x][P.y]=1; return; }//\u5224\u65ad\u4e0d\u53ef\u8d70\n        if((age+1)%5) { pre=P; P=P.to(X[1]); Vis[P.x][P.y]=1; return ; }//\u6b63\u5e38\u79fb\u52a8\n        for(int k=(X[1]+3)%4,i=0;i<4;i++,k=(k+3)%4)//5\u79d2\u4e71\u8d70\u4e00\u6b21\n        {\n            Point t=P.to(k);\n            if(!pd(t)&&!(t==pre))//\u53ea\u8981\u53ef\u4ee5\u8d70\u5c31\u76f4\u63a5\u8d70\u4e86\n                { pre=P,P=t,Vis[P.x][P.y]=1; return; }\n        }\n    }\n    void try_to_get_cake()//\u770b\u770b\u80fd\u4e0d\u80fd\u5f97\u5230\u86cb\u7cd5\n    {\n        if(P.x!=n||P.y!=m||!Cake) return;\n        Cake=0; blood=min(mxbld,blood+(mxbld/2)); target=1;\n        //\u5f97\u5230\u86cb\u7cd5,\u66f4\u65b0\u6570\u636e\n    }\n    inline bool operator < (const Ant &tmp) const { return age>tmp.age; }//\u6309\u5e74\u9f84\u6392\u5e8f\n}tmp[N];\nint tot;//tmp\u7684\u53f3\u7aef\u70b9\nset <Ant> ant;\ninline db Dis(Point P,Point Q,Point A)\n{\n    if(dcmp(Dot(A-P,Q-P))<0) return Len(A-P);\n    if(dcmp(Dot(A-Q,P-Q))<0) return Len(A-Q);\n    return fabs(Cross(A-P,Q-P)/Len(Q-P));\n}//\u540c\u6837\u8ba1\u7b97\u51e0\u4f55\u677f\u5b50,\u6c42A\u5230\u7ebf\u6bb5PQ\u7684\u8ddd\u79bb\nstruct turret {//\u70ae\u53f0\n    Point P;//\u5750\u6807\n    void Attack()//\u8fdb\u884c\u653b\u51fb\n    {\n        Ant to,A; db mi=N;\n        for(int i=1;i<=tot;i++)\n        {\n            A=tmp[i];\n            if(Len(P-A.P)>1.0*R+eps) continue;//\u592a\u8fdc\u5c31\u6ca1\u5f97\u6253\n            if(A.target) { to=A; mi=0; break; }//\u53d1\u73b0\u6709target\n            if(Len(P-A.P)+eps<mi) to=A,mi=Len(P-A.P);//\u627e\u5230\u6700\u8fd1\u7684\u8682\u8681\n        }\n        if(int(mi+eps)==N) return;//\u8303\u56f4\u5185\u6ca1\u6709\u76ee\u6807\n        for(int i=1;i<=tot;i++)\n            if(Dis(P,to.P,tmp[i].P)<0.5+eps) tmp[i].blood-=attack;//\u770b\u770b\u80fd\u5426\u6ce2\u53ca\u5230\u5176\u4ed6\u8682\u8681\n    }\n}Tur[N];\ninline db ksm(db x,int y)\n{\n    db res=1;\n    while(y) { if(y&1) res=res*x; x=x*x; y>>=1; }\n    return res;\n}\nint cnt;//\u603b\u5171\u51fa\u73b0\u7684\u8682\u8681\u6570\u91cf\nvoid Work()\n{\n    if(ant_cnt<6&&!Vis[0][0])//\u5f53\u524d\u4f4d\u7f6e\u6ca1\u6709\u8682\u8681\u624d\u80fd\u5237\u8682\u8681\n    {\n        Ant New_ant; New_ant.lev=cnt/6+1;\n        New_ant.blood=New_ant.mxbld=4.0*ksm(1.1,New_ant.lev);\n        New_ant.P=Point(0,0); Vis[0][0]=1;\n        ant_cnt++; cnt++; ant.insert(New_ant);//\u66f4\u65b0\u4e00\u5806\u6570\u636e\n    }\n    for(auto A: ant)//\u66f4\u65b0\u5730\u56fe\u4fe1\u606f\u7d20\n    {\n        if(!A.target) Map[A.P.x][A.P.y]+=2;\n        else Map[A.P.x][A.P.y]+=5;\n    }\n    tot=0; for(auto A: ant) tmp[++tot]=A;//\u53d6\u51fa\u6570\u636e\n    for(int i=1;i<=tot;i++)\n    {\n        ant.erase(tmp[i]),tmp[i].Move();\n        tmp[i].try_to_get_cake();//\u79fb\u52a8\u5e76\u5224\u65ad\u5f97\u5230\u86cb\u7cd5\n    }\n    for(int i=1;i<=S;i++) Tur[i].Attack();//\u70ae\u53f0\u653b\u51fb\n    for(int i=1;i<=tot;i++)\n    {\n        if(tmp[i].blood>=0) ant.insert(tmp[i]);//\u6700\u540e\u7edf\u4e00\u63d2\u56deset\n        else { ant_cnt--; Vis[tmp[i].P.x][tmp[i].P.y]=0; if(tmp[i].target) Cake=1; }\n        //\u8682\u8681\u6b7b\u4e86,\u66f4\u65b0\u6570\u636e,\u5f52\u8fd8\u86cb\u7cd5\n    }\n    for(auto A: ant) if(A.target&&!A.P.x&&!A.P.y) { GG=1; return; }//\u5224\u65ad\u6e38\u620f\u7ed3\u675f\n    for(int i=0;i<=n;i++)\n        for(int j=0;j<=m;j++) if(Map[i][j]) Map[i][j]--;//\u66f4\u65b0\u4fe1\u606f\u7d20\n    tot=0; for(auto A: ant) tmp[++tot]=A;\n    for(int i=1;i<=tot;i++) ant.erase(tmp[i]),tmp[i].age++;//\u7edf\u4e00\u5e74\u9f84\u52a01\n    for(int i=1;i<=tot;i++) ant.insert(tmp[i]);\n}\nint main()\n{\n    n=read(),m=read(); S=read(),attack=read(),R=read();\n    for(int i=1;i<=S;i++)\n    {\n        Tur[i].P.x=read(),Tur[i].P.y=read();\n        Vis[ Tur[i].P.x ][ Tur[i].P.y ]=1;//\u70ae\u53f0\u4e0d\u80fd\u8d70\n    }\n    int Time=read();\n    for(int t=1;t<=Time;t++)\n    {\n        Work();\n        if(GG) { printf(\"Game over after %d seconds\\n\",t); break; }\n    }\n    if(!GG) printf(\"The game is going on\\n\");\n    printf(\"%d\\n\",int(ant.size()));\n    for(auto A: ant) printf(\"%d %d %d %d %d\\n\",A.age,A.lev,A.blood,A.P.x,A.P.y);\n    return 0;\n}\n```\n",
        "postTime": 1626079847,
        "uid": 480340,
        "name": "Fengxiang008",
        "ccfLevel": 0,
        "title": "P2586 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9053\u5927\u6a21\u62df\u9898\uff0c\u5199\u597d\u53d8\u91cf\u540d\u53ef\u80fd\u662f\u6700\u91cd\u8981\u7684\uff0c\u65b9\u4fbf debug \u540c\u65f6\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6572\u9519\u5bfc\u81f4\u4e00\u4e9b\u4f4e\u7ea7\u9519\u8bef\u3002\n\n\u8865\u5145\u4e00\u4e2a\u9898\u9762\u63cf\u8ff0\uff1a\u5728\u786e\u5b9a\u8682\u8681\u65b9\u5411\u65f6\uff0c\u82e5\u6700\u5927\u7684\u4fe1\u606f\u7d20\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u6309\u7167\u4e1c\u5357\u897f\u5317\u7684\u987a\u5e8f\u9009\u62e9**\u6709\u6700\u591a\u4fe1\u606f\u7d20**\u7684\u683c\u70b9\u3002\n\n\u5176\u4ed6\u7684\u9898\u9762\u5df2\u7ecf\u8bf4\u6e05\u695a\u4e86\uff0c\u76f4\u63a5\u6309\u8981\u6c42\u6a21\u62df\u5373\u53ef\u3002\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1. \u7531\u4e8e\u8682\u8681\u6700\u591a\u53ea\u6709 6 \u4e2a\uff0c\u5728\u5220\u9664\u6b7b\u4ea1\u8682\u8681\u65f6\u76f4\u63a5\u5220\u9664\u6570\u7ec4\u5143\u7d20\u5373\u53ef\u3002\n2. \u5730\u56fe\u72b6\u6001\u7684\u66f4\u65b0\uff1a\u5728\u8682\u8681\u751f\u6210\u65f6\u548c\u6b7b\u4ea1\u65f6\u8bb0\u5f97\u8bbe\u7f6e\u683c\u70b9\u662f\u5426\u4e3a\u7a7a\u3002\n\n\n\u5b9e\u73b0\u903b\u8f91\u5168\u90e8\u5199\u5728\u6ce8\u91ca\u4e2d\u4e86\u3002\n\nAC \u4ee3\u7801\uff08Golang\uff09:\n\n```go\npackage main\n\nimport (\n\t. \"fmt\"\n\t\"math\"\n)\n\n// \u4e00\u4e9b\u5e38\u91cf\u5b9a\u4e49\nconst (\n\teps = 1e-8\n\n\tmaxAnts              = 6   // \u6700\u5927\u8682\u8681\u6570\n\tantRadius            = 0.5 // \u8682\u8681\u534a\u5f84\n\tpheromoneWithoutCake = 2   // \u4e0d\u643a\u5e26\u86cb\u7cd5\u65f6\u4ea7\u751f\u7684\u4fe1\u606f\u7d20\n\tpheromoneWithCake    = 5   // \u643a\u5e26\u86cb\u7cd5\u65f6\u4ea7\u751f\u7684\u4fe1\u606f\u7d20\n)\n\n// \u70b9\ntype vec struct {\n\tx, y int\n}\n\n// \u7ebf\u6bb5\ntype line struct {\n\tp1, p2 vec\n}\n\n// \u5411\u91cf\u57fa\u672c\u8fd0\u7b97\nfunc (a vec) add(b vec) vec { return vec{a.x + b.x, a.y + b.y} }\nfunc (a vec) sub(b vec) vec { return vec{a.x - b.x, a.y - b.y} }\nfunc (a vec) len() float64  { return math.Hypot(float64(a.x), float64(a.y)) }\nfunc (a vec) len2() int     { return a.x*a.x + a.y*a.y }\nfunc (a vec) dot(b vec) int { return a.x*b.x + a.y*b.y }\nfunc (a vec) det(b vec) int { return a.x*b.y - a.y*b.x }\nfunc (a line) vec() vec     { return a.p2.sub(a.p1) }\n\n// \u70b9\u5230\u7ebf\u6bb5\u7684\u8ddd\u79bb\nfunc (a vec) disToSeg(l line) float64 {\n\tv, p1a, p2a := l.vec(), a.sub(l.p1), a.sub(l.p2)\n\tif v.dot(p1a) < 0 {\n\t\treturn p1a.len()\n\t}\n\tif v.dot(p2a) > 0 {\n\t\treturn p2a.len()\n\t}\n\treturn math.Abs(float64(v.det(p1a))) / v.len()\n}\n\n// \u5730\u56fe\u683c\u70b9\ntype grid struct {\n\tpheromone int  // \u4fe1\u606f\u7d20\n\tempty     bool // \u662f\u5426\u4e3a\u7a7a\n}\n\n// \u8682\u8681\ntype ant struct {\n\tage     int  // \u5e74\u9f84\n\tlevel   int  // \u7b49\u7ea7\n\tmaxHP   int  // \u521d\u59cb\u8840\u91cf\n\tcurHP   int  // \u5f53\u524d\u8840\u91cf\n\tprevPos vec  // \u4e0a\u4e00\u79d2\u4f4d\u7f6e\n\tpos     vec  // \u5f53\u524d\u4f4d\u7f6e\n\thasCake bool // \u662f\u5426\u625b\u7740\u86cb\u7cd5\n}\n\n// \u70ae\u5854\uff08\u6fc0\u5149\u5854\uff09\ntype tower struct {\n\tdamage   int // \u4f24\u5bb3\n\tatkRange int // \u653b\u51fb\u8303\u56f4\n\tpos      vec // \u4f4d\u7f6e\n}\n\n// \u6e38\u620f\u6570\u636e\ntype game struct {\n\theight, width int      // \u957f\uff0c\u5bbd\n\tboard         [][]grid // \u5730\u56fe\u683c\u70b9\n\tantNest, cake vec      // \u8681\u7a74\u4f4d\u7f6e\uff0c\u86cb\u7cd5\u4f4d\u7f6e\n\tantWithCake   *ant     // \u62ff\u7740\u86cb\u7cd5\u7684\u8682\u8681\n\tantGenCounter int      // \u8682\u8681\u751f\u6210\u8ba1\u6570\u5668\n\tants          []*ant   // \u8682\u8681\n\ttowers        []*tower // \u70ae\u5854\n}\n\n// \u65b0\u6e38\u620f\nfunc newGame(height, width int) *game {\n\tg := &game{height: height, width: width, cake: vec{height, width}}\n\tg.board = make([][]grid, height+1)\n\tfor i := range g.board {\n\t\tg.board[i] = make([]grid, width+1)\n\t\tfor j := range g.board[i] {\n\t\t\tg.board[i][j].empty = true\n\t\t}\n\t}\n\treturn g\n}\n\n// \u751f\u6210\u8682\u8681\nfunc (g *game) newAnt() {\n\t// \u5982\u679c\u5730\u56fe\u4e0a\u8682\u8681\u6570\u4e0d\u8db3 6\uff0c\u5e76\u4e14\u6d1e\u53e3\u6ca1\u6709\u8682\u8681\uff0c\u4e00\u53ea\u8682\u8681\u5c31\u4f1a\u5728\u6d1e\u53e3\u51fa\u751f\n\tif len(g.ants) < maxAnts && g.board[0][0].empty {\n\t\tg.board[0][0].empty = false\n\t\tlevel := g.antGenCounter/6 + 1\n\t\thp := int(4 * math.Pow(1.1, float64(level)))\n\t\ta := &ant{level: level, maxHP: hp, curHP: hp}\n\t\tg.ants = append(g.ants, a)\n\t\tg.antGenCounter++\n\t}\n}\n\n// \u79fb\u52a8\u524d\uff0c\u8682\u8681\u4eec\u5728\u81ea\u5df1\u6240\u5728\u70b9\u7559\u4e0b\u4e00\u4e9b\u4fe1\u606f\u7d20\nfunc (g *game) beginSecond() {\n\tfor _, a := range g.ants {\n\t\tif a.hasCake {\n\t\t\tg.board[a.pos.x][a.pos.y].pheromone += pheromoneWithCake\n\t\t} else {\n\t\t\tg.board[a.pos.x][a.pos.y].pheromone += pheromoneWithoutCake\n\t\t}\n\t}\n}\n\n// \u683c\u70b9 p \u662f\u5426\u53ef\u8fbe\nfunc (g *game) canReach(p vec) bool {\n\treturn 0 <= p.x && p.x <= g.height && 0 <= p.y && p.y <= g.width && g.board[p.x][p.y].empty\n}\n\n// \u4e1c\u5357\u897f\u5317\nvar dir4 = [4]vec{{0, 1}, {1, 0}, {0, -1}, {-1, 0}}\n\n// \u79fb\u52a8\u6240\u6709\u8682\u8681\nfunc (g *game) moveAnts() {\n\t// \u8682\u8681\u6309\u51fa\u751f\u7684\u987a\u5e8f\u79fb\u52a8\uff0c\u51fa\u751f\u5f97\u6bd4\u8f83\u65e9\u7684\u8682\u8681\u5148\u79fb\u52a8\n\tfor _, a := range g.ants {\n\t\tmaxPheromone := -1\n\t\tvar dirI int\n\t\t// \u8682\u8681\u7684\u79fb\u52a8\u65b9\u5411\u4e3a\u4e1c\u5357\u897f\u5317\n\t\tfor i, d := range dir4 {\n\t\t\t// \u8682\u8681\u53ea\u80fd\u79fb\u52a8\u5230\u7a7a\u683c\u70b9\u4e0a\uff0c\u4e14\u4e0d\u80fd\u662f\u4e0a\u4e00\u79d2\u6240\u5728\u7684\u70b9\n\t\t\t// \u5982\u679c\u6b64\u65f6\u6709\u591a\u4e2a\u9009\u62e9\uff0c\u8682\u8681\u4f1a\u9009\u62e9\u4fe1\u606f\u7d20\u6700\u591a\u7684\u90a3\u4e2a\u70b9\u722c\u8fc7\u53bb\uff0c\n\t\t\t// \u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6700\u591a\u4fe1\u606f\u7d20\uff0c\u5219\u6309\u7167\u4e1c\u5357\u897f\u5317\u7684\u987a\u5e8f\u9009\u62e9\u6709\u6700\u591a\u4fe1\u606f\u7d20\u7684\u683c\u70b9\n\t\t\tif p := a.pos.add(d); p != a.prevPos && g.canReach(p) && g.board[p.x][p.y].pheromone > maxPheromone {\n\t\t\t\tmaxPheromone = g.board[p.x][p.y].pheromone\n\t\t\t\tdirI = i\n\t\t\t}\n\t\t}\n\t\t// \u5982\u679c\u8682\u8681\u7684\u56db\u5468\u90fd\u662f\u4e0d\u53ef\u8fbe\u70b9\uff0c\u90a3\u4e48\u8682\u8681\u5728\u8fd9\u4e00\u79d2\u5185\u4f1a\u9009\u62e9\u505c\u7559\u5728\u5f53\u524d\u70b9\u3002\u4e0b\u4e00\u79d2\u5224\u65ad\u79fb\u52a8\u65b9\u5411\u65f6\uff0c\u5b83\u4e0a\u4e00\u79d2\u6240\u5728\u70b9\u4e3a\u5176\u5f53\u524d\u505c\u7559\u7684\u70b9\n\t\tif maxPheromone == -1 {\n\t\t\ta.prevPos = a.pos\n\t\t\tcontinue\n\t\t}\n\t\t// \u82e5\u6b64\u65f6\u8682\u8681\u7684\u5e74\u9f84\u4e3a 5n+4\uff0c\u5b83\u4f1a\u5728\u9009\u62e9\u65b9\u5411\u540e\u4e0d\u65ad\u9006\u65f6\u9488\u8f6c 90\u00b0\uff0c\u76f4\u5230\u9762\u5bf9\u4e00\u4e2a\u53ef\u8fbe\u7684\u70b9\uff0c\u8fd9\u6837\u5b9a\u4e0b\u7684\u65b9\u5411\u624d\u662f\u8682\u8681\u6700\u7ec8\u8981\u722c\u53bb\u7684\u65b9\u5411\n\t\tif a.age%5 == 4 {\n\t\t\tfor dirI = (dirI + 3) % 4; ; dirI = (dirI + 3) % 4 {\n\t\t\t\tif p := a.pos.add(dir4[dirI]); p != a.prevPos && g.canReach(p) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// \u66f4\u65b0\u8682\u8681\u4f4d\u7f6e\u548c\u5730\u56fe\u72b6\u6001\n\t\tg.board[a.pos.x][a.pos.y].empty = true\n\t\ta.prevPos, a.pos = a.pos, a.pos.add(dir4[dirI])\n\t\tg.board[a.pos.x][a.pos.y].empty = false\n\t}\n}\n\n// \u5982\u679c\u86cb\u7cd5\u6ca1\u88ab\u625b\u8d70\u5e76\u4e14\u6709\u8682\u8681\u5728\u86cb\u7cd5\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5b83\u628a\u86cb\u7cd5\u625b\u4e0a\uff0c\u8840\u91cf\u589e\u52a0\nfunc (g *game) checkCake() {\n\tif g.antWithCake != nil {\n\t\treturn\n\t}\n\tfor _, a := range g.ants {\n\t\tif a.pos == g.cake {\n\t\t\ta.hasCake = true\n\t\t\ta.curHP += a.maxHP / 2\n\t\t\tif a.curHP > a.maxHP {\n\t\t\t\ta.curHP = a.maxHP\n\t\t\t}\n\t\t\tg.antWithCake = a\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n// \u70ae\u53f0\u653b\u51fb\u8682\u8681\nfunc (g *game) towerAttack() {\n\t// \u6240\u6709\u5854\u540c\u65f6\u5f00\u59cb\u653b\u51fb\n\tfor _, t := range g.towers {\n\t\tvar targetAnt *ant\n\t\t// \u53ea\u6709\u5f53\u4ee3\u8868\u8682\u8681\u7684\u5706\u7684\u5706\u5fc3\u4e0e\u5854 t \u7684\u76f4\u7ebf\u8ddd\u79bb\u4e0d\u8d85\u8fc7 t.atkRange \u65f6\uff0c\u5854\u624d\u7b97\u6253\u5f97\u5230\u90a3\u53ea\u8682\u8681\n\t\t// \u5982\u679c\u4e00\u53ea\u8682\u8681\u625b\u7740\u86cb\u7cd5\uff0c\u4efb\u4f55**\u6253\u5f97\u5230**\u5b83\u7684\u5854\u7684\u70ae\u53e3\u90fd\u4f1a\u5bf9\u51c6\u5b83\n\t\tif g.antWithCake != nil && t.pos.sub(g.antWithCake.pos).len2() <= t.atkRange*t.atkRange {\n\t\t\ttargetAnt = g.antWithCake\n\t\t} else {\n\t\t\t// \u5426\u5219\u5854\u4f1a\u6311\u79bb\u5b83\u6700\u8fd1\u7684\u8682\u8681\u8fdb\u884c\u653b\u51fb\uff0c\u5982\u679c\u6709\u591a\u53ea\u8682\u8681\uff0c\u5b83\u4f1a\u9009\u51fa\u751f\u8f83\u65e9\u7684\u4e00\u53ea\n\t\t\tminDis2 := int(1e9)\n\t\t\tfor _, a := range g.ants {\n\t\t\t\tif dis2 := t.pos.sub(a.pos).len2(); dis2 < minDis2 && dis2 <= t.atkRange*t.atkRange {\n\t\t\t\t\tminDis2 = dis2\n\t\t\t\t\ttargetAnt = a\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif targetAnt == nil {\n\t\t\tcontinue\n\t\t}\n\t\t// \u5854\u5230\u76ee\u6807\u8682\u8681\u5706\u5fc3\u7684\u8fde\u7ebf\u4e0a\u7684\u6240\u6709\u8682\u8681\u90fd\u4f1a\u88ab\u6253\u5230\u5e76\u635f\u5931 t.damage \u8840\u91cf\uff0c\u8fd9\u91cc\u201c\u88ab\u6253\u5230\u201d\u6307\u8868\u793a\u6fc0\u5149\u7684\u7ebf\u6bb5\u4e0e\u8868\u793a\u8682\u8681\u7684\u5706\u6709\u516c\u5171\u70b9\n\t\ttowerToAntSeg := line{t.pos, targetAnt.pos}\n\t\tfor _, a := range g.ants {\n\t\t\tif a.pos.disToSeg(towerToAntSeg)-eps < antRadius {\n\t\t\t\ta.curHP -= t.damage\n\t\t\t}\n\t\t}\n\t}\n\n\t// \u79fb\u9664\u6b7b\u4ea1\u8682\u8681\n\tnewAnts := []*ant{}\n\tfor _, a := range g.ants {\n\t\tif a.curHP >= 0 {\n\t\t\tnewAnts = append(newAnts, a)\n\t\t} else {\n\t\t\t// \u5f53\u8682\u8681\u7684\u8840\u88ab\u6253\u6210\u8d1f\u6570\u65f6\uff0c\u5b83\u624d\u7b97\u6302\u4e86\n\t\t\tif a.hasCake {\n\t\t\t\t// \u5982\u679c\u653b\u51fb\u7ed3\u675f\u540e\u90a3\u53ea\u625b\u7740\u86cb\u7cd5\u7684\u8682\u8681\u6302\u4e86\uff0c\u86cb\u7cd5\u77ac\u95f4\u5f52\u4f4d\n\t\t\t\tg.antWithCake = nil\n\t\t\t}\n\t\t\t// \u8682\u8681\u6b7b\u4ea1\u540e\u5730\u56fe\u683c\u70b9\u9700\u8981\u8bbe\u7f6e\u6210\u7a7a\n\t\t\tg.board[a.pos.x][a.pos.y].empty = true\n\t\t}\n\t}\n\tg.ants = newAnts\n}\n\n// \u5982\u679c\u53d1\u73b0\u625b\u86cb\u7cd5\u7684\u8682\u8681\u6ca1\u6b7b\u5e76\u5728\u7a9d\u7684\u4f4d\u7f6e\uff0c\u5c31\u8ba4\u4e3a\u8682\u8681\u62a2\u5230\u4e86\u86cb\u7cd5\uff0c\u6e38\u620f\u7ed3\u675f\nfunc (g *game) isGameOver() bool {\n\tfor _, a := range g.ants {\n\t\tif a.hasCake && a.pos == g.antNest {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// \u5730\u56fe\u4e0a\u6240\u6709\u70b9\u7684\u4fe1\u606f\u7d20\u635f\u5931 1 \u5355\u4f4d\uff0c\u6240\u6709\u8682\u8681\u7684\u5e74\u9f84\u52a0 1\nfunc (g *game) endSecond() {\n\tfor i, gi := range g.board {\n\t\tfor j, gij := range gi {\n\t\t\tif gij.pheromone > 0 {\n\t\t\t\tg.board[i][j].pheromone--\n\t\t\t}\n\t\t}\n\t}\n\tfor _, a := range g.ants {\n\t\ta.age++\n\t}\n}\n\n// \u6a21\u62df\u6e38\u620f\u7684\u524d t \u79d2\u949f\nfunc (g *game) runSeconds(t int) (gameOverAt int, isGameOver bool) {\n\tfor s := 1; s <= t; s++ {\n\t\tg.newAnt()          // \u751f\u6210\u8682\u8681\n\t\tg.beginSecond()     // \u8682\u8681\u7559\u4e0b\u4fe1\u606f\u7d20\n\t\tg.moveAnts()        // \u79fb\u52a8\u8682\u8681\n\t\tg.checkCake()       // \u66f4\u65b0\u62ff\u5230\u86cb\u7cd5\u7684\u8682\u8681\u7684\u72b6\u6001\n\t\tg.towerAttack()     // \u70ae\u53f0\u653b\u51fb\u8682\u8681\n\t\tif g.isGameOver() { // \u68c0\u67e5\u6e38\u620f\u662f\u5426\u7ed3\u675f\n\t\t\t// game over \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u56de\u5408\u4e0d\u4f1a\u5bf9\u8682\u8681\u7684\u5e74\u9f84\u4ea7\u751f\u8d21\u732e\uff0c\u76f4\u63a5 return\n\t\t\treturn s, true\n\t\t}\n\t\tg.endSecond() // \u66f4\u65b0\u4fe1\u606f\u7d20\u548c\u8682\u8681\u5e74\u9f84\n\t}\n\treturn\n}\n\nfunc main() {\n\tvar height, width, numTower, damage, atkRange int\n\tScan(&height, &width, &numTower, &damage, &atkRange)\n\n\t// \u521b\u5efa\u65b0\u6e38\u620f\n\tg := newGame(height, width)\n\n\t// \u653e\u7f6e\u70ae\u5854\n\tg.towers = make([]*tower, numTower)\n\tfor i := range g.towers {\n\t\tvar x, y int\n\t\tScan(&x, &y)\n\t\tg.towers[i] = &tower{damage, atkRange, vec{x, y}}\n\t\tg.board[x][y].empty = false\n\t}\n\n\t// \u6a21\u62df\u6e38\u620f\u7684\u524d t \u79d2\u949f\n\tvar time int\n\tScan(&time)\n\tif gameOverAt, isGameOver := g.runSeconds(time); isGameOver {\n\t\tPrintf(\"Game over after %d seconds\\n\", gameOverAt)\n\t} else {\n\t\tPrintln(\"The game is going on\")\n\t}\n\tPrintln(len(g.ants))\n\tfor _, a := range g.ants {\n\t\tPrintln(a.age, a.level, a.curHP, a.pos.x, a.pos.y)\n\t}\n}\n```\n",
        "postTime": 1580970283,
        "uid": 266651,
        "name": "\u7075\u8336\u5c71\u827e\u5e9c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    },
    {
        "content": "\u4e24\u4e2a**\u9519\u8bef\u8c03\u4e86\u4e00\u6574\u5929...\n\n1.pubp\u51fd\u6570\u62ec\u53f7\u5339\u914d\u9519\u4e86\n\n2.\u7cbe\u5ea6\u5e38\u6570\u7c7b\u578b\u5f00\u6210\u4e86int\n\n\u5c31\u662f\u4e00\u4e2a\u5927\u6a21\u62df,\u522b\u7684\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684,\u8bb2\u4e00\u8bb2\u6211\u5224\u65ad\u5706\u548c\u7ebf\u662f\u5426\u6709\u4ea4\u70b9\u7684pubp\u51fd\u6570,\u4e2a\u4eba\u8ba4\u4e3a\u5f88\u5bb9\u6613\u7406\u89e3\u3002\n\n~~\u5176\u5b9e\u5c31\u662f\u4e0d\u60f3\u52a8\u8111\u5b50\u624d\u7528\u4e86\u7b80\u5355\u7c97\u66b4\u7684\u529e\u6cd5~~\n\n\u6211\u4eec\u8fd9\u6837\u8bb0\u5f55\u4e00\u6761\u7ebf\u6bb5:\n\n\u5f53\u8be5\u7ebf\u6bb5\u4e0d\u4e0e$x$\u8f74\u5782\u76f4,\u6211\u4eec\u8bb0\u5f55${k,b,l,r}$,\u8868\u793a\u8fd9\u6761\u7ebf\u6bb5\u6240\u5728\u7684\u76f4\u7ebf\u89e3\u6790\u5f0f\u4e3a$y=kx+b$,$x$\u5750\u6807\u7684\u8303\u56f4\u4e3a$[l,r]$\u3002\n\n\u5f53\u8be5\u7ebf\u6bb5\u4e0e$x$\u8f74\u5782\u76f4,\u6211\u4eec\u8bb0\u5f55$k,l,r$,\u8868\u793a\u8fd9\u6761\u7ebf\u6bb5\u6240\u5728\u7684\u76f4\u7ebf\u4e3a$x=k$,$y$\u5750\u6807\u7684\u8303\u56f4\u4e3a$[l,r]$\u3002\n\n\u7136\u540e\u6211\u4eec\u8bbe\u70b9$p(u,v)$,\u5219\u4ee5$p$\u4e3a\u5706\u5fc3,1\u4e3a\u76f4\u5f84($\\frac{1}{2}$\u4e3a\u534a\u5f84)\u7684\u5706\u7684\u65b9\u7a0b\u4e3a$(x-u)^2+(y-v)^2=\\frac{1}{4}$\u3002\n\n\u6211\u4eec\u8981\u6c42\u7ebf\u6bb5\u548c\u70b9$p$\u662f\u5426\u6709\u4ea4\u70b9,\u8003\u8651\u6c42\u7ebf\u6bb5\u6240\u5728\u76f4\u7ebf\u548c$p$\u662f\u5426\u6709\u4ea4\u70b9,\u4ee5\u53ca\u662f\u5426\u6709\u4ea4\u70b9\u7684\u5750\u6807\u5728\u7ebf\u6bb5\u7684\u5750\u6807\u8303\u56f4\u5185\u3002\n\n\u5f53\u7ebf\u6bb5\u4e0d\u4e0e$x$\u8f74\u5782\u76f4,\u6211\u4eec\u8bbe\u7ebf\u6bb5\u4e3a$k,b,l,r$\u3002\n\n\u8bbe\u4ea4\u70b9\u5750\u6807$(x,y)$\u5219\u6709\n\n$kx+b=y$(\u2460)\n\n$(x-u)^2+(y-v)^2=\\frac{1}{4}$(\u2461)\n\n\u5c55\u5f00\u2461\u5f0f\n\n$x^2-2ux+u^2+y^2-2vy+v^2-\\frac{1}{4}=0$\n\n\u4ee3\u5165$y=kx+b$\n\n$x^2-2ux+u^2+(kx+b)^2-2v(kx+b)+v^2-\\frac{1}{4}=0$\n\n$x^2-2ux+u^2+k^2x^2+2bkx+b^2-2vkx-2vb+v^2-\\frac{1}{4}=0$\n\n\u5373\n\n$(k^2+1)x^2+(2bk-2vk-2u)x+u^2+b^2-2vb+v^2-\\frac{1}{4}$\n\n\u90a3\u4e48\u6709$x=\\frac{-(2bk-2vk-2u)\\pm\\sqrt{(2bk-2vk-2u)^2-4(k^2+1)(u^2+b^2-2vb+v^2-\\frac{1}{4})}}{2(k^2+1)}$\n\n\u8bbe$pt_1=-(2bk-2vk-2u),pt_2=\\sqrt{(2bk-2vk-2u)^2-4(k^2+1)(u^2+b^2-2vb+v^2-\\frac{1}{4})},pt_3=2(k^2+1)$\n\n\u5219\u5f53$l\\le\\frac{pt_1+pt_2}{pt_3}\\le r$\u6216$l\\le\\frac{pt_1-pt_2}{pt_3}\\le r$\u65f6\n\n\u7ebf\u6bb5\u4e0e\u5706\u6709\u4ea4\u70b9\u3002\n\n\u5f53\u7ebf\u6bb5\u4e0e$x$\u8f74\u5782\u76f4,\u6211\u4eec\u8bbe\u7ebf\u6bb5\u4e3a$k,l,r$\u3002\n\n\u8bbe\u4ea4\u70b9\u5750\u6807$(k,y)$\u5219\u6709\n\n$(k-u)^2+(y-v)^2=\\frac{1}{4}$\n\n$(y-v)^2=\\frac{1}{4}-(k-u)^2$\n\n$y=v\\pm\\sqrt{\\frac{1}{4}-(k-u)^2}$\n\n\u8bbe$pt_1=\\sqrt{\\frac{1}{4}-(k-u)^2}$\n\n\u5219\u5f53$l\\le v+pt_1\\le r$\u6216$l\\le v-pt_1\\le r$\u65f6\n\n\u7ebf\u6bb5\u4e0e\u5706\u6709\u4ea4\u70b9\u3002\n\n\u5f53\u7136\u8fd9\u79cd\u505a\u6cd5\u4e5f\u6709\u4e00\u5b9a\u7684\u7f3a\u70b9,\u6bd4\u5982\u5f0f\u5b50\u6bd4\u8f83\u590d\u6742,\u5bb9\u6613\u5199\u9519\u6216\u8005\u51fa\u73b0\u7cbe\u5ea6\u95ee\u9898\u3002\n\n\u5176\u4f59\u90e8\u5206\u76f4\u63a5\u6a21\u62df\u5c31\u597d\u4e86\u3002\n\ncode:\n\n\u4ee3\u7801\u4e0d\u957f,\u521a\u597d130\u884c\n\n\u4f7f\u7528vector\u6765\u50a8\u5b58\u8682\u8681\n\n```cpp\n#include<bits/stdc++.h>\n#define sqr(x) (x)*(x)\nusing namespace std;\nconst double _=1e-7;\nconst int W[4][2]={{0,1},{1,0},{0,-1},{-1,0}};\nstruct line{//y=kx+b(l<=x<=r)(tag=0);x=k(l<=y<=r)(tag=1)\n\tdouble k,b,l,r;\n\tint tag;\n};\nstruct point{\n\tint x,y;\n}turret[25];\nstruct ant{\n\tpoint p,lst;\n\tint hp,mxhp,age,level;\n};\nbool equ(const double&x,const double&y){\n\treturn abs(x-y)<=_;\n}\nbool les(const double&x,const double&y){\n\treturn y-x>_;\n}\nbool eol(const double&x,const double&y){\n\treturn equ(x,y)||les(x,y);\n}\ndouble dis(point a,point b){\n\treturn sqrt(sqr(a.x-b.x)+sqr(a.y-b.y));\n}\nline solve(point a,point b){//\u6c42\u51fa\u7ebf\u6bb5ab\u7684\u8868\u793a\n\tif(a.x==b.x)return(line){a.x,0,min(a.y,b.y),max(a.y,b.y),1};\n\telse{\n\t\tdouble k=1.0*(a.y-b.y)/(a.x-b.x);\n\t\treturn(line){k,a.y-k*a.x,min(a.x,b.x),max(a.x,b.x),0};\n\t}\n}\nbool pubp(line l,point p){//\u5224\u65ad\u7ebf\u6bb5l\u4e0e\u4ee5\u70b9p\u4e3a\u5706\u5fc3,1\u4e3a\u76f4\u5f84\u7684\u5706\u662f\u5426\u6709\u4ea4\u70b9\n\tif(!l.tag){\n\t\tif(sqr(2*l.k*l.b-2*p.y*l.k-2*p.x)-4*(sqr(l.k)+1)*(sqr(p.x)+sqr(l.b)-2*p.y*l.b+sqr(p.y)-1.0/4.0)<0)return false;\n\t\tdouble pt1=-(2*l.k*l.b-2*p.y*l.k-2*p.x),pt2=sqrt(sqr(2*l.k*l.b-2*p.y*l.k-2*p.x)-4*(sqr(l.k)+1)*(sqr(p.x)+sqr(l.b)-2*p.y*l.b+sqr(p.y)-1.0/4.0)),pt3=2*(sqr(l.k)+1);\n\t\treturn(eol(l.l,(pt1+pt2)/pt3)&&eol((pt1+pt2)/pt3,l.r)||eol(l.l,(pt1-pt2)/pt3)&&eol((pt1-pt2)/pt3,l.r));\n\t}else{\n\t\tif(sqr(l.k-p.x)>1.0/4.0)return false;\n\t\tint pt1=sqrt(1.0/4.0-sqr(l.k-p.x));\n\t\treturn(eol(l.l,p.y+pt1)&&eol(p.y+pt1,l.r))||(eol(l.l,p.y-pt1)&&eol(p.y-pt1,l.r));\n\t}\n}\nint n,m,s,d,r,t,ph[10][10],mp[10][10];\nint stot,tca=-1;\nvector<ant>a;\nvoid getp(point&x){//\u8bfb\u5165\u70b9 \n\tint t1,t2;\n\tscanf(\"%d%d\",&t1,&t2),x.x=t1,x.y=t2;\n\tmp[t1][t2]=1;\n}\ndouble POW(double x,int y){//\u5feb\u901f\u5e42 \n\tdouble tot=1;\n\twhile(y)y&1?tot*=x:0,x*=x,y>>=1;\n\treturn tot;\n}\nvoid Spawn(){//\u751f\u6210\u8682\u8681 \n\tif(mp[0][0])return;\n\tfor(int i=0;i<a.size();++i)if(a[i].p.x==0&&a[i].p.y==0)return;\n\t++stot;\n\tint tmp=(int)(4.0*POW(1.1,(stot+5)/6));\n\ta.push_back((ant){(point){0,0},(point){0,0},tmp,tmp,0,(stot+5)/6});\n}\nvoid Put_pheromone(){//\u7559\u4e0b\u4fe1\u606f\u7d20 \n\tfor(int i=0;i<a.size();++i)ph[a[i].p.x][a[i].p.y]+=(tca==i?5:2);\n}\nbool Blank(int x,int y){//\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u4e3a\u7a7a(\u5373\u6ca1\u6709\u70ae\u5854\u6216\u8005\u8682\u8681) \n\tif(mp[x][y])return false;\n\tfor(int i=0;i<a.size();++i)if(a[i].p.x==x&&a[i].p.y==y)return false;\n\treturn true;\n}\nbool Check(int id,int x,int y){//\u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u53ef\u884c \n\treturn (x!=a[id].lst.x||y!=a[id].lst.y)&&0<=x&&x<=n&&0<=y&&y<=m&&Blank(x,y);\n}\nvoid Move_to(int id,int x,int y){//\u5c06\u8682\u8681\u79fb\u52a8\u5230\u70b9(x,y) \n\ta[id].lst=a[id].p,a[id].p=(point){x,y};\n}\nvoid Move(){//\u79fb\u52a8\u8682\u8681 \n\tfor(int i=0;i<a.size();++i){\n\t\tint mxp=-1,tw,tx,ty;\n\t\tfor(int w=0;w<4;++w)tx=a[i].p.x+W[w][0],ty=a[i].p.y+W[w][1],Check(i,tx,ty)&&ph[tx][ty]>mxp?mxp=ph[tx][ty],tw=w:0;\n\t\tif(mxp<0){\n\t\t\ta[i].lst=a[i].p;\n\t\t\tcontinue;\n\t\t}else{\n\t\t\tif((a[i].age+1)%5==0)while(tw=(tw+3)%4,!Check(i,a[i].p.x+W[tw][0],a[i].p.y+W[tw][1]));\n\t\t\tMove_to(i,a[i].p.x+W[tw][0],a[i].p.y+W[tw][1]);\n\t\t}\n\t}\n}\nvoid Shoot(point u,point v){//\u4ece\u70b9u\u53d1\u5c04\u6fc0\u5149\u5230\u70b9v \n\tline ray=solve(u,v);\n\tfor(int i=0;i<a.size();++i)if(pubp(ray,a[i].p))a[i].hp-=d;\n}\nvoid Attack(){//\u70ae\u5854\u653b\u51fb \n\tfor(int i=1;i<=s;++i){\n\t\tif(tca!=-1&&eol(dis(turret[i],a[tca].p),(double)r))Shoot(turret[i],a[tca].p);\n\t\telse{\n\t\t\tdouble mnd=r+1,td;int sa;\n\t\t\tfor(int j=0;j<a.size();++j)td=dis(turret[i],a[j].p),les(td,mnd)?mnd=td,sa=j:0;\n\t\t\tif(eol(mnd,r))Shoot(turret[i],a[sa].p);\n\t\t}\n\t}\n}\nvoid End(int T){//\u6e38\u620f\u7ed3\u675f \n\tprintf(\"Game over after %d seconds\\n%d\\n\",T,a.size());\n\tfor(int i=0;i<a.size();++i)printf(\"%d %d %d %d %d\\n\",a[i].age,a[i].level,a[i].hp,a[i].p.x,a[i].p.y);\n\texit(0);\n}\nint main(){\n\tscanf(\"%d%d%d%d%d\",&n,&m,&s,&d,&r);\n\tfor(int i=1;i<=s;++i)getp(turret[i]);\n\tscanf(\"%d\",&t);\n\tfor(int Time=1;Time<=t;++Time){\n\t\tif(a.size()<6)Spawn();\n\t\tPut_pheromone(),Move();\n\t\tfor(int i=0;i<a.size();++i)if(a[i].p.x==n&&a[i].p.y==m&&tca==-1)tca=i,a[i].hp=min(a[i].mxhp,a[i].hp+a[i].mxhp/2);\n\t\tAttack();\n\t\tfor(int i=0;i<a.size();++i)if(a[i].hp<0)a.erase(a.begin()+i),tca==i?tca=-1:0,tca>i?--tca:0,--i;\n\t\tfor(int i=0;i<a.size();++i)if(tca==i&&a[i].p.x==0&&a[i].p.y==0)End(Time);\n\t\tfor(int i=0;i<=n;++i)for(int j=0;j<=m;++j)ph[i][j]?--ph[i][j]:0;\n\t\tfor(int i=0;i<a.size();++i)++a[i].age;\n\t}\n\tprintf(\"The game is going on\\n%d\\n\",a.size());\n\tfor(int i=0;i<a.size();++i)printf(\"%d %d %d %d %d\\n\",a[i].age,a[i].level,a[i].hp,a[i].p.x,a[i].p.y);\n\treturn 0;\n}\n```",
        "postTime": 1552392120,
        "uid": 26294,
        "name": "xryjr233",
        "ccfLevel": 9,
        "title": "[2019.3.12]LuoguP2586/BZOJ1033 [ZJOI2008]\u6740\u8682\u8681antbuster(\u6a21\u62df)"
    },
    {
        "content": "~~\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u8fd9\u9053\u9898\u6211\u809d\u4e86\u4e09\u5929\u4e4b\u4e45~~\n\n(\u697c\u4e0a\u5404\u4f4d\u5927\u4f6c\u7684\u4ee3\u7801\u5404\u663e\u795e\u901a\uff0c\u6240\u4ee5\u5c31\u4e0d\u5728\u8fd9\u91cc\u653e\u5b8c\u6574\u4ee3\u7801\u4e86)\n\n## \u4e0b\u9762\u6765\u8bb2\u4e00\u8bb2\u6211\u5bf9\u8fd9\u9053\u9898\u6bcf\u4e00\u4e2a\u90e8\u5206\u7684\u7406\u89e3\u5427qwq\n\n\uff08\u6311\u9009\u98df\u7528\u6548\u679c\u66f4\u4f73w\uff09\n\n### 1-0 \u5173\u4e8e\u8682\u8681\n\n#### 1-1 \u8682\u8681\u7684\u51fa\u751f\uff1a\n\n\u8682\u8681\u51fa\u751f\u5f88\u597d\u5199\uff0c\u628a\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u8003\u8651\u5168\u5c31\u884c\uff0c\u5bf9\u4e8e\u6bcf\u53ea\u8682\u8681\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u4e0b\u4fe1\u606f\uff0c\u8fd8\u6709\u8981\u6ce8\u610f\u53ea\u6709\u5f53\u524d\u8682\u8681\u6570\u91cf\u5c0f\u4e8e6\u5e76\u4e14\uff080,0\uff09\u6ca1\u6709\u8682\u8681\u65f6\u624d\u80fd\u51fa\u751f\uff1a\n\n```cpp\nstruct ant{\n\tint x,y,prex,prey;//\u5f53\u524d\u4f4d\u7f6e\u4e0e\u4e0a\u4e00\u6b65\u4f4d\u7f6e \n\tint old;//\u5e74\u9f84 \n\tint base;//\u7b49\u7ea7 \n\tint rest;//\u8840\u91cf \n\tbool die,cake;//\u662f\u5426\u6b7b\u4ea1\uff0c\u662f\u5426\u62ff\u5230\u86cb\u7cd5 \n\tdouble maxx;//\u6700\u5927\u8840\u91cf \n}a[200005];\n```\n\n\u7136\u540e\u8682\u8681\u51fa\u751f\uff1a\n\n```cpp\nvoid appear(){\n\tmp[0][0]=1;tot++;numant++;\n\ta[tot].x=0;a[tot].y=0;a[tot].base=(tot-1)/6+1;\n\tdouble Health=floor(4*pow(1.1,a[tot].base));\n\ta[tot].rest=(int)Health;a[tot].maxx=Health;\n\ta[tot].die=0;a[tot].old=0;a[tot].cake=0;\n\ta[tot].prex=a[tot].prey=-1;\n}\n```\n\n\u8fd9\u91cc\u7684\u5751\u70b9\u5728\u4e8e\u9700\u8981\u7528\u4e00\u4e2adouble\u53bb\u7ef4\u62a4\u6700\u9ad8\u8840\u91cf\uff0c\u4e0d\u7136\u5728\u4ee5\u540e\u8ba1\u7b97\u65f6\u4f1a\u6389\u7cbe\u5ea6\n\n\u8fd8\u6709\u4e00\u4e2a\u5751\u70b9\u662f\u8682\u8681\u7684\u521d\u59cb\u5e74\u9f84\u662f0\n\n#### 1-2 \u8682\u8681\u7559\u4e0b\u4fe1\u606f\u7d20\uff1a\n\n\u867d\u7136\u8fd9\u91cc\u53ea\u8981\u5199\u4e00\u4e2afor\u5faa\u73af\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u6211\u5efa\u8bae\u5728\u5199\u8fd9\u79cd\u7801\u91cf\u5f88\u5927\u7684\u4ee3\u7801\u65f6\uff0c\u5c06\u6bcf\u4e00\u6b65\u51fd\u6570\u5316\uff0c\u8fd9\u6837\u5c31\u4f1a\u6e05\u695a\u7684\u77e5\u9053\u81ea\u5df1\u5728\u5e72\u4ec0\u4e48\uff0c\u6bd5\u7adf\u601d\u8def\u6e05\u695a\u662f\u6700\u91cd\u8981\u7684xd\uff08\u592a\u7b80\u5355\u5c31\u4e0d\u653e\u4ee3\u7801\u4e86\uff09\n\n#### 1-3 \u8682\u8681\u62ff\u86cb\u7cd5\uff1a\n\n\u540c\u6837\u5f88easy\uff0c\u8fd9\u91ccCAKE\u8bb0\u5f55\u86cb\u7cd5\u662f\u5426\u5728\u539f\u4f4d\uff0ctarget\u8bb0\u5f55\u60e8\u906d\u96c6\u706b\u7684\u8682\u8681qwq\n\n```cpp\nvoid getcake(){\n\tif (!CAKE) return;\n\tfor (int i=1;i<=tot;++i){\n\t\tif (a[i].die) continue;//\u901d\u8005\u957f\u7720\n\t\tif (a[i].x==n && a[i].y==m){//\u5c31\u4f4d \n\t\t\tCAKE=0;target=i;//\u86cb\u7cd5\u6d88\u5931\uff0c\u6210\u4e3a\u76ee\u6807 \n\t\t\ta[i].cake=1;a[i].rest+=(int)(a[i].maxx/2);//\u4fdd\u8bc1\u7cbe\u5ea6 \n\t\t\ta[i].rest=min(a[i].rest,(int)a[i].maxx);//\u4e0d\u80fd\u66b4\u8840 \n\t\t\treturn;\n\t\t}\n\t}\n}\n```\n\n#### 1-4 \u8682\u8681\u6b7b\u4ea1\uff1a\n\n\u5728\u70ae\u5854\u653b\u51fb\u540e\u9700\u8981\u7684\u6253\u626b\u6218\u573a\u5de5\u4f5c\uff0c\u8840\u91cf\u5c0f\u4e8e0\u7684\u8bb0\u5f55\u6b7b\u4ea1\uff0c\u5982\u679c\u6709\u86cb\u7cd5\u8bb0\u5f97\u5f52\u4f4d\uff08\u540c\u6837\u4e0d\u8d34\u4ee3\u7801\uff09\n\n#### 1-5 \u8682\u8681\u957f\u5927\uff1a\n\nfor\u5faa\u73af++old\u5373\u53ef\uff08\u540c\u6837\u4e0d\u8d34\uff0c\u56e0\u4e3a\u91cd\u5934\u620f\u5728\u540e\u9762\uff09\n\n#### 1-6 \u8682\u8681\u79fb\u52a8\uff1a\n\n\u672c\u9898\u96be\u70b9\u4e4b\u4e00\uff0c\u96be\u5728\u60c5\u51b5\u591a\u3001\u4ee3\u7801\u7e41\u7410\uff0c\u9700\u8981\u6ce8\u610f\u7684\uff1a\n\n1.\u6d3b\u52a8\u65f6\u95f4\u662f5\u7684\u500d\u6570\uff08\u53db\u9006\u671f\uff09\u7684\u8682\u8681\u9006\u65f6\u9488\u8f6c\u52a8\n\n2.\u5982\u679c\u4e0d\u80fd\u52a8\u4e00\u5b9a\u8bb0\u5f97\u628a\u4e0a\u4e00\u6b65\u7684\u4f4d\u7f6e\u8d4b\u503c\u6210\u5f53\u524d\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u4e0b\u4e00\u6b65\u5c31\u53ef\u4ee5\u8d70\u4e0d\u52a8\u524d\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e86\uff08\u88ab\u5751\u8fc7qwq\uff09\n\n3.\u6ce8\u610f\u9898\u4e2d\u201c\u5982\u679c\u6b64\u65f6\u4ecd\u6709\u591a\u79cd\u9009\u62e9\u2026\u2026\u76f4\u5230\u627e\u5230\u53ef\u4ee5\u53bb\u7684\u65b9\u5411\u201d\u8fd9\u53e5\u8bdd\uff0c\u8fd9\u91cc\u7684\u591a\u79cd\u9009\u62e9\u662f\u6307\u90a3\u4e9b\u4fe1\u606f\u7d20\u6700\u5927\u4e14\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u80fd\u8d70\u5230\u7684\u6240\u6709\u4f4d\u7f6e\uff08\u88ab\u5751\u8fc7qwq\u4e5f\u53ef\u80fd\u662f\u6211\u8bed\u6587\u4e0d\u597d\uff09\n\n\uff08\u8fd9\u91cc\u6211\u4e5f\u4e0d\u8d34\u4ee3\u7801\u4e86\uff0c\u56e0\u4e3a\u6211\u5199\u7684\u53c8\u8822\u53c8\u4e11\uff0c\u8bfb\u8005\u53ef\u4ee5\u53c2\u8003\u697c\u4e0a\u5404\u4f4d\u5927\u4f6c\u7684w\uff09\n\n### 2-0 \u5173\u4e8e\u70ae\u5854\n\n#### 2-1 \u786e\u8ba4\u76ee\u6807\uff1a\n\n\u7531\u4e8e\u70ae\u5854\u662f\u540c\u65f6\u5f00\u706b\u7684\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u4f1a\u6253\u4e00\u4e9b\u8840\u91cf\u5df2\u7ecf\u5c0f\u4e8e0\u7684\u8682\u8681\uff0c\u6240\u4ee5\u8981\u5148\u7edf\u4e00\u786e\u8ba4\u76ee\u6807\u518d\u7edf\u4e00\u6263\u8840\uff0c\u5f53\u7136\u6709\u96c6\u706b\u76ee\u6807\u5148\u96c6\u706b\uff1a\n\n```cpp\nvoid look(int i){\n\tgoal[i]=0;\n\tdouble mindis=1e9,dis;\n\tif (target && !a[target].die){//\u6709\u6d3b\u7740\u7684\u96c6\u706b\u76ee\u6807 \n\t\tdis=dist(towerx[i],towery[i],a[target].x,a[target].y);\n\t\tif (dis-r<=eps){goal[i]=target;return;}//\u5728\u5c04\u7a0b\u5185 \n\t}\n\tfor (int j=1;j<=tot;++j){\n\t\tif (a[j].die) continue;//\u901d\u8005\u957f\u7720 \n\t\tdis=dist(towerx[i],towery[i],a[j].x,a[j].y);\n\t\tif (dis-r<=eps && dis<mindis) mindis=dis,goal[i]=j;\n\t}\n}\n```\n\n#### 2-2 \u610f\u5927\u5229\u70ae\u5f0f\u65e0\u60c5\u6253\u51fb\uff1a\n\n\u8fd9\u91cc\u6709\u4e2a\u663e\u7136\u7684\u4e8b\u60c5\uff0c\u53ea\u6709\u5728\u6253\u86cb\u7cd5\u8682\u8681\u65f6\u624d\u6709\u53ef\u80fd\u6ce2\u53ca\u5230\u4e00\u4e9b\u8eba\u67aa\u7684\u8682\u8681\uff0c\u4e0d\u7136\u4e00\u5b9a\u4f1a\u9009\u62e9\u66f4\u8fd1\u7684\u8682\u8681\n\n```cpp\nvoid shoot(int tow,int at){\n\tfor (int i=1;i<=tot;++i){\n\t\tif (a[i].die || i==at) continue;\n\t\tif (online(tow,at,i)) a[i].rest-=d;//\u65e0\u8f9c\u8eba\u67aa \n\t}\n}\n```\n\n#### 2-3 \u5224\u65ad\u662f\u5426\u8eba\u67aa\uff1a\n\n\u672c\u9898\u96be\u70b9\u4e4b\u4e8c\uff0c\u96be\u5728\u9700\u8981\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\n\n\uff08\u5148\u58f0\u660e\uff0c\u8fd9\u91cc\u501f\u7528\u4e86\u697c\u4e0a\u4e00\u4f4d\u5927\u4f6c\u7684\u601d\u8def\uff0c\u5f88\u5de7\u5999\uff09\n\n\u6211\u4eec\u8bbe\u70ae\u5854\u4f4d\u7f6eA\uff0c\u86cb\u7cd5\u8682\u8681\u4f4d\u7f6eB\uff0c\u65e0\u8f9c\u8eba\u67aa\u8005\u4f4d\u7f6eC\n\n\u5148\u7279\u5224\u5982\u679cC\u5c31\u662f\u86cb\u7cd5\u8682\u8681\u5c31\u76f4\u63a5\u6253\n\n\u7136\u540e\u5982\u679cC\u5230AB\u8ddd\u79bb\u5927\u4e8e0.5\u5c31\u4e0d\u5728\u8fd9\u6761\u7ebf\u4e0a\uff0c\u8fd9\u91cc\u8981\u7528\u5230\u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb\u516c\u5f0f\uff08\u6211\u9ed8\u8ba4\u76f4\u7ebf\u65b9\u7a0b\u7684A\u3001B\u3001C\u8bfb\u8005\u90fd\u4f1a\u6c42\uff09\uff1a\n\n```cpp\ninline double calc(double X,double Y,double A,double B,double C){\n\treturn (abs(A*X+B*Y+C))/(sqrt(A*A+B*B));\n}\n```\n\n\u8fd9\u65f6\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u8fd9\u662f\u4e00\u6761\u7ebf\u6bb5\uff0c\u800c\u4e0d\u662f\u76f4\u7ebf\uff0c\u6240\u4ee5C\u4e00\u5b9a\u8981\u5728A\u3001B\u4e4b\u95f4\u624d\u4f1a\u8eba\u67aa\u3002\u4e00\u4e2a\u5de7\u5999\u7684\u5224\u65ad\u65b9\u6cd5\uff1aAB\u7ecf\u8fc7\u5706C\uff0c\u5f53\u4e14\u4ec5\u5f53\u2220CAB\u548c\u2220CBA\u90fd\u662f\u9510\u89d2\uff08\u753b\u4e2a\u56fe\u5c31\u660e\u767d\u4e86\uff09\n\n```cpp\n\tint cos1,cos2;\n\tcos1=(tx-cx)*(nowx-cx)+(ty-cy)*(nowy-cy);\n\tcos2=(cx-tx)*(nowx-tx)+(cy-ty)*(nowy-ty);\n\tif (cos1>0 && cos2>0) return true;\n```\n\n\u56e0\u4e3a\u8fd9\u91cc\u662f\u901a\u7bc7\u601d\u8def\uff0c\u4e0d\u53ef\u80fd\u8bb2\u6e05\u695a\u6bcf\u4e00\u4e2a\u7ec6\u8282\uff0c\u5e0c\u671b\u8bfb\u8005\u4e0d\u4ec5\u4ec5\u8981\u770b\u61c2\uff0c\u8fd8\u8981\u81ea\u5df1\u4eb2\u8eab\u53bb\u5b9e\u8df5\uff0c\u8fd9\u6837\u624d\u4f1a\u6709\u63d0\u9ad8\uff0c\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u697c\u4e0a\u5927\u4f6c\u7684\u8be6\u89e3xd\n\n### 3-0 \u4e00\u4e9bidea\n\n1.\u5728\u4f60\u60f3\u8981\u65e0\u9650\u9893\u5e9f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5199\u4e00\u5199\u8fd9\u6837\u7684\u9898to calm down\n\n2.\u8fd9\u79cd\u9898\u4e0d\u8981\u89c9\u5f97\u6ca1\u6709\u5de7\u5999\u7684\u7b97\u6cd5\u4e0e\u4f18\u7f8e\u7684\u6570\u636e\u7ed3\u6784\u5c31\u4e0d\u53bb\u5199\u4ed6\uff0c\u8981\u77e5\u9053\uff0c\u4ee3\u7801\u80fd\u529b\u6709\u65f6\u6bd4\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u66f4\u52a0\u7ba1\u7528\uff0c\u5c24\u5176\u662f\u5728OI\u751f\u6daf\u4e2d\uff0c\u5728\u60f3\u5d29\u6b63\u89e3\u65f6\uff0c\u5982\u4f55\u9ad8\u6548\u7684\u5199\u51fa\u4f18\u79c0\u7684\u66b4\u529b\u3002\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u5197\u6742\u4e30\u5bcc\uff0c\u4e0d\u662f\u5199\u4e00\u4e24\u9053\u9898\u5c31ok\u7684\uff0c\u4f46\u662f\u5199\u4e00\u6b21\u8fd9\u79cd300\u591a\u884c\u7684\u5927\u6a21\u62df\uff0c\u5bf9\u4f60\u7684\u4ee3\u7801\u80fd\u529b\u63d0\u9ad8\u6709\u5f88\u5927\u5e2e\u52a9\n\n3.\u5c24\u5176\u5728\u5927\u8d5b\u5c06\u81f3\u65f6\uff0c\u53ef\u4ee5\u5199\u4e00\u5199\u8fd9\u79cd\u9898\uff0c\u4e00\u6765\u627e\u624b\u611f\uff0c\u4e8c\u6765\u57f9\u517b\u8010\u5fc3\uff08\u663e\u7136\u4f60\u5728\u5927\u8d5b\u4e2d\u662f\u4e0d\u80fd\u5f03\u7597\u4e14\u81ea\u95ed\u7684qwq\uff09\n\n4.\u5728\u4f60\u8c03\u4e0d\u51fa\u67d0\u4e9b\u70b9\u65f6\uff0c\u5343\u4e07\u5343\u4e07\u4e0d\u8981\u653e\u5f03\uff0c\u4e00\u4e2a\u5c0f\u65f6\u8c03\u4e0d\u51fa\u6765\u5c31\u8c03\u4e24\u4e2a\u5c0f\u65f6\uff0c\u4e00\u5929\u8c03\u4e0d\u51fa\u6765\u5c31\u8c03\u4e24\u5929\uff0c\u5f03\u7597\u4e0e\u81ea\u95ed\u6c38\u8fdc\u63d0\u9ad8\u4f60\u7684\u80fd\u529b\uff0c\u5f53\u4f60\u82b1\u4e86\u5341\u4e07\u5206\u7cbe\u529b\u770b\u5230\u6ee1\u5c4f\u7684\u7eff\u8272AC\u65f6\uff0c\u4f60\u7684\u4fe1\u5fc3\u4e0e\u80fd\u529b\u90fd\u4f1a\u6709\u8d28\u7684\u98de\u8d8a\n\n5.\u8fd8\u6709\u5728\u4f60\u5199\u8fd9\u79cd\u5927\u6a21\u62df\u65f6\uff0c\u601d\u8def\u662f\u7b2c\u4e00\u4f4d\u7684\uff0c\u5148\u634b\u6e05\u601d\u8def\u518d\u7740\u624b\u4ee3\u7801\uff0c\u4e89\u53d6\u4e00\u6c14\u5475\u6210\uff0c\u8bb0\u4f4f\u67d0\u4f4d\u795e\u7287\u8bf4\u8fc7\u7684\u8bdd\uff1athink twice,code once\n\n\u6700\u6700\u6700\u540e\uff0c\u795d\u5927\u5bb6OI\u751f\u6daf\u987a\u5229\uff0cnoip2018++rp\n\n\uff08\u4e00\u4e2a\u534a\u5c0f\u65f6\u5199\u7684\uff0c\u6c42\u7ba1\u7406\u5927\u5927\u7ed9\u8fc7\u554aorz\uff09\n\n\n\n\n\n\n\n\n",
        "postTime": 1541255195,
        "uid": 50881,
        "name": "saligia",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2586 \u3010[ZJOI2008]\u6740\u8682\u8681\u3011"
    }
]