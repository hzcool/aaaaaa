[
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u9053\u540e\u7f00\u6570\u7ec4\u7684\u6a21\u677f\u9898\u3002\n\n\u51fa\u73b0k\u6b21\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u9009\u62e9\u4e86k\u4e2a\u540e\u7f00\uff0c\u4e4b\u540e\u6c42\u51fa\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u540e\u7f00(j)\u548c\u540e\u7f00(k)\u7684 \u6700 \u957f \u516c \u5171 \u524d \u7f00 \u4e3aheight[rank[j]+1],\n\nheight[rank[j]+2],height[rank[j]+3],\u2026,height[rank[k]]\u4e2d\u7684\u6700\u5c0f\u503c(\u8bberank[j]<rank[k])\u3002\n\n\u90a3\u4e48\u8bbek\u4e2a\u540e\u7f00\u4e2drank\u7684min=l\uff0cmax=r\uff0ck\u4e2a\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u5c31\u662fmin(height[l+1->r])\n\n\u6240\u4ee5k\u4e2a\u540e\u7f00\u5728rank\u4e0a\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u3002\n\n\u679a\u4e3ei\uff0c\u7ef4\u62a4height[i->i+k-1]\u7684min\uff0c\u7528\u5355\u8c03\u961f\u5217\u5373\u53efO(N)\u89e3\u51b3\u3002(\u8fd8\u8981\u52a0\u4e0a\u6c42\u51farank,height\u7684\u65f6\u95f4)\n",
        "postTime": 1482395058,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u5c31\u662f\u4e2a\u88f8\u7684\u540e\u7f00\u6570\u7ec4\u554a~\n\n\u5bf9\u4e8e\u957f\u5ea6\u6211\u4eec\u8bbel=1,r=n\uff0c\u5f00\u59cb\u8dd1\u4e8c\u5206\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2amid\u7684check\u2014\u2014\u770b\u5728RMQ\uff08\u5373Height\u6570\u7ec4\uff09\u4e2d\u6240\u6709\u957f\u5ea6\u4e3ak\u7684\u533a\u95f4\uff08O\uff08n\uff09\u67e5\u8be2\u662f\u5426\u5408\u6cd5\uff09\u662f\u5426\u6ee1\u8db3LCP\u5927\u4e8e\u7b49\u4e8emid\uff08\u5373\u4e8c\u5206\u7684\u957f\u5ea6\uff09\uff0c\u6709\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u5219\u8be5\u957f\u5ea6\u53ef\u884c\uff0c\u7136\u800c\u7ee7\u7eed\u4e8c\u5206\u5373\u53ef\u3002\n\n\u8fd8\u6709\uff0c\u8fd9\u4e9b\u8bc4\u6d4b\u6570\u636e\u5e76\u4e0d\u50cf\u9898\u76ee\u6240\u8bf4\u76841---1000000\uff0c\u800c\u6700\u5927\u7684\u6570\u5374\u7279\u522b\u5c0f\uff0c\u624d\u662f23\uff01\uff01\u8fd9\u5c31\u4f7f\u6211\u7684m\u4e0d\u5c0f\u5fc3\u5199\u621026\u5e76\u4e14\u6ca1\u79bb\u6563\u5c31A\u4e86\uff0c\u89c9\u5f97\u8fd9\u4e9b\u6570\u636e\u662f\u79bb\u6563\u8fc7\u7684\uff0c\u5f3a\u70c8\u8981\u6c42\u66f4\u65b0\u8bc4\u6d4b\u6570\u636e\uff0c\u6539\u6210\u8de8\u8d8a\u6027\u5927\u7684\uff01\uff01\uff01\uff01\n\n\u6240\u4ee5\u6b63\u89e3\u662f\uff1a\u79bb\u6563\u5316+\u540e\u7f00\u6570\u7ec4+\u4e8c\u5206\u67e5\u627e~\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#define o 20001\n#define rep(i,a,b) for(int i=int(a),nn=int(b);i<=nn;i++)\n#define vep(i,a,b) for(int i=int(a),nn=int(b);i>=nn;i--)\n#define nep(i,a,b) for(int i=int(a),nn=int(b);i<nn;i++)\nusing namespace std;\nint t1[o],t2[o],sa[o],Rank[o],height[o],s[o],cc[o],st[o][20],num[o],lq[o];\nint n,k_k,len,ans,cnt;\nbool cmp(int a,int b){return lq[a]<lq[b];}\nbool compare(int *y,int a,int b,int k)\n{\n    int arank1,arank2,brank1,brank2;\n    arank1=y[a];\n    brank1=y[b];\n    arank2=a+k>=len?-1:y[a+k];\n    brank2=b+k>=len?-1:y[b+k];\n    return arank1==brank1&&arank2==brank2;\n}\nvoid make_sa()\n{\n    int *x=t1,*y=t2,m=cnt+1;\n    nep(i,0,m)cc[i]=0;\n    nep(i,0,len)cc[x[i]=s[i]]++;\n    nep(i,1,m)cc[i]+=cc[i-1];\n    vep(i,len-1,0)sa[--cc[x[i]]]=i;\n    for(int k=1;k<=len;k<<=1)\n    {\n        int p=0;\n        nep(i,len-k,len)y[p++]=i;\n        nep(i,0,len)if(sa[i]>=k)y[p++]=sa[i]-k;\n        nep(i,0,m)cc[i]=0;\n        nep(i,0,len)cc[x[y[i]]]++;\n        nep(i,1,m)cc[i]+=cc[i-1];\n        vep(i,len-1,0)sa[--cc[x[y[i]]]]=y[i];\n        swap(x,y);\n        m=1;x[sa[0]]=0;\n        nep(i,1,len)\n        x[sa[i]]=compare(y,sa[i],sa[i-1],k)?m-1:m++;\n        if(m>=len)break;\n    }\n}\nvoid make_height()\n{\n    nep(i,0,len)Rank[sa[i]]=i;\n    int k=0;\n    height[0]=0;\n    nep(i,0,len)\n    {\n        if(!Rank[i])continue;\n        int j=sa[Rank[i]-1];\n        if(k)k--;\n        while(s[i+k]==s[j+k])k++;\n        height[Rank[i]]=k;\n    }\n}\nvoid init()\n{\n    nep(i,0,n)st[i][0]=height[i];\n    for(int j=1;(1<<j)<n;j++)\n    for(int i=0;i+(1<<j)-1<n;i++)\n    st[i][j]=min(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n}\nint query(int l,int r)\n{\n    int k=log2(r-l+1);\n    return min(st[l][k],st[r-(1<<k)+1][k]);    \n}\nbool check(int length)\n{\n    int l=0,r=l+k_k-2;\n    while(r<=n-1)\n    {\n        int ok=query(l,r);\n        if(ok>=length)return true;\n        l++;r++;\n    }\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&k_k);\n    nep(i,0,n)scanf(\"%d\",&lq[i]),num[i]=i;\n    len=n;\n    sort(num,num+n,cmp);\n    s[num[0]]=1;\n    cnt=1;\n    for(int i=0;i<n-1;i++)\n        if(lq[num[i]]!=lq[num[i+1]])s[num[i+1]]=++cnt;\n        else s[num[i+1]]=cnt;\n    make_sa();\n    make_height();\n    init();\n    int l=1,r=n,answer=0;\n    while(l<=r)\n    {\n        int mid=(l+r)>>1;\n        if(check(mid))answer=mid,l=mid+1;\n        else r=mid-1;\n    }\n    printf(\"%d\\n\",answer);\n}\n```",
        "postTime": 1490524298,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "### \u9898\u610f\n\t\n\u627e\u81f3\u5c11\u91cd\u590d $k$ \u6b21\u7684\u91cd\u590d\u5b50\u4e32\n\n### \u9898\u89e3\n\n\u6b64\u9898\u786e\u5b9e\u53ea\u9700\u8981\u5355\u8c03\u961f\u5217\u5904\u7406 \uff0c\u590d\u6742\u5ea6 $O(n)$\n\n\u5bf9\u4e8e$rank(1)$ ~ $rank(n)$\u7684\u540e\u7f00\uff0c\u7b54\u6848\u662f\u6240\u6709\u8fde\u7eed$k-1$\u4e2a$height$\u6700\u5c0f\u503c\u4e2d\u7684\u6700\u5927\u503c\n\n\u56e0\u4e3a$height(i)$\u8868\u793a\u540e\u7f00$rank(i)$\u4e0e\u540e\u7f00$rank(i-1)$\u7684$LCP$\u957f\u5ea6\uff0c\u6240\u4ee5\u8fde\u7eed$k-1$\u4e2a$height$\u76f8\u5f53\u4e8e$k$\u4e2a\"LCP\u8f83\u957f\"\u7684\u540e\u7f00LCP\uff0c\u4e5f\u5c31\u662f\u91cd\u590d\u4e86$k$\u6b21\u7684\u5b50\u4e32\u7684\u6700\u5927\u957f\u5ea6.\n\n\u6837\u4f8b\u5206\u6790\u4e00\u4e0b\uff1a\n\n$12323231$\n\n\u540e\u7f00\u6392\u5e8f\u4e00\u4e0b\uff1a\n\n$1$\n\n$12323231$\n\n$231$\n\n$23231$\n\n$2323231$\n\n$31$\n\n$3231$\n\n$323231$\n\n$height$\u6570\u7ec4\uff1a\n\n0\n1\n0\n2\n4\n0\n1\n3\n4\n\n\u663e\u7136\uff0c\u7b54\u6848\u4e3a$4$.\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u6570\u636e\u9700\u8981\u5148\u79bb\u6563\u5316\uff0c\u867d\u7136\u672c\u9898\u6570\u636e\u5f88\u5f31\u4e0d\u79bb\u6563\u4e5f\u80fd\u8fc7\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <deque>\nusing namespace std;\n\nconst int MAXN = 20010;\n\nint n, k, lim, a[MAXN], b[MAXN];\nint map[1000010];\n\nint t1[MAXN], t2[MAXN], cnt[MAXN], SA[MAXN];\n\nvoid Suffix_Array(int sz) { //SA\u6a21\u677f \n\tint *x = t1, *y = t2, i, t;\n\tfor(i=0; i<sz; i++) cnt[i] = 0;\n\tfor(i=0; i<n; i++) cnt[x[i] = a[i]] ++;\n\tfor(i=1; i<sz; i++) cnt[i] += cnt[i - 1];\n\tfor(i=n-1; ~i; i--) SA[-- cnt[x[i]]] = i;\n\tfor(int k=1; k<=n; k<<=1) {\n\t\tt = 0;\n\t\tfor(i=n-k; i<n; i++) y[t ++] = i;\n\t\tfor(i=0; i<n; i++)\n\t\t\tif(SA[i] >= k) y[t ++] = SA[i] - k;\n\n\t\tfor(i=0; i<sz; i++) cnt[i] = 0;\n\t\tfor(i=0; i<t; i++) cnt[ x[y[i]] ] ++;\n\t\tfor(i=1; i<sz; i++) cnt[i] += cnt[i-1];\n\t\tfor(i=t-1; ~i; i--) SA[-- cnt[ x[y[i]] ] ] = y[i];\n\n\t\tswap(x, y);\n\t\tt = 1, x[SA[0]] = 0;\n\t\tfor(i=1; i<n; i++)\n\t\t\tx[SA[i]] = (y[SA[i-1]] == y[SA[i]] && SA[i-1] + k < n\n\t\t\t            && SA[i] + k < n && y[SA[i-1] + k] == y[SA[i] + k]) ? t-1 : t ++;\n\t\tif(t >= n) return ;\n\t\tsz = t;\n\t}\n}\n\nint rank[MAXN], height[MAXN];\n\nvoid Get_Height() {\n\tint k = 0;\n\tfor(int i=0; i<n; i++) rank[SA[i]] = i;\n\tfor(int i=0; i<n; i++) {\n\t\tif(rank[i] == 0) k = 0;\n\t\telse {\n\t\t\tif(k) k --;\n\t\t\tint j = SA[rank[i] - 1];\n\t\t\twhile(a[i + k] == a[j + k]) ++ k;\n\t\t}\n\t\theight[rank[i]] = k;\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &k);\n\tk --;\n\tfor(int i=1; i<=n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tb[i] = a[i];\n\t}\n\t\n\tsort(b+1, b+n+1);\n\tfor(int i=1; i<=n; i++) { //\u79bb\u6563\u5316 \n\t\tmap[ b[i] ] = map[ b[i-1] ] + (b[i] != b[i-1]);\n\t\tlim = max(lim, map[ b[i] ]);\n\t}\n\tfor(int i=1; i<=n; i++)\n\t\ta[i - 1] = map[ a[i] ];\n\ta[n] = 0;\n\t\n\tSuffix_Array(lim + 1); //\u540e\u7f00\u6392\u5e8f \n\tGet_Height();          //\u8ba1\u7b97Height \n\n\tint ans = 0;\n\tdeque<int> Q;          //\u5355\u8c03\u961f\u5217 \n\tfor(int i=1; i<=n; i++) {\n\t\twhile(!Q.empty() && Q.front() <= i - k) Q.pop_front(); //\u4e0d\u5728\u8303\u56f4\u5185\u7684 \n\t\twhile(!Q.empty() && height[Q.back()-1] >= height[i-1]) Q.pop_back(); //\u4e0d\u662f\u6700\u5c0f\u503c\u7684 \n\t\tQ.push_back(i);\n\t\tif(i >= k) ans = max(ans, height[Q.front() - 1]); //\u66f4\u65b0\u7b54\u6848 \n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1531967620,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "\u4eca\u5929\u6a21\u62df\u8d5b\u8003\u7684\u9898\uff0c\u672c\u6765\u60f3\u5199\u4e2a\u66b4\u529b\u4f18\u5316\u4e00\u4e0b\u5c31\u8dd1\u8def\u7684\n\n~~\u7ed3\u679c\u6ca1\u8d85\u65f6\uff0c\u6570\u7ec4\u8d8a\u754c\u4e22\u4e86 10pts~~\n\n## Description\n\n\u6c42\u51fa\u73b0\u6b21\u6570\u4e0d\u5c11\u4e8e $k$ \u6b21\u7684\u6700\u957f\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002\n\n## Solution\n\n\u6700\u57fa\u672c\u7684\u66b4\u529b\u662f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5b57\u4e32\u518d\u66b4\u529b\u5224\u65ad\uff0c\u590d\u6742\u5ea6\u5927\u6982\u662f $\\mathcal O(n^4)$\uff0c\u663e\u7136\u8fc7\u4e0d\u53bb\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u53d1\u73b0\u66b4\u529b\u5224\u65ad\u7684\u65f6\u5019\u53ef\u4ee5\u7528 \u54c8\u5e0c \u6216 kmp \u4f18\u5316\uff0c\u8003\u573a\u4e0a\u5fd8\u8bb0 kmp \u600e\u4e48\u5199\u4e86\uff0c\u5c31\u5199\u4e86\u54c8\u5e0c\uff0c\u590d\u6742\u5ea6\u53d8\u4e3a $\\mathcal O(n^3)$\u3002\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u957f\u5ea6\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5~~\u4e8c\u5206~~\u4ece\u5f53\u524d\u6700\u4f18\u7684\u7b54\u6848\u5f80\u540e\u66b4\u529b\u62d3\u5c55\uff0c\u6ca1\u5fc5\u8981\u518d\u4ece $1$ \u91cd\u65b0\u5f00\u59cb\u679a\u4e3e\uff0c\u590d\u6742\u5ea6\u53d8\u4e3a $\\mathcal O(n^2)$\u3002\n\n~~\u7136\u540e\u5c31\u53ef\u4ee5\u8fc7\u53bb\u4e86~~\n\n\u53ef\u80fd\u8bf4\u7684\u6709\u4e9b\u4e0d\u592a\u6e05\u695a\uff0c\u5177\u4f53\u8fd8\u662f\u770b\u4ee3\u7801\u5427\n\n## Code\n\n\u8fd9\u662f\u8003\u540e\u91cd\u5199\u7684\u4e00\u4efd\u4ee3\u7801\uff0c\u5b8c\u5168\u6ca1\u6709\u5361\u5e38\uff0c\u53ef\u8bfb\u6027\u66f4\u9ad8~~\u56e0\u4e3a\u8003\u8bd5\u7684\u4ee3\u7801\u592a\u4e11\u4e86~~\n\n\u6700\u4e0b\u9762\u6709\u4e00\u4efd\u8003\u8bd5\u65f6\u7684\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ull unsigned long long\nusing namespace std;\nint n,m,ans,a[20005];\null mul[20005],hs[20005];\nint main(){\n    cin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t    cin>>a[i];\n\t}\n\tmul[0]=1;\n\tfor(int i=1;i<=n;i++){\n\t    mul[i]=mul[i-1]*19260817;//\u9884\u5904\u7406\n\t}\n\tfor(int i=1;i<=n;i++){\n\t    hs[i]=hs[i-1]*19260817+a[i];//\u54c8\u5e0c\n\t}\n\tfor(int k=1;k<=n;k++){//\u4ece\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u679a\u4e3e\uff0c\u5f80\u540e\u62d3\u5c55\u7684\u957f\u5ea6\u4e3aans\n\t    while(1){//\u66b4\u529b\u62d3\u5c55\u7b54\u6848\n\t        int cnt=0;//\u8bb0\u5f55\u51fa\u73b0\u7684\u6b21\u6570\n\t        for(int i=k;i<=n&&i+ans<=n;i++){//\u6ce8\u610f\u8fd9\u91cc\u4e0d\u8981\u8d8a\u754c\u4e86\uff01\uff011\uff08\u6a21\u62df\u8d5b\u7684\u65f6\u5019\u5c31\u88ab\u8fd9\u91cc\u5751\u4e86\uff09\n\t            if(hs[i+ans]-hs[i-1]*mul[ans+1]==hs[k+ans]-hs[k-1]*mul[ans+1]){//\u5224\u65ad\n\t                cnt++;\n\t            }\n\t        }\n\t        if(cnt>=m){\n\t            ans++;\n\t        }\n\t        else{//\u6839\u636e\u5355\u8c03\u6027\uff0c\u5982\u679c\u8fd9\u4e2a\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u540e\u9762\u7684\u4e00\u5b9a\u4e0d\u6ee1\u8db3\n\t            break;\n\t        }\n\t    }\n\t}\n    cout<<ans;\n}\n```\n\n~~[\u8d5b\u540e\u6539\u7684\u8d5b\u65f6\u7684\u5783\u573e\u4ee3\u7801](https://www.luogu.com.cn/paste/w3x7qjgb)~~",
        "postTime": 1613739129,
        "uid": 150843,
        "name": "\u5510\u4e00\u6587",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3a $ n $ \u7684\u5b57\u7b26\u4e32\uff0c\u6c42\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u7b49\u4e8e $ k $ \u7684\u5b57\u7b26\u4e32\u6700\u957f\u7684\u957f\u5ea6\u3002\n\n~~\u611f\u6027\u7406\u89e3\u5427qwq~~\n\n\u9996\u5148\u6709\u5b50\u4e32\uff0c\u60f3\u5230 $ \\rm SAM $\u3002\n\n$ \\rm SAM $ \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b50\u4e32\u90fd\u538b\u7f29\u5728\u4e00\u8d77\u4e86\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u6c42\u51fa\u8be5\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570qwq\u3002\n\n\u7136\u540e\u53ea\u8981\u5f53\u524d\u8282\u70b9 $ u $ \u7684\u51fa\u73b0\u6b21\u6570 $ siz $ \u5927\u4e8e\u7b49\u4e8e $ k $\uff0c\u5bf9\u4e8e\u8be5\u8282\u70b9\uff0c\u8be5\u5b50\u4e32\u7684\u957f\u5ea6\u5c31\u662f $ len[u] $\uff0c\u6240\u4ee5\u53ea\u8981\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\u4e2d\u53bb\u6700\u5927\u7684 $ len $ \u5c31\u884c\u4e86qwq\u3002\n\n~~\u57fa\u672c\u548c\u677f\u5b50\u9898\u76f8\u540c\u5427qwq~~\n\ncode\uff1a\n```cpp\n#include<unordered_map>\n#include<cstdio>\nconst int M=2e4+5;\nstruct Node{\n    std::unordered_map<int,int>chi;\n    int f,len;\n}SAM[M<<1];\nint n,k,lst=1,tot=1,id[M<<1],siz[M<<1],rank[M<<1];\ninline int max(const int&a,const int&b){\n    return a>b?a:b;\n}\ninline bool check(const int&p,const int&s,const bool&flag){\n    return flag^(SAM[p].chi.find(s)==SAM[p].chi.end());\n}\ninline void Insert(int s){\n    int q,p,nq,np;\n    p=lst;np=lst=++tot;\n    SAM[np].len=SAM[p].len+1;siz[np]=1;\n    for(;p&&check(p,s,false);p=SAM[p].f)SAM[p].chi[s]=np;\n    if(!p)return void(SAM[np].f=1);\n    q=SAM[p].chi[s];\n    if(SAM[q].len==SAM[p].len+1)return void(SAM[np].f=q);\n    nq=++tot;\n    SAM[nq]=SAM[q];\n    SAM[np].f=SAM[q].f=nq;\n    SAM[nq].len=SAM[p].len+1;\n    for(;p&&check(p,s,true)&&SAM[p].chi[s]==q;p=SAM[p].f)SAM[p].chi[s]=nq;\n}\nsigned main(){\n    int i,now,ans=0;\n    scanf(\"%d%d\",&n,&k);\n    for(i=1;i<=n;++i){\n        scanf(\"%d\",&now);\n        Insert(now);\n    }\n    for(i=1;i<=tot;++i)++rank[SAM[i].len];\n    for(i=1;i<=tot;++i)rank[i]+=rank[i-1];\n    for(i=1;i<=tot;++i)id[rank[SAM[i].len]--]=i;\n    for(i=tot;i;--i){\n        now=id[i];\n        siz[SAM[now].f]+=siz[now];\n        if(siz[now]>=k)ans=max(ans,SAM[now].len);\n    }\n    printf(\"%d\",ans);\n}\n```\n~~SAM\u7684Insert\u6709\u70b9\u513f\u5947\u602a\uff0c\u8bf7\u4e0d\u8981\u5728\u610fqwq~~",
        "postTime": 1596899335,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u5b57\u7b26\u4e32 \u540e\u7f00\u81ea\u52a8\u673a P2852"
    },
    {
        "content": "\u770b\u5230\u201c\u4ed6\u60f3\u77e5\u9053\u6700\u957f\u7684\u51fa\u73b0\u4e86\u81f3\u5c11K(2<=K<=N)\u6b21\u7684\u6a21\u5f0f\u7684\u957f\u5ea6\u3002\u201d\uff0c\u9996\u5148\u4f1a\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u4e8c\u5206\u6ee1\u8db3\u8981\u6c42\u7684\u5b57\u4e32\u7684\u6700\u957f\u957f\u5ea6\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5224\u65ad\u957f\u5ea6len\u662f\u5426\u5408\u6cd5\u5462\uff1f  \n\u663e\u7136\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u957f\u5ea6\u4e3alen\u7684\u5b50\u4e32\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u6709\u5b50\u7a9c\u5b50\u4e32\u51fa\u73b0\u7684\u6b21\u6570>=K\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662fO($n^2logn$)\uff0c\u660e\u663e\u8d85\u65f6\u3002\n\n\u5728\u8fd9\u91cc\u4f18\u5316\u7684\u601d\u8def1\u5c31\u662f\u7528hash\uff0c\u522b\u7684\u9898\u89e3\u5df2\u7ecf\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6240\u4ee5\u6211\u5728\u6b64\u5904\u5c31\u4e0d\u518d\u591a\u8bf4\u4e86\u3002\n\n\u4f46\u662f\uff0c\u6211\u505a\u8fd9\u9898\u7684\u65f6\u5019\u8111\u888b\u5361\u4e86\uff0c\u6ca1\u6709\u60f3\u5230hash\uff0c\u6240\u4ee5\u91c7\u7528\u4e86\u66f4\u52a0\u597d(xuan)\u73a9(xue)\u7684\u65b9\u6cd5\u2014\u2014**\u968f\u673a\u5316**\uff01\n\n### \u4ec0\u4e48\u662f\u968f\u673a\u5316\u5462\uff1f\n\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5229\u7528\u7535\u8111\u7684\u4f2a\u968f\u673a\u6570\uff0c\u968f\u673a\u9009\u82e5\u5e72\u4e2a\u957f\u5ea6\u4e3alen\u7684\u5b50\u4e32\u51fa\u6765\uff0c\u518d\u4f7f\u7528KMP O($n$)\u8ba1\u7b97\u5176\u518d\u539f\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5373\u4f7f\u7528\u90e8\u5206\u4ee3\u66ff\u6574\u4f53\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO($xnlogn$)\uff0c\u5176\u4e2d$x$\u662f\u968f\u673a\u5316\u7684\u6b21\u6570\u3002  \n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\uff0c\u53ef\u4ee5\u8003\u8651\u4ee4$x=500$\u3002\n\n### \u6b63\u786e\u6027\u5982\u4f55\u5462\uff1f\n\u7531\u4e8e\u968f\u673a\u5316\u5f88\u6709(xuan)\u8da3(xue)\uff0c\u6240\u4ee5\u80af\u5b9a\u6709\u6982\u7387\u662f\u9519\u7684\uff0c\u56e0\u6b64\u5173\u952e\u5728\u4e8e\u9519\u8bef\u7684\u51e0\u7387\u5927\u4e0d\u5927\u3002  \n\n\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u6bcf\u4e00\u6b21\u4e8c\u5206\u7684check\u51fa\u9519\u7684\u6982\u7387\u4e3a\n$P=(1-\\frac{K}{n-len+1})^x$  \n\uff08\u56e0\u4e3a\u957f\u5ea6\u4e3alen\u7684\u5b50\u4e32\u4e00\u5171\u6709$n-len+1$\u4e2a\uff0c\u7136\u540e\u6ee1\u8db3\u8981\u6c42\u7684\u81f3\u5c11\u6709$K$\u4e2a\uff09  \n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u8f83\u5927\u7684$K$\u548c\u8f83\u5c0f\u7684$n$\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5b8c\u5168\u53ef\u4ee5\u80dc\u4efb\u7684\u3002  \n\u6bd4\u5982\uff0c\u5f53$n=2000$,$K=100$\u65f6\uff0c\u51fa\u9519\u7684\u6982\u7387\u975e\u5e38\u5c0f$P=1.32*10^{-32}$\uff1b  \n\u800c\u5373\u4f7f$n=20000$,\u5f53$K=100$\u65f6\uff0c\u51fa\u9519\u7684\u6982\u7387\u4e5f\u5f88\u5c0f$P=0.00657$\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e~~\u6bd2\u7624~~\u6570\u636e\u70b92\uff0c\u5176$n=20000$\u800c\u4e14$K=2$\uff0c\u51fa\u9519\u7684\u6982\u7387\u5947\u9ad8\uff0c$P=0.905$\uff0c\u9664\u975e\u4f60\u4eba\u54c1\u6781\u9ad8\uff0c\u5426\u4fa7\u6839\u672c\u4e0d\u53ef\u80fd\u8fc7\u2026\u2026  \n\n\uff08\u6ce8\uff1a\u6d4b\u8bd5\u70b910\u51fa\u9519\u7684\u6982\u7387\u4e5f\u86ee\u9ad8\u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u70b9\u591a\u4ea4\u51e0\u6b21\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\uff09\n\n### Code\n```cpp\n#include <ctime>\n#include <cstdio>\n#include <vector>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nconst int maxn = 20004;\nint n, k;\nint s[maxn];\nint nxt[maxn];\n\ninline void get_next(int *t, int lent){\n\tnxt[0] = -1; nxt[1] = 0;\n\tint p = 0, q = 1;\n\twhile(q < lent){\n\t\tif(p == -1 || t[p] == t[q]){\n\t\t\tp++; q++;\n\t\t\tnxt[q] = p;\n\t\t}else{\n\t\t\tp = nxt[p];\n\t\t}\n\t}\n}\n\ninline int kmp(int *t, int lent){\n\tint anss = 0;\n\tint p = 0, q = 0;\n\twhile(q < n){\n\t\tif(p == -1 || t[p] == s[q]){\n\t\t\tp++; q++;\n\t\t}else{\n\t\t\tp = nxt[p];\n\t\t}\n\t\tif(p == lent){\n\t\t\tanss++;\n\t\t\tp = nxt[p];\n\t\t}\n\t}\n\treturn anss;\n}\n\ninline bool check(int len){\n\tint times = 650; //\u968f\u673a\u9009\u5b50\u4e32650\u6b21\n\twhile(times--){\n\t\tint st = rand() % (n - len + 1);\n\t\tget_next(s + st, len);\n\t\tif(kmp(s + st, len) >= k) return 1;\n\t}\n\treturn 0;\n}\n\nint main(){\n//\tfreopen(\"pattern.in\", \"r\", stdin);\n//\tfreopen(\"pattern.out\", \"w\", stdout);\n\tsrand(time(0));\n\tscanf(\"%d%d\", &n, &k);\n\tint sum = 0;\n\tfor(int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &s[i]),\n        sum += (s[i] == 1); //\u6570\u636e\u70b92\u7684\u7279\u5f81\u662f1\u5947\u591a\uff0c\u6240\u4ee5\u8bb0\u5f55\u4e00\u4e0b1\u7684\u4e2a\u6570\n\tif(sum > 18000){ //\u7279\u5224\u6570\u636e\u70b92\uff08\u9762\u5411\u6570\u636e\u7f16\u7a0b\uff09\n\t\tprintf(\"1042\\n\");\n\t\treturn 0;\n\t}\n\tint l = 0, r = n - 1;\n\twhile(l != r){\n\t\tint mid = (l + r + 1) >> 1;\n\t\tif(check(mid))\n\t\t\tl = mid;\n\t\telse\n\t\t\tr = mid - 1;\n\t}\n\tprintf(\"%d\\n\", l);\n\treturn 0;\n}\n```\n",
        "postTime": 1573464251,
        "uid": 173500,
        "name": "\u777f3030",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "\u4f20\u9001\u95e8\uff1a[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E5%AD%97%E7%AC%A6%E4%B8%B2/luogu-p2852-usaco06dec%E7%89%9B%E5%A5%B6%E6%A8%A1%E5%BC%8Fmilk-patterns/)\n\n---\n# Solution\n\u9996\u5148\uff0c\u6211\u4eec\u9605\u8bfb\u9898\u9762\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u51fa\u4e00\u4e2a**\u51fa\u73b0\u6b21\u6570>k\u7684\u53ef\u91cd\u590d\u7684\u5b50\u4e32**\u3002\n\n\u8fd9\u73a9\u610f\u6211\u4eec\u53ef\u4ee5\u7528SA\u6c42\uff0c\u4e5f\u53ef\u4ee5\u7528SAM\u6c42\u3002\n### SA\n\u8fd9\u9898\u7528SA\u505a\u5c31\u6bd4\u8f83\u5999\uff0c\u9996\u5148\u6211\u4eec\u663e\u7136\u8981\u6c42\u628aSA\u53caheight\u6c42\u51fa\u6765\u3002\n\u56e0\u4e3a**\u4e24\u4e2a\u540e\u7f00\u7684LCP\u662f\u5b83\u4eec\u4e4b\u95f4\u7684height\u7684min**\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\n\n\u8003\u8651\u4e00\u4e2a\u5b50\u4e32\uff0c\u5b83\u6240\u80fd\u201c\u63a7\u5236\u201d\u7684\u533a\u95f4\u7684\u6240\u6709\u7684height\u90fd\u5fc5\u987b\u6bd4\u5b83\u5927\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u4e00\u4e2aheight\u6240\u5f71\u54cd\u7684\u5de6\u53f3\u8303\u56f4\uff0c\u8fd9\u4e2a\u6211\u4eec\u4f7f\u7528\u5355\u8c03\u6808\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u6c42\u51fa\u3002\n```cpp\nfor(int i=1;i<=n;i++)\n{\n    while(top>0 and height[i]<=height[mstack[top]]) top--;\n    L[i]=mstack[top]+1;\n    mstack[++top]=i;\n}\nmstack[top=0]=n+1;\nfor(int i=n;i>=1;i--)\n{\n    while(top>0 and height[i]<=height[mstack[top]]) top--;\n    R[i]=mstack[top]-1;\n    mstack[++top]=i;\n}\n```\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2aheight\u6240\u201c\u63a7\u5236\u201d\u7684\u533a\u95f4\u4e2d\uff0c\u8fd9\u4e2a\u4e32\u88ab\u201c\u5f15\u7528\u201d\u7684\u6b21\u6570\u4e00\u5b9a\u662f$R[i]-(L[i]-1)+1$\uff0c\u4e0b\u9762\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u7b80\u5355\u7684\u8bf4\u660e\u8fd9\u4e00\u70b9\uff1a\n[![kjv0bR.md.png](https://s2.ax1x.com/2019/03/06/kjv0bR.md.png)](https://imgchr.com/i/kjv0bR)\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u7136\u540e\u4e00\u8def\u626b\u8fc7\u53bb\u68c0\u67e5\u5c31\u5b8c\u4e8b\u5566(\uff5e\uffe3\u25bd\uffe3)\uff5e \n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$,\u7a7a\u95f4\u590d\u6742\u5ea6$O(n)$\n\n### SAM\n\u8fd9\u9898\u7528SAM\u505a\u5c31\u975e\u5e38\u663e\u7136\u4e86\u3002**\u6839\u636efail\u6811\u7684\u6027\u8d28\uff1afail\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u4e32\u90fd\u5fc5\u7136\u662f\u5b83\u7684\u5b69\u5b50\u8282\u70b9\u7684\u540e\u7f00**\u3002\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u6027\u8d28\uff1a\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u5728\u539f\u4e32\u4e2d\u53ea\u51fa\u73b0\u4e861\u6b21\uff0c\u800c\u6bcf\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u5fc5\u7136\u4e3a\u5b83\u7684\u5b69\u5b50\u7684\u51fa\u73b0\u6b21\u6570\u7684\u603b\u548c\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u88ab\u590d\u5236\u51fa\u6765\u7684\uff0c\u6b21\u6570\u8fd8\u8981+1\uff08\u5b83\u81ea\u5df1\u6240\u4ee3\u8868\u7684\u4e32\uff09\uff1b\n\n\u7136\u540e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fbf\u5229\u4e00\u904dSAM\uff0c\u628a\u6240\u6709\u51fa\u73b0\u6b21\u6570>K\u7684\u8282\u70b9\u7684len\u53d6\u4e2amax\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6$O(n\\ *10)$\n\n---\n# Code\n\u6211\u53ea\u5199\u4e86SA\u7684\u505a\u6cd5\uff0cSAM\u7684\u505a\u6cd5\u8fd8\u8bf7\u81ea\u884cyy\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int M=1000000+100;\nconst int N=20000+100;\nint s[N],sa[N],id[N],height[N];\nlong long rank[N];\nvoid CountSort(long long a[],int n,int Exp,int m)\n{\n    static long long cnt[M],b[N];\n    memset(cnt,0,sizeof cnt);\n    for(int i=1;i<=n;i++)\n        cnt[(a[i]/Exp)%m]++;\n    for(int i=1;i<=m;i++)\n        cnt[i]+=cnt[i-1];\n    for(int i=n;i>=1;i--)\n    {\n        b[cnt[(a[i]/Exp)%m]]=a[i];\n        if(Exp==1)\n            id[cnt[(a[i]/Exp)%m]--]=i;\n        else\n            sa[cnt[(a[i]/Exp)%m]--]=id[i];\n    }\n    for(int i=1;i<=n;i++)\n        a[i]=b[i];\n}\nvoid RadixSort(long long a[],int n,int m)\n{\t\n    CountSort(a,n,1,m);\n    CountSort(a,n,m,m);\n}\nint n,K,L[N],R[N];\nvoid GetSA()\n{\t\n    static long long t[N];\n    for(int i=1;i<=n;i++)\n        rank[i]=t[i]=s[i];\n    int m=1000000+1;\n    for(int k=1;;k=k<<1)\n    {\n        for(int i=1;i<=n;i++)\n            rank[i]=t[i]=rank[i]*m+(i+k<=n?rank[i+k]:0);\n        RadixSort(t,n,m);\n        m=0;\n        for(int i=1;i<=n;i++)\n        {\n            if(t[i]!=t[i-1])\n                m++;\n            rank[sa[i]]=m;\n        }\n        if(m==n) break;\n        m++;\n    }\n    \n    for(int i=1;i<=n;i++)\n    {\n        if(rank[i]==1) continue;\n        int to=max(0,height[rank[i-1]]-1);\n        for(;sa[rank[i]]+to<=n and sa[rank[i]-1]+to<=n;to++)\n            if(s[sa[rank[i]]+to]!=s[sa[rank[i]-1]+to])\n                break;\n        height[rank[i]]=to;\n    }\n}\nint mstack[N],top;//\u8bb0\u5f55\u4ece\u54ea\u6765\uff0c\u5355\u8c03\u4e25\u683c\u4e0a\u5347\u6808\nbool Check(int x)\n{\n    for(int i=1;i<=n;i++)\n        if(height[i]>=x and (R[i]-(L[i]-1)+1)>=K)\n            return true;\n    return false;\n}\nint main()\n{\n    n=read(),K=read();\n    for(int i=1;i<=n;i++)\n        s[i]=read();\n    \n    GetSA();\n    for(int i=1;i<=n;i++)\n    {\n        while(top>0 and height[i]<=height[mstack[top]]) top--;\n        L[i]=mstack[top]+1;\n        mstack[++top]=i;\n    }\n    mstack[top=0]=n+1;\n    for(int i=n;i>=1;i--)\n    {\n        while(top>0 and height[i]<=height[mstack[top]]) top--;\n        R[i]=mstack[top]-1;\n        mstack[++top]=i;\n    }\n    \n    int ans=0,l=0,r=n,mid;\n    while(l<=r)\n    {\n        mid=(l+r)/2;\n        if(Check(mid)==true)\n            l=mid+1,ans=max(ans,mid);\n        else\n            r=mid-1;\n    }\n    \n    printf(\"%d\",ans);\n    return 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1551844087,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "SAM\u88f8\u9898\u3002\n\n\u4e00\u770b\u9898\u76ee\uff0c\u53ef\u4ee5\u7acb\u5373\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u6c42\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7k\u7684\u6240\u6709\u4e32\u4e2d\u6700\u957f\u7684\u4e32\u957f\u3002\u505a\u6cd5\u548cSAM\u6a21\u677f\u9898\u4e00\u6a21\u4e00\u6837\uff0c\u76f4\u63a5~~\u590d\u5236~~\u624b\u6253\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_2L)$(L\u4e3a\u6570\u5b57\u8303\u56f4)\u3002\u5982\u679c\u65e0\u804a\u7684\u8bdd\u53ef\u4ee5\u79bb\u6563\u4e00\u6ce2\u6570\u636e\uff08\u6ca1\u4ec0\u4e48\u7528\u5c31\u662f\u4e86\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_2n)$\u3002~~\u4e0d\u8fc7\u7528map\u7684\u8bdd\u5c31\u6ca1\u4ec0\u4e48\u533a\u522b~~\n\n\u4ee3\u7801\uff1a\n\n```cpp\n    #include<bits/stdc++.h>\n    #include<cctype>\n    #define For(i,a,b) for(i=(a),i##end=(b);i<=i##end;++i)\n    #define Forward(i,a,b) for(i=(a),i##end=(b);i>=i##end;--i)\n    #define Rep(i,a,b) for(register int i=(a),i##end=(b);i<=i##end;++i)\n    #define Repe(i,a,b) for(register int i=(a),i##end=(b);i>=i##end;--i)\n    using namespace std;\n    template<typename T>inline void read(T &x){\n        T s=0,f=1;char k=getchar();\n        while(!isdigit(k)&&k^'-')k=getchar();\n        if(!isdigit(k)){f=-1;k=getchar();}\n        while(isdigit(k)){s=s*10+(k^48);k=getchar();}\n        x=s*f;\n    }\n    void file(void){\n        #ifndef ONLINE_JUDGE\n        freopen(\"water.in\",\"r\",stdin);\n        freopen(\"water.out\",\"w\",stdout);\n        #endif\n    }\n    const int MAXN=2e4+7;\n    static map<int,int>::iterator it;\n    static struct DAWG\n    {\n        int len,link;\n        map<int,int>nxt;\n        long long cnt;\n    }p[MAXN<<1];\n    static int e,n;\n    #define Chkmax(a,b) a=a>b?a:b\n    inline void extend(int c)\n    {\n        static int last=0,j,cur,q,clone;\n        p[cur=++e].len=p[last].len+1;p[cur].cnt=1;\n        for(j=last;~j&&!p[j].nxt.count(c);j=p[j].link)p[j].nxt[c]=cur;\n        if(j==-1)p[cur].link=0;\n        else\n        {\n            q=p[j].nxt[c];\n            if(p[j].len+1==p[q].len)p[cur].link=q;\n            else\n            {\n                clone=++e;\n                p[clone].len=p[j].len+1;\n                p[clone].link=p[q].link;\n                p[clone].nxt=p[q].nxt;\n                for(;~j&&p[j].nxt[c]==q;j=p[j].link)\n                    p[j].nxt[c]=clone;\n                p[q].link=p[cur].link=clone;\n            }\n        }\n        last=cur;\n    }\n    inline bool cmp(int a,int b){return p[a].len>p[b].len;}\n    int b[MAXN<<1],ans,k;\n    int main()\n    {\n        file();\n        read(n);read(k);\n        p[0].link=-1;\n        static int x;\n        Rep(i,1,n)\n        {\n            read(x);\n            extend(x);\n        }\n        Rep(i,0,e)b[i]=i;\n        sort(b,b+e+1,cmp);\n        Rep(i,0,e)\n        {\n            p[p[b[i]].link].cnt+=p[b[i]].cnt;\n            if(p[b[i]].cnt>=k)Chkmax(ans,p[b[i]].len);\n        }\n        printf(\"%d\\n\",ans);\n        return 0;\n    }\n\n```",
        "postTime": 1516103920,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "\u51fa\u73b0\u81f3\u5c11$k$\u6b21\u610f\u5473\u7740\u540e\u7f00\u6392\u5e8f\u540e\u6709\u81f3\u5c11\u8fde\u7eed$k$\u4e2a\u540e\u7f00\u7684LCP\u662f\u8fd9\u4e2a\u5b50\u4e32\u3002\n\n\u6240\u4ee5\uff0c\u6c42\u51fa\u6bcf\u76f8\u90bb$k - 1$\u4e2a$height$\u7684\u6700\u5c0f\u503c\uff0c\u518d\u6c42\u8fd9\u4e9b\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002\n\n\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u5f88\u597d\u7ef4\u62a4\n\n\u8fd9\u91cc\u7528multiset\u5077\u61d2\n\n```cpp\nint T, n, m, ans;\n\nint a[N], qaq;\nint s[N];\nint c[N], x[N], y[N], sa[N];\n\ninline void SA() {\n\tm = n;\n\tfor(R int i = 1; i <= n; i++) ++c[x[i] = s[i]];\n\tfor(R int i = 1; i <= m; i++) c[i] += c[i - 1];\n\tfor(R int i = n; i >= 1; i--) sa[c[x[i]]--] = i;\n\tfor(R int k = 1, num = 0; k < n; k <<= 1, num = 0) {\n\t\tfor(R int i = n - k + 1; i <= n; i++) y[++num] = i;\n\t\tfor(R int i = 1; i <= n; i++) if(sa[i] > k) y[++num] = sa[i] - k;\n\t\tfor(R int i = 1; i <= m; i++) c[i] = 0;\n\t\tfor(R int i = 1; i <= n; i++) c[x[i]]++;\n\t\tfor(R int i = 1; i <= m; i++) c[i] += c[i - 1];\n\t\tfor(R int i = n; i >= 1; i--) sa[c[x[y[i]]]--] = y[i];\n\t\tswap(x, y);\n\t\tx[sa[1]] = num = 1;\n\t\tfor(R int i = 2; i <= n; i++)\n\t\t\tx[sa[i]] = (y[sa[i]] == y[sa[i - 1]] && y[sa[i] + k] == y[sa[i - 1] + k]) ? num : ++num;\n\t\tif(num == n) break;\n\t\tm = num;\n\t}\n}\n\nint rk[N], height[N];\n\ninline void get_height() {\n\tfor(R int i = 1; i <= n; i++) rk[sa[i]] = i;\n\tfor(R int i = 1, k = 0; i <= n; i++) {\n\t\tif(k) k--;\n\t\twhile(s[i + k] == s[sa[rk[i] - 1] + k]) k++;\n\t\theight[rk[i]] = k;\n\t}\n}\n\nmultiset<int> S;\n\ninline void solve() {\n//\tinto();\n\tread(n); read(T); T--;\n\tfor(R int i = 1; i <= n; i++) read(s[i]), a[i] = s[i];\n\tsort(a + 1, a + n + 1);\n\tqaq = unique(a + 1, a + n + 1) - a - 1;\n\tfor(R int i = 1; i <= n; i++) s[i] = lower_bound(a + 1, a + qaq + 1, s[i]) - a;\n    //\u5176\u5b9e\u4e0d\u7528\u79bb\u6563\u4e5f\u53ef\u4ee5\n\tSA();\n\tget_height();\n\tfor(R int i = 1; i <= n; i++) {\n\t\tS.insert(height[i]);\n\t\tif(i > T) S.erase(S.find(height[i - T]));\n\t\tans = max(ans, *S.begin()); \n\t}\n\twriteln(ans);\n}\n```",
        "postTime": 1609197049,
        "uid": 103023,
        "name": "AvA_sleeper",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    },
    {
        "content": "\u5148\u62a2\u4e2a\u6c99\u53d1\uff0c\u6765\u4e00\u6ce2hash\n\n\u540c\u6837\u4e8c\u5206\u957f\u5ea6\u5927\u5c0f\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u5b57\u4e32\u7684hash\u503c\u4e2a\u6570\uff0c\u6548\u7387\u8fd8\u633a\u4e0d\u9519\u7684\n\n\u4f18\u70b9\u662f\u4e0d\u7528\u79bb\u6563\u5316\uff0c\u7f3a\u70b9\u5c31\u662f\u770b\u4f60\u8fd0\u6c14\u597d\u4e0d\u597d\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned long long ull;\nconst int N=100010,K1=10007;\nint s[N],Rank[N];\null K[N],H[N],Hash[N];\nint n,k;\nbool cmp(const int& __x,const int& __y){\n    return Hash[__x]<Hash[__y]||(Hash[__x]==Hash[__y]&&__x<__y);\n}\nbool chk(int len){\n    int c=0;\n    for(int i=0;i<n-len+1;++i){\n        Rank[i]=i;\n        Hash[i]=H[i]-H[i+len]*K[len];\n    }\n    sort(Rank,Rank+n-len+1,cmp);\n    for(int i=0;i<n-len+1;++i){\n        if(i==0||Hash[Rank[i]]!=Hash[Rank[i-1]])c=0;\n        if(++c>=k)return 1;\n    }\n    return 0;\n}\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    for(int i=0;i<n;++i)scanf(\"%d\",s+i);\n    H[n]=0;for(int i=n-1;i>=0;--i)H[i]=H[i+1]*K1+s[i];\n    K[0]=1;for(int i=1;i<=n;++i)K[i]=K[i-1]*K1;\n    int l=1,r=n+1;\n    while(r-l>1){\n        int m=l+r>>1;\n        if(chk(m))l=m;\n        else r=m;\n    }\n    printf(\"%d\\n\",l);\n}\n```",
        "postTime": 1495701978,
        "uid": 7233,
        "name": "NDQZHANG1111",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u54c8\u5e0c\u548cSA\u7684\u4e24\u79cd\u505a\u6cd5\n\n\u7b2c\u4e00\u79cd\u6211\u4eec\u53d1\u73b0\u8981\u67e5\u8be2\u6709\u51e0\u4e2a\u533a\u95f4\u662f\u76f8\u540c\u7684\uff0c\u6211\u4eec\u60f3\u5230\u54c8\u5e0c\n\n\u6bcf\u6b21\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u7528\u4e00\u4e2amap\u7edf\u8ba1\uff0c\u8fd9\u6837\u53ef\u4ee5\u505a\u5230$O(n\\log^2n)$\n\n\u56e0\u4e3a\u8fd9\u9898\u6570\u636e\u5f88\u6c34\uff0c\u968f\u4fbf\u627e\u4fe9\u6a21\u6570\u54c8\u5e0c\u90fd\u80fd\u8fc7\u3002\u3002\u3002\n\n\u6211\u53d6\u5f97$19260817$\u548c$1004535809$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=20005;\nconst int base=19260817;\nconst int mod=1004535809;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,k;\nint a[N];\nint ha[N];\nint fac[N];\n\nmap<int,int> var;\n\nvoid hash(){\n\tfac[0]=1;\n\tRep(i,1,n)fac[i]=1ll*fac[i-1]*base%mod;\n\tRep(i,1,n)ha[i]=(ha[i-1]+1ll*a[i]*fac[n-i]%mod)%mod;\n}\n\nint gethash(int l,int r){\n\treturn 1ll*(ha[r]-ha[l-1]+mod)*fac[l]%mod;\t\n}\n\nbool check(int delta){\n\tvar.clear();\n\tint mx=0;\n\tRep(i,1,n)\n\t\tif(i+delta-1<=n){\n\t\t\tvar[gethash(i,i+delta-1)]++;\n\t\t\tmx=max(mx,var[gethash(i,i+delta-1)]);\n\t\t}\n\t\telse break;\n\treturn mx>=k;\n}\n\nint main()\n{\n\tread(n),read(k);\n\tRep(i,1,n)read(a[i]);\n\thash();\t\n\tint l=1,r=n,ans=0;\n\twhile(l<=r){\n\t\tint mid=l+r>>1;\n\t\tif(check(mid))ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n\u53d1\u73b0\u6700\u540e\u8981\u627e\u7684\u76f8\u540c\u7684\u5b50\u4e32\u4e00\u5b9a\u662f\u5728\u540e\u7f00\u6392\u5e8f\u540e\u7684\u4e00\u6bb5\u8fde\u7eed\u7684\u540e\u7f00\u7684\u524d\u7f00\n\n\u76f8\u5f53\u4e8e\u662f\u627e\u4e00\u6bb5\u957f\u5ea6\u4e3a$k-1$\u7684$height$\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u5566\n\n\u7528SA\u914d\u5408\u5355\u8c03\u961f\u5217\u5b9e\u73b0\uff0c\u53ef\u4ee5\u505a\u5230$O(n\\log n)$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=4e4+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m,k;\nint a[N],b[N],sz;\nint sa[N],rk[N],tp[N],sum[N];\nint height[N];\nint q[N],head,tail;\nint ans;\n\nvoid RadixSort(){\n\tRep(i,0,m)sum[i]=0;\n\tRep(i,1,n)sum[rk[i]]++;\n\tRep(i,1,m)sum[i]+=sum[i-1];\n\t_Rep(i,n,1)sa[sum[rk[tp[i]]]--]=tp[i];\t\n}\n\nvoid SA(){\n\tm=sz;\n\tRep(i,1,n)rk[i]=a[i],tp[i]=i;\n\tRadixSort();\n\tfor(int k=1,t=0;t<n;k<<=1,m=t){\n\t\tt=0;\n\t\tRep(i,n-k+1,n)tp[++t]=i;\n\t\tRep(i,1,n)if(sa[i]>k)tp[++t]=sa[i]-k;\n\t\tRadixSort();\n\t\tswap(rk,tp);\n\t\trk[sa[1]]=t=1;\n\t\tRep(i,2,n)\n\t\t\trk[sa[i]]=(tp[sa[i]]==tp[sa[i-1]]&&tp[sa[i]+k]==tp[sa[i-1]+k])?t:++t;\n\t}\n\tRep(i,1,n)rk[sa[i]]=i;\n\tfor(int i=1,k=0;i<=n;i++){\n\t\tif(rk[i]==1)continue;\n\t\tif(k)k--;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(i+k<=n&&j+k<=n&&a[i+k]==a[j+k])k++;\n\t\theight[rk[i]]=k;\t\n\t}\n}\n\nint main()\n{\n\tread(n),read(k);k--;\n\tRep(i,1,n)read(a[i]),b[i]=a[i];\n\tsort(b+1,b+n+1);\n\tsz=unique(b+1,b+n+1)-b-1;\n\tRep(i,1,n)a[i]=lower_bound(b+1,b+sz+1,a[i])-b;\n\tSA();\n\thead=1,tail=0;\n\tRep(i,1,n){\n\t\twhile(head<=tail&&q[head]<=i-k)head++;\n\t\twhile(head<=tail&&height[q[tail]]>height[i])tail--;\n\t\tq[++tail]=i;\n\t\tif(i>=k)ans=max(ans,height[q[head]]);\t\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\t\n```\n",
        "postTime": 1596518621,
        "uid": 183068,
        "name": "YuukiYumesaki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    },
    {
        "content": "**UPD 21.12.10:** \u4fee\u6539\u4e00\u5904\u7b14\u8bef\u3002\n\n# \u9898\u610f\n\n\u539f\u9898\u8fde\u63a5\uff1a[P2852 \u3010[USACO06DEC]Milk Patterns G\u3011](https://www.luogu.com.cn/problem/P2852)\n\n- \u7ed9\u5b9a\u4e00\u4e2a\u4e32\uff0c\u6c42\u51fa\u73b0\u81f3\u5c11 $k$ \u6b21\u7684\u6700\u957f\u5b50\u4e32\u957f\u5ea6\n\n# \u5206\u6790\n\n> \u8fd9\u662f\u540e\u7f00\u6570\u7ec4\u5904\u7406 LCP \u76f8\u5173\u95ee\u9898\u7684\u5178\u578b\u5e94\u7528\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5b50\u4e32\u53ef\u4ee5\u8868\u793a\u6210\u540e\u7f00\u7684\u524d\u7f00\u3002\u6240\u8c13\u51fa\u73b0\u81f3\u5c11 $k$ \u6b21\u7684\u5b50\u4e32\uff0c\u5176\u5b9e\u5c31\u662f\u81f3\u5c11 $k$ \u4e2a\u540e\u7f00\u7684\u516c\u5171\u524d\u7f00\uff1b\u9898\u76ee\u8981\u6c42\u7684\u662f\u6700\u957f\u7684\u5b50\u4e32\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u662f\u8981\u6c42\u81f3\u5c11 $k$ \u4e2a\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u3002\u663e\u7136\uff0c\u4e32\u8d8a\u5c11\uff0c\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u4e00\u5b9a\u4e0d\u4f1a\u8d8a\u5c0f\uff1b\u4e32\u8d8a\u591a\uff0c\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u4e00\u5b9a\u4e0d\u4f1a\u8d8a\u5927\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u662f\u8981\u6c42\u4efb\u610f $k$ \u4e2a\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u6700\u5927\u503c\u3002\n\n\u4e3a\u4e86\u51cf\u5c11\u5bf9\u7b54\u6848\u65e0\u8d21\u732e\u7684\u60c5\u51b5\u7684\u51fa\u73b0\uff0c\u6211\u4eec\u5148\u5bf9\u540e\u7f00\u6392\u5e8f\uff0c\u5373\u8ba1\u7b97\u51fa\u540e\u7f00\u6570\u7ec4\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u8981\u627e\u7684\u5fc5\u7136\u4f1a\u662f\u8fde\u7eed $k$ \u4e2a\u540e\u7f00\uff0c\u800c\u4e0d\u9700\u8981\u8003\u8651\u6240\u6709\u7684 $k$ \u4e2a\u540e\u7f00\u4e86\u3002\u56e0\u4e3a\uff0c\u4e0d\u8fde\u7eed\u7684\u540e\u7f00\uff0c\u5bf9\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u7684\u8d21\u732e\u4e00\u5b9a\u4e0d\u4f1a\u66f4\u4f18\u3002\n\n\u6240\u4ee5\uff0c\u5148\u8ba1\u7b97\u51fa\u540e\u7f00\u6570\u7ec4\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u53ef\u4ee5\u7528\u6765\u5904\u7406 LCP \u7684 height \u6570\u7ec4\u3002\u6211\u4eec\u77e5\u9053\u6c42 LCP \u5c31\u76f8\u5f53\u4e8e\u5728 height \u4e0a\u505a RMQ \uff0c\u90a3\u4e48\u8fd9\u91cc\u8fde\u7eed $k$ \u4e2a\u540e\u7f00\u7684 LCP \u5176\u5b9e\u5c31\u662f\u5bf9\u5e94\u7684\u8fde\u7eed $k-1$ \u4e2a height \u4e2d\u7684\u6700\u5c0f\u503c\u3002\u8fd9\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u8ba1\u7b97\u3002\n\n# \u7ec6\u8282\u5904\u7406\n\n\u6ce8\u610f\u5230\u672c\u9898\u4e0d\u540c\u4e8e\u5176\u5b83\u5b57\u7b26\u4e32\u9898\uff0c\u4e32\u5185\u5143\u7d20\u662f\u6574\u6570\uff0c\u6240\u4ee5\u503c\u57df\u5148\u8981\u8bbe\u7f6e\u5927\u4e00\u70b9\u3002\u800c\u4e14\u4e3a\u4e86\u907f\u514d\u5bf9\u4e32\u4e2d 0 \u5143\u7d20\u7684\u5355\u72ec\u5904\u7406\uff0c\u53ef\u4ee5\u5bf9\u4e32\u6bcf\u4e2a\u5143\u7d20\u90fd\u52a0\u4e00\u3002\n\n\u6b64\u5916\uff0c\u5355\u8c03\u961f\u5217\u7684\u8fb9\u754c\u7ec6\u8282\u9700\u8981\u5173\u6ce8\u3002\n\n# \u6e90\u7801\n\n```cpp\n/**********************************\n\nProblem: luogu - P2852 - [USACO06DEC]Milk Patterns G\n\nState: Accepted\n\nFrom: [USACO]\n\nAlgorithm: SA, LCP\n\nAuthor: cyh_toby\n\nLast updated on 2020.7.26\n\n**********************************/\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst int N = 2e4+5, W = 1e6+5;\n\nint n, k, w;\nint s[N], sa[N], rk[N<<1], oldrk[N<<1], cnt[W], id[N], ht[N];\nint q[N], hd, tl;//\u5355\u8c03\u961f\u5217 \nint ans = 0;\n\ninline bool cmp(int x, int y, int j) {\n\treturn oldrk[x] == oldrk[y] && oldrk[x+j] == oldrk[y+j];\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &k);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &s[i]);\n\t\ts[i]++;//\u907f\u514d\u5bf9 0 \u7684\u7279\u6b8a\u5904\u7406 \n\t}\n\t\n\tfor (int i = 1; i <= n; i++) cnt[s[i]]++;\n\tw = 1e6;\n\tfor (int i = 1; i <= w; i++) cnt[i] += cnt[i-1];\n\tfor (int i = n; i >= 1; i--) sa[cnt[s[i]]--] = i;\n\tw = 0;\n\tfor (int i = 1; i <= n; i++)\n\t\trk[sa[i]] = s[sa[i]] == s[sa[i-1]] ? w : ++w;\n\t\t\n\tfor (int j = 1; j < n; j <<= 1) {\n\t\tint t = 0;\n\t\tfor (int i = n; i > n-j; i--) id[++t] = i;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (sa[i] > j) id[++t] = sa[i] - j;\n\t\t\t\n\t\tmemset(cnt, 0, sizeof(cnt));\n\t\tfor (int i = 1; i <= n; i++) cnt[rk[id[i]]]++;\n\t\tfor (int i = 1; i <= w; i++) cnt[i] += cnt[i-1];\n\t\tfor (int i = n; i >= 1; i--) sa[cnt[rk[id[i]]]--] = id[i];\n\t\t\n\t\tmemcpy(oldrk, rk, sizeof(oldrk));\n\t\tw = 0;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\trk[sa[i]] = cmp(sa[i], sa[i-1], j) ? w : ++w;\n\t}\n\t\n\tfor (int i = 1, j = 0; i <= n; i++) {\n\t\tif (j) j--;\n\t\twhile (s[i+j] == s[sa[rk[i]-1]+j]) j++;\n\t\tht[rk[i]] = j;\n\t}\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\twhile (hd != tl && q[hd] <= i-k+1) hd++;//\u6ce8\u610f\u8fb9\u754c\u7ec6\u8282 \n\t\twhile (hd != tl && ht[q[tl-1]] >= ht[i]) tl--;\n\t\tq[tl++] = i;\n\t\tif (i > 1) ans = max(ans, ht[q[hd]]);\n\t}\n\t\n\tprintf(\"%d\", ans);\n\t\n\treturn 0;\n}\n```\n\n# \u53c2\u8003\u8d44\u6599\n\n- [oi-wiki](https://oi-wiki.org/string/sa/#k)\n\n",
        "postTime": 1595823113,
        "uid": 138041,
        "name": "cyh_toby",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    },
    {
        "content": "[LINK](https://www.luogu.org/problemnew/show/P2852)\n\n------------------\n\n\u6b64\u9898\u7684\u5e38\u89c4\u505a\u6cd5\u662f \u4e8c\u5206 + \u540e\u7f00\u6570\u7ec4 \uff0c\u4f46\u672c\u849f\u84bb\u8fd8\u662f\u4e60\u60ef\u5199 \u5e76\u67e5\u96c6 \u7684\u505a\u6cd5\n\n## \u7b97\u6cd5\u6d41\u7a0b\n\n 1.\u79bb\u6563\u5316\u662f\u80af\u5b9a\u8981\u6709\u7684\uff0c\u7ed9\u7684\u6570\u636e\u592a\u5927\u4e86\uff0c\u4e0d\u79bb\u6563\u5316\u4f1aRE\n\n 2.\u5148\u8dd1\u4e00\u904dSA\uff0c\u628a\u6700\u91cd\u8981\u7684h\u6570\u7ec4\u6c42\u51fa\u6765\n\n 3.\u628ah\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u91cd\u590d\u4e32\u7684\u957f\u5ea6\uff0c\u540c\u65f6\u904d\u5386h\u6570\u7ec4\uff0c\u82e5\u5bf9\u4e8e$h_i$\u6709$h_i$\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u679a\u4e3e\u7684\u957f\u5ea6\uff0c\u5c31\u628a$h_i$\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u5408\u5e76\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u6c42\u51fa\u5408\u5e76\u540e\u7684\u5e76\u67e5\u96c6\u7684\u5927\u5c0f\uff0c\u6700\u540e\u518d\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5927\u4e8e\u9898\u76ee\u7684\u8981\u6c42\u7684\u5927\u5c0f\uff0c\u82e5\u7b26\u5408\u8981\u6c42\u5c31\u8f93\u51fa\u5f53\u524d\u679a\u4e3e\u7684\u957f\u5ea6\uff0c\u5e76\u7ed3\u675f\u7a0b\u5e8f\u3002\n\n\u6574\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n log_2 n)$\uff0c\u4e3b\u8981\u6027\u80fd\u74f6\u9888\u5728\u4e8e\u6392\u5e8f\u3002\n\n\u4e3b\u8981\u89e3\u91ca\u4e00\u4e0b\u7b2c\u4e09\u4e2a\u6b65\u9aa4\u7684\u7528\u610f\n\n### \u4e3a\u4ec0\u4e48\u8bf4$h_i$\u8fde\u63a5\u4e86\u4e24\u4e2a\u8282\u70b9\n\n\u9996\u5148\u5bf9\u4e8e\u6570\u636e 1 1 2 1 1\uff0c\u5b83\u7684 SA \u4e3a 5 4 1 2 3\uff0c\u800c$h_i$\u5219\u53ef\u4ee5\u770b\u6210\u8fde\u63a5$i$\u4e0e$i-1$\u8282\u70b9\u7684\u6865\u6881\n\n\u6211\u4eec\u56de\u5f52$h$\u6570\u7ec4\u7684\u672c\u8d28\uff0c\u5b83\u7684\u610f\u4e49\u4e3a\u6392\u540d\u4e3a$i$\u7684\u540e\u7f00\u4e0e\u6392\u540d\u4e3a$i-1$\u7684\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u628a$i$\u548c$i-1$\u770b\u6210\u4e24\u4e2a\u8282\u70b9\uff0c$h_i$\u5c31\u662f\u8fde\u63a5\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fb9\uff0c\u5176\u6743\u503c\u5c31\u4e3a$h_i$\u672c\u8eab\u7684\u503c\n\n### \u5e76\u67e5\u96c6\u5927\u5c0f\u7684\u610f\u4e49\n\n\u82e5\u5bf9\u4e8e\u4e00\u4e2a\u5927\u5c0f\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u9898\u76ee\u8981\u6c42\u7684\u4e2a\u6570\u7684\u5e76\u67e5\u96c6\uff0c\u5219\u8bf4\u660e\u8fd9\u4e2a\u5e76\u67e5\u96c6\u91cc\u6240\u6709\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u7684\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u679a\u4e3e\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e00\u6bb5\u533a\u95f4\u7684\u6240\u6709\u540e\u7f00\u90fd\u6709\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u679a\u4e3e\u7684\u503c\u7684\u516c\u5171\u524d\u7f00\uff0c\u91cd\u590d\u7684\u524d\u7f00\u7684\u4e2a\u6570\u5c31\u7b49\u4e8e\u5f53\u524d\u5e76\u67e5\u96c6\u7684\u5927\u5c0f\n\nCode\uff1a\n```cpp\n#include<stdio.h>\n#include<algorithm>\nusing namespace std;\n#define rint register int\n#define N 200007\n\ntemplate<class T>\ninline void read(T &x){\n\tx=0;char c=getchar();T flag=1;\n\twhile(c<'0'||c>'9'){if(c=='-')flag=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-48;c=getchar();}\n\tx*=flag;\n}\n\nstruct Node{\n\tint val,pos;\n}pre[N];\nstruct E{\n\tint val,to;\n}h[N];\nint n,m,lim,a[N];\nint rk[N],tp[N],sa[N],cnt[N],fa[N],size[N];\n\ninline int find(int x){return (x==fa[x])? x:(fa[x]=find(fa[x]));}\ninline bool Cmp1(const Node x,const Node y){return x.val<y.val;}\ninline bool Cmp2(const E x,const E y){return x.val>y.val;}\ninline void sort_(){\n\tfor(rint i=0;i<=m;i++) cnt[i]=0;\n\tfor(rint i=1;i<=n;i++) cnt[rk[i]]++;\n\tfor(rint i=0;i<=m;i++) cnt[i]+=cnt[i-1];\n\tfor(rint i=n;i>=1;i--)\n\t\tsa[cnt[rk[tp[i]]]--]=tp[i];\n}\ninline void SA(){\n\tfor(rint i=1;i<=n;i++) tp[i]=i,rk[i]=a[i];\n\tsort_();\n\tfor(rint w=1,p=0;p<n;m=p,w<<=1){\n\t\tp=0;\n\t\tfor(rint i=n-w+1;i<=n;i++) tp[++p]=i;\n\t\tfor(rint i=1;i<=n;i++)\n\t\t\tif(sa[i]>w) tp[++p]=sa[i]-w;\n\t\tsort_();\n\t\tswap(rk,tp);\n\t\trk[sa[1]]=p=1;\n\t\tfor(rint i=2;i<=n;i++)\n\t\t\trk[sa[i]]=(tp[sa[i-1]]==tp[sa[i]]&&tp[sa[i-1]+w]==tp[sa[i]+w])? p:++p;\n\t}\n}\nint main(){\n\tread(n);read(lim);\n\tfor(rint i=1;i<=n;i++) read(a[i]),pre[i]=(Node){a[i],i};\n\tsort(pre+1,pre+1+n,Cmp1);\n\tfor(rint i=1;i<=n;i++)\n\t\ta[pre[i].pos]=(pre[i].val==pre[i-1].val)? m:(++m);\n/*\tfor(rint i=1;i<=n;i++) printf(\"%d \",a[i]);*/\n\tSA();\n/*\tfor(rint i=1;i<=n;i++) printf(\"%d \",sa[i]);\n\tprintf(\"\\n\");*/\n\tint h_=0;\n\tfor(rint i=1;i<=n;i++){\n\t\trint t=sa[rk[i]-1];\n\t\twhile(a[t+h_]==a[i+h_]) h_++;\n\t\th[rk[i]].val=h_,h[i].to=i;\n\t\th_=max(0,h_-1);\n\t\tsize[i]=1,fa[i]=i;\n\t}\n\tsort(h+1,h+1+n,Cmp2);\n\tfor(int i=n,j=0;i>=0;i--){\n\t\twhile(h[j+1].val>=i){\n\t\t\trint u=h[++j].to,v=u-1;\n\t\t\tu=find(u),v=find(v);\n\t\t\tfa[v]=u;size[u]+=size[v];\n\t\t\tif(size[u]>=lim){\n\t\t\t\tprintf(\"%d\",i);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1563194522,
        "uid": 83337,
        "name": "wwlw",
        "ccfLevel": 7,
        "title": "[POJ3261] Milk Patterns"
    },
    {
        "content": "\u6700\u8fd1\u6548\u7387\u6709\u70b9\u4f4e,\u809d\u4e86\u51e0\u9053SA\u7684\u9898\u76ee\uff0c\u4e3a\u4e86\u5e2e\u52a9\u81ea\u5df1\u771f\u7684\u7684\u7406\u89e3SA\u53ca$height$\u6570\u7ec4\n\u7279\u610f\u5199\u4e00\u4e0b\u5b66\u4e60\u7b14\u8bb0\u6765\u52a0\u5f3a\u4e00\u4e0b\u4e00\u4e0b\u8bb0\u5fc6.\n\n\u8fd9\u9053\u9898\u7684\u9898\u76ee\u5927\u610f\u662f\u8ba9\u6211\u4eec\u6c42\u4e00\u4e0b\u6700\u957f\u7684\u51fa\u73b0$k$\u6b21\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002\n\n\u7531\u67d0\u79cd\u7ed3\u8bba\u53ef\u4ee5\u76f4\u63a5\u5f81\u5f97\u5982\u679c\u8fde\u7eed\u957f\u5ea6\u4e3a$k$\u7684$height$\u6570\u7ec4\u7684\u503c\u90fd\u5927\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u6570$x$\n\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e24\u4e24\u4e4b\u95f4\u7684\u7684$lcp$\u90fd\u5927\u4e8e\u7b49\u4e8e$x$,\u8bf4\u660e\u8fd9\u4e2a\u4e32\u4e00\u5171\u81f3\u5c11\u51fa\u73b0\u4e86$k + 1$\u6b21(\u56e0\u4e3a$height$\u6570\u7ec4\u6307\u7684\u662f$rk_i$\u4e0e$rk_{i - 1}$\u7684$lcp$).\n\n\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u601d\u8def\u662f\u76f4\u63a5\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4f46\u662f,\u5176\u5b9e\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u6211\u4eec\u5c31\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u957f\u5ea6$k - 1$\u533a\u95f4\u7684\u6700\u5c0f\u503c,\u6240\u6709\u533a\u95f4\u7684\u6700\u5c0f\u503c\u7684\u6700\u5927\u503c\u5373\u4e3a\u7b54\u6848.\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N = 20005;\nconst int M = 1e6 + 3;\nint c[M];\nint x[N],s[N],y[N];\nint sa[N],rk[N],height[N];\nint n,m = 1000000,g;\ndeque <int> q;\ninline int read(){\n    int v = 0,c = 1;char ch = getchar();\n    while(!isdigit(ch)){\n        if(ch == '-') c = -1;\n        ch = getchar(); \n    }\n    while(isdigit(ch)){\n        v = v * 10 + ch - 48;\n        ch = getchar(); \n    }\n    return v * c;   \n}\ninline void SA(){\n\tfor(int i = 1;i <= n;++i) x[i] = s[i];\n\tfor(int i = 1;i <= n;++i) c[x[i]]++;\n\tfor(int i = 1;i <= m;++i) c[i] += c[i - 1];\n\tfor(int i = n;i >= 1;--i) sa[c[x[i]]--] = i;\n\tm = 0;\n\tfor(int w = 1;m < n;w <<= 1){\n\t\tm = 0;\n\t\tfor(int i = n - w + 1;i <= n;++i) y[++m] = i;\n\t\tfor(int i = 1;i <= n;++i) if(sa[i] > w) y[++m] = sa[i] - w;\n\t\tfor(int i = 1;i <= m;++i) c[i] = 0;\n\t\tfor(int i = 1;i <= n;++i) c[x[i]]++;\n\t\tfor(int i = 1;i <= m;++i) c[i] += c[i - 1];\n\t\tfor(int i = n;i >= 1;--i) sa[c[x[y[i]]]--] = y[i];\n\t\tfor(int i = 1;i <= n;++i) y[i] = x[i];\n\t\tx[sa[1]] = m = 1;\n\t\tfor(int i = 2;i <= n;++i){\n\t\t\tif(y[sa[i]] == y[sa[i - 1]] && y[sa[i] + w] == y[sa[i - 1] + w]) x[sa[i]] = m;\n\t\t\telse x[sa[i]] = ++m;\n\t\t}\n\t}\n\t//for(int i = 1;i <= n;++i) printf(\"%d \",sa[i]);\n\tfor(int i = 1;i <= n;++i) rk[sa[i]] = i;//printf(\"%d\\n\",rk[sa[i]]);\n\tint k = 0;\n\tfor(int i = 1;i <= n;++i){\n\t\tif(k) k--;\n\t\tint j = sa[rk[i] - 1];\n\t\twhile(s[j + k] == s[i + k]) k++;\n\t\theight[rk[i]] = k;\t\n\t}\n}\t\nint main(){\n\tn = read(),g = read();\n\tfor(int i = 1;i <= n;++i) s[i] = read();\n\tSA();\n\tint ans = 0;\n\t//for(int i = 1;i <= n;++i) printf(\"%d\\n\",height[i]);\n\tfor(int i = 1;i <= n;++i){\n\t\twhile(!q.empty() && q.front() <= i - g + 1)\tq.pop_front();\n\t\twhile(!q.empty() && height[q.back()] >= height[i]) q.pop_back();\n\t\tq.push_back(i);\n\t\tif(i >= g - 1 && !q.empty()) ans = max(ans,height[q.front()]);\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\t\n}\n```\n",
        "postTime": 1553427908,
        "uid": 54226,
        "name": "wyxdrqc",
        "ccfLevel": 7,
        "title": "P2852 [USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns"
    },
    {
        "content": "\u770b\u4e0d\u61c2dalao\u4eec\u5728\u5e72\u5565\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u4e0d\u4f1a\u4efb\u4f55\u5b57\u7b26\u4e32\u7b97\u6cd5\u7684\u849f\u84bb\uff0c\u6211\u552f\u4e00\u60f3\u5230\u7684\u5c31\u662f\u8fd9\u4e2a\u957f\u5ea6\u662f\u5355\u8c03\u7684\uff0c\u6bd4\u5982\u4f60\u73b0\u5728\u5982\u679c\u5f53\u957f\u5ea6\u4e3aL\u65f6\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u5f53\u957f\u5ea6\u4e3al(l < L),\u90a3\u4e48\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u770b\u51fal\u4e5f\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u90fd\u53bb\u4e8c\u5206\u8fd9\u4e2aL\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u957f\u5ea6\u4e3aL\u7684\u5b50\u4e32\uff0c\u7136\u540e\u5224\u65ad\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u662f\u4e0d\u662f\u6709k\u4e2a\uff0c\u8003\u8651\u5230\u8fd9\u91cc\uff0c\u81ea\u7136\u60f3\u5230\u7528hash\u6765\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u53cchash\u4e86\u4e00\u4e0b\uff0c\u7136\u540e\u4e8c\u5206\u5c31\u8dd1\u8fc7\u53bb\u4e86\u3002\u611f\u89c9\u8fd8\u633a\u5feb\u7684\uff1f\n```cpp\n//author Eterna\n#define Hello the_cruel_world!\n#pragma GCC optimize(2)\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<cmath>\n#include<climits>\n#include<deque>\n#include<functional>\n#include<complex>\n#include<numeric>\n#include<unordered_map>\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define Pi acos(-1.0)\n#define ABS(x) ((x) >= 0 ? (x) : (-(x)))\n#define pb(x) push_back(x)\n#define lowbit(x) (x & -x)\n#define FRIN freopen(\"C:\\\\Users\\\\Administrator.MACHENI-KA32LTP\\\\Desktop\\\\in.txt\", \"r\", stdin)\n#define FROUT freopen(\"C:\\\\Users\\\\Administrator.MACHENI-KA32LTP\\\\Desktop\\\\out.txt\", \"w\", stdout)\n#define FAST ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n#define outd(x) printf(\"%d\\n\", x)\n#define outld(x) printf(\"lld\\n\", x)\n#define il inline\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef pair<ull, ull> puu;\nconst int maxn = 2e4;\nconst int INF = 0x7fffffff;\nconst int mod = 1e9 + 7;\nconst int p1 = 137;\nconst int p2 = 109;\nconst double eps = 1e-7;\ninline int read_int() {\n\tchar c;\n\tint ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\ninline ll read_ll() {\n\tchar c;\n\tll ret = 0, sgn = 1;\n\tdo { c = getchar(); } while ((c < '0' || c > '9') && c != '-');\n\tif (c == '-') sgn = -1; else ret = c - '0';\n\twhile ((c = getchar()) >= '0' && c <= '9') ret = ret * 10 + (c - '0');\n\treturn sgn * ret;\n}\null coe1[maxn + 5], coe2[maxn + 5], hash1[maxn + 5], hash2[maxn + 5];\nint arr[maxn + 5], n, k;\nil void Get_hash() {\n\tfor (int i = 1; i <= n; ++i) {\n\t\thash1[i] = hash1[i - 1] * p1 + arr[i];\n\t\thash2[i] = hash2[i - 1] * p2 + arr[i];\n\t}\n}\nil ull Get_hash1_value(int l, int r) {\n\treturn hash1[r] - hash1[l - 1] * coe1[r - l + 1];\n}\nil ull Get_hash2_value(int l, int r) {\n\treturn hash2[r] - hash2[l - 1] * coe2[r - l + 1];\n}\nbool check(int mid) {\n\tmap<puu, int> cnt;\n\tfor (int i = 1; i + mid - 1 <= n; ++i) {\n\t\tint l = i, r = i + mid - 1;\n\t\tull res1 = Get_hash1_value(l, r), res2 = Get_hash2_value(l, r);\n\t\tcnt[puu(res1, res2)]++;\n\t}\n\tint res = 0;\n\tfor (auto iter = cnt.begin(); iter != cnt.end(); ++iter) res = max(res, iter->second);\n\treturn res >= k;\n}\nint main()\n{\n\tcoe1[0] = coe2[0] = 1;\n\tfor (int i = 1; i <= maxn; ++i)coe1[i] = coe1[i - 1] * p1, coe2[i] = coe2[i - 1] * p2;\n\tn = read_int(), k = read_int();\n\tfor (int i = 1; i <= n; ++i) arr[i] = read_int();\n\tGet_hash();\n\tint L = 1, R = n, res = 1;\n\twhile (L <= R) {\n\t\tint mid = L + R >> 1;\n\t\tif (check(mid)) res = mid, L = mid + 1;\n\t\telse R = mid - 1;\n\t}\n\toutd(res);\n\treturn 0;\n}\n```\n",
        "postTime": 1552546773,
        "uid": 106178,
        "name": "Forsaken2020",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "# \u9898\u89e3-\u725b\u5976\u6a21\u5f0f\n\n------\n\n## (\u3007)\u9898\u76ee\u63cf\u8ff0\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2852)\n\n\u7b80\u5355\u8bb2\u89e3\u4e00\u4e0b\u9898\u610f:\n\n\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u6700\u957f\u81f3\u5c11\u51fa\u73b0\u4e86 $k$ \u7684\u5b50\u4e32(\u53ef\u91cd\u53e0)\u3002\n\n\n\n## (\u4e00)\u89e3\u9898\u601d\u8def\n\n\u8fd9\u9898\u9700\u8981\u6211\u4eec\u5728\u4e00\u4e2a\u6a21\u5f0f\u4e32\u4e2d\u627e\u76f8\u540c\u7684\u5b50\u4e32\uff0c\u5f88\u5bb9\u6613\u5c31\u80fd\u60f3\u5230\u540e\u7f00\u6570\u7ec4\u3002\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u627e\u81f3\u5c11\u91cd\u590d\u51fa\u73b0 $k$ \u6b21\u7684\u5b50\u4e32\u5462?\n\n\u8003\u8651**\u4e8c\u5206\u5b50\u4e32\u7684\u957f\u5ea6**\uff0c\u770b\u770b\u7b54\u6848\u662f\u5426\u5177\u6709\u5355\u8c03\u6027\u3002\n\n\u5982\u679c\u957f\u5ea6\u4e3a $len$ \u7684\u5b50\u4e32\u51fa\u73b0\u4e86 $k$ \u6b21\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u957f\u5ea6\u5c0f\u4e8e $len$ \u7684\u5b50\u4e32\u51fa\u73b0\u4e86 $k$ \u6b21(\u8fd9\u4e9b\u5b50\u4e32\u53ef\u4ee5\u662f\u957f\u5ea6\u4e3a $len$ \u7684\u5b50\u4e32\u7684\u5b50\u4e32)\n\n\u8fd9\u6837\u9898\u76ee\u5c31\u53d8\u6210\u4e86\u5224\u5b9a\u6027\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u9700\u5224\u65ad\u662f\u5426\u6709\u957f\u5ea6\u4e3a $len$ \u5b50\u4e32\u51fa\u73b0\u6b21\u6570$\\geqslant k$\n\n\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u5982\u4f55\u5224\u65ad\u5b57\u7b26\u4e32\u4e2d\u662f\u5426\u6709\u81f3\u5c11\u91cd\u590d\u51fa\u73b0 $k$ \u6b21\u7684\u5b50\u4e32\u5462?\n\n\u8981\u627e\u91cd\u590d $k$ \u6b21\u7684\u5b50\u4e32\uff0c\u5176\u5b9e\u5c31\u662f\u627e $k$ \u4e2a\u76f8\u540c\u7684\u5b50\u4e32\u3002\u627e\u76f8\u540c\u7684\u5b50\u4e32\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u3002\u5bf9\u4e8e\u5f97\u5230\u7684 $height[~]$ \u6570\u7ec4\uff0c\u4f7f\u7528\u5206\u7ec4\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97\u6bcf\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u90fd $\\geqslant len$ \uff0c\u518d\u5224\u65ad\u662f\u5426\u6709\u4e00\u7ec4\u4e2d\u7684\u540e\u7f00\u6570\u91cf $\\geqslant k$ \u5373\u53ef\u3002\n\n\n\n## (\u4e8c)\u89e3\u9898\u65b9\u6cd5\n\n### \u505a\u6cd5:\u4e8c\u5206\u7b54\u6848+\u540e\u7f00\u6570\u7ec4\n\n#### \u65f6\u95f4\u590d\u6742\u5ea6:$\\Theta(n\\log_2{n})$\n\n\u4e8c\u5206\u7b54\u6848\u4e0d\u5fc5\u8bb2\uff0c\u6c42\u540e\u7f00\u6570\u7ec4\u548c $height[~]$ \u6570\u7ec4\u53ef\u4ee5\u53c2\u8003\u8bba\u6587\u6216\u8005[\u5b66\u4e60\u603b\u7ed3-\u540e\u7f00\u6570\u7ec4](https://www.cnblogs.com/GDOI2018/p/10292378.html)\n\n\u7136\u540e...\u5c31\u6ca1\u6709\u7136\u540e\u4e86\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000005;\nint sa[maxn], rak[maxn], sum[maxn], height[maxn];\nint key2[maxn], newRak[maxn], a[maxn];\nint N, K, M;\nbool cmp(int a, int b, int l)\n{\n    if(rak[a] != rak[b]) return false;\n    if((a+l > N) xor (b+l > N)) return false;\n    if(a+l > N and b+l > N) return true;\n    return rak[a+l] == rak[b+l];\n}\nvoid getHeight()\n{\n    int k = 0;\n    for(int i=1; i<=N; i++)\n    {\n        if(rak[i] == 1) {height[rak[i]] = 0; continue;}\n        int j = sa[rak[i]-1];\n        while(a[i+k] == a[j+k]) k++;\n        height[rak[i]] = k;\n        if(k != 0) k--;\n    }\n}\nbool ok(int x)\n{\n    int cnt = 1;\n    for(int i=2; i<=N; i++)\n    {\n        if(height[i] < x) cnt = 1;\n        else cnt++;\n        if(cnt >= K) return true;\n    }\n    return false;\n}\nint main()\n{\n    scanf(\"%d%d\",&N,&K);\n    for(int i=1; i<=N; i++) scanf(\"%d\",&a[i]);\n    M = max(1000000, N);\n    for(int i=1; i<=N; i++) sum[rak[i] = a[i]]++;\n    for(int i=1; i<=M; i++) sum[i] += sum[i-1];\n    for(int i=N; i>=1; i--) sa[sum[rak[i]]--] = i;\n    for(int l=1; l<N; l<<=1)\n    {\n        int k = 0;\n        for(int i=N-l+1; i<=N; i++) key2[++k] = i;\n        for(int i=1; i<=N; i++) if(sa[i] > l) key2[++k] = sa[i]-l;\n        for(int i=1; i<=M; i++) sum[i] = 0;\n        for(int i=1; i<=N; i++) sum[rak[i]]++;\n        for(int i=1; i<=M; i++) sum[i] += sum[i-1];\n        for(int i=N; i>=1; i--) sa[sum[rak[key2[i]]]--] = key2[i];\n        int rk = 1;\n        newRak[sa[1]] = 1;\n        for(int i=2; i<=N; i++)\n            if(cmp(sa[i], sa[i-1], l)) newRak[sa[i]] = rk;\n            else newRak[sa[i]] = ++rk;\n        for(int i=1; i<=N; i++) rak[i] = newRak[i];\n        if(rk == N) break;\n    }\n    getHeight();\n    int l = 0, r = N+1;\n    while(l+1 < r)\n    {\n        int mid = (l+r)>>1;\n        if(ok(mid)) l = mid;\n        else r = mid;\n    }\n    printf(\"%d\", l);\n    return 0;\n} \n```\n\n",
        "postTime": 1549183975,
        "uid": 76228,
        "name": "God\u306efather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "# \u725b\u5976\u6a21\u5f0f\n\u9898\u89e3\uff1a\n\n\u4e0d\u96be\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u5982\u4f55\u9a8c\u8bc1\u3002\n\n\u8fd9\u91cc\u5c31\u662f\u540e\u7f00\u6570\u7ec4\u7684\u4e00\u4e2a\u5999\u7528\u4e86\u3002\n\n\u6211\u4eec\u5bf9\u539f\u4e32\u5efa\u7acb\u540e\u7f00\u6570\u7ec4\uff0c\u89c2\u5bdf$ht$\u6570\u7ec4\u3002\n\n\u8003\u8651\u5f53\u524d\u4e8c\u5206\u51fa\u6765\u7684$mid$\u3002\u5982\u679c\u6709\u81f3\u5c11\u8fde\u7eed$k$\u7684$ht$\u503c\u90fd\u4e0d\u5c0f\n\n\u4e8e$mid$\uff0c\u90a3\u4e48$k$\u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n\u6545\u6b64\u6211\u4eec\u76f4\u63a5\u626b$ht$\u6570\u7ec4\u770b\u770b\u6700\u957f\u7684\u8fde\u7eed\u6bd4$mid$\u5927\u7684$ht$\u6709\u591a\u5c11\u4e2a\u5373\u53ef\u3002\n\nCode:\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define N 1000010 \nusing namespace std;\nint wv[N],wa[N],sa[N],Ws[N],wb[N],t[N],rk[N],ht[N],r[N];\nint n,m=1000009;\ninline char nc() {static char *p1,*p2,buf[100000]; return (p1==p2)&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;}\nint rd() {int x=0; char c=nc(); while(!isdigit(c)) c=nc(); while(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=nc(); return x;}\nvoid build_sa()\n{\n\tint i,j,p,*x=wa,*y=wb,*t;\n\tfor(i=0;i<m;i++) Ws[i]=0;\n\tfor(i=0;i<n;i++) Ws[x[i]=r[i]]++;\n\tfor(i=1;i<m;i++) Ws[i]+=Ws[i-1];\n\tfor(i=n-1;~i;i--) sa[--Ws[x[i]]]=i;\n\tfor(p=j=1;p<n;j<<=1,m=p)\n\t{\n\t\tfor(p=0,i=n-j;i<n;i++) y[p++]=i;\n\t\tfor(i=0;i<n;i++) if(sa[i]-j>=0) y[p++]=sa[i]-j;\n\t\tfor(i=0;i<n;i++) wv[i]=x[y[i]];\n\t\tfor(i=0;i<m;i++) Ws[i]=0;\n\t\tfor(i=0;i<n;i++) Ws[wv[i]]++;\n\t\tfor(i=1;i<m;i++) Ws[i]+=Ws[i-1];\n\t\tfor(i=n-1;~i;i--) sa[--Ws[wv[i]]]=y[i];\n\t\tfor(t=x,x=y,y=t,i=p=1,x[sa[0]]=0;i<n;i++)\n\t\t{\n\t\t\tif(y[sa[i]]==y[sa[i-1]]&&y[sa[i-1]+j]==y[sa[i]+j]) x[sa[i]]=p-1;\n\t\t\telse x[sa[i]]=p++;\n\t\t}\n\t}\n\tfor(i=1;i<n;i++) rk[sa[i]]=i;\n\tfor(i=p=0;i<n-1;ht[rk[i++]]=p)\n\t\tfor(p?p--:0,j=sa[rk[i]-1];r[i+p]==r[j+p];p++);\n}\ntemplate <typename T> void Max(T &x,T y) {x=max(x,y);}\n// inline void Max(int &x,int y) {x=max(x,y);}\nint check(int x)\n{\n\tint re=-1,now=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(ht[i]>=x) now++;\n\t\telse Max(re,now),now=1;\n\t}\n\tMax(re,now);\n\treturn re;\n}\nint main()\n{\n\tn=rd();int k=rd(); for(int i=0;i<n;i++) r[i]=rd();\n\tr[n++]=0; build_sa();\n\tint l=0,r=n+1;\n\twhile(l<r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)>=k) l=mid+1;\n\t\telse r=mid;\n\t}\n\tl--;\n\tcout << l << endl ;\n\treturn 0;\n}\n```\n\u63a8\u9500\u4e2a\u4ebablog [JZYshuraK](https://www.cnblogs.com/ShuraK/p/10110574.html)",
        "postTime": 1546857922,
        "uid": 58178,
        "name": "JZYshuraK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "#Brief Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u81f3\u5c11\u51fa\u73b0k\u6b21\u7684\u6700\u957f\u91cd\u590d\u5b50\u4e32\u3002\n\n\n#Algorithm Design\n\n\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u5c06\u540e\u7f00\u5206\u6210\u82e5\u5e72\u7ec4\u3002\u5224\u65ad\u6709\u6ca1\u6709\u4e00\u4e2a\u7ec4\u7684\u540e\u7f00\u4e2a\u6570\u4e0d\u5c0f\u4e8ek\u3002\u5982\u679c\u6709\uff0c\u90a3\u4e48\u5b58\u5728k\u4e2a\u76f8\u540c\u7684\u5b50\u4e32\u6ee1\u8db3\u6761\u4ef6\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u3002\u8fd9\u4e2a\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(nlgn)$.\n\n\n#Code\n```cpp\n#include <cstdio>\nconst int maxn = 20010;\nint a[maxn], sa[2][maxn], rank[2][maxn], height[maxn];\nint n, K, k, m, p, q;\nint v[1000100];\nvoid calc(int sa[maxn], int rank[maxn], int Sa[maxn], int Rank[maxn]) {\n  for (int i = 1; i <= n; i++)\n    v[rank[sa[i]]] = i;\n  for (int i = n; i >= 1; i--)\n    if (sa[i] > k)\n      Sa[v[rank[sa[i] - k]]--] = sa[i] - k;\n  for (int i = n - k + 1; i <= n; i++)\n    Sa[v[rank[i]]--] = i;\n  for (int i = 1; i <= n; i++)\n    Rank[Sa[i]] = Rank[Sa[i - 1]] + (rank[Sa[i]] != rank[Sa[i - 1]] ||\n                                     rank[Sa[i] + k] != rank[Sa[i - 1] + k]);\n}\nvoid calh(int sa[maxn], int rank[maxn]) {\n  int i, j, k = 0;\n  for (i = 1; i <= n; height[rank[i++]] = k)\n    for (k ? k-- : 0, j = sa[rank[i] - 1]; a[i + k] == a[j + k]; k++)\n      ;\n  return;\n}\nvoid da() {\n  m = 1000010, p = 0, q = 1, k = 1;\n  for (int i = 1; i <= n; i++)\n    v[a[i]]++;\n  for (int i = 1; i <= m; i++)\n    v[i] += v[i - 1];\n  for (int i = 1; i <= n; i++)\n    sa[p][v[a[i]]--] = i;\n  for (int i = 1; i <= n; i++)\n    rank[p][sa[p][i]] =\n        rank[p][sa[p][i - 1]] + (a[sa[p][i - 1]] != a[sa[p][i]]);\n  while (k < n) {\n    calc(sa[p], rank[p], sa[q], rank[q]);\n    p ^= 1;\n    q ^= 1;\n    k <<= 1;\n  }\n  calh(sa[p], rank[p]);\n}\nbool check(int x) {\n  int l = 1, r = 1;\n  for (int i = 2; i <= n + 1; i++)\n    if (height[i] >= x)\n      r++;\n    else if (r - l + 1 >= K)\n      return true;\n    else {\n      l = i;\n      r = i;\n      continue;\n    }\n  return false;\n}\nvoid solve() {\n  int l = 0, r = n;\n  while (r - l > 1) {\n    int mid = (l + r) >> 1;\n    if (check(mid))\n      l = mid;\n    else\n      r = mid;\n  }\n  printf(\"%d\\n\", check(r) ? r : l);\n}\nint main() {\n#ifndef ONLINE_JUDGE\n  freopen(\"input\", \"r\", stdin);\n#endif\n  scanf(\"%d %d\", &n, &K);\n  for (int i = 1; i <= n; i++)\n    scanf(\"%d\", &a[i]);\n  da();\n  solve();\n}\n```\n#\u5e7f\u544a\n\n\u6b22\u8fce\u8bbf\u95ee[\u6211\u7684\u535a\u5ba2](http://www.cnblogs.com/gengchen)\n",
        "postTime": 1489408962,
        "uid": 7429,
        "name": "MrMorning",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]\u725b\u5976\u6a21\u5f0fMilk Patterns\u3011"
    },
    {
        "content": "\u5047\u8bbe\u6709\u51fa\u73b0 k \u6b21\u4e14\u957f\u5ea6\u4e3a L \u7684\u6a21\u5f0f\uff0c \u90a3\u4e48\u9700\u8981\uff1a\u80fd\u591f\u628a\u67d0 k \u4e2a\u540e\u7f00\u62ff\u51fa\u6765\uff0c lcp \u8981 \u2265 L\u3002\n\n\u5728 sa \u6570\u7ec4\u4e2d\u8003\u8651\u8fd9\u4e9b\u62ff\u51fa\u6765\u7684\u540e\u7f00\uff0c \u8bb0\u4e3a $s_1,s_2,\\cdots,s_k$\uff1a\n\n\u7531\u4e8e\u5bf9\u4e8e\u4efb\u610f $s_i,s_{i+1}$\uff0c \u5176 lcp \u2265 L\uff0c \u90a3\u4e48\u5bf9\u4e8e $sa[rk[s_i] \\sim rk[s_{i+1}]]$\uff0c \u76f8\u90bb\u7684\u4e24\u4e2a\u7684 lcp \u4e5f\u662f \u2265 L \u7684\u3002\u8fdb\u4e00\u6b65\u63a8\u51fa\u5bf9\u4e8e $sa[rk[s_1] \\sim rk[s_k]]$ \u6765\u8bf4\uff0c \u76f8\u90bb\u7684\u4e24\u4e2a\u7684 lcp \u4e5f\u662f \u2265 L \u7684\u3002\n\n\u8fdb\u4e00\u6b65\u63a8\u51fa\uff0c \u5728 height \u6570\u7ec4\u4e2d\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a k-1 \u7684\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u6570\u7684\u6700\u5c0f\u503c \u2265 L\u3002\n\n\u6240\u4ee5\u53ea\u9700\u8981\u5355\u8c03\u961f\u5217\u626b\u4e00\u904d height \u6570\u7ec4\u5c31\u884c\u4e86\u3002",
        "postTime": 1609325665,
        "uid": 118498,
        "name": "xwmwr",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    },
    {
        "content": "### [\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2852)\n\n------------\n\n\u8fd9\u662f\u4e00\u9053\u5bf9\u4e8e\u521d\u5b66\u540e\u7f00\u6570\u7ec4\u7684\u9009\u624b\u6765\u8bf4\u5f88\u597d\u7684\u4e00\u9053\u7ec3\u4e60\u9898\n\n\u6211\u4eec\u5c06\u6240\u6709\u6570\u8bfb\u5165\u540e\uff0c\u6c42\u51fasa\u6570\u7ec4\u548cheight\u6570\u7ec4\n\n\u7136\u540e\u5bf9\u7ed3\u5408\u9898\u76ee\u8981\u6c42\uff0c\u6c42\u81f3\u5c11\u51fa\u73b0 k \u6b21\u7684\u6700\u957f\u5b57\u4e32\u957f\u5ea6\uff0c\u5373\u4e3a\u5bf9\u6bcf\u6bb5\u957f\u5ea6\u4e3a k-1 \u7684\u8fde\u7eedheight\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u6c42\u6700\u5927\uff0c\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u8f7b\u677e\u89e3\u51b3\n\n\u6ce8\u610f\uff0c\u8fd9\u91cc k-1 \u4e2a\u662f\u56e0\u4e3a\u6211\u4eecheight\u6570\u7ec4\u7684\u5b9a\u4e49\u4e3a\u76f8\u90bbrank\u5b57\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\n$$\n\t\\large\\text{Talk is cheap , show you the code}\n$$\n\n\n```cpp\n#include<touwenjian.h>\ntypedef long long ll;\ntypedef unsigned long long ull;\nconst int maxn=1000005;\nconst int inf=0x3f3f3f3f;\nint n,lim,sa[maxn],rk[maxn],m=maxn;\nint tax[maxn],tp[maxn],ht[maxn];\nint s[maxn];\nstruct queue\n{\n\tint id,val;\n}q[maxn];\nmultiset<int>t;//\u63a8\u8350\u4f7f\u7528stl\u7b80\u5355\u5b9e\u73b0\u5355\u8c03\u961f\u5217\n\ninline void Qsort()\n{\n\tfor(register int i=0;i<=m;++i)tax[i]=0;\n\tfor(register int i=1;i<=n;++i)++tax[rk[i]];\n\tfor(register int i=1;i<=m;++i)tax[i]+=tax[i-1];\n\tfor(register int i=n;i>=1;--i)sa[tax[rk[tp[i]]]--]=tp[i];\n}\n\ninline void suffix()\n{\n\tQsort();\n\tfor(register int w=1,p=0;p<n;m=p,w<<=1)\n\t{\n\t\tp=0;\n\t\tfor(register int i=1;i<=w;++i)tp[++p]=n-w+i;\n\t\tfor(register int i=1;i<=n;++i)if(sa[i]>w)tp[++p]=sa[i]-w;\n\t\tQsort();\n\t\tswap(tp,rk);\n\t\trk[sa[1]]=p=1;\n\t\tfor(register int i=2;i<=n;++i)rk[sa[i]]=(tp[sa[i]]==tp[sa[i-1]]&&tp[sa[i]+w]==tp[sa[i-1]+w])?p:++p;\n\t}\n}\n\nsigned main(void)\n{\n\tn=read(),lim=read();--lim;\n\tfor(register int i=1;i<=n;++i)s[i]=rk[i]=read(),tp[i]=i;\n\tsuffix();\n\tfor(register int i=1,k=0;i<=n;++i)\n\t{\n\t\tif(k)--k;\n\t\twhile(s[i+k]==s[sa[rk[i]-1]+k])++k;\n\t\tht[rk[i]]=k;\n\t}\n\tint ans=0;\n\tfor(register int i=1;i<=n;++i) \n\t{\n\t    t.insert(ht[i]);\n\t    if(i>lim)t.erase(t.find(ht[i-lim]));\n\t    if(i>=lim)ans=max(ans,*t.begin());\n  \t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1595421715,
        "uid": 224229,
        "name": "Caicz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    },
    {
        "content": "~~\u540e\u7f00\u6811\u53c8\u88ab\u8feb\u5bb3\u5566~~\n\n\u65e5\u5e38\u65e0\u4eba\u5199unkkonen\u540e\u7f00\u6811\uff0c\u6211\u6765\u8bb2\u8bb2\u3002\n\n\u5982\u679c\u4ece\u6839\u5bf9\u540e\u7f00\u6811\u8fdb\u884c\u4e00\u6b21dfs\u7684\u8bdd\n\nrank\u6570\u7ec4\u7684\u672c\u8d28\u5c31\u662f\u540e\u7f00\u6811\u4e0a\u5404\u4e2a\u540e\u7f00\u7684dfs\u5e8f\n\nSA\u6570\u7ec4\u5219\u662fdfs\u5e8f\u4e3ai\u7684\u540e\u7f00\u662f\u8c01\n\nheight\u6570\u7ec4\u7684\u672c\u8d28\u662f\u4e24\u4e2adfs\u5e8f\u76f8\u90bb\u540e\u7f00\u5728\u6811\u4e0a\u7684 LCA \u5bf9\u5e94\u7684\u5b50\u4e32\u957f\u5ea6\n\n\uff08\u540e\u7f00\u6811\u662f\u540e\u7f00trie\u7684\u865a\u6811\uff0c\u6bcf\u4e00\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u5bf9\u5e94\u4e24\u4e2a\u540e\u7f00\u7684LCA\uff09\n\n\u6240\u4ee5\u4e00\u5207\u540e\u7f00\u6570\u7ec4\u80fd\u5e72\u7684\u6d3b\u540e\u7f00\u6811\u90fd\u80fd\u5e72\uff0c\u540e\u7f00\u6811\u7684dfs\u76f8\u5f53\u4e8e\u4f60\u7528\u5355\u8c03\u6808\u626b\n\n\u8fd9\u4e2a\u9898\u5c31\u662f\u6c42\u51fa\u73b0\u81f3\u5c11K\u6b21\u7684\u6700\u957f\u5b50\u4e32\u957f\u5ea6\u3002\n\n\u9996\u5148\u628a\u540e\u7f00\u6811\u5efa\u7acb\u51fa\u6765\u3002\uff08\u8fd9\u9898\u51e0\u4e4e\u662f\u540e\u7f00\u6811\u7684\u677f\u5b50\uff09\n\n\u4e4b\u540e\u4ece\u6839\u5f00\u59cbdfs\uff0c\u6c42\u5f97\u6bcf\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5b50\u4e32\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\n\uff08\u7ed3\u675f\u4f4d\u7f6e\u5728\u8fb9\u4e0a\u7684\u5b50\u4e32\u51fa\u73b0\u6b21\u6570\u548c\u4ed6\u4e0b\u9762\u7684\u8282\u70b9\u4e00\u81f4\uff09\n\n\u5982\u679c$size[now]>=k$\uff0c\u90a3\u4e48\u5c31\u7528depth\u53bb\u66f4\u65b0ans\u5c31\u597d\u4e86\n\n\u8fd9\u4e2a\u9898$k>=2$,\u6240\u4ee5\u6211\u4eec\u53ea\u770b\u975e\u53f6\u5b50\u8282\u70b9\u5c31\u597d\u4e86\u3002\n\n~~\uff08\u5176\u5b9e\u6211\u4e0d\u592a\u4f1a\u4f7fSA\u548c\u5355\u8c03\u6808\uff09~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<map>\n#define N 210001\nusing namespace std;\nint n1,s1[N],inf=0x3f3f3f3f,k,ans;\nstruct SuffixTree{\n    int s[N],start[N],len[N],link[N],size[N],rem,tot,n,now;\n    map <int,int> ch[N];\n    inline void clear(){rem=n=0;tot=now=1;len[0]=inf;}\n    inline int newnode(int st,int le){link[++tot]=1;start[tot]=st;len[tot]=le;return tot;}\n    inline void insert(int x){\n        s[++n]=x;rem++;int last=1;\n        while(rem!=0){\n            while(rem>len[ch[now][s[n-rem+1]]])rem-=len[now=ch[now][s[n-rem+1]]];\n            int &v=ch[now][s[n-rem+1]],c=s[start[v]+rem-1];\n            if(!v||x==c){\n               link[last]=now;last=now;\n               if(!v)v=newnode(n,inf);\n               else break;\n\t\t\t}else {\n\t\t\t    int u=newnode(start[v],rem-1);\n\t\t\t    ch[u][c]=v;ch[u][x]=newnode(n,inf);\n\t\t\t    start[v]+=rem-1;len[v]-=rem-1;\n\t\t\t    link[last]=v=u;last=u;\n\t\t\t}if(now==1)rem--;else now=link[now];\n\t\t}\n\t}\n\tinline int dfs(int now,int depth){\n\t    if(depth>=inf)return size[now]=1;\n\t    map <int,int> :: iterator it;\n\t\tfor(it=ch[now].begin();it!=ch[now].end();it++)\n\t\t    size[now]+=dfs(it->second,depth+len[it->second]);\n\t\tif(size[now]>=k)ans=max(ans,depth); \n\t\treturn size[now];\n\t}\n}t;\nint main()\n{\n\tt.clear();\n\tscanf(\"%d%d\",&n1,&k);\n\tfor(int i=1;i<=n1;i++)scanf(\"%d\",&s1[i]);\n\tfor(int i=1;i<=n1;i++)t.insert(s1[i]);\n\tt.insert(26);\n\tt.dfs(1,0);cout<<ans<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1588839014,
        "uid": 31294,
        "name": "\u529f\u5728\u4e0d\u820d",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2852 \u3010[USACO06DEC]Milk Patterns G\u3011"
    }
]