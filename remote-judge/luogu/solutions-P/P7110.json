[
    {
        "content": "##  P7110 \u3010\u665a\u79cb\u7edd\u8bd7\u3011\n\n\u5148\u819c\u4e00\u53d1 sooke\u3002\n\n\u5728\u6708\u8d5b\u7684\u65f6\u5019\u6211\u8df3\u8fc7\u4e86 T4\uff0c\u76f4\u63a5\u6765\u5f00\u8fd9\u9053\u9898\uff0c\u7ed3\u679c\u662f\u56e0\u4e3a\u5404\u79cd\u6d6a\u8d39\u65f6\u95f4/\u8bc4\u6d4b\u673a\u7f62\u5de5\u5bfc\u81f4\u6211\u6700\u540e\u6ca1\u80fd AC\uff08\u6700\u540e\u53ea\u6709 jiangly \u4e00\u4e2a\u4eba\u8fc7\u4e86\uff09\u3002\n\n\u5728\u8d5b\u540e\u6211\u542c\u4e86 sooke \u7684\u8bb2\u8bc4\uff0c\u5e76\u5bf9\u6211\u7684\u505a\u6cd5\u8fdb\u884c\u4e86\u4e00\u70b9\u4f18\u5316\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u4f60\u4eec\u6240\u770b\u5230\u7684\u8fd9\u7bc7\u9898\u89e3\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u7814\u7a76\u4e00\u4e0b\u4ec0\u4e48\u6837\u7684\u70b9\u662f\u53ef\u4ee5\u88ab\u6d4b\u51fa\u9ad8\u5ea6\u7684\u3002\n\n\u5728\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5b83\u663e\u7136\u53ef\u4ee5\u88ab\u6d4b\u51fa\u3002\u5982\u679c\u662f\u672a\u77e5\u7684\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u4f9d\u9760\u4e00\u4e9b\u65d7\u5b50\u7684\u4fe1\u606f\u3002\n\n\u5f15\u7406\uff1a\u5bf9\u4e8e\u82e5\u5e72\u5ea7\u8fde\u7740\u63d2\u65d7\u7684\u5c71\uff0c\u4ee5\u53ca\u4e0e\u8fd9\u51e0\u5ea7\u5c71\u76f8\u90bb\u7684\u672a\u63d2\u65d7\u7684\u4e24\u5ea7\u5c71\uff0c\u53ea\u8981\u5b83\u4eec\u4e2d\u6709\u4e24\u5ea7\u5c71\u80fd\u88ab\u6d4b\u51fa\uff0c\u5219\u8fd9\u4e9b\u5c71\u5168\u90e8\u80fd\u88ab\u6d4b\u51fa\u3002\n\n\u6bd4\u5982\u8fd9\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hpt3bicg.png)\n\n\u76ee\u524d $x_2,x_5$ \u5df2\u77e5\uff0c\u5e76\u4e14 $x_2$ \u5230 $x_6$ \u90fd\u63d2\u7740\u65d7\uff0c\u5219\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u63a8\u51fa $x_1$ \u5230 $x_7$ \u4e2d\u7684\u6240\u6709\u6570\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5217\u51fa\u4e24\u4e2a\u5f0f\u5b50\uff1a\n\n$$x_2+x_4=2\\times x_3$$\n$$x_3+x_5=2\\times x_4$$\n\n\u5176\u4e2d $x_2,x_5$ \u5df2\u77e5\u3002\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u7ec4\uff0c\u5e76\u4e14\u662f\u53ef\u4ee5\u89e3\u7684\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u786e\u5b9a\u4e86\u4e2d\u95f4\u7684\u6240\u6709\u6570\u3002\n\n\u7136\u540e\u6211\u4eec\u6839\u636e $x_3-x_2=x_2-x_1$ \u53ef\u4ee5\u63a8\u51fa $x_1$\uff0c\u540c\u7406\u63a8\u51fa $x_6,x_7$\uff0c\u56e0\u6b64\u8bc1\u660e\u4e86\u53ef\u884c\u6027\u3002\n\n\u4f46\u6709\u4eba\u4f1a\u95ee\uff0c\u5982\u679c\u4e2d\u95f4\u4e0d\u662f\u4e24\u4e2a\uff0c\u800c\u662f\u4e09\u4e2a\uff0c\u56db\u4e2a\u2026\u2026\u80fd\u89e3\u5417\uff1f\n\n\u7b54\u6848\u662f\u53ef\u4ee5\u3002\u56e0\u4e3a\u4e00\u5143\u65b9\u7a0b\u7684\u6570\u91cf\u6bd4\u4e0e\u672a\u77e5\u6570\u76f8\u540c\uff0c\u5e76\u4e14\u6ca1\u6709\u6784\u6210\u5faa\u73af\u4e4b\u7c7b\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u65b9\u7a0b\u5c31\u662f\u6709\u89e3\u7684\u3002\n\n\u5e26\u7740\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u7ee7\u7eed\u601d\u8003\u3002\n\n\u6211\u4eec\u79f0\u76f8\u90bb\u7684\u4e24\u4e2a**\u4e0d\u63d2\u65d7**\u7684\u8282\u70b9\u4e0e\u4e2d\u95f4\u7684\u82e5\u5e72\u4e2a\u63d2\u65d7\u7684\u8282\u70b9\u4e3a\u4e00\u4e2a\u6bb5\uff0c\u5176\u4e2d\u8fd9\u4e24\u4e2a\u672a\u63d2\u65d7\u7684\u70b9\u6211\u4eec\u79f0\u4e3a\u7aef\u70b9\u3002\n\n\u521a\u624d\u6211\u4eec\u8bf4\u660e\u4e86\uff0c\u5728\u4e00\u4e2a\u6bb5\u4e2d\uff0c\u77e5\u4e8c\u6c42\u5168\u3002\u4f46\u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u5df2\u77e5\u7684\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u4e00\u5b9a\u662f\u4ece\u672c\u6bb5\u4e2d\u51fa\u6765\u7684\uff0c\u53ef\u80fd\u662f\u7531\u8fb9\u4e0a\u7684\u6bb5\u4f20\u9012\u8fc7\u6765\u7684\u3002\n\n\u6bd4\u5982\u6211\u4eec\u5df2\u77e5 $x_1,x_4,x_5$\uff0c\u7136\u540e\u53c8\u77e5\u9053 $2,4$ \u4e24\u70b9\u63d2\u65d7\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 $x_4,x_5$ \u6c42\u51fa $x_3$\uff0c\u7136\u540e\u901a\u8fc7 $x_1,x_3$ \u6c42\u51fa $x_2$\u3002\n\n\u4e8e\u662f\u8fd9\u4e2a\u9898\u5c31\u53d8\u5f97\u590d\u6742\u4e86\u8d77\u6765\u3002\u6211\u5728\u6bd4\u8d5b\u7684\u65f6\u5019\u4e5f\u5c31\u662f\u56e0\u4e3a\u8fd9\u91cc\u7684\u5904\u7406\u4e00\u76f4\u6ca1\u6709\u8c03\u51fa\u6765\u3002\n\n\u4f46\u968f\u540e\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4f20\u8fdb\u6765\u7684\u503c\uff0c\u4e00\u5b9a\u662f\u51fa\u73b0\u5728\u6bb5\u7684\u7aef\u70b9\u5904\u7684\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u6bb5\uff0c\u6211\u4eec\u5b83\u53ef\u80fd\u5b58\u5728\u56db\u79cd\u60c5\u51b5\uff1a\n\n1. \u6709\u4e24\u4e2a\u53ca\u66f4\u591a\u7684\u5df2\u77e5\u70b9\uff1b\n\n2. \u6709\u4e00\u4e2a\u5df2\u77e5\u70b9\u4e14\u5df2\u77e5\u70b9\u5728\u7aef\u70b9\uff08\u4e0d\u63d2\u65d7\uff09\uff1b\n\n3. \u6709\u4e00\u4e2a\u5df2\u77e5\u70b9\u4e14\u5df2\u77e5\u70b9\u4e0d\u662f\u7aef\u70b9\uff08\u63d2\u65d7\uff09\uff1b\n\n4. \u6ca1\u6709\u5df2\u77e5\u70b9\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u7684\u5b50\u6bb5\u4e0a\u7684\u70b9\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u786e\u5b9a\u5b83\u662f\u53ef\u4ee5\u6c42\u51fa\u3002\u540c\u65f6\uff0c\u5b83\u8fd8\u53ef\u4ee5\u4e3a\u4e24\u8fb9\u7684\u5b50\u6bb5\u63d0\u4f9b\u5df2\u77e5\u70b9\uff0c\u5c31\u597d\u50cf\u4e00\u4e2a\u4fe1\u53f7\u53d1\u5c04\u5668\u3002\n\n\u5bf9\u4e8e\u7b2c\u56db\u7c7b\u7684\u5b50\u6bb5\u4e0a\u7684\u70b9\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u4e24\u8fb9\u90fd\u6536\u5230\u4e00\u4e2a\u5df2\u77e5\u70b9\u80fd\u786e\u5b9a\u5176\u4e0a\u9762\u7684\u6240\u6709\u503c\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u8fb9\u63d0\u4f9b\u7684\u5df2\u77e5\u70b9\uff0c\u5b83\u90fd\u4e0d\u53ef\u4ee5\u5c06\u5b83\u4f20\u9012\u5230\u5176\u4ed6\u53e6\u4e00\u7aef\uff08\u56e0\u4e3a\u6c42\u4e0d\u51fa\u53e6\u4e00\u7aef\u7684\u503c\uff09\uff0c\u5c31\u597d\u50cf\u4e00\u4e2a\u4fe1\u53f7\u963b\u9694\u5668\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e09\u7c7b\u7684\u5b50\u6bb5\u4e0a\u7684\u70b9\uff0c\u53ea\u8981\u5de6\u53f3\u4efb\u610f\u4e00\u4e2a\u7aef\u70b9\u7ed9\u51fa\u4e00\u4e2a\u5df2\u77e5\u70b9\uff0c\u6211\u4eec\u5c31\u80fd\u786e\u5b9a\u5176\u4e0a\u9762\u7684\u6240\u6709\u503c\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u7aef\u7ed9\u51fa\u7684\u5df2\u77e5\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u4fe1\u606f\u6c42\u51fa\u53e6\u4e00\u7aef\u7684\u503c\uff0c\u4ece\u800c\u4e3a\u53e6\u4e00\u7aef\u63d0\u4f9b\u5df2\u77e5\u70b9\uff0c\u5c31\u597d\u50cf\u4e00\u4e2a\u4fe1\u53f7\u4f20\u9012\u5668\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u5b50\u6bb5\u4e0a\u7684\u70b9\uff0c\u5df2\u7ecf\u6709\u4e00\u4e2a\u7aef\u70b9\u662f\u5df2\u77e5\u70b9\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u5982\u679c\u60f3\u8981\u6c42\u51fa\u5b83\u4e0a\u9762\u7684\u70b9\uff0c\u6211\u4eec\u5c31\u9700\u8981\u518d\u6765\u4e00\u4e2a\u5df2\u77e5\u70b9\uff0c\u800c\u8fd9\u4e2a\u5df2\u77e5\u70b9\u5c31\u53ea\u80fd\u662f\u53e6\u4e00\u4e2a\u7aef\u70b9\u3002\u76f8\u5f53\u4e8e\u6211\u4eec\u9700\u8981\u4ece\u53e6\u4e00\u4e2a\u7aef\u70b9\u6536\u5230\u4e00\u4e2a\u5df2\u77e5\u70b9\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5355\u5411\u7684\u4fe1\u53f7\u53d1\u5c04\u5668\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6240\u6709\u7684\u6bb5\u3002\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a $set$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u6211\u4eec\u6c42\u51fa\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u6bb5\uff08\u6ce8\u610f\u53ef\u80fd\u540c\u65f6\u5728\u4e24\u4e2a\u6bb5\uff09\uff0c\u7136\u540e\u5206\u522b\u91cd\u65b0\u6c42\u4e00\u6b21\u5176\u7c7b\u578b\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u6211\u4eec\u627e\u5230\u5176\u5bf9\u5e94\u7684\u6bb5\uff0c\u7136\u540e\u5c06\u6bb5\u5bf9\u5e94\u5408\u5e76/\u5206\u88c2\u5e76\u6c42\u51fa\u5176\u7c7b\u578b\u5373\u53ef\u3002\n\n\u7136\u540e\u95ee\u9898\u5c31\u662f\u64cd\u4f5c $3$\uff0c\u6211\u4eec\u5982\u4f55\u5224\u65ad\u662f\u5426\u53ef\u884c\u3002\n\n\u8981\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5b83\u5de6\u53f3\u7684\u6bb5\u80fd\u5426\u4e3a\u5176\u63d0\u4f9b\u5df2\u77e5\u70b9\u3002\n\n\u5bf9\u4e8e\u5de6\u53f3\u662f\u7b2c $1,2,4$ \u79cd\u6bb5\u7684\u60c5\u51b5\uff0c\u975e\u5e38\u65b9\u4fbf\u3002\u4f46\u95ee\u9898\u662f\u5b58\u5728 $3$ \u8fd9\u6837\u7684\u6bb5\uff0c\u9700\u8981\u7ee7\u7eed\u904d\u5386\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u590d\u6742\u5ea6\u7684\u589e\u9ad8\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u518d\u4f7f\u7528\u4e00\u4e2a $set$ \u6765\u8fdb\u884c\u7ef4\u62a4\u3002\u5bf9\u4e8e\u80fd\u63d0\u4f9b\u5df2\u77e5\u70b9\u7684\u70b9\uff0c\u6211\u4eec\u5728 $set$ \u7684\u5bf9\u5e94\u4f4d\u7f6e\u63d2\u5165 $1$\uff0c\u80fd\u963b\u9694\u5df2\u77e5\u70b9\u4f20\u9012\u7684\u70b9\uff0c\u6211\u4eec\u5219\u63d2\u5165 $0$\u3002\n\n\u5bf9\u4e8e $3$ \u7c7b\u6bb5\u8fd9\u79cd\u4ec5\u4f9b\u4f20\u9012\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u4e0d\u7ba1\u3002\n\n\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2 $set$ \u4e2d\u5de6\u53f3\u6700\u8fd1\u7684\u70b9\u662f $1$ \u8fd8\u662f $0$ \u5c31\u597d\u4e86\u3002\n\n\uff08\u8fd9\u4e2a\u8df3\u8fc7\u7b2c\u4e09\u7c7b\u6bb5\u7684\u65b9\u6cd5\u662f sooke \u795e\u4ed9\u7684\u9898\u89e3\u4e2d\u63d0\u5230\u7684\uff0c\u6bd4\u6211\u5f53\u65f6\u5199\u7684\u4e1c\u897f\u7b80\u5355\u8bb8\u591a\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u6211\u5f53\u65f6\u7684\u5199\u6cd5\u5c31\u4e0d\u8bb2\u4e86\uff09\n\n\u7136\u540e\u5c31\u662f\u4e00\u4e9b\u7ec6\u8282\u6027\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u5de6\u53f3\u63d2\u5165\u9632\u8d8a\u754c\u7684\u6bb5\u4e91\u4e91\u3002\u56e0\u4e3a\u5927\u90e8\u5206\u90fd\u662f\u4ee5 $STL$ \u4e3a\u4e3b\uff0c\u6240\u4ee5\u7ec6\u8282\u633a\u591a\u7684\uff0c\u4e0d\u4ed4\u7ec6\u5c31\u5bb9\u6613\u9519\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define lb(o) lower_bound({o,-1})\nusing namespace std;\ninline int read(){\n\tregister int x=0;\n\tregister bool f=0;\n\tregister char ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') f=1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=x*10+ch-48;\n\t\tch=getchar();\n\t}\n\treturn f?-x:x;\n} \nchar str[300];int kkk;\ninline void print(register int x,register char k='\\n'){\n\tif(!x) putchar('0');\n\tif(x<0) putchar('-'),x=-x;\n\twhile(x){\n\t\tstr[++kkk]=x%10+48;\n\t\tx/=10;\n\t}\n\twhile(kkk){\n\t\tputchar(str[kkk--]);\n\t}\n\tputchar(k); \n}\nbool a[500100],b[500100];\nint n,m,s[500100<<2];\nvoid change(int o,int l,int r,int q){\n    if(l==r){\n        s[o]=a[l];\n        return;\n    }\n    int mid=l+r>>1;\n    if(q<=mid) change(o<<1,l,mid,q);\n    else change(o<<1|1,mid+1,r,q);\n    s[o]=s[o<<1]+s[o<<1|1];\n}\nint query(int o,int l,int r,int ql,int qr){\n\tif(ql==0||qr==n+1){\n\t\treturn 0;\n\t}\n\tif(ql<=l&&r<=qr){\n\t\treturn s[o];\n\t}\n\tint mid=l+r>>1;int ans=0;\n\tif(ql<=mid) ans+=query(o<<1,l,mid,ql,qr);\n\tif(qr>mid) ans+=query(o<<1|1,mid+1,r,ql,qr);\n\treturn ans;\n}\nstruct node{\n\tint l,r,c;\n\tfriend bool operator <(node a,node b){\n\t\treturn a.l==b.l?a.r<b.r:a.l<b.l;\n\t}\n}tmp;\nstruct pos{\n\tint o,v;\n\tfriend bool operator <(pos a,pos b){\n\t\treturn a.o==b.o?a.v<b.v:a.o<b.o;\n\t}\n}t;\nset<node> st;\nset<pos> val;\nset<node>::iterator it;\nset<pos>::iterator it2;\nvoid ins(node p){\n\tint l=p.l,r=p.r;\n\tint v=query(1,0,n+1,l,r);\n\tif(v>=2){\n\t\tp.c=1;t.v=1;\n\t\tst.insert(p);\n\t\tt.o=l*2+1;\n\t\tval.insert(t);\n\t\tt.o=r*2;\n\t\tval.insert(t);\n\t}\n\tif(v==0){\n\t\tp.c=4;t.v=0;\n\t\tst.insert(p);\n\t\tt.o=l*2+1;\n\t\tval.insert(t);\n\t\tt.o=r*2;\n\t\tval.insert(t);\n\t}\n\tif(v==1){\n\t\tif(!a[l]&&!a[r]){\n\t\t\tp.c=3;\n\t\t\tst.insert(p);\n\t\t}\n\t\telse{\n\t\t\tp.c=2;\n\t\t\tst.insert(p);\n\t\t\tt.o=l*2+1;t.v=a[l];\n\t\t\tval.insert(t);\n\t\t\tt.o=r*2;t.v=a[r];\n\t\t\tval.insert(t);\n\t\t}\n\t}\n}\nvoid del(node p){\n\tst.erase(p);\n\tif(p.c!=3){\n\t\tit2=val.lb(p.l*2+1);\n\t\tval.erase(it2);\n\t\tit2=val.lb(p.r*2);\n\t\tval.erase(it2);\n\t}\n}\nbool get(node p){\n\tif(p.c==1) return 1;\n\tif(p.c==2){\n\t\tif(a[p.l]){\n\t\t\tit2=val.lb(p.r*2+1);\n\t\t\treturn it2->v;\n\t\t}\n\t\telse{\n\t\t\tit2=val.lb(p.l*2+1);it2--;\n\t\t\treturn it2->v;\n\t\t}\n\t}\n\tif(p.c==3){\n\t\tit2=val.lb(p.r*2+1);t=*it2;\n\t\tit2=val.lb(p.l*2+1);it2--;\n\t\treturn it2->v|t.v;\n\t}\n\tif(p.c==4){\n\t\tit2=val.lb(p.r*2+1);t=*it2;\n\t\tit2=val.lb(p.l*2+1);it2--;\n\t\treturn it2->v&t.v;\n\t}\n}\nvoid change(int o){\n\ta[o]^=1;\n\tchange(1,0,n+1,o);\n\tif(b[o]){\n\t\ttmp.l=o;tmp.r=0;\n\t\tit=st.upper_bound(tmp);it--;\n\t\ttmp=*it;\n\t\tdel(tmp);\n\t\tins(tmp);\n\t}\n\telse{\n\t\ttmp.l=o;tmp.r=0;\n\t\tit=st.lower_bound(tmp);\n\t\ttmp=*it;\n\t\tit--;\n\t\tnode tmp2=*it;\n\t\tdel(tmp2);ins(tmp2);\n\t\tdel(tmp);ins(tmp);\n\t}\n}\nvoid update(int o){\n\tif(b[o]){\n\t\tb[o]=0;tmp.l=o,tmp.r=0;\n\t\tit=st.upper_bound(tmp);it--;\n\t\ttmp=*it;del(tmp);\n\t\tnode tmp2;tmp2.l=tmp.l;\n\t\ttmp2.r=tmp.l=o;\n\t\tins(tmp2);ins(tmp);\n\t}\n\telse{\n\t\tb[o]=1;tmp.l=o,tmp.r=0;\n\t\tit=st.lower_bound(tmp);tmp=*it;\n\t\tit--;node tmp2=*it;\n\t\tdel(tmp2);del(tmp);\n\t\ttmp.l=tmp2.l;\n\t\tins(tmp);\n\t}\n}\nvoid query(int o){\n\tif(a[o]){\n\t\tprint(1);\n\t\treturn;\n\t}\n\tif(b[o]){\n\t\ttmp.l=o;tmp.r=0;\n\t\tit=st.upper_bound(tmp);\n\t\tit--;tmp=*it;\n\t\tprint(get(tmp));\n\t}\n\telse{\n\t\ttmp.l=o;tmp.r=0;\n\t\tit=st.lower_bound(tmp);\n\t\ttmp=*it;it--;\n\t\tprint(get(tmp)|get(*it));\n\t}\n}\nsigned main(){\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout); \n\tn=read();m=read();\n\tfor(int i=0;i<=n;i++){\n\t\ttmp.l=i;tmp.r=i+1;tmp.c=4;\n\t\tst.insert(tmp);\n\t\tt.o=i*2+1;t.v=0;\n\t\tval.insert(t);\n\t\tt.o=(i+1)*2;\n\t\tval.insert(t);\n\t}\n\tst.insert(tmp);\n\ttmp.l=n;tmp.r=n+1;tmp.c=4;\n\tst.insert(tmp);int cnt;\n\tfor(int i=1;i<=m;i++){\n\t\tint opt=read();\n\t\tif(opt==1){\n\t\t\tchange(read());\n\t\t}\n\t\tif(opt==2){\n\t\t\tupdate(read());\n\t\t}\n\t\tif(opt==3){\n\t\t\tquery(read());\n\t\t}\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1606834987,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P7110 \u3010\u665a\u79cb\u7edd\u8bd7\u3011"
    },
    {
        "content": "~~\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u6c42\u8fc7\u3002~~    \n[\u9898\u76ee\u5728\u8fd9\u91cc\u3002](https://www.luogu.com.cn/problem/P7110) \n### \u601d\u8def\n\u819c\u62dc @BFqwq \u5927\u4f6c\uff0c\u601d\u8def\u6765\u6e90\u4e8e\u4ed6\u7684\u9898\u89e3\u3002   \n\n\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a**\u6bb5**\u4e3a**\u4e00\u4e2a\u5de6\u53f3\u7aef\u70b9\u7686\u4e0d\u63d2\u65d7\u7684\u533a\u95f4**\u3002\u663e\u7136\uff0c\u5728\u4e00\u4e2a\u6bb5\u91cc\u53ea\u9700\u8981\u77e5\u9053\u4efb\u610f\u4e24\u5ea7\u5c71\u5cf0\u7684\u9ad8\u5ea6\uff0c\u5c31\u80fd\u77e5\u9053\u5728\u8fd9\u4e2a\u6bb5\u91cc\u6240\u6709\u5c71\u5cf0\u7684\u9ad8\u5ea6\uff08\u624b\u73a9\u4e00\u73a9\u5c31\u61c2\u4e86\u3002\n\n\u56e0\u4e3a\u76f8\u90bb\u7684\u4e24\u4e2a\u6bb5\u7684\u7aef\u70b9\u662f\u91cd\u5408\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4e00\u4e2a\u6bb5\u5df2\u77e5\uff08\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u5df2\u77e5\u5c71\u5cf0\uff09\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4e3a\u76f8\u90bb\u7684\u4e24\u4e2a\u6bb5\u5206\u522b\u63d0\u4f9b\u4e00\u4e2a\u5df2\u77e5\u5c71\u5cf0\u3002\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u6bb5\u5206\u6210\u56db\u7c7b\uff1a  \n\n1. \u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u5df2\u77e5\u5c71\u5cf0\uff08\u53ef\u4e3a\u5de6\u53f3\u6bb5\u63d0\u4f9b\u5df2\u77e5\u5c71\u5cf0\uff09\u3002  \n2. \u6709\u4e00\u4e2a\u5df2\u77e5\u5c71\u5cf0\u4e14\u5728\u7aef\u70b9\u5904\uff08\u4e0d\u80fd\u4e3a\u76f8\u90bb\u6bb5\u63d0\u4f9b\u5df2\u77e5\u5c71\u5cf0 \u4e14 \u53ea\u6709\u4e0e\u4e0d\u5df2\u77e5\u7aef\u70b9\u76f8\u90bb\u7684\u6bb5\u80fd\u4e3a\u4e4b\u63d0\u4f9b\u5df2\u77e5\u5c71\u5cf0\uff09\u3002  \n3. \u6709\u4e00\u4e2a\u5df2\u77e5\u5c71\u5cf0\u4e14\u4e0d\u5728\u7aef\u70b9\u5904\uff08\u5f53\u76f8\u90bb\u6bb5\u4e2d\u6709\u4e00\u4e2a\u5df2\u77e5\u65f6\u53ef\u4e3a\u53e6\u4e00\u4e2a\u76f8\u90bb\u6bb5\u63d0\u4f9b\u5df2\u77e5\u5c71\u5cf0\uff08\u4ec5\u8d77\u4f20\u9012\u4f5c\u7528\uff09\uff09\u3002  \n4. \u65e0\u5df2\u77e5\u5c71\u5cf0\uff08\u53ea\u6709\u5de6\u53f3\u4e24\u6bb5\u90fd\u4e3a\u5176\u63d0\u4f9b\u5df2\u77e5\u7aef\u70b9\u65f6\u624d\u5df2\u77e5\uff09\u3002\n\n\uff08**\u80fd\u4e3a\u5de6\u53f3\u4e24\u6bb5\u63d0\u4f9b\u5df2\u77e5\u7aef\u70b9** \u548c **\u5df2\u77e5** \u5176\u5b9e\u662f\u4e00\u6837\u7684\u3002\uff09\n\n\u6709\u4e86\u4ee5\u4e0a\u7684\u5206\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u6240\u6709\u7684\u6bb5\u3002  \n\u5bf9\u4e8e\u67e5\u8be2\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u8be2\u5176\u76f8\u5e94\u7684\u6bb5\u662f\u5426\u5df2\u77e5\u6216\u80fd\u5426\u7531\u76f8\u90bb\u7684\u6bb5\u63a8\u51fa\u5373\u53ef\u3002  \n\uff08\u7531\u4e8e\u849f\u84bb\u592a\u84bb\u4e86\u4e0d\u4f1a\u7528 set \u6240\u4ee5\u5c31\u7528\u4e86\u624b\u5199\u7684\u8fd8\u53ea\u662f\u4e00\u4e2a avl\u3002\uff09\n\n\u78b0\u5230\u7b2c 3 \u7c7b\u7684\u6bb5\uff0c\u6211\u4eec\u5728\u5e73\u8861\u6811\u4e2d\u7684 findnext \u4e0e findlast \u51fd\u6570\u8c03\u7528\u65f6\u52a0\u4e00\u4e2a\u6807\u8bb0\uff0c\u5982\u679c\u6709\uff0c\u6211\u4eec\u78b0\u5230\u7b2c 3 \u7c7b\u7684\u6bb5\u5c31\u8df3\u8fc7\u3002  \n```cpp\nDuan *findla(Duan *nd,int l,int r,Duan *ans,bool k3){\n    if(nd==NULL) return ans;//               \u5c31\u662f\u8fd9\u4e2a\n    if(nd->r<=l){\n        if(k3?nd->typ!=3:1){\n            if(ans==NULL) ans=nd;\n            else if(nd->l>=ans->r) ans=nd;\n        }\n        if(k3&&nd->typ==3){\n            ans=findla(nd->lc,l,r,ans,k3);\n        }\n        ans=findla(nd->rc,l,r,ans,k3);\n    } else{\n        ans=findla(nd->lc,l,r,ans,k3);\n    }\n    return ans;\n}\n```\n\u867d\u7136\u8bf4\u8fd9\u6837\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u5230 $O(n^2)$ ~~\u4f46\u662f\u6d1b\u8c37\u6570\u636e\u5b9e\u5728\u662f\u592a\u5f31\u4e86\u3002~~  \n\u7136\u540e\u628a\u5e73\u8861\u6811\u7684\u677f\u5b50\u6539\u4e00\u6539\u5c31\u53ef\u4ee5\u8fc7\u5566\u3002~~\u4e0d\u4f1a\u51fa\u95e8\u5de6\u8f6c [P3369](https://www.luogu.com.cn/problem/P3369)\u3002~~   \n(\u6ce8\u610f\u5982\u679c\u4e00\u5ea7\u5c71\u5cf0\u5728\u7aef\u70b9\u5904\u8981\u628a\u4ed6\u5728\u5de6\u53f3\u4e24\u7aef\u7684\u60c5\u51b5\u90fd\u8003\u8651\u8fdb\u53bb\u3002)\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn=5e5+5;\nbool fog[maxn],flag[maxn];//\u6709\u96fe/\u65d7\n\nstruct Duan{\n    int l,r,cnt,typ;//\u5de6\u53f3\u7aef\u70b9\u3001\u53ef\u4ee5\u76f4\u63a5\u770b\u5230\u7684\u5c71\u5cf0\u6570\u3001\u7b2c\u51e0\u7c7b\u6bb5\n    int ht;\n    Duan *lc,*rc;\n}*root;\n\nint getht(Duan *nd){//\u5b50\u6811\u9ad8\n    return nd!=NULL?nd->ht:0;\n}\n\nint getbf(Duan *nd){//\u5e73\u8861\u56e0\u5b50\n    return getht(nd->lc)-getht(nd->rc);\n}\n\nvoid upd(Duan *nd){\n    nd->ht=max(getht(nd->lc),getht(nd->rc))+1;\n}\n\nDuan *rtr(Duan *nd){//\u53f3\u65cb\n    Duan *tmp=nd->lc;\n    nd->lc=tmp->rc;\n    tmp->rc=nd;\n    upd(nd),upd(tmp);\n    return tmp;\n}\n\nDuan *rtl(Duan *nd){//\u5de6\u65cb\n    Duan *tmp=nd->rc;\n    nd->rc=tmp->lc;\n    tmp->lc=nd;\n    upd(nd),upd(tmp);\n    return tmp;\n}\n\nvoid caltype(Duan *nd){//\u7b97\u7b2c\u51e0\u7c7b\u6bb5\n    if(nd->cnt>=2) nd->typ=1;\n    else if(!fog[nd->l]||!fog[nd->r]) nd->typ=2;\n    else if(nd->cnt==1) nd->typ=3;\n    else nd->typ=4;\n}\n\nDuan *insert(Duan *nd,int l,int r,int cnt){//\u63d2\u5165\n    if(!nd){\n        nd=new Duan;\n        nd->l=l;\n        nd->r=r;\n        nd->ht=1;\n        nd->cnt=cnt;\n        nd->lc=nd->rc=NULL;\n        caltype(nd);\n    } else if(r<=nd->l){\n        nd->lc=insert(nd->lc,l,r,cnt);\n        upd(nd);\n        if(getbf(nd)>1){\n            if(getbf(nd->lc)<0) nd->lc=rtl(nd->lc);\n            nd=rtr(nd);\n        }\n    } else if(l>=nd->r){\n        nd->rc=insert(nd->rc,l,r,cnt);\n        upd(nd);\n        if(getbf(nd)<-1){\n            if(getbf(nd->rc)>0) nd->rc=rtr(nd->rc);\n            nd=rtl(nd);\n        }\n    }\n    return nd;\n}\n\nvoid ist(int l,int r,int cnt){\n    root=insert(root,l,r,cnt);\n    upd(root);\n}\n\nDuan *mdelete(Duan *nd,int l,int r){//\u5220\u9664\n    if(l==nd->l&&r==nd->r){\n        Duan *tmp;\n        if(nd->lc!=NULL&&nd->rc!=NULL){\n            tmp=nd->rc;\n            while(tmp->lc) tmp=tmp->lc;\n            nd->cnt=tmp->cnt;\n            nd->l=tmp->l;\n            nd->r=tmp->r;\n            nd->typ=tmp->typ;\n            nd->rc=mdelete(nd->rc,tmp->l,tmp->r);\n            upd(nd);\n            if(getbf(nd)>1){\n                if(getbf(nd->lc)<0) nd->lc=rtl(nd->lc);\n                nd=rtr(nd);\n            }\n        } else{\n            if(nd->lc!=NULL) tmp=nd->lc;\n            else if (nd->rc!=NULL) tmp=nd->rc;\n            else tmp=NULL;\n            delete nd;\n            nd=tmp;\n        }\n    } else if(l>=nd->r){\n        nd->rc=mdelete(nd->rc,l,r);\n        upd(nd);\n        if(getbf(nd)>1){\n            if(getbf(nd->lc)<0) nd->lc=rtl(nd->lc);\n            nd=rtr(nd);\n        }\n    } else{\n        nd->lc=mdelete(nd->lc,l,r);\n        upd(nd);\n        if(getbf(nd)<-1){\n            if(getbf(nd->rc)>0) nd->rc=rtr(nd->rc);\n            nd=rtl(nd);\n        }\n    }\n    return nd;\n}\n\nvoid del(int l,int r){\n    root=mdelete(root,l,r);\n    if(root!=NULL) upd(root);\n}\n\nDuan *findla(Duan *nd,int l,int r,Duan *ans,bool k3){//\u627e\u4e0a\u4e00\u4e2a\u6bb5\n    if(nd==NULL) return ans;\n    if(nd->r<=l){\n        if(k3?nd->typ!=3:1){\n            if(ans==NULL) ans=nd;\n            else if(nd->l>=ans->r) ans=nd;\n        }\n        if(k3&&nd->typ==3){\n            ans=findla(nd->lc,l,r,ans,k3);\n        }\n        ans=findla(nd->rc,l,r,ans,k3);\n    } else{\n        ans=findla(nd->lc,l,r,ans,k3);\n    }\n    return ans;\n}\n\nDuan *findne(Duan *nd,int l,int r,Duan *ans,bool k3){//\u627e\u4e0b\u4e00\u4e2a\u6bb5\n    if(nd==NULL) return ans;\n    if(nd->l>=r){\n        if(k3?nd->typ!=3:1){\n            if(ans==NULL) ans=nd;\n            else if(nd->r<=ans->l) ans=nd;\n        }\n        if(k3&&nd->typ==3){\n            ans=findne(nd->rc,l,r,ans,k3);\n        }\n        ans=findne(nd->lc,l,r,ans,k3);\n    } else{\n        ans=findne(nd->rc,l,r,ans,k3);\n    }\n    return ans;\n}\n\nDuan *findd(Duan *nd,int x){//\u627e\u4e00\u5ea7\u5c71\u5cf0\u6240\u5728\u7684\u6bb5\n    if(nd->l<=x&&x<=nd->r) return nd;\n    if(x<nd->l) return findd(nd->lc,x);\n    return findd(nd->rc,x);\n}\n\nvoid op1(int x){\n    fog[x]=!fog[x];\n    Duan *tmp=findd(root,x),*tmp1=NULL;\n    if(x==tmp->l) tmp1=findla(root,tmp->l,tmp->r,NULL,0);//\u5224\u65ad\u662f\u5426\u5728\u7aef\u70b9\u5904\n    else if(x==tmp->r) tmp1=findne(root,tmp->l,tmp->r,NULL,0);\n    if(fog[x]){\n        tmp->cnt--;//\u73b0\u5728\u6709\u96fe,\u6240\u4ee5\u80fd\u76f4\u63a5\u89c2\u6d4b\u7684\u5c71\u5cf0\u6570\u5c11\u4e00\n        caltype(tmp);\n        if(tmp1!=NULL){\n            tmp1->cnt--;\n            caltype(tmp1);\n        }\n    } else{\n        tmp->cnt++;//\u53cd\u4e4b\n        caltype(tmp);\n        if(tmp1!=NULL){\n            tmp1->cnt++;\n            caltype(tmp1);\n        }\n    }\n}\n\nvoid merge(int x){//\u5c06\u4e24\u6bb5\u5408\u5e76\u6210\u4e00\u4e2a\u6bb5\n    Duan *tmp1=findd(root,x),*tmp2;\n    if(x==tmp1->r) tmp2=findne(root,tmp1->l,tmp1->r,NULL,0);\n    if(x==tmp1->l) tmp2=tmp1,tmp1=findla(root,tmp2->l,tmp2->r,NULL,0);//\u627e\u5230\u5de6\u53f3\u6bb5\n    int l1=tmp1->l,r1=tmp1->r,l2=tmp2->l,r2=tmp2->r,cnt;\n    cnt=tmp1->cnt+tmp2->cnt-(!fog[x]?1:0);\n    del(l1,r1),del(l2,r2);\n    ist(l1,r2,cnt);\n}\n\nvoid split(int x){//\u5c06\u4e00\u6bb5\u5206\u88c2\u6210\u4e24\u6bb5\n    Duan *tmp=findd(root,x);\n    int l=tmp->l,r=tmp->r,cnt1=0,cnt2;\n    for(int i=l;i<=x;i++) if(!fog[i]) cnt1++;\n    cnt2=tmp->cnt-cnt1+(fog[x]?0:1);//\u7b97\u51fa\u5206\u88c2\u51fa\u7684\u4e24\u6bb5\u5404\u81ea\u7684\u53ef\u76f4\u63a5\u89c2\u6d4b\u6570\n    del(l,r);\n    ist(l,x,cnt1),ist(x,r,cnt2);\n}\n\nvoid op2(int x){\n    flag[x]=!flag[x];\n    if(flag[x]) merge(x);\n    else split(x);\n}\n\nbool canvis(Duan *nd){\n    int l=nd->l,r=nd->r;\n    Duan *tmp1=findla(root,l,r,NULL,1),*tmp2=findne(root,l,r,NULL,1);\n    switch (nd->typ)\n    {\n    case 1:\n        return 1;\n        break;\n    case 2:\n        return (!fog[nd->l])?(tmp2!=NULL&&tmp2->typ==1):(tmp1!=NULL&&tmp1->typ==1);\n        break;\n    case 3:\n        return (tmp1!=NULL&&tmp1->typ==1)||(tmp2!=NULL&&tmp2->typ==1);\n        break;\n    default:\n        return (tmp1!=NULL&&tmp1->typ==1)&&(tmp2!=NULL&&tmp2->typ==1);\n        break;\n    }\n}\n\nbool op3(int x){\n    if(!fog[x]) return 1;\n    Duan *tmp=findd(root,x),*tmp1=NULL;\n    if(x==tmp->l) tmp1=findla(root,tmp->l,tmp->r,NULL,0);\n    else if(x==tmp->r) tmp1=findne(root,tmp->l,tmp->r,NULL,0);\n    return canvis(tmp)||(tmp1!=NULL&&canvis(tmp1));\n}\n\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    fog[1]=1;\n    for(int i=2;i<=n;i++){\n        fog[i]=1;\n        ist(i-1,i,0);\n    }\n    for(int i=1;i<=m;i++){\n        int op,x;\n        cin>>op>>x;\n        if(op==1) op1(x);\n        else if(op==2) op2(x);\n        else{\n            cout<<op3(x)<<endl;\n        }\n    }\n    return 0;\n}\n```\n\u4ee3\u7801\u5f88\u4e11,\u5927\u4f6c\u8f7b\u55b7\u3002",
        "postTime": 1631685987,
        "uid": 259909,
        "name": "zhaluo",
        "ccfLevel": 0,
        "title": "P7110 \u665a\u79cb\u7edd\u8bd7"
    }
]