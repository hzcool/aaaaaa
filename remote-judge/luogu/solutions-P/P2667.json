[
    {
        "content": "\u4e0b\u9762\u7684\u9898\u89e3\u7ba1\u7406\u5458\u53ef\u4ee5\u5220\u4e86\uff0c\u6539\u9898\u4e86\u3002\n\n\u5982\u679c\u5bf9\u4e8e\u76fe\u6ca1\u7206\u524d\u6216\u8005\u76fe\u90fd\u662f0\u7684\u60c5\u51b5\uff0c\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86\n\n\u73b0\u5728\u95ee\u9898\u662f\u76fe\u53ef\u4ee5\u6321\u591a\u5c11\u4f24\u5bb3\uff08\u6837\u4f8b\u4e2d2\u53f71\u7684\u76fe\u53ef\u4ee5\u63212\u4f24\u5bb3\uff09\n\n\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u5411\u4e0b\u641c\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6700\u591a\u53ea\u4f1a\u76fe\u7206\u4e00\u6b21\uff0c\u6240\u4ee5\u6548\u7387\u662fO(nlgn)\u7684\n\n\u5177\u4f53\u64cd\u4f5c\u662f\u7ef4\u62a4min\uff0c\u4fee\u6539\u7684\u65f6\u5019\u533a\u95f4\u51cf\uff08\u9700\u8981lazy\uff09\uff0c\u6bcf\u6b21\u627e\u4f1a\u7206\u76fe\u7684\u5b50\u6811\uff0c\u7206\u76fe\u7684min\u6539\u4e3amaxint\u5c31\u597d\u4e86\n\n\u67e5\u8be2\u5c31\u662f\u67e5\u8def\u5f84\u4e0a\u7684\u4f24\u5bb3\u603b\u548c\\*2-\u76fe\u6321\u7684\u4f24\u5bb3\u6216\u8005\u4f24\u5bb3\u603b\u548c\uff08\u76fe\u6ca1\u7206\uff09\n\n\u7ef4\u62a4sum\uff0c\u4e0d\u7528\u4e0b\u653e\uff08\u4e0d\u7528lazy\uff09\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u7edf\u8ba1\u5373\u53ef\n\n```cpp\n#include<cstdio>\nusing namespace std;\n#define fo(a,b,c) for(int a=b;a<=c;a++)\n#define LL long long\nint read(){\n    int a=0,f=0;char c=getchar();\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')f=1;\n    for(;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';\n    return f?-a:a;\n}\nint min(int a,int b){return a<b?a:b;}\nconst int N=1e5+1,mo=1e9+9;//\u6a21\u6570\u662f1e9+9\u4e0d\u662f1e9+7\nLL sum[N<<2],lazy[N<<2],boom[N],d[N],minx[N<<2];\nvoid pushup(int rt){\n    minx[rt]=min(minx[rt<<1],minx[rt<<1^1]);\n}\nvoid pushdown(int rt){\n    if(minx[rt<<1]!=2e9)minx[rt<<1]-=lazy[rt];\n    if(minx[rt<<1^1]!=2e9)minx[rt<<1^1]-=lazy[rt];\n    lazy[rt<<1]+=lazy[rt],lazy[rt<<1^1]+=lazy[rt];\n    lazy[rt]=0;\n}\nvoid build(int l,int r,int rt){\n    if(l==r){\n        d[l]=read(); \n        minx[rt]=d[l]?d[l]:2e9;\n        return;\n    }\n    int m=l+r>>1;\n    build(l,m,rt<<1);\n    build(m+1,r,rt<<1^1);\n    pushup(rt);\n}\nvoid change(int l,int r,int rt,int s){//\u9664\u4e86\u8fd9\u4e2a\u51fd\u6570\u90fd\u662f\u7ebf\u6bb5\u6811\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u641c\u7206\u76fe\u7684\u51fd\u6570\n    if(l==r){d[l]=d[l]-minx[rt]+s;minx[rt]=2e9;boom[l]=1;return;}//\u8bb0\u5f55\u76fe\u6321\u7684\u4f24\u5bb3\u548c\u7206\u70b8\u6807\u8bb0\n    int m=l+r>>1;\n    if(lazy[rt])pushdown(rt);\n    if(s>=minx[rt<<1])change(l,m,rt<<1,s);\n    if(s>=minx[rt<<1^1])change(m+1,r,rt<<1^1,s);\n    pushup(rt);\n}\nvoid add(int l,int r,int rt,int L,int R,int c,LL s){\n    if(L<=l&&r<=R){\n        sum[rt]+=c;\n        if(minx[rt]<=c)change(l,r,rt,c);\n        if(minx[rt]!=2e9)minx[rt]-=c,lazy[rt]+=c;\n        return;\n    }\n    s+=sum[rt];\n    if(lazy[rt])pushdown(rt);\n    int m=l+r>>1;\n    if(L<=m)add(l,m,rt<<1,L,R,c,s);\n    if(m<R)add(m+1,r,rt<<1^1,L,R,c,s);\n    pushup(rt);\n}\nint query(int l,int r,int rt,int p){\n    if(l==r)return sum[rt]%mo;\n    int m=l+r>>1;\n    if(p<=m)return(sum[rt]+query(l,m,rt<<1,p))%mo;\n    else return(sum[rt]+query(m+1,r,rt<<1^1,p))%mo; \n}\nint main(){\n    int n=read(),q=read();LL ans=0;\n    build(1,n,1);\n    fo(i,1,q){\n        scanf(\"\\n\");\n        if(getchar()=='A'){\n            int L=read(),R=read(),c=read();\n            add(1,n,1,L,R,c,0);\n        }\n        else{\n            int x=read();\n            if(boom[x])ans=(ans+query(1,n,1,x)*2-d[x]+mo)%mo;\n            else ans=(ans+query(1,n,1,x))%mo; \n        }\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1508984639,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    },
    {
        "content": "# \u3010TJOI2012\u3011\u9632\u5fa1\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2667)\n\n\u5c0f\u6e05\u65b0\u6570\u636e\u7ed3\u6784\u9898\uff0c\u9898\u89e3\u533a\u4e3a\u5565\u6e05\u4e00\u8272\u4e24\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u5206\u5757\uff0c\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\uff1a$tag$ \u548c $minx$ \u5206\u522b\u8bb0\u5f55\u6574\u5757\u7684\u7d2f\u8ba1\u4f24\u5bb3\u548c\u5f53\u524d\u62a4\u76fe\u6700\u5c0f\u503c\u3002\u5f53\u53d1\u73b0\u6709\u62a4\u76fe\u503c\u4e3a\u8d1f\u6570\u65f6\uff0c\u5c06\u5b83\u8d4b\u503c\u4e3a $INF$\uff0c\u7136\u540e\u66b4\u529b\u91cd\u65b0\u626b\u5757\u5185\u5e76\u4e0b\u653e $tag$\uff0c\u5bf9\u4e8e\u76fe\u503c\u4e3a $INF$ \u7684\u7d2f\u52a0 $tag \\times 2$\uff0c\u5426\u5219\u5c31\u7d2f\u52a0 $tag$ \u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u6700\u591a\u91cd\u626b\u4e00\u6b21\uff0c\u91cd\u626b\u4e00\u6b21\u590d\u6742\u5ea6\u4e3a $O(\\sqrt N)$ \uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(N \\sqrt N)$\uff0c\u4e8b\u5b9e\u4e0a\u56e0\u4e3a\u4e00\u6b21\u5757\u5185\u91cd\u626b\u53ef\u80fd\u5c06\u591a\u4e2a\u76fe\u503c\u6807\u8bb0\u4e3a $INF$\uff0c\u6240\u4ee5\u5b9e\u9645\u8dd1\u8d77\u6765\u4e00\u822c\u8fbe\u4e0d\u5230\u4e0a\u754c\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\u5bf9\u76fe\u503c\u505a\u51cf\u6cd5\u7684\u65f6\u5019\u8981\u5148\u5224\u65ad\u5f53\u524d\u76fe\u503c\u4e0e $tag$ \u7684\u5173\u7cfb\uff0c\u5982\u679c\u5df2\u7ecf\u7206\u76fe\u4e86\u53ea\u4e0d\u8fc7\u4f24\u5bb3\u8fd8\u5bc4\u5b58\u5728 $tag$ \u91cc\uff0c\u5c31\u5e94\u8be5\u5148\u4e0b\u653e $tag$\u3002\n\n~~\u8dd1\u7684\u6bd4\u67d0\u4e9b\u7ebf\u6bb5\u6811\u8fd8\u8981\u5feb\u5417\uff1f~~\n\n$Code$ \n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MAX 100010\n#define INF 999999999\n#define mod 1000000009\nusing namespace std;\n\ninline int read()\n{\n\tint s=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)) c=getchar();\n\twhile(isdigit(c)) s=(s<<1)+(s<<3)+(c^48),c=getchar();\n\treturn s;\n}\n\nint n,m;\nchar op;\nint blo,bn;\nint a[MAX],l[MAX],r[MAX],pos[MAX],tag[MAX],minx[MAX];\n\ninline void block()\n{\n\tn=read(),m=read();\n\tmemset(minx,0x3f,sizeof minx);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\ta[i]=read();\n\t\tif(a[i]==0) a[i]=INF;\n\t}\n\tblo=sqrt(n);bn=(n-1)/blo+1;\n\tfor(int i=1;i<=bn;i++)\n\t\tl[i]=(i-1)*blo+1,r[i]=i*blo;\n\tr[bn]=n;\n\tfor(int i=1;i<=bn;i++)\n\t\tfor(int j=l[i];j<=r[i];j++)\n\t\t\tpos[j]=i,minx[i]=min(minx[i],a[j]);\n\treturn;\n}\n\nint ans[MAX];\ninline void spread(int x)\n{\n\tminx[x]=INF;\n\tfor(int i=l[x];i<=r[x];i++)\n\t{\n\t\tif(a[i]==INF) ans[i]+=2*tag[x];\n\t\telse ans[i]+=tag[x],a[i]-=tag[x];\n\t\tif(a[i]<=0) a[i]=INF;\n\t\tminx[x]=min(minx[x],a[i]);\n\t}\n\ttag[x]=0;\n\treturn;\n}\ninline void change(int L,int R,int k)\n{\n\tint p=pos[L],q=pos[R];\n\tif(p==q)\n\t{\n\t\tif(minx[p]<=tag[p]+k) spread(p);   //\u5148\u5224\u65ad\u662f\u5426\u9700\u8981\u4e0b\u653e!!!\n\t\tfor(int i=L;i<=R;i++)\n\t\t{\n\t\t\tif(a[i]==INF) ans[i]+=2*k;\n\t\t\telse a[i]-=k,ans[i]+=k;\t\n\t\t\tminx[p]=min(minx[p],a[i]);\t\t\t\n\t\t\tif(a[i]<=0) a[i]=INF;\n\t\t}\n\t\tif(minx[p]<=tag[p]) spread(p);\n\t}\n\telse\n\t{\n\t\tfor(int i=p+1;i<=q-1;i++)\n\t\t{\n\t\t\tif(minx[i]<=tag[i]+k) spread(i);\n\t\t\ttag[i]+=k;\n\t\t}\n\t\tif(minx[p]<=tag[p]+k) spread(p);\n\t\tfor(int i=L;i<=r[p];i++)\n\t\t{\n\t\t\tif(a[i]==INF) ans[i]+=2*k;\n\t\t\telse a[i]-=k,ans[i]+=k;\n\t\t\tminx[p]=min(minx[p],a[i]);\n\t\t\tif(a[i]<=0) a[i]=INF;\n\t\t}\n\t\tif(minx[p]<=tag[p]) spread(p);\n\t\tif(minx[q]<=tag[q]+k) spread(q);\n\t\tfor(int i=l[q];i<=R;i++)\n\t\t{\n\t\t\tif(a[i]==INF) ans[i]+=2*k;\n\t\t\telse a[i]-=k,ans[i]+=k;\n\t\t\tminx[q]=min(minx[q],a[i]);\n\t\t\tif(a[i]<=0) a[i]=INF;\n\t\t}\n\t\tif(minx[q]<=tag[q]) spread(q);\n\t}\n\treturn;\n}\ninline int getsum(int x)\n{\n\tint p=pos[x];\n\tif(a[x]==INF) return ans[x]+2*tag[p];\n\treturn ans[x]+tag[p];\n}\n\nint x,y,k;\nint answer;\ninline void work()\n{\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>op;\n\t\tswitch(op)\n\t\t{\n\t\t\tcase 'A':x=read(),y=read(),k=read();change(x,y,k);break;\n\t\t\tcase 'Q':x=read();answer+=getsum(x);break;\n\t\t}\n\t}\n\tcout<<answer%mod;\n\treturn;\n}\n\nsigned main()\n{\n\tblock();\n\twork();\n\treturn (0-0);\n}\n```",
        "postTime": 1660356102,
        "uid": 739297,
        "name": "forqprever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\uff1a\u3010TJOI2012\u3011\u9632\u5fa1"
    },
    {
        "content": "### Page 0\n\n\u4e3a\u4ec0\u4e48\u90fd\u6ca1\u6709\u5206\u5757\u7684\u9898\u89e3\u554a\u3002\n\n\u9898\u76ee\u611f\u89c9\u96be\u5ea6\u4e0d\u662f\u7eff\u9898\uff0c\u5efa\u8bae\u5347\u84dd\u3002\n\n### Page 1\n\n\u770b\u5230\u8fd9\u9898\uff0c\u6211\u9996\u5148\u60f3\u5230\u7684\u662f\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u611f\u89c9\u4e0d\u53ef\u505a\u3002\n\n~~\u6211\u679c\u7136\u592a\u83dc\u4e86~~\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4\uff1a$10^5$\uff0c\u5206\u5757\u597d\u50cf\u80fd\u8fc7\u3002\n\n\u8fd9\u9053\u9898\u6700\u5927\u7684\u95ee\u9898\u662f\u653b\u51fb\u4e86\u4e00\u6b21\u6253\u4e86\u5927\u6807\u8bb0\u540e\u53ef\u80fd\u6709\u4e00\u4e9b\u76fe\u788e\u6389\u4e86\uff0c\u4e0b\u4e00\u6b21\u5e94\u8be5\u9020\u6210\u53cc\u500d\u4f24\u5bb3\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u53ca\u65f6\u6807\u8bb0\u3002\n\n\u8003\u8651\u7ef4\u62a4\u5757\u5185\u6700\u5c0f\u503c\uff08\u4e0b\u6587\u8bb0\u4f5c $minn$\uff09\uff0c\u5982\u679c\u533a\u95f4\u653b\u51fb\u7684 $tag < minn$\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u4f1a\u6709\u76fe\u88ab\u6253\u788e\u3002\n\n\u5982\u679c $tag \\geq minn$ \u90a3\u4e48\u5c31\u628a\u8fd9\u4e00\u4e2a\u6574\u5757\u7684\u6807\u8bb0\u90fd\u4e0b\u4f20\uff0c\u8fdb\u884c\u66b4\u529b\u91cd\u6784\u3002\n\n\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u89c9\u5f97\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u5bf9\uff0c\u4f46\u662f\u5176\u5b9e\u662f\u6b63\u786e\u7684\u3002\n\n\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u76fe\u53ea\u4f1a\u788e\u4e00\u6b21\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u76fe\u7684\u590d\u6742\u5ea6\u52a0\u6210\u6700\u591a\u662f $\\sqrt n$\uff0c\u6240\u4ee5\u788e\u76fe\u7684\u590d\u6742\u5ea6\u603b\u548c\u6700\u591a\u662f $O(n \\times  \\sqrt n)$ \u7ea7\u522b\u3002\n\n\u5bf9\u4e8e\u6563\u5757\uff0c\u6ce8\u610f\u66f4\u6539\u4e86\u4e4b\u540e\u7ef4\u62a4 $minn$\uff0c\u4ee3\u7801\u4e2d\u7528 $a$ \u6765\u7ef4\u62a4\u76fe\u7684\u8840\u91cf\uff0c\u5f53\u4e00\u4e2a\u76fe\u88ab\u6253\u7834\u540e\uff0c\u628a\u5b83\u7684\u8840\u91cf\u8bbe\u7f6e\u6210\u65e0\u9650\u5927\u3002\n\n\u7136\u540e\u5c31\u662f\u57fa\u672c\u64cd\u4f5c\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u5047\u5982\u76fe\u7684\u8840\u91cf\u662f $1$\uff0c\u7136\u540e\u5b83\u6536\u5230\u4e86 $114514$ \u70b9\u4f24\u5bb3\uff0c\u5b83\u4e5f\u53ea\u662f\u53d7\u5230 $114514$ \u70b9\u4f24\u5bb3\u7684\uff0c\u800c\u4e0d\u662f $229018$ \u70b9\u6216\u5176\u4ed6\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u5904\u7406 $tag$ \u548c\u5f53\u524d\u653b\u51fb\u4f24\u5bb3\u7684\u5173\u7cfb\u3002\n\n\u8fd9\u9053\u9898\u5f00\u4e86 `long long` \u4e4b\u540e\u597d\u50cf\u4e0d\u9700\u8981\u4e2d\u95f4\u53d6\u6a21\uff0c\u6700\u540e\u518d\u53d6\u6a21\u5c31\u53ef\u4ee5\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u89c1\u4ee3\u7801\uff1a\n\n~~\u7801\u98ce\u7565\u4e11\uff0c\u52ff\u55b7~~\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#define int long long\nusing namespace std;\n//a \u662f\u76fe\u7684\u8840\u91cf\uff0ctg \u662f\u4f24\u5bb3\u6807\u8bb0\uff0c minn \u662f\u5757\u5185\u6700\u5c0f\u503c\uff0cb\u662f\u7b54\u6848\nint a[1000001],tg[1000001],all,minn[10001],b[1000001],x,t,n,m,l,r,k;\ninline int read()\n{\n\tint ans=0;char ch=getchar();\n\twhile((ch>'9')||(ch<'0'))ch=getchar();\n\twhile((ch>='0')&&(ch<='9'))ans=ans*10+ch-'0',ch=getchar();\n\treturn ans;\n}\nchar opt;\nsigned main()\n{\n\tn=read();m=read();t=sqrt(n);\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tfor(int i=1;i<=n;i++)if(a[i]==0)a[i]=9999999999999999;\n\tfor(int i=1;i<=n;i+=t)minn[(i-1)/t+1]=9999999999999999;\n\tfor(int i=1;i<=n;i++)minn[(i-1)/t+1]=min(minn[(i-1)/t+1],a[i]);\n\t//\u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316\uff0ca\u4e00\u5f00\u59cb\u53ef\u80fd\u5c31\u662f0\n\twhile(m--)\n\t{\n\t\tcin>>opt;\n\t\tif(opt=='Q')\n\t\t{\n\t\t\tx=read();\n\t\t\tif(a[x]==9999999999999999)all=(all+(b[x]+tg[(x-1)/t+1]*2)%1000000009)%1000000009;\n\t\t\telse all=(all+(b[x]+tg[(x-1)/t+1])%1000000009)%1000000009;\n\t\t\t//cout<<all<<endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl=read();r=read();x=read();\n\t\t\tif((l-1)/t+1==(r-1)/t+1)//\u5982\u679c\u5728\u540c\u4e00\u5757\u5185\n\t\t\t{\n\t\t\t\tbool minf=0;//minf \u8868\u793a\u5f53\u524d\u5757\u662f\u5426\u9700\u8981\u91cd\u6784 \uff0c\u4ee5\u4e0b\u540c\u4e0a \n\t\t\t\tfor(int i=l;i<=r;i++)\n\t\t\t\t{\n\t\t\t\t\tif(a[i]==9999999999999999)b[i]+=2*x;//\u5982\u679c\u76fe\u5df2\u7ecf\u788e\u4e86 \n\t\t\t\t\telse b[i]+=x;\n\t\t\t\t\tif(a[i]!=9999999999999999)\n\t\t\t\t\ta[i]-=x;\n\t\t\t\t\tminn[(l-1)/t+1]=min(minn[(l-1)/t+1],a[i]);//\u4e0d\u8981\u5fd8\u8bb0\u7ef4\u62a4 minn \n\t\t\t\t\tif(a[i]<=tg[(l-1)/t+1])minf=1;\n\t\t\t\t}\n\t\t\t\tif(minf)\n\t\t\t\t{\n\t\t\t\t\tminn[(l-1)/t+1]=9999999999999999;\n\t\t\t\t\tfor(int i=(l-1)/t*t+1;i<=min((l-1)/t*t+t,n);i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(a[i]==9999999999999999)b[i]+=2*tg[(l-1)/t+1];\n\t\t\t\t\t\telse b[i]+=tg[(l-1)/t+1];\n\t\t\t\t\t\tif(a[i]!=9999999999999999)\n\t\t\t\t\t\ta[i]-=tg[(l-1)/t+1];\n\t\t\t\t\t\tif(a[i]<=0)a[i]=9999999999999999;\n\t\t\t\t\t\tminn[(l-1)/t+1]=min(minn[(l-1)/t+1],a[i]);\n\t\t\t\t\t}\n\t\t\t\t\ttg[(l-1)/t+1]=0;//tag \u4e0d\u8981\u5fd8\u8bb0\u6e05\u7a7a \n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//\u5904\u7406\u5de6\u8fb9\u6563\u5757 \n\t\t\t\tbool minf=0;\n\t\t\t\tfor(int i=l;i<=min(((l-1)/t+1)*t,n);i++)\n\t\t\t\t{\n\t\t\t\t\tif(a[i]==9999999999999999)b[i]+=x*2;\n\t\t\t\t\telse b[i]+=x;\n\t\t\t\t\tif(a[i]!=9999999999999999)\n\t\t\t\t\ta[i]-=x;\n\t\t\t\t\tminn[(l-1)/t+1]=min(minn[(l-1)/t+1],a[i]);\n\t\t\t\t\tif(a[i]<=tg[(l-1)/t+1])minf=1;\n\t\t\t\t}\n\t\t\t\tif(minf)\n\t\t\t\t{\n\t\t\t\t\tminn[(l-1)/t+1]=9999999999999999;\n\t\t\t\t\tfor(int i=(l-1)/t*t+1;i<=min(((l-1)/t+1)*t,n);i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(a[i]==9999999999999999)b[i]+=tg[(l-1)/t+1]*2;\n\t\t\t\t\t\telse b[i]+=tg[(l-1)/t+1];\n\t\t\t\t\t\tif(a[i]!=9999999999999999)\n\t\t\t\t\t\ta[i]-=tg[(l-1)/t+1];\n\t\t\t\t\t\tif(a[i]<=0)a[i]=9999999999999999;\n\t\t\t\t\t\tminn[(l-1)/t+1]=min(minn[(l-1)/t+1],a[i]);\n\t\t\t\t\t}\n\t\t\t\t\ttg[(l-1)/t+1]=0;\n\t\t\t\t}\n\t\t\t\t//\u4e2d\u95f4\u6574\u5757 \n\t\t\t\tfor(int i=(l-1)/t+2;i<(r-1)/t+1;i++)\n\t\t\t\t{\n\t\t\t\t\ttg[i]+=x;\n\t\t\t\t\tif(tg[i]>=minn[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tminn[i]=9999999999999999;\n\t\t\t\t\t\tfor(int j=(i-1)*t+1;j<=min((i-1)*t+t,n);j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(a[j]==9999999999999999)b[j]+=tg[i]*2;\n\t\t\t\t\t\t\telse b[j]+=tg[i];\n\t\t\t\t\t\t\tif(a[j]!=9999999999999999)\n\t\t\t\t\t\t\ta[j]-=tg[i];\n\t\t\t\t\t\t\tif(a[j]<=0)a[j]=9999999999999999;\n\t\t\t\t\t\t\tminn[i]=min(minn[i],a[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttg[i]=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tminf=0;\n\t\t\t\t//\u53f3\u8fb9\u6563\u5757 \n\t\t\t\tfor(int i=(r-1)/t*t+1;i<=r;i++)\n\t\t\t\t{\n\t\t\t\t\tif(a[i]==9999999999999999)b[i]+=x*2;\n\t\t\t\t\telse b[i]+=x;\n\t\t\t\t\tif(a[i]!=9999999999999999)\n\t\t\t\t\ta[i]-=x;\n\t\t\t\t\tminn[(r-1)/t+1]=min(minn[(r-1)/t+1],a[i]);\n\t\t\t\t\tif(a[i]<=tg[(r-1)/t+1])minf=1;\n\t\t\t\t}\n\t\t\t\tif(minf)\n\t\t\t\t{\n\t\t\t\t\tminn[(r-1)/t+1]=9999999999999999;\n\t\t\t\t\tfor(int i=(r-1)/t*t+1;i<=min((r-1)/t*t+t,n);i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(a[i]==9999999999999999)b[i]+=tg[(r-1)/t+1]*2;\n\t\t\t\t\t\telse b[i]+=tg[(r-1)/t+1];\n\t\t\t\t\t\tif(a[i]!=9999999999999999)\n\t\t\t\t\t\ta[i]-=tg[(r-1)/t+1];\n\t\t\t\t\t\tif(a[i]<=0)a[i]=9999999999999999;\n\t\t\t\t\t\tminn[(r-1)/t+1]=min(minn[(r-1)/t+1],a[i]);\n\t\t\t\t\t}\n\t\t\t\t\ttg[(r-1)/t+1]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\",all%1000000009);\n\treturn 0;\n}\n```\n",
        "postTime": 1660322659,
        "uid": 134510,
        "name": "WrongAnswer_90",
        "ccfLevel": 5,
        "title": "P2667\u9632\u5fa1\u5206\u5757\u505a\u6cd5"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2667)\n\n\u5927\u529b\u5206\u5757\u4e07\u5c81\uff01\n\n\u8003\u8651\u5206\u5757\uff0c\u8bb0\u5f55\u5757\u5185\u6700\u5c0f\u76fe\u503c\u4ee5\u53ca\u5168\u5757\u4f24\u5bb3\u3002\n\n\u5bf9\u4e8e\u5b8c\u6574\u5757\uff1a\u4e00\u65e6\u53d1\u73b0\u5168\u5757\u4f24\u5bb3\u8d85\u8fc7\u6700\u5c0f\u76fe\u503c\u76f4\u63a5\u91cd\u6784\uff08\u6709\u81f3\u5c11\u4e00\u4e2a\u76fe\u7834\u4e86\uff09\uff0c\u5176\u4e2d\u7834\u76fe\u72b6\u6001\u76fe\u503c\u6807\u8bb0\u4e3a $\\infty$\u3002\n\n\u5bf9\u4e8e\u4e0d\u5b8c\u6574\u5757\uff1a\u91cd\u6784\u7136\u540e\u66f4\u65b0\u6570\u503c\u3002\n\n\u8be2\u95ee\u7684\u8bdd\u91cd\u6784\u5b8c\u76f4\u63a5\u8fd4\u56de\u3002\n\n\u6b63\u786e\u6027\u663e\u7136\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u4f1a\u6709\u4eba\u95ee\u4e86\uff1a\u4f60\u8fd9\u590d\u6742\u5ea6\u4e0d\u5bf9\u554a\uff0c\u8981\u662f\u6bcf\u4e00\u6b21\u4fee\u6539\u6bcf\u4e2a\u5757\u603b\u662f\u7834\u4e00\u4e2a\u76fe\uff0c\u90a3\u4e0d\u5c31\u5361\u5230 $\\Theta(n)$ \u4e86\u5417\uff1f\n\n\u7136\u800c\u4e00\u4e2a\u5757\u81f3\u591a\u53ea\u4f1a\u91cd\u6784 $\\sqrt{n}$ \u6b21\uff08\u6bd5\u7adf\u53ea\u6709\u8fd9\u4e48\u591a\u9632\u5fa1\u4f53\uff09\uff0c\u6240\u4ee5\u603b\u5171\u53ea\u80fd\u5361\u5230 $\\Theta(n\\sqrt n)$\uff0c\u5269\u4e0b\u7684\u64cd\u4f5c\u4ecd\u7136\u662f $\\Theta(\\sqrt n)$\uff0c\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u603b\u590d\u6742\u5ea6\u4e3a $\\Theta(q\\sqrt n+n\\sqrt n)=\\Theta(n\\sqrt n)$\uff08$n$ \u548c $q$ \u540c\u9636\uff09\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 1e9\nusing namespace std;\nconst int N=1e5+10,M=1e3+10,mod=1000000009;\nint n,q,len,cnt,ans,a[N],d[N],tag[M],Min[M],st[M],ed[M],bar[N];\nvoid build(int k){//\u91cd\u6784\u5757\n\tMin[k]=inf;\n\tfor(int i=st[k];i<=ed[k];i++){\n\t\tif(d[i]==inf)a[i]+=tag[k]*2;\n\t\telse if(d[i]-tag[k]<=0)d[i]=inf,a[i]+=tag[k];\n\t\telse d[i]-=tag[k],a[i]+=tag[k];\n\t\tMin[k]=min(Min[k],d[i]);\n\t}\n\ttag[k]=0;\n\treturn;\n}\nvoid attack(int x,int y,int z){\n\tint l=bar[x],r=bar[y];\n\tif(l==r){\n\t\tbuild(l);\n\t\tfor(int i=x;i<=y;i++){\n\t\t\tif(d[i]==inf)a[i]+=z*2;else a[i]+=z,d[i]-=z;\n\t\t\tif(d[i]<=0)d[i]=inf;\n\t\t\tMin[l]=min(Min[l],d[i]);\n\t\t}\n\t\treturn;\n\t}\n\tfor(int i=l+1;i<=r-1;i++){//\u5b8c\u6574\u5757\n\t\ttag[i]+=z;\n\t\tif(tag[i]>=Min[i])build(i);\n\t}\n\tbuild(l);//\u4e0d\u5b8c\u6574\u5757\n\tfor(int i=x;i<=ed[l];i++){\n\t\tif(d[i]==inf)a[i]+=z*2;else a[i]+=z,d[i]-=z;\n\t\tif(d[i]<=0)d[i]=inf;\n\t\tMin[l]=min(Min[l],d[i]);\n\t}\n\tbuild(r);\n\tfor(int i=st[r];i<=y;i++){\n\t\tif(d[i]==inf)a[i]+=z*2;else a[i]+=z,d[i]-=z;\n\t\tif(d[i]<=0)d[i]=inf;\n\t\tMin[r]=min(Min[r],d[i]);\n\t}\n\treturn;\n}\nint query(int k){\n\tbuild(bar[k]);\n\treturn a[k];\n}\nsigned main(){\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&d[i]);\n\t\tif(!d[i])d[i]=inf;\n\t}\n\tlen=sqrt(n);cnt=n/len+bool(n%len);\n\tfor(int i=1;i<=cnt;i++){\n\t\tst[i]=ed[i-1]+1;ed[i]=min(n,i*len);\n\t\tMin[i]=inf;\n\t\tfor(int j=st[i];j<=ed[i];j++)\n\t\t\tbar[j]=i,Min[i]=min(Min[i],d[j]);\n\t}\n//\tfor(int j=1;j<=cnt;j++){\n//\t\tfor(int k=st[j];k<=ed[j];k++){\n//\t\t\tprintf(\"%d,%d \",a[k],d[k]==inf?0:d[k]);\n//\t\t}\n//\t\tprintf(\"(%d)|\",tag[j]);\n//\t}\n//\tputs(\"\");\n\tfor(int i=1;i<=q;i++){\n\t\tchar ch;int x,y,z;\n\t\tcin>>ch;\n\t\tif(ch=='A')scanf(\"%d%d%d\",&x,&y,&z),attack(x,y,z);\n\t\telse if(ch=='Q')scanf(\"%d\",&x),(ans+=query(x))%=mod;\n//\t\tif(ch=='Q')printf(\"%d\\n\",query(x));\n//\t\telse{\n//\t\t\tfor(int j=1;j<=cnt;j++){\n//\t\t\t\tfor(int k=st[j];k<=ed[j];k++){\n//\t\t\t\t\tprintf(\"%d,%d \",a[k],d[k]==inf?0:d[k]);\n//\t\t\t\t}\n//\t\t\t\tprintf(\"(%d)|\",tag[j]);\n//\t\t\t}\n//\t\t\tputs(\"\");\n//\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n[record](https://www.luogu.com.cn/record/108632633)",
        "postTime": 1682088871,
        "uid": 736801,
        "name": "ACRUSHj",
        "ccfLevel": 0,
        "title": "P2667 [TJOI2012]\u9632\u5fa1"
    },
    {
        "content": "QAQ\u65e5\u5e38\u88ab\u7eff\u9898\u8840\u8650 wtcl\n\n## \u5206\u6790\u9898\u76ee\n\n\u9996\u5148\u6839\u636e\u9898\u9762\u63cf\u8ff0\uff0c\u9700\u8981\u652f\u6301\u533a\u95f4\u51cf\u6cd5\u548c\u5355\u70b9\u67e5\u8be2\uff0c ~~\uff08\u518d\u6839\u636e\u7eff\u9898\u6807\u7b7e\uff09\uff0c~~ \u5224\u65ad\u663e\u7136\u7ebf\u6bb5\u6811\u6a21\u677f\u3002\u4e8e\u662f\u6211\u5feb\u4e50\u5730\u79cd\u4e86\u4e00\u68f5\u5e26 $lazy$ \u6807\u8bb0\u7684\u5c0f\u6811\uff0c\u5374\u53d1\u73b0\u8fc7\u4e0d\u53bb\u6837\u4f8borz\u3002\n\n\u518d\u4ed4\u7ec6\u770b\u6837\u4f8b\u89e3\u91ca\uff0c\u53d1\u73b0 $2$ \u53f7\u9632\u5fa1\u4f53\u7684\u62a4\u76fe\u5728\u7b2c\u4e00\u6b21\u653b\u51fb\u7684\u65f6\u5019\u5c31\u7206\u6389\u4e86\uff0c\u5e76\u4e14\u6709\u6ea2\u51fa\uff0c\u4f46\u6ea2\u51fa\u7684\u653b\u51fb\u5e76\u6ca1\u6709\u52a0\u500d\u3002 ~~\uff08\u597d\u76fe\u5f53\u8d4f\uff09~~\n\n## \u601d\u8def\n\u770b\u5b8c\u6837\u4f8b\u4e4b\u540e\u610f\u8bc6\u5230\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u6bcf\u6b21\u653b\u51fb\u90fd\u6709\u54ea\u4e9b\u76fe\u7206\u6389\u4e86\uff0c\u5e76\u5728**\u4e4b\u540e**\u7684\u6bcf\u6b21\u653b\u51fb\u4e2d\u4f7f\u5176\u53d7\u5230\u7684\u4f24\u5bb3\u7ffb\u500d\u3002\u53ea\u7528\u4e00\u68f5\u5e26 $lazy$ \u6807\u8bb0\u7684\u6811\u6765\u64cd\u4f5c\u7684\u8bdd\u663e\u7136\u65e0\u6cd5\u505a\u5230\u3002\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n\u7b2c\u4e00\u6b21\u64cd\u4f5c\u662f\u5bf9\u533a\u95f4 $[1,3]$ \u8fdb\u884c\u4fee\u6539\u3002\u8282\u70b9$ [1,3]$\u88ab\u6253\u4e0a\u4e86 $lazy$ \u6807\u8bb0\uff0c\u6b64\u65f6 $2$ \u53f7\u9632\u5fa1\u4f53\u5df2\u7ecf\u7206\u76fe\u4e86\u3002\n\n\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u662f\u5bf9\u533a\u95f4 $[1,4]$ \u8fdb\u884c\u4fee\u6539\u3002\u8282\u70b9 $[1,3]$ \u7684 $lazy$ \u6807\u8bb0\u53e0\u52a0\u3002\u4f462\u53f7\u9632\u5fa1\u4f53\u53d7\u5230\u7684\u653b\u51fb\u5e94\u5f53\u7ffb\u500d\u3002\n\n\u7b2c\u4e09\u6b21\u64cd\u4f5c\u662f\u67e5\u8be2 $2$ \u53f7\u9632\u5fa1\u4f53\u53d7\u5230\u7684\u4f24\u5bb3\u3002\u5728\u5411\u4e0b\u67e5\u8be2\u7684\u8fc7\u7a0b\u4e2d $lazy$ \u6807\u8bb0\u4e0b\u653e\u3002\u6211\u4eec\u6b64\u65f6\u53ef\u4ee5\u77e5\u9053 $2$\u53f7\u9632\u5fa1\u4f53\u7684\u76fe\u7206\u4e86\uff0c\u4f46\u4e0d\u77e5\u9053\u662f\u4e00\u6b21\u653b\u51fb\u9020\u6210\u7684\u8fd8\u662f\u591a\u6b21\u653b\u51fb\u9020\u6210\u7684\uff0c\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u6b63\u786e\u7684\u66f4\u65b0\u3002\n\n\u5982\u679c\u79cd\u4e00\u68f5\u4e0d\u5e26 $lazy$ \u6807\u8bb0\u7684\u6811\u5462\uff1f\u6bcf\u6b21\u53d7\u5230\u653b\u51fb\u90fd\u8fdb\u884c\u5224\u65ad\u3002\u663e\u7136\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7b54\u6848\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u6ca1\u6709\u66b4\u529b\u4f18\u2026\u2026\n\n\u6211\u4eec\u601d\u8003\u540e\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u7684\u533a\u95f4 $[l,r]$\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u5206\u4e3a\u4e24\u6b21\u64cd\u4f5c\uff0c\u4e00\u6b21\u5bf9\u672a\u7206\u76fe\u7684\u9632\u5fa1\u4f53\u8fdb\u884c\u4fee\u6539\uff0c\u4e00\u6b21\u662f\u5bf9\u7206\u76fe\u7684\u9632\u5fa1\u4f53\u8fdb\u884c\u4fee\u6539\u3002\u5e76\u5728\u64cd\u4f5c\u5b8c\u6210\u540e\u8fdb\u884c\u672a\u7206\u76fe\u5230\u7206\u76fe\u7684\u66f4\u65b0\u3002\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u79cd\u4e24\u9897\u6811\uff0c\u5206\u522b\u7ef4\u62a4\u672a\u7206\u76fe\u5e8f\u5217\u548c\u7206\u76fe\u5e8f\u5217\uff0c\u5e76\u8fdb\u884c\u66f4\u65b0\uff0c\u5728\u8be2\u95ee\u65f6\u5230\u5bf9\u5e94\u7684\u5e8f\u5217\u4e2d\u53bb\u67e5\u8be2\u5373\u53ef\u3002\u5e76\u4e14\u8fd9\u6837\u5206\u5f00\u6765\u5c31\u53ef\u4ee5\u5feb\u4e50$lazy$\u4e86\u3002\n\n$tree 0$\uff1a\u7ef4\u62a4\u672a\u7206\u76fe\u5e8f\u5217\u3002\n\n\u5728\u521d\u59cb\u65f6\uff0c\u6240\u6709\u9632\u5fa1\u4f53\u90fd\u5728\u8be5\u6811\u4e2d\uff0c\u5f53\u6709\u9632\u5fa1\u4f53\u7206\u76fe\u540e\uff0c\u5c06\u5176\u79fb\u51fa\u8be5\u6811\u3002\n\n$tree 1$\uff1a\u7ef4\u62a4\u7206\u76fe\u5e8f\u5217\u3002\n\n\u5f53\u6709\u9632\u5fa1\u4f53\u7684\u76fe\u7206\u540e\uff0c\u5c06\u5176\u653e\u5165\u8be5\u6811\u3002\n\n\u4e24\u9897\u6811\u7684\u533a\u95f4\u64cd\u4f5c\u548c\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\uff0c\u53ea\u662f\u4fee\u6539\u7684\u503c\u4e0d\u540c\u3002\u6211\u4eec\u4e3b\u8981\u601d\u8003\uff0c\u5982\u4f55\u5c06\u4e00\u4e2a\u9632\u5fa1\u4f53\u8fdb\u884c\u5e8f\u5217\u95f4\u7684\u8f6c\u79fb\u3002\n\n- \u5224\u65ad\u662f\u5426\u9700\u8981\u66f4\u65b0\n\n\u5728$tree0$\u4e2d\uff0c\u6bcf\u6b21\u533a\u95f4\u64cd\u4f5c\u5b8c\u6210\u540e\u8981\u5224\u65ad\u54ea\u4e9b\u9632\u5fa1\u4f53\u7206\u76fe\u4e86\uff0c\u9700\u8981\u79fb\u51fa\u5e8f\u5217\u3002\u7206\u76fe\u7684\u6807\u51c6\u662f\uff1a**\u53d7\u5230\u7684\u4f24\u5bb3\u5927\u4e8e\u7b49\u4e8e\u627f\u53d7\u80fd\u529b**\u3002\u6211\u4eec\u53ef\u4ee5\u4f5c\u5dee\uff0c\u5f97\u5230 $w=$\u627f\u53d7\u80fd\u529b-\u53d7\u5230\u7684\u4f24\u5bb3\uff0c\u5f53 $w\\le0$ \u65f6\uff0c\u8868\u793a\u8be5\u9632\u5fa1\u4f53\u7684\u76fe\u7206\u4e86\u3002\u60f3\u77e5\u9053\u6bcf\u6b21\u64cd\u4f5c\u540e\u6709\u6ca1\u6709\u7206\u76fe\u7684\u9632\u5fa1\u4f53\uff0c\u5c31\u770b\u6574\u4e2a\u5e8f\u5217\u4e2d\u6700\u5c0f\u7684 $w$ \u662f\u5426\u5927\u4e8e$0$\u3002\u82e5 $w_{min}>0$\uff0c\u5219\u6ca1\u6709\u51fa\u73b0\u7206\u76fe\u7684\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\uff1b\u82e5 $w_{min}\\le0$\uff0c\u5219\u8fdb\u884c\u66f4\u65b0\uff0c\u76f4\u5230$w_{min}>0$\u3002\n\n- \u8fdb\u884c\u66f4\u65b0\n\n\t- \u5b9a\u4f4d\n    \n    \u6839\u636e$w$\u7684\u5927\u5c0f\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u662f\u5426\u9700\u8981\u66f4\u65b0\u3002\u90a3\u4e48\u5728\u66f4\u65b0\u65f6\u6211\u4eec\u9700\u8981 $w_{min}$ \u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5bf9\u5176\u64cd\u4f5c\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4$w_{min}$ \u7684\u4f4d\u7f6e\u4fe1\u606f $pos$\u3002\n    \n\t- \u79fb\u51fa$tree0$\n    \n    \u5bf9\u4e8e $pos$\uff0c\u5b83\u88ab\u79fb\u51fa\u5e8f\u5217\uff0c\u9700\u8981\u4fdd\u8bc1\u4e4b\u540e\u7684\u6240\u4ee5\u66f4\u65b0\u4e0d\u4f1a\u518d\u6b21\u66f4\u65b0\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u56e0\u6b64\u5c06$rtee0$\u4e2d\u6b64\u4f4d\u7f6e\u7684 $w$ \u8d4b\u503c\u4e3a _**INF**_ \u3002\n    \n    - \u653e\u5165 $tree1$\n\t\n    \u5c06 $tre1$ \u4e2d $pos$\u7684\u503c\u6539\u4e3a $w$\uff0c\u5177\u4f53\u539f\u56e0\u5728\u4e0b\u9762\u8be2\u95ee\u8bb2\u3002\n\t\n- \u8be2\u95ee\n\n\u521a\u624d\u63d0\u5230\u5728\u8be2\u95ee\u65f6\u8981\u5230\u5bf9\u5e94\u7684\u5e8f\u5217\u53bb\u67e5\u8be2\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u77e5\u9053\u9700\u8981\u67e5\u8be2\u7684 $x$ \u5728\u54ea\u4e2a\u5e8f\u5217\u4e2d\uff0c\u56e0\u6b64\u6211\u4eec**\u8bbe\u4e00\u4e2a\u6807\u8bb0\u6570\u7ec4**\uff0c\u6765\u8868\u793a\u5176\u5728\u54ea\u4e2a\u5e8f\u5217\u4e2d\u3002\u66f4\u65b0\u65f6\u4e5f\u8981\u5c06\u5bf9\u5e94\u7684\u6807\u8bb0\u8fdb\u884c\u4fee\u6539\u3002\n\n\u4e00\u6b21\u8be2\u95ee\u7684\u7ed3\u679c\u4e3a\uff1a$ans=p[x]-w_{x}$\n\n\u56e0\u4e3a$w_{x}=p[x]-sum_{x}$\uff0c\u5176\u4e2d $sum_{x}$ \u4e3a $x$ \u53d7\u5230\u7684\u4f24\u5bb3\u603b\u548c\u3002\n\n\u5c06\u6bcf\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u7d2f\u52a0\u8d77\u6765\uff0c\u8bb0\u5f97\u53d6\u6a21\u3002\n\n\n\n~~(\u4e3a\u4e86\u5199\u8fd9\u4e2a\u9898\u89e3\u4fee\u4e86\u597d\u591a\u6b21\u4ee3\u7801\uff0c\u63d0\u4ea4\u4e86\u597d\u591a\u6b21\uff0c\u5bb3\u6015.jpg~~\uff09\n\n### $code$\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nconst int maxn=100100;\n#define mod 1000000009\n#define INF 0x3f3f3f3f\nint n,p[maxn],q,ans,vis[maxn];\nstruct node{\n\tint l,r;\n\tint f;\n\tint w,pos;\n}c[maxn<<2][2];\n\nvoid up(int w,int op)//\u7ef4\u62a4 w \u548c pos \n{\n\tif(c[w<<1][op].w<c[w<<1|1][op].w)\n\t{\n\t\tc[w][op].w=c[w<<1][op].w;\n\t\tc[w][op].pos=c[w<<1][op].pos;\n\t}\n\telse{\n\t\tc[w][op].w=c[w<<1|1][op].w;\n\t\tc[w][op].pos=c[w<<1|1][op].pos;\n\t}\n\treturn ;\n}\nvoid build(int l,int r,int w,int op)//\u79cd\u6811 \n{\n\tc[w][op].l=l,c[w][op].r=r;\n\tif(l==r)\n\t{\n\t\tc[w][op].w=p[l];\n\t\tc[w][op].pos=l;\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\n\tbuild(l,mid,w<<1,op);\n\tbuild(mid+1,r,w<<1|1,op);\n\t\n\tup(w,op);\n\treturn ;\n}\n\nvoid spread(int w,int op)//\u4e0b\u653e lazy \n{\n\tif(c[w][op].f)\n\t{\n\t\tint x=c[w][op].f;\n\t\tc[w][op].f=0;\n\t\tc[w<<1][op].w+=x;\n\t\tc[w<<1|1][op].w+=x;\n\t\tc[w<<1][op].f+=x;\n\t\tc[w<<1|1][op].f+=x;\n\t}\n}\n\nvoid change(int l,int r,int k,int w,int op)//\u533a\u95f4\u4fee\u6539 \n{\n\tif(c[w][op].l>=l&&c[w][op].r<=r)\n\t{\n\t\tc[w][op].w+=k;\n\t\tc[w][op].f+=k;\n\t\treturn ;\n\t}\n\tint mid=(c[w][op].l+c[w][op].r)>>1;\n\tspread(w,op);\n\t\n\tif(l<=mid)\n\tchange(l,r,k,w<<1,op);\n\tif(r>mid)\n\tchange(l,r,k,w<<1|1,op);\n\t\n\tup(w,op);\n\treturn ;\n}\nvoid change1(int l,int w,int k,int op)//\u66f4\u65b0 \n{\n\tif(c[w][op].l==c[w][op].r)\n\t{\n\t\tc[w][op].w=k;\n\t\treturn ;\n\t}\n\t\n\tint mid=(c[w][op].l+c[w][op].r)>>1;\n\tspread(w,op);\n\t\n\tif(l<=mid)\n\tchange1(l,w<<1,k,op);\n\tif(l>mid)\n\tchange1(l,w<<1|1,k,op);\n\t\n\tup(w,op);\n\treturn ;\n}\nint ask(int id,int w,int op)//\u67e5\u8be2 \n{\n\tif(c[w][op].l==c[w][op].r)\n\treturn c[w][op].w;\n\t\n\tint mid=(c[w][op].l+c[w][op].r)>>1;\n\tspread(w,op);\n\t\n\tif(id<=mid)\n\treturn ask(id,w<<1,op);\n\telse\n\treturn ask(id,w<<1|1,op);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%d\",p+i);\n\tbuild(1,n,1,0);\n\tbuild(1,n,1,1);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tchar qe[3];\n\t\tint l,r,k;\n\t\tscanf(\"%s%d\",qe,&l);\n\t\tif(qe[0]=='A')\n\t\t{\n\t\t\tscanf(\"%d%d\",&r,&k);\n\t\t\tchange(l,r,-k,1,0);\n\t\t\tchange(l,r,-2*k,1,1);\n\t\t\twhile(c[1][0].w<=0)//\u9700\u8981\u66f4\u65b0 \n\t\t\t{\n\t\t\t\tint id=c[1][0].pos;\n\t\t\t\tvis[id]=1;\n\t\t\t\tint now=ask(id,1,0);\n\t\t\t\tchange1(id,1,INF,0);\n\t\t\t\tchange1(id,1,now,1);\n\t\t\t}\n\t\t}\n\t\tif(qe[0]=='Q')\n\t\t{\n\t\t\tif(!vis[l])\n\t\t\t{\n\t\t\t\tans+=p[l]-ask(l,1,0);\n\t\t\t\tans%=mod;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans+=p[l]-ask(l,1,1);\n\t\t\t\tans%=mod;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1603506554,
        "uid": 114012,
        "name": "chichichichi",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    },
    {
        "content": "\u8003\u8651\u4f7f\u7528\u4e24\u9897\u7ebf\u6bb5\u6811\n\n\u4e00\u9897\u7ef4\u62a4\u6bcf\u4e2a\u5854\u5f53\u524d\u5269\u4f59\u591a\u5c11\u7532\uff0c\u5e8f\u5217\u533a\u95f4 `min` \u548c\u533a\u95f4\u51cf\u6cd5\u3002\n\n\u4e00\u9897\u7ef4\u62a4\u7d2f\u79ef\u4f24\u5bb3\uff0c\u533a\u95f4\u52a0\u6cd5\u5355\u70b9\u67e5\u3002\n\n\u6bcf\u6b21 `A` \u4e4b\u540e\uff0c\u5982\u679c\u7b2c\u4e00\u9897\u91cc\u9762\u6709 $\\leqslant 0$ \u7684\u5854\uff0c\u5c31\u628a\u7b2c\u4e8c\u9897\u91cc\u8fd9\u4e2a\u5854\u5f53\u524d\u7684\u7d2f\u79ef\u4f24\u5bb3\u63d0\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u6811\u4e0a\u628a\u8fd9\u4e2a\u5854\u7684\u7d2f\u79ef\u4f24\u5bb3\u6e05\u96f6\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5854\u6807\u4e3a\u7834\u7532\u3002\n\n\u7136\u540e\u56de\u7b54\u7684\u65f6\u5019\u76f4\u63a5\u5728\u7b2c\u4e8c\u9897\u91cc\u67e5\uff0c\u5982\u679c\u7834\u7532\uff0c\u628a\u67e5\u8be2\u7ed3\u679c $\\times 2$ \u518d\u52a0\u4e0a\u63d0\u53d6\u8fc7\u7684\u7d2f\u79ef\u4f24\u5bb3\u3002\n\n\u601d\u8def\u5f88\u6e05\u695a\uff0c\u4e5f\u633a\u597d\u5199\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u5f88\u591a\u5730\u65b9\u8981\u91cd\u590d\u7801\uff0c\u6240\u4ee5\u7801\u91cf\u5f88\u5927\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u505a\u6cd5\u53ef\u4ee5\u628a\u4e24\u68f5\u6811\u5206\u5f00\u8c03\u8bd5\uff0c\u6240\u4ee5\u603b\u4f53\u662f\u4e0d\u96be\u8c03\u7684\u3002\n\n\u5982\u679c\u4f60\u5f00 `long long` \uff0c\u6811\u4e0a\u4fe1\u606f\u5176\u5b9e\u4e0d\u4f1a\u7206\uff0c\u968f\u4fbf\u53d6\u53d6\u6a21\u5c31\u884c\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#define ll long long\nusing namespace std;\n\nint n,m,opt,seq[100010];\nint mul2[100010]; ll dat[100010],allans;\n\ntemplate<typename int_t>\nvoid readx(int_t& x)\n{\n\tx=0; int_t k=1; char ch=0;\n\twhile (ch<'0' || ch>'9') { ch=getchar(); if (ch=='-') k=-1; }\n\twhile (ch>='0' && ch<='9') { x=x*10+ch-'0'; ch=getchar(); }\n\tx*=k;\n}\n\nnamespace SGT1\n{\n\t#define LCH (inx<<1)\n\t#define RCH (inx<<1|1)\n\t\n\tstruct Seg_Tree\n\t{\n\t\tll minv,tag;\n\t\tint l,r,mid;\n\t}tree[400010];\n\tint _val,_pos,lx,rx;\n\t\n\tvoid BuildTree(int inx,int lxx,int rxx,int* seq)\n\t{\n\t\ttree[inx].l=lxx; tree[inx].r=rxx; tree[inx].mid=(lxx+rxx)>>1;\n\t\tif (lxx==rxx)\n\t\t{\n\t\t\ttree[inx].minv=seq[lxx];\n\t\t\treturn;\n\t\t}\n\t\tBuildTree(LCH,lxx,tree[inx].mid,seq);\n\t\tBuildTree(RCH,tree[inx].mid+1,rxx,seq);\n\t\ttree[inx].minv=min(tree[LCH].minv,tree[RCH].minv);\n\t}\n\t\n\tvoid Pushdown(int inx)\n\t{\n\t\tint tmp=tree[inx].tag; tree[inx].tag=0;\n\t\ttree[LCH].tag+=tmp; tree[RCH].tag+=tmp;\n\t\ttree[LCH].minv+=tmp;\n\t\ttree[RCH].minv+=tmp;\n\t}\n\t\n\tvoid Upd(int inx)\n\t{\n\t\tif (tree[inx].l>=lx && tree[inx].r<=rx)\n\t\t{\n\t\t\ttree[inx].minv+=_val;\n\t\t\ttree[inx].tag+=_val;\n\t\t\treturn;\n\t\t}\n\t\tif (tree[inx].tag) Pushdown(inx);\n\t\tif (lx<=tree[inx].mid) Upd(LCH);\n\t\tif (rx>tree[inx].mid) Upd(RCH);\n\t\ttree[inx].minv=min(tree[LCH].minv,tree[RCH].minv);\n\t}\n\t\n\tint Qry_Min_Pos(int inx)\n\t{\n\t\tif (tree[inx].l==tree[inx].r) \n\t\t{\n\t\t\ttree[inx].minv=20000000000000000LL;\n\t\t\treturn tree[inx].l;\n\t\t}\n\t\tif (tree[inx].tag) Pushdown(inx);\n\t\tint ret;\n\t\tif (tree[LCH].minv<=0) ret=Qry_Min_Pos(LCH);\n\t\telse ret=Qry_Min_Pos(RCH);\n\t\ttree[inx].minv=min(tree[LCH].minv,tree[RCH].minv);\n\t\treturn ret;\n\t}\n\t\n\t#undef LCH\n\t#undef RCH\n};\n\nnamespace SGT2\n{\n\t#define LCH (inx<<1)\n\t#define RCH (inx<<1|1)\n\tconst ll mod=1000000009;\n\t\n\tstruct Seg_Tree\n\t{\n\t\tll val,tag;\n\t\tint l,r,mid;\n\t}tree[400010];\n\tint _val,_pos,lx,rx;\n\t\n\tvoid BuildTree(int inx,int lxx,int rxx)\n\t{\n\t\ttree[inx].l=lxx; tree[inx].r=rxx; tree[inx].mid=(lxx+rxx)>>1;\n\t\tif (lxx==rxx) return;\n\t\tBuildTree(LCH,lxx,tree[inx].mid);\n\t\tBuildTree(RCH,tree[inx].mid+1,rxx);\n\t}\n\t\n\tvoid Pushdown(int inx)\n\t{\n\t\tll tmp=tree[inx].tag; tree[inx].tag=0;\n\t\ttree[LCH].tag+=tmp; tree[RCH].tag+=tmp;\n\t\ttree[LCH].val=(tree[LCH].val+(tree[LCH].r-tree[LCH].l+1)*tmp)%mod;\n\t\ttree[RCH].val=(tree[RCH].val+(tree[RCH].r-tree[RCH].l+1)*tmp)%mod;\n\t}\n\t\n\tvoid Upd(int inx)\n\t{\n\t\tif (tree[inx].l>=lx && tree[inx].r<=rx)\n\t\t{\n\t\t\ttree[inx].tag+=_val;\n\t\t\ttree[inx].val=(tree[inx].val+_val*(tree[inx].r-tree[inx].l+1))%mod;\n\t\t\treturn;\n\t\t}\n\t\tif (tree[inx].tag) Pushdown(inx);\n\t\tif (lx<=tree[inx].mid) Upd(LCH);\n\t\tif (rx>tree[inx].mid) Upd(RCH);\n\t\ttree[inx].val=(tree[LCH].val+tree[RCH].val)%mod;\n\t}\n\t\n\tvoid Clear(int inx)\n\t{\n\t\tif (tree[inx].l==_pos && tree[inx].r==_pos)\n\t\t{\n\t\t\tdat[_pos]=tree[inx].val;\n\t\t\ttree[inx].val=0; return;\n\t\t}\n\t\tif (tree[inx].tag) Pushdown(inx);\n\t\tif (_pos<=tree[inx].mid) Clear(LCH);\n\t\telse Clear(RCH);\n\t\ttree[inx].val=(tree[LCH].val+tree[RCH].val)%mod;\n\t}\n\t\n\tint Qry(int inx)\n\t{\n\t\tif (tree[inx].l==_pos && tree[inx].r==_pos) return tree[inx].val%mod;\n\t\tif (tree[inx].tag) Pushdown(inx);\n\t\tint ret;\n\t\tif (_pos<=tree[inx].mid) ret=Qry(LCH);\n\t\telse ret=Qry(RCH);\n\t\ttree[inx].val=(tree[LCH].val+tree[RCH].val)%mod;\n\t\treturn ret;\n\t}\n\t\n\t#undef LCH\n\t#undef RCH\n};\n\nint main()\n{\n\treadx(n); readx(m); char comm=0; int lx,rx,val;\n\tfor (int i=1;i<=n;i++) readx(seq[i]);\n\t\n\tSGT1::BuildTree(1,1,n,seq);\n\tSGT2::BuildTree(1,1,n);\n\t\n\twhile (m--)\n\t{\n\t\tcomm=0; while (comm<'A' || comm>'Z') comm=getchar();\n\t\tif (comm=='A') \n\t\t{\n\t\t\treadx(lx); readx(rx); readx(val);\n\t\t\tSGT1::lx=lx; SGT1::rx=rx; SGT1::_val=-val;\n\t\t\tSGT1::Upd(1);\n\t\t\t\n\t\t\tSGT2::lx=lx; SGT2::rx=rx; SGT2::_val=val;\n\t\t\tSGT2::Upd(1);\n\t\t\t\n\t\t\twhile (SGT1::tree[1].minv<=0)\n\t\t\t{\n\t\t\t\tint pos=SGT1::Qry_Min_Pos(1);\n\t\t\t\tmul2[pos]=1;\n\t\t\t\tSGT2::_pos=pos; SGT2::Clear(1);\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\treadx(lx); ll ans;\n\t\t\tSGT2::_pos=lx; ans=SGT2::Qry(1);\n\t\t\tif (mul2[lx])\n\t\t\t\tans=(ans*2+dat[lx])%1000000009LL;\n\t\t\tallans=(allans+ans)%1000000009LL;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",allans);\n}\n```",
        "postTime": 1547465254,
        "uid": 21512,
        "name": "GNAQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u4e0d\u662f\u5f88\u96be\uff0c\u4f46\u662f\u5341\u5206\u6076\u5fc3\n\n\u6bd4\u5982\u8bf4\u4e00\u4e2a\u4f4d\u7f6e\u7684\u76fe\u53ea\u5269\u4e0b1\uff0c\u7136\u540e\u9020\u621099999\u7684\u4f24\u5bb3\uff0c\u9898\u76ee\u7684\u610f\u601d\u662f\u7136\u76fe\u7206\u6389\uff0c\u7136\u540e\u7269\u4f53\u53d7\u523099999\u7684\u4f24\u5bb3\uff0c\u6ca1\u6709\u7ffb\u500d\n\n\u4e00\u5f00\u59cb\u6211\u662f\u60f3\u7528\u6811\u72b6\u6570\u7ec4+\u5dee\u5206\u6765\u505a\u7684\uff0c\u4f46\u662f\u53d1\u73b0\u4e0a\u9762\u8fd9\u79cd\u60c5\u51b5\u65e0\u6cd5\u5904\u7406\uff0c\u4e8e\u662f\u5c31\u53ea\u80fd\u7528\u7ebf\u6bb5\u6811\u4e86\n\n\u56e0\u4e3a\u662f\u533a\u95f4\u9020\u6210\u4f24\u5bb3\uff0c\u6240\u4ee5\u9700\u8981\u7528\u5230lazy\u6807\u8bb0\n\n\u4e3a\u4e86\u77e5\u9053\u5728\u4e00\u6b21\u9020\u6210\u4f24\u5bb3\u4ee5\u540e\u662f\u5426\u4f1a\u6709\u7269\u4f53\u7684\u76fe\u7206\u6389\uff0c\u6240\u4ee5\u6211\u6253\u4e86\u4e00\u4e2aminp[rt]\u6570\u7ec4\u6765\u8868\u793art\u7684\u5b50\u6811\u4e2d\u62a4\u7532\u5269\u4e0b\u6700\u5c0f\u7684\u53f6\u5b50\u8282\u70b9\n\n\u5982\u679c\u4e00\u6b21\u653b\u51fb\u6253\u7206\u4e86\u62a4\u76fe\uff0c\u5c31\u628a\u7206\u62a4\u76fe\u7684\u53f6\u5b50\u8282\u70b9\u8bb0\u5f55\u4e00\u4e0b\u672c\u6b21\u7684\u4f24\u5bb3\uff0c\u5e76\u4e14\u591a\u6253\u4e00\u4e2a\u51fd\u6570\u6765\u7ef4\u62a4\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9logn\uff0c\u56e0\u4e3a\u76fe\u6700\u591a\u7206\u4e00\u6b21\uff0c\u6240\u4ee5\u603b\u7ef4\u62a4\u65f6\u95f4\u4e3aO(nlogn)\n\n\n\u4ee3\u7801\u89c1\uff1a[MyBlog](https://blog.csdn.net/zsyzClb/article/details/85011530)",
        "postTime": 1544838777,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    },
    {
        "content": "\u9898\u610f\u5f88\u5751\u3002\n\n\u9700\u8981\u679a\u4e3e\u9898\u610f\uff1a\u5982\u679c\u62a4\u7532\u88ab\u6253\u7206\uff0c\u90a3\u4e2a\u8fd9\u6b21\u88ab\u6253\u7206\u4e0d\u4f1a\u8ba1\u7b97\u4e24\u500d\u7b54\u6848\n\n\u8bbe$a$\u6570\u7ec4\u8bb0\u5f55\u6253\u7206\u524d\u7684\u7b54\u6848$flag$\u8868\u793a\u662f\u5426\u6253\u7206\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4$min$ $id$\u5206\u522b\u8868\u793a\u6700\u5c0f\u503c\u548c\u3001\u6700\u5c0f\u503c\u6765\u81ea\u54ea\u91cc\n\n\u7136\u540e\u6bcf\u6b21\u4fee\u6539\u4ee5\u540e\u68c0\u67e5\u5168\u5c40\u662f\u5426\u5b58\u5728$<=0$\u7684\u8282\u70b9\uff0c\u5982\u679c\u5b58\u5728\u5c31\u66b4\u529b$while$\u5faa\u73af\u66f4\u6539$id$\u8fd9\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u76f4\u5230\u6ca1\u6709\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\n#define lc (x<<1)\n#define rc (x<<1|1)\nusing namespace std;\nconst int mod=1e9+9;\nconst int N=1e5+10;\nconst int inf=0x3f3f3f3f;\nstruct node\n{\n    int mn,tag,id,v;\n}tree[N<<2];\ninline char gc()\n{\n    static char now[1<<16],*S,*T;\n    if (T==S)\n\t{\n\t\tT=(S=now)+fread(now,1,1<<16,stdin);\n\t\tif (T==S) return EOF;\n\t}\n    return *S++;\n}\ninline int read()\n{\n    int x=0,f=1;char ch=gc();\n    while(!isdigit(ch))\n\t{\n\t\tif (ch=='-') f=-1;\n\t\tch=gc();\n\t}\n    while(isdigit(ch)) x=x*10+ch-'0',ch=gc();\n    return x*f;\n}\ninline void update(int x)\n{\n    tree[x].mn=inf;\n    if(tree[lc].mn<tree[x].mn) tree[x].mn=tree[lc].mn,tree[x].id=tree[lc].id;\n    if(tree[rc].mn<tree[x].mn) tree[x].mn=tree[rc].mn,tree[x].id=tree[rc].id;\n}\ninline void build(int x,int l,int r)\n{\n    if (l==r)\n\t{\n\t\ttree[x].mn=read();\n\t\ttree[x].id=l;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n    build(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tupdate(x);\n}\nint n,q,a[N],ans;bool flag[N];\ninline void doa(int x,int v)\n{\n    tree[x].v+=v;\n\ttree[x].tag+=v;tree[x].mn-=v;\n}\ninline void pushdown(int x)\n{\n    if (!tree[x].tag) return;\n\tstatic int tag;\n    tag=tree[x].tag;\n\ttree[x].tag=0;\n\tdoa(lc,tag);\n\tdoa(rc,tag);\n}\ninline void modify(int x,int l,int r,int l1,int r1,int v)\n{\n    if (l1<=l&&r1>=r)\n\t{\n\t\tdoa(x,v);\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tpushdown(x);\n    if (l1<=mid) modify(lc,l,mid,l1,r1,v);\n    if (r1>mid) modify(rc,mid+1,r,l1,r1,v);\n\tupdate(x);\n}\ninline void query(int x,int l,int r,int p)\n{\n    if (l==r)\n\t{\n\t\tflag[l]=1;\n\t\ta[l]=tree[x].v;\n\t\ttree[x].v=tree[x].tag=0;\n\t\ttree[x].mn=inf;\n\t\treturn;\n\t}\n    int mid=l+r>>1;\n\tpushdown(x);\n    if (p<=mid) query(lc,l,mid,p);\n\telse query(rc,mid+1,r,p);\n\tupdate(x);\n}\ninline int qr(int x,int l,int r,int p)\n{\n    if(l==r)\n\t{\n\t\treturn tree[x].v+a[l]+tree[x].v*flag[l];\n\t}\n\tint mid=l+r>>1;\n\tpushdown(x);\n    if (p<=mid) return qr(lc,l,mid,p);\n\telse return qr(rc,mid+1,r,p);\n}\ninline void inc(int &x,int v)\n{\n\tx=x+v>=mod?x+v-mod:x+v;\n}\nint main()\n{\n    n=read();\n\tq=read();\n\tbuild(1,1,n);\n    while(q--)\n\t{\n        char ch=gc();\n\t\twhile(ch!='A'&&ch!='Q') ch=gc();\n        if(ch=='A')\n\t\t{\n\t\t\tstatic int l,r,x;\n            l=read();r=read();x=read();\n            modify(1,1,n,l,r,x);\n            while(tree[1].mn<=0) query(1,1,n,tree[1].id);\n        }\n        if(ch=='Q') inc(ans,qr(1,1,n,read()));\n    }\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1561989568,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    },
    {
        "content": "\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u548c\u533a\u95f4min\u4ee5\u53ca\u53f6\u8282\u70b9\u7684id\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u653e\u8fd8\u6709\u62a4\u7532\u7684\n\n\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c\u533a\u95f4\u51cf\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u7136\u540e\u67e5\u8be2min\u6709\u6ca1\u6709\u5c0f\u4e8e\u7b49\u4e8e0\u7684\u3002\u6709\u7684\u8bdd\u5c31\u8bbe\u4e3ainf\u7136\u540e\u6807\u8bb0\u4e00\u4e0b\uff0c\u653e\u5230\u7b2c\u4e8c\u4e2a\u7ebf\u6bb5\u6811\u91cc\u3002\n\n\u7b2c\u4e8c\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u76f4\u63a5\u51cf2\u500d\u5373\u53ef\u3002\u653e\u8fdb\u53bb\u7684\u65f6\u5019\u662f\u5355\u70b9\u8986\u76d6\u3002\n\n\u4e0d\u819c\uff0c\u5728\u7edf\u8ba1\u7684\u65f6\u5019\u624d\u819c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u505a\n\n\u5927\u6982\u5c31\u662f\u7ec6\u8282\u6ce8\u610f\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u633a\u7801\u7684\u4e00\u9898...\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nnamespace io {\nchar buf[1<<21], *p1 = buf, *p2 = buf;\ninline char gc() {\n    if(p1 != p2) return *p1++;\n    p1 = buf;\n    p2 = p1 + fread(buf, 1, 1 << 21, stdin);\n    return p1 == p2 ? EOF : *p1++;\n}\n#define G getchar\n\n#ifndef ONLINE_JUDGE\n#undef G\n#define G getchar\n#endif\n\ntemplate<class I>\ninline void read(I &x) {\n    x = 0; I f = 1; char c = G();\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = G(); }\n    while(c >= '0' && c <= '9') {x = x * 10 + c - '0'; c = G(); }\n    x *= f;\n}\n\ntemplate<class I>\ninline void write(I x) {\n    if(x == 0) {putchar('0'); return;}\n    I tmp = x > 0 ? x : -x;\n    if(x < 0) putchar('-');\n    int cnt = 0;\n    while(tmp > 0) {\n        buf[cnt++] = tmp % 10 + '0';\n        tmp /= 10;\n    }\n    while(cnt > 0) putchar(buf[--cnt]);\n}\n\n#define in(x) read(x)\n#define outn(x) write(x), putchar('\\n')\n#define out(x) write(x), putchar(' ')\n\n} using namespace io;\n\n#define ll long long\nconst int N = 100010;\nconst int mod = 1000000009;\nconst int inf = 0x3f3f3f3f;\n\n/*\n\u4e24\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\u7b2c\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u548c\u533a\u95f4min\u4ee5\u53ca\u53f6\u8282\u70b9\u7684id\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u653e\u8fd8\u6709\u62a4\u7532\u7684\n\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c\u533a\u95f4\u51cf\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u7136\u540e\u67e5\u8be2min\u6709\u6ca1\u6709\u5c0f\u4e8e\u7b49\u4e8e0\u7684\u3002\u6709\u7684\u8bdd\u5c31\u8bbe\u4e3ainf\u7136\u540e\u6807\u8bb0\u4e00\u4e0b\uff0c\u653e\u5230\u7b2c\u4e8c\u4e2a\u7ebf\u6bb5\u6811\u91cc\u3002\n\u7b2c\u4e8c\u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u76f4\u63a5\u51cf2\u5373\u53ef\u3002\u653e\u8fdb\u53bb\u7684\u65f6\u5019\u662f\u5355\u70b9\u8986\u76d6\u3002\n\u4e0d\u819c\uff0c\u5728\u7edf\u8ba1\u7684\u65f6\u5019\u624d\u819c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u505a\n */\n\nint n, m;\nint a[N];\nbool vis[N];\n\nstruct tree {\n    ll mn, sum, tag;\n    int id, l, r;\n} t[N<<2][2];\n\n#define lc (rt << 1)\n#define rc (rt << 1 | 1)\n\nvoid up(int rt, int op) {\n    t[rt][op].mn = min(t[lc][op].mn, t[rc][op].mn);\n    t[rt][op].sum = (t[lc][op].sum + t[rc][op].sum);\n}\n\nvoid build(int l, int r, int rt, int op) {\n    t[rt][op].l = l; t[rt][op].r = r;\n    if(l == r) {\n        t[rt][op].sum = t[rt][op].mn = a[l];\n        t[rt][op].id = l;\n        if(op) t[rt][op].sum = t[rt][op].mn = 0;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(l, mid, lc, op);\n    build(mid + 1, r, rc, op);\n    up(rt, op);\n}\n\n#define l (t[rt][op].l)\n#define r (t[rt][op].r)\n#define mid ((l + r) >> 1)\n\nvoid down(ll ln, ll rn, int rt, int op) {\n    if(t[rt][op].tag) {\n        ll x = t[rt][op].tag; t[rt][op].tag = 0;\n        t[lc][op].mn = (t[lc][op].mn + x); \n        t[rc][op].mn = (t[rc][op].mn + x);\n        t[lc][op].sum = (t[lc][op].sum + ln * x); \n        t[rc][op].sum = (t[rc][op].sum + rn * x);\n        t[lc][op].tag = (t[lc][op].tag + x); \n        t[rc][op].tag = (t[rc][op].tag + x);\n    }\n}\n\nvoid upd(int L, int R, int rt, ll c, int op) {\n    if(L <= l && r <= R) {\n        t[rt][op].sum += (r - l + 1) * c; t[rt][op].mn += c;\n        t[rt][op].tag += c;\n        return;\n    }\n    down(mid - l + 1, r - mid, rt, op);\n    if(L <= mid) upd(L, R, lc, c, op);\n    if(R > mid) upd(L, R, rc, c, op);\n    up(rt, op);\n}\n\nvoid upd_new(int pos, int rt, ll c, int op) {\n    if(l == r) {\n        t[rt][op].sum = t[rt][op].mn = c;\n        return;\n    }\n    down(mid - l + 1, r - mid, rt, op);\n    if(pos <= mid) upd_new(pos, lc, c, op);\n    else upd_new(pos, rc, c, op);\n    up(rt, op);\n}\n\nll query_sum(int pos, int rt, int op) {\n    if(l == r) return t[rt][op].mn;\n    down(mid - l + 1, r - mid, rt, op);\n    if(pos <= mid) return query_sum(pos, lc, op);\n    else return query_sum(pos, rc, op);\n}\n\nint query_id(int rt, int op) {\n    if(l == r) return t[rt][op].id;\n    down(mid - l + 1, r - mid, rt, op);\n    if(t[rt][op].mn == t[lc][op].mn) return query_id(lc, op);\n    else return query_id(rc, op);\n}\n\n#undef lc\n#undef rc\n#undef l\n#undef r\n#undef mid\n\nint main() {\n    in(n), in(m);\n    for(int i = 1; i <= n; ++i) in(a[i]);\n    build(1, n, 1, 0); build(1, n, 1, 1);\n    \n    char s[2];\n    int l, r, x;\n    ll ans = 0;\n    \n    for(int i = 1; i <= m; ++i) {\n        scanf(\"%s\", s);\n        if(s[0] == 'A') {\n            in(l), in(r), in(x);\n            upd(l, r, 1, -x, 0);\n            upd(l, r, 1, -2 * x, 1);\n            while(t[1][0].mn <= 0) {\n                int id = query_id(1, 0);\n                vis[id] = 1;\n                ll now = query_sum(id, 1, 0);\n                upd_new(id, 1, inf, 0);\n                upd_new(id, 1, now, 1);\n            }\n        } else {\n            in(x);\n            if(!vis[x]) {\n                ans += a[x] - query_sum(x, 1, 0);\n                ans %= mod;\n            } else {\n                ans += a[x] - query_sum(x, 1, 1);\n                ans %= mod;\n            }\n        }\n    }\n    outn(ans);\n}\n```",
        "postTime": 1558537423,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    },
    {
        "content": "~~\u8fd9\u9053\u9898\u771f\u7075\u6027~~\n\n\u9644\u4e00\u7ec4\u6570\u636e\uff1a\n\ninput\n\n3 10\n\n24 97 50\n\nA 1 3 56\n\nA 1 3 25\n\nA 1 3 80\n\nA 1 2 98\n\nQ 3\n\nA 3 3 64\n\nQ 1\n\nA 1 3 11\n\nQ 2\n\nA 2 2 58\n\noutput\n\n1107\n\n\u5168WA\u7684\u5c0f\u670b\u53cb\u662f\u4e0d\u662f\u8f93\u51fa701\u5462w\uff1f~~\u6ed1\u7a3d~~\n\n\u8fd9\u9053\u9898\u770b\u4f3c\u662f\u7ebf\u6bb5\u6811\u677f\u9898\uff0c\u5176\u5b9e\u8981\u590d\u6742\u4e00\u4e9b\u3002\u5982\u679c\u5355\u7528\u666e\u901a\u7ebf\u6bb5\u6811\u601d\u60f3\uff0c\u5982\u679c\u653b\u51fb\u64cd\u4f5cA\u4e00\u76f4\u7ecf\u884c\uff0c\u61d2\u6807\u8bb0\u4f1a\u628a\u5b83\u4eec\u7684\u4f24\u5bb3\u52a0\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u53ef\u80fd\u5728\u8fd9\u4e00\u8fde\u4e32\u653b\u51fb\u7684\u4e2d\u9014\uff0c\u67d0\u5efa\u7b51\u7684\u76fe\u5df2\u7ecf\u7834\u4e86\u3002\u5982\u4e0a\u9762\u7684\u6570\u636e\uff0c\u5728\u7b2c\u4e00\u6b21A\u65f6\uff0c\u4e09\u53f7\u5efa\u7b51\u5df2\u7ecf\u7834\u76fe\u4e86\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6ca1\u6709\u8be2\u95ee\uff0c\u61d2\u6807\u8bb0\u7f13\u5b58\u4e86\u64cd\u4f5c\uff0c\u540e\u9762\u7684\u4e24\u6b21A\u5e76\u6ca1\u6709\u52a0\u500d\u4f24\u5bb3\uff08\u6211\u5c31\u8fd9\u6837\u8c03\u4e86\u4e00\u4e0a\u5348\uff0c\u8fd8\u662f\u5bf9\u62cd\u53d1\u73b0\u7684qaq\uff09\u3002\u8fd9\u5c31\u662f\u672c\u9898\u7384\u5b66\u6240\u5728\u54af\uff01\n\n\u770b\u6765\u6211\u4eec\u8fd8\u5e94\u8be5\u5728\u6bcf\u6b21\u653b\u51fb\u540e\u627e\u5230\u5df2\u7ecf\u7834\u76fe\u7684\u5efa\u7b51\uff0c\u5982\u4f55\u6548\u7387\u66f4\u9ad8\u5462\uff1f\u7ebf\u6bb5\u6811\uff01\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\u4e24\u9897\u6811\uff0c\u4e00\u9897Armor\u8bb0\u5f55\u62a4\u7532\u8fd8\u80fd\u627f\u53d7\u4f24\u5bb3\u7684\u6700\u5c0f\u503c\uff08\u7834\u76fe\u7684\u5f53\u7136\u66f4\u5c0f\uff09\uff0c\u4e00\u9897Building\u7ef4\u62a4\u53d7\u51fb\u72b6\u6001\uff0c\u96be\u70b9\u662f\u600e\u4e48\u533a\u5206\u6b63\u5e38\u4f24\u5bb3\u4e0e\u53cc\u500d\u4f24\u5bb3\u5462\uff1f\u4ee3\u7801\u89c1w\uff08\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\u4e0d\u4f1a\u9ad8\u4eae\u4e0d\u597d\u610f\u601d\u5566\uff0c\u6709\u6ca1\u6709\u5c0f\u54e5\u54e5\u6559\u6211\uff09\n#\n```cpp\n// by.luogu P2667\n\n//#define _DEBUG\n\n#include <cstdio>\n\nnamespace Optimize { // \u98ce\u9a9a\u7684\u4f18\u5316\u6a21\u677f \n\t#define Eps 1e-8\n\t#define Inf 0x3f3f3f3f\n\t#define Int register int\n\t#define LL long long int\n\t#define Type template<typename _T>\n\t#define FileClose() fclose ( stdin ), fclose ( stdout )\n\t#define FileOpen( fname ) freopen ( fname\".in\", \"r\", stdin ), freopen ( fname\".out\", \"w\", stdout )\n\tType inline _T Max ( const _T a, const _T b ) { return a > b ? a : b; }\n\tType inline _T Min ( const _T a, const _T b ) { return a < b ? a : b; }\n\tType inline _T Abs ( const _T x ) { return x < 0 ? -x : x; }\n\tType inline _T rint () {\n\t\t_T x = 0; int f = 1; char s = getchar ();\n\t\twhile ( s < '0' || '9' < s ) f = s == '-' ? -1 : 1, s = getchar ();\n\t\twhile ( '0' <= s && s <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar ();\n\t\treturn x * f;\n\t}\n\tType inline void wint ( _T x ) {\n\t\tif ( x < 0 ) putchar ( '-' ), x = ( ~ x ) + 1;\n\t\tif ( 9 < x ) wint ( x / 10 );\n\t\tputchar ( x % 10 + '0' );\n\t}\n}\n\nusing namespace Optimize;\n\nconst int Mod = 1000000009, MAXN = 100000;\nint n, q, p[MAXN + 5] = {};\nint Unbreak[MAXN + 5] = {}; // \u7834\u76fe\u524d\uff0c\u5efa\u7b51\u627f\u4f24 \nbool Breaked[MAXN + 5] = {}; // \u7834\u76fe\u6807\u8bb0 \n\nstruct Building_Segment_Tree { // \u8fd9\u662f\u7ef4\u62a4\u5efa\u7b51\u7684\u6811 \n\tstruct Node {\n\t\tint l, r;\n\t\tLL Damage, Lazy; // Damage: \u635f\u4f24(by\u767e\u5ea6\u7ffb\u8bd1) \n\t} *Tree;\n\tinline void Build ( const int i, const int l, const int r, const int SizeofTree = 0 ) { // \u5efa\u6811 \n\t\tif ( i == 1 ) Tree = new Node[SizeofTree] ();\n\t\tTree[i].l = l, Tree[i].r = r, Tree[i].Lazy = Tree[i].Damage = 0;\n\t\tif ( l == r ) return ;\n\t\tint Mid = ( l + r ) >> 1;\n\t\tthis -> Build ( i << 1, l, Mid );\n\t\tthis -> Build ( i << 1 | 1, Mid + 1, r );\n\t}\n\tinline void Spread ( const int i ) { // \u61d2\u6807\u8bb0\u4e0b\u4f20 \n\t\tif ( ! Tree[i].Lazy ) return ;\n\t\tTree[i << 1].Lazy += Tree[i].Lazy;\n\t\tTree[i << 1 | 1].Lazy += Tree[i].Lazy;\n\t\tif ( Tree[i << 1].l == Tree[i << 1].r ) { // \u56e0\u4e3a\u53ea\u7528\u8be2\u95ee\u53f6\u5b50\uff0c\u53ea\u5bf9\u53f6\u5b50\u7ecf\u884c\u7ef4\u62a4\u54af \n\t\t\tTree[i << 1].Damage += Tree[i].Lazy;\n\t\t}\n\t\tif ( Tree[i << 1 | 1].l == Tree[i << 1 | 1].r ) {\n\t\t\tTree[i << 1 | 1].Damage += Tree[i].Lazy;\n\t\t}\n\t\tTree[i].Lazy = 0;\n\t}\n\tinline void Attack ( const int i, const int l, const int r, const LL Aggress ) { // \u653b\u51fb \n\t\tif ( r < Tree[i].l || l > Tree[i].r ) return ; // \u4e0e\u8be5\u533a\u95f4\u65e0\u5173\uff0c\u8fd4\u56de \n\t\tif ( l <= Tree[i].l && Tree[i].r <= r ) { // \u5b8c\u5168\u5305\u542b\u533a\u95f4 \n\t\t\tTree[i].Lazy += Aggress; // \u61d2\u6807\u8bb0 \n\t\t\tif ( Tree[i].l == Tree[i].r ) { // \u82e5\u662f\u53f6\u8282\u70b9\uff0cupdate \n\t\t\t\tTree[i].Damage += Aggress;\n\t\t\t}\n\t\t\treturn ;\n\t\t}\n\t\tthis -> Spread ( i ); // \u8bb0\u5f97\u4f20\u6807\u8bb0 \n\t\tthis -> Attack ( i << 1, l, r, Aggress );\n\t\tthis -> Attack ( i << 1 | 1, l, r, Aggress );\n\t}\n\tinline LL Query ( const int i, const int Target ) { // \u8be2\u95ee\u4f24\u5bb3 \n\t\tif ( Target < Tree[i].l || Target > Tree[i].r ) return 0;\n\t\tif ( Tree[i].l == Target && Tree[i].r == Target ) {\n\t\t\treturn Tree[i].Damage;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tLL lchret = this -> Query ( i << 1, Target );\n\t\tLL rchret = this -> Query ( i << 1 | 1, Target );\n\t\treturn lchret + rchret; // \u5de6\u53f3\u5fc5\u6709\u4e00\u4e2a\u4e3a0\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u6211\u61d2x\uff0c\u76f4\u63a5\u52a0\u5427 \n\t}\n\tinline void ClearBreaked ( const int i, const int Target ) { // \u96be\u70b9\u6765\u4e86\uff01\uff01\uff01 \n\t\t/*\n\t\tTarget\u662f\u901a\u8fc7Armor\u6811\u627e\u5230\u7684\u7834\u76fe\u5efa\u7b51\u7269\uff0c\n\t\t\u6b64\u65f6\uff0c\u6211\u4eec\u628a\u5176\u5bf9\u5e94\u7684\u7ed3\u70b9\u5728\u7834\u76fe\u524d\u53d7\u5230\u7684\u4f24\u5bb3\u4fdd\u5b58\u5728Unbreak\u5e76\u6e05\u96f6\uff0c\n\t\t\u5728\u8ba1\u7b97\u65f6\uff0c\u901a\u8fc7Breaked\u5224\u65ad\u5efa\u7b51\u662f\u5426\u7834\u76fe\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\t\t1.\u7834\u76fe\uff0cans = \u7834\u76fe\u524d(Unbreak) + 2 * \u7834\u76fe\u540e(Query)\n\t\t2.\u672a\u7834\u76fe\uff0cans = \u7834\u76fe\u524d(Query)\n\t\t\u5f88\u7b80\u5355\u5427\uff1f\"\u4fdd\u5b58\u5e76\u6e05\u96f6\" \u5c31\u5b8c\u7f8e\u533a\u5206\u4e86\u4e24\u79cd\u4f24\u5bb3\u3002 \n\t\t*/\n\t\tif ( Target < Tree[i].l || Target > Tree[i].r ) return ;\n\t\tif ( Tree[i].l == Target && Tree[i].r == Target ) {\n\t\t\tUnbreak[Tree[i].l] = Tree[i].Damage;\n\t\t\tTree[i].Damage = 0;\n\t\t\treturn ;\n\t\t}\n\t\tthis -> Spread ( i ); // \u8bb0\u5f97\u4e5f\u8981\u4f20\u6807\u8bb0\u54e6 \n\t\tthis -> ClearBreaked ( i << 1, Target );\n\t\tthis -> ClearBreaked ( i << 1 | 1, Target );\n\t}\n} Building_SegTree;\n\nstruct Armor_Segment_Tree { // \u7834\u76fe\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u4ee5\u627e\u5230\u7834\u76fe\u5efa\u7b51 \n\tstruct Node {\n\t\tint l, r, SectionMin, Lazy; // SectionMin\u5c31\u662f\u533a\u95f4\u6700\u5c0f\u503c \n\t} *Tree;\n\tinline void Build ( const int i, const int l, const int r, const int* LeafInfor, const int SizeofTree = 0 ) { // \u5efa\u6811 \n\t\tif ( i == 1 ) Tree = new Node[SizeofTree] ();\n\t\tTree[i].l = l, Tree[i].r = r, Tree[i].Lazy = 0;\n\t\tif ( l == r ) {\n\t\t\tTree[i].SectionMin = LeafInfor[l];\n\t\t\treturn ;\n\t\t}\n\t\tint Mid = ( l + r ) >> 1;\n\t\tthis -> Build ( i << 1, l, Mid, LeafInfor );\n\t\tthis -> Build ( i << 1 | 1, Mid + 1, r, LeafInfor );\n\t\tTree[i].SectionMin = Min ( Tree[i << 1].SectionMin, Tree[i << 1 | 1].SectionMin ); // \u5de6\u53f3\u5b50\u533a\u95f4\u6700\u5c0f\u503c\u7684min\u5c31\u662f\u5f53\u524d\u533a\u95f4\u6700\u5c0f\u503c \n\t}\n\tinline void Spread ( const int i ) { // \u4e0b\u4f20\u61d2\u6807\u8bb0 \n\t\tif ( ! Tree[i].Lazy ) return ;\n\t\tTree[i << 1].Lazy += Tree[i].Lazy;\n\t\tTree[i << 1 | 1].Lazy += Tree[i].Lazy;\n\t\tTree[i << 1].SectionMin += Tree[i].Lazy;\n\t\tTree[i << 1 | 1].SectionMin += Tree[i].Lazy;\n\t\tTree[i].Lazy = 0;\n\t}\n\tinline void Attack ( const int i, const int l, const int r, const int Aggress ) { // \u7ef4\u62a4\u53d7\u51fb\u540e\u7684\u533a\u95f4\u6700\u5c0f\u503c \n\t\tif ( r < Tree[i].l || l > Tree[i].r ) return ;\n\t\tif ( l <= Tree[i].l && Tree[i].r <= r ) {\n\t\t\tTree[i].Lazy += Aggress;\n\t\t\tTree[i].SectionMin += Aggress;\n\t\t\treturn ;\n\t\t}\n\t\tthis -> Spread ( i );\n\t\tthis -> Attack ( i << 1, l, r, Aggress );\n\t\tthis -> Attack ( i << 1 | 1, l, r, Aggress );\n\t\tTree[i].SectionMin = Min ( Tree[i << 1].SectionMin, Tree[i << 1 | 1].SectionMin );\n\t}\n\tinline int Query_SectionMin ( const int i ) { // \u8fd4\u56de\u6574\u4e2a\u533a\u95f4\u6700\u5c0f\u503c\u7684index\uff0c\u5b83\u5c06\u88ab...\u6539\u53d8\u4e3a\u7834\u76fe\u72b6\u6001 \n\t\tif ( Tree[i].l == Tree[i].r ) {\n\t\t\tTree[i].SectionMin = Inf; // \u627e\u5230\u6700\u5c0f\u503c\u4e86\uff0c\u8be5\u5efa\u7b51\u4ece\u6b64\u4e0d\u7528\u88ab\u7ef4\u62a4\uff0c\u7f6e\u4e3aInf \n\t\t\treturn Tree[i].l;\n\t\t}\n\t\tthis -> Spread ( i );\n        int ret;\n        if ( Tree[i << 1].SectionMin <= 0 ) {\n        \tret = Query_SectionMin ( i << 1 );\n\t\t} else {\n\t\t\tret = Query_SectionMin ( i << 1 | 1 );\n\t\t}\n        Tree[i].SectionMin = Min ( Tree[i << 1].SectionMin, Tree[i << 1 | 1].SectionMin ); // \u56e0\u4e3a\u6700\u5c0f\u503c\u53d8\u4e3aInf\uff0c\u91cd\u65b0\u7ef4\u62a4\u6700\u5c0f\u503c \n        return ret;\n    }\n} Armor_SegTree;\n\ninline void Work () {\n\t#define rint rint<int>() // \u58f0\u660e\u5feb\u8bfb\u8bfb\u5165\u7c7b\u578bint \n\tn = rint, q = rint;\n\tfor ( Int i = 1; i <= n; ++ i ) {\n\t\tp[i] = rint;\n\t} // \u4ee5\u4e0a\u662f\u8f93\u5165 \n\tBuilding_SegTree.Build ( 1, 1, n, n << 2 );\n\tArmor_SegTree.Build ( 1, 1, n, p, n << 2 ); // \u521d\u59cb\u5316\u4e24\u68f5\u6811 \n\tLL Ans = 0;\n\twhile ( q -- ) {\n\t\tchar Cmd = getchar ();\n\t\tif ( Cmd == 'A' ) {\n\t\t\tint l = rint, r = rint, a = rint;\n\t\t\tArmor_SegTree.Attack ( 1, l, r, -a ); // \u6ce8\u610f\u54e6\uff0c\u51fd\u6570\u91cc\u662f+=\uff0c\u8fd9\u91cc\u53d6\u8d1f \n\t\t\tBuilding_SegTree.Attack ( 1, l, r, a ); // \u653b\u51fb \n\t\t\twhile ( Armor_SegTree.Tree[1].SectionMin <= 0 ) { // \u5faa\u73af\u6e05\u7406\u6240\u6709\u7834\u76fe\u5efa\u7b51(\u653e\u5fc3\u5566\u4e0d\u4f1aTLE) \n\t\t\t\tint Breakedpos = Armor_SegTree.Query_SectionMin ( 1 ); // \u83b7\u53d6\u7834\u76fe\u5efa\u7b51index \n\t\t\t\tBreaked[Breakedpos] = true; // \u6807\u8bb0\u4e3a\u7834\u76fe \n\t\t\t\tBuilding_SegTree.ClearBreaked ( 1, Breakedpos ); // \u5728Building\u6811\u4e2d\u4fdd\u5b58\u5b83\u53d7\u4f24\u503c\uff0c\u5e76\u91cd\u7f6e(\u91cd\u7f6e\u540e\u7684\u503c\u5c31\u662f\u53cc\u500d\u4f24\u5bb3\u5566) \n\t\t\t}\n\t\t} else if ( Cmd == 'Q' ) {\n\t\t\tint x = rint;\n\t\t\tLL ret = Building_SegTree.Query ( 1, x ) % Mod;\n\t\t\tif ( Breaked[x] ) { // \u7834\u76fe\u5efa\u7b51\uff0cans = \u7834\u76fe\u524d + 2 * \u7834\u76fe\u540e\n\t\t\t\tret = ( ( ret << 1 ) % Mod + Unbreak[x] ) % Mod; // \u7ebf\u6bb5\u6811\u91cc\u57fa\u672c\u4e0d\u7528\u53d6\u6a21\uff0c\u8fd9\u91cc\u6700\u597d\u53d6\u6a21\u54df \n\t\t\t}\n\t\t\t#ifdef _DEBUG // \u8c03\u8bd5\u7528\u6765\u8f93\u51fa\u9636\u6bb5\u7b54\u6848 \n\t\t\twint ( ret ), putchar ( '\\n' );\n\t\t\t#endif\n\t\t\tAns = ( Ans + ret ) % Mod;\n\t\t} else { // \u8bfb\u5230\u795e\u5947\u7684\u5b57\u7b26(\u4e07\u4e00\u6570\u636e\u6709\u4e27\u5fc3\u75c5\u72c2\u7684\u884c\u672b\u7a7a\u683c)\uff0c\u4e0d\u8ba1\u5165\u64cd\u4f5c\u603b\u6570 \n\t\t\t++ q;\n\t\t}\n\t}\n\twint ( Ans % Mod ), putchar ( '\\n' );\n}\n\nint main () {\n//\tFileOpen ( \"\" );\n\tWork ();\n//\tFileClose ();\n\treturn 0;\n}\n\n// end. \u6211\u7684\u4ee3\u7801\u98ce\u683c\u597d\u4e0d\u597d\u770b\uff1f(\u5938\u6211\u5938\u6211)\n// \u6559\u7ec3\u5927\u5927\u8ba9\u6211\u4eec\u5199\u9898\u89e3\uff0c\u6240\u4ee5\u5c06\u4f1a\u9ad8\u4ea7\u54e6\uff01 \n```",
        "postTime": 1555232437,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2667 \u3010[TJOI2012]\u9632\u5fa1\u3011"
    }
]