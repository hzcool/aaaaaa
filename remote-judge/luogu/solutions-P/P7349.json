[
    {
        "content": "\u8fd9\u4e2a\u9898\u7a7a\u95f4 $O(\\dfrac {n^2} w)$ \u7684\u505a\u6cd5\u5373\u4f7f\u4f60\u5206\u6279\u505a\u4e5f\u4f1a\u88ab\u5361\u5e38\u3002\n\n\u8003\u8651\u5148\u7528 $\\texttt{bitset}$ \u505a\u4f20\u9012\u95ed\u5305\uff0c\u5177\u4f53\u5c31\u662f\u6bcf $w$ \u4e2a\u5206\u4e3a\u4e00\u5757\uff0c\u8868\u793a\u5728\u4e00\u4e2a `ull` \u91cc\u9762\uff0c\u7136\u540e\u6bcf\u6b21\u4f7f\u7528\u62d3\u6251\u5e8f\u6765\u8ba1\u7b97\u53ef\u8fbe\u6027\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\dfrac {n^2} w)$\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u77e9\u9635\uff0c\u7136\u540e\u539f\u95ee\u9898\u5c31\u53d8\u4e3a\u4e86\u4e8c\u7ef4\u6570\u70b9\uff0c\u505a\u6cd5\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/j7hk9tz7.png)\n\n---\n\n\u5bf9\u4e8e\u84dd\u8272\u7684\u90e8\u5206\uff0c\u6211\u4eec\u8003\u8651\u8ba1\u7b97 $\\dfrac n w$ \u8f6e\uff0c\u6bcf\u4e00\u8f6e\u8ba1\u7b97\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u662f\u5426\u80fd\u88ab\u5f53\u524d\u7684 $w$ \u4e2a\u70b9\u5230\u8fbe\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u4e00\u6b21\u53ef\u4ee5\u6c42\u51fa\u5982\u4e0b\u90e8\u5206\u7684\u503c\uff08\u7ea2\u8272\u4ee3\u8868\u6211\u4eec `ull` \u5b58\u50a8\u7684\u4e1c\u897f\uff09\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/vgbqkp6o.png)\n\n\u77e5\u9053\u8fd9\u4e2a\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u51b3\u84dd\u8272\u90e8\u5206\u7684\u95ee\u9898\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u4e0b\u5f80\u4e0a\u626b\u63cf\u7ebf\uff0c\u6bcf\u4e00\u6b21\u5c31\u662f\u5f62\u5982\u52a0\u4e00\u884c\uff0c\u6c42\u4e8c\u7ef4\u524d\u7f00\u548c\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u65b0\u589e\u7684\u4e00\u884c\u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u53ef\u4ee5\u505a\u5230\u5355\u8f6e\u7a7a\u95f4\u590d\u6742\u5ea6\u548c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\dfrac {n^2} w + q)$\uff0c\u7a7a\u95f4\u7ebf\u6027\u3002\n\n---\n\n\u5bf9\u4e8e\u6a59\u8272\u90e8\u5206\uff0c\u6211\u4eec\u89e3\u51b3\u5b83\u7684\u65b9\u6cd5\u672c\u8d28\u5c31\u662f\u84dd\u8272\u8f6c\u4e86 $90$\u00b0\uff0c\u672c\u8d28\u76f8\u540c\u3002\n\n---\n\n\u5bf9\u4e8e\u7eff\u8272\u90e8\u5206\uff0c\u6211\u4eec\u53d1\u73b0\u5b83\u53ea\u662f\u4e00\u4e2a $O(w^2)$ \u7684\u77e9\u9635\uff0c\u7136\u540e\u6709\u56e0\u4e3a\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u662f\u4e00\u4e2a\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u7684 `ull`\uff0c\u521a\u597d `and` \u4e00\u4e0b\u6211\u4eec\u8981\u6c42\u7684\u8303\u56f4\u518d `popcount` \u4e00\u4e0b\u5373\u53ef\uff0c\u6ce8\u610f\u5230 `1ull << 64` \u662f $\\text{UB}$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\dfrac {n^2} w + qw)$\u3002\n\n----\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u5728 $O(\\dfrac{n^2} w + qw)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u4e86\u8be5\u95ee\u9898\uff0c\u56e0\u4e3a\u8981\u79bb\u7ebf\u6240\u4ee5\u7a7a\u95f4 $O(n+q)$\uff0c\u7cbe\u7ec6\u5b9e\u73b0\u53ef\u4ee5\u901a\u8fc7\u3002\n\n```cpp\n#pragma GCC target(\"popcnt\")\ntemplate <typename X, typename Y>\ninline void readp(pair<X, Y> &p) {\n    read(p.first), read(p.second);\n}\ntemplate <typename T>\ninline void clear(T &x) {\n    T y;\n    swap(x, y);\n}\nconst int N = 1e5 + 1000, Q = 1e6 + 10;\nvector<int> vec[N];\null f[N], f2[N];\nint du[N], n, m, cur, fa[N], T, L, R, q[N], l, r, id[N], tcnt, bfncnt;\nll ans[Q];\nvector<pair<int, int> > q1[N], q2[N];\nvector<tuple<int, int, int> > q3[N];\ninline void ptopo() {\n    l = 1, bfncnt = r = 0;\n    for (int i = 0; i < n; i++)\n        if (!du[i]) q[++r] = i;\n    int u;\n    while (l <= r) {\n        id[++bfncnt] = u = q[l++];\n        for (int v : vec[u]) {\n            f2[v] |= f2[u];\n            if (!--du[v]) q[++r] = v;\n        }\n    }\n}\ninline void topo() {\n    memset(f, 0, sizeof(f)), memset(f2, 0, sizeof(f2));\n    for (int i = L; i <= R; i++) f[i] |= 1ull << i - L, f2[i] |= 1ull << i - L;\n    for (int i = n; i; i--)\n        for (int v : vec[id[i]]) f[id[i]] |= f[v];\n    for (int i = 1; i <= n; i++)\n        for (int v : vec[id[i]]) f2[v] |= f2[id[i]];\n}\nll p[N], p2[N], val[N], nval[N];\ninline void solve() {\n    topo();\n    for (int i = 0; i < n; i++)\n        val[i] = __builtin_popcountll(f[i]),\n        nval[i] = __builtin_popcountll(f2[i]);\n    for (int i = 1; i < n; i++) {\n        if ((i >> 6) == (i - 1 >> 6)) nval[i] += nval[i - 1];\n        val[i] += val[i - 1];\n    }\n    for (int i = 0; i < n; i++) p[i] += val[i], p2[i] += nval[i];\n    for (auto [x, id] : q1[cur])\n        if (id >= 1)\n            ans[id] += p[x];\n        else\n            ans[-id] -= p[x];\n    for (auto [x, id] : q2[cur])\n        if (id >= 1)\n            ans[id] += p2[x];\n        else\n            ans[-id] -= p2[x];\n    for (auto [x, y, id] : q3[cur]) {\n        ull pre = ((1ull << y) - 1ull);\n        for (int i = (x >> 6) << 6; i <= x; i++) {\n            if (y == 64) {\n                if (id >= 1)\n                    ans[id] += __builtin_popcountll(f[i]);\n                else\n                    ans[-id] -= __builtin_popcountll(f[i]);\n            } else {\n                if (id >= 1)\n                    ans[id] += __builtin_popcountll(pre & f[i]);\n                else\n                    ans[-id] -= __builtin_popcountll(pre & f[i]);\n            }\n        }\n    }\n}\ninline void solve(int r, int h, int id, int f) {\n    if (r >= 64) q1[(r >> 6) - 1].push_back({h, id * f});\n    if (h >= 64) q2[(h >> 6) - 1].push_back({r, id * f});\n    q3[r >> 6].push_back({h, r - ((r >> 6) << 6) + 1, id * f});\n}\nint main() {\n    read(n), read(m);\n    int u, v;\n    for (v = 1; v < n; v++) read(u), --u, vec[u].push_back(v), ++du[v];\n    for (int i = 1; i <= m; i++)\n        read(u), read(v), --u, --v, vec[u].push_back(v), ++du[v];\n    ptopo(), read(T);\n    for (int i = 1; i <= T; i++) {\n        read(u), read(v), --u, --v;\n        solve(v, v, i, 1);\n        if (u)\n            solve(u - 1, u - 1, i, 1), solve(u - 1, v, i, -1),\n                solve(v, u - 1, i, -1);\n    }\n    for (int i = 0; i <= (n >> 6); i++) L = (cur = i) << 6, R = L + 63, solve();\n    for (int i = 1; i <= T; i++) write(ans[i]), putc('\\n');\n    do_flush();\n    return 0;\n}\n```",
        "postTime": 1683806936,
        "uid": 615348,
        "name": "zhouershan",
        "ccfLevel": 7,
        "title": "P7349 \u300cMCOI-04\u300dDream and the Multiverse sol"
    }
]