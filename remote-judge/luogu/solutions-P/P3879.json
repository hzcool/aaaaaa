[
    {
        "content": "#### \u8fd9\u9053\u9898\u770b\u4e00\u773c\u5c31\u77e5\u9053\u8fd9\u662f\u4e2a$STL$\u5e93\u91cc\u7684$map$\n- \u4f46\u662f\u3002\u3002\n- ~~\u795e\u7287\u6211~~\u9009\u62e9\u4e86$Trie$\u6811\uff0c$Hahahaha...$\n- \u53ef\u80fd\u6ca1\u6709$dalao$\u53d1\u8fd9\u4e2a\u9898\u76ee\u7684$Trie$\u6811\u9898\u89e3\u662f\u56e0\u4e3a\u592a\u9ebb\u70e6\u4e86\u3001\u3001\u3001\u4e0d\u8fc7$A+B$ $Problen$\u90fd\u6709\u53d1\u5404\u79cd~~\u770b\u4e0d\u61c2~~\u7684\u9898\u89e3\u7684\u4eba\uff0c\u6211\u53d1\u4e2a$Trie$\u6811\u4e5f\u6ca1\u6709\u4ec0\u4e48\u8bf4\u4e0d\u8fc7\u53bb\u7684\u5427\u3001\u3001\n\n\n------------\n\n\n------------\n## $*******$ $dalao$ \u4e13\u7528\u5206\u5272\u7ebf$******$\n\n------------\n\n\n------------\n\u53ef\u80fd\u6709\u7684\u5c0f\u670b\u53cb\u4eec\u8fd8\u4e0d\u77e5\u9053$Trie$\u6811\u662f\u4ec0\u4e48(~~\u867d\u7136\u6211\u4e5f\u662f\u521a\u521a\u624d\u77e5\u9053~~)\uff0c\u6211\u8fd8\u662f\u5148\u8bb2\u4e00\u4e0b$Trie$\u6811\u5427\u3002\u3002\n\n$To$  $begin$  $with$\uff0c\u9700\u8981\u4e86\u89e3\u4e00\u4e0b$Trie$\u6811\u662f\u5e72\u4ec0\u4e48\u7684\uff0c$Trie$\u6811\u53c8\u53eb\u505a\u5b57\u5178\u6811\u3002\u5b57\u5178\uff0c\u5c31\u662f\u7528\u6765\u67e5\u5b57\u7684\uff0c\u987e\u540d\u601d\u4e49\uff0c$Trie$\u6811\u4e5f\u662f\u7528\u6765\u67e5\u5b57\u6216\u8005\u5355\u8bcd\u7684\u3002\n\n\u90a3\u4ec0\u4e48\u65f6\u5019\u4f1a\u7528\u5230$Trie$\u6811\u5462\uff1f\n\n\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff1a\n1. \u5c31\u50cf\u8fd9\u9053\u9898\u76ee\u4e00\u6837\uff0c\u67e5\u5bfb\u8fd9\u4e2a\u5355\u8bcd\u5728\u4e00\u53e5\u8bdd\u4e2d\u51fa\u73b0\u8fd8\u662f\u6ca1\u6709\u51fa\u73b0\uff0c\u975e\u5e38\u7b80\u5355\u4e48\uff0c$map$\u554a\uff0c~~\u77ed\u5c0f\u7cbe\u5e72~~\n2. \u4f46\u662f\uff0c\u5982\u679c\u7ed9\u51fa$n$\u4e2a\u5355\u8bcd\u548c$m$\u7ec4\u8be2\u95ee\uff0c\u8be2\u95ee\u662f\u591a\u5c11\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\uff0c\u90a3\u4e48$map$\u7684\u8bdd\u5c31\u5b8c\u7f8e\u7684$TLE$\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u4f7f\u7528\u4e45\u8fdd\u7684$Trie$\u6811\u4e86\uff01\uff01\n\n$Second$\uff0c\u5148\u6a21\u62df\u4e00\u4e0b$Trie$\u6811\u7684\u5404\u79cd\u64cd\u4f5c\u5427\u3002\n\n\n\u5982\u679c\u8981\u63d2\u5165\n\n$CAI,CHANG,CHAO,CHEN,LAN,LI,LIU,LONG,$\n\n$WANG,WEN,WU,YANG,YUN,ZHAO$\u8fd9\u4e9b\u5b57\u7b26\uff0c\n\n\u6240\u5efa\u51fa\u7684$Trie$\u6811\u5c31\u662f\u8fd9\u6837\u7684\u3002\n\n## \u5448\u4e0a\u56fe\u6765\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/15735.png)\n\n### \u6ce8\u610f\uff1a$Trie$\u6811\u7684\u6839\u8282\u70b9\u662f\u7a7a\u7684\uff0c\u7136\u540e\u5728\u5355\u8bcd\u7684\u672b\u5c3e\u6709\u4e2a\u6807\u8bb0\uff0c\u8fd9\u70b9\u4e8b\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\n\n$Then$\uff0c\u4ecb\u7ecd\u4e00\u4e0b$Trie$\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u5427\u3002\n\n$A.$ $Insert$\u63d2\u5165\uff1a\n1. \u9996\u5148\u8981\u7ed9\u6240\u6709\u7684\u5b57\u6bcd\u4e00\u4e2a\u7f16\u53f7\uff0c\u5176\u5b9e\u5e76\u4e0d\u7528\u4ece$a...z$\u5168\u90e8\u90fd\u7f16\u53f7\uff0c\u4f60\u4f1a\u53d1\u73b0\u5176\u5b9e\u6709\u5f88\u591a\u5b57\u6bcd\u662f\u7528\u4e0d\u5230\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5224\u65ad\u6811\u4e2d\u6709\u6ca1\u6709\u8fd9\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\uff0c\u7136\u540e\u8fdb\u884c\u7f16\u53f7\u3002\n2. \u7f16\u53f7\u5b8c\u6210\u540e\u66f4\u65b0\u5f53\u524d\u4f4d\u7f6e\uff0c\u63a5\u7740\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5c42\u3002\n\n#### \u4ee3\u7801\u7edf\u4e00\u5728\u540e\u8fb9\u7edf\u4e00\u7c98\u4e0a\n$B.$ $Check$\u67e5\u8be2\uff1a\n\u4ece$Trie$\u6811\u7684\u6839\u5f00\u59cb\uff0c\u770b\u6709\u6ca1\u6709\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u76f4\u63a5$break$\u6389\uff0c\u5426\u5219\u5c31\u8ddf\u65b0\u5f53\u524d\u4f4d\u7f6e\uff0c\u8fdb\u5165\u4e0b\u4e00\u5c42\u3002\n\n\u5176\u5b9e$Trie$\u6811\u7684\u5e38\u7528\u64cd\u4f5c\u5c31\u8fd9\u4e24\u4e2a\uff0c\u5176\u5b9e$Trie$\u6811\u6d89\u53ca\u7684\u9898\u76ee\u4e5f\u4e0d\u7b97\u5f88\u591a\uff0c\u5176\u5b9e\u5b66\u4e60$Trie$\u6811\u8fd8\u53ef\u4ee5\u4e3a\u4ee5\u540e\u7684$AC$\u81ea\u52a8\u673a(~~\u5c31\u662f\u7528\u4e86\u8fd9\u4e2a\u7b97\u6cd5\u5c31\u53ef\u4ee5\u81ea\u52a8AC\u4e86~~)\u505a\u4e00\u4e0b\u94fa\u57ab\u3002\n\n----\n\n----\n\u597d\u4e86\uff0c\u5bf9\u4e8e$Trie$\u6811\u7684\u4ecb\u7ecd\u5c31\u5230\u8fd9\u91cc\u5427\uff0c\u4e0b\u9762\u5c31\u8bf4\u8fd9\u4e2a\u9898\u76ee\u4e86\uff0c\u5176\u5b9e\u8fd9\u4e2a\u9898\u76ee\u5c31\u662f\u4e00\u9053\u88f8\u88f8\u7684$Trie$\u6811\u6a21\u677f\uff0c\u5199\u51fa\u4e0a\u8fb9\u4ecb\u7ecd\u7684\u4e24\u4e2a\u64cd\u4f5c\uff0c\u518d\u52a0\u4e0a\u70b9~~\u9ad8\u6df1~~\u7684\u4e1c\u897f\u5c31\u53ef\u4ee5$AC$\u4e86\u3002\n\n\u4e0b\u8fb9\u76f4\u63a5\u7c98\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nchar s[10010];\nint nex[500010][26],n,cnt=0;\nbool b[500010][110];\ninline int read()\n{\n    int k=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n    while(ch>='0'&&ch<='9')\n\t{\n\t\tk=k*10+ch-'0';\n\t\tch=getchar();\n\t}\n    return k*f;\n}\ninline void insert(int x)\n{\n    scanf(\"%s\",s+1);\n\tint l=strlen(s+1);\n    int now=0;\n    for(int i=1;i<=l;i++)\n\t{\n        int p=s[i]-'a';\n        if(!nex[now][p])         //\u5982\u679c$Trie$\u6811\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\u5c31\u8fdb\u884c\u7f16\u53f7\n\t\t\tnex[now][p]=++cnt;   //\u4e0a\u6587\u4e2d\u8bf4\u5230\u7684\u7f16\u53f7 \n        now=nex[now][p];         //\u63a5\u7740\u6df1\u5165\u4e00\u5c42\uff0c\u66f4\u65b0\u73b0\u5728\u7684\u4f4d\u7f6e \n    }\n    b[now][x]=1;                 //\u8fd9\u4e2a\u5355\u8bcd\u5728\u7b2cx\u884c\u51fa\u73b0\u4e86\n}\ninline void check()\n{\n    scanf(\"%s\",s+1);\n\tint l=strlen(s+1);\n    int now=0,flag=1;\n    for(int i=1;i<=l;i++)\n\t{\n        int p=s[i]-'a';\n        if(!nex[now][p])         //\u5982\u679c\u5728Trie\u6811\u4e2d\u6ca1\u6709\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5break\u6389\u4e86 \n\t\t{\n\t\t\tflag=0;\n\t\t\tbreak;\n\t\t}\n        now=nex[now][p];         //\u5426\u5219\u5c31\u66f4\u65b0\u4f4d\u7f6e \n    }\n    if(flag)\n\t\tfor(int i=1;i<=n;i++)    //\u9898\u9762\u4e0a\u8bf4\u6309\u5b57\u5178\u5e8f\u8f93\u51fa \n\t\t\tif(b[now][i])\n\t\t\t\tprintf(\"%d \",i); //\u8f93\u51fa\u5728\u54ea\u4e9b\u53e5\u5b50\u4e2d\u51fa\u73b0\u8fc7 \n    puts(\"\");                    //\u76f8\u5f53\u4e8eprintf(\"\\n\");\u5176\u5b9e\u8fd9\u4e2a\u6761\u4ef6\u5f88\u5bb9\u6613\u770b\u4e0d\u5230\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u554a\uff01\uff01 \n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n\t{\n        int x=read();\n        for(int j=1;j<=x;j++)    //\u4e00\u4e2a\u5355\u8bcd\u4e00\u4e2a\u5355\u8bcd\u7684\u63d2\u5165Trie\u6811\u91cc \n\t\t\tinsert(i);\n    }\n    int m=read();\n    for(int i=1;i<=m;i++)\n\t\tcheck();\n    return 0;\n}\n```\n## \u611f\u8c22\u5927\u5bb6\u7684\u89c2\u770b\uff0c\u4e0a\u65b9\u70b9\u8d5e\u54e6!!",
        "postTime": 1521270982,
        "uid": 66635,
        "name": "Ervin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u6211\u5148\u8bf4\u4e00\u53e5\uff1a\n## \u6211\u6c38\u8fdc\u90fd\u559c\u6b22~~Stella~~STL\n_______\n\n\u8fd9\u4e2a\u9898\uff0c\u5f88\u660e\u663e\u5c31\u662f\n### ~~trie\u6811~~ \n### ~~hash~~ \n### map+vector\n_______\n\n## \u601d\u8def\uff1a\n\n\u76f4\u63a5\u7528map<string,vecotr<int> > \u4ee3\u66ff\u8fd9\u9898\u91cc\u7684trie\u6811\uff0c\u6ce8\u610f\u5f00map\u7684\u65f6\u5019\u540e\u9762\u4e24\u4e2a> >\u4e4b\u95f4\u8981\u6709\u4e00\u4e2a\u7a7a\u683c\u3002\n\n\u7528vector\u8bb0\u5f55\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u53e5\u5b50\u4f4d\u7f6e\uff0c\u6bcf\u9047\u5230\u4e00\u4e2a\u5c31\u628a\u8be5\u5355\u8bcd\u6240\u51fa\u73b0\u7684\u53e5\u5b50\u7684\u7f16\u53f7\u538b\u5165\u5bf9\u5e94\u7684vector\u91cc\u3002\n\n\u4e8e\u662f\u4e4e= =\u8fd9\u5c31\u662f\u6700\u66b4\u529b\u7684\u60f3\u6cd5\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5229\u7528\u4e00\u4e2a\u6876\u6765\u53bb\u91cd\u5c31\u5b8c\u6210\u4e86\u9898\u76ee\u91cc\u7684\u8981\u6c42\u3002\uff08~~\u6211\u4f1a\u8bf4\u6211\u662f\u56e0\u4e3a\u6ca1\u770b\u89c1\u8fd9\u4e2a\u8981\u6c42\u7b2c\u4e00\u6b21\u63d0\u4ea4\u7206\u96f6\u561bqaq~~\uff09\n_______\n\n## Code\uff1a\n```\n#include <map>\n#include <vector>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 100001;\nint n, m, num, cnt[maxn];\nstring s;\nmap<string,vector<int> >a;\nint main()\n{\t\n\tstd::ios::sync_with_stdio(false);//\u8981\u5173\u95ed\u540c\u6b65\uff0c\u5feb\u5f88\u591a\n\tcin>>n;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tcin>>num;\n\t\tfor(int j = 1; j <= num; j++)\n\t\t{\n\t\t\tcin>>s;\n\t\t\ta[s].push_back(i);//vector\u7684\u538b\u5165\u64cd\u4f5c\u3002\u6211\u6bcf\u4e00\u4e2a\u5355\u8bcd\u5c31\u662f\u4e00\u4e2avector\u3002\n\t\t}\n\t}\n\tcin>>m;\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tcin>>s;\n\t\tmemset(cnt,0,sizeof(cnt));//cnt\u5c31\u662f\u53bb\u91cd\u7684\u6876\u3002\u6bcf\u7528\u4e00\u6b21\u8f93\u51fa\u4e0d\u540c\u7684\u67e5\u8be2\u8981\u6e05\u96f6\u3002\n\t\tfor(int j = 0; j < a[s].size(); j++)//a[s].size()\u662fvector\u81ea\u52a8\u8fd4\u56de\u5176\u957f\u5ea6\u7684\u51fd\u6570\u3002\n\t\tif(cnt[a[s][j]] == 0)\n\t\t{\n\t\t\tcout<<a[s][j]<<\" \";//\u6211\u4eec\u5b58\u7684\u5c31\u662f\u7b54\u6848\u6240\u6c42\u7684\u6240\u51fa\u73b0\u7684\u53e5\u5b50\u7684\u7f16\u53f7\uff0c\u6240\u4ee5\u76f4\u63a5\u8f93\u51fa\u4e0d\u591abb\u3002\u800c\u4e14\u5b58\u7684\u65f6\u5019\u4e5f\u662f\u6309\u987a\u5e8f\u6240\u8bb0\u5f55\u7684\u3002\n\t\t\tcnt[a[s][j]]++;//\u522b\u5fd8\u4e86\u7528\u6876\u53bb\u91cd\uff01\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n```\n_______\n## \u7ed3\u5c3e\uff1a\n\n\u6211\u7684\u4ee3\u7801\u5e94\u8be5\u662f\u5f88\u77ed\u7684\u4e86\uff0c\u540c\u5b66\u4eec\u5e94\u8be5\u8981\u6709\u5229\u7528stl\u7684\u610f\u8bc6\uff0c\u4f46\u4e0d\u80fd\u5b8c\u5168\u4f9d\u9760stl\uff0c\u6bd5\u7adf\u6709\u5f88\u591a\u4e1c\u897f\u4e5f\u662fstl\u73b0\u5728\u6240\u63d0\u4f9b\u4e0d\u4e86\u7684\u3002\n\n\u4e24\u4e2aSTL\u5e94\u7528\u4f7f\u4ee3\u7801\u7b80\u77ed\u4e86\u5f88\u591a\u3002\u7136\u800c\u8fd8\u662f\u90a3\u53e5\u8bdd\uff0c\u5929\u4e0a\u4e0d\u4f1a\u6389\u9985\u997c\uff0c\u7a0b\u5e8f\u7684\u6548\u7387\u8fd8\u662f\u6709\u6240\u4e0b\u964d\u7684\u3002\u7136\u800c\uff0c\u6548\u7387\u4e0d\u662f\u5168\u90e8\uff0c\u4eba\u4eec\u5b81\u53ef\u727a\u7272\u4e09\u500d\u6548\u7387\u7528Java\u800c\u4e0d\u7528C\u8bed\u8a00\u5c31\u662f\u6700\u597d\u7684\u4f8b\u5b50\uff08from_ Charles E Leiserson_\uff09\uff0c\u5177\u4f53\u53d6\u820d\u8981\u770b\u60c5\u51b5\u3002\n\n\u8be5\u624b\u6253\u7684\u8fd8\u662f\u8981\u4f1a\u7684\u3002~~trie\u6811\u8fd8\u662f\u8981\u4f1a\u7684\uff01~~\n\n\u6709\u4ec0\u4e48\u95ee\u9898\u4ea4\u6d41\u6b22\u8fce+QQ 935145183/3203600070",
        "postTime": 1529739136,
        "uid": 28084,
        "name": "Misaka_Azusa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\n[\u66f4\u4f73\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/enceladus-return0/)\n\n------------\n\n\u8fd9\u7bc7\u9898\u89e3\u6c42\u8fc7\uff0c\u867d\u7136\u6ca1\u6709tire\u7684\u8be6\u7ec6\u8bb2\u89e3\uff0c\u4f46\u4f1a\u544a\u8bc9\u5927\u5bb6\u6570\u636e\u66f4\u65b0\u540e\u7528tire\u600e\u4e48\u8fc7\uff0c@\u7ba1\u7406\u5927\u5927\u3002\n\n\n>\u8fd9\u4e2a\u9898\u7684\u6570\u636e**\u66f4\u65b0\u4e86**\u5462\u3002**\u6240\u4ee5\u4e0b\u9762\u6240\u6709\u5173\u4e8etire\u7684\u9898\u89e3\u90fd\u8fc7\u4e0d\u4e86\u4e86**\u3002\u4e0d\u8fc7\u628atire\u8bb2\u7684\u5f88\u8be6\u7ec6\u3002\u6240\u4ee5\u6211\u5c31\u4e0d\u591a\u8bb2\u4e86\u3002\n\n\u60f3\u7ec3\u4e60tire\u7684\u6211\u88ab\u5361\u7684\u4e00\u6123\u6123\u7684qaq\u3002\u6570\u7ec4\u5f00\u7684\u5c0f\u4e86\u662fWA#11.\u5f00\u62101000\u5c31\u662f\u524d\u9762\u5341\u4e2a\u70b9\u968f\u673aMLE\u3002\n\n\u5177\u4f53\u600e\u4e48\u7528tire\u8fc7\u8fd9\u4e2a\u9898\u5c31\u662f**\u628a\u6807\u8bb0\u51fa\u73b0\u7684bool\u6570\u7ec4\u6539\u6210bitset**\uff0c\u8282\u770132\u500d\u7a7a\u95f4~~\uff0c\u4f60\uff0c\u503c\u5f97\u62e5\u6709\u3002~~\n\n_\u5c31\u662f\u522b\u5fd8\u4e86\u5199bitset\u7684\u4e13\u7528\u5934\u6587\u4ef6\u3002\u5b9a\u4e49\u4e00\u4e2abitset\u540e\u5f53\u4e8c\u7ef4\u6570\u7ec4\u7528\u5c31\u597d\u5566\u3002_\n\n\u6700\u540e\u518d\u4e22\u4e00\u4e2a\u535a\u5ba2\n[qwq](https://www.cnblogs.com/zwfymqz/p/8696631.html)\n\n\u8fd9\u91cc\u6709bitset\u7684\u8be6\u7ec6\u7528\u6cd5\uff0c\u60f3\u5b66\u7684\u540c\u5b66\u4e86\u89e3\u4e00\u4e0b\u3002\n\n------------\n\n\u6700\u540e\u662f\u4ee3\u7801\uff0c\u9664\u4e86bitset\uff0c\u5c31\u662f\u666e\u901a\u7684tire\u5566\u3002\n\n$Code$\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include <bitset>\n\nusing namespace std;\n\nint n,m;\nchar s[1001];\nint l;\nint tot=0;\nint tri[300007][26];\nbitset<1001> b[500007];\n\n\ninline void insert(char *s,int x){\n    int rt=0;\n    for(int i=0;s[i];i++){\n        int v=s[i]-'a';\n        if(!tri[rt][v]){\n            tri[rt][v]=++tot;\n        }\n        rt=tri[rt][v];\n    }\n    b[rt][x]=1;\n}\n\ninline void query(char *s){\n    int rt=0;\n    for(int i=0;s[i];i++){\n        int v=s[i]-'a';\n        if(!tri[rt][v]){\n            cout<<' '<<endl;\n            return;\n        }\n        rt=tri[rt][v];\n    }\n    for(int i=1;i<=n;i++){\n        if(b[rt][i]==1){\n            cout<<i<<' ';\n        }\n    }\n    cout<<endl;\n}\n\nint main(){\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        cin>>l;\n        for(int j=1;j<=l;j++){\n            cin>>s;\n            insert(s,i);\n        }\n    }\n    cin>>m;\n    for(int i=1;i<=m;i++){\n        cin>>s;\n        query(s);\n    }\n    return 0;\n}\n```",
        "postTime": 1540900424,
        "uid": 88127,
        "name": "enceladus",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "> \u524d\u8a00\n\n#### $\\rm{STL}\\bold{\\text{\u5927\u6cd5\u597d\uff01}}$\n\n---\n\n> \u601d\u8def\n\n\u73b0\u6709\u9898\u89e3\u91cc\u597d\u50cf\u5f88\u591a\u7528$\\rm{map}+\\rm{vector}$\u518d\u6876\u53bb\u91cd\u7684\u2026\u2026\uff1f\n\n\u65e2\u7136\u7528\u4e86$\\rm{STL}$\uff0c**\u4e3a\u4ec0\u4e48\u4e0d\u8bd5\u8bd5$\\rm{set}$\u5462\uff1f**\n\n>> $\\rm{Wait,\\ }\\rm{set}$\u662f\u4ec0\u4e48\uff1f\n\n$\\rm{set}$\u662f$\\rm{set}$\u5e93\u5185\u5c01\u88c5\u7684\u4e00\u4e2a\u5bb9\u5668\uff0c\u987e\u540d\u601d\u4e49\uff08\uff1f\uff09\u5c31\u662f\u4e00\u4e2a\u96c6\u5408\uff08~~\u6876~~\uff09\uff0c\u6ee1\u8db3\u96c6\u5408\u7684\u6027\u8d28\u2014\u2014\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u5728\u4e00\u4e2a\u96c6\u5408\u5185\u6700\u591a\u51fa\u73b0\u4e00\u6b21\uff08~~\u8fd8\u4e0d\u5c31\u662f\u6876~~\uff09\uff0c\u5e76\u4e14\u5df2\u7ecf\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff08~~\u522b\uff0c\u8d8a\u8bf4\u8d8a\u6876\u4e86~~\uff09\u3002\n\n>> \u90a3\u4e48$\\rm{set}$\u8be5\u600e\u4e48\u7528\uff1f\n\n\u548c$\\rm{STL}$\u4e2d\u7684\u5176\u5b83\u5bb9\u5668\u4e00\u6837\uff0c\u4e00\u4e2a\u6240\u6709\u5143\u7d20\u4e3a\u6574\u578b\u7684$\\rm{set}$\u8fd9\u6837\u5b9a\u4e49\uff1a\n\n```cpp\nset<int> s;\n```\n\n\u53e6\u5916\uff0c$\\rm{set}$\u5e93\u4e2d\u8fd8\u5c01\u88c5\u4e86\u4ee5\u4e0b\u51fd\u6570\uff1a\n\n- `s.insert()` \u2014\u2014 \u628a\u4e00\u4e2a\u5143\u7d20\u63d2\u5165$\\rm{s}$\uff1b\n- `s.clear()` \u2014\u2014 \u6e05\u7a7a$\\rm{s}$\uff1b\n- `s.empty()` \u2014\u2014 \u8fd4\u56de$\\rm{s}$\u662f\u5426\u4e3a\u7a7a\uff1b\n- `s.size()` \u2014\u2014 \u8fd4\u56de$\\rm{s}$\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff1b\n- `s.count(int n)` \u2014\u2014 \u8fd4\u56de\u5143\u7d20$\\rm{n}$\u662f\u5426\u5728$\\rm{s}$\u4e2d\uff1b\n- \u4ee5\u53ca\u8fed\u4ee3\u5668\u4e3a\u57fa\u7840\u7684`s.begin()`\u53ca`end()`\u3002\n\n\u987a\u4fbf\u63d0\u4e00\u4e0b$\\rm{set}$\u7684\u904d\u5386\uff0c\u548c\u5176\u5b83\u5bb9\u5668\u4e00\u6837\u4e5f\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u8fed\u4ee3\u5668\uff08$\\rm{iterator}$\uff09\uff1a\n\n```cpp\nset<int>::iterator iter; //\u8fed\u4ee3\u5668\u5b9a\u4e49\u65b9\u6cd5\niter=s.begin(); //\u5c06\u8fed\u4ee3\u5668\u6307\u5411s\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\nwhile(iter!=s.end()) //\u53ea\u8981\u8fed\u4ee3\u5668\u6ca1\u6709\u6307\u5411s\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\n{\n\tcout<<*iter; //\u56e0\u4e3a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u662f\u5143\u7d20\u7684\u5730\u5740\uff0c\u6240\u4ee5*iter\u5c31\u662f\u5143\u7d20\u7684\u503c\u4e86\n    iter++; //\u4f7f\u8fed\u4ee3\u5668\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\n}\n```\n\n\u7531\u4e8e$\\rm{set}$\u4e2d\u5143\u7d20\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u4ece\u5c0f\u5230\u5927\u628a$\\rm{s}$\u4e2d\u6240\u6709\u5143\u7d20\u8f93\u51fa\u3002\u5f53\u7136\uff0c\u8fd9\u4e2a\u5faa\u73af\u4e5f\u53ef\u4ee5\u7528\u66f4\u7b80\u77ed\u7684`for`\u5faa\u73af\u5b8c\u6210\u2014\u2014\n\n```cpp\nset<int>::iterator iter;\nfor(iter=s.begin();iter!=s.end();++iter)\n\tcout<<*iter;\n```\n\n\u6709\u4e86$\\rm{set}$\u8fd9\u4e2a\u5de5\u5177\uff0c\u518d\u52a0\u4e0a$\\rm{map}$\uff08\u559c\u95fb\u4e50\u89c1\uff1f\uff09\uff0c\u8fd9\u9053\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\u3002\n\n---\n\n> \u4ee3\u7801\u5b9e\u73b0\n\n\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a$\\rm{string}$\u6620\u5c04\u5230$\\rm{set}$\u7684$\\rm{map}$\u6765\u7edf\u8ba1\u4e00\u4e2a\u5355\u8bcd\u5728\u54ea\u51e0\u7bc7\u77ed\u6587\u4e2d\u51fa\u73b0\u8fc7\uff1a\n\n```cpp\nmap<string,set<int> > m; //\u4e24\u4e2a'>'\u4e4b\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5c11\n//\u8fd9\u91cc\u6211\u628am\u7528\u4f5cmap\u4e86\uff0c\u6240\u4ee5\u9898\u9762\u4e2d\u7684m\u540e\u9762\u4ee5p\u4ee3\u66ff\n```\n\n\u7136\u540e\u8fb9\u8f93\u5165\u628a\u77ed\u6587\u7684\u5e8f\u53f7\u5b58\u5165$\\rm{set}$\u4e2d\uff1a\n\n```cpp\nfor(int i=1;i<=n;++i)//i\u4e3a\u77ed\u6587\u5e8f\u53f7\n{\n    int l;//\u5355\u8bcd\u4e2a\u6570\n    cin>>l;\n    for(int j=0;j<l;++j)\n    {\n        string s;//\u5355\u8bcd\n        cin>>s;\n        m[s].insert(i);\n    }\n}\n```\n\n\u67e5\u8be2\u4e5f\u5341\u5206\u65b9\u4fbf\uff1a\n\n```cpp\nwhile(p--) //\u66f4\u7b80\u77ed\u7684p\u6b21\u5faa\u73af\n{\n    string s;\n    cin>>s;\n    if(m.count(s)) //\u5982\u679cm\u4e2d\u5b58\u5728\u5143\u7d20s\n        for(iter=m[s].begin();iter!=m[s].end();++iter)\n            cout<<*iter<<\" \"; //\u4e0a\u9762\u63d0\u5230\u7684\u8fed\u4ee3\u5668\u904d\u5386\u7528\u6cd5\n    cout<<endl;\n}\n```\n\n\u6700\u540e\u662f\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<map>\n#include<set>\n#include<string>\n#include<iostream>\nusing namespace std;\n\nmap<string,set<int> > m;\nset<int>::iterator iter;\n\nint main()\n{\n    ios::sync_with_stdio(false); //\u5173\u95ed\u540c\u6b65\uff0c\u8ba9cin\u4e0ecout\u66f4\u9ad8\u6548\n\tint n,p;\n\tcin>>n;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t    int l;\n\t    cin>>l;\n\t    for(int j=0;j<l;++j)\n\t    {\n\t        string s;\n\t        cin>>s;\n\t        m[s].insert(i);\n\t    }\n\t}\n\tcin>>p;\n\twhile(p--)\n\t{\n\t    string s;\n\t    cin>>s;\n\t    if(m.count(s))\n\t        for(iter=m[s].begin();iter!=m[s].end();++iter)\n\t            cout<<*iter<<\" \";\n\t    cout<<endl;\n\t}\n\treturn 0;\n}\n```\n\n$\\rm{Done.}$\n\n---\n\n> \u9644\u8a00\n\n$\\rm{STL}$\u786e\u5b9e\u7ed9$\\rm{C}$\u515a\u5e26\u6765\u4e86\u8bb8\u591a\u4fbf\u5229\uff0c\u4f46\u662f\u8be5\u4f1a\u7684\u8fd8\u662f\u8981\u4f1a\uff0c\u4e0d\u8981\u5728$\\rm{STL}$\u4e2d\u6545\u6b65\u81ea\u5c01\u554a\u2014\u2014\n\n\u6700\u540e\u62ff$\\rm{NOIp}$\u7684\u67d0\u516c\u544a\u715e\u5c3e\u5427\u2014\u2014\n\n[![NOIp\u5bf9STL\u7684\u9650\u5236\uff1f\u70b9\u51fb\u67e5\u770b\u539f\u6587](https://i.loli.net/2018/10/03/5bb4d7bb1430f.png)](http://www.noi.cn/newsview.html?id=229&hash=878FD2&type=6)\n\n$$\\mathfrak{-End-}$$",
        "postTime": 1539400269,
        "uid": 32921,
        "name": "VCarlyle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "## \u524d\u8a00\uff1a\n\n\u8fd9\u4e2a\u9898\u4e00\u76f4\u6709\u4e2a\u7591\u95ee\uff0c\u6700\u591a\u4e00\u5343\u884c\uff0c\u6bcf\u884c\u4e94\u5343\u5b57$1000\\times5000=5e6$\n\n$5e6\\times26\\times4\\div1024\\div1024\\approx496MB>125MB$\n\n\u5c3d\u7ba1\u6e05\u695a\u5b9e\u9645\u7a7a\u95f4\u9700\u6c42\u4e0d\u80fd\u5230\u8fbe$5e6$\uff0c\u5982\u4f55\u8ba1\u7b97\u76f4\u63a5\u5bf9\u6587\u7ae0\u5efa$Trie$\u4e8b\u5b9e\u4e0a\u6240\u9700\u7684\u6700\u5927\u7a7a\u95f4\u5462\uff0c\u672c\u4eba\u5bf9\u6b64\u5e76\u4e0d\u6e05\u695a\uff0c\u4e5f\u5e0c\u671b\u6709\u5927\u4f6c\u80fd\u4e3a\u6211\u89e3\u51b3\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff08\u81f3\u4e8e\u5f00$5e6\\times26$\u901a\u8fc7\u7684\u5927\u4f6c\uff0c\u6211\u60f3\u6211\u8fd9\u79cd\u51e1\u4eba\u8fd8\u8fbe\u4e0d\u5230\u8fd9\u4e2a\u5883\u754c\uff09\n\n\u90a3\u4e48\uff0c\u5c31\u8bf7\u6211\u4eec\u6743\u4e14\u8ba4\u4e3a\u76f4\u63a5\u5bf9\u6587\u7ae0\u5efa$Trie$\u5728\u7a7a\u95f4\u4e0a\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\uff0c\u81f3\u5c11\u662f\u4e0d\u591f\u4fdd\u9669\u7684\n\n## \u6b63\u6587\uff1a\n\n\u4e8e\u662f\u63d0\u4f9b\u4e00\u79cd\u540c\u6837\u662f\u57fa\u4e8e$Trie$\u7684\u65b9\u6cd5\u2014\u2014**\u5bf9\u8be2\u95ee\u5efa$Trie$**\n\n$10000\\times20\\times26\\times4\\div1024\\div1024\\approx20MB$\n\n\u5360\u7a7a\u95f4\u6700\u591a\u7684$Trie$\u89e3\u51b3\u4e86\uff0c\u7a7a\u95f4\u95ee\u9898\u5c31\u4e0d\u5fc5\u62c5\u5fc3\u4e86\n\n#### \u4e0b\u9762\u6211\u4eec\u8003\u8651\u5bf9\u8be2\u95ee\u5efa$Trie$\u4e0b\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\n\n~~\uff08\u8fd9\u4e0d\u662f$Trie$\u7684\u677f\u5b50\u9898\u5417\uff0c\u6709\u4ec0\u4e48\u53ef\u8003\u8651\u7684\uff09~~\n\n### \u597d\u5427\uff0c\u4ee3\u7801\u5b9e\u73b0\u7ec6\u8282\u53ca\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\uff0c\u89c1\u4ee3\u7801\u4e86\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int maxn=5e6,maxq=2e5+10;\nint cnt,a[maxq][26],n,m;\nvector<string>v[1010];\nvector<int>ans[10010],val[maxq];\nstring tmp;\nint idx(char c)\n{\n\treturn c-'a';\n}\nvoid insert(int x)\n{\n\tcin>>tmp;\n\tint len=tmp.length(),now=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tint c=idx(tmp[i]);\n\t\tnow=a[now][c]?a[now][c]:a[now][c]=++cnt;\n\t}\n\tval[now].push_back(x);\n    /*\u56e0\u4e3a\u53ef\u80fd\u6709\u76f8\u540c\u7684\u67e5\u8be2\uff0c\u8fd9\u91cc\u7684\u7b80\u5355\u5730\u7528\u4e00\u4e2a\n    \u6574\u5f62\u6807\u8bb0\u5c31\u4e0d\u592a\u5408\u9002\u4e86\uff0c\u6211\u9009\u62e9\u4e86\u7528vector\u8bb0\u5f55\n    \u8fd9\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6240\u6709\u8be2\u95ee\u7684\u6807\u8bb0*/\n}\nvoid check(int x,int y)\n{\n\tint len=v[x][y].length(),now=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tint c=idx(v[x][y][i]);\n\t\tif(!a[now][c])\n\t\t\treturn;\n            //\u8fd9\u4e2a\u5355\u8bcd\u4e00\u5b9a\u6ca1\u6709\u88ab\u67e5\u8be2\u8fc7\uff0c\u76f4\u63a5\u9000\u56de\n\t\tnow=a[now][c];\n\t}\n\tfor(int i=0;i<val[now].size();i++)\n\t\tans[val[now][i]].push_back(x);\n        //\u540c\u7406\u5728\u6240\u6709\u8be2\u95ee\u4e2d\u4fdd\u5b58\u8fd9\u4e2a\u5355\u8bcd\u66fe\u7ecf\u51fa\u73b0\u7684\u6587\u7ae0\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1,num;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&num);\n\t\tfor(int j=1;j<=num;j++)\n\t\t{\n\t\t\tcin>>tmp;\n\t\t\tv[i].push_back(tmp);\n            //\u91c7\u7528\u4e86vector\u6765\u5b58\u50a8\u539f\u6587\n\t\t}\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t\tinsert(i);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=0;j<v[i].size();j++)\n\t\t\tcheck(i,j);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tvector<int>::iterator pos=unique(ans[i].begin(),ans[i].end());\n\t\tfor(vector<int>::iterator it=ans[i].begin();it!=pos;it++)\n\t\t\tprintf(\"%d \",*it);\n\t\tprintf(\"\\n\");\n\t}\n    /*\u8fd9\u91cc\u7684\u8f93\u51fa\uff0c\u56e0\u4e3a\u4e00\u7bc7\u6587\u7ae0\u91cc\u53ef\u80fd\u591a\u6b21\u51fa\u73b0\u540c\u4e00\u5355\u8bcd\uff0c\n    \u8bb0\u5f97\u53bb\u91cd\uff0c\u4e00\u5f00\u59cb\u6211\u7528\u7684unique\uff0c\u518d\u8f93\u51favector\u4e2d\u7684\n    \u6240\u6709\u5143\u7d20\u3002\u4f46\u662funique\u53bb\u91cd\u65f6\u5176\u5b9e\u5e76\u6ca1\u6709\u5220\u9664\u8fd9\u4e9b\u5143\u7d20\n    \u5728\u8fd9\u91cc\u4e5f\u88ab\u5751\u4e86\uff0c\u6240\u4ee5\u6539\u7528\u8fed\u4ee3\u5668*/\n\treturn 0;\n}\n```\n",
        "postTime": 1565611075,
        "uid": 57045,
        "name": "communist",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u5c45\u7136\u6ca1\u4eba\u53d1\u54c8\u5e0c\u7684\u2026\u2026\u867d\u7136\u8fd9\u9898\u662fTrie\u7684\u677f\u5b50\u9898\uff0c\u4f46\u662f\u611f\u89c9\u7528\u54c8\u5e0c\u4f1a\u66f4\u597d\u4e00\u4e9b~~\u5176\u5b9e\u662f\u56e0\u4e3a\u61d2\u5f97\u5199Trie\u6811~~\uff0c\u4e3a\u4e86\u4fdd\u9669\u8d77\u89c1\u6211\u7528\u4e86\u53cc\u6a21\u6570\u7684\u54c8\u5e0c\u8868\uff0c\u5c31\u662f\u6bcf\u6b21\u628a\u5355\u8bcd\u5b58\u5230\u54c8\u5e0c\u8868\u4e2d\uff0c\u8fd9\u4e2a\u54c8\u5e0c\u8868\u91cc\u8bb0\u5f55\u4e00\u4e0b\u5728\u7b2c\u51e0\u7bc7\u6587\u7ae0\u51fa\u73b0\u7684\uff0c\u67e5\u627e\u7684\u65f6\u5019\u76f4\u63a5\u5230\u54c8\u5e0c\u8868\u4e2d\u627e\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u8003\u8651\u5230\u90bb\u63a5\u8868\u7684\u6784\u9020\uff0c\u5b83\u662f\u4ece\u5916\u800c\u5185\u6309\u7167\u63d2\u5165\u65f6\u95f4\u4ece\u665a\u5230\u65e9\u7684\u987a\u5e8f\uff0c\u800c\u6211\u4eec\u4e5f\u662f\u4ece\u5916\u800c\u5185\u7684\u8bbf\u95ee\uff0c\u800c\u9898\u76ee\u8981\u6c42\u6309\u7167\u4ece\u65e9\u5230\u665a\u8f93\u51fa\uff0c\u5c31\u62ff\u6808\u5b58\u7b54\u6848\u5230\u65f6\u5019\u5012\u8fc7\u6765\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u67092\u4e2a\u5751\u70b9\uff1a\n\n\u2460\u9898\u4e0a\u5199\u4e86\u201c\u4e0d\u80fd\u91cd\u590d\u201d\uff0c\u6240\u4ee5\u63d2\u5165\u54c8\u5e0c\u8868\u7684\u65f6\u5019\u5148\u627e\u4e00\u4e0b\u54c8\u5e0c\u8868\u91cc\u662f\u5426\u6709\u51fa\u81ea\u5f53\u524d\u6587\u7ae0\u7684\u8fd9\u4e2a\u5355\u8bcd\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u91cd\u590d\u63d2\u5165\u4e86\u3002\n\n\u2461\uff08\u8fd9\u4e2a\u5bfc\u81f4\u6211\u75af\u72c2\u72060\u2026\u2026\uff09\u9898\u4e0a\u5199\u4e86\u201c\u6bcf\u7bc7\u77ed\u6587\u53ea\u542b\u7a7a\u683c\u548c\u5c0f\u5199\u5b57\u6bcd\u201d\uff0c\u4f46\u662f\u4ed6\u6ca1\u8bf4\u67e5\u7684\u5355\u8bcd\u4e5f\u662f\u8fd9\u6837\u2026\u2026\u6240\u4ee5\u6211\u4eec\u5728\u641e\u54c8\u5e0c\u503c\u7684\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u76f4\u63a5\u628a\u5355\u8bcd\u5f53\u505a\u5c0f\u5199\u5b57\u7b26\u5904\u7406\uff0c\u800c\u662f\u76f4\u63a5\u628a\u5b57\u7b26\u503c\u6765\u54c8\u5e0c\uff0c\u5e76\u4e14\u8fdb\u5236\u4e5f\u4e0d\u80fd\u5f04\u621026\u7684\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define p 10000019\n#define np 40000000000001\n#define pii 10000000007\n#define ll long long\n#define int long long\nusing namespace std;\nchar str[100];\ninline int sget(){\n\tcin>>str;return(strlen(str));\n\tint ptr=0;char c;while((c=getchar())||1)if(c>='a'&&c<='z')break;\n\tstr[ptr]=c;ptr++;while((c=getchar())||1){\n\t\tif(c>='a'&&c<='z'){\n\t\t\tstr[ptr]=c;ptr++;\n\t\t}else return(ptr);\n\t}\n}\ninline void hsh(int len,int &big,int &small,int &mid){\n\tll bg=0,sm=0,md=0;\n\tfor(register int i=0;i<len;i++){\n\t\tbg=(bg*101+str[i])%np;\n\t\tsm=(sm*101+str[i])%p;\n\t\tmd=(md*101+str[i])%pii;\n\t}big=bg;small=sm;mid=md;\n}\ntypedef struct _n{int data1;\n\tint data;int next;int index;\n}node;node memchi[1000001];\nint heads[10000020];\nint stk[10000];\nsigned main(){int gn=1;\n\tll n;cin>>n;\n\tfor(register int i=1;i<=n;i++){\n\t\tint k;cin>>k;for(register int j=1;j<=k;j++){\n\t\t\tint len=sget();int big,small,mid;hsh(len,big,small,mid);\n\t\t\tfor(register int l=heads[small];l;l=memchi[l].next){\n\t\t\t\tif(memchi[l].data==big&&memchi[l].index==i&&memchi[l].data1==mid)goto s;\n\t\t\t}\n\t\t\tmemchi[gn].next=heads[small];memchi[gn].index=i;memchi[gn].data=big;\n\t\t\tmemchi[gn].data1=mid;heads[small]=gn;gn++;s:;\n\t\t}\n\t}int m;cin>>m;\n\tfor(register int i=1;i<=m;i++){\n\t\tint len=sget();int big,small,mid;hsh(len,big,small,mid);\n\t\tint sp=0;for(register int j=heads[small];j;j=memchi[j].next){\n\t\t\tif(memchi[j].data==big&&memchi[j].data1==mid){\n\t\t\t\tstk[sp]=memchi[j].index;sp++;\n\t\t\t}\n\t\t}\n\t\twhile(sp){\n\t\t\tsp--;if(sp==0)printf(\"%d\",stk[sp]);\n\t\t\telse printf(\"%d \",stk[sp]);\n\t\t}cout<<endl;\n\t}\n\treturn(0);\n}\n```",
        "postTime": 1528343982,
        "uid": 56917,
        "name": "\u989c\u4f1f\u4e1a_C_Asm",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u8981\u8bb0\u5f55\u67d0\u5355\u8bcd\u4e2d\u662f\u5426\u51fa\u73b0\u5728\u6587\u7ae0\u4e2d\uff1f\u6211\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u7528`map<string, bitset<1000>>`\n\n\u4f46\uff0c\u5982\u679c\u4f60\u771f\u5c31\u8fd9\u6837\u5199\u2026\u2026TLE90\u5206\u3002\n\n\u90a3\u4e48\u8003\u8651\u4f18\u5316map\u7684\u6027\u80fd\u3002\n\n~~\u81ea\u7136O2\u4f18\u5316\u662f\u6211\u4eec\u6700\u597d\u7684\u9009\u62e9\uff0c**\u5b8c**~~\n\n* `map<string, bitset<1000>>` \u8d85\u65f6\n* `map<string, array<bool, 1000>>` \u8d85\u65f6\n* `map<string, bitset<1000>>` + O2\u4f18\u5316 2.18s 5.69MB\n* `map<string, array<bool, 1000>>` + O2\u4f18\u5316 2.01s 25.65MB\n\n\u90a3\u8fd8\u80fd\u4e0d\u80fd\u66f4\u5feb\u5462\uff1f\n\n\u6211\u4eec\u90fd\u77e5\u9053GNU\u63d0\u4f9b\u4e86\u6bd4STL\u66f4STL\u7684\u5e93\u2014\u2014pb_ds\uff0c\u91cc\u9762\u5b9e\u73b0\u4e86**\u54c8\u5e0c\u8868**\u3001\u4f18\u5148\u961f\u5217\u3001\u5b57\u5178\u6811\u548c\u5e73\u8861\u6811\u8fd94\u79cd\u6570\u636e\u7ed3\u6784\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8bd5\u8bd5pb_ds\uff1f\n\n* `gp_hash_table<string, bitset<1000>>` 2.94s 16.87MB\n* `gp_hash_table<string, array<bool, 1000>>` 4.25s 98.68MB\n* `cc_hash_table<string, bitset<1000>>` 2.29s 5.40MB\n* `cc_hash_table<string, array<bool, 1000>>` 2.06s 25.98MB\n\n\u8fd94\u79cd\u7ec4\u5408\u90fd\u80fdA\u4e86\uff0c\u90a3\u2026\u2026\u642d\u914dO2\u4f18\u5316\u4f7f\u7528\uff1f\n\n* `gp_hash_table<string, bitset<1000>>` + O2\u4f18\u5316 1.01s 16.75MB\n* `gp_hash_table<string, array<bool, 1000>>` + O2\u4f18\u5316 2.16s 98.70MB\n* `cc_hash_table<string, bitset<1000>>` + O2\u4f18\u5316 846ms 5.50MB\n* `cc_hash_table<string, array<bool, 1000>>` + O2\u4f18\u5316 1.04s 25.83MB\n\n\u9644`cc_hash_table<string, bitset<1000>>`\u7684\u4ee3\u7801:\n\n```cpp\n// luogu-judger-enable-o2\n#include <bitset>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <iostream>\n#include <string>\nusing namespace std;\nint main() {\n  ios::sync_with_stdio(false);\n  __gnu_pbds::cc_hash_table<string, bitset<1000>> has;\n  int n, m, l;\n  string s;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    cin >> l;\n    for (int j = 0; j < l; j++) {\n      cin >> s;\n      has[s][i] = true;\n    }\n  }\n  cin >> m;\n  for (int i = 0; i < m; i++) {\n    cin >> s;\n    for (int j = 0; j < n; j++) {\n      if (has[s][j]) {\n        cout << j + 1 << ' ';\n      }\n    }\n    cout << endl;\n  }\n  return 0;\n}\n```\n\n\u9644\u5f55\n\n* STL\u8fd8\u6709\u4e00\u4e2a`unordered_map`\u4e5f\u80fd\u8fc7\uff08\u7b49\u7b49\u662f\u4e0d\u662f\u5f00\u4e86O2\u6bd4pb_ds\u8fd8\u5feb\u4e86\uff1f~~\u867d\u7136\u6ca1\u5f00\u8981\u6162\u4e00\u4e9b~~\uff09\n  * `unordered_map<string, bitset<1000>>` 3.19s 5.50MB\n  * `unordered_map<string, array<bool, 1000>>` 3.07s 25.52MB\n  * `unordered_map<string, bitset<1000>>` + O2\u4f18\u5316 816ms 5.56MB\n  * `unordered_map<string, array<bool, 1000>>` + O2\u4f18\u5316 987ms 25.50MB\n* \u6d1b\u8c37\u65e5\u62a5\u8bf4`gp_hash_table`\u5feb\uff0c\u4f46\u6211\u5b9e\u6d4b\u65f6`cc_hash_table`\u5feb\n* \u4f3c\u4e4e`bitset`\u548c`array<bool>`\u8c01\u5feb\u8fd8\u4e0d\u4e00\u5b9a\n* _\u771f\u662f\u4e00\u9053\u8bd5STL/pb_ds\u7684~~\u6c34~~\u597d\u9898_",
        "postTime": 1566958389,
        "uid": 153382,
        "name": "su226",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u770b\u4e86\u770b\u9898\u89e3\uff0c\u611f\u89c9\u8981\u4e48\u662f\u5f88\u5947\u602a\u7684hash\uff0c\u5269\u4e0b\u7684\u5927\u591a\u6570\u662f\u88f8\u7684stl\u548c\u76f4\u63a5\u4e0a\u5b57\u5178\u6811\uff0c\u7136\u540e\u6211\u7528$vector$+$hash$\u6c34\u8fc7\u53bb\u4e86\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nmlogm)$\u90fd\u8d85\u8fc71e9\u4e86qwq\u7136\u800c\u663e\u7136\u8dd1\u4e0d\u6ee1\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u77ed\u6587\u91cc\u7684\u5355\u8bcdhash\u4e86\u4e4b\u540e\u4e22\u5230vecotr\u91cc\u9762\u53bb\uff0c\u7136\u540e\u4e4b\u540e\u5224\u65ad\u6bcf\u4e00\u4e2avector\u91cc\u9762\u662f\u5426\u6709\u8981\u67e5\u8be2\u7684\u5355\u8bcd\u5373\u53ef\n\n```cpp\n#include<bits/stdc++.h>\n#define ull unsigned long long\n#define writeln(x)  write(x),puts(\"\")\n#define writep(x)   write(x),putchar(' ')\nusing namespace std;\ninline int read(){\n\tint ans=0,f=1;char chr=getchar();\n\twhile(!isdigit(chr)){if(chr=='-') f=-1;chr=getchar();}\n\twhile(isdigit(chr)){ans=(ans<<3)+(ans<<1)+chr-48;chr=getchar();}\n\treturn ans*f;\n}void write(int x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}const int M = 1e4+5;\n const ull B = 13331;\nint n,m;char s[60];\nvector<ull>mp[M];\ninline ull Hash(char *s){\n\tint len=strlen(s+1),ans=0;\n\tfor(int i=1;i<=len;i++)ans=ans*B+s[i];\n\treturn ans;\n}int main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++){\n\t\tm=read();\n\t\twhile(m--)scanf(\"%s\",s+1),mp[i].push_back(Hash(s));\n\t\tsort(mp[i].begin(),mp[i].end());\n\t}m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%s\",s+1);\n\t\tull now=Hash(s);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(*lower_bound(mp[i].begin(),mp[i].end(),now)==now)\n\t\t\t\tprintf(\"%d \",i);\n\t\tputs(\"\");\n\t}return 0;\n}\n```",
        "postTime": 1571792212,
        "uid": 9287,
        "name": "LevenKoko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "~~\u7b2c\u4e00\u7bc7\u9898\u89e3qwq~~\n\n\n~~\u7ffb\u904d\u9898\u89e3\u533a\u90fd\u6ca1\u627e\u5230\u5b8c\u5168\u76f8\u540c\u7684\u5462,\u548cSTL\u4ee5\u53caTrie\u7684\u505a\u6cd5\u6709\u4e9b\u4e0d\u540c?~~\n\n\u6211\u4eec\u5148\u4ed4\u7ec6\u89c2\u5bdf\u6570\u636e\u8303\u56f4,\u7ed9\u51fa\u6587\u7ae0\u603b\u5171\u67095000000\u4e2a\u5b57\u7b26,\u67e5\u8be2\u603b\u5171\u6709200000\u4e2a\u5b57\u7b26,\u5355\u8bcd\u6570\u603b\u5171250000\u4e2a\n\n>\u90a3\u4e48\u6839\u636e\u5b57\u7b26\u5927\u5c0f,\u5f97\u5230\u4ee5\u4e0b\u505a\u6cd5\n\n1.\u6839\u636e\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5e7f\u4e49\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5,\u76f8\u5f53\u4e8e\u5c06\u6587\u7ae0\u63d2\u5165\u81ea\u52a8\u673a\u91cc,\u7136\u540e\u67e5\u8be2\u76f4\u63a5\u5728\u81ea\u52a8\u673a\u4e0a\u8dd1\n\n\u7edf\u8ba1\u5219\u4e5f\u6709\u4e24\u79cd\u505a\u6cd5,\u53ef\u4ee5\u79bb\u7ebf\u540c\u65f6\u5904\u7406\u6240\u6709\u8be2\u95ee,\u4e5f\u53ef\u4ee5\u5728\u7ebf\u7528bitset\n\n\u4f46\u662f,\u8fd9\u975e\u5e38\u4e0d\u68d2,~~\u4e5f\u5e94\u8be5\u8fc7\u4e0d\u4e86~~,\u56e0\u4e3a\u6ca1\u6709\u5229\u7528\u9898\u76ee`\u7b80\u5355\u51fa\u73b0`\u7684\u6027\u8d28qaq~~\u4f46\u662f\u8fd9\u6837\u53ef\u4ee5\u505a\u6587\u7ae0\u5355\u8bcd\u4e2d\u4e00\u90e8\u5206\u51fa\u73b0,\u5c31\u662f\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u4e32\u51fa\u73b0~~\n\n2.\u67e5\u8be2\u5b57\u7b26\u5c0f,\u6211\u4eec\u53ef\u4ee5\u628a\u67e5\u8be2\u5355\u8bcd\u63d2\u5165AC\u81ea\u52a8\u673a\u91cc,\u7136\u540e\u62ff\u6587\u7ae0\u4e0a\u53bb\u5339\u914d,\u8fd9\u6837\u5f3a\u5236\u79bb\u7ebf...\n\n~~\u4f46\u662f\u80fd\u8fc7qwq~~\n\n3.\u81f3\u4e8eTrie~~\u5176\u5b9e\u88ab\u81ea\u52a8\u673a\u5305\u542b?~~...\u9898\u89e3\u533a\u5176\u4ed6\u5df2\u7ecf\u591f\u8be6\u7ec6\u4e86\u5427....\n\n>\u6839\u636e\u5355\u8bcd\u6570\u5927\u5c0f:\n\n\u6211\u4eec\u4ec5\u4ec5\u8981\u6c42`\u4e00\u6574\u4e2a`\u5355\u8bcd\u5728\u90a3\u4e9b\u6587\u7ae0\u4e2d\u51fa\u73b0\n\n\u6240\u4ee5\u81ea\u7136\u800c\u7136\u7684\u60f3\u5230\u628a\u5355\u8bcd$hash$\u8d77\u6765,\u5f97\u5230\u4e00\u4e2a\u503c\n\n\u95ee\u9898\u5c31\u53d8\u6210\u4e00\u4e2a\u503c\u5728\u54ea\u4e9b\u96c6\u5408\u4e2d\u51fa\u73b0\u4e86\n\n\u5355\u4e2a\u96c6\u5408\u53ef\u4ee5\u4e8c\u5206\u67e5\u627e,\u4f46\u5982\u679c\u6bcf\u4e2a\u96c6\u5408\u90fd\u53bb\u4e8c\u5206\u590d\u6742\u5ea6\u672a\u514d\u592a\u9ad8\n\n\u6240\u4ee5\u628a\u6240\u6709\u96c6\u5408\u7684\u5143\u7d20\u653e\u5728\u4e00\u8d77\u4e8c\u5206,\u6211\u4eec\u5f97\u5230\u7684\u4e00\u6bb5\u503c\u76f8\u7b49\u7684\u533a\u95f4,\u5bf9\u5e94\u5143\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\u5c31\u662f\u7b54\u6848.\n\n\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86$O(mlog\\sum{p_i})$,$p_i$\u662f\u6587\u7ae0i\u5355\u8bcd\u6570\n\n## \u6ce8\u610fhash\u51b2\u7a81 ##\n\n#### \u7adf\u7136\u4f1a\u5361qaq ####\n\ncode:~~\u53ef\u4ee5\u65e0\u89c6fastIO\u90e8\u5206~~\n\n```cpp\n\n//From: Dawn Light\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ull unsigned long long\nusing std::sort;\nusing std::unique;\nconst ull p=1926081719260815;//\u6a21\u6570\u592a\u5c0f\u4f1a\u88ab\u5361qaq\nconst int MAXN=5e6+7;\nconst int MAXM=10000;\nconst int base=1926;\n\nstruct HASH {\n\tull val;\n\tint id;\n\tHASH():val(0),id(0) {};\n\tbool operator<(const HASH&x) {\n\t\treturn val==x.val?id>x.id:val<x.val;\n\t}\n} _hash[MAXN];\n\nnamespace fastIO {\n#define BUF_SIZE 100000\n\tstatic char buf[BUF_SIZE],*p1=BUF_SIZE+buf,*pend=buf+BUF_SIZE;\n\tinline char nc() {\n\t\tif(p1==pend) {\n\t\t\tp1=buf;\n\t\t\tpend=buf+fread(buf,1,BUF_SIZE,stdin);\n\t\t}\n\t\treturn *p1++;\n\t}\n\n\tinline int read() {\n\t\tint x=0;\n\t\tregister char s=nc();\n\t\tfor(; !isdigit(s); s=nc());\n\t\tfor(; isdigit(s); s=nc())x=(x<<1)+(x<<3)+s-'0';\n\t\treturn x;\n\t}\n\n\tinline int read(char *s) {\n\t\tint nw=1;\n\t\ts[nw]=0;\n\t\tfor(; !isalpha(s[nw]); s[nw]=nc());\n\t\tfor(; isalpha(s[nw]);)++nw,s[nw]=nc();\n\t\treturn (nw-1);//skip \\n, ,\\t....\n\t}\n#undef BUF_SIZE\n}//qwqIO\nusing namespace fastIO;\n\nchar s[MAXM];\nint T,n,m;\n\ninline int Bs(ull k) {//Binary Search \u7f29\u5199\n\tregister int l=1,r=T,mid,ans;\n\twhile(l<=r) {\n\t\tmid=(l+r)>>1;\n\t\tif(_hash[mid].val<=k) {\n\t\t\tl=mid+1;\n\t\t\tans=mid;\n\t\t} else r=mid-1;\n\t}\n\treturn ans;\n}\n\nint main() {\n\tn=read();\n\tfor(register int i=1,num,l; i<=n; ++i) {\n\t\tnum=read();\n\t\tfor(register int j=1; j<=num; ++j) {\n\t\t\tl=read(s);\n\t\t\t++T;\n\t\t\t_hash[T].id=i;\n\t\t\tfor(register int k=1; k<=l; ++k) {\n\t\t\t\t_hash[T].val=(_hash[T].val*base%p+s[k])%p;\n\t\t\t}\n\t\t}\n\t}//\u5904\u7406hash\n\tsort(_hash+1,_hash+T+1);\n\tfor(int i=1; i<=T; ++i) {\n\t\tif(_hash[i].val==_hash[i-1].val&&_hash[i].id==_hash[i-1].id) {\n\t\t\t_hash[i-1].val=p;\n\t\t}\n\t}\n\tsort(_hash+1,_hash+T+1);\n\tfor(; _hash[T].val==p; --T);\n\t//\u6392\u5e8f,\u53bb\u91cd\n\tm=read();\n\tull tmp=0;\n\tfor(register int i=1,l; i<=m; ++i) {\n\t\tl=read(s);\n\t\ttmp=0;\n\t\tfor(register int k=1; k<=l; ++k) {\n\t\t\ttmp=(tmp*base%p+s[k])%p;\n\t\t}\n\t\tint g=Bs(tmp);\n\t\tregister int j;\n\t\tfor(j=g; _hash[j].val==tmp; --j) printf(\"%d \",_hash[j].id);//\u5f97\u5230\u4e00\u6bb5\u533a\u95f4,\u8f93\u51fa\u7b54\u6848\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1580014293,
        "uid": 76990,
        "name": "loveJY",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "# \u88f8\u7684trie\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0btrie\uff1a\n>\u53c8\u79f0\u5355\u8bcd\u67e5\u627e\u6811\uff0c\u524d\u7f00\u6811\uff0c\u662f\u4e00\u79cd\u6811\u5f62\u7ed3\u6784\uff0c\u662f\u4e00\u79cd\u54c8\u5e0c\u6811\u7684\u53d8\u79cd\u3002\u5178\u578b\u5e94\u7528\u662f\u7528\u4e8e\u7edf\u8ba1\uff0c\u6392\u5e8f\u548c\u4fdd\u5b58\u5927\u91cf\u7684\u5b57\u7b26\u4e32\uff08\u4f46\u4e0d\u4ec5\u9650\u4e8e\u5b57\u7b26\u4e32\uff09\uff0c\u6240\u4ee5\u7ecf\u5e38\u88ab\u641c\u7d22\u5f15\u64ce\u7cfb\u7edf\u7528\u4e8e\u6587\u672c\u8bcd\u9891\u7edf\u8ba1\u3002\u5b83\u7684\u4f18\u70b9\u662f\uff1a\u5229\u7528\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u6765\u51cf\u5c11\u67e5\u8be2\u65f6\u95f4\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u65e0\u8c13\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff0c\u67e5\u8be2\u6548\u7387\u6bd4\u54c8\u5e0c\u6811\u9ad8\u3002\u2014\u767e\u5ea6\n\ntrie\u957f\u8fd9\u6837\uff08\u6839\u8282\u70b9\u6ca1\u6709\u5b9e\u9645\u5185\u5bb9\uff09\uff1a![](https://s2.ax1x.com/2019/08/20/mJarpF.jpg)\n\n\u5728\u67e5\u627e\u65f6\uff0c\u76f4\u63a5\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u987a\u7740\u6811\u5f80\u4e0b\u627e\u5c31OK\uff0c\u63d2\u5165\u4e5f\u662f\u4e00\u6837\uff0c\u5e76\u4e14\u90fd\u53ef\u4ee5\u5199\u6210\u8fed\u4ee3\u7684\uff0c\u590d\u6742\u5ea6$ O(str.length()) $\n\n\u8fd9\u662f\u6211\u6700\u7231\u7684\u6570\u636e\u7ed3\u6784\uff0c\u539f\u56e0\u5728\u4e8e\u5176\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u800c\u4e14\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5~~\u5176\u5b9e\u662f\u56e0\u4e3a\u6211\u89c9\u5f97\u8fd9\u662f\u9664\u6811\u72b6\u6570\u7ec4\u548c\u5e76\u67e5\u96c6\u5916\u6700\u7b80\u5355\u7684\u6811\u578b\u7ed3\u6784~~\n\n\u4f46trie\u7f3a\u70b9\u4e5f\u76f8\u5f53\u660e\u663e\uff1a\u7a7a\u95f4\u6781\u5927\uff0c\u5f88\u8017\u5185\u5b58\uff0c\u4f46\u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u5f88\u5c0f\u5176\u5b9e\u65e0\u8bba\u65f6\u7a7a\u90fd\u5f88\u4f18\u79c0\uff0c\u628amap\u548cset\u540a\u8d77\u6765\u6253\n\n\uff08\u4e0d\u8fc7\u6211\u5199\u7684\u662f\u52a8\u6001\u7684\u6240\u4ee5\u5185\u5b58\u4e0d\u7b97\u592a\u5c34\u5c2c\uff09\n\n[~~\u8d81\u673a\u5ba3\u4f20\u4e00\u4e0b\u6211\u7684trie\u6a21\u677f\u9898~~](https://www.luogu.org/problem/U83324)\n\n\u597d\u4e86\u4e0a\u4ee3\u7801\uff1a\n```cpp\ntemplate<int set_,int mod>//set_\u662f\u5b57\u7b26\u96c6\u5927\u5c0f\nstruct trie{\n    struct node{\n        node* son[set_];\n        int flag;\n    };//\u8282\u70b9\uff0c\u90a3\u4e2aflag\u662f\u9632\u6b62\u67e5\u627e\u67d0\u4e00\u5b57\u7b26\u4e32\u4e0d\u5728trie\u91cc\u7684\u524d\u7f00\u65f6\u8fd4\u56de\u9519\u8bef\u7b54\u6848\n    //\u5f00\u6210int\u662f\u56e0\u4e3a\u53ef\u4ee5\u91cd\u590d\n    node* root,*ctrl_c;//\u590d\u5236\u4e00\u4e0b\u540e\u9762\u8fed\u4ee3\u63d2\u5165/\u67e5\u627e\u6709\u7528\n    inline void init(){\n        clear(ctrl_c);//\u6e05\u7a7a\u6574\u68f5\u6811\uff0c\u540e\u9762\u6709\u4ee3\u7801\n        root=new node(),ctrl_c=root;\n    }//\u4f7f\u7528\u524d\u8bf7\u52a1\u5fc5\u8c03\u7528tree.init();\uff0c\u5426\u5219RE\n    inline void insert(string line){//\u63d2\u5165\n        root=ctrl_c;//\u6211\u76f4\u63a5\u62ffroot\u8fed\u4ee3\u7684\n        //\u7531\u4e8e\u540e\u9762count\u4f1a\u8fd4\u56deroot->flag\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u7528root\u8fed\u4ee3\n        for(int i=0;i<line.length();i++){\n            if(root->son[line[i]%mod]==NULL){//\u5185\u5b58\u4e0d\u5b58\u5728\uff0c\u8c03\u7528\u6784\u9020\u51fd\u6570\u5f00\u65b0\u5185\u5b58\n                root->son[line[i]%mod]=new node(),root->son[line[i]%mod]->flag=0;//\u628aflag\u7f6e\u4e3a0\uff0c\u8fd9\u4e2a\u5f88\u91cd\u8981\n            }\n            root=root->son[line[i]%mod];//\u5f80\u4e0b\u8fed\u4ee3\n        }\n        root->flag++,root=ctrl_c;//\u8fd9\u4e2a\u5f53\u7136\u662f\u80fd\u91cd\u7f6eroot\u5c31\u91cd\u7f6e\u554a\n    }\n    inline int count(string line){//\u67e5\u627e\n        root=ctrl_c;\n        for(int i=0;i<line.length();i++){\n            if(root->son[line[i]%mod]==NULL){//\u5185\u5b58\u90fd\u6ca1\u6709\uff0c\u663e\u7136\u6ca1\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\n                root=ctrl_c;\n                return 0;\n            }\n            root=root->son[line[i]%mod];//\u4ecd\u7136\u5f80\u4e0b\u8fed\u4ee3\n        }\n        return root->flag;//\u6709\u53ef\u80fd\u6211\u4eec\u60f3count\u7684\u53ea\u662f\u67d0\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\n        //\u6240\u4ee5\u8981\u628aflag\u7f6e\u4e3a0\n    }\n    inline void del(string line){//\u5220\u9664\n        root=ctrl_c;\n        for(int i=0;i<line.length();i++){\n            if(root->son[line[i]%mod]==NULL){\n                root=ctrl_c;//\u5185\u5b58\u90fd\u6ca1\u6709\n                return;\n            }\n            root=root->son[line[i]%mod];\n        }\n        root->flag=(root->flag==0?0:root->flag-1);//\u5982\u679cflag\u662f0\u90a3\u5c31\u4e0d\u7ba1\u4ed6\u5426\u5219flag--\n        root=ctrl_c;\n    }\n    void clear(node* now){//\u6e05\u7a7a\n        if(now==NULL) return;\n        for(int i=0;i<set_;i++) if(now->son[i]!=NULL) clear(now->son[i]);//\u76f4\u63a5dfs\u66b4\u529b\u9012\u5f52\n        delete now;//\u8c03\u7528\u6790\u6784\u51fd\u6570&&\u91ca\u653e\u5185\u5b58\n    }\n};\n```\n\u90a3\u4e48\u8fd9\u9053\u9898\u6211\u4eec\u5f00\u4e00\u4e2atrie\u6570\u7ec4\u7136\u540e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u90fdcount\u4e00\u4e0b\u5c31OK\u4e86~~\u53cd\u6b632\u79d2~~\n\n\uff08\u4e8b\u5b9e\u4e0a\u8dd1\u7684\u8d3c\u5feb\uff09\n\ncode:\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<string>\n#include<iostream>\nusing namespace std;\ntemplate<int set_,int mod>\nstruct trie{\n    struct node{\n        node* son[set_];\n        int flag;\n    };\n    node* root,*ctrl_c;//\u590d\u5236\u4e00\u4e0b\u540e\u9762\u8fed\u4ee3\u67e5\u627e\u6709\u7528\n    inline void init(){\n        clear(root);\n        root=new node(),ctrl_c=root;\n    }\n    inline void insert(string line){\n        root=ctrl_c;\n        for(int i=0;i<line.length();i++){\n            if(root->son[line[i]%mod]==NULL){\n                root->son[line[i]%mod]=new node(),root->son[line[i]%mod]->flag=0;\n            }\n            root=root->son[line[i]%mod];\n        }\n        root->flag++,root=ctrl_c;\n    }\n    inline int count(string line){\n        root=ctrl_c;\n        for(int i=0;i<line.length();i++){\n            if(root->son[line[i]%mod]==NULL){\n                root=ctrl_c;\n                return false;\n            }\n            root=root->son[line[i]%mod];\n        }\n        return root->flag;\n    }\n    inline void del(string line){\n        root=ctrl_c;\n        for(int i=0;i<line.length();i++){\n            if(root->son[line[i]%mod]==NULL){\n                root=ctrl_c;\n                return;\n            }\n            root=root->son[line[i]%mod];\n        }\n        root->flag=(root->flag==0?0:root->flag-1);\n    }\n    void clear(node* now){\n        if(now==NULL) return;\n        for(int i=0;i<set_;i++) if(now->son[i]!=NULL) clear(now->son[i]);\n        delete now;\n    } \n};\nstring line;\ntrie<26,'a'> word[1001];\nint main(){\n\tint n,m,l;\n\tbool first;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++) word[i].init();\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&l);\n\t\twhile(l--){\n\t\t\tcin>>line;\n\t\t\tword[i].insert(line);\n\t\t}\n\t}\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tfirst=true;//\u8f93\u51fa\u7684\u6280\u5de7\n\t\tcin>>line;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(word[i].count(line)){\n\t\t\t\tif(first){\n\t\t\t\t\tfirst=false;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tprintf(\" \");\n\t\t\t\t}\n\t\t\t\tprintf(\"%d\",i+1);\n\t\t\t}\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n[\u8bc4\u6d4b\u8bb0\u5f55](https://www.luogu.org/record/22996275)",
        "postTime": 1566181820,
        "uid": 157598,
        "name": "qbu666666",
        "ccfLevel": 5,
        "title": "\u9898\u89e3P3879\u3010 [TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u7b80\u5355\u5730\u8bfb\u9898\u53ef\u77e5\uff0c\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u7b80\u5355\u7684Trie\u6811\u677f\u5b50\u9898\u3002\n\n\u90a3\u6211\u4eec\u4e5f\u4e0d\u8003\u8651\u8fd9\u4e48\u591a\u4e86\uff0c\u76f4\u63a5\u66b4\u529b\u4e00\u70b9\u5427\u3002\n\n\u89c2\u5bdf\u5230\u6bcf\u7bc7\u77ed\u6587\u957f\u5ea6$\\le5000$\uff0c$N\\le1000$\uff0c$M\\le10000$\n\n\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u7ef4\u62a41000\u4e2a5000\u8282\u70b9\u7684Trie\u6811\uff0c\u6bcf\u4e2aTrie\u6811\u5b58\u50a8\u4e00\u6bb5\u77ed\u6587\uff0c\u6bcf\u6b21\u67e5\u8be2\u5c31\u4ece\u5934\u679a\u4e3e\u4e00\u904d\u6bcf\u4e00\u7bc7\u77ed\u6587\uff0c\u6309\u7167\u9898\u76ee\u627e\u5230\u7b54\u6848\u5c31\u8f93\u51fa\uff0c\u7136\u540e\u6362\u884c\uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u5f3a\u5ea6\u4e0b\u662f\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u7684\u3002\n\n\u8d34\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\n\ninline int fd() {//\u5feb\u8bfb\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(!isdigit(ch)) {if(ch == '-') f = -f; ch = getchar();}\n\twhile(isdigit(ch)) {x = x * 10 + ch - '0'; ch = getchar();}\n\treturn x * f;\n}\n\nstruct trie {\n\tstruct node {\n\t\tint son[26];\n\t\tbool fin;\n\t} nd[5010];\n\tint sum;\n\tvoid insert(char *s) {\n\t\tint v, len = strlen(s), u = 0;\n\t\tfor(int i = 0; i < len; ++i) {\n\t\t\tv = s[i]-'a';\n\t\t\tif(!nd[u].son[v]) nd[u].son[v] = ++sum;\n\t\t\tu = nd[u].son[v];\n\t\t}\n\t\tnd[u].fin = 1;\n\t}\n\tbool tfind(char *s) {\n\t\tint u = 0, v, len = strlen(s);\n\t\tfor(int i = 0; i < len; ++i) {\n\t\t\tv = s[i]-'a';\n\t\t\tif(!nd[u].son[v]) return false;\n\t\t\tu = nd[u].son[v];\n\t\t}\n\t\tif(nd[u].fin) return true;\n\t\treturn false;\n\t}\n}T[1005];//\u7ed3\u6784\u4f53\u5c01\u88c51005\u4e2aTrie\u6811\uff0c\u591a\u5f00\u4e00\u70b9\u4fdd\u9669\n\nchar s[5005];//\u7528\u6765\u8f93\u5165\nint n, m;\n\nint main() {\n\tn = fd();\n\tfor(int i = 1; i <= n; ++i) {/*\u6309\u7167\u6bcf\u884c\u8f93\u5165\u7684\u683c\u5f0f\u5904\u7406\uff0c\u8f93\u5165\u4e00\u4e2a\u5355\u8bcd\u5e76\u5c06\u5b83\u63d2\u5165\u5bf9\u5e94\u77ed\u6587\u7f16\u53f7\u7684Trie\u6811*/\n\t\tm = fd();\n\t\tfor(int j = 1; j <= m; ++j) {\n\t\t\tscanf(\"%s\",s);\n\t\t\tT[i].insert(s);\n\t\t}\n\t}\n\tm = fd();\n\tfor(int i = 1; i <= m; ++i) {\n\t\tscanf(\"%s\",s);\n\t\tfor(int j = 1; j <= n; ++j) {\n\t\t\tif(T[j].tfind(s)) printf(\"%d \",j);/*\u67e5\u627e\u5355\u8bcd\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u8f93\u51fa\u5f53\u524d\u77ed\u6587\u7f16\u53f7*/\n\t\t}\n\t\tputchar('\\n');\n\t}\n\treturn 0;//\u5b8c\u7f8e\u7ed3\u675f\n}\n```\n~~\u679c\u7136\u66b4\u529b\u505a\u6cd5\u662f\u8fd9\u4e2a\u4e16\u754c\u4e0a\u6700\u7f8e\u7684\u505a\u6cd5~~",
        "postTime": 1548500131,
        "uid": 91822,
        "name": "Qglin_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u96be\u9053\u6ca1\u4eba\u7528\u5e73\u677f\u7535\u89c6\uff08`pb_ds`\uff09\u5417~~  \n\u601d\u8def\uff1a~~\u6ca1\u601d\u8def~~  \n\u5c31\u662f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684`pb_ds`\u5e93\uff0c\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002  \n\u4ee3\u7801\u5982\u4e0b\uff1a  \n```cpp\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/trie_policy.hpp> // pb_ds\u5934\u6587\u4ef6\n#include <iostream>\n#include <string>\nusing namespace __gnu_pbds; // pb_ds\u540d\u79f0\u7a7a\u95f4\nusing namespace std;\n\ntypedef trie<string, null_type, trie_string_access_traits<>, pat_trie_tag, trie_prefix_search_node_update> Trie;\nTrie tr[1001];\nint main()\n{\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        int siz;\n        cin >> siz;\n        for (int j = 0; j < siz; j++)\n        {\n            string tmp;\n            cin >> tmp;\n            tr[i].insert(tmp); // \u63d2\u5165\u5230\u5b57\u5178\u6811\u4e2d\n        }\n    }\n    int m;\n    cin >> m;\n    for (int i = 0; i < m; i++)\n    {\n        string tmp;\n        cin >> tmp;\n        for (int i = 0; i < n; i++)\n            if (tr[i].find(tmp) != tr[i].end()) // \u5982\u679c\u627e\u5230\uff0c\u5c31\u8f93\u51fa\n                cout << i + 1 << \" \";\n        cout << endl;\n    }\n    return 0;\n}\n```\n\u5f88\u7b80\u5355\u5427\uff01  \n\u6700\u540e\uff0c\u5982\u679c\u8981\u5728NOIP\u4e2d\u4f7f\u7528pb_ds\u5e93\uff0c\u5207\u8bb0\u4e0d\u80fd\u52a0`using namespace __gnu_pbds;`\uff0c\u9700\u8981\u5728\u7528\u5230\u7684\u65f6\u5019\u52a0\u4e0a`__gnu_pbds::`\u3002",
        "postTime": 1536387385,
        "uid": 84282,
        "name": "andyli",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "map\u7684\u88f8\u9898\n\n\u53ef\u4ee5\u5199map<string,vector>\n\n\u4f46\u662f\u6211\u4e0d\u4f1a\u5199\uff0c\u5c31\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e2a\u7ed3\u6784\u4f53\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8bfb\u5165\n\n\u4e0d\u8981\u5fd8\u8bb0\u5224\u65ad\u8be5\u5e8f\u53f7\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u8fc7#include<cstdio>\n\n```cpp\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<iostream>\nusing namespace std;\nconst int MAXN=1e6+10;\ninline int read()\n{\n    char c=getchar();int flag=1,x=0;\n    while(c<'0'||c>'9')    {if(c=='-')    flag=-1;c=getchar();}\n    while(c>='0'&&c<='9')    x=x*10+c-48,c=getchar();return x*flag;\n}\nint n,m;\nstruct node\n{\n    int happen[438];\n    int time;\n};\nmap<string,node>mp;\ninline void pd(string a,int pos)\n{\n    if(mp[a].happen[mp[a].time]==pos)    return ;//\u6ce8\u610f\u5e8f\u53f7\u4e0d\u80fd\u91cd\u590d \n    mp[a].happen[++mp[a].time]=pos;\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        int num=read();\n        string a;\n        for(int j=1;j<=num;j++)\n            cin>>a,pd(a,i);\n    }\n    m=read();\n    for(int i=1;i<=m;i++)\n    {\n        string a;cin>>a;\n        for(int i=1;i<=mp[a].time;i++)\n            printf(\"%d \",mp[a].happen[i]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1509065642,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "#### \u8fd9\u9053\u9898\u8fc7\u6cd5\u5f88\u591a\u6709$Trie$\u6811\uff0c$AC$\u81ea\u52a8\u673a\uff0c$map$\uff0c$hash$\u7b49\u3002\n\n\u7531\u4e8e\u6211\u6700\u8fd1\u5728\u8865\u5b57\u7b26\u4e32\u6240\u4ee5\u6211\u4eec\u5c31\u8bb2~~AC\u81ea\u52a8\u673a~~  ,$Trie$\u6811\u5199\u6cd5\u5427\u3002\n\n~~\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u4e2aTrie\u6811\u677f\u5b50\u9898\uff0c\u8fd8\u633a\u88f8\u7684\u3002~~\n\n\u9898\u610f\uff1a\u7ed9\u4f60$n$\u4e2a\u6a21\u5f0f\u4e32\uff0c\u6a21\u5f0f\u4e32\u4e2d\u6709\u8bb8\u591a\u5355\u8bcd\uff0c\u518d\u7ed9\u4f60$m$\u4e2a\u6587\u672c\u4e32\u3002\u95ee\u4f60\u6709\u591a\u5c11\u4e2a\u6587\u672c\u4e32\u5728\u6a21\u5f0f\u4e32\u4e2d\u7684\u5355\u8bcd\u4e2d\u51fa\u73b0\u3002\n\n~~\u6211\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u6253Trie\u6811\u6240\u4ee5\u6211\u5c31\u4e0d\u8bb2\u4e86\u5427~~\n\n\u601d\u8def\uff1a\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\uff0c\u6211\u4eec\u76f4\u63a5\u4ee5\u6b64\u5efa$Trie$\u6811\uff08\u6bcf\u4e2a\u5355\u8bcd\u5206\u522b\u5efa\uff09\uff0c\u5bf9\u4e32\u5c3e\u6253\u4e2a\u6807\u8bb0\u3002\u7136\u540e\u5728$Trie$\u6811\u4e0a\u8dd1$dfs$\uff0c\u6765\u627e\u5b83\u5bf9\u5e94\u7684\u5355\u8bcd\u3002~~\u8ddf\u4e00\u822cTrie\u6811\u6ca1\u4ec0\u4e48\u533a\u522b\u561b\u3002\u3002\u3002~~\n\n\u8fd9\u9053\u9898\u7684\u4e3b\u8981\u4e24\u4e2a\u5751\u70b9\n\n1.\u5361\u7a7a\u95f4\uff08\u5f00$bitset$\u6216\u8005$vector$\uff09\n\n2.\u5224\u91cd\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u8981\u5224\u91cd\uff0c\u4e0d\u7136\u4f1a\u91cd\u590d\u8f93\u51fa\u3002\u3001\n\n\u8fd8\u6709\u6211\u60f3\u5410\u69fd\u7684\u4e00\u70b9\u662f\n\n```\n\uff08\u6ce8\u610f\u7b2c\u4e00\u4e2a\u5e8f\u53f7\u7684\u524d\u9762\u548c\u6700\u540e\u4e00\u4e2a\u5e8f\u53f7\u7684\u540e\u9762\u4e0d\u5e94\u6709\u7a7a\u683c\uff09\n```\n\n\u6839\u672c\u5c31\u6ca1\u6709\u8fd9\u4ef6\u4e8b\u597d\u5427\uff0c\u6211\u7279\u5224\u4e86\u53cd\u800c$RE$\u4e86\uff0c\u6211\u592a\u83dc\u4e86$orz$\u3002\n\n\u6211\u89c9\u5f97\u4ee3\u7801\u6bd4\u6211\u8bb2\u5f97\u66f4\u6e05\u695a\u3002~~\u8bed\u6587\u6ca1\u4e0a\u8fc7\u5e74\u6392\u7684\u849f\u84bb~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint cnt[10005],trie[5000005][26],fail[5000005];\nint n,m,ans,tot,L;\nvector<int>num[500005];\nchar s[25],str[20005];\nvoid make_trie(char s[25],int Num)\n{\n\tint len=strlen(s),now=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tint next=s[i]-'a';\n\t\tif(!trie[now][next])\n\t\t{\n\t\t\ttrie[now][next]=++tot;\n\t\t}\n\t\tnow=trie[now][next];\n\t}\n\tif(num[now].empty())//\u6ce8\u610f\u5224\u91cd\u548c\u6570\u7ec4\u8d8a\u754c\u95ee\u9898\n\t{\n\t\tnum[now].push_back(Num);\n\t\treturn;\n\t}\n\tint l=num[now].size();\n\tif(num[now][l-1]!=Num)\n\t{\n\t\tnum[now].push_back(Num);\n\t}\n}\nvoid dfs(int now,int x)//\u76f4\u63a5\u5728trie\u6811\u4e0a\u641c\uff0c\u627e\u7b54\u6848\u3002\n{\n\tint next=str[x]-'a';\n\tif(x==L)//\u5982\u679c\u641c\u5230\u4e86\n\t{\n\t\tans=now;\n\t\treturn ;\n\t}\n\tnow=trie[now][next];\n\tif(now)//\u5982\u679c\u4e0b\u4e00\u4f4d\u4ecd\u5728trie\u6811\u4e2d\u5b58\u5728\n\t{\n\t\tdfs(now,x+1);\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint all;\n\t\tscanf(\"%d\",&all);\n\t\tfor(int j=1;j<=all;j++)\n\t\t{\n\t\t\tscanf(\"%s\",s);\n\t\t\tmake_trie(s,i);//\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\u5206\u522b\u5efatrie\u6811\n\t\t}\n\t}\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tans=0;//ans\u8bb0\u5f97\u6e050\n\t\tscanf(\"%s\",str);\n\t\tL=strlen(str);\n\t\tdfs(0,0);//\u5927\u529b\u7206\u641c\n\t\tif(ans==0)\n\t\t{\n\t\t\tprintf(\"\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tint l=num[ans].size();\n\t\tfor(int k=0;k<=l-1;k++)\n\t\t{\n\t\t\tprintf(\"%d \",num[ans][k]);\n\t\t}\n\t\tif(i!=m){printf(\"\\n\");}\n\t}\n}\n```\n\n\n",
        "postTime": 1565268959,
        "uid": 53852,
        "name": "\u5f26\u5dfb\u3053\u3053\u308d",
        "ccfLevel": 0,
        "title": "[TJOI2010]\u9605\u8bfb\u7406\u89e3"
    },
    {
        "content": "\u53d1\u4e2a\u9898\u89e3\u5427\u3002\n\n\u6ca1\u4ec0\u4e48\u610f\u601d\u7684\u9898\u3002\n\ntrie\u3001AC\u81ea\u52a8\u673a\u3001map\u3001set\u90fd\u53ef\u4ee5\u3002\n\n\u8bb2\u4e00\u4e0bset+hash\u5427\u3002\n\n\u4e5f\u6ca1\u4ec0\u4e48\u53ef\u8bb2\u7684\u3002\n\n\u53ea\u9009\u4e00\u4e2abase=233\u4f1aWA\u6389\u5168\u90e8\u7684\u70b9\uff0c\u6240\u4ee5\u7528\u4e24\u4e2abase\uff0c\u4e00\u4e2a\u662f233\uff0c\u4e00\u4e2a\u662f311.\n\u7136\u540eset\u91cc\u6254pair\uff0c\u4e00\u4e2a\u6587\u7ae0\u4e00\u4e2aset\u3002\n\n- \u5438\u6c271400+ms\uff0c\u4e0d\u54384000+ms\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<set>\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\ninline int read()\n{\n    char c=getchar();int num=0,f=1;\n    for(;!isdigit(c);c=getchar())\n        f=c=='-'?-1:f;\n    for(;isdigit(c);c=getchar())\n        num=num*10+c-'0';\n    return num*f;\n}\n\nconst int N=1e3+5;\nconst int bas=233,sab=311;\n\nint n,m,l;char s[23];\nset<pair<ULL,ULL> > st[N];\n\nint main()\n{\n    n=read();ULL hs,sh;\n    for(int z=1;z<=n;++z)\n    {\n        l=read();\n        for(int a=1;a<=l;++a)\n        {\n            scanf(\"%s\",s);hs=sh=0;\n            for(int i=0;s[i];++i) hs=hs*bas+s[i]-'a',sh=sh*sab+s[i];\n            st[z].insert(make_pair(hs,sh));\n        }\n    }\n    m=read();\n    while(m--)\n    {\n        scanf(\"%s\",s);hs=sh=0;\n        for(int i=0;s[i];++i) hs=hs*bas+s[i]-'a',sh=sh*sab+s[i];\n        bool flag=0;pair<ULL,ULL> t=make_pair(hs,sh);\n        for(int i=1;i<=n;++i)\n        {\n            if(st[i].find(t)!=st[i].end())\n            {\n                if(!flag) cout<<i,flag=1;\n                else cout<<' '<<i;\n            }\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```\n\n- \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5b58\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u628apair\u5b58\u5230map\u91cc\uff0c\u5bf9\u5e94\u4e00\u4e2aset\u3002\n\n- \u8fd9\u6837\u5199\u5438\u6c27\u4ec5\u6709343ms\uff0c\u4e0d\u5438\u4e5f\u53ea\u6709771ms\uff01\n\n```cpp\n\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<set>\n#include<map>\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\ninline int read()\n{\n    char c=getchar();int num=0,f=1;\n    for(;!isdigit(c);c=getchar())\n        f=c=='-'?-1:f;\n    for(;isdigit(c);c=getchar())\n        num=num*10+c-'0';\n    return num*f;\n}\n\nconst int N=1e3+5;\nconst int bas=233,sab=311;\n\nint n,m,l;char s[23];\nmap<pair<ULL,ULL>,set<int> > st;\nset<int>::iterator it,iter;\n\nint main()\n{\n    n=read();ULL hs,sh;\n\tfor(int z=1;z<=n;++z)\n    {\n        l=read();\n        for(int a=1;a<=l;++a)\n        {\n            scanf(\"%s\",s);hs=sh=0;\n            for(int i=0;s[i];++i) hs=hs*bas+s[i]-'a',sh=sh*bas+s[i];\n            st[make_pair(hs,sh)].insert(z);\n        }\n    }\n    m=read();\n    while(m--)\n    {\n        scanf(\"%s\",s);hs=sh=0;\n        for(int i=0;s[i];++i) hs=hs*bas+s[i]-'a',sh=sh*bas+s[i];\n        bool flag=0;\n        it=st[make_pair(hs,sh)].begin(),iter=st[make_pair(hs,sh)].end();\n        for(;it!=iter;++it)\n        {\n        \tif(!flag) flag=1,cout<<*it;\n        \telse cout<<' '<<*it;\n\t\t}\n        puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1551343987,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u5b57\u7b26\u4e32\u54c8\u5e0c\u543c\u554a\n\n\u628a\u6240\u6709\u4e66\u672c\u91cc\u51fa\u73b0\u7684\u5355\u8bcd\u54c8\u5e0c \u7528set\u5b58\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\u4f9d\u6b21\u627e\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u54c8\u5e0c\u503c\u5373\u53ef\n\n\u6ce8\u610f\u4e3a\u4e86\u4fdd\u8bc1\u5b89\u5168\uff0c\u8981\u53cc\u54c8\u5e0c\n\n\u819c\u4e00\u4e2a\u8d28\u6570\u662f\u6bd4\u8f83\u543c\u7684\n\n\u6240\u4ee5\u6211\u8fd9\u91cc\u819c\u4e86\u4e24\u4e2a\u8d28\u6570\n\n\u4e0b\u9762\u662f\u4e71\u4e03\u516b\u7cdf\u7684\u4ee3\u7801QAQ\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int p1 = 19260817;\nconst int p2 = 20020303;\nconst int base = 233;\n\nset<int> fuck1[1010], fuck2[1010];\n\nint n;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int x, i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &x);\n\t\tchar sb[1000];\n\t\tfor (int j = 1; j <= x; j++)\n\t\t{\n\t\t\tscanf(\"%s\", sb);\n\t\t\tint len = strlen(sb);\n\t\t\tlong long tot1 = 0, tot2 = 0;\n\t\t\tfor (int i = 0; i < len; i++)\n\t\t\t{\n\t\t\t\ttot1 = (tot1 * base + sb[i]) % p1;\n\t\t\t\ttot2 = (tot2 * base + sb[i]) % p2;\n\t\t\t}\n\t\t\tfuck1[i].insert(tot1);\n\t\t\tfuck2[i].insert(tot2);\n\t\t}\n\t}\n\tint m; scanf(\"%d\", &m);\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tchar sb[1000];\n\t\tscanf(\"%s\", sb);\n\t\tint len = strlen(sb);\n\t\tlong long tot1 = 0, tot2 = 0;\n\t\tfor (int i = 0; i < len; i++)\n\t\t{\n\t\t\ttot1 = (tot1 * base + sb[i]) % p1;\n\t\t\ttot2 = (tot2 * base + sb[i]) % p2;\n\t\t}\n\t\tfor (int j = 1; j <= n; j++)\n\t\t\tif (fuck1[j].count(tot1) && fuck2[j].count(tot2))\n\t\t\t\tprintf(\"%d \", j);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1541245343,
        "uid": 13091,
        "name": "ghj1222",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u4e0b\u5348\u521a\u5b66\u4e86trie\u6811\uff0c\u665a\u4e0a\u5199\u4e86\u8fd9\u4e2a\u9898\u3002\n\n\n\u521a\u770b\u5230\u8fd9\u4e2a\u9898\u60f3\u5230\u7684\u662f\u8bbe\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u6839\uff0c\u4f46\u679c\u65ad\u5c31\u6392\u9664\u4e86\uff0c\u7136\u540e\u5c31\u60f3\u80fd\u4e0d\u80fd\u7528\u4e00\u7ef4\u6570\u7ec4\u6765\u5b58\u6839\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u6837\u4e00\u7bc7\u4ee3\u7801\uff08\u89e3\u91ca\u90fd\u5728\u4ee3\u7801\u4e2d\uff0c\u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u79c1\u4fe1\u6211\uff09\u3002\n\n\u5949\u4e0a\u6709\u6ce8\u91ca\u7684ac\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N = 500000;\nchar s[100];\nint cnt;\nchar cha[10000+10][25];\n\nstruct Tire{\n\tbool word;\n\tint son[26];//\u6811\u7684\u513f\u5b50\n}trie[N];\n\nvoid intsert(int gen, char s[])\n{\n\tint xin = gen;\n\tint n = strlen(s);\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tint x = s[i] - 'a';\n\t\tif(trie[xin].son[x] == 0)\n\t\t\ttrie[xin].son[x] = ++cnt;\n\t\txin = trie[xin].son[x];\n\t}\n\ttrie[xin].word = 1;\n}\n\nbool match(int gen, char cha[])\n{\n\tint xin = gen;\n\tint n = strlen(cha);\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tint x = cha[i] - 'a';\n\t\tif(trie[xin].son[x] == 0)return 0;\n\t\telse \n\t\t\txin = trie[xin].son[x];\n\t}\n\tif(trie[xin].word == 1)return 1;\n\telse return 0;\n}\n\nint main()\n{\t\n\tint n, m, wc;\n\tscanf(\"%d\", &n);\n\tcnt = n;//cnt\u662f\u6807\u53f7\uff0c\u56e0\u4e3a\u8981\u5b58\u591a\u4e2a\u6839\uff0c\u6bcf\u7bc7\u6587\u7ae0\u6709\u4e00\u4e2a\u6839\uff0c\u6240\u4ee5cnt\u4ecen\u5f00\u59cb\n\tfor(int i = 1; i <= n; i++)//\u8bfb\u5165\u6587\u7ae0\n\t{\n\t\tscanf(\"%d\", &wc);\n\t\tfor(int j = 1; j <= wc; j++)\n\t\t{\n\t\t\tscanf(\"%s\", s);\n\t\t\tintsert(i, s);//i\u662f\u6839\u7684\u6807\u53f7\u7136\u540e\u76f4\u63a5\u8d70trie\u6811\u6d41\u7a0b\n\t\t}\n\t}\n\tscanf(\"%d\", &m);\n\tfor(int i = 1; i <= m; i++)\n\t{\t\n\t\tscanf(\"%s\", cha[i]);//\u7528cha\u6570\u7ec4\u8bfb\u5165\u8981\u67e5\u627e\u7684\u5355\u8bcd\n\t}\n\tbool you = 0;//\u56e0\u4e3a\u524d\u540e\u90fd\u4e0d\u80fd\u6709\u7a7a\u683c\uff08\u9898\u76ee\u8981\u6c42\uff09\u6240\u4ee5\u8981\u8bb0\u5f55\u4e00\u4e0b\n\tfor(int i = 1; i <= m; i++)//\u7136\u540e\u4e00\u4e2a\u5355\u8bcd\u4e00\u4e2a\u5355\u8bcd\u7684\u627e\n\t{\tfor(int j = 1; j <= n; j++)\n\t\t\t{\n\t\t\t\tif(match(j, cha[i]) && you == 0){cout<<j;you = 1;continue;}\n\t\t\t\telse if(match(j, cha[i]))cout<<\" \"<<j;\n\t\t\t}\n\t\tcout<<endl;\n\t\tyou = 0;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1535682771,
        "uid": 119118,
        "name": "\u665a\u5b89\u665a\u5b89",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "~~\u697c\u4e0b\u7684 `dalao` \u4eec\u4ee3\u7801\u600e\u4e48\u90fd\u90a3\u4e48\u957f~~\n\n### \u601d\u8def\uff1a\u4f7f\u7528 C++ \u7684 `map` \u4ee3\u66ff\u5b57\u5178\u6811\uff0c\u5f00\u4e00\u4e2a `map<string, vector<int> >`\u3002\n\n**\u8981\u6ce8\u610f\uff1a\u9898\u76ee\u91cc\u8981\u6c42\u53bb\u91cd\uff0c\u6240\u4ee5\u6bcf\u6b21\u5b58\u5355\u8bcd\u7684\u65f6\u5019\u5224\u65ad\u5f53\u524d\u6587\u7ae0\u91cc\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\u8fd9\u4e2a\u5355\u8bcd\uff0c\u53ea\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\u5f97\u60c5\u51b5\u624d\u52a0\u8fdb\u53bb\u3002**\n\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nstruct FastReader {\n    inline int Int() {int ch,nag=0,x=0;while(!isdigit(ch=getchar()))nag=ch=='-';x=ch-'0';while(isdigit(ch=getchar()))x=x*10+ch-'0';return nag?-x:x;}\n    inline ll Long() {ll ch,nag=0,x=0;while(!isdigit(ch=getchar()))nag=ch=='-';x=ch-'0';while(isdigit(ch=getchar()))x=x*10+ch-'0';return nag?-x:x;}\n    inline ll Mod(ll P) {ll ch,nag=0,x=0;while(!isdigit(ch=getchar()))nag=ch=='-';x=(ch-'0')%P;while(isdigit(ch=getchar()))(x=x*10+ch-'0')%=P;return nag?-x:x;}\n    inline long double Double() {ll a=Int(),b=0,c=1,ch;while(isdigit(ch=getchar()))b=b*10+ch-'0',ch*=10;return a+1.*b/c;}\n    inline ll DoubleInt(ll bs=-1) {ll a=Int(),b=0,c=1,ch;while(isdigit(ch=getchar()))b=b*10+ch-'0',ch*=10;return bs==-1?a*c+b:a*bs+b;}\n    inline char Alpha() {char ch;while(!isalpha(ch=getchar()));return ch;}\n    inline char Char() {char ch; while( isspace(ch=getchar()));return ch;}\n    inline char Digit() {char ch;while(!isdigit(ch=getchar()));return ch;}\n    inline int CStr(char*c) {scanf(\"%s\",c);return strlen(c);}\n    inline int Str(string&s,int len=3000) {char buf[len];int l=CStr(buf);s=buf;return l;}\n    inline ll operator()() { return Long(); }\n    inline int operator()(char*c) { return CStr(c); }\n    inline int operator()(string&s,int len=3000) { return Str(s,len); }\n} R;\nstruct FastWriter {\n    inline FastWriter& Int(ll x) {if(x<0){putchar('-');return Int(-x);}if(x/10)Int(x/10);putchar(x%10+'0');return *this;}\n    inline FastWriter& Char(char x) {putchar(x);return *this;}\n    inline FastWriter& Str(const char*x) {printf(\"%s\",x);return *this;}\n    inline FastWriter& StrE(const char*x) {puts(x);return *this;}\n    inline FastWriter& Eoln() {putchar('\\n');return *this;}\n    inline FastWriter& operator()(int x) { return Int(x); }\n    inline FastWriter& operator()(char x) { return Char(x); }\n    inline FastWriter& operator()(ll x) { return Int(x); }\n    inline FastWriter& operator()(const char*x) { return Str(x); }\n} W;\n\nmap<string, vector<int> > M;\nmap<string, bool> T;\n\nint main() {\n\tfor (int n=R(), i=1; i<=n; i++) {\n        T.clear();\n\t\tint c = R(); while (c--) {\n\t\t\tstring p; R(p);\n\t\t\tif (!T[p]) T[p] = 1, M[p].push_back(i);\n\t\t}\n\t}\n\tfor (int m=R(); m--; ) {\n\t\tstring p; R(p);\n\t\tfor (int i=0; i<M[p].size(); i++) W(M[p][i]).Char(' ');\n\t\tW.Eoln();\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1535592545,
        "uid": 15231,
        "name": "ChinaNB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "~~\u8fd9\u4e00\u9898\u601d\u8def\u5f88\u7b80\u5355~~\n\n\u5c31\u662f\u7528STL\u7684`map`\u548c`vector`\n\n`map`\u6620\u5c04\uff0c`vector`\u8868\u793a\u5728\u7b2c\u51e0\u7bc7\u77ed\u6587\u4e2d\u51fa\u73b0\n\n\u8fd8\u6709\uff0c\u6ce8\u610f\u8f93\u51fa\u662f\u4e2a\u5751\uff1a\n\n> \u5bf9\u4e8e\u6bcf\u4e2a\u751f\u8bcd\u8f93\u51fa\u4e00\u884c\uff0c\u7edf\u8ba1\u5176\u5728\u54ea\u51e0\u7bc7\u77ed\u6587\u4e2d\u51fa\u73b0\u8fc7\uff0c\u5e76\u6309\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u77ed\u6587\u7684\u5e8f\u53f7\uff0c\u5e8f\u53f7\u4e0d\u5e94\u6709\u91cd\u590d\uff0c\u5e8f\u53f7\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00**\uff08\u6ce8\u610f\u7b2c\u4e00\u4e2a\u5e8f\u53f7\u7684\u524d\u9762\u548c\u6700\u540e\u4e00\u4e2a\u5e8f\u53f7\u7684\u540e\u9762\u4e0d\u5e94\u6709\u7a7a\u683c\uff09**\u3002\u5982\u679c\u8be5\u5355\u8bcd\u4e00\u76f4\u6ca1\u51fa\u73b0\u8fc7\uff0c\u5219\u8f93\u51fa\u4e00\u4e2a\u7a7a\u884c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u751f\u8bcd\u8f93\u51fa\u4e00\u884c\uff0c\u7edf\u8ba1\u5176\u5728\u54ea\u51e0\u7bc7\u77ed\u6587\u4e2d\u51fa\u73b0\u8fc7\uff0c\u5e76\u6309\u4ece\u5c0f\u5230\u5927\u8f93\u51fa\u77ed\u6587\u7684\u5e8f\u53f7\uff0c\u5e8f\u53f7\u4e0d\u5e94\u6709\u91cd\u590d\uff0c\u5e8f\u53f7\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff08\u6ce8\u610f\u7b2c\u4e00\u4e2a\u5e8f\u53f7\u7684\u524d\u9762\u548c\u6700\u540e\u4e00\u4e2a\u5e8f\u53f7\u7684\u540e\u9762\u4e0d\u5e94\u6709\u7a7a\u683c\uff09\u3002\u5982\u679c\u8be5\u5355\u8bcd\u4e00\u76f4\u6ca1\u51fa\u73b0\u8fc7\uff0c\u5219\u8f93\u51fa\u4e00\u4e2a\u7a7a\u884c\u3002\n\n\u5b9a\u4e49\u8fd9\u4e48\u5b9a\u4e49 \uff1a`map<string, vector < int > >`\n\n\u4ee3\u7801\u5982\u4e0b\uff1a (\\*~~**\u601d\u8def\u5f88\u4e71**~~\\*)\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <map>\n#include <string>\n#include <cstring>\n#include <vector>\nusing namespace std;\n\nint word_num;\n\nclass Word_Find {\n    public :\n        #define maxn 10000\n        map <string, vector <int> > list;\n    public : int Readin(int num) {\n        int t = 0;\n        while (num--) {\n            t++;\n            int n;\n            cin >> n;\n            for(int i=1;i<=n;i++) {\n                string word;\n                cin >> word;\n                list[word].resize(word_num);\n                list[word][t] = 1;\n            }\n        }\n    }\n    public : int find(int num, int sentence) {\n        for(int i=1;i<=num;i++) {\n            string word;\n            cin >> word;\n            if(!list.count(word)) {\n                cout << endl;\n                continue;\n            }\n            int print[maxn];int tot = 0;\n            memset(print, 0 ,sizeof(print));\n            for(int i=1;i<=sentence;i++) {\n                if(list[word][i] == 1) {\n                    tot++;\n                    print[tot] = i;\n                }\n            }\n            for(int i=1;i<=tot;i++) {\n                cout << print[i];\n                if(i!=tot) cout << ' ';\n            }\n            if(i!=num)cout << endl;\n        }\n    }\n}solver;\n\nint main() {\n    ios::sync_with_stdio(false);\n    int sentence, query;\n    cin >> sentence;\n    word_num = sentence;\n    solver.Readin(sentence);\n    cin >> query;\n    solver.find(query, sentence);\n    return 0;\n}\n```",
        "postTime": 1512825146,
        "uid": 11746,
        "name": "flyinglandlord",
        "ccfLevel": 4,
        "title": "P3879 [TJOI2010]\u9605\u8bfb\u7406\u89e3"
    },
    {
        "content": "<a href=\"http://blog.csdn.net/jzq233jzq/article/details/77606237\">\u6211\u7684blog</a>\n\n\u4e00\u5f00\u59cb\u6211\u611f\u89c9\u597d\u50cf\u53ef\u4ee5\u7528set\u641e\u4e00\u641e\u7684\n\n\u7136\u540e\u53d1\u73b0\u8fed\u4ee3\u5668\u6211\u5b9e\u5728\u4e0d\u592a\u4f1a\u7528\u3002\u3002\u3002\n\n\u800c\u4e14\u5230\u5e95set\u600e\u4e48\u5b58\u6211\u4e5f\u4e0d\u5927\u6709\u6570\n\n\u540e\u6765\u60f3\u4e86\u60f3\uff0c\u8fd8\u662fTrie\u9760\u8c31\n\n\u5c31\u662f\u5728\u7ed3\u675f\u6807\u8bb0\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u91cc\u6709\u591a\u5c11\u6587\u7ae0\u6709\u8fd9\u4e2a\u5355\u8bcd\u5c31\u597d\u4e86\n\n\u611f\u89c9set\u539f\u7406\u4e5f\u662f\u4e00\u6837\u7684\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <iostream>\n#include <ctime>\n#include <map>\n#include <queue>\n#include <cstdlib>\n#include <string>\n#include <climits>\n#include <set>\n#include <vector>\nusing namespace std;\ninline int read(){\n    int k=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){k=k*10+ch-'0';ch=getchar();}\n    return k*f;\n}\nchar s[10010];\nint nex[500010][26],n,cnt=0;\nbool b[500010][110];\ninline void insert(int x){\n    scanf(\"%s\",s+1);int l=strlen(s+1);\n    int now=0;\n    for(int i=1;i<=l;i++){\n        int p=s[i]-'a';\n        if(!nex[now][p])nex[now][p]=++cnt;\n        now=nex[now][p];\n    }\n    b[now][x]=1;\n}\ninline void check(){\n    scanf(\"%s\",s+1);int l=strlen(s+1);\n    int now=0,flag=1;\n    for(int i=1;i<=l;i++){\n        int p=s[i]-'a';\n        if(!nex[now][p]){flag=0;break;}\n        now=nex[now][p];\n    }\n    if(flag)for(int i=1;i<=n;i++)if(b[now][i])printf(\"%d \",i);\n    puts(\"\");\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++){\n        int x=read();\n        for(int j=1;j<=x;j++)insert(i);\n    }\n    int m=read();\n    for(int i=1;i<=m;i++)check();\n    return 0;\n}\n```",
        "postTime": 1503746268,
        "uid": 5716,
        "name": "jzqjzq",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u9898\u5f88\u597d\u7684`Trie`\u4e0e`bitset`\u7684\u7ec3\u624b\u9898  \n\u663e\u7136\uff0c\u6211\u4eec\u5148\u628a\u6240\u6709\u7684\u5355\u8bcd\u63d2\u5165\u4e00\u68f5`Trie`\u6811\u4e2d\uff0c\u800c\u5173\u4e8e\u9898\u76ee\u6253\u5370\u5728\u54ea\u4e9b\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u8bdd\uff0c\u7b2c\u4e00\u601d\u8def\uff1a\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff08\u6700\u574f\u60c5\u51b5\uff09\u5f00\u4e00\u4e2a`vector`\uff0c\u5728\u63d2\u5165\u65f6\u5c06\u6587\u7ae0\u53f7\u63d2\u5165\u5230\u5bf9\u5e94\u7684`vector`\u4e2d\u3002  \n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#define MAXN 500100\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\n\ninline int read() {\n    int a=0,f=1;char v=getchar();\n    while(!isdigit(v)) {if (v == '-') {f = -1;}v = getchar();}\n    while (isdigit(v)) {a = a * 10 + v - 48;v = getchar();}\n    return a * f;\n}\n\nint n,m;\nchar s[MAXN];\n\nint trie[MAXN][26],en[MAXN],tot = 1;\nvector <int> f[MAXN];\n\ninline void insert(char *s,int q) {\n    int p = 1,len = strlen(s);\n    for (int k = 0;k < len;++k) {\n        int ch = s[k]-'a';\n        if (trie[p][ch] == 0) {\n            trie[p][ch] = ++tot;\n        }\n        p = trie[p][ch];\n    }\n    en[p] = 1;f[p].push_back(q);\n}\n\ninline void find(char* s) {\n    int p = 1,len = strlen(s);\n    bool flag = 1;\n    for (int k = 0;k < len;++k) {\n        p = trie[p][s[k]-'a'];\n        if (p == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag) {\n    \tint siz = f[p].size();\n    \tfor (int i = 0;i < siz;++i) {\n    \t\tprintf(\"%d \",f[p][i]);\n        }\n    }\n    puts(\"\");\n}\n\nint main() {\n    n = read();\n    for (int i = 1;i <= n;++i) {\n        int g = read();\n        for (int j = 1;j <= g;++j) {\n            cin >> s;\n            insert(s,i);\n        }\n    }\n    m = read();\n    for (int i = 1;i <= m;++i) {\n        cin >> s;\n        find(s);\n    }\n    return 0;\n}\n```\n\u8fd9\u6837\u6709\u4ec0\u4e48\u95ee\u9898\u5462\uff1f  \n\u4f5c\u8005\u7b2c\u4e00\u904d\u5c31\u662f\u8fd9\u4e48\u5199\u7684\uff0c\u7136\u800c\u5374WA\u4e86\u3002\uff08\u539f\u56e0\u6b22\u8fce\u5927\u5bb6\u5728\u8bc4\u8bba\u533a\u63a2\u8ba8\uff09  \n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5176\u4ed6\u505a\u6cd5\uff1a\u5f00\u4e00\u4e2a`bool`\u6570\u7ec4\uff0c\u6bcf\u67e5\u8be2\u5230\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff0c\u5c31\u626b\u4e00\u904d\u8fd9\u4e2a\u5355\u8bcd\u7684`bool`\u6570\u7ec4\u5e76\u6253\u5370\u51fa\u6765\u5bf9\u5e94\u7684\u6587\u7ae0\u53f7\u3002  \n```cpp\n#include <cstdio>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#define MAXN 500100\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\n\ninline int read() {\n    int a=0,f=1;char v=getchar();\n    while(!isdigit(v)) {if (v == '-') {f = -1;}v = getchar();}\n    while (isdigit(v)) {a = a * 10 + v - 48;v = getchar();}\n    return a * f;\n}\n\nint n,m;\nchar s[MAXN];\n\nint trie[MAXN][26],en[MAXN],tot = 1;\nbool f[MAXN][1100];\n\ninline void insert(char *s,int q) {\n    int p = 1,len = strlen(s);\n    for (int k = 0;k < len;++k) {\n        int ch = s[k]-'a';\n        if (trie[p][ch] == 0) {\n            trie[p][ch] = ++tot;\n        }\n        p = trie[p][ch];\n    }\n    en[p] = 1;f[p][q] = 1;\n}\n\ninline void find(char* s) {\n    int p = 1,len = strlen(s);\n    bool flag = 1;\n    for (int k = 0;k < len;++k) {\n        p = trie[p][s[k]-'a'];\n        if (p == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag) {\n    \tfor (int i = 1;i <= n;++i) {\n    \t\tif (f[p][i]) {\n    \t\t\tprintf(\"%d \",i);\n            }\n        }\n    }\n    puts(\"\");\n}\n\nint main() {\n    n = read();\n    for (int i = 1;i <= n;++i) {\n        int g = read();\n        for (int j = 1;j <= g;++j) {\n            cin >> s;\n            insert(s,i);\n        }\n    }\n    m = read();\n    for (int i = 1;i <= m;++i) {\n        cin >> s;\n        find(s);\n    }\n    return 0;\n}\n```\n\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5AC\u4e86\u3002   \n\u4f46\u662f\uff0c\u6700\u540e\u4e00\u9898\u7684\u5c06$n$\u7ed9\u5361\u6ee1\u4e86\uff0c\u6240\u4ee5\u662f\u5426\u6709\u53e6\u4e00\u79cd\u505a\u6cd5\u5462\uff1f  \n\u8003\u8651\u5c06`bool`\u6570\u7ec4\u4f18\u5316\u4e00\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e9b\u72b6\u6001\u5341\u5206\u7b80\u5355\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u538b\u7f29\u4e00\u4e0b\uff1f  \n\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86`bitset`  \n`bitset`\u662f\u4ec0\u4e48\uff1f\u8fd9\u91cc\u7c98\u8d34\u4e00\u4f4d\u535a\u4e3b\u7ffb\u8bd1\u7684cplusplus.com\u4e0a\u7684\u5b9a\u4e49\uff1a  \n> bitset\u5b58\u50a8\u4e8c\u8fdb\u5236\u6570\u4f4d\u3002  \nbitset\u5c31\u50cf\u4e00\u4e2abool\u7c7b\u578b\u7684\u6570\u7ec4\u4e00\u6837\uff0c\u4f46\u662f\u6709\u7a7a\u95f4\u4f18\u5316\u2014\u2014bitset\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u4e00\u822c\u53ea\u53601 bit\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2achar\u5143\u7d20\u6240\u5360\u7a7a\u95f4\u7684\u516b\u5206\u4e4b\u4e00\u3002  \nbitset\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u80fd\u5355\u72ec\u88ab\u8bbf\u95ee\uff0c\u4f8b\u5982\u5bf9\u4e8e\u4e00\u4e2a\u53eb\u505a$foo$\u7684bitset\uff0c\u8868\u8fbe\u5f0f$foo[3]$\u8bbf\u95ee\u4e86\u5b83\u7684\u7b2c4\u4e2a\u5143\u7d20\uff0c\u5c31\u50cf\u6570\u7ec4\u4e00\u6837\u3002  \nbitset\u6709\u4e00\u4e2a\u7279\u6027\uff1a**\u6574\u6570\u7c7b\u578b\u548c\u5e03\u5c14\u6570\u7ec4\u90fd\u80fd\u8f6c\u5316\u6210bitset\u3002**\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5f3a\u5927\u7684`bitset`\u5199\u51fa\u4e00\u4efd\u5b8c\u7f8e\u7684AC\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <bitset>\n#define MAXN 500100\n#define min(a,b) ((a)<(b)?(a):(b))\n#define max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\n\ninline int read() {\n    int a=0,f=1;char v=getchar();\n    while(!isdigit(v)) {if (v == '-') {f = -1;}v = getchar();}\n    while (isdigit(v)) {a = a * 10 + v - 48;v = getchar();}\n    return a * f;\n}\n\nint n,m;\nchar s[MAXN];\n\nint trie[MAXN][26],en[MAXN],tot = 1;\nbitset <1110> f[MAXN];\n\ninline void insert(char *s,int q) {\n    int p = 1,len = strlen(s);\n    for (int k = 0;k < len;++k) {\n        int ch = s[k]-'a';\n        if (trie[p][ch] == 0) {\n            trie[p][ch] = ++tot;\n        }\n        p = trie[p][ch];\n    }\n    en[p] = 1;f[p][q] = 1;\n}\n\ninline void find(char* s) {\n    int p = 1,len = strlen(s);\n    bool flag = 1;\n    for (int k = 0;k < len;++k) {\n        p = trie[p][s[k]-'a'];\n        if (p == 0) {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag) {\n    \tfor (int i = 1;i <= n;++i) {\n    \t\tif (f[p][i]) {\n    \t\t\tprintf(\"%d \",i);\n            }\n        }\n    }\n    puts(\"\");\n}\n\nint main() {\n    n = read();\n    for (int i = 1;i <= n;++i) {\n        int g = read();\n        for (int j = 1;j <= g;++j) {\n            cin >> s;\n            insert(s,i);\n        }\n    }\n    m = read();\n    for (int i = 1;i <= m;++i) {\n        cin >> s;\n        find(s);\n    }\n    return 0;\n}\n```\n\u8fd9\u79cd\u505a\u6cd5\u6bd4`bool`\u4f18\u79c0\uff0c~~\u4f46\u662f\u6211\u7684bool\u6bd4bitset\u5feb~~\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u8fd9\u9898\u7684\u4e24\u79cd\u7ec6\u8282\u4e0a\u7684\u89e3\u6cd5\u8ba8\u8bba\u3002\n> \u505a\u9898\u5e76\u4e0d\u662f\u4e3a\u4e86\u9898\u6570\uff0c\u5982\u679c\u628a\u4e00\u9898\u7814\u7a76\u900f\u4e86\uff0c\u90a3\u4e48\u5199\u8fd9\u4e48\u4e00\u9898\u53ef\u4ee5\u5927\u5927\u589e\u52a0\u6211\u4eec\u7684\u80fd\u529b\n\n\u8fd9\u5c31\u662f\u6211\u8981\u8ba8\u8bba\u4e24\u79cd\u65b9\u6cd5\u7684\u7406\u7531\u3002\u5e0c\u671b\u5927\u5bb6\u80fd\u6536\u83b7\u4e00\u4e9b\u77e5\u8bc6\uff0c\u8c22\u8c22\u5927\u5bb6",
        "postTime": 1557915441,
        "uid": 105230,
        "name": "Retired_Doubeecat",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "```cpp\n/*\n    Name: Trie \n    Author: Jack\n    Date: 03/04/19 16:47\n    Description: \n        insert\uff1a \n        \u4ee5\u5b57\u7b26\u4e32\u4e3a\u4f8b\uff0c \u5f53\u9700\u8981\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32S\u65f6\uff0c\u6211\u4eec\u4ee4\u4e00\u4e2a\u6307\u9488P\n    \u8d77\u521d\u6307\u5411\u6839\u8282\u70b9\uff0c\u7136\u540e\u4f9d\u6b21\u63d2\u5165S\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26c:[\u4f2a\u4ee3\u7801]\n        1. if the pointer of c = NULL \n             then build a new node Q,the pointer of c = Q \n        2. else : we must know the pointer of c is Q \n             then let P=Q\n     \t   explain:\n     \t   \t \u6211\u4eec\u80af\u5b9a\u77e5\u9053c\u7684\u6307\u9488\u6307\u5411\u4e00\u4e2a\u8282\u70b9\uff0c\u8bbe\u5176\u4e3aQ\uff0c\u5728Q\u4e0a\u518d\u7ee7\u7eed\u8dd1 \n        3. if the search of S is over \n             back[the back of S]=true\n        find\uff1a\n        \u4ee5\u5b57\u7b26\u4e32\u4e3a\u4f8b\uff0c \u5f53\u9700\u8981\u68c0\u7d22\u4e00\u4e2a\u5b57\u7b26\u4e32S\u662f\u5426\u5728trie\u4e2d\u5b58\u5728\u65f6\uff0c\n    \u6211\u4eec\u4ee4\u4e00\u4e2a\u6307\u9488P\u8d77\u521d\u6307\u5411\u6839\u8282\u70b9\uff0c\u7136\u540e\u4f9d\u6b21\u626b\u63cfS\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26c:[\u4f2a\u4ee3\u7801]\n        1. if the pointer of c = NULL \n             then return false \n        2. else : we must know the pointer of c is Q \n             then let P=Q\n     \t   explain:\n     \t   \t \u6211\u4eec\u80af\u5b9a\u77e5\u9053c\u7684\u6307\u9488\u6307\u5411\u4e00\u4e2a\u8282\u70b9\uff0c\u8bbe\u5176\u4e3aQ\uff0c\u5728Q\u4e0a\u518d\u7ee7\u7eed\u8dd1 \n        3. if the search of S is over \n             then check back[the back of S]\n               if !back[the back of S]\n               \t then return false\n               explain\uff1a\u5982\u679cs\u7684\u672b\u5c3e\u672a\u88ab\u6807\u8bb0\u4e3a\u7ed3\u675f\uff0c\u8bc1\u660eS\u53ea\u662f\u67d0\u4e00\u6761\u6811\n                    \u4e0a\u8def\u5f84\u7684\u524d\u7f00\uff0c\u5e76\u975e\u5df2\u7ecf\u63d2\u5165S\u3002\n               else then return true \n        [\u7279]\uff1a\u5f53\u6570\u7ec4\u6807\u8bb0\u7a7a\u95f4\u7206\u70b8\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7528bitset\u6765\u5f53\u6807\u8bb0\uff0c\u7a7a\u95f4\u5c0f\u5927\u7ea632\u500d\uff01\n    example:TJ2010 \u9605\u8bfb\u7406\u89e3 \n*/\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 3e6 + 5;\nint trie[maxn][26],cnt;\nbitset<1001>back[maxn];\nint n,m,q; \nvoid insert(char * str,int x){\n    int len=strlen(str),p=0;\n    for(int k=0;k<len;k++){\n        int ch=str[k]-'a';\n        if(!trie[p][ch])\n            trie[p][ch]=++cnt;\n        p=trie[p][ch];\n    }\n    back[p][x]=1;\n} \nvoid find(){\n    char str[20];\n    scanf(\"%s\",str);\n    int len = strlen(str),p=0;\n    for(int k=0;k<len;k++){\n        p=trie[p][str[k]-'a'];\n        if(!p){\n            printf(\"\\n\");\n            return;\n        }\n    }\n    for(int i=1;i<=n;i++){\n        if(back[p][i])\n            printf(\"%d \",i);\n    }\t\n    printf(\"\\n\");\n}\nint main(){\n    char str[20];\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&q);\n        for(int j=1;j<=q;j++){\n            scanf(\"%s\",str);\n            insert(str,i);\n        }\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++){\n        find();\n    }\n    return 0;\n}\n```",
        "postTime": 1554336932,
        "uid": 39993,
        "name": "\u5143\u5915",
        "ccfLevel": 0,
        "title": "Trie \u5b57\u5178\u6811"
    },
    {
        "content": "\u7528\u5b57\u5178\u6811\u54ea\u6765\u90a3\u4e48\u591a\u5947\u602a\u7684\u95ee\u9898?\u4e00\u4e0b\u8f7b\u677eAC.\n```cpp\n#include<bits/stdc++.h>\nnamespace chtholly{\ntypedef long long ll;\n#define re0 register int\n#define rec register char\n#define rel register ll\n#define gc getchar\n#define pc putchar\n#define p32 pc(' ')\n#define pl puts(\"\")\n/*By Citrus*/\ninline int read(){\n  int x=0,f=1;char c=gc();\n  for (;!isdigit(c);c=gc()) f^=c=='-';\n  for (;isdigit(c);c=gc()) x=(x<<3)+(x<<1)+(c^'0');\n  return f?x:-x;\n  }\ntemplate <typename mitsuha>\ninline bool read(mitsuha &x){\n  x=0;int f=1;char c=gc();\n  for (;!isdigit(c)&&~c;c=gc()) f^=c=='-';\n  if (!~c) return 0;\n  for (;isdigit(c);c=gc()) x=(x<<3)+(x<<1)+(c^'0');\n  return x=f?x:-x,1;\n  }\ntemplate <typename mitsuha>\ninline int write(mitsuha x){\n  if (!x) return 0&pc(48);\n  if (x<0) x=-x,pc('-');\n  int bit[20],i,p=0;\n  for (;x;x/=10) bit[++p]=x%10;\n  for (i=p;i;--i) pc(bit[i]+48);\n  return 0;\n  }\ninline char fuhao(){\n  char c=gc();\n  for (;isspace(c);c=gc());\n  return c;\n  }\n}using namespace chtholly;//\u5feb\u8bfb\u5feb\u5199\u6211\u4eec\u4e0d\u7ba1\u5b83.\nusing namespace std;\nconst int yuzu=1e4;\nchar c[yuzu|10];\n\nstruct trie{//\u8fd9\u662f\u4e00\u68f5trie\u6811.\nint sz;\nstruct node{\n  int ch[26];\n  set<int> cnt;//\u6211\u6b63\u5728\u8003\u8651\u600e\u4e48\u5b58\u653e\u8fd9\u4e2a\u7ed3\u70b9\u8868\u793a\u7684\u5355\u8bcd\u51fa\u73b0\u5728\u54ea\u4e9b\u6587\u7ae0\u91cc,\u60f3\u60f3\u7528\u4e00\u4e2aset\u5c31\u53ef\u4ee5\u4e86.\n  }r[yuzu<<5|13];//\u5f00\u4e86\u8fd9\u4e48\u591a\u7ed3\u70b9.\nvoid insert(char *s,int k){//\u63d2\u5165\u51fd\u6570,k\u662f\u5b83\u6240\u5c5e\u7684\u6587\u7ae0\u7f16\u53f7.\n  int len=strlen(s),i,p,now=0;\n  for (i=0;i<len;++i){\n    p=s[i]-'a';\n    if (!r[now].ch[p]) r[now].ch[p]=++sz;\n    now=r[now].ch[p];\n    }\n  r[now].cnt.insert(k);\n  }\nvoid query(char *s){\n  int len=strlen(s),i,p,now=0;\n  for (i=0;i<len;++i){\n    p=s[i]-'a';\n    if (!r[now].ch[p]) return;//\u6ca1\u627e\u5230\u8fd9\u4e2a\u5355\u8bcd,\u76f4\u63a5\u8df3\u51fa.\u6ca1\u60f3\u5230\u6570\u7ec4\u8d8a\u754c\u7adf\u7136\u6ca1\u53d1\u751f\u4e00\u4e9b\u975e\u5e38\u5947\u602a\u7684\u95ee\u9898,\u6211\u975e\u5e38\u9707\u60ca.\n    now=r[now].ch[p];\n    }\n  for (auto q:r[now].cnt) write(q),p32;//\u8be2\u95ee\u5230\u5b83\u7684\u65f6\u5019\u76f4\u63a5\u627e\u4e2a\u4e1c\u897f\u904d\u5386\u4e00\u4e0bset\u8f93\u51fa\u91cc\u9762\u7684\u6240\u6709\u4e1c\u897f.\n  }\n}my_;\n\nint main(){\nfor (int n=read(),i=1;i<=n;++i){\n  for (int k=read();k--;){\n    scanf(\"%s\",c);\n    my_.insert(c,i);\n    }\n  }\nfor (int m=read();m--;){\n  scanf(\"%s\",c);\n  my_.query(c),pl;\n  }\n}//\u666e\u901a\u5730\u63d2\u5165\u548c\u666e\u901a\u7684\u8be2\u95ee,\u7136\u540e\u666e\u901a\u5730AC.\u8c22\u8c22\u5927\u5bb6.\n```",
        "postTime": 1531143285,
        "uid": 49371,
        "name": "Fuko_Ibuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u533a\u91cc\u7684\u4e3b\u6d41\u505a\u6cd5\u90fd\u662f map + vector \u6216\u8005 trie \u6811\uff0c\u672c\u849f\u84bb\u6765\u5199\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u505a\u6cd5\uff1amap + \u6570\u7ec4\u6a21\u62df\u94fe\u8868\u3002  \n\n\u6211\u4eec\u5229\u7528 map \u5bb9\u5668\u5c06\u8bfb\u5165\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u6620\u5c04\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8fb9\u8bfb\u5165\u8fb9\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5728\u54ea\u4e9b\u6587\u7ae0\u4e2d\u51fa\u73b0\u8fc7\u3002\u5373\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u7684\u7f16\u53f7\u4e3a $s_1,s_2,s_3,...$ \uff0c\u6587\u7ae0\u7f16\u53f7\u4e3a $p_1,p_2,p_3,...$ \uff0c\u6211\u4eec\u53ea\u9700\u8bb0\u5f55\u82e5\u5e72\u4e2a\u4e8c\u5143\u7ec4 $(s_i,p_{x_i})$ \uff0c\u4ee3\u8868\u7f16\u53f7\u4e3a $s_i$ \u7684\u5b57\u7b26\u4e32\u5728\u6587\u7ae0 $p_{x_i}$ \u4e2d\u51fa\u73b0\u8fc7\u3002\u6700\u540e\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u7684\u5b57\u7b26\u4e32 $s_i$ \uff0c\u6211\u4eec\u627e\u51fa\u6240\u6709\u7684\u4e8c\u5143\u7ec4 $(s_i,p_{x_i})$ \u5373\u53ef\u3002\u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5982\u4f55\u5feb\u901f\u627e\u51fa\u6765\u5462\uff1f  \n\n\u53ef\u4ee5\u56de\u60f3\u8d77\u6211\u4eec\u5728\u521a\u5b66\u56fe\u8bba\u7684\u65f6\u5019\uff0c\u90fd\u4e00\u5b9a\u8981\u77e5\u9053**\u94fe\u5f0f\u524d\u5411\u661f**\u8fd9\u79cd\u5b58\u56fe\u7684\u65b9\u6cd5\u3002\u5728\u904d\u5386\u4e00\u5f20\u56fe\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u4ee5\u67d0\u4e2a\u70b9 $u_i$ \u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8fb9\u7684\u4fe1\u606f\u2014\u2014\u8fd9\u4e0d\u662f\u548c\u672c\u9898\u9700\u8981\u5b58\u50a8\u7684\u4fe1\u606f\u5f88\u7c7b\u4f3c\u5417\uff1f  \n\n\u4e8e\u662f\uff0c\u5bf9\u94fe\u5f0f\u524d\u5411\u661f\u7a0d\u52a0\u6539\u9020\uff0c\u5c31\u5f97\u5230\u4e86\u672c\u9898\u6240\u9700\u8981\u7684\u6570\u7ec4\u6a21\u62df\u94fe\u8868\u3002\u4e0d\u8fc7\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\u7684\u987a\u5e8f\u548c\u904d\u5386\u7684\u987a\u5e8f\u662f\u76f8\u53cd\u7684\uff0c\u6240\u4ee5\u5728\u8f93\u51fa\u65f6\u9700\u8981\u6ce8\u610f\u3002\u8fd8\u6709\uff0c\u540c\u4e00\u4e2a\u5355\u8bcd\u53ef\u80fd\u5728\u4e00\u7bc7\u6587\u7ae0\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u8fd9\u70b9\u7ec6\u8282\u4e5f\u8981\u7559\u610f\u3002\n\n\u5177\u4f53\u5185\u5bb9\u8bf7\u770b\u4ee3\u7801\uff1a  \n\n```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#define MAXN 50005\n#define rint register int //\u5361\u5e38\nusing namespace std;\nint head[MAXN],ans[MAXN];\nmap <string,int> mp; //\u7528\u6765\u5c06\u5b57\u7b26\u4e32\u6620\u5c04\u4e3a\u4e00\u4e2a\u7f16\u53f7\u7684map\nstring s;\nint n,m,t,tot,cnt,idx;\nstruct Link{ //\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u6570\u7ec4\u6a21\u62df\u94fe\u8868\n\tint next,val;\n}list[MAXN];\ninline void add(int u,int v){ //\u677f\u5b50\n\tlist[++cnt].next=head[u];\n\tlist[cnt].val=v;\n\thead[u]=cnt;\n}\nint main(){\n\tios::sync_with_stdio(0); //\u52a0\u901fcin\u548ccout\u8bed\u53e5\n\tcin >> n;\n\tfor(rint i=1;i<=n;++i){\n\t\tcin >> t;\n\t\tfor(rint j=1;j<=t;++j){ //\u8bfb\u5165\u5e76\u5b58\u50a8\u6bcf\u4e2a\u5355\u8bcd\u7684\u4fe1\u606f\n\t\t\tcin >> s;\n\t\t\tif(!mp[s]) mp[s]=++tot; //\u5982\u679c\u8fd8\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u5c31\u7ed9\u5355\u8bcd\u8d4b\u4e88\u4e00\u4e2a\u7f16\u53f7\n\t\t\tadd(mp[s],i); //\u52a0\u5165\u94fe\u8868\n\t\t}\n\t}\n\tcin >> m;\n\twhile(m--){\n\t\tcin >> s;\n\t\tidx=0;\n        //\u904d\u5386\u987a\u5e8f\u548c\u5b58\u50a8\u987a\u5e8f\u76f8\u53cd\uff0c\u6240\u4ee5\u8981\u5012\u5e8f\u8f93\u51fa\n\t\tfor(rint i=head[mp[s]];i;i=list[i].next)\n\t\t\tif(ans[idx]!=list[i].val) //\u53bb\u91cd\n\t\t\t\tans[++idx]=list[i].val;\n\t\tfor(rint i=idx;i>=1;--i)\n\t\t\tcout << ans[i] << \" \";\n\t\tcout << \"\\n\";\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1574935895,
        "uid": 139837,
        "name": "\u82e5\u5982\u521d\u89c1",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    },
    {
        "content": "\u636e\u8bf4\u672c\u9898\u662f\u4e00\u4e2a ``\u666e\u53ca/\u63d0\u9ad8-`` \u7684\u9898\u76ee\uff1f\u849f\u84bb\u6211\u8868\u793a\u5f88\u9707\u60ca\u554a\u3002\u8fd9\u660e\u660e\u662fTrie\u6811\u7684\u677f\u5b50\u9898\u554a~~\uff08\u597d\u50cfTrie\u6811\u5168\u90fd\u662f\u6a21\u677f\u9898\uff09~~\u3002\n\n\u5176\u5b9e\u8fd9\u9053\u9898\u76ee\u662f\u6211\u65c1\u8fb9\u4e00\u4f4ddalao\u63a8\u8350\u6211\u505a\u7684\uff0c\u53c8\u56e0\u4e3a\u597d\u4e45\u4e0d\u5199\u6570\u636e\u7ed3\u6784\u9898\u4e86\uff0c\u7136\u540e\u5c31\u9009\u62e9\u4e86\u8fd9\u4e48\u4e00\u9053\u6c34\u9898\u6765\u5199\u3002\n\n\u5176\u5b9e\u611f\u89c9Trie\u6811\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5927\u4f53\u601d\u8def\u5c31\u662f\u76f4\u63a5\u6a21\u62df\u4e00\u4e0b\uff0c\u628a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e22\u5230\u4e00\u68f5\u6811\u4e0a\uff0c\u7136\u540e\u67e5\u627e\u5c31\u662f\u904d\u5386\u4e00\u904d\u8fd9\u68f5\u6811\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898\u5728\u7a7a\u95f4\u4e0d\u662f\u975e\u5e38\u7d27\u5f20\u7684\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u4f7f\u7528Trie\u8fdb\u884c\u5feb\u901f\u7684\u5339\u914d\u7684\u3002\u5f53\u7136Trie\u6811\u8fd8\u6709\u66f4\u591a\u5947\u5947\u602a\u602a\u7684\u7528\u9014~~\uff08\u53ef\u4ee5\u51fa\u5404\u79cd\u5404\u6837\u5947\u5947\u602a\u602a\u7684\u9898\u76ee\uff09~~\u3002\n\n\u4e3b\u8981\u64cd\u4f5c\u5927\u6982\u5c31\u662f\u4e00\u4e2a\u63d2\u5165\u548c\u67e5\u627e\u7684\u64cd\u4f5c\u3002\u53ef\u4ee5\u53c2\u8003dalao\u7684\u9898\u89e3\u5b66\u4e60\u3002\u8981\u901a\u8fc7\u8fd9\u9053\u9898\u4ec5\u4ec5\u9700\u8981\u5728Trie\u7684\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6dfb\u52a0\u4e00\u4e2a ``vector<int>`` \u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u5355\u8bcd\u5728\u54ea\u4e9b\u53e5\u5b50\u4e2d\u51fa\u73b0\u8fc7\u5c31\u884c\u4e86~~\uff08\u53ef\u80fd\u662f\u6307\u9488\u515a\u7684\u798f\u5229\uff1f\uff09~~\u3002\n\n\u9644\u4e0a\u4e0d\u6e05\u771f\u7684\u6307\u9488\u7248Trie\u6811\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<cstdlib>\nusing namespace std;\nnamespace trie{\n\tstruct node{\n\t\tnode *nxt[26];\n\t\tbool isStr;\n\t\tvector<int>v;\n\t\tnode(){\n\t\t\tmemset(nxt,0,sizeof nxt);\n\t\t\tv.clear();\n\t\t}\n\t};\n\tinline void insert(node *root,char *str,int cnt){\n\t\tif(!root||!*str)return;\n\t\twhile(*str){\n\t\t\tint p=*str-'a';\n\t\t\tif(!root->nxt[p])root->nxt[p]=new node();\n\t\t\troot=root->nxt[p];\n\t\t\t++str;\n\t\t}\n\t\tif(!root->v.size()||*(root->v.end()-1)!=cnt)root->v.push_back(cnt);\n\t}\n\tinline void find(node *root,char *str){\n\t\tif(!root||!*str)return;\n\t\twhile(*str){\n\t\t\tint p=*str-'a';\n\t\t\tif(!root->nxt[p])return;\n\t\t\troot=root->nxt[p];\n\t\t\t++str;\n\t\t}\n\t\tfor(vector<int>::iterator it=root->v.begin();it!=root->v.end();++it)\n\t\t\tprintf(\"%d \",*it);\n\t}\n}\nusing namespace trie;\nchar s[25];\nint n,m,l;\nint main(){\n\tnode *root=new node();\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&l);\n\t\twhile(l--){\n\t\t\tscanf(\"%s\",s);\n\t\t\tinsert(root,s,i);\n\t\t}\n\t}\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tscanf(\"%s\",s);\n\t\tfind(root,s);\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n```\n~~\uff08\u4e0d\u8981\u5410\u69fd\u4ee3\u7801\u98ce\u683c\u4e86\uff09~~",
        "postTime": 1527406870,
        "uid": 35485,
        "name": "Hatsune_Miku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3879 \u3010[TJOI2010]\u9605\u8bfb\u7406\u89e3\u3011"
    }
]