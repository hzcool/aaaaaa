[
    {
        "content": "## 0. \u9898\u610f\u7b80\u8ff0\n\n\u6709 $m$ \u6761\u53cc\u5411\u8fb9\uff0c\u6bcf\u6761\u6709\u4e24\u4e2a\u6743\u503c $c_i,t_i$\uff0c\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\u672c\u9898\u6700\u77ed\u8def\u5b9a\u4e49\uff1a\u6ca1\u6709\u5176\u4ed6\u540c\u65f6\u6ee1\u8db3 $\\sum c_i$ \u548c $\\sum t_i$ **\u90fd**\u4e0d\u6bd4\u5b83\u5c0f\uff08\u5f53\u7136\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u503c\u90fd\u76f8\u7b49\u7684\u4e24\u6761\u8def\u5f84\uff0c\u53ea\u8ba1\u4e00\u6b21\u8d21\u732e\uff09\u7684\u8def\u5f84\uff0c\u5219\u8fd9\u6761\u8def\u5f84\u662f\u4e00\u6761\u6700\u77ed\u8def\u5f84\u3002\n\n## 1. \u9898\u76ee\u5206\u6790&\u4e3b\u8981\u4ee3\u7801\n\n\u8003\u5bdf\u70b9\uff1a\u6700\u77ed\u8def\u3001\u5206\u5c42\u56fe\u6700\u77ed\u8def\n\n\u9898\u76ee\u96be\u5ea6\uff1a\u63d0\u9ad8+/\u7701\u9009-\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$\\Theta(k(n+m)\\log (km))$\uff0c$k$ \u4e3a $\\sum{c_i}$\u3002\n\n### \u9898\u76ee\u5206\u6790 & \u4e3b\u8981\u4ee3\u7801\n\n\u8fd9\u663e\u7136\u662f\u4e00\u9053\u6700\u77ed\u8def\u9898\u3002\n\n\u76f8\u4fe1\u7ffb\u5230\u8fd9\u7bc7\u9898\u89e3\u7684\u8bfb\u8005\uff0c\u8981\u4e48\u662f\u5728\u7ec3\u4e60\u5206\u5c42\u56fe\u6700\u77ed\u8def\uff0c~~\u8981\u4e48\u662f\u5728\u505a\u4e00\u672c\u901a\u63d0\u9ad8\u7bc7~~\u3002\n\n\u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u8bb2\u89e3\u5206\u5c42\u56fe\u672c\u8eab\uff0c\u800c\u662f\u91cd\u70b9\u8bb2\u89e3\u600e\u4e48\u5e94\u7528\u5230\u8fd9\u9053\u9898\u4e2d\u3002\uff08\u5982\u679c\u4f60\u60f3\u4e86\u89e3\uff0c\u53ef\u4ee5\u53bb\u627e\u5206\u5c42\u56fe\u6a21\u677f\u9898\u7684\u9898\u89e3\uff09\n\n#### \u5b58\u50a8\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u628a\u5206\u5c42\u56fe\u538b\u7f29\u6210\u4e00\u7ef4\u5b58\u50a8\u3002\n\n\u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570 `_`\uff08\u4f7f\u7528\u4e0b\u5212\u7ebf\u662f\u4e3a\u4e86\u6253\u8d77\u6765\u65b9\u4fbf\uff09\u3002\n\n```cpp\ninline int _(int u, int c)\n{ //u\u4e3a\u539f\u56fe\u8282\u70b9\u7f16\u53f7\uff0cc\u4e3a\u5c42\u6570\u3002\n    return c * n + u;\n}\n```\n\n\u7531\u4e8e $u$ \u7684\u53d6\u503c\u8303\u56f4\u662f $[1,n]$\uff0c\u8303\u56f4\u957f\u5ea6\u4e3a $n$\uff0c\u6240\u4ee5\u4f7f\u7528 $c\\times n+u$ \u6700\u4e3a\u8282\u7701\u7a7a\u95f4\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u4f7f\u7528\u6b63\u5e38\u524d\u5411\u661f\u5b58\u56fe\u4e86\u3002\n\n#### \u8bfb\u5165 & \u52a0\u8282\u70b9\n\n\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c`add(u, v, w)` \u4e3a\u524d\u5411\u661f\u6a21\u677f\u3002\n\n```cpp\nint main()\n{\n    scanf(\"%d%d%d%d\", &n, &m, &s, &E);\n    int p, r, c, t, maxK = 0;\n    for (int i = 1; i <= m; ++i)\n    {\n        scanf(\"%d%d%d%d\", &p, &r, &c, &t);\n        tmp[i].a = p;\n        tmp[i].b = r;\n        tmp[i].c = c;\n        tmp[i].d = t;\n        maxK += c;\n    }\n    for (int i = 1; i <= m; ++i)\n    {\n        p = tmp[i].a;\n        r = tmp[i].b;\n        c = tmp[i].c;\n        t = tmp[i].d;\n        for (int j = 0; j <= maxK; ++j)\n        {\n            add(_(p, j), _(r, j + c), t);\n            add(_(r, j), _(p, j + c), t);\n        }\n    }\n    ... //\u7701\u7565\n}\n```\n\n\u91c7\u53d6\u79bb\u7ebf\u8bfb\u5165\uff0c\u7b2c\u4e00\u6b21\u8bfb\u5165\u4e0d\u5904\u7406\uff0c\u76ee\u7684\u662f\u83b7\u53d6 $\\sum c_i$\uff08\u5b58\u50a8\u5230 `maxK` \u53d8\u91cf\u4e2d\uff09\u3002\n\n> Q. \u4e3a\u4ec0\u4e48\u8981\u83b7\u53d6 $\\sum c_i$\uff1f  \n> A. \u8003\u8651\u6781\u7aef\u60c5\u51b5\uff0c\u6240\u6709\u8fb9\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u6b64\u65f6\u8def\u5f84\u7684 $\\sum c_i$ \u5373\u4e3a\u5168\u5c40\u7684 $\\sum c_i$ \u5373 `maxK`\u3002\u6b64\u65f6\uff0c\u5206\u5c42\u56fe\u7684\u5c42\u6570\u5373\u4e3a `maxK`\u3002\n\n\u8fd9\u4e24\u884c\u4e2d\uff0c\u7531\u4e8e\u6b64\u6761**\u53cc\u5411**\u8fb9\u7684\u6743\u503c $c_i$ \u4e3a `c`\uff0c\u6240\u4ee5\u6b64\u8fb9\u8de8\u8d8a `c` \u5c42\uff0c\u5373\u4ece\u7b2c `j` \u5c42\u8de8\u8d8a\u5230\u7b2c `j + c` \u5c42\u3002\n\n```cpp\n            add(_(p, j), _(r, j + c), t);\n            add(_(r, j), _(p, j + c), t);\n```\n\n#### \u8dd1\u6700\u77ed\u8def\n\n\u7531\u4e8e\u5168\u4e3a\u6b63\u6743\uff0c\u53ef\u4ee5\u4f7f\u7528 Dijkstra \u6216 SPFA \u7b97\u6cd5\u3002\n\n\u8fd9\u91cc\u4f7f\u7528 Dijkstra \u5806\u4f18\u5316\u3002\n\n\u8fd9\u4e00\u90e8\u5206\u5199\u6a21\u677f\u5373\u53ef\u3002\n\n#### \u7edf\u8ba1\u7b54\u6848\n\n\u8003\u8651\u679a\u4e3e $\\sum c_i$\u3002\n\n\u5177\u4f53\u89e3\u91ca\uff1a\u679a\u4e3e\u6bcf\u4e2a $\\sum c_i$ \u7684\u8def\u5f84\u4e2d $\\sum t_i$ \u6700\u5c0f\u7684\u4e00\u4e2a\uff08\u5df2\u7ecf\u6c42\u51fa\uff09\uff08\u4e5f\u5c31\u662f\u7ec8\u70b9\u5728\u6bcf\u4e00\u5c42\u7684\u8282\u70b9 $e$ \u4e0a\u7684\u6700\u77ed\u8def\uff09\u3002\n\n\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\uff0c\u540c\u65f6\u7ef4\u62a4\u81f3\u4eca\u4e3a\u6b62\u7684 $\\max \\sum t_i$\uff0c\u8bb0\u4e3a $T$\u3002\n\n\u5982\u679c $\\sum t_i\\ge T$\uff0c\u5c31\u8bf4\u660e\u4e4b\u524d\u679a\u4e3e\u5230\u4e86\u4e24\u4e2a\u6743\u503c\u90fd\u4e0d\u6bd4\u5f53\u524d\u8def\u5f84\u5927\u7684\u4e00\u6761\u8def\u5f84\uff0c\u56e0\u6b64\u5f53\u524d\u8def\u5f84\u4e0d\u8ba1\u5165\u7b54\u6848\u3002\n\n```cpp\n    int ans = 0, mn = 0x3f3f3fff;\n    for (int i = 0; i <= maxK; ++i)\n    {\n        bool isAns = true;\n        if (dis[_(E, i)] >= 0x3f3f3f00 || dis[_(E, i)] >= mn)\n            isAns = false;\n        mn = min(mn, dis[_(E, i)]);\n        if (isAns)\n        {\n            ++ans;\n        }\n    }\n```\n\n## 2. \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 104, maxm = 304, maxk = 104 * maxm;\nstruct Temp\n{\n    int a, b, c, d;\n} tmp[maxm];\nstruct Edge\n{\n    int v, w, next;\n} e[maxm * maxk * 2];\nint head[maxn * maxk], cnt;\nint n, m, s, E;\nint dis[maxn * maxk];\n\ninline int _(int u, int c)\n{\n    return c * n + u;\n}\nvoid add(int u, int v, int w)\n{\n    e[++cnt].v = v;\n    e[cnt].w = w;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\nvoid dij()\n{\n    memset(dis, 0x3f, sizeof(dis));\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;\n    dis[_(s, 0)] = 0;\n    q.push({0, _(s, 0)});\n    while (!q.empty())\n    {\n        auto t = q.top();\n        q.pop();\n        int u = t.second;\n        if (dis[u] < t.first)\n            continue;\n        for (int i = head[u]; i; i = e[i].next)\n        {\n            int v = e[i].v;\n            if (dis[v] > dis[u] + e[i].w)\n            {\n                dis[v] = dis[u] + e[i].w;\n                q.push({dis[v], v});\n            }\n        }\n    }\n    return;\n}\nint main()\n{\n    scanf(\"%d%d%d%d\", &n, &m, &s, &E);\n    int p, r, c, t, maxK = 0;\n    for (int i = 1; i <= m; ++i)\n    {\n        scanf(\"%d%d%d%d\", &p, &r, &c, &t);\n        tmp[i].a = p;\n        tmp[i].b = r;\n        tmp[i].c = c;\n        tmp[i].d = t;\n        maxK += c;\n    }\n    for (int i = 1; i <= m; ++i)\n    {\n        p = tmp[i].a;\n        r = tmp[i].b;\n        c = tmp[i].c;\n        t = tmp[i].d;\n        for (int j = 0; j <= maxK; ++j)\n        {\n            add(_(p, j), _(r, j + c), t);\n            add(_(r, j), _(p, j + c), t);\n        }\n    }\n    dij();\n    int ans = 0, mn = 0x3f3f3fff;\n    for (int i = 0; i <= maxK; ++i)\n    {\n        bool isAns = true;\n        if (dis[_(E, i)] >= 0x3f3f3f00 || dis[_(E, i)] >= mn)\n            isAns = false;\n        mn = min(mn, dis[_(E, i)]);\n        if (isAns)\n        {\n            ++ans;\n        }\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n\n```\n## 3. Note\n\n1. \u672c\u89e3\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981 O2 \u4f18\u5316\u624d\u80fd\u901a\u8fc7\u6b64\u9898\u3002\u6b64\u9898\u53ef\u80fd\u6709\u66f4\u4f18\u89e3\u6cd5\u3002\n2. \u6ce8\u610f\u7ec6\u8282\uff1a\u53cc\u5411\u8fb9\u3001\u975e\u4e25\u683c\u5355\u8c03\uff08\u542b\u53d6\u7b49\u60c5\u51b5\uff09\u3002\n3. \u6ce8\u610f\u5f00\u4e24\u500d\u6570\u7ec4\uff0c\u7ecf\u8bd5\u9a8c\u6b63\u597d\u80fd\u5361\u8fdb\u7a7a\u95f4\u9650\u5236\u3002\n4. \u6284\u9898\u89e3\u662f\u4e0d\u597d\u7684\u4e60\u60ef\u3002\n",
        "postTime": 1644056936,
        "uid": 371468,
        "name": "qidirj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P8068 \u3010[BalticOI 2002 Day2] Bicriterial routing\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6bcf\u4e00\u6761\u8fb9\u6709\u4e24\u4e2a\u6743\u503c $(c_i, t_i)$\uff0c\u8981\u6c42\u51fa\u56fe\u4e2d\u7ed9\u5b9a\u4e24\u70b9\u95f4\u53cc\u8c03\u6700\u77ed\u8def\u5f84\u7684\u6761\u6570\u3002\u5176\u4e2d\u53cc\u8c03\u6700\u77ed\u8def\u5f84\u5b9a\u4e49\u4e3a\u6ca1\u6709\u5176\u4ed6\u8def\u5f84\u540c\u65f6\u6ee1\u8db3 $\\sum c_i$ \u548c $\\sum t_i$ \u90fd\u5c0f\u4e8e\u8fd9\u6761\u8def\u5f84\u3002\uff08\u56e0\u6b64\u53ef\u4ee5\u770b\u51fa\u4f1a\u6709\u5f88\u591a\u6700\u77ed\u8def\u5f84\uff09\n\n## \u9898\u76ee\u5206\u6790\n\n\u56e0\u4e3a\u73b0\u5728\u6709\u4e86\u4e24\u79cd\u8fb9\u6743\uff0c\u56e0\u6b64\u539f\u672c\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684 $dis$ \u6570\u7ec4\u80af\u5b9a\u4e0d\u80fd\u662f\u4e00\u7ef4\u7684\u4e86\uff0c\u8fd9\u6837\u65e0\u6cd5\u8868\u793a\u4e00\u4e2a\u53cc\u8c03\u7684\u5927\u5c0f\u3002\n\n\u4e8e\u662f\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u8bbe $dis[i][j]$ \u4e3a\u4ece\u8d77\u70b9\u5230 $i$ \u5728\u6743\u503c $c$ \u7684\u503c\u4e3a $j$ \u65f6 $t$ \u7684\u6700\u5c0f\u503c\u3002\n\n\u5728\u677e\u5f1b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u663e\u7136\u53ea\u6709\u6ee1\u8db3\u8fd9\u6761\u8fb9 $(from_i, to_i, c_i, t_i)$ \u6709\n- $dis[to_i][nowc + c_i] > dis[from_i][nowc] + t_i$\n\n\u65f6\uff0c\u624d\u4f1a\u8fdb\u884c\u677e\u5f1b\u3002\n\n\u6700\u77ed\u8def\u76f4\u63a5\u4f7f\u7528 SPFA \u5c31\u53ef\u4ee5\u4e86\uff0c\u6700\u7ec8\u671f\u671b\u590d\u6742\u5ea6\u4e3a $O(KN)$\u3002\u4e0d\u8fc7\u5728\u8fd9\u91cc\uff08\u8c8c\u4f3c\uff09\u5728\u521d\u59cb\u5316 $dis$ \u6570\u7ec4\u65f6\u4e0d\u80fd\u4f7f\u7528 memset \u51fd\u6570\uff0c\u53ea\u80fd\u624b\u52a8\u4e8c\u91cd\u5faa\u73af\u8d4b\u503c\uff0c\u56e0\u6b64\u5e38\u6570\u5f88\u5927\u3002\n\n\u6700\u7ec8\u63d0\u4ea4\uff1a$282ms$\n\n## AC Code\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nstruct Edge{int to, c, t, next;}e[1000000];\nstruct Node{\n\tint p, c;\n\tNode(int _p = 0, int _c = 0): p(_p), c(_c){}\n};\nint n, m, head[1001], tot, st, en;\nint dis[101][30001];\nbool vis[101][30001];\n\ninline void addedge(int u, int v, int c, int t){\n    e[++tot].to = v;\n    e[tot].c = c;\n    e[tot].t = t;\n    e[tot].next = head[u];\n    head[u] = tot;\n}\n\nqueue<Node> q;\ninline void SPFA(){\n\tq.push(Node(st, 0));\n\tvis[st][0] = 1; dis[st][0] = 0;\n\tNode now;\n    while (!q.empty()){\n        now = q.front(); q.pop();\n        if (now.c > m * 100) continue;\n        vis[now.p][now.c] = 0;\n        for (int i=head[now.p]; i; i=e[i].next){\n        \tint v = e[i].to, c = e[i].c, t = e[i].t; \n            if (dis[v][now.c + c] > dis[now.p][now.c] + t){\n                dis[v][now.c + c] = dis[now.p][now.c] + t;\n                if (!vis[v][now.c + c]){\n                    vis[v][now.c + c] = 1;\n                \tq.push(Node(v, now.c + c));\n                }\n            }\n        }\n    }\n}\n\nint main(){\n    scanf(\"%d%d%d%d\", &n, &m, &st, &en);\n    int u, v, _c, _t, sumt = 0;\n    for (int i=1; i<=m; i++){\n        scanf(\"%d%d%d%d\", &u, &v, &_c, &_t);\n        addedge(u, v, _c, _t); addedge(v, u, _c, _t);\n        sumt += _t;\n    }\n    for (int i=1; i<=n; i++) for (int j=0; j<=sumt; j++) dis[i][j] = 2e9;\n    SPFA();\n\tint ans = 0, last = 2e9;\n    for (int i=0; i<=sumt; i++) if (dis[en][i] < last){\n        last = dis[en][i];\n        ans++;\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n \n```\n",
        "postTime": 1653461659,
        "uid": 542282,
        "name": "lrqlrq250",
        "ccfLevel": 0,
        "title": "P8068 [BalticOI 2002 Day2] Bicriterial routing\u9898\u89e3"
    },
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u4ee5\u83b7\u53d6\u66f4\u597d\u7684\u4f53\u9a8c\uff0c\u8bf7\u70b9 [\u8fd9\u91cc](https://www.cnblogs.com/2020gyk080/p/luogu_p8068.html)\u3002\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n- SPFA\uff08\u6b64\u9898\u89e3\u7684\u4f18\u5316\u662f\u57fa\u4e8e SPFA \u7684\uff0c\u8dd1\u8d77\u6765\u6548\u7387\u60ca\u4eba\uff0c**\u751a\u81f3\u6bd4\u5b98\u65b9\u6807\u7a0b\u8fd8\u5feb**\uff09\n- \u6811\u72b6\u6570\u7ec4\n\n## \u9898\u76ee\n\n\u6709 $m$ \u6761\u53cc\u5411\u8fb9\uff0c\u6bcf\u6761\u6709\u4e24\u4e2a\u6743\u503c $c_i$, $t_i$\uff0c\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\n\n\u672c\u9898\u6700\u77ed\u8def\u5b9a\u4e49\uff1a\u6ca1\u6709\u5176\u4ed6\u540c\u65f6\u6ee1\u8db3 $\\sum c_i$ \u548c $\\sum t_i$ \u90fd\u4e0d\u6bd4\u5b83\u5c0f\uff08\u5f53\u7136\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u503c\u90fd\u76f8\u7b49\u7684\u4e24\u6761\u8def\u5f84\uff0c\u53ea\u8ba1\u4e00\u6b21\u8d21\u732e\uff09\u7684\u8def\u5f84\u3002\n\n## \u601d\u8def\n\n\u7531\u4e8e\u6b64\u9898\u4e0e\u4e00\u822c\u6700\u77ed\u8def\u4e0d\u540c\uff0c\u8fb9\u6709\u4e24\u79cd\u6743\u503c\uff0c\u6240\u4ee5\u9700\u8981\u5728\u6bcf\u4e2a\u8282\u70b9\u5904\u589e\u52a0\u4e00\u7ef4\u72b6\u6001\u3002\u5373\u7528 $dp[i][j]$ \u8868\u793a\u5728 $i$ \u70b9\u4e14\u5df2\u7528\u8d39\u7528\u4e3a $j$ \u65f6\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u5219\u6709\uff1a$$dp[i][j] = \\min \\left\\{ dp[k][i - cost[k][i]] + time[k][i]\\ |\\ \\text{For each }edge(k, i) \\right\\}$$\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528 SPFA \u7b97\u6cd5\u6c42\u89e3\u3002\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(KN^2V)$\u3002~~\u5df2\u7ecf\u6bd4\u5b98\u65b9\u6807\u7a0b\u8dd1\u7684\u5feb\u4e86~~\n\n## \u4f18\u5316\n\n\u867d\u7136\u5b9e\u9645\u7b97\u6cd5\u8fd0\u884c\u7684\u5f88\u5feb\uff0c\u7136\u800c\u72b6\u6001\u4f1a\u8fbe\u5230 $100^3$ \u7684\u7ea7\u522b\uff0c\u4f18\u5316\u7a7a\u95f4\u8fd8\u5f88\u5927\u3002\n\n\u5728\u8fed\u4ee3\u6c42\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u8003\u8651\u4efb\u610f\u4e00\u65b0\u72b6\u6001 $dp[i][j]$\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u4e00\u72b6\u6001 $dp[i][k]$\uff0c\u6ee1\u8db3 $k<j$ \u4e14 $dp[i][k]<dp[i][j]$\uff0c\u5219\u663e\u7136 $dp[i][j]$ \u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u4e5f\u5c31\u6ca1\u6709\u66f4\u65b0\uff08\u5c06\u5176\u52a0\u5165\u961f\u5217\uff09\u7684\u5fc5\u8981\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u52a0\u5165\u8fd9\u6837\u4e00\u4e2a\u526a\u679d\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u72b6\u6001 $dp[i][j]$\uff0c\u6211\u4eec\u67e5\u8be2 $dp[i][0...j]$ \u7684\u6700\u5c0f\u503c $minTime$\uff0c\u5f53 $dp[i][j]<minTime$ \u65f6\u518d\u8fdb\u884c\u66f4\u65b0\u3002\u5728\u5b9e\u73b0\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 $dp[i]$ \uff0c\u4ee5\u52a0\u5feb\u67e5\u8be2\u901f\u5ea6\u3002\n\n\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6 $O(KN^2V \\log N)$\uff0c\u800c\u5b9e\u9645\u6548\u7387\u60ca\u4eba\uff0c\u662f\u5b98\u65b9\u6807\u7a0b\u7684\u5341\u500d\u5feb\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#define lowbit(x) ((x)&(-x))\nconst int MAXN=1e4+5;\nint nxt[605],v[605],w[605],to[605],head[605],q[1000005][2],dis[105][MAXN],tree[105][MAXN],cnt,n,m,s,t,ans;\nbool vis[105][MAXN];\nvoid treearr_add(int x,int y,int val)\n{\n    y++;        //\u6811\u72b6\u6570\u7ec4\u4e0d\u652f\u6301\u4e0b\u6807\u4e3a0\uff0c\u6545+1\n    while(y<=n*100)\n    {\n        tree[x][y]=min(tree[x][y],val);\n        y+=lowbit(y);\n    }\n    return;\n}\nint treearr_sum(int x,int y)\n{\n    int res=1e7;\n    y++;\n    while(y)\n    {\n        res=min(res,tree[x][y]);\n        y-=lowbit(y);\n    }\n    return res;\n}\nvoid g_addedge(int a,int b,int c,int d)     //\u52a0\u8fb9\uff01\u52a0\u8fb9\uff01\u52a0\u8fb9\uff01\u6ce8\u610f\u6709\u4e24\u4e2a\u8fb9\u6743\n{\n    nxt[++cnt]=head[a];\n    head[a]=cnt;\n    to[cnt]=b;\n    v[cnt]=c;\n    w[cnt]=d;\n    return;\n}\nvoid g_sp_SPFA()\n{\n    int x,f1,y,f2;\n    memset(dis,0x3f,sizeof(dis));\n    memset(tree,0x3f,sizeof(tree));\n    dis[s][0]=0;\n    q[1][0]=s;\n    q[1][1]=0;\n    treearr_add(s,0,0);\n    for(int h=1,t=1;h<=t;h++)\n    {\n        x=q[h][0];\n        f1=q[h][1];\n        vis[x][f1]=false;\n        for(int i=head[x];i;i=nxt[i])\n        {\n            y=to[i];\n            f2=f1+w[i];\n            if(treearr_sum(y,f2)>dis[x][f1]+v[i])       //\u82e5\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u53ef\u80fd\u5bf9\u7b54\u6848\u6709\u8d21\u732e\n            {\n                dis[y][f2]=dis[x][f1]+v[i];\n                treearr_add(y,f2,dis[y][f2]);\n                if(!vis[y][f2])\n                {\n                    vis[y][f2]=true;\n                    q[++t][0]=y;\n                    q[t][1]=f2;\n                }\n            }\n        }\n    }\n    return;\n}\nint main()\n{\n    int a,b,c,d,mind;\n    scanf(\"%d %d %d %d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d %d %d\",&a,&b,&c,&d);\n        g_addedge(a,b,d,c);\n        g_addedge(b,a,d,c);\n    }\n    g_sp_SPFA();\n    mind=dis[0][0];\n    for(int i=0;i<=n*100;i++)       //\u8d39\u7528\u9012\u589e\uff0c\u65f6\u95f4\u9012\u51cf\n    {\n        if(dis[t][i]<mind)\n        {\n            mind=dis[t][i];\n            ans++;\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1645505974,
        "uid": 470638,
        "name": "Steven_lzx",
        "ccfLevel": 5,
        "title": "P8068 [BalticOI 2002 Day2] Bicriterial routing \u9898\u89e3"
    },
    {
        "content": "**\u524d\u7f6e\u829d\u58eb\uff1aspfa,dp**\n\n\u8003\u8651\u8bbe\u8ba1\u5982\u4e0b\u72b6\u6001\uff1a\n+ $dp[i][j]$ \u8868\u793a\u4ece\u8d77\u70b9 $s$ \u51fa\u53d1\u8d70\u5230\u70b9 $i$\uff0c\u4e14\u82b1\u8d39\u6070\u597d\u4e3a $j$ \u6240\u9700\u7684\u6700\u5c0f\u65f6\u95f4\u3002\n\n\u5bf9\u4e8e\u70b9 $u$ \u6765\u8bf4\uff0c\u6211\u4eec\u679a\u4e3e\u6240\u6709\u4e0e\u5176\u76f8\u90bb\u7684\u70b9 $v$\uff0c\u8bbe\uff1a\n+ \u4e00\u6761\u5f62\u5982 $<u,v>$ \u7684\u901a\u9053\uff0c\u5176\u6d88\u8017\u65f6\u95f4\u4e3a $t$\uff0c\u8d39\u7528\u4e3a $c$\u3002\n+ \u8d70\u5230\u70b9 $u$ \u65f6\uff0c\u5df2\u82b1\u8d39 $cost$\u3002\n+ $nw = cost + c$\uff0c\u5373\u5f53\u524d\u72b6\u6001\u8d70\u5230 $v$ \u9700\u8981\u7684\u82b1\u8d39\u3002\n\n\u5219\u6709\u5982\u4e0b\u8f6c\u79fb\u65b9\u7a0b\uff1a\n$$dp[v][nw] = \\min \\{dp[u][cost]+t\\}$$\n\n\u5bf9\u7740\u8fd9\u4e2a\u65b9\u7a0b\u6253spfa\u5373\u53ef\u3002\n\n**\u8003\u8651\u7ed3\u679c\u7684\u7edf\u8ba1**\uff1a\n\n\u4ece\u524d\u5230\u540e\u679a\u4e3e\u82b1\u8d39 $c$\uff0c\u540c\u65f6\u7ef4\u62a4\u76ee\u524d\u6240\u7528\u65f6\u95f4\u7684\u6700\u5c0f\u503c $minv$\n\n\u6211\u4eec\u6240\u679a\u4e3e\u7684\u82b1\u8d39\u4e00\u5b9a\u6700\u5c0f\uff0c\u6211\u4eec\u8bb0\u5f55\u4e0b\u6700\u5c0f\u65f6\u95f4\uff0c\u5982\u679c\u5728\u82b1\u8d39\u66f4\u591a\u540e\uff0c\u6240\u8017\u65f6\u95f4\u51cf\u5c11\u4e86\uff0c\u5219\u8bf4\u660e\u51fa\u73b0\u4e86\u4e00\u6761 **\u5728\u5f53\u524d\u82b1\u8d39\u5185\uff0c\u65f6\u95f4\u4e00\u5b9a\u6700\u5c0f\u7684** \u8def\u5f84\u3002 \n\n\u5269\u4e0b\u7684\u5c31\u662f\u4ee3\u7801\u5566\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 110, M = 1210, INF = 2139062143;\nconst int S = 30010;\nint n, m, s, e;\n\nstruct Edge\n{\n\tint to, nxt;\n\tint t, c;\n} edges[M];\n\nint idx = 0, head[N];\ninline void link(int a, int b, int c, int t)\n{\n\t++ idx;\n\tedges[idx] = {b, head[a], t, c};\n\thead[a] = idx;\n\treturn ;\n}\n\nbool state[N][S];\nint dp[N][S]; // \u4eces\u8d70\u5230i,\u82b1\u8d39\u4e3aj\u7684\u6700\u5c0f\u65f6\u95f4\ntypedef pair<int, int> PII;\n\ninline void spfa(int s)\n{\n\tmemset(dp, 127, sizeof dp);\n\tdp[s][0] = 0;\n\tstate[s][0] = true;\n\tqueue<PII>q; // {i, j} \u8868\u793a\u8d70\u5230i\u82b1\u8d39\u4e86j\u5143\n\tq.push({s, 0});\n\twhile(!q.empty())\n\t{\n\t\tint id = q.front().first;\n\t\tint cost = q.front().second;\n\t\tq.pop();\n\t\tstate[id][cost] = false;\n\t\tfor(int i(head[id]);i;i = edges[i].nxt)\n\t\t{\n\t\t\tint to = edges[i].to;\n\t\t\tint w = edges[i].c, t = edges[i].t;\n\t\t\tint nw = cost + w;\n\t\t\tif(nw <= 30000 and dp[to][nw] > dp[id][cost] + t)\n\t\t\t{\n\t\t\t\tdp[to][nw] = dp[id][cost] + t;\n\t\t\t\tif(!state[to][nw])\n\t\t\t\t{\n\t\t\t\t\tq.push({to, nw});\n\t\t\t\t\tstate[to][nw] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\treturn ;\n}\n\nint main()\n{\n\tint sum = 0;\n\tscanf(\"%d %d %d %d\", &n, &m, &s, &e);\n\tfor(int i(1);i <= m; ++ i)\n\t{\n\t\tint from, to, cost, time;\n\t\tscanf(\"%d %d %d %d\", &from, &to, &cost, &time);\n\t\tlink(from, to, cost, time);\n\t\tlink(to, from, cost, time);\n\t\tsum += cost;\n\t}\n\tspfa(s);\n\tint maxv = INF, res = 0;\n\tfor(int i(0);i <= sum; ++ i)\n\t\tif(dp[e][i] < maxv)\n\t\t{\n\t\t\t++ res;\n\t\t\tmaxv = dp[e][i];\n\t\t}\n\tprintf(\"%d\", res);\n\treturn 0;\n}\n```\n\n---\n\n\u7ec6\u5fc3\u7684\u540c\u5b66\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u5728\u72b6\u6001\u8f6c\u79fb\u4e2d\uff0c\u6211\u6dfb\u52a0\u4e86\u8fd9\u6837\u4e00\u6761\u8bed\u53e5\uff1a\n+ $nw \\le 30000$\n\n\u8003\u8651 $m \\le 300,c \\le 100$\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u6211\u4eec\u5c06\u6bcf\u6761\u8fb9\u90fd\u8d70\u4e86\u4e00\u904d\uff0c\u5373\u82b1\u8d39\u4e86 $100 \\times 300 = 30000$\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u7684\u82b1\u8d39\u8d85\u8fc7\u4e86\u6700\u5927\u4e0a\u9650\uff0c\u662f\u4e0d\u80fd\u88ab\u8f6c\u79fb\u7684\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\n\nspfa\u7684\u57fa\u7840\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm)$\uff0c\u72b6\u6001\u6269\u5c55\u6570\u91cf\u4e3a $n^2$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3m)$\uff0c\u4f46\u662f\u5b9e\u9645\u8fd0\u884c\u6548\u7387\u98de\u5feb\uff0c\u731c\u6d4b\u53ef\u80fd\u662f\u56e0\u4e3a\u72b6\u6001\u6570\u91cf\u5728\u5927\u591a\u6570\u65f6\u5019\u90fd\u662f\u65e0\u6cd5\u6269\u5c55\u5230\u5b8c\u5168 $n^2$ \u7684\u3002",
        "postTime": 1673091509,
        "uid": 666796,
        "name": "Rainsheeep",
        "ccfLevel": 0,
        "title": "P8068 [BalticOI 2002 Day2] Bicriterial routing \u9898\u89e3"
    },
    {
        "content": "\u6bd4\u8f83\u597d\u7684\u67d0\u79cd~~\u7279\u522b\u597d\u7528~~\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u9898\u76ee~~\u5176\u5b9e\u6211\u53ea\u4f1a\u5199 SPFA~~\u3002\\\n\u5176\u5b9e\u4e00\u672c\u901a\u63d0\u9ad8\u7bc7\u4e0a\u8fd8\u6709\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u7684\u505a\u6cd5\uff0c\u4f46\u6211\u592a\u83dc\u4e86\uff0c\u53ea\u4f1a\u7b80\u5355\u7684 SPFA \u4f18\u5316\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u9898\u76ee\u3002\n### \u9898\u76ee\u5927\u610f\n\n\u6709\u4e24\u4e00\u4e2a\u56fe\uff0c\u56fe\u4e0a\u6bcf\u6761\u8fb9\u4e24\u4e2a\u6709\u4e24\u4e2a\u6743\u503c $c_i$ \u548c $t_i$\uff0c\u6c42\u4e24\u4e2a\u70b9 $S$ \u4e0e $T$\n\u7684\u8def\u5f84\u4e0a\uff0c\u6ee1\u8db3 $t$ \u6bd4\u6240\u6709 $c$ \u66f4\u5c0f\u7684\u8def\u5f84\u8fd8\u8981\u5c0f\uff0c\u6216 $c$ \u6bd4\u6240\u6709$t$ \u66f4\u5c0f\u7684\n\u8def\u5f84\u8fd8\u8981\u5c0f\u7684\u8def\u5f84\u603b\u6570\uff0c\u7136\u540e\u8fd9\u4e2a\u603b\u6570\u5373\u4e3a\u53cc\u8c03\u6700\u77ed\u8def\u5f84\u7684\u6570\u91cf\u3002\n\n### \u505a\u6cd5\n\n\u53cc\u8c03\u6700\u77ed\u8def\uff0c\u540c\u6837\u4e5f\u662f\u6700\u77ed\u8def\uff0c\u8dd1\u4e8c\u7ef4\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n\u8bbe $dis\\left[ i,j \\right]$ \u8868\u793a\u7531 $S$ \u5230 $i$ \u70b9\u8d39\u7528\u4e3a $j$ \u7684\u8def\u5f84\u7684\u6700\u5c0f\u65f6\u95f4\uff0c\u7136\u540e\u8dd1 SPFA\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $dis\\left[ T,i \\right]$,\u5982\u679c\u6709 $dis\\left[ T,i \\right]<dis\\left[ T,j \\right] (j<i)$ \u6052\u6210\u7acb\uff0c\u5219 $ans++$\u3002(\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u9898\u76ee\u4e2d\u8bf4\u8d39\u7528\u65f6\u95f4\u90fd\u76f8\u540c\u7684\u4e24\u6761\u6700\u5c0f\u8def\u5f84\u53ea\u7b97\u4f5c\u4e00\u6761)\n\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e3+1,ml=1e4+1;\nint head[maxn],dis[maxn][maxn*10],cnt;\nint n,m,s,t,INF;\nbool vis[maxn][maxn*10];\nstruct node\n{\n\tint v,w,t,nxt;\n}e[maxn<<1];\nvoid add(int u,int v,int w,int t)\n{\n\te[++cnt].v=v;\n\te[cnt].w=w;\n\te[cnt].t=t;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\ntypedef pair<int,int> pr;\nqueue<pr> q; \nvoid spfa()//\u8dd1\u4e8c\u7ef4\u7684\u6700\u77ed\u8def\u5373\u53ef\n{\n\tmemset(dis,0x3f3f3f3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tINF=dis[0][0]; dis[s][0]=0; vis[s][0]=1;\n\tq.push(make_pair(s,0));\n\twhile(!q.empty())\n\t{\n\t\tpr tmp=q.front(); q.pop();\n\t\tint u=tmp.first,us=tmp.second; vis[u][us]=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].v,t=e[i].t,vs=us+e[i].w;\n\t\t\tif(vs<=ml)\n\t\t\t{\n\t\t\t\tif(dis[v][vs]>dis[u][us]+t) \n\t\t\t\t{\n\t\t\t\t\tdis[v][vs]=dis[u][us]+t;\n\t\t\t\t\tif(!vis[v][vs])\n\t\t\t\t\t{\n\t\t\t\t\t\tq.push(make_pair(v,vs)),vis[v][vs]=1;\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m>>s>>t;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v,w,tt;\n\t\tscanf(\"%d%d%d%d\",&u,&v,&w,&tt);\n\t\tadd(u,v,w,tt); add(v,u,w,tt);\n\t}\n\tspfa();\n\tint ans=0,minn=INF;\n\tfor(int i=0;i<=ml;++i)\n\t{\n\t\tif(dis[t][i]<minn) ++ans,minn=dis[t][i];\n\t}\n\tcout<<ans;\n\t\n\treturn 0;\n} \n```",
        "postTime": 1664355347,
        "uid": 541145,
        "name": "Fleeing_loser",
        "ccfLevel": 0,
        "title": "P8068 [BalticOI 2002 Day2] Bicriterial routing \u9898\u89e3"
    }
]