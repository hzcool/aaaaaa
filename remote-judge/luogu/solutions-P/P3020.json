[
    {
        "content": "\u6700\u77ed\u8def\u88f8\u9898\n\ndij+heap\n\n\u62ff\u6765\u7ec3\u624b\u8fd8\u662f\u5f88\u597d\u7684\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int MAXN=50000 + 3;\nint read()\n{\n    int x=0,w=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-') w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-48;c=getchar();}\n    return x*w;\n}\n\nstruct Edge\n{\n    int to,w,next;\n}e[MAXN<<1];\nint cnt=0,head[MAXN]={0};\ninline void add(int u,int v,int w)\n{\n    e[++cnt].to=v;\n    e[cnt].w=w;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\n\nint d[MAXN]={0},vis[MAXN]={0};\nvoid dij()\n{\n    memset(vis,0,sizeof(vis));\n    memset(d,127,sizeof(d));\n    priority_queue<pair<int,int> > Q;\n    d[1]=0,Q.push(make_pair(0,1));\n    while(!Q.empty())\n    {\n        int u=Q.top().second;\n        Q.pop();\n        if(vis[u]) continue;\n        vis[u]=1;\n        for(int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if(d[v]>d[u]+e[i].w)\n            {\n                d[v]=d[u]+e[i].w;\n                Q.push(make_pair(-d[v],v));\n            }\n        }\n    }\n\n}\n\nint main()\n{\n    int n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int u=read(),v=read(),w=read();\n        add(u,v,w);\n        add(v,u,w);\n    }\n    \n    dij();\n    \n    printf(\"%d\\n\",d[n]);\n    return 0;\t\n}\n```\n",
        "postTime": 1554968700,
        "uid": 88736,
        "name": "Sober_Clever",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011\u6d1b\u8c373020"
    },
    {
        "content": "dijkstra\u88f8\u9898\uff1f  \n\u76f4\u63a5\u8dd1\u6a21\u677f\u597d\u4e86\u3002  \n\u5efa\u8bae\u4f7f\u7528if(dnow > d[cur]) continue; \u6765\u4ee3\u66ffif(!vis[cur]),\u636e\u8bf4\u8fd9\u6837\u5b50\u66f4\u52a0\u5feb\u4e00\u4e9b  \n72ms\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#define pii pair<int, int>\n\nusing namespace std;\n\nconst int maxn = 50010;\n\npriority_queue<pii> q;\nint n;\n\n#define gc() getchar()\nchar buf[2000000];\ninline void read(int &x) {\n\tx = 0;\n\tchar ch = gc();\n\twhile( ch < '0' || ch > '9' ) ch = gc();\n\twhile(ch >= '0' && ch <= '9') x = (x<<3)+(x<<1)+(ch&15), ch = gc();\n}\n\nint head[maxn], ver[maxn<<1], wei[maxn<<1], nex[maxn<<1], tot = 0;\ninline void addedge(int u, int v, int w) {\n\tver[tot] = v; wei[tot] = w; nex[tot] = head[u]; head[u] = tot++;\n\tver[tot] = u; wei[tot] = w; nex[tot] = head[v]; head[v] = tot++;\n}\n\nint d[maxn];\n\nint main() {\n\tint m, u, v, w;\n\tmemset(head, -1, sizeof(head));\n\tmemset(d, 0x3f, sizeof(d));\n\tread(n); read(m);\n\twhile(m--) {\n\t\tread(u); read(v); read(w);\n\t\taddedge(u, v, w);\n\t}\n\td[1] = 0; q.push(make_pair(0, 1));\n\twhile(!q.empty()) {\n\t\tint cur = q.top().second, dmen = -q.top().first; q.pop();\n\t\tif(dmen > d[cur]) continue;\n\t\tfor(int i = head[cur]; i != -1; i = nex[i])\n\t\t\tif(d[ver[i]] > d[cur] + wei[i]) {\n\t\t\t\td[ver[i]] = d[cur] + wei[i];\n\t\t\t\tq.push(make_pair(-d[ver[i]], ver[i]));\n\t\t\t}\n\t}\n\tprintf(\"%d\\n\", d[n]);\n\treturn 0;\n}\n\n```\n\u6b22\u8fce\u4e92\u76f8\u5173\u6ce8(\u7136\u800c\u5728oi\u754c\u849f\u84bb\u7684\u5708\u5f88\u5c0f)\u3002  \n\u6700\u540e\u5b89\u5229\u4e00\u4e0b[\u849f\u84bb\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/oldherd/)  \n",
        "postTime": 1554969612,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3020 \u3010[USACO11MAR]\u5305\u5feb\u9012Package Delivery\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6ca1\u4eba\u505a\u4e00\u5b9a\u662f\u56e0\u4e3a\u6ca1\u6709\u6807\u7b7e  \n\u53ef\u60dc\u9898\u76ee\u5f88\u7b80\u5355\u5c31\u662f\u6700\u77ed\u8def\u6a21\u677f  \n1.dijkstra  //159ms  \n2.spfa //1163ms   \n~~\u9898\u89e3\u91cc\u6ca1\u4eba\u5199dij~~??  \n\u4e0a\u4ee3\u7801    \n       \n       1.dijstra\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define N 50010\n#define M 100010 \nusing namespace std;\nint n,m,d[N],tot,head[N];\nbool vis[N];\nstruct Edge{\n\tint v,next,val;\n}edge[M];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return x*f;\n}\ninline void add(int x,int y,int z){edge[++tot].v=y;edge[tot].next=head[x];edge[tot].val=z;head[x]=tot;}\nvoid dijkstra(int x){\n\tpriority_queue<pair<int,int> >q;\n\tmemset(d,0x3f,sizeof(d));\n\tq.push(make_pair(0,x));d[x]=0;\n\twhile(q.size()){\n\t\tint u=q.top().second;q.pop();\n\t\tif(vis[u])continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=edge[i].next){\n\t\t\tint v=edge[i].v,z=edge[i].val;\n\t\t\tif(d[v]>d[u]+z){\n\t\t\t\td[v]=d[u]+z;\n\t\t\t\tq.push(make_pair(-d[v],v));\n\t\t\t}\n\t\t}\n\t} \n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z); add(y,x,z);\n\t}\n\tdijkstra(1);  //159ms\n\tprintf(\"%d\\n\",d[n]); \n\treturn 0;\n}\n\n```   \n\n\t2.spfa\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#define N 50010\n#define M 100010 \nusing namespace std;\nint n,m,d[N],tot,head[N];\nbool vis[N];\nstruct Edge{\n\tint v,next,val;\n}edge[M];\ninline int read(){\n\tint x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();\n\t}while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();\n\t}return x*f;\n}\ninline void add(int x,int y,int z){edge[++tot].v=y;edge[tot].next=head[x];edge[tot].val=z;head[x]=tot;}\nvoid spfa(int x){\n\tqueue<int >q;\n\tmemset(d,0x3f,sizeof(d));\n\tq.push(x);d[x]=0;vis[x]=1;\n\twhile(q.size()){\n\t\tint u=q.front();q.pop();vis[u]=0;\n\t\tfor(int i=head[u];i;i=edge[i].next){\n\t\t\tint v=edge[i].v,z=edge[i].val;\n\t\t\tif(d[v]>d[u]+z){\n\t\t\t\td[v]=d[u]+z;\n\t\t\t\tif(!vis[v])q.push(v),vis[v]=1;\n\t\t\t}\n\t\t}\n\t} \n}\nint main()\n{\n\tn=read();m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z); add(y,x,z);\n\t}\n\tspfa(1);\n\tprintf(\"%d\\n\",d[n]);   //1163 ms\n\treturn 0;\n}\n\n```\n\n\n",
        "postTime": 1554521349,
        "uid": 88733,
        "name": "Zekrom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3020 \u3010[USACO11MAR]\u5305\u5feb\u9012Package Delivery\u3011"
    },
    {
        "content": "\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u5404\u79cd\u4e3b\u6d41\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6d4b\u8bc4\u4ee5\u53ca\u4f18\u52a3\u5206\u6790\uff0c\u6700\u77ed\u8def\u7b97\u6cd5\u662f\u56fe\u8bba\u4e2d\u6bd4\u8f83\u57fa\u7840\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5bf9\u539f\u7406\u5c55\u5f00\u5177\u4f53\u53d9\u8ff0\u4e86\u3002\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u7b80\u5355\u7684\u628a\u8fd9\u9053\u9898\u7684\u9898\u610f\u590d\u8ff0\u4e00\u904d\uff08\u82f1\u8bed\u4e0d\u597d\u7684 OIer \u770b\u8fc7\u6765\uff09\uff1a\n\n- \u9996\u5148\u8d77\u70b9\u662f $1$\uff0c\u7ed3\u675f\u70b9\u662f $N$\uff1b\n- \u6bcf\u6761\u8def\u4e0a\u90fd\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u5976\u725b\uff1b\n- \u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u6c42\u600e\u4e48\u8d70\u80fd\u591f\u4f7f\u7ecf\u8fc7\u7684\u8def\u4e0a\u7684\u5976\u725b\u6570\u91cf\u6700\u5c11\u3002\n\n\u7ed3\u8bba\uff1a\u8fd9\u9053\u9898\u6c42\u7684\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\u6700\u77ed\u8def\u3002\n\n\n\u5982\u679c\u8981\u8bba\u7b80\u5355\u6027\uff0c\u9996\u9009 Floyd \u7b97\u6cd5\uff1a\n\n```\nvoid floyd() {\n\tfor(int k = 1; k <= n; k++) {\n\t\tfor(int i = 1; i <= n; i++) {\n\t\t\tfor(int j = 1; j <= n; j++) {\n\t\t\t\tf[i][j] = min(f[i][j], f[i][k] + f[k][j]);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u4e14\u4e0d\u63d0\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3)$ \u80fd\u4e0d\u80fd\u8fc7\uff0c\u5149\u8fd9\u4e2a\u7a7a\u95f4\u5c31\u5df2\u7ecf\u8d85\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728\u672c\u4eba\u7684\u673a\u5668\u4e0a\u8fde\u7f16\u8bd1\u90fd\u7f16\u4e0d\u4e86\uff0c\u56e0\u4e3a\u8fc7\u4e8e\u5f00\u7684\u6570\u7ec4\u5e9e\u5927\u3002\n\n\u867d\u7136 Floyd \u8fc7\u4e0d\u4e86\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u9519\u8bef\u7684\u89e3\u6cd5\u4e2d\u53d1\u73b0\u4e24\u70b9\uff1a\n\n- \u5f00\u4e0d\u4e86\u90bb\u63a5\u77e9\u9635\uff0c\u7a7a\u95f4\u4f1a\u8d85\u8fc7\u9650\u5236\uff1b\n\n- \u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5f00\u90bb\u63a5\u8868\u3002\u90a3\u4e48\u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u9053\u9898\u7684\u6570\u636e\u8303\u56f4\uff1a$ n \\leq 50000$\uff0c$ m \\leq 50000$\u3002\n\n\u6700\u77ed\u8def\u4e2d\u7684\u5806\u4f18\u5316 Dijkstra \u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((M + N) logN)$\uff0c\u5728\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002\u5173\u952e\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n```\nstruct Pair {\n\tint first, second;\n\tPair(int f, int s) : first(f), second(s) {}\n};\n\nbool operator < (Pair a, Pair b) { return a.first > b.first; }\n\nvoid dijkstra() {\n\tpriority_queue<Pair> Q;\n\tmemset(d, 0x3f, sizeof(d));\n\tmemset(vis, false, sizeof(vis));\n\tQ.push(Pair(0, 1)), d[1] = 1;\n\twhile(!Q.empty()) {\n\t\tPair pair = Q.top(); Q.pop();\n\t\tint x = pair.second;\n\t\tif(!vis[x]) {\n\t\t\tvis[x] = true;\n\t\t\tfor(int i = head[x]; i; i = next[i]) {\n\t\t\t\tint to = ver[i], len = w[i];\n\t\t\t\tif(d[to] > d[x] + len) {\n\t\t\t\t\td[to] = d[x] + len;\n\t\t\t\t\tQ.push(Pair(d[to], to));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u961f\u5217\u4f18\u5316\u7684 Bellman-Ford \u7b97\u6cd5\uff08\u53e6\u79f0 SPFA\uff09\uff0c\u5173\u952e\u4ee3\u7801\uff1a\n\n```\nvoid spfa() {\n\tmemset(d, 0x3f, sizeof(d));\n\tmemset(vis, false, sizeof(vis));\n\td[1] = 0, vis[1] = true;\n\tqueue<int> Q;\n\tQ.push(1);\n\twhile(!Q.empty()) {\n\t\tint x = Q.front(); Q.pop();\n\t\tvis[x] = false;\n\t\tfor(int i = head[x]; i; i = next[i]) {\n\t\t\tint to = ver[i], len = w[i];\n\t\t\tif(d[to] > d[x] + len) {\n\t\t\t\td[to] = d[x] + len;\n\t\t\t\tif(!vis[to]) Q.push(to), vis[to] = true;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSPFA \u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(kM)$\uff0c\u5176\u4e2d $k$ \u662f\u4e00\u4e2a\u5e38\u6570\u3002\n\n\u8fd9\u5bf9\u4e8e\u666e\u901a\u7684\u9898\u76ee\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u5feb\u4e86\u3002\u4f46\u662f\u6709\u4e9b\u9898\u76ee\u4f1a\u6545\u610f\u7528\u7c7b\u4f3c**\u7f51\u683c\u56fe**\u7684\u7279\u6b8a\u6570\u636e\u7b49\u6765**\u5361 SPFA**\uff0c\u6709\u65f6\u5019\u65f6\u95f4\u590d\u6742\u5ea6\u751a\u81f3\u4e0d\u5982\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff1a\n\n| \u7b97\u6cd5|\u65f6\u95f4\u590d\u6742\u5ea6|  \u4f18\u70b9| \u7f3a\u70b9|\n| :----------: | :----------: |:----------: |:----------: |:----------: |\n| Floyd | $O(N^3)$ |\u4ee3\u7801\u91cf\u5c0f |\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8|\n| Dijkstra |$O(N^2)$ | \u4ee3\u7801\u91cf\u8f83\u5c0f |\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u65e0\u6cd5\u5904\u7406\u8d1f\u8fb9 | TLE|\n|Bellman Ford|$O(NM)$|\u6cdb\u7528\u6027\u597d\uff0c\u80fd\u5904\u7406\u8d1f\u8fb9|\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8|\n|\u4f18\u5316 Dijkstra|$O((N+M)logN)$|\u901f\u5ea6\u8f83\u5feb|\u65e0\u6cd5\u5904\u7406\u8d1f\u8fb9|$172ms$|\n|SPFA|\u5e73\u5747\u60c5\u51b5$O(kM)$ \u6700\u574f $O(NM)$|\u901f\u5ea6\u8f83\u5feb\uff0c\u80fd\u5904\u7406\u8d1f\u8fb9|\u4ee3\u7801\u91cf\u7565\u5927\uff0c\u53ef\u80fd\u4f1a\u88ab\u5361\u6389|\n\nSPFA \u7b97\u6cd5\u8868\u73b0\u786e\u5b9e\u4e0d\u9519\uff0c\u4f46\u662f\u5982\u679c\u771f\u7684\u91c7\u7528\u4e86 SPFA \uff0c\u90a3\u5c31\u5f97\u627f\u62c5\u76f8\u5e94\u7684\u88ab\u5361\u6389\u7684\u98ce\u9669\u3002\n\n\u6240\u4ee5\u672c\u4eba\u8ba4\u4e3a\uff0c\u5728\u6bd4\u8d5b\u4e2d\u5c3d\u91cf\u4f7f\u7528\u4f18\u5316\u7684 Dijkstra \u7684\u7b97\u6cd5\uff0c\u9664\u975e\u51fa\u73b0\u8d1f\u8fb9\u5426\u5219\u4e0d\u4f7f\u7528 SPFA\u3002\n\n\u4e0b\u9762\u662f\u5b8c\u6574\u7684 AC \u4ee3\u7801\uff1a\n\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint tot;\nconst int maxn = 200000 + 5;\nint head[maxn];\nint next[maxn];\nint w[maxn];\nint ver[maxn];\n\nvoid add(int x, int y, int v) {\n\ttot++, w[tot] = v, ver[tot] = y, next[tot] = head[x], head[x] = tot; \n}\n\nint d[maxn];\nbool vis[maxn];\n\n\nvoid spfa() {\n\tmemset(d, 0x3f, sizeof(d));\n\tmemset(vis, false, sizeof(vis));\n\td[1] = 0, vis[1] = true;\n\tqueue<int> Q;\n\tQ.push(1);\n\twhile(!Q.empty()) {\n\t\tint x = Q.front(); Q.pop();\n\t\tvis[x] = false;\n\t\tfor(int i = head[x]; i; i = next[i]) {\n\t\t\tint to = ver[i], len = w[i];\n\t\t\tif(d[to] > d[x] + len) {\n\t\t\t\td[to] = d[x] + len;\n\t\t\t\tif(!vis[to]) Q.push(to), vis[to] = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n\tint n, m;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint a, b, c;\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tadd(a, b, c);\n\t\tadd(b, a, c);\n\t}\n\tspfa();\n\tprintf(\"%d\", d[n]);\n\treturn 0;\n}\n```\n\uff08\u6c34\u5e73\u6709\u9650\uff0c\u5982\u6709\u9519\u6f0f\uff0c\u6073\u8bf7\u539f\u8c05\u3002\uff09\n\nRemember to leave a like!\n\n\u6c42\u901a\u8fc7~",
        "postTime": 1631692609,
        "uid": 188950,
        "name": "UruhaRushia",
        "ccfLevel": 6,
        "title": "P3020 \u9898\u89e3"
    },
    {
        "content": "### \u7b2c\u4e00\u6b21\u5199\u9898\u89e3\u796d\n# \u6b64\u9898\u4e3a\u4e00\u9053\u5178\u578b\u7684\u6700\u77ed\u8def\u6a21\u7248\u9898\n\n\u7531\u4e8e\u6570\u636e\u8303\u56f4<=50000\uff0c\u6545\u8003\u8651\u91c7\u7528**SPFA\u7b97\u6cd5**\u3002\n\n\u5173\u4e8eSPFA\u7b97\u6cd5\u4e0d\u518d\u8d58\u8ff0\uff0c\u8fd9\u91cc\u503c\u5f97\u63d0\u4e00\u70b9\u7684\u662f\u5bf9\u4e8e\u6570\u7ec4\u90bb\u63a5\u8868\u7684**\u7a7a\u95f4\u4f18\u5316**\u3002\n\n\u5018\u82e5\u91c7\u7528\u6734\u7d20\u7684\u90bb\u63a5\u8868\u5b58\u50a8\u90bb\u8fb9\uff0c\u5219\u7a7a\u95f4\u590d\u6742\u5ea6 50000*50000\uff0c\u5fc5\u70b8\u65e0\u7591\u3002\n\n\u6211\u4eec\u8003\u8651\u5c06\u4e8c\u7ef4\u538b\u6210\u4e00\u7ef4\u3002\n\n\n\n\u8bbec[i] \u8868\u793a \u7ed3\u70b9i\u4f4d\u4e8e\u7b2c\u51e0\u6761\u90bb\u8fb9\n\n  suc[i] \u8868\u793a \u7b2ci\u6761\u90bb\u8fb9\u7684\u540e\u7ee7\u7ed3\u70b9\uff08\u5982\u679cx\uff0cy\u4e24\u70b9\u95f4\u5b58\u5728\u4ecex\u5230y\u7684\u6709\u5411\u8fb9\uff0c\u5219suc[i]=y\uff09\n  \n  last[i] \u8868\u793a \u5f53\u524d\u90bb\u8fb9\u7684\u4e0a\u4e00\u6761\u90bb\u8fb9\u7f16\u53f7\n  \n  len[i] \u8868\u793a \u7b2ci\u6761\u90bb\u8fb9\u957f\u5ea6\n  \n  \n  \u8fd9\u6837\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u8c03\u7528\u6bcf\u4e00\u6761\u90bb\u8fb9\u3002\n  \n  \u5177\u4f53\u89c1\u4ee3\u7801\uff1a\n  ```pascal\nvar n,m,i,t,w,cnt,x,y,z:longint;\n    suc,last,c,len,f,sq:array[1..5000000] of longint;  //\u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u592a\u5c0f\u4f1aTLE\uff08\u83ab\u540d\u5176\u5999\uff1f\uff1f\uff09\uff0c\u592a\u5927\u4f1a\u7206\u5185\u5b58\n  procedure addedge(x,y,z:longint);  //\u8fde\u8fb9\uff0c\u4ece\u7ed3\u70b9x\u5230\u7ed3\u70b9y\u7684\u957f\u5ea6\u4e3az\u7684\u6709\u5411\u8fb9\n  begin\n    inc(cnt); suc[cnt]:=y; last[cnt]:=c[x]; c[x]:=cnt; len[cnt]:=z;\n  end;\nbegin\n  readln(n,m);\n  for i:=1 to m do\n  begin\n    readln(x,y,z); addedge(x,y,z); addedge(y,x,z);  //\u7531\u4e8e\u4e3a\u53cc\u5411\u8fb9\uff0c\u6545\u8fde\u8fb9\u4e24\u6b21\n  end;\n  t:=1; w:=1;\n  fillchar(f,sizeof(f),63);  //\u6700\u77ed\u8def\u6570\u7ec4\u521d\u59cb\u5316\n  f[1]:=0; sq[1]:=1;  //1\u53f7\u7ed3\u70b9\u5165\u961f\u5217\uff0c\u6700\u77ed\u8def\u521d\u59cb\u4e3a0\n  while t<=w do\n  begin\n    i:=c[sq[t]];  //\u53d6\u51fa\u5f53\u524d\u5934\u7ed3\u70b9\u6240\u5728\u7684\u90bb\u8fb9\u7f16\u53f7\n    while i>0 do  //\u5f53\u8be5\u6761\u90bb\u8fb9\u5b58\u5728\u65f6\n    begin\n      if f[sq[t]]+len[i]<f[suc[i]] then  //\u5982\u679c\u5bf9\u4e8e\u7ed3\u70b9suc[i]\u5b58\u5728\u4e00\u6761\u66f4\u77ed\u7684\u8def\u5f84\uff0c\u5219\u677e\u5f1b\u6b64\u7ed3\u70b9\n      begin\n        inc(w); sq[w]:=suc[i]; f[suc[i]]:=f[sq[t]]+len[i];  //\u8be5\u7ed3\u70b9\u5165\u961f\u5c3e\uff0c\u540c\u65f6\u7b54\u6848\u66f4\u65b0\n      end;\n      i:=last[i];  //\u53d6\u8be5\u8fb9\u7684\u4e0a\u4e00\u6761\u8fb9\n    end;\n    inc(t);\n  end;\n  writeln(f[n]);  //f[n]\u5b58\u653e\u4ece\u7ed3\u70b91\u81f3\u7ed3\u70b9n\u7684\u6700\u77ed\u8def\uff0c\u5373\u4e3a\u6240\u6c42\nend.\n```",
        "postTime": 1541078655,
        "uid": 82593,
        "name": "Chavapa",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3020 \u3010[USACO11MAR]\u5305\u5feb\u9012Package Delivery\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u7bc7\u5f88\u88f8\u7684\u6700\u77ed\u8def\u95ee\u9898\uff1b\n\n\u601d\u8def\uff1aSPFA\uff0c\u76f4\u63a5\u8dd1\u51fa\u7ec8\u70b9\u7684\u503c\u5373\u53ef;\n\n**\u4e0a\u4ee3\u7801**\n```\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint u,v,w;\nstruct node\n{\n\tint to,next,w;\n}edge[100010];\nint k;\nint head[100100];\nint dist[100100];\nvoid adde(int u,int v,int w)\n{\n\tedge[++k].to=v;\n\tedge[k].next=head[u];\n\tedge[k].w=w;\n\thead[u]=k;\n}\nbool book[101000];\nqueue<int> q;\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);//\u5efa\u56fe \n\t\tadde(u,v,w);\n\t\tadde(v,u,w);//\u8981\u5efa\u53cc\u8fb9 \n\t}\n\tfor(int i=1;i<=n;i++)\n\tdist[i]=0x7f7f7f7f;//\u521d\u59cb\u5316\u4e3a\u65e0\u9650\u5927 \n\tq.push(1);//\u8d77\u70b9\u5165\u961f \n\tbook[1]=true;\n\tdist[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tint mb=q.front();//\u53d6\u51fa\u961f\u5217\u91cc\u7684\u70b9 \n\t\tq.pop();//\u8bb0\u5f97pop \n\t\tfor(int i=head[mb];i;i=edge[i].next)//\u4fbf\u5229 \n\t\t{\n\t\t\tint rp=edge[i].to;\n\t\t\tif(dist[rp]>dist[mb]+edge[i].w)//\u677e\u5f1b \n\t\t\t{\n\t\t\t\tdist[rp]=dist[mb]+edge[i].w;\n\t\t\t\tif(book[rp]==false)\n\t\t\t\tq.push(rp);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\",dist[n]);\n\treturn 0;\n}\n```",
        "postTime": 1531741251,
        "uid": 61644,
        "name": "\u5922\u00b7\u58f9\u751f\u6240\u611b",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3020 \u3010[USACO11MAR]\u5305\u5feb\u9012Package Delivery\u3011"
    },
    {
        "content": "### PS.\n\u6211\u9707\u60ca\u4e86  \n~~\uff08\u6b64\u5904\u5f00\u5934\u5438\u5f15\u8bfb\u8005\u6ce8\u610f\u529b\uff0c\u5f15\u51fa\u540e\u6587\u6211\u7684\u9707\u60ca~~  \n\u8fd9\u9898\u5b9e\u5728\u592a\u795e\u5947\u4e86\uff0c\u6240\u4ee5\u8fc7\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u3002  \n\u6765\u5206\u4eab\u4e00\u4e0b\u81ea\u5df1\u8fd9\u79bb\u8c31\u7684\u7ecf\u5386\u3002  \n\n### Problem.\n\u9996\u5148\u770b\u5230\u8fd9\u9053\u9898\u3002  \n\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u5355\u6e90\u6700\u77ed\u8def\u5417\u3002\u3002\u3002  \n\n### Solution.\n\u8be6\u60c5\u53ef\u4ee5\u770b[P4779](https://www.luogu.com.cn/problem/P4779)  \n\u9996\u5148\uff0c\u6b64\u9898\u4e00\u770b\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\uff0c\u5c31\u611f\u89c9\u6709\u70b9\u5371\u9669\u3002  \n\u4e8e\u662f\u6253\u4e86\u4e00\u4e2aDijkstra\u3002  \n\u7136\u540e\u4e00\u4ea4\uff1a\u6211\u5c31\u50cf\u96f7\u5cf0\u5854\u5012\u6389\u4e00\u6837\u88ab\u96f7\u5012\u4e86  \n~~\uff08\u6b64\u5904\u7528\u4e86\u6bd4\u55bb\uff0c\u4f7f\u6587\u7ae0\u8da3\u5473\u6027\u66f4\u5f3a\uff0c\u66f4\u751f\u52a8\u5f62\u8c61\u5730\u5199\u51fa\u4e86\u6211\u7684\u9707\u60ca~~  \n![](https://cdn.luogu.com.cn/upload/image_hosting/ec3re3u6.png?x-oss-process=image/resize,m_lfit,h_170,w_225)  \n\u6211\u7684\u5929\u5450\uff0c\u7adf\u7136TLE\u4e86\uff01  \n\u4e8e\u662f\uff0c\u6211\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u8c03\u554a\u2026\u2026  \n~~\uff08\u6b64\u5904\u7528\u4e86\u53cd\u590d\u7684\u4fee\u8f9e\u624b\u6cd5\uff0c\u751f\u52a8\u5f62\u8c61\u5730\u5199\u51fa\u6211\u8c03\u4ee3\u7801\u7684\u8270\u8f9b~~  \n\u6700\u540e\u7adf\u7136\u53d1\u73b0\uff0c\u6211\u72af\u4e86\u4e2a\u5982\u6b64sb\u7684\u9519\u8bef\u3002  \n\u6211\u628a\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u5355\u6e90\u6700\u77ed\u8def\u6c42\u6210\u4e86\u5355\u6e90\u6700\u957f\u8def\u3002  \n\u7136\u540e\u6539\u6389\u4e4b\u540e\uff0c\u53d1\u73b0\u7adf\u7136\n![](https://cdn.luogu.com.cn/upload/image_hosting/vcuhuv6x.png)\nAC\u4e86\u3002\u3002\u3002  \n\n\u6211\u7684\u5929\u5450\uff0c\u628a\u6700\u77ed\u8def\u6c42\u6210\u6700\u957f\u8def\u8fd8\u80fdAC&TLE\u800c\u4e0dWA\uff1f\uff1f\uff1f  \n~~\uff08\u6b64\u5904\u7701\u7565\u6211\u7684\u62b1\u602810000\u5b57~~  \n\n### Coding.\n\u987a\u4fbf\u63d0\u4f9b\u4e00\u4e2a\u4e0d\u540c\u7801\u98ce\u7684\u9898\u89e3QAQ\u3002  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{int to,w,nxt;}e[50005<<1];\n//\u8fb9\nstruct node{int x,w;bool operator<(node b) const {return w>b.w;}};\n//Heap\u7684\u7ed3\u6784\u4f53\nint tot=0,n,m,head[50005],dis[50005];priority_queue<node>q;\n//\u4e00\u5927\u5806\u5b9a\u4e49\uff0c\u6211\u4e60\u60efpriority_queue\u5b9a\u4e49\u6210\u5168\u5c40\u7684\ninline void adde(int x,int y,int w) {e[++tot]=(edge){y,w,head[x]},head[x]=tot;}\n//\u52a0\u8fb9\ninline void dij(int s,int t)\n{\n\tmemset(dis,0x3f,sizeof(dis)),q.push((node){s,0}),dis[s]=0;\n//\u4e00\u5927\u5806\u521d\u59cb\u5316\uff0c\u6b63\u5e38\u6765\u8bf4\u8fd9\u91cc\u5e94\u8be5\u8981\u52a0\u521d\u59cb\u5316priority_queue\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().x,w=q.top().w;q.pop();if(dis[x]<w) continue;\n//\u53d6\u51fa\u5806\u9876\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t\tif(dis[e[i].to]>dis[x]+e[i].w)\n\t\t\t\tdis[e[i].to]=dis[x]+e[i].w,q.push((node){e[i].to,dis[e[i].to]});\n//\u5411\u5916\u6269\u5c55\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y,w;i<=m;i++) scanf(\"%d%d%d\",&x,&y,&w),adde(x,y,w),adde(y,x,w);\n//\u8bfb\u5165\n\treturn dij(1,n),printf(\"%d\\n\",dis[n]),0;\n//\u8f93\u51fa\u7b54\u6848\u5e76\u8fd4\u56de\n}\n```",
        "postTime": 1593439366,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P3020 [USACO11MAR]Package Delivery S\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76eeSPFA\u5e76\u4e0d\u4f1a\u88ab\u5361\u6b7b\uff0c\u4f46\u662f\u7528dijkstra+\u5806\u4f18\u5316\u5f88\u5927\u6982\u66f4\u5feb\u3002\u5176\u4ed6\u7684\u5c31\u662f\u6a21\u677f\u4e86\uff0c\u8fd9\u91cc\u4e0d\u5728\u9610\u8ff0\u3002\u4e0d\u4f1a\u7684\u53ef\u4ee5\u53c2\u8003\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09\u7684\u9898\u89e3\u3002\u5e76\u4e14\u6211\u7684\u535a\u5ba2\u91cc\u9762\u4e5f\u6709\u76f8\u5e94\u7684\u6587\u7ae0\uff0c\u4f8b\u5982\u9999\u751c\u7684\u9ec4\u6cb9\u90a3\u9053\u9898\u76ee\u3002\n\n\n\u7136\u540e\u5b9e\u5728\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u8bb2\u7684\u4e1c\u897f\u3002\n\n```\n# include <bits/stdc++.h>\n# define rr register\nconst int N=50010;\nbool c[N]; //\u6807\u8bb0\u6700\u77ed\u8def\u662f\u5426\u786e\u5b9a\nint dis[N]; //\u8bb0\u5f551\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\nstruct Edge\n{\n    int to,next,v;\n}edge[N<<1]; //\u90bb\u63a5\u8868\nint sum; //\u90bb\u63a5\u8868\u9644\u5c5e\u90e8\u5206\nint head[N]; //\u540c\u4e0a\nint n,m; //\u70b9\u6570\u548c\u8fb9\u6570\nstruct node\n{\n    int id,w;\n};//\u5806\u4f18\nbool operator < (node a,node b)\n{\n    return a.w>b.w; \n} //\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002\u56e0\u4e3a\u4f18\u5148\u961f\u5217\u9ed8\u8ba4\u91cd\u5927\u5230\u5c0f\uff0c\u6240\u4ee5\u8981\u53cd\u8fc7\u6765\nstd::priority_queue <node> k; //\u5b9a\u4e49\u4f18\u5148\u961f\u5217\uff08\u5806\u7684STL\u7248\u672c\uff09\ninline void add(int x,int y,int z)\n{\n    edge[++sum].to=y;\n    edge[sum].next=head[x];\n    edge[sum].v=z;\n    head[x]=sum;\n    return;\n} //\u5efa\u8fb9\ninline int read(void)//\u5feb\u8bfb\n{\n    int res,f=1;\n    char c;\n    while((c=getchar())<'0'||c>'9')\n        if(c=='-')f=-1;\n    res=c-48;\n    while((c=getchar())>='0'&&c<='9')\n        res=res*10+c-48;\n    return res*f;\t\t\n}\ninline void dijkstra(void); //\u5b9a\u4e49\u6700\u77ed\u8def\u51fd\u6570\nint main()\n{\n    n=read();\n    m=read();\n    for(rr int i=1,x,y,z;i<=m;++i)\n    {\n        x=read(),y=read(),z=read();\n        add(x,y,z);\n        add(y,x,z);\n    }\n    memset(dis,0x3f3f3f3f,sizeof(dis));\n    dis[1]=0; //\u8bb0\u5f97\u8fd9\u91cc\u8981\u628a\u8d77\u70b9\u7684\u6700\u77ed\u8def\u8bbe\u62100\n    dijkstra();//\u8dd1\u6700\u77ed\u8def\u677f\u5b50\n    printf(\"%d\",dis[n]);\n    return 0;\n}\ninline void dijkstra(void) //\u6a21\u677f \u5b9e\u5728\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\u3002\n{\n    k.push((node){1,0});\n    while(!k.empty())\n    {\n        node tmp=k.top();\n        k.pop();\n        int i=tmp.id;\n        c[i]=true;\n        for(rr int j=head[i];j;j=edge[j].next)\n            if(!c[edge[j].to]&&dis[i]+edge[j].v<dis[edge[j].to])\n            {\n                dis[edge[j].to]=dis[i]+edge[j].v;\n                k.push((node){edge[j].to,dis[edge[j].to]});\n            }\n    }\n    return;\n}\n```",
        "postTime": 1552540404,
        "uid": 108949,
        "name": "Meatherm",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3020 \u3010[USACO11MAR]\u5305\u5feb\u9012Package Delivery\u3011"
    }
]