[
    {
        "content": "update1:\u611f\u8c22 @[linfourxu](https://www.luogu.com.cn/user/50477) \u6307\u51fa\u6587\u7ae0\u9519\u8bef\uff0c\u5df2\u7ecf\u66f4\u6b63\u3002\n\nupdate2:\u4e0a\u6b21\u4fee\u6539\u4e0d\u5b8c\u5168\uff0c\u4ecd\u6709\u6b8b\u4f59\u9519\u8bef\u3002\n\n\u7ed9\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6c42\u7528\u82e5\u5e72\u4e2a\u73af\uff08\u6216\u70b9\uff09\u5c06\u6574\u5f20\u56fe\u8986\u76d6\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u6c42\u6700\u5c0f\u8986\u76d6\uff0c\u60f3\u5230\u5e26\u6743\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u8d39\u7528\u6d41\u4e00\u6ce2\u5e26\u8d70\u3002\n\n\u6211\u4eec\u53d1\u73b0 $n\\leq 500$ \u5176\u5b9e\u5f88\u5c0f\uff0c\u8db3\u591f\u6211\u4eec\u8dd1\u4e00\u904d Floyd \u6c42\u51fa\u8986\u76d6\u4e24\u4e2a\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u7136\u540e\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9 $(u,u')$ \uff0c\u5efa\u7acb\u8d85\u7ea7\u6e90\u8d85\u7ea7\u6c47 $s,t$ \u8fdb\u884c\u5982\u4e0b\u5efa\u6a21\uff1a\n\n- \u4ece $s$ \u5411 $u$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff1b\n\n- \u4ece $u'$ \u5411 $t$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff1b\n\n- \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 $u$\uff0c\u4ece $u$ \u5411 $u'$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $\\inf$ \uff0c\u8d39\u7528\u4e3a $a_u$ \u7684\u8fb9\uff1b\n\n- \u5bf9\u4e8e\u70b9\u5bf9 $(u,v)$\uff0c\u5982\u679c\u4ece $u$ \u53ef\u4ee5\u5230\u8fbe $v$\uff0c\u5c31\u4ece $u$ \u5411 $v'$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $dis_{i\\rightarrow j}$ \u7684\u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u5f20\u56fe\u4e00\u5b9a\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u8dd1\u4e00\u904d\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u62ff\u5230 70pts\u3002\n\n\u4e3a\u4ec0\u4e48\u4f1a\u8d85\u65f6\u5462\uff1f\u56e0\u4e3a\u8dd1\u4e00\u904d Floyd \u4f1a\u4f7f $m$ \u8fbe\u5230 $O(n^2)$\uff0c\u663e\u7136\u65e0\u6cd5\u627f\u53d7\u3002\n\n\u6211\u4eec\u8003\u8651\u51cf\u5c11\u8fb9\u7684\u6570\u91cf\uff0c\u7531\u4e8e\u6700\u77ed\u8def\u662f\u7531\u82e5\u5e72\u6761\u8def\u5f84\u62fc\u6210\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u5728\u7f51\u7edc\u6d41\u5efa\u6a21\u4e2d\u8fde\u63a5\u6570\u636e\u7ed9\u51fa\u7684\u8fb9\uff0c\u540c\u65f6\u4ece $u'$ \u5411 $u$ \u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $\\inf$\uff0c\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff08\u8fd9\u5e94\u8be5\u662f\u6807\u51c6\u5957\u8def\u4e86\uff09\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u987a\u7740\u8fd9\u4e9b\u8fb9\u8d70\u51fa\u4e00\u6761\u6700\u77ed\u8def\u5f84\uff0c\u800c\u4e14\u8fb9\u7684\u6570\u91cf\u51cf\u5c11\u5230 $O(m+n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<ext/pb_ds/priority_queue.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define int unsigned long long\nstruct edge\n{\n\tint nxt,to,weight,value;\n}e[1000001<<1];\nint n,m,tot=1,h[10005],dep[10005],cur[10005],s,t,a[5001],cost,ans,hg[10005];\nbool vis[10005];\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\ninline void add(int x,int y,int w,int val)\n{\n\te[++tot].nxt=h[x];\n\th[x]=tot;\n\te[tot].to=y;\n\te[tot].weight=w;\n\te[tot].value=val;\n}\ninline bool Dijkstra()\n{\n\tfor(register int i=0;i<=t;++i)\n\t{\n\t\tvis[i]=0;\n\t\tdep[i]=0x3f3f3f3f;\n\t\tcur[i]=h[i];\n\t}\n\t__gnu_pbds::priority_queue<pair<int,int>,greater<pair<int,int> >,pairing_heap_tag> q;\n\tq.push(make_pair(0,t));\n\tdep[t]=0;\n\twhile(!q.empty())\n\t{\n\t\tpair<int,int> k=q.top();\n\t\tq.pop();\n\t\tif(vis[k.second])\n\t\t\tcontinue;\n\t\tvis[k.second]=1;\n\t\tfor(register int i=h[k.second];i;i=e[i].nxt)\n\t\t\tif(e[i^1].weight&&dep[e[i].to]>dep[k.second]-e[i].value+hg[k.second]-hg[e[i].to])\n\t\t\t{\n\t\t\t\tdep[e[i].to]=dep[k.second]-e[i].value+hg[k.second]-hg[e[i].to];\n\t\t\t\tq.push(make_pair(dep[e[i].to],e[i].to));\n\t\t\t}\n\t}\n\treturn dep[0]!=dep[s];\n}\nint dfs(int k,int f)\n{\n\tint r=0;\n\tif(!f||k==t)\n\t{\n\t\tvis[t]=1;\n\t\tans+=f;\n\t\treturn f;\n\t}\n\tint used=0;\n\tvis[k]=1;\n\tfor(register int i=cur[k];i;i=e[i].nxt)\n\t{\n\t\tcur[k]=i;\n\t\tif((!vis[e[i].to]||e[i].to==t)&&dep[e[i].to]==dep[k]-e[i].value+hg[k]-hg[e[i].to]&&e[i].weight)\n\t\t\tif((r=dfs(e[i].to,min(f-used,e[i].weight))))\n\t\t\t{\n\t\t\t\tcost+=e[i].value*r;\n\t\t\t\te[i].weight-=r;\n\t\t\t\te[i^1].weight+=r;\n\t\t\t\tused+=r;\n\t\t\t\tif(f==used)\n\t\t\t\t{\n\t\t\t\t\t//vis[k]=0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn used;\n}\ninline int dinic()\n{\n\twhile(Dijkstra())\n\t{\n\t\tvis[t]=1;\n\t\twhile(vis[t])\n\t\t{\n\t\t\tmemset(vis,0,sizeof(vis));\n\t\t\tdfs(s,1<<20);\n\t\t}\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(register int i=0;i<=t;++i)\n\t\t\thg[i]+=dep[i];\n\t}\n\treturn cost;\n}\nsigned main()\n{\n\tn=read(),m=read();\n\ts=n<<1|1;\n\tt=s+1;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\ta[i]=read();\n\t\tadd(s,i,1,0);\n\t\tadd(i,s,0,0);\n\t\tadd(i+n,t,1,0);\n\t\tadd(t,i+n,0,0);\n\t\tadd(i,i+n,1<<20,a[i]);\n\t\tadd(i+n,i,0,-a[i]);\n\t\tadd(i+n,i,1<<20,0);\n\t\tadd(i,i+n,0,0);\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint x=read(),y=read(),w=read();\n\t\tadd(x,y+n,1<<20,w);\n\t\tadd(y+n,x,0,-w);\n\t}\n\tprintf(\"%lld\\n\",dinic());\n\treturn 0;\n}\n\n```",
        "postTime": 1581332499,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6061 \u3010[\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5\u3011"
    },
    {
        "content": "\u4e0b\u9762\u662f\u5b98\u65b9\u9898\u89e3\u3002\n\n\u9898\u610f\u7b80\u8ff0\uff1a\u7528\u73af\u6765\u8986\u76d6\u4e00\u5f20\u56fe\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n## \u7b2c\u4e00\u6863\u90e8\u5206\u5206\n\n$30 \\%$ \u66b4\u529b\u7684\u53bb\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u8986\u76d6\u65b9\u6848\u3002\n\n\u6240\u6709 $w_i=0$ :\u7528\u70b9\u8986\u76d6\u9700\u8981\u652f\u4ed8\u70b9\u6743\u7684\u4ee3\u4ef7\uff0c\u800c\u73af\u8986\u76d6\u6ca1\u6709\u4ee3\u4ef7\u3002\u7528\u7c7b\u4f3c\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5c3d\u53ef\u80fd\u591a\u7684\u7528\u73af\u53bb\u8986\u76d6\u8282\u70b9\u5373\u53ef\u3002\n\n## \u7b2c\u4e8c\u6863\u90e8\u5206\u5206\n\n$n=m$ ,\u6240\u6709\u70b9\u51fa\u5ea6\u4e3a $1$ :\u6574\u5f20\u56fe\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u73af\uff0c\u90a3\u4e48\u53ea\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\u5168\u90e8\u4f7f\u7528\u70b9\u8986\u76d6/\u7528\u4e00\u4e2a\u5927\u73af\u8986\u76d6\u3002\u5224\u65ad\u4e0b\u5373\u53ef\u3002\n\n## \u6b63\u89e3\n\n\u6211\u4eec\u53d1\u73b0 $n$ \u5176\u5b9e\u975e\u5e38\u5c0f\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u5141\u8bb8\u6211\u4eec\u5148\u8fdb\u884c\u4e00\u6b21floyed\u9884\u5904\u7406\uff0c\u76f4\u63a5\u6c42\u51fa\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\n\n\u7136\u540e\u6211\u4eec\u56de\u5230\u95ee\u9898\u672c\u8eab\uff0c\u6211\u4eec\u5e0c\u671b\u6c42\u5f97\u7684\u65b9\u6848\u662f\u628a\u56fe\u4e2d\u6240\u6709\u8282\u70b9\u5168\u90e8\u8986\u76d6\uff0c\u5e76\u4e14\u4ee3\u4ef7\u6700\u5c0f\uff0c\u8fd9\u8ddf\u4e8c\u5206\u56fe\u7684\u5b8c\u7f8e\u5339\u914d\u5f88\u63a5\u8fd1\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5efa\u9020\u8fd9\u6837\u4e00\u4e2a\u8f85\u52a9\u56fe\uff0c\u4e24\u8fb9\u90fd\u6709 $n$ \u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u70b9\u5bf9 $u,v$ \uff0c\u5728\u5de6\u8fb9\u7684 $u$ \u5411\u53f3\u8fb9\u7684 $v$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $dis[u][v]$\n\u7684\u8fb9\u3002\u4e4b\u540e\u518d\u628a\u6bcf\u4e00\u4e2a\u5de6\u8fb9\u7684 $u$ \u5411\u53f3\u8fb9\u7684 $u$ \u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a $a[u]$ \u7684 \u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u5f20\u56fe\u4e00\u5b9a\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u8fdb\u4e00\u6b65\u7684\uff0c\u6211\u4eec\u6c42\u51fa\u6700\u5c0f\u4ee3\u4ef7\u7684\u5b8c\u7f8e\u5339\u914d\u5c31\u662f\u7b54\u6848\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u6807\u51c6\u5957\u8def\uff0c\u91c7\u7528KM\u7b97\u6cd5\u6216\u8005\u8d39\u7528\u6d41\u90fd\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u662f\u8d39\u7528\u6d41\u5728\u672c\u9898\u5b9e\u9645\u8868\u73b0\u4e0d\u5982KM\u3002",
        "postTime": 1581774148,
        "uid": 2978,
        "name": "zcysky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6061 \u3010[\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5\u3011"
    },
    {
        "content": "\u6211\u6765\u8bb2\u4e00\u4e0b\u8fd9\u4e2a\u9898\u7684\u601d\u8def\u5427\u3002\n\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u7528\u70b9\u6216\u8005\u73af\uff08\u73af\u7684\u70b9\u548c\u8fb9\u53ef\u4ee5\u91cd\u590d\u8d70\uff09\u5c06\u4e00\u5f20\u6709\u5411\u56fe\u8986\u76d6\uff0c\u5e76\u4e14\u5176\u6743\u503c\u6700\u5c0f\u3002\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4N<=500 \u53c8\u662f\u4e00\u4e2a\u8986\u76d6\u95ee\u9898\uff0c\u81ea\u7136\u80fd\u60f3\u5230\u8d39\u7528\u6d41\u6765\u89e3\u51b3\u3002\n\n\u505a\u8fc7\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u540c\u5b66\uff0c\u5e94\u8be5\u77e5\u9053\u6709\u4e2a\u62c6\u70b9\u7684\u5c0f\u6280\u5de7\u3002\n\n\u9996\u5148\uff0c\u50cf\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u4e00\u6837\uff0c\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u628a\u6bcf\u4e2a\u70b9\u90fd\u8986\u76d6\uff0c\u56e0\u6b64\u672c\u9898\u4e00\u5b9a\u6709\u89e3\uff0c\u5e76\u4e14\u7b54\u6848\u4e0d\u4f1a\u5927\u4e8e\u6240\u6709\u7684\u70b9\u6743\u548c\u3002\u800c\u4e14\u88ab\u5355\u72ec\u9009\u4e2d\u7684\u70b9\uff0c\u4e0d\u80fd\u518d\u6b21\u88ab\u9009\u4e2d\u6216\u8005\u88ab\u9009\u5165\u67d0\u4e2a\u73af\u4e2d\uff08\u9898\u5e72\u8981\u6c42\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u628ai\u53f7\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9i\u548c\u70b9i+n\uff0c\u5e76\u4e14\u7531i\u5411i+n\u5efa\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3ai\u70b9\u70b9\u6743\u7684\u8fb9\u3002\u540c\u65f6\uff0c\u6211\u4eec\u5efa\u7acbs\u548ct\uff0c\u7531s\u54111\uff0c2\uff0c3\u2026\u2026n \u53f7\u70b9\u5efa\u7acb\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u7531n+1,n+2, \u2026\u20262n\u5411t\u53f7\u70b9\u5efa\u7acb\u4e00\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff08\u6d41\u91cf\u4e3a1\u662f\u56e0\u4e3a\u4e00\u4e2a\u70b9\u53ea\u80fd\u88ab1\u4f4d\u68c0\u67e5\u4eba\u5458\u68c0\u67e5\uff09\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u6765\u5904\u7406\u73af\u7684\u60c5\u51b5\u3002\u4e3b\u8981\u7684\u96be\u70b9\u5728\u4e8e\uff0c\u6211\u4eec\u4e0d\u5141\u8bb8\u7528**\u4e0d\u662f\u73af\u7684\u8def\u5f84\u6765\u8986\u76d6\u56fe**\u3002\u8fd9\u662f\u4e2a\u6709\u5411\u56fe\uff0c\u5176\u5b9e\u5c31\u662f\u8981\u6c42\u4e0d\u80fd\u6709\u8de8\u8d8a\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u8def\u5f84\u51fa\u73b0\u3002\n\n\u4f46\u662f\u60f3\u5728\u7f51\u7edc\u6d41\u56fe\u4e2d\u7981\u6b62\u8fd9\u79cd\u8def\u5f84\u51fa\u73b0\u662f\u505a\u4e0d\u5230\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u6784\u9020\u8ba9\u8fd9\u79cd\u8def\u5f84\u4e00\u5b9a\u8fbe\u4e0d\u5230\u6700\u5927\u6d41\u4ece\u800c\u88ab\u820d\u5f03\u3002\u5bf9\u4e8e\u5177\u4f53\u5982\u4f55\u201c\u820d\u5f03\u201d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u624b\u6bb5\u6765\u89e3\u51b3\u3002\n\n\u7b2c\u4e00\u79cd\uff1a\u5f88\u660e\u663e\uff0c\u6211\u4eec\u5e0c\u671b\u8d70\u7684\u8def\u7a0b\u8d8a\u77ed\u8d8a\u597d\uff0c\u90a3\u5c31\u7528\u6700\u77ed\u8def\u957f\u5ea6\u6765\u5efa\u8fb9\u597d\u4e86\u3002\u591a\u6e90\u6700\u77ed\u8def\u5f84\u5f53\u7136\u7528Floyd\u6765\u6c42\u3002\u4e4b\u540e\u82e5\u70b9i\u80fd\u5230\u8fbe\u70b9j\uff0c\u5219\u4ecei\u53f7\u70b9\u5411j+n\u53f7\u70b9\u5efa\u7acb\u4e00\u6761\u8d39\u7528\u4e3adis[i][j]\uff0c\u6d41\u91cf\u4e3a1\u7684\u8fb9\u3002\u4e4b\u540e\u8dd1\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5c31\u597d\u4e86\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5c31\u53ef\u4ee5\u201c\u820d\u5f03\u201d\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\uff1f\u6211\u4eec\u5047\u8bbei\u53f7\u70b9\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e3a\u70b9\u96c6G\uff0c\u82e5i\u53f7\u70b9\u5339\u914d\u4e86G\u4ee5\u5916\u7684\u4e00\u4e2a\u70b9x+n\uff0c\u5219\u5355\u72ec\u4f9d\u9760G\u5185\u7684\u70b9\u65e0\u6cd5\u628ai+n\u53f7\u70b9\u8fd9\u4e2a\u7a7a\u4f4d\u8865\u4e0a\uff0c\u5fc5\u987b\u8981\u6709G\u5916\u7684\u70b9\u5339\u914d\u5230\u70b9i+n\u3002\u82e5G\u5916\u7684\u70b9k\u80fd\u5230\u8fbei+n\u53f7\u70b9\uff08\u70b9k\u5f53\u7136\u4e0d\u80fd\u662f\u70b9x\uff0c\u8981\u4e0d\u7136\u70b9x\u5c31\u5728G\u4e2d\u4e86\uff09\uff0c\u5219G\u4e2d\u6240\u6709\u7684\u70b9\u90fd\u4e0d\u80fd\u5230\u8fbek\u53f7\u70b9\uff0c\u65e0\u6cd5\u4e0ek+n\u53f7\u70b9\u5339\u914d\uff0c\u5426\u5219K\u70b9\u4e5f\u5728G\u4e2d\u3002\u6240\u4ee5\u5982\u679c\u70b9k\u5339\u914d\u4e86i+n\u53f7\u70b9\uff0c\u5219\u9020\u6210k+n\u53f7\u70b9\u7684\u7a7a\u7f3a\uff0c\u800cG\u4e2d\u6240\u6709\u70b9\u90fd\u4e0d\u53ef\u80fd\u5339\u914dk+n\u53f7\u70b9\uff0c\u6240\u4ee5\u53ea\u80fd\u7528G\u5916\u7684\u70b9\u5339\u914dk+n\u53f7\u70b9\u3002\u8fd8\u8bb0\u5f97\u5f00\u59cb\u88ab\u5339\u914d\u7684x+n\u53f7\u70b9\u5417\uff1f\u5b83\u5bfc\u81f4\u70b9x\u88ab\u7a7a\u51fa\uff0c\u540c\u7406\u70b9x\u4e0d\u80fd\u5339\u914dG\u4e2d\u70b9\uff0c\u5426\u5219\u70b9x\u4e5f\u5728G\u4e2d\u3002\u6240\u4ee5\u5982\u679c\u4e0d\u7528\u70b9x\uff08\u8fd9\u7c7b\u70b9\uff09\u53bb\u5339\u914d\u70b9k+n\uff08\u8fd9\u7c7b\u70b9\uff09\uff0c\u5219\u7f51\u7edc\u6d41\u56fe\u4e2dG\u4ee5\u5916\u7684\u90e8\u5206\u65e0\u6cd5\u8fbe\u5230\u6ee1\u6d41\uff0c\u800c\u7528\u70b9x\uff08\u8fd9\u7c7b\u70b9\uff09\u53bb\u5339\u914dk+n\uff08\u8fd9\u7c7b\u70b9\uff09\u53c8\u8bf4\u660e\u70b9x\u80fd\u5230\u8fbe\u70b9k\uff0c\u90a3\u70b9k\u548c\u70b9x\u4e0d\u5c31\u90fd\u5728G\u4e2d\u4e86\u5417\uff1f\u5f53\u7136\u4e0d\u6210\u7acb\uff01\u6240\u4ee5\u8fd9\u6837\u53ef\u4ee5\u81ea\u52a8\u820d\u5f03\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\u3002\n\n~~\u8fd9\u53ea\u662f\u53e3\u80e1\u7684\u8bf4\u660e\uff0c\u4ec5\u4f9b\u53c2\u8003~~\n\n\u5f88\u9057\u61be\uff0c\u8fd9\u79cd\u7b97\u6cd5\u4f1aTLE\uff0c\u53ea\u80fd\u5f97\u523070\u5206\u3002\n\n\u539f\u56e0\u7531\u4e24\u4e2a\uff1a\n1. Floyd 500^3=1.25\u4ebf \u6d1b\u8c37IDE\u5b9e\u6d4b750ms\u5de6\u53f3\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u5269\u4e0b\u4e86\u6700\u591a300ms\u7ed9\u5176\u4ed6\u90e8\u5206\u3002\n\n2. \u5982\u679c\u6574\u5f20\u56fe\u90fd\u5f3a\u8fde\u901a\uff0c\u7f51\u7edc\u6d41\u56fe\u4e2d\u7684\u8fb9\u6570m\u4f1a\u8fbe\u5230n^2\u7684\u91cf\u7ea7\uff0c\u8d39\u7528\u6d41\u5f53\u573a\u7206\u70b8\u3002\n\n\u4e0b\u9762\u6765\u8bb2\u7b2c\u4e8c\u79cd\uff1a\u4e0a\u9762\u4e00\u79cd\u6ca1\u6709\u5728\u56fe\u4e2d\u6784\u5efa\u73af\uff0c\u800c\u662f\u7528\u6700\u77ed\u8def\u5f84\u8fbe\u5230\u4e86\u76ee\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5728\u7f51\u7edc\u6d41\u56fe\u4e2d\u6784\u5efa\u73af\uff0c\u8ba9\u7f51\u7edc\u6d41\u7684\u8d2a\u5fc3\u53d1\u6325\u6700\u77ed\u8def\u7684\u4f5c\u7528\u3002\u5982\u679c\u539f\u56fe\u4e2d\u7531\u4e00\u6761\u7531\u70b9x\u5230\u70b9y\u7684\u8def\u7a0b\u4e3az\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u7531\u70b9x\u5411\u70b9y+n\u5efa\u7acb\u8d39\u7528\u4e3az\uff0c\u6d41\u91cf\u4e3ainf\u7684\u8fb9\uff08\u6ce8\u610f\u6d41\u91cf\u662fINF\uff0c\u56e0\u4e3a\u73af\u5185\u7684\u8def\u5f84\u53ef\u4ee5\u91cd\u590d\u8d70\u7684\uff0c\u201c\u540c\u4e00\u4eba\u201d\u7684\u9650\u5236\u5728S\u53d1\u51fa\u7684\u8fb9\u4e0a\u800c\u4e0d\u662f\u5728\u8fd9\u91cc\uff09\u3002\u63a5\u7740\uff0c\u4ece\u6bcf\u4e00\u4e2a\u70b9i+n\u5411\u70b9i\u5efa\u7acb\u8d39\u7528\u4e3a1\uff0c\u6d41\u91cf\u4e3aINF\u7684\u8fb9\uff08\u9053\u7406\u540c\u4e0a\uff09\u3002\n\n\u8fd9\u6837\uff0c\u539f\u56fe\u4e2d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5c31\u5bf9\u5e94\u5230\u4e86\u65b0\u56fe\u4e2d\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u3002\u5b83\u80fd\u201c\u820d\u5f03\u201d\u4e0d\u5408\u6cd5\u8def\u5f84\u7684\u539f\u7406\u548c\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u5982\u679c\u70b9i\u5339\u914d\u5230\u4e86\u5b83\u5f3a\u8fde\u901a\u5206\u91cf\u5916\u7684\u70b9\uff0c\u90a3\u4e48\u4e00\u5b9a\u65e0\u6cd5\u8fbe\u5230\u6700\u5927\u6d41\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u8fb9\u6570\u53ea\u6709m+n\u6761\u8fd9\u4e2a\u91cf\u7ea7\uff0c\u800c\u4e14\u907f\u514d\u4e86\u6c42\u6700\u77ed\u8def\uff0c\u673a\u667a\u5730\u7528\u7f51\u7edc\u6d41\u7684\u8d2a\u5fc3\u4ee3\u66ff\u4e86\u6700\u77ed\u8def\uff0c\u901f\u5ea6\u5f53\u7136\u5feb\u3002\n\n\u8fd9\u4e2a\u9898\u5176\u5b9e\u6ca1\u6709\u5361SPFA\uff0cSPFA\u8dd1\u7684\u98de\u5feb\u3002\u6211\u7684SPFA\u52a0\u4e86LLL\u548cSLF\u4f18\u5316\uff0c\u4e0d\u8fc7\u6ca1\u5565\u5927\u7528\u8fd9\u4e2a\u9898\u53ea\u80fd\u5feb\u4e00\u70b9\u70b9\uff08\u4f46\u662f\u6a21\u677f\u9898\u53ef\u4ee5\u5feb\u5f88\u591a\uff09\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nlong long n,m,s,t,cnt,yes,head[100001],sum,costsum,map[501][501];\nstruct bian{\n\tlong long to;\n\tlong long flow;\n\tlong long cost;\n\tlong long next;\n}edge[8000001];\nvoid addedge(long long u,long long v,long long cost,long long flow)\n{\n\tedge[++cnt].to=v;\n\tedge[cnt].cost=cost;\n\tedge[cnt].flow=flow;\n\tedge[cnt].next=head[u];\n\thead[u]=cnt;\n}\nlong long inf=1e18,dis[100001];\nlong long inqueue[100001],cur[100001],vis[100001];\nbool SPFA()\n{\n    for(int i=0;i<=2*n+2;i++)\n    {\n        vis[i]=0;\n        cur[i]=head[i];\n        dis[i]=inf;\n    }\n    deque <int> q;\n    dis[s]=0;inqueue[s]=1;\n    q.push_back(s);long long len=1,sum1=0;\n    while(!q.empty())\n    {\n        int from=q.front();\n        q.pop_front();\n        if(dis[from]*len>sum1)\n        {\n        \tq.push_back(from);\n        \tcontinue;\n        }\n        sum1-=dis[from];len--;\n        for(int i=head[from];i!=0;i=edge[i].next)\n        {\n            int to=edge[i].to,cost=edge[i].cost;\n            if(dis[from]+cost<dis[to]&&edge[i].flow)\n            {\n                dis[to]=dis[from]+cost;\n                if(inqueue[to]==0)\n                {\n                    if(!q.empty()&&dis[to]<dis[q.front()])q.push_front(to);\n                    else q.push_back(to);\n                    inqueue[to]=1;\n                    len++;sum1+=dis[to];\n                }\n            }\n        }\n        inqueue[from]=0;\n    }\n    return dis[t]!=inf;\n} \nlong long dfs(long long now,long long low)\n{\n\tvis[now]=1;\n\tif(now==t)\n\t{\n\t\tyes=1;\n\t\tsum+=low;\n\t\tcostsum+=low*dis[t];\n\t\treturn low;\n\t}\n\tlong long used=0,rlow=0;\n\tfor(long long i=cur[now];i!=0;i=edge[i].next)\n\t{\n\t\tcur[now]=i;\n\t\tlong long to=edge[i].to,cost=edge[i].cost;\n\t\tif(dis[now]+cost==dis[to]&&edge[i].flow&&(!vis[to]||to==t))\n\t\t{\n\t\t\tif(rlow=dfs(to,min(low-used,edge[i].flow)))\n\t\t\t{\n\t\t\t\tused+=rlow;\n\t\t\t\tedge[i].flow-=rlow;\n\t\t\t\tif(i%2==1)edge[i+1].flow+=rlow;\n\t\t\t\telse edge[i-1].flow+=rlow;\n\t\t\t\tif(used==low)break;\n\t\t\t}\n\t\t}\n\t}\n\treturn used;\n}\nint main()\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\ts=2*n+1;t=2*n+2;\n\tfor(long long i=1;i<=n;i++)\n\t{\n\t\tlong long x;\n\t\tscanf(\"%lld\",&x);\n\t\taddedge(i,i+n,x,1);\n\t\taddedge(i+n,i,-x,0);\n\t\taddedge(i+n,i,0,inf);\n\t\taddedge(i,i+n,0,0);\n\t\taddedge(s,i,0,1);\n\t\taddedge(i,s,0,0);\n\t\taddedge(i+n,t,0,1);\n\t\taddedge(t,i+n,0,0);\n\t}\n\tfor(long long i=1;i<=m;i++)\n\t{\n\t\tlong long x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\taddedge(x,y+n,z,inf);\n\t\taddedge(y+n,x,-z,0);\n\t}\n\twhile(SPFA())\n\t{\n\t\tyes=1;\n\t\twhile(yes)\n\t\t{\n\t\t\tyes=0;\n\t\t\tdfs(s,inf);\n\t\t}\n\t}\n\tcout<<costsum<<endl;\n\treturn 0;\n}\n\n```\n\n\n",
        "postTime": 1581408342,
        "uid": 31294,
        "name": "\u529f\u5728\u4e0d\u820d",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6061 \u3010[\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5\u3011"
    },
    {
        "content": "~~\u4e3a\u5565\u8981\u8dd1$floyd$\u554a,\u4e3a\u5565\u8981\u5361\u5e38\u554a,\u5565\u662f\u70b9\u8986\u76d6\u554a,\u662f\u6211\u592a\u83dc\u4e86\u5417?~~\n\n\u6bcf\u4e2a\u70b9\u90fd\u8981\u7ecf\u8fc7,\u8981\u4e48\u51d1\u6210\u73af\u8981\u4e48\u5355\u70b9\u7b97\u8d39\u7528\n\n\u554a\u8fd9,\u8fd9\u4e0d\u662f\u4e0a\u4e0b\u754c\u65e0\u6e90\u6c47\u6700\u5c0f\u8d39\u7528\u6d41\u5417???\n\n~~\u4ec0\u4e48\u4f60\u4e0d\u4f1a\u4e0a\u4e0b\u754c\u65e0\u6e90\u6c47\u6700\u5c0f\u8d39\u7528\u6d41,\u4e0e\u6211\u4f55\u5e72~~\n\n\u6bcf\u4e2a\u70b9\u62c6\u6210$(i,i')$\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9$i \\rightarrow i' (1,inf)\\ cost=0$ \u8868\u793a\u5fc5\u987b\u7ecf\u8fc7$ \uff49$\u70b9\uff11\u6b21; $i'\\rightarrow i(0,1)cost=a_i$  \u8868\u793a\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u9009\u62e9\u5355\u70b9\u7b97\u8d39\u7528\n\n\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9$(u,v)$  $u'\\rightarrow v (0,inf)cost=d_{u,v}$ \n\n\u56e0\u4e3a\u662f\u65e0\u6e90\u6c47,\u6bcf\u4e2a\u70b9\u7684\u6d41\u91cf\u5b88\u6052,\u4e5f\u5c31\u662f\u8bf4,\u6bcf\u4e00\u4e2a\u6d41\u91cf\u90fd\u662f\u4ece\u70b9$x$\u6d41\u51fa,\u53c8\u6d41\u56de\u4e86$x$\n\n\u7136\u540e\u5efa\u56fe\u7684\u65f6\u5019\u76f4\u63a5\u6309\u7167\u4e0a\u4e0b\u754c\u5efa\u56fe\u5c31\u884c\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n#define maxn 500100\n#define inf 0x7fffffff\n#define ll long long\nusing namespace std;\nnamespace EK\n{\n    struct node { int v,nex,flow;ll cost; }p[maxn<<2];\n    int fir[maxn],tot=1;\n    inline void add(int fr,int to,int fl,int co)\n    {\n        p[++tot]=(node) { to,fir[fr],fl,co }; fir[fr]=tot;\n        p[++tot]=(node) { fr,fir[to],0,-co }; fir[to]=tot;\n    }\n    ll d[maxn];\n    int flow[maxn],pre[maxn],lat[maxn],book[maxn];\n    bool bfs(int fr,int to)\n    {\n        memset(d,127,sizeof d); \n        memset(flow,127,sizeof flow);\n        memset(book,0,sizeof book);\n        queue<int> que; que.push(fr);\n        d[fr]=0; book[fr]=1; lat[to]=-1;\n        while(!que.empty())\n        {\n            int u=que.front(); que.pop(); book[u]=0;\n            for(register int i=fir[u];i;i=p[i].nex)\n            {\n                int v=p[i].v; if(!p[i].flow) continue;\n                if(d[v]>d[u]+p[i].cost)\n                {\n                    d[v]=d[u]+p[i].cost;\n                    pre[v]=i;\n                    lat[v]=u;\n                    flow[v]=min(flow[u],p[i].flow);\n                    if(!book[v])\n                    {\n                        book[v]=1; que.push(v);\n                    }\n                }\n            }\n        }\n        return lat[to]!=-1;\n    }\n    inline ll MCMF(int fr,int to)\n    {\n        ll ans=0;\n        while(bfs(fr,to))\n        {\n            ans+=d[to]*flow[to];\n            int now=to;\n            while(now!=fr)\n            {\n                p[pre[now]].flow-=flow[to];\n                p[pre[now]^1].flow+=flow[to];\n                now=lat[now];\n            }\n        }\n        return ans;\n    }\n}\nint n,m;\nint s,t;\nint main()\n{\n    scanf(\"%d %d\",&n,&m); s=n*2+1,t=s+1;\n    for(register int i=1,x;i<=n;i++)\n    {\n        scanf(\"%d\",&x);\n        EK::add(i+n,i,1,x); EK::add(i,i+n,inf,0);\n        EK::add(s,i+n,1,0); EK::add(i,t,1,0);\n    }\n    for(register int i=1;i<=m;i++)\n    {\n        int x,y,d; scanf(\"%d %d %d\",&x,&y,&d);\n        EK::add(x+n,y,inf,d);\n    }\n    printf(\"%lld\",EK::MCMF(s,t));\n    return 0;\n}\n```\n",
        "postTime": 1592293783,
        "uid": 119495,
        "name": "junble19768",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6061 \u3010[\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5\u3011"
    },
    {
        "content": "## Part 1:\u601d\u8def\n\u7b80\u8ff0\u4e00\u4e0b\u8fd9\u9053\u9898\u7684\u505a\u6cd5\uff1a\n\n\u9996\u5148 Floyed \u9884\u5904\u7406\u51fa\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5230\u53e6\u5916\u5176\u4ed6\u8282\u70b9\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u5efa\u7acb\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u5de6\u90e8 $n$ \u4e2a\u8282\u70b9\u8868\u793a $n$ \u4e2a\u8857\u533a\uff0c\u4e0e\u53f3\u90e8 $n$ \u4e2a\u8282\u70b9\u7684 $n$ \u4e2a\u8857\u533a\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u6700\u5c0f\u8d39\u7528\uff08\u82e5\u4e0d\u53ef\u5230\u8fbe\u8bbe\u8fb9\u6743\u4e3a -INF\uff09\u3002\u540c\u65f6\uff0c\u5de6\u90e8\u8282\u70b9 $i$ \u4e0e\u53f3\u90e8\u8282\u70b9 $i$ \u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $a_i$ \uff0c\u56e0\u6b64\u8fd9\u5f20\u4e8c\u5206\u56fe\u4e00\u5b9a\u5b58\u5728\u5b8c\u5907\u5339\u914d\uff0c\u6ee1\u8db3 KM \u7b97\u6cd5\u7684\u4f7f\u7528\u6761\u4ef6\u3002\n\n\u7136\u540e\u76f4\u63a5\u8dd1 KM \u5c31\u884c\u4e86\uff0c\u4e0d\u5f97\u4e0d\u8bf4\u51fa\u9898\u4eba\u8bbe\u7f6e\u5f97\u633a\u5de7\u5999\u7684\u3002\n\n~~\u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u4e0d\u5f00 long long \u89c1\u7956\u5b97~~\n## Part 2\uff1aCode\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#define inf 0x7fffffff\n#define int long long\nusing namespace std;\nint n,m,a[505],w[505][505];\nint va[505],vb[505];//\u8bbf\u95ee\u6807\u8bb0\nint la[505],lb[505];//\u9876\u6807\nint match[505],upd[505];//\u5339\u914d\u70b9\u3001\u66f4\u65b0\nbool dfs(int x) {//\u5308\u7259\u5229\n\tva[x]=1;\n\tfor(int y=1; y<=n; y++)\n    if(w[x][y]!=-inf){\n        if(!vb[y])\n\t\t\tif(la[x]+lb[y]==w[x][y]) {\n\t\t\t\tvb[y]=1;\n\t\t\t\tif(!match[y]||dfs(match[y])) {\n\t\t\t\t\tmatch[y]=x;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else upd[y]=min(upd[y],la[x]+lb[y]-w[x][y]);\n    }\n\t\t\n\treturn false;\n}\nint KM() {//KM\u677f\u5b50\n\tmemset(match,0,sizeof(match));\n\tfor(int i=1; i<=n; i++) {\n\t\tla[i]=-inf;\n\t\tlb[i]=0;\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tla[i]=max(la[i],w[i][j]);\n\t}\n\tfor(int i=1; i<=n; i++)\n\t\twhile(true) {\n\t\t\tmemset(va,0,sizeof(va));\n\t\t\tmemset(vb,0,sizeof(vb));\n\t\t\tfor(int j=1; j<=n; j++)upd[j]=inf;\n\t\t\tif(dfs(i))break;\n\t\t\tint delta=inf;\n\t\t\tfor(int j=1; j<=n; j++)\n\t\t\t\tif(!vb[j])delta=min(delta,upd[j]);\n\t\t\tfor(int j=1; j<=n; j++) {\n\t\t\t\tif(va[j])la[j]-=delta;\n\t\t\t\tif(vb[j])lb[j]+=delta;\n\t\t\t}\n\t\t}\n\tint ans=0;\n\tfor(int i=1; i<=n; i++)\n\t\tans+=w[match[i]][i];\n\treturn ans;\n}\nsigned main()\n{\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++)\n    scanf(\"%lld\",&a[i]);\n    for(int i=1;i<=n;i++)//\u8d4b\u521d\u503c\n        for(int j=1;j<=n;j++)\n        w[i][j]=inf;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        scanf(\"%lld%lld%lld\",&x,&y,&z);\n        w[x][y]=z;\n    }\n    for(int k=1;k<=n;k++)//Floyed\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=n;j++)\n            if(w[i][k]!=inf&&w[k][j]!=inf)\n                if(w[i][j]>w[i][k]+w[k][j])\n                    w[i][j]=w[i][k]+w[k][j];\n    for(int i=1;i<=n;i++)\n    w[i][i]=a[i];\n    for(int i=1;i<=n;i++)//\u6c42\u4e8c\u5206\u56fe\u5e26\u6743\u6700\u5c0f\u5339\u914d\u53ea\u9700\u8981\u7ed9\u8fb9\u6743\u53d6\u53cd\n        for(int j=1;j<=n;j++)\n        w[i][j]*=-1;\n    printf(\"%lld\",-KM());\n    return 0;\n}\n```\n",
        "postTime": 1637485739,
        "uid": 482082,
        "name": "Mortis_Vampire",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6061 [\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6061)\n\n\u9898\u610f\uff1a\u6700\u5c0f\u73af\u8986\u76d6\u3002\n\n\u56e0\u4e3a\u4e00\u6761\u8fb9\u94fe\u63a5\u4e24\u4e2a\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\u3002\n\n\u7136\u540e\u53d1\u73b0\u5982\u679c\u4ece\u6e90\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\u5230\u5165\u70b9\uff0c\u518d\u4ece\u51fa\u70b9\u8fde\u6d41\u91cf\u4e3a1\u7684\u8fb9\u5230\u6c47\u70b9\uff0c\u6700\u5927\u6d41\u7684\u5f62\u6001\u4e00\u5b9a\u628a\u6574\u4e2a\u56fe\u5206\u6210\u4e86\u51e0\u4e2a\u73af\u5f62\u8054\u901a\u5757\uff0c\u6ee1\u8db3\u9898\u610f\u6784\u9020\u8981\u6c42\u3002\uff08\u8fd9\u79cd\u9006\u5411\u601d\u7ef4\u662f\u6709\u70b9\u4e0d\u5bf9\u52b2\uff0c\u4f46\u662f\u6211\u592a\u83dc\u4e86\uff0c\u6b63\u5411\u8bb2\u4e0d\u6e05\u695a\uff09\n\n\u73b0\u5728\u8981\u89e3\u51b3\u7684\u662f\u70b9\u4e0e\u70b9\u4e4b\u524d\u8d39\u7528\u7684\u95ee\u9898\uff0c\u4e00\u79cd\u7565\u663e\u66b4\u529b\u7684\u505a\u6cd5\u662f\u7528\u5f17\u6d1b\u4f0a\u5fb7\u8dd1\u51fa\u591a\u5143\u6700\u77ed\u8def\u3002\u7136\u540e\u76f4\u63a5\u8fde\u6700\u77ed\u8def\u8ddd\u79bb\u7684\u8d39\u7528\u3002\u6b63\u786e\u6027\u663e\u7136\u6ca1\u95ee\u9898\uff0c\u4f46\u662f$n^2$\u7ea7\u522b\u7684\u8fb9\u6570\u8d39\u7528\u6d41\u8dd1\u4e0d\u52a8\u3002(\u4f46\u662f\u53ef\u4ee5\u53d6\u5f9770pts\u7684\u9ad8\u5206\n\n\u73b0\u5728\u7684\u60c5\u51b5\u662f\u53ea\u8981\u628a\u8fb9\u6570\u538b\u4e0b\u6765\uff0c\u4ec0\u4e48\u90fd\u597d\u8bf4\u3002\n\n\u4e0d\u5982\u8ba9\u8d39\u7528\u6d41\u81ea\u884c\u8dd1\u51fa\u6700\u77ed\u8def\uff1f\n\n\u8fd9\u4e2a\u60f3\u6cd5\u4e0d\u9519\uff0c\u628a\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u65e0\u9650\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u8fd9\u6837\u627e\u5bfb\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u5c31\u4ea4\u7ed9\u8d39\u7528\u6d41\u81ea\u884c\u5b9e\u73b0\u3002\uff08\u540c\u65f6\u4e0d\u7834\u574f\u5165\u70b9\u51fa\u70b9\u6784\u6210\u73af\u5f62\u8054\u901a\u5757\u7684\u6027\u8d28\uff09\n\n\u8fd9\u6837\u4e00\u6765\u8fb9\u6570\u51cf\u5c11\u81f3$N$\u7ea7\u522b\uff0c\u53ef\u4ee5\u7528\u8d39\u7528\u6d41\u89e3\u51b3\u95ee\u9898\u3002\n\ncode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\ninline int getint(){\n\tint summ=0,f=1;char ch;\n\tfor(ch=getchar();!isdigit(ch)&&ch!='-';ch=getchar());\n\tif(ch=='-')f=-1,ch=getchar();\n\tfor(;isdigit(ch);ch=getchar()) summ=(summ<<3)+(summ<<1)+ch-48;\n\treturn summ*f;\n}\nconst int M=40000;\nint n,m,etot=1,nex[M],go[M],head[M],w[M],val[M],S,T;\nint a[M];\ninline void Addedge(int u,int v,int wi,int vi){\n\tnex[++etot]=head[u];head[u]=etot;w[etot]=wi;val[etot]=vi;go[etot]=v;\n\tswap(u,v);\n\tnex[++etot]=head[u];head[u]=etot;w[etot]=0;val[etot]=-vi;go[etot]=v;\n}\nint vis[M],las[M],fa[M],dis[M],flow[M];\ninline bool spfa(){\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(flow,0x7f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tqueue <int> q;q.push(S);dis[S]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();vis[u]=0;\n\t\tfor(int i=head[u];i;i=nex[i]){\n\t\t\tint v=go[i];\n\t\t\tif(w[i]&&dis[v]>dis[u]+val[i]){\n\t\t\t\tflow[v]=min(flow[u],w[i]);\n\t\t\t\tdis[v]=dis[u]+val[i];\n\t\t\t\tlas[v]=i;fa[v]=u;\n\t\t\t\tif(!vis[v]){\n\t\t\t\t\tq.push(v);vis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=dis[0];\n}\nsigned main(){\n\tcin>>n>>m;S=n+n+1,T=S+1;\n\tfor(int i=1;i<=n;i++){\n\t\tAddedge(S,i,1,0);Addedge(i+n,T,1,0);Addedge(i+n,i,1e9,0);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=getint();Addedge(i,i+n,1,a[i]);\n\t}\n\tfor(int i=1,u,v,val;i<=m;i++){\n\t\tu=getint();v=getint();val=getint();\n\t\tAddedge(u,v+n,1e9,val);\n\t}\n\tint mincost=0;\n\twhile(spfa()){\n\t\tmincost+=flow[T]*dis[T];\n\t\tint now=T;\n\t\twhile(now!=S){\n\t\t\tw[las[now]]-=flow[T];\n\t\t\tw[las[now]^1]+=flow[T];\n\t\t\tnow=fa[now];\n\t\t}\n\t}\n\tcout<<mincost<<endl;\n\treturn 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1600007249,
        "uid": 48324,
        "name": "detect",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 - [\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5"
    },
    {
        "content": "## ~~\u770b\u9898\u9762\u6765\u52bf\u6c79\u6c79\uff0c\u5176\u5b9e\u5c31\u662f\u4e2a\u6700\u5c0f\u73af\u8986\u76d6~~\n### \u8a00\u5f52\u6b63\u4f20\n\n\u8fd9\u4e2a\u9898\u9996\u5148\u8981\u6c42\u5168\u6e90\u6700\u77ed\u8def\uff08\u53ef\u4ee5\u7528\u4f2aJohnson--\u53cd\u6b63\u6ca1\u6709\u8d1f\u6743\u8fb9\uff09\uff0c\u7136\u540e\u91cd\u65b0\u628a\u6c42\u51fa\u6765\u7684\u4e8c\u7ef4\u6700\u77ed\u8ddd\u79bb\u6570\u7ec4\u5f53\u4f5c\u65b0\u56fe\u8dd1\u6700\u5c0f\u73af\u8986\u76d6\uff0c\u8fd9\u91cc\u53ef\u4ee5\u8dd1\u7f51\u7edc\u6d41\uff0c\u4f46\u662f\uff0c\u6211\u592a\u83dc\u4e86\uff0c\u53ea\u4f1a\u628a\u8fb9\u6743\u53d6\u53cd\u8dd1KM\u6700\u4f73\u5339\u914d\n\n\u8fd9\u4e2a\u9898\u7565\u5fae\u5361\u5e38\uff0c\u6ce8\u610f\u5e38\u6570\uff08\u8dd1\u4e8c\u5206\u56fe\u5339\u914d\u7684\u65f6\u5019\u4e0d\u8981\u53bb\u6bcf\u6b21\u90fdmemset\uff08vx,vy\uff09\uff0c\u8fd9\u6837\u592a\u6162\uff0c\u8d4b\u4e2a\u65f6\u95f4\u6233\u5c31\u597d\u4e86\uff0c\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u5427\uff09\n\n\u6700\u540e\u8981\u63d0\u9192\u4e00\u53e5\n\n# \u5341\u5e74\u7ade\u8d5b\u4e00\u573a\u7a7a\uff0c\u4e0d\u6253longlong\u89c1\u7956\u5b97\n```cpp\n#include<stdio.h>//\u5728\u67d0\u4e9b\u7f16\u8bd1\u5668\u4e0b\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u628ascanf\u52a0\u901f\u5230\u6bd4\u5feb\u8bfb\u8fd8\u5feb\n#include<bits/stdc++.h>\n#define max(a,b) (a)>(b)?(a):(b)\n#define min(a,b) (a)<(b)?(a):(b)\n#define int long long//\u61d2\nusing namespace std;\n\nconst int INF=1e9,N=505,M=5005;\nint n,m,u,v,w,k;\nint a[N],head[N],d[N][N],lx[N],ly[N],link[N],slack[N],vx[N],vy[N];\nbool visit[N];\nstruct edge{int v,w,next;}e[M];\n\ninline void add(int u,int v,int w)\n{\n\te[++k]=(edge){v,w,head[u]};\n\thead[u]=k;\n}\ninline void Dijkstra(int *d,int s)\n{\n\ttypedef pair<int,int> pii;\n\tpriority_queue<pii,vector<pii>,greater<pii> > q;\n\tmemset(visit,0,sizeof(visit));\n\tq.push(make_pair(d[s]=0,s));\n\tvisit[s]=true;\n\twhile(!q.empty())\n\t{\n\t\tregister int u=q.top().second;\n\t\tq.pop();\n\t\tfor(register int i=head[u];i;i=e[i].next)\n\t\t\tif(d[e[i].v]>d[u]+e[i].w)\n\t\t\t{\n\t\t\t\td[e[i].v]=d[u]+e[i].w;\n\t\t\t\tif(visit[e[i].v]) continue;\n\t\t\t\tvisit[e[i].v]=true;\n\t\t\t\tq.push(make_pair(d[e[i].v],e[i].v));\n\t\t\t}\n\t}\n}\n\ninline void Johnson()\n{\n\tfor(register int i=1;i<=n;++i)\n\t\tfor(register int j=1;j<=n;++j)\n\t\t\td[i][j]=INF;\n\tfor(register int i=1;i<=n;++i)\n\t\tDijkstra(d[i],i);\n\tfor(register int i=1;i<=n;++i)\n\t\td[i][i]=a[i]; \n\tfor(register int i=1;i<=n;++i)\n\t\tfor(register int j=1;j<=n;++j)\n\t\t\td[i][j]=-d[i][j];\n}\n\ninline bool Hungary(int u,int id)\n{\n\tvx[u]=id;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tif(vy[i]==id||d[u][i]==-INF) continue;\n\t\tregister int temp=lx[u]+ly[i]-d[u][i];\n\t\tif(!temp)\n\t\t{\n\t\t\tvy[i]=id;\n\t\t\tif(!link[i]||Hungary(link[i],id))\n\t\t\t{\n\t\t\t\tlink[i]=u;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse slack[i]=min(slack[i],temp);\n\t}\n\treturn false;\n}\n\ninline void update(int id)\n{\n\tregister int change=INF;\n\tfor(register int i=1;i<=n;++i)\n\t\tif(vy[i]!=id) change=min(change,slack[i]);\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tif(vx[i]==id) lx[i]-=change;\n\t\tif(vy[i]==id) ly[i]+=change;\n\t\telse slack[i]-=change;\n\t}\n}\n\ninline int KM()\n{\n\tmemset(lx,128,sizeof(lx));\n\tregister int ans=0,dfn=0;//dfn\u5c31\u662f\u65f6\u95f4\u6233\n\tfor(register int i=1;i<=n;++i)\n\t\tfor(register int j=1;j<=n;++j)\n\t\t\tlx[i]=max(lx[i],d[i][j]);\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tmemset(slack,0x3f,sizeof(slack));\n\t\twhile(true)\n\t\t\tif(Hungary(i,++dfn)) break;\n\t\t\telse update(dfn);\n\t}\n\tfor(register int i=1;i<=n;++i)\n\t\tif(link[i]) ans-=d[link[i]][i];\n\treturn ans;\n}\n\nsigned main(void)\n{\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(register int i=1;i<=n;++i)\n\t\tscanf(\"%lld\",a+i);\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t}\n\tJohnson();\n\tprintf(\"%lld\\n\",KM());\n\treturn 0;\n}\n```\n\u7801\u98ce\u4e11\u964b\u8bf7\u89c1\u8c05\uff0c\n\u4e0d\u5f00O2 1.40s\uff0c\u5e38\u6570\u8fd8\u884c\uff08\u4e3b\u8981\u662f\u5f00\u4e86\u4e5f\u6ca1\u53d8\u5316\uff0c\u6211\u592a\u83dc\u4e86\uff09",
        "postTime": 1585137800,
        "uid": 224358,
        "name": "\u6e05\u5e73\u4e50",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6061 \u3010[\u52a0\u6cb9\u6b66\u6c49]\u75ab\u60c5\u8c03\u67e5\u3011"
    }
]