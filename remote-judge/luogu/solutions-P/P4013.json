[
    {
        "content": "\u5f88\u660e\u663e\uff0c\u8fd9\u9898\u662f\u9053**\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41**\uff0c\u53ea\u4e0d\u8fc7\u5f3a\u884c\u52a0\u4e0a\u89c4\u5219\u6765\u5bfc\u81f4\u4f60\u7684\u7801\u91cf\u8f7b\u677e\u4e0a\u5929\u3002\n\n\u4e0b\u9762\u5c06\u4e09\u4e2a\u89c4\u5219\u4e00\u4e2a\u4e00\u4e2a\u89e3\u91ca\u5982\u4f55\u5efa\u56fe\n#### \u89c4\u5219\u4e00\n~~\u5176\u5b9e\u6211\u8ba4\u4e3a\u4e09\u4e2a\u89c4\u5219\u91cc\u7b2c\u4e00\u4e2a\u53cd\u800c\u662f\u76f8\u5bf9\u6700\u96be\u7684~~\n\n$m$\u6761\u8def\u5f84\u7686\u4e0d\u80fd\u76f8\u4ea4\uff0c\u5373\u70b9\u548c\u8fb9\u90fd\u4e0d\u80fd\u76f8\u4ea4\u3002\n\n\u9996\u5148\uff0c\u8981\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u70b9\u4e0d\u76f8\u4ea4(\u91cd\u5408)\uff0c\u5373\u6bcf\u4e2a\u70b9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u56e0\u6b64\u6211\u4eec\u60f3\u5230\u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9$X<i,j>$\u548c$Y<i,j>$\uff0c\u5e76\u5728$X<i,j>$\u548c$Y<i,j>$\u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a\u8be5\u70b9\u672c\u8eab\u7684\u6570\u503c\u7684\u8fb9\uff0c\u5f53\u9009\u4e2d\u8fd9\u6761\u8fb9\u5c31\u8868\u793a\u67d0\u6761\u8def\u5f84\u7ecf\u8fc7\u70b9$<i,j>$\uff0c\u5e76\u5c06\u8be5\u70b9\u6570\u503c\u8ba1\u5165\u3002\n\n\u63a5\u4e0b\u6765\u662f\u8fde\u8fb9\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c06\u70b9$Y<i,j>$\u5411$X<i+1,j>$\u548c$X<i+1,j+1>$\u8fde\u4e0a\u4e00\u6761\u8fb9\uff0c\u800c\u6839\u636e\u4e0b\u56fe\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5f53\u70b9\u4e0d\u76f8\u4ea4\u65f6\uff0c\u8fb9\u80af\u5b9a\u662f\u4e0d\u4f1a\u76f8\u4ea4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u6dfb\u52a0\u8fb9\u7684\u65f6\u5019\u5bb9\u91cf\u662f\u53ef\u4ee5\u968f\u4fbf\u5f00\u7684(\u5f53\u7136\u8981$\u22651$)\uff0c\u8d39\u7528\u5219\u8d4b\u4e3a$0$\u3002\n![](https://cdn.luogu.com.cn/upload/pic/16706.png)\n\n\u6700\u540e\u6309\u7167\u60ef\u4f8b\uff0c\u7ed9\u56fe\u52a0\u4e0a\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9$S$\u548c\u8d85\u7ea7\u6c47\u70b9$T$\uff0c$S$\u5411\u6bcf\u4e2a$X<1,i>$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\uff1b\u6bcf\u4e2a$<n,i>$\u5411$T$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u4e00\u6ce2\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n#### \u89c4\u5219\u4e8c\n\u8fd9\u4e0b\u53ea\u8981\u6c42\u8fb9\u4e0d\u76f8\u4ea4(\u91cd\u5408)\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u62c6\u70b9\u4e86\u3002\n\n\u76f4\u63a5\u8fde\u8fb9\uff0c\u7ed9\u6bcf\u4e2a\u70b9$<i,j>$\u5411$<i+1,j>$\u548c$<i+1,j+1>$\u8fde\u4e0a\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a$1$(\u56e0\u4e3a\u6bcf\u6761\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u800c\u6839\u636e\u4e0a\u56fe\uff0c\u8fb9\u53ea\u4f1a\u91cd\u5408)\uff0c\u8d39\u7528\u5219\u8d4b\u4e3a\u70b9$<i,j>$\u6240\u8868\u793a\u7684\u6570\u503c\uff0c\u5373\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u8868\u793a\u9009\u53d6\u4e86\u8fd9\u4e2a\u70b9\u7684\u6570(\u5176\u5b9e\u89c4\u5219\u4e00\u4e2d\u4e5f\u53ef\u4ee5\u8fd9\u6837\u8fde\u8fb9\uff0c\u7136\u540e\u5c06\u62c6\u70b9\u95f4\u7684\u8fb9\u7684\u5bb9\u91cf\u6539\u4e3a$0$\u5373\u53ef)\u3002\n\n\u6700\u540e\u4f9d\u65e7\u5b9a\u4e2a\u8d85\u7ea7\u6e90\u70b9$S$\u548c\u8d85\u7ea7\u6c47\u70b9$T$\uff0c$S$\u4f9d\u65e7\u5411\u6bcf\u4e2a$<1,i>$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\uff1b\u800c\u6bcf\u4e2a$<n,i>$\u5411$T$\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$inf$\u7684\u8fb9(\u56e0\u4e3a\u6bcf\u4e2a$<n,i>$\u90fd\u53ef\u4ee5\u53d6$inf$\u6b21)\uff0c\u8d39\u7528\u4e3a$<n,i>$\u6240\u8868\u793a\u7684\u6570\u503c\u3002\n\n\u7136\u540e\u4f9d\u65e7\u4e00\u6ce2\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u3002\n#### \u89c4\u5219\u4e09\n~~\u5176\u5b9e\u5c31\u662f\u6ca1\u6709\u89c4\u5219~~\n\n\u53ea\u9700\u5c06\u89c4\u5219\u4e8c\u6240\u8fde\u7684\u8fb9\uff0c\u9664\u4e86\u4e0e$S$\u8fde\u7684\u8fb9\uff0c\u5176\u4ed6\u8fb9\u7684\u5bb9\u91cf\u5168\u90e8\u6539\u4e3a$inf$\u5c31\u597d\uff0c\u56e0\u4e3a\u6240\u6709\u70b9\u548c\u8fb9\u90fd\u53ef\u4ee5\u91cd\u590d\u8d70\u4e86\u3002\n\n\u7136\u540e\u4e00\u6ce2\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5e26\u8d70$AC$~\n\n$PS:$\u5173\u4e8e\u89c4\u5219\u4e09\u6211\u8ba4\u4e3a\u5b8c\u5168\u53ef\u4ee5\u7528$DP$\u8dd1\u8fc7\u53bb\uff0c\u5c06\u8fd9\u4e2a\u68af\u5f62\u62c6\u6210$m$\u4e2a\u4e09\u89d2\u5f62\uff0c\u7136\u540e\u76f4\u63a5$DP$\uff0c\u590d\u6742\u5ea6\u5927\u6982\u4e3a$O(\\frac{1}{2}n^2m)$\uff0c\u662f\u53ef\u4ee5\u8dd1\u8fc7\u53bb\u7684\u3002\n\n\u6700\u540e\u4e0a~~\u5197\u957f\u7684~~\u4ee3\u7801\n\n```cpp\n#include<cstdio>//\u6211\u7528\u7684\u662f\u5e26SPFA\u7684EK\n#include<cstring>\nusing namespace std;\nconst int N=1e5+10;\nint fi[N],di[N<<1],da[N<<1],ne[N<<1],co[N<<1],q[N],la[N],nm[N],dis[N],a[22][50],b[22][50],l,st=1e5+1,ed=1e5+2,s;\n//fi,di,da,ne,co\u5b58\u8fb9\uff0cq\u4e3a\u961f\u5217\uff0cla,nm\u8bb0\u5f55\u5728SPFA\u4e2d\u641c\u5230\u7684\u5206\u5c42\u56fe\uff0cdis\u8bb0\u5f55\u8d39\u7528\uff0ca\u4e3a\u539f\u56fe\uff0cb\u4e3a\u539f\u56fe\u4e2d\u6bcf\u4e2a\u6570\u5bf9\u5e94\u7684\u7f16\u53f7\uff0cst\u662f\u6e90\u70b9\uff0ced\u662f\u6c47\u70b9\nbool v[N];//\u5728SPFA\u4e2d\u8bb0\u5f55\u8be5\u70b9\u6709\u65e0\u5728\u961f\u5217\u4e2d\nint re()//\u5feb\u8bfb\n{\n\tint x=0;\n\tchar c=getchar();\n\tbool p=0;\n\tfor(;c<'0'||c>'9';c=getchar())\n\t\tp=(c=='-'||p)?1:0;\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=x*10+(c-'0');\n\treturn p?-x:x;\n}\nvoid add(int x,int y,int z,int c)//\u52a0\u8fb9\n{\n\tdi[++l]=y;\n\tda[l]=z;\n\tco[l]=c;\n\tne[l]=fi[x];\n\tfi[x]=l;\n\tdi[++l]=x;\n\tda[l]=0;\n\tco[l]=-c;\n\tne[l]=fi[y];\n\tfi[y]=l;\n}\ninline int minn(int x,int y)//\u624b\u5199min\n{\n\treturn x<y?x:y;\n}\nvoid cl()//\u6bcf\u6b21\u8dd1\u5b8c\u540e\u91cd\u5efa\u56fe\u524d\u7684\u6e05\u7a7a\n{\n\tl=s=0;\n\tmemset(fi,0,sizeof(fi));\n\tmemset(di,0,sizeof(di));\n\tmemset(da,0,sizeof(da));\n\tmemset(ne,0,sizeof(ne));\n\tmemset(co,0,sizeof(co));\n}\nbool spfa()//SPFA\n{\n\tint head=0,tail=1,x,y,i;\n\tmemset(dis,-50,sizeof(dis));//\u521d\u59cb\u5316\u4e3a-inf\n\tmemset(v,0,sizeof(v));\n\tq[1]=st;\n\tdis[st]=0;\n\twhile(head!=tail)\n\t{\n\t\thead++;\n\t\tx=q[head];\n\t\tv[x]=0;\n\t\tfor(i=fi[x];i;i=ne[i])//\u679a\u4e3e\u8fb9\n\t\t{\n\t\t\ty=di[i];\n\t\t\tif(da[i]>0&&dis[y]<dis[x]+co[i])//\u627e\u5230\u6700\u5927\u8d39\u7528\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+co[i];\n\t\t\t\tla[y]=x;//\u8bb0\u5f55\u5206\u5c42\u56fe\n\t\t\t\tnm[y]=i;\n\t\t\t\tif(!v[y])//\u82e5\u4e0d\u5728\u961f\u5217\u5219\u52a0\u5165\u961f\u5217\n\t\t\t\t{\n\t\t\t\t\ttail++;\n\t\t\t\t\tq[tail]=y;\n\t\t\t\t\tv[y]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[ed]>0;//\u5224\u65aded\u6709\u65e0\u8d70\u5230\n}\nvoid ek()//EK\n{\n\tint i,mi;\n\twhile(spfa())\n\t{\n\t\tmi=1e9;\n\t\tfor(i=ed;i!=st;i=la[i])//\u4ece\u5206\u5c42\u56fe\u7684ed\u679a\u4e3e\u5230st\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6d41\u91cf\n\t\t\tmi=minn(mi,da[nm[i]]);\n\t\ts+=mi*dis[ed];//\u7d2f\u8ba1\u6bcf\u6b21\u7684\u8d39\u7528\n\t\tfor(i=ed;i!=st;i=la[i])//\u4fee\u6539\u5bb9\u91cf\n\t\t{\n\t\t\tda[nm[i]]-=mi;\n\t\t\tda[((nm[i]+1)^1)-1]+=mi;\n\t\t}\n\t}\n}\nint main()\n{\n\tint i,j,n,m,k,o,nu=0;\n\tk=m=re();\n\tn=re();\n\to=(((m*n)<<1)+n*n-n)>>1;//\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f+\u68af\u5f62\u9762\u79ef\u516c\u5f0f\uff0c\u7b97\u51fa\u4e00\u5171\u6709\u591a\u5c11\u6570\uff0c\u62c6\u70b9\u65f6\u533a\u5206\u7f16\u53f7\u7528\n\tfor(i=1;i<=n;i++,k++)\n\t\tfor(j=1;j<=k;j++)\n\t\t{\n\t\t\ta[i][j]=re();\n\t\t\tb[i][j]=++nu;//\u8f93\u5165\u7684\u540c\u65f6\u7ed9\u70b9\u8d4b\u4e0a\u7f16\u53f7\n\t\t}\n\tk=m;\n\tfor(i=1;i<=k;i++)\n\t\tadd(st,b[1][i],1,0);//\u8fde\u4e0a\u6e90\u70b9\n\tfor(i=1;i<n;i++,k++)\n\t\tfor(j=1;j<=k;j++)\n\t\t{\n\t\t\tadd(b[i][j],b[i][j]+o,1,a[i][j]);//\u7ed9\u62c6\u70b9\u95f4\u8fde\u8fb9\n\t\t\tadd(b[i][j]+o,b[i+1][j],1,0);//\u5411\u5de6\u4e0b\u548c\u53f3\u4e0b\u8fde\u8fb9\n\t\t\tadd(b[i][j]+o,b[i+1][j+1],1,0);\n\t\t}\n\tfor(i=1;i<=k;i++)\n\t{\n\t\tadd(b[n][i],b[n][i]+o,1,a[n][i]);//\u62c6\u70b9\u95f4\u8fde\u8fb9\n\t\tadd(b[n][i]+o,ed,1,0);//\u5411\u6c47\u70b9\u8fde\u8fb9\n\t}\n\tek();//\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\n\tprintf(\"%d\\n\",s);\n\tcl();//\u6e05\u7a7a\u91cd\u5efa\n\tk=m;\n\tfor(i=1;i<=k;i++)\n\t\tadd(st,b[1][i],1,0);//\u8fde\u6e90\u70b9\n\tfor(i=1;i<n;i++,k++)\n\t\tfor(j=1;j<=k;j++)\n\t\t{\n\t\t\tadd(b[i][j],b[i+1][j],1,a[i][j]);//\u4e0d\u9700\u8981\u62c6\u70b9\u4e86\uff0c\u76f4\u63a5\u5411\u5de6\u4e0b\u53f3\u4e0b\u8fde\u8fb9\n\t\t\tadd(b[i][j],b[i+1][j+1],1,a[i][j]);\n\t\t}\n\tfor(i=1;i<=k;i++)\n\t\tadd(b[n][i],ed,1e9,a[n][i]);//\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\n\tek();//\u518d\u6765\u8dd1\u4e00\u904d\n\tprintf(\"%d\\n\",s);\n\tcl();//\u540c\u6837\u6e05\u7a7a\n\tk=m;\n\tfor(i=1;i<=k;i++)\n\t\tadd(st,b[1][i],1,0);//\u8fde\u6c47\u70b9\n\tfor(i=1;i<n;i++,k++)\n\t\tfor(j=1;j<=k;j++)\n\t\t{\n\t\t\tadd(b[i][j],b[i+1][j],1e9,a[i][j]);//\u5411\u5de6\u4e0b\u53f3\u4e0b\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\n\t\t\tadd(b[i][j],b[i+1][j+1],1e9,a[i][j]);\n\t\t}\n\tfor(i=1;i<=k;i++)\n\t\tadd(b[n][i],ed,1e9,a[n][i]);//\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3ainf\n\tek();//\u6700\u540e\u4e00\u6ce2\u5e26\u8d70~\n\tprintf(\"%d\\n\",s);\n\treturn 0;\n}\n```",
        "postTime": 1522757716,
        "uid": 60181,
        "name": "Iowa_BattleShip",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "$$QEUES\\ I$$\n\n\u7ed9\u7684\u662f\u70b9\u7684\u5bb9\u91cf,\u8981\u62c6\u70b9\u3002\u6211\u4eec\u8bb0\u5f55\u4e00\u4e2a $id[i,j,1/2]$ \u4ee3\u8868\u5728 $[i,j]$ \u65b9\u4f4d\u4e0a\u7684\u5165\u70b9\u548c\u51fa\u70b9\u7684\u7f16\u53f7\u3002\u6e90\u70b9\u5411\u6bcf\u4e00\u4e2a\u7b2c\u4e00\u5c42\u7684\u5165\u70b9\u8fde\u4e00\u4e2a\u6d41\u91cf\u4e3a $1$ \u8d39\u7528\u4e3a $0$ \u7684\u8fb9\u3002\u6bcf\u4e00\u5c42\u7684\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u4e2a\u6d41\u91cf\u4e3a $1$ \u8d39\u7528\u4e3a $matrix[i,j]$ (\u4ee3\u8868\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6570\u503c) \u7684\u8fb9\u3002\u6bcf\u4e00\u5c42\u7684\u51fa\u70b9\u5f80\u4e0b\u4e00\u5c42\u7684\u5165\u70b9\u8fde\u6d41\u91cf\u4e3a $1$ \u8d39\u7528\u4e3a $0$ \u7684\u8fb9\u3002\u6700\u540e\u4e00\u5c42\u7684\u51fa\u70b9\u5411\u6e90\u70b9\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $1$ \u8d39\u7528\u4e3a $0$ \u7684\u8fb9\u3002\u5f88\u663e\u7136,\u8fd9\u6837\u5b50\u4fdd\u8bc1\u4e86**\u70b9\u7528\u8fc7\u5c31\u7528\u4e0d\u4e86**\u7684\u6027\u8d28\u5207\u4e14\u4fdd\u8bc1\u4e86**\u7b54\u6848\u6700\u5c0f**\u3002\u56e0\u4e3a\u6211\u4eec\u8981**\u7b54\u6848\u6700\u5927**,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u8fb9\u7684\u8d39\u7528\u53d8\u6210\u8d1f\u6570,\u7136\u540e\u8f93\u51fa $-\\min cost$\u3002\n\n![](https://i.loli.net/2018/11/02/5bdc15e9e8960.png)\n\n\n$$QEUES\\ II$$\n\n\u4e0d\u80fd\u7528\u7684\u6027\u8d28\u8f6c\u5316\u5230\u4e86\u8fb9\u4e0a,\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u8fb9\u7684\u90a3\u4e9b\u6d41\u91cf\u8d4b\u503c\u4e3a $1$ \u8d39\u7528\u8d4b\u503c\u4e3a $matrix[i,j]$\u3002\u6ce8\u610f\u6700\u540e\u4e00\u5c42\u7684\u70b9\u5411\u6c47\u70b9\u7684\u8fb9\u6240\u662f\u53ef\u4ee5\u7528\u5f88\u591a\u6b21\u7684,\u641e\u6210 $inf$ \u5373\u53ef\u3002\n\n\u4e0b\u9762\u8fd9\u4e2a\u56fe\u6709\u70b9\u9519\u4e86,\u6211\u628a\u8d39\u7528\u7b49\u4e8e\u7f16\u53f7\u4e86\u3002\n\n![](https://i.loli.net/2018/11/03/5bdce4f26c742.png)\n\n$$QEUES\\ III$$\n\n\u4ec0\u4e48\u90fd\u53ef\u4ee5\u7528,\u76f4\u63a5\u628a\u9664\u4e86\u6e90\u70b9\u8fde\u5411\u7b2c\u4e00\u5c42\u7684\u70b9\u7684\u8fb9\u7684\u6d41\u91cf\u90fd\u8d4b\u503c\u4e3a $inf$\u3002\u7531\u4e8e\u53ea\u80fd\u6709 $m$ \u4e2a\u8def\u5f84\u8dd1\u8fc7\u53bb\u6240\u4ee5\u7b2c\u4e00\u5c42\u5230\u6e90\u70b9\u7684\u8fb9\u662f $1$\u3002\n\n\u6ce8\u610f\u4e0b\u9762\u7684\u4ee3\u7801 $sink$ \u662f\u6c47\u70b9,$source$ \u662f\u7528\u6e90\u70b9\u3002 $n,m$ \u662f\u53cd\u7684\u3002 \n\n\n```pascal\n// 2018-11-07 \u4e00\u4e2a\u77e9\u9635\u6700\u5927\u7684\u8fb9\u957f\u662f 39 \u554a,\u6240\u4ee5\u5f00 20 \u4f1a\u88ab\u6211\u81ea\u5df1\u51fa\u7684\u6570\u636e\u5361,\u6240\u4ee5\u6765\u63d0\u9192\u5927\u5bb6\nUses math;\n\nvar\n    from,reach,next,value,cost:array[-1..500010] of longint;\n    dis,pre,last,flow:array[-1..50010] of longint;\n    matrix:array[-1..41,-1..41] of longint;\n    id:array[-1..41,-1..41,1..2] of longint;\n    queue:array[-1..500010] of longint;\n    cnt:array[-1..50010] of longint;\n    vis:array[-1..50010] of boolean;\n    n,m,i,j,l,r,x,y,tot,now,node,sink,source,maxflow,mincost:longint;\n\nprocedure add(x,y,sum_1,sum_2:longint);\nbegin\n    inc(tot); from[tot]:=x; reach[tot]:=y; value[tot]:=sum_1; cost[tot]:= sum_2; next[tot]:=cnt[x]; cnt[x]:=tot;\n    inc(tot); from[tot]:=y; reach[tot]:=x; value[tot]:=0    ; cost[tot]:=-sum_2; next[tot]:=cnt[y]; cnt[y]:=tot;\nend;\n\nfunction spfa:boolean;\nvar head,tail,now,i:longint;\nbegin\n    filldword(dis,sizeof(dis) div 4,maxlongint);\n    filldword(flow,sizeof(flow) div 4,maxlongint);\n    filldword(vis,sizeof(vis) div 4,0);\n    head:=1; tail:=1;  queue[1]:=source; vis[source]:=True; dis[source]:=0; pre[sink]:=-1;\n\n    while head<=tail do\n    begin\n        now:=queue[head]; vis[now]:=False; inc(head);\n        i:=cnt[now];\n        while i<>-1 do\n        begin\n            if (value[i]>0)and(dis[reach[i]]>dis[now]+cost[i]) then\n            begin\n                dis[reach[i]]:=dis[now]+cost[i];\n                pre[reach[i]]:=now;\n                last[reach[i]]:=i;\n                flow[reach[i]]:=min(flow[now],value[i]);\n                if vis[reach[i]]=False then\n                begin\n                    vis[reach[i]]:=True;\n                    inc(tail); queue[tail]:=reach[i];\n                end;\n            end;\n            i:=next[i];\n        end;\n    end;\n    if pre[sink]=-1 then exit(False); exit(True);\nend;\n\nprocedure MincostMaxflow;\nbegin\n    maxflow:=0; mincost:=0; now:=0;\n    while (spfa) do\n    begin\n        now:=sink;\n        inc(maxflow,flow[sink]);\n        inc(mincost,flow[sink]*dis[sink]);\n        while now<>source do\n        begin\n            dec(value[last[now]],flow[sink]);\n            inc(value[last[now] xor 1],flow[sink]);\n            now:=pre[now];\n        end;\n    end;\nend;\n\nprocedure Clear;\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    fillchar(value,sizeof(value),0);\n    fillchar(reach,sizeof(reach),0);\n    fillchar(cost,sizeof(cost),0);\n    fillchar(next,sizeof(next),0);\nend;\n\nprocedure Construction_I;\nbegin\n    for i:=1 to n do add(source,id[1,i,1],1,0);\n    for i:=1 to m do for j:=1 to n+i-1 do\n        begin\n            add(id[i,j,1],id[i,j,2],1,-matrix[i,j]);\n            add(id[i,j,2],id[i+1,j,1],1,0);\n            add(id[i,j,2],id[i+1,j+1,1],1,0);\n        end;\n    for i:=1 to n+m-1 do add(id[m,i,2],sink,1,0);\nend;\n\nprocedure Construction_II;\nbegin\n    for i:=1 to n do add(source,id[1,i,1],1,0);\n    for i:=1 to m do for j:=1 to n+i-1 do\n        begin\n            add(id[i,j,1],id[i+1,j,1],1,-matrix[i,j]);\n            add(id[i,j,1],id[i+1,j+1,1],1,-matrix[i,j]);\n        end;\n    for i:=1 to n+m-1 do add(id[m,i,1],sink,maxlongint div 843,-matrix[m,i]);\nend;\n\nprocedure Construction_III;\nbegin\n    for i:=1 to n do add(source,id[1,i,1],1,0);\n    for i:=1 to m do for j:=1 to n+i-1 do\n        begin\n            add(id[i,j,1],id[i+1,j,1],maxlongint div 843,-matrix[i,j]);\n            add(id[i,j,1],id[i+1,j+1,1],maxlongint div 843,-matrix[i,j]);\n        end;\n    for i:=1 to n+m-1 do add(id[m,i,1],sink,maxlongint div 843,-matrix[m,i]);\nend;\n\nbegin\n    read(n,m);\n    for i:=1 to m do for j:=1 to n+i-1 do\n        begin\n            inc(node,2); id[i,j,1]:=node; id[i,j,2]:=node+1;\n            read(matrix[i,j]);\n        end;\n    source:=1; sink:=node+2;\n    Clear; Construction_I; MincostMaxflow; writeln(-mincost);\n    Clear; Construction_II; MincostMaxflow; writeln(-mincost);\n    Clear; Construction_III; MincostMaxflow; writeln(-mincost);\nend.\n```",
        "postTime": 1541150207,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u6570\u5b57\u68af\u5f62\u95ee\u9898\u7684\u601d\u8003"
    },
    {
        "content": "## \u611f\u52a8\uff0c\u7ec8\u4e8e\u8fc7\u4e86(\u7531\u6b64\u6211\u53d1\u73b0\u4e86\u81ea\u5df1\u662f\u6709\u591a\u4e48\u7684\u83dc\u2026\u2026)\n\n~~\u5176\u5b9e\u5176\u4ed6\u51e0\u4e2a\u53d1\u9898\u89e3\u5927\u4f6c\u90fd\u5df2\u7ecf\u628a\u601d\u8def\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u5c31\u4e0d\u7ec6\u8bb2\u4e86\uff0c\u4e3b\u8981\u662f\u63d0\u9192\u5927\u5bb6\u4e00\u4e0b~~\n\n#### \u53ef\u80fd\u8fd9\u4e00\u9898\u7684\u63d0\u4ea4\u8bb0\u5f55\u4e2d\u4e5f\u53ea\u6709\u6211\u4ea4\u4e86\u8fd9\u4e48\u591a\u6b21\uff0c\u53d1\u4e86\u4e09\u7bc7\u8ba8\u8bba\uff0c\u8fde\u7740\u6539\u4e86\u4e00\u4e2a\u661f\u671f\u5427\u2026\u2026\n\n\u5927\u81f4\u7684\u601d\u8def\uff1a\n\n1. - \u7b2c\u4e00\u95ee\u8981\u4fdd\u8bc1\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u8ba9\u4e00\u4e2a\u70b9\u88ab\u7ecf\u8fc7\u591a\u6b21\n\n   - \u662f\u4e0d\u662f\u611f\u89c9\u5f88\u719f\u6089\uff01\u662f\u4e0d\u662f\uff01\u6ca1\u9519\uff0c\u5c31\u662f\u62c6\u70b9\u5927\u6cd5\uff01\u7528\u62c6\u70b9\u6765\u4fdd\u8bc1\u53ea\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u4e00\u6b21\u5373\u53efQQwQ\n   \n2. - \u7b2c\u4e8c\u95ee\u4ec5\u4e0d\u5141\u8bb8\u5728\u8def\u5f84\u4e0a\u76f8\u4ea4\uff0c\u5c31\u6ca1\u5fc5\u8981\u62c6\u70b9\u5566QQwQ\n\n   - \u540c\u6837\u7684\uff0c\u7528\u6d41\u91cf\u4e3a1\u6765\u4fdd\u8bc1\u8def\u5f84\u53ea\u7ecf\u8fc7\u4e00\u6b21\n   \n3. - \u7b2c\u4e09\u95ee\u4e00\u770b\u2026\u2026\u5662\uff0c\u8fd9\u4e0d\u76f8\u5f53\u4e8e\u662f\u6ca1\u6709\u9650\u5236\u4e48QQQQQwQ\uff01\n\n   - \u6fc0\u52a8\u7684\u6211\u4eec\u5c06\u6d41\u91cf\u5f00\u5927\u5e76\u4ec0\u4e48\u4e5f\u4e0d\u60f3\u7ba1\n\n\u4ee5\u4e0b\u662f\u6211\u4e3b\u8981\u51fa\u95ee\u9898\u7684\u51e0\u4e2a\u70b9\uff08\u6c42\u4e0d\u8981\u5632\u8bbd\uff09\uff1a\n\n- memset\u8d4b\u8d1f\u6570\u65f6\u53ea\u80fd\u8d4b-1\uff0c\u8d4b\u5176\u4ed6\u7684\u6570\u4f1a\u53d8\u6210\u5947\u602a\u7684\u8d1f\u6570\uff0c\u6240\u4ee5\u5728\u5224\u65ad\u65f6\u8981\u770b\u4ed6\u662f\u5426<0\uff0c\u5426\u5219\u5c31\u4f1a\u51fa\u9519\u2026\u2026\n\n- \u8fd9\u4e00\u9898\u4e0d\u8981\u770b\u8303\u56f4\u53ea\u670920\u5c31\u4e0d\u5f00\u5927\u6570\u7ec4\u8303\u56f4\uff0c\u4e00\u5b9a\u8981\u5f00\u5927\uff01\uff01\uff0c\u4e0d\u7136\u5c31\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u4e00\u65e6\u7206\u6570\u7ec4\u5c31\u4f1a\u4fee\u6539\u5230\u5176\u4ed6\u51e0\u4e2a\u6570\u7ec4\u7136\u540e\u5c31\u6302\u4e86\u2026\u2026\uff08\u50cf\u6211\u5c31T\u5230\u98de\u8d77\u2026\u2026\uff09\n\n\u4e4b\u524d\u6211\u6539\u4ee3\u7801\u662f\u53d1\u73b0\u2026\u2026\u9898\u89e3\u4e2d\u6ca1\u6709\u4e00\u7bc7Dinic\u9012\u5f52\u7684\u4ee3\u7801\uff01\n\n~~\u4e8e\u662f\u7ed9\u5927\u5bb6\u4e00\u4e2a\u5e76\u624b\u52a8\u666e\u5ea6\u4f17\u751f~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n    int f=1,w=0;char x=0;\n    while(x<'0'||x>'9') {if(x=='-') f=-1; x=getchar();}\n    while(x!=EOF&&x>='0'&&x<='9') {w=(w<<3)+(w<<1)+(x^48);x=getchar();}\n    return f*w;\n}\nint head[200020],cur[200020],num_edge=-1;\nint a[1001][1001],b[1001][1001],cnt;\nint n,m,s,t,ans;\nstruct Edge\n{\n    int next,to,dis,cos;\n}edge[200020];\ninline void add(int from,int to,int dis,int cos)\n{\n    edge[++num_edge].next=head[from];\n    edge[num_edge].to=to;\n    edge[num_edge].dis=dis;\n    edge[num_edge].cos=cos;\n    head[from]=num_edge;\n}\ninline void clear()\n{\n    num_edge=-1;\n    memset(head,-1,sizeof(head));\n    ans=0;\n}\nint d[200000],v[200000],flo[200000];\ninline bool bfs()\n{\n    memset(d,-50,sizeof(d));\n    memset(v,0,sizeof(v));\n    memset(flo,0,sizeof(flo));\n    queue<int> q;\n    q.push(s);\n    d[s]=0;\n    v[s]=1;flo[s]=1;\n    while(!q.empty())\n    {\n        int x=q.front();\n        q.pop();\n        v[x]=0;\n        for(int i=head[x];i!=-1;i=edge[i].next)\n        {\n            int y=edge[i].to;\n            if(edge[i].dis>0&&d[y]<d[x]+edge[i].cos)\n            {\n                d[y]=d[x]+edge[i].cos;\n                flo[y]=flo[x]+1;\n                if(!v[y]) { q.push(y); v[y]=1; }\n            }\n        }\n    }\n    if(d[t]<0) return 0;\n    else return 1;\n}\nint dfs(int pos,int dis)\n{\n    if(pos==t) return dis;\n    for(int i=cur[pos];i!=-1;i=edge[i].next)\n        if(flo[edge[i].to]==flo[pos]+1&&edge[i].dis!=0&&d[edge[i].to]==d[pos]+edge[i].cos)\n        {\n            int data=dfs(edge[i].to,min(dis,edge[i].dis));\n            if(data>0)\n            {\n                edge[i].dis-=data;\n                edge[i^1].dis+=data;\n                ans+=edge[i].cos;\n                cur[pos]=i;\n                return data; \n            }\n        }\n    return 0;\n}\nvoid  Dinic()\n{\n    while(bfs())\n    {\n        memcpy(cur,head,sizeof(head));\n        while(dfs(s,0x3f3f3f3f));\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    m=read();\n    n=read();\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=m+i-1;j++)\n            a[i][j]=read(),b[i][j]=++cnt;\n    s=0;\n    t=cnt*2+3;\n    for(int i=1;i<=m;i++)\n        add(s,b[1][i],1,0),add(b[1][i],s,0,0);\n    for(int i=1;i<n;i++)\n        for(int j=1;j<=m+i-1;j++)\n        {\n            add(b[i][j],b[i][j]+cnt,1,a[i][j]);\n            add(b[i][j]+cnt,b[i][j],0,-a[i][j]);\n            add(b[i][j]+cnt,b[i+1][j],1,0);\n            add(b[i+1][j],b[i][j]+cnt,0,0);\n            add(b[i][j]+cnt,b[i+1][j+1],1,0);\n            add(b[i+1][j+1],b[i][j]+cnt,0,0);\n        }\n    for(int i=1;i<=m+n-1;i++)\n    {\n        add(b[n][i],b[n][i]+cnt,1,a[n][i]);\n        add(b[n][i]+cnt,b[n][i],0,-a[n][i]);\n        add(b[n][i]+cnt,t,1,0);\n        add(t,b[n][i]+cnt,0,0);\n    }\n    Dinic();\n    printf(\"%d\\n\",ans);\n    clear();\n    for(int i=1;i<=m;i++)\n        add(s,b[1][i],1,0),add(b[1][i],s,0,0);\n    for(int i=1;i<n;i++)\n        for(int j=1;j<=m+i-1;j++)\n        {\n            add(b[i][j],b[i+1][j],1,a[i][j]);\n            add(b[i+1][j],b[i][j],0,-a[i][j]);\n            add(b[i][j],b[i+1][j+1],1,a[i][j]);\n            add(b[i+1][j+1],b[i][j],0,-a[i][j]);\n        }\n    for(int i=1;i<=m+n-1;i++)\n    {\n        add(b[n][i],t,0x3f3f3f3f,a[n][i]);\n        add(t,b[n][i],0,-a[n][i]);\n    }\n    Dinic();\n    printf(\"%d\\n\",ans);\n    clear();\n    for(int i=1;i<=m;i++)\n        add(s,b[1][i],1,0),add(b[1][i],s,0,0);\n    for(int i=1;i<n;i++)\n        for(int j=1;j<=m+i-1;j++)\n        {\n            add(b[i][j],b[i+1][j],0x3f3f3f3f,a[i][j]);\n            add(b[i+1][j],b[i][j],0,-a[i][j]);\n            add(b[i][j],b[i+1][j+1],0x3f3f3f3f,a[i][j]);\n            add(b[i+1][j+1],b[i][j],0,-a[i][j]);\n        }\n    for(int i=1;i<=m+n-1;i++)\n    {\n        add(b[n][i],t,0x3f3f3f3f,a[n][i]);\n        add(t,b[n][i],0,-a[n][i]);\n    }\n    Dinic();\n    printf(\"%d\\n\",ans);\n}\n\n```",
        "postTime": 1544838617,
        "uid": 92496,
        "name": "\u6587\u6b66\u6b66\u667a\u969c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "## \u5206\u6790   \n&emsp;&emsp;$1\\sim n$ \u884c\u7684\u6570\u5b57\u4e2a\u6570\u5448\u7b49\u5dee\u6570\u5217\uff0c\u5171\u6709 $num=\\frac{n(2m+n-1)}{2}$ \u4e2a\u6570\u5b57\u3002\u4e0d\u59a8\u5c06\u6570\u5b57\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u7b2c $i$ \u884c $j$ \u5217\u7684\u70b9\u7684\u7f16\u53f7\u4e3a $\\frac{(i-1)(2m+i-2)}{2}+j$\uff0c\u8bb0\u4f5c $ID(i,j)$\u3002\u5176\u503c\u4f5c\u4e3a\u70b9\u6743\uff0c\u4e00\u6761\u8def\u5f84\u81ea\u4e0a\u800c\u4e0b\u8986\u76d6 $m$ \u4e2a\u70b9\uff0c\u8d39\u7528\u4e3a\u70b9\u6743\u548c\u3002\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8d39\u7528\u6d41\u89e3\u51b3\u95ee\u9898\u3002  \n&emsp;&emsp;\u8d39\u7528\u6d41\u7684\u8d39\u7528\u662f\u8fb9\u7684\u5355\u4f4d\u8d39\u7528\uff0c\u8981\u5c06\u70b9\u6743\u4f53\u73b0\u5728\u8fb9\u4e0a\uff0c\u53ef\u8fdb\u884c\u62c6\u70b9\u64cd\u4f5c\u3002\u5bf9\u4e8e\u7f16\u53f7\u4e3a $ID(i,j)$ \u7684\u70b9\uff0c\u5c06\u5176\u62c6\u6210\u4e24\u4e2a\u70b9 $X_{ID(i,j)},Y_{ID(i,j)}$\uff0c$X_{ID(i,j)}$ \u7f16\u53f7\u4e3a $ID(i,j)$\uff0c$Y_{ID(i,j)}$ \u7f16\u53f7\u4e3a $ID(i,j)+num$\uff0c\u8fb9\u4e0a\u7684\u8d39\u7528\u4e3a\u5176\u70b9\u6743\u503c\u3002 \u8bbe\u7f6e\u6e90\u70b9 $s$\uff0c\u8fde\u63a5\u70b9 $ID(1,1)\\sim ID(1,m)$\uff0c\u8d39\u7528\u4e3a $0$\uff1b\u8bbe\u7f6e\u6c47\u70b9 $t$\uff0c$ID(n,1)\\sim ID(n,m+n-1)$ \u5411 $t$ \u8fde\u8fb9\uff0c\u8d39\u7528\u4e3a $0$\uff1b\u5bf9\u4e8e $i<n$ \u7684\u70b9\uff0c$Y_{ID(i,j)}$ \u5411 $X_{ID(i+1,j)}$ \u548c $X_{ID(i+1,j+1)}$ \u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a $0$\u3002\u5bf9\u4e8e\u4e09\u79cd\u4e0d\u540c\u7684\u9650\u5236\u6761\u4ef6\uff0c\u8981\u901a\u8fc7\u8bbe\u7f6e\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\uff0c\u4f7f\u5f97\u5229\u7528 $\\text{MCMF}$ \u7b97\u6cd5\u6c42\u51fa\u7684\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u4e3a\u7b54\u6848\u3002  \n&emsp;&emsp;\u9996\u5148\u770b $s$ \u7684\u51fa\u8fb9\u548c $t$ \u7684\u5165\u8fb9\u3002$m$ \u6761\u8def\u5f84\u8981\u4ece\u9876\u5c42 $m$ \u4e2a\u70b9\u51fa\u53d1\uff0c$s$ \u7684\u51fa\u8fb9\u7684\u5bb9\u91cf\u5e94\u8bbe\u4e3a $1$\u3002\u7531\u4e8e\u6700\u540e\u8981\u786e\u5b9a $m$ \u6761\u8def\u5f84\uff0c\u6d41\u5165 $t$ \u7684\u6d41\u91cf\u5fc5\u987b\u4e3a $m$\uff1b$s$ \u51fa\u8fb9\u5bb9\u91cf\u8bbe\u7f6e\u597d\u540e\uff0c\u7f51\u7edc\u6700\u5927\u6d41\u5fc5\u7136\u4e0d\u8d85\u8fc7 $m$\uff0c\u56e0\u6b64\u76f4\u63a5\u8bbe $t$ \u7684\u5165\u8fb9\u6d41\u91cf\u90fd\u4e3a $+\\infty$ \u5373\u53ef\u3002\n&emsp;&emsp;\u7b2c\u4e00\u79cd\u9650\u5236\u6761\u4ef6\uff0c\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4\u3002\u53ef\u4ee5\u5c06 $X_{ID(i,j)}$ \u548c $Y_{ID(i,j)}$ \u4e4b\u95f4\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $1$\uff0c\u8868\u793a\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u8def\u5f84\u4e0d\u80fd\u6709\u76f8\u4ea4\u7684\u70b9\uff1b\u518d\u5c06 $Y_{ID(i,j)}$ \u5411 $X_{ID(i+1,j)}$ \u548c $X_{ID(i+1,j+1)}$ \u8fde\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $1$\uff0c\u8868\u793a\u8def\u5f84\u4e0d\u80fd\u6709\u76f8\u4ea4\u7684\u8fb9\u3002\u5b9e\u9645\u4e0a\uff0c\u201c\u8def\u5f84\u6ca1\u6709\u76f8\u4ea4\u7684\u70b9\u201d\u662f\u4e00\u4e2a\u6bd4\u201c\u8def\u5f84\u6ca1\u6709\u76f8\u4ea4\u7684\u8fb9\u201d\u66f4\u5f3a\u7684\u6761\u4ef6\uff0c\u5c06 $X_{ID(i,j)}$ \u548c $Y_{ID(i,j)}$ \u4e4b\u95f4\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $1$ \u5373\u53ef\u3002  \n&emsp;&emsp;\u7b2c\u4e8c\u79cd\u9650\u5236\u6761\u4ef6\uff0c\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u4ec5\u5728\u6570\u5b57\u7ed3\u70b9\u5904\u76f8\u4ea4\u3002\u53ef\u4ee5\u5c06 $X_{ID(i,j)}$ \u548c $Y_{ID(i,j)}$ \u4e4b\u95f4\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $+\\infty$\uff0c\u8def\u5f84\u53ef\u4ee5\u80fd\u6709\u76f8\u4ea4\u7684\u70b9\uff1b\u518d\u5c06 $Y_{ID(i,j)}$ \u5411 $X_{ID(i+1,j)}$ \u548c $X_{ID(i+1,j+1)}$ \u8fde\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $1$\uff0c\u8868\u793a\u8def\u5f84\u4e0d\u80fd\u6709\u76f8\u4ea4\u7684\u8fb9\u3002  \n&emsp;&emsp;\u7b2c\u4e09\u79cd\u9650\u5236\u6761\u4ef6\uff0c\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u5141\u8bb8\u5728\u6570\u5b57\u7ed3\u70b9\u76f8\u4ea4\u6216\u8fb9\u76f8\u4ea4\u3002\u53ef\u4ee5\u5c06 $X_{ID(i,j)}$ \u548c $Y_{ID(i,j)}$ \u4e4b\u95f4\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $+\\infty$\uff0c\u8def\u5f84\u53ef\u4ee5\u80fd\u6709\u76f8\u4ea4\u7684\u70b9\uff1b\u518d\u5c06 $Y_{ID(i,j)}$ \u5411 $X_{ID(i+1,j)}$ \u548c $X_{ID(i+1,j+1)}$ \u8fde\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $+\\infty$\uff0c\u8868\u793a\u8def\u5f84\u80fd\u6709\u76f8\u4ea4\u7684\u8fb9\u3002     \n&emsp;&emsp;\u5bf9\u4e09\u79cd\u6761\u4ef6\u5404\u5efa\u4e00\u5f20\u56fe\uff0c\u6c42\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002  \n\n## \u4ee3\u7801  \n```cpp\n/******************************************************************\nCopyright: 11D_Beyonder All Rights Reserved\nAuthor: 11D_Beyonder\nProblem ID: \u6d1b\u8c37 P4013\nDate: 8/5/2020\nDescription: Maximum-cost Flow\n*******************************************************************/\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nconst int N=2003;\nstruct E\n{\n\tint to;\n\tint cap;\n\tint cost;\n\tint Next;\n};\nE edge[N<<6];\nint head[N],tot;\nint incf[N],pre[N];\nint dis[N];\nbool inqueue[N];\nint m,n,num;\nint s,t;\nint a[N][N];\nvoid init();\nint ID(int,int);\ninline void add_edge(int,int,int,int);\nbool SPFA();\nint MCMF();\nint main()\n{\n\tcin>>m>>n;\n\tint i,j;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tscanf(\"%d\",&a[i][j]);\n\t\t}\n\t}\n\t//\u7b2c\u4e00\u7c7b\n\tinit();\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tif(i==1) add_edge(s,ID(i,j),1,0);\n\t\t\tif(i==n) add_edge(ID(i,j)+num,t,inf,0);\n\t\t\tif(i<n)\n\t\t\t{\n\t\t\t\tadd_edge(ID(i,j)+num,ID(i+1,j),1,0);\n\t\t\t\tadd_edge(ID(i,j)+num,ID(i+1,j+1),1,0);\n\t\t\t}\n\t\t\tadd_edge(ID(i,j),ID(i,j)+num,1,-a[i][j]);\n\t\t}\n\t}\n\tcout<<-MCMF()<<endl;\n\t//\u7b2c\u4e8c\u7c7b\n\tinit();\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tif(i==1) add_edge(s,ID(i,j),1,0);\n\t\t\tif(i==n) add_edge(ID(i,j)+num,t,inf,0);\n\t\t\tif(i<n)\n\t\t\t{\n\t\t\t\tadd_edge(ID(i,j)+num,ID(i+1,j),1,0);\n\t\t\t\tadd_edge(ID(i,j)+num,ID(i+1,j+1),1,0);\n\t\t\t}\n\t\t\tadd_edge(ID(i,j),ID(i,j)+num,inf,-a[i][j]);\n\t\t}\n\t}\n\tcout<<-MCMF()<<endl;\n\t//\u7b2c\u4e09\u7c7b\n\tinit();\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tfor(j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tif(i==1) add_edge(s,ID(i,j),1,0);\n\t\t\tif(i==n) add_edge(ID(i,j)+num,t,inf,0);\n\t\t\tif(i<n)\n\t\t\t{\n\t\t\t\tadd_edge(ID(i,j)+num,ID(i+1,j),inf,0);\n\t\t\t\tadd_edge(ID(i,j)+num,ID(i+1,j+1),inf,0);\n\t\t\t}\n\t\t\tadd_edge(ID(i,j),ID(i,j)+num,inf,-a[i][j]);\n\t\t}\n\t}\n\tcout<<-MCMF()<<endl;\n\treturn 0;\n}\nvoid init()\n{\n\ttot=1;\n\tnum=(2*m+n-1)*n/2;\n\tmemset(head,-1,sizeof(head));\n\ts=0;\n\tt=num*2+1;\n}\ninline void add_edge(int u,int v,int cap,int cost)\n{\n\ttot++;\n\tedge[tot].to=v;\n\tedge[tot].cap=cap;\n\tedge[tot].cost=cost;\n\tedge[tot].Next=head[u];\n\thead[u]=tot;\n\ttot++;\n\tedge[tot].to=u;\n\tedge[tot].cap=0;\n\tedge[tot].cost=-cost;\n\tedge[tot].Next=head[v];\n\thead[v]=tot;\n}\nbool SPFA()\n{\n\tqueue<int>q;\n\tmemset(dis,inf,sizeof(dis));\n\tmemset(inqueue,0,sizeof(inqueue));\n\tq.push(s);\n\tdis[s]=0;\n\tinqueue[s]=1;\n\tincf[s]=inf;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tinqueue[x]=0;\n\t\tfor(register int i=head[x];~i;i=edge[i].Next)\n\t\t{\n\t\t\tif(!edge[i].cap) continue;//\u5269\u4f59\u5bb9\u91cf\u4e3a0\uff0c\u4e0d\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d\u3002\n\t\t\tint y=edge[i].to;\n\t\t\tif(dis[y]>dis[x]+edge[i].cost)\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+edge[i].cost;//\u677e\u5f1b\u64cd\u4f5c\n\t\t\t\tincf[y]=min(incf[x],edge[i].cap);//\u6700\u5c0f\u5269\u4f59\u5bb9\u91cf\n\t\t\t\tpre[y]=i;//\u8bb0\u5f55\u524d\u9a71\n\t\t\t\tif(!inqueue[y])\n\t\t\t\t{\n\t\t\t\t\tinqueue[y]=1;\n\t\t\t\t\tq.push(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[t]==inf) return 0;//\u6c47\u70b9\u4e0d\u53ef\u8fbe\uff0c\u5df2\u7ecf\u6c42\u51fa\u6700\u5927\u6d41\n\telse return 1;\n}\nint MCMF()\n{\n\tint maxflow,mincost;\n\tmaxflow=mincost=0;\n\twhile(SPFA())\n\t{\n\t\tint x=t;\n\t\t//\u6cbf\u7740\u524d\u9a71\u5012\u7740\u8d70\u589e\u5e7f\u8def\n\t\twhile(x!=s)\n\t\t{\n\t\t\tint y=pre[x];\n\t\t\tedge[y].cap-=incf[t];\n\t\t\tedge[y^1].cap+=incf[t];\n\t\t\tx=edge[y^1].to;\n\t\t}\n\t\tmaxflow+=incf[t];\n\t\tmincost+=dis[t]*incf[t];\n\t}\n\treturn mincost;\n}\nint ID(int x,int y) {return (2*m+x-2)*(x-1)/2+y;}\n```\n## \u540e\u8bb0  \n&emsp;&emsp;\u6570\u7ec4\u8981\u5f00\u5927\u4e9b\uff0c\u82e5\u8d8a\u754c\u540e\u52a8\u4e86\u5176\u4ed6\u5730\u65b9\u7684\u5185\u5b58\uff0c\u5c31 $\\text{TLE}$ \u4e86\u3002  ",
        "postTime": 1596645301,
        "uid": 253240,
        "name": "11D_Beyonder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": " ### \u3010\u9898\u76ee\u3011\n![\u9898\u76ee](https://cdn.luogu.com.cn/upload/pic/26046.png)\n\n### \u3010\u89e3\u9898\u601d\u8def\u3011\n- \u6027\u8d28\n\t- \u89c2\u5bdf\u56fe\u50cf\u53ef\u4ee5\u53d1\u73b0\uff1a\u8def\u5f84\u4e0d\u4f1a\u201c\u76f8\u4ea4\u201d\uff0c\u53ea\u4f1a\u201c\u91cd\u5408\u201d\u6216\u90e8\u5206\u201c\u91cd\u5408\u201d\u3002\n- \u95ee\u9898\u4e00\n\t- \u56e0\u4e3a\u6bcf\u6761\u8def\u5f84\u90fd\u4e0d\u76f8\u4ea4\uff0c\u4f46\u662f\u56e0\u6b64\u6bcf\u4e00\u4e2a\u70b9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6bcf\u6761\u8fb9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\u3002\n    \n\t- \u4e3a\u4e86\u9650\u5236\u7ecf\u8fc7\u6b21\u6570\uff0c\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u70b9\u8fdb\u884c\u62c6\u70b9\uff0c\u62c6\u6210\u70b91\u548c\u70b92,\n    - \u6240\u4ee5\u628a\u70b91\u548c\u70b92\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u70b9\u7684\u4ef7\u503c\u7684\u8fb9\u3002\n    - \u628a\u70b92\u4e0e\u8fd9\u4e2a\u70b9\u659c\u4e0b\u65b9\u7684\u70b91\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n    \n    - \u628a\u6e90\u70b9\u4e0e\u7b2c\u4e00\u5c42\u7684\u70b91\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n    - \u628a\u6700\u540e\u4e00\u5c42\u7684\u70b92\u4e0e\u6c47\u70b9\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n- \u95ee\u9898\u4e8c\n\t- \u53ef\u4ee5\u91cd\u590d\u7ecf\u8fc7\u70b9\uff0c\u90a3\u4e48\u62c6\u70b9\u7684\u6b65\u9aa4\u4e5f\u7701\u4e86\u3002\u8981\u6ce8\u610f\u5f00\u59cb\u70b9\u4e0d\u80fd\u91cd\u590d\u9009\uff0c\u53ea\u80fd\u9009\u4e00\u6b21\uff1b\u7ed3\u675f\u70b9\u5374\u53ef\u4ee5\u9009\u65e0\u6570\u6b21\u3002\n    \n    - \u53ea\u8981\u628a\u6bcf\u4e00\u4e2a\u70b9\u4e0e\u5176\u659c\u4e0b\u65b9\u7684\u70b9\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u65e0\u7a77\u5927\u7684\u8fb9\u3002\n    \n\t- \u628a\u6e90\u70b9\u4e0e\u7b2c\u4e00\u5c42\u7684\u70b9\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n    \n    - \u628a\u6700\u540e\u4e00\u5c42\u7684\u70b9\u4e0e\u6c47\u70b9\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u65e0\u7a77\u5927\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n- \u95ee\u9898\u4e09\n\t- \u95ee\u9898\u4e09\u5c31\u662f\u65e0\u9650\u5236\u3002\n    \n\t- \u6784\u56fe\u65b9\u6cd5\u4e0e\u201c\u95ee\u9898\u4e8c\u201d\u76f8\u4f3c\n    - \u53ea\u8981\u628a\u6bcf\u4e00\u4e2a\u70b9\u4e0e\u5176\u659c\u4e0b\u65b9\u7684\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\u7684\u5bb9\u91cf\u4fee\u6539\u4e3a\u65e0\u7a77\u5927\u5373\u53ef\u3002\n- \u95ee\u9898\u4e00\u3001\u4e8c\u3001\u4e09\u53ea\u8981\u5728\u6784\u56fe\u540e\u8dd1\u4e00\u6ce2\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\uff08\u53c2\u8003\u7a0b\u5e8f\u7528\u4e86\u53d6\u76f8\u53cd\u6570\u7684\u65b9\u6cd5\uff09\n\n### \u3010\u89e3\u9898\u53cd\u601d\u3011\n- \u7f51\u7edc\u6d41\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u89c2\u5bdf\u51fa\u6027\u8d28\u624d\u80fd\u66f4\u52a0\u65b9\u4fbf\u5730\u89e3\u9898\u3002\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\n#define INF 0x3f3f3f3f\nint cur=1,n,m,s,t,mcost,mflow;\nint head[5005],dis[5005],flow[5005],pre[5005];\nstruct EDGE{\n    int t,next,w,f;\n}e[100005];\nvoid add(int a,int b,int w,int f)\n{\n    cur++;e[cur].t=b;e[cur].next=head[a];e[cur].w=w;e[cur].f=f;head[a]=cur;\n    cur++;e[cur].t=a;e[cur].next=head[b];e[cur].w=0;e[cur].f=-f;head[b]=cur;\n}\n\nqueue < int > q;\nbool vis[5005];\nbool SPFA(int s,int t)\n{\n    memset(dis,INF,sizeof dis);\n    memset(vis,0,sizeof vis);\n    dis[s]=0;\n    vis[s]=1;\n    flow[s]=INF;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front();q.pop();\n        vis[u]=false;\n        for (int h=head[u];h!=-1;h=e[h].next)\n        {\n            int v=e[h].t,f=e[h].f;\n            if (e[h].w&&dis[u]+f<dis[v])//????????????\n            {\n                dis[v]=dis[u]+f;//??????\n                flow[v]=min(flow[u],e[h].w);//??????\n                pre[v]=h;//????\n                if (!vis[v])\n                {\n                    vis[v]=true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    return dis[t]!=INF;\n}\n\nvoid Update(int s,int t)\n{\n    int x=t;\n    while (x!=s)\n    {\n        int i=pre[x];\n        e[i].w-=flow[t];\n        e[i^1].w+=flow[t];\n        x=e[i^1].t;\n    }//??????????????\n    mflow+=flow[t];\n    mcost+=flow[t]*dis[t];//????\n}\nvoid E_K(int s,int t)\n{\n    while (SPFA(s,t))//????????\n        Update(s,t);\n}\n\nint p[105][105],Map[105][105];\nint id;\n\nvoid Init()\n{\n\tcur=1;\n\tmemset(head,-1,sizeof head);\n\tmemset(e,0,sizeof e);\n\tmemset(flow,0,sizeof flow);\n\tmemset(pre,0,sizeof pre);\n\tmflow=0;mcost=0;\n}\n\n#define nxt(x) (x+id)\nvoid P1()\n{\n\tInit();\n\ts=0;t=id*2+1;\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tadd(p[i][j],nxt(p[i][j]),1,-Map[i][j]);\n\t\t\tif (p[i+1][j+1])\n\t\t\t\tadd(nxt(p[i][j]),p[i+1][j+1],1,0);\n\t\t\tif (p[i+1][j])\n\t\t\t\tadd(nxt(p[i][j]),p[i+1][j],1,0);\n\t\t}\n\tfor (int i=1;i<=m;i++)\n\t\tadd(s,p[1][i],1,0);\n\tfor (int i=1;i<=m+n-1;i++)\n\t\tadd(nxt(p[n][i]),t,1,0);\n\tE_K(s,t);\n\tprintf(\"%d\\n\",-mcost);\n}\nvoid P2()\n{\n\tInit();\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tif (p[i+1][j+1])\n\t\t\t\tadd(p[i][j],p[i+1][j+1],1,-Map[i][j]);\n\t\t\tif (p[i+1][j])\n\t\t\t\tadd(p[i][j],p[i+1][j],1,-Map[i][j]);\n\t\t}\n\tfor (int i=1;i<=m;i++)\n\t\tadd(s,p[1][i],1,0);\n\tfor (int i=1;i<=m+n-1;i++)\n\t\tadd(p[n][i],t,INF,-Map[n][i]);\n\tE_K(s,t);\n\tprintf(\"%d\\n\",-mcost);\n}\nvoid P3()\n{\n\tInit();\n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=1;j<=m+i-1;j++)\n\t\t{\n\t\t\tif (p[i+1][j+1])\n\t\t\t\tadd(p[i][j],p[i+1][j+1],INF,-Map[i][j]);\n\t\t\tif (p[i+1][j])\n\t\t\t\tadd(p[i][j],p[i+1][j],INF,-Map[i][j]);\n\t\t}\n\tfor (int i=1;i<=m;i++)\n\t\tadd(s,p[1][i],1,0);\n\tfor (int i=1;i<=m+n-1;i++)\n\t\tadd(p[n][i],t,INF,-Map[n][i]);\n\tE_K(s,t);\n\tprintf(\"%d\\n\",-mcost);\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for (int i=1;i<=n;i++)\n    {\n        for (int j=1;j<=m+i-1;j++)\n        {\n        \tscanf(\"%d\",&Map[i][j]);\n        \tp[i][j]=++id;\n        }\n    }\n    P1();\n    P2();\n    P3();\n    return 0;\n} \n```",
        "postTime": 1533021966,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "\u8d39\u7528\u6d41\u591a\u5408\u4e00....\n\nemm....~~\u8fd8\u597d\u6ca1\u8ba9\u8f93\u51fa\u8def\u5f84\u5462HHH~~\n\npart.1\n\u4e0d\u77e5\u9053\u6ce5\u840c\u505a\u6ca1\u505a\u8fc7\u86af\u8693\uff0c\u5b8c\u5168\u4e00\u6837\u5462\n\n\u7f16\u4e2a\u53f7\uff0c\u62c6\u4e2a\u70b9\uff0c\u5047\u8bbe\u5206\u4e3aa\u3001b\u90e8\u5427\n\n\u7136\u540e\u5efa\u7acbs\uff0ct1\uff0ct2\n\ns-->(1,i)[a]    <1,0>\n\n\uff08s\u5411\u7b2c\u4e00\u6392\u7684a\u90e8\u70b9\u5efa\u8fb9,\u5bb9\u91cf\u4e3a1\uff0c\u957f\u5ea6\u4e3a0\uff0c\u4e0b\u540c\uff09\n\n\n```cpp\n(i,j)[b]-->(toi,toj)[a]  <1,a[i][j]>\n(i,j)[a]-->(i,j)[b]<1,0>\n(n,i)[b]-->t1    <1,a[n][i]>\nt1-->t2     <m,0>\n```\n\u6765\u4e00\u53d1\u6700\u5927\u8d39\u7528\u5c31\u884c\u4e86\npart.2\n\u70b9\u53ef\u4ee5\u91cd\u4e86....\n\n\u65b9\u4fbf\u8d77\u89c1~~\u4e3a\u4e86\u7c98\u8d34~~\n\n(i,j)[a]-->(i,j)[b]<inf,0>\n\n\u5c9a\u540e\u554a\uff0c\u5176\u5b9e\u5760\u540e\u4e00\u5c42\u6bcf\u4e2a\u70b9\u4e5f\u4e0d\u53ea\u80fd\u7528\u4e00\u6b21\u4e86\n\n\u6240\u4ee5\uff1a\n\n(n,i)-->t1    <inf,a[n][i]>\n\n\u5657\u5657\u4e2a\u5657\n\n\u8fd9\u6837\u5c31\u884c\u4e86\n\n\u5176\u5b9e\u4e5f\u5c31\u662f\u4e0d\u7528\u62c6\u70b9\u4e86\n\npart.3\n\u5c31\u662f\u4e0d\u80fd\u5b8c\u5168\u91cd\u590d\u522b\u7684\u5168\u80fd\u5e72\u4e86\u662f\u5427...\n\n\u7136\u540e\u4f60\u53d1\u73b0\u8981\u641em\u6761\n\n\u5f00\u5934\u662f\u786e\u5b9a\u7684\n\n\u90a3\u4e48\u5efa\u7acbs\uff0ct1\uff0ct2\n\ns-->(1,i)[a]    <1,0>\n\n\u522b\u7684\u5bb9\u91cf\u5168\u6362\u6210inf\u5427\n\n\u5c31\u9171\n\u4ee3\u7801\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n```cpp\n#include<iostream>\n#include<cstring>\n#define inf 1<<30\n#include<cstdio>\n#define M 300000\n#include<queue>\n#define N 500\nusing namespace std;\nint s,t1,t,n,m,ma[110][110],id[110][110],TT;\nint head[N],from[M],to[M],Next[M],len[M],cup[M],e=1;\nvoid buid(int u,int v,int c,int l)\n{\n    l*=-1;\n    Next[++e]=head[u];head[u]=e;to[e]=v;\n    len[e]=l;cup[e]=c;from[e]=u;\n    Next[++e]=head[v];head[v]=e;to[e]=u;\n    len[e]=-l;cup[e]=0;from[e]=v;\n}\nint dis[N],init[N],pre[N],mflow,mcost;\nqueue<int> q;\nbool bfs()\n{\n    for(int i=s;i<=t;++i) dis[i]=inf;\n    dis[s]=0;init[s]=1;q.push(s);\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();init[now]=0;\n        for(int i=head[now];i;i=Next[i])\n        {\n            if(!cup[i]) continue;\n            int j=to[i];\n            if(dis[j]>dis[now]+len[i])\n            {\n                dis[j]=dis[now]+len[i];\n                pre[j]=i;\n                if(!init[j]) init[j]=1,q.push(j); \n            }\n        }\n    }\n    return dis[t]!=inf;\n}\nvoid doit()\n{\n    int now=t,get=inf;\n    while(now!=s)\n    {\n        get=min(get,cup[pre[now]]);\n        now=from[pre[now]];\n    }\n    mflow+=get;mcost+=get*dis[t];\n    now=t;\n    while(now!=s)\n    {\n        cup[pre[now]]-=get;\n        cup[pre[now]^1]+=get;\n        now=from[pre[now]];\n    }\n}\nvoid max_min()\n{\n    mcost=0;\n    while(bfs()) doit();\n}\nint main()\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m+i-1;++j) id[i][j]=++TT;\n    t1=2*TT+1;t=t1+1;\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m+i-1;++j) scanf(\"%d\",&ma[i][j]);\n    for(int i=1;i<=m;++i) buid(s,id[1][i],1,0);\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m+i-1;++j) buid(id[i][j],id[i][j]+TT,1,0);\n    for(int i=1;i<=n+m-1;++i) buid(id[n][i]+TT,t1,1,ma[n][i]);\n    for(int i=1;i<n;++i)\n    for(int j=1;j<=i+m-1;++j)\n    {\n        for(int y=0;y<=1;++y)\n        {\n            int X=i+1,Y=j+y;\n            buid(id[i][j]+TT,id[X][Y],1,ma[i][j]);\n        }\n    }\n    buid(t1,t,m,0);\n    max_min();\n    printf(\"%d\\n\",-mcost);\n    memset(head,0,sizeof(head));e=1;\n    for(int i=1;i<=m;++i) buid(s,id[1][i],1,0);\n    for(int i=1;i<=n+m-1;++i) buid(id[n][i],t1,inf,ma[n][i]);\n    for(int i=1;i<n;++i)\n    for(int j=1;j<=m+i-1;++j)\n    {\n        for(int y=0;y<=1;++y)\n        {\n            int X=i+1,Y=j+y;\n            buid(id[i][j],id[X][Y],1,ma[i][j]);\n        }\n    }\n    buid(t1,t,m,0);\n    max_min();\n    printf(\"%d\\n\",-mcost);\n    memset(head,0,sizeof(head));e=1;\n    for(int i=1;i<=m;++i) buid(s,id[1][i],1,0);\n    for(int i=1;i<=n+m-1;++i) buid(id[n][i],t1,inf,ma[n][i]);\n    for(int i=1;i<n;++i)\n    for(int j=1;j<=m+i-1;++j)\n    {\n        for(int y=0;y<=1;++y)\n        {\n            int X=i+1,Y=j+y;\n            buid(id[i][j],id[X][Y],inf,ma[i][j]);\n        }\n    }\n    buid(t1,t,m,0);\n    max_min();\n    printf(\"%d\\n\",-mcost);\n    return 0;\n}\n```",
        "postTime": 1514382193,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\n\n**\u592a~~\u6bd2\u7624~~\u597d\u4e86\uff01**\n\n![_9PPSU6__N@GX_B_`RY4LNY.png](https://i.loli.net/2019/09/07/yIL3gp9iQ5FMYC8.png)\n\n\u4e0a\u9762\u662f\u6211\u7684\u63d0\u4ea4\u8bb0\u5f55\n\n\u6240\u4ee5\u6211\u8ba4\u4e3a\u6211\u6709\u5fc5\u8981\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u6765~~\u796d\u5960~~\u63d0\u9192\u548c\u6211\u4e00\u6837\u88ab\u524d\u4e24\u4e2a\u70b9\u5361\u6389\u7684\u4eba\n\n\u663e\u800c\u6613\u89c1\uff0c\u8fd9\u662f\u4e00\u9053\u5173\u4e8e\u6700\u5927\u8d39\u7528\u6d41\u7684\u9898\uff08~~\u8bdd\u8bf4\u6211\u8fd9\u51e0\u5929\u89c1\u4ec0\u4e48\u90fd\u50cf\u662f\u7f51\u7edc\u6d41~~\uff09\n\n\u6709\u4e09\u4e2a\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u663e\u800c\u610f\u89c1\u6211\u4eec\u8981\u5efa\u4e09\u6b21\u56fe\uff0c\u8dd1\u4e09\u6b21Dinic\uff08\u6211\u662f\u849f\u84bb\u53ea\u4f1a\u8fd9\u4e2a\uff09\n\n\u90a3\u4e48\u6309\u7167\u5e38\u7406\uff0c\u7b2c\u4e00\u4e2a\u95ee\u9898\u80af\u5b9a\u662f\u6700\u96be\u7684\uff08\u4f60\u4ece\u54ea\u91cc\u542c\u6765\u7684\u8fd9\u4e2a\u5e38\u7406\uff1f\uff09\n\n\u7b2c\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u65e2\u4e0d\u53ef\u4ee5\u8d70\u76f8\u540c\u7684\u8fb9\uff0c\u4e5f\u4e0d\u53ef\u4ee5\u8d70\u76f8\u540c\u7684\u70b9\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\u8bbe\u7f6e\u4e3a1\uff0c\u5373\u53ef\u89e3\u51b3\n\n\u800c\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u5c31\u8981\u601d\u8003\u4e00\u4e0b\uff08~~\u770b\u4e00\u4e0b\u9898\u89e3~~\uff09\u4e86\n\n\u65e2\u7136\u6bcf\u4e2a\u70b9\u53ea\u80fd\u901a\u8fc7\u4e00\u6b21\uff0c\u6240\u4ee5\u8bf4\u901a\u8fc7\u6bcf\u4e2a\u70b9\u7684\u6d41\u91cf\u6700\u591a\u662f1\n\n\u4f46\u662f\u4ed6\u6709\u4e24\u6761\u5411\u4e0b\u7684\u8fb9\uff0c\u6211\u4eec\u603b\u4e0d\u80fd\u8bb0\u5f55\u4e00\u4e2a\u70b9\u4e24\u6761\u8fb9\u5206\u522b\u957f\u4ec0\u4e48\u6837\u5427\uff1f\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf\u8fdb\u884c\u9650\u5236\uff0c\u8fd9\u91cc\u8fdb\u884c\u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u505a\u6cd5\uff0c\u628a\u4e00\u4e2a\u70b9\u62c6\u5206\u6210\u4e24\u4e2a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u6d41\u91cf\u8bbe\u7f6e\u4e3a\u4e00\uff0c\u8d39\u7528\u8bbe\u7f6e\u4e3a\u672c\u8eab\u7684\u6570\u503c\uff0c\u7136\u540e\u5c31\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u4e86\u3002\n\n\u5efa\u8fb9\u8fc7\u7a0b\uff1a\n```cpp\n\tfor(long long i=1;i<=k;i++){\n\t\tjian(S,m[1][i],1,0);\n\t}\n\tfor(long long i=1;i<n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tjian(m[i][j],m[i][j]+tot+1,1,a[i][j]);\n\t\t\tjian(m[i][j]+tot+1,m[i+1][j],1,0);\n\t\t\tjian(m[i][j]+tot+1,m[i+1][j+1],1,0);\n\t\t}\n\t}\n\tfor(long long j=1;j<=k+n-1;j++){\n\t\tjian(m[n][j],m[n][j]+tot+1,1,a[n][j]);\n\t\tjian(m[n][j]+tot+1,T,1,0);\n\t}\n```\n\u63a5\u4e0b\u6765\u601d\u8003\u4e0b\u4e00\u4e2a\u5b50\u95ee\u9898\n\n\u70b9\u53ef\u4ee5\u91cd\u590d\u7528\uff0c\u8fb9\u53ea\u80fd\u7528\u4e00\u6b21\n\n\u90a3\u8fd9\u4e2a\u4e0d\u5c31\u662f\u7b2c\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u9609\u5272\u7248\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u9700\u8981\u62c6\u70b9\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u5904\u5411\u4e0b\u9762\u4e24\u4e2a\u70b9\u8fde\u4e24\u6761\u6d41\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a\u4ed6\u81ea\u8eab\u7684\u8fb9\u5c31\u597d\u4e86\u561b\uff01\n\n\u5efa\u8fb9\u8fc7\u7a0b\uff1a\n```cpp\n\tfor(long long i=1;i<=k;i++){\n\t\tjian(S,m[1][i],1,0);\n\t}\n\tfor(long long i=1;i<n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tjian(m[i][j],m[i+1][j],1,a[i][j]);\n\t\t\tjian(m[i][j],m[i+1][j+1],1,a[i][j]);\n\t\t}\n\t}\n\tfor(long long j=1;j<=k+n-1;j++){\n\t\tjian(m[n][j],T,inf,a[n][j]);\n\t}\n```\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5730\u65b9\u9700\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53ef\u4ee5\u91cd\u590d\u8fdb\u5165\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u5e95\u90e8\u7684\u70b9\u5230\u603b\u6c47\u70b9\u7684\u8fb9\u6d41\u91cf\u8bbe\u4e3a\u65e0\u9650\u5927\n\n\u7b2c\u4e09\u4e2a\u5b50\u95ee\u9898\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\u8bbe\u4e3a\u65e0\u9650\u5373\u53ef\u8f7b\u677e\u89e3\u51b3\n\n```cpp\n\tfor(long long i=1;i<=k;i++){\n\t\tjian(S,m[1][i],1,0);\n\t}\n\tfor(long long i=1;i<n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tjian(m[i][j],m[i+1][j],inf,a[i][j]);\n\t\t\tjian(m[i][j],m[i+1][j+1],inf,a[i][j]);\n\t\t}\n\t}\n\tfor(long long j=1;j<=k+n-1;j++){\n\t\tjian(m[n][j],T,inf,a[n][j]);\n\t}\n```\n\u5230\u8fd9\u91cc\u5efa\u8fb9\u8fc7\u7a0b\u5c31\u5df2\u7ecf\u7ed3\u675f\u5566\uff0c\u4f46\u662f\u6211\u4eec\u8981\u6ce8\u610f\u5728\u6bcf\u6b21\u5efa\u8fb9\u4e4b\u524d\u9700\u8981\u628a\u4e4b\u524d\u5efa\u7684\u8fb9\u7ed9\u6e05\u7a7a\uff0c\u9632\u6b62\u53d1\u751f\u67d0\u4e9b\u4e0d\u77e5\u660e\u7684\u9519\u8bef\n\n\u8fd8\u6709\u975e\u5e38\u91cd\u8981\u7684\u4e00\u70b9\uff01\uff01\uff01\n\n\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u591f\uff01\uff01\uff01\n\n\u8fd9\u4e2a\u9898\u6700\u591a\u670920*\uff0820+20\uff09*2=1600\u4e2a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5f00\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u591f\uff01\n\n\u5426\u5219\u5c31\u4f1a\u51fa\u73b0\u548c\u6211\u4e00\u6837\uff0c\u540e\u9762\u7684\u70b9\u80fd\u8fc7\uff0cLOJ\u80fd\u8fc7\uff0c\u4f46\u662f\u524d\u4e24\u4e2a\u70b9\u600e\u4e48\u4e5f\u8fc7\u4e0d\u4e86\u7684\u60c5\u51b5\uff01\n\n\u671b\u540e\u4eba\u4e0d\u8981\u518d\u72af\u548c\u6211\u8fd9\u6837\u7684\u9519\u8befXD\n\n\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#define maxn 1000\n#define maxm 100000\n#define inf 22222222\nusing namespace std;\nstruct Edge{\n\tlong long to,next,f,v;\n}e[maxm];\nlong long ecnt=1,head[maxm];\nvoid adde(long long x,long long y,long long f,long long v){\n\te[++ecnt].to=y;\n\te[ecnt].f=f;\n\te[ecnt].v=v;\n\te[ecnt].next=head[x];\n\thead[x]=ecnt;\n}\nvoid jian(long long x,long long y,long long f,long long v){\n\tadde(x,y,f,v);\n\tadde(y,x,0,-v);\n}\nlong long n,k;\nlong long a[maxn][maxn];\nlong long m[maxn][maxn],tot=3;\nlong long dis[maxm],pre[maxm],last[maxm],flow[maxm];\nlong long vis[maxm];\nlong long S,T;\nvoid clean(){\n\tmemset(e,0,sizeof(e));\n\tecnt=1;\n\tmemset(head,0,sizeof(head));\n}\nbool spfa(){\n\tmemset(dis,128,sizeof(dis));\n\tmemset(flow,0x3f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tqueue<long long>q;\n\tq.push(S);\n\tvis[S]=1;\n\tdis[S]=0;\n\tpre[T]=-1;\n\twhile(!q.empty()){\n\t\tlong long now=q.front();\n\t\tq.pop();\n\t\tvis[now]=0;\n\t\tfor(long long i=head[now];i;i=e[i].next){\n\t\t\tlong long to=e[i].to;\n\t\t\tif(e[i].f>0&&dis[to]<dis[now]+e[i].v){\n\t\t\t\tdis[to]=dis[now]+e[i].v;\n\t\t\t\tpre[to]=now;\n\t\t\t\tlast[to]=i;\n\t\t\t\tflow[to]=min(flow[now],e[i].f);\n\t\t\t\tif(!vis[to]){\n\t\t\t\t\tvis[to]=1;\n\t\t\t\t\tq.push(to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn pre[T]!=-1;\n}\nlong long Dinic(){\n\tlong long maxcost=0;\n\twhile(spfa()){\n\t\tlong long now=T;\n\t\tmaxcost+=flow[T]*dis[T];\n\t\twhile(now!=S){\n\t\t\te[last[now]].f-=flow[T];\n\t\t\te[last[now]^1].f+=flow[T];\n\t\t\tnow=pre[now];\n\t\t}\n\t}\n\treturn maxcost;\n}\nint main(){\n\tscanf(\"%lld %lld\",&k,&n);\n\tfor(long long i=1;i<=n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tscanf(\"%lld\",&a[i][j]);\n\t\t\tm[i][j]=++tot;\n\t\t}\n\t}\n\tS=1;\n\tT=2;\n\ttot++;\n\tfor(long long i=1;i<=k;i++){\n\t\tjian(S,m[1][i],1,0);\n\t}\n\tfor(long long i=1;i<n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tjian(m[i][j],m[i][j]+tot+1,1,a[i][j]);\n\t\t\tjian(m[i][j]+tot+1,m[i+1][j],1,0);\n\t\t\tjian(m[i][j]+tot+1,m[i+1][j+1],1,0);\n\t\t}\n\t}\n\tfor(long long j=1;j<=k+n-1;j++){\n\t\tjian(m[n][j],m[n][j]+tot+1,1,a[n][j]);\n\t\tjian(m[n][j]+tot+1,T,1,0);\n\t}\n\tprintf(\"%lld\\n\",Dinic());\n\tclean();\n\tfor(long long i=1;i<=k;i++){\n\t\tjian(S,m[1][i],1,0);\n\t}\n\tfor(long long i=1;i<n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tjian(m[i][j],m[i+1][j],1,a[i][j]);\n\t\t\tjian(m[i][j],m[i+1][j+1],1,a[i][j]);\n\t\t}\n\t}\n\tfor(long long j=1;j<=k+n-1;j++){\n\t\tjian(m[n][j],T,inf,a[n][j]);\n\t}\n\tprintf(\"%lld\\n\",Dinic());\n\tclean();\n\tfor(long long i=1;i<=k;i++){\n\t\tjian(S,m[1][i],1,0);\n\t}\n\tfor(long long i=1;i<n;i++){\n\t\tfor(long long j=1;j<=k+i-1;j++){\n\t\t\tjian(m[i][j],m[i+1][j],inf,a[i][j]);\n\t\t\tjian(m[i][j],m[i+1][j+1],inf,a[i][j]);\n\t\t}\n\t}\n\tfor(long long j=1;j<=k+n-1;j++){\n\t\tjian(m[n][j],T,inf,a[n][j]);\n\t}\n\tprintf(\"%lld\\n\",Dinic());\n\treturn 0;\n}\n```\nPS\uff1a\u70b9\u4e2a\u8d5e\u518d\u8d70\u5427QwQ\uff01",
        "postTime": 1567834581,
        "uid": 143418,
        "name": "\u5b51\u5f67",
        "ccfLevel": 0,
        "title": "P4013 \u6570\u5b57\u68af\u5f62\u95ee\u9898 \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u7531 $n$ \u884c\u6570\u5b57\u7ec4\u6210\u7684\u6570\u5b57\u68af\u5f62\u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n![img](https://cdn.luogu.com.cn/upload/pic/12216.png) \n\n\u68af\u5f62\u7684\u7b2c\u4e00\u884c\u6709 $m$ \u4e2a\u6570\u5b57\u3002\u4ece\u68af\u5f62\u7684\u9876\u90e8\u7684 $m$ \u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u5728\u6bcf\u4e2a\u6570\u5b57\u5904\u53ef\u4ee5\u6cbf\u5de6\u4e0b\u6216\u53f3\u4e0b\u65b9\u5411\u79fb\u52a8\uff0c\u5f62\u6210\u4e00\u6761\u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684\u8def\u5f84\u3002\n\n\u5206\u522b\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a\n\n1. \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4\uff1b\n2. \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u4ec5\u5728\u6570\u5b57\u7ed3\u70b9\u5904\u76f8\u4ea4\uff1b\n3. \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u5141\u8bb8\u5728\u6570\u5b57\u7ed3\u70b9\u76f8\u4ea4\u6216\u8fb9\u76f8\u4ea4\u3002\n\n## Limitation\n\n$1~\\leq~n,~m~\\leq~20$\n\n## Solution\n\n\u89e3\u91ca\u4e00\u4e0b\u9898\u610f\uff0c\u8fb9\u4e0d\u76f8\u4ea4\u6307\u7684\u662f\u4e0d\u80fd\u6709\u4e24\u6761\u8def\u5f84\u540c\u65f6\u7ecf\u8fc7 $u \\rightarrow~v$ \u7684\u8def\u5f84\u3002\n\n\u5148\u8003\u8651\u9650\u5236 $3$\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u9650\u5236\u7684\u60c5\u51b5\uff0c\u505a\u6cd5\u975e\u5e38\u663e\u7136\uff1a\n\n> \u4e0a\u4e00\u5c42\u5411\u4e0b\u4e00\u5c42\u7684\u6570\u5b57\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u65e0\u7a77\u4ee3\u8868\u8fd9\u6761\u8fb9\u53ef\u4ee5\u8d70\u65e0\u7a77\u6b21\uff0c\u82b1\u8d39\u4e3a $0$\uff1b\n>\n> \u6bcf\u4e2a\u6570\u5b57\u90fd\u62c6\u4e00\u4e0b\u70b9\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u8fb9\u5bb9\u91cf\u4e3a\u65e0\u7a77\uff0c\u4ee3\u8868\u53ef\u4ee5\u9009\u8fd9\u4e2a\u70b9\u65e0\u6570\u6b21\uff0c\u82b1\u8d39\u4e3a\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u4ee3\u8868\u7ecf\u8fc7\u4ed6\u4ed8\u51fa\u7684\u4ee3\u4ef7\uff1b\n>\n> $s$ \u5411\u7b2c\u4e00\u5c42\u8fde\u5bb9\u91cf\u4e3a $1$ \u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff0c\u6700\u540e\u4e00\u5c42\u5411 $t$ \u8fde\u5bb9\u91cf\u4e3a\u65e0\u7a77\u8d39\u7528\u4e3a $0$ \u7684\u8fb9\uff0c\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u8003\u8651\u9650\u5236 $2$\uff0c\u4e00\u6761\u8fb9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\uff0c\u4e8e\u662f\u5c06\u8fb9\u7684\u5bb9\u91cf\u7f6e\u4e3a $1$ \u5373\u53ef\u3002\n\n\u8003\u8651\u9650\u5236 $1$\uff0c\u540c\u7406\u5c06\u70b9\u7684\u5bb9\u91cf\u7f6e\u6210 $1$ \u5373\u53ef\u3002\n\n\u7136\u540e\u5982\u679c\u4f60Wa\u524d\u4e24\u4e2a\u70b9\u9700\u8981\u6ce8\u610f\u68af\u5f62\u7684\u6700\u4e0b\u9762\u4f1a\u6709 $n + m$ \u4e2a\u70b9\u800c\u4e0d\u662f $m$ \u4e2a\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n  const int L = 1000000;\n  char buf[L], *front=buf, *end=buf;\n  char GetChar() {\n    if (front == end) {\n      end = buf + fread(front = buf, 1, L, stdin);\n      if (front == end) return -1;\n    }\n    return *(front++);\n  }\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n  char ch = IPT::GetChar(), lst = ' ';\n  while ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n  while ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n  if (lst == '-') x = -x;\n}\n\nnamespace OPT {\n  char buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n  if (x < 0) {x = -x, putchar('-');}\n  int top=0;\n  do {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n  while (top) putchar(OPT::buf[top--]);\n  if (pt) putchar(aft);\n}\n\nconst int maxn = 5010;\nconst int INF = 0x3f3f3f3f;\n\nstruct Edge {\n  int u, v, flow, fee;\n  Edge *nxt, *bk;\n  Edge(const int _u, const int _v, const int _flow, const int _fee, Edge* &h)\n      : u(_u), v(_v), flow(_flow), fee(_fee), nxt(h) {\n    h = this;\n  }\n\n  ~Edge() {\n    if (this->nxt) delete this->nxt;\n  }\n};\nEdge *hd[maxn], *pre[maxn];\ninline void cont(const int _u, const int _v, const int _flow, const int _fee) {\n  auto u = new Edge(_u, _v, _flow, _fee, hd[_u]), v = new Edge(_v, _u, 0, -_fee, hd[_v]);\n  (u->bk = v)->bk = u;\n}\n\nint n, m, s, t, ans;\nint MU[maxn][maxn], id[maxn][maxn][2], dist[maxn], canag[maxn];\nbool inq[maxn];\nstd::queue<int>Q;\n\nvoid EK();\nbool spfa();\nvoid argu();\nvoid setedge(int x);\nvoid setpoint(int x);\n\nint main() {\n  freopen(\"1.in\", \"r\", stdin);\n  qr(m); qr(n);\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1, k = m + i; j < k; ++j) {\n      id[i][j][0] = ++t; id[i][j][1] = ++t;\n      qr(MU[i][j]);\n    }\n  }\n  s = ++t; ++t;\n  setpoint(1);\n  setedge(1);\n  EK();\n  setpoint(INF);\n  setedge(1);\n  EK();\n  setpoint(INF);\n  setedge(INF);\n  EK();\n  return 0;\n}\n\nvoid setpoint(int x) {\n  for (int i = 1; i <= t; ++i) {\n    delete hd[i];\n    hd[i] = NULL;\n  }\n  for (int i = 1; i <= m; ++i) {\n    cont(s, id[1][i][0], 1, 0);\n  }\n  for (int i = 1; i <= n; ++i) {\n    for (int j = 1, k = i + m - 1; j <= k; ++j) {\n      cont(id[i][j][0], id[i][j][1], x, MU[i][j]);\n    }\n  }\n}\n\nvoid setedge(int x) {\n  for (int i = 1; i < n; ++i) {\n    int di = i + 1;\n    for (int j = 1, k = i + m - 1; j <= k; ++j) {\n      cont(id[i][j][1], id[di][j][0], x, 0);\n      cont(id[i][j][1], id[di][j + 1][0], x, 0);\n    }\n  }\n  for (int j = 1, k = m + n - 1; j <= k; ++j) cont(id[n][j][1], t, INF, 0);\n}\n\nvoid EK() {\n  ans = 0;\n  while (spfa()) argu();\n  qw(ans, '\\n', true);\n}\n\nbool spfa() {\n  memset(canag, 0, sizeof canag);\n  for (int i = 1; i <= t; ++i) dist[i] = -INF;\n  dist[s] = 0; Q.push(s); canag[s] = INF;\n  while (!Q.empty()) {\n    int u = Q.front(); Q.pop(); inq[u] = false;\n    for (auto e = hd[u]; e; e = e->nxt) if (e->flow > 0) {\n      int v = e->v;\n      if (dist[v] < (dist[u] + e->fee)) {\n        dist[v] = dist[u] + e->fee;\n        if (!inq[v]) Q.push(v);\n        inq[v] = true;\n        canag[v] = std::min(canag[u], e->flow);\n        pre[v] = e;\n      }\n    }\n  }\n  return dist[t] != -INF;\n}\n\nvoid argu() {\n  ans += canag[t] * dist[t];\n  for (auto e = pre[t]; e; e = pre[e->u]) {\n    e->flow -= canag[t]; e->bk->flow += canag[t];\n  }\n}\n```\n\n",
        "postTime": 1553003396,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "# P4013 \u6570\u5b57\u68af\u5f62\u95ee\u9898\n[$My \\ Blog$](https://chen-jia-liang.gitee.io/blog/2020/07/16/%E9%A2%98%E8%A7%A3-P4013-%E3%80%90%E6%95%B0%E5%AD%97%E6%A2%AF%E5%BD%A2%E9%97%AE%E9%A2%98%E3%80%91/)\n## \u9898\u610f\n\u6709\u4e00\u4e2a\u6570\u5b57\u68af\u5f62\uff0c\u4e00\u5171$n$\u884c\uff0c\u7b2c\u4e00\u884c\u6709$m$\u4e2a\uff0c\u6bcf\u4e00\u884c\u6bd4\u4e0a\u4e00\u884c\u591a\u4e00\u4e2a\uff0c\u6bcf\u4e2a\u6570\u53ef\u4ee5\u5230**\u5de6\u4e0b\u6216\u53f3\u4e0b**\u7684\u6570\u5b57\uff0c\u4ece\u9876\u5c42\u51fa\u53d1\uff0c\u7ed9\u51fa\u4ee5\u4e0b\u9650\u5236\uff1a\n\n1. \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4\uff1b\n\n2. \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u4ec5\u5728\u6570\u5b57\u7ed3\u70b9\u5904\u76f8\u4ea4\uff1b\n\n3. \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684 $m$ \u6761\u8def\u5f84\u5141\u8bb8\u5728\u6570\u5b57\u7ed3\u70b9\u76f8\u4ea4\u6216\u8fb9\u76f8\u4ea4\u3002\n\n\u8bf7\u6c42\u51fa\u4e09\u79cd\u9650\u5236\u4e0b\u7684**\u6700\u5927\u6570\u5b57\u603b\u548c**\n## \u9898\u89e3\n\n![ZZY AK IOI](https://cdn.luogu.com.cn/upload/image_hosting/8a7fmo0q.png)\n### \u5b50\u95ee\u9898$1$\n\u6211\u4eec\u5148\u6765\u770b\u95ee\u9898$ 1$\uff0c\u7531\u4e8e**\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4**\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c**\u6bcf\u6761\u8def\u5f84\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6bcf\u4e2a\u70b9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21**\u3002\u8fd9\u50cf\u4ec0\u4e48\uff1f\u8d39\u7528\u6d41\u4e2d\u6d41\u91cf\u7684\u9650\u5236\u5440\uff01\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u8fb9\u7684\u6d41\u91cf\u8bbe\u7f6e\u6210\u4e00\uff0c\u6240\u6709\u7684\u70b9\u90fd\u62c6\u6210\u4e24\u4e2a**\u5165\u70b9**\u548c**\u51fa\u70b9**\uff0c\u5165\u70b9\u548c\u51fa\u70b9\u6d41\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a\u6570\u5b57\u3002\u5982\u679c\u6709\u6d41\u6d41\u8fc7\uff0c\u5c31\u610f\u5473\u7740\u53d6\u8fd9\u4e2a\u6570\uff0c\u5e76\u52a0\u4e0a\u5176\u8d39\u7528\u3002\n\n\u7136\u540e\u6211\u4eec\u5efa\u4e00\u4e2a**\u8d85\u7ea7\u6e90\u70b9**\uff0c\u4e0e\u68af\u5f62\u9876\u90e8\u7684\u70b9\u76f8\u8fde\uff0c\u68af\u5f62\u5e95\u90e8\u7684\u70b9\u4e0e**\u8d85\u7ea7\u6c47\u70b9**\u76f8\u8fde\uff0c\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u65f6\uff0c\u4fdd\u8bc1\u4e86\u6d41\u91cf\u4e00\u5b9a\u662f$m$\u7684\u60c5\u51b5\u4e0b\uff0c\u548c\u6700\u5927\u3002\n\n### \u5b50\u95ee\u9898$2$\n\u6765\u601d\u8003\u95ee\u9898$ 2$\u4e0e$ 1$\u7684\u533a\u522b\u3002\u7531\u4e8e**\u8def\u5f84\u4ec5\u5728\u6570\u5b57\u7ed3\u70b9\u5904\u76f8\u4ea4**\uff0c\u4e5f\u5c31\u7b49\u4ef7\u4e8e\u7740**\u6bcf\u4e2a\u7ed3\u70b9\u65e0\u8bbf\u95ee\u6b21\u6570\u7684\u9650\u5236**\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u95ee\u9898$ 1$\u4e2d\u62c6\u70b9\u65f6\u7684\u6d41\u91cf\u6539\u6210$+\\infty$\u5c31\u884c\u4e86\n\n~~\u5176\u5b9e\u5b8c\u5168\u53ef\u4ee5\u4e0d\u62c6\u70b9~~\n### \u5b50\u95ee\u9898$3$\n\u76f8\u6bd4\u95ee\u9898$2$\uff0c$3$\u7684\u9650\u5236\u5c31\u66f4\u5c11\u4e86\uff0c\u628a\u8fb9\u4e0a\u7684\u6d41\u91cf\u4e5f\u5168\u90e8\u6539\u6210$+\\infty$\u5c31\u884c\u4e86\n\n>\n```plain\ntip\n\u8dd1\u8d39\u7528\u6d41\u65f6\u53ef\u4ee5\u5957\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7684\u6a21\u677f\n\u628a\u6240\u6709\u7684\u8d39\u7528\u4e58\u4ee5-1\u5c31\u884c\u4e86\n```\n\n## \u4ee3\u7801\n```cpp\n#pragma optimize(2)\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){\n\tx=0;char c=getchar();bool f=false;\n\tfor(;!isdigit(c);c=getchar())f!=c=='-';\n\tfor(;isdigit(c);c=getchar())x=x*10+c-'0';\n\tif(f)x=-x;\n}\ntemplate<typename T ,typename ...Arg>\ninline void read(T &x,Arg &...args){\n\tread(x);read(args...);\n}\ntemplate<typename T>\ninline void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+'0');\n}\nconst int maxn=100005;\nconst int maxe=100005;\nstruct Graph{\n\tint s,t;\n\tint dis[maxn],pre[maxn],lste[maxn],flow[maxn];\n\tbool inq[maxn];\n\tstruct node{\n\t\tint v,w,cost,nxt;\n\t\tnode(int _v=0,int _w=0,int _c=0,int _n=0){v=_v,w=_w,cost=_c,nxt=_n;}\n\t}e[maxe];\n\tint tot,head[maxn];\n\tvoid init(int _s,int _t){\n\t\tmemset(head,0,sizeof head);\n\t\ttot=1;s=_s,t=_t;\n\t}\n\tinline void add(int u,int v,int w,int c){\n\t\te[++tot]=node(v,w,c,head[u]);head[u]=tot;\n\t\te[++tot]=node(u,0,-c,head[v]);head[v]=tot;\n\t}\n\tbool spfa(){\n\t\tqueue<int>q;\n\t\tmemset(dis,63,sizeof dis);\n\t\tmemset(flow,63,sizeof flow);\n\t\tmemset(inq,0,sizeof inq);\n\t\tdis[s]=0,pre[t]=-1;q.push(s);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();q.pop();inq[u]=0;\n\t\t\t#define v e[i].v\n\t\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\t\tif(e[i].w>0&&dis[v]>dis[u]+e[i].cost){\n\t\t\t\t\tdis[v]=dis[u]+e[i].cost;\n\t\t\t\t\tpre[v]=u,lste[v]=i;//lste \u8868\u793a\u9876\u70b9v\u662f\u7531\u54ea\u6761\u8fb9\u8fc7\u6765\u7684\n\t\t\t\t\tflow[v]=min(flow[u],e[i].w);\n\t\t\t\t\tif(!inq[v])inq[v]=1,q.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t\t#undef v\n\t\t}\n\t\treturn pre[t]!=-1;\n\t}\n\tpair<int,int> mcmf(){\n\t\tint mincost=0,maxflow=0;\n\t\twhile(spfa()){\n\t\t\tint u=t;\n\t\t\tmaxflow+=flow[t],mincost+=flow[t]*dis[t];\n\t\t\twhile(u!=s){\n\t\t\t\tint E=lste[u];\n\t\t\t\te[E].w-=flow[t],e[E^1].w+=flow[t];\n\t\t\t\tu=pre[u];\n\t\t\t}\n\t\t}\n\t\treturn make_pair(mincost,maxflow);\n\t}\n}G;\nint m,n,cnt=0;\nint id[1000][1000];\nint a[1000][1000];\nsigned main(){\n\tread(m,n);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tid[i][j]=++cnt;\n\t\t\tread(a[i][j]);\n\t\t}\n\tG.init(0,cnt*2+1);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tG.add(id[i][j],id[i][j]+cnt,1,-a[i][j]);\n\t\t\tif(i!=n)G.add(id[i][j]+cnt,id[i+1][j],1,0),\n\t\t\t        G.add(id[i][j]+cnt,id[i+1][j+1],1,0);\n\t\t\telse G.add(id[i][j]+cnt,G.t,1,0);\n\t\t}\n\tfor(int i=1;i<=m;i++)\n\t\tG.add(G.s,id[1][i],1,0);\n\twrite(-G.mcmf().first);putchar('\\n');\n\t\n\t\n\tG.init(0,cnt*2+1);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tG.add(id[i][j],id[i][j]+cnt,1e9,-a[i][j]);\n\t\t\tif(i!=n)G.add(id[i][j]+cnt,id[i+1][j],1,0),\n\t\t\t        G.add(id[i][j]+cnt,id[i+1][j+1],1,0);\n\t\t\telse G.add(id[i][j]+cnt,G.t,1e9,0);\n\t\t}\n\tfor(int i=1;i<=m;i++)\n\t\tG.add(G.s,id[1][i],1,0);\n\twrite(-G.mcmf().first);putchar('\\n');\n\t\n\tG.init(0,cnt*2+1);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=m+i-1;j++){\n\t\t\tG.add(id[i][j],id[i][j]+cnt,1e9,-a[i][j]);\n\t\t\tif(i!=n)G.add(id[i][j]+cnt,id[i+1][j],1e9,0),\n\t\t\t        G.add(id[i][j]+cnt,id[i+1][j+1],1e9,0);\n\t\t\telse G.add(id[i][j]+cnt,G.t,1e9,0);\n\t\t}\n\tfor(int i=1;i<=m;i++)\n\t\tG.add(G.s,id[1][i],1,0);\n\twrite(-G.mcmf().first);putchar('\\n');\n}\n```",
        "postTime": 1594883523,
        "uid": 174304,
        "name": "jun\u5934\u5409\u5409",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "\u770b\u5230\u961f\u957f\u53d1\u4e86\u9898\u89e3\uff0c\u840c\u65b0\u6211\u4e5f\u60f3\u5199\u4e00\u7bc7\u3002\n\n\u5bf9\u4e8e\u6b21\u6570\u9650\u5236\u7684\u95ee\u9898\uff0c\u6211\u4eec\u901a\u5e38\u8003\u8651\u62c6\u70b9\uff0c\u7136\u540e~~\u6b64\u9898\u5b8c~~\n\n\u6ca1\u9519\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\n\n\u4e00\u5171\u6709\u4e09\u95ee\uff0c\u90fd\u53ef\u4ee5\u7528\u62c6\u70b9\u7684\u601d\u60f3\uff08~~\u7b2c\u4e09\u95ee\u597d\u50cf\u6ca1\u5fc5\u8981~~\uff09\n\n### \u7b2c\u4e00\u95ee\uff1a\n\n\u6211\u4eec\u628a\u62c6\u70b9\u548c\u539f\u70b9\u8fde\u63a5\u4e00\u6761\u6d41\u91cf\u4e3a1\uff08\u8868\u6b21\u6570\u9650\u5236\uff09\uff0c\u8d39\u7528\u4e3a-\u70b9\u503c\uff08\u8868\u793a\u8d39\u7528\uff09\uff0c\u7136\u540e\u6309\u7167\u9898\u610f\u8fde\u8fb9\u5373\u53ef\u3002\n\n### \u7b2c\u4e8c\u95ee\uff1a\n\n\u5c06\u7b2c\u4e00\u95ee\u62c6\u70b9\u548c\u539f\u70b9\u7684\u8fde\u8fb9\u6d41\u91cf\u6539\u4e3ainf\uff08\u8868\u65e0\u6b21\u6570\u9650\u5236\uff09\u3002\n\u540c\u65f6\u9700\u8981\u6ce8\u610f\u6700\u4e0b\u8fb9\u4e00\u884c\u7684\u70b9\uff0c\u8fde\u63a5\u6c47\u70b9T\u7684\u8fb9\u6d41\u91cf\u4e5f\u8981\u6539\u4e3ainf\u3002\n\n### \u7b2c\u4e09\u95ee\uff1a\n\n\u9664\u4e86\u6e90\u70b9\u5411\u7b2c\u4e00\u884c\u7684\u70b9\u7684\u8fde\u8fb9\u6d41\u91cf\u4e3a1\u5916\uff0c\u5176\u4ed6\u7684\u6d41\u91cf\u4e3ainf\uff08\u8868\u65e0\u6b21\u6570\u9650\u5236\uff09\n\n### \u5b89\u5229\u5947\u8469\u505a\u6cd5\uff1a\n- \u4e00\u4e2a\u975e\u5e38\u8822\u7684\u64cd\u4f5c\uff1a\u5bf9\u4e8e\u4efb\u4f55\u62c6\u70b9\u95ee\u9898\u6211\u4eec\u8003\u8651\u8fd9\u4e48\u4e2a\u505a\u6cd5\uff0c\u76f4\u63a5\u7ed9\u6bcf\u4e2a\u70b9\u6253id\u3002\uff08\u8fd9\u4e2a\u9898\u5927\u5bb6\u90fd\u5728\u7528\uff0c\u4f46\u6709\u7684\u9898\u91c7\u7528\u8ba1\u7b97\uff0c\u5176\u5b9e\u6ca1\u5fc5\u8981\u8ba1\u7b97\uff0c\u7a7a\u95f4\u6362\u65f6\u95f4\u4e0d\u9999\u5417\uff1f\uff09\n- \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c\u7528ls\uff0crs\u6765\u6807\u8bb0\u62c6\u70b9\u3002\n- \u4e0a\u8ff0\u65b9\u6cd5\u7684\u4f18\u8d8a\u6027\uff0c\u6c38\u8fdc\u4e0d\u7528\u8003\u8651\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u6e90\u70b9S\u548c\u6c47\u70b9T\u53ef\u4ee5\u76f4\u63a5\u8868\u793a\u4e3als(0),rs(0)\u3002\uff08\u6b64\u65b9\u6cd5\u4e5f\u9002\u7528\u4e8e\u591a\u4e2a\u62c6\u70b9\u7684\u9898\uff09\n- ~~\u7f51\u7edc\u6d41\u7a7a\u95f4\u778e\u5f00\u5c31\u884c\uff0c\u53ea\u8981\u4e0d\u5c0f\u4e0dMLE~~\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <queue>\nusing namespace std;\n#define I inline\n#define R register\n#define inf 1073742823\n#define FOR(i,begin,end) for(R int i=begin;i<=end;++i)\n#define ROF(i,begin,end) for(R int i=begin;i>=end;--i)\n\nnamespace IO{\n    char buf[1<<21],*pa=buf,*pb=buf;\n    char buffer[1<<21];int p1=-1;const int p2=(1<<21)-1; \n    I char gc(){return pa==pb&&(pb=(pa=buf)+fread(buf,1,1<<21,stdin),pa==pb)?EOF:*pa++;}\n    template<class T>I void read(T &x){\n        x=0;R int y=0;R char ch=gc();\n        for(;!isdigit(ch);ch=gc())y=ch=='-';\n        for(;isdigit(ch);ch=gc())x=x*10+(ch^48);\n        (y)&&(x=-x);return;}\n    I void flush(){fwrite(buffer,1,p1+1,stdout);p1=-1;return;}\n    I void pc(int ch){if(p1==p2)flush();buffer[++p1]=ch;return;}\n    template<class T>I void write(T x){\n        static char buf[20];static int len =-1;\n        if(x>=0){do buf[++len]=(x%10)^48,x/=10;while(x);}\n        else{pc('-');do buf[++len]=(-(x%10))^48,x/=10;while(x);}\n        while(len>=0)pc(buf[len--]);\n        return;}\n}\nusing namespace IO;\n\nconst int maxn = 50000+500;\nconst int maxm = 2000000+2000;\n#define ci const int &\n\nstruct edge{\n    int u,v,f,w,n;\n    I edge(ci uu=0,ci vv=0,ci ff=0,ci ww=0,ci nn=0):u(uu),v(vv),f(ff),w(ww),n(nn){}\n}e[maxm];\nint dis[maxn],vis[maxn],cur[maxn],head[maxn],cnt=1,n,m,s,t;\nint cost=0,flow=0;\nI void add(ci u,ci v,ci f,ci w){\n    e[++cnt]=edge(u,v,f,w,head[u]),head[u]=cnt;\n    e[++cnt]=edge(v,u,0,-w,head[v]),head[v]=cnt;\n}\nI bool spfa(ci s,ci t){\n    memset(vis,0,sizeof vis);\n    memset(dis,0x3f,sizeof dis);\n    deque<int>q;q.push_front(t);\n    vis[t]=1,dis[t]=0;\n    while(!q.empty()){\n        int u=q.front();q.pop_front();\n        for(int ee=head[u],v;v=e[ee].v,ee;ee=e[ee].n)\n            if(e[ee^1].f>0&&dis[v]>dis[u]-e[ee].w){\n                dis[v]=dis[u]-e[ee].w;\n                if(!vis[v])vis[v]=1,(!q.empty()&&dis[q.front()]>dis[v])?\n                q.push_front(v):\n                q.push_back(v);\n            }\n        vis[u]=0;\n    }\n    return dis[s]==0x3f3f3f3f?0:1;\n}\nint dfs(ci u,ci ff){\n    if(u==t)return vis[t]=1,ff;\n    int us=0,f;vis[u]=1;\n    for(int ee=cur[u],v;cur[u]=ee,v=e[ee].v,ee;ee=e[ee].n)\n        if(vis[v]==0&&e[ee].f>0&&dis[u]-e[ee].w==dis[v]){\n            if((f=dfs(v,min(e[ee].f,ff-us)))>0)\n                cost+=f*e[ee].w,e[ee].f-=f,e[ee^1].f+=f,us+=f;\n            if(us==ff)break;\n        }\n    return us;\n}\nI void cost_flow(){\n    while(spfa(s,t)){\n        vis[t]=1;\n        while(vis[t]){\n            memcpy(cur,head,sizeof head);\n            memset(vis,0,sizeof vis);\n            flow+=dfs(s,inf);\n        }\n    }\n}\nI void clear(){\n    memset(head,0,sizeof head);\n    memset(e,0,sizeof e);\n    cnt=1;cost=0,flow=0;\n}\n#define ls(o) (o<<1)\n#define rs(o) (o<<1|1)\nint a[50][50],id[50][50];\nsigned main(){\n    s=ls(0),t=rs(0);\n    int tot=0;\n    read(m),read(n);\n    FOR(i,m,m+n-1)\n        FOR(j,1,i)\n            read(a[i][j]),id[i][j]=++tot;\n    // work 1\n    FOR(i,1,m)\n        add(s,ls(id[m][i]),1,0);\n    FOR(i,m,m+n-1)\n        FOR(j,1,i)\n            add(ls(id[i][j]),rs(id[i][j]),1,-a[i][j]);\n    FOR(i,m,m+n-2)\n        FOR(j,1,i)\n            add(rs(id[i][j]),ls(id[i+1][j]),1,0),\n            add(rs(id[i][j]),ls(id[i+1][j+1]),1,0);\n    FOR(i,1,m+n-1)\n        add(rs(id[m+n-1][i]),t,1,0);\n    cost_flow();\n    write(-cost),pc('\\n');\n    // work 2\n    clear();\n    FOR(i,1,m)\n        add(s,ls(id[m][i]),1,0);\n    FOR(i,m,m+n-1)\n        FOR(j,1,i)\n            add(ls(id[i][j]),rs(id[i][j]),inf,-a[i][j]);\n    FOR(i,m,m+n-2)\n        FOR(j,1,i)\n            add(rs(id[i][j]),ls(id[i+1][j]),1,0),\n            add(rs(id[i][j]),ls(id[i+1][j+1]),1,0);\n    FOR(i,1,m+n-1)\n        add(rs(id[m+n-1][i]),t,1,0);\n    cost_flow();\n    write(-cost),pc('\\n');\n    // work 3\n    clear();\n    FOR(i,1,m)\n        add(s,ls(id[m][i]),1,0);\n    FOR(i,m,m+n-1)\n        FOR(j,1,i)\n            add(ls(id[i][j]),rs(id[i][j]),inf,-a[i][j]);\n    FOR(i,m,m+n-2)\n        FOR(j,1,i)\n            add(rs(id[i][j]),ls(id[i+1][j]),inf,0),\n            add(rs(id[i][j]),ls(id[i+1][j+1]),inf,0);\n    FOR(i,1,m+n-1)\n        add(rs(id[m+n-1][i]),t,inf,0);\n    cost_flow();\n    write(-cost),pc('\\n');\n    flush();\n    return 0;\n}\n```\n",
        "postTime": 1583812485,
        "uid": 158869,
        "name": "\u76e7\u92c5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "### \u9898\u610f\n>\u7ed9\u51fa\u4e00\u4e2a$n$\u5c42\u5206\u522b\u4e3a$m,m+1,\\cdots,m+n-1$\u4e2a\u6570\u7684\u68af\u5f62,\u5206\u522b\u6c42\n\n>- \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684$m$\u6761\u8def\u5f84\u4e92\u4e0d\u76f8\u4ea4\u3002\n- \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684$m$\u6761\u8def\u5f84\u4ec5\u5728\u6570\u5b57\u7ed3\u70b9\u5904\u76f8\u4ea4\u3002\n- \u4ece\u68af\u5f62\u7684\u9876\u81f3\u5e95\u7684$m$\u6761\u8def\u5f84\u5141\u8bb8\u5728\u6570\u5b57\u7ed3\u70b9\u76f8\u4ea4\u6216\u8fb9\u76f8\u4ea4\u3002\n\u8fd9\u4e9b\u8def\u5f84\u7684\u6700\u5927\u548c\n\n### Solution\n\u9996\u5148\u62c6\u70b9$((x,y),(x,y)')$\n\n$(S,(1,i),1,0)$\u4ece\u7b2c\u4e00\u884c\u51fa\u53d1\n\n\u5bf9\u70b9\n\n$((x,y),(x,y)',$\u70b9\u53ef\u4ee5\u88ab\u8d70\u591a\u5c11\u6b21,$v_{x,y})$\n\n\u5bf9\u8fb9\n\n$((x,y)',(x+1,y),$\u8fb9\u53ef\u4ee5\u88ab\u8d70\u591a\u5c11\u6b21$,0)$\n\n$((x,y)',(x+1,y+1),$\u8fb9\u53ef\u4ee5\u88ab\u8d70\u591a\u5c11\u6b21$,0)$\n\n$((n,i)',T,INF,0)$\u7ed3\u675f\n\n\n### Code\n```cpp\ninline void Build(re int x,re int y){\n\tre int i,j;cnt=1,memset(h,0,P<<2);\n\tfor(i=1;i<=m;++i)AddEdge(S,(pos(1,i)<<1)-1,1,0);\n\tfor(i=1;i<n;++i){\n\t\tfor(j=1;j<=i+m-1;++j){\n\t\t\tAddEdge((pos(i,j)<<1)-1,pos(i,j)<<1,x,v[i][j]);\n\t\t\tAddEdge(pos(i,j)<<1,(pos(i+1,j)<<1)-1,y,0);\n\t\t\tAddEdge(pos(i,j)<<1,(pos(i+1,j+1)<<1)-1,y,0);\n\t\t}\n\t}\n\tfor(i=1;i<=n+m-1;++i)AddEdge(pos(n,i)<<1,T,INF,0),AddEdge((pos(n,i)<<1)-1,pos(n,i)<<1,x,v[n][i]);\n}\ninline void Solve(void){\n\tBuild(1,1),Dinic(),printf(\"%d\\n\",ansc);\n\tBuild(INF,1),Dinic(),printf(\"%d\\n\",ansc);\n\tBuild(INF,INF),Dinic(),printf(\"%d\\n\",ansc);\n}\n```",
        "postTime": 1577779225,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    },
    {
        "content": "# \u5514\u59c6\n~~\u8fd9\u5e94\u8be5\u7b97\u4e00\u9053\u6bd4\u8f83\u7b80\u5355\u7684\u8d39\u7528\u6d41\u7684\u9898~~\uff0c\u53ea\u662f\u6709\u51e0\u4e2a\u5751\u9700\u8981\u5927\u5bb6\u6ce8\u610f\uff0c\u4e14\u542c\u6211\u6162\u6162\u8bf4\u6765\n\n------------\n\u9996\u5148\u770b\u9898\uff0c\u6709\u8d39\u7528\uff0c\u8fd8\u6709\u9650\u5236\uff0c\u8fd9\u5e94\u8be5\u5c31\u662f\u8d39\u7528\u6d41\u65e0\u7591\u4e86\uff0c\u63a5\u7740\u6211\u4eec\u8003\u8651\u5982\u4f55\u5efa\u56fe\n- \u9898\u76ee\u8bf4\u8981\u627em\u6761\u8fb9\uff0c\u4f46\u6ce8\u610f\uff0c\u8fd9m\u6761\u8fb9\u5fc5\u987b\u662f**\u5206\u522b\u4ece\u7b2c\u4e00\u5c42\u7684m\u4e2a\u70b9\u51fa\u53d1\u7684**\uff08~~\u6211\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\u6539\u4e86\u534a\u5929~~\uff09\u6839\u636e\u8fd9\u4e2a\u6211\u4eec\u4ece\u539f\u70b9\u5411\u7b2c\u4e00\u5c42\u7684\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a0\u7684\u8fb9\uff0c\u6700\u540e\u4e00\u5c42\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u65e0\u9650\uff08\u5f53\u7136\uff0c\u7b2c\u4e00\u95ee\u7684\u65f6\u5019\u4f60\u53ef\u4ee5\u628a\u5bb9\u91cf\u8bbe\u4e3a1\uff09\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n- \u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u8981\u6c42\u6240\u6709\u7ebf\u4e0d\u76f8\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u53ea\u8981\u70b9\u4e0d\u76f8\u4ea4\uff0c\u8fb9\u66f4\u4e0d\u4f1a\u76f8\u4ea4\u3002\u6240\u6709\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u4e2d\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a\u8fd9\u4e2a\u6570\u7684\u8fb9\u3002\u7136\u540e\u628a\u4e0a\u4e00\u5c42\u7684\u51fa\u70b9\u5411\u4e0b\u4e00\u5c42\u7684\u5165\u70b9\u8fde\u4e0a\u4e00\u6761\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a0\u7684\u8fb9\n- \u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u8981\u6c42\u53ea\u6709\u70b9\u76f8\u4ea4\uff0c\u6211\u4eec\u53ea\u9700\u628a\u7b2c\u4e00\u95ee\u7684\u56fe\u4e2d\u4e00\u4e2a\u70b9\u7684\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u5bb9\u91cf\u6539\u6210\u65e0\u9650\uff0c\u4f46\u4e0d\u7528\u6539\u8d39\u7528\uff0c\u56e0\u4e3a**\u9898\u4e2d\u5e76\u6ca1\u8bf4\u4e00\u4e2a\u6570\u53ea\u80fd\u53d6\u4e00\u6b21**\uff08~~\u6211\u56e0\u4e3a\u8fd9\u4e2a\u53c8\u6539\u4e86\u534a\u5929~~\n- \u5bf9\u4e8e\u7b2c\u4e09\u95ee\uff0c\u53ea\u9700\u628a\u7b2c\u4e8c\u95ee\u7684\u56fe\u4e2d\u7684\u5c42\u4e0e\u5c42\u4e4b\u95f4\u8fb9\u7684\u5bb9\u91cf\u6539\u4e3a\u65e0\u9650\u5c31\u597d\u4e86\n\n\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e00\u95ee\uff0c\u6211\u4eec\u8dd1\u4e2a\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5c31\u597d\u4e86\n\n~~\u4ee3\u7801\u5de8\u4e11\uff0c\u8bf7\u89c1\u8c05~~\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define MAXM 100010\n#define MAXN 6010\nusing namespace std;\nint to[MAXM],next[MAXM],w[MAXM],cost[MAXM],head[MAXN];\nint n,m,S,T,ansl=0,ansc=0;\nint cnt=-1;\nint pre1[MAXN],pre2[MAXN],low[MAXN],dis[MAXN];\nvoid link(int a,int b,int c,int d){\n     cnt++;\n     next[cnt]=head[a];\n     w[cnt]=c;\n     cost[cnt]=d;\n     to[cnt]=b;\n     head[a]=cnt;\n     cnt++;\n     next[cnt]=head[b];\n     w[cnt]=0;\n     cost[cnt]=-d;\n     to[cnt]=a;\n     head[b]=cnt;\n}\nbool spfa(){\n     queue<int>q;\n     fill(dis,dis+MAXN,-66666666);\n     int vis[MAXN];\n     memset(vis,0,sizeof(vis));\n     q.push(S);\n     dis[S]=0;\n     vis[S]=1;\n     low[S]=66666666;\n     while(!q.empty()){\n                       int now=q.front();\n                       vis[now]=0;\n                       q.pop();\n                       for(int i=head[now];i!=-1;i=next[i]){\n                               if (w[i]>0&&cost[i]+dis[now]>dis[to[i]]){\n                                                                        dis[to[i]]=dis[now]+cost[i];\n                                                                        low[to[i]]=min(low[now],w[i]);\n                                                                        pre1[to[i]]=now;\n                                                                        pre2[to[i]]=i;\n                                                                        if (!vis[to[i]]){\n                                                                                         vis[to[i]]=1;\n                                                                                         q.push(to[i]);\n                                                                        }\n                               }\n                       }\n     }\n     return dis[T]!=-66666666;\n}\nvoid work(){\n     while(spfa()){\n                   int now=T;\n                   while(now!=S){\n                                 int y=pre2[now];\n                                 w[y]-=low[T];\n                                 w[y^1]+=low[T];\n                                 now=pre1[now];\n                   }\n                   ansl+=low[T];\n                   ansc+=low[T]*dis[T];\n     }\n}\nint tu[50][50];\nint num(int a,int b){\n    return (a-1)*50+b;\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    cin>>m>>n;\n    S=0;T=MAXN-1;\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<m+i;j++){\n                    scanf(\"%d\",&tu[i][j]);\n            }\n    }\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<i+m;j++){\n                    if (i==1)link(S,num(i,j),1,0);\n                    link(num(i,j),num(i,j)+3000,1,tu[i][j]);\n                    if (i==n)link(num(i,j)+3000,T,1,0);\n                    else {link(num(i,j)+3000,num(i+1,j),1,0);link(num(i,j)+3000,num(i+1,j+1),1,0);};\n            }\n    }\n    work();\n    cout<<ansc<<endl;\n    ansc=0;\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<i+m;j++){\n                    if (i==1)link(S,num(i,j),1,0);\n                    link(num(i,j),num(i,j)+3000,MAXN,tu[i][j]);\n                    if (i==n)link(num(i,j)+3000,T,m,0);\n                    else {link(num(i,j)+3000,num(i+1,j),1,0);link(num(i,j)+3000,num(i+1,j+1),1,0);};\n            }\n    }\n    work();\n    cout<<ansc<<endl;\n    ansc=0;\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<i+m;j++){\n                    if (i==1)link(S,num(i,j),1,0);\n                    link(num(i,j),num(i,j)+3000,MAXN,tu[i][j]);\n                    if (i==n)link(num(i,j)+3000,T,m,0);\n                    else {link(num(i,j)+3000,num(i+1,j),MAXN,0);link(num(i,j)+3000,num(i+1,j+1),MAXN,0);};\n            }\n    }\n    work();\n    cout<<ansc<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1549272141,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4013 \u3010\u6570\u5b57\u68af\u5f62\u95ee\u9898\u3011"
    }
]