[
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u4f53\u9a8c](https://mrsrz.github.io/2020/06/18/lg5891/)\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a $u$\uff0c\u66b4\u529b\u5f80\u4e0a\u8df3\uff0c\u8fd9\u6837\u8df3\u8fc7\u7684**\u4e0d\u540c**\u8282\u70b9\u7684\u603b\u6570\u4e0d\u4f1a\u975e\u5e38\u591a\uff0c\u5e73\u5747\u4e0b\u6765\u5927\u6982\u5728 $7\\times 10^7\\sim 8\\times 10^7$ \u8fd9\u6837\u5b50\u3002\u76ee\u524d\u4f3c\u4e4e\u65e0\u6cd5\u5c06\u5176\u5361\u6389\u3002\n\n\u7136\u800c\u5b9e\u9645\u4e0a\u8bbf\u95ee\u7684\u53ea\u6709 $q$ \u4e2a\u4e0d\u540c\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u7684\u68ee\u6797\u4f1a\u6709\u975e\u5e38\u591a\u7684\u5730\u65b9\u662f\u4e00\u6761\u5355\u94fe\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5c06\u68ee\u6797\u52a0\u4e00\u4e2a\u6839\u8282\u70b9\u8f6c\u4e3a\u4e00\u68f5\u6811\u3002\n\n\u6211\u4eec\u8003\u8651\u6c42\u51fa\u8fd9\u68f5\u6811\u7684\u865a\u6811\uff0c\u5b83\u6709 $O(q)$ \u4e2a\u8282\u70b9\u3002\u7136\u540e\u6c42\u51fa $v_x$ \u8868\u793a\u8282\u70b9 $x$ \u5230\u5176\u865a\u6811\u4e0a\u7236\u4eb2**\u5728\u539f\u6811**\u7684\u8def\u5f84\u4e2d\u7684\u8282\u70b9\u4e2a\u6570\uff08\u4e0d\u5305\u62ec\u7236\u4eb2\uff09\u3002\u90a3\u4e48\u5bf9 $x$ \u53ca\u5176\u5b50\u6811\u4e2d\u5230\u6839\u8def\u5f84\u52a0 $p$ \u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a $x$ \u5230\u5176\u865a\u6811\u4e0a\u7684\u7236\u4eb2\u7684\u8fd9\u6bb5\u76f4\u63a5\u5728\u865a\u6811\u8282\u70b9 $x$ \u4e0a\u8003\u8651\uff0c\u5373\u76f4\u63a5\u5728 $x$ \u4e0a\u52a0 $p\\cdot v_x$\u3002\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u53ea\u9700\u67e5\u8be2\u8fd9\u4e2a\u70b9\u5728\u865a\u6811\u4e0a\u5230\u6839\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u70b9\u6743\u548c\u5373\u53ef\u3002\n\n\u7531\u4e8e $v$ \u6570\u7ec4\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u94fe\u52a0\u94fe\u548c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6216\u8005\u4f7f\u7528 LCT \u7b49\u6570\u636e\u7ed3\u6784\u5373\u53ef\u7ef4\u62a4\u3002\n\n\u7136\u540e\u5173\u952e\u5c31\u662f\u5efa\u51fa\u8fd9\u68f5\u865a\u6811\u3002\u6211\u4eec\u7528\u4e00\u4e2a $2^{30}$ \u7684 bitset \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u7136\u540e\u5bf9\u8be2\u95ee\u79bb\u7ebf\uff0c\u5bf9\u6bcf\u4e2a $u$ \u90fd\u66b4\u529b\u5f80\u4e0a\u8df3\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u88ab\u8bbf\u95ee\u8fc7\u7684\u70b9\uff08\u6216\u8005\u8d85\u8fc7 $V$\uff09\uff0c\u5e76\u5c06\u6cbf\u9014\u4e0a\u7684\u70b9\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8fc7\u3002\u90a3\u4e48\u6bcf\u4e2a $u$ \u5f00\u59cb\u548c\u7ed3\u5c3e\u7684\u70b9\u5c31\u662f\u53ef\u80fd\u51fa\u73b0\u5728\u865a\u6811\u4e2d\u7684\u70b9\u3002\u6c42 $v_x$ \u548c\u865a\u6811\u4e0a\u7684\u8fde\u8fb9\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u80fd\u51fa\u73b0\u5728\u865a\u6811\u4e0a\u7684\u70b9\u6392\u5e8f\u540e\uff0c\u4ece\u5927\u5230\u5c0f\u518d\u66b4\u529b\u5f80\u4e0a\u8df3\u4e00\u904d\uff0c\u9047\u5230\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u505c\u6b62\u3002\n\n\u6839\u636e\u4e0a\u9762\u201c\u4e0d\u540c\u7684\u8282\u70b9\u603b\u6570\u4e0d\u4f1a\u975e\u5e38\u591a\u201d\u7684\u7ed3\u8bba\uff0c\u4e0a\u9762\u7684\u505a\u6cd5\u662f\u4e0d\u4f1a\u8d85\u65f6\u7684\u3002\n\n\u7531\u4e8e $2^{30}$ \u7684 bitset \u4f1a CMLE\uff0c\u6240\u4ee5\u9700\u8981\u624b\u5199\u4e00\u4e2a\u7b80\u5355\u7684 bitset\u3002\n\n\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e3a $O(q\\log^2 q)$ \u6216 $O(q\\log q)$\u3002\u7a7a\u95f4\u590d\u6742\u5ea6 $O(q+V)$\u3002\n\n## Code\uff1a\n```cpp\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<cstring>\n#include<map>\nusing namespace std;\ntypedef long long LL;\n#define popcnt __builtin_popcount\nconst int N=8e5+6;\nunsigned b[1<<25|1];\nmap<int,int>id;\nint m,V,tot,head[N],fa[N],val[N],rt,sz[N],son[N],top[N],dep[N],dfn[N],idx,cnt,vval[N];\nint rsc[N<<2];\nLL tag[N<<2],d[N<<2];\nstruct edge{\n\tint to,nxt;\n}e[N];\nstruct que{\n\tint op,u,p;\n}q[N];\nvector<int>vec;\ninline bool test(const int&x){return b[x>>5]>>(x&31)&1;}\nvoid dfs(int now){\n\tsz[now]=1;\n\tfor(int i=head[now];i;i=e[i].nxt){\n\t\tdep[e[i].to]=dep[now]+1,dfs(e[i].to);\n\t\tsz[now]+=sz[e[i].to];\n\t\tif(!son[now]||sz[son[now]]<sz[e[i].to])son[now]=e[i].to;\n\t}\n}\nvoid dfs2(int now){\n\tdfn[now]=++idx;\n\tif(son[now])top[son[now]]=top[now],dfs2(son[now]);\n\tfor(int i=head[now];i;i=e[i].nxt)if(e[i].to!=son[now])dfs2(top[e[i].to]=e[i].to);\n}\nvoid build(int l,int r,int o){\n\tif(l==r)rsc[o]=vval[l];else{\n\t\tconst int mid=l+r>>1;\n\t\tbuild(l,mid,o<<1),build(mid+1,r,o<<1|1);\n\t\trsc[o]=rsc[o<<1]+rsc[o<<1|1];\n\t}\n}\ninline void pushdown(int o){\n\tLL&x=tag[o];\n\ttag[o<<1]+=x,tag[o<<1|1]+=x;\n\td[o<<1]+=x*rsc[o<<1],d[o<<1|1]+=x*rsc[o<<1|1],x=0;\n}\nvoid add(int l,int r,int o,const int&L,const int&R,const int&x){\n\tif(L<=l&&r<=R){\n\t\ttag[o]+=x;\n\t\td[o]+=(LL)rsc[o]*x;\n\t}else{\n\t\tpushdown(o);\n\t\tconst int mid=l+r>>1;\n\t\tif(L<=mid)add(l,mid,o<<1,L,R,x);\n\t\tif(mid<R)add(mid+1,r,o<<1|1,L,R,x);\n\t\td[o]=d[o<<1]+d[o<<1|1];\n\t}\n}\nLL query(int l,int r,int o,const int&L,const int&R){\n\tif(L<=l&&r<=R)return d[o];\n\tpushdown(o);\n\tconst int mid=l+r>>1;\n\tLL res=0;\n\tif(L<=mid)res=query(l,mid,o<<1,L,R);\n\tif(mid<R)res+=query(mid+1,r,o<<1|1,L,R);\n\treturn res;\n}\nvoid Add(int x,int v){\n\twhile(top[x]!=rt){\n\t\tadd(1,idx,1,dfn[top[x]],dfn[x],v);\n\t\tx=fa[top[x]];\n\t}\n\tadd(1,idx,1,1,dfn[x],v);\n}\nLL ask(int x){\n\tLL res=0;\n\twhile(top[x]!=rt){\n\t\tres+=query(1,idx,1,dfn[top[x]],dfn[x]);\n\t\tx=fa[top[x]];\n\t}\n\tres+=query(1,idx,1,1,dfn[x]);\n\treturn res;\n}\nint main(){\n\tios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\n\tcin>>m>>V;\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>q[i].op>>q[i].u;\n\t\tif(q[i].op==1)cin>>q[i].p;\n\t\tint x=q[i].u;\n\t\tvec.push_back(x);\n\t\tfor(;x<=V&&!test(x);x+=popcnt(x))b[x>>5]|=1u<<(x&31);\n\t\tif(x<=V)vec.push_back(x);\n\t}\n\tsort(vec.begin(),vec.end());vec.erase(unique(vec.begin(),vec.end()),vec.end());\n\tmemset(b,0,sizeof b);\n\tfor(int i=(int)vec.size()-1;~i;--i){\n\t\tint x=vec[i];\n\t\tif(!id.count(x))id[x]=++tot;\n\t\tint pid=id[x];\n\t\tint&ct=val[pid];\n\t\tif(test(x))continue;\n\t\tct=0;\n\t\tfor(;x<=V&&!test(x);x+=popcnt(x))b[x>>5]|=1u<<(x&31),++ct;\n\t\tif(x>V)x=V+1;\n\t\tif(!id.count(x))id[x]=++tot;\n\t\tint nid=id[x];\n\t\tfa[pid]=nid;\n\t\te[++cnt]=(edge){pid,head[nid]},head[nid]=cnt;\n\t}\n\trt=id[V+1];\n\tval[rt]=0;\n\ttop[rt]=rt;\n\tdfs(rt),dfs2(rt);\n\tfor(int i=1;i<=idx;++i)vval[dfn[i]]=val[i];\n\tbuild(1,idx,1);\n\tfor(int i=1;i<=m;++i)\n\tif(q[i].op==1)Add(id[q[i].u],q[i].p);\n\telse cout<<ask(id[q[i].u])<<'\\n';\n\treturn 0;\n}\n```",
        "postTime": 1592473720,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5891 \u3010Fracture Ray\u3011"
    },
    {
        "content": "~~\u6682\u65f6\u7684\u6700\u4f18\u89e3\uff0c\u6211 1.36s\uff0crk2 2.88s~~\n\n\u9996\u5148\u8003\u8651\u5230\u8fd9\u4e2a\u73a9\u610f\u80af\u5b9a\u662f\u4e00\u68f5\u6811\uff0c\u5927\u80c6\u731c\u6d4b\u8fd9\u9897\u6811\u7684\u5f88\u591a\u8282\u70b9\u90fd\u662f\u88ab\u53cd\u590d\u5229\u7528\u7684\uff0c\u6bd4\u5982\u8bf4 $5 = 3+popcount(3) = 4 + popcount(4)$\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u8fd9\u4e0a\u9762\u7684\u70b9\u4e0d\u4f1a\u592a\u591a\uff0c\u7136\u540e\u53ef\u4ee5\u7528 bitset \u8bb0\u4e00\u4e0b\u54ea\u4e9b\u70b9\u51fa\u73b0\u4e86\uff0c\u54ea\u4e9b\u70b9\u6ca1\u6709\u3002\u7136\u540e\u6211\u4eec\u5b9a\u4e49 \n$[V+1, \\infty)$\n\u4f5c\u4e3a\u6839\uff0c\u663e\u7136\u8fd9\u4e2a\u533a\u95f4\u53ef\u4ee5\u7528\u4e00\u4e2a\u70b9\u6765\u8868\u793a\uff0c\u90a3\u4e48\u4ee4\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u8bdd\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5176\u5b9e\u5c31\u662f $root \\to x$ \u8fd9\u4e2a\u94fe\u4e0a\u9762\u6574\u4f53\u52a0\u4e0a $v$\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u662f\u67e5\u8be2 $root \\to x$\u3002\n\n\u4fdd\u7559\u6709\u7528\u7684\u70b9\u7684\u4e2a\u6570\u5176\u5b9e\u4e0d\u4f1a\u8d85\u8fc7 $N \\times 4$\n\n\u4ee3\u7801\u6709\u70b9\u96be\u5199\u3002\u4e0d\u8fc7\u6bd4\u8f83\u677f\u5b50\uff0c LCT \u548c \u6811\u94fe\u5256\u5206 \u90fd\u80fd\u8fc7\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 8e5 + 58;\nint nodes[MAXN], val[MAXN];\n\nstruct SegmentTree {\n\tSegmentTree() {}\n\t\n\tint N;\n\tvector <long long> tag, s;\n\tvector <int> cnt;\n\tvoid resize(int _N) {\n\t\tN = _N + 1;\n\t\ttag.resize(N << 2);\n\t\tcnt.resize(N << 2);\n\t\ts.resize(N << 2);\n\t}\n\t\n\tvoid pushup(int p) {\n\t\ts[p] = s[p << 1] + s[p << 1 | 1];\n\t}\n\t\n\tvoid build(int l, int r, int p) {\n\t\tif (l == r) {\n\t\t\tcnt[p] = val[l];\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tbuild(l, mid, p << 1);\n\t\tbuild(mid + 1, r, p << 1 | 1);\n\t\tcnt[p] = cnt[p << 1] + cnt[p << 1 | 1];\n\t}\n\t\n\tvoid cover(int p, int v) { tag[p] += v; s[p] += 1ll * v * cnt[p]; }\n\t\n\tvoid pushdown(int p) {\n\t\tif (tag[p]) {\n\t\t\tcover(p << 1, tag[p]);\n\t\t\tcover(p << 1 | 1, tag[p]);\n\t\t\ttag[p] = 0;\n\t\t}\n\t}\n\t\n\tvoid modify(int ql, int qr, int l, int r, int p, int v) {\n\t\tif (ql <= l && r <= qr) {\n\t\t\treturn cover(p, v);\n\t\t}\n\t\tpushdown(p);\n\t\tint mid = l + r >> 1;\n\t\tif (ql <= mid) {\n\t\t\tmodify(ql, qr, l, mid, p << 1, v);\n\t\t}\n\t\tif (qr > mid) {\n\t\t\tmodify(ql, qr, mid + 1, r, p << 1 | 1, v);\n\t\t}\n\t\tpushup(p);\n\t}\n\t\n\tlong long query(int ql, int qr, int l, int r, int p) {\n\t\tif (ql <= l && r <= qr) {\n\t\t\treturn s[p];\n\t\t}\n\t\tpushdown(p);\n\t\tint mid = l + r >> 1;\n\t\tlong long ans = 0;\n\t\tif (ql <= mid) {\n\t\t\tans += query(ql, qr, l, mid, p << 1);\n\t\t}\n\t\tif (qr > mid) {\n\t\t\tans += query(ql, qr, mid + 1, r, p << 1 | 1);\n\t\t}\n\t\treturn ans;\n\t}\n} smt;\n\nstruct Bitset {\nunsigned used[1 << 25 | 3];\nvoid clear() { memset(used, 0, sizeof(used)); }\nvoid set(int x) { used[x >> 5] |= 1 << (x & 31); }\nbool count(int x) { return used[x >> 5] >> (x & 31) & 1; }\n} B;\nunordered_map <int, int> id;\nint q, V;\n\nstruct Temp { int op, x, y; } t[MAXN];\nvector <int> g[MAXN];\nint sz[MAXN], son[MAXN], dep[MAXN], fa[MAXN];\nvoid dfs(int u, int p) {\n\tsz[u] = 1;\n\tson[u] = 0;\n\tdep[u] = dep[p] + 1;\n\tfa[u] = p;\n\tfor (auto v : g[u]) {\n\t\tif (v == p) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tdfs(v, u);\n\t\t\tsz[u] += sz[v];\n\t\t\tif (sz[v] > sz[son[u]]) {\n\t\t\t\tson[u] = v;\n\t\t\t}\t\n\t\t}\n\t}\n}\n\nint top[MAXN], dfn[MAXN], _Index = 0;\nvoid dfs2(int u, int t) {\n\ttop[u] = t;\n\tdfn[u] = ++_Index;\n\tif (son[u]) {\n\t\tdfs2(son[u], t);\n\t}\n\tfor (auto v : g[u]) {\n\t\tif (!top[v]) {\n\t\t\tdfs2(v, v);\n\t\t}\n\t}\n}\n\n// a path on tree add v\nint cnt, root;\nvoid modify(int p, int v) {\n\twhile (top[p] != root) {\n\t\tsmt.modify(dfn[top[p]], dfn[p], 1, cnt, 1, v);\n\t\tp = fa[top[p]];\n\t}\n\tif (p) {\n\t\tsmt.modify(1, dfn[p], 1, cnt, 1, v);\n\t}\n}\n\nlong long query(int p) {\n\tlong long ans = 0;\n\twhile (top[p] != root) {\n\t\tans += smt.query(dfn[top[p]], dfn[p], 1, cnt, 1);\n\t\tp = fa[top[p]];\n\t}\n\tif (p) {\n\t\tans += smt.query(1, dfn[p], 1, cnt, 1);\n\t}\n\treturn ans;\n}\n\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\t\n\tcin >> q >> V; ++V;\n\t\n\tvector <int> tr; // nodes in tree\n\tfor (int i = 1; i <= q; i++) {\n\t\tint op, x, v;\n\t\tcin >> op >> x;\n\t\tif (op == 1) {\n\t\t\tcin >> v;\n\t\t}\n\t\tt[i] = {op, x, v};\n\t\ttr.emplace_back(x);\n\t\tfor (; x < V && !B.count(x); x += __builtin_popcount(x)) {\n\t\t\tB.set(x);\n\t\t}\n\t\tif (x < V) {\n\t\t\ttr.emplace_back(x);\n\t\t}\n\t}\n\t\n\tsort(tr.begin(), tr.end());\n\ttr.resize(unique(tr.begin(), tr.end()) - tr.begin());\n\tB.clear();\n\treverse(tr.begin(), tr.end());\n\t\n\tfor (auto node : tr) {\n\t\tif (!id.count(node)) {\n\t\t\tid[node] = ++cnt;\n\t\t}\n\t\tint u = node;\n\t\tint &cur = nodes[id[u]];\n\t\tif (B.count(u)) {\n\t\t\tcontinue;\n\t\t}\n\t\tcur = 0;\n\t\tfor (; u < V && !B.count(u); u += __builtin_popcount(u)) {\n\t\t\tB.set(u);\n\t\t\t++cur;\n\t\t}\n\t\tint p = min(u, V);\n\t\tif (!id.count(p)) {\n\t\t\tid[p] = ++cnt;\n\t\t}\n\t\tg[id[p]].emplace_back(id[node]);\n\t}\n\t\n\troot = id[V];\n\tnodes[root] = 0;\n\tdfs(root, 0);\n\tdfs2(root, root);\n\t\n\tfor (int i = 1; i <= cnt; i++) {\n\t\tval[dfn[i]] = nodes[i];\n\t}\n\t\n\tsmt.resize(cnt);\n\tsmt.build(1, cnt, 1);\n\tfor (int i = 1; i <= q; i++) {\n\t\tif (t[i].op == 1) {\n\t\t\tmodify(id[t[i].x], t[i].y);\n\t\t} else {\n\t\t\tcout << query(id[t[i].x]) << '\\n';\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1602751645,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5891 \u3010Fracture Ray\u3011"
    }
]