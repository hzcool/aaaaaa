[
    {
        "content": "##\u8f6c\u5316\u95ee\u9898\n\n\u8fd9\u91cc\u8def\u7ebf\u6da8\u4ef7\u660e\u663e\u7b49\u540c\u4e8e\u5220\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u5012\u8fc7\u6765\u601d\u8003\uff1a\n\n>    **\u56fe\u4e0a\u4f9d\u6b21(\u5012\u5e8f)\u52a0\u8fb9\uff0c\u95ee\u6bcf\u4e2a\u70b9\u6210\u4e3a\u6700\u7ec8\u56fe\u6700\u77ed\u8def\u7684\u65f6\u95f4**\n##\u5206\u6790\n\n\u8bb0\\*\u539f\u56fe\\*\u7684\u70b91\u5230\u8fbe\u70b9i\u7684\u6700\u77ed\u8def\u4e3adis[i]\uff0c\\*\u5f53\u524d\u72b6\u6001\\*\u4e0b\u70b91\u5230\u8fbe\u70b9i\u6700\u77ed\u8def\u4e3ad[i]\u3002\u4e0b\u9762\u79f0d[i]==dis[i]\u7684\u70b9i\u4e3a\u6269\u5c55\u70b9\u3002\n\n\n\u901a\u8fc7\u5206\u6790\u6700\u77ed\u8def\u6027\u8d28\u53d1\u73b0\uff0c\u67d0\u4e2a\u70b9v**\u65b0**\u6210\u4e3a\u6269\u5c55\u70b9\u60c5\u51b5\u6709\u4e24\u4e2a\n\n\n1. \u52a0\u8fb9(u,v)\u66f4\u65b0\uff0c\u4e14dis[u]==d[u]&&dis[v]==d[u]+1&&**d[v]!=dis[v]**\u3002\n\n2.    \u90bb\u5c45u\u7a81\u7136\u6210\u4e3a\u6700\u7ec8\u56fe\u6700\u77ed\u8def\uff0c\u4e14dis[v]==d[u]+1&&**d[v]!=dis[v]**\n\n\n\\_(\u5176\u5b9e\u4e0a\u9762\u662f\u540c\u4e00\u79cd\u60c5\u51b5XD)\\_\n\n\n\u91cd\u8981\u7684\u662f\uff0c**\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u66f4\u65b01\u6b21**\uff0c\u4f53\u73b0\u5728\u4e86\u4e0a\u9762\u7684\u5f3a\u8c03\u5904\u3002\u8fd9\u662f\u5f88\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u8fd9\u9898\u7b54\u6848\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff0c\u4f46\u8fd9\u4e2a\u662f\u964d\u4f4e\u590d\u6742\u5ea6\u7684\u91cd\u8981\u6761\u4ef6\u3002\n\n\n##\u786e\u5b9a\u7b97\u6cd5\n\n\n1.    \u9996\u5148\u628a\u6700\u7ec8\u56fe\u7684\u6700\u77ed\u8def\u60c5\u51b5dis[i]\u6c42\u51fa\u6765\u3002\u7136\u540e\u91cd\u5efa\u56fe\uff0c\u53bb\u6389\u6240\u6709\u5f85\u52a0\u8fb9\u3002\n\n2.    \u7136\u540e\u4f9d\u6b21\u52a0\u5165\u5f85\u52a0\u8fb9\uff0c\u68c0\u6d4b\u8fb9\u7684\u4e24\u7aef\u662f\u5426\u7b26\u5408\u6761\u4ef61\uff0c\u82e5\u7b26\u5408\uff0c\u5219\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5bf9\u65b0\u6210\u4e3a\u6269\u5c55\u70b9\u90bb\u5c45\u8fdb\u884c\u6761\u4ef62\u5224\u65ad\u3002\n\n3.    \u5c06\u6bcf\u6b21\u65b0\u6210\u4e3a\u6269\u5c55\u70b9\u7684\u6570\u76ee\u8bb0\u5f55\uff0c\u6700\u540e\u5904\u7406\u51fa\u7b54\u6848\u3002\n\n\n##\u590d\u6742\u5ea6\u5206\u6790\n\n\n1.    \u7531\u4e8e\u8fb9\u6743\u4e3a1\uff0c\u6c42dis[]\u53ef\u4ee5\u7528bfs\u904d\u5386\uff0c\u590d\u6742\u5ea6\u4e3aO(n+m)\u3002\n\n2.    \u52a0\u5165\u4e86q\u6761\u8fb9\uff0c\u5728\u6574\u4e2a\u8fc7\u7a0b2\u4e2d\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88abdfs\u5230\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3aO(n+m+q)\u3002\n\n3.    \u6bcf\u4e00\u6b21\u7684\u7b54\u6848\u662f\u65b0\u6210\u4e3a\u6269\u5c55\u70b9\u7684\u6570\u76ee\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u904d\u524d\u7f00\u548c\uff0c\u590d\u6742\u5ea6\u4e3aO(q)\u3002\n\n\n\u6700\u7ec8\u590d\u6742\u5ea6\u4e3aO(n+m+q)\n\n\n##\u4ee3\u7801\n\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 400010\nusing namespace std;\n#define G c=getchar()\ninline int read()\n{\n    int x=0,f=1;char G;\n    while(c>57||c<48){if(c=='-')f=-1;G;}\n    while(c>47&&c<58)x=x*10+c-48,G;\n    return x*f;\n}\n#define AE(u,v) to[Si]=v,nxt[Si]=idx[u],idx[u]=Si++\nint to[maxn],nxt[maxn],idx[maxn],Si;\nint n,m,q,dis[maxn],d[maxn];\nqueue<int>Q;\nint vis[maxn],b[maxn];\nint E[maxn][2],qq[maxn],ans[maxn],tmp;\nvoid dfs(int u,int fa)\n{\n    for(int i=idx[u];i+1;i=nxt[i])\n        if(to[i]!=fa&&dis[to[i]]==d[u]+1&&dis[to[i]]!=d[to[i]])\n        {\n            d[to[i]]=d[u]+1;tmp++;\n            dfs(to[i],u);\n        }\n}\nvoid bfs(int s,int dis[])\n{\n    while(!Q.empty())Q.pop();\n    Q.push(s);dis[s]=0;vis[s]=1;\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        for(int i=idx[u],v;i+1;i=nxt[i])\n        {\n            if(vis[v=to[i]])continue;\n            dis[v]=dis[u]+1;\n            Q.push(v);vis[v]=1;\n        }\n    }\n}\nint main()\n{\n    memset(idx,-1,sizeof(idx));\n    n=read(),m=read(),q=read();\n    for(int i=1;i<=m;i++)\n        E[i][0]=read(),E[i][1]=read(),AE(E[i][0],E[i][1]),AE(E[i][1],E[i][0]);\n    bfs(1,dis);\n    memset(idx,-1,sizeof(idx));Si=0;\n    memset(vis,0,sizeof(vis));\n    for(int i=1;i<=q;i++)qq[i]=read(),b[qq[i]]=1;\n    for(int i=1;i<=m;i++)\n        if(!b[i])AE(E[i][0],E[i][1]),AE(E[i][1],E[i][0]);\n    bfs(1,d);\n    for(int i=q;i>=1;i--)\n    {\n        int x=qq[i],u=E[x][0],v=E[x][1];tmp=0;\n        if(dis[u]==d[u]&&dis[v]==d[u]+1&&d[v]!=dis[v])tmp++,d[v]=dis[v],dfs(v,u);\n        swap(u,v);\n        if(dis[u]==d[u]&&dis[v]==d[u]+1&&d[v]!=dis[v])tmp++,d[v]=dis[v],dfs(v,u);\n        AE(u,v),AE(v,u);\n        ans[i]=tmp;\n    }\n    for(int i=1;i<=q;i++)\n        ans[i]+=ans[i-1],printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1477789447,
        "uid": 829,
        "name": "Scarlet",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "\n\u9898\u89e3\uff1a\n\n\u5c06\u56fe\u4ece1\u8282\u70b9\u5f00\u59cb\uff0c\u8fdb\u884cbfs\uff0c\u751f\u6210\u4e00\u4e2abfs\u5e8f\u7684DAG\uff08\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6709\u70b9\u50cf\u6811\uff09\u3002\n\n\u6211\u4eec\u628a\u201c\u6da8\u4ef7\u201d\u884c\u4e3a\u76f4\u63a5\u8ba4\u4e3a\u662f\u5220\u8fb9\u3002\n\n\u5982\u679c\u67d0\u4e2a\u5b9a\u70b9\u5f80DAG\u4e0a\u9762\u56de\u6eaf\uff0c\u4e0d\u80fd\u5230\u8fbe1\u8282\u70b9\uff0c\u8bf4\u660e\u6ca1\u6709\u8ddf\u521d\u59cb\u503c\u4e00\u6837\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f00\u59cb\u5220\u9664\u4e00\u6761\u8fb9\u3002\u5047\u8bbe\u8fd9\u6761\u8fb9\u662f\u8fdeu->v\u8282\u70b9\u3002\u6211\u4eec\u8981\u786e\u5b9a\u8fd9\u6761\u8fb9\u65b9\u7684\u5b50\u56fe\u54ea\u4e9b\u4f1a\u56e0\u4e3a\u5220\u4e86\u8fd9\u6761\u8fb9\u800c\u4e0d\u80fd\u56de\u6eaf\u5230\u6839\u8282\u70b9\u3002\n\n\u7b56\u7565\u662f\u8fd9\u6837\u7684\uff1a\n\n\u4f7f\u7528bfs\uff0c\u5c06u->v\u653e\u5165\u961f\u5217\u3002\n\n\u5220\u9664u->v\u3002\n\n\u82e5v\u7684\u5165\u5ea6\u4e3a0\uff1a\u5219\u5220\u4e86\u8fd9\u6761\u8fb9\u4e4b\u540e\uff0c\u4e0d\u80fd\u56de\u6eaf\u5230\u6839\uff0c\u8bb0\u5f55v\u662f\u7b2c\u51e0\u6761\u8fb9\u5220\u9664\u540e\u4e0d\u80fd\u8054\u901a\u7684\uff0c\u7136\u540e\u5c06v->w1\uff0cv->w2...v->wn\u5168\u90e8\u653e\u5165\u961f\u5217\u3002wi\u662fv\u53ef\u4ee5\u76f4\u63a5\u8fde\u5230\u4e14\u6ca1\u6709\u8fde\u8fb9\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002\n\n\u82e5v\u7684\u5165\u5ea6\u4e0d\u4e3a0\uff1av\u7684\u5165\u5ea6-=1\n\n\u7136\u540e\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u6bcf\u4e2a\u8282\u70b9\u5728\u4ec0\u4e48\u65f6\u5019\u662f\u4e0d\u80fd\u88ab\u8bbf\u95ee\u7684\u3002\n\n\u7531\u4e8e\u6240\u6709\u8fb9\u548c\u8282\u70b9\u90fd\u4f1a\u88ab\u81f3\u591a\u8bbf\u95ee\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\u3002\n\n\n\n\u89e3\u6cd52\uff1aDAG\u4e0a\u7684dp\uff08Claris\u63d0\u4f9b\uff09\n\ndp[x]=max(min(dp[pre],deltime(pre,x)))\n\n",
        "postTime": 1477749904,
        "uid": 1,
        "name": "kkksc03",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "## BB in front\n\n~~\u7528\u4e86\u548c\u673a\u623f[\u795e\u7287](https://www.luogu.org/user/174433)\u5dee\u4e0d\u591a\u7684\u65b9\u6cd5\u62a2\u8d70\u4e86\u795e\u7287\u7b2c\u4e8c\u4f18\u89e3\u8bb0\u5f55~~\n\n\u795e\u7287\u4eec\u53ef\u4ee5\u770b\u5b8c\u672c\u9898\u89e3\u78be\u538b\u672c\u849f\u84bb\u7684\u8bb0\u5f55,QAQ\n\n\u60f3\u8981\u66f4~~\u4e0d~~\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://www.luogu.org/blog/x-liuier/solution-p1710)\n\n## \u9898\u76ee\u5927\u610f\n\n\u5728$Q$\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u6bcf\u4e2a\u65f6\u95f4\u6bb5\u5185\u4ece**\u5f53\u524d\u56fe**\u4e0a\u5272\u53bb\u4e00\u6761\u8fb9\u3002\n\n\u95ee\uff0c\u5728\u65f6\u523b$i(1 \\leq i \\leq Q)$\u65f6\uff0c**\u5f53\u524d\u56fe**\u4e0a\u6709\u591a\u5c11\u4e2a\u70b9\u5230\u6e90\u70b9$s=1$\u7684\u6700\u77ed\u8ddd\u79bb\u4e0e**\u539f\u56fe**\u4e0d\u540c\u3002\n\n## solution\n\n\u5047\u8bbe\u5355\u4e2a\u70b9$t$\u5230\u6e90\u70b9$s=1$\u7684\u6700\u77ed\u8def\u5f84\u7ec4\u6210\u7684\u56fe\u4e3a\u56fe$G$\uff0c\u6c42\u51fa\u5728\u56fe$G$\u4e0a$s$\u5230$t$\u6ca1\u6709\u8def\u5f84\u76f8\u8fde\u7684\u65f6\u95f4\uff0c\u8bb0\u4f5c$time[t]$\u3002\n\n\u5219\u7b2c$i(1 \\leq i \\leq Q)$\u4e2a\u65f6\u523b\u7684\u7b54\u6848\u5c31\u662f$\\sum_{i=2}^n(time[i] \\leq q)$\uff0c\u5373\u6ee1\u8db3\u6761\u4ef6$time[i] \\leq q$\u7684\u70b9\u7684\u6570\u91cf\u3002\n\n\u800c\u5173\u4e8e$time[i]$\u7684\u6c42\u6cd5\uff0c\u5229\u7528$dp$\u53ef\u4ee5\u6c42\u5f97\uff1a\n\n>PS\uff1a\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u5047\u8bbe\u6ca1\u88ab\u5207\u65ad\u7684\u8fb9\u5728\u65f6\u523b$+\\infty$\u88ab\u5207\u65ad\u3002\n>\n>\u8bbe$cut(u, v)$\u4e3a\u8fb9$(u$->$v)$\u88ab\u5207\u65ad\u7684\u65f6\u523b\u3002\n>\n>\u8bbe\u70b9$u$\u4e0e\u70b9$v$\u76f4\u63a5\u76f8\u8fde\uff0c\u4e14\u70b9$v$\u5230\u6e90\u70b9$1$\u7684\u67d0\u6761\u6700\u77ed\u8def\u7ecf\u8fc7\u8fb9$(v$->$u)$\u3002\n>\n> 1. \u70b9$v$\u7ecf\u8fc7\u70b9$u$\u7684\u6700\u77ed\u8def\u8def\u5f84\u88ab\u5207\u65ad\u7684\u65f6\u523b$=min(time[u], cut(u, v))$\n>\n> 2. \u5219$time[v]=max\\{min(time[u], cut(u, v))\\}$\n\n\u800c\u5728\u7528$bfs$(\u8fb9\u6743\u4e3a1)\u6c42\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e3a\u8fb9\u6743\u4e3a1\uff0c\u6240\u4ee5\u5728\u7b2c\u4e00\u6b21\u66f4\u65b0\u70b9$v$\u7684\u8ddd\u79bb$dis[v]$\u65f6\uff0c$dis[v]$\u5373\u4e3a\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u4ee5\u4e0a\u53ef\u5f97\n> 1. $time[v]$\u53ea\u4e0e$min(time[u], cut(u, v))$\u6709\u5173\u3002\n>\n> 2. \u6ca1\u5fc5\u8981\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u56fe$G$\u518d\u8ba1\u7b97$time$\uff0c\u53ea\u8981\u786e\u5b9a\u8fb9$(u$->$v)$\u662f\u5426\u662f\u6700\u77ed\u8def\u5f84\uff0c\u4fbf\u53ef\u5224\u65ad\u8be5\u70b9$u$\u662f\u5426\u5728\u70b9$v$\u5bf9\u5e94\u7684\u56fe$G$\u4e0a\uff0c\u8fdb\u800c\u901a\u8fc7$time[u]$\u6765\u5f97\u5230$time[v]$\u3002\n\n\u56e0\u6b64\uff0c\u5728$bfs$\u540c\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7$time[u]$\u6c42\u51fa$time[v]$\u5566\uff01(qwq)\n\n\u4e0d\u61c2\u53ef\u4ee5\u76f4\u63a5\u770b\u4ee3\u7801(PS:\u88ab\u6211\u5220\u6389\u4e86[\u90e8\u5206(namespace)](https://www.luogu.org/paste/x1w7luyf)\uff0c\u65b9\u4fbf\u770b\u4e3b\u4f53\uff0c\u4e0d\u5f71\u54cd\u795e\u7287\u4eec\u770b\u4ee3\u7801)\n\n## Code\uff1a\n\n~~\u4e0d\u8981\u5410\u69fd\u7801\u98ce(\u6c42\u6c42\u5404\u8def\u795e\u7287\u5634\u4e0b\u7559\u60c5QAQ)~~\n\n```cpp\n#include <cstring>\n#include <queue>\nusing namespace tool;\nusing namespace io;\nconst int MAX_N = 1e5;\nconst int MAX_M = 2e5;\nconst int MAX_Q = 2e5;\nconst int INF = 0x3f3f3f3f;\n\n// \u8fd9\u91cc\u7528cst[]\u4ee3\u66fftime[]\nint n, m, q, cst[MAX_N], dis[MAX_N], ans[MAX_Q+1];\nedge *E[MAX_N], pool[MAX_M<<1], *iter=pool-1;\n\ninline void add_edge(int u, int v) {\n  *++iter=(edge){v, INF, E[u]}; E[u]=iter;\n  *++iter=(edge){u, INF, E[v]}; E[v]=iter;\n}\n\ninline void dij() {\n  memset(dis, 0x3f, sizeof(dis)); cst[0]=INF;\n  std::queue<int> que; que.push(dis[0]=0);\n  int u, v;\n  while (!que.empty()) {\n    u = que.front(); que.pop();\n    for (edge *e=E[u]; e!=NULL; e=e->nt) {\n      if (dis[v=e->v]==INF) {dis[v] = dis[u] + 1; que.push(v);}\n      if (dis[v]-dis[u]==1) cmax(cst[v], min(cst[u], e->t));\n      // void cmax(i, j) {i = max(i, j);}\n    }\n  }\n}\n\ninline void solve() {\n  dij(); // ~~\u4e09\u884csolve~~ writeln():\u8f93\u51fa\u5e76\u6362\u884c\n  for (int i=1; i<n; ++i) if (cst[i]<=q) ++ans[cst[i]];\n  for (int i=1; i<=q; ++i) writeln(ans[i] += ans[i-1]);\n}\n\nint main() {\n  // io_\u5f00\u5934\u7684\u53ef\u65e0\u89c6, read():\u8f93\u5165\n  io_begin(\"P1710\", true);\n  read(n); read(m); read(q);\n  for (int i=0, u, v; i<m; ++i) {\n    read(u); read(v);\n    add_edge(--u, --v);\n  }\n  for (int i=0, in; i<q; ++i) {\n    read(in); pool[(in<<1)-2].t = i+1;\n    pool[(in<<1)-1].t = i+1;\n  } solve(); io_end(); return 0;\n}\n\n```\n\n## summary\n\n\u4ec0\u4e48\uff0c\u770b\u61c2\u9898\u89e3\u540e\u4f60\u5c45\u7136\u6ca1\u6709\u53bb\u819c\u63d0\u4f9b\u601d\u8def\u7684[\u795e\u7287](https://www.luogu.org/user/174433)\uff1f\u4e0d\u8981\u72b9\u8c6b\u4e86\uff0c\u5feb\u53bb\u819c\u554a\uff01",
        "postTime": 1573184522,
        "uid": 270561,
        "name": "x_liuier",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "\u89e3\uff1a\u66b4\u529b 20  \n\n\u6b63\u89e3:(\u53d1\u73b0\u5176\u5b9e\u597d\u591a\u7684\u9898\u5220\u8fb9\u5220\u70b9\u90fd\u662f\u5012\u5e8f\u6765\u5199\u7684)  \n\n\u8003\u8651\u5012\u5e8f\u52a0\u8fb9\u3002  \n\n\u4ee4d1[i]  \u4e3a\u5168\u56fe\u4e2d  1 -> i  \u7684\u6700\u77ed\u8ddd\u79bb \n\nd2[i]   \u4e3a\u5220\u9664\u6389\u6240\u6709\u7684\u8fb9\u4e4b\u540e  1 -> i  \u7684\u6700\u77ed\u8ddd\u79bb,\u4e0d\n\n\u8fde\u901a\u5219\u4e3ainf    \n\n\u73b0\u5728\u8003\u8651\u4ec0\u4e48\u6837\u624d\u7b97\u505a\u4e0d\u5408\u6cd5\u7684\u70b9\u5462\uff1f  \n\n\u5373:\u5982\u679c\u518d\u52a0\u8fd9\u6761\u8fb9(u,v,c)\u4e4b\u524d,  \n\nd2[v]>d1[v]  && d1[u]==d2[u]  && d1[v]==d1[u]+1 \n\n\u90a3\u4e48v\u5c31\u662f\u4e0d\u6ee1\u7684\u5b66\u751f    \n\n\u5373v\u7684d1[]\u662f\u901a\u8fc7u\u5f97\u5230\u7684,\u5220\u4e86\u8fd9\u6761\u8fb9\u4e4b\u540e,v\u81ea\u7136\u5c31\u4e0d\u6ee1\u4e86\n\n\u7136\u540e\u518d\u53bb\u66f4\u65b0\u5176\u4ed6\u4e0e\u4e4b\u76f8\u5173\u7684\u70b9   \n\n\u81f3\u4e8e\u5220\u8fb9\u52a0\u8fb9\u64cd\u4f5c\uff0c\u7528\u4e2a\u6570\u7ec4\u8bb0\u4e00\u4e0b\u5c31\u597d\u3002\n[\u4ee3\u7801](http://www.cnblogs.com/adelalove/p/8507123.html)\n\n\uff08\u5982\u679c\u8fd9\u7bc7\u9898\u89e3\u901a\u8fc7\u4e86\u80fd\u4e0d\u80fd\u544a\u8bc9\u6211\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u6253\"enter\"\u4e0d\u7ba1\u7528\uff09",
        "postTime": 1520210111,
        "uid": 36397,
        "name": "\u6c89\u8fb0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "\u4ee5\u524d\u7528 vector \u8fd9\u6b21\u8bd5\u8bd5\u542c\u53d6\u673a\u623f\u67d0\u795e\u7287\u7684\u610f\u89c1\uff0c\u7528\u94fe\u5f0f\u524d\u5411\u661f\u8bd5\u8bd5\u3002\n\n------------\n\u9996\u5148\uff0c\u8981\u5bf9\u6bd4\u6da8\u4ef7\u524d\u540e\u7684\u5173\u7cfb\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u5148\u8bb0\u5f55\u4e0b\u521d\u59cb\u82b1\u8d39\u3002\u6240\u4ee5\u6211\u4eec\u5148\u5efa\u4e00\u5f20\u56fe\uff0c\u518d\u76f4\u63a5\u8dd1\u4e00\u904d\u6a21\u677f Dijkstra\uff0c\u518d\u7528 dis \u6570\u7ec4\u8bb0\u5f55\u4e0b\u4ece\u539f\u70b9\u5230\u6bcf\u4e2a\u57ce\u5e02\u7684\u82b1\u8d39\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u628a\u56fe\u6e05\u7a7a\u3002\u56e0\u4e3a\u6bcf\u6da8\u4ef7\u4e00\u6761\u8fb9\u90fd\u4f1a\u6709\u591a\u51fa\u6765\u7684\u5b66\u751f\u4e0d\u6ee1\u610f\uff0c\u6240\u4ee5\u8003\u8651\u91cd\u65b0\u628a\u4e0d\u4f1a\u6da8\u4ef7\u7684\u8fb9\u5148\u5efa\u6210\u4e00\u4e2a\u56fe\uff0c\u518d\u8dd1\u4e00\u904d\u6a21\u677f Dijkstra\uff0c\u7528 d \u6570\u7ec4\u8bb0\u5f55\u4e0b\u5f53\u524d\u518d\u539f\u70b9\u5230\u6bcf\u4e2a\u57ce\u5e02\u7684\u82b1\u8d39,\u4ee5\u540e\u7528\u6765\u66f4\u65b0\u548c\u6bd4\u8f83\u5927\u5c0f\u3002\n\n\u7136\u540e\uff0c\u628a\u4f1a\u6da8\u4ef7\u7684\u8fb9\u5012\u5e8f\u4e00\u6761\u4e00\u6761\u7684\u52a0\u8fdb\u53bb\u3002\u628a\u8fb9\u52a0\u8fdb\u53bb\u540e\uff0c\u548c\u8fd9\u6761\u8fb9\u6709\u5173\u7684\u8282\u70b9\u7684\u82b1\u8d39\u80af\u5b9a\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6bcf\u4e00\u6b21\u52a0\u8fb9\u540e\u5bf9\u548c\u8fd9\u6761\u8fb9\u6709\u5173\u8054\u7684\u70b9\u7684\u82b1\u8d39\u8fdb\u884c\u66f4\u65b0\uff0c\u5373\u66f4\u65b0 d \u6570\u7ec4\u3002\u5047\u5982\u66f4\u65b0\u540e\uff0c\u539f\u70b9\u7684\u82b1\u8d39\u6bd4\u539f\u6765\u9ad8\uff0c\u90a3\u5c31\u66f4\u65b0\u7b54\u6848\u3002\n\n\u6700\u540e\uff0c\u56e0\u4e3a\u5982\u679c\u7b2c i \u5e74\u6709\u5b66\u751f\u4e0d\u6ee1\u610f\uff0c\u90a3\u8fd9\u4e9b\u4e0d\u6ee1\u610f\u7684\u5b66\u751f\u5728\u7b2c i+1 \u5e74\u4e5f\u4f1a\u4e0d\u6ee1\u610f\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u7b2c i \u5e74\uff0c\u8981\u7d2f\u8ba11\u5230 i \u5e74\u4e0d\u6ee1\u610f\u7684\u4eba\u6570\u505a\u4e3a\u6700\u7ec8\u7b54\u6848\u3002\n\n**\u6ce8\u610f\uff1a** \u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u4f1a\u88ab\u66f4\u65b0\u4e00\u6b21\n\n------------\n\u634b\u4e00\u4e0b\u601d\u8def\uff1a\n\n1. \u5148\u628a\u539f\u56fe\u5efa\u597d\uff0c\u8dd1\u4e00\u904d Dijkstra\uff0c\u7528 dis \u8bb0\u5f55\u4e0b\u539f\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u82b1\u8d39\u3002\n2. \u628a\u539f\u56fe\u6e05\u7a7a\u3002\n3. \u518d\u8dd1\u4e00\u904d Dijkstra\uff0c\u7528 d \u6570\u7ec4\u8bb0\u5f55\u4e0b\u5f53\u524d\u518d\u539f\u70b9\u5230\u6bcf\u4e2a\u57ce\u5e02\u7684\u82b1\u8d39\n4. \u5012\u5e8f\u52a0\u8fb9\uff0c\u66f4\u65b0\u6709\u5173\u8054\u7684\u70b9\n5. \u7edf\u8ba1\u7b54\u6848\n\n------------\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define N 400010\n#define add(u,v) to[lhr]=v,nxt[lhr]=head[u],head[u]=lhr++;\nusing namespace std;\nqueue<int>Q;\nint n,m,q,tmp,lhr,qq[N];\nint dis[N],vis[N],d[N],b[N];\nint is[N],ans[N],to[N],nxt[N],head[N],e[N][2];\nvoid dfs(int now,int f){//dfs\u7528\u6765\u66f4\u65b0\u4e0e\u5f53\u524d\u52a0\u5165\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6709\u5173\u8054\u7684\u70b9\n\tfor(int i=head[now];i+1;i=nxt[i])\n        if(to[i]!=f && dis[to[i]]==d[now]+1 && dis[to[i]]!=d[to[i]]){\n            d[to[i]]=d[now]+1;\n\t\t\ttmp++;\n            dfs(to[i],now);\n        }\n}\nvoid djstl(int s,int dis[]){//\u6ca1\u6709\u8d1f\u6743\u8fb9\uff0c\u6a21\u677fDijkstra\u5373\u53ef\n\twhile(!Q.empty()) Q.pop();\n\tQ.push(s);\n\tdis[s]=0;\n\tvis[s]=1;\n\twhile(!Q.empty()){\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=head[u],v;i+1;i=nxt[i]){\n\t\t\tif(vis[v=to[i]]) continue;\n\t\t\tdis[v]=dis[u]+1;\n\t\t\tQ.push(v);\n\t\t\tvis[v]=1;\n\t\t}\n\t}\n}\nint main(){\n\tmemset(head,-1,sizeof head);//\u521d\u59cb\u539f\u56fe\u7528\u6570\u7ec4d\u6765\u50a8\u5b58\u8ddd\u79bb\n\tcin>>n>>m>>q;\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>e[i][0]>>e[i][1];\n\t\tadd(e[i][0],e[i][1]);\n\t\tadd(e[i][1],e[i][0]);\n\t}\n\tdjstl(1,dis);\n\tmemset(head,-1,sizeof head);//\u6e05\u7a7a\u6570\u7ec4\uff0c\u51c6\u5907\u4f9d\u6b21\u52a0\u8fb9\n\tlhr=0;\n\tmemset(vis,0,sizeof vis);\n\tfor(int i=1;i<=q;++i){//\u8fd9\u91cc\u662f\u628a\u4e0d\u7528\u6da8\u4ef7\u7684\u8fb9\u5148\u5efa\u4e00\u4e2a\u56fe\n\t\tcin>>qq[i];\n\t\tis[qq[i]]=1;\n\t}\n\tfor(int i=1;i<=m;++i)\n\t\tif(!is[i]){\n\t\t\tadd(e[i][0],e[i][1]);\n\t\t\tadd(e[i][1],e[i][0]);\n\t\t}\n\tdjstl(1,d);\n\tfor(int i=q;i>=1;--i){\n\t\tint x=qq[i],u=e[x][0],v=e[x][1];\n\t\ttmp=0;\n\t\tif(dis[u]==d[u] && dis[v]==d[u]+1 && d[v]!=dis[v]){//\u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u8fb9\u6ca1\u6709\u88ab\u6da8\u4ef7\uff0c\u5e76\u6ca1\u6709\u66f4\u65b0\u8fc7\uff0c\u5f00\u59cb\u66f4\u65b0\n\t\t\ttmp++;\n\t\t\td[v]=dis[v];\n\t\t\tdfs(v,u);\n\t\t}\n        swap(u,v);\n        if(dis[u]==d[u] && dis[v]==d[u]+1 && d[v]!=dis[v]){\n        \ttmp++;\n\t\t\td[v]=dis[v];\n\t\t\tdfs(v,u);\n\t\t}\n       add(u,v);//\u52a0\u8fb9\uff0c\u7edf\u8ba1\u7b54\u6848\n       add(v,u);\n\t   ans[i]=tmp;\n\t}\n\tfor(int i=1;i<=q;++i){//\u7edf\u8ba1\u7b54\u6848\n\t\tans[i]+=ans[i-1];\n\t\tcout<<ans[i]<<endl;\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1645525051,
        "uid": 491321,
        "name": "Erotate",
        "ccfLevel": 0,
        "title": "P1710 \u5730\u94c1\u6da8\u4ef7 \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u662f\u6211\u4eec\u7684\u6a21\u62df\u8d5b\u9898\uff0c\u6211\u6210\u529f\u5207\u6389\u6b64\u9898\u6210\u4e3a\u5168\u573a\u552f\u4e00\u4e00\u4e2a$AC$\uff08\u6709\u4e00\u4e2a\u5de8\u4f6c\u6570\u7ec4\u5f00\u5c0f\u4e86\uff09\n\n\u800c\u4e14\u5c31\u6211\u662f\u5728\u7ebf\u7684\uff01\u5176\u4ed6\u4eba\u90fd\u662f\u79bb\u7ebf\u3002\u3002\u3002\n\n\u9996\u5148\u4e00\u6761\u8fb9\u6539\u53d8\u4e86\u6743\u503c\u53ef\u4ee5\u5f53\u6210\u65ad\u8fb9\u5904\u7406\u3002\n\n\u8003\u8651\u5efa\u51fa\u6700\u77ed\u8def\u6811\u3002\u4f46\u662f\u4e00\u68f5\u6811\u8fb9\u65ad\u6389\u4e86\uff0c\u53ef\u80fd\u8fd8\u6709\u53e6\u4e00\u6761\u6700\u77ed\u8def\u600e\u4e48\u529e\u5462\uff1f\n\n\u90a3\u5c31\u5efa\u51fa\u201c\u6700\u77ed\u8def\u56fe\u201d\uff0c\u6ee1\u8db3$1$\u53f7\u8282\u70b9\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u90fd\u662f\u4e00\u6761\u6700\u77ed\u8def\uff01\u7531\u4e8e\u8fb9\u6743\u90fd\u662f$1$\uff0c\u8fd9\u4e2a\u662f\u53ef\u4ee5\u76f4\u63a5\u5efa\u51fa\u6765\u7684\u3002\n\n\u800c\u4e14\u8fd9\u4e2a\u201c\u6700\u77ed\u8def\u56fe\u201d\u662f\u4e00\u4e2a$DAG!!!$\n\n\u65ad\u6389\u4e00\u6761\u8fb9\uff0c\u5c31\u5728\u6700\u77ed\u8def\u56fe\u4e0a\u5bf9\u5e94\u7ec8\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\uff0c\u5982\u679c\u5165\u5ea6\u51cf\u4e3a$0$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u80fd\u5230\u8fbe\u4e86\uff0c\u518d\u628a\u8fd9\u4e2a\u70b9\u7684\u51fa\u8fb9\u5168\u90e8\u7ed9\u5220\u6389\uff0c\u7ee7\u7eed\u5224\u65ad\u8fd9\u4e2a\u70b9\u51cf\u540e\u5165\u5ea6\u662f\u5426\u4e3a$0$\uff0c\u7ee7\u7eed\u6267\u884c\u3002\u8fd9\u6837\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\n\n\u590d\u6742\u5ea6\u4e3a$O(N+M+Q)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ljc 998244353\nusing namespace std;\n#ifdef Fading\n#define gc getchar\n#endif\n#ifndef Fading\ninline char gc(){\n\tstatic char now[1<<16],*S,*T;\n\tif (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n\treturn *S++;\n}\n#endif\ninline ll read(){\n    register ll x=0,f=1;char ch=gc();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=gc();}\n    return (f==1)?x:-x;\n}\nint dep[1000001],Q,n,m,head[1000001],tot,heade[1000001],tote;\nstruct edge{\n\tint from,to,nxt,ID;\n}g[1000001],e[1000001];\ninline void made(int from,int to){\n\tg[++tot].to=to;g[tot].nxt=head[from];head[from]=tot;\n\tg[tot].from=from;\n}\nint indo[1000001];\ninline void maded(int from,int to){\n\te[++tote].to=to;e[tote].nxt=heade[from];heade[from]=tote;\n\te[tote].from=from;indo[to]++;\n}\nint vis[1000001];\ninline void bfs(){\n\tfor (int i=1;i<=n;i++) dep[i]=999999999;\n\tdep[1]=0;\n\tqueue<int> dl;\n\twhile (!dl.empty()) dl.pop();\n\tdl.push(1);\n\twhile (!dl.empty()){\n\t\tint u=dl.front();dl.pop();\n\t\tfor (int i=head[u];i;i=g[i].nxt){\n\t\t\tint v=g[i].to;\n\t\t\tif (dep[v]==999999999)\n\t\t\t\tdep[v]=dep[u]+1,dl.push(v);\n\t\t}\n\t}\n\tfor (int i=1;i<=tot;i++){\n\t\tint u=g[i].from,v=g[i].to;\n\t\tif (dep[u]+1==dep[v]) maded(u,v),g[i].ID=tote;\n\t}\n}\nsigned main(){\n\tn=read(),m=read(),Q=read();\n\tfor (int i=1;i<=m;i++){\n\t\tint x=read(),y=read();made(x,y);made(y,x);\n\t}\n\tbfs();\n\tint ANS=0;\n\tqueue<int> dl;\n\twhile (Q--){\n\t\tint x=read();\n\t\tint ed=0;\n\t\tif (g[2*x].ID) ed=g[2*x].ID;\n\t\telse if (g[2*x-1].ID) ed=g[2*x-1].ID;\n\t\tif (ed&&!vis[ed]){\n\t\t\tindo[e[ed].to]--;vis[ed]=1;\n\t\t\tif (indo[e[ed].to]<=0){\n\t\t\t\twhile (!dl.empty()) dl.pop();\n\t\t\t\tdl.push(e[ed].to);\n\t\t\t\twhile (!dl.empty()){\n\t\t\t\t\tint u=dl.front();dl.pop();\n\t\t\t\t\tANS++;\n\t\t\t\t\tfor (int i=heade[u];i;i=e[i].nxt){\n\t\t\t\t\t\tif (vis[i]) continue;\n\t\t\t\t\t\tvis[i]=1;\n\t\t\t\t\t\tif ((--indo[e[i].to])<=0){\n\t\t\t\t\t\t\tdl.push(e[i].to);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",ANS);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1559369421,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "30\u5206\u7b97\u6cd5\uff1aQ\u6b21SPFA\u5373\u53ef\u3002\n\n\u4f46\u662f\u5982\u679c\u8981\u6ee1\u5206\uff0cQ\u6b21\u627e\u6700\u77ed\u8def\u663e\u7136\u9700\u8981O(n)\u7684\u7b97\u6cd5\u3002\n\n\u5982\u679c\u53ea\u662f\u987a\u5e8f\u5730\u505a\uff0c\u4f3c\u4e4e\u6ca1\u6709\u4ec0\u4e48\u4f18\u5316\uff0c\u56e0\u4e3a\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u4e0d\u6b62\u4e00\u6761\uff01\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u9006\u5e8f\u7684\u65b9\u6cd5\u3002\u56e0\u4e3a\u662f\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u6da8\u4ef7\u540e\u7684\u8fb9\u4e0d\u53ef\u80fd\u6784\u6210\u4e00\u6761\u6743\u503c\u4e0e\u5f53\u521d\u4e0d\u53d8\u7684\u8def\uff0c\u6240\u4ee5\u679c\u65ad\u5220\u8fb9\u3002\n\n\u5c06Q\u6761\u8fb9\u5148\u5220\u6389\uff0c\u7136\u540e\u4e00\u6761\u4e00\u6761\u5730\u52a0\u8fb9\u3002\n\n\u8fd9\u6837\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u5df2\u7ecf\u6700\u77ed\u5c31\u4e0d\u8981\u7ba1\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e2a\u70b9\u80fd\u591f\u901a\u8fc7\u52a0\u7684\u8fb9\u6765\u6784\u6210\u6700\u77ed\uff0c\u5411\u5468\u56f4\u5ef6\u4f38\u3002\u8fd9\u6837\u65f6\u95f4\u4e3aO(m+n)\uff0c\u603b\u65f6\u95f4\u4e3aO(m+n+q)\n\n\u66f4\u65b0\u65b9\u6cd5\uff1a\u82e5d[t1]==dis[t1] && d[t2]!=dis[t2] && d[t1]+1==dis[t2]\uff0c\u5219\u901a\u8fc7t1\u66f4\u65b0t2\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define MAXN 100001\n#define MAXM 200001\nint i,j,k,n,m,Q;\nint a[MAXM], b[MAXM], ans[MAXM];\nbool judge[MAXM];\nint seq[MAXM], head[MAXN], edgenum;\nstruct Edge\n{\n    int to, next;\n} edge[MAXM << 1];\nint dis[MAXN], d[MAXN];\nint q[MAXN];\nbool exist[MAXN];\nvoid addedge(int u, int v)\n{\n    edge[++edgenum].to=v;\n    edge[edgenum].next=head[u];\n    head[u]=edgenum;\n}\nvoid cutedge(int u)\n{\n    head[u]=edge[edgenum--].next;\n}\nvoid getpath(int dis[])\n{\n    memset(exist,0,sizeof(exist));\n    int f=0, r=0, u;\n    dis[1]=0; q[0]=1; exist[1]=1;\n    while (f<=r)\n    {\n        u = q[f++];\n        for (i = head[u]; i != 0; i = edge[i].next)\n            if (exist[edge[i].to] == 0)\n            {\n                exist[edge[i].to]=1;\n                q[++r]=edge[i].to;\n                dis[edge[i].to]=dis[u]+1;\n            }\n    }\n}\nint dfs(int u)\n{\n    d[u]=dis[u];\n    int res=1;\n    for (int i=head[u]; i!=0; i=edge[i].next)\n        if (d[edge[i].to] != dis[edge[i].to] && d[u]+1==dis[edge[i].to])\n            res+=dfs(edge[i].to);\n    return res;\n}\nint main()\n{\n    memset(d,0x7f7f7f7f,sizeof(d));\n    scanf(\"%d%d%d\",&n,&m,&Q);\n    for (i=1; i<=m; i++)\n        scanf(\"%d%d\",&a[i],&b[i]);\n    for (j=1; j<=Q; j++)\n    {\n        scanf(\"%d\",&seq[j]);\n        judge[seq[j]]=1;\n    }\n    for (i=1; i<=m; i++)\n        if (judge[i] == 0)\n        {\n            addedge(a[i],b[i]);\n            addedge(b[i],a[i]);\n        }\n    for (i=1; i<=Q; i++)\n    {\n        addedge(a[seq[i]],b[seq[i]]);\n        addedge(b[seq[i]],a[seq[i]]);\n    }\n    getpath(dis);\n    for (i=Q; i>=1; i--)\n    {\n        cutedge(b[seq[i]]);\n        cutedge(a[seq[i]]);\n    }\n    getpath(d); //\u521d\u59cb\u5316\u6700\u77ed\u8defdis\u4e0e\u73b0\u5728\u7684\u6700\u77edd \n    for (i=1; i<=n; i++)\n        if (d[i]!=dis[i])\n            ans[Q]++;\n    for (i=Q; i>1; i--)\n    {\n        int t1=a[seq[i]], t2=b[seq[i]];\n        addedge(t1,t2);\n        addedge(t2,t1);\n        int num=0;\n        if (d[t1]==dis[t1] && d[t2]!=dis[t2] && d[t1]+1==dis[t2]) \n            num=dfs(t2);\n        if (d[t2]==dis[t2] && d[t1]!=dis[t1] && d[t2]+1==dis[t1]) \n            num=dfs(t1);\n        ans[i-1]=ans[i]-num;\n    }\n    for (i=1; i<=Q; i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1478077405,
        "uid": 19884,
        "name": "\u7fe0\u7af9\u53f6\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u56fe\u8bba\u9898\uff0c\u9898\u76ee\u7684\u610f\u601d\u662f\u6bcf\u6b21\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u8be2\u95ee\u5f53\u524d\u6709\u591a\u5c11\u70b9\u4e0e1\u53f7\u8282\u70b9\u7684\u6700\u77ed\u8def\u7684\u503c\u4e0e\u672a\u5220\u8fb9\u4e4b\u524d\u4e0d\u540c\u3002\u9996\u5148\u6211\u4eec\u4e00\u5b9a\u662f\u6c42\u51fa\u539f\u56fe\u7684\u6700\u77ed\u8def\uff0c\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u9ed8\u8ba4\u8fb9\u6743\u662f1\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5BFS\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u5f20\u201c\u6700\u77ed\u8def\u56fe\u201d\uff0c\u6240\u8c13\u6700\u77ed\u8def\u56fe\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u6761\u8fb9\uff08u\uff0cv\uff09\uff0c\u6211\u4eec\u53ea\u8d70dis[v]=dis[u]+1\u7684\u8fb9\uff0c\u8fd9\u6837\u5982\u679c\u5220\u9664\u7684\u8fb9\u4e0d\u662f\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8fb9\uff0c\u5bf9\u5176\u4ed6\u70b9\u662f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u7684\uff0c\u90a3\u6211\u4eec\u8003\u8651\u5982\u679c\u5220\u9664\u6700\u77ed\u8def\u56fe\u4e0a\u7684\u8fb9\uff0c\u53ea\u8981\u8fd9\u6761\u8fb9\u7684\u7aef\u70b9\u8fd8\u5728\u6700\u77ed\u8def\u56fe\u4e2d\u80fd\u88ab1\u53f7\u70b9\u8bbf\u95ee\u5230\uff0c\u90a3\u4e48\u5b83\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u4e0d\u4f1a\u53d8\u5316\uff0c\u90a3\u6211\u4eec\u600e\u4e48\u7ef4\u62a4\u5462\uff0c\u611f\u89c9\u6b63\u7740\u505a\u5f88\u4e0d\u597d\u641e\uff0c\u56e0\u4e3a\u5220\u9664\u4e00\u6761\u8fb9\u540e\uff0c\u5373\u4f7f\u5b83\u7684\u4e24\u7aef\u70b9\u4e0d\u4e0e1\u8fde\u901a\uff0c\u5b83\u7684\u4e24\u7aef\u70b9\u7684\u70b9\u4e5f\u53ef\u80fd\u4e0e1\u8fde\u901a\uff0c\u6211\u4eec\u8003\u8651\u6b63\u96be\u5219\u53cd\uff0c\u79bb\u7ebf\u5904\u7406\uff0c\u5c06\u5220\u8fb9\u53d8\u6210\u52a0\u8fb9\uff0c\u7ef4\u62a4\u4e00\u4e2abz\u6570\u7ec4\u8868\u793a\u6bcf\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u548c1\u8fde\u901a\uff0c\u8fd9\u6837\uff0c\u6bcf\u52a0\u8fdb\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u5224\u65ad\u5b83\u80fd\u5426\u5c061\u4e0e\u8fb9\u7684\u51fa\u70b9\u8fde\u901a\uff0c\u5982\u679c\u8fde\u901a\uff0c\u6211\u4eec\u5c31\u4ece\u8fd9\u6761\u8fb9\u7684\u51fa\u70b9DFS\uff0c\u5c06\u6240\u6709bz[i]=0\u7684\u70b9\u53d8\u62101\uff0c\u5bf9\u4e8e\u6bcf\u4e2abz[i]=1\u7684\u70b9\uff0c\u6211\u4eec\u4e0d\u518d\u8fdb\u884cDFS\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u70b9\u53ea\u88ab\u8bbf\u95ee1\u6b21\uff0c\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\u3002\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define maxn 400005\nint n,m,q,l=1,w=0;\nint pre[maxn],other[maxn],last[maxn];\nint pre1[maxn],other1[maxn],last1[maxn];\nint dis[maxn],que[maxn],ans[maxn],query[maxn],cnt;\nbool vis[maxn],flag[maxn],pd[maxn],bj[maxn];\nstruct edge\n{\n    int fr,to;    \n}e[maxn];\nint read(void)\n{\n    char ch=getchar();\n    int x=0;\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch>='0'&&ch<='9') \n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x;\n}\nvoid connect(int x,int y)\n{\n    l++;\n    pre[l]=last[x];\n    last[x]=l;\n    other[l]=y;    \n}\nvoid connect1(int x,int y)\n{\n    w++;\n    pre1[w]=last1[x];    \n    last1[x]=w;\n    other1[w]=y;\n}\nvoid pre_bfs(void) \n{\n    int h=1,t=1;\n    vis[1]=1;que[1]=1;\n    while (h<=t) \n    {\n        int u=que[h];h++;\n        for (int p=last[u];p;p=pre[p]) \n        {\n            int v=other[p];\n            if (vis[v]) continue;\n            dis[v]=dis[u]+1;\n            que[++t]=v;    \n            vis[v]=1;\n        }\n    }\n}\nvoid bfs(void)\n{\n    memset(vis,0,sizeof vis);\n    vis[1]=1;que[1]=1;\n    int h=1,t=1;\n    while (h<=t) \n    {\n        int u=que[h];h++;\n        for (int p=last[u];p;p=pre[p]) \n        {\n            int v=other[p];\n            if (dis[v]==dis[u]+1) flag[p/2]=1;\n            if (vis[v]) continue;\n            que[++t]=v;\n            vis[v]=1;\n        }\n    }\n}\nvoid dfs(int u)\n{\n    cnt++;bj[u]=1;\n    for (int p=last1[u];p;p=pre1[p]) \n    {\n        int v=other1[p];\n        if (bj[v]) continue;\n        dfs(v);\n    }\n}\nint main()\n{\n    //scanf(\"%d%d%d\",&n,&m,&q);\n    n=read();m=read();q=read();\n    for (int i=1;i<=m;i++) \n    {\n        int a,b;\n        //scanf(\"%d%d\",&a,&b);\n        a=read();b=read();\n        e[i].fr=a;e[i].to=b;\n        connect(a,b);connect(b,a);    \n    }\n    pre_bfs();\n    bfs();\n    for (int i=1;i<=q;i++) \n    {\n        int a;\n        //scanf(\"%d\",&a);\n        a=read();\n        pd[a]=1;query[i]=a;\n    }\n    for (int i=1;i<=m;i++) \n        if (dis[e[i].fr]>dis[e[i].to]) swap(e[i].fr,e[i].to);\n    bj[1]=1;cnt=1;\n    for (int i=1;i<=m;i++) \n        if (!pd[i]&&flag[i]) \n        {\n            if (bj[e[i].fr]&&bj[e[i].to]) continue;\n            connect1(e[i].fr,e[i].to);\n            if (bj[e[i].fr]) dfs(e[i].to);    \n        }\n    ans[q]=n-cnt;\n    for (int i=q-1;i>=1;i--) \n    {\n        int num=query[i+1];\n        if ((!(bj[e[num].fr]&&bj[e[num].to]))&&flag[num]) connect1(e[num].fr,e[num].to);\n        if (bj[e[num].fr]&&flag[num]&&!bj[e[num].to]) dfs(e[num].to);\n        ans[i]=n-cnt;    \n    }\n    for (int i=1;i<=q;i++) printf(\"%d\\n\",ans[i]);\n    return 0;    \n}\n```",
        "postTime": 1477787552,
        "uid": 12736,
        "name": "LVYOUYW",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "Orz lcb \u5927\u4f6c\n\n\u53cd\u6b63\u5c31\u662f\u53cd\u5411\u52a0\u8fb9(\u4e5f\u53eb\u65f6\u95f4\u5012\u6d41) \u6bcf\u6b21\u4ece\u52a0\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u8dd1dfs dfs\u662f\u90e8\u5206dfs \u52a0\u8d77\u6765\u4e00\u5171\u4f1a\u8dd1\u6574\u4e2a\u56fe\u4e00\u904d \u6240\u4ee5\u590d\u6742\u5ea6\u5f88\u4f4e\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u4f46\u662fspfa\u5f88\u6162\uff1fsmg\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#define maxn 121020\n#define maxs 201201\n#define INF 1000000007\n#define pii pair<int, int>\nusing namespace std;\nstruct edge{\n    int from, to, next, w;\n}e[maxn * 4], es[maxn * 4];\nint n, m, k, tot = 1, cnt = 0, tots = 1;\nint first[maxn], dist[maxn], q[maxn], a[maxs], s[maxs]; \npii c[maxs];\nint firsts[maxn];\nbool vis[maxs];\nvoid add(int x, int y){\n    e[++tot].from = x;\n    e[tot].to = y;\n    e[tot].next = first[x];\n    first[x] = tot;\n}\nvoid adds(int x, int y){\n    es[++tots].from = x;\n    es[tots].to = y;\n    es[tots].next = firsts[x];\n    firsts[x] = tots;\n}\nvoid spfa(int x){\n    int head = 0, tail = 1;\n    for (int i = 1; i <= n; i++)    dist[i] = INF;\n    dist[1] = 0;\n    memset(vis, 0, sizeof(vis));\n    q[1] = x;    \n    while (head < tail){\n        head = (head + 1) % n;\n        int u = q[head];\n        vis[u] = 1;\n        for (int i = firsts[u]; i; i = es[i].next){\n            int v = es[i].to;\n            if (dist[v] > dist[u] + 1){\n                dist[v] = dist[u] + 1;\n                 if (!vis[v])    {\n                     tail = (tail + 1) % n;\n                     q[tail] = v;\n                     vis[v] = 1;\n                 }\n            }    \n        }\n        vis[u] = 0;\n    }\n}\nvoid dfs(int u, int dep){\n    for (int i = first[u]; i; i = e[i].next){\n        int v = e[i].to;\n        if (!vis[v] && dep + 1 == dist[v]){\n            cnt++;\n            vis[v] = 1;\n            dfs(v, dep + 1);\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d%d\", &n, &m, &k);\n    int x, y;\n    for (int i = 1; i <= m; i++){\n        scanf(\"%d%d\", &x, &y); \n        c[i] = make_pair(x, y);\n        adds(x, y);\n        adds(y, x);\n    }\n    memset(vis, 0, sizeof(vis));\n    for (int i = 1; i <= k; i++){    \n        scanf(\"%d\", &a[i]);\n        vis[a[i]] = 1;\n    }\n    for (int i = 1; i <= m; i++){\n        if (!vis[i])    {\n            x = c[i].first, y = c[i].second;\n            add(x, y);\n            add(y, x);\n        }\n    }\n    memset(vis, 0, sizeof(vis));\n    spfa(1);\n    memset(vis, 0, sizeof(vis));\n    vis[1] = 1;\n    dfs(1, 0);\n    for (int i = k; i > 0; i--){    \n           s[i] = n - cnt - 1;\n        x = c[a[i]].first, y = c[a[i]].second;\n        add(x, y), add(y, x);\n        if (vis[x])    dfs(x, dist[x]);\n        else if (vis[y])    dfs(y, dist[y]);\n    }\n    for (int i = 1; i <= k; i++)    printf(\"%d\\n\", s[i]);\n    return 0;\n}\nOrz jif Auzs\n```",
        "postTime": 1479304764,
        "uid": 13054,
        "name": "Vacuum",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    },
    {
        "content": "\u6211\u592a\u8fa3\u9e21\u4e86\uff0c\u770b\u4e86\u6700\u4e0b\u9762\u7684kkksc03\u7684\u9898\u89e3\uff0c\u4e3b\u8981\u8003\u70b9\u5c31\u662f\u56fe\u7684\u5efa\u6a21\n\n\u4f46\u662fkkksc03\u6ca1\u653e\u4ee3\u7801\uff0c\u6211\u5c31\u653e\u4e0a\u6765\u4e00\u4efd\u5427\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <cctype>\nusing namespace std;\nstruct IO {\n    static const int BUFSZ = 500000;\n    char buf[BUFSZ]; int idx;\n    IO() { idx = BUFSZ; }\n    char getch() {\n        if( idx == BUFSZ ) {\n            fread( buf, 1, BUFSZ, stdin );\n            idx = 0;\n        }\n        return buf[idx++];\n    }\n    int getint() {\n        int num = 0; char ch;\n        while( isspace(ch=getch()) );\n        do {\n            num *= 10; num += ch-'0';\n        }while( !isspace(ch=getch()) );\n        return num;\n    }\n}io;\nstruct Graph {\n    int head[100010],to[400010],nxt[400010],idx;\n    Graph() { idx = 0; memset( head, -1, sizeof(head) ); }\n    void addedge( int u, int v ) {\n        to[idx] = v; nxt[idx] = head[u];\n        head[u] = idx; ++idx;\n    }\n}g;\nint n,m,q;\nint from[200010],to[200010];\nint used[200010]; // 0\u8868\u793a\u4e0d\u4f7f\u7528\uff0c1\u8868\u793a\u7ec8\u70b9\u662ffrom\uff0c2\u8868\u793a\u7ec8\u70b9\u662fto\nint dist[100010];\nint in[100010];\nqueue<int> bfsq;\nvoid bfs() {\n    memset( in, 0, sizeof(in) );\n    memset( dist, -1, sizeof(dist) );\n    bfsq.push(1); dist[1] = 0;\n    while( !bfsq.empty() ) {\n        int u = bfsq.front(); bfsq.pop();\n        for( int p = g.head[u]; p != -1; p = g.nxt[p] ) {\n            int v = g.to[p];\n            if( dist[v] >= 0 && dist[v] == dist[u]+1 ) { // u->v\u662f\u6700\u77ed\u8def\u4e2d\u7684\u4e00\u6761\u8fb9\n                in[v]++;\n                if( to[p/2] == v ) used[p/2] = 2; // \u8def\u7684\u7f16\u53f7\u5373p/2+1\n                else used[p/2] = 1;\n            }\n            if( dist[v] >= 0 && dist[v] > dist[u]+1 ) { // u->v\u4e0d\u662f\u6700\u77ed\u8def\u7684\u4e00\u6761\u8fb9\n                used[p/2] = 0;\n            }\n            if( dist[v] == -1 ) {\n                dist[v] = dist[u]+1; in[v]++; bfsq.push(v);\n                if( to[p/2] == v ) used[p/2] = 2;\n                else used[p/2] = 1;\n            }\n        }\n    }\n}\nint main() {\n    n = io.getint(); m = io.getint(); q = io.getint();\n    for( int i = 0; i < m; ++i ) {\n        int u,v; u = io.getint(); v = io.getint();\n        from[i] = u; to[i] = v;\n        g.addedge(u,v); g.addedge(v,u);\n    }\n    bfs();\n    int ans = 0;\n    for( int i = 0; i < q; ++i ) {\n        int id; id = io.getint();\n        if( used[id-1] == 0 ) {\n            printf( \"%d\\n\", ans );\n        }\n        else {\n            int v = used[id-1] == 1 ? from[id-1] : to[id-1];\n            used[id-1] = 0; // \u5220\u8fb9\n            if( --in[v] == 0 ) {\n                queue<int> topoq; topoq.push(v);\n                while( !topoq.empty() ) {\n                    int u = topoq.front(); topoq.pop();\n                    ++ans;\n                    for( int p = g.head[u]; p != -1; p = g.nxt[p] ) if( used[p/2] ) {\n                        int v = g.to[p]; used[p/2] = 0;\n                        if( --in[v] == 0 ) topoq.push(v);\n                    }\n                }\n            }\n            printf( \"%d\\n\", ans );\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1479210052,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1710 \u3010\u5730\u94c1\u6da8\u4ef7\u3011"
    }
]