[
    {
        "content": "# \u3010WC2005\u3011\u53cc\u9762\u68cb\u76d8\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4121)\n\n\u8fd9\u5929\u505a\u53cc\u9762\u68cb\u76d8\u8fd9\u9053\u9898\uff0c\u53d1\u73b0\u9898\u89e3\u91cc\u9762\u5927\u591a\u90fd\u662f LCT \uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5957\u5e76\u67e5\u96c6\u7684\u5199\u6cd5\u601d\u8def\u8bb2\u8bc4\u5f88\u5c11\u800c\u4e14\u4e0d\u5927\u6e05\u6670\uff0c\u56e0\u6b64\u6709\u4e86\u8fd9\u4e00\u7bc7\u9898\u89e3\u3002\n\n\u7ef4\u62a4\u8054\u901a\u5757\u7684\u6570\u91cf\uff0c\u5f88\u5bb9\u6613\u8054\u60f3\u5230\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u8003\u8651\u66b4\u529b\uff0c\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u6027\uff0c\u6700\u540e\u7edf\u8ba1\u5757\u6570\u5373\u53ef\u3002\u4f46\u662f\u5982\u679c\u6bcf\u6b21\u8fdb\u884c\u683c\u5b50\u7ffb\u8f6c\u7684\u64cd\u4f5c\u90fd\u66b4\u529b\u91cd\u6784\u5e76\u67e5\u96c6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230 $O(N^2M)$ \uff0c\u65e0\u6cd5\u5fcd\u53d7\u3002\n\n\u4e0d\u8003\u8651\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u601d\u8003\u4ece\u5c0f\u4e00\u70b9\u7684\u6570\u636e\u5165\u624b\uff0c\u5047\u8bbe\u8fd9\u4e2a\u68cb\u76d8\u53ea\u6709\u4e00\u884c\uff0c\u5982\uff1a\n```\n0 0 1 1 0 0 \n```\n\u5bb9\u6613\u5f97\u51fa\u8fd9\u4e00\u884c\u6709\u4e24\u4e2a\u767d\u8272\u8054\u901a\u5757\uff0c\u4e00\u4e2a\u9ed1\u8272\u8054\u901a\u5757\u3002\n\n\u5c06\u68cb\u76d8\u60c5\u51b5\u6269\u5c55\u5230\u4e24\u884c\uff0c\u5982\uff1a\n```\n0 0 1 1 0 0\n0 1 1 1 0 0\n```\n\u5bf9\u4e8e\u7b2c\u4e8c\u884c\uff0c\u4e5f\u662f\u4e24\u4e2a\u767d\u8272\u8054\u901a\u5757\uff0c\u4e00\u4e2a\u9ed1\u8272\u8054\u901a\u5757\uff0c\u4f46\u662f\u5f53\u4e0a\u4e0b\u4e24\u884c\u8fde\u8d77\u6765\u65f6\uff0c\u603b\u6570\u4f9d\u65e7\u4e3a\u4e24\u4e2a\u767d\u8272\u8054\u901a\u5757\uff0c\u4e00\u4e2a\u9ed1\u8272\u8054\u901a\u5757\u3002\u5148\u5047\u8bbe\u4e0a\u4e0b\u4e24\u884c\u7684\u8054\u901a\u5757\u4e2a\u6570\u4e0d\u4e92\u76f8\u5f71\u54cd\uff0c\u5373\u603b\u5171\u6709\u56db\u4e2a\u767d\u8272\u8054\u901a\u5757\uff0c\u4e24\u4e2a\u9ed1\u8272\u8054\u901a\u5757\u3002\u5f53\u7b2c\u4e00\u5217\u76f8\u63a5\u65f6\uff0c\u989c\u8272\u76f8\u540c\uff0c\u4f1a\u51cf\u5c11\u4e00\u4e2a\u767d\u8272\u8054\u901a\u5757\uff1b\u5f53\u7b2c\u4e09\u5217\u76f8\u63a5\u65f6\uff0c\u989c\u8272\u76f8\u540c\uff0c\u4f1a\u51cf\u5c11\u4e00\u4e2a\u9ed1\u8272\u8054\u901a\u5757\uff1b\u5f53\u7b2c\u56db\u5217\u76f8\u63a5\u65f6\uff0c\u7531\u4e8e $(1,3)$ \u548c $(1,4)$ \u8054\u901a\uff0c $(2,3)$ \u548c $(2,4)$ \u8054\u901a\uff0c \u521a\u521a\u7b2c\u4e09\u5217\u76f8\u63a5\u6807\u8bb0\u4e86 $(1,3)$ \u548c $(2,3)$ \u8054\u901a\uff0c\u6240\u4ee5\u5728\u5e76\u67e5\u96c6\u4e2d $(1,4)$ \u548c $(2,4)$ \u4e5f\u662f\u8054\u901a\u7684\uff0c\u56e0\u6b64\u5757\u6570\u5e76\u4e0d\u4f1a\u51cf\u5c11\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002\n \n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a\u6bcf\u4e00\u884c\u7684\u8054\u901a\u5757\u4e2a\u6570\u5728\u62fc\u63a5\u65f6\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u591a\u884c\u7684\u8054\u901a\u5757\u4e2a\u6570\u7531**\u76f8\u90bb\u7684\u4e24\u884c\u7684\u8054\u901a\u5757\u4e2a\u6570\u548c\u6bcf\u4e00\u5217\u4e0a\u76f8\u90bb\u4e24\u683c\u7684\u989c\u8272**\u51b3\u5b9a\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4ee5\u884c\u4e3a\u5355\u4f4d\uff0c\u7ef4\u62a4\u597d\u533a\u95f4\u8054\u901a\u5757\u4e2a\u6570\u4ee5\u53ca\u6700\u4e0a\u9762\u4e00\u884c\u548c\u6700\u4e0b\u9762\u4e00\u884c\u7684\u8fde\u901a\u6027\u4fe1\u606f\uff08\u53f6\u5b50\u8282\u70b9\u4e8c\u8005\u90fd\u662f\u5b83\u672c\u8eab\uff09\u3002\u56e0\u4e3a\u5728\u76f8\u63a5\u65f6\u53ea\u6709\u8fd9\u4e24\u884c\u4f1a\u5bf9\u6700\u7ec8\u8054\u901a\u5757\u4e2a\u6570\u4ea7\u751f\u5f71\u54cd\u3002\n\n\u8003\u8651\u7ebf\u6bb5\u6811\uff0c\u5728\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u6bcf\u4e00\u884c\u7684\u8054\u901a\u5757\u4e2a\u6570\uff0c\u7136\u540e\u5408\u5e76\u6bcf\u4e00\u884c\uff0c\u7c7b\u63a8\u5230\u5927\u7684\u533a\u95f4\uff0c\u6700\u540e\u76f4\u63a5\u53d6\u51fa\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53\u4e2d $1$ \u53f7\u8282\u70b9\uff08\u5373\u6574\u4e2a\u68cb\u76d8\uff09\u7684\u8054\u901a\u5757\u4e2a\u6570\u5373\u53ef\u3002\n\n\u884c\u4e0e\u884c\u5408\u5e76\u65f6\u8fdb\u884c pushup \u64cd\u4f5c\uff0c\u76f4\u63a5\u66b4\u529b\u5408\u5e76\uff0c\u904d\u5386\u4e00\u904d\u6bcf\u4e00\u5217\u662f\u5426\u662f\u540c\u4e00\u989c\u8272\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u6211\u4eec\u76f4\u63a5\u91cd\u6784\u8fd9\u4e00\u884c\u7684\u5e76\u67e5\u96c6\u548c\u53f6\u5b50\u8282\u70b9\u4fe1\u606f\uff0c\u7136\u540e\u540c\u6837\u5411\u4e0a pushup \uff0c\u4e0e\u5efa\u6811\u7684\u64cd\u4f5c\u662f\u7c7b\u4f3c\u7684\uff0c\u56e0\u6b64\u5199\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u5bf9\u79f0\u7740\u5199\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N^2+MN \\log^2 N)$\u3002\n\n\u56e0\u4e3a\u7ef4\u62a4\u7684\u662f\u884c\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u4ee3\u7801\u4e2d\u7684\u201c\u5de6\u201d\u8868\u793a\u201c\u4e0a\u201d\uff0c\u201c\u53f3\u201d\u8868\u793a\u201c\u4e0b\u201d\u3002\n\n\u4ee3\u7801\u4e2d\u6709\u66f4\u4e3a\u8be6\u7ec6\u7684\u89e3\u91ca\u3002\n\n~~\u4e2a\u4eba\u611f\u89c9\u7801\u98ce\u5f88\u597d\uff1f~~\n\n```cpp\n#include<bits/stdc++.h>\n#define MAX 210\nusing namespace std;\n\ninline int read()\n{\n    int s=0,w=1;\n    char c=getchar();\n    while(!isdigit(c)) {if(c=='-') w=-1; c=getchar();}\n    while(isdigit(c)) s=(s<<1)+(s<<3)+(c^48),c=getchar();\n    return s*w;\n}\n\nint n,m,x,y;\nint g[MAX][MAX];  //\u5b58\u68cb\u76d8\n\n//\u5e76\u67e5\u96c6\uff0c\u4e8c\u7ef4\u538b\u6210\u4e00\u7ef4\nint fa[MAX*MAX];    \ninline int get(int i,int j)   //\u8ba1\u7b97\u5728\u5e76\u67e5\u96c6\u4e2d\u7684\u7f16\u53f7 \n{\n\treturn (i-1)*n+j;\n} \ninline int find(int x)\n{\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]);\n} \n\n//\u7ebf\u6bb5\u6811  0\u4e3a\u767d\u8272   1\u4e3a\u9ed1\u8272\nstruct Segment_tree\n{\n\tint white,black;   //\u7ef4\u62a4\u5f53\u524d\u8fd9\u51e0\u884c\u7684\u9ed1\u767d\u8054\u901a\u5757\u6570\u91cf\n\tint l,r;        //\u7ef4\u62a4\u5f53\u524d\u8fd9\u51e0\u884c\u7684\u6700\u4e0a\u8fb9\u548c\u6700\u4e0b\u8fb9\u7684\u884c\u662f\u4ec0\u4e48 \n\tint ls[MAX],rs[MAX];   //\u7ef4\u62a4\u5f53\u524d\u8fd9\u51e0\u884c\u7684\u6700\u4e0a\u9762\u4e00\u884c\u548c\u6700\u4e0b\u9762\u4e00\u884c\u7684\u8fde\u901a\u6027\uff08\u5373\u7236\u8282\u70b9\uff09 \n}t[MAX*4];\ninline void pushup(int i)   //\u66b4\u529b\u5408\u5e76\u3001\u7236\u8282\u70b9\u66f4\u65b0 \n{\n\tfor(int j=1;j<=n;j++)\n\t{\n\t\t//\u7236\u4eb2\u8282\u70b9\u7684\u6700\u4e0a\u884c\u662f\u4ed6\u5de6\uff08\u4e0a\uff09\u513f\u5b50\u7684\u6700\u4e0a\u884c\uff0c\u7236\u4eb2\u8282\u70b9\u7684\u6700\u4e0b\u884c\u662f\u4ed6\u53f3\uff08\u4e0b\uff09\u513f\u5b50\u7684\u6700\u4e0b\u884c \n\t\tt[i].ls[j]=t[i<<1].ls[j];\n\t\tt[i].rs[j]=t[i<<1|1].rs[j];\n\t\t//\u91cd\u65b0\u8ba1\u7b97\u8054\u901a\u5757\u4fe1\u606f\uff0c\u521d\u59cb\u5316\u5df2\u7ecf\u8bb0\u5f55\u4e0b\u4e86\u7f16\u53f7\u6240\u4ee5\u4e0d\u7528\u518dget \n\t\tfa[t[i<<1].ls[j]]=t[i<<1].ls[j];\n\t\tfa[t[i<<1].rs[j]]=t[i<<1].rs[j];\n\t\tfa[t[i<<1|1].ls[j]]=t[i<<1|1].ls[j];\n\t\tfa[t[i<<1|1].rs[j]]=t[i<<1|1].rs[j];\n\t}\n\t//\u5148\u5047\u8bbe\u6ca1\u6709\u5408\u5e76\uff0c\u7136\u540e\u518d\u4e00\u70b9\u70b9\u51cf\u53bb \n\tt[i].black=t[i<<1].black+t[i<<1|1].black;\n\tt[i].white=t[i<<1].white+t[i<<1|1].white;\n\tint mid=(t[i].l+t[i].r)>>1;  //\u5bfb\u627e\u4ea4\u754c\u7684\u90e8\u5206 \n\tfor(int j=1;j<=n;j++)\n\t\tif(g[mid][j]==g[mid+1][j])   //\u5982\u679c\u662f\u540c\u4e00\u79cd\u989c\u8272\u5c31\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\n\t\t{\n\t\t//\u76f8\u4ea4\u7684\u90e8\u5206\u4e3a\u5de6\uff08\u4e0a\uff09\u513f\u5b50\u7684\u6700\u4e0b\u7aef\u548c\u53f3\uff08\u4e0b\uff09\u513f\u5b50\u7684\u6700\u4e0a\u7aef \n\t\t\tint l=find(t[i<<1].rs[j]);   \n\t\t\tint r=find(t[i<<1|1].ls[j]);   \n\t\t\tif(l!=r)\n\t\t\t{\n\t\t\t\tfa[l]=r;\n\t\t\t\tif(g[mid][j]==0&&g[mid+1][j]==0) t[i].white--;\n\t\t\t\tif(g[mid][j]==1&&g[mid+1][j]==1) t[i].black--;\n\t\t\t}\n\t\t}\n\t//\u66f4\u65b0\u6839\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u4e00\u5b9a\u8981\u8ba9\u8fb9\u4e0a\u4e3a\u6839\u8282\u70b9 \n\tfor(int j=1;j<=n;j++)\n\t\tt[i].ls[j]=find(t[i].ls[j]),t[i].rs[j]=find(t[i].rs[j]);\n}\ninline void build(int i,int l,int r)   //\u5efa\u6811 \n{\n\tt[i].l=l,t[i].r=r;\n\tif(l==r)   \n\t{\n\t\tfor(int j=1;j<=n;j++)    //\u521d\u59cb\u6bcf\u4e00\u884c\u7684\u6bcf\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u90fd\u662f\u4ed6\u81ea\u5df1\uff0c\u5047\u8bbe\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u662f\u5355\u72ec\u7684\u8054\u901a\u5757 \n\t\t{\n\t\t\tt[i].ls[j]=t[i].rs[j]=fa[get(l,j)]=get(l,j);\n\t\t\tif(g[l][j]==0) t[i].white++;\n\t\t\telse t[i].black++;\n\t\t}\n\t\tfor(int j=2;j<=n;j++)  //\u7edf\u8ba1\u8fd9\u4e00\u884c\u7684\u9ed1\u767d\u8054\u901a\u5757\u4e2a\u6570\uff0c\u53bb\u6389\u91cd\u590d\u8ba1\u7b97\u7684\u8054\u901a\u5757 \n\t\t\tif(g[l][j]==g[l][j-1])\n\t\t\t{\n\t\t\t\tt[i].ls[j]=t[i].rs[j]=fa[get(l,j)]=fa[get(l,j-1)];   //\u6ce8\u610f\u662f\u8fde\u63a5\u5230\u7236\u4eb2\uff01\uff01\uff01 \n\t\t\t\tif(g[l][j]==0) t[i].white--;\n\t\t\t\telse t[i].black--;\n\t\t\t}\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(i<<1,l,mid);\n\tbuild(i<<1|1,mid+1,r);\n\tpushup(i);\n\treturn;\n}\ninline void change(int i,int to)    //\u5355\u884c\u4fee\u6539\n{\n\tif(t[i].l==t[i].r)\n\t{\n\t\tt[i].white=t[i].black=0;   //\u66b4\u529b\u91cd\u65b0\u8ba1\u7b97\uff0c\u6ce8\u610f\u6e05\u96f6\uff0c\u5269\u4e0b\u7684\u64cd\u4f5c\u4e0e\u5efa\u6811\u662f\u4e00\u6837\u7684 \n\t\tfor(int j=1;j<=n;j++)  \n\t\t{\n\t\t\tt[i].ls[j]=t[i].rs[j]=fa[get(to,j)]=get(to,j);\n\t\t\tif(g[t[i].l][j]==0) t[i].white++;\n\t\t\telse t[i].black++;\n\t\t}\n\t\tfor(int j=2;j<=n;j++)\n\t\t\tif(g[t[i].l][j]==g[t[i].l][j-1])\n\t\t\t{\n\t\t\t\tt[i].ls[j]=t[i].rs[j]=fa[get(to,j)]=fa[get(to,j-1)];\n\t\t\t\tif(g[t[i].l][j]==0) t[i].white--;\n\t\t\t\telse t[i].black--;\n\t\t\t}\n\t\treturn;\n\t}\n\tif(t[i<<1].r>=to) change(i<<1,to); \n\tif(t[i<<1|1].l<=to) change(i<<1|1,to);\n\tpushup(i);\n\treturn;\n}\n\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tg[i][j]=read();\n\tbuild(1,1,n);\n\tm=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=read(),y=read();\n\t\tg[x][y]=(g[x][y]==0)?1:0;\n\t\tchange(1,x);\n\t\tprintf(\"%d %d\\n\",t[1].black,t[1].white);\n\t}\n\treturn 0;\n}\n```\n\nupdata 2022.8.5  \u611f\u8c22@\u8001\u5b50\u662f\u5317\u74dc\uff0c\u4fee\u6539\u4e86\u9519\u8bef\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002",
        "postTime": 1658215888,
        "uid": 739297,
        "name": "forqprever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\uff1a\u3010WC2005\u3011\u53cc\u9762\u68cb\u76d8"
    },
    {
        "content": "[P4121 [WC2005]\u53cc\u9762\u68cb\u76d8](https://www.luogu.org/problemnew/show/P4121)\n\n\u8d81\u6ca1\u6709\u7ebf\u6bb5\u6811\u5957\u5e76\u67e5\u96c6\u7684\u9898\u89e3\u8d76\u7d27\u62a2\u4e00\u53d1\u4e00\u8840\u3002\u3002\u3002\n\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u884c\u7684\u540c\u8272\u5757\uff0c\u6bcf\u4e2a\u8282\u70b9\u5957\u5e76\u67e5\u96c6\u3002\n\n\u8bb0\u5f55\u6700\u4e0a\u65b9\u548c\u6700\u4e0b\u65b9\u7684\u8054\u901a\u6027\uff0c\u66b4\u529b\u5408\u5e76+\u66b4\u529b\u4fee\u6539\u5e76\u67e5\u96c6\uff0c\u5e76\u8bb0\u5f55\u7b54\u6848\u3002\n\n\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u6bd4\u8f83\u6076\u5fc3\u3002\u3002\u3002\n\n\u6211\u662f\u770b\u8fd9\u4f4d\u5de8\u4f6c\u7684\u535a\u5ba2\u5f04\u61c2\u7684\uff1a[\u94fe\u63a5](https://blog.csdn.net/iamzky/article/details/42084993)\n\n\u7528\u5e76\u67e5\u96c6\u4e2d\u7684$[1,n]$\u8868\u793a\u4e0a\u65b9\uff0c$[n+1,2n]$\u8868\u793a\u4e0b\u65b9\u3002\n\n\u5408\u5e76\u65f6$[2n+1,4n]$\u7528\u4e8e\u53f3\u4fa7\u7684\u4e0a\u4e0b\u65b9\u5e76\u67e5\u96c6\u3002\n\n\u8bdd\u8bf4\u6211\u7684\u7ebf\u6bb5\u6811\u5e38\u6570\u7092\u9e21\u5927\uff0c\u5361\u4e86\u597d\u4e45\u624d\u5361\u8fc7\u53bb\u7684\u3002\u3002\u3002\n\n[\u6709\u7a7a\u5230\u672c\u849f\u84bb\u7684\u535a\u5ba2\u91cc\u5750\u5750\u561b\uff01](https://www.cnblogs.com/Yangrui-Blog/p/9550759.html)\n\n\u9644\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#define LSON rt<<1\n#define RSON rt<<1|1\n#define DATA(x) a[x].data\n#define WHITE(x) a[x].white\n#define BLACK(x) a[x].black\n#define LSIDE(x) a[x].l\n#define RSIDE(x) a[x].r\n#define MAXN 210\nusing namespace std;\nint n,m;\nint chess[MAXN][MAXN],map[MAXN<<2];\nstruct Set{\n\tint father[MAXN<<2];\n\tinline void init(){for(int i=0;i<=(n<<2);i++)father[i]=i;}\n\tint find(int x){return father[x]==x?x:father[x]=find(father[x]);}\n\tinline void uniun(int x,int y){father[find(x)]=find(y);}\n\tinline bool check(int x,int y){return (find(x)==find(y));}\n};\nstruct Segment_Tree{\n\tSet data;\n\tint white,black,l,r;\n}a[MAXN<<2];\ninline int read(){\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nvoid pushup(int rt){\n\tint mid=LSIDE(rt)+RSIDE(rt)>>1;\n\tWHITE(rt)=WHITE(LSON)+WHITE(RSON);\n\tBLACK(rt)=BLACK(LSON)+BLACK(RSON);\n\tDATA(rt).init();\n\tfor(int i=1;i<=(n<<1);i++){\n\t\tDATA(rt).uniun(i,DATA(LSON).find(i));\n\t\tDATA(rt).uniun(i+(n<<1),DATA(RSON).find(i)+(n<<1));\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(chess[mid][i]==chess[mid+1][i]){\n\t\tif(DATA(rt).check(i+n,i+(n<<1)))continue;\n\t\tDATA(rt).uniun(i+n,i+(n<<1));\n\t\tWHITE(rt)-=chess[mid][i]^1;\n\t\tBLACK(rt)-=chess[mid][i];\n\t}\n\tfor(int i=1;i<=(n<<2);i++){\n\t\tDATA(rt).find(i);\n\t\tmap[i]=0;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!map[DATA(rt).father[i]]){\n\t\t\tmap[DATA(rt).father[i]]=i;\n\t\t\tDATA(rt).father[i]=i;\n\t\t}\n\t\telse DATA(rt).father[i]=map[DATA(rt).father[i]];\n\t}\n\tfor(int i=n*3+1;i<=(n<<2);i++){\n\t\tif(!map[DATA(rt).father[i]]){\n\t\t\tmap[DATA(rt).father[i]]=i-(n<<1);\n\t\t\tDATA(rt).father[i]=i-(n<<1);\n\t\t}\n\t\telse DATA(rt).father[i]=map[DATA(rt).father[i]];\n\t}\n\tfor(int i=1;i<=n;i++)DATA(rt).father[i+n]=DATA(rt).father[i+n*3];\n\tfor(int i=(n<<1)+1;i<=(n<<2);i++)DATA(rt).father[i]=i;\n}\nvoid buildtree(int l,int r,int rt){\n\tLSIDE(rt)=l;RSIDE(rt)=r;\n\tif(l==r){\n\t\tWHITE(rt)=chess[l][1]^1;\n\t\tBLACK(rt)=chess[l][1];\n\t\tDATA(rt).init();\n\t\tDATA(rt).uniun(1+n,1);\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tDATA(rt).uniun(i+n,i);\n\t\t\tif(chess[l][i-1]==chess[l][i])DATA(rt).uniun(i,i-1);\n\t\t\telse{\n\t\t\t\tWHITE(rt)+=chess[l][i]^1;\n\t\t\t\tBLACK(rt)+=chess[l][i];\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuildtree(l,mid,LSON);\n\tbuildtree(mid+1,r,RSON);\n\tpushup(rt);\n}\nvoid update(int k,int rt){\n\tif(LSIDE(rt)==RSIDE(rt)){\n\t\tWHITE(rt)=chess[k][1]^1;\n\t\tBLACK(rt)=chess[k][1];\n\t\tDATA(rt).init();\n\t\tDATA(rt).uniun(1+n,1);\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tDATA(rt).uniun(i+n,i);\n\t\t\tif(chess[k][i-1]==chess[k][i])DATA(rt).uniun(i,i-1);\n\t\t\telse{\n\t\t\t\tWHITE(rt)+=chess[k][i]^1;\n\t\t\t\tBLACK(rt)+=chess[k][i];\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tint mid=LSIDE(rt)+RSIDE(rt)>>1;\n\tif(k<=mid)update(k,LSON);\n\telse update(k,RSON);\n\tpushup(rt);\n}\nint main(){\n\tint x,y;\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++)\n\tchess[i][j]=read();\n\tbuildtree(1,n,1);\n\tm=read();\n\twhile(m--){\n\t\tx=read();y=read();\n\t\tchess[x][y]^=1;\n\t\tupdate(x,1);\n\t\tprintf(\"%d %d\\n\",BLACK(1),WHITE(1));\n\t}\n    return 0;\n}\n\n```",
        "postTime": 1535505646,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    },
    {
        "content": "\u76f4\u63a5\u7ebf\u6bb5\u6811\u5206\u6cbb $+$ \u5e26\u64a4\u9500\u7684\u5e76\u67e5\u96c6\u5c31\u597d\u4e86\n\n\u6309\u7167\u65f6\u95f4\u5206\u6cbb\u5373\u53ef\n\n\u975e\u5e38\u7684\u6a21\u677f\u554a\u3002\u3002\u3002\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nnamespace IO {\n    const int maxn(1 << 21 | 1);\n\n    char ibuf[maxn], *iS, *iT, c;\n    int f;\n\n    inline char Getc() {\n        return iS == iT ? (iT = (iS = ibuf) + fread(ibuf, 1, maxn, stdin), (iS == iT ? EOF : *iS++)) : *iS++;\n    }\n\n    template <class Int> inline void In(Int &x) {\n        for (f = 1, c = Getc(); c < '0' || c > '9'; c = Getc()) f = c == '-' ? -1 : 1;\n        for (x = 0; c >= '0' && c <= '9'; c = Getc()) x = x * 10 + (c ^ 48);\n        x *= f;\n    }\n}\n\nusing IO :: In;\n\nconst int maxn(1e5 + 5);\n\nint n, m, nn, tot, col[205][205], id[2][205][205], lst[maxn * 10], fr[maxn * 10], to[maxn * 10], cntw[maxn];\nmap < pair <int, int>, int> pid;\n\nstruct Info {\n\tint c, u, v;\n};\n\nvector <Info> mdy[maxn << 1];\n\nstruct DSU {\n\tint fa[maxn], deep[maxn], top, cnt;\n\n\tstruct Stack {\n\t\tint fx, dy;\n\t} sta[maxn];\n\n\tinline void Init(int num) {\n\t\tfor (int i = 1; i <= num; ++i) fa[i] = i;\n\t}\n\n\tint Find(int x) {\n\t\treturn fa[x] == x ? x : Find(fa[x]);\n\t}\n\n\tinline void Merge(int u, int v) {\n\t\tint fx = Find(u), fy = Find(v);\n\t\tif (fx == fy) return;\n\t\tif (deep[fx] > deep[fy]) swap(fx, fy);\n\t\tsta[++top] = (Stack){fx, deep[fy]};\n\t\tfa[fx] = fy, ++cnt;\n\t\tif (deep[fx] == deep[fy]) ++deep[fy];\n\t}\n\n\tinline void Undo(int tp) {\n\t\twhile (top > tp) {\n\t\t\tdeep[fa[sta[top].fx]] = sta[top].dy;\n\t\t\tfa[sta[top].fx] = sta[top].fx;\n\t\t\t--cnt, --top;\n\t\t}\n\t}\n} blk, wht;\n\nvoid Modify(int x, int l, int r, int ql, int qr, Info v) {\n\tif (ql <= l && qr >= r) mdy[x].push_back(v);\n\telse {\n\t\tint mid = (l + r) >> 1;\n\t\tif (ql <= mid) Modify(x << 1, l, mid, ql, qr, v);\n\t\tif (qr > mid) Modify(x << 1 | 1, mid + 1, r, ql, qr, v);\n\t}\n}\n\n# define mr make_pair\n\ninline void Add(int u, int v) {\n\tpid[mr(u, v)] = ++tot, fr[tot] = u, to[tot] = v;\n}\n\ninline void Cut(int c, int u, int v, int tim) {\n\tif (u > v) swap(u, v);\n\tModify(1, 0, m, lst[pid[mr(u, v)]], tim - 1, (Info){c, u, v});\n\tlst[pid[mr(u, v)]] = -1;\n}\n\ninline void Link(int u, int v, int tim) {\n\tif (u > v) swap(u, v);\n\tlst[pid[mr(u, v)]] = tim;\n}\n\nvoid Solve(int x, int l, int r) {\n\tint top1 = blk.top, top2 = wht.top;\n\tfor (int i = 0, s = mdy[x].size(); i < s; ++i) {\n\t\tint c = mdy[x][i].c, u = mdy[x][i].u, v = mdy[x][i].v;\n\t\tc ? blk.Merge(u - nn, v - nn) : wht.Merge(u, v);\n\t}\n\tif (l == r) {\n\t\tif (l) printf(\"%d %d\\n\", nn - cntw[l] - blk.cnt, cntw[l] - wht.cnt);\n\t\tblk.Undo(top1), wht.Undo(top2);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tSolve(x << 1, l, mid), Solve(x << 1 | 1, mid + 1, r);\n\tblk.Undo(top1), wht.Undo(top2);\n}\n\nint main() {\n\tmemset(lst, -1, sizeof(lst)), memset(col, -1, sizeof(col));\n\tIn(n), nn = n * n, blk.Init(nn), wht.Init(nn);\n\tfor (int i = 1, t = 0; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j) In(col[i][j]), id[0][i][j] = ++t;\n\tfor (int i = 1, t = nn; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j) id[1][i][j] = ++t;\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j) {\n\t\t\tif (i != n) Add(id[0][i][j], id[0][i + 1][j]), Add(id[1][i][j], id[1][i + 1][j]);\n\t\t\tif (j != n) Add(id[0][i][j], id[0][i][j + 1]), Add(id[1][i][j], id[1][i][j + 1]);\n\t\t\tcntw[0] += col[i][j] == 0;\n\t\t}\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= n; ++j) {\n\t\t\tint c = col[i][j];\n\t\t\tif (i != n && c == col[i + 1][j]) Link(id[c][i][j], id[c][i + 1][j], 0);\n\t\t\tif (j != n && c == col[i][j + 1]) Link(id[c][i][j], id[c][i][j + 1], 0);\n\t\t}\n\tIn(m);\n\tfor (int i = 1, x, y, c; i <= m; ++i) {\n\t\tIn(x), In(y), c = col[x][y], cntw[i] = cntw[i - 1];\n\t\tif (col[x - 1][y] == c) Cut(c, id[c][x][y], id[c][x - 1][y], i);\n\t\tif (col[x + 1][y] == c) Cut(c, id[c][x][y], id[c][x + 1][y], i);\n\t\tif (col[x][y - 1] == c) Cut(c, id[c][x][y], id[c][x][y - 1], i);\n\t\tif (col[x][y + 1] == c) Cut(c, id[c][x][y], id[c][x][y + 1], i);\n\t\tif (!col[x][y]) --cntw[i];\n\t\tc ^= 1, col[x][y] ^= 1;\n\t\tif (!col[x][y]) ++cntw[i];\n\t\tif (col[x - 1][y] == c) Link(id[c][x][y], id[c][x - 1][y], i);\n\t\tif (col[x + 1][y] == c) Link(id[c][x][y], id[c][x + 1][y], i);\n\t\tif (col[x][y - 1] == c) Link(id[c][x][y], id[c][x][y - 1], i);\n\t\tif (col[x][y + 1] == c) Link(id[c][x][y], id[c][x][y + 1], i);\n\t}\n\tfor (int i = 1; i <= tot; ++i) if (lst[i] != -1) Cut(fr[i] > nn, fr[i], to[i], m + 1);\n\tSolve(1, 0, m);\n    return 0;\n}\n```",
        "postTime": 1538222039,
        "uid": 47640,
        "name": "Cyhlnj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u601d\u8def\u4e0d\u96be\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u7ef4\u62a4\u52a8\u6001\u56fe\u7684\u8fde\u901a\u5757\u4e2a\u6570\u3002  \n\u4e0b\u9762\u5148\u8ba8\u8bba\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u60c5\u51b5\uff1a[\u52a8\u6001\u56fe\u8fde\u901a\u5757](https://www.luogu.org/problemnew/show/U94348) \n\n\u76f4\u63a5\u5728\u7ebf\u7ef4\u62a4\u5f88\u9ebb\u70e6\uff0c\u53ef\u4ee5\u8003\u8651\u79bb\u7ebf\uff0c\u8bb0\u5f55\u6bcf\u6761\u8fb9\u51fa\u73b0\u7684\u65f6\u95f4\u6bb5\uff0c\u628a\u5b83\u4eec\u6807\u8bb0\u5728\u7ebf\u6bb5\u6811\u4e0a\u3002  \n\n\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u5206\u6cbb\uff0c\u7528\u53ef\u64a4\u9500\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\uff1a\u5728\u5206\u6cbb\u4e2d\u52a0\u5165\u4e00\u6761\u8fb9\u65f6\uff0c\u5c31\u76f4\u63a5\u5408\u5e76\uff0c\u540c\u65f6\u628a\u8fde\u901a\u5757\u6570\u91cf $-1$\uff1b\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u5c31\u64a4\u9500\u6389\u521a\u624d\u5408\u5e76\u7684\u64cd\u4f5c\uff0c\u518d\u628a\u8fde\u901a\u5757\u6570\u91cf\u52a0\u56de\u6765\u3002  \n\n\u8fd9\u6837\u5c31\u7b80\u5355\u7684\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\text O(q \\log q \\log n)$\u3002\n****\n\u4f46\u662f\u8fd9\u9898\u5c31\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff0c\uff0c\n\n\u5728\u8fd9\u9898\u4e2d\u4e5f\u662f\u7c7b\u4f3c\u7684\u505a\u6cd5\uff0c\u7528\u4e24\u4e2a\u5e76\u67e5\u96c6\uff0c\u5206\u522b\u8bb0\u5f55\u9ed1\u767d\u5757\u7684\u8fde\u901a\u72b6\u51b5\u3002\u5bf9\u4e8e\u76f8\u540c\u989c\u8272\u5757\uff0c\u4e24\u70b9\u95f4\u8981\u8fde\u4e00\u6761\u8fb9\u3002\u7136\u540e\u57fa\u672c\u6309\u7167\u4e0a\u9762\u7684\u505a\u6cd5\u5199\u5c31\u53ef\u4ee5\u4e86\u3002  \n\n\u4f46\u662f\u4f60\u5199\u5b8c\u4e4b\u540e\u4e00\u6d4b\u6837\u4f8b\uff0c\u53d1\u73b0\u7b54\u6848\u5927\u4e86\u5f88\u591a\uff0c\u662f\u56e0\u4e3a\u7ef4\u62a4\u4e00\u79cd\u989c\u8272\u7684\u7b54\u6848\u65f6\uff0c\u4f1a\u591a\u52a0\u4e0a\u53e6\u4e00\u79cd\u989c\u8272\u6570\u91cf\u3002\u6240\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u65f6\u523b\u9ed1\u3001\u767d\u5757\u6570\u5c31\u597d\u4e86\uff08  \n\nps\uff1a\u4e5f\u53ef\u4ee5\u7528 Link-Cut Tree \u6765\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u6837\u7684\uff0c\u4f46\u5e38\u6570\u663e\u800c\u6613\u89c1\u5730\u5927\uff1b\u800c\u8fd9\u91cc\u53ea\u7528\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a  \n```cpp\n#include<cstdio> \n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<map>\n#define reg register\n#define ll long long\n#define N 40003\n#define mid ((l+r)>>1)\nusing namespace std;\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n\nstruct edge{\n\tint u,v;\n\tinline edge(int u=0,int v=0):u(u),v(v){}\n\tinline bool operator < (const edge& x) const{\n\t\treturn u==x.u?v<x.v:u<x.u;\n\t}\n};\n\nconst int dx[4] = {1,-1,0,0};\nconst int dy[4] = {0,0,1,-1};\nint n,m,q;\nint blk[N]; //\u53ea\u8bb0\u5f55\u9ed1\u5757\u6570\u91cf\u5c31\u591f\u4e86\n\nstruct solver{ //\u5bf9\u4e8e\u9ed1\u767d\u5206\u522b\u8ba1\u7b97\n\tint fa[N],size[N],stk[N],ans[N];\n\tvector<edge> adj[N<<1];\n\tmap<edge,int> mp;\n\tint top,cnt,qwq;\n\t\n\tvoid init(){\n\t\tcnt = n;\n\t\tfor(reg int i=1;i<=n;++i)\n\t\t\tfa[i] = i,size[i] = 1;\t\n\t}\n\t\n\tinline int find(int x){\n\t\twhile(x!=fa[x]) x = fa[x];\n\t\treturn x;\t\n\t}\n\t\n\tinline void merge(int u,int v){ //\u6309\u79e9\u5408\u5e76\n\t\tint fu = find(u),fv = find(v);\n\t\tif(fu==fv) return;\n\t\t--cnt;\n\t\tif(size[fu]<size[fv]) swap(fu,fv);\n\t\tfa[fv] = fu;\n\t\tsize[fu] += size[fv];\t\n\t\tstk[++top] = fv;\n\t}\n\t\n\tinline void cancel(){ //\u64a4\u9500\n\t\t++cnt;\n\t\tint u = stk[top--];\n\t\tsize[fa[u]] -= size[u];\n\t\tfa[u] = u;\n\t}\t\n\t\n\tvoid insert(int nl,int nr,int l,int r,int u,edge k){\n\t\tif(nl<=l&&r<=nr) return adj[u].push_back(k);\n\t\tif(nl<=mid) insert(nl,nr,l,mid,u<<1,k);\n\t\tif(nr>mid) insert(nl,nr,mid+1,r,u<<1|1,k);\n\t}\n\t \n\tvoid solve(int l,int r,int k){\n\t\tint lst = top,ln = adj[k].size();\n\t\tfor(reg int i=0;i!=ln;++i) merge(adj[k][i].u,adj[k][i].v);\t//\u52a0\u5165\u8fb9\n\t\tif(l==r) ans[++qwq] = cnt;\n\t\telse{\n\t\t\tsolve(l,mid,k<<1);\n\t\t\tsolve(mid+1,r,k<<1|1);\t\n\t\t}\n\t\twhile(top>lst) cancel(); //\u56de\u6eaf\n\t}\n};\n\nsolver G[2];\nint a[N],tr[203][203];\n\nint main(){ \n\tint x = 0,y,nx,ny,u,v,tim,k;\n    read(n);\n    m = n,n *= n;\n    G[0].init();\n    G[1].init();\n    for(reg int i=1;i<=m;++i)\n    for(reg int j=1;j<=m;++j){\n    \ttr[i][j] = ++x;\n    \tread(a[x]);\n    \tif(a[x]==1) ++blk[0];\n    }\n    for(reg int i=1;i<=m;++i)\n    for(reg int j=1;j<=m;++j){\n    \tfor(reg int k=0;k<4;++k){\n\t\t\tnx = i+dx[k],ny = j+dy[k];\n\t\t\tif(nx<1||nx>m||ny<1||ny>m) continue;\n\t\t\tu = tr[i][j];\n\t\t\tv = tr[nx][ny];\n\t\t\tif(u>v) swap(u,v);\n\t\t\tif(a[u]==a[v]) G[a[u]].mp[edge(u,v)] = 1; //\u540c\u8272,\u8fde\u8fb9\n\t\t}\n    }\n    read(q);\n    for(reg int i=1;i<=q;++i){\n    \tread(x),read(y);\n\t\tu = tr[x][y];\n\t\tblk[i] = blk[i-1]+(a[u]==1?-1:1);\n\t\ta[u] ^= 1;\n\t\tfor(reg int j=0;j<4;++j){\n\t\t\tnx = x+dx[j],ny = y+dy[j];\n\t\t\tif(nx<1||nx>m||ny<1||ny>m) continue;\n\t\t\tu = tr[x][y];\n\t\t\tv = tr[nx][ny];\n\t\t\tk = a[v];\n\t\t\tif(u>v) swap(u,v);\n\t\t\tif(a[u]==a[v]) G[a[u]].mp[edge(u,v)] = i;\n\t\t\telse{ //\u4e0d\u540c\u8272,\u65ad\u5f00\u5e76\u5728\u7ebf\u6bb5\u6811\u4e0a\u6807\u8bb0\n\t\t\t\tif(!G[k].mp.count(edge(u,v))) continue;\n\t\t\t\ttim = G[k].mp[edge(u,v)];\n\t\t\t\tif(i>tim) G[k].insert(tim,i-1,1,q,1,edge(u,v));\n\t\t\t\tG[k].mp.erase(edge(u,v));\n\t\t\t}\n\t\t}\n    }\n    for(reg int k=0;k!=2;++k){ //\u6700\u540e\u5269\u7684\u8fb9\u518d\u52a0\u5230\u7ebf\u6bb5\u6811\u4e0a\n    \tmap<edge,int>::iterator it = G[k].mp.begin(),ed = G[k].mp.end();\n\t\tfor(;it!=ed;++it){\n\t\t\tG[k].insert(it->second,q,1,q,1,it->first);\t\n\t\t}\n    }\n    G[0].solve(1,q,1);\n\tG[1].solve(1,q,1);\n    for(reg int i=1;i<=q;++i){\n    \tx = G[1].ans[i],y = G[0].ans[i];\n\t\tx = x-(n-blk[i]);\n\t\ty = y-blk[i];\n\t\tprintf(\"%d %d\\n\",x,y);\t\n    }\n    return 0;\n}\n```",
        "postTime": 1573745912,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    },
    {
        "content": "[\u5728\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/chenxiaoran666/p/BZOJ1453.html)\n\n**\u5927\u81f4\u9898\u610f\uff1a** \u7ed9\u4f60\u4e00\u4e2a$n*n$\u7684\u9ed1\u767d\u68cb\u76d8\uff0c\u6bcf\u6b21\u5c06\u4e00\u4e2a\u683c\u5b50\u7ffb\u8f6c\uff0c\u5206\u522b\u6c42\u9ed1\u8272\u8fde\u901a\u5757\u548c\u767d\u8272\u8fde\u901a\u5757\u7684\u4e2a\u6570\u3002\n\n------\n\n#### $LCT$\u52a8\u6001\u7ef4\u62a4\u56fe\u8fde\u901a\u6027\n\n\u5173\u4e8e\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u9053\u4f8b\u9898\uff1a[\u3010BZOJ4025\u3011\u4e8c\u5206\u56fe](https://www.cnblogs.com/chenxiaoran666/p/BZOJ4025.html)\u3002\n\n------\n\n#### \u5927\u81f4\u601d\u8def\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u540c\u79cd\u989c\u8272\u7684\u76f8\u90bb\u683c\u5b50\u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u95ee\u9898\u642c\u5230\u56fe\u4e0a\u3002\n\n\u7136\u540e\u8003\u8651\u5148\u79bb\u7ebf\uff0c\u628a\u6bcf\u4e24\u4e2a\u683c\u5b50\u95f4\u8fb9\u7684\u52a0\u5165\u4e0e\u5220\u9664\u7684\u65f6\u95f4\uff08\u540c\u4e00\u6761\u8fb9\u53ef\u80fd\u88ab\u52a0\u5165\u548c\u5220\u9664\u591a\u6b21\uff09\u8bb0\u5f55\u4e0b\u6765\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528$LCT$\u52a8\u6001\u7ef4\u62a4\u56fe\u8fde\u901a\u6027\u4e86\u3002\n\n\u4f46\u6ce8\u610f\u8fd9\u9053\u9898\u6bd4\u8f83\u6076\u5fc3\uff0c\u9700\u8981\u4f60\u6bcf\u6b21\u6c42\u51fa\u4e24\u79cd\u989c\u8272\u7684\u8fde\u901a\u5757\u4e2a\u6570\u3002\n\n\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u66b4\u529b\u679a\u4e3e$LCT$\u7684\u6bcf\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u5224\u65ad\u5176\u4e3a\u9ed1\u8272\u8fd8\u662f\u767d\u8272\uff08\u6211\u4eec\u53ef\u4ee5\u7ed9\u6bcf\u6761\u8fb9\u4e5f\u8bb0\u5f55\u4e0b\u5bf9\u5e94\u7684\u989c\u8272\uff09\uff0c\u4ece\u800c\u7edf\u8ba1\u7b54\u6848\uff0c\u4f46\u662f\u6beb\u65e0\u60ac\u5ff5\u5730$TLE$\u4e86\u3002\n\n\u770b\u6765\uff0c\u53ea\u80fd\u5728\u5220\u8fb9\u4e0e\u52a0\u8fb9\u7684\u540c\u65f6\u52a8\u6001\u7ef4\u62a4\u4e86\u3002\n\n\u5728\u52a0\u8fb9\u65f6\uff0c\u82e5\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u4e0d\u540c\u7684\u6811\u4e2d\uff0c\u5c31\u8bf4\u660e\u8981\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u56e0\u6b64\u5c06\u8be5\u989c\u8272\u8fde\u901a\u5757\u4e2a\u6570\u51cf$1$\u3002\n\n\u5728\u5220\u8fb9\u65f6\uff0c\u82e5\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u4f9d\u9760\u8fd9\u6761\u8fb9\u8fde\u901a\uff0c\u5373\u8fd9\u6761\u8fb9\u539f\u5148\u5e76\u6ca1\u6709\u5728$LCT$\u4e2d\u88ab\u5220\u6389\u8fc7\uff0c\u5c31\u8bf4\u660e\u4f1a\u4f7f\u4e00\u4e2a\u8fde\u901a\u5757\u5206\u6210\u4e24\u4e2a\uff0c\u56e0\u6b64\u5c06\u8be5\u989c\u8272\u8fde\u901a\u5757\u4e2a\u6570\u52a0$1$\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4f60\u7ffb\u8f6c\u4e00\u4e2a\u683c\u5b50\u65f6\uff0c\u8981\u5c06\u539f\u5148\u989c\u8272\u7684\u8fde\u901a\u5757\u4e2a\u6570\u51cf$1$\uff0c\u5e76\u5c06\u65b0\u989c\u8272\u7684\u8fde\u901a\u5757\u4e2a\u6570\u52a0$1$\uff0c\u4e0d\u7136\u5728\u52a0\u8fb9\u5220\u8fb9\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u51fa\u73b0\u91cd\u590d\u8ba1\u7b97\u7684\u95ee\u9898\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u89c1\u4ee3\u7801\u3002\n\n------\n\n#### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define Reg register\n#define RI Reg int\n#define Con const\n#define CI Con int&\n#define I inline\n#define W while\n#define N 200\n#define M 10000\n#define E ((N*N<<2)+(M<<3))\n#define P(x,y) (((x)-1)*n+(y))\n#define swap(x,y) (x^=y^=x^=y)\n#define mp make_pair\n#define INF 1e9\nusing namespace std;\nconst int dx[4]={1,-1,0,0},dy[4]={0,0,1,-1};\nint n,m,ans[2],a[N*N+5],s[N*N+5],qx[M+5],qy[M+5],tx[N*N+E+5],ty[N*N+E+5],lst[N*N+E+5];map<pair<int,int>,int> t;\nstruct Operate//\u5b58\u50a8\u4e0b\u6bcf\u4e00\u4e2a\u64cd\u4f5c\n{\n    int x,y,c,t,f,p,d;\n    I Operate(CI a=0,CI b=0,CI co=0,CI ti=0,CI fl=0):x(a),y(b),c(co),t(ti),f(fl){}\n}o[E+5];\nclass FastIO\n{\n    private:\n        #define FS 100000\n        #define tc() (A==B&&(B=(A=FI)+fread(FI,1,FS,stdin),A==B)?EOF:*A++)\n        #define pc(c) (C^FS?FO[C++]=c:(fwrite(FO,1,C,stdout),FO[(C=0)++]=c))\n        #define tn(x) (x<<3)+(x<<1)\n        #define D isdigit(c=tc())\n        int T,C;char c,*A,*B,FI[FS],FO[FS],S[FS];\n    public:\n        I FastIO() {A=B=FI;}\n        Tp I void read(Ty& x) {x=0;W(!D);W(x=tn(x)+(c&15),D);}\n        Tp I void write(Ty x) {W(S[++T]=x%10+48,x/=10);W(T) pc(S[T--]);}\n        Ts I void read(Ty& x,Ar&... y) {read(x),read(y...);}\n        Tp I void writeln(Con Ty& x) {write(x),pc('\\n');}\n        I void write_space() {pc(' ');}\n        I void clear() {fwrite(FO,1,C,stdout),C=0;}\n}F;\nclass LinkCutTree//LCT\n{\n    private:\n        #define GVmin(x,y) (V[O[x].Min]>V[O[y].Min]&&(O[x].Min=O[y].Min))\n        #define PU(x) (O[x].Min=x,GVmin(x,O[x].S[0]),GVmin(x,O[x].S[1]))//\u4e0a\u4f20\u5b50\u6811\u4fe1\u606f\n        #define Re(x) (swap(O[x].S[0],O[x].S[1]),O[x].R^=1)\n        #define PD(x) (O[x].R&&(Re(O[x].S[0]),Re(O[x].S[1]),O[x].R=0))\n        #define Wh(x) (O[O[x].F].S[1]==x)\n        #define Co(x,y,d) (O[O[x].F=y].S[d]=x)\n        #define IR(x) (O[O[x].F].S[0]^x&&O[O[x].F].S[1]^x)\n        #define MR(x) (Ac(x),S(x),Re(x))\n        #define Sp(x,y) (MR(x),Ac(y),S(y)) \n        static const int SZ=N*N+E;int St[SZ+5];struct node {int Min,R,F,S[2];}O[SZ+5];\n        I void Ro(CI x) {RI f=O[x].F,p=O[f].F,d=Wh(x);!IR(f)&&(O[p].S[Wh(f)]=x),O[x].F=p,Co(O[x].S[d^1],f,d),Co(f,x,d^1),PU(f),PU(x);}\n        I void S(CI x) {RI f=x,T=0;W(St[++T]=f,!IR(f)) f=O[f].F;W(T) PD(St[T]),--T;W(!IR(x)) f=O[x].F,!IR(f)&&(Ro(Wh(x)^Wh(f)?x:f),0),Ro(x);}\n        I void Ac(RI x) {for(RI s=0;x;x=O[s=x].F) S(x),O[x].S[1]=s,PU(x);}\n    public:\n        int C[SZ+5],V[SZ+5],T[SZ+5];I LinkCutTree() {V[0]=INF+1;}\n        I void Init(CI n) {for(RI i=1,s=n*n;i<=s;++i) V[O[i].Min=i]=INF+1,C[i]=a[i],T[i]=1;}//\u521d\u59cb\u5316\u6bcf\u4e2a\u70b9\u88ab\u5220\u9664\u65f6\u95f4\u4e3aINF+1\uff0c\u8bb0\u5f55\u5176\u989c\u8272\uff0c\u6807\u8bb0\u5176\u5728\u6811\u4e2d\n        I void Link(CI x,CI y) {MR(x),O[x].F=y;}I void Cut(CI x,CI y) {MR(x),Ac(y),S(x),O[y].F=O[x].S[1]=0,PU(x);}\n        I int FR(RI x) {Ac(x),S(x);W(O[x].S[0]) PD(x),x=O[x].S[0];return S(x),x;}\n        I int QMin(CI x,CI y) {return Sp(x,y),O[y].Min;}//\u67e5\u8be2\u5b50\u6811\u4e2d\u6700\u65e9\u88ab\u5220\u6389\u7684\u8fb9\n        I int Query(CI tot,CI op) {RI i,res=0;for(i=1;i<=tot;++i) T[i]&&!O[i].F&&!(C[i]^op)&&++res;return res;}//\u8be2\u95ee\u989c\u8272\u4e3aop\u7684\u8fde\u901a\u5757\u4e2a\u6570\uff08\u7528\u4e8e\u521d\u59cb\u5316ans\uff09\n        I void RC(CI x) {C[x]^=1;}//\u7ffb\u8f6c\u67d0\u4e2a\u70b9\u7684\u989c\u8272\n}T;\nI void Add(CI pos)//\u52a0\u5165\u4e00\u6761\u8fb9\n{\n    RI x=o[pos].x,y=o[pos].y,z=o[pos].p;\n    if(T.C[z]=o[pos].c,T.V[z]=o[pos].d,T.FR(x)^T.FR(y)) return --ans[T.C[z]],T.T[z]=1,T.Link(x,z),T.Link(z,y);//\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u5219\u5c06\u8be5\u989c\u8272\u8fde\u901a\u5757\u4e2a\u6570\u51cf1\n    RI p=T.QMin(x,y);if(T.V[z]<T.V[p]) return;\n    T.T[p]=0,T.Cut(tx[p],p),T.Cut(p,ty[p]),T.T[z]=1,T.Link(x,z),T.Link(z,y);\n}\nI void Del(CI pos)//\u5220\u9664\u4e00\u6761\u8fb9\n{\n    RI x=o[pos].x,y=o[pos].y,z=o[pos].p;\n    !(T.FR(x)^T.FR(z))&&!(T.FR(y)^T.FR(z))&&(++ans[T.C[z]],T.T[z]=0,T.Cut(x,z),T.Cut(z,y),0);//\u5206\u88c2\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5219\u5c06\u8be5\u989c\u8272\u8fde\u901a\u5757\u4e2a\u6570\u52a01\n}\nint main()\n{\n    RI i,j,k=1,tot,cnt=0,p,nx,ny,p1,p2;Reg pair<int,int> w;\n    for(F.read(n),i=1;i<=n;++i) for(j=1;j<=n;++j) F.read(a[P(i,j)]),s[P(i,j)]=a[P(i,j)];//\u8bfb\u5165\uff0c\u7528s\u6570\u7ec4\u590d\u5236\u4e00\u904da\u6570\u7ec4\n    for(T.Init(n),i=1;i<=n;++i) for(j=1;j<=n;++j)//\u521d\u59cb\u5316\u51fa\u539f\u56fe\u7684\u8fb9\n    {\n        i^n&&!(a[P(i,j)]^a[P(i+1,j)])&&(o[++cnt]=Operate(P(i,j),P(i+1,j),a[P(i,j)],0,1),0),//\u5411\u4e0b\n        j^n&&!(a[P(i,j)]^a[P(i,j+1)])&&(o[++cnt]=Operate(P(i,j),P(i,j+1),a[P(i,j)],0,1),0);//\u5411\u53f3\n    }\n    for(F.read(m),i=1;i<=m;++i)//\u79bb\u7ebf\u5904\u7406\u51fa\u6bcf\u4e2a\u52a0\u8fb9\u548c\u5220\u8fb9\u64cd\u4f5c\n    {\n        for(F.read(qx[i],qy[i]),a[p=P(qx[i],qy[i])]^=1,j=0;j^4;++j)\n        {\n            if((nx=qx[i]+dx[j])<1||nx>n||(ny=qy[i]+dy[j])<1||ny>n) continue;\n            p1=p,p2=P(nx,ny),p1>p2&&swap(p1,p2),o[++cnt]=Operate(p1,p2,a[p1]^a[p2]?-1:a[p1],i,a[p1]^a[p2]?-1:1);\n        }\n    }\n    for(tot=n*n,i=1;i<=cnt;++i) !t[w=mp(o[i].x,o[i].y)]&&(t[w]=++tot,tx[t[w]]=o[i].x,ty[t[w]]=o[i].y),o[i].p=t[w];//\u7ed9\u8fb9\u6807\u53f7\uff0c\u8fd9\u6837\u4fbf\u4e8e\u5c06\u8fb9\u770b\u4f5c\u4e00\u4e2a\u8282\u70b9\n    for(i=cnt;i;--i) ~o[i].f?(o[i].d=lst[o[i].p]?lst[o[i].p]:INF):(lst[o[i].p]=o[i].t);//\u5012\u5e8f\u679a\u4e3e\uff0c\u6c42\u51fa\u6bcf\u6761\u8fb9\u7684\u51fa\u73b0\u548c\u5220\u9664\u65f6\u95f4\n    W(k<=cnt&&!o[k].t) Add(k++);//\u5148\u5c06\u539f\u56fe\u7684\u8fb9\u52a0\u5230\u56fe\u4e0a\n\tfor(ans[0]=T.Query(tot,0),ans[1]=T.Query(tot,1),i=1;i<=m;++i)//\u521d\u59cb\u5316ans\uff0c\u7136\u540e\u5904\u7406\u64cd\u4f5c \n    {\n        p=P(qx[i],qy[i]),--ans[s[p]],++ans[s[p]^=1],T.RC(p);W(k<=cnt&&!(o[k].t^i)) ~o[k].f?Add(k++):Del(k++);//\u66f4\u65b0\u4fe1\u606f\n        F.write(ans[1]),F.write_space(),F.writeln(ans[0]);//\u8f93\u51fa\u7b54\u6848\n    }\n    return F.clear(),0;\n}\n```",
        "postTime": 1551674537,
        "uid": 28382,
        "name": "TheLostWeak",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    },
    {
        "content": "\u8d5b\u540e\u5199\u9898\u89e3\u8865\u6559\u8bad ![](http://\u5567.tk/tuu)\n\n\n\u573a\u4e0a\u6570\u7ec4\u5f00\u5c0f\u672c\u673aAC\u4f46\u5f00\u4e86O2\u5c31\u4f1aRE=\u7206\u96f6 ![](http://\u5567.tk/tuu)\n\n\u6d1b\u8c37\u4e0a\u6d4b\u7531\u4e8e\u6570\u7ec4\u5f00\u5c0f\u5bfc\u81f4\u8bbf\u95ee\u4e0d\u5230\u6b7b\u9012\u5f52MLE\u6211\u8fd8\u4ee5\u4e3a\u8fd8\u662f\u5f00\u5927\u4e86![](http://\u5567.tk/tuu)\n\n\u5c0f\u5fc3\uff0c\u5c0f\u5fc3\uff0c\u518d\u5c0f\u5fc3 ![](http://\u5567.tk/tuu)\n\n---\n\n\u6211\u4eec\u5c1d\u8bd5\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u662f\u4e00\u884c\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u6bb5\u884c\u3002\n\n\u6bcf\u4e00\u4e2a\u8282\u70b9\u5b58\u4e0a\u4e24\u4e2a\u4e1c\u897f\uff1a\n\n+ \u4e24\u4e2a\u5e76\u67e5\u96c6\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u884c\u533a\u95f4\u7684\u6700\u4e0a\u9762\u4e00\u884c\u548c\u6700\u4e0b\u9762\u4e00\u884c\u7684\u72b6\u6001\uff08\u540e\u9762\u4f1a\u8bb2\u5230\uff09\n\n+ \u8fd9\u4e2a\u533a\u95f4\u5185\u90e8\u4e24\u79cd\u989c\u8272\u7684\u8fde\u901a\u5757\u7684\u4e2a\u6570\n\n\u5bf9\u4e8e\u5355\u72ec\u7684\u6bcf\u4e00\u884c\uff0c\u6211\u4eec\u641e\u4e00\u4e2a\u5e76\u67e5\u96c6\uff1a\u5982\u679c\u5728\u8fd9\u4e00\u884c\u4e2d\uff0c$i\\dots j$ \u7684\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u628a $i\\dots j$ \u90fd\u653e\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\u3002\u7528\u6700\u5c0f\u8868\u793a\u6cd5\uff0c\u8fd9\u4e2a\u96c6\u5408\u7684\u4ee3\u8868\u5c31\u662f\u6700\u5c0f\u7684\u5143\u7d20 $i$\u3002\n\n\u6211\u4eec\u8003\u8651\u5408\u5e76\u4e24\u4e2a\u884c\u533a\u95f4\u3002\n\n\u663e\u7136\uff0c\u65b0\u7684\u884c\u533a\u95f4\u7684\u4e0a\u5e76\u67e5\u96c6\u5c31\u662f\u5de6\u513f\u5b50\u7684\u4e0a\u5e76\u67e5\u96c6\uff0c\u65b0\u533a\u95f4\u7684\u4e0b\u5e76\u67e5\u96c6\u5c31\u662f\u53f3\u513f\u5b50\u7684\u4e0b\u5e76\u67e5\u96c6\u3002\n\n\u8003\u8651\u5de6\u513f\u5b50\u7684\u4e0b\u5e76\u67e5\u96c6\u4e0e\u53f3\u513f\u5b50\u7684\u4e0a\u5e76\u67e5\u96c6\u7ed3\u5408\u6240\u5e26\u6765\u7684\u8d21\u732e\u3002\n\n\u9996\u5148\u4ee4\u65b0\u8282\u70b9\u7684\u989c\u8272 $c$ \u7684\u8fde\u901a\u5757\u6570\u7b49\u4e8e\u5176\u4e24\u4e2a\u513f\u5b50\u7684\u8be5\u989c\u8272\u7684\u8fde\u901a\u5757\u6570\u4e4b\u548c\u3002\n\n\u7136\u540e\u679a\u4e3e\uff0c\u5bf9\u4e8e\u7b2c $i$ \u5217\uff0c\u5982\u679c $gird_{md,i} = gird_{md+1,i}$\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u4e24\u4e2a\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u8981\u5c06\u8be5\u989c\u8272\u7684\u6570\u91cf-1\u3002\n\n\u7136\u540e\u5199\u4e2a\u6807\u51c6\u7684\u7ebf\u6bb5\u6811\u5c31\u5b8c\u4e8b\u4e86~\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 ~~O(\u80fd\u8fc7)~~  $O(n^2+mnlogn)$\n\nCode:\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define mp make_pair\n#define int short\nusing namespace std;\nconst int mxn=808;\nint gird[mxn][mxn],n,m,q;\n\tstruct dsu{\n\t\tint fa[mxn<<1];\n\t\tinline int find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\n\t\tinline void uni(int x,int y){\n\t\t\tx=find(x),y=find(y);\n\t\t\tfa[x]=y;\n\t\t}\n\t\tinline void init(){for(int i=1;i<(mxn<<1);++i)fa[i]=i;}\n\t}f;\n\tint stand[mxn];\n\tstruct node{\n\t\tdsu d;\n\t\tint son[2],ans[2];\n\t\tinline void init(){\n\t\t\tans[0]=0,ans[1]=0;d.init();\n\t\t\tson[0]=0,son[1]=0;\n\t\t}\n\t}t[mxn<<1];\n\tinline void ForceUpdate(int id,int x){\n\t\tt[id].init();\n\t\tt[id].ans[gird[x][1]]=1;\n\t\tt[id].ans[1-gird[x][1]]=0;\n\t\tint pre=1;\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tif(gird[x][i]!=gird[x][pre]){\n\t\t\t\t++t[id].ans[gird[x][i]];\n\t\t\t\tpre=i;\n\t\t\t}\n\t\t\tt[id].d.uni(i,pre),t[id].d.uni(i+n,pre);\n\t\t}\n\t}\n\tinline void pushup(int id,int md,int l,int r){\n\t\tf.init();\n\t\tfor(int i=0;i<2;++i)t[id].ans[i]=t[l].ans[i]+t[r].ans[i];\n\t\tfor(int i=1;i<=m*2;++i)f.fa[i]=t[l].d.fa[i],f.fa[i+m*2]=t[r].d.fa[i]+m*2;\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tint fx=f.find(i+m),fy=f.find(i+2*m);\n\t\t\tif(gird[md][i]==gird[md+1][i] and fx!=fy){\n\t\t\t\t--t[id].ans[gird[md][i]];\n\t\t\t\tf.uni(fx,fy);\n\t\t\t}\n\t\t}\n\t\tmemset(stand,0,sizeof(stand));     // stand \u6570\u7ec4\u7684\u7528\u5904\u662f\u6700\u5c0f\u8868\u793a\n\t\tfor(int i=m;i;--i){\n\t\t\tf.fa[i]=f.find(i);\n\t\t\tstand[f.fa[i]]=i;\n\t\t}\n\t\tfor(int i=m*2;i>m;--i){\n\t\t\tf.fa[i+m*2]=f.find(i+m*2);\n\t\t\tstand[f.fa[i+m*2]]=i;\n\t\t}\n\t\tfor(int i=1;i<=m;++i){\n\t\t\tt[id].d.fa[i]=stand[f.fa[i]];\n\t\t\tt[id].d.fa[i+m]=stand[f.fa[i+m*3]];\n\t\t}\n\t}\n\tint cntnode=0,root;\n\tinline void build(int&id,int l,int r){\n\t\tid=++cntnode;\n\t\tif(l==r){\n\t\t\tForceUpdate(id,l);\n\t\t\treturn;\n\t\t}\n\t\tint md=l+r>>1;\n\t\tbuild(t[id].son[0],l,md);\n\t\tbuild(t[id].son[1],md+1,r);\n\t\tpushup(id,md,t[id].son[0],t[id].son[1]);\n\t}\n\tinline void upd(int id,int l,int r,int x){\n\t\tif(l==r){\n\t\t\tForceUpdate(id,x);\n\t\t\treturn;\n\t\t}\n\t\tint md=l+r>>1;\n\t\tif(x<=md)upd(t[id].son[0],l,md,x);\n\t\telse upd(t[id].son[1],md+1,r,x);\n\t\tpushup(id,md,t[id].son[0],t[id].son[1]);\n\t}\n\tinline void glhf(){\n\t\tbuild(root,1,n);\n\t\tfor(;q--;){\n\t\t\tint x,y;\n\t\t\tcin>>x>>y;\n\t\t\tgird[x][y]^=1;\n\t\t\tupd(root,1,n,x);\n\t\t\tcout<<t[root].ans[1]<<' '<<t[root].ans[0]<<'\\n';\n\t\t}\n\t}\ninline void solve(){\n\tcin>>n;m=n;\n\tfor(int i=1;i<=n;++i)for(int j=1;j<=m;++j)cin>>gird[i][j];\n\tcin>>q;\n\tglhf();\n}\nsigned main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tint T;T=1;\n//\tcin>>T;\n\tfor(;T--;)solve();\n\treturn 0;\n}\n```",
        "postTime": 1626267605,
        "uid": 226760,
        "name": "RedLycoris",
        "ccfLevel": 7,
        "title": "[WC2005]\u53cc\u9762\u68cb\u76d8 \u9898\u89e3"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5206\u6cbb\u6a21\u677f\u9898\u3002\n\n### Part.1\n\nQ\uff1a\u5982\u679c\u6ca1\u6709\u4fee\u6539\uff0c\u6211\u4eec\u600e\u4e48\u505a\uff1f\n\nA\uff1a\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u3002\n\n\u76f4\u63a5\u626b\u4e00\u904d\uff0c\u6211\u4eec\u52a0\u8fdb\u6765\u4e00\u4e2a\u6570\uff0c\u5c31\u5148\u4ee4\u7b54\u6848++\uff0c\u770b\u4e00\u4e0b\u56db\u4e2a\u65b9\u5411\uff0c\u5982\u679c\u67d0\u4e2a\u65b9\u5411\u4e0e\u5f53\u524d\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\uff0c\u90a3\u4e48\u5c31\u5408\u5e76\u5e76\u67e5\u96c6\uff0c\u4ee4\u7b54\u6848--\u3002\n\n### Part.2\n\n\u6709\u4fee\u6539\uff1f\u5e76\u67e5\u96c6\u4e0d\u652f\u6301\u5220\u9664\uff1f\u600e\u4e48\u529e\uff1f~~\u4e71\u641e~~\n\n\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u8bf7\u51fa\u6211\u4eec\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u795e\u5668\uff0c**\u7ebf\u6bb5\u6811\u5206\u6cbb**\u3002\uff08\u6ca1\u6709\u5b66\u8fc7\u7684\u8bf7\u5de6\u8f6c[\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811\u5206\u6cbb](https://www.luogu.com.cn/problem/P5787)\uff09\n\n\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u4f4d\u7f6e\u5728\u65f6\u95f4\u8f74\u4e0a\u6709\u65f6\u662f0\uff0c\u6709\u65f6\u662f1\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u5c31\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684\u533a\u95f4\uff0c\u7531\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\uff0c\u6bcf\u4e2a\u533a\u95f4\u90fd\u53ef\u4ee5\u62c6\u6210log\u4e2a\u5c0f\u533a\u95f4\uff0c\u6211\u4eec\u53ea\u7528\u5148\u5728\u90a3\u4e9b\u4f4d\u7f6e\u6302\u4e0a\u4fee\u6539\u64cd\u4f5c\uff0c\u518d\u8dd1\u4e00\u904ddfs\uff0c\u8d70\u5230\u5bf9\u5e94\u70b9\u65f6\u4fee\u6539\uff0c\u56de\u9000\u65f6\u518d\u64a4\u9500\u5373\u53ef\uff0c\u8d70\u5230\u53f6\u8282\u70b9\u65f6\u518d\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(mlog(n^2+m))$\n\n\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n```cpp\n#define Id(x,y) ((x-1)*n+y)\nusing namespace std;\ntypedef pair<int,int> pii;\nconst int maxn=205;\nconst int dx[]={1,0,-1,0};\nconst int dy[]={0,1,0,-1};\n\nint mp[maxn][maxn],fa[maxn*maxn],dep[maxn*maxn],n,m,ans[2],pre[maxn][maxn],cnt;\nstruct Query\n{\n    int l,r,val,x,y;\n}q[maxn*maxn*2];\n\nstack<pii> st;\nvector<int> wife[maxn*maxn*4];\n\ntemplate<typename T>\ninline void read(T &x)\n{\n    char c;int f=1;\n    while(!isdigit(c=getchar())) (c=='-')&&(f=-1);\n    x=c^48;\n    while(isdigit(c=getchar())) x=x*10+(c^48);\n    x*=f;\n}\n\nvoid modify(int u,int l,int r,int x,int y,int id)\n{\n    if(x<=l&&r<=y) return void(wife[u].push_back(id));\n    int mid=(l+r)>>1;\n    if(x<=mid) modify(u<<1,l,mid,x,y,id);\n    if(y>mid) modify(u<<1|1,mid+1,r,x,y,id);\n}\n\ninline int findf(int x)\n{\n    while(fa[x]!=x) x=fa[x];\n    return x;\n}\n\nvoid merge(int u,int v)\n{\n    if(u==v) return;\n    if(dep[u]>dep[v]) swap(u,v);\n    st.push(make_pair(u,dep[u]==dep[v]));\n    fa[u]=v;dep[v]+=(dep[u]==dep[v]);\n}\n\nvoid solve(int u,int l,int r)\n{\n    int siz=st.size(),ans0=ans[0],ans1=ans[1];\n    for(const auto &i:wife[u])\n    {\n        ans[q[i].val]++;\n        mp[q[i].x][q[i].y]=q[i].val;\n        for(int j=0,pref=0;j<4;++j)\n        {\n            int tx=q[i].x+dx[j],ty=q[i].y+dy[j];\n            if(tx<=0||ty<=0||tx>n||ty>n) continue;\n            if(mp[q[i].x][q[i].y]==mp[tx][ty])\n            {\n                int x=findf(Id(q[i].x,q[i].y)),y=findf(Id(tx,ty));\n                if(x==y) continue;\n                --ans[q[i].val];merge(x,y);\n            }\n        }\n    }\n    if(l==r) printf(\"%d %d\\n\",ans[1],ans[0]);\n    else\n    {\n        int mid=(l+r)>>1;\n        solve(u<<1,l,mid);solve(u<<1|1,mid+1,r);\n    }\n    for(const auto &i:wife[u])\n        mp[q[i].x][q[i].y]=-1;\n    ans[0]=ans0;ans[1]=ans1;\n    while(st.size()>siz)\n    {\n        int x=st.top().first;\n        dep[fa[x]]-=st.top().second;\n        fa[x]=x;st.pop();\n    }\n}\n\nint main()\n{\n    int x,y;\n    read(n);\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=n;++j)\n            read(mp[i][j]);\n    read(m);\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=n;++j)\n            q[Id(i,j)]=(Query){1,m,mp[i][j],i,j},pre[i][j]=Id(i,j);\n    for(int i=1;i<=n*n;++i) fa[i]=i;\n    cnt=n*n;\n    for(int i=1;i<=m;++i)\n    {\n        read(x);read(y);\n        q[pre[x][y]].r=i-1;\n        q[++cnt]=(Query){i,m,mp[x][y]^=1,x,y};\n        pre[x][y]=cnt;\n    }\n    for(int i=1;i<=cnt;++i)\n        if(q[i].l<=q[i].r) modify(1,1,m,q[i].l,q[i].r,i);\n    memset(mp,-1,sizeof(mp));\n    solve(1,1,m);\n    return 0,qwq;\n}\n```\n\n",
        "postTime": 1601196730,
        "uid": 199750,
        "name": "\u8bd5\u8bd5\u4e8b\u5b9e\u4e0a\u5417",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u52a8\u6001\u7ef4\u62a4\u68cb\u76d8\u4e0a\u8fde\u901a\u5757\u4e2a\u6570\uff0c\u5355\u70b9\u4fee\u6539\u5168\u5c40\u67e5\u8be2\u3002\n\n\u4e00\u79cd\u5728\u7ebf\u7684\u505a\u6cd5\u662f\u7ebf\u6bb5\u6811\u5957\u5e76\u67e5\u96c6\uff0c\u672c\u8d28\u4e0a\u662f\u52a8\u6001\u7ef4\u62a4\u5de6\u53f3\u513f\u5b50\u7684\u8fde\u901a\u6027\n\n\u5404\u79cd\u4f18\u5316\u5168\u52a0\u4e0a\u7684\u8bdd\u590d\u6742\u5ea6\u8c8c\u4f3c\u662f\u2026\u2026\n\n\u65f6\u95f4 $O(mn\\alpha(n)\\log n)$\uff0c\u7a7a\u95f4 $O(n^2)$\u3002\n\n\u4e0d\u8fc7\u5e76\u67e5\u96c6\u5176\u5b9e\u662f\u591a\u4f59\u7684\uff0c\u56e0\u4e3a\u513f\u5b50\u5408\u5e76\u7684\u65f6\u5019\u662f\u4e2a\u9759\u6001\u95ee\u9898\uff0c\u800c\u5e76\u67e5\u96c6\u5374\u662f\u52a8\u6001\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a\u533a\u95f4\u5de6\u53f3\u4e24\u8fb9\u6240\u5728\u8fde\u901a\u5757\u7684\u7f16\u53f7\uff08\u6700\u5c0f\u8868\u793a\u6cd5\uff09\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u90e8\u5206\u8fde\u901a\u7684\u7f16\u53f7\u5728\u65e0\u5411\u56fe\u91cc\u8fde\u8fb9\u5c31\u884c\u4e86\uff0c\u5728\u4e00\u4e2a\u5757\u91cc\u968f\u4fbf\u9009\u4e2a\u4ee3\u8868\u5143\uff0c\u6700\u540e\u7edf\u8ba1\u65e0\u5411\u56fe\u8fde\u901a\u5757\u4e2a\u6570\u3002\n\n\u8bbe\u65e0\u5411\u56fe\u8fde\u901a\u5757\u4e2a\u6570\u4e3a $x$\uff0c\u539f\u6765\u4e2d\u95f4\u90e8\u5206\u7684\u8fde\u901a\u5757\u4e2a\u6570\u4e3a $y$\uff0c\u90a3\u4e48 $y-x$ \u5219\u4e3a\u5de6\u53f3\u513f\u5b50\u5171\u6709\u7684\u8fde\u901a\u5757\u4e2a\u6570\uff0c$Lson+Rson-y+x$ \u5219\u4e3a\u7236\u4eb2\u7684\u7b54\u6848\u3002\n\n\u8fd9\u6837\u7684\u8bdd pushup \u64cd\u4f5c\u5c31\u662f $O(n)$ \u7684\u4e86 ~~\u867d\u7136\u5e38\u6570\u4f1a\u5f88\u5927~~\uff0c\u603b\u590d\u6742\u5ea6\u5c31\u4e3a $O(mn\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define Lson (now<<1)\n#define Rson (now<<1|1)\nusing namespace std;\n\nconst int MAXN=200;\nconst int MAXM=1e4;\n\nint n,m;\n\nstruct SegNode\n{\n\tint Lset[MAXN],Rset[MAXN];\n\tint sum;\n\tvoid Print()\n\t{\n\t\tfor(int i=0;i<n;i++) printf(\"%d \",Lset[i]);printf(\"\\n\");\n\t\tfor(int i=0;i<n;i++) printf(\"%d \",Rset[i]);printf(\"\\n\");\n\t\tprintf(\"%d\\n\",sum);\n\t}\n};\n\nint nxt[4*MAXN][MAXN],Tail[4*MAXN];\nint Chief[4*MAXN];bool visit[4*MAXN];\nbool mapn[MAXN][MAXN];\n\nvoid Link(int a,int b)\n{\n\tnxt[a][Tail[a]++]=b;\n\tnxt[b][Tail[b]++]=a;\n}\n\nvoid DFS(int now,int v)\n{\n\tif(Chief[now]) return;\n\tChief[now]=v;\n\tfor(int i=0;i<Tail[now];i++) DFS(nxt[now][i],v);\n}\n\nstruct SegTree\n{\n\tSegNode node[600];\n\tvoid PushUp(int now)\n\t{\n\t\tfor(int i=0;i<4*n;i++) Tail[i]=Chief[i]=visit[i]=0;\n\t\tfor(int i=0;i<n;i++)\n\t\t\tif(node[Lson].Rset[i] && node[Rson].Lset[i])\n\t\t\t\tLink(node[Lson].Rset[i]-1,node[Rson].Lset[i]-1+2*n);\n\t\tnode[now].sum=node[Lson].sum+node[Rson].sum;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(node[Lson].Rset[i])\n\t\t\t{\n\t\t\t\tif(!Chief[node[Lson].Rset[i]-1])\n\t\t\t\t{\n\t\t\t\t\tDFS(node[Lson].Rset[i]-1,node[Lson].Rset[i]);\n\t\t\t\t\t++node[now].sum;\n\t\t\t\t}\n\t\t\t\tif(!visit[node[Lson].Rset[i]-1]) --node[now].sum;\n\t\t\t\tvisit[node[Lson].Rset[i]-1]=1;\n\t\t\t}\n\t\t\tif(node[Rson].Lset[i])\n\t\t\t{\n\t\t\t\tif(!Chief[node[Rson].Lset[i]-1+2*n])\n\t\t\t\t{\n\t\t\t\t\tDFS(node[Rson].Lset[i]-1+2*n,node[Rson].Lset[i]+2*n);\n\t\t\t\t\t++node[now].sum;\n\t\t\t\t}\n\t\t\t\tif(!visit[node[Rson].Lset[i]-1+2*n]) --node[now].sum;\n\t\t\t\tvisit[node[Rson].Lset[i]-1+2*n]=1;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(node[Lson].Lset[i])\n\t\t\t{\n\t\t\t\tnode[now].Lset[i]=Chief[node[Lson].Lset[i]-1];\n\t\t\t\tif(!node[now].Lset[i]) node[now].Lset[i]=node[Lson].Lset[i];\n\t\t\t}\n\t\t\telse node[now].Lset[i]=0;\n\t\t\tif(node[Rson].Rset[i]) \n\t\t\t{\n\t\t\t\tnode[now].Rset[i]=Chief[node[Rson].Rset[i]-1+2*n];\n\t\t\t\tif(!node[now].Rset[i]) node[now].Rset[i]=node[Rson].Rset[i]+2*n;\n\t\t\t}\n\t\t\telse node[now].Rset[i]=0;\n\t\t}\n\t\tfor(int i=0;i<4*n;i++) Chief[i]=0;\n\t\tfor(int i=0,j=0;i<n;i++)\n\t\t{\n\t\t\tif(node[now].Lset[i])\n\t\t\t{\n\t\t\t\tif(!Chief[node[now].Lset[i]-1]) Chief[node[now].Lset[i]-1]=++j;\n\t\t\t\tnode[now].Lset[i]=Chief[node[now].Lset[i]-1];\n\t\t\t}\n\t\t\tif(node[now].Rset[i])\n\t\t\t{\n\t\t\t\tif(!Chief[node[now].Rset[i]-1]) Chief[node[now].Rset[i]-1]=++j;\n\t\t\t\tnode[now].Rset[i]=Chief[node[now].Rset[i]-1];\n\t\t\t}\n\t\t}\n\t}\n\tvoid Build(int now,int L,int R,bool t)\n\t{\n\t\tif(L==R)\n\t\t{\n\t\t\tnode[now].sum=0;\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tif(mapn[i][L]==t)\n\t\t\t\t{\n\t\t\t\t\tif(!i) node[now].Lset[0]=++node[now].sum;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(mapn[i-1][L]==t) node[now].Lset[i]=node[now].sum;\n\t\t\t\t\t\telse node[now].Lset[i]=++node[now].sum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse node[now].Lset[i]=0;\n\t\t\tfor(int i=0;i<n;i++) node[now].Rset[i]=node[now].Lset[i];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(L+R)>>1;\n\t\tBuild(Lson,L    ,mid,t);\n\t\tBuild(Rson,mid+1,R  ,t);\n\t\tPushUp(now);\n\t}\n\tvoid Change(int now,int L,int R,int x,bool t)\n\t{\n\t\tif(L==R)\n\t\t{\n\t\t\tnode[now].sum=0;\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tif(mapn[i][L]==t)\n\t\t\t\t{\n\t\t\t\t\tif(!i) node[now].Lset[0]=++node[now].sum;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(mapn[i-1][L]==t) node[now].Lset[i]=node[now].sum;\n\t\t\t\t\t\telse node[now].Lset[i]=++node[now].sum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse node[now].Lset[i]=0;\n\t\t\tfor(int i=0;i<n;i++) node[now].Rset[i]=node[now].Lset[i];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(L+R)>>1;\n\t\tif(x<=mid) Change(Lson,L,mid,x,t);\n\t\telse Change(Rson,mid+1,R,x,t);\n\t\tPushUp(now);\n\t}\n\tint Ask() {return node[1].sum;}\n}White,Black;\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++)\n\t\tfor(int j=0;j<n;j++)\n\t\t\tcin>>mapn[i][j];\n\tWhite.Build(1,0,n-1,0);\n\tBlack.Build(1,0,n-1,1);\n\tscanf(\"%d\",&m);\n\tfor(int x,y;m--;)\n\t{\n\t\tscanf(\"%d %d\",&y,&x);\n\t\t--y,--x;\n\t\tmapn[y][x]^=1;\n\t\tWhite.Change(1,0,n-1,x,0);\n\t\tBlack.Change(1,0,n-1,x,1);\n\t\tprintf(\"%d %d\\n\",Black.Ask(),White.Ask());\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1611807160,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    },
    {
        "content": "**[BLOG](https://www.luogu.org/blog/zi-o/#)**\n\n\u52a8\u6001\u7ef4\u62a4\u56fe\u7684\u8fde\u901a\u6027\uff0c\u8fd9\u4e1c\u897f\u672c\u8eab\u4e0d\u96be\uff0c\u79bb\u7ebf\u505a\u6cd5\u4e3b\u8981\u6709\u4e24\u79cd\u3002\u4e00\u4e2a\u662f$LCT$\u7ef4\u62a4\u4ee5\u5220\u9664\u65f6\u95f4\u4e3a\u6743\u503c\u7684\u6700\u5927\u751f\u6210\u6811\uff0c\u53e6\u4e00\u4e2a\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u52a0\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\uff08\u540e\u8005\u7684\u7801\u91cf\u548c\u5e38\u6570\u90fd\u5de8\u5c0f\uff0c\u7136\u9e45\u590d\u6742\u5ea6\u662f$log^2$\u7684\uff09\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b\u4e00\u4e0b[\u8fd9\u9898](https://www.luogu.org/problemnew/show/P5227)\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u6bcf\u6b21\u4fee\u6539\u62c6\u62104\u4e2a\u64cd\u4f5c\uff0c\u4e0a\u4e0b\u5de6\u53f3\uff0c\u540c\u8272\u7684$cut$\uff0c\u5f02\u8272\u7684$link$\uff0c\u4ee3\u7801\u4e2d\u7528$op$\u4e3a0\u548c\u4e3a1\u6765\u8868\u793a\uff0c\u7136\u540e\u6bcf\u6b21\u4fee\u6539\u5b8c\u4e86\u52a0\u5165\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5e76\u628a\u5f53\u524d\u70b9\u7684\u989c\u8272\u6539\u53d8\uff0c\u5f02\u8272\u7684\u8981\u540c\u65f6\u5728$map$\u548c\u5b58\u8fb9\u7684\u6570\u7ec4\u91cc\u540c\u65f6\u52a0\u4e0a\u8fd9\u6761\u8fb9\uff0c\u540c\u8272\u7684\u8981\u5728$map$\u91cc\u5220\u6389\u8fd9\u6761\u8fb9\u3002\n\n\u8003\u8651\u8fd9\u9898\u6700\u4e3b\u8981\u7684\u5730\u65b9\u5c31\u662f\u5904\u7406\u8fde\u901a\u5757\u7684\u4e2a\u6570\uff0c\u6211\u628a\u7b54\u6848\u4e00\u5f00\u59cb\u8bbe\u7f6e\u4e3a\u521d\u59cb\u6bcf\u79cd\u989c\u8272\u7684\u4e2a\u6570\uff0c\u6bcf\u6b21\u6210\u529f\u7684$link$\u64cd\u4f5c\uff08\u6539\u53d8\u8fde\u901a\u6027\uff09\u548c\u6210\u529f\u7684$cut$\u64cd\u4f5c\u5c31\u5bf9\u7b54\u6848\u8fdb\u884c\u66f4\u6539\uff0c$link$\u7b54\u6848\u51cf\u4e00\uff0c$cut$\u7b54\u6848\u52a0\u4e00\uff0c\u4f46\u662f\u8fd9\u6837\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u8003\u8651\u5230\u6bcf\u6b21\u6362\u989c\u8272\u4f1a\u6539\u53d8\u521d\u59cb\u989c\u8272\u6570\uff0c\u6240\u4ee5\u5728\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\u518d\u76f8\u5e94\u7684\u52a0\u4e00\u51cf\u4e00\u5c31\u53ef\u4ee5\u4e86\u3002\n\nCODE:\n\n```cpp\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\n#ifndef _DEBUG\n#define getchar() (*(IOB.in.p++))\n#define putchar(c) (*(IOB.out.p++)=(c))\n#define io_eof() (IOB.in.p>=IOB.in.pend)\nstruct IOBUF { struct { char buff[1 << 26], *p, *pend; }in; struct { char buff[1 << 26], *p; }out; IOBUF() { in.p = in.buff; out.p = out.buff; in.pend = in.buff + fread(in.buff, 1, 1 << 26, stdin); }~IOBUF() { fwrite(out.buff, 1, out.p - out.buff, stdout); } }IOB;\n#endif\ntemplate<typename IO>\ninl void write(IO x) {\n\tif (x == 0) return (void)putchar('0');\n\tif (x < 0)putchar('-'), x = -x;\n\tstatic char buf[30];\n\tchar* p = buf;\n\twhile (x) {\n\t\t*(p++) = x % 10 + '0';\n\t\tx /= 10;\n\t}\n\twhile (p > buf)putchar(*(--p));\n}\ninl void writestr(const char *s) { while (*s != 0)putchar(*(s++)); }\ntemplate<typename IO>inl void writeln(IO x) { write(x), putchar('\\n'); }\ntemplate<typename IO>inl void writesp(IO x) { write(x), putchar(' '); }\ninl int readstr(char *s) {\n\tchar *begin = s, c = getchar();\n\twhile (c < 33 || c>127) {\n\t\tc = getchar();\n\t}\n\twhile (c >= 33 && c <= 127) {\n\t\t*(s++) = c;\n\t\tc = getchar();\n\t}\n\t*s = 0;\n\treturn s - begin;\n}\ntemplate<typename IO>\ninl IO read() {\n\tIO x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\n#define id(x,y) (((x)-1)*n+(y))\nint ans[2], n, m, all, dx[] = { 0,1,0,-1 }, dy[] = { 1,0,-1,0 }, tot, num;\nbool col[201][201], vis[201][201];\nstruct edge {\n\tint u, v, w;\n\tshort col;\n}e[1000001];\nstruct quiz {\n\tbool flag, op, col;\n\tint id, tim;\n}q[1000001];\nmap<pair<int, int>, int>mp;\ninl void dfs(int x, int y) {\n\tvis[x][y] = 1;\n\tre u, v, nx, ny;\n\tmap<pair<int, int>, int>::iterator it;\n\tfor (re i = 0; i < 4; i++) {\n\t\tnx = x + dx[i], ny = y + dy[i];\n\t\tif (col[nx][ny] == col[x][y] && nx > 0 && ny > 0 && nx <= n && ny <= n) {\n\t\t\tu = id(x, y), v = id(nx, ny);\n\t\t\tif (u > v)swap(u, v);\n\t\t\tif ((it = mp.find(make_pair(u, v))) == mp.end()) {\n\t\t\t\te[++tot] = edge{ u,v,0,col[x][y] };\n\t\t\t\tq[++num] = quiz{ 0,1,(bool)e[tot].col,tot,0 };\n\t\t\t\tmp[make_pair(u, v)] = tot;\n\t\t\t}\n\t\t\tif (!vis[nx][ny])dfs(nx, ny);\n\t\t}\n\t}\n}\nclass lct_base {\npublic:\n\tstruct node {\n\t\tint fa, child[2], w, min;\n\t\tbool filp;\n\t}t[1000001];\n\tinl void maintain(int x) {\n\t\tt[x].min = 0;\n\t\tif (x > all)t[x].min = x;\n\t\tif (t[t[ls(x)].min].w < t[x].w)t[x].min = t[ls(x)].min;\n\t\tif (t[t[rs(x)].min].w < t[t[x].min].w)t[x].min = t[rs(x)].min;\n\t}\n\tinl bool poi(int x) { return rs(fa(x)) == x; }\n\tinl bool nroot(int x) { return ls(fa(x)) == x || rs(fa(x)) == x; }\n\tinl void rotate(int x) {\n\t\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n\t\tif (nroot(f))t[gf].child[gfs] = x;\n\t\tt[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n\t\tif (s)fa(s) = f;\n\t\tfa(x) = gf, fa(f) = x, maintain(f);\n\t}\n\tinl void reverse(int x) { swap(ls(x), rs(x)), t[x].filp ^= 1; }\n\tinl void pushdown(int x) {\n\t\tif (t[x].filp) {\n\t\t\tif (ls(x))reverse(ls(x));\n\t\t\tif (rs(x))reverse(rs(x));\n\t\t\tt[x].filp ^= 1;\n\t\t}\n\t}\n\tinl void push(int x) { if (nroot(x))push(fa(x)); pushdown(x); }\n\tinl void splay(int x) {\n\t\tpush(x);\n\t\twhile (nroot(x)) {\n\t\t\tif (nroot(fa(x)))poi(fa(x)) == poi(x) ? rotate(fa(x)) : rotate(x);\n\t\t\trotate(x);\n\t\t}\n\t\tmaintain(x);\n\t}\n\tinl void access(int x) {\n\t\tfor (re i = 0; x; x = fa(i = x)) {\n\t\t\tsplay(x), rs(x) = i, maintain(x);\n\t\t}\n\t}\n\tinl void makeroot(int x) { access(x), splay(x), reverse(x); }\n\tinl void split(int x, int y) { makeroot(y), access(x), splay(x); }\n\tinl int findroot(int x) { access(x), splay(x), pushdown(x); while (ls(x))pushdown(x = ls(x)); splay(x); return x; }\n\tinl void link(int x, int y) { split(x, y), fa(y) = x; }\n\tinl void cut(int x, int y) { split(x, y), fa(y) = ls(x) = 0, maintain(x); }\n}lct[2];\nsigned main() {\n\tn = read<int>(), all = n * n;\n\tfor (re i = 1; i <= n; i++) {\n\t\tfor (re j = 1; j <= n; j++) {\n\t\t\tcol[i][j] = read<int>(), ans[col[i][j]]++;\n\t\t}\n\t}\n\tfor (re i = 1; i <= n; i++) {\n\t\tfor (re j = 1; j <= n; j++) {\n\t\t\tif (!vis[i][j])dfs(i, j);\n\t\t}\n\t}\n\tfor (re i = 0; i <= all; i++)lct[0].t[i].w = lct[1].t[i].w = inf;\n\tm = read<int>();\n\tfor (re i = 1; i <= m; i++) {\n\t\tre x = read<int>(), y = read<int>(), k = id(x, y), now;\n\t\tregister map<pair<int, int>, int>::iterator it;\n\t\tif (x > 1) {\n\t\t\tif ((it = mp.find(make_pair(id(x - 1, y), k))) != mp.end()) {\n\t\t\t\tnow = it->second;\n\t\t\t\te[now].w = i, lct[e[now].col].t[now + all].w = i;\n\t\t\t\tq[++num] = quiz{ 0,0,col[x][y],now,i };\n\t\t\t\tmp.erase(it);\n\t\t\t}\n\t\t\telse {\n\t\t\t\te[++tot] = edge{ id(x - 1, y), k,0,col[x][y] ^ 1 };\n\t\t\t\tmp[make_pair(id(x - 1, y), k)] = tot;\n\t\t\t\tq[++num] = quiz{ 0,1,!col[x][y],tot,i };\n\t\t\t}\n\t\t}\n\t\tif (y > 1) {\n\t\t\tif ((it = mp.find(make_pair(id(x, y - 1), k))) != mp.end()) {\n\t\t\t\tnow = it->second;\n\t\t\t\te[now].w = i, lct[e[now].col].t[now + all].w = i;\n\t\t\t\tq[++num] = quiz{ 0,0,col[x][y],now,i };\n\t\t\t\tmp.erase(it);\n\t\t\t}\n\t\t\telse {\n\t\t\t\te[++tot] = edge{ id(x,y - 1),k,0,col[x][y] ^ 1 };\n\t\t\t\tmp[make_pair(id(x, y - 1), k)] = tot;\n\t\t\t\tq[++num] = quiz{ 0,1,!col[x][y],tot,i };\n\t\t\t}\n\t\t}\n\t\tif (x < n) {\n\t\t\tif ((it = mp.find(make_pair(k, id(x + 1, y)))) != mp.end()) {\n\t\t\t\tnow = it->second;\n\t\t\t\te[now].w = i, lct[e[now].col].t[now + all].w = i;\n\t\t\t\tq[++num] = quiz{ 0,0,col[x][y],now,i };\n\t\t\t\tmp.erase(it);\n\t\t\t}\n\t\t\telse {\n\t\t\t\te[++tot] = edge{ k,id(x + 1, y), 0,col[x][y] ^ 1 };\n\t\t\t\tmp[make_pair(k, id(x + 1, y))] = tot;\n\t\t\t\tq[++num] = quiz{ 0,1,!col[x][y],tot,i };\n\t\t\t}\n\t\t}\n\t\tif (y < n) {\n\t\t\tif ((it = mp.find(make_pair(k, id(x, y + 1)))) != mp.end()) {\n\t\t\t\tnow = it->second;\n\t\t\t\te[now].w = i, lct[e[now].col].t[now + all].w = i;\n\t\t\t\tq[++num] = quiz{ 0,0,col[x][y],now,i };\n\t\t\t\tmp.erase(it);\n\t\t\t}\n\t\t\telse {\n\t\t\t\te[++tot] = edge{ k,id(x, y + 1), 0,col[x][y] ^ 1 };\n\t\t\t\tmp[make_pair(k, id(x, y + 1))] = tot;\n\t\t\t\tq[++num] = quiz{ 0,1,!col[x][y],tot,i };\n\t\t\t}\n\t\t}\n\t\tcol[x][y] ^= 1;\n\t\tq[++num].flag = 1, q[num].col = col[x][y];\n\t}\n\tfor (re i = 1; i <= tot; i++) {\n\t\tif (!e[i].w)e[i].w = m + 1, lct[e[i].col].t[i + all].w = m + 1;\n\t}\n\tfor (re i = 1; i <= num; i++) {\n\t\tif (q[i].flag) {\n\t\t\tans[q[i].col]++, ans[q[i].col ^ 1]--;\n\t\t\twritesp(ans[1]), writeln(ans[0]);\n\t\t}\n\t\telse {\n\t\t\tre c = q[i].col, j = q[i].id, u = e[j].u, v = e[j].v, w = e[j].w;\n\t\t\tlct[c].makeroot(u);\n\t\t\tif (q[i].op) {\n\t\t\t\tif (lct[c].findroot(v) == u) {\n\t\t\t\t\tlct[c].maintain(u);\n\t\t\t\t\tre minn = lct[c].t[u].min, d = lct[c].t[minn].w;\n\t\t\t\t\tif (d >= w)continue;\n\t\t\t\t\tlct[c].cut(e[minn - all].u, minn), lct[c].cut(e[minn - all].v, minn);\n\t\t\t\t\tlct[c].link(u, j + all), lct[c].link(v, j + all);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlct[c].link(u, j + all), lct[c].link(v, j + all), ans[c]--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (lct[c].findroot(v) == u) {\n\t\t\t\t\tre minn = lct[c].t[u].min, d = lct[c].t[minn].w;\n\t\t\t\t\tif (d > q[i].tim)continue;\n\t\t\t\t\tlct[c].cut(e[minn - all].u, minn), lct[c].cut(e[minn - all].v, minn), ans[c]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1558768681,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4121 [WC2005]\u53cc\u9762\u68cb\u76d8 LCT"
    },
    {
        "content": "\u5982\u679c\u8fd8\u4e0d\u4f1aLCT\u7ef4\u62a4\u56fe\u8fde\u901a\u6027\u7684\u540c\u5b66\uff0c \u53ef\u4ee5\u53c2\u8003\u6211\u7684\u8fd9\u7bc7\u535a\u5ba2:**[\u6233\u8fd9\u91cc](https://blog.csdn.net/lpa20020220/article/details/80161103)**\uff08\u8fd9\u9053\u9898\u7b97\u662fLCT\u7ef4\u62a4\u56fe\u8054\u901a\u6027\u7684\u677f\u9898\u4e86....\uff09\n\n\u76f8\u6bd4\u8f83\uff0c\u8fd9\u9053\u9898\u663e\u7136\u53d8\u5f97\u6bd2\u7624\u4e86\u5f88\u591a\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u683c\u5b50\u770b\u505a\u4e00\u4e2a\u70b9\uff0c \u4e0e\u65c1\u8fb9\u683c\u5b50\u6709\u56db\u6761\u8fb9\u76f8\u8fde\u3002 \u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u663e\u7136\u4f1a\u9047\u5230\u73af\u7684\u60c5\u51b5\uff0c \u600e\u4e48\u5904\u7406\u5462\uff1f \u540c\u6837\uff0c \u6211\u4eec\u7ef4\u62a4\u6709\u5173\u5220\u9664\u65f6\u95f4\u7684\u6700\u5927\u751f\u6210\u6811\uff0c \u5728\u52a0\u5165\u8fb9\u7684\u65f6\u5019\u5224\u65ad\u662f\u5426\u4e3a\u73af\u3002 \u5982\u679c\u6210\u4e3a\u73af\uff0c \u5219\u4e0e\u539f\u8def\u5f84\u4e2d\u5220\u9664\u65f6\u95f4\u6700\u65e9\u7684\u8fb9\u6bd4\u8f83\uff0c \u82e5\u65b0\u52a0\u5165\u8fb9\u7684\u5220\u9664\u65f6\u95f4\u66f4\u665a\u5219\u5220\u9664\u4e4b\u524d\u7684\u90a3\u6761\u8fb9\u3002\n\n\u81f3\u4e8e\u66f4\u65b0\u8272\u5757\u7684\u4e2a\u6570\uff0c \u6211\u4eec\u8003\u8651\u683c\u5b50\u56db\u4e2a\u65b9\u5411\u7684\u8fde\u8fb9\uff1a\u5982\u679c\u539f\u6765\u989c\u8272\u76f8\u540c\u5219\u5220\u8fb9\uff0c \u989c\u8272\u4e0d\u540c\u5219\u8fde\u8fb9\u3002 \u56e0\u4e3a\u6211\u4eec\u4fdd\u8bc1\u6ca1\u6709\u73af\u4e14\u4fdd\u8bc1\u8def\u5f84\u4e0a\u70b9\u5220\u9664\u65f6\u95f4\u5c3d\u91cf\u5927\uff0c \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528LCT\u7ef4\u62a4\u8054\u901a\u4fe1\u606f\uff0c \u53ea\u9700\u5224\u65ad\u662f\u5426\u5728\u4e00\u68f5\u6811\u5185\u5373\u53ef\u3002\n\n\u4e0d\u8fc7\u6b64\u9898\u79bb\u7ebf\u5b9e\u5728\u6076\u5fc3\uff08\u849f\u84bb\u5e76\u4e0d\u4f1a\u5f3a\u5236\u5728\u7ebf\u7684\u505a\u6cd5\u2026\u542c\u8bf4\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\uff1f\uff09\u2026 \u60f3\u60f3\u6211\u4eec\u9700\u8981\u79bb\u7ebf\u4ec0\u4e48\uff1f \u9996\u5148\uff0c \u6211\u4eec\u8981\u9884\u5904\u7406\u4e00\u5f00\u59cb\u8fb9\u7684\u8fde\u901a\u6027\u53ca\u521d\u59cb\u7b54\u6848\uff1b \u5176\u6b21\uff0c \u6211\u4eec\u8981\u79bb\u7ebf\u6240\u6709\u7684\u4fee\u6539\u64cd\u4f5c\uff0c \u5206\u4e3a\u56db\u4e2a\u65b9\u5411\u8003\u8651\uff1b \u7136\u540e\u6211\u4eec\u8fd8\u8981\u5904\u7406\u6bcf\u6761\u8fb9\u5220\u9664\u7684\u65f6\u95f4\uff0c \u5e76\u4ee5\u6b64\u4e3a\u6743\u503c\u5728LCT\u4e2d\u8fde\u8fb9\uff08\u6ce8\u610f\u8fd8\u4f1a\u6709\u591a\u6b21\u52a0\u5165\u7684\u60c5\u51b5\uff09\u2026\u2026\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u849f\u84bb\u7684\u4ee3\u7801\uff08\u4e0d\u5fcd\u76f4\u89c6\uff09\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <cctype>\n#include <cstdlib>\n#include <algorithm>\n#define R register\n#define IN inline\n#define W while\n#define gc getchar()\n#define ls tree[now].son[0]\n#define rs tree[now].son[1]\n#define dad tree[now].fat\n#define MX 205\n#define MQ 10005\n#define UB 40005\ntemplate <class T>\nIN void in(T &x)\n{\n    x = 0; R char c = gc;\n    W (!isdigit(c)) c = gc;\n    W (isdigit(c))\n    x = (x << 1) + (x << 3) + c - 48, c = gc;\n}\nnamespace Off_Line\n{\n    const short dx[5] = {0, -1, 0, 0, 1};\n    const short dy[5] = {0, 0, -1, 1, 0};\n    int dot, col[MX][MX], ans[2], cpy[MX][MX], cnt, q, opx[MQ], opy[MQ], out[MX * MX << 3];\n    struct Event\n    {\n        int x, y, tim, dis, id, col;\n        //tim\u8868\u793a\u5f53\u524d\u8fb9\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u95f4\n        //dis\u8868\u793a\u5f53\u524d\u8fb9\u5220\u9664\u7684\u65f6\u95f4\n        //id\u8868\u793a\u8fb9\u7684\u7f16\u53f7\uff0ccol\u8868\u793a\u683c\u5b50\u5f53\u524d\u7684\u989c\u8272\n        bool typ;\n    }eve[MX * MX << 3];\n    IN bool operator < (const Event &x, const Event &y)\n    {return x.tim == y.tim ? x.typ < y.typ : x.tim < y.tim;}\n    IN int get_edge_id(R int a, R int b, R int c, R int d)\n    {\n        if(a == c)//\u6a2a\u5411\u8fb9\n        {\n            if(b > d) std::swap(b, d);\n            return (a - 1) * (dot - 1) + b;\n        }\n        else//\u7eb5\u5411\u8fb9\uff0c \u7f16\u53f7\u90fd\u5927\u4e8e\u6a2a\u5411\u8fb9\n        {\n            if(a > c) std::swap(a, c);\n            return (dot - 1) * dot + (a - 1) * dot + b;\n        }\n    }\n    IN int get_dot_id(const int &x, const int &y) {return (x - 1) * dot + y;}//\u70b9\u7f16\u53f7\n}\nnamespace LCT\n{\n    using namespace Off_Line;\n    struct Node\n    {\n        int son[2], fat, mn, val, pos;\n        bool rev, ex;\n        //ex \u8868\u793a\u662f\u5426\u5b58\u5728\uff08\u5373\u662f\u5426\u5df2\u7ecf\u88ab\u5272\uff09\n        IN void clear()\n        {\n            this -> son[0] = this -> son[1] = this -> fat = this ->pos = this ->rev = this -> ex = 0;\n            this ->val = this -> mn = 0x7f7f7f7f;\n        }\n    }tree[MX * MX << 4];\n    int st[MX * MX << 3], top, lef[MX * MX << 3], rig[MX * MX << 3];\n    IN bool get(const int &now) {return tree[dad].son[1] == now;}\n    IN void pushrev(const int &now) {std::swap(ls, rs), tree[now].rev ^= 1;}\n    IN bool nroot(const int &now) {return tree[dad].son[1] == now || tree[dad].son[0] == now;}\n    IN void pushup(const int &now)\n    {\n        tree[now].mn = tree[now].val, tree[now].pos = now;\n        if(ls) if(tree[ls].mn < tree[now].mn) tree[now].mn = tree[ls].mn, tree[now].pos = tree[ls].pos;\n        if(rs) if(tree[rs].mn < tree[now].mn) tree[now].mn = tree[rs].mn, tree[now].pos = tree[rs].pos;\n    }\n    IN void pushdown(const int &now) \n    {\n        if(tree[now].rev)\n        {\n            if(ls) pushrev(ls);\n            if(rs) pushrev(rs);\n            tree[now].rev = false;\n        }\n    }\n    IN void rotate(const int &now)\n    {\n        R bool dir = get(now);\n        R int fa = dad, grand = tree[fa].fat;\n        tree[fa].son[dir] = tree[now].son[dir ^ 1];\n        tree[tree[now].son[dir ^ 1]].fat = fa;\n        if(nroot(fa)) tree[grand].son[get(fa)] = now;\n        tree[now].fat = grand;\n        tree[now].son[dir ^ 1] = fa;\n        tree[fa].fat = now;\n        pushup(fa);\n    }\n    IN void splay(int now)\n    {\n        top = 0; R int x = now, fa, grand;\n        st[++top] = x;\n        W (nroot(x)) x = tree[x].fat, st[++top] = x;\n        W (top) pushdown(st[top--]);\n        W (nroot(now))\n        {\n            fa = dad, grand = tree[fa].fat;\n            if(nroot(fa)) rotate(get(fa) == get(now) ? fa : now);\n            rotate(now);\n        }\n        pushup(now);\n    }\n    IN void access(int now)\n    {\n        for (R int y = 0; now; y = now, now = tree[now].fat)\n        splay(now), tree[now].son[1] = y, pushup(now);\n    }\n    IN void make_root(const int &now)\n    {\n        access(now), splay(now), pushrev(now);\n    }\n    IN int find_root(int now)\n    {\n        access(now), splay(now);\n        W (ls) pushdown(now), now = ls;\n        return now;\n    }\n    IN void split(const int &x, const int &y)\n    {make_root(x), access(y), splay(y);}\n    IN void link(const int &x, const int &y)\n    {\n        make_root(x);\n        if(find_root(y) != x)\n        tree[x].fat = y;\n    }\n    IN void cut(const int &x, const int &y)\n    {\n        split(x, y); \n        tree[x].fat = tree[y].son[0] = 0;\n        pushup(y);\n    }\n//----------------------\u4ee5\u4e0a\u662f\u6b63\u5e38\u7684LCT\u6a21\u677f-------------------------\n    IN void add(const int &now, const int &cl)\n    {\n        int x = eve[now].x, y = eve[now].y, dis = eve[now].dis, id = eve[now].id;\n        if(find_root(y) == find_root(x))\n        {\n            split(x, y);\n            if(tree[y].mn > dis) return;\n            int tar = tree[y].pos;\n            cut(tar, lef[tar]);\n            cut(tar, rig[tar]);\n            tree[tar].clear();\n        }\n        else ans[cl]--; int nx = id + UB;\n        tree[nx].val = dis;\n        tree[nx].ex = true;\n        tree[nx].pos = nx;\n        lef[nx] = x, rig[nx] = y;//\u8bb0\u5f55\u4e24\u8fb9\u7684\u70b9\u662f\u54ea\u4e24\u4e2a\uff0c \u65b9\u4fbfcut\u7684\u65f6\u5019O(1)\u627e\u5230\n        link(nx, x), link(nx, y);\n        pushup(nx);\n    }\n    IN void del(const int &now)\n    {\n        int x = eve[now].x, y = eve[now].y, id = eve[now].id;\n        cut(id + UB, x), cut(id + UB, y);\n        tree[id + UB].ex = false;\n    }\n}\nusing namespace Off_Line;\nusing namespace LCT;\nint main(void)\n{\n    int a, b, nx, ny, nn;\n    R int i, j;\n    in(dot);\n    memset(out, -1, sizeof(out));\n    for (i = 1; i <= dot; ++i)\n    for (j = 1; j <= dot; ++j)\n    in(col[i][j]), cpy[i][j] = col[i][j], ans[col[i][j]]++;//cpy\u91cc\u9762\u88c5\u7684\u662f\u590d\u5236\u7684\u65b9\u683c\uff0c \u7b2c\u4e00\u6b21\u79bb\u7ebf\u64cd\u4f5c\u7528\n    for (i = 1; i <= dot; ++i)//\u8fd9\u4e00\u6b65\u662f\u79bb\u7ebf\u6240\u6709\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u8fde\u901a\u6027\n    for (j = 1; j <= dot; ++j)\n    {\n        a = get_dot_id(i, j), b = col[i][j];\n        if(j != dot && col[i][j + 1] == col[i][j])\n        eve[++cnt].x = a, eve[cnt].y = a + 1, eve[cnt].tim = 0, \n        eve[cnt].id = get_edge_id(i, j, i, j + 1), eve[cnt].typ = 1, eve[cnt].col = b;\n        if(i != dot && col[i + 1][j] == col[i][j])\n        eve[++cnt].x = a, eve[cnt].y = a + dot, eve[cnt].tim = 0,\n        eve[cnt].id = get_edge_id(i, j, i + 1, j), eve[cnt].typ = 1, eve[cnt].col = b;\n    }\n    in(q);\n    for (i = 1; i <= q; ++i)\n    {\n        in(opx[i]), in(opy[i]);\n        a = get_dot_id(opx[i], opy[i]);\n        for (j = 1; j <= 4; ++j)//\u56db\u4e2a\u65b9\u5411 \u5220\u8fb9\u6216\u8fde\u8fb9\u64cd\u4f5c\n        {\n            nx = opx[i] + dx[j], ny = opy[i] + dy[j], nn = get_dot_id(nx, ny);\n            if(nx <= 0 || nx > dot || ny <= 0 || ny > dot) continue;\n            if(cpy[opx[i]][opy[i]] == cpy[nx][ny])\n            eve[++cnt].x = a, eve[cnt].y = nn, eve[cnt].tim = i,\n            eve[cnt].id = get_edge_id(opx[i], opy[i], nx, ny), eve[cnt].typ = 0;\n            else\n            eve[++cnt].x = a, eve[cnt].y = nn, eve[cnt].tim = i,\n            eve[cnt].id = get_edge_id(opx[i], opy[i], nx, ny), eve[cnt].typ = 1; \n        }\n        cpy[opx[i]][opy[i]] ^= 1;//\u5728\u590d\u5236\u7684\u56fe\u4e0a\u4fee\u6539\n    }\n    std::sort(eve + 1, eve + 1 + cnt);\n    for (i = 1; i <= cnt; ++i) eve[i].dis = q + 1;\n    for (i = cnt; i >= 1; --i)\n    {\n        if(~out[eve[i].id]) eve[i].dis = out[eve[i].id];//\u4ece\u540e\u5f80\u524d\u5904\u7406\u8fb9\u5220\u9664\u65f6\u95f4\n        out[eve[i].id] = eve[i].tim;\n    }\n    for (i = 1; i <= UB; ++i) tree[i].val = 0x7f7f7f7f;//\u5c06\u6240\u6709\u5b9e\u9645\u5b58\u5728\u7684\u70b9\u7684\u5220\u9664\u65f6\u95f4\u8d4b\u4e3a\u6b63\u65e0\u7a77\uff08\u53cd\u6b63\u4e0d\u80fd\u5220\uff09\n    for (i = 1; i <= cnt && !eve[i].tim; ++i)\n    add(i, eve[i].col);//\u52a0\u8fb9\u64cd\u4f5c\n    for (j = 1; j <= q; ++j)\n    {\n        a = col[opx[j]][opy[j]];\n        for (; i <= cnt && eve[i].tim <= j; ++i)\n            if(!eve[i].typ)\n            {\n                if(!tree[eve[i].id + UB].ex) continue;\n                del(i);\n                ++ans[a];\n            }\n            else add(i, a ^ 1);\n            --ans[a];//delete\u7684\u65f6\u5019\u4f1a\u591a\u8ba1\u7b97\u4e00\u6b21\uff0c \u6240\u4ee5\u8981\u5220\u6389\n            ++ans[a ^ 1];//\u540c\u4e0a\uff0c \u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u7406\u89e3\n            col[opx[j]][opy[j]] ^= 1;\n        printf(\"%d %d\\n\", ans[1], ans[0]);\n    }\n\n}\n```",
        "postTime": 1525356451,
        "uid": 67492,
        "name": "LPA20020220",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4121 \u3010[WC2005]\u53cc\u9762\u68cb\u76d8\u3011"
    }
]