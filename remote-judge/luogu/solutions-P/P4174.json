[
    {
        "content": "\u4ec0\u4e48\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff1a\n\n\u5148\u89e3\u91ca\u4e00\u4e0b\u6709\u5411\u56fe\u7684\u95ed\u5408\u56fe\uff1a\u95ed\u5408\u56fe\u5185\u4efb\u610f\u70b9\u7684\u4efb\u610f\u540e\u7ee7\u4e5f\u4e00\u5b9a\u8fd8\u5728\u95ed\u5408\u56fe\u4e2d\u3002\n\n\u7269\u7406\u610f\u4e49\uff1a\u4e8b\u7269\u95f4\u4f9d\u8d56\u5173\u7cfb:\u4e00\u4e2a\u4e8b\u4ef6\u8981\u53d1\u751f\uff0c\u5b83\u9700\u8981\u7684\u6240\u6709\u524d\u63d0\u4e5f\u90fd\u4e00\u5b9a\u8981\u53d1\u751f\u3002\n\n\u6700\u5927\u6743\u95ed\u5408\u56fe\uff1a\u70b9\u6743\u4e4b\u548c\u6700\u5927\u7684\u95ed\u5408\u56fe\n\n\u6700\u5927\u6743\u95ed\u5408\u56fe\u6784\u56fe\u65b9\u6cd5\uff1a\n\n1.\u589e\u52a0\u6e90s\u6c47t \n\n2.\u6e90s\u8fde\u63a5\u539f\u56fe\u7684\u6b63\u6743\u70b9\uff0c\u5bb9\u91cf\u4e3a\u76f8\u5e94\u70b9\u6743\n\n3.\u539f\u56fe\u7684\u8d1f\u6743\u70b9\u8fde\u63a5\u6c47t\uff0c\u5bb9\u91cf\u4e3a\u76f8\u5e94\u70b9\u6743\u7684\u76f8\u53cd\u6570\n\n4.\u539f\u56fe\u8fb9\u7684\u5bb9\u91cf\u4e3a\u6b63\u65e0\u9650\u3002\n\n\n\u6700\u5927\u6743\u95ed\u5408\u56fe \u89e3\u51b3\uff1a\n\n\u95ed\u5408\u56feV\u7684\u6743\u4e3a\u6b63\u6743\u70b9\u603b\u548c\u51cf\u53bb\u5bf9\u5e94\u5272\u7684\u5bb9\u91cf\n\n\u5f53\u5272\u6700\u5c0f\u65f6\uff0c\u95ed\u5408\u56fe\u6743\u6700\u5927\n\nNOI2006 \u6700\u5927\u83b7\u5229\uff1a\n\n1.\u5c06\u539f\u9898\u4e2d\u7684\u8fb9\u548c\u70b9\u90fd\u770b\u6210\u4e8b\u4ef6\u3002\n\n2.\u8fb9\u4e8b\u4ef6\u4f9d\u8d56\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e8b\u4ef6\u7684\u53d1\u751f\u3002\u8fd9\u4e0e\u95ed\u5408\u56fe\u7684\u6027\u8d28\u76f8\u4f3c\u3002\n\n3.\u6784\u9020\u6027\u5730\uff0c\u5c06\u8fb9\u8f6c\u5316\u4e3a\u70b9\u4e8b\u4ef6\u3002\n\n4.\u5c06\u6240\u6709\u8fb9\u90fd\u8f6c\u5316\u4e3a\u4e8b\u4ef6\u70b9\uff0c\u539f\u56fe\u4fbf\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\n\n5.\u89e3\u51b3\u8be5\u4e8c\u5206\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u56fe\u5373\u53ef\n```cpp\n#include<cmath>  \n#include<cstdio>  \n#include<cstring>  \n#include<iostream>  \n#include<algorithm>  \nusing namespace std;  \nconst int N=120005;  \nconst int M=400005;  \nconst int inf=2100000000;  \nint n,m,S,T;  \nint from[M],to[M],nxt[M],w[M],lj[N],cnt=-1;  \nvoid insert(int f,int t,int p)  \n{  \n    to[++cnt]=t;  \n    nxt[cnt]=lj[f];  \n    lj[f]=cnt;  \n    w[cnt]=p;  \n    to[++cnt]=f;  \n    nxt[cnt]=lj[t];  \n    lj[t]=cnt;  \n    w[cnt]=0;  \n}  \nint d[N],q[N*2];  \nbool bfs()  \n{  \n    memset(d,0,sizeof(d));  \n    int h=1,t=1,x,j;  \n    q[1]=S,d[S]=1;  \n    while(h!=t+1)  \n    {  \n        x=q[h];  \n        for(int i=lj[x];i>=0;i=nxt[i])  \n        if(w[i]&&!d[to[i]])  \n        {  \n            d[to[i]]=d[x]+1;  \n            q[++t]=to[i];  \n            if(t==N) t=0;  \n        }  \n        if(++h==N) h=0;  \n    }  \n    if(d[T]) return true;  \n    return false;   \n}  \nint dfs(int x,int v)  \n{  \n    if(x==T||v==0) return v;  \n    int f,ret=0;  \n    for(int i=lj[x];i>=0;i=nxt[i])  \n    if(d[to[i]]==d[x]+1)  \n    {  \n        f=dfs(to[i],min(w[i],v));  \n        w[i]-=f;  \n        w[i^1]+=f;  \n        v-=f;  \n        ret+=f;  \n        if(v==0) break;  \n    }  \n    return ret;  \n}  \nint main()  \n{  \n    scanf(\"%d%d\",&n,&m);  \n    T=m+n+1,S=0;  \n    int x,y,p;  \n    for(int i=0;i<=T;i++) lj[i]=-1;  \n    for(int i=1;i<=n;i++)  \n    {  \n        scanf(\"%d\",&x);  \n        insert(0,i,x);  \n    }  \n    int sum=0,ans=0;  \n    for(int i=1;i<=m;i++)  \n    {  \n        scanf(\"%d%d%d\",&x,&y,&p);  \n        insert(n+i,T,p);  \n        insert(x,n+i,inf);  \n        insert(y,n+i,inf);  \n        sum+=p;  \n    }  \n    while(bfs()) ans+=dfs(S,inf);  \n    printf(\"%d\",sum-ans);  \n}\n```",
        "postTime": 1528597451,
        "uid": 98954,
        "name": "\u4e0d\u5b58\u5728\u4e4b\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    },
    {
        "content": "\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u57fa\u7840\u5e94\u7528\n\n\u6e90\u70b9\u5411\u6240\u6709\u7528\u6237\u8fde\u6d41\u91cf\u4e3a\u6536\u76ca\u7684\u8fb9\n\n\u6240\u6709\u4e2d\u8f6c\u7ad9\u5411\u6c47\u70b9\u8fde\u6d41\u91cf\u4e3a\u6210\u672c\u7684\u8fb9\n\n\u7528\u6237\u6240\u9700\u8981\u7684\u4e2d\u8f6c\u7ad9\uff0c\u7531\u7528\u6237\u5411\u9700\u8981\u7684\u4e2d\u8f6c\u7ad9\u8fdeinf\u8fb9\n\n\u6700\u540e\u7528\u603b\u6536\u76ca\u51cf\u53bb\u6700\u5c0f\u5272(\u6700\u5927\u6d41)\u5c31\u662f\u7b54\u6848\n\n\u539f\u56e0\u5f88\u7b80\u5355\n\n\u5982\u679c\u5272\u6389\u7528\u6237\u7684\u8fb9\uff0c\u90a3\u4e48\u5c31\u820d\u5f03\u6389\u4e00\u90e8\u5206\u6536\u76ca\uff0c\u53ef\u4ee5\u770b\u505a\u635f\u5931\n\n\u5982\u679c\u5272\u6389\u4e2d\u8f6c\u7ad9\u7684\u8fb9\uff0c\u90a3\u4e48\u5c31\u4ed8\u51fa\u4e00\u5b9a\u4ee3\u4ef7\uff0c\u53ef\u4ee5\u770b\u505a\u635f\u5931\n\n\u53c8\u56e0\u4e3a\u4e0d\u4f1a\u5272\u6389INF\u7684\u8fb9\uff0c\u6240\u4ee5\u5c31\u5de7\u5999\u7684\u89e3\u51b3\u4e86\u9009A\u5fc5\u987b\u9009B\u7684\u95ee\u9898\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define AddEdge(x,y,z) add_edge(x,y,z),add_edge(y,x,0);\nusing namespace std;\nconst int MAXN=100001,INF=1e8+10;\ninline char nc()\n{\n    static char buf[MAXN],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,MAXN,stdin),p1==p2)?EOF:*p1++;\n}\ninline int read()\n{\n    char c=nc();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=nc();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=nc();}\n    return x*f;\n}\nint N,M,S,T;\nstruct node\n{\n    int u,v,flow,nxt;\n}edge[MAXN*5];\nint head[MAXN],cur[MAXN],num=0;\ninline void add_edge(int x,int y,int z)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].flow=z;\n    edge[num].nxt=head[x];\n    head[x]=num++;\n}\nint deep[MAXN];\ninline bool BFS()\n{\n    memset(deep,0,sizeof(deep));\n    deep[S]=1;\n    queue<int>q;\n    q.push(S);\n    while(q.size()!=0)\n    {\n        int p=q.front();\n        q.pop();\n        for(int i=head[p];i!=-1;i=edge[i].nxt)\n            if(!deep[edge[i].v]&&edge[i].flow)\n            {\n                deep[edge[i].v]=deep[p]+1;q.push(edge[i].v);\n                if(edge[i].v==T) return 1;\n            }\n    }\n    return deep[T];\n}\nint DFS(int now,int nowflow)\n{\n    if(now==T||nowflow<=0)    return nowflow;\n    int totflow=0;\n    for(int &i=cur[now];i!=-1;i=edge[i].nxt) \n    {\n        if(deep[edge[i].v]==deep[now]+1&&edge[i].flow)\n        {\n            int canflow=DFS(edge[i].v,min(nowflow,edge[i].flow));\n            edge[i].flow-=canflow;edge[i^1].flow+=canflow;\n            totflow+=canflow;\n            nowflow-=canflow;\n            if(nowflow<=0) break;\n        }\n    }\n    return totflow;\n}\nint Dinic()\n{\n    int ans=0;\n    while(BFS())\n    {\n        memcpy(cur,head,sizeof(head)); \n        ans+=DFS(S,INF);\n    }\n    return ans;    \n}\n\nint main()\n{\n    #ifdef WIN32\n    freopen(\"a.in\",\"r\",stdin);\n    #else\n    #endif\n    memset(head,-1,sizeof(head));\n\tint N=read(),M=read();\n\tS=0;T=N+M+1;\n\tfor(int i=1;i<=N;i++) \n\t{\n\t\tint P=read();\n\t\tAddEdge(i+M,T,P);\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tint A=read(),B=read(),C=read();\n\t\tans+=C;\n\t\tAddEdge(S,i,C);\n\t\tAddEdge(i,A+M,INF);\n\t\tAddEdge(i,B+M,INF);\n\t}\n\tprintf(\"%d\",ans-Dinic());\n    return  0;\n}\n```",
        "postTime": 1517919642,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    },
    {
        "content": "# P4174 [NOI2006]\u6700\u5927\u83b7\u5229\n### [Blog\u98df\u7528\u66f4\u4f73](https://www.luogu.org/blog/DiamondHeart/solution-p4174)\n\n\u539f\u9898\u94fe\u63a5\uff1a[\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P4174)\n\n\u9898\u610f\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\n\n\u8fd9\u9898\u662f\u6700\u5927\u6743\u95ed\u5408\u56fe\uff0c\u4f46\u662f\u6211\u7684\u601d\u60f3\u7565\u6709\u4e0d\u540c\uff0c\u4e3b\u8981\u662f**\u5efa\u56fe**\n\n### \u5efa\u56fe\u65b9\u5f0f\uff1a\n1.\u8bbe\u7acb\u8d85\u7ea7\u6e90\uff0c\u5e76\u5c06\u6e90\u70b9\u4e0e\u6bcf\u4f4d\u7528\u6237i\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u6536\u76ca$c[i]$\n\n2.\u5c06\u6bcf\u4f4d\u7528\u6237\u4e0e\u5176\u6240\u9700\u7684\u4e24\u4e2a\u4e2d\u8f6c\u7ad9\u76f8\u8fde\uff0c\u8fb9\u6743\u5747\u4e3a$inf$\n\n3.\u8bbe\u7acb\u8d85\u7ea7\u6c47\uff0c\u5c06\u6bcf\u4e2a\u4e2d\u8f6c\u7ad9\u4e0e\u6c47\u70b9\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u8d39\u7528$p[i]$\n\n\u7136\u540e\u8dd1\u7f51\u7edc\u6700\u5927\u6d41\uff08\u522b\u544a\u8bc9\u6211\u4f60\u4e0d\u4f1a\u7f51\u7edc\u6d41\u60f3\u6765\u5207\u8fd9\u9898\uff09\n\n\u8bbe\u6700\u5927\u6d41\u4e3a$flow$\uff0c\u6240\u6709\u7528\u6237\u7684\u6536\u76ca\u548c\u4e3a$sum$\uff0c\u7b54\u6848\u5373\u4e3a$sum-flow$\n\n### \u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\uff1f\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u6240\u6709\u4e8f\u672c\u7684\u7528\u6237\uff08\u6216\u51e0\u4e2a\u4e92\u76f8\u8054\u7cfb\u7684\u7528\u6237\uff09\uff0c\u5176\u603b\u8d39\u7528\u5fc5\u7136\u5927\u4e8e\u6536\u76ca\uff08\u663e\u800c\u6613\u89c1\uff09\uff0c\n\n\u653e\u5230\u7f51\u7edc\u4e2d\uff0c\u5c31\u662f\u4e0e\u6e90\u70b9\u76f8\u8fde\u7684\u8fb9\u6743\u548c\uff08\u6536\u76ca\uff09\u5c0f\u4e8e\u4e0e\u6c47\u70b9\u76f8\u8fde\u7684\u8fb9\u6743\u548c\uff08\u8d39\u7528\uff09\uff0c\u6839\u636e\u7f51\u7edc\u7684\n\n\u5bb9\u91cf\u9650\u5236\uff0c\u6b64\u65f6\u4ece\u8fd9\u4e9b\u7528\u6237\u70b9\u6d41\u51fa\u7684\u6d41\u91cf\u5fc5\u7136\u7b49\u4e8e\u8fd9\u4e9b\u7528\u6237\u7684\u603b\u6536\u76ca\uff0c\u51cf\u53bb\u4e4b\u540e\u5c31\u7b49\u4ef7\u4e8e\u8fd9\u4e9b\u7528\n\n\u6237\u5bf9\u7b54\u6848\u6ca1\u6709\u8d21\u732e\uff08\u5373\u6536\u76ca\u4e3a0\uff09.\u5176\u6b21\uff0c\u5bf9\u4e8e\u4e0d\u4e8f\u672c\u7684\u7528\u6237\uff08\u5373\u5bf9\u7b54\u6848\u6709\u8d21\u732e\u7684\u7528\u6237\uff09\uff0c\u540c\u6837\n\n\u5730\uff0c\u603b\u8d39\u7528\u5c0f\u4e8e\u603b\u6536\u76ca\uff0c\u6b64\u65f6\u6d41\u91cf\u4e3a\u603b\u8d39\u7528\uff0c\u5c06\u6536\u76ca\u51cf\u53bb\u6d41\u91cf\u540e\u5373\u4e3a\u5b9e\u9645\u6536\u76ca\u3002\n\n### P.s.\n\n1.\u8fd9\u662f\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u671b\u652f\u6301\n\n2.\u672c\u9898\u89e3\u7684\u601d\u60f3\u4e0d\u5b8c\u5168\u4e25\u8c28\uff0c\u60f3\u8981\u66f4\u4e25\u8c28\u7684\u505a\u6cd5\u53ef\u4ee5\u53c2\u8003[\u6700\u5c0f\u5272\u6a21\u578b\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528](https://wenku.baidu.com/view/986baf00b52acfc789ebc9a9.html)\n\n### \u6700\u540e\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define inf 2147483647\nusing namespace std;\n\nconst int N=2e5+5;//\u6570\u7ec4\u5f00\u5927\u70b9\nint n,m,s,t,num=1,head[N],d[N];\nstruct edge {\n    int next,to,w;\n}e[N<<1];\nqueue<int> q;\n\nvoid add(int from,int to,int w) {\n    e[++num].next=head[from],e[num].to=to,e[num].w=w,head[from]=num;\n    e[++num].next=head[to],e[num].to=from,e[num].w=0,head[to]=num;\n}\n\nbool bfs() {\n    memset(d,0,sizeof(d));\n    while(!q.empty()) q.pop();\n    q.push(s),d[s]=1;\n    while(!q.empty()) {\n        int u=q.front(); q.pop();\n        for(int i=head[u]; i; i=e[i].next) if(!d[e[i].to]&&e[i].w) {\n            q.push(e[i].to);\n            d[e[i].to]=d[u]+1;\n            if(e[i].to==t) return 1;\n        }\n    }\n    return 0;\n}\n\nint dfs(int u,int flow) {\n    if(u==t) return flow;\n    int k,rest=flow;\n    for(int i=head[u]; i&&rest; i=e[i].next) if(d[e[i].to]==d[u]+1&&e[i].w) {\n        k=dfs(e[i].to,min(rest,e[i].w));\n        if(!k) d[e[i].to]=0;\n        e[i].w-=k,e[i^1].w+=k;\n        rest-=k;\n    }\n    return flow-rest;\n}\n\nint dinic() {\n    int maxflow=0,flow;\n    while(bfs()) {\n        while(1) {\n            flow=dfs(s,inf);\n            maxflow+=flow;\n            if(!flow) break;\n        }\n    }\n    return maxflow;\n}\n\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    int p,a,b,c,sum=0;  s=0,t=n+m+1;\n    for(int i=1; i<=n; i++) {\n        scanf(\"%d\",&p);\n        add(m+i,t,p);\n    }\n    for(int i=1; i<=m; i++) {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        sum+=c;\n        add(s,i,c);\n        add(i,m+a,inf),add(i,m+b,inf);\n    }\n    printf(\"%d\\n\",sum-dinic());//\u6211\u7528\u7684\u662fdinic\u7b97\u6cd5\n    return 0;\n}",
        "postTime": 1551426705,
        "uid": 60504,
        "name": "Karnage",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    },
    {
        "content": "\u975e\u5e38\u7ecf\u5178\u7684\u7f51\u7edc\u6d41\u6a21\u578b\u3002\n\n**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe**\n\nPS:\u672c\u6587\u53c2\u8003\u4e86\u80e1\u4f2f\u6d9b\u7684\u300a\u6700\u5c0f\u5272\u6a21\u578b\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u7684\u5e94\u7528\u300b\u8bba\u6587\uff0c\u611f\u5174\u8da3\u7684dalao\u53ef\u4ee5\u9605\u8bfb\u4e00\u4e0b[\u94fe\u63a5](http://www.doc88.com/p-695925489832.html)\n\n\u6211\u4eec\u5c06\u6837\u4f8b\u7528\u56fe\u7684\u5f62\u5f0f\u8868\u8fbe\n\n```\n5 5\n1 2 3 4 5\n1 2 3\n2 3 4\n1 3 3\n1 4 2\n4 5 3\n```\n![](https://cdn.luogu.com.cn/upload/pic/52295.png)\n\n\u770b\u8d77\u6765\u65e0\u4ece\u4e0b\u624b\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c06\u5176\u8f6c\u6362\u4e3a\u4e0b\u9762\u8fd9\u5e45\u56fe\uff0c\u5bb9\u6613\u770b\u51fa\uff0c\u5b83\u4eec\u662f\u7b49\u4ef7\u7684\u3002\u5e76\u4e14\uff0c\u4e0b\u56fe\u662f\u4e2a**\u4e8c\u5206\u56fe**\u3002\n![](https://cdn.luogu.com.cn/upload/pic/52291.png)\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5f15\u5165**\u6709\u5411\u56fe\u7684\u95ed\u5408\u5b50\u56fe**\u7684\u6982\u5ff5\n\n> \u5b9a\u4e49\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u95ed\u5408\u56fe\uff08closure\uff09$G=(V,E)$\u662f\u8be5\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u70b9\u96c6\uff0c\u4e14\u8be5\u70b9\u96c6\u7684\u6240\u6709\u51fa\u8fb9\u90fd\u8fd8\u6307\u5411\u8be5\u70b9\u96c6\u3002\u5373\u95ed\u5408\u56fe\u5185\u7684\u4efb\u610f\u70b9\u7684\u4efb\u610f\u540e\u7ee7\u4e5f\u4e00\u5b9a\u5728\u95ed\u5408\u56fe\u4e2d\u3002\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u5728\u672c\u56fe\u4e2d\uff0c\u5982\u679c\u9009\u62e9\u4e86\u5de6\u8fb9\u7684\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u4e0e\u5176\u76f8\u8fde\u7684\u53f3\u8fb9\u7684\u4e24\u4e2a\u70b9**\u4e00\u5b9a\u4e5f\u8981\u88ab\u9009\u4e2d**\u3002\u800c\u6211\u4eec\u8981\u6c42\u7684\uff0c\u5c31\u662f\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u9009\u7684\u70b9\u6743\u4e4b\u548c\u6700\u5927\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u6700\u5c0f\u5272\u7684\u6a21\u578b\u53bb\u89e3\u51b3\u3002\u6211\u4eec\u5c06**\u6b63\u6743\u70b9\u8fde\u5411\u6e90\u70b9$S$\uff0c\u8fb9\u6743\u4e3a\u70b9\u6743\uff0c\u8d1f\u6743\u70b9\u8fde\u5411\u6c47\u70b9$T$\uff0c\u8fb9\u6743\u4e3a\u70b9\u6743\u7684\u7edd\u5bf9\u503c\uff0c\u800c\u539f\u6765\u7684\u8fb9\u7684\u6743\u503c\u4e3a$INF$\u3002**\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/52292.png)\n\n\n\u6211\u4eec\u4f7f\u7528\u6700\u5c0f\u5272\uff0c\u4e2d\u95f4\u7684\u4e0d\u53ef\u5272\uff0c\u5de6\u8fb9\u5272\u4e86\u5c31\u610f\u5473\u7740\u653e\u5f03\u4e86\u7b2c$i$\u540d\u7528\u6237\u7684\u6743\u76ca\uff0c\u53f3\u8fb9\u5272\u4e86\u5c31\u610f\u5473\u7740\u5efa\u7b2c$i$\u4e2a\u57fa\u7ad9\u3002\u6700\u540e\uff0c\u6240\u6709\u6b63\u6743\u70b9\u7684\u70b9\u6743\u4e4b\u548c\u51cf\u53bb\u5f97\u5230\u7684\u6700\u5c0f\u5272\u5373\u4e3a\u7b54\u6848\u3002\n\n\u6c42\u6700\u5c0f\u5272\u53ef\u4ee5\u7528\u201c\u6700\u5927\u6d41=\u6700\u5c0f\u5272\u201d\u5b9a\u7406\u89e3\u51b3\u3002\n\n\u4e0a\u4ee3\u7801\n\n```c++\n//1\u4e3a\u6e90\u70b9\uff0c2~1+m\u4e3a\u7528\u6237\uff0c2+m~n+m+1\u4e3a\u7b2ci\u4e2a\u57fa\u7ad9\uff0cn+m+2\u4e3a\u6c47\u70b9\n#include<bits/stdc++.h>\n#define inf 2147483647\n#define T n+m+2\n#define N 400000\nusing namespace std;\nint cc,to[N],net[N],fr[N],len[N],fx[N],c[N],q[N];\nbool vis[N];int n,m,a,u,v,l,sum;\nvoid addedge(int u,int v,int l)\n{\n\tcc++;\n\tto[cc]=v;net[cc]=fr[u];fr[u]=cc;len[cc]=l;fx[cc]=cc+1;\n\tcc++;\n\tto[cc]=u;net[cc]=fr[v];fr[v]=cc;len[cc]=0;fx[cc]=cc-1;\n}//\u5efa\u8fb9\nbool bfs()\n{\n\tint h=1,t=1;\n\tfor (int i=1;i<=T;i++)\n\t  c[i]=0,vis[i]=false;\n\tq[1]=1;c[1]=1;vis[1]=true;\n\twhile (h<=t)\n\t{\n\t\tfor (int i=fr[q[h]];i;i=net[i])\n\t\t{\n\t\t\tif (vis[to[i]]||(!len[i])) continue;\n\t\t\tq[++t]=to[i];\n\t\t\tc[to[i]]=c[q[h]]+1;vis[to[i]]=true;\n\t\t}\n\t\th++;\n\t}\n\treturn vis[T];\n}\nint dfs(int x,int k)\n{\n\tint ff=0;\n\tif (x==T) return k;\n\tfor (int i=fr[x];i;i=net[i])\n\t{\n\t\tif (len[i]&&c[to[i]]==c[x]+1)\n\t\t{\n\t\t\tint y=min(k,len[i]);\n\t\t\tint re=dfs(to[i],y);\n\t\t\tlen[i]-=re;\n\t\t\tlen[fx[i]]+=re;\n\t\t\tff+=re;k-=re;\n\t\t}\n\t\tif (k<=0) break;\n\t}\n\treturn ff;\n}\nint dinic()\n{\n\tint ans=0;\n\twhile (bfs())\n\t{\n\t    ans+=dfs(1,inf);\n\t}\n\treturn ans;\n} //\u8dd1dinic\nint main()\n{\n\tscanf(\"%d%d\",&n,&m); \n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d\",&a);\n\t\taddedge(m+1+i,T,a);\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&l);\n\t\tsum+=l;\n\t\taddedge(1,1+i,l);\n\t\taddedge(1+i,1+m+u,inf);\n\t\taddedge(1+i,1+m+v,inf);\n\t}\n\tcout<<sum-dinic(); \n\treturn 0;\n} \n```\n\n\n",
        "postTime": 1550726036,
        "uid": 73990,
        "name": "fmj_123",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    },
    {
        "content": "\u4e00\u79cd\u4e0d\u540c\u7684\u505a\u6cd5\u3002\r\n\r\n\u56e0\u4e3a\u4e00\u4e2a\u4eba\u53ea\u4f1a\u8fde\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u4eba\u770b\u6210\u8fb9\uff0c\u73b0\u5728\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u4e00\u4e2a\u70b9\u96c6 $V^\\prime$ \u548c\u8fd9\u4e9b\u70b9\u96c6\u91cc\u9762\u7684\u8fb9 $E^\\prime$ \u7684\u8d21\u732e\u6700\u5927\uff0c\u5373\r\n\r\n$\\max\\{-\\sum_{v\\in  V^\\prime}P_v+\\sum_{e\\in E^\\prime}w_e\\}$\r\n\r\n\u4e5f\u5c31\u662f\r\n\r\n$\\dfrac{1}{2}\\max\\{-\\sum_{v\\in V^\\prime}(2P_v-sumw_v)-C[V^\\prime,\\overline{V^\\prime}]\\}$\r\n\r\n\u5176\u4e2d $C[V^\\prime,\\overline{V^\\prime}]$ \u8868\u793a $V^\\prime$ \u548c $V^\\prime$ \u7684\u8865\u96c6\u4e4b\u95f4\u7684\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u548c\u3002\r\n\r\n\u5230\u8fd9\u91cc\u5c31\u5df2\u7ecf\u53d8\u6210\u4e86\u4e00\u4e2a\u628a\u70b9\u5212\u5206\u6210\u96c6\u5408\u7684\u95ee\u9898\u4e86\uff0c\u4e0d\u96be\u60f3\u5230\u7528\u7f51\u7edc\u6d41\u6765\u89e3\u51b3\uff0c\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u5efa\u56fe\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u8fb9\u6743\u975e\u8d1f\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e00\u6761\u70b9\u548c\u6e90/\u6c47\u76f8\u8fde\u7684\u8fb9\u52a0\u4e0a\u4e00\u4e2a\u6743\u503c $U$\u3002\r\n\r\n- $(S,i,U+sumw_i-2P_i)$\r\n- $(A_i,B_i,C_i)$\r\n- $(B_i,A_i,C_i)$\r\n- $(i,T,U)$\r\n\r\n\u7b54\u6848\u5373\u4e3a $\\dfrac{\\sum_{i=1}^n (sumw_i-2P_i)+Un-maxflow}{2}$\r\n\r\n\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\operatorname{maxflow}(n,n+m))$\r\n\r\n```\r\nint n,m;\r\nint head[N],cnt;\r\nint dep[N],S,T,U;\r\nint a[N],sw[N];\r\nll ans,maxflow;\r\n\r\nstruct Edge{\r\n    int to,next,flow;\r\n}e[M<<1];\r\n\r\nvoid add(int x,int y,int c){\r\n    e[++cnt]=(Edge){y,head[x],c},head[x]=cnt;\r\n    e[++cnt]=(Edge){x,head[y],0},head[y]=cnt;\r\n}\r\n\r\nbool bfs(){\r\n    memset(dep,0,sizeof(dep));\r\n    queue<int> q;\r\n    q.push(S),dep[S]=1;\r\n    while(!q.empty()){\r\n        int u=q.front();q.pop();\r\n        RepG(i,u){\r\n            int v=e[i].to;\r\n            if(e[i].flow&&!dep[v]){\r\n                dep[v]=dep[u]+1;\r\n                q.push(v);\r\n                if(v==T)return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nint dfs(int u,int flow){\r\n    if(u==T)return flow;\r\n    int tmp=0,k;\r\n    for(int i=head[u];~i&&tmp<flow;i=e[i].next){\r\n        int v=e[i].to;\r\n        if(e[i].flow&&dep[v]==dep[u]+1){\r\n            k=dfs(v,min(e[i].flow,flow-tmp));\r\n            if(!k)dep[v]=0;\r\n            e[i].flow-=k,e[i^1].flow+=k;\r\n            tmp+=k;\r\n        }\r\n    }\r\n    return tmp;\r\n}\r\n\r\nvoid dinic(){\r\n    while(bfs())\r\n        maxflow+=dfs(S,inf);\r\n}\r\n\r\nint main()\r\n{\r\n    # ifdef hibike\r\n    freopen(\"testdata.in\",\"r\",stdin);\r\n    freopen(\"test1.out\",\"w\",stdout);\r\n    # endif\r\n    memset(head,-1,sizeof(head)),cnt=1;\r\n    read(n),read(m);\r\n    S=n+1,T=S+1;\r\n    Rep(i,1,n)read(a[i]);\r\n    Rep(i,1,m){\r\n        int x,y,c;\r\n        read(x),read(y),read(c);\r\n        add(x,y,c),add(y,x,c);\r\n        sw[x]+=c,sw[y]+=c;\r\n    }\r\n    Rep(i,1,n)U=max(U,2*a[i]-sw[i]);\r\n    U++;\r\n    Rep(i,1,n)add(S,i,sw[i]-2*a[i]+U),ans+=sw[i]-2*a[i]+U;\r\n    Rep(i,1,n)add(i,T,U);\r\n    dinic();\r\n    printf(\"%lld\\n\",(ans-maxflow)/2);\r\n    return 0;\r\n}\r\n```",
        "postTime": 1629083469,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "P4174 [NOI2006] \u6700\u5927\u83b7\u5229"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4174)\n\n------------\n\n# Solution\n\n\u7ecf\u5178\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u95ee\u9898\u3002\n\n\u9996\u5148$S$\u5411\u6bcf\u4e2a\u4e2d\u8f6c\u7ad9\u8fde\u5bb9\u91cf\u4e3a\u8d39\u7528\u7684\u6709\u5411\u8fb9\u3002\n\n\u6bcf\u4e2a\u7fa4\u4f53\u5411$T$\u8fde\u5bb9\u91cf\u4e3a\u6536\u76ca\u7684\u6709\u5411\u8fb9\u3002\n\n\u5982\u679c\u4e00\u4e2a\u4e2d\u8f6c\u7ad9\u7684\u70b9\u88ab\u5272\u4e86\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u5efa\u7acb\u8fd9\u4e2a\u4e2d\u8f6c\u7ad9\uff1b\u5982\u679c\u4e00\u4e2a\u7fa4\u4f53\u88ab\u5272\u4e86\u76f8\u5f53\u4e8e\u4e0d\u9009\u8fd9\u4e2a\u7fa4\u4f53\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u6240\u6709\u7fa4\u4f53\u7684\u5229\u76ca\u51cf\u53bb\u6700\u5c0f\u5272\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a\u7fa4\u4f53\u6709\u5fc5\u987b\u4f7f\u7528\u7684\u4e2d\u8f6c\u7ad9\uff0c\u6240\u4ee5\u628a\u5fc5\u987b\u4f7f\u7528\u7684\u4e2d\u8f6c\u7ad9\u5411\u7fa4\u4f53\u8fde\u5bb9\u91cf\u4e3a$INF$\u7684\u8fb9\uff0c\u8fd9\u6837\u8981\u4e0d\u5c31\u662f\u5272\u6389\u7fa4\u4f53\uff08\u4e0d\u9009\u8fd9\u4e2a\u7fa4\u4f53\uff09\uff0c\u8981\u4e0d\u5c31\u662f\u5272\u6389\u4e2d\u8f6c\u7ad9\uff08\u5efa\u7acb\u4e2d\u8f6c\u7ad9\uff09\uff0c$INF$\u8fb9\u7684\u4f5c\u7528\u662f\u907f\u514d\u51b2\u7a81\u3002\n\n------------\n\n# Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nconst int INF = 999999999;\nconst int N = 500050;\nconst int M = 400050;\n\nint head[N], num = 1, n, m, s, t, ans, maxflow, dis[N];\n\nstruct Node\n{\n    int next, to, dis;\n} edge[M * 2];\n\nvoid Addedge(int u, int v, int w)\n{\n    edge[++num]= (Node){head[u], v, w};\n    head[u] = num;\n}\n\ntemplate <class T>\nvoid Read(T &x)\n{\n    x = 0; int p = 0; char st = getchar();\n    while (st < '0' || st > '9') p = (st == '-'), st = getchar();\n    while (st >= '0' && st <= '9') x = (x << 1) + (x << 3) + st - '0', st = getchar();\n    x = p ? -x : x;\n    return;\n}\n\ntemplate <class T>\nvoid Put(T x)\n{\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) Put(x / 10);\n    putchar(x % 10 + '0');\n    return;\n}\n\nbool Bfs()\n{\n    queue<int> q;\n    for (int i = 0; i <= t; i++) dis[i] = 0;\n    dis[s] = 1; q.push(s);\n    while (!q.empty())\n    {\n        int u = q.front(); q.pop();\n        for (int i = head[u]; i; i = edge[i].next)\n            if (!dis[edge[i].to] && edge[i].dis)\n            {\n                dis[edge[i].to] = dis[u] + 1;\n                q.push(edge[i].to);\n                if (edge[i].to == t) return 1;\n            }\n    }\n    return 0;\n}\n\nint Dinic(int x, int flow)\n{\n    if (x == t || !flow) return flow;\n    int rest = flow;\n    for (int i = head[x]; i && rest; i = edge[i].next)\n        if (edge[i].dis && dis[edge[i].to] == dis[x] + 1)\n        {\n            int v = edge[i].to;\n            int tmp = Dinic(v, min(rest, edge[i].dis));\n            rest -= tmp;\n            edge[i].dis -= tmp;\n            edge[i ^ 1].dis += tmp;\n            if (!tmp) dis[v] = 0;\n        }\n    return flow - rest;\n}\n\nvoid Add(int u, int v, int w)\n{\n\tAddedge(u, v, w);\n\tAddedge(v, u, 0);\n\treturn;\n}\n\nint Maxflow()\n{\n\tint maxflow = 0, tmp;\n\twhile (Bfs())\n\t{\n\t\ttmp = Dinic(s, INF);\n\t\tif (tmp) maxflow += tmp;\n\t}\n\treturn maxflow;\n}\n\nint main()\n{\n\tRead(n); Read(m);\n\ts = 0; t = n + m + 1;\n\tfor (int i = 1, p; i <= n; i++) Read(p), Add(s, i, p);\n\tfor (int i = 1, a, b, c; i <= m; i++)\n\t{\n\t\tRead(a); Read(b);Read(c);\n\t\tans += c;\n\t\tAdd(i + n, t, c);\n\t\tAdd(a, i + n, INF);\n\t\tAdd(b, i + n, INF);\n\t}\n\tPut(ans - Maxflow());\n    return 0;\n}\n```",
        "postTime": 1583998499,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    },
    {
        "content": "## \u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011\n\n### \u3010[\u9898\u610f](https://www.luogu.com.cn/problem/P4174)\u3011\n\u4ece$n$\u4e2a\u70b9\u4e2d\u9009\u51fa\u82e5\u5e72\u70b9\uff0c\u5305\u62ec\u8fde\u63a5\u7684\u8fb9\uff0c\u95ee\u6700\u5927\u70b9\u8fb9\u6743\u548c\u662f\u591a\u5c11\u3002\n\n### \u3010\u5206\u6790\u3011\n\n\u770b\u5230\u6700\u5927\u6743\u503c\u548c\uff0c\u5c31\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\n\n### 1. \u4ec0\u4e48\u662f\u95ed\u5408\u5b50\u56fe\uff1f\n\n**\u5b9a\u4e49**\uff1a\u5728\u4e00\u5f20\u56fe\u5185\uff0c\u9009\u51fa\u4e00\u4e2a\u5b50\u56fe\uff0c\u5b50\u56fe\u5185\u7684\u70b9\u65e0\u6cd5\u5230\u8fbe\u5b50\u56fe\u5916\u7684\u70b9\u3002\n\n\u5982\u4e0b\u56fe\uff1a\n\n![pic](https://cdn.luogu.com.cn/upload/image_hosting/wphk07wp.png)\n\n\u56fe\u4e2d\uff0c$(1,2,3,4)$\u662f\u4e00\u4e2a\u95ed\u5408\u5b50\u56fe\uff0c\u800c$(1,2,4)$\u4e0d\u662f\u3002\n\n### 2. \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u5982\u4f55\u6c42\uff1f\n\n\u5229\u7528\u7f51\u7edc\u6d41\uff0c\u6784\u9020\u4e00\u4e2a\u6e90\u70b9$s$\u548c\u6c47\u70b9$t$\u3002\u6240\u6709\u7684\u6b63\u6743\u70b9\u8fde\u5411$s$\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\uff1b\u6240\u6709\u7684\u8d1f\u6743\u70b9\u8fde\u5411$t$\uff0c\u5bb9\u91cf\u4e3a\u70b9\u6743\u7684\u76f8\u53cd\u6570\uff1b\u56fe\u4e2d\u73b0\u6709\u8fb9\u53d6\u53cd\u5411\u8fb9\uff0c\u6d41\u91cf\u4e3a\u65e0\u7a77\u5927\u3002\n\n\u7136\u540e\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1\u6700\u5c0f\u5272\uff0c\u518d\u7528\u6b63\u6743\u70b9\u7684\u70b9\u6743\u548c\u51cf\u53bb\u6700\u5c0f\u5272\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n~~\u4e0d\u8981\u95ee\u6211\u5982\u4f55\u8bc1\u660e\uff0c\u672c\u840c\u65b0\u4e0d\u4f1aQAQ\u3002~~\n\n### 3. \u672c\u9898\u5982\u4f55\u5efa\u56fe\uff1f\n\n\u6211\u4eec\u4e0d\u8981\u53d7\u9898\u76ee\u6240\u60d1\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u5b58\u5728\u80af\u5b9a\u8981\u6c42\u4e24\u7aef\u70b9\u5b58\u5728\uff0c\u6b63\u7b26\u5408\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u7684\u70b9\u548c\u8fb9\u90fd\u5f53\u6210\u7f51\u7edc\u6d41\u7684\u70b9\uff0c\u76f4\u63a5\u8dd1\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\uff08\u4f7f\u7528ISAP\uff09\uff1a\n\n```cpp\n/*\nluogu P4174\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int INF = 0x7f7f7f7f;\n\nint n,m,s,t;\nint mxf,sum;\nint ee=1,h[500005],nex[500005<<1],to[500005<<1],val[500005<<1];\nint dep[500005],gap[500005];\n\nvoid addedge(int x,int y,int z)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\tval[ee] = z;\n\th[x] = ee;\n}\n\nvoid bfs()\n{\n\tqueue<int> q;\n\tq.push(t);\n\tdep[t] = 1;\n\tgap[1] = 1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=h[x];i;i=nex[i])\n\t\t\tif(!dep[to[i]])\n\t\t\t{\n\t\t\t\tdep[to[i]] = dep[x]+1;\n\t\t\t\tgap[dep[to[i]]]++;\n\t\t\t\tq.push(to[i]);\n\t\t\t}\n\t}\n}\n\nint dfs(int x,int flow)\n{\n\tif(x==t)\n\t{\n\t\tmxf += flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(dep[to[i]]==dep[x]-1 && val[i]>0)\n\t\t{\n\t\t\tint d=dfs(to[i],min(val[i],flow-used));\n\t\t\tif(d)\n\t\t\t{\n\t\t\t\tval[i] -= d;\n\t\t\t\tval[i^1] += d;\n\t\t\t\tused += d;\n\t\t\t}\n\t\t\tif(used==flow)\n\t\t\t\treturn used;\n\t\t}\n\tgap[dep[x]]--;\n\tif(gap[dep[x]]==0)\n\t\tdep[s] = n+m+1;\n\tdep[x]++;\n\tgap[dep[x]]++;\n\treturn used;\n}\n\nvoid isap()\n{\n\tmxf = 0;\n\tbfs();\n\twhile(dep[s]<=n+m)\n\t\tdfs(s,INF);\n}\n\nint main()\n{\n\tcin>>n>>m;\n\ts = 0, t = n+m+1;\n\tfor(int i=1,x;i<=n&&cin>>x;i++)\n\t\taddedge(i,t,x), addedge(t,i,0);\n\tfor(int i=1,x,y,z;i<=m&&cin>>x>>y>>z;i++)\n\t{\n\t\tsum += z;\n\t\taddedge(s,i+n,z), addedge(i+n,s,0);\n\t\taddedge(i+n,x,INF), addedge(x,i+n,0);\n\t\taddedge(i+n,y,INF), addedge(y,i+n,0);\n\t}\n\tisap();\n\tcout<<sum-mxf<<endl;\n\t\n\treturn 0;\n}\n```\n\n\u795d\u5927\u5bb6AC\u6109\u5feb\uff01",
        "postTime": 1582027836,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5206\u6790\u4e0e\u9898\u89e3\uff1a**\u5efa\u7acb\u6e90\u70b9$S$\u70b9\uff0c\u5c06\u6240\u6709\u7684\u7528\u6237\u548c$S$\u76f8\u8fde\uff0c\u8fb9\u6743\u5c31\u662f\u5f53\u524d\u7528\u6237\u7684\u6536\u76ca\uff0c\u5efa\u7acb\u6c47\u70b9$T$\u70b9\uff0c\u5c06\u6240\u6709\u7684\u4e2d\u8f6c\u7ad9\u548c$T$\u76f8\u8fde\uff0c\u8fb9\u6743\u5c31\u662f\u5f53\u671f\u4e2d\u8f6c\u7ad9\u7684\u82b1\u8d39\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7528\u6237\uff0c\u4ed6\u9700\u8981\u4e24\u4e2a\u4e2d\u8f6c\u7ad9\uff0c\u6240\u4ee5\u5982\u679c\u9009\u62e9\u5f53\u524d\u7528\u6237\u5c31\u4e00\u5b9a\u8981\u9009\u62e9\u8fd9\u4e24\u4e2a\u4e2d\u8f6c\u7ad9\uff0c\u6839\u636e\u8fd9\u6761\u6027\u8d28\u6211\u4eec\u77e5\u9053\uff0c\u7528\u6237\u5e94\u8be5\u8ddf\u4ed6\u7684\u4e2d\u8f6c\u7ad9\u76f8\u8fde\uff0c\u7531\u7528\u6237\u6307\u5411\u4e2d\u8f6c\u7ad9\uff0c\u8fb9\u6743\u4e3a$inf$\u3002\n\n```c++\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cstring>\nusing namespace std;\n#define N 55010\n#define inf 1000000000\nint n,m,idx=1,dis[N],s,t,ans;\nint head[N],to[N<<3],val[N<<3],nxt[N<<3];\nvoid add(int a,int b,int c)\n{nxt[++idx]=head[a],val[idx]=c,to[idx]=b,head[a]=idx;}\nbool bfs()\n{\n    queue <int> q;memset(dis,-1,sizeof(dis));\n    q.push(s);dis[s]=0;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        for(int i=head[p];i;i=nxt[i])\n            if(val[i]>0&&dis[to[i]]==-1)\n            {\n                dis[to[i]]=dis[p]+1,q.push(to[i]);\n                if(to[i]==t) return true;\n            }\n    }\n    return false;\n}\nint dfs(int p,int flow)\n{\n    int now,temp=flow;\n    if(p==t) return flow;\n    for(int i=head[p];i;i=nxt[i])\n        if(val[i]>0&&dis[to[i]]==dis[p]+1)\n        {\n            now=dfs(to[i],min(val[i],temp));\n            if(!now) dis[to[i]]=-1;\n            temp-=now,val[i]-=now,val[i^1]+=now;\n            if(!temp) break;\n        }\n    return flow-temp;\n}\nvoid dinic() {while(bfs()) ans-=dfs(s,inf);}\nint main()\n{\n    scanf(\"%d%d\",&n,&m); s=n+m+1,t=n+m+2;\n    for(int i=1,a;i<=n;i++) scanf(\"%d\",&a),add(i,t,a),add(t,i,0);\n    for(int i=1,a,b,c;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);ans+=c;\n        add(s,i+n,c),add(i+n,s,0);\n        add(i+n,b,inf),add(b,i+n,0);\n        add(i+n,a,inf),add(a,i+n,0);\n    } dinic(),printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1545619003,
        "uid": 52851,
        "name": "ysy20021208",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4174 \u3010[NOI2006]\u6700\u5927\u83b7\u5229\u3011"
    }
]