[
    {
        "content": "#### \u7ebf\u6bb5\u6811\u66b4\u529b\u505a\u6cd5\n\n\u773c\u770b\u7740\u697c\u4e0a\u5927\u4f6c\u8bb2\u7684\u90fd\u662f\u6811\u76f4\u5f84\u505a\u6cd5\uff0c\u4e8e\u662f\u849f\u84bb\u6765\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u9700\u8981\u601d\u7ef4\u7684\u66b4\u529b\u3002\u3002\u3002\n\n\u8fd9\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u591a\u8fb9\u5f62\u5185\u7684\u4e00\u6761\u76f4\u7ebf\u6700\u591a\u4e0e\u591a\u5c11\u6761\u7ed9\u5b9a\u5bf9\u89d2\u7ebf\u76f8\u4ea4\u3002\u6211\u4eec\u5148\u679a\u4e3e\u8def\u7ebf\u7684\u4e00\u4e2a\u7aef\u70b9i\uff0c\u8bbe\u4e00\u6761\u7ed9\u5b9a\u5bf9\u89d2\u7ebf\u4e24\u4e2a\u9876\u70b9\u5206\u522b\u4e3au,v(u < v)\uff0c\u5373\u5c06\u9009\u53d6\u7684\u53e6\u4e00\u4e2a\u8def\u7ebf\u7aef\u70b9\u4e3aj\u3002\u7ecf\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa\uff1a\n\n1.\u82e5i < u\u6216i > v, \u4e14u < j < v,\u5219\u8def\u7ebf**i->j**\u5c06\u7ecf\u8fc7\u8be5\u5bf9\u89d2\u7ebf\n\n2.\u82e5u < i < v\uff0c\u4e14v < j <= n \u6216j < u,\u5219\u8def\u7ebf**i->j**\u5c06\u7ecf\u8fc7\u8be5\u5bf9\u89d2\u7ebf\n\n\u56e0\u6b64\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\uff0c\u679a\u4e3e**i**\u7684\u540c\u65f6\u5c06\u7ecf\u8fc7**i**\u7684\u5bf9\u89d2\u7ebf\u8f6c\u5316\u4e3a\u4e0e\u9876\u70b9\u8303\u56f4\u5bf9\u5e94\u7684\u7c7b\u578b\u3002\u5229\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\uff0c\u9009\u53d6\u6700\u4f18\u7684**j**\u3002\u65f6\u95f4\u590d\u6742\u5ea6**O(n log n)**\u3002\u5f00O2\u5361\u8fc7\u3002\u3002\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define lc x<<1\n#define rc x<<1|1\n#define max(a,b) (a) > (b) ? (a) : (b)\nconst int N = 2e5+1;\nconst int SIZ = 1e6+1;\n\nint n;\nmap<int,int> m1[N];\nvector<int> v1[N];\nstruct Segment_tree{\n   int maxv[SIZ],tag[SIZ];\n   inline void push_up(int x){\n      maxv[x] = max(maxv[lc],maxv[rc]);\n   }\n   inline void push_down(int x,int l,int r){\n      if(tag[x]){\n         tag[lc] += tag[x]; tag[rc] += tag[x];\n         maxv[lc] += tag[x]; maxv[rc] += tag[x];\n         tag[x] = 0;\n      }\n   }\n   void update(int x,int l,int r,int ql,int qr,int val){\n      if(ql > qr)return ;\n      if(qr < l || ql > r)return ;\n      if(l >= ql && r <= qr){\n         maxv[x] += val; tag[x] += val;\n         return ;\n      }\n      push_down(x,l,r);\n      update(lc,l,(l+r)/2,ql,qr,val); update(rc,(l+r)/2+1,r,ql,qr,val);\n      push_up(x);\n   }\n   int query(int x,int l,int r,int ql,int qr){\n      if(ql > qr)return 0;\n      if(qr < l || ql > r)return 0;\n      if(l >= ql && r <= qr)return maxv[x];\n      push_down(x,l,r);\n      return max(query(lc,l,(l+r)/2,ql,qr),query(rc,(l+r)/2+1,r,ql,qr));\n   }\n}S;\n\nint main(){\n   scanf(\"%d\",&n);\n   for(int i = 1;i <= n-2; ++i){\n      int p,q,r;\n      scanf(\"%d%d%d\",&p,&q,&r);\n      if(m1[p][q] == 0){\n         v1[p].push_back(q); v1[q].push_back(p);\n         m1[p][q] = m1[q][p] = 1;\n         S.update(1,1,n,min(p,q)+1,max(p,q)-1,1);\n      }\n      if(!m1[p][r]){\n         v1[p].push_back(r); v1[r].push_back(p);\n         m1[p][r] = m1[r][p] = 1;\n         S.update(1,1,n,min(p,r)+1,max(p,r)-1,1);\n      }\n      if(!m1[q][r]){\n         v1[q].push_back(r); v1[r].push_back(q);\n         m1[q][r] = m1[r][q] = 1;\n         S.update(1,1,n,min(q,r)+1,max(q,r)-1,1);\n      }\n   }\n   int ans = 2;\n   for(int i = 1;i <= n; ++i){\n      for(int j = 0;j < (int)v1[i].size(); ++j){\n         int y = v1[i][j];\n         if(y > i)S.update(1,1,n,i+1,y-1,-1);\n         else {\n            S.update(1,1,n,i+1,n,-1); S.update(1,1,n,1,y-1,-1);\n         }\n      } // \u5220\u53bb\u7ecf\u8fc7\u5f53\u524d\u8282\u70b9\u7684\u5bf9\u89d2\u7ebf\n      ans = max(ans,1+S.query(1,1,n,1,n));\n      for(int j = 0;j < (int)v1[i].size(); ++j){\n         int y = v1[i][j];\n         if(y > i){\n            S.update(1,1,n,y+1,n,1); S.update(1,1,n,1,i-1,1);\n         }\n         else S.update(1,1,n,y+1,i-1,1);\n      }//\u52a0\u5165\u7ecf\u8fc7\u5f53\u524d\u8282\u70b9\u7684\u5bf9\u89d2\u7ebf\n   }\n   cout << ans << endl;\n}\n```\n\n",
        "postTime": 1560348975,
        "uid": 20337,
        "name": "Only_My_Whisper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "### \u5148\u4e0a\u7ed3\u8bba\n\u8fd9\u9053\u9898\u4ed4\u7ec6\u60f3\u60f3\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u770b\u4f5c\u4e00\u4e2a\u8282\u70b9\uff0c\u9886\u8fb9\u770b\u4f5c\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6700\u540e\u751f\u6210\u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u3002\n\u5f53\u7136\uff0c\u5176\u5b9e\u4e8c\u4e0d\u4e8c\u53c9\u90fd\u4e0d\u5f71\u54cd\u3002\n\u5173\u952e\u662f\u5982\u4f55\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\u3002\n### \u7136\u540e\u4e0a\u8bc1\u660e\n\u55ef\u54fc\uff0c\u8fd9\u4e2a\u9053\u7406\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u8bf4\u4e00\u4e0b\u3002\n\u9996\u5148\uff0c\u6574\u4e2a\u56fe\u662f\u80af\u5b9a\u8054\u901a\u7684\uff0c\u6bd5\u7adf\u672c\u6765\u5c31\u662f\u4e00\u4e2a\u591a\u8fb9\u5f62\uff0c\u5b83\u8f6c\u6362\u6210\u56fe\u540e\u80af\u5b9a\u4e0d\u5b58\u5728\u72ec\u7acb\u7684\u90e8\u5206\u3002\n\u800c\u4e14\u6ce8\u610f\u5230\u4e00\u4e2a\u7279\u70b9\uff0c\u4e00\u4e2an\u8fb9\u5f62\u80fd\u4e14\u53ea\u80fd\u5206\u6210n-2\u4e2a\u4e09\u89d2\u5f62\uff0c\u4e14\u65e0\u8bba\u600e\u4e48\u5206\u90fd\u53ea\u7528\u8fde\u63a5n-3\u6761\u5bf9\u89d2\u7ebf\u3002\n\u800c\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u6bcf\u4e00\u6761\u88ab\u8fde\u63a5\u8d77\u6765\u7684\u5bf9\u89d2\u7ebf\uff0c\u90fd\u7b49\u4e8e\u751f\u6210\u56fe\u4e2d\u7684\u4e00\u6761\u8fde\u8fb9\u3002\n\u6240\u4ee5\u4e00\u5171n-2\u4e2a\u70b9\uff0cn-3\u6761\u8fb9\u3002\n\u518d\u52a0\u4e0a\u6811\u4e0a\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u73af\u7684\uff0c\u800c\u8fd9\u9053\u9898\u4e2d\uff0c\u5982\u679c\u5f62\u6210\u4e86\u73af\uff0c\u90a3\u80af\u5b9a\u662f\u4e00\u5708\u7684\u4e09\u89d2\u5f62\u628a\u4e00\u4e2a\u70b9\u56f4\u4e86\u8d77\u6765\uff0c\u7136\u800c\u8282\u70b9\u90fd\u5fc5\u987b\u5728\u8fb9\u4e0a\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u5f62\u6210\u73af\u3002\n**\u5450\u5450\uff0c\u7531\u4e0a\u53ef\u77e5\u8bc1\u6bd5\u3002**\n\u4e4b\u540e\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u8fd9\u662f\u4e00\u4e2a\u4ec0\u4e48\u56fe\uff0c\u8be5\u601d\u8003\u600e\u6837\u53bb\u7b97\u51fa\u7b54\u6848\u3002\n### \u6ce8\u610f\u5230\n\u6211\u4eec\u7684\u8def\u7ebf\u5fc5\u987b\u4e0e\u4e00\u4e2a\u57ce\u5e02\u81f3\u5c11\u6709\u4e24\u4e2a\u4ea4\u70b9\uff0c\u624d\u7b97\u662f\u7ecf\u8fc7\u4e86\u8fd9\u4e2a\u57ce\u5e02\uff0c\u56e0\u6b64\u53ea\u7ecf\u8fc7\u4e00\u4e2a\u9876\u70b9\u662f\u6ca1\u7528\u7684\u3002\n\u800c\u4e14\uff0c\u6211\u4eec\u7684\u8def\u7ebf\u662f\u4e00\u6761\u7ebf\u6bb5\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e0\u6cd5\u6298\u8fd4\u3002\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\uff0c\u81f3\u5c11\u4e0d\u7528\u62c5\u5fc3\u8d70\u4e0d\u8fc7\u53bb\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u5728\u4e8e\u4ec0\u4e48\u6837\u7684\u8def\u7ebf\u624d\u662f\u6700\u4f18\u7684\u3002\n### \u53c8\u4e0a\u7ed3\u8bba\n\u5982\u679c\u6211\u4eec\u8d70\u751f\u6210\u56fe\u4e0a\u7684\u6811\u7684\u76f4\u5f84\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\uff08\u4f60\u80af\u5b9a\u77e5\u9053\u6811\u7684\u76f4\u5f84\u662f\u5565\u5427\uff09\n\u4e3a\u4ec0\u4e48\uff1f\n\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u6298\u8fd4\uff0c\u5c31\u76f8\u5f53\u4e8e\u5728\u6811\u4e0a\u8d70\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u56e0\u6b64\u6700\u957f\u7684\u8def\u80af\u5b9a\u5c31\u662f\u76f4\u5f84\u8fa3\u3002\n### \u5982\u4f55\u5b9e\u73b0\n\u6211\u4eec\u6ce8\u610f\u5230n\u7684\u8303\u56f4\u662f20\u4e07\uff0c\u6709\u70b9\u5927\uff0c\u663e\u7136\u7528\u6570\u7ec4\u8bb0\u5f55\u4e09\u89d2\u5f62\u7684\u90bb\u8fb9\u662f\u80af\u5b9a\u4f1a\u70b8\u7684\u3002\u4f46\u662f\u6211\u4eec\u6709STL\u554a\uff01\n\u4e8e\u662f\u4e4e\uff0cpair\u5957map\u6620\u5c04\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\u3002\n\u81f3\u4e8e\u5982\u4f55\u627e\u6811\u7684\u76f4\u5f84\uff0c\u90a3\u5565\uff0c\u76f4\u63a5O(n)dfs\u4e24\u904d\u5c31\u5b8c\u4e8b\u513f\u8fa3\u3002\u5982\u679c\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u3002\u3002\u3002\u8bf7\u767e\u5ea6\uff08or\u8c37\u6b4c\uff09\uff01\u3002\n### \u6700\u540e\u4e0a\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define fr(i,a,b) for(int i=a;i<=b;++i)\n#define pr(i,a,b) for(int i=a;i>=b;--i)\n#define fh(i,a,b) for(int i=head[a],b=e[i].to;i;i=e[i].last,b=e[i].to)\n#define pp puts(\"\")\n#define xiu return\nusing namespace std;\ntypedef double lf;\ntypedef long long ll;\nconst int N = 2e5+10,M = 110,inf = 1e9+7;\nconst lf eps = 1e-5;\ntemplate <class T> void read(T &w){\n\tw=0;int f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){(w*=10)+=ch-'0';ch=getchar();}\n\tw*=f;\n}\n\ntemplate <class T> void write(T w){\n\tif(w<0){putchar('-');w*=-1;}\n\tif(w/10) write(w/10);\n\tputchar(w%10+'0');\n}\nmap <pair<int,int>,int> ys;\nstruct edg{int last,to;}e[N<<1];\nint n,m,cur=1,head[N],deep[N],root,ans;\nvoid add(int x,int y){\n\te[++cur]=(edg){head[x],y};head[x]=cur;\n\te[++cur]=(edg){head[y],x};head[y]=cur;\n}\nvoid dfs(int x,int y){\n\tdeep[x]=deep[y]+1;\n\tfh(i,x,u){\n\t\tif(u==y) continue;\n\t\tdfs(u,x);\n\t}\n}\nint main(){\n\tread(n);\n\tfr(i,1,n-2){\n\t\tint p,q,r;\n\t\tread(p);read(q);read(r);\n\t\tif(q>p) swap(p,q);\n\t\tif(r>p) swap(p,r);\n\t\tif(r>q) swap(q,r);//\u90a3\u5565\uff0c\u6392\u4e2a\u5e8f\u53bb\u91cd....\u5c11\u5199\u4e863\u4e2aif+else\uff0c\u800c\u4e14\u8fd8\u7701\u65f6\u95f4\u7a7a\u95f4....\n\t\tif(!ys[pair<int,int>(p,q)]){\n\t\t\tys[pair<int,int>(p,q)]=i;\n\t\t}\n\t\telse\n\t\t\tadd(i,ys[pair<int,int>(p,q)]);\n\t\tif(!ys[pair<int,int>(p,r)]){\n\t\t\tys[pair<int,int>(p,r)]=i;\n\t\t}\n\t\telse\n\t\t\tadd(i,ys[pair<int,int>(p,r)]);\n\t\tif(!ys[pair<int,int>(q,r)]){\n\t\t\tys[pair<int,int>(q,r)]=i;\n\t\t}\n\t\telse\n\t\t\tadd(i,ys[pair<int,int>(q,r)]);\n\t}\n\troot=1;\n\tdfs(1,0);\n\tfr(i,2,n-2)\n\tif(deep[i]>deep[root])\n\t\troot=i;\n\tdfs(root,0);\n\tfr(i,1,n-2)\n\t\tif(deep[i]>ans)\n\t\tans=deep[i];\n\twrite(ans);pp;\n\txiu 0;\n}\n```\n~~\u54c8\u54c8\u4e00\u904dA\u65e0\u8c03\u8bd5~~~",
        "postTime": 1538271401,
        "uid": 85841,
        "name": "Dr_Gears",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "~~\u5c0f\u84dd\u771f\u591a\u4e8b~~\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u9898\u80af\u5b9a\u4e0d\u662f $n-2$\u3002\n\n\uff08\u4f8b\u5982\uff1a$ans=3$,\u4f46 $n=6$\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5cni7ueb.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\n------------\n\n\u90a3\u5230\u5e95\u662f\u591a\u5c11\u5462\uff1f\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u76f4\u7ebf\uff0c\u5b83\u53ea\u80fd\u7ecf\u8fc7\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u4e24\u6761\u8fb9\u3002\n\n\u6240\u4ee5\uff0c\u5f53\u6709\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u4e09\u8fb9\u5916\u90fd\u6709\u4e09\u89d2\u5f62\u65f6\uff0c\u7b54\u6848\u663e\u7136\u4e0d\u662f $n-2$\u3002\n\n\u53e6\u5916\uff0c\u6211\u4eec\u770b\u770b\u56fe\u3002\n\n\u770b\u4e0d\u51fa\u6765\uff1f\u90a3\u5c31\u770b\u8fd9\u4e2a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/s4b9jwq2.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u539f\u6765\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff01\n\n\u800c\u4e14\uff0c\u4e00\u6761\u76f4\u7ebf\u7ecf\u8fc7\u4e24\u6761\u8fb9\uff0c\u4e0d\u521a\u597d\u662f\u8fd9\u68f5\u6811\u4e0a\u7684\u4e00\u6761\u94fe\u5417\uff1f\n\n\u53c8\u8ba9\u6c42\u6700\u5927\u503c\u2026\u2026\u76f4\u5f84\uff01\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u660e\u786e\u7684\u601d\u8def\u4e86\u3002\n\n\n------------\n\n# \u5173\u4e8e\u76f4\u5f84\n\u76f4\u5f84\u7684\u6c42\u6cd5\u5f88\u7b80\u5355\uff0c\u5148\u4efb\u610f\u627e\u4e00\u4e2a\u70b9bfs\u51fa\u79bb\u5b83\u6700\u8fdc\u7684\u70b9 $A$,\u518d\u4ee5 $A$ \u5f00\u59cbbfs\u51fa\u6700\u8fdc\u70b9 $B$,\u90a3\u4e48 $A$,$B$ \u4e4b\u95f4\u7684\u8def\u5f84\u5c31\u662f\u76f4\u5f84\u5566~\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u76f4\u5f84\u7684\u4e24\u7aef\u70b9\u4e0d\u88ab\u7b2c\u4e00\u6b21bfs\u51fa\u6765\uff0c\u5f88\u663e\u7136\uff0c\u5c06\u8be5\u70b9\u5230\u76f4\u5f84\u4e00\u7aef\u7684\u8def\u5f84\u6362\u4e3a\u8be5\u70b9\u5230\u6700\u957f\u70b9\u7684\u8def\u5f84\uff0c\u8def\u5f84\u53ea\u4f1a\u66f4\u957f\uff0c\u5c31\u4e0e\u4e4b\u524d\u7684\u5047\u8bbe\u77db\u76fe\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u5f88\u8f7b\u6613\u5730\u5904\u7406\u51fa\u4e00\u68f5\u6811\u7684\u76f4\u5f84\u4e86\u3002\n\n# \u5173\u4e8e\u6811\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e00\u68f5\u6811\u5462\uff1f\n\n\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u5bf9\u89d2\u7ebf\uff0c\u90fd\u6709\u5de6\u53f3\uff08\u6216\u4e0a\u4e0b\uff09\u4e24\u4e2a\u4e09\u89d2\u5f62\uff0c\u8fd9\u6837 $n-3$ \u6761\u8fb9\u8fde\u63a5\u8d77 $n-2$ \u4e2a\u4e09\u89d2\u5f62\uff0c\u5c31\u662f\u4e00\u9897\u6811\u4e86\u3002\n### \u4f46\u8fd9\u68f5\u6811\u53c8\u8981\u600e\u4e48\u5b58\u5462\uff1f\n\u6211\u4eec\u53ef\u4ee5\u5b58\u4e0b\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\uff0c\u6bcf\u6b21\u679a\u4e3e\u6bcf\u4e2a\u4e09\u89d2\u5f62\uff0c\u5224\u65ad\u662f\u5426\u76f8\u8fde\u3002\n\n**\u53ef\u662f\uff0c\u5355\u679a\u4e3e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $ O(n^{2})$ \u4e86\uff0c\u80af\u5b9a\u4e0d\u884c**\n\n\u6211\u4eec\u5e94\u8be5\u8981\u9884\u5904\u7406\u51fa\u8fb9\uff0c\u7528vector\u6216\u524d\u5411\u661f\u5b58\u4e0b\uff0c\u4e4b\u540e\u590d\u6742\u5ea6\u624d\u6b63\u786e\u3002\n\n\u56e0\u6bcf\u6761\u8fb9\u6700\u591a\u5c5e\u4e8e\u4e24\u4e2a\u4e09\u89d2\u5f62\uff0c\u6211\u4eec\u53ef\u4ee5\u62ffmap\u8bb0\u5f55\u4e0b\u4e09\u89d2\u5f62\u7684\u4e09\u6761\u8fb9\uff0c\u4e4b\u540e\u6bcf\u9047\u5230\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5224\u65ad\u5b83\u7684\u4e09\u8fb9\uff1a\n\n\u5982\u679cmap\u4e2d\u6b64\u8fb9\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u4e0b\u8be5\u4e09\u89d2\u5f62\u7f16\u53f7\uff1b\n\n\u5982\u679cmap\u4e2d\u6b64\u8fb9\u4e0d\u4e3a\u7a7a\uff0c\u5c06\u8fd9\u4e24\u4e09\u89d2\u5f62\u8fde\u51fa\u4e00\u6761\u8fb9\u3002\n\n\u8fd9\u6837\uff0c\u8fd9\u4e2a\u9898\u5c31\u7ed3\u675f\u4e86\u3002\n## code\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nmap<pair<int,int>,int>mapt;//\u8fb9\u5bf9\u4e09\u89d2\u5f62\u7f16\u53f7\nint a[200001][4];//\u5b58\u4e09\u89d2\u5f62\u9876\u70b9\nvector<int>e[200001];\nbool mem[200001];\nint len=0;\nint bfs(int st){\n\tmemset(mem,0,sizeof(mem));\n\tqueue<int>qy;\n\tqueue<int>qt;\n\tqy.push(st);\n\tqt.push(1);\n\tmem[st]=1;\n\tint lastx,lastt;\n\twhile(!qy.empty()){\n\t\tint x=qy.front(),t=qt.front();\n\t\tlastx=x,lastt=t;\n\t\tqy.pop(),qt.pop();\n\t\tint _size=e[x].size();\n\t\tfor(int i=0;i<_size;i++)\n\t\t\tif(!mem[e[x][i]]){\n\t\t\t\tmem[e[x][i]]=1;\n\t\t\t\tqy.push(e[x][i]),qt.push(t+1);\n\t\t\t}\n\t}\n\tlen=lastt;\n\treturn lastx;\n}\nint main(){\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n-2;i++){\n\t\tscanf(\"%d%d%d\",a[i]+1,a[i]+2,a[i]+3);\n\t\tsort(a[i]+1,a[i]+4);\n\t\tif(mapt[make_pair(a[i][1],a[i][2])]){\n\t\t\te[i].push_back(mapt[make_pair(a[i][1],a[i][2])]);\n\t\t\te[mapt[make_pair(a[i][1],a[i][2])]].push_back(i);\n\t\t}\n\t\telse mapt[make_pair(a[i][1],a[i][2])]=i;\n\n\t\tif(mapt[make_pair(a[i][2],a[i][3])]){\n\t\t\te[i].push_back(mapt[make_pair(a[i][2],a[i][3])]);\n\t\t\te[mapt[make_pair(a[i][2],a[i][3])]].push_back(i);\n\t\t}\n\t\telse mapt[make_pair(a[i][2],a[i][3])]=i;\n\n\t\tif(mapt[make_pair(a[i][1],a[i][3])]){\n\t\t\te[i].push_back(mapt[make_pair(a[i][1],a[i][3])]);\n\t\t\te[mapt[make_pair(a[i][1],a[i][3])]].push_back(i);\n\t\t}\n\t\telse mapt[make_pair(a[i][1],a[i][3])]=i;\n\t}\n\tint a=bfs(1);\n\tbfs(a);\n\tcout<<len;\n\treturn 0;\n}\n```\n\n\n\n------------\n\n# \u4e00\u4e9b\u7ec6\u8282\n\u4e00\u3001\u6ce8\u610f\u8fb9\u7684\u5b58\u6cd5\uff0c\u4e0d\u80fd\u4e00\u4f1a $(5,3)$ \u4e00\u4f1a $(3,5)$\u3002\u5efa\u8bae\u6392\u5e8f\u3002\n\n\u4e8c\u3001\u4e24\u6b21bfs,mem\u6570\u7ec4\u8981\u6e05\u7a7a\uff01\uff01",
        "postTime": 1625821894,
        "uid": 400195,
        "name": "momoli",
        "ccfLevel": 7,
        "title": "P2610 \u9898\u89e3"
    },
    {
        "content": "\u867d\u7136\u9898\u76ee\u7ed9\u4e86\u4e09\u4e2a\u6807\u7b7e\uff0c\u7136\u800c\u6211\u4eec\u53ea\u7528\u52c9\u5f3a\u7528\u4e00\u4e2a\uff0c\u563f\u563f\u563f\u2026\u2026\n\n\u62ff\u5230\u9898\u4e4b\u540e\u6211\u4e00\u8138\u61f5\uff1a\u8fd9\u662f\u795e\u9a6c\u8d70\u6cd5\uff1f\u7136\u540e~~\u770b\u4e86\u540c\u6821\u5927\u4f6c\u7684\u9898\u89e3~~\u7ecf\u8fc7\u8ba4\u771f\u601d\u8003\uff0c\u6211\u53d1\u73b0\u4e86\u8fd9\u9053\u7d2b\u9898\u5916\u8868\u4e0b\u5176\u5b9e\u5f88\u6c34\uff01\u4e3a\u4ec0\u4e48\uff1f\u7a0d\u5fae\u753b\u4e0b\u56fe\uff0c\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n- \u6240\u8c13\u5408\u6cd5\u8def\u7ebf\uff0c\u5c31\u662f\u4e0b\u56fe\u4e2d\u7684\u7ea2\u7ebf\u90e8\u5206\uff1a\n\n![\u5408\u6cd5\u8def\u7ebf](https://cdn.luogu.com.cn/upload/image_hosting/8xtd1p4n.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n- \u6700\u957f\u8def\u5f84\u5c31\u662f\u8fd9\u4e00\u6761\uff1a\n\n![\u6700\u957f\u8def\u5f84](https://cdn.luogu.com.cn/upload/image_hosting/wa2p8s5r.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5728\u8ba8\u8bba\u533a\u770b\u5230\u6709\u4eba\u95ee\u600e\u4e48\u7b97\u7ecf\u8fc7\u4e00\u5ea7\u57ce\u5e02\uff0c\u89c2\u5bdf\u7b2c\u4e00\u5e45\u56fe\u4f60\u5c31\u4f1a\u53d1\u73b0\uff1a\u5176\u5b9e\u5c31\u662f\u8d70\u5230\u57ce\u5e02\u7684\u4e00\u4e2a\u9876\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u4ea4\u70b9\u5c31\u5728\u5b83\u7684\u5bf9\u8fb9\u4e0a\u3002\u4e5f\u5c31\u662f\u4ece\u53e6\u4e00\u4e2a\u4e09\u89d2\u5f62\u7ecf\u8fc7\u4e09\u89d2\u5f62\u7684\u4efb\u610f\u4e00\u4e2a\u9876\u70b9\u5c31\u662f\u5408\u6cd5\u7684\u3002\u6839\u636e\u8fd9\u5e45\u56fe\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u63a8\u51fa\uff1a\u4e00\u4e2a\u4e09\u89d2\u5f62\u53ef\u4ee5\u8d70\u5230\u548c\u5b83\u76f8\u90bb\u7684\u4e09\u4e2a\u4e09\u89d2\u5f62\u3002\n\n![\u76f8\u90bb](https://cdn.luogu.com.cn/upload/image_hosting/ovws2mlu.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u770b\u61c2\u4e86\u5417\uff1f\u5c31\u662f\u7528 map \u5b58\u4e00\u4e0b\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u88ab\u8bb0\u5f55\u8fc7\u4e86\uff0c\u8fd9\u4e24\u4e2a\u4e09\u89d2\u5f62\u4e4b\u95f4\u5c31\u8fde\u4e00\u6761\u8fb9\u3002\u56e0\u4e3a\u4e09\u89d2\u5f62\u662f\u901a\u8fc7\u8fde\u5bf9\u89d2\u7ebf\u8fde\u51fa\u6765\u7684\uff0c\u6240\u4ee5\u5c31\u4e0d\u4f1a\u5b58\u5728\u73af\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u6c42\u76f4\u5f84\u4e86\u3002\n\n\u6811\u4e0a\u76f4\u5f84\u53ef\u4ee5\u5148\u627e\u51fa\u79bb\u4efb\u610f\u4e00\u70b9\u6700\u8fdc\u7684\u70b9\uff0c\u518d\u627e\u51fa\u8ddd\u8fd9\u4e00\u70b9\u6700\u8fdc\u7684\u70b9\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c31\u662f\u76f4\u5f84\u3002\n\n\u8fd9\u662f\u6211\u4e11\u964b\u7684 AC \u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <cstring>\nusing namespace std;\nint n, a, b, c, dis[200001], ans = 0, ans_i, i;\nvector <int> tree[200001];\nbool vis[200001];\nmap <pair<int, int>, int> edge;\nvoid map_pair(int y, int z){\n\tif (y > z) swap(y, z);\n\tif (edge[make_pair(y, z)]){\n\t\ttree[i].push_back(edge[make_pair(y, z)]);\n\t\ttree[edge[make_pair(y, z)]].push_back(i);\n\t}\n\telse edge[make_pair(y, z)] = i;\n}\nvoid add_edge(int x, int y, int z){\n\tmap_pair(y, z);\n\tmap_pair(x, z);\n\tmap_pair(x, y); \n}\nvoid search(int x, int fa){\n\tvis[x] = true;\n\tdis[x] = dis[fa] + 1;\n\tif (dis[x] > ans){\n\t\tans_i = x;\n\t\tans = dis[x];\n\t}\n\tfor (int j = 0; j < tree[x].size(); j++){\n\t\tif (vis[tree[x][j]]) continue;\n\t\tsearch(tree[x][j], x);\n\t}\n}\nint main(){\n\tscanf(\"%d\", &n);\n\tfor (i = 1; i <= n - 2; i++){\n\t\tscanf(\"%d%d%d\", &a, &b, &c);\n\t\tadd_edge(a, b, c);\n\t}\n\tsearch(1, 0);\n\tans = 0;\n\tmemset(dis, 0, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tsearch(ans_i, 0);\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```\n\n\u7adf\u7136\u8fc7\u4e86\u6d59\u6c5f\u7701\u9009\u9898\uff0c\u849f\u84bb\u6211\u7559\u4e0b\u4e86\u6fc0\u52a8\u7684\u773c\u6cea\uff01",
        "postTime": 1628246286,
        "uid": 347839,
        "name": "Daniel_001",
        "ccfLevel": 0,
        "title": "P2610 [ZJOI2012]\u65c5\u6e38"
    },
    {
        "content": "\u4eca\u5929\u6a21\u62df\u8d5b\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u90a3\u5c31\u6765\u6c34\u4e00\u7bc7\u9898\u89e3\u5427\u3002\u3002\u3002\uff08\u8bdd\u8bf4\u63d0\u9ad8\u7ec4\u6a21\u62df\u8d5b\u8003\u4ec0\u4e48\u7701\u9009\u9898\u554a\uff1f\uff1f\uff09\n\n------------\n\n\u8fd9\u9053\u9898\u8981\u6211\u4eec\u6c42\u4e00\u6761\u7ebf\u6bb5\u6700\u591a\u80fd\u7ecf\u8fc7\u7684\u4e09\u89d2\u5f62\u6570\u91cf\u3002\n\n\u56de\u60f3\u5c0f\u5b66\u5b66\u8fc7\u7684\u5965\u6570\uff0c\u8001\u5e08\u544a\u8bc9\u8fc7\u6211\u4eec\u8fd9\u6837\u4e00\u4ef6\u4e8b\uff1a`\u70b9\u65e0\u5927\u5c0f \u7ebf\u65e0\u7c97\u7ec6`\u3002\n\n\u65e2\u7136\u5982\u6b64\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd~~\u628a\u8fd9\u6761\u7ebf\u6bb5\u770b\u6210\u4e00\u6761\u5de8\u5927\u7684~~\u628a\u4e09\u89d2\u5f62\u770b\u6210\u70b9\u5462\uff1f\n\n\u90a3\u4e48\u672c\u9898\u7684\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff1a\u6211\u4eec\u628a\u4e09\u89d2\u5f62\u770b\u6210\u70b9\uff0c\u7136\u540e\u5efa\u7acb\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u4e0a\u8dd1\u4e24\u8fb9BFS\u6c42\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u53ef\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e00\u5b9a\u80fd\u5efa\u6210\u4e8c\u53c9\u6811\u5462\uff1f\n\n\u5176\u5b9e\u5f88\u597d\u8bc1\u660e\u3002\n\n\u4e09\u89d2\u5f62\u53ea\u6709\u4e09\u6761\u8fb9\uff0c\u90a3\u4e48\u6700\u591a\u80fd\u6709\u4e00\u4e2a\u7236\u4eb2\u548c\u4e24\u4e2a\u513f\u5b50\uff0c\u6240\u4ee5\u662f\u4e8c\u53c9\u6811\u3002\n\n\u5f53\u7136\uff0c\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u662f\u7279\u522b\u91cd\u8981\u3002\n\n\u91cd\u70b9\u662f\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u600e\u4e48\u5efa\u56fe\uff1f\n\n\u8fd9\u91cc\u6211\u662f\u8fd9\u6837\u89e3\u51b3\u7684\uff1a\n\n\u5148\u628a\u6bcf\u4e00\u6761\u8fb9\u90fd\u5b58\u8fdb\u4e00\u4e2amap\u91cc\u9762\uff0c\u7136\u540emap\u624b\u5199\u7ed3\u6784\u4f53\u7edf\u8ba1\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u7136\u540e\u904d\u5386\u4e00\u904dmap\uff0c\u628a\u6240\u6709\u51fa\u73b0\u4e0d\u6b62\u4e00\u6b21\u7684\u8fb9\u4e24\u7aef\u7684\u4e09\u89d2\u5f62\u8fde\u5728\u4e00\u8d77\u3002\n\n\u8fd9\u4e2a\u529e\u6cd5\u552f\u4e00\u7684\u95ee\u9898\u662f\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u5199\u7684\u4e11\u5c31\u5bb9\u6613TLE\uff08\u7136\u800c\u673a\u623f\u7684lemon\u7adf\u7136\u53ef\u4ee5AC\uff01\uff09\u3002\n\n------------\n\nAC\u4ee3\u7801\u5982\u4e0b\uff1a\n\n`955ms 38272kb`\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nnamespace StandardIO{\n\n    template<typename T>inline void read(T &x){\n        x=0;T f=1;char c=getchar();\n        for(;c<'0'||c>'9';c=getchar())if(c=='-')f=-1;\n        for(;c>='0'&&c<='9';c=getchar())x=x*10+c-'0';\n        x*=f;\n    }\n\n    template<typename T>inline void write(T x){\n        if(x<0)putchar('-'),x*=-1;\n        if(x>=10)write(x/10);\n        putchar(x%10+'0');\n    }\n\n}\n\nusing namespace StandardIO;\n\nnamespace Solve{\n\n    const int N=200001;\n\n    int n;\n    struct __normal_pair{   \n        int first,second;\n        inline bool operator < (const __normal_pair &x)const{\n            if(first==x.first)return second<x.second;\n            return first<x.first;\n        }\n    };  \n    struct __store_pair{\n        int first,second,size;\n        inline void push_back(int id){\n            if(size++)second=id;\n            else first=id;\n        }\n    };\n    map<__normal_pair,__store_pair>edge;\n    vector<int>graph[N];\n    int dis[N],vis[N];\n\n    inline __normal_pair make_pair(int f,int s){\n        return (__normal_pair){f,s};\n    }\n    inline void sor(int &a,int &b,int &c){\n        if(a>b)swap(a,b);\n        if(a>c)swap(a,c);\n        if(b>c)swap(b,c);\n    }\n    inline int bfs(int s,int time){\n        queue<int>q;\n        dis[s]=0,vis[s]=time;\n        q.push(s);\n        int final;\n        while(!q.empty()){\n            final=q.front();q.pop();\n            for(register vector<int>::iterator i=graph[final].begin();i!=graph[final].end();++i){\n                if(vis[*i]==time)continue;\n                vis[*i]=time,dis[*i]=dis[final]+1;\n                q.push(*i);\n            }\n        }\n        return final;\n    }\n\n    inline void solve(){\n        read(n);\n        for(register int i=1;i<=n-2;++i){\n            int p,q,r;\n            read(p),read(q),read(r);\n            sor(p,q,r);\n            edge[make_pair(p,q)].push_back(i);\n            edge[make_pair(q,r)].push_back(i);\n            edge[make_pair(p,r)].push_back(i);\n        }\n        for(register map<__normal_pair,__store_pair>::iterator i=edge.begin();i!=edge.end();++i){\n            if(i->second.size>1){\n                graph[i->second.first].push_back(i->second.second);\n                graph[i->second.second].push_back(i->second.first);\n            }\n        }\n        write(dis[bfs(bfs(1,1),2)]+1);\n    }\n\n}\n\nusing namespace Solve;\n\nint main(){\n//    freopen(\"triangulation9.in\",\"r\",stdin);\n//    freopen(\"triangulation.out\",\"w\",stdout);\n    solve();\n}\n```",
        "postTime": 1538734030,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u522b\u7684\u9898\u89e3\u5199\u7684\u90fd\u5f88\u8be6\u7ec6\uff0c\u90a3\u6211\u5c31\u6765\u6982\u62ec\u4e00\u4e0b\u6811\u76f4\u5f84\u505a\u6cd5\u7684\u601d\u8def\u5427\u3002\n\n**\u5bf9\u76f8\u90bb\u7684\u57ce\u5e02\u8fde\u8fb9\uff0c\u5f97\u5230\u4e00\u68f5\u6811\uff0c\u518d\u627e\u6811\u7684\u76f4\u5f84\u3002**\n\n\u603b\u7ed3\u8d77\u6765\u5c31\u8fd9\u4e00\u53e5\u8bdd\u3002\n\n\u5bf9\u4e8e\u8fde\u8fb9\uff0c\u53ef\u4ee5\u7528\u4e2a map \u8bb0\u5f55\u6bcf\u5ea7\u57ce\u5e02\u7684\u8fb9\uff0c\u56e0\u4e3a\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u6700\u7ec8\u7684\u56fe\u662f\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u7684\u4e09\u89d2\u5256\u5206\uff0c\u6240\u4ee5\u8fb9\u6700\u591a\u6709 $2n-3$ \u6761\uff08\u5185 $n-3$ \u6761\uff0c\u5916 $n$ \u6761\uff09\u3002\n\n\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u6700\u7ec8\u7684\u56fe\u662f\u6811\uff0c\u53ef\u4ee5\u60f3\u4e00\u4e0b\u5982\u679c\u6709\u73af\uff0c\u90a3\u4e00\u5b9a\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/n47ph6qk.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u663e\u7136\u6709\u4e2a\u8282\u70b9\u5728\u4e2d\u95f4\uff0c\u4e0d\u7b26\u5408\u9898\u610f\uff0c\u6240\u4ee5\u80af\u5b9a\u65e0\u73af\u3002\n\n\u5bf9\u4e8e\u5982\u4f55\u6c42\u76f4\u5f84\uff0c\u4e5f\u5c31\u662f\u4e24\u6b21 dfs \uff0c\u7b2c\u4e00\u6b21\u6c42\u51fa\u4efb\u610f\u4e00\u70b9\u7684\u6700\u8fdc\u70b9\uff0c\u7b2c\u4e8c\u6b21\u6c42\u51fa\u4e0a\u6b21\u7684\u6700\u8fdc\u70b9\u7684\u6700\u8fdc\u70b9\u3002\u8fd9\u4e24\u4e2a\u6700\u8fdc\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u5c31\u662f\u6811\u7684\u76f4\u5f84\u3002\n\n**\u4f46 map \u5e38\u6570\u7565\u5927\uff0c\u53ef\u80fd\u8981\u5f00 O2 \u624d\u80fd AC**\n\ncode\uff1a\n\n```cpp\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#define int long long\n#define mp(x,y) make_pair(x,y)\nusing namespace std;\ntemplate<class T>inline void read(T &x)\n{\n\tx=0;int f=0;char ch=getchar();\n\twhile(!isdigit(ch))\tf=ch=='-',ch=getchar();\n\twhile(isdigit(ch))\tx=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\tx=f?-x:x;\n}\nmap<pair<int,int>,int> p;\nconst int N=2e5+5;\nstruct edge{\n\tint next,to;\n}e[N<<1];\nint head[N],cnt,n,dis[N],ans;\ninline void add(int u,int v)\n{\n\te[++cnt]={head[u],v};\n\thead[u]=cnt;\n}\nvoid dfs(int x,int fa,int &k)\n{\n\tif(dis[x]>ans)\tans=dis[x],k=x;\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(y==fa)\tcontinue;\n\t\tdis[y]=dis[x]+1,dfs(y,x,k);\n\t}\n\treturn;\n}\nmain()\n{\n\tread(n);\n\tfor(int i=1;i<n-1;i++)\n\t{\n\t\tint a[3],now;\n\t\tread(a[0]),read(a[1]),read(a[2]),sort(a,a+3);\n\t\tif(now=p[mp(a[0],a[1])])\tadd(now,i),add(i,now);\n\t\telse\tp[mp(a[0],a[1])]=i;\n\t\tif(now=p[mp(a[0],a[2])])\tadd(now,i),add(i,now);\n\t\telse\tp[mp(a[0],a[2])]=i;\n\t\tif(now=p[mp(a[1],a[2])])\tadd(now,i),add(i,now);\n\t\telse\tp[mp(a[1],a[2])]=i;\n\t}\n\tint s,t;\n\tdfs(1,0,s);\n\tmemset(dis,0,sizeof(dis));\n\tdfs(s,0,t);\n\tprintf(\"%lld\",ans+1);\n\treturn 0;\n}\n```\n",
        "postTime": 1590724205,
        "uid": 304995,
        "name": "PanH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 [ZJOI2012]\u65c5\u6e38"
    },
    {
        "content": "# \u4e00\u4e2a\u5c0f\u4f18\u5316\n\n\u770b\u5b8c\u9898\u89e3\u597d\u591a\u5b58\u56fe\u90fd\u662f$pair+map$\uff0c\u7528\n```cpp\nmap<pair<in,int>,int>\n```\n\u8fd9\u6837\u4e00\u4e2a\u65b9\u5f0f\u5b58\u56fe\u3002\u63d0\u51fa\u4e00\u4e2a\u5c0f\u4f18\u5316\uff0c\n\u7528$hash+unordered\\_map$\u5b58\u56fe\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5f00$O_2$\u4e86 ~~\uff08\u4e5f\u8bb8\u662f\u6211\u5199\u592a\u4e11\u4e86\u6240\u4ee5\u4e0d\u5438\u6c27\u8fc7\u4e0d\u53bb\uff09~~\n\n\u5982\u4e0b\uff08\u5927\u6982\u8fd9\u610f\u601d\uff0c\u5b9e\u9645\u4e0a\u5f53\u7136\u4e0d\u662f\u8fd9\u6837\u5199\uff09\uff1a\n```cpp\nunordered_map<long long,int> M;\ntmp=ip[0]*1000000+ip[1];\nM[tmp]=i;\ntmp=ip[0]*1000000+ip[2];\nM[tmp]=i;\ntmp=ip[1]*1000000+ip[2];\nM[tmp]=i;\n```\n\u4e5f\u5c31\u662f\u8bf4\u7528\u4e00\u4e2a$long~long$\u53d8\u91cf\u7684\u524d\u516d\u4f4d\u5b58\u4e00\u4e2a\u70b9\uff0c\u4e03\u5230\u5341\u4e8c\u4f4d\u5b58\u53e6\u4e00\u4e2a\u70b9\uff0c\u8fd9\u4e5f\u662f\u5f88\u5e38\u7528\u7684\u4e00\u4e2a\u65b9\u6cd5 ~~\uff08\u53ef\u80fd\u53ea\u6709\u6211\u89c9\u5f97\u5427\uff09~~\n\n\u7136\u540e\u4e0d\u5438\u6c27\u8fc7\u4e86\uff0c\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <unordered_map>\n#include <algorithm>\n#include <cstring>\n#define ll long long\n\nusing namespace std;\n\nconst int MAXN=300050;\n\nint n,head[MAXN],mark[MAXN],dep[MAXN],par[MAXN],cnt=1,ans=1e9;\nint dm,topdm,md;\nll ip[3],tmp;\n\nstruct EDGE{\n\tint to,w,nxt;\n}edge[MAXN<<1];\n\nvoid add_edge(int iu,int iv,int iw){\n\tedge[++cnt]=((EDGE){iv,iw,head[iu]});\n\thead[iu]=cnt;\n}\n\nvoid dfs(int now,int fa){\n\tfor(int i=head[now];~i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(v==fa||mark[v]) continue;\n\t\tdep[v]=dep[now]+edge[i].w;\n\t\tif(dep[v]>dep[dm]){\n\t\t\tdm=v;\n\t\t\tmd=dep[v];\n\t\t}\n\t\tpar[v]=now;\n\t\tdfs(v,now);\n\t}\n}\n\nint main(){\n\tmemset(head,-1,sizeof head);\n\tscanf(\"%d\",&n);\n\tunordered_map<ll,int> M;\n\tfor(int i=1;i<n-1;i++){\n\t\tscanf(\"%lld%lld%lld\",&ip[0],&ip[1],&ip[2]);\n\t\tsort(ip,ip+3);\n\t\ttmp=ip[0]*1000000+ip[1];\n\t\tif(M.count(tmp)){\n\t\t\tadd_edge(i,M[tmp],1);\n\t\t\tadd_edge(M[tmp],i,1);\n\t\t}\n\t\telse{\n\t\t\tM[tmp]=i;\n\t\t}\n\t\t\n\t\ttmp=ip[0]*1000000+ip[2];\n\t\tif(M.count(tmp)){\n\t\t\tadd_edge(i,M[tmp],1);\n\t\t\tadd_edge(M[tmp],i,1);\n\t\t}\n\t\telse{\n\t\t\tM[tmp]=i;\n\t\t}\n\t\t\n\t\ttmp=ip[1]*1000000+ip[2];\n\t\tif(M.count(tmp)){\n\t\t\tadd_edge(i,M[tmp],1);\n\t\t\tadd_edge(M[tmp],i,1);\n\t\t}\n\t\telse{\n\t\t\tM[tmp]=i;\n\t\t}\n\t}\n\t\n\tdfs(1,0);\n\tdep[dm]=0;\n\tdfs(dm,0);\n\t\n\tprintf(\"%d\",md+1);\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1596367283,
        "uid": 104624,
        "name": "Yingluosanqian",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "STL\u5728\u5f00O2\u540e\u81ea\u7136\u662f\u5927\u6c34\u9898\u3002\n\n\u8003\u70b9\uff1a\u6811\u7684\u76f4\u5f84\u3002\n\n\u7b2c\u4e00\u4e8c\u6b21\u6784\u56fe\u3002\n\n\u628a\u6bcf\u4e00\u4e2a\u4e09\u89d2\u5757\u76f8\u90bb\u7684\u5efa\u8fb9\u3002\n\n\u600e\u4e48\u5efa\uff1fSTL-\u4f60\u90fd\u505a\u5230\u8fd9\u4e2a\u9898\u4e86MAP hash\u4e24\u4e2a\u503c\u94c1\u5b9a\u4f1a\u5427\u3002\n\n\u4f46\u662fZJOI\u6ca1\u6709\u90a3\u4e48\u597d\u5fc3\uff0c\u4e0d\u8fc7\u4f60\u4e5f\u670970\u5206\u4e86\u3002\n\n\u4e8e\u662f\u8fd9\u6837\uff1a\u628a\u4e24\u70b9\u5efa\u8fb9\u3002\u6392\u4e2a\u5e8f\u3002\n\n\u76f8\u540c\u7684\u65f6\u5019\u8fde\u8d77\u6765\u3002\n\n\u6811\u7684\u76f4\u5f84\u3002\n\n\u5f88\u591a\u4eba\u6c42\u590d\u6742\u4e86\u3002\n\n\u6811\u7684\u76f4\u5f84\u4e00\u904dDFS\u5c31\u53ef\u4ee5\uff0c\u4e0d\u9700\u8981\u4e24\u904dBFS\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N= 500000;\nstruct Triangle{\n\tint p,q,r;\n}a[N];\nmap<pair<int,int>,int > hash;\nint n;\nstruct Node{\n\tint u,v,nxt;\n}e[N*4];\nint cnt=0;\nint first[N]={0};\nvoid add(int u,int v){\n\tcnt++;\n\te[cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=first[u];\n\tfirst[u]=cnt;\n}\n//\nqueue<int> q;\nint dis[N]={0};\nint rd[N]={0};\nvoid SPFA(){\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=first[x];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(rd[v]==0)\n\t\t\t\tcontinue;\n\t\t\tif(dis[v]<dis[x]+1){\n\t\t\t\tdis[v]=dis[x]+1;\n\t\t\t}\n\t\t\trd[v]--;\n\t\t\tif(rd[v]==0){\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nint ans=0;\nint sum[N]={0};\nvoid dfs(int u,int fat){\n\tsum[u]=1;\n\tfor(int i=first[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v==fat)\n\t\t\tcontinue;\n\t\tdfs(v,u);\n\t\tans=max(ans,sum[u]+sum[v]);\n\t\tsum[u]=max(sum[u],sum[v]+1);\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tn-=2;\n\tfor(int i=1;i<=n;i++){\n\t\tint p,q,r;\n\t\tscanf(\"%d%d%d\",&p,&q,&r);\n\t\tpair<int,int> A;\n\t\tA.first=p;\n\t\tA.second=q;\n\t\tif(p>q){\n\t\t\tswap(A.first,A.second);\n\t\t}\n\t\tif(hash.count(A)){\n\t\t\tadd(i,hash[A]);\n\t\t\tadd(hash[A],i);\n//\t\t\tcout<<i<<\" \"<<hash[A]<<endl;\n\t\t}\n\t\telse{\n\t\t\thash[A]=i;\n\t\t}\n\t\tA.first=q;\n\t\tA.second=r;\n\t\tif(q>r){\n\t\t\tswap(A.first,A.second);\n\t\t}\n\t\tif(hash.count(A)){\n\t\t\tadd(i,hash[A]);\n\t\t\tadd(hash[A],i);\n//\t\t\tcout<<i<<\" \"<<hash[A]<<endl;\n\t\t}\n\t\telse{\n\t\t\thash[A]=i;\n\t\t}\n\t\tA.first=p;\n\t\tA.second=r;\n\t\tif(p>r){\n\t\t\tswap(A.first,A.second);\n\t\t}\t\t\n\t\tif(hash.count(A)){\n\t\t\tadd(i,hash[A]);\n\t\t\tadd(hash[A],i);\n//\t\t\tcout<<i<<\" \"<<hash[A]<<endl;\n\t\t}\n\t\telse{\n\t\t\thash[A]=i;\n\t\t}\t\t\n\t}\n//\tcout<<cnt<<endl;\n//\tSPFA();\n\tdfs(1,0);\n\tcout<<ans<<endl; \n} \n```",
        "postTime": 1520922290,
        "uid": 28147,
        "name": "\u5289\u5b50\u98ba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u6211\u4e3b\u8981\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u5efa\u56fe\u3002  \n\u5e94\u8be5\u8bf4\uff0c\u81f3\u5c11\u5728\u4ee3\u7801\u5b9e\u73b0\u65b9\u9762\uff0c\u5efa\u56fe\u662f\u672c\u9898\u6700\u96be\u7684\u90e8\u5206\u3002\u6211\u4eec\u9700\u8981\u4ee5\u6bcf\u4e2a\u4e09\u89d2\u5f62\u4e3a\u7ed3\u70b9\uff0c\u8fde\u63a5\u6709\u516c\u5171\u8fb9\u7684\u4e09\u89d2\u5f62\uff0c\u6700\u7ec8\u5f62\u6210\u4e00\u68f5\u6811\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u53ef\u4ee5\u5feb\u901f\u68c0\u7d22\u7b26\u5408\u8981\u6c42\u7684\u4e09\u89d2\u5f62\u7684\u6570\u636e\u7ed3\u6784\u3002\u5177\u4f53\u5efa\u56fe\u6d41\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\u6bcf\u5f53\u8f93\u5165\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5206\u914d\u5b83\u4e00\u4e2a\u7ed3\u70b9\u7f16\u53f7\uff0c\u68c0\u7d22\u5df2\u7ecf\u52a0\u5165\u7684\u4e09\u89d2\u5f62\u4e2d\u4e0e\u4e4b\u76f8\u90bb\u7684\u4e09\u89d2\u5f62\uff0c\u5e76\u8fde\u63a5\u5b83\u4eec\u6240\u5bf9\u5e94\u7684\u7ed3\u70b9\u3002\u6bcf\u6b21\u53ea\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u6700\u7ec8\u5f62\u6210\u4e00\u68f5\u6811\u3002  \n\u672c\u4eba\u849f\u84bb\uff0c\u5bf9\u4e8eSTL\u4e00\u7a8d\u4e0d\u901a\uff0c\u6240\u4ee5\u53ea\u80fd\u7ed9\u4e00\u4e2a\u624b\u5199\u5b9e\u73b0\u65b9\u6cd5\u3002  \n\u5bf9\u4e8e\u6211\u4eec\u7684\u9700\u6c42\uff0c\u6563\u5217\u8868\u53ef\u4ee5\u5f88\u597d\u5730\u6ee1\u8db3\u3002\u6211\u4eec\u4ee5\u8fb9\u4e3a\u5173\u952e\u5b57\u50a8\u5b58\u4e09\u89d2\u5f62\uff0c\u628a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u6309\u7167\u4e09\u6761\u8fb9\u50a8\u5b58\u4e09\u904d\u3002\u56e0\u4e3a\u4e24\u4e2a\u4e09\u89d2\u5f62\u95f4\u6700\u591a\u6709\u4e00\u6761\u4e34\u8fb9\uff0c\u6240\u4ee5\u8fd9\u5e76\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u590d\u52a0\u8fb9\u3002  \n\u68c0\u7d22\u65f6\uff0c\u5206\u522b\u4ee5\u4e09\u6761\u8fb9\u4f5c\u4e3a\u5173\u952e\u5b57\u67e5\u627e\u5373\u53ef\u3002  \n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8bbe\u8ba1\u9488\u5bf9\u8fb9\u7684\u6563\u5217\u51fd\u6570\u65f6\uff0c\u6700\u597d\u4ee4\u4e24\u4e2a\u7ed3\u70b9\u7684\u8f93\u5165\u987a\u5e8f\u5bf9\u7ed3\u679c\u6ca1\u6709\u5f71\u54cd\u3002  \n\u4ee5\u4e0b\u662f\u4ee3\u7801\uff0c\u4f7f\u7528\u4e86\u4e58\u6cd5\u6563\u5217\u6cd5\u548c\u94fe\u63a5\u6cd5\u7684\u6563\u5217\u8868\u3002\n```\n#include <cstdlib>\n#include <iostream>\n#include <cstdio>\n#include <math.h>\n#include <cstring>\n#include <time.h>\n#include <utility>\n\n#pragma warning(disable:4996)\n#define INF 2000000005//2 * 10^9\n#define lowbit(a) ((a)&-(a))\ninline long long max(long long a, long long b)\n{\n\treturn a>b ? a : b;\n}\ninline long long min(long long a, long long b)\n{\n\treturn a<b ? a : b;\n}\n\nstruct Node {\n\tint key1;\n\tint key2;\n\tint key3;\n\tint data;\n\tNode *next;\n};\n\nvoid add(Node *&head, int k1, int k2, int k3, int data)\n{\n\tNode *p = new Node;\n\tp->key1 = k1;\n\tp->key2 = k2;\n\tp->key3 = k3;\n\tp->data = data;\n\tp->next = head;\n\thead = p;\n}\n\nconst double A = (sqrt(5) - 1) / 2;\nconst int SIZE = 100000;\n\ndouble mod1(double x)\n{\n\treturn x - (long long)x;\n}\n\nint hash(int k1, int k2)\n{\n\treturn mod1(((long long)k1*k2)*A)*SIZE;\n}\n\nNode *head[SIZE];\n\nvoid insert(int k1, int k2, int k3, int id)\n{\n\tint p = hash(k1, k2);\n\tadd(head[p], k1, k2, k3, id);\n}\n\nstruct node {\n\tint to;\n\tnode *next;\n};\n\nvoid add(node *&head, int to)\n{\n\tnode *p = new node;\n\tp->to = to;\n\tp->next = head;\n\thead = p;\n}\n\nconst int MAXN = 200005;\nnode *edge[MAXN];\nint N;\n\nvoid work(int k1, int k2, int k3, int id)\n{\n\tint h = hash(k1, k2);\n\tfor (Node *p = head[h]; p; p = p->next)\n\t\tif (p->key1==k1&&p->key2==k2|| p->key2 == k1&&p->key1 == k2)\n\t\t{\n\t\t\tadd(edge[id], p->data);\n\t\t\tadd(edge[p->data], id);\n\t\t}\n\tinsert(k1, k2, k3, id);\n}\n\nvoid addtriangle(int k1, int k2, int k3, int id)\n{\n\twork(k1, k2, k3, id);\n\twork(k1, k3, k2, id);\n\twork(k2, k3, k1, id);\n}\n\nint dis[MAXN] = { -1 };\nvoid dfs(int v, int fa)\n{\n\tdis[v] = dis[fa] + 1;\n\tfor (node *p = edge[v]; p; p = p->next)\n\t\tif (p->to != fa)\n\t\t\tdfs(p->to, v);\n}\nint getd()\n{\n\tint mx = 0;\n\tdfs(1, 0);\n\tfor (int i = 1; i <= N - 2; i++)\n\t\tif (dis[i] > dis[mx])\n\t\t\tmx = i;\n\n\tdfs(mx, 0);\n\tmx = 0;\n\tfor (int i = 1; i <= N - 2; i++)\n\t\tif (dis[i] > dis[mx])\n\t\t\tmx = i;\n\treturn dis[mx];\n}\n\nint main()\n{\n\tint i, a, b, c;\n\n\tscanf(\"%d\", &N);\n\n\tfor (i = 1; i <= N - 2; i++)\n\t{\n\t\tscanf(\"%d %d %d\", &a, &b, &c);\n\t\taddtriangle(a, b, c, i);\n\t}\n\n\tprintf(\"%d\", getd() + 1);\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n```",
        "postTime": 1526796743,
        "uid": 64366,
        "name": "ddwqwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u697c\u4e0b\u90a3\u7bc7\u9898\u89e3\u8bf4\u5b9e\u8bdd\u5c31\u662f\u4ec0\u4e48\u90fd\u6ca1\u8bf4\uff0c\u6240\u4ee5\u6211\u518d\u53d1\u4e00\u7bc7\u6b63\u5e38\u4e00\u70b9\u7684\u3002\n\n\u697c\u4e0b\u601d\u8def\u5927\u4f53\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u4e4b\u6240\u4ee5\u662f\u8bf4\u4ec0\u4e48\u90fd\u6ca1\u8bf4\uff0c\u662f\u56e0\u4e3a\u4ed6\u6709\u4e24\u4e2a\u6bd4\u8f83\u81f4\u547d\u7684\u9057\u6f0f\u3002\u9996\u5148\u662f\u70b9\uff0c\u8fd9\u91cc\u7684\u70b9\u4e0d\u662f\u5e73\u65f6\u6211\u4eec\u8ba4\u4e3a\u7684\u70b9\uff0c\u5982\u679c\u591a\u5c11\u63a5\u89e6\u8fc7\u5bf9\u5076\u56fe\u5f88\u5bb9\u6613\u770b\u51fa\u6765\uff0c\u8fd9\u4e2a\u9898\u5b9e\u9645\u4e0a\u8981\u628a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u5f53\u4f5c\u70b9\uff0c\u800c\u628a\u6709\u4e34\u8fb9\u7684\u4e09\u89d2\u5f62\u8fde\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u4f53\u4e0a\u5f97\u5230\u4e00\u68f5\u6811\uff0c\u81f3\u4e8e\u600e\u4e48\u8fde\u8fd9\u4e2a\u8fb9\uff0c\u4f7f\u7528map\u548cpair\u8fdb\u884c\u64cd\u4f5c\uff0c\u5177\u4f53\u8bf4\u6765\u5f88\u9ebb\u70e6\uff0c\u53ef\u4ee5\u4e0a\u7f51\u67d0\u5ea6\u4ee5\u4e0b\u3002\n\n\u5efa\u5b8c\u56fe\u4e86\u4e4b\u540e\uff0c\u4e0d\u96be\u770b\u51fa\uff0c\u6211\u4eec\u8981\u7684\u7ed3\u679c\u5c31\u662f\u5efa\u51fa\u6765\u7684\u8fd9\u4e2a\u6811\u7684\u6700\u957f\u94fe\uff0c\u7136\u540e\u5c31\u662f\u627e\u5230\u4e00\u4e2a\u6700\u957f\u94fe\u7684\u7aef\u70b9\u7684\u95ee\u9898\u3002\u7531\u4e8e\u8fd9\u662f\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7dfs\u6216bfs\u6c42\u51fa\u5176\u4e2d\u7684\u4e00\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u7aef\u70b9\u518d\u6765\u4e00\u6b21\uff0c\u6c42\u51fa\u7684\u6700\u5927\u6df1\u5ea6\u5c31\u662f\u6211\u4eec\u8981\u7684\u7b54\u6848\u3002\u7531\u4e8e\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u9650\u5236\uff0c\u6240\u4ee5\u867d\u7136\u8fd9\u4e48\u5efa\u5b8c\u56fe\u4e4b\u540espfa\u7edd\u5bf9\u4e0d\u6162\uff0c\u53ef\u662f\u8fd8\u662f\u4f1aT2~3\u4e2a\u70b9\uff0c\u867d\u7136\u4f60\u60f3A\u6389\u53ef\u4ee5\u5f00O2\u4f18\u5316\uff0c\u4f46\u662f\u8fd8\u662f\u5e0c\u671b\u7528\u641c\u7d22\u641c\u7d22\u51fa\u6765\u3002\u8fd8\u6709\u4e00\u4e2a\uff0c\u4e0d\u8981cin\uff0c\u8fd9\u4e2a\u5fc5T\u65e0\u7591\uff0c\u9664\u975e\u4f60\u5f00O2.\u3002\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<iomanip>\n#include<map>\n#define re register\n#define ll long long\nusing namespace std;\nstruct po\n{\n    int nxt,to,dis;\n};\nmap<pair<int,int>,int> m;\npo edge[4000001];\nint q[1000001],head[1000001],dis[300001],b[300001],temp[400001][3];\nint n,s,t,r,st,to,ans,maxx,num;\ninline int read()\n{\n    int x=0,c=1;\n    char ch=' ';\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    while(ch=='-')c*=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*c;\n}\ninline void add_edge(int from,int to,int dis)\n{\n    edge[++num].nxt=head[from];\n    edge[num].to=to;\n    edge[num].dis=dis;\n    head[from]=num;\n}\ninline void finish(int id,int x,int y)\n{\n    int s=m[make_pair(x,y)];\n    if(s)\n    {\n        add_edge(s,id,1);\n        add_edge(id,s,1);\n        m.erase(m.find(make_pair(x,y)));\n    }else\n    m[make_pair(x,y)]=id;\n}\ninline void spfa(int x)\n{\n    memset(dis,127,sizeof(dis));\n    memset(b,0,sizeof(b));\n    int front=0,tail=1;\n    dis[x]=0;\n    q[tail]=x;\n    b[x]=1;\n    while(front<tail)\n    {\n        int now=q[++front];\n        b[now]=0;\n        for(re int i=head[now];i;i=edge[i].nxt)\n        {\n            int u=edge[i].to;\n            if(dis[u]>edge[i].dis+dis[now])\n            {\n                dis[u]=edge[i].dis+dis[now];\n                if(!b[u])\n                {\n                    b[u]=1;\n                    q[++tail]=u;\n                }\n            }\n        }\n    }\n}\ninline void bfs(int x)\n{\n    memset(b,0,sizeof(b));\n    int front=0,tail=1;\n    temp[tail][1]=x;\n    temp[tail][2]=1;\n    b[x]=1;\n    while(front<tail)\n    {\n        int now=temp[++front][1];\n        int dep=temp[front][2];\n        if(dep>maxx)\n        {\n            st=now;\n            maxx=dep;\n        }\n        for(re int i=head[now];i;i=edge[i].nxt)\n        {\n            int u=edge[i].to;\n            if(!b[u])\n            {\n                b[u]=1;\n                temp[++tail][1]=u;\n                temp[tail][2]=dep+1;\n            }\n        }\n    }\n}\nint main()\n{\n    n=read();\n    for(re int i=1;i<=n-2;i++)\n    {\n        s=read();t=read();r=read();\n        if(s>t)\n        swap(s,t);\n        if(s>r)\n        swap(s,r);\n        if(t>r)\n        swap(t,r);\n        finish(i,s,t);\n        finish(i,s,r);\n        finish(i,t,r);\n    }\n\n    bfs(1);\n    maxx=0;\n    bfs(st);\n    cout<<maxx;\n}\n```",
        "postTime": 1516536325,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u4e0d\u592a\u60f3\u7c98\u4ee3\u7801\u3002\u3002\u56e0\u4e3a\u662f\u9053spfa\u6c34\u9898\u3002\u3002\u3002\uff08\u771f\u7684ZJ\uff1fOrz\uff09\n\n\u601d\u8def\u662f\u8fd9\u6837\uff1a\n\n\u7531\u4e8e\u8fd9\u6837\u7684\u56fe\u4e00\u5b9a\u6709\uff1a\u8fde\u4e86\u4e24\u6761\u8fb9\u7684\u70b9\u6709\u4e14\u4ec5\u6709\u4e24\u4e2a\uff0c\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u80fd\u591f\u901a\u8fc7\u6240\u6709\u7684\u57ce\u5e02\n\n\u6240\u4ee5\u5c31\u662f\u8981\u627e\u5230\u4efb\u610f\u4e00\u4e2a\u8fde\u4e86\u4e24\u6761\u8fb9\u7684\u70b9\n\n\u5bf9\u4e8e\u4efb\u610f\u7684\u70b9\uff0c\u6700\u77ed\u8def\u5f84\u6700\u957f\u7684\u90a3\u4e2a\u8282\u70b9\u603b\u662f\u5982\u4e0a\u6240\u8ff0\u7684\u70b9\u3002\n\n\u6240\u4ee5\u5bf9\u4efb\u610f\u8282\u70b9SPFA\uff0c\u7136\u540e\u627e\u5230max{dis[i]},\u518d\u4ece\u8fd9\u91cc\u91cd\u65b0SPFA\uff0coutput(max{dis[i]})\n",
        "postTime": 1491956101,
        "uid": 15514,
        "name": "FrankLi0324",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2610 \u3010[ZJOI2012]\u65c5\u6e38\u3011"
    }
]