[
    {
        "content": "\u6709\u5f88\u591a\u5de8\u4f6c\u7528\u4ec0\u4e48rope\uff0c\u7ebf\u6bb5\u6811\uff0csplay\u7b49\u9ad8\u7ea7~~\uff08\u6389\u5934\u53d1\uff09~~\u6570\u636e\u7ed3\u6784\uff0c\u849f\u84bb\u53ea\u80fd\u6765\u4e00\u7bc7vector\u52a0\u6811\u72b6\u6570\u7ec4\u7684\u9898\u89e3\n\n```cpp\n#include<bits/stdc++.h>\nint ans[1000001],n,tree[1000001];\nstd::vector<int>a;\ninline void update(int x,int val){while(x<=n)tree[x]=std::max(tree[x],val),x+=x&-x;}\ninline int query(int x){\n\tint t=0;\n    while(x)t=std::max(t,tree[x]),x-=x&-x;\n    return t;\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(register int i=1,t;i<=n;++i)scanf(\"%d\",&t),a.insert(t+a.begin(),i);\n    for(register int i=0,t;i<n;++i)t=a[i],update(t,ans[t]=query(t)+1);\n    for(register int i=1;i<=n;++i)printf(\"%d\\n\",ans[i]=std::max(ans[i],ans[i-1]));\n    return 0;\n}\n```\n\n~~\u6211\u60f3\u5e94\u8be5\u662f\u6700\u77ed\u6700\u7b80\u5355\u7684\u9898\u89e3\u4e86\u5427~~",
        "postTime": 1544537990,
        "uid": 149845,
        "name": "\u6211\u662fPG",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "## \u4e00\u9053\u6362\u4e86N\u79cd\u505a\u6cd5\u7684\u9898\uff08\u7136\u540e\u8fd8\u809d\u4e86\u4e00\u4e2a\u4e0b\u5348QwQ\n### \u672c\u9898\u89e3\u6cd5\uff1a\n### 1.\u6784\u9020\u51fa\u539f\u6765\u7684\u6570\u5217\n### 2.\u8dd1LIS\n\n\u6216\u8005\n\n### 1'.\u8fb9\u6784\u9020\u8fb9\u8dd1LIS\n\n------------\n\n## \u4e4b\u6240\u4ee5\u809d\u4e86\u8fd9\u4e48\u4e45\uff0c\u5c31\u662f\u56e0\u4e3a\u5f88\u591a\u9898\u89e3\uff0c\u5305\u62ec\u9898\u76ee\u90fd\u6709\u8ba9\u4eba\u8bef\u89e3\u6216\u8005\u770b\u4e0d\u61c2\u7684\u5730\u65b9\uff0c\u4e0b\u9762\u6211\u4eec\u5148\u8bb2\u4e00\u4e0b\u9898\u76ee\u95ee\u9898\u548c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u65b9\u4fbf\u540e\u9762\u8bb2\u505a\u6cd5\u8c03\u7528XD\n\u5982\u679c\u7740\u6025\u53ef\u4ee5\u5148\u770b\u4e0b\u9762\u7684\u505a\u6cd5\uff0c\u7136\u540e\u5bf9\u5e94\u4e0a\u6765\u770b\u64cd\u4f5c\n\n\n------------\n\n### \u9898\u76ee\u7406\u89e3\u95ee\u9898\uff1a\n\n\u9898\u76ee\u8bf4\uff1a\u201c\u63a5\u4e0b\u662fN\u4e2a\u6570\u5b57\uff0c\u7b2ck\u4e2a\u6570\u5b57Xk\uff0c\u8868\u793a\u6211\u4eec\u5c06k\u63d2\u5165\u5230\u4f4d\u7f6eXk\u201d\uff0c\u610f\u601d\u662f\uff0c\u5f53\u5728Xk\u63d2\u5165\u4e00\u4e2a\u6570\u65f6\uff0c**\u5148\u8bb2Xk\u4ee5\u53ca\u540e\u9762\u7684\u6570\u5f80\u540e\u79fb\u4e00\u4f4d\uff0c\u628ak\u653e\u5728Xk\u4e0a**\u3002\n\n\u4ee5\u6837\u4f8b\u4e3a\u4f8b\uff1a\n\nX=1,Xk=0:{1}\n\nX=2,Xk=0:{2,1}\n\nX=3,Xk=2:{2,1,3}\n\n### \u64cd\u4f5c1\uff1a\u6a21\u62df\u9898\u76ee\u6240\u8ff0\u7684\u6570\u5217\u6dfb\u52a0\n\u5f88\u5bb9\u6613\uff0c\u6a21\u62df\uff0c\u5c31\u662f\u5229\u7528\u5e73\u8861\u6811\uff08\u4e00\u822c\u662f\u5229\u7528\u5b50\u6811size\uff09\u628a\u70b9\u6dfb\u52a0\u8fdb\u6570\u5217\u3002\n\nSplay\u548c\u65cb\u8f6cTreap\u5e94\u8be5\u5f88\u5bb9\u6613\u5b9e\u73b0\u5427~\uff1f\uff08\u5176\u5b9e\u662f\u81ea\u5df1\u6ca1\u6253XD\uff0c\u81ea\u5df1\u60f3\u60f3\u5f88\u5feb\u80fd\u5b9e\u73b0)\u3002\u6211\u8fd9\u91cc\u7528\u7684\u662f\u975e\u65cbTreap\uff08FHQ Treap\uff09\uff0c\u548c\u6a21\u677f\u4e0d\u540c\u7684\u5c31\u5728\u5206\u88c2Treap\u7684\u64cd\u4f5c\uff08split\uff09\n\n\u539f\u6765\u7684FHQ Treap\u6211\u4eec\u662f\u4ee5\u7b2c\u4e00\u5173\u952e\u5b57key\u5206\u88c2\u4e24\u4e2a\u5806\uff0c\u73b0\u5728\u6211\u4eec\u4ee5\u5b50\u6811\u5927\u5c0f\u5206\u88c2\uff0c\u5373\uff1a\n\n\u5982\u679c\u5de6\u5b50\u6811size+\u5f53\u524d\u70b9\u7684size\uff08\u5176\u5b9e\u5c31\u662f1\uff09\u5c0f\u4e8e\u6570X\u8981\u653e\u5165\u7684\u4f4d\u7f6eXk\uff0c\u8bbe\u5f53\u524d\u4f4d\u7f6e\u4e3apst\uff0c\u5982\u679c\uff08key >= sz[l[pst]] + 1\uff09\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5206\u88c2\u5de6\u5806\uff08y = pst, split(l[pst], key, x, l[pst]);\uff09\n\n\u5426\u5219\uff0c\u6211\u4eec\u5206\u88c2\u53f3\u5806\uff0c**\u6ce8\u610f\u8fd9\u91cc\u7684\u9012\u5f52\u4e00\u5b9a\u8981\u8ba9key\u51cf\u53bb\uff08sz[l[pst]] + 1\uff09**,\u5373\uff1a\uff08x = pst, split(r[pst], key - sz[l[pst]] - 1, r[pst], y);\uff09\n\nval\u6570\u7ec4\u6211\u4eec\u653e\u8fd9\u4e2a**\u539f\u6570**\u5373\u53ef\n\n\u76f8\u4fe1\u4f1aFHQ Treap\u7684\u540c\u5b66\u5f88\u5feb\u5c31\u80fd\u770b\u61c2\n\n### \u64cd\u4f5c2\uff1a\u4ec0\u4e48\uff1f\u4f60\u4e0d\u4f1a\u5e73\u8861\u6811\uff1f\u4e0d\u80fd\u6a21\u62df\u63d2\u5165\uff1f\n~~\u90a3\u5c31\u5b66\u53e6\u5916\u4e00\u7bc7\u9898\u89e3\u7528rope\u5440~~\n\nrope Noip\u4e0d\u80fd\u7528\u4e0d\u60f3\u5b66\u600e\u4e48\u529e\uff1f\n\n\u6211\u4eec\u5e38\u7528\u7684vector\u4e5f\u6709\u8fd9\u4e2a\u529f\u80fd\uff01\uff01\n\n\u51fd\u6570\uff1a\u5411\u91cf\u540d.insert(\u4f4d\u7f6e\uff0c\u503c)\n\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u76f4\u63a5\u6a21\u62df\u9898\u76ee\u7684\u8981\u6c42\u5566~\uff08\u4e0d\u8fc7\u8fd8\u662f\u5e0c\u671b\u5927\u5bb6\u7ec3\u7ec3\u5e73\u8861\u6811\n\n\u5177\u4f53\u7528\u6cd5(\u4ee5\u81ea\u5df1\u7684\u4e3a\u4f8b\uff09\uff1apst.insert(pst.begin() + x, i);\uff08pst\u4e3avector\u540d\uff0cx\u4e3a\u4f4d\u7f6e\uff0c\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u5427\uff1f\uff09\n\n### \u64cd\u4f5c3\uff1a\u6c42LIS\uff08\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff09\n\n\u5bf9\u4e8eLIS\uff0c\u7f51\u4e0a\u5df2\u7ecf\u6709\u70c2\u5927\u8857\u7684DPn\u65b9\u6cd5\u548c\u5355\u8c03\u961f\u5217nlogn\u6cd5\uff0c\u8fd9\u91cc\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u4e5f\u53ef\u4ee5\u529e\u5230\u3002\n\n\u5f53\u6c42\u51fa\u539f\u6570\u5217\u540e\uff08\u64cd\u4f5c1\uff0c2\uff09\uff0c\u6211\u4eec\u518d\u6c42\u51fa\u4ed6\u4eec\u7684\u6dfb\u52a0\u987a\u5e8frak\uff0c\u8bbe\u539f\u6570\u7ec4\u4e3aa\uff0c\u90a3\u4e48rak[a[i]]=i\uff0c\u8fd9\u6837rak[x]\u5c31\u662f\u6570x\u52a0\u5165\u7684\u4f4d\u7f6e\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u52a0\u5165\u6709\u5e8f\u7684\u6570\u7684\u4f4d\u7f6e\u3002\u53ef\u4ee5\u7c7b\u6bd4\u8f93\u5165\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u91cc\u7684\u503c\u7684\u4f4d\u7f6e\u5df2\u7ecf\u662f\u6700\u540e\u7684\u4f4d\u7f6e\uff0c\u5373\u4e0d\u4f1a\u66f4\u6539\u4e86\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u52a0\u5165\u7684\u6570\u662f\u6709\u5e8f\u7684\uff0c\u628a\u6570X\u52a0\u5165\u5230Xk\u65f6\uff0c\u5b83\u662f\u4e0d\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u503c\u7684\u7b54\u6848\u7684**\uff08\u6ce8\u610f\u662f\u5b50\u5e8f\u5217\u800c\u4e0d\u662f\u5b50\u4e32**\uff09\uff0c\u5e76\u4e14\u52a0\u5165\u7684\u6570X\u662f\u5f53\u524d\u6700\u5927\u7684\uff0c\u6240\u4ee5\u5b83\u80fd\u63a5\u4e0a\u4efb\u4f55\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u6211\u4eec\u8003\u8651\u63a5Xk\u4ee5\u524d\u7684\u5b50\u5e8f\u5217\u5373\u53ef\uff08\u56e0\u4e3a\u540e\u9762\u4e0d\u53ef\u80fd\u80fd\u63a5\u4e0a\uff09\u3002\n\n\u8bbe\u6211\u4eec\u4ee5Xk\u4e3a\u7ed3\u5c3e\u7684LIS\u6700\u957f\u7684\u50a8\u5b58\u6570\u7ec4\u662fdp\uff0c\n\u90a3\u4e48dp[Xk]=max(dp[1],dp[2]...dp[Xk-1]) +1\uff0c\u4e5f\u5c31\u662f\u8981\u6c42\u4e00\u4e2a\u524d\u7f00\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u65f6\u5019\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\uff0c\u518d\u4e0d\u884cST\u8868\uff0c\u968f\u4fbf\u6253\u4e00\u4e2a\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86~\n\n### \u64cd\u4f5c4\uff1a\u4e3a\u4ec0\u4e482\u4e2a\u6b65\u9aa4\u4e0d\u80fd\u5728\u4e00\u8d77\u505a\u5462\uff1f\n\n\u8fd8\u662f\u50cf\u64cd\u4f5c1\u90a3\u6837\u8dd1\u5e73\u8861\u6811\uff0c\u4f46\u662f\u8981\u7ef4\u62a4\u4e00\u4e2adp\u6570\u7ec4\u8868\u793a\u5b50\u6811\u53ca\u81ea\u5df1\u7684LIS\u6700\u5927\u503c\u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u9700\u5728\u65cb\u8f6c\uff08\u6216\u8005\u5206\u88c2\u5806\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u5404\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u5e73\u8861\u7684\u64cd\u4f5c\uff09\u65f6\uff0c\u66f4\u65b0dp\u5373\u53ef\u3002\u8fd9\u6837\u5148\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u518d\u63d0\u53d6\u51fa\u5b83\u7684\u5de6\u513f\u5b50\uff0c\u8bbe\u4e3atemp\uff0c\u5373\u53ef\u3002\u56e0\u4e3a\u52a0\u5165\u7684\u6570\u662f\u9012\u589e\u7684\uff0c\u50cf\u64cd\u4f5c3\u90a3\u6837\uff0c\u53ea\u9700\u66f4\u65b0\u4e00\u4e0bans=max(ans,temp+1)\uff0c\u8f93\u51faans\u3002\n\n------------\n## \u6709\u4e86\u8fd9\u4e48\u591a\u64cd\u4f5c\uff0c\u90a3\u4e48\u80fd\u600e\u4e48\u642d\u914d\u4f7f\u7528\u5462\uff1f\uff08\u505a\u6cd5\uff09\n\n1:\u64cd\u4f5c1+\u64cd\u4f5c3\uff08\u5e73\u8861\u6811+\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u6216\u5355\u8c03\u961f\u5217\uff09\n\n2:\u64cd\u4f5c2+\u64cd\u4f5c3\uff08vector+\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u6216\u5355\u8c03\u961f\u5217\uff09\n\n3:\u64cd\u4f5c4\uff08\u5e73\u8861\u6811\uff09\n\n\u5176\u5b9e\u767e\u5ea6\u4e0a\u8fd8\u80fd\u67e5\u5230**\u5012\u63a8\u539f\u6570\u5217**\u7684\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u849f\u84bb\u6ca1\u6709\u770b\u61c2QwQ\uff08\u81ea\u5df1\u63a8\u7684\u65f6\u5019\u5e76\u4e0d\u662f\u50cf\u4ed6\u4eec\u8bf4\u7684\u90a3\u6837\uff09\uff0c\u540e\u9762\u518d\u914d\u4e0a\u64cd\u4f5c3\u5373\u53ef\u3002\n\n### \u4e0b\u9762\u7ed9\u51fa\u505a\u6cd51\uff0c2\u7684\u4ee3\u7801\uff1a\n### \u6a21\u677f\u90fd\u7528struct\u5c01\u88c5\u597d\u4e86\uff0c\u6240\u4ee5\u8fd8\u662f\u6bd4\u8f83\u597d\u8bfb\u7684\uff0c\u5c31\u4e0d\u7ed9\u8fd9\u4e48\u591a\u6ce8\u91ca\u4e86\n------------\n# Code1\uff1a\n```cpp\n#pragma warning (disable:4996)\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define mid ((x+y)>>1)\n#define lson (pst<<1)\n#define rson (pst<<1|1)\nusing namespace std;\nconst int maxn = 1e5 + 5, inf = 0x7fffffff - 1;\nint a[maxn];\nint n, ans;\n\ninline int max(int x, int y) { return x > y ? x : y; }\n\nstruct FHQ_Treap\n{\n\tint val[maxn], sz[maxn], heap[maxn], l[maxn], r[maxn], num, root, x, y, z;\n\n\tinline int max(int x, int y) { return x > y ? x : y; }\n\tinline void update(int x) { sz[x] = sz[l[x]] + sz[r[x]] + 1; }\n\tinline int new_node(int key) { heap[++num] = rand(), sz[num] = 1, val[num] = key; return num; }\n\n\tinline int merge(int x, int y)\n\t{\n\t\tif (!x || !y)\treturn x + y;\n\t\tif (heap[x] < heap[y]) { r[x] = merge(r[x], y), update(x); return x; }\n\t\telse { l[y] = merge(x, l[y]), update(y); return y; }\n\t}\n\n\tinline void split(int pst, int key, int &x, int &y)\n\t{\n\t\tif (!pst) { x = y = 0; return; }\n\t\tif (key >= sz[l[pst]] + 1)\tx = pst, split(r[pst], key - sz[l[pst]] - 1, r[pst], y);//\u6ce8\u610f\u8fd9\u91cc\u7684\u5206\u88c2\u5806\uff01\n\t\telse y = pst, split(l[pst], key, x, l[pst]);\n\t\tupdate(pst); return;\n\t}\n\n\tinline int kth(int pst, int rak)\n\t{\n\t\tif (rak <= sz[l[pst]])\treturn kth(l[pst], rak);\n\t\tif (rak == sz[l[pst]] + 1)\treturn pst;\n\t\treturn kth(r[pst], rak - sz[l[pst]] - 1);\n\t}\n\n\tinline void add(int pst, int key) { split(root, pst, x, y), root = merge(x, merge(new_node(key), y)); }\n\n}Treap;\n//\u6c42\u6700\u5927\u503c\u7684\u7ebf\u6bb5\u6811\nstruct SegementTree\n{\n\tint a[maxn << 2];\n\n\tinline void update(int x, int y, int pst, int p, int k)\n\t{\n\t\tif (x == y) { a[pst] = k; return; }\n\t\tif (p <= mid)\tupdate(x, mid, lson, p, k);\n\t\telse update(mid + 1, y, rson, p, k);\n\t\ta[pst] = max(a[lson], a[rson]); return;\n\t}\n\n\tinline int query(int x, int y, int pst, int l, int r)\n\t{\n\t\tif (x > y || y < l || x>r)\treturn -1;\n\t\tif (l <= x && y <= r)\treturn a[pst];\n\t\treturn max(query(x, mid, lson, l, r), query(mid + 1, y, rson, l, r));\n\t}\n}Stree;\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1, x; i <= n; i++)\tscanf(\"%d\", &x), Treap.add(x, i);//\u52a0\u5165\u6570\n\tfor (int i = 1; i <= n; i++)\ta[Treap.val[Treap.kth(Treap.root, i)]] = i;//\u53cd\u63a8\u6c42\u51fa\u4f4d\u7f6e\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (a[i] == 1)\tans = max(ans, 1), Stree.update(1, n, 1, 1, 1);//\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e0d\u80fd\u6c421\u7684\u524d\u7f00\uff08\u4e5f\u5c31\u662f0\uff09\uff0c\u4e0d\u7136\u4f1a\u5361\u6b7b\uff0c\u8fd9\u91cc\u7279\u5224\u4e00\u4e0b\uff0c\u5176\u5b9e\u50cf\u7b2c\u4e8c\u4efd\u4ee3\u7801\u628a\u4f4d\u7f6e+1\u4e5f\u53ef\u4ee5\n\t\telse { int temp = Stree.query(1, n, 1, 1, a[i] - 1) + 1; ans = max(ans, temp), Stree.update(1, n, 1, a[i], temp); }\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n\n```\n\n# Code2\n```cpp\n#pragma warning (disable:4996)\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n#define mid ((x+y)>>1)\n#define lson (pst<<1)\n#define rson (pst<<1|1)\nusing namespace std;\nconst int maxn = 1e5 + 5, inf = 0x7fffffff - 1;\nvector<int> pst;\nint a[maxn];\nint n, m, ans;\n\ninline int max(int x, int y) { return x > y ? x : y; }\n\nstruct SegementTree\n{\n\tint a[maxn << 2];\n\n\tinline void update(int x, int y, int pst, int p, int k)\n\t{\n\t\tif (x == y) { a[pst] = k; return; }\n\t\tif (p <= mid)\tupdate(x, mid, lson, p, k);\n\t\telse update(mid + 1, y, rson, p, k);\n\t\ta[pst] = max(a[lson], a[rson]); return;\n\t}\n\n\tinline int query(int x, int y, int pst, int l, int r)\n\t{\n\t\tif (x > y || y < l || x>r)\treturn -1;\n\t\tif (l <= x && y <= r)\treturn a[pst];\n\t\treturn max(query(x, mid, lson, l, r), query(mid + 1, y, rson, l, r));\n\t}\n}Stree;\n\nint main()\n{\n\tscanf(\"%d\", &n); m = n + 1;\n\tfor (int i = 1, x; i <= n; i++)\tscanf(\"%d\", &x), pst.insert(pst.begin() + x, i);//vector\u7684\u63d2\u5165\u64cd\u4f5c\n\tfor (int i = 1; i <= n; i++)\ta[pst[i - 1]] = i + 1;//vector\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5-1\u3002\u4e3a\u4e86\u4e0d\u8ba9\u6211\u4eec\u7684\u4f4d\u7f6e\u51fa\u73b01\uff08\u8fd9\u6837\u7ebf\u6bb5\u6811\u9700\u8981\u50cf\u7b2c\u4e00\u4efd\u4ee3\u7801\u90a3\u6837\u7279\u5224\u5f53\u4f4d\u7f6e\u4e3a1\u65f6\uff0c\u4e0d\u7136\u67e5\u524d\u7f00\u7684\u65f6\u5019\u4f1a\u67e5[1,0]\u7ebf\u6bb5\u6811\u53ef\u80fd\u4f1a\u70b8\uff09\u6240\u4ee5\u4f4d\u7f6e+1\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint temp = Stree.query(1, m, 1, 1, a[i] - 1) + 1; ans = max(ans, temp), Stree.update(1, m, 1, a[i], temp);\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n\n\n```\n\n\n",
        "postTime": 1533955543,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "~~\u6bd4\u8f83\u7b80\u5355\u7684\u5e73\u8861\u6811\u9898\u76ee\u5427\uff0c\u6bd5\u7adf\u4e00\u53d1\u5165\u9b42~~\n\n\u5febPION\u4e86\uff0c\u6253\u70b9\u6570\u636e\u7ed3\u6784\u7ec3\u7ec3\u624b\u3002\u3002\u3002\n\n~~\u4e0a\u9762\u90fd\u662f\u5e9f\u8bdd~~\n\n\u9898\u76ee\u5927\u610f\u5c31\u662f\u8bf4\u6bcf\u6b21\u5f80\u5e8f\u5217\u4e2d\u52a0\u5165\u9012\u589e\u7684\u6570\uff0c\u6c42\u5f53\u524d\u6570\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3002~~\u4e00\u822c\u50cf\u8fd9\u79cd\u52a8\u6001\u5f80\u91cc\u9762\u52a0\u4e1c\u897f\u7684\u7136\u540e\u6c42\u4e2a\u4ec0\u4e48\u591a\u534a\u662f\u5e73\u8861\u6811\u4e4b\u7c7b\u7684~~\n\n\u6211\u4eec\u8bbe$dp[i]$\u4e3a\u4ece\u7b2c$i$\u4e2a\u4f4d\u7f6e\u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c~~\u5f88\u7b80\u5355\u7684\u52a8\u6001\u89c4\u5212\u641e\u4e0b\u53ef\u5f97~~\u5f80\u7b2c$i$\u4e2a\u4f4d\u7f6e\u52a0\u4e00\u4e2a\u5f53\u524d\u6700\u5927\u7684\u6570\u540e\n> $dp[i]=max(dp[i],dp[j]+1),(j<=i)$\n\n\u5728\u4fdd\u8bc1\u590d\u6742\u5ea6\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u53ea\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u4ece $1$ \u5230 $i$ \u4e2d\u6700\u5927\u7684$dp[j]$\u5373\u53ef\u76f4\u63a5\u8f6c\u79fb\uff0c\u6240\u4ee5\u5c31\u628a $dp$ \u6570\u7ec4\u4e22\u5230\u5e73\u8861\u6811\u4e0a\u5373\u53ef($pushup$\u7684\u65f6\u5019\u8bb0\u5f97\u8bb0\u4e0b$dp$\u6570\u7ec4)\uff0c~~\u672c\u4eba\u6253\u7684Fhq\u4e5f\u6bd4\u8f83\u88f8\uff0c\u53cd\u6b63\u53ea\u6709\u57fa\u672c\u64cd\u4f5c\uff0c\u5927\u5bb6\u5c31\u5f53\u7ec3\u7ec3\u677f\u5b50\u5427~~\n\n~~\u4e00\u53d1\u5165\u9b42~~\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read()\n{\n    int sum=0;char ch=getchar();\n    while(ch<'0'||ch>'9'){ch=getchar();}\n    while(ch<='9'&&ch>='0'){sum=sum*10+ch-'0';ch=getchar();}\n    return sum;\n}\nconst int N = 100010;\nint tot,seed=233,root;\nint Rand()\n{\n    return seed=int(seed*48271ll%2147483647);\n}\nint dp[N];\nstruct node\n{\n    int lch,rch,siz,val,key,pos;\n}t[N];\nvoid pushup(int p)\n{\n    t[p].siz=t[t[p].lch].siz+t[t[p].rch].siz+1;\n    t[p].val=max(dp[t[p].pos],max(t[t[p].lch].val,t[t[p].rch].val));\n}\nint _add_new_point(int val,int i)\n{\n    t[++tot].siz=1;\n    t[tot].val=val;\n    t[tot].key=Rand();t[tot].pos=i;dp[i]=val;//\u8fd9\u91cc\u4f60\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7cbe\u7b80\u6210\u4e00\u4e2a\u53d8\u91cf\u8bb0\u4e0b\u6765\uff0c\u4f60\u4eec\u81ea\u5df1\u597d\u7406\u89e3\u5c31\u884c\n    t[tot].rch=t[tot].lch=0;\n    return tot;\n}\nvoid split(int now,int &a,int &b,int val)\n{\n    if(now==0){a=b=0;return;}\n    if(t[t[now].lch].siz<val)\n    {\n        a=now;split(t[now].rch,t[now].rch,b,val-t[t[now].lch].siz-1);\n    }\n    else\n    {\n        b=now;split(t[now].lch,a,t[now].lch,val);\n    }\n    pushup(now);\n}\nvoid _merge(int &now,int a,int b)\n{\n    if(a==0||b==0){now=a+b;return;}\n    if(t[a].key<t[b].key)\n    {\n        now=a;_merge(t[now].rch,t[a].rch,b);\n    }\n    else\n    {\n        now=b;_merge(t[now].lch,a,t[b].lch);\n    }\n    pushup(now);\n}\nint n;\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        int ju1=read();\n        int x=0,y=0,z=0;\n        split(root,x,y,ju1);\n        z=_add_new_point(t[x].val+1,i);\n        _merge(x,x,z);\n        _merge(root,x,y);\n        printf(\"%d\\n\",t[root].val);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1541339919,
        "uid": 60072,
        "name": "JYTS",
        "ccfLevel": 0,
        "title": "[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"
    },
    {
        "content": "\u61d2\u5f97\u5199\u5e73\u8861\u6811\u7684\u6211\u6765\u4e00\u53d1\u9898\u89e3\u5427\u3002\n\n\u9996\u5148\u7531\u4e8e\u63d2\u5165\u987a\u5e8f\uff0c\u540e\u9762\u7684\u63d2\u5165\u548c\u524d\u9762\u7684\u7b54\u6848\u662f\u6ca1\u5173\u7cfb\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6784\u5efa\u51fa\u6574\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u8f93\u51fa\u4ee5\u6bcf\u4e2a\u6743\u503c\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u524d\u7f00max\u5c31\u597d\u4e86\u3002\n\n\u5173\u4e8e\u8fd9\u4e2a\u5e8f\u5217\u600e\u4e48\u6784\u5efa\uff0c\u6211\u4eec\u53ef\u4ee5\u7528splay,treap\u7b49\u5e73\u8861\u6811\u5b9e\u73b0\u3002\u7136\u800c\uff0c\u522b\u5fd8\u4e86STL\u4e2d\u6709\u4e00\u4e2a\u53eb\u505arope\u7684\u795e\u5947\u5bb9\u5668\u3002\n\nrope\u600e\u4e48\u7528\u5462\uff1f\u5b83\u6709\u4e00\u4e2a\u6210\u5458\u51fd\u6570insert(pos,val)\u8868\u793a\u5c06\u503cval\u63d2\u5165\u5230\u4f4d\u7f6epos\u4e4b\u540e\uff0c\u6b63\u597d\u6ee1\u8db3\u6b64\u9898\u9898\u610f\u3002\n\n\u7136\u540e\u5c31\u5341\u5206\u6109\u60a6\u4e86\u3002\n\n\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<ext/rope>\nconst int maxn=1e5+1e2;\n\nint ans[maxn],n;\n__gnu_cxx::rope<int> seq;\n\nstruct BinaryIndexTree {\n    int dat[maxn];\n    #define lowbit(x) (x&-x)\n    inline void update(int x,int val) {\n        while( x <= n ) dat[x] = std::max( dat[x] , val ) , x += lowbit(x);\n    }\n    inline int query(int x) {\n        int ret = 0;\n        while(x) ret = std::max( ret , dat[x] ) , x -= lowbit(x);\n        return ret;\n    }\n}bit;\n\nint main() {\n    scanf(\"%d\",&n);\n    for(int i=1,t;i<=n;i++) scanf(\"%d\",&t) , seq.insert(t,i);\n    for(int i=0,t;i<n;i++) t = seq[i] , bit.update(t,ans[t]=bit.query(t)+1);\n    for(int i=1;i<=n;i++) printf(\"%d\\n\",ans[i]=std::max(ans[i],ans[i-1]));\n    return 0;\n}\n```",
        "postTime": 1524659087,
        "uid": 31907,
        "name": "cmd2001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "//\u5c06$log$\u7edf\u4e00\u6539\u4e3a$\\log$\n\n\u8bbe$f(i)$\u8868\u793a\u4ee5\u7b2c$i$\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684LIS\u957f\u5ea6 \n\n\u8003\u8651\u5728$pos$\u4f4d\u7f6e\u540e\u63d2\u5165\u5143\u7d20$x$\uff08\u7531\u9898\u610f\uff0c**$x$\u662f\u5f53\u524d\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u5143\u7d20**\uff09  \n\n\u5bf9\u5e8f\u5217LIS\u7684\u5f71\u54cd\u5206\u4e09\u6bb5\uff1a\n- \u5de6\u534a\u6bb5$[1,pos]$\uff1a\u4e8b\u5b9e\u4e0a\u5b8c\u5168\u6ca1\u6709\u5f71\u54cd\u3002\n- \u53f3\u534a\u6bb5$[pos+1,n]$\uff1a($n$\u662f\u8fd8\u6ca1\u6709\u52a0\u5165\u8fd9\u4e2a\u5143\u7d20\u65f6\u7684\u5e8f\u5217\u957f\u5ea6\uff09\u7531\u4e8e$x$\u662f\u5f53\u524d\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u5143\u7d20\uff0c\u56e0\u6b64\u4e5f\u65e0\u6cd5\u5f71\u54cd\u4ed6\u4eec\u3002\n- \u65b0\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff08\u4e0d\u59a8\u8bb0\u4e3a$pos'$,\u5904\u7406\u5b8c\u5f71\u54cd\u540e\u6211\u4eec\u518d\u7ef4\u62a4\u5e8f\u5217\uff09\uff1a\u7531\u4e8e$x$\u662f\u5f53\u524d\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u5143\u7d20\uff0c\u56e0\u6b64\u5de6\u534a\u6bb5\u90fd\u80fd\u8f6c\u79fb\u8fc7\u6765\uff0c\u5373\n$$f(pos')=\\max_{i=1}^{pos} f(i)+1$$\n\n\u63a5\u4e0b\u6765\u66b4\u529b\u628a$[pos+1,n]$\u53f3\u79fb\u4e00\u683c\uff0c\u52a0\u5165$f(pos')$\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n^2)$.\n\n\u800c\u4e24\u4e2a\u5173\u952e\u90e8\u5206\u90fd\u662f\u5b8c\u5168\u53ef\u4ee5\u4f18\u5316\u7684\uff1a\u6c42$f(pos'),$\u628a$[pos+1,n]$\u53f3\u79fb\u4e00\u683c\u3002\u6c42$f(pos')$\u7528\u7ebf\u6bb5\u6811\u5f88\u76f4\u89c2\uff0c\u800c\u5f88\u591a\u9898\u89e3\u201c\u628a$[pos+1,n]$\u53f3\u79fb\u4e00\u683c\u201d\u7684\u64cd\u4f5c\u4f7f\u7528\u4e86vector\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u9519\u7684\uff08\u5373\u6700\u574f\u4ecd\u662f$\\mathcal O(n^2)$\uff09\u3002\n\n\u628a$[pos+1,n]$\u53f3\u79fb\u4e00\u683c\uff0c\u8fd9\u79cd\u7ef4\u62a4\u5e8f\u5217\u7684\u7ecf\u5178\u64cd\u4f5c\uff0c\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528Splay\u6216FHQ_Treap\u5728$\\mathcal O(\\log n)$\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u3002\u5e76\u4e14\u7ebf\u6bb5\u6811\u4e5f\u4e0d\u9700\u8981\u4e86\uff0c\u5e73\u8861\u6811\u53ef\u4ee5\u987a\u5e26\u7edf\u8ba1\u6389\uff0c\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u6bcf\u4e2a\u8282\u70b9\uff08\u5047\u8bbe\u7ef4\u62a4$[l,r]$\u8fd9\u4e2a\u533a\u95f4\uff0c\u8282\u70b9\u672c\u8eab\u662f\u4f4d\u7f6e$pos$\uff09\u7ef4\u62a4\u4e24\u4e2a\u989d\u5916\u4fe1\u606f$val=f(pos),maxv=\\max_{k=l}^rf(k)$  \n\u63d2\u5165\u65f6\uff0c\u5c06\u5e8f\u5217\u5206\u5272\uff0c\u5de6\u534a\u6bb5\u548c\u53f3\u534a\u6bb5\u4e0d\u53d8\uff0c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u8868\u793a$pos'$,\u4ee4$val=maxv=\\text{\u5de6\u534a\u6bb5\u7684}maxv+1$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n\\log n)$  \n\u6211\u4f7f\u7528\u4e86FHQ_Treap\u5b9e\u73b0\n```cpp\n/**********/\n#define MAXN 100011\nstruct FHQ_Treap\n{\n\tstruct node\n\t{\n\t\tll son[2],size;\n\t\tll val,maxv,data;\n\t}t[MAXN];\n\tll root,cnt;\n\tll newnode(ll val)//\u65b0\u5efa\u8282\u70b9\n\t{\n\t\t++cnt;\n\t\tt[cnt].son[0]=t[cnt].son[1]=0;\n\t\tt[cnt].val=t[cnt].maxv=val,t[cnt].size=1;\n\t\tt[cnt].data=rand();\n\t\treturn cnt;\n\t}\n\tFHQ_Treap()\n\t{\n\t\tsrand(time(0));\n\t\troot=cnt=0;\n\t}\n\t#define rt t[cur]\n\t#define tl t[rt.son[0]]\n\t#define tr t[rt.son[1]]\n\tvoid pushup(ll cur)//\u5411\u4e0a\u7ef4\u62a4\n\t{\n\t\trt.maxv=max(rt.val,max(tl.maxv,tr.maxv));\n\t\trt.size=tl.size+tr.size+1;\n\t}\n\tvoid split(ll cur,ll k,ll& x,ll& y)//\u5206\u88c2\n\t{\n\t\tif(!cur)\n\t\t{\n\t\t\tx=y=0;return;\n\t\t}\n\t\tif(k<=tl.size)\n\t\t{\n\t\t\ty=cur;\n\t\t\tsplit(rt.son[0],k,x,rt.son[0]);\n\t\t}\n\t\telse x=cur,split(rt.son[1],k-tl.size-1,rt.son[1],y);\n\t\tpushup(cur);\n\t}\n\tll merge(ll x,ll y)//\u5408\u5e76\n\t{\n\t\tif(!x||!y)return max(x,y);\n\t\tif(t[x].data<=t[y].data)\n\t\t{\n\t\t\tt[y].son[0]=merge(x,t[y].son[0]);\n\t\t\tpushup(y);\n\t\t\treturn y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tt[x].son[1]=merge(t[x].son[1],y);\n\t\t\tpushup(x);\n\t\t\treturn x;\n\t\t}\n\t}\n\tll insert(ll pos)//\u63d2\u5165\n\t{\n\t\tll x,y;\n\t\tsplit(root,pos,x,y);\n\t\tll z=newnode(t[x].maxv+1);//\u5904\u7406pos'\n\t\troot=merge(merge(x,z),y);\n\t\treturn t[root].maxv;//\u8fd4\u56de\u5168\u5c40max\n\t}\n}t;\nint main()\n{\n\tll n=read();\n\tfor(ll i=1;i<=n;++i)\n\t{\n\t\tll pos=read();\n\t\tprintf(\"%lld\\n\",t.insert(pos));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1582036555,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "### \u5927\u5bb6\u597d\u50cf\u90fd\u5728\u7528\u5e73\u8861\u6811\u5199\n\n#### \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u4e0d\u7528\u5e73\u8861\u6811 ~~(\u7384\u5b66vector)~~ \u6765\u6a21\u62df\u6784\u5efa\u6570\u5217\u7684\u65b9\u6cd5\n\n###### ~~\u4e3b\u8981\u8fd8\u662f\u6015\u91cd\u590d\u7684\u89e3\u6cd5\u518d\u6b21\u60e8\u906d\u88ab\u62d2~~\n\n\u6b63\u7740\u6765\u4e0d\u597d\u641e~~\u4f3c\u4e4e\u53ea\u80fd\u6a21\u62df~~\u8003\u8651\u5012\u7740\u6765\u641e\uff0c\u663e\u7136\u6700\u540e\u4e00\u4e2a\u6570n\u7684\u6700\u7ec8\u4f4d\u7f6e\u5c31\u662f$x_n+1$ (\u6570\u5217\u7f16\u53f7\u4ece1\u5230n)\n\n\u4ed4\u7ec6\u601d\u8003\u4e0d\u96be\u53d1\u73b0\uff0c\u5982\u679c\u5012\u7740\u6765\uff0c\u5f00\u4e00\u4e2avst[i]\u8bb0\u5f55\u5f53\u524di\u4f4d\u7f6e\u786e\u672a\u786e\u5b9a\u7684\u8bdd\n\n\u7b2ci\u4e2a\u6570\u7684\u4f4d\u5b50\u5c31\u662f\u7b2c$x_i+1$\u4e2a\u6ca1\u6709\u88ab\u786e\u5b9a\u7684\u4f4d\u7f6e\u3002\u53ef\u4ee5\u7406\u89e3\u4e3a\u653e\u7b2c$i$\u4e2a\u6570\u65f6\u628a\u524d$i-1$\u4e2a\u6570\u5728$i$\u540e\u9762\u7684\u5f80\u540e\u9876\u4e86\u4e00\u4e2a\uff0c\u6240\u4ee5\u4ece\u540e\u5f80\u524d\u7b97\u65f6\u5c31\u8981\u52a0\u4e0a$i+1$\u5230$n$\u628a\u5b83\u5f80\u540e\u9876\u7684\u3002\n\n\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4vst[]\u6765\u89e3\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u786e\u5b9a\u4e00\u4e2a\u4f4d\u7f6e\u5c31\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u6807\u4e3a1\uff0c\u7528\u7c7b\u4f3c\u500d\u589e\u7684\u65b9\u5f0f\u6c42\u89e3\u7b2c$x_i+1$\u4e2a\u96f6\u7684\u4f4d\u5b50\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5728\u624b\u63a8\u4e00\u4e0b\u6837\u4f8b\u5e94\u8be5\u5c31\u80fd\u61c2\u3002\n\n\u81f3\u4e8e\u6c42\u89e3\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u56e0\u4e3a\u65b0\u52a0\u5165\u7684\u6570\u5927\u4e8e\u4ee5\u524d\u52a0\u5165\u7684\uff0c\u4e0d\u5f71\u54cd\u524d\u9762\u7684\u7b54\u6848\uff0c\u5c31\u4f9d\u7740\u6700\u540e\u6784\u5efa\u51fa\u7684\u6570\u5217\u6c42\u3002\u8fd8\u662f\u53ef\u4ee5\u7528 ~~\u6743\u503c\uff1f\uff1f~~ \u6811\u72b6\u6570\u7ec4\uff1a\n\n\u4ece\u524d\u5f80\u540e\u626b\u63cf\uff0c\u8bbe\u6784\u5efa\u51fa\u7684\u5e8f\u5217\u4e3ab[]\n\n\u6bcf\u6b21ask\u6bd4b[i]\u5c0f\u7684f[b[j]]\u7684\u6700\u5927\u503c\uff0c+1\u518d\u5c06\u8fd9\u4e2a\u503c\u8d4b\u56deb[i]\u4e0a\u3002\u6811\u72b6\u6570\u7ec4\u53ef\u7ef4\u62a4\u524d\u7f00\u6700\u5927\u503c\u3002\n\n\u8d34\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<iomanip>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\nconst int Maxx=200000,Maxn=200,INF=0x3f3f3f3f,mod=1e9+7;\ninline int read()\n{\n\tint res=0,bj=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')bj|=(ch=='-'),ch=getchar();\n\twhile(ch>='0'&&ch<='9')res=(res<<3)+(res<<1)+(ch^48),ch=getchar();\n\treturn bj?-res:res;\n}\nvoid print(int x)\n{\n\tif(x>9)print(x/10);\n\tputchar(x%10^48);\n}\ninline void printnum(int x,char ch)\n{\n\tif(x<0)putchar('-'),x=-x;\n\tprint(x),putchar(ch);\n}\nint n,a[Maxx],b[Maxx],c[Maxx],ans[Maxx],Log[Maxx];\ninline void add(int x,int val)\n{for(int i=x;i<=n;i+=i&(-i))c[i]+=val;}\ninline int ask(int x,int lim)\n{\n\tint res=0,sum=0;\n\tfor(int i=Log[x+lim];~i;i--)\n\tif(sum+(1<<i)-c[res+(1<<i)]<x)res+=1<<i,sum+=(1<<i)-c[res];\n\treturn res+1;\n}\ninline void change(int x,int val)\n{for(int i=x;i<=n;i+=i&(-i))c[i]=max(c[i],val);}\ninline int query(int x)\n{\n\tint maxx=0;\n\tfor(int i=x;i;i-=i&(-i))maxx=max(maxx,c[i]);\n\treturn maxx;\n}\nint main()\n{\n\tn=read();Log[0]=-1;\n\tfor(int i=1;i<=n;i++)a[i]=read(),Log[i]=Log[i>>1]+1;\n\tfor(int i=n;i>=1;i--)a[i]=ask(a[i]+1,n-i),add(a[i],1),b[a[i]]=i;\n\tmemset(c,0,sizeof(c));\n\tfor(int i=1;i<=n;i++)ans[b[i]]=query(b[i])+1,change(b[i],ans[b[i]]);\n\tfor(int i=1;i<=n;i++)printnum(ans[i]=max(ans[i],ans[i-1]),'\\n');\n\treturn 0;\n}\n/*\n7\n0 0 2 1 2 5 1\n1\n1\n2\n2\n3\n4\n4\n*/\n\n```\n",
        "postTime": 1566300311,
        "uid": 89561,
        "name": "c2020HXW",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u9898\u76ee\u53cb\u94fe\uff1a[Link](https://www.luogu.org/problemnew/show/P4309)\n\n## \u52a8\u6001\u7ef4\u62a4LIS\uff1f\n\n\u89c2\u5bdf\u9898\u76ee\uff1a\u5728\u7b2c i \u8f6e\u64cd\u4f5c\u65f6\uff0c\u5c06\u6570\u5b57 i \u63d2\u5165\n\n   \u63d2\u5165\u7684\u6570\u5b57\u662f\u5f53\u524d\u6700\u5927\u7684\n   \n   \u5982\u679c\u7b54\u6848\u4e0e\u4e0a\u6b21\u4e0d\u540c\uff0c\u65b0\u7684LIS\u5fc5\u4ee5 i \u7ed3\u5c3e\n   \n   \u4ee5 i \u7ed3\u5c3e\u7684LIS\u65e0\u6cd5\u518d\u4f38\u957f\uff08\u56e0\u4e3a\u6bd4 i \u5c0f\u7684\u90fd\u63d2\u5165\u5b8c\u4e86\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a0\u5165 $i+1$ \u5230 $n$ \u7684\u6570\uff0c\u4e0d\u4f1a\u5bf9\u4ee5 $i$ \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u6709\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u53bb\u52a8\u6001\u5730\u7ef4\u62a4LIS\u7684\u5927\u5c0f\uff0c\u53ea\u9700\u8981\u6700\u540e\u628a\u603b\u7684\u5e8f\u5217\u505a\u4e00\u6b21LIS\u5c31\u597d\u4e86\u3002\u7136\u540e\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u8f93\u51fa\uff0c\u53ea\u9700\u8981\u6c42\u5f97\u5206\u522b\u4ee5 $1$ \u5230 $i$ \u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n## \u6c42\u89e3LIS\n\n\u9762\u5bf91e5\u7684\u6570\u636e\uff0cO($n^2$)\u7684\u5927\u66b4\u529b\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u6211\u4eec\u8003\u8651\u6570\u636e\u7ed3\u6784\u4f18\u5316\u3002\n\n\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u6d41\u7a0b\uff1a\n\n   1.\u5bf9\u539f\u6570\u5217\u4ee5\u503c\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u8bb0\u5f55\u539f\u6765\u7684\u4f4d\u7f6e\uff08\u5b58\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\uff09\n   \n   2.\u6392\u5b8c\u5e8f\u540e\uff0c\u6570\u5217\u7684\u503c\u663e\u7136\u662f1~n\u4f9d\u6b21\u9012\u589e\uff0c\u6211\u4eec\u4e0d\u59a8\u679a\u4e3e1~n\u7684\u503c\u3002\n   \n   \u5bf9\u4e8e\u6bcf\u4e00\u4e2a i\uff0c\u627e\u5230\u5b83\u539f\u6765\u7684\u4f4d\u7f6e\u8bb0\u4e3ap\uff0c\u5219\u7528\u6811\u72b6\u6570\u7ec4\u627e\u5230\u5728\u4f4d\u7f6ep\u4e4b\u524d\u7684\u6700\u5927\u503c\uff0c\u4f5c\u4e3a\u66f4\u65b0\u7684\u6765\u6e90\u3002\n       \n   3.\u7b97\u5b8c\u540e\uff0c\u628a$i$\u8fd9\u4e2a\u503c\u52a0\u5230\u6811\u72b6\u6570\u7ec4$p$\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u91cd\u590d\u6267\u884c2\n\n\u4ee3\u7801\uff1a\n```cpp\ninline int lowbit(int x){return x&(-x);}\ninline void add(int x,int val){while(x<=n){c[x]=max(c[x],val);x+=lowbit(x);}}\ninline int query(int x){int ret=0;while(x){ret=max(ret,c[x]);x-=lowbit(x);}return ret;}\n\nfor(int i=1;i<=n;i++) a[i].num=i;//\u539f\u4f4d\u7f6e\nsort(a+1,a+1+n,Cmp);//\u6392\u5e8f\nint ans=0;\nfor(int i=1;i<=n;i++){\n\tint maxx=query(a[i].num);//\u67e5\u627e\u4f4d\u7f6e\u4e3aa[i].num\u524d\u7684\u6700\u5927\u503c\n\tadd(a[i].num,++maxx);//\u628a\u5f53\u524d\u7684\u6570\u52a0\u5165\u6811\u72b6\u6570\u7ec4\n\tans=max(ans,maxx);//\u53d6\u6700\u5927\u503c\n\tprintf(\"%d\\n\",ans);//\u8f93\u51fa\u5f53\u524d\u6700\u5927\u503c\n}\n```\n\n## \u6a21\u62df\u63d2\u5165\u64cd\u4f5c\n   \u6211\u4eec\u91c7\u7528Splay\u6765\u5b9e\u73b0\u6b64\u90e8\u5206\u7684\u529f\u80fd\n   \n   \u5728\u8fd9\u4e4b\u524d\u8bf7\u5404\u4f4d\u7cbe\u901a[\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3391)\n   \n   \u9996\u5148\u63d2\u5165\u4e24\u4e2a\u6781\u5927\u6781\u5c0f\u7684\u6570\uff08\u4e3a\u4e86\u907f\u514d\u7384\u5b66\u6570\u7ec4\u8d8a\u754c\uff09\n   \n   \u5bf9\u4e8e\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\uff0c\u4f8b\u5982\u628aval\u63d2\u5230x\u4f4d\u7f6e\u7684\u540e\u9762\uff0c\u5c31\u5148\u628ax+1\u4f4d\u7f6e\u7684\u6570\u65cb\u8f6c\u5230\u6839\u8282\u70b9\uff0c\u518d\u628ax+2\u4f4d\u7f6e\u7684\u6570\u65cb\u8f6c\u5230\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u4f60\u53ea\u9700\u8981\u628a\u6570\u52a0\u5230\u6839\u8282\u70b9\u7684\u53f3\u513f\u5b50\u7684\u5de6\u513f\u5b50\uff08\u4e0d\u61c2\u5f97\u53ef\u4ee5\u6a21\u62df\u4e00\u4e0b\uff09\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u63d2\u5165\u64cd\u4f5c\uff08\u5176\u5b9e\u5c31\u662f\u63d0\u53d6\u533a\u95f4\u64cd\u4f5c\uff09\n\n## \u5b8c\u6574\u4ee3\u7801\n\u770b\u8d77\u6765\u6709\u4e11\uff0c\u5c06\u5c31\u4e00\u4e0b\u5427\n```cpp\n#include<stdio.h>\n#include<algorithm>\nusing namespace std;\n#define rint register int\n#define INF 0x3f3f3f3f\n#define N 100007\n\ntemplate<class T>\ninline void read(T &x){\n    T flag=1;x=0;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')flag=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-48;c=getchar();}\n    x*=flag;\n}\n\nstruct Splay{\n    int val,fa,s[2],size;\n}t[N];\nstruct Node{\n\tint num,val;\n}a[N];\n\nint c[N];\nint root,T,n=0,cnt=0,m,num=0,f[N];\n\ninline int max(int x,int y){return x>y? x:y;}\ninline bool Cmp(const Node a,const Node b){return a.val<b.val;}\ninline void update(int p){t[p].size=t[t[p].s[0]].size+t[t[p].s[1]].size+1;}\ninline int wich(int x){return t[t[x].fa].s[0]==x? 0:1;}\ninline void connect(int x,int y,int f){t[x].fa=y;t[y].s[f]=x;}\ninline int lowbit(int x){return x&(-x);}\ninline void add(int x,int val){while(x<=n){c[x]=max(c[x],val);x+=lowbit(x);}}\ninline int query(int x){int ret=0;while(x){ret=max(ret,c[x]);x-=lowbit(x);}return ret;}\n\ninline void rotate(int x){\n    int y=t[x].fa,rt=t[y].fa;\n    int ys=wich(x),rts=wich(y);\n    connect(t[x].s[ys^1],y,ys);\n    connect(y,x,ys^1);connect(x,rt,rts);\n    update(y);update(x);\n}\n\ninline void rota(int p){\n    if(wich(p)==wich(t[p].fa)){rotate(t[p].fa);rotate(p);}\n    else{rotate(p);rotate(p);}\n}\n\ninline void splay(int p,int to){\n\tif(!p) return;\n    if(p==to) return;\n    if(to==root) root=p;\n    while(1){\n        if(t[p].fa==to){rotate(p);return;}\n        if(t[t[p].fa].fa==to){rota(p);return;}\n        rota(p);\n    }\n}\n\ninline int find(int x){\n\trint p=root;\n\twhile(p){\n\t\tif(x<=t[t[p].s[0]].size) p=t[p].s[0];\n        else if(x==t[t[p].s[0]].size+1) return p;\n        else{x-=t[t[p].s[0]].size+1;p=t[p].s[1];}\n\t}\n\treturn 0;\n}\n\ninline void insert(int val,int k){\n\tint l=find(k+1),r=find(k+2);\n\tsplay(l,root);\n\tsplay(r,t[root].s[1]);\n\tt[++cnt]=(Splay){val,t[root].s[1],{0,0},1};\n\tt[t[root].s[1]].s[0]=cnt;\n\tupdate(t[root].s[1]);update(root);\n\tsplay(cnt,root);\n}\n\ninline void dfs(int p){\n\tif(t[p].s[0]) dfs(t[p].s[0]);\n\tif(t[p].val!=INF&&t[p].val!=-INF)\n\t\ta[++num].val=t[p].val;\n\tif(t[p].s[1]) dfs(t[p].s[1]);\n}\n\nint main(){\n    t[++cnt]=(Splay){-INF,0,{0,2},2};\n    t[++cnt]=(Splay){INF,1,{0,0},1};\n    read(n);rint x;\n    root=1;\n    for(int i=1;i<=n;i++)\n    \tread(x),insert(i,x);\n\tdfs(root);\n\tfor(int i=1;i<=n;i++) a[i].num=i;\n\tsort(a+1,a+1+n,Cmp);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint maxx=query(a[i].num);\n\t\tadd(a[i].num,++maxx);\n\t\tans=max(ans,maxx);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```",
        "postTime": 1562764142,
        "uid": 83337,
        "name": "wwlw",
        "ccfLevel": 7,
        "title": "[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P4309)\n\n\u8bbe$f_i$\u8868\u793a\u4ee5$i$\u4e3a\u7ed3\u5c3e\u7684$LIS$\uff0c**\u63d2\u5165\u540e**\u7684\u4f4d\u7f6e\u4e3a$pos$\u3002\n\n\u7531\u4e8e\u6bcf\u6b21\u90fd\u63d2\u5165\u4e00\u4e2a\u6bd4\u4e4b\u524d\u90fd\u5927\u7684\u6570\uff0c\u56e0\u6b64\u5982\u679c\u7b54\u6848\u53d8\u6362\uff0c\u5fc5\u5b9a\u4e3a\u4ee5\u65b0\u52a0\u5165\u7684\u6570\u4f4d\u7ed3\u5c3e\u7684$LIS$\uff0c\u5373$f_{pos}$\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u5feb\u901f\u6c42\u51fa$f_{pos}$\uff1a  \n\u6c42\u51fa$[1,pos-1]$\u4e2d$f$\u7684\u6700\u5927\u503c$maxx$\uff0c\u5219$f_{pos}=maxx+1$\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8981\u652f\u6301\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u8be2\u95ee\u533a\u95f4\u6700\u5927\u503c\uff0c\u7528$Splay$\u5373\u53ef\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100010;\nint n,ans,root,tot;\nint fa[maxn],val[maxn],maxx[maxn],size[maxn];\nint ch[maxn][2];\ninline void up(int x)\n{\n\tsize[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n\tmaxx[x]=max(val[x],max(maxx[ch[x][0]],maxx[ch[x][1]]));\n}\ninline int get(int x){return ch[fa[x]][1]==x;}\ninline void rotate(int x)\n{\n\tint y=fa[x],z=fa[y],k=get(x),w=ch[x][k^1];\n\tif(z)ch[z][get(y)]=x;ch[x][k^1]=y,ch[y][k]=w;\n\tif(w)fa[w]=y;fa[y]=x;fa[x]=z;\n\tup(y),up(x);\n}\ninline void splay(int x,int goal=0)\n{\n\twhile(fa[x]!=goal)\n\t{\n\t\tint y=fa[x];\n\t\tif(fa[y]!=goal)rotate(get(x)==get(y)?y:x);\n\t\trotate(x);\n\t}\n\tif(!goal)root=x;\n}\ninline int find(int k)\n{\n\tint now=root;\n\twhile(2333)\n\t{\n\t\tif(ch[now][0]&&size[ch[now][0]]>=k)now=ch[now][0];\n\t\telse if(size[ch[now][0]]+1<k)k-=size[ch[now][0]]+1,now=ch[now][1];\n\t\telse return now;\n\t}\n\treturn 2333;\n}\ninline int New()\n{\n\tint x=++tot;\n\tsize[x]=val[x]=maxx[x]=1;\n\treturn x;\n}\ninline void insert(int pos)\n{\n\tint x=find(pos);\n\tint y=find(pos+1);\n\tsplay(x,0);splay(y,x);\n\tint now=New();\n\tch[y][0]=now;fa[now]=y;\n\tup(y),up(x);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\troot=New();ch[root][1]=New();fa[ch[root][1]]=root;\n\tval[1]=val[2]=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint pos;scanf(\"%d\",&pos);\n\t\tinsert(pos+1);splay(find(pos+2));\n\t\tans=max(ans,val[root]=max(val[root],maxx[ch[root][0]]+1));\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1579425282,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P4309 [TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217(Splay)"
    },
    {
        "content": "### \u524d\u7f6e\u829d\u58eb\n\n\u7ebf\u6bb5\u6811\u3001DP\uff08LIS\uff09\n\n\u539f\u9898\u76ee;[\u70b9\u6b64\u4f20\u9001](https://www.luogu.org/problem/P4309)\n\n### \u601d\u8def\n\n\u6211\u662f\u505a\u5b8c[P4314 CPU\u76d1\u63a7](https://www.luogu.org/problem/P4314)\u8fc7\u6765\u7684\uff0c\u5bf9\u8fd9\u9053\u9898\u662f\u7684\u601d\u8def\u5177\u6709\u542f\u53d1\u4f5c\u7528\n\n\u9898\u76ee\u5c31\u662f\u8981\u6c42\u5728\u4e0d\u65ad\u5f80\u5e8f\u5217\u4e2d\u6dfb\u52a0\u5143\u7d20\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6c42\u51faLIS\n\n**Step 1**\n\n\u60f3\u60f3\u6734\u7d20\u505a\u6cd5\uff1a\n\n\u5f00\u4e00\u4e2avector\u6a21\u62df\u63d2\u5165\u8fc7\u7a0b\uff0c\u7136\u540e\u5728vector\u4e2d\u8dd1LIS\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$\uff0c\u9884\u8ba1\u5f97\u5206$?$pts\n\n**Step 2**\n\nLIS\u7684\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$\\boxed{dp[i]=max(dp[j])+1,d[i]>d[j]}$\n\n\u5176\u4e2d$d[i]$\u8868\u793a\u7b2ci\u4e2a\u5143\u7d20\uff0c$dp[i]$\u8868\u793a\u4ee5\u7b2ci\u4e2a\u5143\u7d20\u4f5c\u4e3a\u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u90a3\u4e2a\u7684\u957f\u5ea6\uff08\u6709\u70b9\u7ed5\u3002\u3002\uff09\n\n\u60f3\u4e00\u60f3\u6bcf\u6b21\u6dfb\u52a0\u5bf9\u4e8e\u7b54\u6848\u6709\u4ec0\u4e48\u5f71\u54cd\n\n\u5047\u8bbe\u5c06\u76ee\u524d\u7684\u5143\u7d20(\u8bb0\u4f5c$t$\uff0c\u90a3\u4e48\u6b64\u65f6\u5e8f\u5217\u4e2d\u6709$t-1$\u4e2a\u5143\u7d20)\u63d2\u5165\u81f3$i$\u5904\uff08\u5b83\u5c31\u53d8\u6210\u4e86\u5e8f\u5217\u4e2d\u7b2c$i+1$\u4e2a\u5143\u7d20\uff09\n\n\u5bf9\u4e8e\u5b83\u524d\u9762\u7684\u5143\u7d20\uff08$1\\rightarrow i$\uff09\uff0c\u7531\u4e8e\u5b50\u5e8f\u5217\u5df2\u7ecf\u7ec8\u6b62\uff0c\u5bf9\u4e8e\u4ed6\u4eec\u7684$dp$\u6ca1\u6709\u8d21\u732e\n\n\u5bf9\u4e8e\u5b83\u540e\u9762\u7684\u5143\u7d20\uff08$i+2\\rightarrow t$\uff09\uff0c\u7531\u4e8e\u8fd9\u4e9b\u5143\u7d20\u90fd\u5c0f\u4e8et\uff08\u8fd9\u662f\u56e0\u4e3a\u9898\u76ee\u8bf4\u4e86**\u5143\u7d20\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u63d2\u5165**\uff09\uff0c\u65e0\u6cd5\u4f5c\u4e3a\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u4e00\u90e8\u5206\uff0c\u5bf9\u4e8e\u4ed6\u4eec\u7684$dp$\u4e5f\u6ca1\u6709\u8d21\u732e\n\n\u5bf9\u4e8e\u5b83\u81ea\u8eab\uff0c\u7531\u4e8e\u5b83\u662f\u5927\u4e8e\u5b83\u524d\u9762\u7684\u6240\u6709\u5143\u7d20\u7684\uff0c\u6240\u4ee5\u6309\u7167\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6709\n\n$dp[i+1]=max(dp[j])+1,j<=i$\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u67e5\u8be2\u533a\u95f4$[1,i]$\u7684\u6700\u5927\u503c\uff0c\u5e76\u5c06dp[i+1]\u4fee\u6539\u4e3a\u8fd9\u4e2a\u503c\uff0c\u53ea\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5c31\u884c\u4e86\n\n\u4f46\u662f\u7ec6\u5fc3\u7684\u5c0f\u4f19\u4f34\u4eec\u4e00\u5b9a\u53d1\u73b0\u4e86\u95ee\u9898\uff1a\n\n\u5f53\u6211\u4eec\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u63d2\u5165\u5143\u7d20\u65f6\uff0c\u5b83\u540e\u9762\u7684\u5143\u7d20\u90fd\u540e\u79fb\u4e86\u4e00\u4f4d\n\n\u7531\u4e8e\u63d2\u5165\u65f6\u53ea\u5bf9\u81ea\u5df1\u6709\u8d21\u732e\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u591f\u77e5\u9053\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u7ec8\u4f4d\u7f6e\u5c31\u597d\u4e86\uff08\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\n\n\u6240\u4ee5\uff0c\u7528vector\u6a21\u62df\uff0c\u8dd1\u51fa\u6bcf\u4e2a\u5143\u7d20\u5728\u6700\u540e\u7684\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e$p[i]$\n\n\u5bf9\u4e8e\u7b2ci\u4e2a\u8be2\u95ee\uff0c\u9996\u5148\u53e6$val[p[i]]=max(val[j]),j\\in [1,p[i])$\n\n\u7136\u540e\u8f93\u51fa$max(val[i]),i\\in [1,n]$\n\n\u53ea\u6709\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\u548c\u5355\u70b9\u4fee\u6539\uff0c\u53ea\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4max\u503c\u5c31\u884c\u4e86\uff0c\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\n\n### \u4ee3\u7801\n```cpp\n#include <vector>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#define N 100001\n#define rnt register int\nusing namespace std;\nbool tak[N];\nvector <int> V;\nint n,p[N],d[N];\nstruct tree{int l,r,maxn;}t[N*4]; \nvoid build(int id,int l,int r){\n\tt[id].l=l,t[id].r=r;\n\tif(l==r) return ;\n\tint mid=(l+r)>>1;\n\tbuild(id<<1,l,mid);\n\tbuild(id<<1|1,mid+1,r);\n}\nint query(int id,int l,int r){\n\tif(t[id].l==l && t[id].r==r) return t[id].maxn;\n\tint mid=(t[id].l+t[id].r)>>1;\n\tif(r<=mid) return query(id<<1,l,r);\n\telse if(l>mid) return query(id<<1|1,l,r);\n\telse return max(query(id<<1,l,mid),query(id<<1|1,mid+1,r));\n}\nvoid change(int id,int pos,int val){\n\tif(t[id].l==t[id].r){\n\t\tt[id].maxn=val;\n\t\treturn ;\n\t}\n\tint mid=(t[id].l+t[id].r)>>1;\n\tif(pos<=mid) change(id<<1,pos,val);\n\telse change(id<<1|1,pos,val);\n\tt[id].maxn=max(t[id<<1].maxn,t[id<<1|1].maxn);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(rnt i=1;i<=n;i=-~i) scanf(\"%d\",&p[i]),V.insert(V.begin()+p[i],i);\n\tfor(rnt i=0;i<n;i=-~i) p[V[i]]=i+1;\n\tbuild(1,1,n);\n\tfor(rnt i=1;i<=n;i=-~i){\n\t\tif(p[i]!=1) change(1,p[i],query(1,1,p[i]-1)+1);\n\t\telse change(1,p[i],1);\n\t\tprintf(\"%d\\n\",query(1,1,n));\n\t}\n\treturn 0;\n}\n```\n\n### \u540e\u8bb0\n\n\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u9053\u9898\u80fd\u8bc4\u4e0a\u7d2b\u9898\u5b8c\u5168\u662f\u7531\u4e8e\u601d\u7ef4\uff0c\u4ee3\u7801\u6bd4\u8f83\u77ed\uff08\u76f8\u5bf9\u522b\u7684\u7ebf\u6bb5\u6811\u9898\u6765\u8bf4\uff09\uff0c\u591a\u505a\u51e0\u9053\u5c31\u6709\u611f\u89c9\u4e86\n\n\u6700\u540e\uff1a\n\n[![](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2921431843,3149119026&fm=26&gp=0.jpg)](https://www.luogu.org/blog/oneJURUO/)",
        "postTime": 1570625703,
        "uid": 118382,
        "name": "torque",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u8003\u8651dp\uff0c\u53d1\u73b0\u8f93\u5165\u9012\u589e\uff0c\n\n\u5219$f[i]=max(f[i-1],max(f[pos[1\u2026pos[i]])+1)$\n\n\u7b80\u800c\u8a00\u4e4b\uff0c$i$\u7684\u7b54\u6848\u7b49\u4e8e$i-1$\u7684\u7b54\u6848\u548c\u4f4d\u7f6e\u5728$i$\u524d\u9762\u7684\u6570\u7684\u7b54\u6848\u7684\u6700\u5927\u503c\u52a01\u7684\u6700\u5927\u503c\u3002\n\n\u524d\u7f00\u6700\u5927\u503c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u4f46\u662f\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u597d\u7ef4\u62a4\u3002\n\n\u8003\u8651\u5728\u6700\u7ec8\u6570\u5217\u4e2d\u6bcf\u7ec4\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\n\n\u6240\u4ee5\u5148\u6c42\u51fa\u6bcf\u4e2a\u6570\u5728\u6700\u7ec8\u6570\u5217\u4e2d\u7684\u4f4d\u7f6e\u3002\n\n\u8003\u8651\u4ece\u540e\u5411\u524d\u6c42\u3002\n\n\u7b2c$n$\u4e2a\u6570\u7684\u4f4d\u7f6e\u5c31\u662f$a_n$\u3002\n\n\u8003\u8651\u7b2c$i$\u4e2a\u6570\u7684\u4f4d\u7f6e\uff0c$a_i$\u4ee3\u8868\u5b83\u5927\u4e8e\u7b49\u4e8e\u524d\u9762\u7684$a_i$\u4e2a\u6570\u3002\n\n\u4e00\u5f00\u59cb\u7b2c$pos$\u4f4d\u7f6e\u90fd\u5927\u4e8e\u7b49\u4e8e$pos$\u4e2a\u6570\uff0c\u52a0\u5165\u7b2c$i$\u4e2a\u6570\u540e\uff0c\u56e0\u4e3a\u5f80\u540e\u52a0\u7684\u6570\u90fd\u6bd4$i$\u5c0f\uff0c\u6240\u4ee5\u4ece$pos_i$\u5230$n$\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u503c\u90fd\u8981\u51cf\u4e00\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u5e8f\u5217\u662f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u7684\u3002\n\n\u5e76\u4e14\u7531\u4e8e\u6b64\u5e8f\u5217\u9012\u589e\uff0c\u7ef4\u62a4\u533a\u95f4$max$\u53ea\u9700$tr[h]=tr[h * 2+1]$\uff0c\u53ea\u662f\u6ce8\u610f\u67e5\u8be2\u65f6\u53d6\u6700\u5de6\u7aef\u7684\u89e3\u3002\n\n\u590d\u6742\u5ea6\u662f$O(nlogn)$\n\n\u4ee3\u7801\u653e\u4e0a\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+5;\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n\treturn x*f;\n}\nint n,a[maxn],pos[maxn],ans[maxn];\nint tr[maxn<<2],lazy[maxn<<2],cmax[maxn];\ninline void build(int h,int l,int r){\n\ttr[h]=r;if(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(h<<1,l,mid);\n\tbuild(h<<1|1,mid+1,r);\n}\ninline void pushup(int h,int z){\n\ttr[h]-=z;lazy[h]+=z;\n}\ninline void pushdown(int h){\n\tif(!lazy[h])return;\n\tpushup(h<<1,lazy[h]);\n\tpushup(h<<1|1,lazy[h]);\n\tlazy[h]=0;\n}\ninline void update(int h,int l,int r,int x,int y,int z){\n\tif(l>y||r<x)return;\n\tif(l>=x&&r<=y){\n\t\tpushup(h,z);\n\t\treturn;\n\t}\n\tpushdown(h);\n\tint mid=(l+r)>>1;\n\tupdate(h<<1,l,mid,x,y,z);\n\tupdate(h<<1|1,mid+1,r,x,y,z);\n\ttr[h]=tr[h<<1|1];\n}\ninline int query(int h,int l,int r,int x){\n\tif(l==r)return l;\n\tpushdown(h);\n\tint mid=(l+r)>>1;\n\tif(tr[h<<1]>=x)return query(h<<1,l,mid,x);\n\telse return query(h<<1|1,mid+1,r,x);\n}\ninline int query_max(int x){\n\tint sum=0;\n\tfor(int i=x;i;i-=i&(-i))sum=max(sum,cmax[i]);\n\treturn sum;\n}\ninline void update_max(int x,int y){\n\tfor(int i=x;i<=n;i+=i&(-i))cmax[i]=max(cmax[i],y);\n}\nint main(){\n\tn=read();\n\tfor(int i=1;i<=n;i++)\n\t\ta[i]=read()+1;\n\tbuild(1,1,n);\n   \t//\u7ed9\u6bcf\u4e2a\u4f4d\u7f6e\u8d4b\u503c\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u3002\n\tfor(int i=n;i>=1;i--){\n\t\tpos[i]=query(1,1,n,a[i]);\n        \t//pos[i]\u4e3a\u533a\u95f4\u4e0a\u7b2c\u4e00\u4e2a\u503c\u4e3aa[i]\u7684\u4f4d\u7f6e\u3002\n\t\tupdate(1,1,n,pos[i],n,1);\n        \t//i\u5bf9pos[i]\u4ee5\u540e\u7684\u4f4d\u7f6e\u4ea7\u751f\u5f71\u54cd\u3002\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint tmp=query_max(pos[i])+1;\n\t\tupdate_max(pos[i],tmp);\n\t\tans[i]=max(ans[i-1],tmp);\n\t\tprintf(\"%d\\n\",ans[i]); \n\t} \n\treturn 0;\n}\n```",
        "postTime": 1593517230,
        "uid": 140876,
        "name": "syzf2222",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "### splay \u5927\u6cd5\u597d\uff0c\u8fd9\u662f\u4e00\u7bc7\u5173\u4e8esplay\u505a\u6cd5\u7684\u9898\u89e3\n**\u4ec0\u4e48\uff1f\u4f60\u4e0d\u4f1asplay\uff0c[\u70b9\u8fd9\u91cc](https://www.cnblogs.com/cjyyb/p/7499020.html)**\n\n\u5728\u539f\u6765\u7684splay\u6570\u7ec4\u91cc\uff0c\u589e\u52a0**\u4e0b\u6807 lis \u548c\u5e76\u6539\u53d8\u4e0b\u6807 val\u7684\u542b\u4e49** \n\n**t[x].lis** \u8868\u793a**\u4ee5 x \u4e3a\u6839\u8282\u70b9\u7684 splay \u6811\u4e2d\u7684\u6700\u5927\u4e0a\u5347\u5b50\u5e8f\u5217**,\u521d\u503c\u8d4b\u4e3a1;\n\n**t[x].val** \u53d8\u4e3a\u8868\u793a\u539f\u5e8f\u5217\u4e2d **\u4ee5 x \u4e3a\u524d\u7f00\u7684\u6700\u5927\u4e0a\u5347\u5b50\u5e8f\u5217**,\u521d\u503c\u8d4b\u4e3a 1;\n\n\u56e0\u4e3a\u9898\u76ee\u4e2d\u6570\u636e\u662f\u9012\u589e\u63d2\u5165\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528**\u4e00\u4e2a\u53d8\u91cf ans \u8bb0\u5f55\u6574\u4e2a\u5e8f\u5217\u7684\u6700\u5927\u503c,**\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u63d2\u5165\u7684\u503c,\u6211\u4eec\u8fdb\u884c\u5982\u4e0b\u66f4\u65b0\n>ans = max(ans , t [now].val = t [ t [now].ch[0] ].lis + 1)\n\n\u8fd9\u6837\u65e2\u66f4\u65b0\u4e86 val ,\u4e5f\u66f4\u65b0\u4e86ans;\n\n\u6bcf\u6b21\u63d2\u5165\u540e\u8f93\u51fa ans \n\n\u5176\u4ed6\u5730\u65b9\u5c31\u662f\u6807\u51c6\u7684splay\u6a21\u677f\u4e86\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0ct[x].lis **\u66f4\u65b0\u662f\u901a\u8fc7\n\u5de6\u53f3\u5b50\u6811\u7684 lis \u548c\u81ea\u8eab\u7684 val \u6765\u8fdb\u884c\u66f4\u65b0**\u7684\uff08\u56e0\u4e3a\u6bcf\u6b21\u66f4\u65b0 ans \u503c\u65f6\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u80fd\u66f4\u65b0 val \u503c\uff0c\u6ca1\u6709\u5bf9 lis \u8fdb\u884c\u4fee\u6539\uff09\n\n\u4ee3\u7801\uff0c ~~\u53ef\u4ee5\u6284~~\n\n```cpp\n#include<stdio.h>\n#include<cstring>\n#include<iostream>\n#define maxn 100005\nusing namespace std;\nstruct node\n{\n    int ch[2],fa,lis,val,size;\n}t[maxn];\nint n,tot,root,ans;\n\nint read()\n{\n    int num,sign=1;\n    char c;\n    while((c=getchar())<'0'||c>'9')\n        if(c=='-')sign=-1;\n    num=c-'0';\n    while((c=getchar())>='0'&&c<='9')\n        num=num*10+c-'0';\n    return num*sign;\n}\n\ninline int newnode()\n{\n    ++tot;\n    t[tot].lis=t[tot].val=t[tot].size=1;\n    return tot;\n}\n\ninline void update(int x)\n{\n    t[x].size=t[t[x].ch[0]].size+t[t[x].ch[1]].size+1;\n    t[x].lis=max(t[x].val,max(t[t[x].ch[1]].lis,t[t[x].ch[0]].lis));\n}\n\ninline void rotate(int x)\n{\n    int y=t[x].fa;\n    int z=t[y].fa;\n    int k=t[y].ch[1]==x;\n    t[y].ch[k]=t[x].ch[k^1];\n    t[t[x].ch[k^1]].fa=y;\n    t[x].ch[k^1]=y;\n    t[x].fa=z;\n    t[y].fa=x;\n    t[z].ch[t[z].ch[1]==y]=x;\n    update(y),update(x);\n}\n\ninline void splay(int x,int goal)\n{\n    while(t[x].fa!=goal)\n    {\n        int y=t[x].fa;\n        int z=t[y].fa;\n        if(z!=goal)\n            rotate((t[z].ch[1]==y)^(t[y].ch[1]==x)?x:y);\n        rotate(x);\n    }\n    if(!goal)\n        root=x;\n}\n\ninline int find(int x)\n{\n    int u=root;\n    while(true)\n    {\n        if(x>t[t[u].ch[0]].size+1)\n            x-=t[t[u].ch[0]].size+1,u=t[u].ch[1];\n        else\n            if(x==t[t[u].ch[0]].size+1)\n                return u;\n            else\n                u=t[u].ch[0];\n    }\n}\n\ninline int insert(int pos)\n{\n    int l=find(pos);\n    int r=find(pos+1);\n    splay(l,0);splay(r,l);\n    t[r].ch[0]=newnode();\n    t[t[r].ch[0]].fa=r;\n    update(r),update(l);\n    return t[r].ch[0];\n}\n\nint main()\n{\n    n=read();\n    root=newnode(),t[1].ch[1]=newnode();\n    t[2].fa=1,t[1].val=t[2].val=0;\n    for(register int pos,i=1;i<=n;++i)\n    {\n        pos=read();\n        int now=insert(pos+1);\n        splay(now,0);\n        ans=max(ans,t[now].val=max(t[now].val,t[t[now].ch[0]].lis+1));\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1585319731,
        "uid": 224229,
        "name": "Caicz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u770b\u5230\u597d\u591a\u9898\u89e3\u90fd\u7528\u7684\u79bb\u7ebf\u7b97\u6cd5\uff0c\u4ec0\u4e48\u5012\u5e8f\u5904\u7406\u554a\uff0c\u8fd8\u6709\u7684\u79bb\u7ebf+ \u5e73\u8861\u6811+\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u6216\u5355\u8c03\u961f\u5217~~\u849f\u84bb\u89c9\u5f97\u6ca1\u5fc5\u8981\u8fd9\u4e48\u9ebb\u70e6~~\n\n\n------------\n\n\n**\u4ee5\u4e0a\u5168\u662f\u778e\u626f\uff0c\u4e0b\u9762\u8fdb\u5165\u6b63\u9898**\n\n**\u524d\u7f6e\u77e5\u8bc6**\n\n- \u5e73\u8861\u6811\uff08\u849f\u84bb\u8fd9\u91cc\u7528\u7684\u5e73\u8861\u6811\u662f\u65e0\u65cbtreap\uff0c\u4e0d\u77e5\u9053\u5176\u5b83\u5e73\u8861\u6811\u662f\u4e0d\u662f\u53ef\u4ee5\n- \u8d21\u732e\u601d\u60f3\n- \u4f1a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7b97\u6cd5\n- \u6ca1\u4e86\n\n**\u601d\u8def**\n\n\u8bbeF[x]\u8868\u793a\u7684\u662f\u4ee5x\u4f4d\u7f6e\u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\n\n\u5f88\u591a\u5927\u4f6c\u90fd\u89e3\u91ca\u5f88\u6e05\u695a\u4e86\uff0c\u7531\u4e8e\u52a0\u5165\u7684k\u662f\u9012\u589e\u7684\uff0c\u6240\u4ee5\u5728\u52a0\u5165\u4e00\u4e2ak\u540e\uff0c\u4ed6\u52bf\u5fc5\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u7684F[x]\u53ea\u662f\u5728F\u4e2d\u63d2\u5165\u4e86\u4e00\u4e2a\u65b0\u503cy\uff0cy\u4e3a\u4ee5\u5f53\u524d\u7684k\u6240\u5728\u4f4d\u7f6e\u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u800cy=maxF[  j ]+1\uff08j\u4e3ay\u6240\u5728\u4f4d\u7f6e\u524d\u7684\u4f4d\u7f6e)\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4ee5\u6392\u540d\u5206\u88c2\u7684FHQtreap\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u7684\u63d2\u5165y\u503c\uff0c\u800c\u5b83\u8981\u6c42y\u4f4d\u7f6e\u4e4b\u524d\u7684\u6700\u5927\u503c\uff0c\u5728\u5f00\u4e2a\u683c\u5916\u7684\u6570\u7ec4mx[]\u6765\u7ef4\u62a4\u4ee5\u6700\u5927\u503c\uff0c\u53ea\u8981\u5728\u60f3\u4e0a\u4f20\u9012\u65f6\u66f4\u65b0\u4e00\u4e0b\u5c31\u597d\u4e86\n\n\u4e0a\u4ee3\u7801~~\u7092\u9e21\u77ed~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100005;\nint n;\nstruct FHQ{//\u5e73\u8861\u6811\u677f\u5b50\n\tint v[N],k[N],si[N],mx[N],lc[N],rc[N],tot,root;\n\tvoid push_up(int u){\n\t\tsi[u]=si[lc[u]]+si[rc[u]]+1;\n\t\tmx[u]=max(max(mx[lc[u]],mx[rc[u]]),v[u]);\n\t}\n\tvoid split(int u,int &l,int &r,int x){\n\t\tif(!u){\n\t\t\tl=r=0;\n\t\t\treturn;\n\t\t}\n\t\tif(x<=si[lc[u]]){\n\t\t\tr=u;\n\t\t\tsplit(lc[u],l,lc[u],x);\n\t\t}\n\t\telse {\n\t\t\tl=u;\n\t\t\tsplit(rc[u],rc[u],r,x-si[lc[u]]-1);\n\t\t}\n\t\tpush_up(u);\n\t}\n\tint merge(int l,int r){\n\t\tif(!l||!r)return l|r;\n\t\tif(k[l]<=k[r]){\n\t\t\trc[l]=merge(rc[l],r);\n\t\t\tpush_up(l);\n\t\t\treturn l;\n\t\t}\n\t\telse{\n\t\t\tlc[r]=merge(l,lc[r]);\n\t\t\tpush_up(r);\n\t\t\treturn r;\n\t\t}\n\t}\n\tint l,r;\n\tvoid insert(int p){\n\t\tint u=++tot;\n\t\tsplit(root,l,r,p);\n\t\tmx[u]=v[u]=mx[l]+1,k[u]=rand(),si[u]=1;//\u63d2\u5230l\u540e\n\t\troot=merge(merge(l,u),r);\n\t}\n}T;\nint main(){\n\tscanf(\"%d\",&n);\n\tint p;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&p);//\u8bfb\u5165\u4f4d\u7f6ep\n\t\tT.insert(p);//\u5728p\u4f4d\u7f6e\u63d2\u5165\n\t\tprintf(\"%d\\n\",T.mx[T.root]);\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c\u849f\u84bb\u6ca1\u89e3\u91ca\u6e05\u53ef\u4ee5\u79c1\u4fe1\u849f\u84bb~~\u9003~~",
        "postTime": 1572253884,
        "uid": 148092,
        "name": "Dark_lightrq",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "## Description\n\n\u52a8\u6001\u7ef4\u62a4LIS\n\n## Solution\n\n\u8fd9\u9053\u9898\u6b63\u89e3\u5e94\u8be5\u662f\u5728\u5e73\u8861\u6811\u4e0a\u7ef4\u62a4dp\u3002\n\n\u8bbe $dp_{i}$ \u8868\u793a\u524d $i$ \u4e2a\u6570\u7684LIS\u957f\u5ea6\uff0c\u8f6c\u79fb\u65b9\u7a0b\u663e\u7136\u4e3a\uff1a\n\n$$\ndp_{i}=max\\{dp_{j}+1\\}\n$$\n\n~~\u8fd9\u4e1c\u897f\u90fd\u4e0d\u77e5\u9053\u53ef\u4ee5\u8003\u8651$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $\u4e86~~\n\n\u7136\u540e\u6211\u4eec\u653e\u5230\u7ef4\u62a4\u7684\u8282\u70b9\u4e0a\u5373\u53ef\u3002\n\n\u5f00\u5934\u8bf4\u8fc7\u5e73\u8861\u6811\u5bf9\u5427\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u7684\u6570\u636e\u8fc7\u6c34\uff0cvector+bit\u76f4\u63a5\u80fd\u8fc7\uff0c\u800c\u4e14\u8dd1\u5f97\u98de\u5feb\uff0c\u7ba1\u7406\u5982\u679c\u6709\u5fc3\u60c5\u7684\u8bdd\u5c31\u52a0\u5f3a\u4e00\u4e0b\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nconst int N = 100000 + 5;\nint n, p[N], ans[N], bit[N];\nstd::vector < int > vec;\n\nvoid update(int x, int y) {\n\tfor (; x <= n; x += x & -x) bit[x] = std::max(bit[x], y);\n}\n\nint queryf(int x) {\n\tint res = 0;\n\tfor (; x; x -= x & -x) res = std::max(res, bit[x]);\n\treturn res;\n}\n\nsigned main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; ++i) scanf(\"%d\", &p[i]), vec.insert(p[i] + vec.begin(), i);\n\tfor (int i = 1; i <= n; ++i) ans[vec[i - 1]] = queryf(vec[i - 1]) + 1, update(vec[i - 1], ans[vec[i - 1]]);\n\tfor (int i = 1; i <= n; ++i) ans[i] = std::max(ans[i], ans[i - 1]);\n\tfor (int i = 1; i <= n; ++i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1587736182,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "# \u6ca1\u4eba\u5199\u5e73\u8861\u6811\u9898\u89e3\u6211\u6765\u5199\u597d\u4e86    \n\u5148\u63a8\u4e00\u53d1\u6211\u7684\u535a\u5ba2    \n[\u4f20\u9001\u95e8](https://lfd2002.com)    \n\u8fd9\u4e2a\u9898\u7531\u4e8e\u63d2\u5165\u662f\u6709\u5e8f\u7684  \n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u52a8\u6001\u7ef4\u62a4\u5f53\u524d\u5e8f\u5217   \ng[i]\u8868\u793ai\u7ed3\u5c3e\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\nmaxn[i]\u8868\u793ai\u4ee5\u53ca\u5b50\u6811\u4e2dg\u6700\u5927\u503c  \n\u8fd9\u6837\u7684\u8bdd\u66f4\u65b0\u957f\u5ea6\u7528\u524d\u9a71\u66f4\u65b0  \n\u63d2\u5165\u6709\u5e8f\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u540e\u9762\u7684\u503c  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100010\n#define inf 1000000000\n#define max(a,b) a>b?a:b\ninline int read()\n{\n    int s=0,w=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n    return s*w;\n}\nint ch[N][2],maxn[N],g[N],f[N],key[N],size[N],sz,n,root;\ninline bool get(int x)\n{\n    return ch[f[x]][1]==x;\n}\ninline void update(int x)\n{\n    size[x]=size[ch[x][0]]+size[ch[x][1]]+1;\n    maxn[x]=g[x];\n    if(ch[x][1]) maxn[x]=max(maxn[ch[x][1]],maxn[x]);\n    if(ch[x][0]) maxn[x]=max(maxn[ch[x][0]],maxn[x]);\n    if(key[x]==inf||key[x]==0) {maxn[x]=0;g[x]=0;}\n}\ninline void rotate(int x)\n{\n    int old=f[x],oldf=f[old],whichx=get(x);\n    ch[old][whichx]=ch[x][whichx^1];\n    ch[x][whichx^1]=old;\n    f[ch[old][whichx]]=old;\n    f[old]=x;\n    f[x]=oldf;\n    if(oldf) ch[oldf][ch[oldf][1]==old]=x;\n    update(old);\n    update(x);\n}\ninline void splay(int x,int tar)\n{\n    for(int fa;(fa=f[x])!=tar;rotate(x))\n        if(f[fa]!=tar) rotate(get(fa)==get(x)?fa:x);\n    if(!tar) root=x;\n}\ninline int find(int x)\n{\n    int now=root;\n    while(1)\n    {\n        if(x<=size[ch[now][0]]) now=ch[now][0];\n        else\n        {\n            int tmp=1+(ch[now][0]?size[ch[now][0]]:0);\n            if(tmp==x) return now;\n            x-=tmp,now=ch[now][1];\n        }\n    }\n}\nint main()\n{\n    n=read();\n    root=++sz;\n    key[sz]=inf;size[root]=2;\n    f[root]=0;ch[root][1]=++sz;\n    key[sz]=0;size[sz]=1;ch[sz][1]=ch[sz][0]=0;f[sz]=root;\n    for(int i=1;i<=n;i++)\n    {\n        int x=read();x++;\n        int aa=find(x);\n        int bb=find(x+1);\n        splay(aa,0);splay(bb,aa);\n        ch[ch[root][1]][0]=++sz;\n        f[sz]=ch[root][1];\n        key[sz]=i;ch[sz][1]=ch[sz][0]=0;\n        size[sz]=1;splay(ch[root][1],0);\n        splay(sz,0);g[sz]=maxn[ch[root][0]]+1;update(sz);\n        printf(\"%d\\n\",maxn[sz]);\n    }\n}\n\n```",
        "postTime": 1531101883,
        "uid": 55682,
        "name": "Michael_Bryant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4309 \u3010[TJOI2013]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    }
]