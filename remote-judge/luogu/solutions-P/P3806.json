[
    {
        "content": "## \u7ed9\u4e00\u79cd~~\u53e6\u7c7b~~\u7684\u70b9\u5206\u6cbb!(\u975e\u5e38\u597d\u7406\u89e3)\n\n\u662f\u4e00\u79cd\u4e0d\u7528\u6876\u7684\u505a\u6cd5,\u6570\u636e\u8303\u56f4\u73c2\u4ee5\u8fbe\u5230 $0\\leq c,K \\leq 10^9$ (\u6216\u8005\u66f4\u5927)\n\n---\n\n### update 2020.2.8 \u4fee\u6539\u4e86\u4e00\u4e9b\u5c0f\u9519\u8bef\n\n\u5e76update:\u4ee3\u7801\u5728bzoj1316\u56e0\u4e3a\u6ca1\u6709\u7279\u5224\u8be2\u95ee0\u5bfc\u81f4WA\u6389\u7684\u9505.(\u611f\u8c22 @jiaangk \u6307\u51fa)\n\n### update 2021.3.3 \u4fee\u6539\u4e86\u590d\u6742\u5ea6\u7684\u9519\u8bef\n\n---\n\n\u6211\u770b\u5927\u90e8\u5206\u9898\u89e3\u7684calc\u51fd\u6570\u91cc\u90fd\u662f:\n\n```cpp\nvoid calc(int u){\n\t...\n\t//\u6ce8:tot\u4e3ad\u6570\u7ec4\u957f\u5ea6\n\tfor(int i=1;i<=tot;i++){\n\t\tfor(int j=1;j<=tot;j++){\n\t\t\t...\n\t\t}\n\t}\n\t...\n}\n```\n\u95ee\u4e00\u53e5: \n#### \u4f60\u4eec\u4e0d\u6015T\u4e48?\n~~\u6211\u76f8\u4fe1\u56de\u7b54\u4e00\u5b9a\u662f:\u4f60\u8c37\u6570\u636e\u592a\u83dc~~ (update: 2020.2.2 \u7ba1\u7406\u5458\u6570\u636e\u52a0\u5f3a\u540e\u786e\u5b9e\u4f1aT)\n\n### \u53cc\u5c42\u5faa\u73af?\u6784\u9020\u4e00\u4e2a\u83ca\u82b1\u56fe\u4e00\u5b9aT!\n\n\u6240\u4ee5,\u6211\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n \\log^{2}n+nm\\log n)$ \u7684\u505a\u6cd5\u3002\n\n`calc` \u51fd\u6570\u548c `get_dis` \u51fd\u6570\u4e0d\u4e00\u6837\uff0c\u5176\u4ed6\u90fd\u5dee\u4e0d\u591a\u3002\n\n------------\n\n\u8bb0\u5f53\u524d\u5206\u6cbb\u7684\u6839\u4e3a $root$\u3002\n\n- $a$ \u6570\u7ec4\u8bb0\u5f55\u4ece $root$ \u80fd\u5230\u7684\u70b9;\n\n- $d$ \u6570\u7ec4\u8bb0\u5f55 $a_{i}$ \u5230 $root$ \u7684\u8ddd\u79bb;\n\n- $b$ \u6570\u7ec4\u8bb0\u5f55 $a_{i}$ \u5c5e\u4e8e $root$ \u7684\u54ea\u4e00\u68f5\u5b50\u6811(\u5373\u5f53 $b_{a_i}=b_{a_j}$ \u65f6,\u8bf4\u660e $a_{i}$ \u4e0e $a_{j}$ \u5c5e\u4e8e $root$ \u7684\u540c\u4e00\u68f5\u5b50\u6811)\n\n### \u6ce8\u610f\uff1a\u5c06 $a$ \u6570\u7ec4\u6392\u5e8f\u65f6\u5e94\u6309\u7167 $d$ \u503c\u7684\u4ece\u5c0f\u5230\u5927:\n\ncmp\u51fd\u6570:\n\n\n```cpp\nbool cmp(int x,int y){\n\treturn d[x]<d[y];\n}\n```\n\n`get_dis` \u51fd\u6570\u501f\u9274\u4e86P4178\u7684\u601d\u60f3(\u5373\u7528\u4e24\u4e2a\u6307\u9488 $l,r$ \u904d\u5386\u6570\u7ec4)\n\n\u73b0\u5728,\u8bf7\u770b `get_dis` \u4e0e `calc`\n\n```cpp\nvoid get_dis(int u,int fa,int dis,int from){\n\ta[++tot]=u;//\u52a0\u5165\u4e00\u4e2a\u65b0\u7ed3\u70b9\n\td[u]=dis;\n\tb[u]=from;\n\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(v==fa||vis[v])continue;\n\t\tget_dis(v,u,dis+edge[i].val,from);\n\t}\n}\nvoid calc(int u){\n\ttot=0;\n\ta[++tot]=u;\n\td[u]=0;\n\tb[u]=u;//\u522b\u5fd8\u4e86\u52a0\u4e0aroot\u81ea\u5df1\n\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(vis[v])continue;\n\t\tget_dis(v,u,edge[i].val,v);\n\t}\n\tsort(a+1,a+tot+1,cmp);\n\tfor(int i=1;i<=m;i++){\n\t\tint l=1,r=tot;\n\t\tif(ok[i])continue;\n\t\twhile(l<r){\n\t\t\tif(d[a[l]]+d[a[r]]>query[i]){//\u5f53\u548c\u6bd4\u8be2\u95ee\u7684\u957f\u5ea6\u5927\u65f6,\u53f3\u6307\u9488\u5de6\u79fb\n\t\t\t\tr--;\n\t\t\t}\n\t\t\telse if(d[a[l]]+d[a[r]]<query[i]){//\u7c7b\u4f3c\u4e0a\u8fb9\n\t\t\t\tl++;\n\t\t\t}\n\t\t\telse if(b[a[l]]==b[a[r]]){//\u548c\u4e3a\u8be2\u95ee\u7684\u957f\u5ea6,\u4f46\u540c\u5c5e\u4e00\u68f5\u5b50\u6811,\u7ee7\u7eed\u4e0b\u4e00\u79cd\u60c5\u51b5\n\t\t\t\tif(d[a[r]]==d[a[r-1]])r--;\n\t\t\t\telse l++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tok[i]=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n***talk is cheap,show me your code!***\n\n## \u5168\u90e8\u4ee3\u7801:\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define N 10001\n#define re register \ninline int read(){\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9'){\n        x=(x<<3)+(x<<1)+c-'0';\n        c=getchar();\n    }\n    return x*f;\n}\nint n,m,query[101];\nint e_cnt=0,head[N],maxp[N],siz[N],root,tot=0,d[N],b[N],a[N];\nbool vis[N],ok[101];\nstruct Edge{\n\tint to,nxt,val;\n}edge[N<<1];\nvoid add(int a,int b,int c){\n\te_cnt++;\n\tedge[e_cnt].nxt=head[a];\n\tedge[e_cnt].to=b;\n\tedge[e_cnt].val=c;\n\thead[a]=e_cnt;\n}\nvoid get_root(int u,int fa,int total){\n\tsiz[u]=1;\n\tmaxp[u]=0;\n\tfor(re int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(v==fa||vis[v])continue;\n\t\tget_root(v,u,total);\n\t\tsiz[u]+=siz[v];\n\t\tmaxp[u]=max(siz[v],maxp[u]);\n\t}\n\tmaxp[u]=max(maxp[u],total-siz[u]);\n\tif(!root||maxp[u]<maxp[root]){\n\t\troot=u;\n\t}\n}\nbool cmp(int x,int y){\n\treturn d[x]<d[y];\n}\nvoid get_dis(int u,int fa,int dis,int from){\n\ta[++tot]=u;\n\td[u]=dis;\n\tb[u]=from;\n\tfor(re int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(v==fa||vis[v])continue;\n\t\tget_dis(v,u,dis+edge[i].val,from);\n\t}\n}\nvoid calc(int u){\n\ttot=0;\n\ta[++tot]=u;\n\td[u]=0;\n\tb[u]=u;\n\tfor(int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(vis[v])continue;\n\t\tget_dis(v,u,edge[i].val,v);\n\t}\n\tsort(a+1,a+tot+1,cmp);\n\tfor(int i=1;i<=m;i++){\n\t\tint l=1,r=tot;\n\t\tif(ok[i])continue;\n\t\twhile(l<r){\n\t\t\tif(d[a[l]]+d[a[r]]>query[i]){\n\t\t\t\tr--;\n\t\t\t}\n\t\t\telse if(d[a[l]]+d[a[r]]<query[i]){\n\t\t\t\tl++;\n\t\t\t}\n\t\t\telse if(b[a[l]]==b[a[r]]){\n\t\t\t\tif(d[a[r]]==d[a[r-1]])r--;\n\t\t\t\telse l++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tok[i]=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid solve(int u){\n\tvis[u]=true;\n\tcalc(u);\n\tfor(re int i=head[u];i;i=edge[i].nxt){\n\t\tint v=edge[i].to;\n\t\tif(vis[v])continue;\n\t\troot=0;\n\t\tget_root(v,0,siz[v]);\n\t\tsolve(root);\n\t}\n}\nint main(){\n\tn=read(),m=read();\n\tfor(re int i=1;i<=n-1;i++){\n\t\tint u,v,w;\n\t\tu=read(),v=read(),w=read();\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t}\n\tfor(re int i=1;i<=m;i++){\n\t\tquery[i]=read();\n\t\tif(!query[i])ok[i]=1;//\u8fd9\u91cc,\u52a0\u4e2a\u7279\u5224\n\t}\n\tmaxp[0]=n;\n\tget_root(1,0,n);\n\tsolve(root);\n\tfor(re int i=1;i<=m;i++){\n\t\tif(ok[i]){\n\t\t\tcout<<\"AYE\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"NAY\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n[*Froggy's blog*](https://www.luogu.org/blog/froggy/)\n\n#### \u5471!!",
        "postTime": 1561281874,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u70b9\u5206\u6cbb\u8be6\u89e3\n\n### \u4e00.\u6982\u5ff5\n\n\u200b      \u662f\u5904\u7406\u6811\u4e0a\u8def\u5f84\u7684\u4e00\u4e2a\u6781\u597d\u7684\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u9700\u8981\u5927\u89c4\u6a21\u7684\u5904\u7406\u4e00\u4e9b\u6811\u4e0a\u8def\u5f84\u7684\u95ee\u9898\u65f6\uff0c\u70b9\u5206\u6cbb\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n### \u4e8c.\u5177\u4f53\u601d\u8def\n\n\u200b      \u5927\u591a\u6570\u540c\u5b66\u7684\u66b4\u529b\u505a\u6cd5\u90fd\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5bf9\uff08u\uff0cv\uff09 \u8fdb\u884cdfs\u6765\u6c42\u89e3\u3002\u4f46\u5176\u5b9e\u5229\u7528\u5206\u6cbb\u8fd9\u4e00\u79cd\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u200b      \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u548c\u7b49\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u6cbb\u6765\u5c06\u539f\u95ee\u9898\u5206\u89e3\u6210\u51e0\u4e2a\u5b50\u95ee\u9898\u6765\u6c42\u89e3\uff0c\u4e4b\u540e\u5728\u4e00\u4e00\u5408\u5e76\u7b54\u6848\u3002\u800c\u5728\u6811\u4e0a\u6211\u4eec\u4e5f\u662f\u53ef\u4ee5\u8fdb\u884c\u8fd9\u4e00\u79cd\u64cd\u4f5c\u7684\u3002\u53ef\u662f\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u5b50\u6811\u7684\u8282\u70b9\u6570\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u4e0d\u80fd\u5355\u5355\u7684\u53d6\u4e2d\u70b9\uff08\u4f60\u544a\u8bc9\u6211\u600e\u4e48\u53d6\uff09\uff0c\u6216\u76f4\u63a5\u53d6\u4e00\u53f7\u5b50\u6811\u3002\uff08\u5206\u6cbb\u7684\u70b9\u7684\u9519\u8bef\u9009\u62e9\u4f1a\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u5341\u5206\u4e0d\u7a33\u5b9a\uff09\u3002\n\n\u200b     \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u4f60\u53d6\u4e86\u7b2c\u4e00\u4e2a\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u53d8$O(n)$,\u4f46\u5982\u679c\u6211\u4eec\u53d6\u7684\u70b9\u662f3\u7684\u8bdd\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u662f $O(logn)$\n\n ![](https://cdn.luogu.com.cn/upload/pic/28185.png)\n\n\u200b        \u6240\u4ee5\uff0c\u6211\u4eec\u8981\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5 \u2014\u2014 \u6811\u7684\u91cd\u5fc3\n\n\u200b        \u5b9a\u4e49\uff1a**\u627e\u5230\u4e00\u4e2a\u70b9,\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11,\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3,\u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u6811\u5c3d\u53ef\u80fd\u5e73\u8861**\n\n\u200b       \u7531\u5b9a\u4e49\u53ef\u77e5\uff0c\u5f53\u6211\u4eec\u9009\u62e9\u6811\u7684\u91cd\u5fc3\u4e3a\u5206\u652f\u70b9\u65f6\uff0c\u662f\u6700\u4f18\u7684\uff08~~\u6211\u6709\u4e2a\u7edd\u5999\u7684\u8bc1\u660e\u53ea\u662f\u8fd9\u91cc\u5199\u4e0d\u4e0b~~\uff09\n\n\u200b       \u597d\u4e86\uff0c\u6c42\u51fa\u4e86\u6811\u7684\u91cd\u5fc3\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u6765\u5206\u6cbb\u4e86\uff01\uff01\n\n\u200b      \u5148\u73b0\u7ed9\u51fa\u6c42\u91cd\u5fc3\u7684\u4ee3\u7801\uff0c\u4fbf\u4e8e\u8bfb\u8005\u4f9d\u6b21\u7406\u89e3\n\n   ```cpp\nvoid find(int x,int fa)\n{\n    size[x] = 1; mx[x] = 0;\n    for (int i = head[x]; i ; i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(v.to == fa||vis[v.to] ) continue;//vis\u662f\u4e4b\u540e\u5206\u6cbb\u662f\u8981\u7528\u5230\u7684\n        find(v.to,x);\n        size[x] += size[v.to];\n        chkmax(mx[x],size[v.to]);\n    }\n    chkmax(mx[x],S-size[x]);//S\u4e3a\u6811\u7684\u5927\u5c0f\uff0c\u8bb0\u4f4fx\u7684\u4e0a\u9762\u8981\u7b97\u5165\u7684\n    if(mx[x] < mx[root])\n    {\n        root = x;\n    }\n}\n   ```\n\n\u200b           \u73b0\u5728\u5f00\u59cb\u6211\u4eec\u70b9\u5206\u6cbb\u4e2d\u6700\u91cd\u8981\u7684\u90e8\u5206\u4e86 \u2014\u2014 \u5206\u6cbb\n\n\u200b           \u5206\u6cbb\u4e0d\u592a\u597d\u8bb2\uff0c\u6211\u4eec\u4ece\u4ee3\u7801\u5f00\u59cb\u5206\u6790\n\n ```cpp\nvoid Divid(int x)\n{\n    ans+=solve(x,0);\n    vis[x] = 1;\n    for (int i = head[x];i;i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(vis[v.to]) continue;\n        ans-=solve(v.to,edges[i].cost);\n        S = size[v.to]; root = 0;\n        find(v.to,x);\n        Divid(root);\n    }\n}\n```\n\n1. ans += solve(x,0); \u8fd9\u4e00\u53e5\u7684\u4f5c\u7528\u662f\u5c06\u7b54\u6848\u52a0\u4e0a\u7ecf\u8fc7x\u7684\u8def\u5f84\u7b54\u6848\u3002 \u800c\u8fd9\u4e00\u4e2a0\u662f\u4e3a\u4e86\u89e3\u51b3\u6389\u4e00\u4e9b\uff0c\u6709\u91cd\u590d\u8ba1\u7b97\u7684\u7ed3\u679c\uff1b\uff08\u770b\u4e0d\u61c2\u5148\u5047\u88c5\u6ca1\u6709\u8fd9\u4e2a0\uff09\n2. ans -= solve\uff08v.to,edges[i].cost); \u8fd9\u4e00\u53e5\u662f\u5c06\u5728\u65e2\u7ecf\u8fc7x\u8fd9\u4e2a\u70b9\uff0c\u53c8\u7ecf\u8fc7v.to\u8fd9\u4e00\u4e2a\u70b9\u7684\u8def\u5f84\u6765\u53bb\u91cd\u3002\u56e0\u4e3a\u50cf\u8fd9\u79cd\u8def\u5f84\u4f1a\u5728solve\uff08x,0)\u548csolve(v.to,0)\u4e2d\u90fd\u8ba1\u7b97\u4e00\u6b21\u3002\u800c\u9898\u76ee\u662f\u8981\u6c42\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u5728\u5bb9\u65a5\u65f6\u8981\u521d\u59cb\u5316\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u3002\u6240\u4ee5\uff0c\u73b0\u5728\u6709\u6ca1\u6709\u7406\u89e3\u8fd9\u4e2a0\u548cedges[i].cost?\n3. S = size[v.to]; \u73b0\u5728\u6211\u4eec\u8981\u5206\u6cbbv.to\u7684\u8fd9\u4e00\u9897\u5b50\u6811\uff0cSo\uff0c\u53c8\u5c06\u6c42\u91cd\u5fc3\u7684\u6811\u7684\u5927\u5c0f\u6539\u4e3asize[v.to];\n\n \u5230\u6b64\u4e3a\u6b62\uff0c\u70b9\u5206\u6cbb\u5c31\u5728\u8fd9\u91cc\u8bb2\u5b8c\u4e86\uff0csolve\u51fd\u6570\u662f\u770b\u9898\u76ee\u7684\uff0c\u6709\u80fd\u529b\u7684\u540c\u5b66\u53ef\u4ee5\u5207\u4e00\u5207\u8fd9\u4e24\u9053\u9898\uff08\u8fd9\u4e24\u9053\u9898\u4f1a\u5728\u4e0b\u9762\u8fdb\u884c\u8bb2\u89e3\uff09\u3002[luogu\u6a21\u677f\u9898](https://www.luogu.org/problemnew/show/P3806) \u548c[\u806a\u806a\u53ef\u53ef](https://www.luogu.org/problemnew/show/P2634).\n\n\n\n\n\n### \u4e09.\u4f8b\u9898\u5206\u6790\n\n\u200b         1.luogu\u6a21\u677f\u9898\n\n\u200b          \u9898\u9762\u5728\u4e0a\u9762\u3002\n\n\u200b         \u56e0\u4e3a\u9898\u76ee\u662f\u8981\u6c42\u8def\u5f84\u957f\u4e3ak\u7684\u8def\u5f84\u6761\u6570\uff0c\u6240\u4ee5solve\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8fc7x\u8282\u70b9\u7684\u957f\u5ea6\u4e3ak\u7684\u8def\u5f84\u3002\n\n\u800c\u8fd9\u8def\u5f84\u957f\u5ea6\u662f\u53ef\u4ee5\u7528 $O(n)$ \u7684\u65b9\u6cd5\u6c42\u51fa\n\n ```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\ntemplate <class T>\ninline void read(T &a)\n{\n    T s = 0, w = 1;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-') w = -1;\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        s = (s << 1) + (s << 3) + (c ^ 48);\n        c = getchar();\n    }\n    a = s*w;\n}\ntemplate<class T> void chkmax(T &a, T b) {a > b ? (a = a) : (a = b);}\ntemplate<class T> void chkmin(T &a, T b) {a > b ? (a = b) : (a = a);}\ntemplate<class T> T min(T a, T b) {return a > b ? b : a;}\ntemplate<class T> T max(T a, T b) {return a < b ? b : a;}\n\nint n,m;\nint S;\nint size[10101];\nstruct edge{\n    int from,to,cost,net;\n    edge(int f = 0, int t = 0, int cost = 0, int nex = 0)\n    {\n        from = f;\n        to = t;\n        this->cost = cost;\n        net = nex;\n    }\n}edges[1010101];\nint tot,head[101001],mx[101011],minn =0x3f3f3f3f,root;\nint vis[1010110];\nvoid add(int x, int y, int z)\n{\n    edges[++tot] = edge(x,y,z,head[x]);\n    head[x] = tot;\n}\nvoid find(int x,int fa)\n{\n    size[x] = 1;mx[x] = 0;\n    for (int i = head[x];i; i =edges[i].net)\n    {\n        edge v = edges[i];\n        if(v.to == fa || vis[v.to]) continue;\n        find(v.to,x);\n        size[x] += size[v.to];\n        chkmax(mx[x],size[v.to]);\n    }\n    chkmax(mx[x], S - size[x]);\n    if(mx[x] < mx[root])\n    {\n        root = x;\n    }\n   \n}\nint que[1010110],ans[102210101];\nint dis[1010101],hhd,a[10101101];\nvoid get_dis(int x, int len, int fa)\n{\n    dis[++hhd] = a[x];\n    for (int i = head[x]; i; i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(vis[v.to]||v.to == fa) continue;\n        a[v.to] = len + edges[i].cost;\n        get_dis(v.to,len + edges[i].cost,x);\n    }\n}\nvoid solve(int s, int len, int w)\n{\n    hhd = 0;\n    a[s] = len;\n    get_dis(s,len,0);\n        for (int i1 = 1; i1 <= hhd; i1++)\n            for (int i2 = 1; i2 <= hhd; i2++)\n            {\n            \tif(i1 != i2)\n            \t{\n                 \tans[dis[i1] + dis[i2]] += w;\n                }\n            }\n}\nvoid Divide(int x)\n{   \n    solve(x,0,1);\n    vis[x] = 1;\n    for (int i = head[x]; i; i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(vis[v.to]) continue;\n        solve(v.to,edges[i].cost,-1);\n        S = size[x];root = 0; mx[0] = n;\n        find(v.to,x);\n        Divide(root);\n    }\n}\nint main()\n{\n    read(n); read(m);\n    for (int i = 1; i < n; i++)\n    {\n        int x,y,z;\n        read(x); read(y); read(z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    S = n;mx[0] = n;root = 0;\n // minn = 0x3f3f3f3f;\n    find(1,0);    \n   // printf(\"%d\\n\",mx[root]);\n    Devede(root);\n    for (int i = 1; i <= m; i++)\n    {\n        int k;\n        read(k);\n        printf(\"%s\\n\",(ans[k]) ? \"AYE\" : \"NAY\");\n        //printf(\"%d\\n\",ans[k]);\n    }\n    return 0;\n}\n```\n\n\u200b          2.\u806a\u806a\u53ef\u53ef\n\n\u200b          \u8fd9\u9053\u9898\u662f\u6765\u6c42\u957f\u5ea6\u88ab3\u6574\u9664\u7684\u8def\u5f84\u6761\u6570\uff0c\u4f46\u5904\u7406\u65b9\u6cd5\u8ddf\u4e0a\u4e00\u6761\u4e0d\u592a\u4e00\u6837\u3002\n\n  \u6211\u4eec\u53ef\u4ee5\u8bbep[0],p[1],p[2]\u4e3a\u96643\u4f59\u6570\u4e3a0,1,2\u7684 \u8def\u5f84\u6761\u6570\u3002\u663e\u7136\u7b54\u6848\u4e3a$p_0^2$ + $p_1 * p_2 * 2$\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nint gcd(int x, int y)\n{\n    if(y == 0) return x;\n    return gcd(y,x%y);\n}\ntemplate<class T>\ninline void read(T &a)\n{\n    T s = 0,w = 1;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-') w = -1;\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        s = (s << 1) + (s << 3) + (c ^ 48);\n        c = getchar();\n    }\n    a = s*w;\n}\ntemplate<class T> void chkmax(T &a, T b){a > b? (a = a) : (a = b);}\ntemplate<class T> void chkmin(T &a, T b){a > b ? (a = b):(a = a);}\nint n;\nstruct edge{\n    int from, to,cost,net;\n    edge(int f = 0, int t = 0, int c = 0, int n = 0)\n    {\n        from = f;\n        to = t;\n        cost = c;\n        net = n;\n    }\n}edges[2010101];\nstatic int head[20010],tot;\nvoid add(int x, int y, int z)\n{\n    edges[++tot] = edge(x,y,z,head[x]);\n    head[x] = tot;\n}\nstatic int vis[20010],size[20010],mx[20010],root,S; \nvoid find(int x,int fa)\n{\n    size[x] = 1; mx[x] = 0;\n    for (int i = head[x]; i ; i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(v.to == fa||vis[v.to] ) continue;\n        find(v.to,x);\n        size[x] += size[v.to];\n        chkmax(mx[x],size[v.to]);\n    }\n    chkmax(mx[x],S-size[x]);\n    if(mx[x] < mx[root])\n    {\n        root = x;\n    }\n}\nint dis[20010],a[20010],cnt;\nint ans,p[3];\nvoid get_dis(int x, int fa)\n{\n  //  dis[++cnt] = a[x];\n    p[a[x]%3]++;\n    for (int i = head[x] ;i; i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(v.to == fa ||vis[v.to] ) continue;\n        a[v.to] = a[x]+v.cost;\n        get_dis(v.to,x);\n    }\n}\nint  solve(int x, int len)\n{\n    a[x] = len;\n    //cnt = 0;\n    p[0] = p[1] = p[2] = 0;\n    get_dis(x,0);\n    return (p[0]*p[0] + 2 * p[1] * p[2]);\n}\nvoid Deved(int x)\n{\n    ans+=solve(x,0);\n    vis[x] = 1;\n    for (int i = head[x];i;i = edges[i].net)\n    {\n        edge v = edges[i];\n        if(vis[v.to]) continue;\n        ans-=solve(v.to,edges[i].cost);\n        S = size[v.to]; root = 0;\n        find(v.to,x);\n        Deved(root);\n    }\n}\nint main()\n{\n    //freopen(\"xx.in\",\"r\",stdin);\n    //freopen(\"xx.out\",\"w\",stdout);\n    read(n);\n    for (register int i = 1; i < n; i++)\n    {\n    \tint x,y,z;\n    \tread(x); read(y); read(z);\n    \tz%=3;\n    \tadd(x,y,z);\n    \tadd(y,x,z);\n    }\n    S = n;root = 0; mx[0] = n+1; \n    find(1,0);\n    Deved(root);\n    int pp = gcd(ans,n*n);\n    printf(\"%lld/%lld\\n\",ans/pp,n*n/pp);\n   // std::cerr<<std::clock()<<std::endl;\n    return 0;\n}\n```",
        "postTime": 1535259871,
        "uid": 33339,
        "name": "Zcus",
        "ccfLevel": 9,
        "title": "\u70b9\u5206\u6cbb\u8be6\u89e3"
    },
    {
        "content": "\u5148\u8d34\u4e00\u7bc7dalao\u7684\u8bc1\u660e[\u4e00\u79cd\u57fa\u4e8e\u9519\u8bef\u7684\u5bfb\u627e\u91cd\u5fc3\u65b9\u6cd5\u7684\u70b9\u5206\u6cbb\u7684\u590d\u6742\u5ea6\u5206\u6790](http://liu-cheng-ao.blog.uoj.ac/blog/2969)%%%%%\r\n\r\n\u9488\u5bf9\u672c\u849f\u84bb\u4e4b\u524d\u9898\u89e3\u7684\u4e00\u4e9b\u9519\u8bef\u4ee5\u505a\u51fa\u4e86\u4fee\u6539\uff0c\u5e76\u4e14\u5b9e\u6d4b#7\u65e0RE/TLE\uff0c\u5982\u679c\u8fd8\u6709\u4e0d\u5230\u4e4b\u5904\u6b22\u8fcedalao\u6307\u51fa\r\n********************\r\n\u6211\u4eec\u5148\u968f\u610f\u6307\u5b9a\u4e00\u4e2a\u6839rt\uff0c\u5c06\u8fd9\u68f5\u6811\u8f6c\u5316\u6210\u6709\u6839\u6811\r\n\r\n\u4e0d\u96be\u53d1\u73b0\u6811\u4e0a\u7684\u8def\u5f84\u5206\u4e3a\u4e24\u7c7b\uff0c\r\n**\u7ecf\u8fc7\u6839\u8282\u70b9rt\u7684\u8def\u5f84**\u548c**\u5305\u542b\u4e8ert\u7684\u67d0\u68f5\u5b50\u6811\u91cc(\u4e0d\u7ecf\u8fc7rt)\u7684\u8def\u5f84**\r\n\r\n\u5bf9\u4e8e\u524d\u8005\uff0c\r\n\u6211\u4eec\u7528$dis[u]$\u8868\u793a\u7ed3\u70b9$u$\u5230\u6839\u8282\u70b9$rt$\u7684\u8def\u5f84\u957f\u5ea6\uff0c\r\n\u5219u\u5230v\u7684\u8def\u5f84\u957f\u5373\u4e3a$dis[u]+dis[v]$\r\n\r\n\u5bf9\u4e8e\u540e\u8005\uff0c\r\n\u65e2\u7136$u$\u5230$v$\u7684\u8def\u5f84\u5305\u542b\u5728$rt$\u7684\u67d0\u4e2a\u5b50\u6811\u5185\uff0c\r\n\u90a3\u4e48\u6211\u4eec\u5c31**\u627e\u5230\u8fd9\u68f5\u5b50\u6811\u7684\u6839\uff0c\u518d\u5bf9\u4ed6\u6c42\u4e00\u6b21\u7b2c\u4e00\u7c7b\u8def\u5f84**\r\n\r\n\u8fd9\u6837\u5206\u6cbb\u7684\u601d\u60f3\u5c31\u5f88\u660e\u663e\u4e86\r\n\r\n**\u5c31\u662f\u628a\u539f\u6765\u7684\u6811\u5206\u6210\u5f88\u591a\u5c0f\u7684\u5b50\u6811\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u5b50\u6811\u5206\u522b\u6c42\u89e3\u7b2c\u4e00\u7c7b\u8def\u5f84**\r\n\r\n\u70b9\u5206\u6cbb\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u5c42\u7684\u6240\u6709\u9012\u5f52\u8fc7\u7a0b\u5408\u8ba1\u5bf9\u6bcf\u4e2a\u70b9\u5904\u7406\u4e00\u6b21\r\n\u5047\u8bbe\u5171\u9012\u5f52T\u5c42\uff0c\u5219\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(T*N)$\r\n\r\n\u7136\u800c\uff0c**\u5982\u679c\u6811\u9000\u5316\u6210\u4e00\u6761\u94fe**\r\n\u90a3\u4e48\u9012\u5f52\u5c42\u6570\u5c31\u662f$T=n$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(N^2)$\r\n\r\n\u8fd9\u6837\u663e\u7136\u4e0d\u80fd\u627f\u53d7\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u6811\u7684\u5c42\u6570\u7ecf\u91cf\u5c11\r\n\u8fd9\u91cc\u5c31\u8981\u627e**\u6811\u7684\u91cd\u5fc3**\r\n\r\nmaxp[u] (max part)\u8868\u793a**\u5220\u9664\u7ed3\u70b9u\u540e\u4ea7\u751f\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u5927\u7684\u90a3\u68f5\u7684\u5927\u5c0f**\r\n\r\n\u5219\u6811\u7684\u91cd\u5fc3\u5c31\u662f**maxp[]\u503c\u6700\u5c0f\u7684\u90a3\u4e2a\u8282\u70b9**\r\n\r\n\r\n```cpp\r\n//sum\u662f\u5f53\u524d\u5b50\u6811\u7684\u603b\u7ed3\u70b9\u6570\uff0csize[u]\u662f\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\r\nvoid getrt(int u,int fa)\r\n{\r\n    size[u]=1; maxp[u]=0;\r\n    for(int i=head[u];i;i=E[i].nxt)\r\n    {\r\n        int v=E[i].v;\r\n        if(v==fa||vis[v])continue;\r\n        getrt(v,u);//\u5148\u9012\u5f52\u5f97\u5230\u5b50\u6811\u5927\u5c0f\r\n        size[u]+=size[v];\r\n        maxp[u]=max(maxp[u],size[v]);//\u66f4\u65b0u\u7ed3\u70b9\u7684maxp\r\n    }\r\n    maxp[u]=max(maxp[u],sum-size[u]);//\u8003\u8651\u5220\u9664u\u540e\uff0c\u7236\u8282\u70b9\u4e00\u4fa7\u7684\u5b50\u6811\u5927\u5c0f\r\n    if(maxp[u]<maxp[rt]) rt=u;//\u66f4\u65b0\u5f53\u524d\u5b50\u6811\u7684\u91cd\u5fc3\r\n}\r\n```\r\n\r\n\u6211\u4eec\u5728\u70b9\u5206\u6cbb\u8fc7\u7a0b\u4e2d**\u6bcf\u6b21\u9009\u53d6\u5b50\u6811\u7684\u91cd\u5fc3\u4e3a\u5b50\u6811\u7684\u6811\u6839\u8fdb\u884c\u5904\u7406**\uff0c\r\n\u8fd9\u6837**\u603b\u7684\u9012\u5f52\u6df1\u5ea6\u4e0d\u4f1a\u8d85\u8fc7**$logN$**\u5c42**\uff0c\r\n\u6574\u4e2a\u70b9\u5206\u6cbb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5c31\u4fdd\u8bc1\u4e86$O(NlogN)$\r\n\r\n\u70b9\u5206\u6cbb\u9898\u7684\u601d\u60f3\u5927\u90fd\u5982\u4e0a\uff0c\r\n\u5bf9\u4e8e\u4e0d\u540c\u7684\u9898\u8981\u8bbe\u8ba1\u4e0d\u540c\u7684calc\u51fd\u6570\r\n\r\n********************************\r\n\r\n\r\n\u56de\u5230\u672c\u9898\uff0c\u8be2\u95ee\u53ef\u4ee5\u79bb\u7ebf\u8bb0\u5f55\u5e76\u76f4\u63a5\u5728\u5206\u6cbb\u8fc7\u7a0b\u4e2d\u5904\u7406\r\n\r\n\u8bbe\u5f53\u524d\u6839\u4e3a$rt$\uff0c\u4ed6\u7684\u5b50\u6811\u4e3a$v_1,v_2\u2026\u2026v_t$\uff0c\r\n\u5047\u8bbe\u5f53\u524d\u5904\u7406\u7684\u5b50\u6811\u4e3a$v_i$\uff0c\u6c42\u51fa$v_i$\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u5230$rt$\u7684\u8ddd\u79bb$dis$\u5e76\u4fdd\u5b58\u4e8e$rem$\u6570\u7ec4\r\n\u5e76\u4ee4$judge[dis]$\u8868\u793a\u5728\u5b50\u6811$v_1$~$v_{i-1}$\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u8282\u70b9\u5230$rt$\u8ddd\u79bb\u4e3a$dis$\r\n\r\n\u904d\u5386\u6bcf\u4e2a\u79bb\u7ebf\u8bb0\u5f55\u7684\u8be2\u95ee\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u904d\u5386\u4e00\u6b21\u5f53\u524d\u5b50\u6811\u7684$rem$\r\n\u82e5\u5f53\u524d\u8be2\u95ee\u8ddd\u79bb\u4e3a$query[k]$\uff0c\u904d\u5386\u5230\u7684\u5b50\u6811$v_i$\u4e2d\u67d0\u4e2a\u7ed3\u70b9\u5230$rt$\u8ddd\u79bb\u4e3a$rem[j]$\r\n\u5982\u679c$judge[query[k]-rem[j]]==1$\uff0c\u5219\u4ee3\u8868\u6b64\u8be2\u95ee\u7684\u8def\u5f84\u5b58\u5728\r\n\r\n\u518d\u5177\u4f53\u70b9\u89e3\u91ca\u8fd9\u6bb5\u8bdd\u64cd\u4f5c\u7684\u542b\u4e49\r\n\u5c31\u662f\u7528\u5b50\u6811$v_i$\u4e2d\u67d0\u4e2a\u7ed3\u70b9\u4e0e\u5b50\u6811$v_1$~$v_{i-1}$\u4e2d\u67d0\u4e2a\u8282\u70b9\u4e24\u4e24\u914d\u5bf9\uff0c\u68c0\u67e5\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a$query[k]$\u7684\u8def\u5f84\r\n\r\n\u50cf\u8fd9\u6837\u914d\u5bf9\u5b8c\u540e\u5c06\u8fd9\u68f5\u5b50\u6811\u7684$rem$(\u5373\u5b50\u6811$v_i$\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5230$rt$\u7684$dis$)\u4e00\u8d77\u4fdd\u5b58\u8fdb$judge$\u6570\u7ec4\uff0c\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u5b50\u6811$v_{i+1}$\u7684\u5904\u7406\r\n\r\n\u5f53\u4ee5rt\u4e3a\u6839\u7684\u6811\u67e5\u8be2\u5b8c\u540e\u6e05\u7a7ajudge\u6570\u7ec4\r\n\u7136\u540e\u5bf9\u5176\u4ed6\u5b50\u6811\u8fdb\u884c\u5206\u6cbb\r\n*********************\r\n\r\n```cpp\r\n//niiick\r\n#include<iostream>\r\n#include<vector>\r\n#include<algorithm>\r\n#include<queue>\r\n#include<cstring>\r\n#include<cstdio>\r\nusing namespace std;\r\n\r\nint read()\r\n{\r\n    int f=1,x=0;\r\n    char ss=getchar();\r\n    while(ss<'0'||ss>'9'){if(ss=='-')f=-1;ss=getchar();}\r\n    while(ss>='0'&&ss<='9'){x=x*10+ss-'0';ss=getchar();}\r\n    return f*x;\r\n}\r\n\r\nconst int inf=10000000;\r\nconst int maxn=100010;\r\nint n,m;\r\nstruct node{int v,dis,nxt;}E[maxn<<1];\r\nint tot,head[maxn];\r\nint maxp[maxn],size[maxn],dis[maxn],rem[maxn];\r\nint vis[maxn],test[inf],judge[inf],q[maxn];\r\nint query[1010];\r\nint sum,rt;\r\nint ans;\r\n\r\nvoid add(int u,int v,int dis)\r\n{\r\n    E[++tot].nxt=head[u];\r\n    E[tot].v=v;\r\n    E[tot].dis=dis;\r\n    head[u]=tot;\r\n}\r\n\r\nvoid getrt(int u,int pa)\r\n{\r\n    size[u]=1; maxp[u]=0;\r\n    for(int i=head[u];i;i=E[i].nxt) \r\n    {\r\n        int v=E[i].v;\r\n        if(v==pa||vis[v]) continue;\r\n        getrt(v,u);\r\n        size[u]+=size[v];\r\n        maxp[u]=max(maxp[u],size[v]);\r\n    }\r\n    maxp[u]=max(maxp[u],sum-size[u]);\r\n    if(maxp[u]<maxp[rt]) rt=u;\r\n}\r\n\r\nvoid getdis(int u,int fa)\r\n{\r\n    rem[++rem[0]]=dis[u];\r\n    for(int i=head[u];i;i=E[i].nxt)\r\n    {\r\n        int v=E[i].v;\r\n        if(v==fa||vis[v])continue;\r\n        dis[v]=dis[u]+E[i].dis;\r\n        getdis(v,u);\r\n    }\r\n}\r\n\r\nvoid calc(int u)\r\n{\r\n    int p=0;\r\n    for(int i=head[u];i;i=E[i].nxt)\r\n    {\r\n        int v=E[i].v;\r\n        if(vis[v])continue;\r\n        rem[0]=0; dis[v]=E[i].dis;\r\n        getdis(v,u);//\u5904\u7406u\u7684\u6bcf\u4e2a\u5b50\u6811\u7684dis\r\n\r\n        for(int j=rem[0];j;--j)//\u904d\u5386\u5f53\u524d\u5b50\u6811\u7684dis\r\n        for(int k=1;k<=m;++k)//\u904d\u5386\u6bcf\u4e2a\u8be2\u95ee\r\n        if(query[k]>=rem[j])\r\n        test[k]|=judge[query[k]-rem[j]];\r\n        //\u5982\u679cquery[k]-rem[j]d\u7684\u8def\u5f84\u5b58\u5728\u5c31\u6807\u8bb0\u7b2ck\u4e2a\u8be2\u95ee\r\n\r\n        for(int j=rem[0];j;--j)//\u4fdd\u5b58\u51fa\u73b0\u8fc7\u7684dis\u4e8ejudge\r\n        q[++p]=rem[j],judge[rem[j]]=1;\r\n    }\r\n    for(int i=1;i<=p;++i)//\u5904\u7406\u5b8c\u8fd9\u4e2a\u5b50\u6811\u5c31\u6e05\u7a7ajudge\r\n    judge[q[i]]=0;//\u7279\u522b\u6ce8\u610f\u4e00\u5b9a\u4e0d\u8981\u7528memeset\uff0c\u4f1aT\r\n\r\n}\r\n\r\nvoid solve(int u)\r\n{   \r\n    //judge[i]\u8868\u793a\u5230\u6839\u8ddd\u79bb\u4e3ai\u7684\u8def\u5f84\u662f\u5426\u5b58\u5728\r\n    vis[u]=judge[0]=1; calc(u);//\u5904\u7406\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\r\n    for(int i=head[u];i;i=E[i].nxt)//\u5bf9\u6bcf\u4e2a\u5b50\u6811\u8fdb\u884c\u5206\u6cbb\r\n    {\r\n        int v=E[i].v;\r\n        if(vis[v])continue;\r\n        sum=size[v]; maxp[rt=0]=inf;//\u6ce8\u610fsum\u662f\u4ee5v\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\r\n        getrt(v,0); solve(rt);//\u5728\u5b50\u6811\u4e2d\u627e\u91cd\u5fc3\u5e76\u9012\u5f52\u5904\u7406\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    n=read();m=read();\r\n    for(int i=1;i<n;++i)\r\n    {\r\n        int u=read(),v=read(),dis=read();\r\n        add(u,v,dis);add(v,u,dis);\r\n    }\r\n    for(int i=1;i<=m;++i)\r\n    query[i]=read();//\u5148\u8bb0\u5f55\u6bcf\u4e2a\u8be2\u95ee\u4ee5\u79bb\u7ebf\u5904\u7406\r\n\r\n    maxp[rt]=sum=n;//\u7b2c\u4e00\u6b21\u5148\u627e\u6574\u68f5\u6811\u7684\u91cd\u5fc3\r\n    getrt(1,0); \r\n    solve(rt);//\u5bf9\u6811\u8fdb\u884c\u70b9\u5206\u6cbb\r\n\r\n    for(int i=1;i<=m;++i)\r\n    {\r\n        if(test[i]) printf(\"AYE\\n\");\r\n        else printf(\"NAY\\n\");\r\n    }\r\n    return 0;\r\n}\r\n```",
        "postTime": 1596861781,
        "uid": 60885,
        "name": "niiick",
        "ccfLevel": 6,
        "title": "P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1"
    },
    {
        "content": "\n\n[\u53ef\u80fd\u4f1a\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zsx6.com/2020/01/13/%E7%82%B9%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E8%AE%B0/)\n\n## \u653e\u5728\u5f00\u5934\u7684\u8bdd\n\n1.\u672c\u4eba1\u670813\u65e5\u624d\u521a\u521a\u63a5\u89e6\u4e86\u6dc0\u7c89\u6c41\uff0c\u6240\u4ee5\u53ef\u80fd\u5f88\u591a\u4e1c\u897f\u6ca1\u6709\u7406\u89e3\u5b8c\u5168\u751a\u81f3\u51fa\u9519\uff0c\u5982\u679c\u60a8\u6709\u4ec0\u4e48\u7591\u95ee\u7684\u8bdd\uff0c\u8bf7\u53d1\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u533a\u3002\n\n2.\u6dc0\u7c89\u6c41\u662f\u8ddf\u7740\u4e00\u7bc7\u9898\u89e3\u5b66\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u6709\u4e9b\u4ee3\u7801\u5f88\u50cf\uff0c\u4f46\u662f\u539f\u6765\u9898\u89e3\u7684\u90e8\u5206\u6ca1\u8bb2\u5230\u7684\u5730\u65b9\u6211\u53ef\u80fd\u4f1a\u63d0\u51fa\u6765\n\n3.\u8fd9\u4e1c\u897f\u76ee\u524d\u53ef\u80fd\u4f1a\u66f4\u7684\u5f88\u6162\n\n## \u521d\u7ea7\n\n\u4ec0\u4e48\u662f\u70b9\u5206\u6cbb\uff1f\n\n\u70b9\u5206\u6cbb\u662f\u5904\u7406\u6811\u4e0a\u95ee\u9898\u7684\u4e00\u79cd\u9ad8\u6548\u7684\u529e\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u4f18\u79c0\uff0c\u800c\u4e14\u601d\u60f3\u6bd4\u8f83\u5de7\u5999\u3002\n\n\u600e\u4e48\u6765\u505a\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u5f15\u5165\u6811\u7684\u91cd\u5fc3\n\n### \u6811\u7684\u91cd\u5fc3\n\n> \u6811\u7684\u91cd\u5fc3\u4e5f\u53eb\u6811\u7684\u8d28\u5fc3\u3002\u627e\u5230\u4e00\u4e2a\u70b9,\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11,\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3,\u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\u3002\n\n\u4ec0\u4e48\u610f\u601d\u5462?\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u91cc\u63a8\u5f97\u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u7684\u4efb\u610f\u4e00\u9897\u5b50\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7$n/2$\n\n> \u8bc1\u660e\u5c31\u4e0d\u7528\u4e86\u5427\n\n\u4e8e\u662f\u6211\u4eec\u6c42$log_2N$\u6b21\u91cd\u5fc3\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u5c31\u80fd\u88ab\u786e\u5b9a\u4e86\u3002\n\n\u4e8e\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86$O(N log N)$\n\n\n\n\u600e\u4e48\u6c42\u5462\uff1f\n\n\u6839\u636e\u5b83\u7684\u5b9a\u4e49\uff0c\u6811\u7684\u91cd\u5fc3\u4e00\u5b9a\u662f\u6700\u5927\u5b50\u6811\u6700\u5c0f\u7684\u70b9\u3002\n\n~~\u611f\u6027\u7406\u89e3\u5373\u53ef~~\n\n\u4e8e\u662f\u7167\u7740\u6c42\u5c31\u53ef\u4ee5\u4e86\u554a\u3002\n\n\u4f46\u662f\u6211\u4eec\u8981\u591a\u6b21\u6c42\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u52a0\u4e00\u4e2a\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8bbf\u95ee\n\n`vis[]`\u6216\u8005`fw[]`\u5c31\u53ef\u4ee5\u4e86\n\n\n\n\u4e8e\u662f\u6574\u4e2a\u4ee3\u7801\u5982\u4e0b\n\n```cpp\ninline void getzx(int t,int fat)\n{\n\tint i,j;\n\tsz[t]=1;\n\tmaxp[t]=0;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tif(j==fat||vis[j]) continue;\n\t\tgetzx(j,t);\n\t\tsz[t]+=sz[j];\n\t\tmaxp[t]=max(sz[j],maxp[t]);\n\t}\n\tmaxp[t]=max(maxp[t],tot-sz[t]);\n\tif(maxp[t]<maxp[rt]) rt=t;\n}\n```\n\n### \u70b9\u5206\u6cbb\u600e\u4e48\u505a\n\n\u6211\u4eec\u53ea\u9700\u8981\u4e0d\u65ad\u5bfb\u627e\u91cd\u5fc3\uff0c\u7528\u8fd9\u4e9b\u91cd\u5fc3\u6765\u8ba1\u7b97\u6211\u4eec\u8981\u7684\u7b54\u6848\n\n\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n\u73b0\u5728\u8fd9\u91cc\u6709\u4e00\u68f5\u6811\n\n(\u5047\u5b9a\u84dd\u8272\u662f\u672a\u88ab\u5904\u7406\u7684\u70b9\uff0c\u7ea2\u8272\u662f\u5f53\u524d\u5b50\u6811\u7684\u91cd\u5fc3\uff0c\u7eff\u8272\u662f\u5904\u7406\u5b8c\u7684\u70b9)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mf557a06.png)\n\n\u5148\u627e\u5230\u5168\u5c40\u91cd\u5fc3\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ewoqneh1.png)\n\n\u7136\u540e\u5bf9\u4ed6\u7684\u5b50\u6811\uff0c\u4e5f\u8fd9\u6837\u627e\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mkr8k3al.png)\n\n\u4e00\u76f4\u63a5\u4e0b\u53bb![](https://cdn.luogu.com.cn/upload/image_hosting/jgxw6a0z.png) \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t1ajduki.png)\n\n\u7136\u540e\u505a\u5b8c\u4e86\u3002\n\n\u7b49\u4e00\u4e0b\uff0c\u8fd9\u4e0d\u662f\u5927\u90e8\u5206\u70b9\u90fd\u88ab\u626b\u8fc7\u4e86\u5417\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u600e\u4e48\u8fd8\u4f1a\u662f$O (NlogN)$?\n\n\u7684\u786e\uff0c\u8fd9\u5f20\u56fe\u4e2d\u5927\u90e8\u5206\u5e97\u90fd\u88ab\u626b\u5230\u4e86\uff0c\u800c\u4e14\u90fd\u6c42\u4e86\u91cd\u5fc3\uff0c\u4f46\u662f\u5982\u679c\u6bcf\u6761\u8fb9\u4e2d\u95f4\u8fde\u63a51000\u4e2a\u70b9\uff0c\u53ea\u6709m,i,h\u4e09\u6761\u8fb9\u88ab\u5904\u7406\u7684\u91cd\u5fc3\u589e\u591a\u4e86\u3002\n\n\u589e\u591a\u4e86\u591a\u5c11\u5462\uff1f\n\n\u6bcf\u6761\u8fb9\u572810\u5de6\u53f3\u3002\n\n~~\u73b0\u5728\u4f60\u611f\u6027\u7406\u89e3\u5230\u4e86\u590d\u6742\u5ea6\u4e86\u5427~~\n\n\u7531\u4e8e\u4e4b\u524d\u6709\u4e00\u4e2a\u63a8\u8bba\n\n>\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u91cc\u63a8\u5f97\u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u7684\u4efb\u610f\u4e00\u9897\u5b50\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7$n/2$\n\n\u6bcf\u6b21\u6811\u7684\u5927\u5c0f\u4f1a\u53d8\u5f97\u4e0d\u8d85\u8fc7\u539f\u6765\u7684\u4e00\u822c\uff0c$log_2N$\u6b21\u540e\u6811\u7684\u5927\u5c0f\u5c31\u4f1a\u53d8\u62101,\u6bcf\u4e00\u6b21\u6700\u591a\u904d\u5386\u6574\u68f5\u6811$O(N)$,\u590d\u6742\u5ea6\u5c31\u5f97\u5230$O (NlogN)$?\u4e86\n\n~~\u4e0d\u4fe1\uff1f\u6211\u4eec\u7528\u968f\u673a\u51e0\u5341\u7ec4\u6570\u636e\u770b\u770b~~\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rzrxvvs2.png)\n\n\u6570\u636e\u751f\u6210\u5668\u653e\u5728[\u8fd9\u91cc](https://www.luogu.com.cn/paste/s4faznxw)\n\n\u6d4b\u8bd5\u7528\u7684\u4ee3\u7801\u653e\u5728[\u8fd9\u91cc](https://www.luogu.com.cn/paste/gz2rcwai) \u6539\u81ea[P2634 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u806a\u806a\u53ef\u53ef](https://www.luogu.com.cn/problem/P2634)\n\n\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u6a21\u677f\u4ee3\u7801\n\n```cpp\ninline void solve(int t)\n{\n\tint i,j;\n\tvis[t]=judge[0]=1; calc(t);  //\u8fdb\u884c\u8ba1\u7b97\uff0c\u6709\u65f6\u5019\u8981\u7528\u5230\u5bb9\u65a5\u539f\u7406\u3002\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tif(vis[j]) continue;\n\t\ttot=sz[j];\n\t\tmaxp[rt=0]=bign;\n\t\tgetzx(j,0);  //\u7ee7\u7eed\u5bfb\u627e\u91cd\u5fc3\n\t\tsolve(rt);\n\t}\n}\n```\n\n\n\n### \u4f8b\u9898\n\n#### P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\n\n\u5927\u610f\n\n>\u7ed9\u5b9a\u4e00\u68f5\u6709n\u4e2a\u70b9\u7684\u6811\n>\n>\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u4e3ak\u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728\u3002\n\n\u5176\u5b9e\u662f\u5f88\u65e0\u8111\u7684\u4e24\u4e2a\u6876\uff0c\u4e00\u4e2a`judge[]`\u548c\u4e00\u4e2a`tmp[]`\uff0c`judge`\u5b58\u975e\u672c\u8def\u5f84\u4e0a\u957f\u5ea6\u80fd\u8fbe\u5230\u7684\u6570\u5b57\uff0c`tmp[]`\u5b58\u672c\u8def\u5f84\u4e0a\u80fd\u8fbe\u5230\u7684\u6570\u5b57\uff0c\u628a\u6b64\u65f6\u91cd\u5fc3\u770b\u505aLCA\uff0c\u4e8e\u662f\u82e5tmp[]\u4e2d\u4e00\u4e2a\u6570+judge[]\u4e00\u4e2a\u6570=k,\u5c31\u8bf4\u660e\u8def\u5f84\u5b58\u5728\u3002\n\n\u63a5\u7740\uff0c\u8fd9\u6761\u8def\u5f84\u904d\u5386\u5b8c\u540e\uff0c\u628atmp\u7684\u6570\u5b57\u8f6c\u79fb\u5230judge\u91cc\u9762\n\n\u8fd9\u4e2a\u5730\u65b9\u6211\u4eec\u627e\u5b8c\u4e86\uff0c\u53ea\u9700\u8981\u628ajudge\u91cc\u9762\u7684\u6570\u5b57\u6e05\u7a7a\u5373\u53ef\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4ee3\u7801\u4e86\n\n```cpp\n#include<touwenjian.h> \n\nusing namespace std;\n\nconst int maxn=10010,bign=10001000;\n\nint n,m,tmp[bign],judge[bign];\nint sz[maxn],vis[maxn];\nint head[maxn],que[maxn];\nint size,maxp[maxn];\nint tot,rt,dis[maxn];\nint q[bign],ynn[maxn];\n\nstruct edge{\n\tint next,to,dis;\n}e[maxn*2];\n\ninline void addedge(int next,int to,int dis)\n{\n\te[++size].to=to;\n\te[size].dis=dis;\n\te[size].next=head[next];\n\thead[next]=size;\n}\n\ninline void getzx(int t,int fat)\n{\n\tint i,j;\n\tsz[t]=1;\n\tmaxp[t]=0;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tif(j==fat||vis[j]) continue;\n\t\tgetzx(j,t);\n\t\tsz[t]+=sz[j];\n\t\tmaxp[t]=max(sz[j],maxp[t]);\n\t}\n\tmaxp[t]=max(maxp[t],tot-sz[t]);\n\tif(maxp[t]<maxp[rt]) rt=t;\n}\n\ninline void getdis(int t,int fat)\n{\n\ttmp[++tmp[0]]=dis[t];\n\tint i,j,k;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tk=e[i].dis;\n\t\tif(vis[j]||j==fat) continue;  //vis\u548cfat\u9650\u5236\u4e86\u8fd9\u4e2a\u5b50\u6811\u53ea\u80fd\u5411\u4e0b\u904d\u5386\u3002\n\t\tdis[j]=dis[t]+k;\n\t\tgetdis(j,t);\n\t}\n}\n\ninline void calc(int t)\n{\n\tint p=0,i,j,k,l;\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tk=e[i].dis;\n\t\tif(vis[j]) continue;\n\t\ttmp[0]=0;\n\t\tdis[j]=k;\n\t\tgetdis(j,t);\n\t\tfor(k=tmp[0];k;k--)\n\t\tfor(l=1;l<=m;l++) if(que[l]>=tmp[k]) ynn[l]|=judge[que[l]-tmp[k]];  \n\t\tfor(k=tmp[0];k;k--) q[++p]=tmp[k],judge[tmp[k]]=1;  \n\t}\n\tfor(i=p;i;i--) judge[q[i]]=0; \n}\n\ninline void solve(int t)\n{\n\tint i,j;\n\tvis[t]=judge[0]=1; calc(t);\n\tfor(i=head[t];i;i=e[i].next)\n\t{\n\t\tj=e[i].to;\n\t\tif(vis[j]) continue;\n\t\ttot=sz[j];\n\t\tmaxp[rt=0]=bign;\n\t\tgetzx(j,0);\n\t\tsolve(rt);\n\t}\n}\n\nint main()\n{\n\tios::sync_with_stdio(false);\n\tregister int i,h;\n\tint t1,t2,t3;\n\tcin>>n>>m;\n\tfor(i=1;i<n;i++)\n\t{\n\t\tcin>>t1>>t2>>t3;\n\t\taddedge(t1,t2,t3);\n\t\taddedge(t2,t1,t3);\n\t}\n\tfor(i=1;i<=m;i++) cin>>que[i];\n\tmaxp[rt=0]=n;\n\ttot=n;\n\tgetzx(1,0);\n\tsolve(rt);// \u6bcf\u6b21solve\u4ece\u91cd\u5fc3\u5f00\u59cb\n\tfor(i=1;i<=m;i++) \n\t{\n\t\tif(ynn[i]) cout<<\"AYE\"<<endl;\n\t\telse cout<<\"NAY\"<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1579005969,
        "uid": 38636,
        "name": "\u5bd2\u51b0\u5927\u5927",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "## [\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10485482.html)\n\n\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u5e26\u6743\u65e0\u6839\u6811\uff0c\u95ee\u662f\u5426\u6709\u70b9\u5bf9\u7684\u8ddd\u79bb\u4e3ak\n\n\u66b4\u529b\u7684\u505a\u6cd5\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u70b9\u5bf9\uff0c\u6811\u4e0a\u5dee\u5206\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u4e3a$O(n^2logn)$\uff0c\u663e\u7136\u8fd8\u9700\u8981\u4f18\u5316\n\n\u6709\u4e00\u4e2a~~\u663e\u7136~~\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u70b9\u6240\u5939\u6210\u7684\u8def\u5f84\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n$1.$\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\n\n$2.$\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\n\n\u5bf9\u4e0e\u7b2c\u4e00\u7c7b\u8def\u5f84\uff0c$dis[u->v] = dis[u->rt] + dis[v ->rt]$\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u8def\u5f84\uff0c~~\u6211\u4eec\u53ef\u4ee5\u6c42\u51faLCA\u5728\u8fdb\u884c\u8ba8\u8bba~~\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u9012\u5f52\u4e0b\u53bb\uff0c\u627e\u5230\u53e6\u4e00\u4e2art\uff0c\u628a\u4ed6\u8f6c\u5316\u6210\u7b2c\u4e00\u7c7b\u8def\u5f84\u6765\u8ba8\u8bba\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u9012\u5f52\u4e0b\u53bb\u7684\u590d\u6742\u5ea6\u662f\u548c\u6df1\u5ea6\u6709\u5173\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c3d\u91cf\u7684\u51cf\u5c0f\u6df1\u5ea6\u6765\u4f18\u5316\u590d\u6742\u5ea6\uff0c\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u90fd\u6709\u4e00\u4e2a**\u91cd\u5fc3**\uff08\u5220\u6389\u91cd\u5fc3\u540e\u5269\u4e0b\u7684\u5b50\u6811\u5c3d\u53ef\u80fd\u5730\u5e73\u8861\uff08\u5206\u51fa\u6765\u7684\u6700\u5927\u5b50\u6811\u7684$size$\u5c3d\u53ef\u80fd\u5730\u5c0f\uff09\uff09\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bf9\u4e8e\u8fd9\u5f20\u56fe\uff0c\u6df1\u5ea6\u8fbe\u5230\u4e866\uff0c\u663e\u7136\u4e0d\u591f\u4f18\u79c0\n![](https://cdn.luogu.com.cn/upload/pic/53294.png)\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u4ee55\u4e3a\u6839\uff0c\u6811\u5c31\u4f1a\u53d8\u6210\u8fd9\u6837\uff0c\u6df1\u5ea6\u53d8\u4e3a\u4e864\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/53298.png)\n\n\u53ef\u89c1\u6839\u7684\u9009\u62e9\u662f\u5bf9\u590d\u6742\u5ea6\u6709\u5f71\u54cd\u7684\uff0c\u5982\u679c\u6570\u636e\u8db3\u591f\u5927\uff0c~~\u51fa\u9898\u4eba\u8db3\u591f\u6bd2\u7624~~\uff0c\u90a3\u4e48\u5f71\u54cd\u663e\u7136\u8fd8\u4f1a\u66f4\u5927\n\n\u90a3\u91cd\u5fc3\u8981\u600e\u4e48\u7740\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6811\uff08mo\uff09\u5f62\uff08ni\uff09DP\u7684\u601d\u60f3\u6765\u505a\uff0c\u5373\u627e\u5230\u8be5\u8282\u70b9\u6240\u6709\u7684\u5b50\u6811\uff0c\u627e\u5230\u6700\u5927\u7684\u54ea\u4e00\u68f5\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nil void getroot(int u, int fr)\n{\n\tdp[u] = 0, size[u] = 1;\n\tNext(i, u)//\u627e\u5230\u6240\u6709\u4e0eu\u76f8\u8fde\u7684\u8fb9\n\t{\n\t\tint v = e[i].v;\n\t\tif(v == fr || vis[v]) continue;\n\t\tgetroot(v, u);\n\t\tsize[u] += size[v];\n\t\tdp[u] = max(dp[u], size[v]);\n\t}\n\tdp[u] = max(dp[u], sum - size[u]);//\u8fd8\u6709\u4e00\u68f5\u4ee5\u5176\u7236\u4eb2\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\n\tif(dp[u] < dp[root]) root = u;//\u627e\u5230\u6700\u4f18\u7684\u6839\n}\n```\n\n\u627e\u5230**\u91cd\u5fc3**\u540e\uff0c\u6211\u4eec\u4e0d\u65ad\u7684\u9012\u5f52\uff0c\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u4e5f\u8981\u4e0d\u65ad\u5bfb\u627e\u91cd\u5fc3\u6765\u4f18\u5316\u590d\u6742\u5ea6\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nil void solve(int u)\n{\n\tvis[u] = pd[0] = 1, doit(u);//doit\u8868\u793a\u505a\u4e00\u4e9b\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\tdp[0] = n, sum = size[v], root = 0;\n\t\tgetroot(v, u), solve(root);\n\t}\n}\n```\n\n\u90a3\u4e48doit\u8981\u600e\u4e48\u5199\u5462\uff1f\n\n\u7531\u4e8e\u6211\u4eec\u4fdd\u8bc1\u4e86\u6240\u6709\u7684\u6811\u90fd\u662f\u7b2c\u4e00\u79cd\u6811\uff08\u7ecf\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\uff0c\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u53ef\u80fd\u51fa\u73b0\u7684\u8ddd\u79bb\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\nil void getdis(int u, int fr)\n{\n\trev[++ tot] = dis[u];\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v == fr || vis[v]) continue;\n\t\tdis[v] = dis[u] + e[i].w;\n\t\tgetdis(v, u);\n\t}\n}\n```\n\u6c42\u51fa\u4e86\u6240\u6709\u8ddd\u79bb\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5408\u5e76\u7b54\u6848\u4e86\uff0c\u628a\u4efb\u610f\u4e24\u4e2a\u51fa\u73b0\u7684\u8ddd\u79bb\u51d1\u5728\u4e00\u8d77\uff0c\u5e76\u5224\u65ad\u53ef\u5426\u51d1\u51fa\u6211\u4eec\u9700\u8981\u7684k\u5373\u53ef\uff08\u6ce8\u610f\u590d\u539f\u7684\u65f6\u5019\u4e0d\u8981\u7528memset\uff0c\u4e0d\u7136\u590d\u6742\u5ea6\u5c31\u662f$O(n^2)$\u4e86\uff09\n```\nil void doit(int u)\n{\n\tint c = 0;\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\ttot = 0, dis[v] = e[i].w, getdis(v, u);\n\t\trep(j, 1, tot) rep(k, 1, m) if(query[k] >= rev[j]) pax[k] |= pd[query[k] - rev[j]];\n\t\trep(j, 1, tot) q[++ c] = rev[j], pd[rev[j]] = 1;\n\t}\n\trep(i, 1, c) pd[q[i]] = 0;\n}\n```\n\u6240\u6709\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n//#define int long long\n#define inf 123456789\n#define mod 1000000007\nil int read()\n{\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define rep(i, s, t) for(re int i = s; i <= t; ++ i)\n#define drep(i, s, t) for(re int i = t; i >= s; -- i)\n#define Next(i, u) for(re int i = head[u]; i; i = e[i].next)\n#define lb(x) (x)&(-(x))\n#define ls k * 2\n#define rs k * 2 + 1\n#define _ 10005\n#define ___ 10000005\n#define __ 105\nstruct edge{int v, next, w;}e[_ << 1];\nint n, m, head[_], cnt, dp[_], tot, size[_], sum, root;\nint dis[_], vis[_], pd[___], rev[_], pax[__], q[_], query[__];\nil void add(int u, int v, int w){e[++ cnt] = (edge){v, head[u], w}, head[u] = cnt;}\nil void getroot(int u, int fr)\n{\n\tdp[u] = 0, size[u] = 1;\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v == fr || vis[v]) continue;\n\t\tgetroot(v, u);\n\t\tsize[u] += size[v];\n\t\tdp[u] = max(dp[u], size[v]);\n\t}\n\tdp[u] = max(dp[u], sum - size[u]);\n\tif(dp[u] < dp[root]) root = u;\n}\nil void getdis(int u, int fr)\n{\n\trev[++ tot] = dis[u];\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v == fr || vis[v]) continue;\n\t\tdis[v] = dis[u] + e[i].w;\n\t\tgetdis(v, u);\n\t}\n}\nil void doit(int u)\n{\n\tint c = 0;\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\ttot = 0, dis[v] = e[i].w, getdis(v, u);\n\t\trep(j, 1, tot) rep(k, 1, m) if(query[k] >= rev[j]) pax[k] |= pd[query[k] - rev[j]];\n\t\trep(j, 1, tot) q[++ c] = rev[j], pd[rev[j]] = 1;\n\t}\n\trep(i, 1, c) pd[q[i]] = 0;\n}\nil void solve(int u)\n{\n\tvis[u] = pd[0] = 1, doit(u);\n\tNext(i, u)\n\t{\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\tdp[0] = n, sum = size[v], root = 0;\n\t\tgetroot(v, u), solve(root);\n\t}\n}\nint main()\n{\n\tfile(a);\n\tdp[0] = sum = n = read(), m = read();\n\trep(i, 1, n - 1) {int u = read(), v = read(), w = read(); add(u, v, w), add(v, u, w);}\n\trep(i, 1, m) query[i] = read();\n\tgetroot(1, 0), solve(root);\n\trep(i, 1, m) puts(pax[i] ? \"AYE\" : \"NAY\");\n\treturn 0;\n}\n```",
        "postTime": 1551872159,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u5148\u6302\u4e00\u4e2a\u535a\u5ba2[Youngsc](https://youngscc.github.io/)\n\n\u5b66\u4e86~~\u6dc0\u7c89\u8d28~~\u8fd9\u79cd\u4e1c\u897f\u611f\u89c9\u5c31\u662f\u795e\u5947\uff0c\u611f\u89c9\u81ea\u5df1\u5199\u7684\u660e\u660e\u4f1aT\u4f46\u6700\u540erank1...\n\n\u65e2\u7136\u662f\u70b9\u5206\u6cbb\uff0c\u90a3\u4e48\u5c31\u5148\u5957\u4e00\u4e2a\u677f\u5b50\uff0c\u6838\u5fc3\u5c31\u662fwork\u51fd\u6570\u3002\n\nwork\u91cc\u600e\u4e48\u5199\u5462\uff1f \u5047\u8bbe\u6211\u4eec\u8981\u627e\u7684\u8ddd\u79bb\u662f$l$,\u6211\u4eec\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u5b50\u6811\u91cc\u7684\u70b9\u6bcf\u4e00\u4e2a\u70b9\u5230\u5b50\u6811\u91cd\u5fc3\u7684\u8ddd\u79bb(\u5982\u679c\u4e0d\u77e5\u9053\u91cd\u5fc3\u4ec0\u4e48\u53ef\u4ee5\u5148\u53bb\u5b66\u4e00\u4e0b\uff0c\u8fd9\u91cc\u63a8\u8350\u4e00\u7bc7\u7f51\u4e0a\u7684\u535a\u5ba2[\u8fd9\u91cc](http://blog.csdn.net/ALPS233/article/details/51398629)\uff0c\u8bb2\u7684\u8fd8\u662f\u6bd4\u8f83\u6e05\u6670\u7684ORZ)\uff0c\u5e76\u5c06\u8fd9\u4e9b\u8ddd\u79bb\u548c\u5bf9\u5e94\u7684\u70b9\u5c5e\u4e8e\u4e2d\u5fc3\u7684\u54ea\u4e00\u4e2a\u513f\u5b50\u4e0b\u9762\u6253\u5305\u5728\u4e00\u8d77\uff0c\u6309\u7167\u8ddd\u79bb\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7136\u540e\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8ddd\u79bb\uff0c\u5e76\u4e14\u4e8c\u5206\u67e5\u627e\u80fd\u4e0e\u5176\u7ec4\u5408\u4e3a$l$\u7684\u8ddd\u79bb\u3002\u5e76\u4ece\u4e2d\u6311\u9009\u51fa\u4e00\u4e2a\u6240\u5c5e\u513f\u5b50\u4e0d\u540c\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48$l$\u5c31\u627e\u5230\u4e86\u3002\n\n\u542c\u8d77\u6765\u8c8c\u4f3c\u590d\u6742\u5ea6\u5f88\u9ad8\u7684\u6837\u5b50\uff0c\u4f46\u662f\u9274\u4e8e\u70b9\u5206\u6cbb\u80fd\u5c06\u4e00\u68f5\u6811\u5c3d\u53ef\u80fd\u5730\u5206\u6210\u8f83\u4e3a\u5e73\u8861\u7684\u51e0\u68f5\u5b50\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230$O(nlog^2n)$\uff0c\u5f53\u7136\u5177\u4f53\u662f\u5c06\u590d\u6742\u5ea6\u56e0\u9898\u76ee\u800c\u5f02\u3002\n\n\n### \u4ee3\u7801\u5728\u8fd9\u91cc\n\n\n```cpp\n# include <algorithm>\n# include <iostream>\n# include <cstring>\n# include <cstdio>\n# include <cmath>\n# define R register\n# define LL long long\n# define N 10010\n\nusing namespace std;\n\nint n,m,num,e,x,y,z,a[110],rt,size,siz[N],f[N],h[N];\nbool ans[110],vis[N];\n\nstruct zx{int v,w,pre;}ed[N<<1];\nstruct yy{int d,w;} dis[N];\n\ntemplate <typename T> inline void maxx(R T& a,const T b){a<b? a=b:0;}\n\ntemplate <typename T> inline void in(R T& a){\n    R char c=getchar();R T x=0,f=1;\n    while(!isdigit(c)){if(c=='-') f=-1; c=getchar();}\n    while(isdigit(c)) x=(x<<1)+(x<<3)+c-'0',c=getchar();\n    a=x*f;\n}\n\ninline bool cmp(R yy a,R yy b){return a.d<b.d;}\n\ninline void add(R int x,R int y,R int z){\n    ed[++e]=(zx){y,z,h[x]};\n    h[x] = e;\n}\n\ninline int search(R int x){//\u4e8c\u5206\u67e5\u627e\n    R int ret=0;\n    R int l=1,r=num;\n    while(l<=r){\n        R int mid = l+r>>1;\n        if(dis[mid].d<x) l=mid+1;\n        else ret=mid,r=mid-1;\n    }\n    return ret;\n}\n\ninline void getroot(R int x,R int fa){//\u627e\u91cd\u5fc3\n    f[x] = 0;\n    siz[x] = 1;\n    for(R int i=h[x]; i; i=ed[i].pre){\n        R int p=ed[i].v;\n        if(vis[p]||p==fa) continue;\n        getroot(p,x);\n        maxx(f[x],siz[p]);\n        siz[x] += siz[p];\n    }\n    maxx(f[x],size-siz[x]);\n    if(f[x] < f[rt]) rt = x;\n}\n\ninline void dfs(R int x,R int fa,R int wh,R int d){\n    dis[++num] = (yy){d,wh};\n    for(R int i=h[x]; i; i=ed[i].pre)\n    {\n        R int p=ed[i].v;\n        if(vis[p]||p==fa) continue;\n        dfs(p,x,wh,d+ed[i].w);\n    }\n}\n\ninline void work(R int x){\n    num=0;\n    for(R int i=h[x]; i; i=ed[i].pre)\n    {\n        R int p=ed[i].v;\n        if(vis[p]) continue;\n        dfs(p,x,p,ed[i].w);\n    }\n    dis[++num] = (yy){0,0};\n    sort(dis+1,dis+num+1,cmp);\n    // for(R int i=1; i<=num; ++i) printf(\"%d \",dis[i].d);\n    // printf(\"\\n\");\n    for(R int i=1; i<=m; ++i)\n    {\n        if(ans[i]) continue;\n        R int l=1;//meet \n        while(l<num&&dis[l].d+dis[num].d<a[i]) l++;\n        while(l<num&&!ans[i]){\n            if(a[i]-dis[l].d<dis[l].d) break;\n            R int pot=search(a[i]-dis[l].d);\n            while(l<=num&&dis[pot].d+dis[l].d==a[i]&&dis[pot].w==dis[l].w) pot++;\n            if(dis[pot].d+dis[l].d==a[i]) ans[i]=1;\n            l++;\n        }\n    }\n    // printf(\"\\n_______________\\n\");\n}\n\ninline void solve(R int x){\n    vis[x] = 1;\n    work(x);\n    for(R int i=h[x]; i; i=ed[i].pre){\n        R int p=ed[i].v;\n        if(vis[p]) continue;\n        rt = 0;\n        siz[rt] = size = siz[p];\n        getroot(p,0);\n        solve(rt);\n    }\n}\n\nint main(){\n    in(n);in(m);\n    for(R int i=1; i<n; ++i){\n        in(x),in(y),in(z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    for(R int i=1; i<=m; ++i) in(a[i]);\n    f[rt] = size = n;\n    getroot(1,0);\n    solve(rt);\n    for(R int i=1; i<=m; ++i)\n        if(ans[i]) printf(\"AYE\\n\");\n        else printf(\"NAY\\n\");\n}\n#### (\u51cf\u5c11\u4ee3\u7801\u590d\u5236\uff0c\u5171\u521b\u7f8e\u597d\u6d1b\u8c37)\n\n```",
        "postTime": 1513428652,
        "uid": 36282,
        "name": "Youngsc",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u70b9\u5206\u6cbb\uff1f\u6ca1\u542c\u8bf4\u8fc7\uff0c\u8fd8\u662f\u5199\u4e00\u53d1**DSU On Tree\uff08\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff09**\u597d\u4e86~\n\n\u4e2a\u4eba\u62d9\u89c1\uff0c**DSU On Tree**\u4e3b\u8981\u662f\u89e3\u51b3\u4e00\u4e9b**\u9759\u6001**\u7684**\u5b50\u6811\u4fe1\u606f\u67e5\u8be2**\u7684\u95ee\u9898\uff0c\u5f53\u7136\u901a\u8fc7\u4e00\u4e9b\u9a9a\u64cd\u4f5c\u53ef\u4ee5\u62d3\u5c55\u3002\u62d3\u5c55\u5230\u8def\u5f84\u6700\u5e38\u89c1\u7684\u5957\u8def\u5c31\u662f**\u5f3a\u5236\u8be5\u8def\u5f84\u7ecf\u8fc7\u5f53\u524d\u5b50\u6811\u6839\u8282\u70b9**\uff0c\u7136\u540eDFS\u679a\u4e3e\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\u3002\n\n\u70b9\u5206\u6cbb\u7684\u601d\u60f3\u4e3b\u8981\u662f\u5bfb\u627e\u91cd\u5fc3\u4f5c\u4e3a\u6839\u8282\u70b9\u4ee5\u4f18\u5316\u590d\u6742\u5ea6\uff0c\u542f\u53d1\u5f0f\u7684\u601d\u60f3\u5219\u7c7b\u4f3c\u6811\u94fe\u5256\u5206\uff0c\u6bcf\u6b21\u8ba1\u7b97\u8d21\u732e\u65f6\u5148\u679a\u4e3e\u8f7b\u513f\u5b50\uff0c\u8ba1\u7b97\u540e**\u6e05\u9664\u8d21\u732e**\uff0c\u6700\u540e\u679a\u4e3e\u91cd\u513f\u5b50\uff0c\u8ba1\u7b97\u540e**\u4fdd\u7559\u91cd\u513f\u5b50\u7684\u4fe1\u606f**\uff0c\u6700\u540e\u4f9d\u6b21\u679a\u4e3e\u8f7b\u513f\u5b50\uff0c\u66b4\u529b\u5c06\u7b54\u6848\u8ba1\u5165\u8d21\u732e\u3002\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f$O(N\\log N)$\u7684\u3002\n\n~~\u7136\u800c\u53ea\u5199\u8fd9\u4e48\u591a\u8fc7\u4e0d\u4e86\u5ba1\u6838\uff0c\u6240\u4ee5~~\u63a5\u4e0b\u6765\u4ed4\u7ec6\u89e3\u91ca\u4e00\u4e0b\u7b97\u6cd5\u7684\u539f\u7406\uff01\u56e0\u4e3a\u7f51\u4e0a\u5176\u4ed6\u7684\u6559\u7a0b\u90fd\u592a\u7b80\u77ed\u4e86\uff01\u6240\u4ee5\u6211\u624d\u5b66\u4e86\u4e00\u6574\u5929\uff01\n\n\u9996\u5148\u5230\u5e95\u4e3a\u4ec0\u4e48\u8981\u6e05\u7a7a\u8f7b\u513f\u5b50\u7684\u8d21\u732e\uff1a\u6bd4\u5982\u672c\u6a21\u677f\u9898\u4e2d\uff0c\u6211\u4eec\u627e\u7684\u662f**\u5f3a\u5236\u7ecf\u8fc7\u5f53\u524d\u6839\u8282\u70b9\u7684\u8def\u5f84**\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u907f\u514d\u540c\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u8282\u70b9\u4e92\u76f8\u4e71\u8bbf\u95ee\uff0c\u624d\u8981\u6e05\u7a7a\u8f7b\u513f\u5b50\u7684\u8d21\u732e\u3002\n\n\u7136\u540e\u5c31\u662f\u8fd9\u79cd\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a\u4ec0\u4e48\u80fd\u4fdd\u8bc1\uff1f\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u8f7b\u513f\u5b50\u6211\u90fd\u8981\u4f7f\u7528\u4e00\u6b21\u66b4\u529b\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u88ab\u66b4\u529b\u7684\u6b21\u6570\u662f\u5b83\u5934\u9876\u4e0a\u8f7b\u513f\u5b50\u7684\u4e2a\u6570\u3002\u6839\u636e\u6811\u94fe\u5256\u5206\u7684\u57fa\u672c\u5e38\u8bc6\uff0c\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8f7b\u70b9\u4e2a\u6570\u662f$\\log$\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u6240\u6709\u70b9\u88ab\u8bbf\u95ee\u7684\u603b\u6b21\u6570\u662f$O(N\\log N)$\uff0c\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f$O(MN\\log N)$\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u7b97\u6cd5\u6bd4\u70b9\u5206\u6cbb\u597d\u7684\u5730\u65b9\u5728\u4e8e\uff1a\u7f16\u7801\u7279\u522b\u7b80\u5355\uff0c\u8c03\u8bd5\u7279\u522b\u7b80\u5355\uff0c\u800c\u4e14\u666e\u901a\u6570\u636e\u4e0b\u7684\u590d\u6742\u5ea6\u4e00\u5b9a\u6bd4\u70b9\u5206\u6cbb\u8981\u597d\uff08\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5934\u9876\u7684\u8f7b\u513f\u5b50\u4e2a\u6570\u8fdc\u5c11\u4e8e$\\log N$\uff09\uff0c\u5c24\u5176\u662f\u94fe\u7684\u60c5\u51b5\u4e0b\uff0cDSU On Tree\u66f4\u662f\u53ea\u8981\u7ebf\u6027\u590d\u6742\u5ea6\u3002\n\n\u653e\u4e00\u4e0b\u4ee3\u7801\uff08**\u4e0d\u5f00O2**\uff0c57ms\uff09\uff1a\n\n```\n#include <bits/stdc++.h>\n#define lld I64d\nusing namespace std ;\ninline long long Readin() {\n    long long K = 0 , F = 1 ; char C = ' ' ;\n    while( C < '0' or C > '9' ) F = C == '-' ? -1 : 1 , C = getchar() ;\n    while( C <= '9' and C >= '0' ) K = ( K << 1 ) + ( K << 3 ) + C - '0' , C = getchar() ;\n    return F * K ;\n}\nconst int MaxQ = 100 + 10 ;\nconst int MaxN = 10000 + 10 ;\nconst int MaxM = 20000 + 10 ;\nconst int MaxK = 10000000 + 10 ;\nint N , Q , Asks[MaxQ] ;\nbool Anss[MaxQ] ;\nint Cnt , Head[MaxN] , To[MaxM] , Next[MaxM] , Val[MaxM] ;\ninline void Add( int U , int V , int W ) {\n    Next[++Cnt] = Head[U] ;\n    Head[U] = Cnt ;\n    To[Cnt] = V ;\n    Val[Cnt] = W ;\n}\nint Fa[MaxN] , Size[MaxN] , D[MaxN] , Hson[MaxN] ;\nbool Apr[MaxK] ;\nint Depp ;\nvoid Dfs( int Nod ) {\n    Size[Nod] = 1 ;\n    for(register int i = Head[Nod] ; i ; i = Next[i] ) \n        if( To[i] ^ Fa[Nod] ) {\n            Fa[To[i]] = Nod ;\n            D[To[i]] = D[Nod] + Val[i] ;\n            Dfs( To[i] ) ;\n            if( Size[To[i]] > Size[Hson[Nod]] ) Hson[Nod] = To[i] ;\n            Size[Nod] += Size[To[i]] ;\n        }\n}\ninline void C( int Nod ) {\n    for(register int i = 0 ; ++i <= Q ; )\n        if( Asks[i] - D[Nod] + Depp >= 0 )\n            Anss[i] |= Apr[Asks[i]-D[Nod]+Depp] ;\n}\nvoid Calc( int Nod ) {\n    C( Nod ) ;\n    for(register int i = Head[Nod] ; i ; i = Next[i] )\n        if( To[i] ^ Fa[Nod] ) Calc( To[i] ) ;\n}\nvoid Upd( int Nod ) {\n    Apr[D[Nod]] = true ;\n    for(register int i = Head[Nod] ; i ; i = Next[i] )\n        if( To[i] ^ Fa[Nod] ) Upd( To[i] ) ;\n}\nvoid Clear( int Nod ) {\n    Apr[D[Nod]] = false ;\n    for(register int i = Head[Nod] ; i ; i = Next[i] )\n        if( To[i] ^ Fa[Nod] ) Clear( To[i] ) ;\n}\nvoid Dfs( int Nod , bool Tag ) {\n    for(register int i = Head[Nod] ; i ; i = Next[i] )\n        if( To[i] ^ Fa[Nod] and To[i] ^ Hson[Nod] ) Dfs( To[i] , true ) ;\n    if( Hson[Nod] ) Dfs( Hson[Nod] , false ) ;\n    Depp = D[Nod] << 1 ;\n    Apr[D[Nod]] = true ;\n    C( Nod ) ;\n    for(register int i = Head[Nod] ; i ; i = Next[i] )\n        if( To[i] ^ Fa[Nod] and To[i] ^ Hson[Nod] ) Calc( To[i] ) , Upd( To[i] ) ;\n    if( Tag ) Clear( Nod ) ;\n}\nint main() {\n    N = Readin() ;\n    Q = Readin() ;\n    for(register int i = 0 , U , V , W ; ++i < N ; ) {\n        U = Readin() ;\n        V = Readin() ;\n        W = Readin() ;\n        Add( U , V , W ) ;\n        Add( V , U , W ) ;\n    }\n    for(register int i = 0 ; ++i <= Q ; Asks[i] = Readin() ) ;\n    Dfs( 1 ) ;\n    Dfs( 1 , false ) ;\n    for(register int i = 0 ; ++i <= Q ; puts( Anss[i] ? \"AYE\" : \"NAY\" ) ) ;\n    return 0 ;\n}\n/*\n5 3\n1 2 1\n1 3 1\n2 4 2\n2 5 2\n1 2 3\n*/\n```",
        "postTime": 1548548308,
        "uid": 23323,
        "name": "\u7528\u6237\u5df2\u6ce8\u9500",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e00\u770b\u662f\u5728N^2\u6570\u91cf\u7ea7\u6761\u8def\u5f84\u4e2d\u627e\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6(\u8def\u5f84\u957f\u5ea6=100\u4e2a\u4e0d\u540c\u7684K)\u7684\u8def\u5f84\uff0c\u4e00\u770b\u5c31\u662f\u70b9\u5206\u6cbb\n\n\u7136\u800c\u70b9\u5206\u6cbb\u82e5\u662f\u5c0610^7\u4e2a\u53ef\u80fd\u8be2\u95ee\u5168\u90e8\u4e00\u6b21\u6027\u5237\u51fa\u6765O(1)\u56de\u7b54\u7684\u8bdd\u663e\u7136\u592a\u6162\u4e86\uff0c\u770b\u5230\u53ea\u6709100\u4e2a\u8be2\u95ee\u4e8e\u662f\u679c\u65ad\u53ea\u5904\u7406100\u4e2a\uff0c\u5f53\u7136\u4e5f\u4e0d\u662f\u4e00\u4e2a\u4e2a\u5904\u7406\uff0c\u5728\u70b9\u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u539f\u6765\u5e94\u8be5\u5237\u7b54\u6848\u7684\u5730\u65b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u90fd\u8bd5\u7740\u56de\u7b54\u4e00\u6b21\u5c31\u597d\u4e86\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <algorithm>\n#include <set>\nusing namespace std;\nconst int maxn=10005,maxe=20005;\nconst char U[2][8]={\"NAY\",\"AYE\"};\nint N,M,lnk[maxn],nxt[maxe],son[maxe],w[maxe],tot,Sigma,MaxSon[maxn],Size[maxn],Dis[maxn],Root,stk[maxn],top,K[105];\nbool vis[maxn],Ans[105];\nset<int> f;\ninline void add(int x,int y,int z){\n    son[++tot]=y,nxt[tot]=lnk[x],w[lnk[x]=tot]=z;\n}\ninline int read(){\n    char ch=getchar(); int res=0;\n    while (!isdigit(ch)) ch=getchar();\n    while (isdigit(ch)) res=(res<<3)+(res<<1)+ch-48,ch=getchar();\n    return res;\n}\nvoid GetRoot(int x,int fa){\n    MaxSon[x]=0,Size[x]=1;\n    for (int j=lnk[x];j;j=nxt[j]) if ((fa^son[j])&&!vis[son[j]]) GetRoot(son[j],x),Size[x]+=Size[son[j]],MaxSon[x]=max(MaxSon[x],Size[son[j]]);\n    MaxSon[x]=max(MaxSon[x],Sigma-Size[x]);\n    if (MaxSon[x]<MaxSon[Root]) Root=x;\n}\nvoid dfs(int x,int fa){\n    stk[++top]=Dis[x];\n    for (int j=lnk[x];j;j=nxt[j]) if ((son[j]^fa)&&!vis[son[j]]) Dis[son[j]]=Dis[x]+w[j],dfs(son[j],x);\n}\ninline int query(int x){\n//\u8fd9\u5c31\u662f\u7528\u6765\u5237\u7b54\u6848\u7684\n    for (int i=M;i;i--) Ans[i]|=*f.lower_bound(K[i]-x)==K[i]-x;\n}\nvoid Solve(int x){\n    vis[x]=1,f.clear(),f.insert(0);\n    for (int j=lnk[x];j;j=nxt[j]) if (!vis[son[j]]){\n        top=0,Dis[son[j]]=w[j],dfs(son[j],x);\n        for (int i=top;i;i--) query(stk[i]);\n        for (int i=top;i;i--) f.insert(stk[i]);\n    }\n    for (int j=lnk[x];j;j=nxt[j]) if (!vis[son[j]]) Root=0,Sigma=Size[son[j]],GetRoot(son[j],0),Solve(Root);\n}\nint main(){\n    N=read(),M=read();\n    for (int i=1,x,y,z;i<N;i++) x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);\n    for (int i=M;i;i--) K[i]=read();\n//\u5176\u5b9e\u6211\u521a\u5f00\u59cb\u8fd9\u53e5\u8bdd\u548c\u4e0b\u4e00\u884c\u8c03\u6362\u4e86\u4e00\u4e0b\u987a\u5e8f\uff08\u5f53\u7136\u5bf9\u62cd\u51fa\u6765\u4e86\uff09\uff0c\u7136\u540e\u8c03\u8bd5\u4e86\u597d\u4e45\u3002\u3002\u3002\n    MaxSon[Root=0]=Sigma=N,GetRoot(1,0),Solve(Root);\n    for (int i=M;i;i--) puts(U[Ans[i]]);\n//Ans[i]\u7528\u6765\u5b58\u7b54\u6848\u7684\n    return 0;\n}\n```\n\u8fd9\u6bb5\u4ee3\u7801\u8fd8\u7528\u5230\u4e86\u4e00\u4e2a\u7279\u6280\uff1aset\uff0c\u56e0\u4e3a\u53ef\u60f3\u800c\u77e5\uff0c\u671f\u671b\u4e0b\u53ef\u884c\u8def\u5f84\u6570\u4e0d\u4f1a\u592a\u591a\uff0c\u4e8e\u662f\u5728\u5927\u725b\u5206\u7ad9\u547c\u5438\u4e86\u65b0\u9c9c-O2\u7684\u7ea2\u9ed1\u6811set\u53d8\u5f97\u98de\u5feb\uff0c\u800c\u4e14\u5185\u5b58\u53c8\u5c0f\uff0c\u6e05\u7a7a\u8d77\u6765\u4e5f\u5f88\u65b9\u4fbf\uff0c\u968f\u6e05\u968f\u7528\n\u8fd9\u6bb5\u4ee3\u7801\u76ee\u524d\u5168\u7ad9rk1\uff0c108ms\uff0c\u5185\u5b582.11MB\uff0c\u5f53\u7136\u5982\u679c\u8be2\u95ee\u6b21\u6570\u591a\u7684\u8bdd\u697c\u4e0a\u7b97\u6cd5\u5c31\u66f4\u597d\u4e86\n",
        "postTime": 1502711045,
        "uid": 25188,
        "name": "X_o_r",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u70b9\u5206\u6cbb\u672c\u8d28\u4e0a\u5c31\u662f\u6811\u4e0a\u5e94\u7528\u5206\u6cbb\u601d\u60f3\u3002\n\n\u6bd4\u5982\u672c\u9898\u8def\u5f84\u957f\u5ea6\uff0c\u53ef\u4ee5\u5206\u4e3a\u8fc7\u6839\u548c\u5b58\u5728\u4e8e\u5b50\u6811\u5185\u4e24\u79cd\u3002\n\n\u8fc7\u6839\u7684\u6211\u4eec\u76f4\u63a5\u7b97\uff0c\u5b50\u6811\u5185\u7684\u6211\u4eec\u9012\u5f52\u5904\u7406\u3002\n\n\u4e3a\u4e86\u4f7f\u9012\u5f52\u66f4\u5feb\u7ed3\u675f\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u3002\n\n\u6dc0\u7c89\u8d28\u8fd8\u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9\uff1a\n\n1. \u5206\u6cbb\u7684\u65f6\u5019\u91cd\u65b0\u6c42\u91cd\u5fc3\u4e5f\u8981\u91cd\u65b0\u6c42\u5b50\u6811 size\uff08\u5176\u5b9e\u5c31\u662f\u7528\u4e00\u4e2a\u51fd\u6570\u5c31\u884c\u4e86\uff09\n\n1. \u70b9\u5206\u6cbb\u7684\u904d\u5386\u4e0e\u666e\u901a\u7684\u6811\u4e0d\u540c\uff0c\u8981\u5f00 vis \u6570\u7ec4\uff0c\u56e0\u4e3a\u904d\u5386\u987a\u5e8f\u4e0d\u662f\u6309\u6df1\u5ea6\u6765\u7684\n\n1. \u5206\u6cbb\u901a\u7528\u7684\u6613\u9519\u70b9\uff1a\u4e0d\u8981\u7528 memset\uff01\uff01\uff01\n\n[\u795e\u4ed9 niiick \u7684\u9898\u89e3\u8bb2\u7684\u592a\u597d\u4e86](https://www.luogu.com.cn/blog/niiick/solution-p3806)\n\n\uff08\u4f46\u662f\u6c42\u91cd\u5fc3\u7684\u51fd\u6570\u6709\u4e00\u70b9\u5199\u9519\u4e86233\uff09\n\n```cpp\n//coder: FeliksGM-YB\n#include<bits/stdc++.h>\n#define fu(i,a,b) for(int i = a, I = (b) + 1; i < I; ++i)\n#define fd(i,a,b) for(int i = a, I = (b) - 1; i > I; --i)\n#define go(x) for(int i=first[x],y=v[i];i;i=nex[i],y=v[i])\ntypedef long long ll;\nusing namespace std;\nconst int N=1e5+5;\nconst int M=1e7+5;\ninline int Max(int x,int y){\n\tif(x>y)return x;\n\treturn y;\n}\ninline int read(){\n    int x=0;char ch=getchar();\n    while(!isdigit(ch))ch=getchar();\n    while(isdigit(ch))x=(x<<1)+(x<<3)+ch-'0',ch=getchar();\n    return x;\n}int n,m,rt;//rt: \u91cd\u5fc3 \nint v[N<<1],nex[N<<1],first[N],w[N<<1],tot;\ninline void add(int x,int y,int z){\n    v[++tot]=y,w[tot]=z;\n    nex[tot]=first[x];\n    first[x]=tot;\n}int q[N];\nint mx[N],sum;\nint sz[N];\nbool vis[N];\nvoid getrt(int x,int f){//\u627e\u91cd\u5fc3 \n\tsz[x]=1;mx[x]=0;\n\tgo(x){\n\t\tif(y==f || vis[y])continue;\n\t\tgetrt(y,x);\n\t\tsz[x]+=sz[y];\n\t\tmx[x]=Max(mx[x],sz[y]);\n\t}mx[x]=Max(mx[x],sum-sz[x]);\n\tif(mx[x]<mx[rt])rt=x;\n}bool tes[N],ext[M];\nint dis[N],rem[N],cnt;\n//rem\u8bb0\u5f55\u5f53\u524d\u5b50\u6811\u4e2d\u627e\u5230\u7684\u8def\u5f84\u957f\u5ea6\u6709\u54ea\u4e9b \nvoid getdis(int x,int f){\n\trem[++cnt]=dis[x];\n\tgo(x){\n\t\tif(y==f || vis[y])continue;\n\t\tdis[y]=dis[x]+w[i];\n\t\tgetdis(y,x);\n\t}\n}int used[N],num;\ninline void calc(int x){\n\tnum=0;\n\tgo(x){\n\t\tif(vis[y])continue;\n\t\tcnt=0;dis[y]=w[i];\n\t\tgetdis(y,x);//\u5904\u7406\u8fd9\u68f5\u5b50\u6811\u91cc\u7684\u70b9\u5230\u6839 x \u7684\u8ddd\u79bb \n\t\tfu(j,1,cnt){\n\t\t\tfu(k,1,m){\n\t\t\t\tif(q[k]-rem[j]>=0 && q[k]-rem[j]<=1e7 &&\n\t\t\t\text[q[k]-rem[j]])tes[k]=1;\n\t\t\t\t//\u5982\u679c\u548c rem[j] \u548c\u4e3a q[k] \u7684\u8def\u5f84\u5b58\u5728 \n\t\t\t}\n\t\t}fu(j,1,cnt)//\u628a\u8fd9\u68f5\u5b50\u6811\u7684\u8def\u5f84\u957f\u5ea6\u4e5f\u8bb0\u4e3a\u5b58\u5728 \n\t\t\tif(rem[j]<=1e7)used[++num]=rem[j],ext[rem[j]]=1;\n\t\t//\u6211\u4e0d\u77e5\u9053niiick\u7684\u9898\u89e3\u6ca1\u6709\u5224 <=1e7 \u662f\u600e\u4e48\u8fc7\u7684 QwQ \u4f46\u5b83\u786e\u5b9e\u8fc7\u4e86\uff08\u4eb2\u6d4b\uff09 \n\t}fu(i,1,num)ext[used[i]]=0;//\u5206\u6cbb\u7684\u6e05\u96f6\u90fd\u4e0d\u80fd memset\uff01\uff01\uff01 \n}\nvoid solve(int x){\n\tvis[x]=ext[0]=1;\n\tcalc(x);//\u5904\u7406\u7ecf\u8fc7 x \u7684\u8def\u5f84 \n\tgo(x){//\u5206\u6cbb x \u4e3a\u6839\u7684\u8fd9\u68f5\u6811 \n\t\tif(vis[y])continue;\n\t\tmx[rt=0]=sum=sz[y];//\u8fd9\u91cc\u8981\u6ce8\u610f \n\t\tgetrt(y,0);solve(rt);\n\t}\n}\nint main(){\n    n=read(),m=read();\n    fu(i,1,n-1){\n        int x=read(),y=read(),z=read();\n        add(x,y,z),add(y,x,z);\n    }fu(i,1,m)q[i]=read();\n    mx[rt]=sum=n;\n    getrt(1,0);\n    solve(rt);//\u4ee5\u91cd\u5fc3\u4e3a\u6839\u5206\u6cbb \n    fu(i,1,m){\n    \tif(tes[i])puts(\"AYE\");\n    \telse puts(\"NAY\");\n\t}return 0;\n}//\u0398\n```\n",
        "postTime": 1583933160,
        "uid": 104292,
        "name": "YellowBean_Elsa",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "[\u535a\u5ba2](https://www.cnblogs.com/hbxblog/p/9826679.html)  \n\n\n\u6765\u770b\u4e00\u9053\u9898\n\n>\u7ed9\u5b9a\u4e00\u68f5\u6709n\u4e2a\u70b9\u7684\u6811  \n\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u4e3ak\u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728\u3002  \n\u5bf9\u4e8e30%\u7684\u6570\u636en<=100  \n\u5bf9\u4e8e60%\u7684\u6570\u636en<=1000,m<=50  \n\u5bf9\u4e8e100%\u7684\u6570\u636en<=10000,m<=100,c<=1000,K<=10000000  \n\n\u9996\u5148\u6765\u770b\u4e00\u4e0b30%\u7684\u70b9(\u4e0d\u8981\u8bf4\u592a\u7b80\u5355\u4e86\uff0c\u6709\u65f6\u5019\u66b4\u529b\u5f88\u6709\u7528)    \n\u4f46\u4e8b\u5b9e\u4e0a~~\u597d\u6c34\u554a~~  \n\u4e0d\u662fdfs\u7684\u9898\u5417\uff1f\u8fd9\u662f\u5728\u4f60\u4e0d\u4f1a\u4efb\u4f55\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\u4f60\u80fd\u505a\u7684\u70b9\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u70b9\u5bf9\uff0c\u5728\u7b97\u51fa\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7528\u4e00\u4e2a\u6807\u8bb0\u6570\u7ec4\u5c06\u8fd9\u4e2a\u8ddd\u79bb\u8d4b\u4e3a1\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u5224\u65ad\u8ddd\u79bb\u662f\u5426\u4e3a1\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837\u5c31\u597d\u4e86\uff0c\u5bf9\u4e8e\u849f\u84bb\u6765\u8bf4\uff0c\u4f1a\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u4e86,\u4f46\u662f\u5982\u679c\u4f60\u4e0d\u6ee1\u8db3\u8fd9\u70b9\u5206\uff0c\u7ee7\u7eed\u5f80\u4e0b\u770b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u63d0\u4f9b\u4ee3\u7801\u4e86\u3002\n\n\u5bf9\u4e8e60%\u7684\u70b9\u3002\n\u8fd9\u4e2a\u53ea\u8981\u4f60\u4f1a\u4e00\u70b9\u6570\u636e\u7ed3\u6784(lca)\u5c31\u591f\u5c31\u53ef\u4ee5\u505a\u4e86\uff0c\u5982\u679c\u4f60\u4e0d\u4f1a\uff0c[\u6233\u8fd9](https://www.luogu.org/problemnew/show/P3379) \u5982\u679c\u4f60\u4f1a\uff0c\u8fd9\u5c31\u7b80\u5355\u4e86,\u9996\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bbdis\u3002\u5728\u679a\u4e3e\u6240\u6709\u70b9\u5bf9\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c31\u662f`dis[a]+dis[b]-2*dis[lca(a,b)];`\u7528\u4e00\u4e2a\u6807\u8bb0\u6570\u7ec4\u5c06\u8fd9\u4e2a\u8ddd\u79bb\u8d4b\u4e3a1\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u5224\u65ad\u8ddd\u79bb\u662f\u5426\u4e3a1\u3002\u5f00\u6c27\u6c14(O2)\u53ef\u4ee5\u83b7\u5f9770\u5206\u3002\n```\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\nusing namespace std;\nint cnt=0,fa[500000],siz[500000],son[500000],dep[500000],top[500000],dfs[500000],head[500000],dis[500001];\nstruct node {\n    int to,next,v;\n} a[1000001];\nvoid add(int x,int y,int c) {\n    a[++cnt].to=y;\n    a[cnt].next=head[x];\n    a[cnt].v=c;\n    head[x]=cnt;\n}\nvoid dfs1(int u,int f,int depth) {\n    fa[u]=f;\n    siz[u]=1;\n    dep[u]=depth;\n    for(int i=head[u]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(v==f)\n            continue;\n        dis[v]=dis[u]+a[i].v;\n        dfs1(v,u,depth+1);\n        siz[u]+=siz[v];\n        if(siz[v]>siz[son[u]]||son[u]==0)\n            son[u]=v;\n    }\n}\nint js;\nvoid dfs2(int u,int t) {\n    top[u]=t;\n    if(son[u])\n        dfs2(son[u],t);\n    for(int i=head[u]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(v!=fa[u]&&v!=son[u])\n            dfs2(v,v);\n    }\n}\nint lca(int x,int y) {\n    while(top[x]!=top[y]) {\n        if(dep[top[x]]<dep[top[y]])\n            swap(x,y);\n        x=fa[top[x]];\n    }\n    return  dep[x]<dep[y]?x:y;\n}\nint bj[1000001];\nint main() {\n    int n,m,s,x,y,v,k;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<n; i++)\n        scanf(\"%d%d%d\",&x,&y,&v),add(x,y,v),add(y,x,v);\n    dfs1(1,0,1);\n    dfs2(1,1);\n    for(int i=1;i<=n;i++)\n      for(int j=i+1;j<=n;j++)\n            bj[dis[i]+dis[j]-2*dis[lca(i,j)]]=1;\n    for(int i=1;i<=m;i++)\n        scanf(\"%d\",&k),bj[k]?printf(\"AYE\\n\"):printf(\"NAY\\n\");\n}\n```\n\n\u5bf9\u4e8e100%\n\u5c31\u8981\u7528\u5230\u70b9\u5206\u6cbb\u4e86\uff0c\u73b0\u5728\u6765\u5f00\u59cb\u6b63\u5f0f\u8bb2\u4e00\u8bb2\u70b9\u5206\u6cbb\u3002\n\n![](https://s1.ax1x.com/2018/10/21/iBOPSA.jpg)\n\n\n\u5047\u8bbe\u73b0\u5728k\u4e3a5\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\u4f1a\u6709\u7b54\u6848\uff0c\u4e00\u79cd\u662f\u5728\u4ed6\u7684\u5b50\u6811\u4e2d\uff0c\u53e6\u4e00\u79cd\u662f\u4ece\u4e00\u4e2a\u8282\u70b9\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\u5e76\u4e14\u7a7f\u8fc7\u4ed6\u3002\u5982\u5bf9\u4e8e\u6839\u8282\u70b91,\u6709(1,6),(1,4)\uff0c\u800c\u5bf9\u4e8e\u6839\u8282\u70b92(\u662f\u5bf9\u4e8e\u5b50\u6811\u7684\u6839\u8282\u70b9)\uff0c\u6709(4,5)\u6ee1\u8db3\u6761\u4ef6\u3002\n    \n\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u600e\u4e48\u5904\u7406?\u5206\u70b9?\u592a\u9ebb\u70e6\u4e86\uff0c\u5176\u5b9e\u53ef\u4ee5\u628a\u8fd9\u4e24\u79cd\u6761\u4ef6\u770b\u4e3a\u4e00\u79cd\u6761\u4ef6\u3002\n1. \u5982\u679c\u7b54\u6848\u7a7f\u8fc7\u4ed6\uff0c\u5206\u6210\u4e24\u6761\u8def\u5f84\uff0c\u4ee5\u4e0a\u56fe\u4e2d\u7684(4,5)\u8bf4\uff0c\u53ef\u4ee5\u770b\u6210(2,4)+(2,5)\n2. \u5982\u679c\u7b54\u6848\u5728\u4ed6\u7684\u5b50\u6811\u4e2d\uff0c\u5219\u53ef\u4ee5\u770b\u6210\u4ece\u4ed6\u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u5230\u4ed6\u672c\u8eab\uff0c\u7a7f\u8fc7\u81ea\u5df1\uff0c\u5230\u8fbe\u4ed6\u81ea\u5df1\u3002\u4ee5(1,4)\u6765\u8bf4\uff0c\u53ef\u4ee5\u770b\u6210(1,4)+(1,1,)\u3002\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0\u3002\n\n\u90a3\u4e48\u6839\u8282\u70b9\u662f\u4ec0\u4e48\u5462\uff1f\u4e0d\u540c\u7684\u6839\u8282\u70b9\u6548\u7387\u4f1a\u4e0d\u540c\n\n![](http://cloud1.gaitubao.net/FnC6ESc01L4FBDSrnxSZNuwFljQk?imageMogr2/quality/90/thumbnail/378x378!)\n\n\u5bf9\u4e8e\u8fd9\u5f20\u56fe\u5f53\u4ee51\u4e3a\u66f4\u8282\u70b9\u7684\u65f6\u5019\u6211\u4eec\u8981\u9012\u5f52\u56db\u5c42,\u800c\u4ee53\u4e3a\u6839\u8282\u70b9\u8bdd\u53ea\u8981\u9012\u5f52\u4e24\u5c42\u3002\u6240\u4ee5\u8981\u6b63\u786e\u9009\u597d\u6839\u8282\u70b9\u3002\u90a3\u4e48\u4ec0\u4e48\u662f\u6700\u597d\u7684\u6839\u8282\u70b9\u5462\uff1f\u91cd\u5fc3\u3002\n\n###\u91cd\u5fc3\n\n\u4ec0\u4e48\u662f\u91cd\u5fc3\uff1f\u4e09\u89d2\u5f62\u5185\u4e09\u6761\u4e2d\u7ebf\u4ea4\u70b9\uff1f\n\u4f46\u662f\u8fd9\u91cc\u7684\u91cd\u5fc3\u4e0d\u662f\u6570\u5b66\u4e2d\u7684\u6982\u5ff5\u3002\n~~\u6811\u7684\u91cd\u5fc3\u4e5f\u53eb\u6811\u7684\u8d28\u5fc3\u3002\u627e\u5230\u4e00\u4e2a\u70b9,\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11,\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u91cd\u5fc3,\u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u6811\u5c3d\u53ef\u80fd\u5e73\u8861\u3002~~\n\n\u4e0a\u9762\u6765\u81ea\u767e\u5ea6\u767e\u79d1\n\u5b9e\u9645\u4e0a\u91cd\u5fc3\u53ef\u4ee5\u7528\u4e00\u53e5\u8bdd\u8bf4\u660e:\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u6811\u8282\u70b9\u6570\u6700\u5c11\n\u90a3\u4e48\u600e\u4e48\u6c42\u91cd\u5fc3\u5462\uff1f\u53ea\u8981\u4e00\u4e2a\u6811\u5f62dp\u5c31\u53ef\u4ee5\u4e86\uff0c\u63a5\u4e0b\u6765\u76f4\u63a5\u4e0a\u4ee3\u7801\uff0c\u76f8\u4fe1\u5e94\u8be5\u90fd\u80fd\u7406\u89e3\u5427\n\n\u5728\u4e0a\u4ee3\u7801\u4e4b\u524d\u5148\u7533\u660e\u4e00\u5199\u53d8\u91cf\u5b9a\u4e49\n```cpp\nint n,k;\nint ans[10000001];/*\u50a8\u5b58\u7b54\u6848*/\nint dis[N];/*\u4ece\u5f53\u524d\u8282\u70b9i\u5230\u679a\u4e3e\u5f53\u524d\u6811\u7684\u6839\u8282\u70b9\u7236\u4eb2\u7684\u8ddd\u79bb*/(\u8fd9\u91cc\u968f\u4fbf\u7406\u89e3\u4e00\u4e0b\u5427\uff0c\u6211\u8fd9\u4e48\u8bf4\u662f\u4e3a\u4e86\u540e\u9762\u7684\u5bb9\u65a5)\nint f[N];/*\u5f53\u4ee5i\u4e3a\u6839\u8282\u70b9\u65f6\u6700\u5927\u5b50\u6811\u5927\u5c0f*/\nint vis[N];/*i\u8282\u70b9\u662f\u5426\u88ab\u5f53\u6839\u4f7f\u7528\u8fc7*/\nint siz[N];/*\u4ee5i\u8282\u70b9\u4e3a\u6839\u65f6,\u5176\u5b50\u6811(\u5305\u62ec\u672c\u8eab)\u7684\u8282\u70b9\u4e2a\u6570*/\nint root;/*\u6839\u8282\u70b9*/\nint sum;/*\u8fd9\u68f5\u5f53\u524d\u9012\u5f52\u7684\u8fd9\u68f5\u6811\u7684\u5927\u5c0f*/\n```\n\n```cpp\nvoid findroot(int k,int fa) {\n    f[k]=0,siz[k]=1;\n    for(int i=head[k]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(vis[v]||v==fa)\n            continue;\n        findroot(v,k);\n        siz[k]+=siz[v];\n        f[k]=max(f[k],siz[v]);\n    }\n    f[k]=max(f[k],sum-siz[k]);\n    if(f[k]<f[root])\n        root=k;\n}\n```\n\n\u5bf9\u4e8e`f[k]=max(f[k],sum-siz[k]);`\u8fd9\u91cc\u6709\u5f88\u591a\u4eba\u4e0d\u77e5\u9053\u4ec0\u4e48\u610f\u601d\uff0c\u6211\u4e0b\u9762\u6765\u8bb2\u4e00\u4e0b\n\n\u7ee7\u7eed\u7528\u4e0a\u9762\u7684\u56fe\n![](http://wx3.sinaimg.cn/mw690/0060lm7Tly1fwdvewbidvj30a4092wej.jpg)\n\u5047\u8bbe\u4f60\u5df2\u7ecf\u9012\u5f52\u5230\u4e86\u8282\u70b92\uff0c\u4f60\u7684\u513f\u5b50\u67091,4,5(\u8fd9\u662f\u4e00\u4e2a\u65e0\u6839\u6811)\u3002\u4f46\u662f\u4f60\u7684\u9012\u5f52\u5e76\u4e0d\u4f1a\u7b971\u8282\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u8fd9\u4e00\u6bb5\u8bdd\u6765\u5224\u65ad\u4ed6\u7684\u5305\u542b\u4ed6\"\u7236\u4eb2\"\u7684\u5b50\u6811\u5927\u5c0f\u662f\u5426\u65f6\u6700\u5927\u7684\u3002\n\n\u5f53\u627e\u5230\u91cd\u5fc3\u4ee5\u540e\u5c31\u53ef\u4ee5\u627e\u51fa\u6bcf\u4e2a\u70b9\u4e0e\u91cd\u5fc3\u7684\u8ddd\u79bb.\u5728\u7edf\u8ba1\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86  \n\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u76f4\u63a5n\u00b2\u7684\u679a\u4e3e\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u5bf9\u4e8e\u522b\u7684\u9898\uff0c\u9700\u8981\u522b\u7684\u65b9\u6cd5\uff0c\u5982\u4e8c\u5206\u3002\n\u770b\u770b\u8fd9\u4e00\u9898\u662f\u5982\u4f55\u5224\u7684\n```cpp\nvoid calc(int k,int l,int c) {\n    tot=0;\n    finddep(k,0,l);\n    for(int i=1; i<=tot; i++)\n        for(int j=1; j<=tot; j++)\n            ans[dis[i]+dis[j]]+=c;\n}\n```\n\n\u4f46\u662f\u5bf9\u4e8e\u7edf\u8ba1\u7b54\u6848\u8981\u6ce8\u610f\u4e00\u70b9\u7684\u5c31\u662f\u8def\u5f84\u4f1a\u91cd\u590d\u7b97\u3002\u4e0a\u56fe\u4e2d\u5982\u679ck=7\u90a3\u4e48\u5bf9\u4e8e(1,4),(1,5)\u8fd9\u4e5f\u662f\u4e2a\u7b54\u6848,\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u4e2a\u7b54\u6848.\u8def\u5f84(1,2)\u88ab\u7b97\u4e86\u4e24\u6b21.\u6240\u4ee5\u6211\u4eec\u8981\u5c06\u91cd\u590d\u7684\u8def\u5f84\u53bb\u6389\u5c31\u53ef\u4ee5\u4e86  \n\n\u90a3\u4e48\u600e\u4e48\u53bb\u6389\u5462?\u53ea\u8981\u6bcf\u6b21\u5728\u9012\u5f52\u7684\u65f6\u5019\u5bf9\u4e8e\u513f\u5b50\u8282\u70b9,\u5c06\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684\u5b50\u6811\u6ee1\u8db3\u6761\u4ef6\u7684\u5220\u6389\u5c31\u53ef\u4ee5\u4e86,\u4e5f\u5c31\u662fdis\u548c\u4e3ak,\u6ce8\u610f\u8fd9\u91cc\u7684dis\u7b97\u7684\u662f\u6240\u6709\u5b50\u8282\u70b9\u5230\u8fd9\u4e2a\u513f\u5b50\u8282\u70b9\u7236\u4eb2\u7684\u8ddd\u79bb.\n\n```cpp\nvoid devide(int k) {\n    vis[k]=1;\n    calc(k,0,1);\n    for(int i=head[k]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(vis[v])\n            continue;\n        calc(v,a[i].v,-1);//\u5c31\u662f\u8fd9\u4e00\u6bb5\u8bdd\n        root=0,sum=siz[v];\n        findroot(v,0);\n        devide(root);\n    }\n}\n```\n\n\n\u63a5\u4e0b\u6765\u4e0a\u4ee3\u7801\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=10001;\nint read() {\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9')c=='-'?f=-1,c=getchar():c=getchar();\n    while(c>='0'&&c<='9') x=x*10+c-'0',c=getchar();\n    return x*f;\n}\nint n,k;\nint ans[10000001];/*\u50a8\u5b58\u7b54\u6848*/\nint dis[N];/*\u4ece\u5f53\u524d\u8282\u70b9i\u5230\u679a\u4e3e\u5f53\u524d\u6811\u7684\u6839\u8282\u70b9\u7236\u4eb2\u7684\u8ddd\u79bb*/(\u8fd9\u91cc\u968f\u4fbf\u7406\u89e3\u4e00\u4e0b\u5427\uff0c\u6211\u8fd9\u4e48\u8bf4\u662f\u4e3a\u4e86\u540e\u9762\u7684\u5bb9\u65a5)\nint f[N];/*\u5f53\u4ee5i\u4e3a\u6839\u8282\u70b9\u65f6\u6700\u5927\u5b50\u6811\u5927\u5c0f*/\nint vis[N];/*i\u8282\u70b9\u662f\u5426\u88ab\u5f53\u6839\u4f7f\u7528\u8fc7*/\nint siz[N];/*\u4ee5i\u8282\u70b9\u4e3a\u6839\u65f6,\u5176\u5b50\u6811(\u5305\u62ec\u672c\u8eab)\u7684\u8282\u70b9\u4e2a\u6570*/\nint root;/*\u6839\u8282\u70b9*/\nint sum;/*\u8fd9\u68f5\u5f53\u524d\u9012\u5f52\u7684\u8fd9\u68f5\u6811\u7684\u5927\u5c0f*/\nstruct node {\n    int next,to,v;\n} a[N<<1];\nint head[N],cnt;\nvoid add(int x,int y,int c) {\n    a[++cnt].to=y;\n    a[cnt].next=head[x];\n    a[cnt].v=c;\n    head[x]=cnt;\n}\nvoid findroot(int k,int fa) {\n    f[k]=0,siz[k]=1;\n    for(int i=head[k]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(vis[v]||v==fa)\n            continue;\n        findroot(v,k);\n        siz[k]+=siz[v];\n        f[k]=max(f[k],siz[v]);\n    }\n    f[k]=max(f[k],sum-siz[k]);\n    if(f[k]<f[root])\n        root=k;\n}\nint tot;\nvoid finddep(int k,int fa,int l) {\n    dis[++tot]=l;\n    for(int i=head[k]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(v==fa||vis[v])\n            continue;\n        finddep(v,k,l+a[i].v);\n    }\n}\nvoid calc(int k,int l,int c) {\n    tot=0;\n    finddep(k,0,l);\n    for(int i=1; i<=tot; i++)\n        for(int j=1; j<=tot; j++)\n            ans[dis[i]+dis[j]]+=c;\n}\nvoid devide(int k) {\n    vis[k]=1;\n    calc(k,0,1);\n    for(int i=head[k]; i; i=a[i].next) {\n        int v=a[i].to;\n        if(vis[v])\n            continue;\n        calc(v,a[i].v,-1);\n        root=0,sum=siz[v];\n        findroot(v,0);\n        devide(root);\n    }\n}\nint main() {\n    int n=read(),m=read(),x,y,z;\n    for (int i=1; i<n; i++)\n        x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z);\n    sum=f[0]=n;\n    findroot(1,0);\n    devide(root);\n    for (int i=1; i<=m; i++) {\n        int k=read();\n        puts(ans[k]?\"AYE\":\"NAY\");\n    }\n    return 0;\n}\n```",
        "postTime": 1540126840,
        "uid": 19805,
        "name": "\u64a4\u4e91",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u4e0a\u94fe\u63a5\uff1a[\u70b9\u5206\u6cbb\u6a21\u677f](https://www.luogu.com.cn/problem/P3806) [Tree](https://www.luogu.com.cn/problem/P4178) [Race](https://www.luogu.com.cn/problem/P4149) [\u806a\u806a\u53ef\u53ef](https://www.luogu.com.cn/problem/P2634) \n\n\u53d1\u73b0\u4e86\u8fd9\u4e9b\u9898\u7684\u5171\u540c\u7279\u70b9\u6ca1\u6709\uff1f~~\u90fd\u662f\u7d2b\u9898\u3002~~ \u90fd\u662f\u4e0e\u6811\u4e0a\u8def\u5f84\u6709\u5173\u7684\u9898\u76ee\u3002\n\n\u6b64\u65f6\u70b9\u5206\u6cbb\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n# \u7b97\u6cd5\u5206\u6790\n***\n\u987e\u540d\u601d\u4e49\uff0c\u70b9\u5206\u6cbb\uff0c\u5c31\u662f\u57fa\u4e8e\u70b9\u7684\u5206\u6cbb\u7b97\u6cd5\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709\u8fb9\u5206\u6cbb\u3002~~\u4f46\u6211\u4e0d\u4f1a\u3002~~ \u8ba9\u6211\u4eec\u4ee5\u6a21\u677f\u9898\u4e3a\u4f8b\u8bb2\u89e3\u3002\n\n\u7531\u4e8e\u662f\u65e0\u6839\u6811\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u9996\u5148\u6307\u5b9a\u4e00\u4e2a\u6839\u3002\n\n\u7136\u540e\u6240\u6709\u7684\u6811\u4e0a\u8def\u5f84\u5c31\u53ef\u4ee5\u5206\u6210\u4e24\u7c7b\uff1a\u7ecf\u8fc7\u6839\u7684\u548c\u4e0d\u7ecf\u8fc7\u6839\u7684\u3002\n***\n\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\u7684\u957f\u5ea6\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\uff0c\u5c31\u7b49\u4e8e\u8def\u5f84\u4e24\u7aef\u70b9\u5230\u6839\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u9884\u5904\u7406\u4e00\u904d\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u7684\u957f\u5ea6\u3002\u7136\u540e\u4f9d\u6b21\u5904\u7406\u6839\u7684\u6bcf\u4e2a\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u67e5\u627e\u4e4b\u524d\u7684\u5b50\u6811\u4e2d\u662f\u5426\u521a\u597d\u6709\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u957f\u5ea6\u4e0e\u5f53\u524d\u5904\u7406\u7684\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u957f\u5ea6\u52a0\u8d77\u6765\u6ee1\u8db3\u6b64\u8be2\u95ee\u7684\u3002\n\n~~\u5934\u6655\u5417\uff0c\u5f85\u4f1a\u770b\u4ee3\u7801\u5c31\u7406\u89e3\u4e86\u3002~~\n\nQ: \u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5728\u4e4b\u524d\u7684\u5b50\u6811\u67e5\u627e\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u524d\u9762\u7684\u8282\u70b9\u5462\uff1f\n\nA: \u56e0\u4e3a\u5982\u679c\u4e0d\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u751f\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u8fd9\u4e24\u4e2a\u8282\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u5c31\u4e0d\u4f1a\u7ecf\u8fc7\u5f53\u524d\u6839\u4e86\uff0c\u4e0e\u524d\u9762\u6761\u4ef6\u77db\u76fe\u3002\n\n\uff08\u5f53\u7136\u522b\u7684\u9898\u89e3\u4e5f\u6709\u5b83\u4eec\u81ea\u5df1\u7684\u5904\u7406\u65b9\u6cd5\u3002\uff09\n\nQ: \u90a3\u8981\u6bcf\u6b21\u90fd\u8981\u626b\u4e00\u904d\u4e4b\u524d\u7684\u5b50\u6811\u7684\u8282\u70b9\u5417\uff1f\u90a3\u590d\u6742\u5ea6\u4e0d\u662f\u98d9\u5347\u5417\uff1f\n\nA: \u4e0d\u5fc5\uff0c\u89c2\u5bdf\u5230 $K \\le 10^7$\uff0c\u8fd9\u610f\u5473\u7740\u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a $10^7$ \u7684\u6876\u8bb0\u5f55\u4e00\u4e0b\u4e4b\u524d\u7ecf\u8fc7\u7684\u5b50\u6811\u7684\u8282\u70b9\u5230\u6839\u7684\u957f\u5ea6\u5c31\u884c\u4e86\u3002\n\n\u4e3a\u4e86\u6ee1\u8db3\u67e5\u627e\u7684\u662f\u4e4b\u524d\u7684\u5b50\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u5148 dfs \u4e00\u904d\u5f53\u524d\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u8fdb\u884c\u8be2\u95ee\uff0c\u5728 dfs \u4e00\u904d\u5f53\u524d\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u5e76\u628a\u5b83\u5230\u6839\u7684\u957f\u5ea6\u63d2\u5165\u6876\u4e2d\u3002\n\n\u6839\u5230\u70b9\u7684\u8ddd\u79bb\u8981\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\u3002\n***\n\u90a3\u4e0d\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u5206\u6cbb\u5904\u7406\uff0c\u5373\u628a\u5f53\u524d\u6839\u5220\u6389\u540e\uff0c\u627e\u5230\u6839\uff0c\u5e76\u4e14\u6309\u7167\u5904\u7406\u7ecf\u8fc7\u6839\u7684\u8def\u5f84\u7684\u65b9\u6cd5\u5904\u7406\u6bcf\u68f5\u5b50\u6811\uff0c\u5e76\u4e14\u7ee7\u7eed\u5206\u6cbb\u2026\u2026\n\n\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u4e00\u5b9a\u90fd\u4f1a\u88ab\u5f53\u6210\u4e00\u6b21\u6839\uff0c\u6240\u4ee5\u6bcf\u6761\u8def\u5f84\u90fd\u4f1a\u88ab\u5904\u7406\u5230\u3002\u800c\u4e14\u6bcf\u6b21\u5206\u6cbb\u65f6\u5b50\u6811\u4e2d\u6ca1\u6709\u88ab\u5f53\u6210\u8fc7\u6839\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u6bcf\u6761\u8def\u5f84\u53ea\u4f1a\u5904\u7406\u4e00\u6b21\u3002\n\n\u8fdb\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff1a\u6bcf\u6b21\u70b9\u5206\u6cbb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(size_i * m)$\uff08$size_i$ \u4e3a\u5b50\u6811\u5927\u5c0f\uff09\uff0c\u90a3\u6bcf\u5c42\u5206\u6cbb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm)$ \u7684\uff08\u5206\u6cbb\u7684\u5c42\u6570\u5373\u9012\u5f52\u5c42\u6570\uff09\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u5728\u6bcf\u4e2a\u70b9\u7684\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u4e3a $O(m)$\uff0c\u63d2\u5165\u3001\u6c42\u8ddd\u79bb\u7684\u590d\u6742\u5ea6\u4e3a $O(1)$\u3002\u4e14\u539f\u6811\u5728\u540c\u4e00\u5c42\u88ab\u5206\u6210\u4e86\u8bb8\u591a\u5b50\u6811\uff0c\u904d\u5386\u65f6\u540c\u4e00\u5c42\u7684\u5b50\u6811\u4e4b\u95f4\u4e0d\u4f1a\u904d\u5386\u5230\u522b\u7684\u5b50\u6811\u91cc\u53bb\u3002\n\n\u90a3\u4e48\u6700\u7ec8\u7684\u65f6\u95f4\u590d\u6742\u4e3a $O(nmh)$\uff08$h$ \u4e3a\u5206\u6cbb\u603b\u5c42\u6570\uff09\n\n\u7136\u800c $h$ \u6700\u5927\u53ef\u4ee5\u662f $n$\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u88ab\u5361\u6210 $O(n^2m)$ \u7684\uff0c\u663e\u7136\u548c\u66b4\u529b\u679a\u4e3e\u4e00\u4e2a\u7ea7\u522b\u3002\n\n\u95ee\u9898\u51fa\u5728\u54ea\u4e86\u5462\uff1f\u5c31\u5728\u4e8e\u6839\u7684\u9009\u62e9\u3002\u5982\u679c\u6bcf\u6b21\u9009\u62e9\u5f53\u524d\u5b50\u6811\u7684\u91cd\u5fc3\u4f5c\u4e3a\u6839\u7684\u8bdd\uff0c$h$ \u53ef\u4ee5\u964d\u5230 $\\log n$ \u7ea7\u522b\u3002\n\n\u60f3\u770b\u91cd\u5fc3\u8bc1\u660e\u8bf7\u70b9[\u8fd9](https://www.luogu.com.cn/blog/150384/shu-di-zhong-xin-xiang-guan-gai-nian-yu-zheng-ming)\uff08\u5176\u5b9e\u662f\u907f\u514d\u9898\u89e3\u7bc7\u5e45\u8fc7\u957f\u5c31\u642c\u5230 blog \u91cc\u53bb\u4e86\uff09\u3002\n\n\u6700\u540e\u4e0a\u4ee3\u7801\uff1a\n# \u4ee3\u7801\u5206\u6790\n## \u53d8\u91cf\u5b9a\u4e49\n```cpp\nint n,m,a,b,c,k;//\u8bfb\u5165\u7684\u6570\nint firs[10011],neig[20011],arri[20011],valu[20011]/*\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6811*/,quer[111]/*\u8be2\u95ee*/;\nint ifzx[10011]/*\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u91cd\u5fc3*/,size[10011]/*\u5f53\u524d\u5b50\u6811\u7684\u5927\u5c0f*/,dist[10011]/*\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb*/,ifok[111]/*\u6b64\u8be2\u95ee\u662f\u5426\u6ee1\u8db3*/;\nbool quet[10000011];//\u6876\n```\n## \u70b9\u5206\u6cbb\u4e3b\u51fd\u6570\n```cpp\nint dfz(int at/*\u6700\u521d\u7684\u6839*/,int si/*\u5f53\u524d\u5b50\u6811\u5927\u5c0f*/)\n{\n\tint zf;//\u8bb0\u5f55\u4ee5\u6700\u521d\u7684\u6839\u4e3a\u6839\u65f6\u7684\u91cd\u5fc3\u4e4b\u7236\n\task(at,0,si,at,zf);//\u6c42\u91cd\u5fc3\n\tsize[zf]=si-size[at];//\u66f4\u65b0\u91cd\u5fc3\u4e4b\u7236\u7684\u5b50\u6811\u5927\u5c0f\n\tifzx[at]=1;//\u6807\u8bb0\u91cd\u5fc3\n\tfor(int i=firs[at]; i; i=neig[i])\n\t\tif(!ifzx[arri[i]])//\u4e0e\u5176\u4ed6\u5b50\u6811\u7528\u4e4b\u524d\u7684\u91cd\u5fc3\u9694\u7edd\n\t\t\tdfz(arri[i],size[arri[i]]);//\u7ee7\u7eed\u5206\u6cbb\n\tquet[0]=1;\n\tdist[at]=0;//\u7279\u6b8a\u5904\u7406\u6839\n\tdis(at,at,0);//\u6c42\u8282\u70b9\u79bb\u6839\u7684\u8ddd\u79bb\n\tfor(int i=firs[at]; i; i=neig[i])\n\t{\n\t\tif(!ifzx[arri[i]])//\u540c\u4e0a\n\t\t{\n\t\t\tque(arri[i],at);//\u8be2\u95ee\n\t\t\tadd(arri[i],at);//\u63d2\u5165\n\t\t}\n\t}\n\tfor(int i=0; i<m; ++i)\n\t\tif(quet[quer[i]])\n\t\t\tifok[i]=1;//\u7279\u6b8a\u5904\u7406\u6839\n\tifzx[at]=0;//\u5220\u9664\u6807\u8bb0\n\ttoz(at,at);//\u6876\u5f52\u96f6\n}\n```\n## \u6c42\u91cd\u5fc3\n```cpp\nint ask(int at/*\u5f53\u524d\u6839*/,int fa/*\u7236\u4eb2*/,int si/*\u5f53\u524d\u5206\u6cbb\u7684\u6574\u4e2a\u5b50\u6811\u7684\u5927\u5c0f*/,int&zx/*\u91cd\u5fc3\u7684\u5f15\u7528*/,int&zf/*\u91cd\u5fc3\u4e4b\u7236\u7684\u5f15\u7528*/)\n{\n\tbool pd=1;//\u5224\u65ad\u662f\u5426\u662f\u91cd\u5fc3\n\tsize[at]=1;\n\tfor(int i=firs[at]; i; i=neig[i])\n\t\tif(!ifzx[arri[i]]&&arri[i]!=fa)//\u4e0d\u80fd\u9012\u5f52\u56de\u7236\u4eb2\u4e14\u4e0d\u80fd\u9012\u5f52\u5230\u5176\u4ed6\u5b50\u6811\n\t\t{\n\t\t\tif(ask(arri[i],at,si,zx,zf)>si/2)//\u5982\u679c\u5927\u4e8e\u6574\u68f5\u5b50\u6811\u7684\u4e00\u534a\n\t\t\t\tpd=0;//\u4e0d\u662f\u91cd\u5fc3\n\t\t\tsize[at]+=size[arri[i]];\n\t\t}\n\tif(pd&&size[at]>=si/2)//\u513f\u5b50\u548c\u7236\u4eb2\u90fd\u4e0d\u5927\u4e8e\u6574\u68f5\u5b50\u6811\u7684\u4e00\u534a\n\t{\n\t\tzx=at;//\u8bb0\u5f55\u91cd\u5fc3\n\t\tzf=fa;//\u8bb0\u5f55\u91cd\u5fc3\u4e4b\u7236\n\t}\n\treturn size[at];\n}\n```\n\u8fd9\u91cc\u7528\u4e86\u5f15\u7528\uff0c\u5b83\u7684\u4f5c\u7528\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u6539\u53d8\u51fd\u6570\u5916\u7684\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u3002\n## \u6c42\u8ddd\u79bb\n```cpp\nvoid dis(int at,int fa,int va)\n{\n\tif((dist[at]=dist[fa]+va)>10000000)\n\t{\n\t\tdist[at]=-1;\n\t\treturn;\n\t}\n\tfor(int i=firs[at]; i; i=neig[i])\n\t\tif(!ifzx[arri[i]]&&arri[i]!=fa)\n\t\t\tdis(arri[i],at,valu[i]);\n}\n```\n\u6ce8\u610f $c$ \u7684\u548c\u53ef\u4ee5\u8fbe\u5230 $10^8$ \u7ea7\u522b\uff0c\u800c\u6876\u53ea\u5f00\u4e86 $10^7$\u3002 \u6240\u4ee5\u53d1\u73b0 $dist_i$ \u5927\u4e8e $10^7$ \u65f6\u6807\u8bb0\u4e3a -1 \u5e76\u7acb\u5373\u7ed3\u675f\u3002~~\u5426\u5219\u90fd\u4e0d\u77e5\u9053\u600e\u4e48 RE \u7684\u3002~~\n## \u8be2\u95ee\u3001\u63d2\u5165\u548c\u5f52\u96f6\n```cpp\noid que(int at,int fa)\n{\n\tif(dist[at]==-1)\n\t\treturn;\n\tfor(int i=0; i<m; ++i)\n\t\tif(dist[at]<=quer[i]&&quet[quer[i]-dist[at]])\n\t\t\tifok[i]=1;\n\tfor(int i=firs[at]; i; i=neig[i])\n\t\tif(!ifzx[arri[i]]&&arri[i]!=fa)\n\t\t\tque(arri[i],at);\n}\nvoid add(int at,int fa)\n{\n\tif(dist[at]==-1)\n\t\treturn;\n\telse\n\t\tquet[dist[at]]=1;\n\tfor(int i=firs[at]; i; i=neig[i])\n\t\tif(!ifzx[arri[i]]&&arri[i]!=fa)\n\t\t\tadd(arri[i],at);\n}\nvoid toz(int at,int fa)\n{\n\tif(dist[at]==-1)\n        return;\n    else\n\t\tquet[dist[at]]=0;\n\tfor(int i=firs[at]; i; i=neig[i])\n\t\tif(!ifzx[arri[i]]&&arri[i]!=fa)\n\t\t\ttoz(arri[i],at);\n}\n```\n\u4e09\u4e2a\u51fd\u6570\u5927\u540c\u5c0f\u5f02\u3002\u6ce8\u610f\u590d\u5236\u7c98\u8d34\u7684\u65f6\u5019\u8981\u6539\u540d\u3002~~\u5426\u5219\u90fd\u4e0d\u77e5\u9053\u600e\u4e48 WA \u7684\u3002~~\n# \u6700\u540e\n\u5b8c\u6574\u4ee3\u7801\u548c\u4e3b\u51fd\u6570\u4e0d\u653e\u4e86\u3002\n\n\u6700\u5f00\u5934\u6240\u653e\u7684\u56db\u4e2a\u9898\u5176\u5b9e\u4ee3\u7801\u548c\u601d\u8def\u90fd\u5dee\u4e0d\u591a\u3002\u505a\u5b8c\u8fd9\u9898\u540e\u60f3\u6c34\u7ecf\u9a8c\u7684\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b\u3002\n\n~~\u56db\u500d\u7ecf\u9a8c\u554a\u4e0d\u8981\u767d\u4e0d\u8981\u3002~~\n\n\u6709\u5174\u8da3\u7684\u8fd8\u53ef\u4ee5\u53bb\u7814\u7a76\u4e00\u4e0b\u52a8\u6001\u70b9\u5206\u3002~~\u6211\u4e0d\u4f1a\u522b\u95ee\u6211\u3002~~\n\n\u5b8c\u7ed3\u6492\u82b1\\\\(^o^)/",
        "postTime": 1582092971,
        "uid": 150384,
        "name": "pyqpyq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "1.\u4ec0\u4e48\u662f\u70b9\u5206\u6cbb\uff1f\n\n\u9996\u5148\uff0c\u5206\u6cbb\u5927\u5bb6\u5e94\u8be5\u5f88\u4e86\u89e3\u4e86\u5427\uff0c\u90a3\u4e48\u70b9\u5206\u6cbb\u5176\u5b9e\u4e0e\u5206\u6cbb\u540c\u7406\uff0c\u5c31\u662f\u5c06\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u4e3a\u5f88\u591a\u5f88\u591a\u7ec6\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u4ece\u800c\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c31\u62ff\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u5229\u7528\u70b9\u5206\u6cbb\u5c31\u660e\u663e\u6bd4\u7206\u641c\u5feb\u5f88\u591a\u3002\u3002\u3002\n\n2.\u70b9\u5206\u6cbb\u7684\u539f\u7406\uff1a\n\n\u5148\u6765\u770b\u4e00\u5f20\u56fe\u7247\uff08\u4e0d\u9519\uff0c\u662f\u6211\u76d7\u7684\u56fe\uff08\u6ed1\u7a3d\u3002\u3002\u3002\uff09\uff09\n![qwq](https://img2018.cnblogs.com/blog/1538839/201902/1538839-20190218201515910-455348165.png)\n\n\u663e\u7136\u6211\u4eec\u5982\u679c\u8981\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u7ecf\u8fc7\u6839\u8282\u70b9\u6216\u8005\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002\u5e76\u4e14\u7b2c\u4e8c\u79cd\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7\u6362\u6839\u6765\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u8fdb\u884c\u5206\u6cbb\u4e86qaq\n\n3.\u5982\u4f55\u5b9e\u73b0\uff1f\n\n\u4e0a\u9762\u63d0\u5230\u4e86\u4e00\u4e9b\u539f\u7406\uff0c\u4f46\u662f\u5982\u679c\u662f\u8fd9\u6837\u7684\u4e00\u5f20\u56fe\u5462\uff1f\n![](https://img2018.cnblogs.com/blog/1538839/201902/1538839-20190218202520880-989551946.png)\n\n\u5982\u679c\u8fd8\u662f\u627e\u6839\u7684\u7684\u8bdd\u4f60\u57fa\u672c\u5c31\u51c9\u51c9\u4e86\u3002\u3002\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u671f\u671b\u5c06\u5206\u6210\u7684\u4e24\u4e2a\u6811\u8d8a\u5e73\u5747\u8d8a\u597d\uff0c\u91cd\u5fc3\u5c31\u8bde\u751f\u5566\uff01\uff01\uff01\n\n\u6811\u91cd\u5fc3\u7684\u5b9a\u4e49\uff1a\u627e\u5230\u4e00\u4e2a\u70b9,\u5176\u6240\u6709\u7684\u5b50\u6811\u4e2d\u6700\u5927\u7684\u5b50\u9f20\u8282\u70b9\u6570\u6700\u5c11,\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u68f5\u9f20\u7684\u91cd\u5fc3,\u5220\u53bb\u91cd\u5fc3\u540e\uff0c\u751f\u6210\u7684\u591a\u68f5\u9f20\u5c3d\u53ef\u80fd\u5e73\u8861\uff08\u4e0d\u77e5\u9053\u77e5\u5426\u6b63\u786e\uff09\n\n4.\u91cd\u70b9\u6765\u4e86\uff01\uff01\uff01\n\n\u94fa\u57ab\u57fa\u672c\u505a\u5b8c\u4e86\uff0c\u73b0\u5728\u6765\u8bb2\u8fd9\u9053\u9898\uff1a\n\n\u5176\u5b9e\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u7531\u4e8e\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u53ef\u4ee5\u79bb\u7ebf\u64cd\u4f5c\uff08\u5e9f\u8bdd\uff09\u3002\n\n\u6211\u4eec\u4ece\u91cd\u5fc3\u5f00\u59cb\u679a\u4e3e\u5b50\u6811\u7684\u6839\u8282\u70b9\uff0c\u4f9d\u6b21\u9012\u5f52\u4e0b\u53bb\uff0c\u6bcf\u4e00\u6b21\u9047\u5230\u6ee1\u8db3\u9898\u610f\u7684\u5c31++\u5c31\u53ef\u4ee5\u5566\uff01\n\n\u6700\u540e\uff0c\u9644\u4e0a\u672c\u9898\u4ee3\u7801\uff1a\uff08\u4ee3\u7801\u4e2d\u6709\u8be6\u89e3qaq\uff09\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int inf=10000000;\nconst int maxn=100010;\nstruct EDGE//\u94fe\u524d\u5b58\u8fb9\n{\n    int to,val,nxt;\n} edge[maxn<<1];\nint head[maxn]/*\u94fe\u524d\u9644\u5e26\u7269*/,cnt/*\u8fb9\u6570*/,maxp[maxn]/*\u5b50\u6811\u7684\u6700\u5927\u5927\u5c0f*/,size[maxn]/*\u5b50\u6811\u5927\u5c0f*/,dis[maxn]/*x\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb*/;\nint vis[maxn]/*\u8bbf\u95ee\u6807\u8bb0*/,test[105]/*\u8bb0\u5f55\u662f\u5426\u53ef\u884c*/,ju[inf]/*\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u8ddd\u79bb*/,q[maxn]/*\u7528\u4e8e\u6e05\u9664ju\u6570\u7ec4*/,rem[maxn]/*\u8bb0\u5f55\u8ddd\u79bb*/;\nint query[1010]/*\u8bb0\u5f55\u8be2\u95ee*/;\nint sum/*\uff08\u5b50\uff09\u6811\u7684\u5927\u5c0f\u548c*/,root/*\u91cd\u5fc3*/,n,m;\nvoid add(int x,int y,int z)//\u94fe\u524d\u52a0\u8fb9\n{\n    edge[++cnt].val=z;\n    edge[cnt].to=y;\n    edge[cnt].nxt=head[x];\n    head[x]=cnt;\n}\nvoid getroot(int id,int fa)//\u627e\u91cd\u5fc3 \n{\n    size[id]=1;\n    maxp[id]=0;\n    for(int i=head[id]; i; i=edge[i].nxt)//\u94fe\u524d\u904d\u5386 \n    {\n        if(edge[i].to==fa||vis[edge[i].to]!=0)\n        {\n            continue;\n        }\n        getroot(edge[i].to,id); \n        size[id]+=size[edge[i].to];//\u56de\u6eaf\u65f6\u7684\u5927\u5c0f\u52a0\u548c \n        maxp[id]=max(size[edge[i].to],maxp[id]);//\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f\u7684\u6700\u5927\u503c \n    }\n    maxp[id]=max(maxp[id],sum-size[id]);//\u5224\u65ad\u4e24\u4e2a\u5b50\u6811\u5927\u5c0f\uff0c\u8bb0\u5f55\u6700\u5927\u503c \n    if(maxp[id]<maxp[root])//\u5224\u65ad\u6240\u9009\u91cd\u5fc3\u662f\u5426\u5408\u6cd5 \n    {\n        root=id; \n    }\n}\nvoid getdis(int id,int fa)//\u6c42\u8ddd\u79bb\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\u5427\u3002\u3002\u3002 \n{\n    rem[++rem[0]]=dis[id];\n    for(int i=head[id]; i; i=edge[i].nxt)\n    {\n        if(edge[i].to==fa||vis[edge[i].to]!=0)\n        {\n            continue;\n        }\n        dis[edge[i].to]=dis[id]+edge[i].val;\n        getdis(edge[i].to,id);\n    }\n}\nvoid clac(int id)\n{\n    int now=0;\n    for(int i=head[id]; i; i=edge[i].nxt)\n    {\n        if(vis[edge[i].to]!=0)\n        {\n            continue;\n        }\n        rem[0]=0;//\u5229\u7528rem\u30100\u3011\u6765\u5b9e\u73b0\u4e00\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528 \n        dis[edge[i].to]=edge[i].val;//\u52a0\u4e0a\u90bb\u8fb9\u7684\u8ddd\u79bb \n        getdis(edge[i].to,id);//\u7ee7\u7eed\u5411\u4e0b\u627e \n        for(int j=rem[0]; j; j--)\n        {\n            for(int k=1; k<=m; k++)//\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8be2\u95ee \n            {\n                if(query[k]>=rem[j])//\u5982\u679c\u5927\u4e8e\u6216\u7b49\u4e8e\u5219\u627e\u53e6\u4e00\u534a \n                {\n                    test[k]|=ju[query[k]-rem[j]];//\u53f3\u9762\u4e00\u9879\u4e3a1\u5c31\u8fd4\u56de1\uff0c\u4e3a0\u5c31\u8fd4\u56de0 \n                }\n            }\n        }\n        for(int j=rem[0]; j; j--)//\u5b58\u5165\u53ef\u884c\u89e3 \n        {\n            q[++now]=rem[j];\n            ju[rem[j]]=1;\n        }\n    }\n    for(int i=1; i<=now; i++)//\u6e05\u96f6 \n    {\n        ju[q[i]]=0;\n    }\n}\nvoid slove(int id)\n{\n    vis[id]=ju[0]=1;//\u6807\u8bb0\u4e3a\u627e\u8fc7 \n    clac(id);//\u4ee5id\u4e3a\u6839\u8fdb\u884c\u6269\u6563 \n    for(int i=head[id]; i; i=edge[i].nxt)//\u9010\u4e2a\u904d\u5386 \n    {\n        if(vis[edge[i].to]!=0)\n        {\n            continue;\n        }\n        sum=size[edge[i].to];//\u66f4\u65b0sum\u503c\u4e3a\u76ee\u524dto\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u603b\u548c \n        root=0;\n        maxp[root]=inf;\n        getroot(edge[i].to,0);\n        slove(root);//\u9010\u4e2a\u5224\u65ad \n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n-1; i++)//\u52a0\u8fb9 \n    {\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    for(int i=1; i<=m; i++)//\u50a8\u5b58\u8be2\u95ee\u7684\u8981\u6c42\n    {\n        scanf(\"%d\",&query[i]);\n    }\n    maxp[root]=sum=n;//\u521d\u59cb\u5c06\u5176\u8bbe\u4e3a\u6700\u5927\uff0c\u4ece\u800c\u786e\u5b9a\u91cd\u5fc3\n    getroot(1,0);//\u627e\u91cd\u5fc3\n    slove(root);//\u5f00\u5e72\n    for(int i=1; i<=m; i++)//\u534e\u4e3d\u7684\u8f93\u51fa\u7ed3\u679c\n    {\n        if(test[i]!=0)\n        {\n            printf(\"AYE\\n\");\n        }\n        else\n        {\n            printf(\"NAY\\n\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1550493362,
        "uid": 133227,
        "name": "\u4e8e\u4e30\u6797",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u672c\u4eba\u521a\u5b66\u70b9\u5206\uff0c\u82e5\u6709\u9519\u8bef\u8bf7\u5404\u4f4d\u89c1\u8c05\uff1b\n\n\u9898\u76ee\u8981\u6c42\u8ddd\u79bb\u4e3ak\u7684\u70b9\u662f\u5426\u5b58\u5728\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u5c06\u6240\u6709\u7684\u8ddd\u79bb\u6c42\u51fa\uff0c\u518d\u4e00\u4e00\u5224\u65ad\uff1b\u7531\u4e8ek<=1\u5343\u4e07\uff0c\u6240\u4ee5\u7528\u4e00\u4e2abool\u578b\u6570\u7ec4\u53ef\u4ee5\u88c5\u4e0b\uff1b\u5148\u627e\u6bcf\u9897\u5b50\u6811\u7684**\u91cd\u5fc3**\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u4e0b\u65b9\u7684getroot\uff08\uff09\u51fd\u6570\uff09  \u518d\u4ee5\u91cd\u5fc3\u4e3a\u6839\u9012\u5f52\u5efa\u6811\u3002\u6811\u5efa\u597d\u540e\uff0c\u7528d[]\u6570\u7ec4\u8bb0\u5f55\u5b50\u6811\u4e2d\u5404\u70b9\u5230\u6839\u7684\u8ddd\u79bb\uff0c\u5c06\u5404\u8ddd\u79bb\u5b58\u5165rp[]\u6570\u7ec4\uff0c\u5f85\u9012\u5f52\u5b8c\u540e\uff0c\u4ee5\u53cc\u91cd\u5faa\u73af\u627e\u70b9\u5230\uff08\u4e0d\u540c\u5b50\u6811\u7684\uff09\u70b9\u7684\u8ddd\u79bb\uff0c\u5c06bool\u578b\u6570\u7ec4\u66f4\u65b0\uff1b\n\n\u53cd\u590d\u5982\u6b64\uff0c\u5c06\u6240\u6709\u60c5\u51b5\u8003\u8651\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n    \n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m;\nstruct data\n{\n    int pre,to,w;\n}p[20010];           //  \u90bb\u63a5\u8868\u5b58\u8fb9 \nint head[10010],tot;//\nint sum;   //\u5b50\u6811\u7684\u603b\u70b9\u6570 \nint root;  //\u5f53\u524d\u5b50\u6811\u7684\u6839 \nint f[10010],son[10010];  //f\u4e3a\u9664\u53bb\u6839\u65f6\u5f97\u5230\u7684\u6700\u5927\u8fde\u901a\u5757\uff0cson\u4e3a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9 \nbool vis[10010];  //\u662f\u5426\u8bbf\u95ee\uff08\u6807\u8bb0\uff09 \nint d[10010];  //i\u5230\u5f53\u524d\u6839\u7684\u8ddd\u79bb \nbool ko[10000100];  //bool\u578b\u6570\u7ec4\uff0ck\u662f\u5426\u5b58\u5728 \nstruct node\n{\n    int dis;\n    int which;\n}rp[1001000];\nint tt;\nvoid add(int x,int y,int w)  //\u52a0\u8fb9 \n{\n    p[++tot]=(data){head[x],y,w};\n    head[x]=tot;\n}\nvoid getroot(int u,int papa)  //\u627e\u91cd\u5fc3 \n{\n    son[u]=1;\n    f[u]=0;\n    for(int i=head[u];i;i=p[i].pre)\n    {\n        int v=p[i].to;\n        if(vis[v]||v==papa)  continue;\n        getroot(v,u);\n        son[u]+=son[v];\n        f[u]=max(f[u],son[v]);  //\u6ce8\u610f\uff1af\u5b58\u7684\u662f\u6700\u5927\u8fde\u901a\u5757 \n    }\n    f[u]=max(f[u],sum-son[u]);\n    if(f[u]<f[root])  root=u;  //\u66f4\u65b0\u91cd\u5fc3 \n}\nint pp;  //\u4ee5\u540c\u4e00\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7f16\u53f7 \nvoid getdeep(int rearoot,int u,int fa,int ro)  //\u5f97\u5230\u70b9\u5230\u6839\u7684\u8ddd\u79bb \n{\n    for(int i=head[u];i;i=p[i].pre)\n    {\n        int v=p[i].to;\n        if(vis[v]||v==fa)  continue;  //\u53bb\u91cd \n        if(u==rearoot) pp++;   //\u5b50\u6811\u7f16\u53f7******* \n        d[v]=d[u]+p[i].w;\n        if(u==rearoot) rp[++tt]=(node){d[v],pp};\n        else\n        rp[++tt]=(node){d[v],ro};\n        ko[d[v]]=1;  //\u66f4\u65b0k\u7684\u53ef\u80fd\u503c \n        if(rearoot==u)\n        getdeep(rearoot,v,u,pp);\n        else  getdeep(rearoot,v,u,ro);  //\u4e0b\u4e00\u4e2a \n    }\n}\nvoid getans(int u)  \n{\n    d[u]=0;tt=0;pp=0;\n    getdeep(u,u,0,0);\n    vis[u]=1;\n    for(int i=1;i<=tt;i++)   //\uff01\uff01\uff01\uff01\uff01\u6ce8\u610f\uff0c\u5341\u5206\u91cd\u8981 \n    {\n        for(int j=i+1;j<=tt;j++)\n        {\n            if(rp[i].which!=rp[j].which)   //\u5177\u4f53\u4e3a\u4f55\u8bf7\u81ea\u884c\u601d\u8003 \n            {\n                ko[rp[i].dis+rp[j].dis]=1;\n            }\n        }\n    }\n    for(int i=head[u];i;i=p[i].pre)\n    {\n        int v=p[i].to;\n        if(!vis[v])  //\u53bb\u91cd \n        {\n            root=0;  //  \uff01\uff01 \n            sum=son[v]; //  \uff01\uff01 \n            getroot(v,0);//\u5f97\u5230\u5b50\u6811\u7684\u91cd\u5fc3 \n            getans(root);  //\u4ee5\u91cd\u5fc3\u5efa\u6811 \n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int a,b,c;\n    for(int i=1;i<=n-1;i++)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        add(a,b,c);add(b,a,c);  //\u52a0\u8fb9 \n    }\n    sum=f[0]=n;  //\u6ce8\u610f\uff1asum\u503c\u5fc5\u987b\u66f4\u65b0   \uff08\u8bf7\u601d\u8003\uff09 \n    root=0;     //\u6ce8\u610f\uff1aroot\u503c\u5fc5\u987b\u66f4\u65b0 \n    getroot(1,0);  //\u627e\u91cd\u5fc3 \n    getans(root);  //\u4ee5\u91cd\u5fc3\u5efa\u6811\u627ek\u503c \n    int kk;\n    for(int i=1;i<=m;i++)    //\u5224\u65ad\u662f\u5426\u5b58\u5728 \n    {\n        scanf(\"%d\",&kk);\n        if(ko[kk]==1)  printf(\"AYE\\n\");\n        else  printf(\"NAY\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1504788835,
        "uid": 22236,
        "name": "\u65e5\u6708\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "```\n#include<bits/stdc++.h>\n#define INF 1<<29\nusing namespace std;\nstruct Xjh{\n    int Next,Ver,Weight;\n}E[600001];\nint n,m,Cnt=1,Head[60001];\nint Size[60001],Dis[60001],Que[60001],Maxp[60001],Rem[60001],Q[60001];\nbool Vis[60001],Test[60001],Judge[1000001];\nint Sum,Root,Rem_Cnt;\nvoid Add_Edge(int x,int y,int z){\n    E[++Cnt].Ver=y;\n    E[Cnt].Weight=z;\n    E[Cnt].Next=Head[x];\n    Head[x]=Cnt;\n}\nvoid Get_Root(int u,int f){\n    Size[u]=1;\t\t\t\t\t\t\t//size[i]\u4fdd\u5b58\u4ee5i\u4e3a\u6839\u7684\u6811\u7684\u5927\u5c0f \n    Maxp[u]=0;\t\t\t\t\t\t\t//Maxp[i]\u4fdd\u5b58\u5f53\u524d\u5904\u7406\u7684\u6811\u53bb\u6389i\u540e\u7684\u6700\u5927\u8054\u901a\u5feb(\u6811)\u7684\u5927\u5c0f \n    for(int i=Head[u],v;i;i=E[i].Next){\t//\u904d\u5386\u5b50\u8282\u70b9 \n        if((v=E[i].Ver)==f||Vis[v])\n            continue;\n        Get_Root(v,u);\t\t\t\t\t//\u9012\u5f52\u5904\u7406\u5b50\u6811 \n        Size[u]+=Size[v];\t\t\t\t//\u66f4\u65b0size[] \n        Maxp[u]=max(Maxp[u],Size[v]);\t//\u7528\u5b50\u6811\u5927\u5c0f\u66f4\u65b0Maxp \n    }\n    Maxp[u]=max(Maxp[u],Sum-Size[u]);\t//\u7528\"\u4e0a\u9762\"\u66f4\u65b0Maxp \n    if(Maxp[u]<Maxp[Root])\t\t\t\t//\u66f4\u65b0Root \n        Root=u;\n}\nvoid Get_Dis(int u,int f){\n    Rem[++Rem_Cnt]=Dis[u];\t\t\t\t//\u5c06\u8ba1\u7b97\u597d\u7684\u957f\u5ea6\u4fdd\u5b58 \n    for(int i=Head[u],v;i;i=E[i].Next){\t//\u904d\u5386\u5b50\u8282\u70b9 \n        if((v=E[i].Ver)==f||Vis[v])\n            continue;\n        Dis[v]=Dis[u]+E[i].Weight;\t\t//\u66f4\u65b0\u957f\u5ea6 \n        Get_Dis(v,u);\t\t\t\t\t//\u9012\u5f52\u5904\u7406 \n    }\n}\nvoid Calc(int u){\n    int Tot=0;\n    for(int i=Head[u],v;i;i=E[i].Next){\t//\u904d\u5386\u5b50\u8282\u70b9 \n        if(Vis[v=E[i].Ver])continue;\n        Rem_Cnt=0;\t\t\t\t\t\t//Rem[]\u7528\u6765\u4fdd\u5b58\u8be5\u5b50\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb \n        Dis[v]=E[i].Weight;\n        Get_Dis(v,u);\t\t\t\t\t//\u83b7\u53d6\u5b50\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb \n        for(int j=Rem_Cnt;j;--j)\t\t//\u79bb\u7ebf\u66f4\u65b0\u7b54\u6848,Test[i]\u4fdd\u5b58\u7b2ci\u4e2a\u8be2\u95ee\u662f\u5426\u53ef\u884c \n            for(int k=1;k<=m;++k)\n                if(Que[k]>=Rem[j])\t\t//Judge[i]\u4fdd\u5b58\u5230\u6839\u8282\u70b9\u8ddd\u79bb\u4e3ai\u7684\u8282\u70b9\u662f\u5426\u5b58\u5728 \n                    Test[k]|=Judge[Que[k]-Rem[j]];\n        for(int j=Rem_Cnt;j;--j)\t\t//\u66f4\u65b0Judge[] \n            Q[++Tot]=Rem[j],Judge[Rem[j]]=1;\t//Q[]\u91cc\u9762\u653e\u66f4\u65b0\u8fc7\u7684Judge,\u4ee5\u4fbf\u91cd\u7f6eJudge \n    }\n    for(int i=1;i<=Tot;++i)\n        Judge[Q[i]]=0;\n}\nvoid Solve(int u){\n    Vis[u]=Judge[0]=1; \t\t//\u6807\u8bb0\u91cd\u5fc3\u4e3a\u4f7f\u7528\u8fc7 \n    Calc(u);\t\t\t\t//\u66f4\u65b0\u7b54\u6848 \n    for(int i=Head[u],v;i;i=E[i].Next){\t//\u5904\u7406\u5404\u5b50\u6811 \n        if(Vis[v=E[i].Ver])\n            continue;\n        Sum=Size[v];\n        Maxp[Root=0]=Sum;\n        Get_Root(v,0);\t\t//\u627e\u5b50\u6811\u91cd\u5fc3 \n        Solve(Root);\t\t//\u9012\u5f52\u5904\u7406\u5b50\u6811 \n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<n;++i){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        Add_Edge(x,y,z);\n        Add_Edge(y,x,z);\n    }\n    for(int i=1;i<=m;++i)\t\t//m<=100,\u79bb\u7ebf\u5904\u7406 \n        scanf(\"%d\",&Que[i]);\n    Maxp[Root]=Sum=n;\n    Get_Root(1,0);\t\t\t\t//\u5148\u627e\u91cd\u5fc3 \n    Solve(Root);\t\t\t\t//\u4ece\u91cd\u5fc3\u5f00\u59cb\u5904\u7406 \n    for(int i=1;i<=m;++i)\n        if(Test[i])\n            puts(\"AYE\");\n        else\n            puts(\"NAY\");\n    return 0;\n}\n```",
        "postTime": 1537361095,
        "uid": 24518,
        "name": "\u5047\u88c5\u601d\u8003",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "#<center>\u53d1\u9898\u89e3\u62a2\u4e00\u8840\n\n\u8fd9\u9898\u548c\u6811\u4e0a\u7684\u8def\u5f84\u6709\u5173\uff0c\u70b9\u5206\u6cbb\u5c31\u7acb\u9a6c\u5957\u4e0a\n\n\u4f46\u662f\u4e0d\u80fd\u5bf9\u6bcf\u4e2a\u8f93\u5165\u7684k\u90fd\u70b9\u5206\u6cbb\u4e00\u904d\uff0c\u8fd9\u6837\u5f97\u5206\u597d\u50cf\u662fT60\n\n\u4e8e\u662f\u4e4e\u70b9\u5206\u6cbb\u4e00\u904d\uff0c\u7edf\u8ba1\u51fa\u6bcf\u79cd\u8def\u5f84\u957f\u5ea6\u7684\u65b9\u6848\u6570\uff0ck<=10000000\uff0c\u6570\u7ec4\u52c9\u5f3a\u5f00\u4e0b\u3002\n\n\u6bcf\u6b21\u8baf\u95ee\u65f6\uff0c\u67e5\u8868\u51fa\u89e3\u3002\n\n##\u5bf9\u4e8e\u8fd9\u9898\uff0c\u9898\u76ee\u63cf\u8ff0\u6709\u8bef\uff0c\u8f93\u51fa\u7684NYE\u5b9e\u4e3aNAY\u3002\n\n##\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\n\n```cpp\n%:pragma GCC optimize(3)\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=10010,INF=1e9,K=10000001;\nint n,k,x,y,z,minn,size,root,b[N<<1],c[N<<1],ne[N<<1],fi[N],son[N],tot,m,d[N],num[K];\nbool done[N];\ninline void add(int x,int y,int z){\n    b[++k]=y; c[k]=z; ne[k]=fi[x]; fi[x]=k;\n}\ninline int max(int x,int y){\n    return x>y?x:y;\n}\nvoid getroot(int x,int fa){\n    son[x]=1;\n    int bal=0;\n    for (int j=fi[x]; j; j=ne[j])\n    if (b[j]!=fa&&!done[b[j]]){\n        getroot(b[j],x);\n        son[x]+=son[b[j]];\n        bal=max(bal,son[b[j]]);\n    }\n    bal=max(bal,size-son[x]);\n    if (bal<minn) minn=bal,root=x;\n}\nvoid getdeep(int x,int fa,int deep){\n    d[tot++]=deep;\n    for (int j=fi[x]; j; j=ne[j])\n    if (b[j]!=fa&&!done[b[j]]) getdeep(b[j],x,deep+c[j]);\n}\nvoid calc(int now,int ind,int init){\n    tot=0;\n    getdeep(now,now,0);\n    for (int i=0; i<tot; i++)\n    for (int j=0; j<tot; j++)\n    if (ind&&d[i]+d[j]<=K) ++num[d[i]+d[j]]; else if (d[i]+d[j]+init<=K) --num[d[i]+d[j]+init];\n}\nvoid work(int x){\n    calc(x,1,0);\n    done[x]=1;\n    for (int j=fi[x]; j; j=ne[j])\n    if (!done[b[j]]){\n        calc(b[j],0,c[j]*2);\n        minn=INF; size=son[b[j]]; getroot(b[j],x);\n        work(root);\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1; i<=n-1; i++) scanf(\"%d%d%d\",&x,&y,&z),add(x,y,z),add(y,x,z);\n    minn=INF; size=n; getroot(1,1);\n    work(root);\n    for (int i=1; i<=m; i++){\n        scanf(\"%d\",&k);\n        if (num[k]) printf(\"AYE\\n\"); else printf(\"NAY\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1499612925,
        "uid": 46701,
        "name": "Bang_Dream",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "```\n//Pro:P3806 \u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\n\n//\u5199\u4e00\u7bc7\u4e0e\u4ed6\u4eec\u505a\u6cd5\u4e0d\u540c\u7684\u9898\u89e3\n//\u8fd9\u4e2a\u505a\u6cd5\u50cf P4178 Tree \u5dee\u4e0d\u591a \n\n//\u4ecd\u7136\u662f\u5b58\u4e0b\u6240\u6709\u7684\u8be2\u95ee\uff0c\u79bb\u7ebf\u64cd\u4f5c\n//\u6211\u4eec\u7528flag[i]\u8868\u793a\u7b2ci\u4e2a\u8be2\u95ee\u80fd\u6ee1\u8db3\u7684\u6b21\u6570\n//\u5728\u5206\u6cbb\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u662f\u5148\u5904\u7406\u7236\u4eb2\uff0c\u518d\u5bb9\u65a5\u5904\u7406\u51cf\u6389\u513f\u5b50 \n\n//\u5982\u679c\u90fd\u5904\u7406\u5b8c\u4e4b\u540eflag[i]\u4ecd\u7136\u662f>0\u7684\uff0c\u90a3\u5c31\u8bf4\u660e\u5b58\u5728\u8fd9\u6837\u4e00\u6761\u8def\u5f84\uff0c\u5426\u5219\u5c31\u4e0d\u5b58\u5728\n\n//\u590d\u6742\u5ea6\u7684\u8bdd\uff0c\u5e94\u8be5\u662fm*nlogn+nlog^2n\u7684\u5427 \u4e0d\u592a\u4f1a\u7b97 \n\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\ninline int read()\n{\n    char c=getchar();int num=0;\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar())\n        num=num*10+c-'0';\n    return num;\n}\n\nconst int N=1e4+5;\nconst int M=1e7+5;\nconst int INF=599518803;\n\nint n,m;\nint k[N];\n\nint head[N],num_edge;\nstruct Edge\n{\n    int v,w,nxt;\n}edge[N<<1];\n\ninline void add_edge(int u,int v,int w)\n{\n    edge[++num_edge].v=v;\n    edge[num_edge].w=w;\n    edge[num_edge].nxt=head[u];\n    head[u]=num_edge;\n}\n\nbool vis[N];\nint flag[M];\n\nint Siz,root;\nint mxson[N],siz[N];\nvoid getroot(int u,int fa)\n{\n    siz[u]=1,mxson[u]=0;\n    for(int i=head[u],v;i;i=edge[i].nxt)\n    {\n        v=edge[i].v;\n        if(v==fa||vis[v])\n            continue;\n        getroot(v,u);\n        siz[u]+=siz[v];\n        mxson[u]=max(mxson[u],siz[v]);\n    }\n    mxson[u]=max(mxson[u],Siz-siz[u]);\n    if(mxson[u]<mxson[root])\n        root=u;\n}\n\nint dep[N],dis[N],cnt;\nvoid getdis(int u,int fa)\n{\n    dis[++cnt]=dep[u];\n    for(int i=head[u],v;i;i=edge[i].nxt)\n    {\n        v=edge[i].v;\n        if(vis[v]||v==fa)\n            continue;\n        dep[v]=dep[u]+edge[i].w;\n        getdis(v,u);\n    }\n}\n\nvoid solve(int u,int dist,int val)\t\t//val\u8868\u793a\u662f\u52a0\u8fd8\u662f\u5bb9\u65a5\u51cf\u6389 \n{\n    dep[u]=dist,cnt=0;\n    getdis(u,u);\n    sort(dis+1,dis+cnt+1);\n    for(int i=1,l,r;i<=m;++i)\n    {\n        for(l=1,r=cnt;l<r;)\n        {\n            if(dis[l]+dis[r]>k[i])\t\t//\u8c03\u6574\u8fb9\u754c \n                --r;\n            else if(dis[l]+dis[r]<k[i])\n                ++l;\n            else\t//\u53ef\u4ee5\u62fc\u51fa\u4e86\uff0c\u8ba1\u7b97\u70b9\u5bf9\u4e2a\u6570 \n            {\n                if(dis[l]==dis[r])\n                {\n                    flag[i]+=val*(r-l+1)*(r-l)/2;\n                \tbreak;\n\t\t\t\t}\n                else\n                {\n                    int l1=1,l2=1;\t\t//\u679a\u4e3e\u6c42\u76f8\u7b49\u7684\u6570\u6709\u591a\u5c11\u4e2a \n                    for(;l<r&&dis[l+1]==dis[l];++l,++l1);\n                    for(;r>l&&dis[r-1]==dis[r];--r,++l2);\n                    flag[i]+=val*l1*l2;\n                    ++l,--r;\n//                    int ll=l,rr=r,mid,pos=ll;\t\t\u4e8c\u5206\u6c42 \n//                    while(ll<=rr)\n//                    {\n//                        mid=(ll+rr)>>1;\n//                        if(dis[mid]==dis[l])\n//                        {\n//                            ll=mid+1;\n//                            pos=mid;\n//                        }\n//                        else\n//                            rr=mid-1;\n//                    }\n//                    int a=pos-l+1;\n//                    l=pos+1;\n//                    ll=l,rr=r,pos=rr;\n//                    while(ll<=rr)\n//                    {\n//                        mid=(ll+rr)>>1;\n//                        if(dis[mid]==dis[r])\n//                            rr=mid-1,pos=mid;\n//                        else\n//                            ll=mid+1;\n//                    }\n//                    flag[i]+=val*a*(r-pos+1);\n//                    r=pos-1;\n                }\n            }\n        }\n    }\n}\n\nvoid divide(int u)\n{\n    solve(u,0,1);\t//\u7b97\u91cd\u5fc3\u7684\u7b54\u6848 \n    vis[u]=1;\n    for(int i=head[u],v;i;i=edge[i].nxt)\n    {\n        v=edge[i].v;\n        if(vis[v])\n            continue;\n        solve(v,edge[i].w,-1);\t\t//\u5c06\u513f\u5b50\u51cf\u6389 \n        Siz=siz[v],root=0;\n        getroot(v,v);\n        divide(root);\n    }\n}\n\nint main()\n{\n    n=read(),m=read();\n    for(int i=1,a,b,c;i<n;++i)\n    {\n        a=read(),b=read(),c=read();\n        add_edge(a,b,c);\n        add_edge(b,a,c);\n    }\n    for(int i=1;i<=m;++i)\n        k[i]=read();\n    Siz=n,mxson[0]=INF;\n    getroot(1,1);\n    divide(root);\n    for(int i=1;i<=m;++i)\n    {\n        if(flag[i])\n            puts(\"AYE\");\n        else\n            puts(\"NAY\");\n    }\n    return 0;\n}\n```",
        "postTime": 1535072910,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u4f3c\u4e4e\u5f88\u65e9\u4ee5\u524d\u5c31\u5b66\u8fc7\u4e86\uff0c\u4f46\u662f\u4e00\u76f4\u6ca1\u5199\u535a\u5ba2\uff0c\u73b0\u5728\u6765\u8865\u4e00\u4e0b\u9505\u3002\n\n### \u5206\u6cbb\n\u6211\u4eec\u9996\u5148\u968f\u4fbf\u5c31\u9009\u62e9\u4e00\u4e2a\u70b9\u5f53\u505a\u6839\u8282\u70b9\n\n\u663e\u7136\uff0c\u8fd9\u68f5\u6811\u91cc\u9762\u6709\u8fd9\u4e48\u4e24\u79cd\u5177\u6709\u7279\u5b9a\u6027\u8d28\u7684\u8fb9\n\n1.\u7a7f\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\n\n2.\u4e0d\u7a7f\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\n\n\u5bf9\u4e8e\u7b2c1\u7c7b\u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528$dis[u]$\u8868\u793a\u4ece\u70b9$u$\u5230\u76ee\u524d\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\n\n\u90a3\u4e48\u7a7f\u8fc7\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684\u8ddd\u79bb\u5c31\u662f$dis[u]+dis[v]$\u3002\n\n\u800c\u7b2c2\u7c7b\u7684\u70b9\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5728\u8fd9\u4e2a\u5b50\u6811\u91cc\u9762\u518d\u5bfb\u627e\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u91cd\u590d\u7b2c1\u7c7b\u70b9\u6240\u505a\u7684\u4e8b\u3002\n\n\u7531\u6b64\u53ef\u89c1\uff0c\u5206\u6cbb\u7684\u601d\u60f3\u5c31\u5f88\u663e\u7136\u4e86\u3002\n### \u6811\u7684\u91cd\u5fc3\n\n\u4f46\u662f\u5982\u679c\u76f4\u63a5\u8fd9\u6837\u6c42\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u4f1a\u9000\u5316\u76f4\u5230$n$\u65b9\uff0c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u80fd\u63a5\u53d7\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6c42\u51fa\u8fd9\u4e00\u68f5\u6811\u7684\u91cd\u5fc3\uff0c\u53ef\u4ee5\u4f7f\u6bcf\u4e00\u5c0f\u68f5\u6811\u9012\u5f52\u7684\u65f6\u95f4\u4e3a$log$  $n$\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#define maxn 100010\n#define inf 100000000\n#define re register\nusing namespace std;\ninline int read()\n{\n\tint p=0,f=1;char ch=getchar();\n\tfor(;ch<'0'||ch>'9';ch=getchar())\n\t\tif(ch=='-')\tf*=-1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar())\n\t\tp=p*10+ch-48;\n\treturn p*f;\n}\nstruct node\n{\n\tint v,dis,next;\n}edge[maxn<<1];\nint tot,st[maxn],mroot[maxn],size[maxn],dis[maxn],nowd[maxn],n,m;\nint vis[maxn],lans[inf],judge[inf],q[maxn],query[1010],sum,root,ans;\nvoid add(int u,int v,int dis)\n{\n    edge[++tot].next=st[u];\n    edge[tot].v=v;\n    edge[tot].dis=dis;\n    st[u]=tot;\n}\nvoid getroot(int u,int pa)\n{\n    size[u]=1;mroot[u]=0;\n    for(re int i=st[u];i;i=edge[i].next) \n    {\n        re int v=edge[i].v;\n        if (v==pa||vis[v]) \n\t\t\tcontinue;\n        getroot(v,u);\n        size[u]+=size[v];\n        mroot[u]=max(mroot[u],size[v]);\n    }\n    mroot[u]=max(mroot[u],sum-size[u]);\n    if (mroot[u]<mroot[root]) \n\t\troot=u;\n}\nvoid getdis(int u,int fa)\n{\n    nowd[++nowd[0]]=dis[u];\n    for(re int i=st[u];i;i=edge[i].next)\n    {\n        re int v=edge[i].v;\n        if(v==fa||vis[v])continue;\n        dis[v]=dis[u]+edge[i].dis;\n        getdis(v,u);\n    }\n}\nvoid calc(int u)\n{\n    re int p=0;\n    for (re int i=st[u];i!=0;i=edge[i].next)\n    {\n        re int v=edge[i].v;\n        if (vis[v])\n\t\t\tcontinue;\n        nowd[0]=0;dis[v]=edge[i].dis;\n        getdis(v,u);\n        for(re int j=nowd[0];j!=0;j--)\n        \tfor(re int k=1;k<=m;k++)\n        \t\tif (query[k]>=nowd[j])\n        \t\t\tlans[k]|=judge[query[k]-nowd[j]];\n        for(re int j=nowd[0];j!=0;j--)\n        {\n        \tq[++p]=nowd[j];\n\t\t\tjudge[nowd[j]]=1;\n\t\t}\n    }\n    for(re int i=1;i<=p;i++)\n    \tjudge[q[i]]=0;\n\n}\nvoid solve(int u)\n{   \n    vis[u]=judge[0]=1;\n\tcalc(u);\n    for(re int i=st[u];i;i=edge[i].next)\n    {\n        re int v=edge[i].v;\n        if (vis[v])\n\t\t\tcontinue;\n        sum=size[v]; \n\t\tmroot[root=0]=inf;\n        getroot(v,0); \n\t\tsolve(root);\n    }\n}\nint main()\n{\n    n=read();m=read();\n    for(re int i=1;i<n;i++)\n    {\n        re int u=read(),v=read(),dis=read();\n        add(u,v,dis);add(v,u,dis);\n    }\n    for(re int i=1;i<=m;i++)\n    \tquery[i]=read();\n    mroot[root]=sum=n;\n    getroot(1,0); \n    solve(root);\n    for (re int i=1;i<=m;i++)\n    {\n        if (lans[i]) \n\t\t\tprintf(\"AYE\\n\");\n        else \n\t\t\tprintf(\"NAY\\n\");\n    }\n}\n```\n\n\n",
        "postTime": 1565488796,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5341\u5206\u66b4\u529b\u7684\u7b97\u6cd5\uff0c\u6bcf\u6b21\u627e\u5230\u6811\u7684\u91cd\u5fc3\u4ee5\u540e\u628a\u5b83\u5f53\u4e3a\u6839\u7136\u540e\u518d\u91cd\u65b0\u8fdb\u884c\n\n\u8fd9\u9053\u9898\u6240\u5230\u8fbe\u957f\u5ea6\u4e3a$k$\u7684\u9053\u8def\u6709$2$\u79cd\u60c5\u51b5\n\n\u4e00\u79cd\u60c5\u51b5\u662f\u7ecf\u8fc7\u6839$root$,$x$\u5230$y$\u7684\u8ddd\u79bb\u4e3a$dis[x]+dis[y](lca(x,y)=root)$\n\n\u800c\u8fd8\u6709\u4e00\u79cd\u662f\u7ecf\u8fc7\u5b50\u6811\u7684\uff0c\u5c31\u53bb\u8fdb\u884c\u5206\u6cbb\u5373\u53ef\n\u7136\u540e\u5c31\u6ca1\u6709\u4e86\n\n\u5982\u679c\u662f\u66b4\u529b\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O(floor \\times n)$ $floor$\u4e3a\u6811\u7684\u5c42\u6570\n\n\u5982\u679c\u662f\u70b9\u5206\u6cbb\u7684\u8bdd\uff0c\u56e0\u4e3a\u6bcf\u6b21\u662f\u6811\u7684\u91cd\u5fc3\u6240\u4ee5\u5c42\u6570\u4e0d\u8d85\u8fc7$\\log n$,\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a:$O(n\\log n)$\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<climits>\nusing namespace std;\ninline int read(){\n    int f=1,ans=0;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){ans=ans*10+c-'0';c=getchar();}\n    return f*ans;\n}\nconst int MAXN=10001;\nconst int MAXN1=10000001;\nint n,q;\nstruct node{\n    int u,v,w,nex;\n}x[MAXN<<1];\nint cnt,head[MAXN],vis[MAXN],root,sum[MAXN],maxnson[MAXN],sigma,maxn=INT_MAX,query[MAXN],rem[MAXN];\nvoid add(int u,int v,int w){\n    x[cnt].u=u,x[cnt].v=v,x[cnt].w=w,x[cnt].nex=head[u],head[u]=cnt++;\n}\nvoid get(int xx,int fath){\n    sum[xx]=1;\n    for(int i=head[xx];i!=-1;i=x[i].nex){\n        if(x[i].v==fath) continue;\n        if(vis[x[i].v]) continue;\n        get(x[i].v,xx);\n        maxnson[xx]=max(maxnson[xx],maxnson[x[i].v]);\n        sum[xx]+=sum[x[i].v];\n    }\n    int pd=max(maxnson[xx],sigma-sum[xx]);\n    if(pd<maxn){\n        pd=maxn;\n        root=xx;\n    }\n    return;\n}\nint num_dis[MAXN1],dis[MAXN];\nvoid dfs(int xx,int fath){\n    rem[++rem[0]]=dis[xx];\n    for(int i=head[xx];i!=-1;i=x[i].nex){\n        if(x[i].v==fath) continue;\n        if(vis[x[i].v]) continue;\n        dis[x[i].v]=dis[xx]+x[i].w;\n        dfs(x[i].v,xx);\n    }return;\n}\nbool pd[MAXN];\nint que[MAXN];\nvoid calc(int xx,int fath){\n    que[0]=0;\n    for(int i=head[xx];i!=-1;i=x[i].nex){\n        if(vis[x[i].v]) continue;\n        if(x[i].v==fath) continue;\n        rem[0]=0;\n        dis[x[i].v]=x[i].w;\n        dfs(x[i].v,xx);\n        for(int j=1;j<=q;j++)\n            for(int z=1;z<=rem[0];z++) \n                if(query[j]>=rem[z]) pd[j]|=num_dis[query[j]-rem[z]];\n        \n        for(int j=1;j<=rem[0];j++) que[++que[0]]=rem[j],num_dis[rem[j]]=1;    \n    }\n    for(int i=1;i<=que[0];i++) num_dis[que[i]]=0;\n}\nvoid solve(int xx,int fath){ \n    vis[xx]=1,num_dis[0]=1;calc(xx,fath);\n    for(int i=head[xx];i!=-1;i=x[i].nex){\n        if(x[i].v==fath) continue;\n        if(vis[x[i].v]) continue;\n        sigma--;\n        get(x[i].v,xx);        \n        solve(x[i].v,xx);\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    n=read(),q=read();\n    for(int i=1;i<n;i++){\n        int u=read(),v=read(),w=read();\n        add(u,v,w),add(v,u,w);\n    }\n    for(int i=1;i<=q;i++) query[i]=read();\n    sigma=n,get(1,0);\n    get(1,0);\n    solve(1,0);\n    for(int i=1;i<=q;i++){\n        if(pd[i]) printf(\"AYE\\n\");\n        else printf(\"NAY\\n\");\n    }\n}\n```",
        "postTime": 1546008782,
        "uid": 87382,
        "name": "_sry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": " http://www.elijahqi.win/archives/3250\n https://blog.csdn.net/elijahqi/article/details/80135639\n\nbzoj\u6570\u636e\u5b58\u5728\u957f\u5ea6\u4e3a0\u7684\u8be2\u95ee\u7136\u800c\u672c\u9898\u4e0d\u5b58\u5728\n\u672c\u9898\u6570\u636e\u6709\u5b58\u5728\u8be2\u95ee\u662f\u5426\u957f\u5ea6\u4e3a0\u7684\u70b9\u5373 \u81ea\u5df1\u548c\u81ea\u5df1\u6784\u6210\u5373\u53ef\n\n\u8fa3\u9e21elijahqi\u7684\u505a\u6cd5\u662f\u5f00\u4e00\u4e2a\u6808flag \u5b58\u4e4b\u524d\u662f\u5426\u51fa\u73b0 \u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u5b50\u6811\u505a.. \u505a\u5230\u65f6\u5019\u5c31\u770b\u4e00\u4e0b\u6211\u8fd9\u4e2a\u8be2\u95ee\u7684k\u7528\u4ed6\u51cf\u53bb\u5f53\u524d\u7684\u8ddd\u79bb\u770b\u4e00\u4e0b\u8fd9\u4e2a\u5dee\u662f\u5426\u5b58\u5728\u5373\u53ef\n\n\u7136\u540e\u6e05\u7a7a\u4ecd\u7136 \u4e00\u4e2a\u4e00\u4e2a\u5b50\u6811\u628adis\u6e05\u7a7a\u5373\u53ef \u590d\u6742\u5ea6\u5927\u7ea6\u662f\u5c11\u4e00\u4e2alog\u7684 \u5e38\u6570\u53ef\u80fd\u6bd4\u8f83\u5927\u6ca1\u6709\u4ed4\u7ec6\u5361\n\n```\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0,f=1;char ch=gc();\n    while(!isdigit(ch)) {if (ch=='-') f=-1;ch=gc();}\n    while(isdigit(ch)) x=x*10+ch-'0',ch=gc();\n    return x*f;\n}\nconst int N=10010;\nconst int inf=0x3f3f3f3f;\nstruct node{\n    int y,z,next;\n}data[N<<1];\nint qr[N],dis[N],q[N],tp,f[N],n,m,size[N],sum,root,h[N],num;bool ans[N],visit[N],flag[10001000];\ninline void get_root(int x,int fa){\n    f[x]=0;size[x]=1;\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y;if (y==fa||visit[y]) continue;\n        get_root(y,x);size[x]+=size[y];f[x]=max(f[x],size[y]);\n    }f[x]=max(f[x],sum-size[x]);\n    if (f[x]<f[root]) root=x;\n}\ninline void dfs(int x,int fa){\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y,z=data[i].z;if (y==fa||visit[y]) continue;\n        dis[y]=dis[x]+z;dfs(y,x);\n    }\n}\ninline void dfs1(int x,int fa,int id){\n\tif (dis[x]>qr[id]) return;\n\tif(flag[qr[id]-dis[x]]) {ans[id]=1;return;}\n\tfor (int i=h[x];i;i=data[i].next){\n\t\tint y=data[i].y;if (y==fa||visit[y]) continue;\n\t\tdis[y]=dis[x]+data[i].z;dfs1(y,x,id);\n\t}\n}\ninline void dfs2(int x,int fa){\n\tif (dis[x]>1e6) return;flag[dis[x]]=1;\n\tfor (int i=h[x];i;i=data[i].next){\n\t\tint y=data[i].y;if (y==fa||visit[y]) continue;\n\t\tdis[y]=dis[x]+data[i].z;dfs2(y,x);\n\t}\n}\ninline void clear(int x,int fa){\n\tflag[dis[x]]=0;\n\tfor (int i=h[x];i;i=data[i].next){\n\t\tint y=data[i].y;if(y==fa||visit[y]) continue;clear(y,x);\n\t}\n}\ninline void solve(int x){\n    visit[x]=1;dis[x]=0;tp=0;flag[0]=1;\n    for (int i=h[x];i;i=data[i].next){\n\t\tint y=data[i].y,z=data[i].z;if (visit[y]) continue;\n\t\tif (size[y]>size[x]) size[y]=sum-size[x];dis[y]=dis[x]+z;\n\t\tfor (int j=1;j<=m;++j) {\n\t\t\tif (ans[j]) continue;dfs1(y,x,j);\n\t\t}dfs2(y,x);\n\t}\n\tfor (int i=h[x];i;i=data[i].next) {\n\t\tint y=data[i].y;if (visit[y]) continue;\n\t\tclear(y,x);\n\t}\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y;if (visit[y]) continue;\n        sum=size[y];root=0;get_root(y,x);solve(root);\n    }\n}\nint main(){\n\tfreopen(\"bzoj1316.in\",\"r\",stdin);\n    n=read();m=read();\n    for (int i=1;i<n;++i){\n        int x=read(),y=read(),z=read();\n        data[++num].y=y;data[num].next=h[x];data[num].z=z;h[x]=num;\n        data[++num].y=x;data[num].next=h[y];data[num].z=z;h[y]=num;\n    }\n    for (int i=1;i<=m;++i) qr[i]=read(),!qr[i]?ans[i]=1:ans[i]=0;\n\tf[0]=inf;sum=n;get_root(1,1);solve(root);\n\tfor (int i=1;i<=m;++i) ans[i]?puts(\"Yes\"):puts(\"No\"); \n    return 0;\n}\n```",
        "postTime": 1524900969,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\u55ef..\u4e0a\u8bed\u6587\u8bfe\u81ea\u5df1YY\u51fa\u6765\u7684\u70b9\u5206\u6cbb,\u5b8c\u5168\u4e0d\u77e5\u9053\u5176\u4ed6dalao\u4eec\u662f\u600e\u4e48\u5199\u7684\n\n\u6211\u7684\u601d\u8def\u5927\u6982\u662f\u4e09\u904dDFS \u7b2c\u4e00\u904d\u627e\u51fa\u6811\u7684\u91cd\u5fc3\n\n\u7b2c\u4e8c\u904d\u4ee5\u91cd\u5fc3\u4e3a\u6839 \u7b97\u51fa\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f \u6240\u6709\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb \u4ee5\u53ca\u6574\u68f5\u6811\u7684DFS\u5e8f\n\n\u7b2c\u4e09\u904d\u5c31\u662f\u7b97\u6cd5\u7684\u6838\u5fc3 \u9012\u5f52\u8ba1\u7b97\u7ed3\u679c \u5177\u4f53\u89c1\u4ee3\u7801\u6ce8\u91ca\n\n```cpp\n// luogu-judger-enable-o2\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/* \n * File:   main.cpp\n * Author: Ytong\n *\n * Created on 2018\u5e741\u670826\u65e5, \u4e0b\u534812:56\n */\n\n#include <cstdlib>\n#include <vector>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing std::vector;\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::vector;\nusing std::max;\nusing std::min;\n\nusing int_t = long int;\nconst int_t LARGE = 10000;\n//\u7edf\u8ba1[start,end]\u5185\u6ee1\u8db3*a+*b==k\u7684\u6570\u5bf9\u6570\n\nint_t countN(int_t* start, int_t * end, int_t k) {\n    int_t result = 0;\n    while (start < end) {\n        if (*start + *end == k) {\n            result++;\n            int_t * temp = end;\n            while (*(temp - 1) == *temp && start < temp) {\n                temp--;\n                result++;\n            }\n            start++;\n        } else if (*start + *end < k) {\n            start++;\n        } else {\n            end--;\n        }\n    }\n    return result;\n}\n\nstruct Edge {\n    int_t to;\n    int_t weight;\n\n    Edge(int_t to, int_t weight) :\n    to(to), weight(weight) {\n    }\n\n};\nvector<Edge> graph[LARGE + 1];\nint_t size[LARGE + 1];\nint_t dfsSeq[LARGE + 1];\nint_t dis[LARGE + 1];\nint_t n, m;\nint_t root;\nint_t temp[LARGE + 1];\n//\u7b2c\u4e00\u4e2aDFS \u627e\u91cd\u5fc3\nint_t massCenter = -1;\nint_t massCenterSize = 0x7fffffff;\n\nint_t DFS1(int_t vertex, int_t from = -1) {\n    int_t result = 0;\n    int_t _size = 1;\n    for (Edge& x : graph[vertex]) {\n        if (x.to != from) {\n            int_t _temp = DFS1(x.to, vertex);\n            result = max(result, _temp);\n            _size += _temp;\n        }\n    }\n    result = max(result, n - _size);\n    if (result < massCenterSize) {\n        massCenterSize = result;\n        massCenter = vertex;\n    }\n    return _size;\n}\n//\u57fa\u4e8e\u65b0\u7684\u6811\u6839 \u6c42\u51fa\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f \u6240\u6709\u70b9\u5230\u6839\u8282\u70b9\u7684\u6743\u503c \u6240\u6709\u70b9\u7684DFS\u5e8f\n//\u8fd4\u56de\u5b50\u6811\u7684\u5927\u5c0f\n\nint_t DFS2(int_t vertex, int_t from = -1, int_t dis_ = 0) {\n    dfsSeq[++dfsSeq[0]] = vertex;\n    int_t currSize = 1;\n    dis[vertex] = dis_;\n    for (Edge& edge : graph[vertex]) {\n        if (edge.to != from) {\n            int_t _size = DFS2(edge.to, vertex, dis_ + edge.weight);\n            currSize += _size;\n        }\n    }\n    size[vertex] = currSize;\n    return currSize;\n}\n//\u7b97\u6cd5\u6838\u5fc3\n//\u5f53\u524d\u7684\u8282\u70b9vertex \u5bf9\u5e94dfs\u5e8f\u4e2d[left,right] \n//\u7edf\u8ba1\u8ddd\u79bb\u4e3aK\u7684\u70b9\u5bf9\u4e2a\u6570\nint_t DFS3(int_t vertex, int_t* left, int_t* right, int_t K, int_t from = -1) {\n    //\u4ee5\u6811\u6839\u4e3a\u4e00\u4e2a\u7aef\u70b9\u7684\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570\n    int_t cnt1 = 0;\n    //\u4e24\u7aef\u90fd\u5728\u4e00\u68f5\u5b50\u6811\u5185\u7684\u70b9\u5bf9\u4e2a\u6570\n    //\u7edf\u8ba1\u51fa\u6574\u9897\u5b50\u6811\u5185\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570\u540e \u51cf\u53bbcnt2 \u7ed3\u679c\u5c31\u662f\u7ecf\u8fc7\u5b50\u6811\u6811\u6839\u7684\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570\n    int_t cnt2 = 0;\n    \n    //\u9012\u5f52\u6240\u5f97\u5230\u7684\u7ed3\u679c\u548c\n    int_t cnt3 = 0;\n    int_t * pos = left + 1;\n    for (Edge& edge : graph[vertex]) {\n        if (edge.to != from) {\n            //1.\u9012\u5f52\u5904\u7406\n            cnt3 += DFS3(edge.to, pos, pos + size[edge.to] - 1, K, vertex);\n            //2.\u7edf\u8ba1\u5f53\u524d\u4e24\u7aef\u90fd\u5728\u5f53\u524d\u5b50\u6811\u5185\u7684\u70b9\u5bf9\u6570\n            //\u4ee5\u53ca\u4e00\u7aef\u4e3a\u6811\u6839\u7684\u70b9\u5bf9\u6570\n            for (int_t *x = pos; x <= pos + size[edge.to] - 1; x++) {\n                int_t i = x - pos + 1;\n                temp[i] = dis[*x] - dis[vertex];\n                if (temp[i] == K) {\n                    //                    cout << \"\u5b50\u6811\" << vertex << \" \u4ee5\u6811\u6839\u4e3a\u4e00\u7aef\u70b9\u7684\u70b9\u5bf9 \" << *x << \" \u7edf\u8ba1\u5b50\u6811 \" << edge.to << \"\u65f6\u8ba1\u5165\" << endl;\n                    cnt1++;\n                }\n            }\n            std::sort(&temp[1], &temp[size[edge.to] + 1]);\n            cnt2 += countN(&temp[1], &temp[size[edge.to]], K);\n            pos += size[edge.to];\n        }\n    }\n    for (int_t i = 1; i <= size[vertex] - 1; i++) {\n        temp[i] = dis[*(left + i)] - dis[vertex];\n    }\n    std::sort(&temp[1], &temp[size[vertex]]);\n    //    cout << \"\u5b50\u6811\" << vertex << \" \u7edf\u8ba1\u7ed3\u675f \" << \" \u4ee5\u6811\u6839\u4e3a\u4e00\u7aef\u7684\u70b9\u5bf9\u6570:\" << cnt1 << \" \u9012\u5f52\u7ed3\u679c:\" << cnt3 << \" \u4e24\u7aef\u90fd\u5728\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u70b9\u5bf9\u6570 \" << cnt2 << \" \u5b50\u6811\u5185\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570 \" << countN(&temp[1], &temp[size[vertex] - 1], K) << endl;\n    //    cout << \"\u5b50\u6811\" << vertex << \" \u7684\u603b\u5e8f\u5217\u4e3a\";\n    //    for (int_t i = 1; i <= size[vertex] - 1; i++) cout << temp[i] << \" \";\n    //    cout << endl;\n    //\u7ed3\u679c=\u9012\u5f52\u5f97\u5230\u7684\u7ed3\u679c+\u4ee5\u6811\u6839\u4e3a\u4e00\u4e2a\u7aef\u70b9\u7684\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570+\u6574\u9897\u5b50\u6811\u5185\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570-\u5b8c\u5168\u5728\u4e00\u68f5\u5b50\u6811\u5185\u7684\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u6570\n    return cnt1 + cnt3 + countN(&temp[1], &temp[size[vertex] - 1], K) - cnt2;\n\n}\n\nint main(int argc, char** argv) {\n    cin >> n>>m;\n    for (int_t i = 1; i <= n - 1; i++) {\n        int_t from;\n        int_t to;\n        int_t weight;\n        cin >> from >> to>>weight;\n        graph[from].push_back(Edge(to, weight));\n        graph[to].push_back(Edge(from, weight));\n\n    }\n    DFS1(rand() % n + 1);\n    root = massCenter;\n    DFS2(root);\n    for (int_t i = 1; i <= m; i++) {\n        int_t x;\n        cin>>x;\n        if (DFS3(root, &dfsSeq[1], &dfsSeq[n], x)) {\n            cout << \"AYE\" << endl;\n        } else {\n            cout << \"NAY\" << endl;\n        }\n    }\n    return 0;\n}\n\n\n```\n\u7b97\u6cd5\u7684\u901f\u5ea6\u8fd8\u53ef\u4ee5\uff0c\u5f00-O2\u7684\u60c5\u51b5\u4e0b\u6700\u6162\u7684\u70b9164ms\n",
        "postTime": 1517064244,
        "uid": 56891,
        "name": "officeyutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    },
    {
        "content": "\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define mo 100005\n#define mk make_pair\nvector< pair<int ,int > > d[mo];//\u7bad\u5934\u52a0\u7a7a\u683c\nint sz[mo];//\u6811\u7684\u91cd\u5fc3..\nint sd[mo];//\u6811\u7684\u91cd\u5fc3..\nint dist[mo];//\u8ba1\u7b97\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\nint shux[mo];//\u6807\u8bb0\u70b9\u662f\u4ece\u54ea\u4e2a\u5b50\u6811\u4e0b\u7684\nbool de[10000005];//\u6807\u8bb0k\u662f\u5426\u51fa\u73b0\u8fc7 \nint jl[mo];//\u5220\u9664\u6811\u7684\u91cd\u5fc3\u6807\u8bb0\nint zz;\nvoid dfsz(int node,int dad,int &maxs,int &v,int n) //\u8ba1\u7b97\u6811\u7684\u91cd\u5fc3\n{\n    sz[node]=1;\n    for(int i=0;i<d[node].size();i++)\n    {\n        int son=d[node][i].first;\n        if(son!=dad&&!jl[son])\n        {\n            dfsz(son,node,maxs,v,n);\n            sz[node]+=sz[son];\n            if(sz[son]<maxs)\n            {\n                maxs=sz[son];\n                v=son;\n            }\n        }\n    }\n    if(n-sz[node]<maxs)\n    {\n        maxs=n-sz[node];\n        v=node;\n    }\n}\nvoid dis(int node,int dad,int s,int &l,int j) //\u8ba1\u7b97\u70b9\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\n{\n    dist[l]=s;\n    shux[l]=j;//\u6807\u8bb0\u5c5e\u4e8e\u54ea\u4e2a\u5b50\u6811\n    l++;\n    if(dad==0) j=2;\n    for(int i=0;i<d[node].size();i++)\n    {\n        int son=d[node][i].first;\n        int ls=d[node][i].second;\n        if(dad==0) j++;//\u53ea\u6709dad\u4e3a\u521d\u59cb\u503c\u7684\u65f6\u5019\u5206\u5b50\u6811\u7f16\u53f7\n        if(son!=dad&&!jl[son])\n        {\n            dis(son,node,s+ls,l,j);\n        }\n    }\n}\nint shu(int k,int v,int d)//\u6807\u8bb0k\u662f\u5426\u51fa\u73b0\u8fc7\n{\n    int l=0;\n    memset(shux,0,sizeof(shux));\n    dis(v,0,d,l,0);\n    for(int i=0;i<l;i++)\n    {\n        for(int j=i+1;j<l;j++)\n        {\n            if(shux[i]!=shux[j])//\u53ea\u6709\u4e0d\u540c\u7684\u5b50\u6811\u53ef\u4ee5\u76f8\u52a0\n            {\n                //cout<<shux[i]<<' '<<shux[j]<<' '<<dist[i]<<' '<<dist[j]<<' '<<dist[i]+dist[j]<<' '<<i<<' '<<j<<endl;\n                de[dist[i]+dist[j]]=1;\n            }\n        }\n    }\n    return 0;\n}\nvoid dx(int node,int dad,int &l)//\u8ba1\u7b97\u6811\u7684\u5927\u5c0f\n{\n    l++;\n    for(int i=0;i<d[node].size();i++)\n    {\n        int son=d[node][i].first;\n        if(son!=dad&&!jl[son])\n            dx(son,node,l);\n    }\n}\nvoid dfs(int x,int &ans,int k)//\u6811\u7684\u5206\u6cbb\u9012\u5f52\n{\n    int n=0;\n    dx(x,0,n);//\u9996\u5148\u5224\u65ad\u5927\u5c0f\n    int mins=10000005,v=x;\n    dfsz(x,0,mins,v,n);//\u4e4b\u540e\u673a\u9009\u6811\u7684\u91cd\u5fc3\n    shu(k,v,0); //\u518d\u53bb\u5bfb\u627e\u8ddd\u79bb\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u8ddd\u79bb\u4e3ak \u7684\u6570\u5bf9\n    jl[v]=1;\n    for(int i=0;i<d[v].size();i++)\n    {\n        int son=d[v][i].first;\n        if(!jl[son])\n        {\n            int le=d[v][i].second;\n            //ans-=shu(k,son,le);\n            dfs(son,ans,k);\n        }\n    }\n   //jl[v]=0;\n}\nint main()\n{\n    int n,m,k;\n    while(scanf(\"%d%d\",&n,&m)!=EOF)\n    {\n        memset(de,false,sizeof(de));\n        int x,y,z;\n        for(int i=1;i<n;i++)\n        {\n            //cin>>x>>y>>z;\n            scanf(\"%d%d%d\",&x,&y,&z);\n            d[x].push_back(mk(y,z));\n            d[y].push_back(mk(x,z));\n        }\n        int ans=0;\n        dfs(1,ans,k);\n        for(int i=0;i<m;i++)\n        {\n            //cin>>k;\n            scanf(\"%d\",&k);\n            if(de[k]) //cout<<\"AYE\"<<endl;\n            printf(\"AYE\\n\");\n            else //cout<<\"NAY\"<<endl;\n            printf(\"NAY\\n\");\n        }\n    }\n}\n\n```",
        "postTime": 1508207190,
        "uid": 17777,
        "name": "wcl95716",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3806 \u3010\u3010\u6a21\u677f\u3011\u70b9\u5206\u6cbb1\u3011"
    }
]