[
    {
        "content": "\u5206\u4eab\u4e00\u4e2a\u4e0d\u7528\u5e26\u6743\u4e8c\u5206\u7684\u505a\u6cd5\u5427\u3002\n\n---\n\n\u4e3a\u4e86\u65b9\u4fbf\u63cf\u8ff0\uff0c\u7ed9\u6240\u6709\u975e $s$ \u7684\u70b9\u4e00\u4e2a\u70b9\u6743\uff0c\u8868\u793a\u8be5\u70b9\u4e0e $s$ \u4e4b\u95f4\u7684\u6240\u6709\u8fb9\uff08\u867d\u7136\u4e0d\u77e5\u9053\u6570\u636e\u9020\u6ca1\u9020\uff0c\u4f46\u53ef\u80fd\u4f1a\u6709\u91cd\u8fb9\uff09\u7684\u8fb9\u6743\u6700\u5c0f\u503c\uff08\u5982\u679c\u6ca1\u8fb9\u5219\u70b9\u6743\u8bbe\u4e3a\u65e0\u7a77\u5927\uff09\u3002\u5219\u9009\u4e2d\u8fd9\u4e2a\u70b9\u76f8\u5f53\u4e8e\u9009\u5b83\u8fde\u5411 $s$ \u7684\u8fb9\u3002\n\n\u9898\u76ee\u8f6c\u5316\u6210\u9009\u4e2d\u6070\u597d $k$ \u4e2a\u70b9 + \u5220\u53bb\u82e5\u5e72\u6761\u8fb9\uff0c\u4f7f\u5f97\u6700\u7ec8\u5f62\u6210\u4e00\u4e2a\u68ee\u6797\uff0c\u4e14\u6bcf\u68f5\u6811\u6070\u597d\u9009\u4e2d\u4e00\u4e2a\u70b9\uff0c\u6700\u5c0f\u5316 \u201c\u9009\u4e2d\u7684\u70b9\u6743\u503c\u51cf\u53bb\u5220\u8fb9\u4ee3\u4ef7\u201d\u3002\n\n\u63a5\u4e0b\u6765\u7684\u8ba8\u8bba\u4e2d\u9ed8\u8ba4\u4e0d\u8003\u8651 $s$\u3002\n\n---\n\n\u53ef\u4ee5\u5148\u5bf9\u6240\u6709\u70b9\u6c42\u6700\u5c0f\u751f\u6210\u68ee\u6797\uff0c\u5219\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u68ee\u6797\u91cc\u7684\u8fb9\u4e00\u5b9a\u4f1a\u88ab\u5220\u9664\uff08\u6bd4\u8f83\u663e\u7136\uff09\u3002\u8fd9\u6837\u5f97\u5230\u4e00\u4e2a\u521d\u59cb\u7684\u68ee\u6797\u3002\n\n\u5bf9\u4e8e\u521d\u59cb\u7684\u6bcf\u68f5\u6811\uff0c\u9996\u5148\u5fc5\u987b\u9009\u4e2d\u4e00\u4e2a\u70b9\uff0c\u53ef\u4ee5\u8bc1\u660e\u8d2a\u5fc3\u5730\u9009\u4e2d\u70b9\u6743\u6700\u5c0f\u7684\u70b9\u6700\u4f18\u3002\n\n\u8bbe $f_x(i)$ \u8868\u793a\u5728\u8fde\u901a\u5206\u91cf $x$ \u4e2d\u9009\u4e2d $i$ \u4e2a\u70b9\u7684\u6700\u5c0f\u7b54\u6848\uff0c\u53ef\u4ee5\u8003\u8651\u8d2a\u5fc3\u5730\u4f7f\u7528\u589e\u91cf\u6cd5\uff0c\u4ece $f_x(i-1)$ \u5bf9\u5e94\u7684\u7b54\u6848\u52a0\u5165\u4e00\u4e2a\u65b0\u70b9\u4f7f\u5f97 $f_x(i)$ \u6700\u5c0f\u3002\u8bc1\u660e\u65b9\u6cd5\u4e0e\u4e0a\u9762\u90a3\u6761\u8d2a\u5fc3\u6027\u8d28\u7c7b\u4f3c\u3002\n\n\u8fd9\u91cc\uff0c\u8bbe\u65b0\u70b9\u4e3a $x$\uff0c\u4e0e $x$ \u540c\u5c5e\u540c\u4e00\u8fde\u901a\u5757\u4e14\u5df2\u7ecf\u88ab\u9009\u4e2d\u7684\u70b9\u4e3a $y$\u3002\u5219 $x$ \u7684\u8d21\u732e\u7b49\u4e8e $x$ \u7684\u70b9\u6743\u51cf\u53bb $x\\to y$ \u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002\u5f53\u7136\uff0c\u52a0\u5165\u65b0\u70b9 $x$ \u540e\u8981\u5220\u53bb\u8fd9\u6761\u6700\u5927\u8fb9\u3002\n\n----\n\n\u6ce8\u610f\u5230 $f_x(i)$ \u662f\u51f8\u7684\uff08\u4e5f\u5373\u8be5\u9898\u5e26\u6743\u4e8c\u5206\u7684\u51f8\u6027\u8d28\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6240\u6709 $f_x(i)-f_x(i-1)$ \u5e76\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u53d6\u51fa\u524d\u82e5\u5e72\u4e2a\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n\u800c $f_x(i)-f_x(i-1)$ \u53c8\u53ef\u4ee5\u770b\u6210 $f_x(i-1)\\to f_x(i)$ \u4e2d\u65b0\u52a0\u8fdb\u6765\u7684\u70b9\u7684\u8d21\u732e\uff0c\u4e8e\u662f\u53ea\u9700\u8981\u5c1d\u8bd5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\uff0c\u4e5f\u5373\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u9700\u8981\u5220\u6389\u7684\u8fb9\u5373\u53ef\u3002\n\n---\n\n\u8003\u8651\u5230\u5177\u4f53\u5b9e\u73b0\uff0c\u4e0d\u59a8\u53bb\u8003\u8651\u6bcf\u6761\u8fb9\u4f1a\u88ab\u54ea\u4e2a\u70b9\u5220\u6389\u3002\n\n\u4ece\u5927\u5230\u5c0f\u8003\u8651\u6bcf\u6761\u8fb9\uff0c\u8bbe\u6700\u5927\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u8fde\u901a\u5757\u4e2d\u5206\u522b\u7684\u6700\u5c0f\u503c\u4e3a $x,y$\uff0c\u5219\u6700\u5927\u8fb9\u88ab\u5220\u6389\u7684\u65f6\u523b\u5bf9\u5e94\u7684\u70b9\u5e94\u8be5\u662f $\\max\\{x, y\\}$\uff08\u4e5f\u6bd4\u8f83\u663e\u7136\uff09\u3002\n\n\u4e4b\u540e\u5220\u6389\u6700\u5927\u8fb9\uff0c\u518d\u8003\u8651\u6b21\u5927\u8fb9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u53cd\u8fc7\u6765\u548c kruskal \u57fa\u672c\u4e00\u6837\uff0c\u56e0\u6b64\u5728 kruskal \u7684\u65f6\u5019\u987a\u4fbf\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002\n\n---\n\n\u65e0\u89e3\u7684\u60c5\u51b5\uff1a\u81f3\u5c11\u9700\u8981\u7684\u8fb9\u592a\u591a\uff0c\u6216\u8005\u6700\u591a\u80fd\u8fde\u7684\u8fb9\u592a\u5c11\uff08\u6ce8\u610f\u70b9\u6743\u4e3a\u65e0\u7a77\u5927\u7684\u70b9\u4e0d\u80fd\u88ab\u9009\u4e2d\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(M\\log M)$\uff0c\u74f6\u9888\u5728\u4e8e kruskal \u7684\u6392\u5e8f\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\ntypedef long long ll;\n\nconst int M = 500000;\nconst int INF = (1 << 30);\n\nstruct edge{\n\tint u, v, w;\n\tfriend bool operator < (const edge &a, const edge &b) {\n\t\treturn a.w < b.w;\n\t}\n}e[M + 5]; int cnt;\n\nint fa[M + 5], val[M + 5], key[M + 5];\nint find(int x) {return (fa[x] == x ? x : fa[x] = find(fa[x]));}\nbool unite(int x, int y, int k) {\n\tint fx = find(x), fy = find(y);\n\tif( fx != fy ) {\n\t\tif( val[fx] < val[fy] ) std::swap(fx, fy);\n\t\tkey[fx] = k, fa[fx] = fy; return true;\n\t} else return false;\n}\n\nint tmp[M + 5];\nint main() {\n\tint n, m, s, k; scanf(\"%d%d%d%d\", &n, &m, &s, &k);\n\tfor(int i=1;i<=n;i++) if( i != s ) fa[i] = i, val[i] = INF;\n\tfor(int i=1,u,v,w;i<=m;i++) {\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tif( u == s ) val[v] = std::min(val[v], w);\n\t\telse if( v == s ) val[u] = std::min(val[u], w);\n\t\telse e[++cnt] = (edge){u, v, w};\n\t}\n\t\n\tll ans = 0; std::sort(e + 1, e + cnt + 1);\n\tfor(int i=1;i<=cnt;i++) if( unite(e[i].u, e[i].v, e[i].w) ) ans += e[i].w;\n\t\n\tint p = 0;\n\tfor(int i=1;i<=n;i++) if( i != s && find(i) == i ) {\n\t\tif( val[i] == INF ) {puts(\"Impossible\"); return 0;}\n\t\tp++, ans += val[i], val[i] = INF;\n\t}\n\tif( p > k ) {puts(\"Impossible\"); return 0;}\n\t\n\tint tot = 0;\n\tfor(int i=1;i<=n;i++) if( i != s && val[i] != INF ) tmp[++tot] = val[i] - key[i];\n\tif( p + tot < k ) {puts(\"Impossible\"); return 0;}\n\t\n\tstd::sort(tmp + 1, tmp + tot + 1); for(int i=1;i<=k-p;i++) ans += tmp[i];\n\tprintf(\"%lld\\n\", ans);\n}\n```",
        "postTime": 1606211693,
        "uid": 41120,
        "name": "Tiw_Air_OAO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5633 \u3010\u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811\u3011"
    },
    {
        "content": "## $wqs$ \u4e8c\u5206\n\n\u7528\u6765\u89e3\u51b3\u4e00\u79cd\u7279\u5b9a\u7c7b\u578b\u95ee\u9898\u7684**\u4e8c\u5206**\n\n\u6709 $n$ \u4e2a\u7269\u54c1\uff0c\u9009\u62e9\u6bcf\u4e00\u4e2a\u7269\u54c1\u90fd\u6709\u4e00\u4e2a\u76f8\u5e94\u7684\u6743\u503c\uff0c\u9700\u8981\u6c42\u51fa\u5f3a\u5236\u9009\u51fa $k$ \u4e2a\u7269\u54c1\u65f6\u7684\u6700\u5927/\u6700\u5c0f\u6743\u503c\u548c\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u6ca1\u6709\u9650\u5236\u6761\u4ef6\u65f6\u6211\u4eec\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u6c42\u51fa\u7b54\u6848\n\n\u800c\u6709\u9650\u5236\u6761\u4ef6\u6211\u4eec\u5c31\u8981\u628a\u5b83\u8f6c\u5316\u6210\u4e00\u4e2a**\u53ef\u884c\u6027\u95ee\u9898**(\u5224\u65ad\u662f\u5426\u9009\u4e86 $k$ \u4e2a\u7269\u54c1)\n\n\u5177\u4f53\u505a\u6cd5\u662f**\u4e8c\u5206**\u4e00\u4e2a**\u504f\u79fb\u91cf** $\\Delta$\uff0c\u4f7f\u6bcf\u4e2a\u9700\u8981\u5f3a\u5236\u9009\u7684\u7269\u54c1\u52a0\u4e0a\u8fd9\u4e00\u4e2a**\u504f\u79fb\u91cf**\n\n\u518d\u8fdb\u884c**\u6ca1\u6709\u9650\u5236\u6761\u4ef6**\u65f6\u7684\u505a\u6cd5\n\n\u5224\u65ad\u662f\u5426\u9009\u4e86 $k$ \u4e2a\u7269\u54c1\uff0c\u6765\u6539\u53d8\u6211\u4eec**\u504f\u79fb\u91cf**\u7684\u53d6\u503c\u8303\u56f4(\u4e8c\u5206)\n\n\u5176\u5b9e [\u8fd9\u9053\u9898](https://www.luogu.org/problem/P5633) \u8ddf [\u8fd9\u9053\u9898](https://www.luogu.org/problem/P2619) \u505a\u6cd5\u5dee\u4e0d\u591a\uff0c\u90fd\u633a\u677f\u5b50\u7684\n\n\u4e0d\u8fc7\u6ce8\u610f\u5728\u505a**\u6700\u5c0f\u751f\u6210\u6811**\u4e4b\u524d\n\n\u53ef\u4ee5\u5148\u628a\u8fb9\u5206\u4e24\u7c7b\u6392\u5e8f\uff0c\u6700\u540e\u5f52\u5e76\u4e00\u4e0b\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u53ef\u4ee5\u5c11\u4e00\u4e2a $log$\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log m + m\\log V\\alpha (m))$\n\n$\\color {DeepSkyBlue} {Code :}$\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#define N 50005\n#define E 500005\n#define inf 1e9\n\nusing namespace std;\n\nint n, m, s, k;\n\nint tot0, tot1;\nstruct edge {\n\tint u, v, w;\n\tbool isNeed;\n}orig[2][E], e[E];\n\nbool cmp_edge(const edge &lhs, const edge &rhs) { return lhs.w < rhs.w; }\n\ninline void read(int &x) {\n\tx = 0; char ch = getchar();\n\twhile(!isdigit(ch)) ch = getchar();\n\twhile(isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n}\n\nvoid mergeSort(int delta) {\n\tfor(int i = 1; i <= tot1; ++i) orig[1][i].w += delta;\n\tint i, j, o;\n\ti = j = o = 0;\n\twhile(i < tot0 && j < tot1) {\n\t\tif(cmp_edge(orig[0][i + 1], orig[1][j + 1])) { // w \u76f8\u540c, \u4e0e s \u76f8\u8fde\u7684\u70b9\u4f18\u5148\n\t\t\te[++o] = orig[0][++i];\n\t\t} else {\n\t\t\te[++o] = orig[1][++j];\n\t\t}\n\t}\n\twhile(i < tot0) e[++o] = orig[0][++i];\n\twhile(j < tot1) e[++o] = orig[1][++j];\n\tfor(int i = 1; i <= tot1; ++i) orig[1][i].w -= delta;\n\treturn;\n}\n\nnamespace UFS {\n\nint fa[N];\ninline void init() { for(int i = 1; i <= n; ++i) fa[i] = i; }\ninline int find(int u) { return fa[u] == u ? u : fa[u] = find(fa[u]); }\ninline bool merge(int u, int v) {\n\tint x = find(u), y = find(v);\n\tif(x == y) return false;\n\treturn fa[x] = y, true;\n}\n\n} using UFS :: merge;\n\nint cnt;\nlong long res;\nbool check(int delta) {\n\tmergeSort(delta);\n\tres = cnt = 0;\n\tUFS :: init();\n\tint block = n;\n\tfor(int i = 1; i <= m; ++i) {\n\t\tif(!merge(e[i].u, e[i].v)) continue;\n\t\tcnt += e[i].isNeed;\n\t\tres += e[i].w;\n\t\tif(--block == 1) break;\n\t}\n\treturn cnt >= k;\n}\n\nint main() {\n\tint u, v, w;\n\tread(n), read(m), read(s), read(k);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tread(u), read(v), read(w);\n\t\tif(u == s || v == s) {\n\t\t\torig[1][++tot1] = (edge){u, v, w, true};\n\t\t} else {\n\t\t\torig[0][++tot0] = (edge){u, v, w, false};\n\t\t}\n\t}\n\t\n\t// judge if it is possible\n\tif(tot1 < k) return puts(\"Impossible\"), 0;\n\t\n\t// not scc\n\tint block = n;\n\tUFS :: init();\n\tfor(int i = 1; i <= tot0; ++i) block -= merge(orig[0][i].u, orig[0][i].v);\n\tfor(int i = 1; i <= tot1; ++i) block -= merge(orig[1][i].u, orig[1][i].v);\n\tif(block != 1) return puts(\"Impossible\"), 0;\n\t\n\t// mergeSort init\n\tsort(orig[0] + 1, orig[0] + 1 + tot0, cmp_edge);\n\tsort(orig[1] + 1, orig[1] + 1 + tot1, cmp_edge);\n\t\n\t// \u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 maxdelta\n\tint l = -inf, r = inf, mid, maxp = -inf;\n\tif(!check(l)) return puts(\"Impossible\"), 0;\n\twhile(l <= r) {\n\t\tmid = l + r >> 1;\n\t\tif(check(mid)) {\n\t\t\tif(mid > maxp) maxp = mid;\n\t\t\tl = mid + 1;\n\t\t} else {\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\t\n\tcheck(maxp);\n\tprintf(\"%lld\\n\", res - 1ll * k * maxp);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1573781683,
        "uid": 88471,
        "name": "Lskkkno1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5633 \u3010\u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8003\u8651wqs\u4e8c\u5206\uff0c\u7ed9\u7279\u6b8a\u7684\u8fb9\u4e8c\u5206\u4e00\u4e2a\u6743\u503c\u52a0\u4e0a\n\n\u505a\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u8c03\u6574\u8fd9\u4e2a\u6743\u503c\uff0c\u4e5f\u5c31\u662f\u7528\u6765\u5207\u51f8\u5305\u7684\u76f4\u7ebf\u7684\u659c\u7387\n\n\u627e\u5230\u6700\u9ad8\u70b9\u540e\uff0c\u786e\u5b9a\u4ed6\u662f\u5728\u6b32\u6c42\u7684\u70b9\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\uff0c\u8c03\u6574\u659c\u7387\n\n\u5982\u679c\u76f4\u63a5\u66b4\u529b\u6392\u5e8f\uff0c\u4f1a\u7684\u5230$60$\u5206\u7684\u597d\u6210\u7ee9\n\n\u5c06\u8fb9\u5206\u4e3a\u4e24\u7c7b\u540e\uff0c\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u5c31\u53ef\u4ee5\u901a\u8fc7\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cctype>\n#include<set>\n#include<queue>\n#define M 501000\n#define inf 0x3f3f3f3f\n#define LL long long\nconst double eps=1e-6;\nconst int mod=988244353;\nusing namespace std;\ninline int read(){\n\tint f=1,x=0;char s=getchar();\n\twhile (!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n\twhile (isdigit(s)){x=(x<<1)+(x<<3)+(s^48),s=getchar();}\n\treturn x*f;\n}\nint n,m,s,k,tot;\nstruct edge{\n\tint to,from,val,col;\n\tbool operator <(const edge&a)const{\n\t\treturn val<a.val||(val==a.val&&col>a.col);\t\n\t}\n}e[M],cur[M];\nvector<edge>st[2];\ninline void add_edge(int u,int v,int w){e[++tot].to=v,e[tot].from=u,e[tot].val=w;}\nint fa[M],cntcol;\ninline int find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\ninline LL kruskal(void){\n\tfor (int i=1;i<=n;i++) fa[i]=i;\n\tint x=0,y=0,cnte=0;\n\tfor (;x<st[0].size()&&y<st[1].size();){\n\t\tif (st[0][x]<st[1][y]) cur[++cnte]=st[0][x],x++;\n\t\telse cur[++cnte]=st[1][y],y++;\n\t}\n\tfor (;x<st[0].size();x++) cur[++cnte]=st[0][x];\n\tfor (;y<st[1].size();y++) cur[++cnte]=st[1][y];\n\tint cnt=0;LL ans=0;cntcol=0;\n\tfor (int i=1;i<=m;i++){\n\t\tif (find(cur[i].to)==find(cur[i].from)) continue;\n\t\tfa[fa[cur[i].to]]=cur[i].from,ans+=cur[i].val,cntcol+=cur[i].col,++cnt;\n\t\tif (cnt==n-1) return ans;\n\t}\n}\nsigned main(void){\n\tn=read(),m=read(),s=read(),k=read();\n\tfor (int i=1;i<=m;i++){\n\t\tint u=read(),v=read(),w=read();\n\t\tadd_edge(u,v,w);\n\t\tif (u==s||v==s) e[i].col=1,st[0].push_back(e[i]);\n\t\telse st[1].push_back(e[i]);\n\t}\n\tsort(st[0].begin(),st[0].end()),sort(st[1].begin(),st[1].end());\n\tint l=-1e9,r=1e9;\n\tfor (int i=0;i<st[0].size();i++) st[0][i].val+=l;\n\tkruskal();\n\tif (cntcol<k){printf(\"Impossible\");exit(0);}\n\tfor (int i=0;i<st[0].size();i++) st[0][i].val-=l;\n\tfor (int i=0;i<st[0].size();i++) st[0][i].val+=r;\n\tkruskal();\n\tif (cntcol>k){printf(\"Impossible\");exit(0);}\n\tfor (int i=0;i<st[0].size();i++) st[0][i].val-=r;\n\twhile (l<r){\n\t\tint mid=(l+r+1)>>1;\n\t\tfor (int i=0;i<st[0].size();i++) st[0][i].val+=mid;\n\t\tkruskal();\n\t\tfor (int i=0;i<st[0].size();i++) st[0][i].val-=mid;\n\t\tif (cntcol>=k) l=mid;\n\t\telse r=mid-1;\n\t}\n\tfor (int i=0;i<st[0].size();i++) st[0][i].val+=r;\n\tprintf(\"%lld\",kruskal()-(LL)k*r);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1591428757,
        "uid": 78290,
        "name": "Polaris_Dane",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5633 \u3010\u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a[\u4e00\u540dBlink\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/Foreverxxx/)\n\n\u611f\u8c22\u51fa\u9898\u4eba Inkyo \u5927\u4f6c\uff0c\u8ba9\u6211\u5b66\u5230\u4e86\u5f88\u591a\u3002\n\n### \u6b63\u6587\n\n**\u66b4\u529b\u505a\u6cd5**\n\n\u8bb0\u5f55 s \u8fde\u51fa\u53bb\u7684\u6240\u6709\u8fb9\uff0c\u6bcf\u6b21\u679a\u4e3e k \u6761\u8fb9\u51fa\u6765\uff0c\u6c42\u751f\u6210\u6811\uff0c\u5224\u65ad\u662f\u5426\u5408\u6cd5\u5e76\u4e14\u66f4\u65b0\u7b54\u6848\u3002\n\n**\u6b63\u786e\u505a\u6cd5\uff1a wqs \u4e8c\u5206**\n\n\u4e0d\u8981\u88ab\u65b0\u7b97\u6cd5\u5413\u5230\uff01\u5f88\u5bb9\u6613\u7406\u89e3\u7684\u3002\n\n\u5173\u4e8e wqs \u4e8c\u5206\u7684\u8be6\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e24\u7bc7\u6d1b\u8c37\u65e5\u62a5\uff1a\n\n[#366 Flying2018 wqs\u4e8c\u5206&\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/Flying2018/wqs-er-fen-min-ke-fu-si-ji-hu-xue-xi-bi-ji)\n\n[#354 Leap_Frog wqs\u4e8c\u5206 \u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/daniu/wqs-er-fen)\n\n\u6211\u7684\u505a\u6cd5\u53ea\u662f\u53c2\u8003\u4e86 wqs \u4e8c\u5206\u7684\u601d\u60f3\uff0c\u505a\u9898\u65f6\u60f3\u4e0d\u5230\u5f88\u6b63\u5e38\uff0c\u6bd5\u7adf\u505a\u9898\u65f6\u73b0\u60f3\u51fa\u7b97\u6cd5\u4e0d\u5bb9\u6613\u3002\n\n\u65e2\u7136\u4e8c\u5206\u6709\u591a\u79cd\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u770b\u51fa\u6b64\u9898\u7684\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u80c6\u5730\u5bf9 s \u7684\u6240\u6709\u51fa\u8fb9\u8fdb\u884c\u4e8c\u5206\u5904\u7406\u3002\n\n**\u600e\u4e48\u4e8c\u5206\u5462\uff1f**\n\n\u4e3a\u4e86\u6ee1\u8db3 k \u6761\u8fb9\u7684\u9650\u5236\u6761\u4ef6\uff0c\u540c\u65f6\u6b64\u9898\u53c8\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u6709\u5173\uff0c\u5927\u80c6\u5047\u8bbe\u4ee5\u4e0b\u601d\u8def\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u4e00\u4e2a\u504f\u79fb\u91cf $\\Delta$\uff0c\u8ba9 s \u7684\u6240\u6709\u51fa\u8fb9\u52a0\u4e0a $\\Delta$\uff0c\u7136\u540e\u6c42\u4e00\u8fb9\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u6c42\u51fa\u7684\u751f\u6210\u6811\u4e2d s \u8fde\u7684\u8fb9\u5927\u4e8e\u7b49\u4e8e k \u6761\uff0c\u5219\u8c03\u9ad8 $\\Delta$ \u7684\u503c\uff0c\u5426\u5219\u964d\u4f4e $\\Delta$ \u7684\u503c\u3002\n\n\u62ff\u6837\u4f8b\u6765\u8f85\u52a9\u7406\u89e3\uff0c\u5176\u4e2d\u8981\u6c42\u70b9 1 \u8fde\u7684\u8fb9\u6570\u91cf\u4e3a 1\u3002\n\n\u8fd9\u662f\u539f\u6765\u7684\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/uwo0s4vx.png)\n\n\u5047\u8bbe\u6b64\u65f6\u4e8c\u5206\u7684 $\\Delta$ \u503c\u4e3a 2\uff0c\u90a3\u4e48\u56fe\u5c31\u4e3a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lepwhvju.png)\n\n\u800c\u6211\u4eec\u5bf9\u65b0\u56fe\u505a\u4e00\u6b21 Kruskal\uff0c\u6c42\u5f97\u7684\u751f\u6210\u6811\u5c31\u4f1a\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9sx1gn7w.png)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8282\u70b9 1 \u5df2\u7ecf\u8fde\u4e86\u8d85\u8fc7 1 \u6761\u8fb9\uff0c\u8bf4\u660e\u6211\u4eec\u9700\u8981\u8c03\u9ad8 $\\Delta$ \u4f7f\u5f97\u8fde\u5411\u8282\u70b9 1 \u7684\u8fb9\u53d8\u5c11\uff0c\u5047\u8bbe\u6b64\u65f6\u4e8c\u5206\u7684 $\\Delta$ \u503c\u4e3a 10\uff0c\u65b0\u56fe\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sihn2273.png)\n\n\u90a3\u4e48\u6c42\u5f97\u7684\u6700\u5c0f\u751f\u6210\u6811\u4fbf\u662f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/rxai6yez.png)\n\n\u6b64\u65f6 1 \u521a\u597d\u8fde\u4e86 1 \u6761\u8fb9\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u8c03\u5927 $\\Delta$\uff0c\u91cd\u590d\u8fdb\u884c\uff0c\u5982\u679c\u8fde\u8fb9\u5c0f\u4e8e 1 \u6761\u5219\u8c03\u5c0f $\\Delta$ \u7684\u503c\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\uff1a\n\n1\u3001\u8fde\u5411 s \u7684\u8282\u70b9\u7684\u8fb9\u4e0d\u8db3 k \u6761\u3002\n\n2\u3001\u539f\u56fe\u4e0d\u8fde\u901a\u3002\n\n3\u3001**\u6700\u7ec8\u4e8c\u5206\u51fa\u7684 $\\Delta$ \u6c42\u5f97\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fde\u5411 s \u7684\u8fb9\u5e76\u4e0d\u662f k \u6761\u3002**\uff08\u4e0d\u5224\u65ad\u4f1a\u88ab hack \uff0c\u4e3b\u8981\u539f\u56e0\u662f\u53ef\u4ee5\u6784\u9020\u6570\u636e\u6ee1\u8db3\u6743\u503c\u5927 1 \u65f6\u8fde\u4e86 k-1 \u6761\u8fb9\uff0c\u800c\u6743\u503c\u5c0f 1 \u65f6\u5c31\u8fde\u4e86 k+1 \u6761\u8fb9\uff09\n\n\u6700\u540e\u662f AC \u4ee3\u7801\uff0c\u6709\u4e9b\u7ec6\u8282\u4f1a\u5728\u4ee3\u7801\u4e2d\u63d0\u5230\uff0c\u5e2e\u52a9\u7406\u89e3\u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint sss=0;\n\tchar chh=getchar();\n\twhile(chh>'9'||chh<'0') chh=getchar();\n\twhile(chh<='9'&&chh>='0'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t} \n\treturn sss;\n}\nint n,m,s,k;\nstruct node{\n\tint u,v,w;\n};\nint tot_s=0,tot_nots=0;\nnode edge_s[500004];//\u7528\u6765\u5b58\u50a8\u8fde\u5411s\u7684\u8fb9 \nnode edge_nots[500004];//\u7528\u6765\u5b58\u50a8\u6ca1\u6709\u8fde\u5411s\u7684\u8fb9 \nnode edge[500004];//\u7528\u6765\u5b58\u50a8\u6bcf\u6b21\u4e8c\u5206\u65f6\uff0c\u8fde\u5411s\u7684\u8fb9\u52a0\u4e0a\u504f\u79fb\u91cf\u540e\u6240\u6709\u7684\u8fb9\uff0c\u4ee5\u4fbf\u4e4b\u540e\u7684 Kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811 \nvector<int> to[50004];//\u5224\u65ad\u662f\u5426\u8054\u901a\nbool vis[50004];\nint fa[50004];\nint sum_value=0;//\u7edf\u8ba1\u52a0\u4e0a\u504f\u79fb\u91cf\u4e4b\u540e\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\uff0c\u8f93\u51fa\u7684\u7b54\u6848\u53ea\u9700\u8981\u51cf\u53bb k*mid\u5373\u53ef \nbool cmp(node x,node y){//\u6309\u7167\u6743\u503c\u6392\u5e8f \n\treturn x.w<y.w;\n}\nvoid bfs(){\n\t//bfs\u5bf9\u6240\u6709\u626b\u5230\u7684\u8fb9\u8fdb\u884c\u6807\u8bb0\u64cd\u4f5c\uff0c\u7528\u6765\u5224\u65ad\u539f\u6765\u7684\u56fe\u662f\u5426\u8054\u901a \n\tqueue<int> q;\n\tq.push(1);\n\tvis[1]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tint len=to[x].size();\n\t\tfor(register int i=0;i<len;i++){\n\t\t\tint u=to[x][i];\n\t\t\tif(vis[u]) continue;\n\t\t\tvis[u]=1;\n\t\t\tq.push(u);\n\t\t}\n\t}\n}\nint find(int x){//\u5e76\u67e5\u96c6\u57fa\u672c\u64cd\u4f5c \n\tif(fa[x]==x) return x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid add_delta(int x){\n\tfor(register int i=1;i<=tot_s;i++) edge_s[i].w+=x;//\u5bf9\u6240\u6709\u8fde\u5411 s \u7684\u8fb9\u52a0\u4e0a\u504f\u79fb\u91cf \n\t/*\n\t\u63a5\u4e0b\u6765\u65f6\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u7684\u64cd\u4f5c\n\t\u4e24\u79cd\u8fb9\uff0c\u7528\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\uff0c\u4ece\u800c o(m) \u5c06\u6240\u6709\u8fb9\u6392\u597d\u5e8f\u7edf\u8ba1\u5230 edge \u4e2d \n\t*/\n\tint i=1,j=1,k=0;\n\twhile(i<=tot_s&&j<=tot_nots){\n\t\tif(edge_s[i].w<=edge_nots[j].w){\n\t\t\tk++;\n\t\t\tedge[k]=edge_s[i];\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tk++;\n\t\t\tedge[k]=edge_nots[j];\n\t\t\tj++;\n\t\t}\n\t}\n\twhile(i<=tot_s){\n\t\tk++;\n\t\tedge[k]=edge_s[i];\n\t\ti++;\n\t}\n\twhile(j<=tot_nots){\n\t\tk++;\n\t\tedge[k]=edge_nots[j];\n\t\tj++;\n\t}\n\tfor(register int i=1;i<=tot_s;i++) edge_s[i].w-=x;//\u7edf\u8ba1\u5b8c\u540e\u8fd8\u539f\u539f\u6765\u7684\u56fe \n}\nbool check(int x){\n\tfor(register int i=1;i<=n;i++) fa[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6 \n\tadd_delta(x);\n\tsum_value=0; \n\tint cnt=0;//\u8bb0\u5f55\u6b64\u65f6s\u6709\u591a\u5c11\u6761\u8fde\u8fb9 \n\tint waiting=n;//\u4e00\u5171\u6709n\u4e2a\u70b9\u9700\u8981\u8fde\u8fb9 \n\tfor(register int i=1;i<=m;i++){\n\t\tif(waiting==1) break;\n\t\tint fau=find(edge[i].u),fav=find(edge[i].v);\n\t\tif(fau==fav) continue;\n\t\tif(edge[i].u==s||edge[i].v==s) cnt++;//\u5982\u679c\u8fd9\u6761\u8fb9\u6709\u8282\u70b9\u4e3as\uff0c\u5219 cnt++ \n\t\twaiting--;//\u5c11\u4e86\u4e00\u4e2a\u70b9\u9700\u8981\u52a0\u5165\u751f\u6210\u6811 \n\t\tsum_value+=edge[i].w;//\u7edf\u8ba1\u751f\u6210\u6811\u603b\u7684\u6743\u503c \n\t\tfa[fau]=fav;//\u5e76\u67e5\u96c6\u5408\u5e76\u64cd\u4f5c \n\t}\n\treturn cnt>=k;\n}\nbool check_ans(int x){\n\t//\u5bf9\u6700\u7ec8\u7684\u4e8c\u5206\u7ed3\u679c\u8fdb\u884c\u5224\u65ad\uff0c\u548c\u4e0a\u9762\u7684check\u51fd\u6570\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7 return \u6761\u4ef6\u53d8\u4e3a\u4e86 cnt==k \n\tfor(register int i=1;i<=n;i++) fa[i]=i;\n\tadd_delta(x);\n\tsum_value=0;\n\tint cnt=0;\n\tint waiting=n;\n\tfor(register int i=1;i<=m;i++){\n\t\tint fau=find(edge[i].u),fav=find(edge[i].v);\n\t\tif(fau==fav) continue;\n\t\tif(edge[i].u==s||edge[i].v==s) cnt++;\n\t\twaiting--;\n\t\tsum_value+=edge[i].w;\n\t\tfa[fau]=fav;\n\t\tif(waiting<=1) break;\n\t}\n\treturn cnt==k;\n}\nint main(){\n\tn=read(),m=read(),s=read(),k=read();\n\tint uu,vv,ww;\n\tfor(register int i=1;i<=m;i++){\n\t\tuu=read(),vv=read(),ww=read();\n\t\tif(uu==s||vv==s){\n\t\t\ttot_s++;\n\t\t\tedge_s[tot_s].u=uu;\n\t\t\tedge_s[tot_s].v=vv;\n\t\t\tedge_s[tot_s].w=ww;\n\t\t}\n\t\telse {\n\t\t\ttot_nots++;\n\t\t\tedge_nots[tot_nots].u=uu;\n\t\t\tedge_nots[tot_nots].v=vv;\n\t\t\tedge_nots[tot_nots].w=ww;\n\t\t}\n\t\tto[uu].push_back(vv);\n\t\tto[vv].push_back(uu);//\u7528\u6765\u5224\u65ad\u662f\u5426\u8054\u901a \n\t}\n\tif(tot_s<k){\n\t\tcout<<\"Impossible\";\n\t\treturn 0;\n\t}\n\tbfs();\n\tfor(register int i=1;i<=n;i++){\n\t\tif(!vis[i]){//\u5982\u679cbfs\u4e4b\u540e\u6709\u70b9\u6ca1\u6709\u88ab\u626b\u5230\uff0c\u5219\u8bf4\u660e\u56fe\u5e76\u4e0d\u8054\u901a \n\t\t\tcout<<\"Impossible\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tsort(edge_s+1,edge_s+tot_s+1,cmp);//\u5148\u521d\u59cb\u5316\u5bf9\u4e24\u79cd\u8fb9\u8fdb\u884c\u6392\u5e8f,\u80fd\u591f\u4f18\u5316\u6389add\u64cd\u4f5c\u7684\u4e00\u4e2alog \n\tsort(edge_nots+1,edge_nots+tot_nots+1,cmp);\n\tint l=-300001,r=300001,mid;//\u6700\u5c0f\u503c\uff1as\u6240\u6709\u51fa\u8fb9\u6743\u503c\u5747\u4e3a0 \u6700\u5927\u503c\uff1as\u6240\u6709\u51fa\u8fb9\u7684\u6743\u503c\u4e3a\u56fe\u4e2d\u7684\u6700\u5927\n\t//\u6ce8\u610f\u4e8c\u5206\u7684\u533a\u95f4\u5e94\u4e0e\u9898\u76ee\u63cf\u8ff0\u5bf9\u5e94\uff0c\u5426\u5219\u53ef\u80fd\u88ab\u5361\u5e38 \n\tint ans=0;\n\twhile(l<=r){\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid)){\n\t\t\tl=mid+1;  \n\t\t\tans=mid;//\u6ce8\u610f\u6bcf\u6b21\u5224\u65ad\u53ef\u884c\u540e\u76f4\u63a5\u66f4\u65b0ans\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u64cd\u4f5c\uff0c\u5426\u5219\u4f1a\u9020\u6210sum_value\u4e0eans\u4e0d\u5bf9\u5e94\uff0c\u5f88\u5bb9\u6613\u7406\u89e3\n\t\t\t//\u5373ans\u548csum_value\u5e94\u8be5\u540c\u65f6\u66f4\u65b0 \n\t\t}\n\t\telse r=mid-1;\n\t}\n\tif(!check_ans(ans)){\n\t\tcout<<\"Impossible\";\n\t\treturn 0;\n\t}\n\tcout<<sum_value-k*ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1635931567,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P5633 \u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811 \u9898\u89e3"
    },
    {
        "content": "## \u5206\u6790\n\n\u6211\u4eec\u4ee5\uff08\u751f\u6210\u6811\u4e2d\uff09**\u4e0e\u7f16\u53f7 $s$ \u76f8\u8fde\u7684\u8fb9\u6570**\uff08$s$ \u7684\u5ea6\u6570\uff09\u4e3a $x$ \u8f74\uff0c\u751f\u6210\u6811\u7684\u6700\u5c0f\u8fb9\u6743\u548c\u4e3a $y$ \u8f74\u4f5c\u51fa\u51fd\u6570\u66f2\u7ebf\u3002\n\n\u5206\u6790\u53ef\u77e5\uff0c\u6b64\u51fd\u6570\u53ef\u4ee5\u5728\u4e2d\u95f4**\u82e5\u5e72\u4e2a\u70b9**\u8fbe\u5230\u6700\u5c0f\u503c\uff0c\u8fd9\u51e0\u4e2a\u70b9\u7684\u6a2a\u5750\u6807\u90fd\u662f\u6240\u6709\u5408\u6cd5\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d $s$ \u7684**\u5ea6\u6570**\u3002\n\n\u800c\u6cbf\u7740\u8fd9\u6700\u5c0f\u503c\u70b9\u7684\u5de6\u65b9\u5411\uff0c\u51fd\u6570\u503c\u4f1a\u8d8a\u6765\u8d8a\u5927\uff0c\u800c\u4e14\u589e\u901f\u4f1a\u8d8a\u6765\u8d8a\u5feb\u3002\n\n\u540c\u7406\uff0c\u6cbf\u7740\u6700\u5c0f\u503c\u70b9\u7684\u53f3\u65b9\u5411\uff0c\u51fd\u6570\u503c\u4e5f\u8d8a\u6765\u8d8a\u5927\uff0c\u800c\u4e14\u589e\u901f\u4f1a\u8d8a\u6765\u8d8a\u5feb\u3002\n\n\u4f5c\u51fa\u56fe\u50cf\u5c31\u662f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/elf3qeiu.png)\n\n\u5176\u4e2d $D,E$ \u5c31\u662f\u4e0a\u6587\u6240\u8bf4\u7684\u6700\u5c0f\u503c\u70b9\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4f5c\u51fa\u7684\u51fd\u6570\u66f2\u7ebf\u662f\u4e00\u4e2a**\u4e0b\u51f8\u58f3**\uff0c\u8fd9\u610f\u5473\u7740\u968f\u7740\u6a2a\u5750\u6807\u7684\u589e\u5927\uff0c\u659c\u7387\u662f**\u9012\u589e**\u7684\u3002\n\n\u6709\u4e86\u9012\u589e\u7684\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528**\u659c\u7387**\u6765\u8fdb\u884c\u4e8c\u5206\u4e86\u3002\n\n\u6bd4\u5982\u8bf4\uff0c\u9898\u76ee\u8981\u6c42\u7684 $s$ \u5ea6\u6570\u4e3a $6$\uff0c\u5bf9\u5e94\u4e0a\u56fe\u7684 $C$ \u70b9\uff0c\u90a3\u4e48\u901a\u8fc7\u4e8c\u5206\u659c\u7387\u4fbf\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u4e0e $C$ \u70b9\u201c\u76f8\u5207\u201d\u7684\u76f4\u7ebf\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9avwvb7w.png)\n\n\u56e0\u6b64\uff0c\u6839\u636e\u51fd\u6570\u610f\u4e49\uff0c\u8fd9\u4e2a\u5207\u70b9 $C$ \u7684 $y$ \u8f74\u5750\u6807\u5c31\u662f\u7b54\u6848\u4e86\u3002\n\n> \u4ece\u4e0a\u9762\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u53d1\u73b0 wqs \u4e8c\u5206\u7684\u601d\u60f3\u4e86\uff1a\n>\n> \u56e0\u4e3a\u76f4\u63a5\u6c42 $C$ \u7684 $y$ \u8f74\u5750\u6807\u662f\u56f0\u96be\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u95ee\u9898\u6240\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u66f2\u7ebf\u5165\u624b\uff0c\u901a\u8fc7\u627e\u5230\u7684**\u76f8\u5e94\u7684\u5207\u7ebf**\u7684 $y$ \u8f74\u5750\u6807\u6765\u5f97\u5230\u7b54\u6848\u3002\n\n\u6700\u540e\u7684\u95ee\u9898\u662f\uff0c\u600e\u4e48\u627e\u5207\u7ebf\u5462\uff1f\n\n\u6211\u4eec\u5c31\u8ba9\u548c $s$ \u76f8\u8fde\u7684\u8fb9\u90fd\u51cf\u53bb\u4e8c\u5206\u503c $mid$\uff0c\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5bf9\u5e94\u7684**\u8fb9\u6743\u548c**\u5c31\u662f\u4e0a\u56fe\u5207\u7ebf\u4e0e $y$ \u8f74\u7684**\u622a\u8ddd**\u3002\u800c\u6211\u4eec\u8981\u5f97\u5230\u5207\u70b9\u7684 $y$ \u8f74\u5750\u6807\u5c31\u53ea\u9700\u8981\u8ba9**\u622a\u8ddd**\u52a0\u4e0a $cnt \\times mid$ \u5373\u53ef\uff0c\u5176\u4e2d $cnt$ \u5c31\u662f\u6b64\u6700\u5c0f\u751f\u6210\u6811\u4e2d $s$ \u7684\u5ea6\u6570\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u4e0a\u9762\u6240\u8bf4\u7684**\u6c42\u5207\u70b9\u8fc7\u7a0b**\u53ef\u4ee5\u770b\u4f5c\u662f\u5c06\u66f2\u7ebf\u8fdb\u884c\u4e86\u65cb\u8f6c\uff0c\u7136\u540e\u627e\u5230\u6700\u5c0f\u503c\u3002\uff08\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u6837\u7406\u89e3\u6700\u597d\u61c2\uff09\n\n> \u800c\u5bf9\u4e8e\u5176\u5b83\u7684\u9898\u76ee\uff0c\u6211\u4eec\u5c31\u6839\u636e\u9898\u76ee\u6765\u6c42\u76f8\u5e94\u7684**\u6700\u503c**\u5373\u53ef\uff0c\u65b9\u6cd5\u4f8b\u5982\uff1a\u8d2a\u5fc3\uff0cDP \u7b49\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/t82i6gs2.png)\n\n\n\n### \u5b9e\u73b0\n\n\u4e0a\u9762\u7684\u8bb2\u89e3\u6d89\u53ca\u7684\u7ec6\u8282\u8f83\u5c11\uff0c\u4e0d\u59a8\u53c2\u8003\u4e0b\u9762\u7684\u4ee3\u7801\u8fdb\u4e00\u6b65\u7406\u89e3\u3002\n\n```cpp\n// Problem: P5633 \u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P5633\n// Memory Limit: 128 MB\n// Time Limit: 1000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define debug(x) cerr << #x << \": \" << (x) << endl\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define dwn(i,a,b) for(int i=(a);i>=(b);i--)\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n\n#define x first\n#define y second\nusing pii = pair<int, int>;\nusing ll = long long;\n\n#define int long long\n\ninline void read(int &x){\n    int s=0; x=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') {if(ch=='-')x=-1;ch=getchar();}\n    while(ch>='0' && ch<='9') s=(s<<3)+(s<<1)+ch-'0',ch=getchar();\n    x*=s;\n}\n\nconst int N=1e5+5, M=1e6+50;\n\nstruct Edge{\n\tint u, v, w;\n\t\n\tbool operator < (const Edge &o)const{\n\t\treturn w<o.w;\n\t}\n}e[M], es[M], buf[M];\n\nint tot, tots, totb;\n\nint f[N];\n\nint find(int x){\n\treturn x==f[x]? x: f[x]=find(f[x]);\n}\n\nint n, m, s, k;\nint res, cnt;\n\nint cal(int x){\n\trep(i,1,tots) es[i].w-=x;\n\tres=0, totb=0;\n\trep(i,1,n) f[i]=i;\n\t\n\tfor(int i=1, j=1; i<=tots || j<=tot; ){\n\t\tif(i>tots || j<=tot && e[j].w<=es[i].w) buf[++totb]=e[j++];\n\t\telse buf[++totb]=es[i++];\n\t}\n\t\n\tcnt=0;\n\trep(i,1,totb){\n\t\tint u=buf[i].u, v=buf[i].v, w=buf[i].w;\n\t\tint pu=find(u), pv=find(v);\n\t\tif(pu!=pv){\n\t\t\tf[pu]=pv;\n\t\t\tif(u==s || v==s) cnt++;\n\t\t\tres+=w;\n\t\t}\n\t}\n\trep(i,1,tots) es[i].w+=x;\n\treturn cnt;\n}\n\nbool is_cc(){\n\tint g=0;\n\trep(i,1,n){\n\t\tif(!g) g=find(i);\n\t\telse if(g!=find(i)) return false; \n\t}\n\treturn true;\n}\n\nsigned main(){\n\tcin>>n>>m>>s>>k;\n\trep(i,1,n) f[i]=i;\n\trep(i,1,m){\n\t\tint u, v, w; read(u), read(v), read(w);\n\t\tif(u==s || v==s) es[++tots]={u, v, w};\n\t\telse e[++tot]={u, v, w};\n\t\tf[find(u)]=find(v);\n\t}\n\tif(!is_cc()) return puts(\"Impossible\"), 0;\n\t\n\tsort(es+1, es+1+tots), sort(e+1, e+1+tot);\n\t\n\tint l=-30010, r=-l;\n\tif(cal(r)<k) return puts(\"Impossible\"), 0;\n\tif(cal(l)>k) return puts(\"Impossible\"), 0;\n\t\n\twhile(l<r){\n\t\tint mid=l+r+1>>1;\n\t\tif(cal(mid)<=k) l=mid;\n\t\telse r=mid-1;\n\t}\n\tcal(l);\n\n\tint t=res+l*k;\n\tcout<<t<<endl;\n\t\n\treturn 0;\n}\n```\n\n",
        "postTime": 1655896728,
        "uid": 138960,
        "name": "Tenshi",
        "ccfLevel": 0,
        "title": "wqs\u4e8c\u5206"
    },
    {
        "content": "[**\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u3002**](https://www.cnblogs.com/mfeitveer/p/16852549.html)\n\n\u4ee3\u7801\u5199\u7684\u53ef\u80fd\u6bd4\u8f83\u7e41\u7410\uff0c\u8bf7\u89c1\u8c05\u3002\n\n### \u601d\u8def\n\n\u9996\u5148\u8003\u8651 $\\text{wqs}$ \u4e8c\u5206\u3002\n\n\u5bf9\u6240\u6709\u8fde\u5411 $s$ \u7684\u8fb9\u8fdb\u884c\u5b9a\u91cf\u504f\u79fb\u3002\n\n\u5373\u6240\u6709\u8fde\u5411 $s$ \u7684\u8fb9\u7684\u8fb9\u6743 $q$ \u52a0\u4e0a\u4e8c\u5206\u7684\u5b9a\u91cf $\\Delta$\u3002\n\n\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e00\u4e2a\u95ee\u9898\u53d8\u6210\u4e00\u4e2a\u53ef\u884c\u6027\u95ee\u9898\u3002\n\n\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\u7684\u4e00\u70b9\u5c31\u662f\u5f53 $\\Delta$ \u4e00\u5b9a\u65f6\uff0c\u53ef\u80fd\u62e5\u6709\u4e0d\u540c\u7684 $k$ \u7684\u65b9\u6848\u3002\n\n\u672c\u7bc7\u4e3b\u8981\u8bb2\u8ff0\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u6b63\u786e\u7684\u65b9\u6848\u3002\n\n\u9996\u5148\u5224\u65ad\u4e00\u4e2a\u65e0\u89e3\u7684\u60c5\u51b5\u3002\n\n1. \u4ece $s$ \u7684\u51fa\u8fb9\u4e0d\u8db3 $k$\u3002\n2. \u539f\u56fe\u4e0d\u8054\u901a\u3002\n3. \u4f7f\u539f\u56fe\u8054\u901a $s$ \u5fc5\u987b\u8fde\u7684\u51fa\u8fb9\u8d85\u8fc7 $k$\u3002\n\n\u9664\u53bb\u4e0a\u9762\u4e09\u79cd\u60c5\u51b5\uff0c\u6240\u6709\u7684\u60c5\u51b5\u5fc5\u7136\u4f1a\u6709\u4e00\u4e2a\u89e3\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u504f\u79fb\u91cf\u5982\u4f55\u6784\u9020\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u89e3\u3002\n\n\u9996\u5148\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u7ec4 $s$ \u51fa\u8fb9\u6700\u5c11\u7684\u89e3\u3002\n\n\u8003\u8651\u5728\u6b64\u57fa\u7840\u4e0a\u5c06\u5176\u589e\u52a0\u81f3 $k$ \u6761\u51fa\u8fb9\u3002\n\n\u5bf9\u4e8e\u76f8\u540c\u6743\u503c\u7684\u8fb9\uff0c\u6211\u4eec\u5148\u5c06\u539f\u65b9\u6848\u4e2d\u6240\u8fde\u7684\u51fa\u8fb9\u8fdb\u884c\u8fde\u63a5\u3002\n\n\u7136\u540e\u5982\u679c\u4e0d\u8db3 $k$ \u6761\u51fa\u8fb9\uff0c\u518d\u53bb\u8003\u8651\u76f8\u540c\u6743\u503c\u4e0b\u7684\u5176\u4ed6\u51fa\u8fb9\u3002\n\n\u6700\u540e\u518d\u53bb\u8003\u8651\u76f8\u540c\u6743\u503c\u4e0b\u7684\u5176\u4ed6\u8fb9\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u539f\u65b9\u6848\u4e2d\u6240\u8fde\u7684\u51fa\u8fb9\u4e00\u5b9a\u8fd8\u4f1a\u5728\u65b0\u65b9\u6848\u4e2d\u88ab\u8fde\u3002\n\n\u8fd9\u662f\u7531\u4e8e\u867d\u7136\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u8fb9\uff0c\u4f46\u5bf9\u4e8e\u539f\u65b9\u6848\u4e2d\u6240\u8fde\u7684\u51fa\u8fb9\u6240\u66f4\u6539\u7684\u8054\u901a\u6027\u662f\u4e0d\u4f1a\u8fdb\u884c\u6539\u53d8\u7684\uff08\u4e0d\u7136\u5c31\u4f1a\u51fa\u73b0\u5728\u539f\u65b9\u6848\u4e2d\uff09\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u4e5f\u4e00\u5b9a\u4e0d\u4f1a\u6bd4\u539f\u65b9\u6848\u66f4\u52a3\uff08\u539f\u7406\u5927\u81f4\u4e0e\u6734\u7d20\u7684 $\\text{kruskal}$ \u5dee\u4e0d\u591a\uff09\uff0c\u5e76\u4e14\u4e00\u5b9a\u6709\u89e3\u3002\n\n\u8fd9\u6837\u5c31\u6709\u4e86\u4e00\u4e2a\u5927\u81f4\u7684\u7b97\u6cd5\u6d41\u7a0b\u3002\n\n\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nconst int N = 1000010;\n\nint n, m, k, s, kl, top, fa[N], vis[N], ans[N];\n\nclass Graph\n{\npublic:\n    int cnt;\n    struct edge\n    {\n        int to, nxt, val, id;\n    } e[N];\n    inline edge &operator[](int tmp) { return e[tmp]; }\n    inline void init(int x)\n    {\n        for (int i = 1; i <= cnt; i++)\n            e[i].val += x;\n    }\n    inline void add(int x, int y, int z, int i) { e[++cnt] = {x, y, z, i}; }\n    inline void mySort()\n    {\n        sort(e + 1, e + cnt + 1, [](edge a, edge b)\n             { return a.val < b.val; });\n    }\n} graBlack, graWhite;\n\ninline int read()\n{\n    int asd = 0, qwe = 1;\n    char zxc;\n    while (!isdigit(zxc = getchar()))\n        if (zxc == '-')\n            qwe = -1;\n    while (isdigit(zxc))\n        asd = asd * 10 + zxc - '0', zxc = getchar();\n    return asd * qwe;\n}\n\ninline bool check(int x, int y) { return (x == s || y == s); }\ninline int gf(int x) { return (fa[x] == x ? fa[x] : fa[x] = gf(fa[x])); }\n\ninline bool merge(int x, int y)\n{\n    int fx = gf(x), fy = gf(y);\n    if (fx == fy)\n        return 0;\n    fa[fx] = fy;\n    return 1;\n}\n\ninline int kruskal()\n{\n    int num = 0;\n    top = 0;\n    iota(fa + 1, fa + n + 1, 1);\n    for (int i = 1, l = 1, r = 1; i <= m; i++)\n        if (l <= graBlack.cnt && graBlack[l].val < graWhite[r].val)\n            merge(graBlack[l].to, graBlack[l].nxt), l++;\n        else\n            num += merge(graWhite[r].to, graWhite[r].nxt), r++;\n    return num;\n}\n\ninline void checkSol()\n{\n    int cnt = 0, sum = 0;\n    for (int i = 1; i <= graBlack.cnt; i++)\n        cnt += merge(graBlack[i].to, graBlack[i].nxt);\n    for (int i = 1; i <= graWhite.cnt; i++)\n        if (merge(graWhite[i].to, graWhite[i].nxt))\n            cnt++, sum++;\n    if (cnt != n - 1 || sum > k || graWhite.cnt < k)\n        puts(\"Impossible\"), exit(0);\n}\n\ninline void makeSol(int mid)\n{\n    graWhite.init(mid), top = 0;\n    iota(fa + 1, fa + n + 1, 1);\n    int sum = 0, l = 1, r = 1, i, j;\n    for (i = 1; i <= m; i++)\n        if (l <= graBlack.cnt && graBlack[l].val <= graWhite[r].val)\n            merge(graBlack[l].to, graBlack[l].nxt), l++;\n        else\n        {\n            if (merge(graWhite[r].to, graWhite[r].nxt))\n                vis[r] = 1, k--;\n            r++;\n        };\n    l--, r--, top = 0;\n    iota(fa + 1, fa + n + 1, 1);\n    for (i = 1, j = 1; i <= graBlack.cnt; i++)\n    {\n        while (j <= r && graWhite[j].val <= graBlack[i].val)\n        {\n            int ls = j, rs = j;\n            int x = graWhite[j].val;\n            while (rs < r && graWhite[rs + 1].val == x)\n                rs++;\n            for (int j = ls; j <= rs; j++)\n                if (vis[j] && merge(graWhite[j].to, graWhite[j].nxt))\n                    sum += graWhite[j].val, ans[++top] = graWhite[j].id;\n            for (int j = ls; j <= rs && k; j++)\n                if (merge(graWhite[j].to, graWhite[j].nxt))\n                    sum += graWhite[j].val, k--, ans[++top] = graWhite[j].id;\n            j = rs + 1;\n        }\n        if (merge(graBlack[i].to, graBlack[i].nxt))\n            sum += graBlack[i].val, ans[++top] = graBlack[i].id;\n    }\n    while (j <= r)\n    {\n        int ls = j, rs = j;\n        int x = graWhite[j].val;\n        while (rs < r && graWhite[rs + 1].val == x)\n            rs++;\n        for (int j = ls; j <= rs; j++)\n            if (vis[j] && merge(graWhite[j].to, graWhite[j].nxt))\n                sum += graWhite[j].val, ans[++top] = graWhite[j].id;\n        for (int j = ls; j <= rs && k; j++)\n            if (merge(graWhite[j].to, graWhite[j].nxt))\n                sum += graWhite[j].val, k--, ans[++top] = graWhite[j].id;\n        j = rs + 1;\n    }\n    cout << sum - kl * mid << endl;\n}\n\ninline void wqsDichotomous()\n{\n    int l = -1e9, r = 1e9;\n    graBlack.mySort(), graWhite.mySort();\n    while (l <= r)\n    {\n        int mid = (l + r) >> 1;\n        graWhite.init(mid);\n        int x = kruskal();\n        graWhite.init(-mid);\n        if (x > k)\n            l = mid + 1;\n        if (x < k)\n            r = mid - 1;\n        if (x == k)\n            break;\n    }\n    makeSol((l + r) >> 1);\n}\n\nsigned main()\n{\n    n = read(), m = read(), s = read(), kl = k = read();\n    iota(fa + 1, fa + n + 1, 1);\n    for (int i = 1; i <= m; i++)\n    {\n        int x = read(), y = read(), z = read();\n        if (check(x, y))\n            graWhite.add(x, y, z, i);\n        else\n            graBlack.add(x, y, z, i);\n    }\n    checkSol(), wqsDichotomous();\n    return 0;\n}\n```\n",
        "postTime": 1667395797,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "P5633 \u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811 \u9898\u89e3"
    },
    {
        "content": "## Solution\n\n\u7a0d\u5fae\u8bb2\u4e00\u4e0b wqs \u4e8c\u5206 . \u5982\u679c\u4ecd\u770b\u4e0d\u61c2\u7684\u8bdd\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u4e00\u7bc7 , \u86ee\u4e0d\u9519\u7684 : [Link](https://zhuanlan.zhihu.com/p/340514421)\n\n\u8bbe $f(x)$ \u8868\u793a\u70b9 $s$ \u7684\u51fa\u5ea6\u4e3a $x$ \u7684\u65f6\u5019\u7684\u7b54\u6848 .\n\n\u8003\u8651\u4ece $x-1$ \u8f6c\u79fb\u8fc7\u6765 . \u6211\u4eec\u5e94\u5f53\u627e $s$ \u7684\u4e00\u6761\u8fb9 , \u7ed9\u5b83\u586b\u4e0a\u53bb . \u8fd9\u65f6\u5019\u80af\u5b9a\u6709\u4e00\u4e2a\u73af . \u6211\u4eec\u5220\u6389\u73af\u4e0a\u9762\u7684\u539f\u5148\u6700\u5927\u503c . \u65b0\u7684\u7b54\u6848\u51cf\u53bb\u4e86\u90a3\u4e2a\u6700\u5927\u503c , \u52a0\u4e0a\u4e86\u5f53\u524d\u7684\u503c . \n\n\u7136\u540e\u8bc1\u660e\u8fd9\u4e2a\u4e1c\u897f\u6709\u51f9\u51f8\u6027 . \u8003\u8651\u5f53\u524d\u65b0\u52a0\u5165\u4e00\u6761\u8fb9 , \u5b83\u65b0\u4ea7\u751f\u7684\u8d21\u732e\u80af\u5b9a\u6bd4\u4e4b\u524d\u53d8\u5927 .\n\n> \u5982\u679c\u53d8\u5c0f\u7684\u8bdd , \u90a3\u6211\u4eec\u53ef\u4ee5\u5148\u52a0\u5165\u8fd9\u6761\u8fb9 , \u90a3\u4e48 $f(x-1)$ \u5c31\u4f1a\u66f4\u5c0f , \u4e0e\u5b9a\u4e49\u4e0d\u7b26 . \u8fd9\u6837\u8fd8\u662f\u4e0d\u5927\u4e25\u8c28 , \u9700\u8981\u8003\u8651\u8fde\u901a\u6027\u7684\u95ee\u9898 . \u53ef\u4ee5\u4e0d\u6df1\u7a76 . \u5982\u679c\u975e\u8981\u6df1\u7a76\u7684 , \u90a3\u4e48 $x-1$ \u6b21\u52a0\u8fb9\u540e , \u518d $x$ \u52a0\u8fb9 , $x$ \u52a0\u7684\u8fb9\u6240\u5728\u7684\u73af\u4e0a\u53ef\u80fd\u6709\u4e0a\u4e00\u6b21\u52a0\u7684\u8fb9 , \u4f46\u662f\u628a\u8fd9\u4e24\u6b21\u52a0\u8fb9\u8c03\u6362\u4e00\u4e0b , \u540e\u9762\u90a3\u6b21\u52a0\u8fb9\u5220\u53bb\u7684\u6700\u5927\u503c\u80af\u5b9a\u8fd8\u80fd\u5220 , \u751a\u81f3\u53ef\u4ee5\u5220\u66f4\u5927\u7684 , \u6240\u4ee5\u6b64\u65f6 $f(x-1)$ \u4f1a\u66f4\u4f18 .\n\nwqs \u4e8c\u5206\u662f\u4e8c\u5206\u659c\u7387 , \u4e5f\u5c31\u662f $f(x)-f(x-1)$ . \u628a $(x,f(x))$ \u8fd9\u4e2a\u4e1c\u897f\u653e\u5230\u5750\u6807\u7cfb\u4e0a , \u6bcf\u6b21\u627e\u5230\u8c01\u7684\u659c\u7387\u662f $c$ . \u753b\u51e0\u4e2a\u56fe\u53ef\u4ee5\u53d1\u73b0 , \u5982\u679c\u6bcf\u4e2a\u70b9\u753b\u4e00\u4e2a\u659c\u7387\u662f $c$ \u7684\u76f4\u7ebf , \u90a3\u4e48\u5b83\u4eec\u622a\u8ddd\u7684\u6700\u5c0f\u7684\u90a3\u4e2a\u5c31\u662f\u6240\u6c42 .\n\n\u8003\u8651\u622a\u8ddd\u7684\u5b9e\u9645\u542b\u4e49 : $b=f(x)-cx$ , \u76f8\u5f53\u4e8e\u6bcf\u6761\u51fa\u8fb9\u7684\u5927\u5c0f\u52a0\u4e0a $-c$ . \u90a3\u6211\u4eec\u628a\u6bcf\u6761\u51fa\u8fb9\u52a0\u4e0a $-c$ , \u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u8dd1 MST , \u6c42\u51fa\u6240\u6c42\u70b9 .\n\n\u7136\u540e\u6839\u636e\u6240\u6c42\u70b9\u548c $k$ \u7684\u5927\u5c0f\u5173\u7cfb , \u53ef\u4ee5\u8c03\u6574\u659c\u7387 , \u76f4\u5230\u627e\u5230\u4e86 $k$ . \u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7b97\u51fa\u6765 $f(k)$ \u52a0\u4e0a\u67d0\u4e9b\u6570\u4e4b\u540e\u7684\u503c\u4e86 , \u7136\u540e\u628a\u591a\u4f59\u7684\u51cf\u6389 .\n\n\u5224\u65ad `Impossible` : \u8fd9\u975e\u5e38\u6076\u5fc3 . \u4e00\u4e0b\u60c5\u51b5\u4e0d\u53ef\u4ee5 :\n\n- \u4e0d\u8fde\u901a\n- \u53ea\u80fd\u8fbe\u5230\u6bd4 $k$ \u5c0f . \u8fd9\u65f6\u5019\u5c31\u662f\u51fa\u5ea6\u8fc7\u5c11 , \u5bb9\u6613\u5224\u65ad .\n- \u53ea\u80fd\u8fbe\u5230\u6bd4 $k$ \u5927 . \u5c31\u50cf\u8fd9\u7ec4\u6570\u636e :\n\n```cpp\n3 2 1 1\n1 2 1\n1 3 1\n```\n\u6211\u4eec\u7684\u7a0b\u5e8f\u5f88\u96be\u5224\u65ad , \u6240\u4ee5\u4ece\u53f3\u8fb9\u903c\u8fd1\u5b83 (\u5177\u4f53\u8bf4 , \u5c31\u662f\u627e\u51fa\u5ea6\u5927\u4e8e\u7b49\u4e8e $k$\u7684\u6700\u5c0f\u503c) , \u7136\u540e\u66f4\u5177\u5b9a\u4e49 , \u5982\u679c\u80fd\u8fbe\u5230 $k$ , \u90a3\u4e48\u5c06\u627e\u5230\u7684\u659c\u7387\u51cf\u5c0f\u4e00\u70b9 , \u5c31\u4e00\u5b9a\u5bf9\u5e94\u4e00\u4e2a\u5c0f\u4e8e $k$ \u7684\u6570 . \u8fd9\u65f6\u5019\u5224\u65ad\u5c31\u53ef\u4ee5\u5566 .\n\n\u5e76\u4e14\u6ce8\u610f , \u4e3a\u4e86\u964d\u4f4e\u590d\u6742\u5ea6 , \u6211\u4eec\u5f52\u5e76\u6392\u5e8f .\n\ncode :\n\n```cpp\n#include<bits/stdc++.h>\n#define ffor(i,a,b) for(int i=(a);i<=(b);i++)\n#define roff(i,a,b) for(int i=(a);i>=(b);i--)\n#define int long long\nusing namespace std;\nconst int MAXN=3e5+10;\nint n,m,s,k,cnt,res,ccnt,fa[MAXN];\nint find(int k) {\n\treturn (fa[k]==k)?k:(fa[k]=find(fa[k]));\t\n}\nvector<pair<int,pair<int,int>>> a,b;\nvector<pair<int,pair<int,int>>> merge(vector<pair<int,pair<int,int>>> a,vector<pair<int,pair<int,int>>> b) {\n\tvector<pair<int,pair<int,int>>> res;\n\tint l=0,r=0;\n\twhile(l<a.size()&&r<b.size()) {\n\t\tif(a[l]<b[r]) res.push_back(a[l]),l++;\n\t\telse res.push_back(b[r]),r++;\n\t}\n\tffor(i,l,(int)(a.size())-1) res.push_back(a[i]);\n\tffor(i,r,(int)(b.size())-1) res.push_back(b[i]);\n\treturn res;\n}\nint get_ans(int k) {\n\tvector<pair<int,pair<int,int>>> c;\n\tffor(i,0,(int)a.size()-1) c.push_back({a[i].first+k,a[i].second});\n\tvector<pair<int,pair<int,int>>> tmp=merge(c,b);\n\tffor(i,1,n) fa[i]=i; cnt=0,res=0,ccnt=0;\n\tfor(auto V:tmp) {\n\t\tint w=V.first,u=V.second.first,v=V.second.second;\n\t\tif(find(u)==find(v)) continue;\n\t\tif(u==s||v==s) cnt++;\n\t\tu=find(u),v=find(v);\n\t\tres+=w,ccnt++,fa[u]=v;\t\n\t}\n\tif(ccnt<n-1) return -1;\n\treturn cnt;\n}\nsigned main() {\n\tios::sync_with_stdio(false),cin.tie(0),cout.tie(0);\n\tcin>>n>>m>>s>>k;\n\tffor(i,1,m) {\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\tif(u==s||v==s) a.push_back({w,{u,v}});\n\t\telse b.push_back({w,{u,v}});\t\n\t}\n\tif(a.size()<k) {cout<<\"Impossible\";return 0;}\n\tsort(a.begin(),a.end()),sort(b.begin(),b.end());\n\tint l=-INT_MAX,r=INT_MAX,ans=-LONG_LONG_MAX;\n\tif(get_ans(l)<0) {cout<<\"Impossible\";return 0;}\n\twhile(l<=r) {\n\t\tint mid=(l+r>>1),v=get_ans(-mid);\n\t\tif(v>=k) ans=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tif(ans==-LONG_LONG_MAX) {cout<<\"Impossible\";return 0;}\n\tans--;get_ans(-ans);\n\tif(cnt>k) {cout<<\"Impossible\";return 0;}\n\tans++;\n\tget_ans(-ans);\n\tcout<<res+ans*k;\n\treturn 0;\t\n}\n```",
        "postTime": 1659972893,
        "uid": 120947,
        "name": "Purslane",
        "ccfLevel": 7,
        "title": "P5633"
    },
    {
        "content": "wqs \u4e8c\u5206\uff0c\u4f46\u662f\u6ca1\u6709\u5f52\u6392\u3002\n\n## wqs\n\n\u6211\u4eec\u8003\u8651\u6734\u7d20\u5730\u7528 kruscal \u6784\u9020\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u662f\u6309\u7167\u8fb9\u6743\u52a0\u8fb9\u7684\u3002\u8fd9\u79cd\u65b9\u6cd5\u663e\u7136\u65e0\u6cd5\u4fdd\u8bc1 $s$ \u7684\u5ea6\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8003\u8651\u628a\u548c $s$ \u76f8\u90bb\u7684\u8fb9\u7684\u8fb9\u6743\u4fee\u6539\u4e00\u4e0b\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u751f\u6210\u6811\u80fd\u8ba9 $s$ \u6709\u90a3\u4e48\u591a\u7684\u5ea6\u6570\u3002\n\n\u5177\u4f53\u7684\u4fee\u6539\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5 wqs \u4e8c\u5206\u4e00\u4e2a $\\Delta$\uff0c\u6bcf\u6b21\u8ba9\u548c $s$ \u76f8\u90bb\u7684\u70b9\u7684\u8fb9\u6743\u90fd\u52a0\u4e0a $\\Delta$\u3002\u7136\u540e\u7528\u6734\u7d20\u5730 kruscal \u8dd1\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6839\u636e\u5e38\u8bc6\uff0c\u5982\u679c\u8fd9\u6b21\u5c1d\u8bd5\u4e2d $s$ \u7684\u5ea6\u591a\u4e8e\u9650\u5236\uff0c\u5c31\u8981\u8ba9\u8fb9\u6743\u66f4\u5927\u4f7f\u5f97\u5176\u66f4\u4e0d\u5bb9\u6613\u88ab\u9009\u5230\uff1b\u5982\u679c\u66f4\u5c11\u5c31\u540c\u7406\u3002\n\n\u65e0\u89e3\u7684\u60c5\u51b5\u4e0d\u7b97\u5f88\u591a\uff1a\n\n+ \u539f\u56fe\u4e0d\u8fde\u901a\uff08\u6ca1\u6709\u6700\u5c0f\u751f\u6210\u6811\uff09\u3002\n+ $s$ \u7684\u5ea6\u672c\u8eab\u5c31\u4e0d\u5230 $k$\u3002\n+ \u4e8c\u5206\u5f97\u5230\u7684 $\\Delta$ \u4e0d\u80fd\u4f7f $s$ \u7684\u5ea6\u8fbe\u5230 $k$\u3002\u5373\u4e8c\u5206\u5230\u65e0\u89e3\u3002\n\n\u6211\u4eec\u53d1\u73b0\u524d\u4e24\u79cd\u60c5\u51b5\u90fd\u53ef\u4ee5\u5f52\u5316\u4e3a\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a\u5982\u679c\u539f\u56fe\u4e0d\u8fde\u901a\u6216\u8005 $s$ \u7684\u5ea6\u672c\u8eab\u5c31\u6ca1\u6709\u8fbe\u5230 $k$\uff0c\u90a3\u4e48\u4e8c\u5206\u51fa\u6765\u7684 $\\Delta$ \u4e00\u5b9a\u4e0d\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5224\u65ad\u7b2c\u4e09\u79cd\u6761\u4ef6\u5c31\u53ef\u4ee5\u4e86\u3002\n\n----\n\n\u5982\u679c\u6309\u7167\u4ee5\u4e0a\u65b9\u6cd5\u88f8\u5730\u5b9e\u73b0\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u6709 T\u3002\n\n\u6211\u4eec\u8003\u8651\u4e0a\u9762\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u662f\u4ec0\u4e48\uff0c\u5047\u8bbe\u4e8c\u5206\u7684\u503c\u57df\u8303\u56f4\u4e3a $a$\uff0c\u672c\u9898\u4e2d\u4e5f\u5c31\u662f\u5927\u5bb6\u7684 $(-\\infty,\\infty)$\u3002\u6bcf\u6b21\u4e8c\u5206\u6392\u5e8f\u4e00\u904d\u6240\u6709\u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u4e00\u904d kruscal\uff0c\u603b\u590d\u6742\u5ea6 $\\operatorname{O}(m\\log m\\log a)$\u3002\n\n\u6211\u4eec\u8fdb\u4e00\u6b65\u53d1\u73b0\uff0c\u56e0\u4e3a\u6bcf\u6b21\u90fd\u53ea\u4fee\u6539\u4e86\u548c $s$ \u76f8\u90bb\u7684\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u8fd9\u4e00\u7c7b\u8fb9\u5355\u72ec\u63d0\u51fa\u6765\u3002\u548c\u4e0d\u4e0e $s$ \u76f8\u90bb\u7684\u8fb9\u5206\u5f00\uff0c\u8bb0\u4e3a $1$ \u7c7b\u8fb9\u548c $2$ \u7c7b\u8fb9\u3002\n\n\u4e24\u7c7b\u8fb9\u5206\u522b\u6392\u5e8f\u4e4b\u540e\uff0c\u5e76\u4e0d\u9700\u8981\u6bcf\u6b21\u5f52\u5e76\uff0c\u56e0\u4e3a\u7ed9\u4e00\u7c7b\u8fb9\u6240\u6709\u6743\u503c\u52a0\u4e0a\u4e00\u4e2a $\\Delta$ \u540e\uff0c\u76f8\u5bf9\u5927\u5c0f\u4e0d\u6539\u53d8\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5728\u4e8c\u5206\u524d\u5206\u522b\u6392\u597d\u5e8f\uff0c\u540e\u9762\u5c31\u6ca1\u5fc5\u8981\u6392\u5e8f\u4e86\u3002kruscal \u91cc\u9762\u76f4\u63a5\u5224\u65ad\u6b64\u65f6\u4e00\u7c7b\u8fb9\u8fb9\u6743\u5c0f\u8fd8\u662f\u4e8c\u7c7b\u8fb9\u8fb9\u6743\u5c0f\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $\\operatorname{O}(m\\log a)$\u3002\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int max_n=50004,max_m=500005;\ninline int read(){\n    int x=0;bool w=0;char c=getchar();\n    while(c<'0' || c>'9') w|=c=='-',c=getchar();\n    while(c>='0' && c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n    return w?-x:x;\n}\ninline void write(int x){\n    if(x<0){// \u61d2\uff0c\u76f4\u63a5\u5728\u5feb\u5199\u91cc\u9762\u5224\u65e0\u89e3\n        puts(\"Impossible\");\n        return;\n    }\n    if(x>9) write(x/10);\n    putchar(x%10^48);\n}\n\nint n,m,s,k,m1,m2;\n\nstruct edge{\n    int u,v,w;\n    bool operator < (const edge &b) const{\n        edge a=*this;\n        return a.w<b.w;\n    }\n}e1[max_m],e2[max_m]; // e1 \u4e00\u7c7b\u8fb9\uff1be2 \u4e8c\u7c7b\u8fb9\ninline edge makee(int x,int y,int z){\n    edge res;\n    res.u=x,res.v=y,res.w=z;\n    return res;\n}\n\nstruct par{ // \u4e60\u60ef\uff0c\u624b\u5199 pair\n    int x,y;\n};\ninline par makep(int x,int y){\n    par res;\n    res.x=x,res.y=y;\n    return res;\n}\n\nstruct Union{\n    int fa[max_n],sz[max_n],n;\n    inline void init(int x){\n        n=x;\n        for(register int i=1;i<=n;++i)\n            fa[i]=i,sz[i]=1;\n    }\n    inline int find(int x){\n        if(x==fa[x]) return x;\n        return fa[x]=find(fa[x]);\n    }\n    inline bool merge(int x,int y){\n        x=find(x),y=find(y);\n        if(x==y) return 0;\n        if(sz[x]>sz[y]) x^=y^=x^=y;\n        sz[y]+=sz[x],fa[x]=y;\n        return 1;\n    }\n}uf;\n\ninline par check(int mid){ // kruscal\n    if(mid) for(register int i=1;i<=m1;++i)\n        e1[i].w+=mid;\n    uf.init(n);\n    int res1=0,res2=0;\n    for(register int i=1,j1=1,j2=1;i<n;){\n        if(j1>m1 && j2>m2 && i<n-1) // \u4e24\u79cd\u8fb9\u90fd\u7528\u5b8c\u4e86\uff0c\u8fd8\u6ca1\u6709\u9009\u591f\uff0c\u8bf4\u660e\u56fe\u4e0d\u8fde\u901a\uff0c\u65e0\u89e3\n            return makep(-1,-1);\n        if(j1<=m1 && (j2>m2 || e1[j1].w<=e2[j2].w)){ // \u9009 1 \u7c7b\n            int u=e1[j1].u,v=e1[j1].v;\n            if(uf.merge(u,v)){\n                ++res1,res2+=e1[j1].w,\n                ++i;\n            }\n            ++j1;\n        }\n        else if(j2<=m2 || j1>m1){ // \u9009 2 \u7c7b\n            int u=e2[j2].u,v=e2[j2].v;\n            if(uf.merge(u,v)){\n                res2+=e2[j2].w,\n                ++i;\n            }\n            ++j2;\n        }\n    }\n    if(mid) for(register int i=1;i<=m1;++i)\n        e1[i].w-=mid;\n    return makep(res1,res2-res1*mid);\n}// res1\uff1as \u7684\u5ea6\uff0cres2\uff1a\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\uff0c\u8bb0\u5f97\u51cf\u53bb\u504f\u79fb\u91cf\n\ninline int erfen(int l,int r){\n    --l,++r;int ans=0;\n    while(l<r-1){\n        int mid=(l+r)>>1;par res=check(mid);\n        if(res.x==k)\n            l=mid,ans=mid;\n        else if(res.x<k)\n            r=mid;\n        else\n            l=mid;\n    }\n    par res=check(ans);\n    if(res.x!=k) return -1; // \u6700\u540e\u4e8c\u5206\u5230\u7684\u7b54\u6848\u65e0\u89e3\n    return res.y;\n}\n\nsigned main(){\n//  freopen(\".in\",\"r\",stdin),\n//  freopen(\".out\",\"w\",stdout);\n    n=read(),m=read(),s=read(),k=read();\n    for(register int i=1;i<=m;++i){\n        int u=read(),v=read(),w=read();\n        if(u==s || v==s)\n            e1[++m1]=makee(u,v,w);\n        else\n            e2[++m2]=makee(u,v,w);\n    }\n    sort(e1+1,e1+1+m1),sort(e2+1,e2+1+m2);\n    write(erfen(-30000,30000));\n    return 0;\n}\n```",
        "postTime": 1640677022,
        "uid": 181776,
        "name": "_Arahc_",
        "ccfLevel": 7,
        "title": "\u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811 \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u5bf9\u4e00\u4e2a\u7279\u6b8a\u7684\u70b9\u8fdb\u884c\u9650\u5236\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u7528 wqs \u4e8c\u5206\u8fdb\u884c\u8ba1\u7b97\u3002\u5bf9\u6240\u6709\u8fde\u5411 $s$ \u7684\u8fb9\u8fdb\u884c\u5b9a\u91cf\u504f\u79fb\uff0c\u4f7f\u6240\u6709\u8fde\u5411 $s$ \u7684\u8fb9\u7684\u8fb9\u6743 $q$ \u52a0\u4e0a\u4e8c\u5206\u7684\u5b9a\u91cf $\\Delta$\u3002\u8fd9\u4e2a\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u53ef\u884c\u6027\u95ee\u9898\u3002\n\n\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u6211\u4eec\u4fee\u6539\u4e4b\u540e\u53ef\u4ee5\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u8ba1\u7b97\u8fde\u63a5\u5230 $s$ \u7684\u8fb9\u6709\u591a\u5c11\u6761\u3002\u5982\u679c\u8fde\u63a5\u5230 $s$ \u7684\u8fb9\u6570\u5927\u4e8e\u7b49\u4e8e $k$\uff0c\u6211\u4eec\u5c31\u63d0\u9ad8\u4e0b\u754c\uff1b\u5426\u5219\u964d\u4f4e\u4e0a\u754c\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u51c6\u786e\u7684 $\\Delta$\uff0c\u7b54\u6848\u5c31\u662f\u5f53\u524d\u6c42\u51fa\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u518d\u51cf\u53bb $k \\times \\Delta$\u3002\n\n\u4e00\u4e9b\u65e0\u89e3\u7684\u60c5\u51b5\uff1a\n\n- \u56fe\u4e0d\u8fde\u901a\uff1b   \n- \u8fde\u63a5\u81f3 $s$ \u7684\u8fb9\u4e0d\u591f $k$ \u6761\uff1b   \n- $\\Delta$ \u6700\u5c0f\u65f6\u4e0d\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\uff1b   \n- \u4e8c\u5206\u51fa\u6700\u540e\u7684 $\\Delta$ \u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\u3002\n\n\u8fd9\u6837\u8fd8\u662f\u4f1a T\u3002\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u6bcf\u6b21\u5c06\u8fb9\u6392\u5e8f\u7684\u65f6\u5019\u5206\u4e24\u7c7b\uff08\u662f\u5426\u8fde\u63a5 $s$\uff09\u6392\u5e8f\uff0c\u8fde\u63a5 $s$ \u7684\u8fb9\u4f18\u5148\u7ea7\u66f4\u9ad8\u3002\u7136\u540e\u8dd1 Kruskal \u7b97\u6cd5\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nstruct UnionFindSet{\n\tLL fa[50005];\n\tvoid makeSet(LL upper){for(LL i=0;i<=upper;++i)\tfa[i]=i;}\n\tLL findSet(LL x)\n\t{\n\t\tif(x==fa[x])\treturn fa[x];\n\t\treturn fa[x]=findSet(fa[x]);\n\t}\n\tvoid unionSet(LL x,LL y)\n\t{\n\t\tLL xx=findSet(x),yy=findSet(y);\n\t\tif(xx==yy)\treturn ;\n\t\tfa[xx]=yy;\n\t}\n\tbool bunionSet(LL x,LL y)\n\t{\n\t\tLL xx=findSet(x),yy=findSet(y);\n\t\tif(xx==yy)\treturn false;\n\t\tfa[xx]=yy;\n\t\treturn true;\n\t}\n}ufs;\nstruct Edge{\n\tLL u,v,val;\n\tEdge(){u=v=val=0;}\n\tEdge(LL U,LL V,LL va){u=U,v=V,val=va;}\n\tbool operator < (Edge another) const {return val<another.val;}\n}e1[500005],e2[500005],g[500005];\nLL n,m,s,t1,t2,valt;\nvoid msort(LL delta)\n{\n\tfor(LL i=1;i<=t1;++i)\te1[i].val+=delta;\n\tLL i=1,j=1,k=0;\n\twhile(i<=t2 && j<=t1)\n\t{\n\t\tif(e2[i]<e1[j])\tg[++k]=e2[i++];\n\t\telse\tg[++k]=e1[j++];\n\t}\n\twhile(j<=t1)\tg[++k]=e1[j++];\n\twhile(i<=t2)\tg[++k]=e2[i++];\n\tfor(LL l=1;l<=t1;++l)\te1[l].val-=delta;\n}\n/*\nvoid msort(int delta)\n{\n\tfor(int i=1;i<=t1;++i)\te1[i].val+=delta;\n\tint i=1,j=1,k=0;\n\twhile(i<=t1 && j<=t2)\n\t{\n\t\tif(e1[i]<e2[j])\tg[++k]=e1[i++];\n\t\telse\tg[++k]=e2[j++];\n\t}\n\twhile(i<=t1)\tg[++k]=e1[i++];\n\twhile(j<=t2)\tg[++k]=e2[j++];\n\tfor(int l=1;l<=t1;++l)\te1[i].val-=delta;\n}\n*/\nLL k;\nbool check(LL delta)\n{\n\tmsort(delta);\n\tLL cnt=0;\n\tvalt=0;\n\tufs.makeSet(n);\n\tLL blk=n;\n\tfor(LL i=1;i<=m;++i)\n\t{\n\t\tif(!ufs.bunionSet(g[i].u,g[i].v))\tcontinue;\n\t\tcnt+=LL(g[i].u==s || g[i].v==s);\n\t\tvalt+=g[i].val;\n\t\t--blk;\n\t\tif(blk<=1)\tbreak;\n\t}\n\treturn cnt>=k;\n}\nbool specialCheck(LL delta)\n{\n\tmsort(delta);\n\tLL cnt=0;\n\tvalt=0;\n\tufs.makeSet(n);\n\tLL blk=n;\n\tfor(LL i=1;i<=m;++i)\n\t{\n\t\tif(!ufs.bunionSet(g[i].u,g[i].v))\tcontinue;\n\t\tcnt+=LL(g[i].u==s || g[i].v==s);\n\t\tvalt+=g[i].val;\n\t\t--blk;\n\t\tif(blk<=1)\tbreak;\n\t}\n\treturn cnt==k;\n}\n//bool check(LL delta)\n//{\n//\tmsort(delta);\n//\tufs.makeSet(n);\n//\tLL cnt=0;\n//\tvalt=0;\n//\tfor(LL i=1;i<=m;++i)\n//\t{\n//\t\tif(ufs.bunionSet(g[i].u,g[i].v))\n//\t\t{\n//\t\t\tif(g[i].u==s || g[i].v==s)\t++cnt;\n//\t\t\tvalt+=g[i].val;\n//\t\t}\n//\t}\n//\tprintf(\"%d\\n\",cnt);\n//\treturn cnt>=k;\n//}\nint main(){\n\tscanf(\"%lld %lld %lld %lld\",&n,&m,&s,&k);\n\tfor(LL i=1;i<=m;++i)\n\t{\n\t\tLL u,v,val;\n\t\tscanf(\"%lld %lld %lld\",&u,&v,&val);\n\t\tif(u==s || v==s)\te1[++t1]=Edge(u,v,val);\n\t\telse\te2[++t2]=Edge(u,v,val);\n\t}\n\tif(t1<k)\treturn puts(\"Impossible\")&0;\n\tufs.makeSet(n);\n\tLL blk=n;\n\tfor(LL i=1;i<=t1;++i)\tblk-=ufs.bunionSet(e1[i].u,e1[i].v);\n\tfor(LL i=1;i<=t2;++i)\tblk-=ufs.bunionSet(e2[i].u,e2[i].v);\n\tif(blk!=1)\treturn puts(\"Impossible\")&0;\n\tsort(e1+1,e1+1+t1);\n\tsort(e2+1,e2+1+t2);\n\tLL l=-10000000ll,r=10000000ll,ans=-10000000ll;\n\tif(!check(l))\treturn puts(\"Impossible\")&0;\n\twhile(l<=r)\n\t{\n\t\tLL mid=(l+r)>>1;\n\t\tif(check(mid))\tl=mid+1,ans=mid;\n\t\telse\tr=mid-1;\n\t}\n\tcheck(ans);\n\tif(!specialCheck(ans))\treturn puts(\"Impossible\")&0;\n\tprintf(\"%lld\",valt-k*ans);\n\treturn 0;\n}\n```",
        "postTime": 1597066867,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5633 \u3010\u6700\u5c0f\u5ea6\u9650\u5236\u751f\u6210\u6811\u3011"
    },
    {
        "content": "# \u9898\u610f\n\n~~\u8fd9\u8fd8\u7528\u8bf4\u5417\uff0c\u9898\u9762\u4e0a\u5199\u7684\u5f88\u6e05\u695a\u5427\u3002~~\n\n# \u505a\u6cd5\n\n\u63d0\u4f9b\u4e00\u79cd\u4e0d\u7528\u5f52\u5e76\u6392\u5e8f\u4f18\u5316\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u53d1\u73b0\u6734\u7d20\u7b97\u6cd5\u7684\u6162\u4e3b\u8981\u5728\u4e8e\u8fdb\u884c\u4e86\u592a\u591a\u6b21\u7684 Kruskal\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u4f1a\u5f52\u5e76\u4f18\u5316\uff0c\u5982\u4f55\u51cf\u5c11\u5224\u65ad\u6b21\u6570\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\u9898\u76ee\u4e2d $w$ \u7684\u8303\u56f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u9002\u5f53\u7684\u7f29\u5c0f\u4e8c\u5206\u7684\u4e0a\u4e0b\u9650\u6765\u51cf\u5c11\u6267\u884c\u5224\u65ad\u7684\u6b21\u6570\uff0c\u7136\u540e\u5438\u7740\u6c27\u5c31\u8fc7\u4e86\u3002\n\n[Code](https://www.luogu.com.cn/paste/4h799mzs)\n\n[Record](https://www.luogu.com.cn/record/60169286)",
        "postTime": 1634650596,
        "uid": 174859,
        "name": "bigju",
        "ccfLevel": 0,
        "title": "P5633\u9898\u89e3"
    }
]