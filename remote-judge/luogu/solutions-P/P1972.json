[
    {
        "content": "\u8fd9\u4e2a\u9898\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811\u7b49\u7b49\u90fd\u53ef\u4ee5\u505a\uff0c\u4e0d\u8fc7\u7528\u6811\u72b6\u6570\u7ec4\u5199\u8d77\u6765\u66f4\u65b9\u4fbf\u3002\n\n\u6b64\u9898\u9996\u5148\u5e94\u8003\u8651\u5230\u8fd9\u6837\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u5bf9\u4e8e\u82e5\u5e72\u4e2a\u8be2\u95ee\u7684\u533a\u95f4[l,r]\uff0c\u5982\u679c\u4ed6\u4eec\u7684r\u90fd\u76f8\u7b49\u7684\u8bdd\uff0c\u90a3\u4e48\u9879\u94fe\u4e2d\u51fa\u73b0\u7684\u540c\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u5b9a\u662f\u53ea\u5173\u5fc3\u51fa\u73b0\u5728\u6700\u53f3\u8fb9\u7684\u90a3\u4e00\u4e2a\u7684\uff0c\u4f8b\u5982\uff1a\n\n\u9879\u94fe\u662f\uff1a1  3  4  5  1\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8er=5\u7684\u6240\u6709\u7684\u8be2\u95ee\u6765\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u76841\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3ar\u5df2\u7ecf\u5728\u7b2c\u4e94\u4e2a1\u7684\u53f3\u8fb9\uff0c\u5bf9\u4e8e\u4efb\u4f55\u67e5\u8be2\u7684[L,5]\u533a\u95f4\u6765\u8bf4\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a1\u88ab\u7b97\u4e86\uff0c\u90a3\u4e48\u4ed6\u5b8c\u5168\u53ef\u4ee5\u7528\u7b2c\u4e94\u4e2a1\u6765\u66ff\u4ee3\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u67e5\u8be2\u7684\u533a\u95f4\u6309\u7167r\u6765\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6765\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u662f\u7528\u6765\u5e72\u4ec0\u4e48\u7684\u5462\uff1f\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n\n1 2 1 3\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a1\uff0cinsert(1,1)\uff1b\u8868\u793a\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u4e86\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u6570\u5b57\uff0c\u6b64\u65f6\u6811\u72b6\u6570\u7ec4\u6240\u8868\u793a\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff08\u4e0d\u662f\u5b83\u672c\u8eab\u7684\u503c\u800c\u662f\u5b83\u5bf9\u5e94\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff09\u662f\uff1a1 0 0 0\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a2\uff0cinsert(2,1)\uff1b\u6b64\u65f6\u6811\u72b6\u6570\u7ec4\u8868\u793a\u7684\u6bcf\u4e2a\u6570\u5b57\u662f1 1 0 0\n\n\u5bf9\u4e8e\u7b2c\u4e09\u4e2a1\uff0c\u56e0\u4e3a\u4e4b\u524d\u51fa\u73b0\u8fc71\u4e86\uff0c\u56e0\u6b64\u9996\u5148\u628a\u90a3\u4e2a1\u6240\u5728\u7684\u4f4d\u7f6e\u5220\u6389insert(1,-1),\u7136\u540e\u5728\u628a\u5b83\u52a0\u8fdb\u6765insert(3,1)\u3002\u6b64\u65f6\u6bcf\u4e2a\u6570\u5b57\u662f0 1 1 0\n\n\u5982\u679c\u6b64\u65f6\u6709\u4e00\u4e2a\u8be2\u95ee[2,3]\uff0c\u90a3\u4e48\u76f4\u63a5\u6c42sum(3)-sum(2-1)=2\u5c31\u662f\u7b54\u6848\u3002\n\n\u9898\u89e3\u6e05\u695a\u4e48\uff1f\n",
        "postTime": 1415842998,
        "uid": 3432,
        "name": "dlhham",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u89e3\u9898\u505a\u6cd5\uff1a\u79bb\u7ebf+\u6811\u72b6\u6570\u7ec4\n\n\u5c06\u95ee\u9898\u533a\u95f4\u6392\u5e8f\uff08\u4ee5\u5de6\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\uff09\n\n\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u6765\u8bf4\uff0c\u8fd9\u9053\u9898\u6ca1\u6709\u6240\u8c13\u7684\u66f4\u65b0\u7ef4\u62a4\uff0c\u800c\u662f\u5355\u7eaf\u7684\u8be2\u95ee\u201c\u524d\u7f00\u548c\u201d\n\n\u9996\u5148\u53ef\u4ee5\u7b80\u5316\u4e00\u4e0b\uff0c\u50cf\u5e73\u5e38\u9047\u5230\u7684\u9898\u4e00\u6837\uff0c\u8ba1\u7b97\u51fa\u4ece\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u8d77\uff0c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e00\u5171\u51fa\u73b0\u8fc7\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n\n```cpp\nfor(int i=1;i<=n;++i)\n    if(!have[num[i]]){\n        have[num[i]]=1;\n        add(i,1);\n    }\n```\n\u8fd9\u6837\uff0c\u6211\u4eec\u7684query\u64cd\u4f5c\u5c31\u662f\u8be2\u95ee\u5230\u67d0\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u4e00\u5171\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\n\n\u8fdb\u800c\uff0c\u6211\u4eec\u5728\u6b64\u5f15\u8fdb\u4e00\u4e2anext[]\u6570\u7ec4\n\nnext[i]\u8bb0\u5f55\u7684\u662f\u6570\u5b57i\u5728\u6b64\u540e\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\n\n(\u4e3a\u4f55next\u5728\u6d1b\u8c37\u662f\u5173\u952e\u5b57QAQ)\n\n```cpp\nfor(int i=n;i;--i){\n        if(!have[num[i]])nex[i]=n+1;\n        else nex[i]=have[num[i]];\n        have[num[i]]=i;\n    }\n```\n\u6811\u72b6\u6570\u7ec4query\u6c42\u533a\u95f4\u548c\uff0c\u5bf9\u4e8e\u95ed\u533a\u95f4[x,y]\u6709query(y)-query(x-1)\uff0cok\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u8fd9\u6837\u7684\u65b9\u6cd5\n\n```cpp\nint j=1;\n    for(int i=1;i<=m;++i){\n        for(;j<q[i].x;j++)add(nex[j],1);\n        ans[q[i].id]=query(q[i].y)-query(q[i].x-1);\n    }    \n```\n\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u5c06\u4e0d\u540c\u6570\u5b57\u51fa\u73b0\u7684\u4e2a\u6570\u4ece\u6700\u5f00\u59cb\u5230\u67d0\u4e00\u65f6\u523b\u5f97\u51fa\uff0c\u90a3\u4e48query(y)\u7684\u95ee\u9898\u5df2\u89e3\u51b3\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u600e\u4e48\u624d\u80fd\u51cf\u53bbquery(x-1)\u5e76\u4e14\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\n\n\u90a3\u5c31\u662f\u5728\u52a8\u6001\u7684\u66f4\u65b0\uff0c\u53ea\u8981\u5728\u5de6\u7aef\u70b9\u4e4b\u524d\u51fa\u73b0\u8fc7\uff0c\u5c31\u52a0\u4e0a\uff0c\u8fd9\u6837\u4e24\u6b21\u7ed3\u679c\u76f8\u51cf\uff0c\u5c31\u662f\u6b63\u786e\u7b54\u6848\u4e86\n\n\u5bf9\u4e8e\u6700\u57fa\u7840\u7684\u6811\u72b6\u6570\u7ec4add(x,d)\u548cquery(x)\u64cd\u4f5c\u5c31\u4e0d\u8be6\u7ec6\u8bf4\u660e\u4e86\uff0c\u5404\u8def\u5927\u795e\u7684\u535a\u5ba2\u4e0a\u4e5f\u6709\u5f88\u591a\u8be6\u7ec6\u7684\u89e3\u91ca\n\n\u5f53\u7136\uff0c\u6b64\u9898\u83ab\u961f\u53ef\u8fc7%%%\n",
        "postTime": 1499926673,
        "uid": 36080,
        "name": "\u51cc\u5e7d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u849f\u84bb\u521d\u5b66\u6811\u72b6\u6570\u7ec4\uff0c\u78b0\u5230\u8fd9\u79cd\u6a21\u677f\u81ea\u7136\u8981\u505a\uff0c\u611f\u89c9\u5927\u5bb6\u7684\u9898\u89e3\u5bf9\u65b0\u624b\u90fd\u4e0d\u592a\u53cb\u597d~~\u6df1\u6709\u4f53\u4f1a~~\uff0c\u6211\u6765\u53d1\u4e00\u7bc7\u7a0d\u660e\u4e86\u4e00\u70b9\u7684\u79bb\u7ebf\u6811\u72b6\u6570\u7ec4\u89e3\u6cd5\n~~~\n1.\u6309r\u6392\u5e8f\u4e00\u4e0b\n2.\u6811\u72b6\u6570\u7ec4tree[j]\u7ef4\u62a4\u4ece1\u5230j\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u6709\u591a\u5c11\u4e2a\n3.\u7136\u540e\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u5c31\u597d\uff08tree[r]-tree[l-1]\uff09\n \uff01ok\u5c31\u8fd9\u4e48\u7b80\u5355\uff01\n~~~\n\n~~~cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n#define maxn 1000119\nint num[maxn],tree[maxn],booll[maxn],nnn[maxn],N,ww;;\n//num\u6570\u7ec4\u4fdd\u5b58\u539f\u6570\u5217\uff0ctree\u6811\u72b6\u6570\u7ec4\uff0cnnn\u4fdd\u5b58\u7ed3\u679c\nstruct tt\n{\n    int l,r;//\u5de6\u53f3\u8fb9\u754c\n    int pos;//\u539f\u4f4d\u7f6e\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u79bb\u7ebf\u6392\u5e8f\u540e\u5904\u7406\uff09\n};\ntt ask[maxn];\nbool cmp(tt x,tt y)\n{ \n    return x.r<y.r;\n    //\u5feb\u6392\u5927\u6cd5\u597d\uff0c\u6ca1\u6709\u4ec0\u4e48\u662f\u5feb\u6392\u89e3\u51b3\u4e0d\u6765\u54e6\n    //\u5b9e\u5728\u4e0d\u884c\u5c31\u52a0\u4e0a\u4e00\u4e2acmp\n}\nint lowbit(int n) \n{\n    return n&(-n);\n    //\u6811\u72b6\u6570\u7ec4\u6838\u5fc3\u64cd\u4f5c\u00d71\n}\nvoid add(int n,int now)\n{\n    while(n<=N)\n    {\n        tree[n]+=now;\n        n+=lowbit(n);\n    }\n    //\u6811\u72b6\u6570\u7ec4\u6838\u5fc3\u64cd\u4f5c\u00d72-->\u66f4\u65b0\u64cd\u4f5c\n}\nint sum(int n)\n{\n    int ans=0;\n    while(n!=0)\n    {\n        ans+=tree[n];\n        n-=lowbit(n);\n    }\n    return ans;\n    //\u6811\u72b6\u6570\u7ec4\u6838\u5fc3\u64cd\u4f5c\u00d73\u2014\u2014\u2014>\u67e5\u8be2\u64cd\u4f5c\n}\nint main()\n{\n        scanf(\"%d\",&N);\n        for(int i=1;i<=N;i++)\n            scanf(\"%d\",&num[i]);\n        scanf(\"%d\",&ww);\n        for(int i=1;i<=ww;i++)\n        {\n            scanf(\"%d%d\",&ask[i].l,&ask[i].r);\n            ask[i].pos=i; //\u5b58\u50a8\u521d\u59cb\u4f4d\u7f6e\n        }\n        sort(ask+1,ask+1+ww,cmp);//\u6309r\u6392\u5e8f\n        int next=1;\n        for(int i=1;i<=ww;i++)\n        {\n            for(int j=next;j<=ask[i].r;j++)\n            {\n                if(booll[num[j]]) \n                    add(booll[num[j]],-1);\n                 //\u4e4b\u524d\u6253\u8fc7\u6807\u8bb0\uff0c\u5728\u4e4b\u524d\u7684\u4f4d\u7f6e\u52a0\u4e0a-1\uff0c\u4fdd\u8bc1\u65e0\u91cd\u590d\n                add(j,1);\n                booll[num[j]]=j;\n            }\n            next=ask[i].r+1;\n            //\u66f4\u65b0\u4e0b\u4e00\u6b21\u67e5\u8be2\u7684\u4f4d\u7f6e\n            nnn[ask[i].pos]=sum(ask[i].r)-sum(ask[i].l-1);\n            //\u6309\u8be2\u95ee\u7f16\u53f7\u5b58\u50a8\u6bcf\u7ec4\u8be2\u95ee\u7684\u7ed3\u679c\n        }\n    for(int i=1;i<=ww;i++)\n      cout<<nnn[i]<<endl;\n    return  0;\n}\n~~~\n## ~~\u4e00\u5b9a\u8bb0\u5f97\u79bb\u7ebf\u8981\u6309\u67e5\u8be2\u7f16\u53f7\u8f93\u51fa\uff0c\u4e0d\u7136\u4f1a\u6b7b\u7684\u5f88\u60e8\uff01~~",
        "postTime": 1540204278,
        "uid": 28190,
        "name": "\u4f1a\u6253\u6c99\u5305\u7684\u732b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "# HH\u7684\u9879\u94fe \u89e3\u9898\u62a5\u544a\n\n$Author$\uff1a\u53f6\u5c0f\u67ab\n\n## \u5199\u5728\u524d\u9762\n\n\u89e3\u9898\u62a5\u544a\u662f\u6211\u4e2a\u4eba\u7684\u4e00\u79cd\u9898\u89e3\u5f62\u5f0f\uff0c\u5b83\u76f8\u8f83\u4e8e\u4e00\u822c\u7684\u9898\u89e3**\u4e3b\u89c2\u6027\u66f4\u5f3a**\uff0c\u4e5f\u4f1a**\u66f4\u52a0\u8be6\u7ec6**\u3002\u53ef\u80fd\u4f53\u73b0\u505a\u9898\u7684\u5fc3\u8def\u5386\u7a0b\uff0c\u4e5f\u53ef\u80fd\u5c55\u793a\u540c\u6837\u64cd\u4f5c\u7684\u4e0d\u540c\u7b97\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u534a\u8def\u63a8\u7ffb\u4ee5\u524d\u7684\u5199\u6cd5\u91cd\u65b0\u7ef4\u62a4\u65b0\u7684\u64cd\u4f5c\u6ee1\u8db3\u65b0\u7684\u9700\u6c42\u2026\u2026\u603b\u4e4b\u5b83\u4e5f\u8bb8\u5e76\u7b97\u4e0d\u4e0a\u975e\u5e38\u4e25\u8c28\u7684\u9898\u89e3\uff0c\u66f4\u50cf\u662f\u4e00\u7bc7\u8bb2\u6f14\u7a3f\uff0c\u66f4\u50cf\u662f\u5c31\u5bf9\u7740\u6b63\u5728\u770b\u62a5\u544a\u7684\u4f60\u8bf4\u8bdd\u3002\u6211\u5e0c\u671b\u8425\u9020\u4e00\u79cd\u4e2a\u4eba\u4e3b\u89c2\u601d\u60f3\u7684\u6c1b\u56f4\uff0c\u628a\u95ee\u9898\u7528**\u6211\u81ea\u5df1**\u7684\u65b9\u5f0f**\u8bb2\u660e\u767d**\uff0c\u8fd9\u5c31\u662f\u6211\u64b0\u5199\u89e3\u9898\u62a5\u544a\u7684\u6240\u6709\u521d\u8877\u3002\n\n\u4e0e\u5404\u4f4d\u5171\u52c9\u3002\n\n> Talk is easy, show me the code.\n\n## \u89e3\u9898\u80cc\u666f\n\n\u6700\u8fd1\u5728\u6574\u7406\u6811\u72b6\u6570\u7ec4\u6a21\u677f\u7684\u65f6\u5019\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u7bc7\u538b\u7bb1\u5e95\u7684ACcode\uff0c\u6253\u5f00\u4e00\u770b\u53d1\u73b0\u662f\u8fd9\u9053[HH\u7684\u9879\u94fe](https://www.luogu.org/problem/P1972)\uff0c\u65e9\u5df2\u7ecf\u5fd8\u8bb0\u4e86\u9898\u9762\u4e8e\u662f\u6253\u5f00\u53c8\u770b\u4e86\u4e00\u773c\u3002\u4e00\u773c\u626b\u8fc7\u53bb\uff0c~~\u8fd9\u4e0d\u662f\u4e2a\u6a21\u62df\u5417~~\uff0c\u7136\u540e\u770b\u5230\u6570\u636e\u8303\u56f4\uff1a\u5bf9\u4e8e\u6240\u6709\u6570\u636e \uff1a$ n,m\\leq 1\\times 10^6$\n\n\u2026\u2026\uff08\u5988\u8036\u90a3\u6211\u51c9\u4e86\u554a\uff09\uff0c\u600e\u4e48\u540e\u9762\u8fd8\u6709\u4e00\u53e5\n\n> \u672c\u9898\u53ef\u80fd\u9700\u8981\u8f83\u5feb\u7684\u8bfb\u5165\u65b9\u5f0f\uff0c\u6700\u5927\u6570\u636e\u70b9\u8bfb\u5165\u6570\u636e\u7ea620MB\n\n\u566b\u3002\u90a3\u884c\u5427\uff0c\u60f3\u4e00\u60f3\u6b63\u89e3\u662f\u4ec0\u4e48\u4e1c\u897f\u3002\u65e2\u7136\u662f\u4ece\u6811\u72b6\u6570\u7ec4\u677f\u5b50\u65c1\u8fb9\u63ea\u51fa\u6765\u7684\u90a3\u5c31\u662f**\u6811\u72b6\u6570\u7ec4**\u54af\uff0c\u7136\u800c\u5f88\u95f2\u7684\u6211\u53c8\u55b5\u5230\u4e86\u521a\u521a\u6253\u5b8c\u7684\u7ebf\u6bb5\u6811\u677f\u5b50\u2026\u2026\u7ebf\u6bb5\u6811\u2026\u2026**\uff1f**\n\n\u7ffb\u4e86\u4e00\u4e0b\u5176\u4ed6\u9898\u89e3\uff0c\u8fd9\u53ef\u80fd\u662f\u552f\u4e00\u4e00\u7bc7\u540c\u65f6\u8bb2\u89e3\u4e86\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u4e24\u79cd\u5e38\u89c1\u505a\u6cd5\u7684\u89e3\u9898\u62a5\u544a\uff0c\u6240\u4ee5\u5c31\u7b79\u5212\u7740\u5199\u4e0b\u6765\u4e86\u3002\u81f3\u4e8e\u5176\u4ed6julao\u4eec\u5199\u7684**\u4e3b\u5e2d\u6811**\u3001**\u83ab\u961f**\u3001**\u79bb\u6563\u5316**\u3001**\u5206\u5757**\u2026\u2026\u672c\u849f\u84bb\u4e00\u4e2a\u90fd\u4e0d\u4f1a\uff0c\u5c31\u4e0d\u5728\u6b64\u73ed\u95e8\u5f04\u65a7\u4e86\u3002\n\n## \u6838\u5fc3\u601d\u60f3\n\n\u6700\u5927\u90a3\u4e2a\u70b9*\uff08#10\uff09*\u6570\u636e\u6709$20MB$\uff0c\u8fd9\u5df2\u7ecf\u4e0d\u662f\u666e\u901a\u7684`scanf`\u80fd\u627f\u53d7\u7684\u4e86\u3002\u4e5f\u8bb8\u5173\u4e86\u6d41\u540c\u6b65\u7684`cin`\u53ef\u4ee5\u8fc7\uff0c\u6211\u6ca1\u6709\u8bd5\u3002\u6240\u4ee5\u4e0a\u624b\u5148\u6765\u4e00\u4e2a**\u5feb\u8bfb**\uff0c\u5728\u6b64\u5c31\u7565\u8fc7\u3002\n\n\u8bfb\u4e00\u4e0b\u9898\u76ee\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u53e5\u8bdd\uff0c\u4e5f\u5c31\u662f\u4ed6\u7684\u95ee\u9898\uff1a\u201c\u67d0\u4e00\u6bb5\u8d1d\u58f3\u4e2d\uff0c\u5305\u542b\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8d1d\u58f3\uff1f\u201d\u3002\u8fd9\u53e5\u8bdd\u91cc\u5305\u542b\u4e86\u4e24\u4e2a\u610f\u601d\uff1a1. \u8be2\u95ee\u7684\u662f\u4e00\u4e2a**\u533a\u95f4**\uff0c2. \u5bf9\u4e8e\u540c\u4e00\u79cd\u8d1d\u58f3\uff0c\u5982\u679c\u5728\u8be2\u95ee\u7684\u533a\u95f4\u4e2d**\u91cd\u590d**\u51fa\u73b0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u53ea\u5173\u6ce8\u5b83\u51fa\u73b0\u7684**\u67d0\u4e00\u4e2a**\u4f4d\u7f6e\u800c\u5ffd\u7565\u5176\u4ed6\u540c\u7c7b\u7684\u8d1d\u58f3\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e24\u70b9\u4e5f\u5c31\u662f\u8fd9\u9053\u9898\u76ee\u7684\u6838\u5fc3\u601d\u60f3\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\u8981\u8003\u8651\u7684\u5c31\u662f\uff0c\u6211\u4eec\u8981\u5173\u6ce8\u5728\u533a\u95f4\u5185**\u54ea\u4e00\u4e2a\u4f4d\u7f6e**\u7684\u540c\u7c7b\u8d1d\u58f3\u3002\u56e0\u4e3a\u5728\u4e00\u4e2a\u533a\u95f4\u4e2d\u9664\u4e86\u7aef\u70b9\u4ee5\u5916\uff0c\u5176\u5b83\u4e2d\u95f4\u5143\u7d20\u7684\u4f4d\u7f6e\u548c\u6570\u76ee\u90fd\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u4e00\u79cd\u601d\u8def\u663e\u800c\u6613\u89c1\uff1a\u53ea\u5173\u6ce8\u5728**\u4e24\u7aef\u70b9\u5904**\u51fa\u73b0\u7684\u540c\u7c7b\u8d1d\u58f3\u3002\u7b2c\u4e00\u7bc7\u9ad8\u8d5e\u9898\u89e3\u8bf4\u7684\u4e5f\u5c31\u662f\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u4ed6\u9009\u62e9\u4e86\u53f3\u7aef\u70b9\u4f5c\u4e3a\u5224\u65ad\u7684\u6807\u51c6\uff0c\u5176\u5b9e\u5de6\u7aef\u70b9\u5f53\u7136\u4e5f\u53ef\u4ee5~~\uff08\u53ea\u8981**\u53cd\u7740\u5efa\u6811**\u5c31\u597d\u4e86\uff09~~\u3002\u4f46\u662f\u5b8c\u5168\u6ca1\u5fc5\u8981\u628a\u6574\u4e2a\u6811\u72b6\u6570\u7ec4\u53cd\u8fc7\u6765\uff0c\u6240\u4ee5\u5728\u6b64\u4e5f\u4ec5\u8ba8\u8bba\u53d6\u6700**\u53f3\u8fb9**\u4e00\u4e2a\u540c\u7c7b\u8d1d\u58f3\u7684\u60c5\u51b5\u3002\n\n\u65e2\u7136\u53ea\u5173\u6ce8\u6700\u53f3\u8fb9\u7684\u8d1d\u58f3\uff0c\u90a3\u4e48\u5c31\u9700\u8981**\u4f9d\u6b21\u4ece\u5de6\u5411\u53f3**\u5730\u5904\u7406\u548c\u4fee\u6539\u6574\u4e2a\u6570\u7ec4\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u6211\u4eec**\u5bf9\u4e8e\u524d\u4e00\u4e2a\u533a\u95f4\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u533a\u95f4\u7684\u8be2\u95ee**\u3002\u5f53\u7136\u8fd8\u6709\u4e00\u70b9\uff0c\u5728\u5173\u6ce8\u4e86\u6700\u53f3\u8fb9\u8d1d\u58f3\u4e4b\u540e\uff0c\u8981**\u5ffd\u7565**\u533a\u95f4\u5185\u5176\u4ed6\u540c\u7c7b\u7684\u8d1d\u58f3\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8981\u5bf9\u533a\u95f4\u8be2\u95ee\u4ec0\u4e48\u4e1c\u897f\uff1f\u8fd9\u5c31\u6d89\u53ca\u5230**\u524d\u7f00\u548c**\u7684\u601d\u60f3\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u8be2\u95ee\u5728\u5b83**\u53f3\u7aef\u70b9\u4e4b\u524d**\u6709\u591a\u5c11**\u4e0d\u540c\u7c7b**\u7684\u8d1d\u58f3\u3002\u56e0\u4e3a\u7531\u4e8e\u6211\u4eec\u4e4b\u524d\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u6240\u6709\u540c\u7c7b\u7684\u8d1d\u58f3\u5df2\u7ecf\u88ab\u7b80\u5316\u5230**\u53ea\u5269\u6700\u9760\u53f3\u8fb9**\u90a3\u4e2a\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u79cd\u505a\u6cd5\u7684\u6b63\u786e\u6027\u3002\n\n\u6240\u4ee5\u7ecf\u8fc7\u603b\u7ed3\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u603b\u601d\u8def\uff1a\n\n1. \u6211\u4eec\u9700\u8981\u4e00\u79cd\u652f\u6301\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\n2. \u5bf9\u7ed9\u5b9a\u7684\u8be2\u95ee\u533a\u95f4\uff0c\u6309\u7167\u533a\u95f4**\u53f3\u7aef\u70b9**\u8fdb\u884c\u6392\u5e8f\uff0c\u6309\u6392\u5e8f\u540e\u7684\u987a\u5e8f\u8bb0\u5f55\u7b54\u6848\uff0c\u7136\u540e**\u539f\u5e8f**\u8f93\u51fa\u3002\n3. \u6bcf\u4e2a\u8be2\u95ee\u533a\u95f4\u7684\u7b54\u6848\u5c31\u662f\u533a\u95f4**\u53f3\u7aef\u70b9**\u7684\u524d\u7f00\u548c$-$(\u533a\u95f4**\u5de6\u7aef\u70b9$-$1**)\u7684\u524d\u7f00\u548c\u3002\n\n\u7531\u6b64\u6211\u4eec\u5f15\u51fa\u6b64\u89e3\u9898\u62a5\u544a\u7684\u4e3b\u89d2\uff1a**\u6811\u72b6\u6570\u7ec4**\u548c**\u7ebf\u6bb5\u6811**\u3002\n\n## \u6811\u72b6\u6570\u7ec4\u89e3\u6cd5\n\n### \u601d\u8def\n\n\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u524d\u7f00\u548c\uff0c\u6811\u72b6\u6570\u7ec4\u771f\u662f\u4e00\u4e2a\u518d\u597d\u4e0d\u8fc7\u7684\u9009\u62e9\u4e86\u3002\u9996\u5148\u5f53\u7136\u8981\u5f00\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u50a8\u8be2\u95ee\u7684\u5404\u4e2a\u533a\u95f4\uff0c\u65b9\u4fbf\u6392\u5e8f\u548c\u539f\u5e8f\u8f93\u51fa\uff0c\u518d\u5199\u4e00\u4e2a`cmp`\uff1a\n\n```cpp\nstruct QUE{\n\tint l;\n\tint r;\n\tint id; // \u5b58\u653e\u539f\u5e8f\n}q[maxn];\ninline bool cmp(const QUE &a,const QUE &b){\n\treturn a.r<b.r;\n}\n```\n\n\u7136\u540e\u5c31\u662f\u6811\u72b6\u6570\u7ec4\u7684\u51e0\u4e2a\u677f\u5b50\uff0c$lowbit$\uff0c$modify$\u4ee5\u53ca$query$\uff0c\u5728\u6b64\u4e5f\u4e0d\u591a\u89e3\u91ca\uff1a\n\n```cpp\ninline int lowbit(int x){\n\treturn x&(-x);\n}\nvoid modify(int p,int v){\n\tfor(;p<=n;p+=lowbit(p))\n\t\ttree[p]+=v;\n}\nint query(int p){\n\tint res=0;\n\tfor(;p;p-=lowbit(p))\n\t\tres+=tree[p];\n\treturn res;\n}\n// tree\u6570\u7ec4\u5373\u4e3a\u6811\u72b6\u6570\u7ec4\n```\n\n\u4e0b\u9762\u5f15\u5165\u91cd\u8981\u7684\u4e00\u4e2a\u6570\u7ec4`vis[]`\u4ee5\u53ca\u4e00\u4e2a\u53d8\u91cf`pow`\u3002`vis[i]`\u8868\u793a\u7b2c`i`\u79cd\u8d1d\u58f3\u5728\u76ee\u524d\u8be2\u95ee\u5230\u7684\u533a\u95f4\u4e2d**\u6700\u540e**\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u4e5f\u5c31\u662f\u6700\u53f3\u7aef\uff09\u3002\u53d8\u91cf`pow`\u6307\u5411\u7684\u4f4d\u7f6e\u662f**\u5c1a\u672a\u4fee\u6539**\u7684\u533a\u95f4\u7684**\u5de6\u7aef\u70b9**\uff0c\u4e5f\u5c31\u662f**\u5df2\u7ecf\u4fee\u6539**\u533a\u95f4**\u53f3\u7aef\u70b9**\u7684\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u5b9a\u4f4d\u672a\u4fee\u6539\u7684\u533a\u95f4\u3002\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u5bf9\u8be2\u95ee\u7684\u533a\u95f4\u6309\u53f3\u7aef\u70b9\u6392\u597d\u5e8f\uff0c\u6240\u4ee5`pow`\u7684\u503c\u5728\u4e0d\u540c\u65f6\u523b\u5355\u8c03\u9012\u589e\uff0c\u76f4\u81f3\u672b\u5c3e\u3002\n\n\u6709\u4e86\u4ee5\u4e0a\u7684\u4fe1\u606f\u4e4b\u540e\u5c31\u6211\u4eec\u53ef\u4ee5\u5bf9\u533a\u95f4\u8fdb\u884c\u4fee\u6539\u4e86\uff0c\u4e3b\u8981\u7ef4\u62a4\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. \u5982\u679c\u67d0\u5143\u7d20`i`\u5728\u4e4b\u524d\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u5c06\u5176**\u4ee5\u524d\u6700\u53f3\u7aef\u4f4d\u7f6e**\u7684\u524d\u7f00\u548c$-$1\uff0c\u76f8\u5f53\u4e8e\u5ffd\u7565\u4e4b\u524d\u7684\u4f4d\u7f6e\u3002\u518d\u5728\u73b0\u5728`i`\u7684\u4f4d\u7f6e\u628a\u524d\u7f00\u548c$+$1\uff0c\u5e76\u66f4\u65b0`vis[i]`\u5230\u5f53\u524d\u4f4d\u7f6e\u3002\n2. \u5982\u679c\u67d0\u5143\u7d20`i`\u5728\u4e4b\u524d\u6ca1\u6709\u51fa\u73b0\uff0c\u90a3\u4e48\u76f4\u63a5\u4fee\u6539\u5f53\u524d\u4f4d\u7f6e\u524d\u7f00\u548c\u5373\u53ef\uff0c\u5e76\u66f4\u65b0`vis[i]`\u3002\n\n\u6700\u540e\u518d\u7b97\u4e00\u4e0b**\u5f53\u524d\u8be2\u95ee\u533a\u95f4**\u7684\u7b54\u6848\u5373\u53ef\uff0c\u4ee5\u4e0a\u4e24\u4e2a\u64cd\u4f5c\u5982\u4e0b\uff1a\n\n```cpp\nint pow=1;\n\tfor(rint i=1;i<=m;++i){\n\t\tfor(rint j=pow;j<=q[i].r;++j){\n\t\t\tif(vis[a[j]]) modify(vis[a[j]],-1);\n\t\t\tmodify(j,1);\n\t\t\tvis[a[j]]=j;\n\t\t}\n\t\tpow=q[i].r+1;\n\t\tans[q[i].id]=query(q[i].r)-query(q[i].l-1);\n\t}\n```\n\n\n### \u603b\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define rint register int\n#define maxn 1000010\nusing namespace std;\n\nint n,m;\nint a[maxn],ans[maxn];\nint vis[maxn],tree[maxn];\n\nstruct QUE{\n\tint l;\n\tint r;\n\tint id;\n}q[maxn];\n\ninline void read(int &x){\n\tchar ch=getchar();int f=1;x=0;\n\twhile(!isdigit(ch) && ch^'-') ch=getchar();\n\tif(ch=='-') f=-1,ch=getchar();\n\twhile(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n\tx*=f;\n}\n\ninline bool cmp(const QUE &a,const QUE &b){\n\treturn a.r<b.r;\n}\n\ninline int lowbit(int x){\n\treturn x&(-x);\n}\n\nvoid modify(int p,int v){\n\tfor(;p<=n;p+=lowbit(p))\n\t\ttree[p]+=v;\n}\n\nint query(int p){\n\tint res=0;\n\tfor(;p;p-=lowbit(p))\n\t\tres+=tree[p];\n\treturn res;\n}\n\nint main(){\n\tread(n);\n\tfor(rint i=1;i<=n;++i) read(a[i]);\n\tread(m);\n\tfor(rint i=1;i<=m;++i){\n\t\tread(q[i].l); read(q[i].r); q[i].id=i;\n\t}\n\tsort(q+1,q+m+1,cmp);\n\t\n\tint pow=1;\n\tfor(rint i=1;i<=m;++i){\n\t\tfor(rint j=pow;j<=q[i].r;++j){\n\t\t\tif(vis[a[j]]) modify(vis[a[j]],-1);\n\t\t\tmodify(j,1);\n\t\t\tvis[a[j]]=j;\n\t\t}\n\t\tpow=q[i].r+1;\n\t\tans[q[i].id]=query(q[i].r)-query(q[i].l-1);\n\t}\n\t\n\tfor(rint i=1;i<=m;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n### \u5c0f\u7ed3\n\n\u597d\u60f3\u597d\u5199\u8dd1\u5f97\u5feb\uff08\u6ce8\u610f\u5e38\u6570\uff09\uff0c\u662f\u6811\u72b6\u6570\u7ec4\u7684\u5de8\u5927\u4f18\u52bf\uff0c\u8ba4\u6e05\u4e86\u9700\u8981\u7ef4\u62a4\u7684\u64cd\u4f5c\u4e4b\u540e\u6811\u72b6\u6570\u7ec4\u4e00\u822c\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u672c\u9898\u7684\u6807\u51c6\u505a\u6cd5\u5e94\u8be5\u5c31\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u56e0\u4e3a\u65e0\u8bba\u54ea\u65b9\u9762\u90fd\u8ddf\u6811\u72b6\u6570\u7ec4\u7684\u6838\u5fc3\u601d\u60f3\u548c\u53ef\u652f\u6301\u7684\u64cd\u4f5c\u5951\u5408\u5ea6\u5f88\u9ad8\uff0c\u5e76\u4e14\u7801\u91cf\u77ed\u3001\u7a7a\u95f4\u5c0f\u3001\u8017\u65f6\u5c11\u3002\u5c3d\u7ba1\u8fd9\u6837\u8fd8\u662f\u60f3\u79cd\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e8e\u662f\u624d\u6709\u4e86\u4ee5\u4e0b\u7684\u5185\u5bb9\u3002\n\n## \u7ebf\u6bb5\u6811\u89e3\u6cd5\n\n### \u601d\u8def\n\n\u7ebf\u6bb5\u6811\u662f\u652f\u6301\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u4e1c\u897f\u2026\u2026\u7528\u6765\u505a**\u5355\u70b9**\u4fee\u6539\u6709\u70b9\u5927\u70ae\u8f70\u868a\u5b50\uff0c\u8fd8\u6162\u3002~~\u4e0d\u8fc7\u8c01\u8ba9\u6211\u95f2\u5462~~\uff0c\u597d\u5728\u4e0d\u4f1aT\u6389\uff0c\u53ea\u662f\u6bd4\u6811\u72b6\u6570\u7ec4\u8981\u6162\u7684\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u4f7f\u7528\u3002\u770b\u4e86\u4e00\u4e9b\u9898\u89e3\u7684\u8bc4\u8bba\u533a\u53d1\u73b0\u6709\u8bb8\u591a\u60f3\u7528\u7ebf\u6bb5\u6811\u505a\u7684\u540c\u5b66\uff0c\u4f46\u662f\u6ca1\u627e\u5230\u76f8\u5e94\u7684\u9898\u89e3\uff0c\u5c31\u8ba9\u8fd9\u7bc7\u89e3\u9898\u62a5\u544a\u6765\u8865\u4e0a\u8fd9\u4e2a\u7a7a\u5427\u3002\n\n\u5176\u5b9e\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u8ddf\u6811\u72b6\u6570\u7ec4\u7684\u601d\u8def**\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837**\uff0c\u53ea\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u64cd\u4f5c\u6709\u4e0d\u540c\u7684\u5199\u6cd5\u800c\u5df2\u3002\u6bd4\u5982\u5bf9\u4e8e\u8be2\u95ee\u533a\u95f4\u6392\u5e8f\u3001\u7ef4\u62a4\u6700\u53f3\u7aef\u7684\u8d1d\u58f3\u4f4d\u7f6e\u3001\u5ffd\u7565\u65e0\u7528\u4f4d\u7f6e\u3001\u6c42\u524d\u7f00\u548c\u2026\u2026\u5b8c\u5168\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u8fd9\u90e8\u5206\u7684**\u601d\u8def\u8bb2\u89e3**\u4f1a\u504f\u5c11\uff0c\u4e3b\u8981\u4f1a\u7740\u773c\u4e8e\u7ebf\u6bb5\u6811**\u672c\u8eab\u7684\u64cd\u4f5c**\u548c\u7ec6\u5fae\u7684\u8c03\u6574\u3002\u5982\u679c\u7ebf\u6bb5\u6811\u7684\u57fa\u7840\u5f88\u597d\uff0c\u4e5f\u53ef\u4ee5\u53ea\u5927\u81f4\u8fc7\u4e00\u904d\u3002\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u5360\u7684\u7a7a\u95f4\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u6240\u6709\u7684\u6570\u7ec4\u90fd\u5f00\u4e86**\u56db\u500d**\u5927\u5c0f\uff0c\u4e0d\u8fd9\u6837\u505a\u4f1a$RE$\u6216\u8005$WA$\u6389\u3002\n\n\u7ebf\u6bb5\u6811\u7684\u8bdd\u76ee\u524d\u6211\u662f\u6ca1\u770b\u5230\u6709\u5176\u4ed6\u4eba\u8ddf\u6211\u5199\u6210\u4e00\u4e2a\u9b3c\u6837\u5b50\uff0c\u5927\u6982\u5c31\u662f\u4e0a\u6765\u4e09\u884c\u5b8f\uff0c\u540e\u9762\u5c31\u5f00\u59cb\u75af\u72c2\u8f93\u51fa\uff08?\n\n```cpp\n#define root 1,n,1 // \u6811\u6839\u7684\u5de6\u7aef\u70b9\u53f3\u7aef\u70b9\u4ee5\u53ca\u8282\u70b9\u7f16\u53f7\n#define lson l,mid,rt<<1 // \u8282\u70b9rt\u7684\u5de6\u513f\u5b50\uff0c\u5404\u53c2\u6570\u610f\u4e49\u540c\u4e0a\n#define rson mid+1,r,rt<<1|1 // \u7ed3\u70b9rt\u7684\u53f3\u513f\u5b50\uff0c\u5404\u53c2\u6570\u610f\u4e49\u540c\u4e0a\n```\n\n\u8fd9\u79cd\u5199\u6cd5\u6211\u4e2a\u4eba\u770b\u6765\u6bd4\u8f83\u6807\u51c6\u5316\u548c\u683c\u5f0f\u5316\uff0c\u7528\u5728\u51fd\u6570\u7684\u53c2\u6570\u91cc\u4e5f\u53ef\u4ee5\u51cf\u5c0f\u4e00\u70b9\u601d\u7ef4\u96be\u5ea6\u3002\u53ea\u662f\u8fd9\u6837\u5c31\u9650\u5236\u4e86\u53d8\u91cf\u7684\u547d\u540d\u5fc5\u987b\u662f`mid`\u548c`rt`\uff0c\u9700\u8981\u6ce8\u610f\u3002\u5e76\u4e14\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u4e86\u4e09\u4e2a\u56fa\u5b9a\u7684\u53c2\u6570`l`\uff0c`r`\uff0c`rt`\u7528\u4e8e\u683c\u5f0f\u5316\u64cd\u4f5c\u3002\n\n\u603b\u4e4b\u4e0b\u9762\u5c31\u662f\u5dee\u522b\u5e76\u4e0d\u592a\u5927\u7684\u51e0\u4e2a\u677f\u5b50\u51fd\u6570\uff0c\u56e0\u4e3a\u4f5c\u4e86\u4e00\u4e9b\u5fae\u8c03\u6240\u4ee5\u6211\u4eec\u6bcf\u4e2a\u90fd\u635e\u51fa\u6765\u8bb2\u8bb2\uff1a\n\n1. $update$\uff0cemmmm\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\u3002\n2. $build$\uff0c\u533a\u522b\u4e8e\u4e00\u822c\u7684\u5efa\u6811\u8fc7\u7a0b\uff0c\u8fd9\u4e2a$build$\u51fd\u6570\u7684\u76f4\u89c2\u4f5c\u7528\u5c31\u662f\u628a\u8282\u70b9`tar`\u7684\u503c\u6539\u4e3a`1`\uff0c\u76f8\u5f53\u4e8e\u6807\u8bb0\u4e00\u7c7b\u8d1d\u58f3\u7684**\u6700\u540e\u51fa\u73b0\u4f4d\u7f6e**\uff0c\u7528\u4e8e\u533a\u95f4\u6c42\u548c\u3002\n3. $modify$\uff0c\u540c\u6837\u533a\u522b\u4e8e\u4e00\u822c\u7684\u533a\u95f4\u4fee\u6539\uff0c\u8fd9\u4e2a$modify$\u7684\u76f4\u89c2\u4f5c\u7528\u4e5f\u4ec5\u4ec5\u662f\u628a`tar`\u8282\u70b9\u7684\u503c\u6539\u4e3a`0`\uff0c\u76f8\u5f53\u4e8e\u5bf9\u8be5\u4f4d\u7f6e\u4e0a\u7684\u8d1d\u58f3**\u5ffd\u7565**\u3002\n4. $query$\uff0c\u8fd9\u4e2a\u5c31\u662f\u4e00\u822c\u7684$query$\uff0c~~\u5de6\u8fb9\u641e\u4e00\u641e\u53f3\u8fb9\u641e\u4e00\u641e\u5de6\u53f3\u540c\u65f6\u641e\u4e00\u641e~~\u7136\u540e\u8f93\u51fa\u533a\u95f4\u548c\u5c31\u884c\u4e86\u3002\n\n**\u91cd\u70b9\u6765\u4e86\uff01**\u63a5\u4e0b\u6765\u8981\u8bb2\u7684\u5c31\u662f\u4e00\u4e2a`vector`**\u6570\u7ec4**\uff1a`vis[]`\u3002\u8fd9\u4e5f\u662f\u7ebf\u6bb5\u6811\u505a\u6cd5\u552f\u4e00\u533a\u522b\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u5730\u65b9\uff0c\u8fd9\u4e2a`vis[]`\u6570\u7ec4\u5e94\u8be5\u662f\u6574\u4e2a\u4ee3\u7801\u6700\u96be\u7406\u89e3\u7684\u90e8\u5206\u3002\u8fd9\u91cc\u5148\u653e\u4e24\u6bb5`vis[]`\u6570\u7ec4\u7684\u4f7f\u7528\u4ee3\u7801\uff1a\n\n```cpp\nsort(q+1,q+m+1,cmp);\nfor(rint i=1;i<=m;++i) vis[q[i].r].push_back(i); // \u786e\u5b9a\u6bcf\u4e00\u4e2a\u95ee\u9898\u7684\u8bbf\u95ee\u987a\u5e8f \n```\n\n```cpp\nfor(rint i=1;i<=n;++i)\n    // ...codes...\n\tfor(rint j=0;j<vis[i].size();++j){\n\t\tint tmp=vis[i][j];\n\t\tans[q[tmp].id]=query(root,q[tmp].l,q[tmp].r); // \u6309\u95ee\u9898\u7684\u539f\u5e8f(id)\u5b58\u597dans\n\t}\n```\n\n\u4e24\u6bb5\u4ee3\u7801\u5e76\u4e0d\u80fd\u8bf4\u660e\u4ec0\u4e48\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u5217\u4e00\u5f20\u6837\u8868\uff0c\u6765\u89e3\u91ca\u8fd9\u4e2a\u6570\u7ec4\u7684\u5de5\u4f5c\u539f\u7406\uff1a\n\n| vis[] |  1   |  2   |  3   |  4   |  5   |  6   | ...  |\n| :---: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n|  \u8bbf   |  1   |  3   |  4   |  7   |  9   |  13  | ...  |\n|  \u95ee   |  2   |      |  5   |  8   |  10  |  14  | ...  |\n|  \u987a   |      |      |  6   |      |  11  | ...  | ...  |\n|  \u5e8f   |      |      |      |      |  12  | ...  | ...  |\n\n\u8fd9\u5f20\u8868\u7684\u7b2c\u4e00\u884c\uff0c\u52a0\u7c97\u90e8\u5206\u662f\u6bcf\u4e2a`vector`\u6570\u7ec4\u7684**\u7f16\u53f7**\u3002\u6bcf\u4e00\u5217\u9664\u4e86\u7b2c\u4e00\u884c\u4e0b\u9762\u6302\u7740\u7684\u6570\u5b57\uff0c\u5c31\u4ee3\u8868\u7740\u6bcf\u4e00\u4e2a**\u8be2\u95ee**\u7684\u8bbf\u95ee\u987a\u5e8f\u3002\u8fd9\u5f20\u8868\u662f\u7531\u7b2c\u4e00\u6bb5\u4ee3\u7801\u751f\u6210\u7684\uff0c\u6309\u7167\u6392\u5e8f\u540e\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u4f5c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u8ba9\u4ee5\u70b9`q[i].r`\u4e3a\u53f3\u7aef\u70b9\u7684**\u8be2\u95ee\u533a\u95f4**\u6302\u5728\u4ee5\u8be5\u70b9\u4e3a\u7f16\u53f7\u7684`vector`\u91cc\uff0c\u4fbf\u4e8e\u7b2c\u4e8c\u6bb5\u4ee3\u7801\u8c03\u7528\u3002\u6b64\u65f6\u8fd9\u4e2a`vis[]`\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4\u5176\u5b9e\u5c31\u662f**\u70b9\u7684**\u7f16\u53f7\uff0c\u6bcf\u4e2a\u70b9\u4e0b\u9762\u6302\u7684\u6570\u5b57\u5c31\u662f\u6bcf\u4e2a**\u8be2\u95ee**\u7684**\u8bbf\u95ee\u987a\u5e8f**\u3002\u7b2c\u4e8c\u6bb5\u4ee3\u7801\u4e2d\u7684`...codes...`\u90e8\u5206\u8fdb\u884c\u7684\u662f**\u7ebf\u6bb5\u6811**\u64cd\u4f5c\uff0c\u5728\u6bcf\u4e2a\u70b9\u64cd\u4f5c\u5b8c\u6bd5\u65f6\u904d\u5386\u8be5\u70b9\u4e0b\u6302\u7684**\u8be2\u95ee**\u8bbf\u95ee\u987a\u5e8f\uff0c\u6309\u7167\u5176\u4fdd\u5b58\u7684**\u539f\u5e8f**\u5b58\u50a8`ans`\u6570\u7ec4\u3002\n\n\u8fd9\u786e\u5b9e\u6709\u4e9b\u96be\u7406\u89e3\uff0c\u800c\u4e14\u8bb2\u8d77\u6765\u4e5f\u5f88\u62d7\u53e3\uff0c\u6982\u5ff5\u4e5f\u5bb9\u6613\u6df7\u6dc6\u3002\u4f46\u662f\u5982\u679c\u7406\u89e3\u4e86\u4f1a\u975e\u5e38\u6709\u610f\u601d\uff0c\u5b9e\u5728\u4e0d\u884c\u53ef\u4ee5**\u624b\u52a8\u6a21\u62df**\u4e00\u4e0b\uff0c\u4fbf\u4e8e\u5f04\u6e05\u6bcf\u4e00\u6b65\u64cd\u4f5c\u7684\u542b\u4e49\u3002\n\n\u63a5\u4e0b\u6765\u6709\u4e2a`lst[]`\u6570\u7ec4\uff0c\u5176\u610f\u4e49\u53c2\u8003\u4e0a\u6587\u6811\u72b6\u6570\u7ec4\u601d\u8def\u4e2d\u7684`vis[]`\u6570\u7ec4\u3002\n\n\u7136\u540e\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u7528\u7ebf\u6bb5\u6811\u7684\u51fd\u6570\u5bf9\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u4e50\u8f93\u51fa\u7136\u540e`return 0`\u4e86\u3002\n\n### \u4e00\u4e2a\u610f\u5916\n\n`Upd on Nov.3`\n\n\u4e00\u89c9\u9192\u6765\u53d1\u73b0$rqy$\u8bc4\u8bba\u4e86\u6211\uff0c\u62ff\u8fc7\u6765\u770b\u770b\uff0c\u8bf4\u662f\u7ebf\u6bb5\u6811\u505a\u6cd5\u65e2\u7136\u5f00\u4e86`vis`\u6570\u7ec4\u5c31\u6ca1\u5fc5\u8981\u518d\u5bf9\u4e8e\u8be2\u95ee\u533a\u95f4\u6392\u5e8f\u4e86\u3002\u7a81\u7136\u53d1\u73b0\u8fd9\u4e00\u884c\u6392\u5e8f\u5176\u5b9e\u662f\u590d\u5236\u6811\u72b6\u6570\u7ec4\u4ee3\u7801\u65f6\u5019\u65e0\u610f\u95f4\u5fd8\u4e86\u5220\u9664\u7684\uff0c\u56e0\u4e3a`vis`\u6570\u7ec4\u5b9e\u9645\u4e0a\u5b9e\u73b0\u4e86\u8ddf\u6392\u5e8f\u4e00\u6837\u7684\u4f5c\u7528\uff0c\u518d\u6392\u4e00\u904d\u5176\u5b9e\u6ca1\u5fc5\u8981\u3002\u4f46\u662f\u5f88\u5947\u5999\u7684\u4e8b\u60c5\u51fa\u73b0\u4e86\uff0c\u5f53\u6211\u5220\u9664\u4e86\u8fd9\u884c`sort`\u540e\uff0c\u4ea4\u4e0a\u53bb**T**\u4e86\u4e24\u4e2a\u70b9\u2026\u2026\uff08\u4e0d\u5438\u6c27\uff09\n\n**\u201c\u6ca1\u9053\u7406\u554a\uff0c\u5e94\u8be5\u66f4\u5feb\u624d\u5bf9\u554a\uff0c\u8fd9\u53ef\u5c11\u4e86\u4e00\u4e2a$sort$\u554a\u3002\u201d**\n\n\u4ee5\u4e0b\u662f\u4e0e$rqy$\u7684\u8bb0\u5f55\uff1a\n\n-------\n\n`rqy` \u53ef\u80fd\u662f\n\n`rqy` cache\u76f8\u5173\uff1f\n\n`Maplef` **\u566b**\uff08\n\n`rqy` \u5c31\u662f\u4f60\u539f\u672c\u90a3\u6837\u4f1a**\u8fde\u7eed\u63d2\u5165\u5230\u540c\u4e00\u4e2a**vector\u91cc\n\n`Maplef` \u55ef\u5bf9\n\n`rqy` \u7406\u8bba\u4e0a\u6765\u8bf4\u662f\u66f4\u5feb\u7684\n\n`Maplef` \u54e6\u610f\u601d\u5c31\u662f\u8bf4\n\n`Maplef` \u6bcf\u6b21\u63d2\u5165\u5230\u4e0d\u540c\u7684vector\u91cc\u8017\u65f6\u4f1a\u591a\u2026\u2026\uff1f\n\n`Maplef` \u4e0d\u5bf9\u554a\u2026\u2026\n\n`Maplef` \u8fd9\u8ddf\u8017\u65f6\u591a\u5c11\u6709\u5f88\u5927\u5173\u7cfb\u5417qaq\n\n`rqy` \u662f\u8bf4\n\n`rqy` \u5c31\u662f\n\n`rqy` \u4f60\u64cd\u4f5c\u4e00\u6bb5\u5185\u5b58\u7684\u65f6\u5019\u5c31\u4f1a\u628a\u5b83\u52a0\u8f7d\u5230**\u7f13\u5b58**\u91cc\n\n`rqy` \u6240\u4ee5\u53cd\u590d**\u8df3\u6765\u8df3\u53bb**\u662f\u6bd4\u8fde\u7eed\u8bbf\u95ee\u6162\u4e0d\u5c11\u7684\n\n`rqy` \u4f46\u6211\u6ca1\u60f3\u5230\u8fd9\u4e2a\u65f6\u95f4\u5dee**\u8d85\u8fc7\u4e00\u4e2asort**\n\n`Maplef` wua\u2026\u2026\n\n`Maplef` \u5c45\u7136\u8fd9\u6837\n\n`Maplef` \u5bf9\u554a\n\n`rqy` \u561b\n\n`Maplef` \u6211\u4e5f\u89c9\u5f97\u5b83\u4e0d\u8be5\u6bd4sort\u6162\n\n`Maplef` qwq\n\n`Maplef` \u600e\u4e48\u8fd9\u6837\n\n---------\n\n\u8fd9\u4e2a\u95ee\u9898\u73b0\u5728\u81ea\u5df1\u4e5f\u641e\u4e0d\u660e\u767d\uff0c\u53ea\u80fd\u8bf4\u8bef\u6253\u8bef\u649e\u591a\u5199\u4e86\u4e2a`sort`\u514d\u4e8e\u8d85\u65f6\uff0c\u6240\u4ee5\u628a\u5b83\u5f52\u5728\u201c\u4e00\u4e2a\u610f\u5916\u201d\u91cc\u3002\u6ca1\u60f3\u5230\u8df3\u8dc3\u8bbf\u95ee\u4e0d\u540c\u7684`vector`\u8017\u65f6\u6bd4\u4e00\u4e2a`sort`\u8fd8\u8981\u591a\uff0c\u8fd9\u4e5f\u8bb8\u53ef\u4ee5\u6210\u4e3a\u5199\u7a0b\u5e8f\u7684\u4e00\u4e2a\u6ce8\u610f\u70b9\uff1a\u5728\u9891\u7e41\u8bbf\u95ee**\u4e0d\u540c\u6bb5\u5185\u5b58**\u7684\u65f6\u5019\uff0c\u4e0d\u59a8\u53ef\u4ee5\u8003\u8651\u5c06\u8bbf\u95ee\u987a\u5e8f**\u91cd\u65b0\u6392\u5e8f**\uff0c\u4ee5\u907f\u514d\u66f4\u591a\u7684\u8017\u65f6\u3002\n\n### \u603b\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#define rint register int\n#define maxn 1000010\n\n#define root 1,n,1\n#define lson l,mid,rt<<1\n#define rson mid+1,r,rt<<1|1\nusing namespace std;\n\nint n,m;\nint a[maxn<<2],lst[maxn<<2];\nint tree[maxn<<2],ans[maxn<<2];\nvector<int> vis[maxn<<2];\n\nstruct QUE{\n\tint l;\n\tint r;\n\tint id;\n}q[maxn<<3];\n\ninline void read(int &x){\n\tchar ch=getchar();int f=1;x=0;\n\twhile(!isdigit(ch) && ch^'-') ch=getchar();\n\tif(ch=='-') f=-1,ch=getchar();\n\twhile(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n\tx*=f;\n}\n\ninline bool cmp(const QUE &a,const QUE &b){\n\treturn a.r<b.r;\n}\n\nvoid update(int rt){\n\ttree[rt]=tree[rt<<1]+tree[rt<<1|1];\n}\n\nvoid build(int l,int r,int rt,int tar){\n\tif(l==r && l==tar){\n\t\ttree[rt]=1; return;\n\t}\n\tint mid=(l+r)>>1;\n\tif(tar<=mid) build(lson,tar);\n\telse build(rson,tar);\n\tupdate(rt);\n}\n\nvoid modify(int l,int r,int rt,int tar){\n\tif(l==r && l==tar){\n\t\ttree[rt]=0; return;\n\t}\n\tint mid=(l+r)>>1;\n\tif(tar<=mid) modify(l,mid,rt<<1,tar);\n\telse modify(mid+1,r,rt<<1|1,tar);\n\tupdate(rt);\n}\n\nint query(int l,int r,int rt,int nowl,int nowr){\n\tif(l==nowl&&r==nowr) return tree[rt];\n\tint mid=(l+r)>>1;\n\tif(nowr<=mid) return query(lson,nowl,nowr);\n\telse if(mid<nowl) return query(rson,nowl,nowr);\n\telse return query(lson,nowl,mid)+query(rson,mid+1,nowr);\n}\n\nint main(){\n\tread(n);\n\tfor(rint i=1;i<=n;++i) read(a[i]);\n\tread(m);\n\tfor(rint i=1;i<=m;++i){\n\t\tread(q[i].l); read(q[i].r);\n\t\tq[i].id=i;\n\t}\n\t\n\tsort(q+1,q+m+1,cmp);\n\tfor(rint i=1;i<=m;++i) vis[q[i].r].push_back(i);\n\n\tfor(rint i=1;i<=n;++i){\n\t\tif(!lst[a[i]]){\n\t\t\tlst[a[i]]=i;\n\t\t\tbuild(root,i);\n\t\t}\n\t\telse{\n\t\t\tmodify(root,lst[a[i]]);\n\t\t\tlst[a[i]]=i;\n\t\t\tbuild(root,i);\n\t\t}\n\t\t\n\t\tfor(rint j=0;j<vis[i].size();++j){\n\t\t\tint tmp=vis[i][j];\n\t\t\tans[q[tmp].id]=query(root,q[tmp].l,q[tmp].r);\n\t\t}\n\t}\n\t\n\tfor(rint i=1;i<=m;++i)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n### \u5c0f\u7ed3\n\n\u7ebf\u6bb5\u6811\u7801\u91cf\u662f\u5927\u4e86\u70b9\uff0c\u4f46\u662f\u652f\u6301**\u66f4\u591a\u7684\u64cd\u4f5c**~~\uff08\u4e5f\u66f4\u6162\uff09~~\uff0c\u62ff\u6765\u7ec3\u7ec3\u6811\u72b6\u6570\u7ec4\u7684\u9898\u76ee\u5012\u4e5f\u672a\u5c1d\u4e0d\u53ef\u3002\u53ea\u662f\u8981\u6ce8\u610f\u533a\u522b\u548c\u7406\u89e3\u4e24\u79cd\u65b9\u6cd5\u91cc\u4e0d\u540c\u7684\u64cd\u4f5c\uff1a\u4e00\u4e2a\u7528`pow`\u6765\u6307\u5411\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u7528`vis[]`\u6570\u7ec4\u4e8b\u5148\u5b58\u597d\u8bbf\u95ee\u987a\u5e8f\u3002\u4e24\u79cd\u505a\u6cd5\u56e0\u4e2a\u4eba\u559c\u597d\u800c\u5b9a\uff0c\u5199\u51fa\u4e0d\u540c\u7684\u64cd\u4f5c\u4e00\u6765\u662f\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u4e4b\u5acc\uff0c\u4e8c\u6765\u4e5f\u5e0c\u671b\u53ef\u4ee5\u7ed9\u5404\u4f4d\u5e26\u6765\u66f4\u5e7f\u9614\u7684\u601d\u8003\u7a7a\u95f4\u3002\n\n## \u9e23\u8c22\n\n`_rqy`\u63d0\u4f9b\u7684\u65b0\u601d\u8def\u4ee5\u53ca\u5f15\u51fa\u7684\u65b0\u95ee\u9898\u3002\n\n## \u5199\u5728\u540e\u9762\n\n\u672c\u6587\u5728\u6df1\u591c\u5199\u5c31\uff0c\u65f6\u95f4\u6709\u4e9b\u4ed3\u4fc3\uff0c\u8bb2\u89e3\u7684\u5185\u5bb9\u4e5f\u6216\u8bb8\u873b\u8713\u70b9\u6c34\u3002\u5982\u6709\u8bb2\u7684\u4e0d\u660e\u767d\u6216\u8005\u9519\u8bef\uff08\u9519\u5b57\uff09\u7684\u5730\u65b9\u6073\u8bf7\u79c1\u4fe1\u6211\u6216\u8bc4\u8bba\u6307\u51fa\u3002\n\n\u653e\u4e00\u7bc7\u4ee5\u524d\u7684\u89e3\u9898\u62a5\u544a\uff1a[\u65f6\u95f4\u590d\u6742\u5ea6 \u89e3\u9898\u62a5\u544a](https://www.luogu.org/blog/yexiaofeng/shi-jian-fu-za-du-xie-ti-bao-gao)\u3002\n\n>  \u6700\u540e\u611f\u8c22\u4f60\u80fd\u591f\u770b\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u4e00\u8d77\uff0c\u4e3a\u4e86\u672a\u6765\u7684\u6240\u6709\u3002\n\n",
        "postTime": 1572713326,
        "uid": 72088,
        "name": "\u53f6\u5c0f\u67ab",
        "ccfLevel": 0,
        "title": "HH\u7684\u9879\u94fe \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u4e0a\u9762\u4e5f\u662f\u4e3b\u5e2d\u6811\u9898\u89e3\uff0c\u4e0d\u8fc7\u5199\u7684\u771f\u7684\u8ba9\u4eba\u770b\u4e0d\u61c2\u3002\u6211\u518d\u5199\u4e00\u7bc7\u3002\n\nlast[i]\u8868\u793a\u4e0a\u4e00\u4e2a\u989c\u8272\u4e3ai\u7684\u6570\uff0c\u6ca1\u6709\u5219\u4e3a0\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u533a\u95f4\u91cc\u7684\u7b54\u6848\u5c31\u663e\u800c\u6613\u89c1\u4e86\uff1a\n\n$\\sum_{i=l}^r (last[i]<l)$\n\n\n\u4e0a\u9762\u7684\u4e1c\u897f\u5df2\u7ecf\u5f88\u597d\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u4e86\u3002\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u6211\u89c9\u5f97\u4e5f\u4e0d\u9700\u8981\u8bc1\u660e\u4e86\u3002\n\n\uff08\u6811\u72b6\u6570\u7ec4\uff1a\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7684\u4f60\u6ca1\u4e8b\u5957\u6211\u5e72\u5565\uff1f\uff09\n\n```cpp\n// It is made by XZZ\n#include<cstdio>\n#include<algorithm>\n#define il inline\n#define rg register\n#define vd void\n#define sta static\ntypedef long long ll;\nil int gi(){\n    rg int x=0,f=1;rg char ch=getchar();\n    while(ch<'0'||ch>'9')f=ch=='-'?-1:f,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nconst int maxn=50011;\nint n;\nnamespace BITSegtree{\n#define mid ((l+r)>>1)\n    int rt[maxn],ls[maxn*100],rs[maxn*100],sum[maxn*100],index;\n    il vd _update(int&x,int l,int r,const int&p,const int&k){\n        if(!x)x=++index;sum[x]+=k;if(l==r)return;\n        if(p<=mid)_update(ls[x],l,mid,p,k);\n        else _update(rs[x],mid+1,r,p,k);\n    }\n    il int _query(int x,int l,int r,const int&L,const int&R){\n        if( !x || r<L || R<l )return 0;if( L<=l && r<=R )return sum[x];\n        return _query(ls[x],l,mid,L,R)+_query(rs[x],mid+1,r,L,R);\n    }\n    il int lb(const int&x){return x&-x;}\n    il vd Update(int x,int y){while(x<=n)_update(rt[x],1,n+1,y+1,1),x+=lb(x);}\n    il int Query(int l,int r,int x,int y){\n        sta int ret;ret=0;\n        while(r)ret+=_query(rt[r],1,n+1,x+1,y+1),r-=lb(r);\n        --l;while(l)ret-=_query(rt[l],1,n+1,x+1,y+1),l-=lb(l);\n        return ret;\n    }\n}\nint lst[1000001];\nint main(){\n    freopen(\"diff.in\",\"r\",stdin);\n    freopen(\"diff.out\",\"w\",stdout);\n    using namespace BITSegtree;\n    n=gi();int k;\n    for(rg int i=1;i<=n;++i)k=gi(),Update(i,lst[k]),lst[k]=i;\n    int l,r,m=gi();\n    while(m--)l=gi(),r=gi(),printf(\"%d\\n\",Query(l,r,0,l-1));\n    return 0;\n}\n```",
        "postTime": 1514019046,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "## \u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u5185\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\n\n###  \u5b9a\u4e49\n\n> \u5b9a\u4e49$sum[pos]$\u8868\u793a$pos$\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4$[$L$, $R$]$\u4e2d\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\uff0c\n> \u5b9a\u4e49$L[pos]$\u8868\u793a$pos$\u8fd9\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u7684\u5de6\u8fb9\u754c\uff0c$R[pos]$\u540c\u7406\u3002\n\n### \u66f4\u65b0\u7ebf\u6bb5\u6811\u7684\u529e\u6cd5\n\n> \u5efa\u7acbn \u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u662f\u4ee5\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u4e3a\u6839\uff0c \u5efa\u7acb\u7b2c$i$\u4e2a\u7ebf\u6bb5\u6811\u65f6\uff0c\u5982\u679c\u6570\u5b57$a[i]$\u4e4b\u524d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u4ee5\u4f4d\u7f6e$i$\u4e3a\u5212\u5206\u4f9d\u636e\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5305\u542b\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u52a01\u5373\u53ef\uff0c\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u4e0a\u53c8\u591a\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u6570\u3002\n\n> \u4f46\u662f\u5982\u679c\u6570\u5b57$a[i]$\u51fa\u73b0\u8fc7\u4e86\uff0c\u6211\u4eec\u5148\u6c42\u51fa\u4e0a\u4e00\u4e2a\u540c\u6837\u6570\u5728\u54ea\u91cc\u51fa\u73b0\uff0c\u6211\u4eec\u5c31\u5728\u7b2ci \u4e2a\u7ebf\u6bb5\u6811\u4e0a\u4ee5\u90a3\u4e2a\u540c\u6837\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a\u5212\u5206\u4f9d\u636e\u7ed9\u5b83\u51cf\u53bb1\uff0c\u5728\u5728\u7b2c$i$\u4e2a\u7ebf\u6bb5\u6811\u4e0a \u5305\u542b\u4f4d\u7f6e\u7684$i$\u7684\u533a\u95f4\u52a01\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4fdd\u8bc1\u4e86 \u533a\u95f4\u4e2d\u6570\u5b57\u4e0d\u91cd\u590d\uff0c\u53ea\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u3002\n\n***\n\n\tint update(int pre, int idx, int v, int l, int r) {\n\t\tint pos = ++ tot;\n\t\tL[pos] = L[pre]; R[pos] = R[pre]; sum[pos] = sum[pre] + v;\n\t\tif (l < r) {\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (idx <= mid) L[pos] = update(L[pre], idx, v, l, mid);\n\t\t\t\t \t  else R[pos] = update(R[pre], idx, v, mid + 1, r);\n\t\t}\n\t\treturn pos;\n}\n\t\t\n***\n\n> \u4e0a\u9762\u5c31\u662f$update$\u51fd\u6570\u4e86\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u628a\u65b0\u7684\u7ebf\u6bb5\u6811\u5728\u7ee7\u627f\u4e0a\u4e00\u4e2a\u7ebf\u6bb5\u6811$pre$\u7684\u540c\u65f6\uff0c\u5728\u65b0\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u5305\u542b$idx$\u7684\u8282\u70b9\u4e0a\u7684\u503c\u52a0\u4e0a$v$\u3002$v$\u7684\u503c\u53ef\u4ee5\u662f\n$1$\u6216-$1$\u3002 \u5e26\u4e0a$v$\u8fd9\u4e2a\u53c2\u6570\u6709\u52a9\u4e8e\u5199\u4ee3\u7801\n\n### \u67e5\u8be2\u7b54\u6848\u7684\u529e\u6cd5\n\n> \u5047\u8bbe\u8981\u67e5\u8be2$[L,R]$\u8fd9\u4e2a\u533a\u95f4\u4e0a\u4e0d\u540c\u6570\u7684\u4e2a\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4ee5$L$\u4e3a\u5212\u5206\u4f9d\u636e\uff0c\u5728\u7b2cR\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u67e5\u8be2\u3002\u5f53\u9700\u8981\u5f80\u5de6\u9012\u5f52\u8ba1\u7b97\u65f6\uff0c\u53f3\u8fb9\u7684\u533a\u95f4\u4e00\u5b9a\u662f\u5b8c\u6574\u5305\u542b\u5728\u6211\u4eec\u9700\u8981\u67e5\u8be2\u7684\u533a\u95f4\u7684$[L,R]$\uff08\u56e0\u4e3a\u6211\u4eec\u662f\u5728\u7b2c$R$\u9897\u7ebf\u6bb5\u6811\u4e0a\u9762\u67e5\u8be2\uff0c\u533a\u95f4$[R+1,n]$\u7684\u4fe1\u606f\u6ca1\u6709\u52a0\u5165\u5230\u7b2cR\u9897\u7ebf\u6bb5\u6811\u4e0a\uff09\uff0c\u6211\u4eec\u76f4\u63a5\u52a0\u4e0a\u53f3\u533a\u95f4\u7684sum\u5373\u53ef\u3002\u5047\u5982\u9700\u8981\u5f80\u53f3\u533a\u95f4\u9012\u5f52\uff0c\u90a3\u4e48\u76f4\u63a5\u9012\u5f52\u5c31\u597d\u4e86\uff0c\u5de6\u8fb9\u7684$sum$\u4e0d\u7528\u52a0\u4e0a\uff0c\u56e0\u4e3a\u5de6\u8fb9\u533a\u95f4\u4e2d$[1,L+1]$\u662f\u5728\u7b2cR\u9897\u7ebf\u6bb5\u6811\u79cd\u7684\u3002\n\u8fd9\u6837\u5904\u7406\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5b8c\u6574\u533a\u95f4[L,R]\u4e0a\u4e0d\u540c\u6570\u7684\u4e2a\u6570\u3002\n\n***\n\n\tint query(int idx, int pre, int l, int r) {\n\t\tif (l == r) return sum[pre];\n\t\tint mid = (l + r) >> 1;\n\t\tif (idx <= mid) return query(idx, L[pre], l, mid) + sum[R[pre]];\n\t\t\telse return query(idx, R[pre], mid + 1, r);\n\t}\n***\n\n> \u4ee5\u4e0a\u5c31\u662f\u67e5\u8be2\u7684\u51fd\u6570\u4e86\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5b9e\u73b0\u6211\u4eec\u4e0a\u8ff0\u7684\u65b9\u6cd5\u3002\u4e0b\u9762\u7ed9\u51fa\u5b8c\u6574\u4ee3\u7801\uff0c\u672c\u4ee3\u7801\u4ee5 \u6d1b\u8c37P1972[SDOI2009]HH\u7684\u9879\u94fe\u4e3a\u4f8b\n\n***\n\t#include<bits/stdc++.h>\n\tusing namespace std;\n\t\n\t\tconst int maxn = 500000 + 5;\n\t\tconst int maxm = maxn * 40;\n\n\t\tint n, a[maxn], rt[maxn];\n\t\tint L[maxm], R[maxm], sum[maxm], tot = 0;\n\t\tint la[maxn + maxn + 1];\n\n\t\tint build(int l, int r) {\n\t\t\tint pos = ++ tot; sum[pos] = L[pos] = R[pos] = 0;\n\t\t\tif (l < r) {\n\t\t\t\tint mid = (l + r) >> 1;\n\t\t\t\tL[pos] = build(l, mid);\n\t\t\t\tR[pos] = build(mid + 1, r);\n\t\t\t}\n\t\t\treturn pos;\n\t\t}\n\n\t\tint update(int pre, int idx, int v, int l, int r) {\n\t\t\tint pos = ++ tot;\n\t\t\tL[pos] = L[pre]; R[pos] = R[pre]; sum[pos] = sum[pre] + v;\n\t\t\tif (l < r) {\n\t\t\t\tint mid = (l + r) >> 1;\n\t\t\t\tif (idx <= mid) L[pos] = update(L[pre], idx, v, l, mid);\n\t\t\t\t   else R[pos] = update(R[pre], idx, v, mid + 1, r);\n\t\t\t}\n\t\t\treturn pos;\n\t\t}\n\n\t\tint query(int idx, int pre, int l, int r) {\n\t\t\tif (l == r) return sum[pre];\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (idx <= mid) return query(idx, L[pre], l, mid) + sum[R[pre]];\n\t\t\t\telse return query(idx, R[pre], mid + 1, r);\n\t\t}\n\n\t\tint main(void) {\n\t\t\tscanf(\"%d\", &n);\n\t\t\tfor (int i = 1; i <= n; ++ i) scanf(\"%d\", &a[i]);\n\t\t\tmemset(la, -1, sizeof(la));\n\t\t\trt[0] = build(1, n);\n\t\t\tfor (int i = 1; i <= n; ++ i) {\n\t\t\t\tint v = a[i];\n\t\t\t\tif (la[v] == -1) {\n\t\t\t\trt[i] = update(rt[i - 1], i, 1, 1, n);\n\t\t\t} else {\n\t\t\t\tint t = update(rt[i - 1], la[v], -1, 1, n);\n\t\t\t\trt[i] = update(t, i, 1, 1, n);\t\t\n\t\t\t}\t\n\t\t\t\tla[v] = i;\n\t\t\t}\n\t\n\t\t\tint T; scanf(\"%d\", &T);\n\t\t\twhile (T --) {\n\t\t\t\tint x, y; scanf(\"%d%d\", &x, &y);\n\t\t\t\tcout << query(x, rt[y], 1, n) << endl;\n\t\t\t}\n\t\t\n\t\t\treturn 0;\n\t\t}\n***\n\n",
        "postTime": 1531385629,
        "uid": 34910,
        "name": "\u91cd\u56de\u5dc5\u5cf0\uff01",
        "ccfLevel": 0,
        "title": "\u4e3b\u5e2d\u68111.1:\u6c42\u533a\u95f4\u5185\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570"
    },
    {
        "content": "\u542c\u8bf4\u52a0\u5f3a\u6570\u636e\u72c2\u9b54chen_zhe\u52a0\u5f3a\u4e86\u6570\u636e\n\n\u6211\u5f53\u7136\u9009\u62e9\u7ee7\u7eed\u7528\u83ab\u961f\u5199\u554a\n\n\u6b63\u5e38\u83ab\u961f80\u5206\uff0c\u8fd9\u8fb9\u52a0\u4e00\u4e9b\u4f18\u5316\u5373\u53ef\n\n\u5f53a\u4e0eb\u7684\u5757\u76f8\u540c\u65f6\uff0c\u5982\u679c\u662f\u5947\u6570\u5757\u6309r\u4ece\u5c0f\u5230\u5927\uff0c\u5426\u5219\u4ece\u5927\u5230\u5c0f\n\n\u6781\u9650\u957f\u5ea6/2\n\n\u53e6\u5916\uff0c\u56e0\u4e3a\u540e\u9762\u7684\u6570\u636e\u53ef\u80fd\u662f\u7279\u610f\u5361\u83ab\u961f\n\n\u6240\u4ee5\u53ef\u4ee5\u8c03\u6574\u5757\u5927\u5c0f\u4e3a\u5e38\u6570\uff08\u8fd9\u4e2a\u6211\u6ca1\u8bd5\n\n\u8981\u5584\u4e8e\u8fd0\u7528register inline\u7b49\u6570\u636e\n\n\u5584\u4e8e\u5408\u5e76\u8bed\u53e5 \u5982 ans+=(++tong[num[x]]==1)\n\n\u8fd9\u6837\u5f00\u4e0ao2\u5373\u53ef\u7528\u83ab\u961f\u6709\u51e0\u7387\u5e72\u6389\u52a0\u5f3a\u7684\u6570\u636e\n\nhttps://www.luogu.org/recordnew/show/7220178\n\n\u6b64\u4e3aac\u60c5\u51b5\u3002\n\n\u4e0d\u8fc7\u6211\u673a\u623f\u7684\u4eba\u5c1d\u8bd5\u7528\u6211\u7684\u7a0b\u5e8f\u4f3c\u4e4e\u6709\u4e9b\u4ebatle\u4e86\u3002\n\n\u53ef\u80fd\u8fd9\u770b\u8138\u7684\u5427\uff08\u9003\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <set>\n#define ll long long\n#define N 500005\n#define inf 1000000005\n#define mod 1000000007\n#include <map>\n#define put putchar('\\n')\n#define re register \nusing namespace std;\ninline int read(){char c=getchar();int tot=1;while ((c<'0'|| c>'9')&&c!='-') c=getchar();if (c=='-'){tot=-1;c=getchar();}\nint sum=0;while (c>='0'&&c<='9'){sum=sum*10+c-'0';c=getchar();}return sum*tot;}\ninline void wr(int x){if (x<0) {putchar('-');wr(-x);return;}if(x>=10)wr(x/10);putchar(x%10+'0');}\ninline void wrn(int x){wr(x);put;}inline void wri(int x){wr(x);putchar(' ');}\nint c[N],tong[1000005],n,m,s,l,r;\nint t,num;\nstruct xx{\n    int l1,l,r,i;\n    int ans1;\n}z[N];\nbool cmp(xx a,xx b){\n    return a.l1==b.l1?(a.l1&1)?a.r<b.r:a.r>b.r:a.l1<b.l1;\n}\ninline void add(int x){\n\tnum+=(++tong[c[x]]==1);\n}\ninline void dec(int x){\n\tnum-=(--tong[c[x]]==0);\n}\nbool cmp2(xx a,xx b){\n    return a.i<b.i;\n}\nint main(){\n    //freopen(\".in\",\"r\",stdin);freopen(\".out\",\"w\",stdout);\n    n=read();\n    for (int i=1;i<=n;i++) c[i]=read();\n    s=sqrt(n);m=read();\n    for (int i=1;i<=m;i++){\n        z[i].l=read();z[i].r=read();z[i].l1=z[i].l/s;z[i].i=i;\n    }\n    sort(z+1,z+m+1,cmp);\n    re int l=0,r=0;\n    for (int i=1;i<=m;i++){\n        while (r<z[i].r) add(++r);\n        while (r>z[i].r) dec(r--);\n        while (l>z[i].l) add(--l);\n        while (l<z[i].l) dec(l++);\n        z[i].ans1=num;\n    }\n    sort(z+1,z+m+1,cmp2);\n    for (int i=1;i<=m;i++){\n    \twrn(z[i].ans1);\n    }\n    return 0;\n}\n```",
        "postTime": 1525962129,
        "uid": 11837,
        "name": "yukuai26",
        "ccfLevel": 0,
        "title": "\u83ab\u961f\u5361\u5e38"
    },
    {
        "content": "**\u66f4\u65b0\uff1a**\n\u672c\u4eba\u9000\u5f79\u4e24\u5e74\uff0c\u4eca\u5df2\u8fdb\u5165\u5927\u5b66\uff0c\u56de\u6765\u5ffd\u7136\u770b\u5230\u81ea\u5df1\u66fe\u7ecf\u53d1\u7684\u9898\u89e3\u5352\u4e8e\u6570\u636e\u52a0\u5f3a\uff0c\u611f\u8c22\u5927\u5bb6\u7684\u63d0\u9192\uff01\u8fd9\u7bc7\u9898\u89e3\u5927\u5bb6\u5c31\u5f5370\u5206\u505a\u6cd5\u770b\u770b\u7f62\u3002\u6211\u5f53\u65f6\u8fd8\u6709\u4e00\u4e2a\u7528\u4e3b\u5e2d\u6811\u7684\u5728\u7ebf\u505a\u6cd5\uff0c\u5e94\u8be5\u662f\u7a33\u8fc7\u7684\uff0c\u53d1\u8868\u5728\u6211\u7684CSDN\u535a\u5ba2\u4e0a\uff0c\u5927\u5bb6\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u53bb\u770b\u770b\uff08\u4e2a\u4eba\u8ba4\u4e3a\u6211\u7684\u4ee3\u7801\u98ce\u683c\u8fd8\u662f\u5f88nice\u7684OvO\uff09\u3002\n\u9644\u4e0a\u94fe\u63a5\uff1ahttps://blog.csdn.net/Monkey_king2017cn/article/details/70173048?utm_source=app\n\n\n\u4ee5\u4e0b\u4e3a\u539f\u56de\u7b54\n\n------------\n\u8fd9\u9053\u9898\u6211\u7528\u79bb\u7ebf\u65b9\u6cd5\u6c34\u8fc7\u7684\uff0c\uff0c\uff0c\n\n\u5148\u628a\u7f16\u53f7\u79bb\u6563\u5316\uff0c \u7136\u540e\u5c06\u6240\u6709\u7684\u8be2\u95ee\u533a\u95f4\u6392\u5e8f\uff0c \u7528\u4e00\u4e2al, r\u6765\u8bb0\u5f55\u626b\u63cf\u5230\u7684\u533a\u95f4\uff0csum\u8bb0\u5f55[l, r]\u4e2d\u4e0d\u540c\u7f16\u53f7\u4e2a\u6570\uff0c \u7528p[50000]\u6765\u8bb0\u5f55\u6bcf\u4e2a\u7f16\u53f7\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u6b21\u6570\n\n\u6bcf\u6b21r++\u7684\u65f6\u5019\u5728p[]\u91cc\u9762\u52a0\u4e00\u4e0b\uff0c \u518d\u5224\u65adsum\u662f\u5426\u8981\u52a0\uff0c l++\u548cr--\u7684\u65f6\u5019\u4e5f\u8981\u5224\u65ad\n\n\u55ef\uff0c \u7136\u540e\u5c31\u8fc7\u4e86\n\n\n\n\n\n\n\n\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<cstdio>\n#define maxn 50005\n#define For(a, b, c) for(a = b; a <= c; ++a)\nusing namespace std;\nint n, m, id[maxn], ans[200010];\nint p[maxn], cnt;\nstruct B{\n    int c, id;\n}a[maxn];\nstruct que{\n    int l, r, id;\n}q[200010];\nint read(){\n    char x;\n    while((x = getchar()) > '9' || x < '0') ;\n    int u = x - '0';\n    while((x = getchar()) <= '9' && x >= '0') u = (u << 3) + (u << 1) + x - '0';\n    return u;\n}\nbool cmp1(B a, B b){ return a.c < b.c; }      //\u7f16\u53f7\u6392\u5e8f\nbool cmp2(que a, que b){                  //\u8be2\u95ee\u6392\u5e8f\n    if(a.l == b.l) return a.r < b.r;\n    return a.l < b.l;\n}\nvoid pre(){                       //\u9884\u5904\u7406\n    int i;\n    sort(q + 1, q + m + 1, cmp2);\n    sort(a + 1, a + n + 1, cmp1);\n    For(i, 1, n) id[a[i].id] = (a[i].c == a[i - 1].c) ? cnt : ++cnt;       //\u8003\u8651\u76f8\u540c\u7f16\u53f7\n}\nvoid solve(){\n    int l = 1, r = 1, sum = 1, now = 1;\n    ++p[id[1]];\n    while(now <= m){                        //\u89e3\u51b3\u95ee\u9898\n        while(r < q[now].r) if(++p[id[++r]] == 1) ++sum;\n        while(l < q[now].l) if(!--p[id[l++]]) --sum;\n        while(r > q[now].r) if(!--p[id[r--]]) --sum;\n        ans[q[now++].id] = sum;                //\u8bb0\u5f55\u7b54\u6848\n    }\n}\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"L.in\", \"r\", stdin);\n    freopen(\"L.out\",\"w\",stdout);\n#endif\n    int i;\n    n = read();\n    For(i, 1, n) a[i].c = read(), a[i].id = i;\n    m = read();\n    For(i, 1, m) q[i].l = read(), q[i].r = read(), q[i].id = i;\n    pre();\n    solve();\n    For(i, 1, m) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1492135059,
        "uid": 19683,
        "name": "Till_Gloam",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u6811\u72b6\u6570\u7ec4\u79bb\u7ebf\u5316\u3002\n\n\u4e0d\u96be\u60f3\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a[l,r]\u7684\u533a\u95f4\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u591a\u4e2a\u76f8\u540c\u7684\u989c\u8272\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u5173\u5fc3\u5728\u533a\u95f4[l,r]\u4e2d\uff0c\u8be5\u989c\u8272\u6700\u540e\u4e00\u4e2a\u8d1d\u58f3\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5f62\u5982{1,2,3,2,1}\u7684\u9879\u94fe\uff0c\u5f53\u6211\u4eec\u8be2\u95ee\u533a\u95f4[1,5]\u65f6\uff0c\u8be5\u9879\u94fe\u7b49\u540c\u4e8e{0,0,3,2,1}\uff08\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd9\u91cc\u75280\u8868\u793a\u7a7a\uff09\u3002\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u4ee5\u4e0b\u7684\u601d\u8def\uff1a\u5f53\u8be2\u95ee[l,r]\u65f6\uff0c\u7b54\u6848\u5373\u4e3a\u533a\u95f4[l,r]\u5185\u65b0\u51fa\u73b0\u7684\u8d1d\u58f3\u7684\u4e2a\u6570\u3002\n\n\u663e\u800c\u6613\u89c1\uff0c\u5f53\u65b0\u7684\u8d1d\u58f3\u51fa\u73b0\u65f6\uff0c\u539f\u6765\u7684\u540c\u8272\u8d1d\u58f3\u90fd\u4f1a\u5931\u6548\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5bf9\u4e8e{1,2,3,2,1}\u8fd9\u4e2a\u9879\u94fe\uff0c\u5f53\u6211\u4eec\u8be2\u95ee[1,5]\u65f6\uff0c\u7b54\u6848\u662f3\uff1b\u5f53\u6211\u4eec\u8be2\u95ee[1,3]\u65f6\uff0c\u7b54\u6848\u4e5f\u662f3\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u8bb0\u5f55\u7684\u662f{0,0,3,2,1}\uff0c\u8f93\u51fa\u7684\u7b54\u6848\u662f1\u3002\u600e\u4e48\u529e\uff1f\n\n\u4e00\u79cd\u601d\u8def\u662f\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff09\u7b49\u3002\u7136\u800c\u5f53\u65f6\u4e3b\u5e2d\u6811\u4f3c\u4e4e\u5e76\u6ca1\u6709\u88ab\u53d1\u660e\uff1f\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u79bb\u6563\u5316\u505a\u6cd5\u3002\n\n\u9996\u5148\u5bf9\u6240\u6709\u7684\u8be2\u95ee\u9884\u5904\u7406\uff0c\u5373\u4ee5\u53f3\u7aef\u70b9r\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u5efa\u7acb\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u524d\u7f00\u65b0\u51fa\u73b0\u7684\u8d1d\u58f3\u7684\u4e2a\u6570\u3002\n\n\u5f53\u7136\u6811\u72b6\u6570\u7ec4\u5e76\u4e0d\u80fd\u4e00\u6b21\u6027\u5efa\u597d\uff0c\u6bcf\u6b21\u6839\u636e\u5f53\u524d\u8be2\u95ee\u7684r\uff0c\u52a0\u5165\u4f4d\u7f6e\u2264r\u7684\u6240\u6709\u8d1d\u58f3\uff08\u5c06\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u6807\u8bb0\u4e3a1\uff09\uff0c\u5e76\u5220\u53bb\u76f8\u540c\u989c\u8272\u7684\u8d1d\u58f3\uff08\u5c06\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u6807\u8bb0\u4e3a0\uff09\u3002\n\n'''cpp\n```cpp\n#include<map>\n#include<cstdio>\n#include<cstring>\n#include<utility>\n#include<algorithm>\n#define r first\n#define l second.first\n#define id second.second\ntypedef std::pair<int,std::pair<int,int> > Q;\nconst int N=50001;\nint n;\nclass FenwickTree {\n```\nprivate:\n```cpp\n        int val[N];\n        int lowbit(const int x) {\n            return x&-x;\n        }\n```\npublic:\n```cpp\n        FenwickTree() {\n            memset(val,0,sizeof val);\n        }\n        void modify(int p,const int x) {\n            while(p<=n) {\n                val[p]+=x;\n                p+=lowbit(p);\n            }\n        }\n        int query(int p) {\n            int ans=0;\n            while(p) {\n                ans+=val[p];\n                p-=lowbit(p);\n            }\n            return ans;\n        }\n};\nFenwickTree tree;\nint main() {\n    scanf(\"%d\",&n);\n    int a[n+1];\n    for(int i=1;i<=n;i++) {\n        scanf(\"%d\",&a[i]);\n    }\n    int m;\n    scanf(\"%d\",&m);\n    Q q[m];\n    for(int i=0;i<m;i++) {\n        scanf(\"%d%d\",&q[i].l,&q[i].r);\n        q[i].id=i;\n    }\n    std::sort(&q[0],&q[m]);\n    int p=1;\n    std::map<int,int> last;\n    int ans[m];\n    for(int i=0;i<m;i++) {\n        while(p<=q[i].r) {\n            if(last[a[p]]) tree.modify(last[a[p]],-1);\n            tree.modify(last[a[p]]=p,1);\n            p++;\n        }\n        ans[q[i].id]=tree.query(q[i].r)-tree.query(q[i].l-1);\n    }\n    for(int i=0;i<m;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n'''\n```",
        "postTime": 1495932749,
        "uid": 10086,
        "name": "skylee",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u770b\u4e86\u5927\u5bb6\u7684\u9898\u89e3\uff0c\u6709\u83ab\u961f\uff0c\u4e3b\u5e2d\u6811\uff0c\u6811\u72b6\u6570\u7ec4.....\n\n\u4f46\u4f3c\u4e4e\u6ca1\u6709\u4eba\u5199\u5728\u7ebf\u7684\u5206\u5757\uff08\u53ef\u80fd\u592a\u6162\uff1f\uff09\n\n\u4e0b\u9762\u662f\u6211\u7684\u5206\u5757\uff1a\n\n\u9996\u5148\u6211\u4eec\u7528$\\ a\\ [\\ i\\ ]\\ $  \u8868\u793a $\\ i\\ $ \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u8d1d\u58f3\u79cd\u7c7b\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4$\\ pre[\\ i\\ ]\\ $\u8868\u793a\uff1a\u4ece$\\ i\\ $   \u8fd9\u4e2a\u4f4d\u7f6e\u5f80\u524d\u627e\uff0c\u7b2c\u4e00\u4e2a\u79cd\u7c7b\u4e3a$\\ a\\ [\\ i\\ ]\\ $ \u7684\u4f4d\u7f6e\u3002\n\n\u4f8b\u5982\uff1a $\\ a\\ [\\ i\\ ]\\ $\uff1a1 3 2 2 1 3 3 \u3002\n\n\u5219\uff1a $\\ pre[\\ i\\ ]\\ $ \uff1a0 0 0 3 1 2 6 \u3002\n\n***\n\n\u8bf7\u52a1\u5fc5\u7406\u89e3\u6e05\u695a\u4e0b\u9762\u8fd9\u53e5\u8bdd\uff1a\n\n**\u6211\u4eec\u8981\u6c42\u4e00\u6bb5\u533a\u95f4 $l$ \u5230 $r$ \u7684\u4e0d\u540c\u79cd\u7c7b\u7684\u8d1d\u58f3\u7684\u6570\u91cf\uff0c\u5c31\u662f\u6c42\u89e3\u533a\u95f4$\\ [\\ l $ \uff0c$\\ r\\ ] $\u91cc\u6709\u591a\u5c11\u4f4d\u7f6e\u7684$\\ pre[\\ i\\ ]\\  $\u5c0f\u4e8e$\\ l\\ $\u3002\u56e0\u4e3a\u533a\u95f4\u5185$\\ pre[\\ i\\ ]\\ $\u5927\u4e8e $l$ \u7684\u4f4d\u7f6e\u90fd\u5c06\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u4e24\u6b21\u4ee5\u4e0a; \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a$\\ pre[\\ i\\ ]\\  $\u5c0f\u4e8e $l$ \u7684\u4f4d\u7f6e\uff0c\u5fc5\u7136\u662f\u8be5\u4f4d\u7f6e\u4e0a\u7684\u8d1d\u58f3\u79cd\u7c7b\u5728$\\ [\\ l $ , $r\\ ] $ \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1$\\ pre[\\ i\\ ]\\ $\u5c0f\u4e8e $l$ \u7684\u4f4d\u7f6e\u5373\u53ef\u3002**\n\n***\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u5757\u4e86\u3002\n\n\u5c06\u6574\u6bb5\u5e8f\u5217\u5206\u4e3a $sqrt(n)$\u5757\uff0c\u6bcf\u5757\u5927\u5c0f\u4e3a$sqrt(n)$\u3002\n\n\u5c06\u5757\u5185\u6392\u5e8f\uff0c\u7ef4\u62a4\u6392\u5e8f\u540e\u7684\u6570\u7ec4(\u5373\u4ee3\u7801\u4e2d\u7684$preb[\\ ]$\u6570\u7ec4)\uff0c\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6574\u5757\uff0c\u5757\u5185\u4e8c\u5206\u6c42\u590d\u5408\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\uff1b\u5bf9\u4e8e\u975e\u5b8c\u6574\u5757\uff0c\u66b4\u529b\u627e\u5373\u53ef\u3002\u8fd9\u90e8\u5206\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u6a21\u62df\u4e00\u4e0b\u3002\n\n\u6392\u5e8f\u7684\u590d\u6742\u5ea6$O(n*log(\\ sqrt(n)\\ )\\ )$\u3002\n\n\u6bcf\u6b21\u67e5\u8be2$O(sqrt(n)*log(\\ sqrt(n)\\ )+sqrt(n))$\n\n\u603b\u590d\u6742\u5ea6$O(\\ m*sqrt(n)*log(\\ sqrt(n)\\ )\\ )$\n\n\u770b\u8d77\u6765\u8fd9\u590d\u6742\u5ea6\u60f3AC\u6709\u70b9\u4e0d\u7a33\u554a\u3002\n\n\u4e0d\u52a0\u4f18\u5316TLE\u4e86\u540e\u4e24\u4e2a\u70b9\uff0c\u52a0\u4e86\u4f18\u8bfb\u3001\u5feb\u5199\u3001register\u3001inline\u5c31\u8fc7\u4e86\u3002\n\n\u8bc4\u6d4b\u8bb0\u5f55\uff1a\n\n![Luogu](https://cdn.luogu.com.cn/upload/pic/15409.png)\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<iostream>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\n\nnamespace Qza {\n    \n    const int nn=300;\n    const int N=50005;\n    const int NN=1000005;\n    \n    int n,m,a[N],p[NN],pre[N];\n    int preb[N],l[nn],r[nn],sizb,numb,belong[N];\n    int buf[15];\n    \n    inline void build()\n    {\n        sizb=sqrt(n);\n        numb=n/sizb;\n        if(n%sizb) ++numb;\n        for(register int i=1;i<=numb;++i) {\n            l[i]=(i-1)*sizb+1;\n            r[i]=i*sizb;\n        }\n        r[numb]=n;\n        for(register int i=1;i<=n;++i) {\n            belong[i]=(i-1)/sizb+1;\n            preb[i]=pre[i];\n        }\n        for(register int i=1;i<=numb;++i) {\n            sort(preb+l[i],preb+r[i]+1);\n        }\n    }\n    inline int queryb(int l,int r,int x)\n    {\n        register int L=l, R=r, mid;\n        while(L<=R) {\n            mid=(L+R)>>1;\n            if(preb[mid]<x) L=mid+1;\n            else R=mid-1;\n        }\n        return L-l;\n    }\n    inline int query(int nowl,int nowr)\n    {\n        register int ans=0;\n        if(belong[nowl]==belong[nowr]) {\n            for(int i=nowl;i<=nowr;++i) \n                if(pre[i]<nowl) ++ans;\n            return ans;\n        }\n        for(register int i=nowl;i<=r[belong[nowl]];++i) {\n            if(pre[i]<nowl) ++ans;\n        }\n        for(register int i=l[belong[nowr]];i<=nowr;++i) {\n            if(pre[i]<nowl) ++ans;\n        }\n        for(register int i=belong[nowl]+1;i<=belong[nowr]-1;++i) {\n            ans+=queryb(l[i],r[i],nowl);\n        }\n        return ans;\n    }\n    \n    inline void read(int &x)\n    {\n        char ch=getchar(); x=0;\n        while(ch<'0') ch=getchar();\n        while(ch>='0' && ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    }\n    inline void writ(int x)\n    {\n        register int cnt=0;\n        while(x) buf[++cnt]=(x%10)+48,x/=10;\n        while(cnt) putchar(buf[cnt--]);\n        putchar('\\n');\n    }\n    \n    void main()\n    {\n        register int x,y;\n        read(n);\n        for(register int i=1;i<=n;++i) {\n            read(a[i]);\n            pre[i]=p[a[i]];\n            p[a[i]]=i;\n        } \n        build();\n        read(m);\n        for(register int i=1;i<=m;++i) {\n            read(x); read(y);\n            writ(query(x,y));\n        }\n        return ;\n    }\n}\n\nint main()\n{\n    Qza::main();\n    return 0;\n}\n```\n\n\n\u5982\u679c\u5bf9\u4ee3\u7801\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u79c1\u4fe1\u6211\u3002\n\n~~\u5176\u5b9e\u4e3b\u5e2d\u6811\u66f4\u7a33\u3002~~\n\n~~\u7136\u800c\u6211\u975e\u5e38\u7684\u83dc\u3002~~",
        "postTime": 1520737850,
        "uid": 37839,
        "name": "\u7d2b\u94a6",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "> ## \u9759\u6001\u4e3b\u5e2d\u6811\u505a\u6cd5\n\n### \u601d\u8def\n\n\u6b64\u9898\u89e3\u7684\u5148\u51b3\u662f\u7b2c$K$\u5927(\u5c0f)\u95ee\u9898,\u4e0d\u4f1a\u4e3b\u5e2d\u6811\u7684\u8bf7\u81ea\u884c\u7ffb\u9605\u535a\u5ba2\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u9053\u9898\u8f6c\u5316\u4e3a**\u533a\u95f4\u4e0d\u540c\u6570\u6570\u91cf**\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u60f3\u5230,\u8be2\u95ee\u533a\u95f4$l,r,$\u5982\u679c\u4e00\u4e2a\u6570\u5b57$num_i$\u7684$last_i>=l$,\u5c31\u662f\u8bf4$num_i$\u662f\u91cd\u590d\u7684\u3002($last_i$\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57$num_j=num_i,j<i$\u4e14$j$\u79bb$i$\u6700\u8fd1\u3002\u901a\u4fd7\u7684\u8bf4\u5c31\u662f\u524d\u9762\u4e00\u4e2a\u4e0e\u81ea\u5df1\u76f8\u540c\u7684\u6570\u5b57\u3002\u5b9e\u73b0\u6700\u597d\u7528\u6876,\u6570\u5b57\u4e0d\u5927)\u8fd9\u4e2a\u5f88\u597d\u7406\u89e3,\u5c31\u662f\u5728\u533a\u95f4\u5185\u6709\u4e0e\u81ea\u5df1\u76f8\u540c\u7684\u6570\u5b57\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b50:\u7ef4\u62a4\u4e00\u4e2a**\u6743\u503c\u7ebf\u6bb5\u6811**,\u53f6\u5b50\u7ed3\u70b9\u50a8\u5b58\u7684\u5c31\u662f\u4ee5\u8fd9\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u7f16\u53f7\u4e3a$last_i$\u7684\u4e2a\u6570\u3002\n\n\u4e3e\u4e2a\u6817\u5b50:\n\n```\nnum[i] : 1 2 3 4 3 5\nlast[i]: 0 0 0 0 3 0\n```\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0$last_i$\u4e3a$0$\u7684\u6709$5$\u4e2a,\u4e3a$3$\u7684\u6709$1$\u4e2a\u3002\u90a3\u4e48\u5c31\u662f\u8fd9\u6837\u5b50\u7684:\n\n```\n     6\n    /\\\n   6   0\n  /\\    \\\n 5   1   0\n/\\  /\\  /\\\n5 0 0 1 0 0\n```\n\n**\u4e00\u5b9a\u6ce8\u610f\u7ebf\u6bb5\u6811\u5de6\u8fb9\u754c\u4e3a$0$,\u53f3\u8fb9\u754c\u4e3a$n$**!!\n\n\u53c8\u56e0\u4e3a\u6bcf\u4e00\u6b21\u7684$last_i$\u90fd\u4f1a\u5448\u73b0\u4e00\u4e2a\u4e0d\u540c\u7684\u6743\u503c\u7ebf\u6bb5\u6811,\u6211\u4eec\u5c31\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u4e3b\u5e2d\u6811\u3002\u800c\u4e14\u8fd9\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u6070\u597d\u53ef\u4ee5\u6ee1\u8db3\u51cf\u6cd5\u539f\u7406\u3002\n\n### \u67e5\u8be2\n\n\u6211\u4eec\u8981\u67e5\u8be2\u5c31\u5f88\u7b80\u5355\u5566,\u5982\u679c\u8be2\u95ee\u662f$l,r$,\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u8ba9$r$\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\u548c$l$\u64cd\u4f5c\u7684\u7ebf\u6bb5\u6811\u51cf\u4e00\u51cf(\u5982\u7b2c$K$\u5927),\u7136\u540e\u67e5\u8be2$l,r$\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e9b\u6570\u5c31\u662f\u591a\u4f59\u7684\u6570,\u90a3\u4e48\u7b54\u6848\u5c31\u662f$r-l+1-find$($find$\u5c31\u662f\u67e5\u8be2\u7684\u6570)\u3002\n\n\u5982\u679c\u8fd8\u4e0d\u61c2,\u770b$Code$\u3002\n\n### $Code$\n\n\u8981\u6ce8\u610f\u6570\u636e\u6bd4\u8f83\u5927,\u867d\u7136\u4e0d\u77e5\u9053\u5177\u4f53\u5f00\u591a\u5c11,\u4f46\u662f\u5f00\u4e86\u4ee5\u4e0b\u6570\u636e\u624d\u4e0d\u4f1a$RE$\u3002\n\n\u5173\u4e8e\u4e3b\u5e2d\u6811\u7684\u77e5\u8bc6\u5fc5\u987b\u80fd\u638c\u63e1,\u4e0b\u9762\u7684\u4e3b\u5e2d\u6811\u5c1d\u8bd5\u6ce8\u91ca\u4e0d\u518d\u91cd\u590d\u3002\n\n\u5404\u4e2a\u53d8\u91cf,\u6570\u7ec4\u7684\u6ce8\u91ca\u5728\u4ee3\u7801\u4e2d\u95f4\u3002\n```pascal\n// luogu-judger-enable-o2\nvar\n        left,right,tree:array[-1..20100070] of longint; //left,right\u5206\u522b\u4e3a\u5de6\u53f3\u513f\u5b50\u7684\u4f4d\u7f6e(\u6307\u9488),tree\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7684\u503c\n        num,root:array[-1..5100070] of longint;\n        recf:array[-1..2100007] of longint;\n        n,m,i,l,r,cnt,fa,find:longint;\n\nprocedure Build(l,r,key:longint);\nvar\n        mid,now:longint; //mid\u662f\u7ebf\u6bb5\u6811\u5e38\u8bc6,now\u4ee3\u8868\u6211\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7(\u56e0\u4e3a\u662f\u52a8\u6001\u5f00\u70b9,pascal\u9700\u8981\u5b58\u50a8\u4e00\u4e2a\u8fd9\u6837\u7684\u503c)\u3002\nbegin\n        inc(cnt); //\u5f00\u4e00\u4e2a\u70b9\n        now:=cnt;\n        if (l=r) then //\u5982\u679c\u5230\u4e86\u76ee\u6807\n        begin\n                if (l=key) then //\u62d2\u7edd0\u7684\u60c5\u51b5,\u4e0d\u7136\u6b7b\u5361\n                        inc(tree[now]); //last[i]=key,\u8fd9\u4e2a\u53f6\u5b50\u7ed3\u70b9+1\n                exit;\n        end;\n\n        mid:=(l+r) div 2;\n        if key<=mid then\n        begin\n                left[now]:=now+1; //\u5de6\u513f\u5b50\u80af\u5b9a\u662fnow+1,\u56e0\u4e3a\u4e0b\u4e00\u6b21\u5f00\u70b9\u80af\u5b9a\u662f\u513f\u5b50,\u800c\u4e14\u8fd8\u662f\u4e00\u6761\u94fe(\u786e\u5b9a\u4e86\u65b9\u5411),\u5e76\u4e14\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\u3002\u8fd9\u91cc\u4e0e\u5927\u5bb6\u5199\u7684\u4e0d\u540c\u3002\n\t\t\t\tright[now]:=right[fa]; //\u4e3b\u5e2d\u6811\u5e38\u8bc6\n                fa:=left[fa]; //\u5e38\u8bc6\n                Build(l,mid,key); //\u5f80\u5de6\u8d70\n        end;\n        if key>mid then //\u5982\u4e0a\n        begin\n                right[now]:=now+1;\n                left[now]:=left[fa];\n                fa:=right[fa];\n                Build(mid+1,r,key);\n        end;\n        tree[now]:=tree[left[now]]+tree[right[now]]; //\u6ce8\u610f\u662f\u6743\u503c\u7ebf\u6bb5\u6811,\u6240\u4ee5\u975e\u53f6\u5b50\u7ed3\u70b9\u8fd8\u662f\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50\u7684\u548c\u7684\u3002\u6ce8\u610f\u4e0d\u8981\u5199\u6210\u4e86tree[now*2]+tree[now*2+1]\nend;\n\nfunction Query(l,r,x,y,key1,key2:longint):longint;\nvar\n        mid:longint;\nbegin\n        if (l>=x)and(r<=y) then //\u7ebf\u6bb5\u6811\u5e38\u8bc6\n        begin\n                inc(find,tree[key2]-tree[key1]); //\u5dee\u5206,\u4e3b\u5e2d\u6811\u5e38\u8bc6\n                exit;\n        end;\n        if l=r then //\u52a0\u4e0a\u66f4\u7a33\n                exit;\n\n        mid:=(l+r) div 2;\n        if x<=mid then //\u5f80\u5de6\n                Query(l,mid,x,y,left[key1],left[key2]);\n        if y>mid then //\u5f80\u53f3\n                Query(mid+1,r,x,y,right[key1],right[key2]);\nend;\n\nbegin\n        read(n); \n        for i:=1 to n do\n        begin\n                read(num[i]);\n                root[i]:=cnt+1; \n                fa:=root[i-1];\n                Build(0,n,recf[num[i]]); //recf\u4ee3\u8868\u8ddfnum[i]\u76f8\u540c\u7684\u524d\u4e00\u4e2a\u6570,\u6ce8\u610f\u4e00\u5f00\u59cb\u4e3a0\n                recf[num[i]]:=i; //\u66f4\u65b0\n        end;\n\n        read(m);\n        for i:=1 to m do\n        begin\n                read(l,r);\n                find:=0;\n                Query(0,n,l,r,root[l-1],root[r]); //\u6ce8\u610f\u5de6\u53f3\u8fb9\u754c\u3002l,r\u4ee3\u8868\u7684\u662f\u8fd9\u6bb5\u533a\u95f4\u6211\u9700\u8981\u67e5\u8be2(\u6709\u591a\u5c11\u4e2a\u4ee5\u8fd9\u4e2a\u533a\u95f4\u67d0\u4e00\u4e2a\u6570\u5b57\u4e3alast,\u90a3\u4e48\u4e00\u5b9a\u6709\u91cd\u590d!!)\u3002root[l-1]\u548croot[r]\u662f\u4e3b\u5e2d\u6811\u5e38\u8bc6,\u540c\u65f6\u4fdd\u8bc1\u4e86num[i]\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d,last[i]\u4e5f\u5728\u8fd9\u4e2a\u533a\u95f4\u4e2d\u3002\n                writeln(r-l+1-find); //\u7b54\u6848,\u5982\u4e0a\u8ff0\u3002\n        end;\nend.\n```",
        "postTime": 1533565166,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u611f\u89c9\u8fd9\u9898\u7684\u9898\u89e3\u4e2d\u5bf9\u65b0\u624b\u6700\u53cb\u597d\u7684\u4e00\u7bc7 [\u4f20\u9001\u95e8](https://www.luogu.org/blog/user3432/solution-p1972)\n\n- **\u8fd9\u7bc7\u9898\u89e3\u5047\u8bbe\u4f60\u5df2\u7ecf\u5b66\u8fc7\u6811\u72b6\u6570\u7ec4\u7684\u7406\u8bba\uff0c\u5e76\u4e14\u5df2\u7ecf\u505a\u8fc7\u4e00\u4e9b\u6a21\u677f\u9898\u4e86\u3002**\n\n\u521a\u5b66\u6811\u72b6\u6570\u7ec4\uff0c\u770b\u5230\u8fd9\u9898\u53ef\u4ee5\u7528\uff0c\u4e00\u5b9a\u8981\u81ea\u5df1\u5199\u4e00\u7bc7\u9898\u89e3\u9632\u6b62\u5fd8\u4e86\uff0c\u8fd9\u91cc~~\u672c\u7740\u4e0d\u91cd\u590d\u9020\u8f6e\u5b50\u7684\u7406\u5ff5~~\uff0c\u61d2... \u601d\u8def\u5c31\u4e0d\u8be6\u7ec6\u5199\u4e86\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u4e0a\u9762\u7684\u94fe\u63a5\uff0c\u8bb2\u7684\u5bf9\u65b0\u624b\u5f88\u53cb\u597d\uff0c\u4e3b\u8981\u8bb2\u4e00\u4e0b\u601d\u8def\u5982\u4f55\u5b9e\u73b0\uff0c\u4ee5\u53ca\u4ee3\u7801\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u3002\n## \u53d8\u91cf\u7684\u610f\u4e49\n\u5148\u89e3\u91ca\u4e00\u4e0b\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\n```\nconst int maxn = 1000010;\n\nint n, m, a[maxn], bit[maxn], vis[maxn], ans[maxn];\n\nstruct Query{\n\tint l, r;\n\tint pos;\n}query[maxn];\n```\nmaxn\uff1a\u7f16\u53f7\u4e3a0 \u52301000000 \u4e4b\u95f4\u7684\u6574\u6570\u3002\n\na[maxn]\uff1a\u8f93\u5165\u7684\u9879\u94fe\u7f16\u53f7\u6570\u7ec4\u3002\n\nbit[maxn]\uff1a\u5728\u6811\u72b6\u6570\u7ec4\u4e2d\u7528\u6765\u8bb0\u5f55a[i-lowbit(i)] + ... + a[i]\n\nvis[maxn]\uff1a\u7531\u4e8e\u5728\u67e5\u8be2\u533a\u95f4[l, r]\u4e2d\uff0c\u51fa\u73b0\u91cd\u590d\u7684\u6570\u5b57\u65f6\u6211\u4eec\u53ea\u9700\u5173\u5fc3\u6700\u53f3\u8fb9\u5373\u6700\u540e\u51fa\u73b0\u7684\u90a3\u4e2a\u6570\uff0c\u6240\u4ee5\u9700\u8981\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u7f16\u53f7\u662f\u5426\u51fa\u73b0\u8fc7\uff0c\u8fd9\u91cc\u6211\u4eec\u518d\u5f15\u7533\u4e00\u4e0b\uff0c\u987a\u4fbf\u7528\u5b83\u8bb0\u5f55\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\n\u7ed3\u6784\u4f53\u7528\u6765\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u67e5\u8be2\u5bf9\u5e94\u7684\u5de6\u53f3\u533a\u95f4l\u3001r\uff0c\u4ee5\u53ca\u7528pos\u8bb0\u5f55\u539f\u59cb\u987a\u5e8f\uff0c\u56e0\u4e3a\u540e\u9762\u6211\u4eec\u8981\u6839\u636e\u533a\u95f4\u7684\u4e0a\u754cr\u6765\u91cd\u65b0\u6392\u5e8f\u3002\n## \u672c\u9898\u4e2d\u6811\u72b6\u6570\u7ec4\u662f\u505a\u4ec0\u4e48\u7684\uff1f\n\u4ee5\u6837\u4f8b\u7684\u6570\u636e\u4e3a\u4f8b\uff0c\u6211\u4eec\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u5982\u4f55\u53bb\u7528\u6811\u72b6\u6570\u7ec4\u89e3\uff1a\n\u6837\u4f8b\uff1a\n```\n6\n1 2 3 4 3 5\n3\n1 2\n3 5\n2 6\n```\n\u6211\u4eec\u91cd\u70b9\u5173\u6ce8\u67e5\u8be2[3, 5]\uff0ca[3] = a[5] = 3\uff0c\u6240\u4ee5\u8fd9\u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u4e3a2\uff1a\n1. \u7531\u4e8e\u4e0a\u9762\u4ee5\u53ca\u8bf4\u4e86\u51fa\u73b0\u91cd\u590d\u7684\u6570\u5b57\u65f6\u6211\u4eec\u53ea\u9700\u5173\u5fc3\u6700\u53f3\u8fb9\u5373\u6700\u540e\u51fa\u73b0\u7684\u90a3\u4e2a\u6570\uff0c\u56e0\u6b64\u5bf9\u4e8e\u7b2c\u4e00\u4e2a3\uff0c\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7684add\u64cd\u4f5c\uff0cadd(3, 1)\uff0c\u8fd9\u91cc\u76843\u662f\u7d22\u5f15\u53f7\uff0c\u52a01\u8bf4\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u51fa\u73b0\u8fc73\u8fd9\u4e2a\u6570\u3002\u7528vis[a[3]] = j \u8bb0\u5f55\u5b83\u51fa\u73b0\u7684\u4f4d\u7f6e\u5e76\u4e14\u8868\u660e\u5b83\u51fa\u73b0\u8fc7\u3002\u6b64\u65f6\u5728[3, 5]\u8fd9\u4e2a\u533a\u95f4\u4e0a\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u503c\u4e3a: 1 0 0\u3002\n2. \u5bf9\u4e8ea[4] = 5\uff0c\u6211\u4eec\u6ca1\u6709\u7528vis\u6807\u8bb0\u8fc7\u5b83\uff0c\u56e0\u6b64\u76f4\u63a5add(4, 1);\u6b64\u65f6\u5728[3, 5]\u8fd9\u4e2a\u533a\u95f4\u4e0a\uff0c\u6811\u72b6\u6570\u7ec4\u7684\u503c\u4e3a: 1 1 0\u3002\n3. \u5bf9\u4e8ea[5] = 3\uff0c\u6211\u4eec\u56de\u53bb\u67e5vis\u8868\uff0c\u53d1\u73b0\u5b83\u5df2\u7ecf\u5728a[3]\u8fd9\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981add(3, -1)\uff0c\u628a\u5b83\u51cf\u53bb\uff0c\u7136\u540e\u5728\u65b0\u7684\u4f4d\u7f6e\u4e0aadd(5, 1)\u52a0\u4e0a; \u6b64\u65f6\u6811\u72b6\u6570\u7ec4\u7684\u503c\u4e3a 0 1 1\u3002\n4. \u6700\u540e\uff0c\u67e5\u8be2\u65f6\u76f4\u63a5\u7528sum(r) - sum(l - 1)\u5373\u53ef(\u6811\u72b6\u6570\u7ec4\u7684\u57fa\u672c\u80fd\u64cd\u4f5c\uff0c\u4e0d\u591a\u89e3\u91ca\u4e86)\u3002\n\n\n\n\u8bb0\u5f55\u7b54\u6848\u65f6\uff0c\u8981\u6ce8\u610f\u6839\u636equery\u7684pos\u5173\u952e\u5b57\u5b58\u653e\u7b54\u6848\uff0c\u4ee5\u8f93\u5165\u65f6\u7684\u987a\u5e8f\u8f93\u51fa\u7b54\u6848\u3002\n\n**\u6700\u540e\u653e\u4e0a\u5b8c\u6574\u4ee3\u7801\uff1a**\n```\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int maxn = 1000010;\n\nint n, m, a[maxn], bit[maxn], vis[maxn], ans[maxn];\n\nstruct Query{\n\tint l, r;\n\tint pos;\n}query[maxn];\n\nbool cmp(Query a, Query b){\n\treturn a.r < b.r;\n}\n\nint lowbit(int u){\n\treturn u & -u;\n}\n\nlong long sum(int u){\n\tint res = 0;\n\twhile (u > 0){\n\t\tres += bit[u];\n\t\tu -= lowbit(u); \n\t}\n\treturn res;\n}\n\nvoid add(int u, int d){\n\twhile (u <= maxm){\n\t\tbit[u] += d;\n\t\tu += lowbit(u);\n\t}\n}\n\nint main(int argc, char const *argv[]){\n\t//freopen(\"/Users/macbook/Desktop/\u7b97\u6cd5\u5206\u6790/OJ-Codes/\u6d1b\u8c37/input.in\", \"r\", stdin);\n\tscanf(\"%d\", &n);\n\t/* \u6ce8\u610f \u7f16\u53f7\u4e3a0 \u52301000000 \u4e4b\u95f4\u7684\u6574\u6570 */\n\tfor (int i = 1; i <= n; ++i)\n\t\tscanf(\"%d\", &a[i]);\n\tscanf(\"%d\", &m);\n\tfor (int i = 1; i <= m; ++i){\n\t\tscanf(\"%d%d\", &query[i].l, &query[i].r);\n\t\tquery[i].pos = i;\n\t}\n\tsort(query + 1, query + 1 + m, cmp);\n\tint next = 1;\n\tfor (int i = 1; i <= m; ++i){\n\t\tfor (int j = next; j <= query[i].r; ++j){\n\t\t\t/* \u5982\u679c\u8be5\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u8fc7 */\n\t\t\tif (vis[a[j]])\t\t\n\t\t\t\tadd(vis[a[j]], -1);\n\t\t\tadd(j, 1);\n\t\t\tvis[a[j]] = j;\n\t\t}\n\t\tnext = query[i].r + 1;\n\t\tans[query[i].pos] = sum(query[i].r) - sum(query[i].l - 1);\n\t}\n\tfor (int i = 1; i <= m; ++i)\n\t\tprintf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1542207782,
        "uid": 136040,
        "name": "MambaHJ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "**\u83ab\u961f\u597d\u7384\u5b66\u554a**\n\n### **[SDOI2009]HH\u7684\u9879\u94fe**\n\n**\u9898\u76ee\u63cf\u8ff0**\n\n$HH$ \u6709\u4e00\u4e32\u7531\u5404\u79cd\u6f02\u4eae\u7684\u8d1d\u58f3\u7ec4\u6210\u7684\u9879\u94fe\u3002$HH$ \u76f8\u4fe1\u4e0d\u540c\u7684\u8d1d\u58f3\u4f1a\u5e26\u6765\u597d\u8fd0\uff0c\u6240\u4ee5\u6bcf\u6b21\u6563\u6b65\u5b8c\u540e\uff0c\u4ed6\u90fd\u4f1a\u968f\u610f\u53d6\u51fa\u4e00\u6bb5\u8d1d\u58f3\uff0c\u601d\u8003\u5b83\u4eec\u6240\u8868\u8fbe\u7684\u542b\u4e49\u3002$HH$ \u4e0d\u65ad\u5730\u6536\u96c6\u65b0\u7684\u8d1d\u58f3\uff0c\u56e0\u6b64\uff0c\u4ed6\u7684\u9879\u94fe\u53d8\u5f97\u8d8a\u6765\u8d8a\u957f\u3002\u6709\u4e00\u5929\uff0c\u4ed6\u7a81\u7136\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u67d0\u4e00\u6bb5\u8d1d\u58f3\u4e2d\uff0c\u5305\u542b\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8d1d\u58f3\uff1f\u8fd9\u4e2a\u95ee\u9898\u5f88\u96be\u56de\u7b54\u2026\u2026\u56e0\u4e3a\u9879\u94fe\u5b9e\u5728\u662f\u592a\u957f\u4e86\u3002\u4e8e\u662f\uff0c\u4ed6\u53ea\u597d\u6c42\u52a9\u777f\u667a\u7684\u4f60\uff0c\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570$N$\uff0c\u8868\u793a\u9879\u94fe\u7684\u957f\u5ea6\u3002\n\n\u7b2c\u4e8c\u884c\uff1a$N$ \u4e2a\u6574\u6570\uff0c\u8868\u793a\u4f9d\u6b21\u8868\u793a\u9879\u94fe\u4e2d\u8d1d\u58f3\u7684\u7f16\u53f7\uff08\u7f16\u53f7\u4e3a$0$ \u5230$1000000$ \u4e4b\u95f4\u7684\u6574\u6570\uff09\u3002\n\n\u7b2c\u4e09\u884c\uff1a\u4e00\u4e2a\u6574\u6570$M$\uff0c\u8868\u793a$HH$ \u8be2\u95ee\u7684\u4e2a\u6570\u3002\n\n\u63a5\u4e0b\u6765$M$ \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c$L$ \u548c$R$\uff08$1 \u2264 L \u2264 R \u2264 N$\uff09\uff0c\u8868\u793a\u8be2\u95ee\u7684\u533a\u95f4\u3002\n\n**\u8f93\u51fa\u683c\u5f0f**\n\n$M$ \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u8be2\u95ee\u5bf9\u5e94\u7684\u7b54\u6848\u3002\n\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a$N$\u7684\u6570\u5217\uff08\u989c\u8272\uff09\u548c$M$\u4e2a$[l,r]$\u7684\u533a\u95f4\u8be2\u95ee\uff0c\u6c42$[l,r]$\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u7684\u6570\u3002\n\n\n\u6211\u4eec\u5148\u6765\u8003\u8651\u6bd4\u8f83\u6734\u7d20\u7684\u7b97\u6cd5\uff1a\n\n\u5047\u8bbe\u8fd9\u662f\u6211\u4eec\u7684\u6570\u5217\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/66940.png)\n\n\uff08\u753b\u5f97\u5f88\u6e23\uff0c\u6c42\u8f7b\u55b7\uff09\n\n\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u8be2\u95ee\u662f$[1,2]$,\u90a3\u6211\u4eec\u5148\u66b4\u529b\u89e3\u51b3\uff0c\u628a\u6570\u5217\u5b58\u5230$a[]$\u91cc\uff0c\u518d\u5f00\u4e00\u4e2a\u6570\u7ec4\uff08\u6876\uff09$color[]$\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5f00\u4e00\u4e2a$ans$,\u8bb0\u5f55\u7b54\u6848\u3002\u5f53\u5904\u7406$[1,2]$\u65f6\uff0c\u5148\u628a$a[1]=1$\u6254$color[]$\u91cc\uff0c\u6b64\u65f6\u56e0\u4e3a\u591a\u4e86\u4e00\u4e2a\u51fa\u73b0\u6b21\u6570\u4e0d\u4e3a$0$\u7684\u6570\u5b57\uff0c\u6240\u4ee5$ans+=1$\u3002\u540c\u7406\uff0c\u518d\u628a$a[2]=3$\u6254$color[]$\u91cc\uff0c\u6b64\u65f6\u56e0\u4e3a\u591a\u4e86\u4e00\u4e2a\u51fa\u73b0\u6b21\u6570\u4e0d\u4e3a$0$\u7684\u6570\u5b57\uff0c\u6240\u4ee5$ans+=1$\u3002\u6b64\u65f6$ans=2$\uff0c\u4fbf\u4e3a\u8fd9\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/66960.png)\n\n\uff08\u8981\u662f\u88ab\u8fa3\u5230\u773c\u775b\u7684\u8bdd\uff0c\u6c42\u8f7b\u6572\uff01\uff09\n\n\n\u518d\u52a0\u5165\u53c8\u8fdb\u6765\u4e86\u4e00\u4e2a\u8be2\u95ee$[1,3]$\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86$[1,2]$\uff0c\u6211\u4eec\u53ea\u8981\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u591a\u5904\u7406$a[3]$\u5c31\u597d\u4e86\u3002\n\n\u628a$a[3]=2$\u6254$color[]$\u91cc\uff0c\u6b64\u65f6\u56e0\u4e3a\u591a\u4e86\u4e00\u4e2a\u51fa\u73b0\u6b21\u6570\u4e0d\u4e3a$0$\u7684\u6570\u5b57\uff0c\u6240\u4ee5$ans+=1$\u3002\u6b64\u65f6$ans=3$\uff0c\u4fbf\u4e3a\u8fd9\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\uff08\u4eba\u7684\u672c\u8d28\u662f\u590d\u8bfb\u673a\u3002\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/66964.png)\n\n\n\u518d\u4e0b\u4e00\u4e2a\u8be2\u95ee\uff0c$[2,4]$\uff0c\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u53ea\u8981\u4ece$color[]$\u4e2d\u628a$a[1] = 1$\u5220\u6389\u3002\u56e0\u4e3a\u591a\u4e86\u4e00\u4e2a\u51fa\u73b0\u6b21\u6570\u4e3a$0$\u7684\u6570\uff0c\u6240\u4ee5\u628a$ans -= 1$\u3002\u7136\u540e\u518d\u5904\u7406$a[4] = 3$\uff0c\u628a\u5b83\u6254$color[]$\u91cc\u2026\u2026\u55ef\u2026\u6ca1\u6709\u591a\u6570\u4e3a$1$\u7684\u6570\u8bf6\uff0c\u90a3\u5c31\u4e0d\u7406$ans$\u4e86\uff01O(\u2229_\u2229)O\n\n![](https://cdn.luogu.com.cn/upload/pic/66965.png)\n\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u66b4\u529b\u7684\u590d\u6742\u5ea6\u662f$O(nm)$\u7684\u3002\n\n\u6211\u77e5\u9053\u8fd9\u4e2a\u66b4\u529b\u5f88\u65e0\u804a\uff0c\u4f46\u662f\u8bf7\u8010\u5fc3\u770b\u5b8c\uff08\u795e\u7287\u8bf7\u5ffd\u7565\uff08\u5e94\u8be5\u4e5f\u6ca1\u6709\u795e\u7287\u6765\u770b\u6211\u8fd9\u79cd\u7f8e\u5473\u849f\u84bb\u7684\u9898\u89e3\u5427qwq\uff09\uff09\n\n\n### \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u548c\u6211\u83ab\u961f\u6709\u4ec0\u4e48\u5173\u7cfb:\uff09\uff1f\n\n\n**\u5176\u5b9e\uff0c\u8fd9\u4fbf\u662f\u83ab\u961f\u7684\u57fa\u7840\uff01**\n\n\n\u83ab\u961f\uff0c\u82f1\u6587$Mo's\\space Algorithm$\uff0c\u53d1\u660e\u8005[\u83ab\u6d9b](https://www.zhihu.com/people/mythly/activities)(%%%\u63d0\u4ea4\u524d\u5148\u53bb\u819c\u4e00\u4e0b\u9632\u6b62$tle$)\u3002\uff0c\u662f\u4e00\u79cd**\u5f3a\u884c\u79bb\u7ebf**\u7684\u7b97\u6cd5\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u800c\u8a00\uff0c\u4fbf\u662f\u5148\u628a\u8be2\u95ee\u79bb\u7ebf\u4fdd\u5b58\u518d\u6392\u4e2a\u5e8f\uff0c\u518d\u7528\u4e0a\u9762\u7684\u66b4\u529b\u6765\u76f4\u63a5\u5e72\u3002\u590d\u6742\u5ea6~~O(\u7384\u5b66)~~$O(n\\sqrt n)$\u3002\n\n\u90a3\u6211\u4eec\u600e\u4e48\u6392\u5e8f\u5462\uff1f\n\n\u6211\u4eec\u8981\u5c3d\u91cf\u51cf\u5c11\u4fee\u6539$color[]$\u7684\u6b21\u6570\uff0c\u6240\u4ee5\uff0c\u8fd9\u662f\u4e00\u822c\u7684\u6392\u5e8f\uff08\u5176\u4e2d\uff0c$block$\u53d8\u91cf\u662f\u5728$a[]$\u4e0a\u5206\u5757\u7684\u5927\u5c0f\uff0c\u4e00\u822c\u53d6$\\sqrt n$\uff0c$k.l$\u662f\u8be2\u95ee\u7684\u5de6\u8fb9\u754c($L$)\uff0c\u800c$k.r$\u662f\u8be2\u95ee\u7684\u53f3\u8fb9\u754c($R$)\uff09\n\n\n```cpp\nbool cmp(Node a, Node b)\n{\n\treturn ((a.l / block) == (b.l / block))? a.l < b.l : a.r < b.r;\n} \n```\n\n\n\u8fd9\u79cdlese\u7684\uff0c\u666e\u901a\u7684\u6392\u5e8f\uff0c\u600e\u4e48\u914d\u5f97\u4e0a\u6211\u4eec\u8fd9\u79cd\u9a9a\u5e74\u5462\uff1f\uff1f\n\n\n\u9686\u91cd\u63a8\u8350\uff1a**\u5947\u5076\u6392\u5e8f**!\u770b\u4f3c\u7384\u5b66\uff0c\u4f46\u662f\u80fd**\u5927\u5927\u5730**\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\uff01\n\n\n```cpp\nbool cmp (const Question& a, const Question& b)\n{\n\treturn (a.l / block) ^ (b.l / block)? a.l < b.l : (a.l / block) & 1? a.r < b.r: a.r > b.r;\n}\n```\n\n\u8fd9\u6bb5\u4ee3\u7801\u7684\u610f\u601d\u662f\uff1a**\u5f53$a.l$\u548c$a.r$\u5728\u540c\u4e00\u4e2a\u5757\u5185\u65f6\uff0c\u6bd4\u8f83$a.l$\u548c$b.l$\u7684\u5148\u540e\uff0c\u5426\u5219\u5982\u679c$a.l$\u6240\u5728\u7684\u5757\u7684\u7f16\u53f7\u4e3a\u5947\u6570\u65f6\uff0c\u6bd4\u8f83$a.r < b.r$\uff0c\u5426\u5219\u6bd4\u8f83 $a.r>b.r$**\n\n\u597d\u4e86\uff0c\u8bb2\u5b8c\u4e86\uff0c\u5176\u4ed6\u7684\u8bf7\u770b\u4ee3\u7801\u7406\u89e3\u5427\uff01\n\n```cpp\n// luogu-judger-enable-o2\n#pragma GCC optimize(3, \"Ofast\", \"inline\")\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct Question\n{\n\tint l, r, id;\n\t\n} q[10000001];\nint block = 0, ans = 0, cnt[10000001],\n    n, m, a[10000001], Ans[10000001];\n    \nbool cmp (const Question& a, const Question& b)\n{\n\treturn (a.l / block) ^ (b.l / block)? (a.l / block) < (b.l / block) : (a.l / block) & 1? a.r < b.r: a.r > b.r;\n}\n\t\nvoid add(int pos)\n{\n\tif (!cnt[a[pos]])\n\t\tans++;\n\tcnt[a[pos]]++;\n}\n\nvoid del(int pos)\n{\n\tcnt[a[pos]]--;\n\tif (!cnt[a[pos]])\n\t\tans--;\n}\n\nint read()\n{\n    char x;\n    while((x = getchar()) > '9' || x < '0') ;\n    int u = x - '0';\n    while((x = getchar()) <= '9' && x >= '0') u = (u << 3) + (u << 1) + x - '0';\n    return u;\n}\nint buf[105];  \ninline void write(int i) {  \n    int p = 0;  \n    if(i == 0) p++;  \n    else while(i) {  \n        buf[p++] = i % 10;  \n        i /= 10;  \n    }  \n    for(int j = p-1; j >= 0; j--) putchar('0' + buf[j]);  \n} \n\nint main()\n{\n\tint n, m;\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++)//\u8bfb\u5165\u6570\u5217\n\t\ta[i] = read();\n\tcin >> m;\n\tblock = n / sqrt(m * 2 / 3);//\u5728\u6b64\u9898\u4e2d\uff0c\u8fd9\u6837\u5f00\u6bd4\u8f83\u5feb\n\tfor (int i = 1; i <= m; i++)\n\t\tq[i].l = read(), q[i].r = read(), q[i].id = i;\n   //\u8bfb\u5165\n   //\u56e0\u4e3a\u662f\u79bb\u7ebf\u7684\uff0c\u800c\u8981\u987a\u5e8f\u8f93\u51fa\uff0c\u6240\u4ee5\u8981\u8bb0\u5f55\u987a\u5e8f\n\tsort(q + 1, q + m + 1, cmp);//\u6839\u636e\u4e0a\u9762\u7684\u90a3\u4e2acmp\u6392\u5e8f\n\tint l = 0, r = 0;\n\tfor (int i = 1; i <= m; i++)//\u5957\u7528\u66b4\u529b\n\t{\n\t\tint ql = q[i].l, qr = q[i].r;\n\t\twhile (l < ql)\n\t\t\tdel(l++);\n\t\twhile (l > ql)\n\t\t\tadd(--l);\n\t\twhile (r < qr)\n\t\t\tadd(++r);\n\t\twhile (r > qr)\n\t\t\tdel(r--);\n\t\tAns[q[i].id] = ans;\n\t}\n\tfor (int i = 1; i <= m; i++)\n\t\twrite(Ans[i]), putchar('\\n');\n\treturn 0;\n} \n```\n\n\n**\u5b8c\u7ed3\uff0c\u6492fafa\uff01\uff01**\uff61:.\uff9f\u30fd(\uff61\u25d5\u203f\u25d5\uff61)\uff89\uff9f.:\uff61+\uff9f\n\n\n",
        "postTime": 1564543820,
        "uid": 84788,
        "name": "Jeblqr",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011[SDOI2009]HH\u7684\u9879\u94fe"
    },
    {
        "content": "\u697c\u4e0b\u7684\u94f6\u724c\u7237\u8bb2\u4e86\u83ab\u961f\u505a\u6cd5\uff0c\u90a3\u4e48\u9119\u4eba\u5c31\u6765\u8bf4\u4e00\u8bf4\u652f\u6301\u5728\u7ebf\u67e5\u8be2\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff08\u4fd7\u79f0\u4e3b\u5e2d\u6811\uff09\n\n\u6240\u8c13\u5728\u7ebf\u67e5\u8be2\uff0c\u5c31\u662f\u4e0d\u9700\u8981\u628a\u8be2\u95ee\u90fd\u8bfb\u8fdb\u6765\uff0c\u800c\u662f\u53ef\u4ee5\u53ca\u65f6\u56de\u7b54\u6bcf\u4e00\u4e2a\u8be2\u95ee\u3002\u5f53\u8f93\u5165\u6570\u636e\u88ab\u6839\u636e\u4e0a\u4e00\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u52a0\u5bc6\u8fc7\u540e\uff0c\u83ab\u961f\u548c\u79bb\u7ebf\u64cd\u4f5c\u5c31\u65e0\u7528\u6b66\u4e4b\u5730\u4e86\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8f6c\u5316\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u90fd\u5236\u4f5c\u4e00\u4e2anext[i]\u8868\u793a\u5728\u8fd9\u4e2a\u70b9\u4e4b\u540e\u6700\u8fd1\u7684\u989c\u8272\u76f8\u540c\u7684\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u8bbe\u4e3an+1\uff0c\u8bb0\u4e00\u4e0b\u961f\u5934O\uff08N\uff09\u626b\u4e00\u904d\u5c31\u597d\u4e86\n\n\u8003\u8651\u533a\u95f4\u67e5\u8be2l~r\u4e4b\u95f4\u7684\u989c\u8272\u79cd\u6570\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u6240\u6709\u6ee1\u8db3(l<=i<=r,next[i]>r)\u7684\u4e2a\u6570\uff0c\u56e0\u4e3a\u5982\u679c\u67d0\u4e2a\u70b9\u7684next\u5df2\u8fd1\u8d85\u51fa\u4e86\u8fd9\u4e2a\u533a\u95f4\u7684\u8303\u56f4\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u4e86\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u5c31\u5df2\u8fd1\u88ab\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42\u533a\u95f4l~r\u4e4b\u95f4\u6743\u503c\u5927\u4e8er\u7684\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u5728\u53ef\u6301\u4e45\u5316\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u6784\u9020\u4e00\u6761\u65b0\u7684\u7ebf\u6bb5\u6811\u94fe\u5c31\u597d\u4e86\uff0c\u67e5\u8be2\u5c31\u662f\u5e38\u89c4\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u8981\u65b0\u5efa\u4e00\u6761\u6700\u591aLog2 N\u4e2a\u70b9\u7684\u94fe\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6N log2 N\uff1b\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u6700\u591a\u9012\u5f52\u6df1\u5ea6\u4e3aLog2 N\u5c42\uff0c\u65f6\u95f4\u590d\u6742\u5ea6M Log2 N\u3002\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n\nusing namespace std;\nconst int L=1000005;\nconst int N=50005;\nconst int LN=20;\nstruct node{int ls,rs,wei;};\nint root[N],size;\nstruct Persistent_Segment_Tree{\n    node v[N*LN];\n    void insert(int l,int r,int last,int &p,int &num){\n        (v[p=++size]=v[last]).wei++;\n        if (l==r) return;\n        int mid=(l+r)>>1;\n        if (num<=mid) insert(l,mid,v[last].ls,v[p].ls,num);\n            else insert(mid+1,r,v[last].rs,v[p].rs,num);\n    }\n    int ask(int l,int r,int x,int y,int &num){\n        if (l==r) return v[y].wei-v[x].wei;\n        int mid=(l+r)>>1;\n        if (num<=mid) return ask(l,mid,v[x].ls,v[y].ls,num)+v[v[y].rs].wei-v[v[x].rs].wei;\n            else return ask(mid+1,r,v[x].rs,v[y].rs,num);\n    }\n}Tree;\nint n,m,a[N],head[L],next[N];\nint main(){\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    for (int i=1;i<=n;i++){\n        if (head[a[i]]) next[head[a[i]]]=i;\n        head[a[i]]=i;\n    }\n    for (int i=1;i<=n;i++) if (!next[i]) next[i]=n+1;\n    for (int i=1;i<=n;i++) Tree.insert(1,n+1,root[i-1],root[i],next[i]);\n    scanf(\"%d\",&m);\n    for (int i=1,x,y;i<=m;i++){\n        scanf(\"%d%d\",&x,&y);int t;\n        printf(\"%d\\n\",Tree.ask(1,n+1,root[x-1],root[y],t=y+1));\n    }\n}\n\n```",
        "postTime": 1460632490,
        "uid": 10356,
        "name": "\u5929\u72d7\u7684\u624b\u5e16",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u554a\u8fd9\u4e2a\u9898\u7684IDEA\u7092\u9e21\u5999\u554a\u2026\u2026\u8ba9\u6211\u60c5\u4e0d\u81ea\u7981\u60f3\u5199\u4e00\u53d1\u9898\u89e3\n\n\uff08\u5176\u5b9e\u662f\u6211\u6015\u8fd9\u6b21\u6284\u9898\u89e3\u4f1a\u4e86\u540e\u4e0b\u6b21\u5c31\u4e0d\u4f1a\u4e86\u2026\u2026\uff09\n\n\u6211\u4eec\u5148\u5c06\u8be2\u95ee\u6309\u7167\u7ed3\u675f\u70b9\u5347\u5e8f\u6392\u5e8f\n\n\u7528now\u4fdd\u5b58\u5f53\u524d\u8be2\u95ee\u7684\u662f\u7b2c\u51e0\u4e2a\n\n\u7ebf\u6bb5\u6811\u4fdd\u5b58\u7684\u662f\u5f53\u524d\u4e0b\u6807\u662f\u5426\u6709\u73e0\u5b50\uff080/1\u8868\u793a\uff09 \n\n\u7136\u540e\u4ece1~n\u4f9d\u6b21\u8bbf\u95ee\u9879\u94fe\u3002\n\n\u5f53\u524d\u8bbf\u95ee\u4e2d\uff0c\u6211\u4eec\u8981\u505a\u7684\u6709\u4e24\u4ef6\u4e8b\uff1a\n\n\u7b2c\u4e00\u4ef6\uff1a\u5c06\u5f53\u524d\u70b9\u7684\u73e0\u5b50\u4fee\u6539\u62101\n\n\u7b2c\u4e8c\u4ef6\uff1a\u5c06\u4e0a\u4e00\u4e2a\u548c\u5f53\u524d\u73e0\u5b50\u7f16\u53f7\u76f8\u540c\u7684\u73e0\u5b50\u8bbe\u4e3a0\n\n\t\t  \uff08\u56e0\u4e3a\u6211\u4eec\u8981\u4fdd\u8bc1\u5f53\u524d\u5e8f\u5217\u91cc\u4e0d\u80fd\u6709\u91cd\u590d\u7f16\u53f7\u7684\u73e0\u5b50\n          \n\t\t\t\u800c\u5f53\u524d\u73e0\u5b50\u4ee5\u540e\u7684\u8bbf\u95ee\u90fd\u4e0d\u9700\u8981\u4e0a\u4e00\u4e2a\u91cd\u590d\u7f16\u53f7\u7684\u73e0\u5b50\u4e86\n            \n\t\t\t\u56e0\u4e3a\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u7528\u5f53\u524d\u73e0\u5b50\u6765\u7edf\u8ba1\u533a\u95f4[L,R]\u4e4b\u95f4\u7684\u4e2a\u6570\n            \n\t\t\t\u5982\u4f55\u7edf\u8ba1\u5462\uff1f\u6c42\u4e2a\u548c\u5c31\u597d\u4e86\u554a\u2026\u2026\uff09\n            \n\u5c06\u5f53\u524d\u73e0\u5b50\u7684\u4fee\u6539\u505a\u597d\u540e\uff0c\u5c31\u8981\u67e5\u8be2\u4e86\u3002\u5982\u679c\u5f53\u524d\u8be2\u95ee(now)\u7684\u53f3\u7aef\u70b9\u548c\u5f53\u524d\u73e0\u5b50\u662f\u4e00\u6837\u7684\n\u5c31\u67e5\u8be2[L,R]\u7684\u548c\u5c31\u597d\u4e86\uff0c\u8fd9\u4e2a\u548c\u5c31\u4ee3\u8868\u7740\u533a\u95f4\u5185\u4e0d\u540c\u79cd\u7684\u6570\u91cf\n\n\u6bd5\u7adf\u6211\u4eec\u5df2\u7ecf\u628a\u91cd\u590d\u7684\u73e0\u5b50\u90fd\u53bb\u91cd\u4e86\u2026\u2026 \n\n\u4ee3\u7801\u6233[\u8fd9\u91cc](http://www.cnblogs.com/refun/p/8682228.html)\n\n\u91cc\u9762\u8fd8\u6709\u83ab\u961f\u7684\u505a\u6cd5",
        "postTime": 1522676735,
        "uid": 41890,
        "name": "Refun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u5927\u5bb6\u90fd\u662f\u4e00\u547c\u767e\u5e94\u7684\u7528\u79bb\u7ebf+\u6811\u72b6\u6570\u7ec4\u554a\uff0c\u786e\u5b9e\u8fd9\u4e2a\u529e\u6cd5\u5f88\u4e0d\u9519\uff0c\u4f46\u662f\u6211\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u4e3b\u5e2d\u6811\u7684\u505a\u6cd5\u3002\n\n[\u4e3b\u5e2d\u6811\u57fa\u7840\u4f20\u9001\u95e8\u3002](http://blog.csdn.net/no1\\_terminator/article/details/77601599)\n\n\u5bf9\u4e8e\u8fd9\u4e00\u9053\u9898\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u6709\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u505a\u6cd5\uff1a\n\n\u5bf9\u4e8e\u8be2\u95ee\u533a\u95f4[i,j]\uff0c\u76f4\u63a5\u7528[i,j]\u51cf\u53bb\u91cd\u590d\u989c\u8272\u7684\u6570\u91cf\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8ba1\u7b97\u91cd\u590d\u989c\u8272\u7684\u6570\u91cf\u5462\uff1f\n\n\u5bf9\u4e8e\u7b2ci\u4e2a\u8d1d\u58f3\uff0c\u6211\u4eec\u8bbe\u5176\u989c\u8272\u662fcol[i],\u91cd\u590d\u5c31\u662f\u5728\u7b2ci\u6b21\u4e4b\u524d\u4e5f\u88ab\u8ba1\u7b97\u4e86\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u5c31\u4ec5\u4ec5\u8003\u8651\u7ef4\u62a4\u4e00\u4e2alast[i]\u8868\u793a\u7b2ci\u4e2a\u8d1d\u58f3\u7684\u989c\u8272\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u628a\u7b2clast[i]\u7684\u4f4d\u7f6e\u5728\u7ebf\u6bb5\u6811\u4e2d+1\uff0c\u8bbesum[i][j]=\u7ebf\u6bb5\u6811\u4e2d[1...i]\u5bf9\u4e8e\u7b2cj\u4e2a\u8d1d\u58f3\u989c\u8272last\u7684\u7d2f\u548c\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4[l,r]\u4e2d\u7b2ci\u4e2a\u8d1d\u58f3\u91cd\u590d\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u662fsum[i][r]-sum[i][l-1]\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5dee\u5206\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u5373\u91cd\u65b0\u4ee4sum[i]=\u7ebf\u6bb5\u6811\u4e2d[1..i]\u4e2d\u6240\u6709\u8d1d\u58f3last\u7684\u6570\u91cf\uff0c\u90a3\u4e48\u8fd9\u6bb5\u533a\u95f4\u91cc\u6240\u6709\u8d1d\u58f3\u91cd\u590d\u989c\u8272\u7684\u6570\u91cf\u5c31\u662fsum[r]-sum[l-1]\u3002\u7531\u4e8e\u662f\u5bf9\u4e8e\u4efb\u610f\u533a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u5efan\u4e2a\u7ebf\u6bb5\u6811\uff0c\u518d\u53ef\u6301\u4e45\u5316\u641e\u4e00\u641e\u5c31\u662f\u597d\u4e86\u3002\u8fd9\u5c31\u662f\u4e3b\u5e2d\u6811\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=2e5+10;\nconst int M=N*10;\nstruct President_Tree{\n    int L,R,sum;\n}T[M<<1];\nint last[N],top[M],root[N];\nint n,m,T_cnt=1;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid insert(int &now,int x,int l=0,int r=n){\n    T[T_cnt++]=T[now];now=T_cnt-1;\n    T[now].sum++;\n    if (l==r)return;\n    int mid=(l+r)>>1;\n    if (x<=mid)insert(T[now].L,x,l,mid);\n        else insert(T[now].R,x,mid+1,r);\n}\nint query(int i,int j,int qr,int l=0,int r=n){\n    if (r<=qr)return T[j].sum-T[i].sum;\n    int mid=(l+r)>>1,t=query(T[i].L,T[j].L,qr,l,mid);\n    if (mid<qr)t+=query(T[i].R,T[j].R,qr,mid+1,r);\n    return t;\n}\nint main(){\n    n=read();\n    for (int i=1;i<=n;i++){\n        int x=read();\n        last[i]=top[x];\n        top[x]=i;\n    }\n    root[0]=0;\n    for (int i=1;i<=n;i++){\n        root[i]=root[i-1];\n        insert(root[i],last[i]);\n    }\n    m=read();\n    for (int i=1;i<=m;i++){\n        int l=read(),r=read();\n        printf(\"%d\\n\",query(root[l-1],root[r],l-1));\n    }\n    return 0;\n}\n```",
        "postTime": 1503924102,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n[\u6211csdn\u535a\u5ba2](https://blog.csdn.net/qq_42421714/article/details/84787765)\n\n[\u70b9\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P1972)\n\n## \u601d\u8def\n\n**\u67d0\u4e00\u6bb5\u8d1d\u58f3\u4e2d\uff0c\u5305\u542b\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8d1d\u58f3\uff1f**\n\n\u6700\u5f00\u59cb\u770b\u89c1\u8fd9\u9053\u9898\u65f6\uff0c\u6ca1\u6709\u601d\u8def\n\n\u4f46\u518d\u770b\u770b\uff0c\u53ef\u4ee5\u975e\u5e38\u660e\u4e86\u7684\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4~~ban~~\u9898\n\n\u8bbe\u6709\u4e00\u957f\u4e3a5\u7684\u9879\u94fe\n\n1 2 3 2 1\n\n\u7136\u540e m = 3\n\n1 5\n\n2 5\n\n1 3\n\n\u6211\u7684\u601d\u8def\u662f\u8fd9\u6837\uff0c\u7531\u4e8e\u8981\u6c42\u7684\u662f**\u79cd\u7c7b\u6570** != \u6c42l \u5230 r \u7684\u4e2a\u6570\n\n\u6bcf\u79cd\u8d1d\u58f3\u53ea\u80fd\u5b58\u4e00\u4e2a\uff08\u4e0d\u80fd\u53cd\u590d\u5b58\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\u5fc5\u987b**\u5220\u53bb\u4e00\u4e9b\u76f8\u540c\u7684\u8d1d\u58f3**\u4e14**\u5220\u9664\u7684\u4e0d\u80fd\u5f71\u54cd\u6c42\u5f97\u7b54\u6848**\n\n\u6bd4\u5982\uff1a\u4e0a\u9762\u76841 2 3 2 1\uff0c\u53bb\u91cd\uff0c\u7528-1\u8868\u793a\u5220\u53bb\u7684\n\n1 2 3 -1 -1\n\n\u5982\u679c\u50cf\u8fd9\u6837\uff0c\u6c42 l=2,r=5\u65f6\u7ed3\u679c\u4e3a2\n\n\u800c\u5b9e\u9645\u7ed3\u679c\u4e3a3\n\n\u6240\u4ee5\u6211\u4eec\u5f97\u6392\u4e2a\u5e8f\uff0c\u6309r\u7684\u5347\u5e8f\n\n### \u904d\u5386i\uff0c\u5f53i\u6240\u5728\u4f4d\u7f6e\u8d1d\u58f3\u524d\u9762\u6ca1\u6709\u65f6\uff0cupdate(i,1)\n\n\u5426\u5219update(i,1)\u4e14\u5220\u53bb\u524d\u4e00\u4e2a\n\n\u6240\u4ee5\u53c8\u9700\u8981\u4e00\u4e2a\u6570\u7ec4Glod\u6765\u8bb0\u5f55\u524d\u4e00\u4e2a\u8d1d\u58f3\u7684\u5730\u5740\n\n\u4fbf\u6709\u4e86\u5982\u4e0b\u4ee3\u7801\n\n## code\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 500001;\nconst int NUM = 1000001;\nint n,Bit[MAXN],Pr[MAXN],Glod[MAXN];\nint k[NUM];\n\ninline void Read(int *x)\n{\n\t*x = 0;\n\tchar a = getchar();\n\tbool f = 0;\n\twhile(a < '0'||a > '9') {if(a == '-') f = 1;a = getchar();}\n\twhile(a >= '0'&&a <= '9') {*x = *x * 10 + a - '0';a = getchar();}\n\tif(f)\n\t\t*x *= -1;\n}\nclass T\n{\n\tint lowbit(int x)\n\t{\n\t\treturn x & (-x);\n\t}\n\tpublic:\n\t\tbool operator <(const T w) const\n\t\t{\n\t\t\tif(r < w.r)\n\t\t\t\treturn 1;\n\t\t\tif(r == w.r)\n\t\t\t\tif(l < w.l)\n\t\t\t\t\treturn 1;\n\t\t\treturn 0;\n\t\t}\n\t\tint l,r,num;\n\t\tvoid update(int,int);\n\t\tint Sum(int);\n}a[MAXN];\nvoid T::update(int Index,int delta)\n{\n\tint i = Index;\n\tfor(;i <= n;i += lowbit(i))\n\t\tBit[i] += delta;\n}\nint T::Sum(int Index)\n{\n\tint ans = 0,i = Index;\n\tfor(;i > 0;i -= lowbit(i))\n\t\tans += Bit[i];\n\treturn ans;\n}\nint  main()\n{\n\tint i,m;\n\tRead(&n);\n\tfor(i = 1;i <= n;i++)\n\t\tscanf(\"%d\",&Glod[i]);\n\tRead(&m);\n\tfor(i = 1;i <= m;i++)\n\t{\n\t\tRead(&a[i].l),Read(&a[i].r);\n\t\ta[i].num = i;\t\n\t}\n\tsort(a + 1,a + 1 + m);\n\tint q = 1;\n\tfor(i = 1;i <= a[m].r;i++)\n\t{\n\t\tif(!k[Glod[i]])\n\t\t{\n\t\t\tk[Glod[i]] = i;\n\t\t\ta[i].update(i,1);\n\t\t} else {\n\t\t\ta[i].update(k[Glod[i]],-1);\n\t\t\tk[Glod[i]] = i;\n\t\t\ta[i].update(i,1);\n\t\t}\n\t\twhile(i == a[q].r)\n\t\t{\n\t\t\tPr[a[q].num] = a[q].Sum(a[q].r) - a[q].Sum(a[q].l - 1);\n\t\t\tq++;\n\t\t}\n\t}\n\tfor(i = 1;i < m;i++)\n\t\tprintf(\"%d\\n\",Pr[i]);\n\tprintf(\"%d\",Pr[m]);\n\treturn 0;\n}\n\n```",
        "postTime": 1543904011,
        "uid": 73992,
        "name": "resftlmuttmotw",
        "ccfLevel": 0,
        "title": "HH\u7684\u9879\u94fe---\u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "\u697c\u4e0b\u5927\u795e\u7684\u6811\u72b6\u6570\u7ec4\u8bb2\u7684\u5f88\u597d\uff0c\u90a3\u849f\u84bb\u7684\u6211\u5c31\u8bb2\u4e00\u4e0b\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\u5427\uff08\u56e0\u4e3a\u5e76\u4e0d\u4f1a\u6811\u72b6\u6570\u7ec4\uff09\n\n\u9996\u5148\u8fd9\u9898\u4e0d\u80fd\u50cf\u5927\u591a\u6570\u9898\u76ee\u4e00\u6837\u52a8\u6001\u6c42\u89e3\uff0c\u9700\u8981\u5148\u9884\u5904\u7406\uff0c\u5373\u628a\u6240\u6709\u7684\u8be2\u95ee\u6309\u7167\u5de6\u8fb9\u754c\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u7b2c[i+1]\u4e2a\u8be2\u95ee\u7684\u5de6\u8fb9\u754c\u603b\u662f\u4e0e\u7b2c[i]\u4e2a\u8be2\u95ee\u7684\u5de6\u8fb9\u754c\u6709\u4e00\u6bb5\u8ddd\u79bb[L~R]\uff08\u5f53\u7136\u53ef\u80fd\u4e3a0\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6bb5\u533a\u95f4[L~R]\u5185\u7684\u503c\u5bf9\u540e\u9762\u7684\u7b54\u6848\u662f\u6ca1\u6709\u8d21\u732e\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2aNEXT\u6570\u7ec4\u6765\u8bb0\u5f55now(L<=now<=R)\u8fd9\u4e2a\u4f4d\u7f6e\u540e\u9762\u7684\u3001\u4e14\u6700\u63a5\u8fd1now\u7684\u3001\u4e0enow\u4f4d\u7f6e\u79cd\u7c7b\u76f8\u540c\u7684\u8d1d\u58f3\u7684\u4f4d\u7f6e\uff08\u53ef\u80fd\u6709\u70b9\u62d7\u53e3\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u628a\u8fd9\u4e2a\u4f4d\u7f6e\u8bb0\u4e3anew\uff09\uff0c\u7136\u540e\u6bcf\u4e00\u6b21\u8be2\u95ee\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7528[L~R]\u8fd9\u4e2a\u533a\u95f4\u66f4\u65b0\u540e\u9762\u7684\u72b6\u6001\uff0c\u628anew\u7684\u4f4d\u7f6e\u7684\u503c\u4ece0\u6539\u53d8\u62101\u5373\u53ef\uff0c\u7136\u540e\u5c31\u662f\u7b80\u5355\u7684\u533a\u95f4\u6c42\u548c\u4e86\uff08\u56e0\u4e3a\u6392\u8fc7\u5e8f\u6240\u4ee5\u4e0d\u7528\u66f4\u6539[L~R]\u7684\u503c\uff0c\u56e0\u4e3a\u5bf9\u4e4b\u540e\u7684\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff09\n\n\u9644\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\uff1a\n\n```cpp\n\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct A{\n    int l,r,sx,ans;\n};\nA ask[200005],a[400005];\nint next[50005],pre[50005],b[50005],x[50005],n,m;\nbool cmp1(A x,A y){\n    if (x.l==y.l) return x.r<y.r;\n    else return x.l<y.l;\n}\nbool cmp2(A x,A y){\n    return x.sx<y.sx;\n}\nvoid buildtree(int pos,int l,int r){\n    a[pos].l=l; a[pos].r=r;\n    if (l==r) {a[pos].ans=b[l];return;}\n    int mid=(l+r)>>1;\n    buildtree(pos<<1,l,mid);\n    buildtree(pos<<1|1,mid+1,r);\n    a[pos].ans=a[pos<<1].ans+a[pos<<1|1].ans;\n}\nvoid updata(int pos,int goal){\n    if (a[pos].l==goal && a[pos].r==goal){\n        b[goal]=1; a[pos].ans=b[goal]; return;\n    }\n    int mid=(a[pos].l+a[pos].r)>>1;\n    if (goal<=mid) updata(pos<<1,goal);\n    else updata(pos<<1|1,goal);\n    a[pos].ans=a[pos<<1].ans+a[pos<<1|1].ans;\n}\nint asktree(int pos,int l,int r){\n    if (a[pos].l==l && a[pos].r==r) return a[pos].ans;\n    int mid=(a[pos].l+a[pos].r)>>1;\n    if (r<=mid) return asktree(pos<<1,l,r);\n    else if (l>mid) return asktree(pos<<1|1,l,r);\n    else return (asktree(pos<<1,l,mid)+asktree(pos<<1|1,mid+1,r));\n}\nint main(){\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;i++){\n        scanf(\"%d\",&x[i]);\n        next[pre[x[i]]]=i;\n        if (!pre[x[i]]) b[i]=1;\n        pre[x[i]]=i;\n    }\n    buildtree(1,1,n);\n    scanf(\"%d\",&m);\n    for (int i=1;i<=m;i++){\n        scanf(\"%d%d\",&ask[i].l,&ask[i].r);\n        ask[i].sx=i;\n    }\n    sort(ask+1,ask+m+1,cmp1);\n    ask[0].l=1;\n    for (int i=1;i<=m;i++){\n        if (ask[i-1].l!=ask[i].l)\n            for (int j=ask[i-1].l;j<=ask[i].l-1;j++)\n                if (next[j]) updata(1,next[j]);\n        ask[i].ans=asktree(1,ask[i].l,ask[i].r);\n    }\n    sort(ask+1,ask+m+1,cmp2);\n    for (int i=1;i<=m;i++)\n        printf(\"%d\\n\",ask[i].ans);\n    return 0;\n}\n```",
        "postTime": 1457854994,
        "uid": 9193,
        "name": "a526955194",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "# \u6811\u72b6\u6570\u7ec4\u6211\u6765\u4e86\n\n\u8fd9\u9898\u83ab\u961f\u548c\u4e3b\u5e2d\u6811\u505a\u7684\u6bd4\u8f83\u591a,\u4f46\u6211\u4e2a\u4eba\u89c9\u5f97\u6811\u72b6\u6570\u7ec4\u6bd4\u8f83\u677f\u5b50\u554a......\n\n\u6574\u4e2a\u597d\u50cf\u5c31\u662f\u5728\u6572\u677f\u5b50\u4e0e\u8f93\u5165\u8f93\u51fa\u7684\u8fc7\u7a0bemmm...\n\n\u5bf9\u4e8e\u82e5\u5e72\u4e2a\u8be2\u95ee\u7684\u533a\u95f4[l,r]\uff0c\u5982\u679c\u4ed6\u4eec\u7684r\u90fd\u76f8\u7b49\u7684\u8bdd\uff0c\u90a3\u4e48\u9879\u94fe\u4e2d\u51fa\u73b0\u7684\u540c\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u5b9a\u662f\u53ea\u5173\u5fc3\u51fa\u73b0\u5728\u6700\u53f3\u8fb9\u7684\u90a3\u4e00\u4e2a\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u67e5\u8be2\u7684\u533a\u95f4\u6309\u7167r\u6765\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6765\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u3002\n\n\u90a3\u4e48\uff0c\u5c31\u662f\u5728\u52a8\u6001\u7684\u66f4\u65b0\uff0c\u5982\u679c\u6b64\u65f6\u6709\u4e00\u4e2a\u8be2\u95ee[L,R]\uff0c\u90a3\u4e48\u76f4\u63a5\u6c42sum(R)-sum(L-1)\u5c31\u662f\u7b54\u6848\u3002\n\n\u987a\u4fbf\u732e\u4e0a\u6211\u7684blog:https://www.luogu.org/blog/Root-std-admin/\n\n\u64b8\u4ee3\u7801:\n\n```cpp\n//Written By:Jason_Root\n//Time Limit : 1000 MS\n//Memory Limit : 65536 KB\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf = 0x7f7f7f7f; \nconst int MAXN = 1e6+1000;\nconst int MAXK = 1e6+1000;\ninline int read() { //\u5feb\u8bfb \n\tchar ch = getchar();\n\tint x = 0, f = 1;\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile('0' <= ch && ch <= '9') {\n\t\tx = x * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x * f;\n}\ninline int max(int x1,int x2) { //\u53d6\u6700\u5927\u503c \n\treturn x1>x2 ? x1 : x2;\n}\nstruct data {\n\tint L,R,ad; //\u5de6\u53f3\u8fb9\u754c\u53ca\u539f\u4f4d\u7f6e\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u79bb\u7ebf\u6392\u5e8f\u540e\u5904\u7406\uff09\n} a[MAXN];\nint sum[MAXN],ans[MAXN],nxt[MAXN],head[MAXK],n,m,mx,num[MAXN];\ninline int lowbit(int x) {\n\treturn x&(-x); //\u6811\u72b6\u6570\u7ec4lowbit \n}\ninline void add(int x,int v) {\n\tfor(; x <= n; x+= lowbit(x)) {\n\t\tsum[x]+= v;\n\t}\n\t//\u6811\u72b6\u6570\u7ec4\u66f4\u65b0\u64cd\u4f5c \n}\ninline int count(int x) {\n\tint tot = 0;\n\tfor(; x; x-= lowbit(x)) {\n\t\ttot+= sum[x];\n\t}\n\treturn tot;\n\t//\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u64cd\u4f5c \n}\ninline bool cmp(const data x1,const data x2) { //sort\u51fd\u6570\u7684cmp \n\treturn x1.L==x2.L ? x1.R<x2.R : x1.L<x2.L;\n}\nvoid func() {\n\tn = read();\n\tfor(int i = 1; i <= n; i++) {\n\t\tnum[i] = read();\n\t}\n\tfor(int i = n; i >= 1; i--) {\n\t\tnxt[i] = head[num[i]];\n\t\thead[num[i]] = i;\n\t\tmx = max(mx,num[i]);\n\t}\n\tm = read();\n\tfor(int i = 1; i <= m; i++) {\n\t\ta[i].L = read();\n\t\ta[i].R = read();\n\t\ta[i].ad = i; //\u5b58\u50a8\u521d\u59cb\u4f4d\u7f6e\n\t}\n\tsort(a+1,a+m+1,cmp); //\u6309R\u6392\u5e8f\n\tfor(int i = 1; i <= mx; i++) {\n\t\tif(head[i]) {\n\t\t\tadd(head[i],1); //\u6253\u6807\u8bb0 \n\t\t}\n\t}\n\tint now = 1;\n\tfor(int i = 1; i <= m; i++) {\n\t\twhile(now < a[i].L) {\n\t\t\tif(nxt[now]){\n\t\t\t\tadd(nxt[now],1);\n\t\t\t}\n\t\t\tnow++;\n\t\t}\n\t\tans[a[i].ad] = count(a[i].R)-count(a[i].L-1); //\u6309\u8be2\u95ee\u7f16\u53f7\u5b58\u50a8\u6bcf\u7ec4\u8be2\u95ee\u7684\u7ed3\u679c\n\t}\n\tfor(int i = 1; i <= m; i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn;\n}\nint main() {\n\tfunc();\n\treturn 0;\n}\n```\n\u597d\u50cf\u6811\u72b6\u6570\u7ec4\u9898\u89e3\u90fd\u5dee\u4e0d\u591a\u7684\u4e9a\u5b502333...\n\n\u771f\u5fc3\u611f\u8c22\u5927\u5bb6\u89c2\u770b,\u8c22\u8c22!!!",
        "postTime": 1569120645,
        "uid": 182231,
        "name": "\u9f99\u884c\u9f98\u9f98",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u5355\u8c03\u961f\u5217\uff08\u4e0d\u77e5\u9053\u7b97\u4e0d\u7b97\uff09+\u7ebf\u6bb5\u6811\u3002\n\n\u6211\u4eec\u5148\u628a\u8be2\u95ee\u5b58\u4e0b\u6765\uff0c\u4ee5\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\n\n\u679a\u4e3e\u4efb\u4f55\u4e00\u4e2ai\uff0c\u786e\u4fddi<=\u73b0\u5728\u67e5\u8be2\u7684\u53f3\u7aef\u70b9r\u3002\n\n\u5982\u679cCk\u8868\u793a\u4e0a\u4e00\u6b21k\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u5bf9\u4e8eai\uff0c\u4fdd\u8bc1Cai\u4e00\u5b9a\u662fi\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u53d8\u5220\u53bbCai\u4e0a\u4e00\u6b21\u7684\u5730\u65b9\u7684\u90a3\u4e2a\u503c\uff0c\u5e76\u5c06Cai\u8d4b\u503c\u4e3ai\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint tr[1000005];\nint a[1000005];\nint ans[1000005];\nint c[1000005];\nvector<int> y[1000005];\nstruct ha\n{\n    int l,r,v;\n}b[4000005];\nint n,m;\n\nvoid del(int l,int r,int p,int id)\n{\n    //cout<<\"d: \"<<l<<\" \"<<r<<\" \"<<p<<\" \"<<id<<endl;\n    if(l==r&&l==p)\n    {\n        tr[id]=0;\n        return ;\n    }\n    int mid=(l+r)/2;\n    if(p<=mid)del(l,mid,p,id*2);\n    else del(mid+1,r,p,id*2+1);\n    tr[id]=tr[id*2]+tr[id*2+1];\n}\n\nvoid update(int l,int r,int p,int id)\n{\n    //cout<<\"u: \"<<l<<\" \"<<r<<\" \"<<p<<\" \"<<id<<endl;\n    //system(\"pause\");\n    if(l==r&&l==p)\n    {\n        tr[id]=1;\n        return ;\n    }\n    int mid=(l+r)/2;\n    if(p<=mid)update(l,mid,p,id*2);\n    else update(mid+1,r,p,id*2+1);\n    tr[id]=tr[id*2]+tr[id*2+1];\n}\n\nint cck(int l,int r,int z,int y,int id)\n{\n    if(l==z&&r==y)\n    {\n        return tr[id];\n    }\n    int mid=(l+r)/2;\n    if(mid>=y)return cck(l,mid,z,y,id*2);\n    else if(mid<z)return cck(mid+1,r,z,y,id*2+1);\n    else return cck(l,mid,z,mid,id*2)+cck(mid+1,r,mid+1,y,id*2+1);\n}\n\nbool cmp(const ha &a,const ha &b)\n{\n    return a.r<b.r;\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&a[i]);\n    }\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&b[i].l,&b[i].r);\n        b[i].v=i;\n    }\n    sort(b+1,b+1+m,cmp);\n    for(int i=1;i<=m;i++)\n    {\n        y[b[i].r].push_back(i);\n    }\n\n    for(int i=1;i<=n;i++)\n    {\n        //cout<<i<<endl;\n        if(c[a[i]]==0)\n        {\n            c[a[i]]=i;\n            update(1,n,i,1);\n        }\n        else\n        {\n            del(1,n,c[a[i]],1);\n            c[a[i]]=i;\n            update(1,n,i,1);\n        }\n        for(int j=0;j<y[i].size();j++)\n        {\n            int k=y[i][j];\n            ans[b[k].v]=cck(1,n,b[k].l,b[k].r,1);\n        }\n    }\n    for(int i=1;i<=m;i++)\n    {\n        printf(\"%d\\n\",ans[i]);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1532407276,
        "uid": 34663,
        "name": "redegg",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u770b\u4e86\u5404\u5927\u9898\u89e3\u611f\u89c9\u8bb2\u7684\u90fd\u4e0d\u662f\u5f88\u8be6\u7ec6\u554a\n\n\u849f\u84bb\u6478\u7d22\u4e86\u534a\u5929\uff0c\u7ec8\u4e8eAC\u4e86\uff0c\u51b3\u5b9a\u5199\u4e00\u4e2a\u8bb2\u89e3\u8be6\u7ec6\u7684\u9898\u89e3\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\n\n\u6211\u8fd9\u4e2a\u7b97\u6cd5\u4e0d\u662f\u83ab\u961f\uff0c\u800c\u662f\u4e00\u79cd\u5728\u7ebf\u7b97\u6cd5\uff0c\u4e3b\u5e2d\u6811\uff0c\u975e\u5e38\u7075\u6d3b\uff0c\u53ef\u4ee5\u89e3\u51b3\u4e00\u5927\u7c7b\u95ee\u9898\n\n\u9996\u5148\uff0c\u76f4\u63a5\u5957\u7528\u5404\u79cd\u6811\u6ca1\u6cd5\u505a\u3002\u9700\u8981\u628a\u95ee\u9898\u7a0d\u7a0d\u8f6c\u6362\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u5408\u5e76\u533a\u95f4\u7684\u65f6\u5019\u662f\u5f88\u4e0d\u597d\u641e\u7684\uff0c\u4f46\u662f\u5982\u4e0b\u4e1c\u897f\u5f88\u597d\u7ef4\u62a4\n\n\u6bcf\u4e2a\u524d\u7f00\u533a\u95f4\u7684\u4e0d\u540c\u6570\u7684\u4e2a\u6570\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u7ef4\u62a4\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```cpp\nint l[1000001];\nint num[500000];\nint cnt;\nfor(int i=0;i<N;i++)\n{\n\tif(!l[a[i]])cnt++;\n\tnum[i]=cnt;\n\tl[a[i]]=1;\n}\n\n```\n\u5176\u4e2da\u6570\u7ec4\u662f\u8f93\u5165\u7684\u5e8f\u5217,l\u662f\u8f85\u52a9\u6570\u7ec4\n\n\u90a3\u4e48\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u6240\u6709\u5de6\u7aef\u70b9\u662f1\u7684\u8be2\u95ee\u7684\u7b54\u6848\u4e86\n\n\u73b0\u5728\u95ee\u9898\u662f\uff0c\u4e0d\u662f\u5de6\u7aef\u70b9\u4e3a1\u7684\u600e\u4e48\u529e\uff1f\n\n\u5982\u679c\u6211\u4eec\u628a\u7b2c\u4e00\u4e2a\u6570\u5220\u53bb\uff0c\u5c31\u5f97\u5230\u4e86\u4ece2\u5230\u6240\u6709\u53f3\u7aef\u70b9\u7684\u7b54\u6848\u4e86\n\n\u73b0\u5728\u8003\u8651\u53bb\u6389\u7b2c\u4e00\u4e2a\u6570\uff0c\u4f1a\u5bf9\u540e\u9762\u7684\u7b54\u6848\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\n\n\u5047\u8bbe\u6709\u5982\u4e0b\u6570\u5217\n\n1 2 3 4 5\n\n\u4ed6\u7684\u6bcf\u4e2a\u524d\u7f00\u533a\u95f4\u7684\u7b54\u6848\u662f\n\n1 2 3 4 5\n\n\u5982\u679c\u5220\u9664\u4e86\u7b2c\u4e00\u4e2a\u65701\n\u90a3\u540e\u9762\u56db\u4e2a\u533a\u95f4\u7b54\u6848\u90fd\u4f1a-1\uff0c\u56e0\u4e3a1\u8fd9\u4e2a\u6570\u4ec5\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u53bb\u6389\u5b83\u5c31\u7b49\u4e8e\u6ca1\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\n\n\u518d\u8003\u8651\u53e6\u4e00\u4e2a\u5e8f\u5217\n\n1 2 3 1 4\n\n\u5b83\u7684\u6240\u6709\u524d\u7f00\u533a\u95f4\u7684\u7b54\u6848\u662f\n\n1 2 3 3 4\n\n\u8fd9\u6b21\u5982\u679c\u628a1\u5220\u6389\uff0c\u524d\u4e24\u4e2a\u6570\u548c\u524d\u4e09\u4e2a\u6570\u7684\u533a\u95f4\u7684\u7b54\u6848\u90fd\u51cf\u4e861\uff0c\u5728\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e2d\uff0c1\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u524d\u56db\u4e2a\u6570\u548c\u524d\u4e94\u4e2a\u6570\u7684\u533a\u95f4\u6765\u8bf4\uff0c1\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u5220\u6389\u6700\u5f00\u59cb\u76841\u5bf9\u8fd9\u4e24\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\n\n\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0c\u5220\u6389\u6700\u5de6\u4e00\u4e2a\u6570\u4e4b\u540e\uff0c\u4ece\u8fd9\u4e2a\u6570\u5f00\u59cb\uff0c\u5230\u8fd9\u4e2a\u6570\u4e0b\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u4e4b\u524d\u7684\u6240\u6709\u524d\u7f00\u533a\u95f4\u7684\u7b54\u6848\u90fd\u4f1a-1\uff0c\u800c\u540e\u9762\u7684\u524d\u7f00\u533a\u95f4\u56e0\u4e3a\u6709\u591a\u4e2a\u8fd9\u4e2a\u6570\uff0c\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\n\n\u90a3\u4e48\uff0c\u533a\u95f4\u51cf\u4e00\u548c\u5355\u70b9\u67e5\u8be2\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u662f\u5f88\u5bb9\u6613\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\u7684\uff0c\n\u6211\u4eec\u628a\u6240\u6709\u8be2\u95ee\u8bfb\u8fdb\u6765\uff0c\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\n\n\u63a5\u4e0b\u6765\u8003\u8651\u66f4\u52a0\u7075\u6d3b\u7684\u5728\u7ebf\u7b97\u6cd5\uff0c\u8fd9\u5c31\u9700\u8981\u7528\u5230\u4e3b\u5e2d\u6811\u4e86\n\n\u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u662f\u8fd9\u6837\u7684\n\n\u8003\u8651\u4e00\u4e2a\u95ee\u9898\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u67e5\u8be2\u533a\u95f4\u7b2cK\u5927\n\n\u5982\u679c\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\u6574\u4e2a\u5e8f\u5217\u7684\u7b2cK\u5927\uff0c\u53ef\u4ee5\u7528\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u89e3\u51b3\n\n\u4e3a\u4e86\u67e5\u8be2\u533a\u95f4\u5185\u7684\u7b2cK\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\n\n\u5efa\u7acbN+1\u68f5\u7ebf\u6bb5\u6811\uff0c\u5206\u522b\u8868\u793a\u524di\u4e2a\u6570\u7684\u6743\u503c\u7ebf\u6bb5\u6811\n\ni\u4e3a0\u65f6\uff0c\u5c31\u662f\u4e00\u9897\u201c\u7a7a\u6811\u201d\n\n\u8fd9\u91cc\u8ddf\u524d\u7f00\u548c\u7684\u601d\u60f3\u5dee\u4e0d\u591a\n\n\u6bcf\u6b21\u67e5\u8be2\uff0c\u6211\u4eec\u67e5\u8be2\u7b2cr\u68f5\u6811\u548c\u7b2cl-1\u68f5\u6811\u7684\u201c\u5dee\u201d\n\n\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u6bb5\u533a\u95f4\u5185\u5904\u5728\u67d0\u4e2a\u503c\u57df\u7684\u6570\u7684\u4e2a\u6570\n\n\u4f46\u662f\uff0c\u5efa\u7acbN+1\u68f5\u7ebf\u6bb5\u6811\u7684\u65f6\u7a7a\u4ee3\u4ef7\u663e\u7136\u90fd\u662f\u65e0\u6cd5\u627f\u53d7\u7684\n\n\u89c2\u5bdf\u53d1\u73b0\uff0c\u5982\u679c\u5df2\u7ecf\u6709\u4e86i\u68f5\u7ebf\u6bb5\u6811\uff0c\u628a\u7b2ci+1\u4e2a\u6570\u52a0\u8fdb\u53bb\u5c31\u5f97\u5230\u4e86\u7b2ci+1\u68f5\u7ebf\u6bb5\u6811\n\n\u8fd9\u662f\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\uff0c\u800c\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u53ea\u4f1a\u6539\u53d8O(logn)\u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u8282\u70b9\u65b0\u5206\u914d\u7a7a\u95f4\uff0c\u800c\u5176\u4ed6\u8282\u70b9\u6307\u5411\u4e0a\u4e00\u68f5\u6811\u7684\u5bf9\u5e94\u8282\u70b9\u5373\u53ef\uff0c\u8fd9\u6837\u65f6\u7a7a\u5c31\u5728O(nlogn)\u7ea7\u522b\uff0c\u53ef\u4ee5\u627f\u53d7\n\n\u8fd9\u9898\u8f6c\u5316\u4e3a\u5728\u7ebf\u5c31\u662f\u8fd9\u6837\u7c7b\u4f3c\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u5220\u9664\u5de6\u7aef\u70b9\u7684\u6570\u540e\u65b0\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u53ea\u4e0d\u8fc7\u7531\u4e0a\u9762\u7684\u5355\u70b9\u4fee\u6539\u53d8\u6210\u4e86\u533a\u95f4\u4fee\u6539\n\n\u5bf9\u4e8e\u521a\u597d\u8986\u76d6\u5230\u7684\u533a\u95f4\uff0c\u65b0\u5efa\u8282\u70b9\uff0c\u6ca1\u6709\u8986\u76d6\u6389\u7684\u533a\u95f4\uff0c\u6307\u5411\u4e0a\u4e00\u68f5\u6811\u7684\u5bf9\u5e94\u8282\u70b9\uff0c\u800c\u8986\u76d6\u5230\u7684\u533a\u95f4\u7684\u5b50\u8282\u70b9\u662f\u4e0d\u80fd\u65b0\u5efa\u7684\uff0c\u5426\u5219\u65f6\u7a7a\u590d\u6742\u5ea6\u65e0\u6cd5\u627f\u53d7\uff0c\u4e5f\u9700\u8981\u6307\u56de\u4e0a\u4e00\u68f5\u6811\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u6709\u95ee\u9898\uff0c\u6807\u8bb0\u4e0b\u653e\u4f1a\u5f71\u54cd\u522b\u7684\u7ebf\u6bb5\u6811\n\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u8fd9\u6837\u4e00\u4e2a\u4e1c\u897f\uff1a\u6807\u8bb0\u6c38\u4e45\u5316\n\n\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u67e5\u8be2\u65f6\u4e0d\u4e0b\u4f20\u6807\u8bb0\uff0c\u4ec5\u4ec5\u7edf\u8ba1\u8fd9\u4e2a\u6807\u8bb0\u7684\u5f71\u54cd\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5bf9\u522b\u7684\u7ebf\u6bb5\u6811\u4ea7\u751f\u5f71\u54cd\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<stdio.h>\n#include<string.h>\nusing namespace std;\ntypedef struct Ts\n{\n\tint L,R;\n\tTs*l,*r;\n\tint sub;\n}Ts;\nint num[500000];\nTs mem[5000000],*Malloc=mem;\nTs*root[500000];\nint n[500000];\nint l[1000001];\nint a[500000];\nTs*build(int L,int R)\n{\n\tstatic int cnt=0;\n\tTs*p=Malloc++;\n\tp->L=L;\n\tp->R=R;\n\tif(L!=R)\n\t{\n\t\tint mid=L+R>>1;\n\t\tp->l=build(L,mid);\n\t\tp->r=build(mid+1,R);\n\t}\n\telse\n\t{\n\t\tif(!l[a[L]])cnt++;\n\t\tnum[L]=cnt;\n\t\tl[a[L]]=1;\n\t}\n\treturn p;\n}\nvoid build(Ts*l,Ts*&t,int L,int R)\n{\n\tt=Malloc++;\n\tt->L=l->L;\n\tt->R=l->R;\n\tif(l->L==L&&l->R==R)\n\t{\n\t\tt->l=l->l;\n\t\tt->r=l->r;\n\t\tt->sub=l->sub+1;\n\t}\n\telse\n\t{\n\t\tint mid=l->l->R;\n\t\tt->sub=l->sub;\n\t\tif(R<=mid)\n\t\t{\n\t\t\tt->r=l->r;\n\t\t\tbuild(l->l,t->l,L,R);\n\t\t}\n\t\telse if(L>mid)\n\t\t{\n\t\t\tt->l=l->l;\n\t\t\tbuild(l->r,t->r,L,R);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbuild(l->l,t->l,L,mid);\n\t\t\tbuild(l->r,t->r,mid+1,R);\n\t\t}\n\t}\n}\nint chaxun_(Ts*t,int x)\n{\n\tif(t->L==t->R)\n\t{\n\t\treturn num[x]-t->sub;\n\t}\n\telse\n\t{\n\t\tif(x<=t->l->R)return chaxun_(t->l,x)-t->sub;\n\t\telse return chaxun_(t->r,x)-t->sub;\n\t}\n}\nchar stack[100];\nvoid print(Ts*const t,int sh)\n{\n\tif(t)\n\t{\n\t\tint i;\n\t\tfor(i=0;i<sh-1;i++)\n\t\t{\n\t\t\tif(stack[i])printf(\"\u2502   \");\n            else printf(\"    \");\n\t\t}\n        if(sh)\n        {\n            if(stack[i])printf(\"\u251c\u2500\u2500\u2500\");\n            else printf(\"\u2514\u2500\u2500\u2500\");\n        }\n        printf(\"%d %d %d\\n\",t->L+1,t->R+1,t->sub);\n        stack[sh]=1;\n        print(t->l,sh+1);\n        stack[sh]=0;\n        print(t->r,sh+1);\n\t}\n}\nint chaxun(int L,int R)\n{\n\treturn chaxun_(root[L],R);\n}\nint main()\n{\n\tint N,Q;\n\tint i,j;\n\tscanf(\"%d\",&N);\n\tfor(i=0;i<1000001;i++)l[i]=N;\n\tfor(i=0;i<N;i++)\n\t{\n\t\tscanf(\"%d\",a+i);\n\t}\n\tfor(i=N-1;~i;i--)\n\t{\n\t\tn[i]=l[a[i]];\n\t\tl[a[i]]=i;\n\t}\n\tmemset(l,0,sizeof l);\n\troot[0]=build(0,N-1);\n\tfor(i=1;i<N;i++)\n\t\tbuild(root[i-1],root[i],i-1,n[i-1]-1);\n\tscanf(\"%d\",&Q);\n\twhile(Q--)\n\t{\n\t\tscanf(\"%d%d\",&i,&j);\n\t\tprintf(\"%d\\n\",chaxun(i-1,j-1));\n\t}\n}\n\n```\n\n\u4ee3\u7801\u4e2dprint\u51fd\u6570\u662f\u6253\u5370\u7ebf\u6bb5\u6811\u7528\u7684\n\n\u53e6\uff0c\u6211\u559c\u6b22\u4ece0\u5f00\u59cb\u7f16\u53f7\uff0c\u6240\u4ee5main\u91cc\u6709\u51e0\u5904-1",
        "postTime": 1523786121,
        "uid": 58279,
        "name": "cuking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u600e\u4e48\u5199\u83ab\u961f\u7684\u4eba\u8fd9\u4e48\u5c11\uff0c\u8fd9\u662f\u4e00\u9053\u83ab\u961f\u7ecf\u5178\u57fa\u7840\u9898\u554a\n\n\n\u5176\u5b9e\u5c31\u662f\u5206\u5757\u5728\u533a\u95f4\u4e2d\u67e5\u627e\uff0c\u4f7f\u5f97\u8be2\u95ee\u533a\u95f4\u4e0e\u5f53\u524d\u533a\u95f4\u76f8\u540c\u3002\n\n\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n'''cpp\n\n\n\n\n\n\n    \n    \n    \n    \n        \n    \n    \n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct Q{\n    int l,r,id;\n    bool operator < (const Q &q) const{\n        return (l/500)==(q.l/500)?(r<q.r):((l/500)<(q.l/500));\n    }\n};\nstatic const int maxm=1e6+10;\nQ ask[maxm];\nint num[maxm],A[maxm],ans[maxm];\nint n,m,l=1,r=0,sum=0;\nvoid add(int C){\n    num[C]++;\n    if(num[C]==1)\n        sum++;\n}\nvoid del(int C){\n    num[C]--;\n    if(num[C]==0)\n        sum--;\n}\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&A[i]);\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&ask[i].l,&ask[i].r);\n        ask[i].id=i;\n    }\n    sort(ask+1,ask+m+1);\n    for(int i=1;i<=m;i++){\n        while(r<ask[i].r){\n            r++;\n            add(A[r]);\n        }\n        while(r>ask[i].r){\n            del(A[r]);\n            r--;\n        }\n        while(l<ask[i].l){           \n            del(A[l]);\n            l++;\n        }\n        while(l>ask[i].l){\n            l--;\n            add(A[l]);\n        }\n        ans[ask[i].id]=sum;\n    }\n    for(int i=1;i<=m;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n'''\n```",
        "postTime": 1484812995,
        "uid": 20115,
        "name": "huxulin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "//\u88ab\u4e00\u9053\u677f\u5b50\u9898\u5361\u8fd9\u4e48\u4e45\uff0c\u8fd8\u6ca1\u7528\u79bb\u6563\u5316\uff0c\u6211\u8fd9\u662f\u6709\u591a\u83dc\n\n//EMMMMMM\uff0c\uff0c\uff0c\u7ecf\u5178\u83ab\u961f\u6c34\u9898\uff0c\u80fd\u89e3\u91ca\u6e05\u695a\u4ec0\u4e48\u662f\u83ab\u961f\uff08\u9ad8\u7ea7\u66b4\u529b\u6700\u597d\u5566\uff09\n\n//\u770b\u53d8\u91cf\u540d\uff0c\u51fd\u6570\u540d\u5e94\u8be5\u80fd\u770b\u61c2\uff0c\uff0c\uff0c(\u5173\u4e8ezkj\u6570\u7ec4\uff1azkj\u662f\u4e00\u4f4d\u5f02\u5e38\u5f3a\u5927\u7684\u795e\u7287\u8fd9\u4e2a\u5fc5\u987b%\n\n```cpp\n//\u5b9e\u9645\u4e0a\u8868\u793a\u67d0\u79cd\u4e1c\u897f\u76ee\u524d\u6709\u591a\u5c11\u4e2a \n//\u83ab\u961f\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u628a\u8303\u56f4\u5206\u5757\uff0c\u5de6\u7aef\u70b9\u5728\u4e00\u5757\u7684\uff0c\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\n//\u4e0d\u5728\u4e00\u5757\u7684\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\n//\u7531[l,r]\u5f97\u5230[l+1,r],[l,r+1],[l-1,r],[l,r-1]\n//\u7136\u540e\u4f9d\u6b21\u5904\u7406\u5c31OK\n//\u5177\u4f53\u9898\u76ee\u5177\u4f53\u5bf9\u5f85 \n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<cctype>\n#define maxn 2000001\nusing namespace std;\nint i,n,m,kuai,l,r,ans,shuyu[maxn],zhonglei[maxn],zkj[maxn];\nint kuaidu()\n{\n    int k=0,f=1;\n    char c=getchar();\n    for(;!isdigit(c);c=getchar())\n      if(c=='-')\n        f=-1;\n    for(;isdigit(c);c=getchar())\n      k=k*10+c-'0';\n    return k*f;\n} \nvoid kuaishu(int x)\n{\n    int zhizhen=0;\n    char c[15];\n    while(x)\n      {\n          zhizhen++;\n          c[zhizhen]=(x%10)+48;\n          x/=10;\n      }\n    while(zhizhen)\n      {\n        putchar(c[zhizhen]);\n        zhizhen--;\n      }\n    putchar('\\n');\n}\n```\nclass xunwen\n{\npublic:\n\n```cpp\n        int zuo,you,bianhao,daan;\n}question[maxn];\nbool ankuaipaixu(xunwen a,xunwen b)\n{\n   if(shuyu[a.zuo]==shuyu[b.zuo])\n     return a.you<b.you;\n   return a.zuo<b.zuo;    \n}\nbool anbianhaopaixu(xunwen a,xunwen b)\n{\n    return a.bianhao<b.bianhao;\n}\nint main()\n{\n    n=kuaidu();\n    for(i=1;i<=n;i++)\n      zhonglei[i]=kuaidu();\n    m=kuaidu();\n    kuai=(int)sqrt(n);\n    for(i=1;i<=n;i++)//\u6bcf\u4e2a\u6570\u5206\u5757 \n      shuyu[i]=(i-1)/kuai+1;\n    for(i=1;i<=m;i++)\n    {\n        question[i].zuo=kuaidu();\n        question[i].you=kuaidu();\n        question[i].bianhao=i;\n    }\n    sort(question+1,question+m+1,ankuaipaixu);\n    for(i=1;i<=m;i++)\n    {\n        while(r<question[i].you)\n          {\n              r++;\n              zkj[zhonglei[r]]++;\n              if(zkj[zhonglei[r]]==1)\n                ans++;\n          } \n        while(r>question[i].you)\n          {\n              zkj[zhonglei[r]]--;\n              if(zkj[zhonglei[r]]==0)\n                ans--;\n              r--;\n          } \n        while(l<question[i].zuo)\n          {\n              zkj[zhonglei[l]]--;\n              if(zkj[zhonglei[l]]==0)\n                ans--;\n              l++;\n          } \n        while(l>question[i].zuo)\n          {\n              l--;\n              zkj[zhonglei[l]]++;\n              if(zkj[zhonglei[l]]==1)\n                ans++;\n          } \n        question[i].daan=ans;\n    }  \n    sort(question+1,question+m+1,anbianhaopaixu);\n    for(i=1;i<=m;i++)\n      kuaishu(question[i].daan);\n    return 0;\n}\n```",
        "postTime": 1507876000,
        "uid": 30956,
        "name": "\u524d\u536b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "/\\*\n\u79bb\u7ebf\u5904\u7406\u3002\n\n1\u3001\u8bb0\u5f55\u6bcf\u4e00\u79cd\u8d1d\u58f3\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5c06\u6240\u6709\u8d1d\u58f3\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u52a0\u5165\u7ebf\u6bb5\u6811\u3002\n\n2\u3001\u5b58\u50a8\u6bcf\u4e00\u6b21\u67e5\u8be2\uff0c\u5c06\u67e5\u8be2\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\uff08\u5982\u679c\u4e0d\u8fdb\u884c\u6392\u5e8f\uff0c\u90a3\u4e9b\u5de6\u7aef\u70b9\u9760\u53f3\u7684\u4f1a\u65e0\u6cd5\u8fdb\u884c\u67e5\u8be2\uff0c\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u4e2d\u6709\u76f8\u540c\u7684\u8d1d\u58f3\uff09\n\n3\u3001\u6309\u6392\u597d\u7684\u987a\u5e8f\u8fdb\u884c\u67e5\u8be2\uff0c\u5982\u679c\u5f53\u524d\u8d1d\u58f3\u7684\u4f4d\u7f6e\u6bd4\u67e5\u8be2\u7684\u4f4d\u7f6e\u5c0f\uff0c\u90a3\u4e48\u5c31\u5c06\u5f53\u524d\u8d1d\u58f3\u52a0\u5165\u7ebf\u6bb5\u6811\uff0c\u8d1d\u58f3\u7f16\u53f7++\u3002\uff08\u56e0\u4e3a\u5982\u679c\u5f53\u524d\u8fd9\u79cd\u8d1d\u58f3\u6709nxt\u4e14\u7f16\u53f7\u5c0f\u4e8e\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u5728\u67e5\u8be2\u4e2d\u51fa\u73b0\uff0c\u8981\u6dfb\u52a0\u8fdb\u53bb\uff09\n\n\\*/\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint n,m,l,r,maxn;\nint tree[50005],first[50005],nxt[50005];\nint shell[1000005];\nstruct ASK\n{\n    int l,r,id,ans;\n}ask[200005];\ninline int read()\n{\n    int sum=0,f=1;\n    char c=getchar();\n    for(;(c<'0'||c>'9')&&c!='-';c=getchar());\n    if(c=='-')\n    {\n        f=-1;\n        c=getchar();\n    }\n    for(;c>='0'&&c<='9';c=getchar())\n    {\n        sum=sum*10+c-'0';\n    }\n    return sum*f;\n}\ninline int lowbit(int x)\n{\n    return x&(-x);\n}\ninline void update(int x)\n{\n    while(x<=n)\n    {\n        tree[x]++;\n        x+=lowbit(x);\n    }\n}\ninline int query(int x)\n{\n    int sum=0;\n    while(x)\n    {\n        sum+=tree[x];\n        x-=lowbit(x);\n    }\n    return sum;\n}\nbool cmp1(ASK a,ASK b)\n{\n    return a.l<b.l;\n}\nbool cmp2(ASK a,ASK b)\n{\n    return a.id<b.id;\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        shell[i]=read();        //\u8f93\u5165\u8d1d\u58f3\u7684\u7f16\u53f7 \n        maxn=max(shell[i],maxn);    //\u627e\u6700\u5927\u7684\u8d1d\u58f3\u7f16\u53f7 \n    }\n    for(int i=n;i;i--)        //\u5904\u7406\u5904\u6bcf\u79cd\u79cd\u8d1d\u58f3\u4e0d\u540c\u7684\u51fa\u73b0\u7684\u4f4d\u7f6e \n    {\n        nxt[i]=first[shell[i]];    //\u5f53\u524d\u8fd9\u79cd\u8d1d\u58f3\u4e0b\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3afirst[shell[i]]\u7684\u4f4d\u7f6e\uff08\u5012\u7740\u5faa\u73af\u7684\u4e0a\u4e00\u6b21\u5373\u4e3a\u6b63\u7740\u5faa\u73af\u7684\u4e0b\u4e00\u6b21\uff09 \n        first[shell[i]]=i;        //\u66f4\u65b0\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3ai\uff08\u56e0\u4e3a\u662f\u5012\u7740\u5faa\u73af\u7684\uff0ci\u8d8a\u6765\u8d8a\u5c0f\uff09 \n    }\n    for(int i=1;i<=n;i++)    //\u52a0\u503c \n    {\n        if(first[shell[i]]) update(first[shell[i]]),first[shell[i]]=0;    //\u5982\u679c\u5f53\u524d\u8fd9\u79cd\u8d1d\u58f3\u51fa\u73b0\u8fc7\u4e14\u6ca1\u52a0\u5165\u8fc7\uff0c\u5c06\u5b83\u52a0\u5165\u5230\u6811\u72b6\u6570\u7ec4\u4e2d \n    }\n    m=read();\n    for(int i=1;i<=m;i++)    //\u5b58\u50a8\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u4ee5\u79bb\u7ebf\u5904\u7406 \n    {\n        ask[i].l=read();ask[i].r=read();ask[i].id=i;\n    }\n    sort(ask+1,ask+m+1,cmp1);    //\u5c06\u8be2\u95ee\u6309\u5de6\u7aef\u70b9\u6392\u5e8f \n    for(int i=1,now=1;i<=m;i++)\n    {\n        while(now<ask[i].l)        //\u6dfb\u52a0\u8d1d\u58f3\u79cd\u7c7b \n        {\n            if(nxt[now]) update(nxt[now]);    //\u5982\u679c\u5f53\u524d\u8d1d\u58f3\u6709\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u52a0\u5165\u6811\u72b6\u6570\u7ec4\u4e2d \n            now++;        // \n        }\n        ask[i].ans=query(ask[i].r)-query(ask[i].l-1);    //\u67e5\u8be2\u533a\u95f4\u5185\u8d1d\u58f3\u7684\u79cd\u7c7b\u6570\uff0cquery\u67e5\u8be2\u7684\u662f\u524d\u7f00\u548c \n    }\n    sort(ask+1,ask+m+1,cmp2);    //\u5c06\u7b54\u6848\u6309\u987a\u5e8f\u6392\u597d\u8f93\u51fa \n    for(int i=1;i<=m;i++)\n    {\n        printf(\"%d\\n\",ask[i].ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1501158480,
        "uid": 39886,
        "name": "Drifterming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u636e\u89c2\u5bdf\uff0c\u6240\u6709\u63d0\u4ea4AC\u8bb0\u5f55\u4e2d\u6700\u5feb\u4ee3\u7801\uff0197MS\uff01\uff01\uff01\n\nC++\u6811\u72b6\u6570\u7ec4\u89e3\u6cd5+\u8bfb\u5165\u4f18\u5316+qsort+inline+register+\u8282\u7701\u5faa\u73af+\u8282\u7701\u6570\u7ec4+\u2026\u2026\n\n\n\u8bfb\u5165\u4f18\u5316\u5343\u4e07\u6ce8\u610f\uff0c\u4e00\u5f00\u59cb\u8bfb\u5165\u4f18\u5316\u5199\u8dea\u4e86\u2026\u2026\u8c03\u4e86\u534a\u5929\u90fdT\uff0c\u6700\u540escanf\u7adf\u7136\u8fc7\u4e86\uff0c\u624d\u53d1\u73b0\u8bfb\u5165\u4f18\u5316\u6709\u9519\n\nQAQ\n\n\n\n\n\n\n\n\n\n    \n    \n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 50000\n#define MAXM 200000\n#define MAXC 1000000\nint n,m,color,nex[MAXN+5],ans[MAXM+5],first[MAXC+5];\nstruct Quest\n{\n    int L,R,loc;\n}q[MAXM+5];\nint cmpl(const void *a , const void *b)\n{\n    Quest *c = (Quest*)a, *d = (Quest*)b;\n    return (c->L-d->L) ?: (c->R-d->R); \n}\ninline int read()\n{\n    int x=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n        ch=getchar();\n    while(ch>='0'&&ch<='9')\n        x=x*10+ch-'0',ch=getchar();\n    return x;\n}\nstruct Index_Tree\n{\n    int c[MAXN+5];\n    inline void Add(int i, int j)\n    {\n        for(; i <= n; i+=(i&(-i)))\n            c[i] += j;\n        return;\n    }\n    inline int Sum(int i)\n    {\n        int ans = 0;\n        for(; i; i-=(i&(-i)))\n            ans += c[i];\n        return ans;\n    }\n}T;\nint main()\n{\n    n = read();\n    for(register int i = 1; i <= n; first[color] = i, i++)\n        if(!first[color = read()])\n            T.Add(i,1);\n        else\n            nex[first[color]] = i;\n    m = read();\n    for(register int i = 1; i <= m; q[i].loc = i, i++)\n        q[i].L = read(), q[i].R = read();\n    qsort(q+1,m,sizeof(Quest),cmpl);\n    for(register int i = 1, j = 1, k; j <= m && i <= n; i++)\n    {\n        for(;j <= m && q[j].L == i && (k=T.Sum(i-1),1); j++)\n            ans[q[j].loc] = T.Sum(q[j].R)-k;\n        if(nex[i])\n            T.Add(nex[i],1),T.Add(i,-1);\n    }\n    for(register int i = 1; i <= m; i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1471424898,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "### [[SDOI2009]HH\u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972)\n\n### \u601d\u8def\n\n\u7531\u4e8e\u5e8f\u5217\u5185\u7684\u64cd\u4f5c\u53ea\u6709\u67e5\u8be2\u6ca1\u6709\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7b80\u5355\u7684\u79bb\u7ebf\uff0c\u5373\u5c06\u6240\u6709\u67e5\u8be2\u6309\u7167\u53f3\u533a\u95f4\u6392\u5e8f\uff0c\u7ef4\u62a4\u4e00\u68f5 $BIT$\uff0c\u7edf\u8ba1\u533a\u95f4 $[1, x]$ $(x$ \u4e3a $bit[x]$ \u7edf\u8ba1\u7684\u533a\u95f4$)$\uff0c\u7528\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u73cd\u73e0\u3002\n\n\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u4e00\u4e2a $vis$ \u6570\u7ec4\uff0c\u7edf\u8ba1\u989c\u8272 $i$ \u4e0a\u4e00\u6b21\u5728\u54ea\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u3002\u5982\u679c\u672a\u51fa\u73b0\u8fc7\uff0c\u5219\u76f4\u63a5\u5c06\u524d\u9762\u6bcf\u4e00\u4e2a\u72b6\u6001\u52a0\u4e00\uff0c\u5426\u5219\u5c06\u4e4b\u524d\u51fa\u73b0\u7684\u4f4d\u7f6e\u51cf\u4e00\uff0c\u5f53\u524d\u4f4d\u7f6e\u52a0\u4e00\uff0c\u5c31\u662f\u4e00\u4e2a\u524d\u7f00\u548c\u7684\u601d\u60f3\u3002\n\n### code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nvoid read (long long &x) { \n\tlong long f = 1; x = 0; char s = getchar (); while (s < '0' || s > '9') {if (s == '-') f = -1; s = getchar ();}\n\twhile (s >= '0' && s <= '9') {x = x * 10 + s - '0'; s = getchar ();} \n\tx *= f;\n}//\u4e0d\u52a0\u4f1a\u6b7b\u7684\u5f88\u60e8\nstruct st {\n\tlong long l, r, id;\n}k[1000005];\nlong long a[1000005], bit[1000005], n;\nbool cmp (st x, st y) {\n\treturn x.r < y.r;\n}\nlong long lowbit (long long x) {\n\treturn x & (-x);\n}\nvoid add (long long x, long long y) {\n\tfor (long long i = x; i <= n; i += lowbit (i)) bit[i] += y;\n}\nlong long sum (long long x) {\n\tlong long cnt = 0;\n\tfor (long long i = x; i >= 1; i -= lowbit (i)) cnt += bit[i];\n\treturn cnt;\n}\nlong long vis[1000005], ans[1000005];\nint main () {\n\tread (n);\n\tfor (long long i = 1; i <= n; i++) read (a[i]);\n\tlong long m;\n\tread (m);\n\tfor (long long i = 1; i <= m; i++) read (k[i].l), read (k[i].r), k[i].id = i;\n\tsort (k + 1, k + 1 + m, cmp);\n\tlong long last = 1;\n\tfor (long long i = 1; i <= m; i++) {\n\t\tfor (long long j = last; j <= k[i].r; j++) {\n\t\t\tif (vis[a[j]]) add (vis[a[j]], -1);\n\t\t\tadd (j, 1);\n\t\t\tvis[a[j]] = j;\n\t\t}\n\t\tlast = k[i].r + 1;\n\t\tans[k[i].id] = sum (k[i].r) - sum (k[i].l - 1);\n\t}\n\tfor (long long i = 1; i <= m; i++) printf (\"%lld\\n\", ans[i]);//\u6309\u6807\u53f7\u8f93\u51fa\n\treturn 0;\n}\n\n```",
        "postTime": 1579313117,
        "uid": 161847,
        "name": "Para",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u4e00\u9053\u5f88\u6709\u542f\u53d1\u6027\u7684\u9898\u76ee\u3002\n\n1. \u5c06\u8be2\u95ee\u6309r\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n1. \u5bf9\u4e8e\u6bcf\u4e2a\u8d1d\u58f3\uff1a\u5148\u52a0\u5230\u6811\u72b6\u6570\u7ec4\u4e2dadd(i,1)\uff0c\u5982\u679c\u524d\u9762\u6709\u5b83\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u524d\u9762\u7684\u8fd9\u4e2a\u53d8\u62100,add(pre,-1);\n\n   \u56e0\u4e3a\u6bcf\u79cd\u8d1d\u58f3\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bcf\u6b21\u90fd\u628a\u524d\u9762\u4e00\u4e2a\u5220\u53bb\uff0c\u5c31\u80fd\u4fdd\u8bc1\u6709\u4e00\u4e2a\u4e86\n   \n1. \u56e0\u4e3a\u6309\u7167r\u6765\u6392\u5e8f\uff0c\u800c\u6bcf\u4e2a\u8d1d\u58f3\u90fd\u8981\u626b\u5230\uff0c\u6211\u4eec\u8981\u7528\u4e00\u4e2abegin\u5b58\u50a8\u8fd8\u6ca1\u6709\u626b\u8fc7\u7684\u8d1d\u58f3\u8d77\u70b9\uff0c\u6bcf\u6b21\u8be2\u95ee\u65f6\u518d\u627e\u4e00\u4e0b\u5c31\u4e0d\u4f1a\u9057\u6f0f\n1. \u6ce8\u610f\u6392\u5e8f\u540e\u7684\u5e8f\u5217\u4e0d\u662f\u539f\u5e8f\u5217\uff0c\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\uff0c\u8981\u8f6c\u6362\u6210\u539f\u6765\u7684\u987a\u5e8f\u3002\n\n\n\n------------\n#### CODE\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define reg register\n#define FOR(i,l,r) for(reg int i=l; i<=r; i++)\nusing namespace std;\nconst int N=1000012;\nint n,m,p[N],pre[N],c[N],ss[N];\nstruct node{\n\tint l,r,id;\n}a[N];\ninline int read()\n{\n\tint x=0;char c=getchar();\n\twhile (c<'0'||c>'9') c=getchar();\n\twhile (c>='0'&&c<='9') x=(x<<1)+(x<<3)+c-48,c=getchar();\n\treturn x;\n}\ninline void write(int x)\n{\n\tif (x>=10) write(x/10);\n\tputchar(x%10+48);\n}//\u5feb\u8bfb\u5feb\u8f93\n\ninline bool cmp(node x,node y) { return x.r<y.r; }\n\ninline int lowbit(int x) {return x&(-x);}\ninline void add(int x,int f)\n{\n\twhile (x<=n)\n\t{\n\t\tc[x]+=f;\n\t\tx+=lowbit(x);\n\t}\n}\ninline int sum(int x)\n{\n\tint ans=0;\n\twhile (x>0)\n\t{\n\t\tans+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\n//\u6811\u72b6\u6570\u7ec4\nint main()\n{\n\tn=read();\n\tFOR(i,1,n) p[i]=read();\n\tm=read();\n\tFOR(i,1,m)\n\ta[i].l=read(),a[i].r=read(),a[i].id=i;//\u5b58\u4e00\u4e0b\u5e8f\u53f7\n\tsort(a+1,a+1+m,cmp);\n\tint beg=1;\n\tFOR(i,1,m)\n\t{\n\t\tFOR(j,beg,a[i].r)\n\t\t{\n\t\t\tadd(j,1);\n\t\t\tif (pre[p[j]]) add(pre[p[j]],-1);//\u628a\u524d\u9762\u7684\u5220\u6389\n\t\t\tpre[p[j]]=j;//\u66f4\u65b0\u524d\u9762\u7684\u8d1d\u58f3\u5e8f\u53f7\n\t\t}\n\t\tss[a[i].id]=sum(a[i].r)-sum(a[i].l-1);//\u524d\u7f00\u548c\u601d\u60f3\n\t\tbeg=a[i].r+1;//\u6ca1\u626b\u8fc7\u7684\u8d77\u70b9\n\t}\n\tFOR(i,1,m)\n\twrite(ss[i]),puts(\"\");\n\treturn 0;\n}\n```\n",
        "postTime": 1573443251,
        "uid": 43103,
        "name": "Tanktt",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u77e5\u8bc6\u70b9\uff1a\n1. \u628a\u8fd9\u4e2a\u65b9\u6cd5\u8bb0\u4f4f\u5c31\u597d\u4e86\u3002\n\n[HH\u7684\u9879\u94fe](https://www.luogu.org/problem/P1972)\n\n### \u65b9\u6cd51\n\u83ab\u961f\u3002\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u590d\u6742\u5ea6$O(n\\sqrt n)$\u3002\u590d\u6742\u5ea6\u8bc1\u660e\u89c1[\u8fd9\u91cc](http://124.205.120.153/blog/liuyonglin/blog/701)\u3002\n### \u65b9\u6cd52\n\u795e\u5947\u7684\u79bb\u7ebf\u7b97\u6cd5\uff0c\u7b2c\u4e00\u6b21\u89c1\u3002\u8bb0\u4f4f\u8fd9\u7b97\u6cd5\u3002\n\n**\u672c\u9898\u5b9e\u8d28\u4e3a\u901a\u8fc7\u5de7\u5999\u65b9\u6cd5\u8ba9\u6bcf\u4e00\u4e2a\u6570\u53ea\u88ab\u7edf\u8ba1\u4e00\u6b21\u3002**\n\n\u5927\u6982\u6b65\u9aa4\uff1a\n1. \u7edf\u8ba1\u51fa\u6bcf\u4e00\u79cd\u989c\u8272\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n2. \u7edf\u8ba1\u51fa\u8fd9\u79cd\u989c\u8272\u540e\u7b2c\u4e00\u4e2a\u548c\u8fd9\u79cd\u989c\u8272\u76f8\u540c\u7684\u989c\u8272\u3002\n3. \u628a\u6240\u6709\u8be2\u95ee\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\u3002\n4. \u5229\u7528\u6811\u72b6\u6570\u7ec4\u5728\u904d\u5386\u6240\u6709\u8be2\u95ee\u65f6\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4e0b\u9762\u6211\u5c06\u89e3\u91ca\u8fd9\u56db\u4e2a\u6b65\u9aa4\u3002\n\n\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u65f6\uff0c\u53ea\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u989c\u8272\u53ea\u4f1a\u5728\u8fd9\u4e2a\u989c\u8272\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u88ab\u8ba1\u7b97\u8d21\u732e\u5373\u53ef\uff0c**\u4e5f\u5c31\u662f\u8981\u4fdd\u8bc1\u5728\u7edf\u8ba1\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u65f6\u6bcf\u4e2a\u989c\u8272\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u540e\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0**\uff08\u4e5f\u5c31\u662f\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5728\u8fd9\u4e2a\u989c\u8272\u5728\u8fd9\u4e2a\u533a\u95f4\u6709\u7684\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u533a\u95f4\u53ef\u4ee5\u7edf\u8ba1\u5230\uff08\u5982\u679c\u4e0d\u7edf\u8ba1\u5728\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u7edf\u8ba1\u4e0d\u5230\u4e86\uff09\u3002\n\n\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u5462\uff1f\u8fd9\u65f6\u524d\u4e24\u4e2a\u7edf\u8ba1\u5c31\u6709\u7528\u4e86\u3002\u5047\u5982\u73b0\u5728\u6811\u72b6\u6570\u7ec4\u5df2\u7ecf\u6ee1\u8db3\u4e86\u6240\u6709\u5728$l_i$\u4ee5\u540e\u7684\u6240\u6709\u989c\u8272\u90fd\u5728\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u7edf\u8ba1\u7b54\u6848\uff0c\u90a3\u4e48\u5982\u4f55\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a$l_{i+1}$\u5462\uff1f\u6211\u4eec\u53ea\u8981\u628a\u5728\u533a\u95f4$[l_i,l_{i+1}-1]$\u95f4\u7684\u6240\u6709\u6570\u90fd\u5411\u4e0b\u79fb\u4e00\u4e2a\uff0c\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u90a3\u53ef\u80fd\u6709\u4eba\u95ee\uff0c\u201c\u5982\u679c\u79fb\u52a8\u4e00\u6b21\u4e4b\u540e\u8fd8\u662f\u5728$l_{i+1}$\u524d\u9762\u5462\uff1f\u201d\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e00\u79cd\u5728$[l_i,l_{i+1}-1]$\u5185\u51fa\u73b0\u8fc7\u7684\u989c\u8272\u90fd\u4f1a\u5411\u540e\u79fb\u52a8\u4e00\u4e0b\uff0c\u90a3\u4e48\u6bcf\u4e2a\u989c\u8272\u7684\u6700\u540e\u4e00\u4e2a\u4e5f\u4f1a\u88ab\u5411\u540e\u79fb\u52a8\uff0c\u8fd9\u6837\u8981\u4e48\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u533a\u95f4\uff0c\u8981\u4e48\u5c31\u53d8\u6210\u4e86$NULL$\uff08\u5c31\u662f\u6ca1\u6709\u4e0b\u4e00\u4e2a\u4e86\uff09\u3002\n\n\u5199\u8fd9\u4e2a\u9898\u7684\u9898\u89e3\u597d\u8d39\u52b2\u554a......",
        "postTime": 1572790937,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[SDOI2009]HH\u7684\u9879\u94fe"
    },
    {
        "content": "# P1927 HH\u7684\u9879\u94fe \u89e3\u9898\u62a5\u544a\r\n\r\n### \u9898\u76ee\u63cf\u8ff0\r\n\r\nHH \u6709\u4e00\u4e32\u7531\u5404\u79cd\u6f02\u4eae\u7684\u8d1d\u58f3\u7ec4\u6210\u7684\u9879\u94fe\u3002HH \u76f8\u4fe1\u4e0d\u540c\u7684\u8d1d\u58f3\u4f1a\u5e26\u6765\u597d\u8fd0\uff0c\u6240\u4ee5\u6bcf\u6b21\u6563\u6b65\u5b8c\u540e\uff0c\u4ed6\u90fd\u4f1a\u968f\u610f\u53d6\u51fa\u4e00\u6bb5\u8d1d\u58f3\uff0c\u601d\u8003\u5b83\u4eec\u6240\u8868\u8fbe\u7684\u542b\u4e49\u3002HH \u4e0d\u65ad\u5730\u6536\u96c6\u65b0\u7684\u8d1d\u58f3\uff0c\u56e0\u6b64\uff0c\u4ed6\u7684\u9879\u94fe\u53d8\u5f97\u8d8a\u6765\u8d8a\u957f\u3002\u6709\u4e00\u5929\uff0c\u4ed6\u7a81\u7136\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u67d0\u4e00\u6bb5\u8d1d\u58f3\u4e2d\uff0c\u5305\u542b\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8d1d\u58f3\uff1f\u8fd9\u4e2a\u95ee\u9898\u5f88\u96be\u56de\u7b54\u2026\u2026\u56e0\u4e3a\u9879\u94fe\u5b9e\u5728\u662f\u592a\u957f\u4e86\u3002\u4e8e\u662f\uff0c\u4ed6\u53ea\u597d\u6c42\u52a9\u777f\u667a\u7684\u4f60\uff0c\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\r\n\r\n\u7b80\u800c\u8a00\u4e4b\uff0c\u6c42\u4e00\u6bb5\u533a\u95f4\u5185\u4e0d\u76f8\u540c\u7684\u6570\u7684\u4e2a\u6570\r\n\r\n### \u601d\u8def\r\n\r\n\u8fd9\u4e2a\u9898\u5176\u5b9e\u6211\u5728\u641eCF\u7684\u65f6\u5019\u89c1\u8fc7\u7c7b\u4f3c\u7684\uff0c\u90a3\u65f6\u5019\u662f\u8981\u7ef4\u62a4\u4e00\u4e2a\u5b57\u6bcd\u5e8f\u5217\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5199\u4e00\u4e2a\u7ebf\u6bb5\u6811\u83bd\u8fc7\u53bb\r\n\r\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u80af\u5b9a\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u7684\u8303\u56f4\u592a\u5927\u4e86\uff0c\u6240\u4ee5\u4f1a\u7206\u7a7a\u95f4\r\n\r\n\u7531\u4e8e\u6211\u6700\u8fd1\u521a\u521a\u5b66\u4e60\u4e86\u83ab\u961f\uff0c\u7136\u540e\u5c31\u60f3\u7528\u83ab\u961f\u6765\u505a\uff0c\u5c31\u662f\u5728\u6307\u9488\u79fb\u52a8\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2acnt\u6570\u7ec4\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u6570\u6709\u51e0\u4e2a\uff0c\u7136\u540e\u5c31\u6109\u60a6\u7684\u63d0\u4ea4\u4e86\u4e00\u4efd\u4ee3\u7801\r\n\r\n![P1972 1](C:\\Users\\\u5b97\u5b50\u742a\\Desktop\\\u6742\u56fe\\P1972 1.png)\r\n\r\n\u7136\u540e\u4ed6\u5c31\u6302\u4e86\r\n\r\n\u5565\uff1f\uff1f\uff1f\r\n\r\n\u96be\u9053\u662f\u6211\u7684\u5e38\u6570\u4e0d\u591f\u4f18\u79c0\uff1f\uff1f\uff1f\r\n\r\n\u5404\u79cd\u4f18\u5316\u5168\u5f00\uff01\uff01\uff01\r\n\r\n![QQ\u56fe\u724720191011103209](C:\\Users\\\u5b97\u5b50\u742a\\Desktop\\\u6742\u56fe\\QQ\u56fe\u724720191011103209.png)\r\n\r\nemmmmm\r\n\r\nawsl\r\n\r\n\u540e\u6765\u7ecf\u8fc7\u67e5\u9a8c\u9898\u89e3\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e2a\u9898\u5361\u83ab\u961f\uff01\uff01\uff01\r\n\r\n~~\u597d\u4e86\u672c\u9898\u89e3\u7ed3\u675f~~\r\n\r\n\u90a3\u8fd9\u4e2a\u9898\u8981\u600e\u4e48\u5904\u7406\u5462\uff1f\uff1f\r\n\r\n\u5f88\u660e\u663e\u7684\u662f\uff0c\u8fd9\u4e2a\u9898\u662f\u8981\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u4f18\u5316\uff0c\u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e2a\u9898\u6240\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u65e2\u4e0d\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u6027\uff0c\u53c8\u4e0d\u6ee1\u8db3\u533a\u95f4\u53ef\u51cf\u6027\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u662f\u4e0d\u53ef\u4ee5\u7528\u7684\uff0c\u81f3\u5c11\u5728\u7ebf\u505a\u6cd5\u662f\u65e0\u6cd5\u652f\u6301\u7684\u3002\r\n\r\n\u4ed4\u7ec6\u89c2\u5bdf\u9898\u9762\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570x\u6765\u8bf4\uff0c\u5b83\u5bf9\u4e00\u4e2a\u8be2\u95ee\u533a\u95f4$[l,r]$\u6765\u8bf4\uff0c\u53ea\u6709\u662f\u5728$r$\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2ax\u624d\u4f1a\u5bf9\u8fd9\u4e2a\u7b54\u6848\u4ea7\u751f\u8d21\u732e\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u6765\u8bb0\u5f55\u5f53\u524d\u8fd9\u4e2a\u6570\u5728\u54ea\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u8fc7\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8be2\u95ee\u79bb\u7ebf\u5904\u7406\u540e\uff0c\u5bf9\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u4e2a\u5e8f\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6c42\u524d\u7f00\u548c\u7684\u8fc7\u7a0b\u4e86\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\r\n\r\n\u7136\u540e\u5c31\u8fc7\u4e86\r\n\r\n### \u4ee3\u7801\r\n\r\n```c++\r\n#include<cstdio>\r\n#include<iostream>\r\n#include<cstring>\r\n#include<algorithm>\r\n#define maxn 1100000\r\nusing namespace std;\r\nint num[maxn],t[maxn],ans[maxn],vis[maxn];\r\nint n,m;\r\ninline int read(){\r\n    char c=getchar(); int x=0,f=1;\r\n    while(c<'0' || c>'9') {if(c=='-')f=-1; c=getchar();}\r\n    while(c>='0' && c<='9') {x=x*10+c-'0'; c=getchar();}\r\n    return x*f;\r\n}\r\nstruct Query{\r\n\tint l,r,id;\r\n\tbool operator < (const Query &a)const{\r\n\t\treturn r<a.r;\r\n\t}\r\n}q[maxn];\r\ninline int lowbit(int x){\r\n\treturn x&(-x);\r\n}\r\nvoid add(int x,int k){\r\n\twhile(x<=n){\r\n\t\tt[x]+=k;\r\n\t\tx+=lowbit(x);\r\n\t}\r\n}\r\nint sum(int x){\r\n\tint ans=0;\r\n\twhile(x!=0){\r\n\t\tans+=t[x];\r\n\t\tx-=lowbit(x);\r\n\t}\r\n\treturn ans;\r\n}\r\nint main(){\r\n\tn=read();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tnum[i]=read();\r\n\t}\r\n\tcin>>m;\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tq[i].l=read();\r\n\t\tq[i].r=read();\r\n\t\tq[i].id=i;\r\n\t}\r\n\tsort(q+1,q+1+m);\r\n\tint next=1;\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tfor(int j=next;j<=q[i].r;j++){\r\n\t\t\tif(vis[num[j]]){\r\n\t\t\t\tadd(vis[num[j]],-1);\r\n\t\t\t}\r\n\t\t\tadd(j,1);\r\n\t\t\tvis[num[j]]=j;\r\n\t\t}\r\n\t\tnext=q[i].r+1;\r\n\t\tans[q[i].id]=sum(q[i].r)-sum(q[i].l-1);\r\n\t}\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tcout<<ans[i]<<endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1570762453,
        "uid": 143418,
        "name": "\u5b51\u5f67",
        "ccfLevel": 0,
        "title": "P1927 HH\u7684\u9879\u94fe\uff0c\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "[point_here](https://www.luogu.org/blog/user3432/solution-p1972)\n\u8fd9\u662f\u697c\u4e0bdalao @dlhham \u4f7f\u7528**\u6811\u72b6\u6570\u7ec4**\u7684\u89e3\u6cd5\uff0c\u6211\u53ea\u662f\u6765\u8865\u4e2a\u4ee3\u7801\u7684qwq~~\uff08\u56e0\u4e3a\u6709\u677f\u5b50\u7684\u8bdd\u5e94\u8be5\u66f4\u597d\u7406\u89e3\u5bf9\u5427\uff09~~\n\n\u5728\u4ee3\u7801\u91cc\u52a0\u4e86\u4e00\u70b9\u6ce8\u91ca\uff0c\u65b9\u4fbf\u540e\u6765\u7684oier\u4eec\u5feb\u901f\u8bfb\u61c2\uff08\u5e0c\u671b\u7ba1\u7406\u7ed9\u8fc7qwq\uff09\n\n20181027 upd\uff1aM\u52a0\u5f3a\u5230500000\uff0c\u6211\u5c31\u662f\u6765\u6539\u4e2a\u53c2\u6570\u7684\uff08\u9003\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\nusing namespace std;\n\ninline int Int()\n{\n    register char c=getchar(); int x=0;\n    while(!isdigit(c)) c=getchar();\n    while(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x;\n}\nint wt[30];\ninline void Out(int x)\n{\n    if(!x) {putchar(48); return ;}\n    register int l=0;\n    while(x) wt[++l]=x%10,x/=10;\n    while(l) putchar(wt[l--]+48);\n}\n//------\u5feb\u901f\u8bfb\u5165/\u8f93\u51fa--------\n\nconst int maxn=500002;\nconst int maxm=500002;\nstruct data{\n    int l,r,id;\n}a[maxm];\nint sum[maxn],pre[maxn],last[1000002],ans[maxm],n,m;\n\ninline int lowbit(int x) {return x&-x;}\ninline void add(int x,int k) {for(;x<=n;x+=lowbit(x)) sum[x]+=k;}\ninline int sumd(int x)\n{\n    int tot=0;\n    for(;x;x-=lowbit(x)) tot+=sum[x];\n    return tot;\n}\n//-------\u6811\u72b6\u6570\u7ec4\u7684\u677f\u5b50---------\ninline bool cmp(const data &x,const data &y) {return x.r<y.r;}\n\nint main()\n{\n    n=Int();\n    register int j;\n    for(register int i=1;i<=n;++i)\n    {\n        j=Int(); //\u7b2ci\u4e2a\u6570\u5b57\u4e3aj\n        pre[i]=last[j] ? last[j]:maxn+1; //pre[i]\uff1a\u76f8\u5bf9\u4e8e\u4f4d\u7f6ei\uff0c\u4e0a\u4e00\u4e2a\u51fa\u73b0\u6570\u5b57j\u7684\u4f4d\u7f6e\uff08\u5982\u679clast[j]==0\u8bf4\u660e\u6570\u5b57j\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\uff0c\u5b9a\u4e49\u6210maxn+1\u53ef\u4ee5\u7701\u53bb\u540e\u9762\u7684\u8d8a\u754c\u5224\u65ad\uff09\n        last[j]=i; //\u5b58\u4e0b\u6570\u5b57j\u6700\u8fd1\u51fa\u73b0\u7684\u4f4d\u7f6e\n    }//\u9884\u5904\u7406pre\u6570\u7ec4\n    m=Int();\n    for(register int i=1;i<=m;++i) a[i].l=Int(),a[i].r=Int(),a[i].id=i;\n    sort(a+1,a+m+1,cmp); //\u6309\u53f3\u7aef\u70b9\u5347\u5e8f\u6392\n    j=1;\n    for(register int i=1;i<=m;++i)\n    {\n        for(;j<=a[i].r;++j) add(pre[j],-1),add(j,1); //\u53ea\u5728\u5f53\u524d\u6570\u5b57\u6700\u540e\u51fa\u73b0\u7684\u5730\u65b9+1\uff0c\u6240\u4ee5\u524d\u9762\u7684\u8981\u6e05\u6389\n        ans[a[i].id]=sumd(a[i].r)-sumd(a[i].l-1); //\u533a\u95f4\u548c\n    }\n    for(register int i=1;i<=m;++i) Out(ans[i]),putchar('\\n');\n    return 0;\n}\n```",
        "postTime": 1534075610,
        "uid": 21679,
        "name": "\u9999\u98ce\u667a\u4e43",
        "ccfLevel": 7,
        "title": "P1972 [SDOI2009]HH\u7684\u9879\u94fe"
    },
    {
        "content": "\u989c\u8272\u79cd\u6570\u6ee1\u8db3\u4e0d\u4e86\u533a\u95f4\u53ef\u51cf\u6027\uff0c \u4e8e\u662f\u6211\u4eec\u8981\u8ba9\u5b83\u6ee1\u8db3\u533a\u95f4\u53ef\u51cf\u6027\u624d\u80fd mlogn\u89e3\u51b3\uff08\u6211\u4e5f\u662f\u770b\u4e86\u9898\u89e3\u624d\u77e5\u9053\u7684\n\n\u601d\u8def\u5c31\u662f\u79bb\u7ebf + \u6811\u72b6\u6570\u7ec4\uff0c \u663e\u7136\u5f53\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u989c\u8272\u51fa\u73b0\u4ee5\u540e\uff0c \u4e4b\u524d\u90a3\u4e2a\u76f8\u540c\u989c\u8272\u5c31\u5931\u53bb\u4f5c\u7528\u4e86\n\n\u6240\u4ee5\u6211\u4eec\u628a\u5143\u7d20\u63d2\u5165\u6811\u72b6\u6570\u7ec4\u7684\u540c\u65f6\uff0c \u8981\u5728\u4e0a\u4e00\u6b21\u51fa\u73b0\u8fc7\u7684\u4f4d\u7f6e-1\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5f53\u524d\u533a\u95f4\u662f \u65e0\u91cd\u590d\u5143\u7d20\u7684\n\n\u770b\u4e86\u5927\u4f6c\u4eec\u7684\u9898\u89e3\uff0c \u6211\u60f3\u4e86\u4e00\u4e0b\uff0c \u9996\u5148\u662f\u5199\u51fa\u4e86\u4ee5\u4e0b\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct node{\n    int l, r, ans, i;\n    bool operator < (const node & A) const{\n        if(l != A.l) return l < A.l;\n        return r < A.r;\n    }\n}q[200005];\nint tree[50005], a[50005], f[50005], p[200005];\nint pre[50005], hav[1000005];\nvoid add(int i, int x){\n    if(!i) return;\n    for(; i <= 50002; i += i&(-i)) tree[i] += x;\n}\nint query(int i){\n    int s = 0;\n    for(; i; i -= i & -i) s += tree[i];\n    return s;\n}\nint main(){\n    int i, j, n, l, r, m;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n    for(i = 1; i <= n; i++){\n        pre[i] = hav[a[i]];\n        hav[a[i]] = i;\n    }\n    scanf(\"%d\", &m);\n    for(i = 1; i <= m; i++){\n        scanf(\"%d%d\", &q[i].l, &q[i].r);\n        q[i].i = i;    \n    }\n    sort(q + 1, q + i);\n    for(i = 1; i <= m; i++) p[q[i].i] = i;\n    j = 1;\n    for(i = 1; i <= m; i++){\n        while(j <= q[i].r) add(j, 1), add(pre[j], -1), j++;\n        q[i].ans = query(q[i].r) - query(q[i].l - 1);\n    }\n    for(i = 1; i <= m; i++) printf(\"%d\\n\", q[p[i]].ans);\n    return 0;\n}\n```\n60\u5206\uff08\u7adf\u7136\u6ca1\u6709\u5168WA\uff09\uff0c \u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u5047\u8bbe\u6709 L1 = 1, R1 = n, L2 = 2, R2 = 3\n\n\u7136\u540e\u6211\u5c31\u5148\u5904\u7406\u4e86 1 ---\u300bn\uff0c \u4f46\u5176\u5b9e\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u5904\u7406 2 ---\u300b3 \u4e86\n\n\u6240\u4ee5\u5e94\u8be5\u662f\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c \u4e0d\u662f\u5de6\u7aef\u70b9\uff08\u9488\u5bf9\u6211\u8fd9\u79cd\u505a\u6cd5\n\n\u4e0b\u9762\u624d\u662f\u6b63\u89e3\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct node{\n    int l, r, ans, i;\n    bool operator < (const node & A) const{\n        if(r != A.r) return r < A.r;\n        return l < A.l;\n    }\n}q[200007];\nint tree[250005], a[250005], f[250005], p[250005];\nint pre[250005], hav[2500005];\nvoid add(int i, int x){\n    if(!i) return;\n    for(; i <= 200005; i += i&-i) tree[i] += x;\n}\nint query(int i){\n    int s = 0;\n    for(; i; i -=i&-i) s += tree[i];\n    return s;\n}\nint main(){\n    int i, j, n, l, r, m;\n    scanf(\"%d\", &n);\n    for(i = 1; i <= n; i++) scanf(\"%d\", &a[i]);\n    for(i = 1; i <= n; i++){\n        pre[i] = hav[a[i]];\n        hav[a[i]] = i;\n    }\n    scanf(\"%d\", &m);\n    for(i = 1; i <= m; i++){\n        scanf(\"%d%d\", &q[i].l, &q[i].r);\n        q[i].i = i;    \n    }\n    sort(q + 1, q + i);\n    for(i = 1; i <= m; i++) p[q[i].i] = i;//\u79bb\u6563\u5316\n    j = 1;\n    for(i = 1; i <= m; i++){\n        while(j <= q[i].r) add(j, 1), add(pre[j], -1), j++;\n        q[i].ans = query(q[i].r) - query(q[i].l - 1);\n    }\n    for(i = 1; i <= m; i++) printf(\"%d\\n\", q[p[i]].ans);\n    return 0;\n}\n```",
        "postTime": 1508909925,
        "uid": 31619,
        "name": "Hzxleo4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u4e00\u9053\u88f8\u7684\u83ab\u961f\u6a21\u677f\u9898\n\n\u4e0d\u4f1a\u83ab\u961f\u7684\u53ef\u4ee5\u770b\u535a\u5ba2\uff1a[http://blog.csdn.net/wzw1376124061/article/details/67640410](http://blog.csdn.net/wzw1376124061/article/details/67640410)\n\n\u6bd5\u7adf\u83ab\u961f\u662f\u533a\u95f4\u795e\u5668\n\n\u901f\u5ea6\u8fd8\u53ef\u4ee5\uff0c\u4e3b\u8981\u662f\u5206\u5757\n\n\u8be6\u60c5\u89c1\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long uLL;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; --i)\n#define EREP(i, x) for(register int i = be[x]; i != -1; i = nxt[i])\n#define mem(a, b) memset(a, b, sizeof(a))\n#define debug(...) fprintf(stderr, __VA_ARGS__)\ntemplate <typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate <typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\ntemplate <class T>\nT read(T sum = 0, T fg = 0)\n{\n    char c = getchar();\n    while(c < '0' || c > '9') { fg |= c == '-'; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return fg ? -sum : sum;\n}\nconst int inf = 0x3f3f3f3f;\nconst int Size = 200010;\nconst int maxn = 100000;\nconst int maxm = 100000;\nint a[Size];\nint tim;\nstruct node//\u79bb\u7ebf\u5b58\u50a8\u8be2\u95ee\n{\n    int l, r, id;\n    friend bool operator < (node a, node b)//\u5206\u5757\u6392\u5e8f\n    {\n        return a.l / tim == b.l / tim ? a.r < b.r : a.l < b.l;//\u5de6\u7aef\u70b9\u5206\u5757\uff0c\u53f3\u7aef\u70b9\u6392\u5e8f\n    }\n}query[Size];\nint ANS;\nint cnt[Size];\nvoid add(int pos)//\u79fb\u52a8\n{\n    if(++cnt[a[pos]] == 1) ANS++;\n}\nvoid remove(int pos)//\u79fb\u52a8\n{\n    if(--cnt[a[pos]] == 0) ANS--;\n}\nint ans[Size];\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\", \"r\", stdin);\n    freopen(\"output.out\", \"w\", stdout);\n#endif\n    int n = read<int>();\n    tim = sqrt(n);\n    REP(i, 1, n)\n    {\n        a[i] = read<int>();\n    }\n    int m = read<int>();\n    REP(i, 1, m)\n    {\n        query[i] = (node){read<int>(), read<int>(), i};\n    }\n    sort(query + 1, query + m + 1);\n    int curL = 0, curR = 0;\n    REP(i, 1, m)\n    {\n        int l = query[i].l, r = query[i].r, id = query[i].id;\n        while(curL < l)\n        {\n            remove(curL++);\n        }\n        while(curR > r)\n        {\n            remove(curR--);\n        }\n        while(curL > l)\n        {\n            add(--curL);\n        }\n        while(curR < r)\n        {\n            add(++curR);\n        }\n        ans[id] = ANS;\n    }\n    REP(i, 1, m)\n    {\n        printf(\"%d\\n\", ans[i]);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1492137583,
        "uid": 19623,
        "name": "Jason_Yvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "#\u975e\u6811\u5f62\u6570\u636e\u7ed3\u6784\u505a\u6cd5\n\n\u8fd9\u9898\u7684\u6807\u51c6\u7b54\u6848\u662f\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4= =\n\n\u7136\u800c\u672c\u4eba\u7684\u7ebf\u6bb5\u6811\u53c8\u81ed\u53c8\u957f= =\u800c\u4e14\u5e38\u6570\u7279\u522b\u5927= =\n\n\u4e8e\u662f\u60f3\u4e86\u4e2a\u975e\u6811\u5f62\u6570\u636e\u7ed3\u6784\u505a\u6cd5\u6765\u9a97\u5206= =\n\n\u7ed3\u679c\u8dd1\u8fc7\u4e86\uff1f\uff01\uff01\n\n**\n[color=blue]##\u9b3c\u755c\u7684\u505a\u6cd5\uff1a[/color]\n\n\u4ee5\u5de6\u7aef\u70b9\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u5347\u5e8f\u79bb\u7ebf\u6392\u5e8f\u6240\u6709\u7684\u8bfb\u5165\u6570\u636e\uff1b\n\n\u5bf9\u4e8e\u5de6\u7aef\u70b9\u548c\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\uff0c\u4ece\u5de6\u5230\u53f3\u628a\u70b9\u52a0\u5165\u96c6\u5408\uff1b\n\n\u5bf9\u4e8e\u5de6\u7aef\u70b9\u548c\u4e0a\u4e00\u4e2a\u4e0d\u540c\u7684\uff0c\u628a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5728\u53f3\u7aef\u70b9\u4e4b\u53f3\u7684\u5143\u7d20\u9000\u51fa\u96c6\u5408\uff1b\n\n\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\u6570\u7ec4\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n**\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define REP(I,start,end) for(int I=start;I<=end;I++)\nusing namespace std;\nstruct Line\n{\n    int left,right,place;\n    inline bool operator <(const Line& T)const\n    {\n        return left<T.left||left==T.left&&right<T.right;\n    }\n}line[200001];\nint n,a[50001],ans[200001],h[1000001];\nint main()\n{\n    scanf(\"%d\",&n);\n    REP(i,1,n)\n        scanf(\"%d\",a+i);\n    scanf(\"%d\",&n);\n    REP(i,1,n)\n    {\n        scanf(\"%d%d\",&line[i].left,&line[i].right);\n        line[i].place=i;\n    }\n    sort(line+1,line+n+1);\n    memset(h,0,sizeof(h));\n    memset(ans,0,sizeof(ans));\n    int l=line[1].left,r=l,tot=0;\n    while(r<=line[1].right)\n    {\n        if(++h[a[r]]==1)\n            tot++;\n        r++;\n    }\n    ans[line[1].place]=tot;\n    REP(i,2,n)\n    {\n        if(l<line[i].left)\n        {\n            while(l<line[i].left)\n            {\n                if(!--h[a[l]])\n                    tot--;\n                l++;\n            }\n            r--;\n            while(r>line[i].right)\n            {\n                if(!--h[a[r]])\n                    tot--;\n                r--;\n            }\n            r++;\n        }\n        while(r<=line[i].right)\n        {\n            if(++h[a[r]]==1)\n                tot++;\n            r++;\n        }\n        ans[line[i].place]=tot;\n    }\n    REP(i,1,n)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1446780459,
        "uid": 11122,
        "name": "spacetime",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "[HH\u7684\u9879\u94fe](https://www.luogu.org/problem/P1972)\n\n\u8fd9\u9053\u9898\u83ab\u961f\u9898\u89e3\u771f\u7684\u5f88\u5c11\u8bf6\uff0c\u800c\u4e14\uff0c\u4e3b\u8981\u662f\u83ab\u961f\u4e5f\u8fc7\u4e0d\u53bb\u2026\u2026\n\n\u4f46\u662f\uff0c\u867d\u7136\u8fd9\u9053\u9898\u7528\u83ab\u961f\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4f46\u4e5f\u662f\u6709\u5fc5\u8981\u601d\u8003\u7684\u2026\u2026\uff08\u56e0\u4e3a\u597d\u5199\u5440\uff01\u8fd8\u86ee\u597d\u7528\u7684\uff01\u2026\u2026\uff09\n\n\u83ab\u961f\u7684\u601d\u8def\u5c31\u662f\u5c06\u8981\u8be2\u95ee\u7684\u533a\u95f4\u6392\u5e8f\uff0c\u4f7f\u5f97\u5b83\u4eec\u5c3d\u91cf\u9012\u589e\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u904d\u626b\u8fc7\u53bb\u4e86\uff0c\u800c\u5bf9\u4e8e\u4e00\u4e9b\u96f6\u6563\u7684\u8fb9\u4e0a\u7684\u70b9\uff0c\u53ea\u8981\u66b4\u529b\u5c31\u662f\u4e86\uff01\uff01\uff01\n\n\u8fd9\u91cc\u53ea\u63d0\u4f9b\u601d\u8def\uff0c\u800c\u5e76\u8fc7\u4e0d\u4e86\u8fd9\u9053\u9898\n\n------------\n\n\u4f46\u662f,\u53ef\u4ee5\u505a\uff1a[P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217](https://www.luogu.org/problem/P1903) \n\n\u52a0\u4e0a\u53ef\u6301\u4e45\u753b\u5c31\u662f\u4e86\uff01\u2026\u2026\u7136\u800c\uff0c\u53ef\u6301\u4e45\u5316\u53ea\u8981\u52a0\u4e24\u53e5\u8bdd\u5c31\u53ef\u4ee5\u4e86\uff0c\u8d85\u65b9\u4fbf\uff01\uff01\uff01\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6;\nstruct st{\n\tint l,r,id;\n}s[N];\nint a[N],an[N],n,m,len,bl[N],t[N],ans;\nbool cmp(st a,st b){\n\treturn bl[a.l]==bl[b.l] ? a.r<b.r : a.l<b.l;\n}\nvoid add(int x){\n\tt[x]++;\n\tif (t[x]==1) ans++;\n}\nvoid del(int x){\n\tt[x]--;\n\tif (t[x]==0) ans--;\n}\nint main(){\n\tscanf(\"%d\",&n);len=sqrt(n);\n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    scanf(\"%d\",&m);\n\tfor (int i=1;i<=m;i++) scanf(\"%d%d\",&s[i].l,&s[i].r),s[i].id=i;\n\tfor (int i=1;i<=n;i++) bl[i]=(i-1)/len+1;\n\tsort(s+1,s+1+m,cmp);\n\tfor (int L=1,R=0,i=1;i<=m;i++){\n\t\tint l=s[i].l,r=s[i].r;\n\t\twhile (l<L) add(a[--L]);\n\t\twhile (l>L) del(a[L++]);\n\t\twhile (r>R) add(a[++R]);\n\t\twhile (r<R) del(a[R--]);\n\t\tan[s[i].id]=ans;\n\t}\n\tfor (int i=1;i<=m;i++) printf(\"%d\\n\",an[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1571311864,
        "uid": 23170,
        "name": "\u56de\u9752\u7edd\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "# **\u60f3\u7528\u83ab\u961f\u5f00O2\u6c34\u8fc7\u7684\u770b\u8fc7\u6765\n\n\u83ab\u961f\u505a\u6cd5\u5e94\u8be5\u5f88\u663e\u7136\uff0c\u4f46\u662f\u6570\u636e\u592a\u8fc7\u6bd2\u7624\u8ba9\u83ab\u961f~~\u671b\u800c\u751f\u754f~~\n\u66f4\u52a0\u594b\u7136\u800c\u524d\u884c\uff0c\u6709\u4ec0\u4e48\u53ef\u4ee5\u8ba9\u83ab\u961f\u5c48\u670d\uff1f\n\n[](https://www.luogu.org/record/21624682)\u8bc4\u6d4b\u8bb0\u5f55\n\n\u6211\u76f4\u63a5\u9644\u4e0a\u4ee3\u7801\u4e86\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\n#define maxn 500007\n#define Ri register int//\u6307\u9488\u4f18\u5316 \nusing namespace std;\nint n,m,be[maxn],a[maxn],unit,col[maxn*10],ans,l=1,r,prin[maxn];\nstruct query{int l,r,id;}q[maxn];//query\u7684\u7ed3\u6784\u4f53\uff0c\u4fbf\u4e8e\u6392\u5e8f \ninline bool cmp(query a,query b){\n\treturn be[a.l]^be[b.l]?be[a.l]<be[b.l]:(be[a.l]&1)?a.r<b.r:a.r>b.r;\n}//\u6392\u5e8f\u5c0f\u4f18\u5316 \ninline void syst(int x,int d){col[x]+=d;if(d>0)ans+=(col[x]==1);if(d<0)ans-=(col[x]==0);}\n//d==1\u4e3a\u589e\u52a0\uff0cd==-1\u4e3a\u51cf\u5c11 \ntemplate<typename type_of_scan>\ninline void scan(type_of_scan &x){\n\ttype_of_scan f=1;x=0;char s=getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\ntemplate<typename Tops,typename... tops>\ninline void scan(Tops &x,tops&... X){\n\tscan(x),scan(X...);\n}\ntemplate<typename type_of_print>\ninline void print(type_of_print x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n} \n\nint main(){\n\tscan(n);unit=sqrt(n);\n\tfor(Ri i=1;i<=n;i++)\n\t\tscan(a[i]),be[i]=i/unit+1;//\u5206\u5757 \n\tscan(m);\n\tfor(Ri i=1;i<=m;i++)\n\t\tscan(q[i].l,q[i].r),q[i].id=i;\n\tsort(q+1,q+1+m,cmp);//\u6392\u5e8f \n\tfor(Ri i=1;i<=m;i++){\n\t\twhile(l<q[i].l) syst(a[l],-1),l++;//\u51cf\u53bbl\u4e0a\u8fd9\u4e2a\u6570 \n\t\twhile(l>q[i].l) syst(a[l-1],1),l--;//\u52a0\u4e0al-1\u4e0a\u8fd9\u4e2a\u6570 \n\t\twhile(r<q[i].r) syst(a[r+1],1),r++; \n\t\twhile(r>q[i].r) syst(a[r],-1),r--;\n\t\tprin[q[i].id]=ans;//\u8bb0\u5f55\u7b54\u6848 \n\t}\n\tfor(Ri i=1;i<=m;i++)\n\t\tprint(prin[i]),putchar('\\n');\n}\n```\n\n\u81ea\u5e26\u5de8\u5927\u5e38\u6570\u7684\u6211\u5f00O2\u8fc7\u4e86\uff0c\u76f8\u4fe1\u5404\u4f4d\u5de8\u4f6c\u4e5f\u53ef\u4ee5\u3002\u3002\u3002\n\u987a\u4fbf\u9644\u4e0a\u6811\u72b6\u6570\u7ec4\u4ee3\u7801\uff08\u5176\u5b9e\u6211\u4e5f\u5199\u6302\u4e86\uff0c\u4e8e\u662f\u6539\u5199\u6811\u72b6\u6570\u7ec4\uff0c\u4e0d\u8fc7\u53c8\u4f18\u5316\u4e86\uff0c\u4e8e\u662f\u5f00\u7740O2\u5f3a\u8fc7\uff09\n```cpp\n#include<bits/stdc++.h>\n#define maxn 500007\nusing namespace std;\nint n,m,tree[maxn<<2],a[maxn],cent,col[maxn*10],pre[maxn*10];\nstruct query{int l,r,id,ans;}q[maxn];\ninline bool cmp(query a,query b){return a.r==b.r?a.l<b.l:a.r<b.r;}\ninline bool cmp1(query a,query b){return a.id<b.id;}\ninline int lowbit(int x){return x&-x;}\ninline void add(int x,int d){for(;x<=n;x+=lowbit(x)) tree[x]+=d;}\ninline int ask(int x){int ans=0;while(x) ans+=tree[x],x-=lowbit(x);return ans;}\n\ntemplate<typename type_of_scan>\ninline void scan(type_of_scan &x){\n\ttype_of_scan f=1;x=0;char s=getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=x*10+s-'0';s=getchar();}\n\tx*=f;\n}\ntemplate<typename Tops,typename... tops>\ninline void scan(Tops &x,tops&... X){\n\tscan(x),scan(X...);\n}\ntemplate<typename type_of_print>\ninline void print(type_of_print x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n\nint main(){\n\tscan(n);\n\tfor(int i=1;i<=n;i++)\n\t\tscan(a[i]);\n\tscan(m);\n\tfor(int i=1;i<=m;i++)\n\t\tscan(q[i].l,q[i].r),q[i].id=i;\n\tsort(q+1,q+1+m,cmp);\n\tfor(int i=1;i<=m;i++){\n\t\twhile(cent<q[i].r){\n\t\t\tadd(++cent,1);\n\t\t\tcol[a[cent]]++;\n\t\t\tif(col[a[cent]]>1){\n\t\t\t\tadd(pre[a[cent]],-1);\n\t\t\t\tpre[a[cent]]=cent;\n\t\t\t\tcol[a[cent]]--;\n\t\t\t}else pre[a[cent]]=cent;\n\t\t}\n\t\tq[i].ans=ask(q[i].r)-ask(q[i].l-1);\n\t}\n\tsort(q+1,q+1+m,cmp1);\n\tfor(int i=1;i<=m;i++)\n\t\tprint(q[i].ans),putchar('\\n');\n\treturn 0;\n}\n```\n\u5199\u8fd9\u9053\u9898\u63a8\u8350\u7528\u4e24\u79cd\u65b9\u6cd5\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u590d\u4e60\u6811\u72b6\u6570\u7ec4\u3002\u3002\u3002\n",
        "postTime": 1564194984,
        "uid": 142518,
        "name": "Mr_Leceue",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10004039.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1972)\n\n### \u83ab\u961f\u5165\u95e8\u9898\n\n### [\u6211\u535a\u5ba2\u91cc\u5bf9\u83ab\u961f\u7684\u4ecb\u7ecd](https://www.cnblogs.com/yzhang-rp-inf/p/9991671.html)\n\n\u5f88\u591a\u4eba\u8bf4\u8fd9\u9898\u5361\u83ab\u961f\uff0c\u4f46\u7a9d\u968f\u4fbf\u5199\u4e86\u4e00\u4e2a\u7a0b\u5e8f\u5c31\u8fc7\u4e86qaq~~\uff08\u867d\u8bf4\u5f00\u4e86\u6c27\u5316\uff09~~\n\n\u6211\u4eec\u5728\u6392\u5e8f\u8be2\u95ee\u65f6\uff0c\u666e\u901a\u662f\u8fd9\u6837qaq\n\n```cpp\ninline bool cmp(register query a,register query b)\n{\n    return a.bl==b.bl?a.r<b.r:a.bl<b.bl;\n}\n```\n\n\u6211\u4eec\u8981\u5947\u5076\u4f18\u5316\uff1a\u6309\u5947\u5076\u5757\u6392\u5e8f\u3002\u5982\u679c\u533a\u95f4\u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e0d\u540c\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u6309\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\uff1b\u5982\u679c\u76f8\u540c\uff0c\u5947\u5757\u6309\u53f3\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u5076\u5757\u6309\u53f3\u7aef\u70b9\u4ece\u5927\u5230\u5c0f\u6392\u3002\n\n```cpp\ninline bool cmp(register query a,register query b)\n{\n    return a.bl!=b.bl?a.l<b.l:((a.bl&1)?a.r<b.r:a.r>b.r);\n}\n```\n\n\u5269\u4e0b\u6211\u4eec\u5c31\u6309\u7167\u83ab\u961f\u7684\u677f\u5b50\u6a21\u62df\u5c31\u884c\u5566qaq\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#define N 500005\nusing namespace std;\ninline int read()\n{\n\tregister int x=0,f=1;register char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*f;\n}\ninline void write(register int x)\n{\n\tif(!x)putchar('0');if(x<0)x=-x,putchar('-');\n\tstatic int sta[25];int tot=0;\n\twhile(x)sta[tot++]=x%10,x/=10;\n\twhile(tot)putchar(sta[--tot]+48);\n}\nstruct query{\n\tint l,r,id,bl;\n}q[N];\nint num[1000001],blocksize=0,a[N],ans[N];\ninline bool cmp(register query a,register query b)\n{\n\treturn a.bl!=b.bl?a.l<b.l:((a.bl&1)?a.r<b.r:a.r>b.r);\n}\nint main()\n{\n\tint n=read();\n\tblocksize=sqrt(n);\n\tfor(register int i=1;i<=n;++i)\n\t\ta[i]=read();\n\tint m=read();\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint l=read(),r=read();\n\t\tq[i]=(query){l,r,i,l/blocksize};\n\t}\n\tsort(q+1,q+1+m,cmp);\n\tint l=1,r=0,sum=0;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint ll=q[i].l,rr=q[i].r;\n\t\twhile(ll<l)\n\t\t\tsum+=!num[a[--l]]++;\n\t\twhile(ll>l)\n\t\t\tsum-=!--num[a[l++]];\n\t\twhile(rr>r)\n\t\t\tsum+=!num[a[++r]]++;\n\t\twhile(rr<r)\n\t\t\tsum-=!--num[a[r--]];\n\t\tans[q[i].id]=sum;\n\t}\n\tfor(register int i=1;i<=m;++i)\n\t\twrite(ans[i]),printf(\"\\n\");\n\treturn 0;\n}\n```",
        "postTime": 1542893190,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u60f3\u4e86\u5f88\u4e45\uff0c\u53d1\u9898\u89e3\u662f\u4e3a\u4e86\u7406\u89e3\u7684\u66f4\u6df1\u523b\u4e00\u70b9\u3002\u3002\u3002\uff08\u7ba1\u7406\u653e\u6211\u8fc7\u597d\u561bqwq\uff09\n\n\n------------\n\n\n\u6b65\u5165\u6b63\u9898\uff1a\u8fd9\u9053\u9898\u5e94\u8be5\u662f\u5f88\u591a\u505a\u6cd5\uff0c\u6211\u9009\u62e9\u7684\u662f\u79bb\u7ebf+\u6811\u72b6\u6570\u7ec4\u3002\n\t\t\t\n\u9996\u5148\u8f93\u5165\u6570\u7ec4\u3002\u7528fisrt\u6570\u7ec4\u5148\u8bb0\u5f55\u5143\u7d20\u6700\u5f00\u59cb\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5bf9\u5e94\u7684\u6bcf\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7684\u4f4d\u7f6eadd\u4e00\u4e0b\uff08\u6811\u72b6\u6570\u7ec4\u6d1b\u8c37\u4e5f\u6709\u6a21\u677f\u9898\u7684\u4e86\u89e3\u4e00\u4e0b\u5c31ok\u5566\uff09\u3002\n```cpp\nrep(i,1,n){//for\u5faa\u73af\u7684\u610f\u601d\uff081\uff0cn\uff09\u95ed\u533a\u95f4\n        scanf(\"%d\",&a[i]);\n        if(!first[a[i]]){\n            first[a[i]]=i;\n            add(i);//\u82e5\u7b2c\u4e00\u6b21\u51fa\u73b0 \u5219\u5728\u6811\u72b6\u6570\u7ec4\u4e2dadd\u3002\n        }\n    }\n```\n\n\n\n\n\u7136\u540e\u5012\u7740\u66f4\u65b0\u4e00\u904d\u6570\u7ec4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u7528last\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u4e0b\u6807\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u53ef\u4ee5\u6a21\u62df\u4e00\u904d\u5c31\u7406\u89e3\u4e86\uff09\n```cpp\nper(i,n,1){//\u8fd8\u662ffor\u5faa\u73af\uff08n,1\uff09\n        last[i]=first[a[i]];\n        first[a[i]]=i;//last\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u5143\u7d20 \u4e0b\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n    }\n```\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5b58\u4e00\u4e0b\u8be2\u95ee\u5566\u3002\u7528vector\u5b58\u7ed3\u6784\u4f53\u5e94\u8be5\u5feb\u4e00\u70b9\uff0c\u7ed3\u6784\u4f53\u7528\u5de6\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u8fdb\u884csort\u6392\u5e8f\u3002\n```cpp\n    struct uzi{//\u5168\u5c40\u7684\u7ed3\u6784\u4f53\uff0cid\u4e3a\u8be2\u95ee\u7684\u5e8f\u53f7\n        int x,y,id;\n        bool operator <(const uzi &a)const{\n            return x<a.x;\n         } \n    };\n\n\tvector<uzi> val;\n    rep(i,0,m-1){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        val.push_back(uzi{x,y,i});//\u5c06\u8be2\u95ee\u5b58\u5165\n    }\n    sort(val.begin(),val.end());//\u6392\u5e8f\n```\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u8be2\u95ee\u7684\u5904\u7406\u5566\uff08jd\uff09\n\n\u56e0\u4e3a\u5df2\u7ecf\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\u597d\u4e86\uff0c\u6240\u4ee5 \u76f4\u63a5\u5bf9\u6811\u72b6\u6570\u7ec4\u52a8\u6001\u66f4\u65b0\uff0c\u7136\u540e\u8bb0\u5f55\u7b54\u6848\u3002\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2aj\u3002\u5f53j\u6bd4\u5de6\u7aef\u70b9\u5c0f\uff0c\u5c31\u5728j\u4e0b\u6807\u5143\u7d20\u4e0b\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e\u5bf9\u6811\u72b6\u6570\u7ec4\u66f4\u65b0\u3002(add)\u3002\u3002\u7136\u540e\u8bb0\u5f55\u8be2\u95ee\u7684\u7ed3\u679c\u5c31\u597d\u5566\u3002\u3002\u3002\n\n```\nfor(auto k:val){\n        while(j<k.x){\n            add(last[j]);\n            j++;\n        }\n        ans[k.id]=sum(k.y)-sum(k.x-1);\n    }\n```\n\n\n------------\n\n\u7136\u540e\u76f4\u63a5\u8f93\u51fa\u6bcf\u4e2a\u8be2\u95ee\u7684\u7ed3\u679c\u5c31\u505a\u5b8c\u5566\u3002\u3002\u3002\u3002\u3002\n\u8d34\u4e0b\u5168\u90e8\u7684\u4ee3\u7801\n\n\n------------\n\n\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define swap(a,b) {a^=b;b^=a;a^=b}\n#define rep(a,b,c) for(int a=b;a<=c;a++)\n#define per(i,n,a) for (int i=n;i>=a;i--)\n#define max(a,b) (a)>(b)?(a):(b)\n#define min(a,b) (a)<(b)?(a):(b)\n#define PII pair<int,int>\n#define yxdl(qt) priority_queue<int,vector<int>,greater<int> >qt\n#define xgd(qt)  priority_queue<int,vector<int>,less<int> >qt\n#define INF 0x3f3f3f3f\n#define lowbit(x)  x & -x\n#define cs(s) freopen(s,\"r\",stdin)\n#define debug(x) printf(\" case-->%d \",x );\nusing namespace std;\ntypedef long long ll;\nint a[500010],tree[500011],first[5000101],last[5100001],n,m,ans[510001];\nstruct uzi{\n    int x,y,id;\n    bool operator <(const uzi &a)const{\n     \treturn x<a.x;\n     } \n};\ninline void add(int x){for(int i=x;i<=n;i+=lowbit(i))tree[i]+=1;}\ninline int sum (int x){int ans=0;for(int i=x;i;i-=lowbit(i))ans+=tree[i];return ans;}\nint main(){\n    scanf(\"%d\",&n);\t\n    rep(i,1,n){\n        scanf(\"%d\",&a[i]);\n        if(!first[a[i]]){\n            first[a[i]]=i;\n            add(i);//\u82e5\u7b2c\u4e00\u6b21\u51fa\u73b0 \u5219\u5728\u6811\u72b6\u6570\u7ec4\u4e2dadd\u3002\n        }\n    }\n    per(i,n,1){\n        last[i]=first[a[i]];\n        first[a[i]]=i;//last\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u5143\u7d20 \u4e0b\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n    }\t\n    scanf(\"%d\",&m);\n    vector<uzi> val;\n    rep(i,0,m-1){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        val.push_back(uzi{x,y,i});//\u5c06\u8be2\u95ee\u5b58\u5165\n    }\n    int j=1;\n    sort(val.begin(),val.end());//\u6392\u5e8f\n    for(auto k:val){\n        while(j<k.x){\n            add(last[j]);\n            j++;\n        }\n        ans[k.id]=sum(k.y)-sum(k.x-1);\n    }\n    rep(i,0,m-1){\n        printf(\"%d\\n\",ans[i] );\n    }\n}\n\n```\n",
        "postTime": 1532751019,
        "uid": 77937,
        "name": "sram",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "### [SDOI2009]HH\u7684\u9879\u94fe\n#### Description\n\u3000\u3000HH\u6709\u4e00\u4e32\u7531\u5404\u79cd\u6f02\u4eae\u7684\u8d1d\u58f3\u7ec4\u6210\u7684\u9879\u94fe\u3002HH\u76f8\u4fe1\u4e0d\u540c\u7684\u8d1d\u58f3\u4f1a\u5e26\u6765\u597d\u8fd0\uff0c\u6240\u4ee5\u6bcf\u6b21\u6563\u6b65 \u5b8c\u540e\uff0c\u4ed6\u90fd\u4f1a\u968f\u610f\u53d6\u51fa\u4e00\u6bb5\u8d1d\u58f3\uff0c\u601d\u8003\u5b83\u4eec\u6240\u8868\u8fbe\u7684\u542b\u4e49\u3002HH\u4e0d\u65ad\u5730\u6536\u96c6\u65b0\u7684\u8d1d\u58f3\uff0c\u56e0\u6b64\u4ed6\u7684\u9879\u94fe\u53d8\u5f97\u8d8a\u6765\u8d8a\u957f\u3002\u6709\u4e00\u5929\uff0c\u4ed6\u7a81\u7136\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u67d0\u4e00\u6bb5\u8d1d\u58f3\u4e2d\uff0c\u5305\u542b\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u8d1d\u58f3\uff1f\u8fd9\u4e2a\u95ee\u9898\u5f88\u96be\u56de\u7b54\u3002\u3002\u3002\u56e0\u4e3a\u9879\u94fe\u5b9e\u5728\u662f\u592a\u957f\u4e86\u3002\u4e8e\u662f\uff0c\u4ed6\u53ea\u597d\u6c42\u52a9\u777f\u667a\u7684\u4f60\uff0c\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n#### Solution\n- Solution1: **\u83ab\u961f**.~~\u4e0d\u4f1a~~\n- Solution2: **\u79bb\u7ebf, \u79bb\u6563\u5316,\u94fe\u8868,\u6811\u72b6\u6570\u7ec4**.\n\u3000\u3000\u9996\u5148, \u53ef\u4ee5\u5c06\u989c\u8272\u79bb\u6563\u5316.\u56e0\u4e3a\u989c\u8272\u4ece$1-1000000$\u5b9e\u5728\u662f\u592a\u5927\u4e86.\n```c++\nnamespace Map{\n\tint rank[N];\n\tint vis[P];\n\tvoid init(){\n\t\tfor(int i=1;i<=n;++i)if(!vis[col[i]])s[++tot]=col[i],vis[col[i]]=true;\n\t\tsort(s+1,s+tot+1);\n\t\tfor(int i=1;i<=tot;++i)rank[s[i]]=i;\n\t\tfor(int i=1;i<=n;++i)s[i]=rank[col[i]];\n\t}\n};\n```\n\u3000\u3000\u5176\u6b21, \u5c06\u9879\u94fe\u6309\u989c\u8272\u5efa\u94fe\u8868, \u5982\u679c\u6709$\\text{tot}$\u79cd\u989c\u8272, \u90a3\u5c31\u6309\u5750\u6807\u5efa$\\text{tot}$\u4e2a\u94fe\u8868.\n\n```c++\nnamespace List{\n\tstruct Node{\n\t\tint v,nxt;\n\t}e[N];\n\tint head[M],tail[M],pos[M],cnt;\n\tvoid AddEdge(int color,int posit){\n\t\tif(!head[color]){head[color]=++cnt;e[cnt]=(Node){posit,0};tail[color]=head[color]=cnt;;}\n\t\telse e[tail[color]].nxt=++cnt,e[cnt]=(Node){posit,0},tail[color]=cnt;\n\t}\n\tint Next(int col,int l){int i;for(i=pos[col]?pos[col]:head[col];e[i].v<l&&i;i=e[i].nxt);pos[col]=i;if(e[i].v)return e[i].v;else return n+1;}\n};using namespace List;\n```\n\u3000\u3000\u7136\u540e\u5c06\u67e5\u8be2\u6309**\u5de6\u7aef\u70b9**\u4ece\u5c0f\u5230\u5927\u6392\u5e8f.\n```c++\nstruct Query{\n\tint l,r,id;\n\tbool operator<(const Query& b)const{return l<b.l;}\n}q[M];\n```\n\u3000\u3000\u5728\u6bcf\u4e2a\u67e5\u8be2\u4e2d, \u627e\u51fa\u4ece\u5de6\u7aef\u70b9$l$\u5f00\u59cb\u7684\u6bcf\u4e00\u79cd\u989c\u8272\u7684\u5750\u6807, \u8bb0\u989c\u8272$i$\u7684\u7b2c\u4e00\u4e2a\u5927\u4e8e$l$\u7684\u5750\u6807\u4e3a$p_i$, \u90a3\u4e48\u8868\u793a$p_i$\u5904\u5f00\u59cb\u51fa\u73b0\u4e86\u4e00\u79cd\u989c\u8272, \u90a3\u4e48$l-r$\u51fa\u73b0\u7684\u989c\u8272\u603b\u6570\u5c31\u4e3a\u7b54\u6848, \u53ef\u4ee5\u7528**\u6811\u72b6\u6570\u7ec4**\u6765\u7ef4\u62a4.\n```c++\nnamespace BIT{\n\tint t[N];\n\tint lowbit(int i){return i&(-i);}\n\tvoid Add(int p,int c){int i=p;while(i<=n)t[i]+=c,i+=lowbit(i);}\n\tint query(int r){int i=r,ans=0;while(i)ans+=t[i],i-=lowbit(i);return ans;}\n\tint QUEry(int l,int r){return query(r)-query(l-1);}\n};using namespace BIT;\n```\n\u3000\u3000\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u5feb\u901f\u4ece\u4e00\u4e2a\u67e5\u8be2\u8fc7\u5ea6\u5230\u53e6\u4e00\u4e2a\u67e5\u8be2? \u56e0\u4e3a\u4ece$l$\u8fc7\u5ea6\u5230$l'$, \u5fc5\u5b9a\u6709\u4e00\u4e9b\u989c\u8272\u5904\u4e8e$[l,l')$\u4e4b\u4e2d, \u800c\u6811\u72b6\u6570\u7ec4\u662f\u7edf\u8ba1\u4e0d\u4e86\u5b83\u4eec\u7684\u7b54\u6848\u7684.\n1. \u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u79cd\u989c\u8272\u662f\u5426\u9700\u8981\u66f4\u65b0**\u7b2c\u4e00\u6b21\u5728$[l,n]$\u51fa\u73b0\u7684\u5750\u6807**, \u590d\u6742\u5ea6$O(km)$(*k\u4e3a\u989c\u8272\u6570\u91cf*).~~\u7ed3\u679c:T\u6210\u6c99\u8336.~~\n2. \u76f4\u63a5\u679a\u4e3e$[l,l')$\u4e4b\u5185\u7684\u989c\u8272\u662f\u5426\u9700\u8981\u66f4\u65b0, \u5747\u644a\u590d\u6742\u5ea6$O(n)$.~~\u7ed3\u679c:\u901a\u8fc7~~\n\n#### Code\n\n```c++\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<cctype>\n#define M 200005\n#define N 500005\n#define P 1000005\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nint read(){\n\tchar ch=getchar();int s=0;\n\tfor(;!isdigit(ch);ch=getchar());\n\tfor(s=0;isdigit(ch);s=s*10+ch-'0',ch=getchar());\n\treturn s;\n}\n\nint col[N],s[N];\nint Answer[M];\nint n,m,tot;\n/*******************************************************************/\nstruct Query{\n\tint l,r,id;\n\tbool operator<(const Query& b)const{return l<b.l;}\n}q[M];\n/*******************************************************************/\nnamespace Map{\n\tint rank[N];\n\tint vis[P];\n\tvoid init(){\n\t\tfor(int i=1;i<=n;++i)if(!vis[col[i]])s[++tot]=col[i],vis[col[i]]=true;\n\t\tsort(s+1,s+tot+1);\n\t\tfor(int i=1;i<=tot;++i)rank[s[i]]=i;\n\t\tfor(int i=1;i<=n;++i)s[i]=rank[col[i]];\n\t}\n};\n/*******************************************************************/\nnamespace List{\n\tstruct Node{\n\t\tint v,nxt;\n\t}e[N];\n\tint head[M],tail[M],pos[M],cnt;\n\tvoid AddEdge(int color,int posit){\n\t\tif(!head[color]){head[color]=++cnt;e[cnt]=(Node){posit,0};tail[color]=head[color]=cnt;}\n\t\telse e[tail[color]].nxt=++cnt,e[cnt]=(Node){posit,0},tail[color]=cnt;\n\t}\n\tint Next(int col,int l){int i;for(i=pos[col]?pos[col]:head[col];e[i].v<l&&i;i=e[i].nxt);pos[col]=i;if(e[i].v)return e[i].v;else return n+1;}\n};using namespace List;\n/*******************************************************************/\nnamespace BIT{\n\tint t[N];\n\tint lowbit(int i){return i&(-i);}\n\tvoid Add(int p,int c){int i=p;while(i<=n)t[i]+=c,i+=lowbit(i);}\n\tint query(int r){int i=r,ans=0;while(i)ans+=t[i],i-=lowbit(i);return ans;}\n\tint QUEry(int l,int r){return query(r)-query(l-1);}\n};using namespace BIT;\n/*******************************************************************/\nint visit[N];\nint main(){\n    scanf(\"%d\",&n);int u,v,c;\n\tfor(int i=1;i<=n;++i)\n\t\tcol[i]=read();\n\tMap::init();\n\tfor(int i=1;i<=n;++i)List::AddEdge(s[i],i);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;++i)q[i].l=read(),q[i].r=read();\n\tfor(int i=1;i<=m;++i)q[i].id=i;\n\tsort(q+1,q+m+1);int po=0;\n\tfor(int i=1;i<=tot;++i)Add(Next(i,1),1);\n\tfor(int i=1;i<=m;++i){\n\t\tif(q[i].l>q[i-1].l){\n\t\t\tfor(int j=q[i-1].l;j<q[i].l;++j)\n\t\t\t\tif(visit[s[j]]!=i){\n\t\t\t\t\tAdd(Next(s[j],q[i].l),1),visit[s[j]]=i;\n\t\t\t\t}\n\t\t}\n\t\tAnswer[q[i].id]=QUEry(q[i].l,q[i].r);\n\t}\n\tfor(int i=1;i<=m;++i)\n\t\tprintf(\"%d\\n\",Answer[i]);\n    return 0;\n}\n```",
        "postTime": 1525697951,
        "uid": 39067,
        "name": "aiyougege",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "## \u9898\u76ee\u603b\u7ed3\n\n\u7ed9\u5b9a\u9759\u6001\u5e8f\u5217\uff0c\u591a\u6b21\u56de\u7b54[l,r]\u5185\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\uff1b\n\n## \u6570\u636e\u8303\u56f4\n\nN <= 500000\uff0cM <= 200000\n\n## \u89e3\u9898\u601d\u8def\n\n### \u6cd5\u4e00\n\n\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u79bb\u7ebf\u6c42\u89e3\uff1b\n\n\u6b64\u9898\u9996\u5148\u5e94\u8003\u8651\u5230\u8fd9\u6837\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u5bf9\u4e8e\u82e5\u5e72\u4e2a\u8be2\u95ee\u7684\u533a\u95f4[l,r]\uff0c\u5982\u679c\u4ed6\u4eec\u7684r\u90fd\u76f8\u7b49\u7684\u8bdd\uff0c\u90a3\u4e48\u9879\u94fe\u4e2d\u51fa\u73b0\u7684\u540c\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u5b9a\u662f\u53ea\u5173\u5fc3\u51fa\u73b0\u5728\u6700\u53f3\u8fb9\u7684\u90a3\u4e00\u4e2a\u7684\uff0c\u4f8b\u5982\uff1a\n\n\u9879\u94fe\u662f\uff1a1 3 4 5 1\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8er=5\u7684\u6240\u6709\u7684\u8be2\u95ee\u6765\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u76841\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3ar\u5df2\u7ecf\u5728\u7b2c\u4e94\u4e2a1\u7684\u53f3\u8fb9\uff0c\u5bf9\u4e8e\u4efb\u4f55\u67e5\u8be2\u7684[L,5]\u533a\u95f4\u6765\u8bf4\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a1\u88ab\u7b97\u4e86\uff0c\u90a3\u4e48\u4ed6\u5b8c\u5168\u53ef\u4ee5\u7528\u7b2c\u4e94\u4e2a1\u6765\u66ff\u4ee3\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u67e5\u8be2\u7684\u533a\u95f4\u6309\u7167r\u6765\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6765\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u662f\u7528\u6765\u5e72\u4ec0\u4e48\u7684\u5462\uff1f\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a\n\n1 2 1 3\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a1\uff0cinsert(1,1)\uff1b\u8868\u793a\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u4e86\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u6570\u5b57\uff0c\u6b64\u65f6\u6811\u72b6\u6570\u7ec4\u6240\u8868\u793a\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff08\u4e0d\u662f\u5b83\u672c\u8eab\u7684\u503c\u800c\u662f\u5b83\u5bf9\u5e94\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\uff09\u662f\uff1a1 0 0 0\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a2\uff0cinsert(2,1)\uff1b\u6b64\u65f6\u6811\u72b6\u6570\u7ec4\u8868\u793a\u7684\u6bcf\u4e2a\u6570\u5b57\u662f1 1 0 0\n\n\u5bf9\u4e8e\u7b2c\u4e09\u4e2a1\uff0c\u56e0\u4e3a\u4e4b\u524d\u51fa\u73b0\u8fc71\u4e86\uff0c\u56e0\u6b64\u9996\u5148\u628a\u90a3\u4e2a1\u6240\u5728\u7684\u4f4d\u7f6e\u5220\u6389insert(1,-1),\u7136\u540e\u5728\u628a\u5b83\u52a0\u8fdb\u6765insert(3,1)\u3002\u6b64\u65f6\u6bcf\u4e2a\u6570\u5b57\u662f0 1 1 0\n\n\u5982\u679c\u6b64\u65f6\u6709\u4e00\u4e2a\u8be2\u95ee[2,3]\uff0c\u90a3\u4e48\u76f4\u63a5\u6c42sum(3)-sum(2-1)=2\u5c31\u662f\u7b54\u6848\u3002\n\n\u2014\u2014\u8f6c\u81ea dlhham\uff1b\n\n\u5373\uff1a\u79bb\u6563\u5316\u540e\u9010\u4e2a\u4f4d\u7f6e\u5904\u7406\uff0c\u6bcf\u6b21\u5904\u7406\u65f6\u53bb\u6389\u524d\u8fb9\u7684\u91cd\u590d\u6570\u5b57\uff0c\u5e76\u56de\u7b54\u63d0\u95ee\n\n\n### \u6cd5\u4e8c\n\n\u4e3b\u5e2d\u6811\u5728\u7ebf\u6b63\u89e3\uff1b\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u90fd\u5236\u4f5c\u4e00\u4e2anext[i]\u8868\u793a\u5728\u8fd9\u4e2a\u70b9\u4e4b\u540e\u6700\u8fd1\u7684\u989c\u8272\u76f8\u540c\u7684\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u8bbe\u4e3an+1\uff0c\u8bb0\u4e00\u4e0b\u961f\u5934O\uff08N\uff09\u626b\u4e00\u904d\u5c31\u597d\u4e86\n\n\u8003\u8651\u533a\u95f4\u67e5\u8be2l~r\u4e4b\u95f4\u7684\u989c\u8272\u79cd\u6570\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u6240\u6709\u6ee1\u8db3(l<=i<=r,next[i]>r)\u7684\u4e2a\u6570\uff0c\u56e0\u4e3a\u5982\u679c\u67d0\u4e2a\u70b9\u7684next\u5df2\u8fd1\u8d85\u51fa\u4e86\u8fd9\u4e2a\u533a\u95f4\u7684\u8303\u56f4\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u4e86\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u5c31\u5df2\u8fd1\u88ab\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42\u533a\u95f4l~r\u4e4b\u95f4\u6743\u503c\u5927\u4e8er\u7684\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u5728\u53ef\u6301\u4e45\u5316\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u6784\u9020\u4e00\u6761\u65b0\u7684\u7ebf\u6bb5\u6811\u94fe\u5c31\u597d\u4e86\uff0c\u67e5\u8be2\u5c31\u662f\u5e38\u89c4\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u8981\u65b0\u5efa\u4e00\u6761\u6700\u591aLog2 N\u4e2a\u70b9\u7684\u94fe\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6N log2 N\uff1b\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u6700\u591a\u9012\u5f52\u6df1\u5ea6\u4e3aLog2 N\u5c42\uff0c\u65f6\u95f4\u590d\u6742\u5ea6M Log2 N\u3002\n\n\u2014\u2014\u8f6c\u81ea [\u5929\u72d7\u7684\u624b\u5e16](https://www.luogu.org/blog/user10356/solution-p1972)\n\n\n## \u6613\u9519\u8bef\u533a\n\n\u79bb\u7ebf\u6c42\u89e3\u5728\u56de\u7b54\u65f6\u4e00\u5b9a\u8981\u6309\u987a\u5e8f\u56de\u7b54\n\n\n## \u4ee3\u7801\u5c55\u793a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<string>\n#include<algorithm>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n#define in(x) x=rd()\ninline ll rd() {\n    ll ret=0;\n    char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') ret=(ret<<3)+(ret<<1)+(c^'0'),c=getchar();\n    return ret;\n}\n#define inf 2147483647l\n#define ri register int\n#define N 1000000\n#define M 1\nint n,m;\nint a[N],b[N];\nint bk[N];\nstruct Que{\n\tint l,r,k,o;\n\tfriend bool operator<(Que a,Que b){\n\t\treturn a.r<b.r;\n\t}\n}q[N];\nbool cmp(const Que& a,const Que& b){\n\treturn a.k<b.k;\n}\nint lst[N];\nint tre[N];\nvoid add(int x,int k){\n\tfor(;x<=n;x+=(x&-x)){\n\t\ttre[x]+=k;\n\t}\n}\nint query(int x){\n\tint ret=0;\n\tfor(;x;x-=(x&-x)){\n\t\tret+=tre[x];\n\t}\n\treturn ret;\n}\nsigned main() {\n\tscanf(\"%d\",&n);\n\tfor(ri i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t\tb[i]=a[i];\n\t}\n\tsort(b+1,b+1+n);\n\tunique(b+1,b+1+n);\n\tfor(ri i=1;i<=n;i++){\n\t\tbk[i]=lower_bound(b+1,b+1+n,a[i])-b;\n\t\tlst[i]=n+1;\n\t}\n\tscanf(\"%d\",&m);\n\tfor(ri i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&q[i].l,&q[i].r);\n\t\tq[i].k=i;\n\t}\n\tsort(q+1,q+1+m);\n\tfor(ri i=1,cnt=1;i<=n&&cnt<=m;i++){\n\t\tadd(lst[bk[i]],-1);\n\t\tadd(i,1);\n\t\tlst[bk[i]]=i;\n\t\twhile(q[cnt].r==i){\n\t\t\tq[cnt].o=query(q[cnt].r)-query(q[cnt].l-1);\n\t\t\t//printf(\"%d\\n\",query(q[cnt].r)-query(q[cnt].l-1));\n\t\t\tcnt++;\n\t\t}\n\t}\n\tsort(q+1,q+1+m,cmp);\n\tfor(ri i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",q[i].o);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1525003095,
        "uid": 58302,
        "name": "i207M",
        "ccfLevel": 0,
        "title": "P1972 [SDOI2009]HH\u7684\u9879\u94fe-\u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9898\uff0c\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u83ab\u961f\u7b97\u6cd5\uff08\u6bd5\u7adf\u662f\u533a\u95f4\u795e\u5668\uff09\uff0c\u4f46\u4e0d\u77e5\u4e3a\u4f55\u6807\u7b7e\u91cc\u6ca1\u6709\uff08\u6ed1\u7a3d\uff09\uff0c\u4e8e\u662f\u81ea\u5199\u4e00\u4e2a\u3002\n\n\u9898\u76ee\u5927\u610f\uff1a\u7ed9n\u4e2a\u6570\uff0cm\u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u8981\u6c42\u6c42\u51fa l~r \u4e4b\u95f4\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u533a\u95f4\u8fdb\u884c\u5206\u5757\u4ee5\u63d0\u9ad8\u6548\u7387\u3002\u6839\u636e\u5206\u5757\u7b97\u6cd5\u7684\u5957\u8def\uff0c\u4ee5sqrt(n)\u4e3a\u4e00\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u3002\u6211\u4eec\u628a\u8be2\u95ee\u4ee5l\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u628al\u5728\u5f53\u524d\u533a\u95f4\u7684\u8be2\u95ee\u653e\u5728\u4e00\u7ec4\u3002\u7136\u540e\u5462\uff0c\u5bf9\u4e8e\u5206\u5230\u4e00\u7ec4\u7684\u8be2\u95ee\uff0c\u8fdb\u884cr\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u3002\u7136\u540e\u8fdb\u884c\u66b4\u529b\u626b\u3002\n\n\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u4e3a O(m\\* sqrt(n)+sqrt(m)\\*n)\u3002\n\n\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n\n/\\*\nProblem:\n\nOJ:\nUser:    S.B.S.\n\nTime:\nMemory:\n\nLength:\n\n\\*/\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<cstdlib>\n#include<iomanip>\n#include<cassert>\n#include<climits>\n#include<functional>\n#include<bitset>\n#include<vector>\n#include<list>\n#define F(i,j,k) for(int i=j;i<=k;++i)\n#define M(a,b) memset(a,b,sizeof(a))\n#define FF(i,j,k) for(int i=j;i>=k;i--)\n#define maxn 50001\n#define inf 0x3f3f3f3f\n#define maxm 200001\n#define mod 998244353\n//#define LOCAL\nusing namespace std;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m;\nint d[maxn];\nstruct QUERY\n{\n    int l;\n    int r;\n    int data;\n}q[maxm];\nbool cmpl(QUERY a,QUERY b){return a.l<b.l;}\nbool cmpr(QUERY a,QUERY b){if(a.r==b.r) return a.l<b.l;else return a.r<b.r;}\nint ans[maxm],get[maxn];\nint main()\n{\n    std::ios::sync_with_stdio(false);//cout<<setiosflags(ios::fixed)<<setprecision(1)<<y;\n    #ifdef LOCAL\n    freopen(\"data.in\",\"r\",stdin);\n    freopen(\"data.out\",\"w\",stdout);\n    #endif\n    cin>>n;F(i,1,n) cin>>d[i];cin>>m;\n    F(i,1,m){cin>>q[i].l>>q[i].r;q[i].data=i;}\n    int len=sqrt(n);sort(q+1,q+m+1,cmpl);\n    int ll=1,rr=0,cnt=0;\n    while(ll<=m)\n    {\n        rr++;int cur=ll;\n        while(q[ll].l<=rr*len&&ll<=m) ll++;\n        sort(q+cur,q+ll,cmpr);\n        if(rr==len) sort(q+cur,q+m+1,cmpr);\n    }\n    ll=1,rr=0;\n    F(i,1,m){\n        if(q[i].l>ll){\n            F(j,ll,q[i].l-1){\n                get[d[j]]--;\n                if(get[d[j]]==0) cnt--;\n            }\n        }\n        else{\n            F(j,q[i].l,ll-1){\n                get[d[j]]++;\n                if(get[d[j]]==1) cnt++;\n            }\n        }\n        ll=q[i].l;\n        if(q[i].r<rr){\n            F(j,q[i].r+1,rr){\n                get[d[j]]--;\n                if(get[d[j]]==0) cnt--;\n            }\n        }\n        else{\n            F(j,rr+1,q[i].r){\n                get[d[j]]++;\n                if(get[d[j]]==1) cnt++;\n            }\n        }\n        rr=q[i].r;\n        ans[q[i].data]=cnt;\n    }\n    F(i,1,m) cout<<ans[i]<<endl;\n    return 0;\n}\n```",
        "postTime": 1476957646,
        "uid": 11380,
        "name": "SBS\u82cf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6807\u7b97\u662f\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\uff08\u51fa\u9898\u4eba\u4e00\u5b9a\u662f\u8fd9\u6837\u60f3\u7684\uff09\n\n\u5982\u679c\u8981\u770b\u53ef\u4ee5\u53bb\u819c\u62dc\u697c\u4e0bid\u53eb\u505aa526955194\u7684\u795e\u7287\uff0c\u4ed6\u662f\u6211\u540c\u5b66\n\n\u7136\u800c\u5e76\u4e0d\u4e00\u5b9a\u8981\u8fd9\u6837\u505a\n\n\u8fd9\u9053\u9898\u6211\u5acc\u7ebf\u6bb5\u6811\u592a\u9ebb\u70e6\uff0c\u5c31\u5199\u4e86\u4e2a\u83ab\u961f\u53bb\u78b0\u78b0\u8fd0\u6c14\n\n\u7136\u540e\u5c311A\u4e86\uff1f\uff1f\u6700\u5927\u8017\u65f6\u4e0d\u52300.1s\u3002\u3002\u3002\uff08\u8fd9\u6570\u636e\u662f\u6709\u591a\u6c34\uff09\n\n\u54b3\u54b3\u3002\u3002\u3002\u8a00\u5f52\u6b63\u4f20\n\n\u8fd9\u9053\u9898\u5c31\u662f\u5f88\u88f8\u7684\u65e0\u4fee\u6539\u83ab\u961f\u3002\n\n\u79bb\u7ebf\u5904\u7406\uff0c\u5148\u6309\u8be2\u95ee\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u5206\u597d\u5757\uff0c\u7136\u540e\u6bcf\u5757\u4e2d\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\n\n\u7136\u540e\u76f4\u63a5\u626b\u4e00\u904d\u5c31OK\u4e86\uff08\u522b\u6015\uff0c\u66b4\u529b\u626b\uff0c\u4e0d\u4f1a\u7206\u70b8\u7684\uff09\n\n\u81f3\u4e8e\u590d\u6742\u5ea6\u8bc1\u660e\u4e48\u3002\u3002\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7684\u8be2\u95ee\u5de6\u6307\u9488\u79fb\u52a8\u4e0d\u8d85\u8fc7\u6839\u53f7n\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u5185\u7684\u8be2\u95ee\uff0c\u53f3\u6307\u9488\u7684\u79fb\u52a8\u4e0d\u8d85\u8fc7n\n\n\uff08\u8fd9\u4e9b\u9700\u8981\u81ea\u5df1\u7406\u89e3\uff0c\u548c\u6392\u5e8f\u65b9\u6cd5\u5927\u6709\u5173\u7cfb\uff0c\u662f\u83ab\u961f\u7684\u6838\u5fc3\u601d\u60f3\uff09\n\n\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u4e3aO(n\u6839\u53f7n)\n\n\u4e0b\u9762\u653e\u4ee3\u7801\uff1a\uff08\u53c8\u81ed\u53c8\u957f\uff09\n\n```cpp\n\n#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\nint i,j,k,n,m,res,b,x,l1,r1;\nint a[50000],ans[200005],sum[1000005];\nstruct ff\n{int l,r,node;\n}ask[200005];\nbool cmp1(ff x,ff y)\n{return x.l<y.l;}\nbool cmp2(ff x,ff y)\n{if(x.r==y.r) return x.l<y.l;return x.r<y.r;}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    scanf(\"%d\",&m);\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&ask[i].l,&ask[i].r);\n        ask[i].node=i;\n    }\n    sort(ask+1,ask+m+1,cmp1);\n    x=(int)sqrt((double)n);//\u5206\u6210\u6839\u53f7n\u5757\n    i=1;\n    while(i<=m)//\u8fd9\u6bb5\u6392\u5e8f\u662f\u5173\u952e\n    {\n        j++;b=i;\n        while(ask[i].l<=j*x && i<=m) i++;\n        sort(ask+b,ask+i,cmp2);\n        if(j==x){sort(ask+b,ask+m+1,cmp2);break;}\n    }\n    l1=1;r1=0;\n    for(i=1;i<=m;i++)//\u66b4\u529b\u626b\n    {\n        if(ask[i].l<l1)\n            for(j=ask[i].l;j<l1;j++)\n            {if(!sum[a[j]]) res++;sum[a[j]]++;}\n            else\n            for(j=l1;j<ask[i].l;j++)\n            {sum[a[j]]--;if(!sum[a[j]]) res--;}\n        l1=ask[i].l;\n        if(ask[i].r>r1)\n            for(j=r1+1;j<=ask[i].r;j++)\n            {if(!sum[a[j]]) res++;sum[a[j]]++;}\n            else\n            for(j=ask[i].r+1;j<=r1;j++)\n            {sum[a[j]]--;if(!sum[a[j]]) res--;}\n        r1=ask[i].r;\n        ans[ask[i].node]=res;\n    }\n    for(i=1;i<=m;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1459818350,
        "uid": 14689,
        "name": "cbx8888",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    },
    {
        "content": "\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u7136\u540e\u5462\uff1f\n\n\u6211\u7528\u6211\u8fd9\u4e2a\u4e0d\u592a\u777f\u667a\u7684\u5927\u8111\u601d\u8003\u4e86\u4e00\u4e0b\uff0c\u601d\u8003\u4e0d\u51fa\u6765\u3002\n\n\u4e8e\u662f\u6211\u7528\u4e86\u7b2c\u4e8c\u4e2a\u7075\u611f\uff0c\u83ab\u961f\u7b97\u6cd5\u3002\u5f53\u7136\u7ebf\u6bb5\u6811\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u8bf7\u770b\u697c\u4e0b\u51e0\u4f4d\u7684\u9898\u89e3\u3002\n\n\n\u83ab\u961f\u7b97\u6cd5\uff0c\u662f\u4e00\u4e2a\u4f18\u96c5\u7684\u66b4\u529b\u3002\n\n\u6211\u4eec\u628a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5206\u6210\u221aN\u7ec4\uff0c\u7136\u540e\u6309\u7167\u7ec4\u7684\u5e8f\u53f7\u8fdb\u884c\u6392\u5217\uff0c\u5982\u679c\u7ec4\u5e8f\u76f8\u540c\u5373\u6309\u7167\u53c8\u65ad\u7535\u5347\u5e8f\u6392\u5217\u3002\n\n\u8fd9\u6837\u628a\u7b2c\u4e00\u4e2a\u533a\u95f4\u6c42\u51fa\u6765\uff0c\u518d\u8c03\u6574\u5de6\u53f3\u7aef\u70b9\uff0c\u6c42\u51fa\u4e0b\u9762\u7684\u533a\u95f4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N\\*\u221aN)\u3002\u672c\u9898\u6211\u7684\u4ee3\u7801\u8fd0\u884c\u65f6\u95f4\u4e3a120ms\uff0c\u8f83\u4e2d\u7b49\u3002\n\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n        \n    \n    \n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint Read()\n{\n    int w = 1, i = 0; char ch = 0;\n    while (ch > '9' || ch < '0')\n    {\n        if (ch == '-')\n            w = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        i = i * 10 + ch - '0';\n        ch = getchar();\n    }\n    return i * w;\n}\nstruct SQue {\n    int iLeft, iRight;\n    int iIndex, iGroup;\n};\nbool CompareQue(const SQue a, const SQue b)\n{\n    if (a.iGroup == b.iGroup)\n        return a.iRight < b.iRight;\n    return a.iGroup < b.iGroup;\n}\nint iNodeTot, iGroup, iQueTot;\nint arrNum[50010];\nSQue arrQue[200010];\nint arrAns[200010];\nint arrTime[1000010];\nint iType;\nint main()\n{\n    iNodeTot = Read();\n    for (int i = 1; i <= iNodeTot; i++)\n        arrNum[i] = Read();\n    iGroup = sqrt(iNodeTot);\n    iQueTot = Read();\n    for (int i = 1; i <= iQueTot; i++)\n    {\n        arrQue[i] = (SQue) { Read(), Read(), i, 0 };\n        arrQue[i].iGroup = arrQue[i].iLeft / iGroup;\n    }\n    sort(arrQue + 1, arrQue + 1 + iQueTot, CompareQue);\n    for (int i = arrQue[1].iLeft; i <= arrQue[1].iRight; i++)\n    {\n        if (!arrTime[arrNum[i]])\n            iType++;\n        arrTime[arrNum[i]]++;\n    }\n    arrAns[arrQue[1].iIndex] = iType;\n    int iLeft = arrQue[1].iLeft, iRight = arrQue[1].iRight;\n    for (int i = 2; i <= iQueTot; i++)\n    {\n        while (iLeft > arrQue[i].iLeft)\n        {\n            iLeft--;\n            if (!arrTime[arrNum[iLeft]])\n                iType++;\n            arrTime[arrNum[iLeft]]++;\n        }\n        while (iLeft < arrQue[i].iLeft)\n        {\n            arrTime[arrNum[iLeft]]--;\n            if (!arrTime[arrNum[iLeft]])\n                iType--;\n            iLeft++;\n        }\n        while (iRight < arrQue[i].iRight)\n        {\n            iRight++;\n            if (!arrTime[arrNum[iRight]])\n                iType++;\n            arrTime[arrNum[iRight]]++;\n        }\n        while (iRight > arrQue[i].iRight)\n        {\n            arrTime[arrNum[iRight]]--;\n            if (!arrTime[arrNum[iRight]])\n                iType--;\n            iRight--;\n        }\n        arrAns[arrQue[i].iIndex] = iType;\n    }\n    for (int i = 1; i <= iQueTot; i++)\n        printf(\"%d\\n\", arrAns[i]);\n    return 0;\n}\n```",
        "postTime": 1509288049,
        "uid": 52900,
        "name": "sun1yu1jia1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1972 \u3010[SDOI2009]HH\u7684\u9879\u94fe\u3011"
    }
]