[
    {
        "content": "> _2018.11.18_ \u624d\u53d1\u73b0venus\u5927\u4f6c\u7684\u8bc4\u8bba\uff0c\u4fee\u6539\u4e00\u4e2a\u5c0f\u9519\u8bef\n> _2018.10.2_ \u4fee\u6539\u90e8\u5206\u89e3\u91ca\uff0c\u6dfb\u52a0\u4ee3\u7801\u6ce8\u91ca\n\n\u8c8c\u4f3c\u6ca1\u6709\u4eba\u7528Dijkstra\u5199\u5462\u3002\n\n\u5176\u5b9e\u8fd9\u4e00\u9898\u53ef\u4ee5\u7528Dij\u5199\u7684\u3002\u601d\u8def\u5176\u5b9e\u5f88\u7b80\u5355\n\n\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u6807\u51c6\u7684dij\u6a21\u677f\uff0c\u7136\u540e\u4e00\u5171\u8dd13\u904d\u3002\n\n _\u5206\u522b\u662f\u52063\u6b21\u91cd\u65b0\u6784\u5efa\u56fe\uff1a_ \n\n>1.\u6211\u4eec\u5c06GPS1\u7684\u56fe\u5b58\u5165\u90bb\u63a5\u8868\u3002\u8dd1\u4e00\u904ddij\n\n>2.\u7136\u540e\u6211\u4eec\u5c06GPS2\u7684\u56fe\u518d\u5b58\u5165\u90bb\u63a5\u8868\u3002\u518d\u8dd1\u4e00\u904ddij\n\n>3.\u6700\u540e\u6211\u4eec\u5c062\u6b21\u8dd1\u8fc7\u7684dij,\u5f97\u5230\u7684\u6700\u77ed\u8def\u540e\u6240\u53d1\u51fa\u7684\u8b66\u544a\u6570(\u5206\u522b\u4e0d\u57282\u4e2aGps\u7684\u6b21\u6570)\u4e0a\u5f53\u6210\u8fb9\u6743\u3002\u518d\u8dd1\u4e00\u904ddij\u3002\n\n\u7b80\u5355\u6765\u8bf4\u662f3*`\u6c47\u70b9->\u6e90\u70b9`~~\u67d0\u5927\u4f6c\u6307\u6559\u7684\u8bf4\u6cd5~~\n\n\u6bcf\u6b21\u8981\u7528\u4e0d\u540c\u7684\u6570\u7ec4\u5b58\u3002\n\n\u6700\u540e\u8f93\u51fa`dis3[1]`\u6700\u5c0f\u8b66\u544a\u6570\u5373\u53ef\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#define N 10005\n#define M 50005\nusing namespace std;\nvoid fastin(int &a){\n\tchar c=getchar();\n\ta=0;\n\twhile((c<'0'||c>'9')&&c!='-'){\tc=getchar();}\n\tint f=1;\n\tif(c=='-'){f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){\ta=(a<<1)+(a<<3)+c-48;c=getchar();}\n\ta*=f;\n}\nint n,m;\nint cnt=0;\nstruct Node\n{\n\tint from,to,VA1,VA2;\n}E[M];\nstruct Rey\n{\n\tint nxt,to,VA;\n}e[M];\nint ds1[N];\nint ds2[N];\nint ds3[N];\nstruct pq\n{\n\tint to,VA;\n\tbool operator < (const pq &x)const{\n\t\treturn VA>x.VA;//re define \n\t}//dij\u9700\u8981\u4f7f\u7528\u5806\uff0c\u4f18\u5148\u961f\u5217\u91cd\u5b9a\u5411\u3002\n};\nint head[N];\nint vis[N];\npriority_queue<pq>q;\nvoid ADDside(int u,int v,int w)\n{\n\t++cnt;\n\te[cnt].nxt=head[u];\n\te[cnt].VA=w;\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\nvoid Dijkstra(int u,int *ds)\n{\n\tpq now;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tds[i]=1<<30;\n\t\tvis[i]=0;//\u521d\u59cb\u5316\n\t}\n\tnow.to=u;\n\tnow.VA=ds[u]=0;\n\tq.push(now);\n\twhile(!q.empty())\n\t{\n\t\tu=q.top().to;\n\t\tq.pop();\n\t\tif(vis[u])continue;//\u8bbf\u95ee\u8fc7\u4e86\u8df3\u8fc7\n\t\tvis[u]=1;\n\t\tfor(register int i=head[u];i!=0;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tint xl=ds[u]+e[i].VA;\n\t\t\tif(vis[v]==0&&xl<ds[v])\n\t\t\t{\n\t\t\t\tds[v]=xl;\n\t\t\t\tnow.to=v;\n\t\t\t\tnow.VA=ds[v];\n\t\t\t\tq.push(now);//\u66f4\u65b0\n\t\t\t}\n\t\t}\n\t}\n}//\u6807\u51c6dij\nint main()\n{\n\t//freopen(\"gpsduel.in\",\"r\",stdin);\n\t//freopen(\"gpsduel.out\",\"w\",stdout);\n\tfastin(n);\n\tfastin(m);\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tfastin(E[i].to);\n\t\tfastin(E[i].from);\n\t\tfastin(E[i].VA1);\n\t\tfastin(E[i].VA2);\n\t}\n\tmemset(head,0,sizeof(head));\n\tmemset(e,0,sizeof(e));\n\tcnt=0;//\u6bcf\u6b21\u90fd\u8981\u5148\u521d\u59cb\u5316edge\uff0chead\u6570\u7ec4\uff0ccnt\u4e5f\u8981\u6e05\u7406\uff0c\u56e0\u4e3a\u8981\u91cd\u5b58\u56fe\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tADDside(E[i].from,E[i].to,E[i].VA1);//\u5b58\u56fe\n\t}\n\tDijkstra(n,ds1);\n\tmemset(head,0,sizeof(head));\n\tmemset(e,0,sizeof(e));\n\tcnt=0;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tADDside(E[i].from,E[i].to,E[i].VA2);//1\u6b21\u91cd\u6784\n\t}\n\tDijkstra(n,ds2);\n\tmemset(head,0,sizeof(head));\n\tmemset(e,0,sizeof(e));\n\tcnt=0;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint sum=0;\n\t\tif(ds1[E[i].to]!=ds1[E[i].from]+E[i].VA1)\n\t\tsum++;\n\t\tif(ds2[E[i].to]!=ds2[E[i].from]+E[i].VA2)\n\t\tsum++;\n\t\tADDside(E[i].from,E[i].to,sum); //2\u6b21\u91cd\u5b58\n\t}\n\tDijkstra(n,ds3);\n\tprintf(\"%d\",ds3[1]);//\u6700\u5c11\u7684\u8b66\u544a\u6570\n\tputchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1540020875,
        "uid": 57273,
        "name": "Reywmp",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u4e00\u9053\u8f83\u96be\u7684\u6700\u77ed\u8def\u53d8\u5f62\u9898\u3002\n\n\u9898\u76ee\u8981\u6c42\u4e24\u6761\u6700\u77ed\u8def\u7684\u533a\u522b\u3002\n\n\u6211\u4eec\u6765\u601d\u8003\u4e00\u4e0b\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e24\u6761\u6700\u77ed\u8def\u3002\u7531\u4e8e\u6211\u4eec\u9700\u8981\u77e5\u9053\u4efb\u610f\u8282\u70b9\u5230$n$\u53f7\u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u4e0d\u53ef\u80fd\u8dd1$n$\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u53cd\u5411\u56fe\uff0c\u4ece$n$\u53f7\u8282\u70b9\u51fa\u53d1\uff0c\u6839\u636e\u4e24\u4e2a$GPS$\u7cfb\u7edf\u8dd1\u4e24\u904d$SPFA$\u3002\n\n\u5176\u6b21\u5c31\u662f\u7edf\u8ba1\u62b1\u6028\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5224\u65ad\u5176\u6743\u503c\u662f\u5426\u4e0d\u7b49\u4e8e\u8fd9\u6761\u8fb9\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u7b49\u4e8e\uff0c\u8003\u8651\u5b58\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u5219\u8ba1\u6570\u5668$++$\u3002\u56e0\u4e3a\u6709\u4e24\u4e2a\u7cfb\u7edf\uff0c\u6240\u4ee5\u8ba1\u6570\u5668\u6700\u5927\u7b49\u4e8e$2$\u3002\u7136\u540e\u6211\u4eec\u5728\u6839\u636e\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u4ee5\u8ba1\u6570\u5668\uff08\u5373\u62b1\u6028\u503c\uff09\u4e3a\u6743\u503c\uff0c\u5efa\u4e00\u6761\u65b0\u8fb9\uff0c\u6700\u540e\u6784\u6210\u4e00\u4e2a\u65b0\u56fe\u3002\n\n\u6700\u7ec8\uff0c\u5728\u8fd9\u4e2a\u65b0\u56fe\u4e0a\u8dd1$SPFA$\u5373\u53ef\u3002\n\n$AC$ $Code$\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cstring>\nusing namespace std;\n\nconst int MAXN = 10010, INF = 1e9;\n\nstruct edge {\n\tint to, cost;\n};\nstd::vector<edge> G[MAXN], G1[MAXN], G2[MAXN];\n\nint n, m, d1[MAXN], d2[MAXN], d[MAXN];\nbool exist[MAXN];\nqueue<int> q;\n\nvoid spfa1(int s) { //\u7b2c\u4e00\u4e2aGPS\u7cfb\u7edf\n\tfill(d1+1, d1+1+n, INF);\n\tmemset(exist, false, sizeof(exist));//\u521d\u59cb\u5316\u83ab\u5fd8\u6389\uff01\n\td1[s] = 0;\n\tq.push(s);\n\texist[s] = true;\n\twhile (!q.empty()) {\n\t\tint v = q.front();\n\t\tq.pop();\n\t\texist[v] = false;\n\t\tfor (int i=0; i<G1[v].size(); i++) {\n\t\t\tedge e = G1[v][i];\n\t\t\tif (d1[v] + e.cost < d1[e.to]) {\n\t\t\t\td1[e.to] = d1[v] + e.cost;\n\t\t\t\tif (!exist[e.to]) {\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t\texist[e.to] = true;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n}\n\nvoid spfa2(int s) { //\u7b2c\u4e8c\u4e2aGPS\u7cfb\u7edf\n\tfill(d2+1, d2+1+n, INF);\n\tmemset(exist, false, sizeof(exist));//\u521d\u59cb\u5316\u83ab\u5fd8\u6389\uff01\n\td2[s] = 0;\n\tq.push(s);\n\texist[s] = true;\n\twhile (!q.empty()) {\n\t\tint v = q.front();\n\t\tq.pop();\n\t\texist[v] = false;\n\t\tfor (int i=0; i<G2[v].size(); i++) {\n\t\t\tedge e = G2[v][i];\n\t\t\tif (d2[v] + e.cost < d2[e.to]) {\n\t\t\t\td2[e.to] = d2[v] + e.cost;\n\t\t\t\tif (!exist[e.to]) {\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t\texist[e.to] = true;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n}\n\nvoid spfa(int s) { //\u8ba1\u7b97\u62b1\u6028\u503c\n\tfill(d+1, d+1+n, INF);\n\tmemset(exist, false, sizeof(exist));//\u521d\u59cb\u5316\u83ab\u5fd8\u6389\uff01\n\td[s] = 0;\n\tq.push(s);\n\texist[s] = true;\n\twhile (!q.empty()) {\n\t\tint v = q.front();\n\t\tq.pop();\n\t\texist[v] = false;\n\t\tfor (int i=0; i<G[v].size(); i++) {\n\t\t\tedge e = G[v][i];\n\t\t\tif (d[v] + e.cost < d[e.to]) {\n\t\t\t\td[e.to] = d[v] + e.cost;\n\t\t\t\tif (!exist[e.to]) {\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t\texist[e.to] = true;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n}\n\nint main() {\n\tcin >> n >> m;\n\tfor (int i=1; i<=m; i++) {\n\t\tint u, v, c1, c2;\n\t\tcin >> u >> v >> c1 >> c2;\n\t\tG1[v].push_back((edge){u, c1});\n\t\tG2[v].push_back((edge){u, c2});//\u6ce8\u610f\uff01\u56e0\u4e3a\u662f\u6709\u5411\u56fe\uff0c\u6240\u4ee5\u5728\u5efa\u53cd\u5411\u56fe\u65f6\uff0c\u8981\u6ce8\u610f\u65b9\u5411\u3002\n\t}//\u5efa\u53cd\u5411\u56fe\n\tspfa1(n);\n\tspfa2(n);\n\tfor (int i=1; i<=n; i++)\n\t\tfor (int j=0; j<G1[i].size(); j++) {\n\t\t\tedge e1 = G1[i][j], e2 = G2[i][j];\n\t\t\tint cnt = 0;\n\t\t\tif (d1[e1.to] - d1[i] != e1.cost) cnt++;\n\t\t\tif (d2[e2.to] - d2[i] != e2.cost) cnt++; //\u6ce8\u610f\uff01\u8fd9\u91cc\u4e0d\u80fd\u5199\u6210d2[i] - d2[e.to]\uff0c\u56e0\u4e3a\u4f60\u4e4b\u524d\u5efa\u7684\u662f\u53cd\u5411\u56fe\uff0c\u6240\u4ee5\u5e94\u8be5\u662fe2.to\u7684\u6743\u503c\u5927\u3002\u4e0a\u4e00\u884c\u540c\u7406\u3002\n\t\t\tG[e1.to].push_back((edge){i, cnt}); //\u6ce8\u610f\uff01\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u8dd1SPFA\u65f6\uff0c\u662f\u4ece1\u53f7\u8282\u70b9\u51fa\u53d1\u7684\uff0c\u6240\u4ee5\u5efa\u56fe\u65f6\u8981\u662f\u6b63\u5411\u56fe\u3002\n\t\t}\n\tspfa(1);\n\tcout << d[n]  << endl;\n\treturn 0;//\u5b8c\u7ed3\u6492\u82b1\uff01\n}\n```",
        "postTime": 1567345017,
        "uid": 88213,
        "name": "zhangyuhan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u4e00\u9053\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\u6700\u77ed\u8def\u9898\u76ee\n\n\u6211\u7528\u7684\u662fdijkstra\uff0c\u8fd8\u7528\u4e86\u4e24\u6b21dfs\n\n\u5b9e\u9645\u4e0a\u8fd9\u9898\u7684\u4ee3\u7801\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5199\u51fa\n\n\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u51fa\u8fd9\u6837\u7684\u601d\u8def\u6846\u67b6\uff0c\u9884\u5904\u7406\u6bcf\u6761\u8fb9\u7684\u8b66\u544a\u6b21\u6570\uff0c\u7136\u540e\u4ece1\u5230n\u8dd1\u6700\u77ed\u8def\n\n\u600e\u4e48\u9884\u5904\u7406\u5462\uff1f\n\n\u9898\u9762\u4e2d\u6709\u4e00\u53e5\u5f88\u91cd\u8981\u7684\u8bdd\n\n>\u5982\u679c\u8fb9$ (u,v) $\u4e0d\u5728u\u5230n\u7684\u6700\u77ed\u8def\u5f84\u4e0a\uff0c\u8fd9\u6761\u8fb9\u5c31\u53d7\u5230\u4e00\u6b21\u8b66\u544a\n\n\n## 1.\u4e24\u6b21\u53cd\u5411\u56fe\u6700\u77ed\u8def\n\n\u8fd9\u6446\u660e\u4e86\u8981\u6211\u4eec\u6c42\u51fa\u5728\u4e24\u4e2aGPS\u4e0b\uff0c\u5404\u4e2a\u70b9\u5230n\u7684\u6700\u77ed\u8def\n\n\u5404\u4e2a\u70b9\u5230n\u7684\u6700\u77ed\u8def\u4e0d\u592a\u597d\u6c42?\n\n\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u5efa\u51fa\u53cd\u5411\u56fe\uff0c\u5728\u53cd\u5411\u56fe\u4e0a\u4ecen\u5f00\u59cb\u8dd1\u6700\u77ed\u8def\n\n## 2.\u4f7f\u7528\u4e24\u6b21dfs\u5bf9\u8fb9\u8fdb\u884c\u6807\u8bb0\n\n\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\u5f88\u597d\u6807\u8bb0\uff0c\u6211\u4eec\u4ecen\u5f00\u59cb\u6cbf\u7740\u53cd\u5411\u56fe\u8d70\n\n\u5e76\u4e14\u53ea\u7ecf\u8fc7\u6ee1\u8db3$ d[y]=d[x]+w $\u7684\u8fb9$ (x,y,w) $\n\n\u5f53\u7136\u8fd9\u4e2a$ (x,y,w) $\u662f\u53cd\u5411\u8fb9\uff0c\u5bf9\u5e94\u7684\u539f\u56fe\u4e2d\u7684\u8fb9\u5e94\u8be5\u662f$ (y,x,w) $\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u539f\u56fe\u4e2d\u7684\u8fb9\u7684\u8b66\u544a\u6b21\u6570\u9884\u8bbe\u4e3a2\n\n\u7136\u540e\u5bf9\u4e8e\u53cd\u5411\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\u7684\u8fb9\uff0c\u6211\u4eec\u5c31\u628a\u5bf9\u5e94\u7684\u539f\u56fe\u4e2d\u7684\u8fb9\u7684\u8b66\u544a\u6b21\u6570-1\n\n\u5f53\u7136\u8fd9\u91cc\u7684GPS\u662f\u4e24\u4e2a\u6240\u4ee5\u8981\u6807\u8bb0\u4e24\u6b21~~~\n\n\n## 3.\u5728\u539f\u56fe\u4e0a\u6839\u636e\u8b66\u544a\u6b21\u6570\u8dd1\u6700\u77ed\u8def\n\n\u8fd9\u6837\u7684\u5904\u7406\u5b8c\u6bd5\u4ee5\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6bcf\u6761\u8fb9\u7684\u8b66\u544a\u6b21\u6570\n\n\u76f4\u63a5dijkstra\u5373\u53ef\n\n- - -\n\n## \u4e00\u4e9b\u5b9e\u73b0\u6280\u5de7\n\n\u89c9\u5f97\u4fe1\u606f\u8fc7\u591a\u4e0d\u597d\u5b58\uff1f\u53cd\u5411\u8fb9\u4e0d\u597d\u627e\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7ed3\u6784\u4f53\u4fdd\u5b58\u4e00\u6761\u8fb9\u7684\u6240\u6709\u4fe1\u606f\n\n```cpp\nstruct edge\n{\n    int from,to,wp,wq,w;\n};\n```\n\nwp\u662f\u7b2c\u4e00\u4e2aGPS\u4e0b\u7684\u8fb9\u6743\uff0cwq\u540c\u7406\uff0cw\u662f\u8b66\u544a\u6b21\u6570\n\n\u6211\u4eec\u7528\u4e00\u4e2avector\u4f5c\u4e3a\u8fb9\u8868\u5b58\u4e0b\u6240\u6709\u7684\u8fb9\uff0c\u5305\u62ec\u539f\u8fb9\u548c\u53cd\u5411\u8fb9\n\n\u5bf9\u6bcf\u4e2a\u70b9\uff0c\u4fdd\u5b58\u4e24\u4e2avector\uff0c\u4e00\u4e2a\u53ea\u4fdd\u5b58\u539f\u8fb9\u5728\u8fb9\u8868\u4e2d\u7684\u7f16\u53f7\uff0c\u53e6\u4e00\u4e2a\u53ea\u4fdd\u5b58\u53cd\u5411\u8fb9\u5728vector\u4e2d\u7684\u7f16\u53f7\n\n\u8fd9\u6837\u5904\u7406\u8d77\u6765\u5c31\u4e0d\u4f1a\u539f\u8fb9\u53cd\u5411\u8fb9\u50bb\u50bb\u5206\u4e0d\u6e05\u5566\n\n\u8fde\u8fb9\u65f6\u539f\u8fb9\u548c\u53cd\u5411\u8fb9\u6210\u5bf9\u5b58\u50a8\uff0c\u8fd9\u6837\u53cd\u5411\u8fb9\u7f16\u53f7$ xor\\  1$\u5c31\u662f\u5bf9\u5e94\u7684\u539f\u8fb9\u7f16\u53f7\u5566\n\n~~\u7f51\u7edc\u6d41\u5e38\u89c1\u5b58\u8fb9\u65b9\u6cd5~~\n\ncode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n    int u,d;\n    friend bool operator <(const node& a,const node& b)\n    {\n        return a.d>b.d;\n    }\n};\nstruct edge\n{\n    int from,to,wp,wq,w;\n};\nvector<edge>e;\nvector<int>v[50005],rev[50005];\nint n,m,cnt,d[50005];\nbool vis[50005];\nvoid read(int& x)\n{\n    char c=getchar();\n    x=0;\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+c-'0';\n        c=getchar();\n    }\n}\nvoid link(int from,int to,int wp,int wq)\n{\n    e.push_back((edge){from,to,wp,wq,2});\n    e.push_back((edge){to,from,wp,wq,0});\n    cnt=e.size();\n    v[from].push_back(cnt-2);\n    rev[to].push_back(cnt-1);\n}\nvoid dijkstra(int s,int op)\n{\n    priority_queue<node>q;\n    memset(d,0x3f3f3f3f,sizeof(d));\n    memset(vis,0,sizeof(vis));\n    d[s]=0;\n    q.push((node){s,0});\n    while(!q.empty())\n    {\n        node fa=q.top();\n        q.pop();\n        if(vis[fa.u])continue;\n        vis[fa.u]=1;\n        int x=fa.u;\n        for(int i=0;i<rev[x].size();i++)\n        {\n            edge ed=e[rev[x][i]];\n            int y=ed.to;\n            int w;\n            if(!op)w=ed.wp;\n            else w=ed.wq;\n            if(d[y]>d[x]+w)\n            {\n                d[y]=d[x]+w;\n                if(!vis[y])q.push((node){y,d[y]});\n            }\n        }\n    }\n}\nvoid dfs(int x,int op)\n{\n\tvis[x]=1;\n\tfor(int i=0;i<rev[x].size();i++)\n\t{\n\t\tedge& ed=e[rev[x][i]];\n\t\tint y=ed.to;\n\t\tif(vis[y])continue;\n\t\tint w;\n\t\tif(!op)w=ed.wp;\n\t\telse w=ed.wq;\n\t\tif(d[y]==d[x]+w)\n\t\t{\n\t\t\te[rev[x][i]^1].w--;\n\t\t\tdfs(y,op);\n\t\t}\n\t}\n}\nint Dijkstra(int s,int t)\n{\n\tpriority_queue<node>q;\n    memset(d,0x3f3f3f3f,sizeof(d));\n    memset(vis,0,sizeof(vis));\n    d[s]=0;\n    q.push((node){s,0});\n    while(!q.empty())\n    {\n        node fa=q.top();\n        q.pop();\n        if(vis[fa.u])continue;\n        vis[fa.u]=1;\n        int x=fa.u;\n        for(int i=0;i<v[x].size();i++)\n        {\n            edge ed=e[v[x][i]];\n            int y=ed.to;\n            int w=ed.w;\n            if(d[y]>d[x]+w)\n            {\n                d[y]=d[x]+w;\n                if(!vis[y])q.push((node){y,d[y]});\n            }\n        }\n    }\n    return d[t];\n}\nint main()\n{\n    read(n);\n    read(m);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,wp,wq;\n        read(x);\n        read(y);\n        read(wp);\n        read(wq);\n        link(x,y,wp,wq);\n    }\n    dijkstra(n,0);\n    memset(vis,0,sizeof(vis));\n    dfs(n,0);\n    dijkstra(n,1);\n    memset(vis,0,sizeof(vis));\n    dfs(n,1);\n    printf(\"%d\\n\",Dijkstra(1,n));\n}\n```\n",
        "postTime": 1563627741,
        "uid": 68207,
        "name": "CreeperLordVader",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u4e00\u9053\u5f88\u70e6\u7684\u6700\u77ed\u8def\u9898\u76ee\uff0c\u8981\u8dd1\\*3\u6b21SPFA\u2026\\*\u2026\u6162\u6162\u5199\uff1f**\u5f53\u7136\u4e0d**\uff01\n\n\u8fd9\u4efd\u9898\u89e3\u7684\u601d\u8def\u548c\u4e0b\u65b9\u57fa\u672c\u4e00\u81f4\uff1a\u5148\u53cd\u5411\u8dd1\u4e24\u6b21\u6700\u77ed\u8def\uff0c\u7136\u540e\u5c06\u6bcf\u6761\u5728\u6700\u77ed\u8def\u4e2d\u7684\u8fb9\u5728\u7b2c\u4e09\u5f20\u56fe\u7684\u6743\u503c\u66f4\u65b0\uff08- -\uff09\uff0c\u6700\u540e\u628a\u62b1\u6028\u6b21\u6570\u5f53\u6210\u7b2c\u4e09\u5f20\u56fe\u7684\u6743\u503c\u518d\u6b63\u5411\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\u3002\n\n\u4f46\u662f\uff0c\u8fd9\u4efd\u9898\u89e3\u5bf9\u4e8e\u7f16\u7a0b\u590d\u6742\u5ea6~~\u548c\u5361\u5e38~~\u65b9\u9762\u6709\u5f88\u5927\u4f18\u5316\u3002\n\n\n1.\u697c\u4e0bdalao\u4eec\u90fd\u5199\u4e86\u4e24\u4e2aSPFA\u51fd\u6570\u7528\u4e8e\u6a21\u62dfGPS\u548cFJ\u7684\u8def\u5f84\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4e00\u4e2a\u5c31\u591f\u4e86\uff01\n\n\n2.\u4e0d\u9700\u8981\u591a\u5f00\u6570\u7ec4\u548c\u91cd\u65b0\u5efa\u56fe\uff0c\u53ea\u9700\u8981\u5c06edge\u548chead\u6570\u7ec4\u8bbe\u7f6e\u6210\u4e8c\u7ef4\uff0c\u4e09\u6b21\u53cd\u5411\u5efa\u56fe\u5c31\u53ef\u4ee5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\u5b8c\u6210\u4e86\uff01\n\n\n~~3.\u6253\u8bfb\u4f18\u96be\u9053\u4e0d\u597d\u5417\uff08\u8bef\u4eba\u5b50\u5f1f\u4e2d\uff09~~\n\n\n\u4e0b\u9762\u8d34\u4e0a\u4ee3\u7801\u65b9\u4fbf\u7406\u89e3\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node\n{\n    int next;\n    int to;\n    int dist;\n}edge[4][100005];//\u4e8c\u7ef4\u5904\u7406\u90bb\u63a5\u8868\nint n,m;\nint head[4][100005];\nint num_edge=0;\nint read()//\uff08\u8bef\u4eba\u5b50\u5f1f\uff09\u7684\u8bfb\u4f18\n{\n    int x=0;char ch;\n    for(;!isdigit(ch);ch=getchar());\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n    return x;\n}\nvoid addedge(int from,int to,int dis,int mode)//\u5bf9\u7b2cmode\u52a0\u8fb9\n{\n    edge[mode][num_edge].next=head[mode][from];\n    edge[mode][num_edge].to=to;\n    edge[mode][num_edge].dist=dis;\n    head[mode][from]=num_edge;\n}\nvoid spfa(int start,int mode)\n{\n    int dist[100005];bool vis[100005];//dist\u4e4b\u7c7b\u90fd\u5f53\u6210\u5c40\u90e8\u53d8\u91cf\u5373\u53ef\n    queue<int>team;\n    memset(dist,0x7f,sizeof(dist));\n    memset(vis,false,sizeof(vis));\n    team.push(start);\n    vis[start]=true;\n    dist[start]=0;\n    while(!team.empty())\n    {\n        int q=team.front();\n        team.pop();\n        for(int i=head[mode][q];i>0;i=edge[mode][i].next)\n        {\n            if(dist[edge[mode][i].to]>dist[q]+edge[mode][i].dist)\n            {\n                dist[edge[mode][i].to]=dist[q]+edge[mode][i].dist;\n                if (!vis[edge[mode][i].to])\n                {\n                    team.push(edge[mode][i].to);\n                    vis[edge[mode][i].to]=true;\n                }\n            }\n        }\n        vis[q]=false;\n    }\n    if (mode==3) cout<<dist[n];//\u5bf9\u4e8e\u7b2c\u4e09\u5f20\u56fe\u8fdb\u884c\u5904\u7406\n    else\n    {\n        for(int i=1;i<=n;i++)\n        {\n            for(int j=head[mode][i];j>0;j=edge[mode][j].next)\n            {\n                if (dist[i]+edge[mode][j].dist==dist[edge[mode][j].to])\n                {\n                    edge[3][j].dist--;//\u5bf9\u4e8e\u5728\u6700\u77ed\u8def\u4e2d\u7684\u8fb9\uff0c\u66f4\u65b0\u5176\u5728\u7b2c\u4e09\u5f20\u56fe\u91cc\u7684\u6743\u503c\n                }\n            }\n        }\n    }\n}\nint main()\n{//\u6e05\u723d\u7684\u4e3b\u7a0b\u5e8f\n    memset(head,-1,sizeof(head));\n    n=read();m=read();\n    for(int i=1;i<=m;i++)\n    {\n        num_edge++;\n        int u=read();\n        int v=read();\n        int w=read();\n        int r=read();\n        addedge(v,u,w,1);\n        addedge(v,u,r,2);\n        addedge(u,v,2,3);//\u7b2c\u4e09\u5f20\u56fe\u521d\u59cb\u6743\u503c\u5747\u4e3a2\n    }\n    spfa(n,1);\n    spfa(n,2);\n    spfa(1,3);//\u4e09\u6b21SPFA\n    return 0;\n}\n```",
        "postTime": 1514472116,
        "uid": 41953,
        "name": "\u5188\u5d0e\u68a6\u7f8e",
        "ccfLevel": 0,
        "title": "P3106 Dueling GPS's"
    },
    {
        "content": "### [\u535a\u5ba2\u98df\u7528\u66f4\u4f73\u5466](https://www.luogu.org/blog/qshjydzh/solution-p3106)\n\n\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf\u8fd9\u9053\u9898\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u6700\u77ed\u8def\u95ee\u9898\uff0c\u4f46\u662f\uff0c\u9700\u8981\u52a0\u5165\u4e00\u5b9a\u7684\u4f18\u5316\uff0c\u5982\u679c\u6211\u4eec\u61d2\u5f97\u53bb\u6572\uff0c\u662f\u80af\u5b9a\u6572\u4e0d\u51fa\u6765\u7684\u3002\n\n----------------------------------------------------\u6211\u662f\u5206\u5272\u7ebf----------------------------------------------------\n\n\u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u9898\u76ee\uff1a\n\u56e0\u4e3a\u6700\u77ed\u8def\u5230\u6bcf\u4e00\u4e2a\u70b9\u90fd\u4f1a\u53d8\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5012\u7740\u6c42\u4e00\u904dSPFA\uff0c\u8fd9\u6837\u5373\u53ef\u7528\u4e00\u904dSPFA\u89e3\u51b3\u8b66\u544a\u6b21\u6570\u95ee\u9898\uff0c\u7136\u540e\u6211\u4eec\u518d\u8dd1\u4e00\u904dSPFA\uff0c\u6c42\u51fa\u6700\u5c11\u8b66\u544a\u6b21\u6570\uff0c\u5c31\u597d\u4e86\n\n\n\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 10009\n#define M 50009\n#define P 100000\nint max(int x,int y) {return x>y?x:y;}\nstruct node\n{\n\tint nxt,v1,v2,end;\n};\nnode a[M];\nint h[N],tot=0,q[M][2],opt[N][2],dis[N][2],n,m,d[N];\nbool inq[N][2];\nvoid add(int x,int y,int z1,int z2)\n{\n\ta[tot].end=y;\n\ta[tot].v1=z1;\n\ta[tot].v2=z2;\n\ta[tot].nxt=h[x];\n\th[x]=tot;\n\ttot++;\n}\nvoid SPFA(int s)\n{\n\tmemset(dis,-1,sizeof(dis));\n\tint e1=0,f1=1,e2=0,f2=0;\n\tinq[s][0]=inq[s][1]=1;\n\tdis[s][0]=dis[s][1]=0;\n\topt[s][0]=opt[s][1]=-1;\n\te1++;\n\tq[e1][0]=s;\n\te2++;\n\tq[e2][1]=s;\n\twhile(1)\n\t{\n\t\tif(f1<=e1)\n\t\t{\n\t\t\tint u=q[f1][0]; //\u53d6\u961f\u9996 \n\t\t\tf1++;\n\t\t\tfor(int i=h[u];i!=-1;i=a[i].nxt)\n\t\t\t{\n\t\t\t\tint v=a[i].end;\n\t\t\t\tint tmp=dis[u][0]+a[i].v1;\n\t\t\t\tif(dis[v][0]==-1 || dis[v][0]>=tmp) //\u5982\u679c\u662f\u6700\u4f18\u65b9\u6848\uff0c\u90a3\u5c31\u66f4\u65b0 \n\t\t\t\t{\n\t\t\t\t\tdis[v][0]=tmp;\n\t\t\t\t\topt[v][0]=u; //\u52a0\u5165\u6700\u4f18\u8def\u5f84\u65b9\u6848\u4e2d \n\t\t\t\t\tif(!inq[v][0]) //\u4e0d\u5728\u961f\u5217\u91cc\uff0c\u5165\u961f \n\t\t\t\t\t{\n\t\t\t\t\t\tinq[v][0]=1;\n\t\t\t\t\t\te1++;\n\t\t\t\t\t\tq[e1][0]=v;\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinq[u][0]=0;\n\t\t}\n\t\telse if(f2<=e2)\n\t\t{\n\t\t\tint u=q[f2][1]; //\u53d6\u961f\u9996 \n\t\t\tf2++;\n\t\t\tfor(int i=h[u];i!=-1;i=a[i].nxt)\n\t\t\t{\n\t\t\t\tint v=a[i].end;\n\t\t\t\tint tmp=dis[u][1]+a[i].v2;\n\t\t\t\tif(dis[v][1]==-1 || dis[v][1]>=tmp) //\u5982\u679c\u662f\u6700\u4f18\u65b9\u6848\uff0c\u90a3\u5c31\u66f4\u65b0 \n\t\t\t\t{\n\t\t\t\t\tdis[v][1]=tmp;\n\t\t\t\t\topt[v][1]=u; //\u52a0\u5165\u6700\u4f18\u8def\u5f84\u65b9\u6848\u4e2d \n\t\t\t\t\tif(!inq[v][1]) //\u4e0d\u5728\u961f\u5217\u91cc\uff0c\u5165\u961f \n\t\t\t\t\t{\n\t\t\t\t\t\tinq[v][1]=1;\n\t\t\t\t\t\te2++;\n\t\t\t\t\t\tq[e2][1]=v;\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinq[u][1]=0;\n\t\t}\n\t\telse break;\n\t}\t\n}\nvoid getans()\n{\n\tmemset(d,-1,sizeof(d));\n\tinq[n][0]=1;\n\tint e=0,f=1;\n\td[n]=0;\n\te++;\n\tq[e][0]=n;\n\twhile(f<=e)\n\t{\n\t\tint u=q[f][0];\n\t\tf++;\n\t\tfor(int i=h[u];i!=-1;i=a[i].nxt)\n\t\t{\n\t\t\tint v=a[i].end;\n\t\t\tint tmp=d[u]+2-(opt[v][0]==u)-(opt[v][1]==u); //\u8ba1\u7b97\u8d70\u8fd9\u6761\u8def\u8981\u8b66\u544a\u51e0\u6b21 \n\t\t\tif(d[v]==-1 || d[v]>tmp) \n\t\t\t{\n\t\t\t\td[v]=tmp;\n\t\t\t\tif(!inq[v][0])\n\t\t\t\t{\n\t\t\t\t\tinq[v][0]=1;\n\t\t\t\t\te++;\n\t\t\t\t\tq[e][0]=v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinq[u][0]=0;\n\t}\n}\nint main()\n{\n\tmemset(h,-1,sizeof(h));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z1,z2;\n\t\tscanf(\"%d%d%d%d\",&x,&y,&z1,&z2);\n\t\tadd(y,x,z1,z2); //\u53cd\u5411\u52a0\u8fb9\uff0c\u53ef\u4ee5\u52a0\u5feb\u5bf9\u6bcf\u4e2a\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u65b9\u6848\u8ba1\u7b97 \n\t}\n\tSPFA(n);\n\tgetans();\n\tprintf(\"%d\\n\",d[1]);\n\treturn 0;\n}\n```\n>\u8fd9\u662f\u4e00\u9053\u8f83\u4e3a\u7e41\u7410\u7684SPFA\uff0c\u9700\u8981\u81ea\u5df1\u6572\u4e00\u904d\uff0c\u8fd9\u6837\u6c34\u5e73\u53ef\u4ee5\u5f97\u5230\u5f88\u5927\u7684\u63d0\u9ad8\u3002",
        "postTime": 1569409901,
        "uid": 108610,
        "name": "Dzhao",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u8eab\u4e3a\u5168\u6d1b\u8c37\u6700\u83dc\u7684\u849f\u5f31\uff0c\u672c\u849f\u5f31\u8981\u6765\u53d1\u5e03\u672c\u849f\u5f31\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\u4e86\n\n\u5948\u4f55\u524d\u9762\u5927\u4f6c\u7684\u505a\u6cd5\u6211\u770b\u90fd\u770b\u4e0d\u61c2\uff0c\u6240\u4ee5\u628a\u6211\u81ea\u8ba4\u4e3a\u6700\u7b80\u5355\u6700\u597d\u60f3\u7684\u529e\u6cd5\u53d1\u51fa\u6765\n\n\u501f\u9274\u4e86\u524d\u9762\u4e00\u7bc7\u9898\u89e3\u5927\u4f6c\u7684\u529e\u6cd5\uff0c\u8bb0\u5f55\u8def\u5f84\uff08\u5012\u7740\u5efa\u56fe\uff0c\u8bb0\u4e0b\u8def\u4e0a\u70b9\u7684\u524d\u9a71\uff09\n\n\u601d\u8def\uff1a\u603b\u5171\u4e09\u6b21spfa\uff0c\u4e24\u904dspfa\u5206\u522b\u5904\u7406\u4e24\u4e2a\u7cfb\u7edf\u7684\u6700\u77ed\u8def\uff0c\u8bb0\u4e0b\u6765\u8def\u5f84(\u8fd9\u8981\u5012\u7740\u627e\u5efa\u56fe(\u6e90\u70b9n\uff0c\u76ee\u68071))\n\u5206\u522b\u662f\u5bfc\u822a\u4eea1\u548c2\u7684\u6700\u77ed\u8def\uff0c\u7528f1\uff0cf2\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6700\u77ed\u8def\u4e0a\u8fb9\u7684\u4e00\u4e2a\u70b9\u7684\u540e\u7ee7\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u5012\u7740\u5efa\u56fe\uff0c\u56e0\u6b64\u4e4b\u540e\u662f\u5f53\u4f5c\u524d\u9a71\u6765\u7528\u7684\n\n\u5012\u7740\u5efa\u56fe\u5c31\u4e0d\u7528\u591a\u8bf4\u4e86\uff0cu\u5230v\u8fb9\u6743w\u7684\u8fb9\u5efa\u56fe\u7684\u65f6\u5019\u6539\u6210v\u5230u\u8fb9\u6743w\u5c31\u884c\n\n\u518d\u6839\u636e\u4e4b\u524d\u627e\u5230\u7684\u4e24\u4e2a\u6700\u77ed\u8def\u5f84\uff0c\u5efa\u4e00\u5f20\u65b0\u56fe\uff0c\u8fb9\u6743\u521d\u59cb\u503c\u90fd\u662f2\uff0c\u5982\u679c\u8fd9\u4e2a\u8fb9\u5728\u4e00\u4e2a\u6700\u77ed\u8def\u4e0a\uff0c\u5c31\u7ed9\u5b83\u51cf\u4e00\uff08\u8be6\u7ec6\u8bf7\u770b\u6ce8\u91ca\uff09\n\uff0c\u8fd9\u4e00\u6b21spfa\u5c31\u8981\u6b63\u7740\u7528\u4e86\n\n\u849f\u5f31\u5934\u8111\u7b80\u5355\uff0c\u4ee3\u7801\u592a\u957f\uff0c\u91cd\u590d\u7684\u5185\u5bb9\u592a\u591a\uff08\u4ee3\u7801\u80fd\u529b\u592a\u70c2\u6015\u51fa\u9519\uff09\u6c42\u4e0d\u55b7\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#define inf 0x3f3f3f\nusing namespace std;\nstruct edge{\n\tint w,to,next;\n}e1[201100];\nedge e2[201100];\nedge e3[201100];\nint head1[101100],head2[101100],head3[101100];\nint d1[101100],d2[101100],d3[101100];\nint f1[101100],f2[101100];//\u8bb0\u8def\u7684\u6570\u7ec4\nint n,en1,en2,en3,m;\nvoid add1(int v,int u,int w){//\u5012\u7740\u5efa\u56fe\uff0cadd2\u4e5f\u662f\n\ten1++;\n\te1[en1].to=v;\n\te1[en1].w=w;\n\te1[en1].next=head1[u];\n\thead1[u]=en1;\n}\nvoid add2(int v,int u,int w){\n\ten2++;\n\te2[en2].to=v;\n\te2[en2].w=w;\n\te2[en2].next=head2[u];\n\thead2[u]=en2;\n}\nvoid add3(int u,int v,int w){//\u7ed9\u53eb\u5524\u6b21\u6570\u5efa\u56fe\n\ten3++;\n\te3[en3].to=v;\n\te3[en3].w=w;\n\te3[en3].next=head3[u];\n\thead3[u]=en3;\n}\nvoid sp1(int s){//\u5bfc\u822a\u4eea1\u7684\u6700\u77ed\u8def\n\tqueue<int> q;\n\tint inq[20010];\n\tmemset(inq,0,sizeof(inq));\n\tfor(int i=1;i<=n;i++)d1[i]=inf;\n\tq.push(s);inq[s]=1;d1[s]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();inq[u]=0;\n\t\tfor(int i=head1[u];i;i=e1[i].next){\n\t\t\tint v=e1[i].to,w=e1[i].w;\n\t\t\tif(d1[v]>d1[u]+w)\n\t\t\t{\n\t\t\t\td1[v]=d1[u]+w;\n\t\t\t\tf1[v]=i;//\u8bb0\u8def\n\t\t\t\tif(!inq[v]){\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid sp2(int s){//\u5bfc\u822a\u4eea2\u7684\u6700\u77ed\u8def\n\tqueue<int> q;\n\tint inq[20010];\n\tmemset(inq,0,sizeof(inq));\n\tfor(int i=1;i<=n;i++)d2[i]=inf;\n\tq.push(s);inq[s]=1;d2[s]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();inq[u]=0;\n\t\tfor(int i=head2[u];i;i=e2[i].next){\n\t\t\tint v=e2[i].to,w=e2[i].w;\n\t\t\tif(d2[v]>d2[u]+w)\n\t\t\t{\n\t\t\t\td2[v]=d2[u]+w;\n\t\t\t\tf2[v]=i;\n\t\t\t\tif(!inq[v]){\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nvoid sp3(int s){//\u53eb\u5524\u6b21\u6570\u7684\u6700\u77ed\u8def\n\tqueue<int> q;\n\tint inq[20010];\n\tmemset(inq,0,sizeof(inq));\n\tfor(int i=1;i<=n;i++)d3[i]=inf;\n\tq.push(s);inq[s]=1;d3[s]=0;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head3[u];i;i=e3[i].next){\n\t\t\tint v=e3[i].to,w=e3[i].w;\n\t\t\tif(i==f1[u])w--;\n\t\t\tif(i==f2[u])w--;//\u8981\u662f\u5728\u5404\u81ea\u6700\u77ed\u8def\u4e0a\uff0c\u5c31\u7ed9\u5b83\u51cf\u4e00\uff0c\u56e0\u4e3a\u5bf9\u5e94\u7684\u7cfb\u7edf\u5728\u6700\u77ed\u8def\u4e0a\u4e0d\u4f1a\u53eb\u5524\n\t\t\tif(d3[v]>d3[u]+w)\n\t\t\t{\n\t\t\t\td3[v]=d3[u]+w;\n\t\t\t\tif(!inq[v]){\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}inq[u]=0;\n\t}\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b,c,d;\n\t\tcin>>a>>b>>c>>d;\n\t\tadd1(a,b,c);\n\t\tadd2(a,b,d);\n\t\tadd3(a,b,2);//\u8981\u662f\u90fd\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u4e24\u4e2a\u7cfb\u7edf\u5404\u53eb\u5524\u4e00\u6b21\uff0c\u4e00\u5171\u5c31\u662f\u4e24\u6b21\n\t}\n\tsp1(n);//\u5012\u7740\u5efa\u56fe\uff0c\u6240\u4ee5\u6e90\u70b9\u662fn\n\tsp2(n);\n\tsp3(1);\n\tcout<<d3[n];\n}\n```",
        "postTime": 1526715420,
        "uid": 41404,
        "name": "\u4f8b\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u7531\u9898\u76ee\u63cf\u8ff0\u5f88\u5bb9\u6613\u5f97\u77e5\u53cd\u5411\u5efa\u8fb9\u540e\u8dd1\u4e24\u4e2a\u4e2a\u4ece\u7ec8\u70b9\u51fa\u53d1\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u6811 \u7136\u540e\u518d\u6839\u636e\u9898\u76ee \u628a\u8b66\u544a\u5f53\u505a\u6743\u503c\u6b63\u5411\u8dd1\u4e00\u904dspfa\n\n\u90a3\u4e48\u73b0\u5728\u95ee\u9898\u4e3b\u8981\u662f\u5982\u4f55\u5efa\u8b66\u544a\u4e3a\u6743\u503c\u7684\u8fb9\n\n\u6211\u6700\u5148\u7684\u60f3\u6cd5\u662f\u5148\u628a\u6240\u6709\u7684\u8fb9\u5168\u90e8\u5efa\u4e3a\u6743\u503c\u4e3a2\u7684\u8fb9 \u5728\u8dd1\u5355\u6e90\u6700\u77ed\u8def\u5f84\u6811\u8bb0\u5f55\u524d\u9a71 \u628a\u5c5e\u4e8e\u6700\u77ed\u8def\u7684\u8def\u5f84\u6743\u503c-1 \u7ed3\u679c\u4f1aWA \u56e0\u4e3a\u6700\u77ed\u8def\u53ef\u80fd\u5b58\u5728\u591a\u6761 \u6240\u4ee5\u4e0b\u9762\u4ecb\u7ecd\u6b63\u786e\u7b97\u6cd5\uff08\u53d7\u9ad8\u4eba\u6307\u70b9..\uff09\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4dist\u8bb0\u5f55\u7b2c\u4e00\u6b21\u4e0e\u7b2c\u4e8c\u6b21\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u6811\n\n\u5219\nif(dist[x][1]-dist[y][1]==r[i].w[1]&&dist[x][2]-dist[y][2]==r[i].w[2])\n\nadd2(x,y,0);//\u8868\u793a\u8fd9\u6761\u8def\u5728\u4e24\u4e2aGPS\u7684\u6700\u77ed\u8def\u4e2d\n\n        else if(dist[x][1]-dist[y][1]==r[i].w[1]||dist[x][2]-dist[y][2]==r[i].w[2]) \nadd2(x,y,1);//\u8868\u793a\u8fd9\u6761\u8def\u5728\u67d0\u4e2aGPS\u7684\u6700\u77ed\u8def\u4e2d\n\nelse add2(x,y,2);\u8868\u793a\u8fd9\u6761\u8def\u4e0d\u5728GPS\u7684\u6700\u77ed\u8def\u4e2d\n\n\u6700\u540e\u8dd1\u4e00\u904dspfa\u5373\u53ef\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\nusing namespace std;\nstruct node{\n    int to,next,w;\n};\nnode e[100010],ed[100010];\nstruct node2{\n    int x,y;\n    int w[3];\n}r[100010];\nint n,m,k=0,k1=0;\nint head[10010],head1[10010],dist[10010][3],dist1[10100];\nbool vis[10010],vis1[10010];\nint que[1000100],que1[1000100],qhead,qtail;\nvoid add1(int u,int v,int w)\n{\n    e[++k].next=head[u];\n    e[k].to=v;\n    e[k].w=w;\n    head[u]=k;\n}\nvoid add2(int u,int v,int w)\n{\n    ed[++k1].next=head1[u];\n    ed[k1].to=v;\n    ed[k1].w=w;\n    head1[u]=k1;\n}\nvoid spfa1(int x)\n{\n    memset(vis,false,sizeof(vis));\n    qhead=qtail=0;\n    dist[n][x]=0,vis[n]=true;\n    que[++qtail]=n;\n    while(qhead<qtail)\n    {\n        int p=que[++qhead];\n        vis[p]=false;\n        for(int i=head[p];i;i=e[i].next)\n        {\n            if(dist[e[i].to][x]>dist[p][x]+e[i].w)\n            {\n                dist[e[i].to][x]=dist[p][x]+e[i].w;\n                if(!vis[e[i].to])\n                {\n                    que[++qtail]=e[i].to;\n                    vis[e[i].to]=true;\n                }\n            }\n        }\n    }\n}\nvoid spfa2()\n{\n    memset(dist1,0x7f7f7f,sizeof(dist1));\n    memset(vis1,false,sizeof(vis1));\n    qhead=qtail=0;\n    dist1[1]=0,vis1[1]=true;\n    que1[++qtail]=1;\n    while(qhead<qtail)\n    {\n        int p=que1[++qhead];\n        vis1[p]=false;\n        for(int i=head1[p];i;i=ed[i].next)\n        {\n            if(dist1[ed[i].to]>dist1[p]+ed[i].w)\n            {\n                dist1[ed[i].to]=dist1[p]+ed[i].w;\n                if(!vis1[ed[i].to])\n                {\n                    que1[++qtail]=ed[i].to;\n                    vis1[ed[i].to]=true;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    memset(dist,0x7f7f7f,sizeof(dist));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    scanf(\"%d%d%d%d\",&r[i].x,&r[i].y,&r[i].w[1],&r[i].w[2]);\n    for(int p=1;p<=2;p++)\n    {\n       memset(head,0,sizeof(head));\n       k=0;\n       for(int i=1;i<=m;i++)\n       add1(r[i].y,r[i].x,r[i].w[p]);    \n       spfa1(p);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x=r[i].x,y=r[i].y;\n        if(dist[x][1]-dist[y][1]==r[i].w[1]&&dist[x][2]-dist[y][2]==r[i].w[2])\n         add2(x,y,0);\n        else if(dist[x][1]-dist[y][1]==r[i].w[1]||dist[x][2]-dist[y][2]==r[i].w[2]) \n         add2(x,y,1);\n        else add2(x,y,2); \n    }\n    spfa2();\n    printf(\"%d\",dist1[n]);    \n    return 0;\n}\n```",
        "postTime": 1477981608,
        "uid": 22060,
        "name": "Memorize",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u9996\u5148\u4ee5n\u4e3a\u8d77\u70b9\u4e24\u8fb9spfa\uff0c\u4e4b\u540e\u518d\u5224\u65ad\u6240\u6709\u7684\u8fb9\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u518d\u6b21spfa\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct data{\n    int u, v;\n};\nvector<data> f[10010], g[10010], h[10010];\nint dis1[10010], dis2[10010], dis3[10010];\n    int n, m;\nint vis[10010];\nvoid spfa(vector<data> g[10010], int d[], int x){\n    memset(d, 127/3, sizeof(d));\n    for (int i = 1; i <= n; i++) d[i]=233333333;\n    memset(vis, 0, sizeof(vis));\n    vis[x] = 1;\n    d[x] = 0;\n    queue<int> q;\n    q.push(x);\n    while (!q.empty()){\n        int x = q.front();\n        q.pop();\n        vis[x] = 0;\n        for (int i = 0; i < g[x].size(); i++){\n            int u = g[x][i].u, v = g[x][i].v;\n            if (d[u] > d[x] + v){\n                d[u] = d[x] + v;\n                if (!vis[u]){\n                    q.push(u);\n                    vis[u] = 1;\n                }\n            } \n        }\n    }\n}\nint main(){\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; i++){\n        int a, b, c, d;\n        scanf(\"%d%d%d%d\", &b, &a, &c, &d);\n        f[a].push_back({b, c});\n        g[a].push_back({b, d});\n    }\n    spfa(f, dis1, n);\n    spfa(g, dis2, n);\n    for (int i = 1; i <= n; i++)\n        for (int j = 0; j < f[i].size(); j++){\n            int u = f[i][j].u, p = f[i][j].v, q = g[i][j].v, r = 0;\n            if (dis1[u] - dis1[i] != p) r++;\n            if (dis2[u] - dis2[i] != q) r++;\n            h[u].push_back({i, r});\n        }\n    spfa(h, dis3, 1);\n    cout<<dis3[n];\n    return 0;\n}\n```",
        "postTime": 1475674201,
        "uid": 775,
        "name": "Expecto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    },
    {
        "content": "\u505a\u4e86\u9898\u600e\u4e48\u80fd\u4e0d\u53d1\u7bc7\u9898\u89e3\u5462\uff1f\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u4e24\u4e2aGPS\u5206\u522b\u5efa\u56fe\uff0c\u8dd1spfa\uff0c\u6c42\u51fa\u4e24\u6761\u8def\u5f84\u3002\n\n\n\u600e\u4e48\u8bb0\u5f55\u5462\uff1f\u53ea\u8981\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u7684\u524d\u9a71\u5373\u53ef\uff0c\u5982\u4ee3\u7801\u4e2d\u7684f\u6570\u7ec4\u3002\n\n\n\u7136\u540e\uff0c\u518d\u8dd1\u4e00\u904dspfa\uff0c\u7b97\u51fa\u81f3\u5c11\u9700\u8981\u62b1\u6028\u591a\u5c11\u6b21\uff0c\u8fb9\u6743\u7684\u8bdd\uff0c\u5176\u5b9e\u53ef\u4ee5\u5728\u7ebf\u7edf\u8ba1\u7684\u5566\u3002\n\n\n\u4e0a\u4ee3\u7801\uff01\n\n\n``` javascript\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int N=10001,M=50001;\nint headf[N],vf[2*M],nxtf[2*M],disf[2][2*M],d[2][N],b[N],f[2][N],head[N],v[2*M],nxt[2*M],tot,n,m;\nbool inq[N];\ninline void add(int x,int y,int w1,int w2){\n    v[++tot]=y;nxt[tot]=head[x];head[x]=tot;\n    vf[tot]=x;disf[0][tot]=w1;disf[1][tot]=w2;nxtf[tot]=headf[y];headf[y]=tot;\n}\ninline void SPFA_GPS(int mode){\n    for(int i=1;i<=n;i++)d[mode][i]=0x7fffffff;\n    d[mode][n]=0;\n    inq[n]=true;\n    queue<int>q;\n    q.push(n);\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=headf[x];~i;i=nxtf[i]){\n            if(d[mode][x]+disf[mode][i]<d[mode][vf[i]]){\n                d[mode][vf[i]]=d[mode][x]+disf[mode][i];\n                f[mode][vf[i]]=i;\n                if(!inq[vf[i]]){\n                    q.push(vf[i]);\n                    inq[vf[i]]=true;\n                }\n            }\n        }\n        inq[x]=false;\n    }\n}\ninline void SPFA_FJ(){\n    for(int i=1;i<=n;i++)b[i]=0x7fffffff;\n    b[1]=0;\n    inq[1]=true;\n    queue<int>q;\n    q.push(1);\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        for(int i=head[x];~i;i=nxt[i]){\n            int p=0;\n            if(i!=f[0][x])p++;\n            if(i!=f[1][x])p++;\n            if(b[x]+p<b[v[i]]){\n                b[v[i]]=b[x]+p;\n                if(!inq[v[i]]){\n                    q.push(v[i]);\n                    inq[v[i]]=true;\n                }\n            }\n        }\n        inq[x]=false;\n    }\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    memset(headf,-1,sizeof(headf));\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        int u,v,w1,w2;\n        scanf(\"%d%d%d%d\",&u,&v,&w1,&w2);\n        add(u,v,w1,w2);\n    }\n    SPFA_GPS(0);\n    SPFA_GPS(1);\n    SPFA_FJ();\n    printf(\"%d\\n\",b[n]);\n}\n```",
        "postTime": 1506578471,
        "uid": 52102,
        "name": "wycissilly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3106 \u3010[USACO14OPEN]GPS\u7684\u51b3\u6597Dueling GPS's\u3011"
    }
]