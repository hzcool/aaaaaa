[
    {
        "content": "\u9898\u9762\u7a0d\u7ed5\u3002\u7ed9\u51fa\u4e00\u68f5\u6709\u70b9\u6743\u7684\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u6761\u94fe\uff0c\u7ed9\u51fa\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8981\u6c42\u5728\u8fd9\u6761\u94fe\u4e0a\u9009\u4e24\u4e2a\u70b9\uff0c\u7b54\u6848\u662f\u7b2c\u4e8c\u4e2a\u70b9\u7684\u6743\u503c\u51cf\u53bb\u7b2c\u4e00\u4e2a\u70b9\u7684\u6743\u503c\uff0c\u6c42\u8fd9\u4e2a\u6570\u7684\u6700\u5927\u503c\uff08\u5fc5\u987b\u662f\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u9014\u4e2d\u540e\u7ecf\u8fc7\u7684\u51cf\u53bb\u5148\u7ecf\u8fc7\u7684\uff09\uff0c\u7ed3\u679c\u4e3a\u8d1f\u6570\u8f93\u51fa $0$\u3002\u7136\u540e\u518d\u628a\u8fd9\u6761\u94fe\u4e0a\u6240\u6709\u70b9\u6743\u503c\u52a0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u3002\n\n\u5927\u529b\u6811\u5256\uff01\u5957\u7ebf\u6bb5\u6811\uff01\n\n\u90a3\u4e48\u7ebf\u6bb5\u6811\u7ef4\u62a4\u70b9\u5565\u5462\uff1f\u6700\u5927\u503c\uff1f\u6700\u5c0f\u503c\uff1f\u8fd9\u4e24\u4e2a\u91cf\u611f\u89c9\u8fd8\u4e0d\u5927\u591f\u3002\u5408\u5e76\u533a\u95f4\u4fe1\u606f\u3001\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u90fd\u96be\u4ee5\u5b9e\u73b0\u3002\n\n\u90a3\u7ef4\u62a4\u70b9\u5565\u5462\uff1f\u6211\u662f\u53d7\u5230\u4e86\u6811\u4e0a\u6700\u5927\u5b50\u6bb5\u548c\u7684\u542f\u53d1\uff0c\u4ee5\u201c\u5de6\u201d\u201c\u53f3\u201d\u5206\u7c7b\u7ef4\u62a4\u4e00\u4e9b\u4e1c\u897f\uff0c\u6211\u4eec\u628a\u8d70\u4e0b\u6765\u7684\u8fc7\u7a0b\u770b\u505a\u8d77\u70b9\u8d70\u5230 LCA\uff0c\u7136\u540e\u5230\u7ec8\u70b9\u3002\u8003\u8651\u5230\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u80fd\u4e00\u6761\u8def\u5f84\u4e0a\u884c\uff0c\u4e00\u6761\u4e0b\u884c\uff0c\u90a3\u5c31\u7ef4\u62a4**\u8fd9\u4e00\u6bb5\u6570\u5b57\u4ece\u5de6\u5230\u53f3\u8d70\u4e00\u904d\u83b7\u5f97\u7684\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u4ece\u53f3\u5411\u5de6\u8d70\u4e00\u904d\u83b7\u5f97\u7684\u6700\u5927\u503c**\u3002\u8fd9\u91cc\u201c\u4ece\u53f3\u5411\u5de6\u201d\u201c\u4ece\u5de6\u5411\u53f3\u201d\u548c\u9898\u9762\u610f\u4e49\u4e00\u81f4\uff0c\u90fd\u662f\u540e\u9762\u7ecf\u8fc7\u7684\u51cf\u524d\u9762\u7ecf\u8fc7\u7684\u3002\u5bf9\u4e86\uff0c\u8fd8\u6709\u533a\u95f4\u52a0\u7684\u6807\u8bb0\u3002\n\n\u4e0b\u9762\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u53d8\u91cf\u4ee5\u53ca\u533a\u95f4\u4fe1\u606f\u5408\u5e76\uff1a\n\n+ `maxx` \u548c `minn` \u7ef4\u62a4\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\uff0c\u5f88\u597d\u7ef4\u62a4\u3002\n\n+ `lmax` \u7ef4\u62a4\u7ebf\u6bb5\u6811\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u8fd9\u4e00\u6bb5\u533a\u95f4\u4e0a\u7684\u6570\u5b57\u4ece\u5de6\u5230\u53f3\u8d70\u83b7\u5f97\u7684\u6700\u5927\u503c\u3002\u5408\u5e76\uff1a\u5148\u8003\u8651\u4e0d\u8de8\u533a\u95f4\uff0c\u90a3\u5c31\u662f\u8be5\u8282\u70b9\u5de6\u53f3\u513f\u5b50\u7684 `lmax`\uff1b\u8de8\u533a\u95f4\uff0c\u90a3\u5c31\u662f\u53f3\u513f\u5b50\u7684 `maxx` \u51cf\u53bb\u5de6\u513f\u5b50\u7684 `minn`\u3002\u4e09\u8005\u53d6\u6700\u5927\u503c\u3002\n\n+ `rmax` \u7ef4\u62a4\u7ebf\u6bb5\u6811\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u8fd9\u4e00\u6bb5\u533a\u95f4\u4e0a\u7684\u6570\u5b57\u4ece\u53f3\u5230\u5de6\u8d70\u83b7\u5f97\u7684\u6700\u5927\u503c\u3002\u5408\u5e76\uff1a\u5148\u8003\u8651\u4e0d\u8de8\u533a\u95f4\uff0c\u90a3\u5c31\u662f\u8be5\u8282\u70b9\u5de6\u53f3\u513f\u5b50\u7684 `rmax`\uff1b\u8de8\u533a\u95f4\uff0c\u90a3\u5c31\u662f\u5de6\u513f\u5b50\u7684 `maxx` \u51cf\u53bb\u53f3\u513f\u5b50\u7684 `minn`\u3002\u4e09\u8005\u53d6\u6700\u5927\u503c\u3002\n\n+ `tag` \u7ef4\u62a4\u533a\u95f4\u52a0\u7684\u6807\u8bb0\u3002\n\n\u7ebf\u6bb5\u6811\u90e8\u5206\u5c31\u662f\u8fd9\u6837\uff0c\u6bd4\u8f83\u7b80\u660e~~\u5427~~\u3002\n\n\u6ce8\u610f\u201c\u4ece\u5de6\u5230\u53f3\u201d\u7684\u6982\u5ff5\u653e\u5230\u6811\u4e0a\u5c31\u662f\u6309\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u3002\u201c\u4ece\u53f3\u5f80\u5de6\u201d\u540c\u7406\u3002\n\n\u63a5\u4e0b\u6765\u662f\u6811\u5256\u90e8\u5206\u3002\n\n\u8d77\u70b9\u6240\u5728\u7684\u4e00\u7aef\u3001\u7ec8\u70b9\u6240\u5728\u7684\u4e00\u7aef\uff0c\u5206\u522b\u7528 `L`\u3001`R` \u4e24\u4e2a\u53d8\u91cf\u7ef4\u62a4**\u76ee\u524d\u5df2\u7ecf\u8df3\u8fc7\u7684\u90e8\u5206\u7684\u4fe1\u606f**\u3002\u6811\u5256\u5f80\u4e0a\u8df3\u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u8df3\u7684\u662f\u8d77\u70b9\u4e00\u7aef\u7684\u94fe\uff0c\u5c31\u628a\u8fd9\u6b21\u67e5\u8be2\u7684\u7ed3\u679c\u548c `L` \u5408\u5e76\u3002\u5426\u5219\u548c `R` \u5408\u5e76\u3002\u6811\u4e0a\u5408\u5e76\u7684\u89c4\u5219\u548c\u7ebf\u6bb5\u6811\u5b50\u533a\u95f4\u4fe1\u606f\u5408\u5e76\u89c4\u5219\u662f\u4e00\u6837\u7684\u3002\n\n`L` `R` \u521d\u59cb\u5316\uff1a\n\n```\nL.lmax=L.rmax=0;\nL.maxx=-INF;\nL.minn=INF;\nR=L;\n\n```\n\n\u7531\u4e8e\u4e00\u6761\u201c\u4e0d\u62d0\u5f2f\u7684\u201d\u94fe\u4e0a\uff0c\u4e0a\u9762\u7684\u70b9\u7684\u65f6\u95f4\u6233\u80af\u5b9a\u5c0f\u4e8e\u4e0b\u9762\u7684\u70b9\u3002\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\uff1a`ans=max(max(L.rmax,R.lmax),R.maxx-L.minn);`\n\n\u5982\u4f55\u7406\u89e3\uff1f\u4ece\u8d77\u70b9\u51fa\u53d1\u5411\u4e0a\u8d70\uff0c\u90a3\u5c31\u662f\u9006\u7740\u65f6\u95f4\u6233\u8d70\uff0c\u4e5f\u5c31\u662f\u201c\u4ece\u53f3\u5411\u5de6\u201d\u3002\u800c\u5230\u4e86\u6700\u9ad8\u5904\u5411\u7ec8\u70b9\u8d70\uff0c\u662f\u987a\u7740\u65f6\u95f4\u6233\u8d70\u7684\uff0c\u4e5f\u5c31\u662f\u201c\u4ece\u5de6\u5411\u53f3\u201d\uff0c\u867d\u7136\u6211\u4eec\u662f\u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76\u4fe1\u606f\u3002\n\n\u8fd8\u6709\u70b9\u8499\uff1f\u770b\u770b\u4ee3\u7801\u5427\uff01\n\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50010;\nconst int INF=1000000099;\nint t[N],a[N];//\u521d\u59cb\u70b9\u6743\u548c\u5efa\u7acb\u5728\u65f6\u95f4\u6233\u4e0a\u7684\u70b9\u6743\nint head[N],to[N*2],nex[N*2],cnt;\nvoid add(int x,int y){\n\tcnt++;\n\tto[cnt]=y;\n\tnex[cnt]=head[x];\n\thead[x]=cnt;\n}\nint tot,dfn[N],tp[N],fa[N],sz[N],son[N],dep[N];\nvoid dfs1(int x,int f){\n\tfa[x]=f;\n\tdep[x]=dep[f]+1;\n\tsz[x]=1;\n\tint maxn=-1;\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(y==f)\n\t\t\tcontinue;\n\t\tdfs1(y,x);\n\t\tsz[x]+=sz[y];\n\t\tif(sz[y]>maxn){\n\t\t\tmaxn=sz[y];\n\t\t\tson[x]=y;\n\t\t}\n\t}\n}\nvoid dfs2(int x,int top){\n\ttp[x]=top;\n\ttot++;\n\tdfn[x]=tot;\n\ta[tot]=t[x];\n\tif(son[x])\n\t\tdfs2(son[x],top);\n\tfor(int i=head[x];i;i=nex[i]){\n\t\tint y=to[i];\n\t\tif(y==fa[x]||y==son[x])\n\t\t\tcontinue;\n\t\tdfs2(y,y);\n\t}\n}\nstruct ST{\n\tint maxx;\n\tint minn;\n\tint lmax;\n\tint rmax;\n\tint tag;\n}st[N*4];\nvoid build(int root,int l,int r){\n\tif(l==r){\n\t\tst[root].maxx=a[l];\n\t\tst[root].minn=a[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(root*2,l,mid);\n\tbuild(root*2+1,mid+1,r);\n\tst[root].maxx=max(st[root*2].maxx,st[root*2+1].maxx);\n\tst[root].minn=min(st[root*2].minn,st[root*2+1].minn);\n\tst[root].lmax=max(max(st[root*2].lmax,st[root*2+1].lmax),st[root*2+1].maxx-st[root*2].minn);\n\tst[root].rmax=max(max(st[root*2].rmax,st[root*2+1].rmax),st[root*2].maxx-st[root*2+1].minn);\n}\nvoid push_down(int root){\n\tint k=st[root].tag;\n\tst[root].tag=0;\n\tst[root*2].maxx+=k;\n\tst[root*2].minn+=k;\n\tst[root*2+1].maxx+=k;\n\tst[root*2+1].minn+=k;\n\tst[root*2].tag+=k;\n\tst[root*2+1].tag+=k;\n}\nvoid change(int root,int l,int r,int x,int y,int k){\n\tif(l>=x&&r<=y){\n\t\tst[root].maxx+=k;\n\t\tst[root].minn+=k;\n\t\tst[root].tag+=k;\n\t\treturn;\n\t}\n\tif(st[root].tag!=0&&l!=r)\n\t\tpush_down(root);\n\tint mid=(l+r)/2;\n\tif(mid>=x)\n\t\tchange(root*2,l,mid,x,y,k);\n\tif(mid+1<=y)\n\t\tchange(root*2+1,mid+1,r,x,y,k);\n\tst[root].maxx=max(st[root*2].maxx,st[root*2+1].maxx);\n\tst[root].minn=min(st[root*2].minn,st[root*2+1].minn);\n\tst[root].lmax=max(max(st[root*2].lmax,st[root*2+1].lmax),st[root*2+1].maxx-st[root*2].minn);\n\tst[root].rmax=max(max(st[root*2].rmax,st[root*2+1].rmax),st[root*2].maxx-st[root*2+1].minn);\n}\nST ask(int root,int l,int r,int x,int y){\n\tif(l>=x&&r<=y)\n\t\treturn st[root];\n\tif(st[root].tag!=0&&l!=r)\n\t\tpush_down(root);\n\tint mid=(l+r)/2;\n\tif(mid>=y)\n\t\treturn ask(root*2,l,mid,x,y);\n\telse{\n\t\tif(mid+1<=x)\n\t\t\treturn ask(root*2+1,mid+1,r,x,y);\n\t\telse{\n\t\t\tST L=ask(root*2,l,mid,x,y);\n\t\t\tST R=ask(root*2+1,mid+1,r,x,y);\n\t\t\tST res;\n\t\t\tres.maxx=max(L.maxx,R.maxx);\n\t\t\tres.minn=min(L.minn,R.minn);\n\t\t\tres.lmax=max(max(L.lmax,R.lmax),R.maxx-L.minn);\n\t\t\tres.rmax=max(max(L.rmax,R.rmax),L.maxx-R.minn);\n\t\t\treturn res;\n\t\t}\n\t}\n}\nint main(){\n\tint n;\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&t[i]);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tdfs1(1,1);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tint m;\n\tcin>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,k;\n\t\tST L,R;\n\t\tL.lmax=L.rmax=0;\n\t\tL.maxx=-INF;\n\t\tL.minn=INF;\n\t\tR=L;\n\t\tscanf(\"%d%d%d\",&x,&y,&k);\n\t\tint xx=x;\n\t\tint yy=y;\n\t\twhile(tp[x]!=tp[y]){\n\t\t\tif(dep[tp[x]]<dep[tp[y]]){//\u8df3\u7ec8\u70b9\u4e00\u7aef\u7684\u94fe \n\t\t\t\tST res=ask(1,1,n,dfn[tp[y]],dfn[y]);\n\t\t\t\tR.lmax=max(max(res.lmax,R.lmax),R.maxx-res.minn);\n\t\t\t\tR.rmax=max(max(res.rmax,R.rmax),res.maxx-R.minn);\n\t\t\t\tR.maxx=max(R.maxx,res.maxx);\n\t\t\t\tR.minn=min(R.minn,res.minn);\n\t\t\t\ty=fa[tp[y]];\n\t\t\t}\n\t\t\telse{//\u8df3\u8d77\u70b9\u4e00\u7aef\u7684\u94fe \t\n\t\t\t\tST res=ask(1,1,n,dfn[tp[x]],dfn[x]);\n\t\t\t\tL.lmax=max(max(res.lmax,L.lmax),L.maxx-res.minn);\n\t\t\t\tL.rmax=max(max(res.rmax,L.rmax),res.maxx-L.minn);\n\t\t\t\tL.maxx=max(L.maxx,res.maxx);\n\t\t\t\tL.minn=min(L.minn,res.minn);\n\t\t\t\tx=fa[tp[x]];\n\t\t\t}\n\t\t}\n\t\tif(dep[x]<dep[y]){//\u8df3\u7ec8\u70b9\u4e00\u6bb5\u7684\u94fe \n\t\t\tST res=ask(1,1,n,dfn[x],dfn[y]);\n\t\t\tR.lmax=max(max(res.lmax,R.lmax),R.maxx-res.minn);\n\t\t\tR.rmax=max(max(res.rmax,R.rmax),res.maxx-R.minn);\n\t\t\tR.maxx=max(R.maxx,res.maxx);\n\t\t\tR.minn=min(R.minn,res.minn);\n\t\t}\n\t\telse{//\u8df3\u8d77\u70b9\u4e00\u7aef\u7684\u94fe \n\t\t\tST res=ask(1,1,n,dfn[y],dfn[x]);\n\t\t\tL.lmax=max(max(res.lmax,L.lmax),L.maxx-res.minn);\n\t\t\tL.rmax=max(max(res.rmax,L.rmax),res.maxx-L.minn);\n\t\t\tL.maxx=max(L.maxx,res.maxx);\n\t\t\tL.minn=min(L.minn,res.minn);\n\t\t}\n\t\tint ans=max(max(L.rmax,R.lmax),R.maxx-L.minn);\n\t\tprintf(\"%d\\n\",ans);\n\t\tx=xx;//\u4fee\u6539\u4e4b\u524d\u6062\u590d\u6210\u539f\u6765\u7684 x\u3001y \u503c \n\t\ty=yy;\n\t\twhile(tp[x]!=tp[y]){\n\t\t\tif(dep[tp[x]]<dep[tp[y]])\n\t\t\t\tswap(x,y);\n\t\t\tchange(1,1,n,dfn[tp[x]],dfn[x],k);\n\t\t\tx=fa[tp[x]];\n\t\t}\n\t\tif(dep[x]>dep[y])\n\t\t\tswap(x,y);\n\t\tchange(1,1,n,dfn[x],dfn[y],k);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1638763496,
        "uid": 140360,
        "name": "LKawaii",
        "ccfLevel": 0,
        "title": "P3976\u9898\u89e3"
    },
    {
        "content": "### [\u535a\u5ba2](https://a-failure.github.io/2018/12/04/TJOI2015-\u65c5\u6e38/)\n\n\u51fa\u9898\u4eba\u8fd9\u4e2a\u8bed\u6587\u8868\u8fbe\u80fd\u529b\u771f\u7684\u2026\u2026\n\n\u9898\u76ee\u5927\u610f\uff1a\n\n> \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ece$a$\u8d70\u5230$b$\uff0c\u9009\u62e9\u4e24\u4e2a\u57ce\u5e02$c,d(dis_{a,c}<dis_{a,d})$\uff0c\u4f7f\u5f97$w_d-w_c$\u7684\u503c\u6700\u5927\uff0c\u6c42\u8fd9\u4e2a\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8981\u6c42\u7ef4\u62a4\u94fe\u4e0a\u4fee\u6539\n\n\u5982\u679c\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u663e\u7136\u7528\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u7b80\u5355\u7ef4\u62a4\uff0c\u8fd9\u662f\u653e\u5230\u6811\u4e0a\u7684\uff0c\u6240\u4ee5\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u4e86\n\n\u8003\u8651\u6811\u94fe\u5256\u5206\u5904\u7406\u8be2\u95ee\u7684\u8fc7\u7a0b\uff0c\u4e24\u70b9\u6df1\u5ea6\u5927\u7684\u5f80\u4e0a\u6cbf\u7740\u91cd\u94fe\u8df3\uff0c\u76f4\u5230\u8df3\u5230$LCA$\n\n![](https://a-failure.github.io/img/study/travel1.png)\n\n\u8fd9\u6837\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n\n- \u4e00\u6761\u94fe\u4e0a\u4e0d\u4e00\u5b9a\u662f\u4e00\u4e2a\u7f16\u53f7\u8fde\u7eed\u7684\u533a\u95f4\n- \u5de6\u8fb9\u94fe\u662f\u7531\u5927\u7684\u7f16\u53f7\uff08\u7ebf\u6bb5\u6811\u7f16\u53f7\uff09\u8df3\u5230\u5c0f\u7684\u7f16\u53f7\n\n\u6240\u4ee5\u8981\u5206\u5de6\u53f3\u94fe\u8ba8\u8bba\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u8df3\u94fe\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\uff08\u53f3\u8fb9\u94fe\uff09\u6700\u5c0f\uff08\u5de6\u8fb9\u94fe\uff09\u503c\u5373\u53ef\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u540c\u65f6\u7ef4\u62a4\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u7684\u6700\u5927\u5dee\u503c\u5373\u53ef\n\n\u5bf9\u6811\u94fe\u5256\u5206\u8df3\u94fe\u5206\u60c5\u51b5\u8ba8\u8bba\u597d\u50cf\u8fd8\u633a\u5e38\u89c1\u7684qwq\n\n### \u4ee3\u7801\n```\n# include<iostream>\n# include<cstring>\n# include<cstdio>\n# include<algorithm>\n# define tl (k<<1)\n# define tr (k<<1|1)\n# define mid (l+r>>1)\nusing namespace std;\nconst int MAX=5e4+5;\nstruct p{\n    int minn,maxn,d,_d,tag;\n    p(){d=_d=-2e9;}\n}s[MAX<<2];\nstruct q{\n    int x,y;\n}c[MAX<<1];\nint n,m,num,cnt;\nint h[MAX],d[MAX],f[MAX],siz[MAX],son[MAX],w[MAX],re[MAX],top[MAX],id[MAX];\nint read()\n{\n    int x=0,fl=1;\n    char ch=getchar();\n    for(;!isdigit(ch);fl=(ch=='-')?-1:1,ch=getchar());\n    for(;isdigit(ch);x=x*10+ch-48,ch=getchar());\n    return x*fl;\n}\nvoid add()\n{\n    int x=read(),y=read();\n    c[++num]=(q){h[x],y},h[x]=num;\n    c[++num]=(q){h[y],x},h[y]=num;\n}\nvoid dfs(int x=1,int fa=0)\n{\n    f[x]=fa,d[x]=d[fa]+(siz[x]=1);\n    for(int i=h[x];i;i=c[i].x)\n      if(c[i].y^fa)\n      {\n      \tdfs(c[i].y,x),siz[x]+=siz[c[i].y];\n      \tif(siz[son[x]]<siz[c[i].y]) son[x]=c[i].y;\n      }\n}\nvoid dfs1(int x=1,int tp=1)\n{\n    top[x]=tp,id[x]=++cnt,re[cnt]=x;\n    if(!son[x]) return;\n    dfs1(son[x],tp);\n    for(int i=h[x];i;i=c[i].x)\n      if((c[i].y^f[x])&&(c[i].y^son[x])) dfs1(c[i].y,c[i].y);\n}\np pus(p b,p c,int Tag=0)\n{\n    p a;\n    a.minn=min(b.minn,c.minn);\n    a.maxn=max(b.maxn,c.maxn);\n    a.d=max(c.maxn-b.minn,max(b.d,c.d));\n    a._d=max(b.maxn-c.minn,max(b._d,c._d));\n    return a.tag=Tag,a;\n}\nvoid build(int l=1,int r=n,int k=1)\n{\n    if(l==r) return void(s[k].minn=s[k].maxn=w[re[l]]);\n    build(l,mid,tl),build(mid+1,r,tr),s[k]=pus(s[tl],s[tr]);\n}\nvoid down(int k)\n{\n    if(!s[k].tag) return;\n    int f=s[k].tag;\n    s[k].tag=0,s[tl].tag+=f,s[tr].tag+=f,s[tl].minn+=f,s[tl].maxn+=f,s[tr].minn+=f,s[tr].maxn+=f;\n}\nvoid change(int l,int r,int k,int L,int R,int dis)\n{\n    if(l==L&&r==R)\n    {\n        s[k].minn+=dis,s[k].maxn+=dis;\n        return void(s[k].tag+=dis);\n    }\n    down(k);\n    if(R<=mid) change(l,mid,tl,L,R,dis);\n    else if(L>mid) change(mid+1,r,tr,L,R,dis);\n    else change(l,mid,tl,L,mid,dis),change(mid+1,r,tr,mid+1,R,dis);\n    s[k]=pus(s[tl],s[tr],s[k].tag);\n}\nvoid CHANGE(int x,int y,int dis)\n{\n    while(top[x]^top[y])\n    {\n        if(d[top[x]]<d[top[y]]) swap(x,y);\n        change(1,n,1,id[top[x]],id[x],dis),x=f[top[x]];\n    }\n    if(d[x]>d[y]) swap(x,y);\n    change(1,n,1,id[x],id[y],dis);\n}\np ask(int l,int r,int k,int L,int R)\n{\n    if(l==L&&r==R) return s[k];\n    down(k);\n    if(R<=mid) return ask(l,mid,tl,L,R);\n    if(L>mid) return ask(mid+1,r,tr,L,R);\n    return pus(ask(l,mid,tl,L,mid),ask(mid+1,r,tr,mid+1,R));\n}\nint ASK(int x,int y)\n{\n    int ans=0,maxn_l=-2e9,maxn_r=-2e9,minn_r=2e9,minn_l=2e9;\n    p tt;\n    while(top[x]^top[y])\n    {\n        if(d[top[x]]<d[top[y]])\n        {\n            tt=ask(1,n,1,id[top[y]],id[y]),y=f[top[y]];\n            ans=max(ans,max(tt.d,maxn_r-tt.minn)),maxn_r=max(maxn_r,tt.maxn),minn_r=min(minn_r,tt.minn);\n        }\n        else\n        {\n            tt=ask(1,n,1,id[top[x]],id[x]),x=f[top[x]];\n            ans=max(ans,max(tt._d,tt.maxn-minn_l)),maxn_l=max(maxn_l,tt.maxn),minn_l=min(minn_l,tt.minn);\n        }\n    }\n    if(d[x]>d[y])\n    {\n        tt=ask(1,n,1,id[y],id[x]);\n        ans=max(ans,max(tt._d,tt.maxn-minn_l)),minn_l=min(minn_l,tt.minn);\n    }\n    else\n    {\n        tt=ask(1,n,1,id[x],id[y]);\n        ans=max(ans,max(tt.d,maxn_r-tt.minn)),maxn_r=max(maxn_r,tt.maxn);\n    }\n    return max(ans,maxn_r-minn_l);\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;++i)\n      w[i]=read();\n    for(int i=1;i<n;++i,add());\n    dfs(),dfs1(),build(),m=read();\n    for(int i=1,a,b,c;i<=m;++i)\n      a=read(),b=read(),c=read(),printf(\"%d\\n\",ASK(a,b)),CHANGE(a,b,c);\n    return 0;\n}\n```",
        "postTime": 1543971065,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/104522793)\n\n\u672c\u6765\u60f3\u6c34\u9898\u7684\n\n\u5f00\u59cb\u4ee5\u4e3a\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n\n\u7ed3\u679c\u5f00\u5f00\u5fc3\u5fc3\u7684\u6253\u4e86200\u884c\u7a0b\u5e8f\uff0c\u4e00\u6d4b\u6837\u4f8b\uff0c~~\u8fc7\u4e0d\u53bb~~\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u4ed6\u8981\u5148\u4e70\u5230\u5b9d\u77f3\u624d\u80fd\u5356\u6389\u554a\n\n\u6240\u4ee5\u767d\u6253\u4e86200\u884c\u5417qwq\n\n\u6811\u5256\u7684\u505a\u6cd5\u662f\u663e\u7136\u7684\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e5f\u662f\u663e\u7136\u7684\n\n\u4f46\u662f\u4e0d\u80fd\u5149\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e86\n\n\u6211\u4eec\u9700\u8981\u627e\u4e00\u4e2a$a$\u548c$b$\u4f7f$a$\u5728$b$\u5de6\u8fb9\uff08~~\u5f62\u8c61\u7684\u89e3\u91ca~~\uff09\uff0c\u8ba9$val_a-val_b$\u6700\u5927\n\n\u600e\u4e48\u529e\u5462\uff1f\u66b4\u529b\u627e\u5417\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9\u4e9b\u4e1c\u897f\n\n1.\u533a\u95f4\u6700\u5c0f\u503c\n\n2.\u533a\u95f4\u6700\u5927\u503c\n\n3.\u533a\u95f4\u4ece\u5de6\u8fb9\u8d70\u5230\u53f3\u8fb9\u80fd\u591f\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\n\n4.\u533a\u95f4\u4ece\u53f3\u8fb9\u8d70\u5230\u5de6\u8fb9\u80fd\u591f\u83b7\u5f97\u7684\u6700\u5927\u5229\u6da6\n\n\u4e3a\u4ec0\u4e48\u8981\u5206\u5f00\u7ef4\u62a43,4\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u80fd\u591f\u53d1\u73b0\uff0c\u6211\u4eec\u4ece\u4e0d\u540c\u65b9\u5411\u8d70\u540c\u4e00\u6bb5\u8def\u5f97\u5230\u7684\u7b54\u6848\u663e\u7136\u662f\u4e0d\u4e00\u6837\u7684\n\n\u5bf9\u4e8e\u8fd9\u79cd\u8fd4\u56de\u503c\u6bd4\u8f83\u591a\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed3\u6784\u4f53\u8fd4\u56de\u6765\u5b9e\u73b0\n\n\u5176\u5b9e\u8fd9\u79cd\u9898\u578b\u4e5f\u4e0d\u5c11\uff0c\u6bd4\u5982\u8bf4[GSS7](https://www.luogu.com.cn/problem/SP6779)  [\u67d3\u8272](https://devout.blog.luogu.org/solution-p2486)\n\u90fd\u662f\u8fd9\u6837\u7684\u9898\n\n\u7b80\u5355\u8d34\u4e0b\u5408\u5e76\u7b54\u6848\u7684\u4ee3\u7801\uff08\u8fd9\u91cc\u6211\u56fe\u7701\u4e8b\u6ca1\u6709\u65b0\u5efa\u7ed3\u6784\u4f53\uff0c\u76f4\u63a5\u7528\u7684\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u4f53\uff09\n\n```cpp\nsegment_tree merge(segment_tree l,segment_tree r){\n\tsegment_tree res;\n\tres._max=max(l._max,r._max);\n\tres._min=min(l._min,r._min);\n\tres.lmax=max(l._max-r._min,max(l.lmax,r.lmax));\n\tres.rmax=max(r._max-l._min,max(l.rmax,r.rmax));\n\treturn res;\n}\n```\n\n\n\u7136\u540e\u5c31\u5f88\u7b80\u5355\u5566\uff0c\u6211\u4e3a\u4e86\u56fe\u7701\u4e8b\uff0c\u5c31\u5728\u539f\u6765\u5199\u7684\u4ee3\u7801\u4e0a\u6539\u4e86\u6539\uff0c\u4e8e\u662f\u6210\u529f\u7684\u8ba9\u6211\u82b1\u4e86\u4e24\u4e2a\u5c0f\u65f6\u53bbdebug...\n\n\u5982\u679c\u5f53\u65f6\u91cd\u6784\u4ee3\u7801\u7684\u8bdd\u4f30\u8ba1\u8fd8\u5feb\u4e00\u70b9qwq\n\n\u6811\u5256\u8fd9\u79cd\u5927\u7801\u91cf\u7684\u9898\u8fd8\u662f\u8981\u6ce8\u610f\u7ec6\u8282\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4l,r\u6709\u6ca1\u6709\u5199\u53cd\u4e4b\u7c7b\u7684\n\n\u6211\u5c31\u662f\u6700\u540e\u8be2\u95ee\u7684\u65f6\u5019\u4e00\u4e2a\u5730\u65b9\u628ar\u5199\u6210\u4e86l\u6837\u4f8b\u6b7b\u6d3b\u8fc7\u4e0d\u53bb\n\n\u8bb0\u5f97\u6700\u540e\u628al\u7684\u5de6\u53f3swap\u4e00\u4e0b\n\n~~\u8bdd\u8bf4\u6211\u611f\u89c9\u6211\u5de6\u53f3\u5199\u53cd\u4e86\uff0c\u4e3a\u5565\u6211\u8981\u8f93\u51farmax\u5462qaq~~\n\ncode\uff08\u6211\u77e5\u9053\u4f60\u4eec\u53ea\u770b\u8fd9\u4e2a\uff09\uff1a\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n# define debug puts(\"QAQ\");\n\ntypedef long long ll;\nconst int N=1e5+5;\nconst int mod=1e9+7;\nconst double eps=1e-7;\n\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\nint n,q;\nint head[N],cnt;\nint faz[N],son[N],dep[N],siz[N],top[N],dfn[N],tot;\nint a[N],_a[N];\n\nstruct Edge{\n\tint to,next;\t\n}e[N<<1];\n\nvoid add(int x,int y){\n\te[++cnt]=(Edge){y,head[x]},head[x]=cnt;\t\n}\n\nstruct segment_tree{\n\tint l,r;\n\tint _max,_min;\n\tint lmax,rmax;\t\n\tint tag;\n\tsegment_tree(){l=r=_max=_min=tag=0;lmax=rmax=0;}\n\tbool operator == (const segment_tree &cmp)const{\n\t\treturn l==cmp.l&&r==cmp.r&&_max==cmp._max&&_min==cmp._min&&lmax==cmp.lmax&&rmax==cmp.rmax&&tag==cmp.tag;\t\n\t}\n}seg[N<<2];\n\n# define lc (u<<1)\n# define rc (u<<1|1)\n\nvoid pushup(int u){\n\tseg[u]._max=max(seg[lc]._max,seg[rc]._max);\n\tseg[u]._min=min(seg[lc]._min,seg[rc]._min);\n\tseg[u].lmax=max(seg[lc]._max-seg[rc]._min,max(seg[lc].lmax,seg[rc].lmax));\n\tseg[u].rmax=max(seg[rc]._max-seg[lc]._min,max(seg[lc].rmax,seg[rc].rmax));\n}\n\nvoid pushdown(int u){\n\tseg[lc]._max+=seg[u].tag,seg[lc]._min+=seg[u].tag;\n\tseg[rc]._max+=seg[u].tag,seg[rc]._min+=seg[u].tag;\n\tseg[lc].tag+=seg[u].tag,seg[rc].tag+=seg[u].tag;\n\tseg[u].tag=0;\t\n}\n\nsegment_tree merge(segment_tree l,segment_tree r){\n\tsegment_tree res;\n\tres._max=max(l._max,r._max);\n\tres._min=min(l._min,r._min);\n\tres.lmax=max(l._max-r._min,max(l.lmax,r.lmax));\n\tres.rmax=max(r._max-l._min,max(l.rmax,r.rmax));\n\treturn res;\n}\n\nvoid build(int u,int l,int r){\n\tseg[u].l=l,seg[u].r=r;\n\tif(l==r){\n\t\tseg[u]._max=_a[l],seg[u]._min=_a[l];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(u);\n}\n\nvoid update(int u,int l,int r,int k){\n\tif(seg[u].l>=l&&seg[u].r<=r){\n\t\tseg[u]._max+=k,seg[u]._min+=k;\n\t\tseg[u].tag+=k;\n\t\treturn;\n\t}\n\tif(seg[u].tag)pushdown(u);\n\tint mid=seg[u].l+seg[u].r>>1;\n\tif(l<=mid)update(lc,l,r,k);\n\tif(r>mid)update(rc,l,r,k);\n\tpushup(u);\n}\n\nsegment_tree query(int u,int l,int r){\n\tif(seg[u].l>=l&&seg[u].r<=r)return seg[u];\n\tif(seg[u].tag)pushdown(u);\n\tint mid=seg[u].l+seg[u].r>>1;\n\tif(r<=mid)return query(lc,l,r);\n\tif(l>mid)return query(rc,l,r);\n\treturn merge(query(lc,l,r),query(rc,l,r)); \t\n}\n\nvoid RouteModify(int x,int y,int k){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tupdate(1,dfn[top[x]],dfn[x],k);\n\t\tx=faz[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tupdate(1,dfn[x],dfn[y],k);\n}\n\nint RouteQuery(int x,int y){\n\tsegment_tree l,r;\n\tl._min=r._min=2e9;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]){\n\t\t\tr=merge(query(1,dfn[top[y]],dfn[y]),r);\n\t\t\ty=faz[top[y]];\t\n\t\t}\n\t\telse{\n\t\t\tl=merge(query(1,dfn[top[x]],dfn[x]),l);\n\t\t\tx=faz[top[x]];\t\n\t\t}\n\t}\n\tif(dep[x]>dep[y])l=merge(query(1,dfn[y],dfn[x]),l);\n\telse r=merge(query(1,dfn[x],dfn[y]),r);\n\tswap(l.lmax,l.rmax);\n//\tprintf(\"%d %d %d %d\\n\",r._max,r._min,r.lmax,r.rmax);\n\treturn merge(l,r).rmax;\n}\n\nvoid dfs1(int u,int fa){\n\tfaz[u]=fa;\n\tsiz[u]=1;\n\tdep[u]=dep[fa]+1;\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int _top){\n\ttop[u]=_top;\n\tdfn[u]=++tot;\n\t_a[tot]=a[u];\n\tif(!son[u])return;\n\tdfs2(son[u],_top);\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==faz[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n);\n\tRep(i,1,n)read(a[i]);\n\tRep(i,1,n-1){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs1(1,0),dfs2(1,1);\n\tbuild(1,1,n);\n\tread(q);\n\twhile(q--){\n\t\tint x,y,c;\n\t\tread(x),read(y),read(c);\n\t\tprintf(\"%d\\n\",RouteQuery(x,y));\n\t\tRouteModify(x,y,c);\t\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1582715518,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    },
    {
        "content": "[\u65c5\u6e38](https://www.luogu.com.cn/problem/P3976)\n\n### \u9898\u76ee\u5927\u610f\n\n\u5bf9\u4e00\u9897\u6811\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a\u5c06\u4e00\u6761\u4ece $u$ \u5230 $v$ \u7684\u94fe\u4e0a\u7684\u70b9\u7684\u6743\u503c\u589e\u52a0 $x$\uff1b\u67e5\u8be2\u4ece $u$ \u5230 $v$ \u7684\u94fe\u4e0a\u6700\u5927\u7684 $p_i-p_j(dis_{ui}<dis_{uj})$\uff0c\u5176\u4e2d $p_i$ \u8868\u793a\u70b9 $i$ \u7684\u6743\u503c\uff0c$dis_{AB}$ \u8868\u793a\u70b9 $A,B$ \u95f4\u552f\u4e00\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u5148\u601d\u8003\uff0c\u5982\u679c\u6ca1\u6709 $dis_{ui}<dis_{uj}$ \u8fd9\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c06\u5341\u5206\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u94fe\u4e0a\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u5b9e\u73b0\u533a\u95f4\u52a0\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u4f46\u662f\u591a\u4e86\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u6211\u4eec\u7684\u505a\u6cd5\u5c31\u8981\u505a\u51fa\u4e00\u4e9b\u6539\u53d8\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u6761\u4ef6\u662f\u6709\u65b9\u5411\u6027\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u5bf9\u67e5\u8be2\u7684 $u,v$\uff0c\u5982\u679c\u5c06 $u,v$ \u4ea4\u6362\uff0c\u67e5\u8be2\u7684\u7ed3\u679c\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u4e0e\u6211\u4eec\u719f\u77e5\u7684\u94fe\u4e0a\u7684\u548c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u4e4b\u7c7b\u7684\u662f\u4e0d\u540c\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u95ee\u9898\u7b80\u5316\uff0c\u5c06\u6811\u4e0a\u95ee\u9898\u53d8\u6210\u5e8f\u5217\u95ee\u9898\u3002\n\n\u5728\u5e8f\u5217\u4e0a\u7ef4\u62a4\u8fd9\u6837\u4e00\u79cd\u5e26\u6709\u65b9\u5411\u6027\u7684\u53ef\u5408\u5e76\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u5c31\u662f\u7ebf\u6bb5\u6811\uff0c\u800c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6838\u5fc3\u5c31\u662f\u533a\u95f4\u5408\u5e76\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u601d\u8003\u533a\u95f4\u5408\u5e76\u5982\u4f55\u5b9e\u73b0\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u7684\u6700\u5927\u503c $\\text{max}$\uff0c\u6700\u5c0f\u503c $\\text{min}$\uff0c\u4ece\u5de6\u5411\u53f3\u7684\u6700\u5927\u5dee\u503c $\\text{atob}$\uff0c\u4ece\u53f3\u5411\u5de6\u7684\u6700\u5927\u5dee\u503c $\\text{btoa}$\uff08\u5341\u5206\u5f62\u8c61\uff09\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5177\u4f53\u7684\u7ef4\u62a4\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n```\na.max=max(ls.max,rs.max);\na.min=min(ls.min,rs.min);\na.atob=max(max(ls.atob,rs.atob),ls.max-rs.min);\na.btoa=max(max(ls.btoa,rs.btoa),rs.max-ls.min); \n```\n\n\u5269\u4e0b\u7684\u7ebf\u6bb5\u6811\u90e8\u5206\u5341\u5206\u5957\u8def\uff0c\u60f3\u5fc5\u5927\u5bb6\u90fd\u4f1a\u5199\u3002\uff08\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u8be2\u67d0\u4e2a\u5c5e\u6027\uff09\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u73b0\u5728\u65e2\u7136\u6709\u4e86\u5e8f\u5217\u4e0a\u95ee\u9898\u7684\u505a\u6cd5\uff0c\u5269\u4e0b\u7684\u5c31\u53ea\u6709\u628a\u8fd9\u4e2a\u505a\u6cd5\u6269\u5c55\u5230\u6811\u4e0a\u4e86\u3002\n\n\u5bf9\u4e8e\u4e00\u9897\u9759\u6001\u6811\u4e0a\u7684\u94fe\u7684\u7ef4\u62a4\u548c\u67e5\u8be2\uff0c\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u65e0\u7591\u662f\u6811\u94fe\u5256\u5206\uff0c\u6811\u94fe\u5256\u5206\u7684\u601d\u60f3\u4e3b\u8981\u5206\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u628a\u94fe\u62c6\u6210\u82e5\u5e72\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u4e8c\u662f\u5c06\u6240\u6709\u7684\u533a\u95f4\u5408\u5e76\u6210\u94fe\uff0c\u6211\u4eec\u65e2\u7136\u5df2\u7ecf\u89e3\u51b3\u4e86\u7b2c\u4e00\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u7684\u505a\u6cd5\u5c31\u6bd4\u8f83\u663e\u7136\u4e86\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u94fe\u4e0a\u7684\u67e5\u8be2\uff0c\u5982\u4e0b\u56fe\uff1a\n\n![](https://s1.328888.xyz/2023/02/13/c9B4o.md.png)\n\n\u9ed1\u8272\u7bad\u5934\u6240\u6307\u7684\u65b9\u5411\u662f\u6211\u4eec\u7684 $\\text{dfs}$ \u5e8f\u7684\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u7ebf\u6bb5\u6811\u7684\u65b9\u5411\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u800c\u8a00\uff0c\u56fe\u4e2d\u9ed1\u8272\u7684 $l,r$ \u662f\u5b83\u8ba4\u4e3a\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u3002\n\n\u4f46\u6211\u4eec\u5b9e\u9645\u60f3\u8981\u67e5\u8be2\u7684\u65b9\u5411\u662f\u84dd\u8272\u7bad\u5934\u6240\u6307\u7684\u65b9\u5411\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u4ece $u\\to \\text{LCA}(u,v)$ \u7684\u8def\u5f84\u4e0a\uff0c\u7ebf\u6bb5\u6811\u7684\u65b9\u5411\u4e0e\u6211\u4eec\u60f3\u8981\u67e5\u8be2\u7684\u65b9\u5411\u5357\u8f95\u5317\u8f99\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5728\u94fe\u4e0a\u7684\u5408\u5e76\u65f6\uff0c\u5148\u4ece\u8d77\u70b9\u548c\u7ec8\u70b9\u5206\u522b\u6309\u7167\u7ebf\u6bb5\u6811\u65b9\u5411\u7ef4\u62a4\u4e24\u4e2a\u94fe\u4e0a\u7684\u4fe1\u606f\uff0c\u5728\u6700\u540e\u4e00\u6b65\u65f6\u5c06\u8d77\u70b9\u6240\u5728\u94fe\u7684\u4fe1\u606f\u7ffb\u8f6c\uff0c\u518d\u4e0e\u7ec8\u70b9\u94fe\u7684\u4fe1\u606f\u5408\u5e76\uff0c\u4ece\u800c\u5f97\u5230\u5b8c\u6574\u7684\u4fe1\u606f\u3002\n\n\u8fd9\u4e48\u8bf4\u53ef\u80fd\u6709\u70b9\u62bd\u8c61\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=100100;//\u53cc\u5411\u8fb9\uff0c\u4e0d\u8981\u5728\u4e4e\u7a7a\u95f4\uff0c\u5168\u90e8\u5f00\u53cc\u500d\n\nint to[N],nxt[N],head[N],w[N];//\u94fe\u661f\nint top[N],fa[N],dfn[N],rnk[N],siz[N],dep[N],son[N];//\u6811\u5256\u4e03\u4ef6\u5957\nint idx,cnt,n,q,in1,in2,in3;\n\nvoid add(int u,int v){idx++;to[idx]=v;nxt[idx]=head[u];head[u]=idx;}\nvoid Swap(int &x,int &y){int t=x;x=y;y=t;}\n\nstruct STn{int l,r,max,min,atob,btoa,t;};//\u7ebf\u6bb5\u6811\u8282\u70b9\uff0ct\u662f\u61d2\u6807\u8bb0\nvoid merge(STn &res,STn ls,STn rs){//\u5408\u5e76\u4fe1\u606f\n    res.max=max(ls.max,rs.max);\n    res.min=min(ls.min,rs.min);\n    res.atob=max(max(ls.atob,rs.atob),ls.max-rs.min);\n    res.btoa=max(max(ls.btoa,rs.btoa),rs.max-ls.min);\n} \nstruct ST{//\u5e38\u89c4\u7ebf\u6bb5\u6811\n    STn a[N<<2];\n    void add_t(int p,int k){a[p].t+=k;a[p].max+=k;a[p].min+=k;return ;}//\u533a\u95f4\u52a0\n    void push_down(int p){if(a[p].t){add_t(p<<1,a[p].t);add_t(p<<1|1,a[p].t);a[p].t=0;}return ;}//\u4e0b\u653e\u61d2\u6807\u8bb0\n    void build(int p,int l,int r){//\u5e38\u89c4\u5efa\u6811\n        a[p].l=l;a[p].r=r;a[p].t=0;\n        if(a[p].l==a[p].r){a[p].min=a[p].max=w[rnk[a[p].l]];a[p].atob=a[p].btoa=0;return ;}//\u521d\u503c\n        int mid=(a[p].l+a[p].r)>>1;\n        build(p<<1,l,mid);build(p<<1|1,mid+1,r);\n        merge(a[p],a[p<<1],a[p<<1|1]);return ;\n    }\n    void add(int p,int l,int r,int k){//\u5e38\u89c4\u7684\u533a\u95f4\u52a0\n        if(l<=a[p].l&&a[p].r<=r){add_t(p,k);return ;}\n        push_down(p);int mid=(a[p].l+a[p].r)>>1;\n        if(l<=mid) add(p<<1,l,r,k);if(r>mid) add(p<<1|1,l,r,k);\n        merge(a[p],a[p<<1],a[p<<1|1]);return ;\n    }\n    STn ask(int p,int l,int r){//\u5e38\u89c4\u7684\u533a\u95f4\u67e5\u8be2\n        if(l<=a[p].l&&a[p].r<=r) return a[p];\n        push_down(p);int mid=(a[p].l+a[p].r)>>1;\n        if(r<=mid) return ask(p<<1,l,r);\n        if(l>mid) return ask(p<<1|1,l,r);\n        STn res;merge(res,ask(p<<1,l,r),ask(p<<1|1,l,r));\n        return res;\n    }\n}tree;\n\nvoid dfs_1(int s,int gr){//\u5e38\u89c4\u7684\u6811\u5256dfs1\n    dep[s]=dep[gr]+1;fa[s]=gr;\n    son[s]=-1;siz[s]=1;\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v==gr) continue;\n        dfs_1(v,s);\n        siz[s]+=siz[v];\n        if(son[s]==-1||siz[v]>siz[son[s]]) son[s]=v;\n    }\n}\nvoid dfs_2(int s,int tp){//\u5e38\u89c4\u7684\u6811\u5256dfs2\n    top[s]=tp;dfn[s]=++cnt;rnk[cnt]=s;\n    if(son[s]==-1) return ;\n    dfs_2(son[s],tp);\n    for(int i=head[s];i;i=nxt[i]){\n        int v=to[i];\n        if(v!=son[s]&&v!=fa[s]) dfs_2(v,v);\n    }\n}\n\nvoid add_all(int x,int y,int k){//\u5e38\u89c4\u7684\u94fe\u4e0a\u52a0\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]]) Swap(x,y);\n        tree.add(1,dfn[top[x]],dfn[x],k);x=fa[top[x]];\n    }\n    tree.add(1,min(dfn[x],dfn[y]),max(dfn[x],dfn[y]),k);\n}\nint query(int x,int y){//\u4e0d\u5e38\u89c4\u7684\u67e5\u8be2\n    STn l={0,0,-0x3f3f3f3f,0x3f3f3f3f,0,0,0},r=l;//\u5148\u628a\u4e24\u6761\u94fe\u7684\u521d\u503c\u8d4b\u4e0a\n    while(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]){merge(r,tree.ask(1,dfn[top[y]],dfn[y]),r);y=fa[top[y]];}//\u5206\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u4e0d\u80fdswap\n\t\telse{merge(l,tree.ask(1,dfn[top[x]],dfn[x]),l);x=fa[top[x]];}\n        //\u6ce8\u610f\u70b9\uff1a\u5408\u5e76\u65f6 l,r \u5e94\u8be5\u653e\u5728\u540e\u8fb9\u4f5c\u4e3a\u53f3\u533a\u95f4\u8fdb\u884c\u5408\u5e76\n\t}\n\tif(dep[x]>dep[y]) merge(l,tree.ask(1,dfn[y],dfn[x]),l);\n\telse merge(r,tree.ask(1,dfn[x],dfn[y]),r);//\u5206\u4e24\u79cd\u5b8c\u6210\u6700\u540e\u4e00\u6b21\u5408\u5e76\n    return max(max(l.atob,r.btoa),r.max-l.min);//\u8fd9\u91cc\u6ca1\u6709\u628a\u533a\u95f4\u7ffb\u8f6c\uff0c\u800c\u662f\u76f4\u63a5\u5229\u7528\u533a\u95f4\u4fe1\u606f\u5b8c\u6210\u5408\u5e76\n    //\u6ce8\u610f\u70b9\uff1a\u5982\u4f55\u5408\u5e76\uff0c\u7ed3\u5408\u56fe\u50cf\u7406\u89e3\n}\n\nint main(){\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&w[i]);\n    for(int i=1;i<n;i++){\n        scanf(\"%d%d\",&in1,&in2);\n        add(in1,in2);add(in2,in1);\n    }//\u5e38\u89c4\u8f93\u5165\n    dfs_1(1,0);dfs_2(1,1);\n    tree.build(1,1,n);//\u5e38\u89c4\u9884\u5904\u7406\n    scanf(\"%d\",&q);\n    while(q--){\n        scanf(\"%d%d%d\",&in1,&in2,&in3);\n        cout<<max(query(in1,in2),0)<<'\\n';//\u80af\u5b9a\u4e0d\u4f1a\u4e8f\u672c\u5427\n        add_all(in1,in2,in3);//\u5b8c\u4e8b\u4e4b\u540e\u533a\u95f4\u52a0\n    }\n    return 0;\n}\n```",
        "postTime": 1676291935,
        "uid": 767096,
        "name": "TKXZ133",
        "ccfLevel": 4,
        "title": "\u65c5\u6e38 \u9898\u89e3"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u8be2\u95ee\u4e00\u6761\u94fe$(a,b)$\u4e0a\u6ee1\u8db3$dis(a,c)<dis(a,d)$\u7684$(c,d)$\u4e2d\u6700\u5927\u7684$val(d)-val(c)$\n\n\u56e0\u4e3a\u662f\u6c42\u94fe\u4e0a\u7684\u4fe1\u606f\u6240\u4ee5\u5bb9\u6613\u60f3\u5230$LCT$\n\n\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u6700\u5927\u503c\uff08\u8bb0\u4e3a$maxn$\uff09\uff0c\u6700\u5c0f\u503c\uff08\u8bb0\u4e3a$minn$\uff09\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u6700\u5927\u5229\u6da6\uff08\u8bb0\u4e3a$lmax$\uff09\uff0c\u4ece\u53f3\u5230\u5de6\u7684\u6700\u5927\u5229\u6da6\uff08\u8bb0\u4e3a$rmax$\uff09\u3002\n\n\u7ef4\u62a4\uff08\u5e94\u8be5\u6bd4\u8f83\u597d\u7406\u89e3\uff09\uff1a\n\n```cpp\ninl void maintain(int x) {\n\tt[x].maxn = max(max(t[ls(x)].maxn, t[rs(x)].maxn), t[x].w);\n\tt[x].minn = min(min(t[ls(x)].minn, t[rs(x)].minn), t[x].w);\n\tt[x].lmax = max(max(t[ls(x)].lmax, t[rs(x)].lmax), max(t[ls(x)].maxn, t[x].w) - min(t[rs(x)].minn, t[x].w));\n\tt[x].rmax = max(max(t[ls(x)].rmax, t[rs(x)].rmax), max(t[rs(x)].maxn, t[x].w) - min(t[ls(x)].minn, t[x].w));\n}\n```\n\n\u7ef4\u62a4\u4ece\u53f3\u5230\u5de6\u7684\u6700\u5927\u5229\u6da6\u7684\u539f\u56e0\u5c31\u662f\u4ea4\u6362\u5de6\u53f3\u513f\u5b50\u65f6\u5de6\u53f3\u8981\u7ffb\u8f6c\n\n```cpp\ninl void reverse(int x) {\n\tswap(t[x].lmax, t[x].rmax);\n\tswap(ls(x), rs(x));\n\tt[x].filp ^= 1;\n}\n```\n\n\u8fb9\u754c\u6761\u4ef6\uff1a\n\n```cpp\nt[0].minn = inf, t[0].maxn = -inf;\n```\n\n\n\nCode\uff1a\n\n```cpp\n#include <algorithm>\n#include <tuple>\n#include <bitset>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <vector>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n\tRead x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\nstruct node {\n\tint fa, child[2], w, maxn, minn, add, lmax, rmax;\n\tbool filp;\n} t[1000001];\nstruct edge {\n\tint next, to;\n} e[200001];\nint head[100001], tot;\ninl void adde(int x, int y) {\n\te[++tot] = edge{ head[x], y }, head[x] = tot;\n}\ninl void maintain(int x) {\n\tt[x].maxn = max(max(t[ls(x)].maxn, t[rs(x)].maxn), t[x].w);\n\tt[x].minn = min(min(t[ls(x)].minn, t[rs(x)].minn), t[x].w);\n\tt[x].lmax = max(max(t[ls(x)].lmax, t[rs(x)].lmax), max(t[ls(x)].maxn, t[x].w) - min(t[rs(x)].minn, t[x].w));\n\tt[x].rmax = max(max(t[ls(x)].rmax, t[rs(x)].rmax), max(t[rs(x)].maxn, t[x].w) - min(t[ls(x)].minn, t[x].w));\n}\ninl void sum(int x, int w) {\n\tt[x].w += w, t[x].add += w, t[x].maxn += w, t[x].minn += w;\n}\ninl void reverse(int x) {\n\tswap(t[x].lmax, t[x].rmax);\n\tswap(ls(x), rs(x));\n\tt[x].filp ^= 1;\n}\ninl void pushdown(int x) {\n\tif (t[x].add) {\n\t\tif (ls(x))sum(ls(x), t[x].add);\n\t\tif (rs(x))sum(rs(x), t[x].add);\n\t\tt[x].add = 0;\n\t}\n\tif (t[x].filp) {\n\t\tif (ls(x))reverse(ls(x));\n\t\tif (rs(x))reverse(rs(x));\n\t\tt[x].filp = 0;\n\t}\n}\ninl bool nroot(int x) { return ls(fa(x)) == x || rs(fa(x)) == x; }\ninl bool poi(int x) { return rs(fa(x)) == x; }\ninl void push(int x) {\n\tif (nroot(x))push(fa(x));\n\tpushdown(x);\n}\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n\tif (nroot(f))t[gf].child[gfs] = x;\n\tt[x].child[fs ^ 1] = f, t[f].child[fs] = s;\n\tif (s)fa(s) = f;\n\tfa(f) = x, fa(x) = gf;\n\tmaintain(f);\n}\ninl void splay(int x) {\n\tpush(x);\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x)))poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tmaintain(x);\n}\ninl void access(int x) {\n\tfor (re i = 0; x; x = fa(i = x))splay(x), rs(x) = i, maintain(x);\n}\ninl void makeroot(int x) {\n\taccess(x), splay(x), reverse(x);\n}\ninl void split(int x, int y) {\n\tmakeroot(y), access(x), splay(x);\n}\ninl void link(int x, int y) {\n\tsplit(x, y), fa(y) = x;\n}\nsigned main() {\n\tt[0].minn = inf, t[0].maxn = -inf;\n\tre n = read<int>();\n\tfor (re i = 1; i <= n; i++)t[i].maxn = t[i].minn = t[i].w = read<int>();\n\tfor (re i = 1; i < n; i++) {\n\t\tre x = read<int>(), y = read<int>();\n\t\tlink(x, y);\n\t}\n\tre m = read<int>();\n\twhile (m--) {\n\t\tre x = read<int>(), y = read<int>(), w = read<int>();\n\t\tsplit(x, y), printf(\"%d\\n\", t[x].lmax), sum(x, w);\n\t}\n}\n```\n\n",
        "postTime": 1555659865,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P3976 \u65c5\u6e38 LCT"
    },
    {
        "content": "### PS.\n**\u524d\u65b9\u538b\u884c\uff0c\u524d\u65b9\u538b\u884c\uff01\u524d\u65b9\u538b\u884c\uff01\uff01\uff01**  \n\u6c42\u52ff\u55b7\u538b\u884c\u7801\u98ce\u3002![](https://upload.orzsiyuan.com/images/emotions/wq.png)  \n\u5efa\u8bae\u5148\u628a\u4ee3\u7801\u590d\u5236\u5230\u672c\u5730dev-c++\u6216VS-Code\u6216Sublime\u540e\u98df\u7528\u3002  \n47\u884cA\u4e86\u6b64\u9898\n\n### Problem.\n\u6ca1\u4ec0\u4e48\u597d\u89e3\u91ca\u7684\u4e86\u5427\u3002\n\n### Solution\n\u9996\u5148\uff0c\u770b\u5230\u770b\u5230\u8fd9\u9898\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u65b0\u4e16\u754c\u5448\u4e00\u68f5\u6811\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u662f\u94fe\u4e0a\u8be2\u95ee\u3002  \n\u90a3\u4e48\u663e\u7136\u662f\u6811\u5256\u3002  \n\u7136\u540e\u6211\u4eec\u5c31\u6210\u529f\u5730\u628a\u5b83\u8f6c\u6362\u4e3a\u533a\u95f4\u95ee\u9898\u3002  \n\u533a\u95f4\u4fee\u6539\uff1a\u7b80\u5355\u7684\u533a\u95f4\u52a0\u3002  \n\u533a\u95f4\u8be2\u95ee\uff1a\u8981\u6c42\u533a\u95f4\u5185$\\max\\{a_x-a_y\\}(l_i\\le x\\le y\\le r_i)$\u7684\u6700\u5927\u503c\u3002  \n\n\u7b14\u8005\u770b\u5230\u8fd9\u9898\u4e4b\u540e\u60f3\u5230\u4e86[P1073\u6700\u4f18\u8d38\u6613](https://www.luogu.com.cn/problem/P1073)\u3002  \n\u8fd9\u4e24\u9898\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4e00\u68f5\u662f\u6570\uff0c\u4e00\u4e2a\u662f\u56fe\u3002\u590d\u6742\u5ea6\u4e5f\u4e0d\u4e00\u6837\u3002  \n\u6700\u4f18\u8d38\u6613\u90a3\u9898\u7684\u533a\u95f4\u95ee\u9898\u662f\u76f4\u63a5\u626b\u4e00\u904d\uff0c\u7136\u540e\u7ef4\u62a4\u7684\u3002  \n\n\u7b14\u8005\u53c8\u60f3\u5230\u4e86\u53e6\u4e00\u9898\uff0c\u662fPOJ\u4e0a\u7684\uff0c\u5177\u4f53\u9898\u53f7\u8bb0\u4e0d\u6e05\u4e86\u3002![](https://upload.orzsiyuan.com/images/emotions/wq.png)  \n\u90a3\u9898\u8c8c\u4f3c\u662f\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528st\u8868\u7ef4\u62a4\u5dee\u5206\uff0c\u7136\u540e\u90a3\u9898\u5c31\u505a\u5b8c\u4e86\u3002  \n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u6765\u8003\u8651\u8fd9\u9898\u3002  \n\u6211\u4eec\u7684\u533a\u95f4\u95ee\u9898\u5fc5\u987b\u5728log\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u3002  \n\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u8003\u8651\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u7b54\u6848\u3002  \n\n\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c`maxn`\uff0c\u6700\u5c0f\u503c`minn`\u3002  \n\u5de6\u8fb9\u7684\u6700\u5927\u503c`ans1`\uff0c\u53f3\u8fb9\u7684\u6700\u5927\u503c`ansr`\u3002  \n\n\u7136\u540e\u5f97\u5230`ans1`\u548c`ans2`\u540e\u5c31\u53ef\u4ee5\u6c42\u51fa\u6700\u7ec8\u7684\u7b54\u6848\u4e86\u3002  \n\n### Coding\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{int to,nxt;}e[100005];//\u8fb9\u7684\u7ed3\u6784\u4f53\nstruct que{int maxn,minn,ansl,ansr;};//\u67e5\u8be2\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\nstruct trn{que v;int ls,rs,fla;}t[200005];//\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53\nint n,m,tot,cnt,head[50005],rt,siz[50005],dep[50005],dfn[50005],f[50005],sn[50005],tp[50005],w[50005],a[50005];//\u6811\u5256\u9700\u8981\u7684\u4e1c\u897f\n//head\u662f\u94fe\u5f0f\u524d\u5411\u661f\u7684\uff0csiz\u662f\u4ee5\u8fd9\u4e2a\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u3002\n//dep\u662f\u5f53\u524d\u8282\u70b9\u6df1\u5ea6\uff0cdfn\u662f\u6811\u5256\u4e2d\u7684dfs\u5e8f\u3002\n//f\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u4ed8\u6e05\uff0csn\u662f\u4e00\u4e2a\u8282\u70b9\u7684\u91cd\u513f\u5b50\u3002  \n//tp\u662f\u4e00\u4e2a\u8282\u70b9\u6240\u5728\u7684\u91cd\u94fe\u94fe\u9876\uff0ca\u662f\u8bfb\u5165\u7684\u6743\u503c\uff0cw\u662f\u6309\u7167dfn\u6392\u5e8f\u7684a\u3002\ninline void adde(int x,int y) {e[++tot]=(edge){y,head[x]},head[x]=tot;}//\u52a0\u8fb9\ninline void dfs1(int x,int fa=0)\n{//\u6811\u5256\u7b2c\u4e00\u904ddfs\uff0c\u6c42\u51fasiz\uff0cdep\uff0cf\uff0csn\n\tsiz[x]=1,dep[x]=dep[fa]+1,f[x]=fa,sn[x]=0;\n\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa) dfs1(e[i].to,x),siz[x]+=siz[e[i].to],(siz[e[i].to]>siz[sn[x]])?(sn[x]=e[i].to):0;\n}\ninline void dfs2(int x,int top)\n{//\u6811\u5256\u7b2c\u4e8c\u904d\u6c42dfs\uff0c\u6c42\u51fadfn\uff0ctp\n\tdfn[x]=++cnt,tp[x]=top,w[cnt]=a[x];if(sn[x]) dfs2(sn[x],top);\n\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].to!=f[x]&&e[i].to!=sn[x]) dfs2(e[i].to,e[i].to);\n}\ninline que up(que a,que b) {return (que){max(a.maxn,b.maxn),min(a.minn,b.minn),max(b.maxn-a.minn,max(a.ansl,b.ansl)),max(a.maxn-b.minn,max(a.ansr,b.ansr))};}//\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\ninline void allc(int x,int c) {if(c) t[x].v.maxn+=c,t[x].v.minn+=c,t[x].fla+=c;}//\u4fee\u6539\u4e00\u4e2a\u533a\u95f4\ninline void down(int x) {allc(t[x].ls,t[x].fla),allc(t[x].rs,t[x].fla),t[x].fla=0;}//\u4e0b\u63a8\u6807\u8bb0\ninline void bld(int &x,int l,int r)\n{//\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u52a8\u6001\u5f00\u70b9\u5199\u4e60\u60ef\u4e86\n\tx=++cnt;if(l==r) return (void)(t[x]=(trn){(que){w[l],w[l],0,0},0,0,0});\n\tbld(t[x].ls,l,(l+r)>>1),bld(t[x].rs,((l+r)>>1)+1,r),t[x].v=up(t[t[x].ls].v,t[t[x].rs].v);\n}\ninline que qry(int x,int l,int r,int dl,int dr,int dv)\n{//\u7ebf\u6bb5\u6811\u67e5\u8be2\u548c\u4fee\u6539\uff0c\u56e0\u4e3a\u9898\u76ee\u67e5\u8be2\u4fee\u6539\u540c\u65f6\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ee5\u5408\u5e76\uff08\u7531\u6b64\u53ef\u89c1\u7b14\u8005\u7684\u5077\u61d2\n\tif(l>dr||dl>r) return (que){0,(int)1e9,0,0};else if(dl<=l&&r<=dr) return allc(x,dv),t[x].v;else down(x);\n\tque res=up(qry(t[x].ls,l,(l+r)>>1,dl,dr,dv),qry(t[x].rs,((l+r)>>1)+1,r,dl,dr,dv));return t[x].v=up(t[t[x].ls].v,t[t[x].rs].v),res;\n}\ninline int work(int x,int y,int v)\n{//\u6811\u5256\u6c42\u94fe\u4fe1\u606f\n//\u8fd9\u4e2a\u6811\u5256\u548c\u5176\u4ed6\u7684\u4e0d\u4e00\u6837\uff0c\u662f\u6709\u987a\u5e8f\u7684\u3002\n//\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5206\u522b\u7edf\u8ba1\u4e24\u6761\u94fe\u7684\u4fe1\u606f\u3002\n\tque a1=(que){0,(int)1e9,0,0},a2=(que){0,(int)1e9,0,0},tmp;\n\twhile(tp[x]!=tp[y]) if(dep[tp[x]]>dep[tp[y]]) a1=up(qry(rt,1,n,dfn[tp[x]],dfn[x],v),a1),x=f[tp[x]];else a2=up(qry(rt,1,n,dfn[tp[y]],dfn[y],v),a2),y=f[tp[y]];\n\tswap(a1.ansl,a1.ansr);\n\tif(dfn[x]<dfn[y]) a1=up(up(a1,qry(rt,1,n,dfn[x],dfn[y],v)),a2);else tmp=qry(rt,1,n,dfn[y],dfn[x],v),swap(tmp.ansl,tmp.ansr),a1=up(a1,up(tmp,a2));\n\treturn a1.ansl;\n}\nint main()\n{\n\tscanf(\"%d\",&n),siz[0]=0,dep[0]=0,cnt=0,tot=0,memset(head,0,sizeof(head));//\u4e00\u5927\u5806\u521d\u59cb\u5316\uff08\u7b14\u8005\u4e60\u60ef\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",a+i);\n\tfor(int i=1,x,y;i<n;i++) scanf(\"%d%d\",&x,&y),adde(x,y),adde(y,x);\n\tscanf(\"%d\",&m),dfs1(1),dfs2(1,1),bld(rt,1,n);\n\tfor(int i=1,a,b,v;i<=m;i++) scanf(\"%d%d%d\",&a,&b,&v),printf(\"%d\\n\",work(a,b,v));\n\treturn 0;\n}\n```\n~~\u5b8c\u7ed3\u6492\u82b1\uff0c\u65e0\u803b\u6c42\u8d5e\uff0c\u6c42\u52ff\u55b7\u538b\u884c\u7801\u98ce~~",
        "postTime": 1582547133,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P3976[TJOI2015]\u65c5\u6e38\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\uff0c\u611f\u89c9\u86ee\u6709\u96be\u5ea6\uff0c\u8003\u573a\u4e0a\u4e5f\u4e0d\u597d\u5199  \u6ce8\u610f\u6811\u7684\u8282\u70b9\u6570\u5e94\u8be5\u662f4\\*N\n\n\n\n\u9996\u5148\u6211\u4eec\u4e0d\u59a8\u628a\u95ee\u9898\u7b80\u5316\u4e00\u4e0b\uff0c\u5c06\u6811\u5f62\u56fe\u7b80\u5316\u4e3a\u4e00\u7ef4\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5149\u660e\u6b63\u5927\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\n\u4e0a\u9762\u8fd9\u9053\u9898\u5927\u5bb6\u53ef\u4ee5\u770b\u4e00\u770b \u4e5f\u6709\u8bb2\u89e3\n\n\n\u7136\u540e\u5bf9\u4e8e\u6811\u4e0a\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u9009\u62e9\u6811\u94fe\u5256\u5206\u964d\u4f4e\u590d\u6742\u5ea6\n\n\n\u6811\u94fe\u5256\u5206dfs1\u6211\u4eec\u505a\u7684\u662f\u628a\u6240\u6709\u7684\u8f7b\u91cd\u513f\u5b50\u5212\u5206\u51fa\u6765\uff0c\u5982\u679c\u662ffa\u5219continue;\n\n\ndfs2\u662f\u9488\u5bf9\u6211\u4eec\u5df2\u7ecf\u5212\u5206\u597d\u7684\u7ed9\u4e88\u6807\u8bb0\n\n\n\u6211\u4eec\u9996\u5148\u5148\u7ed9\u91cd\u513f\u5b50\u6807\u8bb0\uff0cif (son[x]) dfs2(son[x],top);\n\n\n\u8fd9\u6837\u7684\u8bdd\u4fdd\u8bc1\u4e86\u91cd\u513f\u5b50\u7684\u6807\u53f7\u662f\u8fde\u7eed\u7684\u540c\u65f6\u4e5f\u4fdd\u8bc1\u4e86\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u67e5\u8be2\u662f\u8fde\u7eed\u7684\n\n\n\u53e6\u5916\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55w\u6570\u7ec4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5751\u70b9\uff0c\u4e0b\u9762\u5efa\u7acb\u7ebf\u6bb5\u6811\u4f1a\u8bf4\n\n\n\u5efa\u7acb\u5b8c\u91cd\u513f\u5b50\u5f00\u59cb\u5efa\u7acb\u8f7b\u513f\u5b50\uff0c\u8f7b\u513f\u5b50\u7684\u6bcf\u4e2a\u9876\u90fd\u662f\u81ea\u5df1\uff0c\u91cd\u513f\u5b50\u5c31\u662f\u8fde\u7eed\u4e00\u4e32\u7684\u9876\n\n\n\u6ce8\u610f\u641c\u7d22\u8f7b\u513f\u5b50\u7684\u65f6\u5019\u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff0c\u8981\u5224\u65ad\u4e0b\u662f\u5426\u662f\u7236\u4eb2\u6216\u8005\u662f\u5426\u662f\u91cd\u513f\u5b50\uff08\u4e4b\u524d\u641c\u7d22\u8fc7\uff09\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5efa\u7acb\u7ebf\u6bb5\u6811\uff0c\u6211\u60f3\u8fd9\u4e2a\u4e0d\u7528\u591a\u8d58\u8ff0\u4e86\n\n\n\u5f3a\u8c03\u4e00\u4e0b\u5bf9\u4e8e\u5efa\u7acb\u7ebf\u6bb5\u6811\u65f6\u521d\u503c\u7684\u7ed9\u6cd5\n\n\n\u6211\u4e00\u5f00\u59cb\u7ed9\u7684\u662ftree[x].max=tree[x].min=a[id[l]];\n\n\n\u8fd9\u662f\u4e00\u79cd\u9519\u8bef\u7684\u7ed9\u6cd5\uff0c\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u6211\u4eec\u7ebf\u6bb5\u6811\u548c\u771f\u6b63\u6811\u7684\u6620\u5c04\u5173\u7cfb\n\n\n\u6211\u4eec\u5176\u5b9e\u50cf\u6811\u4e0a\u83ab\u961f\u7c7b\u4f3c\u6211\u4eec\u7ebf\u6bb5\u6811\u5e94\u8be5\u662f\u6211\u4eec\u6839\u636e\u6df1\u641c\u5e8f\u6765\u786e\u5b9a\u7684\n\n\n\u6211\u4eecid\u91cc\u50a8\u5b58\u7684\u76f8\u5f53\u4e8e\u6211\u4eec\u6839\u636e\u666e\u901a\u7684\u5e8f\u5217\u53bb\u627e\u6df1\u641c\u5e8f\u5217\n\n\n\u7136\u800c\u7ebf\u6bb5\u6811\u7684\u521d\u503c\u662f\u8981\u6839\u636e\u6df1\u641c\u5e8f\u5bfb\u627e\u666e\u901a\u5e8f\u5217\n\n\n\u7136\u540e\u6700\u540e\u67e5\u627e\u7b54\u6848\u7684\u65f6\u5019\u8981\u6ce8\u610f\u65b9\u5411\u6027\n\n\n```cpp\nvoid solve(int x,int y,int v){\n    node1 ansl,ansr;\n    while (tp[x]!=tp[y]){\n        if(dep[tp[x]]>dep[tp[y]]){\n            ansl=update1(ansl,query(root,id[tp[x]],id[x],v));\n            x=fa[tp[x]];\n        }else{\n            ansr=update1(query(root,id[tp[y]],id[y],v),ansr);\n            y=fa[tp[y]];\n        }\n    }\n    swap(ansl.ans,ansl.ans1);\n    if (id[x]<id[y]){\n        ansl=update1(ansl,query(root,id[x],id[y],v));\n        ansl=update1(ansl,ansr);    \n    }else{\n        node1 tmpp=query(root,id[y],id[x],v);\n        swap(tmpp.ans,tmpp.ans1);\n        ansr=update1(tmpp,ansr);\n        ansl=update1(ansl,ansr);\n    }    \n    printf(\"%d\\n\",ansl.ans);\n//    printf(\"sdfsdf\\n\");\n    //print(root);\n}\n```\n\u9996\u5148\u5982\u679c\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u6211\u4eec\u5e94\u8be5\u9009\u62e9\u6df1\u5ea6\u5927\u7684\u5f80\u4e0a\u8df3\u8dc3\n\n\n\u5728\u6b64\u58f0\u660e\u4e00\u4e0b tree[x].ans ans\u662f\u6b63\u5411\u5dee\u6700\u5927\uff0cans1\u662f\u9006\u5411\u5dee\u6700\u5927\uff0c\u770b\u6c34\u679c\u59d0\u90a3\u9053\u9898\u5c31\u53ef\u4ee5\u660e\u767d\n\n\n\u7531\u4e8e\u6211\u4eec\u6839\u636e\u6df1\u641c\u539f\u7406\u53ef\u4ee5\u5f88\u6e05\u695a\u77e5\u9053tp[x]-x\u5728\u6df1\u641c\u5e8f\u4e2d\uff08\u4e5f\u5c31\u662f\u7ebf\u6bb5\u6811\u662f\u4ece\u5de6\u5230\u53f3\uff09\n\n\n\u7136\u800c\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u77e5\u9053\u7684\u662fx->y\u8fd9\u6761\u8def\u5f84\u6240\u4ee5\u6839\u636etp\u7684\u5b9a\u4e49\u5e94\u8be5\u662fx->tp[x]\n\n\n\u90a3\u4e48\u6ca1\u5173\u7cfb\uff0c\u505a\u7684\u65f6\u5019\u6309\u7167\u7ebf\u6bb5\u6811\u6b63\u5e38\u987a\u5e8f\u6765\u505a\uff0c\u6211\u4eec\u4e0d\u662f\u7ef4\u62a4\u4e86ans1\u5417\uff0c\u6211\u4eec\u76f4\u63a5\u4ea4\u6362\u4e00\u4e0bans\u548cans1\u5c31\u53ef\u4ee5\u4e86\n\n\n\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u6ca1\u6709\u4ec0\u4e48\u65b9\u5411\u95ee\u9898\u4e86\uff0c\u4e0d\u8fc7\u6ce8\u610fupdate1\u51fd\u6570\u7ed9\u4e88\u7684\u4e24\u4e2a\u53c2\u6570\u7684\u987a\u5e8f\u4e00\u5b9a\u4e0d\u80fd\u5199\u53cd\u4e86 \u5199\u53cd\u4e86\uff0c\u5408\u5e76\u7684\u6709\u5411\u6027\u5c31\u53cd\u4e86\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 55000\n#define inf 0x7fffffff\nusing namespace std;\ninline int read(){\n    int x=0;char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\nstruct node{\n    int y,next;\n}data[N<<1];\nstruct node1{\n    int max,min,ans,ans1;\n    node1(){\n        ans=ans1=max=0;min=inf;\n    }\n};\nstruct node2{\n    int l,r,left,right,max,min,ans,ans1,lazy;\n}tree[N<<2];\nint size[N],id[N],fa[N],son[N],tp[N],a[N],dep[N],h[N],cnt,root,n,num,m,w[N];\nvoid dfs1(int x){\n    size[x]=1;\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y;\n        if(fa[x]==y) continue;\n        dep[y]=dep[x]+1;fa[y]=x;dfs1(y);size[x]+=size[y];\n        if (size[y]>size[son[x]]) son[x]=y;\n    }\n}\nvoid dfs2(int x,int top){\n    id[x]=++cnt;tp[x]=top;w[cnt]=a[x];\n    if (son[x]) dfs2(son[x],top);\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y;\n        if (y==fa[x]||y==son[x]) continue;\n        dfs2(y,y);\n    }\n}\ninline void update(int x){\n    int l=tree[x].left,r=tree[x].right;\n    tree[x].ans=max(tree[r].max-tree[l].min,max(tree[l].ans,tree[r].ans));\n    tree[x].ans1=max(tree[l].max-tree[r].min,max(tree[l].ans1,tree[r].ans1));\n    tree[x].min=min(tree[l].min,tree[r].min);\n    tree[x].max=max(tree[l].max,tree[r].max);\n    \n}\nvoid print(int x){\n    if (tree[x].left) print(tree[x].left);\n    printf(\"%d %d %d %d %d %d %d\\n\",tree[x].l,tree[x].r,tree[x].max,tree[x].min,tree[x].ans,tree[x].ans1,tree[x].lazy);\n    if (tree[x].right) print(tree[x].right);\n}\nvoid build(int &x,int l,int r){\n    x=++cnt;tree[x].l=l;tree[x].r=r;\n    if(l==r){\n        tree[x].min=tree[x].max=w[l];\n        tree[x].ans=tree[x].ans1=0;return;\n    }\n    int mid=l+r>>1;\n    build(tree[x].left,l,mid);build(tree[x].right,mid+1,r);\n    update(x);\n}\ninline node1 update1(node1 tmp1,node1 tmp2){\n    node1 ans1;\n    ans1.ans=max(tmp2.max-tmp1.min,max(tmp1.ans,tmp2.ans));\n    ans1.ans1=max(tmp1.max-tmp2.min,max(tmp1.ans1,tmp2.ans1));\n    ans1.min=min(tmp1.min,tmp2.min);\n    ans1.max=max(tmp1.max,tmp2.max);\n    return ans1;\n}\nvoid pushdown(int x){\n    if (!tree[x].lazy) return;\n    int l=tree[x].left,r=tree[x].right;\n    int lazy=tree[x].lazy;\n    tree[l].lazy+=lazy;tree[r].lazy+=lazy;\n    tree[l].max+=lazy;tree[r].max+=lazy;\n    tree[l].min+=lazy;tree[r].min+=lazy;\n    tree[x].lazy=0;\n}\nnode1 query(int rt,int l,int r,int v){\n    if(l<=tree[rt].l&&r>=tree[rt].r){\n        tree[rt].lazy+=v;tree[rt].max+=v;tree[rt].min+=v;\n        node1 tmp;tmp.max=tree[rt].max;tmp.min=tree[rt].min;tmp.ans=tree[rt].ans;tmp.ans1=tree[rt].ans1;\n        return tmp;\n    }\n    int mid=(tree[rt].l+tree[rt].r)>>1;\n    node1 tmp1;node1 tmp2;pushdown(rt);\n    if (l<=mid) tmp1=query(tree[rt].left,l,r,v);\n    if (r>mid) tmp2=query(tree[rt].right,l,r,v);\n    update(rt);\n    return update1(tmp1,tmp2);\n}\ninline void swap(int &x,int &y){\n    x^=y;y^=x;x^=y;\n}\nvoid solve(int x,int y,int v){\n    node1 ansl,ansr;\n    while (tp[x]!=tp[y]){\n        if(dep[tp[x]]>dep[tp[y]]){\n            ansl=update1(query(root,id[tp[x]],id[x],v),ansl);\n            x=fa[tp[x]];\n        }else{\n            ansr=update1(query(root,id[tp[y]],id[y],v),ansr);\n            y=fa[tp[y]];\n        }\n    }\n    swap(ansl.ans,ansl.ans1);\n    if (id[x]<id[y]){\n        ansl=update1(ansl,query(root,id[x],id[y],v));\n        ansl=update1(ansl,ansr);    \n    }else{\n        node1 tmpp=query(root,id[y],id[x],v);\n        swap(tmpp.ans,tmpp.ans1);\n        ansr=update1(tmpp,ansr);\n        ansl=update1(ansl,ansr);\n    }    \n    printf(\"%d\\n\",ansl.ans);\n//    printf(\"sdfsdf\\n\");\n    //print(root);\n}\nint main(){\n    //freopen(\"bzoj3999.in\",\"r\",stdin);\n//    freopen(\"bzoj3999.out\",\"w\",stdout);\n    n=read();\n    for (int i=1;i<=n;++i) a[i]=read();\n    for (int i=1;i<n;++i){\n        int x=read(),y=read();\n        data[++num].y=y;data[num].next=h[x];h[x]=num;\n        data[++num].y=x;data[num].next=h[y];h[y]=num;\n    }dep[1]=1;\n    dfs1(1);dfs2(1,1);\n    //for (int i=1;i<=n;++i) printf(\"%d \",id[i]);printf(\"\\n\");\n    build(root,1,n);//print(root);\n    m=read();\n    for (int i=1;i<=m;++i){\n        int x=read(),y=read(),z=read();\n        solve(x,y,z);\n    }\n    return 0;\n}\n\n```\n\u6700\u540e\u8bf4\u4e00\u4e0b tjoi\u7684\u6570\u636e\u5f88\u6c34\u7684\u5373\u4f7f\u5199\u9519\u4e86\u4e5f\u53ef\u4ee5\u8fc7\n\n\u5efa\u8bae\u5927\u5bb6\u53ef\u4ee5\u770b\u770bhdu5052 tjoi\u5e94\u8be5\u662f\u4ee5\u4ed6\u4e3a\u539f\u578b\u6539\u7684 \u90a3\u9053\u9898\u7684\u6570\u636e\u5f3aqwq \u6211wa\u4e86\u4e00\u9875 \u8fd8\u662f\u592a\u83dc\u4e86\n\n<http://www.elijahqi.win/2017/09/14/hdu5052/>\n\n",
        "postTime": 1510962734,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u8fd9\u51fa\u9898\u4eba\u8bed\u8a00\u8868\u8fbe\u80fd\u529b\u771f\u7684\u611f\u4eba\u2026\u2026\n\n~~\u5e0c\u671b\u4f60\u4eec\u770b\u5b8c\u8fd9\u7bc7\u9898\u89e3\u540e\u4e0d\u8981\u89c9\u5f97\u6211\u7684\u8bed\u8a00\u8868\u8fbe\u80fd\u529b\u548c\u51fa\u9898\u4eba\u4e0d\u76f8\u4e0a\u4e0b\u3002~~\n\n### \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u68f5\u6709\u70b9\u6743\u7684\u6811\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ece $u$ \u5230 $v$ \u7684\u8def\u5f84\u4e0a\u540e\u7ecf\u8fc7\u7684\u70b9\u6743\u51cf\u53bb\u5148\u7ecf\u8fc7\u7684\u70b9\u6743\u7684\u6700\u5927\u503c\uff0c\u518d\u628a\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u70b9\u6743\u52a0\u4e0a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u3002\n\n## \u5206\u6790\n\u4fd7\u8bdd\u8bf4\u5f97\u597d\uff1a\u5982\u679c\u4f60\u89c9\u5f97\u4e00\u4e2a\u6811\u4e0a\u7684\u9898\u5f88\u96be\uff0c\u90a3\u5c31\u5148\u628a\u5b83\u6254\u5230\u5e8f\u5217\u4e0a\u3002\n\n\u4e8e\u662f\u6709\u5982\u4e0b\u4e24\u4e2a\u5b50\u95ee\u9898\uff1a\n\n1. \u7ed9\u5b9a\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728 $l$ \u5230 $r$ \u7684\u533a\u95f4\u5185**\u4ece\u5de6\u5411\u53f3**\u9009\u4e24\u4e2a\u6570\uff0c\u4ee4\u9009\u7684**\u5de6\u8fb9\u7684\u6570**\u4f5c\u4e3a\u8fdb\u4ef7\uff0c**\u53f3\u8fb9\u7684\u6570**\u4f5c\u4e3a\u552e\u4ef7\uff0c\u8981\u6c42\u5229\u6da6\uff08\u552e\u4ef7\u51cf\u8fdb\u4ef7\uff09\u6700\u5927\u503c\u3002\n2. \u7ed9\u5b9a\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u5728 $l$ \u5230 $r$ \u7684\u533a\u95f4\u5185**\u4ece\u53f3\u5411\u5de6**\u9009\u4e24\u4e2a\u6570\uff0c\u4ee4\u9009\u7684**\u53f3\u8fb9\u7684\u6570**\u4f5c\u4e3a\u8fdb\u4ef7\uff0c**\u5de6\u8fb9\u7684\u6570**\u4f5c\u4e3a\u552e\u4ef7\uff0c\u8981\u6c42\u5229\u6da6\uff08\u552e\u4ef7\u51cf\u8fdb\u4ef7\uff09\u6700\u5927\u503c\u3002\n\n\n\u8003\u8651\u5b50\u95ee\u9898 1\u3002\u663e\u7136\u53ef\u4ee5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u6536\u76ca\u3002\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u6700\u5927\u6536\u76ca\u65e0\u975e\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. \u5728\u5de6\u513f\u5b50\u7684\u533a\u95f4\u5185\u4e70\u8fdb\u4e14\u5356\u51fa\uff0c\u8fd9\u79cd\u60c5\u51b5\u5de6\u513f\u5b50\u5df2\u7ecf\u7ef4\u62a4\u4e86\uff1b\n2. \u5728\u53f3\u513f\u5b50\u7684\u533a\u95f4\u5185\u4e70\u8fdb\u4e14\u5356\u51fa\uff0c\u8fd9\u79cd\u60c5\u51b5\u53f3\u513f\u5b50\u5df2\u7ecf\u7ef4\u62a4\u4e86\uff1b\n3. \u5de6\u513f\u5b50\u7684\u533a\u95f4\u5185\u4e70\uff0c\u53f3\u513f\u5b50\u7684\u533a\u95f4\u5185\u5356\u3002\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u81ea\u5df1\u63a8\uff1a\u53f3\u513f\u5b50\u4e2d\u6700\u5927\u503c\u51cf\u53bb\u5de6\u513f\u5b50\u4e2d\u6700\u5c0f\u503c\u3002\n\n\u5982\u679c\u662f\u5b50\u95ee\u9898 2 \u7684\u8bdd\u5c31\u6539\u4e00\u4e0b\u7b2c 3 \u79cd\u60c5\u51b5\uff1a\u53f3\u513f\u5b50\u7684\u533a\u95f4\u5185\u4e70\uff0c\u5de6\u513f\u5b50\u7684\u533a\u95f4\u5185\u5356\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u6536\u76ca\u4e5f\u53d8\u4e3a\u5de6\u513f\u5b50\u4e2d\u6700\u5927\u503c\u51cf\u53bb\u53f3\u513f\u5b50\u4e2d\u6700\u5c0f\u503c\u3002\n\n\u7b2c\u4e09\u79cd\u60c5\u51b5\u9700\u8981\u5de6\u53f3\u513f\u5b50\u5185\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u518d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6781\u503c\u3002\n\u8fd9\u6837\u6bcf\u6b21\u8be2\u95ee\u65f6\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\uff0c\u82e5\u4e00\u6b21\u67e5\u8be2\u540c\u65f6\u9012\u5f52\u4e86\u5de6\u53f3\u4e24\u4e2a\u513f\u5b50\uff0c\u90a3\u5c31\u50cf\u521a\u624d\u8ba8\u8bba\u7684\u90a3\u6837\u5408\u5e76\u5de6\u53f3\u513f\u5b50\u7684\u7b54\u6848\u3002\n\n```cpp\nint Query_val(int o, int l, int r, int L, int R, int dir) { // dir \u4ee3\u8868\u4ece\u5de6\u5f80\u53f3\u6216\u4ece\u53f3\u5f80\u5de6\n    if (L * R == 0) \n        return 0;\n    if (L <= l && r <= R) \n        return val[dir][o]; // val \u662f\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5206\u522b\u8bb0\u5f55\u4ece\u5de6\u5f80\u53f3\u548c\u4ece\u53f3\u5f80\u5de6\n    pushdown(o);\n    int mid = l + r >> 1, sl = 0, sr = 0, ret = 0;\n    if (L <= mid) \n        ret = Query_val(o << 1, l, mid, L, R, dir), sl = 1;\n    if (R > mid) \n        ret = max(ret, Query_val(o << 1 | 1, mid + 1, r, L, R, dir)), sr = 1;\n    if (sl && sr) { // \u540c\u65f6\u9012\u5f52\u4e86\u5de6\u53f3\u513f\u5b50\uff0c\u5408\u5e76\u7b54\u6848\n        ret = max(ret, \n            !dir ? \n            Query_max(1, 1, N, mid + 1, R) - Query_min(1, 1, N, L, mid) : // \u4ece\u5de6\u5f80\u53f3\u5408\u5e76\u7b54\u6848\n            Query_max(1, 1, N, L, mid) - Query_min(1, 1, N, mid + 1, R)); // \u4ece\u53f3\u5f80\u5de6\u5408\u5e76\u7b54\u6848\n    }\n    return ret;\n}\n```\n\n\u5e8f\u5217\u4e0a\u7684\u5b50\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u63a5\u4e0b\u6765\u6765\u5230\u6811\u4e0a\u3002\n\n~~**\u6b63\u7247\u5f00\u59cb\u3002**~~\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u63a5\u4e0b\u6765\u6240\u8bf4\u7684**\u987a\u6811\u8d38\u6613**\u662f\u6307\u4e70\u8fdb\u5904\u6bd4\u5356\u51fa\u5904\u66f4\u63a5\u8fd1\u6839\uff0c**\u9006\u6811\u8d38\u6613**\u662f\u6307\u5356\u51fa\u5904\u6bd4\u4e70\u8fdb\u5904\u66f4\u9760\u8fd1\u6839\u3002\u4e0d\u96be\u770b\u51fa\u5b50\u95ee\u9898 1 \u5b9e\u9645\u4e0a\u662f\u987a\u6811\u8d38\u6613\uff0c\u5b50\u95ee\u9898 2 \u662f\u9006\u6811\u8d38\u6613\u3002\n\n\u65e2\u7136\u7528\u4e86\u6811\u5256\uff0c\u90a3\u6811\u4e0a\u7684\u4e00\u6761\u6761\u94fe\u5c31\u53ef\u4ee5\u7c7b\u6bd4\u6210\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u4e2a\u533a\u95f4\uff0c\u8df3\u94fe\u65f6\u5c31\u8981\u7ef4\u62a4\u4ece\u51fa\u53d1\u70b9\u5230\u5f53\u524d\u70b9\u7684\u6700\u4f18\u8d38\u6613\u3002\u4ee5\u4e0b\u8bbe\u8be2\u95ee\u7684\u8def\u5f84\u8d77\u59cb\u70b9\u4e3a $u$\uff0c\u7ec8\u70b9\u4e3a $v$\uff0c$x$ \u4ece $u$ \u5f00\u59cb\u8df3\uff0c$y$ \u4ece $v$ \u5f00\u59cb\u8df3\u3002\n\n\u4ee5\u4e0b\u5206\u7c7b\u8ba8\u8bba $x$ \u8df3\u94fe\u4e0e $y$ \u8df3\u94fe\uff1a\n\n\u5047\u8bbe $x$ \u521a\u624d\u8df3\u8fc7\u4e00\u6761\u94fe\u3002\u6cbf\u7528\u5408\u5e76\u533a\u95f4\u7b54\u6848\u7684\u601d\u60f3\uff0c\u5728\u5408\u5e76\u4e24\u6761\u94fe\u4e0a\u7684\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5c06\u94fe\u770b\u6210\u533a\u95f4\uff0c**\u5c06 $x$ \u73b0\u6240\u5728\u94fe\u9876 $t$ \u4e0e $u$ \u4e4b\u95f4\u7684\u8def\u5f84\u89c6\u4e3a\u5f53\u524d\u533a\u95f4\uff0c\u663e\u7136\u8fd9\u6761\u8def\u5f84\u4e0a\u6709\u4e24\u6761\u94fe\u3002\u968f\u540e\u5c06 $u$ \u5230 $x$\uff08\u4e0d\u542b\uff09\u4e4b\u95f4\u7684\u8def\u5f84\u89c6\u4e3a\u5f53\u524d\u533a\u95f4\u7684\u5de6\u513f\u5b50\uff0c$x$ \u5230 $t$ \u4e4b\u95f4\u7684\u8def\u5f84\u89c6\u4e3a\u53f3\u513f\u5b50**\uff0c\u6309\u5b50\u95ee\u9898 2\uff08\u9006\u6811\u8d38\u6613\uff09\u7684\u65b9\u5f0f\u5408\u5e76\u533a\u95f4\u7b54\u6848\u5373\u53ef\u3002\n\n\u5047\u8bbe $x$ \u8fd8\u6ca1\u8df3\u8fc7\u94fe\uff0c\u90a3\u5c31\u5148\u8ba9 $x$ \u8df3\u94fe\uff0c\u968f\u540e\u521d\u59cb\u5316 $u$ \u5230 $x$ \u7684\u8def\u5f84\u4e0a\u7684\u6700\u4f18\u8d38\u6613\u4e0e\u6700\u5c0f\u503c\u3002\n\n\u7b2c\u4e00\u6b21\u8df3\u94fe\u4e4b\u540e\uff0c$u$ \u5230 $x$\uff08\u4e0d\u542b\uff09\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6700\u4f18\u8d38\u6613\u4e0e\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u8ba9 $x$ \u4e00\u8fb9\u8df3\u4e00\u8fb9\u7ef4\u62a4\u3002\n\n$y$ \u7684\u8df3\u94fe\u4e0e $x$ \u7c7b\u4f3c\uff0c\u8fd8\u662f**\u628a $y$ \u5f53\u524d\u6240\u5728\u94fe\u9876 $t$ \u5230 $v$ \u7684\u8def\u5f84\u89c6\u4e3a\u5f53\u524d\u533a\u95f4\uff0c\u53ea\u4e0d\u8fc7\u8981\u5c06 $t$ \u5230 $y$ \u4e4b\u95f4\u7684\u8def\u5f84\u89c6\u4e3a\u5de6\u513f\u5b50\uff0c$y$\uff08\u4e0d\u542b\uff09\u5230 $v$ \u7684\u533a\u95f4\u89c6\u4e3a\u53f3\u513f\u5b50**\uff0c\u7136\u540e\u6309\u5b50\u95ee\u9898 1\uff08\u987a\u6811\u8d38\u6613\uff09\u7684\u65b9\u5f0f\u5408\u5e76\u7b54\u6848\u3002\u5982\u679c\u6ca1\u8df3\u8fc7\u94fe\u7684\u8bdd\u5c31\u5148\u8ba9 $y$ \u8df3\uff0c\u518d\u521d\u59cb\u5316 $y$\uff08\u4e0d\u542b\uff09\u5230 $v$ \u4e4b\u95f4\u7684\u6700\u4f18\u8d38\u6613\u4e0e\u6700\u5927\u503c\u3002\u5728\u90a3\u4e4b\u540e\u4e5f\u662f\u4e00\u6837\u8fb9\u8df3\u8fb9\u7ef4\u62a4\u3002\n\n```cpp\n    while (top[x] != top[y]) {\n        if (dep[top[x]] > dep[top[y]]) {\n            if (xton == inf) {\n                xret = max(xret, Query_val(1, 1, N, dfn[top[x]], dfn[x], 1));\n                xton = Query_min(1, 1, N, dfn[top[x]], dfn[x]);\n            } else {\n                xret = max(xret, max(Query_val(1, 1, N, dfn[top[x]], dfn[x], 1), \n                    Query_max(1, 1, N, dfn[top[x]], dfn[x]) - xton));\n                xton = min(xton, Query_min(1, 1, N, dfn[top[x]], dfn[x]));\n            }\n            x = f[top[x]];\n        } else {\n            if (yton == -inf) {\n                yret = max(yret, Query_val(1, 1, N, dfn[top[y]], dfn[y], 0));\n                yton = Query_max(1, 1, N, dfn[top[y]], dfn[y]);\n            } else {\n                yret = max(yret, max(Query_val(1, 1, N, dfn[top[y]], dfn[y], 0), \n                    yton - Query_min(1, 1, N, dfn[top[y]], dfn[y])));\n                yton = max(yton, Query_max(1, 1, N, dfn[top[y]], dfn[y]));\n            }\n            y = f[top[y]];\n        }\n    }\n```\n\n\u90a3\u4e48\u8fd9\u6837 $x$ \u548c $y$ \u5c31\u6765\u5230\u4e86\u540c\u4e00\u6761\u94fe\u4e0a\u3002\u5728\u8fd9\u91cc\u6709\u56db\u79cd\u60c5\u51b5\uff1a\n\n1. $x$ \u548c $y$ \u90fd\u6ca1\u8df3\u8fc7\u94fe\uff1b\n2. $x$ \u6ca1\u8df3\u8fc7\u94fe\uff0c$y$ \u8df3\u8fc7\u94fe\uff1b\n3. $x$ \u8df3\u8fc7\u94fe\uff0c$y$ \u6ca1\u8df3\u8fc7\u94fe\uff1b\n4. $x$ \u548c $y$ \u90fd\u8df3\u8fc7\u94fe\u3002\n\n\u4e3a\u4e86\u4ee3\u7801\u65b9\u4fbf\uff0c\u5728\u5206\u7c7b\u8ba8\u8bba\u4e4b\u540e\u4f1a\u7edf\u4e00\u8ba9 $x$ \u548c $y$ \u5404\u8df3\u94fe\u81f3\u5c11\u4e00\u6b21\uff08\u53ef\u80fd\u4f1a\u53ea\u8df3\u67d0\u6761\u94fe\u7684\u4e00\u90e8\u5206\uff09\u4f7f\u5176\u6c47\u5408\u4e0e\u4e00\u70b9 $p$\uff0c\u5e76\u5408\u5e76 $u$ \u5230 $p$ \u4e0e $p$ \u5230 $v$ \u7684\u7b54\u6848\u3002\n\n\u7b2c 1 \u79cd\u60c5\u51b5\u6ca1\u4ec0\u4e48\u597d\u8ba8\u8bba\u7684\uff0c\u5c31\u662f $u$ \u548c $v$ \u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de $u$ \u5230 $v$ \u7684\u7b54\u6848\u3002\u6ce8\u610f\u662f\u987a\u6811\u8d38\u6613\u8fd8\u662f\u9006\u6811\u8d38\u6613\u3002\n\n\u7b2c 2 \u79cd\u60c5\u51b5\u91cc\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $x$ \u7684\u6df1\u5ea6\u6bd4 $y$ \u7684\u6df1\u5ea6\u5927\u3002\u6b64\u65f6\u8ba9 $x$ \u5411\u4e0a\u8df3\u5230 $y$\uff0c\u505a\u4e00\u4e2a**\u9006\u6811\u8d38\u6613**\uff0c\u5e76\u7ef4\u62a4 $u$ \u5230 $x$ \u7684\u4fe1\u606f\uff1b\n2. $x$ \u7684\u6df1\u5ea6\u6bd4 $y$ \u7684\u6df1\u5ea6\u5c0f\u3002\u6b64\u65f6\u8ba9 $x$ \u5411\u4e0b\u8df3\u5230 $y$\uff0c\u505a\u4e00\u4e2a**\u987a\u6811\u8d38\u6613**\uff0c\u5e76\u7ef4\u62a4 $u$ \u5230 $x$ \u7684\u4fe1\u606f\u3002\n\n\u7b2c 3 \u79cd\u60c5\u51b5\u91cc\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. $x$ \u7684\u6df1\u5ea6\u6bd4 $y$ \u7684\u6df1\u5ea6\u5927\u3002\u6b64\u65f6\u8ba9 $y$ \u5411\u4e0b\u8df3\u5230 $x$\uff08$x$ \u76f8\u5bf9\u4e8e $y$ \u5411\u4e0a\u8df3\uff09\uff0c\u505a\u4e00\u4e2a**\u9006\u6811\u8d38\u6613**\uff0c\u5e76\u7ef4\u62a4 $y$ \u5230 $v$ \u7684\u4fe1\u606f\uff1b\n2. $x$ \u7684\u6df1\u5ea6\u6bd4 $y$ \u7684\u6df1\u5ea6\u5c0f\u3002\u6b64\u65f6\u8ba9 $y$ \u5411\u4e0a\u8df3\u5230 $x$\uff08$x$ \u76f8\u5bf9\u4e8e $y$ \u5411\u4e0b\u8df3\uff09\uff0c\u505a\u4e00\u4e2a**\u987a\u6811\u8d38\u6613**\uff0c\u5e76\u7ef4\u62a4 $y$ \u5230 $v$ \u7684\u4fe1\u606f\u3002\n\n\u81f3\u4e8e\u7b2c 4 \u79cd\u60c5\u51b5\uff0c\u56e0\u4e3a $x$ \u548c $y$ \u90fd\u8df3\u8fc7\u94fe\u4e86\uff0c\u6240\u4ee5\u8c01\u5f80\u54ea\u8df3\u90fd\u65e0\u6240\u8c13\u3002\u4e0d\u8fc7\u6211\u4e2a\u4eba\u8fd8\u662f\u503e\u5411\u4e8e\u8ba9\u5b83\u4eec\u6c47\u805a\u5728\u5b83\u4eec\u7684 $lca$ \u4e0a\u3002\n\n```cpp\n    if (xton == inf && yton == -inf) {\n        if (dep[x] > dep[y]) \n            return Query_val(1, 1, N, dfn[y], dfn[x], 1);\n        else \n            return Query_val(1, 1, N, dfn[x], dfn[y], 0);\n    } else if (xton == inf) {\n        if (dep[x] > dep[y]) {\n            xret = Query_val(1, 1, N, dfn[y], dfn[x], 1);\n            xton = Query_min(1, 1, N, dfn[y], dfn[x]);\n        } else {\n            xret = Query_val(1, 1, N, dfn[x], dfn[y], 0);\n            xton = Query_min(1, 1, N, dfn[x], dfn[y]);\n        }\n    } else if (yton == -inf) {\n        if (dep[x] > dep[y]) {\n            yret = Query_val(1, 1, N, dfn[y], dfn[x], 1);\n            yton = Query_max(1, 1, N, dfn[y], dfn[x]);\n        } else {\n            yret = Query_val(1, 1, N, dfn[x], dfn[y], 0);\n            yton = Query_max(1, 1, N, dfn[x], dfn[y]);\n        }\n    } else if (dep[x] > dep[y]) {\n        xret = max(xret, max(Query_val(1, 1, N, dfn[y], dfn[x], 1), Query_max(1, 1, N, dfn[y], dfn[x]) - xton));\n        xton = min(xton, Query_min(1, 1, N, dfn[y], dfn[x]));\n    } else {\n        yret = max(yret, max(Query_val(1, 1, N, dfn[x], dfn[y], 0), yton - Query_min(1, 1, N, dfn[x], dfn[y])));\n        yton = max(yton, Query_max(1, 1, N, dfn[x], dfn[y]));\n    }\n    int ret = max(max(xret, yret), yton - xton);\n    return ret;\n```\n\n\u8fd9\u9898\u5269\u4e0b\u7684\u6811\u4e0a\u8def\u5f84\u4fee\u6539\uff0c\u6211\u76f8\u4fe1\u80fd\u6765\u6311\u6218\u8fd9\u9898\u7684\u5e94\u8be5\u4e5f\u4e0d\u81f3\u4e8e\u4e0d\u4f1a\u3002\u6240\u4ee5\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\u3002\u63a5\u4e0b\u6765\u957f\u8fbe\u4e24\u767e\u591a\u884c\u7684\u5b8c\u6574\u4ee3\u7801\u5949\u4e0a\uff1a\n## \u4ee3\u7801\n```cpp\n#include <iostream>\n#define int long long\nusing namespace std;\nconst int N = 131072;\nconst int inf = 2147483647;\nint head[1000005], nxt[1000005], to[1000005], cnt;\ninline void add(int u, int v) { to[++cnt] = v, nxt[cnt] = head[u], head[u] = cnt; }\nint dfn[1000005], top[1000005], son[1000005], dep[1000005], sz[1000005], f[1000005], ncnt;\nint ww[N << 2], w[100005];\n// ------------------------------------ \u4ee5\u4e0b\u6811\u5256\u677f\u5b50 ---------------------------------\nvoid dfs1(int x, int fa, int d) {\n    dep[x] = d;\n    f[x] = fa;\n    sz[x] = 1;\n    for (int i = head[x]; i != 0; i = nxt[i]) {\n        int v = to[i];\n        if (v != fa) {\n            dfs1(v, x, d + 1);\n            sz[x] += sz[v];\n            if (sz[v] > sz[son[x]]) \n                son[x] = v;\n        }\n    }\n}\nvoid dfs2(int x, int t) {\n    top[x] = t;\n    dfn[x] = ++ncnt;\n    ww[ncnt] = w[x];\n    if (!son[x]) \n        return;\n    dfs2(son[x], t);\n    for (int i = head[x]; i != 0; i = nxt[i]) {\n        int v = to[i];\n        if (v != f[x] && v != son[x]) \n            dfs2(v, v);\n    }\n}\n// ------------------------------------ \u4ee5\u4e0b\u7ebf\u6bb5\u6811 ---------------------------------------\nint mx[N << 2], mn[N << 2], val[2][N << 2], tag[N << 2];\ninline void pushup(int o) {\n    mx[o] = max(mx[o << 1], mx[o << 1 | 1]);\n    mn[o] = min(mn[o << 1], mn[o << 1 | 1]);\n    val[0][o] = max(max(val[0][o << 1], val[0][o << 1 | 1]), mx[o << 1 | 1] - mn[o << 1]);\n    // \u4ece\u5de6\u5f80\u53f3\u5408\u5e76\n    val[1][o] = max(max(val[1][o << 1], val[1][o << 1 | 1]), mx[o << 1] - mn[o << 1 | 1]);\n    // \u4ece\u53f3\u5f80\u5de6\u5408\u5e76\n}\ninline void pushdown(int o) {\n    if (tag[o] == 0) \n        return;\n    int t = tag[o];\n    tag[o] = 0;\n    mx[o << 1] += t, mx[o << 1 | 1] += t;\n    mn[o << 1] += t, mn[o << 1 | 1] += t;\n    tag[o << 1] += t, tag[o << 1 | 1] += t;\n}\nvoid Build(int o, int l, int r) {\n    if (l == r) {\n        mx[o] = mn[o] = ww[l];\n        val[0][o] = val[1][o] = 0;\n        return;\n    }\n    int mid = l + r >> 1;\n    Build(o << 1, l, mid);\n    Build(o << 1 | 1, mid + 1, r);\n    pushup(o);\n}\nvoid Change(int o, int l, int r, int L, int R, int k) {\n    if (L <= l && r <= R) {\n        mx[o] += k;\n        mn[o] += k;\n        tag[o] += k;\n        return;\n    }\n    pushdown(o);\n    int mid = l + r >> 1;\n    if (L <= mid) \n        Change(o << 1, l, mid, L, R, k);\n    if (R > mid) \n        Change(o << 1 | 1, mid + 1, r, L, R, k);\n    pushup(o);\n}\nint Query_min(int o, int l, int r, int L, int R) {\n    if (L * R == 0) \n        return inf;\n    if (L <= l && r <= R) \n        return mn[o];\n    pushdown(o);\n    int mid = l + r >> 1, ret = 2147483647;\n    if (L <= mid) \n        ret = min(ret, Query_min(o << 1, l, mid, L, R));\n    if (R > mid) \n        ret = min(ret, Query_min(o << 1 | 1, mid + 1, r, L, R));\n    return ret;\n}\nint Query_max(int o, int l, int r, int L, int R) {\n    if (L * R == 0) \n        return -inf;\n    if (L <= l && r <= R) \n        return mx[o];\n    pushdown(o);\n    int mid = l + r >> 1, ret = -2147483647;\n    if (L <= mid) \n        ret = max(ret, Query_max(o << 1, l, mid, L, R));\n    if (R > mid) \n        ret = max(ret, Query_max(o << 1 | 1, mid + 1, r, L, R));\n    return ret;\n}\nint Query_val(int o, int l, int r, int L, int R, int dir) {\n    if (L * R == 0) \n        return 0;\n    if (L <= l && r <= R) \n        return val[dir][o];\n    pushdown(o);\n    int mid = l + r >> 1, sl = 0, sr = 0, ret = 0;\n    if (L <= mid) \n        ret = Query_val(o << 1, l, mid, L, R, dir), sl = 1;\n    if (R > mid) \n        ret = max(ret, Query_val(o << 1 | 1, mid + 1, r, L, R, dir)), sr = 1;\n    if (sl && sr) {\n        ret = max(ret, \n            !dir ? \n            Query_max(1, 1, N, mid + 1, R) - Query_min(1, 1, N, L, mid) : \n            Query_max(1, 1, N, L, mid) - Query_min(1, 1, N, mid + 1, R));\n    }\n    return ret;\n}\n// ------------------------------------ \u4ee5\u4e0b\u6811\u5256 ---------------------------------------\nint Query_path(int x, int y) {\n    int xton = inf, yton = -inf, xret = 0, yret = 0;\n    // xton \u4ee3\u8868 u \u5230 x \u4e4b\u95f4\u7684\u6700\u5c0f\u503c\uff0cyton \u4ee3\u8868 y \u5230 v \u4e4b\u95f4\u7684\u6700\u5927\u503c\n    // xret \u4ee3\u8868 u \u5230 x \u4e4b\u95f4\u7684\u6700\u5927\u5229\u6da6\uff0cyret \u540c\u7406\n    while (top[x] != top[y]) {\n        if (dep[top[x]] > dep[top[y]]) {\n            if (xton == inf) {\n                xret = max(xret, Query_val(1, 1, N, dfn[top[x]], dfn[x], 1));\n                xton = Query_min(1, 1, N, dfn[top[x]], dfn[x]);\n            } else {\n                xret = max(xret, max(Query_val(1, 1, N, dfn[top[x]], dfn[x], 1), \n                    Query_max(1, 1, N, dfn[top[x]], dfn[x]) - xton));\n                xton = min(xton, Query_min(1, 1, N, dfn[top[x]], dfn[x]));\n            }\n            x = f[top[x]];\n        } else {\n            if (yton == -inf) {\n                yret = max(yret, Query_val(1, 1, N, dfn[top[y]], dfn[y], 0));\n                yton = Query_max(1, 1, N, dfn[top[y]], dfn[y]);\n            } else {\n                yret = max(yret, max(Query_val(1, 1, N, dfn[top[y]], dfn[y], 0), \n                    yton - Query_min(1, 1, N, dfn[top[y]], dfn[y])));\n                yton = max(yton, Query_max(1, 1, N, dfn[top[y]], dfn[y]));\n            }\n            y = f[top[y]];\n        }\n    }\n    if (xton == inf && yton == -inf) { // \u90fd\u6ca1\u8df3\u8fc7\u94fe\n        if (dep[x] > dep[y]) \n            return Query_val(1, 1, N, dfn[y], dfn[x], 1); // \u76f4\u63a5\u8fd4\u56de\n        else \n            return Query_val(1, 1, N, dfn[x], dfn[y], 0);\n    } else if (xton == inf) { // x \u6ca1\u8df3\u8fc7\n        if (dep[x] > dep[y]) {\n            xret = Query_val(1, 1, N, dfn[y], dfn[x], 1);\n            xton = Query_min(1, 1, N, dfn[y], dfn[x]);\n        } else {\n            xret = Query_val(1, 1, N, dfn[x], dfn[y], 0);\n            xton = Query_min(1, 1, N, dfn[x], dfn[y]);\n        }\n    } else if (yton == -inf) { // y \u6ca1\u8df3\u8fc7\n        if (dep[x] > dep[y]) {\n            yret = Query_val(1, 1, N, dfn[y], dfn[x], 1);\n            yton = Query_max(1, 1, N, dfn[y], dfn[x]);\n        } else {\n            yret = Query_val(1, 1, N, dfn[x], dfn[y], 0);\n            yton = Query_max(1, 1, N, dfn[x], dfn[y]);\n        }\n    } else if (dep[x] > dep[y]) { // \u90fd\u8df3\u8fc7\uff0c\u4f46\u662f x \u6df1\u5ea6\u5927\n        xret = max(xret, max(Query_val(1, 1, N, dfn[y], dfn[x], 1), Query_max(1, 1, N, dfn[y], dfn[x]) - xton));\n        xton = min(xton, Query_min(1, 1, N, dfn[y], dfn[x]));\n    } else { // \u90fd\u8df3\u8fc7\uff0c\u4f46\u662f y \u6df1\u5ea6\u5927\n        yret = max(yret, max(Query_val(1, 1, N, dfn[x], dfn[y], 0), yton - Query_min(1, 1, N, dfn[x], dfn[y])));\n        yton = max(yton, Query_max(1, 1, N, dfn[x], dfn[y]));\n    }\n    int ret = max(max(xret, yret), yton - xton);\n    // \u5408\u5e76\u5de6\u53f3\u533a\u95f4\u7b54\u6848\n    return ret;\n}\nvoid Add(int x, int y, int k) {\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) \n            swap(x, y);\n        Change(1, 1, N, dfn[top[x]], dfn[x], k);\n        x = f[top[x]];\n    }\n    if (dep[x] > dep[y]) \n        swap(x, y);\n    Change(1, 1, N, dfn[x], dfn[y], k);\n}\n// ----------------------------------\u5e73\u5e73\u65e0\u5947\u7684\u4e3b\u51fd\u6570-----------------------------------------\nsigned main() {\n    int n;\n    cin >> n;\n    for (int i = 1; i <= n; i++) cin >> w[i];\n    for (int i = 1, u, v; i < n; i++) {\n        cin >> u >> v;\n        add(u, v);\n        add(v, u);\n    }\n    dfs1(1, 0, 1);\n    dfs2(1, 1);\n    Build(1, 1, N);\n    int m;\n    cin >> m;\n    while (m--) {\n        int l, r, v;\n        cin >> l >> r >> v;\n        cout << Query_path(l, r) << \"\\n\";\n        Add(l, r, v);\n    }\n    return 0;\n}\n```\n\u8fd9\u9898\u7684\u5206\u7c7b\u8ba8\u8bba\u6211\u60f3\u4e86\u5f88\u4e45\uff0c\u5efa\u8bae\u5e7f\u5927\u8bfb\u8005\u81ea\u5df1\u7406\u89e3\u3001\u6d88\u5316\u8fd9\u4e9b\u5947\u5947\u602a\u602a\u7684\u60c5\u51b5\uff0c\u60f3\u6e05\u695a\u5404\u79cd\u5206\u7c7b\u7684\u60c5\u51b5\u4e3a\u4ec0\u4e48\u662f\u5bf9\u5e94\u7684\u8d38\u6613\u7c7b\u578b\u3002\u60f3\u6e05\u695a\u8fd9\u4e9b\uff0c\u624d\u7b97\u771f\u6b63\u641e\u61c2\u672c\u9898\u89e3\u4e4b\u7cbe\u795e\u6240\u5728\u3002\n\n\u90a3\u4e48\uff0c\n## ~\u5b8c\u7ed3\u6492\u82b1~~~\n\uff08\u6492\u82b1\uff09\uff08\u9f13\u638c\uff09\uff08\u6b22\u547c\uff09\uff08\u6492\u82b1\uff09",
        "postTime": 1678719046,
        "uid": 573377,
        "name": "forgotmyhandle",
        "ccfLevel": 4,
        "title": "P3976 \u65c5\u6e38 \u9898\u89e3"
    },
    {
        "content": "### Solve\n\n\u53d1\u73b0\u4e00\u6761\u94fe\u4e0a\u5229\u6da6\u6700\u5927\u503c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5177\u4f53\u5730\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u533a\u95f4\u4ece\u5de6\u7aef\u70b9\u8d70\u5230\u53f3\u7aef\u70b9\u7684\u6700\u5927\u5229\u6da6 $\\text{sumlr}_u$\uff0c\u4ece\u53f3\u7aef\u70b9\u8d70\u5230\u5de6\u7aef\u70b9\u7684\u6700\u5927\u5229\u6da6 $\\text{sumrl}_u$\uff0c\u6700\u5927\u4ef7\u683c $\\text{mx}_u$\uff0c\u6700\u5c0f\u4ef7\u683c $\\text{mn}_u$\u3002\u8f6c\u79fb\u65f6\uff0c$\\text{sumlr}_u=\\max\\{\\text{sumlr}_{\\text{lson}},\\text{sumlr}_{\\text{rson}},\\text{mx}_{\\text{rson}}-\\text{mn}_{\\text{lson}}\\}$\uff0c$\\text{sumrl}_u=\\max\\{\\text{sumrl}_{\\text{lson}},\\text{sumrl}_{\\text{rson}},\\text{mx}_{\\text{lson}}-\\text{mn}_{\\text{rson}}\\}$\u3002\n\n\u4e8e\u662f\u60f3\u5230\u6811\u5256\uff0c\u8bb0\u8be2\u95ee\u4e24\u70b9\u4f9d\u6b21\u4e3a $u,v$\uff0c$u$ \u548c $v$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a $\\text{lca}$\uff0c$\\text{lca}$ \u53ef\u4ee5\u901a\u8fc7\u500d\u589e\u6216\u8005\u6811\u5256\u5f97\u5230\u3002\u8bb0\u5f55 $u$ \u5230 $\\text{lca}$ \u7684\u8def\u5f84\u4e0a\u6240\u6709\u91cd\u94fe\u7684\u8be2\u95ee\u7ed3\u679c\uff0c $v$ \u5230 $\\text{lca}$ **\u4e0b\u9762\u90a3\u4e2a\u7ed3\u70b9**\u7684\u8def\u5f84\u4e0a\u6240\u6709\u91cd\u94fe\u7684\u8be2\u95ee\u7ed3\u679c\u3002\u6309\u7167\u7ebf\u6bb5\u6811\u7684\u8f6c\u79fb\u65b9\u5f0f\u4f9d\u6b21\u5408\u5e76\u5373\u53ef\u3002\u5173\u4e8e $\\text{lca}$ \u4e0b\u9762\u90a3\u4e2a\u7ed3\u70b9\uff0c\u53ef\u4ee5\u500d\u589e\u6765\u6c42\u3002\n\n### Code\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define MAXN 50010\n#define LOGN 22\nint n, q, a[MAXN], fa[MAXN], anc[MAXN][LOGN], dis[MAXN], siz[MAXN], son[MAXN], tim, dfn[MAXN], top[MAXN], val[MAXN];\nvector<int> g[MAXN];\ninline void init(const int &u, const int &f) {\n\tsiz[u] = 1;\n\tfor (register int i = 0; i < g[u].size(); i++) {\n\t\tconst int v = g[u][i];\n\t\tif (v == f) continue;\n\t\tfa[v] = u;\n\t\tanc[v][0] = u; \n\t\tdis[v] = dis[u] + 1;\n\t\tinit(v, u);\n\t\tsiz[u] += siz[v];\n\t\tif (siz[son[u]] < siz[v]) son[u] = v;\n\t}\n}\ninline void dfs(const int &u, const int &p) {\n\ttop[u] = p;\n\tdfn[u] = ++tim; val[tim] = u;\n\tif (!son[u]) return;\n\tdfs(son[u], p);\n\tfor (register int i = 0; i < g[u].size(); i++) {\n\t\tconst int v = g[u][i];\n\t\tif (v == fa[u] || v == son[u]) continue;\n\t\tdfs(v, v);\n\t}\n}\nstruct Segment_Tree {\n\tint mx[MAXN << 2], mn[MAXN << 2], sumlr[MAXN << 2], sumrl[MAXN << 2], lzy[MAXN << 2];\n\tinline bool InRange(const int &l, const int &r, const int &L, const int &R) { return L <= l && R >= r; }\n\tinline bool OutoRange(const int &l, const int &r, const int &L, const int &R) { return r < L || R < l; }\n\tinline int merge(const int &fl, const int &fr, const int &mxr, const int &mnl) { return max(fl, max(fr, mxr - mnl)); }\n\tinline void pushup(const int &u) {\n\t\tmx[u] = max(mx[u << 1], mx[u << 1 | 1]);\n\t\tmn[u] = min(mn[u << 1], mn[u << 1 | 1]);\n\t\tsumlr[u] = max(-1000000000, merge(sumlr[u << 1], sumlr[u << 1 | 1], mx[u << 1 | 1], mn[u << 1]));\n\t\tsumrl[u] = max(-1000000000, merge(sumrl[u << 1], sumrl[u << 1 | 1], mx[u << 1], mn[u << 1 | 1]));\n\t}\n\tinline void maketag(const int &u, const int &w) {\n\t\tmx[u] += w; mn[u] += w;\n\t\tlzy[u] += w;\n\t}\n\tinline void pushdown(const int &u) {\n\t\tif (!lzy[u]) return;\n\t\tmaketag(u << 1, lzy[u]); maketag(u << 1 | 1, lzy[u]);\n\t\tlzy[u] = 0;\n\t}\n\tinline void build(const int &u, const int &l, const int &r) {\n\t\tmx[u] = -1e9, mn[u] = 1e9, sumlr[u] = sumrl[u] = -1e9;\n\t\tif (l == r) {\n\t\t\tmx[u] = mn[u] = a[val[l]];\n\t\t\treturn;\n\t\t}\n\t\tconst int mid = (l + r) >> 1;\n\t\tbuild(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n\t\tpushup(u);\n\t}\n\tinline void update(const int &u, const int &l, const int &r, const int &L, const int &R, const int &w) {\n\t\tif (InRange(l, r, L, R)) maketag(u, w);\n\t\telse if (!OutoRange(l, r, L, R)) {\n\t\t\tpushdown(u); \n\t\t\tconst int mid = (l + r) >> 1; update(u << 1, l, mid, L, R, w), update(u << 1 | 1, mid + 1, r, L, R, w);\n\t\t\tpushup(u);\n\t\t} \n\t}\n\tinline pair<pair<int, int>, pair<int, int> > query(const int &u, const int &l, const int &r, const int &L, const int &R) {\n\t\tif (InRange(l, r, L, R)) return {{sumlr[u], sumrl[u]}, {mx[u], mn[u]}};\n\t\telse if (!OutoRange(l, r, L, R)) {\n\t\t\tpushdown(u);\n\t\t\tconst int mid = (l + r) >> 1;\n\t\t\tif (R <= mid) return query(u << 1, l, mid, L, R);\n\t\t\telse if (L > mid) return query(u << 1 | 1, mid + 1, r, L, R);\n\t\t\tconst pair<pair<int, int>, pair<int, int> > la = query(u << 1, l, mid, L, R), ra = query(u << 1 | 1, mid + 1, r, L, R);\n\t\t\treturn {{merge(la.first.first, ra.first.first, ra.second.first, la.second.second), \n\t\t\t\t\t  merge(la.first.second, ra.first.second, la.second.first, ra.second.second)}, \n\t\t\t\t\t {max(la.second.first, ra.second.first), min(la.second.second, ra.second.second)}};\n\t\t}\n\t}\n} tree; \ninline int _lca(int u, int v) {\n\twhile (top[u] != top[v]) {\n\t\tif (dis[top[u]] < dis[top[v]]) swap(u, v);\n\t\tu = fa[top[u]];\n\t}\n\treturn (dis[u] < dis[v] ? u : v);\n}\npair<pair<int, int>, pair<int, int> > tmp1[50010], tmp2[50010];\ninline int query(int u, int v) {\n\tint lca = _lca(u, v), len1 = 0, len2 = 0;\n\twhile (dis[top[u]] > dis[lca]) {\n\t\ttmp1[++len1] = tree.query(1, 1, n, dfn[top[u]], dfn[u]);\n\t\tu = fa[top[u]];\n\t}\n\tif (dfn[u] >= dfn[lca]) tmp1[++len1] = tree.query(1, 1, n, dfn[lca], dfn[u]);\n\twhile (dis[top[v]] > dis[lca] + 1) {   // v \u548c lca \u4e0b\u9762\u90a3\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u91cd\u94fe\u4e0a \n\t\ttmp2[++len2] = tree.query(1, 1, n, dfn[top[v]], dfn[v]);\n\t\tv = fa[top[v]];\n\t}\n\tif (dis[v] >= dis[lca] + 1) {\n\t\tint tmp = v;   // lca \u4e0b\u9762\u90a3\u4e2a\u70b9\n\t\tfor (register int i = 20; i >= 0; i--)\n\t\t\tif (dis[anc[tmp][i]] >= dis[lca] + 1) tmp = anc[tmp][i]; \n\t\tif (dfn[v] >= dfn[tmp]) tmp2[++len2] = tree.query(1, 1, n, dfn[tmp], dfn[v]);\n\t}\n\tint sum = -1e9, mx = -1e9, mn = 1e9;\n\tfor (register int i = 1; i <= len1; i++) {\n\t\tswap(tmp1[i].first.first, tmp1[i].first.second);\n\t\tsum = tree.merge(sum, tmp1[i].first.first, tmp1[i].second.first, mn);\n\t\tmx = max(mx, tmp1[i].second.first);\n\t\tmn = min(mn, tmp1[i].second.second);\n\t}\n\tfor (register int i = len2; i >= 1; i--) {\n\t\tsum = tree.merge(sum, tmp2[i].first.first, tmp2[i].second.first, mn);\n\t\tmx = max(mx, tmp2[i].second.first);\n\t\tmn = min(mn, tmp2[i].second.second);\n\t}\n\treturn max(sum, 0);\n}\ninline void update(int u, int v, const int &w) {\n\twhile (top[u] != top[v]) {\n\t\tif (dis[top[u]] < dis[top[v]]) swap(u, v);\n\t\ttree.update(1, 1, n, dfn[top[u]], dfn[u], w);\n\t\tu = fa[top[u]];\n\t}\n\tif (dfn[u] > dfn[v]) swap(u, v);\n\ttree.update(1, 1, n, dfn[u], dfn[v], w);\n}\nsigned main() {\n\tcin >> n;\n\tfor (register int i = 1; i <= n; i++) cin >> a[i];\n\tfor (register int i = 1; i < n; i++) {\n\t\tint u, v;\n\t\tcin >> u >> v;\n\t\tg[u].push_back(v), g[v].push_back(u);\n\t}\n\tdis[1] = 1; init(1, 0); dfs(1, 1); tree.build(1, 1, n);\n\tfor (register int j = 1; j <= 20; j++)\n\t\tfor (register int i = 1; i <= n; i++)\n\t\t\tanc[i][j] = anc[anc[i][j - 1]][j - 1]; \n\tcin >> q;\n\twhile (q--) {\n\t\tint u, v, w;\n\t\tcin >> u >> v >> w;\n\t\tcout << query(u, v) << endl;\n\t\tupdate(u, v, w);\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1667031209,
        "uid": 534654,
        "name": "Network_Error",
        "ccfLevel": 0,
        "title": "P3976 [TJOI2015] \u65c5\u6e38 \u9898\u89e3"
    },
    {
        "content": "\u9898\u9762\u8bf4\u7684\u6709\u70b9\u4e0d\u592a\u6e05\u695a\uff0c\u5927\u4f53\u6765\u8bf4\u5c31\u662f\u6c42\u6811\u4e0a\u4e00\u6761\u94fe\u4e0a\u4e24\u4e2a\u6570\uff0c\u540e\u9762-\u524d\u9762\u6700\u5927\u80fd\u662f\u591a\u5c11\uff0c\u8be2\u95ee\u4e4b\u540e\u8fd8\u8981\u628a\u8fd9\u6761\u94fe\u7684\u6570\u90fd\u52a0\u4e0a\u4e00\u4e2a\u6570\u3002\n\n\u56e0\u4e3a\u662f\u94fe\u4e0a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u8003\u8651\u6811\u94fe\u5256\u5206\u3002\n\n\u5bf9\u4e8e\u91cd\u94fe\u4e0a\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u6837\u51e0\u4e2a\u503c\uff1a\n\n* \u6bb5\u5185\u7684\u6700\u5927\u7b54\u6848 $ans$\u3002\n\n* \u6bb5\u5185\u6700\u5927\u503c $mx$ \uff0c\u6700\u5c0f\u503c $mn$\u3002\n\n* \u6574\u4f53\u4e0b\u4f20\u7684\u6807\u8bb0 $tag$\u3002\n\n\u628a\u8fd9\u4e9b\u4fe1\u606f\u8bb0\u5f55\u5728\u4e00\u4e2a $\\text{struct}$ \u91cc\uff0c\u5728\u4fe1\u606f\u5408\u5e76\u7684\u65f6\u5019\u76f4\u63a5\u4e0a\u4f20\u5408\u5e76\u4e4b\u540e\u7684\u65b0\u4fe1\u606f\u5373\u53ef\u3002\n\n\u5408\u5e76\u90e8\u5206\u7684\u4ee3\u7801\uff08\u5927\u4f53\u610f\u601d\uff0c\u4e0d\u8981\u5728\u610f $\\text{CE}$\uff09\uff1a\n\n```cpp\nnode merge(node r1,node r2){\n\tnode new;\n\tnew.mx=max(r1.mx,r2.mx);\n \tnew.mn=min(r1.mn,r2.mn);\n\tnew.ans=max(max(r1.ans,r2.ans),r2.mx-r1.mn);\t\n}\n```\n\n\u91cd\u70b9\u5728\u4e8e $\\text{new.ans}$ \u7684\u8ba1\u7b97\uff0c\u7b49\u53f7\u540e\u9762\u4e09\u4e2a\u503c\u4ee3\u8868\u4e24\u4e2a\u6570\u90fd\u5728 $\\text{mid}$ \u5de6\u4fa7/\u53f3\u4fa7\uff0c\u4e24\u4e2a\u6570 $\\text{mid}$ \u4e24\u4fa7\u5404\u4e00\u4e2a\u7684\u60c5\u51b5\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5957\u5728\u6811\u5256\u7684\u677f\u5b50\u91cc\u6109\u5feb\u7684 $\\text{AC}$ \u6389\u8fd9\u4e2a\u9898\u4e86\u3002\n\n\uff08\u5176\u5b9e\u628a\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u5c01\u88c5\u8d77\u6765\u5728\u4e0d\u540c\u91cd\u94fe\u4e4b\u95f4\u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u4f1a\u5199\u8d77\u6765\u66f4\u65b9\u4fbf\u4e0d\u5c11\u3002\n\n\u56e0\u4e3a\u6811\u5256\u7684\u677f\u5b50\u5199\u6cd5\u6709\u5dee\u5f02\uff0c\u5b8c\u6574\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\uff0c$\\text{merge}$ \u51fd\u6570\u5df2\u7ecf\u5177\u6709\u8db3\u591f\u7684\u53c2\u8003\u4ef7\u503c\u4e86\u3002",
        "postTime": 1652876872,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "P3976 \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709lct\u9898\u89e3\u5c31\u5f3a\u884c\u6765\u4e00\u53d1\n\n\u8fd9\u4e2a\u9898\u7ef4\u62a4\u94fe\u64cd\u4f5c\uff0c\u5bb9\u6613\u8ba9\u4eba\u60f3\u5230\u53ef\u4ee5\u7528lct\u6765\u505a\u3002\n\n\u4ec0\u4e48\u4f60\u8bf4\u4f60\u4e0d\u4f1alct\uff1f\u51fa\u95e8\u53f3\u8f6cP3690\u3002\n\n\u7528lct\u7684\u4e00\u5927\u597d\u5904\u5c31\u662f\u5904\u7406\u6b63\u7740\u8d70\u53cd\u7740\u8d70\u8fd9\u4e1c\u897f\u6bd4\u6811\u5256\u597d\u5199\u4e00\u70b9\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\uff0c\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u5148\u4e70\u540e\u5356\u7684\u6700\u5927\u6536\u76ca\u548c\u6700\u5c0f\u6536\u76ca\uff0c\u8fd8\u6709\u533a\u95f4\u52a0\u6807\u8bb0\u5373\u53ef\u3002\n\n\u533a\u95f4\u5408\u5e76\u7684\u65b9\u5f0f\u8ddf\u6811\u5256\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u522b\u5fd8\u4e86\u628a\u6839\u8282\u70b9\u4e5f\u7b97\u4e0a\u3002\n\nmx[q]=max(mx[l[q]],a[q],mx[r[q]])//\u6700\u5927\u503c\n\nmn[q]=min(mn[l[q]],a[q],mn[r[q]])//\u6700\u5c0f\u503c\n\nmxa[q]=max(mxa[l[q]],mxa[r[q]],max(mx[r[q]],a[q])-min(a[q],mn[l[q]]))//\u6700\u5927\u6536\u76ca\n\nmna[q]=min(mna[l[q]],mna[r[q]],min(mn[r[q]],a[q])-max(a[q],mx[l[q]]))//\u6700\u5c0f\u6536\u76ca\n\n\u4e0b\u653e\u533a\u95f4\u52a0\u6807\u8bb0\u65f6\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684\u6743\u503c\uff0c\u533a\u95f4\u6700\u5927\u503c\u548c\u533a\u95f4\u6700\u5c0f\u503c\uff0creverse\u65f6\u4ea4\u6362\u6700\u5927\u6536\u76ca\u548c\u6700\u5c0f\u6536\u76ca\u5e76\u00d7-1\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u597d\u5904\u662f\u8fd9\u4e2a\u9898\u7684lct\u5199\u6cd5\u6bd4\u8f83\u5957\u8def\u5316\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u5bf9\u4e8e\u719f\u6089lct\u7684\u4eba\u6765\u8bf4\u4ee3\u7801\u96be\u5ea6\u8f83\u5c0f\uff0c\u5bf9\u4e8e\u521a\u63a5\u89e6lct\u7684\u4eba\u4e5f\u53ef\u4ee5\u4ee5\u6b64\u4f5c\u4e3a\u5165\u95e8\u9898\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u4eb2\u6d4b\u8dd1\u5f97\u6bd4\u5927\u591a\u6570\u6811\u5256\u5feb\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define li long long\n#define gc getchar()\n#define pc putchar\nli read(){\n\tli x = 0,c = gc;\n\twhile(!isdigit(c)) c = gc;\n\twhile(isdigit(c)){\n\t\tx = (x << 1) + (x << 3) + (c ^ '0');c = gc;\n\t}\n\treturn x;\n}\nvoid print(li q){\n\tif(q >= 10) print(q / 10);\n\tpc(q % 10 + '0');\n}\nint n,m;\nstruct edge{\n\tint to,nxt;\n}e[100010];\nint cnt,fir[100010];\nvoid ins(int u,int v){\n\te[++cnt].to = v;e[cnt].nxt = fir[u];fir[u] = cnt;\n\te[++cnt].to = u;e[cnt].nxt = fir[v];fir[v] = cnt;\n}\nint a[100010],f[100010],l[100010],r[100010],mx[100010],mn[100010],mxa[100010],mna[100010],d[100010];\nbool c[100010];\nvoid dfs(int q){\n\tfor(int i = fir[q];i;i = e[i].nxt) if(e[i].to != f[q]){\n\t\tf[e[i].to] = q;\n\t\tdfs(e[i].to);\n\t}\n}\ninline bool is(int q){\n\treturn l[f[q]] != q && r[f[q]] != q;\n}\ninline void rv(int q){\n\tswap(l[q],r[q]);c[q] ^= 1;swap(mxa[q],mna[q]);mxa[q] *= -1;mna[q] *= -1;\n}\ninline void ps(int q){\n\tif(d[q]){\n\t\tif(l[q]) a[l[q]] += d[q],d[l[q]] += d[q],mx[l[q]] += d[q],mn[l[q]] += d[q];\n\t\tif(r[q]) a[r[q]] += d[q],d[r[q]] += d[q],mx[r[q]] += d[q],mn[r[q]] += d[q];\n\t\td[q] = 0;\n\t}\n\tif(c[q]){\n\t\tif(l[q]) rv(l[q]);\n\t\tif(r[q]) rv(r[q]);\n\t\tc[q] = 0;\n\t}\n}\ninline void ud(int q){\n\tmx[q] = mn[q] = a[q];mxa[q] = mna[q] = 0;\n\tif(l[q]){\n\t\tmxa[q] = max(max(mxa[q],mxa[l[q]]),mx[q] - mn[l[q]]);\n\t\tmna[q] = min(min(mna[q],mna[l[q]]),mn[q] - mx[l[q]]);\n\t\tmx[q] = max(mx[q],mx[l[q]]);\n\t\tmn[q] = min(mn[q],mn[l[q]]);\n\t}\n\tif(r[q]){\n\t\tmxa[q] = max(max(mxa[q],mxa[r[q]]),mx[r[q]] - mn[q]);\n\t\tmna[q] = min(min(mna[q],mna[r[q]]),mn[r[q]] - mx[q]);\n\t\tmx[q] = max(mx[q],mx[r[q]]);\n\t\tmn[q] = min(mn[q],mn[r[q]]);\n\t}\n}\nvoid ro(int q){\n\tif(is(q)) return;\n\tint p = f[q];\n\tif(l[f[p]] == p) l[f[p]] = q;\n\telse if(r[f[p]] == p) r[f[p]] = q;\n\tf[q] = f[p];f[p] = q;\n\tif(l[p] == q){\n\t\tl[p] = r[q];r[q] = p;\n\t\tif(l[p]) f[l[p]] = p;\n\t}\n\telse{\n\t\tr[p] = l[q];l[q] = p;\n\t\tif(r[p]) f[r[p]] = p;\n\t}\n\tmxa[q] = mxa[p];mna[q] = mna[p];mx[q] = mx[p];mn[q] = mn[p];\n\tud(p);\n}\nvoid gx(int q){\n\tif(!is(q)) gx(f[q]);\n\tps(q);\n}\nvoid sp(int q){\n\tgx(q);\n\twhile(!is(q)){\n\t\tint p = f[q];\n\t\tif(!is(p)){\n\t\t\tif((l[f[p]] == p) ^ (l[p] == q)) ro(q);\n\t\t\telse ro(p);\n\t\t}\n\t\tro(q);\n\t}\n}\nvoid ac(int q){\n\tint p = 0;\n\twhile(q){\n\t\tsp(q);\n\t\tr[q] = p;\n\t\tud(q);\n\t\tp = q;q = f[q];\n\t}\n}\nvoid mk(int q){\n\tac(q);sp(q);rv(q);\n}\nvoid si(int u,int v){\n\tmk(u);ac(v);sp(v);\n}\nint main(){\n\tint i,j,u,v,w;\n\tn = read();\n\tfor(i = 1;i <= n;++i) a[i] = mx[i] = mn[i] = read();\n\tfor(i = 1;i < n;++i){\n\t\tu = read();v = read();ins(u,v);\n\t}\n\tdfs(1);\n\tm = read();\n\tfor(i = 1;i <= m;++i){\n\t\tu = read();v = read();w = read();si(u,v);print(mxa[v]);pc('\\n');\n\t\td[v] += w;mx[v] += w;mn[v] += w;a[v] += w;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539264323,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a\u6811\u94fe\u5256\u5206\u3001\u7ebf\u6bb5\u6811\u3002\n\n\u9996\u5148\u6811\u5256\u5957\u7ebf\u6bb5\u6811\u662f\u663e\u7136\u7684~~\u56e0\u4e3a\u6807\u7b7e\u8fd9\u4e48\u5199~~\u3002\n\n**\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4ec0\u4e48\uff1f**\n\n\u5982\u679c\u53ea\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u548c\u533a\u95f4\u6700\u5927\u503c\u4f3c\u4e4e\u4e0d\u8db3\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\n\n\u9898\u76ee\u8981\u6c42\u533a\u95f4\u6700\u503c\u4e4b\u5dee\uff0c\u800c\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u533a\u95f4\uff0c\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u6240\u5f97\u5230\u7684\u7b54\u6848\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u8981\u6309\u65b9\u5411\u4e0d\u540c\u5206\u5f00\u7ef4\u62a4\u3002\n\n\u6240\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u56db\u4e2a\u503c\uff1a\n\n1.\u533a\u95f4\u6700\u5927\u503c\u3002\n\n2.\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n3.\u4ece\u5de6\u81f3\u53f3\u7684\u6700\u503c\u4e4b\u5dee\u3002\n\n4.\u4ece\u53f3\u81f3\u5de6\u7684\u6700\u503c\u4e4b\u5dee\u3002\n\n**\u9700\u8981\u4ec0\u4e48\u6807\u8bb0\uff1f**\n\n\u56e0\u4e3a\u53ea\u6709\u533a\u95f4\u52a0\u4e00\u79cd\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ea\u9700\u4e00\u4e2a\u52a0\u6cd5\u61d2\u6807\u8bb0\u5373\u53ef\u3002\n\n**\u5982\u4f55\u5408\u5e76\u548c\u7ef4\u62a4\uff1f**\n\n* \u533a\u95f4\u6700\u5927\u503c\u548c\u533a\u95f4\u6700\u5c0f\u503c\u7684\u7ef4\u62a4\u548c\u5408\u5e76\u5c31\u662f\u677f\u5b50\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\u533a\u95f4\u52a0\u7684\u64cd\u4f5c\u4e5f\u4e00\u6837\u3002\n\n* \u4ece\u5de6\u81f3\u53f3\u7684\u6700\u503c\u4e4b\u5dee\u7684\u5408\u5e76\uff1a\u5982\u679c\u4e0d\u8de8\u533a\u95f4\uff0c\u5c31\u662f\u4e24\u4e2a\u5b50\u8282\u70b9\u5404\u81ea\u7684\u4ece\u5de6\u81f3\u53f3\u7684\u6700\u503c\u4e4b\u5dee\u7684\u6700\u5927\u503c\uff1b\u5982\u679c\u8de8\u533a\u95f4\uff0c\u5c31\u662f\u5de6\u513f\u5b50\u7684\u6700\u5c0f\u503c\u548c\u53f3\u513f\u5b50\u7684\u6700\u5927\u503c\u4e4b\u5dee\u3002\n\n* \u4ece\u53f3\u81f3\u5de6\u7684\u6700\u503c\u4e4b\u5dee\u7684\u5408\u5e76\uff1a\u5982\u679c\u4e0d\u8de8\u533a\u95f4\uff0c\u5c31\u662f\u4e24\u4e2a\u5b50\u8282\u70b9\u5404\u81ea\u7684\u4ece\u53f3\u81f3\u5de6\u7684\u6700\u503c\u4e4b\u5dee\u7684\u6700\u5927\u503c\uff1b\u5982\u679c\u8de8\u533a\u95f4\uff0c\u5c31\u662f\u53f3\u513f\u5b50\u7684\u6700\u5c0f\u503c\u548c\u5de6\u513f\u5b50\u7684\u6700\u5927\u503c\u4e4b\u5dee\u3002\n\n\u5408\u5e76\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n\n```\ntree merge(tree x,tree y)\n{\n\ttree t;\n    t.mi=min(x.mi,y.mi);\n    t.ma=max(x.ma,y.ma);//\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5408\u5e76\n\tt.lm=max(x.ma-y.mi,max(x.lm,y.lm));\n    t.rm=max(y.ma-x.mi,max(x.rm,y.rm));//\u6700\u503c\u4e4b\u5dee\u7684\u5408\u5e76\u8981\u5206\u4e09\u79cd\u60c5\u51b5\n    return t;\n}\n```\n\n**\u6811\u5256\u5982\u4f55\u64cd\u4f5c\uff1f**\n\n\u4e0e[\u67d3\u8272](https://www.luogu.com.cn/problem/P2486)\u8fd9\u9053\u9898\u7c7b\u4f3c\uff0c\u7528\u4e24\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\u5b58\u50a8\u5f53\u524d\u5df2\u7ecf\u8df3\u8fc7\u7684\u90e8\u5206\u7684\u4fe1\u606f\u3002\n\n\u56e0\u4e3a\u5728\u6811\u4e0a\uff0c\u201c\u5de6\u201d\u3001\u2018\u53f3\u2019\u7684\u5212\u5206\u5e94\u53d8\u4e3a\u65f6\u95f4\u6233\u7684\u5927\u5c0f\uff0c\u800c\u8df3\u94fe\u7684\u64cd\u4f5c\u662f\u4ece\u4e0b\u5f80\u4e0a\uff0c\u5373\u65f6\u95f4\u6233\u4ece\u5927\u5230\u5c0f\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u662f\u5728\u201c\u53f3\u8fb9\u201d\u7684\uff0c\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u8981\u6ce8\u610f\u8fd9\u4e00\u70b9\u3002\n\n\u6c42\u503c\u64cd\u4f5c\u7684\u4ee3\u7801\uff1a\n\n```\nvoid c_q(int u,int v)\n{\n\ttree L,R;L.mi=R.mi=INF;//\u5b58\u50a8\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\n\twhile(t[u]!=t[v])\n\t\tif(d[t[u]]<d[t[v]])\n        {\n        \tR=merge(query(1,id[t[v]],id[v]),R);//\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u7ed3\u6784\u4f53\u5728\u53f3\n            v=fa[t[v]];\n        }\n\t\telse\n        {\n        \tL=merge(query(1,id[t[u]],id[u]),L);\n            u=fa[t[u]];\n        }\n\tif(d[u]>d[v])L=merge(query(1,id[v],id[u]),L);\n    else R=merge(query(1,id[u],id[v]),R);\n    swap(L.lm,L.rm);//\u5408\u5e76\u4e24\u4e2a\u7ed3\u6784\u4f53\u7684\u4fe1\u606f\uff0c\u5176\u4e2dL\u7684\u5de6\u53f3\u6700\u503c\u5dee\u8981\u4ea4\u6362\n    cout<<merge(L,R).rm<<endl;\n}\n```\n\n[\u5b8c\u6574\u7684\u4ee3\u7801](https://www.luogu.com.cn/paste/h40ftbkh)",
        "postTime": 1644224217,
        "uid": 540715,
        "name": "A_I_Skeleton",
        "ccfLevel": 0,
        "title": "P3976"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e [cnblogs](https://www.cnblogs.com/registergen/p/p3976_solution.html)\u3002\n\n\u6211\u6765\u53d1\u4e00\u4e2a\u6709\u56fe\u7684\u9898\u89e3\uff0c\u5e0c\u671b\u5927\u5bb6\u770b\u7740\u56fe\u80fd\u66f4\u660e\u767d\u3002\n\n## Solution\n\n\u8fd9\u4e2a\u9898\u5e94\u8be5\u6bd4\u8f83\u597d\u60f3\u3002\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u53f3\u51cf\u5de6\u7684\u7b54\u6848\uff0c\u5de6\u51cf\u53f3\u7684\u7b54\u6848\uff1a\n\n```cpp\nstruct Node{\n\tint mx,mn,lr,rl,atag; // \u533a\u95f4\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u5de6\u51cf\u53f3\uff0c\u53f3\u51cf\u5de6\uff0c\u533a\u95f4\u52a0\u6807\u8bb0\n\tNode(){mx=lr=rl=-inf,mn=inf,atag=0;}\n};\n\n// \u5408\u5e76\u4e24\u4e2a\u533a\u95f4\ninline Node pushUp(const Node &L,const Node &R){\n\tNode res;\n\tres.mx=std::max(L.mx,R.mx);\n\tres.mn=std::min(L.mn,R.mn);\n\tres.lr=std::max(std::max(L.lr,R.lr),L.mx-R.mn);\n\tres.rl=std::max(std::max(L.rl,R.rl),R.mx-L.mn);\n\treturn res;\n}\n\n// \u4e0b\u4f20\u533a\u95f4\u52a0\u6807\u8bb0\ninline void pushA(Node &x,int atag){\n\tx.atag+=atag;\n\tx.mx+=atag;\n\tx.mn+=atag;\n}\n```\n\n\u7136\u540e\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6811\u4e0a\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6811\u5256\u3002\u7136\u800c\u8fd9\u4e2a\u9898\u662f\u90a3\u79cd\u7c7b\u4f3c [GSS7](https://www.luogu.com.cn/problem/SP6779) \u7684\u6bd2\u7624\u9898\uff0c\u6240\u4ee5\u5408\u5e76\u7684\u65f6\u5019\u8981\u8003\u8651\u987a\u5e8f\u3002\n\n\u6765\u653e\u51e0\u5f20\u56fe\uff1a\n\n\u56e0\u4e3a $dfn_w\\le dfn_u$\uff0c\u6240\u4ee5\u5408\u5e76\u4e00\u6761\u94fe\u5e94\u8be5\u662f\u7528\u4e0a\u9762\u7684\u53bb\u5408\u5e76\u4e0b\u9762\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aqaszn61.png)\n\n\u56e0\u4e3a $dfn_w\\le dfn_u,dfn_w\\le dfn_v$\uff0c\u6240\u4ee5\u5408\u5e76\u4e4b\u540e\u7684\u987a\u5e8f\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/r5rw6kxi.png)\n\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4ea4\u6362\u4e00\u4e0b $u\\leftrightarrow w$ \u8fd9\u6761\u94fe\u4e0a\u7684 `lr` \u548c `rl`\uff0c\u4e4b\u540e\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lg46ehv7.png)\n\n\u6700\u540e\u628a\u4e24\u6761\u94fe\u5408\u5e76\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n\nconst int N=5e4;\nconst int inf=0x3f3f3f3f;\n\nstruct Edge{int to,nxt;}e[N*2+10];int head[N+10],tote;\ninline void addEdge(int u,int v){e[++tote].to=v;e[tote].nxt=head[u];head[u]=tote;}\n\nstruct Node{\n\tint mx,mn,lr,rl,atag;\n\tNode(){mx=lr=rl=-inf,mn=inf,atag=0;}\n};\n\nint n,m,a[N+10];\nint fa[N+10],dep[N+10],siz[N+10],son[N+10],dfn[N+10],rk[N+10],top[N+10],cnt;\nNode t[N*4+10];\n\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n\ninline Node pushUp(const Node &L,const Node &R){\n\tNode res;\n\tres.mx=std::max(L.mx,R.mx);\n\tres.mn=std::min(L.mn,R.mn);\n\tres.lr=std::max(std::max(L.lr,R.lr),L.mx-R.mn);\n\tres.rl=std::max(std::max(L.rl,R.rl),R.mx-L.mn);\n\treturn res;\n}\n\ninline void pushA(Node &x,int atag){\n\tx.atag+=atag;\n\tx.mx+=atag;\n\tx.mn+=atag;\n}\n\ninline void pushDown(int i){\n\tif(t[i].atag){\n\t\tpushA(t[ls(i)],t[i].atag);\n\t\tpushA(t[rs(i)],t[i].atag);\n\t\tt[i].atag=0;\n\t}\n}\n\nvoid build(int i,int l,int r){\n\tif(l==r){\n\t\tt[i].mn=t[i].mx=a[rk[l]];\n\t\tt[i].lr=t[i].rl=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls(i),l,mid);\n\tbuild(rs(i),mid+1,r);\n\tt[i]=pushUp(t[ls(i)],t[rs(i)]);\n}\n\nvoid modify(int i,int l,int r,int ql,int qr,int x){\n\tif(ql<=l&&r<=qr)return pushA(t[i],x),void();\n\tint mid=(l+r)>>1;\n\tpushDown(i);\n\tif(ql<=mid)modify(ls(i),l,mid,ql,qr,x);\n\tif(qr>mid) modify(rs(i),mid+1,r,ql,qr,x);\n\tt[i]=pushUp(t[ls(i)],t[rs(i)]);\n}\n\nNode query(int i,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr)return t[i];\n\tint mid=(l+r)>>1;\n\tpushDown(i);\n\tif(ql>mid) return query(rs(i),mid+1,r,ql,qr);\n\tif(qr<=mid)return query(ls(i),l,mid,ql,qr);\n\treturn pushUp(query(ls(i),l,mid,ql,qr),query(rs(i),mid+1,r,ql,qr));\n}\n\n#undef ls\n#undef rs\n\nvoid DFS1(int u,int _fa){\n\tfa[u]=_fa;\n\tdep[u]=dep[_fa]+1;\n\tsiz[u]=1;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==_fa)continue;\n\t\tDFS1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\n\nvoid DFS2(int u,int _fa,int _top){\n\tdfn[u]=++cnt,rk[cnt]=u;\n\ttop[u]=_top;\n\tif(son[u])DFS2(son[u],u,_top);\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==_fa||v==son[u])continue;\n\t\tDFS2(v,u,v);\n\t}\n}\n\nvoid modify(int u,int v,int x){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]])std::swap(u,v);\n\t\tmodify(1,1,n,dfn[top[u]],dfn[u],x);\n\t\tu=fa[top[u]];\n\t}\n\tif(dfn[u]>dfn[v])std::swap(u,v);\n\tmodify(1,1,n,dfn[u],dfn[v],x);\n}\n\nNode query(int u,int v){\n\tNode L,R;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]>dep[top[v]]){\n\t\t\tL=pushUp(query(1,1,n,dfn[top[u]],dfn[u]),L);\n\t\t\tu=fa[top[u]];\n\t\t}\n\t\telse{\n\t\t\tR=pushUp(query(1,1,n,dfn[top[v]],dfn[v]),R);\n\t\t\tv=fa[top[v]];\n\t\t}\n\t}\n\tif(dfn[u]<dfn[v])\n\t\tR=pushUp(query(1,1,n,dfn[u],dfn[v]),R);\n\telse\n\t\tL=pushUp(query(1,1,n,dfn[v],dfn[u]),L);\n\tstd::swap(L.lr,L.rl);\n\treturn pushUp(L,R);\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",a+i);\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;scanf(\"%d%d\",&u,&v);\n\t\taddEdge(u,v),addEdge(v,u);\n\t}\n\tDFS1(1,0),DFS2(1,0,1),build(1,1,n);\n\tscanf(\"%d\",&m);\n\twhile(m--){\n\t\tint u,v,x;scanf(\"%d%d%d\",&u,&v,&x);\n\t\tNode ans=query(u,v);\n\t\tprintf(\"%d\\n\",std::max(0,ans.rl));\n\t\tmodify(u,v,x);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1629429541,
        "uid": 242702,
        "name": "registerGen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6709 $Q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e24\u4e2a\u70b9 $a,b$\uff0c\u6c42\u6ee1\u8db3 $\\mathrm{dis}(a,c)<\\mathrm{dis}(a,d)$ \u7684 $\\max(val_d-val_c)$\uff0c\u5176\u4e2d $val_x$ \u4e3a $x$ \u70b9\u7684\u70b9\u6743\u3002\u652f\u6301\u8def\u5f84\u52a0\u3002\n\n### \u5206\u6790\n\n\u6beb\u65e0\u7591\u95ee\u6811\u94fe\u5256\u5206\u9898\u3002\u5148\u7528 $\\mathrm{dfs}$ \u5e8f\u5256\u51fa\u6bcf\u6761\u94fe\u3002\u7136\u540e\u6211\u4eec\u73b0\u5728\u5148\u6765\u8003\u8651\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 $i>j,\\max(v_i-v_j)$ \u548c $i<j,\\max(v_i-v_j)$\uff0c\u533a\u95f4\u6700\u5927\u503c\uff0c\u533a\u95f4\u6700\u5c0f\u503c\u3002\n\n\u518d\u6765\u8003\u8651\u5256\u5206\u65f6\u51e0\u6761\u94fe\u4e4b\u95f4\u7684\u5408\u5e76\u3002\u53ea\u4f1a\u5b58\u5728\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u7b54\u6848\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u3002\u8fd9\u79cd\u60c5\u51b5\u7ebf\u6bb5\u6811\u5df2\u7ecf\u7ef4\u62a4\u4e86\u3002\n- \u7b54\u6848\u5728\u4e0d\u540c\u94fe\u4e0a\u3002\u8fd9\u79cd\u60c5\u51b5\u7ebf\u6bb5\u6811\u6ca1\u6709\u7ef4\u62a4\uff0c\u8df3 $\\text{LCA}$ \u7684\u65f6\u5019\u6839\u636e $a,b$ \u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u8bd5\u56fe\u66f4\u65b0\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$\uff0c\u5f88\u597d\u60f3\uff0c\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\u3002\n\n",
        "postTime": 1604037131,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    },
    {
        "content": "\u539f\u672c\u5982\u679c\u8fd9\u53ea\u662f \u4e00\u9053\u7ebf\u6bb5\u6811\u9898\u8fd8\u662f \u5341\u5206\u7b80\u5355\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u5176\u8def\u5f84\u6700\u5927\u5dee\u503c\u4e3a\u5176max:\u53f3\u513f\u5b50\u6700\u5927\u5dee\u503c,\u5de6\u513f\u5b50\u6700\u5927\u5dee\u503c,\u53f3\u513f\u5b50MAX-\u5de6\u513f\u5b50MIN\uff08\u6216\u8005\u5de6\u513f\u5b50MAX-\u53f3\u513f\u5b50MIN\uff09\uff0c\u5bf9\u4e8e\u8fd9\u6837\u7684\u8981\u8fd4\u56de\u591a\u6743\u503c\u7684\u95ee\u9898\uff0c\u7ebf\u6bb5\u6811\u4f20\u9012\u7ed3\u6784\u4f53\u6bd4\u8f83\u5bb9\u6613\u3002\u60f3\u8981\u505a\u7684\u53ef\u4ee5\u8f6c\u5411\u2013\u300b\u6c34\u679c\u59d0\u7cfb\u5217\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u662f\u5728\u4e00\u4e2a\u666e\u901a\u7684\u6811\u4e0a\u8fdb\u884c\u7684\uff0c\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u6811\u94fe\u5256\u5206\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002\u6ce8\u610f\u5230\u8981\u89e3\u51b3\u597d\u4e00\u4e2a\u65b9\u5411\u600e\u4e48\u628a\u63a7\u7684\u95ee\u9898\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u6811\u5256\u4e00\u6b65\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0a\u722c\u7684\u65f6\u5019\uff0c\u4ece\u8be2\u95ee\u8d77\u70b9\u5f80\u4e0a\u722c\u548c\u8be2\u95ee\u7ec8\u70b9\u5f80\u4e0a\u722c\u662f\u4e0d\u4e00\u6837\u7684\u3002\u6211\u7684\u5904\u7406\u65b9\u5f0f\u662f\u6bcf\u6b21\u90fd\u8fdb\u884c\u5224\u65ad\u662f\u7ebf\u6bb5\u6811\u5de6\u5230\u53f3\u8fd8\u662f\u53f3\u5230\u5de6\u626b\u6700\u5927\u5dee\u503c\uff0c\u4e4b\u540e\u5c06\u6bcf\u6bb5\u533a\u95f4\u5185\u7684min\u548cmax\u8bb0\u5f55\u4e0b\u6765\uff08\u5206\u522b\u5f00\u4e24\u4e2a\u6570\u7ec4\u4ece\u8d77\u70b9\u722c\u7684\u548c\u7ec8\u70b9\u722c\u7684\uff09\uff0c\u4e4b\u540e\u518d\u5c06\u8fd9\u4e00\u5927\u6bb5\u533a\u95f4\u7684min\u548cmax\u8fde\u63a5\u6210\u4e00\u6761\u94fe\uff0c\u76f4\u63a5\u66b4\u529b\u8dd1\u4e00\u6b21\u533a\u95f4\u6700\u5927\u5dee\u503c\uff0c\u5f97\u5230\u6700\u5927\u7b54\u6848\u5c31\u662f\u4e86\u3002\n\n\u8bf4\u5f97\u5bb9\u6613\u771f\u7684\u5199\u5f97\u5f88\u6076\u5fc3\u554a\uff01\uff01\uff01\n\ntalk is cheap , show the code:\n\n\t#include<cstdio>\n\t#include<iostream>\n\t#include<algorithm>\n\t#define ls (p<<1)\n\t#define rs (p<<1|1)\n\t#define midd ((l+r)>>1)\n\tusing namespace std;\n\tconst int maxn=(int)5e5+5;\n\tint n;\n\tint fa[maxn];\n\tint owo,la[maxn],nt[maxn],en[maxn];\n\tinline void addedge(int a,int b)\n\t{\n    en[++owo]=b; nt[owo]=la[a]; la[a]=owo;\n\t}\n\tint \toldid[maxn],dep[maxn],top[maxn],newid[maxn],idcnt,siz[maxn],zerz[maxn],oldp[maxn];\n\tvoid fzb(int x,int ba)\n\t{\n    dep[x]=dep[ba]+1; fa[x]=ba;\n    int maxsize=0; zerz[x]=0; siz[x]=1;\n    for(int it=la[x];it;it=nt[it])\n    {\n        if(en[it]==ba) continue;\n        fzb(en[it],x);\n        siz[x]+=siz[en[it]];\n        if(siz[en[it]]>maxsize)\n        {\n            maxsize=siz[en[it]];\n            zerz[x]=en[it];\n        }\n    }\n\t}\n\tvoid lzb(int x,int ace)\n\t{\n    top[x]=ace; newid[x]=++idcnt; oldid[idcnt]=x;\n    if(zerz[x]) lzb(zerz[x],ace);\n    for(int it=la[x];it;it=nt[it])\n    {\n        if(en[it]==zerz[x]||en[it]==fa[x]) continue;\n        lzb(en[it],en[it]);\n    }\n\t}\n\tstruct node\n\t{\n    int minn,maxx,ltormax,rtolmax,lazy;\n\t}z[maxn<<3];\n\tinline void putup(int p)\n\t{\n    z[p].maxx = max( z[ls].maxx , z[rs].maxx );\n    z[p].minn = min( z[ls].minn , z[rs].minn );\n    z[p].ltormax = max( z[ls].ltormax , max( z[rs].ltormax , z[rs].maxx - z[ls].minn ) );\n    z[p].rtolmax = max( z[ls].rtolmax , max( z[rs].rtolmax , z[ls].maxx - z[rs].minn ) );\n\t}\n\tinline void putdowm(int p,int l,int r)\n\t{\n    if(l==r) { z[p].lazy=0; return; }\n    z[ls].lazy +=z[p].lazy; z[rs].lazy+=z[p].lazy;\n    z[ls].maxx += z[p].lazy ; z[ls].minn +=z[p].lazy ;\n    z[rs].maxx += z[p].lazy ; z[rs].minn +=z[p].lazy ;\n    z[p].lazy = 0; \n\t}\n\tnode query(int p,int l,int r,int x,int y,int mark)\n\t{\n    if(x<=l&&r<=y) \n    {\n        return z[p];\n    }\n    if(z[p].lazy) putdowm(p,l,r);\n    if(x>=midd+1)\n    {\n        return query(rs,midd+1,r,x,y,mark);\n    }\n    else if(y<=midd)\n    {\n        return query(ls,l,midd,x,y,mark);\n    }\n    node lll=query(ls,l,midd,x,y,mark);\n    node rrr=query(rs,midd+1,r,x,y,mark);\n    node aha;\n    if(mark==1)\n    {\n        aha.rtolmax=max(lll.rtolmax,max(rrr.rtolmax,lll.maxx-rrr.minn));\n        aha.maxx=max(lll.maxx,rrr.maxx);\n        aha.minn=min(lll.minn,rrr.minn);\n    }\n    else \n    {\n        aha.ltormax=max(lll.ltormax,max(rrr.ltormax,rrr.maxx-lll.minn));\n        aha.maxx=max(lll.maxx,rrr.maxx);\n        aha.minn=min(lll.minn,rrr.minn);\n    }\n    return aha;\n\t}\n\tint  xl[maxn],xr[maxn],yl[maxn],yr[maxn];\n\tint qqq(int x,int y)\n\t{\n    int cntx=0,cnty=0; int ans=0;\n    while(top[x]!=top[y])\n    {\n        if(dep[top[x]]>dep[top[y]])\n        {\n            node aha=query(1,1,n,newid[top[x]],newid[x],1);\n            ans=max(ans,aha.rtolmax);\n            xl[++cntx]=aha.minn; xr[cntx]=aha.maxx;\n            x=fa[top[x]];\n        }\n        else\n        {\n            node aha=query(1,1,n,newid[top[y]],newid[y],2);\n            ans=max(ans,aha.ltormax);\n            yl[++cnty]=aha.minn; yr[cnty]=aha.maxx;\n            y=fa[top[y]];\n        }\n    }\n    if(dep[x]>dep[y])\n    {\n        node  aha=query(1,1,n,newid[y],newid[x],1);\n        xl[++cntx]=aha.minn; xr[cntx]=aha.maxx;\n        ans=max(ans,aha.rtolmax);\n    }\n    else\n    {\n        node aha=query(1,1,n,newid[x],newid[y],2);\n        yl[++cnty]=aha.minn; yr[cnty]=aha.maxx;\n        ans=max(ans,aha.ltormax);\n    }\n    for(int i=cnty;i>=1;i--)\n    {\n        xl[++cntx]=yl[i]; xr[cntx]=yr[i];//\u8fd9\u91cc\u5c06\u4ed6\u4eec\u8fde\u63a5\u6210\u4e00\u6761\u94fe\u5b50\n    }\n    int minn=0x3f3f3f3f;\n    for(int i=1;i<=cntx;i++)\n    {\n        ans=max(ans,xr[i]-minn);\n        minn=min(minn,xl[i]);\n    }\n    int maxx=-0x3f3f3f3f;\n    for(int i=cntx;i>=1;i--)\n    {\n        ans=max(ans,maxx-xl[i]);\n        maxx=max(maxx,xr[i]); \n    }//\u66b4\u529b\u8dd1\u6700\u5927\u5dee\u503c\n    if(ans<0) return 0; \n    return ans;\n\t}\n\tvoid maketree(int p,int l,int r)\n\t{\n    if(l<r)\n    {\n        maketree(ls,l,midd);\n        maketree(rs,midd+1,r);\n        putup(p);\n    }\n    else\n    {\n        z[p].minn = z[p].maxx =  oldp[ oldid[l] ]; \n        z[p].ltormax = z[p].rtolmax = z[p].lazy =0;\n    }\n\t}\n\tvoid change(int p,int l,int r,int x,int y,int cc)\n\t{\n    if( x<=l&&r<=y ) { z[p].maxx+=cc; z[p].minn+=cc; z[p].lazy+=cc; return; }\n    if(z[p].lazy) putdowm(p,l,r);\n    if(x<=midd&&y>=l) change(ls,l,midd,x,y,cc);\n    if(x<=r&&y>=midd+1) change(rs,midd+1,r,x,y,cc);\n    putup(p);\n\t}\n\tvoid ccc(int a,int b,int c)\n\t{\n    while(top[a]!=top[b])\n    {\n        if(dep[top[a]]<dep[top[b]]) swap(a,b);\n        change(1,1,n,newid[top[a]],newid[a],c);\n        a=fa[top[a]];\n    }\n    if(dep[a]>dep[b]) swap(a,b);\n    change(1,1,n,newid[a],newid[b],c);\n\t}\n\tvoid ts(int p,int l,int r)\n\t{\n    if(z[p].lazy) putdowm(p,l,r);\n    if(l<r)\n    {\n        ts(ls,l,midd);\n        ts(rs,midd+1,r);\n    }\n    else cout<<z[p].maxx<<' ';\n\t}\n\tint main()\n\t{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&oldp[i]);\n    int a,b,c;\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        addedge(a,b); addedge(b,a);\n    }\n    fzb(1,0); lzb(1,1); maketree(1,1,n);\n    int q; scanf(\"%d\",&q);\n    while(q--)\n    {\n        scanf(\"%d%d%d\",&a,&b,&c);\n        printf(\"%d\\n\",qqq(a,b));\n        ccc(a,b,c);\n\t//        ts(1,1,n); putchar(10);\n    }\n\t} \n\u6b22\u8fce\u6765\u672c\u849f\u84bb\u535a\u5ba2\uff1awww.newuser.top \u770b\u770b\uff01",
        "postTime": 1522079385,
        "uid": 55343,
        "name": "Newuser",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3976 \u3010[TJOI2015]\u65c5\u6e38\u3011"
    }
]