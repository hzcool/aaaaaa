[
    {
        "content": "$O(n\\log n)$ \u9898\u89e3\u3002\n\n\u52a0\u5165\u4e00\u4e2a\u6a2a\u5750\u6807\u8303\u56f4 $[x,y]$\uff0c\u9ad8\u5ea6\u4e3a $h$ \u7684\u77e9\u5f62 $R$ \u540e\u5f62\u6210\u7684\u65b0\u7684\u6d1e\u7684\u8f6e\u5ed3\u4e0a\u81f3\u5c11\u8981\u6709\u4e00\u6761 $R$ \u7684\u8fb9\uff0c\u4e8b\u5b9e\u4e0a\u53ea\u6709\u5982\u4e0b\u4e94\u79cd\u60c5\u51b5\uff1a\n\n1. \u6d1e\u7684\u8f6e\u5ed3\u53ea\u5305\u542b $R$ \u7684\u4e0b\u8fb9\uff1b\n2. \u6d1e\u7684\u8f6e\u5ed3\u53ea\u5305\u542b $R$ \u7684\u5de6\u8fb9\uff1b\n3. \u6d1e\u7684\u8f6e\u5ed3\u53ea\u5305\u542b $R$ \u7684\u53f3\u8fb9\uff1b\n4. \u6d1e\u7684\u8f6e\u5ed3\u540c\u65f6\u5305\u542b $R$ \u7684\u5de6\u8fb9\u548c\u4e0b\u8fb9\uff1b\n5. \u6d1e\u7684\u8f6e\u5ed3\u540c\u65f6\u5305\u542b $R$ \u7684\u53f3\u8fb9\u548c\u4e0b\u8fb9\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u8f6e\u5ed3\u663e\u7136\u4e0d\u53ef\u80fd\u5305\u542b $R$  \u7684\u4e0a\u8fb9\uff08\u5426\u5219 $R$ \u6b63\u4e0a\u65b9\u8fd8\u6709\u522b\u7684\u77e9\u5f62\uff09\uff0c\u4e5f\u4e0d\u53ef\u80fd\u540c\u65f6\u5305\u542b $R$ \u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\uff08\u5426\u5219 $R$ \u6d6e\u7a7a\uff09\u3002\n\n\u4e0b\u9762\u5206\u522b\u8ba8\u8bba\u8fd9\u4e9b\u60c5\u51b5\u3002\n\n1. \u6d1e\u7684\u8f6e\u5ed3\u53ea\u5305\u542b $R$ \u7684\u4e0b\u8fb9\uff1a\n\n   \u5176\u4e00\u822c\u60c5\u51b5\u5982\u4e0b\u56fe\uff0c\u4e00\u4e2a\u6d1e \u2460 \u4ece\u4e0a\u9762\u88ab $R$ \u5835\u4f4f\uff0c\u4e24\u8fb9\u4e5f\u5404\u88ab\u5835\u4f4f\u3002\n\n   \u6211\u4eec\u6c42\u51fa $R$ \u7684\u6a2a\u5750\u6807\u8303\u56f4 $[x,y]$ \u7684\u533a\u95f4\u6700\u5927\u503c\u7684\u540c\u65f6\uff0c\u4e5f\u6c42\u51fa\u6709\u591a\u5c11\u6bb5\u7531\u533a\u95f4\u6700\u5927\u503c\u7ec4\u6210\u7684\u8fde\u7eed\u6bb5\uff0c\u90a3\u4e48\u4e24\u4e2a\u8fde\u7eed\u6bb5\u4e4b\u95f4\u7684\u90e8\u5206\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u6d1e\uff0c\u800c\u8fde\u7eed\u6bb5\u6570\u91cf\u5bb9\u6613\u5728\u7ebf\u6bb5\u6811\u4e0a\u987a\u4fbf\u7ef4\u62a4\u3002\n\n   ![](https://cdn.luogu.com.cn/upload/image_hosting/n0fl7q5j.png)\n\n2. \u6d1e\u7684\u8f6e\u5ed3\u53ea\u5305\u542b $R$ \u7684\u5de6\u8fb9\uff08\u53f3\u8fb9\uff09\uff1a\n\n   \u5176\u4e00\u822c\u60c5\u51b5\u5982\u4e0b\u56fe\uff0c\u4e00\u4e2a\u6d1e\u4ece\u53f3\u8fb9\u88ab $R$ \u5835\u4f4f\uff0c\u4e0a\u4e0b\u4e5f\u5404\u88ab\u5835\u4f4f\u3002\n\n   \u6211\u4eec\u79f0\u4e0a\u4e0b\u88ab\u5835\u4f4f\uff0c\u5de6\u53f3\u6709\u4e00\u8fb9\u88ab\u5835\u4f4f\u7684\u7ed3\u6784\u53eb\u505a\u201c\u534a\u6d1e\u201d\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u8981\u8003\u8651\u6a2a\u5750\u6807 $x-1$ \u5904\u7684\u534a\u6d1e\u5373\u53ef\u3002\n\n   \u5177\u4f53\u5730\uff0c\u7528 set \u7ef4\u62a4\u6bcf\u4e2a\u6a2a\u5750\u6807\u5904\u7684\u534a\u6d1e\uff08\u8fd9\u4e2a\u6d1e\u5728\u5bf9\u5e94\u6a2a\u5750\u6807\u5904\u7684\u4e0a\u4e0b\u8fb9\u754c\uff09\uff0c\u52a0\u5165 $R$ \u540e\u53ea\u4f1a\u5728 $x,y$ \u5904\u5404\u589e\u52a0\u81f3\u591a\u4e00\u4e2a\u534a\u6d1e\uff08\u5373\u539f\u672c\u7684\u4e0a\u8fb9\u754c\u5230 $R$ \u7684\u4e0b\u8fb9\u754c\u4e4b\u95f4\u7684\u7a7a\u6d1e\uff09\uff0c\u8981\u67e5\u8be2\u5305\u542b $R$ \u5de6\u8fb9\uff08\u53f3\u8fb9\uff09\u7684\u65b0\u6d1e\u65f6\u53ea\u9700\u8981\u5728 $x-1$\uff08$y+1$\uff09\u7684 set \u4e2d\u627e\u5230 $R$ \u8fd9\u4e00\u6bb5\u7eb5\u5750\u6807\u4e0a\u7684\u534a\u6d1e\u6570\u91cf\u5373\u53ef\u3002\n\n   \uff08\u5229\u7528\u5355\u8c03\u6027\uff0c\u7528 queue \u6216 vector \u4e5f\u53ef\uff09\n\n   ![](https://cdn.luogu.com.cn/upload/image_hosting/r0a0o333.png)\n\n3. \u6d1e\u7684\u8f6e\u5ed3\u540c\u65f6\u5305\u542b $R$ \u7684\u5de6\u8fb9\uff08\u53f3\u8fb9\uff09\u548c\u4e0b\u8fb9\uff1a\n\n   \u8fd9\u53ea\u662f\u8fb9\u754c\u60c5\u51b5\uff0c\u5904\u7406 2 \u4e2d\u7684\u534a\u6d1e\u548c 1 \u4e2d\u7684\u6700\u5927\u503c\u8fde\u7eed\u6bb5\u7684\u65f6\u5019\u8fdb\u884c\u4e00\u4e9b\u7279\u5224\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002",
        "postTime": 1645767999,
        "uid": 113546,
        "name": "ix35",
        "ccfLevel": 10,
        "title": "[HNOI 2009] \u79ef\u6728\u6e38\u620f"
    },
    {
        "content": "\u8fd9\u5927\u6982\u662f\u5168\u7f51\u552f\u4e00\u9760\u8c31\u7684\u9898\u89e3\u4e86\u3002\n\n\u5199\u5728\u7eb8\u4e0a\uff0c\u5b57\u5f88\u4e11\uff0c\u5148\u51d1\u5408\u4e00\u4e0b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/32gcq5zm.png)\n\n\u9644\u7a0b\u5e8f(\u76f4\u63a5\u590d\u5236\u65e0\u6cd5AC,\u4f46\u4e0d\u5f71\u54cd\u9605\u8bfb):\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n, flag; \n\nint max( int a, int b, int c )\n  { return max( a, max( b, c ) ); }\n\nint max( int a, int b, int c, int d )\n  { return max( a, max( b, c, d ) ); }\n\nbool cross( int a, int b, int x, int y )\n  { return max( a, x ) <= min(b, y); } \n\nnamespace SGT{\n    #define ls ( x << 1 )\n    #define rs ( ls | 1 )\n    #define mid ( ( l[x] + r[x] ) >> 1 )\n    #define Lrange ls, L, min( mid, R )\n    #define Rrange rs, max( mid + 1, L ), R\n    #define Ason(F) ( (F) ? ls : rs )\n    int l[100005 << 2];\n    int r[100005 << 2];\n    int mx[100005 << 2];\n    int mk[100005 << 2];\n    \n    void push_up( int x ) { mx[x] = max( mx[ls], mx[rs] ); }\n    \n    void push_down( int x )\n      { mk[ls] = max( mk[ls], mk[x]);\n        mk[rs] = max( mk[rs], mk[x]);\n        if( mx[ls] < mk[ls] ) mx[ls] = mk[ls];\n        if( mx[rs] < mk[rs] ) mx[rs] = mk[rs]; }\n\n    void build( int x, int L, int R ) \n      { l[x] = L, r[x] = R;\n        if( L == R ) return ;\n        build( Lrange ); build( Rrange ); }\n    \n    void modify( int x, int L, int R, int V ) \n      { if( l[x] == L and r[x] == R ) return mk[x] = max( mk[x], V ), mx[x] = max( V, mx[x] ), void(); push_down(x);\n        if( L <= mid ) modify( Lrange, V );\n        if( R >  mid ) modify( Rrange, V );\n        push_up(x); }\n    \n    int query( int x, int L, int R ) \n      { if( l[x] == L and r[x] == R ) return mx[x];\n        push_down(x);\n        if( R <= mid ) return query( Lrange );\n        if( L >  mid ) return query( Rrange );\n        return max( query( Lrange ), query( Rrange ) ); }\n}\n\nint cnt[100005];\n\nnamespace GRP{\n\tvector<int> to1[100005]; \n\tvector<int> to2[100005];\n\tint deg[100005];\n\tint tag[100005];\n\tmap< pair<int, int>, bool > MP;\n\t\n\tvoid addEdge( int u, int v )\n\t  { if( MP[ make_pair( u, v ) ] or MP[ make_pair( v, u ) ] ) return ;\n\t    MP[ make_pair( u, v ) ] = 1;\n\t    to1[u].push_back(v); deg[u] ++;\n\t    to1[v].push_back(u); deg[v] ++; }\n\t\n\tvoid countTriangle() \n\t  { for( int i = 0; i <= n; i ++ ) for( int j : to1[i] )\n\t      { if( deg[i] > deg[j] or ( deg[i] == deg[j] and i > j ) ) \n\t\t      { to2[i].push_back(j); }\n\t\t  }\n\t\t  \n\t\tfor( int i = 0; i <= n; i ++ )\n\t\t  { for( int j : to2[i] ) tag[j] = i + 1;\n\t\t    for( int j : to2[i] ) for( int k : to2[j] ) if( tag[k] == i + 1 ) \n\t\t\t  { cnt[ max( i, j, k ) ] --; } \n\t\t  }\n\t  }\n\t  \n\tvoid flush( int x )\n\t  { for( int i : to1[x] ) if( i < x ) cnt[x] ++; cnt[x] --; }\n}\n\nstruct Rect\n  { int l, r, b, t, h, id;\n    void get( int _id )\n      { id = _id; cin >> l >> r >> h; }\n  } R[100005], T[100005];\n\nbool cmp1( Rect& A, Rect& B ) { return A.l == B.l ? A.b < B.b : A.l < B.l; }\nbool cmp2( Rect& A, Rect& B ) { return A.r == B.r ? A.b < B.b : A.r < B.r; }\nbool cmp3( Rect& A, Rect& B ) { return A.b == B.b ? A.l < B.l : A.b < B.b; }\nbool cmp4( Rect& A, Rect& B ) { return A.t == B.t ? A.l < B.l : A.t < B.t; }\n\nstruct Point\n  { int x, y, id;\n  \tPoint( int _x, int _y, int _id )\n  \t  : x(_x), y(_y), id(_id) { }\n  \tbool operator <( const Point& F )\n\t  { return x == F.x ? y < F.y : x < F.x; } \n\tbool operator ==( const Point& F )\n\t  { return x == F.x and y == F.y; }\n  } ;\n\nvector<Point> VP; \n\nint main(){\n    cin >> n;\n\n    //SGT::build( 1, 1, 100000 );\t\n\t\n    for( int i = 1; i <= n; i ++ ) R[i].get(i);\n    for( int i = 1; i <= n; i ++ ) \n\t  { int Q = SGT::query( 1, R[i].l + 1, R[i].r );\n        R[i].b = Q; R[i].t = R[i].h + Q;\n        SGT::modify( 1, R[i].l + 1, R[i].r, R[i].t ); } \n\t\n\tfor( int i = 1; i <= n; i ++ ) if( R[i].b == 0 )\n\t  { GRP::addEdge( 0, i ); }\n\t\n\tfor( int i = 1; i <= n; i ++ ) T[i] = R[i];\n\t\n#define BF\n#ifndef BF\n\tfor( int i = 1; i <= n; i ++ ) T[i] = R[i];\n\t\n\tsort( R + 1, R + n + 1, cmp1 );\n\tsort( T + 1, T + n + 1, cmp2 );\n\t\n\tfor( int l = 1, r = 1, p; l <= n; l ++ )\n\t  { while( T[r].r < R[l].l or ( T[r].r == R[l].l and T[r].t < R[l].b ) ) r ++; p = r;\n\t\twhile( T[p].r == R[l].l and T[p].b <= R[l].t ) GRP::addEdge( R[l].id, T[p].id ), p ++;\t}\n\t\t\n\tsort( R + 1, R + n + 1, cmp3 );\n\tsort( T + 1, T + n + 1, cmp4 );\n\t\n\tfor( int l = 1, r = 1, p; l <= n; l ++ )\n\t  { while( T[r].t < R[l].b or ( T[r].t == R[l].b and T[r].r < R[l].l ) ) r ++; p = r;\n\t\twhile( T[p].t == R[l].b and T[p].l <= R[l].r ) GRP::addEdge( R[l].id, T[p].id ), p ++;\t}\n\t\n#else\n\tfor( int i = 1; i <= n; i ++ ) for( int j = 1; j <= n; j ++ )\n\t  { if( R[i].b == R[j].t and cross( R[i].l, R[i].r, R[j].l, R[j].r ) ) \n\t      { GRP::addEdge( i, j ); }\n\t    if( R[i].l == R[j].r and cross( R[i].b, R[i].t, R[j].b, R[j].t ) ) \n\t      { GRP::addEdge( i, j ); }\n\t  }\n#endif \n\t\n\tGRP::countTriangle();\n \n\tfor( int i = 1; i <= n; i ++ )\n\t  { VP.push_back( Point( R[i].l, R[i].b, R[i].id ) );\n\t    VP.push_back( Point( R[i].l, R[i].t, R[i].id ) ); \n\t\tVP.push_back( Point( R[i].r, R[i].b, R[i].id ) );\n\t\tVP.push_back( Point( R[i].r, R[i].t, R[i].id ) ); }\n\t\n\tsort( VP.begin(), VP.end() );\n\t\n\tfor( int i = 0; i < (n - 1) * 4; i ++ )\n\t  { if( VP[i] == VP[i + 1] ) if( VP[i] == VP[i + 2] ) if( VP[i] == VP[i + 3] )\n\t      { cnt[ max( VP[i].id, VP[i + 1].id, VP[i + 2].id, VP[i + 3].id ) ] ++; } } \n\n\t\n\tfor( int i = 1; i <= n ; i ++ ) GRP::flush( i );\n\tfor( int i = 1; i <= n ; i ++ ) cout << cnt[i] << \"\\n\";\n\t\n    return 0;\n}\n```\n\n\u4e00\u4e9b\u9898\u5916\u8bdd:\n\n\n\u4e00\u6b21\u5076\u7136\u7684\u673a\u4f1a\u849f\u84bbbzy\u770b\u5230\u4e86\u8fd9\u5230\u98ce\u683c\u53e4\u8001\u7684\u9898\uff0c\u7136\u540e\u65e0\u804a\u7684\u65f6\u5019\u82b110min\u60f3\u4e86\u51fa\u6765\uff0c\u4f46\u5e94\u4e3a\u9000\u5f79\u592a\u4e45\u5b9e\u529b\u9000\u5316\u592a\u4e25\u91cd\u6240\u4ee5\u82b1\u4e86\u51e0\u5929\u624d\u5b9e\u73b0\u5b8c\u5168\u3002\n\n\u4f46\u5374\u5b9e\u5728\u60f3\u4e0d\u660e\u767d\u8fd9\u4e00\u9053\u96be\u5ea6\u6b63\u5e38\u7684\u9898\u4e3a\u4f5511\u5e74\u6765\u65e0\u4eba\u95ee\u6d25\uff0c\u679c\u7136\u8fd8\u662fHNOI\u51fa\u9898\u4eba\u592a\u61d2\u4ece\u4e0d\u653e\u5b98\u65b9\u9898\u89e3\u7684\u7f18\u6545\u5417?\n\n\u629b\u5f00\u8fd9\u4e9b\u56e0\u7d20\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u672c\u9898\u5f88\u7b26\u5408HNOI\u5386\u5e74\u6765\u7684\u98ce\u683c\uff0c\u662f\u4e00\u9053\u4e0d\u9519\u7684\u56fe\u8bba\u9898\u3002\n\n\u4f46\u5728\u4e92\u8054\u7f51\u65f6\u4ee3\u7684\u5927\u6d6a\u6dd8\u6c99\u4e4b\u4e0b\uff0c\u53c8\u6709\u591a\u5c11\u66fe\u7ecf\u7480\u74a8\u7684\u4e8b\u7269\u88ab\u4eba\u6de1\u5fd8\u800c\u6697\u81ea\u8499\u5c18\u5462?\n",
        "postTime": 1591454363,
        "uid": 213388,
        "name": "_bzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4729 \u3010[HNOI2009]\u79ef\u6728\u6e38\u620f\u3011"
    }
]