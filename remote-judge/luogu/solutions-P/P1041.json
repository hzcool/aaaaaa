[
    {
        "content": "\u5982\u679c\u4f60\u521d\u5b66\u641c\u7d22\uff0c\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u65e0\u4f24A\u6389\u641c\u7d22\u771f\u9898\uff1f\n\n\u8ba9\u6211\u4eec\u4ee5\u521d\u5b66\u8005\u7684\u89d2\u5ea6\u8d70\u8fdb\u6539\u9898;\n\n\u8b66\u544a\uff1a\u672c\u7bc7\u9898\u89e3**\u9762\u5411\u521d\u5b66\u8005**\u975e\u6700\u4f18\u89e3\u6216\u975e\u5e38\u89c4\u89e3\u6cd5\uff0c\u795e\u7287\u8bf7\u7ed5\u9053\n\n\u505a\u4e00\u9053\u9898\u9996\u5148\u9700\u8981\u7684\u662f\u9010\u6b65\u5206\u6790:\n\n1. \u9898\u76ee\u7ed9\u5b9a\u4e86\u4e00\u68f5\u6811\uff0c \u6811\u7684\u8282\u70b9 **n <= 300** ,\u540c\u7406\u7684\u53d8\u6570p = n - 1; \n\u6216\u8bb8\u662f\u641c\u7d22\uff1f\n\n2. \u4ece\u8282\u70b91\u5f00\u59cb\u4f20\u67d3\uff0c\u6240\u8c13\u5207\u65ad\u4e00\u6761\u8def\u5f84\uff0c \u4e0d\u96be\u8f6c\u6362\u4e3a\u6807\u8bb0\u5176\u4e2d\u4e00\u9897\u5b50\u6811\n\n3. \u6bcf\u4e2a\u4f20\u67d3\u9636\u6bb5\u4e3a\u6bcf\u4e00\u4e2a\u5df2\u88ab\u6807\u8bb0\u201c\u5f97\u75c5\u201d\u7684\u8282\u70b9\u5411\u4e0b\u4f20\u67d3\uff0c\u4f20\u67d3\u6b21\u6570\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u521a\u597d\u4e3a\u53f6\u8282\u70b9\u52301\u8282\u70b9\u7684\u8ddd\u79bb; \u6216\u8bb8\u662f\u62d3\u6251\uff1f\n\n\u8981\u5bfb\u627e\u6b63\u786e\u7684\u89e3\u9898\u65b9\u6cd5\u603b\u8981\u8fdb\u884c\u4e0d\u65ad\u7684\u601d\u8003\n\n\u9996\u5148\u5148\u601d\u8003\u62d3\u6251\u76f8\u5173\uff0c \u4ece\u672b\u8282\u70b9\u5012\u63a8\u662f\u5426\u662f\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\uff1f\n\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u79cd\u65b9\u6cd5\u5728\u9898\u76ee\u9650\u5236\u4e0b\u662f\u51e0\u4e4e\u4e0d\u53ef\u884c\u7684\uff1b\n\n\uff08\u4e8b\u5b9e\u8bc1\u660e\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u4e00\u5b9a\u91cf\u7684\u9884\u5904\u7406\uff09\n\n\u90a3\u4e48\u5bf9\u6211\u6765\u8bf4\u5c31\u53ea\u6709\u641c\u7d22\u4e00\u6761\u8def\u53ef\u4ee5\u8d70\uff1b\n\n\u7136\u540e\u662f\u8981\u6c42\u8f93\u51fa\u5f53\u4f20\u67d3\u4eba\u6570\u6700\u5c11\u7684\u60c5\u51b5\u4e0b\u7684\u4eba\u6570\uff1b\n\n\u540c\u7406\u4e3a\u672a\u88ab\u4f20\u67d3\u4eba\u6570\u6700\u591a\u65f6\u4f20\u67d3\u4eba\u6570\uff1b\n\n\u90a3\u4e48\u9996\u5148\u6211\u4eec\u8981\u5efa\u7acb\u76f8\u5173\u7684**\u4ee3\u7801\u6846\u67b6**\uff0c\n\n1.\u5148\u4ece\u8f93\u5165\u5f00\u59cb\uff1a\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\u8f93\u5165\u7684\u8fb9\u5e76\u6ca1\u6709\u8bf4\u660e\u662f\u7236\u8282\u70b9\u6307\u5411\u5b50\u8282\u70b9\u6216\u5b50\u8282\u70b9\u6307\u5411\u7236\u8282\u70b9\n\n\u5e94\u8be5\u60f3\u65b9\u6cd5\u5904\u7406\n\n2.dfs\u51fd\u6570\n\n\u4e0d\u96be\u5f97\u5230\uff0c\u4e00\u4e2a\u8282\u70b9\u82e5\u8981\u88ab\u4f20\u67d3\uff0c\u90a3\u4e48**\u4f20\u67d3\u5230\u8be5\u8282\u70b9\u7684\u7b2cx\u4e2a\u4f20\u67d3\u9636\u6bb5\u4e00\u5b9a\u662f\u8be5\u8282\u70b9\u52301\u8282\u70b9\u7684\u8ddd\u79bb**\uff1b\n\n\u63a5\u4e0b\u6765\u662f\u6211\u4e2a\u4eba\u7684\u60f3\u6cd5\uff1a\n\n\u663e\u7136\u4ee5\u8282\u70b9\u4e0b\u6807\u4f5c\u4e3adfs\u4f20\u5165\u53c2\u6570\u6765\u8fdb\u884c\u76f8\u5173\u5904\u7406\u4e0d\u592a\u53ef\u884c\uff1b\n\n\u90a3\u4e48\u4e0d\u5982\u6211\u4eec\u4ee5**\u8ddd\u79bb1\u8282\u70b9\u7684\u8ddd\u79bbx\u4e3a\u4f20\u5165\u53c2\u6570**\n\n\u7136\u540e\u5bf9\u6240\u6709\u8ddd\u79bb1\u8282\u70b9\u8ddd\u79bb\u4e3ax\u7684\u8282\u70b9\u8fdb\u884c\u5904\u7406\n\n\u5373\u4e3a\u9009\u62e9\u4e00\u9897\u5b50\u6811\u8fdb\u884c\u5207\u9664\uff0c \u7136\u540e\u8fdb\u884c\u4e0b\u4e00\u5c42dfs\n\n\u5207\u9664\u8be5\u5b50\u6811\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u4e3a**\u6807\u8bb0\u6240\u6709\u8be5\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u5e76\u7edf\u8ba1\u8282\u70b9\u6570\u91cf**\uff1b\n\n\u540c\u65f6\u8981\u4fdd\u8bc1\u8be5\u5b50\u6811\u7684\u7236\u8282\u70b9\u4e3a\u5728\u524d\u51e0\u5c42\u7684\u9012\u5f52\u4e2d\u672a\u88ab\u5207\u9664\uff1b\n\n\u5f53\u65e0\u5b50\u6811\u53ef\u4ee5\u5207\u9664\u65f6dfs\u51fd\u6570\u53d8\u8d70\u5230\u5c3d\u5934\n\n\u7136\u540e\u8fdb\u884c\u601d\u8003\u4e00\u4e0b\u56de\u6eaf\uff0c \u8fd9\u4e2a\u662f\u8f83\u7b80\u5355\u7684\uff0c\u540c\u7406\u4e0e\u6807\u8bb0\n\n```\nint clean(int i){\n    bol[i] = true;\n    int num = 1;\n    int p = f[i].size();\n    for (int j = 0; j < p; ++j){\n        num += clean(f[i][j]);\n    }\n    return num;\n}\nvoid reclean(int i){\n    bol[i] = false;\n    int p = f[i].size();\n    for (int j = 0; j < p; ++j){\n        reclean(f[i][j]);\n    }\n}\n```\n\n\u6bcf\u6b21\u8fdb\u884c\u4e00\u6b21\u5207\u9664\u5c31\u8981\u4fbf\u5229\u4e00\u904d\u5168\u90e8\u5b50\u8282\u70b9\u663e\u7136\u7f3a\u4e4f\u6548\u7387\uff1b\n\n\u4f46\u5bf9\u4e8e\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u6765\u8bf4\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff1b\n\n\u4e0a\u6587\u4ee3\u7801\u4e2d\u7528\u5230\u4e86\u4e00\u4e2avector\uff0c \u91cc\u9762\u5b58\u7684\u662f\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\n\n\u90a3\u4e48\u56de\u5230\u9898\u76ee\u5934\uff0c \u6211\u4eec\u8be5\u5982\u4f55\u5904\u7406\u4fdd\u8bc1f\u6570\u7ec4\u91cc\u9762\u90fd\u4e3a\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5462\uff1f\n\n\u7528\u53e6\u5916\u4e00\u4e2a\u6570\u7ec4\u5b58\u5165\u8f93\u5165\u7684\u6240\u6709\u8fb9\n\n\u7b80\u5355\u5957\u7528\u4e00\u4e2a\u6700\u77ed\u8def\u6a21\u677f\u7edf\u8ba1\u8ddd\u79bb\n\n\u7136\u540e\u5c06\u6240\u6709\u5408\u6cd5\u7684\u8fb9push\u5165f\u5373\u53ef\uff1b\n\n\u4e3a\u4e86\u8981\u4fdd\u8bc1\u53ef\u4ee5\u6b63\u5e38\u5904\u7406\u8ddd\u79bb\u8282\u70b91\u8ddd\u79bb\u4e3ax\u7684\u5168\u90e8\u8282\u70b9\n\n\u4e5f\u8981\u8fdb\u884c\u7b80\u5355\u7684\u7edf\u8ba1\n\n```\nvoid resolve(int i, int cen){\n    b[cen][cnt[cen]] = i;\n    ++cnt[cen];\n    int p = k[i].size();\n    for (int j = 0; j < p; ++j){\n        if (dis[k[i][j]] == dis[i]+1){\n            resolve(k[i][j], cen+1);\n            f[i].push_back(k[i][j]);\n        }\n    }\n}\n```\n\n\u6700\u540e\u7edf\u8ba1\u5f97\u672a\u88ab\u4f20\u67d3\u4eba\u6570\u6700\u591a\u65f6\u7684\u4eba\u6570\n\n\u8f93\u51fa\u8282\u70b9\u603b\u6570\u51cf\u672a\u88ab\u4f20\u67d3\u4eba\u6570\u83b7\u5f97\u6b63\u89e3;\n\n\u5177\u4f53\u7ec6\u8282\u8be6\u89c1\u4ee3\u7801\n\n\u672c\u4ebaAC\u4ee3\u7801\uff1a(327ms)\n\n```\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<queue>\n#define LL long long\nusing namespace std;\nint n, p, t1, t2, b[305][305], cnt[305], maxx, dis[305];\nbool bol[305], vis[305];\nvector <int> k[305], f[305];\nstruct node{\n    int x, quan;\n    node (int a, int b) : x(a), quan(b){\n    }\n    friend bool operator < (node a, node b){\n        return a.quan > b.quan;\n    }\n};\nint clean(int i){\n    bol[i] = true;\n    int num = 1;\n    int p = f[i].size();\n    for (int j = 0; j < p; ++j){\n        num += clean(f[i][j]);\n    }\n    return num;\n} //\u6807\u8bb0\u90e8\u5206\nvoid reclean(int i){\n    bol[i] = false;\n    int p = f[i].size();\n    for (int j = 0; j < p; ++j){\n        reclean(f[i][j]);\n    }\n} //\u56de\u6eaf\u90e8\u5206\nvoid dfs(int cen, int tot){\n    maxx = max(maxx, tot);\n    for (int i = 0; i < cnt[cen]; ++i){\n        if (!bol[b[cen][i]]){\n            int num = clean(b[cen][i]);\n            tot += num;\n            dfs(cen+1, tot);\n            reclean(b[cen][i]);\n            tot -= num;\n        }\n    }\n} //dfs\u6838\u5fc3\u51fd\u6570\nvoid resolve(int i, int cen){\n    b[cen][cnt[cen]] = i;\n    ++cnt[cen];\n    int p = k[i].size();\n    for (int j = 0; j < p; ++j){\n        if (dis[k[i][j]] == dis[i]+1){\n            resolve(k[i][j], cen+1);\n            f[i].push_back(k[i][j]);\n        }\n    }\n} //\u9884\u5904\u7406\u7b2c\u4e8c\u90e8\u5206\nvoid solve(){\n    priority_queue <node> que;\n    for (int i = 0; i <= n; ++i) dis[i] = 999;\n    dis[1] = 0;\n    que.push(node(1, 0));\n    while (!que.empty()){\n        node temp = que.top();\n        que.pop();\n        int x = temp.x;\n        int p = k[x].size();\n        for (int j = 0; j < p; ++j){\n            if (dis[k[x][j]] > dis[x]+1){\n                dis[k[x][j]] = dis[x]+1;\n                que.push(node(k[x][j], dis[k[x][j]]));\n            }\n        }\n    }\n    resolve(1, 0);\n} //\u6700\u77ed\u8def\u7b97\u6cd5\u8fdb\u884c\u9884\u5904\u7406\n//\u5b9e\u9645\u4e0a\u4ee5\u8282\u70b90\u5f00\u59cb\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u6548\u7387\u66f4\u9ad8\nint main(){\n    scanf(\"%d %d\", &n, &p);\n    for (int i = 0; i < p; ++i){\n        scanf(\"%d %d\", &t1, &t2);\n        k[t1].push_back(t2);\n        k[t2].push_back(t1);\n    }\n    solve();\n    dfs(1, 0);\n    printf(\"%d\", n-maxx);\n    //\u672c\u4eba\u4ee3\u7801\u91cf\u547d\u540d\u8f83\u968f\u610f\u89c1\u8c05pu~\n}\n```\n\n\u90a3\u4e48\uff0c\u8fd9\u9053\u9898\u5c31\u7528\u6700\u66b4\u529b\u5374\u7ec6\u817b\u7684\u5904\u7406\u89e3\u51b3\u4e86\uff1b\n\n\u4ee3\u7801\u4eae\u70b9\u5728\u54ea\u91cc\uff1f\u8981\u600e\u4e48\u5199\uff1f\n\n1. \u5206\u6a21\u5757\u5904\u7406\uff0c\u5373\u4f7f\u53ea\u662f\u7b80\u5355\u7684\u5904\u7406\u6216\u56de\u6eaf\u4e5f\u4e0d\u59a8\u5355\u72ec\u591a\u51fa\u6765\u4e00\u4e2a\u51fd\u6570\u65b9\u4fbf\u8fdb\u884c\u76f8\u5173\u7684\u8c03\u8bd5\n\n2. \u7406\u89e3\u9898\u610f\u5e76\u5c3d\u5feb\u627e\u5230dfs\u51fd\u6570\u6240\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\uff08\u4f8b\u5982\u672c\u9898\u5c31\u8981\u5c3d\u5feb\u4ece\u5e38\u89c4\u65b9\u6cd5\u5c06\u8282\u70b9\u5e8f\u53f7\u4f5c\u4e3a\u4f20\u5165\u53c2\u6570\u4e2d\u8131\u79bb\u51fa\u6765\u5bfb\u627e\u65b0\u7684\u505a\u6cd5\n\n3. \u5982\u679c\u65e0\u6cd5\u627e\u5230\u76f8\u5173\u7684\u5173\u7cfb\uff0c\u4e0d\u59a8\u8fdb\u884c\u4e00\u5b9a\u91cf\u7684\u9884\u5904\u7406\uff08\u4f8b\u5982\u672c\u9898\u4e2d\u8f93\u5165\u8fb9\u672a\u6307\u660e\u662f\u7236\u8282\u70b9\u8fde\u5411\u5b50\u8282\u70b9\u6216\u5b50\u8282\u70b9\u8fde\u5411\u7236\u8282\u70b9\uff0c\u800c\u6211\u53ea\u9700\u8981\u7236\u8282\u70b9\u8fde\u5411\u5b50\u8282\u70b9\u7684\u76f8\u5173\u8fb9\uff0c\u5c31\u9700\u8981\u8fdb\u884c\u9884\u5904\u7406\u5373\u4e3a\u5355\u6e90\u6700\u77ed\u8def\n\n4. \u63d0\u9ad8\u601d\u7ef4\u7684\u6df1\u5ea6\uff0c \u62d3\u5bbd\u601d\u7ef4\u7684\u5bbd\u5ea6",
        "postTime": 1539865890,
        "uid": 114643,
        "name": "RikoHere",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 P1041 \u4f20\u67d3\u75c5\u63a7\u5236"
    },
    {
        "content": "## update 2019/11/8\n\n------------\n\n\u975e\u5e38\u611f\u8c22\u8bc4\u8bba\u533a\u63d0\u51fa\u7684\u8fde\u8fb9\u65b9\u5f0f\u95ee\u9898\uff0c\u4fee\u6539\u7248\u4e5f\u8d34\u8bc4\u8bba\u533a\u4e86\u3002\u6709\u4eba\u770b\u4e0d\u89c1\uff0c\u8fd8\u5728\u55b7\u3002\u73b0\u5728\u66f4\u65b0\u4e00\u4e0b\uff1a\n\n## \u4fee\u6539\u7248\uff1ahttps://www.luogu.org/paste/bc41ih5u\n\n\u5c0f\u849f\u84bb\u5f88\u83dc\uff0c\u5c31\u53d1\u4e2a\u9898\u89e3\u7ed9\u5927\u5bb6\u770b\u770b\u3002\u6709\u4e9b\u5927\u4f6c\u8981\u662f\u5b9e\u5728\u4e0d\u613f\u610f\u770b\u53ef\u4ee5\u79fb\u6b65\u4e0b\u4e00\u7bc7\uff0c\u5c31\u4e0d\u7528\u5728\u8fd9\u91cc\u53d1\u8868\u4ec0\u4e48\u5bb3\u4eba\u4e0d\u6d45\u4e4b\u7c7b\u7684\u8a00\u8bba\u4e86\u3002\n\n\u8981\u662f\u4fee\u6539\u7248\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8bf7\u76f4\u63a5\u79c1\u4fe1\u6216\u5728\u8bc4\u8bba\u533a\u63d0\u51fa\u3002\u6211\u4e00\u5b9a\u4f1a\u66f4\u6539\u7684\u3002\n\n\u5728\u6b64\u5bf9\u9898\u89e3\u51fa\u9505\u8868\u793a\u975e\u5e38\u62b1\u6b49\u3002\n\n------------\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1041)\n\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u4e2a\u9898\u76ee\uff0c\u597d\u50cf\u6b63\u89e3\u4e0d\u597d\u60f3\u7684\u6837\u5b50\u3002\u4f46\u662f\u518d\u770b\u770b\u6570\u636e\u8303\u56f4...\u53d1\u73b0n\u7684\u8303\u56f4\u5f88\u5c0f\uff0c\u53ea\u8981\u6253\u4e2a\u66b4\u529b\u5c31\u597d\u4e86\u3002\n\n\n------------\n\n## \u601d\u8def\n\n\u9898\u76ee\u7ed9\u51fa\u4e00\u68f5\u6811\u3002\u7b2c$i$\u6b65\u62c6\u7684\u4e00\u5b9a\u662f\u7b2c$i$\u5c42\u4e0e\u7b2c$i+1$\u5c42\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u5426\u5219\u4e0d\u662f\u6700\u4f18\uff08\u81ea\u884c\u8bc1\u660e\u5373\u53ef\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u6b21\u62c6\u54ea\u4e00\u4e2a\u8282\u70b9\u4e0e\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u8fde\u8fb9\u3002\n\n\u628a\u6240\u6709\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\u5b58\u4e0b\u6765\uff0c\u4e00\u53f7\u70b9\u5728\u7b2c1\u5c42\uff0c\u679a\u4e3e\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\uff08\u7531\u4e8e1\u53f7\u8282\u70b9\u5df2\u7ecf\u88ab\u611f\u67d3\uff0c\u4ece\u7b2c\u4e8c\u5c42\u5f00\u59cb\u641c\u7d22\u5c31\u53ef\u4ee5\u4e86\uff09\n\n\u5927\u6982\u53ef\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a\n\n- \u5b58\u597d\u4e00\u6574\u68f5\u6811\n\n- \u628a\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u5b58\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\n\n- \u6807\u8bb0\u4ee5$i$\u53f7\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\n\n- \u6807\u8bb0\u4e0e\u56de\u6eaf\n\n- \u66b4\u529b\u641c\u7d22\n\n\u4ee5\u4e0b\u5185\u5bb9\u5206\u5f00\u6765\u8bb2\uff0c\u4f1a\u4e86\u7684\u53ef\u4ee5\u8df3\u8fc7\u3002\n\n------------\n\n## \u6811\u7684\u5b58\u50a8\n\n\u5173\u4e8e\u591a\u53c9\u6811\u7684\u5b58\u50a8\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u7b80\u5355\u6709\u6548\u7684\u65b9\u6cd5\u3002\u8003\u8651\u5982\u4e0b\u4ee3\u7801\uff1a\n\n    struct Node\n    {\n        int father,child[maxn],number;\n    };\n    Node node[maxn];\n    \n$node[i]$\u5b58$i$\u53f7\u8282\u70b9\u7684\u6240\u6709\u4fe1\u606f\uff1a\n\n$father$\u5b58\u7236\u4eb2 \uff1b $child[maxn]$\u5b58\u5b83\u6240\u6709\u7684\u5b69\u5b50 \uff1b $number$\u662f\u5b83\u5b69\u5b50\u7684\u4e2a\u6570\u3002\n\n\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0c\u6211\u4eec\u4e0d\u7528\u62c5\u5fc3\u9020\u6210\u7a7a\u95f4\u8fc7\u591a\u7684\u6d6a\u8d39\u3002\n\n\u7ed3\u6784\u4f53\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8bfb\u5165\u7684\u540c\u65f6\u628a\u6574\u68f5\u6811\u5b58\u597d\u3002\n\n    void Input(void)\n    {\n        scanf(\"%d%d\",&n,&m);\n        for(i=1;i<=n;i++)//\u521d\u59cb\u5316\n        {\n            node[i].number=0;\n            count[i]=1;\n        }\n        for(i=1;i<=m;i++)\n        {\n            scanf(\"%d%d\",&x,&y);\n            if(x>y) swap(x,y);\n            node[y].father=x;\n            node[x].number++;\n            node[x].child[node[x].number]=y;\n        }\n    }\n    \n\n------------\n\n## \u6807\u8bb0\u6df1\u5ea6\n\n\u5982\u679c\u80fd\u591f\u7406\u89e3\uff0c\u6807\u8bb0\u6df1\u5ea6\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u3002\n![](https://cdn.luogu.com.cn/upload/pic/44843.png)\n\n\u5982\u56fe\uff1a\u6211\u4eec\u4ee41\u53f7\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a1 \uff1b \u52192,3\u8282\u70b9\u6df1\u5ea6\u4e3a2 \uff1b 4,5,6,7\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a3 \uff1b 8\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a4\u3002\u8fd9\u68f5\u6811\u4e00\u5171\u67094\u5c42\u3002\n\n\u4ee3\u7801\u7528$deep[i][j]$\u5b58\u7b2c$i$\u5c42\u7b2c$j$\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u3002$deep[i][0]$\u662f\u7b2c$i$\u5c42\u4e00\u5171\u7684\u8282\u70b9\u6570\u3002\n   \n    void Deep(int tree,int now)//\u5f53\u524d\u7684\u8282\u70b9\u6807\u53f7\u662ftree\uff0c\u5c42\u6570\u662fnow\n    {\n        maxx=max(maxx,now);//\u6807\u8bb0\u4e00\u5171\u6709\u51e0\u5c42\n        for(int i=1;i<=node[tree].number;i++)\n        {\n            deep[now][0]++;//\u4e2a\u6570+1\n            deep[now][deep[now][0]]=node[tree].child[i];//\u628a\u8fd9\u4e2a\u8282\u70b9\u653e\u5230\u7b2ci\u5c42\u7684\u6570\u7ec4\u4e2d\n            Deep(node[tree].child[i],now+1);//\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u7236\u8282\u70b9\u7ee7\u7eed\u6807\u8bb0\u5b83\u7684\u513f\u5b50\u3002\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u7b49\u4e8e\u5b83\u7236\u8282\u70b9\u7684\u6df1\u5ea6+1\n        }\n        return ;\n\n\t}\n\n\n------------\n\n## \u5207\u65ad\u95ee\u9898\n\n\u6211\u4eec\u77e5\u9053\uff0c\u53ea\u8981\u4e00\u4e2a\u70b9\u4e0e\u4e0a\u5c42\u70b9\u7684\u4f20\u64ad\u9014\u5f84\u88ab\u5207\u65ad\uff0c\u5373\u8fd9\u4e2a\u70b9\u4e0d\u4f1a\u5f97\u4f20\u67d3\u75c5\uff0c\u90a3\u4e48\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u6574\u4e2a\u5b50\u6811\u90fd\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u5b89\u5168\u3002\n\n\u8fd9\u4e00\u6bb5\u4ee3\u7801\u7528\u6765\u6807\u8bb0$tree$\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e00\u5171\u6709\u591a\u5c11\u8282\u70b9\uff0c\u5b58\u5728$count[tree]$\u4e2d\u3002\n\n    int Count(int tree)\n    {\n        for(int i=1;i<=node[tree].number;i++)\n        {\n            count[tree]+=Count(node[tree].child[i]);\n        }\n        return count[tree];\n    }\n    \n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5207\u65ad\u4e86\u8fd9\u4e2a\u8282\u70b9\uff0c\u76f8\u5e94\u5730\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u90fd\u5e94\u8be5\u88ab\u6807\u8bb0\u3002\uff08tag=1\u8868\u793a\u6807\u8bb0\uff0ctag=0\u8868\u793a\u5220\u53bb\u6807\u8bb0\uff0c\u7528\u4e8e\u56de\u6eaf\uff09\n\n    void work(int tree,int tag)\n    {\n        for(int i=1;i<=node[tree].number;i++)\n        {\n            vis[node[tree].child[i]]=tag;//vis\u6570\u7ec4\u5b58\u6807\u8bb0\n            work(node[tree].child[i],tag);\n        }\n        return ;\n    }\n\n\n------------\n\n## \u641c\u7d22\n\n\u505a\u5b8c\u4e0a\u9762\u8fd9\u4e9b\u94fa\u57ab\u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u6574\u4e2a\u4ee3\u7801\u7684\u6838\u5fc3\uff1a\u641c\u7d22\u4e86\u3002\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u5982\u4e0b\u4ee3\u7801\n\n    void dfs(int now,int cnt) //cnt\u662f\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u88ab\u611f\u67d3\uff0cnow\u662f\u5f53\u524d\u5c42\u6570\n    {\n        if(now==maxx)//\u5982\u679c\u5230\u4e86\u6700\u540e\u4e00\u5c42\uff0c\u66f4\u65b0\u7b54\u6848\n        {\n            ans=min(ans,cnt);//\u5982\u679c\u611f\u67d3\u4eba\u6570\u5c0f\u4e8e\u7b54\u6848\uff0c\u66f4\u65b0\n            return ;\n        }\n        for(int i=1;i<=deep[now][0];i++)//\u679a\u4e3e\u8fd9\u4e00\u5c42\u6240\u6709\u7684\u8282\u70b9\n        {\n            if(vis[deep[now][i]]>0)//\u5982\u679c\u8be5\u8282\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a\u5b89\u5168\uff0c\u76f4\u63a5\u8df3\u8fc7\u4e0b\u9762\u64cd\u4f5c\n                continue;\n            vis[deep[now][i]]=1;//\u5148\u6807\u8bb0\u8fd9\u4e2a\u8282\u70b9\n            work(deep[now][i],1);//\u518d\u6807\u8bb0\u5b83\u7684\u5b50\u6811\n            dfs(now+1,cnt-count[deep[now][i]]);//\u641c\u7d22\u4e0b\u4e00\u5c42\n            vis[deep[now][i]]=0;//\u56de\u6eaf\uff0c\u6e05\u9664\u6807\u8bb0\n            work(deep[now][i],0);\n        }\n    }\n    \n\u4f46\u662f\u63d0\u4ea4\u8fd9\u6bb5\u4ee3\u7801\u7684\u8bdd\u53ea\u80fd\u5f9780\u5206\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u4e00\u68f5\u6811\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/44848.png)\n\n\u5b83\u662f\u4e00\u6761\u94fe\u3002\u6211\u4eec\u7b2c\u4e00\u6b21\u53ea\u80fd\u5207\u65ad1\u53f7\u8282\u70b9\u548c2\u53f7\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u8fd9\u6837\u7b2c\u4e09\u5c42\u6240\u6709\u7684\u8282\u70b9\u5c31\u90fd\u88ab\u6807\u8bb0\u4e86\u3002\u90a3\u4e48\u95ee\u9898\u662f\u4ec0\u4e48\u5462\uff1f\u6839\u672c\u5c31\u641c\u4e0d\u5230\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u5bfc\u81f4\u7b54\u6848\u6839\u672c\u6ca1\u6709\u66f4\u65b0\uff01\n\n\u4e8e\u662f\u6211\u4eec\u4f18\u5316\u4e00\u4e0b\u641c\u7d22\u4ee3\u7801\uff1a\n\n    void dfs(int now,int cnt) \n    {\n        if(now==maxx)\n        {\n            ans=min(ans,cnt);\n            return ;\n        }\n        int f=0;//\u5236\u4f5c\u4e00\u4e2a\u6807\u8bb0\n        for(int i=1;i<=deep[now][0];i++)\n        {\n            if(vis[deep[now][i]]>0)\n            {\n                f++;//\u5982\u679c\u5f53\u524d\u8282\u70b9\u88ab\u6807\u8bb0\uff0cf+1\n                continue;\n            }\n            vis[deep[now][i]]=1;\n            work(deep[now][i],1);\n            dfs(now+1,cnt-count[deep[now][i]]);\n            vis[deep[now][i]]=0;\n            work(deep[now][i],0);\n        }\n        if(f==deep[now][0]) ans=min(ans,cnt);//\u5982\u679c\u8fd9\u4e00\u5c42\u6240\u6709\u7684\u8282\u70b9\u90fd\u88ab\u6807\u8bb0\u4e86\uff0c\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\u3002\n    }\n\n\u8fd9\u6837\uff0c\u8fd9\u9053\u9898\u5c31\u88ab\u5b8c\u7f8e\u5730\u89e3\u51b3\u4e86\u3002\n\n\u4e0a~~\u9ad8\u6e05\u65e0\u6ce8\u91ca\u65b9\u4fbf\u590d\u5236\u7684~~\u4ee3\u7801\uff08\u4e0d\u7528o2 293ms \u98df\u7528o2 106ms\uff0c\u52a0\u5feb\u8bfb\u53ef\u80fd\u66f4\u5feb\u4e00\u70b9\uff09\n\n    #include<cstdio>\n    #include<cmath>\n    #include<iostream>\n    using namespace std;\n    const int maxn=500;\n    int vis[maxn],deep[maxn][maxn],count[maxn];\n    int n,m,i,j,x,y,ans=1006,maxx=0;\n    struct Node\n    {\n        int father,child[maxn],number;\n    };\n    Node node[maxn];\n    void Input(void)\n    {\n        scanf(\"%d%d\",&n,&m);\n        for(i=1;i<=n;i++)\n        {\n            node[i].number=0;\n            count[i]=1;\n        }\n        for(i=1;i<=m;i++)\n        {\n            scanf(\"%d%d\",&x,&y);\n            if(x>y) swap(x,y);\n            node[y].father=x;\n            node[x].number++;\n            node[x].child[node[x].number]=y;\n        }\n    }\n    void Deep(int tree,int now)\n    {\n        maxx=max(maxx,now);\n        for(int i=1;i<=node[tree].number;i++)\n        {\n            deep[now][0]++;\n            deep[now][deep[now][0]]=node[tree].child[i];\n            Deep(node[tree].child[i],now+1);\n        }\n        return ;\n    }\n    int Count(int tree)\n    {\n        for(int i=1;i<=node[tree].number;i++)\n        {\n            count[tree]+=Count(node[tree].child[i]);\n        }\n        return count[tree];\n    }\n    void work(int tree,int tag)\n    {\n        for(int i=1;i<=node[tree].number;i++)\n        {\n            vis[node[tree].child[i]]=tag;\n            work(node[tree].child[i],tag);\n        }\n        return ;\n    }\n    void dfs(int now,int cnt) \n    {\n        if(now==maxx)\n        {\n            ans=min(ans,cnt);\n            return ;\n        }\n        int f=0;\n        for(int i=1;i<=deep[now][0];i++)\n        {\n            if(vis[deep[now][i]]>0)\n            {\n                f++;\n                continue;\n            }\n            vis[deep[now][i]]=1;\n            work(deep[now][i],1);\n            dfs(now+1,cnt-count[deep[now][i]]);\n            vis[deep[now][i]]=0;\n            work(deep[now][i],0);\n        }\n        if(f==deep[now][0]) ans=min(ans,cnt);\n    }\n    int main()\n    {\n        Input();\n        Deep(1,2);\n        Count(1);\n        dfs(2,n);\n        printf(\"%d\",ans);\n        return 0;\n    }\n    \n### \u5982\u679c\u89c9\u5f97\u6709\u6536\u83b7\uff0c\u5c31\u70b9\u4e2a\u8d5e\u5457~",
        "postTime": 1543574688,
        "uid": 87637,
        "name": "\u57fa\u7840\u4e0d\u7262",
        "ccfLevel": 0,
        "title": "\u4f20\u67d3\u75c5\u63a7\u5236  \u9898\u89e3"
    },
    {
        "content": "**\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u7a0d\u5fae\u6709\u70b9\u614c\u3002\u3002\u3002\u3002\u3002\u3002**\n\n**\u4e0b\u9762\u5f00\u59cb\u672c\u7bc7\u9898\u89e3\uff0c\u6b22\u8fce\u5927\u4f6c\u627e\u9519\u3002**\n\n------------\n\n[\u9898\u9762\u5728\u8fd9\u91cc](https://www.luogu.org/problem/P1041)\n\n\u7b2c\u4e00\u6b21\u770b\u9898\u65f6\uff0c\u603b\u6709\u79cd\u56de\u5230\u5c0f\u5b66\u6570\u5b66\u7684\u611f\u89c9\uff0c\u89c9\u5f97\u662f\u6570\u8bba\u3002\n\n~~\u540e\u6765\u770b\u5230n\u7684\u6570\u636e\u8303\u56f4\uff0c\u6781\u6709\u53ef\u80fd\u662f\u641c\u7d22\uff0c\u6253\u5f00\u6807\u7b7e\u4e00\u770b\u679c\u7136\u662f\u3002\u7136\u540e\u5f00\u59cb\u6211\u4eec\u7684\u641c\u7d22\u4e4b\u65c5\u3002~~\n\n\u9996\u5148\u662f\u5efa\u56fe\uff1a\n```\nstruct node{\n\tint u,v;\n}a[100500];\n\nvoid add(int u,int v)\n{\n\ta[++cntt].u=head[u];\n\t\n\thead[u]=cntt;\n\t\n\ta[cntt].v=v;\n}\n\nfor(int i=1;i<=p;i++)\n{\n\tint u,v;\n\t\t\n\tcin>>u>>v;\n\t\t\n\tadd(u,v);\n\t\t\n\tadd(v,u);\n}\n```\n\u4e4b\u540e\u770b\u9898\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6bcf\u6b21\u611f\u67d3\u662f\u540c\u4e00\u5c42\u7684\u4eba\uff0c\u8fd9\u65f6\u5c31\u4f1a\u6709\u4eba\u60f3\u5230\u8d2a\u5fc3\uff0c\u628a\u6bcf\u5c42\u513f\u5b50\u6700\u591a\u7684\u526a\u6389\uff0c\u4f46\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u628a\u8fd9\u79cd\u60f3\u6cd5hack\u6389\uff0c\u4e8e\u662f\u8001\u8001\u5b9e\u5b9e\u7684\u6253\u641c\u7d22\u3002\n\n\u5148\u6765\u4e00\u4e2adfs\uff0c\u9884\u5904\u7406\u4e00\u4e9b\u4e1c\u897f\n```cpp\nvoid dfs(int u,int fa,int deep)\n{\n\tdep[u]=deep;\n\t\n\tson[u]=1;\n\t\n\tfather[u]=fa;\n\t\n\tfor(int i=head[u];i;i=a[i].u)\n\t{\n\t\tint v=a[i].v;\n\t\t\n\t\tif(v==fa)continue;\n\t\t\n\t\tdfs(v,u,deep+1);\n\t\t\n\t\tson[u]+=son[v];//\u9884\u5904\u7406\u6765\u6bcf\u4e2a\u70b9\u7684\u513f\u5b50\u6570\n\t}\n}\n\nfor(int i=1;i<=n;i++) cnt[dep[i]][++tt[dep[i]]]=i;//\u9884\u5904\u7406\u6765\u540c\u4e00\u6df1\u5ea6\u7684\u70b9\uff1b\n```\n\n~~\u603b\u6709\u79cd\u6811\u5256\u7684\u611f\u89c9\uff0c\u6bd5\u7adf\u849f\u84bb\u521a\u521a\u6253\u4e86\u4e24\u5929\u7684\u6811\u5256~~\n\n\u4e4b\u540e\u5c31\u662f\u4e3b\u8981\u7684\u641c\u7d22\u4e86\uff1a\n\n\u6211\u7684\u601d\u60f3\u5c31\u662f\uff0c\u4ece\u7b2c\u4e8c\u5c42\u6df1\u5ea6\u5f00\u59cb\u641c\u7d22\uff0c\u904d\u5386\u6bcf\u5c42\u6df1\u5ea6\u7684\u70b9\uff0c\u628a\u4ed6\u5220\u53bb\uff0c\u7136\u540e\u4e00\u76f4\u5411\u4e0b\u4e00\u5c42\u641c\u7d22\uff0c\u7136\u540e\u627e\u5230\u4e0d\u611f\u67d3\u7684\u6700\u591a\u4eba\u6570\uff0c\u6700\u540e\u62ff\u603b\u4eba\u6570-\u4e0d\u611f\u67d3\u6700\u591a\u4eba\u6570\u5373\u662f\u6700\u7ec8\u7b54\u6848\u3002\n\n```\nvoid dfs2(int u)//\u628a\u4ed6\u7684\u513f\u5b50\uff0c\u5b59\u5b50\uff0c\u66fe\u5b59\u5b50...\u90fd\u6807\u8bb0\u4e0a\u3002\n{\n\tfor(int i=head[u];i;i=a[i].u)\n\t{\n\t\tint v=a[i].v;\n\t\t\n\t\tvis[v]=1;\n\t\t\n\t\tif(v==father[u])continue;\n\t\t\n\t\tdfs2(v);\n\t}\n}\n\nvoid dfs3(int u)//\u56de\u6eaf\n{\n\tfor(int i=head[u];i;i=a[i].u)\n\t{\n\t\tint v=a[i].v;\n\t\t\n\t\tvis[v]=0;\n\t\t\n\t\tif(v==father[u])continue;\n\t\t\n\t\tdfs3(v);\n\t}\n}\n\nvoid dfs1(int deep)\n{\t\n\tfor(int i=1;i<=tt[deep];i++)\n\t{\n\t\tif(vis[father[cnt[deep][i]]]==1)continue;\n\t\t\n\t\tdfs2(cnt[deep][i]);//\u628a\u4ed6\u7684\u513f\u5b50\uff0c\u5b59\u5b50\uff0c\u66fe\u5b59\u5b50...\u90fd\u6807\u8bb0\u4e0a\u3002\n\t\t\n\t\tans+=son[cnt[deep][i]];\n\n\t\tdfs1(deep+1);\n\t\t\n\t\tans-=son[cnt[deep][i]];\n\t\t\n\t\tdfs3(cnt[deep][i]);//\u56de\u6eaf\u6e05\u695a\u6807\u8bb0\u3002\n\n\t}\n\t\n    ans1=max(ans,ans1);//\u627e\u5230\u4e0d\u611f\u67d3\u7684\u6700\u591a\u4eba\u6570\n\t\n}\n```\n\n\u5c31\u8fd9\u6837\u4e0d\u52a0\u526a\u679d\uff0c\u7b80\u5355\u6613\u61c2\u7684AC\u4ee3\u7801\u5c31\u51fa\u73b0\u4e86\u3002\n\n\u5982\u679c\u8981\u95ee\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4e0d\u77e5\u9053\uff0c\u5e0c\u671b\u6709\u4f4d\u5927\u4f6c\u53ef\u4ee5\u7b97\u4e00\u4e0b\uff1b\n\n```\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint dep[4000],father[4000],son[4000],vis[4000],cnt[305][305],ans,n,p,tt[305],cntt,head[201000],ans1;\n\nstruct node{\n\tint u,v;\n}a[100500];\n\nvoid add(int u,int v)\n{\n\ta[++cntt].u=head[u];\n\t\n\thead[u]=cntt;\n\t\n\ta[cntt].v=v;\n}\n\nvoid dfs(int u,int fa,int deep)\n{\n\tdep[u]=deep;\n\t\n\tson[u]=1;\n\t\n\tfather[u]=fa;\n\t\n\tfor(int i=head[u];i;i=a[i].u)\n\t{\n\t\tint v=a[i].v;\n\t\t\n\t\tif(v==fa)continue;\n\t\t\n\t\tdfs(v,u,deep+1);\n\t\t\n\t\tson[u]+=son[v];\n\t}\n}\n\nvoid dfs2(int u)\n{\n\tfor(int i=head[u];i;i=a[i].u)\n\t{\n\t\tint v=a[i].v;\n\t\t\n\t\tvis[v]=1;\n\t\t\n\t\tif(v==father[u])continue;\n\t\t\n\t\tdfs2(v);\n\t}\n}\n\nvoid dfs3(int u)\n{\n\tfor(int i=head[u];i;i=a[i].u)\n\t{\n\t\tint v=a[i].v;\n\t\t\n\t\tvis[v]=0;\n\t\t\n\t\tif(v==father[u])continue;\n\t\t\n\t\tdfs3(v);\n\t}\n}\n\nvoid dfs1(int deep)\n{\t\n\tfor(int i=1;i<=tt[deep];i++)\n\t{\n\t\tif(vis[father[cnt[deep][i]]]==1)continue;\n\t\t\n\t\tdfs2(cnt[deep][i]);\n\t\t\n\t\tans+=son[cnt[deep][i]];\n\n\t\tdfs1(deep+1);\n\t\t\n\t\tans-=son[cnt[deep][i]];\n\t\t\n\t\tdfs3(cnt[deep][i]);\n\n\t}\n\t\n    ans1=max(ans,ans1);\n\t\n}\n\nint main()\n{\n\tcin>>n>>p;\n\t\n\tfor(int i=1;i<=p;i++)\n\t{\n\t\tint u,v;\n\t\t\n\t\tcin>>u>>v;\n\t\t\n\t\tadd(u,v);\n\t\t\n\t\tadd(v,u);\n\t}\n\t\n\tdfs(1,0,1);\n\t\n\tfor(int i=1;i<=n;i++) cnt[dep[i]][++tt[dep[i]]]=i;\n\t\n\tdfs1(2);\n\t\n\tcout<<n-ans1;\n\t\n\treturn 0;\n\t\n}\n```\n\n\u8fd9\u662f\u4e00\u9053\u641c\u7d22\u597d\u9898\uff0c\u5927\u5bb6\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u3002\n\n\u8c22\u8c22\u89c2\u770b\uff0c\u8bf7\u60a8\u7559\u4e0b\u4e00\u4e2a\u8d5e\uff0c\u8c22\u8c22\u3002\n",
        "postTime": 1566903324,
        "uid": 174026,
        "name": "\u6b27\u9e70",
        "ccfLevel": 0,
        "title": "P1041 \u4f20\u67d3\u75c5\u63a7\u5236\u9898\u89e3"
    },
    {
        "content": "\u7ec8\u4e8e\u6211\u89e3\u51b3\u4e86\u8fd9\u9053\u56f0\u6270\u6211\u591a\u5e74\u7684\u641c\u7d22\n\n\u601d\u8def\uff1a1.dfs\u4e00\u904d\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684size\uff0cfa\uff0cdeep\uff1b\n\n2.\u6309\u7167deep\u5c06\u6bcf\u4e2a\u70b9\u5b58\u5165vector\u4e2d\uff1b\n\n3.\u6309\u7167deep\u8fdb\u884cdffs\u6c42\u89e3\u7b54\u6848\uff1b\n\ndffs\u65f6\u5207\u65ad\u67d0\u4e2a\u70b9\u4e0efa\u7684\u8fde\u7ebf\u8868\u793a\u8be5\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u8868\u793a\u4e0d\u88ab\u611f\u67d3\uff0c\u5e76\u51cf\u53bb\u8be5\u70b9size\uff0c\u6bcf\u6b21\u8fdb\u5165\u4e0b\u4e00\u5c42\u65f6\uff0c\u626bfa\uff0c\u5982\u679cfa\u88ab\u6807\u8bb0\uff0c\u5219\u8be5\u70b9\u4e5f\u88ab\u6807\u8bb0\u3002\n\n\u6700\u540edffs\u7ed3\u675f\u7684\u72b6\u6001\u4e3a \u641c\u5230\u6bd4\u6700\u6df1deep\u66f4\u6df1\u7684\u4e00\u5c42\uff0c\u6216\u641c\u5230\u67d0\u5c42\u65f6\u8be5\u5c42\u7684\u70b9\u5df2\u5168\u90e8\u88ab\u6253\u4e0a\u6807\u8bb0\u3002\n\n\u8bb0\u5f55dffs\u51fa\u7684\u6700\u5c0f\u7b54\u6848\uff0c\u8f93\u51fa\n\n\u5b8c\u6574AC \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nint n,m,ans;\nstruct node{\n\tint to,nxt;\n}e[805];\nint head[305],cnt,fa[305],siz[305],deep[305],madep,in[305];\nvector<int> k[305];\ninline void add(int from,int to){\n\te[++cnt]=(node){to,head[from]};\n\thead[from]=cnt;\n}\nvoid dfs(int x,int f,int dep){\n\tfa[x]=f;siz[x]=1;deep[x]=dep;\n\tmadep=max(madep,dep);\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tif(e[i].to!=f){\n\t\t\tdfs(e[i].to,x,dep+1);\n\t\t\tsiz[x]+=siz[e[i].to];\n\t\t}\n}\nvoid dffs(int dep,int now){\n\tif(dep==madep+1){\n\t\tans=min(ans,now);\n\t\treturn ;\n\t}\n\tfor(int i=0;i<k[dep].size();++i)\n\t\tif(in[fa[k[dep][i]]])\n\t\t\tin[k[dep][i]]=1;\n\t\telse in[k[dep][i]]=0;\n\tbool f=1;\n\tfor(int i=0;i<k[dep].size();++i)\n\t\tif(!in[k[dep][i]])f=0;\n\tif(f){\n\t\tans=min(ans,now);\n\t\treturn ;\n\t}\n\tfor(int i=0;i<k[dep].size();++i){\n\t\tif(in[k[dep][i]])continue;\n\t\tin[k[dep][i]]=1;\n\t\tdffs(dep+1,now-siz[k[dep][i]]);\n\t\tin[k[dep][i]]=0;\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,y;i<=m;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}\n\tdfs(1,0,1);\n\tfor(int i=1;i<=n;++i)\n\t\tk[deep[i]].push_back(i);\n\tans=n;\n\tdffs(2,n);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1568375236,
        "uid": 151768,
        "name": "\u6d41\u901d\u4e36",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u505a\u4e86\u51e0\u5929\u5c0f\u6570\u636e\u8303\u56f4\u7684\u9898\uff0c\u6df1\u523b\u7684\u4f53\u4f1a\u5230\u66b4\u641c\u7684\u91cd\u8981\uff0c\u5c0f\u6570\u636e\u91cf\u4e00\u5b9a\u5148\u60f3\u66b4\u641c\u554a\uff01\uff01\uff01\uff08\u5f53\u7136\u5c0f\u5230\u4e00\u5b9a\u5883\u754c\u4e5f\u53ef\u80fd\u662f\u72b6\u538bdp\uff09\n\n\u5c06\u6811\u5206\u5c42\u8003\u8651\u3002\u9996\u5148\uff0c\u6709\u4e00\u4e2a\u660e\u663e\u7684\u8d2a\u5fc3\uff1a\u5f53\u524d\u4f20\u67d3\u5230\u7b2c$i$\u4ee3\uff0c\u4e00\u5b9a\u8981\u5207\u65ad\u7b2c$i$\u4e0e\u7b2c$i+1$\u4ee3\u7684\u5173\u7cfb\uff0c\u6df1\u5ea6\u518d\u6df1\u5c31\u4e0d\u591f\u4f18\u4e86\uff0c\u6bd4\u5982\u6837\u4f8b\u4e2d\u7b2c\u4e00\u6b21\u8981\u5207\u65ad1\u548c3\u4f46\u4e0d\u80fd\u4e143\u548c6\u3002\u4e8e\u662f\u641c\u7d22\u7684\u6846\u67b6\u4e5f\u5c31\u6709\u4e86\uff1a\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u5c42\u5207\u65ad\u8c01\uff0c\u5230\u6700\u540e\u4e00\u5c42\u7edf\u8ba1\u7b54\u6848\u3002\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\u5c31\u662f\u8981\u662f\u7236\u4eb2\u5b89\u5168\u4e86\uff0c\u5b69\u5b50\u4e5f\u4e00\u5b9a\u5b89\u5168\uff0c\u6545\u4e5f\u8981\u6253\u4e0atag\u3002\u526a\u679d\u7684\u8bdd\u4e5f\u6ca1\u4ec0\u4e48\uff0c\u5957\u8def\u7684\u52a0\u4e00\u4e2a\u6700\u4f18\u5316\u526a\u679d\uff0c\u522b\u7684\u7384\u5b66\u7684\u4e5f\u6ca1\u4ec0\u4e48\u5fc5\u8981\u3002\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\nint getint(){\n    int x=0,f=1; char ch=getchar();\n    while(ch>'9'||ch<'0'){if(ch=='-')f=-f; ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0'; ch=getchar();}\n    return f*x;\n}\nconst int MAXN=555;\nconst int inf=0x3f3f3f3f;\nvector <int> g[MAXN],stor[MAXN];\nint ans=inf,n,p,maxdep,fa[MAXN],tag[MAXN],deep[MAXN];\nvoid build(){//build up the tree\n    queue <int> q;\n    q.push(1),stor[1].pb(1),deep[1]=1;\n    while(!q.empty()){\n        int cur=q.front();\n        maxdep=max(maxdep,deep[cur]);\n        q.pop();\n        for(int i=0;i<g[cur].size();++i)\n            if(g[cur][i]!=fa[cur]){\n                deep[g[cur][i]]=deep[cur]+1;\n                fa[g[cur][i]]=cur;\n                stor[deep[g[cur][i]]].pb(g[cur][i]);\n                q.push(g[cur][i]);\n            }\n    }\n}\nvoid dfs(int st,int sum){\n    if(sum>ans) return;\n    if(st>maxdep){\n        ans=min(ans,sum);\n        return;\n    }\n    int tmp=0;\n    for(int i=0;i<stor[st].size();++i)//push tag if fa has tag \n        if(tag[fa[stor[st][i]]])\n            tmp++,tag[stor[st][i]]=st;\n    if(tmp==stor[st].size()){\n        ans=min(ans,sum);\n        return;\n    }\n    for(int i=0;i<stor[st].size();++i){//try protect each node\n        if(tag[stor[st][i]]) continue;\n        tag[stor[st][i]]=true;\n        dfs(st+1,sum+stor[st].size()-tmp-1);\n        tag[stor[st][i]]=false;//\u6ce8\u610fpost\u65f6\u8fd8\u539fpre\u65f6\u7684\u64cd\u4f5c \n    }\n    for(int i=1;i<=n;++i)//\u6ce8\u610fpost\u65f6\u8fd8\u539fpre\u65f6\u7684\u64cd\u4f5c \n        if(tag[i]==st) tag[i]=0;    \n}\nint main(){\n    n=getint(),p=getint();\n    for(int i=1;i<=p;++i){//read in\n        int f=getint(),s=getint();\n        g[f].pb(s),g[s].pb(f);\n    }\n    build();dfs(2,1);\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1509664744,
        "uid": 34893,
        "name": "majt",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "### \u6b63\u89e3\u641c\u7d22, \u5176\u4ed6\u9898\u89e3\u5df2\u7ecf\u8bb2\u89e3\u7684\u5f88\u8be6\u7ec6\u4e86\n\u7136\u800c\u53ef\u80fd\u6709\u4e00\u4e9b\u540c\u5b66\u548c\u6211\u4e00\u6837\u4e00\u5f00\u59cb\u89c9\u5f97\u80fd\u7528DP\u505a\u7684...\u63a8\u5b8c\u9012\u63a8\u5f0f, \u6253\u5b8cDP\u53ea\u670940, \u7136\u540e\u4e5f\u6ca1\u6709\u627e\u51fa\u9519\u8bef. \u6211\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u5c31\u6765\u8bf4\u4e00\u4e0b\u8fd9\u4e2aDP\u7684\u601d\u8def\u548c\u9519\u8bef.\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u61c2\u4e86DFS\u601d\u8def, \u53ef\u4ee5\u7406\u89e3\u4e00\u4e0b\u9519\u8befDP\u7684\u601d\u60f3, \u5982\u679c\u770b\u4e0d\u51fa\u9519\u8bef, \u5f88\u53ef\u80fd\u662f\u4f60\u5bf9\u8fd9\u4e2a\u9898\u7684\u9898\u610f\u8fd8\u4e0d\u591f\u6e05\u695a.\n\n### \u5206\u6790\n\n\u5148\u5efa\u56fe, \u662f\u4ee51\u8282\u70b9\u4e3a\u6839\u7684\u4e00\u68f5\u6811.\n\n\u6211\u4eec\u5f00\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4f, \u4e0b\u6807\u4ee3\u8868\u8282\u70b9\u7f16\u53f7. \u8bb0\u5f55\u4f20\u67d3\u5230\u8fd9\u4e2a\u70b9\u6700\u5c11\u518d\u4f20\u67d3\u7ed9\u51e0\u4e2a\u4eba.\n\n\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba, \u5148\u4e0d\u8003\u8651\u513f\u5b50\u8282\u70b9\u8fd8\u4f1a\u7ee7\u7eed\u4f20\u67d3\u7684\u60c5\u51b5. \u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u6709\u513f\u5b50\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u513f\u5b50, \u90a3\u4e48\u6700\u5c11\u518d\u4f20\u67d30\u4e2a\u4eba. \u5426\u5219\u4f20\u67d3\u8282\u70b9\u6570\u5c31\u662f\u513f\u5b50\u6570 - 1.\n\n\u5982\u679c\u513f\u5b50\u8282\u70b9\u8fd8\u4f1a\u7ee7\u7eed\u4f20\u67d3, \u90a3\u4e48\u6211\u4eec\u5c31\u5207\u65ad\u6c42\u51fa\u7684f\u503c\u6700\u5927\u7684\u90a3\u4e2a. \n\n$$ f[now] = (\\sum_i^{i\u2208sons[now]}f[i] + 1) - (\\max_i^{i\u2208sons[now]}f[i]) - 1 $$\n\u8fd9\u4e2a\u5f0f\u5b50\u6211\u5b9e\u5728\u4e0d\u4f1a\u5199\u7684\u66f4\u597d\u4e86, sons\u4ee3\u8868\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50.\n\n\u770b\u61c2\u7684\u8bdd\u5e94\u8be5\u5f88\u5feb\u5c31\u80fd\u53d1\u73b0DP\u7684\u9519\u8bef\u5728\u54ea.\u7ed3\u5408\u8fd9\u4e24\u4e2a\u8bf4\u660e:\n> \u8fd9\u79cd\u75be\u75c5\u7684\u4f20\u64ad\u6709\u5468\u671f\u6027\uff0c\u5728\u4e00\u4e2a\u75be\u75c5\u4f20\u64ad\u5468\u671f\u4e4b\u5185\uff0c\u4f20\u67d3\u75c5\u5c06\u53ea\u4f1a\u611f\u67d3\u4e00\u4ee3\u60a3\u8005\uff0c\u800c\u4e0d\u4f1a\u518d\u4f20\u64ad\u7ed9\u4e0b\u4e00\u4ee3\n\n> \u4ee5\u81f4\u4ed6\u4eec\u5728\u4e00\u4e2a\u75be\u75c5\u4f20\u64ad\u5468\u671f\u5185\uff0c\u53ea\u80fd\u8bbe\u6cd5\u5207\u65ad\u4e00\u6761\u4f20\u64ad\u9014\u5f84\n\n\u5355\u72ec\u770b\u597d\u50cf\u8fd8\u662f\u627e\u4e0d\u51fa\u8fd9\u4e2aDP\u7684\u9519\u8bef.\u7136\u540e\u6211\u7ed9\u51fa\u4e00\u5f20\u56fe.\n\n![\u4f8b](https://cdn.luogu.com.cn/upload/pic/57355.png)\n\n\u6b63\u89e3\u5e94\u8be5\u662f4, \u7136\u540eDP\u7adf\u8dd1\u51fa\u66f4\u4f18\u89e33...\u5176\u5b9e\u662f\u56e0\u4e3a\u4ed6\u5728\u540c\u4e00\u4e2a\u75be\u75c5\u4f20\u64ad\u5468\u671f\u5185\u5207\u65ad\u4e86\u4e24\u6761.DP\u5c06\u4f1a\u5148\u5207\u65ad2, \u7136\u540e\u5207\u65ad7\u548c8. \u7136\u800c7\u548c8\u5728\u540c\u4e00\u4e2a\u4f20\u64ad\u5468\u671f\u5185, \u6240\u4ee5\u4e0d\u80fd\u540c\u65f6\u5207\u65ad. \n\n\u8fd9\u5c31\u662fDP\u7684\u9519\u8bef, \u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42. \u7136\u540e\u5c31\u53ea\u80fd\u8003\u8651\u641c\u7d22, \u56e0\u4e3aDP\u7684\u542f\u53d1, \u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u6309\u6df1\u5ea6\u6765\u641c\u7d22\u4e86.\n\n### \u4ee3\u7801\n\n\u9519\u8befDP\u4ee3\u7801(40\u5206):\n\n```cpp\n#include <iostream>\n#include <stdio.h>\nusing namespace std;\nint n, p, sums, f[301], head[301], edptr= 1;\nint tmpx, tmpy;\nstruct edge {\n    int to, nexty;\n} eds[1001];\nvoid add(int a, int b) {\n    eds[edptr].to= b, eds[edptr].nexty= head[a];\n    head[a]= edptr++;\n    return;\n}\nvoid dp(int nown, int fa) {\n    int sons= 0, maxs= 0, tot= 0;\n    for(int i= head[nown], to; i; i= eds[i].nexty) {\n        to= eds[i].to;\n        if(to == fa) continue;\n\n        dp(to, nown);\n        ++sons, maxs= max(maxs, f[to]), tot+= f[to];\n    }\n    if(sons >= 2) f[nown]= tot - maxs + sons - 1;\n    return;\n}\nint main() {\n    cin >> n >> p;\n    for(int i= 0; i < p; i++) {\n        cin >> tmpx >> tmpy;\n        add(tmpx, tmpy), add(tmpy, tmpx);\n    }\n    dp(1, -1);\n    cout << f[1] + 1 << endl;\n    return 0;\n}\n```\n\n\u6b63\u89e3\u641c\u7d22\u4ee3\u7801(100\u5206):\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <vector>\nusing namespace std;\nint n, p, head[301], edptr= 1;\nint tmpx, tmpy;\nstruct edge {\n    int to, nexty;\n} eds[1001];\nvoid add(int a, int b) {\n    eds[edptr].to= b, eds[edptr].nexty= head[a];\n    head[a]= edptr++;\n    return;\n}\nint dep[301], f[301], cutd[301];\nvector< int > node[302];\nvoid cut(int nown, int s) {\n    cutd[nown]= s;\n    for(int i= head[nown], to; i; i= eds[i].nexty) {\n        to= eds[i].to;\n        if(to != f[nown]) cut(to, s);\n    }\n    return;\n}\nvoid dfs1(int nown, int fa) {\n    dep[nown]= dep[fa] + 1, f[nown]= fa;\n    node[dep[nown]].push_back(nown);\n    for(int i= head[nown], to; i; i= eds[i].nexty) {\n        to= eds[i].to;\n        if(to != fa) dfs1(to, nown);\n    }\n    return;\n}\nint ans= 0x3f3f3f3f;\nvoid dfs2(int deep, int cost) {\n    if(cost >= ans) return;\n    int notsolve= 0;\n    for(int i= 0; i < (int)node[deep].size(); i++)\n        if(!cutd[node[deep][i]]) ++notsolve;\n    if(!notsolve) {\n        ans= cost;\n        return;\n    }\n    for(int i= 0; i < (int)node[deep].size(); i++) {\n        if(cutd[node[deep][i]]) continue;\n        cut(node[deep][i], 1);\n        dfs2(deep + 1, cost + notsolve - 1);\n        cut(node[deep][i], 0);\n    }\n    return;\n}\nint main() {\n    cin >> n >> p;\n    for(int i= 0; i < p; i++) {\n        cin >> tmpx >> tmpy;\n        add(tmpx, tmpy), add(tmpy, tmpx);\n    }\n    dfs1(1, 0), dfs2(2, 1);\n    cout << ans << endl;\n    return 0;\n}\n```\n",
        "postTime": 1556111964,
        "uid": 109815,
        "name": "Ciyang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "## \u8fd9\u662f\u4e00\u7bc7\u4e71\u641e\uff08\u968f\u673a\u5316\uff09\u9898\u89e3\u3002\n\n\u4e00\u4e2a\u663e\u7136\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\uff0c\u6211\u4eec\u4f18\u5148\u9009\u62e9\u8054\u901a\u5b69\u5b50\u6700\u591a\u7684\u70b9\uff0c\u628a\u5b83\u4e0e\u6839\u7684\u8fb9\u5220\u53bb\u3002\n\n\u53ef\u4ee5\u6784\u9020\u4e00\u7ec4\u6570\u636e\u8bc1\u660e\u5b83\u7684\u9519\u8bef\u6027\u3002\u60f3\u8c61\u6709\u4e00\u6761\u975e\u5e38\u957f\u7684\u94fe\uff0c\u4f46\u6709\u4e2a\u4e00\u4e2a\u6df1\u5ea6\u8f83\u5c0f\uff0c\u5374\u6bd4\u8f83\"\u5bbd\"\u7684\u70b9\u96c6\u3002\u8fd9\u4e2a\u8d2a\u5fc3\u4f1a\u4f18\u5148\u628a\u94fe\u4e0e\u6839\u7684\u8def\u5f84\u5220\u53bb\uff0c\u4f46\u4e00\u4e2a\u66f4\u4f18\u7684\u7b56\u7565\u662f\u628a\"\u5bbd\"\u7684\u70b9\u96c6\u5220\u53bb\uff0c\u5ef6\u540e\u51e0\u6b21\u5220\u53bb\u94fe\u3002\u56e0\u4e3a\u94fe\u6bcf\u6b21\u53ea\u4f1a\u6269\u5c551\u3002\n\n\u6240\u4ee5\u8003\u8651\u4e71\u641e\u3002\u501f\u9274\u968f\u673a\u5316\u7684\u601d\u8def\uff0c\u6709\u4e00\u4e2a\u8f83\u5927\u6982\u7387\u9009\u53d6\u5b50\u5b59\u8282\u70b9\u591a\u7684\u70b9\uff0c\u6709\u4e00\u4e2a\u8f83\u5c0f\u6982\u7387\u9009\u53d6\u5176\u4ed6\u7684\u70b9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5c42\u7684\u70b9x1,x2,x3..\uff0c\u628a\u5b83\u4eec\u5168\u90e8\u62ff\u51fa\u6765\uff0c\u5b50\u8282\u70b9y1,y2,y3...\u653e\u5165\u4f18\u5148\u961f\u5217\u4e2d\u3002\u6709\u8f83\u5927\u6982\u7387\u9009\u62e9y\u4e2d\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684y\uff0c\u5c06\u5b83\u4e0ex\u7684\u8fd9\u6761\u8def\u5f84\u5220\u6389\u3002\n\u518d\u628a\u5176\u4ed6\u7684y\u52a0\u5165\u961f\u5217\u3002\u91cd\u590d\u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u6bcf\u6b21\u9009\u53d6\u4e4b\u524d\u4f18\u5148\u961f\u5217\u90fd\u8981\u6e05\u7a7a\u3002\n\n\u5173\u4e8e\u968f\u673a\u5316\u6b21\u6570\uff0c\u5927\u6982\u968f\u673a\u4e2a500\u52301000\u6b21\u5c31\u53ef\u4ee5\u7a33\u7a33\u8fc7\u6389\u8fd9\u4e00\u9898\u4e86\u3002(\u6570\u636e\u592a\u6c34QAQ)\n\n\u53e6\u5916\u5410\u69fd\uff1a\u6211\u4e00\u5f00\u59cb\u60f3\u4e86\u4e2adp\u601d\u8def\uff0c\u715e\u6709\u5176\u4e8b\u7684\u63a8\u4e86\u4e00\u4f1a\u3002\u8fd8\u8ba4\u4e3a\u5f88\u5bf9(\u5173\u952e\u662f\u6ca1\u6784\u9020\u51fa\u80fd\u5361\u6389\u6211\u7684\u6570\u636e)\u3002\u3002\u6700\u540e\u53d1\u73b0\u9519\u6389\u4e86\u3002\u56e0\u4e3a\u4e00\u822c\u7684dp\u72b6\u6001\u5e76\u65e0\u6cd5\u4fdd\u8bc1\u540c\u4e00\u6df1\u5ea6\u7684\u8fb9\u53ea\u4f1a\u88ab\u9009\u4e00\u6b21\u3002\n\n\u4ee3\u7801\u6709\u70b9\u4e71\ncodes:\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstdlib>\n#include<ctime>\nusing namespace std;\ntypedef pair<int,int> PII;\npriority_queue<PII,vector<PII> >q;\nconst int N=305;\nint dis[N],nxt[N<<1],v[N<<1],head[N],tot;\nint siz[N],b[N],cnt,f[N];\nint n,p,cur,ans=333;\ninline void add(int x,int y){\n    v[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\ninline void dfs(int x,int fa){\n    siz[x]=1;\n    for(int i=head[x];i;i=nxt[i]){\n        int y=v[i];\n        if(y!=fa){\n            f[y]=x;\n            dfs(y,x);\n            siz[x]+=siz[y];\n        }\n    }\n}\nqueue<int>Q;\ninline void bfs(int s){\n    while(!Q.empty())Q.pop();\n    Q.push(s);\n    while(!Q.empty()){//\u6309\u5c42\u6b21\u6269\u5c55\n        cnt=0;\n        while(!q.empty())q.pop();\n        while(!Q.empty()){//\u62ff\u51fa\u540c\u4e00\u5c42\u7684\u6240\u6709\u70b9\n            int x=Q.front();Q.pop();cur++;\n            for(int i=head[x];i;i=nxt[i]){\n                int y=v[i];//\u8003\u8651\u5b50\u8282\u70b9\uff0c\u52a0\u5165\u4f18\u5148\u961f\u5217\n                if(y==f[x])continue;\n                q.push(make_pair(siz[y],y));\n                b[++cnt]=y;\n            }\n        }\n        int t;\n        if(!q.empty()){//\u4e71\u641e\u8fc7\u7a0b\uff0c\n            int y=q.top().second;q.pop();\n            if(!q.empty()&&(rand()%N==0)){t=q.top().second;q.pop();}//\u8f83\u5c0f\u6982\u7387\u9009\u53d6\u6b21\u4f18\u89e3\n            else t=y;\n        }\n        for(int i=1;i<=cnt;++i){\n            int y=b[i];//\u628a\u5b50\u8282\u70b9\u7684\u4e00\u5c42\u52a0\u5165\u961f\u5217\u3002\n            if(y!=t)Q.push(y);\n        }\n    }\n}\nint main(){\n\tsrand(20181108);\n    scanf(\"%d%d\",&n,&p);\n    for(int i=1;i<=p;++i){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs(1,1);//\u9884\u5904\u7406\u5b50\u6811\u5927\u5c0f\u4e0e\u6df1\u5ea6\n    for(int i=1;i<=1000;++i){//\u505a\u4ed6\u4e2a1000\u6b21\n        cur=0;\n        bfs(1);\n        ans=min(ans,cur);\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n@laduiw \u662f\u4ed6\uff0c\u662f\u4ed6\u5c31\u662f\u4ed6\u5207\u6389\u4e86\u8fd9\u9898\u3002",
        "postTime": 1541659664,
        "uid": 27370,
        "name": "Chasingdreams",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u672c\u6765\u6709\u8d2a\u5fc3\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u597d\u50cf\u4e0d\u600e\u4e48\u53ef\u4ee5\u3002\n\u8d2a\u5fc3\u7684\u60f3\u6cd5\u53ef\u4ee5\u5f88\u5bb9\u6613\u4e3e\u51fa\u53cd\u4f8b\uff1a\u4e00\u68f5\u5b50\u6811\u5f88\u5927\u4f46\u662f\u53ea\u6709\u4e00\u6839\u6811\u679d\uff0c\u90a3\u4e48\u53ef\u4ee5\u5148\u5207\u65ad\u5176\u4ed6\u5b50\u6811\u7684\u4f20\u64ad\uff0c\u6700\u540e\u53ea\u9700\u8981\u4e00\u6b65\u5c31\u53ef\u4ee5\u7ec8\u6b62\u8fd9\u68f5\u5b50\u6811\u7684\u4f20\u64ad\u3002\n\u7531\u4e8e\u9898\u76ee\u91ccn<=300\uff0c\u4f30\u6478\u7740\u66b4\u529b\u4e0d\u4f1a\u51fa\u4e8b\u3002\n```cpp\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint n,p,t[309][309],a,b,d[309][309];\n//n\u4e3a\u4eba\u6570\u3002\n//t\u4e3a\u6811\u3002\n//d\u4e3a\u6811\u7684\u6bcf\u4e00\u5c42\u7684\u4eba\u3002\nbool f[309];\n//f\u8868\u793a\u6bcf\u4e2a\u4eba\u662f\u5426\u88ab\u611f\u67d3,0\u4e3a\u611f\u67d3,1\u4e3a\u6ca1\u611f\u67d3\u3002\nvoid deep(int n,int k);\nint clr(int n,bool k);\nint get(int n,int ans);\nint main()\n{\n    cin>>n>>p;\n    for(int i=1;i<=p;i++){\n        cin>>a>>b;\n        if(a>b)\n            swap(a,b);\n        t[a][++t[a][0]]=b;\n    }\n    deep(1,1);\n    cout<<get(2,n);\n    return 0;\n}\n\nvoid deep(int n,int k)\n{\n    d[k][++d[k][0]]=n;\n    if(!t[n][0])return;\n    for(int i=1;i<=t[n][0];i++){\n        deep(t[n][i],k+1);\n    }\n    return;\n}\nint clr(int n,bool k)\n{\n    //k=1\u4e3a\u6062\u590d\u611f\u67d3\u3002\n    if(k)f[n]=0;\n    else f[n]=1;\n    if(!t[n][0])return 1;\n    int ans=1;\n    for(int i=1;i<=t[n][0];i++){\n        ans+=clr(t[n][i],k);\n    }\n    return ans;\n}\nint get(int n,int ans)\n{\n    if(!d[n][0])return ans;\n    int g=1000000,tmp;\n    bool q=0;\n    for(int i=1;i<=d[n][0];i++){\n        if(f[d[n][i]])continue;\n        //\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u88ab\u611f\u67d3\u3002\n        q=1;\n\t\t//\u5982\u679c\u8fd9\u5c42\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u4f20\u64ad\u6807\u8bb0q\u4e3a1\u3002\n        tmp=clr(d[n][i],0);\n        //\u5207\u65ad\u70b9n\u4e0e\u4e0a\u4e00\u4e2a\u70b9\u7684\u94fe\u63a5\u3002\n\t\t//\u6807\u8bb0n\u7684\u5b50\u6811\u4e3a\u672a\u611f\u67d3\u72b6\u6001\u3002\n\t\t//tmp\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3002\n        g=min(get(n+1,ans-tmp),g);\n        //\u7ee7\u7eed\u4f20\u64ad\u3002\n        clr(d[n][i],1);\n        //\u6062\u590d\u94fe\u63a5\u3002\n\t\t//\u6807\u8bb0n\u7684\u5b50\u6811\u4e3a\u611f\u67d3\n    }\n    if(!q)return ans;\n\t//\u5982\u679c\u8fd9\u5c42\u4e3a\u7a7a\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u73b0\u5728\u611f\u67d3\u7684\u4eba\u6570\n    return g;\n}\n\n```\n\u66b4\u529b\u6a21\u62df\u5c31\u8fc7\u4e86\uff01",
        "postTime": 1527141522,
        "uid": 66548,
        "name": "onglu",
        "ccfLevel": 6,
        "title": "[\u9898\u89e3]P1041\uff1a\u4f20\u67d3\u75c5\u63a7\u5236"
    },
    {
        "content": "\u5f00\u59cb\u60f3\u5230\u7684\u7b97\u6cd5\u662f\u8d2a\u5fc3\n\n\u5f00\u4e00\u4e2a\u6570\u7ec4g\uff0cg[i]\u8868\u793a\u5982\u679c\u8fd9\u6b21\u4e0d\u5904\u7406i\u8fd9\u4e2a\u8282\u70b9\u800c\u662f\u4f20\u67d3\u5230\u5b83\u7684\u5b50\u8282\u70b9\u518d\u5904\u7406\uff0c\u8fd9\u4e2a\u5b50\u6811\u6700\u5c11\u611f\u67d3\u591a\u5c11\u4eba\n\n\u4e00\u5f00\u59cb\u8bd5\u4e86\u51e0\u4e2a\u56fe\u90fd\u53ef\u4ee5\n\n\u7136\u800c\u6211\u753b\u51fa\u4e86\u8fd9\u4e2a\u56fe\n\n\u5047\u8bbe\u7b2c\u4e09\u5c42\u4ece\u5de6\u6570\u524d\u4e09\u4e2a\u8282\u70b9\u6bcf\u4e2a\u90fd\u6709\u65e0\u6570\u4e2a\u5b50\u7ed3\u70b9\n\n\u90a3\u4e48\u6b63\u89e3\u663e\u800c\u6613\u89c1\u662f\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u5207\u65ad\n\n\u7136\u800c\u56e0\u4e3a\u4ed6\u4eec\u7684\u7ed3\u6784\u90fd\u662f\u4e00\u4e2a\u5b50\u7ed3\u70b9\u5de8\u591a\u7684\u7ed3\u70b9\u4e0a\u9762\u6302\u4e86\u4e00\u4e2a\u94fe\n\n\u6240\u4ee5\u4ed6\u4eec\u7684g[i]\u90fd\u662f1\n\n\u7136\u800c\u6309\u7167\u6211\u7684\u8d2a\u5fc3\u529e\u6cd5\u5148\u5904\u7406\u53f3\u8fb9\u7b2c\u4e00\u4e2a\n\n\n\u4f46\u662f\u5de6\u8fb9\u7684\u4e09\u4e2a\u5df2\u7ecf\u963b\u6b62\u4e0d\u4e86\u5b83\u4f20\u64ad\u5230\u6700\u4e0b\u5c42\u4e86\n\u6240\u4ee5\u8981\u91cd\u65b0\u8003\u8651\u7b97\u6cd5\n\n\u7136\u540e\u53c8\u60f3\u5230\u4e86dp\uff0c\u4f46\u662f\u6bcf\u4e2a\u5b50\u6811\u5207\u65ad\u51e0\u6b21\uff0c\u4ec0\u4e48\u65f6\u5019\u5207\u65ad\uff0c\u53ef\u80fd\u5148\u5207\u65ad\u4e00\u6b21\u8fc7\u51e0\u6b21\u518d\u5207\u65ad\uff0c\u6240\u4ee5\u5f88\u96be\u5206\u72b6\u6001\n\u7136\u540e\u641c\u7d22\uff1f\n\n\u7136\u800c\u641c\u7d22\u611f\u67d3\u591a\u5c11\u4eba\u663e\u7136\u662f\u4e0d\u597d\u5b9e\u73b0\u7684\n\n\u6240\u4ee5\u6211\u7a81\u7136\u60f3\u5230\u4e86\u53ef\u4ee5\u5012\u7740\u6c42\u89e3\n\n\u5207\u65ad\u4e00\u4e2a\u7ed3\u70b9\u4e0a\u9762\u7684\u90a3\u6761\u8def\u5c31\u80fd\u628a\u8fd9\u6761\u7ed3\u70b9\u4ee5\u53ca\u5b50\u6811\u4e0a\u7684\u7ed3\u70b9\u5168\u90e8\u4fdd\u62a4\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6700\u591a\u80fd\u4fdd\u62a4\u591a\u5c11\u4e2a\u7ed3\u70b9\n\n\u7136\u540e\u60f3\u5230\u8fd9\u95ee\u9898\u5c31\u89e3\u51b3\u4e00\u534a\u4e86\uff01\n\n\u5148\u5efa\u6811\n\n\u7136\u540e\u7528sum\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u548c\nm\u4e3a\u6700\u6df1\u7684\u5c42\u6570\n\n\u7136\u540e\u8fd8\u6709\u4fdd\u5b58\u6bcf\u4e00\u5c42\u7684\u7ed3\u70b9\u662f\u54ea\u4e9b\n\nf[i]\u8868\u793ai\u7ed3\u70b9\u4e0a\u9762\u7684\u90a3\u6761\u8fb9\u662f\u4e0d\u662f\u88ab\u5207\u65ad\u4e86\n\n\u7136\u540e\u628a\u6839\u8282\u70b91\u4f5c\u4e3a\u7b2c\u4e00\u5c42\n\n\u4ece\u7b2c\u4e8c\u5c42\u5f00\u59cb\u641c\u7d22\n\n\u5207\u65ad\u7b2ci\u4e2a\u7ed3\u70b9\u5c31\u628af[i]\u6539\u4e3atrue(i\u7ed3\u70b9\u4f4d\u4e8e\u8be5\u5c42)\n\n\u7136\u800c\u4e00\u5f00\u59cb\u6211\u7684\u60f3\u6cd5\u662f\u5982\u679c\u641c\u7d22\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u5982\u679cf\u4e3atrue\u90a3\u4e48\u5b83\u7684f\u4e5f\u53d8\u6210true\n\n\u4f46\u662f\u6211\u53d1\u73b0\u8fd9\u6837\u5f88\u96be\u56de\u6eaf\n\n\u6240\u4ee5\u5c31\u589e\u52a0\u4e00\u4e2a\u795e\u4f3c\u5e76\u8336\u51e0\u7684fin\u627e\u7239\u51fd\u6570\n\n\u5982\u679c\u5b83\u5230\u6811\u6839\u7684\u8def\u4e0a\u6709f\u4e3atrue\u7684\u70b9\n\n\u8bf4\u660e\u5f53\u524d\u72b6\u6001\u4e0b\u5b83\u5df2\u7ecf\u88ab\u4fdd\u62a4\u4e86\uff0c\u5c31\u8df3\u8fc7\u5b83\n\n\u7136\u540e\u6ca1\u6709\u88ab\u4fdd\u62a4\u7684\u7ed3\u70b9\u5c31\u4fdd\u62a4\u4f4f\n\n\u518d\u641c\u7d22\u4e0b\u4e00\u5c42\n\n\u641c\u5230\u7b2cm+1\u5c42\u5c31\u9000\u51fa\n\n\u8bb0\u4f4f\u4e00\u5b9a\u8981\u8fb9\u641c\u7d22\u8fb9\u66f4\u65b0\u6700\u4f18\u7b54\u6848\u56e0\u4e3a\u53ef\u80fd\u641c\u4e0d\u5230\u6700\u540e\u4e00\u5c42\u6240\u6709\u7684\u7ed3\u70b9\u5c31\u90fd\u88ab\u4fdd\u62a4\u4e86\uff08\u6bd4\u5982\u4e00\u6761\u94fe\uff09\n\n\u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a\u7ed3\u70b9\u6570-\u6700\u5927\u80fd\u4fdd\u62a4\u7684\u8282\u70b9\u6570\n\n# \u4e0a\u4ee3\u7801\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint sum[500],dep[500],m,n,a[500][500],fa[500],num[500],p,map[500][500],maxx;\nbool f[500];\nbool fin(int x) \n{\n\tif (x==1) return false;\n\tif (f[x]) return true;\n\treturn fin(fa[x]);\n}\nvoid build(int x,int depth) \n{\n\tint i;\n\tdep[x]=depth;\n\tnum[depth]++;\n\tm=max(m,depth);\n\ta[depth][num[depth]]=x;\n\t    sum[x]=1;\n\tfor (i=1; i<=map[x][0]; i++)\n\t\tif (fa[x]!=map[x][i]) \n\t\t{\n\t\t\tfa[map[x][i]]=x;\n\t\t\tbuild(map[x][i],depth+1);\n\t\t\tsum[x]+=sum[map[x][i]];\n\t\t}\n}\nvoid dfs(int depth,int ans) \n{\n\tif (depth==m+1)\n\t\treturn;\n\tint n1=num[depth],i,x;\n\tfor (i=1; i<=n1; i++) \n\t{\n\t\tx=a[depth][i];\n\t\t  if (fin(x))\n\t\t\t  continue;\n\t\tf[x]=true;\n\t\tmaxx=max(maxx,ans+sum[x]);\n\t\tdfs(depth+1,ans+sum[x]);\n\t\tf[x]=false;\n\t}\n}\nint main() \n{\n\tscanf(\"%d %d\",&n,&p);\n\tint i,x,y;\n\tfor (i=1; i<=p; i++) \n\t{\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tmap[x][0]++;\n\t\tmap[x][map[x][0]]=y;\n\t\tmap[y][0]++;\n\t\tmap[y][map[y][0]]=x;\n\t}\n\tbuild(1,1);\n\tdfs(2,0);\n\tprintf(\"%d\",n-maxx);\n}\n```\n",
        "postTime": 1555460604,
        "uid": 155661,
        "name": "\u5c71\u6c34\u4e00\u7a0b_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "## \u4eca\u5929\u849f\u84bb\u901a\u8fc7\u81ea\u5df1\u52aa\u529b\u60f3\u51fa\u7684\u7b2c\u4e00\u9053\u9898\uff08\u4e3b\u8981\u662f\u88abDP\u8650\u54ed\u4e86\uff09\uff0c\u601d\u8def\u8fd8\u662f\u975e\u5e38\u6e05\u6670\u7684\uff08\u81ea\u6211\u611f\u89c9~~\u826f\u597d~~~(>_<)~\uff09\n\n\u9996\u5148\u80af\u5b9a\u8981\u6309\u5c42\u641c\u7d22 \u56e0\u6b64\u8003\u8651\u5230\u628a\u5b83\u4eec\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4q[x][y]\u5b58\u4e0b\u6765\uff0c\u8868\u793a\u7b2cx\u5c42\u7b2cy\u4e2a\u6570\uff0c\u540c\u65f6\u7528\u4e00\u4e2anum\u6570\u7ec4\u5b58\u6bcf\u5c42\u7684\u4e2a\u6570\uff0c\u5e76\u8bb0\u5f55\u524d\u9a71\uff08\u7528\u4e8e\u641c\u7d22\u4e2d\u7684\u9694\u79bb\u64cd\u4f5c\uff0c\u8be6\u7ec6\u89c1\u540e\u6587\u548cCode\uff09\u3002\n\n\u4f46\u662f\u8bfb\u5165\u5374\u4e0d\u597d\u8ba9\u6211\u4eec\u76f4\u63a5\u6309\u4e0a\u8ff0\u65b9\u5f0f\u5b58\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee4\u4e00\u4e2aa[i][j]\u8868\u793a\u4e0ei\u76f8\u8fde\u7684\u7b2cj\u4e2a\u6570\uff0c\u518d\u901a\u8fc7\u4e00\u4e2abuild\u64cd\u4f5c\uff08\u5177\u4f53\u89c1Code\uff09\u8f6c\u6362\u5373\u53ef\u3002\n\n\u5f53\u6211\u4eec\u5f00\u5fc3\u7684\u5b8c\u6210\u4e0a\u8ff0\u5efa\u6a21\uff08\u849f\u84bb\u7684\u8ba4\u4e3a\uff09\u540e\uff0c\u7531\u4e8e\u662f\u6309\u5c42\u5b58\u7684\uff0c\u56e0\u6b64\u6df1\u5ea6\u5c31\u4e3alog\u7ea7\u522b\uff0c\u518d\u52a0\u4e0a\u6570\u636e\u4e0d\u5927\uff0c\u5b8c\u5168\u53ef\u4ee5\u6df1\uff08~~\u795e~~\uff09\u641c\u5566\n\n#### \u7136\u540e \u8003\u8651\u8bb0\u5f55\u54ea\u4e9b\u5185\u5bb9\uff0c\n\nsum\u503c\u8868\u793a\u88ab\u611f\u67d3\u7684\u4eba\u6570\uff0c\u521d\u59cb\u4e3a1\uff0c\u66f4\u65b0\u65f6\u52a0\u4e0a\u6b64\u5c42\u5269\u4f59\u7684\u6ca1\u88ab\u611f\u67d3\u7684\u5373\u53ef\u3002\n\nflag\u6570\u7ec4\u6807\u8bb0\u6b64\u4eba\u662f\u5426\u88ab\u9694\u79bb\uff0c\u82e5\u6709\u4eba\u7684\u524d\u9a71\u88ab\u9694\u79bb\u4e86\uff0c\u6b64\u4eba\u4e5f\u88ab\u9694\u79bb\uff0c\u540c\u65f6 \u6b64\u5c42\u9694\u79bb\u603b\u4eba\u6570++ \uff1b\n\n#### \u6700\u540e \u8003\u8651\u66f4\u65b0\u7b54\u6848\u6761\u4ef6\uff0c\n\n### \u5982\u679c\u8fd9\u4e00\u5c42\u5df2\u7ecf\u65e0\u4eba\u4e86\uff0c\u66f4\u65b0\u7b54\u6848\n\n### \u5982\u679c\u8fd9\u4e00\u5c42\u6709\u4eba\u4f46\u6240\u6709\u7684\u4eba\u90fd\u5df2\u7ecf\u88ab\u9694\u79bb\uff0c\u66f4\u65b0\u7b54\u6848\n\n\u5c31\u8fd9\u4e48\u591a\u5566\uff0c\u9644\u4e0aCode\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int gi() {\n\tint x=0,w=0; char ch=0;\n\twhile(!(ch>='0'&&ch<='9')) {\n\t\tif(ch=='-') w=1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn w?-x:x;\n}\nint n,p,sum=1,ans=1e9+1,q[301][301],use[301],pre[301],flag[301],a[301][301],num[301];\nvoid build(int x,int h) {\n\t//x\u4e3a\u5f53\u524d\u7684\u6570\uff0ch\u4e3a\u5c42\u6570\n\tfor(int i=1;i<=a[x][0];i++) {\n\t\tif(use[a[x][i]]) continue;\n\t\tuse[a[x][i]]=1;\t\t//\u5df2\u7ecf\u5b58\u5728\u5176\u7684\u4f4d\u7f6e\n\t\tpre[a[x][i]]=x;\t\t//\u8bb0\u5f55\u524d\u9a71\n\t\tq[h][++num[h]]=a[x][i];\n\t\tbuild(a[x][i],h+1);\n\t}\n}\nvoid DFS(int x) {\n\tif(!num[x]) {\t//\u6761\u4ef61\n\t\tans=min(ans,sum);\n\t\treturn ;\n\t}\t\n\tint sons=0;\n\tfor(int i=1;i<=num[x];i++) flag[q[x][i]]=0;\n    //\u8981\u6bcf\u6b21\u6e05\u96f6 \n\tfor(int i=1;i<=num[x];i++) \n\t\tif(flag[pre[q[x][i]]]) {\n\t\t\tflag[q[x][i]]=1;\n\t\t\tsons++;\n\t\t}\n\tif(sons==num[x]) {\t//\u6761\u4ef62\n\t\tans=min(ans,sum);\n\t\treturn ;\n\t}\t\n\tfor(int i=1;i<=num[x];i++) {\n\t\tif(flag[q[x][i]]) continue;\n\t\tflag[q[x][i]]=1;\t//\u627e\u5269\u4f59\u672a\u88ab\u9694\u79bb\u4e2d\u7684\u4e00\u4e2a\u9694\u79bb\n\t\tsum=sum+num[x]-sons-1;\t//\u66f4\u65b0sum\u503c\n\t\tDFS(x+1);\n\t\tsum=sum-num[x]+sons+1;\n\t\tflag[q[x][i]]=0;\n\t}\n}\nint main()\n{\n\tn=gi(); p=gi();\n\tfor(int i=1,x,y;i<=p;i++) {\n\t\tx=gi(); y=gi();\n\t\ta[x][++a[x][0]]=y;\n\t\ta[y][++a[y][0]]=x;\n\t}\n\tuse[1]=1;\n\tbuild(1,1);\n\tDFS(1);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1533564840,
        "uid": 93733,
        "name": "\u8584\u8377\u51c9\u4e86\u590f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "####\u8fd9\u9898\u6570\u636e\u597d\u50cf\u5f88\u6c34\u7684\u6837\u5b50 (\u9898\u89e3 By Plue Jheng/InfoEoR)\n\n\u5177\u4f53\u601d\u8def:\n\n- 1.\u641c\u7d22,\u5c06\u6811**\u7ed3\u70b9\u79bb\u6839\u8282\u70b9\u7684\u8ddd\u79bb**\u5206\u5c42,\u679a\u4e3e**\u6bcf\u5c42**\u9694\u79bb\u54ea\u4e00\u4e2a\u7ed3\u70b9(\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7684\u540e\u4ee3\u5168\u90e8\u8981\u6807\u8bb0\u4e3a\u5df2\u88ab\u9694\u79bb)\n\n- 2.\u8003\u8651\u4f18\u5316 \u63d0\u524d\u9884\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u548c\u4ed6\u7684\u540e\u4ee3\u4e2a\u6570\u603b\u548c\n\n- 3.\u8fb9\u754c\u6761\u4ef6 \u4ece\u7b2c\u4e00\u5c42(\u6839\u8282\u70b9)\u51fa\u53d1,\u4ece\u6700\u540e\u4e00\u5c42\u65f6\u8fd4\u56de.\u6ce8\u610f,\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u53f6\u8282\u70b9,\u5b83**\u4e0d\u4e00\u5b9a**\u662f\u6700\u540e\u4e00\u5c42\u8282\u70b9.\n\n- 4.\u7b54\u6848 ANS,\u8868\u793a**\u6709\u591a\u5c11\u4eba\u88ab\u4f20\u67d3**,\u521d\u503c\u4e3aN,\u641c\u7d22\u65f6\u6709\u53d8\u91cfNOW,\u521d\u503c\u4e3aN,\u9012\u5f52\u65f6 **\u4f20\u9012 NOW-\u88ab\u9694\u79bb\u7684\u8282\u70b9\u4e2a\u6570**.\u5e76**\u968f\u65f6**\u66f4\u65b0ANS=min(ANS,NOW).(\u5c0f\u5fc3\u7b2c4\u4e2a\u70b9,\u56fe\u662f\u4e00\u6761\u7ebf!,\u6240\u4ee5**\u4e0d\u80fd**\u53ea\u5728\u6700\u540e\u4e00\u5c42\u66f4\u65b0)\n\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\n#include<vector>\nusing namespace std;\nconst int N=310;\nint n,p,dep[N],ans,ROOTSIZE[N];//\u603b\u7ed3\u70b9\u4e2a\u6570,\u8fb9\u6570,\u7b54\u6848,\u6bcf\u4e2a\u8282\u70b9\u548c\u4ed6\u540e\u4ee3\u4e2a\u6570\u603b\u548c \nbool ISCUT[N],VIS[N];//\u662f\u5426\u88ab\u9694\u79bb,\u662f\u5426\u88ab\u8bbf\u95ee \nvector<int>DEP[N];//\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u6709\u54ea\u4e9b \nvector<int>TRE[N];//\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6709\u54ea\u4e9b \nvoid DOCUT(int u)//\u9694\u79bb\u4eceu\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811 \n{\n    ISCUT[u]=true;\n    for(int v,i=0; i<TRE[u].size(); i++)\n    {\n        v=TRE[u][i];\n        DOCUT(v);\n    }\n}\nvoid UNCUT(int u)//\u53d6\u6d88\u9694\u79bb \n{\n    ISCUT[u]=false;\n    for(int v,i=0;i<TRE[u].size();i++)\n    {\n        v=TRE[u][i];\n        UNCUT(v);\n    }\n}\nvoid dfs(int x,int now)\n{\n    //printf(\"x:%d now:%d\\n\\n\",x,now);\n    for(int i=0; i<DEP[x+1].size(); i++)\n    {\n        //printf(\"v:%3d\\n\",DEP[x+1][i]);\n        int v=DEP[x+1][i];\n        if(ISCUT[v]) continue;//\u5df2\u7ecf\u88ab\u9694\u79bb,\u53ef\u4ee5\u4e0d\u7528\u7ba1 \n        DOCUT(v); //printf(\"goto: \");\n        dfs(x+1,now-ROOTSIZE[v]);//\u9012\u5f52\u81f3\u4e0b\u4e00\u5c42 \n        UNCUT(v);\n        //printf(\"continue.\\n\");\n    }\n    //printf(\"return;\\n\\n\");\n    ans=min(now,ans);\n}\nint GO(int u,int now)//\u9884\u5904\u7406\u51fa\u7ed3\u70b9u\u5f00\u59cb\u7684\u5b50\u6811\u603b\u7ed3\u70b9 \n{\n    if(VIS[u]) ROOTSIZE[u];\n    VIS[u]=true;\n    DEP[now].push_back(u);//\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u5c42\u6709\u54ea\u4e9b\u7ed3\u70b9 \n    for(int v,i=0;i<TRE[u].size();i++)\n    {\n        v=TRE[u][i];\n        ROOTSIZE[u]+=GO(v,now+1);\n    }\n    return ROOTSIZE[u];\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&p); ans=n;\n    for(int i=1;i<=n;i++) ROOTSIZE[i]=1;//\u521d\u503c\u4e3a1 \n    for(int i=1,x,y; i<=p; i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(x>y) x^=y^=x^=y;\n        TRE[x].push_back(y);\n    }\n    GO(1,1);\n    dfs(1,n);\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1503974534,
        "uid": 34920,
        "name": "\u65e9\u53f3\u6615",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "# \u4f20\u67d3\u75c5\u63a7\u5236\n\n### \u9898\u89e3 By Windows250\n\n**\u770b\u5230\u6ca1\u4eba\u7528\u90bb\u63a5\u8868\u5b58\u8fb9\u3002\u3002\u3002\u8fd9\u91cc\u53d1\u4e2a\u770b\u7740\u601d\u8def\u6bd4\u8f83\u6e05\u6670\u7684\u9898\u89e3**\n\n\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u5148\u9884\u5904\u7406\u6240\u6709\u8282\u70b9\u7684\u513f\u5b50\u6570\uff0c\u4ece\u6700\u5927\u6df1\u5ea6\u5f00\u59cb,\u6bcf\u6b21\u5220\u6389\u5f53\u524d\u6df1\u5ea6\u513f\u5b50\u6700\u591a\u7684\u70b9\uff0c\u5e76\u628a\u8be5\u70b9\u6240\u6709\u7684\u7236\u8282\u70b9\u5220\u53bb\u8fd9\u4e2a\u513f\u5b50\u6570\uff0c\u6700\u540e\u8282\u70b91\u7684\u513f\u5b50\u6570\u5c31\u662f\u7b54\u6848\uff0c\u8fd9\u6837\u505a\u770b\u8d77\u6765\u662f\u6b63\u786e\u7684,\u4e0d\u8fc7\u7f3a\u9677\u5728\u4e8e\u65e0\u6cd5\u5904\u7406\u540c\u4e00\u6df1\u5ea6\u5b58\u5728\u76f8\u540c\u513f\u5b50\u6570\u7684\u70b9\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u56e0\u800c\u53ea\u670940\u5206\u3002\u3002\u3002\n\n\u6b63\u786e\u7684\u505a\u6cd5\u662f\u6df1\u641c+\u526a\u679d\uff0c\u6309\u5c42\u641c\u7d22\uff0c\u8981\u5148\u9884\u5904\u7406\u6bcf\u4e2a\u70b9\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u76f8\u5173\u6ce8\u91ca\u90fd\u5728\u4ee3\u7801\u91cc\u4e86:\n\n\n```cpp\n#include<bits/stdc++.h>\n#define in(x) x=read()\n#define MAXN 301\n\nusing namespace std;\n\ninline int read() {\n    int X=0,w=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') {\n        if(ch=='-') w=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9') X=(X<<3)+(X<<1)+ch-'0',ch=getchar();\n    return X*w;\n}\n//\u8bfb\u5165\u4f18\u5316\n\nstruct edges {\n    int next,to;\n} edg[MAXN<<1];//\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\u5b58\u50a8\u8fb9\uff0c\u6ce8\u610f\u5b58\u7684\u8fb9\u662f\u70b9\u76842\u500d\uff0c\u4e0d\u7136\u4f1aWA\nstruct points {\n    int fa;//\u5b58\u50a8\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\n    bool have_del,vist;\n} poi[MAXN];//\u7ed3\u6784\u4f53\u5b58\u50a8\u70b9\u7684\u76f8\u5173\u4fe1\u606f\nint n,p,cnt,ans=0x3f3f3f3f,depmax;//depmax\u4e3a\u6df1\u5ea6\u6700\u5927\u503c\nint head[MAXN];\nvector<int> deepth[MAXN];//\u4e0d\u5b9a\u957f\u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u6df1\u5ea6\u7684\u70b9\u96c6\n\ninline void add(int u,int v) {\n    edg[++cnt].next=head[u];\n    head[u]=cnt;\n    edg[cnt].to=v;\n}\n//\u52a0\u8fb9\n\nvoid deep_get(int x,int dep,int fa) {\n    poi[x].fa=fa;//\u70b9x\u7684\u7236\u8282\u70b9\n    depmax=max(depmax,dep);//\u83b7\u53d6\u6700\u5927\u6df1\u5ea6\n    deepth[dep].push_back(x);//\u4fdd\u5b58\u6df1\u5ea6\u4e3adep\u7684\u70b9\n    for(int i=head[x]; i; i=edg[i].next)\n        if(!poi[edg[i].to].vist) {\n            poi[edg[i].to].vist=true;\n            deep_get(edg[i].to,dep+1,x);\n        }\n    return;\n}\n//\u9884\u5904\u7406\uff0c\u4e3a\u4e0b\u4e00\u6b65\u641c\u7d22\u505a\u51c6\u5907\n\nbool fa_cuted(int x) {\n    if(x==1) return false;\n    if(poi[x].have_del) return true;\n    fa_cuted(poi[x].fa);\n}\n//\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u67d0\u4e00\u4e2a\u7236\u8282\u70b9\u662f\u5426\u5df2\u88ab\u526a\u8fc7\u4e86\n\nvoid handup(int dep,int infected) {\n    if(infected>=ans) return;//\u5f53\u524d\u611f\u67d3\u4eba\u6570>\u7b54\u6848\u503c,\u663e\u7136\u63a5\u4e0b\u6765\u7684\u641c\u7d22\u662f\u6beb\u65e0\u71a0\u71a0\u7684\n    if(dep==depmax+1) {\n        ans=min(ans,infected);    //\u5df2\u8fbe\u5230\u6700\u5927\u6df1\u5ea6\u66f4\u65b0\u7b54\u6848\n        return;\n    }\n    int i,j;\n    int sum=deepth[dep].size();//sum\u8868\u793a\u5f53\u524d\u6df1\u5ea6\u4e0d\u4f1a\u88ab\u611f\u67d3\u7684\u4eba\u6570(\u5373\u7956\u5148\u88ab\u526a\u8fc7\u7684\u70b9\u6570)\n    for(i=0; i<deepth[dep].size(); i++)\n        if(fa_cuted(deepth[dep][i])) sum--;\n    if(!sum) {\n        ans=min(ans,infected);//\u5f53\u5c42\u6240\u6709\u70b9\u7684\u7956\u5148\u90fd\u88ab\u526a\u8fc7\u4e86\u3002\u3002\u3002\n        return;\n    }\n    for(i=0; i<deepth[dep].size(); i++)\n        if(!fa_cuted(deepth[dep][i])) {//\u641c\u7d22\u7956\u5148\u672a\u88abcut\u7684\u70b9\n            poi[deepth[dep][i]].have_del=true;\n            sum--;\n            handup(dep+1,infected+sum);//\u52a0\u4e0a\u5982\u679c\u5220\u53bb\u8be5\u8282\u70b9\uff0c\u8be5\u5c42\u5269\u4f59\u7684\u4f1a\u88ab\u611f\u67d3\u4eba\u6570\uff0c\u5e76\u7ee7\u7eed\u641c\u7d22\n            sum++;\n            poi[deepth[dep][i]].have_del=false;\n            //\u6ce8\u610f\u56de\u6eaf\n        }\n    return;\n}\n\nint main() {\n    in(n);\n    in(p);\n    int u,v;\n    for(int i=1; i<=p; i++) {\n        in(u),in(v);\n        add(u,v),add(v,u);//\u6ce8\u610f\u8981\u53cc\u5411\u5b58\u8fb9\n    }\n    poi[1].vist=true;\n    poi[1].fa=0;\n    //\u8981\u521d\u59cb\u5316\u8282\u70b91\u7684\u76f8\u5173\u6570\u636e\n    deep_get(1,1,0);//\u9884\u5904\u7406\u8282\u70b9\u4fe1\u606f\n    handup(2,1);//\u679a\u4e3e\u60c5\u51b5\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1505482458,
        "uid": 35065,
        "name": "windows250",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u641c\u7d22\u771f\u662f\u4e2a\u597d\u4e1c\u897f\u3002\u3002\u3002\n\n\u9996\u5148\u628a\u6811\u5efa\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u6bcf\u4e00\u4e2a\u70b9\u5728\u6811\u7684\u7b2c\u51e0\u201c\u5c42\u201d\u3002\u3002\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e00\u5c42\u90fd\u53ef\u4ee5\u5220\u53bb\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\u4e5f\u4f1a\u8ddf\u7740\u88ab\u5220\u6389\u3002\u3002\u3002\n\n\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u5c42\u5e94\u8be5\u5220\u6389\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u4f3c\u4e4e\u6548\u7387\u4e0d\u9ad8\uff0c\u4f46\u6570\u636e\u5f31\uff0c\u4e8e\u662f\u5c31\u8fc7\u4e86\u3002\u3002\u3002\n\n\u526a\u679d\uff1a\u5982\u679c\u67d0\u4e00\u5c42\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\u88ab\u5220\u8fc7\uff0c\u5219\u4e0d\u5fc5\u518d\u5220\uff08\u8fd9\u4e2a\u526a\u679d\u8ba9\u6211\u4ece80\u5206\u53d8\u6210100\u5206\uff09\n\n\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<cstdlib>\nusing namespace std;\nint n,p,h[302],ans=1e9,d[302],k;\nbool fl[302];\nvector<int>g[302],f[302],g2[302];\nvoid dfs(int x,int y){\n    h[x]=y;fl[x]=1;\n    for (int i=0;i<g[x].size();i++)\n    if (!fl[g[x][i]])\n    {g2[x].push_back(g[x][i]);dfs(g[x][i],y+1);}\n}\nvoid ccj(int x){\n    fl[x]=1;k++;\n    for (int i=0;i<g2[x].size();i++)\n    ccj(g2[x][i]);\n}\nvoid ccj2(int x){\n    fl[x]=0;k--;\n    for (int i=0;i<g2[x].size();i++)\n    ccj2(g2[x][i]);\n}\nvoid dfs(int x){//c++\u652f\u6301\u51fd\u6570\u91cd\u8f7d\n    bool uu=0;\n    if (f[x].size()==0)\n    ans=min(ans,n-k);\n    else\n    for (int i=0;i<f[x].size();i++)\n    if (!fl[f[x][i]])\n    {\n        d[x]=f[x][i];\n        ccj(f[x][i]);\n        dfs(x+1);\n        ccj2(f[x][i]);\n        uu=1;\n    }\n    if (!uu)\n    {\n        ans=min(ans,n-k);\n        return;\n```\n}//\u5982\u679c\u5220\u5230\u8fd9\u5c42\u53d1\u73b0\u5df2\u7ecf\u5168\u90fd\u5220\u5149\u4e86\uff0c\u76f4\u63a5\u66f4\u65b0\n```cpp\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&p);\n    int u,v;\n    for (int i=0;i<p;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    dfs(1,0);\n    for (int i=1;i<=n;i++)\n    f[h[i]].push_back(i);\n    for (int i=1;i<=n;i++)\n    fl[i]=0;\n    dfs(1);\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1480858706,
        "uid": 14738,
        "name": "1124828077ccj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "**\u8d2a\u5fc3+\u968f\u673a\u5316**\n\n\u9996\u5148\u60f3\u5230\u4e86\u8d2a\u5fc3\n\n\u8d2a\u5fc3\u7684\u601d\u8def\u662f\u5728\u6bcf\u6b21\u6269\u6563\u524d\uff0c\u5207\u65ad \u5f53\u524d\u5c42\u5df2\u88ab\u611f\u67d3\u7684\u8282\u70b9\u7684\u513f\u5b50\u4e2d \u5b50\u8282\u70b9\u6700\u591a\u7684\u90a3\u4e00\u4e2a\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u88ab\u4f20\u67d3\u3002\u5faa\u73af\u4e2d\u7edf\u8ba1\u611f\u67d3\u8282\u70b9\u4e2a\u6570\n\n~~\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u8fd9\u6837\u5c3190pt\u4e86~~\n\n\u7136\u800c\u867d\u7136\u80fd\u5f97\u8fd9\u4e48\u591a\u5206\uff0c\u4e0d\u80fd\u6539\u53d8\u8d2a\u5fc3\u662f\u9519\u89e3\u7684\u4e8b\u5b9e\n\n\u4e8e\u662f\u7528~~\u9000\u706b~~\u968f\u673a\u5316\u4e71\u641e\uff0c\u5207\u65ad\u5b50\u8282\u70b9\u6700\u591a\u7684\u90a3\u4e2a\u70b9\u7684\u51e0\u7387\u6700\u5927\uff0c\u5207\u65ad\u5b50\u8282\u70b9\u6b21\u591a\u7684\u51e0\u7387\u5c0f\u4e00\u70b9\uff0c\u5207\u65ad\u7b2c\u4e09\u5927\u7684\u51e0\u7387\u53c8\u5c0f\u4e00\u70b9......\n\n\u91cd\u590d\u641e\u4e2a10000\u6b21\u5c31\u53ef\u4ee5\u4ea4\u4e86\n\n\u4ee3\u7801\u5199\u7684\u4e11\u5404\u4f4ddalao\u8f7b\u55b7\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<ctime>\nusing namespace std;\n\nint n,m;\nstruct star{//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9 \n\tint u,v;\n}edge[5005];\nint nxt[5005],last[5005];\nvoid addedge(int u,int v){//\u52a0\u8fb9 \n\tm++;\n\tedge[m]=(star){u,v};\n}\nvoid starinit(){//\u524d\u5411\u661f\u521d\u59cb\u5316 \n\tfor(int i=1;i<=n;i++) last[i]=-1;\n\tfor(int i=1;i<=m;i++){\n\t\tint flag=edge[i].u;\n\t\tnxt[i]=last[flag];\n\t\tlast[flag]=i;\n\t}\n}\nint jdn[5005],dep[5005];\nvoid getdata(int id,int prt){//\u6811\u4e0a\u7684\u4e00\u4e9b\u6570\u636e\u7684\u9884\u5904\u7406 \n\tdep[id]=dep[prt]+1;//\u6df1\u5ea6 \n\tint ans=0;\n\tfor(int i=last[id];i!=-1;i=nxt[i]){\n\t\tint to=edge[i].v;\n\t\tif(to==prt) continue;\n\t\tgetdata(to,id);\n\t\tans+=jdn[to];\n\t}\n\tjdn[id]=ans+1;//\u5b50\u8282\u70b9\u6570 \n}\nint vis[5005];\nint que[5005];//\u961f\u5217\u5b58\u611f\u67d3\u70b9 \nint head,tail;\nint bak[5005];\nbool bakcmp(int cx,int cy){//\u6309\u5b50\u8282\u70b9\u6570\u6392\u5e8f \n\treturn jdn[cx]>jdn[cy];\n}\nint pcr=0;//\u6bcf\u6b21\u968f\u673a\u5316\u5f97\u5230\u7684\u7b54\u6848 \nvoid fire(){\n\tfor(int i=1;i<=n;i++) vis[i]=0;\n\thead=0;tail=0;\n\tque[tail]=1;tail++;\n\tvis[1]=1;\n\tint cut=-1;//\u5f53\u524d\u6253\u7b97\u5207\u65ad\u5230\u54ea\u4e2a\u70b9\u7684\u9053\u8def \n\tpcr=1;\n\tfor(int q=1;head<tail;q++){//q\u662f\u5c42\u6570 \n\t\tfor(;head<tail;){\n\t\t\tint id=que[head];\n\t\t\tif(dep[id]!=q) break;//\u53ea\u62d3\u5c55\u5f53\u524d\u5c42\u8282\u70b9 \n\t\t\thead++;//\u5220\u6389\u5df2\u7ecf\u62d3\u5c55\u8fc7\u7684\u8282\u70b9 \n\t\t\tif(id==cut) continue;//\u4e0a\u56de\u88ab\u5207\u65ad\u7684\u8282\u70b9\u4e0d\u62d3\u5c55 \n\t\t\tfor(int i=last[id];i!=-1;i=nxt[i]){\n\t\t\t\tint to=edge[i].v;\n\t\t\t\tif(vis[to]==1) continue;//\u5982\u679c\u5df2\u7ecf\u62d3\u5c55\u8fc7\u4e86\uff08\u7236\u8282\u70b9\uff09\u5c31\u8df3\u8fc7 \n\t\t\t\tque[tail]=to;tail++;//\u62d3\u5c55 \n\t\t\t}\n\t\t}\n\t\tint len=tail-head;\n\t\tif(len>0){\n\t\t\tpcr+=len;//\u7b54\u6848\u66f4\u65b0 \n\t\t\tfor(int i=head;i<tail;i++){\n\t\t\t\tbak[i+1-head]=que[i];\n\t\t\t\tvis[que[i]]=1;//\u6807\u8bb0\u5df2\u7ecf\u62d3\u5c55\u8fc7\u7684\u8282\u70b9 \n\t\t\t}\n\t\t\tsort(bak+1,bak+1+len,bakcmp);//\u6392\u4e2a\u5e8f\u65b9\u4fbf\u968f\u673a\u5316 \n\t\t\tint f=1;\n\t\t\tfor(f=1;f<len;f++){//\u968f\u673a\u5316\u4e71\u641e \n\t\t\t\tint p=rand()%n;\n\t\t\t\tif(p!=1) break;\n\t\t\t}\n\t\t\tpcr--;//\u4e0d\u4f1a\u4f20\u67d3\u5230\u88ab\u5207\u65ad\u7684\u8282\u70b9 \n\t\t\tcut=bak[f];//\u5207\u65ad\u70b9\u66f4\u65b0 \n\t\t}\n\t}\n}\nint main(){\n\tsrand(time(0));//\u4e07\u6076\u4e4b\u6e90 \n\tint cirno;\n\tcin>>n>>cirno;\n\tm=0;\n\tfor(int i=1;i<=cirno;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\taddedge(u,v);addedge(v,u);\n\t}\n\tstarinit();\n\tdep[1]=1;\n\tgetdata(1,-1);\n\tint ans=999999999;\n\tfor(int i=1;i<=10000;i++){//\u6765\u4e2a10000\u6b21 \n\t\tfire();\n\t\tans=min(ans,pcr);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1542195557,
        "uid": 23632,
        "name": "sun123zxy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u72d7\n\n\u6709\u51e0\u4e2a\u6ce8\u610f\u70b9\n\n1.\u8fd9\u91cc\u7684\u8fb9\u662f\u65e0\u5411\u8fb9 \uff08\u6211\u88ab\u8fd9\u4e2a\u72d7\u4e86\u5f88\u4e45\uff09\n\n2.\u8d2a\u5fc3\u4e0d\u80fd\u8fc7\u5168\u90e8\u7684\u70b9\n\n\u4e0b\u9762\u8bf4\u4e00\u4e0b\u6211\u7684\u601d\u8def\n\n1.\u56e0\u4e3a\u662f\u4ee5\u6bcf\u4e00\u4e2a\u5468\u671f\u4e3a\u89e3\u9898\u7684\u5927\u65b9\u5411\u6240\u4ee5\u5c31\u8981\u628a\u4e00\u4e2a\u5468\u671f\u7406\u89e3\u4e3a\u6811\u7684\u4e00\u5c42\uff0c\u90a3\u4e48\u6211\u5c31\u7528\u4e00\u4e2avector\u5b58\u56fe\n\n2.\u5982\u4f55\u8fdb\u884c\u5224\u91cd\uff0c\u5373\u5982\u4f55\u533a\u5206\u8fd9\u4e2a\u8282\u70b9\u7684\u7956\u5148\u662f\u5426\u88ab\u4fdd\u62a4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8282\u70b9\u6307\u5411\u4ed6\u7684\u7236\u8282\u70b9\u76f4\u5230\u627e\u5230\u5df2\u88ab\u4fdd\u62a4\u7684\u70b9 \u6216 \u8282\u70b9 1\n\n3.\u88ab\u4f20\u67d3\u7684\u4eba\u6700\u5c11\u2014\u2014\u88ab\u4fdd\u62a4\u7684\u4eba\u6700\u591a \u5373\u9009\u62e9\u7684\u5b50\u6811\u548c\u6700\u5927\n\n\u4e0b\u9762\u6765\u770b\u4ee3\u7801\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=512;\nint n,m,ans=0;\nint fa[MAXN];\nint sm[MAXN];\nbool prt[MAXN],used[MAXN];\nvector<int> G[MAXN];\nvector<int> V[MAXN];//\u5b58\u56fe\nint solve(int nod,int fa){//\u8ba1\u7b97\u5b50\u6811\u548c\n    int len=G[nod].size();\n    int res=0;\n    for(int i=0;i<len;i++){\n        int son=G[nod][i];\n        if(son!=fa) res+=solve(son,nod);\n    }\n    return sm[nod]=res+1;\n}\nvoid tree(int nod){//\u5b58\u56fe\n    if(V[nod].empty()) return;\n    int len=V[nod].size();\n    for(int i=0;i<len;i++){\n        int x=V[nod][i];\n        int lenx=G[x].size();\n        for(int j=0;j<lenx;j++){\n            if(!used[G[x][j]]) fa[G[x][j]]=x,/*\u6307\u5411\u7236\u8282\u70b9*/used[G[x][j]]=1,V[nod+1].push_back(G[x][j]);\n        }\n    }\n    tree(nod+1);\n}\nbool find(int nod){//\u5411\u4e0a\u67e5\u627e\u7956\u5148\n    if(nod==1) return 0;\n    else if(prt[nod]) {return 1;}\n    return find(fa[nod]);\n}\nvoid dfs(int cen,int tot){\n    if(V[cen].empty()){\n        ans=max(ans,tot);\n        return;\n    }\n    int len=V[cen].size();\n    bool flag=false;\n    for(int i=0;i<len;i++){\n        int nod=V[cen][i];\n        if(!prt[nod]&&!find(nod)){\n            prt[nod]=1;\n            flag=true;\n            dfs(cen+1,tot+sm[nod]);\n            prt[nod]=0;\n        }\n    }\n    if(!flag){\n        ans=max(ans,tot);\n    }\n    return;\n}\n```\n/\\*\u641c\u7d22\u5176\u5b9e\u5f88\u597d\u60f3\u4f46\u662f\u8fb9\u754c\u600e\u6837\u8003\u8651\n1.\u5f53\u524d\u7684\u5c42\u5df2\u6ca1\u6709\u8282\u70b9\n\n2.\u5f53\u524d\u5c42\u9009\u7684\u70b9\u5df2\u5168\u88ab\u4fdd\u62a4\\*/\n\n    \n```cpp\nint main(){\n    cin>>n>>m;\n    for(int i=0;i<m;i++){\n        int x,y;\n        cin>>x>>y;\n        G[x].push_back(y);\n        G[y].push_back(x);\n    }\n    V[1].push_back(1); used[1]=1; tree(1);\n    solve(1,0);\n    dfs(2,0);\n    cout<<n-ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1509958814,
        "uid": 51292,
        "name": "blackzebra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "dfs+\u526a\u679d\n\n1.\u628a\u6240\u6709\u7684\u8fb9\u9884\u5904\u7406\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u8fde\u63a5\u5b83\u7684\u5b69\u5b50\u7684\u8fb9\u3002\n\n2.\u6700\u4f18\u6027\u526a\u679d\n\n3.\u6df1\u641c\u65f6\u53ef\u4ee5\u4f18\u5316\u65f6\u95f4\u5230O(n)\n\n\u65b9\u6cd5\u5982\u4e0b\uff1a\u5148\u628a\u8282\u70b9\u6269\u5c55\u5230\u4e0b\u4e00\u5c42\uff0c\u6bcf\u4e00\u6b21\u52201\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u5173\u4e8edfs\n\n1 tmp\u4e00\u5b9a\u662f\u5c40\u90e8\u53d8\u91cf\n\n2 \u6bcf\u4e00\u6b21dfs\u65f6\uff0c\u7ed3\u675fdfs\u65f6\u4e00\u5b9a\u662f\u8981\u56de\u6eaf\u56de\u53bb\u7684\u3002\n\n```cpp\n#include<cstdio>\nint i,j,n,m,aa,b,u;\nint ans=1e6;\nint mtr[301][301],num[301];\nint dot[301],size=1;\nstruct people\n{\n    int size;\n    int dot[301];\n} a;\nvoid add(int a, int b)\n{\n    mtr[a][++num[a]]=b;\n}\nvoid dfs(int value)\n{\n    if (value>=ans) return;\n    people tmp=a; //tmp\u4e00\u5b9a\u662f\u5c40\u90e8\u53d8\u91cf \n    a.size=0; \n    for (int i=1; i<=tmp.size; i++)\n        for (int j=1; j<=num[tmp.dot[i]]; j++)\n          a.dot[++a.size]=mtr[tmp.dot[i]][j];\n    if (a.size<=1)\n    {\n        ans=value;\n        a=tmp; //\u6ce8\u610f\u56de\u6eaf\n        return;\n    }\n    for (int i=1; i<=a.size; i++)\n    {\n        int tmpnode=a.dot[i];\n        a.dot[i]=a.dot[a.size--];\n        dfs(value+a.size);\n        a.dot[++a.size]=a.dot[i];\n        a.dot[i]=tmpnode;\n    }\n    a=tmp; //\u6ce8\u610f\u56de\u6eaf \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1; i<=m; i++) \n    {\n        scanf(\"%d%d\",&aa,&b);\n        add(aa,b);\n        add(b,aa);\n    }\n    bool exist[301]={0}; exist[1]=1;\n    int q[301],f=1,r=1; q[1]=1;\n    while (f<=r)\n    {\n        u=q[f++];\n        for (i=1; i<=num[u]; i++)\n        {\n            int tmp=mtr[u][i];\n            if (exist[tmp]) mtr[u][i]=0;\n            else\n            {\n                exist[tmp]=1;\n                q[++r]=tmp;\n            }\n        }          \n    }\n    for (i=1; i<=n; i++)\n    {\n        int p=0;\n        for (j=1; j<=num[i]; j++)\n          if (mtr[i][j]) mtr[i][++p]=mtr[i][j];\n        num[i]=p;\n    }\n    a.size=1; a.dot[1]=1;\n    dfs(1);\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1477754576,
        "uid": 19884,
        "name": "\u7fe0\u7af9\u53f6\u98de",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u6b64\u9898\u8003rp\u5440\u3002\u3002\u3002\n\n\u6765\u9876\u4e00\u6ce2\u968f\u673a\u6570\u9898\u89e3\uff0c\u672c\u4eba\u91c7\u7528\u94fe\u8868\u5b58\u56fe\uff0cdfs\u540e\u5c31\u53ef\u4ee5\u7528\u968f\u673a\u6570\u6765get\u6211\u4eec\u7684answer\u5566\u3002\n\n\u65f6\u9650\u5361\u7684\u4e0d\u7d27\uff0c\u968f\u4fbf\u968f\u673a\u4e2a\u4e00\u4e07\u6b21\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u4e48\u591a\u6b21rp\u80af\u5b9a\u662f\u591f\u4e86\u7684\u3002dalao\u4eec\u4e0d\u8981\u544a\u8bc9\u6211\u4e0d\u77e5\u9053\u6982\u7387\u8bba\u3002\n\n\u597d\u7684\uff0c\u6b64\u9898\u5c31\u8fd9\u4e48\u8fc7\u4e86\uff0c\u559c\u6b22\u7684\u8bb0\u5f97\u70b9\u8d5e\u5466\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\n#include<ctime>\nusing namespace std;\nconst int N=5010;\nint n,p,tot,prev[N],last[N],ccnt[N],dep[N],vis[N],srt[N],ans2=0,layer=1,cutid=-1;\nqueue<int> qu;\nstruct edge{\n    int frm,to;\n}e[N];\nvoid add(int a,int b){ \n    e[++tot]=(edge){a,b};\n    prev[tot]=last[a];\n    last[a]=tot; \n}\nvoid dfs(int id,int fa){\n    dep[id]=dep[fa]+1;\n\tlayer=max(layer,dep[id]); \n    int cnt=0;\n    for(int i=last[id];i;i=prev[i]){\n        int to=e[i].to;\n        if(to!=fa) dfs(to,id),cnt+=ccnt[to];\n    }\n    ccnt[id]=cnt+1; \n}\nbool cmp(int x,int y){\n    return ccnt[x]>ccnt[y];\n}\nvoid getans(){\n    for(int i=1;i<=n;i++) vis[i]=0;\n    qu.push(1); vis[1]=1; cutid=-1; ans2=1;\n\tfor(int lay=1;lay<=layer;lay++){ \n        while(!qu.empty()){\n            int id=qu.front();\n            if(dep[id]!=lay) break;\n\t\t\tqu.pop(); \n            if(id==cutid) continue;\n            for(int i=last[id];i;i=prev[i]){\n                if(vis[e[i].to]==1) continue;\n\t\t\t\tqu.push(e[i].to); \n            }\n        }\n        int qsize=qu.size();\n        if(qsize==0) continue;\n        ans2+=qsize-1;\n\t\tfor(int i=1;i<=qsize;i++){\n\t\t\tsrt[i]=qu.front();\n\t\t\tqu.push(qu.front());qu.pop();\n\t\t\tvis[srt[i]]=1;\n\t\t}\n        sort(srt+1,srt+1+qsize,cmp);\n        cutid=srt[1];\n        for(int i=1;i<qsize;i++){\n            if(rand()%n!=1){\n           \t\tcutid=srt[i]; \t\n            \tbreak;\t\n\t\t\t} \n        }\n    }\n}\nint main(){\n    srand(time(NULL));\n    cin>>n>>p;\n    while(p--){\n        int frm,to;\n        scanf(\"%d%d\",&frm,&to);\n        add(frm,to);add(to,frm);\n    }\n    dep[1]=1; dfs(1,0);\n\tint ans=0x3f3f3f3f;\n    for(int i=1;i<=10000;i++){\n        getans();\n        ans=min(ans,ans2);\n    }\n    cout<<ans;\n    return 0;\n}\n```\n",
        "postTime": 1554715532,
        "uid": 165561,
        "name": "lian_sama",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u7b2c\u4e00\u773c\u5f53\u7136\u662f\u7206\u641c\u5566\n~~(\u5176\u5b9e\u662f\u7b2c\u4e8c\u773c\u624d\u770b\u51fa\u6765\u7684)~~\n\n\u505a\u6cd5\uff1aA*\n\n\u9996\u5148\u770b\u9898\u53ef\u4ee5\u53d1\u73b0\u662f\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u628a\u95ee\u9898\u62bd\u8c61\u6210\u5728\u6811\u7684\u6bcf\u4e24\u5c42\u76f4\u63a5\u65ad\u4e00\u6761\u8fb9\uff0c\u6c42\u4ece1\u53f7\u8282\u70b9\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u603b\u6570\u6700\u5c0f\u7684\u60c5\u51b5\uff0c\u4ece\u800c\u8f6c\u5316\u6210\u6574\u68f5\u6811\u7684\u8282\u70b9\u6570\u5207\u6389\u70b9\u7684\u6700\u5c0f\u6570\uff0c\u4e8e\u662f\u5c31\u53ea\u9700\u8981\u6c42\u53ef\u4ee5\u5207\u6389\u7684\u6700\u5927\u70b9\u6570\n\ndfs\u7684\u8bdd\u590d\u6742\u5ea6\u6211\u6ca1\u8bc1 ~~\uff08\u5176\u5b9e\u662f\u4e0d\u4f1a\uff09~~ \u4f46\u611f\u89c9\u4f1at\uff0c\u8003\u8651\u526a\u679d\n\nA* \u4f30\u4ef7\u51fd\u6570\uff1a\u4ece\u5f53\u524d\u6df1\u5ea6\u53ca\u4ee5\u4e0b\u7684\u6bcf\u4e00\u5c42\u4e2d\u9009\u51fa\u6700\u5927\u7684\u5b50\u6811\u5207\u9664\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u68f5\u5b50\u6811\u7684\u6839\u7684\u7956\u5148\u5df2\u7ecf\u88ab\u5207\u9664\u4e86\uff0c\u90a3\u4e48\u6309\u7406\u8bf4\u8fd9\u68f5\u5b50\u6811\u5c31\u4e0d\u7528\u518d\u5207\u9664\u4e86\uff0c\u4f46A* \u7684\u4f30\u4ef7\u51fd\u6570\u662f\u4ec0\u4e48\uff1f\u5c31\u662f\u6700\u4e50\u89c2\u60c5\u51b5\u554a\uff0c\u6240\u4ee5\u6211\u4eec\u6839\u672c\u4e0d\u7528\u8003\u8651\u4ed6\u6709\u6ca1\u6709\u88ab\u5207\u9664\u8fc7\uff0c\u8d2a\u5c31\u5b8c\u4e86\u3002\n\n\u81f3\u4e8e\u600e\u4e48\u77e5\u9053\u8fd9\u4e2a\u70b9\u7684\u7956\u5148\u6709\u6ca1\u6709\u88ab\u5207\u6389\u5462\uff1f\u5f00\u4e2a\u6570\u7ec4vis\u8868\u793a\u5b83\u6709\u6ca1\u6709\u88ab\u5207\u6389\uff0c\u7136\u540e\u5728\u5207\u7956\u5148\u7684\u65f6\u5019\u66b4\u529b\u5411\u4e0bdfs\u4fee\u6539\u5c31\u884c\u4e86\uff01\n\n\u6574\u7406\u4e0b\u601d\u8def\uff1a\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u5c42\u6709\u54ea\u4e9b\u8282\u70b9\uff0c\u6bcf\u4e00\u5c42\u4ee5\u8be5\u5c42\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9\u6570\uff0c\u7136\u540e\u8dd1dfs\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n//by xyjg\n#include<cstdio>\n#include<algorithm>\n#define N 305\nusing namespace std;\nint n,p,uu,vv,ans;//\u8f93\u5165\u7684\u53c2\u6570\u548c\u4e00\u4e9b\u8f85\u52a9\u53d8\u91cf \n\nint h[N],nxt[N<<1],to[N<<1],size[N],f[N],dep[N],cnt;//\u8fd9\u4e9b\u6570\u7ec4\u662f\u5b58\u6811\u7684\uff0c\u8fd9\u91cc\u7528\u90bb\u63a5\u8868\u5b58\u56fe \n\nint ddd[N][N],pre[N];\n/*\n\u8fd9\u662f\u8981\u9884\u5904\u7406\u7684\u4e1c\u897f\uff0cddd[i][j]\u8868\u793a\u6df1\u5ea6\u4e3ai\u7684\u7b2cj\u4e2a\u70b9\uff0c\nddd[i][0]\u8868\u793a\u6df1\u5ea6\u4e3ai\u7684\u70b9\u6709\u51e0\u4e2a\uff0cddd[0][0]\u8868\u793a\u6df1\u5ea6\n\u6700\u5927\u4e3a\u591a\u5c11\uff0c\u56e0\u4e3a\u7528\u5230\u4e86\u7b2cddd[0][],\u6240\u4ee5\u8fd9\u68f5\u6811\u7684\u6839\u7684\n\u6df1\u5ea6\u4ece1\u5f00\u59cb\u7b97 \n\u81f3\u4e8epre[]\uff0c\u8fd9\u4e2a\u662f\u4ece\u4e0a\u5230\u4e0b\u6bcf\u4e00\u5c42\u80fd\u5207\u6389\u7684\u6700\u5927\u5b50\u6811\u8282\n\u70b9\u6570\u7684\u524d\u7f00\u548c\uff0c\u7528\u4e8e\u7b97\u4f30\u4ef7\u51fd\u6570 \n*/ \n\nbool vis[N];//\u7528\u6765\u8868\u793a\u8fd9\u4e2a\u70b9\u662f\u4e0d\u662f\u5df2\u7ecf\u88ab\u5207\u6389\u4e86 \n\ninline void add(){//\u5efa\u8fb9\u4e0d\u89e3\u91ca \n\tcnt++;\n\tnxt[cnt]=h[uu];h[uu]=cnt;to[cnt]=vv;\n\tcnt++;\n\tnxt[cnt]=h[vv];h[vv]=cnt;to[cnt]=uu;\n\treturn ;\n}\n\nint dfs1(int u,int fa,int d){//\u7528\u6765\u7edf\u8ba1\u6bcf\u4e00\u5c42\u8282\u70b9\u6570\u548c\u4ee5\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570 \n\tdep[u]=d;\n\tif(!ddd[d][0])ddd[0][0]++;\n\tddd[d][++ddd[d][0]]=u;\n\t++size[u];\n\tfor(int i=h[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==fa)continue;\n\t\tf[v]=u;\n\t\tsize[u]+=dfs1(v,u,d+1);\n\t}\n\treturn size[u];\n}\n\nvoid del(int u,int fa){//\u5c06\u4e00\u68f5\u6811\u5207\u9664 \n\tvis[u]=1;\n\tfor(int i=h[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==fa)continue;\n\t\tdel(v,u);\n\t}\n\treturn ;\n}\n\nvoid redel(int u,int fa){//\u5c06\u4e00\u68f5\u6811\u6062\u590d \n\tvis[u]=0;\n\tfor(int i=h[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==fa)continue;\n\t\tredel(v,u);\n\t}\n\treturn ;\n}\n\nvoid dfs(int d,int cur){//\u6df1\u641c\u4e3b\u4f53 d\u8868\u793a\u5f53\u524d\u6df1\u5ea6\uff0ccur\u8868\u793a\u5df2\u7ecf\u5207\u4e86\u591a\u5c11\u70b9 \n\tif(d==ddd[0][0]+1){//\u8fb9\u754c\u6761\u4ef61 \n\t\tans=max(ans,cur);\n\t\treturn ;\n\t}\n\tif(cur+pre[ddd[0][0]]-pre[d-1]<ans)return ;//A* \u526a\u679d \n\tfor(int i=1;i<=ddd[d][0];i++){//\u904d\u5386\u8fd9\u4e00\u6df1\u5ea6\u7684\u6240\u6709\u70b9 \n\t\tif(!vis[ddd[d][i]]){\n\t\t\tdel(ddd[d][i],f[ddd[d][i]]);\n\t\t\tdfs(d+1,cur+size[ddd[d][i]]);\n\t\t\tredel(ddd[d][i],f[ddd[d][i]]);\n\t\t}\n\t\telse ans=max(ans,cur);//\u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e00\u53e5\uff1f\u81ea\u5df1\u753b\u4e2a\u94fe\u6a21\u62df\u4e00\u4e0b\u5c31\u884c\u4e86 \n\t}\n\treturn ;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&p);\n\tfor(int i=1;i<=p;i++){\n\t\tscanf(\"%d%d\",&uu,&vv);\n\t\tadd();\n\t}\n\tdfs1(1,0,1);\n\tfor(int i=1;i<=ddd[0][0];i++){//\u8fd9\u4e2a\u5faa\u73af\u662f\u7528\u6765\u5904\u7406\u4e0a\u9762\u63d0\u5230\u7684\u524d\u7f00\u548c\u7684 \n\t\tuu=0;\n\t\tfor(int j=1;j<=ddd[i][0];j++){\n\t\t\tuu=max(uu,size[ddd[i][j]]);\n\t\t}\n\t\tpre[i]=pre[i-1]+uu;\n\t}\n\tdfs(2,0);//\u6df1\u5ea6\u4e3a1\u7684\u70b9\u4e0d\u80fd\u5207\u6389\uff0c\u6240\u4ee5\u4ece\u7b2c\u4e8c\u5c42\u5f00\u59cb \n\tprintf(\"%d\",size[1]-ans);//\u6240\u6709\u4eba\u51cf\u53bb\u672a\u60a3\u75c5\u4eba\u5c31\u662f\u60a3\u75c5\u4eba\u4e86 \n\treturn 0;\n}\n```\n",
        "postTime": 1553515351,
        "uid": 119195,
        "name": "zi\u5c0f\u773c\u805a\u5149",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u540c\u6b65\u4e8e[\u4e2a\u4eba\u535a\u5ba2](https://www.cnblogs.com/henry-1202/p/10371500.html)\n\n## \u9898\u76ee\u5730\u5740\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1041)\n\n## \u9898\u89e3\n\u8fd9\u91cc\u8bb2\u4e00\u4e2a**\u975e\u6b63\u89e3**\u2014\u2014\u8d2a\u5fc3+**\u968f\u673a\u5316**\u3002\n\n\n\u8d2a\u5fc3\u7684\u60f3\u6cd5\u662f\u4ec0\u4e48\uff1f\n\n\u6211\u4eecdfs\u4e00\u904d\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5185\u7684\u8282\u70b9\u6570\u91cf\uff0c\u8bb0\u4e3a$siz$\u3002\n\u8d2a\u5fc3\u7684\u780d\u6389$siz$\u6700\u5927\u7684\u90a3\u4e2a\u5b50\u6811\uff0c\u5728\u6811\u7684\u5f62\u6001\u6bd4\u8f83\u6b63\u5e38\u7684\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u89e3\u7684\u3002\n\n\u5982\u4f55hack\u6389\u8fd9\u79cd\u8d2a\u5fc3\uff1f\n\n**\u6784\u9020\u4e00\u6761\u94fe\uff0c\u5728\u4e2d\u95f4\u7684\u5730\u65b9\u653e\u4e00\u4e2a\u201c\u5f88\u80d6\u201d\u7684\u5206\u652f\uff0c\u53ef\u4ee5\u53ea\u5206\u4e24\u5c42\uff0c\u6bcf\u5c42\u7684\u8282\u70b9\u6784\u9020\u591a\u4e00\u4e9b\uff08\u6ce8\u610f\u8981\u4f7f\u8fd9\u4e2a\u5206\u652f\u7684\u8282\u70b9\u6570\u91cf\u5c0f\u4e8e\u94fe\u4e0b\u534a\u90e8\u5206\u7684\u8282\u70b9\u6570\u91cf\uff09**\n\n\u8fd9\u6837\u5b50\u6211\u4eec\u6309\u7167\u4e0a\u8ff0\u8d2a\u5fc3\uff0c\u5c06\u4f1a\u5f97\u5230\u9519\u8bef\u7684\u7ed3\u679c\uff0c\u66f4\u4f18\u7684\u505a\u6cd5\u662f\u628a\u8fd9\u4e2a\u5206\u652f\u76f4\u63a5\u780d\n\u6389\uff08\u56e0\u4e3a\u94fe\u4e0a\u6bcf\u6b21\u4f20\u67d3\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a\u88ab\u4f20\u67d3\u7684\u4eba\uff09\n\n\u5f53\u7136\uff0c\u5b9e\u9645\u6784\u9020\u53ef\u4ee5\u66f4\u52a0\u590d\u6742\uff0c\u8fd9\u53ea\u662f\u6700\u6781\u7aef\u7684\u60c5\u51b5\u3002\n\n\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u9519\u8bef\u7684\u8d2a\u5fc3\u5df2\u7ecf\u53ef\u4ee5\u5f97\u523090\u5206\u4e86\u3002\n\n\u5982\u4f55\u5f97\u5230\u6ee1\u5206\uff1f\n\n\u8981\u5bf9\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\uff0c\u90a3\u4e48\u9700\u8981\u7684\u90a3\u4e2a\u5206\u652f\u7684\u5927\u5c0f\u5c31\u4e0d\u4f1a\u592a\u5c0f\uff08\u56e0\u4e3a\u5b9e\u9645\u60c5\u51b5\u4e0b\u4e00\u822c\u662f\u4e0d\u4f1a\u50cf\u4e0a\u9762\u90a3\u6837\u5b50\u6784\u9020\u7684~~\uff0c\u6bd2\u7624\u51fa\u9898\u4eba\u9664\u5916~~\uff09\n\n\u6211\u4eec\u91c7\u7528**\u968f\u673a\u5316**\u7684\u601d\u60f3\uff08\u5b9e\u9645\u4e0a\u4e0b\u9762\u8fd9\u4e2a\u968f\u673a\u5316\u7684\u65b9\u6cd5\u5e76\u4e0d\u597d\uff0c\u4e0d\u8fc7\u6570\u636e\u6c34\u4e5f\u5c31\u6c34\u8fc7\u53bb\u4e86\uff09\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u5224\u5b9a\u89c4\u5219\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u6070\u597d\u7b26\u5408\u8fd9\u4e2a\u5224\u5b9a\u89c4\u5219\uff08\u4e00\u822c\u662f\u968f\u673a\u7684\uff09\uff0c\u90a3\u4e48\u5c31\u6539\u53d8\u539f\u672c\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u6362\u7528\u53e6\u5916\u4e00\u4e2a\u7b56\u7565\u3002\n\n\u8fd9\u91cc\u7528\u7684\u5224\u5b9a\u89c4\u5219\u662frand\u51fa\u6765\u7684\u7ed3\u679c\u5bf9233\u53d6\u6a21\u662f\u5426\u4e3a0.\n\n\u5982\u679c\u7b26\u5408\u8fd9\u4e2a\u5224\u5b9a\u89c4\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9009\u62e9\u5b50\u6811\u5927\u5c0f\u7b2c\u4e8c\u5927\uff08\u8fd9\u4e2a\u4f7f\u7528\u4f18\u5148\u961f\u5217\u5b9e\u73b0\uff09\u7684\u5b50\u6811\u780d\u6389\u3002\n\n**\u5f53\u7136\uff0c\u8fd9\u5f88\u4e0d\u9760\u8c31\u3002**\n\n\u901a\u5e38\u7684\u505a\u6cd5\u662f\u5728\u4e0dTLE\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u8dd1\u591a\u6b21\uff08\u80fd\u591a\u5c11\u6b21\u5c31\u591a\u5c11\u6b21\uff09\uff0c\u5bf9\u6240\u6709\u7ed3\u679c\u53d6min\u3002\n\n\u6240\u4ee5\u968f\u673a\u5316\u80fd\u6c34\u8fc7\u53bb\u4e00\u822c\u9760\u5927\u91cf\u7684\u5c1d\u8bd5\uff0c\u5c3d\u91cf\u9760\u8c31\u7684\u5224\u5b9a\u89c4\u5219\uff0c\u4ee5\u53ca\u53e6\u5916\u4e00\u4e2a\u7b56\u7565\u9760\u4e0d\u9760\u8c31\u3002\u3002\u3002\n\n**\u6ce8\u610f\uff0c\u5728\u6b64\u9898\u4e2d\uff0c\u9700\u8981\u4f7f\u5224\u5b9a\u6210\u529f\u7684\u53ef\u80fd\u6027\u5c3d\u53ef\u80fd\u4f4e\uff0c\u5f53\u7136\u4e5f\u4e0d\u80fd\u592a\u4f4e**\n\n\u4e0b\u9762\u7ed9\u51fa\u4ee3\u7801\uff0c\u6ce8\u610f\uff0c\u56e0\u4e3a\u4ee3\u7801\u91cc\u53ea\u8dd1\u4e86200\u6b21\u8fdb\u884c\u5c1d\u8bd5\uff0c\u4e0d\u4fdd\u8bc1\u4e00\u5b9a\u80fdac\uff0c\u53ef\u4ee5\u81ea\u884c\u8c03\u5927\u6b21\u6570\uff0c\u6216\u8005\u591a\u4ea4\u51e0\u6b21\uff08\u6211\u4ea4\u4e862\u53d1\u624d\u8fc7\uff09\u3002\n```cpp\n#include <bits/stdc++.h>\n\n#define ll long long\n#define inf 0x3f3f3f3f\n#define il inline\n\nnamespace io {\n\n    #define in(a) a=read()\n    #define out(a) write(a)\n    #define outn(a) out(a),putchar('\\n')\n\n    #define I_int ll\n    inline I_int read() {\n        I_int x = 0 , f = 1 ; char c = getchar() ;\n        while( c < '0' || c > '9' ) { if( c == '-' ) f = -1 ; c = getchar() ; }\n        while( c >= '0' && c <= '9' ) { x = x * 10 + c - '0' ; c = getchar() ; }\n        return x * f ;\n    }\n    char F[ 200 ] ;\n    inline void write( I_int x ) {\n        if( x == 0 ) { putchar( '0' ) ; return ; }\n        I_int tmp = x > 0 ? x : -x ;\n        if( x < 0 ) putchar( '-' ) ;\n        int cnt = 0 ;\n        while( tmp > 0 ) {\n            F[ cnt ++ ] = tmp % 10 + '0' ;\n            tmp /= 10 ;\n        }\n        while( cnt > 0 ) putchar( F[ -- cnt ] ) ;\n    }\n    #undef I_int\n\n}\nusing namespace io ;\n\nusing namespace std ;\n\n#define N 310\n\nint n, m, f[N];\nint cnt, head[N], siz[N], fa[N];\nstruct edge {\n\tint to, nxt;\n}e[N<<1];\n\nvoid ins(int u, int v) {\n\te[++cnt] = (edge) {v, head[u]};\n\thead[u] = cnt;\n}\n\nvoid dfs(int u) {\n\tsiz[u] = 1;\n\tfor(int i = head[u]; i; i = e[i].nxt) {\n\t\tif(e[i].to == fa[u]) continue;\n\t\tfa[e[i].to] = u;\n\t\tdfs(e[i].to);\n\t\tsiz[u] += siz[e[i].to];\n\t}\n}\n\nstruct Node {\n    int val;\n};\npriority_queue<Node> q, t;\n\nbool operator < (Node a, Node b) {\n    return siz[a.val] < siz[b.val];\n}\n\nint solve() {\n    while(!q.empty()) q.pop();\n    int ans = 0;\n    q.push((Node){1});\n    while(!q.empty()) {\n        int cur = 0;\n        while(!t.empty()) t.pop();\n        while(!q.empty()) {\n            int u = q.top().val; ++ans;\n            for(int i = head[u]; i; i = e[i].nxt) {\n                if(e[i].to == fa[u]) continue;\n                t.push((Node){e[i].to});\n                f[++cur] = e[i].to;\n            }\n            q.pop();\n        }\n        int num;\n        if(!t.empty()) {\n            int u = t.top().val; t.pop();\n            if(!t.empty() && rand() % 233 == 0) {\n                num = t.top().val; t.pop();\n            } else num = u;\n        }\n        for(int i = 1; i <= cur; ++i) {\n            if(f[i] == num) continue;\n            q.push((Node){f[i]});\n        }\n    }\n    return ans;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"1.in\", \"r\", stdin);\n#endif\n    srand((unsigned)time(0));\n\tn = read(), m = read();\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint u = read(), v = read();\n\t\tins(u, v); ins(v, u);\n\t}\n\tdfs(1);\n    int ans = 1000000;\n\tfor(int i = 1; i <= 200; ++i) {\n        ans = min(ans, solve());\n    }\n    printf(\"%d\\n\", ans);\n}\n\n```",
        "postTime": 1550057674,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "emm,\u50cf\u5f88\u591a\u4eba\u4e00\u6837\uff0c\u6211\u4e5f\u662f\u4e00\u5f00\u59cb\u60f3\u5230\u8d2a\u5fc3\uff0c\u76f4\u5230......\n\n![](https://cdn.luogu.com.cn/upload/pic/51522.png)\n(\u7ea2\u8272\u4e3a\u8d2a\u5fc3\uff0c\u5f97\u5230\u7ed3\u679c4\uff0c\u84dd\u8272\u4e3a\u641c\u7d22\uff0c\u5f97\u5230\u7ed3\u679c2\uff09\n\n\u4e8e\u662f\uff0c\u8fd9\u5c31\u662f\u4e00\u9053\u641c\u7d22\u9898\uff08\u4f46\u662f\u63d0\u9ad8+\u7684\u641c\u7d22\u786e\u5b9e\u4e0d\u7b80\u5355\uff09\n\n**\u6211\u5206\u5c42\u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u7528dfs\u5b9e\u73b0\uff1b**\n\n\u4f46\u662f\u6b64\u9898\u7684\u590d\u6742\u5ea6\u662f\u771f\u5fc3\u7384\u5b66\uff0c\u4e0e\u5c42\u6570\u548c\u70b9\u7684\u5206\u5e03\u90fd\u6709\u5173\uff0c\u6240\u4ee5\u4e0d\u505a\u8bc4\u4f30~~dfs\u53cd\u6b63\u80fd\u8fc7~~\n\n\u8d34\u4e00\u4e0b\u4e3b\u8981\u4ee3\u7801\uff0c\u6709\u5f88\u591a\u7ec6\u8282\u8981\u6ce8\u610f\uff0c\u6709\u7591\u95ee\u8bf7\u79c1\u4fe1\u6211\n\n\u5efa\u6811\uff1a\n```cpp\nstruct Edge//\u524d\u5411\u661f\u5b58\u56fe\n{\n\tll v,nxt;\n}e[maxn<<1|1];\nll cnt=0,last[maxn];\nvoid adde(ll u,ll v)//\u52a0\u8fb9\u51fd\u6570(\u8fd9\u662f\u5355\u5411,\u8f93\u5165\u65f6\u53cc\u5411\u5b58)\n{\n\te[++cnt].v=v;\n\te[cnt].nxt=last[u];last[u]=cnt;\n}\n\nstd::vector<ll>d[maxn];//d[dep]:node in dep \nll fa[maxn];\nvoid build(ll u,ll dep)//build the tree(\u5df2\u8f93\u5165\u5b8c\u6210,u\u662f\u5f53\u524d\u8282\u70b9,dep\u662f\u5f53\u524d\u6df1\u5ea6)\n{\n\td[dep].push_back(u);//\u628au\u52a0\u5165\u5230\u90a3\u4e00\u5c42\n\tfor(ll i=last[u];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].v==fa[u])continue;//\u7ec6\u8282\u4e4b\u4e00,\u4e0d\u80fd\u53bb\u8bbf\u95ee\u81ea\u5df1\u7684\u7236\u4eb2\n\t\tfa[e[i].v]=u;\n\t\tbuild(e[i].v,dep+1);\n\t}\n}\n```\n\u641c\u7d22:\n```cpp\nbool tag[maxn];//\u4e3a1\u8868\u793a\u88ab\u9694\u79bb\nll pushdown(ll u,ll dep)//\u628au\u53ca\u5176\u513f\u5b50\u9694\u79bb,\u8fd4\u56de\u9694\u79bb\u7684\u4eba\u6570\n{\n\tll res=1;\n\ttag[u]=1;\n\tfor(ll i=last[u];i;i=e[i].nxt)\n\t{\n\t\tif(fa[u]==e[i].v)continue;//\u540c\u6837\u4e0d\u80fd\u8bbf\u95ee\u7236\u4eb2\n\t\tres+=pushdown(e[i].v,dep+1);\n\t}\n\treturn res;\n}\nll clear(ll u,ll dep)//\u53d6\u6d88\u9694\u79bb(\u56de\u6eaf\u65f6\u7528\u5230)\n{\n\tll res=1;\n\ttag[u]=0;\n\tfor(ll i=last[u];i;i=e[i].nxt)\n\t{\n\t\tif(fa[u]==e[i].v)continue;\n\t\tres+=clear(e[i].v,dep+1);\n\t}\n\treturn res;\n}\nvoid dfs(ll dep,ll sum)//dep\u662f\u5f53\u524d\u6df1\u5ea6,sum\u662f\u5df2\u9694\u79bb\u7684\u4eba\u6570\n{\n\tif(sum>ans)ans=sum;//ans\u662f\u88ab\u4fdd\u62a4\u7684\u6700\u5927\u4eba\u6570,n-ans\u624d\u662f\u6700\u7ec8\u7b54\u6848\n\t\n\t\n\tfor(ll w=0;w<ll(d[dep].size());++w)//each u \\in dep\n\t{\n\t\tll u=d[dep][w];\n\t\tif(tag[u])continue;//was killed\n\t\tfor(ll i=last[u];i;i=e[i].nxt)//each u->v\n\t\t{\n\t\t\tif(e[i].v==fa[u])continue;\n\t\t\tsum+=pushdown(e[i].v,dep+1);//kill v\n\t\t\tdfs(dep+1,sum);//search v\n\t\t\tsum-=clear(e[i].v,dep+1);//clear v\n\t\t}\n\t}\n\t\t\n}\n```",
        "postTime": 1549980522,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u60f3\u4e86\u597d\u4e45\u597d\u4e45\uff0c\u679c\u7136\u592a\u5f31QAQ\u3002\n\n\u554a\u4e00\u5f00\u59cb\u60f3\u662f\u8d2a\u5fc3\uff0c\u7136\u540e\u89c9\u5f97\u8fd9\u4e2a\u5176\u5b9e\u4e0d\u662f\u5f88\u9760\u8c31\u554a\u3002\n\n\u7f51\u4e0a\u6709\u9898\u89e3\uff0c\u4f46\u4e3a\u4ec0\u4e48\u6211\u770b\u4e0d\u61c2\uff08\u540e\u9762\u61c2\u4e86\uff09\n\n\u770b\u5230\u6709\u968f\u673a\u5316\u7684\u795e\u5947\u65b9\u6cd5\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\uff0c\u679c\u7136\u6210\u529f\u4e86\u3002\n\n                \n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<map>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<set>\n#include<queue>\nusing namespace std;\nvector<int > g[666];\nqueue<int> q;\nint deep[666]={0},vis[666]={0},fa[666];\nint f[666];\nint n,p;\nvoid dfs(int x){//Build a tree\n    vis[x]=1;\n    for (int i=0;i<g[x].size();i++)\n    if (!vis[g[x][i]]){\n        deep[g[x][i]]=deep[x]+1;\n        fa[g[x][i]]=x;\n        dfs(g[x][i]);\n    }\n}\nbool v[666];\nint bfs(){\n    memset(v,0,sizeof(v));\n    q.push(1);v[1]=true;\n    int tmp=0;\n    int now=0;\n    while (true){\n        if (q.empty()){\n            if (now<=1) return tmp;//If the end of the spreading comes ,return a number. \n            int random=rand()%now+1;//Random the edge that we want to cut.\n            for (int i=1;i<=now;i++)\n                if (i != random) q.push(f[i]);//The ones who are not be chosen are going to die.\n            now=0;\n        }\n        int h=q.front();q.pop();v[h]=true;\n        tmp++;\n        for (int i=0;i<g[h].size();i++)\n            if (!v[g[h][i]] && fa[h]!=g[h][i])\n                f[++now]=g[h][i],v[g[h][i]]=1;//Add their son who are ready to die.\n    }\n}\nint main(){\n    srand(666666);\n    scanf(\"%d%d\",&n,&p);\n    for (int i=1;i<=p;i++) {\n        int x,y;scanf(\"%d%d\",&x,&y);\n        g[x].push_back(y);g[y].push_back(x);\n    }\n    dfs(1);\n    int ans=66666666;//Random many times and then you may get the correct answer.\n    for (int i=1;i<=33333;i++)\n         ans=min(ans,bfs());\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1468540478,
        "uid": 775,
        "name": "Expecto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "### \u3010\u7b97\u6cd5\u5206\u6790\u3011\n\u7b97\u6cd5\uff1a\u6df1\u641c$DFS$\n\n1. \u9898\u610f\uff1a\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u6309\u7167\u5230\u6839\u7684\u8ddd\u79bb\u6765\u5206\u5c42\uff0c\u7136\u540e\u4ece\u6bcf\u4e00\u5c42\u4e2d\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u5220\u6389\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002\u95ee\u6700\u540e\u5269\u4e0b\u7684\u8282\u70b9\u4e2a\u6570\u6700\u5c11\u662f\u591a\u5c11\uff1f\n\n2. \u56e0\u4e3a\u6b64\u9898\u7684\u6570\u636e\u8303\u56f4\u8f83\u5f31\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u96be\u60f3\u51fa\u7528**\u66b4\u641c**\u6c42\u51fa\u6240\u6709\u5207\u5272\u65b9\u6848\uff0c\u6700\u540e\u4fdd\u7559\u6700\u5c0f\u503c\u3002\n\n3. \u9996\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u96c6\u5408\uff0c\u4ee5\u53ca\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n\t\u7136\u540e\u4ece\u7b2c\u4e00\u5c42\u5f00\u59cb\uff0c\u4f9d\u6b21\u679a\u4e3e\u6bcf\u4e00\u5c42\u4e2d\u5220\u9664\u7684\u5b50\u6811\uff0c\u679a\u4e3e\u4e4b\u540e\u901a\u8fc7\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5c06\u6574\u68f5\u5b50\u6811\u4e2d\u7684\u8fb9\u5168\u90e8\u6807\u8bb0\u4e3a\u4e0d\u53ef\u9009\uff0c\u518d\u9012\u5f52\u5230\u4e0b\u4e00\u5c42\u7ee7\u7eed\u679a\u4e3e\u3002\u9012\u5f52\u7ed3\u675f\u65f6\u9700\u8981\u518d\u6b21\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6574\u68f5\u5b50\u6811\uff0c\u5c06\u6bcf\u6761\u8fb9\u7684\u72b6\u6001\u6062\u590d\u4e3a\u53ef\u9009\u3002\n\n\t\u5f53\u679a\u4e3e\u5230\u6700\u540e\u4e00\u5c42\u65f6\uff0c\u66f4\u65b0\u6700\u5c0f\u503c\u3002\n\n4. \u4f18\u5316\uff1a$DFS$ \u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5f53\u524d\u5df2\u7ecf\u5220\u9664\u7684\u8282\u70b9\u603b\u6570\uff0c\u6765\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\n\n### \u3010\u4ee3\u7801\u3011\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nconst int N = 310, M = N * 2;\nint n, m;\nint h[N], e[M], ne[M], idx;\nvector<int> level[N];\nint c[M], cnt[N];\nint ans = N;\n\nvoid add(int u, int v)\n{\n    e[idx] = v, ne[idx] = h[u], h[u] = idx++;\n}\n\nint dfs_level(int u, int d, int fa)\n{\n    cnt[u] = 1;\n    for (int i=h[u]; ~i; i=ne[i])\n    {\n        int j = e[i];\n        if (j == fa)\n            continue;\n        cnt[u] += dfs_level(j, d + 1, u);\n        level[d].push_back(i);\n    }\n    return cnt[u];\n}\n\nvoid dfs_draw(int j, int color)\n{\n    c[j] = color;\n    for (int i=h[e[j]]; ~i; i=ne[i])\n        if (i != (j ^ 1))   // i\u4e0d\u662fj\u7684\u53cd\u5411\u8fb9\n            dfs_draw(i, color);\n}\n\nvoid dfs(int u, int s)\n{\n    ans = min(ans, s);\n    for (int i=0; i<level[u].size(); i++ )\n    {\n        int j = level[u][i];\n        if (!c[j])\n        {\n            dfs_draw(j, 1);\n            dfs(u + 1, s - cnt[e[j]]);\n            dfs_draw(j, 0);\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    memset(h, -1, sizeof h);\n    for(int i=1; i<=m; i++)\n    {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        add(v, u), add(u, v);\n    }\n    dfs_level(1, 0, -1);\n    dfs(0, n);\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1581695354,
        "uid": 37090,
        "name": "ljcljc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u9996\u5148\u4e0d\u8981\u8138\u7684\u63a8\u8350\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\uff1a\n\n$\\qquad \\qquad \\qquad \\qquad\\qquad\\qquad$ _[$\u707c\u773c\u306e\u30c3\u30e3\u30ca$](https://violetnymph.blog.luogu.org/#)_ \n\n\u5982\u679c\u6709\u4e0a\u6765\u60f3\u8981\u8d2a\u5fc3\u7684\u76c6\u53cb\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u4f60\u6210\u529f\u7684GG\u4e86\uff08~~\u56e0\u4e3a\u6211\u5f00\u59cb\u5c31\u662f\u8fd9\u4e48\u6302\u7684~~\uff09\n\n\u9519\u8bef\u7684\u8d2a\u5fc3\uff1a\u5272\u6389$size$\u6700\u5927\u7684\uff0c\u5982\u679c\u6709\u76f8\u540c\u7684\uff0c\u5c31\u5272\u6389\u5ea6\u6700\u591a\u7684\n\n\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\uff1f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u4e2a\u70b9\uff0c\u867d\u7136\u5b83\u7684$size$\u6700\u5927\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u8981\u7acb\u9a6c\u5272\u6389\u5b83\uff08\u5728\u672c\u9898\u7684\u8ba8\u8bba\u533a\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\uff09\n\n\u7136\u800c\u518d\u770b\u6570\u636e\u8303\u56f4\uff1a$n \\le 300$\uff0c\u8fd9\u3002\u3002\u3002\u3002\u3002\u3002\u7206\u641c\u5c31\u5b8c\u4e86\u5427\n\n\u90a3\u5c31\u7406\u4e00\u7406\u601d\u8def\uff0c\u5f00\u59cb\u5199\u641c\u7d22\uff1a\n\n$1.$\u6ce8\u610f\u5230\u6bcf\u4e00\u5c42\u6211\u4eec\u53ea\u80fd\u9009\u4e00\u4e2a\u70b9\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f9d\u636e\u5c42\u6570\u6765\u641e\u4e8b\u60c5\uff0c\u7528\u4e00\u4e2a$vector$\u8bb0\u5f55\u4e00\u4e0b\u5f53\u524d\u5c42\u7684\u8282\u70b9\u6211\u4eec\u53ea\u8981\u641c\u5230$maxdep$\u5c31\u53ef\u4ee5\u56de\u6eaf\u4e86\n\n$2.$\u9009\u4e86\u4e00\u4e2a\u70b9\u8fd9\u4e00\u5c42\u5176\u5b83\u70b9\u5c31\u4e0d\u80fd\u9009\u4e86\uff0c\u5982\u4f55\u5904\u7406\uff1f\u53ef\u4ee5\u66b4\u529b\u6253\u6807\u8bb0\uff0c\u800c\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u7684\u513f\u5b50\u6211\u4eec\u4e5f\u4e0d\u80fd\u9009\uff0c\u90a3\u5c31\u66b4\u529b\u9012\u5f52$pushdown$\uff08\u7ebf\u6bb5\u6811\u5199\u591a\u4e86\uff09\u628a\u5b83\u7684\u513f\u5b50\u5168\u6807\u8bb0\u4e0a\uff0c\u8bb0\u5f55\u513f\u5b50\u540c\u6837\u7528\u4e86\u4e00\u4e2a$vector$\uff08~~\u8bdd\u8bf4vector\u771f\u597d\u7528~~\uff09\u66b4\u529b\u7684\u626b\u4e00\u904d\u6240\u6709\u513f\u5b50\u5e76\u9012\u5f52\u6253\u6807\u8bb0\n\n\u56e0\u4e3a$n$\u624d300\u6240\u4ee5\u600e\u4e48\u641e\u90fd\u884c\uff08~~\u867d\u7136\u4e5f\u4e0d\u80fd\u8fd9\u4e48\u8bf4~~\uff09\n\n$3.$\u7279\u6b8a\u70b9\u9700\u6ce8\u610f\uff1a\u4e00\u822c\u6765\u8bf4\uff0c\u7279\u6b8a\u7684\u6811\u5c31\u662f\u94fe\uff0c\u83ca\u82b1\u4e86\u5427\uff0c\u5e73\u5e38\u505a\u9898\u4e5f\u9700\u8981\u6ce8\u610f\u8fd9\u4e24\u79cd\u56fe\uff0c\u5bf9\u4e8e\u83ca\u82b1\u56fe\uff0c\u53d1\u73b0\u7b54\u6848\u5c31\u662f$n-1$\uff0c\u5bf9\u4e8e\u94fe\u53d1\u73b0\u9009\u4e00\u4e2a\u70b9\u7b49\u4e8e\u9009\u4e00\u5c42\uff0c\u90a3\u4e48\u5728\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u4f60\u5c31\u53ef\u4ee5\u628a\u5b83\u5224\u6389\uff0c\u7b54\u6848\u4e3a$1$\uff08~~\u8bdd\u8bf4\u8fd9\u4e24\u4e2a\u70b9\u8c8c\u4f3c\u662f\u4e2a\u4eba\u90fd\u80fd\u60f3\u5230~~\uff09\u7136\u800c\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u8fd8\u8981\u6ce8\u610f\u4e00\u4e2a\u5730\u65b9\u2014\u2014\u201c\u74f6\u9888\u201d\uff0c\u9644\u5f20\u56fe\u4f53\u4f1a\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/76gy5yen.png)\n\n\u4e2d\u95f4\u7684\u5c31\u662f\u201c\u74f6\u9888\u201d\uff0c\u5f53\u5207\u65ad\u4e86\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u540e\u9762\u7684\u5c31\u5168\u51c9\u4e86\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u628a\u5b83\u4eec\u53bb\u6807\u8bb0\u4e0a\u540e\u4f1a\u53d1\u73b0\uff0c\u88ab\u6807\u8bb0\u7684\u4e0d\u53ef\u518d\u904d\u5386\uff0c\u4f46\u6b64\u65f6\u8fd8\u6ca1\u5230$maxdep$\u6240\u4ee5\u6ca1\u6709\u66f4\u65b0\u7b54\u6848\uff0c\u7136\u540e\u5c31\u6302\u4e86\u3002\u3002\u3002\u6240\u4ee5\u8fd8\u8981\u6ce8\u610f\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff08\u5176\u5b9e\u548c\u94fe\u633a\u50cf\u7684\uff09\u4e8e\u662f\u53ef\u4ee5\u7279\u5224\u4e00\u4e0b\uff1a\u5f53\u9009\u6ee1\u4e86\u6574\u4e00\u5c42\uff0c\u76f4\u63a5\u8fd4\u56de\u5e76\u66f4\u65b0\u7b54\u6848\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u4e09\u4e2a\u8fc7\u7a0b\uff1a\n\n$initdfs$\uff0c\u5904\u7406$dep$\u7b49\u6570\u7ec4\uff0c\u4e4b\u540e\u8003\u8651\u9012\u5f52\u6253\u6807\u8bb0\uff0c\u641c\u7d22\u7b54\u6848\n\n\u7ed3\u675f\uff0c\u8d34\u7801\uff1a\n\n## code\n```cpp\n#include <cstdio>\n#include <vector>\n\nusing namespace std;\nconst int N = 305;\nint n, p, head[N], cnt, ans;\nstruct saber { int nxt, to; } rin[N << 1];\nint fa[N], size[N], maxdep, in[N];\nvector<int> son[N], dep[N];\nbool vis[N];\n\ninline void add(int fr, int to) {\n\trin[++cnt].to = to;\n\trin[cnt].nxt = head[fr];\n\thead[fr] = cnt;\n}\n\nvoid dfs(int x, int f, int d) {\n\t//\u9884\u5904\u7406\u51fasize,fa,dep,son\n\tfa[x] = f, size[x] = 1;\n\tdep[d].push_back(x), maxdep = max(maxdep, d);\n\tfor(int i = head[x]; i ;i = rin[i].nxt) {\n\t\tint vc = rin[i].to;\n\t\tif(vc == f) continue;\n\t\tdfs(vc, x, d + 1);\n\t\tson[x].push_back(vc), size[x] += size[vc];\n\t}\n}\n\nvoid pushdown(int x, int tag) {\n\t//\u9012\u5f52\u6253\u6807\u8bb0\n\tfor(int i = head[x]; i ;i = rin[i].nxt) {\n\t\tint vc = rin[i].to;\n\t\tif(vc == fa[x]) continue;\n\t\tvis[vc] = tag;\n\t\tpushdown(vc, tag);\n\t}\n}\n\nvoid get_ans(int now, int d) {\n\tif(d == maxdep + 1) { ans = min(ans, now); return; }\n\tint res = 0;\n\tfor(int i = 0;i < dep[d].size();++ i) {\n\t\tint vi = dep[d][i];\n\t\tif(vis[vi]) { ++ res; continue; } \n\t\tvis[vi] = true;\n\t\tpushdown(vi, 1);\n\t\tget_ans(now - size[vi], d + 1);\n\t\tpushdown(vi, 0);\n\t\tvis[vi] = false;\n\t}\n    \t//\u9009\u6ee1\u4e00\u5c42\u76f4\u63a5\u8fd4\u56de\n\tif(res == dep[d].size()) ans = min(ans, now);\n}\n\nint main() {\n\tscanf(\"%d%d\", &n, &p); ans = n;\n\tfor(int i = 1, u, v;i <= p;++ i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tadd(u, v), add(v, u);\n\t\t++ in[v], ++ in[u];\n\t}\n    \t//\u7279\u5224\u83ca\u82b1\n\tif(in[1] == n - 1) { printf(\"%d\\n\", n - 1); return 0; }\n\tdfs(1, 0, 1);\n\tget_ans(n, 2);\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\u5b8c\u7ed3\u6492\u82b1",
        "postTime": 1572442477,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "[\u5728\u6211\u7684\u535a\u5ba2\u67e5\u770b](https://www.cnblogs.com/whx666/p/11344478.html)\n\n\u5176\u5b9e\u9898\u76ee\u8bf4\u7684\u5c31\u662f\u5728\u4e00\u9897\u6811\u4e2d\u7684\u6bcf\u4e2a\u6df1\u5ea6\u627e\u51fa\u4e00\u4e9b\u4e0d\u91cd\u5408\u7684\u5b50\u6811\uff0c\u4f7f\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f\u4e4b\u548c\u6700\u5927\u3002\n\n\n\u76f4\u63a5\u66b4\u529bdfs\uff08\u679a\u4e3e\uff09\u65b9\u6848\uff0c\u597d\u50cf\u60f3\u4e0d\u5230\u7279\u522b\u6709\u7528\u7684\u526a\u679d\uff0c\u5c31\u6253\u4e86\u6734\u7d20\u7684\u641c\u7d22\uff0c\u7ed3\u679c\u5c31\u8fc7\u4e86\uff08\u6570\u636e\u8303\u56f4\u5c0f\uff09\n\n\u5148\u4ece\u6839\u8282\u70b9 dfs \u904d\u5386\u6574\u68f5\u6811\uff0c\u628a\u4f1a\u7528\u5230\u7684\u4fe1\u606f\u90fd\u8bb0\u5f55\u4e0b\u6765\uff08\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f)\n\n\u4e3a\u4e86\u540e\u9762\u641c\u7d22\u65b9\u6848\u65f6\u65b9\u4fbf\uff0c\u6211\u8fd8\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u6df1\u5ea6\u7684\u70b9\u96c6\n\n\u56e0\u4e3a\u5b50\u6811\u4e0d\u80fd\u91cd\u5408\uff0c\u6240\u4ee5\u53c8\u5f00\u4e86\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u5f53\u524d\u53ef\u4ee5\u9009\u62e9\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u70b9\u96c6\uff0c\u6bcf\u6b21\u7528\u4e0a\u4e00\u4e2a\u6df1\u5ea6\u7684\u53ef\u7528\u70b9\u62d3\u5c55\u51fa\u8fd9\u4e2a\u6df1\u5ea6\u7684\u53ef\u7528\u70b9\n\n\u907f\u514d\u5b50\u6811\u91cd\u5408\u7684\u65b9\u6cd5\uff1a\u4e0d\u62d3\u5c55\u5df2\u9009\u8282\u70b9\u7684\u5b50\u6811\n\n\u6570\u7ec4\u53d8\u91cf\u58f0\u660e\uff1a v \u8bb0\u5f55\u4e0e\u6bcf\u4e2a\u8282\u70b9\u6709\u8fde\u8fb9\u7684\u70b9\uff0csum \u8bb0\u5f55\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\uff0cdeep \u8bb0\u5f55\u8282\u70b9\u6df1\u5ea6\uff0ck \u8bb0\u5f55\u6bcf\u4e2a\u6df1\u5ea6\u7684\u6240\u6709\u8282\u70b9\uff0cq \u8bb0\u5f55\u5f53\u524d\u6bcf\u4e2a\u6df1\u5ea6\u7684\u53ef\u7528\u8282\u70b9\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 310;\nint n, m, a, b, maxn;\nint v[N][N], cntv[N], sum[N], deep[N], k[N][N], cntk[N], q[N][N], cntq[N];\ninline void Go (int p, int fa, int d) {     //\u904d\u5386\u6574\u68f5\u6811\uff0c\u8bb0\u5f55\u4fe1\u606f \n\tdeep[p] = d, sum[p] = 1, k[d][++cntk[d]] = p;\n\tfor (int i = 1; i <= cntv[p]; i++) \n\t  if (v[p][i] != fa)  Go (v[p][i], p, d + 1), sum[p] += sum[v[p][i]];\n}\ninline void Do (int d, int s, int last) {     //\u641c\u7d22\u65b9\u6848 \n\tmaxn = max (maxn, s);\n\tfor (int i = 1; i <= cntq[d-1]; i++) \n\t  if (q[d-1][i] != last)   //\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u4e0a\u4e00\u6b21\u9009\u4e2d\u70b9\uff0c\u62d3\u5c55\u5b50\u8282\u70b9\u4e3a\u53ef\u7528\u8282\u70b9 \n\t    for (int j = 1; j <= cntv[q[d-1][i]]; j++) \n\t\t  if (deep[v[q[d-1][i]][j]] == d)  q[d][++cntq[d]] = v[q[d-1][i]][j]; \n\t//if\u5224\u65ad\u907f\u514d\u52a0\u5165\u8fd9\u4e2a\u70b9\u7684\u7236\u8282\u70b9 \n\tfor (int i = 1; i <= cntq[d]; i++)\n\t   Do (d + 1, s + sum[q[d][i]], q[d][i]), cntq[d+1] = 0;\n}\nint main() {\n\tscanf (\"%d %d\", &n, &m); \n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf (\"%d %d\", &a, &b);\n\t    v[a][++cntv[a]] = b, v[b][++cntv[b]] = a;\n\t}\n\tq[1][1] = 1, cntq[1] = 1;\n\tGo (1, 0, 1), Do (2, 0, 0);\n\tprintf (\"%d\", n - maxn);\n\treturn 0;\n}\n```",
        "postTime": 1565664861,
        "uid": 84619,
        "name": "\u6e05\u5c18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8d2a\u5fc3\u867d\u7136\u88ab\u5361\u6210\u4e8690\u5206 ~~\u4f46\u6211\u8fd8\u662f\u51b3\u5b9a\u653e\u6211\u4e11\u964b\u7684\u4ee3\u7801~~\n\n        \u601d\u60f3\uff1a\u6bcf\u5c42\u9009\u62e9\u5b50\u6811\u6700\u5927\u7684\u8282\u70b9,\n        \u5e76\u53bb\u6807\u8bb0\u4e00\u4e0b\u4ed6\u7684\u540e\u8f88\u4eec,\n        \u7136\u540e\u518d\u641c\u5230\u4e0b\u4e00\u5c42,\u6211\u4eec\u5c31\u7ee7\u7eed\u7684\u53bb\u9009\u53d6\n        \u5b50\u6811\u6700\u5927\u7684\u8282\u70b9\u3002\n        \u5982\u6b64\u5f80\u590d\n        \u6211\u4eec\u62c6\u4e0b\u6765\u7684\u5c31\u662f\u6700\u591a\u7684,\u7528n\u51cf\u53bb\u6211\u4eec\u7684ans\u5373\u53ef\n        \n\u7136\u540e \u611f\u8c22@All_will\u7684\u70b9\u62e8.\n\u732e\u4e0a\u4f18(chou)\u7f8e(lou)\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define IL inline\n#define RI register int\nint n,p,u,v;\nstruct code{\n\tint u,v;\n}edge[8888];int lala;\nint head[333],tot,depth[333],f[333],size[333],maxdepth,ans;\nbool vis[333];\nIL void dfs(int u,int fa)\n{\n    depth[u]=depth[fa]+1;f[u]=fa;\n\tmaxdepth=std::max(maxdepth,depth[u]);\n    size[u] = 1;\n\tfor(RI i=head[u];i;i=edge[i].u)\n\t{\n\t\tif(edge[i].v==fa)continue;\n\t\tdfs(edge[i].v,u);\n\t\tsize[u] += size[edge[i].v];\n    }\n}\nIL void add(int x,int y)\n{\n    edge[++tot].u=head[x];\n\tedge[tot].v=y;\n\thead[x]=tot;\n\tedge[++tot].u=head[y];\n\tedge[tot].v=x;\n\thead[y]=tot;\n}\n\nIL void gengxin(int x)\n{\n\tsize[x]=0;\n\tvis[x]=true;\n\tfor(RI i=head[x];i;i=edge[i].u)\n\t{\n\t\tif(edge[i].v==f[x])continue;\n\t\tgengxin(edge[i].v);\n\t}\n}\nIL void search(int dep)\n{\n\tint maxtree,mxx=0;\n\tfor(RI i=1;i<=n;i++)\n\t{\n\t\tif(!vis[i]&&depth[i]==dep)\n\t\t{\n\t\t\tif(size[i]>mxx)\n\t\t\t{\n\t\t\t mxx=size[i];\n\t\t\t maxtree=i;\n\t\t    }\n\t\t}\n\t}\n\tans+=size[maxtree];\n\tgengxin(maxtree);\n}\nint main()\n{\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin>>n>>p;\n\tfor(RI i=1;i<=p;i++)\n\t{\n\t\tstd::cin>>u>>v;\n\t\tadd(u,v);\n\t}\n\tdfs(1,0);\n\tfor(RI i=2;i<=maxdepth;i++)\n\t    search(i);\n\t//for(int i = 1;i <= n;++i)printf(\"vis[%d] = %d\\n\",i,vis[i]);\n\tstd::cout<< n - ans;\n}\n```\n\n\u5f85\u6211\u7814\u7a76\u641c\u7d22\u518d\u6765get\u6b64\u9898 emmm",
        "postTime": 1532522976,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u7528\u641c\u7d22\u3002\n\n1.\u8f93\u5165\u8fb9\u4fe1\u606f\uff0c\u6784\u5efa\u6709\u5411\u6811\n\n\u8bbegl[i]\u4e3a\u9876\u70b9i\u7684\u513f\u5b50\u6570\u3002\n\ng[i,j]\u4e3a\u9876\u70b9i\u7684\u7b2cj\u4e2a\u513f\u5b50\u5e8f\u53f7\uff081\u2264i\u2264n\uff0c1\u2264j\u2264gl[i]\uff09\u3002\n\nf[i]\u4e3a\u9876\u70b9i\u7684\u5468\u671f\u3002\n\nans\u4e3a\u88ab\u611f\u67d3\u7684\u6700\u5c11\u4eba\u6570\uff0cnow\u4e3a\u5f53\u524d\u88ab\u611f\u67d3\u7684\u4eba\u6570\u3002\n\n\u6309\u7167\u4e0b\u8ff0\u65b9\u5f0f\u8f93\u5165p\u6761\u8fb9\u7684\u4fe1\u606f\uff1a\n\nread(n,m);                                                                                            {\u8bfb\u9876\u70b9\u6570\u548c\u8fb9\u6570}\n\nfillchar(gl,sizeof(gl),0);                                                                   {\u9876\u70b9\u7684\u5ea6\u5e8f\u5217\u521d\u59cb\u5316}\n\nfor i:=1 to m do                                                                              {\u8f93\u5165\u6bcf\u4e00\u6761\u8fb9\u7684\u4fe1\u606f}\n\n```cpp\n      begin\n        read(x,y);                                                                                  {\u8bfb\u7b2ci\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9}\n        inc(gl[x]);g[x,gl[x]]:=y;                                   {\u9876\u70b9x\u7684\u5ea6+1\uff0cx\u7684\u65b0\u589e\u8fb9\u7684\u53e6\u4e00\u7aef\u70b9\u4e3ay}\n        inc(gl[y]);g[y,gl[y]]:=x;                                   {\u9876\u70b9y\u7684\u5ea6+1\uff0cy\u7684\u65b0\u589e\u8fb9\u7684\u53e6\u4e00\u7aef\u70b9\u4e3ax}\n      end;{for}\n```\n\u7531\u4e8e\u8f93\u5165\u4fe1\u606f\u4e2d\u5e76\u6ca1\u6709\u7ed9\u51fa\u5404\u6761\u8fb9\u7684\u8fde\u63a5\u60c5\u51b5\uff0c\u56e0\u6b64\u5fc5\u987b\u4ece\u9876\u70b91\u51fa\u53d1\u6784\u9020\u6709\u5411\u6811\u3002\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a\nprocedure maketree(k:integer);                                                       {\u4ece\u6839k\u51fa\u53d1\uff0c\u6784\u9020\u6811}\n\n```cpp\n      var\n        i,j,t:integer;\n      begin\n        for i:=1 to gl[k] do                                                                  {\u679a\u4e3e\u9876\u70b9k\u7684\u6bcf\u4e00\u4e2a\u513f\u5b50}\n         begin\n           t:=g[k,i];\n           for j:=1 to gl[t] do                                     {\u5220\u9664\u9876\u70b9k\u7684\u7b2ci\u4e2a\u513f\u5b50\u6307\u5411\u9876\u70b9k\u7684\u6709\u5411\u8fb9}\n             if g[t,j]=k then break;\n           g[t,j]:=g[t,gl[t]];\n           dec(gl[t]);                                                          {\u4ece\u9876\u70b9k\u7684\u7b2ci\u4e2a\u513f\u5b50\u51fa\u53d1\uff0c\u7ee7\u7eed\u9012\u5f52}\n           maketree(t);\n         end;{for}\n    end;{maketree}\n```\n\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u9012\u5f52\u8c03\u7528maketree(1)\uff0c\u4fbf\u53ef\u4ee5\u5f97\u5230\u6709\u5411\u6811g\u3002\n2.\u9012\u5f52\u8ba1\u7b97\u88ab\u611f\u67d3\u7684\u6700\u5c11\u4eba\u6570\n\n\u73b0\u91c7\u53d6\u641c\u7d22\u7684\u529e\u6cd5\uff0c\u5728\u6bcf\u4e2a\u5468\u671f\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u679a\u4e3e\u524d\u4e00\u4e2a\u5468\u671f\u611f\u67d3\u75c5\u6bd2\u7684\u7ed3\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u65ad\u5f00\u8be5\u8282\u70b9\u4e0e\u7236\u8282\u70b9\u7684\u8fb9\u3002\n\n\u72b6\u6001\uff08now\uff0cf\uff0ck\uff09\uff1anow\u4e3a\u5f53\u524d\u88ab\u611f\u67d3\u7684\u4eba\u6570\uff0cf\u4e3a\u6bcf\u4e2a\u9876\u70b9\u6240\u5728\u7684\u5468\u671f\uff0ck\u4e3a\u5f53\u524d\u5468\u671f\u3002k\u8bbe\u4e3a\u503c\u53c2\uff0cnow\u548cf\u8bbe\u4e3a\u5168\u5c40\u53d8\u91cf\u3002\n\n\u8fb9\u754c\u6761\u4ef6\uff08now\uff1eans\uff09\uff1a\u82e5\u5f53\u524d\u88ab\u611f\u67d3\u7684\u4eba\u6570\u5df2\u8d85\u8fc7\u6700\u5c0f\u503c\uff0c\u5219\u56de\u6eaf\uff1b\u5426\u5219\u8ba1\u7b97k\u5468\u671f\u5185\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\u7684\u513f\u5b50\u6570\uff0c\u7d2f\u8ba1\u88ab\u611f\u67d3\u4eba\u6570now\u3002\n\n\u641c\u7d22\u8303\u56f4\uff081\u2264i\u2264n\uff09\uff1a\u641c\u7d22\u5904\u4e8ek+1\u5468\u671f\u5185\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\uff08\u5373f[i]=k+1\uff09\uff0c\u5207\u65ad\u7236\u9876\u70b9\u901a\u5411\u5b83\u7684\u4f20\u64ad\u9014\u5f84\uff0c\u9012\u5f52k+1\u4e2a\u5468\u671f\u3002\n\n\u7531\u6b64\u5f97\u51fa\u9012\u5f52\u7a0b\u5e8f\uff1a\n\nprocedure search(k:integer);                                {\u641c\u7d22\u5728\u7b2ck\u4e2a\u5468\u671f\u4e2d\u88ab\u5207\u65ad\u7684\u4f20\u64ad\u9014\u5f84}\n\n```cpp\n    var\n      i,j:integer;\n      found:boolean;                                                                                               {\u5b58\u5728\u6807\u5fd7}\n    begin\n      if now>ans then exit;                                  {\u82e5\u5f53\u524d\u88ab\u611f\u67d3\u7684\u4eba\u6570\u5df2\u8d85\u8fc7\u6700\u5c0f\u503c\uff0c\u5219\u56de\u6eaf}\n      found:=false;                                                                                {\u672a\u53d1\u73b0\u88ab\u611f\u67d3\u7684\u9876\u70b9}\n      for i:=1 to n do                                                                     {\u679a\u4e3e\u5728\u5468\u671fk\u88ab\u611f\u67d3\u7684\u9876\u70b9}\n       if f[i]=k then                                           {\u82e5\u9876\u70b9i\u5904\u4e8e\u5468\u671fk\uff0c\u5219\u679a\u4e3e\u9876\u70b9i\u7684\u6bcf\u4e00\u4e2a\u513f\u5b50}\n         for j:=1 to gl[i] do\n           begin\n             f[g[i,j]]:=k+1;                                                            {\u9876\u70b9i\u7684\u7b2cj\u4e2a\u513f\u5b50\u5904\u4e8ek+1\u5468\u671f}\n             inc(now);                                                                                      {\u88ab\u611f\u67d3\u7684\u4eba\u6570+1}\n             found:=true;                                                                     {\u53d1\u73b0\u5904\u4e8e\u5468\u671fk+1\u7684\u9876\u70b9}\n           end;{for}\n    dec(now);\n    for i:=1 to n do\n      if f[i]=k+1 then                                                                   {\u901a\u5411\u9876\u70b9i\u7684\u4f20\u64ad\u9014\u5f84\u88ab\u5207\u65ad}\n        begin\n          f[i]:=0;\n          search(k+1);                                                                                        {\u9012\u5f52\u5468\u671fk+1}\n          f[i]:=k+1;\n        end;{then}\n    inc(now);                                                                                        {\u6062\u590d\u9012\u5f52\u524d\u7684now\u548cf}\n    for i:=1 to n do\n      if f[i]=k+1 then\n        begin\n          f[i]:=0;dec(now);\n        end;\n    if (not found) and (now<ans) then ans:=now;       {\u82e5\u6ca1\u627e\u5230\u88ab\u611f\u67d3\u7684\u9876\u70b9\u4e14\u88ab\u611f\u67d3\u7684\u9876\u70b9\n```\n\u6570\u6700\u5c11\uff0c\u5219\u8bb0\u4e0b}\n    end;{search}\n\n\u663e\u7136\uff0c\u4e3b\u7a0b\u5e8f\u5728\u6839\u636e\u8f93\u5165\u4fe1\u606f\u6784\u9020\u6709\u5411\u6811\u540e\uff0c\u8bbe\u9876\u70b91\u5904\u4e8e\u5468\u671f1\u4e14\u88ab\u611f\u67d3\uff08f[i]:=1;now:=1;fillchar(f,sizeof(f),0);f[1]:=1\uff09\uff0c\u88ab\u611f\u67d3\u7684\u6700\u5c11\u4eba\u6570ans\u521d\u59cb\u5316\u4e3a500\u3002\u7136\u540e\u9012\u5f52\u8c03\u7528search(1)\uff0c\u5f97\u51fa\u7684ans\u5373\u4e3a\u95ee\u9898\u7684\u89e3\u3002\n",
        "postTime": 1478211991,
        "uid": 9538,
        "name": "\u5434\u56fd\u94e8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9898\u633a\u6076\u5fc3\uff0c\u641c\u7d22\u65f6\u57fa\u672c\u6ca1\u6709\u526a\u679d\uff0c\u53ea\u80fd\u770b\u4f60\u7a0b\u5e8f\u597d\u574f\u4e86\uff0c\u6211\u662f\u8fd9\u6837\u641c\u7684\uff1a\n\n\u5148\u904d\u5386\u4e00\u8fb9\u6811\uff0c\u628a\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\u5904\u7406\u51fa\u6765\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u7684\u641c\u3002\u6bcf\u4e00\u5c42\u679a\u4e3e\u4e00\u4e2a\u70b9\u63a7\u5236\u3002\u6211\u8bb0\u5f55\u7684\u662f\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u4f20\u67d3\u7684\u4eba\u6570max\uff0c\u7ed3\u679c\u5c31\u662fn-max\u4e86\u3002\n\n\n\n\n\n\n\n\n\n```cpp\nvar a,b:array[1..310,0..310]of integer;\n    d,f:array[1..310]of longint;\n    v:array[1..310]of boolean;\n    i,n,p,x,y,max,ans:longint;\nprocedure dfs(k:longint);//\u8fd9\u662f\u904d\u5386\u6811\uff0c\u5904\u7406\u8282\u70b9\u6240\u5728\u7684\u5c42\u6570\u7684\u8fc7\u7a0b\nvar i:longint;\nbegin\nfor i:=1 to a[k,0] do\n  begin\n    d[a[k,i]]:=d[k]+1;//d[i]\u8868\u793ai\u70b9\u6240\u5728\u7684\u5c42\u6570\n    dfs(a[k,i]);\n  end;\nend;\nprocedure dp(k:longint);//\u8fd9\u662f\u5904\u7406\u4ee5k\u4e3a\u6839\u5b50\u6811\u8282\u70b9\u6570\u7684\u8fc7\u7a0b\nvar i:longint;\nbegin\nf[k]:=1;\nfor i:=1 to a[k,0] do\n  begin\n    dp(a[k,i]);\n    f[k]:=f[k]+f[a[k,i]];//f[k]\u8868\u793a\u4ee5k\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u603b\u6570\n  end;\nend;\nprocedure deal(k:longint);//\u8fd9\u662f\u5c06\u4ee5k\u4e3a\u6839\u7684\u5b50\u6811\u5168\u8d4b\u503c\u4e3a\u76f8\u53cd\u7684boolean\uff0c\u641c\u7d22\u56de\u6eaf\u65f6\u7528\u7684\nvar i:longint;\nbegin\nv[k]:=not(v[k]);\nfor i:=1 to a[k,0] do\n  deal(a[k,i]);\nend;\nprocedure search(k,now:longint);//\u8fd9\u5c31\u662f\u641c\u7d22\u4e3b\u8fc7\u7a0b\uff0c\u641c\u5230\u7b2ck\u5c42\uff0c\u6709now\u4e2a\u4eba\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u611f\u67d3\u4e86\nvar i,j:longint;\n    flag:boolean;\nbegin\nif k=max then\n  begin\n    if now>ans then ans:=now;\n    exit;\n  end;\nflag:=true;\nfor i:=1 to b[k,0] do\n   if not(v[b[k,i]]) then\n      for j:=1 to a[b[k,i],0] do\n        begin\n          flag:=false;\n          deal(a[b[k,i],j]);\n          search(k+1,now+f[a[b[k,i],j]]);\n          deal(a[b[k,i],j]);\n        end;\nif flag then search(max,now);//\u5982\u679c\u6b64\u5c42\u6ca1\u6709\u53ef\u641c\u7684\uff0c\u76f4\u63a5\u8fdb\u5165\u6700\u540e\u4e00\u5c42\nend;\nprocedure build(k:longint);//\u91cd\u65b0\u5efa\u6811\nvar i:longint;\nbegin\nfor i:=1 to b[k,0] do\n  if not(v[b[k,i]]) then\n    begin\n      inc(a[k,0]);\n      a[k,a[k,0]]:=b[k,i];\n      v[b[k,i]]:=true;\n      build(b[k,i]);\n    end;\nend;\nbegin\nread(n,p);\nfor i:=1 to p do\n  begin\n    read(x,y);\n    inc(b[x,0]);\n    b[x,b[x,0]]:=y;\n    inc(b[y,0]);\n    b[y,b[y,0]]:=x;\n  end;\nfillchar(v,sizeof(v),0);\nv[1]:=true;\nbuild(1);//\u5efa\u6811\nfillchar(b,sizeof(b),0);\nfillchar(d,sizeof(d),0);\nd[1]:=1;\ndfs(1);\nmax:=0;//\u8bb0\u5f55\u6700\u6df1\u5c42\u6570\nfor i:=1 to n do\n  begin\n    if max<d[i] then max:=d[i];\n    inc(b[d[i],0]);\n    b[d[i],b[d[i],0]]:=i;//b[i,j]\u8868\u793a\u7b2ci\u5c42\u7b2cj\u4e2a\u8282\u70b9\u7684\u6807\u53f7\n  end;\nfillchar(f,sizeof(f),0);\ndp(1);\nans:=0;\nfillchar(v,sizeof(v),0);\nsearch(1,0);\nwriteln(n-ans);\nend.//ok\u4e86\n```",
        "postTime": 1474898089,
        "uid": 9464,
        "name": "ab1352574412",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1041 \u3010\u4f20\u67d3\u75c5\u63a7\u5236\u3011"
    }
]