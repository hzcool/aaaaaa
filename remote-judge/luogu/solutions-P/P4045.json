[
    {
        "content": "\u8fd9\u91cc\u8bf4\u4e00\u79cd\u8ddf\u53e6\u5916\u4e24\u7bc7\u9898\u89e3\u4e0d\u4e00\u6837\u7684\u526a\u679d\u3002\n\n\u540c\u65f6\u2026\u2026\u8fd9\u9898\u5927\u6982\u4e5f\u5c31\u662f\u84dd~\u7d2b\u5de6\u53f3\uff0c\u8fd9\u4e2a\u9ed1\u5b9e\u5728\u592a\u865a\u4e86\u3002\n\n\u89c2\u5bdf\u9898\u610f\uff0c\u7531 `good+day=gooday` \u53ef\u77e5\u5e94\u8be5\u653e\u5728 $\\rm AC$ \u81ea\u52a8\u673a\u4e0a\u505a\uff0c\u89c2\u5bdf\u8303\u56f4\u53ef\u77e5\u662f\u72b6\u538b\u3002\u8bb0 $f_{i,j,s}$ \u8868\u793a\u5339\u914d\u5230\u4e32\u7684\u7b2c $i$ \u4f4d\uff0c\u8d70\u5230\u4e86\u81ea\u52a8\u673a\u4e0a\u7684\u7b2c $j$ \u4e2a\u8282\u70b9\uff0c\u5f53\u524d\u5df2\u7ecf\u62fc\u5b8c\u4e86\u96c6\u5408 $s$ \u4e2d\u7684\u6a21\u5f0f\u4e32\u7684\u65b9\u6848\u6570\u3002\u90a3\u4e48\u8f6c\u79fb\u81ea\u7136\u5f88\u7b80\u5355\u3002\u503c\u5f97\u63d0\u4e00\u53e5\u7684\u7684\u662f\uff0c\u7531\u4e8e\u672c\u8eab $\\rm AC$ \u81ea\u52a8\u673a\u5b58\u5728\u8def\u5f84\u538b\u7f29\uff0c\u6240\u4ee5\u662f `\u8ba4\u5b50\u4e0d\u8ba4\u7236` \u7684\u7ed3\u6784\uff0c\u53ea\u80fd\u5237\u8868\u3002\n\n\u4e4b\u540e\u8003\u8651\u8f93\u51fa\u65b9\u6848\u3002\u8003\u8651\u4e00\u79cd\u65e0\u8111\u7684\u8f93\u51fa\u65b9\u5f0f\u3002\u7531\u4e8e\u5f88\u5bb9\u6613 $dfs$ \u51fa\u6bcf\u4e2a\u72b6\u6001 $(i,j,k)$ \u662f\u5426\u53ef\u4ee5\u8f6c\u79fb\u5230\u7ec8\u70b9\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8003\u8651 $42$ \u7684\u9650\u5236\uff0c\u526a\u5b8c\u679d\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\u3002\n\n\u540c\u65f6\uff0c\u53ea\u8981\u5728 $\\rm AC$ \u81ea\u52a8\u673a\u4e0a\u4fdd\u8bc1\u6bcf\u6b21\u8d70\u6700\u5c0f\u7684\u5b57\u6bcd\uff0c\u5c31\u4e00\u5b9a\u662f\u5b57\u5178\u5e8f\u6700\u4f18\u7684\u65b9\u6848\u3002\n\n```cpp\nint o ;\nLL ans ;\nint n, m ;\nint t[N] ;\nchar s[N] ;\nLL f[N][W][Z] ;\nbool g[N][W][Z] ;\nbool v[N][W][Z] ;\n\nstruct ACAM{\n    int size ;\n    int _ed[W] ;\n    int fail[W] ;\n    queue <int> q ;\n    int trans[W][26] ;\n    void Ins(char *t, int num){\n        int rt = 0, len ;\n        len = strlen(t + 1) ;\n        for (int x, i = 1 ; i <= len ; ++ i){\n            x = t[i] - 'a' ;\n            if (!trans[rt][x])\n                trans[rt][x] = ++ size ;\n            rt = trans[rt][x] ;\n        }\n        _ed[rt] |= (1 << num) ;\n    }\n    void build(){\n        for (int i = 0 ; i < 26 ; ++ i)\n            if (trans[0][i]) q.push(trans[0][i]) ;\n        while (!q.empty()){\n            int x = q.front() ;\n            q.pop() ; _ed[x] |= _ed[fail[x]] ;\n            for (int i = 0 ; i < 26 ; ++ i){\n                if (!trans[x][i]) trans[x][i] = trans[fail[x]][i] ;\n                else fail[trans[x][i]] = trans[fail[x]][i], q.push(trans[x][i]) ;\n            }\n        }\n    }\n}S ;\nbool search(int x, int y, int z){\n    if (x == n){\n        v[x][y][z] = 1 ;\n        return g[x][y][z] = (bool)(z == o) ;\n    }\n    bool p = 0 ;\n    if (v[x][y][z])\n        return g[x][y][z] ;\n    else v[x][y][z] = 1 ;\n    for (int i = 0 ; i < 26 ; ++ i)\n        p |= search(x + 1, S.trans[y][i], z | S._ed[S.trans[y][i]]) ;\n    return g[x][y][z] = p ;\n}\nvoid output(int x, int y, int z){\n    if (!g[x][y][z]) return ;\n    if (x == n){\n        for (int i = 1 ; i <= n ; ++ i)\n            printf(\"%c\", t[i] + 'a') ;\n        return puts(\"\"), void() ;\n    }\n    for (int i = 0 ; i < 26 ; ++ i)\n        t[x + 1] = i, output(x + 1, S.trans[y][i], z | S._ed[S.trans[y][i]]) ;\n}\nint main(){\n    cin >> n >> m ; S.size = 0 ;\n    for (int i = 1 ; i <= m ; ++ i)\n        scanf(\"%s\", s + 1), S.Ins(s, i - 1) ;\n    S.build() ; f[0][0][0] = 1 ; o = (1 << m) - 1 ;\n    for (int i = 0 ; i < n ; ++ i)\n        for (int j = 0 ; j <= S.size ; ++ j)\n            for (int k = 0 ; k <= o ; ++ k)\n                if (f[i][j][k])\n                    for (int l = 0 ; l < 26 ; ++ l)\n                        f[i + 1][S.trans[j][l]][k | S._ed[S.trans[j][l]]] += f[i][j][k] ;\n    for (int i = 0 ; i <= S.size ; ++ i) ans += f[n][i][o] ;\n    if (ans > 42) return printf(\"%lld\\n\", ans), 0 ;\n    else return cout << ans << '\\n', search(0, 0, 0), output(0, 0, 0), 0 ;\n}\n\n```",
        "postTime": 1582090958,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4045 \u3010[JSOI2009]\u5bc6\u7801\u3011"
    },
    {
        "content": " [$$ \\Large \\texttt{My Blog} $$](http://blog.flyinthesky.win/bzoj1559/)\n\n------------\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u662f\u4e00\u4e2aAC\u81ea\u52a8\u673a(\u7ecf\u5178\u9898\uff0c\u591a\u6a21\u5f0f\u4e32)\u4e0a\u7684\u72b6\u538bDP(\u6570\u636e\u8303\u56f4)\uff0c\u90a3\u4e48\u5217\u51fa\u65b9\u7a0b\u5373\u4e3a$dp(i,st,u)$\u4e3a\u5bc6\u7801\u524d$i$\u4f4d\u5305\u542b\u6a21\u5f0f\u4e32\u72b6\u6001$st$\uff0c\u5728AC\u81ea\u52a8\u673a\u4e0a$u$\u70b9\u7684\u65b9\u6848\u3002\n\n\u90a3\u4e48\u8f6c\u79fb\u5f88\u663e\u7136\uff0c\u5373\u5237\u8868\n\n$$dp(i+1,st|zt[v], v)= \\sum dp(i,st,u)$$\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u8f93\u51fa\u65b9\u6848\u3002\n\n\u56e0\u4e3a\u8fd9\u4e2a\u6570\u5b57\u5c0f\u4e8e\u7b49\u4e8e$42$\u624d\u8f93\u51fa\u65b9\u6848\uff0c\u53ef\u4ee5\u8003\u8651\u7206\u641c(\u65b9\u6848DP\u4e0d\u597d\u8bb0\u5f55\u524d\u9a71)\n\n\u91cd\u8981\u7ed3\u8bba\n>\u5b57\u7b26\u4e32\u90fd\u662f\u7d27\u5bc6\u7ed3\u5408\u7684\uff0c\u4e0d\u5b58\u5728\u81ea\u7531\u7684\u53ef\u4ee5\u586b$26$\u79cd\u5b57\u6bcd\u7684\u4f4d\u7f6e\n\n\u8bc1\u660e\u5f88\u663e\u7136\uff0c\u56e0\u4e3a\u5982\u679c\u5b58\u5728\u8fd9\u4e2a\uff0c\u90a3\u4e48\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f$26$\u7684\u8d21\u732e\uff0c\u800c\u5b57\u7b26\u4e32\u53ef\u4ee5\u4ea4\u6362\u4f4d\u7f6e\uff0c\u90a3\u4e48\u4e00\u5b9a\u65b9\u6848\u6570\u5927\u4e8e$42$\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u9884\u5904\u7406\u4e24\u4e2a\u6a21\u5f0f\u4e32\u7ec4\u5408\u6700\u5c11\u7684\u5b57\u7b26\u957f\u5ea6\uff0c$O(n!)$\u679a\u4e3e\u6a21\u5f0f\u4e32\u6392\u5217\u5373\u53ef\uff0c\u6ce8\u610f\u8981\u820d\u6389\u4e0d\u5408\u6cd5\u7684\uff0c\u5373\u957f\u5ea6\u5927\u4e8e$L$\u7684\u3002\n\n```c++\n#include<cstdio> \n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<cmath>\n#include<queue>\n#define ms(i, j) memset(i, j, sizeof i)\n#define LL long long\n#define db double\n#define fir first\n#define sec second\n#define mp make_pair\nusing namespace std;\n\nnamespace flyinthesky {\n    \n    const int MAXN = 102;\n    \n    int n, m, ch[MAXN][26], f[MAXN], zt[MAXN], sz;\n    char s[11][11];\n    LL dp[30][1025][MAXN];\n    \n    void insert(char *s, int ith) {\n    \tint now = 0, len = strlen(s);\n    \tfor (int i = 0; i < len; ++i) {\n    \t\tint c = s[i] - 'a';\n    \t\tif (!ch[now][c]) ch[now][c] = ++sz;\n    \t\tnow = ch[now][c];\n    \t\tif (i == len - 1) zt[now] = (1 << (ith - 1));\n        }\n    }\n    void getFail() {\n        queue<int > q;\n        f[0] = 0;\n        for (int c = 0; c < 26; ++c) {\n            int v = ch[0][c];\n            if (v) q.push(v), f[v] = 0;\n        }\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            for (int c = 0; c < 26; ++c) {\n                int v = ch[u][c];\n                if (!v) {ch[u][c] = ch[f[u]][c]; continue ;}\n                q.push(v);\n                int j = f[u];\n                while (j && !ch[j][c]) j = f[j];\n                f[v] = ch[j][c], zt[v] |= zt[f[v]];\n            }\n        }\n    }\n    int gg[20], vis[20], orz[20][20], tot = 0;\n    string pt[50], tmp;\n    void dfs(int a) {\n        if (a == m + 1) {\n        \ttmp.clear();\n            for (int i = 1; i <= m; ++i) {\n            \tint st = 0, whw = strlen(s[gg[i]]);\n            \tif (i != 1) st = orz[gg[i - 1]][gg[i]];\n            \tfor (int j = st; j < whw; ++j) {\n            \t\ttmp += s[gg[i]][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((LL)tmp.size() == n) pt[++tot] = tmp;\n            return ; \n        }\n        for (int i = 1; i <= m; ++i) {\n            if (!vis[i]) gg[a] = i, vis[i] = 1, dfs(a + 1), vis[i] = 0, gg[a] = 0;\n        }\n    }\n    \n    void clean() {\n    \tms(ch, 0), ms(f, 0), ms(zt, 0), sz = 0, ms(dp, 0), ms(vis, 0), ms(gg, 0), ms(orz, 0);\n    }\n    int solve() {\n\n    \tclean();\n    \tcin >> n >> m;\n    \tfor (int i = 1; i <= m; ++i) {\n    \t\tscanf(\"%s\", s[i]);\n    \t\tinsert(s[i], i);\n        }\n        getFail();\n    \t\n    \tdp[0][0][0] = 1;\n    \tfor (int i = 0; i <= n; ++i) {\n    \t\tfor (int st = 0; st < (1 << m); ++st) {\n    \t\t\tfor (int u = 0; u <= sz; ++u) if (dp[i][st][u]) {\n    \t\t\t\tfor (int c = 0; c < 26; ++c) {\n    \t\t\t\t\tint v = ch[u][c];\n    \t\t\t\t\tdp[i + 1][st | zt[v]][v] += dp[i][st][u];\n                    }\n                }\n            }\n        }\n        \n\t\tLL ans = 0;\n        for (int u = 0; u <= sz; ++u) ans += dp[n][(1 << m) - 1][u];\n        printf(\"%lld\\n\", ans);\n    \t\n    \tif (ans <= 42) {\n    \t\tfor (int x = 1; x <= m; ++x) {\n    \t\t\tfor (int y = 1; y <= m; ++y) if (x != y) {\n    \t\t\t\tint lx = strlen(s[x]), ly = strlen(s[y]);\n    \t\t\t\tfor (int len = min(lx, ly); len >= 0; --len) {\n    \t\t\t\t\tint fl = 0;\n    \t\t\t\t\tfor (int i = 0; i < len; ++i) {\n    \t\t\t\t\t\tint j = lx - len + i;\n    \t\t\t\t\t\tif (s[x][j] != s[y][i]) {fl = 1; break;} \n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!fl) {\n\t\t\t\t\t\t\torz[x][y] = len;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        \tdfs(1);\n        \tsort(pt + 1, pt + 1 + ans);\n        \tfor (int i = 1; i <= ans; ++i) cout << pt[i] << endl;\n        }\n    \t\n        return 0;\n    }\n}\nint main() {\n    flyinthesky::solve();\n    return 0;\n}\n```",
        "postTime": 1551363505,
        "uid": 12943,
        "name": "FlyInTheSky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4045 \u3010[JSOI2009]\u5bc6\u7801\u3011"
    },
    {
        "content": "### \u89e3\u9898\u601d\u8def\uff1a\n\n\u8fd9\u9053\u9898\u76ee...\u6709\u70b9\u8be1...\n\n\u9996\u5148\u663e\u7136\u662f$AC$\u81ea\u52a8\u673a+\u72b6\u538b$DP$\uff0c\u6211\u4eec\u8bbe$f[i][j][S]$\u8868\u793a\u957f\u5ea6\u4e3a$i$\uff0c\u5f53\u524d\u5728$Trie$\u6811\u4e0a\u7684$j$\u53f7\u8282\u70b9\uff0c\u89c2\u5bdf\u5230\u7684\u5b57\u7b26\u4e32\u7684\u4f7f\u7528\u60c5\u51b5\u4e3a$S$\u7684\u65b9\u6848\u6811\uff0c\u7136\u540e\u8f6c\u79fb\u5c31\u597d\u4e86\u3002\n\n\u73b0\u5728\u4e3b\u8981\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u8f93\u51fa\u65b9\u6848\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u4e9b\u88ab\u89c2\u5bdf\u5230\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u7684\u60c5\u51b5\uff0c\u8fd9\u5c31\u53ef\u80fd\u4f1a\u7ed9\u6211\u4eec\u7684\u65b9\u6848\u6784\u9020\u52a0\u5927\u96be\u5ea6\u3002\n\n\u4f46\u662f\u6211\u4eec\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5b57\u7b26\u662f\u53ef\u4ee5\u4efb\u610f\u9009\u53d6\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u7ed9\u65b9\u6848\u6570\u7684\u6700\u5c0f\u7684\u8d21\u732e\u5c31\u662f$2 \\times 26=52$\uff0c\u5c31\u8d85\u51fa\u4e86\u6211\u4eec\u9700\u8981\u7ed9\u51fa\u5177\u4f53\u65b9\u6848\u7684\u8303\u56f4\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u66b4\u641c\u6765\u5f97\u5230\u65b9\u6848\u3002\n\n\u7136\u540e\u8fd8\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u9700\u8981\u9884\u5904\u7406\u51fa\u6765\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u60c5\u51b5\uff0c\u7136\u540e\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\u5224\u4e00\u4e0b\u3002\n\n\u4ee3\u7801\u4e0d\u662f\u5f88\u597d\u770b\u4e86...\n\n#### Code\uff1a\n\n```cpp\n/*Program from Luvwgyx*/\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nconst int maxl=26;\nconst int maxn=110;\nbool vis[maxn],del[maxn];\nchar s[20][21],ans[50][maxn];ll f[maxl][maxn][(1<<10)+1];\nint L,n,m,tot,cnt,now,pos[maxn],len[maxn],ed[maxn],fail[maxn],trie[maxn][maxl],nxt[maxl][maxl];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nvoid print(ll x){\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)print(x/10);\n    putchar(x%10+'0');\n}\nvoid write(ll x){print(x);puts(\"\");}\nstruct AC_automaton{\n    void insert(char *s,int num){\n        int p=0,len=strlen(s);\n        for(int i=0;i<len;i++){yixia\n            int ch=s[i]-'a';\n            if(!trie[p][ch])trie[p][ch]=++tot;\n            p=trie[p][ch];\n        }ed[p]=1<<num;\n    }\n    void make_fail(){\n        queue<int >q;\n        memset(fail,0,sizeof(fail));\n        for(int i=0;i<26;i++)if(trie[0][i])q.push(trie[0][i]);\n        while(!q.empty()){\n            int x=q.front();q.pop();\n            for(int i=0;i<26;i++){\n                if(trie[x][i]){\n                    fail[trie[x][i]]=trie[fail[x]][i];\n                    q.push(trie[x][i]);\n                }else trie[x][i]=trie[fail[x]][i];\n            }ed[x]|=ed[fail[x]];\n        }\n    }\n}AC;\nbool cmp(int x,int y){for(int i=0;i<L;i++)if(ans[x][i]!=ans[y][i])return ans[x][i]<ans[y][i];return 0;}\nint get_nxt(int x,int y){\n    int ans=0;\n    for(int i=1;i<=min(len[x],len[y]);i++){\n        int flag=1,k=0;\n        for(int j=len[x]-i;j<len[x]&&k<i;j++,k++)if(s[x][j]!=s[y][k])flag=0;\n        if(flag)ans=i;\n    }return ans;\n}yixia\nbool check(int x,int y){\n    int flag=0;\n    for(int i=0,k;i+len[x]<=len[y];i++,k=1){\n        for(int j=0;j<len[x];++j)if(s[x][j]!=s[y][i+j])k=0;\n        flag|=k;\n    }return flag;\n}\nchar tmp[maxn];\nint d;\nvoid dfs(int l,int pst){\n    if(l<L){\n        for(int i=0,k=0;i<n;i++){\n            if(~pst)k=nxt[pst][i];\n            for(int j=k+1;j<=len[i];j++)if(!vis[i]&&!del[i])tmp[l+j-k]=s[i][j-1];\n            if(!del[i]&&!vis[i])vis[i]=1,d++,dfs(l+len[i]-k,i),vis[i]=0,d--;k=0;\n        }return ;\n    }if(l==L&&d==m){cnt++;for(int i=1;i<=L;++i)ans[cnt][i]=tmp[i];}\n}\nint main(){\n    L=read();m=n=read();f[0][0][0]=1;ll ret=0;\n    for(int i=0;i<n;i++)scanf(\"%s\",s[i]),len[i]=strlen(s[i]),AC.insert(s[i],i);\n    for(int i=0;i<n;i++)for(int j=0;j<n;j++)if(i!=j)nxt[i][j]=get_nxt(i,j);\n    for(int i=0;i<n;i++)for(int j=0;j<n;j++)if(i!=j)del[i]=(check(i,j)?:del[i]);\n    for(int i=0;i<n;i++)if(del[i])m--;\n    AC.make_fail();\n    for(int i=1;i<=L;i++)\n        for(int j=0;j<=tot;j++)\n            for(int l=0;l<(1<<n);l++)\n                if(f[i-1][j][l])\n                    for(int ch=0;ch<26;ch++)\n                        f[i][trie[j][ch]][l|ed[trie[j][ch]]]+=f[i-1][j][l];\n    for(int i=0;i<=tot;i++)ret+=f[L][i][(1<<n)-1];write(ret);\n    if(ret<=42){\n        dfs(0,-1);\n        for(int i=1;i<=cnt;i++)pos[i]=i;\n        sort(pos+1,pos+cnt+1,cmp);\n        for(int i=1;i<=cnt;i++)printf(\"%s\\n\",ans[pos[i]]+1);\n    }\n    return 0;\n}\n```",
        "postTime": 1548420553,
        "uid": 43012,
        "name": "Luvwgyx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4045 \u3010[JSOI2009]\u5bc6\u7801\u3011"
    },
    {
        "content": "\n\u8bf4\u5b9e\u5728\u7684\uff0c\u8bb2\u771f\uff0c\u601d\u8def\u5e76\u4e0d\u662f\u5f88\u96be\n\n\u4f46\u662f\u7531\u4e8e\u81ea\u5df1\u8111\u62bd\u4e86\uff0c\n\n\u6240\u4ee5\u51e0\u4e4e\u603c\u4e86\u4e00\u4e0a\u5348\n\n\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d\uff0c\n\n\u4e0d\u8981\u76f4\u63a5\u7ed9\u5b57\u7b26\u4e32\u6392\u5e8f \n\n\u4e0d\u8981\u76f4\u63a5\u7ed9\u5b57\u7b26\u4e32\u6392\u5e8f\n\n\u771f\u7684\u4e0d\u8981\u76f4\u63a5\u7ed9\u5b57\u7b26\u4e32\u6392\u5e8f\n\n\u4e0d\u7136\u5f88\u5bb9\u6613\u7ffb\u8f66\u7684\u2026\u2026 \n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u9898\u89e3\uff1a\n\n \n\u4e00\u4e32\u5bc6\u7801\uff0c\u5fc5\u987b\u5305\u542b\u4ee5\u4e0b\u6240\u6709\u7684\u5355\u8bcd\n\n\u5f88\u663e\u7136\uff0ctrie\u4e0a\u9762\u8dd1AC\u81ea\u52a8\u673a\u6784\u5efafail\u6307\u9488\n\n\u7136\u540edp\n\n\u51e0\u4e4e\u5df2\u7ecf\u6210\u4e3aAC\u81ea\u52a8\u673a\u7684\u4e00\u4e2a\u5957\u8def\u4e86\u2026\u2026 \n\n\u5176\u5b9e\u5728\u6211\u4eec\u6ca1\u770b\u6570\u636e\u8303\u56f4\u4e4b\u524d\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u80c6\u731c\u6d4b\n\n\u65e2\u7136\u662f\u5305\u542b\u6240\u6709\u5355\u8bcd\u7684\u95ee\u9898\uff0c\u6ca1\u51c6\u662f\u72b6\u538bdp\u5462\uff1f\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4 \n\nn<=10\n\n\u5f88\u597d\uff0c\u72b6\u538b\u4e0d\u89e3\u91ca\n\ndp[i][j][S]\n\n\u957f\u5ea6\u4e3ai\uff0c\u5e76\u4e14\u5f53\u524d\u72b6\u6001\u5728trie\u6811\u4e0a\u7b2cj\u4e2a\u8282\u70b9\uff0c\u5355\u8bcd\u4f7f\u7528\u4e3aS\u7684\u65b9\u6848\u6570\n\n\u5728\u6211\u4eec\u6784\u5efatrie\u6811\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6709\u5355\u8bcd\u7684\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u8bbe\u7f6e\u4e00\u4e2afrom\uff0c\u6807\u8bb0\u5b83\u6765\u81ea\u7b2c\u51e0\u4e2a\u5355\u8bcd\n\n\u8fd9\u6837\uff0c\u5728dp\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4ed6\u548cS\u53d6\u6216\uff0c\u5c06\u8fd9\u4e2a\u5355\u8bcd\u5b58\u8fdbS\u91cc\u9762\u5411\u4e0b\u8f6c\u79fb\n\n\u90a3\u4e48\u8f6c\u79fb\u7684\u65b9\u7a0b\u5c31\u53ef\u4ee5\u975e\u5e38\u8f7b\u6613\u7684\u63a8\u51fa\u4e86\uff0c\n\n\u9996\u5148\uff0c\u6211\u4eec\u679a\u4e3e\u63a5\u4e0b\u6765\u53ef\u80fd\u53bb\u5230\u7684\u5355\u8bcd(a-z)\n\n\u7136\u540e\u4ece\u5f53\u524d\u7684j\u5f80\u4e0b\u8d70\u4e00\u5c42\n\n\u540c\u65f6\u957f\u5ea6i+1\n\n\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u6070\u597d\u662f\u4e2a\u5355\u8bcd\u8282\u70b9\uff0c\u4e0d\u7ba1\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u52a0\u5165\u5230S\u91cc\u9762\u53bb\uff08\u5e76\u6ca1\u6709\u89c4\u5b9a\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff09\n\n\u6700\u540e\u7edf\u8ba1dp[Len][trie\u6811\u6240\u6709\u8282\u70b9][S\u603b]\u5373\u53ef\uff0c\n\n\u5f88\u597d\uff0c\u5982\u679c\u4f60\u771f\u7684\u8fd9\u4e48\u5e72\u7684\u8bdd\uff0c\n\n\u4f60\u53ea\u670940\u5206\n\n\u4e3a\u4ec0\u4e48\uff1f\n\n\u5982\u679c\u5355\u8bcd\u662f ca\u548ca\n\n\u5f53\u6211\u4eec\u53d6ca\u4e4b\u540e\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u5df2\u7ecf\u53d6\u4e86a\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u5355\u8bcd\u90fd\u5df2\u7ecf\u51fa\u73b0\u4e86\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u7684\u4e0a\u8ff0\u7b97\u6cd5\u5e76\u4e0d\u80fd\u5bf9\u6b64\u4f5c\u51fa\u53cd\u5e94\uff0c\u4ed6\u4f1a\u8ba4\u4e3a\uff0c'a'\uff0c\u6ca1\u6709\u51fa\u73b0\u8fc7\u3002\n\n\u600e\u4e48\u529e\uff1f\n\n\u53bb\u6389\u91cd\u590d\u5355\u8bcd\uff0c\u53bb\u9664\u88ab\u5305\u542b\u5355\u8bcd\uff0c\n\n\u53ea\u8981\u662f\u88ab\u5176\u4ed6\u5355\u8bcd\u6240\u5305\u542b\u7684\u5355\u8bcd \u5220\u6389\uff01\n\n\u91cd\u590d\u7684\u5355\u8bcd\uff0c\u5220\u6389\uff01\n\n\u8fd9\u4e48\u521a\uff1f\n\n\u5c31\u662f\u8fd9\u4e48\u521a\uff01\n\n\u7136\u540edp\u5c31\u884c\u4e86\n\n\u5f53\u7136\uff0c\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\n\nS\u603b\u7684\u5b9e\u9645\u610f\u4e49\u6307\u7684\u662f\u6ca1\u6709\u88ab\u5220\u9664\u7684\u5355\u8bcd\u7684\u96c6\u5408\n\n\u7b49\u7b49\u2026\u2026\n\n\u8fd8\u6709\u8f93\u51fa\u65b9\u6848\u5462!\n\n\u66b4\u641c\uff01\n\n\u5f53\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e42\u65f6\n\n\u5b9e\u9645\u4e0a\u662f\u4e0d\u4f1a\u5b58\u5728\u5355\u4e2a\u5b57\u7b26\u7684\n\n\u4e25\u683c\u7684\u8bf4\uff0c\u5c31\u662f\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e42\u65f6\n\n\u5fc5\u7136\u662f\u6240\u6709\u5355\u8bcd\uff08\u53bb\u91cd\u540e\uff09\u4ee5\u67d0\u79cd\u987a\u5e8f\u76f8\u8fde\u6240\u7ec4\u6210\u7684\n\n\u76f4\u63a5\u66b4\u641c\u5c31\u597d\u4e86\n\n\u6ce8\u610f\u5904\u7406\u4e00\u4e0b\u5355\u8bcd\u95f4\u7684\u91cd\u590d\u524d\u540e\u7f00\n\n\u6211\u8fd9\u91cc\u7528\u4e86\u4e00\u79cd\u5f88\u66b4\u529b\u7684\u65b9\u6cd5\n\n\u7f51\u4e0a\u6709\u66f4\u597d\u7684 \n\n~~\u4f46\u6211\u89c9\u5f97\u6211\u7684\u66f4\u597d\u7406\u89e3~~\n\n\u611f\u89c9\u81ea\u5df1\u4ee3\u7801\u5de8\u4e11\u65e0\u6bd4\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nll dp[35][105][2105];\nstruct ha\n{\n    int next[26];\n    int fail;\n    int from;\n    ha()\n    {\n        memset(next,0,sizeof next);\n        fail=from=0;\n    }\n}trie[205];\nint Len,n,cnt;\nchar tmp[25][25];\nint q[2550];\nchar save[205];\nbool book[205];\nchar answer[55][205];\nint ranky[55];\nint co;\nint del[105];\nint all;\ninline void insert(char *s,int from)\n{\n    register int i,j,now=0,len=strlen(s);\n    all+=len;\n    for(i=0;i<len;i++)\n    {\n        j=s[i]-'a';\n        if(!trie[now].next[j])\n        trie[now].next[j]=++cnt;\n        now=trie[now].next[j];\n    }\n    trie[now].from=from;\n}\ninline void getfail()\n{\n    register int i,j,u,fail,head=1,tail=1;\n    for(i=0;i<26;i++)\n    if(trie[0].next[i])\n    q[tail++]=trie[0].next[i];\n    while(head<tail)\n    {\n        u=q[head++];\n        for(i=0;i<26;i++)\n        {\n            if(!trie[u].next[i])\n            {\n                trie[u].next[i]=trie[trie[u].fail].next[i];\n                continue;\n            }\n            q[tail++]=trie[u].next[i];\n            fail=trie[u].fail;\n            fail=trie[fail].next[i];\n            trie[trie[u].next[i]].fail=fail;\n        }\n    }\n}\ninline bool getin(int k,int l,int r)\n{\n    register int i,j=0;\n    for(i=l;i<=r;i++)\n    {\n        if(tmp[k][j]!=save[i]) return false;\n        j++;\n    }\n    return true;\n}\ninline int in(int k,int loc,int len)//loc \u8981\u63d2\u7684\u4f4d\u7f6e\uff0c\u5373\u672b\u5c3e\u51cf\u4e00 \n{\n    register int i,j;\n    int reme=loc;\n    for(i=loc-1;i>=0;i--)\n    if(getin(k,i,loc-1))\n    reme=i;\n    i=reme;\n    for(j=0;j<len;j++)\n    save[i]=tmp[k][j],i++;\n    if(i<loc) i=loc;\n    return i;\n}\ninline void out(int now)\n{\n    for(register int i=0;i<now;i++)\n    putchar(save[i]);\n    putchar('\\n');\n}\ninline void dfs(int now,int rest)\n{\n    register int i,j,k;\n    //out(now);\n    if(now>Len) return;\n    if(now==Len&&rest==0)\n    {\n        co++;\n        for(i=0;i<Len;i++)\n        answer[co][i]=save[i];\n        return;\n    }\n    else\n    if(now==Len||rest==0) return;\n    for(i=1;i<=n;i++)\n    {\n        if(del[i]||book[i]) continue;\n        int len=strlen(tmp[i]);\n        j=in(i,now,len);\n        book[i]=true;\n        dfs(j,rest-1);\n        book[i]=false;\n    }\n}\ninline bool check(char *T,char *s)\n{\n    register int i,j,k,l1=strlen(T),l2=strlen(s);\n    if(l1<l2) return false;\n    for(i=0;i<l1;i++)\n    {\n        if(l1-i<l2) return false;\n        for(k=i,j=0;j<l2;j++)\n        {\n            if(T[k]!=s[j]) \n            break;\n            k++; \n        }\n        if(j==l2)\n        return true;\n    }\n    return false;\n}\ninline bool cmp(int x,int y)\n{\n     for(int i=0;i<Len;i++)\n     if(answer[x][i]!=answer[y][i])return answer[x][i]<answer[y][i];\n     return 0;\n}\ninline void _swap(char *a,char *b)\n{\n\t register int i;\n     for(i=0;i<Len;i++)\n     {\n     \tswap(a[i],b[i]);\n     }\n}\nint main()\n{\n    scanf(\"%d%d\",&Len,&n);\n    register int a,b,c,i,j,k;\n    int S=1<<n;\n    for(i=1;i<=n;i++)\n    scanf(\"%s\",tmp[i]);\n    for(a=1;a<=n;a++)\n    {\n    \tfor(b=1;b<n;b++)\n    \t{\n    \t\tif(strcmp(tmp[b],tmp[b+1])==1)\n    \t\tswap(tmp[b],tmp[b+1]);\n    \t}\n    }\n    for(a=1;a<=n;a++)\n    {\n    \tif(del[a]) continue;\n        for(b=1;b<=n;b++)\n    \tif(b!=a&&!del[b])\n    \tif(check(tmp[a],tmp[b]))\n    \tdel[b]=1;\n    }\n    for(i=1;i<=n;i++)\n    if(!del[i])\n    insert(tmp[i],i);\n    getfail();\n    dp[0][0][0]=1;\n    for(a=0;a<Len;a++)\n    {\n        for(b=0;b<=cnt;b++)\n        {\n            for(c=0;c<S;c++)\n            {\n                for(k=0;k<26;k++)\n                {\n                    int Next=trie[b].next[k];\n                    int tmpc=c;\n                    if(trie[Next].from)\n                    {\n                        j=trie[Next].from;\n                        j=(1<<(j-1));\n                        tmpc|=j;\n                    }\n                    dp[a+1][Next][tmpc]+=dp[a][b][c];\n                }\n            }\n        }\n    }\n    ll ans=0;\n    int right=0;\n    for(a=1;a<=n;a++)\n    if(!del[a])\n    right+=(1<<(a-1));\n    for(a=0;a<=cnt;a++)\n    ans+=dp[Len][a][right];\n    cout<<ans<<endl;\n    if(ans<=42)\n    {\n    \tint tot=n;\n        for(a=1;a<=n;a++)\n        if(del[a])\n        tot--;\n     \tdfs(0,tot);\n        for(a=1;a<=co;a++)\n        ranky[a]=a;\n        sort(ranky+1,ranky+1+co,cmp);\n        for(a=1;a<=co;a++)\n        puts(answer[ranky[a]]);\n    }\n    return 0;\n}\n```\n\u54e6\uff0c\u5bf9\u4e86\uff0c\u5b66\u5f1f\u7684\u535a\u5ba2\uff0c\u63a8\u8350\u4e00\u4e0b [http://www.cnblogs.com/dedicatus545/]",
        "postTime": 1523936162,
        "uid": 39675,
        "name": "longgod",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4045 \u3010[JSOI2009]\u5bc6\u7801\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4045)\n\n# \u9898\u610f\n\u7ed9\u5b9a $n$ \u4e2a\u6a21\u5f0f\u4e32\uff0c\u6c42\u957f\u5ea6\u4e3a $L$ \u4e14\u5305\u542b\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u6587\u672c\u4e32\u4e2a\u6570\uff0c\u82e5\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e $42$\uff0c\u5219\u6309\u5b57\u5178\u5e8f\u5347\u5e8f\u8f93\u51fa\u5168\u90e8\u6587\u672c\u4e32\u3002\n# \u601d\u8def+\u5b9e\u73b0\n## \uff081\uff09AC\u81ea\u52a8\u673a\n\u9996\u5148\u591a\u6a21\u5f0f\u4e32\u5339\u914d\u95ee\u9898\u81ea\u7136\u4f1a\u60f3\u5230AC\u81ea\u52a8\u673a\u3002\n\n\u5176\u6b21\uff0c\u5f53\u4e00\u4e2a\u72b6\u6001 $u$ \u7684\u5931\u914d\u6307\u9488 $f$ \u5305\u542b\u67d0\u4e2a\u6a21\u5f0f\u4e32\uff0c\u90a3\u4e48 $u$ \u4e5f\u5305\u542b\u8be5\u6a21\u5f0f\u4e32\uff0c\u4e8e\u662f\u5728\u6784\u5efa\u5931\u914d\u6307\u9488\u65f6\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u6240\u5305\u542b\u7684\u6a21\u5f0f\u4e32\u72b6\u6001\u3002\n\n```cpp\nstruct AC_Automaton{\n\tint tr[105][26],tot,fail[105],mark[105];\n\tinline void insert(int k){\n\t\tint u=0,l=strlen(s[k]+1);\n\t\tfor(int i=1;i<=l;++i){\n\t\t\tif(!tr[u][s[k][i]-'a']) tr[u][s[k][i]-'a']=++tot;\n\t\t\tu=tr[u][s[k][i]-'a'];\n\t\t}\n\t\tmark[u]|=(1<<(k-1));\n\t}\n\tinline void build(){\n\t\tqueue<int> q;\n\t\tfor(int i=0;i<26;i++){\n\t\t\tif(tr[0][i]) q.push(tr[0][i]);\n\t\t}\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();\n\t\t\tq.pop();\n\t\t\tfor(int i=0;i<26;i++){\n\t\t\t\tif(tr[u][i]){\n\t\t\t\t\tfail[tr[u][i]]=tr[fail[u]][i];\n\t\t\t\t\tq.push(tr[u][i]);\n\t\t\t\t\tmark[tr[u][i]]|=mark[tr[fail[u]][i]];\n\t\t\t\t}\n\t\t\t\telse tr[u][i]=tr[fail[u]][i];\n\t\t\t}\n\t\t}\n\t}\n}ac;\n```\n## \uff082\uff09\u72b6\u538bdp\n\u4e0e[P4052 \u6587\u672c\u751f\u6210\u5668](https://www.luogu.com.cn/problem/P4052)\u7684\u601d\u8def\u76f8\u4f3c\uff0c\u6211\u4eec\u8003\u8651dp\u3002\n\n\u7b80\u5355\u6982\u8ff0\u4e00\u4e0b\u6587\u672c\u751f\u6210\u5668\u90a3\u9898\u7684\u601d\u8def\uff0c\u56e0\u4e3a\u201c\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6a21\u5f0f\u4e32\u201d\u4e0e\u201c\u4e0d\u5305\u542b\u4efb\u4f55\u6a21\u5f0f\u4e32\u201d\u662f\u201c\u4e92\u8865\u201d\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u6c42\u4e0d\u5305\u542b\u4efb\u4f55\u6a21\u5f0f\u4e32\u7684\u65b9\u6848\u6570\u5373\u53ef\uff1b\u4e0d\u8fc7\u672c\u9898\u8981\u6c42\u5305\u542b\u6240\u6709\u6a21\u5f0f\u4e32\u7684\u65b9\u6848\u6570\uff0c\u9700\u8981\u5728\u8f6c\u79fb\u4e2d\u9644\u5e26\u5f53\u524d\u72b6\u6001\uff08\u5982\u679c\u662f\u4e0d\u5305\u542b\u76f4\u63a5\u53ea\u9009\u62e9\u6ca1\u6709\u6807\u8bb0\u7684\u8282\u70b9\u5373\u53ef\uff09\u3002\n\n\u8bbe\u7f6e $dp(i,j,u)$\uff0c\u6807\u8bb0\u957f\u5ea6\u4e3a $i$\uff0c\u5f53\u524d\u5df2\u7ecf\u5305\u542b\u7684\u6a21\u5f0f\u4e32\u72b6\u6001\u4e3a $j$\uff0c\u5f53\u524d\u8282\u70b9\u662f $u$ \u7684\u65b9\u6848\u6570\u3002\u6211\u4eec\u4ee4 $u$ \u5411\u4e0b\u7684\u4e00\u4e2a\u8282\u70b9\u4e3a $v$\uff0c\u7528\u5237\u8868\u6cd5\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a$dp(i+1,j|mark(v),v)=\\sum dp(i,j,u)$\uff0c\u6700\u540e\u7edf\u8ba1\u5bf9\u5e94\u957f\u5ea6\u6bcf\u79cd\u72b6\u6001\u7b54\u6848\u4e4b\u548c\u5373\u4e3a\u7b54\u6848\u3002\n\n```cpp\ndp[0][0][0]=1;\nfor(int i=0;i<=len;i++){\n\tfor(int j=0;j<(1<<n);j++){\n\t\tfor(int u=0;u<=ac.tot;u++){\n\t\t\tif(!dp[i][j][u]) continue;\n\t\t\tfor(int k=0;k<26;k++){\n\t\t\t\tint v=ac.tr[u][k];\n\t\t\t\tdp[i+1][j|ac.mark[v]][v]+=dp[i][j][u];\n\t\t\t}\n\t\t}\n\t}\n}\nfor(int i=0;i<=ac.tot;i++){\n\tans+=dp[len][(1<<n)-1][i];\n}\nprintf(\"%lld\\n\",ans);\n```\n## \uff083\uff09\u8f93\u51fa\u65b9\u6848\n\u56e0\u4e3a\u5f53\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e $42$ \u65f6\u624d\u8f93\u51fa\u65b9\u6848\uff0c\u4e14\u8f6c\u79fb\u8fc7\u7a0b\u4e2d\u4e0d\u4fbf\u8bb0\u5f55\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6700\u540e $dfs$ \u8f93\u51fa\u65b9\u6848\u3002 \n\n\u89c2\u5bdf $42$ \u8fd9\u4e2a\u6570\uff0c\u8c8c\u4f3c\u6ca1\u6709\u7279\u522b\u4e4b\u5904\uff0c\u4f46\u6070\u6070\u56e0\u4e3a\u5b83\u5f88\u5c0f\uff0c\u6240\u4ee5**\u6240\u6709\u6587\u672c\u4e32\u90fd\u4e0d\u4f1a\u5b58\u5728\u7a7a\u4f59\u4f4d\u7f6e**\uff0c\u6bd4\u5982\u6a21\u5f0f\u4e32\u4e3a $\\text{down}$ \u548c $\\text{need}$\uff0c\u8981\u6c42\u957f\u5ea6\u4e3a $8$\uff0c\u56e0\u4e3a\u5b58\u5728\u91cd\u53e0\u7684\u9996\u5c3e\uff0c\u6240\u4ee5\u67d0\u4e9b\u6587\u672c\u4e32\u53ef\u4ee5\u5199\u4f5c\u5f62\u5982 $\\text{needownX}$ \u7684\u6837\u5b50\uff0c\u800c\u540c\u65f6\u8fd9\u4e2a $\\text{X}$ \u4e5f\u53ef\u4ee5\u653e\u5728\u6587\u672c\u4e32\u9996\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u5df2\u7ecf\u6709 $52$ \u79cd\u9009\u62e9\u4e86\uff0c\u662f\u4e00\u5b9a\u4e0d\u5728\u8f93\u51fa\u65b9\u6848\u7684\u8303\u56f4\u5185\u7684\u3002\n\n\u6362\u8a00\u4e4b\uff0c\u6587\u672c\u4e32\u4e00\u5b9a\u662f\u201c\u7d27\u51d1\u201d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa\u4efb\u610f\u4e24\u4e2a\u6a21\u5f0f\u4e32\u7684\u9996\u5c3e\u91cd\u590d\u957f\u5ea6\uff0c\u6df1\u641c\u5224\u65ad\u957f\u5ea6\u662f\u5426\u7b49\u4e8e $L$ \u5e76\u6309\u5b57\u5178\u5e8f\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6700\u540e\u7b54\u6848\u9700\u8981\u53bb\u91cd\u3002\n```cpp\ninline void dfs(int x){\n\tif(x==n+1){\n\t\tstring now=\"\";\n\t\tfor(int i=1;i<=n;i++){\n        \t//l[i][j]\u8868\u793a\u7b2ci\u4e2a\u6a21\u5f0f\u4e32\u7684\u540e\u7f00\u4e0e\u7b2cj\u4e2a\u6a21\u5f0f\u4e32\u524d\u7f00\u7684\u91cd\u5408\u957f\u5ea6\n\t\t\tint pos=(i==1)?0:l[ord[i-1]][ord[i]];\n\t\t\tfor(int j=pos+1;j<=strlen(s[ord[i]]+1);j++){\n\t\t\t\tnow+=s[ord[i]][j];\n\t\t\t}\n\t\t}\n\t\tif(now.size()==len){\n\t\t\t_out.push_back(now);\n\t\t}\n\t\treturn;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!vis[i]){\n\t\t\tvis[i]=1,ord[x]=i;\n\t\t\tdfs(x+1);\n\t\t\tvis[i]=0,ord[x]=0;\n\t\t}\n\t}\n}\n```",
        "postTime": 1645683787,
        "uid": 321177,
        "name": "SoyTony",
        "ccfLevel": 6,
        "title": "\u9898\u89e3\u2014\u2014P4045 [JSOI2009]\u5bc6\u7801"
    },
    {
        "content": "\u663e\u7136 AC \u81ea\u52a8\u673a\uff0c\u5427\n\n\u548c [\u6587\u672c\u751f\u6210\u5668](https://www.luogu.com.cn/problem/P4052) \u90a3\u9898\u7c7b\u4f3c\uff0c\u8003\u8651\u72b6\u538b DP\uff0c\u4ee4 $dp_{i,j,k}$ \u8868\u793a\u5230\u7b2c $i$ \u4f4d\uff0c\u81ea\u52a8\u673a\u4e0a\u662f $j$\uff0c\u5305\u542b\u96c6\u5408 $k$ \u7684\u6a21\u5f0f\u4e32\u4e2a\u6570 .\n\n\u4e8e\u662f\u8f6c\u79fb\u5c31\u5728 AC \u81ea\u52a8\u673a\u4e0a\u8d70\u4e00\u6b65\u5373\u53ef\uff08\u5237\u8868\uff09.\n\n\u7136\u540e\u8fd9\u4e2a\u8f93\u51fa\u65b9\u6848\u5c31\u5f88\u6076\u5fc3\uff0c\u6ce8\u610f\u5230\u5982\u679c\u8f93\u51fa\u65b9\u6848\u5219\u7b54\u6848\u4e0d\u8d85\u8fc7 $42$\uff0c\u4e8e\u662f\u66b4\u641c\u5373\u53ef .\n\nDP \u8f6c\u79fb\u548b\u5199\u7684\u66b4\u641c\u5c31\u548b\u5199\uff0c\u672c\u8d28\u662f\u76f8\u540c\u7684 .\n\n**\u6570\u7ec4\u522b\u5f00\u5c0f \u6570\u7ec4\u522b\u5f00\u5c0f \u6570\u7ec4\u522b\u5f00\u5c0f \u6570\u7ec4\u522b\u5f00\u5c0f \u6570\u7ec4\u522b\u5f00\u5c0f**\n\n\n\u4ee3\u7801\uff1a\n```cpp\nusing namespace std;\ntypedef long long ll;\nconst int L = 27, N = 111, T = 1<<11, alphabet = 26;\ninline int trans(const char c){return c - 'a';}\nint n, m;\nll dp[L][N][T];\nstruct AC\n{\n\tint tr[N][alphabet], mark[N], fail[N], root, cc;\n\tinline void insert(int id, string s)\n\t{\n\t\tint u = root, l = s.length();\n\t\tfor (int i=0; i<l; i++)\n\t\t{\n\t\t\tint _ = trans(s[i]);\n\t\t\tif (!tr[u][_]) tr[u][_] = ++cc;\n\t\t\tu = tr[u][_];\n\t\t} mark[u] |= (1 << id);\n\t}\n\tinline void build()\n\t{\n\t\tqueue<int> q; fail[root] = root;\n\t\tfor (int i=0; i<alphabet; i++)\n\t\t{\n\t\t\tif (tr[root][i]){q.push(tr[root][i]); fail[tr[root][i]] = root;}\n\t\t\telse tr[root][i] = root;\n\t\t}\n\t\twhile (!q.empty())\n\t\t{\n\t\t\tint u = q.front(); q.pop(); mark[u] |= mark[fail[u]];\n\t\t\tfor (int i=0; i<alphabet; i++)\n\t\t\t{\n\t\t\t\tif (tr[u][i]){fail[tr[u][i]] = tr[fail[u]][i]; q.push(tr[u][i]); mark[tr[u][i]] |= mark[fail[tr[u][i]]];}\n\t\t\t\telse tr[u][i] = tr[fail[u]][i];\n\t\t\t}\n\t\t}\n\t}\n\tinline ll DP()\n\t{\n\t\tdp[0][0][0] = 1;\n\t\tfor (int i=0; i<n; i++)\n\t\t\tfor (int j=0; j<=cc; j++)\n\t\t\t\tfor (int s=0; s<(1<<m); s++)\n\t\t\t\t{\n\t\t\t\t\tif (!dp[i][j][s]) continue;\n\t\t\t\t\tfor (int k=0; k<alphabet; k++) // trans\n\t\t\t\t\t{\n\t\t\t\t\t\tint v = tr[j][k];\n\t\t\t\t\t\tdp[i+1][v][s | mark[v]] += dp[i][j][s];\n\t\t\t\t\t}\n\t\t\t\t}\n\t    ll ans = 0;\n\t    for (int i=0; i<=cc; i++) ans += dp[n][i][(1<<m)-1];\n\t    return ans;\n\t}\n\tAC(){root = cc = 0;}\n}ac;\nbool vis[L][N][T], chk[L][N][T];\nint mov[L];\nbool dfs(int i, int j, int s)\n{\n\tif (i == n)\n\t{\n\t\tvis[i][j][s] = true;\n\t\treturn chk[i][j][s] = (s == (1<<m)-1);\n\t}\n\tif (vis[i][j][s]) return chk[i][j][s];\n\tvis[i][j][s] = true;\n\tbool ans = false;\n\tfor (int k=0; k<alphabet; k++)\n\t\tans |= dfs(i+1, ac.tr[j][k], s | ac.mark[ac.tr[j][k]]);\n\treturn chk[i][j][s] = ans;\n}\nvoid output(int i, int j, int s)\n{\n\tif (!chk[i][j][s]) return ;\n\tif (i == n)\n\t{\n\t\tfor (int p=1; p<=n; p++) putchar(mov[p] + 'a');\n\t\tputs(\"\"); return ;\n\t}\n\tfor (int k=0; k<alphabet; k++)\n\t{\n\t\tmov[i+1] = k;\n\t\toutput(i+1, ac.tr[j][k], s | ac.mark[ac.tr[j][k]]);\n\t}\n}\nint main()\n{\n\tstring tmp; scanf(\"%d%d\", &n, &m);\n\tfor (int i=1; i<=m; i++){cin >> tmp; ac.insert(i-1, tmp);}\n\tac.build();\n\tll ans = ac.DP();\n\tprintf(\"%lld\\n\", ans);\n\tif (ans > 42) return 0;\n\tdfs(0, 0, 0); output(0, 0, 0);\n\treturn 0;\n}\n```",
        "postTime": 1647488587,
        "uid": 227514,
        "name": "jijidawang",
        "ccfLevel": 0,
        "title": "P4045"
    }
]