[
    {
        "content": "### \u7384\u5b66\u95ee\u9898\uff1f\n\n\u672c\u9898\u7684SPJ\u4f3c\u4e4e\u5df2\u7ecf\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u4e86\uff0c\u53ea\u8981 **\u6587\u672b\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\u548c\u56de\u8f66** \u5c31\u80fd\u6b63\u5e38\u8bc4\u6d4b\u3002\n\n--------\n\n### \u5ba1\u9898\n\n\u672c\u9898\u7ed9\u51fa\u4e86`26`\u4e2a\u5b57\u6bcd\u4e0e\u6570\u5b57\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u8981\u6c42\u5c06\u4e00\u4e32\u6570\u5b57`\u7ffb\u8bd1`\u4e3a\u51e0\u4e2a\u5355\u8bcd\u3002\n\n\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u9700\u8981\u5173\u6ce8\u5404\u4e2a\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u5177\u4f53\u662f\u4ec0\u4e48\u7684\uff0c\u53ea\u9700\u8981\u5b58\u8d77\u6765\u8f93\u51fa\u7684\u65f6\u5019\u7528\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u5b8c\u5168\u53ef\u4ee5\u8f6c\u6362\u4e3a\u7eaf\u6570\u5b57\u64cd\u4f5c\u3002\n\n\u5177\u4f53\u5730\u8bf4\uff1a`the->732`\uff0c`she->732`\uff0c\u5bf9\u4e8e\u5bc6\u7801\u4e2d\u7684`732`\uff0c\u5b83\u4eec\u662f\u5b8c\u5168\u7b49\u4ef7\u7684\u3002\u6240\u4ee5\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4\u7528\u4e8e\u8f6c\u6362\uff1a\n\n```cpp\nconst char st[26]={1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,7,8,8,8,9,9,9};\n```\n\n\u7136\u540e\u9898\u76ee\u53d8\u6210\u4e86\uff1a\u7ed9\u5b9a\u76ee\u6807\u4e32\uff0c\u8981\u6c42\u5c06\u5b83\u62c6\u89e3\u4e3a\u591a\u4e2a\u6a21\u5f0f\u4e32\u9996\u5c3e\u76f8\u8fde\u7684\u7ed3\u679c\u3002\n\n~~AC\u81ea\u52a8\u673a~~**\u5b57\u5178\u6811+\u6df1\u5ea6\u4f18\u5148\u641c\u7d22**\n\n--------\n\n### Trie\n\n\u5148\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\ninline void init(char *a)\n{\n  register int i=0;\n  for(;*a;++i,++a)\n  {\n    b[i]=st[*a-'a'];\n  }\n  b[i]='\\0';\n  return;\n}\n```\n\n```cpp\ninline void insert(char *a,const int &id)\n{\n  register trie *p=head;\n  for(;*a;++a)\n  {\n    if(p->son[*a])\n    {\n      p=p->son[*a];\n    }\n    else\n    {\n      p=p->son[*a]=++mtp;\n    }\n  }\n  p->end=id;\n  return;\n}\n```\n\n\u6211\u5148\u4f7f\u7528`init(str[i])`\u5c06`str[i][]`\uff08\u7b2c`i`\u4e2a\u5355\u8bcd\uff09\u8f6c\u6362\u4e3a\u7eaf\u6570\u5b57\u4fdd\u5b58\u5728`b[]`\u4e2d\uff0c\u7136\u540e\u4f7f\u7528`insert(b,i)`\u6267\u884c\u63d2\u5165\u64cd\u4f5c\u3002\u4e3a\u4e86\u65b9\u4fbf\u641c\u5230\u7b54\u6848\u4e4b\u540e\u8f93\u51fa\uff0c\u6211\u5c06\u5355\u8bcd\u7684\u7f16\u53f7`i`\u4f20\u9012\u8fdb\u51fd\u6570\uff0c\u7528\u7f16\u53f7\u4f5c\u4e3a`Trie`\u4e2d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u6807\u8bb0`Trie::end`\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u4e00\u8fb9\u6df1\u641c\u4e00\u8fb9\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u53e6\u5916\uff0c\u6bd4\u5982`the->732`&`she->732`\uff0c\u5c31\u4f1a\u6267\u884c\u4e24\u6b21\u5b8c\u5168\u76f8\u540c\u7684\u63d2\u5165\u8fc7\u7a0b\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6309\u7167\u9898\u610f\uff0c\u5b83\u4eec\u5b8c\u5168\u7b49\u4ef7\uff0c`end`\u4e2d\u4f1a\u4fdd\u5b58\u8f83\u665a\u63d2\u5165\u7684\u90a3\u4e2a\u5355\u8bcd\u7684\u7f16\u53f7\uff0c\u800c\u9898\u76ee\u53ea\u8981\u6c42\u8f93\u51fa\u4e00\u7ec4\u53ef\u884c\u89e3\u3002\n\n-------\n\n\u503c\u5f97\u4e00\u63d0\u7684\u662f`insert(b,i)`\u524d\u6211\u8fd8\u8fdb\u884c\u4e86\u7279\u5224`if(*b)`\uff1a\n\n```cpp\n  for(i=1;i<=n;++i)\n  {\n    init(str[i]);\n    if(*b)insert(b,i);\n  }\n```\n\n\u8fd9\u4e2a\u64cd\u4f5c\u7684\u7528\u610f\u662f\u5224\u65ad`b[]`\u662f\u5426\u662f\u7a7a\u4e32\uff0c\u7406\u8bba\u4e0a\u6765\u8bf4\u4e0d\u53ef\u80fd\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u662f\u6211\u5207\u8fd9\u9053\u9898\u662f\u9047\u5230\u4e86`Trie`\u7684\u6839\u8282\u70b9\u83ab\u540d\u5176\u5999\u88ab\u6807\u8bb0\u4e3a\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u73b0\u8c61\uff0c\u5c31\u8fd9\u6837\u89e3\u51b3\u4e86......\u76ee\u524d\u8fd8\u6ca1\u6709\u67e5\u51fa\u95ee\u9898\u6839\u6e90\uff0c\u5982\u679c\u5927\u4f6c\u4eec`AC`\u4e86\u8fd9\u9053\u9898\uff0c\u8bf7\u52b3\u9a7e\u524d\u5f80[\u8fd9\u91cc](https://www.luogu.org/discuss/show?postid=90782)\u5e2e\u6211\u770b\u770b\u662f\u4e0d\u662f\u6211\u54ea\u4e2a\u5730\u65b9\u5199**\u4e11**\u4e86\u3002\u3002\n\n-------\n\n### DFS\n\n\u5148\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\nvoid dfs(int x)\n{\n  register trie *p=head;\n  for(;a[x];)\n  {\n    if(p->end)\n    {\n      ans[++cnt]=p->end;\n      dfs(x);\n      --cnt;\n    }\n    if(p->son[a[x]])\n    {\n      p=p->son[a[x]];\n      ++x;\n    }\n    else\n    {\n      return;\n    }\n  }\n  if(p->end)\n  {\n    ans[++cnt]=p->end;\n    out();\n  }\n  return;\n}\n```\n\n##### \u53d8\u91cf\u8bf4\u660e\n\n`x`\u4e3a\u5f53\u524d\u5f85\u5339\u914d\u7684\u6570\u5b57\u7684\u4e0b\u6807\uff1b\n\n\u6307\u9488`p`\u7528\u4e8e\u68c0\u7d22`Trie`\u6811\uff1b\n\n`ans[]`\u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u641c\u5230\u7684\u72b6\u6001\u3002\n\n##### DFS\u8fc7\u7a0b\n\n\u6211\u4eec\u4f7f\u7528`Trie`\u5c06\u6240\u6709\u5355\u8bcd\u8bb0\u5f55\u540e\uff0c\u5bf9\u5bc6\u7801\u4e32\u4ece\u524d\u5230\u540e\u626b\u63cf\uff0c\u5e76\u5728`Trie`\u4e2d\u67e5\u8be2\uff0c\u6bcf\u67e5\u5230\u4e00\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\u6807\u8bb0\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5730\u65b9\u662f**\u6709\u53ef\u80fd**\u65ad\u5f00\u6210\u4e3a\u4e00\u4e2a\u5355\u8bcd\u7684\uff0c\u5c31\u4fdd\u5b58\u8fd9\u4e2a\u5355\u8bcd\u7684\u7f16\u53f7\uff08\u5373\u6bcf\u6b21\u641c\u5230`p->end!=0`\u8bf4\u660e\u53ef\u80fd\u8981\u4ece\u8fd9\u91cc\u5212\u65ad\uff0c\u5c31\u5148`ans[++cnt]=p->end`\uff0c\u4fdd\u5b58\u8fd9\u4e2a\u8bcd\u7684\u7f16\u53f7\uff0c`dfs(x)`\u628a\u5f53\u524d\u8fd9\u4e2a\u5f85\u5339\u914d\u4f4d\u7f6e\u7559\u7ed9\u4e0b\u4e00\u5c42\u641c\u7d22\uff0c\u5982\u679c\u56de\u6eaf\u56de\u6765\u4e86\uff0c`cnt--`\u6e05\u9664\u5373\u53ef\uff09\uff0c\u4ece\u8fd9\u4e2a\u5730\u65b9\u518d**\u9012\u5f52**\u4e00\u5c42\u8003\u8651\u662f\u5426\u53ef\u884c\u3002\u5982\u679c\u4e00\u76f4\u8fd9\u6837\u5230\u4e86\u5bc6\u7801\u4e32\u672b\u5c3e\uff0c\u5c31\u627e\u5230\u4e86\u4e00\u7ec4\u89e3\uff0c\u8f93\u51fa\u5373\u53ef\uff1b\u5982\u679c\u5230\u67d0\u4e2a\u5730\u65b9`Trie`\u4e0a\u5339\u914d\u4e0d\u5230\u4e86\uff0c\u5c31\u8bf4\u660e\u4e4b\u524d\u67d0\u4e2a\u5730\u65b9\u5212\u5206\u9519\u4e86\uff0c\u5e94\u8be5\u56de\u6eaf\uff0c`return`\u5373\u53ef\u3002\u5982\u679c\u4e00\u76f4\u9000\u56de\u5230`main()`\u90fd\u6ca1\u627e\u5230\u89e3\uff0c\u8bf4\u660e`No Solution!`\u3002\n\n\u5177\u4f53\u5730\u8bb2\uff08\u6211\u662f\u6307\u9488\u9009\u624b\uff0c\u5e0c\u671b\u770b\u5f97\u60ef\uff0c\u8bdd\u8bf4\u8fd9\u9053\u9898\u4f7f\u7528\u6307\u9488\u5f71\u54cd\u4e0d\u5927\uff09\uff0c\u6bcf\u6b21\u8c03\u7528`dfs()`\u65f6\u90fd\u5148\u8ba9\u4e00\u4e2a\u6307\u9488`p`\u6307\u5411`head`\uff0c\u4f7f\u7528`for`\u4ece\u53c2\u6570\u6307\u5b9a\u7684\u4f4d\u7f6e\u5411\u540e\u626b\u63cf\u3002\u6bcf\u6b21\u5faa\u73af\u5148\u770b\u6b64\u5904\u662f\u5426\u662f\u4e00\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff08`if(p->end)`\uff09\uff0c\u5982\u679c\u662f\u5c31`ans[++cnt]=p->end;dfs(x);`\u8fdb\u884c\u4e0b\u4e00\u5c42\u7684\u5339\u914d\uff0c\u5426\u5219\u67e5\u770b\u662f\u5426\u5b58\u5728\u540e\u7ee7\u8282\u70b9\u662f\u6570\u5b57`a[x]`\uff0c\u5982\u679c\u6709\u5c31`p=p->son[a[x]];x++;`\u5339\u914d\u4e0b\u4e00\u4e2a\u6570\u5b57\uff0c\u5426\u5219\u5339\u914d\u5931\u8d25`GG`\u4e86\uff0c`return`\u3002\u5c31\u8fd9\u6837\u4e00\u76f4\u5230\u5bc6\u7801\u4e32\u672b\u5c3e\uff08`a[x]=='\\0'`\uff09\uff0c\u8fd8\u6ca1\u5b8c\uff0c\u9700\u8981\u5224\u65ad\u5f53\u4e0b\u8fd9\u4e2a`p->end`\u662f\u4e0d\u662f`0`\uff0c\u5982\u679c\u662f`0`\u8bf4\u660e\u6700\u540e\u9762\u914d\u5230\u7684\u8fd9\u4e00\u5c0f\u6bb5\u5e76\u4e0d\u662f\u67d0\u4e2a\u5355\u8bcd\u7684\u7ed3\u5c3e\uff0c\u53ea\u80fd\u88ab\u8feb`return`\u7ee7\u7eed\u641c\u7d22\uff1b\u5982\u679c\u975e`0`\uff0c\u90a3\u4e48\u6211\u4eec\u7ec8\u4e8e\u627e\u5230\u4e86\u4e00\u7ec4\u7b54\u6848`ans[++cnt]=p->end;`\u4fdd\u5b58\u6700\u540e\u8fd9\u4e2a\u5355\u8bcd\u7684\u7f16\u53f7\uff0c`out();`\u8f93\u51fa\u627e\u5230\u7684\u5355\u8bcd\u5e8f\u5217~~\n\n### \u4ee3\u7801\n\n\n```cpp\n//P1245 \u7535\u8bdd\u53f7\u7801\n#include<cstdio>\n#include<cstdlib>\n#include \"memory.h\"\n#define MAXN 110\nusing namespace std;\nconst char st[26]={1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,7,8,8,8,9,9,9};\nstruct trie\n{\n  int end;\n  trie *son[17];\n  inline trie();\n}mmp[MAXN*MAXN],*mtp=mmp,*head=NULL;\nchar str[MAXN][MAXN],a[MAXN],b[MAXN];\nint ans[MAXN],cnt=0,n=0;\ninline void read(int&);\nvoid write(const int&);\ninline void insert(char*,const int&);\ninline void init(char*);\nvoid dfs(int);\ninline void out();\nint main()\n{\n  register int i=0;\n  head=++mtp;\n  scanf(\"%d\",&n);\n  scanf(\"%s\",a);\n  for(i=0;a[i];a[i++]^=48);\n  for(i=1;i<=n;++i)\n  {\n    scanf(\"%s\",str[i]);\n  }\n  for(i=1;i<=n;++i)\n  {\n    init(str[i]);\n    if(*b)insert(b,i);\n  }\n  dfs(0);\n  printf(\"No Solutions!\");\n  return 0;\n}\ninline trie::trie()\n{\n  end=0;\n  memset(son,0,sizeof(son));\n  return;\n}\ninline void out()\n{\n  register int i=0;\n  for(i=1;i<cnt;++i)\n  {\n    printf(\"%s \",str[ans[i]]);\n  }\n  printf(\"%s\",str[ans[cnt]]);\n  exit(0);\n}\nvoid dfs(int x)\n{\n  register trie *p=head;\n  for(;a[x];)\n  {\n    if(p->end)\n    {\n      ans[++cnt]=p->end;\n      dfs(x);\n      --cnt;\n    }\n    if(p->son[a[x]])\n    {\n      p=p->son[a[x]];\n      ++x;\n    }\n    else\n    {\n      return;\n    }\n  }\n  if(p->end)\n  {\n    ans[++cnt]=p->end;\n    out();\n  }\n  return;\n}\ninline void init(char *a)\n{\n  register int i=0;\n  for(;*a;++i,++a)\n  {\n    b[i]=st[*a-'a'];\n  }\n  b[i]='\\0';\n  return;\n}\ninline void insert(char *a,const int &id)\n{\n  register trie *p=head;\n  for(;*a;++a)\n  {\n    if(p->son[*a])\n    {\n      p=p->son[*a];\n    }\n    else\n    {\n      p=p->son[*a]=++mtp;\n    }\n  }\n  p->end=id;\n  return;\n}\n```\n\n\u5f31\u5f31\u6c42\u7ed9\u8fc7...",
        "postTime": 1545716472,
        "uid": 31841,
        "name": "Terrasse",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "\u4e00\u9053\u8001\u9898\u76ee\uff0c\u6ca1\u5565\u610f\u601d\uff0c\u52a8\u89c4\uff0c\u9012\u63a8\uff0c\u90fd\u4e0d\u9700\u8981\n\uff0c\u76f4\u63a5\u641c\u5427\u3002\n\u5728\u6d1b\u8c37\u4e0a\u662f\u4e0d\u8fc7\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u7f51\u7ad9\u4e0a\u8fc7\u4e86\uff08\u6bd4\u5982tsinsen\uff09\uff0c\u4f30\u8ba1special jugde \u7684\u95ee\u9898\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u5148p\u51facode\n\n\n------------\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<map>\n\nusing namespace std;\n\n//\u548c\u51ac\u4ee4\u8425\u7684\u4e00\u9053\u9898\u76ee\u5f88\u50cf\uff0c\u66f4\u590d\u6742\u3002\n//\u7531\u6b64\u53ef\u89c1\u9012\u63a8\u548c\u52a8\u89c4\u7684\u5173\u7cfb\u4e86\n//\u867d\u7136\u8fd9\u662f\u660e\u663e\u7684\u52a8\u89c4\uff0c\u4f46\u662f\u6ca1\u5fc5\u8981\u6253\n//\u4e0d\u8fc7\u8fd9\u662f\u4e2a\u5f88\u8001\u7684\u9898\u76ee\u4e86\uff0c\u6d1b\u8c37\u4e0a\u53ea\u670990\u4e2a\u4eba\u505a\uff0c1\u4e2a\u5bf9\u7684\u3002\u3002\u53ea\u6709\u4e00\u7bc7pascal\u9898\u89e3\uff0c\u6c99\u53d1\u88ab\u62a2\u4e86\u5f88\u4f24\u5fc3\u3002\u3002\u3002\n/*\nTips:\n  ascii\u4e2d a\u4e3a97,z\u4e3a122\n */\n\nint n;\nstring co;\nint ct=0;\nint C[100];\nstruct word{\n\tint loc;//\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u4f4d\u7f6e\n\tint len;//\u957f\u5ea6\n\tstring code;//\u5bf9\u5e94\u5bc6\u7801\n\tstring w;//string\u672c\u8eab\n}W[101];\nbool ok=false;\n\nvoid build_C(){\n\tfor (int i=0;i<12;i++)\n\t\tC[i]=i/3+1;\n\tC[12]=5;\n\tC[13]=5;\n\tfor (int i=14;i<26;i++)\n\t\tC[i]=(i+1)/3+1;\n}\n\nstring change(string s){\n\tint st=s.length();\n\tstring ans;\n\tfor (int i=0;i<st;i++){\n\t\tans=ans+(char)(C[s[i]-'a']+48);\n\t}\n\treturn ans;\n}\n\nbool cmp(word a,word b){\n\treturn a.loc<=b.loc;\n}\n\nbool check(int loc,string c){\n\tint maxn=loc+c.length();\n\tfor (int i=loc;i<=maxn-1;i++)\n\t\tif (co[i]!=c[i-loc])\n\t\t\treturn false;\n\treturn true;\n}\n\nvoid solve(int loc,string a){\n\tif (ok==true) //ok\u8868\u793a\u5df2\u7ecf\u627e\u5230\u89e3\u4e86\n\t\treturn ;\n\tif (loc==ct){\n\t\tif (!ok){\n\t\t\tok=true;\n\t\t\tint temp=a.length();\n\t\t\tfor (int i=0;i<temp-1;i++)\n\t\t\t\tcout<<a[i];\n\t\t\tcout<<endl;\n\t\t}\n\t\treturn ;\n\t}\n\tbool flag=false;\n\tfor (int i=1;i<=n;i++){\n\t\tif (!ok and  loc+W[i].len<=ct and check(loc,W[i].code)){\n\t\t\tsolve(loc+W[i].len,a+W[i].w+' ');\n\t\t\tflag=true;\n\t\t}\n\t}\n}\n\nint main(){\n\tfreopen(\"test.in\",\"r\",stdin);\n\tfreopen(\"test.out\",\"w\",stdout);\n\tcin>>n;\n\tcin>>co;\n\tbuild_C();//\u5efa\u7acb\u5b57\u7b26\u5230\u5bc6\u7801\u7684\u6620\u5c04\n\tint tloc;\n\tct=co.length();\n\tfor (int i=1;i<=n;i++){\n\t\tcin>>W[i].w;\n\t\tW[i].len=W[i].w.length();\n\t\tW[i].code=change(W[i].w);//\u5c06\u5bc6\u7801\u8f6c\u6362\u4e3a\u6570\u5b57\n\t\ttloc=co.find(W[i].code);//\u8fd9\u8fd8\u662f\u53f2\u540c\u5b66\u6559\u7684\u51fd\u6570\n\t\tif (tloc!=co.npos)//npos=2^32-1 \u521a\u597d\u591fInt\n\t\t\tW[i].loc=tloc;\n\t\telse\n\t\t\tW[i].loc=11111;//\u8d4b\u503c\uff0c\u6781\u5927\u503c,\t\n\t}\n\tint st=co.length();//st \u8bb0\u5f55code\u7684\u957f\u5ea6\n\tstring stemp;\n\tsolve(0,stemp);\n\tif (ok==false) \n\t\tcout<<\"No Solutions!\"<<endl;\n\treturn 0;\n}\n```\n------------\n\u601d\u8def\u7b80\u5355\u7c97\u66b4\uff0c\u5c31\u662f\u5c06\u7ed9\u51fa\u7684\u5355\u8bcd\u8f6c\u6362\u6210\u5bc6\u7801\uff0c\u7136\u540e\u5728\u5bc6\u7801\u4e32\u91cc\u9762\u5339\u914d\u5c31\u53ef\u4ee5\u4e86\u3002\n(\u6253\u8fc7\u6a21\u62df\u9898\u4e4b\u540e\u4ee3\u7801\u80fd\u529b\u63d0\u5347\u4e00\u5927\u622a\u554a\uff0c\u4e00\u904d\u8fc7\u4e86\uff09",
        "postTime": 1521391672,
        "uid": 36399,
        "name": "blackjack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "**\u6765\u53d167\uff08\u4e0d\u538b\u884c\uff09\u7684\u6df1\u641c\u4ee3\u7801\uff1a**\n\n**\u9898\u610f\u5f88\u7b80\u5355\uff0c\u7ed9\u5b9a\u6587\u672c\u4e32\uff0c\u6309\u6307\u5b9a\u7684\u7ffb\u8bd1\u987a\u5e8f\u7ffb\u8bd1\u6587\u672c\u4e32**\n\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u6587\u672c\u4e32\u4f1a\u6709\u5f88\u591a\u7ffb\u8bd1\u65b9\u5f0f\uff0c\u5f88\u4e0d\u597d\u641eQAQ\n\n\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u5355\u8bcd\u8868**\u53ea\u6709\u4e00\u79cd\u7ffb\u8bd1\u65b9\u5f0f**\n\n\u90a3\u4e48\uff0c\u4e0d\u5982\u53cd\u8fc7\u6765\uff0c\u628a**\u5355\u8bcd\u8868\u7ffb\u8bd1\u6210\u6570\u5b57**\uff0c\u76f4\u63a5\u548c\u6587\u672c\u4e32\u603c\n\n\u548c\u6587\u672c\u4e32\u603c\u7684\u65f6\u5019\uff0c\u7528DFS\u7ef4\u62a4\uff0c\u4e00\u65e6**\u603c\u6210\u529f\uff0c\u76f4\u63a5\u8f93\u51fa\u5373\u53ef**\n\n\u5982\u679c**\u641c\u7d22\u5931\u8d25**\uff0c\u5c31\u8f93\u51faNo Solutions!\u5373\u53ef\uff1b\n\n### \u63d0\u9192\u4e00\u70b9\uff1a\u8981\u5ffd\u7565\u672b\u5c3e\u7684\u7a7a\u683c\u4e0e\u56de\u8f66\uff0c\u4e0d\u7136\u53ea\u670920\u5206\uff1b\n\n**\u5177\u4f53\u7684\u63cf\u8ff0\u5728\u4ee3\u7801\u4e2d\uff1a**\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\nint n;\nchar num[200];//\u6587\u672c\u4e32\nint aum[200];//\u6587\u672c\u4e32\u64b8\u6210\u6570\u5b57\nstruct node {\n\tchar s[50];\n\tint len;\n\tint a[50];//\u5c06\u5355\u8bcd\u8868\u8f6c\u6210\u6570\u5b57\uff0c\u65b9\u4fbf\u6bd4\u8f83\n}t[200];//\u5b58\u4e0b\u5355\u8bcd\u8868\nint L;\nint sta[200],top;//\u5b58\u65b9\u6848\n\ninline int calc(char c) { //\u65e0\u8111\u7ffb\u8bd1\u5355\u8bcd\u8868\uff0c\u5f88\u597d\u60f3QAQ\n\tif(c == 'a' || c == 'b' || c == 'c') return 1;\n\tif(c == 'd' || c == 'e' || c == 'f') return 2;\n\tif(c == 'g' || c == 'h' || c == 'i') return 3;\n\tif(c == 'j' || c == 'k' || c == 'l') return 4;\n\tif(c == 'm' || c == 'n') return 5;\n\tif(c == 'o' || c == 'p' || c == 'q') return 6;\n\tif(c == 'r' || c == 's' || c == 't') return 7;\n\tif(c == 'u' || c == 'v' || c == 'w') return 8;\n\tif(c == 'x' || c == 'y' || c == 'z') return 9;\n}\n\ninline void DFS(int opt) {\n\tif(opt >= L) {//\u641c\u7d22\u6210\u529f\uff0c\u8f93\u51fa\u65b9\u6848\n\t\tfor(int i = 1;i <= top;i ++) {\n\t\t\tfor(int j = 1;j <= t[sta[i]].len;j ++)\n\t\t\t\tcout << t[sta[i]].s[j];\n\t\t\tif(i != top) cout << \" \";\n\t\t}\n\t\texit(0);//\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\n\t}\n\tfor(int i = 1;i <= n;i ++) {\n\t\tint flag = 1;\n\t\tfor(int j = 1;j <= t[i].len;j ++) {\n        \t//\u6709\u5355\u8bcd\u8868\u4e2d\u7684\u6570\u5b57\u53ea\u4e0e\u6587\u672c\u4e32\u9010\u4e00\u6bd4\u8f83\uff0c\u5408\u6cd5\u518d\u7ee7\u7eed\n\t\t\tif(aum[opt + j] != t[i].a[j]) {\n\t\t\t\tflag = 0; break;\n\t\t\t}\n\t\t}\n\t\tif(flag) {\n\t\t\tsta[++ top] = i;//\u7edf\u8ba1\u4e0b\u7b54\u6848\n\t\t\tDFS(opt + t[i].len);\n\t\t\tsta[top --] = 0;//\u56de\u6eaf\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d%s\",&n,num + 1); \t\n\tL = strlen(num + 1);\n\tfor(int i = 1;i <= L;i ++) aum[i] = num[i] - '0';\n\tfor(int i = 1;i <= n;i ++) {\n\t\tscanf(\"%s\",t[i].s + 1);\n\t\tt[i].len = strlen(t[i].s + 1);\n\t\tfor(int j = 1;j <= t[i].len;j ++)//\u7ffb\u8bd1\n\t\t\tt[i].a[j] = calc(t[i].s[j]);\n\t}\n\tDFS(0);\n\tprintf(\"No Solutions!\\n\");//\u65e0\u89e3\u8bf7\u51b5\n\treturn 0; //\u5b8c\u7ed3\u6492\u82b1\u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f\n}\n```\n",
        "postTime": 1570966470,
        "uid": 153839,
        "name": "\u6e05\u8fdc\u5b66\u4f1a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "### \u8fd9\u9053\u9898\u76ee\u7684\u89e3\u6cd5\u5f88\u591a\uff0c\u6211\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u7528trie\u6811\uff0c\u5728\u6811\u4e0a\u7206\u641c\u5373\u53ef\u3002\u4ee3\u7801\u4e0d\u96be\u770b\u61c2\n### \u8fd9\u9053\u9898\u7684\u8bc4\u6d4b\u5f88\u5751\u7239\uff0c\u662f\u7684\uff0c\u4f60\u4e0d\u9700\u8981\u5728\u884c\u5c3e\u8f93\u51fa\u989d\u5916\u7684\u56de\u8f66\u3002\u5c3d\u7ba1\u5728noip\u4e2d\u6ca1\u6709\u5728\u884c\u5c3e\u8f93\u51fa\u56de\u8f66\u4f1a\u72060\uff0c\u4f46\u5728\u8fd9\u91cc\u4f60\u4e0d\u80fd\uff0c\u4f5c\u8005\u5728\u8fd9\u91cc\u56e0\u6b64\u82b1\u4e86\u4e24\u4e09\u4e2a\u5c0f\u65f6\uff0c\u5e0c\u671b\u5927\u5bb6\u5e94\u4ee5\u4e3a\u6212\n### \u6587\u672b\u7684\u6ce8\u91ca\u90e8\u5206\u662f\u4e00\u4e9b\u6d4b\u8bd5\u7684\u6837\u4f8b\uff0c\u4f46\u4e0d\u662f\u6d1b\u8c37\u7684\uff0c\u56e0\u4e3a\u4e0a\u8ff0\u7684\u65e0\u6cd5AC\u7684\u539f\u56e0\u5462\u6211\u4ece\u5176\u4ed6\u7f51\u7ad9\u4e0a\u6316\u51fa\u6765\u7684\u4e00\u4e9b\u6570\u636e\uff0c\u9644\u5728\u540e\u9762\u4ec5\u4f9b\u53c2\u8003\u3002\n```cpp\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int turn[] = {1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9};\nchar code[105], dict[105][25];\t\t//from 1...N\nint trie[2100][26], end[2100], fond[105], fu, tot, m, tail;\n\nvoid build(int i) {\n    int len = strlen(dict[i]);\n    int p = 0;\n    for(int j = 0; j < len; j++) {\n        int pl = turn[dict[i][j]-'a'];\n        if(trie[p][pl] == -1) trie[p][pl] = tot++;\n        p = trie[p][pl];\n    }\n    end[p] = i;\n}\n\nint flag;\nvoid search(int cur, int p) {\n    if(flag) return;\n    if(cur == m) {\n        if(p == 0) flag = true;\n        tail = fu;\n        return;\n    }\n    if(trie[p][code[cur]-'0'] == -1)\n        return;\n    if(!flag && end[trie[p][code[cur]-'0']] != -1) {\n        fond[fu++] = end[trie[p][code[cur]-'0']];\n        search(cur+1, 0);\n        fu--;\n    }\n    if(!flag)\n    \tsearch(cur+1, trie[p][code[cur]-'0']);\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    scanf(\"%s\", code);\n    memset(trie, -1, sizeof(trie));\n    memset(end, -1, sizeof(end));\n    tot = 1;\n    for(int i = 1; i <= n; i++) {\n        scanf(\"%s\", dict[i]);\n        build(i);\n    }\n    flag = false;\n    m = strlen(code);\n    search(0, 0);\n    if(flag) {\n        printf(\"%s\", dict[fond[0]]);\n        for(int i = 1; i < tail; i++)\n            printf(\" %s\",dict[fond[i]]);\n    } else {\n        printf(\"No Solutions!\");\n    }\n    return 0;\n}\n\n\n/*\ninput1:\n8\n73373711664\nthi\nshs\nthis\nis\nb\na\nboo\nk\n\noutput1:\nthi shs b boo k\n\n*/\n\n/*\ninput2:\n1\n1\na\n\noutput2:\na\n\n*/\n\n/*\ninput3:\n3\n123\nad\ndg\ntu\n\noutput3:\nNo Solutions!\n\n*/\n\n/*\ninput4:\n10\n8327237591319142\nwhere\nis\nmy\nbicycle\nwho\nam\nare\nwere\nm\nybic\n\noutput4:\nwhere is my bicycle\n\n*/\n\n/*\ninput5:\n10\n8327237591319142\nwhere\nis\nmy\nbicycle\nwho\nam\nare\nwere\nm\nybic\n\noutput5:\nwhere is my bicycle\n\n*/\n\n/*\ninput6:\n5\n9687676371537827935724433257\nprogram\nvery\nis\nintelligent\nyour\n\noutput6:\nyour program is very intelligent\n\n*/\n\n/*\ninput7:\n11\n2612772752977352\ndo\nbetter\nnext\ntime\ndob\nette\nrnex\nttg\nme\nok\nvery\n\noutput7:\ndo better next time\n\n*/\n\n/*\ninput8:\n11\n6421722656786779116879687685676371552\nabout\noleasf\nplease\ndo\nep\nnot\nnor\nown\nworry\nyour\nprogramme\n\noutput8:\noleasf do not worry about your own programme\n\n*/\n\n/*\ninput9:\n20\n2424444244441444481936224414436716376844426448421666662693667366376644433674161321426649635123618917\nfjdkljl\nfjlkjal\njljvcxiof\nfjlakjior\ncoitoulkjf\nqjjvj\nfaqpqpq\nfozioptipo\nirpoklkhg\nqrk...\n\noutput9:\nNo Solutions!\n\n*/\n\n/*\ninput11:\n12\n468697927688882227277988\npyt\nzer\nqww\nwwe\nyuu\netty\nett\nerre\neer\nwwwe\nkou\nzerqw\n\noutput11:\nkou pyt zer qww wwe eer ett yuu\n\n*/\n```",
        "postTime": 1543417808,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "\u6211\u89c9\u5f97\u8fd9\u9053\u9898\u53ef\u4ee5DP\uff0c\u4f46\u662f\u6ca1\u6709\u5728OJ\u4e0a\u6ca1\u6709AC\uff0c\u4f30\u8ba1\u662fspecial judge\u7684\u95ee\u9898\uff0c\n\nf[i]\u8868\u793a\u524di\u7684\u5b57\u7b26\u5339\u914d\u7684\u5bc6\u7801\u662f\u4ec0\u4e48\uff0c\u5982\u679c\u4e0d\u80fd\u5339\u914d\u90a3\u4e48\u5b83\u4e3a\u7a7a\n\nDP\u65b9\u7a0b\u662f\u8fd9\u6837\u7684\n\n\u5982\u679cf[i]\u4e3a\u7a7a\u5e76\u4e14f[j]\u4e0d\u4e3a\u7a7a\uff0c\u5e76\u4e14\u533a\u95f4[j+1,i]\u53ef\u4ee5\u5339\u914d\u51fa\u5bc6\u7801\uff0c\u90a3\u4e48\n\nf[i]:=f[j]+try(j+1,i)\n\n\u6700\u540e\u5982\u679c\u7b54\u6848\u4e3a\u7a7a\u5c31No Solutions!\uff0c\u5426\u5219\u76f4\u63a5\u8f93\u51fa\n\n```delphi\n\nconst inf='phone.in'; outf='phone.out';\nvar\n  n,i,ls,j:longint;  s:string;\n  a,b:array[0..120]of string;\n  f:array[0..120]of string;\n  le:array['a'..'z']of string;\nProcedure prepare;\n var\n   i:char; t,tt:longint;\n begin\n   t:=0; tt:=0;\n   for i:='a' to 'z' do begin\n     inc(tt);\n     if i='o' then inc(tt);\n     if tt mod 3=1 then inc(t);\n     str(t,le[i]);\n   end;\n end;\nProcedure work(u:longint; ss:string);\n var\n   i:longint;\n begin\n   b[u]:='';\n   for i:=1 to length(ss) do b[u]:=b[u]+le[ss[i]];\n end;\nFunction try(l,r:longint):string;\n var\n   w:string;\n   i:longint;\n begin\n   try:='';\n   w:=copy(s,l,r-l+1);\n   for i:=1 to n do if b[i]=w then begin try:=a[i]; break; end;\n end;\nbegin\n  assign(input,inf); reset(input);\n  assign(output,outf); rewrite(output);\n    prepare;\n    readln(n); readln(s); ls:=length(s);\n    for i:=1 to n do begin\n      readln(a[i]);\n      work(i,a[i]);\n    end;\n    for i:=1 to ls do f[i]:=try(1,i);\n    for i:=2 to ls do if f[i]='' then\n     for j:=1 to i-1 do if f[j]<>'' then begin\n       f[i]:=try(j+1,i);\n       if f[i]<>'' then begin f[i]:=f[j]+' '+f[i]; break; end;\n     end;\n    if f[ls]<>'' then writeln(f[ls]) else writeln('No Solutions!');\n  close(input); close(output);\nend.\n\n```",
        "postTime": 1445929168,
        "uid": 5729,
        "name": "zls6602488",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "\u518d\u6b21\u88ab\u5b57\u7b26\u4e32\u8feb\u5bb3\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u5355\u8bcd\u8f6c\u6362\u6210\u6570\u5b57\uff0c\u4e0d\u59a8\u590d\u5236\u7c98\u8d34\u4e5d\u4e2a\u5224\u65ad\u8bed\u53e5\uff0c\u8fd9\u6837\u65e2\u4e0d\u7528\u52a8\u8111\u5b50\u4e5f\u9632\u6b62\u4e0d\u5fc5\u8981\u7684\u51fa\u9505\u3002\n\n\u7136\u540e\u6211\u4eec\u7528map\u6620\u5c04\u4e00\u4e0b\uff0c\u628a\u8f6c\u6362\u540e\u7684\u6bcf\u4e2a\u5355\u8bcd\u6620\u5c04\u6210\u4e3a\u8fd9\u4e2a\u5355\u8bcd\u7684\u4e0b\u6807\uff0c\u8fd9\u6837\u65e2\u65b9\u4fbf\u4e4b\u540e\u7684\u5224\u65ad\uff0c\u4e5f\u65b9\u4fbf\u4e86\u6700\u540e\u8f93\u51fa\u7ed9\u8f6c\u5316\u56de\u6765\u3002\n\n\u5f00\u59cb\u641c\u7d22\uff0c\u4f20\u4e09\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4ee3\u8868\u4e0b\u6807\uff0c\u4e00\u4e2a\u4ee3\u8868\u7740\u5df2\u7ecf\u9009\u4e2d\u7684\u3001\u6ca1\u6709\u8f6c\u6362\u6210\u4e00\u4e2a\u5355\u8bcd\u7684\u5b57\u6bcd\u4e2a\u6570\uff0c\u4e00\u4e2a\u4ee3\u8868\u5df2\u7ecf\u6709\u51e0\u4e2a\u5355\u8bcd\u51fa\u73b0\u4e86\u3002\n\n\u5982\u679c\u5df2\u7ecf\u641c\u5b8c\u6574\u4e2a\u5bc6\u7801\uff0c\u4e14\u5bc6\u7801\u5df2\u7ecf\u5168\u90e8\u8f6c\u5316\u4e3a\u5355\u8bcd\u5373\u8f93\u51fa\u5e76\u7ed3\u675f\u3002\u6ca1\u6709\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u5224\u65ad\u5df2\u7ecf\u9009\u4e2d\u7684\u5b57\u6bcd\u80fd\u5426\u7ec4\u6210\u4e00\u4e2a\u5355\u8bcd\u3002\u80fd\uff0c\u5219\u8bb0\u5165\u7b54\u6848\u6570\u7ec4\uff0c\u5e76\u91cd\u65b0\u8ba1\u7b97\u88ab\u9009\u4e2d\u5b57\u6bcd\u4e2a\u6570\u3002\n\n\u6700\u540e\uff0c\u4e0d\u7ba1\u80fd\u4e0d\u80fd\u7ec4\u6210\u4e00\u4e2a\u5355\u8bcd\uff0c\u6211\u4eec\u90fd\u8981\u53bb\u641c\u4e0d\u7ec4\u6210\u5355\u8bcd\u7684\u60c5\u51b5\u3002\n\n\u56e0\u4e3a\u6570\u636e\u8f83\u5c0f\uff0c\u4e0d\u9700\u8981\u592a\u591a\u7684\u6280\u5de7\u3002\n\n## Code\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <cstring>\n#include <algorithm>\n#include <map>\n\n#define N 105\n\nusing namespace std;\n\nint n , Len;\nchar key[N] , word[N][25];//key\u8bb0\u5f55\u5bc6\u7801\uff0cword\u8bb0\u5f55\u5355\u8bcd \nchar Copy[N]; \nmap < string , int > m;\n\nvoid deal(int x){//\u5c06\u5355\u8bcd\u8f6c\u5316\u4e3a\u6570\u5b57 \n\tstrcpy(Copy , word[x]);\n\tfor(int i = 0; i < strlen(Copy); i++){\n\t\tif(word[x][i] >= 'a' && Copy[i] <= 'c') Copy[i] = '1';\n\t\tif(word[x][i] >= 'd' && Copy[i] <= 'f') Copy[i] = '2';\n\t\tif(word[x][i] >= 'g' && Copy[i] <= 'i') Copy[i] = '3';\n\t\tif(word[x][i] >= 'j' && Copy[i] <= 'l') Copy[i] = '4';\n\t\tif(word[x][i] >= 'm' && Copy[i] <= 'n') Copy[i] = '5';\n\t\tif(word[x][i] >= 'o' && Copy[i] <= 'q') Copy[i] = '6';\n\t\tif(word[x][i] >= 'r' && Copy[i] <= 't') Copy[i] = '7';\n\t\tif(word[x][i] >= 'u' && Copy[i] <= 'w') Copy[i] = '8';\n\t\tif(word[x][i] >= 'x' && Copy[i] <= 'z') Copy[i] = '9';\n\t}\n\tm[Copy] = x;//\u6620\u5c04 \n}\n\nbool flag = false;//\u7528\u6765\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u6709\u4e86\u7b54\u6848 \n\nchar ans[N][25];//\u8bb0\u5f55\u7b54\u6848 \nchar t[25];//\u8f85\u52a9\u6570\u7ec4 \nint h = -1;\n\nvoid print(int tot){//\u6253\u5370\u7b54\u6848 \n\tfor(int i = 1; i <= tot; i++){\n\t\tprintf(\"%s\"  , word[m[ans[i]]]);//\u8fd9\u91cc\u7684\u8f93\u51fa\u597d\u597d\u60f3\u4e00\u60f3 \n\t\tif(i != tot) printf(\" \");//spj\u5bf9\u7a7a\u683c\u654f\u611f \n\t}\n}\n\nvoid dfs(int x , int L , int tot){\n\tif(x == Len + 1 && L == 1 && !flag){//\u6ee1\u8db3\u7ed3\u675f\u7684\u6761\u4ef6 \n\t\tflag = true;\n\t\tprint(tot);\n\t}\n\t\n\tif(x == Len + 1) return;//\u4e0d\u7ba1\u6ee1\u4e0d\u6ee1\u8db3\u8f93\u51fa\u7684\u6761\u4ef6\uff0c\u641c\u5b8c\u4e86\u5c31\u8fd4\u56de \n\t\n\tmemset(t,'\\0',sizeof(t));//\u8bb0\u5f97\u6e05\u7a7a \n\th = -1;\n\t\n\tfor(int i = x - L + 1; i <= x; i++) t[++h] = key[i];//\u628a\u9009\u4e2d\u7684\u5b57\u6bcd\u590d\u5236\u7ed9\u8f85\u52a9\u6570\u7ec4 \n\tif(m[t]){//\u5982\u679c\u6709\u8fd9\u4e2a\u5355\u8bcd \n\t\tstrcpy(ans[tot + 1] , t);//\u518d\u590d\u5236\u7ed9\u7b54\u6848\u6570\u7ec4 \n\t\tdfs(x + 1 , 1 , tot + 1);\n\t}\n\t \n\tdfs(x + 1 , L + 1 , tot);\n\t \n}\n\nint main(){\n\tscanf(\"%d\" , &n);\n\tscanf(\"%s\" , key);\n\tLen = strlen(key) - 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tscanf(\"%s\" , word[i]);\n\t\tdeal(i);\n\t}\n\t\n\tdfs(0 , 1 , 0);\n\t\n\tif(!flag) printf(\"No Solutions!\");\n\t\n\treturn 0;\n}\n```",
        "postTime": 1569856526,
        "uid": 35584,
        "name": "KillerXu",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "## STL\u5927\u6cd5\u597d\n\n\u8fd9\u9898\u4e00\u770b\u5c31\u662f\u4e00\u4e2a~~\u7b80\u5355\u7684~~dp\uff0c\u4f46\u56e0\u4e3a\u8fd9\u4e00\u5806\u5b57\u7b26\u4e32\uff0c\u9a6c\u4e0a\u5c31\u9ebb\u70e6\u8d77\u6765\u4e86\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u7528STL\u5c06\u7a0b\u5e8f\u53d8\u5f97\u5f88\u7b80\u6d01\u3002\n\n```cpp \n\tmp[0]=mp[1]=mp[2]=1;\n\tmp[3]=mp[4]=mp[5]=2;\n\tmp[6]=mp[7]=mp[8]=3;\n\tmp[9]=mp[10]=mp[11]=4;\n\tmp[12]=mp[13]=5;\n\tmp[14]=mp[15]=mp[16]=6;\n\tmp[17]=mp[18]=mp[19]=7;\n\tmp[20]=mp[21]=mp[22]=8;\n\tmp[23]=mp[24]=mp[25]=9;\n```\n\n\u5148\u5bf9\u6620\u5c04\u5173\u7cfb\u6253\u4e2a\u8868\n\n```cpp\n\tcin>>s;\n\tm=s.size();\n\tfor(int i=1;i<=n;++i){\n\t\tcin>>a;\n\t\tlen[i]=a.size();\n\t\tb[i]=a;\n\t\tstring::iterator c;\n\t\tfor(c=a.begin();c!=a.end();++c){\n\t\t\t*c=mp[*c-'a']+'0';\n\t\t}\n\t\tstring::size_type pos=0;\n\t\twhile((pos=s.find(a,pos))!=string::npos){\n\t\t\tv.push_back(make_pair(pos,i));\n\t\t\tpos++;\n\t\t}\n\t}\n```\n\n\u76f4\u63a5\u7528cin\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u6240\u6709\u5b57\u6bcd\u6620\u5c04\u5230\u6570\u5b57\uff0c\u7136\u540e\u662f\u8fd9\u91cc\u9762\u6700\u65b9\u4fbf\u7684\u5730\u65b9\u3002\n\n```cpp\n\t\tstring::size_type pos=0;\n\t\twhile((pos=s.find(a,pos))!=string::npos){\n\t\t\tv.push_back(make_pair(pos,i));\n\t\t\tpos++;\n\t\t}\n```\n\u76f4\u63a5\u7528find\u51fd\u6570\u904d\u5386\u6574\u4e2a\u6bcd\u4e32\uff0c\u5c06\u6240\u6709\u53ef\u884c\u7684\u8986\u76d6\u7528pair\uff08\u683c\u5f0f\u4e3a\uff08\u8d77\u70b9\uff0c\u653e\u5165\u7684\u4e32\u7684\u7f16\u53f7\uff09\uff09\u653e\u5165\u4e00\u4e2avector\u5b58\u8d77\u6765(\u56e0\u4e3a\u4e0d\u77e5\u9053\u6570\u91cf)\u3002\n```cpp\n    sort(v.begin(),v.end());\n\tdp[0]=1;\n\tmemset(lst,-1,sizeof lst);\n\tfor(it=v.begin();it!=v.end();++it){\n\t\tint x=it->first,y=x+len[it->second];\n\t\tdp[y]|=dp[x];\n\t\tif(dp[x])lst[y]=it->second,to[y]=x;\n\t}\n```\n\u7136\u540e\u76f4\u63a5sort\u4e00\u904d\u76f4\u63a5dp\uff0cdp\u65f6\u8bb0\u5f55\u8986\u76d6\u5230\u8fd9\u4e2a\u70b9\u7684\u5b57\u7b26\u4e32\uff0c\u65b9\u4fbf\u65b9\u6848\u8f93\u51fa\u3002\n```cpp\n    if(dp[m]){\n\t\tint now=m;\n\t\twhile(now>0){\n\t\t\tot.push_back(b[lst[now]]);\n\t\t\tnow=to[now];\n\t\t}\n\t\twhile(ot.size()){\n\t\t\tcout<<ot.back();\n\t\t\tot.pop_back();\n\t\t\tif(ot.size())putchar(' ');\n\t\t}\n\t}else{\n\t\tputs(\"No Solutions!\");\n\t}\n```\n\u82e5\u8986\u76d6\u5230\uff0c\u5219\u8f93\u51fa\u7b54\u6848\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u987a\u5e8f\u662f\u5012\u7740\u7684\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u653e\u5165vector\u518d\u5012\u5e8f\u8f93\u51fa\u3002\u82e5\u6ca1\u6709\u8986\u76d6\u5230\uff0c\u8f93\u51fa\u65e0\u65b9\u6848\u3002\n\n\u63d0\u9192\u4e00\u70b9\uff0c\u884c\u672b\u4e0d\u80fd\u6709\u7a7a\u683c\uff0c\u4e0d\u7136\u4f1a20\u5206\u3002",
        "postTime": 1546606775,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "# **\u8fd9\u9053\u9898\u7528\u5230\u4e86\u9012\u5f52\u548c\u641c\u7d22**\n\n# **\u4e3a\u4e86\u65b9\u4fbf\u89e3\u9898\uff0c\u6211\u5c06\u5355\u8bcd\u8868\u91cc\u7684\u6240\u6709\u5355\u8bcd\u8f6c\u5316\u6570\u5b57** \n# **\u7070\u540d[\u5927\u4f6c](https://www.luogu.org/space/show?uid=118746)\u53cb\u94fe**\n```\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nchar a[130],dc[110][22];\n//a\u5b57\u7b26\u4e32\u7528\u4e8e\u5c06\u5b57\u6bcd\u8f6c\u5316\u4e3a\u6570\u5b57\u5b57\u7b26\uff0cdc\u7528\u6765\u5b58\u653e\u8f6c\u5316\u540e\u7684\u5355\u8bcd \nchar d[110][22],sz[110];\n//d\u7528\u6765\u5b58\u653e\u8f6c\u5316\u524d\u7684\u5355\u8bcd \uff0csz\u4e3a\u6570\u5b57\u5bc6\u7801 \nint aa[110],l[110];\n//aa\u5b58\u653e\u8981\u8f93\u51fa\u7684\u5355\u8bcd\u5e8f\u53f7\uff0cl\u4e3a\u5355\u8bcd\u957f\u5ea6 \nint n;//\u5355\u8bcd\u4e2a\u6570 \nbool bk=false;//\u662f\u5426\u80fd\u7ffb\u8bd1\uff0c\u5f00\u59cb\u5b9a\u4e49\u4e3a\u4e0d\u53ef\u7ffb\u8bd1 \nvoid dfs(int k,int t)//k\u8868\u793a\u627e\u5230\u4e86\u524d\u9762k\u4e2a\u6570\u5b57\u7684\u5bc6\u7801\u4e86\uff0ct\u8868\u793a\u627e\u5230\u524dk\u4e2a\u5bc6\u7801\u8981\u7528t\u4e2a\u5355\u8bcd \n{\n\tif(bk)return ;//\u5982\u679c\u5df2\u7ecf\u53ef\u7ffb\u8bd1\uff0c\u76f4\u63a5\u9000\u51fa \n\tif(k==strlen(sz+1)){bk=true;return ;}//\u5982\u679c\u7ffb\u8bd1\u5b8c\u6210\uff0c\u5c06bk\u8bbe\u4e3atrue\uff0c\u9000\u51fa\u9012\u5f52 \n\tfor(int i=1;i<=n;i++)//\u5faa\u73af\uff0c\u679a\u4e3e\u5404\u4e2a\u5355\u8bcd \n\t{\n\t\tif(bk)return ;//\u540c\u4e0a14\u884c \n\t\tif(strstr(sz+k+1,dc[i]+1)!=NULL)//\u5982\u679c\u5728\u5269\u4e0b\u7684\u5bc6\u7801\u91cc\uff0c\u627e\u5230\u4e86\u7b2ci\u4e2a\u5355\u8bcd \n\t\t{\n\t\t\tif(strlen(sz+1)-strlen(strstr(sz+k+1,dc[i]+1))==k)//\u5982\u679c\u8fd9\u4e2a\u5355\u8bcd\u524d\u4e00\u4e2a\u4f4d\u7f6e\u4e3ak\n/*strstr(st1,st2)\u662f\u5224\u65adst2\u662f\u4e0d\u662fst1\u7684\u5b50\u4e32\uff0c\u82e5str2\u662fstr1\u7684\u5b50\u4e32\uff0c\n\u5219\u8fd4\u56destr2\u5728str1\u7684\u9996\u6b21\u51fa\u73b0\u7684\u5730\u5740;\u5982\u679cstr2\u4e0d\u662fstr1\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56deNULL\u3002\u4f8b\u5982\uff1a\nst1=abcdefg;st2=cde;\u5219strstr(st1,st2)=cdefg*/ \n\t\t\t{\n\t\t\t\taa[t]=i;//\u8bb0\u5f55\u662f\u7b2c\u51e0\u4e2a\u5355\u8bcd \n\t\t\t\tdfs(k+l[i],t+1);//\u5faa\u73af\uff0ck\u52a0\u4e0a\u8fd9\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\uff0ct+1\uff0c\u4e0d\u591a\u8bf4 \n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tfor(int i='a';i<='z';i++)\n\t{\n\t\tif(i<='n')a[i]=(i-'a')/3+1+'0';//\u4e4b\u540e\u4fbf\u4e8e\u5c06\u5b57\u6bcd\u8f6c\u5316\u6210\u6570\u5b57\u5b57\u7b26 \n\t\telse a[i]=(i-'o')/3+6+'0';//\u8003\u86515\u53ea\u67092\u4e2a\u5b57\u7b26\u7684\u7279\u6b8a\u60c5\u51b5 \n\t}\n\tscanf(\"%d\",&n); \n\tscanf(\"%s\",sz+1);//\u8f93\u5165\uff0c\u4e0d\u591a\u8bf4\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",d[i]+1);//\u8f93\u5165\u5355\u8bcd \n\t\tl[i]=strlen(d[i]+1);//\u8bb0\u5f55\u5355\u8bcd\u957f\u5ea6\uff0c\u7b49\u4f1a\u9012\u5f52\u8981\u7528 \n\t\tfor(int j=1;j<=l[i];j++)dc[i][j]=a[d[i][j]];\n\t\t//\u5c06\u5b57\u6bcd\u8f6c\u5316\u6210\u6570\u5b57\u5b57\u7b26\uff0c\u65b9\u4fbf\u6bd4\u8f83\uff0c\u5b58\u5728dc\u91cc\u9762 \n\t}\n\tdfs(0,1);//\u8fdb\u884c\u9012\u5f52 \n\tif(bk)//bk=true\u8868\u793a\u627e\u5230\u53ef\u7ffb\u8bd1 \n\t{\n\t\tint t=1;//\u5b9a\u4e49\u4e00\u4e2at \n\t\twhile(aa[t+1]!=0)printf(\"%s \",d[aa[t++]]+1);//\u5982\u679caa[t+1]\uff01=0\u4ee3\u8868aa[t]\u4e0b\u4e00\u4e2a\u8fd8\u6709\u6570 \n\t\tprintf(\"%s\",d[aa[t++]]+1);//\u8fd9\u91cc\u8981\u7279\u6b8a\u5904\u7406\uff0c\u6700\u540e\u4e0d\u80fd\u6709\u7a7a\u683c \n\t}\n\telse printf(\"No Solutions!\");//\u4e0d\u7136\u8f93\u51fa  No Solutions!\n\treturn 0;\n}\n```",
        "postTime": 1533622560,
        "uid": 59901,
        "name": "\u8fdc\u5c71\u6de1\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    },
    {
        "content": "# \u9898\u9762\n\n\u6211\u88ab\u8bfb\u9898\u8fd9\u4ef6\u4e8b\u5361\u4e86\u4e0d\u77ed\u65f6\u95f4\u2639\u2639\u2639\uff0c\u60f3\u5fc5\u4e00\u5b9a\u6709\u4eba\u662f\u6765\u9898\u89e3\u533a\u770b\u9898\u610f\u7684\n\n\u5927\u610f\u5c31\u662f\uff1a\u5bf9\u4e8e\u4e00\u4e32\u6570\u5b57\uff0c\u627e\u5230\u5408\u9002\u7684\u65ad\u53e5\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6240\u6709\u6570\u5b57\u90fd\u7528\u4e0a\uff0c\u5e76\u4e14\u6bcf\u4e00\u4e2a\u5355\u8bcd\u90fd\u662f\u8f93\u5165\u7ed9\u51fa\u7684\u5355\u8bcd\u3002\u5b57\u6bcd\u7684\u5bf9\u5e94\u65b9\u5f0f\u4e5f\u5c31\u662f\u9898\u4e2d\u6240\u7ed9\u7684~~\u8001\u5e74\u673a\u4e0a\u9762\u7684\u6309\u952e\u7684~~\u5bf9\u5e94\u65b9\u5f0f\n\n\u6837\u4f8b\u7684\u89e3\u91ca\uff1a\n\n```\n8\n\n73373711664\n\nthi == 733\nshs == 737\nthis == 7337\nis == 73\nb == 1\na == 1\nboo == 166\nk == 4\n```\n\n# \u6ce8\u610f\n\n\u8fd9\u9053\u9898\u8981\u6c42\u8f93\u51fa\u672b\u5c3e\u6ca1\u6709\u591a\u4f59\u7a7a\u683c\uff0c\u60f3\u5fc5\u5927\u5bb6\u90fd\u662f\u8fd9\u4e2a\u95ee\u9898\n\n\u8981\u662f\u6ca1\u6709\u8fd9\u56de\u4e8b\u7684\u8bdd\uff0c\u4f30\u8ba1\u5c31\u90fd\u8fc7\u4e86\n\n# \u6b63\u6587\n\n\u5c31\u60f3\u5fc5\u662f\u76f4\u63a5\u641c\u7d22\n\n\u7136\u540e\u6709\u4e24\u4e2a\u7b97\u526a\u679d\uff0c\u4e5f\u4e0d\u7b97\u526a\u679d\u7684\u4e1c\u897f\uff1a\n\n\u25cf \u641c\u5230\u7ed3\u679c\u4e4b\u540e\u76f4\u63a5\u9000\u51fa\n\n\u25cf \u5982\u679c\u5269\u4f59\u7684\u6570\u5b57\u957f\u5ea6\u6ca1\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u957f\u7684\u8bdd\u5c31\u76f4\u63a5\u8df3\u8fc7\n\n\u5177\u4f53\u7684\u8bdd\u5c31\u770b\u4ee3\u7801\u5427\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\n\nint n,len;\nchar shu[101],key_bo[101][21];\nint key[27] = {1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,7,8,8,8,9,9,9};\nint st[101],top;\n\nvoid dfs(int left){\n\tif(left == len){//\u6ca1\u6709\u5269\u4f59\u7684\u6570\u5b57\u4e86\n\t\tfor(register int i(1);i<top;++i) {\n\t\t\tprintf(\"%s \",key_bo[st[i]]);\n\t\t}\n\t\tprintf(\"%s\",key_bo[st[top]]);//\u5751\u4eba\u7684\u5730\u65b9\n\t\texit(0);\n\t}\n\tfor(register int i(1);i<=n;++i) {\n\t\tif(len - left + 1< strlen(key_bo[i])) continue;//\u526a\u679d\n\t\tbool ok(0);\n\t\tfor(register int j(0);j<strlen(key_bo[i]);++j){\n\t\t\tif(shu[j+left]-'0' != key[key_bo[i][j]-'a']) {\n\t\t\t\tok = 1;//\u6ca1\u6cd5\u5339\u914d\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ok) continue;\n\t\tst[++top] = i;\n\t\tdfs(left + strlen(key_bo[i]));\n\t\t--top;//\u56de\u6eaf\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tscanf(\"%s\",shu);\n\tlen = strlen(shu);\n\tfor(register int i(1);i<=n;++i){\n\t\tscanf(\"%s\",key_bo[i]);\n\t}\n\tdfs(0);\n\tprintf(\"No Solutions!\");//\u65e0\u89e3\n\treturn 0;\n}\n```\n",
        "postTime": 1605581771,
        "uid": 164801,
        "name": "\u65b0\u624b7889456",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1245 \u3010\u7535\u8bdd\u53f7\u7801\u3011"
    }
]