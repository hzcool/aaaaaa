[
    {
        "content": "UPD\uff1a\u540c\u5b66\u63d0\u9192\u6211\u503c\u57df\u662f\u4ece $0$ \u5f00\u59cb\u7684\uff0c\u4f46\u662f\u6211\u6ca1\u6ce8\u610f\u8fd9\u4e00\u70b9\u786e\u901a\u8fc7\u4e86\u6b64\u9898\uff0c\u51fa\u4e8e\u4e25\u8c28\u8fd8\u662f\u6539\u4e86\u4e00\u4e0b\u4ee3\u7801\u3002\n\n\u611f\u89c9\u662f day1 \u552f\u4e00\u4e00\u4e2a\u6211\u80fd\u770b\u61c2\u7684\u9898\u4e86\uff08\u60b2\uff09\u3002\n\n\u4e00\u770b\u5c31\u50cf\u662f\u6570\u636e\u7ed3\u6784\u9898\u3002\u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651\u5bf9\u4e8e\u5355\u4e2a\u5e8f\u5217\u7684\u5220\u9664\u3001\u63d2\u5165\u548c\u67e5\u8be2\u64cd\u4f5c\u600e\u4e48\u5feb\u901f\u5b9e\u73b0\u3002\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u5f00\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u8fd9\u6837\u5c31\u80fd\u5b9e\u73b0\u5feb\u901f\u5730\u5220\u9664\u548c\u63d2\u5165\u4e86\u3002\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7ef4\u62a4\u5bf9\u5e94\u503c\u57df\u533a\u95f4\u5185\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c\u4ee5\u53ca\u8fd9\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002\u67e5\u8be2\u7684\u65f6\u5019\u770b\u4e00\u4e0b\u8fd9\u4e2a\u503c\u7684\u51fa\u73b0\u6b21\u6570\u662f\u5426\u8d85\u8fc7\u5e8f\u5217\u957f\u5ea6\u4e00\u534a\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u591a\u4e2a\u5e8f\u5217\u5462\uff1f\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5e8f\u5217\u90fd\u505a\u4e0a\u9762\u7684\u4e8b\u60c5\uff0c\u4f46\u662f\u5e8f\u5217\u7684\u5408\u5e76\u548c\u67e5\u8be2\u5341\u5206\u68d8\u624b\u3002\n\n\u8003\u8651\u4e24\u4e2a\u5e8f\u5217\u5408\u5e76\u3002\u9996\u5148\u628a\u4e24\u4e2a\u5e8f\u5217\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u8d77\u6765\u662f\u5bb9\u6613\u505a\u7684\uff08\u7ebf\u6bb5\u6811\u8981\u52a8\u6001\u5f00\u70b9\uff09\uff0c\u4f46\u662f\u8fd9\u8fd8\u4e0d\u591f\uff0c\u6211\u4eec\u5f97\u628a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u771f\u7684\u62fc\u8d77\u6765\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5b8c\u6210\u503c\u57df\u4fe1\u606f\u7684\u62fc\u63a5\u3002\u5f88\u591a\u4eba\u60f3\u5230\u4e86\u7528 deque \u7ef4\u62a4\u6bcf\u4e2a\u5e8f\u5217\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u66b4\u529b\u5730\u628a\u5c0f\u7684\u5e8f\u5217\u63d2\u5230\u5927\u7684\u5e8f\u5217\u4e2d\uff08\u6839\u636e\u9898\u76ee\u8981\u6c42\u51b3\u5b9a\u524d\u7aef\u8fd8\u662f\u540e\u7aef\u63d2\u5165\uff09\u3002\u4f46\u662f\u5427\uff0c\u8d5b\u540e\u5df2\u7ecf\u4f17\u6240\u5468\u77e5\u7684\u4e00\u70b9\uff0cdeque \u8fd9\u4e1c\u897f\u7684\u9884\u7559\u7a7a\u95f4\u6709\u4ebf\u70b9\u5927\uff0c\u5bfc\u81f4\u5f88\u591a\u60f3\u5230\u6b63\u89e3\u7684\u9009\u624b\u8d85\u51fa\u7a7a\u95f4\u9650\u5236\u3002\u6211\u4eec\u8003\u8651\u4f7f\u7528\u94fe\u8868\u7ef4\u62a4\u3002\u94fe\u8868\u53ef\u4ee5\u652f\u6301\u5feb\u901f\u5730\u5220\u9664\u672b\u5c3e\u5143\u7d20\uff0c\u5728\u672b\u5c3e\u63d2\u5165\u5143\u7d20\uff0c\u4ee5\u53ca\u628a\u4e24\u4e2a\u94fe\u8868\u987a\u6b21\u62fc\u63a5\u3002\u6ce8\u610f\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u62fc\u63a5\u65f6\u4e0d\u4e00\u5b9a\u4e24\u4e2a\u5e8f\u5217\u5168\u90fd\u975e\u7a7a\uff0c\u4e0d\u6ce8\u610f\u8fd9\u4e2a\u53ef\u80fd\u4f1a\u6302\u5206\u3002\n\n\u7136\u540e\u8003\u8651\u6700\u6709\u610f\u601d\u7684\u67e5\u8be2\u3002\u8fd9\u91cc\u9700\u8981\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6469\u5c14\u6295\u7968\u6cd5\uff08\u4e0b\u6587\u7684\u201c\u4f17\u6570\u201d\u90fd\u662f\u9898\u76ee\u4e2d\u7684\u5b9a\u4e49\uff0c\u800c\u4e0d\u662f\u66f4\u4e3a\u5e38\u89c1\u7684\u90a3\u4e2a\u542b\u4e49\uff09\u3002\n\n\u6469\u5c14\u6295\u7968\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u4e3a\u5bf9\u62fc\u6d88\u8017\uff0c\u8003\u8651\u4e00\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a\u6570\uff0c\u5982\u679c\u76f8\u540c\u5c31\u653e\u56de\uff0c\u4e0d\u540c\u7684\u8bdd\u5c31\u62b5\u6d88\uff0c\u628a\u8fd9\u4e24\u4e2a\u6570\u5168\u90fd\u5220\u9664\uff0c\u76f4\u5230\u5e8f\u5217\u4e3a\u7a7a\u6216\u5269\u4e00\u79cd\u6570\u3002\u5982\u679c\u5e8f\u5217\u7a7a\u4e86\u5c31\u8bf4\u660e\u5b83\u6ca1\u6709\u4f17\u6570\uff0c\u5426\u5219\u5269\u4e0b\u7684\u8fd9\u79cd\u6570\u5c31**\u53ef\u80fd**\u662f\u8fd9\u4e2a\u5e8f\u5217\u7684\u4f17\u6570\u3002\u6ce8\u610f\u88ab\u5176\u4ed6\u7684\u6570\u7edd\u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff0c\u5269\u4e0b\u7684\u8fd9\u4e2a\u662f\u4e0d\u662f\u7b54\u6848\u8fd8\u9700\u8981\u68c0\u9a8c\u3002\u7ecf\u5178\u7684\u5e94\u7528\u6709 [P3765 \u603b\u7edf\u9009\u4e3e](https://www.luogu.com.cn/problem/P3765)\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u53ef\u80fd\u7684\u4f17\u6570\uff0c\u7136\u540e\u7528\u5e73\u8861\u6811\u68c0\u67e5\u8fd9\u662f\u5426\u662f\u4f17\u6570\u3002\n\n\u56de\u5230\u8fd9\u4e2a\u9898\uff0c\u9996\u5148\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5982\u679c\u6709\u89e3\uff0c\u5219\u6700\u7ec8\u7684\u7b54\u6848\u5fc5\u7136\u662f\u81f3\u5c11\u4e00\u4e2a\u88ab\u8be2\u95ee\u5230\u7684\u5e8f\u5217\u7684\u4f17\u6570\u3002\u663e\u7136\u662f\u6b63\u786e\u7684\uff1a\u5982\u679c\u4e00\u4e2a\u6570\u5728\u4efb\u4f55\u4e00\u4e2a\u5e8f\u5217\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u4e0d\u8d85\u8fc7\u4e00\u534a\uff0c\u90a3\u4e48\u628a\u5e8f\u5217\u90fd\u62fc\u8d77\u6765\u81ea\u7136\u4e5f\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u534a\u3002\u6211\u4eec\u79f0\u5b58\u5728\u4f17\u6570\u7684\u5e8f\u5217\u4e3a\u201c\u53ef\u8d21\u732e\u7684\u5e8f\u5217\u201d\uff0c\u5176\u4f59\u4e3a\u201c\u4e0d\u53ef\u8d21\u732e\u7684\u5e8f\u5217\u201d\u3002\u6211\u4eec\u8003\u8651\u5bf9\u53ef\u8d21\u732e\u7684\u5e8f\u5217\u8fdb\u884c\u6469\u5c14\u6295\u7968\uff08\u56e0\u4e3a\u7b54\u6848\u53ea\u6709\u53ef\u80fd\u5728\u8fd9\u91cc\u4ea7\u751f\uff09\uff0c\u6bd4\u8f83\u65b9\u4fbf\u7684\u505a\u6cd5\u662f\u6bcf\u4e2a\u53ef\u8d21\u732e\u5e8f\u5217\u7684\u4f17\u6570\u5148\u548c\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u5176\u4f59\u7684\u6570\u8fdb\u884c\u62b5\u6d88\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u5e8f\u5217\u7ecf\u8fc7\u5185\u90e8\u62b5\u6d88\u540e\u7684\u4f17\u6570\u518d\u62ff\u51fa\u6765\u8fdb\u884c\u6469\u5c14\u6295\u7968\u3002\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u7ef4\u62a4\u5f53\u524d\u7b54\u6848\u548c\u5b83\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u628a\u6240\u6709\u53ef\u8d21\u732e\u5e8f\u5217\u626b\u4e00\u904d\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\u7136\u540e\u6211\u4eec\u6700\u540e\u627e\u5230\u4e00\u4e2a\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u6570\uff0c\u518d\u68c0\u9a8c\u4e00\u904d\u5373\u53ef\uff0c\u628a\u88ab\u8be2\u95ee\u7684\u6240\u6709\u5e8f\u5217\u626b\u4e00\u904d\uff0c\u5728\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8fd9\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u7136\u540e\u52a0\u8d77\u6765\uff0c\u770b\u662f\u4e0d\u662f\u6240\u6709\u5e8f\u5217\u62fc\u63a5\u540e\u7684\u4f17\u6570\u3002\n\n\u8fd9\u91cc\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee\uff08\u5305\u62ec\u6211\u4e5f\u6709\u8fc7\u8fd9\u4e2a\u7591\u60d1\uff09\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u53ef\u8d21\u732e\u7684\u5e8f\u5217\u5728\u5bfb\u627e\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u6570\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\uff1f\u5982\u679c\u628a\u8fd9\u4e9b\u5e8f\u5217\u4e5f\u52a0\u5165\u8003\u8651\uff0c\u6469\u5c14\u6295\u7968\u7684\u7ed3\u679c\u4f1a\u4ea7\u751f\u53d8\u5316\u5427\uff1f\uff08\u5373\u9009\u51fa\u7684\u6570\u662f\u53e6\u4e00\u4e2a\u53ef\u8d21\u732e\u7684\u5e8f\u5217\u7684\u4f17\u6570\uff09\n\n\u8fd9\u6837\u8003\u8651\uff1a\u5982\u679c\u628a\u4e0d\u53ef\u8d21\u732e\u5e8f\u5217\u52a0\u5165\u8003\u8651\u540e\u6469\u5c14\u6295\u7968\u7684\u7ed3\u679c\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u6b64\u6b21\u8be2\u95ee\u5fc5\u7136\u65e0\u89e3\uff0c\u7531\u4e8e\u68c0\u9a8c\u64cd\u4f5c\u7684\u5b58\u5728\uff0c\u4e0d\u5f71\u54cd\u6700\u7ec8\u7b54\u6848\u3002\u4e3a\u4ec0\u4e48\u5fc5\u7136\u65e0\u89e3\uff1f\u5982\u679c\u53ea\u8003\u8651\u53ef\u8d21\u732e\u5e8f\u5217\uff0c\u53ef\u80fd\u7684\u7b54\u6848\u4e3a $x$\uff0c\u52a0\u5165\u4e0d\u53ef\u8d21\u732e\u5e8f\u5217\uff0c\u53ef\u80fd\u7684\u7b54\u6848\u53d8\u6210 $y$\u3002\u8fd9\u53d8\u6210\u4e86\u6700\u539f\u59cb\u7684\u6469\u5c14\u6295\u7968\u95ee\u9898\uff0c$x$ \u88ab\u629b\u5f03\uff0c$y$ \u662f\u6b64\u6b21\u8be2\u95ee\u552f\u4e00\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u6570\u3002\u4f46\u662f $y$ \u5728\u53ef\u8d21\u732e\u5e8f\u5217\u4e2d\u4e0d\u662f\u4f17\u6570\uff0c\u4e0d\u53ef\u8d21\u732e\u5e8f\u5217\u6839\u672c\u6ca1\u6709\u4f17\u6570\uff0c\u6211\u4eec\u521a\u624d\u8bf4\u4e86\uff0c\u201c\u5982\u679c\u6709\u89e3\uff0c\u5219\u6700\u7ec8\u7684\u7b54\u6848\u5fc5\u7136\u662f\u81f3\u5c11\u4e00\u4e2a\u88ab\u8be2\u95ee\u5230\u7684\u5e8f\u5217\u7684\u4f17\u6570\u201d\uff0c\u6240\u4ee5\u8fd9\u4e2a $y$ \u4e0d\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e8e\u662f\u65e0\u89e3\u3002\n\n\u7ec6\u8282\uff1a\u8be2\u95ee\u65f6\u7edf\u8ba1\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u65f6\u8bb0\u5f97\u5f00 long long\uff1b\u6ce8\u610f\u503c\u57df\u662f\u4ece $0$ \u5f00\u59cb\u7684\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n\tint ss=0,ww=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-')\n\t\t\tww=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tss=ss*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn ss*ww;\n}\nconst int N=1000010;\nint s[N],n,q;\nint node;\nstruct ST{\n\tint ls;\n\tint rs;\n\tint sum;\n\tint dat;\n}st[N*30];\nint rt[N];\nvoid add(int &root,int l,int r,int x,int k){\n\tif(!root)\n\t\troot=++node;\n\tif(l==r){\n\t\tst[root].sum+=k;\n\t\tst[root].dat=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(mid>=x)\n\t\tadd(st[root].ls,l,mid,x,k);\n\telse\n\t\tadd(st[root].rs,mid+1,r,x,k);\n\tif(st[st[root].ls].sum>st[st[root].rs].sum){\n\t\tst[root].sum=st[st[root].ls].sum;\n\t\tst[root].dat=st[st[root].ls].dat;\n\t}\n\telse{\n\t\tst[root].sum=st[st[root].rs].sum;\n\t\tst[root].dat=st[st[root].rs].dat;\n\t}\n}\nST ask(int root,int l,int r,int x){\n\tif(l==r)\n\t\treturn st[root];\n\tint mid=(l+r)/2;\n\tif(mid>=x)\n\t\treturn ask(st[root].ls,l,mid,x);\n\telse\n\t\treturn ask(st[root].rs,mid+1,r,x);\n}\nvoid merge(int &root,int p,int q,int l,int r){\n\tif(!p){\n\t\troot=q;\n\t\treturn;\n\t}\n\tif(!q){\n\t\troot=p;\n\t\treturn;\n\t}\n\tif(!root)\n\t\troot=++node;\n\tif(l==r){\n\t\tst[root].sum=st[p].sum+st[q].sum;\n\t\tst[root].dat=l;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tmerge(st[root].ls,st[p].ls,st[q].ls,l,mid);\n\tmerge(st[root].rs,st[p].rs,st[q].rs,mid+1,r);\n\tif(st[st[root].ls].sum>st[st[root].rs].sum){\n\t\tst[root].sum=st[st[root].ls].sum;\n\t\tst[root].dat=st[st[root].ls].dat;\n\t}\n\telse{\n\t\tst[root].sum=st[st[root].rs].sum;\n\t\tst[root].dat=st[st[root].rs].dat;\n\t}\n}\nint fst[N],lst[N],pre[N],val[N];\nint id;\nvoid push_back(int x,int y){//\u7b2c x \u4e2a\u5e8f\u5217\u540e\u63d2\u5165 y \n\tid++;\n\tif(!fst[x])\n\t\tfst[x]=id;\n\tval[id]=y;\n\tpre[id]=lst[x];\n\tlst[x]=id;\n}\nint sz[N];//\u5e8f\u5217\u957f\u5ea6 \nint x[N];\nint main(){\n\t//freopen(\"major.in\",\"r\",stdin);\n\t//freopen(\"major.out\",\"w\",stdout);\n\tn=read();\n\tq=read();\n\tfor(int i=1;i<=n;i++){\n\t\tint m;\n\t\tm=read();\n\t\tsz[i]=m;\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tint x;\n\t\t\tx=read()+1;\n\t\t\tpush_back(i,x);\n\t\t\tadd(rt[i],0,n+q+1,x,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i++){\n\t\tint opt;\n\t\topt=read();\n\t\tif(opt==1){\n\t\t\tint x,y;\n\t\t\tx=read();\n\t\t\ty=read()+1;\n\t\t\tpush_back(x,y);\n\t\t\tadd(rt[x],0,n+q+1,y,1);\n\t\t\tsz[x]++;\n\t\t}\n\t\tif(opt==2){\n\t\t\tint x;\n\t\t\tx=read();\n\t\t\tadd(rt[x],0,n+q+1,val[lst[x]],-1);\n\t\t\tlst[x]=pre[lst[x]];\n\t\t\tsz[x]--;\n\t\t\tif(!sz[x])\n\t\t\t\tfst[x]=0;\n\t\t}\n\t\tif(opt==3){\n\t\t\tint m;\n\t\t\tm=read();\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t\tx[j]=read();\n\t\t\tpair<int,long long> nw;\n\t\t\tnw={0,0};\n\t\t\tlong long tot=0;\n\t\t\tfor(int j=1;j<=m;j++){\n\t\t\t\ttot+=sz[x[j]];\n\t\t\t\tif(st[rt[x[j]]].sum<=sz[x[j]]/2)//\u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u6709\u65e0\u4f17\u6570 \n\t\t\t\t\tcontinue;\n\t\t\t\tlong long res=st[rt[x[j]]].sum-(sz[x[j]]-st[rt[x[j]]].sum);//\u8be5\u5e8f\u5217\u4f17\u6570\u548c\u5e8f\u5217\u4e2d\u5176\u4ed6\u6570\u8fdb\u884c\u62b5\u6d88 \n\t\t\t\tif(st[rt[x[j]]].dat==nw.first){//\u5982\u679c\u8fd9\u4e2a\u6570\u548c\u5f53\u524d\u7b54\u6848\u76f8\u540c\uff0c\u5408\u5e76 \n\t\t\t\t\tnw.second+=res;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(nw.second==res){//\u6070\u597d\u62b5\u6d88\u4e86 \n\t\t\t\t\tnw={0,0};\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(nw.second<res){//\u66f4\u65b0\u7b54\u6848\uff0c\u5e76\u8fdb\u884c\u62b5\u6d88 \n\t\t\t\t\tnw={st[rt[x[j]]].dat,res-nw.second};\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(nw.second>res)//\u4e0d\u66f4\u65b0\uff0c\u4f46\u662f\u62b5\u6d88\u4e00\u6b21 \n\t\t\t\t\tnw.second-=res;\n\t\t\t}\n\t\t\tlong long ans=0;\n\t\t\tif(!nw.first){//\u5168\u90fd\u62b5\u6d88\u4e86\uff0c\u6ca1\u6709\u4f17\u6570 \n\t\t\t\tcout<<\"-1\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int j=1;j<=m;j++)//\u68c0\u67e5\u7684\u8fc7\u7a0b \n\t\t\t\tans+=ask(rt[x[j]],0,n+q+1,nw.first).sum;\n\t\t\tif(ans>tot/2)//\u5982\u679c\u5408\u6cd5 \n\t\t\t\tcout<<nw.first-1<<'\\n';\n\t\t\telse\n\t\t\t\tcout<<\"-1\\n\";\n\t\t}\n\t\tif(opt==4){\n\t\t\tint a,b,c;\n\t\t\ta=read();\n\t\t\tb=read();\n\t\t\tc=read();\n\t\t\tmerge(rt[c],rt[a],rt[b],0,n+q+1);\n\t\t\tif(lst[b])\n\t\t\t\tlst[c]=lst[b];\n\t\t\telse\n\t\t\t\tlst[c]=lst[a];\n\t\t\tif(fst[a])\n\t\t\t\tfst[c]=fst[a];\n\t\t\telse\n\t\t\t\tfst[c]=fst[b];\n\t\t\tif(fst[b])\n\t\t\t\tpre[fst[b]]=lst[a];\n\t\t\tsz[c]=sz[a]+sz[b];\n\t\t\tsz[a]=sz[b]=fst[a]=fst[b]=lst[a]=lst[b]=0;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1661517250,
        "uid": 140360,
        "name": "LKawaii",
        "ccfLevel": 0,
        "title": "P8496 [NOI2022] \u4f17\u6570 \u9898\u89e3"
    },
    {
        "content": "## \u524d\u8a00\n\n\u5173\u4e8e deque\uff0c\u5b83\u6b7b\u4e86\u3002\n\n## \u6b63\u6587\n\n\u9996\u5148\u6765\u770b\u51fa\u73b0\u6b21\u6570\u4e25\u683c\u5927\u4e8e\u4e00\u534a\u7684\u4f17\u6570\u600e\u4e48\u5904\u7406\uff0c\u5176\u5b9e\u5c31\u662f\u7ecf\u5178\u7684\u6469\u5c14\u6295\u7968\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b\u770b[\u8fd9\u9898](https://www.luogu.com.cn/problem/P2397)\u3002\u5c31\u662f\u8003\u8651\u628a\u4e24\u4e2a\u4e0d\u540c\u7684\u6570\u5339\u914d\u8d77\u6765\u6d88\u6389\uff0c\u6700\u540e\u4f1a\u5269\u4e0b\u4e00\u4e9b\u76f8\u540c\u7684\u6570\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u4e00\u534a\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u6570\u80af\u5b9a\u662f\u5b83\uff08\u56e0\u4e3a\u5176\u4ed6\u7684\u6570\u52a0\u8d77\u6765\u90fd\u6d88\u4e0d\u8fc7\u5b83\uff09\u3002\n\n\u800c\u8fd9\u4e2a\u4fe1\u606f\u662f\u652f\u6301\u5408\u5e76\u7684\uff0c\u8bb0\u4e00\u4e0b\u5269\u4e0b\u7684\u6570\u662f\u4ec0\u4e48\u4ee5\u53ca\u6709\u591a\u5c11\u4e2a\u5c31\u597d\uff0c\u8fd9\u6837\u4e5f\u987a\u5229\u89e3\u51b3\u4e86\u8be2\u95ee\u4f1a\u82e5\u5e72\u5e8f\u5217\u5982\u4f55\u5408\u5e76\u7684\u95ee\u9898\uff1a\u5f97\u5230\u6bcf\u4e2a\u5e8f\u5217\u6469\u5c14\u6295\u7968\u7684\u7ed3\u679c\u540e\u518d\u5408\u5e76\u5373\u53ef\u3002\n\n\u56de\u5230\u9898\u76ee\uff0c\u7ed9\u5b9a\u82e5\u5e72\u5e8f\u5217\uff0c\u800c\u8fd9\u4e9b\u5e8f\u5217\u90fd\u5728\u52a8\uff0c\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u7528 fhq \u7ef4\u62a4\u3002\u5408\u5e76\uff0c\u63d2\u5165\uff0c\u4ee5\u53ca\u5220\u9664\u90fd\u662f\u57fa\u672c\u7684\u64cd\u4f5c\u3002\n\n\u73b0\u5728\u6211\u4eec\u901a\u8fc7\u6469\u5c14\u6295\u7968\u5f97\u5230\u4e86\u552f\u4e00\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u6570\uff0c\u4f46\u8fd9\u4e2a\u6570\u8fd8\u9700\u8981 check \u4e00\u4e0b\uff0c\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u67e5\u8be2\u5b83\u5728\u5404\u4e2a\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u53d1\u73b0\u7ebf\u6bb5\u6811\u5408\u5e76\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\u3002\n\n\u6ce8\u610f\u8fd9\u9898\u662f\u9700\u8981\u5f00 long long \u7684\uff0c\u56e0\u4e3a\u8be2\u95ee\u7ed9\u51fa\u7684\u5e8f\u5217\u7f16\u53f7\u53ef\u4ee5\u91cd\u590d\uff0c\u4f46\u6211\u8d5b\u65f6\u6ca1\u5f00 long long \u5374\u8fc7\u4e86\uff0c\u5f88\u795e\u5fc5\u3002\n\n\u7136\u540e\u8d34\u4e0a\u8d5b\u65f6\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<ctype.h>\n#include<random>\n#define N 1000005\n#define fi first\n#define se second\nusing namespace std;\ninline int read(){\n    int x=0,f=0;char ch=getchar();\n    while(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n    while(isdigit(ch)) x=x*10+(ch-'0'),ch=getchar();\n    return f?-x:x;\n}\nint n,q,m;\ninline pair<int,int> calc(pair<int,int> x,pair<int,int> y){\n    if(x.fi==y.fi) return {x.fi,x.se+y.se};\n    if(x.se==y.se) return {0,0};\n    if(x.se>y.se) return {x.fi,x.se-y.se};\n    return {y.fi,y.se-x.se};\n}\nstruct segmentTree{\n    int ls[N*60],rs[N*60],val[N*60],pool;\n    void update(int &k,int l,int r,int x,int v){\n        if(!k) k=++pool;\n        if(l==r){\n            val[k]+=v;\n            return;\n        }\n        int mid=l+r>>1;\n        if(x<=mid) update(ls[k],l,mid,x,v);\n        else update(rs[k],mid+1,r,x,v);\n    }\n    int merge(int x,int y,int l,int r){\n        if(!x || !y) return x|y;\n        if(l==r){\n            val[x]+=val[y];\n            return x;\n        }\n        int mid=l+r>>1;\n        ls[x]=merge(ls[x],ls[y],l,mid);\n        rs[x]=merge(rs[x],rs[y],mid+1,r);\n        return x;\n    }\n    int query(int k,int l,int r,int x){\n        if(l==r) return val[k];\n        int mid=l+r>>1;\n        if(x<=mid) return query(ls[k],l,mid,x);\n        return query(rs[k],mid+1,r,x);\n    }\n}T2;\nmt19937 rnd(114514);\nstruct FHQ{\n    int ls[N],rs[N],sze[N],val[N],pool,rt[N];\n    pair<int,int> sum[N];\n    inline void pushup(int k){\n        sze[k]=sze[ls[k]]+sze[rs[k]]+1;\n        sum[k]=calc(calc(sum[ls[k]],{val[k],1}),sum[rs[k]]);\n    }\n    void split(int k,int &x,int &y,int v){\n        if(!k) return (void)(x=y=0);\n        if(v>=sze[ls[k]]+1){\n            x=k;\n            split(rs[k],rs[x],y,v-sze[ls[k]]-1);\n        }\n        else{\n            y=k;\n            split(ls[k],x,ls[y],v);\n        }\n        pushup(k);\n    }\n    int merge(int x,int y){\n        if(!x || !y) return x|y;\n        if(rnd()%(sze[x]+sze[y])<sze[x]){\n            rs[x]=merge(rs[x],y);\n            pushup(x);return x;\n        }\n        else{\n            ls[y]=merge(x,ls[y]);\n            pushup(y);return y;\n        }\n    }\n    inline void insert(int r,int x){\n        val[++pool]=x;\n        sum[pool]={x,1};\n        sze[pool]=1;\n        rt[r]=merge(rt[r],pool);\n    }\n    inline int del(int r){\n        int x,y;\n        split(rt[r],x,y,sze[rt[r]]-1);\n        rt[r]=x;\n        return val[y];\n    }\n}T1;\nint rt[N];\ninline void insert(int r,int x){\n    T1.insert(r,x);\n    T2.update(rt[r],0,m,x,1);\n}\ninline void del(int r){\n    int x=T1.del(r);\n    T2.update(rt[r],0,m,x,-1);\n}\ninline void merge(int x,int y,int z){\n    rt[z]=T2.merge(rt[x],rt[y],0,m);\n    T1.rt[z]=T1.merge(T1.rt[x],T1.rt[y]);\n}\nint tmp[500005];\nint main(){\n    freopen(\"major.in\",\"r\",stdin);\n    freopen(\"major.out\",\"w\",stdout);\n    n=read(),q=read();\n    m=n+q;\n    for(int i=1;i<=n;++i){\n        int c=read();\n        while(c--){\n            int x=read();\n            insert(i,x);\n        }\n    }\n    for(int i=1;i<=q;++i){\n        int op=read();\n        if(op==1){\n            int x=read(),y=read();\n            insert(x,y);\n        }\n        if(op==2){\n            int x=read();\n            del(x);\n        }\n        if(op==3){\n            int tot=0,c=read(),cnt=0;\n            pair<int,int> res={0,0};\n            for(int j=1;j<=c;++j){\n                tmp[j]=read();\n                res=calc(res,T1.sum[T1.rt[tmp[j]]]);\n                tot+=T1.sze[T1.rt[tmp[j]]];\n            }\n            if(res.se==0){\n                puts(\"-1\");\n                continue;\n            }\n            if(res.se*2>tot){\n                printf(\"%d\\n\",res.fi);\n                continue;\n            }\n            for(int j=1;j<=c;++j){\n                cnt+=T2.query(rt[tmp[j]],0,m,res.fi);\n                if(2*cnt>tot) break;\n            }\n            if(2*cnt>tot){\n                printf(\"%d\\n\",res.fi);\n            }\n            else puts(\"-1\");\n        }\n        if(op==4){\n            int x=read(),y=read(),z=read();\n            merge(x,y,z);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1661263503,
        "uid": 238861,
        "name": "xzzduang",
        "ccfLevel": 0,
        "title": "NOI2022 \u4f17\u6570"
    },
    {
        "content": "- \u524d\u8a00\n\n  \u8003\u8bd5\u4e2d\u5f00\u4e86 $10^6$ \u4e2a `std::deque`\uff0c\u7136\u540e\u83b7\u5f97\u4e86 $0$ \u5206\u7684\u597d\u6210\u7ee9\u3002\n\n  \u4f46\u662f\u6d1b\u8c37\u7684\u8bc4\u6d4b\u673a\u5374\u6ca1\u6709 $\\tt MLE$\uff0c\u5927\u53d7\u9707\u64bc\u3002\n\n- \u9898\u610f\n\n  \u7ed9\u5b9a $n$ \u4e2a\u96c6\u5408\uff0c\u652f\u6301\u4e0b\u9762\u56db\u79cd\u64cd\u4f5c\uff1a\n\n  1. \u5728\u7b2c $i$ \u4e2a\u96c6\u5408\u5c3e\u90e8\u52a0\u5165\u6570\u5b57 $x$\u3002\n\n  2. \u5220\u9664\u7b2c $i$ \u4e2a\u96c6\u5408\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002\n\n  3. \u5c06\u4e00\u4e9b\u96c6\u5408\u62fc\u5728\u4e00\u8d77\uff0c\u6c42\u8fd9\u4e9b\u96c6\u5408\u7684\u4f17\u6570\u3002\uff08\u8fd9\u91cc\u7684\u4f17\u6570\u6307\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u96c6\u5408\u5927\u5c0f\u4e00\u534a\u7684\u6570\u5b57\uff09\n\n  4. \u65b0\u5efa\u4e00\u4e2a\u96c6\u5408 $z$ \u7531 $x$ \u4e0e $y$ \u62fc\u63a5\u800c\u6210\u3002\n\n- \u9898\u89e3\n\n  \u76f4\u63a5\u8003\u8651\u6c42\u4f17\u6570\uff0c\u7528\u4e86\u4e00\u79cd\u5f88\u7384\u5999\u7684\u65b9\u6cd5\u3002\uff08\u56e0\u4e3a\u4e0d\u4f1a\u6469\u5c14\u6295\u7968\uff09\n\n  \u5bf9\u4e8e\u96c6\u5408 $i$\uff0c\u4ee4\u6570\u5b57 $x$ \u7684\u6743\u503c\u4e3a $w_{i,x}=2\\times cnt_{i,x}-sz_i$\uff0c\u5176\u4e2d $cnt_{i,x}$ \u8868\u793a $x$ \u5728\u96c6\u5408 $i$ \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c$sz_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u96c6\u5408\u7684\u5927\u5c0f\u3002\n\n  \u8bbe\u8be2\u95ee\u5e8f\u5217\u4e3a $q$\uff0c\u5219\u5224\u65ad $x$ \u662f\u5426\u4e3a\u4f17\u6570\u5c31\u53d8\u6210\u4e86\u5224\u65ad $\\sum\\limits_{i=1}^m w_{q_i,x}$ \u7684\u503c\u662f\u5426\u5927\u4e8e $0$\u3002\n\n  \u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408 $i$\uff0c\u6700\u591a\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u6743\u503c\u5927\u4e8e $0$\uff0c\u4ee4\u8fd9\u4e2a\u6570\u5b57\u4e3a $x$\uff0c\u5219\u96c6\u5408 $i$ \u7684\u6743\u503c\u7b2c\u4e8c\u5927\u5c0f\u4e8e\u7b49\u4e8e $-w_{i,x}$\u3002\n\n  \u6bcf\u6b21\u8be2\u95ee\u7ef4\u62a4\u4e8c\u5143\u7ec4 $(i,val_i)$\uff0c\u8868\u793a\u6570\u5b57 $i$ \u7684\u6b63\u6743\u503c\u548c\u4e3a $val_i$\uff0c\u53ea\u6709 $val_i$ \u6700\u5927\u7684\u6570\u5b57\u624d\u6709\u53ef\u80fd\u4f5c\u4e3a\u4f17\u6570\u3002\uff08\u56e0\u4e3a\u5176\u4ed6\u7684\u6570\u5b57\u81f3\u5c11\u51cf\u53bb $val_i$\uff09\n\n  \u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u652f\u6301\u7ef4\u62a4\u96c6\u5408\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c\u652f\u6301\u67e5\u8be2\u4e00\u4e2a\u96c6\u5408\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\n\n  \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u51fa\u73b0\u6b21\u6570\uff0c\u64cd\u4f5c $4$ \u76f4\u63a5\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\uff1b\u7528 `std::list` \u7ef4\u62a4\u96c6\u5408\uff0c\u64cd\u4f5c $4$ \u5c06 `std::list` \u542f\u53d1\u5f0f\u5408\u5e76\u3002\uff08\u5c31\u662f\u5c06\u5c0f\u7684 `std::list` \u62fc\u63a5\u5230\u5927\u7684\u4e0a\u9762\u53bb\uff09\n\n  \u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log{n})$\uff0c`std::list` \u7684\u542f\u53d1\u5f0f\u5408\u5e76\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log{n})$\uff0c\u6bcf\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m\\log{m})$\uff0c\u8fd9\u91cc\u7684 $m$ \u4e3a\u6bcf\u6b21\u8be2\u95ee\u7684\u96c6\u5408\u4e2a\u6570\u3002\n\n  [\u4ee3\u7801](https://www.luogu.com.cn/paste/rkxsqtvd)\n\n- \u540e\u8bb0\uff1a\n\n  \u6700\u8fd1\u8fd0\u6c14\u4e0d\u597d\uff0c\u5199\u9898\u89e3\u6765\u8f6c\u8fd0\u3002",
        "postTime": 1661675029,
        "uid": 203214,
        "name": "HUNGRY123",
        "ccfLevel": 6,
        "title": "[NOI2022] \u4f17\u6570"
    },
    {
        "content": "## \u5173\u4e8e `deque`\r\n\r\n\u6211\u4f7f\u7528\u4e86 `deque` \u52a0\u6307\u9488\u7248\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u8fd8\u4e0d\u5e26 `delete` \u7a7a\u8282\u70b9\u7684\u8d85\u5927\u7a7a\u95f4\u5199\u6cd5\uff0c\u4f46\u662f\u5728\u6d1b\u8c37\u4e0a\u4ee5\u53ca\u5404\u5927\u5176\u4ed6 OJ \u8dd1\u4e86\u6700\u5927\u7a7a\u95f4\u4e0d\u8d85\u8fc7 500MB\u3002\r\n\r\n\u6ce8\u610f\u5230 `deque` \u8981\u5f00 $5\\times 10^5$ \u4e2a\uff0c\u5f00 $10^6$ \u4e2a\u4f1a\u8d85\u65f6\uff0c\u7a7a\u95f4\u4e5f\u4f1a\u5927\u81f3 700MB \u4ee5\u4e0a\u3002\r\n\r\n\u6211\u4e00\u5f00\u59cb\u4ee5\u4e3a `deque` \u7684 `shrink_to_fit()` \u80fd\u91ca\u653e\u5185\u5b58\uff0c\u800c `pop` \u4e0d\u80fd\u3002\u4f46\u662f\u5728\u6d1b\u8c37\u7684\u6d4b\u8bd5\u4e2d\uff0c `shrink_to_fit()` \u5e76\u6ca1\u6709\u51cf\u5c11\u5185\u5b58\u4f7f\u7528\uff0c\u53cd\u800c\u8dd1\u6162\u3002\u3002\u3002/yiw\r\n\r\n## \u524d\u7f6e\u829d\u58eb\r\n\r\n### \u6469\u5c14\u6295\u7968\r\n\r\n\u8fd9\u4e24\u5929\u624d\u542c\u5230\u8fd9\u4e2a\u4e1c\u897f\u6709\u8fd9\u4e2a\u540d\u5b57\u3002\u3002\u3002\r\n\r\n\u6211\u7b2c\u4e00\u6b21\u5b66\u4e60\u8fd9\u4e2a\u7684\u65f6\u5019\uff0c\u9898\u89e3\u662f\u8fd9\u6837\u5199\u7684\uff1a\r\n\r\n> \u6709\u4e00\u4e2a\u5c0f\u2642\u9ed1\u2642\u5c4b\uff0c\u521d\u59cb\u91cc\u9762\u5565\u90fd\u6ca1\u6709\u3002\r\n>\r\n> \u7b2c\u4e00\u4e2a\u2642\u4eba\u8fdb\u6765\uff0c\u4f4f\u5728\u91cc\u9762\u3002\r\n>\r\n> \u7b2c\u4e8c\u4e2a\u2642\u4eba\u8fdb\u6765\uff0c\u53d1\u73b0\u81ea\u5df1\u7684\u6570\u5b57\u4e0e\u524d\u9762\u90a3\u4e2a\u2642\u4eba\u4e00\u6837\uff0c\u4e8e\u662f\u4e00\u2642\u8d77\u2642\u4f4f\u2642\u5728\u2642\u91cc\u2642\u9762\u3002\r\n>\r\n> \u7b2c\u4e09\u4e2a\u2642\u4eba\u8fdb\u6765\uff0c\u53d1\u73b0\u81ea\u5df1\u7684\u6570\u5b57\u4e0e\u5c4b\u91cc\u7684\u2642\u4eba\u7684\u6570\u5b57\u4e0d\u4e00\u6837\uff0c\u4e8e\u662f\u4ece\u5c4b\u91cc\u5e26\u2642\u8d70\u2642\u4e00\u2642\u4e2a\u2642\u4eba\u3002\r\n\r\n\u5c31\u7528\u8fd9\u6837\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5904\u7406\u6240\u6709\u7684\u6570\u5b57\uff0c\u6700\u540e\u5c4b\u2642\u91cc\u5269\u4e0b\u7684\u6570\u5b57\u662f**\u552f\u4e00**\u6709**\u53ef\u80fd**\u662f\u7edd\u5bf9\u4f17\u6570\u7684\u3002\r\n\r\n\u7136\u540e\u7edf\u8ba1\u4e00\u4e0b\u4e00\u5171\u6765\u4e86\u591a\u5c11\u6570\uff0c\u7edf\u8ba1\u4e00\u4e0b\u8fd9\u4e2a\u5269\u7684\u6570\u5b57\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5224\u65ad\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6570\u5b57\u4e0d\u5fc5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e24\u4e2a\u5c0f\u2642\u9ed1\u2642\u5c4b\u53ef\u4ee5\u5408\u5e76\u3002\r\n\r\n### \u7ebf\u6bb5\u6811\r\n\r\n#### \u6743\u503c\u7ebf\u6bb5\u6811\r\n\r\n\u3002\r\n\r\n#### \u7ebf\u6bb5\u6811\u5408\u5e76\r\n\r\n\u597d\u7b80\u5355\uff0c\u6211\u8fd9\u513f\u5c31\u5199\u4e86\u56db\u884c\u4ee3\u7801\u3002\u3002\u3002\r\n\r\n\u590d\u6742\u5ea6\uff1a\u5355\u6b21\u5408\u5e76\u590d\u6742\u5ea6\u662f $O(\\texttt{\u4e24\u9897\u7ebf\u6bb5\u6811\u91cd\u590d\u7684\u8282\u70b9\u4e2a\u6570})$\uff0c\u8fd9\u91cc\u91cd\u590d\u6307\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\u4e24\u9897\u7ebf\u6bb5\u6811\u90fd\u6709\u8282\u70b9\u3002\u4f46\u662f\u5408\u5e76\u4e4b\u540e\u8282\u70b9\u4e2a\u7a0e\u5c31\u4f1a\u51cf\u5c11\u91cd\u590d\u8282\u70b9\u4e2a\u6570\uff0c\u56e0\u4e3a\u4e24\u4e2a\u53ea\u4fdd\u7559\u4e86\u4e00\u4e2a\u3002\u6240\u4ee5\uff0c\u5982\u679c\u521d\u59cb\u6709 $n$ \u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u603b\u590d\u6742\u5ea6\uff08\u5c31\u662f\u6240\u6709\u64cd\u4f5c\u52a0\u5728\u4e00\u8d77\uff09\u662f $O(n\\log_2 n)$\u3002\r\n\r\n### \u542f\u53d1\u5f0f\u5408\u5e76\r\n\r\n\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u5c31\u662f\u5408\u5e76\u4e24\u5768\u4e1c\u897f\u7684\u65f6\u5019\u5c0f\u7684\u9010\u4e2a\u63d2\u5165\u5230\u5927\u7684\u91cc\u9762\u53bb\u3002\r\n\r\n\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f $O(n\\log_2n\\times\\texttt{\u5355\u6b21\u63d2\u5165\u7684\u590d\u6742\u5ea6})$\u3002\r\n\r\n## \u601d\u8def\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a\u5e8f\u5217\u7ef4\u62a4\u4e00\u4e2a `deque` \u548c\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u3002\r\n\r\n\u5728\u6bcf\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u2642\u9ed1\u2642\u5c4b\u3002\r\n\r\n\u64cd\u4f5c\u56db\u9700\u8981\u5427\u4e24\u4e2a\u5e8f\u5217\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u800c `deque` \u5219\u9700\u8981\u542f\u53d1\u5f0f\u5408\u5e76\u3002\r\n\r\n## code\r\n\r\n```cpp\r\n#include<stdio.h>\r\n#include<deque>\r\n#define N 1000002\r\nusing namespace std;\r\ninline char nc()\r\n{\r\n\tstatic char buf[99999],*l,*r;\r\n\treturn l==r&&(r=(l=buf)+fread(buf,1,99999,stdin),l==r)?EOF:*l++;\r\n}\r\ninline void read(int&x)\r\n{\r\n\tchar c=nc();for(;c<'0'||'9'<c;c=nc());\r\n\tfor(x=0;'0'<=c&&c<='9';x=(x<<3)+(x<<1)+(c^48),c=nc());\r\n}\r\nstruct data\r\n{\r\n\tint maxn,cnt;\r\n\tinline data operator+(const data&kkk)const\r\n\t{\r\n\t\tif(maxn==kkk.maxn)return(data){maxn,cnt+kkk.cnt};\r\n\t\tif(cnt>kkk.cnt)return(data){maxn,cnt-kkk.cnt};\r\n\t\treturn(data){kkk.maxn,kkk.cnt-cnt};\r\n\t}\r\n}tmp;\r\nstruct node\r\n{\r\n\tdata x;node*l,*r;\r\n\tinline node(){x.cnt=0;l=r=0;}\r\n}*tre[N];\r\nint n,q,b[N],f[N];deque<int>a[N>>1];\r\ninline int find(const int&x){if(x^f[x])return f[x]=find(f[x]);return x;}\r\ninline void upd(node*i)\r\n{\r\n\tif(!i->l)i->x=i->r->x;\r\n\telse if(!i->r)i->x=i->l->x;\r\n\t\telse i->x=i->l->x+i->r->x;\r\n}\r\ninline void add(node*&i,const int&l,const int&r,const int&x)\r\n{\r\n\tif(!i)i=new node;\r\n\tif(l==r){i->x.maxn=x;++i->x.cnt;return;}\r\n\tint mid=l+r>>1;\r\n\tif(x<=mid)add(i->l,l,mid,x);\r\n\telse add(i->r,mid+1,r,x);\r\n\tupd(i);\r\n}\r\ninline void del(node*&i,const int&l,const int&r,const int&x)\r\n{\r\n\tif(l==r){--i->x.cnt;if(!i->x.cnt)i=0;return;}\r\n\tint mid=l+r>>1;\r\n\tif(x<=mid)del(i->l,l,mid,x);\r\n\telse del(i->r,mid+1,r,x);\r\n\tif(!i->l&&!i->r)i=0;\r\n\telse upd(i);\r\n}\r\ninline int ask(const node*i,const int&l,const int&r,const int&x)\r\n{\r\n\tif(!i)return 0;\r\n\tif(l==r)return i->x.cnt;\r\n\tint mid=l+r>>1;\r\n\tif(x<=mid)return ask(i->l,l,mid,x);\r\n\treturn ask(i->r,mid+1,r,x);\r\n}\r\ninline void onion(node*&i,node*&j)\r\n{\r\n\tif(!i){i=j;return;}\r\n\tif(!j)return;\r\n\tif(i->l||i->r)onion(i->l,j->l),onion(i->r,j->r),upd(i);\r\n\telse i->x.cnt+=j->x.cnt;//\u7279\u5224\u53f6\u5b50\u8282\u70b9\uff0c\u8fd9\u4e2a\u6211\u8c03\u4e86\u597d\u4e45\u624d\u53d1\u73b0\u9505\r\n}\r\nmain()\r\n{\r\n\tread(n);read(q);\r\n\tfor(int i=1,x;i<=n;++i)\r\n\t{\r\n\t\tread(x);a[i].resize(x);f[i]=i;\r\n\t\tfor(int j=0;j<x;read(a[i][j]),add(tre[i],0,n+q,a[i][j]),++j);\r\n\t}\r\n\tfor(int qq=q,o,x,y,z;qq--;)switch(read(o),o)\r\n\t{\r\n\t\tcase 1:read(x);read(y);\r\n\t\t\ta[find(x)].emplace_back(y);add(tre[x],0,n+q,y);\r\n\t\t\tbreak;\r\n\t\tcase 2:read(x);\r\n\t\t\tdel(tre[x],0,n+q,a[find(x)].back());a[find(x)].pop_back();\r\n\t\t\tbreak;\r\n\t\tcase 3:read(x);tmp.cnt=0;y=z=0;\r\n\t\t\tfor(int i=0;i<x;read(b[i]),y+=a[find(b[i])].size()\r\n\t\t\t\t,a[find(b[i])].size()&&(tmp=tmp+tre[b[i]]->x,1),++i);\r\n\t\t\tfor(int i=0;i<x;z+=ask(tre[b[i++]],0,n+q,tmp.maxn));\r\n\t\t\t// for(int i=0;i<x;++i)\r\n\t\t\t// {\r\n\t\t\t// \tfor(int j=0;j<a[find(b[i])].size();++j)\r\n\t\t\t// \t\tprintf(\"%d \",a[find(b[i])][j]);\r\n\t\t\t// \tputchar('\\n');\r\n\t\t\t// }\r\n\t\t\t// printf(\"%d %d %d %d\\n\",tmp.maxn,tmp.cnt,y,z);\r\n\t\t\tif(z>y>>1)printf(\"%d\\n\",tmp.maxn);\r\n\t\t\telse printf(\"-1\\n\");\r\n\t\t\tbreak;\r\n\t\tcase 4:read(x);read(y);read(z);\r\n\t\t\tonion(tre[z]=tre[y],tre[x]);\r\n\t\t\tif(a[find(x)].size()<a[find(y)].size())\r\n\t\t\t\tfor(f[z]=find(y);a[find(x)].size();a[find(z)].push_front(\r\n\t\t\t\t\ta[find(x)].back()),a[find(x)].pop_back());\r\n\t\t\telse for(f[z]=find(x);a[find(y)].size();a[find(z)].push_back(\r\n\t\t\t\t\ta[find(y)].front()),a[find(y)].pop_front());\r\n\t}\r\n}\r\n```\r\n\r\n## \u5173\u4e8e\u624b\u5199\u94fe\u8868\r\n\r\n\u7528\u5b83\uff0c\u4e0d\u4ec5\u5e38\u6570\u5c0f\u5f88\u591a\uff0c\u8fd8\u4e0d\u9700\u8981\u542f\u53d1\u5f0f\u5408\u5e76\u4e86\uff0c\u751a\u81f3\u8fde\u5e76\u67e5\u96c6\u90fd\u4e0d\u9700\u8981\u5199\u4e86\u6b38\u3002\r\n",
        "postTime": 1661959368,
        "uid": 90693,
        "name": "_\u2022\u0301\u3078\u2022\u0301\u256c_",
        "ccfLevel": 7,
        "title": "P8496 [NOI2022] \u4f17\u6570"
    },
    {
        "content": "D1 \u628a\u6211\u9001\u8d70\u7684\u9898\u2026\u2026\n\n\u5148\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\u5982\u4f55\u6c42\u5b83\u7684\u7edd\u5bf9\u4f17\u6570\u3002\u6709\u4e00\u4e2a\u968f\u673a\u5316\u7b97\u6cd5\u662f\uff1a\u8bbe\u5b9a\u9608\u503c $B$\uff0c\u6bcf\u6b21\u4ece\u5e8f\u5217\u4e2d\u968f\u673a\u9009\u51fa\u4e00\u4e2a\u6570 $x$\uff0c\u7136\u540e\u626b\u4e00\u904d\u5e8f\u5217\u6c42\u51fa $x$ \u7684\u51fa\u73b0\u6b21\u6570 $c$\uff0c\u5982\u679c $c>\\frac{n}{2}$ \u90a3 $x$ \u5373\u4e3a\u7b54\u6848\uff0c\u5426\u5219\u7ee7\u7eed\u968f\u76f4\u5230\u968f\u673a\u6b21\u6570\u5927\u4e8e $B$\u3002\u4e0d\u96be\u770b\u51fa\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u4f1a\u5728\u5e8f\u5217\u5b58\u5728\u7edd\u5bf9\u4f17\u6570\u4e14 $B$ \u6b21\u968f\u673a\u90fd\u6ca1\u9009\u51fa\u7edd\u5bf9\u4f17\u6570\u65f6\u51fa\u9519\u3002\u800c\u5982\u679c\u8fd9\u4e2a\u5e8f\u5217\u5b58\u5728\u7edd\u5bf9\u4f17\u6570\uff0c\u6bcf\u6b21\u968f\u673a\u81f3\u5c11\u6709 $\\frac{1}{2}$ \u7684\u6982\u7387\u9009\u51fa\u7edd\u5bf9\u4f17\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7b97\u6cd5\u5355\u6b21\u7684\u51fa\u9519\u6982\u7387\u4e3a $2^{-B}$\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u597d\u5904\u5728\u4e8e\u5b83\u53ea\u9700\u8981\u652f\u6301\u5f88\u7b80\u5355\u7684\u64cd\u4f5c\uff1a\u67e5\u8be2\u67d0\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u968f\u673a\u8bbf\u95ee\u67d0\u4e2a\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u3002\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5982\u679c\u6ca1\u6709\u5408\u5e76\u64cd\u4f5c\uff08\u5373 $4$ \u64cd\u4f5c\uff09\u53ea\u9700\u8981\u5bf9\u521d\u59cb\u65f6\u7ed9\u5b9a\u7684 $n$ \u4e2a\u5e8f\u5217\u4f9d\u6b21\u5f00\u4e00\u4e2a**\u54c8\u5e0c\u8868**\u5b58\u50a8\u7b2c $i$ \u4e2a\u5e8f\u5217\u4e2d $j$ \u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u518d\u5f00\u4e00\u4e2a\u6808\u7ef4\u62a4\u8fdb\u6808\u51fa\u6808\u64cd\u4f5c\u3002\u5bf9\u4e8e\u5408\u5e76\u64cd\u4f5c\uff0c\u4e0d\u96be\u60f3\u5230\u91c7\u7528**\u542f\u53d1\u5f0f\u5408\u5e76**\uff0c\u628a\u957f\u5ea6\u66f4\u5c0f\u7684\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u66b4\u529b\u63d2\u5165\u5230\u66f4\u5927\u7684\u90a3\u4e2a\u5e8f\u5217\u4e2d\u3002\n\n\u6ce8\u610f\u5982\u679c $x1$ \u957f\u5ea6\u66f4\u5c0f\u5f97\u628a $x1$ \u7684\u5143\u7d20\u4f9d\u6b21\u63d2\u5230 $x2$ \u7684\u6808\u5e95\uff0c\u56e0\u6b64\u9700\u8981\u628a\u6808\u6539\u6210**\u53cc\u7aef\u961f\u5217**\u3002\u5077\u61d2\u7684\u8bdd\u7528 deque \u5b9e\u73b0\u5373\u53ef\uff0c\u4f46\u4f60\u4e5f\u4f1a\u56e0\u6b64**\u53d8\u5f97\u4e0d\u5e78**\uff0c\u56e0\u4e3a deque \u7684**\u65f6\u7a7a\u5e38\u6570**\u5f88\u9006\u5929\u3002\u6bd4\u5982\u6211\u5728\u8003\u573a\u4e0a\u5c31\u6ca1\u6ce8\u610f\u5230\u81ea\u5df1\u505a\u6cd5\u7684\u5de8\u5927\u5e38\u6570\uff0c\u540e\u9762\u7684\u70b9\u5168\u90fd T \u6389\u4e86\uff0c\u6700\u540e\u53ea\u6709 65 \u5206\u3002\u8fd8\u6709\u4e00\u90e8\u5206\u9009\u624b\uff08\u6211\u4e0d\u8bf4\u662f\u8c01\uff09\u66f4\u52a0\u60b2\u60e8\uff0c\u5168\u90e8 MLE\uff0c\u7206\u96f6\u4e86\u3002\u6211\u8877\u5fc3\u5e0c\u671b\u8fd9\u6837\u7684\u60e8\u5267\u4e0d\u8981\u518d\u53d1\u751f\u5728\u4efb\u4f55\u4eba\u8eab\u4e0a\u3002\u4e3a\u4e86\u907f\u514d deque \u53ef\u4ee5\u4f7f\u7528\u53cc\u6808\u6a21\u62df\u961f\u5217\uff0c\u5927\u6982\u662f\u5f00\u4e24\u4e2a\u6808\uff0c\u4e00\u4e2a\u7ef4\u62a4\u961f\u9996\u7684\u51fa\u961f\u5165\u961f\uff0c\u53e6\u4e00\u4e2a\u7ef4\u62a4\u961f\u5c3e\u7684\u51fa\u961f\u5165\u961f\uff0c\u5982\u679c\u4e00\u4e2a\u6808\u5f39\u7a7a\u4e86\u5c31\u628a\u53e6\u4e00\u4e2a\u6808\u4ece\u4e2d\u95f4\u5288\u5f00\uff0c\u5206\u6210\u4e24\u4e2a\u6808\uff0c\u590d\u6742\u5ea6\u5747\u644a\u7ebf\u6027\u3002\n\n\u5982\u679c\u8ba4\u4e3a\u54c8\u5e0c\u8868\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u4e3a $O(1)$ \uff0c\u6700\u7ec8\u7684\u590d\u6742\u5ea6\u662f $O(m\\log n+mB)$\uff0c$B$ \u7684\u7ea7\u522b\u662f $O(\\log q)$\u3002\u7136\u540e\u5c31\u662f\u9608\u503c $B$ \u5177\u4f53\u5982\u4f55\u8bbe\u7f6e\u7684\u95ee\u9898\u3002\u672c\u9898 $q=5\\times 10^5$ \u7684\u70b9\u4e00\u5171\u6709 $5$ \u4e2a\uff0c\u7b97\u4e0a\u66f4\u5c0f\u7684\u90a3\u4e9b\u6d4b\u8bd5\u70b9\u603b\u8be2\u95ee\u91cf\u5927\u6982\u662f $3\\times 10^6$ \u7ea7\u522b\u3002\u53d6 $B=24$ \u6bd4\u8f83\u5408\u9002\uff0c\u66f4\u5c0f\u7684\u503c\u5bb9\u6613\u9519\uff0c\u66f4\u5927\u7684\u8bdd\u5c31\u53c8\u8981\u5361\u5e38\u4e86\u2026\u2026\u6700\u540e\u6b63\u597d\u8d34\u7740 1s \u7684\u65f6\u9650\u8fc7\u53bb\uff0c\u8fd8\u7b97\u7a33\u5b9a\u3002\u8fd9\u4e1c\u897f\u5e38\u6570\u662f\u771f\u7684\u4e0d\u597d\uff0c\u5361\u5e38\u5361\u9ebb\u4e86\uff0c\u5982\u679c\u60a8\u6709\u5e38\u6570\u66f4\u5c0f\u7684\u5b9e\u73b0\u65b9\u5f0f\u8bf7\u52a1\u5fc5\u5728\u8bc4\u8bba\u533a\u6216\u79c1\u4fe1\u544a\u8bc9\u6211\uff0c\u8c22\u8c22\u55b5QAQ\n\n\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\uff0c\u4e3a\u4e86\u5361\u5e38\u6211\u54c8\u5e0c\u8868\u662f\u624b\u5199\u7684\uff0c\u4f46\u662f deque \u6ca1\u6709\u52a8\uff0c\u4e5f\u7b97\u662f\u7ed9\u8003\u573a\u4e0a\u7684\u81ea\u5df1\u4e00\u4e2a\u4ea4\u4ee3\u5427\uff1a\n\n```cpp\n//orz qlr rk1 \u6367\u676f \n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/hash_policy.hpp>\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define eb emplace_back\n#define mk make_pair\n#define sml(x,y) (x=min(x,y))\n#define big(x,y) (x=max(x,y))\n#define ll long long\n#define uint unsigned int\n#define ull unsigned long long\n#define umap unordered_map\n#define db double\n#define fo(i,x,y) for(int i=x;i<=y;++i)\n#define go(i,x,y) for(int i=x;i>=y;--i)\n#define ptc putchar\n#define emp emplace\nusing namespace std;\nusing namespace __gnu_cxx;\nusing namespace __gnu_pbds; \nll seed=chrono::system_clock::now().time_since_epoch().count();\nmt19937 rnd(seed);\ninline ll rm(ll x,ll y){return (int)(rnd()%(y-x+1ll)+x);}\ninline int read(){int ch=getchar(),x=0,f=1;while(!isdigit(ch)){if(ch==(int)('-'))f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}return x*f;}\ninline void out(int *a,int l,int r){fo(i,l,r) cout<<*(a+i)<<' ';puts(\"\");}\n\nbool Miller_Rabin(int x){\n\tfor(int i=2;i*i<=x;++i) if(x%i==0) return 0;\n\treturn 1;\n}\n\nint OI(int l,int r){\n\twhile(1){\n\t\tint x=rm(l,r);\n\t\tif(Miller_Rabin(x)) return x;\n\t}\n} \n\nconst int bs=1e7,N=1e6+5,qlr=OI(bs-100000,bs),jump=OI(428,2006);\nint n,q,whk[N],b[N],ti,vis[N];\nll sum[N];\npair<ll,int> mp[bs];\nstruct Deque_is_dead{\n\tdeque<int> D_Cu;\n\tstruct Hashwyx{\n\t\t#define add(x,y) (x+=y,x=x>=qlr?x-qlr:x)\n\t\tint id;\n\t\tint fin(int x){\n\t\t\tll y=id*10000000ll+x;\n\t\t\tint now=y%qlr;\n\t\t\twhile(mp[now].fi&&mp[now].fi!=y) add(now,jump);\n\t\t\tmp[now].fi=y;\n\t\t\treturn now;\n\t\t}\n\t\tint&operator[](int x){return mp[fin(x)].se;}\n\t}whq_Au;\n}a[N>>1];\n\nvoid file(){\n\tfreopen(\"major.in\",\"r\",stdin);\n\tfreopen(\"major.out\",\"w\",stdout);\n}\n\nsigned main(){\n\t//file();\n\tcin>>n>>q;\n\tfo(i,1,n){\n\t\twhk[i]=i;\n\t\ta[i].whq_Au.id=i;\n\t\tint len=read();\n\t\twhile(len--){\n\t\t\tint x=read();\n\t\t\ta[i].whq_Au[x]++;\n\t\t\ta[i].D_Cu.pb(x);\n\t\t}\n\t}\n\twhile(q--){\n\t\tint o=read();\n\t\tif(o==1){\n\t\t\tint x=whk[read()],y=read();\n\t\t\ta[x].whq_Au[y]++;\n\t\t\ta[x].D_Cu.pb(y);\n\t\t}else if(o==2){\n\t\t\tint x=whk[read()],y=a[x].D_Cu.back();\n\t\t\ta[x].whq_Au[y]--;\n\t\t\ta[x].D_Cu.pop_back();\n\t\t}else if(o==3){\n\t\t\tint m=read();\n\t\t\tfo(i,1,m) b[i]=whk[read()],sum[i]=sum[i-1]+a[b[i]].D_Cu.size();\n\t\t\tint B=24;\n\t\t\twhile(B--){\n\t\t\t\tll x=rm(1,sum[m]);\n\t\t\t\tint pos=lower_bound(sum+1,sum+1+m,x)-sum;\n\t\t\t\tint y=a[b[pos]].D_Cu[x-sum[pos-1]-1];\n\t\t\t\tll cnt=0;\n\t\t\t\tfo(i,1,m) cnt+=a[b[i]].whq_Au[y];\n\t\t\t\tif(cnt>sum[m]/2){\n\t\t\t\t\tcout<<y<<'\\n';\n\t\t\t\t\tgoto H;\n\t\t\t\t} \n\t\t\t}puts(\"-1\");\n\t\t\tH:;\n\t\t}else{\n\t\t\tint x1=whk[read()];\n\t\t\tint x2=whk[read()];\n\t\t\tint x3=read(),flg=0;\n\t\t\tif(a[x1].D_Cu.size()<a[x2].D_Cu.size()) swap(x1,x2),flg=1;\n\t\t\twhk[x3]=x1;\n\t\t\t//for(auto i:a[x2].whq_Au) a[x1].whq_Au[i.fi]+=i.se;\n\t\t\tfor(int i:a[x2].D_Cu){\n\t\t\t\ta[x1].whq_Au[i]++;\n\t\t\t\tif(flg) a[x1].D_Cu.push_front(i);\n\t\t\t\telse a[x1].D_Cu.push_back(i);\n\t\t\t}\n\t\t\t//a[x2].whq_Au.clear();\n\t\t\ta[x2].D_Cu.clear();a[x2].D_Cu.shrink_to_fit();\n\t\t}\n\t}\n\treturn 0;\n}\n/*\n-------------------------------------------------\n*/\n```\n\n ",
        "postTime": 1661690330,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P8496 [NOI2022] \u4f17\u6570"
    },
    {
        "content": "\u6700\u8fd1 7 \u5e74\u6700\u6c34\u7684 D1T1\u3002\n\n\u53ef\u80fd\u662f\u4e0d\u592a\u4e00\u6837\u7684\u505a\u6cd5\u3002\n\n\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u94fe\u8868\u7ef4\u62a4\u5e8f\u5217\u3002\n\n\u64cd\u4f5c 4 \u5373\u5408\u5e76\u4e24\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u3001\u4e24\u4e2a\u94fe\u8868\uff0c\u64cd\u4f5c 2 \u5c31\u662f\u5220\u9664\u94fe\u8868\u5c3e\u7684\u5143\u7d20\u5e76\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u3002\n\n\u663e\u7136\uff0c\u5982\u679c\u4e00\u4e2a\u5e8f\u5217\u5b58\u5728\u7edd\u5bf9\u4f17\u6570\uff0c\u90a3\u4e48\u5b83\u5fc5\u7136\u7b49\u4e8e\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570\u3002\u6240\u4ee5\u64cd\u4f5c 3 \u5c31\u662f\u8be2\u95ee $k$ \u4e2a\u5e8f\u5217\u6574\u4f53\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u68c0\u67e5\u8fd9\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u8003\u8651\u4e8c\u5206\u4e2d\u4f4d\u6570\uff0c\u5728 $k$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u5206\u522b\u67e5\u8be2\u524d\u7f00\u548c\uff0c\u518d\u5224\u65ad\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u800c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n \\log^2 n)$\uff0c\u53ef\u80fd\u65e0\u6cd5\u901a\u8fc7\u3002\u628a\u4e8c\u5206\u4e2d\u4f4d\u6570\u6539\u6210\u5728 $k$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5373\u53ef\u505a\u5230 $O(n \\log n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 1e6 + 3;\nconst int SIZE = N * 21;\n\nint n, q, m;\nint a[N], siz[N], head[N], tail[N], pre[N];\n\ninline void insert(int i, int p) {\n\tpre[p] = tail[i];\n\ttail[i] = p;\n\tif (!siz[i]) head[i] = p;\n\t++siz[i];\n}\n\ninline void erase(int i) {\n\ttail[i] = pre[tail[i]];\n\t--siz[i];\n\tif (!siz[i]) head[i] = 0;\n}\n\ninline void link(int i, int j, int k) {\n\thead[k] = siz[i] ? head[i] : head[j];\n\ttail[k] = siz[j] ? tail[j] : tail[i];\n\tsiz[k] = siz[i] + siz[j];\n\tif (head[j]) pre[head[j]] = tail[i];\n}\n\nint rt[N], ls[SIZE], rs[SIZE], tot;\nll cnt[SIZE];\n\nvoid update(int &x, int k, int v, int l = 1, int r = n + q) {\n\tif (!x) x = ++tot;\n\tcnt[x] += v;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (k <= mid) update(ls[x], k, v, l, mid);\n\telse update(rs[x], k, v, mid + 1, r);\n}\n\nvoid merge(int &x, int &y, int l = 1, int r = n + q) {\n\tif (!x || !y) {\n\t\tx += y;\n\t\treturn;\n\t}\n\tcnt[x] += cnt[y];\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tmerge(ls[x], ls[y], l, mid);\n\tmerge(rs[x], rs[y], mid + 1, r);\n}\n\nll query(int x, int k, int l = 1, int r = n + q) {\n\tif (!x) return 0;\n\tif (l == r) return cnt[x];\n\tint mid = (l + r) >> 1;\n\tif (k <= mid) return query(ls[x], k, l, mid);\n\treturn query(rs[x], k, mid + 1, r);\n}\n\nint c[N], tmp[N], len;\n\nint search(ll k, int l = 1, int r = n + q) {\n\tif (l == r) return l;\n\tint mid = (l + r) >> 1;\n\tll sum = 0;\n\tfor (int i = 1; i <= len; ++i)\n\t\tsum += cnt[ls[tmp[i]]];\n\tif (sum >= k) {\n\t\tfor (int i = 1; i <= len; ++i)\n\t\t\ttmp[i] = ls[tmp[i]];\n\t\treturn search(k, l, mid);\n\t} else {\n\t\tfor (int i = 1; i <= len; ++i)\n\t\t\ttmp[i] = rs[tmp[i]];\n\t\treturn search(k - sum, mid + 1, r);\n\t}\n}\n\nint main() {\n\tfreopen(\"major.in\", \"r\", stdin);\n\tfreopen(\"major.out\", \"w\", stdout);\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> n >> q;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint sz;\n\t\tcin >> sz;\n\t\tfor (int j = 1; j <= sz; ++j) {\n\t\t\tint x;\n\t\t\tcin >> x;\n\t\t\ta[++m] = x;\n\t\t\tinsert(i, m);\n\t\t\tupdate(rt[i], x, 1);\n\t\t}\n\t}\n\tfor (int i = 1; i <= q; ++i) {\n\t\tint op, x, y, z;\n\t\tcin >> op;\n\t\tif (op == 1) {\n\t\t\tcin >> x >> y;\n\t\t\ta[++m] = y;\n\t\t\tinsert(x, m);\n\t\t\tupdate(rt[x], y, 1); \n\t\t} else if (op == 2) {\n\t\t\tcin >> x;\n\t\t\tupdate(rt[x], a[tail[x]], -1);\n\t\t\terase(x);\n\t\t} else if (op == 3) {\n\t\t\tcin >> len;\n\t\t\tll all = 0, sum = 0;\n\t\t\tfor (int j = 1; j <= len; ++j) {\n\t\t\t\tcin >> c[j];\n\t\t\t\ttmp[j] = rt[c[j]];\n\t\t\t\tall += siz[c[j]];\n\t\t\t}\n\t\t\tint mid = search((all + 1) >> 1);\n\t\t\tfor (int j = 1; j <= len; ++j)\n\t\t\t\tsum += query(rt[c[j]], mid);\n\t\t\tif (sum * 2 > all)\n\t\t\t\tcout << mid << '\\n';\n\t\t\telse\n\t\t\t\tcout << \"-1\\n\";\n\t\t} else {\n\t\t\tcin >> x >> y >> z;\n\t\t\tlink(x, y, z);\n\t\t\tmerge(rt[x], rt[y]);\n\t\t\trt[z] = rt[x];\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1661584741,
        "uid": 233442,
        "name": "SSH_automaton",
        "ccfLevel": 7,
        "title": "P8496 [NOI2022] \u4f17\u6570 \u9898\u89e3"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u597d\u5199\u4e14\u901f\u5ea6\u5f88\u5feb\u7684 $O(n \\log^2 n)$  \u505a\u6cd5\u3002\n\n\n------------\n\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u6570\u662f\u4ec0\u4e48\uff0c\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u4f7f\u7528\u94fe\u8868\u7ef4\u62a4\uff0c\u6ce8\u610f\u5728\u8fde\u63a5\u65f6\u8981\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528 set \u7ef4\u62a4\u6bcf\u4e2a\u5e8f\u5217\u7684\u6570\u51fa\u73b0\u4e2a\u6570\u6700\u591a\u7684\u6570\uff0c\u7528 map \u7ef4\u62a4\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e2a\u6570\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u76f4\u63a5\u5728 set \uff0cmap \u4e0a\u6539\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5408\u5e76\u64cd\u4f5c\uff0c\u76f4\u63a5\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7ef4\u62a4\u5373\u53ef\u3002\u636e\u9a8c\u9898\u4eba\u8bf4\u8fd9\u79cd $\\log^2$ \u505a\u6cd5\u8dd1\u7684\u6bd4\u6240\u6709 $\\log $ \u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u90fd\u5feb\uff0c\u5b9e\u6d4b\u786e\u5b9e\u5f88\u5feb\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\uff0c\u8003\u8651\u5206\u6cbb\uff0c\u7531\u4e8e\u5b83\u662f\u4e25\u683c\u4f17\u6570\uff0c\u6240\u4ee5\u5c06\u8be2\u95ee\u5e8f\u5217\u5206\u6210\u4e24\u6bb5\u540e\uff0c\u5b83\u5fc5\u7136\u662f\u4e24\u6bb5\u4e2d\u4e00\u6bb5\u7684\u4e25\u683c\u4f17\u6570\uff0c\u4e0d\u65ad\u5206\u6cbb\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$ \u3002\n\n\n\n------------\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pi pair<int,int>\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define ls (rt<<1)\n#define rs (rt<<1|1)\n#define mid ((l+r)>>1)\n#define ll long long\nconst int maxn=1e6+5,M=34005;\ninline int read(){\n\tchar ch=getchar();bool f=0;int x=0;\n\tfor(;!isdigit(ch);ch=getchar())if(ch=='-')f=1;\n\tfor(;isdigit(ch);ch=getchar())x=(x<<1)+(x<<3)+(ch^48);\n\tif(f==1)x=-x;return x;\n}\nint n,m,q,x,y,z,op,sz[maxn],fa[maxn],tot=0,b[maxn],ans;\nint las[maxn],a[maxn],nex[maxn],fro[maxn];\nset<pi>s[maxn];\nmap<int,int>g[maxn];\nint find(int x){if(x==fa[x])return x;return fa[x]=find(fa[x]);}\nvoid add(int x,int y){\n\ta[++tot]=y;nex[tot]=las[x];las[x]=tot;++sz[x];\n\tif(sz[x]==1)fro[x]=tot;\n\tint z=g[x][y];\n\ts[x].erase(mp(z,y));\n\tg[x][y]++;\n\ts[x].insert(mp(z+1,y));\n}\nvoid del(int x){\n\tint y=a[las[x]];las[x]=nex[las[x]];sz[x]--;\n\tif(!sz[x])fro[x]=0;\n\tint z=g[x][y];\n\ts[x].erase(mp(z,y));\n\tg[x][y]--;\n\ts[x].insert(mp(z-1,y));\n}\nvoid merge(int x,int y,int z){\n\tif(!sz[x]){fa[z]=y;return;}\n\tif(!sz[y]){fa[z]=x;return;}\n\tfro[z]=fro[x],las[z]=las[y];\n\tnex[fro[y]]=las[x];\n\tif(sz[x]>sz[y])swap(x,y);\n\tsz[y]+=sz[x];\n\tfor(auto it:s[x]){\n\t\tint z=g[y][it.se];\n\t\tif(z)s[y].erase(mp(z,it.se));\n\t\tg[y][it.se]+=it.fi;\n\t\ts[y].insert(mp(z+it.fi,it.se));\n\t}fa[z]=y;las[y]=las[z],fro[y]=fro[z];\n}\nbool check(int l,int r,int x){\n\tll sum=0,s=0;\n\tfor(int i=l;i<=r;i++)\n\t\tsum+=g[b[i]][x],s+=sz[b[i]];\n\tif(sum*2>s)return 1;return 0;\n}\nint solve(int l,int r){\n\tif(l==r){\n\t\tif(!s[b[l]].size())return -1;\n\t\tpi x=*s[b[l]].rbegin();\n\t\tif(x.fi*2>sz[b[l]])return x.se;\n\t\treturn -1;\n\t}\n\tint s1,s2,z=-1;\n\ts1=solve(l,mid),s2=solve(mid+1,r);\n\tif(s1!=-1&&check(l,r,s1))z=s1;\n\telse if(s2!=-1&&check(l,r,s2))z=s2;\n\treturn z;\n}\nvoid sol(){\n\tm=read();\n\tfor(int i=1;i<=m;i++)b[i]=read(),b[i]=find(b[i]);\n\tans=solve(1,m);printf(\"%d\\n\",ans);\n}\nsigned main(){\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(),q=read();\n\tfor(int i=1;i<=n;i++){\n\t\tm=read();fa[i]=i;\n\t\tfor(int j=1;j<=m;j++)x=read(),add(i,x);\n\t}\n\tfor(int i=1;i<=q;i++){\n\t\top=read();\n\t\tif(op==1)x=read(),y=read(),x=find(x),add(x,y);\n\t\tif(op==2)x=read(),x=find(x),del(x);\n\t\tif(op==3)sol();\n\t\tif(op==4)x=read(),y=read(),z=read(),x=find(x),y=find(y),merge(x,y,z);\n\t}\n \treturn 0;\n}\n\n```\n\n\n",
        "postTime": 1661926654,
        "uid": 343748,
        "name": "louhao088",
        "ccfLevel": 9,
        "title": "\u9898\u89e3P8496 [NOI2022] \u4f17\u6570"
    },
    {
        "content": "#### \u524d\u8a00\n\n\u8fd9\u91cc\u662f\u8003\u573a\u4e0a\u534a\u5c0f\u65f6\u60f3\u5230\u6807\u7b97\u534a\u5c0f\u65f6\u7801\u5b8c\u7136\u540e\u94fe\u8868\u5199\u6302\u53ea\u6709 85pts \u7684\u9009\u624b\u3002\u679c\u7136\u6211\u9002\u5408\u6eda\u56de\u666e\u53ca\u7ec4\u8865\u4e60\u3002\n\n------------\n\n\u8fd9\u9898\u4e0a\u6765\u5c31\u662f\u4e00\u4e2a `#define \u4f17\u6570 \u7edd\u5bf9\u4f17\u6570` \u7684\u64cd\u4f5c\u3002\u770b\u5230\u6c42\u7edd\u5bf9\u4f17\u6570\uff0c\u60f3\u5230\u6469\u5c14\u6295\u7968\u6cd5\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u4e0d\u4e86\u89e3\u6469\u5c14\u6295\u7968\u6cd5\u7684\u73c2\u4ee5\u770b\u4e00\u4e0b [P2397](/problem/P2397)\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u6469\u5c14\u6295\u7968\u6cd5\u677f\u9898\u3002\n\n\u601d\u8def\u5c31\u662f\uff0c\u82e5\u5e8f\u5217\u5b58\u5728\u7edd\u5bf9\u4f17\u6570\uff0c\u90a3\u4e48\u6bcf\u6b21\u5220\u53bb\u5e8f\u5217\u4e2d\u4e24\u4e2a\u503c\u4e0d\u540c\u7684\u6570\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u503c\u65f6\u4e00\u5b9a\u662f\u7edd\u5bf9\u4f17\u6570\u3002\u8fd9\u4e2a\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u3002\n\n\u5177\u4f53\u5230\u8fd9\u9898\uff0c\u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u5e26\u4fee\u5e8f\u5217\u7684\u7edd\u5bf9\u4f17\u6570\u5462\uff1f\n\n\u7406\u89e3\u6469\u5c14\u6295\u7968\u6cd5\u7684\u539f\u7406\u540e\uff0c\u81ea\u7136\u5bb9\u6613\u60f3\u5230\u5b83\u7684\u4e00\u4e2a\u6027\u8d28\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8ctktuqw.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5177\u4f53\u5730\uff0c\u5220\u9664\u987a\u5e8f\u4e0d\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u9898\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u90fd\u53ea\u5f71\u54cd\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5e8f\u5217\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u5728\u6469\u5c14\u6295\u7968\u6cd5\u4e0b\u7684\u4fe1\u606f\uff08\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c\u53ca\u5176\u5269\u4f59\u7684\u51fa\u73b0\u6b21\u6570\uff09\u3002\n\n\u90a3\u4e48 pushup \u64cd\u4f5c\u5c31\u76f8\u5f53\u4e8e\u6469\u5c14\u6295\u7968\u6cd5\u4e2d\u5220\u6570\u7684\u8fc7\u7a0b\u3002\u7531\u4e8e\u5e8f\u5217\u957f\u5ea6\u4e0d\u5b9a\uff0c\u6211\u4eec\u4f7f\u7528\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5e76\u52a8\u6001\u5f00\u70b9\u3002\u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u6574\u4e2a\u5e8f\u5217\u7684\u7edd\u5bf9\u4f17\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u5355\u70b9\u4fee\u6539\u548c\u5168\u5c40\u67e5\u8be2\u3002\n\n\u5bf9\u4e8e\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\uff0c\u6ce8\u610f\u5230\u6bcf\u6b21\u53ea\u5728\u5e8f\u5217\u5c3e\u90e8\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e8e\u662f\u518d\u4f7f\u7528\u4e00\u4e2a\u94fe\u8868\u7ef4\u62a4\u5e8f\u5217\uff0c\u540c\u65f6\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u5408\u5e76\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u89e3\u51b3\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u8bb2\u89e3\u4e86\u3002\u540c\u65f6\u8fd8\u9700\u8981\u5408\u5e76\u94fe\u8868\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u7ebf\u6bb5\u6811\u8282\u70b9\u7c7b\u578b\u76f8\u540c\u7684\u53d8\u91cf\uff0c\u5c06\u5176\u4e0e\u6bcf\u4e2a\u5e8f\u5217\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u6839\u8282\u70b9\u8fdb\u884c\u5982 pushup \u4e00\u822c\u7684\u64cd\u4f5c\uff0c\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u7b54\u6848\u3002\n\n\u522b\u5fd8\u4e86\uff0c\u6469\u5c14\u6295\u7968\u6cd5\u6c42\u5f97\u7edd\u5bf9\u4f17\u6570\u7684\u524d\u63d0\u662f\u5e8f\u5217\u5b58\u5728\u7edd\u5bf9\u4f17\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u68c0\u9a8c\u7b54\u6848\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u8bb0\u5f55\u76f8\u5e94\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u7528\u521a\u624d\u7684\u7b54\u6848\u8fdb\u884c\u82e5\u5e72\u6b21\u5355\u70b9\u67e5\u8be2\u6c42\u5f97\u5b83\u5728\u5e8f\u5217\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u4e0e\u5e8f\u5217\u957f\u5ea6\u6bd4\u8f83\u5373\u53ef\u3002\n\n\u653e\u4e00\u4e0b\u6539\u5230 AC \u7684\u5220\u9664\u6ce8\u91ca\u548c freopen \u7684\u8003\u573a\u4ee3\u7801\u3002\n\n```cpp\n#include<cstdio>\nusing namespace std;\nconst int N=1e6+3;\nstruct node{\n\tint siz,ans,num;\n\tnode operator +(const node &y)const{\n\t\tnode tmp;\n\t\ttmp.siz=siz+y.siz;\n\t\tif(ans==y.ans) tmp.ans=ans,tmp.num=num+y.num;\n\t\telse if(num>y.num) tmp.ans=ans,tmp.num=num-y.num;\n\t\telse tmp.ans=y.ans,tmp.num=y.num-num;\n\t\treturn tmp;\n\t}\n};\nstruct seg{\n\tint l,r;node x;\n}t[N*22];\nvoid pushup(int x){\n\tt[x].x=t[t[x].l].x+t[t[x].r].x;\n}\nstruct seq{\n\tint x,lst,nxt;\n}a[N];\nint n,m,q,cnt,tot,hd[N],tl[N],rt[N],que[N];\nvoid add(int &x,int l,int r,int L,int k){\n\tif(!x) x=++cnt;\n\tif(l==r){\n\t\tt[x].x={t[x].x.siz+k,l,t[x].x.siz+k};\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tL>mid?add(t[x].r,mid+1,r,L,k):add(t[x].l,l,mid,L,k);\n\tpushup(x);\n}\nint query(int x,int l,int r,int L){\n\tif(l==r) return t[x].x.siz;\n\tint mid=(l+r)>>1;\n\treturn L>mid?query(t[x].r,mid+1,r,L):query(t[x].l,l,mid,L);\n}\nvoid mergeseg(int &x,int y,int l,int r){\n\tif(!y) return;\n\tif(!x){x=y;return;}\n\tif(l==r){t[x].x=t[x].x+t[y].x;return;}\n\tint mid=(l+r)>>1;\n\tmergeseg(t[x].l,t[y].l,l,mid);\n\tmergeseg(t[x].r,t[y].r,mid+1,r);\n\tpushup(x);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q),m=n+q;\n\tfor(int i=1,k;i<=n;++i){\n\t\tscanf(\"%d\",&k);\n\t\thd[i]=tot+1;\n\t\tfor(int x;k--;){\n\t\t\tscanf(\"%d\",&x);\n\t\t\t++tot;\n\t\t\ta[tot]={x,tot-1,tot+1};\n\t\t\tadd(rt[i],1,m,x,1);\n\t\t}\n\t\ttl[i]=tot;\n\t}\n\tfor(int op,x,y,z;q--;){\n\t\tscanf(\"%d\",&op);\n\t\tif(op==1){\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\ta[++tot]={y,tl[x],0};\n\t\t\t(t[rt[x]].x.siz?a[tl[x]].nxt:hd[x])=tot;\n\t\t\ttl[x]=tot;\n\t\t\tadd(rt[x],1,m,y,1);\n\t\t}\n\t\tif(op==2){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tadd(rt[x],1,m,a[tl[x]].x,-1);\n\t\t\ttl[x]=a[tl[x]].lst;\n\t\t}\n\t\tif(op==3){\n\t\t\tnode tmp={0,0,0};\n\t\t\tscanf(\"%d\",&x);\n\t\t\tfor(int i=1;i<=x;++i){\n\t\t\t\tscanf(\"%d\",que+i);\n\t\t\t\ttmp=tmp+t[rt[que[i]]].x;\n\t\t\t}\n\t\t\tint num=0;\n\t\t\tfor(int i=1;i<=x;++i)\n\t\t\t\tnum+=query(rt[que[i]],1,m,tmp.ans);\n\t\t\tprintf(\"%d\\n\",num*2>tmp.siz?tmp.ans:-1);\n\t\t}\n\t\tif(op==4){\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tif(t[rt[x]].x.siz)\n\t\t\t\thd[z]=hd[x],a[tl[x]].nxt=hd[y];\n\t\t\telse hd[z]=hd[y];\n\t\t\tif(t[rt[y]].x.siz)\n\t\t\t\ttl[z]=tl[y],a[hd[y]].lst=tl[x];\n\t\t\telse tl[z]=tl[x];\n\t\t\tmergeseg(rt[x],rt[y],1,m);\n\t\t\trt[z]=rt[x];\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n------------\n\n#### \u540e\u8bdd\n\n\u73c2\u4ee5\u53bb\u770b\u4e00\u9053\u601d\u8def\u76f8\u4f3c\u7684\u9898\u76ee [P3765 \u603b\u7edf\u9009\u4e3e](/problem/P3765)~~\uff0c\u4e0a\u9762\u7684\u56fe\u7247\u5c31\u622a\u81ea\u8fd9\u9898\u7684\u8ba8\u8bba\u533a~~\u3002\n\n\u524d\u8a00\u8bf4\u7684\u201c\u94fe\u8868\u5199\u6302\u201d\u5177\u4f53\u662f\u6307\u5408\u5e76\u64cd\u4f5c\u4e2d\u5408\u5e76\u94fe\u8868\u65f6\u5fd8\u8bb0\u5224\u7a7a\uff0c\u5bfc\u81f4\u5934\u5c3e\u6307\u9488\u53ef\u80fd\u4e22\u5931\u4fe1\u606f\u3002\u6700\u7ec8\u662f\u4e00\u540d SC \u8001\u54e5\u5e2e\u6211\u770b\u51fa\u6765\u7684\uff0c\u611f\u8c22\u4ed6/bx/bx\u3002\n\n\u8fd9\u9898\u8be2\u95ee\u65f6\u5e8f\u5217\u73c2\u4ee5\u91cd\u590d\uff0c\u6240\u4ee5\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\u65f6\u7406\u8bba\u6700\u5927\u80fd\u8fbe\u5230 $(5\\cdot10^5)^2$ \u4f1a\u7206 int\u3002\u4f46\u662f\u826f\u5fc3\u51fa\u9898\u4eba\u6ca1\u5361\u8fd9\u4e2a\uff0c\u5e78\u597d\u5e78\u597d\u3002\u6240\u4ee5\u6211\u5c31\u7528\u4e86 int\uff0c\u65e5\u540e\u6211\u8981\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\u88ab hack \u4e86\u5c31\u4e0d\u7528\u558a\u6211\u6539\u4e86\u81ea\u5df1\u60f3\u529e\u6cd5\uff08\uff08\uff08\n\n\u6211\u7701\u961f\u957f\u5e2e\u6211\u8c03\u4ee3\u7801\u65f6\u8bc4\u4ef7\u6211\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5199\u6cd5\u6bd4\u8f83\u795e\u5947\uff0c\u540c\u65f6\u5bf9\u6211\u624b\u5199\u94fe\u8868\u7684\u884c\u4e3a\u8868\u793a\u4e0d\u6ee1\uff1a\u201c\u6211\u5728\u8003\u573a\u4e0a\u60f3\u4e86 10mins \u8981\u4e0d\u8981\u5199\u94fe\u8868\u6700\u540e\u51b3\u5b9a\u4e0d\u5199\uff0c\u7ed3\u679c\u6700\u540e\u8fd8\u662f\u5f97\u8c03\u94fe\u8868\u3002\u201d\n\n\u6211\u7701 E \u961f\u7237\u8bf4\u4f7f\u7528 STL list \u5c31\u4e0d\u7528\u5408\u5e76\u65f6\u5224\u7a7a\u4e86\uff0c\u770b\u6765\u5f97\u5b66\u5b66 list\u3002~~\u6127\u5bf9 id \u7684\u5c51~~\n\n\u8bb2\u9898\u4eba\u94a6\u5b9a\u7ebf\u6bb5\u6811\u662f\u6807\u7b97\u5e76\u8868\u793a\u573a\u5207\u9009\u624b\u6ca1\u6709\u4f7f\u7528\u8fd9\u79cd\u505a\u6cd5\u7684\uff0c\u4ee4\u4eba\u611f\u53f9\u3002",
        "postTime": 1661515296,
        "uid": 128570,
        "name": "StarLbright40",
        "ccfLevel": 9,
        "title": "P8496 (NOI2022 d1t1) \u9898\u89e3"
    },
    {
        "content": "## \u7f18\u8d77\n\nNOI \u521a\u521a\u7ed3\u675f\uff0c\u4f46\u662f\u300a\u56e0\u4e3a\u75ab\u60c5\u7684\u4e0d\u786e\u5b9a\u6027\u300b\uff0cNOI \u540c\u6b65\u8d5b\u53d6\u6d88\uff0c\u56e0\u6b64\u6211\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u770b\u4e0d\u5230\u771f\u9898\u3002\n\n\u540e\u6765\u6211\u8bf7 mrsrz \u5e2e\u5fd9\u590d\u8ff0\u4e86\u7b80\u8981\u9898\u610f\uff0c\u7136\u540e\u6211\u8bf4\u77ac\u95f4\u5c31\u60f3\u8d77\u6765\u67d0\u9053\u7ecf\u5178\u9898\u76ee\uff1a\u5f88\u5c0f\u7684\u7a7a\u95f4\u9650\u5236\u6c42\u7edd\u5bf9\u4f17\u6570\u3002\n\n\u6211\u548c mrsrz \u8bf4\u201c\u6211\u6000\u7591\u8fd9\u9898\u6df7\u8fdb\u63d0\u9ad8\u7ec4\u6a21\u62df\u8d5b\u53ef\u80fd\u90fd\u5206\u4e0d\u51fa\u6765\u201d\uff0c\u7136\u540e\u5979\u8868\u793a\u76f8\u5f53\u60ca\u8bb6\uff0c\u540e\u6765\u6211\u624d\u53d1\u73b0\uff0c\u6211\u505a\u6cd5\u6bd4\u5979\u5c11\u4e00\u4e2a log\u3002\n\n\u6240\u4ee5\u4e3a\u5565\u6211\u4eca\u5929\u624d\u5199\u8fd9\u9053\u9898\u5462\uff1f\n- \u4e00\u65b9\u9762\uff0c\u6d1b\u8c37\u5f53\u65f6\u8fd8\u5728\u8ba8\u8bba\u662f\u5426\u516c\u5f00 NOI \u9898\u76ee\u3002\n- \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u8fd9\u534a\u4e2a\u6708\u90fd\u5728\u7ec3\u4e60\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u6b64\u6211\u60f3\u628a\u77e5\u8bc6\u70b9\u642d\u914d\u4e00\u4e0b\uff0c\u53e3\u5473\u66f4\u52a0\u81ea\u7136\u3002\n\n\u4f46\u662f\uff0c\u4eca\u5929\u6211\u60f3\u4e86\u60f3\uff0cNOI \u9898\uff0c\u7ed9\u70b9\u9762\u5b50\u3002\n\n**\u505a\u8fd9\u9898\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u4f1a\u7ebf\u6bb5\u6811\u5408\u5e76\u3002**\n\n## \u524d\u7f6e\u77e5\u8bc6\uff1a\u4e8c\u8fdb\u5236\u62c6\u4f4d\u6cd5\u6c42\u7edd\u5bf9\u4f17\u6570\n\n\u8fd9\u7bc7\u9898\u89e3\u548c\u697c\u4e0a\u4e0d\u540c\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u7ef4\u62a4\u6469\u5c14\u6295\u7968\u6cd5\u3002\n\n\u8be5\u65b9\u6cd5\u548c\u6469\u5c14\u6295\u7968\u6cd5\u4e00\u6837\uff0c\u80fd\u6c42\u51fa\u552f\u4e00**\u53ef\u80fd\u662f**\u7b54\u6848\u7684\u65b9\u6cd5\u3002\n\n\u5176\u5b9e\u8fd9\u65b9\u6cd5\u4e0d\u662f\u6211\u539f\u521b\u7684\uff0c\u6211\u80fd\u627e\u5230\u8be5\u65b9\u6cd5\u6700\u65e9\u7684\u51fa\u5904\u662f\uff1a https://www.luogu.com.cn/blog/daks/solution-p2397\u3002\n\n\u7b80\u8981\u590d\u8ff0\u4e00\u4e0b\u8be5\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217 $a$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d $b$\uff0c\u6c42\u6709\u591a\u5c11\u4e2a\u6570\u8be5\u4f4d\u662f $1$\uff0c\u8bb0\u4f5c $cnt_b$\u3002\n\n\u5b58\u5728\u7edd\u5bf9\u4f17\u6570 $m$ \u65f6\uff0c\u5982\u679c $m$ \u67d0\u4e00\u4f4d\u662f $1$\uff0c\u90a3\u4e48 $cnt_b$ \u4e00\u5b9a\u8fc7\u534a\uff0c\u53cd\u5219\u4e00\u5b9a\u4e0d\u8fc7\u534a\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u597d\u5904\u662f\u53ef\u4ee5\u5de8\u65b9\u4fbf\u5730\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\u3002\n\n## \u7ef4\u62a4\u5e8f\u5217 $a$\n\n\u8fd9\u4e2a\u5e8f\u5217 $a$ \u663e\u7136\u5fc5\u987b\u7ef4\u62a4\u3002\u4e0d\u7136\u7684\u8bdd\uff0c$2$ \u64cd\u4f5c\u5220\u6389\u4e86\u4e00\u4e2a\u8c01\u90fd\u4e0d\u77e5\u9053\u3002~~\u6240\u4ee5 $2$ \u64cd\u4f5c\u76ee\u7684\u5c31\u662f\u8003\u4e00\u4e2a\u94fe\u8868\uff1f~~\n\n\u89c2\u5bdf\u5230\u6bcf\u6b21\u6211\u4eec\u90fd\u53ea\u7528\u5230 $a$ \u7684\u672b\u5c3e\uff0c\u4ee5\u53ca\u5f52\u5e76\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\u7ef4\u62a4\u6570\u5217 $a$\u3002\n\n\u56e0\u4e3a\u6211\u6bd4\u8f83\u61d2\uff08\u800c\u4e14\u94fe\u8868\u662f $O(n)$ \u7684\uff0c\u4e0d\u662f\u590d\u6742\u5ea6\u74f6\u9888\uff09\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u7528 STL\u3002\u6211\u4eec\u53d1\u73b0 $4$ \u64cd\u4f5c\u672c\u8d28\u76f8\u5f53\u4e8e\u628a $x_2$ \u63a5\u5230 $x_1$ \u540e\u9762\uff0c\u7136\u540e\u628a $x_1$ \u91cd\u547d\u540d\u4e3a $x_3$\u3002\n\n`list` \u8bb0\u5f55\u4e86 `end()`\uff0c\u53ef\u4ee5 $O(1)$ `push_back` \u548c `pop_back`\uff0c\u6240\u4ee5\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e0d\u9700\u8981\u62c5\u5fc3\u3002\n\n`list` \u7684 `size()` \u51fd\u6570\u5728 C++ 11 \u8d77\u4fdd\u8bc1\u4e3a $O(1)$\uff0c\u5728\u6b64\u4e4b\u524d\u53ef\u80fd\u662f $O(1)$ \u6216\u7ebf\u6027\uff0c\u56e0\u6b64\u5982\u679c\u4f60\u63d0\u4ea4\u672c\u9898\u4ee3\u7801\u5efa\u8bae\u9009\u62e9 C++ 14\u3002\n\n\u5c06 `list2` \u63a5\u5230 `list1` \u672b\u5c3e\u8868\u793a\u4e3a `list1.splice(list1.end(),list2)`\u3002\u8be5\u51fd\u6570\u590d\u6742\u5ea6\u4e3a $O(1)$\u3002\n\n## \u5224 $-1$\n\n\u6211\u4eec\u7ef4\u62a4\u4e8c\u8fdb\u5236\u62c6\u4f4d\u6c42\u4f17\u6570\uff0c\u7b97\u51fa\u4e00\u4e2a\u53ef\u80fd\u7684\u4f17\u6570\uff0c\u63a5\u4e0b\u6765\u8981\u5224\u65ad\u8be5\u6570\u662f\u5426\u8fc7\u534a\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u53d1\u73b0\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u9003\u4e0d\u6389\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5e8f\u5217\u6211\u4eec\u8fd8\u8981\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff0c\u65b9\u4fbf\u67e5\u8be2\u53ef\u80fd\u7684\u4f17\u6570\u51fa\u73b0\u6b21\u6570\u662f\u5426\u8fc7\u534a\u3002\n\n\u8ba1\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff0c\u53d1\u73b0\u662f $1\\log$ \u7684\u3002\u4f46\u662f\u6211\u4e0d\u77e5\u9053\u4e3a\u5565\u8dd1\u4e86 $600$ \u591a\u6beb\u79d2\uff0c\u6bd5\u7adf\u7ef4\u62a4\u4e8c\u8fdb\u5236\u62c6\u4f4d\u5e38\u6570\u770b\u7740\u5f88\u5c0f\u3002\n\n\u7136\u540e\u5c31\u5dee\u4e0d\u591a\u5566\uff0c\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct SGT\n{\n\tlong long cnt;int ls,rs;//cnt\u53ea\u6709\u53f6\u5b50\u7ed3\u70b9\u7684\u624d\u6709\u7528 \n}tr[20000005];\nint used=0;\nint New(){used++;tr[used].cnt=0;tr[used].ls=tr[used].rs=0;return used;}\nvoid upd(int rt,int pos,int up)//\u7ebf\u6bb5\u6811\u66f4\u65b0\n{\n\tfor(int high=(1<<19);high;high>>=1)\n\t{\n\t\tif(pos&high)\n\t\t{\n\t\t\tif(tr[rt].rs==0)\n\t\t\t\ttr[rt].rs=New();\n\t\t\trt=tr[rt].rs;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(tr[rt].ls==0)\n\t\t\t\ttr[rt].ls=New();\n\t\t\trt=tr[rt].ls;\n\t\t}\n\t}\n\ttr[rt].cnt+=up;\n}\nvoid merge(int rt,int frm)//\u7ebf\u6bb5\u6811\u5408\u5e76\n{\n\tif(tr[frm].ls)\n\t{\n\t\tif(tr[rt].ls==0)\n\t\t\ttr[rt].ls=tr[frm].ls;\n\t\telse merge(tr[rt].ls,tr[frm].ls);\n\t}\n\tif(tr[frm].rs)\n\t{\n\t\tif(tr[rt].rs==0)\n\t\t\ttr[rt].rs=tr[frm].rs;\n\t\telse merge(tr[rt].rs,tr[frm].rs);\n\t}\n\ttr[rt].cnt+=tr[frm].cnt;\n}\nlong long count(int rt,int pos)//\u7ebf\u6bb5\u6811\u5355\u70b9\u67e5\u8be2\n{\n\tfor(int high=(1<<19);high;high>>=1)\n\t\tif(pos&high)\n\t\t\trt=tr[rt].rs;\n\t\telse\n\t\t\trt=tr[rt].ls;\n\treturn tr[rt].cnt;\n}\nstruct Mode//\u7ef4\u62a4\u4e8c\u8fdb\u5236\u62c6\u4f4d\n{\n\tlong long a[20];\n\tMode(){memset(a,0,sizeof a);}\n\tint mode(long long sz)//\u7ed9\u51fa\u5e8f\u5217\u957f\u6c42\u4f17\u6570\n\t{\n\t\tint res=0;\n\t\tfor(int i=0;i<20;i++)\n\t\t\tif(a[i]>sz/2)res|=1<<i;\n\t\treturn res;\n\t}\n}s[1000005];\nvoid operator +=(Mode &m,int x)\n{\n\tfor(int i=0;i<20;i++)\n\t\tif(x&(1<<i))m.a[i]++;\n}\nvoid operator -=(Mode &m,int x)\n{\n\tfor(int i=0;i<20;i++)\n\t\tif(x&(1<<i))m.a[i]--;\n}\nvoid operator +=(Mode& x,Mode y)\n{\n\tfor(int i=0;i<20;i++)\n\t\tx.a[i]+=y.a[i];\n}\nint n,q,seq[500005];//seq\u8bb0\u5f55\u6bcf\u4e2a\u5e8f\u5217\u5bf9\u5e94\u7ebf\u6bb5\u6811\u7684\u6839 \nlist<int> a[500005];\nint quest[500005],to[1000005];\nint main()\n{\n\tint l,m,x,y;\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tto[i]=i;//to[i]\u8bb0\u5f55\u6bcf\u4e2a\u5e8f\u5217\u7684\u5b9e\u9645\u5b58\u50a8\u4f4d\u7f6e\n\t\tseq[i]=New();//\u6bcf\u4e2a\u5e8f\u5217\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\n\t\tfor(scanf(\"%d\",&l);l;l--)\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\ta[i].push_back(x);//\u7ef4\u62a4\u94fe\u8868\n\t\t\ts[i]+=x;//\u7ef4\u62a4\u4e8c\u8fdb\u5236\u62c6\u4f4d\n\t\t\tupd(seq[i],x,1);//\u7ef4\u62a4\u7ebf\u6bb5\u6811\n\t\t}\n\t}\n\tfor(;q;q--)\n\t{\n\t\tscanf(\"%d\",&l);\n\t\tif(l==1)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);x=to[x];//\u5168\u90e8\u6570\u636e\u5b58\u5728\u771f\u5b9e\u4f4d\u7f6e\uff0c\u4e0b\u540c\n\t\t\ta[x].push_back(y);\n\t\t\ts[x]+=y;\n\t\t\tupd(seq[x],y,1);\n\t\t}\n\t\tif(l==2)\n\t\t{\n\t\t\tscanf(\"%d\",&x);x=to[x];\n\t\t\ty=a[x].back();\n\t\t\ta[x].pop_back();\n\t\t\ts[x]-=y;\n\t\t\tupd(seq[x],y,-1);\n\t\t}\n\t\tif(l==3)\n\t\t{\n\t\t\tscanf(\"%d\",&m);\n\t\t\tMode tmp;\n\t\t\tlong long tsz=0;//\u62fc\u51fa\u6765\u7684\u5e8f\u5217\u603b\u957f\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&quest[i]);x=quest[i]=to[quest[i]];\n\t\t\t\ttmp+=s[x];//\u5408\u5e76\u4e8c\u8fdb\u5236\u62c6\u4f4d\n\t\t\t\ttsz+=a[x].size();\n\t\t\t}\n\t\t\tlong long probable=tmp.mode(tsz),cnt=0;\n\t\t\tfor(int i=0;i<m;i++)\n\t\t\t\tcnt+=count(seq[quest[i]],probable);\n\t\t\tif(cnt>tsz/2)\n\t\t\t\tprintf(\"%d\\n\",probable);\n\t\t\telse puts(\"-1\");\n\t\t}\n\t\tif(l==4)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&x,&y,&m);\n\t\t\tx=to[x];y=to[y];\n\t\t\tmerge(seq[x],seq[y]);//\u7ef4\u62a4\u7ebf\u6bb5\u6811\n\t\t\tto[m]=x;//\u91cd\u547d\u540d\n\t\t\ta[x].splice(a[x].end(),a[y]);//\u7ef4\u62a4\u94fe\u8868\n\t\t\ts[x]+=s[y];//\u7ef4\u62a4\u4e8c\u8fdb\u5236\u62c6\u4f4d\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1661790034,
        "uid": 101694,
        "name": "yummy",
        "ccfLevel": 7,
        "title": "\u5173\u4e8e\u6211\u4e00\u5206\u949f\u53e3\u80e1\u5207\u4e86 NOI \u9001\u5206\u9898\u8fd9\u4ef6\u4e8b"
    },
    {
        "content": "\u6bcf\u4e2a\u5e8f\u5217\u5f00\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5b50\u6811\u548c\uff0c\u90a3\u4e48 $1$ \u64cd\u4f5c\u76f8\u5f53\u4e8e\u5355\u70b9\u52a0\uff0c$4$ \u64cd\u4f5c\u76f8\u5f53\u4e8e\u5408\u5e76 $2$ \u9897\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651 $3$ \u64cd\u4f5c\uff0c\u53ef\u4ee5\u540c\u65f6\u5728\u8fd9 $m$ \u9897\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u8bbe\u4f17\u6570\u51fa\u73b0\u6b21\u6570\u9700\u8981 $\\ge need$\uff0c\u90a3\u4e48\u4f17\u6570\u80fd\u51fa\u73b0\u5728 $[l,r]$ \u5185\u5f53\u4e14\u4ec5\u5f53\u533a\u95f4 $[l,r]$ \u5185\u7684\u6570\u4e2a\u6570 $\\ge need$\uff0c\u7531\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u533a\u95f4\u7684\u4e24\u6bb5\u5b50\u533a\u95f4\u4e2d\u6700\u591a\u53ea\u4f1a\u6709\u4e00\u6bb5\u6ee1\u8db3\u8981\u6c42\uff0c\u5224\u65ad\u54ea\u6bb5\u7b26\u5408\u8981\u6c42\u5e76\u9012\u5f52\u5904\u7406\uff0c\u6700\u540e\u5728\u9012\u5f52\u5230\u5b50\u8282\u70b9\u65f6\u5224\u65ad\u5f53\u524d\u6570\u662f\u5426\u5408\u6cd5\u3002\n\n\u4f46\u662f\u53ea\u6709\u6743\u503c\u7ebf\u6bb5\u6811\u65e0\u6cd5\u5f97\u77e5\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u6570\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u5e8f\u5217\u5f00\u4e00\u4e2a\u94fe\u8868\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u5e8f\u5217\u7684\u5f00\u5934\u3001\u672b\u5c3e\u3001\u6bcf\u4e2a\u6570\u7684\u503c\u4ee5\u53ca\u6bcf\u4e2a\u6570\u4e0a\u4e00\u4e2a\u6570\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\u65f6\u53ea\u9700\u8981\u628a $2$ \u4e2a\u94fe\u8868\u63a5\u5728\u4e00\u8d77\uff0c\u5220\u6570\u65f6\u53d6\u51fa\u94fe\u8868\u672b\u5c3e\u7684\u6570\u5e76\u4fee\u6539\u7ebf\u6bb5\u6811\u4e0a\u7684\u5bf9\u5e94\u4f4d\u7f6e\u3002\n\n**\u6ce8\u610f $3$ \u64cd\u4f5c\u540e\u5f97\u5230\u7684\u5e8f\u5217\u957f\u5ea6\u53ef\u80fd\u4f1a\u8d85\u51fa int \u7684\u8303\u56f4\uff0c\u9700\u8981\u5f00 long long\u3002**\n\n```cpp\n//People who believe in miracles are as amazing as miracles themselves.\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\ninline ll read(){\n    ll x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-f;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    return x*f;\n}\n\nconst int N=1e6+10;\nint n,q,m,len[N],val[N],ed[N],st[N],pre[N],rt[N],cnt,tot,p[N],num; ll need;\n\n#define mid ((l+r)>>1)\nstruct node{\n    int ls,rs,num;\n}tr[N*25];\nvoid chg(int &x,int l,int r,int p,int k){\n    if(!x) x=++tot; tr[x].num+=k;\n    if(l!=r) p<=mid?chg(tr[x].ls,l,mid,p,k):chg(tr[x].rs,mid+1,r,p,k);\n}\nint merge(int x,int y,int l,int r){\n    if(!x||!y) return x+y;\n    if(l==r) return tr[x].num+=tr[y].num,x;\n    tr[x].ls=merge(tr[x].ls,tr[y].ls,l,mid);\n    tr[x].rs=merge(tr[x].rs,tr[y].rs,mid+1,r);\n    return tr[x].num=tr[tr[x].ls].num+tr[tr[x].rs].num,x;\n}\nint que(int l,int r){\n    ll sum=0;\n    if(l==r){\n        for(int i=1;i<=num;++i) sum+=tr[p[i]].num; return sum>=need?l:-1;\n    }\n    for(int i=1;i<=num;++i) sum+=tr[tr[p[i]].ls].num;\n    if(sum>=need){\n        for(int i=1;i<=num;++i) p[i]=tr[p[i]].ls; return que(l,mid);\n    }\n    else{\n        for(int i=1;i<=num;++i) p[i]=tr[p[i]].rs; return que(mid+1,r);\n    }\n}\n\nsigned main(){\n    n=read(),q=read(),m=n+q;\n    for(int i=1;i<=n;++i){\n        len[i]=read();\n        for(int j=1;j<=len[i];++j){\n            ++cnt;\n            if(!st[i]) st[i]=cnt; else pre[cnt]=ed[i];\n            val[cnt]=read(),chg(rt[i],1,m,val[cnt],1),ed[i]=cnt;\n        }\n    }\n    for(int op,x,y,z;q;--q){\n        op=read();\n        if(op==1){\n            x=read(),y=read(),++len[x],++cnt;\n            if(!st[x]) st[x]=cnt; else pre[cnt]=ed[x];\n            val[cnt]=y,chg(rt[x],1,m,y,1),ed[x]=cnt;\n        }\n        else if(op==2){\n            x=read(),--len[x];\n            chg(rt[x],1,m,val[ed[x]],-1),ed[x]=pre[ed[x]]; if(!ed[x]) st[x]=0;\n        }\n        else if(op==3){\n            num=read(),need=0;\n            for(int i=1;i<=num;++i) p[i]=read(),need+=len[p[i]],p[i]=rt[p[i]];\n            need=need/2+1,printf(\"%d\\n\",que(1,m));\n        }\n        else{\n            x=read(),y=read(),z=read();\n            len[z]=len[x]+len[y];\n            if(st[x]&&st[y]) st[z]=st[x],ed[z]=ed[y],pre[st[y]]=ed[x];\n            else if(st[x]) st[z]=st[x],ed[z]=ed[x];\n            else if(st[y]) st[z]=st[y],ed[z]=ed[y];\n            rt[z]=merge(rt[x],rt[y],1,m),rt[x]=rt[y]=st[x]=st[y]=ed[x]=ed[y]=len[x]=len[y]=0;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1661685127,
        "uid": 336653,
        "name": "include_BM",
        "ccfLevel": 0,
        "title": "P8496 [NOI2022] \u4f17\u6570"
    },
    {
        "content": "\u6709\u4e2a\u9898\u53eb\u300cPOI2014\u300dCouriers\uff0c\u8fd9\u4e2a\u9898\u542f\u793a\u6211\u4eec\u5b9e\u9645\u4e0a\u95ee\u9898\u7b49\u4ef7\u4e8e\u8be2\u95ee\u54ea\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u6700\u540e\u53ea\u9700\u8981\u5224\u65ad\u662f\u5426\u8d85\u8fc7\u4e00\u534a\u5373\u53ef\u3002\n\n\u8003\u8651\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e0a\u9762\u7684\u6743\u503c\uff0c\u5355\u4e2a\u5e8f\u5217\u7684\u67e5\u8be2\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u9762\u8d70\uff0c\u9009\u62e9\u5927\u7684\u90a3\u4e00\u8fb9\u8d70\u4e0b\u53bb\uff0c\u6700\u540e\u7684\u5c31\u662f\u7b54\u6848\uff0c\u591a\u4e2a\u5e8f\u5217\u53ef\u4ee5\u8003\u8651 $m$ \u4e2a\u7ebf\u6bb5\u6811\u4e00\u8d77\u8d70\uff0c\u540c\u6837\u9009\u62e9\u5927\u7684\u4e00\u8fb9\uff0c\u6ce8\u610f\u5230 $\\sum m\\le 5\\times 10^5$\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u3002\n\n\u67e5\u8be2\u89e3\u51b3\u4e86\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u4fee\u6539\uff0c\u4fee\u6539\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u5f71\u54cd\u4e0d\u8fc7\u662f\u5355\u70b9\u6539\u548c\u5408\u5e76\uff0c\u8fd9\u4e9b\u90fd\u662f\u7b80\u5355\u7684\uff0c\u4f46\u662f\u6ce8\u610f\u5230\u6211\u4eec\u8981\u7ef4\u62a4\u6bcf\u4e2a\u5e8f\u5217\u7684\u672b\u5c3e\uff0c\u4ee5\u53ca\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\uff0c\u53ef\u4ee5\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u505a\u5230 $O(n\\log n)$\u3002\n\n\u66f4\u4f18\u7684\u60f3\u6cd5\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\u7684\u5f62\u5f0f\u6765\u7ef4\u62a4\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u672b\u5c3e\u5143\u7d20\uff0c\u800c\u5408\u5e76\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u628a\u4e00\u4e2a\u94fe\u8868\u7684\u5c3e\u90e8\u5143\u7d20\u7684 next \u6307\u9488\u6307\u5411\u53e6\u4e00\u4e2a\u94fe\u8868\u7684\u5f00\u5934\u5143\u7d20\uff0c\u4ece\u800c\u505a\u5230\u7ebf\u6027\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\uff0c\u4f46\u662f\u636e\u8bf4\u6709\u9ad8\u8bba\u53ef\u4ee5\u505a\u5230\u7ebf\u6027\uff0c\u6211\u8fd8\u4e0d\u4f1a\u3002\n\n\u8d5b\u65f6\u6211\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u505a\u6cd5\uff0c\u4f46\u662f\u56e0\u4e3a\u4e0d\u660e\u539f\u56e0\u7684\u94fe\u8868\u5199\u6302\uff0c\u6240\u4ee5\u53ea\u6709 $75$ \u5206\u3002",
        "postTime": 1661513102,
        "uid": 175829,
        "name": "cnyzz",
        "ccfLevel": 0,
        "title": "\u300cNOI2022\u300d\u4f17\u6570 \u9898\u89e3"
    },
    {
        "content": "\u5148\u6765\u770b\u7279\u6b8a\u6027\u8d28 C\uff1a\u5e8f\u5217\u4e2d\u53ea\u6709 1 \u548c 2 \u4e24\u79cd\u6570\u5b57\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5e8f\u5217\u7528\u4e00\u4e2a `deque` \u6765\u7ef4\u62a4\uff0c\u5e76\u7528\u4e00\u4e2a\u6570 $cnt$ \u6765\u7edf\u8ba1\u5e8f\u5217\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570\uff0c$len$ \u6765\u7ef4\u62a4\u5b83\u7684\u957f\u5ea6\u3002\n\n- \u64cd\u4f5c 1 \u548c\u64cd\u4f5c 2\uff1a\u76f4\u63a5\u5728 `deque` \u672b\u5c3e\u6dfb\u52a0\u6216\u8005\u5220\u9664\u5373\u53ef\u3002\u6ce8\u610f\u7ef4\u62a4 $cnt$ \u548c $len$ \u7684\u503c\u3002\n\n- \u64cd\u4f5c 3\uff1a\u7edf\u8ba1\u8fd9\u91cc\u9762\u6240\u6709\u5e8f\u5217\u7684\u957f\u5ea6\u4e4b\u548c $s_1$ \u4ee5\u53ca 1 \u7684\u4e2a\u6570\u4e4b\u548c $s_2$\uff0c\u5982\u679c $2s_2>s_1$\uff0c\u90a3\u4e48\u4f17\u6570\u5c31\u662f 1\uff0c\u5426\u5219\u5c31\u662f 2\u3002\n\n- \u64cd\u4f5c 4\uff1a\u5229\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c06\u5c0f\u7684\u5e8f\u5217\u5f80\u5927\u7684\u5408\u5e76\uff0c\u540c\u65f6\u5c06\u4e24\u4e2a\u5e8f\u5217\u7684 $cnt$ \u4e0e $len$ \u503c\u52a0\u8d77\u6765\u3002\n\n\u73b0\u5728\u6211\u4eec\u56de\u5230\u539f\u9898\uff0c\u90a3\u5c31\u9700\u8981\u60f3\u4e00\u4e2a\u529e\u6cd5\u628a\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u53d8\u6210\u4e0e 1 \u548c 2 \u7c7b\u4f3c\uff0c\u6bd4\u8f83\u597d\u7ef4\u62a4\u7684\u6837\u5b50\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u662f **\u4e8c\u8fdb\u5236\u62c6\u5206**\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4f17\u6570\uff0c\u56e0\u4e3a\u5b83\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e86\u4e00\u534a\uff0c\u90a3\u4e48 **\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6765\u8bf4\uff0c\u4f17\u6570\u5728\u8fd9\u4e00\u4f4d\u4e0a\u5bf9\u5e94\u7684\u503c\u4e5f\u8d85\u8fc7\u4e86\u4e00\u534a\u3002**\n\n\u7528\u8ddf\u4e0a\u9762\u7c7b\u4f3c\u7684\u65b9\u6cd5\u7ef4\u62a4\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u628a $cnt$ \u6539\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u7ef4\u62a4\u6bcf\u4e00\u4f4d\u4e0a 1 \u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u5728\u64cd\u4f5c 3 \u4e2d\u626b\u63cf\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u7b2c $i$ \u4f4d 1 \u7684\u4e2a\u6570\u6bd4 0 \u591a\u5c31\u628a\u7b54\u6848\u52a0\u4e0a $2^i$\u3002\n\n\u8fd9\u6837\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff1a\u62fc\u51d1\u51fa\u6765\u7684\u7b54\u6848\u53ef\u80fd\u5728\u5e8f\u5217\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u5230\u4e0d\u4e86\u4e00\u534a\u3002\u6211\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u5e8f\u5217\u5f00\u4e00\u4e2a `map` \u7ef4\u62a4\u6bcf\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5408\u5e76\u65f6\u7528 `map` \u542f\u53d1\u5f0f\u5408\u5e76\u5373\u53ef\u3002\u4f46\u8fd9\u6837\u505a\u662f $O(n\\log^2n)$ \u7684\uff0c\u5e38\u6570\u5c0f\uff0c\u5361\u4e0d\u6ee1\uff0c\u53ef\u4ee5\u8fc7\u53bb\u3002\n\n\u6709\u4e00\u4e2a\u66f4\u52a0\u5de7\u5999\u7684\u529e\u6cd5\uff0c\u90a3\u5c31\u662f\u503c\u57df\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd9\u6837\u505a\u5c31\u662f $O(n\\log n)$ \u7684\u3002\n\n\u6ce8\u610f\uff1a\n\n- \u64cd\u4f5c 3 \u4e2d\u5e8f\u5217\u7684\u957f\u5ea6\u53ef\u80fd\u4f1a\u8d85\u8fc7 `int` \u8303\u56f4\uff0c\u5e94\u8be5\u8981\u7528 `long long` \u7c7b\u578b\u7684\u53d8\u91cf\u6765\u5b58\u50a8\u3002\n\n- \u6ce8\u610f\u7a7a\u95f4\u3002\u5982\u679c\u662f `map` \u505a\u6cd5\u53ef\u4ee5\u653e\u5fc3\u5f00 $10^6$ \u4e2a `deque` \u548c `map`\uff0c\u4f46\u5982\u679c\u7528\u7684\u662f\u503c\u57df\u7ebf\u6bb5\u6811\u5c31\u8981\u8003\u8651\u8d85\u8fc7\u7a7a\u95f4\u9650\u5236\u7684\u95ee\u9898\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=1e6;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,q,id[Maxn+5],cnt[Maxn+5][32],len[Maxn+5];\nll num[32]; int st[Maxn+5];\ndeque<int> que[Maxn+5];\nmap<int,int> mp[Maxn+5];\n\ninline int Count(int m)\n{\n    ll ls=0,tmp=0; int res=0;\n    For(i,1,m) st[i]=read(),st[i]=id[st[i]];\n    For(i,1,m)\n    {\n        ls+=len[st[i]];\n        For(j,0,20) num[j]+=cnt[st[i]][j];\n    }\n    For(i,0,20) if(num[i]>ls/2) res+=(1<<i);\n    For(i,0,20) num[i]=0;\n    For(i,1,m) if(mp[st[i]].count(res)) tmp+=mp[st[i]][res];\n    if(tmp>ls/2) return res;\n    else return -1;\n}\ninline void Link(int x,int y,int z)\n{\n    x=id[x],y=id[y];\n    if(len[y]<=len[x])\n    {\n        len[x]+=len[y],id[z]=x;\n        For(i,0,20) cnt[x][i]+=cnt[y][i];\n        while(!que[y].empty())\n        {\n            int now=que[y].front(); mp[x][now]++;\n            que[x].push_back(now),que[y].pop_front();\n        }\n        mp[y].clear(),len[y]=0;\n    }\n    else\n    {\n        len[y]+=len[x],id[z]=y;\n        For(i,0,20) cnt[y][i]+=cnt[x][i];\n        while(!que[x].empty())\n        {\n            int now=que[x].back(); mp[y][now]++;\n            que[y].push_front(now),que[x].pop_back();\n        }\n        mp[x].clear(),len[x]=0;\n    }\n}\n\nint main()\n{\n    // freopen(\"major.in\",\"r\",stdin);\n    // freopen(\"major.out\",\"w\",stdout);\n\n    n=read(),q=read();\n    For(i,1,n)\n    {\n        id[i]=i,len[i]=read();\n        For(j,1,len[i])\n        {\n            int now=read(); que[i].push_back(now); mp[i][now]++;\n            For(k,0,20) if(now&(1<<k)) cnt[i][k]++;\n        }\n    }\n    while(q--)\n    {\n        int opt=read(),x=read(),y,z;\n        if(opt==1)\n        {\n            y=read(),x=id[x],que[x].push_back(y),len[x]++,mp[x][y]++;\n            For(i,0,20) if(y&(1<<i)) cnt[x][i]++;\n        }\n        if(opt==2)\n        {\n            x=id[x]; y=que[x].back(); que[x].pop_back(),len[x]--,mp[x][y]--;\n            if(!mp[x][y]) mp[x].erase(y);\n            For(i,0,20) if(y&(1<<i)) cnt[x][i]--;\n        }\n        if(opt==3) printf(\"%d\\n\",Count(x));\n        if(opt==4)\n        {\n            y=read(),z=read();\n            Link(x,y,z);\n        }\n    }\n    return 0;\n}\n// g++ major.cpp -o major -O2 -std=c++14\n// ./major\n```",
        "postTime": 1661670250,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P8496\u3010[NOI2022] \u4f17\u6570\u3011"
    },
    {
        "content": "\u4e00\u79cd\u4e0d\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u505a\u6cd5\u3002\r\n\r\n\u9898\u89e3\u7565\u957f\uff0c\u5148\u653e\u4e00\u4e0b\u505a\u6cd5\u6982\u8981\uff1a\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5148\u628a\u6bcf\u4e2a\u6570\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u7b49\u4e8e\u4e00\u534a\u7684\u6570\u627e\u51fa\u6765\uff0c\u5f62\u6210\u300c\u5019\u9009\u96c6\u5408\u300d$K$\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5217 $x_i$\uff0c\u5982\u679c $K$ \u7684\u5927\u5c0f\u5c0f\u4e8e $x_i$\uff0c\u66b4\u529b\u7edf\u8ba1 $x_i$ \u4e2d\u6bcf\u4e2a\u5904\u4e8e $K$ \u5185\u7684\u6570\u7684\u8d21\u732e\uff1b\u5426\u5219\u66b4\u529b\u7edf\u8ba1 $K$ \u4e2d\u6bcf\u4e2a\u5904\u4e8e $x_i$ \u4e2d\u7684\u6570\u7684\u8d21\u732e\u3002\r\n\r\n***\r\n\r\n\u9996\u5148\u8003\u8651\u6ca1\u6709\u64cd\u4f5c $3$ \u7684\u60c5\u51b5\uff1a\u5c3e\u90e8\u6dfb\u52a0 / \u5220\u9664\u3001\u5408\u5e76\u3002\u542f\u53d1\u5f0f\u5408\u5e76\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b3\u3002\u542f\u53d1\u5f0f\u5408\u5e76\u8981\u6ce8\u610f\u6dfb\u52a0\u5143\u7d20\u7684\u7aef\u70b9\u662f\u5728\u5934\u90e8\u8fd8\u662f\u5728\u5c3e\u90e8\u3002\r\n\r\n`deque` \u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u4f46\u662f `deque` \u672c\u8eab\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u5f88\u5927\uff0c\u5b9e\u6d4b\u5728\u672c\u4eba\u673a\u5b50\u4e0a\u751a\u81f3\u88ab `vector` \u5b8c\u7206\u3002`list` \u548c `vector` \u7684\u7528\u6cd5\u5f88\u76f8\u4f3c\uff0c\u800c\u4e14\u5b83\u80fd\u591f $O(1)$ \u5728\u5934\u5c3e\u63d2\u5165\u5143\u7d20\u3002\u662f\u7406\u60f3\u7684\u7ed3\u6784\u3002\r\n\r\n\u8003\u8651\u52a0\u5165\u64cd\u4f5c $3$\u3002\u6839\u636e\u5b9a\u4e49\u53ef\u4ee5\u63a8\u51fa\u4e00\u4e2a\u6027\u8d28\uff1a\u7b54\u6848 $v$ **\u4e00\u5b9a**\u5360\u81f3\u5c11\u4e00\u4e2a\u6570\u5217\u7684**\u81f3\u5c11\u4e00\u534a**\u3002\u8bc1\u660e\u662f\u663e\u7136\u7684\uff1a\u5982\u679c\u4e00\u4e2a\u6570\u5b57\u5728\u6bcf\u4e00\u4e2a\u6570\u5217\u90fd\u5360\u4e0d\u5230\u4e00\u534a\uff0c\u90a3\u603b\u548c\u8d77\u6765\u4e5f\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u534a\u3002\r\n\r\n\u4f9d\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u9996\u5148\u5c06 $m$ \u4e2a\u6570\u5217\u4e2d\u5360\u81f3\u5c11\u4e00\u534a\u7684\u6570\u53d6\u51fa\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u300c\u5019\u9009\u96c6\u5408\u300d\u79f0\u4f5c $K$\u3002\u663e\u7136 $K$ \u7684\u5927\u5c0f\u6700\u591a\u4e3a $2m$\u3002\r\n\r\n\u66b4\u529b $O(m^2)$ \u6c42\u4e0d\u53ef\u884c\uff0c\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\uff1a\u5982\u679c\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u81f3\u5c11\u4e00\u534a\uff0c\u90a3\u5b83\u80af\u5b9a\u662f**\u6700\u591a\u7684\u6570**\u3002\u53d6\u4e00\u4e2a\u96c6\u5408\u4e2d\u6700\u5927\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u7528\u5806\u3002\u56e0\u4e3a\u9700\u8981\u5408\u5e76\uff0c\u6240\u4ee5\u7528**\u53ef\u5e76\u5806**\u3002\u53ef\u5e76\u5806\u91cc\u4fdd\u5b58\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(v,c)$ \u8868\u793a\u6570\u5b57 $v$ \u51fa\u73b0\u4e86 $c$ \u6b21\uff0c\u6309 $c$ \u5728\u5806\u91cc\u5347\u5e8f\u6392\u5217\u3002\r\n\r\n\u542f\u53d1\u5f0f\u5408\u5e76\u9700\u8981\u7279\u6b8a\u5904\u7406\uff1a\u5047\u8bbe $x$ \u5806\u5408\u5e76\u5230 $y$ \u5806\uff0c\u6709\u4e00\u4e2a\u5143\u7d20\u662f $(v,c_x)$\uff0c\u4f46\u662f $y$ \u4e2d\u4e5f\u6709\u4e00\u4e2a $(v,c_y)$\uff0c\u6b64\u65f6\u4e0d\u5e94\u5f53\u65b0\u63d2\u5165\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0c\u800c\u662f\u5e94\u5f53**\u628a\u539f\u6765\u7684\u4e8c\u5143\u7ec4\u4fee\u6539\u4e3a** $(v,c_x+c_y)$\u3002\r\n\r\n\u8fd9\u4e2a\u5e94\u8be5\u53ef\u4ee5\u5de6\u504f\u6811\u6216\u8005\u4ec0\u4e48\u79d1\u6280\u89e3\u51b3\uff0c\u4f46\u662f\u6709\u4e2a\u66f4\u7b80\u4fbf\u7684\u529e\u6cd5\uff1a`pbds` \u5e93\u3002\r\n\r\n`pbds` \u7684\u5e93\u91cc\u6709\u4e00\u4e2a `priority_queue`\uff0c\u5b83\u5728\u6bcf\u6b21\u4f60 `push` \u7684\u65f6\u5019**\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6307\u9488**\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\uff0c\u7528 `modify` \u51fd\u6570\u5c31\u53ef\u4ee5\u4fee\u6539\u5806\u91cc\u7684\u5143\u7d20\u4e86\u3002\u793a\u4f8b\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\npq.push(4);\r\nauto a=pq.push(2);\r\npq.modify(a,5);\r\npq.top(); // Now it's 5\r\n```\r\n\r\n\u66f4\u52a0\u8be6\u7ec6\u7684\u7528\u6cd5\u53ef\u53c2\u8003[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/UruhaRushia/how-to-acquire-pbds#)\u3002\r\n\r\n\u6240\u4ee5\u7528 `pbds` \u7684\u505a\u6cd5\u5c31\u662f\uff1a\u989d\u5916\u5f00\u4e00\u4e2a `map` \u4fdd\u5b58\u6bcf\u4e2a $v$ \u6240\u5bf9\u5e94\u7684\u6307\u9488\uff0c\u5728\u5408\u5e76\u7684\u65f6\u5019\uff0c\u6709\u5219\u4fee\u6539\u6307\u9488\u4e3a $c_x+c_y$\uff0c\u65e0\u5219\u76f4\u63a5\u63d2\u5165\u3002\r\n\r\n\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5 $O(\\log m)$ \u7684\u65f6\u95f4\u5b9e\u73b0\u53d6\u6700\u5927\u503c / \u5408\u5e76\u3002\r\n\r\n\u6709\u4e86 $K$\uff0c\u5728\u8ba1\u7b97\u7b54\u6848\u65f6\uff0c\u6709\u4e24\u79cd\u7b56\u7565\uff1a\r\n\r\n1. \u66b4\u529b\u7edf\u8ba1\u6bcf\u4e2a $K$ \u4e2d\u7684\u5143\u7d20\u5728 $m$ \u4e2a\u6570\u5217\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6c42\u548c\uff1b\r\n2. \u66b4\u529b\u7edf\u8ba1 $m$ \u4e2a\u6570\u5217\u4e2d\u6bcf\u4e2a\u6570\u662f\u5426\u5728 $K$ \u4e2d\u51fa\u73b0\uff0c\u51fa\u73b0\u5219\u52a0\u548c\uff1b\r\n\r\n\u968f\u4fbf\u4e00\u5361\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4f1a\u81f3\u5c11 $O(m^2)$\u3002\u800c\u4f18\u5316\u65b9\u5f0f\u5c31\u662f\u6839\u636e $K$ \u7684\u5927\u5c0f\u548c\u6570\u5217\u5927\u5c0f\u51b3\u5b9a\u3002\r\n\r\n\u4f18\u5316\u601d\u8def\u662f\u597d\u7406\u89e3\u7684\uff1a\u6bcf\u6b21\u9009\u90a3\u4e2a\u8ba1\u7b97\u91cf\u5c0f\u7684\u65b9\u5f0f\u7b97\u3002\u8bbe\u5904\u7406\u6570\u5217 $x_i$\uff0c\u5982\u679c $K$ \u6bd4 $x_i$ \u5c0f\uff08\u6307\u7684\u662f\u96c6\u5408\u5927\u5c0f\u4e0a\u66f4\u5c0f\uff09\uff0c\u90a3\u4e48\u91c7\u53d6\u7b56\u7565 $1$\uff1b\u5426\u5219\u91c7\u53d6\u7b56\u7565 $2$\u3002\r\n\r\n\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u5e73\u644a\u4e0b\u662f $O(m\\sqrt m)$ \u7684\u3002\u5177\u4f53\u4e0d\u4f1a\u8bc1\uff0c\u5927\u6982\u5c31\u662f\u56e0\u4e3a\u7b56\u7565 $1$ \u548c $2$ \u662f\u76f8\u53cd\u7684\u601d\u8def\uff0c\u5373 $1$ \u8dd1\u5f97\u5feb\u65f6 $2$ \u5c31\u4f1a\u6162\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u6240\u4ee5\u5e73\u5747\u4e00\u4e0b\u662f $O(\\sqrt m )$ \u51fa\u7ed3\u679c\u3002\r\n\r\n\u6700\u540e\u51fa\u8be2\u95ee\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u627e\u6700\u5927\u503c $O(m)$ \u6253\u64c2\u53f0\u5b8c\u5168\u4e0d\u865a\u3002\u8bb0\u5f97\u5224\u65ad\u4e00\u4e0b\u6700\u5927\u503c\u7684\u51fa\u73b0\u6b21\u6570 $\\times 2$ \u6709\u6ca1\u6709\u5927\u4e8e\u6240\u6709\u6570\u5217\u7684\u5927\u5c0f\u7684\u603b\u548c\u3002\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n+(\\sum m)^{\\frac{3}{2}})$\u3002\u58f0\u660e\u4e00\u5806 STL \u7684\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u52a0\u4e0a\u672c\u4eba\u6ca1\u5361\u5e38\uff0c\u5438\u6c27\u4e4b\u540e 990ms \u9669\u8fc7\u3002\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u53c2\u8003\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/priority_queue.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\nconst int maxn=1000000+5;\r\ninline int rd(){int x;scanf(\"%d\",&x);return x;}\r\ninline void wr(int x){printf(\"%d\\n\",x);}\r\nstruct rec{\r\n\tint val,cnt;\r\n\trec(){val=cnt=0;}\r\n\trec(int v,int c){val=v,cnt=c;}\r\n\tbool operator<(const rec&v)const{return cnt!=v.cnt?cnt<v.cnt:val<v.val;}\r\n};\r\ntypedef __gnu_pbds::priority_queue<rec> heap;\r\ntypedef heap::point_iterator addr;\r\nheap lst[maxn];\r\nlist<int> vc[maxn];\r\ngp_hash_table<int,addr> locs[maxn];\r\nint true_id[maxn];\r\ninline void ins(int x,int y){\r\n\tvc[x].push_back(y);\r\n\tif(locs[x].find(y)==locs[x].end())locs[x][y]=lst[x].push(rec(y,1));\r\n\telse lst[x].modify(locs[x][y],rec(y,locs[x][y]->cnt+1));\r\n}\r\ninline void del(int x){\r\n\tint y=vc[x].back();vc[x].pop_back();\r\n\tif(locs[x].find(y)==locs[x].end())locs[x][y]=lst[x].push(rec(y,-1));\r\n\telse lst[x].modify(locs[x][y],rec(y,locs[x][y]->cnt-1));\r\n}\r\ninline void newlst(int x,int y,int newid){// Note this function\r\n\tbool rev=0;\r\n\tif(lst[x].size()>lst[y].size()){swap(x,y);rev=1;}\r\n\tfor(auto a:lst[x]){\r\n\t\tif(locs[y].find(a.val)==locs[y].end())locs[y][a.val]=lst[y].push(a);\r\n\t\telse lst[y].modify(locs[y][a.val],rec(a.val,locs[y][a.val]->cnt+a.cnt));\r\n\t}\r\n\tif(!rev){reverse(vc[x].begin(),vc[x].end());for(auto a:vc[x])vc[y].insert(vc[y].begin(),a);}\r\n\telse for(auto a:vc[x])vc[y].push_back(a);\r\n\tvc[x].clear(),lst[x].clear(),true_id[newid]=y;\r\n}\r\nint m,qm[maxn];\r\nset<int> cdd;\r\ngp_hash_table<int,int> app;\r\nint oh(){\r\n\tint sum=0;\r\n\tcdd.clear(),app.clear();\r\n\t#define l lst[qm[i]]\r\n\tfor(int i=1;i<=m;i++)cdd.insert(l.top().val),sum+=vc[qm[i]].size();\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tif(cdd.size()>l.size())for(auto a:l)app[a.val]+=a.cnt;\r\n\t\telse for(auto a:cdd)if(locs[qm[i]].find(a)!=locs[qm[i]].end())app[a]+=locs[qm[i]][a]->cnt;\r\n\t}\r\n\t#undef l\r\n\tint loc=-1,big=-1;\r\n\tfor(auto a:cdd)if(app[a]>big)big=app[a],loc=a;\r\n\treturn (big*2>sum)?loc:-1;\r\n}\r\nint main(){\r\n\tint n,q;n=rd(),q=rd();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tint l=rd();while(l--)ins(i,rd());true_id[i]=i;\r\n\t}\r\n\twhile(q--){\r\n\t\tint op=rd();\r\n\t\tswitch(op){\r\n\t\t\tcase 1:{int x=rd(),y=rd();ins(true_id[x],y);break;}\r\n\t\t\tcase 2:{int x;del(true_id[x=rd()]);break;}\r\n\t\t\tcase 3:{\r\n\t\t\t\tm=rd();\r\n\t\t\t\tfor(int i=1;i<=m;i++)qm[i]=true_id[rd()];\r\n\t\t\t\twr(oh());\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 4:{int x=rd(),y=rd(),z=rd();newlst(true_id[x],true_id[y],z);break;}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n\r\n***\r\n\r\n\u540e\u8bb0\uff1a\r\n\r\n\r\n- \u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u800c\u4e14\u4e0d\u4e00\u5b9a\u53ef\u9760\uff0c\u6b22\u8fce hack\u3002\r\n",
        "postTime": 1661873785,
        "uid": 188950,
        "name": "UruhaRushia",
        "ccfLevel": 6,
        "title": "P8496"
    },
    {
        "content": "## \u5206\u6790\n\n\u5047\u5982\u6ca1\u6709\u64cd\u4f5c $3$\uff0c\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e9b\u5e8f\u5217\u5462\uff1f\u7531\u4e8e\u4fee\u6539\u53ea\u5728\u672b\u5c3e\u8fdb\u884c\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u4eff\u7167\u5efa\u56fe\u65f6\u7684\u5934\u63d2\u6cd5\u5c06\u4e00\u4e2a\u5e8f\u5217\u7684\u6570\u5b57\u63d2\u5165\u90bb\u63a5\u8868\u4e2d\uff0c\u8fd9\u6837 $head_x$ \u5c31\u662f\u5e8f\u5217 $x$ \u7684\u672b\u5c3e\u4e86\u3002\n\n\u4f46\u662f\uff0c\u64cd\u4f5c $4$ \u7684\u5408\u5e76\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8ba9 $x_2$ \u7684\u9996\u4e2a\u6570\u5b57\u7684 $nxt$ \u6307\u9488\u6307\u5411 $x1$ \u7684\u672b\u5c3e\u6570\u5b57\uff0c\u56e0\u6b64\u53ef\u4ee5\u518d\u8bb0\u5f55\u4e00\u4e2a $tail_x$ \u8868\u793a\u90bb\u63a5\u8868\u7684\u672b\u5c3e\uff08\u4e5f\u5c31\u662f\u5e8f\u5217 $x$ \u7684\u9996\u4e2a\u6570\u5b57\uff09\uff1a\n\n```cpp\nvoid add(int x,int y){\n\tval[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n\tif(!nxt[tot])\n\t\ttail[x]=tot;\n}\nvoid del(int x){\n\thead[x]=nxt[head[x]];\n\tif(!head[x])\n\t\ttail[x]=0;\n}\n```\n\n\u5bf9\u4e8e\u64cd\u4f5c $4$ \u4f60\u53ef\u80fd\u4f1a\u8fd9\u4e48\u5199\uff1a\n\n```cpp\n//x,y,z\u5206\u522b\u8868\u793ax1,x2,x3 \nx=read();y=read();z=read();\nhead[z]=head[y];\ntail[z]=tail[x];\nnxt[tail[y]]=head[x];\n```\n\n\u7136\u800c\u4ea4\u4e0a\u53bb\u53ea\u6709 $85$ \u5206\uff0c$\\text{WA on \\#13 \\#19 \\#20}$\uff0c\u539f\u6765\u9898\u76ee\u4e2d\u8bf4\u7684\u662f $l_i$ \u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u540e\u9762\u7684\u5220\u9664\u64cd\u4f5c\u4e5f\u53ef\u80fd\u4f7f $l_i$ \u53d8\u4e3a $0$\uff0c\u8fd9\u4e2a $0$ \u5219\u53ef\u80fd\u4f7f\u90bb\u63a5\u8868\u4e2d\u591a\u51fa\u4e00\u4e2a\u6570\u5b57 $0$\uff0c\u5207\u65ad\u4e86\u90bb\u63a5\u8868\uff0c\u56e0\u6b64\u5fc5\u987b\u52a0\u4e00\u4e9b\u7279\u5224\uff1a\n\n```cpp\n//x,y,z\u5206\u522b\u8868\u793ax1,x2,x3 \nx=read();y=read();z=read();\nhead[z]=(head[y]?head[y]:head[x]);\ntail[z]=(tail[x]?tail[x]:tail[y]);\nif(head[x]&&head[y])\n\tnxt[tail[y]]=head[x];\n```\n\n\u8fd9\u6837\u5bf9\u5e8f\u5217\u7684\u7ef4\u62a4\u5c31\u89e3\u51b3\u4e86\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6c42\u4f17\u6570\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u8981\u6c42\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570\u5fc5\u987b\u5927\u4e8e\u6570\u7684\u4e2a\u6570\u7684\u4e00\u534a\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u7528\u6469\u5c14\u6295\u7968\u6cd5\u89e3\u51b3\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5e8f\u5217\u5f00\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u7684\u4f17\u6570\u548c\u5b83\u5728\u6469\u5c14\u6295\u7968\u4e2d\u5269\u4f59\u7684\u7968\u6570\uff0c\u5411\u4e0a\u4f20\u9012\u4fe1\u606f\u65f6\uff0c\u4f17\u6570\u4e3a\u7968\u6570\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\uff0c\u5269\u4f59\u7684\u7968\u6570\u5c31\u662f\u591a\u7684\u51cf\u53bb\u5c11\u7684\u3002\u5408\u5e76 $m$ \u4e2a\u5e8f\u5217\u65f6\uff0c\u53ea\u9700\u8981\u5c06 $m$ \u9897\u7ebf\u6bb5\u6811\u7684\u4f17\u6570\u7528\u6469\u5c14\u6295\u7968\u6cd5\u5408\u5e76\u5373\u53ef\uff0c\u522b\u5fd8\u4e86\u6700\u540e\u7edf\u8ba1\u4f17\u6570\u7684\u51fa\u73b0\u7684\u6b21\u6570\u662f\u5426\u8d85\u8fc7\u4e00\u534a\u3002\n\n\u8fd9\u6837\uff0c\u5bf9\u4e8e\u64cd\u4f5c $1$\uff0c\u76f4\u63a5\u5355\u70b9\u52a0\uff0c\u5bf9\u4e8e\u64cd\u4f5c $2$\uff0c\u6211\u4eec\u7528\u90bb\u63a5\u8868\u5f97\u5230\u672b\u5c3e\u6570\u5b57\u5e76\u5355\u70b9\u51cf\uff0c\u5bf9\u4e8e\u64cd\u4f5c $4$ \u5c31\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u8fd9\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nlong long read(){\n\tlong long x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\nvoid write(long long x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\nconst int N=1e6+10;\nint n,q,l[N],xx[N];\nint head[N],nxt[N],val[N],tail[N],tot;\nvoid add(int x,int y){\n\tval[++tot]=y;\n\tnxt[tot]=head[x];\n\thead[x]=tot;\n\tif(!nxt[tot])\n\t\ttail[x]=tot;\n}\nvoid del(int x){\n\thead[x]=nxt[head[x]];\n\tif(!head[x])\n\t\ttail[x]=0;\n}\nvoid cmp(pair<int,int> &x,pair<int,int> y,pair<int,int> z){\n\tif(y.first==z.first){\n\t\tx.first=y.first;\n\t\tx.second=y.second+z.second;\n\t}\n    else if(y.second>z.second){\n    \tx.first=y.first;\n\t\tx.second=y.second-z.second;\n\t}\n    else{\n    \tx.first=z.first;\n\t\tx.second=z.second-y.second;\n\t}\n}\n#define pl a[p].tl\n#define pr a[p].tr\nstruct Segment_Tree{\n    int tot,root[N],cnt,nc[N<<3];\n    struct Tree{\n        int tl,tr;\n        int vsum;\n        pair<int,int> zs;\n    }a[N<<3];\n    Segment_Tree(){\n        tot=0;\n    }\n    int get_new(){\n        return cnt?nc[cnt--]:++tot;\n    }\n    void del(int p){\n        nc[++cnt]=p;\n        a[p].tl=a[p].tr=a[p].zs.first=a[p].zs.second=a[p].vsum=0;\n    }\n    void pushup(int p){\n    \tcmp(a[p].zs,a[pl].zs,a[pr].zs);\n        a[p].vsum=a[pl].vsum+a[pr].vsum;\n    }\n    void add(int p,int x,int v,int L,int R){\n        if(L==R){\n        \ta[p].zs.first=L;\n            a[p].zs.second+=v;\n            a[p].vsum+=v;\n            return;\n        }\n        int mid=(L+R)>>1;\n        if(x<=mid){\n            if(!pl)\n                pl=get_new();\n            add(pl,x,v,L,mid);\n        }\n        else{\n            if(!pr)\n                pr=get_new();\n            add(pr,x,v,mid+1,R);\n        }\n        pushup(p);\n    }\n    int asksum(int p,int l,int r,int L,int R){\n        if(l<=L&&R<=r)\n            return a[p].vsum;\n        int mid=(L+R)>>1;\n        int ans=0;\n        if(!pl)\n            pl=get_new();\n        if(!pr)\n            pr=get_new();\n        if(l<=mid)\n            ans+=asksum(pl,l,r,L,mid);\n        if(r>mid)\n            ans+=asksum(pr,l,r,mid+1,R);\n        return ans;\n    }\n    int merge(int x,int y,int l,int r){\n        if(!x||!y)\n            return x+y;\n        if(l==r){\n        \ta[x].zs.first=l;\n        \ta[x].zs.second+=a[y].zs.second;\n        \ta[x].vsum+=a[y].vsum;\n        \treturn x;\n\t\t}\n\t\tint mid=(l+r)>>1;\n        a[x].tl=merge(a[x].tl,a[y].tl,l,mid);\n        a[x].tr=merge(a[x].tr,a[y].tr,mid+1,r);\n        del(y);\n        pushup(x);\n        return x;\n    }\n}tree;\nint main(){\n\tn=read();q=read();\n\tfor(int i=1;i<=n;i++){\n\t\ttree.root[i]=tree.get_new();\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tl[i]=read();\n\t\tfor(int j=1;j<=l[i];j++){\n\t\t\tint x=read();\n\t\t\tadd(i,x);\n\t\t\ttree.add(tree.root[i],x,1,1,n+q);\n\t\t}\n\t}\n\tfor(int i=1;i<=q;i++){\n\t\tll op,m,x,y,z;\n\t\top=read();\n\t\tif(op==1){\n\t\t\tx=read();y=read();\n\t\t\tadd(x,y);\n\t\t\ttree.add(tree.root[x],y,1,1,n+q);\n\t\t}\n\t\telse if(op==2){\n\t\t\tx=read();\n\t\t\ttree.add(tree.root[x],val[head[x]],-1,1,n+q);\n\t\t\tdel(x);\n\t\t}\n\t\telse if(op==3){\n\t\t\tm=read();\n\t\t\tpair<int,int>u;\n\t\t\tu.first=u.second=0;\n\t\t\tfor(int j=1;j<=m;j++){\n\t\t\t\txx[j]=read();\n\t\t\t\tcmp(u,u,tree.a[tree.root[xx[j]]].zs);\n\t\t\t}\n\t\t\tif(!u.first){\n\t\t\t\tputs(\"-1\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tx=0;y=0;\n\t\t\tfor(int j=1;j<=m;j++){\n\t\t\t\tx+=tree.asksum(tree.root[xx[j]],1,n+q,1,n+q);\n\t\t\t\ty+=tree.asksum(tree.root[xx[j]],u.first,u.first,1,n+q);\n\t\t\t}\n\t\t\tif(y*2>x){\n\t\t\t\twrite(u.first);\n\t\t\t\tputs(\"\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tputs(\"-1\");\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t//x,y,z\u5206\u522b\u8868\u793ax1,x2,x3 \n\t\t\tx=read();y=read();z=read();\n\t\t\ttree.root[z]=tree.get_new();\n\t\t\ttree.merge(tree.root[z],tree.root[x],1,n+q);\n\t\t\ttree.merge(tree.root[z],tree.root[y],1,n+q);\n\t\t\thead[z]=(head[y]?head[y]:head[x]);\n\t\t\ttail[z]=(tail[x]?tail[x]:tail[y]);\n\t\t\tif(head[x]&&head[y])\n\t\t\t\tnxt[tail[y]]=head[x];\n\t\t\t\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1661782743,
        "uid": 419144,
        "name": "chenjunxiu",
        "ccfLevel": 7,
        "title": "P8496 [NOI2022] \u4f17\u6570"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u77e5\u9053\u6709\u4e2a\u4e1c\u897f\u53eb\u6469\u5c14\u6295\u7968\u6cd5\uff0c\u5927\u6982\u5c31\u662f\u6bcf\u6b21\u627e\u5230\u4e24\u4e2a\u4e0d\u540c\u7684\u6570\u4e00\u8d77\u5220\u6389\uff0c\u6700\u540e\u5269\u4e0b\u90a3\u4e2a\u5c31\u53ef\u80fd\u662f\u7b54\u6848\u3002\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u5206\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u6a21\u62df\u8fd9\u4e2a\u6295\u7968\uff0c\u7b2c\u4e8c\u90e8\u5206\u5224\u65ad\u662f\u5426\u8d85\u8fc7\u4e00\u534a\u3002\n\n\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u4e0d\u9700\u8981\u968f\u673a\u8bbf\u95ee\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u7528\u94fe\u8868\u3002\n\n\u6469\u5c14\u6295\u7968\u6cd5\u7684\u4fe1\u606f $(val,count)$ \u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u8fd9\u4e2a\u7528\u7c7b\u4f3c\u52a8\u6001 dp \u7684\u4e1c\u897f\u53ef\u4ee5\u53bb\u7ef4\u62a4\uff0c\u4f46\u662f\u600e\u4e48\u628a\u4ed6\u642c\u5230\u533a\u95f4\u4e0a\u5462\uff1f\n\n\u6211\u4eec\u5148\u628a\u6240\u6709\u64cd\u4f5c\u79bb\u7ebf\u5e76**\u5ffd\u7565\u6240\u6709\u5220\u9664\u64cd\u4f5c**\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u51fa\u6700\u7ec8\u7684\u5f62\u6001\uff0c\u7136\u540e\u904d\u5386\u5206\u914d\u6807\u53f7\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5e8f\u5217\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u533a\u95f4\u4e2d\u7684\u6570\u53ef\u80fd\u5b58\u5728\u6216\u8005\u4e0d\u5b58\u5728\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e22\u5230\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e86\u3002\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u4e2a log \u7684\u3002\u5224\u65ad\u662f\u5426\u8d85\u8fc7\u4e00\u534a\u76f4\u63a5\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u597d\u4e86\uff0c\u4e5f\u662f\u4e00\u4e2a log \u7684\uff0c\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\u4f46\u662f\u6211\u5199\u4e86 8K \u4ee3\u7801\uff0c\u600e\u4e48\u56de\u4e8b\u5462\u3002\n\n```cpp\n// author : \u534e\u604b_\u97f5\n#include <stdio.h>\n#include <assert.h>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <set>\n// #define int long long\n\nstruct bot{\n    bot *nxt,*pre;\n    int val;\n    int Stat,Cnt;\n};\nbot *a[4000005],*b[4000005];\n// std::map<int,int>mp[4000005];\nint ns[4000005],sz[4000005];\nstruct dottle{\n    int a,b;//op, val\n    bool operator<(const dottle&c)const{\n        return a==c.a?b>c.b:a>c.a;\n    }\n};\n// std::set<dottle>s[4000005];\nvoid del(bot*&a)\n{\n    if(a==NULL)return;\n    if(a->nxt)del(a->nxt);\n    delete a;\n    a=NULL;\n}\nstruct seg{\n\tlong long cc[4000005];\n    int vl[4000005];\n    int dbg[4000005];\n\tinline void maintain(int o,int lc,int rc)\n\t{\n\t\tif(vl[lc]==vl[rc])vl[o]=vl[lc],cc[o]=cc[lc]+cc[rc];\n\t\telse if(cc[lc]>cc[rc])vl[o]=vl[lc],cc[o]=cc[lc]-cc[rc];\n\t\telse if(cc[lc]<cc[rc])vl[o]=vl[rc],cc[o]=-cc[lc]+cc[rc];\n\t\telse vl[o]=-1,cc[o]=0;\n\t}\n\tvoid shik(int o,int l,int r,int p,int v)\n\t{\n\t\tif(l==r)cc[o]=1,vl[o]=v,dbg[l]=v;//printf(\"upd %d %d\\n\",p,v);\n\t\telse \n\t\t{\n\t\t\tint m=l+r>>1;\n\t\t\tif(p<=m)shik(o<<1,l,m,p,v);\n\t\t\telse shik(o<<1|1,m+1,r,p,v);\n\t\t\tmaintain(o,o<<1,o<<1|1);\n\t\t}\n\t}\n\tvoid NIT(int o,int l,int r,int p)\n\t{\n\t\tif(l==r)cc[o]=0,vl[o]=-1,dbg[l]=-1;\n\t\telse \n\t\t{\n\t\t\tint m=l+r>>1;\n\t\t\tif(p<=m)NIT(o<<1,l,m,p);\n\t\t\telse NIT(o<<1|1,m+1,r,p);\n\t\t\tmaintain(o,o<<1,o<<1|1);\n\t\t}\n\t}\n\tvoid gyh(int o,int l,int r,int L,int R)\n\t{\n\t\tif(L<=l&&r<=R)\n\t\t{\n\t\t\tmaintain(0,0,o);\n\t\t\treturn;\n\t\t}\n\t\tint m=l+r>>1;\n\t\tif(m<R)gyh(o<<1|1,m+1,r,L,R);\n\t\tif(L<=m)gyh(o<<1,l,m,L,R);\n\t}\n}shaya;\nint rds[4000005],cc;\nint read()\n{\n    int x=0,f=1,c=getchar();\n    while(c<48||c>57){if(c=='-')f=-1;c=getchar();}\n    while(c>47&&c<58)x=x*10+c-48,c=getchar();\n    rds[++cc]=x*f;\n    return x*f;\n}\nint dd=0;\nint rd()\n{\n    return rds[++dd];\n}\nint s2[4000005];\nint pos[4000005],zs[4000005],head[1000005];\nstruct Fe{\n\tint lc[20000005],rc[20000005],s[10000005],cc;\n\tvoid jyws(int &o,int l,int r,int p,int v)\n\t{\n\t\t// printf(\"jyws %d %d %d %d %d\\n\",o,l,r,p,v);\n\t\tif(!o)o=++cc;\n\t\tif(l==r)return s[o]+=v,void();\n\t\tint m=l+r>>1;\n\t\tif(p<=m)jyws(lc[o],l,m,p,v);\n\t\telse jyws(rc[o],m+1,r,p,v);\n\t}\n\tint jyws(int &o,int l,int r,int p)\n\t{\n\t\tif(!o)return 0;\n\t\tif(l==r)return s[o];\n\t\tint m=l+r>>1;\n\t\tif(p<=m)return jyws(lc[o],l,m,p);\n\t\treturn jyws(rc[o],m+1,r,p);\n\t}\n\tvoid merge(int &o,int p,int l,int r)\n\t{\n\t\tif(!o||!p)return o+=p,void();\n\t\tif(l==r)\n\t\t{\n\t\t\ts[o]+=s[p];\n\t\t\treturn;\n\t\t}\n\t\tint m=l+r>>1;\n\t\tmerge(lc[o],lc[p],l,m);\n\t\tmerge(rc[o],rc[p],m+1,r);\n\t}\n}dx;\nsigned main()\n{\n    int n=read(),q=read(),ss=n+q,qq=0;\n    for(int i=1;i<=ss;i++)\n    {\n        a[i]=new bot();\n        a[i]->nxt=NULL;\n        a[i]->pre=NULL;\n        a[i]->val=0;\n        a[i]->Stat=-i;\n        b[i]=a[i];\n    }\n    for(int i=1;i<=n;i++)\n    {\n        int s=read();\n        while(s--)\n        {\n            int x=read();\n            sz[i]++;\n            b[i]->nxt=new bot();\n            b[i]->nxt->pre=b[i];\n            b[i]=b[i]->nxt;\n            b[i]->val=++qq;\n            b[i]->nxt=NULL;\n            b[i]->Stat=i;\n        }\n    }\n    for(int i=1;i<=q;i++)\n    {\n        int op=read();\n        // printf(\"op %d\\n\",op);\n        if(op==1)\n        {\n            int i=read(),x=read();\n            sz[i]++;\n            b[i]->nxt=new bot();\n            b[i]->nxt->pre=b[i];\n            b[i]=b[i]->nxt;\n            b[i]->val=++qq;\n            b[i]->nxt=NULL;\n            b[i]->Stat=i;\n        }\n        else if(op==2)\n        {\n            int i=read();\n        }\n        else if(op==4)//\n        {\n            int x=read(),y=read(),z=read();\n            sz[z]=sz[x]+sz[y];\n            a[z]->nxt=a[x];\n            a[x]->pre=a[z];\n            b[x]->nxt=a[y];\n            a[y]->pre=b[x];\n            b[z]=b[y];\n        }\n        else \n        {\n            int s=read();\n            while(s--)read();\n            //TODO.\n        }\n    }\n    assert(qq<=1000000);\n    int kk=0;\n    for(int i=1;i<=ss;i++)\n    {\n        if(a[i]->pre==NULL)\n        {\n            bot *x=a[i];\n            while(x)\n            {\n                // printf(\"%d \",x->Stat);\n                if(x->Stat<0)s2[-x->Stat]=kk+1;\n                else pos[x->val]=++kk;\n                x=x->nxt;\n            }\n        }\n        // puts(\"\");\n    }\n    // for(int i=1;i<=ss;i++)printf(\"%d %d\\n\",s2[i],sz[i]);\n    for(int i=1;i<=ss;i++)\n    {\n        if(a[i]->pre==NULL)del(a[i]);\n    }\n    // -------------------------------------------------------------------------\n    \n    for(int i=1;i<=ss;i++)\n    {\n        a[i]=new bot();\n        a[i]->nxt=NULL;\n        a[i]->pre=NULL;\n        a[i]->val=0;\n        a[i]->Stat=-i;\n        b[i]=a[i];\n        zs[i]=sz[i];\n        sz[i]=0;\n    }\n    #define read rd\n    read(),read();\n    int qqq=0;\n    for(int i=1;i<=n;i++)\n    {\n        int s=read();\n        while(s--)\n        {\n            int x=read();\n            sz[i]++;\n            b[i]->nxt=new bot();\n            b[i]->nxt->pre=b[i];\n            b[i]=b[i]->nxt;\n            b[i]->val=++qqq;\n            b[i]->nxt=NULL;\n            b[i]->Stat=x;\n            // mp[i][x]++;\n            dx.jyws(head[i],0,ss,b[i]->Stat,1);\n            shaya.shik(1,1,1000000,pos[qqq],x);\n        }\n    }\n    for(int i=1;i<=q;i++)\n    {\n        int op=read();\n        // printf(\"op %d\\n\",op);\n        if(op==1)\n        {\n            int i=read(),x=read();\n            sz[i]++;\n            b[i]->nxt=new bot();\n            b[i]->nxt->pre=b[i];\n            b[i]=b[i]->nxt;\n            b[i]->val=++qqq;\n            b[i]->nxt=NULL;\n            b[i]->Stat=x;\n            // mp[i][x]++;\n            dx.jyws(head[i],0,ss,b[i]->Stat,1);\n            shaya.shik(1,1,1000000,pos[qqq],x);\n        }\n        else if(op==2)\n        {\n            int i=read();\n            // mp[i][b[i]->Stat]--;\n            sz[i]--;\n            dx.jyws(head[i],0,ss,b[i]->Stat,-1);\n            shaya.NIT(1,1,1000000,pos[b[i]->val]);\n            b[i]=b[i]->pre;\n            delete b[i]->nxt;\n            b[i]->nxt=0;\n        }\n        else if(op==4)//\n        {\n            int x=read(),y=read(),z=read();\n            sz[z]=sz[x]+sz[y];\n            if(a[x]->nxt==0&&a[y]->nxt==0)\n            {\n            \t\n            }\n            else if(a[x]->nxt==0)\n            {\n            \ta[z]->nxt=a[y]->nxt;\n            \ta[y]->nxt->pre=a[z];\n            \tb[z]=b[y];\n            }\n            else if(a[y]->nxt==0)\n            {\n            \ta[z]->nxt=a[x]->nxt;\n            \ta[x]->nxt->pre=a[z];        \t\n\t            b[z]=b[x];\n            }\n            else\n            {\n            \ta[z]->nxt=a[x]->nxt;\n            \ta[x]->nxt->pre=a[z];\n            \tb[x]->nxt=a[y]->nxt;\n            \ta[y]->nxt->pre=b[x];\n\t            b[z]=b[y];\n            }\n            a[x]->nxt=0;\n            a[y]->nxt=0;\n            dx.merge(head[x],head[y],0,ss),head[z]=head[x];\n            // if(mp[x].size()<mp[y].size())std::swap(x,y);\n            // mp[z].swap(mp[x]);\n            // for(auto Q:mp[y])mp[z][Q.first]+=Q.second;\n            // mp[y].clear();\n        }\n        else \n        {\n            int s=read();\n            shaya.vl[0]=-1,shaya.cc[0]=0;\n            int S=0;\n            int t=s,DD=dd;\n            while(s--)\n            {\n                int x=read();\n                S+=sz[x];\n                if(zs[x])shaya.gyh(1,1,1000000,s2[x],s2[x]+zs[x]-1);\n                // printf(\"(%d %d)\\n\",s2[x],s2[x]+zs[x]-1);\n            }\n            //-1 judge..\n            int x=shaya.vl[0];\n            if(x==-1);else{\n                dd=DD;int ca=0;\n                while(t--)\n                {\n                    int xx=read();\n                    if(ca<=S)ca+=2*dx.jyws(head[xx],0,ss,x);\n                }\n                if(ca<=S)x=-1;\n            }\n            printf(\"%d\\n\",x);\n            //TODO.\n        }\n        // for(int i=1;i<=ss;i++)printf(\"%d \",shaya.dbg[i]);puts(\"\");\n    }\n\n\n    for(int i=1;i<=ss;i++)\n    {\n        if(a[i]->pre==NULL)del(a[i]);\n    }\n    return 0;\n}\n/*\n2 8\n3 1 1 2\n3 3 3 3\n3 1 1\n3 1 2\n4 2 1 3\n3 1 3\n2 3\n3 1 3\n1 3 1\n3 1 3\n*/\n\n```",
        "postTime": 1661731987,
        "uid": 735057,
        "name": "wghyt1314",
        "ccfLevel": 0,
        "title": "\u661f\u4e43\u4e94\u54e5\uff1a\u60ca\u8bb6\uff01"
    },
    {
        "content": "\u5565\u4e5f\u4e0d\u4f1a\u7684\u8d5b\u540e\u8865\u9898\u9009\u624b\u6765\u4e00\u53d1\u9898\u89e3\u3002\n\n------------\n\n[\u9898\u9762](https://www.luogu.com.cn/problem/P8496)\n\n\u9898\u76ee\u5b9a\u4e49\u7684\u201c\u4f17\u6570\u201d\u4e3a\u5e8f\u5217\u4e2d\u51fa\u73b0\u6b21\u6570\u4e25\u683c\u5927\u4e8e\u4e00\u534a\u7684\u6570\u5b57\uff0c\u5148\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u5e8f\u5217\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u5e8f\u5217\u5efa\u7acb\u4e00\u9897\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u67e5\u8be2\u65f6\u5f80\u5de6\u53f3\u5b50\u533a\u95f4\u4e2d\u5143\u7d20\u4e2a\u6570\u5927\u4e8e\u539f\u5e8f\u5217\u957f\u5ea6\u4e00\u534a\u7684\u65b9\u5411\u9012\u5f52\u67e5\u627e\uff0c\u5982\u679c\u90fd\u5c0f\u4e8e\u5219\u65e0\u89e3\u3002\u8fd9\u6837\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\log_2 n$ \u7684\u3002\n\n\u8981\u7ef4\u62a4\u591a\u4e2a\u5e8f\u5217\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5e8f\u5217\u90fd\u5efa\u7acb\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u56e0\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u4e0d\u80fd\u7ef4\u62a4\u5e8f\u5217\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528``vector``\u8bb0\u5f55\u6574\u4e2a\u5e8f\u5217\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63d2\u5165\u5220\u9664\u3002\n\n\u5bf9\u4e8e $1$ \u64cd\u4f5c\uff0c\u5411\u6743\u503c\u7ebf\u6bb5\u6811\u53ca``vector``\u4e2d\u540c\u65f6\u52a0\u5165\u65b0\u5143\u7d20\u5373\u53ef\u3002\u5bf9\u4e8e $2$ \u64cd\u4f5c\uff0c\u6211\u4eec\u627e\u5230\u6240\u5220\u9664\u5e8f\u5217\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u548c``vector``\uff0c\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u548c``vector``\u4e2d\u5220\u9664\u6b64``vector``\u91cc\u6700\u9760\u540e\u7684\u5143\u7d20\u3002\n\n\u5bf9\u4e8e $4$ \u64cd\u4f5c\uff0c\u9898\u76ee\u8981\u6c42\u4e24\u4e2a\u5e8f\u5217\u62fc\u63a5\u5e76\u5220\u9664\u539f\u5e8f\u5217\u3002\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u5c06\u524d\u9762\u5e8f\u5217\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u5230\u540e\u9762\u5e8f\u5217\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u5373\u53ef\u3002\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5bf9\u5e94\u5b58\u50a8\u5e8f\u5217\u7684``vector``\u65e0\u6cd5\u5408\u5e76\u3002\n\n\u90a3\u6211\u4eec\u5c31\u4e0d\u5408\u5e76``vector``\uff0c\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\u6837\u7684\u4e1c\u897f\uff0c\u8bb0\u5f55\u5f53\u524d\u4e0b\u6807\u7684\u5e8f\u5217\u524d\u9762\u6240\u63a5\u7684\u5e8f\u5217\u3002\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684``vector``\u3002\u8fd9\u6837\u64cd\u4f5c $1$ \u65f6\u5728\u5f53\u524d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684``vector``\u63d2\u5165\u5143\u7d20\uff0c\u64cd\u4f5c $2$ \u65f6\u5219\u76f4\u63a5\u5220\u9664\u5373\u53ef\u3002\u82e5\u5f53\u524d\u5e8f\u5217\u672b\u5c3e\u6240\u5728``vector``\u5df2\u7ecf\u4e3a\u7a7a\uff0c\u90a3\u4e48\u53ef\u4ee5\u4e00\u76f4\u8df3\u94fe\u8868\uff0c\u76f4\u5230\u5f53\u524d\u6240\u5728\u7684``vector``\u4e0d\u4e3a\u7a7a\u4e3a\u6b62\u3002\n\n\u4e3a\u63d0\u9ad8\u5408\u5e76\u6548\u7387\uff0c\u9700\u8981\u989d\u5916\u7ef4\u62a4\u5e76\u67e5\u96c6\u8bb0\u5f55\u5f53\u524d``vector``\u5728\u6240\u5c5e\u5e8f\u5217\u6700\u5408\u5e76\u4f4d\u7f6e\u9760\u524d\u7684``vector``\u4e0b\u6807\uff0c\n\n\u5bf9\u4e8e $3$ \u64cd\u4f5c\uff0c\u9898\u76ee\u8981\u6c42\u591a\u4e2a\u5e8f\u5217\u62fc\u63a5\u540e\u7684\u4f17\u6570\u3002\n\n\u5408\u5e76\u591a\u68f5\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u65e0\u6cd5\u63a5\u53d7\u3002\u90a3\u8be5\u600e\u4e48\u505a\uff1f\u66b4\u529b\uff01\u6211\u4eec\u6309\u7167\u5355\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u540c\u65f6\u5bf9\u591a\u68f5\u7ebf\u6bb5\u6811\u67e5\u8be2\u3002\u5bf9\u4e8e\u5de6\u53f3\u5b50\u533a\u95f4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u66b4\u529b\u904d\u5386\u6240\u6709\u67e5\u8be2\u6811\u7684\u5f53\u524d\u8282\u70b9\u5e76\u6c42\u548c\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\uff1f\u9898\u76ee\u4e2d\u4fdd\u8bc1\u4e86\u67e5\u8be2\u7684\u5e8f\u5217\u603b\u6570\u4e0d\u8d85\u8fc7 $5 \\times 10^5$\uff0c\u800c\u6bcf\u6b21\u67e5\u8be2\u6709 $\\log n$ \u5c42\uff0c\u5219\u5bf9\u4e8e\u6240\u6709\u8be2\u95ee\u66b4\u529b\u6c42\u548c\u7684\u603b\u6b21\u6570\u4e3a $n \\log n$ \u7ea7\u522b\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\n------------\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1. \u672c\u9898\u64cd\u4f5c $3$ \u7684\u5e8f\u5217\u53ef\u4ee5\u91cd\u590d\uff0c\u56e0\u6b64\u6c42\u533a\u95f4\u5143\u7d20\u603b\u4e2a\u6570\u65f6\u53ef\u80fd\u4f1a\u7206``long long``\u3002\n\n2. ``deque``\u7a7a\u95f4\u590d\u6742\u5ea6\u6781\u9ad8\uff0c\u4f7f\u7528\u9700\u8c28\u614e\u3002\n\n3. \u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\u65f6\u4e0d\u8981\u66b4\u529b\u8df3\u94fe\u627e\u5e8f\u5217\u9996\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u52a0\u901f\u67e5\u627e\u3002\n\n------------\n\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <vector>\nconst int Nx=1000010;\nint N,Q;\nstd::vector<int> a[Nx];\nint vl[Nx],chain[Nx],nid[Nx],fa[Nx];\nint siz[80*Nx],ls[80*Nx],rs[80*Nx],cnt,root[Nx];\nint new_node(){return ++cnt;}\nvoid addin(int ll,int rr,int &p,int pos,int delta)\n{\n\tif(!p)\n\t\tp=new_node();\n\tif(ll==rr)\n\t{\n\t\tsiz[p]+=delta;\n\t\treturn;\n\t}\n\tint mid=(ll+rr)>>1;\n\tif(pos<=mid)\n\t\taddin(ll,mid,ls[p],pos,delta);\n\telse\n\t\taddin(mid+1,rr,rs[p],pos,delta);\n\tsiz[p]=siz[ls[p]]+siz[rs[p]];\n}\nint find_vec(int ll,int rr,std::vector<int> p,long long szp,long long flen)\n{\n\tif(szp<flen)\n\t\treturn -1;\n\tif(ll==rr)\n\t\treturn ll;\n\tlong long sizl=0,sizr=0;\n\tint mid=(ll+rr)>>1;\n\tstd::vector<int> lc,rc;\n\tfor(auto i : p)\n\t{\n\t\tsizl+=siz[ls[i]];\n\t\tsizr+=siz[rs[i]];\n\t\tlc.push_back(ls[i]);\n\t\trc.push_back(rs[i]);\n\t}\n\tif(sizl>=flen)\n\t\treturn find_vec(ll,mid,lc,sizl,flen);\n\tif(sizr>=flen)\n\t\treturn find_vec(mid+1,rr,rc,sizr,flen);\n\treturn -1;\n}\nint merge(int x,int y)\n{\n\tif(!x||!y)\n\t\treturn x+y;\n\tif(!ls[x]&&!rs[x])\n\t{\n\t\tsiz[x]+=siz[y];\n\t\treturn x;\n\t}\n\tls[x]=merge(ls[x],ls[y]);\n\trs[x]=merge(rs[x],rs[y]);\n\tsiz[x]=siz[ls[x]]+siz[rs[x]];\n\treturn x;\n}\nint ff(int p)\n{\n\tif(p!=fa[p])\n\t\tfa[p]=ff(fa[p]);\n\treturn fa[p];\n}\nint main()\n{\n\tscanf(\"%d%d\",&N,&Q);\n\tint i,j,k,val,opt,x,y;\n\tfor(i=1;i<=N;i++)\n\t{\n\t\tscanf(\"%d\",&vl[i]);\n\t\tfor(j=1;j<=vl[i];j++)\n\t\t{\n\t\t\tscanf(\"%d\",&val);\n\t\t\ta[i].push_back(val);\n\t\t\taddin(0,Nx,root[i],val,1);\n\t\t}\n\t}\n\tfor(i=1;i<Nx;i++)\n\t\tchain[i]=i,nid[i]=i,fa[i]=i;\n\twhile(Q--)\n\t{\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\ta[nid[x]].push_back(y);\n\t\t\taddin(0,Nx,root[x],y,1);\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tscanf(\"%d\",&x);\n\t\t\twhile(a[nid[x]].size()==0)\n\t\t\t\tnid[x]=chain[nid[x]];\n\t\t\tval=a[nid[x]][a[nid[x]].size()-1];\n\t\t\ta[nid[x]].pop_back();\n\t\t\taddin(0,Nx,root[x],val,-1);\n\t\t}\n\t\telse if(opt==3)\n\t\t{\n\t\t\tscanf(\"%d\",&k);\n\t\t\tstd::vector<int> qv;\n\t\t\tlong long sza=0;\n\t\t\tfor(j=1;j<=k;j++)\n\t\t\t{\n\t\t\t\tscanf(\"%d\",&val);\n\t\t\t\tqv.push_back(root[val]);\n\t\t\t\tsza+=siz[root[val]];\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",find_vec(0,Nx,qv,sza,sza/2+1));\n\t\t}\n\t\telse if(opt==4)\n\t\t{\n\t\t\tscanf(\"%d%d%d\",&x,&y,&val);\n\t\t\troot[val]=merge(root[x],root[y]);\n\t\t\tnid[val]=nid[y];\n\t\t\tk=ff(nid[y]);\n\t\t\tchain[k]=nid[x];\n\t\t\tfa[k]=nid[x];\n\t\t}\n\t}\n}\n```\n\n\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8dd1\u5f97\u6bd4\u8f83\u6162...",
        "postTime": 1661702905,
        "uid": 291481,
        "name": "novax",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 [NOI2022] \u4f17\u6570"
    },
    {
        "content": "\u6709\u5e78\u5728\u8003\u573a\u4e0a\u7528\u4e71\u641e\u8fc7\u4e86\u8fd9\u9053\u9898\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u4e71\u641e\u76f4\u5230\u73b0\u5728\u6211\u90fd\u4e0d\u77e5\u9053\u8981\u600e\u4e48\u5361\uff09\uff0c\u4e8e\u662f\u5199\u4e0b\u8fd9\u7bc7\u9898\u89e3\uff0c\u5e0c\u671b\u80fd\u5206\u4eab\u4e00\u4e0b\u8fd9\u4e2a\u5f88\u597d\u60f3\u7684\u505a\u6cd5\uff0c\u770b\u770b\u6709\u6ca1\u6709\u5927\u4f6c\u80fd\u5361\u6389\uff0c\u540c\u65f6\u7ed9\u50cf\u6211\u4e00\u6837\u6ca1\u89c1\u8fc7\u6469\u5c14\u6295\u7968\u8fd9\u4e2a\u5e38\u89c1\u5957\u8def\u7684\u540c\u5b66\u4e00\u70b9\u601d\u8def\u3002\u5f53\u7136\uff0c\u6469\u5c14\u6295\u7968\u7684\u6b63\u89e3\u5728\u540e\u9762\u4e5f\u4f1a\u6709\u3002\n\n\u8fd9\u9053\u9898\u7684\u5e8f\u5217\u660e\u663e\u53ef\u4ee5\u94fe\u8868\u7ef4\u62a4\uff0c\u800c\u8ba1\u7b97\u7edd\u5bf9\u4f17\u6570\u9700\u8981\u4e00\u4e2a\u6876\uff0c\u540c\u65f6\u8fd9\u4e2a\u6876\u8fd8\u8981\u80fd\u652f\u6301\u5408\u5e76\uff0c\u7531\u6b64\u4e0d\u96be\u60f3\u5230\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4e14\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u987a\u4fbf\u7ef4\u62a4\u6bcf\u4e2a\u5e8f\u5217\u7684\u6700\u5927\u503c\u4ee5\u53ca\u5176\u51fa\u73b0\u6b21\u6570\u3002**\u6ce8\u610f\uff1a\u672c\u6587\u4e2d\uff0c\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u6700\u5927\u503c\u6307\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c**\u3002\u8fd9\u6837\u7684\u8bdd\u64cd\u4f5c $1,2,4$ \u5c31\u5b8c\u4e8b\u4e86\uff0c\u53ea\u9700\u8981\u89e3\u51b3\u67e5\u8be2\u5373\u53ef\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u503c\u8981\u60f3\u6210\u4e3a\u6700\u7ec8\u7684\u7edd\u5bf9\u4f17\u6570\uff0c\u90a3\u4e48\u5b83\u81f3\u5c11\u8981\u5728\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4ee5\u7edd\u5bf9\u4f17\u6570\u51fa\u73b0\uff0c\u5426\u5219\u5176\u51fa\u73b0\u6b21\u6570\u4e0d\u53ef\u80fd\u8d85\u8fc7\u4e00\u534a\u3002\u90a3\u4e48\u4e00\u4e2a\u66b4\u529b\u505a\u6cd5\u5c31\u5341\u5206\u663e\u7136\u4e86\uff1a\u5bf9\u4e8e\u8fd9 $m$ \u4e2a\u5e8f\u5217\u7684\u7edd\u5bf9\u4f17\u6570\u5206\u522b\u5728\u8fd9 $m$ \u9897\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\uff0c\u76f4\u5230\u627e\u5230\u7edd\u5bf9\u4f17\u6570\uff0c\u5426\u5219\u65e0\u89e3\u3002\n\n\u7136\u800c\u8fd9\u4e2a\u66b4\u529b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(\\sum{m^2\\log n)}$ \u7684\uff0c\u8003\u8651\u4f18\u5316\u3002\u8fd0\u7528\u4eba\u7c7b\u667a\u6167\uff0c\u6211\u4eec\u53d1\u73b0**\u7edd\u5bf9\u4f17\u6570**\u662f\u4e00\u4e2a\u5f88\u5f3a\u7684\u6761\u4ef6\uff1a\u5982\u679c\u628a\u8fd9\u4e9b\u5e8f\u5217\u5199\u5728\u7eb8\u4e0a\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u80fd\u4e00\u773c\u77aa\u51fa\u6765\u8c01\u6709\u53ef\u80fd\u662f\u7edd\u5bf9\u4f17\u6570\uff0c\u800c\u4e14\u6700\u591a\u53ea\u4f1a\u6709\u4e00\u4e24\u4e2a\u5f85\u9009\u7684\u6570\u3002\u5047\u8bbe $1$ \u662f\u8fd9\u4e2a\u7edd\u5bf9\u4f17\u6570\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff1a\u5982\u679c\u60f3\u8ba9 $1$ \u4e0d\u5728\u90a3\u4e48\u591a\u7684\u5e8f\u5217\u4e2d\u4ee5\u7edd\u5bf9\u4f17\u6570\u51fa\u73b0\uff0c\u5219\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u7279\u522b\u957f\u7684\u5e8f\u5217\u91cc\u9762\u51e0\u4e4e\u5168\u662f $1$\uff0c\u624d\u80fd\u4fdd\u8bc1 $1$ \u8d85\u8fc7\u4e00\u534a\uff1b\u53cd\u4e4b\uff0c\u5982\u679c\u4e0d\u60f3\u8ba9\u4e00\u4e2a\u5f88\u957f\u7684\u5e8f\u5217\u91cc\u51fa\u73b0\u8fc7\u591a $1$\uff0c\u90a3\u4e48 $1$ \u5fc5\u987b\u5728\u5176\u4ed6\u5e8f\u5217\u4e2d\u4ee5\u7edd\u5bf9\u4f17\u6570\u5e7f\u6cdb\u5b58\u5728\u3002\u800c\u65e0\u8bba\u662f\u54ea\u79cd\u5f62\u5f0f\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u901a\u8fc7\u626b\u4e00\u904d\u201c\u610f\u8bc6\u5230\u201d\u8fd9\u4e2a\u51fa\u73b0\u6b21\u6570\u5f88\u591a\u7684\u6570\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5b9e\u5728\u60f3\u4e0d\u5230\u6b63\u89e3\uff0c\u4e0d\u59a8\u76f8\u4fe1\u4e00\u6b21\u4eba\u7c7b\u667a\u6167\uff0c\u76f8\u4fe1\u66b4\u529b\u51fa\u5947\u8ff9\u3002\n\n\u8003\u8651\u5982\u4f55\u8ba9\u7a0b\u5e8f\u201c\u8bc6\u522b\u201d\u8fd9\u4e2a\u5e7f\u6cdb\u5b58\u5728\u7684\u6570\uff1a\u901a\u8fc7\u4e4b\u524d\u5b58\u50a8\u7684\u5e8f\u5217\u7684\u6700\u5927\u503c\u4e0e\u5176\u51fa\u73b0\u6b21\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9 $m$ \u4e2a\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u7edd\u5bf9\u4f17\u6570\u7ef4\u62a4\u5176\u51fa\u73b0\u6b21\u6570\u7684**\u7406\u8bba\u6700\u5927\u503c**\u3002\u8fd9\u4e2a**\u7406\u8bba\u6700\u5927\u503c**\u5c31\u662f\u5b57\u9762\u610f\u601d\uff0c\u6307\u7684\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6570\uff0c\u5728\u4e0d\u8fdd\u53cd\u73b0\u6709\u6700\u5927\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u51fa\u73b0\u591a\u5c11\u6b21\u3002\u7528\u7c7b\u4f3c\u4ee3\u7801\u7684\u8bed\u8a00\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u957f\u4e3a `L` \u7684\u5e8f\u5217\u6700\u5927\u503c `x`\uff0c\u51fa\u73b0\u4e86 `c` \u6b21\uff0c\u90a3\u4e48 `x` \u7684\u7406\u8bba\u4e0a\u9650 `+=c`\uff0c\u5176\u4ed6\u6570\u7684\u7406\u8bba\u4e0a\u9650 `+=min(c,L-c)`\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5747\u644a $O(1)$\u3002\n\n\u800c\u8fd9\u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u9700\u628a\u6240\u6709\u5f85\u9009\u7684\u6570\u6309\u7406\u8bba\u4e0a\u9650\u964d\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e00\u4e2a\u4e00\u4e2a\u67e5\u8be2\u76f4\u5230\u7406\u8bba\u4e0a\u9650\u4e0d\u5927\u4e8e\u4e00\u534a\u5c31\u884c\u4e86\uff0c\u6700\u6162\u7684\u70b9 469ms\u3002\u5982\u679c\u4f60\u5bb3\u6015\u88ab\u5361\uff0c\u53ef\u4ee5\u53bb\u7ef4\u62a4\u524d $k$ \u5927\u503c\u800c\u4e0d\u662f\u4ec5\u7ef4\u62a4\u6700\u5927\u503c\uff0c$k\\le4$ \u90fd\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\uff08\u6211\u8003\u573a\u4e0a\u5c31\u5199\u7684 $k=2$\uff09\u3002\n\n\u53e6\u5916\uff0c$k=1$ \u6216\u8bb8\u6bd4\u8f83\u597d\u5361\uff0c\u4f46\u6211\u5c1d\u8bd5\u4e86\u5f88\u4e45\u90fd\u6ca1\u80fd\u628a $k=2$ \u65f6\u7684\u8fd9\u4e2a\u505a\u6cd5\u5361\u6389\uff0c\u95ee\u4e86\u540c\u5b66\u4e5f\u4e0d\u77e5\u9053\uff0c\u5e0c\u671b\u80fd\u6709\u5927\u4f6c\u5c1d\u8bd5\u9020\u9020 Hack \u6570\u636e\u3002\u6216\u8005\u8bf4\uff0c\u8fd9\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u5176\u5b9e\u662f\u5bf9\u7684\uff1f\n\n\u8bb0\u5f97\u5f00 `long long`\uff01\n\n```cpp\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#define ll long long\n#define gc getchar\n#define mid (l+r>>1)\n#define err(...)\n\ninline void read(int &n){\n    n=0; char c=gc(); bool w=0;\n    while(c<'0'||c>'9') {\n        if(c=='-') w=1;\n        c=gc();\n    }\n    n=c-48;\n    while((c=gc())>='0'&&c<='9') n=(n<<3)+(n<<1)+c-48;\n    if(w) n=-n;\n}\n\nconst int maxn = 1e6+9;\nusing namespace std;\n\n//\u94fe\u8868\uff0c\u4e0d\u8fc7\u591a\u89e3\u91ca\nstruct Link {\n\n    int head[maxn],tail[maxn],pre[maxn],nxt[maxn],val[maxn],len[maxn],tot;\n\n    inline Link(){\n        tot=0;\n        memset(len,0,sizeof(len));\n    }\n    inline void append(int id, int v){\n        val[++tot] = v;\n        if(!len[id]++) {\n            head[id] = tail[id] = tot;\n            pre[tot] = nxt[tot] = -1;\n            val[tot] = v;\n        } else {\n            pre[tot] = tail[id];\n            nxt[tail[id]] = tot;\n            tail[id] = tot;\n        }\n    }\n    inline int erase(int id){\n        int res = val[tail[id]];\n        if(!--len[id]) {\n            head[id] = tail[id] = -1;\n        } else {\n            tail[id] = pre[tail[id]];\n            nxt[tail[id]] = -1;\n        }\n        return res;\n    }\n    inline void merge(int x, int y, int z){\n        if(!len[x]) {\n            head[z] = head[y], tail[z] = tail[y], len[z] = len[y];\n            return;\n        }\n        if(!len[y]) {\n            head[z] = head[x], tail[z] = tail[x], len[z] = len[x];\n            return;\n        }\n        len[z] = len[x]+len[y];\n        head[z] = head[x];\n        tail[z] = tail[y];\n        nxt[tail[x]] = head[y];\n        pre[head[y]] = tail[x];\n    }\n\n}link;\n\nstruct node {\n    int ls,rs,val,cnt;\n}t[maxn*40];\n\nint rub[maxn*40],root[maxn],rcc,n,q,tot;\n\n//\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u4e0d\u8fc7\u591a\u89e3\u91ca\ninline int newnode(){\n    if(rcc){\n        int res = rub[rcc--];\n        t[res] = {0,0,0,0};\n        return res;\n    }\n    return ++tot;\n}\ninline void pushup(int now){\n    if(t[t[now].ls].cnt > t[t[now].rs].cnt) {\n        t[now].cnt = t[t[now].ls].cnt;\n        t[now].val = t[t[now].ls].val;\n    } else {\n        t[now].cnt = t[t[now].rs].cnt;\n        t[now].val = t[t[now].rs].val;\n    }\n}\nvoid insert(int &now, int l, int r, int pos, int w=1){\n    if(!now) now=newnode();\n    if(l == r){\n        t[now].val = pos;\n        t[now].cnt += w;\n        return;\n    }\n    if(pos <= mid) insert(t[now].ls,l,mid,pos,w);\n    else insert(t[now].rs,mid+1,r,pos,w);\n    pushup(now);\n}\nint merge(int a, int b, int l, int r){\n    if(!a || !b) return a|b;\n    if(l == r){\n        t[a].cnt += t[b].cnt;\n        rub[++rcc] = b;\n        return a;\n    }\n    t[a].ls = merge(t[a].ls,t[b].ls,l,mid);\n    t[a].rs = merge(t[a].rs,t[b].rs,mid+1,r);\n    rub[++rcc] = b;\n    pushup(a);\n    return a;\n}\nint query(int now, int l, int r, int pos){\n    if(!now) return 0;\n    if(l == r) return t[now].cnt;\n    if(pos <= mid) return query(t[now].ls,l,mid,pos);\n    else return query(t[now].rs,mid+1,r,pos);\n}\n\nint has[maxn],mul[maxn],mulTime[maxn];\nvector<int> nums,ids;\nll extra[maxn];\n\nint Solve(){\n    //\u8fd9\u91cc\u4e3a\u4e86\u7701\u53bb\u521d\u59cb\u5316\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u76f4\u63a5\u901a\u8fc7\u6253\u65f6\u95f4\u6233\u5224\u65ad\u8981\u4e0d\u8981\u6e05\u7a7a\n    static int tim = 0; ++tim; \n    ll cnt = 0, totlen = 0;\n    nums.clear(); ids.clear();\n    int m; read(m);\n    for(int i=1,id; i<=m; i++){\n        read(id);\n        int val = t[root[id]].val;\n        extra[val] = 0;\n        if(has[val] != tim) {//\u65f6\u95f4\u6233\u4e0d\u4e00\u81f4\u8bf4\u660e\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e0b\u540c\n            has[val] = tim;\n            nums.push_back(val);\n        }\n        if(mulTime[id] != tim) {\n            mulTime[id] = tim;\n            mul[id] = 0;\n            ids.push_back(id);\n        }\n        mul[id]++;\n        totlen += link.len[id];\n    }\n    for(int id : ids) {\n        int sum=0,cc,val;\n        //cc\u662f\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u975e\u6700\u5927\u503c\u7684\u7406\u8bba\u4e0a\u9650\u6b21\u6570\n        cc = min(link.len[id]-t[root[id]].cnt, t[root[id]].cnt);\n        cnt += (ll)cc*mul[id];\n        //\u8fd9\u91ccextra\u5c31\u662f\u6700\u5927\u503c\u76f8\u8f83\u4e8e\u975e\u6700\u5927\u503c\u989d\u5916\u7684\u6b21\u6570\u3002\n        //\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5047\u88c5\u6240\u6709\u503c\u90fd\u662f\u975e\u6700\u5927\u503c\uff0c\u800c\u6700\u5927\u503c\u989d\u5916\u7684\u6b21\u6570\u5355\u72ec\u5b58\u8d77\u6765\n        extra[t[root[id]].val] += (ll)(t[root[id]].cnt-cc)*mul[id];\n    }\n    sort(nums.begin(),nums.end(),[&](int x, int y) -> bool {\n        return extra[x] > extra[y];\n    });\n    for(int num : nums) {\n        if((cnt+extra[num])*2 <= totlen) return -1;\n        ll reallen = 0;\n        //\u66b4\u529b\u67e5\u8be2\n        for(int id : ids) {\n            reallen += (ll)query(root[id],1,n+q,num)*mul[id];\n        }\n        if(reallen*2 > totlen) return num;\n    }\n    return -1;\n}\n\nint main(){\n    read(n),read(q);\n    for(int i=1,m,v; i<=n; i++){\n        read(m);\n        for(int j=1; j<=m; j++){\n            read(v);\n            link.append(i,v);\n            insert(root[i],1,n+q,v);\n        }\n    }\n    for(int i=1,op,x,y,z; i<=q; i++){\n        read(op);\n        switch(op){\n        case 1:\n            read(x),read(y);\n            link.append(x,y);\n            insert(root[x],1,n+q,y);\n            break;\n        case 2:\n            read(x);\n            y = link.erase(x);\n            insert(root[x],1,n+q,y,-1);\n            break;\n        case 3:\n            printf(\"%d\\n\",Solve());\n            break;\n        case 4:\n            read(x),read(y),read(z);\n            link.merge(x,y,z);\n            root[z] = merge(root[x],root[y],1,n+q);\n            break;\n        }\n    }\n    return 0;\n}\n```\n\n\u53ef\u60dc\u8d5b\u65f6\u56e0\u4e3a\u4e00\u4e9b\u5c0f\u9519\u8bef\u6302\u4e86 $15$ \u5206\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\uff0c\u66b4\u529b\u786e\u5b9e\u51fa\u5947\u8ff9\u4e86\u3002\n\n------------\n\n\u4f1a\u4e71\u641e\u80fd\u591f\u8ba9\u6211\u4eec\u62ff\u5206\uff0c\u4f46\u6b63\u89e3\u624d\u662f\u7b80\u6d01\u800c\u7f8e\u5999\u7684\u3002\u5176\u5b9e\u6b63\u89e3\u66f4\u7b80\u5355\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e00\u5806\u6570\u7684\u7edd\u5bf9\u4f17\u6570\uff0c\u6709\u4e00\u4e2a\u7ecf\u5178\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\n1. \u521d\u59cb\u5316\u4fe1\u606f $=(0,0)$\uff0c\u5176\u4e2d\u7b2c\u4e00\u9879\u4ee3\u8868\u5f53\u524d\u503c\uff0c\u7b2c\u4e8c\u9879\u4ee3\u8868\u5f53\u524d\u6b21\u6570\u3002\u6362\u8a00\u4e4b\uff0c\u5c31\u662f\u8fd9\u4e2a\u503c\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n2. \u904d\u5386\u6bcf\u4e00\u4e2a\u6570\uff0c\u5982\u679c\u503c\u4e00\u6837\uff0c\u90a3\u4e48\u6b21\u6570 $+1$\uff0c\u5426\u5219\u6b21\u6570 $-1$\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6b21\u6570\u5df2\u7ecf\u662f $0$ \u4e86\uff0c\u90a3\u4e48\u76f4\u63a5\u66f4\u65b0\u4fe1\u606f\u4e3a $(\\text{\u5f53\u524d\u503c},1)$\u3002\n3. \u5982\u679c\u6709\u7edd\u5bf9\u4f17\u6570\uff0c\u90a3\u4e48\u7edd\u5bf9\u4f17\u6570\u4e00\u5b9a\u80fd\u7559\u5728\u4fe1\u606f\u4e2d\uff0c\u4ee3\u5165\u9a8c\u8bc1\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0d\u540c\u5e2e\u6d3e\u706b\u5e76\uff0c\u90a3\u4e48\u5982\u679c\u6709\u4e00\u4e2a\u8d85\u8fc7\u4e00\u534a\uff0c\u662f\u4e00\u5b9a\u80fd\u5269\u4e0b\u7684\uff08\u4f46\u6ce8\u610f\uff0c\u4e0d\u8d85\u8fc7\u4e00\u534a\u4e5f\u53ef\u80fd\u5269\u4e0b\uff0c\u6240\u4ee5\u8981\u5e26\u5165\u9a8c\u8bc1\uff09\u3002\u5f88\u660e\u663e\u8fd9\u4e2a\u4fe1\u606f\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5e8f\u5217\u5206\u522b\u7ef4\u62a4\u5176\u4fe1\u606f\uff0c\u4fbf\u53ef\u4ee5\u5728 $O(1)$ \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u5bf9\u4e24\u4e2a\u5e8f\u5217\u7684\u5408\u5e76\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u663e\u7136\u662f $O(m\\log n)$ \u7684\u4e86\u3002\n\n\u56e0\u4e3a\u4ee3\u7801\u6709\u5927\u91cf\u91cd\u590d\uff0c\u6240\u4ee5\u53ea\u653e\u548c\u4e0a\u9762\u4e0d\u4e00\u6837\u7684\u90e8\u5206\u4e86\uff0c\u4e0d\u96be\u53d1\u73b0\u6b63\u89e3\u771f\u7684\u6bd4\u4e71\u641e\u7b80\u6d01\u5f88\u591a\u3002\n\n```cpp\ninline pair<int,ll> merge_info(int val1, ll cnt1, int val2, ll cnt2){\n    if(val1 == val2) return {val1,cnt1+cnt2};\n    if(cnt1 > cnt2) return {val1,cnt1-cnt2};\n    if(cnt1 < cnt2) return {val2,cnt2-cnt1};\n    return {0,0};\n}\ninline void pushup(int now){\n    auto res = merge_info(lson.val, lson.cnt, rson.val, rson.cnt);\n    t[now].val = res.first, t[now].cnt = res.second;\n}\n                   \nvector<int> ids;\n\nint Solve(){\n    ids.clear();\n    ll cnt=0,totlen=0,reallen=0;\n    int m,val=0; \n    read(m);\n    for(int i=1,id; i<=m; i++){\n        read(id);\n        ids.push_back(id);\n        totlen += link.len[id];\n        auto res = merge_info(val,cnt,t[root[id]].val,t[root[id]].cnt);\n        val=res.first, cnt=res.second;\n    }\n    if(!cnt) return -1;\n    for(int id : ids) {\n        reallen += query(root[id],1,n+q,val);\n    }\n    if(reallen*2 > totlen) return val;\n    return -1;\n}\n```\n\n\u4e8b\u5b9e\u4e0a\uff0c\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u8fd9\u4e2a\u6b63\u89e3\u548c\u4e0a\u9762\u7684\u4e71\u641e\u8dd1\u7684\u65f6\u95f4\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u751a\u81f3\u4e71\u641e\u603b\u65f6\u95f4\u66f4\u5feb\uff08\u800c\u4e14\u8fd9\u4efd\u4e71\u641e\u5728 CCF \u5c11\u7237\u673a\u4e0a\u8dd1\u7684\u65f6\u95f4\u5c45\u7136\u662f\u4f60\u8c37\u7684 $\\frac23$\uff0c\u5f53\u7136\u6211\u4e0d\u77e5\u9053\u8fd9\u548c\u51fa\u9898\u4eba\u6ca1\u5361\u662f\u5426\u6709\u5f3a\u5173\u8054\uff09\u3002\n\n\u6216\u8bb8\u8fd9\u9053\u9898\u6b63\u662f\u60f3\u544a\u8bc9\u6211\u4eec\uff0c\u4e0d\u8981\u603b\u505a\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5974\u4ec6\uff0c\u4ee3\u7801\u8dd1\u5f97\u5feb\uff0c\u5c31\u884c\u4e86\u3002",
        "postTime": 1661699941,
        "uid": 130256,
        "name": "jia_shengyuan",
        "ccfLevel": 9,
        "title": "[NOI2022] \u4f17\u6570 \u9898\u89e3"
    },
    {
        "content": "\u9001\u54b1\u9000\u5f79\u7684\u9898\uff0c\u4e0d\u591a\u8bb2\u4e86\u554a\u3002\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u4f17\u6570\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u6027\u8d28\uff0c\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u4e00\u534a\u3002\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528\u6469\u5c14\u6295\u7968\u6cd5\uff08\u4e5f\u5373\u5bf9\u62fc\u6d88\u8017\uff09\u3002\n\n\u5148\u8003\u8651\u6dfb\u52a0\u5220\u9664\u64cd\u4f5c\uff1a\u8fd9\u4e2a\u5f88\u597d\u505a\uff0c\u76f4\u63a5\u7ef4\u62a4\u5e8f\u5217\uff0c\u5728\u672b\u5c3e\u6dfb\u52a0\u5220\u9664\u5143\u7d20\u3002\n\n\u7136\u540e\u8003\u8651\u5408\u5e76\uff1a\u5408\u5e76\u5e8f\u5217\u53ef\u4ee5\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u652f\u6301\u5728\u524d\u540e\u52a0\u5165\u5143\u7d20\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u8981\u7ef4\u62a4\u6469\u5c14\u6295\u7968\u6cd5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f17\u6570\u4ee5\u53ca\u8fd9\u4e2a\u4f17\u6570\u5bf9\u62fc\u6d88\u8017\u540e\u5269\u4e0b\u7684\u6b21\u6570\uff0c\u8fd9\u4e2a\u5982\u679c\u53ea\u5728\u540e\u9762\u52a0\u5165\u5220\u9664\u8fd8\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u4f46\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u5019\u6211\u4eec**\u5173\u5fc3\u987a\u5e8f**\uff0c\u8fd9\u6837\u53ef\u80fd\u5728\u524d\u9762\u52a0\u5165\u4e00\u4e9b\u4e1c\u897f\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u7ef4\u62a4\u4e86\u3002\n\n\u4e8b\u5b9e\u4e0a\u6211\u4eec\u53ea\u5173\u5fc3\u8fd9\u4e2a\u5e8f\u5217\u957f\u5565\u6837\uff0c\u548c\u6574\u4e2a\u5e8f\u5217\u6469\u5c14\u6295\u7968\u540e\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u52a8\u6001\u7ef4\u62a4\uff0c\u53ea\u9700\u8981\u5c06\u5de6\u53f3\u4e24\u4e2a\u7ed3\u70b9\u7684\u7ed3\u679c\u5408\u5e76\u770b\u6210\u4e24\u4e2a\u5e8f\u5217\u5408\u5e76\uff0c\u8fd9\u4e2a\u662f\u5f88\u597d\u5904\u7406\u7684\uff0c\u540c\u65f6\u4e5f\u80fd\u5904\u7406\u6389\u52a0\u5165\u4e00\u4e2a\u6570\u548c\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u603b\u4e4b\u53ea\u9700\u8981 $O(\\log n)$ \u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u4e86\u3002\u540c\u65f6\u6469\u5c14\u6295\u7968\u5408\u5e76\u7684\u8bdd\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5e8f\u5217\u8981\u7528\u4e00\u4e2a\u652f\u6301\u5728\u524d\u540e\u4e24\u7aef\u52a0\u5165\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982 ~~`std::deque`~~ `std::list`\u3002\n\n\u6700\u540e\u662f\u67e5\u8be2\u3002\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6469\u5c14\u6295\u7968\u7684\u65b9\u6cd5\u5df2\u7ecf\u544a\u8bc9\u6211\u4eec\u53ef\u4ee5\u652f\u6301\u5e8f\u5217\u5408\u5e76\u6469\u5c14\u6295\u7968\u6cd5\u7684\u7ed3\u679c\uff0c\u4e00\u6837\u7684\u5904\u7406\u5c31\u597d\u4e86\u3002\u6700\u540e\u6c42\u51fa\u6765\u7684\u4f17\u6570\u53ef\u80fd\u4e0d\u662f\u4f17\u6570\uff0c\u8981\u91cd\u65b0\u7b97\u4e00\u904d\u786e\u5b9a\u662f\u5426\u771f\u7684\u662f\u4f17\u6570\u3002\u6ce8\u610f\u8fd9\u91cc\u8981\u5f00 `long long`\u3002\n\n```cpp\nlist<int> a[1000005];\n#define Mm int mid=(l+r)>>1\nint cnt;\nint lc[25000005],rc[25000005];\nint maj[25000005],apc[25000005];\ninline void push_up(int now)\n{\n\tif(apc[lc[now]]==apc[rc[now]])\tmaj[now]=apc[now]=0;\n\telse if(apc[lc[now]]>apc[rc[now]])\tmaj[now]=maj[lc[now]],apc[now]=apc[lc[now]]-apc[rc[now]];\n\telse\tmaj[now]=maj[rc[now]],apc[now]=apc[rc[now]]-apc[lc[now]];\n}\nvoid modify(int l,int r,int &now,int p,int w)\n{\n\tif(!now)\tnow=++cnt;\n\tif(l==r)\n\t{\n\t\tmaj[now]=p;\n\t\tapc[now]+=w;\n\t\tif(!apc[now])\tmaj[now]=0;\n\t\treturn ;\n\t}\n\tMm;\n\tif(p<=mid)\tmodify(l,mid,lc[now],p,w);\n\telse\tmodify(mid+1,r,rc[now],p,w);\n\tpush_up(now);\n}\nint merge(int x,int y,int l,int r)\n{\n\tif(!x || !y)\treturn x|y;\n\tif(l==r)\n\t{\n\t\tapc[x]+=apc[y];\n\t\tif(apc[x])\tmaj[x]=l;\n\t\treturn x;\n\t}\n\tMm;\n\tlc[x]=merge(lc[x],lc[y],l,mid);\n\trc[x]=merge(rc[x],rc[y],mid+1,r);\n\tpush_up(x);\n\treturn x;\n}\nint query(int l,int r,int now,int p)\n{\n\tif(!now)\treturn 0;\n\tif(l==r)\treturn apc[now];\n\tMm;\n\tif(p<=mid)\treturn query(l,mid,lc[now],p);\n\treturn query(mid+1,r,rc[now],p);\n}\nint n,q,N;\nint rt[1000005];\nint seq[500005];\nint main(){\n\tfreopen(\"major4.in\",\"r\",stdin);\n\tfreopen(\"major.out\",\"w\",stdout);\n\tn=read(),q=read(),N=n+q;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tint len=read();\n\t\twhile(len-->0)\n\t\t{\n\t\t\tint x=read();\n\t\t\ta[i].push_back(x);\n\t\t\tmodify(1,N,rt[i],x,1);\n\t\t}\n\t}\n\twhile(q-->0)\n\t{\n\t\tint op=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tint x=read(),y=read();\n\t\t\ta[x].push_back(y);\n\t\t\tmodify(1,N,rt[x],y,1);\n\t\t}\n\t\telse if(op==2)\n\t\t{\n\t\t\tint x=read();\n\t\t\tint c=a[x].back();\n\t\t\ta[x].pop_back();\n\t\t\tmodify(1,N,rt[x],c,-1);\n\t\t}\n\t\telse if(op==3)\n\t\t{\n\t\t\tint mj=0,ct=0;\n\t\t\tint len=read();\n\t\t\tfor(int i=1;i<=len;++i)\n\t\t\t{\n\t\t\t\tint id=read();\n\t\t\t\tseq[i]=id;\n\t\t\t\tint pmj=maj[rt[id]],pnt=apc[rt[id]];\n\t\t\t\tif(!pmj)\tcontinue;\n\t\t\t\tif(!mj)\tmj=pmj,ct=pnt;\n\t\t\t\telse if(mj==pmj)\tct+=pnt;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(ct>pnt)\tct-=pnt;\n\t\t\t\t\telse if(ct<pnt)\tmj=pmj,ct=pnt-ct;\n\t\t\t\t\telse\tmj=ct=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!mj)\n\t\t\t{\n\t\t\t\tputs(\"-1\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tLL siz=0,app=0;\n\t\t\tfor(int i=1;i<=len;++i)\n\t\t\t{\n\t\t\t\tsiz+=LL(a[seq[i]].size());\n\t\t\t\tapp+=query(1,N,rt[seq[i]],mj);\n\t\t\t}\n\t\t\tif(app*2>siz)\twrite(mj),puts(\"\");\n\t\t\telse\tputs(\"-1\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x=read(),y=read(),c=read();\n\t\t\tif(a[x].size()>a[y].size())\n\t\t\t{\n\t\t\t\trt[c]=merge(rt[x],rt[y],1,N);\n\t\t\t\ta[c].swap(a[x]);\n\t\t\t\tfor(auto it=a[y].begin();it!=a[y].end();++it)\ta[c].push_back(*it);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trt[c]=merge(rt[x],rt[y],1,N);\n\t\t\t\ta[c].swap(a[y]);\n\t\t\t\tfor(auto it=a[x].rbegin();it!=a[x].rend();++it)\ta[c].push_front(*it);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1661689430,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u6ce8\u610f\u5408\u5e76\u987a\u5e8f"
    }
]