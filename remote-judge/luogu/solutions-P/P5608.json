[
    {
        "content": "\u9996\u5148\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u975e\u5e38\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u8003\u8651\u5408\u5e76\u4e24\u4e2a\u533a\u95f4 $[l,mid],[mid+1,r]$ \uff0c\u5982\u679c\u662f\u52a0\u6cd5\u5c31\u76f4\u63a5\u52a0\u8d77\u6765\uff1b\u5982\u679c\u662f\u4e58\u6cd5\uff0c\u6536\u5230\u4e58\u6cd5\u5f71\u54cd\u7684\u53ea\u6709\u5de6\u533a\u95f4\u7684\u4e00\u6bb5\u540e\u7f00\u548c\u53f3\u533a\u95f4\u7684\u4e00\u6bb5\u524d\u7f00\u4e58\u79ef\uff0c\u628a\u8fd9\u4e24\u6bb5\u4e58\u8d77\u6765\u518d\u52a0\u4e0a\u5269\u4e0b\u7684\u8d21\u732e\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u3002\n\n\u7136\u540e\u8003\u8651\u533a\u95f4\u4fee\u6539\u7b26\u53f7\uff0c\u53d1\u73b0\u8fd9\u4e2a\u533a\u95f4\u53d8\u6210\u4e86\u533a\u95f4\u548c\u6216\u8005\u533a\u95f4\u4e58\u79ef\uff0c\u90a3\u4e48\u591a\u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\u548c\u3001\u4e58\u79ef\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6700\u540e\u662f\u533a\u95f4\u4fee\u6539\u6570\uff0c\u6539\u5b8c\u6570\u4e4b\u540e\u8fd9\u6bb5\u533a\u95f4\u7684\u6570\u90fd\u4e00\u6837\u4e86\uff0c\u6240\u4ee5\u65b0\u7684\u533a\u95f4\u53d8\u6210\u4e86\u82e5\u5e72\u4e2a\u8fde\u4e58\u6bb5\u7684\u548c\u3002\u800c\u6211\u4eec\u6ce8\u610f\u5230 $1+2+3+\\dots\\sqrt{n}=n$ \uff0c\u6240\u4ee5\u672c\u8d28\u4e0d\u540c\u7684\u8fde\u4e58\u6bb5\u53ea\u6709 $\\sqrt{len}$ \u4e2a\uff0c\u4e8e\u662f\u6211\u4eec\u8bb0\u5f55\u6bcf\u79cd\u957f\u5ea6\u4e3a $d_i$ \u6bb5\u7684\u4e2a\u6570 $ds_i$ \uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97 $\\sum_{i=1}^{cnt}ds_ix^{d_i}$ \u6765\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u662f $O(n\\sqrt{n})$ \u7684\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\uff0c\u8981\u8ba1\u7b97\u8fd9\u4e2a\u5f0f\u5b50\u9700\u8981\u5feb\u901f\u5e42\uff0c\u800c\u5982\u679c\u76f4\u63a5\u5feb\u901f\u5e42\u7684\u8bdd\u4e00\u5b9a\u4f1a\u4f7f\u590d\u6742\u5ea6\u591a\u4e00\u4e2a $\\log$ \uff0c\u800c\u8fd9\u9898\u5149\u901f\u5e42\u7684\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9 $d$ \u6392\u597d\u5e8f\u4e4b\u540e $x^i$ \u4ece $i-1$ \u5feb\u901f\u5e42\u8fc7\u6765\uff0c\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u4f1a\u53bb\u6389\u8fd9\u4e2a $\\log$ \uff0c\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\uff08\u8fd9\u91cc\u5206\u6790\u4e0a\u754c\uff09\u3002\n\n\u73b0\u5728\u6211\u4eec\u6709\u8fd9\u4e2a\u65b9\u7a0b\u7ec4\uff1a\n\n$$\\begin{cases}\\sum_{i=1}^{cnt}x_i=n\\\\\\sum_{i=1}^{cnt}\\log(x_i-x_{i-1})\\le O(\\sqrt{n})\\end{cases}$$\n\n\u8bbe $C_i=x_i-x_{i-1}$ \uff0c\u90a3\u4e48\u53d8\u6210\uff1a\n\n$$\\begin{cases}\\sum_{i=1}^{cnt}C_i\\times i=n\\\\\\sum_{i=1}^{cnt}\\log(C_i)\\le O(\\sqrt{n})\\end{cases}$$\n\n\u7136\u540e\u6709\uff1a\n\n$$\\begin{cases}\\sum_{i=1}^{cnt}C_i\\times i=n\\\\log(\\prod_{i=1}^{cnt}C_i)\\le O(\\sqrt{n})\\end{cases}$$\n\n\u5bf9$\\sum_{i=1}^{cnt}C_i\\times i$\u53d6\u5747\u503c\u4e0d\u7b49\u5f0f\u6709\uff1a\n\n$$cnt!\\prod_{i=1}^{cnt}C_i\\le (\\frac{\\sum_{i=1}^{cnt}C_i\\times i}{cnt})^{cnt}=(\\frac{n}{cnt})^{cnt}$$\n\n\u4e24\u8fb9\u53d6 $\\log$ \u6709\uff1a\n\n$$\\log(\\prod_{i=1}^{cnt}C_i)\\le cnt\\log n -cnt\\log{cnt}-\\log(cnt!)$$\n\n\u56e0\u4e3a\u65af\u7279\u6797\u8fd1\u4f3c\u6709 $n!\\approx\\sqrt{2\\pi n}(\\frac{n}{e})^n$ \uff0c\u4e8e\u662f $\\log(cnt!)=\\frac{1}{2}\\log {2\\pi}+\\frac{1}{2}\\log{cnt}+cnt\\log{cnt}-cnt$ \uff0c\u5e26\u56de\u539f\u5f0f\u5f97\uff1a\n\n$$\\log(\\prod_{i=1}^{cnt}C_i)\\le cnt\\log n-\\frac{1}{2}\\log {2\\pi}-\\frac{1}{2}\\log{cnt}-2cnt\\log{cnt}+cnt$$\n\n\u6700\u5927\u503c\u4e5f\u5c31\u662f\u53f3\u5f0f\u7684\u6700\u5927\u503c\uff0c\u820d\u6389\u90e8\u5206\u5c0f\u91cf\u548c\u5e38\u6570\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a $y$ \u5173\u4e8e $cnt$ \u7684\u65b9\u7a0b\uff1a\n\n$$y=cnt\\log n-2cnt\\log{cnt}+cnt$$\n\n\u6c42\u5bfc\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u6700\u5927\u503c\u662f $\\le \\sqrt{n}$ \u7684\uff0c\u4e8e\u662f\u4e0a\u9762\u7684\u7ed3\u8bba\u5f97\u8bc1\u3002\n\n\u800c\u81f3\u4e8e\u6709\u5e8f\uff0c\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u65f6\u5019\u5f52\u5e76\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**Code**\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <vector>\nconst int N = 1e5;\nconst int M = 317;\nconst int p = 1e9 + 7;\nusing namespace std;\nint a[N + 5],opt[N + 5],n,m,t[N + 5];\nvector <int>::iterator it;\nstruct node\n{\n    int sm,ans,mul,ls,rs,ll,rr,opt,lx,rx;\n    vector <int> d,ds;\n    void init(int x,int op)\n    {\n        sm = ans = mul = ls = rs = lx = rx = x;\n        opt = op;\n        ll = rr = 1;\n    }\n};\nint mypow(int a,int x){int s = 1;for (;x;x & 1 ? s = 1ll * s * a % p : 0,a = 1ll * a * a % p,x >>= 1);return s;}\nstruct Seg\n{\n    node s[N * 4 + 5];\n    int tag[N * 4 + 5],st[N * 4 + 5];\n    #define zrt k << 1\n    #define yrt k << 1 | 1\n    void upd(node &s,node x,node y,int l,int mid,int r)\n    {\n        s.ll = x.ll;\n        s.rr = y.rr;\n        s.ls = x.ls;\n        s.rs = y.rs;\n        s.rx = y.rx;\n        s.lx = x.lx;\n        s.opt = y.opt;\n        s.d.clear();\n        s.ds.clear();\n        if (x.opt)\n        {\n            s.ans = ((1ll * x.rs * y.ls % p + (x.ans - x.rs) % p) % p + (y.ans - y.ls) % p) % p;\n            if (x.ll == mid - l + 1)\n                s.ls = 1ll * x.ls * y.ls % p,s.ll += y.ll;\n            if (y.rr == r - mid)\n                s.rs = 1ll * y.rs * x.rs % p,s.rr += x.rr;\n            s.sm = (x.sm + y.sm) % p;\n            s.mul = 1ll * x.mul * y.mul % p;\n        }\n        else\n        {\n            s.ans = (x.ans + y.ans) % p;\n            s.sm = (x.sm + y.sm) % p;\n            s.mul = 1ll * x.mul * y.mul % p;\n        }\n        int j = 0,vis = (!x.opt),now = x.rr + y.ll;\n        for (int i = 0;i < x.d.size();i++)\n        {\n            if (x.rr == x.d[i] && x.opt)\n            {\n                x.ds[i]--;\n                if (!x.ds[i])\n                    continue;\n            }\n            while (j < y.d.size())\n            {\n                if (y.d[j] > x.d[i])\n                    break;\n                if (y.ll == y.d[j] && x.opt)\n                {\n                    y.ds[j]--;\n                    if (!y.ds[j])\n                    {\n                        j++;\n                        continue;\n                    }\n                }\n                if (!vis && now <= y.d[j])\n                {\n                    if (!s.d.size())\n                        s.d.push_back(now),s.ds.push_back(1);\n                    else\n                        if (s.d[s.d.size() - 1] == now)\n                            s.ds[s.d.size() - 1]++;\n                        else\n                            s.d.push_back(now),s.ds.push_back(1);\n                    vis = 1;\n                }\n                if (!s.d.size())\n                    s.d.push_back(y.d[j]),s.ds.push_back(y.ds[j]);\n                else\n                    if (s.d[s.d.size() - 1] == y.d[j])\n                        s.ds[s.d.size() - 1] += y.ds[j];\n                    else\n                        s.d.push_back(y.d[j]),s.ds.push_back(y.ds[j]);\n                j++;\n            }\n            if (!vis && now <= x.d[i])\n            {\n                if (!s.d.size())\n                    s.d.push_back(now),s.ds.push_back(1);\n                else\n                    if (s.d[s.d.size() - 1] == now)\n                        s.ds[s.d.size() - 1]++;\n                    else\n                        s.d.push_back(now),s.ds.push_back(1);\n                vis = 1;\n            }\n            if (!s.d.size())\n            {\n                s.d.push_back(x.d[i]);\n                s.ds.push_back(x.ds[i]);\n            }\n            else\n                if (s.d[s.d.size() - 1] == x.d[i])\n                    s.ds[s.d.size() - 1] += x.ds[i];\n                else\n                    s.d.push_back(x.d[i]),s.ds.push_back(x.ds[i]);\n        }\n        while (j < y.d.size())\n        {\n            if (y.ll == y.d[j] && x.opt)\n            {\n                y.ds[j]--;\n                if (!y.ds[j])\n                {\n                    j++;\n                    continue;\n                }\n            }\n            if (!vis && now <= y.d[j])\n            {\n                if (!s.d.size())\n                    s.d.push_back(now),s.ds.push_back(1);\n                else\n                    if (s.d[s.d.size() - 1] == now)\n                        s.ds[s.d.size() - 1]++;\n                    else\n                        s.d.push_back(now),s.ds.push_back(1);\n                vis = 1;\n            }\n            if (!s.d.size())\n                s.d.push_back(y.d[j]),s.ds.push_back(y.ds[j]);\n            else\n                if (s.d[s.d.size() - 1] == y.d[j])\n                    s.ds[s.d.size() - 1] += y.ds[j];\n                else\n                    s.d.push_back(y.d[j]),s.ds.push_back(y.ds[j]);\n            j++;\n        }\n        if (!vis)\n            s.d.push_back(now),s.ds.push_back(1);\n    }\n    void upd2(node &s,node x,node y,int l,int mid,int r)\n    {\n        s.ll = x.ll;\n        s.rr = y.rr;\n        s.ls = x.ls;\n        s.rs = y.rs;\n        s.rx = y.rx;\n        s.lx = x.lx;\n        s.opt = y.opt;\n        if (x.opt)\n        {\n            s.ans = ((1ll * x.rs * y.ls % p + (x.ans - x.rs) % p) % p + (y.ans - y.ls) % p) % p;\n            if (x.ll == mid - l + 1)\n                s.ls = 1ll * x.ls * y.ls % p,s.ll += y.ll;\n            if (y.rr == r - mid)\n                s.rs = 1ll * y.rs * x.rs % p,s.rr += x.rr;\n            s.sm = (x.sm + y.sm) % p;\n            s.mul = 1ll * x.mul * y.mul % p;\n        }\n        else\n        {\n            s.ans = (x.ans + y.ans) % p;\n            s.sm = (x.sm + y.sm) % p;\n            s.mul = 1ll * x.mul * y.mul % p;\n        }\n    }\n    node upd1(node x,node y,int l,int mid,int r)\n    {\n        if (x.opt)\n        {\n            x.ans = ((1ll * x.rs * y.ls % p + (x.ans - x.rs) % p) % p + (y.ans - y.ls) % p) % p;\n            if (x.ll == mid - l + 1)\n                x.ls = 1ll * x.ls * y.ls % p,x.ll += y.ll;\n            if (y.rr == r - mid)\n                x.rs = 1ll * y.rs * x.rs % p,x.rr += y.rr;\n            else\n                x.rs = y.rs,x.rr = y.rr;\n            x.sm = (x.sm + y.sm) % p;\n            x.mul = 1ll * x.mul * y.mul % p;\n        }\n        else\n        {\n            x.ans = (x.ans + y.ans) % p;\n            x.sm = (x.sm + y.sm) % p;\n            x.mul = 1ll * x.mul * y.mul % p;\n            x.rs = y.rs;\n            x.rr = y.rr;\n        }\n        x.rx = y.rx;\n        x.opt = y.opt;\n        return x;\n    }\n    void build(int k,int l,int r)\n    {\n        tag[k] = st[k] = -1;\n        if (l == r)\n        {\n            s[k].init(a[l],opt[l]);\n            s[k].d.push_back(1);\n            s[k].ds.push_back(1);\n            return;\n        }\n        int mid = l + r >> 1;\n        build(zrt,l,mid);\n        build(yrt,mid + 1,r);\n        upd(s[k],s[zrt],s[yrt],l,mid,r);\n    }\n    void cha(int k,int l,int r,int z)\n    {\n        if (z == 0)\n        {\n            s[k].ans = s[k].sm;\n            s[k].ls = s[k].lx;\n            s[k].rs = s[k].rx;\n            s[k].ll = s[k].rr = 1;\n            s[k].d.clear();\n            s[k].ds.clear();\n            s[k].d.push_back(1);\n            s[k].ds.push_back(r - l + 1);\n        }\n        else\n        {\n            s[k].ans = s[k].mul;\n            s[k].ls = s[k].rs = s[k].mul;\n            s[k].ll = s[k].rr = r - l + 1;\n            s[k].d.clear();\n            s[k].ds.clear();\n            s[k].d.push_back(r - l + 1);\n            s[k].ds.push_back(1);\n        }\n        tag[k] = z;\n        s[k].opt = z;\n    }\n    void chan(int k,int l,int r,int z)\n    {\n        s[k].lx = s[k].rx = z;\n        st[k] = z;\n        int res = mypow(z,s[k].d[0]);\n        s[k].ans = 1ll * s[k].ds[0] * res % p;\n        for (int i = 1;i < s[k].d.size();i++)\n        {\n            res = 1ll * res * mypow(z,s[k].d[i] - s[k].d[i - 1]) % p;\n            s[k].ans = (s[k].ans + 1ll * s[k].ds[i] * res % p) % p;\n        }\n        s[k].ls = mypow(z,s[k].ll);\n        s[k].rs = mypow(z,s[k].rr);\n        s[k].mul = mypow(z,r - l + 1);\n        s[k].sm = 1ll * z * (r - l + 1) % p;\n    }\n    void pushdown(int k,int l,int r,int mid)\n    {\n        if (st[k] != -1)\n        {\n            chan(zrt,l,mid,st[k]);\n            chan(yrt,mid + 1,r,st[k]);\n            st[k] = -1;\n        }\n        if (tag[k] != -1)\n        {\n            cha(zrt,l,mid,tag[k]);\n            cha(yrt,mid + 1,r,tag[k]);\n            tag[k] = -1;\n        }\n    }    \n    node query(int k,int l,int r,int x,int y)\n    {\n        if (l >= x && r <= y)\n            return s[k];\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x > mid)\n            return query(yrt,mid + 1,r,x,y);\n        if (y <= mid)\n            return query(zrt,l,mid,x,y);\n        return upd1(query(zrt,l,mid,x,y),query(yrt,mid + 1,r,x,y),l,mid,r);\n    }\n    void modify1(int k,int l,int r,int x,int y,int z)\n    {\n        if (l >= x && r <= y)\n        {\n            cha(k,l,r,z);\n            return;\n        }\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            modify1(zrt,l,mid,x,y,z);\n        if (y > mid)\n            modify1(yrt,mid + 1,r,x,y,z);\n        upd(s[k],s[zrt],s[yrt],l,mid,r);\n    }\n    void modify2(int k,int l,int r,int x,int y,int z)\n    {\n        if (l >= x && r <= y)\n        {\n            chan(k,l,r,z);\n            return;\n        }\n        int mid = l + r >> 1;\n        pushdown(k,l,r,mid);\n        if (x <= mid)\n            modify2(zrt,l,mid,x,y,z);\n        if (y > mid)\n            modify2(yrt,mid + 1,r,x,y,z);\n        upd2(s[k],s[zrt],s[yrt],l,mid,r);\n    }\n}tree;\ninline long long read()\n{\n\tlong long X(0);int w(0);char ch(0);\n\twhile (!isdigit(ch)) w |= ch == '-',ch = getchar();\n\twhile (isdigit(ch)) X = (X << 3) + (X << 1) + (ch ^ 48),ch = getchar();\n\treturn w ? -X : X;\n}\nint main()\n{\n    n = read();m = read();\n    long long x;\n    for (int i = 1;i <= n;i++)\n    {\n        x = read();\n        a[i] = x % p;\n    }\n    for (int i = 1;i < n;i++)\n        opt[i] = read();\n    tree.build(1,1,n);\n    int op,l,r;\n    node ans;\n    while (m--)\n    {\n        op = read();l = read();r = read();\n        if (op == 3)\n        {\n            ans = tree.query(1,1,n,l,r);\n            printf(\"%d\\n\",(ans.ans + p) % p);\n        }\n        else\n            if (op == 2)\n            {\n                x = read();\n                tree.modify1(1,1,n,l,r,x);\n            }\n            else\n            {\n                x = read();\n                x %= p;\n                tree.modify2(1,1,n,l,r,x);\n            }\n    }\n    return 0;\n}\n```",
        "postTime": 1610535320,
        "uid": 73231,
        "name": "eee_hoho",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5608 \u3010[Ynoi2013] \u6587\u5316\u8bfe\u3011"
    },
    {
        "content": "[Link](https://www.luogu.com.cn/problem/P5608)\n\n---\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bd2\u7624\u9898\u3002\n\n\u5bf9\u4e8e\u8282\u70b9 $[l,r]$ \uff0c\u8fd9\u4e2a\u8282\u70b9\u8868\u793a $[l,r]$ \u7b97\u5f0f\u7b54\u6848 $res$ \u4e0e $r$ \u53f3\u8fb9\u7684\u7b26\u53f7\u3002\n\n\u9898\u76ee\u4e2d\u8981\u533a\u95f4\u8d4b\u503c\uff0c\u533a\u95f4\u7b26\u53f7\u8d4b\u503c\uff0c\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u8003\u8651\u3002\n\n### 1. \u533a\u95f4\u7b26\u53f7\u8d4b\u503c\u4e3a\u52a0\n\n\u6bcf\u4e2a\u8282\u70b9\u989d\u5916\u7ef4\u62a4\u533a\u95f4\u548c $sum$\uff0c\u6253\u6807\u8bb0\u65f6 $res=sum$ \u3002\n\n### 2. \u533a\u95f4\u7b26\u53f7\u8d4b\u503c\u4e3a\u4e58\n\n\u6bcf\u4e2a\u8282\u70b9\u989d\u5916\u7ef4\u62a4\u533a\u95f4\u4e58\u79ef $mul$\uff0c\u6253\u6807\u8bb0\u65f6 $res=mul$ \u3002\n\n### 3. \u533a\u95f4\u8d4b\u503c\n\n\u8fd9\u4e2a\u624d\u662f\u6700\u6076\u5fc3\u7684\u3002\u3002\n\n\u5982\u679c\u533a\u95f4\u4e2d\u6709 $cnt[i]$ \u4e2a\u8fde\u4e58\u6bb5\uff0c\u6b64\u6b21\u8d4b\u503c\u7684\u6570\u4e3a $x$ \uff0c\u90a3\u4e48 $res$ \u8981\u66f4\u65b0\u4e3a $\\sum_{i=1}^{len} x^i cnt[i]$ \u3002\n\n\u4e8e\u662f\u6bcf\u4e2a\u8282\u70b9\u8981\u7ef4\u62a4\u6bcf\u4e2a $cnt[i]$ \uff0c\u4f46\u8fd9\u6837\u4f1a\u7a7a\u95f4\u7206\u70b8\u3002\n\n\u8003\u8651\u6839\u53f7\u5206\u6cbb\uff0c\u6709\u70b9\u50cf \t[Ynoi2015]\u76fc\u541b\u52ff\u5fd8 \u7684\u5957\u8def\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u5bf9\u4e8e $i \\le \\sqrt{len} $ \uff0c\u76f4\u63a5\u5f00 $cnt$ \u6570\u7ec4\uff1b\n\n\u5bf9\u4e8e $i> \\sqrt{len}$ \uff0c\u8fd9\u79cd\u8fde\u4e58\u6bb5\u4e0d\u4f1a\u8d85\u8fc7 $\\sqrt{len}$ \u4e2a\uff0c\u5f00\u4e00\u4e2a vector \u4e22\u8fdb\u53bb\u3002\n\n\u6bcf\u6b21 pushup \u5c31\u628a\u5de6\u53f3\u513f\u5b50\u7684 $cnt$ \u4e0e vector \u5408\u5e76\u8fdb\u6765\u3002\n\n### \u5176\u4ed6\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\n\n\u5f53\u5de6\u53f3\u513f\u5b50\u4e2d\u95f4\u662f\u4e58\u53f7\uff0c\u5c31\u8981\u5220\u6389 2 \u4e2a\u77ed\u4e00\u70b9\u7684\u8fde\u4e58\u6bb5\uff0c\u518d\u52a0\u4e00\u4e2a\u957f\u7684\u8fde\u4e58\u6bb5\u3002\u3002\n\n\u4e8e\u662f\u8fd8\u8981\u7ef4\u62a4\u533a\u95f4\u6700\u5de6\u7684\u6570 $lx$\uff0c\u6700\u5de6\u8fde\u4e58\u6bb5\u7684\u957f\u5ea6\u3001\u4e58\u79ef $llen,lmul$ \uff0c\u6700\u53f3\u8fde\u4e58\u6bb5\u7684\u957f\u5ea6\u3001\u4e58\u79ef $rlen,rmul$ \u3002\n\n\u5728 pushup \u65f6\u5408\u5e76\u5373\u53ef\u3002\n\n\u6bcf\u6b21 pushup $O(\\sqrt n)$ \uff0c\u6bcf\u6b21\u4fee\u6539\uff1a$O(\\sqrt n)+O(\\sqrt {n/2})+O(\\sqrt {n/4})\\cdots=O(\\sqrt n)$\u3002\n\n\u7136\u540e\u6781\u5176\u96be\u5199\uff0c\u5199\u4e86 [5.8KB \u4ee3\u7801](https://www.luogu.com.cn/paste/xwtpris8) \uff08\n\n\u6211\u7684laji\u4ee3\u7801\u6709\u65f6\u8981\u5f00\u6d1b\u8c37 O2 \u624d\u80fd\u8fc7\uff08\n\n\u4e00\u4e2a\u7ec6\u8282\uff1a\u5982\u679c\u5f00\u4e86\u6307\u9488\u6570\u7ec4\uff0c\u5982 `int *cnt; cnt=new int[mx+1];` \u90a3\u4e0d\u80fd\u7528 memset \u6e05\u7a7a\uff0c\u5fc5\u987b\u5faa\u73af\u6e05\u7a7a\u3002",
        "postTime": 1608341659,
        "uid": 151935,
        "name": "Rainbow_qwq",
        "ccfLevel": 0,
        "title": "P5608 \u3010[Ynoi2013]\u6587\u5316\u8bfe\u3011"
    },
    {
        "content": "> update on 2021.8.23: \u4fee\u6b63\u4e86\u8bc1\u9519\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002  \n> update on 2021.8.22: \u4f18\u5316\u4e86\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n[\u5728\u6211\u7684\u535a\u5ba2\u4e2d\u9605\u8bfb](https://www.macesuted.cn/article/lg5608/)\n\n---\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5608)\n\n## \u9898\u76ee\u5927\u610f\n\n\u73b0\u5728\u6709\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217 $\\{a_1,~a_2,\\dots,~a_n\\}$ \u548c\u4e00\u4e2a\u8fd0\u7b97\u7b26\u5e8f\u5217 $\\{p_1,~p_2,\\dots,~a_{n-1}\\}$\u3002\n\n\u5b9a\u4e49 $w(l,~r)$ \u8868\u793a $a_l~p_l~a_{l+1}~p_{l+1}~\\dots~a_{r-1}~p_{r-1}~a_r$ \u5bf9 $10^9+7$ \u53d6\u6a21\u540e\u7684\u7ed3\u679c\u3002\n\n\u73b0\u6709 $m$ \u4e2a\u64cd\u4f5c\uff1a\n\n1. \u5c06 $a_l \\sim a_r$ \u4fee\u6539\u4e3a $x$\u3002\n2. \u5c06 $p_l \\sim p_r$ \u4fee\u6539\u4e3a $x$\u3002\n3. \u6c42 $w(l,~r)$ \u7684\u503c\u3002\n\n$1 \\le n,~m \\le 10^5,~1 \\le a_i < 2^{32},~p_i \\in \\{+,~\\times\\}$\n\n## \u5206\u6790\n\n\u8003\u8651\u6211\u4eec\u5982\u4f55\u66b4\u529b\u8ba1\u7b97 $w(l,~r)$\uff0c\u6211\u4eec\u4f1a\u5148\u5c06 $[l,~r]$ \u533a\u95f4\u5207\u5206\u4e3a\u82e5\u5e72\u6ee1\u8db3\u6bcf\u6bb5\u5185\u6240\u6709\u7b26\u53f7\u5747\u4e3a $\\times$ \u7684\u6781\u957f\u6bb5\u3002\u5982 $1+3\\times5\\times7+9\\times11$ \u5c06\u88ab\u5206\u5272\u4e3a $[1],~[3,~5,~7],~[9,~11]$\u3002\u5206\u5272\u5b8c\u540e\u6211\u4eec\u5bf9\u6bcf\u4e2a\u6781\u957f\u6bb5\u6c42\u51fa\u6bb5\u5185\u4e58\u79ef\uff0c\u518d\u5c06\u6240\u6709\u6bb5\u7684\u7ed3\u679c\u52a0\u8d77\u6765\u5373\u4e3a\u6211\u4eec\u6240\u6c42\u7684 $w(l,~r)$\u3002\n\n\u5148\u8003\u8651\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\u53ea\u6709\u67e5\u8be2\u64cd\u4f5c\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\u533a\u95f4\u6211\u4eec\u9700\u8981\u77e5\u9053\u533a\u95f4\u5185\u6240\u6709\u6781\u957f\u6bb5\u7684\u4e58\u79ef\u4e4b\u548c\uff0c\u5bb9\u6613\u60f3\u5230\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7ef4\u62a4\u5bf9\u5e94\u533a\u95f4\u7684\u6700\u5de6\u7aef\u6781\u957f\u6bb5\u4e58\u79ef\uff0c\u6700\u53f3\u7aef\u6781\u957f\u6bb5\u4e58\u79ef\u548c\u5176\u4ed6\u6781\u957f\u6bb5\u4e58\u79ef\u4e4b\u548c\u3002\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u4fe1\u606f\u65f6\u5224\u65ad\u5de6\u7ed3\u70b9\u7684\u6700\u53f3\u7aef\u6781\u957f\u6bb5\u4e0e\u53f3\u7ed3\u70b9\u7684\u6700\u5de6\u7aef\u6781\u957f\u6bb5\u662f\u5426\u80fd\u591f\u8fde\u63a5\u5373\u53ef\u3002\n\n\u8003\u8651\u52a0\u5165 1 \u64cd\u4f5c\uff0c\u5bf9 $a$ \u5e8f\u5217\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4f53\u73b0\u4e3a\u5bf9 $O(\\log n)$ \u4e2a\u533a\u95f4\u7684\u6574\u6bb5\u4fee\u6539\u64cd\u4f5c\u3002\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ed3\u70b9\uff0c\u5f53\u4ed6\u5bf9\u5e94\u7684\u533a\u95f4\u88ab\u6574\u6bb5\u4fee\u6539\u540e\u5176\u6240\u6709\u6781\u957f\u6bb5\u5de6\u53f3\u7aef\u70b9\u5747\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u800c\u6240\u6709\u6781\u957f\u6bb5\u7684\u6bb5\u5185\u4e58\u79ef\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6876\u7ef4\u62a4\u5176\u6240\u6709\u975e\u6700\u5de6\u7aef\u4e5f\u975e\u6700\u53f3\u7aef\u7684\u6781\u957f\u6bb5\u957f\u5ea6\uff0c\u5728\u5c06\u8be5\u8282\u70b9\u6574\u6bb5\u4fee\u6539\u4e3a $x$ \u65f6\u53ea\u9700\u8981\u5c06\u7b54\u6848\u66f4\u65b0\u4e3a $\\sum_{i} x^{i} \\times midLen[i]$ \u5373\u53ef\u3002\u540c\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u8bb0\u5f55\u6700\u5de6\u7aef\u6781\u957f\u6bb5\u957f\u5ea6\u548c\u6700\u53f3\u7aef\u6781\u957f\u6bb5\u957f\u5ea6\uff0c\u8fd9\u6837\u5728\u5408\u5e76\u7ebf\u6bb5\u6811\u7ed3\u70b9\u4fe1\u606f\u65f6\u5373\u53ef\u5c06\u5de6\u7ed3\u70b9\u7684\u6700\u53f3\u7aef\u6781\u957f\u6bb5\u4e0e\u53f3\u7ed3\u70b9\u7684\u6700\u5de6\u7aef\u6781\u957f\u6bb5\u5408\u5e76\u540e\u6784\u6210\u7684\u65b0\u6781\u957f\u6bb5\u957f\u5ea6\u52a0\u5165\u6876\u4e2d\u3002\n\n\u8003\u8651\u52a0\u5165 2 \u64cd\u4f5c\uff0c\u540c\u6837\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5bf9 $p$ \u5e8f\u5217\u7684\u533a\u95f4\u4fee\u6539\u5728\u7ebf\u6bb5\u6811\u4e0a\u4f53\u73b0\u4e3a\u5bf9 $O(\\log n)$ \u4e2a\u533a\u95f4\u7684\u6574\u6bb5\u4fee\u6539\u64cd\u4f5c\u3002\u7531\u4e8e\u4fee\u6539\u4e3a $+$ \u548c\u4fee\u6539\u4e3a $\\times$ \u7684\u60c5\u51b5\u4e0d\u540c\uff0c\u6211\u4eec\u5206\u5f00\u8ba8\u8bba\uff1a\n\n1. \u6574\u6bb5\u4fee\u6539\u4e3a $+$\uff1a \u4fee\u6539\u540e\u8be5\u533a\u95f4\u5185\u4f1a\u4ea7\u751f $len$ \u4e2a\u957f\u4e3a $1$ \u7684\u6781\u957f\u6bb5\uff0c$ans$ \u5c06\u53d8\u4e3a $\\sum_{i=l+1}^{r-1} a_i$\u3002\u4e3a\u6b64\u5bf9\u6bcf\u4e2a\u8282\u70b9\u6211\u4eec\u7ef4\u62a4\u6574\u6bb5\u5143\u7d20\u548c\u4ee5\u5feb\u901f\u7ef4\u62a4\u6b64\u4fee\u6539\u64cd\u4f5c\u3002\n2. \u6574\u6bb5\u4fee\u6539\u4e3a $\\times$\uff1a \u4fee\u6539\u540e\u8be5\u533a\u95f4\u5185\u4f1a\u4ea7\u751f $1$ \u4e2a\u957f\u4e3a $len$ \u7684\u6781\u957f\u6bb5\uff0c\u6b64\u65f6\u8be5\u6781\u957f\u6bb5\u7684\u4e58\u79ef\u4e3a $\\prod_{i=l}^{r} a_i$\u3002\u4e3a\u6b64\u5bf9\u6bcf\u4e2a\u8282\u70b9\u6211\u4eec\u7ef4\u62a4\u6574\u6bb5\u5143\u7d20\u4e58\u79ef\u4ee5\u5feb\u901f\u7ef4\u62a4\u6b64\u4fee\u6539\u64cd\u4f5c\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e0a\u8ff0\u6240\u6709\u4fe1\u606f\u5373\u53ef\uff0c\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\times \\log n + m \\times n \\times \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\times \\log n)$\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u65e0\u6cd5\u901a\u8fc7\u6b64\u9898\u3002\n\n### \u4f18\u5316 1\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7ed3\u70b9\uff0c\u5176\u533a\u95f4\u5185\u6240\u6709\u6781\u957f\u6bb5\u7684\u957f\u5ea6\u4e4b\u548c\u4e3a $len$\uff0c\u56e0\u6b64\u6700\u591a\u53ea\u4f1a\u5b58\u5728 $\\sqrt {len}$ \u79cd\u4e0d\u540c\u7684\u6781\u957f\u6bb5\u957f\u5ea6\uff0c\u5c06\u76f8\u540c\u957f\u5ea6\u7684\u6781\u957f\u6bb5\u7684\u4fe1\u606f\u5728\u4e00\u8d77\u5b58\u50a8\uff0c\u4f7f\u7528\u5927\u5c0f\u4e3a $\\sqrt {len}$ \u7684 `vector` \u5b58\u50a8\u5373\u53ef\u3002\n\n\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6 $O(n + m \\times \\sqrt n \\times \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u65e0\u6cd5\u901a\u8fc7\u6b64\u9898\u3002\n\n### \u4f18\u5316 2\n\n\u5728\u533a\u95f4\u4fee\u6539\u5143\u7d20\u503c\u65f6\u6211\u4eec\u5bf9 $O(\\sqrt n)$ \u4e2a\u957f\u5ea6\u90fd $O(\\log n)$ \u6c42\u8be5\u957f\u5ea6\u5bf9\u5e94\u533a\u95f4\u4fee\u6539\u540e\u7684\u4e58\u79ef\u3002\u8003\u8651\u5b58\u50a8\u8fde\u7eed\u6bb5\u957f\u5ea6\u65f6\u6309\u8fde\u7eed\u6bb5\u957f\u5ea6\u5347\u5e8f\u5b58\u50a8\uff0c\u9700\u8981\u5bf9\u7b2c $i$ \u4e2a\u957f\u5ea6\u6c42\u503c\u65f6\u4ece\u7b2c $i-1$ \u4e2a\u957f\u5ea6\u5bf9\u5e94\u7684\u7b54\u6848\u8f6c\u79fb\u8fc7\u6765\u3002\u56e0\u4e3a $O(\\sum_{i} \\log (a_i - a_{i-1})) = O(\\log a_n) = O(\\sqrt len)$\uff0c\u6240\u4ee5\u82b1\u5728\u5bf9 $O(\\sqrt n)$ \u4e2a\u957f\u5ea6\u6c42\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f6c\u4e3a $O(\\sqrt n)$\u3002\n\n\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6 $O(n + m \\times \\sqrt n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n\u4e5f\u53ef\u4ee5\u8003\u8651\u4ee5\u6070\u5f53\u5757\u957f\u5bf9\u7ebf\u6bb5\u6811\u5e95\u5c42\u8fdb\u884c\u5206\u5757\u4ee5\u7ee7\u7eed\u51cf\u5c11\u7a7a\u95f4\u5360\u7528\u3002\n\n## \u4ee3\u7801\n\n[View on GitHub](https://github.com/Macesuted/Code/blob/main/Luogu/5608.cpp)\n",
        "postTime": 1628857057,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "LG5608"
    },
    {
        "content": "### \u96f6\u3001\u524d\u8a00\n\n\u8fd9\u9053\u9898\u65e2\u5361\u7a7a\u95f4\uff0c\u53c8\u5361\u65f6\u95f4\uff0c\u8fd8\u8981\u7ef4\u62a4\u4e00\u5806\u53d8\u91cf\uff0c\u5c5e\u5b9e\u6bd2\u7624\u3002\n\n\u4e0d\u8fc7\uff0c\u8fd9\u9053\u9898\u7ed9\u51fa\u4e86\u5f88\u591a\u5b50\u4efb\u52a1\uff0c\u4e5f\u5f15\u5bfc\u4e86\u6211\u4eec\u505a\u8fd9\u9053\u9898\u3002\n\n\u90a3\u4e48\uff0c\u5c31\u5f00\u59cb\u5427\u3002\n\n> \u4efb\u4f55\u4e00\u4e2a\u4f1f\u5927\u7684\u601d\u60f3\uff0c\u90fd\u6709\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u5f00\u59cb\u3002\n\n### \u4e00\u3001\u4e0d\u8003\u8651\u4fee\u6539\n\n\u4e0d\u8003\u8651\u4fee\u6539\u7684\u8bdd\uff0c\u5c31\u662f\u4e00\u9053\u5927\u81f4\u4e3a\u7eff\u9898\u96be\u5ea6\u7684\u7ebf\u6bb5\u6811\u9898\u76ee\u3002\n\n\u4e0d\u8fc7\uff0c\u5728\u5408\u5e76\u7ebf\u6bb5\u6811\u65f6\uff0c\u9700\u8981\u4e00\u70b9\u64cd\u4f5c\u3002\n\n\u8003\u8651\u8fd9\u6761\u7b97\u5f0f\uff1a$1\\times2\\times3+4$\u3002\n\n\u7ebf\u6bb5\u6811\u4f1a\u5206\u4e3a\u5f88\u591a\u6bb5\uff0c\u8fd9\u91cc\u6211\u4eec\u5206\u6210 $2$ \u6bb5\uff0c\u5176\u4e2d\u5de6\u6bb5\u662f $1\\times2$\uff0c\u53f3\u6bb5\u662f $3+4$\u3002\n\n\u663e\u7136\uff0c\u76f4\u63a5\u52a0\u4e0a\u4e24\u6bb5\u7684\u7ed3\u679c\u662f\u80af\u5b9a\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u8003\u8651\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u4e24\u6bb5\u4e2d\u95f4\u7684\u8fd0\u7b97\u7b26\u4e3a $+$\uff08\u4ee3\u53f7 $0$\uff09\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u76f8\u52a0\uff1b\u5426\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u6bb5\u7684**\u5de6\u7aef\u6781\u957f\u8fde\u4e58\u6bb5**\u548c**\u53f3\u7aef\u6781\u957f\u8fde\u4e58\u6bb5**\u7684\u7ed3\u679c\u3002\u8fd9\u6837\uff0c\u5728\u5408\u5e76\u65f6\uff0c\u7ed3\u679c\u4e3a**\u5de6\u6bb5\u7ed3\u679c**\u52a0**\u53f3\u6bb5\u7ed3\u679c**\u51cf**\u5de6\u6bb5\u53f3\u7aef\u6781\u957f\u8fde\u4e58\u6bb5\u7ed3\u679c**\u51cf**\u53f3\u6bb5\u5de6\u7aef\u6781\u957f\u8fde\u4e58\u6bb5\u7ed3\u679c**\u52a0**\u5de6\u6bb5\u53f3\u7aef\u6781\u957f\u8fde\u4e58\u6bb5\u7ed3\u679c\u4e58\u53f3\u6bb5\u5de6\u7aef\u6781\u957f\u8fde\u4e58\u6bb5\u7ed3\u679c**\u3002\n\n\u5728\u770b\u4e0b\u53bb\u4e4b\u524d\uff0c\u8bf7\u60a8\u601d\u8003\uff0c\u5982\u4f55\u5408\u5e76\u5de6\u7aef\u6781\u957f\u8fde\u4e58\u6bb5\u7ed3\u679c\u548c\u53f3\u7aef\u6781\u957f\u8fde\u4e58\u6bb5\u7ed3\u679c\uff1f\u601d\u8003\u9898\u7b54\u6848\u53ef\u4ee5\u53c2\u89c1\u4ee3\u7801\u3002\n\n\u4e0b\u8868\u5c55\u793a\u4e86\u6211\u4eec\u5e94\u8be5\u7ef4\u62a4\u7684\u53d8\u91cf\u548c\u793a\u4f8b\u3002\u4e0b\u8868\u4e2d\u201c\u5de6\u6bb5\u201d\u3001\u201c\u53f3\u6bb5\u201d\u548c\u201c\u603b\u6bb5\u201d\u7684\u6570\u5b57\u4ee5\u4e0a\u65b9\u7684\u7b97\u5f0f\u4e3a\u4f8b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/momece82.png)\n\n\u6ce8\u610f\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u7b97\u5f0f\u7684\u53f3\u4fa7\u6ca1\u6709\u8fd0\u7b97\u7b26\uff08\u672c\u6bb5\u53f3\u7aef\u70b9\u4e3a $n$\uff09\u65f6\uff0c\u624d\u4e0d\u7528\u5b58\u50a8\u8fd0\u7b97\u7b26\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5b50\u4efb\u52a1\u7684\u4ee3\u7801\u5199\u4e0b\u6765\u4e86\u3002\u63a5\u4e0b\u6765\u7684\u5b50\u4efb\u52a1\u7684\u4ee3\u7801\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u4fee\u6539\u3002\n\n\u5982\u679c\u60a8\u8fd8\u662f\u6709\u70b9\u61f5\uff0c\u8bf7\u53c2\u8003\u6211\u7684\u4ee3\u7801\uff1a[\u70b9\u6b64\u4f20\u9001](https://www.luogu.com.cn/paste/owri8kpo)\u3002\n\n\u606d\u559c\uff01\u60a8\u73b0\u5728\u5df2\u7ecf\u83b7\u5f97\u4e86 $5$ \u5206\u7684\u597d\u6210\u7ee9\uff01\n\n\u597d\uff0c\u63a5\u4e0b\u6765\uff0c\u5411\u9ed1\u9898\u6ee1\u5206\u8fdb\u53d1\uff01\n\n### \u4e8c\u3001\u53ea\u4fee\u6539\u8fd0\u7b97\u7b26\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u6bb5\u7b97\u5f0f\u53f3\u4fa7\u7684\u8fd0\u7b97\u7b26\u3002\u663e\u7136\u6700\u53f3\u7aef\u7684\u6bb5\u7684\u53f3\u4fa7\u6ca1\u6709\u8fd0\u7b97\u7b26\uff0c\u4e0d\u8fc7\u6211\u4eec\u4e0d\u5fc5\u8003\u8651\u8fd9\u4e2a\uff0c\u56e0\u4e3a\u5728\u4ee3\u7801\u4e2d\u4e5f\u4e0d\u4f1a\u8c03\u7528\u3002\n\n\u6211\u4eec\u591a\u7ef4\u62a4\u4e0b\u8868\u4e2d\u7684\u4fe1\u606f\u3002\u793a\u4f8b\u7b97\u5f0f\u4e0e\u4e0a\u4e00\u4e2a\u5b50\u4efb\u52a1\u7684\u7b97\u5f0f\u76f8\u540c\uff0c\u4e3a $1\\times2\\times3+4$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/8g6r8zu9.png)\n\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u628a\u65b0\u589e\u7684\u4ee3\u7801\u5199\u4e0b\u6765\u4e86\u3002\u606d\u559c\uff0c\u60a8\u7684\u6210\u7ee9\u63d0\u5347\u5230\u4e86 $24$ \u5206\u3002\n\n### \u4e09\u3001\u4fee\u6539\u6570\u503c\n\n\u8fd9\u662f\u6574\u9053\u9898\u6700\u6076\u5fc3\u7684\u90e8\u5206\u4e4b\u4e00\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a `vector`\uff0c\u5355\u9879\u7c7b\u578b\u4e3a `pair<int,int>`\uff0c\u7528\u4e8e\u5b58\u50a8\u82e5\u5e72\u4e2a\u4e8c\u5143\u7ec4 $(a,b)$\u3002\u8868\u793a\uff1a\u957f\u5ea6\u4e3a $a$ \u7684\u8fde\u4e58\u6bb5\uff0c\u6709 $b$ \u4e2a\u3002\u5408\u5e76\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f52\u5e76\u7b97\u6cd5\uff0c\u4fdd\u6301 `vector` \u4e2d\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u7684\u7b2c\u4e00\u9879\u6709\u5e8f\u4e14\u552f\u4e00\u3002\n\n\u5728\u4fee\u6539\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c`vector` \u5c06\u4f1a\u88ab\u6e05\u7a7a\uff0c\u518d\u6839\u636e\u8fd0\u7b97\u7b26\u66f4\u65b0\u5b83\u3002\u8bf7\u60a8\u601d\u8003\uff0c\u66f4\u65b0\u540e\u7684 `vector` \u6709\u591a\u5c11\u9879\uff1f\u4e24\u79cd\u8fd0\u7b97\u7b26\u5206\u522b\u5bf9\u5e94\u4ec0\u4e48\u4e8c\u5143\u7ec4\uff1f\n\n\u8fd9\u91cc\u7ed9\u51fa\u601d\u8003\u7684\u7b54\u6848\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pfjrerm8.png)\n\n\u66f4\u65b0\u7684\u90e8\u5206\u5f88\u597d\u7406\u89e3\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nres.all.clear();//\u5148\u6e05\u7a7a\u603b\u6bb5\uff0c\u521d\u59cb\u5316\u3002\nItor it1=a.all.begin(),it2=b.all.begin();//\u5b9a\u4e49\u8fed\u4ee3\u5668\uff0cItor\u4f7f\u7528\u5b8f\u5b9a\u4e49\u7b80\u5316\uff0c\u5bf9\u5e94vector<pair<int,int> >::iterator \u3002\nItor ed1=a.all.end(),ed2=b.all.end();\nwhile(it1!=ed1&&it2!=ed2)//\u5f52\u5e76\n{\n\tif((*it1).first<(*it2).first)\n\t{\n\t\tres.all.push_back((*it1));\n\t\tit1++;\n\t}\n\telse if((*it1).first>(*it2).first)\n\t{\n\t\tres.all.push_back((*it2));\n\t\tit2++;\n\t}\n\telse\n\t{\n\t\tres.all.push_back(make_pair((*it1).first,(*it1).second+(*it2).second));\n\t\tit1++;\n\t\tit2++;\n\t}\n}\nwhile(it1!=ed1)\n{\n\tres.all.push_back(make_pair((*it1).first,(*it1).second));\n\tit1++;\n}\nwhile(it2!=ed2)\n{\n\tres.all.push_back(make_pair((*it2).first,(*it2).second));\n\tit2++;\n}\nif(a.rop)//\u7279\u6b8a\u5904\u7406\u4e2d\u95f4\u7684\u90e8\u5206\n{\n\tItor it=lower_bound(res.all.begin(),res.all.end(),make_pair(a.rlen,0));\n\tit->second--;\n\tif(!(it->second))\n\t{\n\t\tres.all.erase(it);\n\t}\n\tit=lower_bound(res.all.begin(),res.all.end(),make_pair(b.llen,0));\n\tit->second--;\n\tif(!(it->second))\n\t{\n\t\tres.all.erase(it);\n\t}\n\tint nlen=a.rlen+b.llen;\n\tit=lower_bound(res.all.begin(),res.all.end(),make_pair(nlen,0));\n\tif(it!=res.all.end()&&(*it).first==nlen)//\u5df2\u6709\n\t{\n\t\t(*it).second++;\n\t}\n\telse//\u65b0\u589e\n\t{\n\t\tres.all.insert(it,make_pair(nlen,1));\n\t}\n}\n```\n\n\u5230\u4e86\u4fee\u6539\u6570\u503c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u8fd9\u4e9b\u6570\u636e\u4ee5\u53ca\u4e0a\u9762\u63d0\u5230\u7684\u6570\u636e\u91cd\u65b0\u7b97\u51fa `sum`\u3001`lsum`\u3001`rsum` \u7b49\u5185\u5bb9\u7684\u503c\u4e86\u3002\n\n\u606d\u559c\uff0c\u60a8\u5df2\u7ecf\u6709 $90$ \u5206\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u51c6\u5907\u4f18\u5316\u5427\uff01\n\n### \u56db\u3001\u4f18\u5316\n\n`vector` \u8fd8\u662f\u592a\u6162\u4e86\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u6570\u7ec4\u3002\n\n\u4f46\u662f\uff0c\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\u4e00\u5b9a\u4f1a\u7a7a\u95f4\u8d85\u9650\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\u7684\u8fde\u4e58\u6570\u636e\uff0c\u6211\u4eec\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n1. \u8fde\u4e58\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $\\sqrt{len}$\u3002\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u653e\u5728\u4e00\u4e2a**\u4f7f\u7528 `new` \u52a8\u6001\u5f00\u51fa\u6765\u7684\u6570\u7ec4**\u91cc\uff0c\u65e2\u8282\u7701\u4e86\u65f6\u95f4\uff0c\u53c8\u8282\u7701\u4e86\u7a7a\u95f4\u3002\n\n2. \u8fde\u4e58\u957f\u5ea6\u5927\u4e8e $\\sqrt{len}$\u3002\u8fd9\u4e9b\u6570\u636e\u7684\u6570\u91cf\u4e0d\u4f1a\u5927\u4e8e $\\sqrt{len}$ \u4e2a\uff0c\u53ef\u4ee5\u653e\u5728\u4e00\u4e2a `vector<int>` \u91cc\u3002\u601d\u8003\uff1a\u4e3a\u4ec0\u4e48\u6bcf\u4e00\u9879\u7684\u7c7b\u578b\u4ece `pair` \u53d8\u6210\u4e86 `int`\uff1f\u5e94\u5982\u4f55\u4fee\u6539\u4ee3\u7801\uff1f\n\n\u8fde\u4e58\u957f\u5ea6\u5927\u4e8e $\\sqrt{len}$ \u65f6\uff0c\u8fd9\u4e9b\u6570\u636e\u7684\u6570\u91cf\u4e0d\u4f1a\u5927\u4e8e $\\sqrt{len}$ \u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u9ad8\u3002\u4f46\u662f\uff0c\u5982\u679c\u518d\u7528 `pair` \u7684\u8bdd\uff0c\u4f1a\u5360\u7528\u592a\u591a\u7a7a\u95f4\u3002\n\n\u6b64\u65f6\uff0c`vector<int>` \u91cc\u7684\u6570\u636e\u53ef\u4ee5\u6709\u91cd\u590d\u4e86\uff0c\u4e00\u4e2a\u6570\u636e\u7684\u6570\u503c\u4ee3\u8868\u8fde\u4e58\u957f\u5ea6\uff0c\u51fa\u73b0\u6b21\u6570\u4ee3\u8868\u540c\u4e00\u8fde\u4e58\u957f\u5ea6\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5f53\u7136\uff0c\u4f9d\u7136\u8981\u6709\u5e8f\u3002\n\n\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u4ee3\u7801\u91cc\u4f7f\u7528\u4e86\u5e42\u6765\u5904\u7406\u4fee\u6539\u6570\u503c\u7684\u60c5\u51b5\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a\n\n```cpp\nvoid execvaldown(int o,long long x)\n{\n\tx%=MOD;\n\ttree[o].lazyval=x;\n\ttree[o].addsum=x*tree[o].len%MOD;\n\ttree[o].mulsum=qpow(x,tree[o].len);//\u6ce8\u610f\u8fd9\u884c\n\ttree[o].lval=tree[o].rval=x;\n\ttree[o].lsum=qpow(x,tree[o].llen);//\u6ce8\u610f\u8fd9\u884c\n\ttree[o].rsum=qpow(x,tree[o].rlen);//\u6ce8\u610f\u8fd9\u884c\n\ttree[o].sum=0;\n\tItor it=tree[o].all.begin();\n\tItor ed=tree[o].all.end();\n\twhile(it!=ed)\n\t{\n\t\ttree[o].sum+=qpow(x,(*it).first)*(*it).second%MOD;//\u6ce8\u610f\u8fd9\u884c\n\t\ttree[o].sum%=MOD;\n\t\tit++;\n\t}\n}\n```\n\n\u8fd9\u8fd8\u4e0d\u591f\u3002\u5feb\u901f\u5e42\u4f9d\u7136\u4e0d\u591f\u5feb\uff0c\u5149\u901f\u5e42\u7a7a\u95f4\u4f1a\u70b8\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u591a\u6b21\u4f7f\u7528\u7684\u5e42\uff0c\u5e95\u6570\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u4ee3\u7801\u91cc\u5b58\u50a8 `from`\u3001`now` \u548c `cache` \u4e09\u4e2a\u53d8\u91cf\uff0c\u4fdd\u8bc1 $from^{now}\\bmod1000000007=cache$\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u4e00\u6b21\u66f4\u65b0\u4e4b\u5185\u590d\u7528\u4e4b\u524d\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u5e95\u6570\u53d8\u5316\u6216 `now` \u592a\u5927\u65f6\uff0c\u53ef\u4ee5\u4e22\u6389\u4e4b\u524d\u7684\u7f13\u5b58\uff0c\u91cd\u65b0\u8ba1\u7b97\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u5feb\u901f\u8bfb\u5165\u548c\u5feb\u901f\u5220\u9664\uff0c\u8fdb\u4e00\u6b65\u63d0\u901f\u3002\n\n[\u8fd9\u4f4d\u795e\u7287](https://www.luogu.com.cn/user/387840)\u544a\u8bc9\u6211\uff0c\u5c3d\u53ef\u80fd\u5c06\u51fd\u6570\u653e\u5728\u7ed3\u6784\u4f53\u91cc\uff0c\u6bd4\u5982\uff0c\u4e0b\u9762\u4e24\u6bb5\u4ee3\u7801\uff0c\u6700\u4e0b\u9762\u7684\u66f4\u5feb\u3002\u6211\u6ca1\u6709\u8003\u8bc1\uff0c\u5927\u5bb6\u770b\u770b\u5c31\u597d\u3002\n\n```cpp\nstruct Tree\n{\n    int l,r;\n    int sum;\n}tree[105];\nvoid update(o)\n{\n    tree[o].sum=tree[o<<1].sum+tree[o<<1|1].sum;\n}\n//\u8c03\u7528\u65f6\nupdate(1);\n```\n\n\u53ef\u4ee5\u6539\u6210\uff1a\n\n```cpp\nstruct Tree\n{\n    int l,r;\n    int sum;\n    void update(Tree &a,Tree &b)\n    {\n        sum=a.sum+b.sum;\n    }\n}tree[105];\n//\u8c03\u7528\u65f6\ntree[1].update(tree[o<<1],tree[o<<1|1]);\n```\n\n\u6700\u7ec8\u4ee3\u7801\u653e\u4e8e[\u526a\u8d34\u677f](https://www.luogu.com.cn/paste/owri8kpo)\u672b\u5c3e\u3002\n\n\u606d\u559c\uff0c\u60a8\u62ff\u4e0b\u4e86\u4e00\u9053\u9ed1\u9898\uff01\u5982\u679c\u60a8\u6709\u54ea\u91cc\u56f0\u60d1\uff0c\u6b22\u8fce\u79c1\u4fe1\u4ea4\u6d41\u3002",
        "postTime": 1675495796,
        "uid": 387836,
        "name": "dengzijun",
        "ccfLevel": 5,
        "title": "P5608\u9898\u89e3"
    }
]