[
    {
        "content": "## \u5e73\u8861\u6811\u662f\u4ec0\u4e48\uff1f\u521d\u4e00\u515a\u65e0\u6cd5\u7406\u89e3\uff01\n~~\uff08\u7136\u800c\u73b0\u5728\u5df2\u7ecf\u662f\u4e00\u4e2a\u521d\u4e8c\u4e86\uff0c\u53ea\u80fd\u8bf4\u7565\u61c2\u5e73\u8861\u6811\uff09~~\n\n\u672c\u9898\u4f7f\u7528 \u4e24\u79cd\u4f18\u5148\u961f\u5217\uff1a\u5927\u9876\u5806\u548c\u5c0f\u9876\u5806 \u5373\u53ef\u89e3\u51b3\uff0c\u6bd4\u5e73\u8861\u6811\u597d\u7406\u89e3\u4f46\u4e0d\u80fd\u4fdd\u8bc1\u6bd4\u5e73\u8861\u6811\u5feb\uff0c\u5177\u4f53\u601d\u8def\u548c\u697c\u4e0b\u67d0\u7bc7\u9898\u89e3\u7c7b\u4f3c\uff0c\u4f46\u662f\u8fd9\u91cc\u6211\u53ea\u5c06 ADD \u51fd\u6570\u7684\u53c2\u6570\u5b58\u5728\u6570\u7ec4\u91cc\uff0c\u800c GET \u51fd\u6570\u8f93\u5165\u5c31\u5f53\u5373\u5904\u7406\u3002\u9610\u660e\u4e00\u4e0b\u601d\u8def\u5427\uff1a\u7528\u5c0f\u9876\u5806\u7ef4\u62a4\u7b2c i \u5927\u7684\u503c\uff0c\u90a3\u4e48\u7b2c i \u5927\u4ee5\u524d\u7684\u6570\u5462\uff1f\u5b58\u5728\u5927\u9876\u5806\u91cc\uff0c\u4e0e\u5c0f\u9876\u5806\u72ec\u7acb\u3002GET \u51fd\u6570\u7684\u6570\u91cf\u51b3\u5b9a\u4e86\u5927\u9876\u5806\u9650\u5236\u7684\u5927\u5c0f\u3002\u7b2c\u4e00\u6b21 GET\uff0c\u5927\u9876\u5806\u4e0d\u5f00\u653e\uff0c\u6570\u76f4\u63a5\u653e\u5165\u5c0f\u9876\u5806\uff0c\u56e0\u6b64\u7b2c i \u5927\uff08\u5373\u7b2c 1 \u5927\uff09\u7684\u503c\u5c31\u662f\u90a3\u4e2a\u6570\uff1b\u7b2c\u4e8c\u6b21 GET\uff0c\u5927\u9876\u5806\u7684\u5927\u5c0f\u589e\u52a0\u4e00\uff0c\u6570\u8fdb\u5165\u5c0f\u9876\u5806\u524d\u5148\u770b\u770b\u80fd\u4e0d\u80fd\u88ab\u5927\u9876\u5806\u5bb9\u4e0b\uff0cpush \u8fdb\u5927\u9876\u5806\uff0c\u5c06\u5927\u9876\u5806\u7684\u961f\u9996\u79fb\u5165\u5c0f\u9876\u5806\uff08\u5207\u52ff\u5fd8\u8bb0 pop \u6389\u5927\u9876\u5806\u7684\u961f\u9996\uff09\uff0c\u6b64\u65f6\u5c0f\u9876\u5806\u961f\u9996\u662f\u7b2c 2 \u5927\u7684\u3002\u4f9d\u6b64\u7c7b\u63a8\u3002\u56e0\u6b64\uff0c\u7b2c i \u6b21 GET\uff0c\u5927\u9876\u5806\u7684\u5927\u5c0f\u4e3a i - 1\uff0c\u4e00\u65e6\u5927\u9876\u5806\u7684\u5927\u5c0f\u8d85\u8fc7 i - 1\uff0c\u961f\u9996\u5c31\u79fb\u5165\u5c0f\u9876\u5806\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u6b64\u65f6\u5c0f\u9876\u5806\u7684\u961f\u9996\u5c31\u662f\u7b2c i \u5927\u7684\u6570\u3002\n\n```cpp\n#include <cstdio>\n#include <queue>\n#define Qmax priority_queue<int>\n#define Qmin priority_queue<int,vector<int>,greater<int> >\n#define f(i , a , b) for(int i=(a) ; i <= (b) ; i++)\nusing namespace std;\ninline int Input(){\n    char C=getchar();\n    int N=0 , F=1;\n    while(('0' > C || C > '9') && (C != '-')) C=getchar();\n    if(C == '-') F=-1 , C=getchar();\n    while('0' <= C && C <= '9') N=(N << 1)+(N << 3)+(C - 48) , C=getchar();\n    return F*N; \n} //\u9a97\u65f6\u95f4\u7684\u8bfb\u5165\u4f18\u5316 QAQ\nint main(){\n    int a[200001];\n    Qmax A;\n    Qmin B;\n    int n=Input() , m=Input() , r=1 , q;\n    f(i , 1 , n) a[i]=Input();\n    f(i , 1 , m){\n        q=Input();\n        f(j , r , q){\n            A.push(a[j]);\n            if(A.size() == i) B.push(A.top()) , A.pop(); //\u8d85\u8fc7\u5927\u5c0f\uff0c\u79fb\u9664\u5143\u7d20\n        }\n        r=q+1;\n        printf(\"%d\\n\" , B.top()); //\u8f93\u51fa\u6bcf\u6b21 GET \u7684\u7b54\u6848\n        A.push(B.top()) , B.pop(); //\u4e3a\u4e0b\u4e00\u6b21\u7684 GET \u4f5c\u51c6\u5907\uff0c\u586b\u6ee1\u5c0f\u9876\u5806\u7684\u7a7a\u95f4\n    }\n    return 0;\n}\n```",
        "postTime": 1499605530,
        "uid": 26673,
        "name": "Sooke",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u697c\u4e0b\u597d\u591adalao QAQ\n\n\u6211\u7684\u65b9\u6cd5\u662f\u7528\u5806\u89e3\n\n\u5f53\u7136\u666e\u901a\u7684\u5806\u6392\u5e8f\u66b4\u529b\u6a21\u62df\u662f\u65e0\u6cd5\u901a\u8fc7\u7684\uff0830\u5206\uff09\n\n\u4fbf\u6709\u4e00\u79cd\u601d\u8def\n\n\u6709\u4e24\u4e2a\u5806h1\u3001h2\n\nh2\u50a8\u5b58\u6574\u4e2a\u5e8f\u5217\u7684\u524di\u4e2a\u6700\u5c0f\u503c\uff0c\u4fdd\u8bc1h2\u7684\u5927\u5c0f\u6c38\u8fdc\u7b49\u4e8ei\uff0c\u5927\u6839\u5806\uff0c\u6839\u5373\u4e3a\u6bcf\u6b21\u9700\u8981Get\u7684\u503c\n\nh1\u50a8\u5b58\u5e8f\u5217\u5269\u4e0b\u90e8\u5206\u7684\u503c\uff0c\u5c0f\u6839\u5806\n\n\u6bcf\u4e00\u6b21\u64cd\u4f5c\u5c31\u662f\u5148\u6309\u7167u(i)\uff08\u5728\u6211\u7684\u4ee3\u7801\u91cc\u7528\u7684\u662fb[i]\uff09Put(a[j])\u8fdb\u5230h1\n\n\u7136\u540e\u56e0\u4e3a\u6709u\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u5f80h2 Put\u4e00\u4e2a\u6570\uff0c\u5373\u4e3ah1\u7684\u6700\u5c0f\u503c\n\n\u4f46\u662f\u8fd9\u65f6\u5019\u6709\u53ef\u80fdh1\u4e2d\u4f1a\u6709\u6bd4h2\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u5c0f\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u7684h2\u662f\u4e0d\u7b26\u5408\u89c4\u5b9a\u7684\uff0c\u4e8e\u662f\u53cd\u590d\u5224\u65adh1\u548ch2\u7684\u6839\u8282\u70b9\uff08\u4e00\u4e2a\u662fh1\u6700\u5c0f\uff0c\u4e00\u4e2a\u662fh2\u6700\u5927\uff09\uff0c\u5982\u679ch1\u7684\u6839\u8282\u70b9\u5c0f\u4e8eh2\u7684\u6839\u8282\u70b9\uff0c\u5219\u53d6\u51fah1\u548ch2\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c06h1\u7684\u6839\u8282\u70b9Put\u8fdbh2\uff0ch2\u7684\u6839\u8282\u70b9Put\u8fdbh1\uff0c\u76f4\u5230h2\u7684\u6839\u8282\u70b9\u5c0f\u4e8eh1\u4e3a\u6b62\n\n\u8f93\u51fah2\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u6211\u7528\u7684\u662f\u81ea\u5df1\u624b\u5199\u7684\u5806\u6a21\u677f\uff08\u65e0\u804a\u5199\u7684\uff09\uff0c\u4e0d\u662fSTL\u7684\u3002\n\nHeap<typename,size>\u4ee3\u8868\u5b9a\u4e49\u4e00\u4e2atypename\u4e3a\u7c7b\u578b\uff0c\u5927\u5c0f\u4e3asize\u7684\u5806\n\nh1.Put(x);\u4ee3\u8868\u5f80h1\u8fd9\u4e2a\u5806\u91cc\u9762Put\u8fdbx\u8fd9\u4e2a\u6570\n\nh1.(1);\u4ee3\u8868\u53d6\u51fah1\u7684\u6839\u8282\u70b9\uff0c\u8fd4\u56de\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u3002\n\nh1[i];\u5c31\u4ee3\u8868h1\u7684\u7b2ci\u4e2a\u6570\uff0c\u6839\u8282\u70b9\u662f1\u3002\n\nh1.size\u4ee3\u8868h1\u7684\u5927\u5c0f\uff0c\u6ca1\u6709\u8282\u70b9\u4e3a0,1\u4e2a\u8282\u70b9\u4e3a1\u2026\u2026\n\n\u8be5\u4ee3\u7801\u8017\u65f6360ms\uff0c\u7a7a\u95f43566KB\n\n\uff08\u611f\u89c9\u8fd9\u9898\u96be\u5ea6\u6ca1\u6709\u90a3\u4e48\u5927\uff09\n\n\nHeap<int,5000005> h1,h2(1);  //\u5b9a\u4e49h1\u4e3a\u5c0f\u6839\u5806\uff0ch2\u4e3a\u5927\u6839\u5806\n\n```cpp\nint a[200005],b[200005];  //\u5b9a\u4e49\u8f93\u5165\u7528\u7684\u6570\u7ec4\nint main()\n{\n    ios::sync_with_stdio(false);  //\u5173\u95ed\u540c\u6b65\uff0c\u4f18\u5316\n    int m,n;\n    cin>>m>>n;//\u8f93\u5165\u5c31\u4e0d\u8bf4\u4e86\n    for(int i=0;i<m;i++)\n        cin>>a[i];//\u8bfb\u5165a[i]\n    for(int i=0;i<n;i++)\n        cin>>b[i];//\u8bfb\u5165u[i]\n    int c,t;\n    for(int i=0,j=0;i<n;i++)\n    {\n        for(;j<b[i];j++)  //Put\u8fdba\u7684\u524d\u51e0\u4e2a\u6570\n            h1.Put(a[j]);\n        c=h1.Get(1);  //\u5728h2\u91cc\u9762\u653e\u5165h1\u7684\u6839\u8282\u70b9\uff0c\u4e3a\u4e86\u4fdd\u8bc1h2\u7684\u5927\u5c0f\u6c38\u8fdc\u7b49\u4e8ei\n        h2.Put(c);\n        while(h1.size>0&&h1[1]<h2[1])  //\u5982\u679ch1\u6709\u8282\u70b9\u5e76\u4e14h1\u7684\u6839\u8282\u70b9\u5c0f\u4e8eh2\u7684\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u8981\u201c\u4ea4\u6362\u201d\n        {\n            t=h2.Get(1);  //\u53d6\u51fah2\u7684\u6839\u8282\u70b9\n            c=h1.Get(1);  //\u53d6\u51fah1\u7684\u6839\u8282\u70b9\n            h1.Put(t);  //\u653e\u5165\u8282\u70b9\n            h2.Put(c);\n        }\n        cout<<h2[1]<<endl;  //\u8f93\u51fa\u7b2ci\u5c0f\u7684\u8282\u70b9\n    }\n    return 0;\n}\n```",
        "postTime": 1513515189,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u53ef\u4ee5\u7528\u4e24\u79cd\u65b9\u6cd5\u5f88\u597d\u5730\u89e3\u51b3  \n\n------------------\n\n## 1.\u5bf9\u9876\u5806  \n\u987e\u540d\u601d\u4e49\uff0c\u5bf9\u9876\u5806\u662f\u4e24\u4e2a\u5806\u7ec4\u6210\u7684\u7279\u6b8a\u7684\u6570\u636e\u7ed3\u6784  \n![](https://cdn.luogu.com.cn/upload/pic/50110.png)  \n~~\u624b\u753b\u6709\u70b9\u4e11~~  \n\u5982\u679c\u8bf4\u4e0a\u9762\u662f\u4e2a\u5c0f\u6839\u5806\uff0c\u4e0b\u9762\u662f\u4e2a\u5927\u6839\u5806\uff0c\u5c0f\u6839\u5806\u7684\u5143\u7d20\u90fd\u5927\u4e8e\u5927\u6839\u5806\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a  \n**\u6bcf\u4e00\u5c42\u8282\u70b9\u4ece\u4e0a\u5f80\u4e0b\u9010\u5c42\u9012\u51cf**  \n\u6240\u4ee5\u5bf9\u4e8e$add$\u64cd\u4f5c\uff0c\u6211\u4eec\u5148\u5c06\u5143\u7d20\u653e\u5165\u4e0b\u9762\u7684\u5927\u6839\u5806\u5185\uff0c\u4ece\u5806\u9876\u4e0d\u65ad\u53d6\u51fa\u5143\u7d20\u653e\u5230\u5c0f\u6839\u5806\u76f4\u5230\u5927\u6839\u5806\u5143\u7d20\u4e2a\u6570\u4e3a$i$,\u8fd9\u6837\u5927\u6839\u5806\u7684\u6839\u5c31\u662f\u7b2ci\u5c0f\u7684\u5143\u7d20\uff0c\u540c\u65f6\u53ef\u4ee5\u4fdd\u8bc1\u5bf9\u9876\u5806\u7684\u6027\u8d28  \n\u540c\u7406\uff0c\u5bf9\u4e8e$get$\u64cd\u4f5c\uff0c\u6211\u4eec\u5148\u8f93\u51fa\u5927\u6839\u5806\u7684\u6839\uff0c\u7136\u540e\u5c06\u5c0f\u6839\u5806\u7684\u6839\u79fb\u5230\u5927\u6839\u5806\uff08\u56e0\u4e3ai\u6bcf\u6b21\u52a0\u4e00\uff0c\u8981\u59cb\u7ec8\u4fdd\u8bc1\u5927\u6839\u5806\u6709i\u4e2a\u5143\u7d20\uff09\uff0c\u8fd9\u6837\u4ecd\u4fdd\u8bc1\u5bf9\u9876\u5806\u7684\u6027\u8d28\u4e0d\u53d8  \n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog_2n)$  \n\u4ee3\u7801\uff08\u4f7f\u7528\u4e86$SLT$,\u5e38\u6570\u8f83\u5927\uff09\uff1a\n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\nint a[200005];\nint main(){    \n    priority_queue<int>A;\n    priority_queue<int,vector<int>,greater<int>>B;\n    int n,m,r=1,q;scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d\",&q);\n        for(int j=r;j<=q;j++){\n            A.push(a[j]);\n            if(A.size()==i)B.push(A.top()),A.pop();\n        }\n        r=q+1;\n        printf(\"%d\\n\",B.top());\n        A.push(B.top()),B.pop();\n    }\n    return 0;\n}\n```\n\n![](https://cdn.luogu.com.cn/upload/pic/50112.png)  \n\n\n\n\n-------------\n\n## 2.\u5e73\u8861\u6811  \n\u5bf9\u4e8e\u63d2\u5165\u548c\u67e5\u627e\uff0c\u6bcf\u4e2a\u5b66\u8fc7\u7684\u5e73\u8861\u6811\u7684OIer\u90fd\u4f1a\u9996\u5148\u60f3\u5230\u5e73\u8861\u6811\uff0c\u9274\u4e8eBST\u6781\u6613\u9000\u5316\uff0c\u6548\u7387\u4e0d\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5e73\u8861\u6811\u6765\u89e3\u51b3  \n~~\uff08\u5982\u679c\u54ea\u4f4d\u795e\u7287\u7528\u4e0d\u52a0\u4f18\u5316BST\u505a\u51fa\u6765\u5728\u4e0b\u53ea\u80fdorz\u4e86~~  \n\n\u7b80\u5355\u7684\u63d2\u5165\u548c\u67e5\u627e\u64cd\u4f5c\uff0cTreap\u80fd\u591f\u5f88\u4f18\u96c5\u7684\u8dd1\u5b8c\u8fd9\u9053\u9898\uff0c\u5982\u679c\u8bf4\u5927\u4f6c\u4ec0\u4e48splay\u554a\uff0c\u4ec0\u4e48AVL\u6811\u554a\uff0c\u4ec0\u4e48\u7ea2\u9ed1\u6811\u554a\uff0c\u90fd\u53ef\u4ee5\u5982\u679c\u4e0d\u5acc\u9ebb\u70e6  \n$STL set$\u5e94\u8be5\u4e5f\u53ef\u4ee5\uff0c\u6ca1\u6709\u8bd5\uff08\u8fd9\u4e2a\u4eba\u592a\u61d2\u4e86\n\n\n\u4ee3\u7801\uff1a  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint l,r,data,size,val,cnt;\n}a[200010];\nint pop=0,root,n,INF=(1<<30)-1+(1<<30);\nint New(int data){\n\tpop++;\n\ta[pop].val=rand();\n\ta[pop].data=data;\n\ta[pop].size=1;\n\ta[pop].cnt=1;\n\ta[pop].l=a[pop].r=0;\n\treturn pop;\n}\nvoid updata(int p){\n\ta[p].size=a[a[p].l].size+a[a[p].r].size+a[p].cnt;\n}\nvoid build(){\n\troot=New(-INF);a[root].r=New(INF);\n\ta[0].cnt=a[0].data=a[0].size=a[0].val=0;\n\tupdata(root);\n}\nvoid zig(int &p){\n\tint q=a[p].l;\n\ta[p].l=a[q].r;\n\ta[q].r=p;p=q;\n\tupdata(a[p].r);\n\tupdata(p);\n}\nvoid zag(int &p){\n\tint q=a[p].r;\n\ta[p].r=a[q].l;\n\ta[q].l=p;p=q;\n\tupdata(a[p].l);\n\tupdata(p);\n}\nvoid insert(int &p,int data){\n\tif(p==0){\n\t\tp=New(data);\n\t\treturn;\n\t}\n\tif(data==a[p].data){\n\t\ta[p].cnt++;\n\t\tupdata(p);\n\t\treturn;\n\t}\n\tif(data<a[p].data){\n\t\tinsert(a[p].l,data);\n\t\tif(a[a[p].l].val>a[p].val)zig(p);\n\t\telse updata(p);\n\t\treturn;\n\t}\n\tif(data>a[p].data){\n\t\tinsert(a[p].r,data);\n\t\tif(a[a[p].r].val>a[p].val)zag(p);\n\t\telse updata(p);\n\t\treturn;\n\t}\n}\nvoid remove(int &p,int data){\n\tif(p==0)return;\n\tif(a[p].data==data){\n\t\tif(a[p].cnt>1){\n\t\t\ta[p].cnt--;\n\t\t\tupdata(p);\n\t\t\treturn;\n\t\t}\n\t\tif(a[p].l||a[p].r){\n\t\t\tif(a[p].r==0||a[a[p].l].val>a[a[p].r].val)\n\t\t\t  zig(p),remove(a[p].r,data);\n\t\t\telse zag(p),remove(a[p].l,data);\n\t\t\tupdata(p);return;\n\t\t}\n\t\tp=0;return;\n\t}\n\tif(data<a[p].data)remove(a[p].l,data);\n\telse remove(a[p].r,data);updata(p);\n}\nint getpre(int data){\n\tint ans=1;\n\tint p=root;\n\twhile(p){\n\t\tif(data>a[p].data){\n\t\t\tif(a[p].data>=a[ans].data)\n\t\t\t  ans=p;\n\t\t\tp=a[p].r;\n\t\t}\n\t\telse p=a[p].l;\n\t}\n\treturn a[ans].data;\n}\nint getnext(int data){\n\tint ans=2;\n\tint p=root;\n\twhile(p){\n\t\tif(data<a[p].data){\n\t\t\tif(a[p].data<=a[ans].data);\n\t\t\t  ans=p;\n\t\t\tp=a[p].l;\n\t\t}\n\t\telse p=a[p].r;\n\t}\n\treturn a[ans].data;\n}\nint getrankbyval(int p,int val){\n\tif(p==0)return 0;\n\tif(val==a[p].data)return a[a[p].l].size+1;\n\tif(val<a[p].data)return getrankbyval(a[p].l,val);\n\treturn getrankbyval(a[p].r,val)+a[a[p].l].size+a[p].cnt;\n}\nint getvalbyrank(int p,int rank){\n\tif(p==0)return -INF;\n\tif(a[a[p].l].size>=rank)return getvalbyrank(a[p].l,rank);\n\tif(a[a[p].l].size+a[p].cnt>=rank)return a[p].data;\n\treturn getvalbyrank(a[p].r,rank-a[p].cnt-a[a[p].l].size);\n}\nint u[200005],b[200005];\nint main()\n{\n\tbuild();\n\tint n,m;scanf(\"%d%d\",&n,&m);\n\tint top=0,s=1;\n\tfor(int i=1;i<=n;i++)\n\t  scanf(\"%d\",&u[i]);\n\tfor(int j=1;j<=m;j++)\n\t{\n\t\tscanf(\"%d\",&b[j]);\n\t\twhile(s<=b[j])insert(root,u[s]),s++;\n\t\ttop++;\n\t\tprintf(\"%d\\n\",getvalbyrank(root,top+1));\n\t}\n\treturn 0;\n}\n```   \n\n![](https://cdn.luogu.com.cn/upload/pic/50115.png)  \n\n\n\u5e73\u8861\u6811\u8dd1\u5f97\u597d\u50cf\u5feb\u4e00\u70b9\u2026\u2026",
        "postTime": 1548670380,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u6ca1\u6709\u7ffb\u5230\u4f18\u7f8e\u7684\u5806\u7684\u4ee3\u7801\uff0c\u7279\u610f\u5199\u4e86\u4e00\u4efd\n\n\u8981\u70b9\u662f\u5f00\u4e24\u4e00\u4e2a\u5927\u6839\u5806\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u770b\u4e0b\u4ee3\u7801\u5b9e\u73b0\u5e94\u8be5\u5c31\u80fd\u61c2\u4e86\n\n \n \n\n```\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <cstdio>\nusing namespace std; \nconst int MAXN = 500000+10;\npriority_queue<int,vector<int>,greater<int> >s; // \u5c0f\u6839\u5806 \npriority_queue<int,vector<int>,less<int> >b;// \u5927\u6839\u5806\n \nint a[MAXN],u[MAXN];\nint main()\n{\n\tint m,n;\n\tcin>>m>>n;\n\tfor(int i=1;i<=m;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&u[i]);\n\tint p=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\twhile(p<u[i])\n\t\t{\n\t\t\tp++;\n\t\t\tb.push(a[p]);\n\t\t\ts.push(b.top());\n\t\t\tb.pop();\n\t\t}\n\t\tprintf(\"%d\\n\",s.top());\n\t\tb.push(s.top());\n\t\ts.pop();\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1533632565,
        "uid": 8137,
        "name": "sxb_201",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "### \u601d\u8def\uff1a\n\n$\\quad$\u672c\u9898\u662f\u4e00\u9053\u5bf9\u9876\u5806\u7684\u9898\u76ee\uff0c\u8bdd\u8bf4\u6ca1\u4eba\u5199\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u9898\u89e3\u554a\uff01\u4e8e\u662f\u5b89\u5229\u4e00\u6ce2**\u6743\u503c\u7ebf\u6bb5\u6811**\u3002\u3002\u3002\n\n\u3000\u3000\u6743\u503c\u7ebf\u6bb5\u6811\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6545\u540d\u601d\u4e49\u5b83\u7684\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u6743\u503c(\u5373\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u67d0\u4e2a\u786e\u5b9a\u7684\u6570)\uff0c\u5b83\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u6c42\u51fa\u6574\u4e2a\u533a\u95f4\u4e2d\u7684\u7b2c$k$\u5c0f\u7684\u6570\uff08**\u6ce8\u610f\u662f\u6574\u4e2a\u533a\u95f4**\uff0c\u4e0d\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u5176\u5b9e\u5c31\u662f\u5f31\u5316\u7684\u4e3b\u5e2d\u6811\uff0c\u6216\u8005\u8bf4\u4e3b\u5e2d\u6811\u5c31\u662f\u591a\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff09\u3002\n\n\u3000\u3000\u62ff\u672c\u9898\u505a\u4f8b\u9898\u3002\n\n\u3000\u3000\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u539f\u6570\u7ec4\u79bb\u6563\u5316(\u56e0\u4e3a\u6570\u592a\u5927\uff0c\u7a7a\u95f4\u5f00\u4e0d\u4e0b)\uff0c\u8fd9\u6837\u79bb\u6563\u540e\u6700\u591a\u6709$200000$\u4e2a\u6570\uff0c\u5c31\u80fd\u5efa\u6811\u7528\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u6bcf\u4e2a\u6570\u4e86\u3002\n\n\u3000\u3000\u518d\u8bb2\u8bb2\u63d2\u5165\u64cd\u4f5c\uff0c\u5176\u5b9e\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u5bf9\u4e8e\u79bb\u6563\u540e\u7684\u6570\u6bcf\u6b21\u627e\u5230\u5b83\u6240\u5728\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4f7f\u5176\u6743\u503c$+1$\uff08\u8bf4\u660e\u8fd9\u4e2a\u6570\u51fa\u73b0\u4e86\u4e00\u6b21\uff09\uff0c\u5e76\u7ef4\u62a4\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u51fa\u73b0\u7684\u4e2a\u6570\uff08\u5373\u533a\u95f4\u6c42\u548c\uff09\u3002\n\n\u3000\u3000\u7136\u540e\u8be2\u95ee\u7b2c$k$\u5c0f\u7684\u6570\u65f6\uff0c\u4ece\u6574\u4e2a\u533a\u95f4$[1,n]$\u5f00\u59cb\u9012\u5f52\uff0c\u5f53\u5de6\u513f\u5b50\u533a\u95f4$[l,mid]$\u4e2d\u51fa\u73b0\u7684\u6570\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e$k$\u65f6\uff0c\u67e5\u8be2\u5de6\u513f\u5b50\uff0c\u5426\u5219\u67e5\u8be2\u53f3\u513f\u5b50\u4e2d\u7684\u7b2c$k-sum[l,mid]$\u5c0f\u7684\u6570(\u5373\u5de6\u513f\u5b50\u4e2d\u5df2\u6709$sum[l,mid]<k$\u4e2a\u6570\uff0c\u90a3\u4e48\u6574\u4e2a\u533a\u95f4\u7b2c$k$\u5c0f\u7684\u6570\u5728\u53f3\u513f\u5b50\u91cc\uff0c\u4e14\u662f\u53f3\u513f\u5b50\u4e2d\u7684\u7b2c$k-sum[l,mid]$\u5c0f\u7684\u6570)\uff0c\u5f53\u67e5\u8be2\u5230$l==r$\u65f6\u8fd4\u56de$l$\uff0c\n  \u90a3\u4e48\u7b54\u6848\u5c31\u662f\u79bb\u6563\u524d$l$\u6240\u4ee3\u8868\u7684\u6570$a[l]$\u3002\u8f93\u51fa\u5c31$OK$\u4e86\u3002\n  \n$\\quad$\u6b22\u8fce\u6765\u8e29\u535a\u5ba2[five20](http://www.cnblogs.com/five20/p/8952347.html)\uff08\u849f\u84bb\u5199\u535a\u5ba2\u4e0d\u6613\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff0c\u4e07\u5206\u611f\u8c22\uff01\uff09\n\n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define il inline\n#define ll long long\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\nusing namespace std;\nconst int N=2e5+7;\nint tr[N<<2],n,m,u[N],s[N],cnt=1;\nstruct numm{\n    ll v;int id;\n    bool operator < (numm a){return v<a.v;}\n}a[N];\nil ll gi(){\n    ll a=0;char x=getchar();bool f=0;\n    while((x>'9'||x<'0')&&x!='-')x=getchar();\n    if(x=='-')x=getchar(),f=1;\n    while(x>='0'&&x<='9')a=a*10+x-48,x=getchar();\n    return f?-a:a;\n}\nil void pushup(int rt){tr[rt]=tr[rt<<1]+tr[rt<<1|1];}\nil void update(int u,int l,int r,int rt){\n    if(l==u&&r==u){tr[rt]++;return;}\n    tr[rt]++;\n    int m=l+r>>1;\n    if(u<=m)update(u,lson);\n    else update(u,rson);\n    pushup(rt);\n}\nil int query(int k,int l,int r,int rt){\n    if(l==r)return l;\n    int m=l+r>>1;\n    if(tr[rt<<1]>=k)return query(k,lson);\n    else return query(k-tr[rt<<1],rson);\n}\nint main()\n{\n    n=gi(),m=gi();\n    for(int i=1;i<=n;i++)a[i].v=gi(),a[i].id=i;\n    for(int i=1;i<=m;i++)u[i]=gi();\n    sort(a+1,a+n+1);\n    for(int i=1;i<=n;i++)s[a[i].id]=i;\n    for(int i=1;i<=n;i++){\n        update(s[i],1,n,1);\n        while(i==u[cnt]){\n            printf(\"%lld\\n\",a[query(cnt,1,n,1)].v);\n            ++cnt;\n        }\n    }\n    return 0;\n}\n```\n\n ",
        "postTime": 1524744662,
        "uid": 44000,
        "name": "\u6d45\u8272\u8c03",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u849f\u84bb\u6765\u53d1\u9898\u89e3\u4e86\u3002\u6211\u4ed4\u7ec6\u770b\u4e86\u4e00\u4e0b\u5176\u4ed6\u9898\u89e3\uff0c\u5404\u4f4d\u5de8\u4f6c\u7528\u4e86\u5806\uff0c\u7ea2\u9ed1\u6811\uff0csplay,treap\u4e4b\u7c7b\u7684\u5f3a\u5927\u7b97\u6cd5\uff0c\u8868\u793a\u849f\u84bb\u7684\u6211\u53ea\u4f1a\u53e3\u80e1\u8fd9\u4e9b\u7b97\u6cd5\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u7528\u4e00\u79cd\u6781\u5176\u6613\u7406\u89e3\u7684\u7b97\u6cd5\u2014\u2014\u2014\u2014fhq treap\uff0c\u4f5c\u4e3atreap\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u4e0d\u4ec5\u597d\u7406\u89e3\uff0c\u597d\u7528\uff0c\u8fd8\u80fd\u505a\u5230\u53ef\u6301\u4e45\u5316\uff0c\u771f\u662f\u795e\u7ea7\u7b97\u6cd5\uff08~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1afhq treap\u7684\u6211\uff0c\u4e0d\u4f1a\u4e00\u822ctreap~~\uff09\n\n\u8fdb\u5165\u6b63\u9898\uff0c\u9996\u5148\u6211\u5148\u8bb2\u8bb2fhq treap\u7684\u4e3b\u8981\u601d\u60f3\uff0c\u5b83\u662f\u4e00\u79cd\u975e\u65cb\u8f6c\u7684\u5e73\u8861\u6811\uff0c\u4e0d\u7528\u8003\u8651\u5de6\u65cb\u53f3\u65cb\u7b49~~\u9ebb\u70e6\u60c5\u51b5~~\uff0c\u5b83\u5f88\u66b4\u529b\uff0c\u76f4\u63a5\u9760\u62c6\u6811\uff0c\u5408\u5e76\u6765\u5b9e\u73b0\uff0c\u6709\u70b9\u4e8c\u5206\u7684\u611f\u89c9\uff0c\u5176\u5b9e\u5b83\u5f88\u591a\u64cd\u4f5c\u5c31\u6709\u4e8c\u5206\u601d\u60f3\u3002\n\n\u597d\u4e86\uff0c\u770b\u56fe\uff0c\u6211\u4eec\u6709\u4e00\u9897\u4e8c\u53c9\u6811\n![](https://cdn.luogu.com.cn/upload/pic/25865.png)\n\n\u5f53\u6211\u4eec\u63d2\u51656\u53f7\uff0c\u53d1\u73b0\u5b83\u5931\u8861\u4e86\n![](https://cdn.luogu.com.cn/upload/pic/25867.png )\n\n\u591a\u897f\u592a\uff1f\u5927\u4e08\u592b\n\n\u6211\u4eec\u4e0d\u7528\u65cb\u8f6c\uff0c\u4e0d\u7528\u4ea4\u6362\uff0c\u76f4\u63a5\u62c6\u3002\n\n\u7b2c\u4e00\u4e2a\u91cd\u8981\u64cd\u4f5c\uff1a\u62c6\u6811\uff08split\uff09\uff0c\u6211\u4eec\u5148\u628a\u6811\u5206\u4e3ax,y\u4e24\u90e8\u5206\uff0cx\u7684\u8282\u70b9\u6743\u503c\u2264k\uff0c y\u7684\u8282\u70b9\u7684\u6743\u503c\uff1ek\uff0c\u8981\u63d2\u5165\u4e00\u4e2a\u6570a\u7684\u8bdd\uff0c\u5c31\u628a\u65b0\u7684\u8282\u70b9a\u770b\u505a\u662f\u4e00\u68f5\u6811\uff0c\u5148\u4e0ex\u5408\u5e76\uff0c\u5408\u5e76\u5b8c\u4e4b\u540e\u5c06\u5408\u5e76\u7684\u6574\u4f53\u4e0ey\u5408\u5e76\n\n\u4e0a\u4ee3\u7801\n```cpp\ninline void split(int &x,int &y,int k,int pos)\n{\n    if(!pos)x=y=0;//root=0\u65f6\uff08\u5373\u7b2c\u4e00\u6b21split\uff09 \u6b64\u65f6\u7684x=?,y=?\u5f88\u660e\u663e\u8981\u7ed9\u4ed6\u4eec\u521d\u59cb\u5316 \u5373x=0,y=0\n    else\n    {\n        if(val[pos]<=k)\n        {x=pos;split(son[pos][2],y,k,son[pos][2]);}\n        else\n        {y=pos;split(x,son[pos][1],k,son[pos][1]);}\n        update(pos);\n    }\n}\n```\n\n\u7b2c\u4e8c\u4e2a\u91cd\u8981\u64cd\u4f5c\uff1a\u5408\u5e76\uff08merge\uff09\n\u8fd8\u662f\u4e24\u68f5\u6811x,y\u3002\u5982\u679crand[x]<rand[y] \u6211\u4eec\u5c31\u628ay\u63a5\u5728x\u7684\u53f3\u513f\u5b50\u4e0a \u4f60\u60f3\u5982\u679c\u63a5\u5728\u5de6\u513f\u5b50 \u90a3\u5de6\u513f\u5b50\u7684\u6743\u503c\u5c31\u5927\u4e8e\u7236\u4eb2\u7684\u6743\u503c\u4e86 \u4e0d\u7b26\u5408\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\n\n\u53cd\u4e4b\u540c\u7406\n\n\u5176\u5b9emerge \u8981\u7406\u89e3\u7684\u8bdd\u81ea\u5df1\u753b\u4e24\u9897treap \u7136\u540e\u6a21\u62df\u4e00\u4e0b\u3002\n\n\u4e0a\u4ee3\u7801\n```cpp\ninline int merge(int x,int y)\n{\n    if(x==0||y==0) return x+y;//\u7b2c\u4e00\u6b21\u5408\u5e76\u7684\u60c5\u51b5\n    if(rnd[x]<rnd[y]) \n    {\n        son[x][2]=merge(son[x][2],y);\n        update(x);return x;\n    }\n    else\n    {\n        son[y][1]=merge(x,son[y][1]);\n        update(y);return y;\n    }\n}\n```\n\n\u81f3\u4e8e\u67e5\u6392\u540d\uff08find\uff09\uff0c\u5c31\u662feasy\u7684\u64cd\u4f5c\u4e86\uff0c\u6839\u636e\u5806\u7684\u6027\u8d28\uff0c\u76f4\u63a5\u627e\u53f3\u5b50\u6811\u5927\u5c0f\uff0c\u518d\u53bb\u904d\u5386\u5c31\u597d\u4e86\uff0c\u4e0d\u77e5\u9053\u7684\u53ef\u4ee5\u5148\u53bb\u5b66\u4e60\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u64cd\u4f5c\uff08~~\u5404\u4f4d\u5de8\u4f6c\u80af\u5b9a\u90fd\u4f1a\u4e86~~\uff09\n\nac\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<ctime>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n#define maxn 200010\nusing namespace std;\nint n,val[maxn],rnd[maxn],son[maxn][3],size[maxn],sum_p,m;\n//val\u8bb0\u5f55\u6743\u503c\uff0cson\u8bb0\u5f55\u5de6\u53f3\u5b50\u6811\u5927\u5c0f\uff0csize[i]\u8bb0\u5f55\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u6811\u7684\u5927\u5c0f\nint X1[maxn];\nint flag[maxn];\ninline void read(int &x)//\u5feb\u8bfb\n{\n    x=0;int f=1; \n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {if(ch=='-') f=-1; ch=getchar();}\n    while(ch>='0'&&ch<='9')\n    {x=x*10+ch-'0';ch=getchar();}\n    x*=f;\n}\ninline int newnode(int x)\n{\n    ++sum_p;size[sum_p]=1;\n    val[sum_p]=x;rnd[sum_p]=rand();\n    return sum_p; \n}\ninline void update(int x)\n{\n    size[x]=size[son[x][1]]+size[son[x][2]]+1;//\u52a0\u4e0a\u81ea\u5df1\n}\ninline void split(int &x,int &y,int k,int pos)//x,\u5de6\u5b50\u6811\u7684\u6839(\u6743\u503c\u8f83\u5c0f\u7684),y,\u53f3\u5b50\u6811\u7684\u6839,pos\u4e3a\u73b0\u5728\u7684\u8282\u70b9 \n{\n    if(!pos)x=y=0;//root=0\u65f6\uff08\u5373\u7b2c\u4e00\u6b21split\uff09 \u6b64\u65f6\u7684x=?,y=?\u6240\u4ee5\u521d\u59cb\u5316x=0,y=0\n    else\n    {\n        if(val[pos]<=k)\n        {x=pos;split(son[pos][2],y,k,son[pos][2]);}\n        else\n        {y=pos;split(x,son[pos][1],k,son[pos][1]);}\n        update(pos);\n    }\n}\ninline int merge(int x,int y)//\u4fdd\u8bc1y\u5b50\u6811\u6743\u503c\u5927\u4e8ex\u5b50\u6811 \n{\n    if(x==0||y==0) return x+y;//\u7b2c\u4e00\u6b21\u5408\u5e76\u7684\u60c5\u51b5\n    if(rnd[x]<rnd[y]) //\u6bd4rand\u5927\u5c0f\n    {\n        son[x][2]=merge(son[x][2],y);\n        update(x);return x;\n    }\n    else\n    {\n        son[y][1]=merge(x,son[y][1]);\n        update(y);return y;\n    }\n}\ninline int find(int pos,int rank)\n{\n    while(1)\n    {\n        if(size[son[pos][1]]>=rank)\n        {\n            pos=son[pos][1];\n        }\n        else \n        if(size[son[pos][1]]+1==rank)return pos;//\u7531\u4e8e\u662f\u513f\u5b50 \u8981\u52a0\u4e0a\u81ea\u5df1 \n        else\n        {\n            rank-=size[son[pos][1]]+1;\n            pos=son[pos][2];\n        }\n    }\n}\nint main()\n{\n    srand((unsigned)time(NULL));\n    int a,b,x,y,z,op,root=0,pos=0;\n    read(n),read(m);\n    for(register int i=1;i<=n;i++)\n    read(X1[i]);\n    for(register int i=1;i<=m;i++)\n    {read(op);flag[op]++;}//\u8bb0\u5f55\u67e5\u8be2\u70b9\n    for(register int i=1;i<=n;i++)\n    {\n        split(x,y,X1[i],root);\n        root=merge(merge(x,newnode(X1[i])),y);\n        while(flag[i]>=1)//\u53ef\u80fd\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u6b62\u4e00\u6b21\u67e5\u8be2\n        {\n            pos++;flag[i]--;\n            printf(\"%d\\n\",val[find(root,pos)]);\n        }\n    }\n}\n```\n\n\u6700\u540e\u6211\u518d\u7ed9\u6ca1\u5b66\u8fc7fhq treap\u7684\u540c\u5b66\u8865\u5145\u4e00\u70b9\u57fa\u7840\u64cd\u4f5c\n\n1\u3001\u6c42a\u7684\u6392\u540d\uff1a\u6211\u4eec\u53ea\u9700\u8981split\u6210\u4e00\u9897\u2264a-1,\u4e00\u9897\u2265a\u7684\u5c31\u884c\u4e86 a\u7684\u6392\u540d\u5c31\u662f\u7b2c\u4e00\u68f5treap\u7684size+1\uff1b\n\n2\u3001\u6c42a\u524d\u9a71\uff1a\u4ee5a-1\u4e3a\u754c\u9650\u62c6\u6811\u5c31\u597d\u4e86\uff0ca\u7684\u524d\u9a71\u80af\u5b9a\u5c31\u662f\u7b2c\u4e00\u4e2atreap\u91cc\u6700\u5927\u7684 \uff0c\u5c31\u5728find\u64cd\u4f5c\u7684\u57fa\u7840\u4e0a\uff0c\u5728x\u91cc\u627e\u6392\u540d\u4e3asize[x]\u7684\n\n3\u3001\u6c42a\u540e\u7ee7\uff1a\u4ee5a\u4e3a\u754c\u9650\u62c6\u6811\uff0ca\u7684\u540e\u7ee7\u662f\u7b2c\u4e8c\u4e2atreap\u91cc\u6700\u5c0f\u7684\uff1b\n\n4\u3001delete\u548c\u533a\u95f4\u53cd\u8f6c\u5c31\u7559\u7ed9\u5927\u5bb6\u81ea\u5df1\u601d\u8003\u4e86\uff0c\u65e0\u8bba\u5982\u4f55\uff0cfhq treap\u7684\u64cd\u4f5c\u57fa\u672c\u4e0a\u90fd\u5efa\u7acb\u5728\u62c6\u6811\u4e0e\u5408\u5e76\u4e0a\u3002\n\n~~\u6700\u540e\u5f3a\u70c8\u5b89\u5229\u4e00\u6ce2fhq treap~~",
        "postTime": 1532920984,
        "uid": 57026,
        "name": "\u9648\u66e6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u4ec0\u4e48\u5bf9\u9876\u5806\uff0c\u5e73\u8861\u6811\uff0c\u672c\u849f\u84bb\u8868\u793a\u5747\u4e0d\u4f1a\n\u6765\u4e00\u7bc7\u4e0d\u540c\u7684\u7b97\u6cd5\n\n\u79bb\u7ebf\u5904\u7406\uff1b\n\n\u5927\u4f53\u601d\u8def\u5c31\u662f\u5c06\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u7b2ck\u6b21\u8be2\u95ee\u628a\u4e0d\u53ef\u884c\u7684\u6570\u6253\u4e0a\u6807\u8bb0\uff0c\u7136\u540e\u4ece\u5934\u5f00\u59cb\u5bfb\u627e\u7b2ck\u4e2a\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\u7684\u503c\n(\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u4fdd\u8bc1\u4e86\u5b83\u662f\u7b2ck\u5c0f\u7684)\u3002\nQ:\u8fd9\u4e0d\u8d85\u65f6\u5417\uff1f\nA\uff1ano no no,\u5b9e\u73b0\u662f\u6709\u6280\u5de7\u7684\uff01\n\n\u5b9e\u73b0\u65b9\u6cd5\uff1a\n\u9996\u5148\u79bb\u6563\u5316\u539f\u59cb\u6570\u7ec4\uff0c\u5f97\u5230\u6570\u7ec4find[],find[i]=j\u8868\u793a\u539f\u4f4d\u7f6e\u4e3ai\u7684\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u662fj\u3002\n\na[]\u6570\u7ec4\u8868\u793a\u539f\u6570\u7ec4,b[]\u6570\u7ec4\u5b58\u6bcf\u6b21\u8be2\u95ee\u5230\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\u3002n\u4e2a\u6570\uff0cm\u4e2a\u8be2\u95ee\u3002\n\n\u7531\u4e8e\u8be2\u95ee\u7684b[]\u662f\u9012\u589e\u7684\uff0c\u6240\u4ee5\u4ec5\u4ec5\u9700\u8981\u6392\u5e8f1~b[m]\u5373\u53ef\uff1b(\u56e0\u4e3a\u4e0d\u53ef\u80fd\u8f93\u51fab[m]\u4ee5\u540e\u7684\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565b[m]\u4ee5\u540e\u7684\u6570\u5bf9\u7b54\u6848\u7684\u5f71\u54cd)\n\n\u6392\u5e8f\u540e\uff0c\u5012\u7740\u5904\u7406\u6bcf\u6b21\u8be2\u95ee,\u8bbebo[i]=1\u8868\u793a*\u6392\u5e8f\u540e*\u4f4d\u7f6e\u662fi\u7684\u8fd9\u4e2a\u6570\u4e0d\u5728\u67d0\u6b21\u8be2\u95ee\u7684\u8303\u56f4\u5185(\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95eeq,\u8be2\u95ee\u7684\u8303\u56f4\u5c31\u662f1~b[q])\uff1b\n\n\u8bbe\u4e00\u4e2a\u6307\u9488now\uff0c\u5b83\u6240\u6307\u5411\u7684\u662f\u6392\u5e8f\u540e\u6570\u7ec4\u7684\u67d0\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5bf9\u4e8e\u7b2ck\u6b21\u8be2\u95eenow\u7684\u503c\u5c31\u662f\u6392\u5e8f\u540e\u6570\u7ec4\u4ece\u5934\u5f00\u59cb\u6570\u7b2ck\u4e2a\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\u7684\u4f4d\u7f6e\u3002\n\n\u521d\u59cb\u5316now\u6307\u5411b[m]\uff0c\u7136\u540e\u679a\u4e3e\u7531\u4e8e\u8be5\u6b21\u8be2\u95ee\u6240\u989d\u5916\u6dfb\u52a0\u7684\u70b9j,\u5e76\u628a\u5b83\u4eec\u6253\u4e0a\u6807\u8bb0(bo[find[j]]=1)\u3002\nPS1:\u6bd4\u5982\u8bf4\u4e0a\u6b21\u8be2\u95ee\u662f1~3\u533a\u95f4\uff0c\u8fd9\u6b21\u8be2\u95ee\u662f1~5\u533a\u95f4\uff0c\u90a3\u4e48\u989d\u5916\u6dfb\u52a0\u7684\u70b9j\u5c31\u662f4\u548c5.\nPS2:\u7531\u4e8e4,5\u6307\u7684\u662f\u539f\u6570\u7ec4a[]\u4e2d\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5e94\u8be5\u7ed9find[4],find[5]\u6253\u6807\u8bb0;\n\n\n\u8bbecnt=0\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u679a\u4e3e\uff0c\u5982\u679cfind[j]<now,\u90a3\u4e48\u5c31cnt++;\n\n\u5047\u8bbe\u5f53\u524d\u4f60\u6c42\u7b2ck\u5c0f\u503c\uff0c\u5982\u679ccnt=0,\u5c31\u8868\u793afind[q[k-1]+1~q[k]]\u90fd\u4e0d\u5728now\u7684\u524d\u8fb9\uff0c\n\u56e0\u4e3a\u53c2\u4e0e\u7b2ck-1\u5c0f\u6bd4\u8f83\u7684\u503c\u90fd\u5728now\u7684\u524d\u9762\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u5bf9\u4e8e\u56de\u7b54\u7b2ck-1\u5c0f\u7684\u503c\u4e0d\u5b58\u5728\u5f71\u54cd\n\u7b2ck-1\u5c0f\u7684\u503c\u5c31\u662f\u4ecenow\u5f80\u524d\u6570\u7b2c1\u4e2a\u6ca1\u6253\u6807\u8bb0\u7684\u70b9u\uff0c\u5e76\u5c06now\u66f4\u65b0\u4e3au\n\n\u5f53cnt=1\u65f6\uff0c\u8fd9\u610f\u5473\u7740now\u524d\u9762\u6709\u4e00\u4e2a\u70b9\u5728\u6c42\u7b2ck-1\u5c0f\u7684\u503c\u65f6\u662f\u4e0d\u53ef\u4ee5\u4f7f\u7528\u7684!\u8fd9\u4ee3\u8868now\u8fd9\u4e2a\u70b9\u4ece\u539f\u6765\u7684\u7b2ck\u5c0f\u53d8\u5473\u4e86\u7b2ck-1\u5c0f\u3002\u6240\u4ee5now\u4e0d\u66f4\u65b0\u3002\n\u4f46\u8981\u6ce8\u610f\uff0c\u7531\u4e8e\u6211\u4eec\u662ffind[j]<now\u65f6++cnt\uff0c\u6240\u4ee5\u53ef\u80fd\u5b58\u5728now\u8fd9\u4e2a\u70b9\u88ab\u6807\u8bb0\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0bnow\u8981\u5411\u540e\u79fb\u5230\u7b2c\u4e00\u4e2a\u6ca1\u6253\u6807\u8bb0\u7684\u70b9\u3002\n\n\n\u5f53cnt>1\u65f6\uff0c\u5c31\u4ee3\u8868\u524d\u9762\u7684\u6570\u6709\u5f88\u591a\u90fd\u4e0d\u80fd\u4f7f\u7528\u4e86\uff0c\u8fd9\u610f\u5473\u7740now\u9700\u8981\u5411\u540e\u79fb\u52a8\u6765\u4fdd\u8bc1now\u6240\u6307\u7684\u4f4d\u7f6e\u662f\u7b2ck-1\u5c0f\uff1b\n\u5982\u679cbo[now]=1,\u90a3\u4e48\u5c06now\u5411\u53f3\u79fb\u52a8,\u76f4\u5230\u7ecf\u8fc7\u4e86cnt\u4e2a\u672a\u6807\u8bb0\u7684\u70b9\u3002\u5426\u5219\uff0c\u5c06now\u5411\u53f3\u79fb\u52a8,\u76f4\u5230\u7ecf\u8fc7\u4e86(cnt-1)\u4e2a\u672a\u6807\u8bb0\u7684\u70b9\uff1b\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0cans[i]=\u6392\u5e8f\u540enow\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c;\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u6392\u5e8f\u7684(nlogn)+\u6253\u6807\u8bb0\u7684O(n)\u52a0\u4e0a\u6539\u53d8now\u7684\u503c\u7684O(n)(\u5982\u679c\u4f60\u7528\u94fe\u8868\u7ed3\u6784\u7684\u8bdd\u4fbf\u662fO(n)\uff0c\u4e0d\u7528\u7684\u8bdd\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5f88\u4f18\u7f8e)\u5916\u52a0\u4e00\u4e9b\u5e38\u6570;\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint a[200010];\nint b[200010];\nint n,m;\nstruct haha{\n\tint pos;\n\tint v;\n}lala[200010];\nbool cmp(haha x,haha y)\n{\n\treturn x.v<y.v;\n}\nint fin[200010];\nint ans[200010];\nint bo[200010];\nint main ()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tfor(register int i=1;i<=m;i++){\n\t\tscanf(\"%d\",&b[i]);\t\t\n\t}\n\tfor(register int i=1;i<=b[m];i++){\n\t\tlala[i].pos=i;\n\t\tlala[i].v=a[i];\n\t}\n\tsort(lala+1,lala+1+b[m],cmp);\n\tfor(register int i=1;i<=b[m];i++){\n\t\tfin[lala[i].pos]=i;\n\t}\n\tint now=m;\n\tfor(register int i=m;i>=1;i--){\t\t\n\t\tans[i]=lala[now].v;\n\t\tint cnt1=0;\n\t\tfor(register int j=b[i-1]+1;j<=b[i];j++){\n\t\t\tif(fin[j]<now) ++cnt1;\n\t\t\tbo[fin[j]]=1;\n\t\t}\n\t\tif(cnt1>1){\n\t\t\twhile(bo[now]) ++now;\n\t\t\tint tmp=cnt1-1;\n\t\t\tint cnt=0;\n\t\t\tfor(register int j=now+1;j<=n;j++){\n\t\t\t\tif(bo[j]) continue;\n\t\t\t\t++cnt;\n\t\t\t\tif(cnt==tmp){\n\t\t\t\t\tnow=j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(cnt1==1&&bo[now]){\n\t\t\tfor(register int j=now+1;j<=n;j++){\n\t\t\t\tif(bo[j]) continue;\n\t\t\t\tnow=j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(cnt1==0){\n\t\t\t--now;\n\t        while(bo[now]){\n\t        \t--now;\n\t        }\n\t\t}\n\t}\n\tfor(register int i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n}\n```\n",
        "postTime": 1566108273,
        "uid": 119189,
        "name": "\u795e\u4e4b\u53f3\u5927\u81e3",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "### \u8fd9\u4e2a\u9898\u662f\u65e0\u610f\u95f4\u53d1\u73b0\u7684\uff0c\u7136\u540e\u770b\u4e86\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u4e3b\u5e2d\u6811\u53ef\u4ee5\u8fc7,\u4e8e\u662f\u6211\u5c31\u65e0\u804a\u7684\u6253\u4e86\u4e00\u4e2a\u4e3b\u5e2d\u6811\u2026\u2026  \n\u4e0b\u9762\u5747\u4e3a\u4e3b\u5e2d\u6811\u8bb2\u6cd5\uff1a  \n  \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u70b9\u5168\u90e8\u63d2\u5165\u5230\u4e3b\u5e2d\u6811\u4e2d\uff0c\u7136\u540e\uff0c\u8bbe $num$ \u8868\u793a\u5f53\u524d\u5df2\u7ecf\u8bbf\u95ee\u4e86\u591a\u5c11\u6b21, $step$ \u4e3a\u5f53\u524d\u8f93\u5165\u7684 $u(j)$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8f93\u51fa $1-step$ \u533a\u95f4\u7684\u7b2c $num$ \u5c0f\uff0c\u81f3\u4e8e\u4e3b\u5e2d\u6811\u90e8\u5206\u5c31\u53ef\u4ee5\u76f4\u63a5\u5957\u6a21\u677f\n  \n  $Code:$  \n  ```\n  #include <bits/stdc++.h>\n#define N 200005\nusing namespace std;\ninline int read() //\u5feb\u8bfb\n{\n\tchar ch=getchar();\n\tint f=0,w=1;\n\twhile(ch<'0' || ch>'9') \n\t{\n\t\tif(ch=='-') w=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9')\n\t{\n\t\tf=(f<<3)+(f<<1)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*w;\n}\ninline void write(register int x) //\u5feb\u5199\n{\n    if(!x)putchar('0');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\nint a[N],b[N],cnt;\nint sum[N<<5],ls[N<<5],rs[N<<5],T[N];\ninline int build(register int l,register int r) //\u5efa\u4e00\u9897\u4e3b\u5e2d\u6811\n{\n\tint root=++cnt; //\u8fd9\u662f\u6700\u5f00\u59cb\u7684\u4e3b\u5e2d\u6811\n\tsum[root]=0;\n\tint mid=(l+r)>>1;\n\tif(l<r) \n\t{\n\t\tls[root]=build(l,mid),rs[root]=build(mid+1,r);\n\t}\n\treturn root;\n}\ninline int update(register int pre,register int l,register int r,register int x) // \u5bf9\u4e8e\u6bcf\u4e00\u9897\u4e3b\u5e2d\u6811,\u6839\u8282\u70b9\u80af\u5b9a\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u4f46\u5b83\u6709\u53ef\u80fd\u4e0e\u4e0a\u4e00\u9897\u4e3b\u5e2d\u6811\u6709\u91cd\u590d\u8282\u70b9\n{\n\tint root=++cnt;\n\tls[root]=ls[pre];rs[root]=rs[pre];sum[root]=sum[pre]+1; //\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5047\u8bbe\u5de6\u53f3\u8282\u70b9\u90fd\u6ca1\u6709\u6539\u52a8\n\tint mid=(l+r)>>1;\n\tif(l<r)\n\t{\n\t\tif(x<=mid) ls[root]=update(ls[pre],l,mid,x); //\u5982\u679c\u8fd9\u4e2a\u6539\u52a8\u7684\u70b9\u5c0f\u4e8e\u7b49\u4e8emid\uff0c\u8bf4\u660e\u5de6\u533a\u95f4\u88ab\u4fee\u6539\u4e86\n\t\telse rs[root]=update(rs[pre],mid+1,r,x);\t//\u5426\u5219\u5c31\u662f\u6709\u533a\u95f4\u88ab\u4fee\u6539\u4e86\n\t}\n\treturn root;\n}\ninline int query(register int u,register int v,register int l,register int r,register int k)\n{\n\tif(l>=r) return l;\n\tint x=sum[ls[v]]-sum[ls[u]];  //\u4e3b\u5e2d\u6811\u67e5\u8be2\u7684\u7cbe\u9ad3\uff0c\u8fd0\u7528\u4e86\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u5982\u679c1~r\u533a\u95f4\u51cf\u53bb1~(l-1)\u7684\u503c\uff0c\u90a3\u4e48\u5c31\u662fl~r\u533a\u95f4\u7684\u503c\n\tint mid=(l+r)>>1;\n\tif(x>=k) return query(ls[u],ls[v],l,mid,k);\n\telse return query(rs[u],rs[v],mid+1,r,k-x);\n}\nint main()\n{\n//\tfreopen(\".in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\t\t\n\tint n,k,m;\n\tn=read(); k=read();\n\tfor(register int i=1;i<=n;++i)\n\t\tb[i]=a[i]=read();\n\tsort(b+1,b+n+1);\n\tm=unique(b+1,b+n+1)-b-1;\n\tT[0]=build(1,m);\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tint t=lower_bound(b+1,b+1+m,a[i])-b;\n\t\tT[i]=update(T[i-1],1,m,t);\n\t}\n\tint num=0;\n\tfor(register int i=1;i<=k;++i)\n\t{\n\t\tint step=read();\n\t\t++num;\n\t\tint t=query(T[0],T[step],1,m,num);\n\t\twrite(b[t]);puts(\"\");\n\t}\n\treturn 0;\n}\n  ```",
        "postTime": 1564666997,
        "uid": 101042,
        "name": "zhz\u5c0f\u849f\u84bb",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "/\\*\n\u601d\u8def:\n\n\u5148s,\u4ee3\u8868\u9898\u76ee\u4e2d\u7684i\n\n\u518d\u8bbe\u4e24\u4e2a\u5806,\u4e00\u4e2a\u5927\u6839\u5806,\u4e00\u4e2a\u5c0f\u6839\u5806,\n\n\u5927\u6839\u5806\u91cc\u653e\u76ee\u524ds\u4e2a\u6700\u5c0f\u7684\u6570,\n\n\u5c0f\u6839\u5806\u91cc\u653e\u5269\u4e0b\u7684\u6570\n\n\u5177\u4f53\u8fc7\u7a0b:\n\n\u90a3\u4e48\u53ef\u77e5\u5927\u6839\u5806\u91cc\u5fc5\u5b9a\u6709s\u4e2a\u6570,\n\n\u90a3\u4e48\u5c0f\u6839\u5806\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u5c31\u662fs+1\u4e5f\u5c31\u662f\u4e0b\u4e00\u4e2aget\u6240\u9700\u8981\u7684\u503c\n\n\u90a3\u4e48\u5c31\u4e0d\u65ad\u5730\u5f80\u5927\u6839\u5806\u91cc\u6dfb\u52a0\u503c,\u5f53\u8d85\u8fc7s\u65f6\u5c31\u79fb\u5230\u5c0f\u6839\u5806\u91cc\u53bb,\n\n\u78b0\u5230get\u662f\u5c31\u4e0d\u65ad\u8f93\u51fa,\u518d\u4e0d\u65ad\u628a\u8f93\u51fa\u7684\u503c\u5728\u8fd4\u8fd8\u5230\u5927\u6839\u5806\u91cc\u91cd\u65b0\u5728\u6309\u4e0a\u9762\u6765\u4e00\u904d\u5373\u53ef,\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\\*/\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\n#include <queue>\nusing namespace std;\nint a[200001],u[200001];\npriority_queue<int,vector<int>,greater<int> >c;//\u5c0f\u6839\u5806 \npriority_queue<int> b;//\u5927\u6839\u5806 \nint main(){\n    int m,n;\n    int s,k=1;\n    cin>>m>>n;\n    for(int i=1;i<=m;i++){\n        cin>>a[i];\n    }\n    for(int i=1;i<=n;i++){\n        cin>>u[i];\n    }\n    for(int i=1;i<=m;i++){\n        b.push(a[i]);\n        if(b.size()>s){\n            c.push(b.top());//\u5982\u679cb\u5806\u4e2d\u5806\u6570\u5927\u4e8e\u76ee\u524d\u5e94\u53d6\u7684\u603b\u5171i\u4e2a\u5143\u7d20,\u5c31\u628a\u591a\u4f59\u7684\u653e\u5165c\u5806\u4e2d,\u4e5f\u5c31\u662f\u628a\u66f4\u5927\u7684\u653e\u5165c\u5806\u4e2d \n            b.pop();//\u5728b\u5806\u4e2d\u628a\u5b83\u5220\u6389 \n        }\n        while(u[k]==i){\n            s++;\n            cout<<c.top()<<\"\\n\";\n            b.push(c.top());//\u5982\u679c\u6709\u591a\u6b21\u5c31\u628a\u5b83\u591a\u9ad8\u5230\u53e6\u4e00\u4e2a\u6570\u7ec4\u91cc,\u4e4b\u540e\u518d\u91cd\u65b0\u6765\u4e00\u904d\n            //\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u7b2cn..n+m\u90fd\u4e0d\u91cd\u590d,\u56e0\u4e3aa[n]>a[n+1]>a[n+2]>...>a[n+m] \n            c.pop();\n            k++;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1483184103,
        "uid": 27939,
        "name": "The_clear_pool",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "# \u8fd9\u91cc\u6211\u4eec\u63d0\u4f9b\u4e00\u79cdfhq-treap\u7684\u505a\u6cd5\uff01\n\n\u65e0\u65cb\u5e73\u8861\u6811\u5728\u8fd9\u91cc\u4e0d\u7ec6\u8bb2\uff0c\u8be6\u60c5\u89c1[\u5c0f\u83ca\u82e5\u7684\u535a\u5ba2](https://www.luogu.org/blog/Treapcjoier/solution-p3391)\n\n\u8fd9\u662f\u65e0\u65cb\u5e73\u8861\u6811\u7684\u65f6\u95f4\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9ydmlvxe.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u7528\u4e00\u4e2a\u53d8\u91cftop\u8bb0\u5f55\u73b0\u5728\u5230\u4e86\u7b2c\u51e0\u6b21\n\n\u7136\u540e\u4ece\u4e0a\u4e00\u6b21\u63d2\u5165\u5230\u8fd9\u4e00\u6b21\u4e2d\u7684\u6bcf\u4e2a\u6570\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u3002\n\n\u4e4b\u540e\u5728\u8f93\u51fa\u4e00\u4e0b\u6392\u540d\u4e3atop\u7684\u6570\u5c31\u53ef\u4ee5\u5566\uff01\uff01\uff01\n\n\uff08~~\u611f\u89c9\u548b\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811\u6a21\u677f~~\uff09\n\n\uff08~~Ctrl C+Ctrl V\uff01\uff01\uff01~~\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n//\u4e0d\u5f00long long\u89c1\u7956\u5b97 \nusing namespace std;\nconst int N=400010;\nstruct trnode\n{\n    ll l,r,v,rnd,size,qz;\n    #define l(x) tr[x].l\n    #define r(x) tr[x].r\n    #define v(x) tr[x].v\n    #define rnd(x) tr[x].rnd\n    #define size(x) tr[x].size\n    #define qz(x) tr[x].qz\n    //\u8fdb\u4e00\u6b65\u7b80\u5316\u4ee3\u7801 \n}tr[N]; \nll tot=0,root=0,n;\nvoid update(ll x)//\u8ba1\u7b97 \n{\n    size(x)=size(l(x))+size(r(x))+1;//\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2   \n}\nll New(ll v)\n{\n    tot++;\n    size(tot)=1; v(tot)=v; rnd(tot)=rand(); qz(tot)=0;//\u6bd4\u8f83\u5e73\u5e38\u7684\u65b0\u5efa\u8282\u70b9\u5de5\u4f5c\uff0c\u521d\u59cb\u5316\u5f04\u8d77\u6765\uff01 \n    return tot;\n}\nll build(ll l,ll r)//\u5efa\u7acb fhq-treap \n{\n    if(l>r) return 0;//\u8fd9\u5de6\u513f\u5b50\u6bd4\u53f3\u513f\u5b50\u5927return\u6ca1\u95ee\u9898\u5427 \n    ll mid=(l+r)/2,v=mid-1,now=New(v);//\u603b\u611f\u89c9\u6709\u70b9\u50cf\u7ebf\u6bb5\u6811\u7684\u5efa\u6811 \n    l(now)=build(l,mid-1);\n    r(now)=build(mid+1,r);\n    update(now);//\u8ba1\u7b97\u4e00\u4e0b \n    return now;\n}\nll merge(ll x,ll y)//\u9ed8\u8ba4x<y \n{\n    if(!x||!y) return x+y;\n    update(x),update(y);//\u51c6\u5907\u5408\u5e76\uff1f \n    if(rnd(x)<rnd(y))//\u7528rand\u503c\u6765\u7ef4\u62a4\u5806\u8fdb\u800c\u7ef4\u62a4\u5e73\u8861\u6027 \n    {\n        r(x)=merge(r(x),y);//\u53f3\u513f\u5b50\u7684\u6811\u5408\u5e76 \n        update(x);//\u8ba1\u7b97\u4e00\u6ce2 \n        return x;\n    }\n    else\n    {\n        l(y)=merge(x,l(y));//\u548c\u524d\u6587\u4e00\u6837 \n        update(y);\n        return y;   \n    }\n}\nvoid split(ll now,ll k,ll &x,ll &y)\n{\n    if(!now) x=y=0;\n    else\n    {\n        update(now);\n        if(v(now)<=k) x=now,split(r(now),k,r(now),y);\n        else y=now,split(l(now),k,x,l(now));\n        update(now);\n    }\n}\nvoid rev(ll l,ll r)//\u8fd9\u91cc\u8fdb\u884c\u65cb\u8f6c\u64cd\u4f5c \n{\n    ll a,b,c,d;\n    split(root,r+1,a,b);\n    split(a,l,c,d);\n    qz(d)^=1;\n    root=merge(merge(c,d),b);\n}\nll read()\n{\n    ll r=0,f=1;char c=getchar();\n    while((c<'0'||c>'9')&&(c!='-')) c=getchar();\n    if(c=='-') f=-1,c=getchar();\n    while(c>='0'&&c<='9') r=r*10+c-'0',c=getchar();\n    return r*f;\n}\nll pri[N],len=0;\nvoid print(ll x)\n{\n    if (!x) return;\n    update(x);\n    print(l(x));//\u5c31\u8f93\u51fa\u5de6\u513f\u5b50 \n    if (v(x)>=1 &&v(x)<=n) printf(\"%lld \",v(x));\n    print(r(x));//\u518d\u6765\u53f3\u513f\u5b50 \n}\nll kth(ll now,ll k)\n{\n    while(1)\n    {\n        if(k<=size(l(now))) \n            now=l(now);\n        else\n        {\n            if(k==size(l(now))+1) return now;\n            else \n            {\n                k-=size(l(now))+1;\n                now=r(now);\n            }\n        }\n    }\n}\nll a[N],b[N];\nint main()\n{\n    ll n,m;\n    n=read(),m=read();\n    build(1,n+2);\n    ll top=0,s=1,x,y,z;\n    for(int i=1;i<=n;i++) a[i]=read(); \n    for(int j=1;j<=m;j++)\n    {\n        b[j]=read();\n        while(s<=b[j])\n\t\t{\n\t\t\tsplit(root,a[s],x,y);\n\t\t\troot=merge(merge(x,New(a[s])),y);\n\t\t\ts++;\n\t\t}\n        top++;\n    \tprintf(\"%lld\\n\",v(kth(root,top)));\n    }\n    return 0;\n}\n```\n\n\u60f3\u8bf4\u4e00\u53e5\uff1a\u8c8c\u4f3cSTL~~\u597d\u5199\u4e00\u70b9~~",
        "postTime": 1572924710,
        "uid": 138649,
        "name": "\u7237\uff0c\u65e0\u9650\u9738\u6c14",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u4e2a\u9898\u9762\uff0c\u4e0d\u65ad\u52a0\u5165\u5143\u7d20\uff0c\u6bcf\u6b21\u67e5\u8be2\u7b2ck\u5927\uff0c\u6211\u5c31\u7acb\u523b\u60f3\u5230\u4e86\u5e73\u8861\u6811\u2026\u2026\n\n\u7136\u540e\u53c8\u4e0d\u4f1a\u624b\u7801\uff0c\u4e8e\u662f\u60f3\u5230\u4e86pbds\u7684tree\n\n\u7136\u540e\u5c31\u8f7b\u677e\u7684\u7801\u51fa\u4e8630\u5206\u7684\u4ee3\u7801\u2026\u2026\n\n\u95ee\u4e86\u522b\u4eba\u624d\u77e5\u9053\u539f\u6765\u6709\u91cd\u590d\u5143\u7d20\uff0c\u800c\u4e14pbds\u7684tree\u662f\u4e0d\u80fd\u63d2\u5165\u91cd\u590d\u5143\u7d20\u7684\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\n\u6211\u60f3\u5230\u4e86hash\u3002\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u5143\u7d20\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u5143\u7ec4$\\left(x,h\\right)$\uff0c$x$\u8868\u793a\u5143\u7d20\u672c\u6765\u7684\u503c\uff0c\u800c$h$\u662f\u6211\u4eec\u901a\u8fc7hash\u641e\u51fa\u7684\u4e00\u4e2a\u552f\u4e00\u7684\u968f\u673a\u503c\u3002\n\n\u7136\u540e\u5bf9\u6bcf\u4e2au\u628a\u6ca1\u52a0\u8fdbtree\u7684\u5143\u7d20\u52a0\u8fdb\u53bb\uff0c\u7136\u540e\u76f4\u63a5\u5229\u7528tree\u6c42kth\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n#include <bits/extc++.h>\nusing namespace std;\nusing namespace __gnu_pbds;\nstruct User{\n    int x,h;\n    inline bool operator < (const User&p)const{return x!=p.x?x<p.x:h<p.h;}\n}a[200005];//\u6211\u4eec\u7684\u4e8c\u5143\u7ec4\uff0c\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u6ee1\u8db3\u5355\u5347\uff0c\u5373\uff1a\u5fc5\u987b\u5bf9\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5b9a\u4e49\u6b7b\ntree<User,null_type,less<User>,rb_tree_tag,tree_order_statistics_node_update> t;//\u5b9a\u4e49\u4e00\u4e2apbds\u7684\u7ea2\u9ed1\u6811\nmap<int,bool> mp;//\u5224\u65ad\u4e00\u4e2ahash\u503c\u662f\u5426\u51fa\u73b0\u8fc7\u4e86\nint m,n,i,u[200005],last=1,hh;\ninline int Hash(int x){\n    while(mp[x])x=x+rand();\n    return x;\n}//\u5bf9\u6bcf\u4e2ax\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u503ch\nint main(){\n\tscanf(\"%d%d\",&m,&n);\n    for (int j=1;j<=m;j++){\n        scanf(\"%d\",&a[j].x);\n        hh=Hash(a[j].x);\n        a[j].h=hh,mp[hh]=1;\n    }//\u8bfb\u5165\u7684\u540c\u65f6\u9884\u5904\u7406\u597d\u6bcf\u4e2a\u4e8c\u5143\u7ec4\n    for (int j=1;j<=n;j++)scanf(\"%d\",&u[j]);//\u8bfb\u5165\u7684u\u5b9e\u9645\u4e0a\u5df2\u7ecf\u62cd\u597d\u5e8f\u4e86\n    for (int j=1;j<=n;j++){\n        for (;last<=u[j];last++)t.insert(a[last]);//\u63d2\u2642\u5165\n        printf(\"%d\\n\",(*t.find_by_order(i++)).x);//\u76f4\u63a5\u67e5kth\uff0c\u8fd4\u56de\u7684\u662f\u5730\u5740\uff0c\u6211\u4eec\u8981\u5148\u53d6*\u518d\u52a0.\n        //\u6ce8\u610f\uff01tree\u4e2d\u67e5\u7b2ck\u4e2a\u5143\u7d20\u5b9e\u9645\u4e0a\u662ffind_by_order(k-1)\n    }\n}\n```",
        "postTime": 1565078986,
        "uid": 39863,
        "name": "\u5f15\u9886\u5929\u4e0b",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u5728\u673a\u623f\u88ab\u8650\u4e86\u4e00\u5929\uff0c\u56de\u5bb6\u4e0b\u5b9a\u51b3\u5fc3\u628a\u8fd9\u9053\u521a\u521a\u70b8\u6389\u7684\u9898 $A$ \u6389\u3002~~\uff08\u5b66\u6821\u6d4b\u8bd5\u6b64\u9898\u62ff\u4e8620\u5206\uff0c\u7ed3\u679c\u4ece\u7b2c\u4e8c\u6389\u5230\u4e86\u7b2c\u4e03\uff09~~\n\n**\u597d\u4e86\uff0c\u56de\u5f52\u6b63\u9898\u3002**\n\n## Solution\n\n\u672c\u9898\u6211\u662f\u7528\u5806\u505a\u7684\u3002\n\n\u5efa\u4e24\u4e2a\u5806\uff0c\u5927\u9876\u5806 $a$ \u548c \u5c0f\u9876\u5806 $b$ \u3002\n\n\u8bfb\u5165\u6bcf\u4e00\u6b65 ADD \u64cd\u4f5c\uff0c\u7136\u540e\u6bcf\u8bfb\u4e00\u6b65 GET \u64cd\u4f5c\u5c31\u5f80 $b$ \u91cc\u63d2\u5165 $(u[i]-u[i-1])$ \u4e2a\u8282\u70b9\u3002\n\n### \u91cd\u70b9\uff1a \n**\u518d\u628a b \u7684\u6839\u8282\u70b9\u5f39\u51fa\u5e76\u63d2\u5165 a \u4e2d\uff0c\u63a5\u7740\u628a a \u4e2d\u7684\u6839\u8282\u70b9\u5f39\u51fa\u5e76\u63d2\u5165 b \u4e2d\u3002**\n\n**\u8fd9\u6837\u5c31\u4f7f a \u4e2d\u59cb\u7ec8\u4fdd\u6301\u524d i \u5c0f\u7684\u8282\u70b9\uff0c\u90a3\u4e48 b \u7684\u6839\u8282\u70b9\u5c31\u662f i+1 \u540e\u7684 GET \u64cd\u4f5c\u5e94\u8f93\u51fa\u7684\u6570\u3002**\n\n\u5b8c\u6210\u4e00\u6b21 GET \u540e\uff0c\u518d\u628a b \u6839\u8282\u70b9\u5f39\u51fa\u5e76\u63d2\u5165 a \u4e2d\uff0c\u4f7f a \u4e2d\u8282\u70b9\u6570\u59cb\u7ec8\u4fdd\u6301\u5728 i \u4e2a\u3002\n\n\u5927\u4f53\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u6700\u597d\u5148\u81ea\u5df1\u5199\u4e00\u904d\u4ee3\u7801\u54e6\u3002\n\n## Code\n\n```cpp\n#include<cstdio>\nusing namespace std;\n\nint n, m, cnt, x, t[200010];\n\nstruct Heap1{    //\u4e3a\u4e86\u8bfb\u8005\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u624b\u5199\u7684\u5806\u7ed3\u6784\u4f53\u3002\n    int len; int heap[200010];\n    void put(int x){\n        int fa, son; int t;\n        len++; heap[len] = x; son = len;\n        while (son!=1 && heap[son>>1]<heap[son]){\n            t = heap[son]; heap[son] = heap[son>>1]; heap[son>>1] = t;\n            son >>= 1;\n        }\n    }\n    int get(){\n        int ret=heap[1], t; int fa, son;\n        heap[1] = heap[len]; len--; fa = 1; \n        while (fa<<1<=len){\n            if ((fa<<1)+1>len || heap[fa<<1]>heap[(fa<<1)+1]) son = fa<<1;\n            else son = (fa<<1)+1;\n            if (heap[fa]<heap[son]){\n                t = heap[fa]; heap[fa] = heap[son]; heap[son] = t;\n                fa = son;\n            } else break;\n        }\n        return ret;\n    }\n}a;\n\nstruct Heap2{\n    int len; int heap[200010];\n    void put(int x){\n        int fa, son; int t;\n        len++; heap[len] = x; son = len;\n        while (son!=1 && heap[son>>1]>heap[son]){\n            t = heap[son]; heap[son] = heap[son>>1]; heap[son>>1] = t;\n            son >>= 1;\n        }\n    }\n    int get(){\n        int ret=heap[1], t; int fa, son;\n        heap[1] = heap[len]; len--; fa = 1; \n        while (fa<<1<=len){\n            if ((fa<<1)+1>len || heap[fa<<1]<heap[(fa<<1)+1]) son = fa<<1;\n            else son = (fa<<1)+1;\n            if (heap[fa]>heap[son]){\n                t = heap[fa]; heap[fa] = heap[son]; heap[son] = t;\n                fa = son;\n            } else break;\n        }\n        return ret;\n    }\n}b;\n\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1; i<=n; i++) scanf(\"%d\",&t[i]);\n    for (int i=1; i<=m; i++){\n        scanf(\"%d\",&x);\n        while (cnt<x){ //\u8fd9\u662f\u91cd\u70b9\n            cnt++;\n            b.put(t[cnt]);\n            a.put(b.get());\n            b.put(a.get());\n        }\n        printf(\"%d\\n\",b.heap[1]);\n        a.put(b.get());\n    }\n    return 0;\n}\n```\n",
        "postTime": 1563863759,
        "uid": 154285,
        "name": "YanYou",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "~~\u5927\u5bb6\u597d\uff0c\u6211\u662f\u9648\u72ec\u79c0\u540c\u5b66\uff0c\u4eca\u5929\u6211\u7ed9\u5927\u5bb6\u5e26\u6765\u4e00\u79cd\u5947\u602a\u7684\u65b9\u6cd5~~\n\n\u9996\u5148\uff0c\u8fd9\u4e00\u9053\u9898\u65e2\u7136\u662f\u8981\u6c42\u7b2ck\u5c0f\u503c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528STL\u5e93\u4e2d\u7684set\u6765\u5b9e\u884c\u81ea\u52a8\u6392\u5e8f\uff0c\u6bcf\u6b21\u7528\u8fed\u4ee3\u5668\u6c42\u7b2ck\u5c0f\u503c\n\n\u4ee3\u7801\uff1a\n\n```\n#include<cstdio>\n#include<cctype>\n#include<set>\nusing namespace std;\nconst int N=200001;\nmultiset<int>s;\nint n,m,k,top=1,a[N],x;\ntemplate <typename _Tp> inline _Tp read(_Tp&x){\n    char c11=getchar(),ob=0;x=0;\n    while(c11^'-'&&!isdigit(c11))c11=getchar();if(c11=='-')c11=getchar(),ob=1;\n    while(isdigit(c11))x=x*10+c11-'0',c11=getchar();if(ob)x=-x;return x;\n}\nint main()\n{\n    n=read(n);m=read(m);\n    for(int i=1;i<=n;++i){\n        a[i]=read(a[i]);\n    }\n    for(int i=1;i<=m;++i){\n        x=read(x);\n        ++k;\n        for(;top<=x;++top){\n            s.insert(a[top]);\n        }\n        auto j=s.begin();\n        int xx=1;\n        while(xx!=k){\n            ++j,++xx;\n        }//\u4ece\u5f00\u5934\u679a\u4e3e\u7b2ck\u5c0f\u503c\n        printf(\"%d\\n\",*j);\n    }\n    return 0;\n}\n```\n\n[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.org/recordnew/show/14848850)\n\n\u4f46\u662f\u63d0\u4ea4\u4e0a\u53bb\u53d1\u73b0T\u4e86\u4e24\u4e2a\u70b9\uff0c\u8981\u8fdb\u884c\u4f18\u5316\n\n\u8bfb\u4e00\u4e0b\u4ee3\u7801\uff0c\u53d1\u73b0\u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u8fc7\u7a0b\u4e2d\u91cd\u590d\u5f97\u8dd1\u4e86\u5f88\u591a\u904d\n\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u5b58\u50a8\u6bcf\u6b21\u7684\u7b2ck\u5c0f\u503c\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5224\u65ad\u540e\u6765\u63d2\u5165\u7684\u6570\u662f\u5426\u5c0f\u4e8e\u5f53\u524d\u7684\u7b2ck\u5c0f\u503c\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u63a8\u3002\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<set>\nusing namespace std;\nconst int N=200001;\nmultiset<int>s;\nint n,m,k,top=2,a[N],x,minc;\ntemplate <typename _Tp> inline _Tp read(_Tp&x)\n{\n    char c11=getchar(),ob=0;\n    x=0;\n    while(c11^'-'&&!isdigit(c11))c11=getchar();\n    if(c11=='-')c11=getchar(),ob=1;\n    while(isdigit(c11))x=x*10+c11-'0',c11=getchar();\n    if(ob)x=-x;\n    return x;\n}\nint main()\n{\n    n=read(n);\n    m=read(m);\n    for(int i=1; i<=n; ++i) {\n        a[i]=read(a[i]);\n    }\n    s.insert(a[1]);\n    auto j=s.begin();\n    for(int i=1; i<=m; ++i) {\n        x=read(x);\n        minc=0;\n        for(; top<=x; ++top) {\n            s.insert(a[top]);\n            if(a[top]<(*j)) ++minc;\n        }\n        if(i!=1)++j;\n        while(minc>0) {\n            --j,--minc;\n        }//(\u6572\u9ed1\u677f)\u4ece\u540e\u5f80\u524d\u63a8\u53ef\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\n        printf(\"%d\\n\",*j);\n    }\n    return 0;\n}\n```\nAC\u8bb0\u5f55\uff1ahttps://www.luogu.org/record/show?rid=14852583",
        "postTime": 1545361692,
        "uid": 34195,
        "name": "origin_star",
        "ccfLevel": 0,
        "title": "STL\u5e93\u7684\u5999\u7528"
    },
    {
        "content": "\u6700\u8fd1\u6811\u9898\u505a\u591a\u4e86\u4e00\u770b\u9898\u76ee\uff1a\u5e73\u8861\u6811\u88f8\u9898\n\n\u7ed3\u679c\u70b9\u5f00\u9898\u89e3\u4e00\u770b\u600e\u4e48\u5168\u662f\u5806\u2026\n\n\u5206\u4eab\u4e00\u53d1splay\u9898\u89e3\n\n\u7ef4\u62a4\u4e00\u68f5Splay\uff0c\u652f\u6301\u63d2\u5165\uff0c\u67e5k\u5c0f\n\n\u592a\u88f8\u4e86\u4e0d\u591a\u8bb2\n```cpp\n#include<cstdio>\nclass Splay\n{\n\tprivate:\n\t\tstruct tree\n\t\t{\n\t\t\tint value,cnt,size; //\u53ef\u80fd\u6709\u91cd\u590d\u6570\u5b57 \u7528cnt\u5b58\u91cd\u590d\u4e2a\u6570 \n\t\t\ttree *fa,*son[2];\n\t\t\tinline tree(int key)\n\t\t\t{\n\t\t\t\tsize=cnt=1;\n\t\t\t\tvalue=key;\n\t\t\t\tfa=son[0]=son[1]=NULL;\n\t\t\t}\n\t\t\tinline void pushup()\n\t\t\t{\n\t\t\t\tsize=cnt;\n\t\t\t\tif (son[0])size+=son[0]->size;\n\t\t\t\tif (son[1])size+=son[1]->size;\n\t\t\t}\n\t\t}*root;\n\tpublic:\n\t\tinline bool relation(tree *p)\n\t\t{\n\t\t\tif (p&&p->fa)return p->fa->son[1]==p;\n\t\t}\n\t\tinline void connect(tree *&p,tree *&fa,bool which)\n\t\t{\n\t\t\tif (p)p->fa=fa;\n\t\t\tif (fa)fa->son[which]=p;\n\t\t}\n\t\tinline void rotate(tree *&p)\n\t\t{\n\t\t\ttree *fa=p->fa;\n\t\t\tbool lr=relation(p);\n\t\t\tconnect(p,fa->fa,relation(fa));\n\t\t\tconnect(p->son[lr^1],fa,lr);\n\t\t\tconnect(fa,p,lr^1);\n\t\t\tfa->pushup();p->pushup();\n\t\t}\n\t\tinline void splay(tree *&p)\n\t\t{\n\t\t\tfor (tree *fa;fa=p->fa;rotate(p))\n\t\t\t\tif (fa->fa)\n\t\t\t\t\trotate(relation(fa)==relation(p)?fa:p);\n\t\t\troot=p;\n\t\t}\n\t\tinline void insert(int insertion)\n\t\t{\n\t\t\tif (root==NULL)\n\t\t\t{\n\t\t\t\troot=new tree(insertion);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttree *p=root;\n\t\t\twhile (1)\n\t\t\t{\n\t\t\t\tif (p->value==insertion)\n\t\t\t\t{\n\t\t\t\t\tp->cnt++;\n\t\t\t\t\tp->pushup();\n\t\t\t\t\tif (p->fa)p->fa->pushup();\n\t\t\t\t\tsplay(p);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttree *fa=p;\n\t\t\t\tbool direction=p->value<insertion;\n\t\t\t\tp=fa->son[direction];\n\t\t\t\tif (p==NULL)\n\t\t\t\t{\n\t\t\t\t\tp=new tree(insertion);\n\t\t\t\t\tconnect(p,fa,direction);\n\t\t\t\t\tfa->pushup();\n\t\t\t\t\tsplay(p);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinline int find_rank(int ranking)  //\u7b2ck\u5c0f\n\t\t{\n\t\t\ttree *p=root;\n\t\t\twhile (1)\n\t\t\t\tif (p->son[0]&&ranking<=p->son[0]->size)\n\t\t\t\t\tp=p->son[0];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tranking-=(p->son[0]?p->son[0]->size:0)+p->cnt;\n\t\t\t\t\tif (ranking<=0)return p->value;\n\t\t\t\t\tp=p->son[1];\n\t\t\t\t}\n\t\t}\n}splay;\nconst int M=200001;\nint n,m,a[M],j=1;\nint main()\n{\n\tscanf(\"%d%d\",&m,&n);\n\tfor (int i=1;i<=m;i++)scanf(\"%d\",&a[i]);\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tint u; //\u8fd9\u91ccu\u4e0d\u5f00\u6570\u7ec4\uff0c\u6bcf\u8bfb\u4e00\u4e2au\u5c31\u63d2\u5165lastU\u548cu\u4e4b\u524d\u7684\u6240\u6709\u6570\u5b57\n\t\tscanf(\"%d\",&u);\n\t\tfor (;j<=u;j++)splay.insert(a[j]); //j\u5f00\u5168\u5c40\u53d8\u91cf\uff0c\u8bb0\u5f55lastU\n\t\tprintf(\"%d\\n\",splay.find_rank(i));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1533476916,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "###\u770b\u5230\u5404\u8defdalao\u7528\u5e73\u8861\u6811\u7684\u505a\u6cd5\uff0c\u8868\u793a\u672c\u4eba\u4e0d\u624d\uff0c\u5e76\u4e0d\u4f1a\u3002\n\n###\u7136\u800c\u6211\u4f1a\u4f18\u5148\u961f\u5217\\_huaji\\_\uff0c\u5e76\u4e14\u53d1\u73b0\u7528\u5806\u89e3\u9898\u7684dalao\u4eec\u5e76\u6ca1\u6709\u57fa\u4e8e**\u5728\u7ebf**\u7684\u505a\u6cd5\n\n\u4e8e\u662f\u6211\u7684showtime\u5230\u4e86\n\n\u8bc4\u6d4b\u7ed3\u679c\uff1a<https://www.luogu.org/record/show?rid=4645103>\n\n#\u5148\u8bb2\u4e00\u4e0b\u601d\u8def\uff1a\n\n\u9898\u5e72\u6240\u63cf\u8ff0\u7684** i **\u7684\u5b9e\u9645\u503c\u5e76\u4e0d\u91cd\u8981\uff0c\u4ed6\u53ea\u662f\u4f5c\u4e3a\u5806\u7684\u4e00\u4e2a\u4f4d\u7f6e\n\n\u5f53\u7136\u5982\u679c\u4f60\u66b4\u529b\u6a21\u62df\u7684\u8bdd\u80af\u5b9a\u4f1a\u8d85\u65f6\n\n- \u4e3a\u6b64\u6211\u4eec\u8003\u8651\u7ef4\u62a4**\u4e24\u4e2a\u5806**\uff0c\u4e00\u4e2a\u662f\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u662f\u5c0f\u6839\u5806\uff0c\u4e14\u6ee1\u8db3\u5c0f\u6839\u5806\u4e2d\u7684\u6570\u6bd4\u5927\u6839\u5806\u4e2d\u7684\u6570\u5927\n\n- \u7528bool\u53d8\u91cfflag\u6765\u8868\u793a\u5f53\u524d\u6240\u64cd\u4f5c\u7684\u662f\u5927\u6839\u5806\u8fd8\u662f\u5c0f\u6839\u5806\n\n- \u9996\u5148\u662fADD(x)\uff0c\u6309flag\u548cx\u5206\u4e3a\u56db\u79cd\u60c5\u51b5\n\n- \u7136\u540e\u662fGET\uff0c\u6309flag\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\n\n- \u5177\u4f53\u64cd\u4f5c\u89c1\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n            \n            \n\n\n```cpp\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<ctime>\n#include<iostream>\n#include<vector>\n#include<list>\n#include<stack>\n#include<queue>\n#include<deque>\n#include<map>\n#include<set>\n#include<algorithm>\n#pragma GCC optimize(3)//STL\u5fc5\u5e26\nusing namespace std;\n#define ll long long\nconst int maxn=2e5+10;\nconst int INF=0x7fffffff;\ninline void read(int&x){//\u5361\u5e38\u7684\u8f93\u5165\n    int data=0,w=1;\n    char ch=getchar();\n    while(ch!='-'&&!isdigit(ch))\n        ch=getchar();\n    if(ch=='-')\n        w=-1,ch=getchar();\n    while(isdigit(ch))\n        data=10*data+ch-'0',ch=getchar();\n    x=data*w;\n}\nvoid write(int x){//\u5361\u5e38\u7684\u8f93\u51fa\n    if(x<0)\n        putchar('-'),x=-x;\n    if(x>9)\n        write(x/10);\n    putchar('0'+x%10);\n}\nint a[maxn],u[maxn]={0};\npriority_queue <int,vector<int>,less<int> > lrh;//\u5927\u6839\u5806\uff0clarge root heap\npriority_queue <int,vector<int>,greater<int> > srh;//\u5c0f\u6839\u5806\uff0csmall root heap\nint main()\n{\n//    freopen(\".in\",\"r\",stdin);\n//    freopen(\".out\",\"w\",stdout);\n    int m,n;\n    read(m);read(n);\n    for(int i=1;i<=m;++i)\n        read(a[i]);\n    int t;\n    for(int i=1;i<=n;++i){\n        read(t);\n        ++u[t];\n    }\n    /*clog<<\"u:\"<<endl;\n    for(int i=1;i<=m;++i)\n        clog<<i<<\" \"<<u[i]<<endl;\n    clog<<\"uend\"<<endl;*/\n    bool flag=1;\n    srh.push(INF); //\u8fd9\u4e2a\u7ec6\u8282\u5f88\u91cd\u8981\uff0cINF\u7684\u503c\u5bf9\u6b64\u9898\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u52a0\u5bf9\u7b2c\u4e00\u4e2a\u6570\u7684\u64cd\u4f5c\u4f1aRE\u7684\n#define x a[i]\n#define y u[i]\n    for(int i=1;i<=m;++i){\n        if(flag)//ADD(x)\n            if(x<srh.top()){\n                lrh.push(x);\n                flag=0;\n            }\n            else\n                srh.push(x);\n        else\n            if(x<lrh.top()){//\u8fd9\u4e00\u6b65\u662fADD\u7684\u7cbe\u534e\u6240\u5728\uff0c\u5bf9\u4e24\u4e2a\u5bf9\u505a\u4e86\u7b49\u4ef7\u53d8\u6362\n                srh.push(lrh.top());//i\u503c\u524d\u79fb\uff0c\u56e0\u800c\u5927\u6839\u5806\u8981\u628a\u6700\u5927\u6570\u7ed9\u5c0f\u6839\u5806\n                lrh.pop();\n                lrh.push(x); \n            }\n            else\n                srh.push(x); \n        while(y--){//GET\n//            clog<<\"once in \"<<i<<endl;\n            if(flag){//\u8fd9\u4e00\u6b65\u662fGET\u7684\u7cbe\u534e\u6240\u5728\uff0c\u5bf9\u4e24\u4e2a\u5bf9\u505a\u4e86\u7b49\u4ef7\u53d8\u6362\n                write(srh.top());putchar('\\n');\n                lrh.push(srh.top());//i\u503c\u540e\u79fb\uff0c\u56e0\u800c\u5c0f\u6839\u5806\u8981\u628a\u6700\u5c0f\u6570\u7ed9\u5927\u6839\u5806\n                srh.pop();\n            }\n            else{\n                write(lrh.top());putchar('\\n');\n                flag=1;\n            }\n        }\n    }\n//    fclose(stdin);\n//    fclose(stdout);\n    return 0;\n}\n\n```",
        "postTime": 1510896154,
        "uid": 37834,
        "name": "autoint",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "set\u306e\u5947\u6280\u6deb\u5de7\n\n\n\u6ca1\u4eba\u7528set\u6c34\u8fc7\u8fd9\u9053\u9898\u4e48\uff1f\uff08set\u5927\u6cd5\u597d\uff09\n\n\n\u9996\u5148\u8fd9\u9898\u53ef\u80fd\u6709\u91cd\u590d\u6570\u5b57\uff0c\u6240\u4ee5\u7528multiset\n\n\n\u5728\u7ef4\u62a4\u7b2cK\u5927\u65f6\u76f4\u63a5\u7ef4\u62a4\u6307\u9488\u6307\u5411\uff0c\u5982\u679c\u5f53\u524d\u63d2\u5165\u5143\u7d20\u6bd4\u6307\u9488\u6307\u5411\u7684\u7b2cK\u4e2a\u5c0f\u5c31\u524d\u79fb\u6307\u9488\n\n\n\u6ca1\u8f93\u51fa\u4e00\u4e2a\u5c31\u540e\u79fb\u4e00\u6b21\u6307\u9488\n\n\n\u590d\u6742\u5ea6O(nlogn)\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    for(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')f=-1;\n    for(;ch>='0'&&ch<='9';ch=getchar())x=x*10+ch-48;\n    return x*f;\n}\nconst int N=200005;\nmultiset<int>q;//\u53ef\u80fd\u6709\u91cd\u590d\u6570\u5b57\nint a[N],s[N],n,m;\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=n;i++)a[i]=read();\n    for(int i=1;i<=m;i++)s[i]=read();\n    int k=1;q.insert(a[1]);\n    multiset<int>::iterator it=q.begin();//\u4e00\u5b9a\u8981\u8bfb\u5165\u7b2c\u4e00\u4e2a\u5728\u6307\u5411\n    if(s[k]==1)printf(\"%d\\n\",a[1]),k++;\n    for(int i=2;i<=n;i++){\n        q.insert(a[i]);\n        if(a[i]<*it)it--;//\u5982\u679c\u6bd4\u5f53\u524d\u5c0f\u5c31\u6307\u5411\u524d\u4e00\u4e2a\n        while(s[k]==i){\n            if(k!=1)it++;//\u6307\u9488\u6307\u5411\u540e\u4e00\u4e2a\n            printf(\"%d\\n\",*it),k++;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1509665529,
        "uid": 34604,
        "name": "\u5c0f\u624b\u51b0\u51c9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u7b97\u6cd5\uff1a\u7ebf\u6bb5\u6811+map+\u4e8c\u5206\u67e5\u627e\n\n\u9996\u5148\u5f3a\u8c03\u4e00\u4e0b\u8fd9\u4e0d\u662f\u5e38\u89c4\u89e3\u6cd5\uff01\u65f6\u95f4\u590d\u6742\u5ea6O\uff08nlognlogn\uff09\uff0c\u6b64\u5916\u771f\u662f\u65e0\u77e5\u8005\u65e0\u754f\uff0c\u4e0d\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u5e73\u8861\u6811/\u5806\u7684\u9898\u76ee\uff0c\u76f4\u63a5\u4e0a\u7ebf\u6bb5\u6811\u4e71\u641e\u7adf\u7136AC\u3002\n\n\n\u9996\u5148\u8bfb\u5165\u6570\u636e\u540e\u5148\u6392\u5e8f\uff08\u5b66\u957f\u6709\u8a00\uff0c\u4e0d\u77e5\u9053\u5e72\u4ec0\u4e48\u7684\u65f6\u5019\u5148\u6392\u5e8f\uff09\uff0c\u7136\u540e\u7528map\u8bb0\u5f55\u4e00\u4e0b\u6392\u5e8f\u597d\u7684\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\uff08\u82e5\u6709\u76f8\u540c\u7684\u5143\u7d20\u5c06\u5176\u538b\u7f29\u4e3a1\u4e2a\u4f4d\u7f6e\uff0c\u907f\u514d\u4ea7\u751f\u6b67\u4e49\uff0c\u4ee3\u7801\u4e2d\u7684temp\u6570\u7ec4\u5c31\u662f\u5e72\u8fd9\u4e2a\u7684\uff09\uff0c\u4e4b\u540e\u5c31\u4ee5\u538b\u7f29\u5e76\u53bb\u9664\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u4e0b\u6807\u4e3a\u57fa\u51c6\u6784\u5efa\u7ebf\u6bb5\u6811\uff01\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u65f6\u6bcf\u4e2a\u8282\u70b9\u7ba1\u7406\u7684\u6570\u5b57\u548c\u90fd\u662f0\uff08\u56e0\u4e3a\u5e76\u6ca1\u6709\u63d2\u5165\u8fdb\u53bb\u4efb\u4f55\u6570\uff09\uff0c\u7136\u540e\u6bcf\u6b21\u9700\u8981GET\u65f6\uff0c\u5148\u5c06\u524d\u9762\u5c1a\u672a\u63d2\u5165\u7ebf\u6bb5\u6811\u7684\u6570\u636e\u63d2\u5165\uff08\u63d2\u5165\u4f4d\u7f6e\u95eemap\uff09\uff0c\u7136\u540e\u4e8c\u5206\uff01\u7531\u4e8e\u6392\u597d\u5e8f\u7684\u7ebf\u6bb5\u6811\u5e95\u5c42\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u56e0\u6b64\u6bcf\u6b21\u4ee5logn\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u67e5\u8be2\u4ece1\u5230mid\u533a\u95f4\u5185\u5df2\u7ecf\u6709\u7684\u6570\u5b57\u4e2a\u6570\u4e4b\u548c\uff0c\u5982\u679c\u6bd4\u8981\u6c42\u7684\u6570\u5b57\u5927\uff0c\u5411\u5de6\u8fb9\u7684\u533a\u95f4\u627e\uff0c\u5426\u5219\u5411\u53f3\u8fb9\u7684\u533a\u95f4\u627e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662flogn\uff0c\u6545\u603b\u4f53\u590d\u6742\u5ea6O(NlogNlogN)\uff0c\u53ef\u4ee5\u5728Linux\u4e0b\u4ee5\u63a5\u8fd1800ms\u7684\u64e6\u8fb9\u590d\u6742\u5ea6AC\u6b64\u9898\u76ee\uff0c\u800cWindows\u7684Cena\u4e0bTLE\u3002\u3002\u3002\u53e6\u5916\u6d1b\u8c37\u62bd\u98ce\uff0ccin\u4f1aRE\n\n\n```cpp\n#include<iostream>\n#include<map>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint m,n,ask[200010],addpos=1,mids,ans,l,r,realpos,counts=0;\nlong long a[200010],orin[200010],temp[200010],pre;\nmap<long long,int>mp;\nstruct rec{\n    int l,r,sum;\n}tree[200010<<2];\nvoid build(int l,int r,int arrnum){\n    if (l==r){\n        tree[arrnum].l=tree[arrnum].r=l;\n        tree[arrnum].sum=0;\n        return;\n    }\n    tree[arrnum].l=l,tree[arrnum].r=r;\n    tree[arrnum].sum=0;\n    build(l,(l+r)>>1,arrnum<<1);\n    build(((l+r)>>1)+1,r,(arrnum<<1)|1);\n}\nvoid add(int arrnum){\n    if (tree[arrnum].l==tree[arrnum].r){\n        ++tree[arrnum].sum;\n        return;\n    }\n    int mid=(tree[arrnum].l+tree[arrnum].r)>>1;\n    if (realpos<=mid) add(arrnum<<1);\n    else add((arrnum<<1)|1);\n    tree[arrnum].sum=tree[arrnum<<1].sum+tree[(arrnum<<1)|1].sum;\n}\nvoid ques(int arrnum){\n    if (tree[arrnum].l>=1&&tree[arrnum].r<=mids){\n        ans+=tree[arrnum].sum;\n        return;\n    }\n    int mid=(tree[arrnum].l+tree[arrnum].r)>>1;\n    if (mids<=mid) ques(arrnum<<1);\n    else{\n        ques(arrnum<<1);\n        ques((arrnum<<1)|1);\n    }\n}\nint main(){\n    //ios::sync_with_stdio(false);\n    //cin>>m>>n;\n    scanf(\"%d%d\",&m,&n);\n    for (int i=1;i<=m;++i) scanf(\"%lld\",&a[i]); //cin>>a[i];\n    for (int i=1;i<=n;++i) scanf(\"%d\",&ask[i]);//cin>>ask[i];\n    memcpy(orin,a,sizeof(a));\n    sort(ask+1,ask+1+n);\n    sort(a+1,a+1+m);\n    pre=1e18;\n    for (int i=1;i<=m;++i){\n        if (a[i]!=pre) temp[++counts]=a[i],pre=a[i];\n    }\n    memset(a,0,sizeof(a));\n    memcpy(a,temp,sizeof(temp));\n    m=counts;\n    for (int i=1;i<=m;++i){\n        mp.insert(make_pair(a[i],i));\n    }\n    \n    build(1,m,1);\n    for (int i=1;i<=n;++i){\n        for (;addpos<=ask[i];++addpos){\n            realpos=mp.find(orin[addpos])->second;\n            add(1);\n        }\n        l=1,r=m;\n        while (l<r){\n            mids=(l+r-1)>>1;\n            ans=0;\n            ques(1);\n            if (ans>=i) r=mids;\n            else l=mids+1;\n        }\n        printf(\"%d\\n\",a[l]);\n        //cout<<a[l]<<\"\\n\";\n    }\n    return 0;\n}\n\n```",
        "postTime": 1478767218,
        "uid": 9508,
        "name": "\u9648\u56fd\u51ef",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\u8fd9\u9053\u9898\u771f\u7684\u6c34...\n\n\u54ea\u91cc\u6709\u84dd\u9898\u7684\u96be\u5ea6...\n\n### \u9898\u76ee\u63cf\u8ff0\n`Black Box`\u662f\u4e00\u79cd\u539f\u59cb\u7684\u6570\u636e\u5e93\u3002\u5b83\u53ef\u4ee5\u50a8\u5b58\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8fd8\u6709\u4e00\u4e2a\u7279\u522b\u7684\u53d8\u91cfi\u3002\u6700\u5f00\u59cb\u7684\u65f6\u5019Black Box\u662f\u7a7a\u7684\uff0e\u800ci\u7b49\u4e8e0\u3002\u8fd9\u4e2aBlack Box\u8981\u5904\u7406\u4e00\u4e32\u547d\u4ee4\u3002\n\n\u547d\u4ee4\u53ea\u6709\u4e24\u79cd\uff1a\n\n`ADD(x)`:\u628ax\u5143\u7d20\u653e\u8fdb`BlackBox`;\n\n`GET`:i\u52a01\uff0c\u7136\u540e\u8f93\u51fa`Blackhox`\u4e2d\u7b2ci\u5c0f\u7684\u6570\u3002\n\n### \u89e3\u9898\u601d\u8def\n\u9996\u5148\uff0c\u8fd9\u9053\u9898\uff0c\u770b\u5230\u9898\u76ee\u6240\u8bf4\u53d6\u7b2ci\u5c0f\u7684\u6570\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u5e73\u8861\u6811\uff0c\u4f46\u662f\uff0c\u53ea\u8981\u7a0d\u52a0\u601d\u8003\uff0c\u5c31\u53ef\u4ee5\u60f3\u5230\u2014\u2014\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a`vector`\u6765\u7ef4\u62a4\u8fd9\u4e2a\u6709\u5e8f\u7684\u6570\u5217\u3002\n\n#### \u5177\u4f53\u64cd\u4f5c\n```cpp\narr.insert(lower_bound(arr.begin(), arr.end(), a[i]), a[i]);//lower_bound\u662f\u627e\u5230\u4e00\u4e2a\u5f53\u524d\u8fd9\u4e2a\u6570\u7ec4\u5185\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e\u3002\n```\n\n### \u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define SIZE 200100\nusing namespace std;\n\nvector <int> arr; \nint n, m, a[SIZE], u[SIZE], k = 1;\n\nint main() {\n\tarr.clear();\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; i++) cin >> a[i];\n\tfor (int i = 1; i <= m; i++) cin >> u[i];\n\tsort(u + 1, u + 1 + m);//\u6709\u51e0\u4e2a\u70b9\u7684\u67e5\u8be2\u662f\u65e0\u5e8f\u7684\uff0c\u5361\u4e86\u621120\u5206\u949f.\n\tfor (int i = 1; i <= n; i++) {\n\t\tarr.insert(lower_bound(arr.begin(), arr.end(), a[i]), a[i]);\n\t\twhile (u[k] == i) cout << arr[k - 1] << endl, k++;\n\t\tif(k > m) break;//\u5c0f\u5c0f\u7684\u4f18\u5316\uff0c\u5982\u679c\u5b83\u6ca1\u6709\u67e5\u8be2\u4e86\uff0c\u540e\u9762\u7684\u63d2\u5165\u4e5f\u662f\u65e0\u4ef7\u7684\u4e86\u3002\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546526980,
        "uid": 84786,
        "name": "Jesselrj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "## \u60ef\u4f8b \u867d\u7136\u6211\u53ea\u6709\u4e00\u7bc7\u9898\u89e3\u4f46\u662f\u8fd8\u662f\u8981\u505a\u5ba3\u4f20\n[Alex Mondes' home](https://mark32.blog.luogu.org/)\n## \u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u5728\u8bfe\u4e0a\u88ab\u8001\u5e08\u8981\u6c42\u624b\u5199\u5806\n\u8001\u5e08\u8c03\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u6211\u4e00\u770b\u3002WOW\u84dd\u9898\u3002  \n\u7a81\u7136\u5c31\u5bb3\u6015\u4e86\u3002  \n\u51b5\u4e14\u8001\u5e08\u8ba9\u6211\u624b\u5199\u5927\u5c0f\u4e24\u6839\u5806\u3002  \n\u7ed3\u679c\u9898\u89e3\u91cc\u6839\u672c\u5c31\u6ca1\u6709QAQ.  \n\u6240\u4ee5\u6211\u81ea\u5df1\u6765\u5199\u4e00\u4e2a\u3002  \n\u5e2e\u52a9\u50cf\u6211\u4e00\u6837\u7684\u849f\u84bb\u6765\u7406\u89e3\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u7684\u51fd\u6570\u7684\u771f\u5b9e\u9762\u8c8c\u3002  \n## ~~\u62d2\u7eddCV~~\n```\n#include <iostream>\n#include <cstdio>\n\nint top1=0,top2=0;///\u7528\u6765\u8bb0\u5f55\u6bcf\u4e2a\u5806\u4e2d\u6570\u7684\u4e2a\u6570\nusing namespace std;\nconst int MAXN = 500000+10;\nint s[MAXN],b[MAXN];///s \u5c0f\u6839\u5806 b \u5927\u6839\u5806\nint a[MAXN],u[MAXN];///\u7528\u6765\u8bb0\u5f55\u539f\u6570\u7684\u6570\u7ec4\nint gettop(int m){///\u53d6\u9876 \u5728\u9898\u4e2d\u4e3aGET\n    if(m==1) return s[1];\n    else return b[1];\n}\nvoid push(int m,int n){///\u538b\u5165\u5806 \u5728\u9898\u4e2d\u4e3aADD\n    /**\u6709\u5f88\u591a\u5c0f\u4f19\u4f34\u548c\u6211\u8bf4\u8fd9\u9898\u6b63\u5e38\u8981\u5199\u4e24\u4e2apush\u51fd\u6570\u3002\n    \u7136\u800c\u6211\u5728\u91cc\u9762\u52a0\u4e86\u4e00\u4e2a n \u8fd9\u662f\u7528\u6765\u63a7\u5236\u8fd9\u4e2a\u51fd\u6570\u5230\u5e95\u662f\u63a7\u5236\u5927\u6839\u5806\u8fd8\u662f\u5c0f\u6839\u5806**/\n    int now,next;///\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0b\u4e00\u4f4d\u7f6e\n    if(n==1){///\u624b\u52a8\u63a7\u5236\n    s[++top1]=m;\n    now=top1;\n    while(now>1){\n        next=now>>1;\n        if(s[now]>=s[next]) return;\n        swap(s[now],s[next]);\n        now=next;\n        }\n    }\n    if(n==2){\n    b[++top2]=m;\n    now=top2;\n    while(now>1){\n        next=now>>1;\n        if(b[now]<=b[next]) return;\n        swap(b[now],b[next]);\n        now=next;\n        }\n    }\n}\nvoid pop(int m){///pop\u51fd\u6570\u4e5f\u662f\u4e00\u6837\u624b\u52a8\u63a7\u5236\n    int now,next;\n    if(m==1){\n    s[1]=s[top1--];\n    now=1;\n    while(now*2<=top1){\n        next=now*2;\n        if(next<top1&&s[next+1]<s[next])next++;\n        if(s[now]<=s[next]) return;\n        swap(s[now],s[next]);\n        now=next;\n        }\n    }\n    else{\n    b[1]=b[top2--];\n    now=1;\n    while(now*2<=top2){\n        next=now*2;\n        if(next<top2&&b[next+1]>b[next])next++;\n        if(b[now]>=b[next]) return;\n        swap(b[now],b[next]);\n        now=next;\n        }\n    }\n    return ;\n}\nint main()\n{\n    int m,n;\n    scanf(\"%d %d\",&m,&n);\n    for(int i=1;i<=m;i++) scanf(\"%d\",&a[i]);\n    for(int i=1;i<=n;i++) scanf(\"%d\",&u[i]);\n    int p=0;\n    for(int i=1;i<=n;i++)\n    {\n        while(p<u[i]&&i==1){\n            p++;\n            push(a[p],1);\n        }\n        while(p<u[i]&&i!=1)\n        {\n            p++;\n            push(a[p],2);\n            push(gettop(2),1);\n            pop(2);\n        }\n        printf(\"%d\\n\",gettop(1));\n        push(gettop(1),2);\n        pop(1);\n    }\n    return 0;\n}\n\n```\n ",
        "postTime": 1545292991,
        "uid": 143690,
        "name": "Beauty_Moon",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u4eba\u5199SB Tree \u6211\u6765\u8d34\u4e2a\n\n\u5176\u5b9e\u5c31\u662f\u5e73\u8861\u6811\u7684\u6a21\u677f\u9898\u554a\n\n\u79bb\u7ebf\u505a \u6bcf\u6b21\u628aa[i]\u63d2\u8fdb\u53bb \u8bfb\u5230b[top]=i\u7684\u65f6\u5019\u67e5\u4e00\u4e0b\u518dtop++\u4e00\u4e0b\u5373\u53ef\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct s  \n{  \n    int key,left,right,size;  \n}tree[200000+5];  \nint top;  \nvoid left_rot(int &x)// \u5de6\u65cb  \n{  \n    int y=tree[x].right;  \n    tree[x].right=tree[y].left;  \n    tree[y].left=x;  \n    tree[y].size=tree[x].size;  \n    tree[x].size=tree[tree[x].left].size+tree[tree[x].right].size+1;  \n    x=y;  \n}  \nvoid right_rot(int &x)//\u53f3\u65cb  \n{  \n    int y=tree[x].left;  \n    tree[x].left=tree[y].right;  \n    tree[y].right=x;  \n    tree[y].size=tree[x].size;  \n    tree[x].size=tree[tree[x].left].size+tree[tree[x].right].size+1;  \n    x=y;  \n}  \nvoid maintain(int &x,bool flag)//\u7ef4\u62a4SBT\u72b6\u6001  \n{  \n    if(flag==false)//\u5de6\u8fb9  \n    {  \n        if(tree[tree[tree[x].left].left].size>tree[tree[x].right].size)//\u5de6\u5b69\u5b50\u7684\u5de6\u5b69\u5b50\u5927\u4e8e\u53f3\u5b69\u5b50  \n            right_rot(x);  \n        else  \n            if(tree[tree[tree[x].left].right].size>tree[tree[x].right].size)//\u5de6\u5b69\u5b50\u7684\u53f3\u5b69\u5b50\u5927\u4e8e\u53f3\u5b69\u5b50  \n            {  \n                left_rot(tree[x].left);  \n                right_rot(x);     \n            }  \n            else  \n                return;  \n    }  \n    else//\u53f3\u8fb9  \n    {  \n        if(tree[tree[tree[x].right].right].size>tree[tree[x].left].size)//\u53f3\u5b69\u5b50\u7684\u53f3\u5b69\u5b50\u5927\u4e8e\u5de6\u5b69\u5b50  \n            left_rot(x);  \n        else  \n            if(tree[tree[tree[x].right].left].size>tree[tree[x].left].size)//\u53f3\u5b69\u5b50\u7684\u5de6\u5b69\u5b50\u5927\u4e8e\u5de6\u5b69\u5b50  \n            {  \n                right_rot(tree[x].right);  \n                left_rot(x);  \n            }  \n            else  \n                return;  \n    }  \n    maintain(tree[x].left,false);  \n    maintain(tree[x].right,true);  \n    maintain(x,true);  \n    maintain(x,false);  \n}  \nvoid insert(int &x,int key)//\u63d2\u5165  \n{  \n    if(x==0)  \n    {  \n        x=++top;  \n        tree[x].left=0;  \n        tree[x].right=0;  \n        tree[x].size=1;  \n        tree[x].key=key;  \n    }  \n    else  \n    {  \n        tree[x].size++;  \n        if(key<tree[x].key)  \n            insert(tree[x].left,key);  \n        else  \n            insert(tree[x].right,key);//\u76f8\u540c\u5143\u7d20\u53ef\u63d2\u53f3\u5b50\u6811  \n        maintain(x,key>=tree[x].key);  \n    }  \n}  \nint remove(int &x,int key)//\u5229\u7528\u540e\u7ee7\u5220\u9664  \n{  \n    tree[x].size--;  \n    if(key>tree[x].key)  \n        remove(tree[x].right,key);  \n    else  \n        if(key<tree[x].key)  \n            remove(tree[x].left,key);  \n        else  \n            if(tree[x].left!=0&&tree[x].right==0)//\u6709\u5de6\u5b50\u6811\uff0c\u65e0\u53f3\u5b50\u6811  \n            {  \n                int temp=x;  \n                x=tree[x].left;  \n                return temp;  \n            }  \n            else  \n                if(!tree[x].left&&tree[x].right!=0)//\u6709\u53f3\u5b50\u6811\uff0c\u65e0\u5de6\u5b50\u6811  \n                {  \n                    int temp=x;  \n                    x=tree[x].right;  \n                    return temp;  \n                }  \n                else  \n                    if(!tree[x].left&&!tree[x].right)//\u65e0\u5de6\u53f3\u5b50\u6811  \n                    {  \n                        int temp=x;  \n                        x=0;  \n                        return temp;  \n                    }  \n                    else//\u5de6\u53f3\u5b50\u6811\u90fd\u6709  \n                    {  \n                        int temp=tree[x].right;  \n                        while(tree[temp].left)  \n                            temp=tree[temp].left;  \n                        tree[x].key=tree[temp].key;  \n                        remove(tree[x].right,tree[temp].key);  \n                    }  \n} \nint select(int &x,int k)//\u9009\u7b2ck\u5c0f\u7684\u6570  \n{  \n    int r=tree[tree[x].left].size+1;  \n    if(r==k)  \n        return tree[x].key;  \n    else  \n        if(r<k)  \n            return select(tree[x].right,k-r);  \n        else  \n            return select(tree[x].left,k);  \n}   \nvoid read(int &x)\n{\n    char c;\n    int num=0;\n    int f=1;\n    c=getchar();\n    while (c<'0' || c>'9')\n    {\n        if (c=='-') f=f*-1;\n        c=getchar();\n    }\n    while (c>='0' && c<='9')\n    {\n        num=num*10+c-'0';\n        c=getchar();\n    }\n    x=num*f;\n    return ;\n}\nint main()\n{\n    int n,m;\n    read(m);\n    read(n);\n    int a[200000];\n    int b[200000];\n    for (int i=1;i<=m;i++)\n      read(a[i]);\n    for (int i=1;i<=n;i++)\n      read(b[i]);\n    //for (int i=1;i<=n;i++)\n     /// cout<<b[i]<<\" \";\n    int top=1;\n    //int num=-1;\n    int x=0;\n    for (int i=1;i<=m;i++)\n    {\n        num++;\n        insert(x,a[i]);\n        while (b[top]==i)\n        {\n            cout<<select(x,top)<<endl;\n            top++;\n        }\n    }\n}\n```",
        "postTime": 1494032902,
        "uid": 21385,
        "name": "PrimoPan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u70b9\u8fd9\u91cc](https://www.cnblogs.com/tlx-blog/p/12354465.html)   \n\u867d\u7136\u9898\u89e3\u5f88\u591a\uff0c\u4e5f\u6709\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u4f46\u6211\u7684\u548c\u4ed6\u4eec\u4f3c\u4e4e**\u4e0d\u5c3d\u76f8\u540c**\uff0c\u8dd1\u7684\u4e5f\u633a\u5feb\u3002   \n\u6240\u8c13\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u5c31\u662f\u7528\u7ebf\u6bb5\u6811\u6765\u5b58\u50a8\u6743\u503c\u3002   \n\u90a3\u4ec0\u4e48\u662f\u6743\u503c\u5462\uff1f\u4f3c\u4e4e\u5c0f\u5b66~~\u521d\u4e2d~~\u5b66\u7edf\u8ba1\u7684\u65f6\u5019\u4e86\u89e3\u5230\uff0c\u4ed6\u662f**\u63cf\u8ff0\u6570\u5728\u6570\u636e\u4e2d\u6bd4\u4f8b\u5927\u5c0f\u7684\u91cf**\uff0c\u8fd9\u91cc\u7528\u4f5c**\u6b64\u6570\u51fa\u73b0\u7684\u6b21\u6570**\u3002  \n### \u5efa\u6811  \n~~\u505a\u6cd5\u663e\u7136~~\u3002   \n\u6211\u4eec\u7528$cnt_i$\u8868\u793a\u7b2c$i$\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fd9\u6837\uff1a\n```\nvoid update(int k){a[k].sum=a[k<<1].sum+a[k<<1|1].sum;}\nvoid build(int k,int l,int r)\n{\n\ta[k].l=l,a[k].r=r;\n\tint mid=(l+r)>>1;\n\tif(l==r)\n\t{\n\t\ta[k].sum=cnt[l];//\u8d4b\u503c\n\t\treturn;\n\t}\n\tbuild(k<<1,l,mid),build(k<<1|1,mid+1,r);\u3001\u3001\u5411\u4e0b\u9012\u5f52\n\tupdate(k);//\u52a8\u6001\u66f4\u65b0\u70b9\u533a\u95f4\u548c\n}\n```\n### \u4e4b\u540e  \n\u4f60\u662f\u4e0d\u662f\u8fd8\u5728\u7591\u95ee\u8fd9\u662f\u5728\u56de\u7b54\u4ec0\u4e48\u95ee\u9898\uff1f  \n\u5bf9\u8fd9\u5c31\u662f\u8be2\u95ee\u6240\u6709\u6570\u4e2d\u7b2c$x$\u5c0f\u503c\u3002  \n#### \u5206\u6790  \n\u5982\u4f55\u8fd0\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u5462\uff1f   \n\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u6bcf\u6b21\u67e5\u8be2\u4e0b\u5de6\u513f\u5b50\u7684\u6743\u503c\u548c$sum$\uff0c\u5982\u679c$x\\geqslant sum$,\u5c31\u5411\u53f3\u513f\u5b50\u9012\u5f52\u8be2\u95ee\u7b2c$x-sum$\u5c0f\uff0c\u5426\u5219\u5411\u5de6\u513f\u5b50\u9012\u5f52\u627e\u7b2c$x$\u503c\u5c31\u597d\u4e86\u3002  \n\u6709\u6ca1\u6709\u53d1\u73b0\u7eb0\u6f0f\uff1f  \n\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u6709\u5355\u8c03\u6027\u3002    \n\u90a3\u5c31\u6392\u5e8f\u554a......   \n\u53cd\u6b63\u6392\u5e8f\u662f$O(n\\log n)$\u7684\uff0c\u7ebf\u6bb5\u6811\u4e5f\u662f$O(n\\log n)$\u7684\uff0c\u4e0d\u4f1a\u6210\u4e3a\u74f6\u9888\u3002    \n\u8fd9\u91cc\u5148\u4e0d\u7ed9\u4ee3\u7801\u4e86\uff0c\u4e0b\u9762\u518d\u8bf4\u3002\n### \u5176\u4ed6\u7684\u4e1c\u897f   \n\u6211\u4eec\u60f3\u5230\u7ebf\u6bb5\u6811\u662f\u5355\u8c03\u6570\u7ec4\uff0c\u800c\u4f7f\u7528\u662f\u975e\u5e38\u4e0d\u4fbf\u3002  \n\u8fd9\u5c31\u9700\u8981\u4e00\u79cd\u7ed9\u529b\u7684**\u6620\u5c04\u5173\u7cfb**\u3002  \n~~\u5176\u5b9e\u5c31\u662f\u79bb\u6563\u5316\u4e86~~\u3002\n\u8fd9\u91cc\u5c31\u6709\u4ee3\u7801\u4e86\uff1a\n```\nstruct Node\n{\n\tint val,id;\n}t[MAXN];\nbool cmp(Node n,Node m)\n{\n\treturn n.val<m.val;\n} \nint b[MAXN],num[MAXN],cnt[MAXN],c=0;\nvoid hash(int n)\n{\n\tsort(t+1,t+n+1,cmp);//\u7ed3\u6784\u4f53\u6392\u5e8f\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(num[c]!=t[i].val) b[t[i].id]=++c,num[c]=t[i].val;//\u5982\u679c\u548c\u4e0a\u4e00\u4e2a\u4e0d\u540c\n\t\telse b[t[i].id]=c;\n\t\tcnt[c]++;\n\t}\n}\n```\n\u6162\u6162\u6765\uff0c\u6bd4\u8f83\u7ed5\u3002   \n$b[]$\u662f\u539f\u6570\u7ec4\u5230\u79bb\u6563\u5316\u6570\u7ec4\u7684\u6620\u5c04\uff0c\u800c$num[]$\u53cd\u4e4b\u3002  \n\u4e3e\u4e2a\u6817\u5b50\uff1a  \n\u6570\u636e\uff1a$5,12,-6,7,5$\u4e2d\uff0c    \n$b[1](t[1].val=5)=2,b[2](t[2].val=12)=4$;   \n$ps$:\u8fd9\u91cc\u7ed9\u51fa\u7684\u4e0b\u6807\u662f\u672a\u6392\u5e8f\u7684\u3002      \n$num[1]=-6,num[3]=7$;   \n$cnt[2]=2(num[2]=num[3]=5)$\u3002  \n### \u56de\u5230\u4e0a\u9898  \n\u8fd9\u6837\u5c31\u53ef\u4ee5\u6c42\u7b2c$x$\u5c0f\u503c\u4e86\u3002   \n\u7528\u4e0a\u9762\u7684\u601d\u60f3\u89e3\u51b3\uff1a\n```\nint query(int k,int x)\n{\n\tif(a[k].l==a[k].r) return num[a[k].l];//\u627e\u5230\u4e86\n\telse if(a[k<<1].sum>=x) return query(k<<1,x);//\u5728\u5de6\u513f\u5b50\u4e2d\n\telse return query(k<<1|1,x-a[k<<1].sum); //\u5728\u53f3\u513f\u5b50\u4e2d\uff0c\u8bb0\u5f97\u51cf\u4e00\u4e0b\n}\n```\n### \u9898\u89e3  \n\u4f60\u57fa\u672c\u5df2\u7ecf\u5b66\u4f1a\u4e86\u6743\u503c\u7ebf\u6bb5\u6811\u6811\u4e86\uff0c\u73b0\u5728\u6765\u770b\u8fd9\u4e2a\u9898\uff1a   \n\u9898\u76ee\u94fe\u63a5\uff1a[P1801 \u9ed1\u5323\u5b50](https://www.luogu.com.cn/problem/P1801)   \n\u8003\u8651\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u52a0\u70b9\u5e76\u4e0d\u597d\u5b9e\u73b0\uff0c\u4e0d\u5982**\u5f3a\u5236\u79bb\u7ebf**\uff0c\u5012\u7740\u8bd5\u8bd5\u3002  \n\u5220\u9664\u4e00\u4e2a\u6570\u5c31\u5341\u5206\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u7528\u539f\u6570\u5230\u79bb\u6563\u5316\u6570\u7ec4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5c06\u6b64\u6570\u5bf9\u5e94\u7684$cnt--$\u5c31\u597d\u4e86\uff0c\u628a\u7b54\u6848\u5b58\u4e00\u4e0b\uff0c\u9006\u5e8f\u8f93\u51fa\u6765\u5373\u53ef\u3002\n\u4e0b\u9762\u662f\u7b80\u5355\u7684\u5355\u70b9\u4fee\u6539\uff1a\n```\nvoid modify(int k,int x,int y)//\u73b0\u5728\u5728k\u70b9\uff0c\u76ee\u6807\u662f\u5c06x\u53f7\u641e\u6210y\n{\n\tint mid=(a[k].l+a[k].r)>>1;\n\tif(a[k].l==a[k].r)//\u627e\u5230\u76ee\u6807\n\t{\n\t\ta[k].sum=y;\n\t\treturn;\n\t}\n\telse if(x<=mid) modify(k<<1,x,y);\n\telse modify(k<<1|1,x,y);\n\tupdate(k);//\u4ecd\u7136\u8bb0\u5f97\u66f4\u65b0\n}\n```  \n\u603b\u7684\u8bf4\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f$O((n+m)\\log n)$\u7684\uff0c\u53ef\u5df2\u901a\u8fc7\u6b64\u9898\u3002   \n\u4e0b\u9762\u653e\u4e0a$AC$\u4ee3\u7801\uff1a\n## $Code$:\n```\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nconst int MAXN=2e5+5;\nstruct Node\n{\n\tint val,id;\n}t[MAXN];\nbool cmp(Node n,Node m)\n{\n\treturn n.val<m.val;\n} \nint b[MAXN],num[MAXN],cnt[MAXN],c=0;//num\u662fhash\u6570\u7ec4\u5230\u539f\u6570\u7ec4\u7684\u6620\u5c04\u3002\n/*num[2]=12,\u6307\u539f\u6570\u7ec4\u7b2c\u4e8c\u5927\u7684\u503c\u4e3a12*/ \nvoid hash(int n)\n{\n\tsort(t+1,t+n+1,cmp);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(num[c]!=t[i].val) b[t[i].id]=++c,num[c]=t[i].val;\n\t\telse b[t[i].id]=c;\n\t\tcnt[c]++;\n\t}\n}\nstruct node\n{\n\tint l,r,sum,val;\n\tnode()\n\t{\n\t\tl=r=sum=0;\n\t}\n}a[MAXN<<2];\nvoid update(int k){a[k].sum=a[k<<1].sum+a[k<<1|1].sum;}\nvoid build(int k,int l,int r)\n{\n\ta[k].l=l,a[k].r=r;\n\tint mid=(l+r)>>1;\n\tif(l==r)\n\t{\n\t\ta[k].sum=cnt[l];\n\t\treturn;\n\t}\n\tbuild(k<<1,l,mid),build(k<<1|1,mid+1,r);\n\tupdate(k);\n}\nint query(int k,int x)\n{\n\tif(a[k].l==a[k].r) return num[a[k].l];\n\telse if(a[k<<1].sum>=x) return query(k<<1,x);\n\telse return query(k<<1|1,x-a[k<<1].sum); \n}\nvoid modify(int k,int x,int y)\n{\n\tint mid=(a[k].l+a[k].r)>>1;\n\tif(a[k].l==a[k].r)\n\t{\n\t\ta[k].sum=y;\n\t\treturn;\n\t}\n\telse if(x<=mid) modify(k<<1,x,y);\n\telse modify(k<<1|1,x,y);\n\tupdate(k);\n}\nint n,m,l[MAXN],now,ans[MAXN];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tnow=m;\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&t[i].val),t[i].id=i;\n\tfor(int i=1;i<=m;i++) scanf(\"%d\",&l[i]);\n\thash(n);\n\tbuild(1,1,c);\n\tfor(int i=n;i>=1;i--)\n\t{\n\t\twhile(i==l[now]) ans[now]=query(1,now),now--;//\u6b64\u65f6\u6709\u8be2\u95ee\uff0c\u67e5\u8be2\u7b2cnow\u5c0f\u503c\uff0c\u5e76\u66f4\u65b0now\n\t\t,modify(1,b[i],--cnt[b[i]]);//\u5c06\u6570\u5bf9\u5e94\u7684\u70b9\u6743\u503c\u51cf\u4e00\n\t}\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);//\u5c06\u5b58\u50a8\u7684\u7b54\u6848\u8f93\u51fa\n\treturn 0; \n}\n```\n\u8fd9\u4e2a\u7248\u672c\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4f1a\u8dd1$900\\;ms$\uff0c\u7ffb\u7ffb\u8bb0\u5f55\uff0c\u8fd8\u633a\u5feb\u5462\u3002",
        "postTime": 1582464897,
        "uid": 184500,
        "name": "hanzhongtlx",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50\u3011"
    },
    {
        "content": "\u770b\u5230\u4e86\u4e00\u5806\u5199 Treap \u548c Heap \u7684 dalao\uff0c\u849f\u84bb\u6211\u53d1\u4e00\u7bc7\u6811\u72b6\u6570\u7ec4\u5427\u3002\n\n\u5f88\u7b80\u5355\uff0c\u5148\u79bb\u6563\u5316\u4e00\u4e0b\uff08\u5143\u7d20\u592a\u5927\uff09\uff0c\u7136\u540e\u628a\u6240\u6709\u7684 $1 \\sim m$ \u7684\u6570\u90fd\u653e\u5230\u4e00\u4e2a\u7ef4\u62a4\u51fa\u73b0\u6b21\u6570\u524d\u7f00\u548c\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\u3002\u6bcf\u6b21\u5982\u679c\u63d2\u5165\u5143\u7d20\uff0c\u5c31\u628a\u8fd9\u4e2a\u5143\u7d20\u4ee5\u540e\u7684\u6570\u90fd\u52a0 $1$\uff0c\u5982\u679c\u67e5\u8be2\uff0c\u5219\u4e8c\u5206\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint a[200005],b[200005],g[200005],ff[200005],xn;\nint mp1[1000005],mp2[1000005];\nint c[200005];\nvoid insert(int p)\n{\n\twhile(p<=xn)c[p]++,p+=p&-p;\n}\nint query(int p)\n{\n\tint ans=0;\n\twhile(p)ans+=c[p],p-=p&-p;\n\treturn ans;\n}\nint rank(int x)\n{\n\tint l=1,r=xn;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(query(mid)<x)l=mid+1;\n\t\telse r=mid-1;\n\t}\n\treturn l;\n}\nint main()\n{\n\tint n,m,snake=0;\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)cin>>a[i],ff[i]=a[i];\n\tfor(int i=1;i<=m;i++)cin>>b[i],g[b[i]]++;\n\tsort(ff+1,ff+n+1);\n\txn=unique(ff+1,ff+n+1)-ff-1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint r=lower_bound(ff+1,ff+xn+1,a[i])-ff;\n\t\tmp1[i]=r,mp2[r]=a[i];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tinsert(mp1[i]);\n\t\tfor(int j=1;j<=g[i];j++)cout<<mp2[rank(++snake)]<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1581926244,
        "uid": 107484,
        "name": "wmy_goes_to_thu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50\u3011"
    },
    {
        "content": "\u6743\u503c\u6811\u72b6\u6570\u7ec4\n\n\u79bb\u7ebf\u540e\u7528\u500d\u589e\u7684\u65b9\u6cd5\u6c42\u7b2cK\u5927\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709\u4e00\u4e2alog\n\n\u8be6\u89c1\u84dd\u4e66\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nconst int N=2e5+5;\nint n,m,b[N],d[N],c[N],cnt;\nstruct A{int x,id; }a[N];\nbool cmp(A i,A j) {\n\treturn i.x<j.x;\n}\n\ninline void add(int x) {\n\tfor(int i=x;i<=cnt;i+=i&-i) c[i]++;\n}\n\ninline int kth(int x) {\n\tint ret=0;\n\tfor(int i=18;i>=0;i--) {\n\t\tif(ret+(1<<i)<=cnt&&c[ret+(1<<i)]<x) {\n\t\t\tret+=(1<<i),x-=c[ret];\n\t\t}\n\t}\n\tret++;\n\treturn ret;\n}\n\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) {\n\t\tscanf(\"%d\",&a[i].x),a[i].id=i;\n\t}\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++) {\n\t\tif(i==0||a[i].x!=a[i-1].x) {\n\t\t\td[++cnt]=a[i].x;\n\t\t}\n\t\tb[a[i].id]=cnt;\n\t}\n\tint l=1;\n\tfor(int i=1;i<=m;i++) {\n\t\tint t; scanf(\"%d\",&t);\n\t\twhile(l<=t) {\n\t\t\tadd(b[l]),l++;\n\t\t}\n\t\tprintf(\"%d\\n\",d[kth(i)]);\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1573521283,
        "uid": 18657,
        "name": "11223344w",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e2a\u9898\u76ee\u8981\u6211\u4eec\u5e72\u4ec0\u4e48\uff1a\n\n>GET:i\u52a01\uff0c\u7136\u540e\u8f93\u51faBlackhox\u4e2d\u7b2ci\u5c0f\u7684\u6570\u3002\n\n\u53ef\u4ee5\uff0c\u8fd9\u5f88\u5212\u5206\u6811\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u5e76\u4e0d\u662f\u88f8\u7684\u7b2c$K$\u5927\uff0c\u5b83\u8fd8\u8981\u63d2\u5165\u4e00\u4e9b\u6570\u5b57\u3002\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u5b83\u53ea\u8981\u6c42\u6211\u4eec\u6c42\u51fa\u6574\u4f53\u7b2c$K$\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u628a\u6240\u6709\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\uff0c\u6784\u9020\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a\u63d2\u5165\u64cd\u4f5c\u603b\u6b21\u6570\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u6bcf\u6b21\u8be2\u95ee\u5176\u5b9e\u5c31\u662f\u6c42\u533a\u95f4$[1,x]$\u7684\u7b2c$K$\u5927\uff0c\u5176\u4e2d$x$\u662f\u8be5\u8be2\u95ee\u4e4b\u524d\u7684\u63d2\u5165\u603b\u6b21\u6570\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u4e2a\u9898\u76ee\u7684\u8f93\u5165\u5df2\u7ecf\u5e2e\u4f60\u79bb\u7ebf\u597d\u4e86(\u597d\u826f\u5fc3\u554a\n\n\u4e4b\u540e\u5957\u4e2a\u5212\u5206\u6811\u7684\u677f\u5b50\u5c31\u597d\u4e86\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a$O(n \\log n)$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint read(){\n\tint w=0;\n\tbool s=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)){\n\t\ts=(c=='-');\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tw=w*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn s?-w:w;\n}\nconst int N=200005,M=20;\nint n,m,q;\nstruct Tree{\n\t#define mid ((le+ri)>>1)\n\t#define lson le,mid,dep+1\n\t#define rson mid+1,ri,dep+1\n\tstruct Node{\n\t\tint num[N],toleft[N];\n\t};\n\tNode t[M];\n\tint sorted[N];\n\tvoid build(int le,int ri,int dep){\n\t\tif(le==ri){\n\t\t\treturn;\n\t\t}\n\t\tint key=sorted[mid];\n\t\tint equ=mid-le+1;\n\t\tfor(int i=le;i<=ri;i++){\n\t\t\tif(t[dep].num[i]<key){\n\t\t\t\tequ--;\n\t\t\t}\n\t\t}\n\t\tint tl=0;\n\t\tint it1=le-1,it2=mid;\n\t\tfor(int i=le;i<=ri;i++){\n\t\t\tint now=t[dep].num[i];\n\t\t\tif(now<key||(now==key&&equ)){\n\t\t\t\tif(now==key){\n\t\t\t\t\tequ--;\n\t\t\t\t}\n\t\t\t\ttl++;\n\t\t\t\tt[dep+1].num[++it1]=now;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tt[dep+1].num[++it2]=now;\n\t\t\t}\t\n\t\t\tt[dep].toleft[i]=tl;\t\n\t\t}\n\t\tbuild(lson);\n\t\tbuild(rson);\n\t}\n\tint query(int le,int ri,int dep,int x,int y,int z){\n\t\tif(le==ri){\n\t\t\treturn t[dep].num[le];\n\t\t}\n\t\tint tl=0,del=t[dep].toleft[y];\t\n\t\tif(le!=x){\n\t\t\ttl=t[dep].toleft[x-1];\n\t\t\tdel-=tl;\n\t\t}\t\n\t\tint nx,ny;\t\n\t\tif(del>=z){\n\t\t\tnx=le+tl;\n\t\t\tny=nx+del-1;\n\t\t\treturn query(lson,nx,ny,z);\n\t\t}\n\t\telse{\t\n\t\t\tnx=mid+1+x-tl-le;\n\t\t\tny=nx+y-x-del;\n\t\t\treturn query(rson,nx,ny,z-del);\n\t\t}\t\n\t}\t\n\t#undef lson\n\t#undef rson\n\t#undef mid\n};\nTree T;\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++){\n\t\tT.sorted[i]=read();\n\t\tT.t[0].num[i]=T.sorted[i];\n\t}\n\tsort(T.sorted+1,T.sorted+1+n);\n\tT.build(1,n,0);\n\tint x,tmp=0;\n\tfor(int i=1;i<=m;i++){\n\t\tx=read();\n\t\ttmp++;\n\t\tint ans=T.query(1,n,0,1,x,tmp);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\nGL~",
        "postTime": 1572246129,
        "uid": 178864,
        "name": "LordLeft",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "# \u5e73\u8861\u6811 Treap\n\n~~\u6700\u7b80\u5355\u7684\u5e73\u8861\u6811~~\n\n\u6bcf\u4e00\u4e2a\u70b9rand\u4e00\u4e2a\u503c\uff0c\u5728\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u6027\u8d28\u7684\u57fa\u7840\u4e0a\u4fdd\u8bc1\u5806\u6027\u8d28\n\n\u503c\u5f97\u4e00\u8bf4\u7684\u662f\u65cb\u8f6c\nson[p][0] \u662f\u5de6\u513f\u5b50 son[p][1] \u662f\u53f3\u513f\u5b50\n\n\u4e3a\u4e86\u540c\u65f6\u6ee1\u8db3\u5806\u6027\u8d28\uff08\u5c0f\u6839\u5806\uff09\uff0c\u9700\u8981\u628arand\u503c\u5c0f\u7684\u8f6c\u4e0a\u6765\n\n\u62ff\u5de6\u513f\u5b50\u4e3a\u4f8b \n\n\u6839\u53f3\u513f\u5b50\u53d8\u6210\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\n\n\u5de6\u513f\u5b50\u7684\u53f3\u513f\u5b50\u53d8\u6210\u6839\n\n\u6839\u7684\u7236\u4eb2\u8fde\u5230\u6839\u7684\u5de6\u513f\u5b50\u4e0a\n\n\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u65cb\u8f6c\n\n\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\u53ef\u540c\u65f6\u5b8c\u6210\u5de6\u65cb\u548c\u53f3\u65cb\uff08\u5207\u8bb0 &p \u4ee3\u8868 son[f][p] \u4e5f\u5c31\u662f\u6839\u7236\u4eb2\u7684\u6307\u5411\u6839\u7684\"\u6307\u9488\"\uff09\n\n```cpp\n#define ls son[p][0]\n#define rs son[p][1]\nvoid ros(int &p,int x){\n\tint tt=son[p][x];\n\tson[p][x]=son[tt][x^1];\n\tson[tt][x^1]=p;\n\tup(p);up(tt);\n\tp=tt;\n}\n```\n\n\u5b8c\u5168\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rg register\ninline  int read (){\n\trg char ch=getchar();\n\trg int x=0,f=0;\n\twhile(!isdigit(ch)) f|=(ch=='-'),ch=getchar();\n\twhile(isdigit(ch)) x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n} \nint n,m;\nint u[200020],a[200020];\nnamespace Tree{\n\tint son[200020][2],rote;\n\tint poe[200020],sz[200020],tot,w[200020];\n\t#define ls son[p][0]\n\t#define rs son[p][1]\n\tvoid up(int p){\n\t\tsz[p]=sz[ls]+sz[rs]+1;\n\t}\n\tvoid ros(int &p,int x){\n\t\tint tt=son[p][x];\n\t\tson[p][x]=son[tt][x^1];\n\t\tson[tt][x^1]=p;\n\t\tup(p);up(tt);\n\t\tp=tt;\n\t}\n\tvoid add(int x,int &p){\n\t\tif(!p){\n\t\t\tp=++tot;w[p]=x;poe[p]=rand(),sz[p]=1;\n\t\t\treturn;\n\t\t}\n\t\t++sz[p];\n\t\tif(x<=w[p]){\n\t\t\tadd(x,ls);\n\t\t\tif(poe[ls]<poe[p]) ros(p,0);\n\t\t}else{\n\t\t\tadd(x,rs);\n\t\t\tif(poe[rs]<poe[p]) ros(p,1);\n\t\t}\n\t}\n\tint  rank(int x,int p){\n\t\tif(sz[ls]==x-1) return w[p];\n\t\tif(x<=sz[ls]) return rank(x,ls);\n\t\treturn rank(x-sz[ls]-1,rs);\n\t}\n}\nusing namespace Tree;\nint main(){\n\tsrand(time(NULL));\n\tm=read(),n=read();\n\tfor(int i=1;i<=m;++i) a[i]=read();\n\tfor(int i=1;i<=n;++i) u[i]=read();\n\tint l=1;\n\tfor(int i=1;i<=n;++i){\n\t\twhile(l<=u[i]){\n\t\t\tadd(a[l],rote);\n\t\t\t++l;\n\t\t}\n\t\tprintf(\"%d\\n\",rank(i,rote));\n\t}\n\treturn 0;\n}\n```\ntime 667ms\n\n",
        "postTime": 1554819446,
        "uid": 121618,
        "name": "Accoty_AM",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "### \u6b64\u9898\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217,\u4e8c\u53c9\u5806,\u4e8c\u53c9\u6392\u5e8f\u6811,\u5e73\u8861\u6811\u6765\u505a. \u6211\u7528\u4e86\u624b\u5199\u4e8c\u53c9\u6392\u5e8f\u6811,\u7136\u540e\u8fc7\u4e86...\n#### \u5176\u5b9e\u6211\u672c\u6765\u60f3\u5b66\u5e73\u8861\u6811\u7684,\u7ed3\u679c\u81ea\u5df1\u5199\u4e86\u4e00\u4e0a\u5348,\u6700\u540e\u5199\u6210\u4e8c\u53c9\u6392\u5e8f\u6811\u4e86,\u800c\u4e14\u8fd8\u548c\u522b\u4eba\u5199\u7684\u4e0d\u4e00\u6837.\n#### \u6240\u4ee5\u6211\u672c\u6765\u662f\u6309\u7167[\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369) \u7684\u64cd\u4f5c\u8981\u6c42\u6765\u5199\u7684,\u4e0d\u8fc7\u90a3\u4e2a\u9898TLE\u4e86\u7b2c12\u4e2a\u70b9,~~\u56e0\u6b64\u53ea\u80fd\u79d1\u5b66\u7279\u5224\u901a\u8fc7~~.\u4f46\u8fd9\u4e2a\u9898\u5b8c\u5168\u53ef\u4ee5\u7528,\u6bd5\u7adf\u6570\u636e\u4e0d\u6bd2. \n#### \u5bf9\u4e8e[\u4e8c\u53c9\u6392\u5e8f\u6811](https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91)\u6781\u5176\u7b80\u5355,\u770b\u5b9a\u4e49\u5c31\u80fd\u7406\u89e3,\u4f46\u5199\u8d77\u6765\u8fd8\u662f\u9700\u8981\u4e00\u4e9b\u601d\u8003.\u5728\u6211\u7684\u4ee3\u7801\u5b9e\u73b0\u4e2d,\u4e0d\u662f\u4e25\u683c\u7684\u4e8c\u53c9\u6392\u5e8f\u6811,\u56e0\u4e3a\u6811\u4e2d\u6709\u952e\u503c\u76f8\u7b49\u7684\u8282\u70b9.\n### \u4ee5\u4e0b\u8bb2\u89e3:\n#### \u65e2\u7136\u662f\u4e2a\u6811,\u90a3\u4e48\u80af\u5b9a\u6709\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9,\u6211\u7528\u4e86\u6307\u9488\u601d\u60f3\u5b9e\u73b0,\u56e0\u6b64\u53ef\u80fd\u5199\u8d77\u6765\u8f83\u4e3a\u9ebb\u70e6,\u4f46\u6ca1\u6709\u591a\u4f59\u7a7a\u95f4.\n#### \u5148\u653e\u672c\u9898\u4e2d\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5b8c\u6574\u4ee3\u7801(\u5df2\u7701\u53bb\u5e73\u8861\u6811\u9898\u76ee\u7684\u90e8\u5206\u64cd\u4f5c):\n```cpp\nstruct Tree {\n\tstruct node {\n\t\tint _num, _tot;\n\t\tnode *children[2];\n\t\tnode(int _new_num) {\n\t\t\t_num= _new_num;\n\t\t\t_tot= 1;\n\t\t\tchildren[0]= children[1]= NULL;\n\t\t}\n\t} * mainnode;\n\tvoid push(int _new_num) {\n\t\tstruct node *now_node= mainnode, *last_node= NULL;\n\t\tint w= -1;\n\t\twhile(now_node != NULL) {\n\t\t\t++now_node->_tot;\n\t\t\tlast_node= now_node;\n\t\t\tif(_new_num < now_node->_num) {\n\t\t\t\tw= 0;\n\t\t\t\tnow_node= now_node->children[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw= 1;\n\t\t\t\tnow_node= now_node->children[1];\n\t\t\t}\n\t\t}\n\t\tnow_node= new node(_new_num);\n\t\tif(w != -1) {\n\t\t\tlast_node->children[w]= now_node;\n\t\t}\n\t\telse {\n\t\t\tmainnode= now_node;\n\t\t}\n\t\treturn;\n\t}\n\tint rank_num(int _last_rank) {\n\t\tstruct node *now_node= mainnode;\n\t\tint lchildren_size;\n\t\twhile(now_node != NULL) {\n\t\t\tif(now_node->children[0] != NULL)\n\t\t\t\tlchildren_size= now_node->children[0]->_tot;\n\t\t\telse\n\t\t\t\tlchildren_size= 0;\n\t\t\tif(_last_rank <= lchildren_size) {\n\t\t\t\tnow_node= now_node->children[0];\n\t\t\t}\n\t\t\telse if(_last_rank == lchildren_size + 1) {\n\t\t\t\treturn now_node->_num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnow_node= now_node->children[1];\n\t\t\t\t_last_rank-= lchildren_size + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\tTree() {\n\t\tmainnode= NULL;\n\t}\n};\n```\n#### \u6211\u5728\u6811\u7684\u7ed3\u6784\u4f53\u4e2d,\u5199\u4e86\u8282\u70b9\u7684\u5b50\u7ed3\u6784\u4f53.\u5177\u4f53\u8bb2\u89e3\u5982\u4e0b:\n```cpp\n\tstruct node {\n\t\tint _num, _tot;\n        //_num\u8868\u793a\u8282\u70b9\u7684\u952e\u503c,_tot\u8868\u793a\u6b64\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u7684\u6570\u91cf(\u5305\u62ec\u81ea\u5df1)\n\t\tnode *children[2];\n        //\u4e24\u4e2a\u6700\u8fd1\u7684\u5b50\u8282\u70b9,childre[0]\u8868\u793a\u5de6\u8282\u70b9\n\t\tnode(int _new_num) {\n        //\u6784\u9020\u51fd\u6570,\u521d\u59cb\u5316\u8282\u70b9\u4f7f\u7528\n\t\t\t_num= _new_num;\n\t\t\t_tot= 1;\n\t\t\tchildren[0]= children[1]= NULL;\n           \t//\u521d\u59cb\u6ca1\u6709\u5b50\u8282\u70b9,\u8981\u628a\u6307\u9488\u8bbe\u4e3aNULL\n\t\t}\n\t} * mainnode;\n    //mainnode\u8868\u793a\u6839\u8282\u70b9,\u6ce8\u610f\u5b83\u4e5f\u662f\u4e2a\u6307\u9488\n```\n#### \u8282\u70b9\u5df2\u7ecf\u5199\u5b8c\u4e86,\u63a5\u4e0b\u6765\u5c31\u662f\u64cd\u4f5c\n#### \u6b64\u9898\u6709\u4e00\u4e2aADD\u64cd\u4f5c,\u5c31\u662f\u7ed9\u6811\u52a0\u8282\u70b9,\u4f46\u6811\u5fc5\u987b\u8981\u6ee1\u8db3\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u6027\u8d28,\u56e0\u6b64\u8981\u5199\u4e00\u4e2apush,\u6216\u8005\u53ebinsert,\u8fd9\u4e2a\u65e2\u53ef\u4ee5\u7528\u9012\u5f52,\u4e5f\u53ef\u4ee5\u7528\u5faa\u73af.\n```cpp\n\tvoid push(int _new_num) {\n    //_new_num\u5c31\u662f\u65b0\u63d2\u5165\u7684\u6570\n\t\tstruct node *now_node= mainnode, *last_node= NULL;\n        //\u4e24\u4e2a\u6307\u9488,now_node\u6307\u5411\u63d2\u5165\u4f4d\u7f6e,last_node\u6307\u5411\u63d2\u5165\u4f4d\u7f6e\u7684\u7236\u8282\u70b9\n\t\tint w= -1;\n        //w\u4ee3\u8868\u63d2\u5165\u4f4d\u7f6e\u662f\u5de6\u8fd8\u662f\u53f3\n\t\twhile(now_node != NULL) {\n        //\u63d2\u5165\u4f4d\u7f6e\u662f\u7a7a\u6307\u9488\u5c31\u505c\u6b62\u5faa\u73af\n\t\t\t++now_node->_tot;\n            //\u7236\u8282\u70b9\u7684_tot\u90fd+1\n\t\t\tlast_node= now_node;\n            //\u56e0\u4e3anow_node\u8981\u53d8,\u6240\u4ee5last_node\u6307\u5411now_node\u5f53\u524d\u6307\u5411\u7684\u4f4d\u7f6e\n\t\t\tif(_new_num < now_node->_num) {\n            //\u63d2\u5165\u7684\u6570\u6bd4\u8282\u70b9\u7684\u503c\u5c0f\n\t\t\t\tw= 0;\n\t\t\t\tnow_node= now_node->children[0];\n                //\u63d2\u5165\u4f4d\u7f6e\u6539\u4e3a\u5f53\u524d\u63d2\u5165\u4f4d\u7f6e\u7684\u5de6\u8282\u70b9\n\t\t\t}\n\t\t\telse {\n            //\u63d2\u5165\u7684\u6570\u6bd4\u8282\u70b9\u7684\u503c\u76f8\u7b49\u6216\u5927\n\t\t\t\tw= 1;\n\t\t\t\tnow_node= now_node->children[1];\n                //\u63d2\u5165\u4f4d\u7f6e\u6539\u4e3a\u5f53\u524d\u63d2\u5165\u4f4d\u7f6e\u7684\u53f3\u8282\u70b9\n\t\t\t}\n\t\t}\n        //\u627e\u5230\u4f4d\u7f6e\n\t\tnow_node= new node(_new_num);\n\t\tif(w != -1) {\n\t\t\tlast_node->children[w]= now_node;\n\t\t}\n\t\telse {\n        //w\u662f-1\u4ee3\u8868\u63d2\u5165\u4f4d\u7f6e\u662f\u6839\u8282\u70b9\n\t\t\tmainnode= now_node;\n\t\t}\n\t\treturn;\n\t}\n```\n#### \u6b64\u9898\u8fd8\u6709\u4e00\u4e2aGET\u64cd\u4f5c,\u67e5\u627e\u6392\u540d\u4e3ax\u7684\u6570,\u8fd9\u5c31\u9700\u8981\u7528\u5230\u6bcf\u4e2a\u8282\u70b9\u7684_tot\u7684\u503c\u4e86\n#### \u8fd9\u4e2a\u64cd\u4f5c\u5927\u5bb6\u53ef\u4ee5\u753b\u4e00\u4e2a\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u56fe\u6765\u7406\u89e3,\u6211\u7ed9\u51fa\u4e00\u4e2a\u6807\u51c6\u7684\n![\u4e8c\u53c9\u6392\u5e8f\u6811](https://cdn.luogu.com.cn/upload/pic/40056.png)\n#### \u6839\u8282\u70b9\u7684_tot\u4e3a8,\u5c31\u662f\u6811\u7684\u6240\u6709\u8282\u70b9\u4e2a\u6570.\u503c\u4e3a5\u7684\u8282\u70b9\u7684_tot\u4e3a4,\u503c\u4e3a15\u7684\u8282\u70b9\u7684_tot\u4e3a3.\n#### \u5982\u679c\u8981\u627e\u6392\u884c\u4e3a5\u7684\u6570,\u90a3\u80af\u5b9a\u662f10.\u56e0\u6b64\u6392\u884c<=4\u7684\u6570\u4e00\u5b9a\u5c31\u572810\u7684\u5de6\u8fb9,\u6392\u884c5\u7684\u6570\u4e00\u5b9a\u662f10,\u6392\u884c>5\u7684\u6570\u4e00\u5b9a\u572810\u7684\u53f3\u8fb9,\u8fd9\u6837\u4f9d\u6b21\u8fd9\u6837\u5411\u4e0b\u641c\u5c31\u884c\u4e86.\u4ee3\u7801\u4e0epush(insert)\u8f83\u76f8\u540c.\n```cpp\n\tint rank_num(int _last_rank) {\n\t\tstruct node *now_node= mainnode;\n\t\tint lchildren_size;\n        //\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u7684\u5de6\u8282\u70b9\u7684_tot\u503c\n\t\twhile(now_node != NULL) {\n\t\t\tif(now_node->children[0] != NULL)\n\t\t\t\tlchildren_size= now_node->children[0]->_tot;\n\t\t\telse\n\t\t\t\tlchildren_size= 0;\n            //\u5982\u679c\u5de6\u8282\u70b9\u662f\u7a7a\u6307\u9488\u90a3\u4ee3\u8868_tot\u4e3a0\n\t\t\tif(_last_rank <= lchildren_size) {\n\t\t\t\tnow_node= now_node->children[0];\n\t\t\t}\n\t\t\telse if(_last_rank == lchildren_size + 1) {\n\t\t\t\treturn now_node->_num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnow_node= now_node->children[1];\n\t\t\t\t_last_rank-= lchildren_size + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n```\n#### \u8fd9\u5c31\u662f\u6b64\u9898\u7684\u4e24\u4e2a\u64cd\u4f5c,\u4e8c\u53c9\u6392\u5e8f\u6811\u7684\u5927\u90e8\u5206\u64cd\u4f5c\u90fd\u7c7b\u4f3c.\u5982\u679c\u60f3\u5199\u66f4\u591a\u7684\u64cd\u4f5c,\u53ef\u4ee5\u7167\u7740[\u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811](https://www.luogu.org/problemnew/show/P3369) \u8fd9\u9898\u6765\u5199(\u5df2\u7ecf\u63d0\u5230\u8fc7\u4e86).\n### \u4e0b\u9762\u662f\u672c\u9898\u5b8c\u6574\u4ee3\u7801:\n### \u8bc4\u6d4b\u72b6\u6001(\u672a\u5f00\u542fO2):\n### Accepted  100\n### \u7528\u65f6: 494ms / \u5185\u5b58: 7608KB\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <time.h>\nusing namespace std;\nnamespace Cy {\n\tstruct q_outstream {\n\t\ttemplate < typename classT >\n\t\tinline q_outstream operator<<(const classT &e) const {\n\t\t\tif(e < 0) {\n\t\t\t\tputchar('-');\n\t\t\t\t(*this) << -e;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(e > 9) (*this) << (e / 10);\n\t\t\t\tputchar(e % 10 + '0');\n\t\t\t}\n\t\t\treturn (*this);\n\t\t}\n\t\tinline q_outstream operator<<(const char &c) const {\n\t\t\tputchar(c);\n\t\t\treturn (*this);\n\t\t}\n\t} qout;\n\tstruct q_int_instream {\n\t\tinline q_int_instream operator>>(int &e) const {\n\t\t\te= 0;\n\t\t\tint f= 1, c= 0;\n\t\t\twhile(c < '0' || c > '9') {\n\t\t\t\tif(c == '-') f= -1;\n\t\t\t\tc= getchar();\n\t\t\t}\n\t\t\twhile(c >= '0' && c <= '9') e= e * 10 + c - '0', c= getchar();\n\t\t\te= e * f;\n\t\t\treturn (*this);\n\t\t}\n\t} qin_int;\n}  // namespace Cy\nstruct Tree {\n\tstruct node {\n\t\tint _num, _tot;\n\t\tnode *children[2];\n\t\tnode(int _new_num) {\n\t\t\t_num= _new_num;\n\t\t\t_tot= 1;\n\t\t\tchildren[0]= children[1]= NULL;\n\t\t}\n\t} * mainnode;\n\tvoid push(int _new_num) {\n\t\tstruct node *now_node= mainnode, *last_node= NULL;\n\t\tint w= -1;\n\t\twhile(now_node != NULL) {\n\t\t\t++now_node->_tot;\n\t\t\tlast_node= now_node;\n\t\t\tif(_new_num < now_node->_num) {\n\t\t\t\tw= 0;\n\t\t\t\tnow_node= now_node->children[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw= 1;\n\t\t\t\tnow_node= now_node->children[1];\n\t\t\t}\n\t\t}\n\t\tnow_node= new node(_new_num);\n\t\tif(w != -1) {\n\t\t\tlast_node->children[w]= now_node;\n\t\t}\n\t\telse {\n\t\t\tmainnode= now_node;\n\t\t}\n\t\treturn;\n\t}\n\tint rank_num(int _last_rank) {\n\t\tstruct node *now_node= mainnode;\n\t\tint lchildren_size;\n\t\twhile(now_node != NULL) {\n\t\t\tif(now_node->children[0] != NULL)\n\t\t\t\tlchildren_size= now_node->children[0]->_tot;\n\t\t\telse\n\t\t\t\tlchildren_size= 0;\n\t\t\tif(_last_rank <= lchildren_size) {\n\t\t\t\tnow_node= now_node->children[0];\n\t\t\t}\n\t\t\telse if(_last_rank == lchildren_size + 1) {\n\t\t\t\treturn now_node->_num;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnow_node= now_node->children[1];\n\t\t\t\t_last_rank-= lchildren_size + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\tTree() {\n\t\tmainnode= NULL;\n\t}\n};\nusing namespace Cy;\nTree tree;\nint m, n, tmpx, lptr, sptr;\nint num[200000];\nint main() {\n\tqin_int >> m >> n;\n\tfor(int i= 0; i < m; i++) qin_int >> num[i];\n\twhile(n--) {\n\t\tqin_int >> tmpx;\n\t\tfor(; lptr < tmpx; lptr++) {\n\t\t\ttree.push(num[lptr]);\n\t\t}\n\t\tqout << tree.rank_num(++sptr) << '\\n';\n\t}\n\treturn 0;\n}\n```\n### \u524d\u9762\u5f88\u591a\u662f\u5feb\u8bfb\u5165\u5feb\u8f93\u51fa(\u4e3a\u4e86\u597d\u770b+\u65b9\u4fbf\u4f7f\u7528),\u4e3b\u7a0b\u5e8f\u8fd8\u662f\u5f88\u7b80\u5355\u7684\n",
        "postTime": 1540623628,
        "uid": 109815,
        "name": "Ciyang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "# P1801 \u9ed1\u5323\u5b50_NOI\u5bfc\u520a\n## \u9898\u76ee\u63cf\u8ff0\n\u6709\u4e00\u6574\u6570\u6570\u7ec4\u6709\u4e00\u7279\u6b8a\u53d8\u91cf $i$ \uff0c\u521d\u59cb\u4e3a $0$\u3002  \n\u6709\u4e24\u64cd\u4f5c\uff1a$ADD(x)$ : \u628a $x$ \u52a0\u5165\u6570\u7ec4\u3002  \n$~~~~~~~~~~~~~~~~GET$ : $i++$ , \u8f93\u51fa\u6570\u7ec4\u4e2d\u7b2c $i$ \u5c0f\u7684\u6570\u3002  \n\u6570\u636e\u8bfb\u5165\u65b9\u5f0f\uff1a$M$ \u4e2a\u6570\uff0c\u8868\u793a\u5c06\u8981\u52a0\u5165\u6570\u7ec4\u7684\u6570\uff1b$N$ \u4e2a\u6570 $u$ \uff0c**\u8868\u793a\u7b2c** $u$ **\u4e2a\u5143\u7d20\u653e\u5165\u6570\u7ec4\u540e\u542f\u52a8$GET$\u547d\u4ee4\u3002**\n## \u5206\u6790\n$1$ . \u4f60\u53ef\u4ee5\u628a\u8fd9\u9053\u9898\u60f3\u7684\u5f88\u7b80\u5355\uff0c$STL$ \u5927\u6cd5\u5c31\u53ef\u4ee5\u62ff\u90e8\u5206\u5206\uff08\u4eb2\u6d4b\u52a0\u6c27\u6c14$50$\uff09\uff0c\u4f18\u5316\u4e00\u4e0b\u60f3\u4e00\u60f3\u65b9\u6cd5\u5c31\u53ef\u4ee5\u6b63\u89e3\u79d2\u6389 ($132ms$) \uff1b\u4f60\u4e5f\u5b8c\u5168\u53ef\u4ee5\u628a\u8fd9\u5f53\u4f5c\u6570\u636e\u7ed3\u6784\u9898\uff0c\u7ebf\u6bb5\u6811\u6216\u5e73\u8861\u6811\u7ef4\u62a4\u5373\u53ef\u66b4\u529b\u6c42\u7b54\u6848 \uff08\u5947\u6162\uff0c$1000ms$) \u3002  \n$2$ . \u9898\u76ee\u7684\u8bfb\u5165\u65b9\u6cd5\u5f88\u5947\u602a\uff0c\u6697\u793a\u4f60\u5728\u7ebf\u5904\u7406\uff08 \u5f53\u7136\u6ca1\u5fc5\u8981 \uff09\u3002\n## \u89e3\u7b54\n\u66b4\u529b\uff1a\u601d\u60f3\u5c31\u7b80\u5355\u7c97\u66b4\uff0c\u7cfb\u7edf\u7684\u4f18\u5148\u961f\u5217priority_queue\u5c31\u5f88\u597d\uff0c\u6bcf\u6b21 $GET$ \u53d6\u51fa\u524d$i-1$\u4e2a\u5806\u4e2d\u7684\u6570\uff0c\u8f93\u51fa\u5806\u9876\u540e\uff0c\u518d\u52a0\u56de\u53bb\uff0c\u5f88\u663e\u7136\u6570\u636e\u6bd2\u7624\u7684\u8bdd\uff0c\u4e00\u6b21\u67e5\u8be2\u5c31\u76f8\u5f53\u4e8e\u8981\u904d\u5386\u4e24\u904d\u6570\u7ec4\uff0c$TLE$\uff0c\u4ee3\u7801\u5c31\u7b97\u4e86\u3002  \n\n\u6b63\u89e3\uff08by [huzujun](https://blog.csdn.net/huzujun/article/details/49470135)\uff09\uff1a\u53cc\u5806\u4e71\u641e\u3002\u6765\u4e2a\u5927\u6839\u5806\u548c\u5c0f\u6839\u5806\uff0c\u5728\u7ebf\u5904\u7406\uff0c\u5c0f\u6839\u5806\u5145\u5f53\u9898\u76ee\u4e2d\u7684\u90a3\u4e2a\u9ed1\u5323\u5b50\uff0c\u52a0\u5165\u6570\u636e\u3002\u4f46\u4e00\u65e6\u5230\u8fbe\u8981$GET$\u4e4b\u65f6\uff0c\u5c06\u4efb\u52a1\u4ea4\u7ed9\u5927\u6839\u5806\u3002\u628a\u5806\u9876\u4f20\u9012\u7ed9\u5927\u6839\u5806\uff0c\u90a3\u4e48\u5927\u6839\u5806\u4e2d\u5c31\u5b58\u7740\u5c0f\u6839\u5806\u4e2d\u6700\u5c0f\u7684 $i$ \u4e2a\u6570\u3002\u7136\u540e\u6211\u4eec\u7ee7\u7eed\u8bfb\u6570 $a$ \uff0c\u5982\u679c $a$ \u6bd4\u5927\u6839\u5806\u5806\u9876\u8fd8\u8981\u5927\uff0c\u90a3\u5b83\u8fdb\u5165\u5c0f\u6839\u5806\u7ee7\u7eed\u5904\u7406\uff1b\u4f46\u5982\u679c\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u77e5\u9053 $a$ \u5c5e\u4e8e\u6570\u7ec4\u524d $i$ \u5c0f\uff0c\u90a3\u4e48\u5806\u9876\u5c31\u6ca1\u6709\u5b83\u5b58\u5728\u7684\u610f\u4e49\uff08\u5c31\u50cf\u961f\u5217\u4e00\u6837\uff0c\u88ab\u6324\u51fa\u53bb\u4e86\uff09\uff0c\u56de\u5230\u5c0f\u6839\u5806\u3002\u6574\u4e2a\u7a0b\u5e8f\u5c31\u4ee5\u8fd9\u79cd\u5f62\u5f0f\u8fd0\u884c\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u679a\u4e3e\uff0c\u8fd8\u80fd\u5728\u7ebf\u89e3\u51b3\u95ee\u9898\u3002  \n\n\u6742\u6280\u5199\u6cd5\uff1a\u5f88\u591a\u540c\u5b66\u90fd\u4f7f\u7528\u5e73\u8861\u6811\u6765\u66b4\u529b\u7ef4\u62a4\u6211\u4eec\u7684\u66b4\u529b\u505a\u6cd5\uff0c\u5f88\u663e\u7136\uff0c\u65f6\u95f4\u4e0a\u80fd\u8fc7\uff0c\u4f46\u4e0d\u4f18\u79c0\u3002\u73b0\u5728\u8d34\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u94fe\u63a5\uff08\u53cd\u6b63\u6211\u4e0d\u4f1a\uff09[520\u7684\u5815\u843d\u56ed](https://www.luogu.org/blog/five20/solution-p1801)\u3002  \n\n\u4e0a\u4ee3\u7801\uff0c\u524d\u65b9\u795e\u5947\u5c0f\u6839\u5806\uff08\u61d2\u5f97\u6253\u5c0f\u6839\u5806\uff0c\u76f4\u63a5\u8d1f\u6570\u5904\u7406\uff09\uff0c\u6781\u96be\u770b\u6e05\u3002\n```cpp\n    //p\u5927\u6839\u5806\uff0cq\u5c0f\u6839\u5806\u3002\n\tm=read(),n=read();\n    for(int i=1;i<=m;i++)a[i]=read();\n    for(int i=1;i<=n;i++)\n    {\n        u=read();\n        while(cnt<u)\n        {\n            ++cnt;\n            if(!p.empty()&&a[cnt]<p.top())//\u4e00\u5b9a\u8981\u5224\u7a7a\uff0c\u5426\u5219RE\u7b49\u7740\u4f60\u3002\n            {\n                //cout<<a[cnt]<<' ';\n                q.push(-p.top());//\u8d1f\u6570\u4f7f\u4eba\u5934\u76ae\u53d1\u9ebb\u3002\n                p.pop();\n                p.push(a[cnt]);//\u4ee3\u66ff\u3002\n            }\n            else q.push(-a[cnt]);//\u76f4\u63a5\u52a0\u5165\u5c0f\u6839\u5806\u3002\n        }\n        printf(\"%lld\\n\",-q.top());\n        p.push(-q.top());\n        q.pop();\n    }\n    return 0;\n```\n\u5e73\u8861\u6811\uff0c\u770b\u770b\u5c31\u597d\u3002\n```cpp\ninline int _search(int x,int w)\n{\n    if(a[x]==w)return x;\n    while(a[x]!=w)\n    {\n        if(a[x]>w){if(son[x][0])x=son[x][0];else break;}\n        if(a[x]==w)return x;\n        if(a[x]<w){if(son[x][1])x=son[x][1];else break;}\n    }\n    return x;\n}\ninline void rotate(int x)\n{\n    int y=father[x],z=father[y];\n    if(son[z][0]==y)son[z][0]=x;else son[z][1]=x;\n    father[x]=z;\n    if(son[y][0]==x)son[y][0]=son[x][1],father[son[x][1]]=y,son[x][1]=y;\n    else son[y][1]=son[x][0],father[son[x][0]]=y,son[x][0]=y;\n    father[y]=x;\n    many[y]=many[son[y][0]]+many[son[y][1]]+num[y];\n    many[x]=many[son[x][0]]+many[son[x][1]]+num[x];\n}\ninline void splay(int x)\n{\n    while(father[x])\n    {\n        int y=father[x],z=father[y];\n        if(z==0)rotate(x);\n        else\n        {\n            if((y==son[z][0])^(x==son[y][0]))rotate(x);else rotate(y);\n            rotate(x);\n        }\n    }\n    root=x;\n}\ninline LL _find(int x)\n{\n    int pos=root;\n    while(!(x>=many[son[pos][0]]+1&&x<=many[son[pos][0]]+num[pos])&&pos!=0)\n    {\n        if(x>many[son[pos][0]]+num[pos])x-=many[son[pos][0]]+num[pos],pos=son[pos][1];\n        else pos=son[pos][0];\n    }\n    return a[pos];\n}\ninline void _insert(int x)\n{\n    if(sum==0){a[1]=x,num[1]=1,many[1]=1,father[1]=0,root=1,sum=1;return ;}\n    int pos=_search(root,x),e=0;\n    if(a[pos]==x){num[pos]++,e=pos;}\n    else\n    {\n        ++sum,a[sum]=x,many[sum]=1,num[sum]=1,father[sum]=pos;\n        if(x<a[pos])son[pos][0]=sum;\n        else son[pos][1]=sum;\n    }\n    while(pos)many[pos]++,pos=father[pos];\n    if(e)splay(e);else splay(sum);\n}//Splay\u7ef4\u62a4\u5e73\u8861\u6811\uff0c\u6211\u4e0d\u89e3\u91ca\u3002\nint main()\n{\n    m=read(),n=read();\n    memset(a,-0x7f,sizeof(a));\n    for(int i=1;i<=m;i++)data[i]=read();\n    for(int i=1;i<=n;i++)u[i]=read();\n    for(int i=1;i<=n;i++)\n    {\n        while(cnt<u[i])_insert(data[++cnt]);//\u591a\u4e48\u66b4\u529b\u3002\n        idx++;\n        printf(\"%lld\\n\",_find(idx));//\u8f93\u51fa\u7b2cidx\u5927\u3002\n    }\n    return 0;\n}\n```\n## \u603b\u7ed3\n$1$ . $STL$ \u7ec3\u624b\u9898\u3002  \n$2$ . \u66b4\u529b\u51fa\u5947\u8ff9\u3002  \n\u4e0d\u559c\u52ff\u55b7\u3002",
        "postTime": 1532917028,
        "uid": 60089,
        "name": "Trinity",
        "ccfLevel": 0,
        "title": "P1801 \u9ed1\u5323\u5b50_NOI\u5bfc\u520a by HydraNazis"
    },
    {
        "content": "\u6765\u770b\u4e00\u770bpbds\u5e93\u91cc\u7684\u7ea2\u9ed1\u6811\u5427\uff1a\n\n```cpp\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>//\u8fd9\u662f\u4e24\u4e2a\u5934\u6587\u4ef6\n#include<bits/stdc++.h> \nusing namespace  __gnu_pbds;//\u4e0estd\u7c7b\u4f3c\u7684\u7528\u6cd5\nusing namespace std; \ntree<long long,null_type,less<long long>,rb_tree_tag,tree_order_statistics_node_update>t;//\u7ea2\u9ed1\u6811\u7684\u5b9a\u4e49\ninline long long read()//C++\u82e5\u662fIO\u91cf\u5927\u7684\u8bdd\uff0c\u5fc5\u987b\u52a0\u8bfb\u5165\u4f18\u5316\n{\n    long long x=0,f=1;\n    char ch=getchar();\n    for(;ch<'0'||ch>'9';ch=getchar())\n    if(ch=='-')f=-1;\n    for(;ch>='0'&&ch<='9';ch=getchar())\n    x=x*10+ch-48;\n    return x*f;\n}\nint main()\n{\n    long long n,m,i,j,u[200001],v[200001];\n    v[0]=0;u[0]=0;\n    m=read();n=read();\n    for(i=1;i<=m;i++)u[i]=read();\n    for(i=1;i<=n;i++)v[i]=read();\n    sort(v,v+n+1);\n    for(i=0;i<n;i++)\n    {\n        for(j=v[i]+1;j<=v[i+1];j++)t.insert((u[j]<<20)+j);//\u8003\u8651\u5230\u6709\u53ef\u80fd\u91cd\u590d\uff0c\u7ed9\u6bcf\u4e2a\u6570\u653e\u5927\u540e\u52a0\u4e2a\u5c0f\u5c3e\u5df4\n        printf(\"%d\\n\",(*t.find_by_order(u[0])>>20));//\u4e00\u6b65\u5230\u4f4d\uff01\u54c8\u54c8\n        u[0]++;\n    }\n    return 0;\n}\npbds\u5e93\u7684\u73a9\u6cd5\u53ef\u4e0d\u6b62\u8fd9\u4e2a\uff0c\u613f\u4e0e\u5927\u5bb6\u5171\u540c\u63a2\u7d22\u3002\n```",
        "postTime": 1510205148,
        "uid": 2248,
        "name": "\u6c47\u6587\u5ba2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u4e24\u4e2a\u5806\u89e3\u51b3(\u6ca1\u5b66\u8fc7Splay\u7684\u849f\u84bb):\n\n\ndata\u6570\u636e\u5806,\u5176\u5806\u9876\u5143\u7d20\u4e3a\u9ed1\u5323\u5b50\u7b2ci\u4e2a\u6570\n\nback\u5904\u7406\u5806,\u6bcf\u6b21ADD\u52a0\u5165\u4e00\u4e2a\u6570\u636e\u9700\u5148\u8fdb\u5165\u8fd9\u4e2a\u5806(\u5982\u679c\u8fd9\u4e2a\u6570\u6bd4\u5806\u9876\u5c0f\u7684\u8bdd),\u4ece\u5806\u9876\u53d6\u51fa\u66f4\u65b0\u7684\u9ed1\u5323\u5b50\u7684\u7b2ci\u4e2a\u6570\n\n\n\u539f\u7406:data\u5806\u5b58\u50a8\u7684\u5176\u5b9e\u662f\u9ed1\u5323\u5b50\u4e2di\u6307\u9488\u53ca\u5176\u540e\u9762\u7684\u5143\u7d20,\u800cADD\u52a0\u5165\u7684\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u6574\u4e2a\u5806\n\n\u5982\u679c\u8fd9\u4e2a\u6570\u6bd4\u5806\u9876\u5c0f,\u4ed6\u53ef\u80fd\u4f1a\u53d6\u4ee3\u5806\u9876\u7684\u5143\u7d20,\u5982\u679c\u4ed6\u66f4\u5c0f\u7684\u8bdd,\u53ef\u80fd\u4f1a\u628ai\u4e0b\u6807\u524d\u7684\u6570\u6324\u8fdb\u53bb\n\nback\u5806\u5c31\u662f\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u64cd\u4f5c\u7684,\u5b83\u7ef4\u62a4\u4e86\u5df2\u7531\u4e8eGET\u800c\u4ece\u5806\u9876\u4e0a\u53d6\u51fa\u7684\u6570\u636e\n\n\u90a3\u4e48back\u7684\u5806\u9876\u4e00\u5b9a\u662f\u4ec5\u6bd4data\u5806\u9876\u5c0f\u4e00\u70b9\u7684\u90a3\u4e2a\u4f1a\u88ab\u6324\u4e0a\u53bb\u7684\u6570\n\n\u5982\u679c\u8fd9\u4e2a\u6570\u6bd4\u5806\u9876\u5927,\u90a3\u5c31\u5728i\u4e0b\u6807\u540e\u9762\u4e86,\u5c31\u5c3d\u7ba1\u5165\u5806\u4e86\n\n\u90a3\u4e48\u6574\u4f53\u7684\u5165\u5806\u6761\u4ef6\u5c31\u662f:\n\n\u5982\u679cADD\u6bd4back\u5806\u9876\u5c0f,\u5219\u5165back\u5806\n\n\u5426\u5219,\u5219\u5165data\u5806\n\n\n```cpp\n#include <cstdio>\n#include <queue>\n\nusing namespace std;\n\n//\u57fa\u7840\u6570\u636e\nint m, n;\nint a[200001];\n\n//\u6570\u636e\u5904\u7406\nstruct Greater        //\u4e0d\u77e5\u9053\u600e\u4e48\u56de\u4e8bVS\u5c31\u662f\u6ca1\u6709greater,\u53ea\u80fd\u624b\u5199qwq\n{\n    bool operator () (const int& a, const int& b)\n    {\n        return a > b;\n    }\n};\npriority_queue<int, vector<int>, Greater> _data;\npriority_queue<int, vector<int> > back;\n\nint main()\n{\n    scanf(\"%d%d\", &m, &n);\n    for (int i = 1; i <= m; i++)\n        scanf(\"%d\", &a[i]);\n    for (int i = 0, k = 1, t; i < n; i++)\n    {\n        scanf(\"%d\", &t);\n        for (; k <= t; k++)\n        {\n            if (back.empty() || a[k] > back.top())\n                _data.push(a[k]);\n            else\n            {\n                back.push(a[k]);\n                _data.push(back.top());\n                back.pop();\n            }\n        }\n        printf(\"%d\\n\", _data.top());\n        back.push(_data.top());\n        _data.pop();\n    }\n\n    return 0;\n}\n```",
        "postTime": 1509237607,
        "uid": 29868,
        "name": "wzhhahah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u4e2asplay\u88f8\u9898\uff0c\u800c\u4e14\u53ea\u7528\u5199insert\uff0cfindx\uff0cclear\uff0cupdate\uff0crotate\uff0csplay\u8fd9\u51e0\u4e2a\u51fd\u6570\uff0c\u52a0\u8d77\u6765\u4e0d\u5230100\u884c\u4ee3\u7801\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0cfor\uff08lef->u[i]\uff09insert\uff08a[++lef]\uff09\u3002\u7136\u540e\u67e5\u627e\u6392\u540d\u4e3ai\u7684\u5c31\u597d\u4e86\u3002\n\n#CODE\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int N=300000+10;\nint n,m,add=0,a[N],u[N],fa[N],ch[N][2],size[N],sz=0,cnt[N],key[N],root;\nvoid clear(int x)\n{\n    cnt[x]=fa[x]=key[N]=size[N]=ch[x][1]=ch[x][0]=0;\n}\nbool get(int x)\n{\n    return ch[fa[x]][1]==x;\n}\nvoid update(int x)\n{\n    if(!x)return;\n    size[x]=cnt[x];\n    if(ch[x][1])size[x]+=size[ch[x][1]];\n    if(ch[x][0])size[x]+=size[ch[x][0]];\n}\nvoid rotate(int x)\n{\n    int old=fa[x],oldfa=fa[old],son=get(x);\n    ch[old][son]=ch[x][son^1],fa[ch[x][son^1]]=old;\n    fa[old]=x,ch[x][son^1]=old,fa[x]=oldfa;\n    if(oldfa)ch[oldfa][ch[oldfa][1]==old]=x;\n    update(x),update(old);return;\n}\nvoid splay(int x)\n{\n    for(int f;f=fa[x];rotate(x))\n    if(fa[f])rotate(get(x)==get(f)?f:x);\n    root=x;\n}\nvoid insert(int x)\n{\n    if(!root)\n    {\n        root=++sz;\n        cnt[root]=size[root]=1;\n        ch[root][1]=ch[root][0]=0;\n        key[root]=x;return;\n    }\n    int now=root,father=0;\n    while(1)\n    {\n        if(x==key[now])\n        {\n            cnt[now]++;\n            update(now),update(father);\n            splay(now);return; \n        }\n        father=now,now=ch[now][key[now]<x];\n        if(!now)\n        {\n            now=++sz;\n            cnt[now]=size[now]=1;\n            ch[now][1]=ch[now][0]=0;\n            key[now]=x;fa[now]=father;\n            ch[father][key[father]<x]=now;\n            update(father);splay(now);return;\n        }\n    }\n}\nint findx(int x)\n{\n    int now=root;\n    while(1)\n    {\n        if(ch[now][0]&&x<=size[ch[now][0]])now=ch[now][0];\n        else\n        {\n            int tmp=(ch[now][0]?size[ch[now][0]]:0)+cnt[now];\n            if(x<=tmp)return key[now];\n            x-=tmp;now=ch[now][1];\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&u[i]);\n    }\n    int lef=0;\n    for(int i=1;i<=m;i++)\n    {\n        while(lef<u[i])\n        {\n            insert(a[++lef]);\n        }\n        printf(\"%d\\n\",findx(i));\n    }\n}\n```",
        "postTime": 1506043158,
        "uid": 25709,
        "name": "SNiFe",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u849f\u84bb\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3......\u8fd8\u8bf7\u5404\u4f4d\u795e\u7287\u591a\u591a\u5305\u6db5\n\n\n\u96be\u9053stl\u5c31\u90a3\u4e48\u4e0d\u5403\u9999\u561b\n\n\u4e8e\u662f\u61d2\u5f97\u624b\u6253\u7684\u6211\u627e\u5230\u4e86algorithm\u7684heap\u64cd\u4f5c\uff08\u4e24\u773c\u653e\u5149\uff09\n\n\u61d2\u60f0\u63a8\u52a8\u79d1\u6280\u7684\u8fdb\u6b65\n\n\u601d\u8def\u8fd8\u662f\u53c2\u7167\u697c\u4e0b\u7684\n\n>\u5f00\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a41\u2014\u2014i-1\u5c0f\u7684\u6570\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4i\u2014\u2014N\u5c0f\u7684\u6570\uff0c\u5f53\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u8f93\u51fa\u5c0f\u6839\u5806\u9876\uff0c\u4ece\u5c0f\u6839\u5806\u53d6\u6700\u5c0f\u6570\u5230\u5927\u6839\u5806\uff1b\u5982\u679c\u66f4\u65b0\u65f6\u5c0f\u6839\u5806\u9876\u5c0f\u4e8e\u5927\u6839\u5806\u9876\uff0c\u4ea4\u6362\u4e24\u5806\u9876\uff0c\u7ef4\u62a4\u5927\u6839\u5806\u3002\n\n\u8f93\u5165\u7684u[]\u597d\u50cf\u662f\u65e0\u5e8f\u7684 \u76f4\u63a5\u5bfc\u81f4\u53615\u4e2a\u70b9WA \u4ece\u6628\u665a\u770b\u5230\u73b0\u5728\u624d\u53d1\u73b0..\n\n\n```cpp\n//LP1801/Blackbox.cpp\n//by Stannum\n//\u4e0d\u60f3\u624b\u6253\u5806\u554a\n//\u53d1\u73b0stl\u91cc\u6709\u5806\u64cd\u4f5c! \n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<iostream>\n#include<functional>\n#include<cstring>\nusing namespace std;\nlong long M,N,queryi=1;\nlong long A[200005],u[200005];\nvector<long long> heap1;\nvector<long long> heap2;\nvoid query(){\n    long long tem1,tem2;\n    for(int i=1;i<=M;i++){\n        heap1.push_back(A[i]);\n        push_heap(heap1.begin(),heap1.end(),greater<int>());\n        if(!heap1.empty()&&!heap2.empty()&&heap1.front()<heap2.front()){\n            swap(heap1[0],heap2[0]);\n            pop_heap(heap2.begin(),heap2.end());\n            push_heap(heap2.begin(),heap2.end());\n        }\n        while(u[i]){\n            cout<<heap1[0]<<endl;\n            heap2.push_back(heap1.front());\n            pop_heap(heap1.begin(),heap1.end(),greater<int>());\n            heap1.pop_back();\n            push_heap(heap2.begin(),heap2.end());\n            u[i]--;\n        }\n    }\n}\nvoid read_in(){\n    for(int i=1;i<=M;i++)cin>>A[i];\n    memset(u,0,sizeof(u));\n    for(int i=1;i<=N;i++){\n        int x;cin>>x;\n        u[x]++;\n    }\n}\nint main(){\n    cin>>M>>N;\n    read_in();\n    query();\n}\n```",
        "postTime": 1479184292,
        "uid": 20002,
        "name": "Camber",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u6570\u7ed3\u6e23\u8868\u793a\u4e0d\u4f1a\u5e73\u8861\u6811\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u7528\u5806\u5904\u7406\u3002\n\n\u7136\u540e\u7528\u6570\u7ec4\u6a21\u62df\u53cc\u5411\u94fe\u8868\u5f04\u4e86\u4e00\u4e0b\u3002\n\n\u6b63\u96be\u53cd\u6613\uff0c\u628a\u52a0\u8282\u70b9\u8fc7\u7a0b\u5f53\u6210\u5220\u70b9\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\n\n1.\u79bb\u7ebf\u5904\u7406\uff0c\u5148\u8bfb\u5165\u6240\u6709\u6570\u636e\u3002\n\n2.\u6392\u5e8f\u5e76\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u8282\u70b9\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\u3002\n\n3.\u6700\u5f00\u59cb\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8bbf\u95ee\u8282\u70b9\uff0c\u7136\u540e\u7528\u53cc\u5411\u94fe\u8868\u5220\u9664\u64cd\u4f5c\u5220\u9664\u8282\u70b9\uff0c\u5224\u65ad\u4e00\u4e0b\u5220\u9664\u7684\u8282\u70b9\u548c\u5f53\u524d\u67e5\u627e\u7684\uff08\u7b2ci\u5c0f\uff09\u7684\u8282\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5982\u679c\u5220\u9664\u8282\u70b9\u5c0f\u7684\u8bdd\uff0c\u5c06\u5f53\u524d\u67e5\u627e\u8282\u70b9\u6307\u9488\u6307\u5411\u66f4\u5927\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9(\u6709\u70b9\u62bd\u8c61\uff0c\u770b\u4ee3\u7801\u4e5f\u53ef\u4ee5)\uff0c\u5012\u5e8f\u4fdd\u5b58\u7b54\u6848\u3002\n\n\n```cpp\nconst maxn=200010;\nvar i,j,k,l,m,n,now,link:longint;\n    del,dx,d:array[1..maxn]of longint;\n    a,next,pre:array[0..maxn]of longint;\n    v,sp:array[1..maxn]of int64;\nprocedure swap(i,j:longint);\nvar k:int64;\nbegin\n    k:=dx[i];dx[i]:=dx[j];dx[j]:=k;\n    k:=v[i];v[i]:=v[j];v[j]:=k;\nend;\nprocedure qsort(l,r:longint);\nvar i,j,x:longint;\nbegin\n    i:=l;j:=r;x:=v[(l+r)shr 1];\n    repeat\n      while v[i]<x do inc(i);\n      while v[j]>x do dec(j);\n      if(i<=j)then\n      begin\n        swap(i,j);\n        inc(i);\n        dec(j);\n      end;\n    until(i>j);\n    if i<r then qsort(i,r);\n    if j>l then qsort(l,j);\nend;\nprocedure init;\nbegin\n    readln(n,m);\n    for i:=1 to n do\n    begin\n      read(v[i]);\n      dx[i]:=i;\n      pre[i]:=i-1;\n      next[i]:=i+1;\n    end;\n    for i:=1 to m do read(del[i]);\n    qsort(1,n);\n    for i:=1 to n do d[dx[i]]:=i;\nend;\nprocedure work;\nvar i,j,k,l,r,p:longint;\nbegin\n    now:=n;link:=m;\n    for i:=m downto 1 do\n    begin\n      j:=del[i];\n      for k:=now downto j+1 do\n      begin\n        l:=d[k];\n        next[pre[l]]:=next[l];\n        pre[next[l]]:=pre[l];\n        if(v[l]<v[link])and(l<link) then link:=next[link];\n        if(v[l]=v[link])and(l=link) then link:=next[link];\n      end;\n      now:=j;\n      sp[i]:=v[link];\n      link:=pre[link];\n    end;\n    for i:=1 to m do writeln(sp[i]);\nend;\nbegin\n    init;\n    work;\nend.\n\n```",
        "postTime": 1479043257,
        "uid": 20390,
        "name": "lwhllw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "/\\*\n\u697c\u4e0b\u7684\u697c\u4e0b\u90a3\u4f4d\u8bf4\u7684\u5f88\u5bf9\uff0c\u5f00\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a41\u2014\u2014i-1\u5c0f\u7684\u6570\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4i\u2014\u2014N\u5c0f\u7684\u6570\uff0c\u5f53\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u8f93\u51fa\u5c0f\u6839\u5806\u9876\uff0c\u4ece\u5c0f\u6839\u5806\u53d6\u6700\u5c0f\u6570\u5230\u5927\u6839\u5806\uff1b\u5982\u679c\u66f4\u65b0\u65f6\u5c0f\u6839\u5806\u9876\u5c0f\u4e8e\u5927\u6839\u5806\u9876\uff0c\u4ea4\u6362\u4e24\u5806\u9876\uff0c\u7ef4\u62a4\u5927\u6839\u5806\u3002\n\n\n\u7528\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u89e3\u51b3\u6c42\u4e2d\u4f4d\u6570\u7684\u95ee\u9898\n\n\n\u8bb0\u5f97\u5f00\u59cb\u65f6\u8981\u628a\u5927\u6839\u5806\u521d\u59cb\u5316\u6210\u5f88\u5c0f\u7684\u503c\u6216\u8005\u5f00\u4e00\u4e2a\u5e03\u5c14\u503c\u8bb0\u5f55\u5927\u6839\u5806\u91cc\u6709\u6ca1\u6709\u6570\u5b57\uff0c\u5426\u5219\u7684\u8bdd\u5728\u7b2c\u4e00\u6b21\u8be2\u95ee\u524d\u67d0\u4e00\u6b21\u66f4\u65b0\u65f6\u7684\u7684\u6700\u5c0f\u503c\u662f\u8d1f\u6570\uff0c\u90a3\u5c31\u4f1a\u76f4\u63a5\u548c\u5927\u6839\u5806\u5806\u9876\u4ea4\u6362\u4e86\u3002\n\n\n\u5c3d\u7ba1\u4e0d\u521d\u59cb\u5316\u4e5f\u80fd\u8fc7\u2026\u2026\n\n\\*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\nvar\na,b:array[1..1000000]of longint;\nc,d:array[1..200000]of longint;\nj,k,i,m,n,ans,tot,xtot,now:longint;\nbo:boolean;\nprocedure put(ss:longint);\nvar\nii,jj,kk:longint;\nbegin\nif ss=1 then exit;\nif a[ss]<a[ss div 2] then\nbegin\nkk:=a[ss];\na[ss]:=a[ss div 2];\na[ss div 2]:=kk;\nend;\nput(ss div 2);\nend;\nprocedure get(ss:longint);\nvar\nii,jj,kk:longint;\nbegin\nif 2*ss>tot then exit;\nif (a[ss]>a[ss*2]) and (a[ss*2]<a[ss*2+1]) then\nbegin\nkk:=a[ss];\na[ss]:=a[ss*2];\na[ss*2]:=kk;\nget(ss*2);\nend\nelse if (a[ss]>a[ss*2+1]) and (a[ss*2]>=a[ss*2+1]) then\nbegin\nkk:=a[ss];\na[ss]:=a[ss*2+1];\na[ss*2+1]:=kk;\nget(ss*2+1);\nend\nend;\nprocedure xput(ss:longint);\nvar\nii,jj,kk:longint;\nbegin\nif ss=1 then exit;\nif b[ss]>b[ss div 2] then\nbegin\nkk:=b[ss];\nb[ss]:=b[ss div 2];\nb[ss div 2]:=kk;\nend;\nxput(ss div 2);\nend;\nprocedure xget(ss:longint);\nvar\nii,jj,kk:longint;\nbegin\nif 2*ss>xtot then exit;\nif (b[ss]<b[ss*2]) and (b[ss*2]>b[ss*2+1]) then\nbegin\nkk:=b[ss];\nb[ss]:=b[ss*2];\nb[ss*2]:=kk;\nxget(ss*2);\nend\nelse if (b[ss]<b[ss*2+1]) and (b[ss*2]<=b[ss*2+1]) then\nbegin\nkk:=b[ss];\nb[ss]:=b[ss*2+1];\nb[ss*2+1]:=kk;\nxget(ss*2+1);\nend\nend;\nbegin\nreadln(n,m);\nfor i:=1 to n do\nread(c[i]);\nfor i:=1 to m do\nread(d[i]);\nfor i:=1 to n do\nbegin\ntot:=tot+1;\na[tot]:=c[i];\nput(tot);\nif (a[1]<b[1]) and (bo=true) then\nbegin\nk:=a[1];\na[1]:=b[1];\nb[1]:=k;\nxget(1);\nend;\nwhile d[now+1]=i do\nbegin\nbo:=true;\nxtot:=xtot+1;\nb[xtot]:=a[1];\nxput(xtot);\nwriteln(b[1]);\na[1]:=a[tot];\ntot:=tot-1;\nget(1);\nnow:=now+1;\nend;\nend;\nend.\n\n```",
        "postTime": 1473925135,
        "uid": 22724,
        "name": "Marvin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u54b3\u54b3  \u8fd9\u4e2a  \u5c0f\u767d\u75f4\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u90fd\u6ca1\u7528\n\n\u601d\u60f3 \uff1a\u79bb\u7ebf\u505a\n\n\u5148\u90fd\u8bfb\u8fdb\u6765 \u6392\u4e2a\u5e8f \u7136\u540e\u67e5\u8be2\u65f6 \u4f9d\u6b21\u628a\u90a3\u6b21\u4e4b\u540e\u7684\u5220\u6389\uff08\u8fd9\u6837\u6bd4\u63d2\u6392\u5feb\u5427........\uff09\n\n\u6ce8\u610f\uff1a\u6bcf\u6b21\u67e5\u8be2\u7b2c\u51e0\u5927\u90fd\u662f\u4e0a\u6b21\u52a0\u4e00\uff0c\u6211\u5b8c\u5168\u53ef\u4ee5\u641e\u4e00\u4e2a\u5149\u6807\uff0c\u786e\u5b9a\u5f53\u524d\u7b2ck\u5927\u554a\uff0c\u8f93\u51fa\u540edec\uff08i\uff09\uff1b\u5c31\u597d\u4e86\n\n\u4e8e\u662f\u4e4e\u3002\u4e0a\u4ee3\u7801\u3002\u3002\u3002\u3002\u3002\u3002\n\n[/color][codep ]\n\n```cpp\nprogram project1;\nvar a,rank,b,weizhi:array[1..200000]of longint;\n    i,n,m,k,j,hehe:longint;\nprocedure kuaipai(z,y:longint);\nvar zz,yy,mid,jiaohuan:longint;\nbegin\n  mid:=a[(z+y)shr 1];\n  zz:=z;yy:=y;\n repeat\n  while a[zz]<mid do inc(zz);\n  while a[yy]>mid do dec(yy);\n  if zz<=yy then begin jiaohuan:=a[zz];a[zz]:=a[yy];a[yy]:=jiaohuan;\n    jiaohuan:=rank[zz];rank[zz]:=rank[yy];rank[yy]:=jiaohuan;\n  inc(zz);dec(yy); end;\n  until zz>yy;\n  if zz<y then kuaipai(zz,y);\n  if z<yy then kuaipai(z,yy);\nend;\nprocedure shanchu(yy:longint);\nvar hehe:longint;\nbegin\n  hehe:=weizhi[yy];\n  a[hehe]:=200001;\n  if hehe<=k then begin inc(k);while a[k]=200001 do inc(k);end;\nend;\nbegin\n  readln(n,m);\n  for i:=1 to n do begin read(a[i]);rank[i]:=i;end;  readln;\n  for i:=1 to m do read(b[i]); readln;\n  kuaipai(1,n);\n  for i:=1 to n do weizhi[rank[i]]:=i;\n  k:=m;  j:=m;\n  for i:=m downto 1 do begin\n    for hehe:=n downto (b[i]+1) do shanchu(hehe); rank[m]:=a[k];dec(m);\n    dec(k);while a[k]=200001 do dec(k);\n    n:=b[i];\n  end;\n  for i:=1 to j do writeln(rank[i]);\nend.\n[/codep ]\n```",
        "postTime": 1466244320,
        "uid": 19198,
        "name": "\u98ce\u683cEX",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd8\u6ca1\u6709\u7528\u5806\u7684\u9898\u89e3\uff0c\u6211\u6765\u653e\u4e00\u7bc7^\\_^\n\n\n\u5f00\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a41\u2014\u2014i-1\u5c0f\u7684\u6570\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4i\u2014\u2014N\u5c0f\u7684\u6570\uff0c\u5f53\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u8f93\u51fa\u5c0f\u6839\u5806\u9876\uff0c\u4ece\u5c0f\u6839\u5806\u53d6\u6700\u5c0f\u6570\u5230\u5927\u6839\u5806\uff1b\u5982\u679c\u66f4\u65b0\u65f6\u5c0f\u6839\u5806\u9876\u5c0f\u4e8e\u5927\u6839\u5806\u9876\uff0c\u4ea4\u6362\u4e24\u5806\u9876\uff0c\u7ef4\u62a4\u5927\u6839\u5806\u3002\n\n\n\u522b\u88ab\u4ee3\u7801\u957f\u5ea6\u5413\u5230\uff0c\u5f88\u5927\u4e00\u90e8\u5206\u662f\u590d\u5236\u7c98\u8d34\u7684\u3002\n\n\n```cpp\n\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nint heap1[500000],heap2[500000],g[500000];\nint i,k,m,n,t,sum_node1,sum_node2;\n\nvoid buildheap2(int node)\n{\n    if ((node>1) && (heap2[node]>heap2[node/2]))\n    {\n        swap(heap2[node],heap2[node/2]);\n        buildheap2(node/2);\n    }\n    return;\n}\n\nvoid insertheap2(int node)\n{\n    bool left=false,right=false;\n    if ((node*2<=sum_node2) && (heap2[node]<heap2[node*2]))\n    \u00a0\u00a0\u00a0\u00a0left=true;\n    if ((node*2+1<=sum_node2) && (heap2[node]<heap2[node*2+1]))\n    \u00a0\u00a0\u00a0\u00a0right=true;\n    if ((left) && (right))\n    \u00a0\u00a0\u00a0\u00a0if (heap2[node*2]>heap2[node*2+1])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0right=false;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0left=false;\n    if (left)\n    {\n        swap(heap2[node],heap2[node*2]);\n        insertheap2(node*2);\n    }\n    if (right)\n    {\n        swap(heap2[node],heap2[node*2+1]);\n        insertheap2(node*2+1);\n    }\n    return;\n}\n\nvoid buildheap1(int node)\n{\n    if ((node==1) && (heap1[1]<heap2[1]))\n    {\n        swap(heap1[1],heap2[1]);\n        insertheap2(1);\n        return;\n    }\n    if ((node>1) && (heap1[node]<heap1[node/2]))\n    {\n        swap(heap1[node],heap1[node/2]);\n        buildheap1(node/2);\n    }\n    return;\n}\n\nvoid insertheap1(int node)\n{\n    bool left=false,right=false;\n    if ((node*2<=sum_node1) && (heap1[node]>heap1[node*2]))\n    \u00a0\u00a0\u00a0\u00a0left=true;\n    if ((node*2+1<=sum_node1) && (heap1[node]>heap1[node*2+1]))\n    \u00a0\u00a0\u00a0\u00a0right=true;\n    if ((left) && (right))\n    \u00a0\u00a0\u00a0\u00a0if (heap1[node*2]<heap1[node*2+1])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0right=false;\n    \u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0left=false;\n    if (left)\n    {\n        swap(heap1[node],heap1[node*2]);\n        insertheap1(node*2);\n    }\n    if (right)\n    {\n        swap(heap1[node],heap1[node*2+1]);\n        insertheap1(node*2+1);\n    }\n    return;\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=n;i++)\n    \u00a0\u00a0\u00a0\u00a0scanf(\"%d\",&g[i]);\n    k=1,scanf(\"%d\",&t);\n    for (i=1;i<=n;i++)\n    {\n        sum_node1++;\n        heap1[sum_node1]=g[i];\n        buildheap1(sum_node1);\n        while (t==i)\n        {\n            printf(\"%d\\n\",heap1[1]);\n            sum_node2++;\n            heap2[sum_node2]=heap1[1];\n            buildheap2(sum_node2);\n            heap1[1]=heap1[sum_node1];\n            sum_node1--;\n            if (sum_node1>0)\n                insertheap1(1);\n            if (k<m)\n            \u00a0\u00a0\u00a0\u00a0k++,scanf(\"%d\",&t);\n            else\n            \u00a0\u00a0\u00a0\u00a0t=0;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1456981829,
        "uid": 1312,
        "name": "zhan8822",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "### \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u6216\u8005\u67e5\u8be2\u7b2ci\u5c0f\u7684\u6570\u3002i\u968f\u7740\u8be2\u95ee\u4e0d\u65ad$+1$\uff0c\u521d\u59cb\u4e3a$0$\u3002\u67e5\u8be2\u4f1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217$u$\uff0c\u8868\u793a\u5f53\u4f60\u63d2\u5165\u5230\u7b2c$u_i$\u4e2a\u6570\u7684\u65f6\u5019\u5c31\u8981\u6765\u4e00\u6b21\u8be2\u95ee\u3002$u$\u73c2\u80fd\u6709\u91cd\u590d\u3002\u90a3\u4e48\u4f60\u5c31\u8981\u91cd\u590d\u8be2\u95ee\u591a\u6b21\u3002\n\n### \u601d\u8def\n\n\u9996\u5148\u8003\u8651\u6700\u57fa\u7840\u7684\u95ee\u9898\uff1a\u5982\u4f55\u63d2\u5165\n\n\u5199\u4e00\u9897\u5e73\u8861\u6811\uff08vector\uff09\u5373\u73c2\u3002\u63d2\u5165\u7684\u65f6\u5019\uff0c\u5c31\u7528$lowerbound$\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5904\u7406\u91cd\u590d\u7684\u8be2\u95ee\u5462\uff1f\n\n\u518d\u5199\u4e00\u9897\u5e73\u8861\u6811\uff08map\uff09\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u9700\u8981\u8be2\u95ee\u591a\u5c11\u6b21\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7528\u4e00\u4e2afor\u5faa\u73af\u4e0d\u65ad\u8be2\u95ee\u5373\u73c2\u3002\n\n\u6ce8\u610f\u6211\u4eec\u8fd8\u8981\u7528\u4e00\u4e2a\u6574\u5f62\u5185\u5b58\u5757\uff08int\uff09\u6765\u7ef4\u62a4\u90a3\u4e2a\u968f\u7740\u8be2\u95ee\u4e0d\u65ad$+1$\u7684\u53d8\u91cf$i$\u3002\n\n\u8fd8\u8981\u5199\u4e24\u4e2a\u968f\u673a\u7ebf\u6027\u8868\uff08\u6570\u7ec4\uff09\u6765\u7ef4\u62a4\u63d2\u5165\u7684\u6570\uff0c\u548c\u5e8f\u5217$u$\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace Flandre_Scarlet\n{\n    #define N 255555\n    #define F(i,l,r) for(int i=l;i<=r;++i)\n    #define D(i,r,l) for(int i=r;i>=l;--i)\n    #define Fs(i,l,r,c) for(int i=l;i<=r;c)\n    #define Ds(i,r,l,c) for(int i=r;i>=l;c)\n    #define Tra(i,u) for(int i=G.Start(u),__v=G.To(i);~i;i=G.Next(i),__v=G.To(i))\n    #define MEM(x,a) memset(x,a,sizeof(x))\n    #define FK(x) MEM(x,0)\n    int n,m;\n    int a[N],q[N];//\u968f\u673a\u7ebf\u6027\u8868\n    void R1(int &x)\n    {\n        x=0;char c=getchar();int f=1;\n        while(c<'0' or c>'9') f=(c=='-')?-1:1,c=getchar();\n        while(c>='0' and c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar();\n        x=(f==1)?x:-x;\n    }\n    void Input()\n    {\n        R1(n),R1(m);\n        F(i,1,n) R1(a[i]);\n        F(i,1,m) R1(q[i]);\n    }\n\n    map<int,int> cnt;//\u5e73\u8861\u68111\n    vector<int> T;//\u5e73\u8861\u68112\n    #define LB(x) lower_bound(T.begin(),T.end(),x)\n    #define UB(x) upper_bound(T.begin(),T.end(),x)\n    void Soviet()\n    {\n        F(i,1,m) cnt[q[i]]++;\n        int k=0;//\u6574\u5f62\u5185\u5b58\u5757\n        F(i,1,n)\n        {\n            T.insert(LB(a[i]),a[i]);//\u63d2\u5165\u64cd\u4f5c\n            //\u4f60\u4ee5\u4e3a\u6211\u662fO(n)\uff0c\u5176\u5b9e\u6211\u662fO(1)\u54d2\uff01\n            F(j,1,cnt[i])\n            //\u4f60\u4ee5\u4e3a\u6211\u662fO(n^2)\uff0c\u5176\u5b9e\u6211\u662f\u5747\u644aO(n)\u54d2\uff01\n            {\n                printf(\"%d\\n\",T[k]);\n                ++k;\n            }\n        }\n    }\n\n    #define Flan void\n    Flan IsMyWife()\n    {\n        Input();\n        Soviet();\n    }\n}\nint main()\n{\n    Flandre_Scarlet::IsMyWife();\n    getchar();getchar();\n    return 0;\n}\n```",
        "postTime": 1572743767,
        "uid": 106252,
        "name": "LightningUZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "~~\u4e00\u770b\u8fd9\u9053\u9898~~\u6211\u5c31\u4e3e\u7684\u662f\u4f18\u5148\u961f\u5217\uff0c\u7136\u800c\u4f18\u5148\u961f\u5217\u5e76\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee \n~~\u806a\u660e\u4f36\u4fd0\u7684~~\u6211\u60f3\u5230\u8981\u7528\u4e24\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u4e00\u4e2a\u4ece\u5c0f\u5230\u5927\uff08box2\uff09\uff0c\u53e6\u4e00\u4e2a\u4ece\u5927\u5230\u5c0f\uff08blbox\uff09  \n\u6bcf\u6b21\u8f93\u5165\u4e00\u4e2a\u63d0\u53d6\u8981\u6c42\uff0c\u5e76\u5c06\u63d0\u53d6\u4e4b\u524d\u52a0\u5165\u7684\u6570\u52a0\u5165\u5c0f\u6839\u5806  \n\u4e4b\u540e\u5c06\u5c0f\u6839\u5806\u7684\u7b2c\u4e00\u4e2a\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u7684\uff09\u52a0\u5165\u5927\u6839\u5806\u5e76\u8f93\u51fa\u5927\u6839\u5806\u961f\u9996\uff08\u4e5f\u5c31\u662f\u6700\u5927\u7684\uff09\u5c31\u662f\u7ed3\u679c  \n\u4f46\u662f\uff08\u4e00\u6709\u8fd9\u4fe9\u5b57\u5c31\u6ca1\u597d\u4e8b\uff09  \n\u6709\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u5982\u679c\u5c0f\u6839\u5806\u7684\u6570\u6bd4\u5927\u6839\u5806\u7684\u6570\u5927\u5c31\u4f1a\u51fa\u95ee\u9898  \n\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u5411\u5c0f\u6839\u5806\u4e2d\u63d2\u5165\u5143\u7d20\u65f6\uff0c\u6bd4\u8f83\u4e24\u5bf9\u9996\u82e5\u5927\u6839\u5806\u961f\u9996\u8f83\u5927\u5219\u4ea4\u6362\u5b83\u4eec  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint a[200005],tmp;\nint main()\n{\n\tint m,n,w=0,q;\n\tcin>>m>>n;\n\tpriority_queue<int> blbox;\n\tpriority_queue<int,vector<int>,greater<int> > box2;\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>a[i];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>q;\n\t\twhile(w<q)\n\t\t{\n\t\t\tw++;\n\t\t\tbox2.push(a[w]);\n\t\t\tif(!blbox.empty()&&blbox.top()>box2.top())\n\t\t\t{\n\t\t\t\ttmp=blbox.top();\n\t\t\t\tblbox.pop();\n\t\t\t\tblbox.push(box2.top());\n\t\t\t\tbox2.pop();\n\t\t\t\tbox2.push(tmp);\n\t\t\t}\n\t\t}\n\t\tblbox.push(box2.top());\n\t\tbox2.pop();\n\t\tcout<<blbox.top()<<endl;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570442179,
        "uid": 182525,
        "name": "yangyujia18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "### \u9996\u5148\u7ea6\u5b9a\uff1a \n1. \u4ee5\u4e0bn\u6307\u4ee3\u7684\u6570\u7684\u6570\u91cf\uff0c\u4e0d\u662f\u9898\u76ee\u6240\u6307\u7684n\n\n2. \u4ee5\u4e0bm\u6307\u4ee3\u8be2\u95ee\u7684\u6570\u91cf\uff0c\u4e0d\u662f\u9898\u76ee\u6240\u6307\u7684m\n\n~~\uff08\u4e0d\u597d\u610f\u601d\uff0c\u8fd9\u662f\u672c\u4eba\u4e60\u60ef\uff09~~\n##  \u5206\u5757+\u5806  $O(m*\\sqrt n*\\log n)$~~(\u81ea\u5df1yy\u51fa\u6765\u7684)~~\n**\u5806\u4e00\u6b21\u53ea\u80fd\u8f93\u51fa\u5806\u9876\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6211\u8981\u627e\u7b2ck\u5c0f\u7684\u5143\u7d20\uff0c \u7406\u8bba\u4e0a\u590d\u6742\u5ea6\u662f $O\uff08k*n\uff09,\u8fd9\u6837\u80af\u5b9a\u4f1aTLE$**\n\n**\u90a3\u4e48\u6211\u4eec\u80fd\u4e0d\u80fd\uff0c\u628a\u8fd9\u4e9b\u6570\u6392\u5e8f\u540e\u5206\u6210\u51e0\u6bb5\u8fde\u7eed\u7684\u6570\u5728\u51e0\u4e2a\u5806\u91cc,\u6ca1\u6b21\u67e5\u627e\u5148\u53bb\u627e\u5728\u54ea\u4e2a\u5806\uff0c\u518d\u53bb\u627e\u5728\u5806\u91cc\u7684\u6392\u540d**\n\n**\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8df3\u8fc7\u4e00\u4e9b\u6570\u4e86**\n\n**\u5982\u679c\u4f60\u5b66\u8fc7\u5206\u5757\u7684\u8bdd\uff0c\u4f60\u5c31\u53ef\u4ee5\u53cd\u5e94\u8fc7\u6765\u4e86,\u5206\u6210\u6839\u53f7n\u6bb5\u7406\u8bba\u4e0a\u662f\u6700\u597d\u7684\uff0c\u56e0\u4e3a\u5e73\u644a\u4e86\u4e24\u4e2a\u6b65\u9aa4\u7684\u590d\u6742\u5ea6**\n\n### **\u67e5\u627e\u7684\u65f6\u5019\u901a\u8fc7$O(\\sqrt n)$\u6765\u627e\u5230\u5728\u54ea\u4e2a\u5806\uff0c\u518d\u7528$O(\\sqrt n* \\log n)$\u5728\u5806\u91cc\u6765\u627e\u5230\u5b83\u7684\u5177\u4f53\u6570\u503c**\n\n### **\u63d2\u5165\u503c\u4e0e\u67e5\u627e\u7c7b\u4f3c\uff0c\u5148\u627e\u5230\u6240\u5904\u7684\u5806\uff0c\u518d\u52a0\u5165\u5230\u5806**\n\n\u8fd8\u6709\u7ec6\u8282\u95ee\u9898\uff0c\u8bf7\u770b\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<cstring>\n#define int long long\nusing namespace std;\nconst int N=3e5+10,M=N;\nint A[N],B[N],belong[N];\npriority_queue<int>q[M];\nint m,n;\ninline void add(int x){\n\tint op=lower_bound(B+1,B+1+m,x)-B;\n\tint blo=belong[op];\n\tq[blo].push(-x);\n}\nint size,all;\ninline int ask(int x){\n\tint op;\n\tfor(int i=0;i<=m;i++){\n\t\tif(x>q[i].size())\n\t\tx-=q[i].size();\n\t\telse{\n\t\t\top=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tvector<int>p;\n\tint ans=0;\n\twhile(q[op].size()){\n\t\tint u=-q[op].top();q[op].pop();\n  \t\t//\u5f39\u51fa\n\t\tp.push_back(u);\n\t\tx--;\n\t\tif(x==0){\n\t\t\tans=u;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=0;i<p.size();i++)\n\tq[op].push(-p[i]);//\u628a\u5f39\u51fa\u7684\u6570\u518d\u653e\u56de\u53bb\n                             \n\treturn ans;\n}\nsigned main(){\n\tcin>>m>>n;\n\tsize=pow(m,1.0/3.0);\n\tall=ceil((double)m/size);\n\tfor(int j=1;j<=all;j++)\n\tfor(int i=(j-1)*size+1;i<=j*size;i++)\n\tbelong[i]=j;\n  \t//\u521d\u59cb\u5316\u5757\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%lld\",&A[i]);\n\t\tB[i]=A[i];\n\t}\n\tsort(B+1,B+1+m);\n   //\u6392\u5e8f\u65b9\u4fbf\u5224\u65ad\u6392\u540d\uff0c\u9009\u62e9\u5806\n\tint num=1;\n\tfor(int i=1,x;i<=n;i++){\n\t\tscanf(\"%lld\",&x);\n\t\tfor(int j=num;j<=x;j++)add(A[j]);\n\t\tnum=x+1;\n\t\tprintf(\"%lld\\n\",ask(i));\n\t}\n}\n```\n## \u6700\u540e\u5ba3\u4f20\u4e00\u4e0b\u6211\u7684[\u535a\u5ba2](https://www.cnblogs.com/naruto-mzx/) ",
        "postTime": 1569719949,
        "uid": 113695,
        "name": "\u767d\u6728\u5076\u541b",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1801"
    },
    {
        "content": "## \u6211\u770b\u8fd9\u4e48\u591a\u9898\u89e3\u6ca1\u6709\u4eba\u5199\u6307\u9488\u7248\u7684\u65e0\u65cbTreap\uff0c\u6211\u6765\u5199\u4e00\u4e2a  \n\n*\u5982\u679c\u4e0d\u4f1aFHQTreap\u53ef\u4ee5\u770b\u6211\u7684[\u535a\u5ba2](https://www.cnblogs.com/Juruo1103/p/10281403.html)*\n\n**\u6307\u9488\u7248FHQ\u53c8\u597d\u5199\u53c8\u597d\u8c03\u8dd1\u7684\u8fd8\u5feb\uff0c\u5899\u88c2\u63a8\u8350**  \n\n\u9898\u9762\u65e0\u9700\u591a\u8bb2\uff0c\u63d2\u5165\u6570\u503c\u548c\u67e5\u8be2\u7b2c$k$\u5c0f\uff0c\u5e73\u8861\u6811\u6a21\u677f\u64cd\u4f5c  \n\n\u65e0\u65cb$Treap$\u7531\u4e8e\u6709\u6309\u7167$size$\u6765$Split$\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u5199\u4e00\u4e2a$Rank$\u51fd\u6570\uff0c\u7136\u540e\u8fd9\u4e24\u79cd\u64cd\u4f5c\u90fd\u53ef\u4ee5\u57fa\u4e8e$Rank$\u5b8c\u6210  \n\n#### \u63d2\u5165\u6570\u503c\n\n\u67e5$Rank$\uff0c\u5206\u88c2\u51fa$size$\u4e3a$Rank - 1$\u7684\u5b50\u6811\uff0c\u628a\u65b0\u8282\u70b9\u653e\u5165\u4e2d\u95f4\u5408\u5e76\uff0c\u4ee3\u7801\u5982\u4e0b  \n\n```cpp\nvoid Insert(int val) {\n    int rank = Rank(root, val);\n    Node *temp1, *temp2;\n    Split(root, rank, temp1, temp2);\n    Node *nod = new Node(val);\n    root = Merge(temp1, nod);\n    root = Merge(root, temp2);\n}\n```\n\n#### \u67e5\u8be2\u7b2ck\u5c0f\n\n\u6309\u7167\u9700\u8981\u7684$k$\u503c\u5206\u88c2\u51fa$size$\u4e3a$k - 1$\u7684\u5b50\u6811\uff0c\u5728\u5269\u4f59\u90e8\u5206\u5206\u88c2\u51fa$size$\u4e3a$1$\u7684\u8282\u70b9\uff0c\u8f93\u51fa\u8282\u70b9\u6743\u503c\uff0c\u7136\u540e\u539f\u6837\u62fc\u56de\u53bb\uff0c\u4ee3\u7801\u5982\u4e0b  \n\n```cpp\nint FindKth(int k) {\n    Node *x1, *x2, *y1, *y2;\n    Split(root, k - 1, x1, x2);\n    Split(x2, 1, y1, y2);\n    Node *now = y1;\n    root = Merge(x1, Merge(now, y2));\n    return now ? now->val : 0;\n}\n```   \n\n### \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing std::min;\nusing std::max;\n\nconst int MAXM = 2e5 + 5;\n\nint add[MAXM], get[MAXM];\n\nint n, m;\n\nint Rand() {\n    static int seed = 39444;\n    return seed = (((seed ^ 1433223) + 810872ll) * 19260817ll) % 2147483647;\n}\n\nstruct Node{\n    Node *child[2];\n    int val, key, size;\n    \n    Node(int val):val(val), size(1), key(Rand()) {\n        child[0] = NULL; child[1] = NULL;\n    }\n    \n    void Update() {\n        size = 1;\n        if (child[0]) size += child[0]->size;\n        if (child[1]) size += child[1]->size;\n    }\n};\n\nNode *root = NULL;\n\nNode* Merge(Node* a, Node* b) {\n    if (!a || !b) return a ? a : b;\n    if (a->key < b->key) {\n        a->child[1] = Merge(a->child[1], b);\n        a->Update();\n        return a;\n    } else {\n        b->child[0] = Merge(a, b->child[0]);\n        b->Update();\n        return b;\n    }\n}\n\nvoid Split(Node *now, int k, Node *&t1, Node *&t2) {\n    if (!now) {\n        t1 = t2 = NULL; return;\n    } \n    if (!k) {\n        t1 = NULL; t2 = now; return;\n    }\n    if (k >= now->size) {\n        t1 = now; t2 = NULL; return;\n    }\n    int ls = now->child[0] ? now->child[0]->size : 0;\n    if (ls >= k) {\n        Node *temp;\n        Split(now->child[0], k, t1, temp);\n        t2 = now; t2->child[0] = temp; \n        t2->Update(); return;\n    } else {\n        Node *temp;\n        Split(now->child[1], k - ls - 1, temp, t2);\n        t1 = now; t1->child[1] = temp;\n        t1->Update(); return;\n    }\n}\n\nint Rank(Node *now, int k) {\n    if (!now) return 0;\n    int ls = now->child[0] ? now->child[0]->size : 0;\n    if (now->val <= k) return ls + 1 + Rank(now->child[1], k);\n    else return Rank(now->child[0], k);\n}\n\nint FindKth(int k) {\n    Node *x1, *x2, *y1, *y2;\n    Split(root, k - 1, x1, x2);\n    Split(x2, 1, y1, y2);\n    Node *now = y1;\n    root = Merge(x1, Merge(now, y2));\n    return now ? now->val : 0;\n}\n\nvoid Insert(int val) {\n    int rank = Rank(root, val);\n    Node *temp1, *temp2;\n    Split(root, rank, temp1, temp2);\n    Node *nod = new Node(val);\n    root = Merge(temp1, nod);\n    root = Merge(root, temp2);\n}\n\nint main() {\n    scanf(\"%d %d\", &m, &n);\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d\", add + i);\n    }\n    int ii = 0, cur = 1;\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", get + i);\n        while (cur <= get[i]) {\n            Insert(add[cur]); cur++;\n        }\n        printf(\"%d\\n\", FindKth(++ii));\n    }\n    return 0;\n}\n```",
        "postTime": 1548857418,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u53d1\u73b0\u8fd9\u9053\u9898\u6709\u4e3b\u5e2d\u6811\u7684\u505a\u6cd5...\uff08\u6bd5\u7adf\u53ef\u4ee5\u79bb\u7ebf\uff09\n\n\u4e0d\u8fc7\u6700\u540e\u6211\u8fd8\u662f\u6ca1\u6709\u6253\u4e3b\u5e2d\u6811\uff08\u61d2\uff09\n\n\u4e8e\u662f\u4e4e FHQ treap \u6c34\u8fc7\u53bb\u4e86...\n\n\n\u90fd\u662fFHQ \u7684\u5e38\u89c4\u64cd\u4f5c...\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\uff0c\u677f\u5b50\u9898\u4e86\u3002\u3002\u3002\n\n```cpp\n//by Judge\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\nconst int M=2e5+111;\n//#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n\tint x=0,f=1; char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') f=-1;\n\tfor(;isdigit(c);c=getchar()) x=x*10+c-'0'; return x*f;\n}\nchar sr[1<<21],z[20];int C=-1,Z;\ninline void Ot(){fwrite(sr,1,C+1,stdout),C=-1;}\ninline void print(int x){\n    if(C>1<<20)Ot();if(x<0)sr[++C]=45,x=-x;\n    while(z[++Z]=x%10+48,x/=10);\n    while(sr[++C]=z[Z],--Z);sr[++C]='\\n';\n}\nint n,m,A[M],B,now,cnt,root;\nstruct Node { int val,key,siz,ch[2]; } t[M];\ninline int Rand() { static int seed=703; return seed=int(seed*48271LL%(~0u>>1)); }\ninline void update(int now){ t[now].siz=t[t[now].ch[0]].siz+t[t[now].ch[1]].siz+1; }\nint merge(int u,int v) {\n    if(!u || !v) return u|v;\n    if(t[u].key<t[v].key) { t[u].ch[1]=merge(t[u].ch[1],v),update(u); return u; }\n\telse { t[v].ch[0]=merge(u,t[v].ch[0]),update(v); return v; }\n}\nvoid split_val(int now,int k,int& x,int& y) {\n    if(!now) return (void)(x=y=0);\n    if(t[now].val<=k) split_val(t[x=now].ch[1],k,t[now].ch[1],y);\n    else split_val(t[y=now].ch[0],k,x,t[now].ch[0]); update(now);\n}\nvoid split_k(int now,int k,int& x,int& y) { \n    if(!now) return (void)(x=y=0);\n    if(t[t[now].ch[0]].siz>=k) split_k(t[y=now].ch[0],k,x,t[now].ch[0]);\n    else split_k(t[x=now].ch[1],k-t[t[now].ch[0]].siz-1,t[now].ch[1],y);\n    update(now);\n}\ninline void ins(int x) { int u,a,b; t[u=++cnt].key=Rand(),t[u].val=x,t[u].siz=1,split_val(root,x,a,b),root=merge(merge(a,u),b); }\ninline int get_val(int x) { int a,b,c,d,e; split_k(root,x-1,a,b),split_k(b,1,c,d),e=t[c].val,root=merge(a,merge(c,d)); return e; }\nsigned main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;++i) A[i]=read();\n\tfor(int i=1;i<=m;++i){\n\t\tB=read(); while(now<B) ins(A[++now]); print(get_val(i));\n\t} Ot(); return 0;\n}\n```\n\n\n\n\n\u4e8e\u662f\u4e4e\u53e3\u80e1\u4e00\u901a\u4e3b\u5e2d\u6811\u505a\u6cd5\uff1a\n\n\u9996\u5148\u6211\u4eec\u5bf9\u4e8e\u8bfb\u5165\u7684\u6570\u5b58\u5165 A\u3001B \u6570\u7ec4\uff0c\u5bf9 B \u6392\u5e8f\uff0c\u4ee5\u6b64\u79bb\u6563\u3002\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u7684\u65f6\u5019 update \u4e00\u4e0b\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u67e5\u8be2\u5f53\u524d\u7248\u672c\u5c31\u597d\u4e86\u3002\n\n\u5177\u4f53\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u91c7\u7528\u5e73\u8861\u6811\u7684\u7c7b\u4f3c\u601d\u60f3\uff1a\n\n\t\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u534a\u8fb9\u90e8\u5206\u503c\u57df\u6709\u7684\u6570 >= \u67e5\u8be2\u6392\u540d\u5c31\u8fdb\u5165\u5de6\u5b50\u6811\uff0c\n    \u5426\u5219\u67e5\u8be2\u7684\u6392\u540d\u51cf\u53bb\u5de6\u5b50\u6811 siz \uff0c\u7136\u540e\u8fdb\u5165\u6709\u5b57\u6570\u67e5\u8be2\n\n\u4e3b\u5e2d\u6811\u505a\uff0c\u540c\u6837\u662f\u677f\u5b50\u9898...",
        "postTime": 1535766041,
        "uid": 38576,
        "name": "J\u03bcdge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "# \u4e3b\u5e2d\u6811\u89e3\u51b3\n### \u4e3b\u5e2d\u6811\u4e3b\u8981\u7528\u4e8e\u5bf9\u4e00\u4e2a\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u6bb5\uff0c\u6c42\u5b83\u7684\u7b2ck\u5927/\u5c0f\u7684\u503c\n## \u6240\u4ee5\u6b64\u95ee\u9898\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u8f7b\u677e\u89e3\u51b3\n### \u4e3b\u5e2d\u6811\u662f\u4e00\u79cd\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u7ec4\u4e2d\u503c\uff08i\uff09\uff0c\u90fd\u6709\u4e00\u9897\u5c5e\u4e8e\u5b83\u7684\u7ebf\u6bb5\u6811\n### \u5b66\u8fc7\u7ebf\u6bb5\u6811\u7684\u90fd\u77e5\u9053\uff0c\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u70b9\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e9b\u529f\u80fd\u503c\uff08eg\uff1asum\uff0cminv\uff0cmaxv\u2026\u2026\uff09\n### \u5728\u5c5e\u4e8e\u70b9i\u4e3b\u5e2d\u6811\u4e0a\uff0c\u6bcf\u4e2a\u70b9\u7684\u529f\u80fd\u503csum\u6240\u8bb0\u5f55\u7684\u662f\u30101\uff0ci\u3011\u4e2d\u6240\u6709\u6570\u503c\uff0c\u5728\u8fd9\u4e2a\u70b9\u7ebf\u6bb5\u4e0a\u7684\u51fa\u73b0\u4e2a\u6570\u3002\n## \u8fd8\u8981\u7528\u5230Hash\uff0c\u5373\u5728\u6570\u7ec4\u4e0a\u4e0d\u540c\u503c\u7684\u5bf9\u5e94\u503c\u4e0d\u540c\n#### \u5982   3 1 1 2 5 \u6392\u5e8f\u540e 1 1 2 3 5\n#### \u5bf9\u5e94 Hash[1] = 1, Hash[2] = 2, Hash[3] = 3, Hash[4] = 5;\n#### \u7ebf\u6bb5\u6811\u603b\u957f\u5ea6\u4e3aHash\u7684\u6700\u5927\u503c 4![\u4e3b\u5e2d\u6811\u89e3\u91ca](https://cdn.luogu.com.cn/upload/pic/23710.png)\n### \u5982\u56fe\u5de6\u8fb9\u7684\u6811\u4e3a\u30101,4\u3011\u7684\u7ebf\u6bb5\u6811\uff084\u5c31\u662fHash\u5bf9\u5e94\u6570\u503c\u6700\u5927\u7684\uff09\n### \u53f3\u56fe\u6811\u4e3a\u5bf9\u4e8ei=3\u65f6\uff0c\u6bcf\u4e00\u6bb5\u6240\u5bf9\u5e94\u7684sum\u503c\n3\u5c5e\u4e8e\u30101\uff0c4\u3011\uff0c\u30101,4\u3011sum +1\n\n3\u5c5e\u4e8e\u30103\uff0c4\u3011\uff0c\u30103,4\u3011sum +1\n### \u5bf9\u4e8e\u540e\u9762\u6bcf\u4e00\u4e2a\u6570\uff0c\u968f\u7740i\u7684\u9012\u589e\uff0c\u90fd\u4f1a\u9020\u4e00\u9897\u65b0\u7684\u6811\n### \u4f46\u6709\u4e9b\u6709\u4e9b\u6811\u679d\u8981\u66f4\u65b0\uff0c\u6709\u4e9b\u4e0d\u7528\uff0c\u5982i=0\u5230i=1\u8fd9\u4e24\u68f5\u6811\uff0c\u5c31\u53ea\u66f4\u65b0\u4e86\u53f3\u8fb9\u7684\u6811\u679d\u800c\u5de6\u8fb9\u7684\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u6545\u6cbf\u7528\u4e0a\u6b21\u7684\u6811![\u56fe\u7684\u6cbf\u7528](https://cdn.luogu.com.cn/upload/pic/23714.png)\n### \u5982\u56fe\uff0c\u5de6\u8fb9\u4e3a\u5386\u53f2\u7684\u6811\uff0c\u53f3\u8fb9\u4e3a\u65b0\u521b\u5efa\u7684\u6811\uff0c\u7eff\u8272\u7684\u6570\u5b57\u4e3asum\u503c\uff0c\u88ab\u7ea2\u8272\u5708\u4f4f\u7684\u70b9\u90fd\u4e3a\u8fd9\u6b21\u65b0\u521b\u5efa\u6811\u6240\u66f4\u65b0\u7684\u70b9\uff0c\u800c\u6ca1\u6709\u5708\u7684\uff0c\u90fd\u6cbf\u7528\u4e0a\u6b21\u6811\u7684\u70b9\uff0c\u8fd9\u6837\u65e2\u53ef\u4ee5\u8282\u7ea6\u7a7a\u95f4\uff0c\u53c8\u4e0d\u5fc5\u91cd\u65b0\u5efa\u6574\u68f5\u6811\u3002\n# AC\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N = 200000 + 10;\nint n, m;\nint Hash[N], A[N], T[N], tot;\n//Hash\u5373\u5bf9\u5e94\u6570\u5b57\uff0c A\u4e3a\u8f93\u5165\u6570\u7ec4\u50a8\u5b58\uff0cT\u4e3a\u5bf9\u4e8e\u4e0d\u540ci\u6709\u4e0d\u540c\u7684\u6839\u8282\u70b9\uff0ctot\u4e3a\u6240\u6709\u8282\u70b9\u8ba1\u6570\u5668\n\n//\u5bf9\u6811\u4e0a\u6bcf\u4e2a\u70b9\u7684\u6570\u636e\nstruct node\n{\n    int left, right, sum;\n}tree[N * 50];\n\nint build_tree(int l, int r)\n{\n//\u4e0e\u7ebf\u6bb5\u6811\u5efa\u6811\u76f8\u540c\n    int root = ++tot;\n    //\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6ca1\u6709\u6570\u503c\u51fa\u73b0\uff0csum\u503c\u6545\u4e3a0\n    tree[root].sum = 0;\n    if (l < r)\n    {\n        int mid = (l + r) / 2;\n        tree[root].left = build_tree(l, mid);\n        tree[root].right = build_tree(mid + 1, r);\n    }\n    return root;\n}\n\nint update(int pre, int l, int r, int x)\n{\n    int root = ++tot;\n    //\u6cbf\u7528\u5386\u53f2\u8282\u70b9\n    tree[root].left = tree[pre].left;\n    tree[root].right = tree[pre].right;\n    //\u5bf9\u4e8e\u65b0\u7684\u6811\u8282\u70b9\uff0c\u5982\u679c\u904d\u5386\u5230\u4e86\uff0c\u8bf4\u660ex\u7684Hash\u503c\u4e00\u5b9a\u5c5e\u4e8e\u8fd9\u4e2a\u8282\u70b9\u7684\u8303\u56f4\u4e2d\u7684\uff0c\u6240\u4ee5sum\u8bb0\u5f55\u6570\u503c\u51fa\u73b0\u6b21\u6570\u589e\u591a\u4e00\u6b21\n    tree[root].sum = tree[pre].sum + 1;\n    \n    if (l < r)\n    {\n        int mid = (l + r) / 2;\n        //\u5224\u65adx\u5c5e\u4e8e\u5de6\u5b50\u70b9\u8303\u56f4\u8fd8\u662f\u53f3\u5b50\u70b9\u8303\u56f4\n        if (x <= mid) tree[root].left = update(tree[pre].left, l, mid, x);\n        else tree[root].right = update(tree[pre].right, mid + 1, r, x);\n    }\n    return root;\n}\n\nint query(int old_tree, int new_tree, int l, int r, int k)\n{\n    if (l == r) return l;\n    //\u8ba1\u7b97\u51fa\u5de6\u8fb9\u4e00\u5171\u6709\u591a\u5c11\u6570\uff0c\u7528\u8be2\u95ee\u7684\u6811(new_tree)sum\u51cf\u53bb\u521d\u59cb\u72b6\u6001(old_tree)\u7684\u6811sum\uff08\u521d\u59cb\u72b6\u6001\u503c\u90fd\u662f0\uff09\n    int left_num = tree[tree[new_tree].left].sum - tree[tree[old_tree].left].sum;\n    int mid = (l + r) / 2;\n    //\u5224\u65ad\u7b2ck\u5c0f\u6570\u5b57\u5728\u5de6\u513f\u5b50\u8fd8\u662f\u53f3\u513f\u5b50\n    if (left_num >= k)\n        return query(tree[old_tree].left, tree[new_tree].left, l, mid, k);\n    else\n        return query(tree[old_tree].right, tree[new_tree].right, mid + 1, r, k - left_num);\n}\n\nint main()\n{\n    scanf(\"%d %d\", &n, &m);\n    for (int i = 1; i <= n; i++)\n    {\n        scanf(\"%d\", &A[i]);\n        Hash[i] = A[i];\n    }\n    //\u5148\u5bf9\u539f\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    //\u5982 5 1 1 2 5\n    //\u6392\u5e8f\u540e 1 1 2 5 5\n    sort(Hash + 1, Hash + n + 1);\n    //\u518d\u5bf9\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u8fdb\u884c\u53bb\u91cd\uff0c\u53bb\u6389\u91cd\u590d\u7684\u6570\u503c\n    //\u5373 1 2 5\n    //\u6240\u4ee5\u5bf9\u5e94\u7684Hash\u503c\u4e3aHash[1] = 1, Hash[2] = 2, Hash[3] = 5\n    //d\u8868\u793a\u7684\u662fHash\u503c\u603b\u957f\u5ea6\uff0c\u5982\u4e0a\u4f8b\u6570\u7ec4\u603b\u957f\u5ea6\u4e3ad=3\n    int d = unique(Hash + 1, Hash + n + 1) - Hash - 1;\n    //\u5bf9\u957f\u5ea6\u4e3a\u30101\uff0cd\u3011\u7684\u7ebf\u6bb5\uff0c\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\n    T[0] = build_tree(1, d);\n    for (int i = 1; i <= n; i++)\n    {\n    \t//x\u4e3a\u6570\u503cA[i]\u6240\u5bf9\u5e94\u7684Hash\u503c\uff0c\u7528\u7cfb\u7edf\u81ea\u5e26\u4e8c\u5206\u641c\u7d22\u5f97\u5230\n        int x = lower_bound(Hash + 1, Hash + n + 1, A[i]) - Hash;\n        //\u5bf9\u4e8e\u6bcf\u4e2ai\uff0c\u90fd\u5efa\u4e00\u68f5\u6811\n        T[i] = update(T[i - 1], 1, d, x);\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        int r;\n        scanf(\"%d\", &r);\n        //query\u6240\u8fd4\u56de\u7684\u662f\u7b54\u6848\u6240\u5bf9\u5e94\u7684Hash\u503c\n        int x = query(T[0], T[r], 1, d, i);\n        printf(\"%d\\n\", Hash[x]);\n    }\n    return 0;\n}\n\n```\n### \u8bb2\u7684\u4e0d\u591f\u8be6\u7ec6\uff0c\u4ec5\u4f9b\u53c2\u8003\n",
        "postTime": 1531722456,
        "uid": 76226,
        "name": "yy1695651",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u76f8\u5f53\u4e8e\u5c31\u662f\u6c42\u533a\u95f4\u30101\uff0ci\u3011\u7684\u7b2ck\u5c0f\u503c\u95ee\u9898---\u4e3b\u5e2d\u6811\u7ecf\u5178\u9898\n\n\u4e3b\u5e2d\u6811\u8be6\u89e3\uff1ahttp://blog.csdn.net/creatorx/article/details/75446472 \uff08\u4e24\u5929\u524d\u6211\u770b\u8fd9\u4e2a\u5b66\u7684\uff09\n\n\u4e3b\u5e2d\u6811\u6a21\u677f\u9898\uff08\u7b2ck\u5c0f\u6570\uff09\uff1ahttps://www.luogu.org/problemnew/show/P3834\n\n\u4e0b\u9762\u662f\u8fd9\u9053\u9898\u7684ac\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N_zx 4000000//nlogn\u7684\u590d\u6742\u5ea6\uff0c\u5176\u5b9e\u8981\u5f00n*\uff08floor\uff08log\uff082\uff0cn\uff09\uff09+2\uff09\uff0c\u5426\u5219\u4f1aRE\n#define M 200050\nstruct zxseg//\u4e3b\u5e2d\u6811\u53c8\u53eb\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6211\u5199z\uff08\u4e3b\uff09x\uff08\u5e2d\uff09seg\uff08\u7ebf\u6bb5\u6811)\n{\n    int lef,rig,sum;//lef,rig\u662f\u5de6\u53f3\u533a\u95f4\uff0c\u8fd9\u91cc\u5b58\u7684\u662f\u79bb\u6563\u5316\u540e\u7684\u6570\u5b57\u5927\u5c0f\u8303\u56f4\uff0csum\u662f\u8fd9\u4e2a\u8303\u56f4\u5185\u6570\u7684\u4e2a\u6570\n    zxseg(){lef=rig=sum=0;}\n}tre[N_zx];\nstruct node{int id,x;}num[M];\nbool cmp(node a,node b){return a.x<b.x;}\nint dank[M],root[M];\nint m,n,cnt_zx=0,term;\n//\u6838\u5fc3\u7684\u601d\u60f3\u6709\u70b9\u590d\u6742\uff0c\u770b\u4e0a\u9762\u7684\u535a\u5ba2\u94fe\u63a5\u5427\nvoid insert(int val,int &rt,int l=1,int r=m)\n{\n    tre[++cnt_zx]=tre[rt];\n    rt=cnt_zx;\n    tre[rt].sum++;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    if(val<=mid) insert(val,tre[rt].lef,l,mid);\n    else insert(val,tre[rt].rig,mid+1,r);\n}\nint query(int i,int j,int py,int l=1,int r=m)\n{\n    if(l==r) return l;\n    int mid=(l+r)>>1,num=tre[tre[j].lef].sum-tre[tre[i].lef].sum;\n    if(num>=py) return query(tre[i].lef,tre[j].lef,py,l,mid);\n    else return query(tre[i].rig,tre[j].rig,py-num,mid+1,r);\n}\nint main(int argc, char const *argv[])\n{\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d\",&num[i].x);\n        num[i].id=i;\n    }\n    sort(num+1,num+m+1,cmp);\n    for(int i=1;i<=m;i++)\n        dank[num[i].id]=i;//\u79bb\u6563\u5316\uff0c\u53e6\u5916rank\u5728\u6d1b\u8c37\u4f1a\u88ab\u6cb3\u87f9\uff08ToT\uff09\n    root[0]=0;\n    for(int i=1;i<=m;i++)\n    {\n        root[i]=root[i-1];\n        insert(dank[i],root[i]);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&term);\n        printf(\"%d\\n\",num[query(root[0],root[term],i)].x);\n    }\n    return 0;\n}\n```",
        "postTime": 1517651204,
        "uid": 77825,
        "name": "acranker",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u5e73\u8861\u6811\u88f8\u9898\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662fTreap\n\n\u8fd9\u9053\u9898\u53ea\u9700\u8981\u652f\u6301\u63d2\u5165\u548c\u7b2ck\u5927\u67e5\u8be2\n\n\u5148\u8bfb\u5165Add\u548cGet\uff0c\u5c06Get\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n\u6309\u987a\u5e8f\u63d2\u5165Add\uff0c\u6bcf\u5230Get\u65f6\u8f93\u51fa\u7b2ck\u5927\u5373\u53ef\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nconst int MaxN = 200005;\nint Add[MaxN],Get[MaxN];\nint M,N,k;\nstruct Node{\n    Node* ch[2];\n    int priority;\n    int v,size,cnt;\n    inline int cmp(const int &x) const{\n        if(x == v) return -1;\n        return x < v ? 0 : 1;\n    }\n    Node() : priority(1<<30), v(0), size(0), cnt(0){\n        ch[0] = ch[1] = this;\n    }\n    Node(int v);\n};\nNode* Null(new Node);\nNode* Root = Null;\ninline Node :: Node(const int v) : priority(rand()), v(v), size(1), cnt(1){\n    ch[0] = ch[1] = Null;\n}\ninline int read(){\n    int s = 0,f = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){\n        if(ch == '-') f = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9')\n        s = s*10+ch-'0',ch = getchar();\n    return s*f;\n}\ninline void maintain(Node* &o){\n    o->size = o->ch[0]->size+o->ch[1]->size+o->cnt;\n}\ninline void rotate(Node* &o,const int &d){\n    Node* k = o->ch[d^1];\n    o->ch[d^1] = k->ch[d];\n    k->ch[d] = o;\n    maintain(o);\n    maintain(k);\n    o = k;\n}\ninline void Insert(Node* &o,const int &x){\n    if(o == Null)\n        o = new Node(x);\n    else{\n        int d = o->cmp(x);\n        if(d == -1){\n            ++o->cnt;\n            maintain(o);\n            return;\n        }\n        Insert(o->ch[d],x);\n        if(o->ch[d]->priority > o->priority)\n            rotate(o,d^1);\n    }\n    maintain(o);\n}\ninline int kth(Node* &o,const int &K){\n    if(o == Null || K <= 0 || K > o->size) return 0;\n    int s = (o->ch[0] == Null ? 0 : o->ch[0]->size);\n    if(K >= s+1 && K <= s+o->cnt) return o->v;\n    else if(K <= s) return kth(o->ch[0],K);\n    return kth(o->ch[1],K-s-o->cnt);\n}\nint main(){\n    int i,j;\n    M = read(),N = read();\n    for(i = 1;i <= M;i++)\n        Add[i] = read();\n    for(i = 1;i <= N;i++)\n        Get[i] = read();\n    sort(Get+1,Get+N+1);\n    for(i = 1,j = 1;i <= M;i++){\n        Insert(Root,Add[i]);\n        while(Get[j] == i){\n            printf(\"%d\\n\",kth(Root,++k));\n            j++;\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1503331426,
        "uid": 54473,
        "name": "Fortitude",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u6211\u7528\u7684splay\n\n\u8fd9\u4ee3\u7801\u8fd8\u7b97\u597d\u7b80\u6d01\u7684\u5427\n\n\u5c06Get\u64cd\u4f5c\u6392\u5e8f\uff0c\u7136\u540e\u5c06Add\u6309\u987a\u5e8f\u63d2\u5165\uff0c\u6bcf\u5230\u8fbe\u4e00\u4e2aGet\u5c31\u67e5\u8be2\u4e00\u6b21\u7b2ck\u5927\n\n\u6240\u4ee5\u8fd9\u662f\u4e00\u68f5\u53ea\u6709\u63d2\u5165\u548c\u7b2ck\u5927\u67e5\u8be2\u7684splay\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define isr(u) (e[e[u].f].ch[1]==u)\nusing namespace std;\nconst int maxn=200005,INF=200000000;\ninline int read(){\n    int out=0,flag=1;char c=getchar();\n    while(c<48||c>57) {if(c=='-') flag=-1;c=getchar();}\n    while(c>=48&&c<=57) {out=out*10+c-48;c=getchar();}\n    return out*flag;\n}\nclass node{\n```\npublic:\n\n\n\n\n\n\n\n```cpp\n        int v,siz,ch[2],f,cnt;\n        node() {siz=0;ch[0]=ch[1]=f=0;}\n}e[2*maxn];\nint nodei=0,root=0;\ninline void up(int u){e[u].siz=e[e[u].ch[0]].siz+e[e[u].ch[1]].siz+e[u].cnt;}\nvoid spin(int u){\n    int fa=e[u].f,s=isr(u);\n    e[u].f=e[fa].f;\n    if(e[fa].f) e[e[fa].f].ch[isr(fa)]=u;\n    e[fa].ch[s]=e[u].ch[s^1];\n    if(e[u].ch[s^1]) e[e[u].ch[s^1]].f=fa;\n    e[fa].f=u;\n    e[u].ch[s^1]=fa;\n    up(fa);up(u);\n}\ninline void splay(int u){\n    while(e[u].f){\n        if(!e[e[u].f].f) spin(u);\n        else if(isr(u)^isr(e[u].f)) spin(u),spin(u);\n        else spin(e[u].f),spin(u);\n    }\n    root=u;\n}\nvoid insert(int& u,int v,int fa){\n    if(!u) {u=++nodei;e[u].v=v;e[u].f=fa;e[u].cnt=1;e[u].siz=1;splay(u);}\n    else if(e[u].v>v) e[u].siz++,insert(e[u].ch[0],v,u);\n    else if(e[u].v<v) e[u].siz++,insert(e[u].ch[1],v,u);\n    else e[u].cnt++,e[u].siz++;\n}\nint kth(int u,int k){\n    if(e[e[u].ch[0]].siz<k&&e[e[u].ch[0]].siz+e[u].cnt>=k) {splay(u);return e[u].v;}\n    else if(e[e[u].ch[0]].siz>=k) return kth(e[u].ch[0],k);\n    else return kth(e[u].ch[1],k-e[e[u].ch[0]].siz-e[u].cnt);\n}\nint Add[maxn],Get[maxn];\nint main()\n{\n    int m=read(),n=read();\n    for(int i=1;i<=m;i++) Add[i]=read();\n    for(int i=1;i<=n;i++) Get[i]=read();\n    sort(Get+1,Get+1+n);\n    int p=0;\n    for(int i=1;i<=n;i++){\n        while(p<Get[i]) insert(root,Add[++p],0);\n        printf(\"%d\\n\",kth(root,i));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1502379824,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u4e0b\u9762\u90fd\u662f\u5404\u79cd\u5806\u7684\u9898\u89e3\u3010\u597d\u50cf\u8fd8\u6709\u5927\u795e\u53d1\u7684treap\n\n\u6211\u60f3\u65e2\u7136\u8fd9\u9053\u9898\u7528\u7684\u662f\u5e73\u8861\u6811\uff0c\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u5e73\u8861\u6811\u6ca1\u6709\u51fa\u73b0\uff0c\u6211\u5c31\u53d1\u4e00\u4e2a\u9898\u89e3\uff0c\u6743\u5f53\u629b\u7816\u5f15\u7389\u4e86\u3002\n\n\u6ca1\u9519\uff0c\u5c31\u662fsplay\u3002splay\u4f5c\u4e3a\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5e73\u8861\u6811\uff0c\u4f7f\u7528\u9891\u7387\u6bd4treap\u8981\u9ad8\u4e0d\u5c11\u3002\n\n\u5f53\u7136\u672c\u4eba\u4e0d\u624d\uff0c\u5982\u6709\u5927\u795e\uff0c\u4e0d\u559c\u52ff\u55b7\u3002\n\n\u57fa\u672c\u601d\u8def\uff1a\u6ca1\u6709delete\u7684splay\uff0c\u53ea\u9700\u8981\u5199\u63d2\u5165\u548c\u67e5\u627e\u7b2cK\u5927\u3002\n\nsize\u8868\u793a\u8282\u70b9\u548c\u5b83\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff0ccnt\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u6570\u6709\u51e0\u4e2a\uff0cvalue\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002\n\nch[0],ch[1]\u5206\u522b\u8868\u793a\u5de6\u53f3\u513f\u5b50\uff08\u8fd9\u6837\u53ef\u4ee5\u7528\u5f02\u6216\u8fd0\u7b97\uff0c\u6bd4\u8f83\u65b9\u4fbf\uff09\n\npre\u8868\u793a\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u3002\n\nnull\u662f\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c\u5b83\u7684size\uff0ccnt\u90fd\u662f0\uff0c\u662f\u4e3a\u4e86\u907f\u514d\u4f7f\u7528NULL\u5bfc\u81f4\u5404\u79cd\u5947\u602a\u7684RE\u3002\n\n\u5176\u4f59\u7684\u5c31\u662fsplay\u7684\u57fa\u672c\u64cd\u4f5c \u5305\u62ec\u65cb\u8f6c\u548csplay\u7b49 \u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u81ea\u884c\u767e\u5ea6\u3002\n\n\u672csplay\u4f7f\u7528\u7684\u662f\u975e\u9012\u5f52\u5199\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u7684\u5199\u6cd5\u3002\n\n\u3010\u5410\u69fd\uff1a\u672c\u9898\u6570\u636e\u7565\u5f31\u3002\n\n\u4e0d\u5570\u55e6\u4e86\uff0c\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nstruct splaynode{\n    int size,value,cnt;\n    splaynode *pre,*ch[2];\n    inline void update()//\u66f4\u65b0 \n    {\n        size=ch[0]->size+ch[1]->size+cnt;//\u6ce8\u610f\u4e0d\u662f+1 \n    } \n    inline int getwh()\n    {\n        return pre->ch[0]==this?0:1;//\u627e\u5230\u5f53\u524d\u8282\u70b9\u662f\u5b83\u7236\u4eb2\u7684\u54ea\u4e2a\u513f\u5b50 \n    }\n    inline void setch(int wh,splaynode *child);\n}pool[400010],*null,*root;\nint n,a[200010],b[200010],top,m,x;\ninline splaynode *getnew(int value)//\u7533\u8bf7\u65b0\u8282\u70b9 \n{\n    splaynode *now=pool + ++top;\n    now->value=value;\n    now->size=now->cnt=1;\n    now->pre=now->ch[0]=now->ch[1]=null;\n    return now;\n}\ninline void splaynode::setch(int wh,splaynode *child)//\u8bbe\u7f6e\u513f\u5b50 \n{\n    ch[wh]=child;\n    if(child!=null)\n    child->pre=this;\n    update();\n}\ninline void rotate(splaynode *&now)//\u65cb\u8f6c \n{\n    splaynode *oldfa=now->pre,\n    *grand=now->pre->pre;\n    int wh=now->getwh();\n    oldfa->setch(wh,now->ch[wh^1]);\n    now->setch(wh^1,oldfa);\n    now->pre=grand;\n    if(grand!=null)\n    grand->setch(grand->ch[0]==oldfa?0:1,now);\n}\ninline void splay(splaynode *now,splaynode *aim)//splay\u7684\u5927\u62db\uff1asplay \n{\n    for(;now->pre!=aim;rotate(now))\n    {\n        if(now->pre->pre!=aim)\n        now->getwh()==now->pre->getwh()?rotate(now->pre):rotate(now);\n    }\n    if(aim==null)\n    root=now;\n}\ninline void insert(int value)//\u63d2\u5165 \n{\n    splaynode *last=null,*now=root;\n    splaynode *newone=getnew(value);\n    while(now!=null)\n    {\n        last=now;\n        if(newone->value==now->value)\n        {\n            now->size++,now->cnt++;\n            splay(now,null);\n            return;\n        }\n        if(newone->value<now->value)\n        now=now->ch[0];\n        else\n        now=now->ch[1];\n    }\n    if(last==null)\n    root=newone;\n    else\n    {\n        if(newone->value<last->value)\n            last->setch(0,newone);\n        else\n            last->setch(1,newone);\n        splay(newone,null);\n    }\n}\ninline int kth(int k)//\u67e5\u627e\u7b2cK\u5927 \n{\n    splaynode *now = root;\n    int leftsize=0;\n    while(now!=null)\n    {\n        int left=leftsize+now->ch[0]->size;\n        if(left+1<=k&&k<=left+now->cnt)\n        {\n            splay(now,null);\n            return now->value;\n        }\n        if(k<=left)\n        now=now->ch[0];\n        else\n        leftsize=left+now->cnt,now=now->ch[1];\n    }\n    return -1; \n}\nint main()\n{\n    null=pool;\n    null->ch[0]=null->ch[1]=null;\n    null->size=null->cnt=null->value=0;\n    root=null;\n    scanf(\"%d%d\",&m,&n);\n    for(int i=1;i<=m;i++)\n    scanf(\"%d\",&a[i]);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&x);\n        b[x]++;\n    }\n    x=0;\n    for(int i=1;i<=m;i++)\n    {\n        insert(a[i]);\n        while(b[i])\n        {\n            x++;\n            b[i]--;\n            printf(\"%d\\n\",kth(x));\n        }\n    }\n } \n\n```",
        "postTime": 1487245757,
        "uid": 17828,
        "name": "revenger",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    },
    {
        "content": "**\u575a\u51b3\u4e0d\u7528STL\uff01**\n\n\n------------\n\n\u9996\u5148\uff0c\u8fd9\u9053\u9898\u8ba9\u6211\u4eec\u6c42\u6bcf\u6b21\u7684\u7b2ci\u5927\u503c\uff0c\u800ci\u662f\u4f1a\u79fb\u52a8\u7684\u2014\u2014\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u7b2ci\u5927\u503c\u548c\u7b2ci+1\u5927\u503c\uff08\u8bf7\u6495\u70e4\uff09\u3002\u90a3\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u5462\uff1f\n\n- \u9996\u5148\uff0c\u8981\u786e\u5b9a\u7b2ci\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053i-1~1\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff1b\n\n- \u76f8\u4f3c\u7684\uff0ci+1~n\u7684\u5143\u7d20\u662f\u4ece\u5c0f\u5230\u5927\u7684\u3002\n\n- \u4ec0\u4e48\u64cd\u4f5c\u53ef\u4ee5\u5b8c\u7f8e\u7684\u5b8c\u6210\u8fd9\u4e00\u70b9\uff1f**HEAP\uff01HEAP\uff01HEAP\uff01**\n\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u5927\u6839\u5806\u6765\u4fdd\u5b58\u524di-1\u5927\u6570\uff0c\u5927\u6839\u5806\u786e\u5b9a\u4e86\u5176\u4e2d\u7684\u5143\u7d20\u662f\u4ece\u5927\u5230\u5c0f\u7684\uff1b\u518d\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u6765\u5b58\u5269\u4e0b\u7684\u6570\uff0c\u5c0f\u6839\u5806\u5806\u9876\u5c31\u662f\u7b2ci\u5927\u6570\u3002\n\n##### \u6b65\u9aa4\u5982\u4e0b\uff1a\n\n1. \u5168\u90e8\u8bfb\u5165\n\n1. \u5bf9\u4e8e\u7b2ci\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u8981\u518d\u5927\u6839\u5806\u91cc\u7ef4\u62a4\u7684\u5c31\u662f\u524di-1\u4e2a\u6570\uff0c\u6240\u4ee5\u5c31\u5148\u626b\u63cf\u5230\u64cd\u4f5c\u8fdb\u884c\u5230\u7684\u503c\uff08\u6709\u53ef\u80fd\u6211\u8bed\u8a00\u8868\u8ff0\u4e0d\u597d\uff0c\u90a3\u5c31\u770b\u4ee3\u7801\u5427...\uff09\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u5927\u6839\u5806\u7684\u5143\u7d20\u4e2a\u6570\u5927\u4e8e\u4e86i-1\uff0c\u90a3\u4e48\u5c31\u628a\u5927\u6839\u5806\u5806\u9876\u4e0d\u65ad\u5f39\u51fa\uff0c\u585e\u5230\u5c0f\u6839\u5806\u91cc\u3002\n\n1. \u8fd9\u4e9b\u64cd\u4f5c\u8fdb\u884c\u5b8c\u4e86\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u5c0f\u6839\u5806\u7684\u5806\u9876\u3002~~\uff08\u56e0\u4e3a\u5b83\u662f\u7b54\u6848\uff09~~\u7136\u540e\u56e0\u4e3a\u8fd9\u4e2a\u7b54\u6848\u5df2\u7ecf\u8d21\u732e\u5b8c\u4e86\uff0c\u628a\u5b83\u5f39\u51fa\uff0c\u518d\u585e\u5165\u5927\u6839\u5806\u91cc\u3002\n\n\u4e0b\u9762\u5949\u4e0a\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n,m;\nint a[200005],to[200005];\n\nclass Max_Heap {\n    private:\n        int size,h[8000005];\n        void exchange(int &x,int &y) {\n            int t;\n            t=x,x=y,y=t;\n        }\n        void Max_Heapify(int i) {\n            int l=i << 1;\n            int r=i << 1 | 1;\n            int largest;\n            if (l<=size && h[l]>h[i])\n                largest=l;\n            else\n                largest=i;\n            if (r<=size && h[r]>h[largest])\n                largest=r;\n            if (largest!=i) {\n                exchange(h[i],h[largest]);\n                Max_Heapify(largest);\n            }\n        }\n    public:\n        void Heap_Inc(int i,int key) {\n            h[i]=key;\n            while (i>1 && h[i >> 1]<h[i]) {\n                exchange(h[i],h[i >> 1]);\n                i>>=1;\n            }\n        }\n        int top() {\n            return h[1];\n        }\n        void pop() {\n            h[1]=h[size];\n            size--;\n            Max_Heapify(1);\n        }\n        void push(int key) {\n            size++;\n            h[size]=key;\n            Heap_Inc(size,key);\n        }\n        bool empty() {\n            return size==0;\n        }\n        int length() {\n            return size;\n        }\n} max_h;\n\nclass Min_Heap {\n    private:\n        int size,h[8000005];\n        void exchange(int &x,int &y) {\n            int t;\n            t=x,x=y,y=t;\n        }\n        void Min_Heapify(int i) {\n            int l=i << 1;\n            int r=i << 1 | 1;\n            int smallest;\n            if (l<=size && h[l]<h[i])\n                smallest=l;\n            else\n                smallest=i;\n            if (r<=size && h[r]<h[smallest])\n                smallest=r;\n            if (smallest!=i) {\n                exchange(h[i],h[smallest]);\n                Min_Heapify(smallest);\n            }\n        }\n    public:\n        void Heap_Inc(int i,int key) {\n            h[i]=key;\n            while (i>1 && h[i >> 1]>h[i]) {\n                exchange(h[i],h[i >> 1]);\n                i>>=1;\n            }\n        }\n        int top() {\n            return h[1];\n        }\n        void pop() {\n            h[1]=h[size];\n            size--;\n            Min_Heapify(1);\n        }\n        void push(int key) {\n            size++;\n            h[size]=key;\n            Heap_Inc(size,key);\n        }\n        bool empty() {\n            return size==0;\n        }\n        int length() {\n            return size;\n        }\n} min_h;\n//\u4ee5\u4e0a\u662f\u65e5\u5e38HEAP\u64cd\u4f5c\uff0c\u4e0d\u89e3\u91ca\u3002\nint main() {\n    scanf(\"%d%d\",&m,&n);\n    for (int i=1; i<=m; i++)\n        scanf(\"%d\",&a[i]);\n    for (int i=1; i<=n; i++)\n        scanf(\"%d\",&to[i]);\n    int it=1,now=1; /*it\u8868\u793a\u5f53\u524d\u626b\u63cf\u5230\u7b2c\u51e0\u4e2a\u64cd\u4f5c\uff0cnow\u8868\u793a\u5f53\u524d\u52a0\u5165\u5230\u5806\u91cc\u7684\u5143\u7d20\u4e0b\u6807*/\n    for (int it=1; it<=n; it++) {\n        for (now; now<=to[it]; now++) {\n            max_h.push(a[now]); //\u538b\u5165\u5927\u6839\u5806\u91cc\n            if (max_h.length()>it-1) {\n                min_h.push(max_h.top());\n                max_h.pop(); /*\u628a\u5927\u6839\u5806\u5806\u9876\u538b\u5165\u5c0f\u6839\u5806\u91cc*/\n            }\n        } //\u4ee5\u4e0a\u5982\u540c\u6b65\u9aa4\u8868\u8ff0\n        printf(\"%d\\n\",min_h.top());\n        max_h.push(min_h.top());\n        min_h.pop(); //\u540c\u4e0a\n    }\n    return 0;\n}\n```\n\u5982\u679c\u4f60\u770b\u61c2\u7684\u8fd9\u9053\u9898\u89e3\u5e76\u771f\u6b63\u7406\u89e3\u4e86\uff0c\u90a3\u4e48\u8bf7\u53bbA\u6389[P1168](https://www.luogu.org/problemnew/show/1168)\u5427\uff0c~~\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8fd9\u9053\u9898\u8fd8\u8981\u7b80\u5355\u70b9\u3002\u3002\u3002~~\n",
        "postTime": 1513338279,
        "uid": 14908,
        "name": "Jack_Homes_Huang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1801 \u3010\u9ed1\u5323\u5b50_NOI\u5bfc\u520a2010\u63d0\u9ad8\uff0806\uff09\u3011"
    }
]