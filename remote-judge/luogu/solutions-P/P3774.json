[
    {
        "content": "[\u53ef\u4ee5\u770b\u8fd9\u91cc\u54e6](https://foreverlasting1202.github.io/2019/09/06/CTSC2017%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/)\n\n\u4e00\u9053\u6768\u8868\u7684\u795e\u9898\u3002\n<!--more-->\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u6768\u8868\u3002\n\n\u6768\u8868\uff08\u53c8\u79f0\u4e3a\u6768\u6c0f\u77e9\u9635\u3001\u6768\u56fe\u3001$Young\\ Diagram$\uff09\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u56fe\uff0c\u7528\u4e8e\u6574\u6570\u5212\u5206\u7c7b\u95ee\u9898\u4e0a\u3002\n\n\u6768\u8868\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a$n$\u7684\u5212\u5206$\\lambda=(\\lambda_1,\\lambda_2,...)\\mapsto n$\u5b9a\u4e49\u4e3a\u6768\u8868\u4e3a\u4e00\u4e2a\u5de6\u5bf9\u9f50\u7684\u65b9\u5757\u7ec4\uff0c\u5176\u4e2d\u7b2c$i$\u884c\u6709$\\lambda_i$\u4e2a\u65b9\u5757\u3002\n\n\u7c7b\u4f3c\u4e8e\u8fd9\u6837![](https://s2.ax1x.com/2019/09/06/nuHbOH.png)\n\n\uff08\u753b\u7684\u4e11\uff09\n\n\u6211\u4eec\u5b9a\u4e49\u94a9\u5b50\u957f$h(u)$\uff08$Young\\ Diagram$\uff09\u4e3a\u4e00\u4e2a\u65b9\u5757\u5b83\u4e0b\u9762\u7684\u5757\u6570\u548c\u5b83\u53f3\u8fb9\u7684\u5757\u6570\u4e4b\u548c\uff08\u5305\u62ec\u672c\u8eab\uff09\u3002\n\n\u8fd9\u91cc\u6bcf\u4e2a\u683c\u5b50\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u7684\u94a9\u5b50\u957f![](https://s2.ax1x.com/2019/09/06/nuqVDH.png)\n\n\u6211\u4eec\u5b9a\u4e49\u6807\u51c6\u6768\u8868\uff08$SYT$\uff09\u4e3a\u5c06${1,2,...,n}$\u586b\u5165\u6768\u8868\u4e14\u6ee1\u8db3\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u6570\u5b57\u90fd\u662f\u6ee1\u8db3\u6bd4\u8f83\u65b9\u5f0f$<$\u7684\u6768\u8868\u3002\n\n\u50cf\u8fd9\u6837![](https://s2.ax1x.com/2019/09/06/nuLDYt.png)\n\n\u6211\u4eec\u518d\u5b9a\u4e49$f^{\\lambda}$\u4e3a$\\lambda$\u5bf9\u5e94\u7684\u6807\u51c6\u6768\u8868\u7684\u4e2a\u6570\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u5b9a\u4e49\u94a9\u5b50\u516c\u5f0f\uff1a\u5bf9\u4e8e$\\lambda\\mapsto n$\uff0c\u6709$f^{\\lambda}=\\frac{n!}{\\prod_{u\\in \\lambda}h(u)}$\u3002\n\n\u8bc1\u660e\u8003\u8651\u7ec4\u5408\u610f\u4e49\u5373\u53ef\u3002\n\n\u4e0b\u9762\u518d\u5b9a\u4e49\u8fd1\u4f3c\u6768\u8868\uff08$NYT$\uff09\u4e3a\u5c06$n$\u4e2a\u4e0d\u540c\u7684\u6570\u586b\u5165\u6768\u8868\u4e14\u6ee1\u8db3\u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u6570\u5b57\u90fd\u662f\u6ee1\u8db3\u6bd4\u8f83\u65b9\u5f0f$<$\u7684\u6768\u8868\u3002\n\n\u4e0b\u9762\u8bb2\u8ff0\u5982\u4f55\u6784\u9020\u8fd1\u4f3c\u6768\u8868\uff0c\u6211\u4eec\u8003\u8651\u589e\u91cf\u6cd5\u3002\n\n\u6bcf\u6b21\u5c06\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u63d2\u5165\u65f6\uff0c\u5148\u5728\u7b2c\u4e00\u884c\u67e5\u627e\u662f\u5426\u6709\u5176\u540e\u7ee7\uff0c\u82e5\u6709\uff0c\u66ff\u6362\u5176\u540e\u7ee7\uff0c\u8ba9\u5176\u540e\u7ee7\u5728\u4e0b\u4e00\u884c\u8fdb\u884c\u65b0\u7684\u67e5\u627e\uff0c\u9012\u5f52\u4e0b\u53bb\u3002\u82e5\u65e0\uff0c\u5219\u63d2\u5165\u5230\u8fd9\u4e00\u884c\u7684\u672b\u5c3e\u3002\u8fd9\u6837\u6bcf\u6b21\u63d2\u5165\u5143\u7d20\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u8bc1\u660e\u4e3a$O(rlogc)$\uff0c$r$\u4e3a\u884c\u6570\uff0c$c$\u4e3a\u5217\u6570\u3002\n\n\u540c\u65f6\u6839\u636e$RSK$\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u5173\u4e8e\u6768\u8868\u4e8c\u5143\u7ec4\u96c6\u5408\u4e0e$n$\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u53cc\u5c04\uff0c\u5373$S_{(P,Q)}\\leftrightarrow S_n$\uff0c\u5176\u4e2d$P$\u4e3a\u8fd1\u4f3c\u6768\u8868\uff0c$Q$\u4e3a\u6807\u51c6\u6768\u8868\u3002$RSK$\u7b97\u6cd5\u4e0d\u518d\u8fc7\u591a\u8d58\u8ff0\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u53bb$wiki$\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u53ea\u5229\u7528\u5230\u8fd9\u4e2a\u7b97\u6cd5\u4e2d\u7684\u4e00\u4e2a\u6027\u8d28\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u6392\u5217$\\pi\\in S_n$\uff0c\u5176\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u7b49\u4e8e$\\pi$\u5bf9\u4e8e\u7684$P$\u7684\u7b2c\u4e00\u884c\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e\u6768\u8868\uff0c\u8fd8\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5373\u82e5\u5c06\u5176\u7684\u6bd4\u8f83\u65b9\u5f0f\u53d6\u53cd\uff08$<$\u53d8$\\geq$,$>$\u53d8$\\leq$)\uff0c\u6240\u5f97\u6768\u8868\u4e3a\u539f\u6768\u8868\u7684\u8f6c\u7f6e\u3002\uff08\u8fd9\u91cc\u7684\u8f6c\u7f6e\u5b9a\u4e49\u4e3a\u5f62\u72b6\u5bf9\u79f0\uff0c\u5e76\u975e\u5143\u7d20\u5bf9\u79f0\uff0c\u5373\u5143\u7d20\u53ef\u4ee5\u6ed1\u52a8\uff09\n\n---\n\n\u63a5\u4e0b\u6765\u56de\u5230\u8fd9\u9053\u9898\u3002\n\n\u6839\u636e$Dilworth$\u5b9a\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u7b49\u4e8e\u5c06\u5176\u5206\u4e3a\u82e5\u5e72\u4e2a\u4e0d\u4e0a\u5347\u5b50\u5e8f\u5217\u6240\u9700\u6570\u91cf\u7684\u6700\u5c0f\u503c\u3002\n\n\u56e0\u6b64\uff0c\u9898\u610f\u8f6c\u6362\u6210\u5bf9\u4e8e$B$\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\uff0c\u53d6\u51fa\u4e0d\u8d85\u8fc7$k$\u4e2a\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6c42\u6700\u591a\u80fd\u53d6\u8d70\u591a\u5c11\u5143\u7d20\u3002\n\n\u518d\u6839\u636e\u6768\u8868\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6c42\u7684\u8fd9\u4e2a\u4e1c\u897f\u5373\u4e3a\u8be5\u5e8f\u5217\u7684\u4e0d\u4e0a\u5347\u6768\u8868\u4e2d\u524d$k$\u884c\u5143\u7d20\u6570\u91cf\u4e4b\u548c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u7b49\u4e8e\u6bcf\u6b21\u63d2\u5165\u4e00\u4e9b\u5143\u7d20\uff0c\u7136\u540e\u52a8\u6001\u5730\u7ef4\u62a4\u524d$k$\u884c\u7684\u503c\u5373\u53ef\u3002\u82e5\u66b4\u529b\u505a\uff0c\u5219\u662f$O(nrlogc)$\u7684\uff0c\u8fd9\u6837\u663e\u7136\u8fc7\u4e0d\u4e86\u3002\u6211\u4eec\u8003\u8651\u603b\u5143\u7d20\u4e2a\u6570\u662f$O(n)$\u7684\uff0c\u4e8e\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u800c\u8a00\uff0c\u5b83\u6240\u5728\u7684\u884c\u4e0e\u5217\u603b\u6709\u4e00\u4e2a\u662f$\\leq \\sqrt{n}$\u7684\u3002\u5bf9\u4e8e\u884c\uff0c\u6211\u4eec\u76f4\u63a5\u7ef4\u62a4\u524d$\\sqrt{n}$\u884c\u5373\u53ef\u3002\u5bf9\u4e8e\u5217\uff0c\u6211\u4eec\u5c06\u6768\u8868\u7684\u6bd4\u8f83\u65b9\u5f0f\u53d6\u53cd\uff0c\u7ef4\u62a4\u8f6c\u7f6e\u540e\u7684\u524d$\\sqrt{n}$\u884c\u5373\u53ef\u3002\u4e8e\u662f\u590d\u6742\u5ea6\u5c31\u5728$O(n\\sqrt{n}logn+qlogn)$\u6216\u8005$O(n\\sqrt{n}logn+q\\sqrt{n})$\u4e86\u3002\n\ncode:\n```cpp\n//2019.9.6 by ljz\n//email 573902690@qq.com\n//if you find any bug in my code\n//please tell me\n#include<bits/stdc++.h>\n//#include<ext/pb_ds/tree_policy.hpp>\n//#include<ext/pb_ds/assoc_container.hpp>\nusing namespace std;\n//using namespace __gnu_pbds;\n//using namespace __gnu_cxx;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f\n#define unl __int128\n#define eps 5.6e-8\n#define RG register\n#define db double\n#define pc(x) __builtin_popcount(x)\n//#define pc(x) __builtin_popcountll(x)\ntypedef pair<int,int> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n#define pi acos(-1.0)\n#define pb push_back\n#define ull unsigned LL\n#define lowbit(x) (x&-x)\n#define gc getchar\n//template <class T>using Tree=tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;\n//inline char gc() {\n//    static char buf[100000],*p1,*p2;\n//    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n//}\ninline int read() {\n    res s=0,ch=gc();\n    while(ch<'0'||ch>'9')ch=gc();\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n    return s;\n}\n//inline int read() {\n//    res s=0,ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc();\n//    while(ch<'0'||ch>'9')ch=gc();\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s;\n//}\n//inline LL Read() {\n//    RG LL s=0;\n//    res ch=gc(),w=1;\n//    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=gc();}\n//    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=gc();\n//    return s*w;\n//}\n//inline void write(RG unl x){\n//    if(x>10)write(x/10);\n//    putchar(int(x%10)+'0');\n//}\ninline void swap(res &x,res &y) {\n    x^=y^=x^=y;\n}\n//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n//clock_t start=clock();\n//inline void ck(){\n//    if(1.0*(clock()-start)/CLOCKS_PER_SEC>0.1)exit(0);\n//}\nconst int kcz=998244353;\nconst int N=2e5+10;\nconst int M=300;\nnamespace MAIN{\n    inline void add(res &x,const res &y){\n        x+=y,x>=kcz?x-=kcz:1;\n    }\n    inline int mul(const res &x,const res &y){\n        return int(1LL*x*y%kcz);\n    }\n    inline int Add(const res &x,const res &y){\n        return x+y>=kcz?x+y-kcz:x+y;\n    }\n    inline int qpow(res x,res y){\n        res ret=1;\n        while(y){\n            if(y&1)ret=mul(ret,x);\n            x=mul(x,x),y>>=1;\n        }\n        return ret;\n    }\n    int n,q;\n    int tr[N];\n    inline void modify(const res &x,const res &y){\n        for(res i=x;i<=n;i+=lowbit(i))tr[i]+=y;\n    }\n    inline int query(const res &x){\n        res ret=0;\n        for(res i=x;i;i-=lowbit(i))ret+=tr[i];\n        return ret;\n    }\n    int a[N];\n    struct Que{\n        int m,k,id;\n        Que() {}\n        Que(res m,res k,res id):m(m),k(k),id(id) {}\n        inline bool operator < (const RG Que &b) const {\n            return m<b.m;\n        }\n    }Q[N];\n    int ans[N],bl;\n    vector<int> YT[M],TY[M];\n    inline void add(const res &va){\n        for(res i=1,x=va;i<bl;i++){\n            if(YT[i].empty()||YT[i].back()>=x){YT[i].pb(x),modify(i,1);break;}\n            swap(YT[i][upper_bound(YT[i].begin(),YT[i].end(),x,greater<int>())-YT[i].begin()],x);\n        }\n        for(res i=1,x=va;i<bl;i++){\n            if(TY[i].empty()||TY[i].back()<x){\n                TY[i].pb(x);\n                if(TY[i].size()>=bl)modify(int(TY[i].size()),1);\n                break;\n            }\n            swap(TY[i][lower_bound(TY[i].begin(),TY[i].end(),x)-TY[i].begin()],x);\n        }\n    }\n    inline void MAIN(){\n        n=read(),q=read(),bl=int(sqrt(n))+1;\n        for(res i=1;i<=n;i++)a[i]=read();\n        for(res i=1;i<=q;i++){\n            res m=read(),k=read();\n            Q[i]=Que(m,k,i);\n        }\n        sort(Q+1,Q+q+1);\n        for(res i=1;i<=q;){\n            res j=i;\n            for(res k=Q[i-1].m+1;k<=Q[i].m;k++)add(a[k]);\n            while(Q[j].m==Q[i].m&&j<=q)j++;\n            j--;\n            for(res k=i;k<=j;k++)ans[Q[k].id]=query(Q[k].k);\n            i=j+1;\n        }\n        for(res i=1;i<=q;i++)printf(\"%d\\n\",ans[i]);\n    }\n}\nint main(){\n//    srand(19260817);\n//    freopen(\"signin.in\",\"r\",stdin);\n//    freopen(\"signin.out\",\"w\",stdout);\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1567738801,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3774 \u3010[CTSC2017]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    },
    {
        "content": "\u5148\u5b66\u4e00\u4e0b\u6768\u6c0f\u77e9\u9635\u518d\u6765\u505a\u8fd9\u4e00\u9898\u4f1a\u597d\u4e00\u4e9b\uff08\u5426\u5219A\u4e0d\u4e86\uff09\u3002\n\u7531$Dilworth$\u5b9a\u7406\uff0c\u597d\u50cf\u662f\u8fd9\u4e2a\u540d\u5b57\uff0c\u53ef\u4ee5\u5728\u5bf9\u8be2\u95ee\u6392\u5e8f\u540e\u6c42\u89e3\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u975e\u5347\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\uff0c\u7528\u6768\u6c0f\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u6765\u7ef4\u62a4\uff0c\u8fd9\u6837\u662f\u67e5\u8be2\u524d$k$\u884c\u7684\u5143\u7d20\u4e2a\u6570\u548c\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u3002\n\n\u4f46\u662f\u7a7a\u95f4\u4f1a\u5f00\u4e0d\u4e0b\uff0c\u6ce8\u610f\u5230\u6c42\u975e\u5347\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u4e0e\u6c42\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u6c42\u975e\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u548c\u6c42\u5347\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u76f8\u7b49\uff0c\u5c31\u53ef\u4ee5\u6709\u4e24\u79cd\u76ee\u7684\u7684\u77e9\u9635\u5f62\u72b6\u76f8\u53cd(\u53ef\u4ee5\u60f3\u6210\u77e9\u9635\u662f\u884c\u7684\u4e2a\u6570\u662f\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u6700\u4e0b\u5217\u7684\u957f\u5ea6\u662f\u5f02\u4e8e\u4e0a\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u8981\u6c42\u7684\u6700\u957f\u5b50\u5e8f\u5217)\u3002\n\n\u4e5f\u5c31\u662f\u4e24\u4e2a\u77e9\u9635\u7684\u5f62\u72b6\u4e92\u4e3a\u8f6c\u7f6e\uff08\u6211\u6ca1\u5b66\u8fc7\u7ebf\u6027\u4ee3\u6570\uff0c\u8868\u8ff0\u82e5\u6709\u8bef\u8fd8\u8bf7\u539f\u8c05\uff09\u3002\n\n\u90a3\u4e48\u5047\u8bbe$sz=\\sqrt n$\u90a3\u4e48\u5bf9\u4e8e\u884c\u6570\u5927\u4e8e$sz$\u7684\u5c31\u53ef\u4ee5\u5728\u8f6c\u7f6e\u77e9\u9635\u5f53\u4e2d\u6c42\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u6a2a\u5750\u6807$x\\in [1, sz]$\u4e0e\u7eb5\u5750\u6807$y\\in [1, sz]$\u5f53\u4e2d\u7684\u6240\u6709\u4f4d\u7f6e\u4e0d\u53ef\u80fd\u65e2\u5168\u90e8\u6709\u70b9\uff0c\u53c8\u5728\u8fd9\u4e2a\u8303\u56f4\u5916\u6709\u70b9\uff0c\u56e0\u4e3a\u5047\u8bbe\u5168\u90e8\u6709\u70b9(\u8303\u56f4\u5185\u548c\u8f6c\u7f6e\u77e9\u9635$x\\in [sz + 1, n],y\\in [sz + 1, n]$\u7684\u533a\u57df)\uff0c\u6570\u91cf\u8d85\u8fc7$n$\u3002\n\n\u90a3\u4e48\u8f6c\u7f6e\u7684\u77e9\u9635\u5728\u6a2a\u5750\u6807$x\\in [sz+1,n]$\u7684\u8303\u56f4\u5185\uff0c\u4e00\u5b9a\u4e0d\u5b58\u7eb5\u5750\u6807$y\\in [sz+1, n]$\u7684\u70b9\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4\u4e24\u4e2a$sz\\times n$\u7684\u77e9\u9635\u6c42\u89e3\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 50000 + 5, M = 233;\ninline int lowbit (int u) {return u & (-u);}\nint tree[N];\ninline void add (int u, int v) {while (u <= N - 5) tree[u] += v, u += lowbit (u);}\ninline int query (int u) {int res = 0; while (u) res += tree[u], u -= lowbit (u); return res;}\nstruct Q {int m, k, id, ans;}qq[N << 2];\nint sz, n, b[N], q;\nstruct Matrix {\n\tint info[M][N], sign;\n\tinline void insert (int u, int v, int p) {\n\t\tif (u > sz) {return ;}\n\t\tint l = 1, r = min (v, info[u][0] + 1), mid;\n\t\twhile (l < r) {\n\t\t\tmid = (l + r) / 2;\n\t\t\tif (sign ^ (info[u][mid] < p)) {r = mid;}\n\t\t\telse {l = mid + 1;}\n\t\t}\n\t\tswap (info[u][l], p);\n\t\tinfo[u][0] = max (info[u][0], l);\n\t\tif (p) {insert (u + 1, l, p);}\n\t\telse {\n\t\t\tif (sign) {if (l > sz)add (l, 1);}\n\t\t\telse {add (u, 1);}\n\t\t}\n\t}\n}m1, m2;\nint main () {\n\tm1.sign = 0, m2.sign = 1;\n\tscanf (\"%d%d\", &n, &q);sz = sqrt (n);\n\tfor (int i = 1; i <= n; ++i) {scanf (\"%d\", &b[i]);}\n\tfor (int i = 1; i <= q; ++i) {scanf (\"%d%d\", &qq[i].m, &qq[i].k);qq[i].id = i;}\n\tsort (qq + 1, qq + q + 1, [](Q a, Q b){return a.m < b.m;});\n\tint pre = 0;\n\tfor (int i = 1; i <= q; ++i) {\n\t\twhile (pre < qq[i].m) {\n\t\t\t++pre;\n\t\t\tm1.insert (1, INT_MAX, b[pre]);\n\t\t\tm2.insert (1, INT_MAX, b[pre]);\n\t\t}\n\t\tqq[i].ans = query (qq[i].k);\n\t}\n\tsort (qq + 1, qq + q + 1, [](Q a, Q b){return a.id < b.id;});\n\tfor (int i = 1; i <= q; ++i) {printf (\"%d\\n\", qq[i].ans);}\n\treturn 0;\n}\n```",
        "postTime": 1563687138,
        "uid": 122451,
        "name": "Sasiyar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3"
    },
    {
        "content": "**\u524d\u7f6e\u77e5\u8bc6\uff1a**\n\n\u6768\u8868\uff0c$RSK$ \u63d2\u5165\u7b97\u6cd5\uff0c\u8f6c\u7f6e\u6768\u8868\u3002\n\n\u4ecb\u7ecd\u4e00\u4e0b\u540e\u9762\u4e24\u4e2a\uff1a\n\n**$RSK$ \u63d2\u5165\u7b97\u6cd5**\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6768\u8868\uff08\u503c\u57df\u5f88\u5927\uff0c**\u4e0d\u662f\u6807\u51c6\u6768\u8868**\uff09 $\\lambda$\uff0c\u5c06\u4e00\u4e2a\u6570 $x$ \u63d2\u5165\u5230 $\\lambda$ \u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5728\u7b2c\u4e00\u884c\u4e8c\u5206\u51fa\u7b2c\u4e00\u4e2a\u5927\u4e8e $x$ \u7684\u6570\uff0c\u82e5\u6ca1\u6709\uff0c\u5219\u628a $x$ \u653e\u5728\u7b2c\u4e00\u884c\u672b\u5c3e\uff1b\u5982\u679c\u6709\uff0c\u90a3\u4ea4\u6362\u90a3\u4e2a\u6570\u4e0e $x$\uff0c\u5c06\u90a3\u4e2a\u6570\u5728\u4e0b\u4e00\u884c\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u76f4\u81f3\u6700\u540e\u4e00\u884c\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6709\u70b9\u50cf\u6211\u4eec\u7528\u5355\u8c03\u6808\u4f18\u5316 $LIS$ \u7684\u6c42\u89e3\u8fc7\u7a0b\uff0c\u8fd9\u5c31\u662f\u5b83\u7684\u7528\u5904\uff0c\u7ed3\u5408 $Dilworth$ \u5b9a\u7406\uff0c\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7b97\u6cd5\u3002\n\n**\u8f6c\u7f6e\u6768\u8868**\uff0c\u5728\u4ecb\u7ecd $RSK$ \u63d2\u5165\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u7684\u6768\u8868\u4e2d\u6bcf\u4e00\u884c\u90fd\u662f\u5355\u8c03\u9012\u51cf\uff0c\u4f7f\u7528\u7684\u8fd0\u7b97\u7b26\u65f6 $\\le$\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u201c\u53d6\u53cd\u201d\u4e3a $>$\uff0c\u90a3\u8fd9\u4e2a\u6768\u8868\u5c31\u79f0\u4f5c\u4e4b\u524d\u90a3\u4e2a\u6768\u8868\u7684\u201c\u8f6c\u7f6e\u6768\u8868\u201d$\\lambda'$\uff0c$\\lambda$ \u7684\u7b2c\u4e00\u884c\u5c31\u662f $\\lambda'$ \u7684\u7b2c\u4e00\u5217\uff0c\u5269\u4e0b\u7684\u540c\u7406\u3002\n\n**Solution**\n\n\u4e00\u4e2a\u5229\u7528 $RSK$ \u63d2\u5165\u7b97\u6cd5\u7684\u677f\u9898\uff0c\u5229\u7528\u4e86\u4e00\u70b9\u6280\u5de7\uff1a\u603b\u91cf\u662f $O(n)$\uff0c\u957f\u5bbd\u5206\u522b\u7ef4\u62a4 $\\sqrt n$ \u4e00\u5b9a\u80fd\u8986\u76d6\u5b8c\u3002\u7531 $Dilworth$ \u5b9a\u7406\uff08\u4e0d\u4f1a\u7684\u53bb\u8865\u8bfe\uff09\uff0c\u8fd9\u9898\u8981\u7ef4\u62a4\u7684\u5c31\u662f\u7531\u957f\u5230\u77ed\u7684\u6700\u957f\u5347\u5e8f\u5b50\u5e8f\u5217\u96c6\u5408\uff08\u6bcf\u4e2a\u6570\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\uff09\u4e2d\u6bcf\u4e2a\u4e0b\u6807\u7684\u5143\u7d20\u6570\u91cf\u7684\u524d\u7f00\u548c\uff08\u53ef\u4ee5\u7ed3\u5408\u6837\u4f8b\u7406\u89e3\uff09\u3002\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\u5230\u5e8f\u5217\u4e2d\uff0c\u626b\u63cf\u4e00\u904d\uff0c\u8bb0\u5f55\u6768\u8868\u524d $k$ \u5217\u7684\u683c\u5b50\u6570\u3002\u4f46\u662f\u6ce8\u610f\u6bcf\u6b21\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662f $O(r\\log c)$\uff0c\u5982\u679c\u662f\u964d\u5e8f\u5c31\u7206\u6389\u4e86\u3002\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u4e1c\u897f\uff1a\u53ea\u7ef4\u62a4\u524d $\\sqrt n$ \u5217\u7684\u6768\u8868\uff0c\u540e\u9762\u7684\u5728\u5176\u8f6c\u7f6e\u6768\u8868\u4e2d\u7ef4\u62a4\u884c\uff0c\u6ce8\u610f\u8fd9\u4e2a\u884c\u53ea\u6709\u5728\u683c\u5b50\u6570 $>\\sqrt n$ \u65f6\u66f4\u65b0\u3002\n\n\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u5728\u7ef4\u62a4\u65f6\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6216\u5206\u5757\u90fd\u53ef\u4ee5\uff0c\u5b9e\u8df5\u4e2d\u6811\u72b6\u6570\u7ec4\u6700\u5feb\uff08$n,q$ \u5dee\u4e0d\u591a\uff09\u3002\n\n\u7ed9\u4e2a\u4ee3\u7801\u5427\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct CGY {\n\tint x,y;\n};\nconst int N=200005;\nvector<CGY> qu[N];\nint idx[N],bls,s,n,m,L[N],R[N],a[N],x,y,ans[N];\nint sum1[N],sum2[N];\nvector<int> vec1[10005],vec2[10005];\nvoid add(int x) {\n\tfor(int i=idx[x];i<=bls;i++) ++sum1[i];\n\tfor(int i=x;i<=R[idx[x]];i++) ++sum2[i];\n}\nint getsum(int x) {\n\treturn sum1[idx[x]-1]+sum2[x];\n}\nvoid insert(int x) {\n\tint tmp=x;\n\tfor(int i=1;i<s;i++) {\n\t\tif(vec2[i].empty()||vec2[i].back()>=x) {\n\t\t\tvec2[i].push_back(x);\n\t\t\tadd(i);\n\t\t\tbreak;\n\t\t}\n\t\tvector<int>::iterator it=upper_bound(vec2[i].begin(),vec2[i].end(),x,greater<int>());\n\t\tswap(*it,x);\n\t}\n\tx=tmp;\n\tfor(int i=1;i<s;i++) {\n\t\tif(vec1[i].empty()||vec1[i].back()<x) {\n\t\t\tvec1[i].push_back(x);\n\t\t\tif(vec1[i].size()>=s)add(vec1[i].size());\n\t\t\tbreak;\n\t\t}\n\t\tvector<int>::iterator it=lower_bound(vec1[i].begin(),vec1[i].end(),x);\n\t\tswap(*it,x);\n\t}\n}\nint main() {\n\tcin >> n >> m;\n\ts=sqrt(n)+1,bls=(n+s-1)/s;\n\tfor(int i=1;i<=bls;i++) {\n\t\tL[i]=R[i-1]+1,R[i]=min(n,s*i);\n\t\tfor(int j=L[i];j<=R[i];j++) idx[j]=i;\n\t}\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=m;i++) scanf(\"%d%d\",&x,&y),qu[x].push_back((CGY){y,i});\n\tfor(int i=1;i<=n;i++) {\n\t\tinsert(a[i]);\n\t\tfor(auto &lxl:qu[i]) ans[lxl.y]=getsum(lxl.x);\n\t}\n\tfor(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1659418349,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "P3774 \u9898\u89e3"
    },
    {
        "content": "# Description\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $B$\uff0c\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee $[1,m]$ \u4e2d\u6700\u957f\u7684\u6ee1\u8db3 LIS \u957f\u5ea6 $\\le k$ \u7684\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\n\n$n,B_i \\le 5 \\times 10^4,q \\le 2 \\times 10^5$\uff0c\u65f6\u9650 1s\u3002\n\n# Solution\n\n\u7ea6\u5b9a\u4e0b\u6587\u4e2d $k$ \u2212 LIS \u8868\u793a\u5e8f\u5217 $X$ \u6700\u957f\u7684\u6ee1\u8db3 LIS \u957f\u5ea6\u4e0d\u8d85\u8fc7 $k$ \u7684\u5b50\u5e8f\u5217\u3002\n\n------------\n\n\n\u7ecf\u5178\u7684 $k$ - LIS \u95ee\u9898\uff0c\u8003\u8651\u4f7f\u7528\u6768\u6c0f\u77e9\u9635\u3002\n\n\u4ecb\u7ecd\u4e00\u4e2a\u6768\u6c0f\u77e9\u9635\u7684\u91cd\u8981\u6027\u8d28 1\uff1a\n\n> $\\mathcal P_{X^R}$ \u7531 $\\mathcal P_X$ \u8f6c\u7f6e\uff08\u5373\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u884c\u5217\uff09\u5f97\u5230\uff0c\u5176\u4e2d $X^R$ \u4e3a\u5e8f\u5217 $X$ \u7684\u7ffb\u8f6c\u3002\n\n\u4ee5\u53ca\u53e6\u4e00\u4e2a\u7c7b\u4f3c\u7684\u6027\u8d28 2\uff1a\n\n> \u5143\u7d20\u6bd4\u8f83\u65b9\u5f0f\u53d6\u53cd\uff0c\u5219 $\\mathcal P'_{X}$ **\u5f62\u72b6\u4e0a**\u7531 $\\mathcal P_X$ \u8f6c\u7f6e\u5f97\u5230\u3002\n\n\u8bc1\u660e\u53ef\u4ee5\u53bb\u770b 19 \u5e74\u56fd\u96c6\u8881\u8001\u5e08\u7684\u8bba\u6587\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0c\u5e8f\u5217 $X$ \u5bf9\u5e94\u6768\u6c0f\u77e9\u9635 $\\mathcal P_X$ \u7684\u7b2c\u4e00\u884c\u957f\u5ea6\u5c31\u662f $X$ \u7684 LIS \u957f\u5ea6\u3002\n\n\u90a3\u4e48\u7531\u4e0a\u9762\u7684\u6027\u8d28\u5f88\u5bb9\u6613\u5f97\u5230 $\\mathcal P_X$ \u7684\u7b2c\u4e00\u5217\u957f\u5ea6\u5c31\u662f $X$ \u7684 LDS\uff08\u5373 $1$ - LIS\uff09 \u957f\u5ea6\u3002\n\n\u53ef\u4ee5\u731c\u60f3 $X$ \u7684 $k$ - LIS \u957f\u5ea6\u5c31\u662f $\\mathcal P_X$ \u7684\u524d $k$ \u5217\u957f\u5ea6\u4e4b\u548c\uff0c\u4e8b\u5b9e\u4e0a\u786e\u5b9e\u5982\u6b64\u3002\u8bc1\u660e\u53ef\u4ee5\u8003\u8651 Dilworth \u53cd\u94fe\u5b9a\u7406\uff0c\u5e8f\u5217 LIS \u957f\u5ea6\u76f8\u5f53\u4e8e\u5c06\u5176\u5206\u6210\u82e5\u5e72 LDS \u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4e8e\u662f\u5c31\u663e\u7136\u4e86\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u52a8\u6001\u7ef4\u62a4\u6574\u4e2a $\\mathcal P_B$\uff0c\u4f46\u662f\u5355\u6b21\u63d2\u5165\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(n \\log n)$ \u7684\uff0c\u663e\u7136\u4e0d\u53ef\u884c\u3002\n\n\u6b63\u5f53\u4f60\u6000\u7591\u8fd9\u9898\u662f\u4e0d\u662f\u795e\u4ed9\u7684\u65b0\u79d1\u6280\u8bba\u6587\u9898\u65f6\uff0c\u4f60\u5ffd\u7136\u60f3\u8d77\u4e86\u4e0a\u6587\u4e2d\u7684\u6027\u8d28 2\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u7ef4\u62a4\u4e00\u4e2a\u8f6c\u7f6e\u77e9\u9635\u5462\uff1f\n\n\u6ce8\u610f\u5230\u6768\u6c0f\u77e9\u9635\u9010\u884c\u5217\u6570\u4e0d\u589e\uff0c\u4ee5\u53ca\u9010\u5217\u884c\u6570\u4e0d\u589e\u7684\u6027\u8d28\uff0c\u90a3\u4e48\u5047\u8bbe\u4e00\u4e2a\u6570\u6700\u7ec8\u63d2\u5165\u5230 $(x,y)$ \u7684\u4f4d\u7f6e\uff0c$x,y$ \u4e2d\u81f3\u5c11\u6709\u4e00\u8005 $\\le \\sqrt n$\u3002\n\n\u6240\u4ee5\u4e00\u4e2a\u66f4\u4e3a\u806a\u660e\u7684\u7b97\u6cd5\u547c\u4e4b\u6b32\u51fa\uff0c\u6211\u4eec\u6539\u4e3a\u7ef4\u62a4\u8fd0\u7b97\u7b26\u53d6\u53cd\u540e $\\mathcal P'_B$ \u7684\u524d $\\sqrt n$ \u884c\uff0c\u4ee5\u53ca $\\mathcal P_B$ \u7684\u524d $\\sqrt n$ \u884c\u3002\n\n\u524d\u8005\u7531 $\\mathcal P_B$ \u5f62\u72b6\u4e0a\u8f6c\u7f6e\u5f97\u5230\uff0c\u56e0\u6b64\u5bf9\u5e94\u957f\u5ea6\u5c31\u662f $\\mathcal P_B$ \u524d $\\sqrt n$ \u5217\u7684\u957f\u5ea6\uff1b\u800c\u540e\u8005\u5728\u6c42\u5927\u4e8e $\\sqrt n$ \u7684\u5217\u957f\u5ea6\u65f6\u5fc5\u7136\u5b8c\u6574\u3002\n\n\u5355\u6b21\u63d2\u5165\u662f\u5355\u70b9\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a $\\mathcal O(n \\sqrt n \\log n + q \\log n)$ \u7684\u505a\u6cd5\u3002\n\n# Code\n```cpp\nconst int N=5e4+5,M=255,Q=2e5+5;\n\nint n,m,a[N],Ans[Q];\n\nstruct Qst {\n\tint x,id;\n\tbool operator<(const Qst &r) const {\n\t\treturn x<r.x;\n\t}\n};\nvector<Qst> q[N];\n\n#define ad emplace_back\n#define sz size()\n\nstruct BIT {\n\tint n,T[N];\n\t#define lbt(x) (x&(-x))\n\tvoid Add(int x,int y) {\n\t\tfor (;x<=n;x+=lbt(x)) T[x]+=y;\n\t}\n\tint Qry(int x) {\n\t\tint Sum=0;\n\t\tfor (;x;x-=lbt(x)) Sum+=T[x];\n\t\treturn Sum; \n\t}\n}T;\n\nstruct Yng {\n\tint n,sg,s[M],t[M][N];\n\t\n\tvoid Ins(int x,int y,int v) {\n\t\tif (x>n) return;\n\t\tint l=1,r=min(y,s[x]+1);\n\t\twhile (l<r) {\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif (sg^(t[x][mid]<v)) r=mid;\n\t\t\telse l=mid+1;\n\t\t}\n\t\tswap(t[x][l],v),s[x]=max(s[x],l);\n\t\tif (v) Ins(x+1,l,v);\n\t\telse {\n\t\t\tif (sg) {if (l>n) T.Add(l,1);}\n\t\t\telse T.Add(x,1);\n\t\t}\n\t}\n}M1,M2;\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tM2.sg=1,M1.n=M2.n=sqrt(n),T.n=n; \n\tfor (int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor (int i=1;i<=m;i++) {\n\t\tint x,k;\n\t\tscanf(\"%d%d\",&x,&k);\n\t\tq[x].ad(Qst{k,i});\n\t}\n\t\n\tfor (int i=1;i<=n;i++) {\n\t\tM1.Ins(1,n+1,a[i]),M2.Ins(1,n+1,a[i]);\n\t\tif (q[i].sz)\n\t\t\tfor (auto v:q[i]) Ans[v.id]=T.Qry(v.x);\n\t}\n\t\n\tfor (int i=1;i<=m;i++) printf(\"%d\\n\",Ans[i]);\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1640427225,
        "uid": 283913,
        "name": "ZillionX",
        "ccfLevel": 6,
        "title": "\u300c\u9898\u89e3\u300d[CTSC2017] \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"
    },
    {
        "content": "**\u611f\u8c22@[okbj](https://www.luogu.com.cn/user/123679)\u63d0\u4f9b\u7684\u4ee3\u7801\u601d\u8def\uff0c\u4f46\u662f\u7531\u4e8e\u5176\u53ea\u53d1\u4e86\u4ee3\u7801\u9898\u89e3\uff0c\u90a3\u4e48\u6211\u6765\u8865\u5145\u4e00\u4e0b\u5206\u6790\u601d\u8def\u7f62\u3002**\n\n\u4e00\u9053\u6768\u6c0f\u77e9\u9635\uff08\u6768\u77e9\u9635\u3001\u6768\u8868\uff09\u7684\u6a21\u677f\u9898\u3002\u5bf9\u4e8e\u5176\u8bb2\u89e3\uff0c\u53ef\u4ee5\u5b66\u4e60[\u8fd9\u91cc](https://www.luogu.com.cn/blog/qlwpc/yang-shi-ju-zhen-jian-jie)\uff0c\u975e\u5e38\u7b80\u6d01\u6613\u61c2\u3002\n\n\u4e0b\u9762\u6765\u5206\u6790\u8fd9\u9053\u9898\u3002\n\n\u6839\u636e\u72c4\u5c14\u6c83\u65af\u5b9a\u7406\uff0c\u6700\u5c0f\u94fe\u8986\u76d6\u7b49\u4e8e\u6700\u957f\u53cd\u94fe\u3002\u56e0\u6b64\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u6c42 $k$ \u4e2a\u6700\u5c0f\u4e0d\u4e0a\u5347\u5e8f\u5217\u80fd\u8986\u76d6\u7684\u6700\u5927\u6570\u7684\u4e2a\u6570\u3002\n\n\u539f\u77e9\u9635\u53ea\u9700\u7ef4\u62a4\u524d $\\sqrt n$ \u884c\uff0c\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\u65f6\u540c\u6837\uff0c\u53ea\u67e5\u8be2\u524d $\\sqrt n$ \u884c\uff0c\u5269\u4e0b\u7684\u53ef\u4ee5\u7f6e\u6362\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u5217\u3002\u540c\u6837\u5730\uff0c\u7f6e\u6362\u77e9\u9635\u65f6\u53ea\u9700\u7ef4\u62a4\u524d $\\sqrt n$ \u884c\u3002\u53ef\u4ee5\u4e8c\u5206\u8fdb\u884c\u7ef4\u62a4\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\u3002\u5176\u4e2d\u8be5\u77e9\u9635\u7684\u8f6c\u7f6e\u6307\u7684\u662f\u6539\u53d8\u6bd4\u8f83\u65b9\u5f0f\uff0c\u5373\u4ece\u539f\u5148\u7684\u4ece\u5927\u5230\u5c0f\u7ef4\u62a4\u53d8\u6210\u4ece\u5c0f\u5230\u5927\u7ef4\u62a4\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n\n#define MOD 1000000007\n#define int long long\n#define MAXN 60100\n#define MAXM 233\n#define Enter puts(\"\")\n#define Space putchar(' ')\n#define Test_Begin Enter , puts(\"Test--------------\")\n#define Test_End Enter , puts(\"--------------------\")\n\nusing namespace std;\n\nconstexpr int INF = 2147483647;\n\nstatic inline int Read()\n{\n\tint Ans = 0;\n\tchar Ch = getchar(), Las = ' ';\n\twhile (!isdigit(Ch))\n\t{\n\t\tif (Ch == '-')\n\t\t\tLas = '-';\n\t\tCh = getchar();\n\t}\n\twhile (isdigit(Ch))\n\t{\n\t\tAns = Ans * 10 + Ch - '0';\n\t\tCh = getchar();\n\t}\n\tif (Las == '-')\n\t\tAns = -Ans;\n\treturn Ans;\n}\n\nstatic inline void Write(int x)\n{\n\tif (x < 0)\n\t{\n\t\tx = -x;\n\t\tputchar('-');\n\t}\n\tif (x >= 10)\n\t\tWrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nstruct Node\n{\n    int Pos , k , id , Ans;\n};\n\nstatic inline bool Cmp1(Node a , Node b)\n{\n    return a.Pos < b.Pos;\n}\n\nstatic inline bool Cmp2(Node a , Node b)\n{\n    return a.id < b.id;\n}\n\nint n , a[MAXN];\n\nstruct A\n{\n    int _a[MAXM + 10][MAXN] , Len[MAXM + 10];\n\n    inline void Insert(int x , int y , int Val)\n    {\n        if(x > MAXM)\n            return;\n        y = min(y , Len[x]);\n        while(y and (_a[x][y] < Val))\n            y--;\n        y++;\n        if(y > Len[x])\n        {\n            _a[x][++Len[x]] = Val;\n            return;\n        }\n        else\n        {\n            Insert(x + 1 , y , _a[x][y]);\n            _a[x][y] = Val;\n        }\n    }\n};\n\nstruct B\n{\n    int _a[MAXM + 10][MAXN] , Len[MAXM + 10];\n\n    inline void Insert(int x , int y , int Val)\n    {\n        if(x > MAXM)\n            return;\n        y = min(y , Len[x]);\n        while(y and (_a[x][y] >= Val))\n            y--;\n        y++;\n        if(y > Len[x])\n        {\n            _a[x][++Len[x]] = Val;\n            return;\n        }\n        else\n        {\n            Insert(x + 1 , y , _a[x][y]);\n            _a[x][y] = Val;\n        }\n    }\n};\n\nA _A;\nB _B;\nNode N[MAXN << 2];\n\nstatic inline int Query(int x)\n{\n    int Ans(0);\n    for(register int i = 1; (i <= x) and (i <= MAXM); i++)\n        Ans += _A.Len[i];\n    if(x > MAXM)\n        for(register int i = 1; (i <= MAXM) and (_B.Len[i] > MAXM); i++)\n            Ans += min(_B.Len[i] , x) - MAXM;\n    return Ans;\n}\n\nsigned main()\n{\n    int n = Read() , Q = Read();\n    for(register int i = 1; i <= n; i++)\n        a[i] = Read();\n    for(register int i = 1; i <= Q; i++)\n    {\n        N[i].Pos = Read() , N[i].k = Read();\n        N[i].id = i;\n    }\n    sort(N + 1 , N + Q + 1, Cmp1);\n    for(register int i = 1 , j = 1; i <= n; i++)\n    {\n        _A.Insert(1 , MAXN , a[i]);\n        _B.Insert(1 , MAXN , a[i]);\n        for(; j <= Q and N[j].Pos == i; j++)\n            N[j].Ans = Query(N[j].k);\n    }\n    sort(N + 1 , N + Q + 1 , Cmp2);\n    for(register int i = 1; i <= Q; i++)\n        Write(N[i].Ans) , Enter;\n    return 0;\n}\n```\n",
        "postTime": 1632705932,
        "uid": 234775,
        "name": "Tenderfoot",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3774 [CTSC2017]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217"
    },
    {
        "content": "```\n#include<bits/stdc++.h>\n#define N 50505\n#define M 233\nusing namespace std;\nstruct data{int pos,K,id,ans;}d[N<<2];\nbool cmp1(data a,data b){return a.pos<b.pos;}\nbool cmp2(data a,data b){return a.id<b.id;}\nint n,m,a[N];\nnamespace A{\nint a[M+10][N],len[M+10];\nvoid insert(int x,int y,int v){\n if(x>M)return ;\n       y=min(y,len[x]);\n       while(y&&a[x][y]<v)y--;y++;\n       if(y>len[x]){\n           a[x][++len[x]]=v;\n            return;\n         }\n         else{\n             insert(x+1,y,a[x][y]);\n             a[x][y]=v;\n         }\n     }\n };\n namespace B{\n    int a[M+10][N],len[M+10];\n     void insert(int x,int y,int v){\n\t          if(x>M)return ;\n        y=min(y,len[x]);\n         while(y&&a[x][y]>=v)y--;y++;\n         if(y>len[x]){\n            a[x][++len[x]]=v;\n             return;\n         }\n         else{\n             insert(x+1,y,a[x][y]);\n             a[x][y]=v;\n         }\n    }\n};\n int query(int x){\n     int ans=0;\n     for(int i=1;i<=x&&i<=M;i++)\n         ans+=A::len[i];\n     if(x>M){\n         for(int i=1;i<=M&&B::len[i]>M;i++)\n             ans+=min(B::len[i],x)-M;\n     }\n     return ans;\n }\n int main(){\n     scanf(\"%d%d\",&n,&m);\n     for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n     for(int i=1;i<=m;i++)\n        scanf(\"%d%d\",&d[i].pos,&d[i].K),d[i].id=i;\n    sort(d+1,d+m+1,cmp1);\n     for(int i=1,j=1;i<=n;i++){\n        A::insert(1,N,a[i]);\n         B::insert(1,N,a[i]);\n         for(;j<=m&&d[j].pos==i;j++)\n             d[j].ans=query(d[j].K);\n     }\n     sort(d+1,d+m+1,cmp2);\n     for(int i=1;i<=m;i++)\n         printf(\"%d\\n\",d[i].ans);\n     return 0;\n }\n```",
        "postTime": 1535600680,
        "uid": 123679,
        "name": "okbj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3774 \u3010[CTSC2017]\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u3011"
    }
]