[
    {
        "content": "\u9996\u5148\u5148\u8003\u8651\u5355\u7ec4\u8be2\u95ee\u3002\u8fd9\u65f6\u5e94\u8be5\u600e\u4e48\u5904\u7406\uff1f\n\n\u663e\u7136\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\uff0c\u6211\u4eec\u8bbe $f_{i,a,b,c}$ \u8868\u793a $i$ \u7684\u5b50\u6811\u4e2d\u4e09\u79cd\u989c\u8272\u5404\u9009\u4e86 $a,b,c$ \u4e2a\u65f6\u7684\u65b9\u6848\u6570\uff0c\u7136\u540e\u7b80\u5355\u80cc\u5305\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u4f46\u662f\uff0c\u5408\u5e76\u4e24\u4e2a\u80cc\u5305\u7684\u590d\u6742\u5ea6\u662f $(abc)^2$ \u7684\uff0c\u65e0\u6cd5\u901a\u8fc7\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u6ce8\u610f\u5230\u8fd9\u79cd\u80cc\u5305\u5f80\u5176\u4e2d**\u6dfb\u52a0\u4e00\u4e2a\u6570**\u7684\u64cd\u4f5c\u662f $O(abc)$ \u7684\uff0c\u56e0\u6b64\u6211\u4eec\u5c1d\u8bd5\u6784\u5efa\u4e00\u79cd\u65b9\u6cd5\uff0c\u5176\u4e2d\u5168\u7a0b\u4ec5\u6d89\u53ca\u5230\u6dfb\u52a0\u6570\uff0c\u4e0d\u6d89\u53ca\u5230\u4e24\u4e2a\u80cc\u5305\u95f4\u7684\u5377\u79ef\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u6811\u6dc0\u7c89\u8d28\u3002\u8003\u8651\u5f53\u524d\u7684\u5206\u6cbb\u6811\u3002\n\n\u6211\u4eec\u94a6\u5b9a\u5206\u6cbb\u6811\u7684\u6811\u6839**\u5fc5\u987b\u5728\u80cc\u5305\u91cc**\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u5982\u679c\u513f\u5b50\u9009\u4e86\uff0c\u7236\u4eb2\u5c31\u4e00\u5b9a\u8981\u88ab\u9009\u3002\u8fdb\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u601d\u51fa\u5982\u4e0b DP \u65b9\u5f0f\uff1a\n\n\u6df1\u641c\u6574\u68f5\u6811\u3002\u5f53\u5c1d\u8bd5\u8fdb\u5165\u4e00\u4e2a\u513f\u5b50\u65f6\uff0c\u6211\u4eec\u9996\u5148\u5c06\u7236\u4eb2\u7684 DP \u6570\u7ec4\u62f7\u8d1d\u4e00\u4efd\u7ed9\u513f\u5b50\uff0c\u7136\u540e\u8fdb\u5165\u513f\u5b50\u9012\u5f52\uff0c\u9012\u5f52\u5b8c\u513f\u5b50\u540e\u518d\u628a\u7236\u5b50\u7684\u80cc\u5305\u5408\u5e76\u5373\u53ef\u3002\n\n\u660e\u663e\u6b64\u65f6\u80cc\u5305\u4ec5\u4ec5\u6d89\u53ca\u5230\u6dfb\u52a0\u4e00\u4e2a\u6570\uff0c\u56e0\u800c\u590d\u6742\u5ea6\u662f $O(abcn\\log n)$\u3002\n\n\u7136\u540e\u8003\u8651\u56de\u7b54\u591a\u7ec4\u8be2\u95ee\u3002\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u6bcf\u79cd\u989c\u8272\u7684\u5143\u7d20\u6570\u90fd\u4e0d\u4f1a\u592a\u591a\uff0c\u6545\u9996\u5148\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9\u5173\u5fc3\u7684\u4e09\u79cd\u989c\u8272\u5efa\u865a\u6811\u3002\n\n\u5efa\u5b8c\u865a\u6811\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u865a\u6811\u4e0a\u505a\u6dc0\u7c89\u8d28\uff0c\u5e76\u4e14\u5957\u7528\u4e0a\u8ff0\u5408\u5e76\u8fc7\u7a0b\u3002\n\n\u8003\u8651\u5408\u5e76\u8fc7\u7a0b\u4e2d\u6240\u6709\u9700\u8981\u7684\u503c\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u67d0\u68f5\u5b50\u6811\u4e2d\u9009\u62e9\u4e00\u4e2a\u5305\u542b\u6839\u7684\u975e\u7a7a\u8fde\u901a\u5757\u7684\u65b9\u6848\u6570\u3002\u8fd9\u53ef\u4ee5\u4ee4 $sub_x=\\prod\\limits_{y\\text{ is a son of }x}(sub_y+1)$ \u5f97\u51fa\u3002\u4f46\u662f\u5b50\u6811\u4e0d\u4e00\u5b9a\u662f\u4ee5 $1$ \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u6545\u6211\u4eec\u9700\u8981\u518d\u6362\u4e2a\u6839\u5f97\u5230 $ful_x$ \u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u65f6\u7684\u7b54\u6848\u3002\u7ed3\u5408 $sub$ \u4e0e $ful$\uff0c\u6211\u4eec\u53ef\u4ee5\u5173\u4e8e\u865a\u6811\u4e2d\u6bcf\u4e2a\u70b9\u627e\u51fa\u5176\u6240\u6709**\u4e0d\u5305\u542b\u4efb\u4f55\u865a\u6811\u4e0a\u70b9**\u7684\u5b50\u6811\u4e2d\u4efb\u610f\u9009\u62e9\u7684\u65b9\u6848\u6570\uff0c\u8bb0\u4f5c $lam_x$\u3002\u56e0\u4e3a $sub$ \u7684\u9012\u63a8\u5f0f\u8868\u660e\u5176\u6ee1\u8db3\u53ef\u51cf\u6027\uff0c\u6545 $lam$ \u53ef\u4ee5\u76f4\u63a5\u7531 $ful$ \u9664\u53bb\u6240\u6709**\u865a\u6811\u4e0a\u4e0e\u4e4b\u90bb\u63a5\u7684\u70b9**\u5bf9\u5e94\u5b50\u6811\u7684\u65b9\u6848\u6570\u5f97\u5230\u3002\n\n\u7136\u540e\u8003\u8651\u8f6c\u79fb\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u53d1\u73b0\u8f6c\u79fb\u65f6\u8981\u77e5\u9053\u94fe\u7684\u65b9\u6848\u6570\uff1a\u5047\u5982\u67d0\u4e2a\u513f\u5b50\u4e0d\u9009\uff0c\u5219\u94fe\u7684\u65b9\u6848\u5c31\u662f\u94fe\u9876\u5f3a\u5236\u9009\u3001\u94fe\u5e95\u5f3a\u5236\u4e0d\u9009\u7684\u65b9\u6848\u6570\uff1b\u9009\uff0c\u5c31\u662f\u94fe\u9876\u94fe\u5e95\u90fd\u9009\u7684\u65b9\u6848\u6570\u3002\u56e0\u4e3a\u6dc0\u7c89\u8d28\u65f6\u6bcf\u6761\u94fe\u4ece\u4e0a\u4ece\u4e0b\u88ab\u8003\u8651\u90fd\u662f\u6709\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u6761\u5728\u539f\u6811\u4e2d\u4ece\u4e0a\u5f80\u4e0b\u7684\u94fe\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u94fe\u5e95\u9009\u800c\u94fe\u9876\u4e0d\u9009\u7684\u65b9\u6848\u6570\uff08\u8bb0\u4f5c $bot$\uff09\u3001\u94fe\u5e95\u4e0d\u9009\u800c\u94fe\u9876\u9009\u7684\u65b9\u6848\u6570\uff08\u8bb0\u4f5c $top$\uff09\u3001\u94fe\u9876\u94fe\u5e95\u90fd\u9009\u7684\u65b9\u6848\u6570\uff08\u8bb0\u4f5c $whl$\uff09\u3002\n\n\u5217\u51fa\u5f0f\u5b50\u5c31\u4f1a\u53d1\u73b0\u5f53\u4e00\u6761\u94fe\u7684\u94fe\u9876\u4e0e\u53e6\u4e00\u6761\u94fe\u7684\u94fe\u5e95\u76f8\u540c\u65f6\uff0c\u8fd9\u4e24\u6761\u94fe\u53ef\u4ee5\u8fd0\u7528\u4e0a\u8ff0\u503c\u52a0\u4ee5\u5408\u5e76\uff0c\u9700\u8981\u77e5\u9053\u7684\u8f85\u52a9\u503c\u662f\u76f8\u540c\u70b9\u5468\u56f4\u7684\u70b9\u4efb\u610f\u9009\u62e9\u6216\u4e0d\u9009\u62e9\u7684\u65b9\u6848\u6570\u3002\u4e8e\u662f\u53ef\u4ee5\u500d\u589e\u5904\u7406\uff0c\u6bcf\u6b21\u5408\u5e76\u4e24\u6761\u94fe\u3002\n\n\u4f46\u662f\uff0c\u5982\u679c\u628a\u5408\u5e76\u4e24\u6761\u94fe\u65f6\u6240\u8981\u8fdb\u884c\u7684\u5f0f\u5b50\u5168\u90fd\u5217\u51fa\u6765\uff0c\u6211\u4eec\u6700\u7ec8\u751a\u81f3\u53ef\u4ee5\u53d1\u73b0\u94fe\u95f4\u5177\u6709\u53ef\u51cf\u6027\uff0c\u8fdb\u800c\u76f4\u63a5\u4e00\u4e2a\u524d\u7f00\u548c\u5c31\u89e3\u51b3\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u4e09\u79cd\u989c\u8272\u9700\u8981\u7684\u6570\u91cf\u90fd\u4e3a $0$ \u65f6\uff0c\u6b64\u65f6\u9009\u51fa\u7684\u8fde\u901a\u5757\u53ef\u80fd\u4e0d\u5305\u542b\u4efb\u4f55\u865a\u6811\u4e2d\u7684\u70b9\uff0c\u4e5f\u5373\u5176\u6765\u81ea\u4e8e\u67d0\u70b9\u5728\u5b9e\u6811\u4e0a\u7684\u5b50\u6811\u4e2d\uff0c\u6216\u8005\u5728\u4e00\u6761\u94fe\u7684\u4e2d\u592e\u3002\n\n\u524d\u8005\u53ef\u4ee5\u5728\u6362\u6839 DP \u65f6\u987a\u624b\u9884\u5904\u7406\u6389\uff08\u56e0\u4e3a\u865a\u6811\u4ee5 $1$ \u4e3a\u6839\uff0c\u6240\u4ee5\u5b9e\u6811\u4e0a\u5b50\u6811\u5fc5\u7136\u4e0d\u53ef\u80fd\u662f\u7236\u4eb2\u65b9\u5411\u7684\u5b50\u6811\uff0c\u6545\u53ea\u9700\u8981\u5bf9 $sub$ \u5728\u5b50\u6811\u4e0a\u6c42\u4e2a\u548c\u5373\u53ef\uff09\u3002\u540e\u8005\u9700\u8981\u989d\u5916\u8bb0\u4e00\u4e2a $unl$ \u8868\u793a\u94fe\u9876\u94fe\u5e95\u90fd\u4e0d\u9009\u7684\u65b9\u6848\u6570\uff0c\u53ef\u4ee5\u548c $bot,top,whl$ \u4e00\u6837\u8f6c\u79fb\uff0c\u4e14\u4e00\u6837\u6ee1\u8db3\u53ef\u51cf\u6027\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u505a\u5230 $n\\log n+\\sum abc(a+b+c)\\log(a+b+c)$\u3002\n\n\u867d\u7136\u4f46\u662f\uff0c\u672c\u4eba\u7684\u5b9e\u73b0\u65b9\u5f0f\u5e38\u6570\u5f88\u5927\uff0c\u82b1\u4e86\u597d\u4e45\u624d\u5361\u8fc7 LG \u7684\u8bc4\u6d4b\uff0c\u5e76\u59cb\u7ec8\u65e0\u6cd5\u5728 UOJ \u4e0a\u901a\u8fc7\u3002\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u4f18\u5316\u5e38\u6570\u7684\u65b9\u6cd5\uff1a\n\n\u8003\u8651\u4e0d\u5728\u9012\u5f52\u65f6 DP\uff0c\u800c\u662f\u5728\u9012\u5f52\u65f6\u6c42\u51fa dfs \u5e8f\u3002\u8fd9\u6837\uff0c\u5982\u679c\u4e00\u4e2a\u513f\u5b50\u88ab\u9009\u5c31\u7b49\u4ef7\u4e8e\u7528 $f_i$ \u8f6c\u79fb\u5230 $f_{i+1}$\uff0c\u4e0d\u88ab\u9009\u5c31\u7b49\u4ef7\u4e8e\u7528 $f_i$ \u8f6c\u79fb\u5230 $f_{lea_{i+1}}$\uff0c\u5176\u4e2d $lea_{i+1}$ \u610f\u5473\u7740 $i+1$ \u6240\u5728\u5b50\u6811\u4e2d dfs \u5e8f\u6700\u5927\u70b9\u7684\u7f16\u53f7\u52a0\u4e00\uff0c\u8fd9\u6b65\u7684\u610f\u4e49\u662f\u8df3\u8fc7\u6574\u68f5 $i+1$ \u5b50\u6811\u4e0d\u9009\u3002\n\n\u8fd9\u79cd DP \u65b9\u5f0f\u51cf\u5c11\u4e86\u5f88\u591a\u62f7\u8d1d\u6570\u7ec4\u7684\u64cd\u4f5c\uff0c\u6545\u5e38\u6570\u6bd4\u8d77\u4e4b\u524d\u8981\u5c0f\u3002\n\n\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100100;\nconst int LG=17;\ntypedef long long ll;\nconstexpr int mod=1e9+7;\nint ksm(int x,int y=mod-2){int z=1;for(;y;y>>=1,x=1ll*x*x%mod)if(y&1)z=1ll*z*x%mod;return z;}\nvoid ADJ(int&x){if(x>=mod)x-=mod;}\nint RED(int x){return x>=mod?x-mod:x;}\nnamespace FIFO{\nchar buf[1<<23],*p1=buf,*p2=buf;\n#ifndef Troverld\n#define gc() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\n#else\n#define gc() getchar()\n#endif\ntemplate<typename T>void read(T&x){\n\tx=0;\n\tchar c=gc();\n\twhile(c>'9'||c<'0')c=gc();\n\twhile(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=gc();\n}\ntemplate<typename T>void print(T x){if(x<=9)putchar('0'+x);else print(x/10),putchar('0'+x%10);}\n}using namespace FIFO;\nint n,m,col[N];\nvector<int>cc[N];\nnamespace TRE{\nstruct Chain{\n\tint bot,top,whl,unl;\n\tChain(int B,int T,int W,int U){bot=B,top=T,whl=W,unl=U;}\n\tChain(){bot=top=unl=0,whl=1;}\n\tChain REV(){return Chain(top,bot,whl,unl);}\n//\tvoid pr(){printf(\"[%d %d %d %d]\",bot,top,whl,unl);}\n}chn[N];\nChain merge(Chain u,Chain v,int val,int bon){\n\treturn Chain(\n\t(1ll*u.whl*v.bot%mod*val+u.bot)%mod,\n\t(1ll*u.top*v.whl%mod*val+v.top)%mod,\n\t1ll*u.whl*v.whl%mod*val%mod,\n\t(1ll*u.top*v.bot%mod*val+u.unl+v.unl+bon)%mod\n\t);\n}\nChain split(Chain u,Chain v,int val,int bon){\n\tint inv=ksm(1ll*v.whl*val%mod);\n\tint whl=1ll*u.whl*inv%mod;\n\tint bot=RED(u.bot+mod-1ll*whl*v.bot%mod*val%mod);\n\tint top=1ll*(u.top+mod-v.top)*inv%mod;\n\tint unl=RED(u.unl+mod-(1ll*top*v.bot%mod*val+v.unl+bon)%mod);\n\treturn Chain(bot,top,whl,unl);\n}\nvector<int>v[N];\nvoid aev(int x,int y){v[x].push_back(y),v[y].push_back(x);}\nint sub[N],ful[N],anc[N][LG],dep[N],dfn[N],tot,sum[N],ult[N],isb[N],iut[N];\nint pas(int x,int y){if(dep[x]>dep[y])swap(x,y);return 1ll*sub[x]*isb[y]%mod;}\nvoid dfs1(int x,int fa){\n\tsub[x]=1,dep[x]=dep[fa]+1,dfn[x]=++tot;\n\tfor(auto y:v[x])if(y!=fa)\n\t\tdfs1(y,x),sub[x]=1ll*sub[x]*(sub[y]+1)%mod,ADJ(sum[x]+=RED(sum[y]+sub[y]));\n\tisb[x]=ksm(sub[x]+1);\n}\nvoid dfs2(int x,int fa){\n\tfor(auto y:v[x])if(y!=fa)\n\t\tult[y]=1ll*ful[x]*isb[y]%mod,iut[y]=ksm(ult[y]+1),\n\t\tful[y]=1ll*(ult[y]+1)*sub[y]%mod,dfs2(y,x);\n}\nvoid dfs3(int x,int fa){\n\tanc[x][0]=fa;\n\tfor(int i=1;i<LG;i++)anc[x][i]=anc[anc[x][i-1]][i-1];\n\tfor(auto y:v[x])if(y!=fa)\n\t\tchn[y]=merge(Chain(1,1,1,0),chn[x],pas(x,y),RED(sum[x]+mod-RED(sum[y]+sub[y]))),\n\t\tdfs3(y,x);\n}\nint JUM(int x,int y){for(int i=LG-1;i>=0;i--)if(dep[x]<dep[y]-(1<<i))y=anc[y][i];return y;}\nChain Path(int x,int y){\n\tint z=JUM(x,y);\n\treturn split(chn[y],chn[x],pas(x,z),RED(sum[x]+mod-RED(sum[z]+sub[z])));\n}\nint LCA(int x,int y){\n\tif(dep[x]>dep[y])swap(x,y);\n\tfor(int i=LG-1;i>=0;i--)if(dep[x]<=(dep[y]-(1<<i)))y=anc[y][i];\n\tif(x==y)return x;\n\tfor(int i=LG-1;i>=0;i--)if(anc[x][i]!=anc[y][i])x=anc[x][i],y=anc[y][i];\n\treturn anc[x][0];\n}\n}using namespace TRE;\nnamespace IMG{\nint stk[N],tp,arr[N],head[N],lam[N],cnt;\nstruct node{int to,next,all,par;}edge[N<<1];\nbool vis[N];\nint f[N][6][6][6],RT,SZ,sz[N],msz[N];\nint a,b,c,A,B,C,res;\nvoid aeh(int x,int y){\n\tif(dep[x]>dep[y])swap(x,y);\n\tChain z=Path(x,y);\n//\tprintf(\"%d %d\\n\",x,y);\n\tif(!A&&!B&&!C)ADJ(res+=z.unl);\n\tedge[cnt].next=head[x],edge[cnt].to=y;\n\tedge[cnt].all=z.whl,edge[cnt].par=z.top,head[x]=cnt++;\n\tint zz=JUM(x,y);\n\tlam[x]=1ll*lam[x]*isb[zz]%mod;\n\tif(!A&&!B&&!C)ADJ(res+=mod-RED(sum[zz]+sub[zz]));\n\tedge[cnt].next=head[y],edge[cnt].to=x;\n\tedge[cnt].all=z.whl,edge[cnt].par=z.bot,head[y]=cnt++;\n\tlam[y]=1ll*lam[y]*iut[y]%mod;\n}\nvoid ins(int x){\n\tif(!tp){stk[++tp]=x,SZ++;return;}\n\tint lca=LCA(stk[tp],x);\n\twhile(tp>=2&&dep[stk[tp-1]]>=dep[lca])aeh(stk[tp-1],stk[tp]),tp--;\n\tif(dep[stk[tp]]>dep[lca])aeh(lca,stk[tp--]);\n\tif(stk[tp]!=lca)stk[++tp]=lca,SZ++;\n\tif(stk[tp]!=x)stk[++tp]=x,SZ++;\n}\nvoid fin(){while(tp>=2)aeh(stk[tp-1],stk[tp]),tp--;tp=0;}\n#define iter for(int i=head[x],y;i!=-1;i=edge[i].next)if(!vis[y=edge[i].to])\nvoid getroot(int x,int fa){\n\tsz[x]=1,msz[x]=0;\n\titer if(y!=fa)getroot(y,x),sz[x]+=sz[y],msz[x]=max(msz[x],sz[y]);\n\tmsz[x]=max(msz[x],SZ-sz[x]);\n\tif(msz[x]<msz[RT])RT=x;\n}\nvoid getsz(int x,int fa){sz[x]=1;iter if(y!=fa)getsz(y,x),sz[x]+=sz[y];}\n#define trit for(int _a=0;_a<=A;_a++)for(int _b=0;_b<=B;_b++)for(int _c=0;_c<=C;_c++)\n#define trin _a][_b][_c\nint num,rec[N],lea[N],ALL[N],PAR[N],LAM[N];\nvoid getdfn(int x,int fa){\n\tint id=++num;\n//\tprintf(\"%d \",x);\n\trec[id]=col[x],LAM[id]=lam[x];\n\tfor(int i=head[x],y;i!=-1;i=edge[i].next){\n\t\tif((y=edge[i].to)==fa)continue;\n\t\tif(vis[edge[i].to])LAM[id]=1ll*LAM[id]*edge[i].par%mod;\n\t\telse PAR[num+1]=edge[i].par,ALL[num+1]=edge[i].all,getdfn(y,x);\n\t}\n\tlea[id]=num;\n}\nvoid calc(int x){\n\tgetdfn(x,0);\n\tfor(int i=1;i<=num;i++)trit f[i][trin]=0;\n\tf[1][rec[1]==a][rec[1]==b][rec[1]==c]=LAM[1];\n\tfor(int i=2;i<=num;i++){\n\t\ttrit{\n\t\t\tint _A=_a+(rec[i]==a),_B=_b+(rec[i]==b),_C=_c+(rec[i]==c);\n\t\t\tif(_A<=A&&_B<=B&&_C<=C)\n\t\t\t\tf[i][_A][_B][_C]=\n\t\t\t\t\t(1ll*f[i-1][trin]*ALL[i]%mod*LAM[i]+f[i][_A][_B][_C])%mod;\n\t\t}\n\t\ttrit f[lea[i]][trin]=(1ll*f[i-1][trin]*PAR[i]+f[lea[i]][trin])%mod;\n\t}\n\tADJ(res+=f[num][A][B][C]),num=0;\n}\nvoid solve(int x){\n\tcalc(x),getsz(x,0),vis[x]=true;\n\titer SZ=sz[y],RT=0,getroot(y,0),solve(RT);\n}\nvoid nil(int x,int fa){ADJ(res+=sum[x]);iter if(y!=fa)nil(y,x);}\nvoid reset(int x,int fa){\n\tfor(int i=head[x],y;i!=-1;i=edge[i].next)if((y=edge[i].to)!=fa)reset(y,x);\n\tlam[x]=ful[x],vis[x]=false,head[x]=-1;\n}\nvoid query(){\n\tread(a),read(A),read(b),read(B),read(c),read(C);\n\tif(A>cc[a].size()||B>cc[b].size()||C>cc[c].size()){putchar('0'),putchar('\\n');return;}\n\tfor(auto x:cc[a])arr[++arr[0]]=x;\n\tfor(auto x:cc[b])arr[++arr[0]]=x;\n\tfor(auto x:cc[c])arr[++arr[0]]=x;\n\tsort(arr+1,arr+arr[0]+1,[](int x,int y){return dfn[x]<dfn[y];});\n\tif(arr[1]!=1)ins(1);for(int i=1;i<=arr[0];i++)ins(arr[i]);fin();\n\tif(!A&&!B&&!C)nil(1,0);\n\tgetroot(1,0),solve(RT);\n\tprint(res),putchar('\\n');\n\tRT=SZ=res=cnt=0;for(int i=1;i<=arr[0];i++)arr[i]=0;arr[0]=0,reset(1,0);\n}\n}using namespace IMG;\nint main(){\n\tread(n),read(m),memset(head,-1,sizeof(head));\n\tfor(int i=1;i<=n;i++)read(col[i]),cc[col[i]].push_back(i);\n\tfor(int i=1,x,y;i<n;i++)read(x),read(y),aev(x,y);\n\tdfs1(1,0),ful[1]=sub[1],dfs2(1,0),dfs3(1,0);\n\tmsz[0]=n;\n\tfor(int i=1;i<=n;i++)lam[i]=ful[i];\n\tfor(int i=1;i<=m;i++)query();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1638322260,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6668\u3010[\u6e05\u534e\u96c6\u8bad2016] \u8fde\u901a\u5b50\u6811\u3011"
    }
]