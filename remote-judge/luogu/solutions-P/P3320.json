[
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73\uff1a[https://www.cnblogs.com/PinkRabbit/p/10356940.html](https://www.cnblogs.com/PinkRabbit/p/10356940.html)\n\n### \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8fb9\u6709\u8fb9\u6743\u3002\n\n\u6bcf\u4e2a\u70b9\u53ef\u80fd\u662f\u5173\u952e\u70b9\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6539\u53d8\u4e00\u4e2a\u70b9\u662f\u5426\u662f\u5173\u952e\u70b9\u3002\n\n\u6c42\u6240\u6709\u5173\u952e\u70b9\u5f62\u6210\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u6811\u7684\u8fb9\u6743\u548c\u7684\u4e24\u500d\u3002\n\n### \u9898\u89e3\uff1a\n\n\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1aDFS \u5e8f\u6c42\u51fa\u540e\uff0c\u5047\u8bbe\u5173\u952e\u70b9\u6309\u7167 DFS \u5e8f\u6392\u5e8f\u540e\u662f $\\{a_1,a_2,\\ldots ,a_k\\}$\u3002\n\n\u90a3\u4e48\u6240\u6709\u5173\u952e\u70b9\u5f62\u6210\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u6811\u7684\u8fb9\u6743\u548c\u7684\u4e24\u500d\u7b49\u4e8e $\\mathrm{dist}(a_1,a_2)+\\mathrm{dist}(a_2,a_3)+\\cdots+\\mathrm{dist}(a_{k-1},a_k)+\\mathrm{dist}(a_k,a_1)$\u3002\n\n\u753b\u4e2a\u56fe\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u5e94\u8be5\u662f\u5f88\u597d\u61c2\u7684\u3002\n\n\u90a3\u4e48\u6c42\u4e00\u4e0b DFS \u5e8f\uff0c\u6bcf\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5f80\u96c6\u5408\u91cc\u52a0\u5165/\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\n\n\u5047\u8bbe\u63d2\u5165 $x$\uff0c\u5b83DFS\u5e8f\u5de6\u53f3\u4e24\u8fb9\u5206\u522b\u662f $y$ \u548c $z$\u3002\u90a3\u4e48\u7b54\u6848\u52a0\u4e0a $\\mathrm{dist}(x,y)+\\mathrm{dist}(x,z)-\\mathrm{dist}(y,z)$ \u5373\u53ef\u3002\n\n\u5220\u9664\u540c\u7406\u3002\u8fd8\u6709\uff0c\u6c42 LCA \u5c31\u7528\u4e2a\u500d\u589e\u6216\u8005\u6811\u5256\u5427\uff0cTarjan \u79bb\u7ebf\u6bd4\u8f83\u9ebb\u70e6\u3002\n\n\u7528 STL \u81ea\u5e26\u7684 set \u5bb9\u5668\u7ef4\u62a4\u8d77\u6765\u5f88\u65b9\u4fbf\u3002\u4f60\u4e5f\u53ef\u4ee5\u624b\u5199\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811\u3002\n\n```cpp\n#include <cstdio>\n#include <set>\n\ntypedef long long LL;\nconst int MN = 100005;\n\nint N, M;\nint h[MN], nxt[MN * 2], to[MN * 2], w[MN * 2], tot;\ninline void ins(int x, int y, int z) {\n\tnxt[++tot] = h[x], to[tot] = y, w[tot] = z, h[x] = tot;\n}\n\nint dfn[MN], idf[MN], dfc;\nint dep[MN], faz[MN][17];\nLL dis[MN];\n\nvoid DFS(int u, int fz) {\n\tdfn[u] = ++dfc; idf[dfc] = u; dep[u] = dep[faz[u][0] = fz] + 1;\n\tfor (int j = 1; 1 << j < dep[u]; ++j) faz[u][j] = faz[faz[u][j - 1]][j - 1];\n\tfor (int i = h[u]; i; i = nxt[i]) if (to[i] != fz) dis[to[i]] = dis[u] + w[i], DFS(to[i], u);\n}\n\ninline int lca(int x, int y) {\n\tif (dep[x] < dep[y]) std::swap(x, y);\n\tfor (int d = dep[x] - dep[y], j = 0; d; d >>= 1, ++j)\n\t\tif (d & 1) x = faz[x][j];\n\tif (x == y) return x;\n\tfor (int j = 16; ~j; --j) if (faz[x][j] != faz[y][j])\n\t\tx = faz[x][j], y = faz[y][j];\n\treturn faz[x][0];\n}\n\ninline LL dist(int x, int y) { return dis[x] + dis[y] - 2 * dis[lca(x, y)]; }\n\nbool vis[MN];\nstd::set<int> st;\nstd::set<int>::iterator it;\nLL Ans;\n\nint main() {\n\tscanf(\"%d%d\", &N, &M);\n\tfor (int i = 1, x, y, z; i < N; ++i) {\n\t\tscanf(\"%d%d%d\", &x, &y, &z);\n\t\tins(x, y, z), ins(y, x, z);\n\t}\n\tDFS(1, 0);\n\tfor (int m = 1, x, y, z; m <= M; ++m) {\n\t\tscanf(\"%d\", &x);\n\t\tx = dfn[x];\n\t\tif (!vis[idf[x]]) st.insert(x);\n\t\ty = idf[(it = st.lower_bound(x)) == st.begin() ? *--st.end() : *--it];\n\t\tz = idf[(it = st.upper_bound(x)) == st.end() ? *st.begin() : *it];\n\t\tif (vis[idf[x]]) st.erase(x);\n\t\tx = idf[x];\n\t\tLL d = dist(x, y) + dist(x, z) - dist(y, z);\n\t\tif (!vis[x]) vis[x] = 1, Ans += d;\n\t\telse vis[x] = 0, Ans -= d;\n\t\tprintf(\"%lld\\n\", Ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1549638285,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u81ea\u5df1\u641e\u51fa\u6765\u4e00\u79cd\u6811\u72b6\u6570\u7ec4+\u500d\u589e\u7684\u505a\u6cd5\uff0cA\u6389\u4e4b\u540e\u53d1\u73b0\u7f51\u4e0a\u7684\u9898\u89e3\u90fd\u662f\u5e73\u8861\u6811\u3002\u5fc3\u91cc\u8fd8\u662f\u6709\u70b9\u7f8e\u6ecb\u6ecb\u3002\n\n\u4e8e\u662f\u51b3\u5b9a\u5206\u4eab\u51fa\u6765\u3002~~\uff08\u5176\u5b9e\u53ea\u662f\u60f3\u627e\u4e2a\u501f\u53e3\u9893\u5e9f\u4e00\u4e0b\uff09~~\n\n\u4e0d\u8fc7\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u8010\u5fc3\u8bfb\u4e00\u8bfb\u5c31\u61c2\u4e86\u3002\n\n\u5728\u9605\u8bfb\u5b9e\u73b0\u90e8\u5206\u4e4b\u524d\uff0c\u8bf7\u4e0d\u8981\u8003\u8651\u201c\u8fd9\u4e2a\u64cd\u4f5c\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u201d\u201c\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u4e0d\u4f1a\u8fc7\u9ad8\uff1f\u201d\u8fd9\u7c7b\u7684\u95ee\u9898\u3002\u5426\u5219\u5f88\u53ef\u80fd\u4f60\u4f1a\u5f88\u5feb\u653e\u5f03\u9605\u8bfb\u3002\u5148\u7406\u89e3\u8fd9\u79cd\u505a\u6cd5\u7684\u6d41\u7a0b\u5373\u53ef\u3002\uff08\u53ef\u4ee5\u5148\u5267\u900f\u4e00\u4e0b\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u7ea6\u662f$O(m\\,log^2n)$\uff09\n\n### \u9898\u610f\u5206\u6790\n\n\u5206\u6790\u4e00\u4e0b\u9898\u610f\uff0c\u5176\u5b9e\u5c31\u662f\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u5728\u8fd9\u68f5\u6811\u4e0a\u9009\u62e9\u67d0\u51e0\u4e2a\u8282\u70b9\uff08\u8bbe\u8fd9\u51e0\u4e2a\u8282\u70b9\u7684\u96c6\u5408\u4e3a$S$\uff09\uff0c\u6c42\u4ece\u5176\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u51fa\u53d1\uff0c\u7ecf\u8fc7\u6240\u6709\u88ab\u9009\u62e9\u7684\u8282\u70b9\u540e\u518d\u56de\u5230\u51fa\u53d1\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\uff0c\u548c\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u8def\u5f84\u957f\u5ea6$L$\u662f\u4e00\u6837\u7684\uff0c\u4ec5\u4ec5\u662f\u6cbf\u539f\u8def\u8fd4\u56de\u800c\u5df2\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5373\u662f\u5c06\u6240\u6709$S$\u4e2d\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765\u7684\u8def\u5f84\u957f\u5ea6\u7684\u4e8c\u500d\uff0c\u5373$2L$\u3002\n\n\u4e0b\u4e24\u56fe\u5206\u522b\u662f$S=\\{3,4,6\\}$\u65f6\u7684\u8def\u5f84\u548c$S=\\{1,2,3\\}$\u65f6\u7684\u8def\u5f84\uff0c\u8bf7\u81ea\u884c\u7406\u89e3\uff0c\u6211\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\n\n(\u5728\u673a\u623f\u53ea\u80fd\u7528Windows 7\u7684\u753b\u56fe\u5de5\u5177\uff0c\u53ea\u80fd\u8bf4\u8fd8\u7b97\u80fd\u770b\u5427)\n\n![](https://img.hzao.top/data/\u56fe1(a).png)\n\n![](https://img.hzao.top/data/\u56fe1(b).png)\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u628a\u9009\u62e9\u7684\u6240\u6709\u8282\u70b9\u8fde\u63a5\u8d77\u6765\u7684\u6700\u77ed\u8def\u5f84\uff0c\u7136\u540e\u8f93\u51fa\u5b83\u7684\u4e8c\u500d\u3002\n\n\u4e8e\u662f\u9898\u76ee\u5c31\u53d8\u6210\u4e86\uff0c\u52a8\u6001\u7ef4\u62a4\u4f7f\u6811\u4e0a\u67d0\u4e9b\u8282\u70b9\u8fde\u901a\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u5b8c\u6210\u540e\u8f93\u51fa\u8fd9\u4e2a\u957f\u5ea6\u7684\u4e8c\u500d\u3002\n\n### \u89e3\u51b3\u65b9\u6848\n\n\u9898\u76ee\u4e2d\u6709\u4e24\u79cd\u64cd\u4f5c\uff0c\u589e\u52a0\u9009\u62e9\u7684\u8282\u70b9\u548c\u5220\u9664\u9009\u62e9\u7684\u8282\u70b9\u3002\n\n\u5047\u8bbe\u8981\u5904\u7406\u7684\u8282\u70b9\u4e3a$u$\uff0c\u6211\u4eec\u5148\u8003\u8651\u5c06\u5411$S$\u4e2d\u589e\u52a0$u$\u7684\u60c5\u51b5\u3002\u5220\u9664$u$\u7684\u60c5\u51b5\u662f\u53ef\u4ee5\u5efa\u7acb\u5728\u589e\u52a0$u$\u7684\u60c5\u51b5\u4e4b\u4e0a\u7684\uff1a\u4ee4$S'=S-\\{u\\}$,\u5728$S$\u4e2d\u5220\u9664$u$\u7684\u82b1\u8d39\u5c31\u662f\u5728$S'$\u4e2d\u589e\u52a0$u$\u7684\u82b1\u8d39\u2014\u2014\u4ed6\u4eec\u662f\u524d\u540e\u4e24\u79cd\u8def\u5f84\u957f\u5ea6\u7684\u5dee\u3002\n\n\u73b0\u5728\u8003\u8651\u589e\u52a0$u$\u65f6\u7684\u60c5\u51b5\u3002\n\n\u60c5\u51b51.$|S|=0$\uff0c\u5373$S$\u4e2d\u8fd8\u6ca1\u6709\u4efb\u4f55\u8282\u70b9\u3002\u5411\u5176\u4e2d\u52a0\u5165$u$\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u957f\u5ea6\u3002\u56e0\u6b64\u53ef\u4ee5\u4e0d\u4fee\u6539\u7b54\u6848\u3002\n\n\u60c5\u51b52.\u5728\u539f\u56fe\u4e2d\uff0c$u$\u81f3\u5c11\u6709\u4e24\u4e2a\u5b50\u8282\u70b9(\u8bbe\u5176\u4e2d\u4e00\u4e2a\u4e3a$v$) \uff0c\u6ee1\u8db3\u4ee5$v$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6709\u8282\u70b9\u5c5e\u4e8e$S$\u3002\n\n\u4e8e\u662f$u$\u662f\u5c5e\u4e8e$S$\u76842\u4e2a\uff08\u6216\u66f4\u591a\uff09\u70b9\u7684$LCA$\uff0c\u4f7f\u4ed6\u4eec\u8fde\u901a\u5219\u5fc5\u987b\u7ecf\u8fc7$u$\u3002\u90a3\u4e48\uff0c\u5728\u52a0\u5165$u$\u4e4b\u524d\uff0c\u4f7f\u8282\u70b9\u8fde\u901a\u7684\u8def\u5f84\u5c31\u5df2\u7ecf\u7ecf\u8fc7\u4e86$u$\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e0d\u4fee\u6539\u7b54\u6848\u3002\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff0c$4$\u7684\u4e24\u4e2a\u5b50\u8282\u70b9$5,8$\u7684\u5b50\u6811\u4e2d\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u5728$S$\u4e2d\uff0c\u5728\u52a0\u5165$4$\u4e4b\u524d\uff0c\u8fde\u901a$S$\u4e2d\u8282\u70b9\u7684\u8def\u5f84\u5c31\u5df2\u7ecf\u7ecf\u8fc7\u4e86$4$\u3002\u5373\u52a0\u5165$4$\u4e5f\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\u3002\n\n![](https://img.hzao.top/data/\u56fe2_a.png)\n\n\u60c5\u51b53.\u5728\u539f\u56fe\u4e2d\uff0c\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u8282\u70b9\u5c5e\u4e8e$S$\uff0c\u5e76\u4e14\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u5916\u4e5f\u6709\u8282\u70b9\u5c5e\u4e8e$S$\u3002\n\n\u90a3\u4e48\u540c\u4e0a\uff0c\u5728\u52a0\u5165$u$\u4e4b\u524d\uff0c\u4f7f\u8282\u70b9\u8fde\u901a\u7684\u8def\u5f84\u5df2\u7ecf\u7ecf\u8fc7\u4e86$u$\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c$u$\u7684\u52a0\u5165\u4e0d\u4f1a\u5bf9\u8def\u5f84\u957f\u5ea6\u9020\u6210\u5f71\u54cd\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4fee\u6539\u7b54\u6848\u3002\n\n\u5982\u56fe\u6240\u793a\uff0c\u5047\u5982\u8981\u52a0\u5165$5$\uff0c\u5728\u52a0\u5165$5$\u4e4b\u524d\u5df2\u6709$4,7 \\in S$\uff0c\u8fde\u63a5$4,7$\u7684\u8def\u5df2\u7ecf\u8986\u76d6\u4e86$5$\uff0c\u56e0\u6b64\u52a0\u5165$5$\u4e0d\u4f1a\u4f7f\u7b54\u6848\u6539\u53d8\u3002\n\n![](https://img.hzao.top/data/\u56fe2_b.png)\n\n\u60c5\u51b54.\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u4e09\u79cd\u60c5\u51b5\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5728\u539f\u8def\u5f84\u4e0a\u7684\u70b9$v$,\u6ee1\u8db3$dist(u,v)$\u6700\u5c0f\u3002\u5e76\u4e14\u4f7f\u7b54\u6848\u52a0\u4e0a$dist(u,v)$\u3002\n\n\u5bfb\u627e$v$\u7684\u65b9\u6cd5\u662f\uff0c\u4ece$u$\u5f00\u59cb\u5411\u4e0a\u500d\u589e\uff0c\u627e\u5230\u79bb$u$\u6700\u8fd1\u7684\uff0c\u4e14\u5b50\u6811\u4e2d\u6709\u8282\u70b9\u5c5e\u4e8e$S$\u7684\u70b9\u3002\u8bbe\u8fd9\u4e2a\u70b9\u4e3a$y$\u3002\n\n\u90a3\u4e48\uff1a\n\n$a.$\u5047\u5982$y$\u5728\u539f\u6709\u8def\u5f84\u4e0a\uff0c\u5373\u52a0\u5165$u$\u4e4b\u524d\uff0c$y$\u5c31\u88ab\u4f7f\u8282\u70b9\u8fde\u901a\u7684\u8def\u5f84\u8986\u76d6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c$y$\u6ee1\u8db3\u60c5\u51b52\u6216\u60c5\u51b53\u3002\n\n\u6b64\u65f6$v=y$\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u8ba9\u7b54\u6848\u52a0\u4e0a$dist(u,y).$\n\n\u5373\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n$u=9,S=\\{3,4,7\\}$\uff0c$4$\u662f$u$ \u80fd\u5230\u8fbe\u7684 \u6700\u8fd1\u7684 \u5b50\u6811\u4e2d\u6709\u8282\u70b9\u5728$S$\u4e2d\u7684 \u70b9\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u5c06$9$\u4e0e$4$\u8fde\u63a5\u8d77\u6765\u5373\u53ef\u3002\n\n![](https://img.hzao.top/data/\u56fe2_c.png)\n\n$b.$\u5047\u5982$y$\u4e0d\u5728\u539f\u6709\u8def\u5f84\u4e0a\uff0c\u90a3\u4e48\u4ee5$y$\u7684\u5b50\u6811\u5916\u4e00\u5b9a\u6ca1\u6709\u8282\u70b9\u5728$S$\u4e2d\u3002\uff08\u5426\u5219\u6ee1\u8db3\u60c5\u51b53\uff0c\u539f\u6709\u8def\u5f84\u4e00\u5b9a\u7ecf\u8fc7$y$\uff09\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c$S$\u4e2d\u7684\u70b9\u5168\u90e8\u90fd\u5728\u4ee5$y$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u5f53\u4e2d\u9009\u62e9\u4e00\u4e2a\u79bb$u$\u6700\u8fd1\u7684\u70b9\uff0c\u5c06\u5b83\u4e0e$u$\u8fde\u8d77\u6765\u5373\u53ef\u3002\n\n\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![](https://img.hzao.top/data/\u56fe2_d.png)\n\n\n\n\n\n\u90a3\u5982\u4f55\u5bfb\u627e\u79bb$u$\u6700\u8fd1\u7684$v$\u5462\uff1f\uff08\u8bf7\u5148\u5f80\u4e0a\u7ffb\uff0c\u786e\u8ba4\u81ea\u5df1\u5df2\u77e5\u6089$u,y,v$\u7684\u542b\u4e49\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\uff09\n\n\u7531$dist(v,u)=dist(v,y)+dist(y,u)$\u53ef\u77e5\uff0c\u65e0\u8bba\u9009\u62e9\u54ea\u4e2a\u70b9\uff0c\u90fd\u6709\u4e00\u6bb5$dist(y,u)$\uff0c\u800c\u8fd9\u6bb5\u8ddd\u79bb\u662f\u5df2\u56fa\u5b9a\u7684\u3002\uff08\u5f53\u524d\u53ea\u6709$v$\u4e0d\u786e\u5b9a\uff09\n\n\u6240\u4ee5\u6211\u4eec\u8981\u627e\u7684\u5176\u5b9e\u662f$dist(v,y)$\u6700\u5c0f\u7684\u70b9\u3002\n\n\u7531\u4e8e$y$\u662f$v$\u7684\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u6709\uff1a\n\n$dist(root,v)=dist(root,y)+dist(v,y)$\n\n\u800c$dist(root,y)$\u662f\u6052\u5b9a\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u627e\u7684\u5c31\u662f$dist(root,v)$\u6700\u5c0f\u7684\u70b9\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u5148\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9(\u4efb\u9009\u4e00\u4e2a\u5373\u53ef)\u7684\u8ddd\u79bb\u3002\n\n\n\n\n\n\u4ee5\u4e0a\u7684\u8ba8\u8bba\u5c31\u5305\u542b\u6240\u6709\u7684\u60c5\u51b5\u4e86\u3002\n\n\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u4e0a\u8ff0\u6d41\u7a0b\u6709\u51e0\u4e2a\u9700\u8981\u9ad8\u6548\u7b97\u6cd5\u7ef4\u62a4\u7684\u5185\u5bb9\uff1a\n\n1.\u8282\u70b9$x$\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u8282\u70b9\u5c5e\u4e8e$S$\uff1b\n\n2.\u79bb\u8282\u70b9$x$\u6700\u8fd1\u7684 \u5b50\u6811\u4e2d\u6709\u8282\u70b9\u5c5e\u4e8e$S$\u7684 \u70b9\uff1b\n\n3.\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff1b\n\n4.\u5df2\u7ecf\u88ab\u8def\u5f84\u8986\u76d6\u7684\u70b9\u4e2d\uff0c\u8ddd\u79bb\u6839\u6700\u8fd1\u7684\u70b9\u3002\n\n\n\n\u7531\u4e8e\u8981\u7ef4\u62a4\u5b50\u6811\u4e2d\u7684\u4fe1\u606f\uff0c\u5f88\u81ea\u7136\u5730\u60f3\u5230\u7528$DFS$\u5e8f\u3002\u8bbe$In(x)$\u8868\u793a\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u65f6\uff0c$x$\u662f\u7b2c\u51e0\u4e2a\u88ab\u904d\u5386\u5230\u7684\u3002$Out(x)$\u8868\u793a\u4ece$x$\u5f80\u4e0a\u56de\u6eaf\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e86\u591a\u5c11\u7684\u70b9\u3002\n\n\u5219$x$\u7684\u5b50\u6811\u4e2d\u7684\u70b9\u5c31\u662f$DFS$\u5e8f\u5728$[In(x),Out(x)]$\u4e2d\u95f4\u7684\u70b9\u3002\n\n\u5f53\u6211\u4eec\u8981\u5c06$y$\u52a0\u5165\u5230$s$\u4e2d\u65f6\uff0c\u4ee4$FT[In(y)]=1$\u3002\u90a3\u4e48$\\sum_{i=In(x)}^{Out(x)}FT[i]$\u5c31\u662f\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5728$S$\u4e2d\u7684\u4e2a\u6570\u3002\n\n\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\n\n**\u4e8e\u662f1\u5c31\u89e3\u51b3\u4e86\u3002\u5355\u6b21\u64cd\u4f5c$O(log\\,n)$\u3002**\n\n\n\n\u6811\u4e0a$x,y$\u4e4b\u95f4\u7684\u8ddd\u79bb\u7b49\u4e8e$dist(root,x)+dist(root,y)-2*dist(root,LCA(x,y))$,\u4e8e\u662f\u7528$LCA$\u7ef4\u62a4\u5373\u53ef\u3002\u5de7\u4e86\uff0c\u6211\u4eec\u672c\u6765\u5c31\u8981\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684$dist(root,x)$\u554a\uff0c\u4e00\u4e3e\u4e24\u5f97\u3002\n\n**\u4e8e\u662f\u95ee\u98983\u89e3\u51b3\u3002\u5355\u6b21\u64cd\u4f5c$O(log\\, n) $\u3002**\n\n\n\n\u7531\u4e8e\u53ea\u8981$x$\u7684\u5b50\u6811\u4e2d\u6709\u8282\u70b9\u5c5e\u4e8e$S$\uff0c\u90a3\u4e48$x$\u7684\u7236\u8282\u70b9\uff08\u6216\u8005\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u7b49\u7b49\uff09\u4e2d\u4e5f\u4e00\u5b9a\u6709\u8282\u70b9\u5c5e\u4e8e$S$\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u201d\u5b50\u6811\u4e2d\u662f\u5426\u6709\u8282\u70b9\u5c5e\u4e8e$S$\u201c \u8fd9\u4e00\u5c5e\u6027\u5177\u6709\u5355\u8c03\u6027\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u7528\u500d\u589e\u7684\u65b9\u6cd5\u3002\u6bcf\u6b21\u5411\u4e0a\u500d\u589e\u67d0\u4e2a\u8282\u70b9\u7684$2^k$\u4e2a\u7956\u5148\uff0c\u627e\u5230\u6700\u8fd1\u7684\u5373\u53ef\u3002\n\n\uff08\u53c8\u5de7\u4e86\uff0c\u500d\u589e$LCA$\u4e0d\u6b63\u597d\u7ef4\u62a4\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684$2^k$\u500d\u7956\u5148\u4e48\uff1f\uff09\n\n**\u4e8e\u662f\u95ee\u98982\u53ef\u5728$log^2n$\u5185\u89e3\u51b3\u3002**\n\n\n\n**\u6700\u5de7\u7684\u662f\u95ee\u98984\u3002** \u7531\u4e8e\u6811\u7684\u5f62\u6001\u786e\u5b9a\u540e\uff0c\u6bcf\u4e2a\u70b9$x$\u7684$dist(root,x)$\u90fd\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5c0f\u6839\u5806\u7ef4\u62a4\u3002\n\n\u4f46\u662f\uff0c\u662f\u4e0d\u662f\u6211\u4eec\u8981\u628a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\uff08\u5305\u62ec\u6ca1\u5728$S$\u4e2d\u7684\u70b9\uff09\u90fd\u52a0\u5165\u5c0f\u6839\u5806\uff1f\u5982\u679c\u662f\uff0c\u90a3\u4e48\u6bcf\u6b21\u9700\u8981$O(n\\,logn)$\u7684\u65f6\u95f4\u6765\u627e\u51fa\u8def\u5f84\u4e0a\u7684\u70b9\u5e76\u5c06\u5176\u52a0\u5165\u5c0f\u6839\u5806\u4e2d\u3002\u8fd9\u663e\u7136\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\n\n\u91cd\u65b0\u8003\u8651\u4e4b\u524d\u8ba8\u8bba\u76844\u79cd\u52a0\u5165\u70b9\u7684\u60c5\u51b5\u3002\u9664\u4e86\u5728$S$\u4e2d\u7684\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8ddd\u79bb\u6839\u6700\u8fd1\u7684\u70b9\u52a0\u5165\u5c0f\u6839\u5806\u5373\u53ef\u3002\n\n\u4f8b\u5982\uff0c\u5728\u60c5\u51b51\uff08$|S|=0$ )\u4e2d\uff0c\u6211\u4eec\u5c06\u8fd9\u552f\u4e00\u6dfb\u52a0\u8fdb\u53bb\u7684\u70b9\u52a0\u5165\u5c0f\u6839\u5806\u5373\u53ef\u3002\n\n\n\n\u5728\u60c5\u51b52\uff08\u6709\u81f3\u5c11\u4e24\u4e2a\u5b50\u6811\u4e2d\u6709\u70b9\u5c5e\u4e8e$S$\uff09\u4e2d\uff0c\u6211\u4eec\u5c06\u6b63\u5728\u5904\u7406\u7684$u$(\u5373\u56fe\u4e2d\u7684$4$)\u52a0\u5165\u5c0f\u6839\u5806\u5373\u53ef\u3002\u5b83\u5c31\u662f\u6700\u8fd1\u7684\uff0c\u6700\u6709\u53ef\u80fd\u88ab\u9009\u4e2d\u7684\u70b9\u3002\n\n![](https://img.hzao.top/data/\u56fe2_a.png)\n\n\u5047\u5982$4$\u5728\u540e\u9762\u88ab\u5220\u6389\u4e86\u600e\u4e48\u529e\uff1f\u4f1a\u4e0d\u4f1a\u9057\u6f0f$5,8$\u8fd9\u79cd\u5019\u9009\u9879\uff1f\n\n\u4e0d\u4f1a\u3002\n\n\u5047\u5982$4$\u88ab\u5220\u6389\uff0c\u6211\u4eec\u5148\u4e0d\u5728\u5c0f\u6839\u5806\u4e2d\u5220\u9664$4$\uff0c\u800c\u662f\u5728\u53d6\u7528\u5b83\u7684\u65f6\u5019\u5224\u65ad\u5b83\u662f\u5426\u5728\u8def\u5f84\u4e0a\u3002\u53ea\u8981\u5b83\u5728\u8def\u5f84\u4e0a\uff08\u6ee1\u8db3\u60c5\u51b52\u62163\u6216\u8005\u672c\u8eab\u5c31\u662f$S$\u4e2d\u7684\u70b9\uff09\uff0c\u5c31\u76f4\u63a5\u53d6\u7528\uff0c\u5426\u5219\u5c06\u5b83\u5f39\u51fa\uff0c\u8003\u8651\u4e0b\u4e00\u4e2a\u5019\u9009\u9879\u3002\n\n\u5982\u679c$4$\u88ab\u5f39\u51fa\uff0c\u90a3\u4e48\u9664\u975e\u6709\u5176\u5b83\u64cd\u4f5c\u4f7f\u5f97$5$\u6216$8$\u5728\u8def\u5f84\u4e0a\uff0c\u5426\u5219\u5019\u9009\u9879\u80af\u5b9a\u4e0d\u53ef\u80fd\u662f$5$\u6216$8$\u3002\n\n\u800c\u5f53\u5176\u5b83\u64cd\u4f5c\u4f7f\u5f97$5$\u6216$8$\u5728\u8def\u5f84\u4e0a\u5e76\u4e14\u53ef\u80fd\u6210\u4e3a\u5907\u9009\u70b9\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06$5$\u6216$8$\u52a0\u5165\u5c0f\u6839\u5806\uff0c\u6240\u4ee5\u4e0d\u4f1a\u9057\u6f0f\u3002\n\n\n\n\u7c7b\u4f3c\u5730\uff0c\u5728\u60c5\u51b53\u4e0b\uff0c\u5c06\u8981\u5904\u7406\u7684\u70b9\uff08\u56fe\u4e2d\u76849\uff09\u52a0\u5165\u5c0f\u6839\u5806\u5373\u53ef\u3002\n\n![](https://img.hzao.top/data/\u56fe2_c.png)\n\n\n\n\u5728\u60c5\u51b54\u4e0b\uff0c\u5c06\u500d\u589e\u627e\u5230\u7684\u70b9\u548c\u6b63\u5904\u7406\u7684\u70b9\u52a0\u5165\u5c0f\u6839\u5806\u5373\u53ef\u3002\n\n\n\n\u5176\u5b9e\u6211\u4eec\u53d1\u73b0\uff0c\u9664\u4e86\u8981\u5411\u4e0a\u500d\u589e\u7684\u60c5\u51b5\uff0c\u6240\u6709\u60c5\u51b5\u90fd\u8981\u5c06\u8981\u5904\u7406\u7684\u70b9\u52a0\u5165\u5c0f\u6839\u5806\u4e2d\u3002\n\n\n```cpp\n#include<cmath>\n#include<queue>\n#include<cstdio>\n#include<cstring>\n\n//#define LOC\n#define nowy (L[i].to)\nusing std::queue;\nusing std::priority_queue;\ntemplate <typename T>\ninline void read(T &x){\n\tx=0;char c; T f=1;\n\tdo{c=getchar();if(c=='-')f=-1;}while(c>'9'||c<'0');\n\tdo{x=x*10+c-'0';c=getchar();}while(c>='0'&&c<='9');x*=f;\n}\n\nconst int N=1e5 + 10;\n\nint n,m,t;\nint h[N],tot=1;\nint f[N][18];\nint d[N];\nlong long len[N];\nint bg[N],ed[N];\nint Inq[N];\nint DFN;\nint TotIn;\nint Diff[N];//Diff\u662fFT\u7684\u4e00\u4e2a\u62f7\u8d1d \u4fbf\u4e8e\u76f4\u63a5\u786e\u8ba4\u4e00\u4e2a\u70b9\u662f\u5426\u5728S\u4e2d\nint x,y,z;\nint Num_SonIn,Cls_F;\nlong long ans=0;\n\nstruct line{\n\tint to,nxt,w;\n}L[2*N];\n\nstruct OneNode{\n\tint num;\n\tbool operator <(const OneNode b)const {\n\t\tif(len[num]==len[b.num])return d[num]>d[b.num];\n\t\treturn len[num]>len[b.num];\n\t}\n\tOneNode(int x):num(x){}\n};//\u901a\u8fc7\u4fbf\u4e8e\u7ef4\u62a4\u5c0f\u6839\u5806\nstruct FenwickTree{\n\tint v[N];\n\tinline void clear(){\n\t\tmemset(v,0,sizeof(v));\n\t}\n\tinline void add(int x,int y){\n\t\tfor(;x<=n;x+=x&-x){\n\t\t\tv[x]+=y;\n\t\t}\n\t}\n\tinline int ask(int x){\n\t\tint res=0;\n\t\twhile(x>0){\n\t\t\tres+=v[x];\n\t\t\tx-=x&-x;\n\t\t}\n\t\treturn res;\n\t}\n\tFenwickTree(){clear();}\n}FT;\npriority_queue<OneNode> OQ;\n\ninline void add(int x,int y,int z){\n\tL[++tot].to=y;L[tot].nxt=h[x];h[x]=tot;L[tot].w=z;\n\tL[++tot].to=x;L[tot].nxt=h[y];h[y]=tot;L[tot].w=z;\n}\n\nvoid GetLCA_DFS(int x){\n//DFS \u540c\u65f6\u6c42\u51fa\u7956\u5148\u6570\u7ec4\u3001\u8ddd\u79bb\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u3001DFS\u5e8f\n\tbg[x]=++DFN;\n\tfor(int i=h[x];i;i=L[i].nxt){\n\t\tif(d[nowy])continue;\n\t\td[nowy]=d[x]+1;\n\t\tf[nowy][0]=x;\n\t\tlen[nowy]=len[x]+L[i].w;\n\t\tfor(int j=1;j<=t;++j){\n\t\t\tf[nowy][j]=f[f[nowy][j-1]][j-1];\n\t\t}\n\t\tGetLCA_DFS(nowy);\n\t}\n\ted[x]=DFN;\n}\ninline int LCA(int x,int y){\n\tif(d[x]>d[y]){\n\t\tx^=y;y^=x;x^=y;\n\t}\n\t//d[x]<=d[y]\n\tfor(register int i=t;i>=0;--i){\n\t\tif(d[f[y][i]]>=d[x]){\n\t\t\ty=f[y][i];\n\t\t}\n\t}\n\tif(x==y)return x;\n\tfor(register int i=t;i>=0;--i){\n\t\tif(f[y][i]!=f[x][i]){\n\t\t\ty=f[y][i];\n\t\t\tx=f[x][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\ninline long long LEN(int x,int y){\n\treturn 1ll*len[x]+len[y]-2*len[LCA(x,y)];\n}\ninline int GetSonIn(int x){//including x\n//\u5224\u65adx\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u8282\u70b9\u5c5e\u4e8eS\n\tif(!x)return TotIn;\n\tint Num=FT.ask(ed[x])-FT.ask(bg[x]-1);\n\treturn Num;\n}\ninline bool TwoSon(int x,int v){\n//\u662f\u5426\u6ee1\u8db3\u60c5\u51b52\n\tint SonV;\n\tfor(register int i=h[x];i;i=L[i].nxt){\n\t\tif(d[nowy]<=d[x])continue;\n\t\tSonV=GetSonIn(nowy);\n\n\t\tif(SonV){\n\t\t\tif(SonV==v)return false;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\ninline bool check(int x){\n//\u662f\u5426\u6ee1\u8db3\u60c5\u51b52\u62163 \u8fd9\u4e24\u79cd\u60c5\u51b5\u53ef\u4ee5\u4e00\u540c\u5904\u7406\n\tif(!x)return true;\n\tint Num_SonIn;\n\treturn (Num_SonIn=GetSonIn(x))&&(Num_SonIn<TotIn||TwoSon(x,Num_SonIn));\n}\ninline int GetCls_F(int x){\n//\u500d\u589e\u6c42\u79bb\u81ea\u5df1\u6700\u8fd1\u7684 \u5b50\u6811\u91cc\u6709\u8282\u70b9\u5c5e\u4e8eS \u7684\u8282\u70b9\n\tif(GetSonIn(x))return x;\n\tint Num;\n\tfor(register int i=t;i>=0;--i){\n\t\tif(!(Num=GetSonIn(f[x][i]))){\n\t\t\tx=f[x][i];\n\t\t}\n\t}\n\treturn f[x][0];\n}\ninline void Change(long long t){\n//\u901a\u8fc7t\u53d8\u91cf\u5b9e\u73b0\u589e\u52a0\u5220\u9664\u5728\u540c\u4e00\u4e2a\u51fd\u6570\u5904\u7406 \u51cf\u5c11\u7801\u91cf\n\tif(TotIn!=0){\n\t\tif(!check(x)){\n\t\t\tCls_F=GetCls_F(x);\n\t\t\tif(check(Cls_F)){\n\t\t\t\tif(t&&!Inq[Cls_F]){OQ.push(OneNode(Cls_F));Inq[Cls_F]=1;}\n\t\t\t\t\tans+=LEN(x,Cls_F)*(-1+2*t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile(!OQ.empty()){\n\t\t\t\t\tz=OQ.top().num;\n\t\t\t\t\tif(check(z)||Diff[z])break;\n\t\t\t\t\tOQ.pop();\n\t\t\t\t\tInq[z]=0;\n\t\t\t\t}\n\t\t\t\tif(t&&!Inq[Cls_F]){OQ.push(OneNode(Cls_F));Inq[Cls_F]=1;}\n\t\t\t\tans+=LEN(x,z)*(-1+2*t);\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tread(n);read(m);\n\tt=log(n)/log(2)+1;\n\tfor(register int i=1;i<n;++i){\n\t\tread(x);\n\t\tread(y);\n\t\tread(z);\n\t\tadd(x,y,z);\n\t}\n\td[1]=1;\n\tGetLCA_DFS(1);\n\tfor(register int i=1;i<=m;++i){\n\t\tread(x);\n\t\tif(!Diff[x]){\n\t\t\tChange(1);\n\t\t\tFT.add(bg[x],1);\n\t\t\tDiff[x]+=1;\n\t\t\tif(!Inq[x]){Inq[x]=1;OQ.push(OneNode(x));}\n\t\t\t++TotIn;\n\t\t}\n\t\telse{\n\t\t\t--TotIn;\n\t\t\tFT.add(bg[x],-1);\n\t\t\tDiff[x]-=1;\n\n\t\t\tChange(0);\n\t\t}\n\t\tprintf(\"%lld\\n\",ans*2);\n\t}\n\treturn 0;\n}\n```\n\n\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730AC\u4e86\u3002\n\n[](https://blog.hzao.top/2019/09/04/sdoi2015\u5bfb\u5b9d\u6e38\u620f-\u9898\u89e3/)Uae\u725b\u903c\uff01\n\n\n\n",
        "postTime": 1567609635,
        "uid": 123147,
        "name": "Hzao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u8981\u8bb2\u7684\u662f\u4e00\u4e2a\u4e24\u53ea $\\log_2$ \u7684~~\u4f4e\u52a3~~\u505a\u6cd5\uff0c\u4ec5\u4f9b\u5404\u4f4d\u53c2\u8003\uff0c\u5e0c\u671b\u80fd\u7ed9\u60a8\u5e26\u6765\u542f\u53d1\u3002\n\n---\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u52a8\u6001\u6c42\u4e00\u4e2a\u70b9\u96c6\u7684**\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c**\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u592a\u597d\u5f04\u3002\n\n\u6211\u4eec\u8003\u8651\u5230\u8fb9\u6743\u4e0d\u662f\u5f88\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u5c31\u5c06\u8fb9\u6743\u4e0b\u653e\u70b9\u6743\uff0c\u90a3\u4e48\u6700\u7ec8\u6c42\u7b54\u6848\u7684\u65f6\u5019\u5c31\u9700\u8981\u4e24\u4e2a\u4e1c\u897f\uff1a**\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\u6743\u548c** \u548c **\u751f\u6210\u6811\u6700\u4e0a\u65b9\u7684\u70b9\u7684\u70b9\u6743**\uff08\u56e0\u4e3a\u6700\u4e0a\u9762\u7684\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u5728\u7b54\u6848\u8303\u56f4\u4e2d\uff09\u3002\n\n\u6211\u4eec\u5148\u6765\u8003\u8651\u540e\u8005\uff0c\u53d1\u73b0\u6700\u4e0a\u65b9\u7684\u70b9\u5b9e\u9645\u4e0a\u5c31\u662f**\u6240\u6709\u8282\u70b9\u7684 $lca$** \uff08\u6ce8\uff1a\u6b64\u5904\u662f\u6307\u6240\u6709\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\uff0c\u4e5f\u5c31\u662f\u8981\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u70b9\u96c6\u7684 $lca$ \u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u5c06 $lca(u,v)$ \u770b\u6210\u4e00\u79cd\u8fd0\u7b97\uff0c\u53d1\u73b0\u4ed6\u662f\u5b8c\u7f8e\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\uff0c\u8fd9\u91cc\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002\n\n\u7136\u540e\u8003\u8651\u524d\u8005\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u9664\u975e\u7528\u4e00\u4e9b\u52a8\u6001\u7684\u9ad8\u5999\u6570\u636e\u7ed3\u6784\u597d\u50cf\u6839\u672c\u4e0d\u80fd\u7ef4\u62a4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u7528\u7c7b\u4f3c\u4e8e\u626b\u63cf\u7ebf\u7684\u505a\u6cd5\uff0c\u6bcf\u4e00\u6b21\u52a0\u5165\u6216\u5220\u9664\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u5c06\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u7684 $tag$ \u5168\u90e8 $+1$ \uff0c\u90a3\u4e48\u6700\u540e\u67e5\u8be2\u7684**\u6574\u68f5\u6811\u4e2d $tag$ \u5927\u4e8e $0$ \u7684\u8282\u70b9\u7684\u6743\u503c\u548c**\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6211\u4eec\u6700\u540e\u9700\u8981\u7684**\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\u6743\u548c**\u52a0\u4e0a**\u6240\u6709\u70b9\u7684 $lca$ \u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684\u6743\u503c\u548c**\uff0c\u7531\u4e8e\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u53ef\u4ee5\u7ef4\u62a4\u6240\u6709\u70b9\u7684 $lca$ \u4e86\uff0c\u6240\u6709\u6700\u540e\u53ea\u9700\u8981\u51cf\u53bb\u540e\u8005\uff08**\u6240\u6709\u70b9\u7684 $lca$ \u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684\u6743\u503c\u548c**\uff09\u5373\u53ef\u3002\n\n\u6709\u4ec0\u4e48\u4e0d\u660e\u767d\u7684\u53ef\u4ee5\u79c1\u4fe1\u6216\u8005\u7559\u8a00\uff0c\u6211\u5c3d\u91cf\u5c3d\u5feb\u56de\u590d\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define Lint long long\nconst int N=1e5+5;\nint n,m;\nstruct Node{int dep,fa,top,son,size;Lint data,dis;}tr[N];\nstruct Edge{int nxt,to;Lint val;}e[N<<1];int fir[N];\nvoid add(int u,int v,Lint w,int i){e[i]=(Edge){fir[u],v,w},fir[u]=i;}\nvoid dfs1(int u)\n{\n\ttr[u].size=1,tr[u].top=u;\n\ttr[u].dep=tr[tr[u].fa].dep+1;\n\ttr[u].dis=tr[tr[u].fa].dis+tr[u].data;\n\tfor(int i=fir[u];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to==tr[u].fa) continue;\n\t\ttr[e[i].to].fa=u;\n\t\ttr[e[i].to].data=e[i].val;\n\t\tdfs1(e[i].to);\n\t\ttr[u].size+=tr[e[i].to].size;\n\t\tif(tr[e[i].to].size>tr[tr[u].son].size)\n\t\ttr[u].son=e[i].to;\n\t}\n}\nint dfn[N],mp[N],cnt=0;\nvoid dfs2(int u)\n{\n\tdfn[++cnt]=u,mp[u]=cnt;\n\tif(tr[u].son)\n\t{\n\t\ttr[tr[u].son].top=tr[u].top;\n\t\tdfs2(tr[u].son);\n\t}\n\tfor(int i=fir[u];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to==tr[u].fa||e[i].to==tr[u].son) continue;\n\t\tdfs2(e[i].to);\n\t}\n}\nint lca(int u,int v)\n{\n\twhile(tr[u].top!=tr[v].top)\n\t{\n\t\tif(tr[tr[u].top].dep<tr[tr[v].top].dep) swap(u,v);\n\t\tu=tr[tr[u].top].fa;\n\t}\n\tif(tr[u].dep>tr[v].dep) swap(u,v);\n\treturn u;\n}\nbool alive[N];\nLint val[N];\nstruct Seg_Tree_data\n{\n\tstruct Node{Lint data,sum;int tag;}tr[N<<3];\n\tvoid up(int u)\n\t{\n\t\tif(tr[u].tag) tr[u].data=tr[u].sum;\n\t\telse tr[u].data=tr[u<<1].data+tr[u<<1|1].data;\n\t}\n\tvoid build(int u,int l,int r,Lint a[])\n\t{\n\t\ttr[u].tag=tr[u].data=0;\n\t\tif(l==r){tr[u].sum=a[l];return ;}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(u<<1,l,mid,a);\n\t\tbuild(u<<1|1,mid+1,r,a);\n\t\ttr[u].sum=tr[u<<1].sum+tr[u<<1|1].sum;\n\t}\n\tvoid add(int u,int l,int r,int x,int y,int z)\n\t{\n\t\tif(x<=l&&r<=y){tr[u].tag+=z,up(u);return ;}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) add(u<<1,l,mid,x,y,z);\n\t\tif(y>mid) add(u<<1|1,mid+1,r,x,y,z);\n\t\tup(u);\n\t}\n}t1;\nstruct Seg_Tree_lca\n{\n\tstruct Node{int data;}tr[N<<2];\n\tvoid up(int u)\n\t{\n\t\tif(!tr[u<<1].data){tr[u].data=tr[u<<1|1].data;return ;}\n\t\tif(!tr[u<<1|1].data){tr[u].data=tr[u<<1].data;return ;}\n\t\ttr[u].data=lca(tr[u<<1].data,tr[u<<1|1].data);\n\t}\n\tvoid chg(int u,int l,int r,int x)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tif(tr[u].data) tr[u].data=0;\n\t\t\telse tr[u].data=l;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) chg(u<<1,l,mid,x);\n\t\telse chg(u<<1|1,mid+1,r,x);\n\t\tup(u);\n\t}\n}t2;\nvoid work(int u,int v,int w)\n{\n\twhile(tr[u].top!=tr[v].top)\n\t{\n\t\tif(tr[tr[u].top].dep<tr[tr[v].top].dep) swap(u,v);\n\t\tt1.add(1,1,n,mp[tr[u].top],mp[u],w);\n\t\tu=tr[tr[u].top].fa;\n\t}\n\tif(tr[u].dep>tr[v].dep) swap(u,v);\n\tt1.add(1,1,n,mp[u],mp[v],w);\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1,u,v,w;i<n;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w,i<<1),add(v,u,w,i<<1|1);\n\t}\n\tdfs1(1),dfs2(1);\n\tfor(int i=1;i<=n;++i) val[i]=tr[dfn[i]].data;\n\tt1.build(1,1,n,val);\n\twhile(m--)\n\t{\n\t\tint u;cin>>u;\n\t\tif(!alive[u])\n\t\t{\n\t\t\talive[u]=true;\n\t\t\twork(1,u,1);\n\t\t\tt2.chg(1,1,n,u);\n\t\t}\n\t\telse\n\t\t{\n\t\t\talive[u]=false;\n\t\t\twork(1,u,-1);\n\t\t\tt2.chg(1,1,n,u);\n\t\t}\n//\t\tprintf(\"%lld %d\\n\",t1.tr[1].data,t2.tr[1].data);\n\t\tprintf(\"%lld\\n\",2*(t1.tr[1].data-tr[t2.tr[1].data].dis));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1605791661,
        "uid": 72468,
        "name": "\u300c\u3000\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u7684\u7684\u6807\u7b7e\u6709\u201c\u865a\u6811\u201d\uff0c\u4f46\u662f\u865a\u6811\uff1f\u96be\u9053\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fdO\uff08n\uff09\u7684\u6811\u5f62dp\u5417\uff0c\u90a3\u590d\u6742\u5ea6\u5c31\u662fO\uff08nm\uff09\u7684\u4e86\uff0c\u663e\u7136\u4f1aTLE\u3002\n\n\u4e0d\u96be\u8bc1\u660e\uff0c\u8fd9\u4e00\u9898\u4ece\u4efb\u610f\u4e00\u4e2a\u6709\u5b9d\u85cf\u7684\u8d77\u70b9\u51fa\u53d1\u7684\u7b54\u6848\u90fd\u662f\u7b49\u4ef7\u7684\uff08\u56e0\u4e3a\u8981\u56de\u5230\u8d77\u70b9\uff0c\u6240\u4ee5\u8def\u5f84\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u73af\uff09\uff0c\u90a3\u4e48\u7b54\u6848\u662f\u4ec0\u4e48\u5462\uff0c\u5176\u5b9e\u5c31\u662fdis(a[1],a[2])+dis(a[2],a[3])+\u00b7\u00b7\u00b7+dis(a[k-1],a[k])+dis(a[k],a[1])\uff0ck\u4e3a\u5f53\u524d\u6709\u5b9d\u85cf\u7684\u6751\u5e84\u6570\uff0ca\u6570\u7ec4\u5b58\u653e\u7740\u6309dfs\u5e8f\u6392\u5e8f\u8fc7\u540e\u7684\u6709\u5b9d\u85cf\u7684\u6751\u5e84\uff0c\u90a3\u4e48\u6bcf\u4e00\u6b21\u52a0\u4e00\u4e2a\u70b9\u53ea\u8981\u5728\u539f\u57fa\u7840\u4e0a\u5220\u6389\u5b83\u6309dfs\u5e8f\u7684\u524d\u4e00\u4e2a\u70b9\u548c\u540e\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u3001\u52a0\u4e0a\u81ea\u5df1\u4e0e\u90a3\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u5c31\u597d\u4e86\uff08\u6ce8\u610f\u8fb9\u754c\u60c5\u51b5\uff0c\u5373dfs\u5e8f\u662f\u6700\u5c0f\u7684\u6216\u8005\u662f\u6700\u5927\u7684\uff09\uff0c\u5220\u9664\u540c\u7406\u3002\n\n\u6709\u5b9d\u85cf\u7684\u6751\u5e84\u7528\u4e00\u4e2aset\u7ef4\u62a4\u5c31\u597d\u4e86\uff0c\u4e00\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6O\uff08logn\uff09\uff0c\u6811\u4e0a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u6216\u8005\u662f\u500d\u589e\u5b9e\u73b0\uff08\u8fd9\u91cc\u7528\u7684\u662f\u500d\u589e\uff09\n\n\u4e0b\u9762\u7684\u662fAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cctype>\nnamespace fast_IO\n{\n    const int IN_LEN=10000000,OUT_LEN=10000000;\n    char ibuf[IN_LEN],obuf[OUT_LEN],*ih=ibuf+IN_LEN,*oh=obuf;\n    char *lastin=ibuf+IN_LEN;\n    const char *lastout=ibuf+OUT_LEN-1;\n    inline char getchar_()\n    {\n        if(ih==lastin)lastin=ibuf+fread(ibuf,1,IN_LEN,stdin),ih=ibuf;\n        return (*ih++);\n    }\n    inline void putchar_(const char x)\n    {\n        if(ih==lastout)fwrite(obuf,1,oh-obuf,stdout),oh=obuf;\n        *oh++=x;\n    }\n    inline void flush(){fwrite(obuf, 1, oh - obuf, stdout);}\n}\nusing namespace fast_IO;\n#define getchar() getchar_()\n#define putchar(x) putchar_((x))\ntypedef long long LL;\n#define rg register\ntemplate <typename T> inline T max(const T a,const T b){return a>b?a:b;}\ntemplate <typename T> inline T min(const T a,const T b){return a<b?a:b;}\ntemplate <typename T> inline T abs(const T a){return a>0?a:-a;}\ntemplate <typename T> inline void swap(T&a,T&b){T c=a;a=b;b=c;}\ntemplate <typename T> inline T gcd(const T a,const T b){if(a%b==0)return b;return gcd(b,a%b);}\ntemplate <typename T> inline T square(const T x){return x*x;};\ntemplate <typename T> inline void read(T&x)\n{\n    char cu=getchar();x=0;bool fla=0;\n    while(!isdigit(cu)){if(cu=='-')fla=1;cu=getchar();}\n    while(isdigit(cu))x=x*10+cu-'0',cu=getchar();\n    if(fla)x=-x; \n}\ntemplate <typename T> void printe(const T x)\n{\n    if(x>=10)printe(x/10);\n    putchar(x%10+'0');\n}\ntemplate <typename T> inline void print(const T x)\n{\n    if(x<0)putchar('-'),printe(-x);\n    else printe(x);\n}\ninline void judge()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout);\n}\n#include<algorithm>\n#include<set>\nconst int maxn=250001,maxm=500001;\nint bit[19];\nint n,m,s;\nint head[maxn],nxt[maxm],tow[maxm],vau[maxm],tmp=1;\nint who[maxn][19],dep[maxn];\nLL dis[maxn][19];\ninline void addb(const int u,const int v,const int w)\n{\n    tmp++;\n    nxt[tmp]=head[u];\n    head[u]=tmp;\n    tow[tmp]=v;\n    vau[tmp]=w;\n}\nint tid[maxn],tim;\ninline void dfs(const int u)\n{\n    tid[u]=++tim;\n    for(rg int i=head[u];i;i=nxt[i])\n    {\n        const int v=tow[i];\n        if(who[u][0]!=v)\n        {\n            who[v][0]=u;\n            dis[v][0]=vau[i];\n            dep[v]=dep[u]+1;\n            dfs(v);\n        }\n    }\n}\ninline LL dist(int a,int b)\n{\n    rg LL ans=0;\n    if(dep[a]<dep[b])swap(a,b);\n    const int lenth=dep[a]-dep[b];\n    for(rg int i=0;bit[i]<=lenth;i++)\n        if(lenth&bit[i])\n            ans+=dis[a][i],a=who[a][i];\n    if(a==b)return ans;\n    for(rg int i=18;i>=0;i--)\n        if(who[a][i]!=who[b][i])\n            ans+=dis[a][i]+dis[b][i],a=who[a][i],b=who[b][i];\n    return ans+dis[a][0]+dis[b][0];\n}\nLL ans;\nstruct Node\n{\n    int id;\n    bool operator <(const Node b)const\n    {\n        return tid[id]<tid[b.id];\n    }    \n};\nstd::set<Node>Q;\ninline std::set<Node>::iterator last(std::set<Node>::iterator Pos)\n{\n    if(Pos==Q.begin())Pos=Q.end();\n    Pos--;\n    return Pos;\n}\ninline std::set<Node>::iterator next(std::set<Node>::iterator Pos)\n{\n    Pos++;\n    if(Pos==Q.end())Pos=Q.begin();\n    return Pos;\n}\nstd::set<Node>::iterator Posl,Posr;\nint main()\n{\n//    judge();\n    bit[0]=1;\n    for(rg int i=1;i<=18;i++)bit[i]=bit[i-1]<<1;\n    read(n),read(m),s=1;\n    for(rg int i=1;i<n;i++)\n    {\n        int u,v,w;read(u),read(v),read(w);\n        addb(u,v,w),addb(v,u,w);\n    }\n    who[s][0]=s,dep[s]=1;\n    dfs(s);\n    for(rg int j=1;j<=18;j++)\n        for(rg int i=1;i<=n;i++)\n            who[i][j]=who[who[i][j-1]][j-1],dis[i][j]=dis[i][j-1]+dis[who[i][j-1]][j-1];\n    for(rg int i=1;i<=m;i++)\n    {\n        int u;read(u);\n        if(Q.find((Node){u})!=Q.end())\n        {\n            if(Q.size()!=1)\n            {\n                Posl=Posr=Q.find((Node){u});\n                Posl=last(Posl),Posr=next(Posr);\n                ans-=dist(u,(*Posl).id)+dist(u,(*Posr).id);\n                ans+=dist((*Posl).id,(*Posr).id);\n            }\n            Q.erase((Node){u});\n        }\n        else\n        {\n            Q.insert((Node){u});\n            if(Q.size()!=1)\n            {\n                Posl=Posr=Q.find((Node){u});\n                Posl=last(Posl),Posr=next(Posr);\n                ans+=dist(u,(*Posl).id)+dist(u,(*Posr).id);\n                ans-=dist((*Posl).id,(*Posr).id);\n            }\n        }\n        print(ans),putchar('\\n');\n    }\n    return flush(),0;\n}\n```",
        "postTime": 1516260330,
        "uid": 21892,
        "name": "zhouyuheng2003",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u68f5$n$\u4e2a\u70b9\u7684\u6811\uff0c\u7b2c$i$\u6761\u8fb9\u6709\u8fb9\u6743$w_i$\uff0c\u521d\u59cb\u72b6\u6001\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u90fd\u4e0d\u662f\u5173\u952e\u70b9\u3002\n\n\u6709$m$\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u628a\u67d0\u4e2a\u70b9\u662f\u5426\u662f\u5173\u952e\u70b9\u7684\u72b6\u6001\u53d6\u53cd\u3002\n\n\u5728\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\uff0c\u6c42\u6240\u6709\u5173\u952e\u70b9\u5f62\u6210\u7684\u6781\u5c0f\u8054\u901a\u5b50\u6811\u7684\u8fb9\u6743\u548c\u7684\u4e24\u500d\u3002\n\n$\\texttt{Data Range:}1\\leq n,m\\leq 10^5,w_i\\leq 10^9$\n\n### \u9898\u89e3\n\n\u4e00\u9053\u597d\u9898\u3002\n\n\u770b\u5230\u9898\u89e3\u533a+\u7f51\u7edc\u4e0a\u6e05\u4e00\u8272\u7684$\\texttt{set}$\u505a\u6cd5\u6211\u7559\u4e0b\u4e86\u4f24\u5fc3\u7684\u6cea\u6c34qwq\uff08~~\u5176\u5b9e\u662f\u6211\u4e0d\u592a\u4f1a\u7528\u8fd9\u4e1c\u897f~~\uff09\uff0c\u4e8e\u662f\u6211\u5199\u4e86\u5e73\u8861\u6811\u3002\n\n\u6709\u4e00\u4e2a\u5c0f\u7ed3\u8bba\uff1a\u6c42\u51fa$\\texttt{DFS}$\u5e8f\u540e\uff0c\u6240\u6709\u5173\u952e\u70b9$\\{a_1,a_2\\cdots a_n\\}$\u7684\u6781\u5c0f\u8054\u901a\u5b50\u6811\u7684\u8fb9\u6743\u548c\u7684\u4e24\u500d\u4e3a\n\n$$\\sum\\limits_{i=1}^{n-1}\\operatorname{dist}(a_i,a_{i+1})+\\operatorname{dist}(a_n,a_1)$$\n\n\u753b\u4e2a\u56fe\u611f\u6027\u7406\u89e3\u5c31\u597d\u4e86\uff0c\u4e0d\u96be\u61c2\u5427\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u52a8\u6001\u7ef4\u62a4\u4e00\u4e0b\u5173\u952e\u70b9\u7684\u6309$\\texttt{dfs}$\u5e8f\u6392\u5e8f\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u8003\u8651\u5230\u6240\u6709\u70b9\u7684$\\texttt{dfs}$\u5e8f\u7684\u76f8\u5bf9\u6b21\u5e8f\u662f\u56fa\u5b9a\u7684\uff0c\u8003\u8651\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5728$\\texttt{dfs}$\u5e8f\u4e0a\u7684\u4f4d\u7f6e\u548c$\\texttt{dfs}$\u5e8f\u4e0a\u7b2c$i$\u4e2a\u662f\u54ea\u4e2a\u70b9\u3002\n\n\u7136\u540e\u53d1\u73b0\u6bcf\u4e00\u6b21\u64cd\u4f5c\u53ea\u4f1a\u628a\u4e00\u4e2a\u5173\u952e\u70b9\u53d8\u6210\u975e\u5173\u952e\u70b9\uff0c\u6216\u662f\u628a\u4e00\u4e2a\u975e\u5173\u952e\u70b9\u53d8\u6210\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u5bf9\u5e94\u7684\u5c31\u662f\u6709\u5e8f\u5e8f\u5217\u7684\u63d2\u5165\u548c\u5220\u9664\uff0c\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u5e73\u8861\u6811\u6765\u7ef4\u62a4\u3002\n\n\u5f53\u7136\uff0c\u63d2\u5165\u4e00\u4e2a\u70b9$x$\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a\n\n$$\\operatorname{dist}(x,prv)+\\operatorname{dist}(x,nxt)-\\operatorname{dist}(prv,nxt)$$\n\n\u5176\u4e2d$prv,nxt$\u4e3a$x$\u5728$\\texttt{dfs}$\u5e8f\u4e0a\u7684\u524d\u9a71\u4e0e\u540e\u7ee7\u3002\n\n\u5220\u9664\u53ef\u4ee5\u7c7b\u6bd4\u7740\u5199\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5b8c\u7ed3\u6492\u82b1\u4e86qwq\n\n\u6709\u4e2a\u5c0f\u7ec6\u8282\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u5c31\u662f\u63d2\u5165\u7684\u65f6\u5019\u5148\u63d2\u5165\u518d\u6c42\u524d\u9a71\u540e\u7ee7\uff0c\u5220\u9664\u76f8\u53cd\u3002\n\n\u8fd9\u91cc\u6211\u7528\u7684\u662f$\\texttt{Splay}$\uff0c\u522b\u7684\u5e73\u8861\u6811\u540c\u7406\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\nconst ll MAXN=2e5+51,inf=0x7fffffffffffffff;\nstruct Edge{\n\tll to,prev,dist;\n};\nEdge ed[MAXN<<1];\nll nc,qcnt,tot,from,to,dis,ddfn,x,res,prv,nxt,sz;\nll last[MAXN],depth[MAXN],dfn[MAXN],rdfn[MAXN],anc[MAXN][19],dist[MAXN][19];\nll vis[MAXN];\ninline ll read()\n{\n    register ll num=0,neg=1;\n    register char ch=getchar();\n    while(!isdigit(ch)&&ch!='-')\n    {\n        ch=getchar();\n    }\n    if(ch=='-')\n    {\n        neg=-1;\n        ch=getchar();\n    }\n    while(isdigit(ch))\n    {\n        num=(num<<3)+(num<<1)+(ch-'0');\n        ch=getchar();\n    }\n    return num*neg;\n}\ninline void addEdge(ll from,ll to,ll dist)\n{\n\ted[++tot].prev=last[from];\n\ted[tot].to=to;\n\ted[tot].dist=dist;\n\tlast[from]=tot;\n}\ninline void dfs(ll node,ll fa,ll dis)\n{\n\tdepth[node]=depth[anc[node][0]=fa]+1,dist[node][0]=dis;\n\tdfn[node]=++ddfn,rdfn[ddfn]=node;\n\tfor(register int i=last[node];i;i=ed[i].prev)\n\t{\n\t\tif(ed[i].to!=fa)\n\t\t{\n\t\t\tdfs(ed[i].to,node,ed[i].dist);\n\t\t}\n\t}\n}\ninline void LCASetup()\n{\n\tfor(register int j=1;j<=18;j++)\n\t{\n\t\tfor(register int i=1;i<=nc;i++)\n\t\t{\n\t\t\tanc[i][j]=anc[anc[i][j-1]][j-1];\n\t\t\tdist[i][j]=dist[i][j-1]+dist[anc[i][j-1]][j-1];\n\t\t}\n\t}\n}\ninline ll LCA(ll x,ll y)\n{\n\tll res=0;\n\tif(depth[x]<depth[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tfor(register int i=18;i>=0;i--)\n\t{\n\t\tif(depth[anc[x][i]]>=depth[y])\n\t\t{\n\t\t\tres+=dist[x][i],x=anc[x][i];\n\t\t}\n\t}\n\tif(x==y)\n\t{\n\t\treturn res;\n\t}\n\tfor(register int i=18;i>=0;i--)\n\t{\n\t\tif(anc[x][i]!=anc[y][i])\n\t\t{\n\t\t\tres+=dist[x][i]+dist[y][i],x=anc[x][i],y=anc[y][i];\n\t\t}\n\t}\n\treturn res+dist[x][0]+dist[y][0];\n}\nnamespace Splay{\n    struct Node{\n        ll fa,val,size,tmp;\n        ll ch[2];\n        inline void reset(ll val=0,ll fa=0)\n        {\n            this->fa=fa,this->val=val,this->tmp=this->size=1;\n            this->ch[0]=this->ch[1]=0;\n        }\n    };\n    struct Splay{\n        ll tot,root;\n        Node nd[MAXN];\n        inline bool id(ll x)\n        {\n            return nd[nd[x].fa].ch[1]==x;\n        }\n        inline void update(ll x)\n        {\n            nd[x].size=nd[nd[x].ch[0]].size+nd[nd[x].ch[1]].size+nd[x].tmp;\n        }\n        inline void connect(ll x,ll fa,ll dir)\n        {\n            nd[x].fa=fa,nd[fa].ch[dir]=x;\n        }\n        inline void rotate(ll x)\n        {\n            ll fa=nd[x].fa,gfa=nd[fa].fa,dir=id(x);\n            connect(x,gfa,id(fa));\n            connect(nd[x].ch[dir^1],fa,dir);\n            connect(fa,x,dir^1);\n            update(fa),update(x);\n        }\n        inline void splay(ll cur,ll target)\n        {\n            while(nd[cur].fa!=target)\n            {\n                ll fa=nd[cur].fa,gfa=nd[fa].fa;\n                if(gfa!=target)\n                {\n                    rotate(id(cur)^id(fa)?cur:fa);\n                }\n                rotate(cur);\n            }\n            if(!target)\n            {\n                root=cur;\n            }\n        }\n        inline void insert(ll val)\n        {\n            ll cur=root,fa=0;\n            while(cur&&nd[cur].val!=val)\n            {\n                fa=cur,cur=nd[cur].ch[val>nd[cur].val];\n            }\n            if(cur)\n            {\n            \tnd[cur].tmp++;\n            }\n            else\n            {\n            \tcur=++tot;\n                if(fa)\n                {\n                   nd[fa].ch[val>nd[fa].val]=cur;\n                }\n                nd[cur].reset(val,fa);\n            }\n            splay(cur,0);\n        }\n        inline void find(ll val)\n        {\n            ll cur=root;\n            if(!cur)\n            {\n            \treturn;\n            }\n            while(nd[cur].ch[val>nd[cur].val]&&val!=nd[cur].val)\n            {\n                cur=nd[cur].ch[val>nd[cur].val];\n            }\n            splay(cur,0);\n        } \n        inline ll getPrev(ll val)\n        {\n            find(val);\n            ll cur=root;\n            if(nd[cur].val<val)\n            {\n                return cur;\n            }\n            cur=nd[cur].ch[0];\n            while(nd[cur].ch[1])\n            {\n                cur=nd[cur].ch[1];\n            }\n            return cur;\n        }\n        inline ll getNext(ll val)\n        {\n            find(val);\n            ll cur=root;\n            if(nd[cur].val>val)\n            {\n                return cur;\n            }\n            cur=nd[cur].ch[1];\n            while(nd[cur].ch[0])\n            {\n                cur=nd[cur].ch[0];\n            }\n            return cur;\n        }\n        inline ll prev(ll val)\n        {\n        \treturn nd[getPrev(val)].val;\n        }\n        inline ll next(ll val)\n        {\n            return nd[getNext(val)].val;\n        }\n        inline void del(ll val)\n        {\n        \tll prv=getPrev(val),nxt=getNext(val),ls;\n        \tsplay(prv,0),splay(nxt,prv),ls=nd[nxt].ch[0];\n        \tif(nd[ls].tmp>1)\n        \t{\n        \t\tnd[ls].tmp--,splay(ls,0);   \n            }\n            else\n            {\n                nd[nxt].ch[0]=0;\n            }\n        }\n        inline ll findVal(ll rk)\n        {\n            ll cur=root,ls;\n            if(nd[root].size<rk)\n            {\n                return 0;\n            }\n            while(1)\n            {\n                ls=nd[cur].ch[0];\n                if(rk>nd[ls].size+nd[cur].tmp)\n                {\n                    rk-=nd[ls].size+nd[cur].tmp,cur=nd[cur].ch[1];\n                }\n                else\n                {\n                    if(rk<=nd[ls].size)\n                    {\n                        cur=ls;\n                    }\n                    else\n                    {\n                        return nd[cur].val;\n                    }\n                }\n            }\n        }\n        inline ll findRank(ll val)\n        {\n            find(val);\n            return nd[nd[root].ch[0]].size;\n        }\n    };\n}\nSplay::Splay splay;\nint main()\n{\n\tnc=read(),qcnt=read();\n\tfor(register int i=0;i<nc-1;i++)\n\t{\n\t\tfrom=read(),to=read(),dis=read();\n\t\taddEdge(from,to,dis),addEdge(to,from,dis);\n\t}\n\tdfs(1,0,0),LCASetup(),splay.insert(inf),splay.insert(-inf),sz=2;\n\tfor(register int i=0;i<qcnt;i++)\n\t{\n\t\tx=dfn[read()];\n\t\tif(!vis[rdfn[x]])\n\t\t{\n\t\t\tsplay.insert(x),sz++;\n\t\t}\n\t\tprv=splay.prev(x),nxt=splay.next(x);\n\t\tprv=prv==-inf?splay.findVal(sz-1):prv;\n\t\tnxt=nxt==inf?splay.findVal(2):nxt;\n\t\tif(vis[rdfn[x]])\n\t\t{\n\t\t\tsplay.del(x),sz--;\n\t\t}\n\t\tprv=rdfn[prv],nxt=rdfn[nxt],x=rdfn[x];\n\t\tdis=LCA(x,prv)+LCA(x,nxt)-LCA(prv,nxt);\n\t\t!vis[x]?(vis[x]=1,res+=dis):(vis[x]=0,res-=dis);\n\t\tprintf(\"%lld\\n\",res);\n\t}\n}\n```",
        "postTime": 1571316775,
        "uid": 60990,
        "name": "Karry5307",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e\u6c42\u7684\u7b54\u6848\u5c31\u662f\u6811\u4e0a\u5173\u952e\u70b9\u7684\u8fb9\u6743\u548c*2\n\n\u8fd9\u4e2a\u6709\u70b9\u96be\u6c42\u3002 \u7531\u4e8e\u6bcf\u6b21\u53ea\u4fee\u6539\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u52a0\u5165\u8fd9\u4e2a\u5173\u952e\u70b9\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff1f\n\n\u9996\u5148\u53d1\u73b0\u6574\u68f5\u6811\u7684\u6743\u503c\u548c\u4e0e\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u8ba1\u7b97\u65e0\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u6362\u79cd\u8ba1\u7b97\u65b9\u5f0f\uff0c\u5c31\u662f\u6bcf\u6b21\u52a0\u5165\u5f80\u4ed6dfs\u5e8f\u7684\u540e\u7ee7\u8d70\uff0c\u5c31\u53ef\u4ee5\u4e86\uff08\u865a\u6811\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u4e00\u5b9a\u662f\u6309\u7167dfs\u5e8f\u8d70\u7684\u7b80\u5355\u8def\u5f84\uff09\u3002\n\n\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u70b9\u5c31\u662f\u52a0\u4e0a\u4ed6\u5230\u524d\u9a71\u540e\u7ee7\u7684\u8ddd\u79bb\uff0c\u51cf\u53bb\u524d\u9a71\u540e\u7ee7\u4e4b\u95f4\u539f\u6709\u7684\u201c\u8fb9\u6743\u201d \u5c31\u53ef\u4ee5\u4e86\n\n```cpp\n#include<cstdio>\n#include<set>\n#include<algorithm>\n#define int long long\nusing namespace std;\ninline int read(){int x=0,f=1,ch=getchar(); while(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();} while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();} return x*f;}\ninline void write(int x){if (x<0) putchar('-'),x=-x; if (x>=10) write(x/10); putchar(x%10+'0');}\ninline void writeln(int x){write(x); puts(\"\");}\nconst int N=100005;\nstruct edge{\n\tint link,next,val;\n}e[N<<1];\nint cnt,id[N],pos[N],dep[N],n,m,tot,head[N],fa[N][20],va[N];\nset<int > st;\nset<int > :: iterator it,qi,ho;\ninline void add_edge(int u,int v,int w){\n\te[++tot]=(edge){v,head[u],w}; head[u]=tot;\n}\ninline void insert(int u,int v,int w){\n\tadd_edge(u,v,w); add_edge(v,u,w); \n}\ninline void init(){\n\tn=read(); m=read();\n\tfor (int i=1;i<n;i++){\n\t\tint u=read(),v=read(),w=read();\n\t\tinsert(u,v,w);\n\t}\n}\nvoid dfs(int u,int Fa){\n\tfa[u][0]=Fa; dep[u]=dep[Fa]+1; id[u]=++cnt; pos[cnt]=u;\n\tfor (int i=1;i<20;i++){\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t}\n\tfor (int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].link;\n\t\tif (v!=Fa){\n\t\t\tva[v]=va[u]+e[i].val; dfs(v,u);\n\t\t}\n\t}\n}\ninline int LCA(int u,int v){\n\tif (dep[u]<dep[v]) swap(u,v);\n\tint delta=dep[u]-dep[v];\n\tfor (int i=0;i<20;i++){\n\t\tif (delta&(1<<i)){\n\t\t\tu=fa[u][i];\n\t\t}\n\t}\n\tfor (int i=19;i>=0;i--){\n\t\tif (fa[u][i]!=fa[v][i]){\n\t\t\tu=fa[u][i]; v=fa[v][i];\n\t\t}\n\t}\n\tif (u!=v) return fa[u][0];\n\t\telse return u;\n}\nbool vis[N];\ninline void qry(int x){\n\tit=st.find(id[x]);\n\tif (it==st.begin()) {qi=st.end(); qi--;}\n\t\telse{ qi=it; qi--;}\n\tho=it; ho++;\n\tif (ho==st.end()) ho=st.begin();\n}\ninline int work1(){\n\treturn va[pos[*ho]]+va[pos[*it]]*2+va[pos[*qi]]-va[LCA(pos[*ho],pos[*it])]*2-va[LCA(pos[*qi],pos[*it])]*2;\n}\ninline int work2(){\n\treturn va[pos[*ho]]+va[pos[*qi]]-2*va[LCA(pos[*ho],pos[*qi])];\n}\nint ans;\ninline void solve(){\n\tdfs(1,0);\n\tfor (int i=1;i<=m;i++){\n\t\tint x=read();\n\t\tif (vis[x]){\n\t\t\tqry(x);\n\t\t\tans-=work1(); ans+=work2();\n\t\t\tst.erase(id[x]); vis[x]=0;\n\t\t}else{\n\t\t\tvis[x]=1; st.insert(id[x]);\n\t\t\tqry(x);\n\t\t\tans+=work1(); ans-=work2();\n\t\t}\n\t\twriteln(ans);\n\t}\n}\nsigned main(){\n\tinit();\n\tsolve();\n\treturn 0;\n} \n```\n\n",
        "postTime": 1534080216,
        "uid": 34444,
        "name": "\u5927\u83dc\u9e21fks",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "## \u9898\u9762\n[P3320 [SDOI2015]\u5bfb\u5b9d\u6e38\u620f](https://www.luogu.com.cn/problem/P3320)\n\n## \u5206\u6790\n\n\u597d\u5bb6\u4f19\uff01\u8c03\u8bd5\u4e86\u516d\u4e2a\u5c0f\u65f6\u3002\u3002\u3002\n\n\u4e0d\u8fc7\u8c8c\u4f3c\u6211\u7684\u5e38\u6570\u6700\u5c0f\uff0c\u62a2\u5230\u4e86rk1\uff1f\uff08\u5982\u679c\u6709\u4eba\u62a2\u8d70\u4e86\u8bf7\u544a\u8bc9\u6211\uff09\u3002\n\n\u5154\u961f\u8bb2\u5f97\u4e0d\u5f88\u6e05\u695a\uff0c\u4f46\u662f\u6709\u501f\u9274\u610f\u4e49\u3002\n\n>> \u4e00\u4e2a\u7ed3\u8bba\uff1aDFS \u5e8f\u6c42\u51fa\u540e\uff0c\u5047\u8bbe\u5173\u952e\u70b9\u6309\u7167 DFS \u5e8f\u6392\u5e8f\u540e\u662f ${a_1,a_2,\u2026,a_k}$\u3002\n\n>>  \u90a3\u4e48\u6240\u6709\u5173\u952e\u70b9\u5f62\u6210\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u6811\u7684\u8fb9\u6743\u548c\u7684\u4e24\u500d\u7b49\u4e8e $dist(a_1,a_2)+dist(a_2,a_3)+...+dist(a_{k-1},a_k)+dist(a_k,a_1)$\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528STL `std::set <int> Set`(\u5f53\u7136\uff0c\u624b\u5199\u4e5f\u884c)\uff0cSet\u91cc\u9762\u5b58\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684dfs\u5e8f\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e00\u4e2adfs\u5e8f\u5bf9\u5e94\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u5efa\u7acb\u8282\u70b9\u7f16\u53f7\u4e0edfs\u5e8f\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\uff08\u7c89\u5154\u7684\u9898\u89e3\u770b\u4e86\u6211\u534a\u5929\uff0cidf\u662f\u5565\u5440\u3002\u3002\u3002\u800c\u4e14\u4e5f\u4e0d\u4e25\u8c28\uff0c\u5982\u679c\u539f\u6765\u6ca1\u6709\u8282\u70b9\u7684\u8bdd$cur$\u5c31\u6ca1\u6709\u524d\u9a71\uff09\u3002\n\n\u6bcf\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff1a\n\n\u82e5Set\u4e3a\u7a7a\uff0cans=0\n\n\u82e5Set\u4e2d\u539f\u6765\u6709\u4e00\u4e2a\u5143\u7d20\uff0cans = $2 \\times dist$(\u539f\u6709\u5143\u7d20\uff0c\u5f53\u524d\u5143\u7d20)\n\n\u82e5Set\u4e2d\u539f\u6765\u81f3\u5c11\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u8bbedfs\u5e8f\u6bd4\u5f53\u524d\u8282\u70b9\u5927\u7684\u4e14dfs\u5e8f\u6700\u5c0f\uff08\u5373\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\uff09\u548c\u524d\u9a71\u3002\u8bbe\u4e3a $x$, $y$\u3002\n\n\u90a3\u4e48\uff0c$dist(x,y)$\u53ef\u4ee5\u5220\u53bb\uff0c\u8981\u52a0\u4e0a$dist(x,cur)+dist(cur,y)$\u3002\n\n\u5220\u9664\u540c\u7406\u3002\n\n## \u89e3\u51b3\n\n\u6700\u4f18\u89e3~~170\u884c\u5de8\u957f~~\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <set>\n#include <algorithm>\n\nnamespace Read {\nchar bufin[1 << 21], *p1 = bufin, *p2 = bufin;\ninline char gc() {\n  if (p1 == p2) {\n    p1 = bufin, p2 = p1 + fread(bufin, 1, 1 << 21, stdin);\n      if (p1 == p2)\n        return EOF;\n  }\n  return *p1++;\n}\ninline void read(int &ret) {\n  ret = 0;\n  char c = gc();\n  while (!isdigit(c)) c = gc();\n  while (isdigit(c)) ret = ret * 10 + c - '0', c = gc();\n}\n} //namespace IO \nusing Read::read;\nusing Read::gc;\n\nnamespace Write {\nchar bufout[1 << 21];\nint tot, top;\nchar buf[20];\ninline void flush() {\n    fwrite(bufout, 1, tot, stdout);\n    tot = 0;\n}\ninline void write(long long ret) {\n  if (tot + 20 >= (1 << 21))\n    flush();\n  top = 0;\n  if (ret < 0)\n    ret = -ret, bufout[tot++] = '-';\n  if (ret == 0)\n    bufout[tot++] = '0';\n  while (ret) buf[top++] = ret % 10 + '0', ret /= 10;\n  for (int i = top - 1; i >= 0; i--) bufout[tot++] = buf[i];\n  bufout[tot++] = '\\n';\n}\n} // namespace Write\nusing Write::write;\nusing Write::flush;\n\ntypedef long long lxl;\n\nconst int N = 100005, M = N << 1;\n\nint n, m;\nint head[N], ver[M], nxt[M], edge[M], tot;\nint dfn[N], dep[N], son[N], siz[N], fa[N], top[N], Idx, DFN[N];\nbool exist[N];\nlxl dis[N], ans;\n\nstd::set <int> Set;\nstd::set <int>::iterator it;\n\nvoid addedge(int x, int y, int z) {\n  tot++, ver[tot] = y, edge[tot] = z;\n  nxt[tot] = head[x], head[x] = tot;\n}\n\nvoid build() {\n  read(n), read(m);\n  for (int i = 1; i < n; i++) {\n    int u, v, w;\n    read(u), read(v), read(w);\n    addedge(u, v, w), addedge(v, u, w);\n  }\n}\n\ninline void dfs1(int cur, int f, int e) {\n  dep[cur] = dep[f] + 1, dis[cur] = dis[f] + e;\n  fa[cur] = f, siz[cur] = 1, dfn[cur] = ++Idx, DFN[Idx] = cur;\n  int maxi = -1;\n  for (int i = head[cur]; i; i = nxt[i]) {\n    if (ver[i] == f)\n      continue;\n    dfs1(ver[i], cur, edge[i]);\n    siz[cur] += siz[ver[i]];\n    if (siz[ver[i]] > maxi)\n      maxi = siz[ver[i]], son[cur] = ver[i];\n  }\n}\n\ninline void dfs2(int cur, int tp) {\n  top[cur] = tp;\n  if (!son[cur])\n    return;\n  dfs2(son[cur], tp);\n  for (int i = head[cur]; i; i = nxt[i])\n    if (ver[i] != fa[cur] && ver[i] != son[cur])\n      dfs2(ver[i], ver[i]);\n}\n\ninline void swap(int &x, int &y) { x ^= y ^= x ^= y; }\n\ninline int LCA(int x, int y) {\n  while (top[x] != top[y]) {\n    if (dep[top[x]] < dep[top[y]])\n      swap(x, y);\n    x = fa[top[x]];\n  }\n  if (dep[x] > dep[y])\n    swap(x, y);\n  return x;\n}\n\ninline lxl D(int x, int y) { return dis[x] + dis[y] - 2 * dis[LCA(x, y)]; }\n\ninline void Erase(int t) {\n  exist[DFN[t]] = false;\n  if (Set.size() <= 2) {\n    ans = 0; \n    Set.erase(t); \n    return;\n  }\n  if (Set.size() == 3) {\n    Set.erase(t);\n    ans = 2 * D(DFN[*Set.begin()], DFN[*(--Set.end())]);\n    return;\n  }\n  it = Set.lower_bound(t);\n  int x = DFN[(it == Set.begin()) ? *(--Set.end()) : *(--it)];\n  it = Set.lower_bound(t);\n  int y = DFN[(it == --Set.end()) ? *(Set.begin()) : *(++it)];\n  ans -= D(x, DFN[t]) + D(DFN[t], y) - D(x, y);\n  Set.erase(t);\n}\n\ninline void Insert(int t) {\n  exist[DFN[t]] = true;\n  if (Set.size() == 0) {\n    ans = 0;\n    Set.insert(t);\n    return;\n  }\n  if (Set.size() == 1) {\n    ans = 2 * D(DFN[*Set.begin()], DFN[t]);\n    Set.insert(t);\n    return;\n  }\n  Set.insert(t);\n  it = Set.lower_bound(t);\n  int x = DFN[(it == Set.begin()) ? *(--Set.end()) : *(--it)];\n  it = Set.lower_bound(t);\n  int y = DFN[(it == --Set.end()) ? *(Set.begin()) : *(++it)];\n  ans += D(x, DFN[t]) + D(DFN[t], y) - D(x, y);\n}\n\nint main() {\n  build();\n  dfs1(1, 0, 0);\n  dfs2(1, 1);\n  while (m--) {\n    int t, x, y;\n    read(t);\n    t = dfn[t];\n    if (!exist[DFN[t]]) \n        Insert(t);\n    else\n        Erase(t);\n    write(ans);\n  }\n  flush();\n  return 0;\n}\n\n\n```\n\n\u56e0\u4e3a\u662f\u7528emacs\u5199\u7684\uff0c\u7f29\u8fdb\u53ea\u6709\u4e24\u683c\u3002\u6709\u4eba\u4f1a\u5e2e\u5fd9\u8c03\u6210\u56db\u683c\u5417\uff1f~~\u5176\u5b9e\u4e24\u683c\u4e5f\u633a\u597d\u770b~~\u3002\n\n~~\u597d\u50cf\u5199\u7684\u8d8a\u957f\u8dd1\u5f97\u8d8a\u5feb~~\n\n\u5fe0\u544a\uff1a\n1. \u522b\u7528register\uff01\n2. \u5f00~~lxl~~ long long!\n3. \u6811\u94fe\u5256\u5206\u6c42LCA\u7684if\u6761\u4ef6\u522b\u5199\u9519\uff01\uff08\u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u5199\u500d\u589e\uff09\u3002\n\n### THE END",
        "postTime": 1603079580,
        "uid": 253946,
        "name": "ClHg2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u770b\u5230\u5efa\u865a\u6811\u7684\u505a\u6cd5\uff1f\uff1f\uff1f~~\u4e0d\u4f1a~~\n\n\u8fd9\u9898\u8981\u6c42\u6bcf\u4e00\u6b21\u52a0\u51cf\u64cd\u4f5c\u90fd\u8ba1\u7b97\u7b54\u6848\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\u3002\n\n\u6162\u6162\u5206\u6790\uff1a\u9996\u5148\u4e00\u4e2a\u70b9\u6216\u8005\u6ca1\u6709\u70b9\uff0c\u80af\u5b9a\u6ca1\u6709\u8d21\u732e\uff0c\u4e3a0\u3002\n\n\u7136\u540e\u662f\u4e24\u4e2a\u70b9\uff0c\u968f\u4fbf\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u8d70\u5230\u53e6\u4e00\u4e2a\u70b9\u518d\u8fd4\u56de\uff0c\u8d21\u732e\u4e3a2 $\\times$ $dis(x,y)$\u3002\n\n\u56de\u5fc6\u4e00\u4e0b\u6811\u4e0a\u4e24\u70b9\u8ddd\u79bb\uff1a$x$\u5230$y$\u7684\u8ddd\u79bb$=$ $x$\u5230\u6839\u7684\u8ddd\u79bb$+$ $y$\u5230\u6839\u7684\u8ddd\u79bb$-$ $lca(x,y)$\u5230\u6839\u7684\u8ddd\u79bb$\\times$ 2\u3002($lca$\u60f3\u600e\u4e48\u6c42\u600e\u4e48\u6c42)\n \n\u518d\u589e\u52a0\u4e00\u4e2a\u70b9\u5462\uff1f\u6811\u4e0a\u67093\u4e2a\u70b9\uff0c\u600e\u4e48\u8d70\u80fd\u4f7f\u8ddd\u79bb\u6700\u77ed\uff1f\u5e94\u8be5\u662f\u6309\u904d\u5386\u65f6\u7684\u65f6\u95f4\u6233\u8d70\u54af\u3002\u5047\u8bbe\u65f6\u95f4\u6233\u4e3a1\uff0c2\uff0c3\uff0c\u90a3\u4e48\u8d21\u732e\u5c31\u662f1->2 $+$ 2->3 $+$ 3->1\u3002(\u7bad\u5934\u8868\u793a\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb)\n\n\u90a3\u4e48\u4e0d\u7ba1\u51e0\u4e2a\u70b9\uff0c\u6211\u4eec\u53d1\u73b0\u6309\u65f6\u95f4\u6233\u8d70\u80af\u5b9a\u6700\u5feb\u3002\u6240\u4ee5\u8003\u8651\u7ef4\u62a4\u52a0\u5165\u70b9\u7684\u65f6\u95f4\u6233\u3002\u849f\u84bb\u6211\u4e0d\u4f1a$splay$\uff0c\u53ea\u80fd\u7529\u51fa\u4e00\u624b$STL$\u5927\u6cd5$set$\u3002(~~STL\u5927\u6cd5\u597d~~)\n\n\u6bcf\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u8003\u8651\u589e\u52a0\u7684\u8d21\u732e\uff0c\u662f\u5148\u5220\u53bb\u5b83\u65f6\u95f4\u6233($set$\u91cc\u9762)\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u8d21\u732e\uff0c\u518d\u52a0\u4e0a\u5b83\u548c\u5de6\u8fb9\u4ee5\u53ca\u5b83\u548c\u53f3\u8fb9\u7684\u8d21\u732e\u3002\u5220\u53bb\u4e00\u4e2a\u5143\u7d20\u540c\u7406\u3002\u8fd9\u9898\u505a\u5b8c\uff0c\u5bf9$set$\u7684\u4f7f\u7528\u4ee5\u540e\u5c31\u4f1a\u5f88\u719f\u7ec3\u4e86\u3002\n\n\u6ce8\u610f\u7279\u5224\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\u4ee5\u53ca\u5f00$long\\ long$\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define ts cout<<\"ok\"<<endl\n#define oo (1e18)\n#define int long long\n#define LL unsigned long long\n#define ite set<int>::iterator\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n#define hh puts(\"\")\nusing namespace std;\nint n,m,cnt,head[100005],dfn[100005],bz[100005][20],dis[100005],vis[100005],dep[100005],ans;\nset<int> s;\nstruct Edge{\n\tint v,nx,s;\n}e[200005];\ninline int read(){\n    int ret=0,ff=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') ff=-1;ch=getchar();}\n    while(isdigit(ch)){ret=(ret<<3)+(ret<<1)+(ch^48);ch=getchar();}\n    return ret*ff;\n}\ninline void add(int x,int y,int z){\n\te[++cnt].v=y;\n\te[cnt].nx=head[x];\n\te[cnt].s=z;\n\thead[x]=cnt;\n}\nvoid dfs(int now,int fa){\n\tdfn[now]=++cnt;//\u65f6\u95f4\u6233 \n\tvis[cnt]=now;//dfs\u5e8f \n\tdep[now]=dep[fa]+1;\n\tfor(int i=head[now];i;i=e[i].nx){\n\t\tint v=e[i].v;\n\t\tif(v==fa) continue;\n\t\tdis[v]=dis[now]+e[i].s;\n\t\tbz[v][0]=now;\n\t\tdfs(v,now);\n\t}\n}\ninline ite lef(ite it){\n\tif(it==s.begin()) return --s.end();\n\treturn --it;\n}\ninline ite rig(ite it){\n\tif(it==--s.end()) return s.begin();\n\treturn ++it;\n}\ninline int LCA(int x,int y){\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=17;i>=0;i--){\n\t\tif(dep[bz[x][i]]>=dep[y])\n\t\t\tx=bz[x][i];\n\t}\n\tif(x==y) return x;\n\tfor(int i=17;i>=0;i--)\n\t\tif(bz[x][i]!=bz[y][i])\n\t\t\tx=bz[x][i],y=bz[y][i];\n\treturn bz[x][0];\n}\nsigned main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<n;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t\tadd(y,x,z);\n\t}\n\tcnt=0;\n\tdis[1]=0;\n\tdfs(1,0);\n\tfor(int k=1;k<=17;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tbz[i][k]=bz[bz[i][k-1]][k-1];\n\t\n\tfor(int i=1;i<=m;i++){\n\t\tint x=read();\n\t\tif(!s.count(dfn[x])){\n\t\t\tif(s.size()){\n\t\t\t\tite it=s.lower_bound(dfn[x]);\n\t\t\t\tif(it==s.end()) it=s.begin();\n\t\t\t\tite L=lef(it);\n\t\t\t\tint lca1=LCA(vis[*it],vis[*L]);\n\t\t\t\tint lca2=LCA(vis[*it],x);\n\t\t\t\tint lca3=LCA(vis[*L],x);\n\t\t\t\tans-=dis[vis[*it]]+dis[vis[*L]]-2*dis[lca1];\n\t\t\t\tans+=dis[vis[*it]]+dis[x]-2*dis[lca2];\n\t\t\t\tans+=dis[vis[*L]]+dis[x]-2*dis[lca3];\n\t\t\t}\n\t\t\ts.insert(dfn[x]);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tite it=s.find(dfn[x]);\n\t\t\tite L=lef(it),R=rig(it);\n\t\t\tint lca1=LCA(x,vis[*L]);\n\t\t\tint lca2=LCA(x,vis[*R]);\n\t\t\tint lca3=LCA(vis[*L],vis[*R]);\n\t\t\tans-=dis[x]+dis[vis[*L]]-2*dis[lca1];\n\t\t\tans-=dis[x]+dis[vis[*R]]-2*dis[lca2];\n\t\t\tans+=dis[vis[*L]]+dis[vis[*R]]-2*dis[lca3];\n\t\t\ts.erase(dfn[x]);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t\tcontinue;\n\t\t}\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1552522576,
        "uid": 27858,
        "name": "ycyaw",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\n# \u66f4\u597d[\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/ezoihy/p/9110381.html)\uff0c\u6b22\u8fce\u8bbf\u95ee\u672c\u5f31\u5f31\u7684[\u535a\u5ba2](http://www.cnblogs.com/ezoihy/)\n### solution\n\u5176\u5b9e\u8fd9\u9898\u662f\u4e00\u4e2a\u6bd4\u8f83\u5751\u7239\u7684\u9898\uff0c\u53ef\u4ee5\u7528\u865a\u6811\u505a\uff0c\u4e5f\u53ef\u4ee5\u7528set+lca\u505a\n#### \u8fd9\u91cc\u8bb2\u4e0bset+lca\u7684\u505a\u6cd5\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5c06\u5404\u4e2a\u70b9\u7684dfn\u503c\u5728set\u4e2d\u5220\u9664\uff0c\u7528dfn\u662f\u56e0\u4e3aset\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u8fd9\u6837\u65b9\u4fbf\u67e5\u627e\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u624b\u5199rank_tree\uff08splay\uff0ctreap\u7b49\uff09\uff0c\u8fd9\u6837\u6548\u7387\u6216\u8bb8\u66f4\u9ad8\u3002\n\n\n\u63d2\u5165\u64cd\u4f5c\uff1a\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u70b9x\u63d2\u5165\u5230set\u4e2d\uff0c\u5c06\u4e0a\u4e00\u6b21\u7684\u7b54\u6848\u52a0\u4e0ax\u70b9\u5230\u5176\u524d\u9a71\u4ee5\u53ca\u540e\u7ee7\u70b9\u7684\u8def\u5f84\u957f\uff0c\u518d\u51cf\u53bb\u8be5\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u3002\n\n$$insert_{ans}(x)=ans_{last}-dis(before,after)+dis(x,before)+dis(x,after)$$\n\n\u5220\u9664\u64cd\u4f5c\uff1a\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0a\u4e00\u6b21\u7b54\u6848\u52a0\u4e0a\u5f85\u5220\u9664\u7684\u70b9x\u7684\u524d\u9a71\u548c\u540e\u7ee7\u4e4b\u95f4\u7684\u8def\u5f84\u957f\uff0c\u518d\u51cf\u53bb\u5206\u522b\u5230\u524d\u9a71\u540e\u540e\u7ee7\u7684\u8def\u5f84\u3002\n\n$$erase_{ans}(x)=ans_{last}+dis(before,after)-dis(x,before)-dis(x,after)$$\n\n\u5176\u4e2ddis\u4e3a\n\n$$dis(x,y)=dis\\bigr(LCA(x,y),x\\bigl)+dis\\bigr(LCA(x,y),y\\bigl)$$\n\n\u671f\u95f4\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5256\u6c42lca\uff0c\u5e76\u5728\u6811\u5256\u7684\u7b2c\u4e00\u4e2adfs\u91cc\u521d\u59cb\u5316\u597d\u5404\u4e2a\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u3002\n#### \u865a\u6811\u505a\u6cd5\n\u6613\u77e5\uff0c\u7b54\u6848\u5c31\u662f\u5404\u4e2a\u5173\u952e\u70b9\u4e4b\u95f4\u5f62\u6210\u7684\u6811\u7684\u8fb9\u6743\u548c\u7684\u4e24\u500d\uff0c\u8fd9\u5c31\u662f\u865a\u6811\uff01\u5bf9\u4e8e\u4e00\u9897\u865a\u6811\uff0c\u7b54\u6848\u5c31\u662f\u5404\u4e2a\u7684dfs\u5e8f\u6392\u5e8f\uff0c\u76f8\u90bb\u4e24\u70b9\u7684\u8ddd\u79bb\u548c\uff0c\u518d\u52a0\u4e0a\u6700\u540e\u4e00\u4e2a\u5230\u7b2c\u4e00\u4e2a\u7684\u8ddd\u79bb,\u76f4\u63a5\u7528set\u7ef4\u62a4dfs\u5e8f\u5c31\u597d\u4e86\uff0c\u6ce8\u610f\u6700\u540e\u8981\u51cf\u6389\u6240\u6709\u5173\u952e\u70b9\u7684LCA\u7684\u6df1\u5ea6\n\n\u8fd9\u662fLCA+set\u505a\u6cd5\u7684\u4ee3\u7801\n\n    #include<cstdio>\n\t#include<cstring>\n\t#include<algorithm>\n\t#include<set>\n\tusing namespace std;\n\t \n\tconst int N=1000001;\n\tint n,q,tot,root,maxn,dftim,tim[N],fa[N],to[N<<1],nx[N<<1],head[N<<1],dep[N],siz[N],son[N],top[N],dfn[N],dfnnode[N+5];\n\tlong long cost[N<<1],ans,toroot[N];\n\tbool flag[N];\n\tset<int> s;\n\t \n\tvoid addedge(int x,int y,long long z){\n\t    nxt[++tot]=head[x]; \n\t    head[x]=tot;\n\t    to[tot]=y;\n\t    cost[tot]=z;\n\t}\n\t  \n\tvoid dfs1(int u,int f) {//\u6811\u5256\u6c42lca\n    \tdfn[u]=++dftim;\n    \tdfnnode[dfn[u]]=u;\n    \tdep[u]=dep[fa[u]=f]+(siz[u]=1);\n    \tfor(int i=head[u];i;i=nxt[i]) {\n        \tint v=to[i];\n        \tif(v==f)continue;\n        \ttoroot[to[i]]=toroot[u]+cost[i];\n        \tdfs1(v,u);\n        \tsiz[u]+=siz[v];\n        \tif(siz[v]>siz[son[u]])son[u]=v;\n    \t}\n\t}\n  \n\tvoid dfs2(int u,int topf){\n\t    top[u]=topf;\n\t    if(!son[u])return;\n\t    dfs2(son[u],topf);\n\t    for(int i=head[u];i;i=nxt[i]){\n\t        int v=to[i];\n\t        if(v==fa[u] or v==son[u])continue;\n\t        dfs2(v,v);\n\t    }\n\t}\n\t \n\tint lca(int x,int y) {\n\t    register int u=x,v=y;\n\t    while(top[u]!=top[v]) {\n\t        if(dep[top[u]]<dep[top[v]])swap(u,v);\n\t        u=fa[top[u]];\n\t    }\n\t    return dep[u]<=dep[v]?u:v;\n\t}\n\t \n\tlong long get(int x,int y){\n\t    int z=lca(x,y);\n\t    return toroot[x]+toroot[y]-2*toroot[z];\n\t}\n\t \n\tint main() {\n\t    scanf(\"%d%d\",&n,&q);\n\t    for(int i=1; i<n; ++i) {\n\t        int u,v;\n\t        long long w;\n\t        scanf(\"%d%d%lld\",&u,&v,&w);\n\t        addedge(u,v,w),addedge(v,u,w);\n\t        tim[u]++,tim[v]++;\n\t        if(tim[u]>maxn)root=u,maxn=tim[u];\n\t        if(tim[v]>maxn)root=v,maxn=tim[v];\n\t    }\n\t    dfs1(root,0);\n\t    dfs2(root,root);    \n\t\ts.insert(0),s.insert(n+1);\n    \twhile(q--){\n        \tint x;scanf(\"%d\",&x);\n        \tif(flag[x]){\n        \t    int las=*--s.find(dfn[x]),nxt=*++s.find(dfn[x]);\n            \tif(las>=1)ans-=get(dfnnode[las],x);\n            \tif(nxt<=n)ans-=get(dfnnode[nxt],x);\n            \tif(las>=1 and nxt<=n)ans+=get(dfnnode[las],dfnnode[nxt]);\n            \ts.erase(dfn[x]);\n        \t}else{\n            \ts.insert(dfn[x]);\n            \tint las=*--s.find(dfn[x]),nxt=*++s.find(dfn[x]);//\u8ba1\u7b97\u524d\u9a71\u4e0e\u540e\u7ee7\n            \tif(las>=1)ans+=get(dfnnode[las],x);\n            \tif(nxt<=n)ans+=get(dfnnode[nxt],x);\n            \tif(las>=1 and nxt<=n)ans-=get(dfnnode[las],dfnnode[nxt]);\n\t        }\n    \t    int first=*++s.find(0),last=*--s.find(n+1);long long hehe=0;\n        \tif (first<1 or last>n) hehe=0;\n        \telse hehe=get(dfnnode[first],dfnnode[last]);\n        \tprintf(\"%lld\\n\",ans+hehe);\n        \tflag[x]=!flag[x];\n    \t}\n    \treturn 0;\n\t}",
        "postTime": 1527858348,
        "uid": 48146,
        "name": "ezoiHY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u662f\u4e00\u9053\u6bd4\u8f83\u7ecf\u5178\u7684\u9898\u4e86\u5427\uff0c\u4e0d\u8fc7 NOIp \u524d\u505a\u505a\u8001\u9898\u4e5f\u4e0d\u9519\u3002\n\n---\n\n### $Solution:$\n\n\u8fd9\u9898\u672c\u8d28\u4e0a\u5c31\u662f\u6c42\u4f7f\u52a8\u6001\u70b9\u96c6\u8fde\u901a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u4e0d\u653e\u8bbe\u8fd9\u4e2a\u70b9\u96c6\u4e3a $\\{S_i\\}$\uff0c$|\\{S_i\\}|=n$\u3002\n\n\u5982\u679c\u6211\u4eec\u628a $S_i$ \u6309\u7167\u5176 $\\mathrm{DFS}$ \u5e8f\u6392\u5e8f\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6700\u5c0f\u4ee3\u4ef7\u4fbf\u662f\uff1a\n\n$$2\\sum_{i=1}^ndis(S_i, S_{i+1})$$\n\n\u8fd9\u91cc\u94a6\u5b9a $S_{n+1}=S_1$\u3002\n\n\u8bc1\u660e\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u8003\u8651\u8fde\u901a\u540e\u7684\u5b50\u6811\uff0c\u6bcf\u6761\u8fb9\u5728 $\\mathrm{DFS}$ \u7684\u65f6\u5019\u4f1a\u5165\u4e00\u6b21\uff0c\u53c8\u51fa\u4e00\u6b21\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u5c31\u8d21\u732e\u4e86\u4e24\u6b21\u3002\u800c\u6309\u7167 $\\mathrm{DFS}$ \u5e8f\u76f8\u90bb\u53d6\u8ddd\u79bb\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a $\\mathrm{DFS}$ \u7684\u8fc7\u7a0b\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u540e\u5220\u9664\u7684\u65f6\u5019\u90fd\u80fd\u7ef4\u62a4\u8fd9\u4e2a\u503c\u5c31\u884c\u4e86\u3002\u5f88\u663e\u7136\u6bcf\u6b21\u6211\u4eec\u90fd\u8981\u627e\u5b83\u7684\u524d\u9a71\u548c\u540e\u7ee7\u3002\n\n\u52a8\u6001\u63d2\u5165/\u5220\u9664+\u627e\u524d\u9a71\u540e\u7ee7\uff1f\u5e73\u8861\u6811\uff01\n\n~~\u5e73\u8861\u6811\u597d\u957f\u554a\uff0c\u4e0d\u60f3\u6253\uff08~~\n\nSTL \u4e2d\u6070\u597d\u6709\u73b0\u6210\u7684\u5e73\u8861\u6811 `set`\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5de7\u5999\u5730\u8fd0\u7528 `set` \u6765\u89e3\u51b3\u6b64\u9898\u3002\n\n\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u53ef\u4ee5\u76f4\u63a5\u7528 $\\mathrm{LCA}$ $O(\\log n)$ \u6c42\u3002\n\n\u4e8e\u662f\u6574\u9053\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n+m)\\log n)$\u3002\n\n\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u524d\u9a71\u540e\u7ee7\u7684\u8fb9\u754c\u95ee\u9898\u3002\n\n### $Code:$\n\n\u7531\u4e8e\u7b14\u8005\u7684\u7279\u5224\u6709\u4ebf\u70b9\u591a\uff0c\u6240\u4ee5\u6b64\u4ee3\u7801\u53c8\u81ed\u53c8\u957f\uff0c\u5efa\u8bae\u4e0d\u505a\u53c2\u8003\uff0c\u4f46\u60f3\u770b\u7684\u540c\u5b66\u8fd8\u662f\u53ef\u4ee5\u770b\u4e00\u4e0b\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <set>\nusing namespace std;\n#define int long long\n#define SI set <int> :: iterator\ninline int read(){\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(ch < '0' || ch > '9'){ if(ch == '-') f = -1; ch = getchar(); }\n\twhile(ch >= '0' && ch <= '9'){ x = x * 10 + (ch ^ 48); ch = getchar(); }\n\treturn x * f;\n}\nconst int N = 100010;\nstruct edge{\n\tint v, w, nxt; \n}e[N << 1];\nint head[N << 1], cnt, n, m, k, x, y, z, dep[N], dis[N], f[N][20], dfn[N], pos[N], ans;\nchar ch[10];\nset <int> st;\nSI it, it2, it3;\ninline void add(int u, int v, int w){\n\te[++cnt].v = v;\n\te[cnt].w = w;\n\te[cnt].nxt = head[u];\n\thead[u] = cnt;\n}\ninline void dfs(int u){\n\tdfn[u] = ++k;\n\tpos[k] = u;\n\tfor(register int i = head[u]; i; i = e[i].nxt){\n\t\tint v = e[i].v, w = e[i].w;\n\t\tif(dep[v]) continue;\n\t\tdep[v] = dep[u] + 1;\n\t\tdis[v] = dis[u] + w;\n\t\tf[v][0] = u;\n\t\tfor(int j = 1; j <= 17; ++j) f[v][j] = f[f[v][j - 1]][j - 1];\n\t\tdfs(v);\n\t}\n}\ninline int lca(int a, int b){\n\tif(dep[a] < dep[b]) a ^= b ^= a ^= b;\n\tfor(register int i = 17; i >= 0; --i) if(dep[f[a][i]] >= dep[b]) a = f[a][i];\n\tif(a == b) return a;\n\tfor(register int i = 17; i >= 0; --i) if(f[a][i] != f[b][i]) a = f[a][i], b = f[b][i];\n\treturn f[a][0];\n}\ninline int pat(int a, int b){\n\treturn dis[a] + dis[b] - 2 * dis[lca(a, b)];\n}\nsigned main(){\n\tn = read(); m = read();\n\tfor(register int i = 1; i < n; ++i){\n\t\tx = read(); y = read(); z = read();\n\t\tadd(x, y, z); add(y, x, z);\n\t}\n\tdfs(dep[1] = 1);\n\tfor(register int i = 1; i <= m; ++i){\n\t\tx = read(); it = st.find(dfn[x]);\n\t\tif(it == st.end()){\n\t\t\tif(st.empty()){\n\t\t\t\tst.insert(dfn[x]);\n\t\t\t\tprintf(\"%lld\\n\", ans);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tit = st.lower_bound(dfn[x]);\n\t\t\tif(it == st.end() || it == st.begin()){\n\t\t\t\tit2 = st.end(); --it2;\n\t\t\t\tans -= pat(pos[*st.begin()], pos[*it2]);\n\t\t\t\tans += pat(pos[*st.begin()], x);\n\t\t\t\tans += pat(pos[*it2], x);\n\t\t\t\tst.insert(dfn[x]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tit2 = it; --it2;\n\t\t\t\tans -= pat(pos[*it2], pos[*it]);\n\t\t\t\tans += pat(pos[*it], x);\n\t\t\t\tans += pat(pos[*it2], x);\n\t\t\t\tst.insert(dfn[x]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(st.size() == 1){\n\t\t\t\tans = 0;\n\t\t\t\tst.erase(st.begin());\n\t\t\t\tprintf(\"%lld\\n\", ans);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tit = st.lower_bound(dfn[x]);\n\t\t\tit3 = it; ++it3;\n\t\t\tif(it3 == st.end()){\n\t\t\t\tit2 = it; --it2;\n\t\t\t\tans += pat(pos[*st.begin()], pos[*it2]);\n\t\t\t\tans -= pat(pos[*st.begin()], x);\n\t\t\t\tans -= pat(pos[*it2], x);\n\t\t\t\tst.erase(dfn[x]);\n\t\t\t}\n\t\t\telse if(it == st.begin()){\n\t\t\t\tit2 = it; ++it2; it3 = st.end(); --it3;\n\t\t\t\tans += pat(pos[*it2], pos[*it3]);\n\t\t\t\tans -= pat(pos[*it2], x);\n\t\t\t\tans -= pat(pos[*it3], x);\n\t\t\t\tst.erase(dfn[x]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tit2 = it; --it2;\n\t\t\t\tans += pat(pos[*it2], pos[*it3]);\n\t\t\t\tans -= pat(pos[*it2], x);\n\t\t\t\tans -= pat(pos[*it3], x);\n\t\t\t\tst.erase(dfn[x]);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1606907033,
        "uid": 147999,
        "name": "Warriors_Cat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u5148\u770b\u7b97\u6cd5\u6807\u7b7e\uff1a\u865a\u6811\u662f\u5565\u6211\u4e0d\u77e5\u9053,\u4e0d\u8fc7\u540e\u4e24\u4e2a\u6211\u8fd8\u662f\u4f1a\u4e00\u70b9\u7684......\u8bd5\u8bd5\u770b\u5427\uff1f\uff1f\n\n1min\u540e\uff1a\u52a8\u6001\u7684\uff0c\u8fd9\u4e48\u9a9a\u7684\u5417\uff1f\n\u4e8e\u662f\u8111\u5b50\u91cc\u6709\u4e86\u7b2c\u4e00\u4e2a\u60f3\u6cd5\uff1a\u7ef4\u62a4\u4e00\u4e2a\u5b58\u5728\u6807\u8bb0\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u8fdb\u884c\u4e00\u6b21\u6811\u5f62\u8fea\u5c41\uff08\u81ea\u5df1\u8111\u8865\u53bb\uff09\n\n\u4f46\u662f\u5f88\u663e\u7136\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u70b8\u4e86\uff0c\u4e0d\u60f3\u4e86\n\n\u624b\u52a8\u64cd\u4f5c\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u4e00\u70b9\u4e1c\u897f\uff1a\u52a0\u4e00\u4e2a\u70b9\u7b49\u4e8e\u628a\u73af\u4e0a\u5728\u5b83\u5de6\u53f3\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u51cf\u53bb\uff0c\u7136\u540e\u5206\u522b\u52a0\u4e0a\u5b83\u4e0e\u8fd9\u4e24\u70b9\u7684\u8ddd\u79bb\uff01\u6839\u636e\u5bf9\u79f0\u6027\uff0c\u5220\u53bb\u4e00\u4e2a\u70b9\u4e5f\u80fd\u8fd9\u4e48\u73a9\uff01\n\n\u597d\u4e86\uff0c\u53c8\u8499\u853d\u4e86\uff1a\u6211\u600e\u4e48\u77e5\u9053\u54ea\u4e24\u4e2a\u70b9\u5728\u5de6\u53f3\u554a\uff01\uff01\uff01\uff01\n\n\u70b9\u5f00\u9898\u89e3\u4e00\u770b\uff0c\u54df\u897f\uff0cdfs\u5e8f\uff1f\n\n\u53bb\u536b\u751f\u95f4\u718f\u9676\u4e00\u4e0b\uff0c\u55ef\u597d\u50cf\u6709\u70b9\u9053\u7406\uff1f\n\n\u4e8e\u662f\u5c31\u5f88\u597d\u505a\u4e86......\u9884\u5904\u7406\u51fadfs\u5e8f\u548c\u500d\u589e\u627e\u7239\u8868\uff0c\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u5c31\u53ef\u4ee5\u7528 dep[u]+dep[v]-2*dep[u]*dep[v] \u6765\u8868\u793a\u4e86\uff08\u5f53\u7136\u6211\uff09\u5077\u61d2\u76f4\u63a5\u539f\u5730\u89e3\u51b3\u4e86\n\n\u7136\u540e\u5c31\u7528\u4e00\u4e2aset\u7ef4\u62a4\u4e00\u4e0b\u5728dfs\u5e8f\u4e0a\u7684\u524d\u9a71\u548c\u540e\u7ee7\u7136\u540e\u5c31\u5b8c\u4e8b\u4e86......\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstd::set<long long>s;\nstd::set<long long>::iterator it;\nlong long N,M,size,head[200005],seg[100005],cnt,pos[100005];\nlong long dep[100005],fa[100005][18],dis[100005][18];\nlong long lg2[100005]={-1},vis[100005];\n\nstruct node{\n\tlong long nxt,to,dis;\n}edge[200005];\n\nvoid adde(long long from,long long to,long long dis){\n\tsize++;\n\tedge[size].dis=dis;\n\tedge[size].to=to;\n\tedge[size].nxt=head[from];\n\thead[from]=size;\n}\n\nvoid prepare(long long cur,long long pa,long long dist){\n\tseg[cur]=++cnt;pos[cnt]=cur;\n\tdep[cur]=dep[pa]+1;fa[cur][0]=pa;dis[cur][0]=dist;\n\tfor(long long i=1;i<=lg2[dep[cur]];i++){\n\t\tfa[cur][i]=fa[fa[cur][i-1]][i-1];\n\t\tdis[cur][i]=dis[cur][i-1]+dis[fa[cur][i-1]][i-1];\n\t}\n\tfor(long long i=head[cur];i;i=edge[i].nxt){\n\t\tlong long v=edge[i].to;if(v==pa)continue;\n\t\tprepare(v,cur,edge[i].dis);\n\t}\n}\n\nlong long getl(long long x){\n\tit=s.lower_bound(x);\n\tif(it==s.begin())it=s.end();\n\treturn *--it;\n}\n\nlong long getr(long long x){\n\tit=s.lower_bound(x);\n\tif(++it==s.end())it=s.begin();\n\treturn *it;\n}\n\nlong long LCA(long long x,long long y){\n\tlong long ans=0;\n\tif(dep[x]<dep[y])swap(x,y);\n\twhile(dep[x]!=dep[y]){\n\t\tans+=dis[x][lg2[dep[x]-dep[y]]];\n\t\tx=fa[x][lg2[dep[x]-dep[y]]];\n\t}\n\tif(x==y)return ans;\n\tfor(long long i=lg2[dep[x]];i>=0;i--){\n\t\tif(fa[x][i]==fa[y][i])continue;\n\t\tans+=dis[x][i]+dis[y][i];\n\t\tx=fa[x][i],y=fa[y][i];\n\t}\n\treturn ans+dis[x][0]+dis[y][0];\n}\n\nint main(){\n\tscanf(\"%lld\",&N);scanf(\"%lld\\n\",&M);\n\tfor(long long i=1;i<=N;i++)lg2[i]=lg2[i/2]+1;\n\tfor(long long i=1,x,y,z;i<N;i++){\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\tadde(x,y,z);adde(y,x,z);\n\t}\n\tprepare(1,0,0);\n\tlong long ans=0;\n\tfor(long long i=1,x;i<=M;i++){\n\t\tscanf(\"%lld\",&x);\n\t\tif(!vis[x]){\n\t\t\tvis[x]^=1;\n\t\t\ts.insert(seg[x]);\n\t\t\tans+=LCA(pos[getl(seg[x])],x)+LCA(pos[getr(seg[x])],x)-LCA(pos[getl(seg[x])],pos[getr(seg[x])]);\n\t\t}\n\t\telse{\n\t\t\tvis[x]^=1;\n\t\t\tans-=LCA(pos[getl(seg[x])],x)+LCA(pos[getr(seg[x])],x)-LCA(pos[getl(seg[x])],pos[getr(seg[x])]);\n\t\t\ts.erase(seg[x]);\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1553222735,
        "uid": 109396,
        "name": "Uniecho1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "\u00a0\u663e\u7136\u7b54\u6848\u662f\u865a\u6811\u4e2d\u8fb9\u957f\u7684\u4e24\u500d.\n\u00a0\u6211\u4eec\u7528set\u6765\u7ef4\u62a4\u865a\u6811\u4e2d\u7684\u70b9\u7684dfs\u5e8f\u3002\n\u00a0\u53ef\u4ee5\u53d1\u73b0set\u4e2d\u76f8\u90bb\u70b9\u7684\u8ddd\u79bb\u7684\u548c\u518d\u52a0\u4e0a\u7b2c\u4e00\u4e2a\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u5c31\u662f\u7b54\u6848\u3002\n\u00a0\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\u3002 \u6211\u4eec\u628a\u4fee\u6539\u7684\u70b9\u7684dfs\u5e8f\u52a0\u5165set,\u6216\u4eceset\u4e2d\u5220\u9664\u3002\n\u00a0\u7136\u540e\u627e\u5230\u8fd9\u4e2a\u70b9\u7684\u4f4d\u7f6e.\u52a0\u4e0a\u6216\u51cf\u53bb\u5b83\u548c\u5b83\u65c1\u8fb9\u7684\u70b9\u7684\u8ddd\u79bb\u3002\u518d\u51cf\u53bb\u6216\u52a0\u4e0a\u5b83\u65c1\u8fb9\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u5373\u53ef\n\u4e0a\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define lb lower_bound\n#define ub upper_bound\nusing namespace std;\ntypedef long long ll;\nconst int N = 100005, M = (N << 1), K = 21;\nint n, q, ecnt = 0, idx, to[M], nxt[M], fir[N], depth[N], fa[N][K], dfn[N], pos[N];\nll dis[N], len[M], ans; bool vis[N]; set <int> S;\ntemplate <class T> void rd(T &x) {\n\tchar c = getchar(); int f = 1; x = 0;\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + c - '0';\n\tx *= f;\n}\nvoid ae(int u, int v, ll w) {to[++ecnt] = v; len[ecnt] = w; nxt[ecnt] = fir[u]; fir[u] = ecnt;}\nint lca(int u, int v) {\n\tint i; if (depth[u] < depth[v]) swap(u, v);\n\tfor (i = 20; ~i; --i) if (depth[fa[u][i]] >= depth[v]) u = fa[u][i];\n\tif (u == v) return u;\n\tfor (i = 20; ~i; --i) if (fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n\treturn fa[u][0];\n}\nll calc(int u, int v) {return dis[u] + dis[v] - dis[lca(u, v)] * 2;}\nvoid dfs(int u, int dep, int f) {\n\tint i; dfn[u] = ++idx; pos[idx] = u; depth[u] = dep; fa[u][0] = f;\n\tfor (i = fir[u]; i; i = nxt[i]) {\n\t\tint v = to[i], w = len[i];\n\t\tif (v != f) dis[v] = dis[u] + w, dfs(v, dep + 1, u);\n\t}\n}\nint main() {\n\tint i, j; rd(n); rd(q);\n\tfor (i = 1; i < n; ++i) {\n\t\tint u, v; ll w; rd(u); rd(v); rd(w);\n\t\tae(u, v, w); ae(v, u, w);\n\t}\n\tdfs(1, 1, 0); S.insert(-1); S.insert(999999);\n\tfor (i = 1; i <= 20; ++i)\n\t\tfor (j = 1; j <= n; ++j) fa[j][i] = fa[fa[j][i - 1]][i - 1];\n\tfor (i = 1; i <= q; ++i) {\n\t\tint x, p, l, r; ll tmp = 0; rd(x);\n\t\tif (!vis[x]) S.insert(dfn[x]), p = 1; else S.erase(dfn[x]), p = -1;\n\t\tvis[x] ^= 1; l = *--S.lb(dfn[x]); r = *S.ub(dfn[x]);\n\t\tif (l != -1) ans += calc(pos[l], x) * p; if (r != 999999) ans += calc(pos[r], x) * p;\n\t\tif (l != -1 && r != 999999) ans -= calc(pos[l], pos[r]) * p;\n\t\tif (S.size() != 2) tmp = calc(pos[*++S.begin()], pos[*--S.lb(999999)]);\n\t\tprintf(\"%lld\\n\", ans + tmp);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1546228530,
        "uid": 30817,
        "name": "muller",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "[P3320 [SDOI2015]\u5bfb\u5b9d\u6e38\u620f](https://www.luogu.com.cn/problem/P3320)\n\n\u865a\u6811.\n\n\u8be2\u95ee\u6709\u52a8\u6001\u5c06\u70b9\u63d2\u5165\u5230\u67e5\u8be2\u96c6\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6784\u9020\u865a\u6811.\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u6784\u9020\u65b9\u5f0f.\n\n\u6211\u4eec\u5c06\u67e5\u8be2\u96c6\u4e2d\u7684\u8282\u70b9\u6309\u7167\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6392\u597d\u5e8f\u540e\u4f9d\u6b21\u626b\u63cf\u76f8\u90bb\u7684\u70b9\u5bf9\uff0c\u6700\u7ec8\u7b54\u6848\u5373\u4e3a\u76f8\u90bb\u70b9\u5bf9\u8ddd\u79bb\u4e4b\u548c.\u6709\u4e00\u4e2a\u5c0f\u70b9\u6ce8\u610f\u4e00\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u76f8\u90bb\u7684\u70b9\u662f\u7b2c\u4e00\u4e2a\u70b9.\n\n\u81f3\u4e8e\u52a8\u6001\u5355\u70b9\u4fee\u6539\u67e5\u8be2\u96c6\uff0c\u53c8\u8981\u4fdd\u6301\u5e8f\u5217\u65f6\u95f4\u6233\u6709\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u8fd9\u91cc\u7528\u4e86$STL-set$.\u5269\u4e0b\u7684\u6ce8\u610f\u6ce8\u610f\u7ec6\u8282\u5c31\u597d\u4e86.\n\n$O(nlog^2n)$\n\n\u6838\u5fc3\u4ee3\u7801\n\n```\n\nset<ll> s;\nll res;\n\n#define It set<ll>::iterator\n//calc\u51fd\u6570\u8868\u793a\u4e24\u65f6\u95f4\u6233\u5bf9\u5e94\u70b9\u5bf9\u7684\u8ddd\u79bb\uff0c\u500d\u589e\u6c42\u5373\u53ef\ninline void Insert(ll x){\n\tif (s.empty()) return (void)(s.insert(x));\n\tif (s.size()==1){\n\t\tres=(calc(*s.begin(), x)<<1);\n\t\ts.insert(x);\n\t\treturn;\n\t}\n\tIt itr=s.lower_bound(x), itl;\n\tif (itr==s.end()) --itr, itl=s.begin();\n\telse if (itr==s.begin()) itl=--s.end();\n\telse itl=itr, --itl;\n\tres-=calc(*itl, *itr);\n\tres+=calc(*itl, x)+calc(*itr, x);\n\ts.insert(x);\n\treturn;\n}\n\ninline void Erase(ll x){\n\tIt it=s.find(x);\n\tif (s.size()<=2){\n\t\ts.erase(it); res=0;\n\t\treturn;\n\t}\n\tIt itr=it, itl=it;\n\t++itr;\n\tif (itr==s.end()) itr=s.begin(), --itl;\n\telse if (itl==s.begin()) itl=--s.end();\n\telse --itl;\n\tres-=calc(*itl, *it)+calc(*it, *itr);\n\tres+=calc(*itl, *itr);\n\ts.erase(it);\n\treturn;\n}\n\nbool book[N];\n\ninline void solve(ll x){\n\tif (book[x]) Erase(dfn[x]);\n\telse Insert(dfn[x]);\n\tbook[x]^=1;\n}\n```\n",
        "postTime": 1605000036,
        "uid": 220285,
        "name": "Saber_Master",
        "ccfLevel": 7,
        "title": "P3320 [SDOI2015]\u5bfb\u5b9d\u6e38\u620f"
    },
    {
        "content": "\u5176\u5b9e\u6211\u7684\u601d\u8def\u548c\u5927\u90e8\u5206\u9898\u89e3\u662f\u5dee\u4e0d\u591a\u7684\u3002(\u5177\u4f53\u601d\u8def\u89c1\u9898\u89e3\uff0c\u4e0b\u9762\u6211\u8bf4\u7684\u8bdd\u548c\u601d\u8def\u6ca1\u4efb\u4f55\u5173\u7cfb\uff0c\u5b8c\u5168\u5728\u8bb2pascal\u5982\u4f55\u5b9e\u73b0\uff09\n\n\u4f46\u662f\u4f5c\u4e3a\u4e00\u4e2a\u4e0d\u4f1a\u5e73\u8861\u6811\u7684\u5c0f\u83dc\u9e21\u6211\u5b9e\u5728\u60f3\u4e0d\u5230\u5982\u4f55\u6765\u7ef4\u62a4\u8fd9\u4e2a\u53ef\u6015\u7684\u5b9d\u85cf\u6751\u5e84\u5e8f\u5217\u3002\n\n\u4e8e\u662f\u6211\u627e\u5230\u4e86\u673a\u623f\u5927\u4f6c\uff0c\u8bf7\u6c42\u4ed6\u52a9\u6211\u4e00\u81c2\u4e4b\u529b\uff01\n\n\u4e8e\u662f\u2026\u2026\u6211\u5c31\u4f7f\u7528\u4e86Pascal\u7248\u7684STL\u5e93\u6765\u505a\u4e86\uff01(\u5b9e\u9645\u4e0a\u6211\u539f\u5148\u8fd8\u4ee5\u4e3a\u53ea\u6709c++\u6709\u8fd9\u4e1c\u897f)\n\n\u7136\u800c\u8fd9\u4e1c\u897f\u6bd4\u8d5b\u662f\u4e0d\u80fd\u7528\u7684(~~ccf\u592a*\u4e86~~)\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528sets\u6765\u7ef4\u62a4\u5e8f\u5217\u4e86\uff01\uff01\uff01\n\n~~\u8fd9\u662f\u6211\u76ee\u524d\u505a\u8fc7\u6700\u88c5\u903c\u7684\u9898\u76ee\u4e86\u2026\u2026~~\n\n```pascal\nuses Gset,Gutil,math;\ntype\n  cmp=specialize Tless<longint>;\n  sets=specialize Tset<int64,cmp>;\n  rec=record\n  x,next,dis:longint;\n  end;\nvar f,d:array[0..100000,0..20] of int64;\n    dian,dep,h,xu:array[0..100000] of longint;\n    b:array[0..100000] of boolean;\n    q:array[0..200000] of rec;\n    k1,n,m,i,x,y,z,u,cnt1,cnt,k:longint;\n    ans:int64;\n    s:sets;\nprocedure ad(x,y,z:longint);//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\nbegin\n  inc(cnt);\n  q[cnt].x:=x;q[cnt].dis:=z;q[cnt].next:=h[y];\n  h[y]:=cnt;\nend;\nprocedure dfs(k,l,dist:longint);//\u65e5\u5e38dfs\u9884\u5904\u7406\nvar t,i:longint;\nbegin\n  inc(k1);\n  dian[k1]:=k;xu[k]:=k1;//\u5176\u5b9e\u6211\u89c9\u5f97\u8fd9\u6837\u5199\u66f4\u65b9\u4fbf\u4e00\u70b9(\u5728\u7a7a\u95f4\u4e0d\u70b8\u7684\u60c5\u51b5\u4e0b)\n  dep[k]:=dep[l]+1;\n  f[k,0]:=l;d[k,0]:=dist;\n  for i:=1 to trunc(log2(dep[k])) do\n  begin\n    f[k,i]:=f[f[k,i-1],i-1];\n    d[k,i]:=d[k,i-1]+d[f[k,i-1],i-1];\n  end;\n  t:=h[k];\n  while t>0 do\n  begin\n    if q[t].x<>l then dfs(q[t].x,k,q[t].dis);\n    t:=q[t].next;\n  end;\nend;\nfunction lca(x,y:longint):int64;//lca(x,y)\u8868\u793ax\u4e0ey\u7684\u8ddd\u79bb\nvar i,t:longint;\nbegin\n  lca:=0;if (x=0)or(y=0) then exit(0);\n  if dep[x]<dep[y] then\n  begin\n    t:=x;x:=y;y:=t;\n  end;\n  for i:=20 downto 0 do\n  begin\n    if dep[f[x,i]]>=dep[y] then\n    begin\n      lca:=lca+d[x,i];\n      x:=f[x,i];\n    end;\n    if x=y then exit;\n  end;\n  for i:=20 downto 0 do\n    if f[x,i]<>f[y,i] then\n    begin\n      lca:=lca+d[x,i]+d[y,i];\n      x:=f[x,i];\n      y:=f[y,i];\n    end;\n  lca:=lca+d[x,0]+d[y,0];\nend;\nbegin\n  readln(n,m);ans:=0;\n  s:=sets.create;\n  s.insert(-maxlongint);\n  s.insert(maxlongint);\n  for i:=1 to n-1 do\n  begin\n    readln(x,y,z);\n    ad(x,y,z);\n    ad(y,x,z);\n  end;\n  dfs(1,0,0);\n  for i:=1 to m do\n  begin\n    readln(u);\n    if b[u] then\n    begin\n      x:=s.findgreater(xu[u]).data;if x=maxlongint then x:=s.findgreater(-maxlongint).data;\n      y:=s.findless(xu[u]).data;if y=-maxlongint then y:=s.findless(maxlongint).data;//\u627e\u524d\u9a71\u548c\u540e\u7ee7\n      if x=maxlongint then x:=0 else x:=dian[x];\n      if y=-maxlongint then y:=0 else y:=dian[y];\n      ans:=ans-lca(x,u)-lca(y,u)+lca(x,y);//\u66f4\u65b0\u7b54\u6848\n      s.delete(xu[u]);b[u]:=false;dec(cnt1);\n    end else\n    begin\n      x:=s.findgreaterEqual(xu[u]).data;if x=maxlongint then x:=s.findgreater(-maxlongint).data;\n      y:=s.findlessEqual(xu[u]).data;if y=-maxlongint then y:=s.findless(maxlongint).data;//\u540c\u4e0a\n      if x=maxlongint then x:=0 else x:=dian[x];\n      if y=-maxlongint then y:=0 else y:=dian[y];\n      ans:=ans+lca(x,u)+lca(y,u)-lca(x,y);//\u540c\u4e0a\n      s.insert(xu[u]);b[u]:=true;inc(cnt1);\n    end;\n    writeln(ans);\n  end;\nend.\n\n\n```\n",
        "postTime": 1579266615,
        "uid": 120911,
        "name": "Lynkcat",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011P3320 [SDOI2015]\u5bfb\u5b9d\u6e38\u620f"
    },
    {
        "content": "~~\u901a\u8fc7\u6807\u7b7e\u53ef\u4ee5\u5f97\u77e5\u8ddf\u865a\u6811\u6709\u5173~~\n\n\u8003\u8651\u5efa\u51fa\u4e86\u865a\u6811\u4e4b\u540e\u600e\u4e48\u505a\n\n\u663e\u7136\u865a\u6570\u4e0a\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u662f\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u4ece\u4efb\u610f\u70b9\u51fa\u53d1\uff0c\u904d\u5386\u6240\u6709\u53f6\u5b50\u518d\u56de\u6765\u7684\u957f\u5ea6\u5c31\u662f\u6240\u6709\u8fb9\u6743\u957f\u5ea6\u503c\u548c\u7684\u4e24\u500d\uff0c\u4e14\u904d\u5386\u9014\u4e2d\u4f1a\u904d\u5386\u6240\u6709\u8282\u70b9\u3002\u56e0\u4e3a\u865a\u6811\u662f\u6839\u636e dfs \u5e8f\u5efa\u7acb\u7684\uff0c\u4e14\u865a\u6811\u7684 dfs \u5e8f\u548c\u539f\u6811\u4e00\u6837\uff0c\u6240\u4ee5\u5c06\u865a\u6811\u4e0a\u7684\u8282\u70b9\u6309\u539f\u6811 dfs \u5e8f\u6392\u5e8f\uff0c\u7b54\u6848\u5c31\u662f $dis(u_1,u_2)+dis(u_2,u_3)+...+dis(u_m,u_1)$\n\n\u4e8e\u662f\u6211\u4eec\u60ca\u559c\u5730\u53d1\u73b0\uff0c\u6839\u672c\u4e0d\u9700\u8981\u5efa\u865a\u6811\uff0c\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 $x$ \u76f8\u5f53\u4e8e\u5c06 $dis(u_i,u_{i+1})$ \u6539\u4e3a $dis(u_i+x)+dis(u_{i+1},x)$\uff0c\u5176\u4e2d $u_i,u_{i+1}$ \u5206\u522b\u662f $x$ \u5728 dfs \u5e8f\u4e0a\u7684\u524d\u9a71\u548c\u540e\u7ee7\n\n\u4e8e\u662f\u5c06\u6240\u6709\u8282\u70b9\u6254\u5230\u6309 dfs \u5e8f\u6392\u5e8f\u7684 set \u91cc\u5c31\u53ef\u4ee5\u4e86\uff0c\u603b\u590d\u6742\u5ea6 $O((n+q)\\log n)$\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\n\n```cpp\n// Problem: #2182. \u300cSDOI2015\u300d\u5bfb\u5b9d\u6e38\u620f\n// Contest: LibreOJ\n// URL: https://loj.ac/p/2182\n// Memory Limit: 256 MB\n// Time Limit: 2000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\n#define fi first\n#define se second\n#define rg register\n#define mp make_pair\n#define pb push_back\n#define pf push_front\n\n#define rep(i, s, t) for (rg int i = s; i <= t; i++)\n#define per(i, s, t) for (rg int i = t; i >= s; i--)\n#define OK cerr << \"OK!\\n\"\n\n/*\n * fastio::qread(...) read int/LL\n * fastio::qwrite(x, (char)y) write int/LL and char\n */\n\nnamespace fastio {\nconst int SIZE = (1 << 20) + 1;\nchar ibuf[SIZE], *iS, *iT, obuf[SIZE], *oS = obuf, *oT = obuf + SIZE - 1;\nchar _st[55];\nint _qr = 0;\n\ninline char getchar() {\n  return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin),\n          (iS == iT ? EOF : *iS++) : *iS++);\n}\ninline void qread() {}\ntemplate <typename T1, typename... T2>\ninline void qread(T1 &x, T2 &...ls) {\n  x = 0;\n  rg char ch = ' ';\n  rg int ps = 1;\n  while (!isdigit(ch) && ch != '-') ch = getchar();\n  if (ch == '-') ps = -1, ch = getchar();\n  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n  x *= ps;\n  qread(ls...);\n}\n\ninline void flush() {\n  fwrite(obuf, 1, oS - obuf, stdout);\n  oS = obuf;\n  return;\n}\ninline void putchar(char _x) {\n  *oS++ = _x;\n  if (oS == oT) flush();\n}\ntemplate <typename T>\ninline void qwrite(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x < 10) return putchar('0' + x), void();\n  qwrite(x / 10), putchar('0' + (x % 10));\n}\n\ntemplate <typename T>\ninline void qwrite(T x, char ch) {\n  qwrite(x), putchar(ch);\n}\n};  // namespace fastio\n\n#ifndef ONLINE_JUDGE\n\nvoid debug(const char *s) { cerr << s; }\ntemplate <typename T1, typename... T2>\nvoid debug(const char *s, const T1 x, T2... ls) {\n  int p = 0;\n  while (*(s + p) != '\\0') {\n    if (*(s + p) == '{' && *(s + p + 1) == '}') {\n      cerr << x;\n      debug(s + p + 2, ls...);\n      return;\n    }\n    cerr << *(s + p++);\n  }\n}\n\n#else\n#define debug(...) void(0)\n#endif\n\nconst ll mod = 1e9 + 7;\n// const ll mod = 1e9 + 9;\n// const ll mod = 19260817;\n// const ll mod = 998244353;\n\ntemplate<typename T> inline void chkadd(T& x, T y) { x = x + y >= mod ? x + y - mod : x + y; }\ntemplate<typename T> inline void chkadd(T& x, T y, T z) { x = y + z >= mod ? y + z - mod : y + z; }\ntemplate<typename T> inline void chkmns(T& x, T y) { x = x - y < 0 ? x - y + mod : x - y; }\ntemplate<typename T> inline void chkmns(T& x, T y, T z) { x = y - z < 0 ? y - z + mod : y - z; }\ntemplate<typename T> inline void chkmax(T& x, T y) { x = x < y ? y : x; }\ntemplate<typename T> inline void chkmax(T& x, T y, T z) { x = y > z ? y : z; }\ntemplate<typename T> inline void chkmin(T& x, T y) { x = x < y ? x : y; }\ntemplate<typename T> inline void chkmin(T& x, T y, T z) { x = y < z ? y : z; }\n\nconst int N = 1e5 + 5;\n\nvector<pair<int, int> > adj[N];\nll dis[N];\nint n, q;\nint dep[N], anc[N][21], dfn[N], dfncnt;\nset<pair<int, int> > node;\nll ans = 0;\n\ninline void dfs(int u, int fa, int lw) {\n\tdep[u] = dep[fa] + 1;\n\tanc[u][0] = fa;\n\tdis[u] = dis[fa] + lw;\n\trep(i, 1, 20) anc[u][i] = anc[anc[u][i-1]][i-1];\n\tdfn[u] = ++dfncnt;\n\tfor(auto e : adj[u]) {\n\t\tif(e.fi != fa) dfs(e.fi, u, e.se);\n\t}\n}\n\ninline int LCA(int x, int y) {\n\tif(dep[x] < dep[y]) swap(x, y);\n\tper(i, 0, 20) if(dep[anc[x][i]] >= dep[y]) x = anc[x][i];\n\tif(x == y) return x;\n\tper(i, 0, 20) if(anc[x][i] != anc[y][i]) x = anc[x][i], y = anc[y][i];\n\treturn anc[x][0];\n}\n\ninline ll getdis(int x, int y) {\n\treturn dis[x] + dis[y] - 2 * dis[LCA(x, y)];\n}\n\n\nint main() {\n\tfastio::qread(n, q);\n\trep(i, 1, n-1) {\n\t\tint u, v, w;\n\t\tfastio::qread(u, v, w);\n\t\tadj[u].pb(mp(v, w));\n\t\tadj[v].pb(mp(u, w));\n\t}\n\tdfs(1, 0, 0);\n\twhile(q--) {\n\t\tint x; fastio::qread(x);\n\t\tif(node.count(mp(dfn[x], x))) {\n\t\t\tif(node.size() == 1) {\n\t\t\t\t\n\t\t\t} else if(node.size() == 2) {\n\t\t\t\tans = 0;\n\t\t\t} else {\n\t\t\t\tauto it = node.find(mp(dfn[x], x));\n\t\t\t\tauto nd1 = it, nd2 = it;\n\t\t\t\tif(it == node.begin()) {\n\t\t\t\t\tnd1 = --node.end();\n\t\t\t\t\tnd2 = ++it;\n\t\t\t\t} else if(it == --node.end()) {\n\t\t\t\t\tnd1 = --it;\n\t\t\t\t\tnd2 = node.begin();\n\t\t\t\t} else {\n\t\t\t\t\tnd1 = --it; ++it;\n\t\t\t\t\tnd2 = ++it;\n\t\t\t\t}\n\t\t\t\tint u1 = nd1 -> se;\n\t\t\t\tint u2 = nd2 -> se;\n\t\t\t\tans -= getdis(u1, x);\n\t\t\t\tans -= getdis(u2, x);\n\t\t\t\tans += getdis(u1, u2);\n\t\t\t}\n\t\t\tnode.erase(mp(dfn[x], x));\n\t\t} else {\n\t\t\tif(node.size() == 0) {\n\t\t\t\tnode.insert(mp(dfn[x], x));\n\t\t\t} else if(node.size() == 1) {\n\t\t\t\tans += 2 * getdis(node.begin() -> se, x);\n\t\t\t\tnode.insert(mp(dfn[x], x));\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tnode.insert(mp(dfn[x], x));\n\t\t\t\t\n\t\t\t\tauto it = node.find(mp(dfn[x], x));\n\t\t\t\tauto nd1 = it, nd2 = it;\n\t\t\t\tif(it == node.begin()) {\n\t\t\t\t\tnd1 = --node.end();\n\t\t\t\t\tnd2 = ++it;\n\t\t\t\t} else if(it == --node.end()) {\n\t\t\t\t\tnd1 = --it;\n\t\t\t\t\tnd2 = node.begin();\n\t\t\t\t} else {\n\t\t\t\t\tnd1 = --it; ++it;\n\t\t\t\t\tnd2 = ++it;\n\t\t\t\t}\n\t\t\t\tint u1 = nd1 -> se;\n\t\t\t\tint u2 = nd2 -> se;\n\t\t\t\t\n\t\t\t\tans += getdis(u1, x);\n\t\t\t\tans += getdis(u2, x);\n\t\t\t\tans -= getdis(u1, u2);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfastio::qwrite(ans, '\\n');\n\t}\n\tfastio::flush();\n\treturn 0;\n}\n\n```",
        "postTime": 1619924314,
        "uid": 95103,
        "name": "KellyFrog",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3320 [SDOI2015]\u5bfb\u5b9d\u6e38\u620f"
    },
    {
        "content": "## \u9898\u610f\uff1a\n\n- \u7ed9\u4e00\u9897n\u4e2a\u8282\u70b9\u8fb9\u5e26\u6743\u7684\u6811\uff0cm\u6b21\u64cd\u4f5c\u6bcf\u6b21\u4f7f\u4e00\u4e2a\u70b9\u7531\u975e\u5173\u952e\u70b9\u548c\u5173\u952e\u70b9\u76f8\u4e92\u8f6c\u6362\u3002\n\n- \u6bcf\u6b21\u64cd\u4f5c\u540e\u8f93\u51fa\u4f7f\u6240\u6709\u5173\u952e\u70b9\u8fde\u901a\u6743\u503c\u548c\u6700\u5c0f\u8def\u5f84\u6743\u503c\u548c\u76842\u500d\n\n## \u601d\u8def\uff1a\n\n1. **\u5148\u770bn\u4e2a\u70b9\u7684\u6700\u77ed\u8fde\u901a\u3002**\n\n\t\n\t\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u8fd9\u68f5\u6811\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u6233\uff0c\u7528\u4e24\u4e2a\u6570\u7ec4\u5c06\u6bcf\u4e2a\u70b9\u7684\u65f6\u95f4\u6233\u4e0e\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u6620\u5c04\u4e00\u4e0b\uff08\u5728dfs\u5efa\u6811\u65f6\u5373\u53ef\u5b9e\u73b0\uff09\u3002\u6bcf\u6b21\u8be2\u95ee\u5c06\u6240\u6709\u5173\u952e\u70b9\u6309\u65f6\u95f4\u6233\u5927\u5c0f\u6392\u6210\u4e00\u5708\uff0c\u5e76\u7d2f\u52a0\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u5373\u5f97\u5230\u7ed3\u679c\u3002\n    \n1. **\u6c42\u76f8\u90bb\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u3002**\n\n\t  $fv[i]$\u8868\u793ai\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u957f\u5ea6\uff08\u4ea6\u53ef\u5728dfs\u4e0e\u5904\u7406\u4e2d\u5f97\u5230\uff09\u3002\n      \n\t\u6240\u4ee5\uff1a\n    \n      $distance(x,y)=fv[x]+fv[y]-2\\times fv[lca(x,y)]$\u3002\n      \n      \u6211\u4e0d\u4f1a\u5256\u5206\u6c42lca\uff0c\u6240\u4ee5\u7528\u7684\u662f\u500d\u589e\u3002\n      \n1. **\u65f6\u95f4\u6233\u7684\u7ef4\u62a4\u3002**\n\n\t\u6700\u5f00\u59cb\u60f3\u7684\u662f\u6bcf\u6b21dfs\u5b58\u4e0b\u5173\u952e\u70b9\u518d\u5904\u7406\u6bcf\u6b21\u64cd\u4f5c$O(n)$,\u663e\u7136\u4f1aTLE\u3002\n    \n    \u4e8e\u662f\u60f3\u7740\u7528\u5e73\u8861\u6811\uff0c\u4f46\u7801\u91cf\u592a\u5927\uff0c\u53ea\u597d\u7528STL set\u3002\u6bcf\u6b21\u64cd\u4f5c\uff0c\u82e5\u589e\u52a0\u4e00\u4e2a\u5173\u952e\u70b9x\uff0c\u5219\u628a\u5b83\u63d2\u5165\u5230set\u4e2d\u5408\u9002\u7684\u5730\u65b9,\u8bbe\u524d\u540e\u8282\u70b9\t\u5206\u522b\u4e3al\u548cr\uff0c\u5c31\u4ee4ans\u51cf\u53bb $distance(l,r)$\uff0c\u52a0\u4e0a$distance(l,x)$\u548c$distance(x,r)$\u3002\u5220\u53bb\u4e00\u4e2a\u5173\u952e\u70b9\u7684\u64cd\u4f5c\u540c\u7406\u3002\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O((n+m)\\log n)$\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <set>\nusing namespace std;\nint n,m,x,y,z,fs[100001],nex[200000],tot,va[200000],go[200000],f[100005][20],dep[100001];\nint seg[100001],rev[100001];\nlong long fv[100001],ans,tem;\nint t,a[100001];\nset<int>::const_iterator itor;\nset<int>s;\nset<int>::iterator it;\ninline void Add(int u,int v,int z){\n    nex[++tot]=fs[u];fs[u]=tot;va[tot]=z;go[tot]=v;\n    nex[++tot]=fs[v];fs[v]=tot;va[tot]=z;go[tot]=u;\n}\nvoid deal(int u,int fa){\n\tseg[u]=++seg[0];\n\trev[seg[u]]=u;//\u4f4d\u7f6e\u7684\u6620\u5c04\n    dep[u]=dep[fa]+1;\n    for(int i = 0;i<19;i++)\n        f[u][i+1]=f[f[u][i]][i];\n\n    for(int e=fs[u];e;e=nex[e]){\n        int v=go[e];\n        if(v==fa)continue;\n        f[v][0]=u;\n        fv[v]=fv[u]+va[e];//\u9884\u5904\u7406v\u5230\u6839\u7684\u8d39\u7528\n        deal(v,u);\n    }\n}\ninline int LCA(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);\n    for(int i  =18;i>=0;i--){\n        if(dep[f[x][i]]>=dep[y])x=f[x][i];\n        if(x==y)return x;\n    }\n    for(int i = 18;i>=0;i--)\n        if(f[x][i]!=f[y][i]){\n                x=f[x][i];y=f[y][i];\n        }\n\n    return f[x][0];\n}\ninline long long dis(int x,int y){\n\treturn fv[rev[x]]+fv[rev[y]]-2*fv[LCA(rev[x],rev[y])];\n}\ninline void Out(int t) {//\u5220\u9664\u4e00\u4e2a\u5173\u952e\u70b9\n  if (s.size() <= 2) {\n    ans = 0; \n    s.erase(t); \n    return;\n  }\n  if (s.size() == 3) {\n    s.erase(t);\n    ans = dis(*s.begin(),*(--s.end()))*2;\n    return;\n  }\n  it = s.lower_bound(t);\n  x = (it == s.begin()) ? *(--s.end()) : *(--it);\n  it = s.lower_bound(t);\n  y = (it == --s.end()) ? *(s.begin()) : *(++it);\n  ans -= dis(x, t) + dis(t, y) - dis(x, y);\n  s.erase(t);\n}\n\ninline void In(int t) {//\u63d2\u5165\u4e00\u4e2a\u5173\u952e\u70b9\n  if (s.size() == 0) {\n    ans = 0;\n    s.insert(t);\n    return;\n  }\n  if (s.size() == 1) {\n    ans = 2 * dis(t,*s.begin());\n    s.insert(t);\n    return;\n  }\n  s.insert(t);\n  it = s.lower_bound(t);\n  x = (it == s.begin()) ? *(--s.end()) : *(--it);\n  it = s.lower_bound(t);\n  y = (it == --s.end()) ? *(s.begin()) : *(++it);\n  ans += dis(x, t) + dis(t, y) - dis(x, y);\n}\nint main(){\n    cin>>n>>m;\n    for(int i = 1;i<n;i++){\n        scanf(\"%d%d%d\",&x,&y,&z);\n        Add(x,y,z);\n    }\n    deal(1,0);\n    for(int i = 1;i<=m;i++){\n        scanf(\"%d\",&t);\n        a[t]^=1;//1\u53d80\uff0c0\u53d81\n        \n        if(a[t]==1)\n        \tIn(seg[t]);\n\t\telse\n\t\t\tOut(seg[t]);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1616134348,
        "uid": 51061,
        "name": "\u5e7b\u79bbian",
        "ccfLevel": 0,
        "title": "P3320 [SDOI2015]\u5bfb\u5b9d\u6e38\u620f"
    },
    {
        "content": "\u65b9\u6cd5\uff1aLCA+\u65f6\u95f4\u6233+set\n\n\u4f7f\u7528\u65f6\u95f4\u6233\uff0c\u5e76\u4e14\u6309\u7167\u65f6\u95f4\u6233\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u628a\u6709\u5b9d\u7269\u7684\u6751\u5e84\u8282\u70b9\u6392\u6210\u4e00\u5708\uff08\u9996\u5c3e\u76f8\u8fde\uff09\uff0c\u5e76\u4e14\u7d2f\u52a0\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u6700\u540e\u5f97\u5230\u7684\u6070\u597d\u5c31\u662f\u7b54\u6848\u3002\n\n\u53ef\u4ee5\u7528set\u8fdb\u884c\u7ef4\u62a4\uff0c\u6bcf\u6b21\u6709\u4e00\u4e2a\u65b0\u7684t\u70b9\u6765\u7684\u65f6\u5019\uff0c\u5728set\u4e2d\u5bfb\u627et\u7684le\u548cri\u70b9\uff0c\u5982\u679c\u662finsert\u64cd\u4f5c\uff0c\u90a3\u4e48\n$ans+=path(le,t)+(t,ri)-path(le,ri)$\n\n\u53cd\u4e4b\u5219$ans+=-path(le,t)-(t,ri)+path(le,ri)$\n\n\u5176\u4e2dpath\u7684\u8ba1\u7b97\u4f7f\u7528LCA\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O((N+M)log(N)$\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC opitimize(2)\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll,ll> PLL; \nconst int N=1e5+5;\nll n,tot,m,cnt,t=18,ans;\nll head[N],Next[N<<1],des[N<<1],len[N<<1];\nll dfn[N],dep[N],d[N],f[N][20];\nset<PLL> s;\nset<PLL>::iterator it,it2,le,ri;\ninline ll read()\n{\n    ll s=0,f=1; char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-') f=-1;ch=getchar();}\n    while(isdigit(ch)) s=s*10+(ch^48),ch=getchar();\n    return s*f;\n}\ninline void write(ll x)\n{\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}\ninline void add(ll a,ll b,ll c)\n{\n\tNext[++tot]=head[a]; des[tot]=b; len[tot]=c;\n\thead[a]=tot;\n}\nll dfs(ll x)\n{\n\tdfn[x]=++cnt;\n\tfor(ll i=head[x]; i; i=Next[i])\n\t{\n\t\tll y=des[i],z=len[i];\n\t\tif(dep[y]) continue;\n\t\tdep[y]=dep[x]+1;\n\t\td[y]=d[x]+z;\n\t\tf[y][0]=x;\n\t\tfor(ll j=1; j<=t; j++)\n\t\t    f[y][j]=f[f[y][j-1]][j-1];\n\t\tdfs(y);\n\t}\n}\ninline ll lca(ll x,ll y)\n{\n\tif(dep[x]>dep[y]) swap(x,y);//\u4fdd\u8bc1x\u7684\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8ey\n\tfor(ll i=t; i>=0; i--)\n\t    if(dep[f[y][i]]>=dep[x]) y=f[y][i];\n\tif(y==x) return x;\n\tfor(ll i=t; i>=0; i--)\n\t\tif(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\ninline ll path(ll x,ll y)\n{\n\treturn d[x]+d[y]-2*d[lca(x,y)];\n}\ninline void Insert(ll x)\n{\n\ts.insert({dfn[x],x});\n\tit2=it=s.find({dfn[x],x});\n\tif(it==s.begin()) le=--s.end();\n\telse le=--it;\n\tit=it2;\n\tif(it==--s.end()) ri=s.begin();\n\telse ri=++it;\n\tit=it2;\n\tll a=(*le).second,b=(*it).second,c=(*ri).second;\n\tans+=path(a,b)+path(b,c);\n\tans-=path(a,c);\n}\ninline void del(ll x)\n{\n\tit2=it=s.find({dfn[x],x});\n\tif(it==s.begin()) le=--s.end();\n\telse le=--it;\n\tit=it2;\n\tif(it==--s.end()) ri=s.begin();\n\telse ri=++it;\n\tit=it2;\n\tll a=(*le).second,b=(*it).second,c=(*ri).second;\n\tans-=path(a,b)+path(b,c);\n\tans+=path(a,c);\n\ts.erase({dfn[x],x});\n}\nint main()\n{\n\tn=read(); m=read();\n\tfor(ll i=1; i<n; i++)\n\t{\n\t\tll a=read(),b=read(),c=read();\n\t\tadd(a,b,c); add(b,a,c);\n\t}\n\tdep[1]=1; \n\tdfs(1);\n\tfor(ll i=1; i<=m; i++)\n\t{\n\t\tint t=read();\n\t\tif(s.find({dfn[t],t})!=s.end()) del(t);\n\t\telse Insert(t);\n\t\tif(s.size()<=1) puts(\"0\");\n\t\telse write(ans),printf(\"\\n\");\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1593781709,
        "uid": 91375,
        "name": "crh1272336175",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "> ## \u601d\u8def\uff1a\n\n> \u5148\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u4ee5\u65f6\u95f4\u5206\u5272\u64cd\u4f5c\uff0c\u7528\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u5b9d\u85cf\u5230\u6839\u7684\u8986\u76d6\u533a\u95f4\uff08\u53bb\u91cd\uff09\u7684\u957f\u5ea6\u5e76\u67d3\u8272\uff0c\u518d\u51cf\u53bb\u6240\u6709\u5b9d\u85cf$lca$\u5230\u6839\u7684\u8ddd\u79bb\u540e$*2$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$\n\n> $ps$:\u7ef4\u62a4\u65f6\u76f4\u63a5\u5bfb\u627e\u5f53\u524d\u8282\u70b9\u6700\u8fd1\u7684\u67d3\u8272\u7956\u5148\n\n> $\\mathfrak{Talk\\ is\\ cheap,show\\ you\\ the\\ code.}$\n\n```cpp\n#include<cstdio>\n#include<stack>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n# define read read1<int>()\n# define Type template<typename T>\nType inline const T read1(){\n    T m=0;\n    char k=getchar();\n    while(('0'>k||k>'9')&&(k!='-'))k=getchar();\n    const bool f=(k=='-'?1:0);\n    if(f)k=getchar();\n    while('0'<=k&&k<='9')m=(m<<3)+(m<<1)+(k^48),k=getchar();\n    return f?-m:m;\n}\n# define ll long long\n# define N 100000\nint s,m,now[N|1],fa[N|1],top[N|1],siz[N|1],tm[N|1];\nll h[N|1];\nvector<int>G[N|1],V[N|1],tr[N<<2|1];\nvoid add(int l,int r,int dl,int dr,int v,int d){\n    if(l==dl&&r==dr){\n        tr[d].push_back(v);\n        return;\n    }\n    int mid=l+r>>1;\n    if(dr<=mid)add(l,mid,dl,dr,v,d<<1);\n    else if(mid<dl)add(mid+1,r,dl,dr,v,d<<1|1);\n    else add(l,mid,dl,mid,v,d<<1),add(mid+1,r,mid+1,dr,v,d<<1|1);\n}\nvoid dfs1(int n,int f){\n    fa[n]=f;\n    siz[n]=1;\n    for(int i=0;i<G[n].size();++i)\n        if(G[n][i]^f)\n            h[G[n][i]]=h[n]+V[n][i],dfs1(G[n][i],n),siz[n]+=siz[G[n][i]];\n}\nvoid dfs2(int n,int to){\n    top[n]=to;\n    int son=-1;\n    for(int i=0;i<G[n].size();++i)\n        if(G[n][i]^fa[n]&&(!~son||siz[G[n][i]]>siz[G[n][son]]))\n            son=i;\n    for(int i=0;i<G[n].size();++i)\n        if(G[n][i]^fa[n])\n            if(i^son)dfs2(G[n][i],G[n][i]);\n            else dfs2(G[n][i],to);\n}\nll ans[N|1],t;\nint tot;\nstack<pair<int,int> >sta[30];\nvoid solve(int n){\n    if(h[tm[top[n]]]>=h[n])return;\n    int i=n;\n    while(i&&!tm[top[i]])tm[top[i]]=i,i=fa[top[i]];\n    sta[tot].push(make_pair(n,tm[top[i]]));\n    t+=h[n]-min(h[tm[top[i]]],h[i]);\n    if(i&&h[tm[top[i]]]<=h[i])tm[top[i]]=i;\n    // printf(\"-<%d %d\\n\",n,tm[top[i]]);\n}\nint lca(int l,int r){\n    while(top[l]!=top[r]){\n        if(h[top[l]]>h[top[r]])swap(l,r);\n        r=fa[top[r]];\n    }\n    return h[l]>h[r]?r:l;\n}\nvoid back(int n,int l){\n    int i=n;\n    while(top[i]!=top[l])tm[top[i]]=0,i=fa[top[i]];\n    t-=h[n]-min(h[l],h[i]);\n    tm[top[i]]=l;\n    // printf(\"->%d %d\\n\",n,l);\n}\nvoid dfs(int d,int l,int r,int lc){\n    for(int i=0;i<tr[d].size();++i){\n        lc=lc?lca(lc,tr[d][i]):tr[d][i];\n        solve(tr[d][i]);\n    }\n    ++tot;\n    if(l==r)ans[l]=t-h[lc]<<1;\n    else{\n        int mid=l+r>>1;\n        dfs(d<<1,l,mid,lc);\n        dfs(d<<1|1,mid+1,r,lc);\n    }\n    --tot;\n    while(!sta[tot].empty())back(sta[tot].top().first,sta[tot].top().second),sta[tot].pop();\n    // printf(\"%d %d:%lld %d\\n\",l,r,t,lc);\n    // for(int i=1;i<=s;++i)\n    //     printf(\"%d \",tm[i]);\n    // putchar('\\n');\n}\nint main(){\n    s=read,m=read;\n    for(int i=1;i<s;++i){\n        int u=read,v=read,t=read;\n        G[u].push_back(v);\n        V[u].push_back(t);\n        G[v].push_back(u);\n        V[v].push_back(t);\n    }\n    for(int i=1;i<=m;++i){\n        int k=read;\n        if(now[k]){\n            add(1,m,now[k],i-1,k,1);\n            now[k]=0;\n        }\n        else now[k]=i;\n    }\n    for(int i=1;i<=s;++i)\n        if(now[i])\n            add(1,m,now[i],m,i,1);\n    dfs1(1,0);\n    // cout<<fa[1]<<endl;\n    dfs2(1,1);\n    dfs(1,1,m,0);\n    for(int i=1;i<=m;++i)\n        printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1590223658,
        "uid": 108067,
        "name": "\u4e1b\u96e8",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    },
    {
        "content": "# \u5bfb\u5b9d\u6e38\u620f\n\n\u9898\u89e3\uff1a\n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u7ed9\u5b9a\u4e86\u4e00\u4e9b\u70b9\u6709\u5b9d\u7269\u7684\u8bdd\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u6811\u94fe\u7684\u5e76\u3002\n\n\u6811\u94fe\u7684\u5e76\u7684\u6c42\u6cd5\u5c31\u662f\u628a\u6240\u6709\u70b9\u6309\u7167$dfs$\u5e8f\u6392\u5e8f\u7136\u540e\u76f8\u52a0\u518d\u51cf\u53bb\u76f8\u90bb\u4e4b\u95f4\u7684$lca$\u3002\n\n\u6545\u6b64\u6211\u4eec\u6309\u7167$dfs$\u5e8f\u7ef4\u62a4\u4e00\u4e2a\u5e73\u8861\u6811\u3002\n\n\u6bcf\u6b21\u5f80\u91cc\u63d2\u5165\u8282\u70b9\u5373\u53ef\u3002\n\n\u5b9e\u65f6\u7528$lca$\u66f4\u65b0\u7b54\u6848\uff0c\u590d\u6742\u5ea6$O(nlogn)$\u3002\n\nCode:\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <set>\n#define N 100010 \nusing namespace std; typedef long long ll;\nset<int>s;\nint head[N],nxt[N<<1],to[N<<1],tot; ll val[N<<1];\nll dis[N],ans; int dic[N],f[22][N],size[N],re[N],dep[N],cnt;\nbool vis[N];\ninline char nc() {static char *p1,*p2,buf[100000]; return (p1==p2)&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;}\nll rd() {ll x=0; char c=nc(); while(!isdigit(c)) c=nc(); while(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=nc(); return x;}\ninline void add(int x,int y,ll z) {to[++tot]=y; val[tot]=z; nxt[tot]=head[x]; head[x]=tot;}\nvoid dfs(int pos,int fa)\n{\n\tf[0][pos]=fa; for(int i=1;i<=20;i++) f[i][pos]=f[i-1][f[i-1][pos]];\n\tdep[pos]=dep[fa]+1; dic[pos]=++cnt,re[cnt]=pos; size[pos]=1; for(int i=head[pos];i;i=nxt[i]) if(to[i]!=fa)\n\t{\n\t\tdis[to[i]]=dis[pos]+val[i]; dfs(to[i],pos); size[pos]+=size[to[i]];\n\t}\n}\nint lca(int x,int y)\n{\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=20;~i;i--) if(dep[f[i][x]]>=dep[y]) x=f[i][x];\n\tif(x==y) return x;\n\tfor(int i=20;~i;i--) if(f[i][x]!=f[i][y]) x=f[i][x],y=f[i][y];\n\treturn f[0][x];\n}\ninline void output()\n{\n\tset<int>::iterator it=s.begin();\n\tfor(;it!=s.end();it++) printf(\"%d \",*it); puts(\"\");\n}\nint main()\n{\n\tint n=rd(),m=rd(); for(int i=1;i<n;i++) {int x=rd(),y=rd(); ll z=rd(); add(x,y,z); add(y,x,z);}\n\tdfs(1,1);\n\t// for(int i=1;i<=n;i++) printf(\"%d %d %d %d %d %d\\n\",re[dic[i]],dis[i],dic[i],dep[i],size[i],f[0][i]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=rd();\n\t\tif(s.empty()) {s.insert(dic[x]),ans=dis[x]; vis[x]=true;}\n\t\telse if(!vis[x])\n\t\t{\n\t\t\tvis[x]=true;\n\t\t\tset<int>::iterator it1=s.lower_bound(dic[x]);\n\t\t\tset<int>::iterator it2=s.upper_bound(dic[x]);\n\t\t\tif(it2==s.end())\n\t\t\t{\n\t\t\t\tit1--;\n\t\t\t\tans+=dis[x]-dis[lca(x,re[*it1])];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(it1==s.begin()) ans+=dis[x]-dis[lca(x,re[*it1])];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tit1--;\n\t\t\t\t\tint y=re[*it1],z=re[*it2];\n\t\t\t\t\tans+=dis[x]+dis[lca(y,z)]-dis[lca(x,y)]-dis[lca(x,z)];\n\t\t\t\t}\n\t\t\t}\n\t\t\ts.insert(dic[x]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvis[x]=false;\n\t\t\tset<int>::iterator it1=s.lower_bound(dic[x]);\n\t\t\tset<int>::iterator it2=s.upper_bound(dic[x]);\n\t\t\tif(it2==s.end())\n\t\t\t{\n\t\t\t\tif(it1==s.begin()) ans=0;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tit1--;\n\t\t\t\t\tint y=re[*it1];\n\t\t\t\t\tans+=dis[lca(x,y)]-dis[x];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(it1==s.begin())\n\t\t\t\t{\n\t\t\t\t\tint z=re[*it2];\n\t\t\t\t\tans+=dis[lca(x,z)]-dis[x];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tit1--;\n\t\t\t\t\tint y=re[*it1],z=re[*it2];\n\t\t\t\t\tans+=dis[lca(y,x)]+dis[lca(x,z)]-dis[x]-dis[lca(y,z)];\n\t\t\t\t}\n\t\t\t}\n\t\t\ts.erase(dic[x]);\n\t\t}\n\t\t// output();\n\t\t// cout << ans << endl ;\n\t\tset<int>::iterator it1=s.begin();\n\t\tset<int>::iterator it2=s.end();\n\t\tif(it1==it2) puts(\"0\");\n\t\telse\n\t\t{\n\t\t\tit2--;\n\t\t\tif(it1==it2) puts(\"0\");\n\t\t\telse printf(\"%lld\\n\",(ans-dis[lca(re[*it1],re[*it2])])*2);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u63a8\u9500\u4e2a\u4ebablog [JZYshuraK](https://www.cnblogs.com/ShuraK/p/10163820.html)",
        "postTime": 1546857145,
        "uid": 58178,
        "name": "JZYshuraK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3320 \u3010[SDOI2015]\u5bfb\u5b9d\u6e38\u620f\u3011"
    }
]