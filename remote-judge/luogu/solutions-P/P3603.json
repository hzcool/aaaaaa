[
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u7eaf\u6811\u5256+bitset\u7684\u5199\u6cd5\u3002\n\n\u559c\u63d0\u6d1b\u8c37\u6700\u6162\u89e3\u3002\n\n~~\u600e\u4e48\u4eba\u5747\u6811\u5206\u5757\u554a\uff0c\u611f\u89c9\u6211\u8981\u88ablxl\u5361\u4e86~~\n\n## \u3010\u601d\u8def\u3011\n\u9996\u5148\u53c8\u662f\u6570\u989c\u8272\u53c8\u662fmex\u7684\uff0c\u5f88\u5bb9\u6613\u60f3\u5230bitset\u3002\n\n\u4e00\u79cd\u5f88naive\u7684\u60f3\u6cd5\u5c31\u662f\u6811\u5256\uff0c\u7136\u540e\u53bb\u66b4\u529b\u5408\u5e76bitset\u3002\n\n~~\uff08\u7136\u800c\u8fd9\u79cdnaive\u7684\u505a\u6cd5\u7a0d\u5fae\u6539\u4e00\u6539\u5c45\u7136\u80fd\u8fc7\u3002\uff09~~\n\n\u4e5f\u5c31\u662f\u5bf9\u4e8e\u6811\u5256\u540e\u5efa\u51fa\u6765\u7684\u90a3\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5b58\u4e00\u4e2a bitset \u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u5e76\u96c6\u3002\n\n\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u7a7a\u95f4\u5f00\u4e0d\u4e0b\u3002\n\n\u8003\u8651\u600e\u4e48\u8282\u7ea6\u7a7a\u95f4\u3002\n\n\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u7ebf\u6bb5\u6811\u8d8a\u6df1\u7684\u8282\u70b9\u5b58\u7684\u4fe1\u606f\u8d8a\u5c11\uff0c\u5230\u6700\u540e\u4e00\u5c42\u5e72\u8106\u53ea\u6709 $1$ \u4e2a\u6570\u4e86\u3002\n\n\u4e8e\u662f\u8003\u8651\u628a\u7ebf\u6bb5\u6811\u7684\u6700\u540e\u4e24\u5c42\u5272\u6389\u4e0d\u7528 bitset \u7ef4\u62a4\uff0c\u800c\u7528 pair \u53bb\u7ef4\u62a4\u3002\n\n\u8fd9\u6837\u7a7a\u95f4\u7f29\u5c0f\u4e86\u56db\u500d\u5c31\u53ef\u4ee5\u5361\u8fc7\u53bb\u4e86\uff0c\u6700\u5e95\u4e0b\u4e24\u5c42\u7531\u4e8e\u4e0d\u7528bitset\uff0c\u6d88\u8017\u7a7a\u95f4\u76f8\u6bd4\u4e4b\u4e0b\u57fa\u672c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002\n\n\u5b9e\u73b0\u4e0a\u7531\u4e8e\u8981\u6c42 mex \uff0c\u6211\u7528\u4e86\u624b\u5199 bitset \u3002\n\n\u5177\u4f53\u5b9e\u73b0\u4e0a\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u7279\u522b\u7684\uff0c\u7ebf\u6bb5\u6811\u4e0a\u5408\u5e76\u4fe1\u606f\u5c31\u76f4\u63a5\u5bf9\u4e24\u4e2a bitset \u53d6\u6216\uff0c\u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a bitset \u8868\u793a\u8fd9\u4e9b\u94fe\u7684\u6570\u96c6\u4e4b\u5e76\u3002\n\n\u90a3\u4e48\u4e24\u4e2a\u8be2\u95ee\u7684\u7ed3\u679c\u90fd\u51fa\u6765\u4e86\uff0c\u7528 bitset \u57fa\u672c\u64cd\u4f5c\u7684 count \u4ec0\u4e48\u7684\u4e71\u641e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u662f\u5728\u7ebf\u7684\u3002\n\n\u7136\u540e\u5c31\u4e00\u904d A \u4e86\u3002\n\n\u590d\u6742\u5ea6\u4f3c\u4e4e\u662f $O({nV\\log^2n \\over w})$ \u7684\uff1f\n\n~~\u6240\u4ee5\u6211\u4e3a\u4ec0\u4e48\u80fdA\u554a\u3002\u3002\u3002~~\n\n## \u3010\u4ee3\u7801\u3011\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <bits/stl_pair.h>\nusing std :: pair;\nusing std :: make_pair;\ntemplate <typename T>\ninline void read(T &x){\n    x = 0;int fu = 1;\n    char c = getchar();\n    while(c > 57 || c < 48){\n        if(c == 45) fu = -1;\n        c = getchar();\n    }\n    while(c <= 57 && c >= 48){\n        x = (x << 3) + (x << 1) + c - 48;\n        c = getchar();\n    }\n    x *= fu;\n}\ntemplate <typename T>\ninline void fprint(T x){\n    if(x < 0) putchar(45), x = -x;\n    if(x > 9) fprint(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void fprint(T x, char ch){\n    fprint(x);putchar(ch);\n}\n\n#define MAXN 100005\ntypedef unsigned long long ULL;\nint n, m, f;\nconst int V = 470;\nconst ULL MOD = 18446744073709551615ull;\nstruct Bitset{\n    ULL bit[475];\n    Bitset (){memset(bit, 0, sizeof(bit));}\n    inline void ins(int x){\n        bit[x >> 6] |= 1ull << (x & 63);\n    }\n    inline void del(int x){\n        bit[x >> 6] &= (MOD ^ 1ull << (x & 63));\n    }\n    inline void clear(){memset(bit, 0, sizeof(bit));}\n    inline Bitset operator | (const Bitset &b) const{\n        Bitset ret;\n        for (register int i = 0;i < V;i ++) ret.bit[i] = bit[i] | b.bit[i];\n        return ret;\n    }\n    inline int mex(){\n        for (register int i = 0;i < V;i ++){\n            if(bit[i] ^ MOD){\n                for (register int j = 0;j < 64;j ++){\n                    if(!((bit[i] >> j) & 1)) return i << 6 | j;\n                }\n            }\n        }\n    }\n    inline int count(){\n        int ret = 0;\n        for (register int i = 0;i < V;i ++){ret += __builtin_popcountll(bit[i]);}\n        return ret;\n    }\n}t[MAXN];\nint a[MAXN];\n\n#define LSON rt << 1, l, mid\n#define RSON rt << 1 | 1, mid + 1, r\ntypedef pair <int, int> pi;\npi val[MAXN << 2];\nint b[MAXN], dep[MAXN], sz[MAXN], fa[MAXN], son[MAXN], id[MAXN], tp[MAXN];\nint head[MAXN], e[MAXN << 1], nxt[MAXN << 1], cnt;\ninline void add(int u, int v){\n    nxt[++ cnt] = head[u];\n    head[u] = cnt;\n    e[cnt] = v;\n}\nvoid dfs1(int x, int pre){\n    fa[x] = pre;dep[x] = dep[pre] + 1;sz[x] = 1;\n    for (register int i = head[x];i;i = nxt[i]){\n        if(e[i] == pre) continue;\n        dfs1(e[i], x);\n        sz[x] += sz[e[i]];\n        if(sz[e[i]] > sz[son[x]]) son[x] = e[i];\n    }\n}\nint tot;\nvoid dfs2(int x, int tt){\n    tp[x] = tt;id[x] = ++ tot;b[tot] = a[x];\n    if(son[x]) dfs2(son[x], tt);\n    for (register int i = head[x];i;i = nxt[i]){\n        if(e[i] == son[x] || e[i] == fa[x]) continue;\n        dfs2(e[i], e[i]);\n    }\n}\ninline void pushup(int rt, int l, int r){\n    if(r - l + 1 <= 2){\n        val[rt].first = val[rt << 1].first;\n        val[rt].second = val[rt << 1 | 1].first;\n    }\n    else {\n        int mid = (l + r) >> 1;\n        if(mid - l + 1 <= 2) {\n            t[rt].clear();\n            if(~val[rt << 1].first) t[rt].ins(val[rt << 1].first);\n            if(~val[rt << 1].second) t[rt].ins(val[rt << 1].second);\n        }\n        else t[rt] = t[rt << 1];\n        if(r - mid <= 2){\n            if(~val[rt << 1 | 1].first) t[rt].ins(val[rt << 1 | 1].first);\n            if(~val[rt << 1 | 1].second) t[rt].ins(val[rt << 1 | 1].second);\n        }\n        else t[rt] = t[rt] | t[rt << 1 | 1];\n    }\n}\n\n#define LSON rt << 1, l, mid\n#define RSON rt << 1 | 1, mid + 1, r\n\nvoid build(int rt, int l, int r){\n    if(l == r){\n        val[rt].first = b[l];\n        val[rt].second = -1;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    build(LSON);build(RSON);\n    pushup(rt, l, r);\n}\n\npi Query(int rt, int l, int r, int x, int y){\n    if(x <= l && r <= y) return val[rt];\n    int mid = (l + r) >> 1;\n    if(x <= mid && y > mid) return make_pair(Query(LSON, x, y).first, Query(RSON, x, y).first);\n    if(x <= mid) return Query(LSON, x, y);\n    else return Query(RSON, x, y);\n}\n\nBitset query(int rt, int l, int r, int x, int y){\n    if(x <= l && r <= y){\n        if(r - l + 1 <= 2) {\n            Bitset ret;\n            if(~val[rt].first) ret.ins(val[rt].first);\n            if(~val[rt].second) ret.ins(val[rt].second);\n            return ret;\n        }\n        else return t[rt];\n    }\n    Bitset ret;\n    int mid = (l + r) >> 1;\n    if(x <= mid) ret = query(LSON, x, y);\n    if(y > mid) ret = ret | query(RSON, x, y);\n    return ret;\n}\nBitset QUERY(int u, int v){\n    Bitset ret;\n    while(tp[u] ^ tp[v]){\n        if(dep[tp[u]] < dep[tp[v]]) u ^= v ^= u ^= v;\n        if(id[u] - id[tp[u]] + 1 <= 2){\n            pi res = Query(1, 1, n, id[tp[u]], id[u]);\n            if(~res.first) ret.ins(res.first);\n            if(~res.second) ret.ins(res.second);\n        }\n        else ret = ret | query(1, 1, n, id[tp[u]], id[u]);\n        u = fa[tp[u]];\n    }\n    if(id[u] > id[v]) u ^= v ^= u ^= v;\n    if(id[v] - id[u] + 1 <= 2){\n        pi res = Query(1, 1, n, id[u], id[v]);\n        if(~res.first) ret.ins(res.first);\n        if(~res.second) ret.ins(res.second);\n    }\n    else ret = ret | query(1, 1, n, id[u], id[v]);\n    return ret;\n}\nint ans;\nint main(){\n    read(n);read(m);read(f);\n    for (register int i = 1;i <= n;i ++) read(a[i]);\n    for (register int i = 1;i < n;i ++){\n        int u, v;read(u);read(v);\n        add(u, v);add(v, u);\n    }\n    dfs1(1, 0);dfs2(1, 1);\n    build(1, 1, n);\n    while(m --){\n        ans *= f;\n        int k, u, v;\n        Bitset ret;read(k);\n        while(k --){\n            read(u);read(v);u ^= ans, v ^= ans;\n            ret = ret | QUERY(u, v);\n        }\n        int num1 = ret.mex(), num2 = ret.count();\n        ans = num1 + num2;\n        fprint(num2, 32);fprint(num1, 10);\n    }\n}\n```",
        "postTime": 1607689238,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3603 \u3010\u96ea\u8f89\u3011"
    },
    {
        "content": "\u7ed9\u4f60\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u4e14\u5e26\u70b9\u6743\u7684\u6811\uff0c$m$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u4f60\u591a\u6761\u94fe\uff0c\u8bf7\u4f60\u8f93\u51fa\u8fd9\u51e0\u6761\u94fe\u7684\u70b9\u7684\u96c6\u5408\u5e76\u7684\u989c\u8272\u6570\u548c `mex`\u3002\n\n\u5f3a\u5236\u5728\u7ebf\u3002\n\n$1\\leq n \\leq 10^5,1\\leq m\\leq 3 \\times 10^4$\u3002\n\n#### sol\n\n\u9996\u5148\u5982\u679c\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u7528\u6811\u4e0a\u83ab\u961f\u5373\u53ef\u3002\n\n\u4f46\u591a\u4e86\u4e2a\u5f3a\u5236\u5728\u7ebf\uff0c\u5bb9\u6613\u60f3\u5230\u662f\u9884\u5904\u7406\u9898\u3002\n\n\u67e5\u8be2\u94fe\u989c\u8272\u6570\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 `bitset`\uff0c\u5bf9\u503c\u57df\u5efa `bitset`\uff0c\u7b54\u6848\u5c31\u662f `bitset` \u4e2d $1$ \u7684\u6570\u91cf\u3002\n\n\u5bf9\u4e8e `mex`\uff0c\u5728 `bitset` \u4e0a\u66b4\u529b\u627e\u7b2c\u4e00\u4e2a\u4e3a $0$ \u7684\u4f4d\u5373\u53ef\u3002\n\n \u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u628a\u4e00\u6761\u8def\u5f84\u4e0a\u7684 `bitset` \u5e76\u8d77\u6765\u3002\n\n**\u6cd5\u4e00**\n\n\u8003\u8651\u6811\u5206\u5757\u3002\n\n\u8003\u8651\u7528\u4e00\u79cd\u7b80\u5355\u7684\u6811\u5206\u5757\u6280\u5de7\u2014\u2014\u6811\u4e0a\u6492\u70b9\u3002\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5148\u8bbe\u4e00\u4e2a\u9608\u503c $S$\uff0c\u5728\u6811\u4e0a\u9009\u62e9\u4e0d\u8d85\u8fc7 $\\frac{n}{S}$ \u4e2a\u70b9\u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u6ee1\u8db3\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7956\u5148\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$\u3002\n\n\u5177\u4f53\u5730\uff0c\u6bcf\u6b21\u9009\u62e9\u5f53\u524d\u6df1\u5ea6\u6700\u5927\u7684\u4e00\u4e2a\u975e\u5173\u952e\u70b9\uff0c\u82e5\u5b83\u7684 $1 \\sim S$ \u7ea7\u7956\u5148\u90fd\u4e0d\u662f\u5173\u952e\u70b9\uff0c\u5219\u628a\u5b83\u7684 $S$ \u7ea7\u7956\u5148\u6807\u8bb0\u4e3a\u5173\u952e\u70b9\u3002\n\n\u7531\u4e8e\u4e0a\u8ff0\u65b9\u6cd5\u4e2d\u6bcf\u6807\u8bb0\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u81f3\u5c11\u6709 $S$ \u4e2a\u70b9\u4e0d\u4f1a\u88ab\u6807\u8bb0\uff0c\u6240\u4ee5\u5173\u952e\u70b9\u7684\u6570\u91cf\u662f\u6b63\u786e\u7684\u3002\n\n\u4ed4\u7ec6\u601d\u8003\uff0c\u5bb9\u6613\u53d1\u73b0\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u7956\u5148\u5173\u952e\u70b9\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $S$ \u8fd9\u4e2a\u6761\u4ef6\u4e5f\u6ee1\u8db3\u3002\n\n\u6492\u5b8c\u5173\u952e\u70b9\uff0c\u518d\u8bb0\u5f55\u4e24\u5173\u952e\u70b9\u95f4\u7684 `bitset`\uff0c\u5148\u7528 $\\mathcal O(S)$ \u7684\u65f6\u95f4\u6c42\u51fa\u76f8\u90bb\u4e24\u5173\u952e\u70b9\u7684 `bitset`\uff0c\u518d\u5904\u7406\u51fa\u4e24\u4e24\u4e4b\u95f4\u7684\u5373\u53ef\uff0c\u9884\u5904\u7406\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\frac{n^2}{S}+\\frac{n^3}{wS^2})$\u3002\n\n\u7136\u540e\u8003\u8651\u8be2\u95ee\uff0c\u6b64\u65f6\u8be2\u95ee\u7684\u8def\u5f84\u5c31\u88ab\u62c6\u6210\u4e86\u4e24\u4e2a\u6563\u5757\u548c\u4e00\u4e2a\u6574\u5757\uff0c\u6563\u5757\u66b4\u529b\uff0c\u6574\u5757 `bitset` \u53d6\u4ea4\u96c6\u5373\u53ef\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(mS+\\frac{nm}{w})$\u3002\n\n\u53d6 $S=\\sqrt n$\uff0c\u5219\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O((n+m)\\sqrt n+\\frac{n^2+nm}{w})$\uff0c\u53ef\u8fc7\u3002\n\n$\\text{5.05s / 346.17MB / 4.14KB C++20 O2}$\u3002\n\n```cpp\n#include <cstdio>\n#include <bitset>\n#include <algorithm>\n\nusing namespace std;\n\nnamespace Fread\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S, *T;\n    inline char getchar()\n    {\n        if (S == T)\n        {\n            T = (S = buf) + fread(buf, 1, SIZE, stdin);\n            if (S == T)\n                return '\\n';\n        }\n        return *S++;\n    }\n}\nnamespace Fwrite\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S = buf, *T = buf + SIZE;\n    inline void flush()\n    {\n        fwrite(buf, 1, S - buf, stdout);\n        S = buf;\n    }\n    inline void putchar(char c)\n    {\n        *S++ = c;\n        if (S == T)\n            flush();\n    }\n    struct NTR\n    {\n        ~NTR()\n        {\n            flush();\n        }\n    } ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(int x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int _ = 2e5 + 7;\n\nbitset<_> bt[202][202], nw;\n\nint n, m, B, kkk, a[_], fa[_], dep[_], mxd[_], FF[_], siz[_], tp[_], hson[_];\n\nint id[_], cnt, head[_], tot, ans, ans1, ans2, sta[_], top, gg[_];\n\nstruct edge\n{\n\tint to, nxt;\n} e[_ << 1];\n\nvoid dfs1(int now, int D)\n{\n\tsiz[now] = 1;\n\tdep[now] = D;\n\tmxd[now] = dep[now];\n\tfor (int i = head[now]; i; i = e[i].nxt)\n\t{\n\t\tint v = e[i].to;\n\t\tif (!dep[v])\n\t\t{\n\t\t\tfa[v] = now;\n\t\t\tdfs1(v, D + 1);\n\t\t\tsiz[now] += siz[v];\n\t\t\tif (mxd[v] > mxd[now])\n\t\t\t\tmxd[now] = mxd[v];\n\t\t\tif (siz[hson[now]] < siz[v])\n\t\t\t\thson[now] = v;\n\t\t}\n\t}\n\tif (mxd[now] - dep[now] >= 1000)\n\t\tid[now] = ++tot, mxd[now] = dep[now];\n}\n\nvoid dfs2(int now)\n{\n\tfor (int i = head[now]; i; i = e[i].nxt)\n\t{\n\t\tint v = e[i].to;\n\t\tif (dep[v] > dep[now])\n\t\t{\n\t\t\tif (id[v])\n\t\t\t{\n\t\t\t\tint ip = id[sta[top]], in = id[v];\n\t\t\t\tfor (int x = v; x != sta[top]; x = fa[x])\n\t\t\t\t\tbt[ip][in].set(a[x]);\n\t\t\t\tnw = bt[ip][in];\n\t\t\t\tfor (int i = 1; i < top; ++i)\n\t\t\t\t{\n\t\t\t\t\tbitset<_> &bs = bt[id[sta[i]]][in];\n\t\t\t\t\tbs = bt[id[sta[i]]][ip];\n\t\t\t\t\tbs |= nw;\n\t\t\t\t}\n\t\t\t\tFF[v] = sta[top], gg[v] = gg[sta[top]] + 1;\n\t\t\t\tsta[++top] = v;\n\t\t\t}\n\t\t\tdfs2(v);\n\t\t\tif (id[v])\n\t\t\t\t--top;\n\t\t}\n\t}\n}\n\nvoid dfs3(int now, int tf)\n{\n\ttp[now] = tf;\n\tif (hson[now])\n\t\tdfs3(hson[now], tf);\n\tfor (int i = head[now]; i; i = e[i].nxt)\n\t{\n\t\tint v = e[i].to;\n\t\tif (!tp[v])\n\t\t\tdfs3(v, v);\n\t}\n}\n\ninline int LCA(int x, int y)\n{\n\twhile (tp[x] != tp[y])\n\t{\n\t\tif (dep[tp[x]] < dep[tp[y]])\n\t\t\tswap(x, y);\n\t\tx = fa[tp[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\n\ninline int mex(bitset<_> &s)\n{\n  for (int i = 0; i < _; ++i)\n    if (!s.test(i)) return i;\n  return 1e9;\n}\n\nsigned main()\n{\n\tn = read(), m = read(), kkk = read();\n\tfor (int i = 1; i <= n; ++i)\n\t\ta[i] = read();\n\tfor (int i = 1, u, v; i < n; ++i)\n\t{\n\t\tu = read(), v = read();\n\t\te[++cnt] = (edge) {v, head[u]}, head[u] = cnt;\n\t\te[++cnt] = (edge) {u, head[v]}, head[v] = cnt;\n\t}\n\tdfs1(1, 1);\n\tif (!id[1])\n\t\tid[1] = ++tot;\n\tsta[top = 1] = gg[1] = 1;\n\tdfs2(1);\n\tdfs3(1, 1);\n\tint z, u, v;\n\twhile (m--)\n\t{\n\t\tz = read();\n\t\tnw.reset();\n\t\twhile(z--)\n\t\t{\n\t\t\tu = read(), v = read();\n\t\t\tif(kkk) u ^= ans, v ^= ans;\n\t\t\tint l = LCA(u, v);\n\t\t\twhile (u != l && !id[u])\n\t\t\t\tnw.set(a[u]), u = fa[u];\n\t\t\twhile (v != l && !id[v])\n\t\t\t\tnw.set(a[v]), v = fa[v];\n\t\t\tif (u != l)\n\t\t\t{\n\t\t\t\tint pre = u;\n\t\t\t\twhile (dep[FF[pre]] >= dep[l])\n\t\t\t\t\tpre = FF[pre];\n\t\t\t\tif (pre != u)\n\t\t\t\t\tnw |= bt[id[pre]][id[u]];\n\t\t\t\twhile (pre != l)\n\t\t\t\t\tnw.set(a[pre]), pre = fa[pre];\n\t\t\t}\n\t\t\tif (v != l)\n\t\t\t{\n\t\t\t\tint pre = v;\n\t\t\t\twhile (dep[FF[pre]] >= dep[l])\n\t\t\t\t\tpre = FF[pre];\n\t\t\t\tif (pre != v)\n\t\t\t\t\tnw |= bt[id[pre]][id[v]];\n\t\t\t\twhile (pre != l)\n\t\t\t\t\tnw.set(a[pre]), pre = fa[pre];\n\t\t\t}\n\t\t\tnw.set(a[l]);\n\t\t}\n\t\tans1 = nw.count(), ans2 = mex(nw);\n\t\twrite(ans1), putchar(' '), write(ans2), putchar('\\n');\n\t\tans = ans1 + ans2;\n\t}\n\treturn 0;\n}\n```\n\n**\u6cd5\u4e8c**\n\n\u8003\u8651\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u8be2\u95ee\u65f6\u5c06\u8def\u5f84\u4e0a\u7684\u82e5\u5e72\u6761\u91cd\u94fe\u7684 `bitset` \u5e76\u8d77\u6765\u5373\u53ef\u3002\n\n\u7531\u4e8e\u91cd\u94fe\u4e0a\u7684\u70b9\u7684 `dfn` \u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u5e8f\u5217\u5206\u5757\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\uff0c\u8df3\u91cd\u94fe\u5206\u5757\u8ba1\u7b97\u8fd9\u6761\u91cd\u94fe\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\frac{n^2}{w}+m\\log n(\\sqrt{n}+\\frac{n}{w}))$\u3002\n\n\u6700\u4f18\u89e3\u3002\n\n$\\text{1.43s / 56.70MB / 3.61KB C++20 O2}$\u3002\n\n```cpp\n#include <cstdio>\n#include <bitset>\n\n#define re register\n\nnamespace Fread\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S, *T;\n    inline char getchar()\n    {\n        if (S == T)\n        {\n            T = (S = buf) + fread(buf, 1, SIZE, stdin);\n            if (S == T)\n                return '\\n';\n        }\n        return *S++;\n    }\n}\nnamespace Fwrite\n{\n    const int SIZE = 1 << 23;\n    char buf[SIZE], *S = buf, *T = buf + SIZE;\n    inline void flush()\n    {\n        fwrite(buf, 1, S - buf, stdout);\n        S = buf;\n    }\n    inline void putchar(char c)\n    {\n        *S++ = c;\n        if (S == T)\n            flush();\n    }\n    struct NTR\n    {\n        ~NTR()\n        {\n            flush();\n        }\n    } ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9')\n\t{\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(int x)\n{\n\tif (x < 0)\n\t{\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int _ = 1e5 + 7, W = 3e4 + 7, B = 1e3;\n\nstd::bitset<W> f[102][102], nw;\n\nint n, m, kkk, cnt_node, ans1, ans2, ans, tot, a[_], fa[_], dep[_], siz[_], hson[_], top[_], dfn[_], b[_], bel[_], L[_], R[_], head[_], to[_ << 1], nxt[_ << 1];\n\ninline void swap(int &x, int &y)\n{\n\tx ^= y ^= x ^= y;\n}\n\ninline int mex(std::bitset<W> &s)\n{\n\tfor (re int i = 0; i < W; ++i)\n\t\tif (!s.test(i)) return i;\n\treturn 1e9;\n}\n\ninline void add(int u, int v)\n{\n\tto[++tot] = v;\n\tnxt[tot] = head[u];\n\thead[u] = tot;\n}\n\nvoid dfs1(int u, int D)\n{\n\tdep[u] = D, siz[u] = 1;\n\tfor(re int i = head[u]; i; i = nxt[i])\n\t{\n\t\tre int v = to[i];\n\t\tif(siz[v]) continue;\n\t\tfa[v] = u;\n\t\tdfs1(v, D + 1);\n\t\tsiz[u] += siz[v];\n\t\tif(siz[hson[u]] < siz[v]) hson[u] = v;\n\t}\n}\n\nvoid dfs2(int u, int tf)\n{\n\ttop[u] = tf, dfn[u] = ++cnt_node, a[cnt_node] = b[u];\n\tif(!hson[u]) return;\n\tdfs2(hson[u], tf);\n\tfor(re int i = head[u]; i; i = nxt[i])\n\t{\n\t\tre int v = to[i];\n\t\tif(top[v]) continue;\n\t\tdfs2(v, v);\n\t}\n}\n\ninline void pre()\n{\n\tfor (re int i = 1; i <= n; ++i)\n\t{\n\t\tbel[i] = (i - 1) / B + 1;\n\t\tf[bel[i]][bel[i]].set(a[i]);\n\t}\n\tfor (re int i = 1; i <= bel[n]; ++i)\n\t\tL[i] = R[i - 1] + 1, R[i] = i * B;\n\tR[bel[n]] = n;\n\tfor (re int i = 1; i < bel[n]; ++i)\n\t\tfor (re int j = i + 1; j <= bel[n]; ++j)\n\t\t\tf[i][j] = f[i][j - 1] | f[j][j];\n}\n\ninline void Query_on_block(int l, int r)\n{\n\tif (bel[l] == bel[r])\n\t{\n\t\tfor (re int i = l; i <= r; ++i) nw.set(a[i]);\n\t\treturn;\n\t}\n\tnw |= f[bel[l] + 1][bel[r] - 1];\n\tfor (re int i = l; i <= R[bel[l]]; ++i) nw.set(a[i]);\n\tfor (re int i = L[bel[r]]; i <= r; ++i) nw.set(a[i]);\n}\n\ninline void Query_on_tree(int u, int v)\n{\n\twhile(top[u] != top[v])\n\t{\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tQuery_on_block(dfn[top[u]], dfn[u]);\n\t\tu = fa[top[u]];\n\t}\n\tif(dep[u] > dep[v]) swap(u, v);\n\tQuery_on_block(dfn[u], dfn[v]);\n}\n\nsigned main()\n{\n\tn = read(), m = read(), kkk = read();\n\tfor(re int i = 1; i <= n; ++i) b[i] = read();\n\tfor(re int i = 1, u, v; i < n; ++i)\n\t{\n\t\tu = read(), v = read();\n\t\tadd(u, v), add(v, u);\n\t}\n\tdfs1(1, 1), dfs2(1, 1);\n\tpre();\n\twhile(m--)\n\t{\n\t\tnw.reset();\n\t\tre int tmp = read();\n\t\twhile(tmp--)\n\t\t{\n\t\t\tre int u = read() ^ (kkk * ans), v = read() ^ (kkk * ans);\n\t\t\tQuery_on_tree(u, v);\n\t\t}\n\t\tans1 = nw.count(), ans2 = mex(nw);\n\t\twrite(ans1), putchar(' '), write(ans2), putchar('\\n');\n\t\tans = ans1 + ans2;\n\t}\n}\n```",
        "postTime": 1643881584,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P3603 \u96ea\u8f89"
    },
    {
        "content": "\u968f\u673a\u94a6\u5b9a $\\sqrt n$\u4e2a\u5173\u952e\u70b9\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u5173\u952e\u70b9\u548c\u5176\u4e5f\u4e3a\u5173\u952e\u70b9\u7684\u7956\u5148\u4e4b\u95f4\u7684bitset\u3002\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u4e24\u8fb9\u90fd\u5411 LCA \u722c\uff0c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u5f00\u59cb\u5411 LCA \u8df3\uff0c\u627e\u5230\u8ddd\u79bb LCA \u6700\u8fd1\u7684\u5173\u952e\u70b9\uff0c\u8fd9\u6bb5\u7684 bitset \u5df2\u7ecf\u88ab\u9884\u5904\u7406\uff0c\u63a5\u4e0b\u6765\u8ddd\u79bb LCA \u6700\u8fd1\u7684\u5173\u952e\u70b9\u5230 LCA \u5904\u7684bitset\uff0c\u66b4\u529b\u5904\u7406\u5373\u53ef\u3002\u9884\u5904\u7406\u590d\u6742\u5ea6 $O(\\frac{30000}{64}n)$\uff0c\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6 $O(\\frac{30000}{64}\\sqrt n)$\n\n```cpp\n#include <map>\n#include <cmath>\n#include <vector>\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef unsigned long long ull;\nconst int MAXN = 100005;\nconst int Q = 322;\nint n, m, f, cnt, a[MAXN];\nint tag[MAXN], spe[MAXN], up[MAXN], vis[MAXN];\nint deep[MAXN], fa[MAXN], size[MAXN];\nint son[MAXN], top[MAXN], dfn[MAXN];\nstruct bitset {\n  ull bit[469]; int maxx;\n  void clear() {\n    for(int i = 0; i <= maxx; i++) bit[i] = 0LL;\n    maxx = 0;\n  }\n  void operator |= (const bitset & rhs) {\n    maxx = max(maxx, rhs.maxx);\n    for(int i = 0; i <= maxx; i++)\n      bit[i] |= rhs.bit[i];\n  }\n  void operator |= (const int x) {\n    bit[x >> 6] |= 1LL << (x & 63);\n    maxx = max(maxx, x >> 6);\n  }\n  int num() {\n    int ans = 0;\n    for(int i = 0; i <= maxx; i++)\n      for(int j = 0; j < 64; j++)\n        if(bit[i] & (1LL << j))\n          ans++;\n    return ans;\n  }\n  int mex() {\n    for(int i = 0; i <= maxx; i++)\n      for(int j = 0; j < 64; j++)\n        if(!(bit[i] & (1LL << j)))\n          return i * 64 + j;\n  }\n}ans, null;\nbitset BIT[Q + 5][Q + 5];\nvector<int>G[MAXN];\nvoid dfs1(int cur, int father, int dep) {\n  fa[cur] = father;\n  deep[cur] = dep;\n  size[cur] = 1;\n  son[cur] = 0;\n  for(int i = 0; i < G[cur].size(); i++) {\n    int nx = G[cur][i];\n    if(nx == fa[cur]) continue;\n    dfs1(nx, cur, dep + 1);\n    size[cur] += size[nx];\n    if(size[son[cur]] < size[nx])\n      son[cur] = nx;\n  }\n}\nvoid dfs2(int cur, int tp) {\n  top[cur] = tp;\n  dfn[cur] = ++cnt;\n  if(!son[cur]) return;\n  dfs2(son[cur], tp);\n  for(int i = 0; i < G[cur].size(); i++) {\n    int nx = G[cur][i];\n    if(nx == fa[cur] || nx == son[cur])\n      continue;\n    dfs2(nx, nx);\n  }\n}\nint lca(int x, int y) {\n  int t1 = top[x], t2 = top[y];\n  while(t1 != t2) {\n    if(deep[t1] < deep[t2]) {\n      swap(t1, t2);\n      swap(x, y);\n    }\n    x = fa[t1]; t1 = top[x];\n  }\n  return deep[x] < deep[y] ? x : y;\n}\nint main() {\n  scanf(\"%d %d %d\", &n, &m, &f);\n  for(int i = 1; i <= n; i++)\n    scanf(\"%d\", &a[i]);\n  for(int i = 1, x, y; i < n; i++) {\n    scanf(\"%d %d\", &x, &y);\n    G[x].push_back(y);\n    G[y].push_back(x);\n  }\n  dfs1(1, 0, 1);\n  dfs2(1, 1);\n  for(int i = 1; i <= Q; i++) {\n    int h = rand() % n + 1;\n    while(vis[h]) h = rand() % n + 1;\n    vis[h] = 1;\n    tag[i] = h;\n    spe[tag[i]] = i;\n  }\n  for(int i = 1; i <= Q; i++) {\n    int cur = tag[i];\n    ans.clear();\n    do {\n      ans |= a[cur];\n      if(cur != tag[i] && spe[cur]) {\n        BIT[i][spe[cur]] |= ans;\n        if(!up[tag[i]]) \n          up[tag[i]] = cur;\n      }\n      cur = fa[cur];\n    } while(cur != 0);\n  }\n  int lastans = 0;\n  for(int i = 1, cnt; i <= m; i++) {\n    scanf(\"%d\", &cnt);\n    ans.clear();\n    for(int j = 1, x, y; j <= cnt; j++) {\n      scanf(\"%d %d\", &x, &y);\n      if(f) x ^= lastans, y ^= lastans;\n      int z = lca(x, y); ans |= a[z];\n      while(!spe[x] && x != z) ans |= a[x], x = fa[x];\n      int now = x;\n      while(deep[up[x]] > deep[z]) x = up[x];\n      ans |= BIT[spe[now]][spe[x]];\n      while(x != z) ans |= a[x], x = fa[x];\n      while(!spe[y] && y != z) ans |= a[y], y = fa[y];\n      now = y;\n      while(deep[up[y]] > deep[z]) y = up[y];\n      ans |= BIT[spe[now]][spe[y]];\n      while(y != z) ans |= a[y], y = fa[y];\n    }\n    int num = ans.num(), mex = ans.mex();\n    lastans = num + mex;\n    printf(\"%d %d\\n\", num, mex);\n  }\n  return 0;\n}\n```",
        "postTime": 1487605838,
        "uid": 11171,
        "name": "ddd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3603 \u3010\u96ea\u8f89\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u94fe\u4e0a\u6570\u989c\u8272\u3001\u94fe\u4e0a\u6c42 $\\rm mex$\u3002$n,m\\le 10^5$\uff0c$V\\le 3\\times 10^4$\uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n## \u505a\u6cd5\u7b80\u8ff0\n\n\u8003\u8651\u91cd\u94fe\u5256\u5206\u3002\u7528\u5206\u5757\u7ef4\u62a4\u533a\u95f4\u3001\u7528 bitset \u7ef4\u62a4\u503c\u57df\u3002\u5219\u5bf9\u4e8e\u7b2c\u4e00\u95ee\uff0c\u7b54\u6848\u4e3a bitset \u4e2d $1$ \u7684\u6570\u91cf\uff0c\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u7b54\u6848\u4e3a bitset \u6bcf\u4f4d\u53d6\u53cd\u540e\u4e2d lowbit \u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f16\u53f7\u3002\n\n\u67e5\u8be2\u65f6\uff0c\u628a $O(k\\log n)$ \u6761\u8def\u5f84\u4e0a\u7684 bitset \u76f4\u63a5\u6309\u4f4d or \u8d77\u6765\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u6bcf\u6b21\u8be2\u95ee\u90fd\u4f1a\u5bf9 $O(k\\sqrt n \\log n)$ \u4e2a\u6574\u5757\u53d6 or\uff0c\u590d\u6742\u5ea6\u8fc7\u9ad8\u3002\u8003\u8651\u7528 ST \u8868\u9884\u5904\u7406\u51fa\u76f8\u90bb\u6574\u5757\u6309\u4f4d\u6216\u51fa\u6765\u7684 bitset\uff0c\u67e5\u8be2\u65f6\u590d\u6742\u5ea6\u4e0b\u964d\u5230 $O(\\dfrac{kV\\log n}w)$\u3002\n\n\u4f46\u770b\u8fd9\u4e2a\u590d\u6742\u5ea6\u4f3c\u4e4e\u8fc7\u4e0d\u53bb\uff0c\u4f46\u5b9e\u9645\u4e0a\u8be5\u505a\u6cd5\u5e38\u6570\u5f88\u5c0f\u4e14\u8dd1\u4e0d\u6ee1\uff0c\u8dd1\u5f97\u98de\u5feb\u3002\n\n## \u4ee3\u7801\u53c2\u8003\n\n```cpp\nconst int N = 1e5 + 9;\nconst int B = 326;\ntypedef bitset<30009> BS;\n\nstruct G {\n  int tot, h[N];\n  struct E {\n    int t, n;\n  } e[N << 2];\n  inline void Add(int f, int t) { e[++tot] = {t, h[f]}, h[f] = tot; }\n} g;\n\nint n, m, typ, a_[N], dfn[N], tim, sz[N], son[N], tp[N], dep[N], fa[N], a[N], last;\n\nstruct Bl {\n  int sz, lg[N], bl[N], lbl[N], rbl[N];\n  BS st[9][B], ans;\n\n  inline void Init() {\n    sz = sqrt(n);\n    re (i, n)\n      bl[i] = (i - 1) / sz + 1, lbl[i] = (bl[i] - 1) * sz + 1, rbl[i] = min(bl[i] * sz, n);\n    re (i, n)\n      st[0][bl[i]].set(a[i]);\n    rep (i, 2, n)\n      lg[i] = lg[i >> 1] + 1;\n    re (j, lg[bl[n]]) {\n      auto *x = st[j], *y = st[j - 1];\n      re (i, bl[n] - (1 << j) + 1)\n        x[i] = y[i] | y[i + (1 << (j - 1))];\n    }\n  }\n\n  inline void StAsk(int x, int y) {\n    int p = lg[y - x + 1];\n    ans |= st[p][x] | st[p][y - (1 << p) + 1];\n  }\n\n  inline void Ask(int l, int r) {\n    if (bl[l] == bl[r]) {\n      rep (i, l, r)\n        ans.set(a[i]);\n      return;\n    }\n    Ask(l, rbl[l]);\n    if (bl[l] + 1 <= bl[r] - 1) StAsk(bl[l] + 1, bl[r] - 1);\n    Ask(lbl[r], r);\n  }\n} bl;\n\nvoid Dfs1(int f) {\n  dep[f] = dep[fa[f]] + 1, sz[f] = 1;\n  nxt (i, f, g) {\n    int t = g.e[i].t;\n    if (t == fa[f]) continue;\n    fa[t] = f, Dfs1(t), sz[f] += sz[t];\n    if (sz[t] > sz[son[f]]) son[f] = t;\n  }\n}\n\nvoid Dfs2(int f) {\n  dfn[f] = ++tim;\n  if (!son[f]) return;\n  tp[son[f]] = tp[f], Dfs2(son[f]);\n  nxt (i, f, g) {\n    int t = g.e[i].t;\n    if (t == fa[f] || t == son[f]) continue;\n    tp[t] = t, Dfs2(t);\n  }\n}\n\nvoid Ask(int f, int t) {\n  while (tp[f] != tp[t]) {\n    if (dep[tp[f]] > dep[tp[t]]) swap(f, t);\n    bl.Ask(dfn[tp[t]], dfn[t]), t = fa[tp[t]];\n  }\n  if (dfn[f] > dfn[t]) swap(f, t);\n  bl.Ask(dfn[f], dfn[t]);\n}\n\nsigned main() {\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m >> typ;\n  re (i, n)\n    cin >> a_[i];\n  re (i, n - 1) {\n    int f, t;\n    cin >> f >> t, g.Add(f, t), g.Add(t, f);\n  }\n  Dfs1(1), tp[1] = 1, Dfs2(1);\n  re (i, n)\n    a[dfn[i]] = a_[i];\n  bl.Init();\n  re (i, m) {\n    int K, f, t;\n    bl.ans.reset(), cin >> K;\n    while (K--) {\n      cin >> f >> t;\n      if (typ) f ^= last, t ^= last;\n      Ask(f, t);\n    }\n    int ans1 = bl.ans.count(), ans2 = (~bl.ans)._Find_first();\n    cout << ans1 << ' ' << ans2 << '\\n', last = ans1 + ans2;\n  }\n  return 0;\n}\n```\n\n",
        "postTime": 1645177812,
        "uid": 207996,
        "name": "yzy1",
        "ccfLevel": 9,
        "title": "P3603 \u9898\u89e3"
    },
    {
        "content": "# [LG-P3603 \u96ea\u8f89](https://www.luogu.com.cn/problem/P3603) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=LG-P3603-Solution)\n\n### \u9898\u9762\n\n\u7ed9\u5b9a $ n $ \u4e2a\u70b9\u7684\u6811\uff0c\u5b58\u5728\u70b9\u6743\uff0c\u591a\u6b21\u8be2\u95ee\u6bcf\u6b21\u7ed9\u5b9a\u591a\u5bf9\u70b9\u5206\u522b\u8868\u793a\u4e00\u6761\u6811\u94fe\uff0c\u6c42\u6240\u6709\u6811\u94fe\u4e2d\u6709\u591a\u5c11\u4e0d\u540c\u70b9\u6743\uff0c\u53ca\u5176\u70b9\u6743\u7684 $ \\operatorname{mex} $\u3002\u5f3a\u5236\u5728\u7ebf\u3002\n\n### Solution\n\n\u9996\u5148\u770b\u5230\u8ba1\u7b97\u4e0d\u540c\u70b9\u6743\u548c\u6c42 $ \\operatorname{mex} $ \u4e14\u503c\u57df\u4e0d\u5927\uff0c\u81ea\u7136\u60f3\u5230 `bitset`\uff0c\u5f53\u6211\u4eec\u6c42\u5f97\u7b54\u6848\u7684 `bitset`\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8c03\u7528 `count()` \u5373\u53ef\u83b7\u5f97\u70b9\u6743\u79cd\u7c7b\u6570\uff0c\u5c06\u5176\u53d6\u53cd\u540e\uff0c\u8c03\u7528 `_Find_first()` \u5373\u53ef\u83b7\u5f97 $ \\operatorname{mex} $\u3002\u4e14\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\u5747\u4f1a\u9664\u53bb\u4e00\u4e2a `bitset` \u7279\u6709\u7684\uff0c$ w $ \u7684\u590d\u6742\u5ea6\u3002\n\n> \u8fd9\u91cc\u7684 $ w $ \u6839\u636e\u7f16\u8bd1\u5668\u7248\u672c\u4e00\u822c\u4e3a $ 32 $ \u6216 $ 64 $\uff0c\u4e14\u8fd9\u91cc\u8bb0\u4f5c $ w $ \u800c\u4e0d\u662f $ \\omega $ \u662f\u56e0\u4e3a\u4e2a\u4eba\u8ba4\u4e3a\u7406\u89e3\u4e3a word \u8f83\u4e3a\u5408\u7406\u3002\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\uff0c\u9996\u5148\u63d0\u4f9b\u4e00\u4e2a\u5341\u5206\u663e\u7136\u7684\u601d\u8def\uff0c\u5bf9\u539f\u6811\u8fdb\u884c\u6811\u5256\uff0c\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5747\u5f00\u4e00\u4e2a `bitset` \u5efa\u6811\uff0c\u4ee4 $ v $ \u8868\u793a\u70b9\u6743\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u663e\u7136\u662f $ O(\\dfrac{nv}{w}) $ \u7684\uff0c\u800c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u76f4\u63a5\u67e5\u8be2\u5e76\u5f3a\u884c\u5408\u5e76\uff0c\u5206\u6790\u8fd9\u6837\u7684\u590d\u6742\u5ea6\uff1a\u6811\u5256\u6709\u4e00\u53ea $ O(\\log n) $\uff0c\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u7684\u8282\u70b9\u6570\u662f $ O(\\log n) $\uff0c\u6bcf\u6b21\u5408\u5e76\u9700\u8981 $ O(\\dfrac{v}{w}) $\uff0c\u82e5\u5171 $ q $ \u6b21\u8be2\u95ee\u5219\u6700\u7ec8\u590d\u6742\u5ea6 $ O(\\dfrac{qv\\log^2 n}{w}) $\uff0c\u663e\u7136\u65e0\u6cd5\u901a\u8fc7\uff0c\u4f46\u662f\u672c\u9898\u4f3c\u4e4e\u9650\u5236\u8f83\u5c0f\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u8003\u8651\u5206\u6790\u4e0a\u8ff0\u505a\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u663e\u7136\u4e3a $ O(\\dfrac{nv}{w}) $\uff0c\u4f46\u662f\u7ebf\u6bb5\u6811\u4e00\u822c\u6709\u4e00\u4e2a $ 4 $ \u7684\u7a7a\u95f4\u5e38\u6570\uff0c\u7b80\u5355\u8ba1\u7b97\u53d1\u73b0\u7cbe\u7ec6\u5b9e\u73b0\u540e\u5927\u81f4\u9700\u8981 $ 262413 $\uff0c\u8fd9\u6837\u5927\u81f4\u9700\u8981 `1GiB`\uff0c\u8003\u8651\u4f18\u5316\uff0c\u663e\u7136\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u5e95\u5c42\u6bcf\u4e2a\u70b9\u4ec5\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6570\uff0c\u800c\u5012\u6570\u7b2c\u4e8c\u5c42\u6bcf\u4e2a\u70b9\u4ec5\u7ef4\u62a4\u4e86\u4e24\u4e2a\u6570\uff0c\u4e8e\u662f\u4e0d\u96be\u60f3\u5230\u6211\u4eec\u5c06\u5012\u6570\u8fd9\u4e24\u5c42\u6539\u4e3a\u7528 `pair` \u7ef4\u62a4\u5373\u53ef\uff0c\u8fd9\u6837\u53ef\u4ee5\u53bb\u6389 $ 131072 + 65536 $ \u5de6\u53f3\u4e2a `bitset` \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u4f18\u5316\u6781\u5927\uff0c\u7a7a\u95f4\u5197\u4f59\u8f83\u591a\uff0c\u5b9e\u73b0\u5e73\u51e1\u3002\n\n\u4e0b\u9762\u63d0\u4f9b\u4e00\u4e2a\u6765\u81ea @Zpair \u7684**\u9ad8\u5999\u601d\u8def**\uff0c\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u53bb\u6389\u4e00\u53ea $ O(\\log n) $\uff0c\u663e\u7136\u8fd9\u6837\u7684**\u590d\u6742\u5ea6\u5c31\u662f\u7406\u8bba\u6b63\u786e**\u7684\u4e86\u3002\u5373\u8003\u8651\u5728\u6811\u5256\u540e\u6bcf\u4e2a\u91cd\u94fe\u4e0a\u7ef4\u62a4\u8fd9\u6574\u4e2a\u91cd\u94fe\u7684 `bitset`\uff0c\u540c\u65f6\u7c7b\u4f3c\u4e0a\u6587\u7ef4\u62a4\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u4e2d\uff0c\u6240\u6709\u6574\u4e2a\u91cd\u94fe\u7684\u67e5\u8be2\u76f4\u63a5\u8c03\u7528\uff0c\u5bb9\u6613\u8bc1\u660e\u6b8b\u7f3a\u7684\u91cd\u94fe\u67e5\u8be2\u6700\u591a\u6709 $ 3 $ \u6b21\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u5e38\u6570\uff0c\u6545\u4f18\u5316\u6389\u4e00\u53ea $ O(\\log n) $\uff0c\u5bb9\u6613\u8bc1\u660e\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u5728\u5f53\u524d\u65f6\u7a7a\u9650\u5236\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\u3002\u540c\u65f6\u82e5\u7a7a\u95f4\u65e0\u6cd5\u901a\u8fc7\u8fd8\u53ef\u8003\u8651\u5bf9\u4e8e\u6240\u6709\u70b9\u6570\u5c0f\u4e8e $ \\dfrac{v}{w} $ \u7684\u76f4\u63a5\u7528 `basic_string` \u7ef4\u62a4\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u5730\u5927\u5e45\u4f18\u5316\u7a7a\u95f4\u3002\n\n\u5f53\u7136\u8fd9\u91cc\u56e0\u4e3a\u524d\u8005\u867d\u7136\u590d\u6742\u5ea6\u9519\u8bef\u4f46\u5e38\u6570\u4e0d\u5927\u53ef\u4ee5\u901a\u8fc7\uff0c\u4e8e\u662f\u8fd9\u91cc\u76f4\u63a5\u6302\u524d\u8005\u7684\u4ee3\u7801\u4e86\u3002\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n#include <bitset>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n#define ROPNEW_NODE void* Node::operator new(size_t){static Node* P = nd; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define LIM (110000)\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, Q, F;\nstruct Edge{\n    Edge* nxt;\n    int to;\n    OPNEW;\n}ed[LIM << 1];\nROPNEW;\nEdge* head[LIM];\nint val[LIM];\nint lst(0);\n\nint dep[LIM], hson[LIM], top[LIM], fa[LIM], siz[LIM], dfn[LIM], idx[LIM];\n\nvoid dfs_pre(int p = 1, int fa = 0){\n    ::fa[p] = fa, dep[p] = dep[fa] + 1, siz[p] = 1;\n    for(auto i = head[p]; i; i = i->nxt){\n        if(SON == fa)continue;\n        dfs_pre(SON, p);\n        siz[p] += siz[SON];\n        if(siz[SON] > siz[hson[p]])hson[p] = SON;\n    }\n}\nvoid dfs_make(int p = 1, int top = 1){\n    static int cdfn(0);\n    dfn[p] = ++cdfn, idx[cdfn] = p;\n    ::top[p] = top;\n    if(hson[p])dfs_make(hson[p], top);\n    for(auto i = head[p]; i; i = i->nxt){\n        if(SON == fa[p] || SON == hson[p])continue;\n        dfs_make(SON, SON);\n    }\n}\n\nclass SegTree{\nprivate:\n    //sum is 262143\n    bitset < 30010 > tr[120000];\n    pair < int, int > base[LIM << 2];\n    #define LS (p << 1)\n    #define RS (LS | 1)\n    #define MID ((gl + gr) >> 1)\npublic:\n    void Pushup(int p, int gl, int gr){\n        if(gr - gl + 1 <= 2)return;\n        if(MID - gl + 1 == 1)tr[p][base[LS].first] = true;\n        else if(MID - gl + 1 == 2)tr[p][base[LS].first] = tr[p][base[LS].second] = true;\n        else tr[p] |= tr[LS];\n        if(gr - (MID + 1) + 1 == 1)tr[p][base[RS].first] = true;\n        else if(gr - (MID + 1) + 1 == 2)tr[p][base[RS].first] = tr[p][base[RS].second] = true;\n        else tr[p] |= tr[RS];\n    }\n    void Build(int p = 1, int gl = 1, int gr = N){\n        if(gl == gr)return base[p] = {val[idx[gl = gr]], -1}, void();\n        if(gr - gl + 1 == 2)base[p] = {val[idx[gl]], val[idx[gr]]};\n        Build(LS, gl, MID), Build(RS, MID + 1, gr);\n        Pushup(p, gl, gr);\n    }\n    auto Query(int l, int r, int p = 1, int gl = 1, int gr = N){\n        bitset < 30010 > ret; ret.reset();\n        if(l <= gl && gr <= r){\n            if(gl == gr){ret[base[p].first] = true; return ret;}\n            if(gr - gl + 1 == 2){ret[base[p].first] = ret[base[p].second] = true; return ret;}\n            return tr[p];\n        }\n        if(l <= MID)ret |= Query(l, r, LS, gl, MID);\n        if(r >= MID + 1)ret |= Query(l, r, RS, MID + 1, gr);\n        return ret;\n    }\n}st;\n\nauto Query(int s, int t){\n    bitset < 30010 > ret; ret.reset();\n    while(top[s] != top[t]){\n        if(dep[top[s]] < dep[top[t]])swap(s, t);\n        ret |= st.Query(dfn[top[s]], dfn[s]);\n        s = fa[top[s]];\n    }if(dep[s] < dep[t])swap(s, t);\n    ret |= st.Query(dfn[t], dfn[s]);\n    return ret;\n}\n\nint main(){\n    N = read(), Q = read(), F = read();\n    for(int i = 1; i <= N; ++i)val[i] = read();\n    for(int i = 1; i <= N - 1; ++i){\n        int s = read(), t = read();\n        head[s] = new Edge{head[s], t};\n        head[t] = new Edge{head[t], s};\n    }dfs_pre(), dfs_make();\n    st.Build();\n    while(Q--){\n        int M = read();\n        bitset < 30010 > ans; ans.reset();\n        for(int i = 1; i <= M; ++i){\n            int s = read() ^ (lst * F), t = read() ^ (lst * F);\n            ans |= Query(s, t);\n        }\n        int ans1 = ans.count(), ans2 = (~ans)._Find_first();\n        lst = ans1 + ans2;\n        printf(\"%d %d\\n\", ans1, ans2);\n    }\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2023_02_17 \u521d\u7a3f",
        "postTime": 1676635651,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "LG-P3603 \u96ea\u8f89 \u9898\u89e3"
    },
    {
        "content": "**\u6811\u5206\u5757**\n\n\u76f4\u63a5\u5728\u6811\u4e0a\u6492\u4e0a\u4e00\u4e9b\u5747\u5300\u7684\u5173\u952e\u70b9,\u8bbe\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a$S$,\u9884\u5904\u7406\u51fa\u4e92\u4e3a\u7956\u5b59\u5173\u7cfb\u7684\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u6570\u7684\u4fe1\u606f.$(T=maxa_i/32,bitset:O((n/S)^2T)$)\n\n\u7136\u540e\u6bcf\u4e2a\u8be2\u95ee\u8fb9\u89d2\u66b4\u529b,\u5927\u6bb5\u76f4\u63a5\u5229\u7528\u9884\u5904\u7406\u7684$bitset$\u5373\u53ef.\n\u8be2\u95ee\u590d\u6742\u5ea6:$O(q(S+n/S+T))$.\n\n\u5728\u5408\u6cd5\u7684\u7a7a\u95f4\u9650\u5236\u5185\u9884\u5904\u7406\u5c3d\u91cf\u591a\u5c31\u80fd\u5feb\u4e86.\n\n\u795e\u5947\u7684\u662f:\u624b\u6253bitset\u7adf\u7136\u66f4\u6162....\n\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define gc getchar()//(p1==p2&&(p2=(p1=buf)+fread(buf,1,size,stdin),p1==p2)?EOF:*p1++)\n#define ui unsigned\nusing namespace std;\nconst int N=1e5+10,M=3e4+10,T=M/32+5,S=(1<<16)-1;\nconst ui inf=-1;\n\ntemplate<class o> void qr(o &x) {\n\tx=0; int f=1; char c=gc;\n\twhile(!isdigit(c)){if(c=='-')f=-1; c=gc;}\n\twhile(isdigit(c))x=x*10+c-'0',c=gc;\n\tx*=f;\n}\ntemplate<class o> void qw(o x) {\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) qw(x/10);\n\tputchar(x%10+'0');\n}\ntemplate<class o> void pr1(o x) {qw(x); putchar(' ');}\ntemplate<class o> void pr2(o x) {qw(x); puts(\"\");}\n\nint n,m,root,t,flag,ans,val[N],fa[N],dep[N],son[N],sz[N],D[N],id[N],cnt;\nstruct edge{int y,next;}a[N<<1]; int len,last[N];\nvoid ins(int x,int y) {a[++len]=(edge){y,last[x]};last[x]=len;}\n\nvoid dfs(int x) {\n\tsz[x]=1; son[x]=0; D[x]=dep[x];\n\tfor(int k=last[x],y;k;k=a[k].next)\n\t\tif(!dep[y=a[k].y]) {\n\t\t\tdep[y]=dep[x]+1; fa[y]=x; dfs(y);\n\t\t\tsz[x]+=sz[y]; if(sz[son[x]]<sz[y]) son[x]=y;\n\t\t\tD[x]=max(D[x],D[y]);\n\t\t}\n\tif(D[x]-dep[x]>=t) id[x]=++cnt,D[x]=dep[x];\n}\n\nint top[N];\nvoid DFS(int x) {\n\tif(son[x]) top[son[x]]=top[x],DFS(son[x]);\n\tfor(int k=last[x],y;k;k=a[k].next) {\n\t\ty=a[k].y;\n\t\tif(y^fa[x]&&y^son[x]) DFS(top[y]=y);\n\t}\n}\n\nint sta[N],f[N],tp,c[S+5],mx;\nstruct Bitset {\n\tui a[T],s;\n\t#define R register \n\tvoid reset() {memset(a,0,sizeof a);s=0;}\n\tvoid operator |=(Bitset b) {\n\t\ts=0;\n\t\tfor(R int i=0;i<=mx;i++) s+=calc(a[i]|=b.a[i]);\n\t}\n\tinline int calc(ui x) {return c[x&S]+c[x>>16&S];}\n\tint count() {return s;}\n\tint mex() {\n\t\tR int ans=0;\n\t\twhile(a[ans]==inf) ans++;\n\t\tfor(int i=0;i<32;i++) \n\t\t\tif(!(a[ans]>>i&1)) return ans<<5|i;\n\t}\n\tvoid set(int x) {\n\t\tint y=x>>5; x&=31;\n\t\tif(!(a[y]>>x&1)) a[y]|=1U<<x,s++;\n\t}\n}bt[102][102],tmp;\nvoid dfs3(int x) {\n\tfor(int k=last[x],y;k;k=a[k].next)\n\t\tif(dep[x]<dep[y=a[k].y]) {\n\t\t\tif(id[y]) {\n\t\t\t\tint u=id[sta[tp]],v=id[y];\n\t\t\t\tfor(int z=y;z^sta[tp];z=fa[z]) bt[u][v].set(val[z]);\n\t\t\t\tfor(int i=1,z;i<tp;i++)\n\t\t\t\t\tz=id[sta[i]],(bt[z][v]=bt[z][u])|=bt[u][v];\n\t\t\t\tf[y]=sta[tp]; sta[++tp]=y;\n\t\t\t}\n\t\t\tdfs3(y); tp-=(id[y]>0);\n\t\t}\n}\n\nint lca(int x,int y) {\n\twhile(top[x]^top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]<dep[y]?x:y;\n}\n\nvoid solve(int x,int y) {\n\tint z=lca(x,y);\n\twhile(x^z&&!id[x]) \n\t\ttmp.set(val[x]),x=fa[x];\n\twhile(y^z&&!id[y]) \n\t\ttmp.set(val[y]),y=fa[y];\n\tif(x^z) {\n\t\tint p=x;\n\t\twhile(dep[f[p]]>=dep[z]) p=f[p];\n\t\tif(p^x) tmp|=bt[id[p]][id[x]];\n\t\twhile(p^z) tmp.set(val[p]),p=fa[p];\n\t}\n\tif(y^z) {\n\t\tint p=y;\n\t\twhile(dep[f[p]]>=dep[z]) p=f[p];\n\t\tif(p^y) tmp|=bt[id[p]][id[y]];\n\t\twhile(p^z) tmp.set(val[p]),p=fa[p];\n\t}\n\ttmp.set(val[z]);\n}\n\nint main() {\n\tfor(int i=1;i<=S;i++) c[i]=c[i&(i-1)]+1;\n\tqr(n); qr(m); qr(flag); t=(n<=1e4?sqrt(n)+2:n/100); root=19260817%n+1;\n\tfor(int i=1;i<=n;i++) qr(val[i]),mx=max(mx,val[i]);\n\tmx=mx>>5;\n\tfor(int i=1,x,y;i<n;i++) qr(x),qr(y),ins(x,y),ins(y,x);\n\tdep[root]=1; dfs(root); if(!id[root]) id[root]=++cnt;\n\tDFS(top[root]=root); \n\tdfs3(sta[tp=1]=root);\n\twhile(m--) {\n\t\tint k,x,y; qr(k); tmp.reset();\n\t\twhile(k--) {\n\t\t\tqr(x),qr(y);\n\t\t\tif(flag) x^=ans,y^=ans;\n\t\t\tsolve(x,y);\n\t\t}\n\t\tx=tmp.count();\n\t\ty=tmp.mex();\n\t\tans=x+y;\n\t\tpr1(x); pr2(y);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1589612647,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3603 \u3010\u96ea\u8f89\u3011"
    },
    {
        "content": "\u6a21\u62df\u8d5b\u4e2d\u9047\u5230\u4e86\u8fd9\u4e2a\u9898\uff0c\u5f53\u65f6\u6211\u8fd9\u4e2a\u6c99\u96d5\u56e0\u4e3a\u628a\u4e00\u4e2a$y$\u6253\u6210\u4e86$x$\u800c\u7206\u96f6\u3002\u56de\u6765\u91cd\u65b0\u5199\u8fd9\u9053\u9898\uff0c\u83ab\u540d\u5176\u5999\u7684\u62ff\u4e86rank1\u3002\u3002\u3002  \n\u6211\u7684\u89e3\u6cd5\u4e0e\u5176\u4ed6\u51e0\u4f4d\u7684\u9898\u89e3\u6709\u4e9b\u4e0d\u540c~~\u6211\u592a\u84bb\u4e86~~\u3002\u5e76\u6ca1\u6709\u9009\u53d6\u6240\u8c13\u7684\u5173\u952e\u70b9\uff0c\u800c\u662f\u7528\u6811\u94fe\u5256\u5206\u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e8f\u5217\u7684\u95ee\u9898\u3002  \n# \u5e8f\u5217\u95ee\u9898\u7684\u89e3\u51b3\n- \u73b0\u5728\u7684\u95ee\u9898\u662f\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u67e5\u8be2\u82e5\u5e72\u4e2a\u533a\u95f4\u7684\u5e76\u96c6\u7684\u6743\u503c\u79cd\u7c7b\u548c$mex$\uff0c\u65e0\u4fee\u6539\u64cd\u4f5c\u3002  \n- \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u7528\u4e3b\u5e2d\u6811\u89e3\u51b3\u4e86\u3002\n- \u7136\u800c\u8981\u67e5\u8be2\u7684\u662f\u533a\u95f4\u5e76\u7684\u6743\u503c\u79cd\u7c7b\u548c$mex$\uff0c\u800c\u4e14\u8fd9\u4e24\u4e2a\u4e1c\u897f\u90fd\u4e0d\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u6027\uff0c\u4e8e\u662f\u53ef\u4ee5\u653e\u5f03\u7ebf\u6bb5\u6811\u7684\u601d\u8def\u4e86\u3002  \n- \u53ef\u4ee5\u60f3\u5230\u7528\u5206\u5757\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bbe\u6bcf\u4e00\u5757\u5927\u5c0f\u4e3a$B$\n- \u8003\u8651\u5230\u70b9\u6743$\\leq 30000$\uff0c\u53c8\u8981\u5408\u5e76\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u7528$bitset$\u7ef4\u62a4\u533a\u95f4\u6743\u503c\u4fe1\u606f\u3002\n- \u8bbe$f[][]$\u4e3a\u4e00\u4e2a$bitset$\u7684\u4e8c\u7ef4\u6570\u7ec4\uff0c$f[l][r]$\u8868\u793a\u4ece\u7b2c$l$\u5757\u5230\u7b2c$r$\u5757(\u5305\u542b$l,r$)\u4e4b\u95f4\u7684\u6743\u503c\u96c6\u5408\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5728$O(n\\frac{30000}{32})$\u7684\u65f6\u95f4\u5185\u9884\u5904\u7406\u51fa\u6765\u3002\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6574\u5757\u7684\u4fe1\u606f\u53ef\u4ee5\u5728$O(\\frac{30000}{32})$\u7684\u65f6\u95f4\u5185\u89e3\u51b3\u3002\n- \u5269\u4f59\u7684\u90e8\u5206\u76f4\u63a5\u66b4\u529b\u5904\u7406\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(B)$\u3002\u8fd9\u6837\u5355\u6b21\u67e5\u8be2\u53ef\u4ee5\u505a\u5230$O(\\frac{30000}{32}+B)$\n- \u81f3\u4e8e\u533a\u95f4\u5e76\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u8bb0\u5f55\u7b54\u6848(\u6211\u7684\u4ee3\u7801\u4e2d\u7528\u7684\u662f$cur$)\uff0c\u4f9d\u6b21\u5904\u7406\u6bcf\u4e2a\u533a\u95f4\u3002\u56e0\u4e3a\u91cd\u53e0\u7684\u90e8\u5206\u5e76\u4e0d\u4f1a\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\u3002\u73b0\u5728\u5e8f\u5217\u7684\u95ee\u9898\u5df2\u7ecf\u89e3\u51b3\u4e86\u3002\n\n**\u5e8f\u5217\u5904\u7406\u90e8\u5206\u7684\u4ee3\u7801**\n```cpp\nint b[N]; // \u8bb0\u5f55\u533a\u95f4\u4e0a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5c5e\u4e8e\u54ea\u4e2a\u5757\nint L[N], R[N]; // \u6bcf\u4e2a\u5757\u7684\u5de6\u53f3\u65ad\u70b9\nbitset<W> cur; // \u67e5\u8be2\u65f6\u7528\u5230\u7684\u5168\u5c40\u53d8\u91cf\nbitset<W> f[110][110]; // \u9884\u5904\u7406\u7684 f \u6570\u7ec4\n\nvoid preWork() {\n  // \u9884\u5904\u7406\n  for (int i = 1; i <= n; ++i) {\n    // \u5148\u8ba1\u7b97\u5355\u4e2a\u5757\u7684\u6743\u503c\u60c5\u51b5\n    b[i] = (i-1) / B + 1;\n    f[b[i]][b[i]].set(a[i]);\n  }\n  // \u5904\u7406\u6bcf\u4e2a\u5757\u7684\u5de6\u53f3\u7aef\u70b9\n  for (int i = 1; i <= b[n]; ++i)\n    L[i] = R[i-1] + 1, R[i] = i * B;\n  R[b[n]] = n; // \u6700\u540e\u4e00\u4e2a\u5757\u7684\u53f3\u7aef\u70b9\u8981\u7279\u5224\n  for (int i = 1; i < b[n]; ++i)\n    for (int j = i+1; j <= b[n]; ++j) // \u8ba1\u7b97 f \u6570\u7ec4\n      f[i][j] = f[i][j-1] | f[j][j];\n}\n\nvoid queryOnBlock(int l, int r) {\n  if (b[l] == b[r]) {\n    // \u7279\u5224\u5de6\u53f3\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u5757\u5185\u7684\u60c5\u51b5\n    for (int i = l; i <= r; ++i) cur.set(a[i]);\n    return;\n  }\n  cur |= f[b[l]+1][b[r]-1]; // \u4e24\u5757\u4e4b\u95f4\u7684\u90e8\u5206\u76f4\u63a5\u67e5\u8be2\n  for (int i = l; i <= R[b[l]]; ++i) cur.set(a[i]); // \u5de6\u8fb9\u7684\u5269\u4f59\u90e8\u5206\n  for (int i = L[b[r]]; i <= r; ++i) cur.set(a[i]); // \u53f3\u8fb9\u7684\u5269\u4f59\u90e8\u5206\n}\n\nint mex(bitset<W> &s) {\n  // \u66b4\u529b\u6c42 mex\n  for (int i = 0; i < W; ++i)\n    if (!s.test(i)) return i;\n  return 1e9;\n}\n\n```\n# \u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\n\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50(\u6211\u8fd9\u4e2a\u849f\u84bb\u5199\u6302\u7684\u90e8\u5206)\u3002\u3002\u3002  \n**\u76f4\u63a5\u8d34\u4ee3\u7801\u4e86**\n```cpp\nint G[N], ed = 1, w[N]; // \u6811\u7684\u5b58\u50a8\nstruct Edge {\n  int to, nxt;\n  Edge() { to = nxt = 0; }\n  Edge(int to, int nxt) : to(to), nxt(nxt) {}\n} e[N<<1];\n\ninline void addEdge(int x, int y) {\n  e[++ed] = Edge(y, G[x]), G[x] = ed;\n  e[++ed] = Edge(x, G[y]), G[y] = ed;\n}\n\n// \u6811\u94fe\u5256\u5206\u76f8\u5173\nint dfn[N]; // dfs \u5e8f\nint fa[N]; // \u7236\u7ed3\u70b9\nint son[N]; // \u91cd\u513f\u5b50\nint top[N]; // \u91cd\u94fe\u9876\u7aef\nint size[N]; // \u5b50\u6570\u5927\u5c0f\nint dep[N]; // \u6df1\u5ea6\nint a[N]; // \u8f6c\u5316\u7684\u5e8f\u5217\n\nvoid dfs1(int x, int p) {\n  size[x] = 1, fa[x] = p;\n  for (int i = G[x]; i != 0; i = e[i].nxt) {\n    int y = e[i].to;\n    if (y == p) continue;\n    dep[y] = dep[x] + 1;\n    dfs1(y, x);\n    size[x] += size[y];\n    if (size[son[x]] < size[y])\n      son[x] = y;\n  }\n}\n\nvoid dfs2(int x, int t) {\n  static int cur = 0;\n  dfn[x] = ++cur, a[cur] = w[x], top[x] = t;\n  if (!son[x]) return;\n  dfs2(son[x], t);\n  for (int i = G[x]; i != 0; i = e[i].nxt) {\n    int y = e[i].to;\n    if (y == son[x] || y == fa[x]) continue;\n    dfs2(y, y);\n  }\n}\n\nvoid queryOnTree(int x, int y) {\n  // \u6811\u4e0a\u67e5\u8be2\n  while (top[x] != top[y]) {\n    if (dep[top[x]] < dep[top[y]]) swap(x, y);\n    queryOnBlock(dfn[top[x]], dfn[x]);\n    x = fa[top[x]];\n  }\n  if (dfn[x] > dfn[y]) swap(x, y);\n  queryOnBlock(dfn[x], dfn[y]);\n}\n```\n# \u603b\u4ee3\u7801\n```cpp\n// 2598ms 57.76MB \u65e0O2\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <bitset>\n#define LL long long\nusing namespace std;\n\ninline int getint() {\n  int x = 0, f = 1; char c = getchar();\n  while (!isdigit(c)) { if (c == '-') f = 0; c = getchar(); }\n  while (isdigit(c)) { x = (x*10) + (c-'0'); c = getchar(); }\n  return f ? x : -x;\n}\n\nconst int N = 1e5 + 10;\nconst int B = 1e3;\nconst int W = 30001;\n\nint n, m, flag; // flag \u5224\u65ad\u662f\u5426\u9700\u8981\u5f02\u6216\nint ans1, ans2, lastans; // ans1 \u4e3a\u6743\u503c\u79cd\u7c7b\uff0cans2 \u4e3a\u6743\u503c mex\n\nint G[N], ed = 1, w[N]; // \u6811\u7684\u5b58\u50a8\nstruct Edge {\n  int to, nxt;\n  Edge() { to = nxt = 0; }\n  Edge(int to, int nxt) : to(to), nxt(nxt) {}\n} e[N<<1];\n\ninline void addEdge(int x, int y) {\n  e[++ed] = Edge(y, G[x]), G[x] = ed;\n  e[++ed] = Edge(x, G[y]), G[y] = ed;\n}\n\n// \u6811\u94fe\u5256\u5206\u76f8\u5173\nint dfn[N]; // dfs \u5e8f\nint fa[N]; // \u7236\u7ed3\u70b9\nint son[N]; // \u91cd\u513f\u5b50\nint top[N]; // \u91cd\u94fe\u9876\u7aef\nint size[N]; // \u5b50\u6570\u5927\u5c0f\nint dep[N]; // \u6df1\u5ea6\nint a[N]; // \u8f6c\u5316\u7684\u5e8f\u5217\n\nvoid dfs1(int x, int p) {\n  size[x] = 1, fa[x] = p;\n  for (int i = G[x]; i != 0; i = e[i].nxt) {\n    int y = e[i].to;\n    if (y == p) continue;\n    dep[y] = dep[x] + 1;\n    dfs1(y, x);\n    size[x] += size[y];\n    if (size[son[x]] < size[y])\n      son[x] = y;\n  }\n}\n\nvoid dfs2(int x, int t) {\n  static int cur = 0;\n  dfn[x] = ++cur, a[cur] = w[x], top[x] = t;\n  if (!son[x]) return;\n  dfs2(son[x], t);\n  for (int i = G[x]; i != 0; i = e[i].nxt) {\n    int y = e[i].to;\n    if (y == son[x] || y == fa[x]) continue;\n    dfs2(y, y);\n  }\n}\n\nint b[N]; // \u8bb0\u5f55\u533a\u95f4\u4e0a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u5c5e\u4e8e\u54ea\u4e2a\u5757\nint L[N], R[N]; // \u6bcf\u4e2a\u5757\u7684\u5de6\u53f3\u65ad\u70b9\nbitset<W> cur; // \u67e5\u8be2\u65f6\u7528\u5230\u7684\u5168\u5c40\u53d8\u91cf\nbitset<W> f[110][110]; // \u9884\u5904\u7406\u7684 f \u6570\u7ec4\n\nvoid preWork() {\n  // \u9884\u5904\u7406\n  for (int i = 1; i <= n; ++i) {\n    // \u5148\u8ba1\u7b97\u5355\u4e2a\u5757\u7684\u6743\u503c\u60c5\u51b5\n    b[i] = (i-1) / B + 1;\n    f[b[i]][b[i]].set(a[i]);\n  }\n  // \u5904\u7406\u6bcf\u4e2a\u5757\u7684\u5de6\u53f3\u7aef\u70b9\n  for (int i = 1; i <= b[n]; ++i)\n    L[i] = R[i-1] + 1, R[i] = i * B;\n  R[b[n]] = n; // \u6700\u540e\u4e00\u4e2a\u5757\u7684\u53f3\u7aef\u70b9\u8981\u7279\u5224\n  for (int i = 1; i < b[n]; ++i)\n    for (int j = i+1; j <= b[n]; ++j) // \u8ba1\u7b97 f \u6570\u7ec4\n      f[i][j] = f[i][j-1] | f[j][j];\n}\n\nvoid queryOnBlock(int l, int r) {\n  if (b[l] == b[r]) {\n    // \u7279\u5224\u5de6\u53f3\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u5757\u5185\u7684\u60c5\u51b5\n    for (int i = l; i <= r; ++i) cur.set(a[i]);\n    return;\n  }\n  cur |= f[b[l]+1][b[r]-1]; // \u4e24\u5757\u4e4b\u95f4\u7684\u90e8\u5206\u76f4\u63a5\u67e5\u8be2\n  for (int i = l; i <= R[b[l]]; ++i) cur.set(a[i]); // \u5de6\u8fb9\u7684\u5269\u4f59\u90e8\u5206\n  for (int i = L[b[r]]; i <= r; ++i) cur.set(a[i]); // \u53f3\u8fb9\u7684\u5269\u4f59\u90e8\u5206\n}\n\nvoid queryOnTree(int x, int y) {\n  // \u6811\u4e0a\u67e5\u8be2\n  while (top[x] != top[y]) {\n    if (dep[top[x]] < dep[top[y]]) swap(x, y);\n    queryOnBlock(dfn[top[x]], dfn[x]);\n    x = fa[top[x]];\n  }\n  if (dfn[x] > dfn[y]) swap(x, y);\n  queryOnBlock(dfn[x], dfn[y]);\n}\n\nint mex(bitset<W> &s) {\n  // \u66b4\u529b\u6c42 mex\n  for (int i = 0; i < W; ++i)\n    if (!s.test(i)) return i;\n  return 1e9;\n}\n\nint main() {\n  cin >> n >> m >> flag;\n  for (int i = 1; i <= n; ++i) w[i] = getint();\n  for (int i = 1; i < n; ++i) {\n    int x = getint(), y = getint();\n    addEdge(x, y);\n  }\n  dfs1(1, 0), dfs2(1, 1);\n  preWork();\n  for (int i = 1; i <= m; ++i) {\n    cur.reset();\n    int num = getint();\n    for (int j = 1; j <= num; ++j) {\n      int x = getint() ^ (flag*lastans);\n      int y = getint() ^ (flag*lastans);\n      queryOnTree(x, y);\n    }\n    ans1 = cur.count(), ans2 = mex(cur);\n    lastans = ans1 + ans2;\n    printf(\"%d %d\\n\", ans1, ans2);\n  }\n  return 0;\n}\n```\n",
        "postTime": 1553507452,
        "uid": 50131,
        "name": "GaoZiyou",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3] P3603 \u96ea\u8f89"
    },
    {
        "content": "\u7528\u538b64\u4f4d\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u72b6\u6001\uff0c1\u8868\u793a\u6709\u8fd9\u4e2a\u6570\u3002\n\n\u5047\u8bbe\u6570\u7684\u8303\u56f4\u4e3aU\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\n\nO(U/64)\u5408\u5e76\u4e24\u4e2a\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u6bcf\u4f4d\u90fdor\u4e00\u4e0b\n\nO(1)\u5355\u70b9\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u5355\u70b9or\u4e00\u4e0b\n\nO(2^16)+O(U/64\\*4)\u5f97\u5230num\uff0c\u4e5f\u5c31\u662f\u9884\u5904\u74062^16\u4e4b\u5185\u7684\u6570\u76841\u7684\u4e2a\u6570\uff0c\n\n\u5bf9\u6bcf\u4e00\u4f4d\u6211\u4eec\u628a64\u4f4d\u62c6\u62104\u4efd\u5f97\u5230\u5176num\n\nO(U/64+3)\u5f97\u5230mex,\u4e5f\u5c31\u662f\u5148\u627e\u5230\u672a\u6ee1\u7684\u90a3\u4e00\u4f4d\uff0c\u4e4b\u540e\u5c31\u662f\u8981\u627e\u672b\u4f4d\u76840\u3002\n\n+1\uff0c\u5c31\u662f\u627e\u672b\u4f4d\u76841\u3002x&-x\u5373\u53ef\u3002\u4f46\u8fd8\u8981log2?\u8ddf\u524d\u9762\u7c7b\u4f3c\uff0c\u9884\u5904\u74062^22\u4e4b\u5185\u7684log2\u5373\u53ef\u3002\n\n\u73b0\u5728\u53ef\u4ee5\u6811\u4e0a\u83ab\u961f\u4e86\uff1f\n\n\u7136\u800c\u670950\u5206\u5f3a\u5236\u5728\u7ebf\u3002\n\n\u6709\u4e00\u4e2a\u7c7b\u4f3c\u5206\u5757\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u627e\u6839\u53f7\u4e2a\u5173\u952e\u70b9\u4f7f\u5f97\u4efb\u4f55\u4e00\u6761\u81ea\u4e0a\u5411\u4e0b\u7684\u8def\u5f84\u6bcf\u6839\u53f7\u957f\u5ea6\u90fd\n\n\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u3002\u8fd9\u53ea\u7528dp\u4e00\u4e0b\u6700\u8fdc\u975e\u5173\u952e\u70b9\u513f\u5b50\u5c31\u53ef\u4ee5\u5f97\u5230\u3002\n\n\u4e4b\u540e\u9884\u5904\u7406\u6bcf\u4e2a\u5173\u952e\u70b9\u5230\u6bcf\u4e2a\u7238\u7238\u7684\u8def\u5f84\u7684\u72b6\u6001\uff0c\n\n\u5bf9\u6bcf\u4e2a\u8be2\u95ee\uff0c\u628a\u4ed6\u62c6\u6210x->fx0->fx->lca->fy->fy0->y\u8fd9\u6837\u7684\u8def\u5f84\uff0c\n\n\u5176\u4e2dfx,fy\u90fd\u662f\u5173\u952e\u70b9\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5O(\u6839\u53f7)\u65f6\u95f4\u89e3\u51b3\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing std::swap;\nusing std::memset;\n\nvoid chmax(int &x,int y)\n{\n    if (x<y) x=y;\n}\n#define ull unsigned long long\n#define L 468//\u538b64\u4f4d\u540e\u7684\u8303\u56f4=[0,L] \n#define U 30000\n#define N 100100\n#define K 500//\u5757\u7684\u5927\u5c0f \nint ans;\n#define S 65535\nint Num[S+5];\n#define kcz 2097152//2^21\nint Log[kcz+2];\nint init_Num()\n{\n    for (int x=1;x<=S;++x) Num[x]=Num[x-(x&-x)]+1;\n    for (int x=0;x<=21;++x) Log[1<<x]=x;\n}\nint num1(const ull &x)\n{\n    return Num[x&S]+Num[(x>>16)&S]+Num[(x>>32)&S]+Num[(x>>48)&S];\n}\nstruct bitset\n{\n    ull a[L+2];int q[L+2],top;\n    void init()\n    {\n        memset(a,0,sizeof(a));top=0;\n    }\n    void operator |=(int x)\n    {\n        if (!a[x>>6]) q[++top]=x>>6;\n        a[x>>6]|=1LL<<(x&63);\n    }\n    void operator |=(const bitset &x)\n    {\n        for (int i=1;i<=x.top;++i) \n        {\n           if (!a[x.q[i]]) q[++top]=x.q[i];    \n           a[x.q[i]]|=x.a[x.q[i]];\n        }\n    }\n    void num()\n    {\n        ans=0;\n        for (int i=1;i<=top;++i) ans+=num1(a[q[i]]);\n    }\n    void mex()\n    {\n        int i=0;\n        for (;!(a[i]+1);++i); \n        ull j=(a[i]+1)&(-a[i]-1);\n        if (j<=kcz) j=Log[j]; else\n        if (!(j>>44)) j=Log[j>>22]+22; else\n         j=Log[j>>44]+44;\n        printf(\"%d %d\\n\",ans,(i<<6)+j);ans+=(i<<6)+j;\n    }\n}now;\nint w[N];\nint t[N];\nstruct edge\n{\n    int to,next;\n}l[N<<1];int e;\n#define add_e(x,y) l[++e]=(edge){y,t[x]};t[x]=e;\nint f[N],deep[N];\nint q[N],head,tail,x,y,i;\nint fa[N];bool is[N];\nbitset* a[N];\n\nint fa_num[N];\nvoid init_bit(int x)\n{\n    int y=fa[x];\n    if (!y) return ;\n    a[x]=new bitset [fa_num[x]=fa_num[y]+1];\n    now.init();\n    now|=w[x];\n    for (y=f[x];!is[y];y=f[y]) now|=w[y];\n    now|=w[y];\n    a[x][0]=now;\n    for (int num=1;fa[y];y=fa[y],++num) { now|=a[y][0]; a[x][num]=now;}\n}\n\nint dp()\n{\n    q[tail=1]=1;deep[1]=1;\n    for (head=1;head<=tail;++head)\n    {\n        x=q[head];\n        for (i=t[x];i;i=l[i].next)\n        if ((y=l[i].to)!=f[x])\n        {\n            q[++tail]=y;\n            f[y]=x;\n            deep[y]=deep[x]+1;\n        }\n    }\n    static int mx[N];\n    for (head=tail;head;--head)\n    {\n        x=q[head];\n        for (i=t[x];i;i=l[i].next)\n        if ((y=l[i].to)!=f[x]) chmax(mx[x],mx[y]);\n        if ((++mx[x])==K) { is[x]=1;mx[x]=0; }\n    }\n    for (head=1;head<=tail;++head)\n    {\n        x=q[head];\n        int father;\n        if (is[x]) {init_bit(x);father=x;}\n        else \n        if (!(father=fa[x])) continue;\n        for (i=t[x];i;i=l[i].next)\n        if ((y=l[i].to)!=f[x]) fa[y]=father;\n    }\n}\n\nvoid baoli(int x,int y)\n{\n    if (deep[x]<deep[y]) swap(x,y);\n    for (;deep[x]>deep[y];x=f[x]) now|=w[x];\n    for (;x!=y;x=f[x],y=f[y]) {now|=w[x];now|=w[y];}\n    now|=w[x];\n}\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    int n,m,type,i,x,y;\n    scanf(\"%d%d%d\",&n,&m,&type);\n    for (i=1;i<=n;++i) scanf(\"%d\",w+i);\n    for (i=1;i<n;++i)\n    {\n        scanf(\"%d%d\",&x,&y);\n        add_e(x,y) add_e(y,x) \n    }\n    dp();\n\n    init_Num();\n    int num,fx0,fx,numx,fy0,fy,numy;\n    while (m--)\n    {\n        scanf(\"%d\",&num);\n        now.init();\n        while (num--) \n        { scanf(\"%d%d\",&x,&y); \n          if (type) { x^=ans;y^=ans; }\n          if (is[x]) {fx0=x;numx=-1;}\n          else { fx0=fa[x];numx=-2; }\n          if (is[y]) { fy0=y;numy=-1; }\n          else { fy0=fa[y];numy=-2; }\n          fx=x;fy=y;\n          while (fa[fx]!=fa[fy]) \n          if (deep[fa[fx]]>deep[fa[fy]]) { ++numx;fx=fa[fx]; }\n          else { ++numy;fy=fa[fy]; }\n          if (deep[fx]<=deep[fx0]) \n          {baoli(x,fx0);\n           if (numx>=0) now|=a[fx0][numx];\n           }\n          if (deep[fy]<=deep[fy0]) \n          {baoli(y,fy0);\n           if (numy>=0) now|=a[fy0][numy];\n          }\n          baoli(fx,fy);\n        }\n        now.num();\n        now.mex();\n    }\n}\n```\n\n",
        "postTime": 1485942726,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3603 \u3010\u96ea\u8f89\u3011"
    },
    {
        "content": "\u5b98\u65b9\u9898\u89e3\uff1a https://www.luogu.org/discuss/show?postid=7867\n",
        "postTime": 1486036545,
        "uid": 141,
        "name": "w",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3603 \u3010\u96ea\u8f89\u3011"
    }
]