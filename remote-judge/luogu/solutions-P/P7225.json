[
    {
        "content": "### \u9898\u610f\u7b80\u8ff0\uff1a  \n\n\u901a\u8fc7 **\u4ea4\u4e92** \u6a21\u62df\u8d70\u8ff7\u5bab\u4ece\u800c\u83b7\u5f97\u4e00\u4e2a\u6ee1\u8db3\u67d0\u4e9b\u6027\u8d28\u7684\u8ff7\u5bab\u7684\u5730\u56fe\u3002  \n\n\u4e5f\u5c31\u662f\u63a2\u7d22\u8ff7\u5bab\u5566\u3002  \n\n~~\u6709\u70b9\u50cf [level13](https://likexia.gitee.io/level13/)~~  \n\n### \u9898\u76ee\u89e3\u6cd5\uff1a  \n\n\u4e0d\u9893\u5e9f\u4e86\uff0c\u5f00\u59cb\u8bb2\u6b63\u89e3\u3002  \n\n\u8fd9\u4e2a $\\rm dfs$ \u8d70 **\u786e\u5b9a** \u8ff7\u5bab\u5e94\u8be5\u5927\u5bb6\u90fd\u4f1a\u5427\u3002  \n\n\u4e0d\u4f1a\u6709\u5173\u7cfb\uff0c\u56e0\u4e3a\u60a8\u542c\u4e0d\u61c2\u6211\u5728\u8bf4\u4ec0\u4e48\u3002  \n\n\u7136\u540e\u5c31\u6a21\u62df $\\rm dfs$ \u8d70\u8ff7\u5bab\u5c31\u884c\u4e86\u3002  \n\n\u6bcf\u6b65\u5f80\u56db\u4e2a\u65b9\u5411\u90fd\u63a2\u7d22\u4e00\u4e0b\uff0c\u76f4\u5230\u78b0\u58c1\u8fd4\u56de\u3002  \n\n\u7136\u540e\u5c31\u662f\u6ce8\u610f\u4e0d\u8981\u8d70\u56de\u5934\u8def\u3002  \n\n\u5177\u4f53\u89c1\u4ee3\u7801\uff0c\u4e0d\u7136\u4f1a\u56e0\u6b65\u6570\u8fc7\u591a $\\color{red}\\rm WA$\u3002  \n\n### \u6b63\u786e\u4ee3\u7801\uff1a  \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nextern \"C\" bool move_to(char position);\nint dta[505][505];\nconst int dx[]={-1,0,1,0},dy[]={0,-1,0,1};\nconst char ch[]={'W','A','S','D'};\nvoid dfs(int x,int y){\n\tdta[x][y]=1;\n\tfor(register int i=0;i<4;++i){\n\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\tif(~dta[xx][yy]){\n\t\t\tcontinue;\n\t\t}\n\t\tbool tmp=move_to(ch[i]);\n\t\tif(!tmp){\n            dta[xx][yy]=0;\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(xx,yy);\n\t\tif(i&1)move_to(ch[4-i]);\n\t\telse move_to(ch[2-i]);\n\t}\n\treturn;\n}\nextern \"C\" string find_out_map(int x,int y,int n){\n\tmemset(dta,-1,sizeof(dta));\n\tdfs(x,y);\n\tstd::string ans=\"\";\n\tfor(register int i=1;i<=n;++i){\n\t\tfor(register int j=1;j<=n;++j){\n\t\t\tif(dta[i][j]==1)ans+='0';\n\t\t\telse ans+='1';\n\t\t}\n\t}\n\treturn ans;\n}\n```\n\n\u5982\u679c\u60a8\u6ca1\u6709\u770b\u61c2\u8fd9\u7bc7\u9898\u89e3\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u95ee\u6211\uff0c\u6211\u5c06\u4f1a\u56de\u7b54\u60a8\u7684\u95ee\u9898\u5e76\u4e14\u4fee\u6539\u8fd9\u7bc7\u9898\u89e3\uff0c\u4f7f\u5b83\u53d8\u5f97\u66f4\u52a0\u901a\u4fd7\u6613\u61c2\uff0c\u670d\u52a1\u66f4\u591a\u7684 $\\text{OIer}$\u3002  \n\u5982\u679c\u60a8\u770b\u61c2\u4e86\u8fd9\u7bc7\u9898\u89e3\uff0c\u53ef\u4ee5\u70b9\u4e2a\u8d5e\uff0c\u4f7f\u8fd9\u7bc7\u9898\u89e3\u7684\u6392\u540d\u4e0a\u5347\uff0c\u670d\u52a1\u66f4\u591a\u7684 $\\text{OIer}$\u3002  \n",
        "postTime": 1610442291,
        "uid": 183609,
        "name": "hhoppitree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P7225 \u3010[RC-04] \u8d70\u8ff7\u5bab\u3011"
    },
    {
        "content": "#### [~~\u65e0\u803b\u5730\u63a8\u9500\u4e2a\u4eba\u535a\u5ba2qwq~~](https://www.luogu.com.cn/blog/ling-XAIqwq/solution-p7225)\n\n#### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P7225)\n\n------------\n\n\u8fd9\u662f\u672c\u849f\u84bb\u505a\u8fc7\u7684\u548c\u5199\u9898\u89e3\u7684\u7b2c\u4e00\u9053\u4ea4\u4e92\u9898\uff0c\u6c42\u8d44\u74f7qwq\n\n\u8fd9\u9053\u9898\u5927\u81f4\u4e0a\u662f\u7ed9\u5b9a\u6211\u4eec\u8d77\u59cb\u7684\u5750\u6807\uff0c\u8ba9\u6211\u4eec\u591a\u6b21\u67e5\u8be2\u5e76\u63a2\u7d22\u51fa\u5468\u56f4\u7684\u5730\u5f62\uff0c\u6700\u540e\u8f93\u51fa\u5730\u56fe\n\n\u5176\u5b9e\u5b9e\u8d28\u4e0a\u5c31\u662f\u4e00\u9053\u6c42\u8fde\u901a\u5757\u95ee\u9898\uff0c\u5373\u6c42\u51fa\u6240\u6709\u80fd\u8d70\u5230\u7684\u683c\u5b50\uff0c\u53ea\u9700\u8981\u4ece\u8d77\u70b9\u5f00\u59cbDFS\uff0c\u5e76\u5c06\u5730\u56fe\u8bb0\u5f55\u4e0b\u6765\u5373\u53ef\n\n\u51e0\u4e2a\u6ce8\u610f\u70b9\u5728\u4e8e\n\n> 1. \u6ca1\u63a2\u7d22\u8fc7\u7684\u70b9\u5728\u8f93\u51fa\u65f6\u4e5f\u8981\u89c6\u4e3a\u5899\n>\n> 1. \u63a2\u7d22\u8fc7\u4e00\u4e2a\u70b9\u540e\u4e00\u5b9a\u8981\u53cd\u5411```move_to```\u4e00\u4e0b\u4ee5\u56de\u5230\u539f\u4f4d\uff0c\u5426\u5219\u4e0b\u6b21\u67e5\u8be2\u65f6\u4f1a\u89c6\u4f5c\u4ee5\u4f60\u8d70\u5230\u7684\u4f4d\u7f6e\u8fdb\u884c\u56db\u5468\u67e5\u8be2\n>\n> 1. \u63a2\u7d22\u8fc7\u7684\u70b9\u4e00\u5b9a\u4e0d\u8981\u518d\u53bb\u63a2\u7d22\u8d70\u56de\u5934\u8def\uff0c\u5426\u5219\u4f1a\u91cd\u590d\u8c03\u7528\uff0c\u7136\u540e\u5927\u7ea2\u5927\u7d2b\uff08\n>\n> 1. \u7531\u4e8e\u51fd\u6570\u53ef\u80fd\u88ab\u591a\u6b21\u8c03\u7528\uff0c\u6240\u4ee5\u6ce8\u610f\u8981\u6570\u7ec4\u521d\u59cb\u5316\u8d4b\u503c\n\n\u6ce8\u610f\u4e86\u8fd9\u4e9b\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u5730AC\u8fd9\u9053\u9898\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nextern \"C\" bool move_to(char position);\nchar dire[4] = {'W', 'A', 'D', 'S'};\nmap <char, pair <int, int> > direx;\nint mp[510][510];\nvoid dfs (int x, int y)\n{\n\tmp[x][y] = 0; //\u786e\u5b9a\u4e3a\u8def\n\tint lx, ly;\n\tchar ldire;\n\tfor (int i = 0; i < 4; ++i) //\u56db\u65b9\u5411\u63a2\u7d22 \n\t{\n\t\tldire = dire[i];\n\t\tlx = x + direx[ldire].first;\n\t\tly = y + direx[ldire].second;\n\t\tif (mp[lx][ly] != -1) continue; //\u5982\u679c\u63a2\u7d22\u8fc7\u5c31\u522b\u53bb\u4e86 \n\t\tif (move_to (ldire)) //\u8d70\u5230\u8def\u4e0a \n\t\t{\n\t\t\tdfs (lx, ly);\n\t\t\tmove_to (dire[3 - i]); //\u4e0d\u8981\u5fd8\u8bb0\u8fd4\u56de \n\t\t}\n\t\telse mp[lx][ly] = 1; //\u53d1\u73b0\u5899 \n\t} \n\treturn;\n}\nextern \"C\" string find_out_map (int X, int Y,int N){\n\tmemset (mp, -1, sizeof(mp));\n\t//\u6253\u4e0a\u8ff7\u96fe \n\tdirex['W'] = make_pair(-1, 0);\n\tdirex['A'] = make_pair(0, -1);\n\tdirex['S'] = make_pair(1, 0);\n\tdirex['D'] = make_pair(0, 1);\n\tstring str;\n\tdfs(X, Y);\n\tfor (int i = 1; i <= N; ++i)\n\t\tfor (int j = 1; j <= N; ++j)\n\t\t\tstr.push_back(mp[i][j] == 0 ? '0' : '1');\n\t//\u63a2\u7d22\u8fc7\u7684\u8def\u4e3a0\uff0c\u5176\u4f59\uff08\u5899\u3001\u8ff7\u96fe\uff09\u4e3a1\n\treturn str;\n}\n```\n\n\u81f3\u6b64\uff0c\u6109\u5febAC\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/om0v7m4a.png)\n\n\u6700\u540e\u6c42\u8d5e\u6c42\u8d44\u74f7QwQ",
        "postTime": 1610857553,
        "uid": 260061,
        "name": "Karl_Aurora",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P7225 \u3010[RC-04] \u8d70\u8ff7\u5bab\u3011"
    },
    {
        "content": "### \u9898\u610f\uff1a\n\u7ed9\u51fa\u4e00\u4e2a\u8ff7\u5bab\u548c\u8d77\u59cb\u70b9\uff0c\u8981\u6c42\u63a2\u7d22\u51fa\u6240\u6709\u6240\u6709\u80fd\u5230\u8fbe\u7684\u683c\u5b50\uff0c\u6700\u540e\u8f93\u51fa\u8ff7\u5bab\u3002\n### \u601d\u8def\uff1a\n\u8d70\u8ff7\u5bab\u53ef\u4ee5\u7528\u6df1\u641c\uff08DFS\uff09\u89e3\u51b3\u3002\u6211\u4eec\u4ece\u8d77\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u5982\u679c\u4e0a\u4e0b\u5de6\u53f3\u4e2d\u7684\u4e00\u4e2a\u683c\u5b50\u4e0d\u662f\u969c\u788d\uff0c\u5219\u7ee7\u7eed\u641c\u7d22\u90a3\u4e2a\u683c\u5b50\uff0c\u800c\u4e14\u9047\u5230\u969c\u788d\u5c31\u8981\u8fd4\u56de\u3002\u4f46\u662f\u6709\u51e0\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a\n1. \u6bcf\u6b21\u641c\u5b8c\u4e00\u4e2a\u70b9\u540e**\u4e00\u5b9a\u8981\u56de\u6eaf**\uff0c\u4e0d\u7136\u4f1a\u56e0\u6b65\u6570\u8fc7\u591a\u800c\u51fa\u9519\u3002\n2. \u8bb0\u5f97**\u521d\u59cb\u5316**\u3002\n\n### Code:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=510,dir[4][2]={{-1,0},{0,-1},{1,0},{0,1}};\nbool c[N][N],pd[N][N];\nconst string pos=\"WASD\";\nextern \"C\" bool move_to(char position);\nvoid dfs(int x,int y){\n\tpd[x][y]=true;//\u6807\u8bb0\u8bbf\u95ee\u8fc7\n\tfor(int i=0;i<4;i++){\n\t\tint cx=x+dir[i][0],cy=y+dir[i][1];\n\t\tif(pd[cx][cy])continue;\n\t\tif(move_to(pos[i])){//\u53ef\u4ee5\u8d70\u5230\u62d3\u5c55\u7ed3\u70b9(cx,xy)\n\t\t\tc[cx][cy]=false;//\u6807\u8bb0\u4e3a\u8def\n\t\t\tdfs(cx,cy);\n            //\u91cd\u8981\u7684\u56de\u6eaf\n\t\t\tif(pos[i]=='W')move_to('S');\n\t\t\telse if(pos[i]=='A')move_to('D');\n\t\t\telse if(pos[i]=='S')move_to('W');\n\t\t\telse move_to('A');\n\t\t}\n\t\telse c[cx][cy]=true;//\u6807\u8bb0\u4e3a\u969c\u788d\n\t\tpd[cx][cy]=true;//\u6807\u8bb0\u8bbf\u95ee\u8fc7\n\t} \n}\nextern \"C\" string find_out_map(int x,int y,int n){\n\tmemset(c,true,sizeof(c));\n\tmemset(pd,false,sizeof(pd));//\u521d\u59cb\u5316\n\tc[x][y]=false,dfs(x,y);\n\tstring ans=\"\";//\u5b58\u50a8\u7b54\u6848 \n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(c[i][j])ans+='1';\n\t\t\telse ans+='0';\n        }\n    }\n\treturn ans;\n}\n```",
        "postTime": 1680006490,
        "uid": 653000,
        "name": "bigclever",
        "ccfLevel": 3,
        "title": "P7225\u9898\u89e3"
    },
    {
        "content": "~~IO \u4ea4\u4e92\u4e0d\u9999\u5417~~\n\n# $\\text{Solution}$\n\n\u5f88\u660e\u663e\uff0c\u8d70\u8ff7\u5bab\u7684\u9898\u90fd\u662f\u4f7f\u7528**\u641c\u7d22**\u6765\u89e3\u51b3\u7684\u3002\n\n\u6240\u4ee5\u6846\u67b6\u957f\u8fd9\u6837\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nextern \"C\" bool move_to(char position);\nint p[501][501];//p \u4e3a\u8ff7\u5bab\u5730\u56fe\uff0c\u521d\u59cb\u503c\u4e3a -1\nint dx[]={-1,0,1,0};\nint dy[]={0,-1,0,1};\nchar ch[]={'W','A','S','D'};\nvoid dfs(int x, int y){\n\n}\nextern \"C\" string find_out_map(int x, int y, int n){\n\t//\u4f1a\u8c03\u7528 dfs()\n}\n```\n\n`find_out_map` \u51fd\u6570\u5c31\u662f\u904d\u5386\u5730\u56fe\u5b58\u50a8\u7b54\u6848\u3002\n\n`dfs` \u51fd\u6570\u4e3a\u641c\u7d22\u51fd\u6570\uff0c\u6bcf\u6b21\u5f80\u56db\u4e2a\u65b9\u5411\u63a2\u7d22\uff0c\u78b0\u5230\u5899\u58c1\u5219\u8fd4\u56de\uff0c\u5982\u679c\u8d70\u5230\u503c\u4e3a `-1` \u7684\u70b9\u5219\u66f4\u65b0\u3002\n\n\u6ce8\uff1a\u6709\u4e2a\u5c0f\u6280\u5de7\uff1a`~`\uff08\u6309\u4f4d\u53d6\u53cd\uff09\uff0c\u5176\u4e2d `~(-1)=0`\uff0c`~0=-1`\uff0c`~1=-2`\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u88ab\u66f4\u65b0\u8fc7\u3002\n\n# $\\text{Code}$\n\n`find_out_map`\uff1a\n\n```cpp\nmemset(p,-1,sizeof(p));\ndfs(x,y);\nstring v=\"\";\nfor(register int i=1;i<=n;++i)\n\tfor(register int j=1;j<=n;++j)\n\t\tif(p[i][j]==1) v+='0';//\u8def\n\t\telse v+='1';//\u5899\nreturn v;\n```\n\n`dfs`\uff1a\n\n```cpp\np[x][y]=1;\nfor(register int i=0;i<4;++i){\n\tint nx=x+dx[i],ny=y+dy[i];\n\tif(~p[nx][ny]) continue;//\u5c0f\u6280\u5de7\n\tbool can=move_to(ch[i]);//\u4e0d\u662f\u5899\u58c1\n    if(!can){\n\t\tp[nx][ny]=0;\n\t\tcontinue;\n\t}\n\tdfs(nx,ny);//\u9012\u5f52\n    //\u8fd9\u91cc\u627e\u627e\u89c4\u5f8b\u5c31\u884c\u4e86\n\tif(i&1) move_to(ch[4-i]);\n\telse move_to(ch[2-i]);\n}\nreturn;\n```",
        "postTime": 1631421824,
        "uid": 142548,
        "name": "int32",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7225 [RC-04] \u8d70\u8ff7\u5bab"
    },
    {
        "content": "\u4e00\u9053\u6709\u8da3\u7684\u4ea4\u4e92\u9898\uff08\u96fe\uff09\n\n\u9898\u610f\u5c31\u662f\u4f60\u5728\u4e00\u4e2a\u8ff7\u5bab\u91cc\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5c1d\u8bd5\u5f80\u4e00\u4e2a\u65b9\u5411\u8d70\u4e00\u6b65\uff0c\u4ea4\u4e92\u5e93\u4f1a\u8fd4\u56de\u662f\u5426\u6210\u529f\uff08\u5373\u8be5\u65b9\u5411\u662f\u5426\u6709\u5899\uff09\uff0c\u5982\u679c\u6210\u529f\u5373\u5411\u8be5\u65b9\u5411\u8d70\u4e00\u6b65\u3002\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u8ff7\u5bab\u7684\u5730\u56fe\u3002\n\n\u8003\u8651 dfs \u8d70\u8ff7\u5bab\u7684\u8fc7\u7a0b\u662f\u600e\u6837\u7684\uff0c\u6bcf\u6b21\u90fd\u662f**\u770b 4 \u4e2a\u65b9\u5411\u662f\u5426\u6709\u8def**\uff0c\u5982\u679c\u6709\u5219\u9012\u5f52\u8c03\u7528\u7ee7\u7eed\u8d70\u3002\n\n\u663e\u7136\u8fd9\u9898\u7684\u8fc7\u7a0b\u4e0e dfs \u8d70\u8ff7\u5bab\u57fa\u672c\u4e00\u6837\u3002\u6bcf\u6b21\u5411 4 \u4e2a\u65b9\u5411\u5c1d\u8bd5\u79fb\u52a8\uff0c\u5982\u679c\u6210\u529f\u4e86\u5219\u5411\u8be5\u65b9\u5411\u524d\u8fdb\u4e00\u6b65\u5e76\u7ee7\u7eed\u3002\n\n\u6ce8\u610f\u51e0\u4e2a\u8981\u70b9\uff1a\n\n1. dfs \u8c03\u7528\u5b8c\u4e00\u5b9a\u8981\u8d70\u56de\u6765\uff1b\n2. \u8d70\u8fc7\u7684\u70b9\u4e0d\u8981\u91cd\u590d\u8d70\uff1b\n3. \u6ca1\u8d70\u8fc7\u7684\u70b9\u9ed8\u8ba4\u4e3a\u5899\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u4e0d\u4e3a\u5899\u5219\u4e00\u5b9a\u80fd\u8d70\u5230\uff08\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\uff09\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nextern \"C\" bool move_to(char position);\nint dx[4] = {1, -1, 0, 0},\n    dy[4] = {0, 0, 1, -1};\nchar ch[4] = {'S', 'W', 'D', 'A'};\nint to[4] = {1, 0, 3, 2};\nint mp[520][520];\nvoid dfs(int x, int y) {\n    mp[x][y] = 0;\n    for (int i = 0; i < 4; i++) {\n        int nx = x + dx[i], ny = y + dy[i];\n        if (mp[nx][ny] != -1) continue;\n        if (move_to(ch[i])) {\n            dfs(nx, ny);\n            move_to(ch[to[i]]);\n        } else mp[nx][ny] = 1;\n    }\n}\nextern \"C\" string find_out_map(int X, int Y, int N) {\n    memset(mp, -1, sizeof(mp));\n    dfs(X, Y);\n    string s;\n    for (int i = 1; i <= N; i++) {\n        for (int j = 1; j <= N; j++) {\n            s.push_back((mp[i][j] == 0) ? '0' : '1');\n        }\n    }\n    return s;\n}\n```\n\n[\u987a\u4fbf\u9644\u4e0a\u4e71\u5199\u7684\u6a21\u62df\u6b64\u9898\u89c4\u5219\u7684\u73a9\u5177\uff08\u96fe\uff09](https://www.luogu.com.cn/paste/csg4i4ea)\n\n~~\u53e6\u5916 u1s1 IO\u4ea4\u4e92\u4e0d\u597d\u5417~~",
        "postTime": 1631419946,
        "uid": 341650,
        "name": "_504",
        "ccfLevel": 6,
        "title": "P7225 [RC-04] \u8d70\u8ff7\u5bab \u9898\u89e3"
    },
    {
        "content": "## 1. \u9898\u610f\n\n\u4f60\u7ad9\u5728\u4e00\u4e2a\u683c\u5b50\uff0c\u4f60\u53ef\u4ee5\u79fb\u52a8\u5230\u76f8\u90bb\u7684\u683c\u5b50\uff08\u5982\u679c\u76f8\u90bb\u7684\u683c\u5b50\u4e0d\u662f\u969c\u788d\u7269\u7684\u8bdd\uff09\u3002\n\n\u73b0\u5728\u4f60\u9700\u8981\u56de\u7b54\u8d70\u80fd\u8d70\u5230\u7684\u683c\u5b50\u6709\u54ea\u4e9b\u3002\n\n## 2. \u5173\u4e8e\u4ea4\u4e92\u9898\n\n\u8bf7\u786e\u4fdd\u4f60\u77e5\u9053\u4ea4\u4e92\u9898\u7684\u8bc4\u6d4b\u65b9\u5f0f\u4e0e\u505a\u6cd5\u3002\n\n\u5176\u5b9e\uff0c\u5927\u6982\u7684\u610f\u601d\u5c31\u662f\u4f60\u548c\u53e6\u5916\u4e00\u4e2a\u7a0b\u5e8f\u540c\u65f6\u8fd0\u884c\uff0c\u5e76\u4ea4\u6362\u6570\u636e\u3002\n\n\u672c\u849f\u84bb\u7531\u4e8e\u6ca1\u505a\u8fc7\u51e0\u9053\u4ea4\u4e92\u9898\uff0c\u53ea\u80fd\u8bb2\u5230\u8fd9\u4e2a\u5730\u6b65\u5566\u3002\n\n## 3. \u672c\u9898\n\n\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def\uff1abfs \u548c dfs\u3002\n\n\u6ce8\u610f\u89c2\u5bdf bfs \u7684\u6027\u8d28\uff1a\u4ed6\u662f\u8d70\u5230\u4e00\u4e2a\u4f4d\u7f6e\u540e\uff0c\u4e00\u4f1a\u5728\u8fdb\u884c\u6269\u5c55\u3002\n\n\u4f46\u662f\uff0c\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u7684\u662f\u4ed6\u8d70\u7684\u65f6\u5019\uff0c\u662f\u8fde\u7eed\u7684\uff0c\u5e76\u4e14\u6709\u56de\u6eaf\u8fc7\u7a0b\u3002\n\n\u770b\u5230\u539f\u9898\uff0c\u4ed6\u53ea\u4f1a\u7ed9\u4f60\u5f53\u524d\u683c\u5b50\u7684\u4fe1\u606f\uff0c\u4e0d\u4f1a\u7ed9\u4f60\u5176\u4ed6\u683c\u5b50\u7684\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u91c7\u7528 dfs \u8fdb\u884c\u641c\u7d22\uff0c\u5e76\u65f6\u523b\u8bb0\u5f55\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\u3002\n\n\u7531\u4e8e\u6bcf\u4e00\u4e2a\u683c\u5b50\u8bbf\u95ee\u6b21\u6570\u662f\u5e38\u6570\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a $O(n^2)$\u3002\n\n## 4.AC \u4ee3\u7801\n\n``` cpp\n#include<bits/stdc++.h>\n#define PII pair<int,int>\n#define mp make_pair\n#define get(i,j) (i-1)*n+j-1\n#define check(i,j) (i>1&&j>1&&i<n&&j<n&&m[i][j]==-1)\nusing namespace std;\n\nbool vis[705][705];\nint dx[4]={1,0,0,-1},dy[4]={0,1,-1,0},n,m[705][705];\nchar op[4]={'S','D','A','W'};\nstring ans;\nextern \"C\" bool move_to(char position);\n\nvoid dfs(int x,int y)\n{\n    for (int i=0;i<4;++i)\n    {\n        if (check(x+dx[i],y+dy[i]))\n        {\n            if (move_to(op[i])) m[x+dx[i]][y+dy[i]]=0,dfs(x+dx[i],y+dy[i]),move_to(op[3-i]);\n            else m[x+dx[i]][y+dy[i]]=1;\n        }\n    }  \n}\n\nextern \"C\" string find_out_map(int x,int y,int N){\n    ans=\"\";n=N;\n    memset(m,-1,sizeof m);\n    dfs(x,y);\n    ans=\"\";m[x][y]=0;\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n            if (m[i][j]==0) ans+='0';\n            else ans+='1';\n    return ans;\n}\n```\n\n## 5. \u534a\u4e2a\u4ea4\u4e92\u5e93\n\n\u6211\u81ea\u5df1\u505a\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6ca1\u6709\u4ea4\u4e92\u5e93\uff0c\u65e0\u6cd5\u5f97\u77e5\u81ea\u5df1\u662f\u5426\u6b63\u786e\u3002\n\n\u81ea\u5df1\u624b\u5199\u7684\u4ee3\u7801\uff0c\u7b97\u534a\u4e2a\u4ea4\u4e92\u5e93\uff0c\u5e0c\u671b\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u3002\n\n\uff08\u540c\u65f6\u662f\u672c\u9898\u7684\u975e\u4ea4\u4e92\u5199\u6cd5\uff09\u3002\n\n\u4e5f\u589e\u6dfb\u4e86\u8bc4\u6d4b\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define PII pair<int,int>\n#define mp make_pair\n#define get(i,j) (i-1)*n+j-1\n#define check(i,j) (i>1&&j>1&&i<n&&j<n&&m[i][j]==-1)\nusing namespace std;\n\nconst int N=705;\n\nbool vis[N][N];\nint dx[4]={1,0,0,-1},dy[4]={0,1,-1,0},n,m[N][N],nowx,nowy;\nchar op[4]={'S','D','A','W'};\nint ansmap[N][N],tot;\nstring ans,stdans;\n\nbool move_to(char position){\n    if (++tot>=5e5)\n    {\n        puts(\"Too many operations!\");\n        exit(0);\n    }\n    if (position=='S'){\n        if (!ansmap[nowx+1][nowy])\n        {\n            nowx++;\n            return true;\n        }\n        return false;\n    }\n    if (position=='A'){\n        if (!ansmap[nowx][nowy-1])\n        {\n            nowy--;\n            return true;\n        }\n        return false;\n    }\n    if (position=='W'){\n        if (!ansmap[nowx-1][nowy])\n        {\n            nowx--;\n            return true;\n        }\n        return false;\n    }\n    if (position=='D'){\n        if (!ansmap[nowx][nowy+1])\n        {\n            nowy++;\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n\nvoid dfs(int x,int y)\n{\n    for (int i=0;i<4;++i)\n    {\n        if (check(x+dx[i],y+dy[i]))\n        {\n            if (move_to(op[i])) m[x+dx[i]][y+dy[i]]=0,dfs(x+dx[i],y+dy[i]),move_to(op[3-i]);\n            else m[x+dx[i]][y+dy[i]]=1;\n        }\n    }\n}\n\nstring find_out_map(int x,int y,int N)\n{\n    /*put your code here\n      this is mine*/\n    ans=\"\";n=N;\n    memset(m,-1,sizeof m);\n    dfs(x,y);\n    ans=\"\";m[x][y]=0;\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n            if (m[i][j]==0) ans+='0';\n            else ans+='1';\n    return ans;\n}\n\nint main()\n{\n    cin>>nowx>>nowy>>n;\n    cin>>stdans;\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n            if (stdans[get(i,j)]!='0') ansmap[i][j]=1;\n            else ansmap[i][j]=0;\n    //put in the stdmap\n    \n    if (find_out_map(nowx,nowy,n)==stdans) puts(\"Accepted.\");\n    else puts(\"Wrong Answer!\");\n    return 0;\n}\n```\n",
        "postTime": 1620802208,
        "uid": 342891,
        "name": "mydcwfy",
        "ccfLevel": 9,
        "title": "P7225\u9898\u89e3"
    },
    {
        "content": "# \u9898\u610f\uff1a\n\n\u4ea4\u4e92\u9898\uff0c\u6709\u4e00\u4e2a\u5730\u56fe\uff0c\u91cc\u9762\u6709\u4e9b\u662f\u969c\u788d\uff0c\u6709\u4e9b\u662f\u7a7a\u5730\u3002\u9700\u8981\u5b9e\u73b0\u51fd\u6570 `string find_out_map(int x, int y, int n)`\uff0c\u5176\u4e2d `x` \u548c `y` \u662f\u4e00\u4e2a\u5730\u56fe\u7684\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5750\u6807\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u969c\u788d\u3002\u540c\u65f6\u53ef\u4ee5\u8c03\u7528 `bool move_to(char c)` \u8868\u793a\u4ece\u5f53\u524d\u4f4d\u7f6e\u5f80 `WASD` \u8d70\u662f\u5426\u53ef\u884c\uff08\u5373\u4e0a\u5de6\u4e0b\u53f3\uff09\u3002\u8fd4\u56de\u7684 `string` \u662f\u5730\u56fe\u54ea\u4e9b\u5730\u65b9\u662f\u969c\u788d\uff0c\u54ea\u4e9b\u662f\u7a7a\u5730\u3002\n\n# \u89e3\u6cd5\uff1a\n\n\u8fd9\u9053\u9898\u5e7f\u641c\u6df1\u641c\u5747\u53ef\uff0c\u4f46\u662f\u8fd9\u662f\u4e2a\u4ea4\u4e92\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6ce8\u610f\u4e00\u4e9b\u4ea4\u4e92\u9898\u7684\u95ee\u9898\u3002\n\n\u6211\u8fd9\u91cc\u91c7\u53d6\u6df1\u641c\u89e3\u51b3\uff0c\u8003\u8651\u4ece\u8d77\u70b9\u5f00\u59cb\u8d70\u56db\u8054\u901a\u6df1\u641c\uff0c\u6bcf\u6b21\u8c03\u7528 `move_to` \u51fd\u6570\uff0c`move_to` \u51fd\u6570\u4f1a\u66f4\u6539\u5f53\u524d\u5728\u5730\u56fe\u4e0a\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8981\u8fdb\u884c\u56de\u6eaf\u4f7f\u5f97\u4f4d\u7f6e\u4e0d\u53d8\u3002\n\n\u6ce8\u610f\uff0c\u4ea4\u4e92\u5e93\u4e0d\u80fd\u8be2\u95ee\u8fc7\u591a\uff0c\u4e0d\u7136\u4f1a\u663e\u793a `too many operations`\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u907f\u514d\u540c\u4e00\u4e2a\u70b9\u8d70\u4e24\u6b21\uff0c\u4e5f\u5c31\u662f\u5728\u6df1\u641c\u8fc7\u7a0b\u4e2d\u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u8bb0\u5f55 `vis` \u6570\u7ec4\u3002\n\n\u5176\u4f59\u7684\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6ce8\u610f `extern \"C\"` \u7684\u4f7f\u7528\uff0c\u540c\u65f6\uff0c\u4ea4\u4e92\u9898\u4e0d\u9700\u8981\u5148 `int main()` \u6216 `cin`\u3001`cout` \u7b49\u8bed\u53e5\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u524d\u52a0\u4e0a `extern \"C\"` \u5373\u53ef\uff0c\u6ce8\u610f\u51fd\u6570\u540d\u7684\u95ee\u9898\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <string>\n#include <cstring>\nusing namespace std;\n\nconst int N = 505;\nchar c[N][N];\n\nint dx[] = { -1, 0, 1, 0 };\nint dy[] = { 0, -1, 0, 1 };\nbool flag[N][N];\nstring pos = \"WASD\";\n\nextern \"C\" bool move_to(char);\n\nextern \"C\" void dfs(int x, int y)\n{\n\tflag[x][y] = true;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tint nx = x + dx[i], ny = y + dy[i];\n\t\tif (flag[nx][ny]) continue;\n\t\tif (move_to(pos[i]))\n\t\t{\n\t\t\tc[nx][ny] = false;\n\t\t\tdfs(nx, ny);\n\t\t\tif (pos[i] == 'W') move_to('S');\n\t\t\telse if (pos[i] == 'S') move_to('W');\n\t\t\telse if (pos[i] == 'A') move_to('D');\n\t\t\telse if (pos[i] == 'D') move_to('A');\n\t\t}\n\t\telse c[nx][ny] = true;\n\t\tflag[nx][ny] = true; // \u6ce8\u610f\u5199\u5728 if else \u540e\n\t}\n}\n\nextern \"C\" string find_out_map(int x, int y, int n)\n{\n\tmemset(flag, false, sizeof(flag));\n\tmemset(c, true, sizeof(c));\n\tc[x][y] = 0;\n\tdfs(x, y);\n\tstring ans = \"\";\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= n; j++)\n\t\t{\n\t\t\tans.push_back(c[i][j] ? '1' : '0'); // \u5176\u5b9e\u7b2c i \u4f4d\u8868\u793a\u4ec0\u4e48\u4ec0\u4e48\u884c\u5217\u8f6c\u5316\u56fd\u7acb\u5c31\u662f n * n \u7684\u77e9\u9635\u987a\u5e8f\u6392\u5217\n\t\t}\n\t}\n\treturn ans;\n}\n```\n",
        "postTime": 1643616794,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P7225 [RC-04] \u8d70\u8ff7\u5bab"
    }
]