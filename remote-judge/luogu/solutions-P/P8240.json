[
    {
        "content": "\u4e09\u79cd\u505a\u6cd5\uff0c\u770b\u4e2a\u4e50\u5b50\u3002\n\n\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6700\u8fd1\u7684\u5b88\u536b\u7684\u8ddd\u79bb\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b88\u536b\u90fd\u5f53\u4f5c\u4e00\u4e2a\u8d77\u70b9\uff0c\u4e00\u8d77\u4e22\u5230\u961f\u5217\u91cc\u8dd1 dijkstra \u89e3\u51b3\u3002\n\n\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u662f\u4e24\u8fb9\u7684\u70b9\u7684\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u8981\u6c42\u7684\u76f8\u5f53\u4e8e\u5c31\u662f\u4ece $S$ \u5230 $T$ \u6240\u6709\u8def\u5f84\u4e2d\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\n\n## \u7b2c\u4e00\u79cd\u505a\u6cd5\n\n\u6211\u4eec\u8981\u4f7f\u5f97\u8d70\u8fc7\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u5c3d\u91cf\u5927\uff0c\u90a3\u4e48\u4e00\u4e9b\u8fb9\u6743\u8f83\u5c0f\u7684\u8fb9\u662f\u4e0d\u4f1a\u88ab\u8d70\u8fc7\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u80fd\u60f3\u5230\u6784\u5efa\u4e00\u9897\u6700\u5927\u751f\u6210\u6811\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u60c5\u51b5\u4e0d\u53d8\u7684\u524d\u63d0\u4e0b\uff0c\u5404\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u4e8e\u662f\u5c31\u53d8\u6210\u4e86\u67e5\u8be2\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u6700\u5c0f\u503c\uff0c\u8fd9\u91cc\u7528\u7684\u500d\u589e\u89e3\u51b3\u3002\n\n\u590d\u6742\u5ea6 $O(m\\log{m})$\u3002\n\n[Code](https://www.luogu.com.cn/paste/u0ndp2a1)\uff0c\u76ee\u524d\u6700\u4f18\u89e3\u3002\n\n## \u7b2c\u4e8c\u79cd\u505a\u6cd5\n\n\u8111\u62bd\u4e86\u89c9\u5f97\u7b2c\u4e00\u79cd\u505a\u6cd5\u4e0d\u5bf9\uff0c\u5c31\u60f3\u5230\u4e86\u8fd9\u79cd\u505a\u6cd5\u3002\n\n\u8003\u8651\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u7136\u540e\u6309\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u52a0\u8fb9\uff0c\u7136\u540e\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\u3002\n\n\u6bcf\u4e2a\u8fde\u901a\u5757\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u70b9\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\uff0c\u800c\u53e6\u4e00\u4e2a\u70b9\u4e0d\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u8be2\u95ee\u7f16\u53f7\u3002\n\n\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u7528 set \u7ef4\u62a4\u8be2\u95ee\u7f16\u53f7\u3002\n\n\u5408\u5e76\u524d\u904d\u5386\u5c0f\u7684\u96c6\u5408\uff0c\u5728\u5927\u7684\u96c6\u5408\u4e2d\u67e5\u8be2\u662f\u5426\u5b58\u5728\u76f8\u540c\u7684\u8be2\u95ee\uff0c\u8be2\u95ee\u7684\u7b54\u6848\u5c31\u662f\u5f53\u524d\u52a0\u5165\u7684\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u5408\u5e76\u65f6\u5c06\u5c0f\u7684\u96c6\u5408\u5411\u5927\u7684\u96c6\u5408\u5408\u5e76\uff0c\u5e76\u5c06\u5f97\u5230\u7b54\u6848\u7684\u8be2\u95ee\u79fb\u9664\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log^2{Q})$\u3002\n\n[Code](https://www.luogu.com.cn/paste/d92r3v4o)\uff0c\u8dd1\u5f97\u6bd4\u8f83\u5feb\u3002\n\n## \u7b2c\u4e09\u79cd\u505a\u6cd5\n\n\u7b2c\u4e8c\u79cd\u505a\u6cd5\u5199\u6302\u4e86\uff0c\u4ee5\u4e3a\u53c8\u5047\u4e86\uff0c\u5c31\u60f3\u5230\u4e86\u8fd9\u79cd\u505a\u6cd5\u3002\n\n\u8003\u8651\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u7136\u540e\u8fd8\u662f\u6309\u8fb9\u6743\u4ece\u5927\u5230\u5c0f\u52a0\u8fb9\u3002\n\n\u4e00\u4e2a\u795e\u79d8\u601d\u8def\u5c31\u662f\u6bcf\u6b21\u52a0\u4e86\u8fb9\u4e4b\u540e\u679a\u4e3e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5224\u65ad\u662f\u5426\u52a0\u8fb9\u524d\u4e0d\u8fde\u901a\u4f46\u662f\u52a0\u8fb9\u540e\u8054\u901a\uff0c\u8be2\u95ee\u7684\u7b54\u6848\u5373\u4e3a\u5f53\u524d\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u662f\u6bcf\u64cd\u4f5c\u4e00\u6b21\u5c31\u5224\u65ad $Q$ \u6b21\uff0c\u590d\u6742\u5ea6\u662f $O(mQ)$ \u7684\u3002\n\n\u8003\u8651\u5c06\u64cd\u4f5c\u5206\u5757\uff0c\u5757\u5927\u5c0f\u4e3a $S$\u3002\n\n\u6bcf\u64cd\u4f5c $S$ \u6b21\u540e\uff0c\u6c42\u51fa\u64cd\u4f5c $S$ \u6b21\u524d\u4e0d\u8fde\u901a\u4f46\u662f\u64cd\u4f5c\u540e\u8fde\u901a\u7684\u8be2\u95ee\u6709\u54ea\u4e9b\u3002\n\n\u7136\u540e\u5c06\u8fd9\u4e9b\u8be2\u95ee\u62ff\u51fa\u6765\uff0c\u91cd\u65b0\u8dd1\u8fd9 $S$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u505a\u4e00\u6b21\u64cd\u4f5c\u5224\u65ad\u4e00\u6b21\u662f\u5426\u8fde\u901a\u3002\n\n\u8003\u8651\u5230\u6bcf\u4e2a\u8be2\u95ee\u90fd\u4f1a\u8dd1 $S$ \u6b21\u64cd\u4f5c\uff0c\u627e\u64cd\u4f5c\u540e\u8fde\u901a\u7684\u8be2\u95ee\u4e00\u5171\u8981\u8dd1 $\\dfrac{m}{S}$ \u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f $O(QS\\alpha(n)+\\dfrac{mQ}{S})$\u3002\n\n\u53d6 $S=\\sqrt{m}$ \u53ef\u8fc7\u3002\n\n[Code](https://www.luogu.com.cn/paste/f847yfd8)\uff0c\u4e0d\u5f00 O2 \u9700\u8981\u4e00\u4e9b\u5361\u5e38\uff0c\u76ee\u524d\u6700\u88c2\u89e3\u3002",
        "postTime": 1649087077,
        "uid": 639649,
        "name": "KemononeRou",
        "ccfLevel": 0,
        "title": "P8240"
    },
    {
        "content": "\u9996\u5148\u4e0d\u96be\u60f3\u5230\u7528 ```dijkstra``` \u6c42\u51fa\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u6700\u8fd1\u7684\u5b88\u536b\u548c\u5b83\u7684\u8ddd\u79bb $d_i$\uff0c\u53ea\u9700\u8981\u628a $K$ \u4e2a\u5b88\u536b\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u8d77\u70b9\u8dd1\u4e00\u4e0b\u5c31\u884c\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u8be2\u95ee\u7684\u5c31\u662f\u4ece $S$ \u5230 $T$ \u7684\u4e00\u6761\u8def\u5f84\u4e2d\u70b9\u6743\u6700\u5c0f\u503c\u6700\u5927\u3002 \u6211\u4eec\u8bbe\u8fb9 $(u_i,v_i)$ \u7684\u6743\u503c $val_i=\\min(d_{u_i},d_{v_i})$\uff0c\u5bb9\u6613\u53d1\u73b0\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u4e86\u67e5\u8be2\u6700\u5927\u74f6\u9888\u8def\u3002\n\n\u6709\u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u79bb\u7ebf\u505a\u6cd5\uff1a\n\n- \u5bf9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a ```set``` \u7ef4\u62a4\u8be2\u95ee\uff0c\u8bfb\u5165\u8be2\u95ee $(s_i,t_i)$ \u65f6\uff0c\u5c06 $i$ \u63d2\u5165\u5230 $s_i$ \u548c $t_i$ \u7684 ```set``` \u91cc\u3002\n\n- \u628a\u8fb9\u6309\u7167\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\n\n- \u6309\u987a\u5e8f\u5904\u7406\u6bcf\u6761\u8fb9\u3002\u5bf9\u4e8e\u8fb9 $(u_i,v_i)$\uff0c\u5982\u679c $u_i,v_i$ \u4e4b\u524d\u5df2\u7ecf\u8054\u901a\u4e86\uff0c\u5219\u8df3\u8fc7\uff1b\u5426\u5219\u5c06 $u_i,v_i$ \u6240\u5c5e\u8054\u901a\u5757\u7684 set \u505a\u542f\u53d1\u5f0f\u5408\u5e76\u3002\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d1\u73b0\u4e24\u4e2a ```set``` \u4e2d\u6709\u76f8\u540c\u7684 $id$\uff0c\u8bf4\u660e $id$ \u8fd9\u4e2a\u8be2\u95ee\u7684\u6700\u5927\u74f6\u9888\u8def\u5373\u4e3a $val_i$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(m \\log^2 q)$ \u7684\uff0c\u4e24\u53ea $\\log$ \u5206\u522b\u662f\u542f\u53d1\u5f0f\u5408\u5e76\u548c ```set``` \u7684 ```insert``` \u64cd\u4f5c\u3002 \n\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<ll,int>\n#define mp make_pair\n#define IT set<int>::iterator\nusing namespace std;\ntypedef long long ll;\nconst int N=100005;\nconst ll inff=1ll<<60;\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n\treturn x*f;\n}\nint n,m,k,vis[N],fa[N]; ll dis[N],ans[N];\nset<int>s[N]; priority_queue<pii,vector<pii>,greater<pii> >q;\ninline int find(int x){ return fa[x]==x?x:fa[x]=find(fa[x]); }\nstruct Graph{\n\tint u,v; ll w;\n}c[N<<1];\nbool cmp(Graph a,Graph b){ return a.w>b.w; }\nstruct Edge{\n\tint to,nxt,w;\n}e[N<<2];\nint head[N],tot;\nvoid add(int u,int v,int w){\n\te[++tot]={v,head[u],w};\n\thead[u]=tot;\n}\nmain(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++){\n\t\tc[i].u=read(),c[i].v=read(),c[i].w=read();\n\t\tadd(c[i].u,c[i].v,c[i].w); add(c[i].v,c[i].u,c[i].w);\n\t}\n\tfor(int i=1;i<=n;i++) dis[i]=inff;\n\tk=read();\n\twhile(k--){\n\t\tint x=read(); dis[x]=0;\n\t\tq.push(mp(0,x));\n\t}\n\twhile(!q.empty()){ // dijkstra \u6c42 d \u6570\u7ec4\n\t\tint u=q.top().second; q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].w)\n\t\t\t\tdis[v]=dis[u]+e[i].w,q.push(mp(dis[v],v)); \n\t\t}\n\t}\n\tk=read();\n\tfor(int i=1;i<=k;i++){\n\t\tint u=read(),v=read();\n\t\ts[u].insert(i); s[v].insert(i);\n\t}\n\tfor(int i=1;i<=m;i++) c[i].w=min(dis[c[i].u],dis[c[i].v]); // \u8d4b\u8fb9\u6743\n\tsort(c+1,c+m+1,cmp);\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tint fu=find(c[i].u),fv=find(c[i].v); // \u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\n\t\tif(fu==fv) continue;\n\t\tif(s[fv].size()>s[fu].size()) swap(fu,fv); // \u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u5c0f\u7684\u5e76\u7ed9\u5927\u7684\uff0cswap \u7684\u590d\u6742\u5ea6\u662f O(1) \u7684\n\t\tfa[fv]=fu;\n\t\tfor(IT it=s[fv].begin();it!=s[fv].end();it++){\n\t\t\tif(s[fu].count(*it)) ans[*it]=max(0ll,c[i].w-1);\n\t\t\telse s[fu].insert(*it);\n\t\t}\n\t}\n\tfor(int i=1;i<=k;i++) printf(\"%lld\\n\",ans[i]);\n}\n```\n",
        "postTime": 1669208475,
        "uid": 236862,
        "name": "DitaMirika",
        "ccfLevel": 7,
        "title": "P8240"
    },
    {
        "content": "\u4eca\u5929\u662f NOI online\uff0c\u7528\u6c11\u95f4\u6570\u636e\u6d4b\u8bd5\u4ee3\u7801\u65f6\u770b\u5230\u4e86\u6b64\u9898\uff0c\u4e8e\u662f\u6765\u5199\u7bc7\u9898\u89e3\u3002\n\n------------\n\n### \u524d\u7f6e\u829d\u58eb\uff1a\u6700\u77ed\u8def\uff0c\u5e76\u67e5\u96c6\uff0c\u6574\u4f53\u4e8c\u5206\u3002\n\n\u901a\u8fc7\u8bfb\u9898\u4e0d\u96be\u60f3\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff1a \u7528\u6700\u77ed\u8def\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230\u6240\u6709\u5b88\u536b\u7684\u6700\u8fd1\u8ddd\u79bb\uff08\u4f5c\u4e3a\u70b9\u503c\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a $S,T$ \u6c42\u51fa\u4e00\u6761\u7ecf\u8fc7\u70b9\u7684\u6700\u5c0f\u503c\u6700\u5927\u7684\u8def\u5f84\uff0c\u7136\u540e\u8fd9\u6761\u8def\u5f84\u7684\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848\u3002\n\n\u90a3\u4e48\u5982\u4f55\u627e\u51fa\u4e00\u6761\u8fde\u63a5 $S,T$ \u5e76\u4e14\u7ecf\u8fc7\u70b9\u7684\u6700\u5c0f\u503c\u6700\u5927\u7684\u8def\u5f84\u5462\uff1f\n\n\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u70b9\u6309\u70b9\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21\u52a0\u5165\u5f53\u524d\u6700\u5927\u7684\u70b9\uff0c\u7136\u540e\u770b\u4e00\u4e0b\u5f53\u524d\u7684 $S,T$ \u662f\u5426\u76f8\u901a\uff0c\u5224\u65ad $S,T$ \u662f\u5426\u76f8\u901a\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8be2\u95ee\u4e4b\u95f4\u4e92\u4e0d\u5e72\u6270\uff0c\u6240\u4ee5\u8003\u8651\u4e8c\u5206\u3002\n\n\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u8be2\u95ee\u8bbe\u7f6e\u4e00\u5bf9 $l,r$ \u8868\u793a\u7b54\u6848\u53ef\u80fd\u7684\u8303\u56f4\uff0c\u7136\u540e\u6bcf\u6b21\u67e5\u8be2 $mid=(l+r)/2$  \u662f\u5426\u53ef\u884c\uff0c\u6b64\u65f6\u5bf9\u4e8e\u4e00\u5bf9 $S,T$\uff0c\u9700\u8981\u67e5\u8be2 $log(n\u00d7z_{MAX})$ \u6b21\uff0c\u6bcf\u6b21\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n\u7136\u540e\u6574\u4f53\u4e8c\u5206\uff0c\u56e0\u4e3a\u67e5\u8be2\u4e4b\u95f4\u4e92\u4e0d\u5e72\u6270\uff0c\u6240\u4ee5\u5982\u679c\u5c06\u67e5\u8be2\u6309\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6bcf\u6b21 $O(n)$ \u7684\u626b\u63cf\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u89e3\u51b3\u5f53\u524d\u7684 $q$ \u5bf9 \u67e5\u8be2\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(n\u00d7log(m)+log(n\u00d7z_{MAX})\u00d7n\u00d7log(n)\uff09$\u3002\n\n\u7136\u540e\u56e0\u4e3a\u8fd9\u9898\u7684\u8f93\u5165\u8f93\u51fa\u91cf\u8f83\u5927\uff0c\u6211\u52a0\u4e0a\u4e86\u5feb\u8bfb\uff0c~~\u592a\u61d2\u4e86\u6ca1\u52a0\u5feb\u8f93~~\u3002\n\n\u53ef\u80fd\u662f\u56e0\u4e3a\u6211\u624b\u6253\u6570\u636e\u7ed3\u6784\u5e76\u4e14\u51e0\u4e4e\u6ca1\u6709\u52a0\u4efb\u4f55\u4f18\u5316\uff0c\u6211\u9700\u8981\u5f00O2\u624d\u80fd\u8fc7\u3002\n\n\u4e0d\u8981\u770b\u4ee3\u7801\u592a\u957f\uff0c\u4e3b\u8981\u6211\u624b\u6253\u5806\u6253\u4e86 $40$ \u884c\uff0c\u5e76\u4e14\u7b97\u6cd5\u90fd\u662f\u53ef\u4ee5\u5206\u5f00\u72ec\u7acb\u5b9e\u73b0\u7684\uff0c\u4ee3\u7801\u5e76\u4e0d\u662f\u5f88\u96be\u8c03\u8bd5\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long//\u8bb0\u5f97\u5f00 long long \nstruct POINT{//\u7ed3\u6784\u4f53\u5b58\u70b9\uff0c\u65b9\u4fbf\u6309\u70b9\u503c\u6392\u5e8f\u3002\uff08\u540c\u65f6\u53ef\u4ee5\u7ed9\u624b\u6253\u5806\u7528\uff09 \n    int id,dis;\n}point[120000];\nbool cmp(POINT x,POINT y){//\u6309\u70b9\u503c\u6392\u5e8f \n    return x.dis<y.dis;\n}\nstruct DUI{//\u624b\u6253\u5806 \n    POINT dui[480000];\n    int dtop;\n    void init(){\n        dtop=0;\n    }\n    void add(int x,int v){\n        dtop++;\n        dui[dtop].id=x;\n        dui[dtop].dis=v;\n        int zz=dtop;\n        while(zz>1){\n            if(cmp(dui[zz],dui[zz>>1])){\n                swap(dui[zz],dui[zz>>1]);\n                zz>>=1;\n            }\n            else break;\n        }\n    }\n    POINT push(){\n        POINT RE=dui[1];\n        dui[1]=dui[dtop--];\n        int zz=1;\n        while((zz<<1)<=dtop){\n            int zzz;\n            if((zz<<1)<dtop&&cmp(dui[zz<<1|1],dui[zz<<1]))zzz=zz<<1|1;\n            else zzz=zz<<1;\n            if(cmp(dui[zzz],dui[zz])){\n                swap(dui[zzz],dui[zz]);\n                zz=zzz;\n            }\n            else break;\n        }\n        return RE;\n    }\n}dui;\nstruct ASK{//\u8be2\u95ee\u7ed3\u6784\u4f53\uff0c\u65b9\u4fbf\u4e8c\u5206 \n    int s,t;\n    int l,r,mid;\n    int id;\n}ask[120000];\nbool cmp1(ASK x,ASK y){//\u6309\u67e5\u8be2\u503c\u6392\u5e8f \n    return x.mid>y.mid;\n}\nint n,m,K,q;\nint fir[120000],nxt[480000],to[480000],qp[480000],top=0;//\u94fe\u5f0f\u524d\u5411\u661f \nint pd[120000];\nint ans[120000];\nint bcj[120000];//\u5e76\u67e5\u96c6 \nvoid inline read(int &n){//\u5feb\u8bfb \n    n=0;\n    char f=getchar();\n    while(!isdigit(f)){\n        f=getchar();\n    }\n    while(isdigit(f)){\n        n=(n<<1)+(n<<3)+(f^'0');\n        f=getchar();\n    }\n}\nvoid add(int x,int y,int z){//\u524d\u5411\u661f\u6dfb\u8fb9 \n    top++;nxt[top]=fir[x];fir[x]=top;to[top]=y;qp[top]=z;\n}\nvoid Dij(){//dijkstra\n    read(K);\n    dui.init();\n    memset(pd,0,sizeof(pd));\n    for(int i=1;i<=K;i++){\n        int x;\n        read(x);\n        dui.add(x,0);\n        point[x].id=x;\n        point[x].dis=0;\n    }\n    while(dui.dtop){\n        POINT x=dui.push();\n        if(pd[x.id])continue;\n        pd[x.id]=1;\n        point[x.id]=x;\n        int dis=x.dis;\n        for(int i=fir[x.id];i;i=nxt[i]){\n            if(pd[to[i]])continue;\n            dui.add(to[i],qp[i]+dis);\n        }\n    }\n}\nint fa(int x){//\u5e76\u67e5\u96c6\u7956\u5148\u67e5\u8be2 \n    if(bcj[x]==x)return x;\n    return bcj[x]=fa(bcj[x]);\n}\nvoid inline init(){//\u6bcf\u6b21\u67e5\u8be2\u7684\u521d\u59cb\u5316 \n    memset(pd,0,sizeof(pd));\n    for(int i=1;i<=n;i++){\n        bcj[i]=i;\n    }\n}\nvoid inline in(int x){//\u5c06\u4e00\u4e2a\u70b9\u52a0\u5165\u5e76\u67e5\u96c6 \n    pd[x]=1;\n    for(int i=fir[x];i;i=nxt[i]){\n        if(pd[to[i]]){\n            int fax=fa(to[i]),fay=fa(x);\n            if(fax!=fay){\n                bcj[fax]=fay;\n            }\n        }\n    }\n}\nvoid inline cl(int zz){//\u67e5\u8be2 S T \u662f\u5426\u8054\u901a \n    int fax=fa(ask[zz].s),fay=fa(ask[zz].t);\n    if(fax==fay){\n        ask[zz].l=ask[zz].mid+1;\n    }\n    else{\n        ask[zz].r=ask[zz].mid;\n    }\n}\nvoid sol(){//O(n)\u7684\u67e5\u8be2 \n    init();\n    int zz=n;\n    int asktop=1;\n    int dis=max(ask[asktop].mid,point[zz].dis-1);\n    while(~dis){\n        while(zz&&point[zz].dis>dis){\n            in(point[zz].id);\n            zz--;\n        }\n        while(asktop<=q&&ask[asktop].mid==dis){\n            cl(asktop++);\n            if(asktop>q)return ;\n        }\n        //dis\u8df3\u8f6c \n\t\t//\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd dis-- \u4f1a\u8d85\u65f6 \n        dis=-1;\n        if(asktop<=q)dis=max(dis,ask[asktop].mid);\n        if(zz)dis=max(dis,point[zz].dis-1);\n    }\n}\nsigned main(){\n\t//\u5efa\u56fe \n    read(n);read(m);\n    for(int i=1;i<=m;i++){\n        int x,y,z;\n        read(x);read(y);read(z);\n        add(x,y,z);\n        add(y,x,z);\n    }\n    //dijkstra\n    Dij();\n    sort(point+1,point+1+n,cmp);\n    //\u8bfb\u5165\u8be2\u95ee \n    cin>>q;\n    for(int i=1;i<=q;i++){\n        read(ask[i].s);read(ask[i].t);\n        ask[i].l=0;\n        ask[i].r=1e15;\n        ask[i].id=i;\n    }\n    //\u6574\u4f53\u4e8c\u5206 \n    int qq=q;\n    while(q){\n        for(int i=1;i<=q;i++){\n            if(ask[i].l>=ask[i].r){\n                ask[i].mid=-1;\n                ans[ask[i].id]=ask[i].l;//\u6ce8\u610f ask[i].l \u662f\u6700\u5c0f\u7684\u884c\u4e0d\u901a\u7684\u5728\u8f93\u51fa\u65f6\u8981 -1 \n            }\n            else{\n                ask[i].mid=(ask[i].l+ask[i].r)/2;\n            }\n        }\n        sort(ask+1,ask+1+q,cmp1);\n        while(q&&ask[q].mid==-1)q--;//\u56e0\u4e3a mid \u4e3a -1 \u5c31\u8868\u793a\u627e\u5230\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u8e22\u51fa\u4f18\u5316\n\t\t//\u4e2a\u4eba\u611f\u89c9\u4f18\u5316\u4e0d\u5927 \n        sol();\n    }\n    //\u8f93\u51fa \n    for(int i=1;i<=qq;i++){\n        if(ans[i])printf(\"%lld\\n\",ans[i]-1);\n        else puts(\"0\");//\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u56e0\u4e3a\u6709\u7684 S T \u4e0d\u8fde\u901a\uff0c\u8fd9\u65f6\u4e0d\u4f1a\u6709\u7b54\u6848\uff0c\u5f53\u8f93\u51fa 0 \n    }\n}\n```\n\n\n\n------------\n\n\n\u540e\u8bb0\uff1a\u6211\u5bf9\u6574\u4f53\u4e8c\u5206\u5e76\u4e0d\u662f\u5f88\u4e86\u89e3\uff0c\u8fd9\u79cd\u601d\u8def\u662f\u6211\u4e0d\u5c0f\u5fc3\u628a\u9898\u76ee\u770b\u6210 \"\u6bcf\u6b21\u7ed9\u51fa $S,T,x$\uff0c\u5224\u65ad $S,T$ \u4e4b\u95f4\u5077 $x$ \u662f\u5426\u7b26\u5408\u8981\u6c42\" \u540e\u60f3\u51fa\u7684\u3002 ~~\u8bdd\u8bf4\u773c\u795e\u6709\u591a\u4e0d\u597d\u624d\u770b\u8fd9\u4e48\u79bb\u8c31\u7684~~",
        "postTime": 1648282686,
        "uid": 399239,
        "name": "\u5929\u5357\u661f\u9b54\u828b",
        "ccfLevel": 0,
        "title": "P8240 [AGM 2022 \u8d44\u683c\u8d5b] \u5077\u94c0\u8ba1\u5212 \u9898\u89e3"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P8240)\n\n\u63d0\u4f9b\u4e00\u79cd kruskal \u91cd\u6784\u6811\u505a\u6cd5\uff0c\u987a\u4fbf\u628a\u524d\u9762\u51e0\u7bc7\u9898\u89e3\u6ca1\u6709\u4e25\u683c\u8bc1\u660e\u7684\u5730\u65b9\u7ed9\u4e00\u5e76\u8bc1\u4e86\u3002\n\n------------\n\n\u9996\u5148\u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u79bb\u67d0\u4e2a\u70b9\u6700\u8fd1\u7684\u5b88\u536b\u7684\u8ddd\u79bb\u770b\u4f5c\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u90a3\u4ece $S$ \u5230 $T$ \u7684\u6700\u4f18\u8def\u5f84\uff0c\u4e00\u5b9a\u662f\u6700\u5c0f\u70b9\u6743\u6700\u5927\u7684\u8def\u5f84\u3002\n\n\u9884\u5904\u7406\u70b9\u6743\u53ef\u4ee5\u7528 dijkstra\uff0c\u521d\u59cb\u5c06\u6709\u5b88\u536b\u7684\u70b9\u653e\u5165\u4f18\u5148\u961f\u5217\uff0c\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u600e\u6837\u627e\u6700\u4f18\u8def\u5f84\uff1f\u5982\u679c\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\u663e\u7136\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u53ef\u8be2\u95ee\u4e00\u591a\u8fd9\u6837\u505a\u5c31\u529b\u4e0d\u4ece\u5fc3\u4e86\uff0c\u53ea\u80fd\u6574\u4f53\u4e8c\u5206\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u65ad\uff0c\u53ef\u90a3\u663e\u7136\u4e0d\u662f\u6700\u4f18\u89e3\u6cd5\u3002\n\n\u8fd9\u91cc\u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u5f15\u7406\uff1a\u65e0\u5411\u56fe $G$ \u4e2d\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5927\u503c\u6700\u5c0f\u7684\u8def\u5f84\uff0c\u4e00\u5b9a\u662f\u8fd9\u4e24\u70b9\u5728 $G$ \u7684\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\u4e2d\u7684\u552f\u4e00\u8def\u5f84\u3002\n\n\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\u7684\u5b9a\u4e49\u53ca\u5176\u6c42\u6cd5\u53ef\u4ee5\u770b[\u8fd9\u513f](https://blog.csdn.net/u011815404/article/details/89385097)\uff0c\u90a3\u4e0d\u662f\u672c\u6587\u63a2\u8ba8\u7684\u91cd\u70b9\u3002\n\n\u8fd9\u91cc\u7740\u91cd\u7ed9\u51fa\u4e0a\u8ff0\u5f15\u7406\u7684\u8bc1\u660e\uff1a\n\n- \u8003\u8651 $S$ \u4e0e $T$ \u4e4b\u95f4\u8fb9\u6743\u6700\u5927\u503c\u6700\u5c0f\u7684\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5f97\u5230\uff1a\u5c06\u6240\u6709\u8fb9\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5e76\u4e00\u6761\u4e00\u6761\u5730\u6dfb\u52a0\uff1b\u90a3\u4e48\u5f53\u52a0\u5165\u67d0\u6761\u8fb9\u540e\uff0c\u5982\u679c $S$ \u4e0e $T$ \u6070\u597d\u8054\u901a\uff0c\u90a3\u4e48\u6b64\u65f6 $S$ \u5230 $T$ \u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u90fd\u662f\u8fb9\u6743\u6700\u5927\u503c\u6700\u5c0f\u7684\u8def\u5f84\u3002\n\n- \u8ba9\u6211\u4eec\u518d\u8003\u8651\u7528 kruskal \u6c42\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\u7684\u8fc7\u7a0b\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c $S$ \u4e0e $T$ \u6070\u597d\u8054\u901a\u6240\u6dfb\u52a0\u7684\u90a3\u6761\u8fb9\u4e0e\u4e0a\u8ff0\u505a\u6cd5 $S$ \u4e0e $T$ \u6070\u597d\u8054\u901a\u65f6\u90a3\u6761\u8fb9\u4e00\u5b9a\u76f8\u540c\u3002\u56e0\u4e3a kruskal \u4e0e\u4e0a\u8ff0\u505a\u6cd5\u552f\u4e00\u7684\u533a\u522b\u662f\u5f53\u4e24\u70b9\u8054\u901a\u65f6\u4fbf\u4e0d\u52a0\u8fb9\uff0c\u8fd9\u6837\u505a\u4e0d\u4f1a\u5f71\u54cd\u8fde\u901a\u6027\uff0c\u6240\u4ee5\u5f15\u7406\u5f97\u8bc1\u3002\n\n\u5f53\u7136\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee\uff0c\u8fd9\u9053\u9898\u4e0d\u662f\u6700\u5c0f\u503c\u6700\u5927\u5417\uff1f~~\u597d\u5427\u6211\u76f8\u4fe1\u6ca1\u4eba\u90a3\u4e48\u8822~~\n\n\u5f53\u7136\u4e5f\u6709\u4eba\u4f1a\u95ee\uff0c\u8fd9\u9053\u9898\u4e0d\u662f\u70b9\u6743\u5417\uff1f\u8003\u8651\u4e00\u6761\u8fb9\u88ab\u7ecf\u8fc7\uff0c\u90a3\u5b83\u4e24\u7aef\u7684\u70b9\u4e00\u5b9a\u90fd\u88ab\u7ecf\u8fc7\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u4e24\u70b9\u70b9\u6743\u8f83\u5c0f\u503c\u4ee3\u8868\u8fb9\u6743\uff0c\u8fd9\u4e5f\u662f\u70b9\u6743\u8f6c\u8fb9\u6743\u5e38\u7528\u6280\u5de7\u3002\n\n\u597d\uff0c\u63a5\u4e0b\u6765\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u591a\u6b21\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u95f4\u8fb9\u6743\u6700\u5c0f\u503c\uff0c\u663e\u7136\u76f4\u63a5\u4e0a kruskal \u91cd\u6784\u6811\uff0c\u4e0d\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u6811\u4e0a\u500d\u589e\u4ee3\u66ff\u3002\n\nTips: \u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u771f\u7684\u5efa\u6700\u5c0f\u74f6\u9888\u751f\u6210\u6811\uff0c\u53ef\u4ee5\u8d8a\u8fc7\u5b83\u76f4\u63a5\u5efa kruskal \u91cd\u6784\u6811\u3002\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/uaf4s0q9) [\u76ee\u524d\u6700\u4f18\u89e3](https://www.luogu.com.cn/record/list?pid=P8240&orderBy=1&status=&page=1)\n\n\u5b8c\u7ed3\u6492\u82b1~\n\n\n\n\n",
        "postTime": 1668591915,
        "uid": 297806,
        "name": "Demeanor_Roy",
        "ccfLevel": 6,
        "title": "P8240 \u5077\u94c0\u8ba1\u5212 \u9898\u89e3"
    },
    {
        "content": "\u597d\u50cf\u6ca1\u4eba\u5199\u6811\u5256\uff0c\u6211\u6765\u4ea4\u4e00\u7bc7\u6811\u5256\u9898\u89e3\u3002\n## \u9898\u610f\n- \u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7ec4\u6210\u7684\u65e0\u5411\u56fe\uff0c\u56fe\u4e0a\u6709 $K$ \u4e2a\u5b88\u536b\u3002\n- \u6709 $Q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u6709 $S,T$\u3002\u627e\u5230\u4e00\u6761\u4ece $S$ \u5230 $T$ \u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u70b9\u79bb\u5b88\u536b\u7684\u8ddd\u79bb\u6700\u5c0f\u503c\u6700\u5927\u3002\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n- $n,K,Q \\le 10^5,m \\le 2 \\times 10^5$.\n\n## \u5206\u6790\n\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u6e90\u70b9 $S_0$\uff0c\u4ece $S_0$ \u5411\u6bcf\u4e2a\u5b88\u536b\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u7136\u540e\u4ee5 $S_0$ \u4e3a\u6e90\u70b9\u8dd1\u4e00\u904d Dijkstra\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u79bb\u5b88\u536b\u7684\u8ddd\u79bb\u3002\n\n\u7136\u540e\u95ee\u9898\u53d8\u6210\u4e86\u5bf9\u6bcf\u4e2a $S,T$\uff0c\u627e\u5230\u4e00\u6761 $S$ \u5230 $T$ \u7684\u8def\u5f84\u4f7f\u5f97\u8def\u5f84\u4e0a\u70b9\u6743\u6700\u5c0f\u503c\u6700\u5927\u3002\u8fd9\u91cc\u70b9\u6743\u6307\u8be5\u70b9\u79bb\u5b88\u536b\u7684\u8ddd\u79bb\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6027\u8d28\u53ef\u4ee5\u60f3\u5230\u6784\u9020\u4e00\u68f5\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u6ee1\u8db3\u6761\u4ef6\u3002\n\n\u8003\u8651\u76f4\u63a5\u6309\u70b9\u6743\u4ece\u5927\u5230\u5c0f\u5efa\u6811\uff0c\u4f9d\u6b21\u628a\u70b9\u52a0\u5165\u6811\u4e2d\uff0c\u626b\u4e00\u904d\u5b83\u7684\u6240\u6709\u76f8\u90bb\u70b9\uff0c\u82e5\u8be5\u70b9\u5df2\u7ecf\u5728\u6811\u4e2d\u5e76\u4e14\u4e0e\u5f53\u524d\u70b9\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u8fde\u4e00\u6761\u8fb9\u3002\u8fd9\u6837\u5efa\u51fa\u7684\u751f\u6210\u6811\u4e00\u5b9a\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\n\u56e0\u4e3a\u5982\u679c\u6709\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0a\u5b58\u5728\u4e00\u4e2a\u6bd4\u6700\u4f18\u8def\u5f84\u79bb\u5b88\u536b\u8ddd\u79bb\u66f4\u8fd1\u7684\u70b9\uff0c\u800c\u5efa\u6811\u8fc7\u7a0b\u4e2d\u52a0\u5165\u8fd9\u4e2a\u70b9\u4e4b\u524d\uff0c\u8def\u5f84\u7684\u7aef\u70b9\u4e0d\u8fde\u901a\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\uff0c\u6240\u4ee5\u8fd9\u4e2a\u751f\u6210\u6811\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u68f5\u751f\u6210\u6811\u4e0a\u627e\u4e24\u70b9\u8def\u5f84\u4e0a\u70b9\u6743\u6700\u5c0f\u503c\u3002\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6811\u5256 + \u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((m+n) \\log m + n \\log n + Q \\log^2 n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u7ec6\u8282\u89c1\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define N 100005\n#define M 500004\n#define ll long long\nusing namespace std;\nconst ll INF=0x3f3f3f3f3f3f3f3f;\nint n,m,Q,K;\nint tot,first[N],nxt[M],ver[M],edge[M];\nvoid add(int s,int e,int w) {\n\tnxt[++tot]=first[s];\n\tfirst[s]=tot;\n\tver[tot]=e;\n\tedge[tot]=w;\n}\nvoid init() {\n\tfor(int i=1;i<=m;++i) {\n\t\tint s,e,w;\n\t\tscanf(\"%d%d%d\",&s,&e,&w);\n\t\tadd(s,e,w),add(e,s,w);\n\t}\n\tscanf(\"%d\",&K);\n\tfor(int i=1;i<=K;++i) {\n\t\tint g;\n\t\tscanf(\"%d\",&g);\n\t\tadd(0,g,0);\n\t}\n}\nstruct node {\n\tint u;\n\tll dat;\n\tbool operator <(node x) const {\n\t\treturn dat>x.dat;\n\t}\n} tmp[N];\nnode mkn(int x,ll y) {\n\tnode tmp;\n\ttmp.u=x,tmp.dat=y;\n\treturn tmp;\n}\npriority_queue<node> q;\nll dis[N];bool vis[N];\nvoid dij() {\n\tmemset(dis,0x3f,sizeof(dis));\n\tq.push(mkn(0,0)),dis[0]=0;\n\twhile(!q.empty()) {\n\t\tint u=q.top().u;\n\t\tq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=first[u];i;i=nxt[i]) {\n\t\t\tint v=ver[i],w=edge[i];\n\t\t\tif(dis[v]>dis[u]+w) {\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tq.push(mkn(v,dis[v]));\n\t\t\t}\n\t\t}\n\t}\n}\nint fa[N];\nvoid reset() {\n\tfor(int i=1;i<=n;++i) fa[i]=i;\n}\nint get(int p) {\n\tif(fa[p]==p) return p;\n\treturn fa[p]=get(fa[p]);\n}\nvoid merge(int x,int y) {\n\tfa[get(x)]=get(y);\n}\nvector<int> head[N];\nvoid build_tree() {\n\treset();\n\tfor(int i=1;i<=n;++i) {\n\t\tint u=tmp[i].u;\n\t\tvis[u]=1;\n\t\tfor(int j=first[u];j;j=nxt[j]) {\n\t\t\tint v=ver[j];\n\t\t\tif(!vis[v]||get(u)==get(v)) continue;\n\t\t\thead[u].push_back(v),head[v].push_back(u);\n\t\t\tmerge(u,v);\n\t\t}\n\t}\n}\nint dep[N],size[N],son[N],blo[N],cnt_b;\nvoid dfs1(int now,int f) {\n\tfa[now]=f;\n\tdep[now]=dep[f]+1;\n\tsize[now]=1,blo[now]=cnt_b;\n\tint sz=head[now].size();\n\tfor(int i=0;i<sz;++i) {\n\t\tint v=head[now][i];\n\t\tif(v==f) continue;\n\t\tdfs1(v,now);\n\t\tsize[now]+=size[v];\n\t\tif(size[v]>size[son[now]]) {\n\t\t\tson[now]=v;\n\t\t}\n\t}\n}\nint dfn[N],tot_d,rnk[N],top[N];\nvoid dfs2(int now,int t) {\n\ttop[now]=t;\n\tdfn[now]=++tot_d;\n\trnk[tot_d]=now;\n\tif(!son[now]) return;\n\tdfs2(son[now],t);\n\tint sz=head[now].size();\n\tfor(int i=0;i<sz;++i) {\n\t\tint v=head[now][i];\n\t\tif(v==fa[now]||v==son[now]) continue;\n\t\tdfs2(v,v);\n\t}\n}\nstruct Segment_Tree {\n\tint l,r;\n\tll dat;\n\t#define L(x) (tr[x].l)\n\t#define R(x) (tr[x].r)\n\t#define dat(x) (tr[x].dat)\n\t#define ls(x) (x<<1)\n\t#define rs(x) (x<<1|1)\n} tr[N*4];\nvoid update(int p) {\n\tdat(p)=min(dat(ls(p)),dat(rs(p)));\n}\nvoid build(int p,int x,int y) {\n\tL(p)=x,R(p)=y;\n\tif(x==y) {\n\t\tdat(p)=dis[rnk[x]];\n\t\treturn;\n\t}\n\tint mid=(x+y)>>1;\n\tbuild(ls(p),x,mid),build(rs(p),mid+1,y);\n\tupdate(p);\n}\nll query(int p,int x,int y) {\n\tif(L(p)>y||R(p)<x) return INF;\n\tif(L(p)>=x&&R(p)<=y) return dat(p);\n\treturn min(query(ls(p),x,y),query(rs(p),x,y));\n}\nint root[N];\nll query_path(int x,int y) {\n\tif(blo[x]!=blo[y]) return 0;\n\tll ans=INF;\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans=min(ans,query(1,dfn[top[x]],dfn[x]));\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]<dep[y]) swap(x,y);\n\tans=min(ans,query(1,dfn[y],dfn[x]));\n\treturn ans;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tinit();\n\tdij();\n\tfor(int i=1;i<=n;++i) {\n\t\tvis[i]=0;\n\t\ttmp[i]=mkn(i,dis[i]);\n\t}\n\tsort(tmp+1,tmp+1+n);\n\tbuild_tree();\n\tmemset(fa,0,sizeof(fa));\n\tfor(int i=1;i<=n;++i) {//\u6ce8\u610f\u4e0d\u4fdd\u8bc1\u662f\u8fde\u901a\u56fe\n\t\tif(!blo[i]) {\n\t\t\troot[++cnt_b]=i;\n\t\t\tdfs1(i,0);\n\t\t\tdfs2(i,i);\n\t\t}\n\t}\n\tbuild(1,1,tot_d);\n\tscanf(\"%d\",&Q);\n\twhile(Q--) {\n\t\tint S,T;\n\t\tscanf(\"%d%d\",&S,&T);\n\t\tprintf(\"%lld\\n\",max(query_path(S,T)-1,0ll));//\u8bb0\u5f97\u51cf1\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1662714131,
        "uid": 263112,
        "name": "Y_ATM_K",
        "ccfLevel": 7,
        "title": "P8240 [AGM 2022 \u8d44\u683c\u8d5b] \u5077\u94c0\u8ba1\u5212"
    },
    {
        "content": "# \u9898\u610f\u7b80\u8ff0\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u5176\u4e0a\u6709 $k$ \u4e2a\u7279\u6b8a\u70b9\u3002$q$ \u6b21\u8be2\u95ee $x,y$\u3002\n\n\u4f60\u8981\u627e\u4e00\u6761\u4ece $x$ \u5230 $y$ \u7684\u7b80\u5355\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u201c\u6bcf\u4e2a\u70b9\u5230\u6700\u8fd1\u7279\u6b8a\u70b9\u7684\u8ddd\u79bb\u201d\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n# \u89e3\u6cd5\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u5206\u6210\u4e24\u90e8\u5206\uff1a\n\n- \u6c42\u51fa\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u5230\u6700\u8fd1\u7279\u6b8a\u70b9\u7684\u8ddd\u79bb\uff0c\u8bb0\u4e3a\u6570\u7ec4 `dis`\uff1b\n- \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6c42\u51fa\u56fe\u4e0a `dis` \u6700\u5c0f\u503c\u6700\u5927\u7684\u8def\u5f84\u3002\n\n## \u7b2c\u4e00\u90e8\u5206\n\n\u6ce8\u610f\u5230\u5982\u679c $k=1$ \u53ef\u4ee5\u7528\u666e\u901a\u7684\u4f18\u5148\u961f\u5217 dijkstra \u6c42\u89e3\u3002\n\n\u5bf9\u4e8e\u4e00\u822c\u60c5\u51b5\u4ecd\u7528 dijkstra\uff0c\u53ea\u4e0d\u8fc7\u4f18\u5148\u961f\u5217\u91cc\u4e00\u5f00\u59cb\u5b58\u50a8\u7740\u6240\u6709\u7684\u7279\u6b8a\u70b9\u3002\n\n## \u7b2c\u4e8c\u90e8\u5206\n\n\u5373\u4e3a [P1967 [NOIP2013 \u63d0\u9ad8\u7ec4] \u8d27\u8f66\u8fd0\u8f93](https://www.luogu.com.cn/problem/P1967)\uff0c\u53ea\u662f\u8d27\u8f66\u8fd0\u8f93\u4e2d\u662f\u8fb9\u6743\uff0c\u6b64\u9898\u4e3a\u70b9\u6743\u3002\n\n~~\u4e3a\u4e86\u76f4\u63a5\u590d\u5236\u90a3\u9898\u7684\u4ee3\u7801~~\uff0c\u6b64\u5904\u5c06\u70b9\u6743\u5316\u4e3a\u8fb9\u6743\uff0c\u4ee4\u4e00\u6761\u8fb9\u7684\u6743\u503c\u4e3a\u6240\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u6743\u503c\u7684\u8f83\u5c0f\u503c\u3002\u7136\u540e\u5c31\u5b8c\u5168\u8f6c\u5316\u6210\u8d27\u8f66\u8fd0\u8f93\u4e86\u3002\n\n# \u4ee3\u7801\n\u6ce8\u610f\u8981\u5c06\u4e0a\u8ff0\u7b54\u6848\u51cf\u4e00\u518d\u5bf9 $0$ \u53d6 `max`\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#define int long long\n#define INF (922107*1e10)\nusing namespace std;\nstruct ljb{\n\tint en,w[600001],v[600001],fst[100001],nxt[600001];\n\tinline void add(int x,int y,int z)\n\t{en++;v[en]=y;w[en]=z;nxt[en]=fst[x];fst[x]=en;}\n};\nstruct bcj{\n\tint f[100001],c;\n\tvoid init(int x)\n\t{c=x;for(int i=1;i<=x;i++)f[i]=i;}\n\tinline int find(int x)\n\t{return x==f[x]?x:f[x]=find(f[x]);}\n\tinline void Merge(int x,int y)\n\t{x=find(x),y=find(y);if(x!=y)c--,f[x]=y;}\n\tinline bool isin(int x,int y)\n\t{return find(x)==find(y);}\n};\nstruct edge{\n\tint u,v,w;\n\tinline void read(){scanf(\"%lld%lld%lld\",&u,&v,&w);}\n};\nstruct node{\n\tint d,fa[21],mn[21];\n};\nstruct dnd{\n\tint id,dis;\n\tbool operator <(dnd x) const\n\t{return dis>x.dis;}\n};\nbool cmp(edge x,edge y){return x.w>y.w;}\nint n,m,p,q;\nedge e[300001];\nnode tr[100001];\nbool vis[100001];\nljb t,g;\ndnd a[100001];\npriority_queue<dnd> pq;\ninline void dijkstra()\n{\n\twhile(!pq.empty())\n\t{\n\t\tdnd now=pq.top();\n\t\tpq.pop();\n\t\tif(vis[now.id]) continue;\n\t\tvis[now.id]=1;\n\t\tfor(int i=g.fst[now.id];i;i=g.nxt[i])\n\t\t{\n\t\t\tint v=g.v[i],w=g.w[i];\n\t\t\tif(now.dis+w<a[v].dis)\n\t\t\t\ta[v].dis=now.dis+w,\n\t\t\t\tpq.push(a[v]);\n\t\t}\n\t}\n}\ninline void kruscal()\n{\n\tbcj u;\n\tu.init(n);\n\tfor(int i=1;u.c>1;i++)\n\t\tif(!u.isin(e[i].u,e[i].v))\n\t\t\tu.Merge(e[i].u,e[i].v),\n\t\t\tt.add(e[i].u,e[i].v,e[i].w),\n\t\t\tt.add(e[i].v,e[i].u,e[i].w);\n}\ninline void dfs(int x,int f,int d,int w)\n{\n\ttr[x].d=d;\n\ttr[x].fa[0]=f;\n\ttr[x].mn[0]=w;\n\tvis[x]=1;\n\tfor(int i=t.fst[x];i;i=t.nxt[i])\n\t\tif(t.v[i]!=f)\n\t\t\tdfs(t.v[i],x,d+1,t.w[i]);\n}\ninline int LCA(int x,int y)\n{\n\tif(tr[x].d<tr[y].d) swap(x,y);\n\tfor(int i=20;i>=0;i--)\n\t\tif(tr[tr[x].fa[i]].d>=tr[y].d)\n\t\t\tx=tr[x].fa[i];\n\tif(x==y) return x;\n\tfor(int i=20;i>=0;i--)\n\t\tif(tr[x].fa[i]!=tr[y].fa[i])\n\t\t\tx=tr[x].fa[i],y=tr[y].fa[i];\n\treturn tr[x].fa[0];\n}\ninline int linkmin(int x,int y)\n{\n\tint L=LCA(x,y),res=INF;\n\tfor(int i=20;i>=0;i--)\n\t\tif(tr[tr[x].fa[i]].d>=tr[L].d)\n\t\t\tres=min(res,tr[x].mn[i]),x=tr[x].fa[i];\n\tfor(int i=20;i>=0;i--)\n\t\tif(tr[tr[y].fa[i]].d>=tr[L].d)\n\t\t\tres=min(res,tr[y].mn[i]),y=tr[y].fa[i];\n\treturn res;\n}\nsigned main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%lld%lld%lld\",&x,&y,&z);\n\t\tg.add(x,y,z);\n\t\tg.add(y,x,z);\n\t\te[i].u=x;\n\t\te[i].v=y;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\ta[i].dis=INF,a[i].id=i;\n\tcin>>p;\n\tfor(int i=1;i<=p;i++)\n\t{\n\t\tint x;\n\t\tscanf(\"%lld\",&x);\n\t\ta[x].dis=0;\n\t\tpq.push(a[x]);\n\t}\n\tdijkstra();\n\tfor(int i=1;i<=m;i++)\n\t\te[i].w=min(a[e[i].u].dis,a[e[i].v].dis);\n\tsort(e+1,e+1+m,cmp);\n\tkruscal();\n\tdfs(1,1,0,INF);\n\tfor(int i=1;i<=20;i++)\n\t\tfor(int x=1;x<=n;x++)\n\t\t\ttr[x].fa[i]=tr[tr[x].fa[i-1]].fa[i-1],\n\t\t\ttr[x].mn[i]=min(tr[x].mn[i-1],tr[tr[x].fa[i-1]].mn[i-1]);\n\tcin>>q;\n\twhile(q--)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\tprintf(\"%lld\\n\",max(0ll,linkmin(x,y)-1));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1659091317,
        "uid": 340940,
        "name": "IAKIOI2357",
        "ccfLevel": 0,
        "title": "P8240 [AGM 2022 \u8d44\u683c\u8d5b] \u5077\u94c0\u8ba1\u5212 \u9898\u89e3"
    }
]