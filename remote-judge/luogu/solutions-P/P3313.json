[
    {
        "content": "## \u9ed8\u8ba4\u5927\u5bb6\u90fd\u4f1a\u6811\u5256\u3002\n\n\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff1f\n\n\u5176\u5b9e\u548c\u4e3b\u5e2d\u6811\u5dee\u4e0d\u591a\u3002\n\n\u4e3b\u5e2d\u6811\u5c31\u662f\u52a8\u6001\u5f00\u70b9\u7684\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u76ee\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b97\u6559\u5efa\u4e00\u4e2a\u7ebf\u6bb5\u6811\u3002\u6bcf\u68f5\u7ebf\u6bb5\u6811\u5b58\u533a\u95f4\u6700\u5927\u503c$(max)$\u548c\u533a\u95f4\u548c$(tot)$\u3002\n\n\u8fd9\u4e0d\u662f\u6811\u4e0a\u8be2\u95ee\u5417\uff1f\uff1f\uff1f\u6811\u5256\u5c31\u597d\u4e86qwq\n\n\u4f60\u8bf4\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff1f\u6240\u4ee5\u6211\u4eec\u8981\u52a8\u6001\u5f00\u70b9\u3002\n\n\u4ec0\u4e48\u610f\u601d\u5462\uff1f\n\n\u7b80\u5355\u70b9\u8bf4\uff0c\u4e0d\u9700\u8981\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0d\u6dfb\u52a0\uff0c\u53ea\u6dfb\u52a0\u9700\u8981\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u3002\n\n\u6bd4\u5982\u8bf4\u6709\u4e24\u4e2a\u5b97\u6559\uff0c\u4e00\u4e2a\u662f%$czx$\u6559\uff0c\u4e00\u4e2a\u662f\u5632\u8bbd$xj$\u6559(???\n\n\u57ce\u5e02\u5206\u5e03\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/36916.png)\n\n\u57ce\u5e02\u91cc\u7684\u6570\u5b57\u8868\u793a$DFS$\u5e8f\uff0c\u4e0d\u662f\u7f16\u53f7\uff01\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u4e0b\u6807\u548c$DFS$\u5e8f\u6709\u5173\uff01\n\n\u57ce\u5e02\u5b97\u6559\u4e0b\u65b9\u7684\u6570\u5b57\u8868\u793a\u8bc4\u7ea7\u3002\n\n\u5bf9\u4e8e\u7b2c$1$\u4e2a\u57ce\u5e02,\u6211\u4eec\u628a\u5b83\u52a0\u5165\u5173\u4e8e$xj$\u7684\u7ebf\u6bb5\u6811\u4e2d\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u8fd8\u6ca1\u6709\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u8986\u76d6$1$\u8fd9\u4e2a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9$(tot=1,max=1)$:\n\n![](https://cdn.luogu.com.cn/upload/pic/36917.png)\n\n\u7136\u540e\u50cf\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\u4e00\u6837\uff0c\u5411\u4e0b\u4f20\u9012,\u4f20\u9012\u5230$[1,2]$\uff0c\u6ca1\u6709\u8282\u70b9\u8986\u76d6\uff0c\u65b0\u5efa\uff01\n\n![](https://cdn.luogu.com.cn/upload/pic/36918.png)\n\n\u5411\u4e0b\u4f20\u9012,\u4f20\u9012\u5230$[1,1]$\uff0c\u6ca1\u6709\u8282\u70b9\u8986\u76d6\uff0c\u65b0\u5efa\uff01\n\n![](https://cdn.luogu.com.cn/upload/pic/36919.png)\n\n\u5c31\u662f\u8fd9\u6837\uff01\u6bcf\u4e00\u6b21\u6dfb\u52a0\u7684\u8282\u70b9\u6570\u6700\u591a\u662f$logn$\u7ea7\u522b\u7684\u3002\n\n\u4e3a\u4ec0\u4e48?\u56e0\u4e3a\u7ebf\u6bb5\u6811\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e00\u6b21\u6700\u591a\u904d\u5386$(logn) +1$\u4e2a\u8282\u70b9\u3002\n\n\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(nlogn)$\n\n\u7136\u540e\u6211\u4eec\u8fd8\u9700\u8981\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b97\u6559\u90fd\u8981\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5f00\u4e00\u4e2a$root$\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e00\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u3002\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u3002\n\n```\nint root[100004],len;\nstruct Node{\n\tint l,r,max,tot;//l\u662f\u5de6\u513f\u5b50\u7684\u7f16\u53f7,r\u662f\u53f3\u513f\u5b50\u7684\u7f16\u53f7\n}tree[20000110];\ninline void update(int &rt,int w,int l,int r,int pos){//w\u662f\u8bc4\u7ea7,pos\u4f60\u8981\u6dfb\u52a0\u7684\u70b9\u7684DFS\u5e8f\n\tif (!rt) rt=++len;\n\ttree[rt].max=max(tree[rt].max,w),tree[rt].tot+=w;\n\tif (l==r) return; int mid=(l+r)/2;\n\tif (mid>=pos) update(tree[rt].l,w,l,mid,pos);\n\telse update(tree[rt].r,w,mid+1,r,pos);\n}\n```\n\n\u7136\u540e\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u6bd4\u5982\u628a$DFS$\u5e8f\u4e3a$x$\u7684\u70b9\u5b97\u6559\u6539\u4e3a$y$\uff0c\u5c31\u5148\u5728\u539f\u5148$x$\u5bf9\u5e94\u5b97\u6559\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e2d\u628a[x,x]\u7684\u8282\u70b9\u7684\u503c\u5168\u8be5\u6210$0$\uff0c\u7136\u540e\u5bf9\u4e8e\u5b83\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u89e3\u70b9$pushup$\u4e00\u4e0b\u3002\n\n\u5373\n```\ninline void remove(int &rt,int l,int r,int pos){\n\tif (l==r){ tree[rt].tot=0,tree[rt].max=0;return; }\n\tint mid=(l+r)/2;\n\tif (mid>=pos) remove(tree[rt].l,l,mid,pos);\n\telse remove(tree[rt].r,mid+1,r,pos);\n\ttree[rt].tot=tree[tree[rt].l].tot+tree[tree[rt].r].tot;\n\ttree[rt].max=max(tree[tree[rt].l].max,tree[tree[rt].r].max);\n}\n```\n\n\u6700\u540e\u5728$y$\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e2d$update\\ x$\u7684\u8bc4\u7ea7\n\n\u67e5\u8be2\u7684\u8bdd\u5c31\u5728\u4e24\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u8df3\u94fe\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u662f\u67e5\u8be2\u4e00\u6761\u94fe\u4e0a\u7684\u503c\u600e\u4e48\u529e\u5462\uff1f\n\n\u8bbe\u65c5\u884c\u8005\u7684\u5b97\u6559\u662f$X$\uff0c\u4e24\u4e2a\u70b9\u7684$DFS$\u5e8f\u5206\u522b\u4e3a$A,B$\uff0c\u8fd9\u5c31\u7b49\u4ef7\u4e8e\u67e5\u8be2$X$\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u533a\u95f4$[A,B]$\u7684\u503c\u3002\n\n```\ninline int querytot(int rt,int lb,int rb,int l,int r){\n\tif (r<lb||l>rb) return 0;\n\tif (r>=rb&&l<=lb) return tree[rt].tot;\n\tint mid=(lb+rb)/2;\n\treturn querytot(tree[rt].l,lb,mid,l,r)+querytot(tree[rt].r,mid+1,rb,l,r);\n}\ninline int querymax(int rt,int lb,int rb,int l,int r){\n\tif (r<lb||l>rb) return 0;\n\tif (r>=rb&&l<=lb) return tree[rt].max;\n\tint mid=(lb+rb)/2;\n\treturn max(querymax(tree[rt].l,lb,mid,l,r),querymax(tree[rt].r,mid+1,rb,l,r));\n}\ninline int sigmax(int u,int v,int zj){\n\tint ans=0;\n\twhile (top[u]!=top[v]){\n\t\tif (dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tans=max(ans,querymax(root[zj],1,n,tpos[top[u]],tpos[u]));\n\t\tu=fa[top[u]];\n\t}\n\tif (dep[u]<dep[v]) swap(u,v);\n\tans=max(ans,querymax(root[zj],1,n,tpos[v],tpos[u]));\n\treturn ans;\n}\ninline int sigtot(int u,int v,int zj){\n\tint ans=0;\n\twhile (top[u]!=top[v]){\n\t\tif (dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tans=ans+querytot(root[zj],1,n,tpos[top[u]],tpos[u]);\n\t\tu=fa[top[u]];\n\t}\n\tif (dep[u]<dep[v]) swap(u,v);\n\tans=ans+querytot(root[zj],1,n,tpos[v],tpos[u]);\n\treturn ans;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n    int to,next;\n}g[1000000];\nint tot,n,m,cnt,w[100004],zj[100004],len,head[100004],dep[100004],wson[100004],top[100004],tpos[100004],pre[100004],fa[100004],size[100004];\ninline void made(int from,int to){\n    g[++tot].to=to;\n    g[tot].next=head[from];\n    head[from]=tot;\n}\ninline void dfs1(int rt,int ff){\n    fa[rt]=ff;dep[rt]=dep[ff]+1;size[rt]=1;\n    for (int i=head[rt];i;i=g[i].next){\n        int v=g[i].to;\n        if (v==ff) continue;\n        dfs1(v,rt);\n        size[rt]+=size[v];\n        if (!wson[rt]||size[wson[rt]]<size[v]) wson[rt]=v;\n    }\n}\ninline void dfs2(int rt,int tops){\n    tpos[rt]=++cnt;pre[cnt]=rt;top[rt]=tops;\n    if (wson[rt]) dfs2(wson[rt],tops);\n    for (int i=head[rt];i;i=g[i].next){\n        int v=g[i].to;\n        if (v==fa[rt]||v==wson[rt]) continue;\n        dfs2(v,v);\n    }\n}\nint root[100004];\nstruct Node{\n    int l,r,max,tot;\n}tree[20000110];\ninline void update(int &rt,int w,int l,int r,int pos){\n    if (!rt) rt=++len;\n    tree[rt].max=max(tree[rt].max,w),tree[rt].tot+=w;\n    if (l==r) return; int mid=(l+r)/2;\n    if (mid>=pos) update(tree[rt].l,w,l,mid,pos);\n    else update(tree[rt].r,w,mid+1,r,pos);\n}\ninline void remove(int &rt,int l,int r,int pos){\n    if (l==r){ tree[rt].tot=0,tree[rt].max=0;return; }\n    int mid=(l+r)/2;\n    if (mid>=pos) remove(tree[rt].l,l,mid,pos);\n    else remove(tree[rt].r,mid+1,r,pos);\n    tree[rt].tot=tree[tree[rt].l].tot+tree[tree[rt].r].tot;\n    tree[rt].max=max(tree[tree[rt].l].max,tree[tree[rt].r].max);\n}\ninline int querytot(int rt,int lb,int rb,int l,int r){\n    if (r<lb||l>rb) return 0;\n    if (r>=rb&&l<=lb) return tree[rt].tot;\n    int mid=(lb+rb)/2;\n    return querytot(tree[rt].l,lb,mid,l,r)+querytot(tree[rt].r,mid+1,rb,l,r);\n}\ninline int querymax(int rt,int lb,int rb,int l,int r){\n    if (r<lb||l>rb) return 0;\n    if (r>=rb&&l<=lb) return tree[rt].max;\n    int mid=(lb+rb)/2;\n    return max(querymax(tree[rt].l,lb,mid,l,r),querymax(tree[rt].r,mid+1,rb,l,r));\n}\ninline int sigmax(int u,int v,int zj){\n    int ans=0;\n    while (top[u]!=top[v]){\n        if (dep[top[u]]<dep[top[v]]) swap(u,v);\n        ans=max(ans,querymax(root[zj],1,n,tpos[top[u]],tpos[u]));\n        u=fa[top[u]];\n    }\n    if (dep[u]<dep[v]) swap(u,v);\n    ans=max(ans,querymax(root[zj],1,n,tpos[v],tpos[u]));\n    return ans;\n}\ninline int sigtot(int u,int v,int zj){\n    int ans=0;\n    while (top[u]!=top[v]){\n        if (dep[top[u]]<dep[top[v]]) swap(u,v);\n        ans=ans+querytot(root[zj],1,n,tpos[top[u]],tpos[u]);\n        u=fa[top[u]];\n    }\n    if (dep[u]<dep[v]) swap(u,v);\n    ans=ans+querytot(root[zj],1,n,tpos[v],tpos[u]);\n    return ans;\n}\nchar s[100];\nint main(){\n    len=0;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++){\n        scanf(\"%d%d\",&w[i],&zj[i]);\n    }\n    int x,y;\n    for (int i=1;i<n;i++){\n        scanf(\"%d%d\",&x,&y);\n        made(x,y);made(y,x);\n    }\n    dfs1(1,0);dfs2(1,1);\n    for (int i=1;i<=n;i++){\n        update(root[zj[i]],w[i],1,n,tpos[i]);\n    }\t\t\n    while (m--){\n        scanf(\"%s\",s);scanf(\"%d%d\",&x,&y);\n        switch (s[1]){\n            case 'C':{\n                remove(root[zj[x]],1,n,tpos[x]);\n                update(root[y],w[x],1,n,tpos[x]);\n                zj[x]=y;\n                break;\n            }\n            case 'W':{\n                remove(root[zj[x]],1,n,tpos[x]);\n                update(root[zj[x]],y,1,n,tpos[x]);\n                w[x]=y;\n                break;\n            }\n            case 'S':{\n                printf(\"%d\\n\",sigtot(x,y,zj[x]));\n                break;\n            } \n            case 'M':{\n                printf(\"%d\\n\",sigmax(x,y,zj[x]));\n                break;\n            }\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1539054205,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u6ce8\uff1a\u6b64\u9898\u6709\u6bd2\u3002\u3002\u3002\n\n\u4e0d\u8981\u88ab\u6807\u7b7e\u4e2d\u7684 \u4e3b\u5e2d\u6811 \u8ff7\u60d1\u4e86\u3002\u3002\u3002\n\n\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662f \u500d\u589eLCA+\u4e3b\u5e2d\u6811\uff0c\u4e8e\u662f\u82b1\u4e86 10min \u6572\u4e86\u4e00\u53d1\u6a21\u677f\uff0c\u7136\u540e\u5b8c\u7f8e\u5730 TLE \u4e86\u3002\u3002\u3002\n\n\u60f3\u4e86\u4e24\u5929\uff0c\u65e0\u65b9\uff0c\u770b\u9898\u89e3\uff0c\u53d1\u73b0\u8981\u7528 \u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811 \u3002\u3002\u3002\n\n\u82b1\u4e86\u534a\u5c0f\u65f6\u5b66\u4e60\u4e86 \u6811\u5256\uff08\u770b\u5b8c\u53d1\u73b0 \u6811\u5256 \u662f\u4e2a\u597d\u4e1c\u4e1c\u3002\u3002\u3002\uff09\uff0c\u53c8\u8c03\u4e86\u534a\u5c0f\u65f6\uff0c\u7ec8\u4e8e AC \u4e86\u3002\u3002\u3002\n\n\u8981\u70b9\uff1a\n\n1.\u6709\u591a\u5c11\u4e2a\u5b97\u6559\uff0c\u5c31\u6709\u591a\u5c11\u4e2a\u7ebf\u6bb5\u6811\u3002\n\n2.\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u503c\uff1a\u533a\u95f4\u548c\u503c\uff0c\u533a\u95f4\u6700\u503c\uff0c\u6b64\u5904 \u533a\u95f4 \u7531 \u76f8\u540c\u5b97\u6559\u7684\u57ce\u5e02 \u7ec4\u6210\u3002\n\n3.\u7ebf\u6bb5\u6811\u9664\u4e86 \u63d2\u5165\u503c \uff0c\u8fd8\u8981 \u5220\u9664\u503c\uff1b\u5f53\u6811\u4e2d\u6ca1\u6709\u67d0\u4e2a\u8282\u70b9\u65f6\uff0c\u589e\u52a0\u65b0\u8282\u70b9\uff0c\u5426\u5219\u76f4\u63a5\u4fee\u6539\u3002\n\n4.\u6b64\u5904\u4e3b\u5e2d\u6811\u5e94\u8be5\u80fd\u5199\uff0c\u7136\u800c\u6211\u4e0d\u4f1a\u3002\u3002\u3002\n\n4. \u6811\u5256 \u5e94\u8be5\u90fd\u4f1a\uff0c\u4e0d\u4f1a\u7684\u50cf\u6211\u4e00\u6837\u53f3\u8f6c\u81ea\u884c\u767e\u5ea6\u3002\u3002\u3002\n\n5.\u6ce8\u610f\u8bfb\u5165\uff0c\u4e00\u822c\u90fd\u7528 \u624b\u5199\u8bfb\u4f18 \u3002\n\n6.\u6ce8\u610f\u6570\u7ec4\u5927\u5c0f\uff08\u5f53\u521d\u6211\u5dee\u70b9\u5c31 RE \u4e86\u3002\u3002\u3002\uff09\n\n7.\u5269\u4e0b\u7684\u5c31\u662f\u7ec6\u8282\u5904\u7406\u7684\u95ee\u9898\u4e86\uff0c\u4ec0\u4e48\u524d\u5411\u661f\u5b58\u56fe\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5e94\u8be5\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002\n\n8.\u5efa\u8bae max \u51fd\u6570\u624b\u5199\uff0cSTL \u611f\u89c9\u6709\u70b9 \u6162+\u4e0d\u9760\u8c31 \u3002\u3002\u3002\n\n\u5982\u679c\u6ce8\u610f\u4e86\u4ee5\u4e0a\u8fd8\u662f\u83ab\u540d\u5176\u5999\u5730 WA \u4e86\uff0c\u770b\u4ee3\u7801\u5427\u3002\n\n\u9644\u4ee3\u7801\uff1a\uff08173\u884c\uff0c\u597d\u957f\u3002\u3002\u3002\uff09\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 100010\nusing namespace std;\nint n,m,d=1,e=1,g=1;\nint c[MAXN],w[MAXN],root[MAXN];\nint head[MAXN],id[MAXN],top[MAXN],deep[MAXN],fa[MAXN],son[MAXN],num[MAXN];\nstruct node1{//\u7ed3\u6784\u4f53\u524d\u5411\u661f\n    int next,to;\n}a[MAXN<<1];\nstruct node2{//\u52a8\u6001\u7ebf\u6bb5\u6811\n    int l,r,data1,data2;\n}b[MAXN*20];\ninline int read(){//\u5f31\u5f31\u7684\u8bfb\u4f18\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\ninline int max(const int &x,const int &y){//\u624b\u5199 max ,\u611f\u89c9\u6709\u70b9\u624b\u6b8b\u3002\u3002\u3002\n    if(x>y)return x;\n    return y;\n}\nvoid pushup(int rt){//\u4e0a\u4f20\n    b[rt].data1=b[b[rt].l].data1+b[b[rt].r].data1;\n    b[rt].data2=max(b[b[rt].l].data2,b[b[rt].r].data2);\n}\nvoid pushdown(int rt){//\u6e05\u7a7a\n    b[rt].data1=b[rt].data2=b[rt].l=b[rt].r=0;\n}\nvoid insert(int k,int v,int l,int r,int &rt){//\u63d2\u5165\n    int mid;\n    if(!rt)rt=e++;//\u5982\u4e0a \u7b2c3\u70b9\n    if(l==v&&v==r){\n        b[rt].data1=b[rt].data2=k;\n        return;\n    }\n    mid=l+r>>1;\n    if(v<=mid)insert(k,v,l,mid,b[rt].l);\n    else insert(k,v,mid+1,r,b[rt].r);\n    pushup(rt);\n}\nvoid remove(int k,int l,int r,int &rt){//\u5220\u9664\n    int mid;\n    if(l==r){\n        pushdown(rt);\n        rt=0;\n        return;\n    }\n    mid=l+r>>1;\n    if(k<=mid)remove(k,l,mid,b[rt].l);\n    else remove(k,mid+1,r,b[rt].r);\n    pushup(rt);\n    if(!b[rt].l&&!b[rt].r){//\u6ce8\u610f\u8fd9\u91cc\uff0c\u5de6\u5b50\u6811 \u4e0e \u53f3\u5b50\u6811 \u90fd\u7a7a\u65f6\uff0c\u8282\u70b9\u4e3a\u7a7a\n        pushdown(rt);\n        rt=0;\n    }\n}\nint query1(int s,int t,int l,int r,int rt){//\u533a\u95f4\u6c42\u548c\n    if(!rt)return 0;//\u8282\u70b9\u4e3a\u7a7a\uff0c\u8fd4\u56de\n    int mid;\n    if(l==s&&r==t)\n    return b[rt].data1;\n    mid=l+r>>1;\n    if(t<=mid)return query1(s,t,l,mid,b[rt].l);\n    else if(s>mid)return query1(s,t,mid+1,r,b[rt].r);\n    else return query1(s,mid,l,mid,b[rt].l)+query1(mid+1,t,mid+1,r,b[rt].r);\n}\nint query2(int s,int t,int l,int r,int rt){//\u533a\u95f4\u6c42\u6700\u503c\n    if(!rt)return 0;\n    int mid;\n    if(l==s&&r==t)\n    return b[rt].data2;\n    mid=l+r>>1;\n    if(t<=mid)return query2(s,t,l,mid,b[rt].l);\n    else if(s>mid)return query2(s,t,mid+1,r,b[rt].r);\n    else return max(query2(s,mid,l,mid,b[rt].l),query2(mid+1,t,mid+1,r,b[rt].r));\n}\nvoid add(int x,int y){//\u52a0\u8fb9\n    a[d].to=y;\n    a[d].next=head[x];\n    head[x]=d++;\n    a[d].to=x;\n    a[d].next=head[y];\n    head[y]=d++;\n}\nvoid buildtree(int rt){//\u5efa\u6811+\u6811\u5256\u51c6\u59071\n    int will;\n    num[rt]=1;\n    for(int i=head[rt];i;i=a[i].next){\n        will=a[i].to;\n        if(!deep[will]){\n            deep[will]=deep[rt]+1;\n            fa[will]=rt;\n            buildtree(will);\n            num[rt]+=num[will];\n            if(num[will]>num[son[rt]])son[rt]=will;\n        }\n    }\n}\nvoid dfs(int rt,int fa){//\u6811\u5256\u51c6\u59072\n    if(son[rt]){\n        top[son[rt]]=top[rt];\n        id[son[rt]]=++g;\n        dfs(son[rt],rt);\n    }\n    int v;\n    for(int i=head[rt];i;i=a[i].next){\n        v=a[i].to;\n        if(v==fa||v==son[rt])continue;\n        top[v]=v;\n        id[v]=++g;\n        dfs(v,rt);\n    }\n}\nvoid change1(int x,int y){//\u4fee\u6539\u5b97\u6559\uff1a\u539f\u5b97\u6559\u4e2d\u5220\u9664\uff0c\u65b0\u5b97\u6559\u4e2d\u63d2\u5165\n    remove(id[x],1,n,root[c[x]]);\n    c[x]=y;\n    insert(w[x],id[x],1,n,root[c[x]]);\n}\nvoid change2(int x,int y){//\u4fee\u6539\u8bc4\u4ef7\uff1a\u76f4\u63a5\u63d2\u5165\n    w[x]=y;\n    insert(w[x],id[x],1,n,root[c[x]]);\n}\nvoid work1(int x,int y){//\u6c42\u8bc4\u4ef7\u548c\n    int cs=c[x],s=0;\n    while(top[x]!=top[y]){//\u6811\u5256\u641e\u8d77\n        if(deep[top[x]]<deep[top[y]])swap(x,y);\n        s+=query1(id[top[x]],id[x],1,n,root[cs]);\n        x=fa[top[x]];\n    }\n    if(deep[x]>deep[y])swap(x,y);\n    s+=query1(id[x],id[y],1,n,root[cs]);//\u4e0d\u8981\u5fd8\u4e86\u8fd9\u91cc\u3002\u3002\u3002\n    printf(\"%d\\n\",s);\n}\nvoid work2(int x,int y){//\u6c42\u8bc4\u4ef7\u6700\u503c\n    int cs=c[x],s=0;\n    while(top[x]!=top[y]){//\u540c\u4e0a\n        if(deep[top[x]]<deep[top[y]])swap(x,y);\n        s=max(s,query2(id[top[x]],id[x],1,n,root[cs]));\n        x=fa[top[x]];\n    }\n    if(deep[x]>deep[y])swap(x,y);\n    s=max(s,query2(id[x],id[y],1,n,root[cs]));\n    printf(\"%d\\n\",s);\n}\nint main(){\n    int x,y;\n    char ch[3];\n    n=read();m=read();\n    for(int i=1;i<=n;i++){w[i]=read();c[i]=read();}\n    for(int i=1;i<n;i++){\n        x=read();y=read();\n        add(x,y);\n    }\n    deep[1]=id[1]=top[1]=1;//\u521d\u503c\n    buildtree(1);\n    dfs(1,0);\n    for(int i=1;i<=n;i++)insert(w[i],id[i],1,n,root[c[i]]);//\u5efa\u521d\u59cb\u7ebf\u6bb5\u6811\n    while(m--){//\u4e3b\u8fc7\u7a0b\n        scanf(\"%s\",ch);x=read();y=read();\n        if(ch[0]=='C'){\n            if(ch[1]=='C')change1(x,y);\n            if(ch[1]=='W')change2(x,y);\n        }\n        if(ch[0]=='Q'){\n            if(ch[1]=='S')work1(x,y);\n            if(ch[1]=='M')work2(x,y);\n        }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1512276816,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u542c\u8bf4\u8fd9\u9898\u662f\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\uff1f  \n\u89c2\u5bdf\u4e00\u4e0b\u9898\u9762\uff0c\u663e\u7136\u5148\u4e0a\u4e00\u53d1\u6811\u5256\uff0c\u597d\u50cf\u662f\u5bf9\u6bcf\u4e00\u79cd\u5b97\u6559\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u7ef4\u62a4\u533a\u95f4\u548c\u548c\u533a\u95f4\u6700\u5927\u503c\u3002\u3002\u3002  \n\u867d\u7136\u6211\u662f\u6765\u7ec3\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u677f\u5b50\u7684\uff0c\u8003\u8651\u5230fhq Treap\u6781\u4e3a\u597d\u5199\uff0c\u6211\u8fd8\u662f~~\u4e0d\u8981\u8138\u7684~~\u4f7f\u7528\u4e86fhq Treap\u6765\u7ef4\u62a4  \n\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u5b97\u6559\u5f00\u4e00\u9897fhq Treap:\n- \u7b2c\u4e00\u4e2a\u64cd\u4f5c\u5c31\u662f\u5c06\u8282\u70b9\u6362\u4e00\u68f5\u6811\uff0c\u90a3\u4e00\u4e2aerase\u52a0\u4e00\u4e2ainsert\u5c31\u884c\u4e86\n- \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u662f\u6539\u53d8\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u6211\u662f\u91c7\u53d6erase\u51fa\u6765\u4e4b\u540e\u76f4\u63a5\u4fee\u6539value\uff0cpushup\u4e4b\u540e\u518dinsert\u56de\u53bb\u7684\u65b9\u6cd5~~\u8fd9\u6837\u597d\u5199~~\n- \u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6211\u4eec\u5728\u94fe\u4e0a\u5411\u4e0a\u8df3\u7684\u65f6\u5019\u8be2\u95ee\u4e00\u4e0b\u8fd9\u6bb5\u533a\u95f4\u5185\u7684\u6743\u503c\u548c\u5373\u53ef\n- \u7b2c\u56db\u4e2a\u64cd\u4f5c\u540c\u64cd\u4f5c\u4e09\uff0c\u8be2\u95ee\u533a\u95f4\u6700\u5927\u503c\u66f4\u65b0  \n\u603b\u7684\u6765\u8bf4\u5176\u5b9e\u4e0d\u96be\u60f3\uff0c\u5c31\u662f\u628a\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u5199\u5199\u597d\u5957\u4e00\u5957\u5c31\u884c\u4e86~~\u6ce8\u610f\u7ec6\u8282~~\n\n~~\u8bf4\u597d\u6765\u7ec3\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u5462\uff1f~~\n\n\u9644\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801\uff1f\n```cpp\n#include <cstdio> \n#include <algorithm>\n\nnamespace IO{\n    int read() {\n        char c = getchar(); int x = 0; bool flag = 0;\n        while (c < '0' || c > '9') (c == '-') && (flag = 1), c = getchar();\n        while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n        (flag) && (x = -x);\n        return x; \n    }\n\n    void write(int x) {\n        if (x < 0) putchar('-'), x = -x;\n        if (x > 9) write(x / 10);\n        putchar(x % 10 + '0');\n    }\n\n    void file() {\n        #ifndef ONLINE_JUDGE\n        freopen(\"2.in\", \"r\", stdin);\n        freopen(\"testdata1.out\", \"w\", stdout);\n        #endif\n    }\n} using namespace IO;\n\nconst int N = 100009;\n\nint n, q, cnt;\nint head[N], nxt[N << 1], to[N << 1];\nint w[N], c[N], dep[N], fa[N], son[N], id[N], top[N], siz[N];\nint rt[N], val[N], max[N], ch[N][2], key[N], sum[N];\n\nnamespace Treap {\n    inline void pushup(int u) {\n        max[u] = std::max(std::max(max[ch[u][0]], max[ch[u][1]]), val[u]);\n        sum[u] = sum[ch[u][0]] + sum[ch[u][1]] + val[u];\n    }\n\n    inline void desNode(int u) {\n        ch[u][0] = ch[u][1] = 0, siz[u] = 1, max[u] = sum[u] = val[u];\n    }\n\n    int merge(int l, int r) {\n        if (!l || !r) return l ^ r;\n        if (key[l] < key[r]) {\n            ch[l][1] = merge(ch[l][1], r);\n            pushup(l);\n            return l;\n        } else {\n            ch[r][0] = merge(l, ch[r][0]);\n            pushup(r);\n            return r;\n        }\n    }\n\n    void split(int u, int x, int &l, int &r) {\n        if (!u) l = r = 0;\n        else {\n            if (u <= x) l = u, split(ch[l][1], x, ch[l][1], r);\n            else r = u, split(ch[r][0], x, l, ch[r][0]);\n            pushup(u);\n        }\n    }\n\n    void insert(int u, int x) {\n        int t1, t2;\n        split(rt[x], u, t1, t2);\n        rt[x] = merge(merge(t1, u), t2);\n    }\n\n    void erase(int u, int x) {\n        int t1, t2, t3;\n        split(rt[x], u, t1, t2);\n        split(t1, u - 1, t1, t3);\n        rt[x] = merge(merge(t1, merge(ch[t3][0], ch[t3][1])), t2);\n        desNode(t3);\n    }\n} using namespace Treap;\n\nvoid print(int u) {\n    if (ch[u][0]) print(ch[u][0]);\n    printf(\"%d : %d %d %d %d %d\\n\", u, val[u], sum[u], ch[u][0], ch[u][1], key[u]);\n    if (ch[u][1]) print(ch[u][1]);\n}\n\nchar getopt() {\n    char c = getchar();\n    while (c != 'C' && c != 'W' && c != 'S' && c != 'Q' && c != 'M') c = getchar();\n    return c;\n}\n\nvoid add(int a, int b) {\n    int u = head[a], v = ++cnt;\n    nxt[v] = u, to[v] = b;\n    head[a] = v;\n}\n\nvoid dfs1(int u, int pre, int depth) {\n    fa[u] = pre, dep[u] = depth, siz[u] = 1;\n    for (int i = head[u]; i; i = nxt[i]) {\n        if (to[i] == pre) continue;\n        dfs1(to[i], u, depth + 1);\n        siz[u] += siz[to[i]];\n        if (siz[to[i]] > siz[son[u]]) son[u] = to[i]; \n    }\n}\n\nvoid dfs2(int u, int t) {\n    top[u] = t, id[u] = ++cnt;\n    max[id[u]] = sum[id[u]] = val[id[u]] = w[u], key[id[u]] = rand() % 19260817, rt[c[u]] = merge(rt[c[u]], id[u]);\n    if (!son[u]) return;\n    dfs2(son[u], t);\n    for (int i = head[u]; i; i = nxt[i]) {\n        if (to[i] == fa[u] || to[i] == son[u]) continue;\n        dfs2(to[i], to[i]);\n    }\n}\n\nint get_sum(int l, int r, int x) {\n    int t1, t2, t3, ans;\n    split(rt[x], l - 1, t1, t2);\n    split(t2, r, t2, t3);\n    ans = sum[t2];\n    rt[x] = merge(merge(t1,t2), t3);\n    return ans;\n}\n\nint get_max(int l, int r, int x) {\n    int t1, t2, t3, ans;\n    split(rt[x], l - 1, t1, t2);\n    split(t2, r, t2, t3);\n    ans = max[t2];\n    rt[x] = merge(merge(t1, t2), t3);\n    return ans;\n}\n\nint main() {\n    file();\n    n = read(), q = read();\n    for (int i = 1; i <= n; i++) w[i] = read(), c[i] = read();\n    for (int i = 1; i < n; i++) {\n        int u = read(), v = read();\n        add(u, v);\n        add(v, u);\n    }\n    dfs1(1, 0, 1), cnt = 0, dfs2(1, 1);\n    while (q--) {\n        char opt1 = getopt(), opt2 = getopt();\n        if (opt1 == 'C' && opt2 == 'C') {\n            int x = read(), y = read();\n            erase(id[x], c[x]);\n            insert(id[x], c[x] = y);\n        } else if (opt1 == 'C' && opt2 == 'W') {\n            int t1, t2, t3, x = read(), y = read();\n            erase(id[x], c[x]);\n            val[id[x]] = y, pushup(id[x]);\n            insert(id[x], c[x]);\n        } else if (opt1 == 'Q' && opt2 == 'S') {\n            int u = read(), v = read(), x = c[u], ans = 0;\n            while (top[u] != top[v]) {\n                if (dep[top[u]] < dep[top[v]]) std::swap(u, v);\n                ans += get_sum(id[top[u]], id[u], x);   \n                u = fa[top[u]];\n            }\n            if (dep[u] < dep[v]) std::swap(u, v);\n            ans += get_sum(id[v], id[u], x);\n            write(ans), putchar('\\n');\n        } else {\n            int u = read(), v = read(), x = c[u], ans = 0;\n            while (top[u] != top[v]) {\n                if (dep[top[u]] < dep[top[v]]) std::swap(u, v);\n                ans = std::max(ans, get_max(id[top[u]], id[u], x));\n                u = fa[top[u]]; \n            }\n            if (dep[u] < dep[v]) std::swap(u, v);\n            ans = std::max(ans, get_max(id[v], id[u], x));\n            write(ans), putchar('\\n');\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1538965875,
        "uid": 25715,
        "name": "\u8bba\u4e4b\u94ed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 \u3010P3313\u3011[SDOI2014]\u65c5\u884c"
    },
    {
        "content": "[\u539fBLOG\u5730\u5740](http://blog.csdn.net/qq_35914587/article/details/79358100)\n## \u9898\u76ee\u63cf\u8ff0\uff1a\n\u65e0\u3002\n## \u9898\u76ee\u5206\u6790\uff1a\n\u9996\u5148\uff0c\u5982\u679c\u6ca1\u6709\u5b97\u6559\u4fe1\u4ef0\u7684\u9650\u5236\uff0c\u5373\u6bcf\u4e2a\u65c5\u884c\u8005\u53ef\u4ee5\u5728\u6cbf\u9014\u7684\u4efb\u4f55\u4e00\u4e2a\u57ce\u5e02\u7761\u89c9\u3002\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u662f\u4e00\u4e2a\u6811\u4e0a\u8def\u5f84\u6c42max&&sum\u7684\u95ee\u9898\uff0c\u6811\u5256+\u7ebf\u6bb5\u6811\n\u4f46\u662f\u73b0\u5728\u52a0\u5165\u4e86\u5b97\u6559\u9650\u5236\u3002\n\u89c2\u5bdf\u4e00\u4e0b\u5b97\u6559\u4e2a\u6570\uff0c\u4e3a$10^5$.\n\u5047\u5982\u6211\u4eec\u5f00$10^5$\u68f5\u7ebf\u6bb5\u6811\uff0c\u5206\u522b\u5bf9\u5e94\u6bcf\u79cd\u5b97\u6559\u3002\n\u6211\u4eec\u5728\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5728\u76f8\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e2d\u8fdb\u884c\u67e5\u8be2.\n\u7136\u800c\u5982\u679c\u6309\u7167\u6ee1\u4e8c\u53c9\u6811\u7684\u65b9\u6cd5\u9020\u7ebf\u6bb5\u6811\uff0c\u662f\u80af\u5b9aMLE\u7684\u3002\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u7ebf\u6bb5\u6811\u8fdb\u884c\u52a8\u6001\u5f00\u70b9\u5373\u53ef\u3002\n\u7ebf\u6bb5\u6811\u652f\u6301\u7684\u64cd\u4f5c\u6709\u67e5\u8be2\u6700\u5927\u503c\uff0c\u67e5\u8be2\u6700\u5c0f\u503c\uff0c\u5355\u70b9\u4fee\u6539\u3002\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u628a\u539f\u4f4d\u7f6e\u7684\u6743\u503c\u53d8\u4e3a0\uff0c\u4e0d\u7528\u6253\u4ec0\u4e48\u5220\u9664\u6807\u8bb0\u3002\n## \u9898\u76ee\u94fe\u63a5\uff1a\n[Luogu 3313](https://www.luogu.org/problemnew/show/P3313)\n[BZOJ 3513](http://www.lydsy.com/JudgeOnline/problem.php?id=3531)\n## AC \u4ee3\u7801\uff1a\n\n```\n#include <cstdio>\n#include <iostream> \n#define il inline\nconst int maxm=1e6+1;\nstruct tree{\n    int ls,rs,maxx,sum;\n};\nint root[maxm],rt;\ntree st[maxm*4];\nint deep[maxm],son[maxm],fa[maxm],size[maxm],top[maxm];\nint head[maxm],to[maxm*2],net[maxm*2],cnt;\nint yval[maxm],val[maxm],yc[maxm],c[maxm];\nint xz[maxm];\nint id[maxm],who[maxm],tot;\nil void add_edge(int x,int y)\n{\n    to[++cnt]=y,net[cnt]=head[x],head[x]=cnt;\n}\nint dfs1(int x,int fax,int dep)\n{\n    fa[x]=fax,deep[x]=dep,size[x]=1;\n    int maxson=-1;\n    for(int i=head[x];i;i=net[i])\n    if(to[i]!=fax)\n    {\n        size[x]+=dfs1(to[i],x,dep+1);\n        if(maxson<size[to[i]]) maxson=size[to[i]],son[x]=to[i];\n    }\n    return size[x];\n}\nvoid dfs2(int x,int topx)\n{\n    id[x]=++tot;\n    who[tot]=x;\n    val[tot]=yval[x],c[tot]=yc[x];\n    top[x]=topx;\n    if(!son[x]) return;\n    dfs2(son[x],topx);\n    for(int i=head[x];i;i=net[i])\n     if(!id[to[i]]) dfs2(to[i],to[i]);\n}\nil void update(int o)\n{\n    st[o].maxx=std::max(st[st[o].ls].maxx,st[st[o].rs].maxx);\n    st[o].sum=st[st[o].ls].sum+st[st[o].rs].sum;\n}\nvoid mofidy(int &o,int l,int r,int ind,int num)\n{\n    if(!o) o=++rt;\n    if(l>=r)\n    {\n        st[o].maxx=st[o].sum=num;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(ind<=mid) mofidy(st[o].ls,l,mid,ind,num);\n    else mofidy(st[o].rs,mid+1,r,ind,num);\n    update(o);\n    if(st[o].sum==0) o=0;\n}\nint askmax(int o,int l,int r,int ql,int qr)\n{\n    if(!o) return -1;\n    if(r<ql||l>qr) return -1;\n    if(ql<=l&&r<=qr)\n     return st[o].maxx;\n    int mid=(l+r)>>1;\n    return std::max(askmax(st[o].ls,l,mid,ql,qr),askmax(st[o].rs,mid+1,r,ql,qr));\n}\nint asksum(int o,int l,int r,int ql,int qr)\n{\n    if(!o) return 0;\n    if(r<ql||l>qr) return 0;\n    if(ql<=l&&r<=qr)\n     return st[o].sum;\n    int mid=(l+r)>>1;\n    return asksum(st[o].ls,l,mid,ql,qr)+asksum(st[o].rs,mid+1,r,ql,qr);\n}\nil int tree_max(int u,int v)\n{\n    int ans=-1;\n    int xz=yc[v];\n    while(top[u]!=top[v])\n    {\n        if(deep[top[u]]<deep[top[v]]) std::swap(u,v);\n        ans=std::max(ans,askmax(root[xz],1,tot,id[top[u]],id[u]));\n        u=fa[top[u]];\n    }\n    if(deep[u]<deep[v]) std::swap(u,v);\n    ans=std::max(ans,askmax(root[xz],1,tot,id[v],id[u]));\n    return ans;\n}\nil int tree_sum(int u,int v)\n{\n    int ans=0;\n    int xz=yc[v];\n    while(top[u]!=top[v])\n    {\n        if(deep[top[u]]<deep[top[v]]) std::swap(u,v);\n        ans+=asksum(root[xz],1,tot,id[top[u]],id[u]);\n        u=fa[top[u]];\n    }\n    if(deep[u]<deep[v]) std::swap(u,v);\n    ans+=asksum(root[xz],1,tot,id[v],id[u]);\n    return ans;\n}\nil int read()\n{\n    int x=0,w=1;char ch=0;\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-') w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*w;\n}\nint main()\n{\n    int n,q;\n    n=read(),q=read();\n    for(int i=1;i<=n;i++)\n     yval[i]=read(),yc[i]=read();\n    for(int i=1;i<n;i++)\n    {\n        int u=read(),v=read();\n        add_edge(u,v);\n        add_edge(v,u);\n    }\n    dfs1(1,0,1),dfs2(1,1);\n    for(int i=1;i<=n;i++)\n     mofidy(root[yc[who[i]]],1,tot,i,yval[who[i]]);\n    for(int i=1;i<=q;i++)\n    {\n        char s[20];\n        int x,y;\n        scanf(\"%s\",s);\n        x=read(),y=read();\n        if(s[0]=='C'&&s[1]=='C')\n        {\n            mofidy(root[yc[x]],1,tot,id[x],0);\n            yc[x]=y;\n            mofidy(root[yc[x]],1,tot,id[x],yval[x]);\n        }\n        if(s[0]=='C'&&s[1]=='W')\n         yval[x]=y,mofidy(root[yc[x]],1,tot,id[x],y);\n        if(s[0]=='Q'&&s[1]=='M')\n         printf(\"%d\\n\",tree_max(x,y));\n        if(s[0]=='Q'&&s[1]=='S')\n         printf(\"%d\\n\",tree_sum(x,y)); \n    }\n    return 0;\n}\n```\n",
        "postTime": 1519427600,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u5206\u5757\u5199\u6cd5\u3002\r\n\r\n\u524d\u7f6e\u829d\u58eb\uff1a[\u6811\u5256](/problem/P3384)\r\n\r\n\u628a\u6811\u6811\u5256\u4e00\u4e0b\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5e8f\u5217\u95ee\u9898\u3002\u5173\u952e\u662f\u5982\u4f55\u5904\u7406\u5b97\u6559\u3002\r\n\r\n\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u628a\u6bcf\u79cd\u5b97\u6559\u90fd\u7ef4\u62a4\u4e00\u904d\uff0c\u7136\u800c\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(nc)$\uff0c\u4f1a\u70b8\u3002\r\n\r\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528\u7a7a\u95f4\u5c0f\u7684\u5206\u5757\u7ef4\u62a4\u3002\u5c06\u5e8f\u5217\u5206\u6210 $\\sqrt n$ \u5757\uff0c\u7531\u4e8e\u6bcf\u4e2a\u5b97\u6559\u7684\u5206\u5757\u53ea\u6709\u548c\u4e0e\u6700\u5927\u503c\u4e0d\u540c\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(c\\sqrt n)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\sqrt n\\log n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\r\n\r\n```\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 1e5 + 5, P = 5e2 + 5;\r\nstruct edge {\r\n\tint v, next;\r\n} e[N << 1];\r\nint a[N], c[N], w1[N], w[N], pos[N], sum[N][P], maxn[N][P], L[N], R[N];\r\n// sum[i][j] \u662f\u7b2cj\u5757\u5b97\u6559\u4e3ai\u7684\u548c\uff0cmaxn\u662f\u7b2cj\u5757\u5b97\u6559\u4e3ai\u7684\u6700\u5927\u503c\r\nint head[N], fa[N], id[N], siz[N], top[N], depth[N], son[N];\r\nint edge_cnt, n, q, u, v, x, cnt, awa, slen, sum1, sum2;\r\nchar opt[10];\r\ninline void build() {\r\n\tslen = sqrt(n), awa = n / slen + (n % slen != 0);\r\n\tfor (int id = 1; id <= awa; id ++)\r\n\t\tL[id] = (id - 1) * slen + 1, R[id] = id * slen;\r\n\tR[awa] = n;\r\n\tfor (int id = 1; id <= awa; id ++)\r\n\t\tfor (int j = L[id]; j <= R[id]; j ++)\r\n\t\t\tpos[j] = id, sum[c[j]][id] += a[j], maxn[c[j]][id] = max(maxn[c[j]][id], a[j]);\r\n}\r\ninline void clear(int id) {\r\n\tfor (int i = L[id]; i <= R[id]; i ++)\r\n\t\tmaxn[c[i]][id] = 0, sum[c[i]][id] = 0;\r\n} // \u66b4\u529b\u6e05\u7a7a\u5757\u7684\u6807\u8bb0\r\ninline void rebuild(int id) {\r\n\tfor (int i = L[id]; i <= R[id]; i ++)\r\n\t\tmaxn[c[i]][id] = max(maxn[c[i]][id], a[i]), sum[c[i]][id] += a[i];\r\n} // \u66b4\u529b\u7edf\u8ba1\u5757\u7684\u6807\u8bb0\r\ninline void updColor(int k, int x) {\r\n\tclear(pos[k]), c[k] = x, rebuild(pos[k]);\r\n} // \u66b4\u529b\u4fee\u6539\r\ninline void updValue(int k, int x) {\r\n\tclear(pos[k]), a[k] = x, rebuild(pos[k]);\r\n} // \u66b4\u529b\u4fee\u6539\r\ninline int qSum(int l, int r, int col) {\r\n\tint lp = pos[l], rp = pos[r], ans = 0;\r\n\tif (lp == rp) {\r\n\t\tfor (int i = l; i <= r; i ++)\r\n\t\t\tif (c[i] == col) ans += a[i];\r\n\t\treturn ans;\r\n\t} \r\n\tfor (int i = l; i <= R[lp]; i ++) if (c[i] == col) ans += a[i];\r\n\tfor (int i = lp + 1; i < rp; i ++) ans += sum[col][i];\r\n\tfor (int i = L[rp]; i <= r; i ++) if (c[i] == col) ans += a[i]; \r\n\treturn ans;\r\n} // \u6c42\u548c\r\ninline int qMax(int l, int r, int col) {\r\n\tint lp = pos[l], rp = pos[r], ans = 0;\r\n\tif (lp == rp) {\r\n\t\tfor (int i = l; i <= r; i ++)\r\n\t\t\tif (c[i] == col) ans = max(ans, a[i]);\r\n\t\treturn ans;\r\n\t}\r\n\tfor (int i = l; i <= R[lp]; i ++) if (c[i] == col) ans = max(ans, a[i]);\r\n\tfor (int i = lp + 1; i < rp; i ++) ans = max(ans, maxn[col][i]);\r\n\tfor (int i = L[rp]; i <= r; i ++) if (c[i] == col) ans = max(ans, a[i]); \r\n\treturn ans;\r\n} // \u6c42\u6700\u5927\u503c\r\nvoid dfs1(int u, int f, int dep) {\r\n\tfa[u] = f, siz[u] = 1, depth[u] = dep;\r\n\tfor (int i = head[u]; i; i = e[i].next) {\r\n\t\tint v = e[i].v;\r\n\t\tif (v == f) continue;\r\n\t\tdfs1(v, u, dep + 1);\r\n\t\tif (siz[v] > siz[son[u]])\r\n\t\t\tson[u] = v;\r\n\t\tsiz[u] += siz[v];\r\n\t}\r\n}\r\nvoid dfs2(int u, int topf) {\r\n\tid[u] = ++ cnt, a[cnt] = w[u], c[cnt] = w1[u], top[u] = topf;\r\n\tif (!son[u]) return;\r\n\tdfs2(son[u], topf);\r\n\tfor (int i = head[u]; i; i = e[i].next) {\r\n\t\tint v = e[i].v;\r\n\t\tif (v == son[u] || v == fa[u]) continue;\r\n\t\tdfs2(v, v);\r\n\t}\r\n}\r\ninline int qRangeV(int u, int v, int k) {\r\n\tint ans = 0;\r\n\twhile (top[u] != top[v]) {\r\n\t\tif (depth[top[u]] < depth[top[v]]) swap(u, v);\r\n\t\tans += qSum(id[top[u]], id[u], k), u = fa[top[u]];\r\n\t}\r\n\tif (depth[u] > depth[v]) swap(u, v);\r\n\treturn ans + qSum(id[u], id[v], k);\r\n} // \u6811\u4e0a\u6c42\u548c\r\ninline int qRangeM(int u, int v, int k) {\r\n\tint ans = 0;\r\n\twhile (top[u] != top[v]) {\r\n\t\tif (depth[top[u]] < depth[top[v]]) swap(u, v);\r\n\t\tans = max(ans, qMax(id[top[u]], id[u], k)), u = fa[top[u]];\r\n\t}\r\n\tif (depth[u] > depth[v]) swap(u, v);\r\n\treturn max(ans, qMax(id[u], id[v], k));\r\n} // \u6811\u4e0a\u6c42\u6700\u5927\u503c\r\ninline void add(int u, int v) {\r\n\te[++ edge_cnt].v = v;\r\n\te[edge_cnt].next = head[u];\r\n\thead[u] = edge_cnt;\r\n}\r\ninline int read() {\r\n\tregister int t = 1, a = 0;\r\n\tregister char ch = getchar();\r\n\twhile (ch < '0' || ch > '9') {\r\n\t\tif (ch == '-') t = -1;\r\n\t\tch = getchar();\r\n\t}\r\n\twhile (ch <= '9' && ch >= '0')\r\n\t\ta = a * 10 + ch - '0', ch = getchar();\r\n\treturn a * t;\r\n}\r\nint main() {\r\n\tn = read(), q = read();\r\n\tfor (int i = 1; i <= n; i ++)\r\n\t\tw[i] = read(), w1[i] = read();\r\n\tfor (int i = 1; i < n; i ++)\r\n\t\tu = read(), v = read(), add(u, v);\r\n\tdfs1(1, 0, 1), dfs2(1, 1), build();\r\n\tfor (int i = 1; i <= q; i ++) {\r\n\t\tscanf(\"%s\", opt);\r\n\t\tif (opt[1] == 'C') u = read(), v = read(), updColor(id[u], v);\r\n\t\tif (opt[1] == 'W') u = read(), v = read(), updValue(id[u], v);\r\n\t\tif (opt[1] == 'S') u = read(), v = read(), printf(\"%d\\n\", qRangeV(u, v, c[id[u]]));\r\n\t\tif (opt[1] == 'M') u = read(), v = read(), printf(\"%d\\n\", qRangeM(u, v, c[id[u]]));\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1661245356,
        "uid": 560516,
        "name": "\u55b5\u4ed4\u725b\u5976",
        "ccfLevel": 0,
        "title": "P3313 [SDOI2014]\u65c5\u884c\u5206\u5757\u9898\u89e3"
    },
    {
        "content": "\u6811\u5256\u6a21\u677f\u9898\uff08\u5927\u96fe\uff09\u3002\n\n\u8fd9\u9898\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b97\u6559\uff0c\u6211\u4eec\u90fd\u5fc5\u987b\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6240\u4ee5\u6613\u60f3\u5230\u52a8\u6001\u5f00\u70b9\uff08\u867d\u8bf4\u52a8\u6001\u5f00\u70b9\u662f\u4e3b\u5e2d\u6811\u601d\u60f3\u4e0d\u8fc7\u6211\u4eec\u5047\u5b9a\u6211\u4eec\u4f1a\u5427\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u68f5\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u6709\u533a\u95f4\u6700\u5927\u503c\u548c\u533a\u95f4\u548c\u3002\n\n\u8fd9\u53c8\u662f\u5728\u6811\u4e0a\u7684\u8be2\u95ee\u548c\u4fee\u6539\uff0c\u4e8e\u662f\u6811\u94fe\u5256\u5206\u8d70\u8d77\uff01\uff08\u6211\u8fd8\u662f\u4e0d\u4f1a$LCT$\uff09\n\n\u6b64\u9898\u524d\u7f6e\u829d\u58eb\uff1a\u6811\u5256\u6a21\u677f$+$\u52a8\u6001\u5f00\u70b9\u601d\u60f3\u3002\n\n\u6b64\u9898\u65f6\u7a7a\u590d\u6742\u5ea6\uff1a\u90fd\u662f$O(nlogn)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff08\u8f83\u4e11\u52ff\u55b7\uff09\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define mid (l+r>>1) \nconst int N=110000; char opt[3];\nint n,q,w[N],c[N],head[N],maxE,cnt,son[N],size[N],f[N],d[N],id[N],nowid,pro[N],top[N],root[N];\nstruct Edge{int nxt,to;}e[N<<1];\nstruct SegMentTree {int lc,rc,sum,flag,mx;}D[N<<4];\ninline void Add(int u,int v) {e[++maxE].nxt=head[u]; head[u]=maxE; e[maxE].to=v; }\nvoid DFS1(int x,int before)\n{\n\td[x]=d[before]+1; f[x]=before; size[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tif(e[i].to==before) continue;\n\t\tDFS1(e[i].to,x); size[x]+=size[e[i].to];\n\t\tif(size[e[i].to]>size[son[x]]) son[x]=e[i].to;\n\t}\n}\nvoid DFS2(int x,int topf)\n{\n\tid[x]=++nowid; pro[nowid]=w[x]; top[x]=topf;\n\tif(!son[x]) return; DFS2(son[x],topf);\n\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].to!=son[x]&&e[i].to!=f[x]) DFS2(e[i].to,e[i].to);\n}\ninline void Push_Up(int x) {D[x].sum=D[D[x].lc].sum+D[D[x].rc].sum; D[x].mx=max(D[D[x].lc].mx,D[D[x].rc].mx); }\nvoid UpDate(int p,int l,int r,int &x,int k)\n{\n\tif(!x) x=++cnt;\n\tD[x].mx=max(D[x].mx,k); D[x].sum+=k;\n\tif(l==r) return;\n\tif(p<=mid) UpDate(p,l,mid,D[x].lc,k);\n\telse UpDate(p,mid+1,r,D[x].rc,k);\n}\nvoid MoDify(int p,int l,int r,int &x)\n{\n\tif(l==r) {D[x].sum=D[x].mx=0; return; }\n\tif(p<=mid) MoDify(p,l,mid,D[x].lc);\n\telse MoDify(p,mid+1,r,D[x].rc);\n\tPush_Up(x);\n}\nint Ask_Sum(int u,int v,int l,int r,int x)\n{\n\tif(l>=u&&r<=v) return D[x].sum;\n\tint res=0;\n\tif(u<=mid) res+=Ask_Sum(u,v,l,mid,D[x].lc);\n\tif(v>mid) res+=Ask_Sum(u,v,mid+1,r,D[x].rc);\n\treturn res; \n}\nint Ask_Road_Sum(int x,int y,int k)\n{\n\tint ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]]) swap(x,y);\n\t\tans+=Ask_Sum(id[top[x]],id[x],1,n,root[k]);\n\t\tx=f[top[x]];\n\t}\n\tif(d[x]>d[y]) swap(x,y);\n\tans+=Ask_Sum(id[x],id[y],1,n,root[k]);\n\treturn ans;\n}\nint Ask_Max(int u,int v,int l,int r,int x)\n{\n\tif(l>=u&&r<=v) return D[x].mx;\n\tint ans=0;\n\tif(u<=mid) ans=max(ans,Ask_Max(u,v,l,mid,D[x].lc));\n\tif(v>mid) ans=max(ans,Ask_Max(u,v,mid+1,r,D[x].rc));\n\treturn ans;\n}\nint Ask_Road_Max(int x,int y,int k)\n{\n\tint ans=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]]) swap(x,y);\n\t\tans=max(ans,Ask_Max(id[top[x]],id[x],1,n,root[k]));\n\t\tx=f[top[x]];\n\t}\n\tif(d[x]>d[y]) swap(x,y);\n\tans=max(ans,Ask_Max(id[x],id[y],1,n,root[k]));\n\treturn ans;\n}\nint main()\n{\n\tios::sync_with_stdio(false); cin>>n>>q;\n\tfor(int i=1;i<=n;i++) cin>>w[i]>>c[i];\n\tfor(int i=1,u,v;i<n;i++) {cin>>u>>v; Add(u,v); Add(v,u); }\n\tDFS1(1,0); DFS2(1,1);\n\tfor(int i=1;i<=n;i++) UpDate(id[i],1,n,root[c[i]],w[i]);\n\tfor(int i=1,x,y;i<=q;i++)\n\t{\n\t\tcin>>opt>>x>>y;\n\t\tif(opt[1]=='C') {MoDify(id[x],1,n,root[c[x]]); UpDate(id[x],1,n,root[y],w[x]); c[x]=y; }\n\t\tif(opt[1]=='W') {MoDify(id[x],1,n,root[c[x]]); UpDate(id[x],1,n,root[c[x]],y); w[x]=y; }\n\t\tif(opt[1]=='S') {printf(\"%d\\n\",Ask_Road_Sum(x,y,c[x])); }\n\t\tif(opt[1]=='M') {printf(\"%d\\n\",Ask_Road_Max(x,y,c[x])); }\n\t}\n\treturn 0;\n}\n```\n\u9644\uff1a\u79bb$CSP$\u7b2c\u4e8c\u8f6e\u65f6\u65e5\u4e0d\u591a\u4e86\uff0c\u5e0c\u671b\u5404\u4f4d\u795e\u4ed9\u90fd\u80fd$AK$\uff01\u672c\u849f\u84bb\u7ed9\u67e0\u840c\u5f53\u5206\u6bcd\u53bb\u4e86$QwQ$",
        "postTime": 1572769226,
        "uid": 98618,
        "name": "Provicy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3313"
    },
    {
        "content": "### LCT\uff0c\u79bb\u7ebf\n\n\u8003\u8651\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u8be2\u95ee\uff0c  \n\u5982\u679c\u6211\u4eec<font color=red>\u53ea\u4fdd\u7559\u4e0e\u8be5\u8be2\u95ee\u7684\u5b97\u6559\u76f8\u540c\u7684\u70b9\u7684\u4fe1\u606f\u5728\u6811\u4e0a</font>,  \n\u90a3\u4e48\u5c31\u662f\u4e00\u4e2a**\u7b80\u5355\u7684LCT**\u5c31\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\n\u6240\u4ee5\u671d\u7740\u8fd9\u4e2a\u65b9\u5411\u601d\u8003\uff0c\u5f97\u5230\u5982\u4e0b\u89e3\u6cd5:  \n**\u628a\u64cd\u4f5c\u548c\u8be2\u95ee\u79bb\u7ebf,   \n\u4f9d\u6b21\u5bf9\u6bcf\u79cd\u5b97\u6559\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u505a\u4e00\u904d\u3002  \n\u7528\u94fe\u8868\u6309\u65f6\u95f4\u987a\u5e8f\u5b58\u50a8\u4e0e\u5f53\u524d\u5b97\u6559\u6709\u5173\u7684\u64cd\u4f5c\u4e0e\u8be2\u95ee\u3002  \n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u4e0e\u64cd\u4f5c\u548c\u8be2\u95ee\u6570\u6709\u5173\uff0c$O(Mlog_2N)$ ** \n\t\n\u4e3a\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u6bcf\u6b21\u5bf9\u4e00\u79cd\u5b97\u6559\u64cd\u4f5c\u5b8c\u540e\uff0c\u4e0d\u8981\u76f4\u63a5memset\u90a3\u4e2aLCT\uff0c  \n\uff08\u5426\u5219\u6e05\u7a7aLCT\u7684\u590d\u6742\u5ea6\u90fd\u662f$O(C*N)$\u4e86\uff09\n\n\u800c\u662f\u5e94\u8be5\u53cd\u5411\u904d\u5386\u4e0e\u8be5\u5b97\u6559\u6709\u5173\u7684\u64cd\u4f5c\uff0c\u53bb\u628a\u6811\u4e0a\u7684\u4fe1\u606f\u56de\u9000\u56de\u53bb\u3002\n\u6240\u4ee5\u94fe\u8868\u662f\u53cc\u5411\u7684\u3002  \n\n\uff08\u5e38\u6570\u6bd4\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u7565\u5927\uff0c\u4f46\u662f\u4ee3\u7801\u6bd4\u8f83\u597d\u5199\u5566\uff09\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 100050\nusing namespace std;\nint N,Q;\nint ANS[MAXN];\nstruct LinkTable{//1:\u8be5\u5206 2:\u67e5\u548c 3:\u67e5\u6700\u5927\u503c \n\tint lnt;\n\tint t[MAXN*3],x[MAXN*3],y[MAXN*3],z[MAXN*3];\n\tint nxt[MAXN*3],pre[MAXN*3],head[MAXN],tail[MAXN];\n\tLinkTable(){lnt=2;}\n\tvoid Add(int c,int _t,int _x,int _y,int _z){\n\t\tt[lnt]=_t; x[lnt]=_x; y[lnt]=_y; z[lnt]=_z;\n\t\tif(!tail[c]) head[c]=lnt;\n\t\telse nxt[tail[c]]=lnt,pre[lnt]=tail[c];\n\t\ttail[c]=lnt++;\n\t}\n}L;\nstruct LCT{\n\tbool lazy[MAXN];\n\tint fa[MAXN],ch[MAXN][2],num[MAXN],sum[MAXN],maxi[MAXN];\n\tbool Who(int x){return ch[fa[x]][0]!=x;}\n\tbool Isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\n\tvoid Reverse(int x){swap(ch[x][0],ch[x][1]),lazy[x]^=1;}\n\tvoid Pushup(int x){\n\t\tsum[x]=num[x]+sum[ch[x][0]]+sum[ch[x][1]];\n\t\tmaxi[x]=max(num[x],max(maxi[ch[x][0]],maxi[ch[x][1]]));\n\t}\n\tvoid Pushdown(int x){\n\t\tif(!Isroot(x)) Pushdown(fa[x]);\n\t\tif(!lazy[x]) return;\n\t\tif(ch[x][0]) Reverse(ch[x][0]);\n\t\tif(ch[x][1] )Reverse(ch[x][1]);\n\t\tlazy[x]=0;\n\t}\n\tvoid Rotate(int x){\n\t\tstatic int y,z,l1,l2;\n\t\ty=fa[x]; z=fa[y];\n\t\tl1=Who(x); l2=Who(y); fa[x]=z;\n\t\tif(!Isroot(y)) ch[z][l2]=x;\n\t\tfa[ch[x][l1^1]]=y; fa[y]=x;\n\t\tch[y][l1]=ch[x][l1^1]; ch[x][l1^1]=y;\n\t\tPushup(y);\n\t}\n\tvoid Splay(int x){\n\t\tstatic int y; Pushdown(x);\n\t\tfor(;y=fa[x],!Isroot(x);Rotate(x))\n\t\t\tif(!Isroot(y)) Rotate(Who(y)==Who(x)?y:x);\n\t\tPushup(x);\n\t}\n\tvoid Access(int x){\n\t\tstatic int y;\n\t\tfor(y=0;x;y=x,x=fa[x])\n\t\t\tSplay(x),ch[x][1]=y,Pushup(x);\n\t}\n\tvoid Moveroot(int x){\n\t\tAccess(x); Splay(x); Reverse(x);\n\t}\n\tvoid Link(int x,int y){\n\t\tMoveroot(x); Splay(x); fa[x]=y;\n\t}\n\tvoid Modify(int x,int v){\n\t\tSplay(x); num[x]=v; Pushup(x);\n\t}\n\tint Querysum(int x,int y){\n\t\tMoveroot(y); Access(x); Splay(x);\n\t\treturn sum[x];\n\t}\n\tint Querymax(int x,int y){\n\t\tMoveroot(y); Access(x); Splay(x);\n\t\treturn maxi[x];\n\t}\n}DT;\nchar gc(){\n\tstatic char s[200005],*p1,*p2;\n\treturn p1==p2&&(p2=(p1=s)+fread(s,1,200000,stdin),p1==p2)?EOF:*p1++;\n}\nvoid read(int &x){\n\tstatic int sign; static char ch;\n\tx=0; sign=1; ch=gc();\n\tfor(;ch<'0'||'9'<ch;ch=gc()) if(ch=='-') sign=-1;\n\tfor(;'0'<=ch&&ch<='9';ch=gc()) x=x*10+ch-'0';\n\tif(sign==-1) x=-x;\n}\nvoid read(char &ch){\n\tch=gc(); for(;ch<'A'||'Z'<ch;ch=gc());\n}\nint main(){\n\t//freopen(\"in\",\"r\",stdin);\n\tchar ch;\n\tstatic int bel[MAXN],sco[MAXN],qnt;\n\tread(N); read(Q);\n\tfor(int i=1;i<=N;i++)\n\t\tread(sco[i]),read(bel[i]),L.Add(bel[i],1,i,sco[i],0);\n\tfor(int i=1,a,b;i<N;i++)\n\t\tread(a),read(b),DT.Link(a,b);\n\tfor(int i=1,a,b;i<=Q;i++){\n\t\tread(ch),read(ch);\n\t\tread(a),read(b);\n\t\tswitch(ch){\n\t\t\tcase 'C' :\n\t\t\t\tif(bel[a]==b) break;\n\t\t\t\tL.Add(b,1,a,sco[a],0);\n\t\t\t\tL.Add(bel[a],1,a,0,sco[a]);\n\t\t\t\tbel[a]=b; break;\n\t\t\tcase 'W' : L.Add(bel[a],1,a,b,sco[a]); sco[a]=b; break;\n\t\t\tcase 'S' : L.Add(bel[a],2,a,b,++qnt); break;\n\t\t\tcase 'M' : L.Add(bel[a],3,a,b,++qnt); break;\n\t\t}\n\t}\n\tfor(int c=1;c<=100000;c++){\n\t\tassert(DT.sum[1]==0); assert(DT.sum[N]==0); assert(DT.sum[N/2]==0);\n\t\tfor(int l=L.head[c];l;l=L.nxt[l]){\n\t\t\tif(L.t[l]==1) DT.Modify(L.x[l],L.y[l]);\n\t\t\tif(L.t[l]==2) ANS[L.z[l]]=DT.Querysum(L.x[l],L.y[l]);\n\t\t\tif(L.t[l]==3) ANS[L.z[l]]=DT.Querymax(L.x[l],L.y[l]);\n\t\t}\n\t\tfor(int l=L.tail[c];l;l=L.pre[l])\n\t\t\tif(L.t[l]==1) DT.Modify(L.x[l],L.z[l]);\n\t}\n\tfor(int i=1;i<=qnt;i++) printf(\"%d\\n\",ANS[i]);\n\treturn 0;\n}\n```",
        "postTime": 1521123240,
        "uid": 20972,
        "name": "__ZJ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u505a\u6cd5\u524d\u9762\u7684\u5927\u4f6c\u90fd\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u9898\u7684\u5173\u952e\u4e3b\u8981\u5728\u4e8e\u5bf9\u5b97\u6559\u5efa\u7ebf\u6bb5\u6811\u548c\u52a8\u6001\u5f00\u70b9\u3002\n\n\u65e2\u7136\u662f\u52a8\u6001\u5f00\u70b9\u5c31\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\uff0c\u8fd9\u91cc\u7528\u5f15\u7528\u8c03\u7528\u6765\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u3002\u4e8b\u5b9e\u4e0a\u80fd\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\u53ea\u6709\u6709\u503c\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6ca1\u6709\u503c\u7684\u8282\u70b9\u6211\u4eec\u4e0d\u9700\u8981\u628a\u5b83\u5efa\u51fa\u6765\uff0c\u8fd9\u6837\u53ef\u4ee5\u7701\u4e0d\u5c11\u7a7a\u95f4\u3002\n\u8fd9\u91cc\u4eff\u7167\u4e86Owen_codeisking\u5927\u4f6c\u7684\u5199\u6cd5\u3002\n```cpp\nvoid update(ll &p,ll l,ll r,ll pos,ll det)\n{\n\tif(!p) p = ++tot;//\u65b0\u8282\u70b9\n\tif(l == r)//\u5230\u4e86\u8981\u66f4\u65b0\u7684\u70b9\u7684\u4f4d\u7f6e\u3002\n\t{\n\t\ttree[p].sum = det;\n\t\ttree[p].maxx = det;\n\t\treturn;\n\t}\n\tll mid = (l + r)>>1;\n\tif(pos <= mid)update(tree[p].ls,l,mid,pos,det);\n\telse update(tree[p].rs,mid + 1,r,pos,det);\n\tpush_up(p,tree[p].ls,tree[p].rs);\n\treturn;\n}\n```\n\uff08**\u52a8\u6001\u5f00\u70b9\u7684tot\u4e0d\u8981\u548c\u6811\u5256\u66f4\u65b0\u7f16\u53f7\u7684tot\u641e\u6df7**\uff09\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6ca1\u6709\u503c\u7684\u8282\u70b9\u6211\u4eec\u8fd8\u6ca1\u6709\u5efa\u51fa\u6765\uff0c\u6240\u4ee5\u5728\u5176\u4ed6\u64cd\u4f5c\u8bbf\u95ee\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u52a0\u4e0a\u8fd9\u4e48\u4e00\u53e5\u4ee5\u6b64\u6765\u9632\u6b62\u8bbf\u95ee\u5230\u5947\u602a\u7684\u4e1c\u897f\u3002\n\n```cpp\nif(!p) p = ++tot;\n```\n\n\u8fd8\u6709\u4e00\u4e2a\u6ce8\u610f\u7684\u5730\u65b9\u662f\u8fd9\u9898\u5148\u7ed9\u51fa\u4e86\u57ce\u5e02\u7684\u4fe1\u606f\u518d\u5efa\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4fe1\u606f\u5b58\u4e0b\u6765\u7b49\u5efa\u5b8c\u56fe\u4e4b\u540e\u518d\u66f4\u65b0\uff08~~\u5e94\u8be5\u6ca1\u4eba\u548c\u6211\u7ffb\u4e00\u6837\u7684\u9519\u8bef\u5427~~\uff09\n\n\n\u5176\u4ed6\u90e8\u5206\u5c31\u662f\u6811\u5256\u677f\u5b50\u52a0\u4e0a\u7ebf\u6bb5\u6811\u677f\u5b50\u4e86\uff08\u522b\u5fd8\u4e86\u57ce\u5e02$x$\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u7f16\u53f7\u662f$id[x]$\u54e6~\uff09\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll maxn=100010;\nconst ll INF=2147483647;\nstruct SegmentTree\n{\n\tll ls,rs,sum,maxx;\n}tree[maxn * 40];//\u53c2\u8003\u4e3b\u5e2d\u6811\u5f0040\u500d\u3002\nstruct node\n{\n\tll val,rel;\n}c[maxn];\nll n,m,a[maxn],q,root[maxn],x,y,icur;\nll dep[maxn],fa[maxn],son[maxn],tot;\nll id[maxn],top[maxn],size[maxn];\nstring cur;\nvector<ll> e[maxn];\nbool vis[maxn];\n//\u4e0b\u9762\u662f\u6811\u5256\nvoid dfs1(ll x,ll step)\n{\n\tvis[x] = 1;\n\tdep[x] = step;\n\tsize[x] = 1;\n\tll tem = -1;\n\tfor(int i = 0;i < e[x].size();i++)\n\t{\n\t\tif(!vis[e[x][i]])\n\t\t{\n\t\t\tdfs1(e[x][i],step + 1);\n\t\t\tfa[e[x][i]] = x;\n\t\t\tsize[x] += size[e[x][i]];\n\t\t\tif(size[e[x][i]] > tem)\n\t\t\t{\n\t\t\t\ttem = size[e[x][i]];\n\t\t\t\tson[x] = e[x][i];\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nvoid dfs2(ll x,ll topf)\n{\n\tvis[x] = 1;\n\ttop[x] = topf;\n\tid[x] = ++icur;\n\tif(!son[x])return;\n\tdfs2(son[x],topf);\n\tfor(int i = 0;i < e[x].size();i++)\n\t{\n\t\tif(!vis[e[x][i]])\n\t\t{\n\t\t\tdfs2(e[x][i],e[x][i]);\n\t\t}\n\t}\n\treturn;\n}\n//\u4e0b\u9762\u662f\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff08\u6240\u4ee5\u6ca1\u6709build\u51fd\u6570\uff09\nvoid push_up(ll p,ll ls,ll rs)\n{\n\ttree[p].sum = tree[ls].sum + tree[rs].sum;\n\ttree[p].maxx = max(tree[ls].maxx,tree[rs].maxx);\n\treturn;\n}\nvoid insert(ll &p,ll pos,ll l,ll r,ll det)\n{\n\tif(!p)p = ++tot;\n\tif(l == r)//\u8fd9\u91cc\u5e76\u4e0d\u9700\u8981=pos\uff0c\u56e0\u4e3a\u8bbf\u95ee\u53f6\u8282\u70b9\u7684\u65f6\u5019\u4e00\u5b9a\u662fpos\n\t{\n\t\ttree[p].sum = det;\n\t\ttree[p].maxx = det;\n\t\treturn;\n\t}\n\tll mid = (l + r)>>1;\n\tif(pos <= mid)insert(tree[p].ls,pos,l,mid,det);\n\telse insert(tree[p].rs,pos,mid + 1,r,det);\n\tpush_up(p,tree[p].ls,tree[p].rs);\n\treturn;\n}\nvoid del(ll p,ll l,ll r,ll pos)\n{\n\tif(!p)return;\n\tif(l == r)\n\t{\n\t\ttree[p].sum = 0;\n\t\ttree[p].maxx = 0;\n\t\treturn;\n\t}\n\tll mid = (l + r)>>1;\n\tif(pos <= mid)del(tree[p].ls,l,mid,pos);\n\telse del(tree[p].rs,mid + 1,r,pos);\n\tpush_up(p,tree[p].ls,tree[p].rs);\n\treturn;\n}\nvoid update(ll &p,ll l,ll r,ll pos,ll det)\n{\n\tif(!p) p = ++tot;//\u52a8\u6001\u5f00\u70b9\n\tif(l == r)\n\t{\n\t\ttree[p].sum = det;\n\t\ttree[p].maxx = det;\n\t\treturn;\n\t}\n\tll mid = (l + r)>>1;\n\tif(pos <= mid)update(tree[p].ls,l,mid,pos,det);\n\telse update(tree[p].rs,mid + 1,r,pos,det);\n\tpush_up(p,tree[p].ls,tree[p].rs);\n\treturn;\n}\nll qsum(ll p,ll l,ll r,ll il,ll ir)\n{\n\tif(!p)return 0;\u5982\u679c\u662f\u7a7a\u8282\u70b9\u3002\n\tif(il <= l && ir >= r)return tree[p].sum;\n\tll mid = (l + r)>>1;\n\tll res = 0;\n\tif(il <= mid)res += qsum(tree[p].ls,l,mid,il,ir);\n\tif(ir > mid)res += qsum(tree[p].rs,mid + 1,r,il,ir); \n\treturn res;\n}\nll qmax(ll p,ll l,ll r,ll il,ll ir)\n{\n\tif(!p)return 0;\n\tif(il <= l && ir >= r)return tree[p].maxx;\n\tll mid = (l + r)>>1;\n\tll res = -1;\n\tif(il <= mid)res = max(res,qmax(tree[p].ls,l,mid,il,ir));\n\tif(ir > mid)res = max(res,qmax(tree[p].rs,mid + 1,r,il,ir));\n\treturn res;\n}\nll qtresum(ll p,ll x,ll y)\n{\n\tll res = 0;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tres += qsum(p,1,n,id[top[x]],id[x]);\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tres += qsum(p,1,n,id[x],id[y]);\n\treturn res;\n}\nll qtremax(ll p,ll x,ll y)\n{\n\tll res = -1;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tres = max(res,qmax(p,1,n,id[top[x]],id[x]));\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tres = max(res,qmax(p,1,n,id[x],id[y]));\n\treturn res;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tcin>>c[i].val>>c[i].rel;\n\t}\n\tfor(int i = 1;i < n;i++)\n\t{\n\t\tcin>>x>>y;\n\t\te[x].push_back(y);\n\t\te[y].push_back(x);\n\t}\n\tfa[1] = 1;\n\tdfs1(1,1);\n\tmemset(vis,0,sizeof(vis));\n\tdfs2(1,1);\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tinsert(root[c[i].rel],id[i],1,n,c[i].val);//\u8fd9\u91cc\u662fid[i]\uff0c\u4e0d\u8981\u5f04\u9519\u4e86\u3002\n\t}\n\twhile(m--)//\u5176\u4ed6\u64cd\u4f5c\u90fd\u548c\u666e\u901a\u6811\u5256\u5dee\u4e0d\u591a\u3002\n\t{\n\t\tcin>>cur>>x>>y;\n\t\tif(cur[0] == 'Q')\n\t\t{\n\t\t\tif(cur[1] == 'S')\n\t\t\t{\n\t\t\t\tcout<<qtresum(root[c[x].rel],x,y)<<\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout<<qtremax(root[c[x].rel],x,y)<<\"\\n\";\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(cur[1] == 'C')\n\t\t\t{\n\t\t\t\tdel(root[c[x].rel],1,n,id[x]);\n\t\t\t\tc[x].rel = y;\n\t\t\t\tupdate(root[c[x].rel],1,n,id[x],c[x].val);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc[x].val = y;\n\t\t\t\tdel(root[c[x].rel],1,n,id[x]);\n\t\t\t\tupdate(root[c[x].rel],1,n,id[x],c[x].val);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1562896192,
        "uid": 64166,
        "name": "Frozencode",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "$$\\color{Cornflowerblue}{\\mathcal{Treaker}}$$\n## \u6811\u94fe\u5256\u5206\n\u4e00\u9053\u9898\u4e00\u773c\u770b\u4e0a\u53bb\u80af\u5b9a\u662f\u4e2a\u6811\u5256\uff0c\u4f46\u662f\u6811\u5256\u7684\u96be\u70b9\u5728\u4e8e\u600e\u4e48\u9ad8\u6548\u7ef4\u62a4\u4fe1\u606f\uff0c\u9898\u9762\u91cc\u7684\u67e5\u8be2\u90fd\u662f\u5f88\u666e\u901a\u7684\uff0c\u4f46\u662f\u591a\u4e86\u5b97\u6559\uff0c~~\u6e05\u771f~~\u3002\n\n\u5b97\u6559\u7684\u7ef4\u62a4\u662f\u4e2a\u91cd\u70b9\uff0c\u4f46\u662f\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u5b97\u6559\u4e4b\u95f4\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\u3002\n\n\u5e76\u4e14\u67e5\u8be2\u662f\u5728\u4e00\u4e2a\u5b97\u6559\u4e4b\u95f4\u7684\u3002\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u5b97\u6559\u5f00\u4e00\u9897\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5462\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u4f46\u672c\u9898\u5185\u5b58\u9650\u5236125MB\uff0c\u600e\u4e48\u529e\u5462\uff0c\u5efa$1e5$\u9897\u7ebf\u6bb5\u6811\u80af\u5b9a\u4f1a\u70b8\u3002\n\n\u52a8\u6001\u5f00\u70b9\u554a\uff0c\u7136\u540e\u5c31\u6ca1\u4e86\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int N = 100010;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , cnt;\nint deg[N] , c[N] , size[N] , dep[N] , dfn[N] , id[N] , hs[N] , fa[N] , top[N];\nchar s[5];\nstruct Tree_div\n{\n\tstruct Edge\n\t{\n\t\tint to;Edge *nxt;\n\t\tEdge(int to,Edge *nxt) : to(to) , nxt(nxt) {}\n\t}*head[N];\n\tvoid get_tree(int now)\n\t{\n\t\tsize[now] = 1;\n\t\tfor(Edge *i = head[now];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tif(dep[to] || to == 1)\tcontinue;\n\t\t\tdep[to] = dep[now] + 1;\n\t\t\tfa[to] = now;\n\t\t\tget_tree(to);\n\t\t\tsize[now] += size[to];\n\t\t\tif(size[to] > size[hs[now]]) hs[now] = to;\n\t\t}\n\t}\n\tvoid dfs(int now,int topfa)\n\t{\n\t\tdfn[now] = ++cnt;\n\t\tid[cnt] = now;\n\t\ttop[now] = topfa;\n\t\tif(hs[now])\tdfs(hs[now],topfa);\n\t\tfor(Edge *i = head[now];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tif(to == hs[now] || to == fa[now])\tcontinue;\n\t\t\tdfs(to,to);\n\t\t}\n\t}\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r , sum , maxn;\n\t\tnode(int l,int r) : l(l) , r(r) {ls = rs = NULL;sum = maxn = 0;}\n\t\tinline void up() {sum = (ls ? ls -> sum : 0) + (rs ? rs -> sum : 0); maxn = max((ls ? ls -> maxn : 0),(rs ? rs -> maxn : 0));}\n\t}*root[N];\n\tvoid chenge(node *&p,int l,int r,int x,int val)\n\t{\n\t\tif(!p)\tp = new node(l,r);\n\t\tif(l == r)\treturn (void)(p -> sum = val,p -> maxn = val);\n\t\tif(x <= mid)\tchenge(p -> ls,l,mid,x,val);\n\t\telse chenge(p -> rs,mid+1,r,x,val);\n\t\tp -> up();\n\t}\n\tint query_sum(node *p,int x,int y)\n\t{\n\t\tif(!p)\treturn 0;\n\t\tif(x <= p -> l && p -> r <= y)\treturn p -> sum; int res = 0;\n\t\tif(x <= mid)\tres += query_sum(p -> ls,x,y);\n\t\tif(y > mid)\t\tres += query_sum(p -> rs,x,y);\n\t\treturn res;\n\t}\n\tinline int sec_sum(int x,int y)\n\t{\n\t\tint res = 0 , tmp = c[x];\n\t\twhile(top[x] != top[y])\n\t\t{\n\t\t\tif(dep[top[x]] < dep[top[y]])\tswap(x,y);\n\t\t\tres += query_sum(root[tmp],dfn[top[x]],dfn[x]);\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif(dep[x] < dep[y])\tswap(x,y);\n\t\tres += query_sum(root[tmp],dfn[y],dfn[x]);\n\t\treturn res;\n\t}\n\tint query_max(node *p,int x,int y)\n\t{\n\t\tif(!p)\treturn 0;\n\t\tif(x <= p -> l && p -> r <= y)\treturn p -> maxn; int res = 0;\n\t\tif(x <= mid)\tres = max(res,query_max(p -> ls,x,y));\n\t\tif(y > mid)\t\tres = max(res,query_max(p -> rs,x,y));\n\t\treturn res;\n\t}\n\tinline int sec_max(int x,int y)\n\t{\n\t\tint res = 0 , tmp = c[x];\n\t\twhile(top[x] != top[y])\n\t\t{\n\t\t\tif(dep[top[x]] < dep[top[y]])\tswap(x,y);\n\t\t\tres = max(res,query_max(root[tmp],dfn[top[x]],dfn[x]));\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif(dep[x] < dep[y])\tswap(x,y);\n\t\tres = max(res,query_max(root[tmp],dfn[y],dfn[x]));\n\t\treturn res;\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1;i <= n;i ++)\tdeg[i] = read() , c[i] = read();\n\t\tfor(int i = 1 , u , v;i < n;i ++)\n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\thead[u] = new Edge(v,head[u]); head[v] = new Edge(u,head[v]);\n\t\t}\n\t\tget_tree(1);\n\t\tdfs(1,1);\n\t\tfor(int i = 1;i <= n;i ++)\tchenge(root[c[i]],1,n,dfn[i],deg[i]);\n\t\tfor(int i = 1 , x , y;i <= m;i ++)\n\t\t{\n\t\t\tscanf(\"%s\",s); x = read(); y = read();\n\t\t\tif(s[1] == 'C')\n\t\t\t{\n\t\t\t\tchenge(root[c[x]],1,n,dfn[x],0);\n\t\t\t\tchenge(root[y],1,n,dfn[x],deg[x]);\n\t\t\t\tc[x] = y;\n\t\t\t}\n\t\t\telse if(s[1] == 'W')\n\t\t\t{\n\t\t\t\tdeg[x] = y;\n\t\t\t\tchenge(root[c[x]],1,n,dfn[x],y);\n\t\t\t}\n\t\t\telse if(s[1] == 'S') printf(\"%d\\n\",sec_sum(x,y));\n\t\t\telse printf(\"%d\\n\",sec_max(x,y));\n\t\t}\n\t}\n}DNF;\nint main()\n{\n\tDNF.LOL();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1569018547,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "# P3313 [SDOI2014]\u65c5\u884c\n\n1.\"CC x c\":\u57ce\u5e02x\u7684\u5c45\u6c11\u5168\u4f53\u6539\u4fe1\u4e86c\u6559;\n\n2.\"CW x w\":\u57ce\u5e02x\u7684\u8bc4\u7ea7\u8c03\u6574\u4e3aw;\n\n3.\"QS x y\":\u4e00\u4f4d\u65c5\u884c\u8005\u4ece\u57ce\u5e02x\u51fa\u53d1,\u5230\u57ce\u5e02y,\u5e76\u8bb0\u4e0b\u4e86\u9014\u4e2d\u7559\u5bbf\u8fc7\u7684\u57ce\u5e02\u7684\u8bc4\u7ea7\u603b\u548c;\n\n4.\"QM x y\":\u4e00\u4f4d\u65c5\u884c\u8005\u4ece\u57ce\u5e02x\u51fa\u53d1,\u5230\u57ce\u5e02y,\u5e76\u8bb0\u4e0b\u4e86\u9014\u4e2d\u7559\u5bbf\u8fc7\u7684\u57ce\u5e02\u7684\u8bc4\u7ea7\u6700\u5927\u503c;\n\n\u5982\u679c\u6ca1\u6709\u989c\u8272\u7684\u9650\u5236\u7684\u8bdd,\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u88f8\u7684\u6811\u94fe\u5256\u5206\u9898\u76ee,\u4f46\u662f\u6709\u4e86\u989c\u8272\u7684\u9650\u5236,\u5982\u679c\u8fd9\u9053\u9898\u52a0\u4e0a\u4e86\u989c\u8272\u7684\u9650\u5236,\u90a3\u4e48\u6700\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\u5f00$1e5$\u9897\u7ebf\u6bb5\u6811,\u663e\u7136 $4 * 1E5 * 1E5$ $MLE$\u9884\u5b9a,\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u52a8\u6001\u5f00\u70b9~~\u6211\u89c9\u5f97\u50cf\u4e3b\u5e2d\u6811~~\u52a0\u4e0a\u6811\u94fe\u5256\u5206;\n\n### $part$ $one$\n#### 1.\"CC x c\":\u57ce\u5e02x\u7684\u5c45\u6c11\u5168\u4f53\u6539\u4fe1\u4e86c\u6559;\n\n\u4fee\u6539\u4ed6\u7684\u6559,\u90a3\u4e48\u9996\u5148\u5148\u8981\u5728\u539f\u5148\u7684\u6559\u91cc\u628a\u4ed6\u8e22\u51fa,\u7136\u540e\u628a\u4ed6\u7684\u6559\u6539\u4e3ac,\u5728\u4e3b\u5e2d\u6811\u4e0a\u52a0\u4e0a\u4ed6\n```cpp\nvoid solve_c(int l, int r) {\n\tdelet(root[c[l]], id[l], 1, n);\n\tc[l] = r;\n\tinsert(root[c[l]], id[l], 1, n, w[l]);\n}\n```\n------------\n### $part$ $two$\n\n#### 2.\"CW x w\":\u57ce\u5e02x\u7684\u8bc4\u7ea7\u8c03\u6574\u4e3aw;\n\n\u4e0e\u7b2c\u4e00\u90e8\u5206\u7c7b\u4f3c,\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u8bb2\u4e86\n```cpp\nvoid solve_w(int l, int r) {\n\tdelet(root[c[l]], id[l], 1, n);\n\tw[l] = r;\n\tinsert(root[c[l]], id[l], 1, n, w[l]);\n}\n```\n\n### $part$ $three$ $&&$ $four$\n\u666e\u901a\u7684\u6811\u5256 + \u7ebf\u6bb5\u6811,\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\n\n\u5728\u4f1a\u4e86\u8fd9\u56db\u4e2a\u64cd\u4f5c\u540e\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0$delete$,$insert$,$update$,$querysum$,$querymax$\u51fd\u6570\n\n\u7efc\u5408\u4ee5\u4e0a \u6b64\u9898\u9274\u5b9a\u4e3a\u7801\u519c\u9898\n\n------------\n\n\u5b8c\u6574\u7248\n\n# code\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read() {\n    ll f = 1, x = 0;char ch;\n    do {ch = getchar();if (ch == '-')f = -1;} while (ch > '9' || ch < '0');\n    do {x = x * 10 + ch - '0';ch = getchar();} while (ch >= '0' && ch <= '9');\n    return f * x;\n}\n\nconst int MAX_N = 1e5 + 7;\n\nstruct Edge{\n\tint to, next;\n}edge[MAX_N << 2];\n\nint head[MAX_N], cnt;\n\ninline void addedge(int u, int v){\n\tedge[++cnt].to = v;\n\tedge[cnt].next = head[u];\n\thead[u] = cnt;\n}\n\nint n, m, w[MAX_N], c[MAX_N]; \n\nint top[MAX_N], size[MAX_N], id[MAX_N], dep[MAX_N], fa[MAX_N], son[MAX_N], root[MAX_N];\n\nvoid dfs(int u) {\n\tdep[u] = dep[fa[u]] + 1;\n\tsize[u] = 1;\n\tfor (int i = head[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to;\n\t\tif (v == fa[u]) continue;\n\t\tfa[v] = u;\n\t\tdfs(v);\n\t\tsize[u] += size[v];\n\t\tif (size[son[u]] < size[v]) son[u] = v;\n\t}\n}\n\nvoid dfsn(int u, int y) {\n\ttop[u] = y;\n\tid[u] = (++cnt);\n\tif (son[u]) dfsn(son[u], y);\n\tfor (int i = head[u]; i; i = edge[i].next) {\n\t\tint v = edge[i].to;\n\t\tif (v == son[u] || fa[u] == v) continue;\n\t\tdfsn(v, v);\n\t}\n}\n\nstruct segment_tree{\n\tint l, r;\n\tll sum, maxx;\n}t[MAX_N * 40];\n\n/*\n\"CC x c\":\u57ce\u5e02x\u7684\u5c45\u6c11\u5168\u4f53\u6539\u4fe1\u4e86c\u6559;\n\n\"CW x w\":\u57ce\u5e02x\u7684\u8bc4\u7ea7\u8c03\u6574\u4e3aw;\n\n\"QS x y\":\u4e00\u4f4d\u65c5\u884c\u8005\u4ece\u57ce\u5e02x\u51fa\u53d1,\u5230\u57ce\u5e02y,\u5e76\u8bb0\u4e0b\u4e86\u9014\u4e2d\u7559\u5bbf\u8fc7\u7684\u57ce\u5e02\u7684\u8bc4\u7ea7\u603b\u548c;\n\n\"QM x y\":\u4e00\u4f4d\u65c5\u884c\u8005\u4ece\u57ce\u5e02x\u51fa\u53d1,\u5230\u57ce\u5e02y,\u5e76\u8bb0\u4e0b\u4e86\u9014\u4e2d\u7559\u5bbf\u8fc7\u7684\u57ce\u5e02\u7684\u8bc4\u7ea7\u6700\u5927\u503c;\n*/\n\nvoid insert(int &p, int x, int l, int r, int v) {\n\tif (!p) p = (++cnt);\n\tif (l == r) {\n\t\tt[p].sum = t[p].maxx = v;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (x <= mid)\n\t\tinsert(t[p].l, x, l, mid, v);\n\telse \n\t\tinsert(t[p].r, x, mid + 1, r, v);\n\tt[p].maxx = max(t[t[p].l].maxx, t[t[p].r].maxx);\n\tt[p].sum = t[t[p].l].sum + t[t[p].r].sum;\n}\n\nvoid delet(int p, int x, int l, int r) {\n\tif (!p) return;\n\tif (l == r) {\n\t\tt[p].maxx = t[p].sum = 0;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (x <= mid)\n\t\tdelet(t[p].l, x, l, mid);\n\telse \n\t\tdelet(t[p].r, x, mid + 1, r);\n\tt[p].maxx = max(t[t[p].l].maxx, t[t[p].r].maxx);\n\tt[p].sum = t[t[p].l].sum + t[t[p].r].sum;\n}\n\nvoid update(int p, int x, int l, int r, int v) {\n\tif (!p) \n\t\tp = (++cnt);\n\tif (l == r) {\n\t\tt[p].sum = t[p].maxx = v;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (x <= mid)\n\t\tupdate(t[p].l, x, l, mid, v);\n\telse \n\t\tupdate(t[p].r, x, mid + 1, r, v);\n\tt[p].maxx = max(t[t[p].l].maxx, t[t[p].r].maxx);\n\tt[p].sum = t[t[p].l].sum + t[t[p].r].sum;\n}\n\nll query_sum(int p, int l, int r, int x, int y) {\n\tif (!p) return 0;\n\tif (x <= l && r <= y) \n\t\treturn t[p].sum;\n\tint mid = (l + r) >> 1;\n\tll ans = 0;\n\tif (x <= mid) \n\t\tans += query_sum(t[p].l, l, mid, x, y);\n\tif (y > mid) \n\t\tans += query_sum(t[p].r, mid + 1, r, x, y);\n\treturn ans;\n}\n\nll query_max(int p, int l, int r, int x, int y) {\n\tif (!p) return -1e9;\n\tif (x <= l && r <= y) return t[p].maxx;\n\tint mid = (l + r) >> 1;\n\tll ans = -1e9;\n\tif (x <= mid)\n\t\tans = max(ans, query_max(t[p].l, l, mid, x, y));\n\tif (y > mid)\n\t\tans = max(ans, query_max(t[p].r, mid + 1, r, x, y));\n\treturn ans;\n}\n\nll get_sum(int p, int x, int y) {\n\tll ans = 0;\n\twhile(top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) \n\t\t\tswap(x, y);\n\t\tans += query_sum(p, 1, n, id[top[x]], id[x]);\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y]) \n\t\tswap(x, y);\n\tans += query_sum(p, 1, n, id[x], id[y]);\n\treturn ans;\n}\n\nll get_max(int p, int x, int y) {\n\tll ans = -1e9;\n\twhile(top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]]) \n\t\t\tswap(x, y);\n\t\tans = max(ans, query_max(p, 1, n, id[top[x]], id[x]));\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y]) \n\t\tswap(x, y);\n\tans = max(ans, query_max(p, 1, n, id[x], id[y]));\n\treturn ans;\n}\n\nvoid solve_c(int l, int r) {\n\tdelet(root[c[l]], id[l], 1, n);\n\tc[l] = r;\n\tinsert(root[c[l]], id[l], 1, n, w[l]);\n}\n\nvoid solve_w(int l, int r) {\n\tdelet(root[c[l]], id[l], 1, n);\n\tw[l] = r;\n\tinsert(root[c[l]], id[l], 1, n, w[l]);\n}\n\nvoid solve_s(int l, int r) {\n\tprintf(\"%lld\\n\", get_sum(root[c[l]], l, r));\n}\n\nvoid solve_m(int l, int r) {\n\tprintf(\"%lld\\n\", get_max(root[c[l]], l, r));\n}\n\nint main() {\n\tn = read(); m = read();\n\tfor (int i = 1; i <= n; i ++ ) {\n\t\tw[i] = read();\n\t\tc[i] = read();\n\t}\n\tfor (int i = 1; i < n; i ++ ) {\n\t\tint x = read();\n\t\tint y = read();\n\t\taddedge(x, y);\n\t\taddedge(y, x);\n\t}\n\tdfs(1); \n\tcnt = 0; \n\tdfsn(1, 1);\n\tfor (int i = 1; i <= n; i ++ ) \n\t\tinsert(root[c[i]], id[i], 1, n, w[i]);\n\tfor (int i = 1; i <= m; i ++ ) {\n\t\tchar opt[10];\n\t\tscanf(\"%s\", opt);\n\t\tint l = read(), r = read();\n\t\tif (opt[1] == 'C') \n\t\t\tsolve_c(l, r);\n\t\tif (opt[1] == 'W') \n\t\t\tsolve_w(l, r);\n\t\tif (opt[1] == 'S') \n\t\t\tsolve_s(l, r);\n\t\tif (opt[1] == 'M') \n\t\t\tsolve_m(l, r);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1566176911,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u6765\u4e00\u6ce2\u9898\u89e3\uff1a\n\n\u5b98\u65b9\u6b63\u89e3\uff1a\u865a\u6811LCT\uff08\u4ee3\u7801\u590d\u6742\u5ea6=2147483647\uff09\n\n\u5176\u4ed6\u89e3\u6cd5\uff1a\u4e3b\u5e2d\u6811\uff08\u8fd9\u9053\u9898\u770b\u4e0a\u53bb\u597d\u50cf\u5e76\u4e0d\u80fd\u7528\u4e3b\u5e2d\u6811\uff09\n\nC\u68f5\u7ebf\u6bb5\u6811\uff08\u4e0d\u60f3\u7b97\u7a7a\u95f4\u590d\u6742\u5ea6\uff09\n\n\u4e3a\u5565\u4e0d\u79bb\u7ebf\u505a\u5462\uff1f\u51fa\u9898\u4eba\u7684\u7b2c\u4e8c\u6b63\u89e3\u5c31\u662f\u79bb\u7ebf\u554a\uff01\n\n\n\u64cd\u4f5c\u8bfb\u8fdb\u6765\u62c6\u5206\u4e00\u4e0b\u6309\u5b97\u6559\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u65f6\u95f4\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n\u5148\u7ebf\u6027\u6a21\u62df\u4e00\u904d\u8fc7\u7a0b\uff0c\u641e\u6e05\u695a\u54ea\u4e2a\u64cd\u4f5c\u662f\u5728\u54ea\u4e2a\u5b97\u6559\u4e0a\u8fdb\u884c\u7684\uff0c\u7136\u540e\uff1a\n\n\u521d\u59cb\u5316\u4e0d\u7528\u8bf4\uff1b\n\n\u6539\u5b97\u6559a\u4e3ab\u5c31\u662f\u628a\u5728a\u5b97\u6559\u4e0b\u70b9\u6743\u7f6e0\uff0cb\u5b97\u6559\u4e0b\u70b9\u6743\uff08\u4ece0\uff09\u53d8\u4e3a\u539f\u70b9\u6743\uff1b\n\n\u6539\u6743\u503c\u5c31\u627e\u5230\u8fd9\u4e2a\u70b9\u5728\u8fdb\u884c\u8fd9\u6b21\u64cd\u4f5c\u65f6\u6240\u5c5e\u5b97\u6559\uff0c\u7136\u540e\u76f4\u63a5\u4fee\u6539\uff0c\u67e5\u8be2\u540c\u7406\u3002\n\n\n\u6811\u5256+\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u6700\u5927\u503c\u548c\u6c42\u548c\uff0c\u56e0\u4e3a\u5b97\u6559\u4e0d\u540c\u8981\u6e05\u96f6\uff0c\u6240\u4ee5\u52a0\u4e00\u4e2alazy tag\n\n\u4e0d\u9700\u8981\u533a\u95f4\u4fee\u6539\uff0clazy\\_tag\u53ea\u7528\u6765\u6e05\u96f6\u7ebf\u6bb5\u6811\uff0c\u5c31\u4e0d\u9700\u8981\u5199\u533a\u95f4\u4fee\u6539\u4e86\uff08\u8be6\u89c1Segment\\_Tree.Clear()\uff09\n\n\u6240\u6709\u7684\u91cf\u90fd\u8981\u8bb0\u5f55\u65f6\u95f4\uff0c\u7b54\u6848\u4e5f\u662f\uff0cpair<int,int>\u5b58\u7b2c\u4e00\u5173\u952e\u5b57\u4e3a\u65f6\u95f4\uff0c\u90fd\u505a\u5b8c\u628aans\u90fdsort\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\n\n\n\u672c\u4eba\u4ee3\u7801\u91cc\u5b9a\u4e49\u4e86\u8f83\u591a\u7684\u7ed3\u6784\u4f53\uff1a\u8282\u70b9\u3001\u8fb9\u3001\u7ebf\u6bb5\u6811\u3001\u64cd\u4f5c\u3001\u7b54\u6848\uff08\u7b54\u6848\u662fdefind\u4e86pair<int,int>\uff09\n\n\u6709\u4e00\u5b9a\u7684\u538b\u884c\u548c\u5c0f\u4f18\u5316\u6280\u5de7\uff0c\u6811\u5256\u5565\u7684\u53ef\u4ee5\u8fc7\u53bb\uff0c\u91cd\u70b9\u7406\u89e3130\u884c\u4ee5\u4e0b\u7684\u90e8\u5206\uff1a\u5982\u4f55\u79bb\u7ebf\u5904\u7406\u7684\u3002\n\n\u4e2a\u4eba\u8ba4\u4e3a\u5199\u5f97\u633a\u6e05\u695a\uff0c\u633a\u6574\u9f50\u7684\uff0c\u4e5f\u4e0d\u957f\u3002\n\n\n\n\n\n\n\n    \n    \n    \n    \n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define MAXN 500000\n#define mx(x) t[x].mx\n#define sm(x) t[x].sm\n#define lz(x) t[x].lz\n#define lc(x) (x<<1)\n#define rc(x) ((x<<1)|1)\n#define mid ((lef+rig)>>1)\n#define Ans pair<int,int>\n#define gc() getchar()\ninline int read(int ans = 0, int sgn = ' ', int ch = gc())\n{\n    for(;ch < '0' || ch > '9'; sgn=ch,ch=gc());\n    for(;ch >='0' && ch <='9'; (ans*=10)+=ch-'0',ch=gc());\n    return sgn-'-' ? ans : -ans;\n}\nstruct Node{int mx,sm,lz;Node(int _mx = 0, int _sm = 0){mx=_mx,sm=_sm,lz=0;}}t[(MAXN<<2)+5];\nstruct Edge{int to,nex;Edge(int _to = 0, int _nex = 0):to(_to),nex(_nex){}}e[(MAXN<<1)+5];\nint N, Q, T, tot, query = 1, first[MAXN+5], C[MAXN+5], W[MAXN+5];\nint fa[MAXN+5], dep[MAXN+5], sz[MAXN+5], heavy[MAXN+5], pos[MAXN+5], top[MAXN+5], dfn;\nchar op[5];\nAns ans[MAXN+5];\ninline void Add(int a, int b)\n{\n    e[tot] = Edge(b,first[a]);\n    first[a] = tot++;\n    return;\n}\nvoid DFS1(int p)\n{\n    sz[p] = 1;\n    for(register int u = first[p], v; u+1; u = e[u].nex)\n        if((v=e[u].to) != fa[p])\n        {\n            dep[v] = dep[p]+1, fa[v] = p, DFS1(v), sz[p] += sz[v];\n            if(!heavy[p] || sz[v] > sz[heavy[p]])\n                heavy[p] = v; \n        }\n    return;\n} \nvoid DFS2(int p)\n{\n    if(heavy[p])\n        pos[heavy[p]] = dfn++, top[heavy[p]] = top[p], DFS2(heavy[p]);\n    for(register int u = first[p], v; u+1; u = e[u].nex)\n        if((v=e[u].to) != fa[p] && v != heavy[p])\n            pos[v] = dfn++, top[v] = v, DFS2(v);\n    return;\n}\ninline Node Merge(Node a, Node b)\n{\n    return Node(max(a.mx,b.mx),a.sm+b.sm);\n}\nstruct Segment_Tree\n{\n    void Push(int p)\n    {\n        mx(p) = max(mx(lc(p)),mx(rc(p))), sm(p) = sm(lc(p))+sm(rc(p));\n        return;\n    }\n    void Lazy(int p)\n    {\n        if(lz(p))\n        {\n            t[lc(p)] = t[rc(p)] = Node(0,0);\n            lz(lc(p)) = lz(rc(p)) = 1;\n            lz(p) = 0;\n        }\n        return;\n    }\n    Node Query(int p, int lef, int rig, int L, int R)\n    { \n        Lazy(p);\n        if(L == lef && R == rig)\n            return t[p];\n        if(R <= mid)\n            return Query(lc(p),lef,mid,L,R);\n        if(L >  mid)\n            return Query(rc(p),mid+1,rig,L,R);\n        return Merge(Query(lc(p),lef,mid,L,mid),Query(rc(p),mid+1,rig,mid+1,R));\n    }\n    void Edit(int p, int lef, int rig, int x, int v)\n    {\n        Lazy(p);\n        if(lef == rig)\n        {\n            mx(p) = sm(p) = v;\n            return;\n        }\n        if(x <= mid)\n            Edit(lc(p),lef,mid,x,v);\n        else\n            Edit(rc(p),mid+1,rig,x,v);\n        Push(p);\n        return;\n    }\n    void Clear()\n    {\n        mx(1) = sm(1) = 0, lz(1) = 1;\n        return;\n    }\n}Tree;\nNode Tour(int a, int b, Node res = Node(0,0))\n{\n    for(; top[a] != top[b]; a = fa[top[a]])\n    {\n        if(dep[top[a]] < dep[top[b]])\n            a^=b^=a^=b;\n        res = Merge(res,Tree.Query(1,1,N,pos[top[a]],pos[a]));\n    }\n    if(dep[a] < dep[b])\n        a^=b^=a^=b;\n    return Merge(res,Tree.Query(1,1,N,pos[b],pos[a]));\n}\nstruct Operate\n{\n    int c,t,a,b,o;\n    Operate(int _c = 0, int _t = 0, int _a = 0, int _b = 0, int _o = 0):c(_c),t(_t),a(_a),b(_b),o(_o){}\n    void Excute()    //0 for Edit w, 1 for QuerySum, 2 for QueryMax\n    {\n        if(o)\n        {\n            Node res = Tour(a,b);\n            ans[query++] = Ans(t,(o-1 ? res.mx : res.sm));\n        }\n        else\n            Tree.Edit(1,1,N,pos[a],b);\n        return;\n    }\n}S[MAXN+5];\ninline bool cmp(Operate a, Operate b)\n{\n    return (a.c-b.c ? a.c<b.c : a.t<b.t);\n}\nint main()\n{\n    N = read(), Q = read(), T = 1, memset(first,-1,sizeof(first));\n    for(register int i = 1, w, c; i <= N; i++)\n        w = read(), c = read(), W[i] = w, C[i] = c, S[T] = Operate(c,T,i,w,0), T++;\n    for(register int i = 1, a, b; i < N; i++)\n        a = read(), b = read(), Add(a,b), Add(b,a);\n    dep[1] = 1, fa[1] = 0, pos[1] = 1, top[1] = 1, dfn = 2, DFS1(1), DFS2(1);\n    for(register int i = 1, a, b; i <= Q; i++)\n        switch(scanf(\"%s\",op), a = read(), b = read(), op[0]+op[1])\n        {\n            /*CC*/case 134:\n            S[T] = Operate(C[a],T,a,0,0), T++, C[a] = b;\n            S[T] = Operate(C[a],T,a,W[a],0), T++;            break;\n            /*CW*/case 154:\n            S[T] = Operate(C[a],T,a,b,0), T++, W[a] = b;    break;\n            /*QS*/case 164:\n            S[T] = Operate(C[a],T,a,b,1), T++;                break;\n            /*QM*/case 158:\n            S[T] = Operate(C[a],T,a,b,2), T++;                break;\n        }\n    T--, sort(S+1,S+T+1,cmp), S[0].c = -1;\n    for(register int i = 1; i <= T; S[i].Excute(), i++)\n        if(S[i].c != S[i-1].c)\n            Tree.Clear();\n    query--, sort(ans+1,ans+query+1);\n    for(register int i = 1; i <= query; printf(\"%d\\n\", ans[i].second), i++);\n    return 0;\n}\n\n```",
        "postTime": 1486623346,
        "uid": 16528,
        "name": "magolor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\n\u5c06\u6811\u94fe\u5256\u5206\u6a21\u677f\u52a0\u4e86\u4e2a\u9650\u5236\u3002\n\n## \u9898\u89e3\n\n\u8fd9\u9053\u9898\u5982\u679c\u8003\u8651\u6700\u66b4\u529b\u7684\u505a\u6cd5\u5c31\u662f\u6811\u5256\u540e\u5bf9\u6bcf\u4e00\u79cd\u5b97\u6559\u5efa\u7acb\u7ebf\u6bb5\u6811\u7edf\u8ba1\u3002\n\n\u5b9e\u9645\u4e0a\u5bf9\u6bcf\u4e00\u79cd\u5b97\u6559\u5efa\u7acb\u7ebf\u6bb5\u6811\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u91c7\u53d6\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\u7684\u65b9\u6cd5\u8fdb\u884c\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u8bb0\u5f55\u4e0b\u6bcf\u79cd\u5b97\u6559\u5f00\u70b9\u65f6\u7684\u6839\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u4fee\u6539\u524d\u7684\u5b97\u6559\u6539\u4e3a0\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u5220\u9664\u64cd\u4f5c\u3002\n\n\u5176\u4ed6\u7684\u64cd\u4f5c\u57fa\u672c\u5c31\u662f\u6811\u5256\u7684\u677f\u5b50\u4e86\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u5427\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u5751\u70b9\u5728\u4e8e\u8fd9\u9053\u9898\u5982\u679c\u7528fread\u7684\u8bdd\u4f1aWA\u5b8c\uff0c\u548cDynamic Rankings\u4e00\u4e2a\u5c3f\u6027\uff0c\u5177\u4f53\u539f\u56e0\u6211\u4e5f\u4e0d\u6e05\u695a\u3002\u4f46\u662ffread\u7684\u8bdd\u5efa\u8bae\u80fd\u4e0d\u7528\u5c31\u4e0d\u7528\uff0c\u5bb9\u6613\u51fa\u9505\u3002\n\n```cpp\nconst int Maxn = 1e5 + 5;\nint n, m, t_tot, root[Maxn], lev[Maxn], fai[Maxn];\nint s_tot, siz[Maxn], dfn[Maxn], rnk[Maxn], top[Maxn], dep[Maxn], son[Maxn], fa[Maxn];\nstruct Tree_Node {\n\tint ls, rs;\n\tint _sum, _max;\n} nodes[Maxn << 5];\nvector < int > Graph[Maxn];\n\nvoid dfs1(int x) {\n\tsiz[x] = 1;\n\tdep[x] = dep[fa[x]] + 1;\n\tfor (unsigned i = 0; i < Graph[x].size(); ++i) {\n\t\tint y = Graph[x][i];\n\t\tif (y == fa[x])\t\tcontinue;\n\t\tfa[y] = x;\n\t\tdfs1(y);\n\t\tif (siz[son[x]] < siz[y])\tson[x] = y;\n\t}\n}\n\nvoid dfs2(int x, int t) {\n\tdfn[x] = ++s_tot;\n\trnk[dfn[x]] = x;\n\ttop[x] = t;\n\tif (son[x])\t\tdfs2(son[x], t);\n\tfor (unsigned i = 0; i < Graph[x].size(); ++i) {\n\t\tint y = Graph[x][i];\n\t\tif (y == fa[x] || y == son[x])\t\tcontinue;\n\t\tdfs2(y, y);\n\t}\n}\n\nint newnode() {\n\tint res = ++t_tot;\n\tnodes[res].ls = nodes[res].rs = 0;\n\tnodes[res]._sum = nodes[res]._max = 0;\n\treturn res;\n}\n\nvoid Update(int p) {\n\tnodes[p]._max = max(nodes[nodes[p].ls]._max, nodes[nodes[p].rs]._max);\n\tnodes[p]._sum = nodes[nodes[p].ls]._sum + nodes[nodes[p].rs]._sum;\n}\n\nvoid Modify(int& p, int l, int r, int x, int v) {\n\tif (p == 0)\t\tp = newnode();\n\tif (l == r) {\n\t\tnodes[p]._max = v;\n\t\tnodes[p]._sum = v;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (mid >= x) {\n\t\tif (nodes[p].ls == 0) \tnodes[p].ls = newnode();\n\t\tModify(nodes[p].ls, l, mid, x, v);\n\t} else {\n\t\tif (nodes[p].rs == 0)\tnodes[p].rs = newnode();\n\t\tModify(nodes[p].rs, mid + 1, r, x, v);\n\t}\n\tUpdate(p);\n}\n\nint Query_Max(int p, int l, int r, int x, int y) {\n\tif (l > y || r < x || p == 0)\treturn 0;\n\tif (l >= x && r <= y)\treturn nodes[p]._max;\n\tint mid = (l + r) >> 1, res = 0;\n\tif (mid >= x) \tres = max(res, Query_Max(nodes[p].ls, l, mid, x, y));\n\tif (mid < y)\tres = max(res, Query_Max(nodes[p].rs, mid + 1, r, x, y));\n\treturn res;\n}\n\nint Query_Sum(int p, int l, int r, int x, int y) {\n\tif (l > y || r < x || p == 0)\treturn 0;\n\tif (l >= x && r <= y)\treturn nodes[p]._sum;\n\tint mid = (l + r) >> 1, res = 0;\n\tif (mid >= x) \tres += Query_Sum(nodes[p].ls, l, mid, x, y);\n\tif (mid < y)\tres += Query_Sum(nodes[p].rs, mid + 1, r, x, y);\n\treturn res;\n}\n\nint Query_Path_Max(int x, int y) {\n\tint res = 0, rt = root[fai[x]];\n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]])\tswap(x, y);\n\t\tres = max(res, Query_Max(rt, 1, n, dfn[top[x]], dfn[x]));\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y])\tswap(x, y);\n\treturn max(res, Query_Max(rt, 1, n, dfn[x], dfn[y]));\n}\n\nint Query_Path_Sum(int x, int y) {\n\tint res = 0, rt = root[fai[x]];\n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]])\tswap(x, y);\n\t\tres += Query_Sum(rt, 1, n, dfn[top[x]], dfn[x]);\n\t\tx = fa[top[x]];\n\t}\n\tif (dep[x] > dep[y]) \tswap(x, y);\n\treturn res + Query_Sum(rt, 1, n, dfn[x], dfn[y]);\n}\n\nvoid Operation1(int x, int c) {\n\tModify(root[fai[x]], 1, n, dfn[x], 0);\n\tfai[x] = c;\n\tModify(root[c], 1, n, dfn[x], lev[x]);\n}\n\nvoid Operation2(int x, int w) {\n\tlev[x] = w;\n\tModify(root[fai[x]], 1, n, dfn[x], lev[x]);\n}\n\nvoid Operation3(int x, int y) {\n\tprintf(\"%d\\n\", Query_Path_Sum(x, y));\n}\n\nvoid Operation4(int x, int y) {\n\tprintf(\"%d\\n\", Query_Path_Max(x, y));\n}\n\nsigned main() {\n\tread(n, m);\n\tfor (int i = 1; i <= n; ++i)\tread(lev[i], fai[i]);\n\tfor (int i = 1, x, y; i < n; ++i) {\n\t\tread(x, y);\n\t\tGraph[x].push_back(y);\n\t\tGraph[y].push_back(x);\n\t}\n\tdfs1(1), dfs2(1, 1);\n\tfor (int i = 1; i <= n; ++i) \tModify(root[fai[i]], 1, n, dfn[i], lev[i]);\n\tfor (int i = 0; i < m; ++i) {\n\t\tchar str[5];\n\t\tscanf(\"%s\", str);\n\t\tif (str[1] == 'C') {\n\t\t\tint x, c;\n\t\t\tscanf(\"%d %d\", &x, &c);\n\t\t\tOperation1(x, c);\n\t\t} else if (str[1] == 'W') {\n\t\t\tint x, w;\n\t\t\tscanf(\"%d %d\", &x, &w);\n\t\t\tOperation2(x, w);\n\t\t} else if(str[1] == 'S') {\n\t\t\tint x, y;\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tOperation3(x, y);\n\t\t} else {\n\t\t\tint x, y;\n\t\t\tscanf(\"%d %d\", &x, &y);\n\t\t\tOperation4(x, y);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1593063844,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u4f73](https://blog.csdn.net/devout_/article/details/104396101)\n\n\u62ff\u5230\u8fd9\u9898\uff0c\u6211\uff1a\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\uff01\n\n\u54ce\u5440C\u6709\u70b9\u5927\u3002\n\n\u52a8\u6001\u5f00\u70b9\uff01\n\n\u4e0d\u4f1aRE\u5417...\n\n\u5176\u5b9e\u662f\u53ef\u80fd\u4f1aRE\u7684\uff0c\u4e3a\u4ec0\u4e48\u5462\uff0c\u6211\u4eec\u60f3\uff0c\u6700\u574f\u60c5\u51b5\u662f\u6bcf\u4e2a\u70b9\u6709\u4e0d\u540c\u7684\u4fe1\u4ef0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5229\u7528\u7684\u7a7a\u95f4\u662f$n\\log n$ \u5f53$n$\u6700\u574f\u60c5\u51b5\u4e0b\u53d6$10^5$\u65f6\uff0c\u5360\u7528\u7a7a\u95f4\u662f$13.2\\times10^5$\u5de6\u53f3\uff0c\u52a0\u4e0a\u4fee\u6539\u9700\u8981\u4e24\u500d\u7684\u7a7a\u95f4\u90a3\u4e48\u5e94\u8be5\u4fdd\u9669\u8d77\u89c1\u7ebf\u6bb5\u6811\u9700\u8981\u5f0027\u500d\u5de6\u53f3\uff0c\u4f46\u662f\u6211\u770b\u9898\u89e3\u91cc\u9762\u597d\u50cf\u90fd\u662f\u5f00\u768420\u500d\uff0c\u6709\u54ea\u4f4d\u5927\u4f6c\u80fd\u7ed9\u6211\u89e3\u91ca\u4e00\u4e0b\u5417qwq\u3002\n\n\u5f0027\u500d\u7a7a\u95f4\u4e5f\u8bb8\u4f1aMLE\uff0c\u4e3a\u4e86\u4fdd\u9669\u8d77\u89c1\uff0c\u6211\u7528\u4e86\u4e00\u4e2a\u8fd8\u633a\u597d\u5199\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u5c31\u662f\u5f00\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u91cc\u9762\u5b58\u7684\u662f\u4e4b\u524d\u5df2\u7ecf\u5220\u6389\u4e86\u90a3\u4e9b\u70b9\uff0c\u5f53\u6211\u4eec\u8981\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u9996\u5148\u770b\u8fd9\u4e2a\u961f\u5217\u91cc\u9762\u6709\u6ca1\u6709\u503c\uff0c\u5982\u679c\u6709\u5c31\u5f80\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\u5b58\uff0c\u5426\u5219\u5c31++tot\u3002\n\n\u5927\u6982\u5199\u51fa\u6765\u662f\u8fd9\u4e2a\u6837\u5b50\u6ef4\uff1a\n\n```cpp\nqueue<int> trashcan;\n\nint _new(){\n\tif(trashcan.empty())return ++tot;\n\tint x=trashcan.front();trashcan.pop();\n\treturn x;\n}\n\nvoid clear(int u){\n\tseg[u].lc=seg[u].rc=0;\n\tseg[u].sum=seg[u]._max=0;\n\ttrashcan.push(u);\t\n}\n```\n\n\u7136\u540e\u5c31\u6b63\u5e38\u7684\u52a8\u6001\u5f00\u70b9\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\n\n\u8fd9\u6837\u5f0020\u500d\u7a7a\u95f4\u5c31\u6ca1\u6709\u95ee\u9898\u5566\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\nconst int N=1e5+5;\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\nint n,m;\nint head[N],cnt;\nint belief[N],lv[N];\nint faz[N],son[N],dep[N],siz[N],top[N],dfn[N],dfx;\nint root[N],tot;\nqueue<int> trashcan;\n\nstruct Edge{\n\tint to,next;\n}e[N<<1];\n\nvoid add(int x,int y){\n\te[++cnt]=(Edge){y,head[x]},head[x]=cnt;\t\n}\n\nstruct segment_tree{\n\tint lc,rc;\n\tint sum,_max;\t\n}seg[N*20];\n\nvoid pushup(int u){\n\tseg[u].sum=seg[seg[u].lc].sum+seg[seg[u].rc].sum;\n\tseg[u]._max=max(seg[seg[u].lc]._max,seg[seg[u].rc]._max);\t\n}\n\nint _new(){\n\tif(trashcan.empty())return ++tot;\n\tint x=trashcan.front();trashcan.pop();\n\treturn x;\n}\n\nvoid clear(int u){\n\tseg[u].lc=seg[u].rc=0;\n\tseg[u].sum=seg[u]._max=0;\n\ttrashcan.push(u);\t\n}\n\nint insert(int u,int l,int r,int x,int k){\n\tif(!u)u=_new();\n\tif(l==r){\n\t\tseg[u].sum=seg[u]._max=k;\n\t\treturn u;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid)seg[u].lc=insert(seg[u].lc,l,mid,x,k);\n\telse seg[u].rc=insert(seg[u].rc,mid+1,r,x,k);\n\tpushup(u);\n\treturn u;\n}\n\nint erase(int u,int l,int r,int x){\n\tif(l==r){\n\t\tclear(u);\n\t\treturn 0;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid)seg[u].lc=erase(seg[u].lc,l,mid,x);\n\telse seg[u].rc=erase(seg[u].rc,mid+1,r,x);\n\tpushup(u);\n\tif(!seg[u].lc&&!seg[u].rc){\n\t\tclear(u);\n\t\tu=0;\t\n\t}\n\treturn u;\n}\n\nint Getsum(int u,int l,int r,int ql,int qr){\n\tif(l>=ql&&r<=qr)return seg[u].sum;\n\tint mid=l+r>>1;\n\tint res=0;\n\tif(ql<=mid&&seg[u].lc)res+=Getsum(seg[u].lc,l,mid,ql,qr);\n\tif(qr>mid&&seg[u].rc)res+=Getsum(seg[u].rc,mid+1,r,ql,qr);\n\treturn res;\t\n}\n\nint Getmax(int u,int l,int r,int ql,int qr){\n\tif(l>=ql&&r<=qr)return seg[u]._max;\n\tint mid=l+r>>1;\n\tint res=0;\n\tif(ql<=mid&&seg[u].lc)res=max(res,Getmax(seg[u].lc,l,mid,ql,qr));\n\tif(qr>mid&&seg[u].rc)res=max(res,Getmax(seg[u].rc,mid+1,r,ql,qr));\n\treturn res;\t\n}\n\nvoid BeliefModify(int x,int y){\n\troot[belief[x]]=erase(root[belief[x]],1,n,dfn[x]);\n\tbelief[x]=y;\n\troot[belief[x]]=insert(root[belief[x]],1,n,dfn[x],lv[x]);\n}\n\nvoid LevelModify(int x,int y){\n\tlv[x]=y;\n\troot[belief[x]]=insert(root[belief[x]],1,n,dfn[x],lv[x]);\t\n}\n\nvoid RouteQuerySum(int x,int y){\n\tint res=0,be=belief[y];\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tres+=Getsum(root[be],1,n,dfn[top[x]],dfn[x]);\n\t\tx=faz[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tres+=Getsum(root[be],1,n,dfn[x],dfn[y]);\n\tprintf(\"%d\\n\",res);\n}\n\nvoid RouteQueryMax(int x,int y){\n\tint res=0,be=belief[y];\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tres=max(res,Getmax(root[be],1,n,dfn[top[x]],dfn[x]));\n\t\tx=faz[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tres=max(res,Getmax(root[be],1,n,dfn[x],dfn[y]));\n\tprintf(\"%d\\n\",res);\n}\n\nvoid dfs1(int u,int fa){\n\tfaz[u]=fa;\n\tsiz[u]=1;\n\tdep[u]=dep[fa]+1;\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int _top){\n\ttop[u]=_top;\n\tdfn[u]=++dfx;\n\tif(!son[u])return;\n\tdfs2(son[u],_top);\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==faz[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n),read(m);\n\tRep(i,1,n)read(lv[i]),read(belief[i]);\n\tRep(i,1,n-1){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs1(1,0),dfs2(1,1);\n\tRep(i,1,n)root[belief[i]]=insert(root[belief[i]],1,n,dfn[i],lv[i]);\n\tRep(i,1,m){\n\t\tchar opt[10];\n\t\tint x,y;\n\t\tscanf(\"%s%d%d\",opt,&x,&y);\n\t\tif(opt[0]=='C')\n\t\t\tif(opt[1]=='C')BeliefModify(x,y);\n\t\t\telse LevelModify(x,y);\n\t\telse \n\t\t\tif(opt[1]=='S')RouteQuerySum(x,y);\n\t\t\telse RouteQueryMax(x,y);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1582102507,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5b66\u4e86\u6811\u94fe\u5256\u5206\uff0c\u53c8\u53ef\u4ee5\u505a\u597d\u591a\u597d\u591a\u96be\u9898\u6c34\u9898\u771f\u662f\u6076\u5fc3\u5f00\u5fc3\uff01\uff01\uff01\n\nluogu\u4e0a\u7684\u4e3b\u5e2d\u6811\u6807\u7b7e\u8ff7\u60d1\u4e86\u6211\u597d\u4e45\uff0c\uff0c\uff0c\u7ed3\u679c\u597d\u50cf\u53ea\u7528\u5230\u4e86\u4e3b\u5e2d\u6811\u7684\u601d\u60f3\uff0c\u4e3b\u5e2d\u6811\u7684\u64cd\u4f5c\u6839\u672c\u6ca1\u6709\u2026.\n\n\u6ca1\u6709\u5b97\u6559\u7684\u9650\u5236\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u6811\u5256\u7684SUM\u548cMAX\u64cd\u4f5c\u3002\u4f46\u662f\uff0c\u4e5f\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b97\u6559\u5c31\u5efa\u4e00\u9897\u6811\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u6bcf\u6b21\u90fd\u80fd\u591f\u8fdb\u884c\u67e5\u8be2\u6bcf\u4e2a\u5b97\u6559\u7684\u4e1c\u897f\u4e86\u3002\u5f88\u660e\u663e\uff0c\u7a7a\u95f4\u7206\u70b8\u5440\uff0c\u52a8\u6001\u5f00\u70b9\u5c31\u6765\u54af\uff01\u8fd9\u91cc\u7528\u5230\u4e00\u4e2a\u4e3b\u5e2d\u6811\u601d\u60f3\u5c31\u662f\u6bcf\u4e00\u4e2a\u5b97\u6559\u5efa\u4e00\u9897\u6811\uff0c\u53ef\u80fd\u4e5f\u7b97\u662f\u52c9\u5f3a\u6709\u4e3b\u5e2d\u6811\u5143\u7d20\u5427\u3002\n\n\u6ce8\u610f\u4e00\u4e9b\u5c0f\u64cd\u4f5c-\u300b\u5982\u679c\u67d0\u4e2a\u70b9\u6539\u5b97\u6559\uff0c\u539f\u5b97\u6559\u7ebf\u6bb5\u6811\u91cc\u76f4\u63a5\u6539\u62100\uff0c\u7136\u540e\u8bb0\u5f55\u4e0bw\uff0c\u8fd4\u56de\u5230\u65b0\u7684\u5b97\u6559\u7ebf\u6bb5\u6811\u91cc\u5c31\u53ef\u4ee5\u4e86\n\n\u4ee5\u53ca\uff01\uff01\uff01\u4fee\u6539\u539f\u6765\u7684\u5b97\u6559\u6570\u7ec4\uff08\u4e5f\u53ea\u6709\u83dc\u9e21\u5982\u6211\u624d\u4f1a\u641e\u5fd8\uff09\uff0c\u6069\uff0c\u6570\u7ec4\u5f00\u5927\u4e00\u70b9\u3002\n\n\u8ba4\u771f\u5199\uff0c\u6ca1\u6709\u5199\u51fa\u5c0fbug\u8fd9\u9053\u9898\u8fd8\u662f\u633a\u7b80\u5355\u7684\uff0c\u6811\u5256\u677f\u5b50\u9898\u4e00\u9053\uff0c\u5199\u51fabug\uff0c\u5475\u5475\uff0c\u6162\u6162\u8c03\u5427\u3002\n\n\t#include<cstdio>\n\t#include<algorithm>\n\t#define midd ((l+r)>>1)\n\tusing namespace std;\n\tconst int maxn=100005;\n\tint n,q;\n\tint oldw[maxn],oldc[maxn];\n\tint la[maxn<<1],nt[maxn<<1],en[maxn<<1],owo;\n\tinline void addedge(int a,int b)\n\t{en[++owo]=b; nt[owo]=la[a]; la[a]=owo;}\n\t//\n\tint \tsize[maxn],dep[maxn],zerz[maxn],top[maxn],newid[maxn],fa[maxn],oldid[maxn],idcnt;\n\tvoid fzb(int x,int ba)\n\t{\n\tdep[x]=dep[ba]+1;\n\tint maxsize=0; size[x]=1; zerz[x]=0;\n\tfor(int it=la[x];it;it=nt[it])\n\t{\n\t\tif(en[it]==ba) continue;\n\t\tfa[en[it]]=x;\n\t\tfzb(en[it],x);\n\t\tsize[x]+=size[en[it]];\n\t\tif(size[en[it]]>maxsize)\n\t\t{\n\t\t\tmaxsize=size[en[it]];\n\t\t\tzerz[x]=en[it];\n\t\t}\n\t}\n\t}\n\tvoid lzb(int x,int ace)\n\t{\n\tnewid[x]=++idcnt; top[x]=ace;\n\tif(zerz[x]) lzb(zerz[x],ace);\n\tfor(int it=la[x];it;it=nt[it])\n\t{\n\t\tif(en[it]==fa[x]||en[it]==zerz[x]) continue;\n\t\tlzb(en[it],en[it]);\n\t}\n\t}\n\t//\n\tint tot,rt[maxn];\n\tstruct node\n\t{\n\tint sumw,maxw,ls,rs;\n\t}z[maxn<<5];\n\tinline void putup(int p)\n\t{\n\tz[p].maxw=max(z[z[p].ls].maxw,z[z[p].rs].maxw);\n\tz[p].sumw=z[z[p].ls].sumw+z[z[p].rs].sumw;\n\t}\n\tvoid ins(int &p,int oid,int ww,int l,int r)\n\t{\n\tif(!p) p=++tot;\n\tif(l==r) { z[p].sumw=z[p].maxw=ww; return; }\n\tif(oid<=midd) ins(z[p].ls,oid,ww,l,midd);\n\telse ins(z[p].rs,oid,ww,midd+1,r);\n\tputup(p);\n\t}\n\tvoid del(int &p,int oid,int &ww,int l,int r)\n\t{\n\tif(!p) p=++tot;\n\tif(l==r) { ww=z[p].sumw; z[p].sumw=z[p].maxw=0; return; }\n\tif(oid<=midd) del(z[p].ls,oid,ww,l,midd);\n\telse del(z[p].rs,oid,ww,midd+1,r);\n\tputup(p);\n\t}\n\tint qsum(int &p,int x,int y,int l,int r)\n\t{\n\tif(!p) p=++tot;\n\tif(x<=l&&r<=y) return z[p].sumw;\n\tint sss=0;\n\tif(x<=midd&&y>=l) sss+=qsum(z[p].ls,x,y,l,midd);\n\tif(x<=r&&y>midd) sss+=qsum(z[p].rs,x,y,midd+1,r);\n\treturn sss;\n\t}\n\tint qmax(int &p,int x,int y,int l,int r)\n\t{\n\tif(!p) p=++tot;\n\tif(x<=l&&r<=y) return z[p].maxw;\n\tint sss=0;\n\tif(x<=midd&&y>=l) sss=max(sss,qmax(z[p].ls,x,y,l,midd));\n\tif(x<=r&&y>midd) sss=max(sss,qmax(z[p].rs,x,y,midd+1,r));\n\treturn sss;\n\t}\n\t//\n\tint querysum(int cc,int x,int y)\n\t{\n\tint sss=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tsss+=qsum(rt[cc],newid[top[x]],newid[x],1,n);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\tsss+=qsum(rt[cc],newid[x],newid[y],1,n);\n\treturn sss;\n\t}\n\tint querymax(int cc,int x,int y)\n\t{\n\tint sss=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tsss=max(sss,qmax(rt[cc],newid[top[x]],newid[x],1,n));\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\tsss=max(sss,qmax(rt[cc],newid[x],newid[y],1,n));\n\treturn sss;\n\t}\n\t//\n\tint main()\n\t{\n\tint a,b,aha;\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;i++) { scanf(\"%d%d\",&oldw[i],&oldc[i]); }\n\tfor(int i=1;i<=n-1;i++)\t\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\taddedge(a,b); addedge(b,a);\n\t}\n\tfzb(1,0); lzb(1,1);\n\tfor(int i=1;i<=n;i++)\n\t\tins(rt[oldc[i]],newid[i],oldw[i],1,n);\n\tchar ss[3];\n\twhile(q--)\n\t{\n\t\tscanf(\"%s%d%d\",ss,&a,&b);\n\t\tif(ss[1]=='S')\n\t\t{\n\t\t\tprintf(\"%d\\n\",querysum(oldc[a],a,b));\n\t\t}\n\t\telse if(ss[1]=='C')\n\t\t{\n\t\t\tdel(rt[oldc[a]],newid[a],aha,1,n);\n\t\t\tins(rt[b],newid[a],aha,1,n);\n\t\t\toldc[a]=b;\n\t\t}\n\t\telse if(ss[1]=='W')\n\t\t{\n\t\t\tins(rt[oldc[a]],newid[a],b,1,n);\n\t\t}\n\t\telse if(ss[1]=='M')\n\t\t{\n\t\t\tprintf(\"%d\\n\",querymax(oldc[a],a,b));\n\t\t}\n\t}\n\t}\n\n\u5c11\u6709\u7684\u4e00\u9053\u4e00\u4e2a\u5c0f\u65f6\u5c31\u641e\u51fa\u6765\u4e86\u7684\u6570\u636e\u7ed3\u6784\u9898\u3002\u3002\u3002\n//\u6b22\u8fce\u5927\u5bb6\u5149\u987e\u849f\u84bb\u535a\u5ba2http://www.newuser.top/",
        "postTime": 1521891553,
        "uid": 55343,
        "name": "Newuser",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u770b\u4e86\u697c\u4e0b\u7684\u9898\u89e3\n\n\u7ec8\u4e8eA\u4e86~~\u54c8\u54c8\u54c8\u54c8~~\u3002\u3002\u3002\n\n\u6709\u591a\u5c11\u4e2a\u5b97\u6559\u5c31\u5efa\u51e0\u4e2a\u7ebf\u6bb5\u6811\n\n\u5177\u4f53\u64cd\u4f5c\u524d\u4eba\u4e4b\u8ff0\u5907\u77e3~~\u6240\u4ee5\u6211\u5c31\u61d2\u5f97\u5199\u4e86~~\n\n\u4e3b\u8981\u662f\u8bf4\u51e0\u4e2a\u5751\u70b9\n\n\u6570\u7ec4\u8981\u5f00\u5927\u4e00\u70b9\uff081e5\\*32\u5dee\u4e0d\u591a\uff09\n\n\u5efa\u6811\u65f6\u6ce8\u610f\u6811\u4e0e\u6811\u4e4b\u95f4\u4f1a\u91cd\u53e0\n\n\u533a\u95f4\u67e5\u8be2\u65f6\u53ea\u67e5\u8be2\u4e0e\u51fa\u53d1\u70b9\u4fe1\u4ef0\u76f8\u540c\u7684\u70b9~~\u7136\u800c\u6837\u4f8b\u6c34\u5230\u80fd\u8fc7~~\n\n\u5982\u67e5\u8be21->3->5\n\n5\u4e0e1\u4fe1\u4ef0\u76f8\u540c\n\n3\u4e0d\u540c\n\n\u6240\u4ee53\u4e0d\u67e5\u8be2\n\n\u8fd8\u6709\u5355\u70b9\u4fee\u6539\u65f6\u8bb0\u5f97\u50a8\u5b58\n\n\u4e0d\u80fd\u53ea\u628a\u7ebf\u6bb5\u6811\u4e2d\u7684\u70b9\u4fee\u6539\n\n\u539f\u70b9\u4e5f\u8981\u4fee\u6539~~\u591a\u4e48zz\u7684\u63d0\u9192~~\n\n\u7136\u540e\u5dee\u4e0d\u591a\u4e86\n\n\u8010\u7740\u6027\u5b50\u6253\u5b8c\u5427\n\n\u6211\u6253\u4e86198\u884c\u8fd8\u6162\u7684\u8981\u6b7b\u3002\u3002\u3002\n\n```cpp\n# include<iostream>\n# include<cstdio>\n# include<cstring>\n# include<algorithm> \n# include<queue>\n# include<cmath>\n#define mid ((l+r)>>1)\n#define tl c[k].l\n#define tr c[k].r\n#define ini inline int\n#define inv inline void\n#define ge getchar()\n#define is isdigit(ch)\n#define cn(a) string a;cin>>a\nusing namespace std;\nconst int MAX=1e5+1;\nstruct p{\n    int x,maxn,l,r;\n}c[MAX<<5];\nstruct q{\n    int x,y;\n}C[MAX<<1];\nstruct o{\n    int deep,id,siz,son,fa,top,w,belief;\n}cc[MAX];\nint n,m,num,cnt,tot;\nint h[MAX],rt[MAX];\nini max(int x,int y)\n{\n    return x>y?x:y;\n}\nini read()\n{\n    int x=0,f=1;\n    char ch=ge;\n    while(!is)\n    {\n        if(ch=='-') f=-1;\n        ch=ge;\n    }\n    while(is)\n    {\n        x=x*10+ch-48;\n        ch=ge;\n    }\n    return x*f;\n}\ninv add(int x,int y)\n{\n    C[++num].x=h[x];\n    C[num].y=y;\n    h[x]=num;\n}\ninv pus(int k)\n{\n    c[k].maxn=max(c[tl].maxn,c[tr].maxn);\n    c[k].x=c[tl].x+c[tr].x;\n}\nvoid dfs(int x,int f)\n{\n    cc[x].deep=cc[f].deep+1;\n    cc[x].fa=f;\n    cc[x].siz=1;\n    for(int i=h[x];i;i=C[i].x)\n      {\n          int y=C[i].y;\n          if(y==f) continue;\n          dfs(y,x);\n          cc[x].siz+=cc[y].siz;\n          if(cc[y].siz>cc[cc[x].son].siz)\n          cc[x].son=y;\n      }\n}\nvoid dfs1(int x,int tp)\n{\n    cc[x].top=tp;\n    cc[x].id=++cnt;\n    if(cc[x].son) dfs1(cc[x].son,tp);\n    for(int i=h[x];i;i=C[i].x)\n      {\n          int y=C[i].y;\n          if(y==cc[x].fa||y==cc[x].son)\n          continue;\n          dfs1(y,y);\n      }\n}\nvoid build(int x,int y,int l,int r,int &k)\n{\n    if(!k) k=++tot;\n    if(l==r)\n    {\n        c[k].maxn=c[k].x=x;\n        return;\n    }\n    if(y<=mid) build(x,y,l,mid,tl);\n    else build(x,y,mid+1,r,tr);\n    pus(k);\n}\nvoid cut(int x,int l,int r,int &k)\n{\n    if(l==r)\n    {\n        c[k].maxn=c[k].x=c[k].l=c[k].r=0;\n        k=0;\n        return;\n    }\n    if(x<=mid) cut(x,l,mid,tl);\n    else cut(x,mid+1,r,tr);\n    pus(k);\n    if(!tr&&!tl)\n    {\n        c[k].maxn=c[k].x=c[k].l=c[k].r=0;\n        k=0;\n    }\n}\nint ask_max(int l,int r,int k,int L,int R)\n{\n    if(!k) return 0;\n    if(l>=L&&r<=R) return c[k].maxn;\n    if(l>R||r<L) return 0;\n    return max(ask_max(l,mid,tl,L,R),ask_max(mid+1,r,tr,L,R));\n}\nint ask_sum(int l,int r,int k,int L,int R)\n{\n    if(!k) return 0;\n    if(l>=L&&r<=R) return c[k].x;\n    if(l>R||r<L) return 0;\n    return ask_sum(l,mid,tl,L,R)+ask_sum(mid+1,r,tr,L,R);\n}\ninv CHANGE(int x,int y)\n{\n    cc[x].w=y;\n    build(y,cc[x].id,1,n,rt[cc[x].belief]);\n}\ninv CUT(int x,int y)\n{\n    cut(cc[x].id,1,n,rt[cc[x].belief]);\n    cc[x].belief=y;\n    build(cc[x].w,cc[x].id,1,n,rt[cc[x].belief]);\n}\nini ASK_MAX(int x,int y)\n{\n    int ans=0,RT=cc[x].belief;\n    while(cc[x].top!=cc[y].top)\n    {\n        if(cc[cc[x].top].deep<cc[cc[y].top].deep)\n        swap(x,y);\n        ans=max(ans,ask_max(1,n,rt[RT],cc[cc[x].top].id,cc[x].id));\n        x=cc[cc[x].top].fa;\n    }\n    if(cc[x].deep>cc[y].deep) swap(x,y);\n    ans=max(ans,ask_max(1,n,rt[RT],cc[x].id,cc[y].id));\n    return ans;\n}\nini ASK_SUM(int x,int y)\n{\n    int ans=0,RT=cc[x].belief;\n    while(cc[x].top!=cc[y].top)\n    {\n        if(cc[cc[x].top].deep<cc[cc[y].top].deep)\n        swap(x,y);\n        ans+=ask_sum(1,n,rt[RT],cc[cc[x].top].id,cc[x].id);\n        x=cc[cc[x].top].fa;\n    }\n    if(cc[x].deep>cc[y].deep) swap(x,y);\n    ans+=ask_sum(1,n,rt[RT],cc[x].id,cc[y].id);\n    return ans;\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;i++)\n      cc[i].w=read(),cc[i].belief=read();\n    for(int i=1;i<n;i++)\n      {\n          int x=read(),y=read();\n          add(x,y);\n          add(y,x);\n      }\n    dfs(1,0);\n    dfs1(1,1);\n    for(int i=1;i<=n;i++)\n      build(cc[i].w,cc[i].id,1,n,rt[cc[i].belief]);\n    for(int i=1;i<=m;i++)\n      {\n          cn(a);\n          int x=read(),y=read();\n          if(a==\"CC\")\n          CUT(x,y);\n          if(a==\"CW\")\n          CHANGE(x,y);\n          if(a==\"QS\")\n          printf(\"%d\\n\",ASK_SUM(x,y));\n          if(a==\"QM\")\n          printf(\"%d\\n\",ASK_MAX(x,y));\n      }\n    return 0;\n}\n```",
        "postTime": 1515323671,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u6570\u636e\u4fdd\u8bc1\u5bf9\u6240\u6709QS\u548cQM\u4e8b\u4ef6\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u57ce\u5e02\u7684\u4fe1\u4ef0\u76f8\u540c\uff1b\u5728\u4efb\u610f\u65f6\n\n\n\u523b\uff0c\u57ce\u5e02\u7684\u8bc4\u7ea7\u603b\u662f\u4e0d\u5927\u4e8e10^4\u7684\u6b63\u6574\u6570\uff0c\u4e14\u5b97\u6559\u503c\u4e0d\u5927\u4e8eC\u3002\n\n\n\u6811\u94fe\u5256\u5206+\u52a8\u6001\u7ebf\u6bb5\u6811\n\n\n\u6811\u94fe\u5256\u5206\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4fe1\u4ef0\u5efa\u7acb\u4e00\u9897\u7ebf\u6bb5\u6811\n\n\n\u7ebf\u6bb5\u6811\u8981\u52a8\u6001\u589e\u52a0\u3001\u79fb\u52a8\u70b9\n\n\n\u6ce8\u610f\u4e0d\u8981\u4e0e\u4e3b\u5e2d\u6811\u6df7\u6dc6\n\n\n\u4e3b\u5e2d\u6811\u662f\u6240\u6709\u7684\u70b9\u90fd\u8981\u65b0\u589e\uff0c\u8fd9\u91cc\u53ea\u9700\u65b0\u589e\u4ee5\u524d\u6ca1\u6709\u8fc7\u7684\u70b9\n\n\n\u7ebf\u6bb5\u6811\u7684\u79fb\u52a8\u70b9\uff1a\u9996\u5148\u5c06\u539f\u4f4d\u7f6e\u7684\u8282\u70b9\u4fee\u6539\u4e3a0\uff0c\u518d\u5728\u65b0\u4f4d\u7f6e\u589e\u52a0\u8282\u70b9\u3002\n\n\n\u5b9e\u73b0\uff1a\u53ea\u9700\u8981\u5728\u786e\u5b9a\u70b9\u5728\u6811\u4e2d\u7684\u4f4d\u7f6e\uff08root\u6570\u7ec4\uff09\u65f6\uff0c\u52a0\u4e00\u4e2a\u5224\u65ad\uff0c\u5982\u679croot[]\u4f4d\u7f6e\u6709\u6570\uff08\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u6dfb\u52a0\u8fc7\uff09\uff0ccnt\u4e0d+1\uff08\u4e0d\u5efa\u7acb\u65b0\u7684\u70b9\uff09\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4fee\u6539\uff0c\u5426\u5219\u5efa\u7acb\u65b0\u7684\u70b9\n\n\n\u590d\u5236\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define N 100001\nusing namespace std;\nint grade[N],belief[N],front[N],e_tot,cnt;\nint dep[N],son[N],fa[N],bl[N],sz,id[N],root[N];\nstruct node{int next,to;}e[N*2];\nint lc[N*20],rc[N*20],maxx[N*20],sum[N*20];\nint n,m;\ninline void add(int u,int v)\n{\n    e[++e_tot].to=v;e[e_tot].next=front[u];front[u]=e_tot;\n    e[++e_tot].to=u;e[e_tot].next=front[v];front[v]=e_tot;\n}\nvoid init()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) scanf(\"%d%d\",&grade[i],&belief[i]);\n    int u,v;\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);\n    }\n}\ninline void dfs1(int x)\n{\n    son[x]++;\n    for(int i=front[x];i;i=e[i].next)\n    {\n        if(e[i].to==fa[x]) continue;\n        fa[e[i].to]=x;\n        dep[e[i].to]=dep[x]+1;\n        dfs1(e[i].to);\n        son[x]+=son[e[i].to];\n    }\n}\ninline void dfs2(int x,int chain)\n{\n    sz++;int y=0;\n    id[x]=sz;\n    bl[x]=chain;\n    for(int i=front[x];i;i=e[i].next)\n    {\n        if(e[i].to==fa[x]) continue;\n        if(son[e[i].to]>son[y]) y=e[i].to;\n     }\n     if(!y) return;\n     dfs2(y,chain);\n     for(int i=front[x];i;i=e[i].next)\n     {\n         if(e[i].to==fa[x]||e[i].to==y) continue;\n         dfs2(e[i].to,e[i].to);\n     }\n}\ninline void up(int k)\n{\n    sum[k]=sum[lc[k]]+sum[rc[k]];\n    maxx[k]=max(maxx[lc[k]],maxx[rc[k]]);\n}\ninline void change(int & y,int l,int r,int x,int w)\n{\n    if(!y) y=++cnt;\n    if(l==r) {sum[y]=maxx[y]=w;return;}\n    int mid=l+r>>1;\n    if(x<=mid) change(lc[y],l,mid,x,w);\n    else change(rc[y],mid+1,r,x,w);\n    up(y);\n}\ninline int work(int k,int l,int r,int opl,int opr,bool p)\n{\n    if(l>=opl&&r<=opr) \n    {\n        if(!p) return sum[k];\n        else return maxx[k];\n    }\n    int mid=l+r>>1;\n    int a=0,b=0;\n    if(opl<=mid) a=work(lc[k],l,mid,opl,opr,p);\n    if(opr>mid) b=work(rc[k],mid+1,r,opl,opr,p);\n    if(!p) return a+b;\n    else return max(a,b);\n}\ninline void operation(int q,int u,int v,bool p)\n{\n    int ans=0;\n    while(bl[u]!=bl[v]) \n    {\n        if(dep[bl[u]]<dep[bl[v]]) swap(u,v);\n        if(!p) ans+=work(root[q],1,n,id[bl[u]],id[u],p);\n        else ans=max(ans,work(root[q],1,n,id[bl[u]],id[u],p));\n        u=fa[bl[u]];\n    }\n    if(id[u]>id[v]) swap(u,v);\n    if(!p) ans+=work(root[q],1,n,id[u],id[v],p);\n    else ans=max(ans,work(root[q],1,n,id[u],id[v],p));\n    printf(\"%d\\n\",ans);\n}\nvoid solve()\n{\n    for(int i=1;i<=n;i++) change(root[belief[i]],1,n,id[i],grade[i]);\n    char c[3];int x,y;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%s%d%d\",c,&x,&y);\n        if(c[0]=='C')\n        {\n            if(c[1]=='C')\n            {\n                change(root[belief[x]],1,n,id[x],0);//\u5148\u5220\u9664\u539f\u6765\u7684\u70b9 \n                belief[x]=y;\n                change(root[belief[x]],1,n,id[x],grade[x]);//\u518d\u589e\u52a0\u65b0\u7684\u70b9 \n            }\n            else \n            {\n                change(root[belief[x]],1,n,id[x],y);\n                grade[x]=y;\n            }\n        }\n        else \n        {\n            if(c[1]=='S') operation(belief[x],x,y,0);\n            else operation(belief[x],x,y,1);\n        }\n    }\n}\nint main()\n{\n    init();\n    dfs1(1);\n    dfs2(1,1);\n    solve();\n}\n```\n\u590d\u5236\u4ee3\u7801\n1\u4e2a\u9519\u8bef\uff1a\n\n\n\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u5148\u786e\u5b9a\u597d\u54ea\u4e2a\u5b97\u6559\u7684\u7ebf\u6bb5\u6811\uff0c\u8c03\u7528operation\u51fd\u6570\u8fc7\u7a0b\u4e2d\uff0cu\u8282\u70b9\u968f\u6811\u94fe\uff08\u5305\u542b\u6240\u6709\u8282\u70b9\u7684\u6811\uff09\u5f80\u4e0a\u8df3\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u5b9a\u8c03\u5230\u540c\u4e00\u5b97\u6559\u4e0a\uff0c\u5b97\u6559\u968f\u4e4b\u6539\u53d8\u3002\n\n\n\u6240\u4ee5\u8981\u5148\u786e\u5b9a\u597d\u662f\u54ea\u4e00\u9897\u7ebf\u6bb5\u6811\n",
        "postTime": 1502788752,
        "uid": 41490,
        "name": "qscqesze_lca",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n\u6811\u94fe\u5256\u5206+\u52a8\u6001\u5f00\u70b9\n\n\u5982\u679c\u6811\u94fe\u5256\u5206\u4e0d\u4f1a\u7684\u8bdd\u8bf7\u8d70\u8fd9\u8fb9\uff1a\n\n[\u8be6\u89e3\u6811\u94fe\u5256\u5206](https://www.cnblogs.com/fusiwei/p/11519470.html)\n\n[\u6d45\u8c08\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811](https://www.cnblogs.com/fusiwei/p/12628596.html)\n\n\u9898\u610f\u4e3a\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u5bf9\u6811\u4e0a\u8282\u70b9\u8d4b\u503c+\u67d3\u8272\u3002\u6bcf\u6b21\u64cd\u4f5c\u66f4\u6539\u70b9\u6743\u6216\u66f4\u6539\u989c\u8272\uff0c\u6bcf\u6b21\u8be2\u95ee\u6c42\u8def\u5f84\u6700\u5927\u503c\u6216\u8def\u5f84\u6743\u503c\u548c\u3002\n\n\u9996\u5148\u7b80\u5316\u95ee\u9898\uff0c\u5047\u5982\u6ca1\u6709\u67d3\u8272\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f\u6811\u5256\u7684\u677f\u5b50\u9898\uff1a\u628a\u6811\u4e0a\u8282\u70b9\u7528\u6811\u94fe\u5256\u5206\u6765\u6620\u5c04\u5230\u4e00\u6bb5\u533a\u95f4\u4e0a\uff0c\u7136\u540e\u901a\u8fc7\u7ef4\u62a4\u7ebf\u6bb5\u6811\u6765\u89e3\u51b3\u95ee\u9898\u3002\u4e0d\u61c2\u7684\u89c1\u6811\u5256\u8bb2\u89e3\u3002\n\n\u4e4b\u540e\u8003\u8651\u5982\u4f55\u67d3\u8272\u3002\u66b4\u529b\u7684\u60f3\u6cd5\u662f\uff0c\u5f00\u8272\u6570\u68f5\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u4e00\u770b\u4e0d\u884c\uff0c\u56e0\u4e3a\u8272\u6570\u662f10^5\u7684\u3002\u4e8e\u662f\u672c\u80fd\u60f3\u5230\u4f18\u5316\u7a7a\u95f4\u7684\u597d\u5e2e\u624b\uff1a\u52a8\u6001\u5f00\u70b9\u3002\u5bf9\u60f3\u6cd5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u53d1\u73b0\u6bcf\u6b21\u64cd\u4f5c\u5e76\u4e0d\u9700\u8981\u5b8c\u5168\u4f7f\u7528\u6240\u6709\u8282\u70b9\uff0c\u6240\u4ee5\u52a8\u6001\u5f00\u70b9\u662f\u5b8c\u5168\u53ef\u884c\u7684\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u662f$O(\\log N)$\uff0c\u53ef\u8fc7\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\uff0c\u6709\u4e9b\u540c\u5b66\u8bf4\u8fd9\u4e2a\u53eb\u4e3b\u5e2d\u6811\uff0c\u4f46\u662f\u5176\u5b9e\u8fd9\u4e2a\u5e76\u4e0d\u662f\u4e3b\u5e2d\u6811\u3002\u4e3b\u5e2d\u6811\u7684\u7279\u70b9\u662f\u591a\u68f5\u7ebf\u6bb5\u6811\u6709\u5171\u7528\u8282\u70b9\u3002\u4f46\u662f\u8fd9\u9053\u9898\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5171\u7528\u7684\u70b9\uff0c\u6bcf\u68f5\u7ebf\u6bb5\u6811\u662f\u5b8c\u5168\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u6240\u4ee5\u5b83\u4e0d\u662f\u4e3b\u5e2d\u6811\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u51fa\u4e86\u7ed3\u8bba\uff1a\u8fd9\u9053\u9898\u662f\u52a8\u6001\u5f00\u70b9+\u6811\u5256\u7684\u677f\u5b50\u9898\u3002\uff08\u9003\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u7684\u96be\u70b9\u53d8\u6210\u4e86\u4ee3\u7801\u5b9e\u73b0\u3002\u9700\u8981\u6ce8\u610f\u7684\u6709\u51e0\u4e2a\u70b9\uff1a\n\n\u56e0\u4e3a\u662f\u591a\u68f5\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u8981\u5f00\u4e00\u4e2a\u6570\u7ec4root\u6765\u8bb0\u5f55\u6bcf\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u662f\u8c01\u3002\n\n\u56e0\u4e3a\u662f\u52a8\u6001\u5f00\u70b9\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u4e0d\u9700\u8981\u5efa\u5168\u6811\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6743\u503c\u90fd\u4e3a\u6b63\uff0c\u6240\u4ee5\u5728\u53d8\u66f4\u5b97\u6559\u7684\u65f6\u5019\u4e0d\u9700\u8981\u628a\u539f\u6765\u5b97\u6559\u7684\u8282\u70b9\u5220\u9664\uff0c\u76f4\u63a5\u7f6e\u96f6\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#pragma GCC optimize(2)\nusing namespace std;\nconst int maxn=1e5+10;\nint n,q;\nint w[maxn],c[maxn];\nint tot,to[maxn<<1],nxt[maxn<<1],head[maxn];\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (ch<48||ch>57){if (ch=='-') f=-1;ch=getchar();}\n\twhile (ch>=48&&ch<=57){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\nvoid add(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nint cnt,fa[maxn],son[maxn],size[maxn],top[maxn],wa[maxn],id[maxn],deep[maxn];\nint root[maxn],num;\nstruct node\n{\n    int mx,sum,lson,rson;\n}t[maxn*42];\nvoid dfs1(int x,int f)\n{\n    fa[x]=f;\n    deep[x]=deep[f]+1;\n    size[x]=1;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==f)\n            continue;\n        dfs1(y,x);\n        size[x]+=size[y];\n        if(!son[x]||size[y]>size[son[x]])\n            son[x]=y;\n    }\n}\nvoid dfs2(int x,int t)\n{\n    id[x]=++cnt;\n    top[x]=t;\n    if(!son[x])\n        return;\n    dfs2(son[x],t);\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==fa[x]||y==son[x])\n            continue;\n        dfs2(y,y);\n    }\n}\nvoid pushup(int pos)\n{\n    t[pos].mx=max(t[t[pos].lson].mx,t[t[pos].rson].mx);\n    t[pos].sum=t[t[pos].lson].sum+t[t[pos].rson].sum;\n}\nvoid update(int &pos,int l,int r,int x,int k)\n{\n    int mid=(l+r)>>1;\n    if(!pos)\n        pos=++num;\n    if(l==r)\n    {\n        t[pos].mx=t[pos].sum=k;\n        return;\n    }\n    if(x<=mid)\n        update(t[pos].lson,l,mid,x,k);\n    else\n        update(t[pos].rson,mid+1,r,x,k);\n    pushup(pos);\n}\nint query1(int pos,int l,int r,int x,int y)\n{\n    int ret=0;\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n        return t[pos].sum;\n    if(x<=mid)\n        ret+=query1(t[pos].lson,l,mid,x,y);\n    if(y>mid)\n        ret+=query1(t[pos].rson,mid+1,r,x,y);\n    return ret;\n}\nint query2(int pos,int l,int r,int x,int y)\n{\n    int ret=-10000000;\n    int mid=(l+r)>>1;\n    if(x<=l && r<=y)\n        return t[pos].mx;\n    if(x<=mid)\n        ret=max(ret,query2(t[pos].lson,l,mid,x,y));\n    if(y>mid)\n        ret=max(ret,query2(t[pos].rson,mid+1,r,x,y));\n    return ret;\n}\nint q1(int x,int y,int k)\n{\n    int ret=0;\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        ret+=query1(root[k],1,n,id[top[x]],id[x]);\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    ret+=query1(root[k],1,n,id[y],id[x]);\n    return ret;\n}\nint q2(int x,int y,int k)\n{\n    int ret=-10000000;\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n            swap(x,y);\n        ret=max(ret,query2(root[k],1,n,id[top[x]],id[x]));\n        x=fa[top[x]];\n    }\n    if(deep[x]<deep[y])\n        swap(x,y);\n    ret=max(ret,query2(root[k],1,n,id[y],id[x]));\n    return ret;\n}\nint main()\n{\n    n=read();q=read();\n    for(int i=1;i<=n;i++)\n        w[i]=read(),c[i]=read();\n    for(int i=1;i<n;i++)\n    {\n        int a,b;\n        a=read();b=read();\n        add(a,b);\n        add(b,a);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    for(int i=1;i<=n;i++)\n        update(root[c[i]],1,n,id[i],w[i]);\n    while(q--)\n    {\n        char opt[5];\n        int x,y;\n        scanf(\"%s\",opt);\n        x=read();y=read();\n        if(opt[1]=='C')\n        {\n            update(root[c[x]],1,n,id[x],0);\n            c[x]=y;\n            update(root[c[x]],1,n,id[x],w[x]);\n        }\n        else if(opt[1]=='W')\n        {\n            update(root[c[x]],1,n,id[x],y);\n            w[x]=y;\n        }\n        else if(opt[1]=='S')\n            printf(\"%d\\n\",q1(x,y,c[x]));\n        else\n            printf(\"%d\\n\",q2(x,y,c[x]));\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1600840426,
        "uid": 175131,
        "name": "\u5085\u601d\u7ef4666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u773c\u770b\u5230\u9898\u53d1\u73b0\u9700\u8981\u5206\u522b\u7ef4\u62a41e5\u79cd\u989c\u8272\uff0c\u4f3c\u4e4e\u4e0d\u53ef\u505a\n\n\u540e\u6765\u53d1\u73b0\u597d\u50cf\u53ef\u4ee5\u52a8\u6001\u5f00\u70b9\uff1f\n\n\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\n\n\u53d1\u73b0\u5728\u8def\u5f84\u4e0a\u67e5\u8be2\u548c\u4fee\u6539\u7684\u989c\u8272\u662f\u56fa\u5b9a\u7684\uff0c\u5728\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\u5728\u8be5\u989c\u8272\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u548c\u67e5\u8be2\u5373\u53ef\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=100003;\nint n,m;\nint w[N],c[N];\nint num;\nint rt[N];\nstruct ST\n{\n\tint ls,rs,Max,sum;\n\tST(){ls=rs=Max=sum=0;}\n}a[N<<5];\nint cnt;\nint head[N];\nstruct Edge\n{\n\tint nxt,to;\n}e[N<<1];\nint idx;\nint dep[N],f[N],son[N],siz[N],dfn[N],top[N];\nchar s[13];\nvoid push_up(int x)\n{\n\ta[x].Max=a[x].sum=0;\n\tif(a[x].ls)\n\t{\n\t\ta[x].sum+=a[a[x].ls].sum;\n\t\ta[x].Max=max(a[x].Max,a[a[x].ls].Max);\n\t}\n\tif(a[x].rs)\n\t{\n\t\ta[x].sum+=a[a[x].rs].sum;\n\t\ta[x].Max=max(a[x].Max,a[a[x].rs].Max);\n\t}\n}\nvoid modify(int &x,int l,int r,int p,int k)\n{\n\tif(x==0) x=++num;\n\tif(l==r)\n\t{\n\t\ta[x].Max=a[x].sum=k;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(p<=mid) modify(a[x].ls,l,mid,p,k);\n\telse modify(a[x].rs,mid+1,r,p,k);\n\tpush_up(x);\n}\nint qmax(int x,int l,int r,int nl,int nr)\n{\n\tif(x==0) return 0;\n\tif(nl<=l&&nr>=r) return a[x].Max;\n\tint mid=(l+r)>>1,res=0;\n\tif(nl<=mid) res=qmax(a[x].ls,l,mid,nl,nr);\n\tif(nr>mid) res=max(res,qmax(a[x].rs,mid+1,r,nl,nr));\n\treturn res;\n}\nint query(int x,int l,int r,int nl,int nr)\n{\n\tif(x==0) return 0;\n\tif(nl<=l&&nr>=r) return a[x].sum;\n\tint mid=(l+r)>>1,res=0;\n\tif(nl<=mid) res+=query(a[x].ls,l,mid,nl,nr);\n\tif(nr>mid) res+=query(a[x].rs,mid+1,r,nl,nr);\n\treturn res;\n}\nvoid add(int u,int v)\n{\n\te[++cnt].nxt=head[u];\n\te[cnt].to=v;\n\thead[u]=cnt;\n}\nvoid dfs1(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;\n\tf[x]=fa;\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint to=e[i].to;\n\t\tif(to==fa) continue;\n\t\tdfs1(to,x);\n\t\tsiz[x]+=siz[to];\n\t\tif(siz[to]>siz[son[x]]) son[x]=to;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\tdfn[x]=++idx;\n\ttop[x]=topf;\n\tif(!son[x]) return;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint to=e[i].to;\n\t\tif(to==f[x]||to==son[x]) continue;\n\t\tdfs2(to,to);\n\t}\n}\nint query_range(int x,int y)\n{\n\tint r=rt[c[x]],res=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tres+=query(r,1,n,dfn[top[x]],dfn[x]);\n\t\tx=f[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\tres+=query(r,1,n,dfn[x],dfn[y]);\n\treturn res;\n}\nint qmax_range(int x,int y)\n{\n\tint r=rt[c[x]],res=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tres=max(res,qmax(r,1,n,dfn[top[x]],dfn[x]));\n\t\tx=f[top[x]];\n\t}\n\tif(dep[x]>dep[y]) swap(x,y);\n\tres=max(res,qmax(r,1,n,dfn[x],dfn[y]));\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&w[i],&c[i]);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;i++)\n\t\tmodify(rt[c[i]],1,n,dfn[i],w[i]);\n\twhile(m--)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%s%d%d\",s,&x,&y);\n\t\tif(s[1]=='C')\n\t\t{\n\t\t\tmodify(rt[c[x]],1,n,dfn[x],0);\n\t\t\tc[x]=y;\n\t\t\tmodify(rt[y],1,n,dfn[x],w[x]);\n\t\t}\n\t\telse if(s[1]=='W')\n\t\t{\n\t\t\tw[x]=y;\n\t\t\tmodify(rt[c[x]],1,n,dfn[x],w[x]);\n\t\t}\n\t\telse if(s[1]=='S') printf(\"%d\\n\",query_range(x,y));\n\t\telse printf(\"%d\\n\",qmax_range(x,y));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1571317022,
        "uid": 91889,
        "name": "Dirt\u3001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811+\u6811\u94fe\u5256\u5206\uff0c\u597d\u9898\u5fc5\u987b\u8bb0\u4e0b\u6765\n\n\u56e0\u4e3a\u6709\u591a\u4e2a\u5b97\u6559\uff0c\u6240\u4ee5\u5f00\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u663e\u7136\u662f\u4e0d\u884c\u7684\uff0c\u6240\u4ee5\u5c31\u6709\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u4e1c\u4e1c\n\n\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\uff0c\u6211\u4eec\u90fd\u8981\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7528root\u8bb0\u5f55\u5b83\u7684\u6839\u8282\u70b9\uff0c\u5f53\u7136\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u662f\u52a8\u6001\u5f00\u70b9\u7684\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539\u65f6\uff0c\u5982\u679c\u5f53\u524d\u5230\u7684\u4f4d\u7f6e\u6ca1\u6709\u8282\u70b9\uff0c\u6211\u4eec\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u80fd\u8282\u7701\u7a7a\u95f4\n\n`CC\uff1a`\u76f4\u63a5\u5c06`root[c[x]]`\u8fd9\u9897\u7ebf\u6bb5\u6811\u4e0a\u7684`dfn[x]`\u8fd9\u4e2a\u4f4d\u7f6e\u5148\u4fee\u6539\u4e3a0,\u518d\u4fee\u6539\u989c\u8272\uff0c\u5728\u5c06\n\u65b0\u989c\u8272\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684`dfn[x]`\u4fee\u6539\u4e3a\u539f\u6765\u7684`a[x]`\n\n`CW`\u5c06`root[c[x]]`\u4e0a\u7684`dfn[x]`\u4f4d\u7f6e\u7684\u6570\u4fee\u6539\u4e3a`y`\uff0c`a`\u6570\u7ec4\u4e5f\u8981\u6539\n\n`QS`\u5728`root[c[x]]`\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u50cf\u5e73\u5e38\u7ebf\u6bb5\u6811\u4e00\u6837\u6811\u94fe\u5256\u5206\uff0c\u7ebf\u6bb5\u6811\u5185\u7ef4\u62a4`sum`\n\n`QW`\u540c\u7406\uff0c\u7ebf\u6bb5\u6811\u5185\u7ef4\u62a4`max`\n\n\u5c31\u5199\u5b8c\u5566QWQ\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#define re register int\n#define ll long long\n#define maxn 200050\nusing namespace std;\nstruct tu {\n    int u, v, w, nxt;\n} e[maxn * 2];\nint head[maxn];\nint cnt;\nvoid add(int u, int v) {\n    e[++cnt].u = u;\n    e[cnt].v = v;\n    e[cnt].nxt = head[u];\n    head[u] = cnt;\n}\nint size[maxn], son[maxn], dfn[maxn], dep[maxn], w[maxn], top[maxn];\nint f[maxn], idx, a[maxn];\nvoid dfs1(int u, int fa) {\n    f[u] = fa;\n    size[u] = 1;\n    dep[u] = dep[fa] + 1;\n    int maxson = -1;\n    for (re i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == fa)\n            continue;\n        dfs1(v, u);\n        size[u] += size[v];\n        if (size[v] > maxson)\n            maxson = size[v], son[u] = v;\n    }\n}\nvoid dfs2(int u, int topp) {\n    dfn[u] = ++idx;\n    top[u] = topp;\n    w[idx] = a[u];\n    if (!son[u])\n        return;\n    dfs2(son[u], topp);\n    for (re i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].v;\n        if (v == f[u] || v == son[u])\n            continue;\n        dfs2(v, v);\n    }\n}\nstruct tree {\n    int l, r, sum, mmax, lazy;\n} t[maxn * 40];\nint tot, root[maxn * 40], c[maxn];\nvoid pushup(int now) {\n    t[now].sum = t[t[now].l].sum + t[t[now].r].sum;\n    t[now].mmax = max(t[t[now].l].mmax, t[t[now].r].mmax);\n}\nvoid change(int &now, int l, int r, int p, int w) {\n    if (!now)\n        now = ++tot;\n    int mid = (l + r) >> 1;\n    if (l == r) {\n        t[now].sum = w;\n        t[now].mmax = w;\n        return;\n    }\n    if (p <= mid)\n        change(t[now].l, l, mid, p, w);\n    else\n        change(t[now].r, mid + 1, r, p, w);\n    pushup(now);\n}\nint n, q;\nint askmax(int now, int l, int r, int x, int y) {\n    if (x <= l && r <= y)\n        return t[now].mmax;\n    int mid = (l + r) >> 1;\n    int num = 0;\n    if (x <= mid && t[now].l)\n        num = max(askmax(t[now].l, l, mid, x, y), num);\n    if (y > mid && t[now].r)\n        num = max(askmax(t[now].r, mid + 1, r, x, y), num);\n    return num;\n}\nint asksum(int now, int l, int r, int x, int y) {\n    if (x <= l && r <= y)\n        return t[now].sum;\n    int mid = (l + r) >> 1;\n    int num = 0;\n    if (x <= mid && t[now].l)\n        num += asksum(t[now].l, l, mid, x, y);\n    if (y > mid && t[now].r)\n        num += asksum(t[now].r, mid + 1, r, x, y);\n    return num;\n}\nint askdissum(int x, int y, int col) {\n    int num = 0;\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]])\n            swap(x, y);\n        num += asksum(root[col], 1, n, dfn[top[x]], dfn[x]);\n        x = f[top[x]];\n    }\n    if (dfn[x] > dfn[y])\n        swap(x, y);\n    num += asksum(root[col], 1, n, dfn[x], dfn[y]);\n    return num;\n}\nint askdismax(int x, int y, int col) {\n    int num = -0x3f3f3f3f;\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]])\n            swap(x, y);\n        num = max(num, askmax(root[col], 1, n, dfn[top[x]], dfn[x]));\n        x = f[top[x]];\n    }\n    if (dfn[x] > dfn[y])\n        swap(x, y);\n    num = max(num, askmax(root[col], 1, n, dfn[x], dfn[y]));\n    return num;\n}\nint main() {\n    //\tfreopen(\"journey.in\",\"r\",stdin);\n    //\tfreopen(\"journey.out\",\"w\",stdout);\n    scanf(\"%d%d\", &n, &q);\n    for (re i = 1; i <= n; i++) {\n        scanf(\"%d%d\", &a[i], &c[i]);\n    }\n    for (re i = 1; i <= n - 1; i++) {\n        int a1, a2;\n        scanf(\"%d%d\", &a1, &a2);\n        add(a1, a2);\n        add(a2, a1);\n    }\n    dfs1(1, 0);\n    //\tfor(re i=1;i<=n;i++)\n    //\t\tprintf(\"%d %d %d\\n\",son[i],dep[i],size[i]);\n    dfs2(1, 1);\n    for (re i = 1; i <= n; i++) change(root[c[i]], 1, n, dfn[i], a[i]);\n    for (re i = 1; i <= q; i++) {\n        char as[2];\n        scanf(\"%s\", as);\n        int a1, a2;\n        scanf(\"%d%d\", &a1, &a2);\n        if (as[1] == 'C') {\n            change(root[c[a1]], 1, n, dfn[a1], 0);\n            c[a1] = a2;\n            change(root[c[a1]], 1, n, dfn[a1], a[a1]);\n        }\n        if (as[1] == 'W') {\n            a[a1] = a2;\n            change(root[c[a1]], 1, n, dfn[a1], a[a1]);\n        }\n        if (as[1] == 'S') {\n            printf(\"%d\\n\", askdissum(a1, a2, c[a1]));\n        }\n        if (as[1] == 'M') {\n            printf(\"%d\\n\", askdismax(a1, a2, c[a1]));\n        }\n    }\n    // for(re i=1;i<=n;i++)\n    //\tprintf(\"root[c[%d]]=%d\\n\",i,root[c[i]]);\n    //*/\n\n    return 0;\n}\n```\n",
        "postTime": 1570196824,
        "uid": 57823,
        "name": "\u7ea2\u8272OI\u518d\u4e34",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "# \u7a76\u6781\u6811\u5256 \u6bc1\u6211\u9752\u6625\u4e4b\u65c5\u884c\n\n\n------------\n\u770b\u5230\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u6309\u7167\u4fe1\u4ef0\u6765\u5efa\u6811\uff0c\u6bcf\u4e00\u4e2a\u4fe1\u4ef0\u5efa\u4e00\u68f5\u6811\uff0c\u5f53\u7136\u80af\u5b9a\u4e0d\u80fd\u7b80\u7b80\u5355\u5355\u7684\u5efa\u6811\u3002\u8fd9\u91cc\u6211\u4eec\u8981\u7528\u5230**\u4e3b\u5e2d\u6811**\u7684\u6982\u5ff5\uff0cPS\uff1a\u8fd9\u91cc\u4e0d\u4f1a\u4e3b\u5e2d\u6811\u7684\u540c\u5b66\u53ef\u4ee5\u95ee\u4e0b\u5ea6\u5a18\u3002\n\u4f46\u662f\u4e3a\u4ec0\u4e48\u8bf4\u5b83\u662f\u4f2a\u4e3b\u5e2d\u6811\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u4e3b\u5e2d\u6811\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u7ed9\u5f53\u524d\u64cd\u4f5c\u8fc7\u540e\u5efa\u4e00\u4e2a\u65b0\u6811\uff0c\u800c\u8fd9\u91cc\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\u6211\u4eec\u5c06x\u57ce\u5e02\u7684\u5c45\u6c11\u7684\u4fe1\u4ef0\u6539\u4e3ay\uff0c**\u6211\u4eec\u53ea\u9700\u8981\u5728x\u57ce\u5e02\u539f\u6765\u6240\u5728\u7684\u6811\u5185\uff0c\u51cf\u53bb\u5b83\u7684\u8bc4\u7ea7w**\uff0c\u7136\u540e\u5728\u4fe1\u4ef0y\u8fd9\u68f5\u6811\u5185\uff0c\u5c06x\u57ce\u5e02\u6dfb\u52a0\u8fdb\u53bb\u5373\u53ef\u3002\n\u6240\u4ee5\u8fd9\u4e2a\u5f88\u5bb9\u6613\u8ddf\u4e3b\u5e2d\u6811\u6df7\u6dc6\uff01\uff01\uff01\uff01\uff01\uff01\n\n------------\n\u5269\u4e0b\u7684\u67e5\u8be2\u5c31\u5f88\u7b80\u5355\u5566\uff0c\u76f4\u63a5\u7528lca\u7684\u65b9\u5f0f\u8fdb\u884c\u67e5\u8be2\u5c31OK\u4e86\u3002\n\u4e0b\u9762\u8d34\u4ee3\u7801\uff08\u56e0\u4e3a\u5b66\u6821oj\u7684\u95ee\u9898\u6211\u628aDFS\u5199\u6210\u4e86\u975e\u9012\u5f52\u7684\u5f62\u5f0f\uff0c\u5982\u679c\u4f60\u7528\u9012\u5f52\u7684DFS\u5728\u6d1b\u8c37\u662f\u53ef\u4ee5\u8fc7\u7684\uff01\uff01\uff01)\n\n\n\n------------\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <stack>\n#define N 200005\nusing namespace std;\n \nint n,m,w[N],c[N],head[N];\nstruct edge\n{\n\tint y,next;\n}s[N];\n\nint root[N],fa[N],seg[N],rev[N],dep[N],size[N],son[N],top[N],vis[N],sk[N];\nint mmax[N * 10],ls[N * 10],rs[N * 10],sum[N * 10];\nint tx,ty,ans,op,x,y,d,v,len = 0,cnt;\n\nvoid ins(int x,int y)\n{\n\tlen++;\n\ts[len].y = y; s[len].next = head[x]; head[x] = len;\n}\n \nint read()\n{\n\tchar c; int res,f = 1;\n\twhile ((c = getchar()) > '9' || c < '0') if (c == '-') f = -1;\n\tres = c - 48;\n\twhile ((c = getchar()) >= '0' && c <= '9') res = res * 10 + c - 48;\n\treturn res * f;\n}\n\nvoid BFS()\n{\n\tstack <int> f;\n\tf.push(1); vis[1] = 1; dep[1] = 1; fa[1] = 0;\n\tfor (int i = 1; i <= n; i++) size[i] = 1;\n\twhile (!f.empty())\n\t{\n\t\tint x = f.top(); sk[++cnt] = x; f.pop();\n\t\tfor(int i = head[x]; i != 0; i = s[i].next)\n\t\t{\n\t\t\tint y = s[i].y;\n\t\t\tif (!vis[y])\n\t\t\t{\n\t\t\t\tdep[y] = dep[x] + 1;\n\t\t\t\tvis[y] = 1;\n\t\t\t\tfa[y] = x;\n\t\t\t\tf.push(y);\n\t\t\t}\n\t\t}\n\t}\n\t\n\twhile (cnt)\n\t{\n\t\tint x = sk[cnt]; cnt--;\n\t\tfor(int i = head[x]; i != 0; i = s[i].next)\n\t\tif (fa[x] != s[i].y)\n\t\t{\n\t\t\tsize[x] += size[s[i].y];\n\t\t\tif (size[son[x]] < size[s[i].y]) son[x] = s[i].y;\n\t\t}\n\t}\n}\n\nvoid bfs()\n{\n\tstack <int> q,f;\n\tq.push(1); f.push(1);\n\twhile(!q.empty())\n\t{\n\t\tint x = q.top(),y = f.top(); f.pop(); q.pop();\n\t\tseg[x] = ++seg[0]; top[x] = y;\n\t\n\t\tfor(int i = head[x]; i != 0; i = s[i].next)\n\t\t\tif (!top[s[i].y] && son[x] != s[i].y)\n\t\t\t\tq.push(s[i].y),f.push(s[i].y);\n\t\t\n\t\tif (son[x])\n\t\t\tq.push(son[x]),f.push(y);\n\t}\n}\n\nvoid change(int &now,int l,int r)\n{\n\tif(!now) now = ++len;\n\tsum[now] += d;\n\tif(l==r) \n\t{\n\t\tif(d > 0) mmax[now] = d;\n\t\telse mmax[now] = 0;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1;\n\tif(v <= mid) change(ls[now],l,mid);\n\telse change(rs[now],mid + 1,r);\n\tmmax[now] = max(mmax[ls[now]],mmax[rs[now]]);\n}\n \nvoid change_c()\n{\n\tx = read(); y = read();\n\tv = seg[x]; d = -w[x];\n\tchange(root[c[x]],1,n);\n\tc[x] = y; d = w[x];\n\tchange(root[c[x]],1,n);\n}\n \nvoid change_w()\n{\n\tx = read(); y = read();\n\tv = seg[x]; d = -w[x];\n\tchange(root[c[x]],1,n);\n\tw[x] = y; d = w[x];\n\tchange(root[c[x]],1,n);\n}\n \nint query_sum(int now,int l,int r,int x,int y)\n{\n\tif(x == l && y == r) return sum[now];\n\tint mid = x + y >> 1;\n\tif(r <= mid) return query_sum(ls[now],l,r,x,mid);\n\telse if(mid < l) return query_sum(rs[now],l,r,mid + 1,y);\n\telse return query_sum(ls[now],l,mid,x,mid)+query_sum(rs[now],mid + 1,r,mid + 1,y);\n}\n \nint lca_sum()\n{\n\tx = read(); y = read();\n\top = x;\n\ttx = top[x]; ty = top[y];\n\tans = 0;\n\twhile(tx != ty)\n\t{\n\t\tif(dep[tx] > dep[ty])\n\t\t{\n\t\t\tswap(x,y);swap(tx,ty);\n\t\t}\n\t\tans += query_sum(root[c[op]],seg[ty],seg[y],1,n);\n\t\ty = fa[ty]; ty = top[y];\n\t}\n\tif(dep[x] > dep[y]) swap(x,y);\n\tans += query_sum(root[c[op]],seg[x],seg[y],1,n);\n\treturn ans;\n}\n \nint query_max(int now,int l,int r,int x,int y)\n{\n\tif(x == l && y == r) return mmax[now];\n\tint mid = x + y >> 1;\n\tif(r <= mid) return query_max(ls[now],l,r,x,mid);\n\tif(mid < l) return query_max(rs[now],l,r,mid + 1,y);\n\treturn max(query_max(ls[now],l,mid,x,mid),query_max(rs[now],mid + 1,r,mid + 1,y));\n}\n \nint lca_max()\n{\n\tx = read(); y = read();\n\top = x;\n\ttx = top[x]; ty = top[y];\n\tans = 0;\n\twhile(tx != ty)\n\t{\n\t\tif(dep[tx] > dep[ty])\n\t\t{\n\t\t\tswap(x,y);swap(tx,ty);\n\t\t}\n\t\tans = max(ans,query_max(root[c[op]],seg[ty],seg[y],1,n));\n\t\ty = fa[ty]; ty = top[y];\n\t}\n\tif(dep[x] > dep[y]) swap(x,y);\n\tans = max(ans,query_max(root[c[op]],seg[x],seg[y],1,n));\n\treturn ans;\n}\n \nint main()\n{\n\tn = read(); m = read();\n\tfor(int i = 1; i <= n; i++) w[i] = read(),c[i] = read();\n\tfor(int i = 1; i <= n - 1; i++)\n\t{\n\t\tx = read(); y = read();\n\t\tins(x,y);\n\t\tins(y,x);\n\t}\n\tBFS();\n\tlen = 0;\n\tbfs();\n\tlen = 0;\n\tfor(int i = 1; i <= n; i++)\n\t{\n\t\tv = seg[i]; d = w[i];\n\t\tchange(root[c[i]],1,n);\n\t}\n\tchar ch[10];\n\twhile(m--)\n\t{\n\t\tscanf(\"%s\",ch);\n\t\tif(ch[1] == 'C') change_c();\n\t\telse if(ch[1] == 'W') change_w();\n\t\telse if(ch[1] == 'S') printf(\"%d\\n\",lca_sum());\n\t\telse if(ch[1] == 'M') printf(\"%d\\n\",lca_max());\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1565666297,
        "uid": 45056,
        "name": "Komes",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u4f20\u8bf4\u4e2d\u52a8\u6001\u5f00\u70b9\n\n\u770b\u6765\u6211\u662f\u6709\u4ec0\u4e48\u8bef\u4f1a\n\n\u7b2c\u4e00\u7248\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define max(a,b) ((a) > (b) ? (a) : (b))\n#define min(a,b) ((a) < (b) ? (a) : (b))\nconst int N = 100010;\nconst int C = 1e5;\nusing namespace std;\nstruct segnode\n{\n    int sum,max;\n    int l,r,ls,rs;\n} seg[N * 32];\nint seg_tot;\nint to[(N << 1) + 10],pre[(N << 1) + 10],first[N + 10],edge_tot;\ninline void add(const int &u,const int &v)\n{\n    to[++edge_tot] = v;\n    pre[edge_tot] = first[u];\n    first[u] = edge_tot;\n}\nint f[N + 10],d[N + 10],size[N + 10],son[N + 10],top[N + 10],rk[N + 10],id[N + 10],dfn_tot;\nint a[N + 10],w[N + 10];\n\nvoid dfs1(int p,int fa,int dep)\n{\n    f[p] = fa;\n    d[p] = dep;\n    size[p] = 1;\n    for(register int i = first[p];i;i = pre[i])\n        if(to[i] ^ fa)\n        {\n            dfs1(to[i],p,dep + 1);\n            size[p] += size[to[i]];\n            if(!son[p] || size[to[i]] > size[son[p]])\n                son[p] = to[i];\n        }\n}\n\nvoid dfs2(int p,int t)\n{\n    top[p] = t;\n    rk[++dfn_tot] = p;\n    id[p] = dfn_tot;\n    if(!son[p])\n        return ;\n    dfs2(son[p],t);\n    for(register int i = first[p];i;i = pre[i])\n        if(to[i] ^ f[p] && to[i] ^ son[p])\n            dfs2(to[i],to[i]);\n}\n\nint build(int l,int r)\n{\n    int p = ++seg_tot;\n    seg[p].l = l;\n    seg[p].r = r;\n    if(l == r)\n        return p;\n    int mid = l + r >> 1;\n    seg[p].ls = build(l,mid);\n    seg[p].rs = build(mid + 1,r);\n    return p;\n}\n\nvoid insert(int x,int k,int p)\n{\n    if(seg[p].l == seg[p].r)\n    {\n        seg[p].sum = seg[p].max = k;\n        return ;\n    }\n    int mid = seg[p].l + seg[p].r >> 1;\n    if(x <= mid)\n        insert(x,k,seg[p].ls);\n    else\n        insert(x,k,seg[p].rs);\n    seg[p].sum = seg[seg[p].ls].sum + seg[seg[p].rs].sum;\n    seg[p].max = max(seg[seg[p].ls].max,seg[seg[p].rs].max);\n}\n\nvoid remove(int x,int p)\n{\n    if(seg[p].l == seg[p].r)\n    {\n        seg[p].sum = seg[p].max = 0;\n        return ;\n    }\n    int mid = seg[p].l + seg[p].r >> 1;\n    if(x <= mid)\n        remove(x,seg[p].ls);\n    else\n        remove(x,seg[p].rs);\n    seg[p].sum = seg[seg[p].ls].sum + seg[seg[p].rs].sum;\n    seg[p].max = max(seg[seg[p].ls].max,seg[seg[p].rs].max);\n}\n\nint getsum(int l,int r,int p)\n{\n    if(l <= seg[p].l && seg[p].r <= r)\n        return seg[p].sum;\n    int ret = 0;\n    int mid = seg[p].l + seg[p].r >> 1;\n    if(l <= mid)\n        ret += getsum(l,r,seg[p].ls);\n    if(r > mid)\n        ret += getsum(l,r,seg[p].rs);\n    return ret;\n}\n\nint getmax(int l,int r,int p)\n{\n    if(l <= seg[p].l && seg[p].r <= r)\n        return seg[p].max;\n    int ret = -0x3f3f3f3f;\n    int mid = seg[p].l + seg[p].r >> 1;\n    if(l <= mid)\n        ret = max(ret,getmax(l,r,seg[p].ls));\n    if(r > mid)\n        ret = max(ret,getmax(l,r,seg[p].rs));\n    return ret;\n}\n\nint n,q;\nint rt[C + 10];\n\nint main()\n{\n    scanf(\"%d%d\",&n,&q);\n    for(register int i = 1;i <= n;++i)\n        scanf(\"%d%d\",a + i,w + i);\n    for(register int i = 1;i < n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(1,0,1);\n    dfs2(1,1);\n    for(register int i = 1;i <= n;++i)\n    {\n        if(!rt[w[i]])\n            rt[w[i]] = build(1,n);\n        insert(id[i],a[i],rt[w[i]]);\n    }\n    char opt[5];\n    int x,y;\n    while(q--)\n    {\n        scanf(\"%s%d%d\",opt,&x,&y);\n        if(opt[0] == 'C')\n        {\n            if(opt[1] == 'C')\n            {\n                remove(id[x],rt[w[x]]);\n                w[x] = y;\n                if(!rt[y])\n                    rt[y] = build(1,n);\n                insert(id[x],a[x],rt[w[x]]);\n            }\n            else\n            {\n                a[x] = y;\n                insert(id[x],a[x],rt[w[x]]);\n            }\n        }\n        else\n        {\n            if(opt[1] == 'S')\n            {\n                int root = rt[w[x]];\n                int fx = top[x],fy = top[y];\n                int ans = 0;\n                while(fx ^ fy)\n                {\n                    if(d[fx] > d[fy])\n                    {\n                        ans += getsum(id[fx],id[x],root);\n                        x = f[fx],fx = top[x];\n                    }\n                    else\n                    {\n                        ans += getsum(id[fy],id[y],root);\n                        y = f[fy],fy = top[y];\n                    }\n                }\n                if(d[x] > d[y])\n                    swap(x,y);\n                ans += getsum(id[x],id[y],root);\n                printf(\"%d\\n\",ans);\n            }\n            else\n            {\n                int root = rt[w[x]];\n                int fx = top[x],fy = top[y];\n                int ans = -0x3f3f3f3f;\n                while(fx ^ fy)\n                {\n                    if(d[fx] > d[fy])\n                    {\n                        ans = max(ans,getmax(id[fx],id[x],root));\n                        x = f[fx],fx = top[x];\n                    }\n                    else\n                    {\n                        ans = max(ans,getmax(id[fy],id[y],root));\n                        y = f[fy],fy = top[y];\n                    }\n                }\n                if(d[x] > d[y])\n                    swap(x,y);\n                ans = max(ans,getmax(id[x],id[y],root));\n                printf(\"%d\\n\",ans);\n            }\n        }\n    }\n}\n```\n\n\u770b\u4e86\u773c\u9898\u89e3\uff0c\u53d1\u73b0\u81ea\u5df1\u7684\u52a8\u6001\u5f00\u70b9\u6839\u672c\u5c31\u4e0d\u52a8\u6001\u2026\u2026\n\n\u56e0\u4e3a\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u987a\u4fbf\u7528\u4e00\u4e2a\u961f\u5217\u624b\u5199\u4e86\u5185\u5b58\u6c60\uff08\u5176\u5b9e\u5f88\u7b80\u5355\u7684\n\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#define max(a,b) ((a) > (b) ? (a) : (b))\n#define min(a,b) ((a) < (b) ? (a) : (b))\nconst int N = 100010;\nconst int C = 1e5;\nusing namespace std;\ninline void read(int &x)\n{\n    char ch = 0;\n    int w = 0;\n    x = 0;\n    while(ch < '0' || ch > '9')\n        w |= ch == '-',ch = getchar();\n    while(ch >= '0' && ch <= '9')\n        x = (x << 3) + (x << 1) + (ch ^ '0'),ch = getchar();\n    x = w ? -x : x;\n}\nstruct segnode\n{\n    int sum,max;\n    int ls,rs;\n} seg[N * 32];\nint seg_tot;\nint to[(N << 1) + 10],pre[(N << 1) + 10],first[N + 10],edge_tot;\nqueue<int> freenode;\ninline void New(int &p)\n{\n    if(!freenode.empty())\n        p = freenode.front(),freenode.pop();\n    else\n        p = ++seg_tot;\n}\ninline void Delete(int &p)\n{\n    freenode.push(p);\n    p = 0;\n}\ninline void add(const int &u,const int &v)\n{\n    to[++edge_tot] = v;\n    pre[edge_tot] = first[u];\n    first[u] = edge_tot;\n}\nint f[N + 10],d[N + 10],size[N + 10],son[N + 10],top[N + 10],rk[N + 10],id[N + 10],dfn_tot;\nint a[N + 10],w[N + 10];\n\nvoid dfs1(int p,int fa,int dep)\n{\n    f[p] = fa;\n    d[p] = dep;\n    size[p] = 1;\n    for(register int i = first[p];i;i = pre[i])\n        if(to[i] ^ fa)\n        {\n            dfs1(to[i],p,dep + 1);\n            size[p] += size[to[i]];\n            if(!son[p] || size[to[i]] > size[son[p]])\n                son[p] = to[i];\n        }\n}\n\nvoid dfs2(int p,int t)\n{\n    top[p] = t;\n    rk[++dfn_tot] = p;\n    id[p] = dfn_tot;\n    if(!son[p])\n        return ;\n    dfs2(son[p],t);\n    for(register int i = first[p];i;i = pre[i])\n        if(to[i] ^ f[p] && to[i] ^ son[p])\n            dfs2(to[i],to[i]);\n}\n\nvoid insert(int x,int k,int &p,int tl,int tr)\n{\n    if(!p)\n        New(p);\n    if(tl == tr)\n    {\n        seg[p].sum = seg[p].max = k;\n        return ;\n    }\n    int mid = tl + tr >> 1;\n    if(x <= mid)\n        insert(x,k,seg[p].ls,tl,mid);\n    else\n        insert(x,k,seg[p].rs,mid + 1,tr);\n    seg[p].sum = seg[seg[p].ls].sum + seg[seg[p].rs].sum;\n    seg[p].max = max(seg[seg[p].ls].max,seg[seg[p].rs].max);\n}\n\nvoid remove(int x,int &p,int tl,int tr)\n{\n    if(tl == tr)\n    {\n        Delete(p);\n        return ;\n    }\n    int mid = tl + tr >> 1;\n    if(x <= mid)\n        remove(x,seg[p].ls,tl,mid);\n    else\n        remove(x,seg[p].rs,mid + 1,tr);\n    seg[p].sum = seg[seg[p].ls].sum + seg[seg[p].rs].sum;\n    seg[p].max = max(seg[seg[p].ls].max,seg[seg[p].rs].max);\n    if(!seg[p].sum)\n    \tDelete(p);\n}\n\nint getsum(int l,int r,int p,int tl,int tr)\n{\n    if(!seg[p].sum)\n        return 0;\n    if(l <= tl && tr <= r)\n        return seg[p].sum;\n    int ret = 0;\n    int mid = tl + tr >> 1;\n    if(l <= mid)\n        ret += getsum(l,r,seg[p].ls,tl,mid);\n    if(r > mid)\n        ret += getsum(l,r,seg[p].rs,mid + 1,tr);\n    return ret;\n}\n\nint getmax(int l,int r,int p,int tl,int tr)\n{\n    if(!seg[p].max)\n        return 0;\n    if(l <= tl && tr <= r)\n        return seg[p].max;\n    int ret = -0x3f3f3f3f;\n    int mid = tl + tr >> 1;\n    if(l <= mid)\n        ret = max(ret,getmax(l,r,seg[p].ls,tl,mid));\n    if(r > mid)\n        ret = max(ret,getmax(l,r,seg[p].rs,mid + 1,tr));\n    return ret;\n}\n\nint n,q;\nint rt[C + 10];\nint x,y;\nchar opt[5];\n\nint main()\n{\n    read(n),read(q);\n    for(register int i = 1;i <= n;++i)\n        read(a[i]),read(w[i]);\n    for(register int i = 1;i < n;++i)\n    {\n        read(x),read(y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(1,0,1);\n    dfs2(1,1);\n    for(register int i = 1;i <= n;++i)\n    {\n        insert(id[i],a[i],rt[w[i]],1,n);\n    }\n    while(q--)\n    {\n        scanf(\"%s\",opt);\n        read(x),read(y);\n        if(opt[0] == 'C')\n        {\n            if(opt[1] == 'C')\n            {\n                remove(id[x],rt[w[x]],1,n);\n                w[x] = y;\n                insert(id[x],a[x],rt[w[x]],1,n);\n            }\n            else\n            {\n                a[x] = y;\n                insert(id[x],a[x],rt[w[x]],1,n);\n            }\n        }\n        else\n        {\n            if(opt[1] == 'S')\n            {\n                int root = rt[w[x]];\n                int fx = top[x],fy = top[y];\n                int ans = 0;\n                while(fx ^ fy)\n                {\n                    if(d[fx] > d[fy])\n                    {\n                        ans += getsum(id[fx],id[x],root,1,n);\n                        x = f[fx],fx = top[x];\n                    }\n                    else\n                    {\n                        ans += getsum(id[fy],id[y],root,1,n);\n                        y = f[fy],fy = top[y];\n                    }\n                }\n                if(d[x] > d[y])\n                    swap(x,y);\n                ans += getsum(id[x],id[y],root,1,n);\n                printf(\"%d\\n\",ans);\n            }\n            else\n            {\n                int root = rt[w[x]];\n                int fx = top[x],fy = top[y];\n                int ans = -0x3f3f3f3f;\n                while(fx ^ fy)\n                {\n                    if(d[fx] > d[fy])\n                    {\n                        ans = max(ans,getmax(id[fx],id[x],root,1,n));\n                        x = f[fx],fx = top[x];\n                    }\n                    else\n                    {\n                        ans = max(ans,getmax(id[fy],id[y],root,1,n));\n                        y = f[fy],fy = top[y];\n                    }\n                }\n                if(d[x] > d[y])\n                    swap(x,y);\n                ans = max(ans,getmax(id[x],id[y],root,1,n));\n                printf(\"%d\\n\",ans);\n            }\n        }\n    }\n}\n```\n\n\u5f00\u4e86 O2",
        "postTime": 1537071107,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u5148\u6811\u5256\u4e00\u4e0b\uff0c\u5bf9\u6bcf\u79cd\u5b97\u6559\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u5f53\u7136\uff0c\u628a\u6240\u6709\u7684\u8282\u70b9\u90fd\u5efa\u51fa\u6765\uff0c\u5728\u65f6\u7a7a\u590d\u6742\u5ea6\u4e0a\u90fd\u4e0d\u5141\u8bb8\u3002\n\n\u6240\u4ee5\u8003\u8651\u4e0d\u5efa\u51fa\u6240\u6709\u7684\u8282\u70b9\u3002\u4e3b\u8981\u60f3\u6cd5\u662f\uff1a\u4e00\u68f5\u7ebf\u6bb5\u6811\u91cc\uff0c\u53ea\u7ef4\u62a4\u51fa\u90e8\u5206\u53f6\u5b50\u8282\u70b9\uff08\u4fe1\u4ef0\u8be5\u5b97\u6559\u7684\u57ce\u5e02\uff09\u4ee5\u53ca\u8fd9\u4e9b\u8282\u70b9\u5230**\u7ebf\u6bb5\u6811**\u6839\u7684\u8def\u5f84\u3002\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u6837\u7684\u5efa\u6811\u590d\u6742\u5ea6\u4e3a$O(n\\log n)$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c$1$\uff0c\u5c31\u5728\u8be5\u57ce\u5e02\u7684\u5b97\u6559\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u91cc\u5220\u6389\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u5e76\u5728$c$\u6559\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u91cc\u6dfb\u52a0\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c$2,3,4$\uff0c\u5c31\u662f\u5355\u70b9\u4fee\u6539\u548c\u8def\u5f84\u8be2\u95ee\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ninline char get() {\n    char c; while ((c = getchar()) != 'C' && c != 'W' && c != 'Q'\n        && c != 'S' && c != 'M'); return c;\n}\nconst int N = 1e5 + 5, M = 2e6 + 5;\nint n, Q, W[N], C[N], fa[N], dep[N], sze[N], son[N], top[N], pos[N],\nrt[N], QAQ, ecnt, nxt[N << 1], adj[N], go[N << 1], col[N], val[N],\nQWQ;\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n    nxt[++ecnt] = adj[v]; adj[v] = ecnt; go[ecnt] = u;\n}\nstruct cyx {\n    int lc, rc, Sum, Max;\n    cyx() {}\n    cyx(int val) :\n        Sum(val), Max(val), lc(0), rc(0) {}\n} T[M];\nvoid upt(int p) {\n    T[p].Sum = T[T[p].lc].Sum + T[T[p].rc].Sum;\n    T[p].Max = max(T[T[p].lc].Max, T[T[p].rc].Max);\n}\nvoid ins(int x, int w, int l, int r, int &p) {\n    if (!p) T[p = ++QWQ] = cyx(0);\n    if (l == r) return (void) (T[p].Sum = T[p].Max = w);\n    int mid = l + r >> 1;\n    if (x <= mid) ins(x, w, l, mid, T[p].lc);\n    else ins(x, w, mid + 1, r, T[p].rc); upt(p);\n}\nvoid dfs1(int u, int fu) {\n    fa[u] = fu; dep[u] = dep[fu] + 1; sze[u] = 1;\n    for (int e = adj[u], v; e; e = nxt[e]) {\n        if ((v = go[e]) == fu) continue; dfs1(v, u);\n        sze[u] += sze[v];\n        if (sze[v] > sze[son[u]]) son[u] = v;\n    }\n}\nvoid dfs2(int u, int fu) {\n    if (son[u]) {\n        top[son[u]] = top[u];\n        pos[son[u]] = ++QAQ;\n        dfs2(son[u], u);\n    }\n    for (int e = adj[u], v; e; e = nxt[e]) {\n        if ((v = go[e]) == fu || v == son[u]) continue;\n        top[v] = v; pos[v] = ++QAQ; dfs2(v, u);\n    }\n}\nvoid init() {\n    QAQ = top[1] = pos[1] = 1;\n    int i; dfs1(1, 0); dfs2(1, 0);\n    for (i = 1; i <= n; i++)\n        ins(pos[i], val[i], 1, n, rt[col[i]]);\n}\nvoid del(int x, int l, int r, int &p) {\n    if (l == r) return (void) (T[p] = cyx(0), p = 0);\n    int mid = l + r >> 1; if (x <= mid) del(x, l, mid, T[p].lc);\n    else del(x, mid + 1, r, T[p].rc); upt(p);\n    if (!T[p].lc && !T[p].rc) T[p] = cyx(0), p = 0;\n}\nvoid change(int l, int r, int x, int v, int p) {\n    if (l == r) return (void) (T[p].Sum = T[p].Max = v);\n    int mid = l + r >> 1;\n    if (x <= mid) change(l, mid, x, v, T[p].lc);\n    else change(mid + 1, r, x, v, T[p].rc); upt(p);\n}\nvoid changeC(int x, int c) {\n    del(pos[x], 1, n, rt[col[x]]); ins(pos[x], val[x], 1, n, rt[c]);\n    col[x] = c;\n}\nint querySum(int l, int r, int s, int e, int p) {\n    if (!p) return 0; if (l == s && r == e) return T[p].Sum;\n    int mid = l + r >> 1;\n    if (e <= mid) return querySum(l, mid, s, e, T[p].lc);\n    else if (s >= mid + 1) return querySum(mid + 1, r, s, e, T[p].rc);\n    else return querySum(l, mid, s, mid, T[p].lc)\n        + querySum(mid + 1, r, mid + 1, e, T[p].rc);\n}\nint queryMax(int l, int r, int s, int e, int p) {\n    if (!p) return 0; if (l == s && r == e) return T[p].Max;\n    int mid = l + r >> 1;\n    if (e <= mid) return queryMax(l, mid, s, e, T[p].lc);\n    else if (s >= mid + 1) return queryMax(mid + 1, r, s, e, T[p].rc);\n    else return max(queryMax(l, mid, s, mid, T[p].lc),\n        queryMax(mid + 1, r, mid + 1, e, T[p].rc));\n}\nint pathSum(int u, int v) {\n    int res = 0, x = col[u];\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        res += querySum(1, n, pos[top[u]], pos[u], rt[x]);\n        u = fa[top[u]];\n    }\n    if (dep[u] > dep[v]) swap(u, v);\n    return res + querySum(1, n, pos[u], pos[v], rt[x]);\n}\nint pathMax(int u, int v) {\n    int res = 0, x = col[u];\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        res = max(res, queryMax(1, n, pos[top[u]], pos[u], rt[x]));\n        u = fa[top[u]];\n    }\n    if (dep[u] > dep[v]) swap(u, v);\n    return max(res, queryMax(1, n, pos[u], pos[v], rt[x]));\n}\nint main() {\n    int i, x, y; n = read(); Q = read(); char c1, c2;\n    for (i = 1; i <= n; i++) val[i] = read(), col[i] = read();\n    for (i = 1; i < n; i++) x = read(), y = read(), add_edge(x, y); init();\n    while (Q--) {\n        c1 = get(); c2 = get(); x = read(); y = read();\n        if (c1 == 'C') {\n            if (c2 == 'C') changeC(x, y);\n            else change(1, n, pos[x], y, rt[col[x]]), val[x] = y;\n        }\n        else {\n            if (c2 == 'S') printf(\"%d\\n\", pathSum(x, y));\n            else printf(\"%d\\n\", pathMax(x, y));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1508640509,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    },
    {
        "content": "\u672c\u9898\u8981\u67e5\u8be2\u6811\u4e0a\u603b\u548c\u4e0e\u6700\u5927\u503c\uff0c\u60f3\u5230\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u641e\u3002\u4f46\u662f\u540c\u4fe1\u4ef0\u624d\u80fd\u52a0\uff0c\u6240\u4ee5\u7ed9\u6bcf\u4e2a\u4fe1\u4ef0\u5f00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u52a8\u6001\u5f00\u70b9\u3002\n\n\u66f4\u6539\u7684\u65f6\u5019\u8bb0\u5f97\u5220\u9664\u539f\u6765\u7684\u8282\u70b9\uff08\u5f53\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u4e3a\u7a7a\u65f6\uff09\u3002\n\n\uff08\u8fd8\u6709\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u5199\u5b8f\u8fd8\u6562\u5f80\u91cc\u653e\u51fd\u6570- -\uff09\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define N 100005\n#define Max(a,b) (a>b?a:b)\nusing namespace std;\ninline void Swap(int& x,int& y){int z=x;x=y;y=z;}\nstruct Segment_Tree{\n    Segment_Tree *ls,*rs;\n    int l,r,sum,maxx;\n    void maintain(){\n        sum=maxx=0;\n        if(ls!=NULL){\n            sum+=ls->sum;\n            maxx=Max(maxx,ls->maxx);\n        }\n        if(rs!=NULL){\n            sum+=rs->sum;\n            maxx=Max(maxx,rs->maxx);\n        }\n    }\n    Segment_Tree(int l,int r):l(l),r(r){ls=rs=NULL; sum=maxx=0;}\n}*ST[N];\ntypedef Segment_Tree S_T;\nstruct Edge{\n    int to,nex;\n    bool vis;\n}e[N<<1];\nint n,m,T,fir[N],seq[N];\nstruct Point{\n    int Size,dep,pos,top,fa,son,val,belief;\n}p[N];\nvoid dfs1(int x){\n    p[x].Size=1;\n    for(int i=fir[x];i!=-1;i=e[i].nex){\n        if(!e[i].vis) continue;\n        int to=e[i].to;\n        p[to].dep=p[x].dep+1;\n        p[to].fa=x;\n        e[i^1].vis=false;\n        dfs1(to);\n        p[x].Size+=p[to].Size;\n        if(p[p[x].son].Size<p[to].Size) p[x].son=to;\n    }\n    return ;\n}\nvoid dfs2(int x){\n    T++;\n    p[x].pos=T;\n    if(p[p[x].fa].son==x) p[x].top=p[p[x].fa].top;\n    else p[x].top=x;\n    if(p[x].son) dfs2(p[x].son);\n    for(int i=fir[x];i!=-1;i=e[i].nex){\n        if(e[i].to==p[x].son || e[i].to==p[x].fa) continue;\n        dfs2(e[i].to);\n    }\n    return ;\n}\nvoid Insert(S_T*& x,int l,int r,int pos,int v){\n    if(x==NULL) x=new S_T(l,r);\n    if(l==pos && r==pos){\n        x->sum=x->maxx=v;\n        return ;\n    }\n    int mid=(l+r)>>1;\n    if(pos<=mid) Insert(x->ls,l,mid,pos,v);\n    else Insert(x->rs,mid+1,r,pos,v);\n    x->maintain();\n    return ;\n}\nvoid Delete(S_T*& x,int pos){\n    if(x->l==pos && x->r==pos) {\n        delete x;\n        x=NULL;\n        return ;\n    }\n    int mid=(x->l+x->r)>>1;\n    if(pos<=mid) Delete(x->ls,pos);\n    else Delete(x->rs,pos);\n    if(x->ls==NULL && x->rs==NULL){\n        delete x;\n        x=NULL;\n    }\n    else x->maintain();\n    return ;\n}\nint Query_Max(S_T* x,int l,int r){\n    if(x==NULL) return 0;\n    if(x->l==l && x->r==r) return x->maxx;\n    int mid=(x->l+x->r)>>1;\n    if(r<=mid) return Query_Max(x->ls,l,r);\n    if(l>mid) return Query_Max(x->rs,l,r);\n    return Max(Query_Max(x->ls,l,mid),Query_Max(x->rs,mid+1,r));\n}\nint Query_Sum(S_T* x,int l,int r){\n    if(x==NULL) return 0;\n    if(x->l==l && x->r==r) return x->sum;\n    int mid=(x->l+x->r)>>1;\n    if(r<=mid) return Query_Sum(x->ls,l,r);\n    if(l>mid) return Query_Sum(x->rs,l,r);\n    return Query_Sum(x->ls,l,mid)+Query_Sum(x->rs,mid+1,r);\n}\n\nint main(){\n    memset(fir,-1,sizeof fir);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) scanf(\"%d%d\",&p[i].val,&p[i].belief);\n    for(int i=0;i<n-1;i++) {\n        int x,y,u=i<<1;\n        scanf(\"%d%d\",&x,&y);\n        e[u].to=y; e[u].nex=fir[x]; fir[x]=u; e[u].vis=true;\n        u^=1;\n        e[u].to=x; e[u].nex=fir[y]; fir[y]=u; e[u].vis=true;\n    }\n    p[1].dep=1; p[1].top=1;\n    dfs1(1); dfs2(1);\n    for(int i=1;i<=n;i++) Insert(ST[p[i].belief],1,n,p[i].pos,p[i].val);\n    while(m--){\n        int x,y;\n        char mode[5];\n        scanf(\"%s%d%d\",mode,&x,&y);\n        if(mode[1]=='C'){//Change_Belief\n            Delete(ST[p[x].belief],p[x].pos);\n            p[x].belief=y;\n            Insert(ST[y],1,n,p[x].pos,p[x].val);\n        }\n        else if(mode[1]=='W'){//Change_Value\n            p[x].val=y;\n            Insert(ST[p[x].belief],1,n,p[x].pos,y);\n        }\n        else if(mode[1]=='S'){//Query_Sum\n            int ans=0,b=p[x].belief;\n            while(p[x].top!=p[y].top){\n                int topx=p[x].top,topy=p[y].top;\n                if(p[topx].dep<p[topy].dep) Swap(x,y) , Swap(topx,topy);\n                ans+=Query_Sum(ST[b],p[topx].pos,p[x].pos);\n                x=p[topx].fa;\n            }\n            if(p[x].dep<p[y].dep) Swap(x,y);\n            ans+=Query_Sum(ST[b],p[y].pos,p[x].pos);\n            printf(\"%d\\n\",ans);\n        }\n        else if(mode[1]=='M'){//Query_Max\n            int ans=0,b=p[x].belief;\n            while(p[x].top!=p[y].top){\n                int topx=p[x].top,topy=p[y].top;\n                if(p[topx].dep<p[topy].dep) Swap(x,y) , Swap(topx,topy);\n                ans=Max(ans,Query_Max(ST[b],p[topx].pos,p[x].pos));\n                x=p[topx].fa;\n            }\n            if(p[x].dep<p[y].dep) Swap(x,y);\n            ans=Max(ans,Query_Max(ST[b],p[y].pos,p[x].pos));\n            printf(\"%d\\n\",ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1482413799,
        "uid": 20558,
        "name": "zyh2015",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3313 \u3010[SDOI2014]\u65c5\u884c\u3011"
    }
]