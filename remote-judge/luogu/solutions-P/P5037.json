[
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\u521d\u770b\u9898\u76ee\uff0c\u89c9\u5f97\u5f88\u5bb9\u6613\uff0c\u5c31\u662f\u8ba9\u4f60\u5c06\u9664\u4e86 $1$ \u4e4b\u5916\u7684\u4e24\u4e24\u4e92\u8d28\u7684\u70b9\u5efa\u8fb9\uff0c\u8fb9\u6743\u53d6\u51b3\u4e8e\u51fa\u53d1\u70b9\uff0c\u95ee\u4ece $s$ \u5230 $t$ \u7684\u6700\u77ed\u8def\u3002\n\n## Solution\n$n$ \u7684\u8303\u56f4\u4e3a $4500$\uff0c\u4e92\u8d28\u7684\u70b9\u5efa\u65e0\u5411\u8fb9\u7684\u8303\u56f4\u4e3a\u5c06\u8fd1 $3 \\times 10 ^ 7$\uff0c\u66b4\u529b\u5efa\u8fb9\u4e0d\u6210\u95ee\u9898\uff0c\u90a3\u4e48\u8dd1\u8fb9\u5462\uff1f~~\u606d\u559c\u4f60\uff0c\u559c\u63d0 50pts~~\u3002\n\n\u8003\u8651\u672c\u9898\u4e0e\u5176\u4ed6\u9898\u76ee\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u5b83\u7684\u8fb9\u6743\u5c31\u662f\u51fa\u53d1\u70b9\u3002\n\u518d\u8003\u8651\u4e00\u4e0b Dijkstra \u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5c31\u662f\u8d2a\u5fc3\u7684\u5c06\u6700\u77ed\u8ddd\u79bb\u653e\u5165\u5806\u4e2d\uff0c\u518d\u63d0\u51fa\u6765\u5bf9\u7ec8\u70b9\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u3002\u5bf9\u4e24\u79cd\u4e0d\u540c\u7684\u8fb9\u6743\u753b\u56fe\u5206\u6790\u3002\n\n1. \u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u7ed9\u51fa\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qdi9164t.png)\n\n\u53ef\u4ee5\u770b\u5230\u8282\u70b9 1 \u548c \u8282\u70b9 2 \u5bf9 3 \u8fdb\u884c\u677e\u5f1b\uff0c\u7136\u540e 1 \u53c8\u5bf9 4 \u8fdb\u884c\u677e\u5f1b\uff0c\u56e0\u4e3a\u4e00\u4e2a\u70b9\u4e0e\u4e0d\u540c\u70b9\u7684\u8fb9\u6743\u7684\u5dee\u5f02\u6027\uff0c\u5bfc\u81f4\u6bcf\u6b21\u90fd\u8981\u5c06\u70b9\u63d0\u51fa\u6765\u66f4\u65b0\u5176\u4ed6\u70b9\u3002\n\n2. \u8fb9\u6743\u53d6\u51b3\u4e0e\u70b9\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1qfemftj.png)\n\n\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u8fb9\u6743\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u4e0a\u56fe\u4e0e\u4e0b\u56fe\u662f\u7b49\u4ef7\u7684\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ibij8ott.png)\n\n\u53ef\u4ee5\u53d1\u73b0\u5f53\u70b9\u5230\u5176\u4ed6\u70b9\u8fb9\u6743\u76f8\u540c\u65f6\uff0c\u70b9\u6743\u52a0\u4e0a\u8fb9\u6743\u4e3a\u5b9a\u503c\uff0c\u6240\u4ee5\u5728\u653e\u5165\u5806\u4e2d\u65f6\u53ef\u4ee5\u5c06\u70b9\u6743\u52a0\u8fb9\u6743\u4f5c\u4e3a\u6392\u5e8f\u5173\u952e\u5b57\uff0c\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u65f6\u63d0\u51fa\u6765\u7684\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u76f4\u63a5\u8d4b\u503c\u5373\u53ef\uff0c\u5177\u4f53\u64cd\u4f5c\u89c1\u6b64\u5904\u4ee3\u7801\u3002\n```cpp\n    S=read();T=read();\n    for(int i=1;i<=n;i++)w[i]=read(),dis[i]=1e18,vis[i]=false;\n    priority_queue<hh>q;\n    q.push({S,w[S]});\n    dis[S]=0;\n    while(!q.empty()){\n        int now=q.top().id;\n        long long val=q.top().val;\n        q.pop();\n        if(vis[now])continue;\n        vis[now]=true;\n        for(int i=head[now];i;i=edge[i].next){\n            int v=edge[i].to;\n            dis[v]=val;\n            if(v==T){\n                printf(\"%lld\\n\",dis[T]);\n                return;\n            }\n            q.push({v,dis[v]+w[v]});\n        }\n    }\n```\n\u6240\u4ee5\u5728\u5199\u7c7b\u4f3c\u4f18\u5316\u7684\u9898\u65f6\uff0c\u4e00\u5b9a\u8981\u4e86\u89e3\u7b97\u6cd5\u6838\u5fc3\u624d\u80fd\u60f3\u529e\u6cd5\u4f18\u5316\u3002\n\n\u6700\u540e\u8d34\u4e0a\u4ee3\u7801\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int M=3e7,N=4600;\nint t,n,c,head[N],S,T,w[N];\nlong long dis[N];\nbool vis[N];\ninline int read(){\n    int x=0,w=1;char ch=0;\n    while(ch<'0'||ch>'9'){\n        if(ch=='-')w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        x=(x<<1)+(x<<3)+ch-'0';\n        ch=getchar();\n    }\n    return x*w;\n}\nstruct xzh{\n    int next,to;\n}edge[M*2];\nstruct hh{\n    int id;\n    long long val;\n    bool operator <(const hh&x)const{\n        return x.val<val;\n    }\n};\nvoid add(int u,int v){\n    c++;\n    edge[c].next=head[u];\n    edge[c].to=v;\n    head[u]=c;\n}\nint gcd(int a,int b){\n    if(b==0)return a;\n    return gcd(b,a%b);\n}\nvoid pre(){\n    for(int i=2;i<=n;i++){\n        for(int j=i;j<=n;j++){\n            if(gcd(i,j)==1)add(i,j),add(j,i);\n        }\n    }\n}\nvoid solve(){\n    S=read();T=read();\n    for(int i=1;i<=n;i++)w[i]=read(),dis[i]=1e18,vis[i]=false;\n    priority_queue<hh>q;\n    q.push({S,w[S]});\n    dis[S]=0;\n    while(!q.empty()){\n        int now=q.top().id;\n        long long val=q.top().val;\n        q.pop();\n        if(vis[now])continue;\n        vis[now]=true;\n        for(int i=head[now];i;i=edge[i].next){\n            int v=edge[i].to;\n            dis[v]=val;\n            if(v==T){\n                printf(\"%lld\\n\",dis[T]);\n                return;\n            }\n            q.push({v,dis[v]+w[v]});\n        }\n    }\n}\nint main(){\n    t=read();n=read();\n    pre();\n    while(t--)solve();\n}\n```\n",
        "postTime": 1667525844,
        "uid": 327295,
        "name": "GalwayGirl",
        "ccfLevel": 6,
        "title": "P5037 Dijkstra\u795e\u5947\u4f18\u5316"
    },
    {
        "content": "\u521a\u521a\u770b\u5230\u6709\u5927\u4f6c\u4e3e\u62a5\u8fd9\u9898\u6284\u88ad\u9898\u89e3\u8fd9\u4e8b\u624d\u60f3\u8d77\u8fd9\u9053\u9898\u3002\n\n\u5206\u4eab\u4e00\u4e2a  ~~\u8d5b\u540e\u5341\u5206\u949f\u5199\u51fa\u6765\u7684~~ **\u8be1\u5f02**\u7684\u505a\u6cd5\n\ninit\u51fd\u6570\u9884\u5904\u7406\u51fa\u6240\u6709\u4e0d\u4e92\u8d28\u7684\u70b9\u5bf9\u3002\n\n**\u4efb\u610f\u623f\u95f4\u90fd\u6709\u8d70\u5eca\u76f8\u8fde**\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fde\u8fb9\uff0c\u53ea\u8981\u4e24\u70b9\u4e92\u8d28\u5c31\u5b58\u5728\u4e00\u6761\u8fb9\uff0c\u8fb9\u6743=\u51fa\u53d1\u70b9\u70b9\u6743\u3002\u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1dij+heap\u3002\n\n~~\u5370\u8c61\u4e2dt\u4e86\u3002~~\n\n\u8bb0\u5f55ans=min(ans,result[y])\uff0c\u5728relax\u7684\u65f6\u5019\u653e\u5f03\u6240\u6709result[v]>=ans\u7684\u70b9u\u7684relax\uff0c\u76f8\u5f53\u4e8e\u662f\u5728\u6700\u77ed\u8def\u6811\u4e0a\u526a\u679d\u3002\n\n\u7136\u540eAC\u4e86\u3002\n\n\u6548\u7387\u4e0d\u5982\u51fa\u9898\u4eba\u9898\u89e3\u63d0\u5230\u7684relax\u70b9y\u65f6\u7ec8\u6b62dij\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e0a\u6162\u7684\u4e0d\u591a\uff0c\u5b9e\u6d4b\u540e5\u4e2a\u70b9\u616210ms\u591a\u4e00\u70b9\u3002\n\n~~\u7a0b\u5e8f\u4e0d\u5438\u6c27\u603b\u7528\u65f6600ms\u4e0a\u4e0b\u3002\u5e76\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u4e48\u5feb\u3002\u3002\u3002\u3002\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u5927\u4f6c\u8bb2\u89e3\u4e00\u4e0b\u3002\u3002\u3002\u3002~~\n\n~~rank1 31ms /  2.78MB \uff0c\u4e0d\u77e5\u9053\u5927\u4f6c\u7528\u4e86\u4ec0\u4e48\u795e\u4ed9\u7b97\u6cd5\u3002orz~~\n\n```cpp\n//#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst unsigned int INT_MAX=2147483647;\n\nconst int kmaxn=4500+5;\nconst int kmaxm=kmaxn<<4;\n//////////////////////////////////////////////////////////////////////////////////\nstruct unit\n{\n    int first;\n    int second;\n    unit():first(0),second(0){};\n    inline unit(const int& f,const int& s):first(f),second(s){};\n    const int inline operator<(const unit& u)const\n    {\n        return first>u.first;\n    }\n};\nclass p_queue\n{\n    unit heap[kmaxm];\n    int otail;\n        public:\n        p_queue():otail(0){};\n        unit inline top(){\n            pop_heap(&heap[0],&heap[otail]);\n            return heap[otail-1];\n        }\n        void inline pop(){--otail;\n        }\n        void inline push(const unit& v){\n            heap[otail++]=v;\n            push_heap(&heap[0],&heap[otail]);\n        }\n        const bool inline empty()const{return !otail;}\n}q;\n//priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n/////////////////////////////////////////////////////////////////////////////////\nbool unable[kmaxn][kmaxn];\nint result[kmaxn];//\u8d70\u5230i\u70b9\u6d88\u8017\u7684\u6700\u5c0f\u4f53\u529b \nint value[kmaxn];//\u4ecei\u70b9\u51fa\u53d1\u6d88\u8017\u6389\u7684\u4f53\u529b \nbool hsh[kmaxn];\nint otail=0;\nint n;\nint ans;\nint x,y;\nvoid inline relax(const int& p)\n{\n    register int v=result[p]+value[p];\n    if(ans<=v)\n        return;\n    for(register int i=2;i<=n;++i)\n    {\n        if(!hsh[i]&&!unable[p][i]&&(result[i]<0||result[i]>v))\n        {\n        \tresult[i]=v;\n        \tif(i==y)\n        \t\tans=v;\n            else if(v<ans)\n            //\tq.push(make_pair(v,i));\n        \t\tq.push(unit(v,i));\n        \t//cout<<i<<\"\t\"<<p<<endl;\n        }\n    }\n}\nvoid inline shortest_path(const int& start)\n{\n    ans=INT_MAX;\n    //q.push(make_pair(0,start));\n    q.push(unit(0,start));\n    result[start]=0;\n    int t=0;\n    while(!q.empty())\n    {\n            t=q.top().second;\n            q.pop();\n            if(!hsh[t])\n            {\n                relax(t);\n                hsh[t]=true;\n            }\n    }\n}\n/*void inline add_edge(const int& s,const int &d,const int &w)\n{\n    if(s!=d)\n    \tmap[s][d]=w;\n}*/\ninline int read(){\n   register int s=0,w=1;\n   register char ch=getchar();\n   while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') s=s*10+ch-'0',ch=getchar();\n   return s*w;\n}\n\nint t;\nvoid inline init()\n{\n    for(register int i=2;i<=n;++i)\n    {\n        for(register int f=1;f*i<=n;++f)\n        {\n            value[otail++]=i*f;\n            for(register int k=0;k<otail;++k)\n            {\n                unable[value[otail-1]][value[k]]=unable[value[k]][value[otail-1]]=true;\n            }\n        }\n        otail=0;\n    }\n}\nint main()\n{\n    //ios::sync_with_stdio(false);\n    //cin>>t>>n;\n    t=read();\n    n=read();\n    init();\n    while(t--)\n    {\n        //cin>>x>>y;\n        x=read();\n        y=read();\n        for(register int i=1;i<=n;++i)\n        {\n            //cin>>value[i];\n            value[i]=read();\n            result[i]=-1;\n            hsh[i]=false;\n        }\n        shortest_path(x);\n        //cout<<result[y]<<endl;\n        printf(\"%d\\n\",result[x]);\n    }\n    return 0;\n}\n```\n\n~~\u9898\u9762\u5f3a\u8c03\u5f00o2\uff0c\u6bd4\u8d5b\u65f6\u5019\u5361\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\u5e38\u6570\u90fd\u6ca1\u5361\u8fc7\u53bb\u624d\u53d1\u89c9\u4e0d\u5bf9\u3002\uff08\u867d\u7136\u6211\u81ea\u5e26\u5927\u5e38\u6570\uff09~~",
        "postTime": 1545486523,
        "uid": 56184,
        "name": "_\u8679_",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5037 \u3010\u6293\u6355\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u6709 $n$ \u4e2a\u70b9\u7684\u56fe\uff0c\u4efb\u610f\u4e00\u70b9 $x$ \u5230\u53ef\u53bb\u53e6\u5916\u4e00\u70b9 $y$ \u5fc5\u987b\u4e92\u8d28\uff0c\u5373 $\\gcd(x,y)=1$\u3002\n\n\u56fe\u65e0\u8fb9\u6743\uff0c\u4f46\u662f\u62e5\u6709\u70b9\u6743\u3002\u6c42\u5230\u7ec8\u70b9 $en$ \u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n---\n\n## \u601d\u8def\n\n\u6b64\u9898\u9700\u4f7f\u7528 Dijkstra \u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u3002\u6700\u540e\u8981\u6c42 $x$ \u5230 $y$ \u7684\u6700\u77ed\u8def\u5f84\uff0c\u5982\u679c\u76f4\u63a5\u66b4\u529b\u7b97\u6700\u77ed\u8def\uff0c\u80af\u5b9a TLE\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u8003\u8651\u6bcf\u6b21\u538b\u5165\u4f18\u5148\u961f\u5217\u65f6\uff0c\u5e26\u4e0a\u5f53\u524d\u4f53\u529b\u503c\uff0c\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e0a\u6b21\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n---\n\n**\u6027\u8d28**\n\n- Dijkstra \u7b97\u6cd5\u7684\u8fd0\u7b97\u7279\u5f81\uff1a\u7531\u5f53\u524d\u6700\u5c0f\u503c\u5411\u8fde\u7740\u7684\u70b9\u62d3\u5c55\u3002\n- \u6b64\u56fe\u7684\u7279\u6027\uff1a\u6ca1\u6709\u8fb9\u6743\uff0c\u53ea\u6709\u4ece\u4e00\u70b9\u5230\u8d70\u5eca\uff08\u8fb9\uff09\u4e0a\u624d\u4f1a\u8017\u8d39\u4f53\u529b\u503c\u3002\n\n\u7531\u6b64\u5373\u53ef\u5f97\uff1a**\u5f53\u7b2c\u4e00\u6b21\u5bf9\u7ec8\u70b9 $y$ \u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c\u65f6\u7684\u503c\u5c31\u662f\u7b54\u6848**\u3002\n\n---\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\n#define k pair <int, int>//\u5b8f\u5b9a\u4e49 \nusing namespace std;\nconst int N = 4.5e3+10;\nstatic inline int read () {//\u5feb\u8bfb \n\tint x = 0\uff1bbool f = 1; char s = getchar();\n\twhile(s<'0'||s>'9'){if(s=='-')f=0;s=getchar();}\n\twhile(s>='0'&&s<='9'){x=(x<<1)+(x<<3)+(s^48);s=getchar();}\n\treturn f?x:-x;\n}\n//inline:\u5185\u8054\u51fd\u6570 \n\nint T, n, a[N], h[N*N], cnt;//\u6ce8\u610f\uff1a\u4e00\u5b9a\u662fN*N!!! \nstruct edge {int to, next;} e[N*N];\n\nstatic inline void add(int x,int y){//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\n\te[++cnt].to = y;\n\te[cnt].next = h[x];\n\th[x] = cnt;\n}\n\nbool vis[N];int dis[N];\npriority_queue<k,vector<k>,greater<k> >q;//\u4f18\u5148\u961f\u5217 pair\u578b \n\nstatic inline void dijkstra(int s, int en){//\u6c42\u6700\u77ed\u8def \n\tmemset(dis, 0x3f, sizeof dis);\n\tmemset(vis, 0, sizeof vis);\n\tpriority_queue<k,vector<k>,greater<k> >().swap(q);//\u6e05\u96f6 \u4e14\u6e05\u7a7a\u5185\u5b58 \n\tdis[s] = 0;\n\tq.push(make_pair(dis[s]+a[s], s));//first:\u6700\u5c0f\u503c second:\u7f16\u53f7 \n\twhile(q.size()){\n\t\tpair<int,int> u = q.top(); q.pop();\n\t\tint x = u.first, y = u.second;\n\t\tvis[y] = 1;\n\t\tfor(int i = h[y]; i; i = e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif (vis[v]) continue;//\u677e\u5f1b\u5904\u7406 \n\t\t\tif (dis[v] > dis[y]+a[y]){//\u4ece\u70b9\u5230\u8fb9\u8017\u8d39\u4f53\u529b \n\t\t\t\tdis[v] = x;//\u4e0a\u6b21\u7684\u503c \n\t\t\t\tif (v == en){\n\t\t\t\t\tprintf(\"%d\\n\",dis[v]);\n\t\t\t\t\treturn ;\n\t\t\t\t} q.push(make_pair(dis[v]+a[v], v));\n\t\t\t}\n\t\t}\n\t} puts(\"-1\\n\");//\u5230\u4e0d\u4e86 \u8f93\u51fa -1 \n\treturn ;\n}\n\nsigned main(void){\n\tT=read();n=read();\n\tfor(int i = 2; i < n; ++ i)\n\t\tfor(int j = i+1; j <= n; ++ j)\n\t\t\tif(__gcd(i, j) == 1){//\u5224\u65ad\u4e92\u8d28 \uff0c\u6700\u5927\u516c\u56e0\u6570\u4e3a 1 \n\t\t\t\tadd(i, j);\n\t\t\t\tadd(j, i);//\u65e0\u5411\u56fe \n\t\t\t}\n\twhile (T --) {\n\t\tint x = read(), y = read();\n\t\tfor(int i = 1; i <= n; ++ i) a[i] = read();\n\t\tdijkstra(x, y);//\u8bb0\u5f97\u7528\u5feb\u8bfb\uff0c\u5f00 O2 \n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1667468312,
        "uid": 657864,
        "name": "GOD_hj",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 - P5037"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u7ed3\u8bba\u7684\u7b80\u6d01\u8bc1\u660e\uff1a\n\n\u5173\u4e8e\u4e3a\u4ec0\u4e48\u5c06\u5f53\u524d\u70b9\u7684\u65f6\u95f4\u4e5f\u653e\u8fdb\u4f18\u5148\u961f\u5217\u540e\uff0c\u677e\u5f1b\u7684\u65f6\u5019\u7b2c\u4e00\u6b21\u641c\u5230\u7ec8\u70b9 $t$ \u65f6\uff0c\u90a3\u4e2a\u503c\u5c31\u662f\u6700\u5c0f\u503c.\n\n\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e\n\n> \u8bc1\u660e\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u662f\u5230\u8fbe\u5b83\u7684\u6700\u5c0f\u65f6\u95f4\u82b1\u8d39.\n\n\u8003\u8651\u5f53\u524d\u4ece\u961f\u5217\u91cc\u62ff\u51fa\u6765\u7684\u503c\u4e3a $x$ \uff0c\u5219\u6839\u636e\u6027\u8d28\u53ef\u77e5\u5176\u4f59 $x'\\ge x$ .\n\n\u7531 $x$ \u5f97\u5230\u4e0b\u4e00\u4e2a\u70b9\u7684\u65f6\u95f4\u5199\u6210 $x+d_v$ \uff0c\u6ce8\u610f\u5230\u5b83\u5bf9\u4e8e $x'$ \u540c\u6837\u9002\u7528\uff0c\u5373\n\n$x+d_v\\le x'+d_v$ .\n\n\u4e8e\u662f\u53ef\u77e5\u7b2c\u4e00\u6b21\u641c\u5230\u7684\u65f6\u5019\u5c31\u662f\u6700\u5c0f\u503c.",
        "postTime": 1636944691,
        "uid": 78127,
        "name": "\u964c\u8def\u7684\u82b1",
        "ccfLevel": 0,
        "title": "P5037 \u6293\u6355 \u7ed3\u8bba\u8bc1\u660e"
    },
    {
        "content": "###### ~~\u5ba1\u6838\u5927\u5927\u8f9b\u82e6\u4e86~~\n\n###### \u5176\u4ed6\u5927\u4f6c\u7684\u65b9\u6cd5\u4e0d\u592a\u9002\u5408\u6211\u8fd9\u4e2a\u849f\u84bb \u6240\u4ee5\u5c31\u53ea\u597d\u81ea\u5df1\u5199\u4e00\u7bc7\u4e86\n\n\n\n------------\n\n\n## \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u7ed9 $n$ \u4e2a\u70b9\n\n\n\u5176\u4e2d \u70b9 $i$ \u80fd\u53bb\u5230\u7684\u70b9 $j$ \u6ee1\u8db3 $gcd(i , j) = 1$.\n\n\u79bb\u5f00\u6bcf\u4e2a\u70b9\u90fd\u6709\u4ee3\u4ef7,\u4f46\u662f\u8fb9\u6ca1\u6709\u4ee3\u4ef7.\n\n\u6c42\u5230\u8fbe $y$ \u7684\u6700\u5c0f\u4ee3\u4ef7\n\n\n------------\n\n\u8fd9\u662f\u4e00\u9053\u597d\u9898 \u4e3b\u8981\u8003\u5bdf\u4e86\u6211\u4eec\u5bf9 $dij$ \u6c42\u6700\u77ed\u8def\u8fd9\u4e2a\u7b97\u6cd5\u7684**\u7406\u89e3** \u5982\u679c\u53ea\u662f~~\u50cf\u6211\u4e00\u6837~~\u80cc\u4ee3\u7801\u7684\u540c\u5b66\u53ef\u80fd\u65e0\u6cd5\u5f88\u5feb\u60f3\u5230\u8fd9\u4e2a\u9898\u76ee\u7684\u6b63\u89e3.\n\n## \u89e3\u9898\u601d\u8def\uff1a\n\n\n\u7406\u89e3\u4e86\u9898\u610f(\u6216\u8005\u770b\u5b8c\u9898\u610f\u7b80\u8ff0)\u4e4b\u540e\u5c31\u80fd\u77e5\u9053:\n\n\u9898\u76ee\u662f\u8981\u6211\u4eec\u6c42\u4ece $x$ \u5230\u8fbe $y$ \u7684\u6700\u5c0f\u4ee3\u4ef7 \u6beb\u65e0\u7591\u95ee\u76f4\u63a5\u4e0a $dij$. \n\n\u4f46\u662f\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(Tmlogm)$, $m$ \u8868\u793a\u8fb9\u6570,\u5728 $n = 4500$ \u7684\u65f6\u5019 $m$ \u8fbe\u5230\u4e86 $6151496$ \uff0c\u5f88\u660e\u663e $1.5s$ \u4e5f\u8dd1\u4e0d\u8fc7\u53bb. \n\n\u90a3\u600e\u4e48\u529e\u5462\uff1f\n\n\u56e0\u4e3a\u8fb9\u662f\u6ca1\u6709\u4ee3\u4ef7\u7684 \u6709\u4ee3\u4ef7\u7684\u662f\u5f00\u9501(\u95e8\u662f\u5411\u5916\u9501\u4e0a\u7684)\n\n\u6240\u4ee5\u5982\u679c\u6211\u4eec\u6bcf\u4e00\u6b21\u5f80\u4f18\u5148\u961f\u5217\u91cc\u9762\u52a0\u5165\u7684**\u6392\u5e8f\u5173\u952e\u5b57**\u5e26\u4e0a\u4e86\u5f53\u524d\u70b9\u7684\u70b9\u6743,\u8bbe\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u7684\u70b9\u4e3a $k$ \u4e14\u5230 $k$ \u7684\u4ee3\u4ef7\u4e3a $f_k$, \u5c31\u4f1a\u6ee1\u8db3\u4e00\u4e2a\u6027\u8d28\uff1a\n\n- $f_k$ \u662f\u4ece\u8d77\u70b9\u5230\u70b9 $k$ \u7684\u6700\u4f18\u89e3.(\u5176\u5b9e\u8fd9\u662f\u5e9f\u8bdd)\n\n\u8ba9\u6211\u4eec\u601d\u8003 $dij$ \u7684**\u8fc7\u7a0b:**\n\n\u65e0\u975e\u5c31\u662f\u6bcf\u6b21\u7528 $f$ \u6700\u5c0f\u4e14\u6ca1\u6709\u7528\u8fc7\u7684\u70b9\u6765\u66f4\u65b0\u5176\u4ed6\u6ca1\u7528\u8fc7\u7684\u70b9\u7684 $f$ , \u8fd9\u4e2a\u65f6\u5019 \u5982\u679c $f_i$ \u7528\u8fc7\u4e86 \u90a3\u4e48 $f_i$ \u4e00\u5b9a\u5c31\u662f\u4ece\u8d77\u70b9\u5230\u70b9 $i$ \u7684\u6700\u77ed\u8ddd\u79bb.\n\n\u5982\u679c\u4f60\u60f3\u95ee\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684 \u90a3\u4f60\u53ef\u4ee5\u6df1\u5165\u601d\u8003\u4e00\u4e0b $dij$ \u8fd9\u4e2a\u7b97\u6cd5\u7684\u6838\u5fc3 : **\u5229\u7528\u5df2\u77e5\u6700\u5c0f\u503c\u5bf9\u5269\u4e0b\u7684\u70b9\u8fdb\u884c\u6269\u5c55**.\n\n\u90a3\u4e48 \u8fd9\u4e2a\u6027\u8d28\u7684\u6b63\u786e\u6027\u662f\u4e0d\u662f\u663e\u800c\u6613\u89c1\u4e86\u5462\uff1f\n\n### \u4f46\u662f\n\u5982\u679c\u53ea\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u7684\u8bdd \u4e0d\u662f $MLE$ \u5c31\u662f $TLE$ , \u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u5f97\u60f3\u5176\u4ed6\u7684\u4f18\u5316\u65b9\u6cd5\n\n\u7167\u4e0a\u9762\u6240\u8bf4 \u9898\u76ee\u7ed9\u6211\u4eec\u7684\u56fe\u6709\u4e00\u4e2a\u6027\u8d28 : \u8fb9\u662f\u6ca1\u6709\u6743\u503c\u7684 \u6709\u6743\u503c\u7684\u662f\u4ece\u4e00\u4e2a\u70b9\u51fa\u53bb.\n\n\u6211\u4eec\u6df1\u5165\u601d\u8003\u4e00\u4e0b \u5c31\u80fd\u53d1\u73b0\u8fd9\u6837\u4e00\u4e2a\u66f4\u91cd\u8981\u7684\u6027\u8d28\n\n### \u5728\u7b2c\u4e00\u6b21\u4e3a\u7ec8\u70b9 $y$ \u677e\u5f1b\u65f6 \u677e\u5f1b\u7684\u7ed3\u679c\u5c31\u662f\u7b54\u6848.\n\n\u6211\u4eec\u5148\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u6027\u8d28\u4e3a\u4ec0\u4e48\u5728**\u5176\u4ed6\u9898\u76ee**\u4e2d\u4e0d\u6210\u7acb\n\n\u56e0\u4e3a\u5bf9\u4e8e\u8fb9\u6709\u6743\u503c\u7684\u56fe \u5728\u6211\u4eec\u7528\u70b9 $i$ \u5bf9\u7ec8\u70b9 $y$ \u677e\u5f1b\u4e4b\u540e \u53e6\u5916\u7684\u4e00\u4e2a\u70b9 $j$ \u5bf9 $y$ \u8fdb\u884c\u677e\u5f1b\u7684\u7ed3\u679c\u53ef\u80fd\u66f4\u5c0f. \n\n\u4f8b\u5982\uff1a\n\n$f_i = 1 , f_j = 2 , i\\to y:4 , j\\to y:2$.\n\n\u6211\u4eec\u5e94\u8be5\u662f\u5148\u7528 $f_i$ \u5bf9 $y$ \u8fdb\u884c\u677e\u5f1b $f_y = 5$.\n\n\u4f46\u662f\u6b63\u786e\u7b54\u6848\u5e94\u8be5\u662f\u7528 $f_j$ \u8fdb\u884c\u677e\u5f1b $f_y = f_j + 2 = 4$.\n\n\u7a76\u5176\u672c\u8d28 \u662f\u56e0\u4e3a\u8fb9 $i\\to y $\u548c $j\\to y$ \u7684\u6743\u503c\u65e0\u6cd5\u786e\u5b9a.\n\n\u800c\u5728\u6211\u4eec\u8fd9\u9053\u9898\u76ee\u4e2d , \u56e0\u4e3a\u51fa\u70b9\u6709\u6743\u503c , \u6240\u4ee5\u5982\u679c\u6211\u4eec\u628a\u51fa\u70b9\u7684\u6743\u503c\u770b\u4f5c\u8fb9\u6743 \u5728\u6bcf\u6b21\u8fdb\u5165\u4f18\u5148\u961f\u5217\u7684\u65f6\u5019\u5e26\u4e0a\u70b9\u6743 , \u90a3\u6bcf\u4e00\u6761\u8fb9\u7684\u6743\u503c\u5c31\u662f\u786e\u5b9a\u7684  \u6839\u636e\u4f18\u5148\u961f\u5217\u7684\u6027\u8d28 \u5728\u6211\u4eec\u8fd9\u9053\u9898\u76ee\u4e2d $f_j + (j\\to y)$ \u4f1a\u6bd4 $f_i + (i\\to y)$ \u4f18\u5148\u8003\u8651 \u4e5f\u5c31\u6ee1\u8db3\u4e86\u6211\u4e0a\u9762\u6240\u8bf4\u7684\u6027\u8d28(\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801).\n\n\n## code:\n\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 4501\n#define inf 0x3f3f3f3f\nusing namespace std;\n\nstruct edge\n{\n\tint to , next;\n}e[maxn * maxn];\nint head[maxn],sum;\ninline void add(int x , int y)\n{\n\te[++ sum].next = head[x];\n\te[sum].to = y;\n\thead[x] = sum;\n}\n\ntypedef pair<int , int> p;\nint f[maxn],vis[maxn],a[maxn];\nint t,n,x,y;\n\npriority_queue<p , vector<p> , greater<p> > q;\n\nvoid init()\n{\n\tfor(int i = 1 ; i <= n ; ++ i) f[i] = inf , vis[i] = 0;\n\twhile(!q.empty()) q.pop();\n}\nint gcd(int x , int y)\n{\n\treturn y == 0 ? x : gcd(y , x % y);\n}\n\nvoid work(int st , int en)\n{\n\tinit();\n\tf[st] = 0;\n\tq.push(make_pair(a[st] , st));//\u6743 \u70b9 \n\twhile(!q.empty())\n\t{\n\t\tint top = q.top().first , po = q.top().second;//top \u4e3a\u4ee3\u4ef7 po \u4e3a\u70b9\u7684\u5e8f\u53f7 \n\t\tq.pop();\n\t\tif(vis[po]) continue;\n\t\tvis[po] = 1;\n\t\tfor(int i = head[po] ; i ; i = e[i].next)\n\t\t{\n\t\t\tint to = e[i].to;\n            if(vis[to]) continue;\n\t\t\tif(f[to] > f[po] + a[po])\n\t\t\t{\n\t\t\t\tf[to] = top;\n\t\t\t\tif(to == en)\n\t\t\t\t{\n\t\t\t\t\tprintf(\"%d\\n\", f[to]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tq.push(make_pair(f[to] + a[to] , to));\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"-1\\n\");\n}\n\ninline int read()\n{\n\tint x = 0 ; char c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0' , c = getchar();\n\treturn x;\n}\nint main()\n{\n\tt = read() , n = read();\n\tfor(int i = 2 ; i <= n ; ++ i)\n\t\tfor(int j = i ; j <= n ; j ++)\n\t\t\tif(gcd(i , j) == 1)//i j \u4e92\u8d28 \n\t\t\t\tadd(i , j) , add(j , i);\n\twhile(t --)\n\t{\n\t\tx = read() , y = read();\n\t\tfor(int i = 1 ; i <= n ; ++ i) a[i] = read();\n\t\twork(x , y);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1636897867,
        "uid": 308384,
        "name": "Morpheuse",
        "ccfLevel": 0,
        "title": "P5037\u9898\u89e3"
    },
    {
        "content": "\u7167\u4f8b\u5148\u626f\u6de1\r\n\r\n\u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u505a\u8fc7[P4473 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u98de\u98de\u4fa0](https://www.luogu.org/problemnew/show/P4473)\u5462\uff1f\u5982\u679c\u6ca1\u505a\u8fc7\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b\uff0c\u90a3\u9898\u7684\u8fd9\u9053\u9898\u5c31\u662f\u7528\u4e86\u98de\u98de\u4fa0\u7684\u4f18\u5316\u601d\u60f3\u3002\u6709\u4e00\u6b21\u8003\u8bd5\uff0c\u6211\u4eec\u8003\u5230\u4e86\u98de\u98de\u4fa0\u8fd9\u9053\u9898\uff0c\u7136\u540e\u6807\u7a0b\u662f\u5206\u5c42\u56fe\uff0c\u7531\u4e8e\u6211\u592a\u83dc\u4e86\uff0c\u6ca1\u542c\u61c2\u5c31\u4e0a\u7f51\u641c\u8bb2\u89e3\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e00\u4e2a\u795e\u4ed9\u7b97\u6cd5\uff1aDijkstra+\u5e76\u67e5\u96c6\u4f18\u5316\uff08\u540e\u6765zcysky\u5927\u4f6c\u4e5f\u5728\u6d1b\u8c37\u4e0a\u53d1\u4e86\u76f8\u5173\u7684\u9898\u89e3\uff0c\u6211\u4e5f\u5f88\u4e0d\u8981\u8138\u7684\u53d1\u4e86\u4e00\u7bc7\uff0c\u6b64\u5904\u5c31\u4e0d\u8bb2\u4e86\uff09\uff0c\u5728\u770b\u61c2\u4e4b\u540e\u6211\u5c31\u628a\u90a3\u9898\u7684\u4f18\u5316\u601d\u8def\u8fd0\u7528\u5230\u4e86\u8fd9\u91ccQAQ\u3002\r\n\r\n\u626f\u5b8c\u4e86\uff0c\u4e0b\u9762\u5f00\u59cb\u8bb2\u9898\u76ee\u3002\r\n\r\n\u5148\u628a\u9898\u610f\u7b80\u5316\u4e00\u4e0b\uff1a\u7ed9\u4f60\u7f16\u53f7\u4e3a$1$\u5230$n$\u7684$n$\u4e2a\u70b9\uff0c\u4e24\u4e2a\u7f16\u53f7\u4e92\u8d28\u7684\u70b9\u53ef\u4ee5\u8fde\u8fb9\uff0c\u4ece\u76f8\u540c\u7684\u70b9\u51fa\u53d1\u7684\u8fb9\u6743\u503c\u76f8\u540c\uff0c\u6c42\u7ed9\u5b9a\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\uff08\u5176\u5b9e\u9664\u4e86$1$\u53f7\u70b9\uff0c\u5176\u4f59\u6bcf\u4e2a\u70b9\u90fd\u662f\u76f8\u4e92\u8fde\u901a\u7684\uff0c~~\u6309\u7167\u60ef\u4f8b\u8f93\u51fa$-1$\u7684\u6570\u636e\u662f\u4e0d\u5b58\u5728\u7684~~\uff09\u3002\r\n\r\n\u9898\u76ee\u5927\u81f4\u5206\u6210$2$\u90e8\u5206\uff1a1.\u679a\u4e3e$n$\u4ee5\u5185\u7684\u4e92\u8d28\u70b9\u5bf9\uff1b2.\u6c42\u6700\u77ed\u8def\r\n\r\n\u5bf9\u4e8e\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u672c\u6765\u662f\u60f3\u5361\u4e00\u4e0b\u66b4\u529b\u679a\u4e3e\uff0c\u53ea\u8ba9\u6784\u9020\u6cd5\u8fc7\u7684\uff0c\u4f46\u662f\u7531\u4e8e$n$\u592a\u5c0f\uff0c\u6240\u4ee5\u6784\u9020\u751a\u81f3\u8dd1\u7684\u6bd4\u66b4\u529b\u679a\u4e3e\u8fd8\u6162QAQ\uff08\u96be\u9053\u662f\u6211\u5199\u7684\u592a\u5783\u573e\u4e86\uff1f\uff1f\uff1f\uff09\uff0c\u6240\u4ee5......\u6700\u540e\u5e76\u6ca1\u6709\u5361\u3002\r\n\r\n\u4f46\u662f\u8fd8\u662f\u8bb2\u4e00\u4e0b\u6784\u9020\u6cd5\u7684\u601d\u8def\u5427\uff08\u5927\u5bb6\u770b\u770b\u5c31\u597d\uff09\uff1a\r\n\r\n1.\u9996\u5148\u9884\u5904\u7406$1$~$n$\u4e2d\u6240\u6709\u7684\u8d28\u6570\r\n\r\n2.\u679a\u4e3e$i=1$~$n$\r\n\r\n3.\u5bf9\u4e8e\u6bcf\u4e00\u4e2a$i$\uff0c\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u6c42\u51fa\u5b83\u4f7f\u7528\u4e86\u90a3\u4e9b\u8d28\u6570\r\n\r\n4.\u4ece$i$\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u8d28\u6570\u4e2d\u9009\u53d6\u4e00\u4e9b\u8fdb\u884c\u7ec4\u5408\u5e76\u4f7f\u5176\u5c0f\u4e8e$i$\r\n\r\n\u4ee3\u7801\u5982\u4e0b\uff08\u6700\u77ed\u8def\u90e8\u5206\u6ca1\u6709\u4f18\u5316\uff09\uff1a\r\n```\r\n#include<bits/stdc++.h>\r\n#define ll long long\r\n#define INF 0x7f7f7f7f\r\nusing namespace std;\r\nconst int maxn = 105;\r\nll x[50010],Ans1,Su[10010],Fa[10010],Cnt,Ans,n,X,Dist[10010],w[10010];\r\nbool Pd[10010],Used[10010],From[10010][10010];\r\nint T,u,v,Head[10010],To[61000010],Next[61000010];\r\nqueue<ll> Q;\r\nstruct Node {\r\n    int p,Dis;\r\n} Now,N;\r\nbool operator <(Node x,Node y) {\r\n    return x.Dis>y.Dis;\r\n}\r\npriority_queue<Node> PQ;\r\ntemplate <typename T>\r\ninline int Read(T &x) {\r\n    x=0;\r\n    int f=1;\r\n    char c=getchar();\r\n    while(c!='-'&&c>'9'&&c<'0')\r\n        c=getchar();\r\n    for(; !isdigit(c); c=getchar())\r\n        if(c=='-')\r\n            f=-f;\r\n    for(; isdigit(c); c=getchar())\r\n        x=x*10+c-'0';\r\n    x*=f;\r\n    if(c=='\\n')\r\n        return 1;\r\n    else\r\n        return 0;\r\n}\r\ninline void Write(long long x) {\r\n    if(x<0) {\r\n        putchar('-');\r\n        x=-x;\r\n    }\r\n    if(x>9) {\r\n        Write((x-x%10)/10);\r\n    }\r\n    putchar(x%10+'0');\r\n}\r\ninline ll Multi(ll a, ll b, ll p) {\r\n    ll Ans1 = 0;\r\n    while(b) {\r\n        if(b & 1LL)\tAns1 = (Ans1+a)%p;\r\n        a = (a+a)%p;\r\n        b >>= 1;\r\n    }\r\n    return Ans1;\r\n}\r\ninline ll QPow(ll a, ll b, ll p) {\r\n    ll Ans1 = 1;\r\n    while(b) {\r\n        if(b & 1LL)\tAns1 = Multi(Ans1, a, p);\r\n        a = Multi(a, a, p);\r\n        b >>= 1;\r\n    }\r\n    return Ans1;\r\n}\r\ninline bool MR(ll n) {\r\n    if(n == 2)\treturn true;\r\n    int s = 20, i, t = 0;\r\n    ll u = n-1;\r\n    while(!(u&1)) {\r\n        t++;\r\n        u >>= 1;\r\n    }\r\n    while(s--) {\r\n        ll a = rand()%(n-2)+2;\r\n        x[0] = QPow(a, u, n);\r\n        for(i = 1; i <= t; i++) {\r\n            x[i] = Multi(x[i-1], x[i-1], n);\r\n            if(x[i] == 1 && x[i-1] != 1 && x[i-1] != n-1)\treturn false;\r\n        }\r\n        if(x[t] != 1)\treturn false;\r\n    }\r\n    return true;\r\n}\r\ninline ll Gcd(ll a, ll b) {\r\n    if(b == 0)\r\n        return a;\r\n    else\r\n        return Gcd(b, a%b);\r\n}\r\ninline ll Pollard_Rho(ll n, int c) {\r\n    ll i = 1, k = 2, x = rand()%(n-1)+1, y = x;\r\n    while(1) {\r\n        i++;\r\n        x = (Multi(x, x, n)+c)%n;\r\n        ll p = Gcd((y-x+n)%n, n);\r\n        if(p != 1 && p != n)\treturn p;\r\n        if(y == x)\treturn n;\r\n        if(i == k) {\r\n            y = x;\r\n            k <<= 1;\r\n        }\r\n    }\r\n}\r\ninline void Find(ll x, int c) {\r\n    if(x == 1)\treturn;\r\n    if(MR(x)) {\r\n        Pd[x]=1;\r\n        return;\r\n    }\r\n    ll p = x, k = c;\r\n    while(p >= x) {\r\n        p = Pollard_Rho(p, c--);\r\n    }\r\n    Find(p, k);\r\n    Find(x/p, k);\r\n}\r\ninline void Add(int a,int b) {\r\n    To[++Cnt]=a;\r\n    Next[Cnt]=Head[b];\r\n    Head[b]=Cnt;\r\n    To[++Cnt]=b;\r\n    Next[Cnt]=Head[a];\r\n    Head[a]=Cnt;\r\n}\r\nvoid Dijkstra(int x) {\r\n    Dist[x]=0;\r\n    Now.Dis=0;\r\n    Now.p=x;\r\n    PQ.push(Now);\r\n    while(!PQ.empty()) {\r\n        Now=PQ.top();\r\n        From[Now.p][0]=0;\r\n        PQ.pop();\r\n        if(!Pd[Now.p]) {\r\n            Pd[Now.p]=1;\r\n            for(int i=Head[Now.p]; i; i=Next[i]) {\r\n                if(!Pd[To[i]]&&(!From[Now.p][Fa[To[i]]])&&(Dist[To[i]]>Dist[Now.p]+w[Now.p])) {\r\n                    Fa[To[i]]=Now.p;\r\n                    Dist[To[i]]=Dist[Now.p]+w[Now.p];\r\n                    From[To[i]][Now.p]=1;\r\n                    N.p=To[i];\r\n                    N.Dis=Dist[Now.p]+w[Now.p];\r\n                    PQ.push(N);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nint main() {\r\n    Read(T);\r\n    Read(n);\r\n    Cnt=0;\r\n    for(int i=2; i<=5000; i++) {\r\n        if(MR(i)) {\r\n            Su[++Cnt]=i;\r\n        }\r\n    }\r\n    Cnt=0;\r\n    for(int i=1; i<=n; i++) {\r\n        memset(Pd,0,sizeof(Pd));\r\n        memset(Used,0,sizeof(Used));\r\n        Find(i,57);\r\n        for(int j=1; Su[j]<i; j++) {\r\n            if(!Pd[Su[j]]) {\r\n                Q.push(Su[j]);\r\n                Ans++;\r\n            }\r\n        }\r\n        while(!Q.empty()) {\r\n            X=Q.front();\r\n            Add(X,i);\r\n            Q.pop();\r\n            for(int j=1; Su[j]<=i; j++) {\r\n                if(X*Su[j]<i&&(!Pd[Su[j]])&&(!Used[X*Su[j]])) {\r\n                    Q.push(X*Su[j]);\r\n                    Used[X*Su[j]]=1;\r\n                    Ans++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    while(T--) {\r\n        fill(Dist,Dist+n+5,INF);\r\n        memset(Fa,0,sizeof(Fa));\r\n        memset(From,0,sizeof(From));\r\n        memset(Pd,0,sizeof(Pd));\r\n        Read(u);\r\n        Read(v);\r\n        for(int i=1; i<=n; i++) {\r\n            Read(w[i]);\r\n        }\r\n        Dijkstra(u);\r\n        Write(Dist[v]);\r\n        putchar('\\n');\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\n\u5bf9\u4e8e\u7b2c\u4e8c\u90e8\u5206\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e00\u5b9a\u90fd\u4f1a\u5199Dijkstra+\u5806\u4f18\u5316\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u8f7b\u6613\u5f97\u523050\u5206\u4e86\u3002\r\n\r\n\u90a3\u5269\u4e0b\u768450\u5206\u5462\uff1f\r\n\r\n\u5176\u5b9e\u4ed4\u7ec6\u89c2\u5bdf\u9898\u76ee\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\uff0c\u4ece\u540c\u4e00\u4e2a\u70b9\u51fa\u53d1\u7684\u8fb9\u6743\u503c\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u628a\u70b9\u538b\u8fdb\u4f18\u5148\u961f\u5217\u65f6\u53ef\u4ee5\u76f4\u63a5\u52a0\u4e0a\u5f53\u524d\u70b9\u7684\u70b9\u6743\uff08\u5373\u4ece\u5f53\u524d\u70b9\u51fa\u53d1\u7684\u8fb9\u7684\u6743\u503c\uff09\uff0c\u7531\u4e8e\u4f18\u5148\u961f\u5217\u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u7684\u70b9\uff0c\u5176\u72b6\u6001\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\uff0c\u800c\u4e14\u5176\u62d3\u5c55\u51fa\u7684\u72b6\u6001\u4e5f\u662f\u6700\u4f18\u89e3\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\r\n\r\n\u5047\u8bbe\u70b9$x$\u5df2\u7ecf\u5f97\u5230\u4e86\u6700\u77ed\u8def\uff0c\u8bc1\u660e\u7528\u8be5\u70b9\u66f4\u65b0\u7684$y$\u4e5f\u5f97\u5230\u4e86\u6700\u77ed\u8def\r\n\r\n\u53cd\u8bc1\uff0c\u5047\u8bbe\u5b58\u5728\u8def\u5f84$x$\u2032\u2192$y$\r\n\r\n\u4f7f$Dist[y]$ \u66f4\u5c0f\uff0c\u4e14\u5728$x$\u66f4\u65b0$y$\u4e4b\u540e\uff0c\u90a3\u4e48\u6709$Dist[x$\u2032$]+w[x]<Dist[x]+w[x]$\uff0c\u56e0\u4e3a$x$\u2032\u5728$x$\u4e4b\u540e\uff0c\u6709$Dist[x$\u2032$]+w[x$\u2032$]\u2265Dist[x]+w[x]$\uff0c\u4e24\u5f0f\u77db\u76fe\uff0c\u8fd0\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u53ef\u77e5\u4e0a\u8ff0\u7ed3\u8bba\u6210\u7acb\uff0c\u4ee5\u53ca\u8d77\u70b9$s$\u5230\u6bcf\u4e00\u70b9\u7684\u6700\u77ed\u8def\u5f84\u5c31\u662f$Dist[i]$\r\n\r\n\u5176\u5b9e\u548c\u98de\u98de\u4fa0\u7684\u8bc1\u660e\u662f\u4e00\u6837\u7684\uff08\u6240\u4ee5\u6211\u5c31\u76f4\u63a5\u642c\u8fd0\u4e862333\uff09\u3002\r\n\r\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u5230\u5c31\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\uff0c\u6240\u4ee5\u53ea\u8981\u627e\u5230\u9700\u8981\u7684\u70b9\u5c31\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u4e86\u3002\r\n\r\n\u4ee3\u7801\u5982\u4e0b\uff1a\r\n```\r\n#include<bits/stdc++.h>\r\n#define ll long long\r\n#define INF 0x7f7f7f7f\r\nusing namespace std;\r\nconst int maxn = 105;\r\nll x[50010],Ans1,Su[5010],Cnt,Ans,n,X,Dist[5010],w[5010],Da;\r\nbool Pd[5010],Used[5010];\r\nint T,u,v,Head[5010],To[15000010],Next[15000010];\r\nqueue<ll> Q;\r\nstruct Node {\r\n    int p,Dis;\r\n} Now,N;\r\nbool operator <(Node x,Node y) {\r\n    return x.Dis>y.Dis;\r\n}\r\npriority_queue<Node> PQ;\r\ntemplate <typename T>\r\ninline int Read(T &x) {\r\n    x=0;\r\n    int f=1;\r\n    char c=getchar();\r\n    while(c!='-'&&c>'9'&&c<'0')\r\n        c=getchar();\r\n    for(; !isdigit(c); c=getchar())\r\n        if(c=='-')\r\n            f=-f;\r\n    for(; isdigit(c); c=getchar())\r\n        x=x*10+c-'0';\r\n    x*=f;\r\n    if(c=='\\n')\r\n        return 1;\r\n    else\r\n        return 0;\r\n}\r\ninline void Write(long long x) {\r\n    if(x<0) {\r\n        putchar('-');\r\n        x=-x;\r\n    }\r\n    if(x>9) {\r\n        Write((x-x%10)/10);\r\n    }\r\n    putchar(x%10+'0');\r\n}\r\n//\u8fd9\u56de\u662f\u6b63\u5e38\u7684\u5feb\u901f\u8f93\u5165\u8f93\u51fa\r\ninline ll Gcd(ll a, ll b) {\r\n    if(b == 0)\r\n        return a;\r\n    else\r\n        return Gcd(b, a%b);\r\n}\r\ninline void Add(int a,int b) {\r\n    To[++Cnt]=a;\r\n    Next[Cnt]=Head[b];\r\n    Head[b]=Cnt;\r\n    To[++Cnt]=b;\r\n    Next[Cnt]=Head[a];\r\n    Head[a]=Cnt;\r\n}\r\nvoid Dijkstra(int x) {\r\n    Dist[x]=w[x];\r\n    Now.Dis=w[x];\r\n    Now.p=x;\r\n    PQ.push(Now);\r\n    while(!PQ.empty()) {\r\n        Now=PQ.top();\r\n        PQ.pop();\r\n        if(!Pd[Now.p]) {\r\n            Pd[Now.p]=1;\r\n            for(int i=Head[Now.p]; i; i=Next[i]) {\r\n                if(!Pd[To[i]]&&(Dist[To[i]]>Now.Dis)) {\r\n                    if(To[i]==v){\r\n                    \tDa=Now.Dis;\r\n                        return;\r\n                    }\r\n                    Dist[To[i]]=Now.Dis;\r\n                    N.p=To[i];\r\n                    N.Dis=Dist[To[i]]+w[To[i]];\r\n                    PQ.push(N);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nint main() {\r\n    Read(T);\r\n    Read(n);\r\n    Cnt=0;\r\n    for(int i=2;i<=n;i++){\r\n    \tfor(int j=i+1;j<=n;j++){\r\n    \t\tif(Gcd(i,j)==1){\r\n    \t\t\tAdd(i,j);\r\n            }\r\n        }\r\n    }\r\n    while(T--) {\r\n        fill(Dist,Dist+n+5,INF);\r\n        memset(Pd,0,sizeof(Pd));\r\n        Read(u);\r\n        Read(v);\r\n        for(int i=1; i<=n; i++) {\r\n            Read(w[i]);\r\n        }\r\n        Dijkstra(u);\r\n        Write(Da);\r\n        putchar('\\n');\r\n        while(!PQ.empty()){\r\n        \tPQ.pop();\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n```",
        "postTime": 1542150646,
        "uid": 107547,
        "name": "\u03c0\u9171",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5037 \u3010\u6293\u6355\u3011"
    },
    {
        "content": "[P5037 \u6293\u6355 \u306e \u9898\u76ee\u4f20\u9001\u95e8\u3002](https://www.luogu.com.cn/problem/P5037)\n\n## \u9898\u76ee\n> \u6709\u4e00\u70b9\u6570\u4e3a $n$ \u7684\u56fe\uff0c\u6bcf\u6b21\u53ea\u80fd\u53bb\u4e0e\u672c\u70b9\u4e92\u8d28\u7684\u70b9\uff0c\u6bcf\u6b21\u4ece\u70b9\u51fa\u53d1\u9700\u8981 $c_i$ \u70b9\u4f53\u529b\uff0c\u6c42\u4ece\u70b9 $s$ \u5230\u70b9 $e$ \u6240\u8017\u8d39\u7684\u6700\u5c0f\u4f53\u529b\u3002\n\n## \u601d\u8def\u7b80\u6790\n\n\u9996\u5148\u8981\u624b\u52a8\u8fde\u8fb9\uff0c\u70b9 $1$ \u4e0d\u53ef\u8fde\uff0c\u56e0\u4e3a\u8fde\u4e86\u5c31\u4f1a\u5931\u8d25 ~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u5f04\u4e2a\u70b9 $1$~~\u3002\n\n\u5269\u4e0b\u7684\u8fb9\u4e5f\u4e0d\u662f\u6bcf\u4e2a\u90fd\u80fd\u8fde\u3002\n\n\u6bcf\u6761\u8d70\u5eca\u8981\u8dd1\u4e00\u79d2\uff0c\u6bcf\u4e2a\u624b\u4e0b\u80fd\u8bb0\u4f4f\u4e00\u79d2\u7684\u4e8b\uff0c\u6240\u4ee5\u4e0d\u80fd\u5728\u4e24\u79d2\u5185\u8ba9\u540c\u4e00\u4e2a\u624b\u4e0b\u770b\u5230\uff0c\u5219\u6bcf\u6b21\u5fc5\u987b\u53bb\u4e92\u8d28\u7684\u70b9\u3002\n\nEg\uff1a$2$ -> $3$\uff0c$2$ \u4e0d\u80fd\u53bb $4$\uff0c\u56e0\u4e3a $2$ \u53f7\u624b\u4e0b\u540c\u65f6\u770b\u7740\u70b9 $2$ \u548c\u70b9 $4$\u3002\n\n\u8bf4\u53e5\u95f2\u8bdd\uff1a\u4f5c\u8005\u672c\u6765\u597d\u50cf\u662f\u5411\u5361\u66b4\u529b\u8ba9\u6784\u9020\u8fc7\u7684\uff0c\u7ed3\u679c\u4ed6\u7684\u6784\u9020\u6bd4\u66b4\u529b\u8fd8\u6162\u3002\n\n\u7136\u540e\u8dd1 heap+dij\u3002\n\n---\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u8fd9\u91cc\u7684 dij \u4e0d\u662f\u666e\u901a\u7684 dij\u3002\n\n\u6bcf\u6b21\u51fa\u623f\u95f4\u9700\u8981\u4f53\u529b\uff0c\u6240\u4ee5\u5728\u5165\u961f\u7684\u65f6\u5019\u8981\u52a0\u4e0a\u51fa\u623f\u95f4\u7684\u4f53\u529b\u503c\u3002\n\n# _CODE_\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define pii pair <int, int>\n#define mp(x, y) make_pair(x, y)\nconst int man = 4.5e3+10;\nclass Graph {\npublic:\n    int hed[man], dis[man], len;\n    int nxt[man*man], to[man*man];\n    void Ins (int u, int v) {\n        to[++len] = v;\n        nxt[len] = hed[u];\n        hed[u] = len;\n        return ;\n    }\n} G;\n\nint T, n, s, e;\nint dis[man], vis[man];\nvoid dijkstra (int s) {\n    priority_queue <pii, vector <pii >, greater <pii > > q;\n    memset(dis, 0x3f, sizeof(dis));\n    memset(vis, 0, sizeof(vis));\n    dis[s] = 0;\n    q.push(mp(G.dis[s], s));\n    while (q.size()) {\n        int x = q.top().first, y = q.top().second;\n        q.pop(), vis[y] = 1;\n        for (int i = G.hed[y]; i; i = G.nxt[i]) {\n            int v = G.to[i];\n            if (vis[v]) continue;\n            if (dis[v] > x) {\n                dis[v] = x;\n                if (v == e) {\n                    printf(\"%d\\n\", dis[v]);\n                    return ;\n                } q.push(mp(dis[v]+G.dis[v], v));\n            }\n        }\n    } puts(\"-1\");\n    return ;\n}\nint main () {\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"test.in\", \"r\", stdin);\n\t\tfreopen(\"test.out\", \"w\", stdout);\n\t#endif\n    scanf(\"%d%d\", &T, &n);\n    for (int i = 2; i < n; ++ i) \n        for (int j = i+1; j <= n; ++ j) \n            if (__gcd(i, j) == 1) G.Ins(i, j), G.Ins(j, i);\n    while (T --) {\n        scanf(\"%d%d\", &s, &e);\n        for (int i = 1; i <= n; ++ i) scanf(\"%d\", G.dis+i);\n        dijkstra(s);\n    }\n    return 0;\n}\n```\n# E.N.D.",
        "postTime": 1667483000,
        "uid": 347089,
        "name": "STA_Morlin",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 - P5037"
    }
]