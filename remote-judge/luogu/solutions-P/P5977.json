[
    {
        "content": "\u7eaa\u5ff5\u4e00\u4e0b\uff0c\u8c03\u4e86\u6574\u6574\u4e24\u5468\u3002\n\n\u672c\u9898\u9898\u610f\u975e\u5e38\u6e05\u6670\uff0c\u6545\u4e0d\u63d0\u4f9b\u9898\u610f\u7b80\u8ff0\u3002\n\n## Solution\n\u6ce8\u610f\u5230 $20\\times 4<111$\uff0c\u6240\u4ee5\u5373\u4f7f\u82b1 $4$ \u4e2a\u70b9\u5305\u4f4f\u4e00\u68f5\u6811\u4e5f\u662f\u503c\u7684\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5305\u4f4f\u6700\u591a\u7684\u6811\uff0c\u8fd9\u6837\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u6240\u6709\u70b9\u6c42\u4e2a\u51f8\u5305\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u6811\uff0c\u5982\u679c\u5b83\u51f8\u5305\u6240\u6709\u8fb9\u7684\u540c\u4e00\u4fa7\uff0c\u5219\u5b83\u4e00\u5b9a\u5728\u51f8\u5305\u5185\uff0c\u62ff\u4e00\u4e2a\u4e1c\u897f\u5b58\u4e0b\u6240\u6709\u7684\u6811\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u6709\u4e00\u4e9b\u70b9\u53ef\u80fd\u662f\u65e0\u7528\u7684\uff0c\u5220\u53bb\u4e4b\u540e\u4ecd\u7136\u53ef\u4ee5\u5305\u4f4f\u6240\u6709\u6811\u3002\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7b97\u6cd5\uff1a\u5bf9\u4e8e\u51f8\u5305\u4e0a\u7684\u6bcf\u76f8\u90bb\u4e24\u6761\u8fb9\uff08\u8bbe\u4e3a $\\overrightarrow{AB},\\overrightarrow{BC}$\uff09\uff0c\u6211\u90fd\u679a\u4e3e\u4e00\u6b21\u3002\u5982\u679c\u8fd9\u4e2a\u4e09\u89d2\u5f62\u5185\u90e8\u5e76\u6ca1\u6709\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5220\u6389 $B$ \u8fd9\u4e2a\u70b9\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u975e\u5e38\u4f18\u79c0\uff0c\u8fbe\u5230\u4e86 $O(nm)$\u3002\n\n\u4f46\u662f\u5f88\u9057\u61be\uff0c\u6b63\u786e\u6027\u662f\u9519\u7684\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/p0blpts4.png?x-oss-process=image/resize,m_lfit,h_400,w_500)\n\n\u6700\u4f18\u7684\u9009\u62e9\u662f\u4fdd\u7559 $A,C,D$\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4ece $B$ \u5f00\u59cb\u626b\uff0c\u4f60\u4f1a\u53d1\u73b0 $\\triangle ABE$ \u91cc\u6839\u672c\u5c31\u6ca1\u6709\u6811\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u5c31\u628a $A$ \u5e72\u6389\u4e86\uff0c\u600e\u4e48\u5f04\u90fd\u5f97\u4e0d\u5230\u6700\u4f18\u89e3\u3002\n\n\u770b\u5230 $n,m\\leq 100$\uff0c\u90a3\u6211\u4eec\u5c31\u8003\u8651\u4e00\u4e2a\u66b4\u529b\u4e00\u4e9b\u7684\u7b97\u6cd5\u3002\n\n\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c\u6240\u6709\u6811\u51fa\u73b0\u5728\u4e00\u4e2a\u5411\u91cf\u7684\u540c\u4e00\u4fa7\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5411\u91cf\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u5728\u6700\u540e\u7684\u51f8\u5305\u5185\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u4efb\u610f\u4e24\u4e2a\u70b9\u6784\u6210\u5411\u91cf\uff0c\u5982\u679c\u5408\u6cd5\u6211\u4eec\u5c31\u5c06\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u8d4b\u4e3a $1$\uff0c\u5426\u5219\u8bbe\u4e3a\u6b63\u65e0\u7a77\u3002\n\n\u7136\u540e\u5c31\u662f\u4e00\u4e2a Floyd \u6c42\u6700\u5c0f\u73af\u95ee\u9898\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n+n^2m+n^3)$\uff0c\u5bf9\u4e8e $n,m\\leq 100$ \u7684\u6570\u636e\u662f\u975e\u5e38\u677e\u7684\u3002\n\n\u5f53\u7136\uff0c\u4e0a\u9762\u90a3\u4e2a\u9519\u8bef\u7684\u505a\u6cd5\uff0c\u5982\u679c\u4f60\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u5f00\u59cb\u8dd1\u4e00\u904d\uff0c\u5927\u6982\u7387\u662f\u80fd\u5f97\u5230\u6700\u4f18\u89e3\u7684\uff0c\u4f46\u662f\u4f30\u8ba1\u8fd8\u662f\u80fd hack\uff0c\u8fd9\u4e2a\u6211\u4e0d\u592a\u6e05\u695a\uff0c\u6709\u70b9\u83dc qwq\u3002\n\n\u6700\u540e\u662f\u4e00\u4e9b\u963b\u788d\u4e86\u6211\u5f88\u4e45\u7684\u5751\u70b9\uff1a\n- \u6700\u540e\u7684\u70b9\u4e0d\u4e00\u5b9a\u5168\u662f\u5728\u4e00\u5f00\u59cb\u6c42\u7684\u51f8\u5305\u5185\uff0c\u6240\u4ee5\u5efa\u56fe\u7684\u65f6\u5019\u4e0d\u80fd\u53ea\u679a\u4e3e\u51f8\u5305\u4e0a\u7684\u70b9\u800c\u4e0d\u679a\u4e3e\u51f8\u5305\u5185\u90e8\u7684\u70b9\uff1b\n- \u5efa\u56fe\u4e0d\u8981\u5efa\u53cc\u5411\u8fb9\uff0c\u56e0\u4e3a\u5411\u91cf\u5e26\u65b9\u5411\uff0c\u53cd\u8fc7\u6765\u662f\u4e0d\u5bf9\u7684\uff1b\n- \u5982\u679c\u4f60 94 \u5206\uff0c\u8bf7\u6ce8\u610f\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6240\u6709\u6811\u90fd\u4e0d\u5728\u51f8\u5305\u5185\uff0c\u6700\u5c0f\u4ee3\u4ef7\u663e\u7136\u662f\u4e0d\u9009\u70b9\uff0c\u76f4\u63a5\u8f93\u51fa $111\\times m$\u3002\u4f46\u662f\u6211\u4eec\u7684 Floyd \u662f**\u4e0d\u5141\u8bb8\u4e0d\u9009\u70b9**\u7684\uff0c\u5b83\u4f1a\u8dd1\u51fa\u6765**\u9009\u4e24\u4e2a\u70b9\u6784\u6210\u4e00\u4e2a\u73af**\u3002\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u7279\u5224\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst double eps = 1e-8;\nconst int N = 100 + 10;\nint n, m, idx = -1, hd;\nint g[N][N];\nstruct node{\n\tdouble x, y;\n} p[N], tree[N];\nnode st[N];\nvector<int> inside;\n\ndouble getcro(node oo, node pp, node qq){\n\treturn (pp.x - oo.x) * (qq.y - oo.y) - (qq.x - oo.x) * (pp.y - oo.y);\n}\n\ndouble dis(node pp, node qq){\n\treturn sqrt((pp.x - qq.x) * (pp.x - qq.x) + (pp.y - qq.y) * (pp.y - qq.y));\n}\n\nbool cmp(node a, node b){\n\tdouble now = getcro(p[1], a, b);//\u53c9\u79ef\u6c42\u9762\u79ef \n\tif(now < 0 || (now == 0 && dis(p[1], a) < dis(p[1], b)))\n\t\treturn 1;\n\treturn 0;\n}\n\nbool isleft(node u, node s, node t){\n\tdouble f = getcro(u, s, t);\n\treturn f >= eps;\n}\n\nbool possible(node u, node v){\n\tfor(int i=0;i<inside.size();i++){\n\t\tnode pp = tree[inside[i]];\n\t\tif(!isleft(pp, v, u))\n\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%lf%lf\", &p[i].x, &p[i].y);\n\t\tif(idx == -1 || p[i].y < p[idx].y)\n\t\t\tidx = i;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%lf%lf\", &tree[i].x, &tree[i].y);\n\tswap(p[1], p[idx]);\n\tsort(p + 2, p + 1 + n, cmp);\n\tst[++hd] = p[1];\n\tfor(int i=2;i<=n;i++){\n\t\twhile(hd > 1 && !isleft(st[hd - 1], p[i], st[hd]))\n\t\t\t--hd;\n\t\tst[++hd] = p[i];\n\t}\n\tint cnt = 0, ans = 1e9;\n\tst[++hd] = p[1];\n\tfor(int i=1;i<=m;i++){\n\t\tbool f = 1;\n\t\tfor(int j=hd;j>1;j--){\n\t\t\tif(!isleft(st[j - 1], tree[i], st[j])){\n\t\t\t\tf = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(f)\n\t\t\tinside.push_back(i), ++cnt;\n\t}\n\tif(!cnt)\n\t\treturn printf(\"%d\\n\", m * 111), 0; \n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tnode u = p[i], v = p[j];\n\t\t\tif(i != j && possible(u, v))\n\t\t\t\tg[i][j] = 1;\n\t\t\telse\n\t\t\t\tg[i][j] = 1e9;\n\t\t}\n\t}\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tg[i][j] = min(g[i][j], g[i][k] + g[k][j]);\n\tfor(int i=1;i<=n;i++)\n\t\tans = min(ans, g[i][i]);\n\tprintf(\"%d\\n\", (m - cnt) * 111 + ans * 20);\n\treturn 0;\n}\n```\n",
        "postTime": 1684492885,
        "uid": 363036,
        "name": "chlchl",
        "ccfLevel": 5,
        "title": "P5977 [CEOI2008] Fence \u9898\u89e3"
    }
]