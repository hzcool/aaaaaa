[
    {
        "content": "[\u5c60\u9f99\u5b9d\u5200,\u70b9\u51fb\u5c31\u9001,\u4e00\u5200999](https://www.cnblogs.com/penth/p/10252032.html)\n\nProblem\n-------\n\n\u9898\u610f\u6982\u8981\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a$n$\u7684\u6392\u5217\uff0c\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u96c6\u5408$S$\u4f7f\u8fd9\u4e2a\u96c6\u5408\u5185\u90e8\u5143\u7d20\u6392\u5230\u81ea\u5df1\u5728\u6574\u4e2a\u5e8f\u5217\u4e2d\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\uff08\u5373\u5bf9\u4e8e\u96c6\u5408$S$\u5185\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20$i$\uff0c\u4f7f\u5176\u6392\u5230\u7b2c$i$\u53f7\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u6574\u4e2a\u6392\u5217\u5728\u6392\u5e8f\u540e\u4e3a\u4e0a\u5347\u5e8f\u5217\u3002\u6c42\u6ee1\u8db3\u8fd9\u6837\u6761\u4ef6\u7684\uff0c\u4e14\u96c6\u5408\u5927\u5c0f\u6700\u5c0f\u7684\u96c6\u5408\u4e2d\u5b57\u5178\u5e8f\u7b2c$k$\u5c0f\u7684\u96c6\u5408\uff08\u53ef\u80fd\u603b\u7ed3\u4e0d\u5230\u4f4d\uff0c\u770b\u539f\u9898\u9762\u5427\uff09\n\n$n\\leq 10^5$\n\nSolution\n-------\n\n\u4e0d\u96be\u53d1\u73b0\u51fa\u9898\u4eba\u8d39\u5c3d\u5fc3\u601d\u5199\u7684\u9898\u9762\u5c31\u662f\u5728\u5f3a\u70c8\u6697\u793a\u9009\u53d6\u4e00\u4e2a\u96c6\u5408\u7b49\u4ef7\u4e8e\u5c06\u8fd9\u4e2a\u96c6\u5408\u5185\u6240\u6709\u5143\u7d20\u6392\u5230\u81ea\u5df1\u8be5\u5904\u4e8e\u7684\u4f4d\u7f6e\uff08\u5373\u5143\u7d20$i$\u5e94\u8be5\u5728\u4f4d\u7f6e$i$\uff09\n\n\u8fdb\u4e00\u6b65\u53d1\u73b0\u96c6\u5408\u5185\u7684\u5143\u7d20\u5f88\u81ea\u89c9\u7684\u5230\u4e86\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u800c\u96c6\u5408\u5916\u7684\u5143\u7d20\u4e0d\u4f1a\u66f4\u6539\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u4e3a\u4e86\u4f7f\u6700\u7ec8\u6574\u4e2a\u6392\u5217\u5355\u8c03\u9012\u589e\uff0c\u5373\u8981\u6c42\u96c6\u5408\u5916\u7684\u5143\u7d20\u5fc5\u987b\u6ee1\u8db3\u5728\u4e00\u5f00\u59cb\u5c31\u662f\u5355\u8c03\u9012\u589e\u7684\n\n\u6c42\u5b57\u5178\u5e8f\u7b2c$k$\u5c0f\u7684\u6ee1\u8db3\u9898\u610f\u7684\u96c6\u5408\uff0c\u53d6\u53cd\u4e00\u4e0b\uff0c\u5c31\u662f\u6c42\u5e8f\u5217\u4e2d\u5b57\u5178\u5e8f\u7b2c$k$\u5927\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n\n\uff08\u81f3\u6b64\u9898\u76ee\u6a21\u578b\u8f6c\u5316\u5b8c\u6210\uff09\n\n------\n\n\u73b0\u5728\u76ee\u6807\u4e3a\u6c42\u5b57\u5178\u5e8f\u7b2c$k$\u5927\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\n\n\u5728\u7ee7\u7eed\u4e4b\u524d\u5efa\u8bae\u5148\u5c06[\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u6570\u91cf](http://www.51nod.com/Challenge/Problem.html#!#problemId=1376)\u89e3\u51b3\uff1a\n\n\u8bbe\u7f6e$f_i$\u8868\u793a\u4ee5\u6743\u503c\u4e3a$i$\u7ed3\u5c3e\u7684$LIS$\u7684\u957f\u5ea6\u548c\u6570\u91cf\uff0c\u5219\u6743\u503c$x$\u4ece$f_1...f_{x-1}$\u95f4\u8f6c\u79fb\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u7f00\u6700\u5927\u503c\u548c\u6570\u91cf\u5373\u53ef$O(n\\log n)$\u89e3\u51b3\n\n------\n\n\u5229\u7528\u4e0a\u9762\u8fd9\u9898\u7684\u601d\u60f3\uff0c\u5df2\u7ecf\u53ef\u4ee5\u6c42\u5f97\u4ee5\u6bcf\u4e2a\u5143\u7d20\u5f00\u5934\u7684$LIS$\u957f\u5ea6\u548c\u6570\u91cf\n\n\u8fd9\u9898\u548c\u4e0a\u9762\u8fd9\u9898\u867d\u6709\u4e0d\u540c\uff0c\u4f46\u672c\u8d28\u7c7b\u4f3c\uff0c\u60f3\u60f3\u4e00\u822c\u7ebf\u6bb5\u6811\u6c42\u7b2c $k$ \u5927\u7684\u8fc7\u7a0b\uff0c\u6b63\u662f\u4f9d\u6b21\u786e\u5b9a\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u800c\u4e3a\u4e86\u786e\u5b9a\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u5c31\u9700\u8981\u7528\u5230\u6240\u6709\u8282\u70b9\u5b50\u6811\u548c\n\n\u540c\u7406\uff0c\u5047\u8bbe\u5f53\u524d\u8981\u6c42\u7684\u5e8f\u5217\u7684$LIS$\u957f\u5ea6\u4e3a $t$\uff0c\u5219\u6c42\u7b2c$k$\u5927$LIS$\u7684\u4e00\u4e2a\u601d\u60f3\u5c31\u662f\u5148\u786e\u5b9a\u7b2c$1$\u4e2a\u6570\uff0c\u518d\u5728\u786e\u5b9a\u7b2c$1$\u4e2a\u6570\u7684\u57fa\u7840\u4e0a\u786e\u5b9a\u4e0b\u4e00\u4e2a\u6570\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\u53ef\u4ee5\u6700\u7ec8\u786e\u5b9a$LIS$\u7684\u6bcf\u4e00\u4f4d\n\n\u7ec6\u5316\u4e00\u4e0b\uff0c\u5c31\u662f\u5c06\u6240\u6709\u53ef\u80fd\u4f5c\u4e3a$LIS$\u7684\u7b2c$i$\u4f4d\u7684\u6570 \u653e\u8fdb\u7b2c$i$\u4e2avector\u91cc\uff0c\u5c06\u6bcf\u4e2avector\u5185\u90e8\u8fdb\u884c\u5143\u7d20\u6392\u5e8f\uff0c\u5728\u786e\u5b9a\u6bcf\u4e00\u4f4d\u65f6\u4ece\u5927\u5230\u5c0f\u786e\u5b9a\uff0c\u82e5\u5f53\u524d\u503c\u540e\u9762\u7275\u626f\u7684$LIS$\u6570\u91cf\u5c0f\u4e8e$k$\uff0c\u5219\u5c06$k$\u51cf\u53bb\u8fd9\u4e2a\u6570\u91cf\u7136\u540e\u68c0\u67e5\u4e0b\u4e00\u4e2a\u503c\uff0c\u5426\u5219\u5c06\u8fd9\u4e2a\u503c\u786e\u5b9a\u4e0b\u6765\u5e76\u5f00\u59cb\u786e\u8ba4\u4e0b\u4e00\u4f4d\n\n\uff08\u503c\u5f97\u6ce8\u610f\u7684\u4e00\u70b9\uff0c\u82e5\u6c42$LIS$\u7b2c$i$\u5c42\u9009\u5b9a\u4e86\u4f4d\u7f6e$R$\u7684\u5143\u7d20\uff0c\u5219\u63a5\u4e0b\u6765\u90fd\u4e0d\u80fd\u9009\u62e9$R$\u5de6\u8fb9\u7684\u5143\u7d20\uff09\n\nCode\n-------\n\n\u5173\u4e8e\u4ee3\u7801\u4e2d\u7684\u4e00\u4e9b\u7591\u95ee\uff1a\n\n- \u6211\u6ca1\u6709\u7528vector\uff0c\u800c\u662f\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u66ff\u4ee3\n- \u7531\u4e8e\u6bcf\u4e2avector\u91cc\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6309\u7167\u4f4d\u7f6e\u9012\u589e\u800c\u6743\u503c\u9012\u51cf\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u6392\u5e8f\n- \u5f88\u591a\u4eba\u7528\u7ebf\u6bb5\u6811\uff0c\u800c\u8fd9\u9898\u53ea\u9700\u8981\u6811\u72b6\u6570\u7ec4\u5373\u53ef\n- \u5728\u6c42\u5b8c\u4ee5\u6bcf\u4e2a\u70b9\u5f00\u59cb\u7684$LIS$\u540e\u6811\u72b6\u6570\u7ec4\u5c31\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u8282\u7ea6\u5927\u91cf\u65f6\u95f4\n\n```cpp\n#include <bits/stdc++.h>\ntypedef long long ll;\n\ninline void read(int&x){\n\tchar c11=getchar();x=0;while(!isdigit(c11))c11=getchar();\n\twhile(isdigit(c11))x=x*10+c11-'0',c11=getchar();\n}\n\nconst int N=101000;\nstruct Edge{int v,nxt;}e[N];\nint a[N],chs[N],head[N];\nint n,_;ll k;\n\nconst ll lim=1e18;\n\nstruct node{\n\tint v;ll c;\n\tinline node(){}\n\tfriend inline void operator + (node&A,const node B){\n\t\tif(A.v<B.v)A.v=B.v,A.c=B.c;\n\t\telse if(A.v==B.v)A.c=std::min(lim,A.c+B.c);\n\t}\n}d[N],g[N],cl;\n\n#define lb(x) (x&(-x))\n\ninline node qy(int x){node p=cl;for(x;x<=n+1;x+=lb(x))p+d[x];return p;}\ninline void add(int x,node y){for(;x;x-=lb(x))d[x]+y;}\ninline void ae(int u,int v){e[++_].v=v,e[_].nxt=head[u],head[u]=_;}\n\nint main(){\n\tscanf(\"%d%lld\",&n,&k);\n\tfor(int i=1;i<=n;++i)read(a[i]);\n\tcl.c=1,add(n+1,cl),cl.c=0;\n\tfor(int i=n;i;--i){\n\t\tg[i]=qy(a[i]);\n\t\t++g[i].v;\n\t\tadd(a[i],g[i]);\n\t}\n\tfor(int i=n;i;--i)ae(g[i].v,i);\n\tfor(int stp=qy(1).v,R=0;stp;--stp)\n\tfor(int i=head[stp],v;i;i=e[i].nxt){\n\t\tv=e[i].v;\n\t\tif(g[v].c<k)k-=g[v].c;\n\t\telse {\n\t\t\tchs[a[v]]=true;\n\t\t\twhile(R<v)g[R++]=cl;\n\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",n-qy(1).v);\n\tfor(int i=1;i<=n;++i)\n\t\tif(!chs[i])printf(\"%d\\n\",i);\n\treturn 0;\n}\n```",
        "postTime": 1547122663,
        "uid": 22112,
        "name": "Mirach",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5156 \u3010[USACO18DEC]Sort It Out\u3011"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P5156)\n\n## \u5206\u6790\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u884c\u96c6\u5408 $A$\uff0c\u5fc5\u7136\u6709\u4e0d\u5728 $A$ \u4e2d\u7684\u6240\u6709\u6570\u5728\u539f\u5e8f\u5217\u4e2d\u5355\u8c03\u589e\uff0c\u6545\u539f\u9898\u8f6c\u5316\u4e3a\u6c42\u7b2c $K$ \u5927\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u6700\u540e\u8f93\u51fa\u8865\u96c6\u3002\n\n\u7528\u6811\u72b6\u6570\u7ec4\u5f88\u5bb9\u6613\u6c42\u51fa\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\uff0c\u7136\u540e\u518d\u6c42\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u8fd9\u662f\u91cd\u70b9\u3002\n\n\u6211\u4eec\u7528 $a_i$ \u8868\u793a\u539f\u5e8f\u5217\u3001$LIS_i$ \u8868\u793a\u7b2c $i$ \u4f4d\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u3001$f_i$ \u8868\u793a\u7b2c $i$ \u4f4d\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a$f_i = \\sum_{j = i + 1}^n [LIS_j + 1 = LIS_i\\ \\text{and}\\ a_j > a_i] f_j$\uff0c\u66b4\u529b\u7b97\u662f $O(n^2)$ \u7684\uff0c\u9700\u8981\u66f4\u4f18\u79c0\u7684\u89e3\u6cd5\u3002\n\n\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 $n$ \u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u76f8\u540c $LIS$ \u7684\u70b9\u96c6\u6784\u6210\u7684 $f$ \u7684\u5b50\u5e8f\u5217\u7684\u540e\u7f00\u548c\uff0c\u7136\u540e\u518d\u5bf9\u6bcf\u4e00\u4e2a $LIS$ \u76f8\u540c\u7684\u70b9\u96c6\u5173\u4e8e $a_i$ \u8fdb\u884c\u964d\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u679a\u4e3e $a_i$ \u7684\u540c\u65f6\u7528 $\\log n$ \u7684\u590d\u6742\u5ea6\u8ba1\u7b97\u51fa $\\sum_{j = i + 1}^n [LIS_j + 1 = LIS_i] f_j$ (\u679a\u4e3e $a_i$ \u90e8\u5206\u8be6\u89c1\u540e\u6587)\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u662f\u8fc7\u5f97\u53bb\u7684\uff0c\u4f46\u662f\u7a7a\u95f4\u662f $O(n^2)$ \u7684\uff0c\u663e\u7136\u4f1a\u70b8\uff0c\u6240\u4ee5\u8003\u8651\u7528\u66f4\u5f3a\u7684\u6570\u636e\u7ed3\u6784\u3002\u8003\u8651\u5230\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u65f6\u6bcf\u4e2a\u70b9\u96c6\u662f\u79bb\u6563\u7684\uff0c\u603b\u7684\u70b9\u6570\u4e3a $n$\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6765\u4f18\u5316\u6389\u8fd9\u4e00\u90e8\u5206\u7684\u7a7a\u95f4\uff0c\u7136\u540e\u5c31\u80fd\u505a\u5230\u7a7a\u95f4 $O(n\\log n)$ \u65f6\u95f4 $O(n \\log n)$ \u4e86\u3002\n\n\u518d\u56de\u5934\u6765\u770b\u679a\u4e3e\u7684\u90e8\u5206\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e $LIS$ \u70b9\u96c6\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u70b9\u96c6\u5185\u7684\u70b9\u5173\u4e8e $a_i$ \u7684\u5927\u5c0f\u964d\u5e8f\u6392\u5e8f\uff0c\u56e0\u4e3a\u662f\u964d\u5e8f\u6392\u5e8f\uff0c\u6240\u4ee5\u4e4b\u524d\u4e0a\u4e00\u4e2a\u53d6\u5230\u7684\u70b9\u4e00\u5b9a\u662f\u5c0f\u4e8e\u5f53\u524d\u679a\u4e3e\u7684\u70b9\u7684\u3002\u7136\u540e\u6ce8\u610f\u5728\u53d6\u70b9\u7684\u65f6\u5019\u5982\u679c\u5728\u539f\u5e8f\u5217\u4e0a\u73b0\u53d6\u7684\u70b9\u5728\u4e0a\u4e00\u4e2a\u70b9\u4e4b\u524d\u662f\u4e00\u5b9a\u4e0d\u53ef\u80fd\u7684\uff0c\u62ff\u4e2a\u53d8\u91cf\u6807\u8bb0\u5f53\u524d\u4f4d\u7f6e\u5373\u53ef\uff0c\u63a5\u4e0b\u6765\u62fc\u63a5\u5c31\u597d\u4e86\u3002\u6ce8\u610f\u6700\u540e\u8f93\u51fa\u7684\u662f\u5347\u5e8f\u7684\u53cd\u96c6\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f $f_i$ \u53ef\u80fd\u4f1a\u7206\u51fa `long long`\uff0c\u6240\u4ee5\u5f53 $f_i$ \u8fc7\u5927\u7684\u65f6\u5019\u8ba9\u5b83\u7b49\u4e8e $k$ \u7684\u4e0a\u9650\u5373\u53ef\u3002\n\n~~\u5199\u5b8c\u9898\u89e3\u770b\u4e86\u4e0b\u522b\u4eba\u7684\uff0c\u6211\u8fd9\u4e2a\u5c31\u7b97\u662f\u6bd4\u8f83\u8822\u7684\u89e3\u6cd5\u4e86\uff0c\u7801\u91cf\u4e0a\u5c31\u8f93\u7ed9\u522b\u4eba\u4e86\u3002~~\n\n## \u4ee3\u7801\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 100005;\nconst long long INF = 1e18;\n\nstruct reader {\n\ttemplate <typename Type>\n\treader & operator >> (Type & ret) {\n\t\tint f = 1; ret = 0; char ch = getchar ();\n\t\tfor (;!isdigit (ch); ch = getchar ()) if (ch == '-') f = -f;\n\t\tfor (; isdigit (ch); ch = getchar ()) ret = (ret * 10) + ch - '0';\n\t\tret *= f; return * this;\n\t}\n} fin;\n\nint n, m;\nlong long k;\nint a[maxn], b[maxn];\nint lis[maxn];\n\nint T[maxn];\nint get (int id) {\n\tint ret = 0;\n\tfor (; id >= 1; id -= id & -id) ret = max (ret, T[id]);\n\treturn ret;\n}\nvoid put (int id, int num) {\n\tfor (; id <= n; id += id & -id) T[id] = max (T[id], num);\n\treturn ;\n}\n\n// Segment Tree\n\nstruct Segment {\n\tlong long sum;\n\tint l, r, ls, rs;\n} p[maxn << 6];\nint rot[maxn], now;\n\nint ispos (int & pos, int ll, int rr) {\n\tif (pos) return pos;\n\tp[pos = ++now] = { 0, ll, rr, 0, 0 };\n\treturn pos;\n}\n\nvoid update (int id, int pos, long long num) {\n\tif (p[id].l == pos && pos == p[id].r) return p[id].sum = num, void () ;\n\tint mid = (p[id].l + p[id].r) >> 1;\n\tif (pos <= mid) update (ispos (p[id].ls, p[id].l, mid), pos, num);\n\telse update (ispos (p[id].rs, mid + 1, p[id].r), pos, num);\n\tp[id].sum = min (INF, p[p[id].ls].sum + p[p[id].rs].sum);\n\treturn ;\n}\n\nlong long query (int id, int L, int R) {\n\tif (!id) return 0;\n\tif (L <= p[id].l && p[id].r <= R) return p[id].sum;\n\tint mid = (p[id].l + p[id].r) >> 1; long long ret = 0;\n\tif (L <= mid) ret += query (p[id].ls, L, R);\n\tif (mid < R) ret += query (p[id].rs, L, R);\n\treturn min (ret, INF);\n}\n\n// Segment Tree\n\nlong long f[maxn];\nvector < int > vec[maxn], res;\nbool vis[maxn];\n\nint main () {\n\tfreopen (\"itout.in\", \"r\", stdin);\n\tfreopen (\"itout.out\", \"w\", stdout);\n\tfin >> n >> k; now = n;\n\tfor (int i = 1; i <= n; i++) fin >> a[i], rot[i] = i, p[i].l = 1, p[i].r = n;\n\tfor (int i = n; i >= 1; i--) { // \u8ba1\u7b97 lis \u548c f \u6570\u7ec4\n\t\tput (n - a[i] + 1, lis[i] = get (n - a[i] + 1) + 1); m = max (m, lis[i]);\n\t\tupdate (rot[lis[i]], a[i], f[a[i]] = (lis[i] == 1 ? 1 : query (rot[lis[i] - 1], a[i] + 1, n)));\n\t\tvec[lis[i]].push_back (a[i]); b[a[i]] = i; // \u8fd9\u91cc\u5b58\u5230\u70b9\u96c6\u4e2d\u65f6\u5b58\u7684\u5c31\u662f a[i]\uff0c\u7136\u540e\u7528\u4e00\u4e2a b[i] \u6570\u7ec4\u6765\u56de\u6307 a[i]\n\t}\n\tfor (int i = m, pos = 0; i >= 1; i--) { // \u4ece\u5927\u5230\u5c0f\u679a\u4e3e lis \u70b9\u96c6\n\t\tsort (vec[i].begin (), vec[i].end ());\n\t\treverse (vec[i].begin (), vec[i].end ());\n\t\tfor (int j : vec[i]) {\n\t\t\tif (b[j] < pos) continue ; // \u8df3\u8fc7\u62fc\u63a5\u4e0d\u4e0a\u7684\u70b9\n\t\t\tif (k > f[j]) k -= f[j];\n\t\t\telse { vis[j] = true; pos = b[j]; break ; }\n\t\t}\n\t}\n\tprintf (\"%d\\n\", n - m); // \u6700\u540e\u662f\u53d6\u53cd\u96c6\u8f93\u51fa\n\tfor (int i = 1; i <= n; i++) if (!vis[i]) res.push_back (i);\n\tsort (res.begin (), res.end ());\n\tfor (int i : res) printf (\"%d\\n\", i);\n\treturn 0;\n}\n```",
        "postTime": 1656503773,
        "uid": 189351,
        "name": "wheneveright",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5156 [USACO18DEC]Sort It Out P"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u6709$n$\u4e2a\u4eba\u6392\u961f\uff0c\u7b2c$i$\u4e2a\u4eba\u6709\u7f16\u53f7$a_i$\u3002$a_1, a_2, \\dots, a_n$\u4e3a$1$\u5230$n$\u7684\u4e00\u4e2a\u6392\u5217\u3002\u5b9a\u4e49$\\text{sort}(x)$\u8868\u793a\u7f16\u53f7\u4e3a$x$\u7684\u4eba\u51fa\u5217\u5e76\u63d2\u5230\u961f\u4f0d\u7684\u7b2c$x$\u4e2a\u4f4d\u7f6e\u3002\u96c6\u5408$S \\in [1, n]$\u6ee1\u8db3\u9898\u610f\u5f53\u4e14\u4ec5\u5f53\u4f9d\u6b21\u8c03\u7528$\\text{sort}(i) (i \\in S)$\u540e\u961f\u4f0d\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u6392\u5217\u3002\u95ee$\\vert S \\vert$\u7684\u6700\u5c0f\u503c\u548c\u5b57\u5178\u5e8f\u7b2c$k$\u5c0f\u7684\u96c6\u5408\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u672c\u9898\u7684\u6a21\u578b\u770b\u4f3c\u96be\u4ee5\u5904\u7406\uff0c\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u521d\u6b65\u7684\u8f6c\u5316\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8c03\u7528$\\text{sort}(x)$\u5e76\u4e0d\u5f71\u54cd\u9664\u4e86$x$\u4ee5\u5916\u7684\u4eba\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408$S$\uff0c\u5bf9\u5b83\u8fdb\u884c\u64cd\u4f5c\u540e\u4e0d\u5728$S$\u4e2d\u7684\u4eba\u7684\u76f8\u5bf9\u987a\u5e8f\u4e5f\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u90a3\u4e48\u4e0d\u5728$S$\u4e2d\u7684\u4eba\u5fc5\u987b\u6784\u6210\u4e00\u4e2a\u5347\u5e8f\u7684\u5e8f\u5217\u3002\u90a3\u4e48$\\vert S \\vert$\u7684\u6700\u5c0f\u503c\u5c31\u662f$\\text{LIS}$\u7684\u957f\u5ea6\u3002\n\n\u73b0\u5728\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff1a\u6c42\u5e8f\u5217$\\text{LIS}$\u7684\u957f\u5ea6\u548c\u5b57\u5178\u5e8f\u7b2c$k$\u5927\u7684$\\text{LIS}$\u3002\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\n\n\u6211\u4eec\u5148\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u5e8f\u5217$b$\u6ee1\u8db3$b_{a_i} = i$\u3002\u4f8b\u5982\u5bf9\u4e8e\u6837\u4f8b$a = 4, 2, 1, 3$\uff0c$b = 3, 2, 4, 1$\u3002\u539f\u95ee\u9898\u7b49\u4ef7\u4e8e\u6c42\u51fa$b$\u4e0b\u6807\u5e8f\u5217\u5b57\u5178\u5e8f\u7b2c$k$\u5927\u7684$\\text{LIS}$\u3002\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\n\n\u8003\u8651\u9884\u5904\u7406\u51fa\u4f4d\u7f6e$i$\u5f00\u5934\u7684$\\text{LIS}$\u957f\u5ea6\u4ee5\u53ca$\\text{LIS}$\u4e2a\u6570\u3002\u8003\u8651\u4ece\u540e\u5f80\u524d\u5012\u63a8\u3002\u5bf9\u4e8e\u6bcf\u4e2a$i$\u7ef4\u62a4\u5f00\u5934\u4f4d\u7f6e\u5728$i$\u4e4b\u540e\u4e14\u5f00\u5934\u6570\u5b57\u4e3a$x$\u7684$\\text{LIS}$\u957f\u5ea6\u53ca$\\text{LIS}$\u4e2a\u6570\u3002\u4f4d\u7f6e$i$\u5f00\u5934\u7684\u4fe1\u606f\u5c31\u662f\u4ee5$[b_i + 1, n]$\u5f00\u5934\u7684$\\text{LIS}$\u4fe1\u606f\u5408\u5e76\u8d77\u6765\u7684\u7ed3\u679c\u3002\u56e0\u4e3a\u662f\u4e00\u4e2a\u540e\u7f00\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u628a\u6240\u6709\u4ee5\u5b83\u5f00\u5934$\\text{LIS}$\u957f\u5ea6\u4e3a$k$\u7684\u4f4d\u7f6e$i$\u5b58\u8fdb\u4e00\u4e2a$\\text{vector}$\u4e2d\u3002\n\n\u6700\u540e\uff0c\u4f7f\u7528\u8bd5\u586b\u6cd5\u7684\u601d\u60f3\u6c42\u89e3\u3002\u6bcf\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u4e0b\u6807\u6700\u5927\u7684\u4f4d\u7f6e\u4f7f\u5f97\u8fd9\u4e2a\u4f4d\u7f6e\u5408\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6bcf\u4e00\u4e2a$\\text{vector}$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$\\text{vector}$\u4ece\u5927\u5230\u5c0f\u4e0d\u65ad\u7684\u679a\u4e3e\u4e0b\u6807\u76f4\u5230\u53ef\u7528\u7684$\\text{LIS}$\u603b\u6570\u5927\u4e8e\u7b49\u4e8e$k$\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u9009\u53d6\u5f53\u524d\u679a\u4e3e\u5230\u7684\u6570\u6765\u5145\u5f53$\\text{LIS}$\u7684\u8fd9\u4e00\u4f4d\u3002\u5f53\u7136\uff0c\u6bcf\u6b21\u586b\u7684\u6570\u5fc5\u987b\u9012\u589e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8df3\u8fc7\u6bd4\u4e0a\u4e00\u4f4d\u5c0f\u7684\u6570\u6765\u505a\u5230\u8fd9\u70b9\u3002\u8bd5\u586b\u5b8c\u6bd5\u540e\u6309\u987a\u5e8f\u8f93\u51fa\u4e0d\u5728$\\text{LIS}$\u4e2d\u6570\u7684\u4e0b\u6807\u5373\u53ef\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6$O(n \\log n)$\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u4e3a\u4e86\u907f\u514d$\\text{LIS}$\u6570\u91cf\u8fc7\u5927\uff0c\u6bcf\u6b21\u6211\u4eec\u8981\u628a\u5b83\u548c\u6781\u5927\u503c\u53d6$\\min$\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\ntypedef long long ll;\nconst int maxn = 1e5;\nconst ll inf = 1e18;\nbool use[maxn + 3];\nint n, m, a[maxn + 3], b[maxn + 3];\nll k, c[maxn + 3];\n\nstruct node {\n\tint mx;\n\tll cnt;\n\tinline friend void operator += (node &a, const node &b) {\n\t\tif (a.mx < b.mx) a.mx = b.mx, a.cnt = b.cnt;\n\t\telse if (a.mx == b.mx) a.cnt = min(inf, a.cnt + b.cnt);\n\t}\n} bit[maxn + 3];\n\nvector<int> V[maxn + 3];\n\nvoid add(int x, node y) {\n\tfor (int i = x; i; i ^= i & -i) {\n\t\tbit[i] += y;\n\t}\n}\n\nnode query(int x) {\n\tnode res = {0, 1ll};\n\tfor (int i = x; i <= n; i += i & -i) {\n\t\tres += bit[i];\n\t}\n\treturn res;\n}\n\nint main() {\n\t#ifdef LOCAL\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n\t#endif\n\tscanf(\"%d %lld\", &n, &k);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d\", &a[i]);\n\t\tb[a[i]] = i;\n\t}\n\tfor (int i = n; i; i--) {\n\t\tnode res = query(b[i] + 1);\n\t\tres.mx++;\n\t\tV[res.mx].push_back(i);\n\t\tc[i] = res.cnt;\n\t\tadd(b[i], res);\n\t}\n\tm = query(1).mx;\n\tint cur = -1;\n\tfor (int i = m; i; i--) {\n\t\tfor (int j: V[i]) {\n\t\t\tif (b[j] < cur) continue;\n\t\t\tif (k <= c[j]) {\n\t\t\t\tuse[j] = true;\n\t\t\t\tcur = b[j];\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tk -= c[j];\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\", n - m);\n\tfor (int i = 1; i <= n; i++) {\n\t\tif (!use[i]) printf(\"%d\\n\", i);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547373378,
        "uid": 47033,
        "name": "xianglingao",
        "ccfLevel": 0,
        "title": "\u3010USACO 2018 Dec Plat\u3011Sort It Out"
    },
    {
        "content": "#### LIS\u6570\u91cf\u7edf\u8ba1\n\u8bbef[i]\u4ee3\u8868\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u4e3a\u5f00\u5934\u7684LIS\u957f\u5ea6,g[i]\u4ee3\u8868\u65b9\u6848\u6570  \n\u8f6c\u79fb\u65f6\u4ece\u540e\u5f80\u524d f[i]=f[i+1\u00b7\u00b7\u00b7n]\u4e2d\u7684\u6700\u5927\u503c g[i]\u4e3a\u6700\u5927\u957f\u5ea6\u7684\u65b9\u6848\u6570\u7684\u548c  \n\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\uff0c\u82e5\u9700\u8981\u7ef4\u62a4\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u7684LIS\u957f\u5ea6\uff0c\u6b63\u7684\u505a\u5373\u53ef \n\uff08\u4ee3\u7801\u548c\u4e0b\u9762\u9898\u89e3\u548c\u5728\u4e00\u8d77\u4e86\uff0c\u611f\u89c9\u8fd8\u7b97\u7b80\u5355\uff09\n#### P5156 [USACO18DEC]Sort It Out \u9898\u89e3\n\u9898\u76ee\u4e2d\u7684\u6392\u5e8f\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u4e0d\u4f1a\u6539\u53d8\u5176\u4ed6\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e  \n\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u6a21\u62df\u8d5b\u4e2d\u7684\u5361\u7247\u91cd\u65b0\u63d2\u5165\u6392\u5e8f\u7c7b\u4f3c\u7684\u662f\uff0c\u6c42\u51fa\u5176\u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u7136\u540e\u7531n\u51cf\u53bb\u5b83\u5373\u662f\u96c6\u5408\u5927\u5c0f  \n\u4f46\u672c\u9898\u8fd8\u9700\u8981\u6211\u4eec\u6c42\u51fa\u5b57\u5178\u5e8f\u7b2cK\u5c0f\u7684\u96c6\u5408\uff0c\u5373\u6c42\u5b57\u5178\u5e8f\u7b2cK\u5927\u7684LIS\uff0c\u4f46\u8fd9\u6837\u4f1a\u7ed9\u4e0b\u9762\u7684\u64cd\u4f5c\u5e26\u6765\u9ebb\u70e6\uff08\u4e0d\u8f6c\u4e5f\u53ef\u4ee5\uff0c\u4f46\u6211\u770b\u4e0d\u61c2\u4e0d\u8f6c\u7684\u4ee3\u7801\uff09\n\u5c06a(i)=x\u8f6c\u5316\u4e3ab(x)=i \u5373\u7531\u4e0b\u6807\u6620\u5c04\u6743\u503c\u8f6c\u5316\u4e3a\u6743\u503c\u6620\u5c04\u4e0b\u6807\uff0c\u5219\u5b57\u5178\u5e8f\u7b2cK\u5927\u8f6c\u6362\u4e3a\u4e0b\u6807\u5b57\u5178\u5e8f\u7b2cK\u5927\u65b9\u4fbf\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\uff08\u4fdd\u8bc1vector\u5185\u6709\u5e8f\uff08\u867d\u7136\u542c\u8bf4\u4e0d\u8f6c\u6362vector\u5185\u4f9d\u65e7\u6709\u5e8f\u4f46\u6211\u4e0d\u4f1a\u8bc1\u660e\uff09\uff09  \n\u7136\u540e\u6211\u4eec\u7528vector\uff08\u6216\u94fe\u8868\uff09\u6765\u7ef4\u62a4\u957f\u5ea6\u4e3a k \u7684LIS\u7684\u5f00\u5934\u6709\u54ea\u4e9b\uff0c\u7136\u540e\u4ece\u957f\u5ea6k\u52301\u8fdb\u884c\u679a\u4e3e  \n\u82e5\u4ee5\u5f53\u524d\u679a\u4e3e\u5230\u7684\u6570\u5b57\u4e3a\u5f00\u5934\u7684LIS\u65b9\u6848\u6570\u6bd4k\u5c0f\u5219\u8fd9\u4e2a\u6570\u5b57\u4e0d\u80fd\u9009\uff08\u56e0\u4e3a\u9009\u4e86\u4e4b\u540e\u5c31\u7b97\u662f\u6700\u5927\u7684\u5b57\u5178\u5e8f\u4e5f\u65e0\u6cd5\u8fbe\u5230k\uff09\u82e5\u6bd4k\u5927\u5219\u5f80\u4e0b\u9009\u3002  \n\u6ce8\u610f\uff1a\u5f53\u524d\u679a\u4e3e\u5230\u7684\u6570\u4e0d\u80fd\u6bd4\u4e4b\u524d\u679a\u4e3e\u5230\u7684\u6570\u8fd8\u8981\u5c0f\uff0c\u9700\u8981\u7279\u5224  \n\u8fd9\u9898\u7531\u4e8e\u6743\u503c\u548c\u4e0b\u6807\u8001\u662f\u8f6c\u6765\u8f6c\u53bb\uff0c\u6545\u5c06\u8be6\u7ec6\u7684\u89e3\u91ca\u653e\u5728\u4ee3\u7801\u7684\u6ce8\u91ca\u91cc\uff08\u5176\u5b9e\u662f\u6211\u81ea\u5df1\u7406\u89e3\u80fd\u529b\u4f4e\u4e0b\uff09\n# \u6ce8\u610f\uff1a\u4ee3\u7801\u4e2d\u7684\u4e0b\u6807\u548c\u6743\u503c\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3\uff0c\u6807\u7684\u662f\u4f9d\u636eb\u7684\u4e0b\u6807\u548c\u6743\u503c\u3002\u5b9e\u9645\u4e0ab\u7684\u4e0b\u6807\u662fa\u7684\u6743\u503c\uff0cb\u7684\u6743\u503c\u662fa\u7684\u4e0b\u6807\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst long long inf=1e18;\nlong long read()\n{\n    long long tot=0,fs=1;\n    char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-') ch=getchar();\n    if(ch=='-') fs=-1,ch=getchar();\n    while(ch>='0'&&ch<='9') tot=tot*10+ch-'0',ch=getchar();\n    return tot*fs; \t\n}\nlong long n,m;\nlong long a[100009],b[100009];\nlong long k,c[100009];//\u6392\u540d\u548c\u4e0b\u6807\u4e3ax\u7684\u6570\u4e3a\u5f00\u5934\u7684LIS\u65b9\u6848\u6570\nstruct gzw\n{\n    long long mx,cnt;//LIS\u957f\u5ea6\u548c\u65b9\u6848\u6570\n    inline friend void operator += (gzw &a, const gzw &b)//\u72b6\u6001\u8f6c\u79fb\n\t{\n        if (a.mx < b.mx) a.mx = b.mx, a.cnt = b.cnt;\n        else if (a.mx == b.mx) a.cnt = min(inf, a.cnt + b.cnt);\n    }\n}bit[100009];\nvector<long long> vec[100009];//LIS\u957f\u5ea6\u4e3ax\u7684\u6240\u6709\u5f00\u5934\u7684\u4e0b\u6807\nbool use[100009];//x\u8fd9\u4e2a\u4e0b\u6807\u662f\u5426\u5728LIS\u4e2d\nvoid add(long long x,gzw y)//\u66f4\u65b0\n{\n    for(long long i=x;i;i-=(i&-i))\n    {\n\t\tbit[i]+=y;\n    }\n}\ngzw query(long long x)//\u7531\u4e8e\u662f\u4ece\u540e\u5f80\u524d\u505a\u7684\uff0c\u5e94\u5f53\u627e\u6743\u503c\u6bd4\u5f53\u524d\u5927\u7684\u8f6c\u79fb\n{\n    gzw re={0,1ll};\n    for(long long i=x;i<=n;i+=(i&-i))\n    {\n\t\tre+=bit[i];\n    }\n    return re;\n}\nint main()\n{\n    n=read(),k=read();\n    //cin>>n>>k;\n    for(long long i=1;i<=n;i++)\n    {\n        a[i]=read();\n        //cin>>a[i];\n        b[i]=a[i];\n    }\n    for(long long i=n;i;i--)\n    {\n\t\tgzw ls=query(b[i]+1);\n        ls.mx++;//\u66f4\u65b0\u540e\u957f\u5ea6+1\n        vec[ls.mx].push_back(i);//\u52a0\u5165\u4e0b\u6807 \u56e0\u4e3ai\u662f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u6545\u5fc5\u7136\u6709\u5e8f\n        c[i]=ls.cnt;\n        add(b[i],ls);\n    }\n    m=query(1).mx;//\u67e5\u8be2\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6\n    long long cur=-1;\n    for(long long i=m;i;i--)\n    {\n        for(long long ii=0;ii<vec[i].size();ii++)\n        {\n            long long j=vec[i][ii]; //\u4e0b\u6807\n            if(b[j]<cur) continue; //\u6743\u503c\u4e0d\u80fd\u6bd4\u4e4b\u524d\u7684\u5c0f\n            if(k<=c[j])//\u5f80\u4e0b\u8d70\n            {\n                use[b[j]]=1;\n                cur=b[j];\n                break;\n            }\n            k-=c[j];//\u518d\u5f80\u540e\u9762\u627e\u4e0b\u6807\u66f4\u5c0f\u7684\t\n        }\n    }\n    printf(\"%lld\\n\",n-m);\n    for(long long i=1;i<=n;i++)\n    {\n        if(!use[i]) printf(\"%lld\\n\",i);\t//\u8f93\u51fa\u7b54\u6848\n    }\n    return 0;\n}\n```\n\u82b1\u4e86\u4e00\u4e0b\u5348\u7ec8\u4e8e\u5f04\u61c2\u4e86QAQ\uff0c\u679c\u7136\u9898\u89e3\u5199\u7684\u8d8a\u590d\u6742\u7684\u4eba\u8d8a\u83dcQAQ",
        "postTime": 1550825281,
        "uid": 26199,
        "name": "wenjing233",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5156 \u3010[USACO18DEC]Sort It Out\u3011"
    }
]