[
    {
        "content": "Thought\n-----------\n\n\u9898\u76ee\u5206\u6790\uff08\u76f4\u63a5\u770b\u89e3\u6cd5\u7684\u8bf7\u5f80\u4e0b\u7ffb\uff09\uff1a\n\n\u8fd9\u9898\u4e00\u773c\u6709\u70b9\u50cf\u6700\u5c0f\u8def\u5f84\u8986\u76d6\uff08\u4e8c\u5206\u56feor\u7f51\u7edc\u6d41\uff09\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u5168\u5c40\u6700\u4f18\u4e0e\u5c40\u90e8\u6700\u4f18\u53ef\u80fd\u4f1a\u6709\u51b2\u7a81\n\n\u5b9e\u9645\u4e0a\u89c2\u5bdf\u8fd9\u9898\u7684\u6570\u636e\uff0c\u63a8\u6d4b\u590d\u6742\u5ea6$O(n)$\n\n\u4e0d\u96be\u60f3\u5230\u9009\u53d6\u7684$I$\u6761\u8def\u5f84\u90fd\u662f\u4ece\u53f6\u5b50\u5230\u53f6\u5b50\u5b58\u5728\u6700\u4f18\u89e3\n\n\u90a3\u4e48\u53d1\u73b0\u8c8c\u4f3c\u53f6\u5b50\u8282\u70b9\u4e2d\u6700\u591a\u53ea\u6709$I*2$\u4e2a\u4f1a\u88ab\u8986\u76d6\uff08\u6bcf\u6761\u8def\u5f84\u4ece\u53f6\u5b50\u5230\u53f6\u5b50\uff0c\u8986\u76d6$2$\u4e2a\uff09\uff0c\u7c7b\u4f3c\u7684\uff0c\u53d1\u73b0\u4ece\u53f6\u5b50\u8282\u70b9\u5f80\u5185\u63a8\u4e00\u5c42\u4e5f\u662f\u6700\u591a\u53ea\u6709$I*2$\u4e2a\u4f1a\u88ab\u8986\u76d6\uff0c\u90a3\u4e48\u5927\u80c6\u731c\u6d4b\uff0c\u5982\u679c\u4ece\u53f6\u5b50\u8282\u70b9\u5411\u5185\u62d3\u6251\u5206\u5c42\u540e\u6bcf\u4e00\u5c42\u6700\u591a\u53ea\u6709$I*2$\u4e2a\u4f1a\u88ab\u8986\u76d6\uff0c\u8003\u8651\u5230\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u5e76\u4e0d\u4e00\u5b9a\u6709$I*2$\u4e2a\uff0c\u6240\u4ee5\u6bcf\u4e00\u5c42\u8981\u8003\u8651\u8282\u70b9\u6570\u7684\u9650\u5236\uff0c\u6700\u540e\u5c06\u6240\u6709\u5c42\u52a0\u8d77\u6765\u5373\u53ef\n\n\u8fd9\u6837\u505a\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u8003\u8651\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u4f46\u7531\u4e8e\u8def\u5f84\u4e4b\u95f4\u662f\u53ef\u76f8\u4ea4\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u5c42\u7684\u70b9\u90fd\u53ef\u4ee5\u6ee1\u8db3\u8986\u76d6 $min(I*2,tot)$ *$tot$\u4e3a\u5f53\u524d\u5c42\u70b9\u6570* \u4e2a\u7684\u8981\u6c42\n\nSolution\n-----------\n\n\u4ece\u53f6\u5b50\u62d3\u6251\u6392\u5e8f\u5904\u7406\u51fa\u8282\u70b9\u7684\u5c42\uff0c\u6bcf\u4e00\u5c42\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a$min(2*I,tot)$\n$$ans=\\sum_{depth}min(I*2,tot[depth])$$\n\nCode\n---------\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rg register\n#define cl(x) memset(x,0,sizeof(x))\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define abs(x) ((x)>0?(x):(-(x)))\n\ntemplate <typename _Tp> inline _Tp read(_Tp&x){\n\trg char c11=getchar(),ob=0;x=0;\n\twhile(c11^'-'&&!isdigit(c11))c11=getchar();if(c11=='-')c11=getchar(),ob=1;\n\twhile(isdigit(c11))x=x*10+c11-'0',c11=getchar();if(ob)x=-x;return x;\n}\n\nconst int N=1005000;\nstruct Edge{int v,nxt;}a[N<<1];\nint head[N],tot[N],deg[N],lay[N],vis[N];\nint n,k,_(0);\n\ninline void add(int u,int v){\n\ta[++_].v=v,a[_].nxt=head[u],head[u]=_;++deg[u];\n\ta[++_].v=u,a[_].nxt=head[v],head[v]=_;++deg[v];\n}\n\nvoid topology(){\n\tqueue <int> q;\n\tfor(rg int i=1;i<=n;++i)if(deg[i]==1)vis[i]=1,++tot[lay[i]=1],q.push(i);\n\twhile(!q.empty()){\n\t\trg int x=q.front();q.pop();\n\t\tfor(rg int i=head[x];i;i=a[i].nxt)\n\t\t\tif(!vis[a[i].v])\n\t\t\tif((--deg[a[i].v])==1)\n\t\t\tvis[a[i].v]=1,++tot[lay[a[i].v]=lay[x]+1],q.push(a[i].v);\n\t}\n\treturn ;\n}\n\nint main(){\n\tread(n);read(k);\n\tfor(rg int i=1,x,y;i<n;++i)add(read(x),read(y));\n\ttopology();\n\trg int ans(0);\n\tfor(rg int i=1;tot[i];++i)ans+=min(k<<1,tot[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1522241580,
        "uid": 22112,
        "name": "Mirach",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3441 \u3010[POI2006]MET-Subway\u3011"
    },
    {
        "content": "\u3010POI\u8865\u5168\u8ba1\u5212#24 POI2006 MET\u3011\n\n\u667a\u969c\u9009\u624boscar\u5728\u62c9\u4f4e\u6b64\u9898\u901a\u8fc7\u7387\u540e\u53c8\u6765\u5199\u9898\u89e3\u5566\uff01\n\n\u9996\u5148\u731c\u7ed3\u8bba\uff0c\u53d1\u73b0\u53ea\u9700\u8981\u7b2c\u4e00\u6761\u9009\u76f4\u5f84\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u6761\u5206\u4e24\u6b21\u9009\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a\u79bb\u5df2\u7ecf\u9009\u8fc7\u7684\u70b9\u6700\u8fdc\u7684\u70b9x\uff0c\u628ax\u70b9\u5230\u5df2\u7ecf\u9009\u8fc7\u7684\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u5168\u9009\u4e0a\u5c31\u80fd\u8fbe\u5230\u6700\u4f18\u89e3\n\n\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u5927\u80c6\u731c\u60f3\u4e0d\u9700\u8bc1\u660e\n\n\u63a5\u4e0b\u6765\u4fee\u590d\u4e00\u4e2a\u5c0fbug\uff0c\u5982\u679c\u65b0\u9009\u7684\u4e24\u4e2a\u70b9\u4e0e\u4e4b\u524d\u9009\u7684\u90e8\u5206\u6ca1\u6709\u4ea4\u70b9\uff0c\u90a3\u4e48\u4f1a\u591a\u8fde\u4e00\u6761\u65b0\u8def\u5f84\u4e0e\u5df2\u7ecf\u9009\u8fc7\u7684\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\n\n\u53ea\u9700\u8981\u628a\u65b0\u8def\u5f84\u7684\u4e00\u4e2a\u7aef\u70b9\u548c\u5df2\u7ecf\u9009\u8fc7\u7684\u7aef\u70b9\u4ea4\u6362\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u7531\u4e8e\u6211\u7684\u8868\u8ff0\u53ef\u80fd\u6709\u95ee\u9898\uff0c\u6211\u4eec\u6765\u753b\u4e00\u4e2a\u56fe\n\n![1.png](https://user-images.githubusercontent.com/20551921/31261844-651836b6-aa89-11e7-88dc-5ccde4691ad1.png)\n\n\u8fd9\u4e2a\u56fe\u4e2d\u7ea2\u8272\u90e8\u5206\u8868\u793a\u4e4b\u524d\u9009\u7684\u8def\u5f84\uff0c\u84dd\u8272\u90e8\u5206\u8868\u793a\u65b0\u9009\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u7684\u8fde\u7ebf\n\n\u6211\u4eec\u628a\u8fd9\u4e24\u6761\u8def\u5f84\u8f6c\u6362\u6210\u4e0b\u56fe\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u8986\u76d6\u4e2d\u95f4\u7684\u7ad6\u76f4\u8def\u5f84\n\n![2.png](https://user-images.githubusercontent.com/20551921/31261892-c1207dc4-aa89-11e7-8f19-dcc3bd80a3d2.png)\n\n\u56fe\u4e2d\u7ea2\u8272\u90e8\u5206\u8868\u793a\u4e4b\u524d\u9009\u7684\u8def\u5f84\u8c03\u6574\u540e\u7684\u6837\u5b50\uff0c\u84dd\u8272\u8868\u793a\u65b0\u8def\u5f84\u8c03\u6574\u540e\u7684\u6837\u5b50\uff0c\u7d2b\u8272\u8868\u793a\u7ea2\u84dd\u516c\u5171\u90e8\u5206\n\n\n\u8fd9\u6837\u5e94\u8be5\u5c31\u5dee\u4e0d\u591a\u89e3\u91ca\u6e05\u695a\u4e86\n\n\u4e0b\u9762\u6765\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u79bb\u9009\u8fc7\u7684\u70b9\u6700\u8fdc\u7684\u70b9\n\n\u6211\u4eec\u628a\u76f4\u5f84\u7684\u7aef\u70b9\u8bbe\u4e3a\u6839\uff0c\u7136\u540e\u4ece\u6839\u5f00\u59cb\u8fdb\u884cdfs\uff0c\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5f80\u8fdc\u79bb\u6839\u7684\u65b9\u5411\u8d70\u6700\u591a\u80fd\u7ecf\u8fc7\u591a\u5c11\u4e2a\u70b9\uff08\u4ee5\u540e\u7b80\u79f0\u4e3amaxd\uff09\uff0c\u518d\u8bb0\u5f55\u6cbf\u7740\u8fd9\u4e2a\u65b9\u5411\u8d70\u7684\u4e0b\u4e00\u4e2a\u70b9\u662f\u54ea\u4e2a\n\n\u63a5\u4e0b\u6765\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\uff08\u4e0d\u9700\u8981\u7528\u5806\u7ef4\u62a4\uff08TLE\uff09\uff0c\u76f4\u63a5\u5c06maxd\u4f5c\u4e3a\u4e0b\u6807\u5b58\u5230\u6570\u7ec4\u91cc\uff08\u7c7b\u4f3c\u8ba1\u6570\u6392\u5e8f\uff09\uff09\uff0c\u4e0d\u9700\u8981\u7ba1\u8def\u5f84\u662f\u5426\u5df2\u7ecf\u9009\u5230\u8fd9\u4e2a\u70b9\u7684\u7956\u5148\uff0c\u56e0\u4e3a\u5728maxd\u5c0f\u7684\u70b9\u7684\u6240\u6709\u7956\u5148\u7684maxd\u4e00\u5b9a\u4e25\u683c\u5927\u4e8e\u8fd9\u4e2a\u70b9\n\n\n\u6700\u540e\u4e3a\u4e86\u9632\u6b62MLE\uff0c\u6211\u4eec\u5c06\u5185\u5b58\u52a8\u6001\u5f00\u51fa\u6765\uff0c\u4f7f\u7528\u5b8c\u4e86\u5c31\u5220\u9664\uff08\u89c1\u4ee3\u7801\u6ce8\u91ca ******************** \u5904\uff09\n\n\n\u6ce2\u5170\u4eba\u771f\u662f\u8111\u6d1e\u5927\uff08\u9003\uff09\n\n\n\u6700\u540e\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int MAXN=1000010;\nstruct edge\n{\n    int v;\n    edge *next;\n}*h[MAXN],*pool;\nint top;\ninline void addedge(int u,int v)\n{\n    edge *tmp=&pool[++top];tmp->v=v;tmp->next=h[u];h[u]=tmp;\n    edge *pmt=&pool[++top];pmt->v=u;pmt->next=h[v];h[v]=pmt;\n}\nqueue<int> q;\nint dep[MAXN],maxd[MAXN],pa[MAXN],mson[MAXN];\nint bfs()\n{\n    int maxd=1,maxn=1;\n    q.push(1);\n    dep[1]=1;\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();\n        for(edge *tmp=h[u];tmp;tmp=tmp->next)\n        {\n            if(!dep[tmp->v])\n            {\n                dep[tmp->v]=dep[u]+1;\n                q.push(tmp->v);\n                if(dep[tmp->v]>maxd)\n                {\n                    maxd=dep[tmp->v];\n                    maxn=tmp->v;\n                }\n            }\n        }\n    }\n    return maxn;\n}\nvector<int> nod[MAXN];\nvoid dfs(int u)\n{\n    for(edge *tmp=h[u];tmp;tmp=tmp->next)\n    {\n        if(!dep[tmp->v])\n        {\n            dep[tmp->v]=dep[u]+1;\n            pa[tmp->v]=u;\n            dfs(tmp->v);\n            if(maxd[tmp->v]+1>maxd[u])\n            {\n                maxd[u]=maxd[tmp->v]+1;\n                mson[u]=tmp->v;\n            }\n        }\n    }\n}\nint n,k;\nbool vis[MAXN];\nint main()\n{\n    pool=new edge[MAXN*2];//********************\n    scanf(\"%d%d\",&n,&k);\n    int a,b;\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        addedge(a,b);\n    }\n    int root=bfs();\n    memset(dep,0,sizeof(dep));\n    dep[root]=1;\n    dfs(root);\n    delete[] pool;//********************\n    for(int i=1;i<=n;i++)\n    {\n        nod[maxd[i]].push_back(i);\n    }\n    int ans=0,left=k*2-1;\n    for(int i=n;i>=0;i--)\n    {\n        for(auto x:nod[i])\n        {\n            if(!vis[x])\n            {\n                int cur=x;\n                left--;\n                while(cur)\n                {\n                    ans++;\n                    vis[cur]=1;\n                    cur=mson[cur];\n                }\n            }\n            if(!left)break;\n        }\n        if(!left)break;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1507261580,
        "uid": 3346,
        "name": "oscar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3441 \u3010[POI2006]MET-Subway\u3011"
    },
    {
        "content": "\u3010xxs \u90fd\u80fd\u770b\u61c2\u7684\u9898\u89e3\u3011\n\n\n------------\n\n\u8d2a\u5fc3\uff1a\u9009\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\u4f5c\u4e3a\u8def\u5f84\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u4e24\u4e2a\u53f6\u5b50\u7ed3\u70b9\u79bb\u5f97\u8d8a\u8fdc\u8d8a\u597d\u3002\n\n\u4e8e\u662f\u8fd9\u662f\u5177\u4f53\u6b65\u9aa4\uff1a\n1. \u7b97\u53f6\u5b50\u7ed3\u70b9\u7684\u4e2a\u6570 $k$\uff0c $ans \\gets ans + \\min\\{2 \\times l, k\\}$\u3002\n2. \u5220\u9664 $k$ \u4e2a\u53f6\u5b50\u7ed3\u70b9\n3. \u56de\u5230\u6b65\u9aa4 $1$\uff0c\u76f4\u5230\u6ca1\u6709\u53f6\u5b50\u7ed3\u70b9\u4e3a\u6b62\u3002\n\n\u6211\u4eec\u9996\u5148\u5f97\u660e\u786e\uff0c$ans$ \u6bcf\u6b21\u52a0\u7684\u5e76\u4e0d\u662f\u4e00\u6761\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u800c\u662f\u4e00\u5c42\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5c42\u4e0d\u7b49\u4e8e\u6df1\u5ea6\uff0c\u4f8b\u5982\u6bcf\u6b21\u53f6\u5b50\u7ed3\u70b9\u6211\u4eec\u89c6\u4e3a\u5b83\u4eec\u5728\u540c\u4e00\u5c42\uff0c\u4f46\u4e0d\u5728\u540c\u4e00\u6df1\u5ea6\u3002\n\n\u7136\u540e\u4e3a\u4ec0\u4e48\u6b65\u9aa4 $1$ \u4e2d\u6bcf\u5c42\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f $ans \\gets ans + \\min\\{2 \\times l, k\\}$ \u5462\uff1f\n\n\u6bcf\u6761\u8def\u5f84\u6709 $2$ \u4e2a\u7ed3\u70b9\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a\uff0c\u7531\u6b64\u5806\u5f97\u6bcf\u4e00\u6761\u8def\u5f84\u5728\u6bcf\u4e00\u5c42\u90fd\u6709 $2$ \u4e2a\u7ed3\u70b9\u3002\u6240\u4ee5\u7406\u8bba\u4e0a\u6bcf\u4e00\u5c42\u6709 $2 \\times l$ \u4e2a\u7ed3\u70b9\u88ab\u8986\u76d6\uff0c\u4f46\u8fd9\u4e00\u5c42\u603b\u5171\u5c31 $k$ \u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5\u8fd9\u4e00\u5c42\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u8981\u628a $2 \\times l$ \u548c $k$ \u53d6\u4e2a $\\min$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1laswenb.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6240\u4ee5\u6211\u4eec\u4e00\u8fb9\u5bbd\u641c\u4e00\u8fb9\u6c42\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\u3002\n\n------------\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nint n,l,cnt,ans;\nint head[1000010],d[1000010];//d[i] \u4ee3\u8868\u7ed3\u70b9 i \u7684\u5ea6\u3002 \nqueue<int>q;//q \u662f\u5bbd\u641c\u6240\u8981\u7528\u7684\u961f\u5217\u3002 \nstruct node{\n\tint to,next;\n}e[2000010];\nvoid add(int &x,int &y){//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002 \n\te[++cnt]={y,head[x]};\n\thead[x]=cnt;\n\treturn;\n}\nint read(){\n\tchar ch=getchar();\n\tint x=0,f=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint main(){\n\tcin>>n>>l;\n\tfor(int i=1;i<n;i++){\n\t\tint x=read();\n\t\tint y=read(); \n\t\tadd(x,y);add(y,x);\n\t\td[x]++;d[y]++;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(d[i]==1)q.push(i);//\u628a\u53f6\u5b50\u7ed3\u70b9\u653e\u5165\u961f\u5217\u3002 \n\twhile(!q.empty()){\n\t\tint k=q.size();//\u53f6\u5b50\u7ed3\u70b9\u7684\u6570\u91cf\u3002 \n\t\tans+=min(2*l,k);//\u7b97\u6bcf\u5c42\u7684\u8d21\u732e\u3002 \n\t\tfor(int i=1;i<=k;i++){\n\t\t\tint u=q.front();//u \u662f k \u4e2a\u53f6\u5b50\u7ed3\u70b9\u4e2d\u7684\u4e00\u4e2a\u3002\n\t\t\tq.pop();//\u5220\u9664\u53f6\u5b50\u7ed3\u70b9\u3002\n\t\t\tfor(int j=head[u];j;j=e[j].next){\n\t\t\t\tint v=e[j].to;\n\t\t\t\td[v]--;//u \u5220\u9664\u4e86\uff0c\u548c\u5b83\u6709\u8fde\u8fb9\u7684\u70b9\u7684\u5ea6\u8981\u51cf 1\u3002 \n\t\t\t\tif(d[v]==1)q.push(v);//\u628a\u65b0\u7684\u53f6\u5b50\u7ed3\u70b9\u653e\u5165\u961f\u5217\u3002 \n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1658830110,
        "uid": 314625,
        "name": "\u4fe1\u606f\u5411\u9633\u82b1\u6728",
        "ccfLevel": 4,
        "title": "P3441 [POI2006]MET-Subway \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3441)\n\n\u8fd9\u9053\u9898\u5982\u679c\u8981\u5c06\u6240\u6709\u8def\u5f84\u627e\u51fa\u6765\uff0c\u9700\u8981\u8003\u8651\u5f88\u591a\u56e0\u7d20\uff0c\u96be\u4ee5\u627e\u5230\u6700\u4f18\u3002\u90a3\u4e48\u65e2\u7136\u4e0d\u80fd\u4ece\u6574\u4f53\u5165\u624b\uff0c\u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u5206\u5f00\u7b97\u8d21\u732e\u3002\u600e\u4e48\u5206\u5462\uff1f\n\n\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u6bcf\u4e00\u6761\u8def\u5f84\u6700\u591a\u8986\u76d6\u5230 $2$ \u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u4e00\u4e2a\u8d77\u70b9\u4e00\u4e2a\u7ec8\u70b9\u3002\u90a3\u4e48 $l$ \u6761\u6700\u591a\u8986\u76d6 $2\\times l$ \u4e2a\u3002\u4f46\u53ef\u80fd\u53f6\u5b50\u8282\u70b9\u6570\u91cf\u66f4\u5c11\uff0c\u6240\u4ee5\u8bbe\u53f6\u5b50\u8282\u70b9\u6570\u91cf\u4e3a $a$\uff0c\u5219\u80fd\u8986\u76d6\u7684\u53f6\u5b50\u8282\u70b9\u6570\u91cf\u4e3a $\\min(2\\times l,a)$\u3002\n\n\u8fdb\u4e00\u6b65\u60f3\uff0c\u628a\u53f6\u5b50\u8282\u70b9\u5220\u53bb\u540e\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u4e5f\u7b26\u5408\u8fd9\u4e2a\u6027\u8d28\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u68f5\u6811\u6309\u8fd9\u4e2a\u6b65\u9aa4\u5206\u4e3a\u82e5\u5e72\u5c42\u5206\u522b\u8ba1\u7b97\uff0c\u7b2c $i$ \u5c42\u6709 $a_i$ \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48 $ans=\\sum \\min(2\\times l,a_i)$\u3002\n\n\u6700\u540e\u5c31\u662f\u600e\u4e48\u5206\u8fd9\u4e2a\u5c42\u4e86\u3002\u8fd9\u6574\u4e2a\u8fc7\u7a0b\u662f\u4e00\u4e2a\u5220\u53f6\u5b50\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\uff0c\u4ece\u4e0b\u5230\u4e0a\u5904\u7406\u3002\n\ncode\uff1a\n\n```cpp\nint n,m,dep[N],sum[N],in[N];\nbool vis[N];\nint tot,head[N];struct node{int to,nxt;}e[N<<1];\nqueue<int> q;\ninline void add(int u,int v){e[++tot]={v,head[u]},head[u]=tot;}\nsigned main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,u,v;i<n;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v),add(v,u);\n\t\tin[u]++,in[v]++;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(in[i]==1)q.push(i),dep[i]=1;//\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u5165\u5ea6\u4e3a1\u7684\u5c31\u662f\u53f6\u5b50\n\t}\n\twhile(q.size()){\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=true,sum[dep[u]]++;\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v])continue;\n\t\t\tin[v]--;\n\t\t\tif(in[v]==1)q.push(v),dep[v]=dep[u]+1;\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)ans+=min(sum[i],2*m);\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1671586429,
        "uid": 578590,
        "name": "yinhee",
        "ccfLevel": 0,
        "title": "P3441\u9898\u89e3"
    },
    {
        "content": "\u54c7\u2026\u2026\u849f\u84bb\u8fc7\u7d2b\u9898\uff0c\u66b4\u529b\u51fa\u5947\u8ff9\n\n~~\u6811\u94fe\u5256\u5206\u5feb\u5982\u95ea\u7535~~\n\n\u5148\u627e\u51fa\u6811\u7684\u4e00\u6761\u76f4\u5f84\u7684\u8d77\u70b9\uff0c\u663e\u7136\u6700\u4f18\u89e3\u4e2d\u7684\u5176\u4e2d\u4e00\u6761\u8def\u5f84\u4e00\u5b9a\u662f\u76f4\u5f84\uff0c\u7136\u540e\u5f00\u5256\u3002\n\n\u5256\u51fa\u6765\u4e4b\u540e\u62ff\u7740\u6700\u957f\u91cd\u94fe\u7684\u4e24\u7aef\u63d0\u8d77\u6765\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u6837\u3002![](https://cdn.luogu.com.cn/upload/pic/41260.png)\n\n\u7136\u540e\u7528\u9884\u5148\u8bb0\u5f55\u7684\u53f6\u5b50\u6570\u7ec4\u6392\u5e8f\uff0c\u8d2a\u5fc3\u5904\u7406\u6bcf\u4e00\u7247\u53f6\u5b50\u6240\u5728\u7684\u8def\u5f84\uff0c\u6bd4\u8f83\u53c2\u6570\u662f\u3010\u8fd9\u7247\u53f6\u5b50\u4f4d\u4e8e\u7684\u91cd\u94fe\u7684\u957f\u5ea6\u3011\uff0c\u663e\u7136\u8fd9\u4e2a\u503c\u8d8a\u957f\uff0c\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u5c31\u8d8a\u957f\uff08\u8f7b\u94fe\u7684\u6570\u91cf\u662f\u6709\u4e0a\u9650\u7684\uff09\n\n\u7d2f\u52a0\uff0c\u5b8c\u4e8b\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nvoid iread(int &c)\n{\n    c=0;int k=1;char p='k';\n    while((p<'0')||(p>'9')){if(p=='-')k=-1;p=getchar();}\n    while((p>='0')&&(p<='9')){c=c*10+p-'0';p=getchar();}\n    c*=k;\n}\nint n,l,ru,rv,ans,root;\nint dis[1000001];\nstruct pc{int num,c;}leaf[1000001];int lta;\nbool cmp(pc a,pc b){return a.c>b.c;}\nbool ispick[1000001];\nstruct poi{int fa,son,size,head,top,tpl;}tree[1000001];//\u5b58\u6811 \nstruct EDGE{int from,to,next;}e[2000002];int ct;//\u90bb\u63a5\u8868\u5b58\u56fe \nvoid adde(int st,int ed){ct++;e[ct].next=tree[st].head;tree[st].head=ct;e[ct].from=st;e[ct].to=ed;}\nvoid dfs0(int st,int fa)//\u7b2c\u4e00\u904d\u6df1\u641c\uff0c\u8bb0\u5f55\u8ddd\u79bb\uff0c\u627e\u76f4\u5f84\u7aef\u70b9 \n{\n\tfor(int i=tree[st].head;i;i=e[i].next)\n    {\n        if(e[i].to==fa)continue;\n        dis[e[i].to]=dis[st]+1;\n\t\tdfs0(e[i].to,st);\n    }\n}\nvoid dfs1(int st,int fa)//\u6811\u5256\u7b2c\u4e00\u904d\u6df1\u641c \n{\n    tree[st].fa=fa;\n    tree[st].size=1;\n    for(int i=tree[st].head;i;i=e[i].next)\n    {\n        if(e[i].to==fa)continue;\n        dfs1(e[i].to,st);\n        tree[st].size+=tree[e[i].to].size;\n        if(tree[e[i].to].size>tree[tree[st].son].size)\n        {\n            tree[st].son=e[i].to;\n        }\n    }\n    return;\n}\nvoid dfs2(int st,int fa)//\u6811\u5256\u7b2c\u4e8c\u904d\u6df1\u641c \n{\n    if(tree[fa].son==st)tree[st].top=tree[fa].top,tree[st].tpl=tree[fa].tpl+1;//\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5230\u6240\u5728\u91cd\u94fe\u9876\u7aef\u7684\u8ddd\u79bb \n    else tree[st].top=st;\n    for(int i=tree[st].head;i;i=e[i].next)\n    {\n        if(e[i].to==fa)continue;\n        dfs2(e[i].to,st);\n    }\n    if(!e[tree[st].head].next){lta++;leaf[lta].c=tree[st].tpl;leaf[lta].num=st;}\n    return;\n}\nint main()\n{\n    iread(n);iread(l);\n    for(register int i=2;i<=n;i++)\n    {\n        iread(ru);iread(rv);\n        adde(ru,rv);\n        adde(rv,ru);\n    }\n    dfs0(1,1);\n    for(int i=1;i<=n;i++)if(dis[i]>dis[root])root=i;//\u627e\u5230\u4e0e\u70b91\u8ddd\u79bb\u6700\u5927\u7684\u70b9\uff0c\u5373\u662f\u76f4\u5f84\u9876\u70b9 \n\tdfs1(root,root);//\u6811\u5256\uff08\u8fd9\u91cc\u76f4\u63a5\u75281\u5f53\u6839\u53ea\u670933\u5206\uff0c\u4e24\u4e2a\u70b9\uff09 \n    dfs2(root,root);\n    /*                //\u6ce8\u91ca\u6ce8\u91ca\u6ce8\u91ca\u5927\u6cd5\u597d \n    for(int i=1;i<=n;i++)\n    {\n        cout<<i<<\":\"<<tree[i].fa<<\",\"<<tree[i].size<<\",\"<<tree[i].son<<\",\"<<tree[i].top<<\",\"<<tree[i].tpl<<endl;\n    }\n    //*/\n    sort(leaf+1,leaf+1+lta,cmp);//\u6392\u5e8f \n    /*\n    for(int i=1;i<=n;i++)cout<<leaf[i].num<<\",\"<<leaf[i].c<<\" \";cout<<endl;\n\t//*/\n\tfor(int i=1;i<=(l<<1)-1;i++)\n    {\n    \tif(i==1)//\u6700\u5927\u7684\u662f\u6700\u957f\u91cd\u94fe\u7684\u53e6\u4e00\u7aef \n    \t{\n    \t\tispick[root]=1;//\u6807\u8bb0\u4ee5\u67d0\u70b9\u4e3a\u9876\u7aef\u7684\u91cd\u94fe\u662f\u5426\u88ab\u9009\u62e9 \n    \t\tans=leaf[i].c+1;\n        }\n        else\n        {\n            int k=leaf[i].num;\n            while(!ispick[tree[k].top])//\u8fd8\u6ca1\u6709\u8df3\u5230\u6700\u957f\u91cd\u94fe \n            {\n            \tispick[tree[k].top]=1;\n            \tans+=(tree[k].tpl+1);//\u770b\u56fe \n                k=tree[tree[k].top].fa;\n            }\n        }\n    }\n    printf(\"%d\",ans);//\u6536\u5de5 \n    return 0;\n}\n```\n\n\u5176\u5b9e\u8fd8\u662f\u8d2a\u5fc3\u601d\u60f3\u2026\u2026\n",
        "postTime": 1541049889,
        "uid": 80068,
        "name": "\u9022\u79cb\u5546\u72ec\u5b63",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3441 \u3010[POI2006]MET-Subway\u3011"
    },
    {
        "content": "# [MET-Subway](https://www.luogu.com.cn/problem/P3441)\r\n\u7b2c\u4e00\u9053\u6ca1\u770b\u9898\u89e3\u505a\u51fa\u6765\u7684\u7d2b\u8272\u56fe\u8bba\u9898~~\u849f\u84bb\u8001\u6cea\u7eb5\u6a2a~~\u3002\r\n# \u601d\u8def\u5206\u6790\r\n\u5982\u679c\u4ece\u6574\u4f53\u4e0a\u5165\u624b\u7684\u8bdd\uff0c\u5f88\u96be\u786e\u5b9a\u9009\u51fa\u8fb9\u7684\u4f9d\u636e\uff0c\u6240\u4ee5\u8fd8\u662f\u5148\u8003\u8651\u8d2a\u5fc3\u3002\r\n\r\n\u9996\u5148\u6ce8\u610f\u5230\uff0c\u6bcf\u6b21\u9009**\u53f6\u5b50\u8282\u70b9**\u5230**\u53f6\u5b50\u8282\u70b9**\u7684\u8def\u5f84\u76f8\u5bf9\u800c\u8a00\u4f1a\u6700\u4f18\uff0c\u800c\u4e14\u6bcf\u6761\u8def\u5f84**\u6700\u591a**\u7ecf\u8fc7 $2$ \u4e2a\u53f6\u5b50\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff1a\r\n> \u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6761\u8def\u5f84\u4e0d\u5171\u7528\u53f6\u5b50\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u80fd\u6700\u591a\u8986\u76d6 $2l$ \u4e2a\u53f6\u5b50\u8282\u70b9\uff08$l$ \u540c\u9898\u610f\uff09\u3002\r\n\r\n\u4f46\u662f\uff0c\u4e07\u4e00\u90a3\u4e00\u5c42\u7684\u603b\u8282\u70b9\u6570\u8fd8\u6ca1\u6709 $2l$ \u591a\u600e\u4e48\u529e\uff1f\u4e8e\u662f\u7b2c $i$ \u5c42\u7684\u7b54\u6848\u5c31\u53d8\u6210\u4e86 $\\min(2l,size_i)$\uff0c\u5176\u4e2d $size_i$ \u6307\u7b2c $i$ \u5c42\u7684\u603b\u8282\u70b9\u6570\u3002\r\n\r\n\u9898\u76ee\u7ed9\u7684\u662f\u4e00\u9897\u65e0\u6839\u6811\uff0c\u95ee\u9898\u5c31\u8f6c\u53d8\u6210\u4e86\u6c42\u6bcf\u4e00\u5c42\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u6211\u4eec\u53ef\u4ee5**\u62d3\u6251\u6392\u5e8f**\u7684\u65b9\u6cd5\u904d\u5386\uff1a\r\n\r\n- \u628a\u5165\u5ea6\uff08\u5c31\u662f\u8fde\u8fb9\u6570\uff09\u4e3a $1$ \u7684\u70b9\u653e\u5165\u961f\u5217\u4e2d\u3002\r\n- \u53d6\u51fa\u961f\u5934\uff0c\u5220\u9664\u5b83\uff08\u5c31\u662f\u628a\u548c\u4ed6\u6709\u8fde\u8fb9\u7684\u70b9\u5165\u5ea6\u51cf $1$\uff09\u3002\r\n- \u628a\u65b0\u4ea7\u751f\u5165\u5ea6\u4e3a $1$ \u7684\u70b9\u5165\u961f\u3002\r\n- \u91cd\u590d\u64cd\u4f5c $2$ \u548c $3$\uff0c\u76f4\u5230\u961f\u5217\u7a7a\u3002\r\n- \u7edf\u8ba1\u7b54\u6848\u3002\r\n\r\n# \u4ee3\u7801\u5b9e\u73b0\r\n```cpp\r\n    #include <bits/stdc++.h>\r\n    using namespace std;\r\n    int n,l,head[1000005],in[1000005],tot,ans[1000005],cnt;\r\n    bool bk[1000005];\r\n    struct edge\r\n    {\r\n        int next,to;\r\n    }e[2000005];\r\n    void add_edge(int u,int v)\r\n    {\r\n        e[++tot].next=head[u];\r\n        e[tot].to=v;\r\n        head[u]=tot;\r\n    }\r\n    struct node\r\n    {\r\n        int id,dep;\r\n    };\r\n    queue<node>q;\r\n    void topu()//\u62d3\u6251\u6392\u5e8f \r\n    {\r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            if(in[i]==1)\r\n            {\r\n                q.push({i,1});//\u961f\u5217\u521d\u59cb\u5316 \r\n                bk[i]=1;\r\n            }\r\n        }\r\n        while(!q.empty())\r\n        {\r\n            node u=q.front();\r\n            q.pop();\r\n            ans[u.dep]++;//\u540c\u4e00\u5c42\u7684\u8282\u70b9\u6570\u52a01 \r\n            for(int i=head[u.id];i;i=e[i].next)\r\n            {\r\n                int v=e[i].to;\r\n                if(!bk[v])\r\n                {\r\n                    in[v]--;//\u5165\u5ea6\u51cf1 \r\n                    if(in[v]==1)\r\n                    {\r\n                        q.push({v,u.dep+1});//\u65b0\u7684\u5165\u961f \r\n                        bk[v]=1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    int main()\r\n    {\r\n        scanf(\"%d%d\",&n,&l);\r\n        for(int i=1;i<n;i++)\r\n        {\r\n            int u,v;\r\n            scanf(\"%d%d\",&u,&v);\r\n            add_edge(u,v);\r\n            add_edge(v,u);\r\n            in[u]++;\r\n            in[v]++;//\u521d\u59cb\u5316\u5165\u5ea6 \r\n        }\r\n        topu();\r\n        for(int i=1;(i<=n)&&ans[i];i++)\r\n        {\r\n            cnt+=min(l*2,ans[i]);//\u8ba1\u7b97\u7b54\u6848 \r\n        }\r\n        printf(\"%d\",cnt);\r\n        return 0;\r\n    }\r\n```\r\n\r\n\u5e0c\u671b\u672c\u7bc7\u9898\u89e3\u53ef\u4ee5\u5e2e\u5230\u5927\u5bb6\uff01\uff01\uff01",
        "postTime": 1671681693,
        "uid": 631576,
        "name": "cyz2010",
        "ccfLevel": 0,
        "title": "P3441\u9898\u89e3"
    },
    {
        "content": "## \u3010\u9898\u610f\u3011\n\u7ed9\u51fa\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u8981\u6c42\u786e\u5b9am\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u88ab\u8def\u5f84\u8986\u76d6\u7684\u70b9\u6570\u6700\u591a\uff0c\u6c42\u6700\u591a\u7684\u70b9\u6570\n\n## \u3010\u5206\u6790\u3011\n\n\u4e0d\u59a8\u5148\u5047\u8bbe\u8fd9\u662f\u4e00\u68f5\u6709\u6839\u6570\n\n\u5bf9\u6811\u8fdb\u884c\u5206\u5c42\uff0c\u6bcf\u5c42\u81f3\u591a\u6709$2m$\u4e2a\u70b9\n\n\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6bcf\u6761\u8def\u5f84\u7684\u7aef\u70b9\u4e00\u5b9a\u5728\u53f6\u8282\u70b9\u4e0a\n\n\u65e2\u7136\u662f\u65e0\u6839\u6811\uff0c\u5c31\u53cd\u5411\u5904\u7406\n\n\u4ee4\u53f6\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u518d\u5f80\u4e0a\u62d3\u5c55\n\n\u8bb0\u5f55\u6bcf\u4e00\u5c42\u7684\u70b9\u6570\uff0c\u4e0e$2m$\u53d6$min$\u5373\u53ef\n\n\u62d3\u5c55\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7528\u62d3\u6251\u5b9e\u73b0\n\n## \u3010\u89e3\u6cd5\u3011\n\u62d3\u6251\n## \u3010\u4ee3\u7801\u3011\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e6+5,maxe=maxn<<1;\nint n,m;\nint tot,lnk[maxn],d[maxn];\nint cnt[maxn],maxd;\nint que[maxn],dep[maxn];\nint ans;\nstruct edge{\n\tint to,nxt;\n}e[maxe];\nchar gc(){\n\tstatic char buf[10000],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,10000,stdin),p1==p2)?EOF:*p1++;\n}\nint read(){\n\tint ret=0,f=1;char ch=gc();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=gc();}\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=gc();\n\treturn ret*f;\n}\nvoid add_e(int x,int y){\n\te[++tot]=(edge){y,lnk[x]};\n\tlnk[x]=tot,d[y]++;\n}\nvoid Topo(){\n\tint hed=0,til=0;\n\tfor(int i=1;i<=n;i++){\n\t\td[i]--;\n\t\tif(!d[i]) que[++til]=i,dep[i]=1;\n\t}\n\twhile(hed!=til){\n\t\tint x=que[++hed];\n\t\tcnt[dep[x]]++;\n\t\tif(dep[x]>maxd) maxd=dep[x];\n\t\tfor(int j=lnk[x];j;j=e[j].nxt){\n\t\t\tint y=e[j].to;\n\t\t\td[y]--;\n\t\t\tif(!d[y]){\n\t\t\t\tque[++til]=y;\n\t\t\t\tdep[y]=dep[x]+1;\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n \tfreopen(\"P3441.in\",\"r\",stdin);\n \tfreopen(\"P3441.out\",\"w\",stdout);\n\tn=read(),m=read()*2;\n\tfor(int i=1;i<n;i++){\n\t\tint x=read(),y=read();\n\t\tadd_e(x,y),add_e(y,x);\n\t}\n\tTopo();\n\tfor(int i=1;i<=maxd;i++) ans+=min(m,cnt[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1604536845,
        "uid": 116251,
        "name": "\u7834\u5fc6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3441 \u3010[POI2006]MET-Subway\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6807\u51c6\u7684\u56fe\u8bba\u7efc\u5408\u9898\u3002\n\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6709\u54ea\u4e9b\u56fe\u8bba\u77e5\u8bc6\uff1a\u7ed3\u6784\u4f53\u7528\u524d\u5411\u661f\u7684\u57fa\u672c\u65b9\u5f0f\uff1b\n\u521d\u59cb\u5316\u5efa\u6811\u65f6\u7528\u5230\u4e86\u52a0\u8fb9\u7684\u57fa\u672c\u77e5\u8bc6\uff1b\n\u52a0\u70b9\u6309\u7167\u6df1\u5ea6\u6392\u5e8f\u65f6\u8fd0\u7528\u4e86\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\uff1b\n\u6700\u540e\u6839\u636e\u8def\u5f84\u8986\u76d6\u6c42\u51fa\u6700\u591a\u8986\u76d6\u7684\u70b9\u3002\n\n\u7ed3\u6784\u4f53\u4e2dv\u8868\u793a\u5f53\u524d\u8282\u70b9\uff0cnxt\u8868\u793a\u4e0b\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u8fde\u8282\u70b9\u3002\n\n\u540c\u65f6\u8981\u6ce8\u610fa\u8981\u5f00maxn\u7684\u4e24\u500d\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2ai\u8f93\u5165\u4e24\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u5c31\u4f1aRE\u3002\n\n\u52a0\u8fb9\u7684\u6b65\u9aa4\u53ef\u4ee5\u72ec\u7acb\u51fa\u6765\u6210\u4e3a\u4e00\u4e2a\u6a21\u677f\uff1a\n```\nvoid add(int x,int y) {\n\ta[++cnt].v=y,a[cnt].nxt=head[x],head[x]=cnt,d[x]++;\n\ta[++cnt].v=x,a[cnt].nxt=head[y],head[y]=cnt,d[y]++;\n}\n```\n\u6b64\u5904\u52a0\u7684\u662f\u53cc\u5411\u8fb9\uff0c\u82e5\u52a0\u7684\u662f\u4ecex\u5230y\u6709\u5411\u8fb9\uff0c\u53ea\u9700\u6539\u6210\n```\na[++cnt].v=x,a[cnt].nxt=head[y],head[y]=cnt,d[y]++;\n\n```\n\u5373\u53ef\u3002\n\n\u5176\u4e2da[++cnt].v=x\u8868\u793a\u5f53\u524d\u8282\u70b9\u4e3ax\uff0c\u8ba1\u6570\u52a01\uff1b\na[cnt].nxt=head[y]\u8868\u793a\u4e0b\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u8fde\u7684\u8282\u70b9\u662fy;\nd[y]++\u8868\u793ay\u7684\u5ea6\u6570\u52a01\u3002\n\n\u62d3\u6251\u7684\u90e8\u5206\u4e5f\u5f88\u503c\u5f97\u7814\u7a76\u3002\u9996\u5148\u628a\u51fa\u5ea6\u4e3a1\u7684\u8282\u70b9\u63a8\u5165\u961f\u5217\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5728\u961f\u5217\u4e2d\u7684\u70b9\u5bfb\u627e\u4e0e\u4e4b\u76f8\u8fde\u7684\u8282\u70b9\uff0c\u5c06\u8fb9\u65ad\u53bb\uff0c\u540c\u65f6\u5c06\u6240\u641c\u7684\u70b9\u7684\u5ea6\u6570\u51cf1\uff0c\u6df1\u5ea6\u52a01\uff0c\u82e5\u51cf1\u540e\u8be5\u70b9\u7684\u51fa\u5ea6\u4e3a1\uff0c\u5219\u8be5\u70b9\u5c31\u6210\u4e3a\u4e86\u65b0\u7684\u201c\u53f6\u5b50\u8282\u70b9\u201d\uff0c\u5982\u6b64\u5faa\u73af\u4e0b\u53bb\uff0c\u5c31\u80fd\u6c42\u51fa\u6240\u6709\u6df1\u5ea6\u4e0b\u7684\u8282\u70b9\u4e2a\u6570\u3002\n\n\u6700\u540e\u5728\u8ba1\u7b97\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8981\u77e5\u9053\u4e24\u4e2a\u5c0f\u5b9a\u7406\uff1a\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u4e00\u6761\u6700\u957f\u7684\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u5fc5\u5b9a\u662f\u4e24\u4e2a\u53f6\u5b50\u8282\u70b9\uff1b\u540c\u65f6\uff0c\u5728\u4e00\u6761\u8def\u5f84\u4e2d\uff0c\u540c\u4e00\u4e2a\u6df1\u5ea6\u7684\u8282\u70b9\u6700\u591a\u88ab\u8986\u76d6\u4e24\u4e2a\u3002\u90a3\u4e48\uff0cans+=min(l<<1,tot[i])\u5c31\u8868\u793a\u82e5\u8be5\u6df1\u5ea6\u8282\u70b9\u7684\u4e2a\u6570\u5927\u4e8e\u8def\u5f84\u6570*2\uff0c\u5219\u8986\u76d6\u7684\u8282\u70b9\u6570\u5c31\u662f\u8def\u5f84\u6570 *2\uff0c\u53cd\u4e4b\u5c31\u7b49\u4e8e\u8282\u70b9\u7684\u4e2a\u6570\u3002\n\n```\n#include<iostream>\n#include<stdio.h>\n#include<queue>\nusing namespace std;\nconst int maxn=1e6+5;\nint cnt=0;\n\nstruct node {\n\tint v,nxt;\n} a[maxn<<1];\n\nqueue<int>q;\nint head[maxn],tot[maxn],d[maxn],deep[maxn];\nbool vis[maxn];\n\nvoid add(int x,int y) {\n\ta[++cnt].v=y,a[cnt].nxt=head[x],head[x]=cnt,d[x]++;\n\ta[++cnt].v=x,a[cnt].nxt=head[y],head[y]=cnt,d[y]++;\n}\n\nint main() {\n\tint n,l;\n\tscanf(\"%d %d\",&n,&l);\n\tfor(int i=1,x,y; i<n; i++) {\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tadd(x,y);\n\t}\n\tfor(int i=1; i<=n; i++)if(d[i]==1)vis[i]=1,tot[deep[i]=1]++,q.push(i);\n\twhile(!q.empty()) {\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[now]; i; i=a[i].nxt)\n\t\t\tif((--d[a[i].v])==1&&!vis[a[i].v])\n\t\t\t\tvis[a[i].v]=1,tot[deep[a[i].v]=deep[now]+1]++,q.push(a[i].v);\n\t}\n\tint ans=0;\n\tfor(int i=1; tot[i]; i++)ans+=min(l<<1,tot[i]);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1562494218,
        "uid": 200853,
        "name": "liunian",
        "ccfLevel": 0,
        "title": "Met(P3441)"
    },
    {
        "content": "## [\u9898\u76ee\u4f20\u9001\u5668](https://www.luogu.com.cn/problem/P3441)\n\n# \u9898\u610f\n\u9898\u76ee\u8bb2\u7684\u5f88\u6e05\u695a\uff0c\u8fd9\u91cc\u4e0d\u8fc7\u591a\u89e3\u91ca\u4e86\u3002\n\n# \u601d\u8def\n\u672c\u9898\u4f7f\u7528\u7684\u7b97\u6cd5\u662f**\u8d2a\u5fc3**\u3002\n\n\u9996\u5148\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u9009\u62e9\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u4ece\u53f6\u5b50\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u3002\n\u5047\u5982\u6211\u4eec\u8981\u9009 $a$ \u6761\u8def\u5f84\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8def\u5f84\u4e0d\u5171\u7528\u53f6\u5b50\uff0c\u6240\u4ee5\u5bf9\u4e8e\u53f6\u5b50\u8282\u70b9\uff0c\u6211\u4eec\u80fd\u8986\u76d6 $2 \\times a$ \u7684\u70b9\uff0c\u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u53bb\u6389\uff0c\u90a3\u4e48\u4e0a\u4e00\u5c42\u7684\u8282\u70b9\u5c31\u53d8\u6210\u4e86\u65b0\u7684\u53f6\u5b50\u8282\u70b9\u3002\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u662f\u4e00\u6837\u7684\u95ee\u9898\uff1a\u7406\u60f3\u60c5\u51b5\u4e0b\u6211\u4eec\u8fd8\u80fd\u8986\u76d6 $2 \\times a$ \u7684\u53f6\u5b50\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5f53\u53f6\u5b50\u8282\u70b9\u7684\u6570\u91cf\u4e0d\u591f $2 \\times a$\uff0c\u4e5f\u5c31\u662f\u6709\u7684\u8def\u5f84\u4f1a\u6709\u76f8\u4ea4\uff0c\n\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u8d2a\u5fc3\u7684\u505a\u6cd5\uff1a\u679a\u4e3e\u53f6\u5b50\u8282\u70b9\u7684\u6570\u91cf $s$\uff0c$\\operatorname{min}(s,2 \\times a)$ \u5c31\u662f\u6211\u4eec\u8fd9\u4e00\u6b21\u80fd\u8986\u76d6\u7684\u70b9\u6570\uff0c\u7136\u540e\u6211\u4eec\u628a\u53f6\u5b50\u8282\u70b9\u53bb\u6389\uff0c\u4f1a\u5f97\u5230\u65b0\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u91cd\u590d\u4e0a\u9762\u7684\u505a\u6cd5\u76f4\u5230\u53bb\u6389\u6240\u6709\u7684\u3002\n\n\u5f53\u8fd9\u4e2a\u70b9\u7684\u51fa\u5ea6\u6216\u5165\u5ea6\u4e3a $1$ \u65f6\uff08\u65e0\u5411\u56fe\uff09\uff0c\u8fd9\u4e2a\u70b9\u5c31\u662f\u53f6\u5b50\u8282\u70b9\uff08\u6211\u7684\u4ee3\u7801\u4e2d\u8bb0\u5f55\u7684\u662f\u51fa\u5ea6\uff09\u3002\n\n\u601d\u8003\u5b8c\u4e4b\u540e\u628a\u8fd9\u4e2a\u627e\u53f6\u5b50\u8282\u70b9\u548c\u5220\u53f6\u5b50\u8282\u70b9\u7684\u8fc7\u7a0b\u653e\u5728\u4e00\u4e2a bfs \u4e2d\u5c31\u884c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n \\times \\operatorname{log}^2 n)$\u3002\n\n## AC Code\n```cpp\n#include<bits/stdc++.h>  // \u5f00\u59cb\u4e86\nusing namespace std;\nconst int maxn=1e7+10;\nint n,m,cnt=0,ans=0;\nint head[maxn],out[maxn],dep[maxn],sum[maxn];\nqueue<int> q; \nstruct edge{  // \u5efa\u56fe\n\tint nxt,to;\n}e[maxn];\nvoid add(int x,int y){  // \u52a0\u8fb9\n\tout[x]++;\n\te[++cnt]={head[x],y};\n\thead[x]=cnt;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);  // \u8f93\u5165\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(out[i]==1)\tq.push(i),dep[i]=1,sum[1]++; \n\t}\n\twhile(!q.empty()){  // BFS\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint t=e[i].to;\n\t\t\tif(!dep[t]){\n\t\t\t\tout[t]--;\n\t\t\t\tif(out[t]==1){\n\t\t\t\t\tdep[t]=dep[u]+1;\n\t\t\t\t\tsum[dep[t]]++;\n\t\t\t\t\tq.push(t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){  // \u8d2a\u5fc3\n\t\tans+=min(m*2,sum[i]);\n\t}\n\tprintf(\"%d\",ans);  // \u8f93\u51fa\n\treturn 0;  // \u518d\u89c1\n}\n```",
        "postTime": 1671805202,
        "uid": 739274,
        "name": "yaohaoyou",
        "ccfLevel": 5,
        "title": "P3441 [POI2006]MET-Subway \u9898\u89e3"
    }
]