[
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u5b57\u7b26\u4e32 $T$\uff0c\u5047\u8bbe\u5728\u524d\u7f00 $[1,r]$ \u4e2d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u53f3\u7aef\u70b9\uff09\u4e3a $last_T$\uff0c\u90a3\u4e48\u5f53\u5de6\u7aef\u70b9\u53d6\u5230 $[1,last_T-|T|+1]$ \u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u65f6\u5019\uff0c$T$ \u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f $1$ \u7684\u8d21\u732e\u3002\n\n\u91c7\u7528\u626b\u63cf\u7ebf\u7684\u601d\u8def\uff0c\u5bf9\u6bcf\u4e2a\u53f3\u7aef\u70b9\u7ef4\u62a4\u6240\u6709\u5de6\u7aef\u70b9\u7684\u7b54\u6848\u3002\n\n\u5982\u679c\u628a\u53cd\u4e32\u7684\u540e\u7f00\u6811\u5efa\u51fa\u6765\uff0c\u90a3\u4e48\u5c06\u53f3\u7aef\u70b9\u53f3\u79fb\u4e00\u4f4d\u5230\u8fbe $r$ \u5c31\u76f8\u5f53\u4e8e\u5c06\u540e\u7f00\u6811\u4e0a\u4e00\u6761\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5b57\u7b26\u4e32\u7684 $last$ \u4fee\u6539\u6210 $r$\u3002\u5982\u679c\u628a\u8fd9\u4e2a\u770b\u4f5c LCT \u4e2d\u7684 access \u64cd\u4f5c\uff0c\u53ef\u4ee5\u53d1\u73b0\u5212\u5206\u51fa\u6765\u7684\u6bcf\u6761\u94fe\u4e0a\u7684 $last$ \u90fd\u76f8\u540c\uff0c\u5e76\u4e14\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8fde\u7eed\u3002\n\n\u56e0\u6b64\u76f4\u63a5\u7528 LCT \u8fdb\u884c\u4fee\u6539\uff0c\u5c06\u94fe\u5408\u5e76\u7684\u65f6\u5019\u5c31\u662f\u5c06\u4e00\u6bb5\u957f\u5ea6\u8fde\u7eed\u7684\u672c\u8d28\u4e0d\u540c\u5b57\u7b26\u4e32\u7684 $last$ \u8fdb\u884c\u4fee\u6539\uff0c\u8fd9\u4e2a\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u53ef\u4ee5\u8868\u73b0\u6210\u533a\u95f4\u52a0\u4e00\u4e2a\u516c\u5dee\u4e3a $1$ \u7684\u7b49\u5dee\u6570\u5217\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230 access \u64cd\u4f5c\u7684\u6b21\u6570\u662f\u5747\u644a $O(logn)$\uff0c\u90a3\u4e48\u53ea\u4f1a\u8fdb\u884c $O(nlogn)$ \u6b21\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u4fee\u6539\uff0c\u590d\u6742\u5ea6\u662f $O(nlog^2n)$ \u7684\u3002\u800c\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u662f $O(logn)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(nlog^2n+mlogn)$\u3002\n\n\u6211\u7684\u5b9e\u73b0\u4e2d\u5c06\u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217\u5355\u70b9\u67e5\u8be2\u8f6c\u5316\u6210\u533a\u95f4\u52a0\u5e38\u6570\u533a\u95f4\u67e5\u8be2\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u7684\u65f6\u5019\u611f\u89c9\u7a0d\u5fae\u597d\u5199\u4e00\u4e9b\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define P pair<int,int>\n#define ll long long int\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\nconst int N=2e5+1,INF=0x3f3f3f3f;\nV cmin(int&x,int y){if(y-x>>31)x=y;}\nnamespace SAM{\n\tint ch[N][26],fa[N],len[N],tot=1,last=1;\n\tV cpy(int x,int y){FOR(i,0,25)ch[x][i]=ch[y][i];}\n\tI ins(int x){\n\t\tint p(last),np,q,nq;\n\t\tlen[np=last=++tot]=len[p]+1;\n\t\twhile(p&&!ch[p][x])ch[p][x]=np,p=fa[p];\n\t\tif(!p)return fa[np]=1,last;\n\t\tif(len[q=ch[p][x]]==len[p]+1)return fa[np]=q,last;\n\t\tcpy(nq=++tot,q),len[nq]=len[p]+1,fa[nq]=fa[q],fa[q]=fa[np]=nq;\n\t\twhile(p&&ch[p][x]==q)ch[p][x]=nq,p=fa[p];\n\t\treturn last;\n\t}\n}\nnamespace seg{\n\tll c[N],d[N];\n\tI lowbit(int x){return x&-x;}\n\tV add(int x,int y){for(ll w=x*y;x<N;x+=lowbit(x))c[x]+=y,d[x]+=w;}\n\tll ask(int x){\n\t\tll out=0,tmp=0;\n\t\tfor(int p=x;p;p^=lowbit(p))out+=c[p],tmp+=d[p];\n\t\treturn out*(x+1)-tmp;\n\t}\n\tll ask(int l,int r){return ask(r)-ask(l-1);}\n\tV add(int l,int r,int x){add(l,x),add(r+1,-x);}\n}\nnamespace LCT{\n\tint fa[N],ch[N][2],last[N],tag[N],len[N],val[N];\n\tI id(int x){return x==ch[fa[x]][1];}\n\tI nrt(int x){return x==ch[fa[x]][id(x)];}\n\tV upd(int x){val[x]=len[x];FOR(i,0,1)cmin(val[x],val[ch[x][i]]);}\n\tV rot(int x){\n\t\tint y=fa[x],z=fa[y],p=id(x),w=ch[x][p^1];\n\t\tif(nrt(y))ch[z][id(y)]=x;if(w)fa[w]=y;\n\t\tfa[y]=x,fa[x]=z,ch[x][p^1]=y,ch[y][p]=w,upd(y),upd(x);\n\t}\n\tV add(int x,int w){last[x]=tag[x]=w;}\n\tV psd(int x){if(tag[x])FOR(i,0,1)add(ch[x][i],tag[x]);tag[x]=0;}\n\tV psa(int x){if(nrt(x))psa(fa[x]);psd(x);}\n\tV spl(int x){\n\t\tfor(psa(x);nrt(x);rot(x))if(nrt(fa[x]))\n\t\t\trot(id(x)==id(fa[x])?fa[x]:x);\n\t}\n\tV acc(int x,int now){\n\t\tfor(int p=x,y=0;p;p=fa[y=p]){\n\t\t\tspl(p),ch[p][1]=y,upd(p);\n\t\t\tif(last[p])seg::add(last[p]-SAM::len[p]+1,last[p]-val[p]+1,-1);\n\t\t}\n\t\tspl(x),add(x,now),seg::add(now-SAM::len[x]+1,now,1);\n\t}\n\tV init(){\n\t\tval[0]=INF;\n\t\tFOR(i,1,SAM::tot){\n\t\t\tval[i]=len[i]=SAM::len[fa[i]=SAM::fa[i]]+1;\n\t\t\ttag[i]=ch[i][0]=ch[i][1]=last[i]=0;\n\t\t}\n\t}\n}\nchar a[N];\nll ans[N];\nvector<P>q[N];\nint T,n,m,l,r,pos[N];\nint main(){\n\tscanf(\"%s%d\",a+1,&m),n=strlen(a+1);\n\tFOR(i,1,m)scanf(\"%d%d\",&l,&r),q[r].push_back(P(i,l));\n\tFOR(i,1,n)pos[i]=SAM::ins(a[i]-'a');\n\tLCT::init();\n\tFOR(i,1,n){\n\t\tLCT::acc(pos[i],i);\n\t\tfor(P x:q[i])ans[x.first]=seg::ask(x.second,i);\n\t}\n\tFOR(i,1,m)cout<<ans[i]<<'\\n';\n\treturn 0;\n}\n```",
        "postTime": 1586082191,
        "uid": 109236,
        "name": "Fuyuki",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P6292 \u3010\u3010\u6a21\u677f\u3011\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "\u4e3a\u4e86\u6c42\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5148\u8003\u8651\u300c\u9759\u6001\u533a\u95f4\u4e0d\u540c\u5143\u7d20\u79cd\u7c7b\u6570\u300d\u7684\u7ecf\u5178\u95ee\u9898\u3002\u4e0b\u9762\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u5e38\u89c1\u89e3\u6cd5\uff1a\n\n>\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684\u53f3\u7aef\u70b9 $i$\uff0c\u8d2a\u5fc3\u5730\u53ea\u8003\u8651 $i$ \u4e4b\u524d\u6bcf\u79cd\u5143\u7d20\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u6309\u4e0b\u6807\u4ece\u5de6\u5230\u53f3\u626b\u63cf\u7ebf\uff0c\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u5728\u524d\u7f00 $i$ \u79cd\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u3002\u52a0\u5165\u7b2c $i$ \u4e2a\u5143\u7d20\u65f6\uff0c\u5728\u7ebf\u6bb5\u6811\u4e2d\u628a\u5f53\u524d\u4f4d\u7f6e $+1$\uff0c\u628a\u4e0a\u4e00\u4e2a\u76f8\u540c\u5143\u7d20\u7684\u4f4d\u7f6e $-1$\u3002\u8be2\u95ee\u76f4\u63a5\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u91c7\u7528\u76f8\u540c\u7684\u601d\u8def\u3002\u628a\u672c\u8d28\u76f8\u540c\u7684\u5b50\u4e32\u770b\u4f5c\u540c\u4e00\u79cd\u5143\u7d20\uff0c\u90a3\u4e48\u63d2\u5165\u4f4d\u7f6e $i$ \u65f6\u5e94\u8be5\u5728\u7ebf\u6bb5\u6811\u4e2d\u52a0\u5165\u6240\u6709\u4ee5 $i$ \u7ed3\u5c3e\u7684\u5b50\u4e32\u7684\u8d21\u732e\u3002\u5b50\u4e32\u662f\u6709\u957f\u5ea6\u7684\uff0c\u4f46\u6211\u4eec\u53ea\u9700\u7ef4\u62a4\u5de6\u7aef\u70b9\u5373\u53ef\u3002\u90a3\u4e48\u300c\u5728\u7ebf\u6bb5\u6811\u4e2d\u628a\u5f53\u524d\u4f4d\u7f6e $+1$\u300d\u53ef\u4ee5\u76f4\u63a5\u4e00\u6b21\u533a\u95f4\u4fee\u6539\u6765\u5b8c\u6210\uff0c\u800c\u628a\u300c\u4e0a\u4e00\u4e2a\u76f8\u540c\u5143\u7d20\u7684\u4f4d\u7f6e $-1$\u300d\u76ee\u524d\u6765\u770b\u4e0d\u592a\u597d\u505a\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5b50\u4e32\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5bf9\u539f\u4e32\u5efa\u7acb\u540e\u7f00\u81ea\u52a8\u673a\u3002\u90a3\u4e48\u4ee5 $i$ \u7ed3\u5c3e\u7684\u5b50\u4e32\u5c31\u662f\u524d\u7f00 $i$ \u5bf9\u5e94\u7684\u8282\u70b9\u5728 $parent$ \u6811\u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\u3002\u7531\u540c\u4e00\u4e2a\u72b6\u6001\u8868\u793a\u7684\u5b50\u4e32\uff0c\u5b83\u4eec\u300c\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u300d\u7684\u53f3\u7aef\u70b9\u662f\u76f8\u540c\u7684\uff0c\u800c\u5de6\u7aef\u70b9\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u66b4\u529b\u8df3 $parent$ \u6811\u4e0a\u7956\u5148\u5e76\u5728\u7ebf\u6bb5\u6811\u4e0a\u533a\u95f4\u4fee\u6539\u6765\u8fbe\u5230\u76ee\u7684\u3002\u540c\u65f6\u8fd8\u9700\u8981\u628a\u8fd9\u6761\u94fe\u4e0a\u7684\u8282\u70b9\u90fd\u67d3\u6210 $i$ \u989c\u8272\uff0c\u8868\u793a\u628a\u8fd9\u4e9b\u5b50\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4fee\u6539\u4e3a $i$\u3002\u4f46\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u663e\u7136\u662f\u4e0d\u5bf9\u7684\uff0c\u9700\u8981\u5bfb\u6c42\u66f4\u4f18\u7684\u65b9\u6cd5\u3002\n\n\u53d1\u73b0\u989c\u8272\u76f8\u540c\u7684\u8282\u70b9\u7684\u8282\u70b9\u4f1a\u8fde\u6210\u4e00\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e00\u8d77\u5904\u7406\u3002\u7531\u4e8e\u53ea\u6709\u300c\u5c06\u67d0\u4e00\u70b9\u5230\u6839\u8282\u70b9\u7684\u989c\u8272\u67d3\u6210\u4e00\u79cd\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u989c\u8272\u300d\u8fd9\u4e00\u79cd\u64cd\u4f5c\uff0c\u6240\u6709\u9700\u8981\u5904\u7406\u7684\u94fe\u4e0a\u7684\u603b\u989c\u8272\u6570\u5b9e\u9645\u4e0a\u662f $O(n\\log n)$ \u7684\u3002\u539f\u56e0\u662f\u67d3\u8272\u64cd\u4f5c\u5176\u5b9e\u5bf9\u5e94\u7740 LCT \u7684 $\\text{Access}$ \u64cd\u4f5c\uff0c\u53ef\u4ee5\u5957\u7528\u5176\u590d\u6742\u5ea6\u8bc1\u660e\u65b9\u6cd5\u3002\u6240\u4ee5\u5728\u5b9e\u73b0\u65f6\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 LCT \u6765\u7ef4\u62a4\uff0c\u56e0\u4e3a\u4e00\u6761\u5b9e\u94fe\u4e0a\u7684\u989c\u8272\u4e00\u5b9a\u90fd\u662f\u76f8\u540c\u7684\uff0c\u76f4\u63a5\u6a21\u62df $\\text{Access}$ \u7684\u8fc7\u7a0b\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6\u662f LCT \u7684\u590d\u6742\u5ea6\u52a0\u4e0a\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\uff0c\u4e3a $O(n\\log^2n+q\\log n)$\u3002\u5982\u679c\u8981\u6c42\u5728\u7ebf\u5c31\u4e0a\u53ef\u6301\u4e45\u5316\u5427\u3002\n\n\u4e0b\u9762\u662f\u4e24\u9053\u9009\u505a\u7684\u9898\u76ee\uff1a\n\n- [\u6811\u70b9\u6d82\u8272](https://www.luogu.com.cn/problem/P3703) \u8fd9\u9053\u9898\u5bf9\u6700\u540e\u4e00\u6bb5\u7684\u7406\u89e3\u4f1a\u6709\u5f88\u5927\u542f\u53d1\uff1b\n- [\u4e8b\u60c5\u7684\u76f8\u4f3c\u5ea6](https://loj.ac/problem/6041) \u4e00\u9053\u53ef\u4ee5\u7528\u7c7b\u4f3c Trick \u89e3\u51b3\u7684\u9898\u76ee\u3002\n\n\u7136\u540e\u662f\u8fd9\u9053\u9898\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int MAXN=220000;\nint n, q;\nchar s[MAXN];\nnamespace SAM\n{\n\tstruct Node\n\t{\n\t\tint nxt[26], fail, len;\n\t} st[MAXN];\n\tint m, root, lst;\n\tint pos[MAXN];\n\tinline int newNode(int l)\n\t{\n\t\tm++;\n\t\tmemset(st[m].nxt, 0, sizeof st[m].nxt);\n\t\tst[m].fail=0, st[m].len=l;\n\t\treturn m;\n\t}\n\tvoid extend(int x)\n\t{\n\t\tint p=lst, np=newNode(st[p].len+1); lst=np;\n\t\twhile (p&&!st[p].nxt[x]) st[p].nxt[x]=np, p=st[p].fail;\n\t\tif (!p) { st[np].fail=root; return; }\n\t\tint q=st[p].nxt[x]; if (st[q].len==st[p].len+1) { st[np].fail=q; return; }\n\t\tint nq=newNode(st[p].len+1); memcpy(st[nq].nxt, st[q].nxt, sizeof st[q].nxt);\n\t\tst[nq].fail=st[q].fail; st[np].fail=st[q].fail=nq;\n\t\twhile (p&&st[p].nxt[x]==q) st[p].nxt[x]=nq, p=st[p].fail;\n\t}\n\tvoid build()\n\t{\n\t\tm=0; lst=root=newNode(0);\n\t\tfor (int i=1; i<=n; i++)\n\t\t\textend(s[i]-'a'), pos[i]=lst;\n\t}\n}\nnamespace SGT\n{\n\tstruct Node\n\t{\n\t\tint l, r;\n\t\tll sum; int add;\n\t} tr[4*MAXN];\n\t#define lc (o<<1)\n\t#define rc (o<<1|1)\n\tinline void pushup(int o)\n\t{\n\t\ttr[o].sum=tr[lc].sum+tr[rc].sum;\n\t}\n\tinline void add(int o, int k)\n\t{\n\t\ttr[o].sum+=1ll*k*(tr[o].r-tr[o].l+1);\n\t\ttr[o].add+=k;\n\t}\n\tinline void pushdown(int o)\n\t{\n\t\tif (tr[o].add)\n\t\t{\n\t\t\tadd(lc, tr[o].add);\n\t\t\tadd(rc, tr[o].add);\n\t\t\ttr[o].add=0;\n\t\t}\n\t}\n\tvoid build(int o, int l, int r)\n\t{\n\t\ttr[o].l=l, tr[o].r=r;\n\t\ttr[o].sum=tr[o].add=0;\n\t\tif (l==r) return;\n\t\tint mid=l+r>>1;\n\t\tbuild(lc, l, mid), build(rc, mid+1, r);\n\t}\n\tvoid modify(int o, int l, int r, int k)\n\t{\n\t\tif (tr[o].l>r||tr[o].r<l) return;\n\t\tif (l<=tr[o].l&&tr[o].r<=r) { add(o, k); return; }\n\t\tpushdown(o);\n\t\tmodify(lc, l, r, k), modify(rc, l, r, k);\n\t\tpushup(o);\n\t}\n\tll query(int o, int l, int r)\n\t{\n\t\tif (tr[o].l>r||tr[o].r<l) return 0;\n\t\tif (l<=tr[o].l&&tr[o].r<=r) return tr[o].sum;\n\t\tpushdown(o);\n\t\treturn query(lc, l, r)+query(rc, l, r);\n\t}\n\t#undef lc\n\t#undef rc\n}\nnamespace LCT\n{\n\tstruct Node\n\t{\n\t    int val, cov;\n\t    int fa, c[2];\n\t} tr[MAXN];\n\t#define lc tr[x].c[0]\n\t#define rc tr[x].c[1]\n\t#define par tr[x].fa\n\tinline bool isroot(int x)\n\t{\n\t    return tr[par].c[0]!=x&&tr[par].c[1]!=x;\n\t}\n\tinline void cover(int x, int k)\n\t{\n\t\ttr[x].val=tr[x].cov=k;\n\t}\n\tinline void pushdown(int x)\n\t{\n\t\tif (tr[x].cov)\n\t\t{\n\t\t\tif (lc) cover(lc, tr[x].cov);\n\t\t\tif (rc) cover(rc, tr[x].cov);\n\t\t\ttr[x].cov=0;\n\t\t}\n\t}\n\tinline bool getlr(int x)\n\t{\n\t    return tr[par].c[1]==x;\n\t}\n\tinline void rotate(int x)\n\t{\n\t    int y=par, z=tr[y].fa;\n\t    bool k=getlr(x); int w=tr[x].c[!k];\n\t    if (!isroot(y)) tr[z].c[getlr(y)]=x; par=z;\n\t    tr[y].c[k]=w; if (w) tr[w].fa=y;\n\t    tr[x].c[!k]=y; tr[y].fa=x;\n\t}\n\tvoid pushall(int x)\n\t{\n\t    if (!isroot(x)) pushall(par);\n\t    pushdown(x);\n\t}\n\tvoid splay(int x)\n\t{\n\t    pushall(x);\n\t    while (!isroot(x))\n\t    {\n\t        if (!isroot(par)) rotate(getlr(x)^getlr(par)?x:par);\n\t        rotate(x);\n\t    }\n\t}\n\tvoid access(int x, int p)\n\t{\n\t\tint y=0;\n\t    while (x)\n\t\t{\n\t\t\tsplay(x);\n\t\t\tif (int k=tr[x].val)\n\t\t\t\tSGT::modify(1, k-SAM::st[x].len+1, k-SAM::st[par].len, -1);\n\t\t\trc=y, y=x, x=par;\n\t\t}\n\t\tcover(y, p);\n\t\tSGT::modify(1, 1, p, 1);\n\t}\n\tvoid build()\n\t{\n\t\tfor (int i=2; i<=SAM::m; i++)\n\t\t{\n\t\t\ttr[i].val=tr[i].cov=0;\n\t\t\ttr[i].c[0]=tr[i].c[1]=0;\n\t\t\ttr[i].fa=SAM::st[i].fail;\n\t\t}\n\t}\n\t#undef lc\n\t#undef rc\n\t#undef par\n}\nstruct Query\n{\n\tint l, r, id;\n\tbool operator < (const Query& rhs) const\n\t{\n\t\treturn r<rhs.r;\n\t}\n} a[MAXN];\nll ans[MAXN];\nint main()\n{\n//\tfreopen(\"P6292.in\", \"r\", stdin);\n//\tfreopen(\"P6292.out\", \"w\", stdout);\n\tscanf(\"%s\", s+1), n=strlen(s+1);\n\tSAM::build();\n\tLCT::build();\n\tscanf(\"%d\", &q);\n\tfor (int i=1; i<=q; i++)\n\t{\n\t\tscanf(\"%d%d\", &a[i].l, &a[i].r);\n\t\ta[i].id=i;\n\t}\n\tsort(a+1, a+q+1);\n\tSGT::build(1, 1, n);\n\tfor (int i=1, j=1; i<=q; i++)\n\t{\n\t\twhile (j<=a[i].r)\n\t\t\tLCT::access(SAM::pos[j], j), j++;\n\t\tans[a[i].id]=SGT::query(1, a[i].l, a[i].r);\n\t}\n\tfor (int i=1; i<=q; i++) printf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1586780175,
        "uid": 152449,
        "name": "\u7075\u68a6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6292 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "\u77e5\u8bc6\u70b9\uff1aSAM\uff0cLCT\uff0c\u7ebf\u6bb5\u6811\n\n\u539f\u9898\u9762\uff1a[Luogu](https://www.luogu.com.cn/problem/P6292)\u3002\n\n## \u7b80\u8ff0\n\n>\u7ed9\u5b9a\u4e00\u957f\u5ea6\u4e3a $n$ \u7684\u5b57\u7b26\u4e32 $S$\uff0c\u7ed9\u5b9a $m$ \u6b21\u8be2\u95ee\u3002\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u53c2\u6570 $l,r$\uff0c\u6c42\u7531 $s$ \u7684\u7b2c $l$ \u5230\u7b2c $r$ \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5305\u542b\u591a\u5c11\u4e2a\u672c\u8d28\u4e0d\u540c\u7684\u5b50\u4e32\u3002  \n>\u5b9a\u4e49\u4e24\u4e2a\u5b57\u7b26\u4e32 $a,b$ \u76f8\u540c\u5f53\u4e14\u4ec5\u5f53 $|a|=|b|$ \u4e14\u5bf9\u4e8e $i\\in[1,|a|]$ \u90fd\u6709  $a_i=b_i$\u3002  \n>$1\\le n\\le 10^5$\uff0c$1\\le m\\le 2\\times 10^5$\u3002  \n>1S\uff0c500MB\u3002\n\n## \u5206\u6790\n\n\u4e00\u4e9b\u7ea6\u5b9a\uff1a\n\n\u8bb0 $s$ \u7684\u7b2c $l$ \u5230\u7b2c $r$ \u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b50\u4e32\u4e3a $s[l:r]$\u3002  \nSAM \u7684\u72b6\u6001 $u$ \u7684\u540e\u7f00\u94fe\u63a5\u4e3a $\\operatorname{link}(u)$\u3002\u5176\u7ef4\u62a4\u7684\u5b57\u7b26\u4e32\u7684\u7ec8\u6b62\u96c6\u5408\u4e3a $\\operatorname{endpos}(u)$\uff0c\u5176\u4e2d\u6700\u957f\u4e32\u7684\u957f\u5ea6\u4e3a $\\operatorname{len}(u)$\uff0c\u3002\n\n### \u7b97\u6cd5\u4e00\n\n\u5148\u8003\u8651\u6700\u7b80\u5355\u7684\u66b4\u529b\u3002  \n\n\u5957\u8def\u5730\u8003\u8651\u6b64\u7c7b\u533a\u95f4\u65e0\u91cd\u95ee\u9898\uff08[P1972 [SDOI2009]HH\u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972)\uff09\uff0c\u79bb\u7ebf\u8be2\u95ee\u5e76\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\u4e4b\u540e\u679a\u4e3e\u53f3\u7aef\u70b9\uff0c\u8003\u8651\u65b0\u52a0\u5165\u65b0\u5b57\u7b26\u7684\u5f71\u54cd\uff0c\u5e76\u56de\u7b54\u4ee5\u679a\u4e3e\u4f4d\u7f6e\u4e3a\u53f3\u7aef\u70b9\u7684\u8be2\u95ee\u3002\u8bbe\u5f53\u524d\u679a\u4e3e\u5230\u7684\u53f3\u7aef\u70b9\u4e3a $r$\uff0c\u67d0\u6b21\u8be2\u95ee\u7684\u533a\u95f4\u4e3a $[l,r]$\u3002\u5bf9\u4e8e\u524d\u7f00 $s[1:r]$ \u4e2d\u7684\u4e00\u4e2a\u5b50\u4e32 $t$\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u5de6\u7aef\u70b9 $p$ \u6ee1\u8db3 $p\\ge l$ \u65f6\uff0c\u5b83\u4f1a\u5bf9\u8fd9\u6b21\u8be2\u95ee\u505a\u51fa 1 \u7684\u8d21\u732e\u3002  \n\u7531\u4e0a\uff0c\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6743\u503c\u6570\u5217\u3002\u5bf9\u4e8e\u524d\u7f00 $s[1:r]$ \u4e2d\u7684\u6bcf\u79cd\u672c\u8d28\u4e0d\u540c\u5b50\u4e32 $t$\uff0c\u8bb0\u5176\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u5de6\u7aef\u70b9\u4e3a $p$\uff0c\u4ee4\u6743\u503c\u6570\u5217\u4f4d\u7f6e $p$ \u52a0 1\u3002\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u7684\u7b54\u6848\u5373\u4e3a\u6743\u503c\u6570\u5217\u5bf9\u5e94\u533a\u95f4\u7684\u548c\u3002\n\n\u8003\u8651\u53f3\u7aef\u70b9 $r$ \u53f3\u79fb\u4e00\u4f4d\u7684\u5f71\u54cd\u3002\u53d1\u73b0\u4ec5\u4f1a\u5f71\u54cd\u4f5c\u4e3a\u524d\u7f00 $s[1:r+1]$ \u7684\u540e\u7f00\u7684\u5b50\u4e32\u7684\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u3002\u53c8\u53d1\u73b0\u8fd9\u4e9b\u5b50\u4e32\u5bf9\u5e94\u7684\u72b6\u6001\u6070\u597d\u5c31\u662f\u524d\u7f00 $s[1:r + 1]$ \u7684 SAM \u4e0a\u4ece $s[1:r+1]$ \u5bf9\u5e94\u72b6\u6001\u5230\u6839\u7684\u94fe\u4e0a\u7684\u6240\u6709\u72b6\u6001\uff0c\u4e8e\u662f\u8003\u8651\u5bf9\u6bcf\u4e2a SAM \u7684\u72b6\u6001 $u$ \u7ef4\u62a4\u5176 $\\operatorname{endpos}$ \u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5373\u5176\u4e2d\u6240\u6709\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u53f3\u7aef\u70b9\uff0c\u8bb0\u4e3a $\\operatorname{end}_u$\u3002SAM \u7684\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u5b50\u4e32\u7684 $\\operatorname{endpos}$ \u96c6\u5408\u76f8\u540c\uff0c\u5219\u540c\u4e00\u72b6\u6001\u6240\u6709\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u5de6\u7aef\u70b9\u4e5f\u6784\u6210\u4e86\u4e00\u6bb5\u533a\u95f4\uff0c\u5373\u4e3a $[\\operatorname{end}_u - \\operatorname{len}(u) + 1, \\operatorname{end}_u - \\operatorname{len}(\\operatorname{link} (u))]$\u3002\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u533a\u95f4\u7684\u5e76\u5373\u4e3a $[1,r + 1]$\u3002\n\n\u8003\u8651\u52a8\u6001\u7ef4\u62a4 SAM\uff0c\u5728\u52a0\u5165\u65b0\u5b57\u7b26\u540e\u66b4\u529b\u8df3 parent \u6811\u679a\u4e3e\u6240\u6709\u88ab\u5f71\u54cd\u7684\u4e32\u5bf9\u5e94\u72b6\u6001\uff0c\u66f4\u65b0\u5b83\u4eec\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u4f4d\u7f6e\u7684\u5de6\u7aef\u70b9\u5bf9\u6743\u503c\u533a\u95f4\u7684\u8d21\u732e\u5373\u53ef\u3002\u6743\u503c\u6570\u5217\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5355\u6b21\u53f3\u7aef\u70b9\u79fb\u52a8\u590d\u6742\u5ea6 $O(n\\log n)$ \u7ea7\u522b\uff0c\u603b\u590d\u6742\u5ea6 $O((n^2 + m)\\log n)$ \u7ea7\u522b\u3002\n\n### \u7b97\u6cd5\u4e8c\n\n\u8003\u8651\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\u5728 parent \u6811\u4e0a\u8fdb\u884c\u4e86\u4ec0\u4e48\u64cd\u4f5c\uff1a\n\n- \u4ece\u94fe\u5e95\u66b4\u529b\u4e0a\u8df3\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u72b6\u6001\u4e0a\u5bf9\u5e94\u533a\u95f4\u8fdb\u884c\u533a\u95f4\u51cf\u3002\n- \u5c06\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684 $\\operatorname{end}_u$ \u90fd\u4fee\u6539\u4e3a $r+1$\u3002\n\n\u74f6\u9888\u5728\u4e8e\u64cd\u4f5c 1 \u4e2d\u6bcf\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u533a\u95f4\u4e0d\u540c\uff0c\u5fc5\u987b\u66b4\u529b\u4e0a\u8df3\u3002\u4f46\u53ef\u4ee5\u53d1\u73b0\u64cd\u4f5c 1 \u7c7b\u4f3c LCT \u7684 access \u64cd\u4f5c\uff0c\u64cd\u4f5c 2 \u662f\u4ee5\u6839\u4e3a\u7aef\u70b9\u7684\u94fe\u8986\u76d6\uff0c\u8003\u8651\u4f7f\u7528 LCT \u7ef4\u62a4 parent \u6811\u3002\n\n\u53d1\u73b0 parent \u6811\u662f\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4e14\u94fe\u8986\u76d6\u64cd\u4f5c\u4e00\u7aef\u70b9\u4e3a\u6839\uff0c\u4ec5\u9700\u5bf9\u88ab\u4fee\u6539\u8282\u70b9 access \u6210\u5b9e\u94fe\u540e\u5373\u53ef\u76f4\u63a5\u8fdb\u884c\u8986\u76d6\u3002\u4e14\u6839\u636e\u6b64\u8fc7\u7a0b\u53ef\u77e5\uff0c\u4e00\u6761\u5b9e\u94fe\u6240\u6709\u72b6\u6001\u7684 $\\operatorname{end}$ \u5747\u76f8\u540c\uff0c\u5b83\u4eec\u5f71\u54cd\u7684\u4f4d\u7f6e\u6784\u6210\u4e86\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\uff0c\u53c8 LCT \u4e0a\u4e00\u4e2a\u70b9\u5230\u6839\u6700\u591a\u6709 $\\log n$ \u7ea7\u522b\u4e2a splay\uff0c\u533a\u95f4\u51cf\u7684\u6b21\u6570\u53d8\u4e3a $\\log n$ \u6b21\uff0c\u987a\u4fbf\u524a\u9664\u4e86\u64cd\u4f5c 1 \u9020\u6210\u7684\u74f6\u9888\u3002\n\n\u4f46\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\u3002\u5728\u52a8\u6001\u7ef4\u62a4 SAM \u7684\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fdb\u884c\u52a0\u8fb9\u5220\u8fb9\u64cd\u4f5c\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\u9700\u8981\u8fdb\u884c access\uff0c\u7834\u574f\u4e86\u4e0a\u8ff0\u94fe\u8986\u76d6\u5f97\u5230\u7684\u201c\u4e00\u6761\u5b9e\u94fe\u6240\u6709\u72b6\u6001\u7684 $\\operatorname{end}$ \u5747\u76f8\u540c\u201d\u7684\u4f18\u7f8e\u6027\u8d28\u3002  \n\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u52a8\u6001\u7ef4\u62a4 SAM\u3002\u53ef\u4ee5\u9884\u5148\u5efa\u7acb SAM\uff0c\u5e76\u7ef4\u62a4\u6bcf\u4e2a\u524d\u7f00\u5bf9\u5e94\u7684\u72b6\u6001\u3002\u4ee4\u521d\u59cb LCT \u4e2d\u7684\u8fb9\u5168\u4e3a\u865a\u8fb9\uff0cLCT \u64cd\u4f5c\u65f6\u5bf9\u7ef4\u62a4\u7684\u524d\u7f00\u72b6\u6001\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\u3002\u7531\u4e8e\u6bcf\u6b21\u94fe\u8986\u76d6\u7684\u5bf9\u8c61\uff0c\u90fd\u662f\u4e00\u6bb5\u524d\u7f00\u7684\u540e\u7f00\uff0c\u663e\u7136\u8fd9\u6837\u4e0d\u4f1a\u4f7f\u5f97\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u4e32\u505a\u51fa\u8d21\u732e\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6b63\u786e\u6027\u3002\n\n\u5355\u6b21\u53f3\u7aef\u70b9\u79fb\u52a8\u590d\u6742\u5ea6\u53d8\u4e3a $O(\\log^2 n)$ \u7ea7\u522b\uff0c\u603b\u590d\u6742\u5ea6 $O(n\\log^2 n + m\\log n)$ \u7ea7\u522b\u3002\n\n## \u4ee3\u7801\n\n\u53ea\u9700\u8981 access \u7684 LCT \u771f\u662f\u592a\u597d\u5199\u8fa3\uff01\n\n### \u7b97\u6cd5\u4e8c\n\n```cpp\n//\u77e5\u8bc6\u70b9\uff1aSAM\uff0cLCT\uff0c\u7ebf\u6bb5\u6811\n/*\nBy:Luckyblock\n*/\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#define LL long long\nconst int kN = 1e5 + 10;\n//=============================================================\nstruct Que {\n  int l, r, id;\n} q[kN << 1];\nint n, m, pos[kN];\nLL ans[kN << 1];\nchar S[kN];\n//=============================================================\ninline int read() {\n  int f = 1, w = 0;\n  char ch = getchar();\n  for (; !isdigit(ch); ch = getchar())\n    if (ch == '-') f = -1;\n  for (; isdigit(ch); ch = getchar()) w = (w << 3) + (w << 1) + (ch ^ '0');\n  return f * w;\n}\nvoid Chkmax(int &fir, int sec) {\n  if (sec > fir) fir = sec;\n}\nvoid Chkmin(int &fir, int sec) {\n  if (sec < fir) fir = sec;\n}\nbool CMP(Que fir_, Que sec_) {\n  return fir_.r < sec_.r;\n}\nnamespace Seg {\n  #define ls (now_<<1)\n  #define rs (now_<<1|1)\n  #define mid ((L_+R_)>>1)\n  const int kNode = kN << 2;\n  LL sum[kNode], tag[kNode];\n  void Pushup(int now_) {\n    sum[now_] = sum[ls] + sum[rs];\n  }\n  void Pushdown(int now_, int L_, int R_) {\n    sum[ls] += 1ll * tag[now_] * (mid - L_ + 1);\n    sum[rs] += 1ll * tag[now_] * (R_ - mid);\n    tag[ls] += tag[now_];\n    tag[rs] += tag[now_];\n    tag[now_] = 0ll;\n  }\n  void Modify(int now_, int L_, int R_, int l_, int r_, LL val_) {\n    if (l_ <= L_ and R_ <= r_) {\n      sum[now_] += 1ll * (R_ - L_ + 1) * val_;\n      tag[now_] += val_;\n      return ;\n    }\n    Pushdown(now_, L_, R_);\n    if (l_ <= mid) Modify(ls, L_, mid, l_, r_, val_);\n    if (r_ > mid) Modify(rs, mid + 1, R_, l_, r_, val_);\n    Pushup(now_);\n  }\n  LL Query(int now_, int L_, int R_, int l_, int r_) {\n    if (l_ <= L_ and R_ <= r_) return sum[now_];\n    Pushdown(now_, L_, R_);\n    LL ret = 0;\n    if (l_ <= mid) ret += Query(ls, L_, mid, l_, r_);\n    if (r_ > mid) ret += Query(rs, mid + 1, R_, l_, r_);\n    return ret;\n  }\n  #undef ls\n  #undef rs\n  #undef mid\n}\nnamespace SAM {\n  const int kNode = kN << 2;\n  int node_num = 1, last = 1, tr[kNode][26], len[kNode], link[kNode];\n  int end[kNode];\n  void Insert(int ch_, int pos_) {\n    int p = last, now = last = ++ node_num;\n    pos[pos_] = now;\n    len[now] = len[p] + 1;\n    for (; p && !tr[p][ch_]; p = link[p]) tr[p][ch_] = now;\n    if (!p) {\n      link[now] = 1;\n      return ;\n    }\n    \n    int q = tr[p][ch_];\n    if (len[q] == len[p] + 1) {\n      link[now] = q;\n      return ;\n    }\n\n    int newq = ++ node_num;\n    memcpy(tr[newq], tr[q], sizeof (tr[q]));\n    len[newq] = len[p] + 1;\n    end[newq] = end[q];\n    link[newq] = link[q], link[q] = link[now] = newq;\n    for (; p && tr[p][ch_] == q; p = link[p]) tr[p][ch_] = newq;\n  }\n}\nnamespace LCT {\n  #define f fa[now_]\n  #define ls son[now_][0]\n  #define rs son[now_][1]\n  const int kNode = kN << 2;\n  int fa[kNode], son[kNode][2], end[kNode], tag[kNode];\n  void Modify(int now_, int val_) {\n    if (!now_) return;\n    end[now_] = tag[now_] = val_;\n  }\n  void Pushdown(int now_) {\n    if (tag[now_]) Modify(ls, tag[now_]), Modify(rs, tag[now_]);\n    tag[now_] = 0;\n  }\n  bool IsRoot(int now_) {\n    return son[f][0] != now_ && son[f][1] != now_;\n  }\n  bool WhichSon(int now_) {\n    return son[f][1] == now_;\n  }\n  void Rotate(int now_) {\n    int fa_ = f, w = WhichSon(now_);\n    if (!IsRoot(f)) son[fa[f]][WhichSon(f)] = now_;\n    f = fa[f];\n\n    son[fa_][w] = son[now_][w ^ 1];\n    fa[son[fa_][w]] = fa_;\n\n    son[now_][w ^ 1] = fa_;\n    fa[fa_] = now_;\n  }\n  void Update(int now_) {\n    if (!IsRoot(now_)) Update(f);\n    Pushdown(now_);\n  }\n  void Splay(int now_) {\n    Update(now_);\n    for (; !IsRoot(now_); Rotate(now_)) {\n      if (!IsRoot(f)) Rotate(WhichSon(f) == WhichSon(now_) ? f : now_);\n    }\n  }\n  void Access(int pos_) {\n    int last_ = 0, now_ = pos[pos_];\n    for (; now_; last_ = now_, now_ = f) {\n      Splay(now_), rs = last_;\n      if (end[now_]) { //\u51cf\u53bb\u4e4b\u524d end \u7684\u8d21\u732e\n        Seg::Modify(1, 1, n, end[now_] - SAM::len[now_] + 1,\n                             end[now_] - SAM::len[f], -1); //\u6ce8\u610f\u88ab\u4fee\u6539\u533a\u95f4\n      }\n    }\n    Seg::Modify(1, 1, n, 1, pos_, 1); //\n    Modify(last_, pos_); //\u94fe\u8986\u76d6\uff0c\u66f4\u65b0 end\n  }\n}\n\nvoid Init() {\n  scanf(\"%s\", S + 1);\n  n = strlen(S + 1);\n  m = read();\n  for (int i = 1; i <= m; ++ i) q[i] = (Que) {read(), read(), i};\n  std::sort(q + 1, q + m + 1, CMP);\n  for (int i = 1; i <= n; ++ i) SAM::Insert(S[i] - 'a', i);\n  for (int i = 1; i <= SAM::node_num; ++ i) LCT::fa[i] = SAM::link[i]; //\u521d\u59cb\u65f6\u5168\u4e3a\u865a\u8fb9\n}\n//=============================================================\nint main() { \n  Init();\n  for (int r = 1, i = 1; r <= n; ++ r) {\n    LCT::Access(r);\n    for (; q[i].r <= r && i <= m; ++ i) {\n      ans[q[i].id] = Seg::Query(1, 1, n, q[i].l, q[i].r);\n    }\n  }\n  for (int i = 1; i <= m; ++ i) printf(\"%lld\\n\", ans[i]);\n  return 0; \n}\n```\n\n### \u7b97\u6cd5\u4e00\n\n```cpp\n//\u77e5\u8bc6\u70b9\uff1aSAM\n/*\nBy:Luckyblock\n*/\n#include <algorithm>\n#include <cctype>\n#include <cstdio>\n#include <cstring>\n#define LL long long\nconst int kN = 1e5 + 10;\n//=============================================================\nstruct Que {\n  int l, r, id;\n} q[kN << 1];\nint n, m;\nLL ans[kN << 1];\nchar S[kN];\n//=============================================================\ninline int read() {\n  int f = 1, w = 0;\n  char ch = getchar();\n  for (; !isdigit(ch); ch = getchar())\n    if (ch == '-') f = -1;\n  for (; isdigit(ch); ch = getchar()) w = (w << 3) + (w << 1) + (ch ^ '0');\n  return f * w;\n}\nvoid Chkmax(int &fir, int sec) {\n  if (sec > fir) fir = sec;\n}\nvoid Chkmin(int &fir, int sec) {\n  if (sec < fir) fir = sec;\n}\nbool CMP(Que fir_, Que sec_) {\n  return fir_.r < sec_.r;\n}\nnamespace Seg {\n  #define ls (now_<<1)\n  #define rs (now_<<1|1)\n  #define mid ((L_+R_)>>1)\n  const int kNode = kN << 2;\n  LL sum[kNode], tag[kNode];\n  void Pushup(int now_) {\n    sum[now_] = sum[ls] + sum[rs];\n  }\n  void Pushdown(int now_, int L_, int R_) {\n    sum[ls] += 1ll * tag[now_] * (mid - L_ + 1);\n    sum[rs] += 1ll * tag[now_] * (R_ - mid);\n    tag[ls] += tag[now_];\n    tag[rs] += tag[now_];\n    tag[now_] = 0ll;\n  }\n  void Modify(int now_, int L_, int R_, int l_, int r_, LL val_) {\n    if (l_ <= L_ and R_ <= r_) {\n      sum[now_] += 1ll * (R_ - L_ + 1) * val_;\n      tag[now_] += val_;\n      return ;\n    }\n    Pushdown(now_, L_, R_);\n    if (l_ <= mid) Modify(ls, L_, mid, l_, r_, val_);\n    if (r_ > mid) Modify(rs, mid + 1, R_, l_, r_, val_);\n    Pushup(now_);\n  }\n  LL Query(int now_, int L_, int R_, int l_, int r_) {\n    if (l_ <= L_ and R_ <= r_) return sum[now_];\n    Pushdown(now_, L_, R_);\n    LL ret = 0;\n    if (l_ <= mid) ret += Query(ls, L_, mid, l_, r_);\n    if (r_ > mid) ret += Query(rs, mid + 1, R_, l_, r_);\n    return ret;\n  }\n  void Debug(int now_, int L_, int R_) {\n    if (L_ == R_) {\n      printf(\"%lld \", sum[now_]);\n      return ;\n    }\n    Pushdown(now_, L_, R_);\n    Debug(ls, L_, mid), Debug(rs, mid + 1, R_);\n  }\n}\nnamespace SAM {\n  const int kNode = kN << 2;\n  int node_num = 1, last = 1, tr[kNode][26], len[kNode], link[kNode];\n  int end[kNode];\n  void Insert(int ch_) {\n    int p = last, now = last = ++ node_num;\n    len[now] = len[p] + 1;\n    for (; p && !tr[p][ch_]; p = link[p]) tr[p][ch_] = now;\n    if (!p) {\n      link[now] = 1;\n      return ;\n    }\n    \n    int q = tr[p][ch_];\n    if (len[q] == len[p] + 1) {\n      link[now] = q;\n      return ;\n    }\n\n    int newq = ++ node_num;\n    memcpy(tr[newq], tr[q], sizeof (tr[q]));\n    len[newq] = len[p] + 1;\n    end[newq] = end[q];\n    link[newq] = link[q], link[q] = link[now] = newq;\n    for (; p && tr[p][ch_] == q; p = link[p]) tr[p][ch_] = newq;\n  }\n  void Modify(int pos_) {\n    int u = last;\n    for (; u != 1; u = link[u]) {\n      if (end[u]) Seg::Modify(1, 1, n, end[u] - len[u] + 1, end[u] - len[link[u]], -1);\n      end[u] = pos_;\n    }\n    Seg::Modify(1, 1, n, 1, pos_, 1);\n  }\n}\nvoid Init() {\n  scanf(\"%s\", S + 1);\n  n = strlen(S + 1);\n  m = read();\n  for (int i = 1; i <= m; ++ i) q[i] = (Que) {read(), read(), i};\n  std::sort(q + 1, q + m + 1, CMP);\n}\n//=============================================================\nint main() { \n  Init();\n  for (int r = 1, i = 1; r <= n; ++ r) {\n    SAM::Insert(S[r] - 'a');\n    SAM::Modify(r);\n    for (; q[i].r <= r && i <= m; ++ i) {\n      ans[q[i].id] = Seg::Query(1, 1, n, q[i].l, q[i].r);\n    }\n  }\n  for (int i = 1; i <= m; ++ i) printf(\"%lld\\n\", ans[i]);\n  return 0; \n}\n```",
        "postTime": 1617889437,
        "uid": 186186,
        "name": "\u7075\u4e4c\u8def\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6292 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "\u9898\u89e3\u533a\u6e05\u4e00\u8272\u5730\u90fd\u662f LCT \uff0c\u4f46\u662f\u672c\u9898\u5e76\u4e0d\u9700\u8981\u8fd9\u4e2a\u5341\u7ea7\u7b97\u6cd5\u3002\u7ed9\u51fa\u4e00\u79cd\u6811\u5256\u505a\u6cd5\u3002  \n~~\u5565\uff0c\u4f60\u8bf4 SAM \u4e5f\u662f\u5341\u7ea7\uff1f\u4e0d\u597d\u610f\u601d\uff0c\u6211\u53ea\u7528\u5230\u4e86\u540e\u7f00\u6811~~  \n~~\u4e0d\u8fc7\u8c8c\u4f3c\u4e0d\u4ec5\u6ca1\u6709 LCT \u505a\u6cd5\u597d\u5199\uff0c\u4e5f\u6ca1\u6709 LCT \u505a\u6cd5\u5e38\u6570\u5c0f~~  \n\n\u9996\u5148\u5efa\u51fa SAM \u3002  \nSAM \u53ef\u4ee5\u8868\u8fbe\u6240\u6709\u5b50\u4e32\uff0c\u8fd9\u7ed9\u4e88\u4e86\u6211\u4eec\u4e00\u4e2a\u5bf9\u6bcf\u4e2a\u5b50\u4e32\u8ba1\u7b97\u8d21\u732e\u7684\u5e73\u53f0\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4e0b\u95ee\u9898\uff1a  \n\u5bf9\u4e8e SAM \u4e0a\u7684\u4e00\u4e2a\u8282\u70b9 $x$\uff0c\u5047\u8bbe\u5b83\u4ee3\u8868\u7684\u957f\u5ea6\u533a\u95f4\u4e3a $[l_1,l_2]$\uff0c\u7684\u51fa\u73b0\u4f4d\u7f6e\u96c6\u5408\u4e3a $edp$\uff08\u4e5f\u5c31\u662f SAM \u4e0a\u5bf9\u5e94\u8282\u70b9\u7684 $\\text{endpos}$ \u96c6\u5408\uff09\u3002\u5982\u679c\u8be2\u95ee\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5728 $r$\uff0c\u90a3\u4e48\u5982\u679c\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u5728 $l$\uff0c\u90a3\u8282\u70b9 $x$ \u5bf9\u8be2\u95ee\u7684\u8d21\u732e\u662f\u591a\u5c11\u5462\uff1f  \n\n\u9996\u5148\uff0c\u6211\u4eec\u627e\u5230 $edp$ \u4e2d $\\leq r$ \u7684\u6700\u5927\u7684\u5143\u7d20\u662f\u8c01\uff0c\u8bb0\u4e3a $p$ \uff08\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u5b58\u5728 $\\leq r$ \u7684\u5143\u7d20\u5c31\u6ca1\u6709\u8d21\u732e\uff09\u3002\u90a3\u4e48\u8d21\u732e\u5206\u4e09\u79cd\uff1a\n- \u82e5 $l > p-l_1+1$\uff0c\u8d21\u732e\u4e3a $0$\u3002\n- \u82e5 $p-l_2+1 \\leq l \\leq p-l_1+1$\uff0c\u90a3\u4e48\u8d21\u732e\u4e3a $(p-l_1+1) - (l) + 1$\u3002\n- \u5426\u5219 $l < p-l_2+1$\uff0c\u8d21\u732e\u4e3a $l_2-l_1+1$\u3002  \n\n\uff08\u8fd9\u91cc\u53ef\u4ee5\u753b\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\uff09  \n\u90a3\u8fd9\u4e09\u6bb5\u6bcf\u6bb5\u7684\u8d21\u732e\u90fd\u662f\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\uff08\u81ea\u53d8\u91cf\u4e3a $l$\uff09\u3002  \n\u4e00\u6b21\u51fd\u6570\u7684\u6c42\u548c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a BIT \uff0c\u4e00\u4e2a\u7ef4\u62a4\u5e38\u6570\u9879\uff0c\u4e00\u4e2a\u7ef4\u62a4\u4e00\u6b21\u9879\u89e3\u51b3\u3002  \n\n\u800c\u4e14 $r \\gets r+1$\uff08$r$ \u81ea\u589e $1$\uff09\u5bfc\u81f4\u4e86 $x$ \u7684\u8d21\u732e\u51fa\u73b0\u4e86\u53d8\u5316\uff0c\u5f53\u4e14\u4ec5\u5f53\u81ea\u589e\u540e\u7684 $r$ \u5728 $x$ \u7684 $\\text{endpos}$ \u96c6\u5408 $edp$ \u4e2d\u51fa\u73b0\u8fc7\uff0c\u56e0\u4e3a\u6211\u4eec\u7684 $p$ \u662f $edp$ \u4e2d $\\leq r$ \u7684\u6700\u5927\u5143\u7d20\u3002\n\n\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u6709\u8fd9\u6837\u4e00\u4e2a\u505a\u6cd5\uff1a\u626b\u63cf\u7ebf\uff0c\u626b\u53f3\u7aef\u70b9 $r$\uff0c\u4e24\u4e2a BIT \u7ef4\u62a4\u6bcf\u4e2a\u5de6\u7aef\u70b9\u7684\u7b54\u6848\u3002\u5177\u4f53\u7684\u7ef4\u62a4\u5c31\u662f\u6bcf\u6b21 $r$ \u81ea\u589e $1$ \u7684\u65f6\u5019\u4f1a\u6709\u82e5\u5e72\u8282\u70b9\u7684\u8d21\u732e\u4ea7\u751f\u53d8\u5316\uff0c\u5728 BIT \u4e0a\u505a\u5bf9\u5e94\u4fee\u6539\u5373\u53ef\uff08\u5148\u51cf\u6389\u539f\u6765\u7684\u8d21\u732e\uff0c\u518d\u52a0\u4e0a\u65b0\u7684\u8d21\u732e\uff09\u3002\n\n\u4f46\u662f\u8fd9\u6837\u81f3\u5c11\u53ef\u4ee5\u5361\u5230 $\\mathcal{O}(n^2)$\uff0c\u56e0\u4e3a\u6240\u6709\u8282\u70b9 $\\text{endpos}$ \u96c6\u5408\u7684\u5927\u5c0f\u4e4b\u548c\u662f $\\mathcal{O}(n^2)$ \u7684\uff0c\u6240\u4ee5\u603b\u7684\u8d21\u732e\u53d8\u5316\u6b21\u6570\u4e5f\u662f $\\mathcal{O}(n^2)$ \u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u4f18\u5316\u5b83\u3002  \n\u9996\u5148\uff0c$\\text{endpos}$ \u96c6\u5408\u4e2d\u51fa\u73b0\u8fc7\u67d0\u4e2a\u6570 $r$ \u7684\u70b9\u4e00\u5b9a\u662f Parent Tree \u4e0a\u4ee3\u8868 $r$ \u524d\u7f00\u7684\u70b9\u5230\u6839\u7684\u6240\u6709\u70b9\u3002  \n\n\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5bf9\u8fd9\u6761\u94fe\u7684\u8d21\u732e\u505a\u4fee\u6539\uff1f\u56e0\u4e3a\u4ed6\u4eec\u4e0a\u4e00\u6b21\u88ab\u8986\u76d6\u7684 $r$\uff08\u4e5f\u5c31\u662f $\\text{endpos}$ \u96c6\u5408\u4e2d\u4e0a\u4e00\u4e2a\u6570\uff09\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u8981\u5148\u53bb\u6389\u7684\u8d21\u732e\u4e5f\u662f\u4e0d\u4e00\u6837\u7684\u3002  \n\n\u5b9a\u4e49\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u4e3a\u5176\u4e0a\u6b21\u88ab\u8986\u76d6\u7684 $r$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u66f4\u65b0\u8d21\u732e\u4e4b\u524d\u989c\u8272\u76f8\u540c\u7684\u70b9\u4e00\u8d77\u66f4\u65b0\uff0c\u56e0\u4e3a\u5b83\u4eec\u8981\u51cf\u6389\u7684\u8d21\u732e\u662f\u4e00\u6837\u7684\uff0c\u540c\u65f6\u4ee3\u8868\u7684\u957f\u5ea6\u4e5f\u662f\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\u3002  \n\n\u6211\u4eec\u73b0\u5728\u8981\u8fdb\u884c\u7684\u66f4\u65b0\u662f\uff0c\u627e\u5230\u4e00\u6761\u94fe\u4e0a\u6240\u6709\u4e0d\u540c\u7684\u989c\u8272\u6bb5\uff08\u76f8\u540c\u7684\u989c\u8272\u53ea\u4f1a\u5448\u4e00\u6761\u94fe\uff09\uff0c\u5206\u522b\u66f4\u65b0\u8d21\u732e\uff0c\u5e76\u628a\u5b83\u4eec\u67d3\u6210\u4e00\u79cd\u65b0\u7684\u989c\u8272\u3002  \n\n**\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u8bc1\u660e\u6bcf\u6b21\u66f4\u65b0\u7684\u4e0d\u540c\u989c\u8272\u6bb5\u4e2a\u6570\u7684\u548c\u662f $\\mathcal{O}(n \\log n)$ \u7684\u3002** \u56e0\u4e3a\u6bcf\u66f4\u65b0\u4e00\u6761\u91cd\u94fe\uff0c\u8fd9\u6761\u94fe\u4e0a\u4f1a\u51cf\u5c11\u82e5\u5e72\u4e2a\u540c\u8272\u6bb5\uff0c\u4f46\u662f\u589e\u52a0\u7684\u540c\u8272\u6bb5\u4e2a\u6570\u662f\u5e38\u6570\u4e2a\uff08\u5176\u5b9e\u5c31 $1$ \u4e2a\uff09\u3002\u6839\u636e\u7b80\u5355\u7684\u52bf\u80fd\u5206\u6790\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u540c\u8272\u6bb5\u4e2a\u6570\u4e4b\u548c\u4e0a\u754c\u5c31\u662f\u6240\u6709\u66f4\u65b0\u904d\u5386\u7684\u91cd\u94fe\u6b21\u6570\u548c\uff0c\u8fd9\u4e2a\u660e\u663e\u662f $\\mathcal{O}(n \\log n)$ \u3002\n\n\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u66f4\u65b0\uff08$r$ \u81ea\u589e $1$\uff09\u7684\u65f6\u5019\uff0c\u628a\u5b83\u5230\u6839\u7684\u8def\u5f84\u62c6\u6210 $\\log n$ \u6761\u91cd\u94fe\uff0c\u4e0d\u540c\u91cd\u94fe\u4e4b\u95f4\u4e92\u76f8\u72ec\u7acb\u66f4\u65b0\u3002\u6bcf\u6b21\u770b\u91cd\u94fe\u4e0a\u662f\u5426\u90fd\u662f\u540c\u4e00\u4e2a\u989c\u8272\uff0c\u5982\u679c\u662f\uff0c\u4e00\u8d77\u66f4\u65b0\uff1b\u5426\u5219\uff0c\u627e\u5230\u6700\u4e0b\u9762\u7684\u540c\u8272\u6bb5\uff0c\u66f4\u65b0\u5b83\u4eec\u3002\u8fd9\u4e2a\u627e\u540c\u8272\u6bb5\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u5b8c\u6210\uff08\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5de6\u3001\u53f3\u7684\u989c\u8272\u548c\u6700\u9760\u53f3\u7684\u4e0e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u5f02\u8272\u7684\u4f4d\u7f6e\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5171\u6709 $\\mathcal{O}(n\\log n)$ \u6b21\u8d21\u732e\u7684\u66f4\u65b0\uff0c\u6bcf\u6b21\u90fd\u4ed8\u51fa\u4e86 $\\mathcal{O}(\\log n)$ \u7684\u4ee3\u4ef7\u3002\u6240\u4ee5\u590d\u6742\u5ea6\u662f $\\mathcal{O}(n\\log^2 n+m\\log n)$ \u7684\uff0c\u4e0e LCT \u505a\u6cd5\u76f8\u540c\u3002\n\n```cpp\n#include <stdio.h>\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\nconst int N = 1e5 + 5;\nconst int M = 2e5 + 5;\nint n, m;\nchar s[N];\nstruct Query { int id, l, r; } q[M];\ninline bool operator < (Query A, Query B) { return A.r < B.r; }\nll ans[M];\n\nstruct BIT {\n\tll tr[N];\n\tBIT () { memset(tr, 0, sizeof tr); }\n\tinline int lowbit (int x) { return x & (-x); }\n\tvoid update (int x, int c) { for(; x <= n; x += lowbit(x)) tr[x] += c; }\n\tvoid update (int l, int r, int c) { update(l, c); update(r + 1, -c); }\n\tll query (int x) { ll r = 0; for(; x; x -= lowbit(x)) r += tr[x]; return r; }\n};\n\nstruct Contributor {\n\tBIT bit0, bit1; // \u5e38\u6570\u9879\u3001\u4e00\u6b21\u9879\u7cfb\u6570\n\tvoid update (int l, int r, int p, int c) {\n\t\tif(p != r) bit0.update(1, p - r, c * (r - l + 1));\n\t\tbit0.update(p - r + 1, p - l + 1, c * (p - l + 2));\n\t\tbit1.update(p - r + 1, p - l + 1, c * (-1));\n\t}\n\tll query (int p) {\n\t\tll ans = 0;\n\t\tans += bit0.query(p);\n\t\tans += p * bit1.query(p);\n\t\treturn ans;\n\t}\n} con;\n\nnamespace SAM {\n\tconst int N = 2e5 + 5;\n\tint lst, n;\n\tint ch[N][26];\n\tint fa[N], len[N];\n\t\n\tint head[N], cnt;\n\tstruct Edge { int to, nxt; } e[N];\n\tinline void addE (int x, int y) {\n\t\te[++ cnt] = (Edge){y, head[x]};\n\t\thead[x] = cnt;\n\t}\n\t\n\tint dep[N], siz[N], son[N];\n\tint top[N], dfn[N], ind[N], D;\n\t\n\tstruct Node { int lc, rc, pos; };\n\tinline Node merge (Node A, Node B, int mid) {\n\t\tNode C;\n\t\tC.lc = A.lc; C.rc = B.rc;\n\t\tif(B.pos) C.pos = B.pos;\n\t\telse if(A.rc != B.lc) C.pos = mid;\n\t\telse C.pos = A.pos;\n\t\treturn C;\n\t}\n\tinline void operate (Node &A, int tg) {\n\t\tA.lc = A.rc = tg;\n\t\tA.pos = 0;\n\t}\n\t\n\tstruct SegmentTree {\n\t\tNode tr[N << 2];\n\t\tint tg[N << 2];\n\t\t\n\t\tinline void pushup (int x, int mid) { tr[x] = merge(tr[x << 1], tr[x << 1 | 1], mid); }\n\t\tinline void modify (int x, int v) { operate(tr[x], v); tg[x] = v; }\n\t\tinline void pushdown (int x) {\n\t\t\tif(!tg[x]) return;\n\t\t\tmodify(x << 1, tg[x]);\n\t\t\tmodify(x << 1 | 1, tg[x]);\n\t\t\ttg[x] = 0;\n\t\t}\n\t\t\n\t\tvoid update (int x, int ul, int ur, int l, int r, int c) {\n\t\t\tif(l >= ul && r <= ur) { modify(x, c); return; }\n\t\t\tpushdown(x); int mid = l + r >> 1;\n\t\t\tif(mid >= ul) update(x << 1, ul, ur, l, mid, c);\n\t\t\tif(mid < ur) update(x << 1 | 1, ul, ur, mid + 1, r, c);\n\t\t\tpushup(x, mid);\n\t\t}\n\t\t\n\t\tNode query (int x, int ql, int qr, int l, int r) {\n\t\t\tif(l >= ql && r <= qr) return tr[x];\n\t\t\tpushdown(x); int mid = l + r >> 1;\n\t\t\tbool c1 = (mid >= ql), c2 = (mid < qr);\n\t\t\tif(c1 && !c2) return query(x << 1, ql, qr, l, mid);\n\t\t\telse if(!c1 && c2) return query(x << 1 | 1, ql, qr, mid + 1, r);\n\t\t\telse return merge(query(x << 1, ql, qr, l, mid), query(x << 1 | 1, ql, qr, mid + 1, r), mid);\n\t\t}\n\t} sgt;\n\t\n\tvoid insert (int c) {\n\t\tint p = lst, np = ++ n;\n\t\tlst = np; len[np] = len[p] + 1;\n\t\t\n\t\tfor(; p && !ch[p][c]; p = fa[p])\n\t\t\tch[p][c] = np;\n\t\t\n\t\tif(!p) fa[np] = 1;\n\t\telse {\n\t\t\tint q = ch[p][c];\n\t\t\tif(len[q] == len[p] + 1) fa[np] = q;\n\t\t\telse {\n\t\t\t\tint nq = ++ n;\n\t\t\t\tmemcpy(ch[nq], ch[q], sizeof ch[q]);\n\t\t\t\tfa[nq] = fa[q];\n\t\t\t\tlen[nq] = len[p] + 1;\n\t\t\t\tfa[np] = fa[q] = nq;\n\t\t\t\t\n\t\t\t\tfor(; p && ch[p][c] == q; p = fa[p])\n\t\t\t\t\tch[p][c] = nq;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid dfs1 (int x) {\n\t\tdep[x] = dep[fa[x]] + 1;\n\t\tsiz[x] = 1;\n\t\tfor(int i = head[x]; i; i = e[i].nxt) {\n\t\t\tint y = e[i].to;\n\t\t\tdfs1(y);\n\t\t\tsiz[x] += siz[y];\n\t\t\tif(siz[y] > siz[son[x]]) son[x] = y;\n\t\t}\n\t}\n\t\n\tvoid dfs2 (int x, int tp) {\n\t\ttop[x] = tp;\n\t\tdfn[x] = ++ D;\n\t\tind[D] = x;\n\t\t\n\t\tif(!son[x]) return;\n\t\tdfs2(son[x], tp);\n\t\t\n\t\tfor(int i = head[x]; i; i = e[i].nxt) {\n\t\t\tint y = e[i].to;\n\t\t\tif(y == son[x]) continue;\n\t\t\tdfs2(y, y);\n\t\t}\n\t}\n\t\n\tvoid build (char *s) {\n\t\tlst = n = 1;\n\t\tfor(int i = 1; s[i]; ++ i)\n\t\t\tinsert(s[i] - 'a');\n\t\tfor(int x = 2; x <= n; ++ x)\n\t\t\taddE(fa[x], x);\n\t\tdfs1(1);\n\t\tdfs2(1, 1);\n\t}\n\t\n\tvoid update (int p, int c) {\n\t\tstatic int cur = 1;\n\t\tcur = ch[cur][c];\n\t\t\n\t\tfor(int x = cur; x; x = fa[top[x]]) {\n\t\t\tint curX = x;\n\t\t\twhile(1) {\n\t\t\t\tint y;\n\t\t\t\tNode res = sgt.query(1, dfn[top[x]], dfn[x], 1, n);\n\t\t\t\tif(res.pos == 0) y = top[x]; //\u53ea\u6709\u4e00\u6bb5\u989c\u8272\u76f8\u540c\u7684\uff0c\u76f4\u63a5\u6539\u5230\u94fe\u9876\n\t\t\t\telse y = ind[res.pos + 1];\n\t\t\t\t\n\t\t\t\tif(res.rc) con.update(len[fa[y]] + 1, len[x], res.rc, -1);\n\t\t\t\tcon.update(len[fa[y]] + 1, len[x], p, 1);\n\t\t\t\t//\u4e0a\u9762\u4e24\u884c\u90fd\u662f\u66f4\u65b0\u8d21\u732e\n\t\t\t\t\n\t\t\t\tif(y == top[x]) break;\n\t\t\t\telse x = fa[y];\n\t\t\t}\n\t\t\t\n\t\t\tsgt.update(1, dfn[top[curX]], dfn[curX], 1, n, p);\n\t\t\t//\u67d3\u8272\n\t\t}\n\t}\n}\n\nint main () {\n\t\n\tios :: sync_with_stdio(0);\n\tcin >> s + 1;\n\tn = strlen(s + 1);\n\tcin >> m;\n\tfor(int i = 1; i <= m; ++ i) {\n\t\tint l, r; cin >> l >> r;\n\t\tq[i] = (Query){i, l, r};\n\t}\n\t\n\tSAM :: build(s);\n\tsort(q + 1, q + m + 1);\n\t\n\tfor(int r = 1, p = 1; r <= n; ++ r) {\n\t\tSAM :: update(r, s[r] - 'a');\n\t\tfor(; p <= m && q[p].r == r; p ++ ) {\n\t\t\tint id = q[p].id, l = q[p].l;\n\t\t\tans[id] = con.query(l);\n\t\t}\n\t}\n\t\n\tfor(int i = 1; i <= m; ++ i)\n\t\tprintf(\"%lld\\n\", ans[i]);\n\t\n\treturn 0;\n}\n```",
        "postTime": 1655426473,
        "uid": 358957,
        "name": "fhqTreap",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6292 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "\u53c8\u662f\u4e00\u9053SAM+LCT\u7efc\u5408\u8fd0\u7528\u7684\u9898\u3002\n\n\u56e0\u4e3a\u662f\u533a\u95f4\u67e5\u8be2\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u5165\u5b57\u7b26\u5e76\u8003\u8651$r$\u7aef\u70b9\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u7684\u6240\u6709\u8be2\u95ee\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n- \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\n- \u67e5\u8be2\u6700\u665a\u7684\u8d77\u59cb\u4f4d\u7f6e$\\geq l$\u7684\u672c\u8d28\u4e0d\u540c\u5b57\u4e32\u4e2a\u6570\n\n\u8003\u8651\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u7684\u5f71\u54cd\uff1a\u663e\u7136\u4f1a\u628a$x$\u7ecf\u8fc7$x$\u7684\u6240\u6709\u7956\u5148\u6700\u540e\u5230$root$\u7684\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u7684\u6700\u665a\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c\u66f4\u65b0\u3002\u8fd9\u6837\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u867d\u7136LCT\u80fd\u8fdb\u884c\u94fe\u52a0/\u94fe\u8986\u76d6\uff0c\u4f46\u662f\u533a\u95f4\u67e5\u8be2\u5374\u505a\u4e0d\u5230\u3002\u90a3\u5c31\u8003\u8651\u518d\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u7b2c$i$\u4f4d\u4ee3\u8868$startpos=i$\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u4e2a\u6570\u3002\n\n\u5f53\u5148\u52a0\u5165\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u518d\u7ebf\u6bb5\u6811\u4e0a\u79fb\u9664\u4f1a\u88ab\u66f4\u6539\u7684\u8282\u70b9\u539f\u6765\u7684\u8d21\u732e\u5e76\u52a0\u5165\u65b0\u7684\u8d21\u732e\u3002\u800c\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u6027\u8d28\u5c31\u662f\u5f53$SAM$\u4e0a\u4e00\u6761\u4ece\u513f\u5b50\u5230\u7956\u5148\u8def\u5f84\u4ee3\u8868\u7684\u6240\u6709\u5b50\u4e32\u7684\u6700\u540e\u4e00\u4e2a$endpos$\u662f\u76f8\u540c\u7684\u65f6\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684$startpos$\u5c31\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\u800c\u6839\u636eLCT\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u53ea\u6709$\\log$\u4e2a`splay`\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u67d0\u4e2a\u8282\u70b9\u5c5e\u4e8e\u54ea\u4e2a`splay`\u5c06\u8def\u5f84\u4e0a\u8282\u70b9\u5206\u4e3a$\\log$\u4e2a\u7c7b\uff0c\u6bcf\u4e2a\u7c7b\u8fdb\u884c\u4e00\u6b21\u4fee\u6539\u90fd\u80fd\u8f6c\u5316\u6210\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u52a0\u64cd\u4f5c\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\u590d\u6742\u5ea6$O(m\\log^2n)$\u3002\n\n\u6709\u4e2a\u5730\u65b9\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\uff1a\n\u56e0\u4e3a\u6211\u4eec\u5b9a\u4e49\u4e0b\u7684`LCT`\u662f\u9700\u8981\u6ee1\u8db3\u6bcf\u4e2a`splay`\u4e2d\u7684\u6240\u6709\u70b9\u7684\u6700\u5927\u7684`endpos`\u5747\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u5230\u5904`access`\uff0c\u53ea\u6709\u5728\u4fee\u6539\u7684\u65f6\u5019\u624d\u80fd\u505a\u4e00\u6b21`access`\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<set>\n#define vi vector<int>\n#define pb push_back\n#define mk make_pair\n#define pii pair<int,int>\n#define rep(i,a,b) for(int i=(a),i##end=(b);i<=i##end;i++)\n#define fi first\n#define se second\n#define int long long\ntypedef long long ll;\nusing namespace std;\nconst int maxn=2e5+10000;\nint n,len[maxn];\nstruct segment_tree{\n\tll val[maxn<<2],tag[maxn<<2];\n\tsegment_tree(){memset(val,0,sizeof(val));memset(tag,0,sizeof(tag));}\n\tvoid push_down(int rt,int l,int r){\n\t\tif(tag[rt]){\n\t\t\tint mid=(l+r)>>1;\n\t\t\ttag[rt<<1]+=tag[rt],tag[rt<<1|1]+=tag[rt];\n\t\t\tval[rt<<1]+=tag[rt]*(mid-l+1);val[rt<<1|1]+=tag[rt]*(r-(mid+1)+1);\n\t\t\ttag[rt]=0;\n\t\t}\n\t}\n\tvoid push_up(int rt){\n\t\tval[rt]=val[rt<<1]+val[rt<<1|1];\n\t}\n\tvoid add(int l,int r,int rt,int tl,int tr,ll w){\n\t\tif(tl<=l&&r<=tr){\n\t\t\ttag[rt]+=w;val[rt]+=w*(r-l+1);return;\n\t\t}\n\t\tpush_down(rt,l,r);\n\t\tint mid=(l+r)>>1;\n\t\tif(tl<=mid)add(l,mid,rt<<1,tl,tr,w);\n\t\tif(tr>=mid+1)add(mid+1,r,rt<<1|1,tl,tr,w);\n\t\tpush_up(rt);\n\t}\n\tll query(int l,int r,int rt,int tl,int tr){\n\t\tif(tl<=l&&r<=tr){return val[rt];}\n\t\tpush_down(rt,l,r);\n\t\tint mid=(l+r)>>1;ll ans=0;\n\t\tif(tl<=mid)ans+=query(l,mid,rt<<1,tl,tr);\n\t\tif(tr>=mid+1)ans+=query(mid+1,r,rt<<1|1,tl,tr);\n\t\treturn ans;\n\t}\n}t;\nstruct LCT{\n\tint ch[maxn][2],f[maxn],tag[maxn],endpos[maxn],stk[maxn];\n\tbool isrt(int rt){return (ch[f[rt]][0]!=rt)&&(ch[f[rt]][1]!=rt);}\n\tvoid rotate(int rt){\n\t\tint x=rt,y=f[x],z=f[y],o=ch[y][1]==x,w=ch[x][o^1];\n\t\tbool flag=isrt(y);\n\t\tch[y][o]=w;\n\t\tf[w]=y;\n\t\tch[x][o^1]=y;\n\t\tf[y]=x;\n\t\tif(!flag)ch[z][ch[z][1]==y]=x;\n\t\tf[x]=z;\n\t}\n\tvoid push_down(int rt){\n\t\tif(tag[rt]){\n\t\t\ttag[ch[rt][0]]=tag[ch[rt][1]]=tag[rt];\n\t\t\tendpos[ch[rt][0]]=endpos[ch[rt][1]]=tag[rt];\n\t\t\ttag[rt]=0;\n\t\t}\n\t}\n\tvoid splay(int rt){\n\t\tint top=0,x=rt;\n\t\tfor(int y=rt;;y=f[y]){\n\t\t\tstk[++top]=y;if(isrt(y))break;\n\t\t}\n\t\twhile(top)push_down(stk[top--]);\n\t\tfor(;!isrt(x);rotate(x)){\n\t\t\tint y=f[x];if(isrt(y))continue;\n\t\t\trotate((ch[f[x]][1]==x)==(ch[f[y]][1]==y)?y:x);\n\t\t}\n\t}\n\tvoid chain_update(int x1,int x2,int edpos,bool dodel,int ck){\n\t\tif(dodel){\n\t\t\tfor(int y=0,x=(ck)?ck:x2;x;y=x,x=f[x]){\n\t\t\t\t\n\t\t\t\tsplay(x);ch[x][1]=y;int st_l=len[f[x]]+1,ed_l=len[x];\n\t\t\t\tif(ed_l)t.add(1,n,1,endpos[x]-ed_l+1,endpos[x]-st_l+1,-1);\n\t\t\t}\n\t\t}\n\t\tfor(int y=0,x=x1;x;y=x,x=f[x]){\n\t\t\tsplay(x);ch[x][1]=y;int st_l=len[f[x]]+1,ed_l=len[x];\n\t\t\tif(ed_l)t.add(1,n,1,edpos-ed_l+1,edpos-st_l+1,1);\n\t\t}\n\t}\n\tvoid add(int x,int val){\n\t\tendpos[x]=val,tag[x]=val;\n\t}\n\tvoid link(int x,int fa,int edpos,int ty,int ck=0){\n\t\tsplay(x);f[x]=fa;\n\t\tif(ty)\n\t\tchain_update(x,fa,edpos,edpos!=1,ck);\n\t\tif(ty){splay(x);add(x,edpos);}\n\t}\n\tvoid cut(int x,int st_l,int ed_l){\n\t\tsplay(x);\n\t\tif(ed_l){t.add(1,n,1,endpos[x]-ed_l+1,endpos[x]-st_l+1,-1);}\n\t\tf[ch[x][0]]=f[x],ch[x][0]=0;\n\t}\n}lct;\nstruct SAM{\n\tint link[maxn],ch[maxn][27],cnt,last;\n\tSAM(){cnt=last=1;}\n\tvoid insert(int c,int edpos){\n\t\tint p=last,cur=++cnt;len[cur]=len[p]+1;\n\t\twhile(p&&!ch[p][c])ch[p][c]=cur,p=link[p];\n\t\tif(!p)link[cur]=1,lct.link(cur,1,edpos,1);\n\t\telse{\n\t\t\tint q=ch[p][c];\n\t\t\tif(len[p]+1==len[q])link[cur]=q,lct.link(cur,q,edpos,1);\n\t\t\telse{\n\t\t\t\tint cl=++cnt;len[cl]=len[p]+1;lct.splay(q);lct.endpos[cl]=lct.endpos[q];\n\t\t\t\tmemcpy(ch[cl],ch[q],sizeof(ch[cl]));\n\t\t\t\tlct.cut(q,len[link[q]]+1,len[cl]);\n\t\t\t\tlink[cl]=link[q];lct.link(cl,link[q],edpos,0);\n\t\t\t\tlct.link(cur,cl,edpos,1,link[cl]);\n\t\t\t\tlct.link(q,cl,edpos,0);\n\t\t\t\tlink[cur]=link[q]=cl;\n\t\t\t\twhile(p&&ch[p][c]==q)ch[p][c]=cl,p=link[p];\n\t\t\t}\n\t\t}\n\t\tlast=cur;\n\t}\n}sam;\nchar s[maxn];\nstruct QAQ{\n\tint l,r,id;\n}query[maxn];\nbool cmp(QAQ a,QAQ b){return a.r<b.r;}\nll out[maxn];\nsigned main(){\n\tscanf(\"%s\",s+1);n=strlen(s+1);\n\tint q;scanf(\"%lld\",&q);\n\trep(i,1,q){\n\t\tscanf(\"%lld%lld\",&query[i].l,&query[i].r);query[i].id=i;\n\t}\n\tsort(query+1,query+1+q,cmp);\n\tint top=0;\n\trep(i,1,q){\n\t\twhile(top<query[i].r)sam.insert(s[top+1]-'a',top+1),top++;\n\t\tll ans=t.query(1,n,1,query[i].l,query[i].r);\n\t\tout[query[i].id]=ans;\n\t}\n\trep(i,1,q)printf(\"%lld\\n\",out[i]);\n\treturn 0;\n}\n```",
        "postTime": 1589117818,
        "uid": 43420,
        "name": "GavinZheng",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6292 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "**\u8fd9\u662f\u4e00\u4e2a\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u6765\u66ff\u4ee3\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5\u3002**\n\n\u4ee5\u524d\u6211\u4e5f\u66fe\u8ba4\u4e3a\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u8fd9\u7c7b\u95ee\u9898\uff0cSA \u662f\u5b8c\u5168\u65e0\u6cd5\u89e3\u51b3\u7684\uff1b\u76f4\u5230\u67d0\u6b21\u505a\u9898\u65f6\u5076\u7136\u53d7\u5230 SAM \u7684 parent tree \u542f\u53d1\uff0c\u624d\u53d1\u73b0\u4e86\u8fd9\u79cd\u975e\u5e38\u5f3a\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u5b9a\u4e49 ${\\rm beginpos}(t)$ \u8868\u793a\u5b57\u7b26\u4e32 $s$ \u7684\u5b50\u4e32 $t$ \u5728 $s$ \u4e2d\u7684\u6240\u6709\u8d77\u59cb\u4f4d\u7f6e\u6240\u6784\u6210\u7684\u96c6\u5408\u3002\u663e\u7136\uff0c\u6240\u6709\u8fd9\u6837\u7684 $t$ \u90fd\u53ef\u4ee5\u6839\u636e ${\\rm beginpos}(t)$ \u800c\u88ab\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u7b49\u4ef7\u7c7b\uff1b\u6211\u4eec\u7684\u76ee\u6807\u5219\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fd9\u6837\u7684\u7b49\u4ef7\u7c7b\uff0c\u6c42\u51fa\u5176\u6240\u5305\u542b\u7684\u672c\u8d28\u4e0d\u540c\u7684 $t$ \u7684\u6570\u91cf\u3002\n\n\u4f60\u4e00\u5b9a\u53ef\u4ee5\u53d1\u73b0\uff1a\u8fd9\u5c31\u662f SAM \u4e2d\u53cd\u4e32\u7684 ${\\rm endpos}$ \u96c6\u5408\u3002\u4f46\u73b0\u5728\u6211\u4eec\u4e0d\u59a8\u7ad9\u5728 SA \u7684\u89d2\u5ea6\u6765\u601d\u8003\u95ee\u9898\uff1a\u6211\u4eec\u77e5\u9053\u5982\u4e0a\u5b9a\u4e49\u7684\u672c\u8d28\u4e0d\u540c\u7684\u7b49\u4ef7\u7c7b\u7684\u6570\u91cf\u662f $O(n)$ \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u5426\u4f7f\u7528 SA \u6765\u6c42\u89e3\u5462\uff1f\n\n\u6211\u4eec\u77e5\u9053\u6bcf\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u5728 sa \u6570\u7ec4\u4e0a\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4\uff0c\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u679a\u4e3e\u6bcf\u4e2a\u5de6\u7aef\u70b9\uff0c\u518d\u8ba1\u7b97 $|t|=1$ \u65f6\u7684\u53f3\u7aef\u70b9\u3002\u7136\u540e\u6211\u4eec\u786e\u5b9a\u8fd9\u4e2a\u533a\u95f4\u6240\u5141\u8bb8\u7684\u6700\u957f\u7684 $t$ \uff0c\u518d\u76f4\u63a5\u8ba1\u7b97\u5141\u8bb8\u66f4\u5927\u7684 $|t|$ \u7684\u53f3\u7aef\u70b9\uff0c\u76f4\u5230\u8fd9\u6837\u7684\u533a\u95f4\u4e0d\u5b58\u5728\u4e3a\u6b62\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$ \u3002\u8fd9\u662f\u4e00\u4e2a\u7b28\u62d9\u7684\u65b9\u6cd5\uff0c\u4e5f\u4e0d\u5177\u6709\u53ef\u6269\u5c55\u6027\uff0c\u4f46\u5176\u6697\u793a\u6211\u4eec\u8003\u8651\u6309\u6700\u5c0f\u503c\u6765\u5212\u5206\u533a\u95f4\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u5bf9 height \u6570\u7ec4\u5efa\u7acb\u7b1b\u5361\u5c14\u6811\uff0c\u5e76\u5c06\u539f\u4e32\u7684\u540e\u7f00\u4f5c\u4e3a\u5176\u53f6\u5b50\u8282\u70b9\u3002\n\n\u89c2\u5bdf\u8fd9\u68f5\u7b1b\u5361\u5c14\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5176\u5177\u5907\u5f88\u591a\u4f18\u7f8e\u7684\u6027\u8d28\uff1a\u6bcf\u4e2a\u7b49\u4ef7\u7c7b\u90fd\u5728\u5176\u4e0a\u5bf9\u5e94\u4e86\u4e00\u68f5\u5b50\u6811\uff0c\u4e5f\u5bf9\u5e94\u4e86 sa \u6570\u7ec4\u7684\u4e00\u6bb5\u533a\u95f4\uff1b\u5176\u5148\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u5c31\u662f\u540e\u7f00\u6570\u7ec4\uff1b\u4efb\u610f\u4e24\u4e2a\u53f6\u5b50\u8282\u70b9\u7684 lca \u5c31\u662f\u5b83\u4eec\u7684 lcp \u2026\u2026 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u51e0\u4e4e\u5c31\u662f\u4e00\u68f5\u540e\u7f00\u6811\uff01\n\n\u73b0\u5728\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u501f\u52a9\u8fd9\u68f5\u7b1b\u5361\u5c14\u6811\uff0c\u628a SA \u4e0e\u7ebf\u6bb5\u6811\u5408\u5e76\u6216\u662f LCT \u7b49\u6570\u636e\u7ed3\u6784\u7ed3\u5408\u8d77\u6765\uff0c\u8fd9\u68f5\u6811\u5b8c\u5168\u53ef\u4ee5\u53d1\u6325\u4e0e SAM \u7684 parent tree \u76f8\u540c\u7684\u6548\u529b\uff0c\u800c\u4e14\u4ee3\u7801\u5b9e\u73b0\u4e5f\u5e76\u4e0d\u590d\u6742\u3002\u53e6\u5916\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728\u8fd9\u68f5\u6811\u4e0a\u5b9e\u73b0\u5728\u7ebf\u7684\u5339\u914d\u3002\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u5269\u4e0b\u7684\u8fc7\u7a0b\u5c31\u4e0e\u5176\u5b83\u7684\u9898\u89e3\u65e0\u5f02\u4e86\u3002\u6a21\u4eff\u533a\u95f4\u6570\u989c\u8272\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u9996\u5148\u5c06\u79bb\u7ebf\u8be2\u95ee\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u626b\u63cf\u7ebf\u3002\u6bcf\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u540e\u7f00\uff0c\u5176\u5728\u7b1b\u5361\u5c14\u6811\u4e0a\u6d89\u53ca\u7684\u4ec5\u662f\u4e00\u6761\u7531\u53f6\u5b50\u5230\u6839\u7684\u94fe\uff0c\u4e14\u64cd\u4f5c\u8fc7\u7a0b\u5f62\u4f3c LCT \u7684 access \u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 LCT \u4f18\u5316\u3002\u6211\u4eec\u53ea\u9700\u518d\u7ef4\u62a4\u533a\u95f4\u52a0\u6cd5\u548c\u533a\u95f4\u6c42\u548c\u5373\u53ef\uff0c\u6211\u7684\u5b9e\u73b0\u662f $O(n\\log ^2 n)$ \u7684\uff0c\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define endl putchar('\\n')\nconst int N=200005;\n#define int long long\nusing namespace std;\n\nint n,Q,sa[N],rk[N],h[N],root,val[N],pre[N],ans[N];\nchar s[N];\nstruct ques {\n\tint l,r,id;\n\tbool operator < (const ques &t) const { return l<t.l; }\n} q[N];\n\nstruct suffix_array {\n\tint k1[N],k2[N],cnt[N],mx,num;\n\tvoid radix_sort() {\n\t\trep(i,1,mx) cnt[i]=0;\n\t\trep(i,1,n) cnt[k1[i]]++;\n\t\trep(i,1,mx) cnt[i]+=cnt[i-1];\n\t\tfor(int i=n;i>=1;i--) sa[cnt[k1[k2[i]]]--]=k2[i];\n\t}\n\tvoid sort() {\n\t\trep(i,1,n) k1[i]=s[i],k2[i]=i; mx='z';\n\t\tradix_sort();\n\t\tfor(int j=1;j<=n;j<<=1,num=0) {\n\t\t\trep(i,n-j+1,n) k2[++num]=i;\n\t\t\trep(i,1,n) if(sa[i]-j>=1) k2[++num]=sa[i]-j;\n\t\t\tradix_sort(),swap(k2,k1);\n\t\t\tnum=k1[sa[1]]=1;\n\t\t\trep(i,2,n) k1[sa[i]]=k2[sa[i]]==k2[sa[i-1]]&&k2[sa[i]+j]==k2[sa[i-1]+j]?num:++num;\n\t\t\tif(num==n) break;\n\t\t\tmx=num;\n\t\t}\n\t}\n\tvoid height() {\n\t\trep(i,1,n) rk[sa[i]]=i;\n\t\tint k=0;\n\t\trep(i,1,n) {\n\t\t\tif(rk[i]==1) continue;\n\t\t\tif(k) k--;\n\t\t\tint j=sa[rk[i]-1];\n\t\t\twhile(max(i,j)+k<=n&&s[i+k]==s[j+k]) k++;\n\t\t\th[rk[i]]=k;\n\t\t}\n\t}\n} SA;\n\nstruct SMT {\n\tint sm[N<<1],ad[N<<1];\n\t#define ls (k<<1)\n\t#define rs (k<<1|1)\n\t#define mid ((l+r)>>1)\n\tvoid add(int k,int l,int r,int v) { sm[k]+=(r-l+1)*v,ad[k]+=v; }\n\tvoid pushdown(int k,int l,int r) {\n\t\tif(ad[k]) add(ls,l,mid,ad[k]),add(rs,mid+1,r,ad[k]),ad[k]=0;\n\t}\n\tvoid pushup(int k) { sm[k]=sm[ls]+sm[rs]; }\n\tvoid add(int k,int l,int r,int x,int y,int v) {\n\t\tif(x<=l&&r<=y) return add(k,l,r,v);\n\t\tpushdown(k,l,r);\n\t\tif(x<=mid) add(ls,l,mid,x,y,v);\n\t\tif(y>mid) add(rs,mid+1,r,x,y,v);\n\t\tpushup(k);\n\t}\n\tint query(int k,int l,int r,int x,int y) {\n\t\tif(x<=l&&r<=y) return sm[k];\n\t\tpushdown(k,l,r);\n\t\tint res=0;\n\t\tif(x<=mid) res+=query(ls,l,mid,x,y);\n\t\tif(y>mid) res+=query(rs,mid+1,r,x,y);\n\t\treturn res;\n\t}\n\t#undef ls\n\t#undef rs\n\t#undef mid\n} smt;\n\nstruct LCT {\n\tstruct node {\n\t\tint sm,top,bel,fa,ch[2];\n\t\t#define ls(x) nod[x].ch[0]\n\t\t#define rs(x) nod[x].ch[1]\n\t\t#define fa(x) nod[x].fa\n\t\t#define sm(x) nod[x].sm\n\t\t#define top(x) nod[x].top\n\t\t#define bel(x) nod[x].bel\n\t} nod[N];\n\tbool cmp(int x) { return x==rs(fa(x)); }\n\tbool isroot(int x) { return nod[fa(x)].ch[cmp(x)]!=x; }\n\tvoid pushdown(int x) { bel(ls(x))=bel(rs(x))=bel(x); }\n\tvoid pushup(int x) {\n\t\tsm(x)=sm(ls(x))+val[x]+sm(rs(x));\n\t\ttop(x)=ls(x)?top(ls(x)):pre[x];\n\t}\n\tvoid connect(int x,int fa,int son) { nod[fa].ch[son]=x,fa(x)=fa; }\n\tvoid rotate(int x) {\n\t\tint y=fa(x),z=fa(y),ys=cmp(x),zs=cmp(y);\n\t\tif(isroot(y)) fa(x)=z; else connect(x,z,zs);\n\t\tconnect(nod[x].ch[ys^1],y,ys),connect(y,x,ys^1),pushup(y),pushup(x);\n\t}\n\tvoid pushall(int x) { if(!isroot(x)) pushall(fa(x)); pushdown(x); }\n\tvoid splay(int x) {\n\t\tpushall(x);\n\t\twhile(!isroot(x)) {\n\t\t\tif(!isroot(fa(x))) rotate(cmp(x)^cmp(fa(x))?x:fa(x));\n\t\t\trotate(x);\n\t\t}\n\t}\n\tvoid access(int x) {\n\t\tint pos=x; x=rk[x]+n;\n\t\tfor(int y=0;x;y=x,x=fa(x)) {\n\t\t\tsplay(x),rs(x)=0,pushup(x);\n\t\t\tint l=top(x),r=top(x)+sm(x)-1;\n\t\t\tif(l<=r&&bel(x)) smt.add(1,1,n,bel(x)+l,bel(x)+r,-1);\n\t\t\tbel(x)=pos;\n\t\t\tif(l<=r) smt.add(1,1,n,bel(x)+l,bel(x)+r,1);\n\t\t\trs(x)=y,pushup(x);\n\t\t}\n\t}\n} lct;\n\nstruct treap {\n\tint ls[N],rs[N],s[N],top,fa[N];\n\tvoid build() {\n\t\tif(n==1) return root=2,void();\n\t\tls[2]=n+1,rs[2]=n+2,fa[ls[2]]=fa[rs[2]]=root=s[++top]=2;\n\t\trep(i,3,n) {\n\t\t\twhile(top&&h[s[top]]>h[i]) top--;\n\t\t\tif(top) ls[i]=rs[s[top]],fa[rs[s[top]]]=i,rs[s[top]]=i,fa[i]=s[top];\n\t\t\telse ls[i]=root,fa[root]=i,root=i;\n\t\t\trs[i]=n+i,fa[rs[i]]=i,s[++top]=i;\n\t\t}\n\t\trep(i,2,n+n) val[i]=(i>n?n-sa[i-n]+1:h[i])-h[fa[i]];\n\t}\n\tvoid prep(int x) {\n\t\tlct.sm(x)=val[x],lct.top(x)=pre[x];\n\t\tif(x>n) return;\n\t\tpre[ls[x]]=pre[rs[x]]=pre[x]+val[x];\n\t\tlct.fa(ls[x])=lct.fa(rs[x])=x;\n\t\tprep(ls[x]),prep(rs[x]);\n\t}\n} trp;\n\nvoid init() {\n\tSA.sort(),SA.height();\n\ttrp.build(),trp.prep(root);\n}\n\nvoid solve() {\n\tsort(q+1,q+Q+1);\n\tint j=Q;\n\tfor(int i=n;i>=1;i--) {\n\t\tlct.access(i);\n\t\twhile(j>=1&&q[j].l==i) {\n\t\t\tans[q[j].id]=smt.query(1,1,n,q[j].l,q[j].r);\n\t\t\tj--;\n\t\t}\n\t}\n}\n\nsigned main() {\n\tscanf(\"%s\",s+1),n=strlen(s+1);\n\tinit();\n\tscanf(\"%lld\",&Q);\n\trep(i,1,Q) scanf(\"%lld%lld\",&q[i].l,&q[i].r),q[i].id=i;\n\tsolve();\n\trep(i,1,Q) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1641464581,
        "uid": 91736,
        "name": "RPChe_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6292 \u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6292)\u3002\n\n> \u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$\uff0c\u591a\u6b21\u8be2\u95ee\u5176\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff0c\u975e\u5f3a\u5236\u5728\u7ebf\u3002\n\n\u5728\u6211\u7684\u8ba4\u77e5\u4e2d\u7b97\u662f\u4e00\u9053\u795e\u4ed9\u9898\u4e86\u5427 orz\n\n---\n\n### $Solution:$\n\n\u5148\u8003\u8651\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u9759\u6001\u533a\u95f4\u6570\u989c\u8272\u3002\n\n\u5bf9\u4e8e\u8fd9\u9898\uff0c\u4e00\u4e2a\u5e38\u89c1\u505a\u6cd5\u662f\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488 $i$\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u6bcf\u6b21\u7ed9\u5f53\u524d\u70b9 +1\uff0c\u4e0a\u4e00\u6b21\u51fa\u73b0\u8be5\u989c\u8272\u7684\u70b9 -1\uff0c\u7136\u540e\u82e5\u6709 $r = i$ \u5219\u76f4\u63a5\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u5c06\u8fd9\u4e2a\u5957\u8def\u8f6c\u79fb\u5230\u8fd9\u9898\u4e0a\uff1a\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488 $i$\uff0c\u4ece\u5de6\u5230\u53f3\u626b\u63cf\uff0c\u5b9a\u4e8e\u6bcf\u4e2a\u72b6\u6001\u5b9a\u4e49\u5176\u4e0a\u4e00\u4e2a\u72b6\u6001 $lst$ \u4e3a $s[1, i]$ \u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\u5728 SAM \u7684 parent tree \u4e0a\u8d77\u6240\u6709\u7684\u7956\u5148\u8282\u70b9\u90fd\u8981\u53d8\u4e3a $lst$\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a\u6bcf\u6b21\u66f4\u65b0\u8282\u70b9\u5148\u53d6\u6d88\u5176\u6839\u5230\u6b64\u70b9\u7684\u8d21\u732e\uff0c\u7136\u540e\u518d\u66f4\u65b0\u65b0\u8d21\u732e\u5373\u53ef\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u548c LCT \u7684 access \u64cd\u4f5c\u5dee\u4e0d\u591a\uff0c\u4e8e\u662f\u76f4\u63a5\u7528 LCT \u7ef4\u62a4\u5373\u53ef\u3002\n\n\u91cd\u65b0\u634b\u4e00\u4e0b\u601d\u8def\uff1a\n\n1.\u5efa\u7acb SAM \u5e76\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\u3002\n\n2.\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\u6bcf\u6b21\u679a\u4e3e\u5230\u4e00\u4e2a\u65b0\u7684\u53f3\u7aef\u70b9\u5c31\u53d6\u6d88\u65e7\u8d21\u732e\u5e76\u589e\u52a0\u65b0\u8d21\u732e\uff0c\u7528 LCT \u7684 access \u64cd\u4f5c\u548c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n3.\u5bf9\u4e8e\u6240\u6709 $r = i$\uff0c\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u7b54\u6848\u5373\u53ef\u3002\n\nover\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n + q\\log n)$\uff0c\u5176\u4e2d $\\log^2$ \u662f LCT \u5957\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\u3002\n\n---\n\n### $Code:$\n\n\u770b\u7740\u8f83\u957f\uff0c\u4f46\u5927\u90e8\u5206\u90fd\u662f\u677f\u5b50\uff0c\u53ef\u4ee5\u8bf4\u633a\u597d\u5199\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <queue>\n#include <map>\n#include <set>\nusing namespace std;\n#define int long long\n#define ull unsigned long long\n#define fi first\n#define se second\n#define lc ch[x][0]\n#define rc ch[x][1]\n#define dingyi int mid = l + r >> 1, ls = p << 1, rs = p << 1 | 1\n#define y0 y_csyakioi_0\n#define y1 y_csyakioi_1\n#define rep(i, x, y) for(int i = x; i <= y; ++i)\n#define per(i, x, y) for(int i = x; i >= y; --i)\n#define repg(i, u) for(int i = head[u]; i; i = e[i].nxt)\n#define repv(i, u) for(int i = 0; i < g[u].size(); ++i)\ninline int read(){\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(ch < '0' || ch > '9'){ if(ch == '-') f = -1; ch = getchar(); }\n\twhile(ch >= '0' && ch <= '9'){ x = x * 10 + (ch ^ 48); ch = getchar(); }\n\treturn x * f;\n}\nconst int N = 200010, M = 26;\nint n, m, x, y, z, pos[N], ans[N]; char s[N];\nnamespace SAM{\n\tint len[N], fail[N], nxt[N][M], tail = 1, tot = 1;\n\tinline void SAMadd(int c){\n\t\tlen[++tot] = len[tail] + 1; int p = tail; tail = tot;\n\t\tfor(; p && !nxt[p][c]; p = fail[p]) nxt[p][c] = tail;\n\t\tif(!p){ fail[tail] = 1; return; } int q = nxt[p][c];\n\t\tif(len[q] == len[p] + 1){ fail[tail] = q; return; }\n\t\tlen[++tot] = len[p] + 1; fail[tot] = fail[q];\n\t\trep(i, 0, 25) nxt[tot][i] = nxt[q][i];\n\t\tfor(; p && nxt[p][c] == q; p = fail[p]) nxt[p][c] = tot;\n\t\tfail[tail] = fail[q] = tot;\n\t}\n}\nnamespace SMT{\n\tint d[N << 2], f[N << 2];\n\tinline void pushup(int p){ d[p] = d[p << 1] + d[p << 1 | 1]; }\n\tinline void upd(int p, int l, int r, int x){ d[p] += (r - l + 1) * x; f[p] += x; }\n\tinline void pushdown(int p, int l, int r){\n\t\tif(f[p]){\n\t\t\tdingyi;\n\t\t\tupd(ls, l, mid, f[p]);\n\t\t\tupd(rs, mid + 1, r, f[p]);\n\t\t\tf[p] = 0;\n\t\t}\n\t}\n\tinline void change(int p, int l, int r, int x, int y, int z){\n\t\tif(x <= l && r <= y){ upd(p, l, r, z); return; }\n\t\tdingyi; pushdown(p, l, r);\n\t\tif(x <= mid) change(ls, l, mid, x, y, z);\n\t\tif(y > mid) change(rs, mid + 1, r, x, y, z);\n\t\tpushup(p);\n\t}\n\tinline int query(int p, int l, int r, int x, int y){\n\t\tif(x <= l && r <= y) return d[p];\n\t\tdingyi; pushdown(p, l, r); int ans = 0;\n\t\tif(x <= mid) ans += query(ls, l, mid, x, y);\n\t\tif(y > mid) ans += query(rs, mid + 1, r, x, y);\n\t\treturn ans; \n\t}\n}\nnamespace LCT{\n\tint f[N], val[N], ch[N][2], tag[N], st[N];\n\tinline bool nroot(int x){ return ch[f[x]][0] == x || ch[f[x]][1] == x; }\n\tinline void pushtag(int x, int y){ val[x] = tag[x] = y; }\n\tinline void pushdown(int x){ if(!tag[x]) return; if(lc) pushtag(lc, tag[x]); if(rc) pushtag(rc, tag[x]); tag[x] = 0; }\n\tinline void Rotate(int x){\n\t\tint y = f[x], z = f[y], k = ch[y][1] == x, w = ch[x][!k]; if(nroot(y)) ch[z][ch[z][1] == y] = x;\n\t\tch[x][!k] = y; ch[y][k] = w; if(w) f[w] = y; f[y] = x; f[x] = z;\n\t}\n\tinline void Splay(int x){\n\t\tint y = x, z = 0; st[++z] = y; while(nroot(y)) st[++z] = y = f[y];\n\t\twhile(z) pushdown(st[z--]);\n\t\twhile(nroot(x)){ y = f[x]; z = f[y]; if(nroot(y)) Rotate((ch[y][0] == x) ^ (ch[z][0] == y) ? x : y); Rotate(x); }\n\t}\n\tinline void access(int x, int z){\n\t\tint y; for(y = 0; x; x = f[y = x]){\n\t\t\tSplay(x), rc = y;\n\t\t\tif(val[x]) SMT::change(1, 1, n, val[x] - SAM::len[x] + 1, val[x] - SAM::len[f[x]], -1);\n\t\t}\n\t\tpushtag(y, z); SMT::change(1, 1, n, 1, z, 1);\n\t}\n}\nstruct ask{\n\tint l, r, idx;\n\tbool operator < (const ask&rhs)const{\n\t\treturn r < rhs.r;\n\t}\n}q[N << 1];\ninline void mian(){\n\tscanf(\"%s\", s + 1); n = strlen(s + 1); m = read();\n\trep(i, 1, n) SAM::SAMadd(s[i] - 'a'), pos[i] = SAM::tail;\n\trep(i, 2, SAM::tot) LCT::f[i] = SAM::fail[i];\n\trep(i, 1, m) q[i].l = read(), q[i].r = read(), q[i].idx = i;\n\tsort(q + 1, q + m + 1); int p = 1;\n\trep(i, 1, m){\n\t\tx = q[i].l; y = q[i].r; int idx = q[i].idx;\n\t\twhile(p <= y) LCT::access(pos[p], p), ++p;\n\t\tans[idx] = SMT::query(1, 1, n, x, y);\n\t}\n\trep(i, 1, m) printf(\"%lld\\n\", ans[i]);\n}\nsigned main(){ int qwq = 1; while(qwq--) mian(); return 0; }\n```\n",
        "postTime": 1611710332,
        "uid": 147999,
        "name": "Warriors_Cat",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6292 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "# \u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\n\n\u8003\u8651\u79bb\u7ebf\uff0c\u4e0d\u65ad\u6269\u5c55\u53f3\u7aef\u70b9\uff0c\u52a0\u4e0a $r$ \u7684\u8d21\u732e\uff0c\u51cf\u53bb\u91cd\u590d\u5b50\u4e32\u8d21\u732e\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e0d\u540c\u5de6\u7aef\u70b9\u7684\u7b54\u6848\u3002\n\n\u6784\u5efa SAM\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32 $S$ \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26 $ch_x$\uff0c$pos_x$ \u8868\u793a $x$ \u5728 SAM \u4e0a\u4ee3\u8868\u7684\u70b9\u3002\n\n\u6839\u636e SAM \uff0c\u52a0\u5165 $ch_r$ \u65f6\u9700\u8981\u51cf\u53bb\u8d21\u732e\u7684\u5b50\u4e32\u5bf9\u5e94\u5728 SAM \u4e0a\u662f $pos_r$ \u7684\u7956\u5148\u3002\n\n\u8003\u8651\u66b4\u529b\uff0c\u6bcf\u6b21\u6269\u5c55\u53f3\u7aef\u70b9 $r$ \uff0c$[1,r]$ \u8fdb\u884c\u533a\u95f4\u52a01\u64cd\u4f5c\uff0c\u8868\u793a\u4ee5 $ch_r$ \u4e3a\u7ed3\u5c3e\u7684\u5b50\u4e32\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\u7136\u540e\u66b4\u529b\u8df3 $pos_r$ \u7684\u7956\u5148 $u$ \uff0c\u82e5 $u$ \u6700\u540e\u88ab $lst$ \u6253\u4e0a\u4e86\u6807\u8bb0\uff0c\u5219\u4ee5 $lst$ \u4e3a\u7ed3\u5c3e\u7684\u957f\u5ea6\u4e3a $[minlen_u,maxlen_u]$ \u7684\u7684\u5b50\u4e32\u90fd\u662f\u88ab\u91cd\u590d\u8ba1\u7b97\u7684\u4e86\uff0c\u8981\u51cf\u53bb\uff0c\u6240\u4ee5\u5bf9 $[lst-maxlen_u,lst-minlen_u]$ \u8fdb\u884c\u533a\u95f4\u51cf1\u64cd\u4f5c\u3002\u6700\u540e\u518d\u7ed9\u6240\u6709\u7956\u5148\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u663e\u7136\u662f\u4e0d\u5bf9\u7684\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u5f88\u50cf LCT \u7684 access \u64cd\u4f5c\uff0c\u8003\u8651\u7528 LCT \u4f18\u5316\u3002\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u5148\u8bf4\u4e00\u4e2a\u5341\u5206\u663e\u7136\u7684\u6027\u8d28\uff1a\u5728\u4efb\u610f\u65f6\u523b\uff0c\u4ee5\u67d0\u4e2a\u53f3\u7aef\u70b9\u7684\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\u5b50\u4e32\u7684\u6700\u7aef\u70b9\u4e00\u5b9a\u662f\u4ee51\u5f00\u59cb\u7684\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\uff08\u6216\u8005\u6ca1\u8d21\u732e\uff09\uff0c\u539f\u56e0\u5c31\u662f\u5927\u7684\u4e32\u91cd\u590d\u4e86\uff0c\u5c0f\u7684\u80af\u5b9a\u4e5f\u4f1a\u91cd\u590d\u3002\n\n\u6211\u4eec\u7528 LCT \u7ef4\u62a4 SAM \u7684 parent \u6811\uff0c\u6269\u5c55 $r$ \u65f6\uff0c\u5bf9 $pos_r$ \u8fdb\u884c access \u64cd\u4f5c\uff0c\u8fd9\u6837\u88ab\u540c\u4e00\u53f3\u7aef\u70b9\u6253\u8fc7\u6807\u8bb0\u7684\u70b9\u5c31\u4f1a\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u3002\n\n\u6839\u636e\u4e4b\u524d\u90a3\u4e2a\u6027\u8d28\uff0c\u5bf9\u4e8e\u6bcf\u4e2a**\u4e4b\u524d\u7684**\u7684\u53f3\u7aef\u70b9\uff0c\u6bcf\u6b21\u9700\u8981\u88ab\u51cf\u6389\u8d21\u732e\u7684\u5b50\u4e32\u7684\u5de6\u7aef\u70b9\u4e00\u5b9a\u662f\u4e00\u4e2a**\u540e\u7f00**\uff08\u4e5f\u53ef\u4ee5\u8003\u8651\u4e00\u4e0bparent \u6811\u7684\u7279\u5f81\uff0c$maxlen$ \u968f\u6df1\u5ea6\u9012\u589e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\u7684\u6807\u8bb0\uff0c\u6df1\u5ea6\u5927\u7684\u88ab\u8986\u76d6\u4e86\uff0c\u6df1\u5ea6\u5c0f\u7684\u4e5f\u4e00\u5b9a\u88ab\u8986\u76d6\uff09\uff0c\u5f62\u8c61\u5730\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nzdicj4u.png)\n\n\u6211\u4eec\u65b0\u52a0\u5165\u53f3\u7aef\u70b9 $r$ \uff0c\u5bf9 $r'$ \uff0c\u4f1a\u6709\u4ee5\u9ec4\u8272\u6bb5\u4e3a\u6700\u5de6\u7aef\u70b9\u7684\u5b50\u4e32\u7684\u8d21\u732e\u9700\u8981\u88ab\u51cf\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 $r'$ \u7c89\u8272\u6bb5\u7684\u957f\u5ea6\u548c\u84dd\u8272\u6bb5\u7684\u957f\u5ea6\u3002\n\n\u5bf9\u4e8e\u4e00\u6761\u91cd\u94fe\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u5b83\u6700\u540e\u4e00\u6b21\u88ab\u54ea\u4e2a\u70b9\u6253\u4e0a\u4e86\u6807\u8bb0\uff08\u4e5f\u5c31\u662f $r'$\uff09\uff0c\u7c89\u8272\u6bb5\u7684\u957f\u5ea6\u548c\u84dd\u8272\u6bb5\u7684\u957f\u5ea6\u5219\u6ca1\u5fc5\u8981\u523b\u610f\u7ef4\u62a4\u3002\u5176\u5b9e\uff0c\u5728 access \u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u6b21\u901a\u8fc7\u865a\u8fb9\u5411\u4e0a\u8df3\u5230\u7684\u90a3\u4e2a\u70b9\u7684 $maxlen$ \u5c31\u662f\u7c89\u8272\u6bb5\u7684\u957f\u5ea6\uff0c\u800c\u84dd\u8272\u6bb5\u7684\u957f\u5ea6\u5219\u662f\u8fd9\u6761\u91cd\u94fe\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u7684\u5728 parent \u6811\u4e0a\u7684\u7236\u4eb2\uff08\u7531\u4e8e\u6ca1\u6709 makeroot \u64cd\u4f5c\uff0c\u6811\u7684\u5f62\u6001\u4e0d\u4f1a\u6539\u53d8\uff0cLCT \u4e0a\u7684\u7236\u4eb2\u5176\u5b9e\u4e5f\u662f\u539f\u6811\u4e0a\u7684\u7236\u4eb2\uff09 $maxlen$\u3002\n\n\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log^2n)$\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define int long long\nint read() {\n\tint x=0,f=1;char c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=3e5+5;\nint n,m,pos[N];\nchar ch[N];\nnamespace SAM {\n\tstruct PT {\n\t\tint ch[26],len,fa;\n\t}a[N];\n\tint tot=1,lat=1;\n\tvoid insert(int c) {\n\t\tint np=++tot,p=lat;lat=np;\n\t\ta[np].len=a[p].len+1;\n\t\tfor(;p&&!a[p].ch[c];p=a[p].fa)a[p].ch[c]=np;\n\t\tif(!p)a[np].fa=1;\n\t\telse {\n\t\t\tint q=a[p].ch[c];\n\t\t\tif(a[q].len==a[p].len+1)a[np].fa=q;\n\t\t\telse {\n\t\t\t\tint nq=++tot;a[nq]=a[q];\n\t\t\t\ta[nq].len=a[p].len+1;\n\t\t\t\ta[q].fa=a[np].fa=nq;\n\t\t\t\tfor(;p&&a[p].ch[c]==q;p=a[p].fa)a[p].ch[c]=nq;\n\t\t\t}\n\t\t}\n\t}\n\tvoid build() {\n\t\tfor(int i=1;i<=n;++i) {\n\t\t\tinsert(ch[i]-'a');\n\t\t\tpos[i]=lat;\n\t\t}\n\t}\n}\nnamespace SGT {\n\t#define ls (i<<1)\n\t#define rs (i<<1|1)\n\t#define mid ((l+r)>>1)\n\tint sum[N<<2],tag[N<<2],len[N<<2];\n\tvoid change(int i,int k) {sum[i]+=k*len[i];tag[i]+=k;}\n\tvoid pushup(int i) {sum[i]=sum[ls]+sum[rs];}\n\tvoid pushdown(int i) {\n\t\tif(tag[i]) {\n\t\t\tchange(ls,tag[i]);\n\t\t\tchange(rs,tag[i]);\n\t\t\ttag[i]=0;\n\t\t}\n\t}\n\tvoid updata(int i,int l,int r,int x,int y,int k) {\n\t\tif(x<=l&&r<=y) {\n\t\t\tchange(i,k);\n\t\t\treturn;\n\t\t}\n\t\tpushdown(i);\n\t\tif(x<=mid)updata(ls,l,mid,x,y,k);\n\t\tif(y>mid)updata(rs,mid+1,r,x,y,k);\n\t\tpushup(i);\n\t}\n\tint qry(int i,int l,int r,int x,int y) {\n\t\tif(x<=l&&r<=y)return sum[i];\n\t\tint res=0;\n\t\tpushdown(i);\n\t\tif(x<=mid)res+=qry(ls,l,mid,x,y);\n\t\tif(y>mid)res+=qry(rs,mid+1,r,x,y);\n\t\treturn res;\n\t}\n\tvoid build(int i,int l,int r) {\n\t\tlen[i]=r-l+1;\n\t\tif(l^r) {\n\t\t\tbuild(ls,l,mid);\n\t\t\tbuild(rs,mid+1,r);\n\t\t}\n\t}\n}\nnamespace LCT {\n\tint ch[N][2],fa[N];\n\tvoid build() {for(int i=2;i<=SAM::tot;++i)fa[i]=SAM::a[i].fa;}\n\tbool notrt(int x) {return ch[fa[x]][0]==x||ch[fa[x]][1]==x;}\n\tint val[N],tag[N];\n\tvoid change(int i,int k) {\n\t\tval[i]=k;\n\t\ttag[i]=k;\n\t}\n\tvoid pushdown(int i) {\n\t\tif(tag[i]) {\n\t\t\tif(ch[i][0])change(ch[i][0],tag[i]);\n\t\t\tif(ch[i][1])change(ch[i][1],tag[i]);\n\t\t\ttag[i]=0;\n\t\t}\n\t}\n\tvoid pushall(int x) {\n\t\tif(notrt(x))pushall(fa[x]);\n\t\tpushdown(x);\n\t}\n\tbool who(int f,int x) {return ch[f][1]==x;}\n\tvoid rotate(int x) {\n\t\tint y=fa[x],w,z=fa[y];\n\t\tbool k=who(y,x);\n\t\tw=ch[x][k^1];\n\t\tif(notrt(y))ch[z][who(z,y)]=x;\n\t\tch[x][k^1]=y;\n\t\tch[y][k]=w;\n\t\tif(w)fa[w]=y;\n\t\tfa[y]=x;\n\t\tfa[x]=z;\n\t}\n\tvoid splay(int x) {\n\t\tpushall(x);\n\t\tint y,z;\n\t\twhile(notrt(x)) {\n\t\t\tint y=fa[x],z=fa[y];\n\t\t\tif(notrt(y))rotate(who(z,y)==who(y,x)?y:x);\n\t\t\trotate(x);\n\t\t}\n\t}\n\tvoid access(int x,int ps) {\n\t\tint t=x,y;\n\t\tfor(y=0;x;x=fa[y=x]) {\n\t\t\tsplay(x);ch[x][1]=y;\n\t\t\tif(val[x])\n\t\t\t\tSGT::updata(1,1,n,val[x]-SAM::a[x].len+1,val[x]-SAM::a[fa[x]].len,-1);\n\t\t}\n\t\tsplay(t);change(t,ps);\n\t\tSGT::updata(1,1,n,1,ps,1);\n\t}\n}\nstruct Q {\n\tint l,r,i;\n}q[N];\nbool cmp(const Q &p,const Q &q) {\n\treturn p.r<q.r;\n}\nint ans[N];\nmain() {\n\tscanf(\"%s\",ch+1);\n\tn=strlen(ch+1);\n\tSAM::build();\n\tLCT::build();\n\tSGT::build(1,1,n);\n\tm=read();\n\tfor(int i=1;i<=m;++i) {\n\t\tq[i].l=read();\n\t\tq[i].r=read();\n\t\tq[i].i=i;\n\t}\n\tsort(q+1,q+m+1,cmp);\n\tfor(int R=1,i=1;R<=n;++R) {\n\t\tLCT::access(pos[R],R);\n\t\twhile(q[i].r==R)ans[q[i].i]=SGT::qry(1,1,n,q[i].l,q[i].r),++i;\n\t}\n\tfor(int i=1;i<=m;++i)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1617371657,
        "uid": 79065,
        "name": "A1443356159",
        "ccfLevel": 0,
        "title": "\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570"
    },
    {
        "content": "### **\u989c\u8272\u6bb5\u600e\u4e48\u80fd\u6ca1\u6709\u73c2\u6735\u8389\uff1f\u8fd9\u662f\u4e00\u7bc7\u5728\u540e\u7f00\u6811\u7ec4\u4e0a\u6811\u5256\u5957\u73c2\u6735\u8389\u7684\u9898\u89e3\u3002**\n\n\u7531\u4e8e\u9119\u4eba\u4e0d\u4f1a $\\text{SAM}$ \u540e\u7f00\u6811\u90fd\u662f\u7528\u540e\u7f00\u6570\u7ec4\u5efa\u7684\u3002\n\n\u60f3\u60f3\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u7684\u505a\u6cd5\u662f\u4ec0\u4e48\u3002\n\n\u6709\u4e24\u79cd\u505a\u6cd5\uff0c\u7b2c\u4e00\u79cd\u5bb9\u65a5\uff0c\u7b2c\u4e8c\u79cd\u5c31\u662f\u6811\u7684\u5927\u5c0f\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u79cd\u3002\n\n\u5148\u5bf9\u4e8e\u5b57\u7b26\u4e32\u5efa\u51fa\u540e\u7f00\u6811\uff01\n\n\u8fd9\u79cd\u5f62\u5f0f\u7684\u8be2\u95ee\u80af\u5b9a\u8003\u8651\u79bb\u7ebf\u626b\u63cf\u7ebf\u554a\uff01\n\n\u90a3\u4e48\u4ece\u5de6\u5f80\u53f3\u626b\u8fd8\u662f\u4ece\u53f3\u5f80\u5de6\u626b\u634f\uff1f\n\n\u662f\u4ece\u53f3\u5f80\u5de6\u626b\u54d2\u3002\n\n\u611f\u6027\u601d\u8003\u4e00\u4e0b\u5c31\u662f\u5de6\u5230\u53f3\u52a0\u5165\u7684\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u53f3\u5230\u5de6\u52a0\u5165\u7684\u662f\u4e00\u6574\u4e2a\u540e\u7f00\u3002\n\n\u73b0\u5728\u5de6\u7aef\u70b9\u56fa\u5b9a\uff0c\u6211\u4eec\u8981\u5f97\u5230\u4efb\u610f\u53f3\u7aef\u70b9\u7684\u7b54\u6848\u3002$($ \u626b\u63cf\u7ebf\u7684\u601d\u8003\u65b9\u5f0f $)$\n\n\u6211\u4eec\u8003\u8651\u65b0\u52a0\u5165\u4e00\u4e2a\u540e\u7f00\uff0c\u5b83\u53ef\u80fd\u9020\u6210\u7684\u8d21\u732e\u8303\u56f4\u5c31\u662f\u8fd9\u4e2a\u540e\u7f00\u5f00\u59cb\u7684\u53f6\u5b50\u5230\u6839\u7684\u8def\u5f84\uff0c\u5982\u679c\u53f3\u7aef\u70b9\u662f $n$ \u7684\u8bdd\uff0c\u8fd9\u6761\u8def\u5f84\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u9020\u6210\u8d21\u732e\uff0c\u53ef\u4ee5\u770b\u6210\u8fd9\u6761\u8def\u5f84\u88ab\u5b83\u67d3\u4e86\u4e2a\u8272\uff0c\u5982\u679c\u53f3\u7aef\u70b9\u662f $n-1$ \u7684\u8bdd\uff0c\u8fd9\u6761\u8def\u5f84\u9664\u4e86\u53f6\u5b50\u7684\u5176\u4ed6\u70b9\u90fd\u88ab\u5b83\u67d3\u8272\u4e86\u3002\n\n\u90a3\u4e00\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u5c31\u662f\u6240\u6709\u88ab\u67d3\u8272\u70b9\u7684\u4e2a\u6570\u548c\u3002\n\n\u4f46\u662f\u4e00\u4e2a\u70b9\u53ef\u80fd\u4f1a\u88ab\u67d3\u6210\u591a\u79cd\u989c\u8272\uff0c\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u5b83\u88ab\u67d3\u7684\u6700\u540e\u4e00\u79cd\u989c\u8272\u7684\u4f18\u5148\u5ea6\u5927\u4e8e\u5176\u4ed6\u989c\u8272\uff0c\u90a3\u8fd9\u4e2a\u600e\u4e48\u8bc1\u660e\u5462\uff0c\u5c31\u662f\u8003\u8651\u53f3\u7aef\u70b9\u5de6\u79fb\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4ece\u53f6\u5b50\u5230\u6839\u892a\u8272\u7684\u8fc7\u7a0b\uff0c\u800c\u4ece\u53f3\u5f80\u5de6\u626b\u6bcf\u6b21\u52a0\u5165\u7684\u4e00\u4e2a\u540e\u7f00\u7684\u6df1\u5ea6\u662f\u6bd4\u4e4b\u524d\u7684\u6240\u6709\u540e\u7f00\u8981\u6df1\u7684\uff0c\u6240\u4ee5\u5b83\u67d3\u5f97\u70b9\u4e00\u5b9a\u662f\u76f8\u8f83\u522b\u7684\u989c\u8272\u892a\u8272\u6700\u665a\u7684\u3002\n\n\u7136\u540e\u4e00\u79cd\u989c\u8272\u505a\u7684\u8d21\u732e\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e2a\u5e38\u6570\u9879\u548c\u4e00\u6b21\u9879\u6765\u505a\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a $len$ \u7684\u989c\u8272\uff0c\u5f53\u53f3\u7aef\u70b9\u8ddd\u79bb $n$ \u4e3a $k$ \u65f6\uff0c\u8d21\u732e\u5c31\u662f $len-k$\u3002 \n\n\u90a3\u6211\u4eec\u63d2\u5165\u4e00\u4e2a\u540e\u7f00\u6211\u4eec\u5c31\u8981\u628a\u5b83\u4ece\u53f6\u5b50\u5230\u6839\u7684\u8def\u5f84\u6240\u6709\u989c\u8272\u90fd\u67d3\u6210\u5b83\u7684\u989c\u8272\uff0c\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u6811\u5256\uff0c\u628a\u5b83\u53d8\u6210\u5e8f\u5217\u95ee\u9898\uff0c\u4e00\u79cd\u989c\u8272\u5c31\u4f1a\u67d3 $\\log n$ \u6761\u6811\u94fe\u3002\u6bcf\u6b21\u67d3\u8272\u5c31\u7528\u73c2\u6735\u8389\u63a8\u5e73\u987a\u4fbf\u7ef4\u62a4\u989c\u8272\u957f\u5ea6\uff0c\u5355\u6b21\u67e5\u8be2\u7528\u6811\u72b6\u6570\u7ec4\u3002\n\n\u590d\u6742\u5ea6 $O(n \\log^2 n +m \\log n)$\u3002\n\n[code](https://www.luogu.com.cn/paste/859m2an0)",
        "postTime": 1680769262,
        "uid": 363980,
        "name": "yszs",
        "ccfLevel": 6,
        "title": "P6292 \u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u9898\u89e3"
    },
    {
        "content": "\u4e0d\u4f1a LCT\u3002\n\n\u5b50\u4e32\u95ee\u9898\u5148\u628a SAM \u5efa\u51fa\u6765\u3002\n\n\u4e00\u79cd\u5f88\u663e\u7136\u7684\u60f3\u6cd5\u662f\u79bb\u7ebf\u4e0b\u6765\u626b\u63cf\u7ebf\uff0c\u5c06 $r$ \u5f80\u53f3\u626b\uff0c\u7ef4\u62a4\u6bcf\u4e2a $l$ \u5f53\u524d\u7684\u7b54\u6848\u3002\u540c\u65f6\u9700\u8981\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u4e32\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u76ee\u524d\u6700\u5927\u7684 endpos\u3002\n\n\u628a\u5b50\u4e32\u5bf9\u5e94\u5230\u540e\u7f00\u6811\u7684\u7ed3\u70b9\u4e0a\u3002$r$ \u5f80\u53f3\u79fb\u76f8\u5f53\u4e8e\u5728\u6811\u4e0a\u52a0\u5165\u4e00\u4e2a\u5b83\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0c\u5e76\u628a\u6240\u6709\u7684\u7956\u5148\u7684 endpos \u90fd\u66f4\u65b0\u3002\u4f46\u662f\u7b97\u8d21\u732e\u6211\u4eec\u9700\u8981\u5148\u628a\u7956\u5148\u7684\u8d21\u732e\u51cf\u6389\uff0c\u7136\u540e\u628a\u5b83\u4eec\u7684 endpos \u66f4\u65b0\u4ee5\u540e\u518d\u91cd\u65b0\u52a0\u4e0a\u3002\n\n\u5230\u6839\u7684\u8def\u5f84\u56fe\u65b9\u4fbf\u8003\u8651\u76f4\u63a5\u6811\u5256\u3002\u7136\u540e\u8003\u8651\u600e\u4e48\u7b97\u8d21\u732e\u3002 \n\n\u4e8b\u5b9e\u4e0a\u5982\u679c\u6211\u4eec\u628a\u6bcf\u4e2a endpos \u770b\u6210\u4e00\u79cd\u989c\u8272\uff0c\u6bcf\u6b21\u76f8\u5f53\u4e8e\u628a\u5f53\u524d\u70b9\u5230\u6839\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u67d3\u6210\u540c\u4e00\u79cd\u65b0\u7684\u989c\u8272\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u989c\u8272\u6bb5\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u91cd\u94fe\uff0c\u6211\u4eec\u7ef4\u62a4\u5176\u5f62\u6210\u7684\u6240\u6709\u989c\u8272\u6bb5\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u66b4\u529b\u628a\u6240\u6709\u7ecf\u8fc7\u7684\u989c\u8272\u6bb5\u9010\u4e2a\u8d21\u732e\u5220\u6389\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u53ea\u548c\u989c\u8272\u6bb5\u4e2a\u6570\u6709\u5173\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a\u5bf9\u4e8e\u67d0\u6761\u94fe\u4e0a\u5f53\u524d endpos \u4e00\u6837\u7684\u4e00\u6bb5\u70b9\uff0c\u7b97\u4ed6\u4eec\u5bf9 $l$ \u7684\u8d21\u732e\u3002\u4f46\u662f\u7531\u4e8e $minlen_{u}=maxlen_{fa_{u}}+1$\uff0c\u6240\u4ee5\u663e\u7136\u4e00\u6761\u94fe\u7684\u8d21\u732e\u662f\u4e00\u4e2a\u5927\u7684\u533a\u95f4\uff0c\u8fd9\u6837\u6211\u4eec\u6bcf\u4e00\u6bb5\u7684\u66f4\u65b0\u90fd\u662f\u4e00\u4e2a\u533a\u95f4\u52a0\uff0c\u7136\u540e\u67e5\u8be2\u662f\u533a\u95f4\u6c42\u548c\u3002\n\n\u7531\u4e8e\u6bcf\u4e2a $r$ \u53ea\u4f1a\u8d21\u732e $O(\\log n)$ \u4e2a\u989c\u8272\u6bb5\uff0c\u6240\u4ee5\u5220\u9664\u548c\u6dfb\u52a0\u989c\u8272\u6bb5\u7684\u590d\u6742\u5ea6\u5747\u644a\u662f $O(\\log n)$ \u7684\uff0c\u6bcf\u6b21\u66f4\u65b0\u533a\u95f4\u52a0\u8981\u4e00\u4e2a $\\log$\uff0c\u67e5\u8be2\u8981\u4e00\u4e2a $\\log$\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a $O(n\\log^2n+m\\log n)$\u3002\n\n",
        "postTime": 1679190575,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "P6292"
    },
    {
        "content": "\u9898\u610f\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\u3002\n\n\u6211\u4eec\u9996\u5148\u8003\u8651\uff1a\u600e\u6837\u7edf\u8ba1\u4e00\u6bb5\u533a\u95f4\u7684\u989c\u8272\u4e2a\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u8be2\u95ee\u79bb\u7ebf\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5c06\u5176 $+1$\uff0c\u540c\u65f6\u5c06\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e $-1$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684 $r = i$ \u8fdb\u884c\u533a\u95f4\u67e5\u8be2\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\u76ee\u4e0a\u6765\u3002\u533a\u95f4\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\uff0c\u80af\u5b9a\u8981\u7528\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u5bf9\u4e8e SAM \u4e0a\u7684\u4e00\u4e2a\u72b6\u6001 $p$ \u800c\u8a00\uff0c\u6211\u4eec\u5b9a\u4e49 last \u4e3a\u5728\u8003\u8651\u5230 $i$ \u65f6\uff0c\u5728 $[1,i]$ \u4e2d\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5373 `lst[i]=SAM.last` \u3002\n\n\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e2d\uff0c\u4ee5 $ch$ \u7ed3\u5c3e\u7684\u5b50\u4e32\u5c31\u662f\u5176 parent \u6811\u4e0a\u7684\u6240\u6709\u7956\u5148\u3002\u6211\u4eec\u6bcf\u6b21\u66f4\u65b0\u4e5f\u5fc5\u5b9a\u4f1a\u8ba9\u8fd9\u4e9b\u7956\u5148\u5168\u90e8\u53d8\u6210 last\u3002\n\n\u90a3\u6211\u4eec\u4e0d\u59a8\u76f4\u63a5\u53d6\u6d88\u6389\u8fd9\u6574\u6761\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff0c\u518d\u5168\u90e8\u8d4b\u503c\u3002\n\n\u6211\u4eec\u8981\u52a8\u6001\u7ef4\u62a4\u6574\u68f5\u6811\uff0c\u4e5f\u8981\u7ef4\u62a4\u94fe\u4e0a\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528 Link-Cut Tree\u3002\n\n\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u64cd\u4f5c\u53ef\u4ee5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <cstring>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n#define pb push_back\nconst int N = 2e5 + 5;\nint n, m;\nstruct Suffix_Automaton {\n    struct node {\n        int ch[26];\n        int len, fail;\n    } tr[N<<1];\n    int last = 1, tot = 1;\n    void ins(int x) {\n        int p = last, q, now = ++tot;\n        tr[now].len = tr[p].len + 1;\n        for (; p && !tr[p].ch[x]; p = tr[p].fail)\n            tr[p].ch[x] = now;\n        if (!p) { tr[now].fail = 1; }\n        else {\n            q = tr[p].ch[x];\n            if (tr[q].len == tr[p].len + 1) tr[now].fail = q;\n            else {\n                int cl = ++tot;\n                tr[cl] = tr[q];\n                tr[cl].len = tr[p].len + 1;\n                tr[q].fail = tr[now].fail = cl;\n                for (; p && tr[p].ch[x] == q; p = tr[p].fail)\n                    tr[p].ch[x] = cl; \n            }\n        } \n        last = now;\n    }\n} SAM;\nstruct Segment_Tree {\n    struct node {\n        int l, r;\n        ll sum, add;\n        ll len() { return 1ll * (r - l + 1); }\n    } t[N<<1];\n    #define ls(k) k << 1\n    #define rs(k) k << 1 | 1 \n    void pushup(int k) { t[k].sum = t[ls(k)].sum + t[rs(k)].sum; }\n    void build(int k, int l, int r) {\n        t[k].l = l, t[k].r = r;\n        if (l == r) return ;\n        const int mid = l + r >> 1;\n        build(ls(k), l, mid), build(rs(k), mid+1, r);\n    }\n    void change(int k, ll d) {\n        t[k].sum += t[k].len() * d;\n        t[k].add += d;\n    }\n    void pushdown(int k) {\n        if (!t[k].add) return ;\n        change(ls(k), t[k].add), change(rs(k), t[k].add);\n        t[k].add = 0;\n    }\n    void update(int k, int ql, int qr, ll x) {\n        int l = t[k].l, r = t[k].r, mid = l + r >> 1;\n        if (l >= ql && r <= qr) return change(k, x);\n        pushdown(k);\n        if (ql <= mid) update(ls(k), ql, qr, x);\n        if (qr > mid) update(rs(k), ql, qr, x);\n        pushup(k);\n    }\n    ll query(int k, int ql, int qr) {\n        int l = t[k].l, r = t[k].r, mid = l + r >> 1;\n        if (l >= ql && r <= qr) return t[k].sum;\n        pushdown(k);\n        ll res = 0;\n        if (ql <= mid) res += query(ls(k), ql, qr);\n        if (qr > mid) res += query(rs(k), ql, qr);\n        return res;\n    }\n} SGT;\nstruct Link_Cut_Tree {\n    int val[N], ch[N][2], rev[N], siz[N], fa[N];\n    void pushup(int k, int x) {\n        val[k] = rev[k] = x;\n    }\n    void pushdown(int k) {\n        if (!rev[k]) return ;\n        if (ch[k][0]) pushup(ch[k][0], rev[k]);\n        if (ch[k][1]) pushup(ch[k][1], rev[k]);\n        rev[k] = 0;\n    }\n    bool isroot(int k) { return (ch[fa[k]][0] != k) && (ch[fa[k]][1] != k); }\n    int get(int k) { return ch[fa[k]][1] == k; }\n    void rotate(int x) {\n        int y = fa[x], z = fa[y], k = get(x);\n        if (!isroot(y))\n            ch[z][ch[z][1] == y] = x;\n        ch[y][k] = ch[x][!k], fa[ch[x][!k]] = y;\n           ch[x][!k] = y, fa[y] = x, fa[x] = z;\n//\t    pushup(y), pushup(x);\n    }\n    void update(int p) {\n        if (!isroot(p))\n            update(fa[p]);\n        pushdown(p);\n    }\n    void splay(int x) {\n        update(x);\n        for (int fat; fat = fa[x], !isroot(x); rotate(x)) {\n            if (!isroot(fat))\n                rotate(get(fat) == get(x) ? fat : x);\n        }\n    }\n    void access(int x, int d) {\n        int p = 0;\n        for (; x; p = x, x = fa[x]) {\n            splay(x), ch[x][1] = p;\n            if (val[x]) {\n                SGT.update(1, val[x] - SAM.tr[x].len + 1, val[x] - SAM.tr[fa[x]].len, -1);\n            }\n        }\n        pushup(p, d);\n        SGT.update(1, 1, d, 1); \n    }\n} LCT;\nint lst[N];\nll ans[N];\nvector<pii> q[N];\nchar s[N];\nint main(void) {\n    scanf(\"%s\", s + 1);\n    n = strlen(s + 1);\n    SGT.build(1, 1, n);\n    for (int i=1; i<=n; i++) {\n        SAM.ins(s[i] - 'a');\n        lst[i] = SAM.last;\n    }\n    for (int i=2; i<=SAM.tot; i++) LCT.fa[i] = SAM.tr[i].fail;\n    scanf(\"%d\", &m);\n    for (int i=1, l, r; i<=m; i++) {\n        scanf(\"%d%d\", &l, &r);\n        q[r].pb(mp(l, i));\n    }\n    for (int i=1; i<=n; i++) {\n        LCT.access(lst[i], i);\n        for (auto j : q[i]){\n            ans[j.second] = SGT.query(1, j.first, i); \n        }\n    }\n    for (int i=1; i<=m; i++) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\n",
        "postTime": 1616927931,
        "uid": 255095,
        "name": "PragmaGCC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6242 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "# \u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6292)\n## \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u4e2a\u6bcd\u4e32$\\text s$\uff0c\u6709$q$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u67e5\u8be2$l,r$\u533a\u95f4\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3002\n## \u89e3\u9898\u601d\u8def\n\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u9053\u9898\u592a\u5999\u4e86\u3002\n\n\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\uff0c\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\n\n>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4$[l,r]$\u4e4b\u95f4\u7684\u989c\u8272\u4e2a\u6570\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u91c7\u53d6\u8fd9\u6837\u4e00\u79cd\u65b9\u6cd5\uff1a\u6211\u4eec\u628a\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u4ece\u5de6\u5f80\u53f3\u626b\u4e00\u904d\uff0c\u5bf9\u4e8e\u5f53\u524d\u70b9\uff0c\u6211\u4eec\u628a\u8be5\u70b9\u6743\u503c+1\uff0c\u4e0a\u6b21\u51fa\u73b0\u8be5\u989c\u8272\u7684\u70b9\u6743\u503c-1\uff0c\u7136\u540e\u5bf9\u4e8e\u6240\u6709$r=i$\u7684\u8be2\u95ee\u8ba1\u7b97\u533a\u95f4\u6743\u503c\u4e4b\u548c\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7c7b\u4f3c\u7684\u601d\u8def\u3002\u6211\u4eec\u8003\u8651\uff0c\u5982\u679c\u5f53\u524d\u70b9\u62d3\u5c55\u5230$i$,\u5982\u679c\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\u5b9a\u4e49$last$\u4e3a\u5728\u5b50\u4e32$s_{1,2,...,i}$\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\uff0c\u5bf9\u4e8e$S_{1,2,..,i}$\u5728$\\text {SAM}$\u4e0a\u5bf9\u5e94\u7684\u72b6\u6001\u4ee5\u53ca\u5b83\u7684$fail$\u7956\u5148\u7684$last$\u90fd\u4f1a\u53d8\u6210$last$\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u81ea\u7136\u800c\u7136\u7684\u60f3\u5230\u4e00\u79cd\u89e3\u6cd5\uff0c\u6bcf\u6b21\u628a\u8be5\u70b9\u5230\u6839\u7684\u70b9\u90fd\u5148\u53d6\u6d88\u6389\u5b83\u4eec\u7684\u8d21\u732e\uff0c\u7136\u540e\u628a$last$\u90fd\u8d4b\u4e3a\u5f53\u524d\u62d3\u5c55\u8282\u70b9\uff0c\u5373$i$\uff0c\u518d\u589e\u52a0\u8d77\u8d21\u732e\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5230\u6839\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528$\\text {LCT}$\u4e2d\u7684$\\text {Access}$\u64cd\u4f5c\u89e3\u51b3\uff0c\u800c\u6211\u4eec\u53ea\u9700\u8981\u518d\u5b9e\u73b0\u533a\u95f4\u66f4\u6539\u4ee5\u53ca\u533a\u95f4\u67e5\u8be2\u5373\u53ef\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u6700\u7ec8\u53ef\u4ee5\u7528\u79bb\u7ebf\u65b9\u6cd5\u5728$\\Theta(n\\log^2n+m\\log n)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\uff0c\u5176\u4e2d$n$\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6,$m$\u662f\u67e5\u8be2\u6b21\u6570\u3002\n## $\\text {Code}$\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define PII pair<int,int>\n#define Int register int\n#define ll long long\n#define MAXN 200005\n\ntemplate <typename T> inline void read (T &t){t = 0;char c = getchar();int f = 1;while (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}while (c >= '0' && c <= '9'){t = t * 10 + c - '0';c = getchar();} t *= f;}\ntemplate <typename T,typename ... Args> inline void read (T &t,Args&... args){read (t);read (args...);}\ntemplate <typename T> inline void write (T x){if (x < 0){x = -x;putchar ('-');}if (x > 9) write (x / 10);putchar (x % 10 + '0');}\n\nint n,m;\n\nchar s[MAXN]; \n\nstruct SAM{\n\tint lst = 1,cur = 1;\n\tint ch[MAXN][26],len[MAXN],fail[MAXN];\n\tvoid Insert (int c){\n\t\tif (ch[lst][c] && len[ch[lst][c]] == len[lst] + 1) return lst = ch[lst][c],void ();\n\t\tint q = ++ cur,f = lst;len[q] = len[f] + 1,lst = q;\n\t\twhile (f && !ch[f][c]) ch[f][c] = q,f = fail[f];\n\t\tif (f == 0) fail[q] = 1;\n\t\telse{\n\t\t\tint x = ch[f][c];\n\t\t\tif (len[x] == len[f] + 1) fail[q] = x;\n\t\t\telse{\n\t\t\t\tif (len[q] == len[f] + 1) lst = cur + 1;\n\t\t\t\tint p = ++ cur;fail[p] = fail[x],len[p] = len[f] + 1;\n\t\t\t\tmemcpy (ch[p],ch[x],sizeof (ch[x])),fail[x] = fail[q] = p;\n\t\t\t\twhile (f && ch[f][c] == x) ch[f][c] = p,f = fail[f];\n\t\t\t}\n\t\t}\n\t}\n}Sam; \n\nstruct Segment{\n\tll sumv[MAXN << 1],tag[MAXN << 1];\n\tvoid Pushadd (int i,int l,int r,int x){\n\t\tsumv[i] += 1ll * (r - l + 1) * x;\n\t\ttag[i] += x;\n\t}\n\tvoid Pushdown (int i,int l,int r){\n\t\tint mid = (l + r) >> 1;\n\t\tif (tag[i]){\n\t\t\tPushadd (i << 1,l,mid,tag[i]);\n\t\t\tPushadd (i << 1 | 1,mid + 1,r,tag[i]);\n\t\t\ttag[i] = 0;\n\t\t}\n\t}\n\tvoid Pushup (int i){\n\t\tsumv[i] = sumv[i << 1] + sumv[i << 1 | 1];\n\t}\n\tvoid modify (int i,int l,int r,int tl,int tr,int x){\n\t\tif (l >= tl && r <= tr) return Pushadd (i,l,r,x);\n\t\tPushdown (i,l,r);\n\t\tint mid = (l + r) >> 1;\n\t\tif (tl <= mid) modify (i << 1,l,mid,tl,tr,x);\n\t\tif (tr > mid) modify (i << 1 | 1,mid + 1,r,tl,tr,x);\n\t\tPushup (i);\n\t}\n\tll query (int i,int l,int r,int tl,int tr){\n\t\tif (l >= tl && r <= tr) return sumv[i];\n\t\tPushdown (i,l,r);\n\t\tint mid = (l + r) >> 1;ll res = 0;\n\t\tif (tl <= mid) res += query (i << 1,l,mid,tl,tr);\n\t\tif (tr > mid) res += query (i << 1 | 1,mid + 1,r,tl,tr);\n\t\treturn res;\n\t}\n}Tree;\n\nstruct LCT{\n#define ls son[x][0]\n#define rs son[x][1]\n\tint fa[MAXN],val[MAXN],cov[MAXN],last[MAXN],son[MAXN][2];\n\tbool rnk (int x){\n\t\treturn son[fa[x]][1] == x;\n\t}\n\tbool Isroot (int x){\n\t\treturn son[fa[x]][0] != x && son[fa[x]][1] != x;\n\t}\n\tvoid Pushadd (int x,int k){\n\t\tval[x] = cov[x] = k;\n\t}\n\tvoid Pushdown (int x){\n\t\tif (cov[x]){\n\t\t\tif (ls) Pushadd (ls,cov[x]);\n\t\t\tif (rs) Pushadd (rs,cov[x]);\n\t\t\tcov[x] = 0;\n\t\t}\n\t}\n\tvoid rotate (int x){\n\t\tint y = fa[x],z = fa[y],k = rnk (x),w = son[x][!k];\n\t\tif (!Isroot (y)) son[z][rnk (y)] = x;son[x][!k] = y,son[y][k] = w;\n\t\tif (w) fa[w] = y;fa[x] = z,fa[y] = x;\n\t}\n\tvoid Pushall (int x){\n\t\tif (!Isroot (x)) Pushall (fa[x]);\n\t\tPushdown (x);\n\t}\n\tvoid Splay (int x){\n\t\tPushall (x);\n\t\twhile (!Isroot (x)){\n\t\t\tint y = fa[x];\n\t\t\tif (!Isroot (y)) rotate (rnk (x) == rnk (y) ? y : x);\n\t\t\trotate (x);\n\t\t}\n\t}\n\tvoid Access (int x,int k){\n\t\tint y;\n\t\tfor (y = 0;x;x = fa[y = x]){\n\t\t\tSplay (x),rs = y;\n\t\t\tif (val[x]) Tree.modify (1,1,n,val[x] - Sam.len[x] + 1,val[x] - Sam.len[fa[x]],-1); \n\t\t}\n\t\tPushadd (y,k),Tree.modify (1,1,n,1,k,1); \n\t}\n#undef ls\n#undef rs\n}Lct;\n\nint pos[MAXN];ll ans[MAXN];\n\nvector <PII> que[MAXN];\n\nsigned main(){\n\tscanf (\"%s\",s + 1);\n\tn = strlen (s + 1);\n\tfor (Int i = 1;i <= n;++ i) Sam.Insert (s[i] - 'a'),pos[i] = Sam.lst;\n\tfor (Int i = 2;i <= Sam.cur;++ i) Lct.fa[i] = Sam.fail[i]; \n\tread (m);\n\tfor (Int i = 1;i <= m;++ i){\n\t\tint l,r;read (l,r);\n\t\tque[r].push_back (make_pair (i,l));\n\t}\n\tfor (Int i = 1;i <= n;++ i){\n\t\tLct.Access (pos[i],i);\n\t\tfor (Int j = 0;j < que[i].size();++ j){\n\t\t\tPII Now = que[i][j];\n\t\t\tans[Now.first] = Tree.query (1,1,n,Now.second,i); \n\t\t}\n\t}\n\tfor (Int i = 1;i <= m;++ i) write (ans[i]),putchar ('\\n');\n    return 0;\n}\n```",
        "postTime": 1590472377,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6292 \u3010\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3011"
    },
    {
        "content": "**P6292**\u9898\u89e3\u3002\n\n\u4e2a\u4eba\u611f\u89c9\u603b\u7684\u6765\u8bf4\uff0c\u60f3\u6e05\u695a\u4e86\u8fd8\u662f\u6bd4\u8f83 ez \u7684\u3002\n\n~~\u53ef\u60dc\u4f60\u8fd8\u662f\u6ca1\u60f3\u6e05\u695a\u7b2c\u4e00\u904d\u505a\u6cd5\u5c31\u5047\u4e86\u3002~~\n\n\u8fd8\u8c03\u4e86\u597d\u4e45\u3002\n\n--------------------------------------------------------\n\n\u8003\u8651\u5148\u4e00\u6ce2\u628a SAM \u5efa\u597d\uff0c\u6839\u636e endpos \u5728 parent tree \u4e0a\u5212\u5206\u7684\u539f\u7406\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u5c06\u6bcf\u4e2a\u70b9\u4ee3\u8868\u7684\u5b50\u4e32\u8d21\u732e\u5c3d\u91cf\u644a\u5230**\u5728\u67e5\u8be2\u533a\u95f4\u5185\u7684\u6700\u540e\u4e00\u4e2a endpos \u4e0a**\u3002\n\n\u4e0d\u96be\u60f3\u5230\u626b\u63cf\u7ebf\uff0c\u5efa\u7acb SAM \u7684\u540c\u65f6\u7ef4\u62a4\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u524d\u7f00 $i$ \u6240\u5bf9\u5e94\u7684 SAM \u8282\u70b9\u3002\u663e\u7136\uff0c\u6709\u4e14\u4ec5\u6709\u8be5\u8282\u70b9\u7684\u6240\u6709\u7956\u5148\u7684 endpos \u5177\u6709 $i$ \u4f4d\u7f6e\u3002\n\n\u5c06\u8fd9\u4e00\u6bb5\u8def\u5f84\u8fdb\u884c\u4e00\u4e2a\u66b4\u529b\u64cd\u4f5c\uff1a\u627e\u5230\u6bcf\u4e2a\u70b9\u4e4b\u524d\u7684 lst \u7136\u540e\u628a\u4e4b\u524d\u7684\u8d21\u732e\u6254\u4e86\uff0c\u52a0\u4e0a\u73b0\u5728\u7684\u8d21\u732e\uff0c\u8fd9\u91cc\u7684\u8d21\u732e\u6307\u7684\u662f**\u5f53\u524d\u8282\u70b9\u6240\u4ee3\u8868\u7684\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u6570\u91cf $v$\uff08\u5373\u5f53\u524d\u8282\u70b9\u7684 $len$ \u51cf\u53bb\u4e86\u7236\u4eb2\u7684 $len$\uff09\u5bf9\u4e8e\u533a\u95f4 $[lst - v + 1 , lst]$ \u8fdb\u884c\u7684\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u52a0\uff0c\u5bf9 $[1,lst-1]$ \u8fdb\u884c\u4e86\u4e00\u4e2a\u533a\u95f4\u52a0 $v$\u3002**\n\n\u53d1\u73b0\u8fd9\u4e1c\u897f\u4e0e access \u592a\u50cf\u4e86\uff0c\u8003\u8651\u76f4\u63a5\u62c9\u4e00\u4e2a LCT \u51fa\u6765\uff0c\u4e00\u6761\u5b9e\u94fe\u5c31\u5bf9\u5e94\u4e00\u6bb5 lst \u76f8\u540c\u7684\u8282\u70b9\uff0c\u663e\u7136\u6839\u636e\u4e0a\u8ff0\u66b4\u529b\u64cd\u4f5c\u7684\u6027\u8d28\uff0cparent tree \u5728\u4efb\u610f\u65f6\u523b\u90fd\u662f\u88ab\u5206\u6210\u5f88\u591a\u6761\u5b9e\u94fe\u7684\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u6837\u6bcf\u6b21\u53bb\u9664\u8d21\u732e\u8fd8\u662f\u53ea\u80fd\u66b4\u529b\u6254\uff0c\u56e0\u4e3a\u4e0a\u8ff0\u7684\u8d21\u732e\u4e0d\u5177\u6709\u5feb\u901f\u5408\u5e76\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u5f97\u7a0d\u5fae\u52a8\u52a8\u624b\u811a\u3002\n\n\u6211\u4eec\u53d1\u73b0 LCT \u672c\u8d28\u7ef4\u62a4\u7684\u5c31\u662f parent tree\uff0c\u800c\u8d21\u732e\u867d\u7136\u4e0d\u80fd\u5feb\u901f\u5408\u5e76\u4f46\u662f\u53ef\u4ee5\u53e0\u52a0\uff0c\u6211\u4eec\u5e72\u8106\u5c31\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684 $v$ \u76f4\u63a5\u8bbe\u4e3a\u5b83\u4eec\u7684 $len$\uff0c\u5dee\u5206\u540e\u4e00\u6761\u5b9e\u94fe\u7684\u8d21\u732e\u5c31\u7b49\u4ef7\u4e8e\u7528\u94fe\u5e95\u8282\u70b9\u7684\u8d21\u732e\u51cf\u53bb\u94fe\u5934\u7236\u4eb2\u8282\u70b9\u7684\u8d21\u732e\uff0c\u53ef\u4ee5\u5feb\u901f\u7ef4\u62a4\u4e86\u3002\n\n\u7136\u540e\u7b49\u5dee\u6570\u5217\u52a0\u548c\u5355\u70b9\u67e5\u4e5f\u5f88 ez\uff0c\u5dee\u5206\u540e\u7b49\u4ef7\u4e8e\u533a\u95f4\u52a0\u533a\u95f4\u67e5\uff0c\u4e0a\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u603b\u7ed3\u4e00\u4e0b\uff1a\n\n- \u626b\u63cf\u7ebf\u3002\u5efa\u7acb SAM\uff0c\u7ef4\u62a4 parent tree\uff1b\n\n- \u6bcf\u6b21 access \u524d\u7f00 $i$ \u6240\u5bf9\u5e94\u7684\u8def\u5f84\uff0c\u5bf9\u4e8e\u6bcf\u6761\u5b9e\u94fe\u7ef4\u62a4\u94fe\u5e95\u8282\u70b9\u672c\u8eab\uff08\u5728\u5b9e\u73b0\u65f6\u53ef\u4ee5\u7701\u53bb\uff09\u4e0e\u94fe\u5934\u8282\u70b9\u7684\u7236\u4eb2\uff0c\u5373\u53ef\u5feb\u901f\u56de\u9000/\u52a0\u5165\u5b9e\u94fe\u8d21\u732e\uff1b\n\n- \u79bb\u7ebf\u540e\u505a\u533a\u95f4\u52a0\u533a\u95f4\u67e5\u7ebf\u6bb5\u6811\u3002\n\n\u6700\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n \\log ^ 2 n + q \\log n)$\uff0c\u53bb\u8c03\u7ebf\u6bb5\u6811\u7684\u53c9\u6570\u53ef\u4ee5\u83b7\u5f97\u66f4\u5feb\u7684\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n```cpp\n/*\n\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u9006\u5e8f\u5bf9\u3002\n\u54e6\u6253\u9519\u4e86\u662f\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\uff08bushi \n\u6211\u4f1a\u66b4\u529b\uff01\u53ef\u4ee5\u66b4\u529b\u5efa\u51fa [L,R] \u7684\u5b50\u4e32\u7684\u5f62\u5f0f\u7136\u540e\u66b4\u529b\u7edf\u8ba1\u7b54\u6848\n\u56de\u6eda\u83ab\u961f\uff1f\u7b11\u5b89\u9038\u4e86\n\u53ef\u4ee5\u8003\u8651\u5728\u6784\u5efa SAM \u7684\u65f6\u5019\u5176\u5b9e\u7ef4\u62a4\u7684\u662f [1,R] \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u8fc7\u662f\u60f3\u53bb\u9664 [1,l - 1] \u7684\u60c5\u51b5\n\u611f\u89c9\u8fd8\u662f\u5bf9\u7ed3\u6784\u7406\u89e3\u7684\u4e0d\u5230\u4f4d\uff0c\u4e0d\u59a8\u5c06 [R,R],[R - 1,R],......\u8fd9\u4e9b\u5b50\u4e32\u7684 lst \u90fd\u6539\u4e00\u4e0b\n\u601d\u8003\u63d2\u5165\u540e\u7f00\u5b57\u7b26\u7684\u8fc7\u7a0b\uff0c\u663e\u7136\u5f53\u524d\u8282\u70b9\u5230\u6839\u90fd\u9700\u8981\u5c06\u6700\u540e\u51fa\u73b0\u7684\u540e\u7f00\u7684 lst \u90fd\u53d8\u6210 r\n\u6574\u7406\u4e00\u4e0b\uff1a\u4e00\u76f4\u5411\u4e0a\u722c\uff0c\u627e\u5230\u4e00\u4e2a\u6254\u4e00\u4e2a\u8fdb\u53bb\uff0c\u5982\u679c\u9700\u8981\u62c6\u5206\u5c31\u62c6\u51fa\u6765\u7136\u540e\u628a lst \u641e\u4e00\u4e0b\n\u597d\u50cf\u505a\u590d\u6742\u4e86\uff0c\u6839\u636e endpos \u4f20\u9012\u7684\u539f\u7406\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 fa \u662f\u8c01\u7136\u540e\u8fde\u8fb9\uff0c\u6700\u540e access \u4e00\u4e0b\u8fd9\u6761\u8def\u5f84\u628a lst \u5168\u8d4b\u503c\u4e3a r \u5c31\u884c\n\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u5176\u5b9e\u5728\u52a0\u5165\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u56fa\u5b9a\u4e86\uff0cLCT \u9700\u8981\u5e2e\u5fd9\u6bcf\u6b21\u628a lst < l \u7684\u4f4d\u7f6e\u90fd\u7ed9\u6740\u6389\n\u8bf6\u5440\u6211\u662f SB\u2026\u2026\u8fd9\u6837 lct \u7684\u5256\u5206\u5c31\u662f\u989c\u8272\u6bb5\u5256\u5206\u554a\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u3002\n\u6211\u65e5\u54e6\u600e\u4e48\u8fd8\u6709\u5355\u70b9\u6539\u70b9\u6743\u2026\u2026\u70e6\u6b7b\u4e86\n\u611f\u89c9\u8fde\u8fb9\u5220\u8fb9\u5f88\u70e6\uff0c\u5982\u679c\u4e0d\u5728\u4e00\u4e2a Splay \u91cc\u9762\u5c31\u76f4\u63a5\u65ad\u5f00\u5426\u5219\u5c31\u5f97\u5148 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 2e5 + 5;\nint n,m;\nstruct Seg\n{\n\t#define ls(p) p << 1\n\t#define rs(p) p << 1 | 1\n\tlong long sum[Len << 2];int tag[Len << 2];\n\tvoid push_up(int p){sum[p] = sum[ls(p)] + sum[rs(p)];}\n\tvoid push_down(int p,int l,int r)\n\t{\n\t\tif(tag[p])\n\t\t{\n\t\t\tint mid = (l + r) >> 1;\n\t\t\ttag[ls(p)] += tag[p] , tag[rs(p)] += tag[p];\n\t\t\tsum[ls(p)] += 1ll * (mid - l + 1) * tag[p] , sum[rs(p)] += 1ll * (r - mid) * tag[p];\n\t\t\ttag[p] = 0;\n\t\t}\n\t}\n\tvoid upd(int p,int l,int r,int nl,int nr,int w)\n\t{\n\t\tif(nl <= l && nr >= r){sum[p] += 1ll * (r - l + 1) * w;tag[p] += w;return;}\n\t\tint mid = (l + r) >> 1;\n\t\tpush_down(p , l , r);\n\t\tif(nl <= mid) upd(ls(p) , l , mid , nl , nr , w);\n\t\tif(nr > mid) upd(rs(p) , mid + 1 , r , nl , nr , w);\n\t\tpush_up(p);\n\t}\n\tlong long qry(int p,int l,int r,int nl,int nr)\n\t{\n\t\tif(nl <= l && nr >= r) return sum[p];\n\t\tpush_down(p , l , r);\n\t\tint mid = (l + r) >> 1;long long res = 0;\n\t\tif(nl <= mid) res += qry(ls(p) , l , mid , nl , nr);\n\t\tif(nr > mid) res += qry(rs(p) , mid + 1 , r , nl , nr);\n\t\treturn res;\n\t}\n\t#undef ls(p)\n\t#undef rs(p)\n}T1;\nstruct node\n{\n\tint ch[2],v,sum,lst,f,tag;\n\tnode(){ch[0] = ch[1] = v = sum = lst = f = tag = 0;}\n\tnode(int CH0,int CH1,int V,int SUM,int LST,int F,int TAG){ch[0] = CH0 , ch[1] = CH1 , v = V , sum = SUM , lst = LST , f = F , tag = TAG;}\n};\nstruct Link_Cut_Tree\n{\n\tnode t[Len << 1];\n\t#define ls t[x].ch[0]\n\t#define rs t[x].ch[1]\n\tinline void push_up(int x)\n\t{\n\t\tif(!t[rs].sum) t[x].sum = t[x].v;\n\t\telse t[x].sum = t[rs].sum;\n\t}\n\tinline void push_down(int x)\n\t{\n\t\tif(t[x].tag)\n\t\t{\n\t\t\tif(ls) t[ls].tag = t[ls].lst = t[x].tag;\n\t\t\tif(rs) t[rs].tag = t[rs].lst = t[x].tag;\n\t\t\tt[x].tag = 0;\n\t\t}\n\t}\n\tinline int idf(int x)\n\t{\n\t\tif(!t[x].f) return -1;\n\t\tif(t[t[x].f].ch[0] == x) return 0;\n\t\tif(t[t[x].f].ch[1] == x) return 1;\n\t\treturn -1;\n\t}\n\tinline void llcon(int son,int fa,int op)\n\t{\n\t\tif(op != -1) t[fa].ch[op] = son;\n\t\tt[son].f = fa;\n\t}\n\tinline void rotate(int x)\n\t{\n\t\tint y = t[x].f , z = t[y].f , opx = idf(x) , opy = idf(y) , u = t[x].ch[opx ^ 1];\n\t\tllcon(u , y , opx);\n\t\tllcon(y , x , opx ^ 1);\n\t\tllcon(x , z , opy);\n\t\tpush_up(y) , push_up(x);\n\t}\n\tvoid push_all(int x)\n\t{\n\t\tif(idf(x) != -1) push_all(t[x].f);\n\t\tpush_down(x);\n\t}\n\tinline void Splay(int x)\n\t{\n\t\tpush_all(x);\n\t\twhile(idf(x) != -1)\n\t\t{\n\t\t\tint ff = t[x].f;\n\t\t\tif(idf(ff) == -1) rotate(x);\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(idf(ff) == idf(x)) rotate(ff) , rotate(x);\n\t\t\t\telse rotate(x) , rotate(x);\n\t\t\t}\n\t\t}\n\t}\n\tinline int finddel(int x){return t[t[x].f].v;}\n\tinline void access(int x,int R)//\u5bf9\u4e4b\u524d\u7684\u6bcf\u6761\u5b9e\u94fe\u91cd\u65b0\u64cd\u4f5c \n\t{\n\t\tint lst = 0 , now = x;\n\t\twhile(x)\n\t\t{\n\t\t\tSplay(x);\n\t\t\tt[x].ch[1] = 0;\n\t\t\tpush_up(x);\n\t\t\tif(t[x].lst) \n\t\t\t{\n\t\t\t\tint dl = finddel(x);\t\n\t\t\t\tif(t[x].v) T1.upd(1 , 1 , n , t[x].lst - t[x].v + 1 , t[x].lst , -1);\n\t\t\t\tif(dl) T1.upd(1 , 1 , n , t[x].lst - dl + 1 , t[x].lst , 1);\n\t\t\t}\n\t\t\tt[x].ch[1] = lst;\n\t\t\tpush_up(x);\n\t\t\tlst = x;\n\t\t\tx = t[x].f;\n\t\t}\n\t\tx = now;\n\t\tSplay(x);\n\t\tt[x].tag = t[x].lst = R;\n\t\tif(t[x].lst) T1.upd(1 , 1 , n , t[x].lst - t[x].v + 1 , t[x].lst , 1);\n\t}\n\t#undef ls\n\t#undef rs\n}LCT;\nstruct Node\n{\n\tint ch[28];\n\tint len,fa;\n\tNode(){memset(ch , 0 , sizeof ch);len = fa = 0;}\n};\nstruct Auto\n{\n\tNode t[Len << 1];\n\tint tot;\n\tAuto(){tot = 1;}\n\tinline int Add(int c,int lst)\n\t{\n\t\tint p = lst;\n\t\tint np = lst = ++ tot;\n\t\tt[np].len = t[p].len + 1;\n\t\tfor(; p && !t[p].ch[c] ; p = t[p].fa) t[p].ch[c] = np;\n\t\tif(!p) t[np].fa = 1;\n\t\telse\n\t\t{\n\t\t\tint q = t[p].ch[c];\n\t\t\tif(t[q].len == t[p].len + 1) t[np].fa = q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint nq = ++ tot;t[nq] = t[q];\n\t\t\t\tt[nq].len = t[p].len + 1;\n\t\t\t\tt[np].fa = t[q].fa = nq;\n\t\t\t\tfor(; p && t[p].ch[c] == q ; p = t[p].fa) t[p].ch[c] = nq;\n\t\t\t}\n\t\t}\n\t\treturn np;\n\t}\n\tinline void Init(){for(int i = 2 ; i <= tot ; i ++) LCT.t[i].f = t[i].fa , LCT.t[i].v = t[i].len , LCT.push_up(i);}\n}T2;\nchar s[Len];\nint pos[Len];\nlong long Print[Len];\nstruct nnode\n{\n\tint l,id;\n\tnnode(){l = id = 0;}\n\tnnode(int L,int ID){l = L , id = ID;}\n};\nvector<nnode> v[Len];\nint main()\n{\n\tscanf(\"%s\",s + 1);\n\tn = strlen(s + 1);\n\tint lst = 1;\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\t\n\t\t\n\t\tlst = T2.Add(s[i] - 'a' , lst);\n\t\tpos[i] = lst;\n\t}\n\tT2.Init();\n\tscanf(\"%d\",&m);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint l,r;\n\t\tscanf(\"%d %d\",&l,&r);\n\t\tv[r].push_back(nnode(l , i));\n\t}\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tLCT.access(pos[i] , i);\n\t\tfor(int j = 0 ; j < v[i].size() ; j ++) Print[v[i][j].id] = T1.qry(1 , 1 , n , v[i][j].l , i);\n\t}\n\tfor(int i = 1 ; i <= m ; i ++) printf(\"%lld\\n\",Print[i]);\n\treturn 0;\t\n} \n```",
        "postTime": 1649564353,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u7761\u610f\u53cd\u590d\u88ad\u6765\u7684\u6e05\u6668\uff0c\u7cfb\u7d27\u9886\u5e26\uff0c\u8e0c\u8e87\u5730\u8d70\u8fdb\u6559\u5ba4"
    },
    {
        "content": "\u590d\u76d8 $\\color{black}{{\\rm P}}\\color{red}{{\\rm itiless0514}}$ \u7684 LCT \uff0c\u627e\u4e86\u4e00\u9053\u597d\u9898\u505a\u505a\u3002\n\n[Plus \u7248](https://www.fzoi.top/problem/4449 \"Plus \u7248\") \u8fd9\u662f [sol](https://www.cnblogs.com/Illusory-dimes/p/16010779.html \"sol\")\n\n## Description\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u6a21\u5f0f\u4e32\uff0c $m$ \u6b21\u8be2\u95ee\uff0c\u6c42\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570\u3002\n\n$n \\leq 10 ^ 5,\\ \\ m \\leq 2 \\cdot 10 ^ 5$\n\n## Analysis\n\n\u6ca1\u6709\u4fee\u6539\uff0c\u9759\u6001\u7684\uff0c\u597d\uff0c\u8fd9\u6837 SAM \u5c31\u80fd\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\n\u4f46\u662f\u6c42\u533a\u95f4\u5185\u7684\u8bdd\uff0c\u6211\u4eec\u53d1\u73b0\u8fd8\u60f3\u4e5f\u53ea\u80fd\u91cd\u6784\uff0c\u9876\u591a\u80fd\u628a\u88ab\u5305\u542b\u7684\u533a\u95f4\u6392\u9664\uff0c\u6ca1\u5565\u7528\u3002\n\n\u53ef\u80fd\u76f4\u63a5 SAM \u662f\u6709\u70b9\u6bdb\u75c5\u7684\uff0c\u6240\u4ee5\u60f3\u8003\u8651\u70b9\u5176\u4ed6\u4e1c\u897f\u3002\n\n\u6bd4\u5982\u8bf4\u6c42\u533a\u95f4\u4e0d\u540c\u989c\u8272\u6570\uff0c\u9759\u6001\u7684\uff0c\u6709\u8fd9\u4e48\u4e00\u79cd\u89e3\u6cd5\uff1a\n\n- \u9996\u5148\u79bb\u7ebf\u3002\n\n- \u7c7b\u4f3c\u4e00\u4e2a\u626b\u63cf\u7ebf\u7684\u60f3\u6cd5\uff0c\u5b9a\u597d\u53f3\u7aef\u70b9\uff0c\u4ece\u5de6\u5f80\u53f3\u626b\uff0c\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u989c\u8272 $col_r$ \u540e\uff0c\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u5b9a\u4f4d $1$ \uff0c\u53d6\u6d88\u8fd9\u4e2a\u989c\u8272\u4e0a\u4e00\u4e2a\u51fa\u73b0\u7684\u5730\u65b9\u7684\u6743\u503c\u3002\n\n- \u8fd9\u6837\u7684\u8bdd\u6709\u67e5\u8be2\u53f3\u8fb9\u754c\u662f $r$ \u5c31\u53ef\u4ee5\u627e\u533a\u95f4\u6743\u503c\u548c\uff0c\u56e0\u4e3a\u8fd9\u6837\u76f8\u540c\u989c\u8272\u53ea\u4f1a\u7b97\u4e00\u6b21\uff0c\u6240\u4ee5\u6ca1\u6709\u95ee\u9898\u3002\n\n## Solution\n\n\u90a3\u5176\u5b9e\u8fd9\u9053\u9898\u4e5f\u80fd\u6709\u7c7b\u4f3c\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u6bcf\u6b21\u65b0\u52a0\u8fdb\u6765\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u4f1a\u591a\u5f88\u591a\u79cd\u5b50\u4e32\uff0c\u548b\u529e\u634f\uff1f\uff1f\n\n\u8fd8\u662f\u56de\u5f52\u5230 SAM \u4e0a\uff0c\u52a0\u5165\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e4b\u540e\u4f1a\u6709\u4e00\u4e9b\u5b57\u4e32\u5bf9\u5e94\u7684\u72b6\u6001\u7684 $endpos$ \u4f1a\u591a\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u4e14\u8fd9\u4e00\u5b9a\u662f\u5728\u4e00\u6761\u94fe\u4e0a\uff08\u8fd8\u662f\u9876\u5230\u4e86\u6839\u7684\u90a3\u79cd\uff09\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u4e00\u4e9b\u5c0f\u6027\u8d28\uff08\u5177\u4f53\u662f\u4ec0\u4e48\u4e0d\u7ec6\u8bb2\u4e86\uff09\u3002\n\n\u7136\u540e\u53d1\u73b0\u8d8a\u60f3\u8d8a\u50cf[\u6811\u70b9\u67d3\u8272](https://www.luogu.com.cn/problem/P3703 \"\u6811\u70b9\u67d3\u8272\")\uff0c\u5e76\u4e14\u4e5f\u80fd\u8054\u60f3\u5230 LCT \u7684 $access$ \u64cd\u4f5c\u3002\n\n\u90a3\u5982\u679c\u6211\u4eec\u7528\u4e0a LCT \uff0c\u5728 $access$ \u7684\u65f6\u5019\u66f4\u65b0\u4e00\u4e0b\u65b0\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\u5c31\u884c\u4e86\u5427\u3002\n\n\u90a3\u90a3\u600e\u4e48\u66f4\u65b0\u5462\uff1f\uff1f\n\n\u65e2\u7136\u6211\u4eec\u662f\u9009\u62e9\u4e86\u6570\u636e\u7ed3\u6784\u7b97\u533a\u95f4\u548c\uff0c\u53c8\u5c01\u6b7b\u4e86\u53f3\u8fb9\u754c\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u8981\u5728\u533a\u95f4\u548c\u4e0a\u4f53\u73b0\u51fa\u6765\u521d\u59cb\u4f4d\u7f6e\uff0c\u4e8e\u662f\u5c31\u628a\u5728 $j$ \u51fa\u73b0\u7684\u5b57\u7b26\u4e32\u7684\u8d21\u732e\u6807\u8bb0\u5230 $j - len + 1$ \u4e0a\u3002\n\n\u66f4\u65b0\u7684\u8bdd\u6211\u4eec\u5c31\u8981\u53d6\u6d88\u5728\u4e0a\u6b21\u51fa\u73b0\u4f4d\u7f6e\u6807\u8bb0\u7684\u5730\u65b9\u7684\u8d21\u732e\uff0c\u7136\u540e\u8f6c\u5230\u65b0\u5730\u65b9\u518d\u6807\u8bb0\uff0c\u8fd9\u6837\u7684\u8bdd\u56e0\u4e3a\u533a\u95f4\u7684\u7279\u6b8a\u6027\u4e0d\u7ba1\u600e\u4e48\u6837\u67e5\u8be2\u90fd\u4e0d\u4f1a\u7b97\u6f0f\u3002\n\n\u56e0\u4e3a\u8fd9\u4e9b\u5982\u679c\u8981\u51fa\u73b0\u5c31\u5168\u90e8\u662f\u8fde\u7eed\u51fa\u73b0\uff0c\u6240\u4ee5\u53ef\u4ee5\u533a\u95f4\u4fee\u6539\u3002\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u628a SAM \u642c\u5230 LCT \u4e0a\u9762\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5728 $access$ \u7684\u65f6\u5019\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001\u53d6\u6d88\u4e0a\u6b21\u7684\u8d21\u732e\uff0c\u6700\u540e\u5168\u5c40\u52a0\u5c31\u884c\u4e86\u3002\n\n\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u90fd\u53ef\u4ee5\u634f\u3002\n\n## Code\n\n```cpp\n/*\n\n*/\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 4e5 + 10, M = 2e6 + 10;\nint n, pos[N]; ll ans[N];\nstruct mdzz {\n\tint l, r, id;\n\tbool operator < (const mdzz &it) const {\n\t\treturn r < it.r;\n\t}\n} a[N];\ninline int read() {\n\tchar ch = getchar();\n\tint s = 0, w = 1;\n\twhile (!isdigit(ch)) {if (ch == '-') w = -1; ch = getchar();}\n\twhile (isdigit(ch)) {s = (s << 3) + (s << 1) + (ch ^ 48); ch = getchar();}\n\treturn s * w;\n}\nstruct SAM {\n\tint n, cnt, las, len[N], link[N], ch[N][26];\n\tchar s[N]; int tong[N], rk[N];\n\tinline void init() {cnt = las = 1; memset(ch[1], 0, sizeof(ch[1]));}\n\tinline void SAM_stru(int c) {\n\t\tint cur = ++cnt, p = las;\n\t\tmemset(ch[cur], 0, sizeof(ch[cur]));\n\t\tlas = cur;\n\t\tlen[cur] = len[p] + 1;\n\t\twhile (p && !ch[p][c]) ch[p][c] = cur, p = link[p];\n\t\tif (!p) {link[cur] = 1; return ;}\n\t\tint q = ch[p][c];\n\t\tif (len[p] + 1 == len[q]) {link[cur] = q; return ;}\n\t\tint clo = ++cnt;\n\t\tlink[clo] = link[q]; len[clo] = len[p] + 1;\n\t\tlink[q] = link[cur] = clo;\n\t\tmemcpy(ch[clo], ch[q], sizeof(ch[clo]));\n\t\twhile (p && ch[p][c] == q) ch[p][c] = clo, p = link[p];\n\t}\n\tinline void Tong_sort() {\n\t\tfor (int i = 1; i <= cnt; ++i) ++tong[len[i]];\n\t\tfor (int i = 1; i <= cnt; ++i) tong[i] += tong[i - 1];\n\t\tfor (int i = 1; i <= cnt; ++i) rk[tong[len[i]]--] = i;\n\t}\n} s;\nstruct SGT {\n\tll c[M], d[M];\n\tinline int lowbit(int k) {return k & (-k);}\n\tinline void add(int x, int y) {\n\t\tfor (int p = x; x <= s.n; x += lowbit(x)) c[x] += y, d[x] += p * y;\n\t}\n\tinline ll ask(int x) {\n\t\tll tmp = 0, res = 0, p = x;\n\t\tfor (; x; x -= lowbit(x)) tmp += c[x], res += d[x];\n\t\treturn tmp * (p + 1) - res;\n\t}\n\tinline void add(int l, int r, int k) {add(l, k); add(r + 1, -k);}\n} seg;\nstruct LCT {\n\t#define ls(x) ch[x][0]\n\t#define rs(x) ch[x][1]\n\tint ch[N][2], fa[N], xr[N], cov[N], val[N], len[N], top, sta[N];\n\tinline void build() {\n\t\tval[0] = 1e9;\n\t\tfor (int i = 1; i <= s.cnt; ++i) {\n\t\t\tfa[i] = s.link[i];\n\t\t\tval[i] = len[i] = s.len[fa[i]] + 1;\n\t\t\txr[i] = cov[i] = ls(i) = rs(i) = 0;\n\t\t}\n\t}\n\tinline void pushcov(int x, int k) {xr[x] = cov[x] = k;}\n\tinline void pushup(int x) {\n\t\tval[x] = min(len[x], min(val[ls(x)], val[rs(x)]));\n\t}\n\tinline void pushdown(int x) {\n\t\tif (cov[x]) {\n\t\t\tif (ls(x)) pushcov(ls(x), cov[x]);\n\t\t\tif (rs(x)) pushcov(rs(x), cov[x]);\n\t\t\tcov[x] = 0;\n\t\t}\n\t}\n\tinline bool nroot(int x) {return ls(fa[x]) == x || rs(fa[x]) == x;}\n\tinline void rotate(int x) {\n\t\tint y = fa[x], z = fa[y], k = rs(y) == x, w = ch[x][!k];\n\t\tif (nroot(y)) ch[z][rs(z) == y] = x;\n\t\tch[x][!k] = y; ch[y][k] = w;\n\t\tif (w) fa[w] = y;\n\t\tfa[y] = x; fa[x] = z; pushup(y); pushup(x);\n\t}\n\tinline void splay(int x) {\n\t\tint y = x, z; top = 0;\n\t\tsta[++top] = y;\n\t\twhile (nroot(y)) sta[++top] = y = fa[y];\n\t\twhile (top) pushdown(sta[top--]);\n\t\twhile (nroot(x)) {\n\t\t\ty = fa[x]; z = fa[y];\n\t\t\tif (nroot(y)) rotate((ls(y) == x) ^ (ls(z) == y) ? x : y);\n\t\t\trotate(x);\n\t\t}\n\t}\n\tinline void access(int x, int k) {\n\t\tint y = 0;\n\t\twhile (x) {\n\t\t\tsplay(x);\n\t\t\tif (xr[x]) seg.add(xr[x] - s.len[x] + 1, xr[x] - val[x] + 1, -1);\n\t\t\trs(x) = y; y = x, x = fa[x];\n\t\t}\n\t\tpushcov(y, k); seg.add(1, k, 1);\n\t}\n\t#undef ls\n\t#undef rs\n} lct;\nint main() {\n\tscanf(\"%s\", s.s + 1); s.n = strlen(s.s + 1); s.init();\n\tfor (int i = 1; i <= s.n; ++i) {\n\t\ts.SAM_stru(s.s[i] - 'a'); pos[i] = s.las;\n\t}\n\ts.Tong_sort();\n\tn = read();\n\tfor (int i = 1; i <= n; ++i) {\n\t\ta[i] = (mdzz) {read(), read(), i};\n\t}\n\tsort(a + 1, a + 1 + n);\n\tlct.build();\n\tfor (int i = 1, j = 1; i <= n; ++i) {\n\t\twhile (j <= a[i].r) lct.access(pos[j], j), ++j;\n\t\tans[a[i].id] = seg.ask(a[i].r) - seg.ask(a[i].l - 1);\n\t}\n\tfor (int i = 1; i <= n; ++i) printf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1647432158,
        "uid": 206024,
        "name": "Illusory_dimes",
        "ccfLevel": 7,
        "title": "\u533a\u95f4\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570 \u9898\u89e3"
    }
]