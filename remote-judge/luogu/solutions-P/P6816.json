[
    {
        "content": "\u6b64\u9898\u9898\u9762\u7ffb\u8bd1\u6709\u8bef\uff0c\u5e94\u8fd8\u6709\u4e00\u4e2a\u9650\u5236\uff1a $s$ \u662f $S$ \u662f\u5b50\u4e32\u3002~~\u5728\u4f60\u770b\u5230\u8fd9\u9053\u9898\u4e4b\u524d\u9898\u9762\u53ef\u80fd~~\u5df2\u7ecf\u88ab\u4fee\u6539\u4e86\u3002\n\n\u8003\u8651\u600e\u6837\u7684\u5b50\u4e32 $s$ \u53ef\u4ee5\u5339\u914d\u539f\u4e32\uff0c\u6761\u4ef6\u6709\u4e09\u4e2a\uff1a\n\n1.  \u8003\u8651\u5b50\u4e32\u5728 $S$ \u4e2d\u7684\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e\uff0c\u4e24\u4e2a\u4f4d\u7f6e\u7684\u95f4\u8ddd\u4e0d\u5e94\u5927\u4e8e $|s|$\u3002\n2.  \u8bbe $s$ \u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5de6\u7aef\u70b9\u4e3a $l$\uff0c\u5219 $l$ \u5de6\u4fa7\u7684\u90e8\u5206\u518d\u52a0 $l$ \u53f3\u4fa7\u7684\u4e00\u90e8\u5206\u5e94\u662f $s$ \u7684\u4e00\u4e2a\u540e\u7f00\u3002 \n3.  \u8bbe $s$ \u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u53f3\u7aef\u70b9\u4e3a $r$\uff0c\u5219 $r$ \u53f3\u4fa7\u7684\u90e8\u5206\u518d\u52a0 $r$ \u5de6\u4fa7\u7684\u4e00\u90e8\u5206\u5e94\u662f $s$ \u7684\u4e00\u4e2a\u524d\u7f00\u3002 \n\n\u540e\u4e24\u4e2a\u6761\u4ef6\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u540e\u7eed\u7684\u5904\u7406\u65b9\u6cd5\u4e0d\u592a\u76f8\u540c\uff0c\u56e0\u6b64\u62c6\u5f00\u5199\u3002 \n\n\n---\n\n\n\n\n\u9996\u5148\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u5b50\u4e32\u7684\u51fa\u73b0\u4f4d\u7f6e\u8fd9\u4e00\u95ee\u9898\u5f15\u5bfc\u6211\u4eec\u60f3\u5230 SAM\uff0c\u518d\u52a0\u4e0a\u201c\u6700\u5927\u95f4\u8ddd\u201d\u8fd9\u4e00\u6761\u4ef6\uff0c\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u4f7f\u7528 SAM +\u7ebf\u6bb5\u6811\u5408\u5e76\u6c42\u51fa $endpos$ \u96c6\u5408\u3002\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\uff0c\u7ef4\u62a4\u51fa\u6b64\u65f6\u6240\u6709\u95f4\u8ddd\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u3002\n\n\u4f9d\u6b21\u8003\u8651\u6240\u6709\u7b49\u4ef7\u7c7b\uff0c\u518d\u8003\u8651\u6b64\u7b49\u4ef7\u7c7b\u4e2d\u6709\u591a\u5c11\u79cd\u7b26\u5408\u9898\u76ee\u6761\u4ef6\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u91cd\u4e0d\u6f0f\u5730\u6c42\u51fa\u6240\u6709\u7b54\u6848\u3002\u73b0\u5728\u6211\u4eec\u8003\u5bdf SAM \u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u5bf9\u4e8e\u6b64\u8282\u70b9\u5bf9\u5e94\u7684\u7b49\u4ef7\u7c7b\uff0c\u6211\u4eec\u5df2\u7ecf\u6c42\u51fa\u4e86\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n-   \u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e $L$ \u548c\u672b\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e $R$\u3002\n-   \u4e24\u6b21\u51fa\u73b0\u7684\u6700\u5c0f\u95f4\u8ddd $x$\u3002\n-   \u6b64\u7b49\u4ef7\u7c7b\u5bf9\u5e94\u7684\u6700\u5c0f\u957f\u5ea6 $l_{min}$ \u548c\u6700\u5927\u957f\u5ea6 $l_{max}$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5c06\u4ee5\u6837\u4f8b\u4e2d $endpos=\\{7,10\\}$ \uff08\u5373 `aabaa` \u6240\u5728\u7684\u7b49\u4ef7\u7c7b\uff09\u4e3a\u4f8b\u5206\u6790\u3002 \n\n\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\uff0c\u5219\u6709\u7ea6\u675f\uff1a\n\n-   \u6b64\u7b49\u4ef7\u7c7b\u4e2d\u5408\u6cd5\u5b50\u4e32\u7684\u957f\u5ea6\u81f3\u5c11\u4e3a $x$\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u4f1a\u731c\u60f3\uff0c\u662f\u4e0d\u662f\u5b50\u4e32\u7684\u957f\u5ea6\u8d8a\u5927\u8d8a\u597d\u5462\uff1f\u786e\u5b9e\u5982\u6b64\uff0c\u56e0\u4e3a\u8d85\u51fa\u90e8\u5206\u53ef\u4ee5\u8d85\u8fc7 $S$ \u7684\u5f00\u5934\uff0c\u4e0d\u4f1a\u4f7f\u5339\u914d\u5931\u6548\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002\u8003\u8651\u6211\u4eec\u7528\u5f53\u524d\u7684\u5b50\u4e32\u7684\u540e\u7f00\u5c3d\u53ef\u80fd\u5730\u5339\u914d\u4e00\u6bb5\u524d\u7f00\uff0c\u8bbe\u5339\u914d\u5230\u7684\u524d\u7f00\u957f\u5ea6\u4e3a $a$\uff0c\u5219\u5e94\u5f53\u6709 $a\\ge L-len$\u3002\u4f8b\u5b50\u4e2d $a=2$\uff0c$L=7$\uff0c\u82e5 $len<5$\uff0c\u5219\u4e2d\u95f4\u4f1a\u7a7a\u4e00\u6bb5\u5b50\u4e32\u65e0\u6cd5\u5339\u914d\u3002\u89c2\u5bdf\u8fd9\u4e2a $a$ \u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u5b83\u5176\u5b9e\u662f $1\\sim L$ \u8fd9\u6bb5\u524d\u7f00\u7684 border\u3002\u56e0\u6b64\uff1a\n\n-   \u6b64\u7b49\u4ef7\u7c7b\u4e2d\u5408\u6cd5\u5b50\u4e32\u7684\u957f\u5ea6\u81f3\u5c11\u4e3a $L-border_L$\u3002\n\n\u8003\u8651\u7b2c\u4e09\u4e2a\u6761\u4ef6\uff0c\u8fd9\u65f6\u5019\u662f\u4e0d\u662f\u5b50\u4e32\u7684\u957f\u5ea6\u8d8a\u5927\u8d8a\u597d\u5462\uff1f\u601d\u8003\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u4e0d\u4e00\u5b9a\uff0c\u5176\u4e0e\u524d\u7f00\u7684\u533a\u522b\u662f\u8d85\u51fa\u90e8\u5206\u4ecd\u7136\u5728 $S$ \u4e2d\uff0c\u53ef\u80fd\u4f1a\u4f7f\u5339\u914d\u5931\u6548\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5355\u72ec\u7814\u7a76\u600e\u6837\u7684\u4e32\u624d\u662f\u6ee1\u8db3\u7b2c\u4e09\u4e2a\u6761\u4ef6\u7684\u3002\n\n\u4e0d\u59a8\u5c06\u7b49\u4ef7\u7c7b\u4e2d\u7684\u67d0\u4e00\u4e2a\u5b50\u4e32\u5355\u72ec\u63d0\u51fa\u6765\uff0c\u8003\u8651\u5982\u4f55\u5224\u65ad\u5b83\u662f\u5426\u5408\u6cd5\u3002\u4f8b\u5982\u73b0\u5728\u8003\u8651 $R=10,len=5$ \u7684\u5b50\u4e32\uff0c\u5373\u5224\u65ad `aabaa` \u80fd\u5426\u5339\u914d `aba`\uff0c\u6ce8\u610f\u6b64\u65f6\u5411\u524d\u8d85\u51fa\u7684\u90e8\u5206\u4e5f\u9700\u8981\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u4eec\u62fc\u5728\u4e00\u8d77\uff0c\u53d8\u6210\u4e86 `aabaaaba`\uff0c\u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u539f\u4e32\u7684\u540e\u7f00\u3002\u8fd9\u65f6\u4e0d\u59a8\u5012\u8fc7\u6765\u601d\u8003\uff0c\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u540e\u7f00\uff0c\u5728 $R$ \u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u540e\u7f00\u624d\u662f\u5408\u6cd5\u7684\u3002\u7528\u8fd9\u4e2a\u4e32\u6765\u91cd\u65b0\u63cf\u8ff0 $R$ \u7684\u5408\u6cd5\u6761\u4ef6\uff1a\u524d\u7f00 $R$ \u5728\u622a\u53bb\u4e00\u6bb5\u540e\u7f00\u540e\uff0c\u7b49\u4e8e\u4e00\u4e2a\u540e\u7f00 $i\\le R+1$\u3002\u524d\u7f00\u622a\u53d6\u6389\u540e\u7f00\u4ee5\u540e\u8fd8\u662f\u524d\u7f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6761\u4ef6\u5c31\u53d8\u6210\u4e86\uff1a\u4e00\u4e2a\u524d\u7f00\u53ef\u4ee5\u5b8c\u5168\u5339\u914d\u4e00\u4e2a\u540e\u7f00\uff0c\u8fd9\u5c31\u662f border\uff01\u90a3\u4e48\u6211\u4eec\u731c\u60f3\uff0c\u5f53 $R\\ge n- border_i$ \uff08$border_i$ \u4ee3\u8868 $i$ \u8fd9\u4e2a\u540e\u7f00\u7684 border\uff09\u65f6\uff0c$i$ \u8fd9\u4e2a\u540e\u7f00\u662f\u5408\u6cd5\u7684\u3002\u4f46\u662f\u8fd9\u4e2a\u731c\u60f3\u6709\u4e00\u4e2a\u81ea\u7136\u7684\u53cd\u4f8b\uff1a\u82e5 $border_i$ \u5927\u4e8e\u540e\u7f00 $i$ \u957f\u5ea6\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ed3\u8bba\u662f\u6709\u95ee\u9898\u7684\u3002\u4f8b\u5982\u5bf9\u4e8e\u540e\u7f00 `aabaabaab`\uff0c$R=3$ \u5e76\u4e0d\u5408\u6cd5\u3002\u7136\u800c\uff0c\u6b64\u53cd\u4f8b\u662f\u4e0d\u53ef\u80fd\u6210\u7acb\u7684\u3002\u6ce8\u610f\u6211\u4eec\u9009\u53d6\u7684 $R$ \u662f\u7b49\u4ef7\u7c7b\u4e2d\u6700\u540e\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u5982\u679c $border_i$ \u5927\u4e8e $i$ \u957f\u5ea6\u7684\u4e00\u534a\uff0c\u90a3\u4e48\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\u5c31\u4e0d\u53ef\u80fd\u540c\u65f6\u6ee1\u8db3\uff1a\n\n1.  $R$ \u5728\u540e\u7f00 $i$ \u7684\u524d\u4e00\u534a\u3002\n2.  $i\\sim R$ \u5c5e\u4e8e\u5f53\u524d\u8003\u8651\u7684\u7b49\u4ef7\u7c7b\u3002\n\n\u5bf9\u4e8e\u524d\u4e00\u79cd\u60c5\u51b5\uff0c$i$ \u7684\u8ba1\u7b97\u4e0d\u5b58\u5728\u95ee\u9898\uff1b\u5bf9\u4e8e\u540e\u4e00\u79cd\u60c5\u51b5\uff0c$i$ \u6839\u672c\u4e0d\u4f1a\u88ab\u8ba1\u7b97\u5230\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u731c\u60f3\u662f\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u7684\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u628a\u6240\u6709\u6761\u4ef6\u6574\u5408\u5230\u4e00\u8d77\uff1a\n\n1.  \u5b50\u4e32\u7684\u957f\u5ea6\u6709\u4e09\u4e2a\u4e0b\u754c\uff1aSAM \u4e2d\u6c42\u51fa\u7684\u4e0b\u754c\uff1b$L-border_L$\uff1b\u6700\u5927\u95f4\u8ddd $x$\u3002\n2.  \u5b50\u4e32\u7684\u957f\u5ea6\u6709\u4e00\u4e2a\u4e0a\u754c\uff1aSAM \u4e2d\u6c42\u51fa\u7684\u4e0a\u754c\u3002\n3.  \u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e $i$ \u6709\u9650\u5236\uff1a$R\\ge n-border_i$\u3002\n\n---\n\n\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u7ecf\u8003\u8651\u597d\u4e86\u6240\u6709\u7684\u6761\u4ef6\u7ea6\u675f\u3002\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u8bbe\u8ba1\u4ee3\u7801\u5b9e\u73b0\u4e86\uff1a\n\n1.  SAM + \u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u9700\u8981\u6c42\u7684\u4e1c\u897f\u4e0a\u9762\u5df2\u7ecf\u5217\u51fa\u3002\n2.  \u6b63\u4e32\u53cd\u4e32\u5206\u522b KMP\u3002\u6b63\u4e32\u7528\u6765\u6c42\u6761\u4ef6 $2$ \u7684\u7ea6\u675f\uff0c\u53cd\u4e32\u7528\u6765\u6c42\u6761\u4ef6 $3$ \u7684\u7ea6\u675f\u3002\n3.  \u8003\u8651\u6bcf\u4e00\u4e2a\u7b49\u4ef7\u7c7b\u5982\u4f55\u7edf\u8ba1\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff1a\u8fd9\u76f8\u5f53\u4e8e\u662f\u6c42\u4e00\u6bb5\u533a\u95f4\u4e2d\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002\u53ef\u4ee5\u79bb\u7ebf\u6811\u72b6\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u5728\u7ebf\u4e3b\u5e2d\u6811\u3002\n\n\u5230\u6b64\uff0c\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u95ee\u9898\u7684\u7b2c\u4e00\u4e2a\u90e8\u5206\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u7b2c\u4e8c\u90e8\u5206\uff0c\u5982\u4f55\u6c42\u51fa\u6700\u77ed\u7684\u89e3\u5462\uff1f\n\n1.  \u8003\u8651\u6bcf\u4e00\u4e2a\u7b49\u4ef7\u7c7b\uff0c\u76f8\u5f53\u4e8e\u8981\u6c42\u51fa\u4e00\u6bb5\u533a\u95f4\u5185\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u89e3\u51b3\u3002\n2.  \u82e5\u4e24\u4e2a\u4e32\u957f\u5ea6\u76f8\u7b49\uff0c\u600e\u4e48\u6bd4\u8f83\u5b83\u4eec\u7684\u5b57\u5178\u5e8f\uff1f\u53ef\u4ee5\u7528 SA\uff0c\u4e5f\u53ef\u4ee5\u4e8c\u5206 + Hash \u89e3\u51b3\u3002\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\u76ee\u3002\n\n---\n\n\n\u603b\u7ed3\u4e00\u4e0b\u8fd9\u9053\u9898\u3002\u9996\u5148\u8003\u8651\u5230\u7528\u76f4\u89c2\u7684\u8bed\u8a00\u63cf\u8ff0\u9898\u76ee\u7684\u6761\u4ef6\uff0c\u7136\u540e\u5c1d\u8bd5\u5c06\u5176\u6539\u5199\u6210\u5bb9\u6613\u7ea6\u675f\u7684\u5f62\u5f0f\uff0c\u6700\u540e\u518d\u6839\u636e\u6761\u4ef6\u4e66\u5199\u4ee3\u7801\u3002\u5176\u4e2d\u7684\u601d\u8003\u8fc7\u7a0b\u5e76\u975e\u72ec\u7acb\uff0c\u5927\u591a\u90fd\u90fd\u662f\u5bf9\u9898\u76ee\u6027\u8d28\u7684\u7efc\u5408\u601d\u8003\u3002\u4f8b\u5982\u7b2c\u4e09\u4e2a\u6761\u4ef6\u6211\u4eec\u8f6c\u5316\u540e\u7684\u7ea6\u675f\u7684\u6b63\u786e\u6027\u4e0d\u4ec5\u6765\u81ea border \u7684\u6027\u8d28\uff0c\u8fd8\u6765\u6e90\u4e8e\u6211\u4eec\u5148\u524d\u7684 SAM \u7684\u6027\u8d28\u3002\u8fd9\u79cd\u7efc\u5408\u5730\u89c2\u5bdf\u6027\u8d28\uff0c\u53d1\u73b0\u56f0\u96be\u7684\u95ee\u9898\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u800c\u975e\u7b80\u5355\u5730\u5957\u6a21\u677f\u7684\u601d\u8003\u8fc7\u7a0b\u662f\u5f88\u6709\u4ef7\u503c\u7684\u3002",
        "postTime": 1641609532,
        "uid": 79067,
        "name": "dottle",
        "ccfLevel": 10,
        "title": "6816"
    },
    {
        "content": "\u6a21\u62df\u8d5b\u8d5b\u65f6\u72ec\u7acb\u505a\u51fa\u6765\u5f88\u4e0d\u5bb9\u6613\uff0c\u800c\u4e14\u662f\u8d5b\u65f6\u76f4\u63a5\u5199\u5bf9\u4e86\uff0c\u4f46\u662f\u56e0\u4e3a\u6700\u540e\u4e00\u6b65\u72af\u50bb T \u4e86\uff0c\u5f88\u53ef\u60dc\u3002\n\n\u6765\u8bb2\u4e00\u4e0b\u6b63\u89e3\uff0c\u987a\u4fbf\u548c\u591a\u54e5\u540c\u9875\u5408\u5f71\u3002\n\n\u56e0\u4e3a\u8981\u679a\u4e3e\u5b50\u4e32\uff0c\u6240\u4ee5\u5148\u628a\u539f\u4e32\u653e\u5230 SAM \u4e0a\u5904\u7406\u3002\n\n\u5148\u4e0d\u8003\u8651\u5de6\u53f3\u51f8\u51fa\u6765\u7684\u90e8\u5206\uff0c\u53ea\u8003\u8651\u4e2d\u95f4\u4e00\u76f4\u53e0\u7684\u90e8\u5206\uff0c\u90a3\u4e48\u8003\u8651\u6bcf\u4e2a\u4e32\u7684 endpos \u96c6\u5408\u3002\u628a endpos \u7684\u4f4d\u7f6e\u8bb0\u4e3a $p_{[1,m]}$\uff0c\u90a3\u4e48\u5bf9\u4e8e $1\\le i<m$\uff0c$p_{i+1}-p_i\\le len$\u3002\n\n\u7136\u540e endpos \u96c6\u5408\u662f\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u7684\uff0c\u8fd9\u4e2a\u662f SAM \u7ecf\u5178\u7528\u6cd5\u3002\n\n\u73b0\u5728\u76f8\u5f53\u4e8e\u8981\u7ef4\u62a4 $\\max_{1\\le i<m}\\{p_{i+1}-p_i\\}$\uff0c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u662f\u597d\u505a\u7684\uff0c\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u5b83\u7684\u6700\u5927\u503c\uff0c\u4ee5\u53ca\u6700\u5c0f\u548c\u6700\u5927\u7684 $p_i$ \u5373\u53ef\u3002\u56e0\u4e3a\u53ea\u6d89\u53ca\u5355\u70b9\u4fee\u6539\uff0c\u6240\u4ee5\u53ea\u7528\u8003\u8651 update\uff0c\u6240\u4ee5\u5f88\u7b80\u5355\u3002\n\n\u8003\u8651\u4e24\u8fb9\u51f8\u51fa\u6765\u7684\u90e8\u5206\u3002\u524d\u7f00\u76f8\u5f53\u4e8e\u8981\u6c42\u4e00\u4e2a\u7c7b\u4f3c border \u7684\u4e1c\u897f\uff0c\u5927\u6982\u5c31\u662f\u6700\u957f\u7684\u957f\u5ea6\u6ee1\u8db3\u5b50\u4e32\u7684\u540e\u7f00\u4e0e\u539f\u4e32\u7684\u524d\u7f00\u5339\u914d\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5b50\u4e32\u7684\u540e\u7f00\u4e00\u5b9a\u662f\u8fd9\u4e2a\u5b50\u4e32\u5728 SAM \u4e0a\u7ed3\u70b9\u7684\u67d0\u4e2a\u7956\u5148\u3002\u8fdb\u4e00\u6b65\u5730\uff0c\u5c31\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u6ee1\u8db3\u662f\u539f\u4e32\u524d\u7f00\u7684\u7956\u5148\u3002\n\n\u8fd9\u6837\u524d\u7f00\u7684 border \u5c31\u597d\u505a\u4e86\u3002\u6211\u4eec\u5047\u8bbe\u4e0d\u7ba1\u540e\u7f00\uff0c\u90a3\u4e48\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u6839\u636e\u7ed3\u70b9\u4ee3\u8868\u7684\u7b49\u4ef7\u7c7b\u4ee5\u53ca border \u7684\u9650\u5236\u6c42\u51fa\u5408\u6cd5\u7684\u4e32\u7684\u4e24\u4e2a\u7aef\u70b9\u7684\u4e24\u4e2a\u533a\u95f4\u3002\n\n\u540e\u7f00\u600e\u4e48\u505a\uff1f\u6211\u4eec\u628a\u539f\u4e32\u53cd\u8fc7\u6765\u518d\u8dd1\u4e00\u6b21\u5c31\u597d\u4e86\u3002\n\n\u600e\u4e48\u628a\u524d\u540e\u7f00\u7ed3\u5408\u8d77\u6765\uff1f\n\n\u5148\u955c\u50cf\u4e00\u4e0b\uff0c\u5f04\u51fa\u540e\u7f00\u5728\u539f\u4e32\u4e2d\u5bf9\u5e94\u7684\u533a\u95f4\u3002\n\n\u90a3\u4e48\u53ea\u8981\u4e00\u4e2a\u4e32\u540c\u65f6\u524d\u7f00\u548c\u540e\u7f00\u540c\u65f6\u6ee1\u8db3\u6761\u4ef6\uff0c\u8fd9\u4e2a\u4e32\u5c31\u662f\u5408\u6cd5\u7684\u3002\n\n\u73b0\u5728\u7684\u5b50\u95ee\u9898\u8f6c\u5316\u4e3a\u6709\u5f88\u591a\u5bf9\u533a\u95f4\u52a0\uff0c$[[l_1,r_1],[l_2,r_2]]$ \u6ee1\u8db3 $l_1\\le r_1\\le l_2\\le r_2$\uff0c\u6c42\u6709\u591a\u5c11\u5bf9 $[l,r]$ \u7684\u503c\u4e3a 2\u3002\n\n\u8fd9\u4e2a\u770b\u4f3c\u8981\u591a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u4e2a\u5dee\u5206\uff0c\u4ee5 $[l_1,r_1]$ \u4e3a\u4e0b\u6807\uff0c\u5b58\u4e00\u4e2a vector \u8868\u793a\u5f80\u540e\u8981\u52a0\u5165/\u5220\u9664\u8fd9\u4e2a $[l_2,r_2]$ \u5373\u53ef\u3002\n\n\u6700\u540e\u5c31\u662f\u4ece\u524d\u5f80\u540e\u626b\u4e00\u904d\u4e86\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5bf9 $[l_2,r_2]$ \u7684\u533a\u95f4\u52a0\uff0c\u5168\u5c40\u6c42\u6700\u5927\u503c\uff0c\u5168\u5c40\u6c42\u6700\u5927\u503c\u4e2a\u6570\u3002\n\n\u6c42\u5408\u6cd5\u5b50\u4e32\u4e2a\u6570\u8fce\u5203\u800c\u89e3\u4e86\u3002\u538b\u529b\u6765\u5230\u6c42\u6700\u5c0f\u5b57\u5178\u5e8f\u8fd9\u8fb9\u3002\n\n\u8fd9\u4e2a\u5176\u5b9e\u5f88\u7b80\u5355\u4e86\uff0c\u8003\u8651\u626b\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5de6\u7aef\u70b9\uff0c\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u4e00\u4e2a\u6700\u5c0f\u7684\u53f3\u7aef\u70b9\u6ee1\u8db3\u503c\u4e3a 2\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5de6\u7aef\u70b9\u7684\u6700\u4f18\u4e32\u5c31\u51fa\u6765\u4e86\u3002\n\n\u6bd4\u5927\u5c0f\u8003\u8651\u4e8c\u5206\u52a0\u54c8\u5e0c\uff0c\u4e8c\u5206\u7b2c\u4e00\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u5373\u53ef\u3002\n\n\u603b\u7684\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n\u653e\u4e2a\u5f88\u4e11\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4f60\u4f1a\u53d1\u73b0\u6211\u7528\u7ebf\u6bb5\u6811\u7684\u51fd\u6570\u540d\u548c\u53c2\u6570\u540d\u5199\u4e86\u4e2a\u5dee\u5206\uff1f\u56e0\u4e3a\u6211\u4e00\u5f00\u59cb\u4e5f\u76f4\u63a5\u83bd\u7ebf\u6bb5\u6811\u4e86\u3002\u4ee5\u53ca\u6709\u4e00\u4e2a\u548c\u641c\u7d22\u4e0d\u6cbe\u8fb9\u7684\u540d\u4e3a Dfs \u7684\u51fd\u6570\uff0c\u4e5f\u662f\u6211\u4e00\u5f00\u59cb\u6253\u7b97\u904d\u5386\u7ebf\u6bb5\u6811\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\ntypedef pair<int,int> pr;\nconst int N=2e5+5;\nconst int Z=26;\nconst int Mod=1e9+7;\nint ch[N<<1][Z],las=1,tot=1,len[N<<1],fa[N<<1],pos[N<<1];\nchar s[N];\nint n;\ninline void Insert(int k){\n\tint c=s[k]-'a';\n\tint u=las;\n\tint x=las=++tot;\n\tpos[x]=k;\n\tlen[x]=len[u]+1;\n\twhile(u&&!ch[u][c]){\n\t\tch[u][c]=x;\n\t\tu=fa[u];\n\t}\n\tif(!u) fa[x]=1;\n\telse{\n\t\tint v=ch[u][c];\n\t\tif(len[v]==len[u]+1) fa[x]=v;\n\t\telse{\n\t\t\tint y=++tot;\n\t\t\tfa[y]=fa[v];\n\t\t\tfor(int i=0;i<Z;i++)\n\t\t\t\tch[y][i]=ch[v][i];\n\t\t\tfa[v]=fa[x]=y;\n\t\t\tlen[y]=len[u]+1;\n\t\t\twhile(u&&ch[u][c]==v){\n\t\t\t\tch[u][c]=y;\n\t\t\t\tu=fa[u];\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\ninline int Max(int x,int y){\n\treturn x>y?x:y;\n}\ninline int Min(int x,int y){\n\treturn x<y?x:y;\n}\ninline void Cmax(int&x,int y){\n\tif(y>x) x=y;\n\treturn ;\n}\ninline void Cmin(int&x,int y){\n\tif(y<x) x=y;\n\treturn ;\n}\nint tol[N*50],tor[N*50],mx[N*50],lc[N*50],rc[N*50],tott,root[N<<1];\ninline void Update(int u){\n\tif(lc[u]) tol[u]=tol[lc[u]];\n\telse tol[u]=tol[rc[u]];\n\tif(rc[u]) tor[u]=tor[rc[u]];\n\telse tor[u]=tor[lc[u]];\n\tmx[u]=Max(Max(mx[lc[u]],mx[rc[u]]),tol[rc[u]]-tor[lc[u]]);\n\treturn ;\n}\ninline void Change(int&u,int ll,int rr,int p){\n\tif(!u) u=++tott;\n\tif(ll==rr){\n\t\ttol[u]=tor[u]=ll;\n\t\tmx[u]=0;\n\t\treturn ;\n\t}\n\tint mid=ll+rr>>1;\n\tif(mid>=p) Change(lc[u],ll,mid,p);\n\telse Change(rc[u],mid+1,rr,p);\n\treturn Update(u);\n}\ninline int Merge(int u,int v,int ll,int rr){\n\tif(!u||!v) return u+v;\n\tint now=++tott;\n\tif(ll==rr){\n\t\ttol[now]=tor[now]=ll;\n\t\tmx[now]=0;\n\t\treturn now;\n\t}\n\tint mid=ll+rr>>1;\n\tlc[now]=Merge(lc[u],lc[v],ll,mid);\n\trc[now]=Merge(rc[u],rc[v],mid+1,rr);\n\tUpdate(now);\n\treturn now;\n}\nint Head[N<<1],Nxt[N<<1],ver[N<<1],cnt_edge=-1;\ninline void Add(int u,int v){\n\t++cnt_edge;\n\tver[cnt_edge]=v;\n\tNxt[cnt_edge]=Head[u];\n\tHead[u]=cnt_edge;\n\treturn ;\n}\ninline void Add_Edge(int u,int v){\n\tAdd(u,v);\n\t//Add(v,u);\n\treturn ;\n}\ninline void Clear(){\n\tmemset(ch,0,sizeof(ch));\n\tmemset(fa,0,sizeof(fa));\n\tmemset(len,0,sizeof(len));\n\tmemset(pos,0,sizeof(pos));\n\tmemset(Head,-1,sizeof(Head));\n\ttott=0;\n\ttot=las=1;\n\tcnt_edge=-1;\n\treturn ;\n}\nstruct SGT{\n\tvector<pr>add[N],sub[N];\n\tinline void Insert(int u,int ll,int rr,int l1,int r1,int l2,int r2){\n\t\tadd[l1].push_back(make_pair(l2,r2));\n\t\tsub[r1+1].push_back(make_pair(l2,r2));\n\t\treturn ;\n\t}\n}pre,suf;\ninline void DfsPre(int u,int las){\n\tif(pos[u]) Change(root[u],1,n,pos[u]);\n\tfor(int i=Head[u];i!=-1;i=Nxt[i]){\n\t\tint v=ver[i];\n\t\tif(pos[u]) DfsPre(v,pos[u]);\n\t\telse DfsPre(v,las);\n\t\troot[u]=Merge(root[u],root[v],1,n);\n\t}\n\tint rt=root[u];\n\tint nd=mx[rt];\n\tint mnlen=Max(len[fa[u]]+1,nd);\n\tint mnr=tol[rt];\n\tint mxlen=len[u];\n\tif(pos[u]){\n\t\tmxlen--;\n\t\tif(len[u]>=mnlen&&2*len[u]>=mnr) pre.Insert(1,1,n,1,1,len[u],len[u]);\n\t}\n\tif(las){\n\t\tint border=las;\n\t\tCmax(mnlen,mnr-border);\n\t\tif(mnlen<=mxlen) pre.Insert(1,1,n,mnr-mxlen+1,mnr-mnlen+1,mnr,mnr);\n\t}\n\treturn ;\n}\ninline void DfsSuf(int u,int las){\n\tif(pos[u]) tol[u]=tor[u]=pos[u];\n\telse tol[u]=n+1,tor[u]=0;\n\tfor(int i=Head[u];i!=-1;i=Nxt[i]){\n\t\tint v=ver[i];\n\t\tif(pos[u]) DfsSuf(v,pos[u]);\n\t\telse DfsSuf(v,las);\n\t\tCmin(tol[u],tol[v]);\n\t\tCmax(tor[u],tor[v]);\n\t}\n\tint mnlen=len[fa[u]]+1;\n\tint mnr=tol[u];\n\tint mxlen=len[u];\n\tint l=n-tor[u]+1;\n\tif(pos[u]){\n\t\tmxlen--;\n\t\tif(len[u]>=mnlen&&2*len[u]>=mnr) suf.Insert(1,1,n,l,l,l+len[u]-1,l+len[u]-1);\n\t}\n\tif(las){\n\t\tint border=las;\n\t\tCmax(mnlen,mnr-border);\n\t\tif(mnlen<=mxlen) suf.Insert(1,1,n,l,l,l+mnlen-1,l+mxlen-1);\n\t}\n\treturn ;\n}\ninline void Init(){\n\tscanf(\"%s\",s+1);\n\tn=strlen(s+1);\n\treturn ;\n}\nstruct SGT1{\n\tint mxx[N<<2],mxcnt[N<<2],tag[N<<2];\n\tinline void Addcnt(int u,int value){\n\t\tmxx[u]+=value;\n\t\ttag[u]+=value;\n\t\treturn ;\n\t}\n\tinline void PushDown(int u){\n\t\tif(tag[u]==0) return ;\n\t\tAddcnt(u<<1,tag[u]);\n\t\tAddcnt(u<<1|1,tag[u]);\n\t\ttag[u]=0;\n\t\treturn ;\n\t}\n\tinline void Update(int u){\n\t\tmxx[u]=Max(mxx[u<<1],mxx[u<<1|1]);\n\t\tmxcnt[u]=0;\n\t\tif(mxx[u<<1]==mxx[u]) mxcnt[u]+=mxcnt[u<<1];\n\t\tif(mxx[u<<1|1]==mxx[u]) mxcnt[u]+=mxcnt[u<<1|1];\n\t\treturn ;\n\t}\n\tinline void Build(int u,int ll,int rr){\n\t\tif(ll==rr){\n\t\t\tmxcnt[u]=1;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=ll+rr>>1;\n\t\tBuild(u<<1,ll,mid);\n\t\tBuild(u<<1|1,mid+1,rr);\n\t\treturn Update(u);\n\t}\n\tinline void Modify(int u,int ll,int rr,int ql,int qr,int value){\n\t\tif(ll>=ql&&rr<=qr) return Addcnt(u,value);\n\t\tPushDown(u);\n\t\tint mid=ll+rr>>1;\n\t\tif(mid>=ql) Modify(u<<1,ll,mid,ql,qr,value);\n\t\tif(mid<qr) Modify(u<<1|1,mid+1,rr,ql,qr,value);\n\t\treturn Update(u);\n\t}\n\tinline int Find(int u,int ll,int rr){\n\t\tif(ll==rr) return ll;\n\t\tPushDown(u);\n\t\tint mid=ll+rr>>1;\n\t\tif(mxx[u<<1]==2) return Find(u<<1,ll,mid);\n\t\treturn Find(u<<1|1,mid+1,rr);\n\t}\n}sgt;\nLL ans;\nint ansfr,anslen;\ninline void AddEnd(int u,int value){\n\tfor(int i=0;i<pre.add[u].size();i++){\n\t\tint fr=pre.add[u][i].first;\n\t\tint se=pre.add[u][i].second;\n\t\tsgt.Modify(1,1,n,fr,se,1);\n\t}\n\tfor(int i=0;i<suf.add[u].size();i++){\n\t\tint fr=suf.add[u][i].first;\n\t\tint se=suf.add[u][i].second;\n\t\tsgt.Modify(1,1,n,fr,se,1);\n\t}\n\tfor(int i=0;i<pre.sub[u].size();i++){\n\t\tint fr=pre.sub[u][i].first;\n\t\tint se=pre.sub[u][i].second;\n\t\tsgt.Modify(1,1,n,fr,se,-1);\n\t}\n\tfor(int i=0;i<suf.sub[u].size();i++){\n\t\tint fr=suf.sub[u][i].first;\n\t\tint se=suf.sub[u][i].second;\n\t\tsgt.Modify(1,1,n,fr,se,-1);\n\t}\n\treturn; \n}\ninline int addv(int x,int y){\n\tint s=x+y;\n\tif(s>=Mod) s-=Mod;\n\treturn s;\n}\ninline int subv(int x,int y){\n\tint s=x-y;\n\tif(s<0) s+=Mod;\n\treturn s;\n}\ninline void add(int&x,int y){\n\tx=addv(x,y);\n\treturn ;\n}\ninline void sub(int&x,int y){\n\tx=subv(x,y);\n\treturn ;\n}\nint hsh[N],pw[N];\ninline int Get(int ll,int rr){\n\treturn subv(hsh[rr],1ll*hsh[ll-1]*pw[rr-ll+1]%Mod);\n}\ninline void Dfs(int u,int ll,int rr){\n\tfor(int i=1;i<=n;i++){\n\t\tAddEnd(i,114514);\n\t\tif(sgt.mxx[1]!=2) continue ;\n\t\tans+=sgt.mxcnt[1];\n\t\tint mnr=sgt.Find(1,1,n);\n\t\tint len=mnr-i+1;\n\t\tif(len<anslen){\n\t\t\tanslen=len;\n\t\t\tansfr=i;\n\t\t}\n\t\telse if(len==anslen){\n\t\t\tint l=1,r=len;\n\t\t\twhile(l<r){\n\t\t\t\tint mid=l+r>>1;\n\t\t\t\tif(Get(ansfr,ansfr+mid-1)==Get(i,i+mid-1)) l=mid+1;\n\t\t\t\telse r=mid;\n\t\t\t}\n\t\t\tif(s[ansfr+l-1]>s[i+l-1]) ansfr=i;\n\t\t}\n\t}\n\treturn ;\n}\ninline void Solve(){\n\tmemset(Head,-1,sizeof(Head));\n\tmemset(tor,0x3f,sizeof(tor));\n\tfor(int i=1;i<=n;i++)\n\t\tInsert(i);\n\tfor(int i=2;i<=tot;i++)\n\t\tAdd_Edge(fa[i],i);\n\tDfsPre(1,0);\n\treverse(s+1,s+n+1);\n\tClear();\n\tfor(int i=1;i<=n;i++)\n\t\tInsert(i);\n\tfor(int i=2;i<=tot;i++)\n\t\tAdd_Edge(fa[i],i);\n\tDfsSuf(1,0);\n\treverse(s+1,s+n+1);\n\tpw[0]=1;\n\tfor(int i=1;i<=n;i++){\n\t\tpw[i]=26ll*pw[i-1]%Mod;\n\t\thsh[i]=addv(26ll*hsh[i-1]%Mod,s[i]-'a');\n\t}\n\tsgt.Build(1,1,n);\n\tanslen=n+1;\n\tDfs(1,1,n);\n\tprintf(\"%lld\\n\",ans);\n\tfor(int i=1;i<=anslen;i++)\n\t\tputchar(s[ansfr+i-1]);\n\tputchar('\\n');\n\treturn ;\n}\nint main(){\n\tInit();\n\tSolve();\n\treturn 0;\n}\n```",
        "postTime": 1664778956,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "P6816"
    }
]