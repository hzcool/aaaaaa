[
    {
        "content": "\u4ecb\u7ecd\u4e00\u4e0b\u95ed\u5408\u56fe\u7684\u6982\u5ff5\uff0c\u95ed\u5408\u56fe\u662f\u5efa\u7acb\u5728\u6709\u5411\u56fe\u4e0a\u7684\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408\u5185\u6bcf\u4e2a\u70b9\uff0c\u5b83\u80fd\u8fbe\u5230\u7684\u6240\u6709\u70b9\u90fd\u5728\u8fd9\u4e2a\u96c6\u5408\u91cc\u9762\u3002\n\n\u5bf9\u4e8e\u6837\u4f8b\uff1a\n```\n\u8f93\u5165\n2 3\n10 1 2 0\n25 2 3 0\n5 6 7\n\n\u8f93\u51fa\n17\n```\n\u6211\u4eec\u6784\u6210\u7684\u56fe\u4e3a\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/59707.png)\n\n\u5bf9\u4e8e\u6700\u5927\u6743\u503c\u95ed\u5408\u56fe\uff0c\u6211\u4eec\u9700\u8981\u7528**\u6700\u5c0f\u5272**\u6765\u505a\u3002\n\n\u6211\u4eec\u91cd\u65b0\u6784\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/59708.png)\n\n**\u524d\u7f6e\u7ed3\u8bba**\uff1a\u6700\u5927\u6743\u503c=\u95ed\u5408\u56fe\u7684\u6b63\u6743\u503c\u4e4b\u548c-\u6700\u5c0f\u5272\n\n**\u7406\u89e3\u8fb9\u7684\u542b\u4e49**\uff1a\n\n\u6211\u4eec\u505a\u7684\u6700\u5c0f\u5272\u4e00\u5b9a\u4e0d\u4f1a\u5207\u5230\u65e0\u7a77\u5927\u7684\u8fb9\uff0c\u6240\u4ee5\u5272\u91cc\u7684\u8fb9\u90fd\u662f$S->u$\u6216\u8005$u->T$\u3002\n\n**\u5bf9\u4e8e\u5272\u6389\u4e00\u4e2a$S->u$\u7684\u8fb9\u542b\u4e49\u4e3a\u5728\u95ed\u5408\u56fe\u4e2d\u4e0d\u9009\u62e9$u$\u8fd9\u4e2a\u70b9,\u5bf9\u4e8e\u5272\u6389\u4e00\u4e2a$u->T$\u7684\u8fb9\u542b\u4e49\u4e3a\u5728\u95ed\u5408\u56fe\u4e2d\u9009\u62e9$u$\u8fd9\u4e2a\u70b9\u3002**\n\n(\u6ce8\u610f\uff1a\u8fd9\u91cc\u8fb9\u7684\u542b\u4e49\u5f88\u96be\u53bb\u60f3\u5b83\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u5148\u770b\u4e0b\u53bb\uff0c\u4e4b\u540e\u4f1a\u660e\u767d\u7684)\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u4eec\u5728\u7f51\u7edc\u6d41\u90a3\u5f20\u56fe\u91cc\u5272\u53bb\u6743\u503c\u4e3a10,5,7\u8fd9\u4e9b\u8fb9\uff0c\u542b\u4e49\u4e3a\u4e0d\u9009\u62e9\u8981\u6c421\uff0c\u9009\u62e91,3\u8fd9\u4e9b\u70b9\uff0c\u4e5f\u5c31\u662f\u4e00\u5171\u9009\u62e9\u8981\u6c422,1,3\u8fd9\u4e09\u4e2a\u70b9\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u95ed\u5408\u56fe\uff0c\u56e0\u4e3a2\u8fd9\u4e2a\u70b9\u6ca1\u9009\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\u7f51\u7edc\u6d41\u91cc\u6709\u975e0\u6d41\u7684\uff0c\u4e0d\u662f\u5272\uff0c**\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u9009\u62e9\u7684\u4e0d\u662f\u7f51\u7edc\u6d41\u7684\u5272\uff0c\u90a3\u4e48\u9009\u5230\u7684\u70b9\u96c6\u5fc5\u5b9a\u4e0d\u662f\u95ed\u5408\u56fe**\u3002\n\n\u8bc1\u660e\uff1a\u5982\u679c$S$\u4e0e$T$\u8fde\u901a\uff0c\u5219\u5b58\u5728\u70b9$u$,$v$\uff0c\u4f7f\u5f97$S$\u5230$u$\u6709\u8fb9\uff0c$u$\u5230$v$\u8fde\u901a\uff0c$v$\u5230$T$\u6709\u8fb9\uff0c\u6240\u4ee5$v$\u4e00\u5b9a\u662f$u$\u7684\u540e\u7ee7\uff0c\u4f46\u9009\u62e9\u4e86$u$\uff0c\u6ca1\u6709\u9009\u62e9$v$\uff0c\u4e0d\u662f\u95ed\u5408\u5b50\u56fe\u3002\n\n**\u5f97\u51fa\u7ed3\u8bba\uff1a\u53ea\u6709$S$\u4e0e$T$\u4e0d\u8fde\u901a\u65f6\uff0c\u624d\u80fd\u5f97\u5230\u95ed\u5408\u5b50\u56fe\u3002**\n\n\n\u4e8e\u662f\u6211\u4eec\u8981\u6c42\u51fa\u7684\u662f\u5272\uff0c\u81f3\u4e8e\u8981\u5c06\u7b54\u6848\u6700\u5927\u5316\uff1a\n\n\u6700\u5c0f\u5272=\u4e0d\u9009\u7684$S$\u5230$u$\u7684\u8fb9\u6743\u548c+\u9009\u62e9\u7684$u$\u5230$S$\u7684\u8fb9\u6743\u548c\n\n\u95ed\u5408\u56fe\u6700\u5927\u6743\u503c=\u5168\u90e8\u6b63\u6743\u70b9\u4e4b\u548c-\u4e0d\u9009\u7684\u6b63\u6743\u70b9\u4e4b\u548c+\u9009\u62e9\u7684\u8d1f\u6743\u70b9\u4e4b\u548c\n\n\u52a0\u4e0a\u9009\u62e9\u7684\u8d1f\u6743\u70b9\u4e4b\u548c\u5c31\u76f8\u5f53\u4e8e\u51cf\u53bb\u9009\u62e9\u7684\u8d1f\u6743\u70b9\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u7684$u$\u5230$S$\u7684\u8fb9\u6743\u548c\n\n\u6240\u4ee5:\n\n**\u95ed\u5408\u56fe\u6700\u5927\u6743\u503c=\u5168\u90e8\u6b63\u6743\u70b9\u4e4b\u548c-\u4e0d\u9009\u7684$S$\u5230$u$\u7684\u8fb9\u6743\u548c-\u9009\u62e9\u7684$u$\u5230$S$\u7684\u8fb9\u6743\u548c**\n\n\u4e5f\u5c31\u662f\uff1a\n\n**\u95ed\u5408\u56fe\u6700\u5927\u6743\u503c=\u5168\u90e8\u6b63\u6743\u70b9\u4e4b\u548c-\u6700\u5c0f\u5272**\n\n\u5e94\u8be5\u53ef\u4ee5\u7406\u89e3\u8fb9\u7684\u542b\u4e49\u4e86\u5427\n\n[\u90e8\u5206\u53c2\u8003\u535a\u5ba2](https://blog.csdn.net/can919/article/details/77603353)\n\n**\u4ee3\u7801**\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint res=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){res=(res<<3)+(res<<1)+ch-'0';ch=getchar();}\t\n\treturn res*f;\n}\nconst int N=255;\nconst int M=40555;\nconst int inf=1e7;\nint S,T,n,m,fir[N],cur[N],dep[N],nxt[M],go[M],val[M],cnt=1,maxflow,ans;\nqueue<int> Q;\ninline void Add(int u,int v,int w){\n\tnxt[++cnt]=fir[u];\n\tfir[u]=cnt;\n\tgo[cnt]=v;\n\tval[cnt]=w;\n}\ninline bool bfs(){\n\tfor(int i=S;i<=T;i++) dep[i]=-1;\n\tdep[S]=0;\n\tQ.push(S);\n\twhile(!Q.empty()){\n\t\tint u=Q.front();Q.pop();\n\t\tfor(int e=fir[u];e;e=nxt[e]){\n\t\t\tint v=go[e];\t\n\t\t\tif(dep[v]==-1&&val[e]>0){\n\t\t\t\tdep[v]=dep[u]+1;\t\n\t\t\t\tQ.push(v);\n\t\t\t}\t\t\t\n\t\t}\t\t\n\t}\n\tif(dep[T]==-1) return 0;\n\telse return 1;\n}\nint dfs(int u,int flow){\n\tif(u==T) return flow;\n\tfor(int &e=cur[u];e;e=nxt[e]){\n\t\tint v=go[e];\t\n\t\tif(dep[v]==dep[u]+1&&val[e]>0){\n\t\t\tint f=dfs(v,min(flow,val[e]));\n\t\t\tif(f>0){\n\t\t\t\tval[e]-=f;val[e^1]+=f;\t\n\t\t\t\treturn f;\n\t\t\t}\t\t\t\n\t\t}\t\n\t}\n\treturn 0;\n}\nvoid Dinic(){\n\twhile(bfs()){\n\t\tfor(int i=S;i<=T;i++) cur[i]=fir[i];\t\t\n\t\twhile(int d=dfs(S,inf)){\n\t\t\tmaxflow+=d;\n\t\t}\n\t}\n}\nint main(){\n\tm=read();n=read();\n\tS=0;T=m+n+1;\n\tfor(int i=1;i<=m;i++){\n\t\tint w=read();\t\n\t\tans+=w;\n\t\tAdd(S,i,w);Add(i,S,0);\n\t\tint x=read();\n\t\twhile(x){\n\t\t\tAdd(i,m+x,inf);Add(m+x,i,0);\n\t\t\tx=read();\n\t\t}\n\t}\t\n\tfor(int i=1;i<=n;i++){\n\t\tint w=read();\n\t\tAdd(m+i,T,w);Add(T,m+i,0);\n\t}\n\tDinic();\n\tprintf(\"%d\",ans-maxflow);\n\treturn 0;\n}\n```\n",
        "postTime": 1559099523,
        "uid": 20504,
        "name": "Rachel_in",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3410 \u3010\u62cd\u7167\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u5c31\u662f\u6c42\u4e00\u4e2a**\u6700\u5927\u6743\u95ed\u5408\u56fe**\n\n\u90a3\u4e48\u6700\u5927\u6743\u95ed\u5408\u56fe\u662f\u4ec0\u4e48\u9b3c\uff1f\u6211\u5c1d\u8bd5\u7740\u8bb2\u7b80\u5355\u4e00\u70b9\u2026\u2026\n\n\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u4e00\u4e9b\u70b9\u6784\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u4e14\u96c6\u5408\u4e2d\u7684\u51fa\u8fb9\u6307\u5411\u7684\u7ec8\u70b9\u4e5f\u5728\u8fd9\u4e2a\u96c6\u5408\u4e2d\uff0c\u5219\u6211\u4eec\u79f0\u8fd9\u4e2a\u96c6\u5408\u4e3a\u95ed\u5408\u56fe\u3002\n\n\u6574\u4e2a\u56fe\u4e2d\u70b9\u7684\u6743\u503c\u4e4b\u548c\u6700\u5927\u7684\u95ed\u5408\u56fe\uff0c\u4e3a\u6700\u5927\u6743\u95ed\u5408\u56fe\u3002\n\n\u6700\u5927\u6743\u95ed\u5408\u56fe\u53ef\u4ee5\u7528**\u7f51\u7edc\u6d41**\u6765\u6c42\n\n\u9020\u51fa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9S\u548c\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9T\uff0c\u628aS\u8fde\u8fb9\u5230\u6240\u6709\u5e26\u6709\u6b63\u6743\u7684\u70b9\u4e0a\uff0c\u5bb9\u91cf\u662f\u8fd9\u4e2a\u70b9\u7684\u6743\uff1b\u628a\u6240\u6709\u5e26\u8d1f\u6743\u7684\u70b9\u8fde\u8fb9\u5230T\uff0c\u5bb9\u91cf\u662f\u8fd9\u4e2a\u70b9\u7684\u6743\u7684\u76f8\u53cd\u6570\u3002\u539f\u6765\u7684\u8fb9\u5462\uff0c\u628a\u5b83\u4eec\u7684\u5bb9\u91cf\u90fd\u8bbe\u6210\u65e0\u9650\u5927\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u3002\n\n\u7b54\u6848\u5c31\u662f\u56fe\u4e2d\u7684**\u6240\u6709\u6b63\u6743\u503c\u4e4b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5bb9\u91cf**\u3002\n\n\n\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u6700\u5927\u6d41\u7684\u503c\u662f\u6700\u5c0f\u5272\u7684\u5bb9\u91cf\u3002\n\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u56fe\u4e2d\u7684\u6700\u5c0f\u5272\u4e5f\u5bf9\u5e94\u4e86\u4e00\u4e2a\u6743\u95ed\u5408\u56fe\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684\u6700\u5c0f\u5272\u4e00\u5b9a\u4e0d\u4f1a\u5305\u542b\u5bb9\u91cf\u662f\u65e0\u9650\u5927\u7684\u8fb9\u548c\u4e0eS\u76f8\u8fde\u7684\u8fb9\u3002\n\n\u800c\u4e3a\u4ec0\u4e48\u6240\u6709\u6b63\u6743\u503c\u4e4b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u5bb9\u91cf\u5c31\u662f\u7b54\u6848\u5462\uff1f\n\n\u8bbe\u67d0\u4e2a\u5272\u7684\u5bf9\u5e94\u7684\u95ed\u5408\u56fe\u7684\u6743\u503c\u662fans\uff0c\u5bb9\u91cf\u662fcut\uff1b\n\n\u90a3\u4e48**ans+cut=\u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u503c\u4e4b\u548c**\uff1b\n\n\u8981\u4f7fans\u6700\u5927\uff0c\u90a3\u4e48cnt\u8981\u6700\u5c0f\u3002\n\ncnt\u6700\u5c0f\u7684\u60c5\u51b5\u5c31\u662f\u6700\u5c0f\u5272\u5566\n\n\u6c42\u51fa\u6765\u7684ans\u5c31\u662f\u6700\u5927\u6743\u95ed\u5408\u56fe\u7684\u6743\u5566\n\n\n\u672c\u4eba\u4ee3\u7801\u53d8\u91cf\u540d\u975e\u5e38\u5947\u7279\uff0c\u5927\u5bb6\u51d1\u5408\u770b\u4e00\u4e0b\u5427\n\n\u8fd9\u91cc\u662f\u5199\u7684\u5927\u6cd5\u5e08\u7248\u7684ISAP\uff0c\u4ee3\u7801\u91cf~~\u538b\u884c\u538b\u5230~~\u4ec51K\u51fa\u5934\uff0c\u7f16\u7a0b\u590d\u6742\u5ea6\u8d3c\u5c0f\uff0c\u901f\u5ea6\u8fd8\u4e0d\u6162(0ms)\uff0c\u5f88\u6709\u6027\u4ef7\u6bd4\n\n```cpp\n//by iot\n#include<bits/stdc++.h>\nusing namespace std;\ninline int gotcha()\n{\n    register int a=0,b=1,c=getchar();\n    while(!isdigit(c))b^=c=='-',c=getchar();\n    while(isdigit(c))a=(a<<3)+(a<<1)+c-48,c=getchar();\n    return b?a:-a;\n}\nconst int _ = 204 , __ = 10202<<1 , $ = 100 , inf = 0x3f3f3f3f;\nint to[__],ne[__],v[__],he[_],ecnt=1;\nvoid adde(int a,int b,int c){to[++ecnt]=b,v[ecnt]=c,ne[ecnt]=he[a],he[a]=ecnt;}\nint n,m,S=201,T=202,gap[_]={0},dis[_]={0};\nint dfs(int d,int flw)\n{\n    if(d==T || flw==0)return flw;\n    int i,w,mid=n-1,los=flw;\n    for(i=he[d];i;i=ne[i])\n        if(v[i]>0)\n        {\n            if(dis[d]==dis[to[i]]+1)\n            {\n                w=dfs(to[i],min(los,v[i])),v[i]-=w,v[i^1]+=w,los-=w;\n                if(dis[S]>=n)return flw-los;if(!los)break;\n            }\n            mid=min(mid,dis[to[i]]);\n        }\n    if(flw==los){if(!(--gap[dis[d]]))dis[S]=n;dis[d]=mid+1,gap[dis[d]]++;}\n    return flw-los;\n}\nint isap(){register int ans=0;gap[1]=n;while(dis[S]<n)ans+=dfs(S,inf);return ans;}\nint main()\n{\n    register int i,j,k,a,b,sum=0;\n    m=gotcha(),n=gotcha();\n    for(i=1;i<=m;i++)\n    {\n        a=gotcha(),adde(S,i,a),adde(i,S,0),sum+=a;\n        for(a=gotcha();a!=0;a=gotcha())adde(i,a+$,inf),adde(a+$,i,0);\n    }\n    for(i=1;i<=n;i++)a=gotcha(),adde(i+$,T,a),adde(T,i+$,0);n=_;\n    printf(\"%d\\n\",sum-isap());\n    return 0;\n}\n```",
        "postTime": 1515056729,
        "uid": 44176,
        "name": "iotang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3410 \u3010\u62cd\u7167\u3011"
    },
    {
        "content": "\u56fe\u7247\u6765\u81ea\u4e8e [$Hi\\ Ho$](https://www.cnblogs.com/TreeDream/p/5942354.html)\u3002\n\n\u7b80\u5316\u4e00\u4e0b\u9898\u9762 : \n\n- \u4e00\u4e9b\u4eba\u8981\u62cd\u7167,\u62cd\u7167\u8981\u4e00\u4e9b \u5c0f $B$ \u7684\u4e0b\u5c5e\u4e00\u8d77\u62cd,\u62cd\u5b8c\u4e86\u8fd9\u4e9b\u4eba\u4f1a\u7ed9\u5c0f $B$ \u94b1\u3002\n- \u7ed9\u4e86\u4e00\u4e2a\u4e0b\u5c5e\u7684\u94b1\u5c31\u53ef\u4ee5\u8ba9\u4ed6\u62cd\u5f88\u591a\u6b21\u7167\u7247\u3002\n- \u6c42\u5c0f $B$ \u7684\u7eaf\u5229\u6da6 (\u6700\u5927)\u3002\n\n\u5f88\u663e\u7136\u6837\u4f8b\u4e2d\u53ef\u4ee5\u5168\u90e8\u4eba\u90fd\u62cd,\u5168\u90e8\u4e0b\u5c5e\u90fd\u7ed9\u94b1\u3002 \u5f88\u663e\u7136\u8fd9\u662f\u4e00\u4e2a**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe**\u95ee\u9898\u3002\n\n\u5148\u8bf4\u4e00\u8bf4\u4ec0\u4e48\u662f\u6743\u95ed\u5408\u5b50\u56fe:\n\n![](https://cdn.luogu.com.cn/upload/pic/40625.png)\n\n\u8fd9\u91cc\u6709\u7684\u6743\u95ed\u5408\u5b50\u56fe\u6709 $(3).(4).(2,4).(3,4).(1,3,4).(2,3,4).(1,2,3,4)$\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u56fe\u4e2d\u53ef\u4ee5\u9009\u4e00\u4e9b\u70b9,\u5f62\u6210\u4e00\u4e2a\u96c6\u5408 $V$,\u4f46\u662f\u8981\u4fdd\u8bc1**\u8fd9\u4e9b\u70b9\u6240\u8fde (\u6709\u5411\u8fb9) \u5230\u7684\u70b9\u4e5f\u8981\u5728 $V$ \u91cc\u9762**\u3002\u6240\u4ee5\u5f88\u663e\u7136 $(1)$ \u4e0d\u662f\u6743\u95ed\u5408\u5b50\u56fe\u56e0\u4e3a $3,4$ \u6ca1\u6709\u8fdb\u5165\u3002\n\n\u5f88\u663e\u7136\u8fd9\u79cd\u56fe\u53ef\u4ee5\u7528\u4e8c\u5206\u56fe\u5c55\u793a:\n\n![](https://cdn.luogu.com.cn/upload/pic/40628.png)\n\n\u5176\u4e2d\u6211\u4eec\u53ef\u4ee5\u6d45\u6d45\u7684\u7406\u89e3,\u54ea\u4e9b\u70b9\u8981\u54ea\u4e9b\u70b9\u3002\u800c\u5982\u679c\u6211\u4eec\u5efa\u7acb\u4e86\u4e00\u4e2a\u8d85\u6c47\u7684\u8bdd,\u5c31\u53ef\u4ee5\u77e5\u9053 **\u5982\u679c\u6211\u4eec\u628a\u8ba9\u6240\u6709 $B$\u70b9\u8fde\u8d85\u6c47,\u6d41\u91cf\u4e3a\u6240\u4ed8\u7684\u94b1, $A$\u70b9\u8fde\u8d85\u6e90,\u6d41\u91cf\u4e3a\u7ed9\u7684\u94b1** ,\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42 **\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe** \u4e86\u3002\u56e0\u4e3a\u6211\u4eec\u6d41\u4e00\u6761\u8d85\u6e90\u5411 $A$ \u70b9\u7684\u8fb9\u5c31\u7b49\u4e8e\u7ed9\u4ed6\u62cd\u7167\u62ff\u4ed6\u94b1,\u800c\u6d41 $B$ \u70b9\u5411\u8d85\u6c47\u7684\u5c31\u662f\u4ed8\u7ed9\u4ed6\u94b1 (\u800c\u4e14\u4ec5\u4ec5\u4e00\u6b21,\u56e0\u4e3a\u53ea\u6d41\u4e00\u6b21)\u3002\u90a3\u4e48 $A$ \u5411 $B$ \u8fb9\u7684\u6d41\u91cf\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e3a $inf$\u3002\n\n\u4f46\u662f\u8981\u77e5\u9053\u7ed3\u8bba: \u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u7b49\u4e8e\u6240\u6709\u6b63\u6743\u70b9\u4e4b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\u3002(\u5176\u4e2d\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5927\u6d41)\n\n\u6211\u4eec\u5c31\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u5c31\u597d\u5566\u3002\n\n(\u6ca1\u60f3\u5230\u8fde _ \u4e5f\u53ef\u4ee5\u5f53\u53d8\u91cf $qwq$)\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nConst _=100;\n\nvar\n    value,reach,next:array[-1..50000] of longint;\n    gap,dis,cnt:array[-1..50000] of longint;\n    i,l,r,n,m,source,sink,sum,tot,ans:longint;\n    maxflow:int64;\n\nprocedure add(l,r,sum:longint);\nbegin\n    inc(tot);\n    reach[tot]:=r;\n    value[tot]:=sum;\n    next[tot]:=cnt[l];\n    cnt[l]:=tot;\nend;\n\nfunction Dfs(now,flow:longint):longint;\nvar i,k,mindis,ret:longint;\nbegin\n    mindis:=n-1; ret:=flow;\n    if now=sink then exit(flow);\n    i:=cnt[now];\n    while i<>-1 do\n    begin\n        if value[i]>0 then\n        begin\n            if dis[now]=dis[reach[i]]+1 then\n            begin\n                k:=Dfs(reach[i],min(ret,value[i]));\n                dec(value[i],k); inc(value[i xor 1],k);\n                dec(ret,k);\n                if dis[source]>=n then exit(flow-ret);\n                if ret=0 then break;\n            end;\n            mindis:=min(mindis,dis[reach[i]]);\n        end;\n        i:=next[i];\n    end;\n    if ret=flow then\n    begin\n        dec(gap[dis[now]]);\n        if gap[dis[now]]=0 then dis[source]:=n;\n        dis[now]:=mindis+1;\n        inc(gap[dis[now]]);\n    end;\n    exit(flow-ret);\nend;\n\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    read(m,n); source:=0; sink:=n+m+1; \n    for i:=1 to m do\n    begin\n        read(l); inc(sum,l); add(source,i,l); add(i,source,0); read(l);\n        while l<>0 do begin add(i,l+_,maxlongint div 843); add(l+_,i,0); read(l); end;\n    end;\n    for i:=1 to n do begin read(l); add(i+_,sink,l); add(sink,i+_,0); end;\n\n    n:=n+m+_+1; gap[source]:=n;\n    while dis[source]<n do inc(maxflow,Dfs(source,maxlongint div 842));\n\n    writeln(sum-maxflow);\nend.\n```\n\n",
        "postTime": 1540813794,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3410 \u3010\u62cd\u7167\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\nm\u4e2a\u8bf7\u6c42\u4e0es\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a\u65b9\u6848\u4ef7\u503c\uff1b\n\nn\u4e2a\u5458\u5de5\u4e0et\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a\u5458\u5de5\u82b1\u8d39\uff1b\n\n\u65b9\u6848\u4e0e\u7275\u626f\u5230\u7684\u5458\u5de5\u8fde\u8fb9\uff0c\u6743\u503c\u4e3ainf\uff1b\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u603b\u6d41\u91cf\u5c31\u662f\u6700\u4f18\u65b9\u6848\u7684\u603b\u82b1\u8d39\uff1b\n\n\u7136\u540e\uff0c\u603b\u6536\u76ca=\u603b\u4ef7\u503c-\u603b\u82b1\u8d39\u3002\n\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```cpp\n 1 #include<cstdio>\n 2 #include<cstring>\n 3 #define inf 1000000\n 4 #define maxn 300\n 5 #define maxm 300000\n 6 int n,m,s,t,tw,tot;\n 7 int a,b,c;\n 8 int d[maxn],q[maxn],head,tail;\n 9 int h[maxn],hs=1;\n10 struct edge{int s,n,w;}e[maxm];\n11 inline int min(int x,int y){return x<y?x:y;}\n12 void add(int q,int z,int w){\n13     e[++hs]=(edge){z,h[q],w},h[q]=hs;\n14     e[++hs]=(edge){q,h[z]},h[z]=hs;\n15 }\n16 void bfs(){\n17     memset(d,0,sizeof(d));\n18     head=tail=0;\n19     q[head++]=s,d[s]=1;\n20     while(head>tail){\n21         a=q[tail++];\n22         for(int i=h[a];i;i=e[i].n)\n23         if(!d[e[i].s]&&e[i].w){\n24             d[e[i].s]=d[a]+1;\n25             if(e[i].s==t) return;\n26             q[head++]=e[i].s;\n27         }\n28     }\n29 }\n30 int ap(int k,int w){\n31     if(k==t) return w;\n32     int uw=w;\n33     for(int i=h[k];i&&uw;i=e[i].n)\n34     if(e[i].w&&d[e[i].s]==d[k]+1){\n35         int nw=ap(e[i].s,min(uw,e[i].w));\n36         if(nw) e[i].w-=nw,e[i^1].w+=nw,uw-=nw;\n37         else d[e[i].s]=0;\n38     }\n39     return w-uw;\n40 }\n41 void Dinic(){while(bfs(),d[t]) tw+=ap(s,inf);}\n42 int main(){\n43     scanf(\"%d%d\",&m,&n);\n44     s=0,t=n+m+1;\n45     for(int i=1;i<=m;i++){\n46         scanf(\"%d\",&a);\n47         tot+=a;\n48         add(s,i,a);\n49         while(scanf(\"%d\",&a)&&a) add(i,a+m,inf);\n50     }\n51     for(int i=1;i<=n;i++) scanf(\"%d\",&a),add(i+m,t,a);\n52     Dinic();\n53     printf(\"%d\\n\",tot-tw);\n54     return 0;\n55 }\n\u535a\u5ba2\u539f\u5740\uff1ahttp://www.cnblogs.com/J-william/p/6596496.html\n```",
        "postTime": 1490102064,
        "uid": 21020,
        "name": "Long\u00b7J\u00b7William",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3410 \u3010\u62cd\u7167\u3011"
    },
    {
        "content": "\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u9009\u62e9\u4e86\u4e00\u4e2a\u8981\u6c42 $q_i$\uff0c\u90a3\u4e48 $q_i$ \u6240\u6709\u9700\u8981\u7684\u70b9\u90fd\u5fc5\u987b\u9009\u62e9\uff0c\u4e0d\u7136\u65e0\u6cd5\u83b7\u5f97\u6536\u76ca\u3002\n\n\u90a3\u8fd9\u663e\u7136\u53ef\u4ee5\u8f6c\u6362\u4e3a\u7f51\u7edc\u6d41\u7684\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff1a**\u6700\u5927\u6743\u503c\u95ed\u5408\u56fe**\u3002\n\n\u6700\u5927\u6743\u503c\u95ed\u5408\u56fe\u662f**\u6700\u5c0f\u5272**\u7684\u4e00\u4e2a\u95ee\u9898\u6a21\u578b\uff0c\u53c2\u89c1 [OI Wiki - \u6700\u5c0f\u5272](https://oi-wiki.org/graph/flow/min-cut/#2)\u3002\n\n### \u5b9a\u4e49\n\n> \u6700\u5927\u6743\u503c\u95ed\u5408\u56fe\uff0c\u5373\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u6743\u503c\uff08\u53ef\u4ee5\u4e3a\u6b63\u6216\u8d1f\u6216 $0$\uff09\uff0c\u4f60\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u6743\u503c\u548c\u6700\u5927\u7684\u5b50\u56fe\uff0c\u4f7f\u5f97\u5b50\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u7684\u540e\u7ee7\u90fd\u5728\u5b50\u56fe\u4e2d\u3002\n\n_\u6458\u81ea [OI Wiki - \u6700\u5c0f\u5272](https://oi-wiki.org/graph/flow/min-cut/#2)_\u3002\n\n\u7b26\u5408\u672c\u9898\u7684\u5b9a\u4e49\u3002\n\n### \u6c42\u51fa\u6700\u5927\u6743\u503c\u95ed\u5408\u56fe\n\n\u53ef\u4ee5\u4f7f\u7528\u6700\u5c0f\u5272\u6765\u6c42\u89e3\u8be5\u95ee\u9898\u3002\n\n\u6b65\u9aa4\uff1a\n\n1. \u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9 $s$ \u548c\u8d85\u7ea7\u6c47\u70b9 $t$\uff0c\u6240\u6709**\u6b63\u6743\u70b9**\u90fd\u8fde\u4e00\u6761\u5230 $s$ \u7684\u8fb9\uff0c\u6d41\u91cf\u4e3a\u70b9\u6743\uff1b**\u8d1f\u6743\u70b9**\u90fd\u8fde\u4e00\u6761\u5230 $t$ \u7684\u8fb9\uff0c\u6d41\u91cf\u4e3a\u70b9\u6743\u7684**\u7edd\u5bf9\u503c**\uff0c\u539f\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\u6743\u6d41\u91cf\u90fd\u8d4b\u503c\u4e3a $+\\infty$\u3002\n2. \u6c42\u51fa\u7f51\u7edc\u7684**\u6700\u5c0f\u5272**\u3002\n3. \u8bbe\u539f\u56fe\u6b63\u6743\u70b9\u548c\u4e3a $w$\uff0c\u7b54\u6848\u5c31\u662f $w - c(s,t)_{\\min}$\u3002\n\n\u8bc1\u660e\uff1a\n\n1. \u6700\u5927\u6743\u503c\u95ed\u5408\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a**\u5272**\u3002\u53cd\u8bc1\u6cd5\uff1a\u82e5\u4e0d\u662f\u5272\uff0c\u5373 $s$ \u548c $t$ \u8fde\u901a\uff0c\u5373\u5b58\u5728\u70b9 $(u,v)$\uff0c$s$ \u8fde\u901a $u$\uff0c$v$ \u8fde\u901a $t$\uff0c$u$ \u8fde\u901a $v$\uff0c\u5373 $v$ \u662f $u$ \u7684\u540e\u7ee7\uff0c\u4e0d\u7b26\u5408\u6700\u5927\u6743\u503c\u95ed\u5408\u56fe\u7684\u5b9a\u4e49\u3002\n2. \u5272\u53bb\u7684\u8fb9\u5fc5\u5b9a\u548c $s$ \u6216 $t$ \u8fde\u901a\u3002\u56e0\u4e3a\u5272\u8981\u6700\u5c0f\uff0c\u4e0d\u53ef\u80fd\u53bb\u5272\u8fb9\u6743\u662f $+\\infty$ \u7684\u8fb9\u3002\n3. \u5272\u5b8c\u4e4b\u540e\u7684\u56fe\uff0c\u6743\u503c\u548c $=$ \u6240\u6709\u6b63\u6743\u503c\u548c $-$ \u4e0d\u9009\u62e9\u7684\u6b63\u6743\u70b9 $+$ \u9009\u62e9\u7684\u8d1f\u6743\u70b9\u548c\u3002\u6240\u6709\u4e0d\u9009\u7684\u70b9\u4e4b\u548c $=$ \u5272\u6389\u7684\u8fb9\u6d41\u91cf\u4e4b\u548c $=$ \u6700\u5c0f\u5272 $c(s,t)_{\\min}$\uff0c\u4e0a\u5f0f\u8f6c\u6362\u4e3a\u6240\u6709\u6b63\u6743\u503c\u548c $- c(s,t)_{\\min}$\u3002\n\n_\u8bc1\u660e\u8fc7\u7a0b\u53c2\u8003 [OI Wiki - \u6700\u5c0f\u5272](https://oi-wiki.org/graph/flow/min-cut/#2)_\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e5 + 5, inf = 1 << 30;\nint n, m, maxflow;\nint s, t;\nint flow[N], dep[N];\nint ans;\nstruct edge\n{\n\tint to, nxt;\n}e[N << 1];\nint head[N], idx = 1;\nvoid add(int x, int y, int w)\n{\n\te[ ++ idx] = {y, head[x]}, head[x] = idx, flow[idx] = w;\n\te[ ++ idx] = {x, head[y]}, head[y] = idx, flow[idx] = 0;\n}\nbool bfs()\n{\n\tmemset(dep, 0, sizeof dep);\n\tqueue<int> q;\n\tq.push(s), dep[s] = 1;\n\twhile (!q.empty())\n\t{\n\t\tint u = q.front(); q.pop();\n\t\tfor (int i = head[u]; i; i = e[i].nxt)\n\t\t{\n\t\t\tint v = e[i].to;\n\t\t\tif (flow[i] && !dep[v])\n\t\t\t{\n\t\t\t\tdep[v] = dep[u] + 1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t];\n}\nint dfs(int u, int in)\n{\n\tif (u == t) return in;\n\tint out = 0;\n\tfor (int i = head[u]; i && in; i = e[i].nxt)\n\t{\n\t\tint v = e[i].to;\n\t\tif (flow[i] && dep[v] == dep[u] + 1)\n\t\t{\n\t\t\tint fl = dfs(v, min(flow[i], in));\n\t\t\tflow[i] -= fl, flow[i ^ 1] += fl;\n\t\t\tin -= fl, out += fl;\n\t\t}\n\t}\n\tif (!out) dep[u] = 0;\n\treturn out;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &m, &n);\n\ts = 0, t = 1 + m + n;\n\tfor (int i = 1, w, x; i <= m; i ++ )\n\t{\n\t\tscanf(\"%d\", &w), ans += w;\n\t\tadd(s, i, w);\n\t\twhile (scanf(\"%d\", &x), x) add(i, x + m, inf);\n\t}\n\tfor (int i = 1, x; i <= n; i ++ )\n\t\tscanf(\"%d\", &x), add(i + m, t, x);\n\twhile (bfs()) maxflow += dfs(s, inf);\n\tprintf(\"%d\\n\", ans - maxflow);\n\treturn 0;\n}\n```",
        "postTime": 1659618126,
        "uid": 482728,
        "name": "Engulf",
        "ccfLevel": 0,
        "title": "P3410 \u62cd\u7167 \u9898\u89e3"
    },
    {
        "content": "[P3410 \u62cd\u7167](https://www.luogu.com.cn/problem/P3410)\n\n\u6700\u5927\u6743\u503c\u95ed\u5408\u5b50\u56fe\n\n\u4f7f\u7528\u603b\u4ef7\u503c $ - $ \u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u8003\u8651\u6700\u5c0f\u5272\u5982\u4f55\u8fde\u8fb9\u3002\n\n\u6e90\u70b9\u5411\u6bcf\u4e2a\u4eba\u7684\u8981\u6c42\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u62cd\u7167\u7684\u4ef7\u503c\u3002\n\n\u6bcf\u4e2a\u4eba\u7684\u8981\u6c42\u5411\u9700\u8981\u62cd\u7167\u7684\u4eba\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $ \\infty $ \u8868\u793a\u5fc5\u987b\u8981\u5728\u4e00\u8d77\u4e0d\u80fd\u65ad\u5f00\u3002\n\n\u6bcf\u4e2a\u4eba\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u8ba9\u8fd9\u4e2a\u4eba\u62cd\u7167\u7684\u82b1\u8d39\u3002\n\n\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u6c42\u51fa\u6700\u5c0f\u5272\u8ba1\u7b97\u5373\u53ef\u3002\n\nCode\n\n```cpp\n # include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 5;\nconst int M = 2e6 + 5;\nconst int inf = 1e9; \n\ntypedef struct {\n\tint x , y , z , next;\n}Node;\nNode edge[M];\nint E = 1 , elast[N];\nint S , T;\n\nvoid add(int x , int y , int z) {\n\tE ++ , edge[E].x = x , edge[E].y = y , edge[E].z = z , edge[E].next = elast[x] , elast[x] = E;\n}\n\nint dis[N] , cnt[N];\nvoid bfs(int start) {\n    queue<int> q;\n    q.push(start);\n    dis[start] = 0;\n    cnt[S] = 1;\n    while (!q.empty()) {\n        int cur = q.front();\n        q.pop();\n        for (int i = elast[cur] ; i ; i = edge[i].next) {\n            int v = edge[i].y;\n            if (dis[v] != -1) continue;\n            dis[v] = dis[cur] + 1;\n            q.push(v);\n            cnt[dis[v]] ++;\n        }\n    }\n}\nint cur[N];\nint dfs(int u , int flow) {\n    if (u == T) return flow;\n    int delta = 0;\n    for (int i = cur[u] ; i ; i = edge[i].next) {\n        cur[u] = i;\n        int v = edge[i].y;\n        if (edge[i].z > 0 && dis[u] == dis[v] + 1) {\n            int temp = dfs(v , min(flow - delta , edge[i].z));\n            edge[i].z -= temp;\n            edge[i ^ 1].z += temp;\n            delta += temp;\n            if (delta == flow) return delta;\n        }\n    }\n    if (dis[S] >= T + 1) return delta;\n    cur[u] = elast[u];\n    if (-- cnt[dis[u]] == 0) dis[S] = T + 1;\n    cnt[++ dis[u]] ++;\n    return delta;\n}\nint Isap() {\n    int ans = 0;\n    memset(cnt , 0 , sizeof cnt);\n    memset(dis , -1 , sizeof dis);\n    bfs(T);\n    for (int i = 0 ; i <= T ; i ++) {\n        cur[i] = elast[i];\n    }\n    while (dis[S] < T + 1) ans += dfs(S , inf);\n    return ans;\n}\n\nint m , n , sum = 0;\nint main() {\n\tcin >> m >> n;\n    S = 0 , T = n + m + 1;\n\tfor (int i = 1 ; i <= m ; i ++) {\n\t\tint x , y;\n\t\tcin >> x;\n\t\tsum += x;\n\t\tadd(S , i , x) , add(i , S , 0);\n\t\twhile (cin >> y && y != 0) add(i , m + y , inf) , add(m + y , i , 0); \n\t}\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tint x;\n\t\tcin >> x;\n\t\tadd(m + i , T , x) , add(T , m + i , 0);\n\t}\n\tcout << sum - Isap() << endl;\n\treturn 0;\n}\n```",
        "postTime": 1629967166,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P3410 \u62cd\u7167"
    },
    {
        "content": "## \u9898\u610f\u63cf\u8ff0\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/solution/P3410)\n\n## \u601d\u8def\n\n\u8fd9\u9053\u9898\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u7f51\u7edc\u6d41\u6a21\u578b\uff1a**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe**\u3002\n\n\u5148\u8bf4\u505a\u6cd5\uff1a\n\n1. \u65b0\u5efa\u539f\u70b9 $s$ \u4e0e\u6c47\u70b9 $t$\uff1b\n\n2. \u5c06 $s$ \u4e0e\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u6b63\u6743\u70b9\u76f8\u8fde\uff0c\u6743\u503c\u4e3a\u8be5\u6b63\u6743\u70b9\u70b9\u6743\uff1b\n\n3. \u5c06 $t$ \u4e0e\u56fe\u4e2d\u6bcf\u4e00\u4e2a\u8d1f\u6743\u70b9\u76f8\u8fde\uff0c\u6743\u503c\u4e3a\u8be5\u8d1f\u6743\u70b9\u70b9\u6743\u7684\u7edd\u5bf9\u503c\uff1b\n\n4. \u6839\u636e\u8f93\u5165\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $\\infty$\u3002\n\n\u6700\u540e\uff0c\u7b54\u6848\u4e3a\u6b63\u6743\u70b9\u548c - \u6700\u5927\u6d41\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u8bc1\u660e\uff1a\n\n\u8bbe\u96c6\u5408 $S$ \u548c\u96c6\u5408 $T$ \u662f\u539f\u56fe\u7684 $s-t$ \u5272\u3002\n\n\u8bb0 $w$ \u4e3a\u5f53\u524d\u7684\u6536\u76ca \uff0c $Cnt$ \u4e3a\u5f53\u524d\u7684\u5272\u3002\n\n\u5219 $w = S_\\text{\u6b63\u6743\u548c} - |S_\\text{\u8d1f\u6743\u548c}|$\u3002\n\n\u663e\u7136 $Cut = \\text{\u6b63\u6743\u548c} - S_\\text{\u6b63\u6743\u548c} + |S_\\text{\u8d1f\u6743\u548c}|$\u3002\n\n\u52a0\u8d77\u6765\u5c31\u6709\uff1a$w + Cut = \\text{\u6b63\u6743\u548c}$\u3002\n\n\u79fb\u9879\u5f97\uff1a$w = \\text{\u6b63\u6743\u548c} - Cut$\u3002\n\n\u663e\u7136\u5f53 $Cut$ \u53d6\u6700\u5c0f\u503c\uff08\u5373\u6700\u5c0f\u5272\uff09\u65f6 $w$ \u53d6\u6700\u5927\u503c\u3002\n\n\u7531\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u5f97\uff1a$\\max_w = \\text{\u6b63\u6743\u548c} - \\text{\u6700\u5927\u6d41}$\u3002\n\n\u8bc1\u5fc5\u3002\n\n\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u77ac\u5207\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define int long long\n\nconst int MAXN = 50010 , MAXM = 500010 , INF = 1 << 30;\n\nint N , M;\n\nint Head[MAXN * 4];\nint Cnt = 1;\nstruct Edge {\n    int Next , To;\n    int Val;\n} G[MAXM * 15];\n\nvoid _add(int u , int v , int w) {\n    G[++Cnt].To = v;\n    G[Cnt].Val = w;\n    G[Cnt].Next = Head[u];\n    Head[u] = Cnt;\n}\n\nvoid Add(int a , int b , int c) {\n    _add(a , b , c);\n    _add(b , a , 0);\n}\n\nint Dep[MAXN * 4];\nint Hash[MAXN * 4];\n\nint S , T;\nint Max_Flow;\n\nvoid Bfs() {\n    memset(Dep , -1 , sizeof Dep);\n    memset(Hash , 0 , sizeof Hash);\n    queue<int> q;\n    q.push(T);\n    Dep[T] = 0;\n    while(!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for(int i = Head[u]; i; i = G[i].Next) {\n            int v = G[i].To;\n            if(Dep[v] != -1) continue;\n            q.push(v);\n            Dep[v] = Dep[u] + 1;\n            Hash[Dep[v]]++;\n        }\n    }\n}\n\nint Dfs(int u , int flow) {\n    if(u == T) {\n        Max_Flow += flow;\n        return flow;\n    }\n    int used = 0;\n    for(int i = Head[u]; i; i = G[i].Next) {\n        int v = G[i].To;\n        if(G[i].Val && Dep[v] + 1 == Dep[u]) {\n            int Min = Dfs(v , min(flow - used , G[i].Val));\n            if(Min) {\n                G[i].Val -= Min;\n                G[i ^ 1].Val += Min;\n                used += Min;\n            }\n            if(used == flow) {\n                return used;\n            }\n        }\n    }\n    Hash[Dep[u]]--;\n    if(Hash[Dep[u]] == 0) Dep[S] = N + M + 10;\n    Dep[u]++;\n    Hash[Dep[u]]++;\n    return used;\n}\n\nint ISAP() {\n    Max_Flow = 0;\n    Bfs();\n    while(Dep[S] < N + M + 10) Dfs(S , INF);\n    return Max_Flow;\n}\n\nint Sum;\n\nsigned main() {\n    scanf(\"%lld%lld\" ,&N ,&M);\n\n    S = 0;\n    T = N + M + 1;\n\n    for(int i = 1 , k , x; i <= N; i++) {\n        scanf(\"%lld%lld\" ,&k ,&x);\n        Sum += k;\n        Add(S , i , k);\n        while(x) {\n            Add(i , N + x , INF);\n            scanf(\"%lld\" ,&x);\n        }\n    }\n\n    for(int i = 1 , k; i <= M; i++) {\n        scanf(\"%lld\" ,&k);\n        Add(N + i , T , k);\n    }\n\n    printf(\"%lld\\n\" ,Sum - ISAP());\n\n    return 0;\n}\n```",
        "postTime": 1650087859,
        "uid": 461426,
        "name": "CmsMartin",
        "ccfLevel": 6,
        "title": "\u62cd\u7167"
    },
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n\u5982\u679c\u6211\u4eec\u5c06\u8981\u6c42\u62cd\u7167\u7684\u4eba\u548c\u4e0b\u5c5e\u4e4b\u95f4\u6309\u7167\u8981\u6c42\u5173\u7cfb\u8fde\u6709\u5411\u8fb9\uff0c\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u9898\u76ee\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6211\u4eec\u6c42\u51fa\u6709\u5411\u56fe\u7684\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u3002\u5373\uff0c\u5728\u4e00\u5f20\u6709\u5411\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u70b9\u96c6\uff0c\u8981\u6c42\u70b9\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u7684\u540e\u7ee7\u4e5f\u90fd\u5728\u8fd9\u4e2a\u70b9\u96c6\u4e2d\uff0c\u4f7f\u70b9\u96c6\u4e2d\u70b9\u6743\u548c\u6700\u5927\u3002\n\n\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a**\u4ece\u6e90\u70b9\u5411\u6240\u6709\u6b63\u6743\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u539f\u70b9\u6743\uff1b\u4ece\u6240\u6709\u8d1f\u6743\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u539f\u70b9\u6743\u7684\u7edd\u5bf9\u503c\uff1b\u539f\u56fe\u4e2d\u7684\u8fb9\u6743\u8bbe\u4e3a\u6b63\u65e0\u7a77\u3002\u5219\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c = \u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u503c\u548c - \u65b0\u56fe\u7684\u6700\u5c0f\u5272\u3002**\n\n### \u5bf9\u7ed3\u8bba\u7684\u8bc1\u660e\n\n\u6211\u4eec\u5148\u505a\u5982\u4e0b\u7ea6\u5b9a\uff1a\n\n1. \u5272\u6389\u6e90\u70b9\u4e0e\u6b63\u6743\u70b9 $u$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u8868\u793a\u4e0d\u9009\u62e9\u70b9 $u$ \u8fdb\u5165\u5b50\u56fe\u3002\n2. \u5272\u6389\u8d1f\u6743\u70b9 $v$ \u4e0e\u6c47\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u8868\u793a\u9009\u62e9\u70b9 $v$ \u8fdb\u5165\u5b50\u56fe\u3002\n\n\u5219\u6211\u4eec\u8dd1\u4e00\u904d\u6700\u5c0f\u5272\u540e\u5f97\u5230\u7684\u4e00\u5b9a\u662f\u95ed\u5408\u5b50\u56fe\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a\u8003\u8651\u4efb\u610f\u5f97\u5230\u7684\u5b50\u56fe\u5185\u7684\u4efb\u610f\u6b63\u6743\u70b9 $u$\uff0c\u82e5\u5b58\u5728\u5176\u540e\u7ee7\u8282\u70b9 $v$ \u6ca1\u6709\u88ab\u9009\u62e9\u8fdb\u5165\u5b50\u56fe\uff0c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\u5982\u679c $v$ \u6743\u503c\u4e3a\u8d1f\uff0c\u6309\u7167\u4e0a\u8ff0\u7ea6\u5b9a\uff0c\u70b9 $v$ \u4e0e\u6c47\u70b9\u95f4\u7684\u8fb9\u4f1a\u88ab\u4fdd\u7559\uff0c\u6e90\u70b9\u4e0e\u6c47\u70b9\u8054\u901a\uff0c\u4e0e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\u77db\u76fe\uff1b\u5982\u679c $v$ \u6743\u503c\u4e3a\u6b63\uff0c\u6309\u7167\u4e0a\u8ff0\u7ea6\u5b9a\uff0c\u6e90\u70b9\u4e0e\u70b9 $v$ \u95f4\u7684\u8fb9\u4f1a\u88ab\u5272\u6389\uff0c\u4f46\u70b9 $u$ \u4e0e\u70b9 $v$ \u8054\u901a\uff0c\u4e0d\u5272\u6389\u6e90\u70b9\u4e0e\u70b9 $v$ \u95f4\u7684\u8fb9\u4ecd\u7136\u662f\u4e00\u4e2a\u5272\uff0c\u4e14\u6743\u503c\u548c\u66f4\u5c0f\uff0c\u4e0e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\u77db\u76fe\u3002\n\n\u56e0\u4e3a\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c\u4e3a\uff1a\n\n\u88ab\u9009\u7684\u6b63\u6743\u70b9\u6743\u503c\u548c - \u88ab\u9009\u7684\u8d1f\u6743\u70b9\u6743\u503c\u548c\u7684\u7edd\u5bf9\u503c\n\n\u7b49\u4ef7\u4e8e \n\n\u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u503c\u548c - (\u4e0d\u88ab\u9009\u7684\u6b63\u6743\u70b9\u7684\u6743\u503c\u548c + \u88ab\u9009\u7684\u8d1f\u6743\u70b9\u6743\u503c\u548c\u7684\u7edd\u5bf9\u503c)\n\n\u800c\u6839\u636e\u5148\u524d\u7684\u7ea6\u5b9a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a\n\n\u6700\u5c0f\u5272 = \u4e0d\u88ab\u9009\u7684\u6b63\u6743\u70b9\u7684\u6743\u503c\u548c + \u88ab\u9009\u7684\u8d1f\u6743\u70b9\u6743\u503c\u548c\u7684\u7edd\u5bf9\u503c\n\n\u6240\u4ee5\n\n**\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\u7684\u6743\u503c\u548c = \u6240\u6709\u6b63\u6743\u70b9\u7684\u6743\u503c\u548c - \u65b0\u56fe\u7684\u6700\u5c0f\u5272**\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u56e0\u4e3a\u6700\u5927\u6d41=\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u5373\u53ef\u3002\u7b14\u8005\u5728\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528 Dinic \u7b97\u6cd5\u6765\u5b9e\u73b0\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 200 + 5;\nconst int MAXM = 1000000 + 5;\nconst int INF = INT_MAX;\n\nqueue<int> q;\nint head[MAXN], to[MAXM], nxt[MAXM], flow[MAXM], cap[MAXM];\nint tot = 1;\nint dep[MAXN], cur[MAXN];\nint m, n, s, t;\n\nvoid addEdge(int u, int v, int c, int f) {\n    tot++;\n    to[tot] = v;\n    nxt[tot] = head[u];\n    flow[tot] = f;\n    cap[tot] = c;\n    head[u] = tot;\n}\n\nbool bfs() {\n    memset(dep, 0, sizeof(dep));\n    while(!q.empty()) q.pop();\n    q.push(s);\n    dep[s] = 1;\n    while(!q.empty()) {\n        int u = q.front(); q.pop();\n        for(int i = head[u]; i != 0; i = nxt[i]) {\n            if(cap[i] > flow[i] && dep[to[i]] == 0) {\n                dep[to[i]] = dep[u] + 1;\n                q.push(to[i]);\n                if(to[i] == t) return true;\n            }\n        }\n    }\n    return false;\n}\n\nint dinic(int u, int f) {\n    if(u == t || f == 0) {\n        return f;\n    }\n    int rest = f;\n    for(int& i = cur[u]; i != 0; i = nxt[i]) {\n        if(cap[i] > flow[i] && dep[to[i]] == dep[u] + 1) {\n            int k = dinic(to[i], min(rest, cap[i] - flow[i]));\n            if(k == 0) {\n                dep[to[i]] = 0;\n            }\n            flow[i] += k;\n            flow[i ^ 1] -= k;\n            rest -= k;\n            if(rest == 0) break;\n        }\n    }\n    return f - rest;\n}\n\nint main() {\n    scanf(\"%d%d\", &m, &n);\n    s = m + n + 1;\n    t = m + n + 2;\n    int sum = 0;\n    for(int i = 1; i <= m; i++) {\n        int v, p;\n\n        scanf(\"%d\", &v);\n        sum += v;\n        addEdge(s, i, v, 0);\n        addEdge(i, s, 0, 0);\n        while(1) {\n            scanf(\"%d\", &p);\n            if(p == 0) break;\n            addEdge(i, p + m, INF, 0);\n            addEdge(p + m, i, 0, 0);\n        }\n    }\n    for(int i = 1; i <= n; i++) {\n        int v;\n\n        scanf(\"%d\", &v);\n        addEdge(i + m, t, v, 0);\n        addEdge(t, i + m, 0, 0);\n    }\n    int maxflow = 0;\n    while(bfs()) {\n        memcpy(cur, head, sizeof(head));\n        maxflow += dinic(s, INF);\n    }\n    printf(\"%d\\n\", sum - maxflow);\n\n    return 0;\n}\n\n```\n",
        "postTime": 1643028410,
        "uid": 132435,
        "name": "\u667a\u5b50",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3410 \u62cd\u7167"
    },
    {
        "content": "[$$\\color{#0e90d2}\\huge{\\texttt{my blog}}$$](https://wxwoo.github.io/2019/03/25/solution-p3410/)\n\n******\n\n[\u539f\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P3410)\n\n\u6bcf\u5f20\u5408\u5f71\u53ef\u9009\u53ef\u4e0d\u9009\uff0c\u9009\u4e86\u5fc5\u987b\u5e26\u4e00\u4e9b\u7279\u5b9a\u4eba\uff1a~~\u660e\u663e\u7684~~\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\n\n\u6700\u5927\u6743\u95ed\u5408\u5b50\u56fe\uff1a\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u9009\u62e9\u4e00\u4e2a\u5b50\u56fe\uff0c\u6ee1\u8db3\u5b50\u56fe\u4e0a\u5982\u679c\u9009\u62e9\u4e86\u4e00\u4e2a\u70b9\u5c31\u5fc5\u987b\u9009\u62e9\u5b83\u540e\u7ee7\u7684\u6240\u6709\u70b9\u3002\u6700\u5927\u5316\u70b9\u6743\u548c\u3002\n\n\u7ecf\u5178\u7684\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u5177\u4f53\u4f7f\u7528\u6700\u5c0f\u5272\u6c42\u89e3\u3002\n\n\u6839\u636e*\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406*\uff0c\u6700\u5927\u6d41=\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u8fd9\u9898\u53ef\u4ee5\u4f7f\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u6c42\u89e3\n\n\u6211\u4eec\u5c06\u5408\u5f71\u548c\u4eba\u90fd\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5982\u4e0b\u5efa\u8fb9\uff1a\n\n> 1. \u6e90\u70b9\u5411\u5408\u5f71\u8fde\u6d41\u91cf\u4e3a\u5229\u6da6\u7684\u8fb9\n>\n> 1. \u4eba\u5411\u6c47\u70b9\u8fde\u6d41\u91cf\u4e3a\u82b1\u8d39\u7684\u8fb9\n>\n> 1. \u6bcf\u4e2a\u5408\u5f71\u5411\u9700\u8981\u7684\u4eba\u8fde\u6d41\u91cf\u4e3ainf\u7684\u8fb9\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u601d\u8003\u8fd9\u6837\u5efa\u8fb9\u7684\u6b63\u786e\u6027\n\n\u5728\u6700\u5c0f\u5272\u6a21\u578b\u4e2d\uff0c\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$inf$\u7684\u8fb9\u610f\u4e3a\u8fde\u4e00\u6761\u4e0d\u53ef\u5272\u8fb9\n\n\u90a3\u4e48\u8fd9\u4e2a\u56fe\u4e2d\u7684\u53ef\u5272\u8fb9\u5c31\u53ea\u6709\u5408\u5f71\u548c\u4eba\u4e86\n\n\u8dd1\u6700\u5927\u6d41\uff08\u6700\u5c0f\u5272\uff09\u5373\u4e3a\u8ba1\u7b97\u6700\u4f18\u65b9\u6848\u4e0b\u7684\u82b1\u8d39\n\n\u6700\u7ec8\u7b54\u6848\uff08\u6700\u5927\u51c0\u5229\u6da6\uff09\u4e3a\u5168\u90e8\u5408\u5f71\u80fd\u8d5a\u5230\u7684\u94b1\u51cf\u53bb\u6700\u5c0f\u5272\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int inf=1e9;\nconst int N=3e5+1;\nstruct edge\n{\n    int from,to,next,cap,flow;\n}e[N];\nint cnt,n,m,sour,sink,head[N],ans,q[N],l[N],p[N];\ninline int min(int i,int j)\n{\n    return i<j?i:j;\n}\ninline void add(int u,int v,int l)\n{\n    e[++cnt]=(edge){u,v,head[u],l,0};\n    head[u]=cnt;\n    e[++cnt]=(edge){v,u,head[v],0,0};\n    head[v]=cnt;\n}\ninline bool find()\n{\n    memset(l,0,sizeof(l));\n    int h=1,t=1;\n    q[1]=sour;\n    l[sour]=1;\n    while(h<=t)\n    {\n        int x=q[h++];\n        for(int i=head[x];i;i=e[i].next)\n            if(!l[e[i].to]&&e[i].cap>e[i].flow)\n            {\n                q[++t]=e[i].to;\n                l[e[i].to]=l[x]+1;\n                if(e[i].to==sink)\n                    return true;\n            }\n    }\n    return false;\n}\nint dfs(int x,int now)\n{\n    if(x==sink||!now)\n        return now;\n    int t=now,detla;\n    for(int i=head[x];i;i=e[i].next)\n    {\n        if(e[i].cap>e[i].flow&&l[e[i].to]==l[x]+1)\n        {\n            detla=dfs(e[i].to,min(t,e[i].cap-e[i].flow));\n            if(!detla)\n                l[e[i].to]=0;\n            e[i].flow+=detla;\n            e[((i-1)^1)+1].flow-=detla;\n            t-=detla;\n            if(t==0)\n                break;\n        }\n    }\n    return now-t;\n}\ninline void dinic()\n{\n    while(find())\n        ans+=dfs(sour,inf);\n}\ninline void read(int &x)\n{\n    char ch=getchar();\n    int f=1;\n    x=0;\n    while(!('0'<=ch&&ch<='9'))\n    {\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    do\n    {\n        x=(x<<3)+(x<<1)+ch-48;\n        ch=getchar();\n    }while('0'<=ch&&ch<='9');\n    x*=f;\n}\nint main()\n{\n    read(m);\n    read(n);\n    int res=0;\n    sour=0;\n    sink=m+n+1;\n    for(int i=1;i<=m;i++)\n    {\n        int val,x;\n        read(val);\n        res+=val;//\u8ba1\u7b97\u603b\u6536\u76ca\n        add(sour,i,val);\n        read(x);\n        while(x!=0)\n        {\n            add(i,x+m,inf);\n            read(x);\n        }\n    }\n    for(int i=m+1;i<=n+m;i++)\n    {\n        int val;\n        read(val);\n        add(i,sink,val);\n    }\n    dinic();\n    printf(\"%d\",res-ans);//ans\u5373\u4e3a\u603b\u82b1\u8d39\n    return 0;\n}\n```\n\n> ~~\u53cc\u500d\u7ecf\u9a8c\uff1a[P2762 \u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898](https://www.luogu.org/problemnew/show/P2762)\uff0c\u5feb\u53bb\u9a97\u7ecf\u9a8c\u554aqwq~~",
        "postTime": 1553513845,
        "uid": 116659,
        "name": "wxwoo",
        "ccfLevel": 6,
        "title": "P3410 \u62cd\u7167 \u9898\u89e3"
    },
    {
        "content": "\u63a8\u8350\u4e00\u9053\u6bd4\u8f83\u76f8\u4f3c\u7684\u9898\u76ee\uff1a[\u592a\u7a7a\u98de\u884c\u8ba1\u5212\u95ee\u9898](https://www.luogu.com.cn/problem/P2762)\u3002\n\n\u663e\u7136\uff0c\u5982\u679c\u6211\u4eec\u9009\u62e9\u4e86\u8fd9 $m$ \u4e2a\u4eba\u4e2d\u7684\u4e00\u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u4ed6\u6240\u9009\u62e9\u7684\u6240\u6709\u4eba\u90fd\u88ab\u9009\u5230\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6700\u5c0f\u5272\u3002\n\n\u5177\u4f53\u7684\uff0c\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u4eba\uff0c\u6211\u4eec\u4ece\u6e90\u70b9\u5411\u5176\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a $value$ \u7684\u8fb9\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u70b9\u5411\u4ed6\u6240\u8981\u6c42\u7684\u4eba\u8fde\u63a5\u4e00\u6761\u5bb9\u91cf\u4e3a $inf$ \u7684\u8fb9\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u6700\u5c0f\u5272\u7684\u6027\u8d28\uff0c\u6574\u5f20\u56fe\u4f1a\u88ab\u5207\u5272\u4e3a\u4e24\u90e8\u5206\uff0c\u800c\u6700\u5c0f\u5272\u4e0d\u4f1a\u5272\u6389\u6d41\u91cf\u4e3a $inf$ \u7684\u8fb9\uff0c\u5982\u679c\u6e90\u70b9\u4e0e\u8fd9\u4e2a\u4eba\u7684\u8fb9\u88ab\u5272\u6389\uff0c\u5219\u8fd9\u4ed6\u6240\u9009\u62e9\u7684\u4eba\u90fd\u4f1a\u88ab\u9009\u5165\u6c47\u70b9\u8fd9\u90e8\u5206\uff0c\u5373\u6bcf\u4e2a\u4eba\u90fd\u88ab\u9009\u62e9\uff1b\u5982\u679c\u6ca1\u6709\u88ab\u5272\u6389\u5219\u4e0d\u9700\u8981\u8003\u8651\u3002\n\n\u5bf9\u4e8e\u90a3 $n$ \u4e2a\u4eba\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5411\u6c47\u70b9\u8fde\u6d41\u91cf\u4e3a $value$ \u7684\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u73b0\u5728\u8fd9\u5f20\u56fe\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a**\u95ed\u5408\u56fe**\u3002\n\n> \u95ed\u5408\u56fe\uff0c\u6307\u67d0\u4e9b\u70b9\u6784\u6210\u7684\u96c6\u5408\u4e2d\uff0c\u4efb\u610f\u70b9\u8fde\u63a5\u7684\u4efb\u610f\u51fa\u8fb9\u6240\u6307\u5411\u7684\u70b9\uff0c\u5747\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u3002\n\n\u5728\u8fd9\u9053\u9898\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u7406\u89e3\u4e3a\u4e09\u90e8\u5206\u7ec4\u6210\u3002\n\n1. \u6e90\u70b9\u8fde\u5411\u8fd9 $m$ \u4e2a\u4eba\u7684\u8fb9\u3002\n2. \u8fd9 $m$ \u4e2a\u4eba\u8fde\u5411\u8fd9 $n$ \u4e2a\u4eba\u7684\u8fb9\u3002\n3. \u8fd9 $n$ \u4e2a\u4eba\u8fde\u5411\u6c47\u70b9\u7684\u8fb9\u3002\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7f51\u7edc\u5c31\u662f\u4e00\u5f20\u95ed\u5408\u56fe\u3002\n\n\u5728\u95ed\u5408\u56fe\u4e2d\u7684\u6700\u5927\u6743\u503c\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5373**\u6700\u5927\u6743\u503c = \u95ed\u5408\u56fe\u7684\u6b63\u6743\u503c\u4e4b\u548c - \u6700\u5c0f\u5272**\u3002\u5bf9\u4e8e\u4e0a\u8ff0\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u53c2\u8003[\u8bc1\u660e](https://www.cnblogs.com/do-while-true/p/15712351.html)\uff08\u5b9e\u5728\u7406\u89e3\u4e0d\u4e86\u5c31\u8bb0\u7ed3\u8bba\u5427\uff09\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6e90\u70b9\u8fde\u5411\u8fd9 $m$ \u4e2a\u4eba\u7684\u8fb9\u4f5c\u4e3a\u6b63\u6743\u8fb9\uff0c\u800c\u628a\u8fd9 $n$ \u4e2a\u4eba\u8fde\u5411\u6c47\u70b9\u7684\u8fb9\u4f5c\u4e3a\u8d1f\u6743\u8fb9\u770b\u5f85\uff0c\u7b54\u6848\u5373\u4e3a\u95ed\u5408\u56fe\u7684\u6700\u5927\u6743\u503c\u3002\n\n\u5bf9\u4e8e\u7edf\u8ba1\u7b54\u6848\u800c\u8a00\uff0c\u628a\u6240\u6709\u8fb9\u90fd\u6309\u7167\u539f\u6765\u7684\u6b63\u6743\u503c\u8d4b\u503c\uff0c\u8dd1\u6700\u5c0f\u5272\uff0c\u800c\u6b63\u6743\u503c\u4e4b\u548c\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u8fd9 $m$ \u4e2a\u4eba\u5f00\u7684\u4ef7\u683c\u5373\u53ef\u3002\n\nCode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint sss=0;\n\tchar chh=getchar();\n\twhile(chh<'0'||chh>'9') chh=getchar();\n\twhile(chh>='0'&&chh<='9'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t}\n\treturn sss;\n}\nint n,m,s,t;\nint depth[205];\nint head[205],to[1000005],val[1000005],nxt[1000005],tot=1;\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tval[tot]=w;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\nbool bfs(){\n\tmemset(depth,0,sizeof depth); depth[s]=1;\n\tqueue<int> q; q.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i];\n\t\t\tif(val[i]&&!depth[u]){\n\t\t\t\tdepth[u]=depth[x]+1;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nint dfs(int now,int flow){\n\tif(now==t) return flow;\n\tint out_flow=0;\n\tfor(register int i=head[now];i&&flow;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(val[i]&&depth[u]==depth[now]+1){\n\t\t\tint tmp=dfs(u,min(val[i],flow));\n\t\t\tval[i]-=tmp; val[i^1]+=tmp;\n\t\t\tflow-=tmp; out_flow+=tmp;\n\t\t}\n\t}\n\tif(out_flow==0) depth[now]=0;\n\treturn out_flow;\n}\nint Dinic(){\n\tint ret=0;\n\twhile(bfs()) ret+=dfs(s,1e9);\n\treturn ret;\n}\nint main(){\n\tm=read(),n=read(); int sum=0;\n\ts=0,t=201; int value,x;\n\tfor(register int i=1;i<=m;i++){\n\t\tvalue=read(); sum+=value;//\u8bb0\u5f55\u8fd9m\u4e2a\u4eba\u51fa\u7684\u4ef7\u683c\n\t\tadd(s,i,value); add(i,s,0);\n\t\twhile(true){\n\t\t\tx=read(); if(!x) break;\n\t\t\tadd(i,m+x,1e9); add(m+x,i,0);\n\t\t}\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tvalue=read();\n\t\tadd(i+m,t,value),add(t,i+m,0);\n\t}\n\tprintf(\"%d\",sum-Dinic());\n\treturn 0;\n}\n```",
        "postTime": 1647942963,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P3410 \u62cd\u7167 \u9898\u89e3"
    }
]