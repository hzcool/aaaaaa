[
    {
        "content": "\u6b64\u9898\u6811\u5256\u88f8\u9898\uff0c~~\u4f46\u662f\u5e76\u4e0d\u60f3\u5199\u7ebf\u6bb5\u6811~~\uff0c\u4e8e\u662f\u5c31\u5199\u4e86\u5e76\u67e5\u96c6 \uff0c\u53d1\u73b0\u597d\u50cf\u9898\u89e3\u91cc\u5e76\u6ca1\u6709\u6211\u8fd9\u79cd\u505a\u6cd5\uff0c\u5c31\u5199\u4e86\u8fd9\u7bc7\u9898\u89e3\u3002\n## \u9898\u89e3 \n\n\u6211\u7684\u505a\u6cd5\u662f\u79bb\u7ebf\u64cd\u4f5c\uff0c\u5728\u8bfb\u5165\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u88ab\u67d3\u8272\u7684\u6b21\u6570\uff0c\u4e4b\u540e\u4ece\u6839\u8282\u70b9```dfs```\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u88ab\u67d3\u8272\u4e86\uff0c\u5c31\u8ba9\u5e76\u67e5\u96c6\u6570\u7ec4\u7684\u503c\u4e3a\u81ea\u5df1\uff0c\u5426\u5219\u4e3a\u4ed6\u7684\u7236\u4eb2\u3002 \u7136\u540e\u5012\u5e8f\u679a\u4e3e\u64cd\u4f5c\uff0c\u5982\u679c\u662f\u67e5\u8be2\u64cd\u4f5c\uff0c\u76f4\u63a5```find()```\u8fd9\u4e2a\u70b9\uff0c\u5f97\u5230\u7684\u503c\u5c31\u662f\u6700\u8fd1\u7684\u88ab\u67d3\u8272\u7684\u7956\u5148\uff0c\u5982\u679c\u662f\u6807\u8bb0\u64cd\u4f5c\uff0c\u5219\u5220\u9664\u8fd9\u4e2a\u6807\u8bb0\uff0c\u5373\u8ba9**\u8fd9\u4e2a\u70b9\u88ab\u67d3\u8272\u7684\u6b21\u6570\u51cf1**\uff0c\u5982\u679c\u67d3\u8272\u6b21\u6570\u53d8\u6210\u4e860\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u70b9\u6ca1\u6709\u67d3\u8272\u4e86\uff0c\u5c06\u5e76\u67e5\u96c6\u6570\u7ec4\u7684\u503c\u6539\u4e3a\u5b83\u7684\u7236\u4eb2\u3002\n\n\n## \u4ee3\u7801\n\n\n```cpp\n#include <cstdio>\nconst int MAXN=100010;\nstruct P {\n    bool ty;\n    int id,ans;\n}p[MAXN];\nint edv[MAXN<<1],ednxt[MAXN<<1];\nint first[MAXN],cnt=0;\nvoid add(int x,int y) {\n    edv[++cnt]=y;\n    ednxt[cnt]=first[x];\n    first[x]=cnt;\n}\nint col[MAXN];\nchar inp[3];\nint ufs[MAXN];  //\u5e76\u67e5\u96c6\u6570\u7ec4\nint f[MAXN];\t//\u8bb0\u5f55\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\nvoid dfs(int x,int fa) {\n    if(col[x]) ufs[x]=x;   //\u5982\u679c\u6709\u67d3\u8272\uff0c\u5c31\u8ba9\u503c\u7b49\u4e8e\u81ea\u5df1\n    else ufs[x]=fa;        //\u5426\u5219\u7b49\u4e8e\u7236\u4eb2\n    f[x]=fa;\n    for(int i=first[x];i;i=ednxt[i]) {\n        int v=edv[i];\n        if(v==fa) continue;\n        dfs(v,x);\n    }\n}\nint find(int x) {\n    return x==ufs[x]?x:ufs[x]=find(ufs[x]);\n}\nint main() {\n    int n,q;\n    scanf(\"%d%d\",&n,&q);\n    int in1,in2;\n    for(int i=1;i<n;++i) {\n        scanf(\"%d%d\",&in1,&in2);\n        add(in1,in2);\n        add(in2,in1);\n    }\n    col[1]=1;\n    for(int i=1;i<=q;++i) {\n        scanf(\"%s%d\",inp,&p[i].id);\n        switch(inp[0]) {\n            case 'Q':{\n                p[i].ty=0;\n                break;\n            }\n            case 'C':{\n                p[i].ty=1;\n                ++col[p[i].id];\n                break;\n            }\n        }\n    }\n    dfs(1,0);\n    f[1]=1;\n    for(int i=q;i>=1;--i) {\n        if(p[i].ty) {\n            --col[p[i].id];\n            if(!col[p[i].id]) ufs[p[i].id]=f[p[i].id];  //\u8fd9\u4e2a\u70b9\u6ca1\u6709\u67d3\u8272\u4e86\n        } else {\n            p[i].ans=find(p[i].id);\n        }\n    }\n    for(int i=1;i<=q;++i) {\n        if(!p[i].ty) {\n            printf(\"%d\\n\",p[i].ans);\n        }\n    }\n    return 0;\n}\n```\n~~\u5982\u679c\u5f3a\u5236\u5728\u7ebf\u5c31GG\u4e86~~",
        "postTime": 1538206968,
        "uid": 77743,
        "name": "Sleepp",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "~~\u7b2c\u4e00\u6b21\u5199\u6811\u5256\u6ca1\u770b\u9898\u89e3A\u9898~~\uff0c\u53d1\u73b0\u9898\u89e3\u5927\u4f6c\u91cc\u7adf\u7136\u6ca1\u6709\u4e00\u4e2a\u505a\u6cd5\u4e00\u6837\u7684\uff0c\u5b9e\u5728\u662f\u592a\u6fc0\u52a8\u4e86\n\n---\n\n## \u65b9\u6cd5\n\n~~\u88f8\u6811\u5256~~\uff0c\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u6bb5\u533a\u95f4\u4e2d**\u88ab\u6807\u8bb0\u7684\u6700\u6df1\u7684\u8282\u70b9**\u5c31\u884c\u4e86\u3002\u5148\u5168\u90e8\u8d4b\u503c\u4e3a-1\uff0c\u7136\u540e\u5411\u4e0a\u4f20\u9012\u65f6\u76f4\u63a5\u53d6\u4e24\u6bb5\u4e2d\u7684\u6700\u5927\u503c\u5373\u53ef\uff08\u56e0\u4e3a\u8d8a\u6df1\u7684\u70b9dfs\u5e8f\u8d8a\u5927\uff09\n\n\u8fd8\u6709\u9700\u8981\u6ce8\u610f\u7684\u662f\u67e5\u8be2\u4e2d\u5728\u94fe\u4e0a\u5f80\u4e0a\u8df3\u65f6\u53ea\u8981\u627e\u5230\u4e86\u6709\u6807\u8bb0\u7684\u8282\u70b9\u5c31\u9700\u8981\u8f93\u51fa\uff0c\u5426\u5219\u4e0d\u662f\u6700\u6df1\u7684\u70b9\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct Edge{\n  int next,to;\n} edge[200005];\nstruct Tree{\n  int left,right,deepest;\n} tree[800005];\nint head[200005],size[200005],fa[200005],son[200005],deep[200005],top[200005],id[200005],dfsid[200005];\nint cnt=1,n,m,a,b,c,dfsord;\nchar x;\ninline int read()//\u5feb\u8bfb\n{\n  char ch=getchar();\n  int f=1,x=0;\n  while (ch<'0' || ch>'9')\n  {\n    if (ch=='-') f=-1;\n    ch=getchar();\n  }\n  while (ch>='0' && ch<='9')\n  {\n    x=x*10+ch-'0';\n    ch=getchar();\n  }\n  return f*x;\n}\ninline void add(int u,int v)//\u52a0\u8fb9\n{\n  edge[cnt].to=v;\n  edge[cnt].next=head[u];\n  head[u]=cnt++;\n}\nvoid build(int x,int l,int r)//\u5efa\u6811\n{\n  tree[x].left=l;\n  tree[x].right=r;\n  tree[x].deepest=-1;//\u6ce8\u610f\u8981\u8d4b\u503c\u4e3a-1\n  if (r-l>1)\n  {\n    build(x*2,l,(l+r)/2);\n    build(x*2+1,(l+r)/2,r);\n  }\n}\nvoid change(int x,int l,int r)\n{\n  if (l<=tree[x].left && r>=tree[x].right) tree[x].deepest=l;//\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\u6807\u8bb0\u7684\u6700\u6df1\u7684\u8282\u70b9\u5c31\u662f\u5b83\u81ea\u5df1\n  else\n  {\n    int mid=(tree[x].left+tree[x].right)/2;\n    if (l<mid) change(x*2,l,r);\n    if (r>mid) change(x*2+1,l,r);\n    tree[x].deepest=max(tree[x*2].deepest,tree[x*2+1].deepest);//\u53d6\u4e24\u6bb5\u4e0a\u6700\u6df1\u7684\u8282\u70b9\n  }\n}\nint query(int x,int l,int r)\n{\n  if (l<=tree[x].left && r>=tree[x].right) return tree[x].deepest;\n  else\n  {\n    int mid=(tree[x].left+tree[x].right)/2,ans=-1;//\u540c\u6837\u6ce8\u610f\u521d\u503c\n    if (l<mid) ans=max(ans,query(x*2,l,r));\n    if (r>mid) ans=max(ans,query(x*2+1,l,r));\n    return ans;\n  }\n}\nvoid dfs1(int x,int f,int dep)\n{\n  deep[x]=dep;\n  fa[x]=f;\n  size[x]=1;\n  int mx=-1;\n  for (int i=head[x];i;i=edge[i].next)\n  {\n    int y=edge[i].to;\n    if (y==f) continue;\n    dfs1(y,x,dep+1);\n    size[x]+=size[y];\n    if (size[y]>mx)\n    {\n      mx=size[y];\n      son[x]=y;\n    }\n  }\n}\nvoid dfs2(int x,int topf)\n{\n  top[x]=topf;\n  id[x]=++dfsord;\n  dfsid[dfsord]=x;//\u56e0\u4e3a\u662f\u8f93\u51fa\u8282\u70b9\u539f\u5e8f\u53f7\uff0c\u8fd9\u91cc\u5f97\u5230dfs\u5e8f\u5bf9\u5e94\u7684\u8282\u70b9\u5e8f\u53f7\n  if (!son[x]) return;\n  dfs2(son[x],topf);\n  for (int i=head[x];i;i=edge[i].next)\n  {\n    int y=edge[i].to;\n    if (y==fa[x] || y==son[x]) continue;\n    dfs2(y,y);\n  }\n}\ninline void uprange(int u)\n{\n  change(1,id[u],id[u]+1);\n}\ninline int qrange(int u,int v)\n{\n  int ans=-1;\n  while (top[u]!=top[v])\n  {\n    if (deep[id[u]]<deep[id[v]]) swap(u,v);\n    ans=query(1,id[top[u]],id[u]+1);\n    if (ans!=-1) return dfsid[ans];//\u53ea\u8981\u627e\u5230\u5c31\u8fd4\u56de\n    u=fa[top[u]];\n  }\n  if (deep[u]>deep[v]) swap(u,v);\n  ans=query(1,id[u],id[v]+1);\n  return dfsid[ans];\n}\nint main()\n{\n  n=read();m=read();\n  for (int i=1;i<n;i++)\n  {\n    a=read();b=read();\n    add(a,b);\n    add(b,a);\n  }\n  dfs1(1,0,1);\n  dfs2(1,1);\n  build(1,1,n+1);\n  change(1,1,2);//\u6ce8\u610f\u5148\u5c06\u6839\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\n  for (int i=1;i<=m;i++)\n  {\n    cin>>x;\n    a=read();\n    if (x=='C') uprange(a);\n    else printf(\"%d\\n\",qrange(a,1));\n  }\n  return 0;\n}\n\n```",
        "postTime": 1524570476,
        "uid": 29696,
        "name": "Llf0703",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u662f\u53ef\u4ee5\u6807\u8bb0\u6c38\u4e45\u5316\u6765\u505a\u7684\n\n\u6211\u4eec\u77e5\u9053dfs\u5e8f\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u67d0\u8282\u70b9\u53ca\u5176\u5b50\u6811\u8282\u70b9\u5728\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u5185\n\n\u90a3\u4e48\u6bcf\u6b21\u6211\u4eec\u4fee\u6539\u65f6\uff0c\u8fde\u5e26\u5b50\u6811\u8282\u70b9\u4e00\u5e76\u4e0b\u653e\u6807\u8bb0\n\n\u5982\u679c\u5f53\u524d\u5b50\u6811\u8282\u70b9\u6709\u4e86\u6807\u8bb0\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u65e7\u6807\u8bb0\u7684\u6df1\u5ea6\u4e0e\u5f53\u524d\u6807\u8bb0\u7684\u6df1\u5ea6\uff0c\u4fdd\u7559\u8f83\u6df1\u7684\u90a3\u4e00\u4e2a\n\n\u67e5\u8be2\u65f6\u5355\u70b9\u67e5\u8be2\uff0c\u5c06\u8def\u8fc7\u7684\u6807\u8bb0\u8ba1\u5165\u8d21\u732e\u5373\u53ef\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nconst int MAXN=1<<17;\n\nint n,m,x,y,np,cnt;\nint siz[MAXN],id[MAXN],tp[MAXN];\nint mrk[MAXN<<1],h[MAXN];\nchar ch;\nstruct rpg{\n\tint li,nx;\n}a[MAXN<<1];\n\nvoid add(int ls,int nx){\n\ta[++np]=(rpg){h[ls],nx};\n\th[ls]=np;\n}\n\nvoid init(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;++i){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}return;\n}\n\nvoid dfs(int x,int f,int deep){\n\tid[x]=++cnt;\n\ttp[x]=deep;\n\tsiz[x]=1;\n\tfor(int i=h[x];i;i=a[i].li){\n\t\tif(a[i].nx!=f){\n\t\t\tdfs(a[i].nx,x,deep+1);\n\t\t\tsiz[x]+=siz[a[i].nx];\n\t\t}\n\t}return;\n}\n\nvoid cmrk(int k,int l,int r,int le,int ri,int x){\n\tif(le<=l&&r<=ri){\n\t\tif(tp[mrk[k]]<tp[x]) mrk[k]=x;\n\t\treturn;\n\t}int i=k<<1,mid=l+r>>1;\n\tif(le<=mid) cmrk(i,l,mid,le,ri,x);\n\tif(mid<ri) cmrk(i|1,mid+1,r,le,ri,x);\n}\n\nint ask(int k,int l,int r,int p,int x){\n\tif(l==r) return mrk[k]?mrk[k]:x;\n\tint i=k<<1,mid=l+r>>1;\n\tif(mrk[k]) x=mrk[k];\n\tif(p<=mid) return ask(i,l,mid,p,x);\n\telse return ask(i|1,mid+1,r,p,x);\n}\n\nvoid solve(){\n\tmrk[1]=1;\n\twhile(m--){\n\t\tscanf(\"\\n%c%d\",&ch,&x);\n\t\tif(ch=='C') cmrk(1,1,n,id[x],id[x]+siz[x]-1,x);\n\t\telse printf(\"%d\\n\",ask(1,1,n,id[x],1));\n\t}return;\n}\n\nint main(){\n\tinit();\n\tdfs(1,0,1);\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1522712629,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4d\u5927\u4f6c\u53c8\u662f**\u6811\u5256\u52a0\u7ebf\u6bb5\u6811**\u6216\u8005**\u6c38\u4e45\u5316**\u7b49\u7b49\u4e00\u7cfb\u5217\u9ad8\u7ea7\u64cd\u4f5c\uff0c\u672c\u849f\u84bb\u8868\u793a\u592a\u5f3a\u4e86\u3002\n\n\u4f46\u662f\u672c\u849f\u84bb\u611f\u89c9\u81ea\u5df1\u601d\u8def\u6709\u70b9\u5947\u7279\u5e76\u4e14\u7ffb\u4e86\u7ffb\u7b2c\u4e00\u9875\u7684\u9898\u89e3\u53d1\u73b0\u6ca1\u6709\u5927\u4f6c\u548c\u672c\u849f\u84bb\u7684\u601d\u8def\u4e00\u6837\u6240\u4ee5\u5c31\u60f3\u5199\u51fa\u6765\u3002\n\n\u672c\u849f\u84bb\u7684\u57fa\u672c\u601d\u8def\u5c31\u662f**\u641c\u7d22**\n\n\u9996\u5148\u6211\u4eec\u5148\u5f00\u4e00\u4e2a\u6570\u7ec4father[i]\u8868\u793ai\u5230\u6700\u8fd1\u67d3\u8272\u7684\u7236\u4eb2\u3002\u7136\u540e\u5c31\u5f00\u59cb\u6211\u4eec\u7ef4\u62a4\u6bcf\u4e00\u6b21\u6d82\u8272\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u6b21\u6d82\u8272\u70b9\u79f0\u4f5c~~\u7236\u4eb2~~\uff0c\u4ece\u7236\u4eb2\u5f00\u59cb\u627e\u4ed6\u7684\u513f\u5b50\u4eec\u548c\u5b59\u5b50\u4eec\uff08\u4e0b\u6587\u6211\u4eec\u7528**\u5b83**\u6765\u4ee3\u66ff\uff09\uff0c\u5982\u679c**\u5b83**\u6ca1\u6709\u88ab\u67d3\u8272\u7684\u8bdd\u90a3\u4e48**\u8fd9\u4e2a\u70b9\u6240\u8ddd\u79bb\u6700\u8fd1\u7684\u67d3\u8272\u7684\u7236\u4eb2**\u5c31\u4e00\u5b9a\u662f\u6211\u4eec**\u5f53\u524d\u67d3\u8272\u7684\u70b9**\u5566...\n\n## **\u90a3\u4e48\u4e3a\u4ec0\u4e48\u5982\u679c\u8fd9\u4e2a\u70b9\uff08\u5b83\uff09\u88ab\u67d3\u8272\u4e86\u5c31\u4e0d\u80fd\u8981\u4e86\u5462\uff1f**\n\n\u5982\u679c\u6709\u4e00\u4e2a\u70b9**\u5b83**\u4e4b\u524d\u5c31\u5df2\u7ecf\u88ab\u67d3\u8272\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5df2\u7ecf\u628a\u5b83\u7684\u513f\u5b50\u4eec\u66f4\u65b0\u6210**\u5b83\u672c\u8eab**\u4e86\uff0c\u76f8\u5bf9\u4e8e**\u5b83**\u7684\u7236\u4eb2\u6765\u8bf4\uff0c**\u5b83**\u7684\u513f\u5b50\u4eec\u663e\u7136\u662f\u8ddd\u79bb**\u5b83**\u672c\u8eab\u66f4\u8fd1\uff0c\u56e0\u4e3a**\u5b83**\u672c\u8eab\u4e5f\u65e9\u5df2\u5148\u4e00\u6b65\u76f8\u5bf9\u4e8e\u7236\u4eb2\u6807\u8bb0\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\u6211\u4eec\u53ea\u9700\u8981O\uff081\uff09\u6765\u56de\u7b54\u5c31\u597d\u5566\u3002\n\n _PS\uff1a\u672c\u6765\u60f3\u63d2\u4e2a\u56fe\u7247\u7684\uff0c\u53ef\u662f\u672c\u849f\u84bb\u592a\u83dc\u4e86\u4ee5\u81f3\u4e8e\u4e0d\u4f1a\uff0c\u6709\u6ca1\u6709\u4f1a\u7684\u5927\u4f6c\u6559\u4e00\u4e0b...._ \n \n [\u6700\u540e\u5f31\u5f31\u7684\u63a8\u8350\u4e00\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2](https://www.luogu.com.cn/blog/niexiaoyang12138/#)\n \n \u554a\u5440\u5fd8\u4e86\u4ee3\u7801\u4e86\n ```cpp\n#include<iostream>\n#include<cstdio>\n#define N 100001\nusing namespace std;\nint n,m,q,sum,head,tail;\nint first[N],father[N],dl[N*5];\nbool v[N];\nstruct E\n{\n\tint next;\n\tint to;\n} e[N];\nvoid add(int x,int y)\n{\n\te[++sum].next=first[x];\n\te[sum].to=y;\n\tfirst[x]=sum;\n}\nvoid in(int &x)\n{\n\tx=0;\n\tchar ee=getchar();\n\twhile(ee<'0'||ee>'9') ee=getchar();\n\twhile(ee>='0'&&ee<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+ee-'0';\n\t\tee=getchar();\n\t}\n}\nvoid work(int x)\n{\n\tv[x]=1;\n\tfather[x]=x;\n\thead=0;\n\ttail=0;\n\tdl[++tail]=x;\n\twhile(head<tail)\n\t{\n\t\tint now=dl[++head];\n\t\tfor(int i=first[now]; i; i=e[i].next)\n\t\t{\n\t\t\tint u=e[i].to;\n\t\t\tif(v[u]) continue;\n\t\t\tdl[++tail]=u;\n\t\t\tfather[u]=x;\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1; i<n; i++)\n\t{\n\t\tint ui,vi;\n\t\tscanf(\"%d%d\",&ui,&vi);\n\t\tadd(ui,vi);\n\t}\n\tv[1]=1;\n\tfor(int i=1; i<=n; i++) father[i]=1;\n\tfor(int i=1; i<=q; i++)\n\t{\n\t\tchar oper;\n\t\tint num;\n\t\tcin>>oper;\n\t\tin(num);\n\t\tif(oper=='C'&&!v[num]) work(num);\n\t\telse if(oper=='Q') printf(\"%d\\n\",father[num]);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1575795042,
        "uid": 232191,
        "name": "NXYorz",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "### [P4092 [HEOI2016/TJOI2016]\u6811](https://www.luogu.org/problemnew/show/P4092)\n\n~~\uff08\u9898\u89e3\u5c45\u7136\u6ca1\u6709\u548c\u6211\u65b9\u6cd5\u4e00\u6837\u7684\uff09~~\n\n\u8fd9\u9898\u4e0d\u7528\u5efa\u6811\n\nfa[i]\u8868\u793ai\u7684\u7236\u8282\u70b9\n\n\u636e\u8bf4\u8fd9\u6837\u66b4\u529b\u5c31\u53ef\u4ee5\u4e86\n\n\n## \u4f46\u662f\uff01\n\n**\u6709\u4f18\u5316\u7684\u65b9\u6cd5**\uff01\n\n## \u65f6\u95f4\u6233\n\nnearfa[i] \u8868\u793a \u70b9i \u6700\u8fd1\u7684\u4e00\u4e2a\u6253\u4e86\u6807\u8bb0\u7684\u7956\u5148\uff0c\u9ed8\u8ba41\n\nt[i] \u8868\u793a **\u8fd9\u4e2a\u70b9\u6700\u540e\u4e00\u6b21\u88ab\u67e5\u8be2\u662f\u5728\u7b2c\u51e0\u6b21\u6807\u8bb0\u4e4b\u540e**\uff0c\u9ed8\u8ba41\n\ncnt  \u8868\u793a **\u6267\u884c\u4e86\u51e0\u6b21\u6807\u8bb0\u64cd\u4f5c** \uff0c~~\u4e3a\u4e86\u65b9\u4fbf~~\uff0ccnt\u4ece1\u5f00\u59cb\n\n---\n\u6267\u884c\u6807\u8bb0\u64cd\u4f5c\u65f6\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\uff0c\u5c31\u4e0d\u7528\u518d\u6807\u8bb0\u4e86\u3002\n\n\u5426\u5219\u6807\u8bb0\uff0ccnt++;\n\n### find(u) \u51fd\u6570\uff1a\uff08\u9012\u5f52\u5b9e\u73b0\uff09\n\n\u5982\u679c\u70b9u\u88ab\u6807\u8bb0\uff0c\u8fd4\u56deu ~~\uff08\u5e9f\u8bdd\uff09~~\uff1b\n\n\u5982\u679ct[u]==cnt \uff08\u5728\u6700\u540e\u4e00\u6b21\u6807\u8bb0\u540e\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff09\uff0c\u76f4\u63a5\u8fd4\u56denearfa[u] \uff1b\n\n\u5426\u5219, \u5c06 t[u] \u8bbe\u4e3acnt\uff0c\u540c\u65f6\u5c06 nearfa[u] \u8bbe\u4e3a find(fa[u]) , \u8fd4\u56de ;  (\u9012\u5f52\u5b9e\u73b0)\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n\nint fa[100050];\nbool flag[100050];\nint t[100050],nearfa[100050],cnt=1;\n\nint find(int u)\n{\n\tif(flag[u])return u;//\u5982\u679c\u70b9u\u88ab\u6807\u8bb0\uff0c\u8fd4\u56deu\n\tif(t[u]==cnt)return nearfa[u];//\u5728\u6700\u540e\u4e00\u6b21\u6807\u8bb0\u540e\u5df2\u7ecf\u8bbf\u95ee\u8fc7\n\tt[u]=cnt;//\u8868\u793a\u5728\u6b64\u6b21\u6807\u8bb0\u540e\u5df2\u88ab\u8bbf\u95ee\n\treturn nearfa[u]=find(fa[u]);//\u7ee7\u7eed\u9012\u5f52\n}\n\nint main(void)\n{\n\tflag[1]=1; fa[1]=1;\n\tint n,q;\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tfa[v]=u;\n\t}\n\tfor(int i=1;i<=n;i++)t[i]=nearfa[i]=1;//\u521d\u59cb\u5316\n\tfor(int i=0;i<q;i++)\n\t{\n\t\tchar oper;\n\t\tint u;\n\t\tscanf(\"\\n%c %d\",&oper,&u);\n\t\tif(oper=='C')\n\t\t\t{if(!flag[u])flag[u]=1,cnt++;}//\u5982\u679c\u6ca1\u88ab\u6807\u8bb0\uff0c\u6807\u8bb0\n\t\telse printf(\"%d\\n\",find(u));\n\t}\n\treturn 0;\n}\n```\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a(\u6700\u574f) $O(n^2)$\n\n\u6570\u636e\u5f3a\u4e00\u70b9\u53ef\u4ee5\u5361\u6389",
        "postTime": 1533350284,
        "uid": 73687,
        "name": "He_Ren",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "**\u8fd9\u9053\u9898\u6253\u4e86\u6811\u94fe\u5256\u5206\u7684\u6807\u7b7e,\u7136\u540e\u4e00\u76f4\u6ca1\u6709\u4eba\u5199\u6811\u94fe\u5256\u5206\u7684\u9898\u89e3,\u672c\u849f\u84bb\u5c31\u5148\u732e\u4e11\u4e00\u4e0b,\u6743\u4e14\u5f53\u4f5c\u629b\u7816\u5f15\u7389.**\n\n**\u8fd9\u9053\u9898\u6709\u4e24\u79cd\u64cd\u4f5c,\u4e00\u79cd\u662f\u7ed9\u67d0\u4e2a\u70b9\u6253\u4e0a\u6807\u8bb0,\u53e6\u4e00\u79cd\u662f\u67e5\u8be2\u67d0\u4e2a\u8282\u70b9\u6700\u8fd1\u7684\u6253\u6807\u8bb0\u7684\u7956\u5148,\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u975e\u5e38\u597d\u529e,\u7b2c\u4e8c\u4e2a\u7684\u8bdd,\u7a0d\u5fae\u60f3\u4e00\u4e0b,\u7956\u5148\u4e00\u5b9a\u5728\u8fd9\u4e2a\u70b9\u5230\u6839(\u4e5f\u5c31\u662f1)\u7684\u8def\u5f84\u4e0a,\u7136\u540e\u8fd9\u6761\u8def\u5f84\u662f\u7531\u82e5\u5e72\u6761\u5b8c\u6574\u6216\u4e0d\u5b8c\u6574\u7684\u94fe\u7ec4\u6210\u7684.**\n\n**\u6211\u4eec\u628a\u6bcf\u4e2a\u6253\u6807\u8bb0\u7684\u70b9\u8bb0\u503c\u4e3a\u4e00,\u6bcf\u6b21\u8df3\u6574\u6761\u94fe\u7684\u65f6\u5019\u8ba1\u7b97\u533a\u95f4\u548c,\u5982\u679c\u533a\u95f4\u548c\u5927\u4e8e\u96f6,\u8bf4\u660e\u8fd9\u6761\u94fe\u4e0a\u81f3\u5c11\u6709\u4e00\u4e2a\u88ab\u6807\u8bb0\u7684\u70b9.\u8fd9\u6bb5\u533a\u95f4\u5728\u6811\u5256\u5e8f\u91cc\u4e00\u5b9a\u662f\u8fde\u7eed\u7684,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u6bb5\u533a\u95f4\u8fdb\u884c\u4e8c\u5206,\u6bcf\u6b21\u9700\u8981\u67e5\u8be2\u533a\u95f4\u548c,\u590d\u6742\u5ea6\u5927\u81f4\u662fO(nlognlogn)\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f18\u5316\u7684,\u4f46\u90a3\u79cd\u7ebf\u6bb5\u6811\u6211\u592a\u83dc\u4e86\u4e0d\u4f1a\u5199,\u6240\u4ee5\u5c31\u4e0d\u8d34\u4e86,\u53cd\u6b63\u6211\u662f\u6765\u629b\u7816\u5f15\u7389\u7684,\u671f\u5f85\u5927\u4f6c\u4eec\u7ed9\u51fa\u66f4\u52a0\u9ad8\u5999\u7684\u6811\u94fe\u5256\u5206\u505a\u6cd5.**\n\n**\u5bf9\u4e86,\u4e4b\u524d\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c,\u76f4\u63a5\u7ebf\u6bb5\u6811\u70b9\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86.**\n\n**\u4ee3\u7801\u5982\u4e0b**\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define lson root<<1\n#define rson root<<1|1\nusing namespace std;\n\nstruct node\n{\n    int sum,l,r;\n}tr[400040];\nint deep[100010],fa[100010],size[100010],son[100010],w[100010],iid[100010],id[100010],c[100010],top[100010],cnt;\nvector<int> g[100010];\n\nvoid push_up(int root)\n{\n    tr[root].sum=tr[lson].sum+tr[rson].sum;\n}\n\nvoid build(int root,int l,int r)\n{\n    if(l==r)\n    {\n        tr[root].l=l;\n        tr[root].r=r;\n        tr[root].sum=w[l];\n        return ;\n    }\n    tr[root].l=l;\n    tr[root].r=r;\n    int mid=(l+r)>>1;\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    push_up(root);\n}\n\n\nvoid update(int root,int x,int val)\n{\n    if(x==tr[root].l&&x==tr[root].r)\n    {\n        tr[root].sum=val;\n        return ;\n    }\n    int mid=(tr[root].l+tr[root].r)>>1;\n    if(x<=mid)\n    {\n        update(lson,x,val);\n    }\n    else\n    {\n        update(rson,x,val);\n    }\n    push_up(root);\n}\n\nint query(int root,int l,int r)\n{\n    if(l==tr[root].l&&tr[root].r==r)\n    {\n        return tr[root].sum;\n    }\n    int mid=(tr[root].l+tr[root].r)>>1;\n    if(l>mid)\n    {\n        return query(rson,l,r);\n    }\n    else\n    {\n        if(r<=mid)\n        {\n            return query(lson,l,r);\n        }\n    }\n    return query(lson,l,mid)+query(rson,mid+1,r);\n}\n\nvoid dfs1(int now,int f,int dep)\n{\n    deep[now]=dep;\n    fa[now]=f;\n    size[now]=1;\n    int maxson=-1;\n    for(int i=0;i<g[now].size();i++)\n    {\n        if(g[now][i]==f)\n        {\n            continue;\n        }\n        dfs1(g[now][i],now,dep+1);\n        size[now]+=size[g[now][i]];\n        if(maxson<size[g[now][i]])\n        {\n            maxson=size[g[now][i]];\n            son[now]=g[now][i];\n        }\n    }\n}\n\nvoid dfs2(int now,int topf)\n{\n    id[now]=++cnt;\n    iid[cnt]=now;\n    w[cnt]=c[now];\n    top[now]=topf;\n    if(!son[now])\n    {\n        return;\n    }\n    dfs2(son[now],topf);\n    for(int i=0;i<g[now].size();i++)\n    {\n        if(g[now][i]==son[now]||g[now][i]==fa[now])\n        {\n            continue;\n        }\n        dfs2(g[now][i],g[now][i]);\n    }\n}\n\nint check(int l,int r)\n{\n    if(l==r)\n    {\n        return l;\n    }\n    int mid=(l+r)>>1;\n    int tmp=query(1,mid+1,r);\n    if(tmp)\n    {\n        return check(mid+1,r);\n    }\n    else\n    {\n        return check(l,mid);\n    }\n}\n\nint path_query(int x,int y)\n{\n    while(top[x]!=top[y])\n    {\n        if(deep[top[x]]<deep[top[y]])\n        {\n            swap(x,y);\n        }\n        int tmp=query(1,id[top[x]],id[x]);\n        if(!tmp)\n        {\n            x=fa[top[x]];\n        }\n        else\n        {\n            return check(id[top[x]],id[x]);\n        }\n    }\n    if(deep[x]>deep[y])\n    {\n        swap(x,y);\n    }\n    return check(id[x],id[y]);\n}\n\nint main()\n{\n    int n,m,vv;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n-1;i++)\n    {\n        int from,to;\n        scanf(\"%d%d\",&from,&to);\n        g[from].push_back(to);\n        g[to].push_back(from);\n    }\n    c[1]=1;\n    dfs1(1,0,1);\n    dfs2(1,1);\n    build(1,1,n);\n    char c;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"\\n%c %d\",&c,&vv);\n        if(c=='C')\n        {\n            update(1,id[vv],1);\n        }\n        if(c=='Q')\n        {\n            printf(\"%d\\n\",iid[path_query(1,vv)]);\n        }\n    }\n}\n```",
        "postTime": 1522134971,
        "uid": 48740,
        "name": "Styx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "### [HEOI2016/TJOI2016]\u6811\uff08LCT\uff09\r\n\r\n\u8003\u8651\u8be2\u95ee\u64cd\u4f5c\uff0c\u4e00\u79cd\u6734\u7d20\u7684\u60f3\u6cd5\u662f\uff0c\u628a\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u626f\u51fa\u6765\uff0c\u7136\u540e\u4e8c\u5206/\u500d\u589e \u8ba1\u7b97\u3002\r\n\r\n\u4e8b\u5b9e\u4e0a\u201c\u626f\u51fa\u5230\u6839\u7684\u8def\u5f84\u201d\u8fd9\u4e00\u6b65\u6070\u5bf9\u5e94\u6709\u6839\u6811LCT\u7684$\\text{access}$\u64cd\u4f5c\uff0c\u90a3\u4e48\u500d\u589e\u8ba1\u7b97\u4e5f\u4e0d\u9700\u8981\u4e86\uff0c\u5728splay\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\r\n\r\n\u6ce8\u610f\u4fee\u6539\u65f6\u8981$\\text{access}$,\u518d$\\text{splay}$\u5230\u6839\uff0c\u518d\u4fee\u6539\uff0c\u5426\u5219\u7956\u5148\u7684\u4fe1\u606f\u4f1a\u9519\u6389\uff08\u4e8b\u5b9e\u4e0a\u7edd\u5927\u90e8\u5206LCT\u7684\u4fee\u6539\u90fd\u8981\u5982\u6b64\uff09\r\n\r\n\u65f6\u95f4\u590d\u6742\u5ea6$\\Theta(m\\log n)$,\u6709\u6839\u6811LCT\u5e38\u6570\u5176\u5b9e\u4e0d\u5927\uff0cO2\u4e4b\u540e\u6700\u957f\u70b9\u4e0d\u5230100ms\u3002\r\n\r\n```cpp\r\n#define MAXN 200011\r\nstruct LCT\r\n{\r\n    int fa[MAXN],son[MAXN][2],val[MAXN],f[MAXN];\r\n    bool not_root(int x){return son[fa[x]][0]==x||son[fa[x]][1]==x;}\r\n    void pushup(int x){f[x]=f[son[x][0]]|f[son[x][1]]|val[x];}\r\n    void rotate(int x)\r\n    {\r\n        int y=fa[x],z=fa[y],k=(son[y][1]==x);\r\n        if(not_root(y))son[z][son[z][1]==y]=x;\r\n        fa[x]=z;\r\n        son[y][k]=son[x][!k],fa[son[x][!k]]=y;\r\n        son[x][!k]=y,fa[y]=x;\r\n        pushup(y),pushup(x);\r\n    }\r\n    void splay(int x)\r\n    {\r\n        while(not_root(x))\r\n        {\r\n            int y=fa[x];\r\n            if(not_root(y))rotate((son[y][1]==x)==(son[fa[y]][1]==y)?y:x);\r\n            rotate(x);\r\n        }\r\n    }\r\n    void access(int x)\r\n    {\r\n        for(int y=0;x;y=x,x=fa[x])\r\n            splay(x),son[x][1]=y;\r\n    }\r\n    int Qtag(int x)//splay\u4e0a\u4e8c\u5206\r\n    {\r\n        if(son[x][1]&&f[son[x][1]])return Qtag(son[x][1]);\r\n        if(val[x])return x;\r\n        return Qtag(son[x][0]);\r\n    }\r\n    int Query(int x){access(x),splay(x);return Qtag(x);}//\u8be2\u95ee\u7956\u5148\u4e2d\u6700\u6df1\u7684\u6709\u8272\u70b9\r\n    void modify(int x){access(x),splay(x),val[x]=1,pushup(x);}//\u67d3\u8272\u64cd\u4f5c\r\n}lct;\r\n```",
        "postTime": 1596678789,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "[HEOI2016/TJOI2016]\u6811\uff08LCT\uff09"
    },
    {
        "content": "\u5199\u6210\u5b8c\u6574\u7684\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f18\u52bf\uff0cdfs\u5e8f\u4fbf\u8db3\u591f\u7ef4\u62a4\u3002\n\n\u5229\u7528\u5b50\u6811dfs\u5e8f\u8fde\u7eed\u6027\uff0c\u5957\u7ebf\u6bb5\u6811\u6a21\u677f\u5373\u53ef\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u8be2\u95ee\u5373\u5355\u70b9\u67e5\u8be2\uff08\u6b64\u65f6\uff0c\u67e5\u8be2\u533a\u95f4\u8bbe\u4e3adfn[x]~dfn[x]\u5373\u53ef\uff09\n\n\u800c\u4e3a\u4e00\u4e2a\u8282\u70b9\u6253\u6807\u8bb0\u65f6\uff0cupdate dfn[x]~(dfn[x]+size[x]-1)\n\nupdate\u65f6 \u6bd4\u8f83\u4e4b\u524d\u50a8\u5b58\u7684\u6700\u8fd1\u7956\u5148\u4e0e\u5c06\u8981\u66f4\u65b0\u7684\u70b9\u7684\u6df1\u5ea6\uff0c\u4fdd\u7559\u66f4\u6df1\u7684\u8282\u70b9\u3002\n\nquery\u65f6 \u7531\u4e8e\u4ecemid\u65ad\u5f00\u7684\u4e24\u4e2a\u533a\u95f4(\u56e0\u4e3a\u672c\u9898\u8981\u6c42\u5355\u70b9\u67e5\u8be2)\u5fc5\u6709\u4e00\u4e2areturn 0 \u6545\u53ef\u4ee5return a+b;\n\n\u8be6\u89c1\u4ee3\u7801\uff0c\u4e00\u4efd~~\u5341\u5206\u5de5\u6574~~\u6ce5\u53e4\u4e0d\u5316\u7684\u7ebf\u6bb5\u6811\u6a21\u677f\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,q,cnt,ccnt;\nint head[400005];\nint lazy[400005];\nint tr[400005];\nint dfn[400005];\nint size[400005];\nint dep[400005];\nchar s;\nstruct data{\n\tint to,next;\n}e[400005];\ninline void insert(int u,int v)\n{\n\te[++cnt].to=v;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n}\nvoid build(int root,int left,int right)\n{\n\tif(left==right){tr[root]=1;return ;}\n\tint mid=(left+right)>>1;\n\tbuild(root<<1,left,mid);\n\tbuild(root<<1|1,mid+1,right);\n\ttr[root]=1;\n\treturn ;\n}\nvoid dfsdfn(int x)//\u5904\u7406dfs\u5e8f\n{\n\tdfn[x]=++ccnt;\n\tsize[x]=1;\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tdep[v]=dep[x]+1;\n\t\tdfsdfn(v);\n\t\tsize[x]+=size[v];\n\t}\n\treturn ;\n}\nvoid push(int root,int left,int right)\n{\n\tif(dep[tr[root<<1]]<=dep[lazy[root]])\n    \t\ttr[root<<1]=lazy[root],lazy[root<<1]=lazy[root];\n\tif(dep[tr[root<<1|1]]<=dep[lazy[root]])\n    \t\ttr[root<<1|1]=lazy[root],lazy[root<<1|1]=lazy[root];\n\treturn;\n}\nvoid update(int root,int left,int right,int l,int r,int k)\n{\n\tif(left>=l&&right<=r)\n\t{\n\t\tif(dep[tr[root]]<=dep[k])\n\t\t{\n\t\t\ttr[root]=k;\n\t\t\tlazy[root]=k;\n\t\t}\n\t\treturn ;\n\t}\n\tif(left>r||right<l)return;\n\tint mid=(left+right)>>1;\n\tif(lazy[root])push(root,left,right);\n\tupdate(root<<1,left,mid,l,r,k);\n\tupdate(root<<1|1,mid+1,right,l,r,k);\n\treturn ;\t\n}\nint query(int root,int left,int right,int l,int r)\n{\n\tif(left>=l&&right<=r)\n\t{\n\t\treturn tr[root];\n\t}\n\tif(left>r||right<l)return 0;\n\tint mid=(left+right)>>1;\n\tif(lazy[root])push(root,left,right);\n\tint a=query(root<<1,left,mid,l,r);\n\tint b=query(root<<1|1,mid+1,right,l,r);\n\treturn a+b;\n}\nint main()\n{\n\tn=read();\n\tq=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint a=read();\n\t\tint b=read();\n\t\tinsert(a,b);\n\t}\n\tdep[1]=1;\n\tdfsdfn(1);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%s\",&s);\n\t\tif(s=='Q')\n\t\t{\n\t\t\tint x=read();\n\t\t\tprintf(\"%d\\n\",query(1,1,n,dfn[x],dfn[x]));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x=read();\n\t\t\tupdate(1,1,n,dfn[x],dfn[x]+size[x]-1,x);\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1573456793,
        "uid": 52325,
        "name": "wenjie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u600e\u4e48\u90fd\u662f\u5e76\u67e5\u96c6\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u5565\u7684\u9898\u89e3\uff0c\u6211\u5927\u6811\u5256\u8868\u793a\u4e0d\u670d\uff01\n\n~~\u8fd9\u4e0d\u5c31\u662f\u6811\u5256\u6a21\u677f\u4e48~~\n\n\u601d\u8def\uff1a\n\n\u5bf9\u4e8e\u6bcf\u6b21\u6253\u6807\u8bb0\u7684\u70b9\uff0c\u66f4\u65b0\u5176\u5b50\u6811\u7684\u7b54\u6848\u3002\n\n\u66f4\u65b0\u65f6\u53d6\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u6700\u4e3a\u7b54\u6848\u3002\n\n~~\u4e0d\u5c31\u662f\u7ef4\u62a4\u533a\u95f4\u6700\u503c\u561b\u3002~~\n\n~~\u7136\u540e\u62ff\u6811\u5256\u6a21\u677f\u4e00\u5957\u5c31\u8fc7\u4e86~~\n\n\u4ee3\u7801\uff1a~~\u77e5\u9053\u4f60\u4eec\u53ea\u770b\u8fd9\u4e2a~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int N = 100000 + 10;\n\ninline int read()\n{\n\tint res=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')res=(res<<3)+(res<<1)+(ch^48),ch=getchar();\n\treturn res;\n}\n\nstruct edge{\n\tint next,to;\n}r[N<<1];\n\nint head[N],tot;\n\ninline void add(int u,int v)\n{\n\tr[++tot]=(edge){head[u],v};\n\thead[u]=tot;\n\tr[++tot]=(edge){head[v],u};\n\thead[v]=tot;\n}\n\nint dep[N],size[N],fa[N],son[N],top[N],id[N],cnt;\n\nvoid dfs1(int u,int father)\n{\n\tfa[u]=father,dep[u]=dep[father]+1,size[u]=1;\n\tfor(int e=head[u];e;e=r[e].next)\n\t{\n\t\tint v=r[e].to;\n\t\tif(v==father)continue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int topf)\n{\n\ttop[u]=topf;\n\tid[u]=++cnt;\n\tif(!son[u])\n\t\treturn ;\n\tdfs2(son[u],topf);\n\tfor(int e=head[u];e;e=r[e].next)\n\t{\n\t\tint v=r[e].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint tree[N<<2],lazy[N<<2];\n#define lson pos<<1\n#define rson pos<<1|1\nvoid pushdown(int pos)\n{\n\tif(!lazy[pos])return ;\n\tint k=lazy[pos];\n\tlazy[pos]=0;\n\ttree[lson]=dep[k]>dep[tree[lson]]?k:tree[lson];\n\ttree[rson]=dep[k]>dep[tree[rson]]?k:tree[rson];\n\tlazy[lson]=dep[k]>dep[lazy[lson]]?k:tree[lson];\n\tlazy[rson]=dep[k]>dep[lazy[rson]]?k:tree[rson];\n}\n\nvoid change(int pos,int l,int r,int L,int R,int x)\n{\n\tif(l>R||r<L)\n\t\treturn ;\n\tif(l>=L&&r<=R)\n\t{\n\t\ttree[pos]=dep[x]>dep[tree[pos]]?x:tree[pos];\n\t\tlazy[pos]=dep[x]>dep[lazy[pos]]?x:lazy[pos];\n\t\treturn ;\n\t}\n\tpushdown(pos);\n\tint mid=(l+r)>>1;\n\tif(dep[x]>dep[tree[lson]])\n\t\tchange(lson,l,mid,L,R,x);\n\tif(dep[x]>dep[tree[rson]])\n\t\tchange(rson,mid+1,r,L,R,x);\n    //\u5982\u679c\u533a\u95f4\u6700\u52a3\u7684\u7b54\u6848\u90fd\u6bd4\u4fee\u6539\u503c\u4f18\u5c31\u4e0d\u9700\u8981\u5f80\u4e0b\u9012\u5f52\u4e86\n\ttree[pos]=dep[tree[lson]]<dep[tree[rson]]?tree[lson]:tree[rson];\n}\n\nint query(int pos,int l,int r,int x)\n{\n\tif(l==x&&r==x)\n\t\treturn tree[pos];\n\tpushdown(pos);\n\tint mid=(l+r)>>1;\n\tif(x<=mid)return query(lson,l,mid,x);\n\telse return query(rson,mid+1,r,x);\n}\n\nint n,Q;\n\nchar opt;\n\nint main()\n{\n\tn=read(),Q=read();\n\tfor(int i=1,u,v;i<n;i++)\n\t\tu=read(),v=read(),add(u,v);\n\tdfs1(1,0),dfs2(1,1);\n\tchange(1,1,n,id[1],id[1]+size[1]-1,1);\n\tint num;\n\twhile(Q--)\n\t{\n\t\tcin>>opt;\n\t\tnum=read();\n\t\tif(opt=='Q')\n\t\t\tprintf(\"%d\\n\",query(1,1,n,id[num]));\n\t\tif(opt=='C')\n\t\t\tchange(1,1,n,id[num],id[num]+size[num]-1,num);\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1576416941,
        "uid": 236021,
        "name": "C_\u65ed",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\n\n\u601d\u8def\u6bd4\u8f83\u7b80\u5355\n\n- \u5148\u8bfb\u5165\u6240\u6709\u7684\u64cd\u4f5c\n\n- \u7528\u65f6\u95f4\u505a\u6807\u8bb0\n\t\uff081\u5355\u4f4d\u65f6\u95f4 = \u4e00\u6b21\u64cd\u4f5c\uff09\n\n- tag[i]\u8868\u793a\u70b9 i \u6700\u65e9\u4e00\u6b21\u88ab\u6253\u4e0atag\u7684\u65f6\u95f4\n\n- \u4e00\u904d dfs \u7ef4\u62a4\u79bb\u70b9 i \u6700\u8fd1\u7684\u6253\u4e86\u6807\u8bb0\u7684\u7956\u5148 top[ i ]\n\n- query( i , time )\u8bbf\u95ee : i \u8868\u793a\u4ece i \u70b9\u8bbf\u95ee\n\t, time \u8868\u793a\u8fd9\u6b21\u8bbf\u95ee\u53d1\u751f\u7684\u65f6\u95f4\uff1b\n    \n\t1. \u5982\u679c tag[ top[ i ] ] > time \uff08\u5728\u8bbf\u95ee\u4e4b\u540e\u624d\u6253\u7684\u6807\u8bb0\uff09 -----> query( fa[ top[ i ] ] , time )\n    \n   1. \u53cd\u4e4b \u8f93\u51fa top[ i ] ; \n    \n\n------------\n\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nint n,q;\nint u,v;\nstruct ty{\n\tint next,to;\n}edge[N];\nint head[N];\n\nint fa[N];\nint cnt;\nvoid add(int x,int y){\n\tedge[++cnt].next =head[x];\n\tedge[cnt].to =y;\n\thead[x]=cnt;\n\tfa[y]=x;\n}\n\nchar c;\nint d;\nint tag[N];\nint num;\nstruct tp{\n\tint id,timee;\n}qy[N];\n\nint top[N];\nvoid dfs(int x){\n\tif(tag[x]!=-1) top[x]=x;\n\tfor(int i=head[x];i;i=edge[i].next ){\n\t\ttop[edge[i].to]=top[x];\n\t\tdfs(edge[i].to);\n\t}\n}\n\nvoid query(int x,int timee){\n\tif(tag[top[x]]<timee){\n\t\tprintf(\"%d\\n\",top[x]);\n\t\treturn;\n\t}\n\telse{\n\t\tquery(fa[top[x]],timee);\n\t\treturn;\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);\n\t}\n\tmemset(tag,-1,sizeof(tag));\n\tfor(int i=1;i<=q;i++){\n\t\tscanf(\" %c %d\",&c,&d);\n\t\tif(c=='Q'){\n\t\t\tqy[++num].id =d;\n\t\t\tqy[num].timee=i;\n\t\t} \n\t\tif(c=='C'){\n\t\t\tif(tag[d]==-1) tag[d]=i;\n\t\t\ttag[d]=min(tag[d],i);\n\t\t}\n\t}\n\ttag[1]=0;\n\ttop[1]=1;\n\tdfs(1);\n//\tfor(int i=1;i<=n;i++) printf(\"%d \",top[i]);\n\tfor(int i=1;i<=num;i++){\n\t\tquery(qy[i].id,qy[i].timee);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1563347285,
        "uid": 157489,
        "name": "wwwsy",
        "ccfLevel": 0,
        "title": "p4092\u6811"
    },
    {
        "content": "\u5f31\u7701\u7701\u9009\u524d\u5199\u7bc7\u9898\u89e3\u91ca\u653e\u538b\u529b\u2026\u2026  \n\n\u5bf9\u4e8e\u6811\u4e0a\u64cd\u4f5c\uff0c\u5e76\u4e14\u8981\u6c42\u7956\u5148\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230**\u6811\u94fe\u5256\u5206**   \n\n\u6211\u4eec\u6309\u7167\u6811\u5256\u7684\u6a21\u677f\u505a\uff0c\u5148\u4e24\u904d$DFS$\uff0c\u7136\u540e\u5efa\u7acb\u7ebf\u6bb5\u6811  \n\n\u4e2a\u4eba\u7ebf\u6bb5\u6811\u6bd4\u8f83\u72ec\u7279\uff08\u7c7b\u4f3c\u6743\u503c\u7ebf\u6bb5\u6811\u4f46\u4e0d\u662f\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c\u5229\u7528\u7ebf\u6bb5\u6811\u5bf9\u4f4d\u7f6e\u5212\u5206\u4ee3\u66ff\u5bf9\u7b54\u6848\u4e8c\u5206\uff08\u5f88\u50cf\u4e3b\u5e2d\u6811\u5bf9\u4e0d\u5bf9\uff09\uff0c\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4fdd\u5b58\u8fd9\u6bb5\u533a\u95f4\u4ee3\u8868\u7684\u6811\u4e0a\u8282\u70b9**\u662f\u5426\u6709\u6807\u8bb0**\uff0c\u53ea\u7528\u8bb0\u5f55\u6709\u8fd8\u662f\u6ca1\u6709\uff0c\u67e5\u8be2\u65f6\u4f18\u5148\u67e5\u8be2\u540e\u6807\u8bb0\u7684\u8282\u70b9  \n\n```cpp\nstruct node{\n\tint l,r;\n\tint data;\n}a[N<<2];\nvoid build(int x,int l,int r){\n\ta[x].l=l;a[x].r=r;a[x].data=0;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(x*2,l,mid);build(x*2+1,mid+1,r);\n}\nvoid change(int x,int to){\n\tif(a[x].l==a[x].r){\n\t\ta[x].data=1;return;\n\t}\n\tint mid=(a[x].l+a[x].r)>>1;\n\tif(mid>=to)change(x*2,to);\n\telse change(x*2+1,to);\n\ta[x].data=(a[x*2].data|a[x*2+1].data);\n}\nint ask(int x,int l,int r){\n\tif(!a[x].data)return 0;\n\tif(a[x].l==a[x].r)return a[x].l;\n\tint mid=(a[x].l+a[x].r)>>1,p;\n\tif(mid<r&&(p=ask(x*2+1,l,r)))return p;\n\tif(mid>=l)return ask(x*2,l,r);\n\treturn 0;\n}\n```\n\n\u5bf9\u4e8e$C$\uff0c\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e0a\u5355\u70b9\u4fee\u6539  \n\u5bf9\u4e8e$Q$\uff0c\u76f4\u63a5\u501f\u52a9\u8f7b\u8fb9\u91cd\u94fe\u5f80\u4e0a\u8df3  \n\n```cpp\nint tree_ask(int x){\n\tint p;\n\twhile(!(p=ask(1,L[top[x]],L[x])))\n\t  x=fa[top[x]];\n\treturn p;\n}\n```\n\n\u5176\u4f59\u7684\u521d\u59cb\u5316\u4e24\u904d$DFS$\u548c\u4e3b\u7a0b\u5e8f\u81ea\u5df1\u6253\u5427\uff08\u624b\u52a8\u6ed1\u7a3d\uff09",
        "postTime": 1555506179,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "### \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u7ef4\u62a4\u6700\u8fd1\u6807\u8bb0\u7956\u5148\uff0c\u6bcf\u6b21\u6253\u6807\u8bb0\u5c31\u5f80\u4e0b\u66f4\u65b0\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u6700\u8fd1\u6807\u8bb0\u7956\u5148\u7684\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u6539\u52a8\u7684\u6570\u7684\u6df1\u5ea6\u5c31\u505c\u6b62~\n## \u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,t;\nint head[100001],next[100001],end[100001],deep[100001],latest[100001];\ninline int read() {\n\tint s=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='C') return 0;//\u5feb\u8bfb\u7684\u540c\u65f6\u53c8\u628a\u5b57\u7b26\u4e00\u8d77\u5224\u65ad\u4e86~\n\t\tif(ch=='Q') return 1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\ts=(s<<1)+(s<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn s;\n}\nvoid add(int x,int y) {//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6cd5~\n\tnext[++t]=head[x];\n\thead[x]=t;\n\tend[t]=y;\n\treturn;\n}\nvoid build(int x) {\n\tfor(int i=head[x];i;i=next[i]) {//\u5efa\u7acb\u6811\uff0c\u7ed9\u6700\u8fd1\u7956\u5148\u8d4b\u521d\u503c1\uff0c\u8ba1\u7b97\u6df1\u5ea6~\n\t\tint to=end[i];\n\t\tdeep[to]=deep[x]+1;\n\t\tlatest[to]=1;\n\t\tbuild(to);\n\t}\n\treturn;\n}\nvoid change(int x) {//\u6539\u53d8\u6df1\u5ea6~\n\tfor(int i=head[x];i;i=next[i]) {\n\t\tint to=end[i];\n\t\tif(deep[latest[x]]>deep[latest[to]]) {//\u6bd4\u8f83\u4e4b\u524d\u6b64\u8282\u70b9\u7684\u7956\u5148\u6df1\u5ea6\u4e0e\u5f53\u524d\u7956\u5148\u6df1\u5ea6\u7684\u5927\u5c0f~\n\t\t\tlatest[to]=latest[x];//\u6df1\u5ea6\u5927\u5c31\u66f4\u65b0~\n\t\t\tchange(to);//\u7ee7\u7eed\u627e~\uff08ps:\u6df1\u5ea6\u5c0f\u5c31\u4e0d\u66f4\u65b0\uff0c\u56e0\u4e3a\u8981\u627e\u6700\u8fd1\u7684~\uff09\n\t\t}\n\t}\n\treturn;\n}\nint main() {\n\tn=read();\n\tm=read();\n\tdeep[1]=1;\n\tlatest[1]=1;\n\tfor(int i=1;i<n;i++) {\n\t\tint x=read(),y=read();\n\t\tadd(x,y);\n\t}\n\tbuild(1);\n\tfor(int i=1;i<=m;i++) {\n\t\tint pan=read();\n\t\tint x;\n\t\tif(!pan) {\n\t\t\tx=read();\n\t\t\tlatest[x]=x;//\u6253\u6807\u8bb0~\uff08\u5f53\u524d\u8282\u70b9\u7684\u6700\u8fd1\u7956\u5148\u4e00\u5b9a\u662f\u81ea\u5df1\u91cd\u590d\u4e5f\u65e0\u6240\u8c13\uff0c\u53ef\u4ee5\u5355\u72ec\u5224\u65ad\u8df3\u8fc7\u91cd\u590d\uff09\n\t\t\tchange(x);//\u5411\u4e0b\u66f4\u65b0\u6700\u8fd1\u6807\u8bb0\u7956\u5148~\n\t\t}\n\t\telse {\n\t\t\tx=read();\n\t\t\tprintf(\"%d\\n\",latest[x]);//\u76f4\u63a5\u8f93\u51fa\u5373\u53ef~\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1541553777,
        "uid": 61204,
        "name": "newhy2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u7531\u4e8e\u81ea\u5df1\u4e00\u65f6\u611a\u8822yy\u51fa\u4e00\u79cd\u5947\u602a~~\u6ca1\u5fc5\u8981~~\u7684\u505a\u6cd5\n\u6b63\u5e38\u7684\u6811\u5256+\u7ebf\u6bb5\u6811\u3002\n\u4f46\u662f\u6211\u90a3\u65f6\u5019\u60f3\u8981\u7528bool\u6570\u7ec4\u8868\u793a\u7ebf\u6bb5\u6811\u4e00\u4e2a\u8282\u70b9\u7684\u72b6\u6001\n\u6240\u4ee5\u5c31\u7528~~\u5047\u7684~~\u7ebf\u6bb5\u6811\u4e8c\u5206\u4e86\u3002\u3002\u3002\nc[x]\u8868\u793a\u7ebf\u6bb5\u6811\u7f16\u53f7\u4e3ax\u7684\u8282\u70b9\u6709\u6ca1\u6709\u70b9\u88ab\u67d3\u8fc7\u8272\n\u66f4\u65b0\u64cd\u4f5c\u663e\u7136\u3002\n\u67e5\u8be2\u7684\u8bdd\u5c31\u5bf9\u8282\u70b9\u52301\u7684\u8def\u5f84\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7684\u4e0d\u8fde\u7eed\u7684\u51e0\u6bb5\n\u6309dfs\u5e8f\u4ece\u5927\u5230\u5c0f\u5206\u522b\u7528\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u884c\u4e86\u5427\u3002\n\u5177\u4f53\u64cd\u4f5c\u770b\u4ee3\u7801\u5427    ~~\u867d\u7136\u5f00\u4e2aint\u6570\u7ec4\u5c31\u4e0d\u7528\u4e8c\u5206\u4e86~~\n```cpp\n#include<bits/stdc++.h>\n#define ls (x<<1)\n#define rs (x<<1|1)\nusing namespace std;\nconst int N=100005;\ninline void read(int &x,int f=1,char c=getchar()){\n\tfor(x=0;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=x*10+c-48;x*=f;\n}\nint dep[N],top[N],siz[N],fa[N],pos[N],id[N],son[N];\nint n,T,x,y,clo;vector<int>G[N];char c[N<<2],opt[2];\nvoid dfs(int x){\n    siz[x]=1;dep[x]=dep[fa[x]]+1;\n    for(int i=0;i<G[x].size();i++){\n        int to=G[x][i];if(to==fa[x])continue;\n        fa[to]=x;dfs(to);siz[x]+=siz[to];\n        if(siz[to]>siz[son[x]])son[x]=to;\n    }\n}\nvoid dfs2(int x,int y){\n    pos[x]=++clo;id[clo]=x;top[x]=y;\n    if(son[x])dfs2(son[x],y);\n    for(int i=0;i<G[x].size();i++){\n        int to=G[x][i];\n        if(to!=son[x]&&to!=fa[x])dfs2(to,to);\n    }\n}\nvoid change(int x,int l,int r,int p){\n\tif(l==r){c[x]=1;return;}\n\tint mid=l+r>>1;\n\tif(p<=mid)change(ls,l,mid,p);\n\telse change(rs,mid+1,r,p);\n\tc[x]=c[ls]|c[rs];\n}\nint query(int x,int l,int r,int L,int R){\n\tif(l==r&&c[x])return l;\n\tint mid=l+r>>1,tmp=0;\n\tif(R>mid&&c[rs])\n\t\ttmp=max(tmp,query(rs,mid+1,r,L,R));\n\tif((!tmp)&&L<=mid&&c[ls])\n\t\ttmp=max(tmp,query(ls,l,mid,L,R));\n\treturn tmp;\n}\nint solve(int x,int res=0){\n\tfor(;x;x=fa[top[x]]){\n\t\tres=query(1,1,n,pos[top[x]],pos[x]);\n\t\tif(res)return id[res];\n\t}\n\treturn 1;\n}\nint main(){\n\tread(n),read(T);\n\tfor(int i=1;i<n;i++){\n\t\tread(x),read(y);\n\t\tG[x].push_back(y),G[y].push_back(x);\n\t}\n\tdfs(1),dfs2(1,1),change(1,1,n,pos[1]);\n\twhile(T--){\n\t\tscanf(\"%s\",opt),read(x);\n\t\tif(opt[0]=='C')change(1,1,n,pos[x]);\n\t\telse printf(\"%d\\n\",solve(x));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540546346,
        "uid": 54556,
        "name": "maoyujie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u6811\u5256\u505a\u6cd5\u4e0d\u96be\u60f3\u5230\u5427\uff0c\u533a\u95f4 $\\max$ \u5c31\u884c\u3002\u697c\u4e0b\u5927\u4f6c\u4e5f\u8bb2\u4e86\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u3002\n\n\u4e3a\u4e86~~\u6295\u9898\u89e3~~\u5c55\u793a\u51fa\u4e2a\u6027\uff0c\u6211\u7ffb\u4e86\u4e00\u5708\u9898\u89e3\uff0c\u53d1\u73b0\u7528\u6811\u5256\u7684\u90fd\u662f\u7528\u6700\u901a\u7528\u7684\u5199\u6cd5\u2014\u2014DFS\u3002\n\n\u7531\u4e8e\u4e4b\u524d\u819c\u4f60\u8d5b DFS \u6c42 $\\mathrm{size}$ \u88ab\u5361\u7206\u6808\uff0c\u6240\u4ee5\u51b3\u5b9a\u591a\u7528 BFS\u3002\n\n\u987a\u4fbf\u5c55\u793a\u4e00\u4e0b\u4e2a\u4eba YY \u51fa\u6765\u7684 BFS \u6811\u5256\u5199\u6cd5\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#define ls (p << 1)\n#define rs (ls | 1)\nusing namespace std;\nconst int N = 1e5;\nint n,q;\nint seg[(N << 2) + 10];\nint to[(N << 1) + 10],pre[(N << 1) + 10],first[N + 10],edge_tot;\ninline void add(const int &u,const int &v)\n{\n    to[++edge_tot] = v;\n    pre[edge_tot] = first[u];\n    first[u] = edge_tot;\n}\nvoid change(int x,int p,int tl,int tr)\n{\n    if(tl == tr)\n    {\n        seg[p] = x;\n        return ;\n    }\n    int mid = tl + tr >> 1;\n    if(x <= mid)\n        change(x,ls,tl,mid);\n    else\n        change(x,rs,mid + 1,tr);\n    seg[p] = max(seg[ls],seg[rs]);\n}\nint query(int l,int r,int p,int tl,int tr)\n{\n    if(l <= tl && tr <= r)\n        return seg[p];\n    int mid = tl + tr >> 1;\n    int ret = -1;\n    if(l <= mid)\n        ret = max(ret,query(l,r,ls,tl,mid));\n    if(r > mid)\n        ret = max(ret,query(l,r,rs,mid + 1,tr));\n    return ret;\n}\nint f[N + 10],d[N + 10],size[N + 10],son[N + 10],top[N + 10],rk[N + 10],id[N + 10],dfn_tot;\nint answer(int x)\n{\n    int fx = top[x];\n    int ret = -1;\n    while(fx)\n    {\n        ret = max(ret,query(id[fx],id[x],1,1,n));\n        x = f[fx],fx = top[x];\n    }\n    return ret;\n}\nint que[N + 10],head = 1,tail = 1;\nint main()\n{\n    scanf(\"%d%d\",&n,&q);\n    int u,v;\n    for(register int i = 1;i < n;++i)\n        scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);//\uff08\u7406\u8bba\u4e0a\uff09\u65e0\u5411\u8fb9\u4e0e\u5426\u5e76\u4e0d\u5f71\u54cd\uff0c\u4f46\u662f\u672c\u9898\u6839\u636e\u9898\u610f\u5355\u5411\u8fb9\u4f1a WA \u4e00\u4e2a\u70b9\uff0cLibreOJ \u7684\u6570\u636e\u662f\u6ca1\u6709\u95ee\u9898\u7684\n\t//\u4ee5\u4e0b\u4e3a\u6811\u5256\n    que[tail++] = 1;\n    d[1] = 1;\n    int from;\n    while(head < tail)\n    {\n        from = que[head++];\n        size[from] = 1;//\u521d\u59cb\u5316 size\n        for(register int i = first[from];i;i = pre[i])\n            if(to[i] ^ f[from])\n            {\n                que[tail++] = to[i];\n                f[to[i]] = from;\n                d[to[i]] = d[from] + 1;\n                //\u66f4\u65b0\u6df1\u5ea6\u4e0e\u7236\u4eb2\n            }\n    }\n    for(register int i = n;i >= 1;--i)\n    {\n        size[f[que[i]]] += size[que[i]];\n        if(!son[f[que[i]]] || size[que[i]] > size[son[f[que[i]]]])\n            son[f[que[i]]] = que[i];\n    }//\u9006\u7740 BFS \u7684\u987a\u5e8f\u6c42 size \u548c son\uff0c\u4e0d\u9700\u8981\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58 BFS \u5e8f\uff0c\u7528\u672c\u8eab\u7684\u961f\u5217\u5c31\u884c\u4e86\n    for(register int i = 1;i <= n;++i)\n        for(register int j = i;!id[j] && j;j = son[j])\n            id[j] = ++dfn_tot,rk[dfn_tot] = j,top[j] = i;//\u8fde\u63a5\u91cd\u94fe\uff0c\u6a21\u62df DFS \u5e8f\uff08\u4e0d\u662f\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684 DFS \u5e8f\u4e0d\u8fde\u7eed\u662f\u4e0d\u5f71\u54cd\u7684\uff0c\u6bd5\u7adf\u6ca1\u7528\uff09\n    //\u4ee5\u4e0a\u4e3a\u6811\u5256\n    change(id[1],1,1,n);//\u5148\u6807\u8bb0\u6839\u8282\u70b9\n    char opt;\n    int x;\n    while(q--)\n    {\n        scanf(\" %c%d\",&opt,&x);\n        if(opt == 'C')\n            change(id[x],1,1,n);\n        else\n            printf(\"%d\\n\",rk[answer(x)]);\n    }\n}\n\n```",
        "postTime": 1537162000,
        "uid": 75840,
        "name": "deserter",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u89e3\u6cd5:\n\n\n\u4fee\u6539:\u5c06\u4e00\u4e2a\u70b9\u4fee\u6539\u65f6\u987a\u4fbf\u4fee\u6539\u5b50\u6811\u7684\u6240\u6709\u70b9.\n\n\u67e5\u8be2:\u76f4\u63a5\u8be2\u95ee\u6807\u8bb0.\n\n\u4f46\u8fd9\u4e2a\u601d\u8def\u662f\u9519\u8bef\u7684,\u539f\u56e0\u662f\u540e\u6253\u7684\u6807\u8bb0\u4e00\u5b9a\u4f1a\u8986\u76d6\u5148\u6253\u7684.\n\n\u53ea\u9700\u8981\u52a0\u4e00\u4e2a\u51fd\u6570\u5224\u65ad\u6df1\u5ea6\u5373\u53ef.\n\n\u4ee3\u7801:\n```cpp\n#include<iostream>  \n#include<cstdio>  \n#include<cstdlib>  \n#include<cstring>  \n#include<cmath>  \n#include<algorithm>  \n#define F(i,j,n) for(int i=j;i<=n;i++)  \n#define D(i,j,n) for(int i=j;i>=n;i--)  \n#define ll long long  \n#define pa pair<int,int>  \n#define N 600005  \nusing namespace std;  \nint n,m,cnt,tot;  \nint head[N],dep[N],l[N],r[N];  \nint tag[N*4],mx[N*4];  \nint to[N],nxt[N],num;\ninline int read()  \n{  \n    int x=0,f=1;char ch=getchar();  \n    while (ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=getchar();}  \n    while (ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}  \n    return x*f;  \n}  \ninline void addedge(int x,int y)  \n{  \n    num++;to[num]=y;nxt[num]=head[x];head[x]=num; \n    num++;to[num]=x;nxt[num]=head[y];head[y]=num; \n}  \ninline void dfs(int x,int f)  \n{  \n    l[x]=++tot;dep[x]=dep[f]+1;  \n    for(int p=head[x];p;p=nxt[p]) if (to[p]!=f) dfs(to[p],x);  \n    r[x]=tot;  \n}  \ninline int better(int x,int y)  \n{  \n    return dep[x]>dep[y]?x:y;  \n}  \nvoid pushup(int k)  \n{  \n    mx[k]=better(mx[k<<1],mx[k<<1|1]);  \n}  \nvoid update(int k,int x)  \n{  \n    tag[k]=better(tag[k],x);  \n    mx[k]=better(mx[k],x);  \n}  \nvoid pushdown(int k)  \n{  \n    if (!tag[k]) return;  \n    update(k<<1,tag[k]);update(k<<1|1,tag[k]);  \n    tag[k]=0;  \n}  \nvoid build(int k,int l,int r)  \n{  \n    tag[k]=0;mx[k]=1;  \n    if (l==r) return;  \n    int mid=(l+r)>>1;  \n    build(k<<1,l,mid);build(k<<1|1,mid+1,r);  \n}  \nvoid change(int k,int l,int r,int L,int R,int x)  \n{  \n    if (l==L&&r==R){update(k,x);return;}  \n    int mid=(l+r)>>1;  \n    pushdown(k);  \n    if (R<=mid) change(k<<1,l,mid,L,R,x);  \n    else if (L>mid) change(k<<1|1,mid+1,r,L,R,x);  \n    else change(k<<1,l,mid,L,mid,x),change(k<<1|1,mid+1,r,mid+1,R,x);  \n    pushup(k);  \n}  \nint query(int k,int l,int r,int pos)  \n{  \n    if (l==r) return mx[k];  \n    int mid=(l+r)>>1;  \n    pushdown(k);  \n    if (pos<=mid) return query(k<<1,l,mid,pos);  \n    else return query(k<<1|1,mid+1,r,pos);  \n}  \nint main()  \n{  \n    n=read();m=read();  \n    F(i,1,n-1){int x=read(),y=read();addedge(x,y);}  \n    dfs(1,0);  \n    build(1,1,n);  \n    F(i,1,m)  \n    {  \n        char ch=getchar();while (ch!='C'&&ch!='Q') ch=getchar();  \n        int x=read();  \n        if (ch=='C') change(1,1,n,l[x],r[x],x);  \n        else printf(\"%d\\n\",query(1,1,n,l[x]));  \n    }  \n} \n```",
        "postTime": 1520423047,
        "uid": 44273,
        "name": "\u786b\u4ee3\u786b\u9178\u94a0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u4f3c\u4e4e\u6ca1\u6709\u4e00\u7bc7\u9898\u89e3\u662f\u5bf9\u8be2\u95ee\u5206\u5757\u3002\r\n\r\n---\r\n\r\n\u82e5\u8be5\u9898\u7684\u8be2\u95ee\u4e2d\uff0c\u524d\u534a\u90e8\u5206\u90fd\u662f\u6807\u8bb0\uff0c\u540e\u534a\u90e8\u5206\u90fd\u662f\u67e5\u8be2\uff0c\u8fd9\u79cd\u9759\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u7136\u53ef\u4ee5 $O(n)$ \u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\uff0c$O(1)$ \u8f93\u51fa\u3002\r\n\r\n\u7136\u800c\u73b0\u5728\u5e26\u4e0a\u4e86\u4fee\u6539\uff0c\u4e8e\u662f\u8003\u8651\u5bf9\u8be2\u95ee\u5206\u5757\u3002\u8bbe\u5757\u957f\u4e3a $k$\u3002\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff1a\r\n\r\n1. \u5757\u5185\u3002\u679a\u4e3e\u6bcf\u4e2a\u63d2\u5165\u64cd\u4f5c\uff0c\u5224\u65ad\u8be5\u64cd\u4f5c\u6807\u8bb0\u7684\u8282\u70b9\u662f\u5426\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u7956\u5148\uff08\u4f7f\u7528 $dfs$ \u5e8f\u5224\u65ad\uff09\uff0c\u5e76\u66f4\u65b0\u7b54\u6848\u3002\r\n\r\n2. \u5757\u5916\u3002\u5728\u6bcf\u4e00\u5757\u7684\u7ec8\u70b9\uff0c\u5bf9\u4e4b\u524d\u7684\u6240\u6709\u64cd\u4f5c\u8fdb\u884c\u4e0e\u9759\u6001\u60c5\u51b5\u76f8\u540c\u7684\u9884\u5904\u7406\u3002\u8be2\u95ee\u65f6\u53ef $O(1)$ \u67e5\u8be2\u8be5\u90e8\u5206\u7684\u7b54\u6848\u3002\r\n\r\n\u590d\u6742\u5ea6\u4e3a $O(qk+n+\\frac{nq}{k})$\uff0c\u5206\u6790\u5f97 $k$ \u5e94\u53d6 $\\sqrt n$\u3002\r\n\r\n---\r\n\r\n\u5982\u679c\u4f60\u8fd9\u4e48\u5199\uff0c\u663e\u7136\u53ea\u6709 $60 \\rm{pts}$ \u7684\u597d\u6210\u7ee9\u3002\r\n\r\n\u5361\u5e38\u5c0f\u6280\u5de7\uff1a\r\n\r\n1. \u7531\u4e8e\u9700\u8981\u591a\u6b21\u8ba1\u7b97\u5f53\u524d\u5206\u5757\u7684\u4e0b\u754c\uff0c\u8be5\u8ba1\u7b97\u9700\u8981\u4f7f\u7528\u6a21\u8fd0\u7b97\uff0c\u8f83\u4e3a\u7f13\u6162\u3002\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf\u7ef4\u62a4\u8fd9\u4e2a\u503c\uff0c\u5728\u5757\u7684\u7ec8\u70b9\u52a0\u4e0a\u5757\u957f\u5373\u53ef\u3002\r\n\r\n2. \u4f7f\u7528\u6570\u7ec4\u7248\u7684\u90bb\u63a5\u94fe\u8868\uff0c\u800c\u975e vector \u7248\u7684\u3002\r\n\r\n3. \u591a\u6b21\u4fee\u6539\u5757\u957f\u5361\u8fdb\u65f6\u9650\u3002\uff08 \u5b9e\u6d4b $k$ \u53d6 $n^{0.6}$ \u8f83\u4f18 \uff09\u3002\r\n\r\n---\r\n\r\n\u63d0\u4f9b\u4ee3\u7801\uff0c\u4ec5\u4f9b\u53c2\u8003\uff08 \u53ef\u4e0d\u5f00 O2 AC \uff09\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nll read() {\r\n\tll x=0, f=1; char ch=' ';\r\n\twhile(!isdigit(ch)) {ch=getchar(); if(ch=='-') f=-1;}\r\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48), ch=getchar();\r\n\treturn x*f;\r\n}\r\nint n, q, K, tot, h[100005], x[100005], dfn[100005], sz[100005], clk, minn[100005], dp[100005], up;\r\nint vis[100005];\r\nchar type[100005][2];\r\nstruct AB{\r\n\tint a, b, n;\r\n}d[200005];\r\nvoid charu(int a, int b) {\r\n\td[++tot].a=a, d[tot].b=b, d[tot].n=h[a], h[a]=tot;\r\n} \r\nvoid dfs(int u, int fa) {\r\n\tdp[u]=dp[fa]+1, sz[u]=1, dfn[u]=++clk;\r\n\tfor(int k=h[u];k;k=d[k].n) {\r\n\t\tint v=d[k].b;\r\n\t\tif(v==fa) continue;\r\n\t\tdfs(v, u);\r\n\t\tsz[u]+=sz[v];\r\n\t}\r\n}\r\nvoid dfs1(int u, int fa, int tmp) {\r\n\tint nowtmp=tmp;\r\n\tif(vis[u]==1) nowtmp=u;\r\n\tminn[u]=nowtmp;\r\n\tfor(int k=h[u];k;k=d[k].n) {\r\n\t\tint v=d[k].b;\r\n\t\tif(v==fa) continue;\r\n\t\tdfs1(v, u, nowtmp);\r\n\t}\r\n}\r\nint main() {\r\n\tcin>>n>>q;\r\n\tfor(int i=1;i<n;i++) {\r\n\t\tint a=read(), b=read();\r\n\t\tcharu(a, b), charu(b, a);\r\n\t}\r\n\tdfs(1, 1);\r\n\tK=pow(n, 0.6);\r\n\tvis[1]=1;\r\n\tdfs1(1, 1, 1);\r\n\tfor(int i=1;i<=q;i++) {\r\n\t\tscanf(\"%s\", type[i]);\r\n\t\tx[i]=read();\r\n\t\tif(type[i][0]=='Q') {\r\n\t\t\tint nowtmp=minn[x[i]];\r\n\t\t\tfor(int j=i-1;j>up;j--) {\r\n\t\t\t\tif(type[j][0]=='C') {\r\n\t\t\t\t\tif(dfn[x[i]]>=dfn[x[j]]&&dfn[x[i]]<=dfn[x[j]]+sz[x[j]]-1) {\r\n\t\t\t\t\t\tif(dp[x[j]]>dp[nowtmp]) nowtmp=x[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tprintf(\"%d\\n\", nowtmp);\r\n\t\t}\r\n\t\tif(i%K==0) {\r\n\t\t\tfor(int j=i;j>up;j--) {\r\n\t\t\t\tif(type[j][0]=='C') vis[x[j]]=1;\r\n\t\t\t}\r\n\t\t\tdfs1(1, 1, 1);\r\n\t\t\tup+=K;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n---\r\n\r\n\u540e\u8bb0\uff1a\u6b64\u79cd\u505a\u6cd5\u53ef\u4ee5\u7ef4\u62a4\u66f4\u591a\u4fe1\u606f\uff0c\u8be6\u60c5\u8bf7\u79fb\u6b65 [CF342E](https://www.luogu.com.cn/problem/CF342E)\u3002\r\n",
        "postTime": 1604624970,
        "uid": 93041,
        "name": "__Watcher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4092 \u3010 [HEOI2016/TJOI2016]\u6811 \u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6ca1\u6709\u7528\u6811\u94fe\u5256\u5206+$\\text{set}$\u8fc7\u7684\u3002\n\n\u4f7f\u7528\u6811\u94fe\u5256\u5206\u628a\u4ece\u6839\u5230\u4efb\u610f\u8282\u70b9\u7684\u8def\u5f84\u5256\u6210$O(\\log(n))$\u6bb5\u8def\u5f84\uff0c\u5bf9\u6bcf\u6761\u8def\u5f84\u5f00\u4e00\u4e2a$\\text{set}$\u6309\u7167\u6df1\u5ea6\u4ece\u6df1\u5230\u6d45\u7ef4\u62a4\u8def\u5f84\u4e0a\u88ab\u6253\u6807\u8bb0\u7684\u8282\u70b9\u3002\u6807\u8bb0\u65f6\u5c06\u8282\u70b9\u63d2\u5165\u6240\u8ff0\u8def\u5f84\u7684$\\text{set}$\u3002\u67e5\u8be2\u5728\u5f53\u524d\u8def\u5f84\u7684$\\text{set}$\u4e2d\u7528$\\text{lower\\_bound}$\u67e5\u8be2\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6700\u6df1\u7684\u8282\u70b9\uff0c\u5982\u679c\u67e5\u4e0d\u5230\u5219\u4e0a\u8df3\u81f3\u4e0a\u4e00\u6bb5\u8def\u5f84\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log^2n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define DB double\n#define LL long long\n\n#define MST(a,b) memset((a),(b),sizeof(a))\n#define MRK() cout<<\"Mark\"<<endl;\n#define WRT(x) cout<<#x<<\" = \"<<(x)<<endl;\n\n#define MAXN 210000\n#define MAXM 410000\n#define MOD 998244353\n#define INF 0x3f3f3f3f\n#define LLINF 0x3f3f3f3f3f3f3f3f\n#define EPS 1e-5\n\n#define _ 0\nusing namespace std;\n\nint depth[MAXN],pa[MAXN],top[MAXN],son[MAXN],size[MAXN];\nbool flag[MAXN];\nvector<int> g[MAXN];\nint n,q;\n\nstruct cmp\n{\n\tbool operator()(const int &x,const int &y)\n\t{\n\t\treturn depth[x]>depth[y];\n\t}\n};\nset<int,cmp> st[MAXN];\n\nvoid dfs1(int pos,int f)\n{\n\tpa[pos]=f;\n\tsize[pos]=1;\n\tdepth[pos]=depth[f]+1;\n\tfor (auto p:g[pos])\n\t\tif (p!=f)\n\t\t{\n\t\t\tdfs1(p,pos);\n\t\t\tsize[pos]+=size[p];\n\t\t\tif (size[p]>size[son[pos]])\n\t\t\t\tson[pos]=p;\n\t\t}\n}\n\nvoid dfs2(int pos,int topf)\n{\n\ttop[pos]=topf;\n\tif (son[pos])\n\t\tdfs2(son[pos],topf);\n\tfor (auto p:g[pos])\n\t\tif (p!=pa[pos] && p!=son[pos])\n\t\t\tdfs2(p,p);\n}\n\nvoid init()\n{\n\tint x,y;\n\tcin>>n>>q;\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t}\n}\n\nvoid insert(int x)\n{\n\tif (flag[x])\n\t\treturn;\n\tst[top[x]].insert(x);\n\tflag[x]=1;\n}\n\nint query(int x)\n{\n\twhile (1)\n\t{\n\t\tauto p=st[top[x]].lower_bound(x);\n\t\tif (p!=st[top[x]].end())\n\t\t\treturn *p;\n\t\tx=pa[top[x]];\n\t}\n}\n\nvoid work()\n{\n\tchar op;\n\tint x;\n\tinsert(1);\n\twhile (q--)\n\t{\n\t\tscanf(\"\\r\\n%c%d\",&op,&x);\n\t\tif (op=='C')\n\t\t\tinsert(x);\n\t\telse\n\t\t\tprintf(\"%d\\n\",query(x));\n\t}\n}\n\nint main()\n{\n\tinit();\n\tdfs1(1,1);\n\tdfs2(1,1);\n\twork();\n\treturn ~~(0^_^0);\n}\n\n\n```\n",
        "postTime": 1582899954,
        "uid": 56267,
        "name": "Rhodoks",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u773c\u55ef\u662f\u4e2a\u6811\u5256\u9898\u3002\u5f00\u59cb~~\u4e71\u521a~~\u601d\u8003\u64cd\u4f5c\u600e\u4e48\u5b9e\u73b0\u3002\n\u64cd\u4f5c1\uff1a\u628a\u67d0\u70b9\u503c\u53d8\u4e3a1\uff0c\u5728\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\u6700\u5927\u503c\uff0c\u521d\u59cb\u6700\u5927\u503c\u4e3a1\uff0c\u66f4\u6539\u67d0\u70b9\u65f6\uff0c\u66f4\u6539\u8be5\u70b9\u7684\u5b50\u6811\u90a3\u90e8\u5206\u7ebf\u6bb5\u6811\u7684\u6700\u5927\u503c\u3002\n\u64cd\u4f5c2\uff1a\u67e5\u8be2\u5230x~1\u8def\u5f84\u4e0a\u503c\u4e3a1\u7684\u7f16\u53f7\u6700\u5927\u7684\u539f\u7f16\u53f7\uff0c\n\u5229\u7528\u6811\u5256+\u7ebf\u6bb5\u6811\u5728\u5411\u4e0a\u8df3\u7684\u65f6\u5019\u6c42\u51fa\u6700\u5927\u503c\u3002\n\u770b\u4e86\u770b\u9898\u89e3\u83ca\u82e3\u662f\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u52a0\u4e8c\u5206\u3002\u3002tql\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define C getchar()\ntypedef long long ll;\n#define pi acos(-1.0)\n#define INF 0x3f3f3f3f\n#define mod 1000000007\nconst int MAXN = 1e5 + 10;\n#define pii pair<int, int>\n#define endll printf(\"\\n\")\n#define stop system(\"pause\")\n#define lowbit(x) ((x) & (-x))\n#define Temp template<typename T>\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define mem(a, b) memset(a, b, sizeof(a))\nTemp inline void rd(T &s)\n{\n    s = 0;T t = 1, k = C;\n    for (; k < '0' || k > '9'; k = C)if (k == '-') t = -1;\n    for (; k >= '0' && k <= '9'; k = C) s = (s << 1) + (s << 3) + (k ^ 48);\n    s *= t;\n}\nint  n;\nvector<int>g[MAXN];\n//dfs1\nint son[MAXN],fa[MAXN];\nint dep[MAXN],size[MAXN];\n//dfs2\nint top[MAXN],id[MAXN],rk[MAXN];\n//tree\nint cnt;\nstruct Segment_Tree\n{\n    #define lson rt<<1,l,mid\n    #define rson rt<<1|1,mid+1,r\n    int maxv[MAXN<<2];int lazy[MAXN<<2];\n    inline int ls(int p) {return p<<1;}\n    inline int rs(int p) {return p<<1|1;}\n    void push_up(int p) {maxv[p] = max(maxv[ls(p)],maxv[rs(p)]);}\n    void push_down(int p)\n    {\n        maxv[ls(p)]=max(maxv[ls(p)],lazy[p]);\n        maxv[rs(p)]=max(maxv[rs(p)],lazy[p]);\n        lazy[ls(p)]=max(lazy[ls(p)],lazy[p]);\n        lazy[rs(p)]=max(lazy[rs(p)],lazy[p]);\n        lazy[p]=0;\n    }\n    void build(int rt,int l,int r)\n    {\n        lazy[rt]=0;\n        if(l==r) {maxv[rt]=1; return ;}\n        int mid = (l+r)>>1;\n        build(lson);build(rson);push_up(rt);\n    }\n    int Querymax(int ql,int qr,int rt,int l,int r)\n    {\n        if(ql<=l && r<=qr) return maxv[rt];\n        if(lazy[rt]) push_down(rt);\n        int Max=-INF ,mid=(l+r)>>1;\n        if(ql<=mid) Max = max(Max,Querymax(ql,qr,lson));\n        if(qr>mid) Max = max(Max,Querymax(ql,qr,rson));\n        return Max;\n    }\n    void update(int q,int v,int rt,int l,int r)//\u5355\u70b9\u66f4\u65b0\n    {\n        int mid = (l+r)>>1;\n        if(l==r) {maxv[rt] = v; return ;}\n        if(q<=mid) update(q,v,lson);\n        else update(q,v,rson);\n        push_up(rt);\n    }\n    void update(int ql,int qr,int v,int rt,int l,int r)//\u533a\u95f4\u66f4\u65b0\n    {\n        if(ql>r||qr<l) return;\n        if(ql<=l && qr>=r) {lazy[rt]=max(lazy[rt],v),maxv[rt]=max(maxv[rt],v);return;}\n        if(lazy[rt]) push_down(rt);\n        int mid=(l+r)>>1;\n        update(ql,qr,v,lson);update(ql,qr,v,rson);\n        push_up(rt);\n    }\n}tree;\nvoid dfs1(int u,int pre)\n{\n    size[u]=1;dep[u]=dep[pre]+1;fa[u]=pre;\n    int maxson=-1;\n    for(int i=0;i<g[u].size();i++)\n    {\n        int v=g[u][i];\n        if(v==pre) continue;\n        dfs1(v,u);\n        size[u]+=size[v];\n        if(size[v]>maxson) maxson=size[v],son[u]=v;\n    }\n}\nvoid dfs2(int x,int topx)//\n{\n    top[x]=topx;id[x]=++cnt;rk[cnt]=x;\n    if(son[x]!=-1) dfs2(son[x],topx);\n    for(int i=0;i<g[x].size();i++)\n    {\n        int v=g[x][i];\n        if(v==fa[x]||v==son[x]) continue;\n        dfs2(v,v);\n    }\n}\nint qmax(int x,int y)\n{\n    int ans=1;\n    for(;top[x]!=top[y];x=fa[top[x]])\n    {\n        if(dep[top[x]]<dep[top[y]]) swap(x,y);//\n        ans=max(tree.Querymax(id[top[x]],id[x],1,1,n),ans);\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    ans=max(tree.Querymax(id[x],id[y],1,1,n),ans);\n    return rk[ans];\n}\n\nint main()\n{\n    rd(n);int q;rd(q);\n    FOR(i,1,n-1)\n    {\n        int u,v;rd(u);rd(v);\n        g[u].push_back(v);\n        //g[v].push_back(u);\n    }\n    //\n    mem(son,-1);dep[0]=0;\n    dfs1(1,0);\n    cnt=0;\n    dfs2(1,1);\n    tree.build(1,1,n);\n    while(q--)\n    {\n        char s[11];\n        scanf(\"%s\",s);int x;rd(x);\n        if(s[0]=='C') tree.update(id[x],id[x]+size[x]-1,id[x],1,1,n);//\n        else printf(\"%d\\n\",qmax(x,1));//\u8be2\u95ee\u8def\u5f84\u6700\u5927\u503c\n    }\n    //stop;\n    return 0;\n}\n\n```\n",
        "postTime": 1569163196,
        "uid": 224332,
        "name": "Herlo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "### \u543c\u9898\u554a\uff01\n\n\u9996\u5148\u770b\u4e00\u4e0b\u5c0f\u6570\u636e/\u968f\u673a\u6570\u636e\u7684\u90e8\u5206\n\n\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\n\n\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\n\n\u5982\u679c\u9047\u5230\u4e00\u4e2a\u4fee\u6539\u5c31\u76f4\u63a5\u4e0b\u653e\u5230\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\u5f53\u4e2d\uff0c\u66f4\u65b0\n\n\u8fd9\u6837\uff0c\u6bcf\u6b21\u4fee\u6539\u6700\u574f\u90fd\u662f$O(n)$\u7684,\u67e5\u8be2$O(1)$ \n\n\u770b\u8d77\u6765\u8c8c\u4f3c\u5f88\u4e0d\u9519\uff0c\u4e0d\u8fc7\u5f88\u5bb9\u6613\u88ab\u4e00\u6761\u94fe\u7684\u4fee\u6539\u64cd\u4f5c\u5361\u5230\u98de\u8d77\n\n***GG my friend !***\n\n\u8003\u8651\u6027\u80fd\u74f6\u9888\uff1a\n\n- \u6bcf\u6b21\u6709\u5927\u91cf\u7684\u8bbf\u95ee\u90fd\u662f\u65e0\u6548\u7684\uff0c\u5373\u5f88\u591a\u70b9\u90fd\u6ca1\u6709\u66f4\u65b0\n- \u6bcf\u6b21\u5bf9\u5b50\u6811\u5185\u7684\u70b9\u66f4\u65b0\u6700\u503c\u7684\u8bdd\u4e00\u4e2a\u4e2a\u904d\u5386\u592a\u50bb\n\n\n\n\u8fd9\u6837\u4f18\u5316\u7684\u601d\u8def\u5c31\u5f88\u6e05\u6670\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u89e3\u51b3\u6570\u636e\u7ed3\u6784\u9898\u7684\u901a\u7528\u601d\u8def\u6765\u89e3\u9898\n\n\n\n**1.\u79bb\u7ebf\u5904\u7406\uff1f**\n\n\u5148\u8bfb\u8fdb\u6765\u6240\u6709\u8be2\u95ee\uff0c\u79bb\u7ebf\u5904\u7406\u6574\u68f5\u6811\u6700\u540e\u7684\u6837\u5b50\uff0c\u518d\u641e\u51fa\u6bcf\u4e2a\u70b9\u88ab\u4fee\u6539\u7684\u65f6\u95f4\uff1f\n\n\u597d\u50cf\u4e0d\u53ef\u505a\n\n\u770b\u5230\u9898\u89e3\u533a\u6709\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u7956\u5148\u5173\u7cfb\u7684\u505a\u6cd5\uff0c\u63a8\u8350\u5b66\u4e60\n\n~~\u79bb\u7ebf\u505a\u6cd5\u8fa3\u9e21(\u82df\u5934)~~\n\n\n\n\n\n**2.\u5927\u529b\u7ef4\u62a4\uff1f**\n\n\u76f4\u63a5\u5957\u7528\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u601d\u8def\n\n\u5bf9\u5b50\u6811\u5185\u7684\u70b9\u6240\u5f97\u7684\u4e00\u6bb5\u533a\u95f4(dfs\u5e8f\u5728\u4e00\u5757)\u8fdb\u884c\u66f4\u65b0\n\n\u80fd\u4e0d\u80fd\u505a\u6211\u8fd8\u771f\u7684\u4e0d\u77e5\u9053\n\n\u597d\u50cf\u9898\u89e3\u533a\u6709\u4eba\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u601d\u60f3\u8fc7\u4e86\n\n\n\n\n\n**2.\u4e8c\u5206\uff1f**\n\n\u5728\u4e00\u6761\u5230\u6839\u7684\u8def\u5f84\u4e0a\u4e8c\u5206\u4e00\u6bb5\u533a\u95f4\u6709\u6ca1\u6709\u6807\u8bb0\n\n\u7531\u4e8e\u662f\u52a8\u6001\u7684\u4f30\u8ba1\u500d\u589e\u5e94\u8be5GG\u4e86\n\n\u786c\u8981\u5199\u7684\u8bdd\u53ef\u4ee5\u5199\u4e2a\u6811\u72b6\u6570\u7ec4  +  \u666e\u901a\u7684\u6811\u94fe\u5256\u5206\uff08\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u533a\u95f4\u6807\u8bb0\u6570\u91cf\uff09\n\n\u8fd9\u6837\u7684\u8bdd\u4e8c\u5206\u6df1\u5ea6\u5373\u53ef\n\n\u6811\u72b6\u6570\u7ec4\u5f88\u597d\u5199\uff0c\u4f46\u8fd9\u4e2a\u4e8c\u5206\u4f30\u8ba1\u4e0d\u592a\u597d\u5199\n\n\u8fd9\u6837\u6211\u4eec\u4fbf\u5f97\u5230\u4e86\u4e00\u4e2a$(O(nlog^2n))$ \u7684\u4f18\u79c0\u505a\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u4e86\n\n\u7136\u800c\u4e24\u4e2alog\u8fc7\u4e8e\u5c51\uff0c\u8003\u8651\u4e00\u4e2alog\n\n~~\u542c\u8bf4\u957f\u94fe\u5256\u5206\u53ef\u4ee5$O(1)$\u7ef4\u62a4$2^k$\u7956\u5148\u4fe1\u606f?~~\n\n\n\n\n\n**3.\u9002\u5f53\u8f6c\u5316--\u6811\u94fe\u5256\u5206\u88f8\u9898\uff1f**\n\n\u4e0a\u9762\u7684\u60f3\u6cd5\u52a0\u8d77\u6765\u53ea\u82b1\u4e86\u62115\u5206\u949f\u5de6\u53f3\u5c31\u5168\u90e8\u5f03\u4e86\n\n\u6709\u6ca1\u6709\u7b80\u5355\u4e00\u70b9\u7684\u5b9e\u73b0\u5462\uff1f\n\n![1566574244356](https://cdn.luogu.com.cn/upload/pic/74455.png)\n\n\u8003\u8651\u6211\u4eec\u6807\u8bb0\u4e862\n\n\u90a3\u4e48\u5bf9\u4e8e2\u4e0b\u9762\u7684\u70b9\uff0c1\u5c31\u6ca1\u7528\u4e86\n\n\u8003\u8651\u4e0a\u9762\u4e8c\u5206\u505a\u6cd5\u7684\u601d\u8def\n\n\u6211\u4eec\u62c9\u4e00\u6761\u4ece\u67e5\u8be2\u70b9(\u5982\u56fe\u70b94)\u5230\u70b91\u7684\u8def\u5f84\n\n\u53ea\u8981\u67e5\u8be2\u7b2c\u4e00\u4e2a\u78b0\u5230\u7684\u6709\u6807\u8bb0\u7684\u70b9\u5373\u53ef\n\n**----\u4e5f\u5c31\u662fdfs\u5e8f\u6700\u5c0f\u7684\u70b9\uff01**\n\n\u8fd9\u4e0d\u5c31\u4e00\u6811\u5256\u677f\u5b50\u4e48\uff1f\n\n\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u6c42\u6700\u5c0f\u503c\n\n\u67e5\u8be2\u8fd4\u56de\u6811\u5256\u4e2d\u7ef4\u62a4\u7684rank\u503c(dfs\u5e8f\u4e3ai\u7684\u8282\u70b9\u7f16\u53f7)\u5373\u53ef\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#define ls (o<<1)\n#define rs (o<<1|1)\nusing namespace std;\ninline int read(){\n\tint x;scanf(\"%d\",&x);return x;\n}\nconst int N =1e5+5;\nint head[N],tot,fa[N],son[N],sz[N],dep[N],top[N],id[N],rk[N],clk,n,val[N<<2];\nstruct Edge{\n\tint to,nxt;\n}e[N<<1];\ninline void addEdge(int u,int v){\n\te[++tot].nxt =head[u];head[u] =tot;e[tot].to =v;\n}\ninline void dfs(int u){\n\tsz[u] =1;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v =e[i].to;\n\t\tif(v==fa[u])\tcontinue;\n\t\tfa[v] =u;\n\t\tdep[v] =dep[u] +1;\n\t\tdfs(v);\n\t\tsz[u] +=sz[v];\n\t\tif(sz[v]>sz[son[u]])\tson[u] =v;\n\t}\n}\ninline void link(int u,int t){\n\ttop[u] =t;\tid[u] =++clk;\trk[clk] =u;\n\tif(!son[u])\treturn ;\n\tlink(son[u],t);\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v =e[i].to;\n\t\tif(v!=fa[u] && v!=son[u])\tlink(v,v);\n\t}\n}\ninline void update(int o){\n\tval[o] =max(val[ls],val[rs]);\n}\ninline void modify(int o,int l,int r,int x,int v){\n\tif(l==r)\treturn (void)(val[o] =v);\n\tint mid =(l+r) >>1;\n\tif(x<=mid)\tmodify(ls,l,mid,x,v);\n\telse modify(rs,mid+1,r,x,v);\n\tupdate(o);\n}\ninline int query(int o,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr)\treturn val[o];\n\tint mid =(l+r) >>1,ans =0;\n\tif(ql<=mid)\tans =max(ans,query(ls,l,mid,ql,qr));\n\tif(mid+1<=qr)\tans =max(ans,query(rs,mid+1,r,ql,qr));\n\treturn ans;\n}\ninline int askRan(int x,int y){\n\tint ans =0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])\tswap(x,y);\n\t\tans =max(ans,query(1,1,n,id[top[x]],id[x]));\n\t\tx =fa[top[x]];\n\t}\n\tif(dep[x] > dep[y])\tswap(x,y);\n\tans =max(ans,query(1,1,n,id[x],id[y]));\n\treturn ans;\n}\nint main(){\n\tn =read();\tint T =read();\n\tfor(int i=1;i<=n-1;++i){\n\t\tint u =read(),v =read();\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tdfs(1);\n\tlink(1,1);\n\tmodify(1,1,n,id[1],id[1]);\n\twhile(T--){\n\t\tchar op[5];\tscanf(\"%s\",op);\n\t\tint x =read();\n\t\tif(op[0]=='C')\tmodify(1,1,n,id[x],id[x]);\n\t\telse printf(\"%d\\n\",rk[askRan(1,x)]);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1566574382,
        "uid": 104000,
        "name": "Kisaragi_77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "### \u6765\u4e00\u53d1\u5927\u66b4\u529b\n\n   \u5bf9\u4e8e\u67d0\u4e2a\u8be2\u95ee\u8282\u70b9\uff0c\u4e8c\u5206\u7b54\u6848\u6240\u5728\u7684\u6df1\u5ea6\uff0c\u82e5\u8be5\u6df1\u5ea6\u5230\u8be5\u8282\u70b9\u4e0a\u7684\u533a\u95f4\u548c>0\uff0c\u8bf4\u660e\u5176\u4e2d\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u589e\u52a0\u6df1\u5ea6\u7ee7\u7eed\u4e8c\u5206\uff0c\u5426\u5219\u51cf\u5c0f\u6df1\u5ea6\n\n\u7ebf\u6bb5\u6811\u4e0a\u7684\u64cd\u4f5c\uff1a\u5355\u70b9\u4fee\u6539+\u533a\u95f4\u67e5\u8be2\uff08\u533a\u95f4\u548c\uff09\n\n\u5173\u4e8e\u65f6\u95f4\uff1a\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^{2}n)$\n\u867d\u7136\u4e0d\u662f\u6700\u4f18\u89e3\u6cd5\uff0c\u4f46\u80fd\u8fc7\u4e86\uff0c\u7a0d\u5fae\u5361\u4e00\u4e0b\uff0c\u603b\u65f6\u95f4\u5927\u6982900ms,\u6700\u5927\u70b9300ms,\u5982\u679c$O(nlogn)$\u7684\u73a9\u5bb6\u592a\u6ce8\u91cd\u5361\u5e38\u7684\u8bdd\u8fd8\u662f\u53ef\u4ee5\u78be\u7684,\u5f53\u7136\u6211\u7684\u4ee3\u7801\u8fd8\u6709\u4f18\u5316\u4f59\u5730...\uff08\u6bd4\u5982\u4f20\u53c2\u90e8\u5206\u53ef\u4ee5\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u5361\u5e38\u73a9\u5bb6\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\uff08\u8fd8\u6709fread\u4e4b\u7c7b\u7684\u90fd\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\uff09\uff09\n\n~~\u5173\u4e8e\u6700\u4f18\u89e3\u6cd5\uff1a\u6211\u6709\u4e00\u4e2a\u7edd\u5999\u7684\u601d\u8def\uff0c\u8fd9\u91cc\u7bc7\u5e45\u592a\u5c0f\u5199\u4e0d\u5c0f\uff0c\u4f60\u53ef\u4ee5\u770b\u522b\u4eba\u7684\u9898\u89e3~~\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define writeln(x)  write(x),puts(\"\")\nusing namespace std;\ninline int read(){\n\tint ans=0,f=1;char chr=getchar();\n\twhile(!isdigit(chr)){if(chr=='-') f=-1;chr=getchar();}\n\twhile(isdigit(chr)){ans=(ans<<3)+(ans<<1)+chr-48;chr=getchar();}\n\treturn ans*f;\n}void write(int x){\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n}const int M=100005;char opt[2];\nint head[M<<1],ver[M<<1],x,y,nxt[M<<1],tot,n,m,dep[M],fa[M],tp[M],sz[M],son[M],idx[M],s[M<<2],rk[M];\ninline void add(int x,int y){ver[++tot]=y,nxt[tot]=head[x],head[x]=tot;}\nvoid dfs1(int x,int f){\n\tsz[x]=1;dep[x]=dep[f]+1,fa[x]=f;\n\tfor(register int i=head[x];i;i=nxt[i]){\n\t\tif(!dep[ver[i]]){\n\t\t\tdfs1(ver[i],x),sz[x]+=sz[ver[i]];\n\t\t\tif(sz[son[x]]<sz[ver[i]]) son[x]=ver[i];\n\t\t}\n\t}\n}int t;\nvoid dfs2(int x,int topf){\n\tidx[x]=++t;tp[x]=topf;rk[t]=x;\n\tif(!son[x]) return;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x];i;i=nxt[i])\n\t\tif(!idx[ver[i]]) dfs2(ver[i],ver[i]);\n}\n#define ls (i<<1)\n#define rs (i<<1|1)\n#define mid (l+r>>1)\ninline void Push_Up(int i){s[i]=s[ls]+s[rs];}\nvoid Update(int i,int l,int r,int pos,int x){\n\tif(l==r){s[i]=x;return;}\n\tif(pos<=mid) Update(ls,l,mid,pos,x);\n\telse Update(rs,mid+1,r,pos,x);\n\tPush_Up(i);\n}\nint Query(int i,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr) return s[i];int ans=0;\n\tif(ql<=mid) ans+=Query(ls,l,mid,ql,qr);\n\tif(qr>mid)  ans+=Query(rs,mid+1,r,ql,qr);\n\treturn Push_Up(i),ans;\n}\ninline void Ask(int x){\n\tif(Query(1,1,n,idx[x],idx[x])) {cout<<x<<endl;return;}\n\twhile(x){\n\t\tint t=Query(1,1,n,idx[tp[x]],idx[x]);\n\t\tif(t==0){x=fa[tp[x]];continue;}\n\t\telse{\n\t\t\tregister int ll=idx[tp[x]],rr=idx[x],midd,ans;\n\t\t\twhile(ll<=rr){\n\t\t\t\tmidd=ll+rr>>1;\n\t\t\t\tif(Query(1,1,n,midd,rr)) ans=midd,ll=midd+1;\n\t\t\t\telse rr=midd-1;\n\t\t\t}return (void)(writeln(rk[ans]));\n\t\t}\n\t}\n}\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<n;++i)x=read(),y=read(),add(x,y),add(y,x);\n\tdfs1(1,0),dfs2(1,1);Update(1,1,n,1,1);\n\twhile(m--){\n\t\tscanf(\"%s\",opt+1);x=read();\n\t\tif(opt[1]=='Q')\tAsk(x);\n\t\telse\tUpdate(1,1,n,idx[x],1);\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1555979720,
        "uid": 9287,
        "name": "LevenKoko",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "## P4092 [HEOI2016/TJOI2016]\u6811\uff08\u9898\u89e3\uff09\n\n**\u9898\u76ee\u4f20\u9001\u95e8\uff1a**  \n[\u70b9\u6211](https://www.luogu.org/problemnew/show/P4092)\n\n**\u89e3\u9898\u601d\u8def\uff1a**  \n\u7528\u7ebf\u6bb5\u6811\u4e0edfs\u5e8f\n\n**\u6ce8\u610f\u70b9\uff1a**  \n- dfs\u5e8f\u4e0e\u539f\u5e8f\u8981\u5206\u6e05\n- \u4fee\u6539\u65f6\u5e76\u4e0d\u80fd\u76f4\u63a5\u8d4b\u503c\uff0c\u8981\u53d6\u6700\u5927\u503c\u3002\n\n**\u89e3\u9898\u8fc7\u7a0b\uff1a**  \n\u5148\u628a\u539f\u6570\u8d4b\u4e88\u6309\u7167dfs\u5e8f\uff0c\u4ee5\u53ca\u9006dfs\u5e8f\u3002  \n~~\u73b0\u5728\u7ecf\u89c2\u5bdf\u5f97\uff0c~~\u6bcf\u4e00\u4e2a\u70b9\u7684\u5b50\u5b59\u4fbf\u662f\u3010\u5b83\uff0c\u5b83\u7684\u6700\u53f3\u5b50\u8282\u70b9\u3011\u4e2d\u6240\u6709\u6574\u6570\u3002\n\n\u63a5\u4e0b\u6765\u4fbf\u53ef\u4ee5\u5411\u7ebf\u6bb5\u6811\u601d\u8003\u4e86\uff0c\u5b83\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c  \n\u652f\u6301\u533a\u95f4\u6539\u6700\u5927\u503c\uff0c\u67e5\u6700\u5927\u503c\u3002\n\n**PS** *dfs\u5e8f\uff1a*  \n\u628a\u539f\u6811\u6309\u7167dfs\u7684\u5e8f\u53f7\u7f16\u53f7\uff0c\u5148dfs\u5230\u7684\u8282\u70b9dfs\u5e8f\u5c0f  \n\u4f8b\u5982\u4e0b\u56fe\u4e2d\u5c31\u662f\u6837\u4f8b\uff0c\u9ed1\u4f53\u662fdfs\u5e8f\uff0c\u84dd\u4f53\u662f\u9898\u76ee\u7ed9\u5b9a\u5e8f\uff08\u539f\u5e8f\uff09\n![\u51fa\u9519\u5566](https://cdn.luogu.com.cn/upload/pic/51164.png)\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ull unsigned long long\nusing namespace std;\nconst ll Max=100005;\nstruct data\t//\u7ebf\u6bb5\u6811\u8282\u70b9\n{\n\tll num,flag;\n\tdata() {num=1;flag=0;}\n\tdata(ll a,ll b):num(a),flag(b) {}\n};\nstruct tree\t//\u9898\u76ee\u4e2d\u7ed9\u7684\u6811\n{\n\tvector<ll>b[Max];\n\tll dfs_xu[Max],ni_dfs_xu[Max],size;\n\tinline void clean()\t//\u6e05\u7a7a\n\t{\n\t\tfor(ll i=0;i<Max;i++) b[i].clear();\n\t}\n\tinline void add_edge(ll x,ll y)\t//\u52a0\u8fb9\n\t{\n\t\tb[x].push_back(y);\n\t}\n\tvoid dfs(ll now,ll fa)\t//\u6c42dfs\u5e8f\n\t{\n\t\tif(now==1) size=0;\n\t\tsize++;\n\t\tdfs_xu[now]=size;\n\t\tfor(ull i=0;i<b[now].size();i++)\n\t\t\tif(b[now][i]!=fa)\n\t\t\t\tdfs(b[now][i],now);\n\t}\n\tinline void ni_dfs()\t//\u6c42\u9006dfs\u5e8f\n\t{\n\t\tfor(ll i=1;i<=size;i++) ni_dfs_xu[dfs_xu[i]]=i;\n\t}\n\tll rightest(ll n)\t//n\u662f\u539f\u5e8f,rightest\u662f\u539f\u5e8f;\n\t{\n\t\tif(b[n].size()==0) return n;\n\t\treturn rightest(b[n][b[n].size()-1]);\n\t}\n};\nstruct cut_tree\t//\u7ebf\u6bb5\u6811\n{\n\tdata tre[Max<<2];\n\tinline void down(ll rt,ll l,ll r)\t//\u4e0b\u63a8\u6807\u8bb0\uff08\u6709\u70b9\u70e6\uff09\n\t{\n\t\tif(!tre[rt].flag) return;\n\t\tif(l==r)\n\t\t{\n\t\t\ttre[rt].num=max(tre[rt].num,tre[rt].flag);\t//\u6ce8\u610f\uff01\uff01\uff01\u4e0d\u5e94\u8be5\u76f4\u63a5\u8d4b\u503c\n\t\t\ttre[rt].flag=0;\n\t\t\treturn;\n\t\t}\n\t\ttre[rt<<1].flag=max(tre[rt].flag,tre[rt<<1].flag);\n\t\ttre[rt<<1|1].flag=max(tre[rt].flag,tre[rt<<1|1].flag);\n\t\ttre[rt].num=max(tre[rt].num,tre[rt].flag);\n\t\ttre[rt].flag=0;\n\t}\n\tinline void up(ll rt,ll l,ll r)\t//\u4e0a\u63a8\u6570\u503c\n\t{\n\t\ttre[rt].num=max(tre[rt<<1].num,tre[rt<<1|1].num);\n\t}\n\tll csearch(ll rt,ll l,ll r,ll d)\t//\u67e5\u8be2\n\t{\n\t\tdown(rt,l,r);\n\t\tif(l==d&&r==d) return tre[rt].num;\n\t\tif(d<=(l+r)>>1) return csearch(rt<<1,l,(l+r)>>1,d);\n\t\treturn csearch(rt<<1|1,((l+r)>>1)+1,r,d);\n\t}\n\tvoid change(ll rt,ll l,ll r,ll dl,ll dr,ll dc)\t//\u4fee\u6539\n\t{\n\t\tif(l>r) return;\n\t\tif(dl>r) return;\n\t\tif(l>dr) return;\n\t\tif(dl<=l&&r<=dr)\n\t\t{\n\t\t\ttre[rt].flag=max(tre[rt].flag,dc);\n\t\t\treturn;\n\t\t}\n\t\tchange(rt<<1,l,(l+r)>>1,dl,dr,dc);\n\t\tchange(rt<<1|1,((l+r)>>1)+1,r,dl,dr,dc);\n\t\tup(rt,l,r);\n\t}\n};\ncut_tree tr;\ntree a;\nint main()\n{\n\tll n,q;\n\tscanf(\"%lld%lld\",&n,&q);\n\ta.clean();\n\tfor(ll i=1;i<n;i++)\n\t{\n\t\tll x,y;\n\t\tscanf(\"%lld%lld\",&x,&y);\n\t\ta.add_edge(x,y);\n\t}\n\ta.dfs(1,0);\n\ta.ni_dfs();\n\twhile(q--)\n\t{\n\t\tchar c;ll x;\n\t\tcin>>c;scanf(\"%lld\",&x);\n\t\tif(c=='C')\n\t\t{\n\t\t\tll y=a.rightest(x);\n\t\t\ttr.change(1,1,n,a.dfs_xu[x],a.dfs_xu[y],a.dfs_xu[x]);\t//\u6b64\u5904\u8981\u641e\u6e05\uff01\uff01\uff01\n\t\t}\n\t\tif(c=='Q')\n\t\t{\n\t\t\tll y=tr.csearch(1,1,n,a.dfs_xu[x]);\n\t\t\tprintf(\"%lld\\n\",a.ni_dfs_xu[y]);\t//\u8fd8\u6709\u6b64\u5904\n\t\t}\n\t}\n\treturn 0;\n}\n```\n[~~\u6ca1\u6709\u5e7f\u544a~~](https://daniu.blog.luogu.org/)",
        "postTime": 1549632091,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P4092 [HEOI2016/TJOI2016]\u6811\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u53c2\u8003\u4e86[\u768e\u6708\u534a\u6d12\u82b1\u7684\u535a\u5ba2](https://www.cnblogs.com/pks-t/p/9222857.html)\n\n\u770b\u5230\u6811\u60f3\u5230\u6811\u5256\uff0c\u7531\u4e8e\u8981\u53d6\u8ddd\u81ea\u5df1\u5230\u6839\u79bb\u81ea\u5df1\u6700\u8fd1\u7684\u6807\u8bb0\u70b9\uff0c\u521a\u5f00\u59cb\u60f3\u5230\u7ebf\u6bb5\u6811\u91cc\u5b58\u8282\u70b9\u6df1\u5ea6\uff0c\u67e5\u8be2\u65f6\u8fd4\u56de\u6700\u5927\u503c\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u53ea\u80fd\u5f97\u5230\u8282\u70b9\u6df1\u5ea6\uff0c\u65e0\u6cd5\u5f97\u77e5\u8282\u70b9\u7f16\u53f7\uff0c\u5c31\u60f3\u500d\u589e\u4e71\u641e\u4e00\u4e0b\uff0c\u6c42\u51fa\u6807\u8bb0\u70b9\uff0c\u590d\u6742\u5ea6$O(\\log ^ {3}\\;N)$\n\n\u867d\u7136\u53ef\u4ee5\u8fc7\u4f46\u662f\u5b9e\u73b0\u6709\u70b9\u590d\u6742\uff0c\u5c31\u770b\u4e86\u4e00\u4e0b\u4e0a\u9762\u7684\u535a\u5ba2\n\n\u771f\u7684\u5f88\u5f3a\uff0c\u7531\u4e8e\u6811\u5256dfs\u65f6\u4e00\u6761\u94fe\u4e0a\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u5728\u6b64\u94fe\u4e2d\u4e14\u6df1\u5ea6\u8d8a\u5927**\u7ebf\u6bb5\u6811\u7f16\u53f7**\u8d8a\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u91cc\u5b58\u5f53\u524d\u8282\u70b9\u7684**\u7ebf\u6bb5\u6811\u7f16\u53f7**\uff0c\u4e5f\u8fbe\u5230\u4e86\u7ef4\u62a4\u6df1\u5ea6\u6700\u5927\u503c\u7684\u6548\u679c\n\n\u7b54\u6848\u5c31\u662fori [ (\u4e00\u6761\u94fe\u4e2d) MAX  index] (ori\u4e3a\u7ebf\u6bb5\u6811\u7f16\u53f7\u56de\u627e\u6811\u539f\u59cb\u7f16\u53f7\u7684\u6570\u7ec4)\n\n\u590d\u6742\u5ea6$O(\\log ^ {2}\\;N)$\n\n\u4e00\u76f4\u90fd\u662f\u628a\u6811\u5256\u5f53\u677f\u5b50\u7528\u7684\uff0c\u73b0\u5728\u53d1\u73b0\u7ed3\u5408\u6027\u8d28\u8fd8\u6709\u66f4\u591a\u7528\u5904\uff0c\u6211\u8fd8\u8981\u52a0\u6cb9\u554a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 1000019,INF = 1e9;\nint num,na,nume,cnt;\nint head[maxn];\nstruct Node{int v,nxt;}E[maxn * 2];\nvoid add(int u,int v){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    head[u] = nume;\n    }\nint size[maxn],wson[maxn],dep[maxn],fa[maxn],top[maxn],pos[maxn],ori[maxn];\nint v[maxn];\nvoid dfs1(int id,int F){\n    size[id] = 1;\n    for(int i = head[id];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(v == F)continue;\n        dep[v] = dep[id] + 1;\n        fa[v] = id;\n        dfs1(v,id);\n        size[id] += size[v];\n        if(size[v] > size[wson[id]])wson[id] = v;\n        }\n    }\nvoid dfs2(int id,int TP){\n    top[id] = TP;\n    pos[id] = ++cnt;\n    ori[cnt] = id;\n    if(!wson[id])return ;\n    dfs2(wson[id],TP);\n    for(int i = head[id];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(v == fa[id] || v == wson[id])continue;\n        dfs2(v,v);\n        }\n    }\n#define lid (id << 1)\n#define rid (id << 1) | 1\nstruct sag_tree{\n    int l,r,max;\n    }tree[maxn << 2];\nvoid build(int id,int l,int r){\n    tree[id].l = l;\n    tree[id].r = r;\n    if(l == r){\n        tree[id].max = 0;\n        return ;\n        }\n    int mid = (l + r) >> 1;\n    build(lid,l,mid);\n    build(rid,mid + 1,r);\n    tree[id].max = max(tree[lid].max,tree[rid].max);\n    }\nvoid update(int id,int val, int l,int r){\n    if(tree[id].l == l && tree[id].r == r){\n        tree[id].max = l;\n        return ;\n        }\n    int mid = (tree[id].l + tree[id].r) >> 1;\n    if(mid < l)update(rid,val,l,r);\n    else if(mid >= r)update(lid,val,l,r);\n    else update(lid,val,l,mid),update(rid,val,mid + 1,r);\n    tree[id].max = max(tree[lid].max,tree[rid].max);\n    }\nint query(int id,int l,int r){\n\tif(tree[id].l == l && tree[id].r == r)return tree[id].max;\n\tint mid = (tree[id].l + tree[id].r) >> 1;\n\tif(mid < l)return query(rid,l,r);\n\telse if(mid >= r)return query(lid,l,r);\n\telse return max(query(lid,l,mid),query(rid,mid + 1,r));\n\t}\nvoid Qmax(int x, int y){\n\tint ans = 0;\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x, y);\n\t\tans = query(1, pos[top[x]], pos[x]);\n\t\tif(ans){\n\t\t\tprintf(\"%d\\n\", ori[ans]);\n\t\t\treturn ;\n\t\t\t}\n\t\tx = fa[top[x]];\n\t\t}\n\tif(dep[x] > dep[y])swap(x, y);\n\tans = query(1, pos[x], pos[y]);\n\tprintf(\"%d\\n\", ori[ans]);\n\t}\nint main(){\n\tnum = RD();na = RD();\n\tfor(int i = 1;i <= num - 1;i++){\n\t\tint u = RD(),v = RD();\n\t\tadd(u,v),add(v,u);\n\t\t}\n\tdep[1] = 1;\n\tdfs1(1,-1);dfs2(1,1);\n\tbuild(1,1,num);\n\tupdate(1,pos[1],pos[1],pos[1]);\n\tfor(int i = 1;i <= na;i++){\n\t\tchar cmd;cin>>cmd;\n\t\tif(cmd == 'C'){\n\t\t\tint x = RD();\n\t\t\tupdate(1,pos[x],pos[x],pos[x]);\n\t\t\t}\n\t\telse{\n\t\t\tint x = RD();\n\t\t\tQmax(x,1);\n\t\t\t}\n\t\t}\n\treturn 0;\n\t}\n```",
        "postTime": 1530703060,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u7ec3\u4e60dfs\u5e8f\u7684\u597d\u9898\u3002\n\n\u5176\u4ed6\u9898\u89e3\u4e2d\u7684\u5173\u4e8e\u6df1\u5ea6\u7684\u7279\u5224\u5176\u5b9e\u6709\u4e2a\u7b80\u5355\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b50\u6811\u5185\u5bf9\u5f53\u524d\u8fbe\u6807\u8bb0\u8282\u70b9\u7684dfs\u5e8f\u53d6max\u5373\u53ef\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\u7684dfs\u5e8f\u4e00\u5b9a\u9012\u51cf.\n\n\u7136\u540e\u8bb0\u4e00\u4e0bdfs\u5e8f\u7684\u53cd\u51fd\u6570\u67e5\u8be2\u5373\u53ef.\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nvector<int>to[100005];\nint id  [100005];\nint uid [100005];\nint size[100005];\nint cnt = 0;\n\nvoid dfs(int now,int last){\n    id  [now] = ++ cnt;\n    uid [cnt] = now;\n    size[now] = 1;\n    for( auto next : to[now] ){\n        if( next == last )continue;\n        dfs( next,now );\n        size[now] += size[next];\t\n    }\n}\n\nnamespace SGT{\n    #define Lson ( now << 1 )\n    #define Rson ( Lson | 1 )\n    #define Ason P <= mid ? Lson : Rson\n    #define mid  ( ( l[now] + r[now] ) >> 1 )\n    #define Lrange Lson,L,min( mid,R )\n    #define Rrange Rson,max( mid + 1,L ),R\n    int l[400005];\n    int r[400005];\n    int v[400005];\n    \n    void build(int now,int L,int R){\n        l[now] = L;r[now] = R;\n        if( L == R )return ;\n        build( Lrange );build( Rrange );\n    }\n    \n    void modify(int now,int L,int R,int val){\n        if( v[now] > val )return ;\n        if( l[now] == L and r[now] == R )return void( v[now] = val );\n        if( L <= mid )modify( Lrange,val );\n        if( R >  mid )modify( Rrange,val );\n    }\n    \n    int query(int now,int P){\n        if( l[now] == r[now] )return v[now];\n        return max( v[now],query( Ason,P ) );\n    }\n}\n\nint main(){\n    int n,q;cin >> n >> q;\n    for(int i = 1;i < n;i ++){\n        int u,v;cin >> u >> v;\n        to[u].push_back(v);\n        to[v].push_back(u);\n    }\n    dfs( 1,1 );SGT::build( 1,1,n );SGT::modify( 1,1,n,1 );\n    while( q -- ){\n        char op;int x;cin >> op >> x;\n        if( op == 'C' ){\n            SGT::modify( 1,id[x],id[x] + size[x] - 1,id[x] );\n        }else{\n            printf( \"%d\\n\",uid[SGT::query( 1,id[x] )] );\n        }\t\n    }\n    return 0;\n}\n```",
        "postTime": 1540099680,
        "uid": 47240,
        "name": "bzy369258147",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    },
    {
        "content": "\u5927\u66b4\u529b\u3002\n\n\n\u9996\u5148\u5c06\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u8bbe\u4e3a1\uff0c\u6bcf\u6b21\u4fee\u6539\u53ea\u9700\u4ece\u8fd9\u4e2a\u70b9\u5f80\u4e0b\u641c\uff0c\u6536\u5230\u6253\u4e86\u6807\u8bb0\u7684\u70b9\u5c31\u9000\u51fa\uff0c\u5426\u5219\u66f4\u65b0\u7b54\u6848\u5e76\u7ee7\u7eed\u641c\u4e0b\u53bb\u3002\n\n\n\u4e8b\u5b9e\u4e0a\u4e00\u68f5\u626b\u628a\u6811\u5c31\u53ef\u4ee5\u5361\u6389\u3002\n\n\n\u4ee3\u7801\u5f88\u4e45\u4ee5\u524d\u5199\u7684\uff0c\u592a\u4e11\uff0c\u61d2\u5f97\u8d34\u4ee3\u7801\u4e86\u3002\n\n\n\u4f1a\u641c\u7d22\u7684\u90fd\u80fdAC\u8fd9\u9898\u3002\n",
        "postTime": 1515909110,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4092 \u3010[HEOI2016/TJOI2016]\u6811\u3011"
    }
]