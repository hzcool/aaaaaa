[
    {
        "content": "# \u592a\u6c34\u4e86,\n\n\u53ef\u80fd\u662f\u9898\u76ee\u96be\u5ea6\u865a\u9ad8, \u5413\u5f97\u522b\u4eba\u4e0d\u6562\u505a\u4e86\n\n~~\u8fd9\u4e2a\u9898\u5f88\u663e\u7136\u5c31\u662f\u4e00\u9053\u5927\u6a21\u62df~~\n\n\u4e8c\u5206 + SPFA\u5c31\u8f7b\u677eA\u4e86\n\n\u80e1\u4e71\u627e\u70b9\u8fde\u7ebf\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u4e86\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<vector>\n#include<bitset>\n#include<algorithm>\n#include<cstring>\n#include<map>\n#include<stack>\n#include<set>\n#include<cmath>\n#include<ext/pb_ds/priority_queue.hpp>\nusing namespace std;\n\nconst int maxn = 2010;\nconst int dx[4] = {0,1,0,-1};\nconst int dy[4] = {1,0,-1,0};\ntypedef long long LL;\nconst LL INF = 1E15;\nconst int inf = 2139062143;\nconst int T = 8;\n\nstruct Event{\n    int key,pos,typ;\n    Event(){}\n    Event(int key,int pos,int typ): key(key),pos(pos),typ(typ){}\n    bool operator < (const Event &B) const{\n        if (key < B.key) return 1;\n        if (key > B.key) return 0;\n        if (typ < B.typ) return 1;\n        return 0;\n    }\n}E[maxn*T];\n\nstruct Point{\n    int key,Num;\n    Point(){}\n    Point(int key,int Num): key(key),Num(Num){}\n    bool operator < (const Point &B) const {return key < B.key;}\n};\n\nstruct Edg{\n    int to,w;\n    Edg(){}\n    Edg(int to,int w): to(to),w(w){}\n};\n\nint n,Ti,sx,sy,tx,ty,cx,cy,tox,toy,tot,ax[maxn],Mark[maxn][maxn]\n    ,cnt,Cnt,Begin,End,px1[maxn],py1[maxn],px2[maxn],py2[maxn],ay[maxn]\n    ,Left[maxn*T],Right[maxn*T],num[maxn][maxn],unable[maxn*20];\nLL dis[maxn*20];\nbool vis[maxn*20];\n\nvector <Point> px[maxn];\nvector <Point> py[maxn];\nvector <Edg> v[maxn*20];\nqueue <int> Q;\n\nint getint()\n{\n    char ch = getchar();\n    int ret = 0,tmp = 1;\n    while (ch < '0' || '9' < ch) {\n        if (ch == '-') tmp = -1;\n        ch = getchar();\n    }\n    while ('0' <= ch && ch <= '9')\n        ret = ret*10 + ch - '0',ch = getchar();\n    return ret*tmp;\n}\n\nvoid Work()\n{\n    cx = cy = 1;\n    sort(ax + 1,ax + tox + 1);\n    for (int i = 2; i <= tox; i++)\n        if (ax[i] != ax[i-1])\n            ax[++cx] = ax[i];\n    sort(ay + 1,ay + toy + 1);\n    for (int i = 2; i <= toy; i++)\n        if (ay[i] != ay[i-1])\n            ay[++cy] = ay[i];\n    for (int i = 1; i <= n; i++) {\n        px1[i] = lower_bound(ax + 1,ax + cx + 1,px1[i]) - ax;\n        py1[i] = lower_bound(ay + 1,ay + cy + 1,py1[i]) - ay;\n        px2[i] = lower_bound(ax + 1,ax + cx + 1,px2[i]) - ax;\n        py2[i] = lower_bound(ay + 1,ay + cy + 1,py2[i]) - ay;\n    }\n    sx = lower_bound(ax + 1,ax + cx + 1,sx) - ax;\n    sy = lower_bound(ay + 1,ay + cy + 1,sy) - ay;\n    tx = lower_bound(ax + 1,ax + cx + 1,tx) - ax;\n    ty = lower_bound(ay + 1,ay + cy + 1,ty) - ay;\n}\n\nvoid Add(int x,int y) {ax[++tox] = x; ay[++toy] = y;}\nvoid Read()\n{\n    sx = getint();\n    sy = getint();\n    tx = getint();\n    ty = getint();\n    tox = toy = 0;\n    Add(sx,sy);\n    Add(tx,ty);\n    n = getint();\n    for (int i = 1; i <= n; i++) {\n        px1[i] = getint();\n        py1[i] = getint();\n        px2[i] = getint();\n        py2[i] = getint();\n        if (px1[i] > px2[i]) swap(px1[i],px2[i]);\n        if (py1[i] > py2[i]) swap(py1[i],py2[i]);\n        Add(px1[i],py1[i]);\n        Add(px2[i],py2[i]);\n    }\n}\n\nvoid SPFA()\n{\n    for (int i = 1; i <= cnt; i++)\n        dis[i] = INF,vis[i] = 0;\n    Q.push(Begin);\n    dis[Begin] = 0;\n    vis[Begin] = 1;\n    while (!Q.empty()) {\n        int k = Q.front(); \n        vis[k] = 0; Q.pop();\n        for (int i = 0; i < v[k].size(); i++) {\n            int to = v[k][i].to;\n            LL w = v[k][i].w;\n            if (dis[to] > dis[k] + w) {\n                dis[to] = dis[k] + w;\n                if (vis[to]) continue;\n                vis[to] = 1;\n                Q.push(to);\n            }\n        }\n    }\n    if (dis[End] == INF) puts(\"No Path\");\n    else printf(\"%lld\\n\",dis[End]);\n    for (int i = 1; i <= cnt; i++) v[i].clear();\n}\n\nint New(int x,int y,int WA)\n{\n    if (Mark[x][y] == Cnt) {\n        if (WA == -1)\n            unable[num[x][y]] = WA;\n        return -1;\n    }\n    Mark[x][y] = Cnt;\n    ++cnt;\n    px[x].push_back(Point(ay[y],cnt));\n    py[y].push_back(Point(ax[x],cnt));\n    unable[cnt] = WA;\n    num[x][y] = cnt;\n    return cnt;\n}\n\nvoid Add_Edgs()\n{\n    for (int i = 1; i <= cx; i++) {\n        if (!px[i].size()) continue;\n        sort(px[i].begin(),px[i].end());\n        for (int j = 1; j < px[i].size(); j++) {\n            int A = px[i][j-1].Num,B = px[i][j].Num;\n            int w = px[i][j].key - px[i][j-1].key;\n            if (unable[A] != 0) v[A].push_back(Edg(B,w));\n            if (unable[B] != 2) v[B].push_back(Edg(A,w));\n        }\n        px[i].clear();\n    }\n    for (int i = 1; i <= cy; i++) {\n        if (!py[i].size()) continue;\n        sort(py[i].begin(),py[i].end());\n        for (int j = 1; j < py[i].size(); j++) {\n            int A = py[i][j-1].Num,B = py[i][j].Num;\n            int w = py[i][j].key - py[i][j-1].key;\n            if (unable[A] != 1) v[A].push_back(Edg(B,w));\n            if (unable[B] != 3) v[B].push_back(Edg(A,w));\n        }\n        py[i].clear();\n    }\n}\n\nvoid Modify(int o,int l,int r,int pos,int typ)\n{\n    if (l == r) {\n        if (typ == 1) Left[o] = Right[o] = l;\n        else Left[o] = inf,Right[o] = 0;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (pos <= mid) Modify(o<<1,l,mid,pos,typ);\n    else Modify(o<<1|1,mid + 1,r,pos,typ);\n    Left[o] = min(Left[o<<1],Left[o<<1|1]);\n    Right[o] = max(Right[o<<1],Right[o<<1|1]);\n}\n\nint Lower(int o,int l,int r,int ql,int qr)\n{\n    if (ql > qr) return inf;\n    if (ql <= l && r <= qr) return Left[o];\n    int mid = (l + r) >> 1,ret = inf;\n    if (ql <= mid) ret = Lower(o<<1,l,mid,ql,qr);\n    if (ret < inf) return ret;\n    if (qr > mid) ret = Lower(o<<1|1,mid+1,r,ql,qr);\n    return ret;\n}\n\nint Upper(int o,int l,int r,int ql,int qr)\n{\n    if (ql > qr) return 0;\n    if (ql <= l && r <= qr) return Right[o];\n    int mid = (l + r) >> 1,ret = 0;\n    if (qr > mid) ret = Upper(o<<1|1,mid+1,r,ql,qr);\n    if (ret) return ret;\n    if (ql <= mid) ret = Upper(o<<1,l,mid,ql,qr);\n    return ret;\n}\n\nvoid Pre_Clear()\n{\n    sort(E + 1,E + tot + 1);\n    memset(Left,127,sizeof(Left));\n    memset(Right,0,sizeof(Right));\n}\n\nvoid Build()\n{\n    cnt = tot = 0; ++Cnt;\n    Begin = New(sx,sy,-1); \n    End = New(tx,ty,-1); \n    for (int i = 1; i <= n; i++) {\n        E[++tot] = Event(py1[i],px1[i],1);\n        E[++tot] = Event(py2[i] + 1,px1[i],2);\n        E[++tot] = Event(py1[i],px1[i],5);\n        E[++tot] = Event(py2[i],px1[i],3);\n        E[++tot] = Event(py1[i],px2[i],1);\n        E[++tot] = Event(py2[i] + 1,px2[i],2);\n        E[++tot] = Event(py1[i],px2[i],6);\n        E[++tot] = Event(py2[i],px2[i],4);\n    }\n    E[++tot] = Event(sy,sx,3);\n    E[++tot] = Event(sy,sx,6);\n    E[++tot] = Event(ty,tx,3);\n    E[++tot] = Event(ty,tx,6);\n    Pre_Clear();\n    for (int i = 1; i <= tot; i++) {\n        if (E[i].typ == 1) Modify(1,1,cx,E[i].pos,1);\n        else if (E[i].typ == 2) Modify(1,1,cx,E[i].pos,-1);\n        else if (E[i].typ == 3 || E[i].typ == 5) {\n            New(E[i].pos,E[i].key,-1);\n            int po = Upper(1,1,cx,1,E[i].pos - 1);\n            if (po) New(po,E[i].key,3);\n        }\n        else {\n            New(E[i].pos,E[i].key,-1);\n            int po = Lower(1,1,cx,E[i].pos + 1,cx);\n            if (po < inf) New(po,E[i].key,1);\n        }\n    }\n    \n    tot = 0;\n    for (int i = 1; i <= n; i++) {\n        E[++tot] = Event(px1[i],py1[i],1);\n        E[++tot] = Event(px2[i] + 1,py1[i],2);\n        E[++tot] = Event(px1[i],py1[i],5);\n        E[++tot] = Event(px2[i],py1[i],6);\n        E[++tot] = Event(px1[i],py2[i],1);\n        E[++tot] = Event(px2[i] + 1,py2[i],2);\n        E[++tot] = Event(px1[i],py2[i],3);\n        E[++tot] = Event(px2[i],py2[i],4);\n    }\n    E[++tot] = Event(sx,sy,3);\n    E[++tot] = Event(sx,sy,6);\n    E[++tot] = Event(tx,ty,3);\n    E[++tot] = Event(tx,ty,6);\n    Pre_Clear();\n    for (int i = 1; i <= tot; i++) {\n        if (E[i].typ == 1) Modify(1,1,cy,E[i].pos,1);\n        else if (E[i].typ == 2) Modify(1,1,cy,E[i].pos,-1);\n        else if (E[i].typ == 5 || E[i].typ == 6) {\n            New(E[i].key,E[i].pos,-1);\n            int po = Upper(1,1,cy,1,E[i].pos - 1);\n            if (po) New(E[i].key,po,2);\n        }\n        else {\n            New(E[i].key,E[i].pos,-1);\n            int po = Lower(1,1,cy,E[i].pos + 1,cy);\n            if (po < inf) New(E[i].key,po,0);\n        }\n    }\n    Add_Edgs();\n}\n\nint main()\n{\n    #ifdef DMC\n        freopen(\"DMC.txt\",\"r\",stdin);\n    #endif\n    \n    cin >> Ti;\n    while (Ti--) {\n        Read();\n        Work();\n        Build();\n        SPFA();\n    }\n    return 0;\n}\n```",
        "postTime": 1516499163,
        "uid": 49248,
        "name": "Slr\u795e\u9f99\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3632 \u3010[APIO2011]\u5bfb\u8def\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n\u8c03\u4e86\u4e09\u5929\u7ec8\u4e8e\u8fc7\u4e86\u3002  \n\u4e00\u9053\u57fa\u4e8e\u56fe\u8bba\u3001\u521d\u4e2d\u5e73\u9762\u51e0\u4f55\u57fa\u7840\u7684\u5927\u6a21\u62df\u3002  \n\u611f\u8c22 @[lovely_seele](https://www.luogu.com.cn/user/714821) \u63d0\u4f9b\u7684\u5e2e\u52a9\u3002  \n\u8d60\u9001\u4e00\u4e2a\u56fa\u5b9a $n=2$ \u7684[\u6570\u636e\u751f\u6210\u5668](https://www.desmos.com/calculator/emcwegdahq?lang=zh-CN)\uff0c\u5176\u4e2d\u6240\u6709\u70b9\u90fd\u53ef\u4ee5\u62d6\u52a8\u3002\u7eff\u70b9\u4e3a\u6d6e\u6807\uff0c\u6570\u957f\u5ea6\u7528\u3002  \n\u5f69\u86cb\uff1a[\u4e0d\u53ef\u4ee5\u201c\u4e0d\u53ef\u4ee5\uff0c\u603b\u53f8\u4ee4\u201d](https://www.luogu.com.cn/record/100308813)\u3002\n\n## \u9898\u610f\n\n\u5e73\u9762\u5185\u7ed9\u5b9a\u8d77\u70b9 $S$\u3001\u7ec8\u70b9 $E$ \u548c $n$ \u4e2a\u77e9\u5f62\u3002  \n\n- \u8d70\u4e0a\u4e0b\u5de6\u53f3\uff0c\u53ea\u80fd\u5728\u77e9\u5f62\u8fb9\u4e0a\u8f6c\u5411\uff0c\u5728\u5e73\u9762\u7684\u5176\u4ed6\u4f4d\u7f6e\u4e0d\u80fd\u8f6c\u5411\u3002  \n- \u4e0d\u80fd\u8fdb\u5165\u77e9\u5f62\u5185\u90e8\u3002  \n- \u53ef\u4ee5\u4ee5\u4efb\u610f\u65b9\u5411\u4ece\u8d77\u70b9\u51fa\u53d1\u3002\n\n\u6c42\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u6216\u62a5\u544a\u65e0\u89e3\u3002\n\n\u4f8b\u5982\uff0c\u672c\u9898\u6837\u4f8b\u4e2d\u7b2c\u4e00\u7ec4\u6570\u636e\u5982\u56fe\u6240\u793a\u3002\n\n![\u56fe\u7247\u65e0\u6cd5\u663e\u793a](https://cdn.luogu.com.cn/upload/image_hosting/ren9vopc.png)\n\n## \u601d\u8def\n\n\u5bf9\u4e8e\u6b64\u9898\uff0c\u5355\u7eaf\u7684 BFS \u96be\u4ee5\u5b9e\u73b0\uff0c\u5e76\u4e14\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u4e5f\u65e0\u6cd5\u63a5\u53d7\uff0c\u8003\u8651**\u8fde\u70b9\u3001\u5efa\u56fe\u8dd1\u6700\u77ed\u8def**\u3002  \n\n### \u51c6\u5907\u5de5\u4f5c\n\n\u5148\u5199\u56fe\u8bba\u90e8\u5206\uff0c\u5b9e\u73b0\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3001\u52a0\u8fb9\u548c\u4e00\u79cd\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u5373\u53ef\u3002\u672c\u9898\u65e0\u8d1f\u6743\uff0c\u53ef\u4ee5\u91c7\u7528~~\u8fd8\u6ca1\u6b7b\u7684~~ Dijkstra \u7b97\u6cd5\u3002\u4ee3\u7801\u5b9e\u73b0\u4e0a\u628a\u6240\u6709\u56fe\u8bba\u5185\u5bb9\u653e\u5728 `namespace Graph` \u4e2d\u3002  \n\u4e3a\u4e86\u540e\u7eed\u5efa\u56fe\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u4ee4\u672c\u9898\u4e2d\u6240\u6709\u7684\u957f\u65b9\u5f62\u90fd\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![\u56fe\u7247\u65e0\u6cd5\u663e\u793a](https://cdn.luogu.com.cn/upload/image_hosting/fna36ksm.png)\n\n\u5176\u4e2d $A,B$ \u4e3a\u8f93\u5165\u7684\u4e24\u70b9\uff0c\u4fdd\u8bc1 $x_A<x_B,y_A>y_B$\u3002\u8fd9\u6837 $C,D$ \u53ef\u4ee5\u7531 $A,B$ \u7684\u5750\u6807\u5f97\u5230\uff0c\u5373 $C(x_B,y_A),D(x_A,y_B)$\u3002\u4e3a\u4e86\u4fdd\u8bc1 $A,B$ \u76f8\u5bf9\u4f4d\u7f6e\u6b63\u786e\uff0c\u8f93\u5165\u65f6\u9700\u8981\u89c6\u60c5\u51b5\u4ea4\u6362 $A,B$ \u7684\u67d0\u4e2a\u5750\u6807\u3002\n\n\u4e4b\u540e\uff0c\u9700\u8981\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u5b9e\u73b0\u51e0\u4f55\u70b9 $(x,y)\\to$ \u56fe\u4e2d\u7ed3\u70b9 $u$ \u7684\u6620\u5c04\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u4e00\u4e9b\u51fd\u6570\u548c\u81ea\u5b9a\u4e49\u7c7b\u53ef\u4ee5\u770b\u540d\u79f0\u7406\u89e3\u5176\u4f5c\u7528\u3002\n\n```cpp\n// Point \u4e3a\u81ea\u5b9a\u4e49\u7c7b\uff0c\u6709 int x,y \u4e24\u4e2a\u503c\n// \u79bb\u6563\u5316\uff0cid[A] \u8868\u793a (A.x, A.y) \u5728\u56fe\u4e2d\u7ed3\u70b9\u7f16\u53f7\nint cnt=0;\nmap <Point,int> id;\n// \u8fd4\u56de (A.x, A.y) \u5728\u56fe\u4e2d\u7ed3\u70b9\u7f16\u53f7\uff0c\u6ca1\u6709\u7684\u5efa\u7acb\u65b0\u70b9\ninline int PointID(const Point &A)\n{\n    if(id[A]!=0)\n        return id[A];\n    ++cnt;\n    return id[A]=cnt;\n}\n// \u4e24\u70b9\u662f\u5426\u8fde\u63a5\u8fc7\nmap <pair<Point,Point>,bool> connected;\n// \u5728\u51e0\u4f55\u56fe\u5f62\u4e2d\u8fde\u63a5\u4e24\u70b9\uff0c\u8fb9\u6743\u4e3a\u5176\u51e0\u4f55\u8ddd\u79bb\ninline void Connect(const Point &A,const Point &B)\n{\n    if(A==B||connected[(pair<Point,Point>){A,B}]||connected[(pair<Point,Point>){B,A}])\n        return;\n    connected[(pair<Point,Point>){A,B}]=connected[(pair<Point,Point>){B,A}]=1;\n    // Dist(A,B) \u4e3a A,B \u4e4b\u95f4\u7684\u8ddd\u79bb\n    Graph::AddEdge(PointID(A),PointID(B),Dist(A,B));\n    Graph::AddEdge(PointID(B),PointID(A),Dist(A,B));\n}\n```\n\n### \u8fde\u8fb9\u5efa\u56fe\n\n\u5047\u8bbe\u6709\u4e00\u70b9 $P(x_P,y_P)$\uff0c\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570 $\\mathbf{Make}(P)$ \u5efa\u7acb\u70b9 $P$ \u4e0e\u7ed9\u51fa\u7684 $n$ \u4e2a\u77e9\u5f62\u53ef\u80fd\u7684\u8fde\u8fb9\u3002  \n\u56e0\u4e3a**\u4e0d\u80fd\u8fdb\u5165\u77e9\u5f62\u5185\u90e8**\uff0c\u6240\u4ee5\u53ea\u8981\u627e\u5230 $P$ \u5206\u522b\u5411\u4e0a\u3001\u5411\u4e0b\u3001\u5411\u5de6\u3001\u5411\u53f3**\u8ddd\u79bb\u6700\u5c0f**\u7684 $4$ \u4e2a\u77e9\u5f62\u5e76\u8fde\u63a5\u5373\u53ef\u3002\u627e\u6700\u5c0f\u503c\u65f6\u904d\u5386\u6240\u6709\u77e9\u5f62\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\uff0c\u53ef\u4ee5\u63a5\u53d7\u3002  \n\u4e3a\u4e86\u5904\u7406\u540c\u4e00\u77e9\u5f62\u7684\u540c\u4e00\u6761\u8fb9\u4e0a\u51fa\u73b0\u4e24\u4e2a\u4e0d\u540c\u70b9 $T_1,T_2$ \u5374\u6ca1\u6709\u5728\u56fe\u4e2d\u8fde\u63a5 $T_1T_2$ \u7684\u60c5\u51b5\uff0c\u5b9a\u4e49\u77e9\u5f62 $\\alpha$ \u7684\u8fb9 $m$ \u4e0a\u8fde\u63a5\u8fc7\u7684\u70b9\u96c6\u4e3a $\\mathrm{coord[\\alpha]}[m]$\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u77e9\u5f62 $\\alpha$ \u7684\u8fb9 $BD$ \u5f62\u5982 $D\\text-T_1\\text-\\text-T_2\\text-B$\uff0c\u5219 $\\mathrm{coord[\\alpha]}[BD]=\\{D,T_1,T_2,B\\}$\uff0c\u6700\u540e\u518d\u4f9d\u6b21\u8fde\u63a5 $DT_1,T_1T_2,T_2B$\u3002\u4ee3\u7801\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u6709\u5e8f\u7684 `STL set` \u5b9e\u73b0\uff0c\u7701\u53bb\u6392\u5e8f\u8fc7\u7a0b\u3002  \n\u4e0b\u9762\u7ed9\u51fa\u7684\u4f2a\u4ee3\u7801\u63cf\u8ff0\u4e86\u627e\u70b9 $P$ \u5411\u4e0a\u3001\u5411\u4e0b $2$ \u4e2a\u77e9\u5f62\u5e76\u8fde\u63a5\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d $\\mathrm{Rectangles}$ \u4e3a\u8f93\u5165\u7684\u77e9\u5f62\u96c6\uff0c$\\square ACBD$ \u5b9a\u4e49\u4e3a\u7ebf\u6bb5 $AC,CB,BD,AD$ \u4e0a\u70b9\u7684\u5e76\u96c6\uff0c$A_{\\alpha},B_{\\alpha}$ \u7b49\u5b9a\u4e49\u4e3a\u77e9\u5f62 $\\alpha$ \u7684\u5bf9\u5e94\u9876\u70b9\u3002  \n\u627e\u5230\u4ea4\u70b9\u540e\u5c06\u4ea4\u70b9\u653e\u8fdb\u6240\u5728\u77e9\u5f62\u8fb9\u7684 $\\text{coord}$ \u96c6\u5408\u4e2d\uff0c\u6700\u540e\u518d\u679a\u4e3e\u77e9\u5f62\u7684\u6bcf\u6761\u8fb9\u4f9d\u6b21\u8fde\u63a5\u5373\u53ef\u3002\n\n$$\n\\begin{aligned}\n  \\ & \\underline{\\mathbf{Make}(P)}\\\\\n 1\\ & \\mathrm{min}x_1,\\mathrm{min}x_2 \\gets +\\infty; \\alpha_1,\\alpha_2 \\gets \\emptyset\\\\\n 2\\ & \\mathbf{for}\\ \\square ACBD \\in \\mathrm{Rectangles}:\\\\\n 3\\ & \\quad \\mathbf{if}\\ l:x=x_P \\cap \\square ACBD \\ne \\emptyset:\\\\\n 4\\ & \\qquad \\mathbf{if}\\ P\\ \\mathrm{is\\ below}\\ \\square ACBD:\\\\\n 5\\ & \\qquad\\quad \\mathrm{Point}\\ T=(l:x=x_P \\cap BD)\\\\\n 6\\ & \\qquad\\quad\\mathbf{if}\\ |PT| < \\mathrm{min}x_1:\\\\\n 7\\ & \\qquad\\qquad \\mathrm{min}x_1 \\gets |PT|\\\\\n 8\\ & \\qquad\\qquad \\alpha_1 \\gets \\square ACBD\\\\\n 9\\ & \\qquad \\mathbf{else\\ if}\\ P\\ \\mathrm{is\\ above}\\ \\square ACBD:\\\\\n 10\\ & \\qquad\\quad \\mathrm{Point}\\ T=(l:x=x_P \\cap AC)\\\\\n 11\\ & \\qquad\\quad\\mathbf{if}\\ |PT| < \\mathrm{min}x_2:\\\\\n 12\\ & \\qquad\\qquad \\mathrm{min}x_2 \\gets |PT|\\\\\n 13\\ & \\qquad\\qquad \\alpha_2 \\gets \\square ACBD\\\\\n 14\\ & \\mathrm{Point}\\ T_1=(l:x=x_P \\cap B_{\\alpha_1}D_{\\alpha_1})\\\\\n 15\\ & \\mathrm{Point}\\ T_2=(l:x=x_P \\cap A_{\\alpha_2}C_{\\alpha_2})\\\\\n 16\\ & \\mathrm{Connect}\\ PT_1,PT_2 \\\\\n 17\\ & \\mathrm{Insert}\\ T_1\\ \\mathrm{to\\ coord[\\alpha_1]}[BD] \\\\\n 18\\ & \\mathrm{Insert}\\ T_2\\ \\mathrm{to\\ coord[\\alpha_2]}[AC] \\\\\n\\end{aligned}\n$$\n\n\u6c42\u4ea4\u70b9\u5750\u6807\u53ef\u4ee5\u4f7f\u7528\u521d\u4e2d\u5e73\u9762\u51e0\u4f55\u76f8\u5173\u77e5\u8bc6\u3002\u5bf9\u5411\u5de6\u3001\u5411\u53f3\u4e24\u4e2a\u65b9\u5411\u4e0a\u77e9\u5f62\u7684\u5904\u7406\u4e0e\u4e0a\u9762\u76f8\u4f3c\uff0c\u4e0d\u518d\u5c55\u793a\u3002\n\n\u5b9e\u73b0 $\\mathbf{Make}(P)$ \u51fd\u6570\u540e\uff0c\u5bf9\u6bcf\u4e2a\u77e9\u5f62 $ACBD$ \u4f9d\u6b21\u5bf9\u5176\u56db\u4e2a\u9876\u70b9\u8fdb\u884c $\\mathbf{Make}$ \u64cd\u4f5c\u3002\u53e6\u5916\u522b\u5fd8\u4e86\u5bf9 $S,E\\ \\mathbf{Make}$ \u4e00\u4e0b\u3002\n\n### \u7279\u6b8a\u60c5\u51b5\n\n1. $n=0$\uff0c\u5373\u6ca1\u6709\u77e9\u5f62\u3002  \n\u8fd9\u65f6\u53ef\u4ee5\u8282\u7701\u65f6\u95f4\uff0c\u5982\u679c $S,E$ \u540c\u5728\u4e00\u6761\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u7684\u76f4\u7ebf\u4e0a\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $|SE|$\uff1b\u5426\u5219\u65e0\u89e3\u3002\n\n2. $S=E$\uff0c\u5373\u8d77\u70b9\u7ec8\u70b9\u91cd\u5408\u3002  \n\u4e3a\u4e86\u51cf\u5c11\u53ef\u80fd\u7684\u9ebb\u70e6\u8fd9\u91cc\u7279\u5224\u4e00\u4e0b\uff0c\u663e\u7136\u7b54\u6848\u4e3a $0$\u3002\n\n3. $n \\ne 0,S \\ne E$ \u4e14 $S,E$ \u5728\u540c\u4e00\u6761\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u7684\u76f4\u7ebf\u4e0a\u3002  \n\u5982\u679c\u6ca1\u6709\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u6216\u5904\u7406\u4e0d\u5f53\u4f1a WA on \\#6\u3002\u6b64\u65f6\u82e5 $S,E$ \u4e4b\u95f4\u6ca1\u6709\u77e9\u5f62\u9700\u8981\u8fde\u63a5 $SE$\u3002\u8fd9\u4e2a\u5224\u65ad\u76f4\u63a5\u679a\u4e3e\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c\u4e3a\u51cf\u5c0f\u5e38\u6570\u4e0e\u6700\u540e\u5904\u7406 $\\mathrm{coord}$ \u7684\u5faa\u73af\u5408\u5e76\u3002  \n\u53e6\u5916\uff0c\u6709[\u4e00\u7bc7\u9898\u89e3](https://www.luogu.com.cn/blog/124571/solution-p3632)\u76f4\u63a5\u8fde\u63a5\u4e86 $SE$ \u800c\u4e0d\u8003\u8651\u5b83\u4eec\u4e4b\u95f4\u662f\u5426\u6709\u77e9\u5f62\uff0c\u9488\u5bf9\u6b64\u6709 hack \u6570\u636e\uff0c\u5177\u4f53\u89c1[\u6b64\u8d34](https://www.luogu.com.cn/discuss/562904)\u3002\n\n\u6700\u540e\u5efa\u5b8c\u56fe\u4ee5 $S$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u6ce2 Dijkstra\uff0c\u5982\u679c\u7ed3\u679c\u4e3a `inf`\uff0c\u62a5\u544a\u65e0\u89e3\uff1b\u5426\u5219\u8f93\u51fa\u6700\u77ed\u8ddd\u79bb\u3002\n\n## \u4ee3\u7801\n\n\u4e0a\u9762\u601d\u8def\u4e2d\u63d0\u5230\u7684\u95ee\u9898\u4ec5\u4ec5\u662f\u5bf9\u5e73\u9762\u51e0\u4f55\u5173\u7cfb\u6700\u7b80\u6d01\u76f4\u89c2\u7684\u63cf\u8ff0\u3002\u771f\u6b63\u7684\u5b9e\u73b0\u9700\u8981\u5224\u65ad\u70b9\u5750\u6807\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u7565\u4e3a\u590d\u6742\uff0c\u4f46\u662f\u90fd\u5728\u521d\u4e2d\u5e73\u9762\u51e0\u4f55\u77e5\u8bc6\u8303\u56f4\u5185\uff0c\u63a8\u51fa\u6765\u4e5f\u5e76\u4e0d\u96be\u3002  \n\u5b8c\u6574\u4ee3\u7801\u89c1[\u4e91\u526a\u8d34\u677f](https://www.luogu.com.cn/paste/mwqcfbhz)\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\uff0c\u5e76\u4e14\u5df2\u7ecf\u5c3d\u91cf\u5408\u5e76\u5faa\u73af\u3001\u51cf\u5c0f\u5e38\u6570\uff0c\u5bf9\u672c\u9898\u7684 $3\\text s$ \u65f6\u9650\u7ef0\u7ef0\u6709\u4f59\u3002  \n\u53e6\u5916**\u591a\u6d4b\u8bb0\u5f97\u6e05\u7a7a\uff0c\u5efa\u56fe\u8981\u6e05\u5f7b\u5e95**\uff0c\u5c31\u56e0\u4e3a\u8fd9\u4e2a\u8c03\u4e86\u4e09\u5929\u624d\u8fc7\u3002\n\n\u6700\u540e\u6c42\u8fc7\u4e00\u4e0b\u5427\uff08\u53ef\u601c\uff09\u3002\u53e6\u5916\u4ee5\u73b0\u5728\u7684\u6807\u51c6\uff0c\u8fd9\u9898\u73b0\u5728\u8fd8\u6ca1\u6709\u5408\u89c4\u7684\u9898\u89e3\u3002\n",
        "postTime": 1674279824,
        "uid": 450246,
        "name": "Franz_Liszt",
        "ccfLevel": 4,
        "title": "P3632 [APIO2011] \u5bfb\u8def \u9898\u89e3"
    },
    {
        "content": "\u6253\u4e86\u4e00\u4e2d\u5348\u3002\u3002\u3002  \n\u611f\u89c9\u81ea\u5df1\u6253\u7684\u662f\u7eaf\u66b4\u529b  \n\u9996\u5148\u79bb\u6563\u5316\uff0c\u91cd\u65b0\u7ed9\u6240\u6709\u70b9\u6807\u4e0a\u5750\u6807  \n\u5bf9\u4e8e\u8702\u5de2\u8fb9\u7f18\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5411\u4ed6\u56db\u5468\u6700\u8fd1\u7684\u70b9\uff08\u8702\u5de2\u8fb9\u7f18\u7684\u70b9\uff09\u8fde\u8fb9  \n\u7136\u540e\u662f\u8d77\u70b9\u7ec8\u70b9\u8fde\u8fb9  \n\u7136\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u5c31\u505a\u5b8c\u4e86\uff0c\u4e3b\u8981\u662f\u7ec6\u8282\u95ee\u9898\uff0c\u6a21\u62df\u5efa\u56fe\uff0c\u5f88\u8017\u65f6\u95f4  \n~~\u4e0b\u9762\u662f\u6211\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801~~\n```cpp\n#include <bits/stdc++.h>\n#define jh(x,y) x^=y^=x^=y\n#define loc(x,y) (x-1)*totl+y\nusing namespace std;\nconst int N = 2e3 + 10;\ninline int read()\n{\n\tregister int num = 0;\n\tregister char ch;\n\tregister bool flag = false;\n\twhile ((ch = getchar()) == ' ' || ch == '\\n' || ch == '\\r');\n\tif (ch == '-')flag = true; else num = ch ^ 48;\n\twhile ((ch = getchar()) != ' '&&ch != '\\n'&&ch != '\\r'&&~ch)\n\t\tnum = (num << 1) + (num << 3) + (ch ^ 48);\n\tif (flag)return -num; return num;\n}\nint sx, sy, ex, ey, hang[10 * N], lie[10 * N], toth, totl;\nstruct Node {\n\tint x1, y1, x2, y2;\n\tinline Node() { x1 = y1 = x2 = y2 = 0; }\n\tinline Node(register int a, register int b, register int c, register int d) { x1 = a, y1 = b, x2 = c, y2 = d; }\n}fc[N];\ninline void change(register int &x, register int &y)\n{\n\tx = lower_bound(hang + 1, hang + toth + 1, x) - hang;\n\ty = lower_bound(lie + 1, lie + totl + 1, y) - lie;\n}\nbool  in[N][N];\nint mp[N][N], nt[N*N], b[N*N], p[N*N], w[N*N], num;\ninline void add(register int x, register int y, register int z)\n{\n\tif (z == 0)return;\n\tb[++num] = y; w[num] = z;\n\tnt[num] = p[x]; p[x] = num;\n\tb[++num] = x; w[num] = z;\n\tnt[num] = p[y]; p[y] = num;\n}\ninline void update(register int x, register int y)\n{\n\tfor (register int i = x + 1; i <= toth; ++i)\n\t\tif (mp[i][y])\n\t\t{\n\t\t\tif (mp[i][y] == mp[x][y] && y != fc[mp[x][y]].y1&&y != fc[mp[x][y]].y2)break;\n\t\t\tadd(loc(x, y), loc(i, y), hang[i] - hang[x]);\n\t\t\tbreak;\n\t\t}\n\tfor (register int i = y + 1; i <= totl; ++i)\n\t\tif (mp[x][i])\n\t\t{\n\t\t\tif (mp[x][i] == mp[x][y] && x != fc[mp[x][y]].x1&&x != fc[mp[x][y]].x2)break;\n\t\t\tadd(loc(x, y), loc(x, i), lie[i] - lie[y]);\n\t\t\tbreak;\n\t\t}\n}\ninline void ud(register int x, register int y)\n{\n\tfor (register int i = x + 1; i <= toth; ++i)if (mp[i][y]) { add(loc(x, y), loc(i, y), hang[i] - hang[x]); break; }\n\tfor (register int i = x - 1; i >= 1; --i)if (mp[i][y]) { add(loc(x, y), loc(i, y), hang[x] - hang[i]); break; }\n\tfor (register int i = y + 1; i <= totl; ++i)if (mp[x][i]) { add(loc(x, y), loc(x, i), lie[i] - lie[y]); break; }\n\tfor (register int i = y - 1; i >= 1; --i)if (mp[x][i]) { add(loc(x, y), loc(x, i), lie[y] - lie[i]); break; }\n}\nint dist[N*N], top;\nbool flag[N*N];\nstruct node {\n\tint bh, dist;\n\tinline node() { bh = dist = 0; }\n\tinline node(register int a, register int b) { bh = a, dist = b; }\n}q[N*N];\ninline void shift()\n{\n\tregister int i = 1, j = 2;\n\twhile (j <= top)\n\t{\n\t\tif (j < top&&q[j + 1].dist < q[j].dist)++j;\n\t\tif (q[i].dist > q[j].dist)\n\t\t\tjh(q[i].bh, q[j].bh), jh(q[i].dist, q[j].dist);\n\t\ti = j, j = i << 1;\n\t}\n}\ninline void shift2()\n{\n\tregister int i = top, j = top >> 1;\n\twhile (i > 1)\n\t{\n\t\tif (q[i].dist >= q[j].dist)break;\n\t\tjh(q[i].bh, q[j].bh);\n\t\tjh(q[i].dist, q[j].dist);\n\t\ti = j, j = i >> 1;\n\t}\n}\ninline int dijkstra(register int x)\n{\n\tmemset(dist, 63, sizeof(dist));\n\tmemset(flag, 0, sizeof(flag));\n\tq[top = 1] = node(x, dist[x] = 0);\n\twhile (top)\n\t{\n\t\tregister node k = q[1]; q[1] = q[top--]; shift();\n\t\tif (!flag[k.bh])\n\t\t{\n\t\t\tflag[k.bh] = true;\n\t\t\tregister int e = p[k.bh];\n\t\t\twhile (e)\n\t\t\t{\n\t\t\t\tregister int kk = b[e];\n\t\t\t\tif (dist[kk] - w[e] > dist[k.bh])\n\t\t\t\t\tdist[kk] = dist[k.bh] + w[e];\n\t\t\t\tq[++top] = node(kk, dist[kk]); shift2();\n\t\t\t\te = nt[e];\n\t\t\t}\n\t\t}\n\t}\n\treturn dist[loc(ex, ey)];\n}\n\n\nint main()\n{\n\tregister int t = read();\n\twhile (t--)\n\t{\n\t\tnum = 0, toth = totl = 0; memset(p, 0, sizeof(p));\n\t\tmemset(mp, 0, sizeof(mp)); memset(in, 0, sizeof(in));\n\t\thang[++toth] = sx = read(), lie[++totl] = sy = read();\n\t\thang[++toth] = ex = read(), lie[++totl] = ey = read();\n\t\tregister int n = read();\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t{\n\t\t\tregister int x1 = read(), y1 = read(), x2 = read(), y2 = read();\n\t\t\tif (x1 > x2)jh(x1, x2);\n\t\t\tif (y1 > y2)jh(y1, y2);\n\t\t\thang[++toth] = x1, hang[++toth] = x2;\n\t\t\tlie[++totl] = y1, lie[++totl] = y2;\n\t\t\tfc[i] = Node(x1, y1, x2, y2);\n\t\t}\n\t\tsort(hang + 1, hang + toth + 1);\n\t\tsort(lie + 1, lie + totl + 1);\n\t\ttoth = unique(hang + 1, hang + toth + 1) - hang - 1;\n\t\ttotl = unique(lie + 1, lie + totl + 1) - lie - 1;\n\t\tchange(sx, sy); change(ex, ey);\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t\tchange(fc[i].x1, fc[i].y1),\n\t\t\tchange(fc[i].x2, fc[i].y2);\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t\tfor (register int x = fc[i].x1; x <= fc[i].x2; ++x)\n\t\t\t\tfor (register int y = fc[i].y1; y <= fc[i].y2; ++y)\n\t\t\t\t\tmp[x][y] = i;\n\t\tfor (register int i = 1; i <= n; ++i)\n\t\t{\n\t\t\tfor (register int x = fc[i].x1 + 1; x < fc[i].x2; ++x)update(x, fc[i].y1), update(x, fc[i].y2);\n\t\t\tfor (register int y = fc[i].y1; y <= fc[i].y2; ++y)update(fc[i].x1, y), update(fc[i].x2, y);\n\t\t}\n\t\tmp[sx][sy] = mp[ex][ey] = 1;\n\t\tud(sx, sy); ud(ex, ey);\n\t\tregister int ans = dijkstra(loc(sx, sy));\n\t\tif (ans < 1e9)printf(\"%d\\n\", ans);\n\t\telse printf(\"No Path\\n\");\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1541399624,
        "uid": 87283,
        "name": "Zechariah",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3632 \u3010[APIO2011]\u5bfb\u8def\u3011"
    }
]