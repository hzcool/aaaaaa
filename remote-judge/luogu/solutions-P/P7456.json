[
    {
        "content": "\u6709\u4e00\u4e2a\u663e\u7136\u7684dp\uff1a\n\n\u4ee4 $f_i$ \u8868\u793a\u6587\u672c\u4e32\u524d $i$ \u4f4d\u5df2\u7ecf\u8986\u76d6\u5b8c\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u82e5 $s[i,j]$ \u662f\u4e2a\u6a21\u5f0f\u4e32\uff0c\u663e\u7136\u6709 $f_j=\\min(f_k+1)(i-1\\le k<j)$\n\n\u591a\u6a21\u5f0f\u4e32\u5339\u914d\uff0c\u8003\u8651 AC \u81ea\u52a8\u673a\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u6a21\u5f0f\u4e32\u5efa\u51fa ACAS \uff0c\u6613\u5bf9\u6587\u672c\u4e32\u8fdb\u884c\u5339\u914d\u3002\n\n\u7531\u8f6c\u79fb\u65b9\u7a0b\uff0c\u6c42 $f_j$ \u65f6\u663e\u7136\u60f3\u8ba9 $i$ \u6700\u5c0f\uff0c\u6a21\u5f0f\u4e32\u5c31\u5c3d\u91cf\u5927\u3002\u5339\u914d\u5230\u7684\u90a3\u4e2a\u70b9\u5230 $fail$ \u6839\u4e0a\u7684\u6240\u6709\u70b9\u91cc\uff0c\u90a3\u4e9b\u8868\u793a\u67d0\u6a21\u5f0f\u4e32\u672b\u5c3e\u7684\uff0c\u5c31\u80fd\u548c\u5b83\u7684 $len$ \u53d6 $\\max$ \u3002\u8fd9\u4e2a\u4e0d\u7528\u6bcf\u6b21\u6c42\uff0c\u76f4\u63a5\u9884\u5904\u7406\u5b9e\u73b0\u3002\n\n\u628a\u8fd9\u4e2a $i$ \u6c42\u51fa\u6765\uff0c$dp$ \u5c31\u968f\u4fbf\u62ff\u4e2a\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5373\u53ef\u3002\u6211\u7528\u7684\u662f\u53cd\u5411 $ST$ \u8868\u3002\n\nmy code:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n;char c[300010],cc[300010];\nint ch[300010][26],cn=1,len[300010],fail[300010];\nqueue<int>q;\nvoid build(){\n\tfor(int i=0;i<26;i++)if(ch[1][i])fail[ch[1][i]]=1,q.push(ch[1][i]);else ch[1][i]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tlen[u]=max(len[u],len[fail[u]]);\n\t\tfor(int i=0;i<26;i++)if(ch[u][i])\n\t\t\tfail[ch[u][i]]=ch[fail[u]][i],q.push(ch[u][i]);\n\t\telse ch[u][i]=ch[fail[u]][i];\n\t}\n}\nint dp[300010][20];\nint ask(int l,int r){\n\tif(l>r)return 1e9+7;\n\tint k=log2(r-l+1);\n\treturn min(dp[r][k],dp[l+(1<<k)-1][k]);\n}\nint main(){\n\tscanf(\"%d%s\",&n,cc+1);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%s\",c);int l=strlen(c),u=1;\n\t\tfor(int j=0;j<l;j++){\n\t\t\tif(!ch[u][c[j]-'a'])ch[u][c[j]-'a']=++cn;\n\t\t\tu=ch[u][c[j]-'a'];\n\t\t}\n\t\tlen[u]=max(len[u],l);\n\t}\n\tbuild();int le=strlen(cc+1),u=1;\n\tmemset(dp,0x3f,sizeof(dp));dp[0][0]=0;\n\tfor(int i=1;i<=le;i++){\n\t\tu=ch[u][cc[i]-'a'];\n\t\tdp[i][0]=ask(i-len[u],i-1)+1;\n\t\tfor(int j=1;j<20;j++){\n\t\t\tif(i-(1<<j)+1<0)break;\n\t\t\tdp[i][j]=min(dp[i][j-1],dp[i-(1<<j-1)][j-1]);\n\t\t}\n\t}\n\treturn printf(\"%d\",dp[le][0]>1e9?-1:dp[le][0]),0;\n}\n```\n",
        "postTime": 1619861998,
        "uid": 223624,
        "name": "Apollo13",
        "ccfLevel": 8,
        "title": "P7456 \u9898\u89e3"
    },
    {
        "content": "> *IX. [P7456 [CERC2018] The ABCD Murderer](https://www.luogu.com.cn/problem/P7456)\n>\n> \u6458\u81ea [\u5e38\u89c1\u5b57\u7b26\u4e32\u7b97\u6cd5 II](https://www.cnblogs.com/alex-wei/p/Common_String_Theory_Theory_automaton_related.html) Part 1. AC \u81ea\u52a8\u673a\u90e8\u5206\u4f8b\u9898 IX\u3002\n\n\u7531\u4e8e\u5355\u8bcd\u53ef\u4ee5\u91cd\u53e0\uff08\u5426\u5219\u5c31\u4e0d\u53ef\u505a\u4e86\uff09\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e $i$\uff0c\u4ee5 $i$ \u7ed3\u5c3e\u7684\u6700\u957f\u5355\u8bcd\u7684\u957f\u5ea6 $L_i$\uff0c\u56e0\u4e3a\u5bf9\u4e8e**\u76f8\u540c\u7684\u51fa\u73b0\u4f4d\u7f6e**\uff0c\u7528\u66f4\u77ed\u7684\u5355\u8bcd\u53bb\u4ee3\u66ff\u6700\u957f\u5355\u8bcd\u5e76\u4e0d\u4f1a\u8ba9\u7b54\u6848\u66f4\u4f18\u3002\u4f7f\u7528 ACAM \u5373\u53ef\u6c42\u51fa $L_i$\u3002\n\n\u6700\u4f18\u5316\u95ee\u9898\u8003\u8651 DP\uff1a\u8bbe $f_i$ \u8868\u793a\u62fc\u51fa $s[1,i]$ \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u4e0d\u96be\u5f97\u5230\u8f6c\u79fb $f_i = \\min_{j = i - L_i} ^ {i - 1} f_j$\u3002\u7279\u522b\u7684\uff0c\u82e5 $L_i$ \u4e0d\u5b58\u5728\uff08\u5373\u6ca1\u6709\u5355\u8bcd\u5728 $s$ \u4e2d\u4ee5 $i$ \u4e3a\u7ed3\u675f\u4f4d\u7f6e\u51fa\u73b0\uff09\u5219 $f_i$ \u4e3a\u65e0\u7a77\u5927\u3002\u82e5 $f_n$ \u4e3a\u65e0\u7a77\u5927\u5219\u65e0\u89e3\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002\n\n\u5982\u679c\u4e0d\u60f3\u5199\u7ebf\u6bb5\u6811\uff0c\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\uff1a\u4ece\u540e\u5f80\u524d DP\u3002\u8fd9\u6837\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u5730\u65b9\u662f\u56fa\u5b9a\u7684\uff08$i-L_i\\sim i - 1$\uff09\uff0c\u6240\u4ee5\u7528\u5c0f\u6839\u5806\u7ef4\u62a4\uff0c\u61d2\u60f0\u5220\u9664\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a\u7ebf\u6027\u5bf9\u6570\u3002\n\n```cpp\nconst int N = 3e5 + 5;\nconst int S = 26;\n\nint L, n, len[N];\nint node, ed[N], son[N][S], fa[N];\nstring t; char s[N];\nvoid ins(string s) {\n\tint p = 0;\n\tfor(char it : s) {\n\t\tif(!son[p][it - 'a']) son[p][it - 'a'] = ++node;\n\t\tp = son[p][it - 'a'];\n\t} cmax(ed[p], s.size());\n}\nvoid build() {\n\tqueue <int> q;\n\tfor(int i = 0; i < S; i++) if(son[0][i]) q.push(son[0][i]);\n\twhile(!q.empty()) {\n\t\tint t = q.front(); q.pop();\n\t\tfor(int i = 0; i < S; i++)\n\t\t\tif(son[t][i]) fa[son[t][i]] = son[fa[t]][i], q.push(son[t][i]);\n\t\t\telse son[t][i] = son[fa[t]][i];\n\t\tcmax(ed[t], ed[fa[t]]);\n\t}\n}\nint main() {\n\tcin >> L >> s + 1, n = strlen(s + 1);\n\tfor(int i = 1; i <= L; i++) cin >> t, ins(t); build();\n\tfor(int i = 1, p = 0; i <= n; i++) len[i] = ed[p = son[p][s[i] - 'a']];\n\tpriority_queue <pii, vector <pii>, greater <pii>> q; q.push({1, n - len[n]});\n\tfor(int i = n; ; i--) {\n\t\twhile(!q.empty() && q.top().se >= i) q.pop();\n\t\tif(q.empty()) puts(\"-1\"), exit(0);\n\t\tint f = q.top().fi, lim = i - 1 - len[i - 1];\n\t\tif(i == 1) cout << f << endl, exit(0);\n\t\tif(lim < q.top().se) q.push({f + 1, lim}); \n\t}\n\treturn flush(), 0;\n}\n```",
        "postTime": 1640563643,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P7456 [CERC2018] The ABCD Murderer"
    },
    {
        "content": "**P7456**\u9898\u89e3\uff0c\u8bfb\u9898\u9700\u8c28\u614e\u3002\n\n\n---------------------------------------------------------------\n\n\u8003\u8651\u76f4\u63a5\u5efa\u7acb AC \u81ea\u52a8\u673a\uff0c\u5bfb\u627e\u6bcf\u4e2a\u540e\u7f00\u7ed3\u5c3e\u80fd\u5339\u914d\u7684\u6700\u957f\u5355\u8bcd\u3002\n\n\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5efa\u7acb AC \u81ea\u52a8\u673a\u540e\u7528 fail \u6307\u9488\u8dd1\u62d3\u6251\u6392\u5e8f\u5904\u7406\uff0c\u7531\u4e8e\u5728\u6a21\u677f\u9898\u91cc\u9762\u5c31\u51fa\u73b0\u8fc7\u8fd9\u4e2a\u5957\u8def\u5c31\u4e0d\u7ec6\u8bb2\u4e86\u3002\n\n\u63a5\u7740\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e $i$ \u5f97\u5230\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u62fc\u63a5\u72b6\u6001\u8f6c\u79fb\u7684\u4f4d\u7f6e $[l_i , i - 1]$\u3002\n\n\u76f4\u63a5 dp \u7b54\u6848\uff0c\u8bb0 $dp_i$ \u8868\u793a\u7ed3\u5c3e\u4f4d\u7f6e\u4e3a $i$ \u7684\u6587\u672c\u4e32\u9700\u8981\u81f3\u5c11\u591a\u5c11\u4e2a\u5355\u8bcd\u62fc\u63a5\uff0c\u6bcf\u6b21\u5c31\u4ece\u53ef\u4ee5\u8f6c\u79fb\u7684\u4f4d\u7f6e\u627e\u5230 $dp_i$ \u6700\u5c0f\u7684\u70b9\u8fdb\u884c\u8f6c\u79fb\u5c31\u597d\u4e86\u3002\n\n\u89c2\u5bdf\u5230 dp \u6570\u7ec4\u4e0d\u4e00\u5b9a\u5177\u6709\u5355\u8c03\u6027\uff0c\u5f00\u4e2a\u7ebf\u6bb5\u6811\u8f85\u52a9\u4e00\u4e0b\u8f6c\u79fb\u5c31\u597d\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(26\\sum |a_i| + |S| \\log S)$\uff0c\u6ce8\u610f\u7279\u5224 $-1$\u3002\n\n```\n/*\n\u8be2\u95ee\u6587\u672c\u4e32\u88ab\u6700\u5c11\u51e0\u4e2a\u5355\u8bcd\u7ec4\u6210\n\u54e6\u6211\u662f SB\u3002 \n*/ \n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 3e5 + 5;\nint n,m,trie[Len][27],cnt,fail[Len],sum[Len],dp[Len],L[Len],vis[Len],head[Len],Cnt,in[Len];\nchar s[Len],S[Len];\nstruct node\n{\n\tint next,to;\n}edge[Len << 1];\nvoid add(int from,int to)\n{\n\tedge[++ Cnt].to = to;\n\tedge[Cnt].next = head[from];\n\thead[from] = Cnt;\n}\nvoid insert(char s[])\n{\n\tint rt = 0;int sz = strlen(s + 1);\n\tfor(int i = 1 ; i <= sz ; i ++)\n\t{\n\t\tint ind = s[i] - 'a';\n\t\tif(!trie[rt][ind]) trie[rt][ind] = ++ cnt;\n\t\trt = trie[rt][ind];\n\t}\n\tsum[rt] = max(sum[rt] , sz);\n}\nvoid Build_Fail()\n{\n\tqueue<int> q;while(!q.empty()) q.pop();\n\tint rt = 0;\n\tfor(int i = 0 ; i < 26 ; i ++) \n\t{\n\t\tif(trie[rt][i])\n\t\t{\n\t\t\tfail[trie[rt][i]] = 0;\n\t\t\tq.push(trie[rt][i]);\n\t\t}\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();q.pop();\n\t\tfor(int i = 0 ; i < 26 ; i ++)\n\t\t{\n\t\t\tif(trie[p][i])\n\t\t\t{\n\t\t\t\tfail[trie[p][i]] = trie[fail[p]][i];\n\t\t\t\tadd(fail[trie[p][i]] , trie[p][i]);\n\t\t\t\tin[trie[p][i]] ++;\n\t\t\t\tq.push(trie[p][i]);\n\t\t\t}\n\t\t\telse trie[p][i] = trie[fail[p]][i];\n\t\t}\n\t}\n\tfor(int i = 1 ; i <= cnt ; i ++) if(!in[i]) q.push(i);\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front();q.pop();\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tin[to] --;\n\t\t\tif(!in[to]) q.push(to);\n\t\t\tsum[to] = max(sum[to] , sum[p]); \n\t\t}\n\t}\n\t//for(int i = 1 ; i <= cnt ; i ++) printf(\"%d %d\\n\",i,sum[i]);\n}\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\nint minn[Len << 2];\nvoid push_up(int x){minn[x] = min(minn[ls(x)] , minn[rs(x)]);}\nvoid build(int p,int l,int r)\n{\n\tminn[p] = 1e9;\n\tif(l == r) return;\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n}\nvoid upd(int p,int l,int r,int idx)\n{\n\tif(l == r) \n\t{\n\t\tminn[p] = dp[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(idx <= mid) upd(ls(p) , l , mid , idx);\n\telse upd(rs(p) , mid + 1 , r , idx);\n\tpush_up(p); \n}\nint qry(int p,int l,int r,int nl,int nr)\n{\n\tif(nl <= l && nr >= r) return minn[p];\n\tint mid = (l + r) >> 1 , res = 1e9;\n\tif(nl <= mid) res = min(res , qry(ls(p) , l , mid , nl , nr));\n\tif(nr > mid) res = min(res , qry(rs(p) , mid + 1 , r , nl , nr));\n\treturn res;\n}\ninline void Qry(char s[])\n{\n\tint sz = strlen(s + 1) , rt = 0;\n\tfor(int i = 1 ; i <= sz ; i ++) dp[i] = 1e9;\n\tfor(int i = 1 ; i <= sz ; i ++)\n\t{\n\t\tint ind = s[i] - 'a';\n\t\trt = trie[rt][ind];\n\t\tL[i] = max(0 , i - sum[rt]);\n\t\t//printf(\"%d %d\\n\",L[i],i);\n\t} \n\tbuild(1 , 0 , sz);\n\tdp[0] = 0;upd(1 , 0 , sz , 0);\n\tfor(int i = 1 ; i <= sz ; i ++) \n\t{\n\t\tif(L[i] <= i - 1) dp[i] = qry(1 , 0 , sz , L[i] , i - 1) + 1;\n\t\tupd(1 , 0 , sz , i);\n\t}\n\tif(dp[sz] >= 1e9) dp[sz] = -1;\n\tprintf(\"%d\\n\",dp[sz]);\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tscanf(\"%s\",S + 1);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t{\n\t\tscanf(\"%s\",s + 1);\n\t\tinsert(s);\n\t}\n\tBuild_Fail();\n\tQry(S);\n\treturn 0;\n}\n```",
        "postTime": 1649320665,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u6211\u662f\u5929\u7a7a\u91cc\u7684\u4e00\u7247\u4e91\uff0c\u5076\u5c14\u6295\u5f71\u5728\u4f60\u7684\u6ce2\u5fc3"
    },
    {
        "content": "### P7456 [CERC2018] The ABCD Murderer\n\n> \u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\u4e32 $S$ \u548c\u4e00\u4e9b\u4e32 $a_i$\uff0c\u4f60\u9700\u8981\u7528\u4e00\u4e9b $a_i$ \u62fc\u6210\u6587\u672c\u4e32 $S$\uff0c\u6bcf\u4e2a $a_i$ \u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\u3002\u76f8\u90bb\u4e24\u4e2a\u4e32\u53ef\u4ee5\u91cd\u5408\uff0c\u524d\u63d0\u662f\u5b83\u4eec\u91cd\u5408\u90e8\u5206\u76f8\u7b49\u3002\u6c42\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a\u4e32\uff0c\u540c\u4e00\u4e2a\u4e32\u4f7f\u7528\u591a\u6b21\u6309\u7167\u6b21\u6570\u8ba1\u7b97\u3002\n\n\u6211\u4eec\u8003\u8651 DP \u72b6\u6001 $f(i)$ \u8868\u793a\u94fa\u6ee1\u524d $i$ \u4e2a\u5b57\u7b26\u6700\u5c11\u9700\u8981\u7528\u5230\u591a\u5c11\u4e2a\u4e32\u3002\u6709\u4e24\u79cd\u8f6c\u79fb\uff1a$f(i)\\rightarrow f(i-1)$\uff0c\u548c\u5f53 $S[i+1\\cdots j]$ \u662f\u67d0\u4e2a\u6a21\u5f0f\u4e32\u65f6\uff0c$f(i)\\rightarrow f(j)$\u3002\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa $S$ \u4e2d\u54ea\u4e9b\u533a\u95f4\u662f\u6a21\u5f0f\u4e32\u7136\u540e\u5efa\u56fe\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\u4f46\u662f\u56fe\u7684\u5927\u5c0f\u662f $O(n^2)$ \u7ea7\u522b\u7684\uff0c\u8003\u8651\u4f18\u5316\u5efa\u56fe\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u82e5\u4ece $i$ \u70b9\u5f00\u59cb\u53ef\u4ee5\u5339\u914d\u591a\u4e2a\u4e0d\u540c\u7684\u6a21\u5f0f\u4e32\uff0c\u5219\u5339\u914d\u6700\u957f\u7684\u90a3\u4e2a\u4e00\u5b9a\u662f\u66f4\u4f18\u7684\u3002\u4ece $i$ \u70b9\u5f00\u59cb\u4e0d\u592a\u597d\u505a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u4e2a\u4e32\u53cd\u8f6c\u7136\u540e\u7528 AC \u81ea\u52a8\u673a\u8dd1\u591a\u6a21\u5339\u914d\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\u5462\uff1f\u6211\u4eec\u6709\u5982\u4e0b\u5f15\u7406\uff1a\n\n**\u5f15\u7406\uff1a\u5f53\u4e00\u4e2a\u7ed3\u5c3e\u5b57\u7b26\u6709\u591a\u4e2a\u53ef\u80fd\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u65f6\uff0cAC \u81ea\u52a8\u673a\u4f1a\u5339\u914d\u6700\u957f\u7684\u4e00\u4e2a\u3002**\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u56fe\u8f6c\u5316\u6210\u4e86 $O(n)$ \u7ea7\u522b\u7684\uff0c\u4f7f\u7528 01BFS \u6c42\u89e3\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002",
        "postTime": 1683980733,
        "uid": 172020,
        "name": "Kevin090228",
        "ccfLevel": 8,
        "title": "P7456 [CERC2018] The ABCD Murderer"
    },
    {
        "content": "# \u9898\u610f\n\n\u7ed9\u51fa\u5b57\u7b26\u4e32 $S$ \u548c $n$ \u4e2a\u5355\u8bcd $s_1,...,s_n$\uff0c\u6bcf\u4e2a\u5355\u8bcd\u53ef\u4ee5\u7528\u65e0\u6570\u6b21\uff0c\u95ee\u81f3\u5c11\u7528\u591a\u5c11\u4e2a\u5355\u8bcd\u624d\u80fd\u7ec4\u6210 $S$\uff0c\u5355\u8bcd\u7ec4\u5408\u65f6\u76f8\u540c\u90e8\u5206\u53ef\u4ee5\u91cd\u53e0\u3002\n\n---\n\n\u7b2c\u4e00\u773c\u770b\uff0c\u53d1\u73b0\u662f $n$ \u4e2a\u5b57\u7b26\u4e32\u5339\u914d\uff0c\u7acb\u523b\u60f3\u5230 AC \u81ea\u52a8\u673a\u3002\n\n\u5148\u5efa\u7acb\u4e00\u68f5 AC \u81ea\u52a8\u673a\u3002\n\n\u8bbe $f[i]$ \u4e3a\u7ec4\u6210\u4e86 $S$ \u7684\u524d $i$ \u4e2a\u5b57\u7b26\u65f6\u6240\u7528\u7684\u6700\u5c11\u5355\u8bcd\u4e2a\u6570\u3002\n\n\u8003\u8651\u6700\u53f3\u8fb9\u7684\u5355\u8bcd\uff0c\u8f6c\u79fb\u5b50\u95ee\u9898\u3002\n\n\u82e5\u6709\u591a\u4e2a\u5355\u8bcd\u6ee1\u8db3\u6761\u4ef6\uff0c\u9009\u62e9\u6700\u957f\u7684\u90a3\u4e2a\uff0c\u6c42\u6700\u957f\u53ef\u4ee5\u5728 BFS \u7684\u65f6\u5019\u987a\u4fbf\u6c42\u51fa\u3002\n\n\u8bbe\u9009\u62e9\u7684\u5355\u8bcd\u957f\u5ea6\u4e3a $len$\uff0c\u90a3\u4e48\u8f6c\u79fb\u4e3a\n\n$$f[i]=\\min_{j=i-len}^{j<i}\\{f[j]\\}+1$$\n\n\u8fd9\u73a9\u610f\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=3e5+10;\nint n,m,tree[maxn][26],tot=1,en[maxn],q[maxn],l,r,mn[maxn*4],f[maxn],fail[maxn];\nchar s[maxn],ss[maxn];\nbool tofail[maxn];\nvoid insert()\n{\n\tint p=1,len=strlen(ss+1);\n\tfor(int i=1;i<=len;i++)\n\t{\n\t\tint v=ss[i]-'a';\n\t\tif(!tree[p][v])\n\t\t{\n\t\t\ttree[p][v]=++tot;\n\t\t}\n\t\tp=tree[p][v];\n\t}\n\ten[p]=len;\n}\nvoid bfs()\n{\n\tl=1;\n\tfor(int i=0;i<26;i++)\n\t{\n\t\tif(tree[1][i])\n\t\t{\n\t\t\tq[++r]=tree[1][i];\n\t\t\tfail[tree[1][i]]=1;\n\t\t}\n\t\telse tree[1][i]=1;\n\t}\n\twhile(l<=r)\n\t{\n\t\tint u=q[l++];\n\t\tfor(int i=0;i<26;i++)\n\t\t{\n\t\t\tif(tree[u][i])\n\t\t\t{\n\t\t\t\tfail[tree[u][i]]=tree[fail[u]][i];\n\t\t\t\ten[tree[u][i]]=max(en[tree[u][i]],en[fail[tree[u][i]]]);\n\t\t\t\tq[++r]=tree[u][i];\n\t\t\t}\n\t\t\telse tree[u][i]=tree[fail[u]][i];\n\t\t}\n\t}\n}\nvoid modify(int p,int l,int r,int x,int v)\n{\n\tif(l==r)\n\t{\n\t\tmn[p]=v;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tif(x<=mid) modify(p<<1,l,mid,x,v);\n\telse modify(p<<1|1,mid+1,r,x,v);\n\tmn[p]=min(mn[p<<1],mn[p<<1|1]);\n}\nint query(int p,int l,int r,int ql,int qr)\n{\n\tif(ql<=l&&r<=qr) return mn[p];\n\tif(qr<l||r<ql) return 0x3f3f3f3f;\n\tint mid=l+r>>1;\n\treturn min(query(p<<1,l,mid,ql,qr),query(p<<1|1,mid+1,r,ql,qr));\n}\nvoid solve()\n{\n\tint p=1;\n\tmodify(1,0,m,0,0);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint v=s[i]-'a';\n\t\tp=tree[p][v];\n\t\tint tmp=en[p];\n\t\tf[i]=query(1,0,m,i-tmp,i-1)+1;\n\t\tmodify(1,0,m,i,f[i]);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%s\",&n,s+1);\n\tm=strlen(s+1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",ss+1);\n\t\tinsert();\n\t}\n\tbfs();\n\tmemset(mn,0x3f,sizeof mn);\n\tsolve();\n\tif(f[m]>=0x3f3f3f3f) f[m]=-1;\n\tprintf(\"%d\\n\",f[m]);\n\treturn 0;\n}\n```",
        "postTime": 1667542654,
        "uid": 375953,
        "name": "Sktn0089",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3P7456\u3011The ABCD Murderer"
    }
]