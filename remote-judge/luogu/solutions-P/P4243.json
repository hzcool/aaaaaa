[
    {
        "content": "# \u9898\u89e3\n\u672c\u9898\u9898\u89e3\u601d\u8def\u6765\u81ea[bzoj1558 [JSOI2009]\u7b49\u5dee\u6570\u5217 - zbtrs - \u535a\u5ba2\u56ed](https://www.cnblogs.com/zbtrs/p/8424737.html)\uff0c\u611f\u8c22\u539f\u4f5c\u8005\u3002\n\n\u672c\u9898\u9898\u89e3\u540c\u6b65\u53d1\u5e03\u4e8e\u6211\u7684\u535a\u5ba2[[JSOI2009]\u7b49\u5dee\u6570\u5217 \u9898\u89e3 | KSkun's Blog](https://ksmeow.moe/array_jsoi09_sol/)\uff0c\u6b22\u8fce\u6765\u901b~\n\n## \u8f6c\u5316\uff1a\u5dee\u5206\u6570\u5217\n\u770b\u5230\u7ef4\u62a4\u7b49\u5dee\u6570\u5217\uff0c\u6211\u4eec\u60f3\u5230\u7ef4\u62a4\u8fd9\u4e2a\u6570\u5217\u7684\u5dee\u5206\u6570\u5217\u3002\n\u5dee\u5206\u6570\u5217\u662f\u5565\u5440\uff1f\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u628a\u6570\u5217\u7684\u6bcf\u9879\u6362\u6210\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$b_i = a_{i+1} - a_i$\u3002\u7b49\u5dee\u6570\u5217\u5728\u5dee\u5206\u6570\u5217\u4e2d\u7684\u8868\u73b0\u5c31\u662f\u8fde\u7eed\u4e00\u6bb5\u76f8\u540c\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u662f\u7b49\u5dee\u6570\u5217\u7684\u516c\u5dee\uff08\u6216\u8005\u53eb\u6b65\u957f\uff09\u3002\n\n\u8ba9\u6211\u4eec\u63a2\u7d22\u4e00\u4e0b\u5728\u5dee\u5206\u6570\u5217\u4e0a\u52a0\u7b49\u5dee\u6570\u5217\u64cd\u4f5c\u5e94\u8be5\u600e\u4e48\u505a\u3002\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u53ea\u5f71\u54cd\u9996\u9879\u548c\u524d\u4e00\u9879\uff08l-1\uff09\u3001\u672b\u9879\u548c\u540e\u4e00\u9879\uff08r\uff09\u7684\u503c\u3002\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217\u5c31\u662f\u4e24\u4e2a\u5355\u70b9\u52a0\u3002\n\n## \u8be2\u95ee\uff1a\u5982\u4f55\u5408\u5e76\u533a\u95f4\u4fe1\u606f\uff1f\n\u5047\u5982\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5dee\u5206\u6570\u5217\uff0c\u8fde\u7eed\u7684\u76f8\u540c\u6570\u5b57\u8fd9\u4e00\u6bb5\u5c31\u662f\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u90a3\u4e48\u96f6\u6563\u7684\u4e0d\u8fde\u7eed\u503c\u5462\uff1f\n\n\u8ba9\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n`1 2 3 (4 4 4) 1 2 (3 3) 1 2`\u5dee\u5206\u6570\u5217\n\n`1 2 4 (7 11 15 19) 20 (22 25 28) 29 31`\u539f\u6570\u5217\n\n\u663e\u7136\u539f\u6570\u5217\u4e2d\u90a3\u4e9b\u5c5e\u4e8e\u96f6\u6563\u503c\u7684\u6570\u5b57\u53ef\u4ee5\u6210\u5bf9\u6784\u6210\u7b49\u5dee\u6570\u5217\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fde\u7eed\u4e00\u6bb5\u96f6\u6563\u503c\u80fd\u6784\u6210\u7684\u7b49\u5dee\u6570\u5217\u6570\u91cf\u5e94\u8be5\u662f\u8fd9\u4e00\u6bb5\u7684\u957f\u5ea6/2\u3002\n\n\u63a5\u4e0b\u6765\u662f\u4e00\u4e2a\u95ee\u9898\uff1a\u5dee\u5206\u6570\u5217\u4e0a\u4e00\u6bb5\u6570\u5bf9\u5e94\u539f\u6570\u5217\u4e2d\u7684\u957f\u5ea6\u5e94\u8be5+1\uff0c\u4e3a\u4ec0\u4e48\u76f4\u63a5/2\u662f\u6b63\u786e\u7684\u5462\uff1f\u5f53\u6211\u4eec\u6c42\u6570\u5217\u4e2d\u95f4\u7684\u4e00\u6bb5\u96f6\u6563\u503c\uff0c\u5b9e\u9645\u4e0a\u5de6\u53f3\u4e24\u8fb9\u90fd\u662f\u7b49\u5dee\u6570\u5217\u3002\u5982\u679c\u4f7f\u5de6\u53f3\u4e24\u8fb9\u7b49\u5dee\u6570\u5217\u7684\u957f\u5ea6\u6700\u5927\uff0c\u5b9e\u9645\u4e0a\u539f\u6570\u5217\u4e2d\u96f6\u6563\u7684\u6570\u91cf\u5e94\u8be5\u662f-1\u7684\uff0c\u56e0\u4e3a\u5de6\u53f3\u7aef\u70b9\u88ab\u5305\u542b\u8fdb\u5de6\u53f3\u7684\u7b49\u5dee\u6570\u5217\u4e86\u3002\u5982\u679c\u662f\u5de6\u53f3\u7aef\u7684\u96f6\u6563\u503c\uff0c\u5219\u6709\u4e00\u7aef\u65e0\u6cd5\u5305\u542b\u8fdb\u7b49\u5dee\u6570\u5217\uff0c\u539f\u6570\u5217\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u4e3a\u5dee\u5206\u6570\u5217\u96f6\u6563\u503c\u7684\u957f\u5ea6\u3002\n\n**\u8fd9\u4e00\u6bb5\u662f\u5f88\u591a\u535a\u4e3b\u5e76\u6ca1\u6709\u6ce8\u660e\u7684\u7ec6\u8282\uff0c\u6211\u5728\u7406\u89e3\u4e2d\u4e5f\u9047\u5230\u4e86\u56f0\u60d1\uff0c\u5728\u8fd9\u91cc\u7279\u522b\u8bb2\u89e3\u4e86\u4e00\u4e0b\u3002**\n\n\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ee5\u4e0a\u5185\u5bb9\u5462\uff1f\u56e0\u4e3a\u7ef4\u62a4\u5de6\u53f3\u4e24\u7aef\u7684\u96f6\u6563\u503c\u6570\u91cf\u65b9\u4fbf\u533a\u95f4\u7684\u5408\u5e76\uff0c\u800c\u533a\u95f4\u5408\u5e76\u662f\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u3002\n\n## \u7ebf\u6bb5\u6811\u9898\u7684\u5957\u8def\n### \u533a\u95f4\u8bb0\u4e0b\u4ec0\u4e48\uff1f\n\u8bb0\u4e0b\u8fd9\u4e2a\u533a\u95f4\u5de6\u53f3\u4e24\u7aef\u7684\u96f6\u6563\u503c\u957f\u5ea6\u3001\u5de6\u53f3\u4e24\u7aef\u70b9\u503c\uff08\u5408\u5e76\u533a\u95f4\u65f6\u68c0\u67e5\u5de6\u513f\u5b50\u7684\u53f3\u7aef\u548c\u53f3\u513f\u5b50\u7684\u5de6\u7aef\u662f\u5426\u503c\u76f8\u7b49\uff0c\u5373\u5e76\u6210\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff09\u3001\u9664\u4e86\u96f6\u6563\u503c\u4ee5\u5916\u7684\u90a3\u4e00\u6bb5\u80fd\u591f\u5212\u5206\u6210\u6700\u5c11\u591a\u5c11\u7b49\u5dee\u6570\u5217\u3001\u533a\u95f4\u957f\u5ea6\u3002\u53e6\u5916\u533a\u95f4\u52a0\u64cd\u4f5c\u7684lazy\u6807\u8bb0\u5728\u8fd9\u91cc\u4e5f\u662f\u53ef\u4ee5\u7528\u7684\u3002\n\n### \u600e\u4e48\u8bbe\u7f6e\u521d\u503c\uff1f\n\u4ece\u957f\u5ea6\u4e3a1\u7684\u533a\u95f4\u5f00\u59cb\u8bbe\u7f6e\u521d\u503c\u5373\u53ef\u3002\n\n### \u91cd\u8981\uff01\u600e\u4e48\u5408\u5e76\u5de6\u53f3\u513f\u5b50\u4e0a\u4f20\u7684\u4fe1\u606f\uff1f\n\u4e0d\u53ef\u907f\u514d\u5730\uff0c\u8fd9\u9898\u4f1a\u9047\u5230\u5206\u7c7b\u8ba8\u8bba\u3002\u4e0b\u9762\u8ba9\u6211\u4eec\u6162\u6162\u5730\u6574\u7406\u4e00\u4e0b\u3002\n\n\u9ed8\u8ba4\uff1a\u672c\u533a\u95f4\u5212\u5206\u6570\u4e3a\u5de6\u53f3\u513f\u5b50\u5212\u5206\u6570\u4e4b\u548c\u3002\n\n**1.\u5de6\u53f3\u513f\u5b50\u90fd\u662f\u7eaf\u96f6\u6563\u503c**\n\n\u9700\u8981\u68c0\u67e5\u5de6\u513f\u5b50\u7684\u53f3\u7aef\u70b9\u548c\u53f3\u513f\u5b50\u7684\u5de6\u7aef\u70b9\u662f\u5426\u76f8\u7b49\u3002\uff08*\u4ee5\u4e0b\u7701\u7565\u8fd9\u53e5\u8bdd*\uff09\n\n\u76f8\u7b49\u2192\u4e2d\u95f4\u6784\u6210\u957f\u4e3a2\u7684\u7b49\u5dee\u6570\u5217\uff0c\u5de6\u7aef\u96f6\u6563\u503c\u957f\u4e3a\u5de6\u513f\u5b50-1\uff0c\u53f3\u7aef\u96f6\u6563\u503c\u957f\u4e3a\u53f3\u513f\u5b50-1\uff0c\u672c\u533a\u95f4\u5185\u9664\u4e24\u7aef\u96f6\u6563\u503c\u4ee5\u5916\u7684\u90e8\u5206\u7684\u5212\u5206\u6570\uff08*\u4ee5\u4e0b\u7b80\u79f0\u5212\u5206\u6570*\uff09\u4e3a1\u3002\n\n\u4e0d\u76f8\u7b49\u2192\u5de6\u53f3\u4e24\u7aef\u96f6\u6563\u503c\u957f\u90fd\u4e3a\u672c\u533a\u95f4\u957f\uff0c\u5212\u5206\u6570\u4e3a0\u3002\n\n**2.\u5de6\u513f\u5b50\u662f\u7eaf\u96f6\u6563\u503c\uff0c\u53f3\u513f\u5b50\u4e0d\u662f**\n\n\u672c\u533a\u95f4\u53f3\u7aef\u96f6\u6563\u503c\u957f\u4e3a\u53f3\u513f\u5b50\u53f3\u7aef\u96f6\u6563\u503c\u957f\u3002\n\n\u76f8\u7b49\u2192\u4e2d\u95f4\u6784\u6210\u957f\u4e3a2\u7684\u7b49\u5dee\u6570\u5217\uff0c\u5de6\u7aef\u96f6\u6563\u503c\u957f\u4e3a\u5de6\u513f\u5b50-1\uff0c\u5c06\u53f3\u513f\u5b50\u5de6\u7aef\u96f6\u6563\u503c\u6784\u6210\u7684\u7b49\u5dee\u6570\u5217\u6570\u52a0\u5165\u5212\u5206\u6570\u3002\n\n\u4e0d\u76f8\u7b49\u2192\u5c06\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u5de6\u7aef\u96f6\u6563\u503c\u5408\u5e76\u4f5c\u4e3a\u672c\u533a\u95f4\u5de6\u7aef\u96f6\u6563\u503c\u3002\n\n**3.\u53f3\u513f\u5b50\u662f\u7eaf\u96f6\u6563\u503c\uff0c\u5de6\u513f\u5b50\u4e0d\u662f**\n\n\u4ece2\u60c5\u51b5\u7ffb\u8f6c\u4e00\u4e0b\u5373\u53ef\u3002\u81ea\u5df1\u63a8\u4e00\u4e0b\u5427\u3002\n\n\u4ee5\u4e0b\u60c5\u51b5\u5373\u53ef\u8ba4\u4e3a\uff1a\u672c\u533a\u95f4\u5de6\u7aef\u96f6\u6563\u503c\u957f\u7b49\u4e8e\u5de6\u513f\u5b50\u5de6\u7aef\u96f6\u6563\u503c\u957f\uff0c\u53f3\u7aef\u540c\u7406\u3002\n\n**4.\u5de6\u513f\u5b50\u53f3\u7aef\u548c\u53f3\u513f\u5b50\u5de6\u7aef\u65e0\u96f6\u6563\u503c**\n\n\u76f8\u7b49\u2192\u5212\u5206\u6570\u8981-1\uff0c\u9664\u53bb\u91cd\u590d\u8ba1\u7b97\u7684\u8de8\u5de6\u53f3\u513f\u5b50\u7684\u7b49\u5dee\u6570\u5217\u3002\n\n\u4e0d\u76f8\u7b49\u2192\u7b97\u5230\u5f53\u524d\u6b65\u9aa4\u7684\u7ed3\u679c\u5c31\u662f\u672c\u533a\u95f4\u7ed3\u679c\u3002\n\n**5.\u5de6\u513f\u5b50\u53f3\u7aef\u65e0\u96f6\u6563\u503c\uff0c\u53f3\u513f\u5b50\u5de6\u7aef\u6709\u96f6\u6563\u503c**\n\n\u4e0d\u76f8\u7b49\u2192\u5c06\u53f3\u513f\u5b50\u5de6\u7aef\u96f6\u6563\u503c\u6784\u6210\u7684\u7b49\u5dee\u6570\u5217\u6570\u52a0\u5165\u5212\u5206\u6570\u3002\n\n\u76f8\u7b49\u2192\u52a0\u5165\u540e-1\uff0c\u7406\u7531\u540c\u4e0a\u3002\n\n**6.\u53f3\u513f\u5b50\u5de6\u7aef\u65e0\u96f6\u6563\u503c\uff0c\u5de6\u513f\u5b50\u53f3\u7aef\u6709\u96f6\u6563\u503c**\n\n\u4ece5\u60c5\u51b5\u7ffb\u8f6c\u4e00\u4e0b\u5373\u53ef\u3002\u81ea\u5df1\u63a8\u4e00\u4e0b\u5427\u3002\n\n**7.\u9664\u4e0a\u7684\u4e00\u822c\u60c5\u51b5**\n\n\u4e0d\u76f8\u7b49\u2192\u5c06\u5de6\u513f\u5b50\u53f3\u7aef\u548c\u53f3\u513f\u5b50\u5de6\u7aef\u96f6\u6563\u503c\u6784\u6210\u7684\u7b49\u5dee\u6570\u5217\u6570\u52a0\u5165\u5212\u5206\u6570\u3002\n\n\u76f8\u7b49\u2192\u5de6\u513f\u5b50\u53f3\u7aef\u548c\u53f3\u513f\u5b50\u5de6\u7aef\u96f6\u6563\u503c\u6570\u5148\u90fd-1\u518d\u8ba1\u7b97\u6784\u6210\u7b49\u5dee\u6570\u5217\u6570\uff0c\u52a0\u5165\u5212\u5206\u6570\u540e\u52a01\uff0c\u4e3a\u4e86\u7279\u6b8a\u5904\u7406\u8de8\u5de6\u53f3\u513f\u5b50\u7684\u7b49\u5dee\u6570\u5217\u3002\n\n\u5230\u6b64\u6240\u6709\u7684\u60c5\u51b5\u90fd\u8ba8\u8bba\u5b8c\u6210\u4e86\u3002\u628a\u8fd9\u4e9b\u60c5\u51b5\u5199\u5168\u4e86\u5c31\u4e0d\u4f1a\u51fa\u4e8b\u3002\n\n## \u603b\u7ed3\u4e00\u4e0b\n\u8fd9\u4e2a\u9898\u662f\u4e2a\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u7b54\u6848\u7684\u9898\uff0c\u5173\u952e\u70b9\u5728\u5dee\u5206\u6570\u5217\u548c\u533a\u95f4\u5408\u5e76\u7684\u8ba8\u8bba\u3002\u7ec6\u8282\u5904\u7406\u5f88\u8981\u547d\uff0c\u8003\u573a\u4e0a\u8981\u51b7\u9759\u5206\u6790\uff0c\u8ba8\u8bba\u5168\u9762\u3002\u6211\u53cd\u5e94\u662f\u5199\u4e0d\u51fa\u7684\uff08\u7b11\uff09\u3002\n\n\u5176\u4ed6\u7ec6\u8282\u53c2\u8003\u4e00\u4e0b\u5e95\u4e0b\u7684\u4ee3\u7801\u5427\uff0c\u81ea\u8ba4\u4e3a\u4ee3\u7801\u98ce\u683c\u8fd8\u662f\u5f88\u6574\u6d01\u7684\u3002\u6ca1\u6709\u6ce8\u91ca\u53ef\u80fd\u770b\u8d77\u6765\u6bd4\u8f83\u8d39\u52b2\u3002\u53ef\u4ee5\u5c1d\u8bd5\u5bf9\u5e94\u7740\u4e0a\u9762\u7684\u89e3\u6790\u770b\u3002\n\n# \u4ee3\u7801\n*\u6ce8\uff1a\u533a\u95f4\u4fe1\u606f\u4e2d\uff0c`l`\u3001`r`\u662f\u5de6\u53f3\u7aef\u70b9\u503c\uff0c`llen`\u3001`rlen`\u662f\u5de6\u53f3\u7aef\u96f6\u6563\u503c\u957f\uff0c`ans`\u662f\u5212\u5206\u6570\uff0c`tag`\u662flazy\u6807\u8bb0\uff0c`siz`\u662f\u533a\u95f4\u957f\u3002*\n\n```cpp\n// Code by KSkun, 2018/2 \n#include <cstdio>\n#include <cstring>\n#include <algorithm>\ntypedef long long LL;\n\ninline char fgc() {\n    static char buf[100000], *p1 = buf, *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\ninline LL readint() {\n    register LL res = 0, neg = 1;\n    char c = fgc(); \n    while(c < '0' || c > '9') {\n        if(c == '-') neg = -1;\n        c = fgc();\n    }\n    while(c >= '0' && c <= '9') {\n        res = res * 10 + c - '0';\n        c = fgc();\n    }\n    return res * neg;\n}\n\nconst int MAXN = 100005;\n\nLL n, q, s, t, a, b;\nchar op;\n\ninline bool isop(char c) {\n\treturn c == 'A' || c == 'B';\n}\n\ninline char readop() {\n\tchar c = fgc();\n\twhile(!isop(c)) c = fgc();\n\treturn c;\n}\n\n#define lch o << 1\n#define rch o << 1 | 1\n#define mid ((l + r) >> 1)\n\nstruct Data {\n\tLL l, r, llen, rlen, ans, tag, siz;\n} tree[MAXN << 2];\n\nLL val[MAXN];\n\ninline void pushdown(int o) {\n\tif(tree[o].tag) {\n\t\ttree[lch].tag += tree[o].tag;\n\t\ttree[lch].l += tree[o].tag;\n\t\ttree[lch].r += tree[o].tag;\n\t\ttree[rch].tag += tree[o].tag;\n\t\ttree[rch].l += tree[o].tag;\n\t\ttree[rch].r += tree[o].tag;\n\t\ttree[o].tag = 0;\n\t}\n}\n\ninline void merge(Data *dest, Data lson, Data rson) {\n\tData *rt = dest, *ls = &lson, *rs = &rson;\n\tbool flag = ls->r == rs->l;\n\tmemset(rt, 0, sizeof(Data));\n\trt->siz = ls->siz + rs->siz;\n\trt->l = ls->l;\n\trt->r = rs->r;\n\trt->ans = ls->ans + rs->ans;\n\tif(ls->ans == 0 && rs->ans == 0) {\n\t\tif(flag) {\n\t\t\trt->llen = ls->llen - 1;\n\t\t\trt->rlen = rs->rlen - 1;\n\t\t\trt->ans++;\n\t\t} else {\n\t\t\trt->llen = rt->rlen = rt->siz;\n\t\t}\n\t\treturn;\n\t}\n\tif(ls->ans == 0) {\n\t\trt->rlen = rs->rlen;\n\t\tif(flag) {\n\t\t\trt->llen = ls->llen - 1;\n\t\t\tif(rs->llen) {\n\t\t\t\trt->ans += (rs->llen - 1) / 2 + 1;\n\t\t\t}\n\t\t} else {\n\t\t\trt->llen = ls->siz + rs->llen;\n\t\t}\n\t\treturn;\n\t}\n\tif(rs->ans == 0) {\n\t\trt->llen = ls->llen;\n\t\tif(flag) {\n\t\t\trt->rlen = rs->rlen - 1;\n\t\t\tif(ls->rlen) {\n\t\t\t\trt->ans += (ls->rlen - 1) / 2 + 1;\n\t\t\t}\n\t\t} else {\n\t\t\trt->rlen = rs->siz + ls->rlen;\n\t\t}\n\t\treturn;\n\t}\n\trt->llen = ls->llen;\n\trt->rlen = rs->rlen;\n\tif(ls->rlen == 0 && rs->llen == 0) {\n\t\tif(flag) {\n\t\t\trt->ans--;\n\t\t}\n\t\treturn;\n\t}\n\tif(ls->rlen == 0) {\n\t\tif(flag) {\n\t\t\trt->ans += (rs->llen - 1) / 2;\n\t\t} else {\n\t\t\trt->ans += rs->llen / 2;\n\t\t}\n\t\treturn;\n\t}\n\tif(rs->llen == 0) {\n\t\tif(flag) {\n\t\t\trt->ans += (ls->rlen - 1) / 2\n\t\t} else {\n\t\t\trt->ans += ls->rlen / 2;\n\t\t}\n\t\treturn;\n\t}\n\tLL toadd = (ls->rlen + rs->llen) / 2;\n\tif(flag) {\n\t\ttoadd = std::min(toadd, (ls->rlen - 1) / 2 + (rs->llen - 1) / 2 + 1);\n\t}\n\trt->ans += toadd;\n} \n\ninline void build(int o, int l, int r) {\n\tif(l == r) {\n\t\ttree[o].l = tree[o].r = val[l];\n\t\ttree[o].llen = tree[o].rlen = tree[o].siz = 1;\n\t\treturn;\n\t}\n\tbuild(lch, l, mid);\n\tbuild(rch, mid + 1, r);\n\tmerge(&tree[o], tree[lch], tree[rch]);\n}\n\ninline void add(int o, int l, int r, int ll, int rr, LL v) {\n\tif(l >= ll && r <= rr) {\n\t\ttree[o].l += v;\n\t\ttree[o].r += v;\n\t\ttree[o].tag += v;\n\t\treturn;\n\t}\n\tpushdown(o);\n\tif(mid >= ll) {\n\t\tadd(lch, l, mid, ll, rr, v);\n\t}\n\tif(mid < rr) {\n\t\tadd(rch, mid + 1, r, ll, rr, v);\n\t}\n\tmerge(&tree[o], tree[lch], tree[rch]);\n}\n\ninline Data query(int o, int l, int r, int ll, int rr) {\n\tif(l >= ll && r <= rr) {\n\t\treturn tree[o];\n\t}\n\tpushdown(o);\n\tif(rr <= mid) {\n\t\treturn query(lch, l, mid, ll, rr);\n\t} else if(ll > mid) {\n\t\treturn query(rch, mid + 1, r, ll, rr);\n\t} else {\n\t\tData res;\n\t\tmerge(&res, query(lch, l, mid, ll, mid), query(rch, mid + 1, r, mid + 1, rr));\n\t\treturn res; \n\t}\n}\n\nint main() {\n\tn = readint();\n\tfor(int i = 1; i <= n; i++) {\n\t\tval[i] = readint();\n\t}\n\tfor(int i = 1; i <= n - 1; i++) {\n\t\tval[i] = val[i + 1] - val[i];\n\t}\n\tn--;\n\tbuild(1, 1, n);\n\tq = readint();\n\twhile(q--) {\n\t\top = readop();\n\t\tif(op == 'A') {\n\t\t\ts = readint();\n\t\t\tt = readint();\n\t\t\ta = readint();\n\t\t\tb = readint();\n\t\t\tif(s > 1) {\n\t\t\t\tadd(1, 1, n, s - 1, s - 1, a);\n\t\t\t}\n\t\t\tif(t <= n) {\n\t\t\t\tadd(1, 1, n, t, t, -(a + (t - s) * b));\n\t\t\t}\n\t\t\tif(s < t) {\n\t\t\t\tadd(1, 1, n, s, t - 1, b);\n\t\t\t}\n\t\t} \n\t\tif(op == 'B') {\n\t\t\ts = readint();\n\t\t\tt = readint();\n\t\t\tif(s == t) {\n\t\t\t\tprintf(\"1\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tData res = query(1, 1, n, s, t - 1);\n\t\t\tLL ans = (t - s + 2) / 2;\n\t\t\tif(res.ans == 0) {\n\t\t\t\tprintf(\"%lld\\n\", ans);\n\t\t\t} else {\n\t\t\t\tans = std::min(ans, res.ans + (res.llen + 1) / 2 + (res.rlen + 1) / 2);\n\t\t\t\tprintf(\"%lld\\n\", ans);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1519211567,
        "uid": 35795,
        "name": "KSkun",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4243 \u3010[JSOI2009]\u7b49\u5dee\u6570\u5217\u3011"
    },
    {
        "content": "# \u7ebf\u6bb5\u6811\n\u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217\u663e\u7136\u7528\u7ebf\u6bb5\u6811\n\n\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u67e5\u8be2\u6211\u4eec\u91c7\u7528\u5dee\u5206\u7684\u65b9\u6cd5\n\n\u4ee4v[i] = v[i+1] - v[i]\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\u5219\u53d8\u4e3a\u4e86\u4e24\u4e2a\u5355\u70b9\u52a0\uff0c\u4e00\u4e2a\u533a\u95f4\u52a0\u3002\n\n\u800c\u5bf9\u4e8e\u67e5\u8be2\u64cd\u4f5c\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u516d\u4e2a\u4fe1\u606f \uff1a\n\t1. \u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684\u6570\u503c -> l\n    2. \u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u6570\u503c -> r\n    3. \u5f53\u524d\u533a\u95f4\u5982\u679c\u5de6\u53f3\u7aef\u70b9\u90fd\u4e0d\u9009\u6709\u591a\u5c11\u4e2a\u7b49\u5dee\u6570\u5217 -> s[0]\n    4. \u5f53\u524d\u533a\u95f4\u5982\u679c\u53ea\u9009\u5de6\u7aef\u70b9\u6709\u591a\u5c11\u4e2a\u7b49\u5dee\u6570\u5217 -> s[1]\n    5. \u5f53\u524d\u533a\u95f4\u5982\u679c\u53ea\u9009\u53f3\u7aef\u70b9\u6709\u591a\u5c11\u4e2a\u7b49\u5dee\u6570\u5217 -> s[2]\n    6. \u5f53\u524d\u533a\u95f4\u5982\u679c\u5de6\u53f3\u7aef\u70b9\u90fd\u9009\u6709\u591a\u5c11\u4e2a\u7b49\u5dee\u6570\u5217 -> s[3]\n    \n\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u67e5\u8be2\u533a\u95f4\u7684s[3]\u7684\u503c\n\n\u5982\u4f55\u5408\u5e76\u5462\uff1f\n\n\u4fe1\u606f1\u548c2  \u76f4\u63a5\u7ee7\u627f\u5de6\u53f3\u533a\u95f4\u5373\u53ef\n\n\u4fe1\u606f3,4,5,6\u662f\u76f8\u4f3c\u7684 \u4ee5\u4e0b\u4ee5s[0]\u4e3a\u4f8b\n\ns[0] = min(lc->s[2]+rc->s[1]-(lc->r==rc->l), lc->s[0]+rc->s[1], lc->s[2]+rc->s[0]);\n\n\u5171\u6709\u4e09\u79cd\u60c5\u51b5\u5bf9\u4e8e\u533a\u95f4\u5408\u5e76\u65f6\u5408\u5e76\u5904\u7684\u7aef\u70b9\u9009\u62e9\uff0c\u53d6\u4e2aMin\u5373\u53ef\u53e6\u5916\u4e09\u4e2a\u4fe1\u606f\u540c\u6837\n\n### \u67e5\u8be2\u548c\u4fee\u6539\u65f6\u5b58\u5728\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u5177\u4f53\u89c1\u4ee3\u7801\n\n\n# \u672c\u4eba\u7684\u4ee3\u7801\n```\n#include <bits/stdc++.h>\n#define R register\n#define eps 1e-12\n#define INF (1<<30)\n#define LINF (1ll<<60)\n#define LL long long\n#define MM(x, y) memset(x, y, sizeof x)\n#define Fo(i, x, y) for(R int i=x; i<=y; ++i)\n#define Ro(i, x, y) for(R int i=x; i>=y; --i)\nusing namespace std;\ntemplate<typename T> inline T Max(R T x, R T y) {return x > y ? x : y;}\ntemplate<typename T> inline T Min(R T x, R T y) {return x < y ? x : y;}\ntemplate<typename T> inline void in(R T &x)\n{\n    static int ch; static bool flag;\n    for(flag=false, ch=getchar(); ch<'0'||ch>'9'; ch=getchar()) flag |= ch=='-';\n    for(x=0; ch>='0'&&ch<='9'; ch=getchar()) x = (x<<1) + (x<<3) + ch - '0';\n    x = flag ? -x : x;\n}\n/*********************************Samle****************************************/\n\ninline void minn(R int &x, R int y) {if(y < x) x = y;}\nstruct data{\n\tint s[4], l, r;\n\tdata operator + (const data &y) const\n\t{\n\t\tdata c; c.l = l; c.r = y.r;\n\t\tc.s[0] = s[2] + y.s[1] - (r == y.l);\n\t\tminn(c.s[0], s[0]+y.s[1]); minn(c.s[0], s[2]+y.s[0]);\n\t\tc.s[1] = s[3] + y.s[1] - (r == y.l);\n\t\tminn(c.s[1], s[1]+y.s[1]); minn(c.s[1], s[3]+y.s[0]);\n\t\tc.s[2] = s[2] + y.s[3] - (r == y.l);\n\t\tminn(c.s[2], s[2]+y.s[2]); minn(c.s[2], s[0]+y.s[3]);\n\t\tc.s[3] = s[3] + y.s[3] - (r == y.l);\n\t\tminn(c.s[3], s[3]+y.s[2]); minn(c.s[3], s[1]+y.s[3]);\n\t\treturn c;\n\t}\n};\n#define lc (o << 1)\n#define rc (lc | 1)\n#define mid ((l + r) >> 1)\nstruct node{\n\tint val; data x;\n}tr[500005]; int n, q, A[100005];\ninline void pushdown(R int o)\n{\n\tif(tr[o].val)\n\t{\n\t\ttr[lc].val += tr[o].val; tr[rc].val += tr[o].val;\n\t\ttr[lc].x.l += tr[o].val; tr[rc].x.l += tr[o].val;\n\t\ttr[lc].x.r += tr[o].val; tr[rc].x.r += tr[o].val;\n\t\ttr[o].val = 0;\n\t}\n}\ninline void build(R int o, R int l, R int r)\n{\n\tif(l == r)\n\t{\n\t\ttr[o].x.s[0] = 0; tr[o].val = 0; tr[o].x.l = tr[o].x.r = A[l];\n\t\ttr[o].x.s[1] = tr[o].x.s[2] = tr[o].x.s[3] = 1;\n\t\treturn;\n\t}\n\tbuild(lc, l, mid); build(rc, mid+1, r);\n\ttr[o].val = 0;\n\ttr[o].x = tr[lc].x + tr[rc].x;\n}\ninline void change(R int o, R int l, R int r, R int x, R int y, R int k)\n{\n\tif(x <= l && y >= r)\n\t{\n\t\ttr[o].val += k;\n\t\ttr[o].x.l += k;\n\t\ttr[o].x.r += k;\n\t\treturn;\n\t}\n\tpushdown(o);\n\tif(x <= mid) change(lc, l, mid, x, y, k);\n\tif(y > mid) change(rc, mid+1, r, x, y, k);\n\ttr[o].x = tr[lc].x + tr[rc].x;\n}\ninline data query(R int o, R int l, R int r, R int x, R int y)\n{\n\tif(x <= l && y >= r) return tr[o].x;\n\tpushdown(o);\n\tif(y <= mid) return query(lc, l, mid, x, y);\n\telse if(x > mid) return query(rc, mid+1, r, x, y);\n\telse return query(lc, l, mid, x, mid) + query(rc, mid+1, r, mid+1, y);\n}\n\nint main()\n{\n\tin(n);Fo(i, 1, n) in(A[i]); Fo(i, 1, n-1) A[i] = A[i+1] - A[i];\n\tbuild(1, 1, n-1);\n\tin(q);\n\tFo(i, 1, q)\n\t{\n\t\tR char opt; R int s, t, a, b;\n\t\tscanf(\" %c%d%d\", &opt, &s, &t);\n\t\tif(opt == 'A')\n\t\t{\n\t\t\tin(a); in(b);\n\t\t\tif(s != 1) change(1, 1, n-1, s-1, s-1, a); // \u56e0\u4e3a1\u4f4d\u7f6e\u6ca1\u6709\u4e0e\u524d\u4e00\u4e2a\u7684\u5dee\n\t\t\tif(t != n) change(1, 1, n-1, t, t, -(a+b*(t-s))); // \u4e0d\u5b58\u5728n+1\u4e0en\u7684\u5dee\n\t\t\tif(s != t)change(1, 1, n-1, s, t-1, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(s == t) // \u53ea\u6709\u4e00\u4e2a\u6570 ans\u4e00\u5b9a\u662f1\n\t\t\t{\n\t\t\t\tputs(\"1\");continue;\n\t\t\t}\n\t\t\tdata re = query(1, 1, n-1, s, t-1);\n\t\t\tprintf(\"%d\\n\", re.s[3]);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n\n",
        "postTime": 1519199096,
        "uid": 36268,
        "name": "Pine",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4243 \u3010[JSOI2009]\u7b49\u5dee\u6570\u5217\u3011"
    },
    {
        "content": "\n## P4243 \u3010[JSOI2009]\u7b49\u5dee\u6570\u5217\u3011\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u7ec3\u624b\u9898\n\n\u7531\u7b49\u5dee\u53ef\u4ee5\u60f3\u5230\u5dee\u5206\u5e8f\u5217\n\n$s[i] = a[i + 1] - a[i]$\n\n\u5982\u679c$s[1] = s[2] = ... = s[n]$\u7684\u8bdd,\u90a3\u4e48$1...n$\u53ca\u4e3a\u7b49\u5dee\u6570\u5217\n\n\u8003\u8651\u5dee\u5206\u540e\u7684\u5e8f\u5217,\u5728\u5e8f\u5217\u7684$[s, t]$\u533a\u95f4\u4e0a\u52a0\u4e0a\u521d\u503c\u4e3a$a$\uff0c\u6b65\u957f\u4e3a$b$\u7684\u7b49\u5dee\u6570\u5217,\u90a3\u4e48\u5dee\u5206\u5e8f\u5217\u4e0a\u65e2\u53ef\u53d8\u5f62,\u5206\u4e09\u7c7b\u60c5\u51b5\u8ba8\u8bba\n\n### \u533a\u95f4\u4fee\u6539\u7684\u8fc7\u7a0b\n\n$part 1$  \n$s< i <t$ $s[i] = a[i + 1] + a + b * (i + 1 - s) - a[i]  - a - b * (i - s)= s[i]  + b$ \n\n$s[i] = s[i] + b$\n\n$part 2$\n\n$i = s$ $&&$ $ i != 1$ \n$s[i] = a[i + 1] + a + b * (s - s) - a[i]  = a[i + 1] + a - a[i] = s[i] + a$\n$s[i] = s[i] + a$\n\n$part 3$\n\n$i = t$ $&&$ $i != n$\n$s[i] = a[i + 1] - a[i] - a - b * (i - s) = s[i] - (a + b * (t - s))$\n$s[i] = s[i] - (a + b * (t - s))$\n\n\n### push_up(p) push_down(p)\n\npush_up\u5c31\u4e0d\u7ec6\u8bb2\u4e86,\u5176\u4ed6\u9898\u89e3\u5199\u7684\u5f88\u8be6\u7ec6,$[l, mid] $$&$ $[mid + 1, r]$,\u5c31\u63d0\u793a\u4e00\u70b9(~~\u4e5f\u662f\u5361\u4e86\u6211\u5f88\u4e45\u7684\u4e00\u4e2a\u70b9~~),\u65e0\u8bba\u4e24\u4e2a\u6570\u5dee\u503c\u591a\u5927\u6216\u591a\u5c0f,\u8fd9\u4e24\u4e2a\u6570\u90fd\u662f\u7b49\u5dee\u6570\u5217\n\n```cpp\nt[p].x = t[ls(p)].x + t[rs(p)].x;\n\nstruct node{\n    int s[5], l, r;\n    node operator + (const node &y) const\n    {\n        node c; c.l = l; c.r = y.r;\n\t\tc.s[0] = MIN(s[2] + y.s[1] - (r == y.l), s[0] + y.s[1], s[2] + y.s[0]);\n        c.s[1] = MIN(s[3] + y.s[1] - (r == y.l), s[1] + y.s[1], s[3] + y.s[0]);\n        c.s[2] = MIN(s[2] + y.s[3] - (r == y.l), s[2] + y.s[2], s[0] + y.s[3]);\n        c.s[3] = MIN(s[3] + y.s[3] - (r == y.l), s[1] + y.s[3], s[3] + y.s[2]);\n        return c;\n    }\n};\n\n```\n\n\n```cpp\ninline void push_down(int p){\n\tif(t[p].tag == 0) return;\n\tt[ls(p)].tag += t[p].tag; t[rs(p)].tag += t[p].tag;\n\tt[ls(p)].x.l += t[p].tag; t[ls(p)].x.r += t[p].tag;\n\tt[rs(p)].x.l += t[p].tag; t[rs(p)].x.r += t[p].tag;\n\tt[p].tag = 0;\n\treturn;\n} \n```\n\n# code\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline ll read(){\n\tll x=0,f=1;char ch;\n\tdo{ch=getchar();if(ch=='-')f=-1;}while(ch>'9'||ch<'0');\n\tdo{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n\treturn f*x;\n}\n\n//\u5f53\u7b2ci\u4e2a\u8282\u70b9 \n\n#define int ll\n\nconst int MAX_N = 1E5 + 7;\n\nint n, m, a[MAX_N];\n\n//s[0] \u5de6\u53f3\u7aef\u70b9\u90fd\u4e0d\u9009 \n\n//s[1] \u53ea\u9009\u5de6\u7aef\u70b9 \n\n//s[2] \u53ea\u9009\u53f3\u7aef\u70b9\n\n//s[3] \u5de6\u53f3\u7aef\u70b9\u90fd\u9009\n\nint MIN(int a, int b, int c){\n\treturn min(a, min(b, c));\n}\n\nstruct node{\n    int s[5], l, r;\n    node operator + (const node &y) const\n    {\n        node c; c.l = l; c.r = y.r;\n\t\tc.s[0] = MIN(s[2] + y.s[1] - (r == y.l), s[0] + y.s[1], s[2] + y.s[0]);\n        c.s[1] = MIN(s[3] + y.s[1] - (r == y.l), s[1] + y.s[1], s[3] + y.s[0]);\n        c.s[2] = MIN(s[2] + y.s[3] - (r == y.l), s[2] + y.s[2], s[0] + y.s[3]);\n        c.s[3] = MIN(s[3] + y.s[3] - (r == y.l), s[1] + y.s[3], s[3] + y.s[2]);\n        return c;\n    }\n};\n\nstruct segment_tree{\n\tint l, r;\n\tll tag; node x;\t\n\t#define ls(p) (p << 1)\n\t#define rs(p) (p << 1 | 1)\n}t[MAX_N << 2];\n\nvoid build(int p, int l, int r){\n\tt[p].l = l;\n\tt[p].r = r;\n\tif(l == r){\n\t\tt[p].x.l = t[p].x.r = a[l];\n\t\tt[p].x.s[0] = 0;\n\t\tt[p].x.s[1] = t[p].x.s[2] = t[p].x.s[3] = 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p), l, mid);\n\tbuild(rs(p), mid + 1, r);\n\tt[p].x = t[ls(p)].x + t[rs(p)].x;\n}\n\ninline void push_down(int p){\n\tif(t[p].tag == 0) return;\n\tt[ls(p)].tag += t[p].tag; t[rs(p)].tag += t[p].tag;\n\tt[ls(p)].x.l += t[p].tag; t[ls(p)].x.r += t[p].tag;\n\tt[rs(p)].x.l += t[p].tag; t[rs(p)].x.r += t[p].tag;\n\tt[p].tag = 0;\n\treturn;\n} \n\nvoid change(int p, int l, int r, int v){\n\tif(l <= t[p].l && t[p].r <= r){\n\t\tt[p].x.l += v;\n\t\tt[p].x.r += v;\n\t\tt[p].tag += v;\n\t\treturn;\n\t}\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif(l <= mid)change(ls(p), l, r, v);\n\tif(r > mid) change(rs(p), l, r, v);\n\tt[p].x = t[ls(p)].x + t[rs(p)].x;\n}\n\nnode query(int p, int l, int r){\n\tif (l <= t[p].l && t[p].r <= r) return t[p].x;\n\tpush_down(p);\n\tint mid = (t[p].l + t[p].r) >> 1;\n\tif (r <= mid)return query(ls(p), l, r);\n\tif (l > mid) return query(rs(p), l, r);\n\treturn query(ls(p), l, r) + query(rs(p), l, r);\n}\n\nsigned main(){\n\tn = read();\n\tfor (int i = 1; i <= n; i ++ )a[i] = read();\n\tfor (int i = 1; i < n; i ++ ) a[i] = a[i + 1] - a[i];\n\tbuild(1, 1, n - 1);\n\tm = read();\n\tfor (int i = 1; i <= m; i ++ ){\n\t\tchar opt[10];int s, t;\n\t\tscanf(\"%s\", opt);\n\t\ts = read(), t = read();\n\t\tif (opt[0] == 'A'){\n\t\t\tint a = read(), b = read();\n\t\t\tif(s != 1) change(1, s - 1, s - 1, a);//a[s] - a[s - 1]  \n            if(t != n) change(1, t, t, -(a + b * (t - s)));//- (a + b * (t - s)) \n            if(s != t) change(1, s, t - 1, b);//a[s + 1] - a[s] + b   ....a[t] - a[t - 1] + b\n\t\t}\n\t\telse {\n\t\t\tif (s == t) puts(\"1\");\n\t\t\telse {\n\t\t\t\tnode ans = query(1, s, t - 1);//a[s + 1] - a[s]... a[t] - a[t - 1] \n\t\t\t\tprintf(\"%lld\\n\", ans.s[3]);\n\t\t\t}\n\t\t} \n\t} \n\treturn 0;\n}\n\n//s[i] = a[i + 1] - a[i]\n\n//\u5728\u5e8f\u5217\u7684[s, t][s,t]\u533a\u95f4\u4e0a\u52a0\u4e0a\u521d\u503c\u4e3aa,\u6b65\u957f\u4e3ab\u7684\u7b49\u5dee\u6570\u5217.\n\n//\u539f\u5e8f\u5217\u5219\u53d8\u6210 s[i] + b, s[i + 1] + b, s[i + 2] + b... \n```\n",
        "postTime": 1565589877,
        "uid": 107377,
        "name": "Cryin",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4243 \u3010[JSOI2009]\u7b49\u5dee\u6570\u5217\u3011"
    },
    {
        "content": "\u5148\u524d\u6392\u819c\u62dc\u4e00\u4e0b\u4e0b\u9762\u7684\u5404\u4f4d\u5927\u4f6c\u3002\r\n\r\n\u8fd9\u9898\u96be\u5ea6\u5e94\u8be5\u5728\u7d2b\u9898\u800c\u975e\u9ed1\u9898\uff0c\u4ee3\u7801\u96be\u5ea6\u6709\u4f59\u4f46\u601d\u7ef4\u96be\u5ea6\u8fd8\u4e0d\u662f\u90a3\u4e48\u9ad8\u3002\r\n\r\n\u8fd9\u4e2a\u9898\u76ee\u662f\u7b49\u5dee\u6570\u5217\uff0c\u4ee5\u53ca\u533a\u95f4\u52a0\uff0c\u8fd9\u4f1a\u8ba9\u6211\u4eec\u6bd4\u8f83\u81ea\u7136\u5730\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5dee\u5206\u3002\u8fd9\u6837`A`\u64cd\u4f5c\u5c31\u4e0d\u96be\u89e3\u51b3\u4e86\u3002\u77e5\u9053\u5de6\u7aef\u70b9$s$\uff0c\u53f3\u7aef\u70b9$t$\uff0c\u521d\u503c\u4e3a$a$\uff0c\u516c\u5dee\u4e3a$b$\uff0c\u90a3\u4e48\u672b\u9879\u81ea\u7136\u5c31\u662f$a+b\\times (t-s)$\u3002\u5176\u4ed6\u7684\u53c2\u8003\u666e\u901a\u7684\u5dee\u5206\u5373\u53ef\u3002\r\n\r\n\u4f46\u662f`B`\u64cd\u4f5c\u6709\u70b9\u6076\u5fc3\u3002\u6211\u4eec\u8981\u5b9a\u4e49\u56db\u4e2a\u53d8\u91cf`nolrc,lc,rc,lrc`\uff0c\u5206\u522b\u8868\u793a\uff1a\u4e0d\u5305\u542b\u5de6\u53f3\u7aef\u70b9$(l,r)$\uff0c\u5305\u542b\u5de6\u7aef\u70b9$[l,r)$\uff0c\u5305\u542b\u53f3\u7aef\u70b9$(l,r]$\uff0c\u4ee5\u53ca\u5de6\u53f3\u7aef\u70b9\u90fd\u5305\u542b$[l,r]$\u8fd9\u56db\u79cd\u60c5\u51b5\u7684\u7b54\u6848\uff0c\u540c\u65f6\u4e3a\u4e86\u65b9\u4fbf\u5408\u5e76\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684\u503c`lval`\u548c\u53f3\u7aef\u70b9\u7684\u503c`rval`\u3002\u63a5\u7740\u8003\u8651\u5982\u4f55\u5408\u5e76\u8fd9\u4e9b\u503c\u3002\r\n\r\n\u7ecf\u8fc7\u51b7\u9759\u601d\u8003\u540e\u4f1a\u53d1\u73b0\u4e00\u5171\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u7136\u540e\u5728\u8fd9\u4e09\u79cd\u60c5\u51b5\u4e2d\u53d6\u6700\u5c0f\u503c\u5373\u53ef\u3002\u4f8b\u5982\u5305\u542b\u5de6\u53f3\u7aef\u70b9\u7684`lrc`\uff0c\u5408\u5e76\u65b9\u6cd5\u5982\u4e0b\uff1a\r\n\r\n```\r\nt[id].x.lrc=t[id<<1].x.lrc+t[id<<1|1].x.lrc-(t[id<<1].x.rval==t[id<<1|1].x.lval);\r\nt[id].x.lrc=min(t[id].x.lrc,min(t[id<<1].x.lc+t[id<<1|1].x.lrc,t[id<<1].x.lrc+t[id<<1|1].x.rc));\r\n```\r\n\r\n\u7136\u540e\u5c31\u662f\u5f88\u591a\u7ec6\u8282\u95ee\u9898\u3002\u89c1\u4ee3\u7801\u3002\u522b\u4eba\u7684\u4ee3\u7801\u90fd\u662f\u4f7f\u7528\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u6211\u592a\u83dc\u6211\u4e0d\u4f1a\u91cd\u8f7d\uff0c\u800c\u4e14\u611f\u89c9\u8fd9\u4e2a\u91cd\u8f7d\u8fd0\u7b97\u7b26\u5b9e\u9645\u4e0a\u5c31\u548c\u7ebf\u6bb5\u6811\u7684`Push_Up`\u64cd\u4f5c\u975e\u5e38\u7c7b\u4f3c\uff0c\u5c31\u628a\u8fd9\u4e9b\u4e1c\u897f\u5199\u5728\u4e86`Push_Up()`\u91cc\u9762\u3002\r\n\r\n\u7136\u540e\u8fd9\u4e2a\u4ee3\u7801\u5bf9\u4e8e$n=1$\u7684\u60c5\u51b5\u4f1a\u6302\u2026\u2026\u8fd9\u4e2a\u6211\u662f\u77e5\u9053\u7684\u3002\r\n\r\n\u53e6\u5916\u5199\u5b8c\u4e4b\u540e\u624d\u610f\u8bc6\u5230\u8fd9\u4e2a`Data`\u7684\u7ed3\u6784\u4f53\u4f3c\u4e4e\u5e76\u4e0d\u7528\u5f00\u2026\u2026\uff08\u6628\u665a\u6211\u6bd4\u8f83\u8822\uff09\u628a\u5b83\u4e22\u8fdb\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\u4f53\u4e5f\u662f\u53ef\u4ee5\u7684\u6837\u5b50\u3002\u4e0d\u8fc7\u5982\u679c\u8981\u5199\u6e05\u6670\u70b9\u7684\u786e\u662f\u53ef\u4ee5\u628a\u5b83\u5206\u5f00\u6765\u3002\r\n\r\nCode:\r\n\r\n```\r\n// luogu-judger-enable-o2\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <cstring>\r\n#include <cctype>\r\n\r\nusing namespace std;\r\n\r\n#define int long long\r\n\r\ninline int read()\r\n{\r\n\tint x=0,f=1;char ch=getchar();\r\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\r\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\r\n\treturn x*f;\r\n}\r\n\r\nint n,a[100050],m;\r\n\r\nstruct Data\r\n{\r\n\tint lval,rval,nolrc,lc,rc,lrc;\r\n};\r\n\r\nstruct SegTreeNode\r\n{\r\n\tint l,r;\r\n\tlong long tag;\r\n\tData x;\r\n\t//nolrc\uff1a\u5de6\u53f3\u90fd\u4e0d\u9009\u7684\u4e2a\u6570 \r\n\t//lc\uff1a\u53ea\u9009\u5de6\u8fb9\u7684\u4e2a\u6570 \r\n\t//rc\uff1a\u53ea\u9009\u53f3\u8fb9\u7684\u4e2a\u6570 \r\n\t//lrc\uff1a\u5de6\u53f3\u90fd\u9009\u7684\u4e2a\u6570 \r\n}t[500050];\r\n\r\ninline void Push_Up(int id)\r\n{\r\n\tt[id].x.lval=t[id<<1].x.lval;\r\n\tt[id].x.rval=t[id<<1|1].x.rval;\r\n\t\r\n\tt[id].x.nolrc=t[id<<1].x.rc+t[id<<1|1].x.lc-(t[id<<1].x.rval==t[id<<1|1].x.lval);\r\n\tt[id].x.nolrc=min(t[id].x.nolrc,min(t[id<<1].x.nolrc+t[id<<1|1].x.lc,t[id<<1].x.rc+t[id<<1|1].x.nolrc));\r\n\t\r\n\tt[id].x.lc=t[id<<1].x.lrc+t[id<<1|1].x.lc-(t[id<<1].x.rval==t[id<<1|1].x.lval);\r\n\tt[id].x.lc=min(t[id].x.lc,min(t[id<<1].x.lc+t[id<<1|1].x.lc,t[id<<1].x.lrc+t[id<<1|1].x.nolrc));\r\n\t\r\n\tt[id].x.rc=t[id<<1].x.rc+t[id<<1|1].x.lrc-(t[id<<1].x.rval==t[id<<1|1].x.lval);\r\n\tt[id].x.rc=min(t[id].x.rc,min(t[id<<1].x.rc+t[id<<1|1].x.rc,t[id<<1].x.nolrc+t[id<<1|1].x.lrc));\r\n\t\r\n\tt[id].x.lrc=t[id<<1].x.lrc+t[id<<1|1].x.lrc-(t[id<<1].x.rval==t[id<<1|1].x.lval);\r\n\tt[id].x.lrc=min(t[id].x.lrc,min(t[id<<1].x.lc+t[id<<1|1].x.lrc,t[id<<1].x.lrc+t[id<<1|1].x.rc));\r\n}\r\n\r\ninline void Push_Down(int id)\r\n{\r\n\tif (t[id].tag)\r\n\t{\r\n\t\tt[id<<1].tag+=t[id].tag;\r\n\t\tt[id<<1|1].tag+=t[id].tag;\r\n\t\tt[id<<1].x.lval+=t[id].tag;\r\n\t\tt[id<<1].x.rval+=t[id].tag;\r\n\t\tt[id<<1|1].x.lval+=t[id].tag;\r\n\t\tt[id<<1|1].x.rval+=t[id].tag;\r\n\t\tt[id].tag=0;\r\n\t} \r\n}\r\n\r\ninline void Build(int id,int l,int r)\r\n{\r\n\tt[id].l=l;\r\n\tt[id].r=r;\r\n\tif (l==r)\r\n\t{\r\n\t\tt[id].x.lc=t[id].x.rc=t[id].x.lrc=1;\r\n\t\tt[id].x.lval=t[id].x.rval=a[l];\r\n\t\treturn;\r\n\t}\r\n\tint mid=(l+r)>>1;\r\n\tBuild(id<<1,l,mid);\r\n\tBuild(id<<1|1,mid+1,r);\r\n\tPush_Up(id);\r\n}\r\n\r\ninline void Change(int id,int l,int r,int val)\r\n{\r\n\tif (l<=t[id].l && t[id].r<=r)\r\n\t{\r\n\t\tt[id].x.lval+=val;\r\n\t\tt[id].x.rval+=val;\r\n\t\tt[id].tag+=val;\r\n\t\treturn;\r\n\t}\r\n\tPush_Down(id);\r\n\tint mid=(t[id].l+t[id].r)>>1;\r\n\tif (l<=mid)\r\n\t\tChange(id<<1,l,r,val);\r\n\tif (r>mid)\r\n\t\tChange(id<<1|1,l,r,val);\r\n\tPush_Up(id);\r\n}\r\n\r\ninline Data Query(int id,int l,int r);\r\n\r\ninline Data Merge(int id,int l,int r)\r\n{\r\n\tData lid=Query(id<<1,l,r);\r\n\tData rid=Query(id<<1|1,l,r);\r\n\tData res;\r\n\t//res.l=lid.l;\r\n\t//res.r=rid.r;\r\n\t\r\n\tres.lval=lid.lval;\r\n\tres.rval=rid.rval;\r\n\t\r\n\tres.nolrc=lid.rc+rid.lc-(lid.rval==rid.lval);\r\n\tres.nolrc=min(res.nolrc,min(lid.nolrc+rid.lc,lid.rc+rid.nolrc));\r\n\t\r\n\tres.lc=lid.lrc+rid.lc-(lid.rval==rid.lval);\r\n\tres.lc=min(res.lc,min(lid.lc+rid.lc,lid.lrc+rid.nolrc));\r\n\t\r\n\tres.rc=lid.rc+rid.lrc-(lid.rval==rid.lval);\r\n\tres.rc=min(res.rc,min(lid.rc+rid.rc,lid.nolrc+rid.lrc));\r\n\t\r\n\tres.lrc=lid.lrc+rid.lrc-(lid.rval==rid.lval);\r\n\tres.lrc=min(res.lrc,min(lid.lc+rid.lrc,lid.lrc+rid.rc));\r\n\t\r\n\treturn res;\r\n}\r\n\r\ninline Data Query(int id,int l,int r)\r\n{\r\n\tif (l<=t[id].l && t[id].r<=r)\r\n\t\treturn t[id].x;\r\n\tPush_Down(id);\r\n\tint mid=(t[id].l+t[id].r)>>1;\r\n\tif (r<=mid)\r\n\t\treturn Query(id<<1,l,r);\r\n\tif (l>mid)\r\n\t\treturn Query(id<<1|1,l,r);\r\n\treturn Merge(id,l,r);\r\n}\r\n\r\n#undef int\r\n\r\nint main()\r\n{\r\n\t#define int long long\r\n\t//freopen(\"arithseq1.in\",\"r\",stdin);\r\n\t//freopen(\"luoguP4243.out\",\"w\",stdout);\r\n\tios_base::sync_with_stdio(false);\r\n\tcin >> n;\r\n\tfor (int i=1;i<=n;i++)\r\n\t\tcin >> a[i];\r\n\tfor (int i=1;i<n;i++)\r\n\t\ta[i]=a[i+1]-a[i];\r\n\tBuild(1,1,n-1);\r\n\tcin >> m;\r\n\twhile (m--)\r\n\t{\r\n\t\tchar opt;\r\n\t\tcin >> opt;\r\n\t\tif (opt=='A')\r\n\t\t{\r\n\t\t\tint s,t,a,b;\r\n\t\t\tcin >> s >> t >> a >> b;\r\n\t\t\tif (s!=1)\r\n\t\t\t\tChange(1,s-1,s-1,a);\r\n\t\t\tif (t!=n)\r\n\t\t\t\tChange(1,t,t,-(a+b*(t-s)));\r\n\t\t\tif (s!=t)\r\n\t\t\t\tChange(1,s,t-1,b);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint l,r;\r\n\t\t\tcin >> l >> r;\r\n\t\t\t//cout << l << \" \" << r << endl; \r\n\t\t\tif (l==r)\r\n\t\t\t{\r\n\t\t\t\tcout << \"1\" << endl;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tcout << Query(1,l,r-1).lrc << endl;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n\t#undef int\r\n}\r\n```",
        "postTime": 1565746497,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4243 \u3010[JSOI2009]\u7b49\u5dee\u6570\u5217\u3011"
    },
    {
        "content": "# \u7b49\u5dee\u6570\u5217\n\u795e\u4ed9\u9898\uff0c\u8ddf\u4e4b\u524d\u7684\u5185\u9700\u6d88\u8d39\u6709\u70b9\u50cf\uff0c\u90fd\u662f\u7ef4\u62a4\u7684\u5dee\u5206\u6570\u7ec4\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u4fee\u6539\u64cd\u4f5c\u5c31\u662f\u533a\u95f4\u52a0\uff0c\u52a0\u4e0a\u4e24\u4e2a\u5355\u70b9\u4fee\u6539\n\n\u6211\u4eec\u8fd8\u53d1\u73b0\uff0c\u8f6c\u6362\u6210\u5dee\u5206\u6570\u7ec4\u540e\uff0c\u7b49\u5dee\u6570\u7ec4\u5c31\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u503c\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u7684\u95ee\u9898\u4e86\u3002\n\n\u6211\u4eec\u9700\u8981\u7684\u662f\u5de6\u53f3\u4e24\u7aef\u90fd\u5305\u542b\u7684\u533a\u95f4\u6700\u5c11\u5206\u6210\u7684\u5e8f\u5217\u6570\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7ef4\u62a4\u8fd9\u4e9b\n\n1. \u533a\u95f4\u5de6\u53f3\u4e24\u8fb9\u7684\u503c\n\n2. \u53ea\u5305\u542b\u5de6\u53f3\u533a\u95f4\u90fd\u4e0d\u5305\u542b\u3001\u5de6\u533a\u95f4\u3001\u53f3\u533a\u95f4\u3001\u5de6\u53f3\u533a\u95f4\u90fd\u5305\u542b\u7684\u6700\u5c11\u5212\u5206\u6570\n\n\u6211\u4eec\u628a\u4e0b\u9762\u90a3\u4e9b\u5206\u522b\u8d4b\u4e3as[0/1/2/3]\n\n\u56e0\u4e3a\u8f6c\u79fb\u6bd4\u8f83\u76f8\u4f3c\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u63a8\u4e00\u4e0bs[0]\u600e\u4e48\u641e\n\n\n## $\\text {Code}$\n```cpp\nbool flag = (ls.r == rs.l);\nNew.s[0] = Min (ls.s[2] + rs.s[1] - flag,ls.s[0] + rs.s[1],ls.s[2] + rs.s[0]);\n```\n\n\u8fd9\u91ccl,r\u5c31\u662f\u8fd9\u6bb5\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u7684\u503c\n\n\u81ea\u8ba4\u4e3a\u7b2c\u4e00\u4e2a\u4e00\u70b9\u90fd\u4e0d\u96be\u7406\u89e3\uff0c\u5173\u952e\u662f\u540e\u9762\u4e24\u4e2a\u3002\u54a6\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5728\u52a0\u4e9b\u4ec0\u4e48\uff1f\n\n\u5de6\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u80bf\u4e48\u4e0d\u89c1\u4e86\uff1f\uff08\u88ab\u72d7\u5543\u4e86\uff09\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u65e0\u8bba\u5982\u4f55\u5de6\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u90fd\u53ef\u4ee5\u5f52\u5230\u5de6\u533a\u95f4\u7684\u53f3\u8fb9\u6216\u53f3\u533a\u95f4\uff0c\u6240\u4ee5\u4e0d\uff08bei\uff09\u7528\uff08gou\uff09\u8003\uff08ken\uff09\u8651\uff08le\uff09\n\n\u7136\u540e\uff0c\u5176\u5b83\u8f6c\u79fb\u5dee\u4e0d\u591a\u90fd\u662f\u4e00\u6837\u7684\u4e86\u3002\n\n\u8fd8\u662f\u8bf4\u4e00\u4e0b\u6211\u8fdb\u7684\u5751\u70b9\u5427\uff0c\u6211\u5408\u5e76\u7684\u65f6\u5019\u4e00\u4e0d\u5c0f\u5fc3\u628a\u61d2\u6807\u8bb0\u641e\u6ca1\u4e86\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define Int register int\n#define MAXN 100005\n\nint n;\nint Min (int a,int b,int c){return min (a,min (b,c));}\n\nstruct node\n{\n\tint l,r,s[5],lazy;\n}tree[MAXN << 2];\n\nnode operator + (node ls,node rs)\n{\n\tnode New;\n\tNew.l = ls.l,New.r = rs.r;\n\tbool flag = (ls.r == rs.l);\n\tNew.s[0] = Min (ls.s[2] + rs.s[1] - flag,ls.s[0] + rs.s[1],ls.s[2] + rs.s[0]);\n\tNew.s[1] = Min (ls.s[3] + rs.s[1] - flag,ls.s[1] + rs.s[1],ls.s[3] + rs.s[0]);\n\tNew.s[2] = Min (ls.s[2] + rs.s[3] - flag,ls.s[2] + rs.s[2],ls.s[0] + rs.s[3]);\n\tNew.s[3] = Min (ls.s[3] + rs.s[3] - flag,ls.s[3] + rs.s[2],ls.s[1] + rs.s[3]);\n\treturn New;\n}\n\n#define rs (i<<1|1)\n#define ls (i<<1)\n\nint val[MAXN];\n\nvoid Pushup (int i)\n{\n\tint late = tree[i].lazy;\n\ttree[i] = tree[ls] + tree[rs];\n\ttree[i].lazy = late;\n}\n\nvoid Pushdown (int i)\n{\n\tif (!tree[i].lazy) return ;\n\ttree[ls].l += tree[i].lazy,tree[rs].l += tree[i].lazy;\n\ttree[ls].r += tree[i].lazy,tree[rs].r += tree[i].lazy;\n\ttree[ls].lazy += tree[i].lazy,tree[rs].lazy += tree[i].lazy;\n\ttree[i].lazy = 0;\n}\n\nvoid build (int i,int l,int r)\n{\n\ttree[i].lazy = 0;\n\tif (l == r)\n\t{\n\t\ttree[i].s[0] = 0;\n\t\ttree[i].l = tree[i].r = val[l];\n\t\ttree[i].s[1] = tree[i].s[2] = tree[i].s[3] = 1;\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild (i << 1,l,mid);\n\tbuild (i << 1 | 1,mid + 1,r);\n\tPushup (i);\n}\n\nvoid update (int i,int l,int r,int tl,int tr,int cot)\n{\n\tif (l >= tl && r <= tr) return tree[i].lazy += cot,tree[i].l += cot,tree[i].r += cot,void ();\n\tPushdown (i);\n\tint mid = (l + r) >> 1;\n\tif (tl <= mid) update (ls,l,mid,tl,tr,cot);\n\tif (tr > mid) update (rs,mid + 1,r,tl,tr,cot);\n\tPushup (i);\n}\n\nnode query (int i,int l,int r,int tl,int tr)\n{\n\tif (l >= tl && r <= tr) return tree[i];\n\tPushdown (i);\n\tint mid = (l + r) >> 1;\n\tif (tr <= mid) return query (ls,l,mid,tl,tr);\n\telse if (tl > mid) return query (rs,mid + 1,r,tl,tr);\n\telse return query (i << 1,l,mid,tl,mid) + query (i << 1 | 1,mid + 1,r,mid + 1,tr);\n} \n\nint read ()\n{\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\n\nvoid write (int x)\n{\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\n\nsigned main()\n{\n\tn = read ();\n\tfor (Int i = 1;i <= n;++ i) val[i] = read ();\n\tfor (Int i = 1;i <= n - 1;++ i) val[i] = val[i + 1] - val[i];\n\tbuild (1,1,n - 1);\n\tint q = read ();\n\tchar s[10] = {};\n\tfor (Int i = 1;i <= q;++ i)\n\t{\n\t\tscanf (\"%s\",s);\n\t\tif (s[0] == 'A')\n\t\t{\n\t\t\tint s = read (),t = read (),a = read (),b = read ();\n\t\t\tif (s ^ 1) update (1,1,n - 1,s - 1,s - 1,a);\n\t\t\tif (t ^ n) update (1,1,n - 1,t,t,- (a + b * (t - s)));\n\t\t\tif (s ^ t) update (1,1,n - 1,s,t - 1,b); \n\t\t}\n\t\telse\n\t\t{\n\t\t\tint s = read (),t = read ();\n\t\t\tif (s ^ t)\n\t\t\t{\n\t\t\t\tnode Now = query (1,1,n - 1,s,t - 1);\n\t\t\t\twrite (Now.s[3]),putchar ('\\n');\n\t\t\t}\n\t\t\telse puts (\"1\");\n\t\t}\n\t}\n}\n```",
        "postTime": 1584682155,
        "uid": 124781,
        "name": "Walking_Dead",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4243 \u3010[JSOI2009]\u7b49\u5dee\u6570\u5217\u3011"
    },
    {
        "content": "# \u9898\u89e3\n\n\u9898\u76ee\u94fe\u63a5[Link](https://www.luogu.com.cn/problem/P4243)\uff0c\u9898\u76ee\u5185\u5bb9\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u8fd9\u9898\u6211\u7528\u7684\u662f\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u662f\u533a\u95f4\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u6bd4\u8f83\u597d\u5199~~\u4e3b\u8981\u6307\u7684\u662f\u4ee3\u7801\u6bd4\u8f83\u77ed~~\uff0c\u800c\u4e14\u9519\u8bef\u7387\u4e0d\u9ad8\uff0c\u5e38\u6570\u5bf9\u4e8e\u6211\u8fd9\u79cd\u849f\u84bb\u6765\u8bf4\u5df2\u7ecf\u5f88\u4e0d\u9519\u4e86\u3002\n\n\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u7684\u70b9\u8fd9\u91cc[Link](https://www.luogu.com.cn/problem/P3372)\n\n\u4e0b\u9762\u6211\u4eec\u6765\u89e3\u51b3\u4e00\u4e0b\u64cd\u4f5c\uff1a\n\n- ### A s t a b\uff1a\u628as-t\u7684\u6570\u5206\u522b\u52a0\u4e0a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u6570\u5217\u9996\u9879\u4e3aa\uff0c\u516c\u5dee\u4e3ab\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u628a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6bcf\u4e2a\u5355\u70b9\u5b9a\u4e49\u6210\u5dee\u5206\u6570\u7ec4\uff0c\u5373\uff1a\n\n```cpp\nfor(int i=1;i<=n;i++) b[i]=a[i]-a[i-1];\n```\n\n\n\u8fd9\u6837\u8fd9\u4e00\u4e2a\u64cd\u4f5c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u533a\u95f4\u64cd\u4f5c\u548c\u4e24\u6b21\u5355\u70b9\u4fee\u6539\u6765\u89e3\u51b3\uff1a\n\n```cpp\nmodify(1,l,l,x);\nif(l!=r) modify(1,l+1,r,y);\nif(r!=n) modify(1,r+1,r+1,-x-(r-l)*y);\n```\n\u8fd9\u4e2a\u5730\u65b9\u8981\u63d0\u9192\u5927\u5bb6\u6ce8\u610f\u64cd\u4f5c\u7684\u8303\u56f4\u3002\u5982\u679cl==r\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e2a\u6570\u5373\u53ef\uff0c\u5982\u679cr==n\u5c31\u53ef\u4ee5\u7701\u53bb\u5dee\u5206\u6570\u7ec4\u6700\u540e\u7684\u90a3\u4e2a\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\uff08\u8fd9\u4e2a\u5361\u4e86\u597d\u4e45\u3002\n\n- ### B s t\uff1a\u95ee\u628a\u533a\u95f4[s,t]\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u7b49\u5dee\u7684\u6bb5\u540e\uff0c\u6700\u5c11\u7684\u6bb5\u6570\u3002\n\n\u8fd9\u4e2a\u64cd\u4f5c\u624d\u662f\u8fd9\u9898\u9ed1\u8272\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u5b83\u5e76\u4e0d\u50cf\u770b\u8d77\u6765\u90a3\u6837\u7b80\u5355\u3002\u5f88\u5bb9\u6613\u4f1a\u60f3\u5230\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u4e0e\u4e0a\u4e2a\u70b9\u7684\u5dee\u503c\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u4e3a1\uff0c\u4e0d\u7b49\u4e3a0\uff0c\u7136\u540e\u901a\u8fc7\u5224\u65ad\u771f\u5047\u6765\u5408\u5e76\u7b54\u6848\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4f1a\u6709\u5f88\u5927\u7684\u95ee\u9898\uff0c\u6700\u96be\u89e3\u51b3\u7684\u5c31\u662f\u4e24\u4e2a\u6570\u4e0d\u8bba\u524d\u4e00\u4e2a\u6570\u600e\u4e48\u6837\uff0c\u8fd9\u4e24\u4e2a\u6570\u4e00\u5b9a\u662f\u7b49\u5dee\u6570\u5217\u3002\n\n\u8fd9\u6837\u5c31\u4f1a\u53d1\u73b0\u5f88\u96be\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\u3002\u6240\u4ee5\u6211\u4eec\u8fd9\u6837\u6765\u5b9a\u4e49\uff1a\n\n```cpp\nstruct data{\n    int s[2][2],lval,rval;\n    //lval\u548crval\u662f\u5de6\u53f3\u7aef\u70b9\u7684\u5dee\u5206\u503c\n    //\u5176\u4e2ds[0/1][0/1]\u8868\u793a\u53bb\u6389\u5de6\u7aef\u70b9\u6216\u53bb\u6389\u53f3\u7aef\u70b9\u540e\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u6bb5\u6570\n    //0\u8868\u793a\u4e0d\u5305\u542b\uff0c1\u8868\u793a\u5305\u542b\uff0c\u5982s[0][1]\u8868\u793a\u5305\u542b\u53f3\u7aef\u70b9\u4f46\u4e0d\u5305\u542b\u5de6\u7aef\u70b9\n};\n```\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u4e00\u4e2a\u590d\u6742\u7684\u8f6c\u79fb\uff0c\u6211\u662f\u8fd0\u7528\u91cd\u8f7d\u8fd0\u7b97\u7b26\u6765\u5b9e\u73b0\u7684\u3002\n\n```cpp\nt[p].x=t[ls].x+t[rs].x;\n```\n\n```cpp\ndata operator +(const data &y)const{\n    data x;\n    x.lval=lval,x.rval=y.rval;\n    x.s[0][0]=s[0][1]+y.s[1][0]-(rval==y.lval);\n    x.s[0][0]=min(x.s[0][0],min(s[0][0]+y.s[1][0],s[0][1]+y.s[0][0]));\n    x.s[1][0]=s[1][1]+y.s[1][0]-(rval==y.lval);\n    x.s[1][0]=min(x.s[1][0],min(s[1][0]+y.s[1][0],s[1][1]+y.s[0][0]));\n    x.s[0][1]=s[0][1]+y.s[1][1]-(rval==y.lval);\n    x.s[0][1]=min(x.s[0][1],min(s[0][0]+y.s[1][1],s[0][1]+y.s[0][1]));\n    x.s[1][1]=s[1][1]+y.s[1][1]-(rval==y.lval);\n    x.s[1][1]=min(x.s[1][1],min(s[1][0]+y.s[1][1],s[1][1]+y.s[0][1]));\n    return x;\n}\n```\n\u53ef\u80fd\u4e0d\u592a\u597d\u7406\u89e3\uff0c\u6211\u4e3e\u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff1a\n\n```cpp\nx.s[0][0]=s[0][1]+y.s[1][0]-(rval==y.lval);\nx.s[0][0]=min(x.s[0][0],min(s[0][0]+y.s[1][0],s[0][1]+y.s[0][0]));\n```\n- **\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684s[0][0]\uff08\u5373\u5f00\u533a\u95f4\uff0c\u4e0d\u518d\u8d58\u8ff0\uff09\u6765\u8bf4\uff1a**\n\n\u5b83\u53ef\u4ee5\u662f\uff1a\n\n\u5de6\u5b50\u533a\u95f4\u7684\u5de6\u5f00\u53f3\u95ed\u533a\u95f4 + \u53f3\u5b50\u533a\u95f4\u7684\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\n\n\u5982\u679c\u5de6\u5b50\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u7684\u5dee\u5206\u503c == \u53f3\u5b50\u533a\u95f4\u53f3\u7aef\u70b9\u7684\u5dee\u5206\u503c\uff0c\u90a3\u4e48\u5de6\u5b50\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u90a3\u6bb5\u5c31\u53ef\u4ee5\u548c\u53f3\u5b50\u533a\u95f4\u6700\u5de6\u8fb9\u7684\u90a3\u6bb5\u8fde\u4e3a\u4e00\u6bb5\uff0c\u5373\u603b\u6bb5\u6570-1\u3002\n\n\u53e6\u5916\u5c31\u662f\u5bf9\u4e8e\u96f6\u6563\u503c\u7684\u5224\u65ad\uff0c\u5728\u4e0a\u9762\u4ee3\u7801\u7684\u7b2c\u4e8c\u884c\u8fdb\u884c\u4e86\u5224\u65ad\u3002\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u4e9b\u7ebf\u6bb5\u6811\u5177\u4f53\u7ec6\u8282\u5373\u53ef\u3002\n\n# \u672c\u4eba\u7684\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define N (1000000+21)\n#define INF (1000000+21)\n#define ls p<<1\n#define rs p<<1|1\n#define md (t[p].l+t[p].r)>>1\n//\u8bb0\u5f97define\u8981\u52a0\u62ec\u53f7\uff01\u4e0d\u7136\u4f1a\u6b7b\u7684\u5f88\u60e8\uff01\nusing namespace std;\nstruct data{\n\t//\u65b0\u5b9a\u4e49\u4e00\u4e2astruct\u53ef\u4ee5\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u64cd\u4f5c\u8f83\u4e3a\u65b9\u4fbf\u3002 \n\tint s[2][2],lval,rval;\n\t//\u91cd\u8f7d\u8fd0\u7b97\u7b26\u8f6c\u79fb \n\tdata operator +(const data &y)const{\n\t\tdata x;\n\t\tx.lval=lval,x.rval=y.rval;\n\t\tx.s[0][0]=s[0][1]+y.s[1][0]-(rval==y.lval);\n\t\tx.s[0][0]=min(x.s[0][0],min(s[0][0]+y.s[1][0],s[0][1]+y.s[0][0]));\n\t\tx.s[1][0]=s[1][1]+y.s[1][0]-(rval==y.lval);\n\t\tx.s[1][0]=min(x.s[1][0],min(s[1][0]+y.s[1][0],s[1][1]+y.s[0][0]));\n\t\tx.s[0][1]=s[0][1]+y.s[1][1]-(rval==y.lval);\n\t\tx.s[0][1]=min(x.s[0][1],min(s[0][0]+y.s[1][1],s[0][1]+y.s[0][1]));\n\t\tx.s[1][1]=s[1][1]+y.s[1][1]-(rval==y.lval);\n\t\tx.s[1][1]=min(x.s[1][1],min(s[1][0]+y.s[1][1],s[1][1]+y.s[0][1]));\n\t\treturn x;\n\t}\n};\nstruct SegTree{int l,r,add;data x;}t[N*4];\nint a[N],b[N];\nint n,m;\n//\u7136\u540e\u5e95\u4e0b\u7684\u90fd\u662f\u7ebf\u6bb5\u6811\u7684\u57fa\u672c\u64cd\u4f5c\u4e86 \nvoid build(int p,int l,int r){\n\tt[p].l=l,t[p].r=r;\n\tif(l==r){\n\t\tt[p].x.lval=t[p].x.rval=b[l];\n\t\tt[p].x.s[0][1]=t[p].x.s[1][0]=t[p].x.s[1][1]=1;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;//\u5c3d\u91cf\u7528\u4f4d\u8fd0\u7b97 \n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tt[p].x=t[ls].x+t[rs].x;\n}\nvoid pushup(int p,int v){\n\tt[p].add+=v;\n\tt[p].x.lval+=v;\n\tt[p].x.rval+=v;\n}\nvoid pushdown(int p){\n\tif(!t[p].add||t[p].l==t[p].r) return;\n\tpushup(ls,t[p].add);\n\tpushup(rs,t[p].add);\n\tt[p].add=0;\n}\ndata query(int p,int l,int r){\n\tif(l<=t[p].l&&t[p].r<=r) return t[p].x;\n\tpushdown(p);\n\tint mid=md;\n\tif(r<=mid) return query(ls,l,r);\n\tif(l>mid) return query(rs,l,r);\n\treturn query(ls,l,r)+query(rs,l,r);\n}\nvoid modify(int p,int l,int r,int v){\n\tif(l<=t[p].l&&t[p].r<=r){\n\t\tpushup(p,v);\n\t\treturn;\n\t}\n\tpushdown(p);\n\tint mid=md;\n\tif(l<=mid) modify(ls,l,r,v);\n\tif(r>mid) modify(rs,l,r,v);\n\tt[p].x=t[ls].x+t[rs].x;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=n;i++) b[i]=a[i]-a[i-1];//\u5dee\u5206\u6570\u5217 \n\tbuild(1,1,n);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++){\n\t\tchar c;\n\t\tint l,r,x,y;\n\t\tcin>>c;//\u8bfb\u5165\u5b57\u7b26\u4e00\u5b9a\u4e0d\u8981\u7528scanf\u548cgetchar\uff01\u4f1a\u51fa\u4eba\u547d\u7684\uff01 \n\t\tif(c=='A'){\n\t\t\tscanf(\"%d%d%d%d\",&l,&r,&x,&y);\n\t\t\tmodify(1,l,l,x);\n\t\t\tif(l!=r) modify(1,l+1,r,y);//\u6ce8\u610f\u8fd9\u91cc\u7684\u5224\u65ad\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u9519\u8bef\uff0c\u5f97\u4e0d\u507f\u5931 \n\t\t\tif(r!=n) modify(1,r+1,r+1,-x-(r-l)*y);\t\n\t\t}\n\t\telse{\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tif(l==r) printf(\"1\\n\");\n\t\t\telse printf(\"%d\\n\",query(1,l+1,r).s[1][1]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1580553428,
        "uid": 160484,
        "name": "cunzai_zsy0531",
        "ccfLevel": 7,
        "title": "P4243\u9898\u89e3"
    },
    {
        "content": "\u89c2\u5bdf\u5230\u4e24\u4e2a\u64cd\u4f5c\u90fd\u548c\u7b49\u5dee\u6570\u5217\u6709\u5173\uff0c\u800c\u7b49\u5dee\u6570\u5217\u5f88\u663e\u7136\u5176\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u503c\u90fd\u76f8\u7b49\uff0c\u56e0\u6b64\u8003\u8651\u8f6c\u6362\u4e3a\u5dee\u5206\u6570\u5217\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u9700\u8981\u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\uff0c\u8f6c\u5316\u6210\u5dee\u5206\u6570\u5217\u540e\uff0c\u5f88\u663e\u7136\u5c31\u662f\u4e24\u8fb9\u5355\u70b9\u4fee\u6539\uff0c\u4e2d\u95f4\u533a\u95f4\u4fee\u6539\uff0c\u7528\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u91cd\u70b9\u662f\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u6211\u4eec\u5982\u4f55\u53bb\u7ef4\u62a4\u6700\u5c11\u7684\u5212\u5206\u6bb5\u6570\u3002\n\n\u9996\u5148\u6211\u4eec\u628a\u539f\u6570\u5217\u5212\u5206\u6210\u51e0\u6bb5\u7b49\u5dee\u6570\u5217\u7684\u65f6\u5019\u53ef\u4ee5\u53d1\u73b0\uff0c**\u5dee\u5206\u6570\u5217\u4e0a\u5212\u5206\u51fa\u7684\u6bcf\u4e00\u6bb5\u7684\u7b2c\u4e00\u4e2a\u6570\u662f\u53ef\u4ee5\u4efb\u610f\u7684**\uff0c\u800c\u540e\u9762\u7684\u6570\u4f5c\u4e3a\u516c\u5dee\u90fd\u8981\u76f8\u540c\uff0c\u56e0\u6b64\u5408\u5e76\u7684\u65f6\u5019\u6211\u4eec\u4e5f\u8981\u8003\u8651\u8fd9\u4e2a\u6027\u8d28\u3002\u5373\u5408\u5e76\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4e0d\u8ba1\u7b97\u67d0\u4e00\u7aef\u70b9\u4f5c\u4e3a\u7b49\u5dee\u6570\u5217\u516c\u5dee\u65f6\u7684\u8d21\u732e\uff0c\u800c\u662f\u4f5c\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u3002\u5f53\u7136\u5f53\u5de6\u533a\u95f4\u53f3\u7aef\u70b9\u548c\u53f3\u533a\u95f4\u5de6\u7aef\u70b9\u76f8\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5408\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u56e0\u6b64\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u53bb\u5206\u522b\u7ef4\u62a4 $\\text{[l,r]}$ \u533a\u95f4\u4e2d\u5de6\u53f3\u7aef\u70b9\u7684\u503c\uff0c$\\text{[l,r]}$ , $\\text{[l,r)}$ , $\\text{(l,r]}$ , $\\text{(l,r)}$ \u56db\u4e2a\u533a\u95f4\u6700\u5c11\u80fd\u5212\u5206\u6210\u51e0\u4e2a\u7b49\u5dee\u6570\u5217\u3002\n\n\u5206\u522b\u8bb0\u8fd9\u4e9b\u4fe1\u606f\u4e3a $\\text{lval , raval , s[0...3]}$\u3002\n\n\u5de6\u53f3\u7aef\u70b9\u7684\u503c\u7684\u8f6c\u79fb\u5f88\u7b80\u5355\uff0c\u5bf9\u4e8e\u5212\u5206\u6570\u7684\u8f6c\u79fb\uff0c\u6839\u636e\u6027\u8d28\u4e5f\u53ef\u4ee5\u5f97\u51fa\u3002\n\n\u8b6c\u5982\u5bf9\u4e8e $\\text{s[0]}$ \u7684\u8f6c\u79fb\uff1a\n\n\n```cpp\nt[id].s[0]=min(t[ls].s[0]+t[rs].s[0]-(t[ls].rval==t[rs].lval),min(t[ls].s[1]+t[rs].s[0],t[ls].s[0]+t[rs].s[2]));\n```\n\u5206\u522b\u5bf9\u5e94\u7684\u4e09\u79cd\u60c5\u51b5\uff08\u5176\u4f59\u7684\u8f6c\u79fb\u7c7b\u4f3c\uff09\uff1a\n\n1.\u5c06\u5de6\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u7b49\u5dee\u6570\u5217\u4e0e\u53f3\u533a\u95f4\u6700\u5de6\u8fb9\u7684\u7b49\u5dee\u6570\u5217\u5408\u5e76\u6210\u4e00\u4e2a\uff08\u524d\u63d0\u662f\u8fd9\u4e24\u4e2a\u6570\u5217\u7684\u516c\u5dee\u76f8\u540c\uff09\u3002\n\n2.\u5c06\u5de6\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u4f5c\u4e3a\u53f3\u533a\u95f4\u7b2c\u4e00\u4e2a\u7aef\u70b9\u5f00\u59cb\u7684\u7b49\u5dee\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u3002\n\n3.\u5c06\u53f3\u533a\u95f4\u5de6\u7aef\u70b9\u4f5c\u4e3a\u53f3\u533a\u95f4\u7b2c\u4e8c\u4e2a\u7aef\u70b9\u5f00\u59cb\u7684\u7b49\u5dee\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u3002\n\n\u6ce8\u610f\uff1a\u6211\u4eec\u6c42\u7684\u6700\u5c0f\u5212\u5206\u6570\uff0c\u662f\u94a6\u5b9a\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e0d\u4f5c\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u800c\u662f\u76f4\u63a5\u4f5c\u4e3a\u516c\u5dee\uff0c\u8fd9\u6837\u624d\u80fd\u786e\u4fdd\u5728\u5408\u5e76\u5b50\u533a\u95f4\u7684\u65f6\u5019\u662f\u6b63\u786e\u7684\u3002\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u4e0d\u67e5\u8be2\u5de6\u7aef\u70b9\u5373\u53ef\u3002\n\n\u76f8\u5173\u7ec6\u8282\u53ef\u53c2\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ls (id<<1)\n#define rs (id<<1|1)\nconst int N=1e5+10;\nint n;\nll a[N],b[N];\nstruct SegmentTree {\n\tint s[5];\n\tll lval,rval,lazy;\n\tSegmentTree() { lazy=0; }\n\tSegmentTree operator+(const SegmentTree& q)const {\n\t\tSegmentTree p;\n\t\tp.lval=lval, p.rval=q.rval;\n\t\tp.s[0]=min(s[0]+q.s[0]-(rval==q.lval),min(s[1]+q.s[0],s[0]+q.s[2]));\n\t\tp.s[1]=min(s[0]+q.s[1]-(rval==q.lval),min(s[1]+q.s[1],s[0]+q.s[3]));\n\t\tp.s[2]=min(s[2]+q.s[0]-(rval==q.lval),min(s[3]+q.s[0],s[2]+q.s[2]));\n\t\tp.s[3]=min(s[2]+q.s[1]-(rval==q.lval),min(s[3]+q.s[1],s[2]+q.s[3]));\n\t\treturn p;\n\t}\n}t[N<<2];\nvoid build(int id,int l,int r) {\n\tif(l==r) {\n\t\tt[id].lval=t[id].rval=b[l];\n\t\tt[id].s[0]=t[id].s[1]=t[id].s[2]=1;\n\t\tt[id].s[3]=0;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(ls,l,mid), build(rs,mid+1,r);\n\tt[id]=t[ls]+t[rs];\n}\nvoid pushdown(int id) {\n\tif(!t[id].lazy) return;\n\tint val=t[id].lazy; t[id].lazy=0;\n\tt[ls].lazy+=val, t[rs].lazy+=val;\n\tt[ls].lval+=val, t[ls].rval+=val;\n\tt[rs].lval+=val, t[rs].rval+=val;\n}\nvoid modify(int id,int l,int r,int x,int y,ll val) {\n\tif(x>r||y<l) return;\n\tif(x<=l&&y>=r) {\n\t\tt[id].lazy+=val, t[id].lval+=val, t[id].rval+=val;\n\t\treturn;\n\t}\n\tpushdown(id);\n\tint mid=l+r>>1;\n\tmodify(ls,l,mid,x,y,val), modify(rs,mid+1,r,x,y,val);\n\tt[id]=t[ls]+t[rs];\n}\nSegmentTree query(int id,int l,int r,int x,int y) {\n\tif(x<=l&&y>=r) return t[id];\n\tpushdown(id);\n\tint mid=l+r>>1;\n\tif(y<=mid) return query(ls,l,mid,x,y);\n\telse if(x>=mid+1) return query(rs,mid+1,r,x,y);\n\telse return query(ls,l,mid,x,y)+query(rs,mid+1,r,x,y);\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%lld\",&a[i]), b[i-1]=a[i]-a[i-1];\n\tn--;//\u5dee\u5206\u6570\u5217\u7684\u957f\u5ea6\u4e3an-1\uff0c\u7b2cn\u9879-a[n]\u65e0\u610f\u4e49\n\tbuild(1,1,n);\n\tchar op; int Q,s,t; ll a,b;\n\tscanf(\"%d\",&Q);\n\twhile(Q--) {\n\t\tcin>>op;\n\t\tif(op=='A') {\n\t\t\tscanf(\"%d%d%lld%lld\",&s,&t,&a,&b);\n\t\t\tif(s!=1) modify(1,1,n,s-1,s-1,a);//\u5224\u65ad\u9632\u6b62\u8d8a\u754c\uff0c\u540e\u9762\u540c\u7406\n\t\t\tif(s!=t) modify(1,1,n,s,t-1,b);\n\t\t\tif(t<=n) modify(1,1,n,t,t,-a-b*(s-t));\n\t\t}\n\t\telse {\n\t\t\tscanf(\"%d%d\",&s,&t);\n\t\t\tif(s==t) { puts(\"1\"); continue; }\n\t\t\tSegmentTree Ans=query(1,1,n,s,t-1);\n       \t\t //\u5982\u4e0a\u6240\u8ff0\uff0c\u5dee\u5206\u6570\u5217\u7684\u6700\u5de6\u7aef\u70b9b[s-1]\u53ef\u4ee5\u4f5c\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5373\u5176\u53d6\u503c\u4efb\u610f\uff0c\u4e0d\u9700\u8981\u8003\u8651\uff0c\u56e0\u6b64\u67e5\u8be2\u4eceb[s]\u5f00\u59cb\n\t\t\tprintf(\"%d\\n\",Ans.s[0]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1664886542,
        "uid": 309826,
        "name": "xxzx",
        "ccfLevel": 0,
        "title": "[JSOI2009] \u7b49\u5dee\u6570\u5217"
    },
    {
        "content": "- \u5f88\u4e45\u4ee5\u524d\u7684\u8001\u9898\u76ee\u4e86\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u56de\u4e8b\u7684\u3002\n- \u5f53\u5e74\u6211\u5229\u6b32\u718f\u5fc3\uff0c\u60f3\u8981\u628a\u8fd9\u9898\u5f53\u6210\u81ea\u5df1\u7b2c\u4e00\u9053\u9ed1\u9898\uff0c\u7136\u800c\u9020\u5316\u5f04\u4eba\uff0c\u7b2c\u4e00\u9053\u5176\u5b9e\u662f[\u8fd9\u9053](https://www.luogu.com.cn/problem/P3704)\uff0c\u6211\u5f53\u65f6\u8fde\u6811\u72b6\u6570\u7ec4\u90fd\u4e0d\u4f1a\u6253\u3002\n- \u6743\u5f53\u968f\u673a\u7684\u8bad\u7ec3\u4e86\u3002\n\n**[\u9898\u610f](https://www.luogu.com.cn/problem/P4243)**\n- \u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217\uff0c\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u6700\u5c11\u53ef\u4ee5\u88ab\u5212\u5206\u6210\u51e0\u4e2a\u8fde\u7eed\u7684\u7b49\u5dee\u6570\u5217\u3002\n\n**\u5206\u6790**\n- \u9996\u5148\u76f4\u63a5\u5dee\u5206\uff0c\u7136\u540e\u4fee\u6539\u64cd\u4f5c\u53d8\u6210\u7b80\u5355\u7684\u533a\u95f4\u52a0\u3002\n- \u7136\u540e\u95ee\u9898\u5728\u4e8e\uff0c\u4f60\u5f97\u5230\u4e86\u4e00\u4e2a\u533a\u95f4\u7684\u5dee\u5206\u6570\u7ec4\uff0c\u4f60\u73b0\u5728\u5e94\u8be5\u5e72\u4ec0\u4e48\uff1f\n- \u4f60\u9700\u8981\u5904\u7406\u7684\u662f\u8fd9\u6837\u7684\u95ee\u9898\uff1a\u5220\u6389\u4e0d\u76f8\u90bb\uff08\u4e14\u6700\u5c11\uff09\u7684\u51e0\u4e2a\u6570\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5982\u679c\u76f8\u90bb\u5fc5\u5b9a\u76f8\u7b49\u3002\n- \u8bbe\u8be5\u533a\u95f4\u6bcf\u4e2a\u957f\u5ea6\u5927\u4e8e $1$ \u7684\u6781\u5927\u8fde\u7eed\u76f8\u7b49\u6bb5\u4e2d\uff0c\u76f8\u9694\u7684\u957f\u5ea6\u4e3a $1$ \u7684\u8fde\u7eed\u76f8\u7b49\u6bb5\u7684\u4e2a\u6570\uff08\u5305\u62ec\u5934\u5c3e\uff0c\u4e2a\u6570\u53ef\u4ee5\u4e3a $0$\uff09\uff0c\u4e3a\u6570\u5217 $p_1,p_2,\\cdots p_m$\u3002\n- \u90a3\u4e48\u9700\u8981\u5220\u7684\u6570\u7684\u4e2a\u6570\u5c31\u662f\uff1a\n$$\\lceil p_1/2\\rceil+\\sum_{i=2}^{m-1}\\lfloor p_i/2+1\\rfloor+\\lceil p_m/2\\rceil$$\n- \u5b83\u663e\u7136\u662f\u53ef\u4ee5\u8fdb\u884c\u4fe1\u606f\u5408\u5e76\u7684\u5bf9\u5427\uff0c\u4e8e\u662f\u6211\u4eec\u5feb\u4e50\u5730\u5199\u51fa\u6211\u4eec\u7684\u5c0f\u4ee3\u7801\u3002\n\n**\u5b9e\u73b0**\n- \u5f97\u5230\u4e86 $40$ \u5206\uff0c\u4fe1\u5fc3\u6ee1\u6ee1\uff01\u7136\u540e\u53d1\u73b0\u8f93\u51fa\u533a\u95f4\u957f\u5ea6\u6574\u9664 $2$ \u6709 $40$ \u5206\uff01~~\u4e0d\u6127\u662f JSOI~~\u3002\n- \u8fdb\u884c\u4e86\u4e71\u641e\uff0c\u5f97\u5230\u4e86 $\\text{hack}$\u3002\n```cpp\n11\n0 0 0 0 1 2 3 4 3 2 1\n1\nB 1 11\n```\n- \u53d1\u73b0\u81ea\u5df1\u7684\u7ed3\u6784\u4f53\u8c03\u7528\u5199\u9519\u4e86\uff0c\u4f46\u662f\u8fd8\u662f $40$ \u5206\u3002\n- \u53d1\u73b0\u81ea\u5df1\u6ca1\u6539\u5b8c\uff0c\u7136\u540e\u8fc7\u4e86\uff0c[\u4ee3\u7801](https://www.luogu.com.cn/paste/11i2xbuq)\u3002",
        "postTime": 1655269846,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "[JSOI2009] \u7b49\u5dee\u6570\u5217"
    },
    {
        "content": "\u597d\u9898\u3002\n\n\u6211\u4eec\u7684\u4e24\u79cd\u64cd\u4f5c\u5747\u662f\u7b49\u5dee\u6570\u5217\uff0c\u90a3\u5c31\u6765\u6316\u6398\u4e00\u4e0b\u7b49\u5dee\u6570\u5217\u7684\u6027\u8d28\u3002\n\n~~\u90a3\u8fd8\u7528\u8bf4\uff0c\u5f53\u7136\u662f\u76f8\u90bb\u4e24\u9879\u5dee\u76f8\u7b49\u5566\u3002~~\n\n\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u6c42\u8be5\u5e8f\u5217\u7684\u4e00\u4e2a **\u5dee\u5206\u5e8f\u5217** \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u641e\u51fa\u8fd9\u4e2a\u5e8f\u5217\uff0c\u8fd9\u91cc\u4ee4 $s_{i}=a_{i+1}-a_{i}$ \u3002\u56de\u5934\u770b\u64cd\u4f5c\u4e00\uff1a\n   \n- \u5728\u539f\u5e8f\u5217\u4e0a\u4e00\u4e2a\u533a\u95f4 $[l, r]$ \u52a0\u4e0a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u3002\n   \n\u6c42\u5dee\u5206\u540e\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\uff1a\n\n1. \u5728\u5dee\u5206\u6570\u5217 l-1 \u4f4d\u7f6e\u5904\u52a0\u4e0a\u9996\u9879 a \uff1b\n\n1. \u5bf9\u533a\u95f4\u4e2d\u6bcf\u4e00\u9879\u90fd\u52a0\u4e0a\u516c\u5dee d \uff1b\n\n1. \u5728\u5dee\u5206\u6570\u5217 r+1 \u4f4d\u7f6e\u5904\u51cf\u53bb (r-l+1)*d+a \u3002\n\n\u518d\u770b\u64cd\u4f5c\u4e8c\uff08\u5728\u539f\u6570\u5217\u4e0a\uff09\uff1a\n\n- \u6c42\u6700\u5c11\u7684\u5212\u5206\u6bb5\uff0c\u4f7f\u5f97\u6bcf\u6bb5\u5747\u4e3a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u3002\n\n\u5176\u7b49\u4ef7\u4e8e\uff08\u5728\u5dee\u5206\u6570\u5217\u4e0a\uff09\uff1a\n\n- \u6c42\u6700\u5c11\u7684\u5212\u5206\u6bb5\uff0c\u4f7f\u5f97\u6bcf\u4e00\u6bb5\u5185\u7684\u6570\u90fd\u76f8\u7b49\u3002\n\n\u7136\u9e45\u95ee\u9898\u5e76\u6ca1\u6709\u53d8\u5f97\u5bb9\u6613\u3002\n\n\u51e0\u7ecf\u601d\u7d22\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u9700\u8981\u7ef4\u62a4\u56db\u4e2a\u503c\u5373\u53ef\uff1a\n\n- \u5206\u5272\u533a\u95f4 $[l,\\ r]$ \u7684\u6700\u5c11\u5212\u5206\u6bb5\uff1b\n\n- \u5206\u5272\u533a\u95f4 $[l,\\ r)$ \u7684\u6700\u5c11\u5212\u5206\u6bb5\uff1b\n\n- \u5206\u5272\u533a\u95f4 $(l,\\ r]$ \u7684\u6700\u5c11\u5212\u5206\u6bb5\uff1b\n\n- \u5206\u5272\u533a\u95f4 $(l,\\ r)$ \u7684\u6700\u5c11\u5212\u5206\u6bb5\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u987a\u4fbf\u7ef4\u62a4\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u7684\u503c\u3002\n\n\u90a3\u4e48\u5bb9\u6613\u63a8\u51fa\u4ee5\u4e0b pushup \u51fd\u6570\uff1a\n\n```cpp\nvoid pushup(int k, int lc, int rc){\n\t\tst(k)=st(lc), ed(k)=ed(rc);int tmp=ed(lc)==st(rc);\n        l(k)=man(l(lc)+lr(rc)-tmp, ulr(lc)+lr(rc), l(rc)+l(lc));\n        r(k)=man(lr(lc)+r(rc)-tmp, lr(lc)+ulr(rc), r(rc)+r(lc));\n        lr(k)=man(lr(lc)+lr(rc)-tmp, r(lc)+lr(rc), l(rc)+lr(lc));\n\t\tulr(k)=man(l(lc)+r(rc)-tmp, ulr(lc)+r(rc), ulr(rc)+l(lc));\n\t}\n```\n\n\u5176\u5b83\u90e8\u5206\u4e0d\u96be\u5b9e\u73b0\u3002\n\n### Tip\uff1a\n\n1. \u5982\u679c\u4f60\u662f\u4ee5\u533a\u95f4 $[1,\\ n-1]$ \u53bb\u76f4\u63a5\u5efa\u6811\u7684\uff0c\u5efa\u8bae\u7279\u5224\u64cd\u4f5c\u4e00\u4e2d  l, r \u7684\u8d8a\u754c\u60c5\u51b5\n\n1. \u8ba1\u7b97\u7b54\u6848\u65f6\u4ecd\u9700\u5408\u5e76\uff0c\u6240\u4ee5\u591a\u5f00\u4ebf\u4e9b\u7ed3\u70b9\u5907\u7528\u3002\n\n### Code\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#define ls k<<1\n#define rs k<<1|1\n#define N 100005\nusing namespace std;\ntypedef long long ll;\nint n, m, a[N], INF;\nstruct Segment_Tree{\n\tint cnt;\n\tstruct node{\n\t\tll st, ed;ll tag;\n\t\tint uselr, unuselr, usel, user;\n\t\t#define st(k)data[k].st\n\t\t#define ed(k)data[k].ed\n\t\t#define l(k)data[k].usel\n\t\t#define r(k)data[k].user\n\t\t#define lr(k)data[k].uselr\n\t\t#define ulr(k)data[k].unuselr\n\t\t#define t(k)data[k].tag\n\t}data[N*4];\n\tint man(int a, int b, int c){\n\t\treturn min(a, min(b, c));\n\t}\n\tvoid pushup(int k, int lc, int rc){\n\t\tst(k)=st(lc), ed(k)=ed(rc);int tmp=ed(lc)==st(rc);\n        l(k)=man(l(lc)+lr(rc)-tmp, ulr(lc)+lr(rc), l(rc)+l(lc));\n        r(k)=man(lr(lc)+r(rc)-tmp, lr(lc)+ulr(rc), r(rc)+r(lc));\n        lr(k)=man(lr(lc)+lr(rc)-tmp, r(lc)+lr(rc), l(rc)+lr(lc));\n\t\tulr(k)=man(l(lc)+r(rc)-tmp, ulr(lc)+r(rc), ulr(rc)+l(lc));\n\t}\n\tvoid upd(int k, ll tag){\n\t\tst(k)+=tag, ed(k)+=tag, t(k)+=tag;\n\t}\n\tvoid pushdown(int k){\n\t\tif(!t(k)) return ;\n\t\tupd(ls, t(k));upd(rs, t(k));\n\t\tt(k)=0;\n\t}\n\tvoid build(int k, int l, int r){\n\t\tINF=max(INF, k);\n\t\tif(l==r){\n\t\t\tst(k)=ed(k)=a[l&r];\n\t\t\tlr(k)=l(k)=r(k)=1;ulr(k)=t(k)=0;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=l+r>>1;\n\t\tbuild(ls, l, mid);build(rs, mid+1, r);\n\t\tpushup(k, ls, rs);\n\t}\n\tvoid add(int k, int l, int r, int x, int y, int v){\n\t\tif(x<=l&&r<=y) return upd(k, v);\n\t\tint mid=l+r>>1;pushdown(k);\n\t\tif(x<=mid) add(ls, l, mid, x, y, v);\n\t\tif(mid<y) add(rs, mid+1, r, x, y, v);\n\t\tpushup(k, ls, rs);\n\t}\n\tint query(int k, int l, int r, int x, int y){\n\t\tif(x<=l&&r<=y) return k;\n\t\tint mid=l+r>>1, tmp1=0, tmp2=0;pushdown(k);\n\t\tif(x<=mid) tmp1=query(ls, l, mid, x, y);\n\t\tif(mid<y) tmp2=query(rs, mid+1, r, x, y);\n\t\tif(tmp1&&tmp2) pushup(++cnt, tmp1, tmp2);\n\t\tif(tmp1&&tmp2) return cnt;\n\t\telse return tmp1?tmp1:tmp2;\n\t}\n}seg;\nchar opt[4];\nint main(){\n\tscanf(\"%d\", &n);\n\tfor(int i=1; i<=n; i++) scanf(\"%d\", &a[i]);n--;\n\tfor(int i=1; i<=n; i++) a[i]=a[i+1]-a[i];\n\tseg.build(1, 1, n);scanf(\"%d\", &m);\n\tfor(int i=1, l, r, a, b; i<=m; i++){\n\t\tscanf(\"%s%d%d\", opt, &l, &r);\n\t\tif(opt[0]=='A'){\n\t\t\tscanf(\"%d%d\", &a, &b);\n\t\t\tif(l!=1) seg.add(1, 1, n, l-1, l-1, a);\n            if(r!=n+1) seg.add(1, 1, n, r, r, -(a+b*(r-l)));\n            if(l!=r) seg.add(1 ,1 ,n, l, r-1, b);\n\t\t}\n\t\telse{\n\t\t\tif(l==r) printf(\"1\\n\");\n\t\t\telse{\n\t\t\t\tseg.cnt=INF;int pos=seg.query(1, 1, n, l, r-1);\n\t\t\t\tprintf(\"%d\\n\", seg.data[pos].uselr);\n\t\t\t} \n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n~~\u5927\u5e38\u6570\u9009\u624b\u559c\u63d0\u6700\u4f18\u89e3\u3002~~",
        "postTime": 1616242252,
        "uid": 341102,
        "name": "ReKoJ",
        "ccfLevel": 0,
        "title": "P4243 [JSOI2009]\u7b49\u5dee\u6570\u5217"
    },
    {
        "content": "\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4243)\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/d-a-n-n-y-1-0-1/solution-p4243)\n\n#### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n- \u533a\u95f4\u52a0\u4e0a\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\n\n- \u6c42\u533a\u95f4\u6700\u5c11\u80fd\u88ab\u5206\u6210\u51e0\u4e2a\u7b49\u5dee\u6570\u5217\n\n#### \u5927\u81f4\u601d\u8def\uff1a\n\n\u9996\u5148\uff0c\u4e00\u770b\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u80af\u5b9a\u662f\u7ebf\u6bb5\u6811\u8dd1\u4e0d\u4e86\u3002\u4f46\u662f\u7b49\u5dee\u6570\u5217\u4e0d\u597d\u5904\u7406\uff0c\u600e\u4e48\u529e\u5462\uff1f\u90a3\u5c31\u8981\u7528\u4e0a\u7ecf\u5178\u7684\u5957\u8def\u4e86\u2014\u2014\u5dee\u5206\u3002\u6bd4\u5982\u539f\u6570\u5217\u4e3a\uff1a\n\n```\n1 1 2 3 4 5 2 5 8 \n```\n\n\u5dee\u5206\u540e\u5c31\u662f\n\n```\n1 0 1 1 1 1 -3 3 3\n```\n\n\u53ef\u4ee5\u660e\u663e\u7684\u770b\u51fa\uff0c\u539f\u6570\u5217\u4e2d\u7684\u6240\u6709\u7b49\u5dee\u6570\u5217\u90fd\u53d8\u6210\u4e86\u5dee\u5206\u6570\u5217\u4e2d\u76f8\u7b49\u7684\u4e00\u5c0f\u6bb5\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u591a\u5566\uff01\n\n\u63a5\u4e0b\u6765\u8be5\u5904\u7406\u4e24\u79cd\u64cd\u4f5c\u4e86\u3002\n\n\u9996\u5148\u662f\u7b80\u5355\u7684\u4fee\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u4e00\u4e0b\u89c4\u5f8b\uff0c\u8fd8\u662f\u7528\u4e0a\u9762\u7684\u4f8b\u5b50\uff1a\n\n```\n1 1 2 3 4 5 2 5 8 \n```\n\u5dee\u5206\u540e\u4e3a\uff1a\n\n```\n1 0 1 1 1 1 -3 3 3\n```\n\n\u5c06 $[2,7]$ \u533a\u95f4\u52a0\u4e0a\u9996\u9879\u4e3a $3$\uff0c\u516c\u5dee\u4e3a $2$ \u7684\u7b49\u5dee\u6570\u5217\uff0c\u53d8\u5316\u540e\u7684\u539f\u6570\u5217\u548c\u7b49\u5dee\u6570\u5217\u5982\u4e0b\uff1a\n\n```\n1 4 7 10 13 16 15 5 8\n```\n\n```\n1 3 3 3 3 3 -1 -10 3\n```\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u5dee\u5206\u6570\u5217\u4e2d\u53ea\u9700\u5c06\u7b2c\u4e00\u4e2a\u6570\u589e\u52a0\u9996\u9879\uff08$a$\uff09\uff0c\u4ee5\u540e\u7684\u6bcf\u4e00\u4e2a\u6570\u589e\u52a0\u516c\u5dee\uff08$d$\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u51cf\u5c11 $a+(r-l)\\times d$ \u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u5230\u9b54\u9b3c\u7684\u67e5\u8be2\u73af\u8282\u4e86\uff01\n\n\u63a5\u4e0b\u6765\u7ef4\u62a4\u7684\u5c31\u662f\u539f\u6570\u5217\u7684\u5dee\u5206\u5e8f\u5217\u4e86\u3002\u6ce8\u610f\u5230\uff0c\u5728\u5dee\u5206\u6570\u5217\u4e2d\uff0c\u539f\u6570\u5217\u4e2d\u7684\u7b49\u5dee\u6570\u5217\u8868\u73b0\u4e3a\u76f8\u7b49\u7684\u4e00\u6bb5\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u627e\u51fa\u533a\u95f4\u80fd\u88ab\u5212\u5206\u6210\u51e0\u4e2a\u76f8\u7b49\u7684\u5e8f\u5217\u5373\u53ef\u3002\n\n\u9996\u5148\uff0c\u6bcf\u4e2a\u8282\u70b9\u9700\u8981\u7ef4\u62a4\u56db\u4e2a\u503c\uff08\u4e0b\u9762\u7528 $s1,s2,s3,s4$ \u6765\u8868\u793a\uff09\uff0c\u8bbe $l,r$ \u4e3a\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u5219 $s1,s2,s3,s4$ \u5206\u522b\u4ee3\u8868 $(l,r),(l,r],[l,r),[l,r]$ \u8fd9\u56db\u4e2a\u533a\u95f4\u7684\u6700\u5c11\u5212\u5206\u6bb5\u6570\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u8bb0 $a,b$ \u5206\u522b\u4e3a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u7684\u503c\u3002\u53ef\u4ee5\u5f00\u59cb\u5408\u5e76\u4e86\uff01\u4ee5 $s1$ \u7684\u5408\u5e76\u4e3a\u4f8b\uff1a\n\n```cpp\ntmp.s1=sg[p<<1].s2+sg[p<<1|1].s3-(sg[p<<1].b==sg[p<<1|1].a);\ntmp.s1=min(tmp.s1,min(sg[p<<1].s1+sg[p<<1|1].s3,sg[p<<1].s2+sg[p<<1|1].s1));\n```\n\n\u5373\uff1a\u53cc\u5f00\u533a\u95f4\u5212\u5206\u7684\u6bb5\u6570\u5c31\u662f\u5de6\u5b50\u533a\u95f4\u7684\u5de6\u5f00\u53f3\u95ed\u533a\u95f4\u5212\u5206\u7684\u6bb5\u6570\u52a0\u4e0a\u53f3\u5b50\u533a\u95f4\u5212\u5206\u7684\u6bb5\u6570\u3002\n\n\u5982\u679c\u5de6\u5b50\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u6570\u548c\u53f3\u5b50\u533a\u95f4\u7b2c\u4e00\u4e2a\u6570\u76f8\u7b49\uff0c\u90a3\u4e48\u53ef\u4ee5\u5408\u5e76\u5de6\u8fb9\u7684\u6700\u540e\u4e00\u6bb5\u548c\u53f3\u8fb9\u7684\u7b2c\u4e00\u6bb5\uff0c\u5c31\u53ef\u4ee5\u5c11\u5212\u5206\u4e00\u6bb5\u3002\n\n\u53e6\u5916\uff0c\u8fd8\u8981\u5bf9\u96f6\u6563\u503c\u8fdb\u884c\u5224\u65ad\uff0c\u4e5f\u5373\u4e0a\u65b9\u7684\u7b2c\u4e8c\u884c\u3002\u56e0\u4e3a\u8fd8\u6709\u53ef\u80fd\u4e00\u4e2a\u53cc\u5f00\u533a\u95f4\u548c\u4e00\u4e2a\u4e00\u5f00\u4e00\u95ed\u533a\u95f4\u7684\u7ec4\u6210\u65b9\u5f0f\u5212\u5206\u6bb5\u6570\u6700\u5c0f\u3002\n\n\u56db\u4e2a\u5408\u5e76\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u5c31\u76f4\u63a5\u4e0a\u6838\u5fc3\u4ee3\u7801\u4e86\uff1a\n\n```cpp\nstruct seg{\n    int a,b,s1,s2,s3,s4;\n}sg[400001];\n//...\nvoid pushup(int p){\n    sg[p].a=sg[p<<1].a;\n    sg[p].b=sg[p<<1|1].b;\n    sg[p].s1=sg[p<<1].s2+sg[p<<1|1].s3-(sg[p<<1].b==sg[p<<1|1].a);\n    sg[p].s1=min(sg[p].s1,min(sg[p<<1].s1+sg[p<<1|1].s3,sg[p<<1].s2+sg[p<<1|1].s1));\n    sg[p].s2=sg[p<<1].s2+sg[p<<1|1].s4-(sg[p<<1].b==sg[p<<1|1].a);\n    sg[p].s2=min(sg[p].s2,min(sg[p<<1].s1+sg[p<<1|1].s4,sg[p<<1].s2+sg[p<<1|1].s2));\n    sg[p].s3=sg[p<<1].s4+sg[p<<1|1].s3-(sg[p<<1].b==sg[p<<1|1].a);\n    sg[p].s3=min(sg[p].s3,min(sg[p<<1].s3+sg[p<<1|1].s3,sg[p<<1].s4+sg[p<<1|1].s1));\n    sg[p].s4=sg[p<<1].s4+sg[p<<1|1].s4-(sg[p<<1].b==sg[p<<1|1].a);\n    sg[p].s4=min(sg[p].s4,min(sg[p<<1].s3+sg[p<<1|1].s4,sg[p<<1].s4+sg[p<<1|1].s2));\n}\n```",
        "postTime": 1648466569,
        "uid": 557958,
        "name": "danny101",
        "ccfLevel": 0,
        "title": "P4243\u9898\u89e3"
    },
    {
        "content": "\u627e\u4e86\u4e00\u9053\u7eaf\u7ebf\u6bb5\u6811\u7684\u9898\u7ec3\u7ec3\u624b\u3002\n\n~~\u8fd9\u9898\u662f\u7ebf\u6bb5\u6811\u9ed1\u9898\u91cc\u6700\u6c34\u7684\u4e86\u3002~~\n\n\u770b\u5230\u9898\u76ee\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u7528\u7ebf\u6bb5\u6811\u554a\u3002\n\n\u770b\u5230\u7b49\u5dee\u5c31\u60f3\u5230\u8981\u7528\u5dee\u5206\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08$n-1$\uff09\u4e2a\uff08\u76f8\u90bb\u7684\u6570\u7684\uff09\u5dee\u503c\u3002\n\n\u9700\u8981\u4e00\u4e9b\u53d8\u91cf\u3002\n\n$pre$\uff1a\u5f53\u524d\u533a\u95f4\u5185\u5212\u5206\u7684\u6570\u5217\u4e2a\u6570\uff08\u5c31\u662f\u8981\u6c42\u7684\u7b54\u6848\uff09\u3002\n\n$wl$\uff0c$wr$\uff1a\u4ece\u5de6\u7aef\u70b9\u5de6\u8fb9\u7684\u90a3\u4e2a\u6570\u5f80\u53f3 \u81f3\u7b2c\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e $3$ \u7684\u5e8f\u5217\u7684 \u672a\u5728\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e3\u7684\u5e8f\u5217\u5185\u7684 \u6570\u7684\u4e2a\u6570\uff0c\u53f3\u8fb9\u540c\u7406\uff08\u989d\u5916\u8bf4\u660e\uff0c\u8fd9\u4e9b\u6570\u80fd\u7ec4\u6210\u7684\u5e8f\u5217\u4e2a\u6570\u4e3a\uff08\u6570\u7684\u4e2a\u6570+1\uff09/2\uff09\uff08\u53e5\u5b50\u6709\u70b9\u957f\uff0c\u540e\u9762\u7b80\u79f0\u5355\u72ec\u7684\u6570\uff09\u3002\n\n$len$\uff1a\u533a\u95f4\u957f\u5ea6\u3002\n\n$pl$\uff0c$pr$\uff1a\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u4e0b\u6807\u5bf9\u5e94\u7684\u5dee\u503c\u3002\n\n$add$\uff1a\u533a\u95f4\u52a0\u7684\u61d2\u6807\u8bb0\u3002\n\n\u6700\u96be\u7684\u662f\u4e0a\u4f20\u4fe1\u606f\uff0c\u6709\u4e86\u8fd9\u4e9b\uff0c\u5728\u4e0a\u4f20\u4fe1\u606f\u65f6\u5c31\u80fd\u7ef4\u62a4 $pre$ \u4e86\u3002\n\n\u4e0a\u4f20\u65f6\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e9b\u53d8\u91cf\uff1a\n\n\u5c06\u5de6\u533a\u95f4\u7684 $pl$ \u76f4\u63a5\u8d4b\u5230\u5f53\u524d\u533a\u95f4\u7684 $pl$\uff0c\u5c06\u53f3\u533a\u95f4\u7684 $pl$ \u76f4\u63a5\u8d4b\u5230\u5f53\u524d\u533a\u95f4\u7684 $pr$ \u5c31\u597d\u4e86\u3002\n\n\u5c06\u5de6\u533a\u95f4\u7684wl\uff0c\u4e0e\u53f3\u533a\u95f4\u7684wr \u5148\u76f4\u63a5\u8d4b\u503c\u5728\u5f53\u524d\u533a\u95f4\u7684wl\u4e0ewr\u5185\uff0c\u518d\u770b\u5de6\u533a\u95f4\u662f\u5426\u5168\u4e3a\u5355\u72ec\u7684\u6570\uff0c\u5982\u679c\u662f\uff0c\u5148\u5c06\u5176\u51cf\u4e00\uff0c\u5e94\u4e3a\u4e2d\u95f4\u7684\u6570\u91cd\u590d\u4e86\uff0c\u518d\u628a\u53f3\u533a\u95f4\u7684wl\u52a0\u4e0a\uff0c\u53f3\u533a\u95f4\u540c\u7406\uff0c\u7279\u6b8a\u7684\uff0c\u5982\u679c\u4e2d\u95f4\u7684\u6570\u76f8\u7b49\uff0c\u90a3\u8fd9\u4e9b\u6570\u4fbf\u80fd\u7ec4\u6210\u4e00\u4e2a\u8f83\u957f\u7684\u5e8f\u5217\uff0c\u4ece\u800c\u8131\u79bb\u5355\u72ec\u7684\u6570\uff0c\u8fd9\u6837\u53cd\u800c\u8981\u51cf\u4e00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\uff08\u70b9\u662f\u5355\u72ec\u7684\u6570\uff0c\u6570\u5b57\u662f\u5dee\u503c\uff09\n\n\u5de6\u533a\u95f4\uff1a`\u00b7 1 \u00b7 2 \u00b7 -3 \u00b7 4 \u00b7`\uff08$wl=5$\uff09\n\n\u53f3\u533a\u95f4\uff1a`\u00b7 4 \u00b7 3 \u00b7 -2 \u00b7 1 \u00b7`\uff08$wr=5$\uff09\n\n\u5408\u5e76\u540e\uff1a`\u00b7 1 \u00b7 2 \u00b7 -3 \u00b7 4 \u00b7 4 \u00b7 3 \u00b7 -2 \u00b7 1 \u00b7`\uff08$wl=3$\uff0c$wr=3$\uff09\n\n\u5c06\u5de6\u533a\u95f4\u7684 $pre$\uff0c\u4e0e\u53f3\u533a\u95f4\u7684 $pre$ \u5148\u76f4\u63a5\u76f8\u52a0\u518d\u8d4b\u503c\u5728\u5f53\u524d\u533a\u95f4\u7684 $pre$ \u5185\uff0c\u5904\u7406\u4e2d\u95f4\u5408\u5e76\u7684\u4fe1\u606f\uff0c\u5148\u5c06\u4e2d\u95f4\u8d21\u732e\u7684\u5e8f\u5217\u6570\u51cf\u53bb\uff0c\n\n\u82e5\u4e2d\u95f4\u6ca1\u6709\u76f8\u540c\u7684\u6570\uff08\u6ca1\u6709\u56fa\u5b9a\u7684\u5e8f\u5217\uff09\uff0c\u5728\u5c06\u5176\u5355\u72ec\u7684\u6570\u5408\u5e76\uff0c\u5728\u7528\uff08\u6570\u7684\u4e2a\u6570+1\uff09/2\uff09\u52a0\u56de\u6765\uff1b\n\n\u82e5\u4e2d\u95f4\u6709\u76f8\u540c\u7684\u6570\uff08\u53d8\u6210\u56fa\u5b9a\u7684\u5e8f\u5217\uff09\uff0c\u5c06\u5176\u5de6\u8fb9\u7684\u5355\u72ec\u7684\u6570\u7528\uff08\u6570\u7684\u4e2a\u6570+1\uff09/2\uff09\u52a0\u4e0a\uff0c\u518d\u5c06\u5176\u53f3\u8fb9\u7684\u5355\u72ec\u7684\u6570\u7528\uff08\u6570\u7684\u4e2a\u6570+1\uff09/2\uff09\u52a0\u4e0a\uff0c\u5728\u52a0\u4e0a1\u4e2d\u95f4\u5408\u5e76\u4e86\u7684\u5e8f\u5217\uff09\u3002\n\n\u4e0a\u4f20\u5b8c\u6bd5\u3002\n\n\u56e0\u4e3a\u662f\u533a\u95f4\u52a0\uff0c\u9700\u8981\u7ef4\u62a4\u61d2\u6807\u8bb0 $add$\uff0c\u5c06\u5b50\u533a\u95f4\u7684 $add$\u3001$pl$ \u548c $pr$ \u52a0\u4e0a\u61d2\u6807\u8bb0\u7684\u6570\u5c31\u884c\u4e86\uff08\u8bb0\u5f97\u628a\u61d2\u6807\u8bb0\u6e05\u96f6\uff09\u3002\n\n**\u89e3\u6790\u5728\u4ee3\u7801\u91cc\u4e5f\u6709\u3002**\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define mxm 200002\n#define mxn 100002\nusing namespace std;\nstruct XD_tree{\n    ll l,r;\t//\u5de6\u53f3\u513f\u5b50\n    ll pre;\t//\u5f53\u524d\u533a\u95f4\u5185\u5212\u5206\u7684\u6570\u5217\u4e2a\u6570\uff08\u5c31\u662f\u8981\u6c42\u7684\u7b54\u6848\uff09\n    ll wl,wr;\t//\u4ece\u5de6\u7aef\u70b9\u5de6\u8fb9\u7684\u90a3\u4e2a\u6570\u5f80\u53f3\u8fde\u7eed\u7684\u5355\u72ec\u7684\u6570\u7684\u4e2a\u6570\n    ll xl,xr;\t//\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u4e0b\u6807\uff08\u7528\u6765\u6c42\u533a\u95f4\u5927\u5c0f\uff09\n    ll pl,pr;\t//\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u4e0b\u6807\u5bf9\u5e94\u7684\u5dee\u503c\n    ll add;\t//\u61d2\u6807\u8bb0\n}tr[mxn*2];\t//\u7ef4\u62a4\u533a\u95f4\nll trt,rrt;\t//\u7ebf\u6bb5\u6811\u9644\u5e26\u7684\u5c0f\u53d8\u91cf\nll T,n,a[mxn];\t//a[i]\u662fi\u7684\u503c\u51cfi-1\u7684\u503c\uff08i\u4e0ei-1\u7684\u5dee\u503c\uff09\ninline void rd(ll &x){x=0;short f=1;char c=getchar();while((c<'0'||c>'9')&&c!='-') c=getchar();if(c=='-') f=-1,c=getchar();while(c>='0'&&c<='9') x=x*10+c-'0',c=getchar();x*=f;}\ninline void pt(ll x){if(x<0) putchar('-'),x=-x;if(x>9) pt(x/10);putchar(x%10+'0');}\ninline void ptup(XD_tree &p,XD_tree l,XD_tree r){\t//\u4e0a\u4f20\u4fe1\u606f\n    p.wl=l.wl,p.wr=r.wr;\n    p.pl=l.pl,p.pr=r.pr;\n    p.pre=l.pre+r.pre;\t//\u8fd9\u4e09\u53e5\u5c31\u76f8\u5f53\u4e8e\u521d\u59cb\u5316\n    if(l.wl==l.xr-l.xl+2)\t//\u5982\u679c\u5de6\u8fb9\u5168\u662f\u5355\u72ec\u7684\u6570\n        if(l.pr==r.pl) p.wl-=2;\t//\u5982\u679c\u4e2d\u95f4\u7684\u5dee\u503c\u76f8\u7b49\uff0c\u5219\u5de6\u533a\u95f4\u53f3\u8fb9\u4e24\u4e2a\u5355\u72ec\u7684\u6570\u4e0d\u5355\u72ec\u4e86\uff0c\u5e94\u51cf\u6389\n        else p.wl+=r.wl-1;\t//\u5426\u5219\uff0c\u52a0\u4e0a\u53f3\u8fb9\u7684\uff0c\u53c8\u56e0\u4e3a\u5de6\u53f3\u533a\u95f4\u4ea4\u754c\u5904\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e00\u6837\u7684\u6570\uff0c\u91cd\u590d\u4e86\uff0c\u5e94\u51cf1\n    if(r.wr==r.xr-r.xl+2)\t//\u540c\u7406\n        if(l.pr==r.pl) p.wr-=2;\n        else p.wr+=l.wr-1;\n    p.pre-=((l.wr+1)>>1)+((r.wl+1)>>1);\t//\u5148\u5c06\u5355\u72ec\u7684\u6570\u7ec4\u6210\u7684\u5e8f\u5217\u4e2a\u6570\u51cf\u6389\uff0c\u5408\u5e76\u5b8c\u540e\u52a0\u56de\u6765\n    //\u5c06\u533a\u95f4\u4ea4\u754c\u5904\u5355\u72ec\u7684\u6570\u5408\u5e76\u540e\u80fd\u7ec4\u6210\u7684\u5e8f\u5217\u4e2a\u6570\u52a0\u4e0a\n    if(l.pr==r.pl){\t//\u5982\u679c\u4e2d\u95f4\u7684\u5dee\u503c\u76f8\u7b49\n        if(l.wr&&r.wl) p.pre+=1+((l.wr-(l.wr>1))>>1)+((r.wl-(r.wl>1))>>1);\t//\u5982\u679c\u4e2d\u95f4\u90fd\u6709\u5355\u72ec\u7684\u6570\n        else if(!l.wr&&!r.wl) p.pre--;\t//\u5982\u679c\u4e2d\u95f4\u90fd\u6ca1\u5355\u72ec\u7684\u6570\n        else p.pre+=(l.wr+r.wl-(l.wr>1)-(r.wl>1))>>1;\t//\u5982\u679c\u4e00\u8fb9\u6709\u5355\u72ec\u7684\u6570\uff0c\u53e6\u4e00\u8fb9\u6ca1\n    }\n    else p.pre+=(l.wr+r.wl)>>1;\t//\u5426\u5219\n}\ninline void doit(ll p,ll k){\t//\u4e0b\u4f20\u4fe1\u606f\u7684\u5206\u6b65\n    tr[p].add+=k;\n    tr[p].pl+=k;\n    tr[p].pr+=k;\n}\ninline void ptdn(ll p){\t//\u4e0b\u4f20\u4fe1\u606f\n    doit(tr[p].l,tr[p].add);\n    doit(tr[p].r,tr[p].add);\n    tr[p].add=0;//\u61d2\u6807\u8bb0\u6e05\u96f6\n}\ninline void bd(ll &p,ll l,ll r){\t//\u5efa\u6811\n    p=++trt;\n    tr[p].xl=l;\n    tr[p].xr=r;\n    if(l==r){\n        tr[p].pre=1;\t//\u4e24\u4e2a\u6570\u7ec4\u6210\u4e00\u4e2a\u533a\u95f4\n        tr[p].wl=tr[p].wr=2;\t//\u4e24\u4e2a\u6570\n        tr[p].pl=tr[p].pr=a[l];\t//\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u5dee\u503c\n        return;\n    }\n    ll mid=l+r>>1;\n    bd(tr[p].l,l,mid);\n    bd(tr[p].r,mid+1,r);\n    ptup(tr[p],tr[tr[p].l],tr[tr[p].r]);\n}\ninline void chg(ll p,ll l,ll r,ll x,ll y,ll k){\t//\u6539\u503c\n    if(l>y||r<x) return;\n    if(l>=x&&r<=y){doit(p,k);return;}\n    ll mid=l+r>>1;\n    ptdn(p);\n    chg(tr[p].l,l,mid,x,y,k);\n    chg(tr[p].r,mid+1,r,x,y,k);\n    ptup(tr[p],tr[tr[p].l],tr[tr[p].r]);\n}\ninline XD_tree ask(ll p,ll l,ll r,ll x,ll y){\t//\u8be2\u95ee\n    if(l>y||r<x) return (XD_tree){0,0,0,0,0,0,0,0,0,0};\n    if(l>=x&&r<=y) return tr[p];\n    ll mid=l+r>>1;\n    XD_tree lp,rp,ans=(XD_tree){0,0,0,0,0,0,0,0,0,0};\n    ans.xl=l,ans.xr=r;\n    ptdn(p);\n    lp=ask(tr[p].l,l,mid,x,y);\t//\u5de6\u533a\u95f4\u4fe1\u606f\n    rp=ask(tr[p].r,mid+1,r,x,y);\t//\u53f3\u533a\u95f4\u4fe1\u606f\n    if(!lp.pre) return rp;\t//\u5982\u679c\u5de6\u8fb9\u6ca1\u4fe1\u606f\uff0c\u8fd4\u56de\u53f3\u533a\u95f4\n    if(!rp.pre) return lp;\t//\u5982\u679c\u53f3\u8fb9\u6ca1\u4fe1\u606f\uff0c\u8fd4\u56de\u5de6\u533a\u95f4\n    ptup(ans,lp,rp);\t//\u5408\u5e76\u533a\u95f4\u4fe1\u606f\n    return ans;\t//\u5f53\u524d\u533a\u95f4\u4fe1\u606f\n}\nint main(){\n    rd(n);n--;\n    ll x,y;\n    rd(y);\n    for(ll i=1;i<=n;i++)\n        rd(x),a[i]=x-y,y=x;\t//a\u50a8\u5b58\u5dee\u503c\n    bd(rrt,1,n);\n    rd(T);\n    while(T--){\n        char c;\n        ll l,r;\n        cin>>c,rd(l),rd(r);r--;\t//r--\u66f4\u65b9\u4fbf\uff08\u81f3\u5c11\u6211\u89c9\u5f97\uff09\n        if(c=='A'){\t//\u66f4\u6539\u7ef4\u62a4\u7684\u5dee\u503c\n            rd(x),rd(y);\n            if(l>1) chg(rrt,1,n,l-1,l-1,x);\n            if(r>=l) chg(rrt,1,n,l,r,y);\n            if(r<n) chg(rrt,1,n,r+1,r+1,-x-y*(r-l+1));\n        }\n        else if(r>=l) pt(ask(rrt,1,n,l,r).pre),puts(\"\");\t//\u8f93\u51fa\u5e8f\u5217\u4e2a\u6570\n        else puts(\"1\");\t//\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u5219\u4e0d\u5b58\u5728\u5dee\u503c\uff0c\u987b\u7279\u5224\uff0c\u7ec4\u6210\u4e00\u4e2a\u5e8f\u5217\n    }\n}\n```\n",
        "postTime": 1633411806,
        "uid": 354308,
        "name": "Bezime",
        "ccfLevel": 6,
        "title": "P4243 \u9898\u89e3"
    }
]