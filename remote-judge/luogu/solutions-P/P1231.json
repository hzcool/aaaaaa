[
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io)\n\n---\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 1231](https://www.luogu.org/problemnew/show/P1231)\n\nHansBug \u773c\u524d\u6709 $n_1$ \u672c\u4e66\uff0c$n_2$ \u672c\u7ec3\u4e60\u518c\uff0c$n_3$ \u672c\u7b54\u6848\u3002\u5df2\u77e5\u4e00\u4e2a\u5b8c\u6574\u7684\u4e66\u518c\u5747\u5e94\u8be5\u5305\u542b\u4e14\u4ec5\u5305\u542b\u4e00\u672c\u4e66\u3001\u4e00\u672c\u7ec3\u4e60\u518c\u3001\u4e00\u672c\u7b54\u6848\u3002\u73b0\u5728 HansBug \u53ea\u77e5\u9053 $m_1$ \u4e2a\u53ef\u80fd\u7684\u4e66\u548c\u7ec3\u4e60\u518c\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c$m_2$ \u4e2a\u53ef\u80fd\u7684\u4e66\u548c\u7b54\u6848\u7684\u5bf9\u5e94\u5173\u7cfb\u3002HansBug \u60f3\u77e5\u9053\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u53ef\u80fd\u540c\u65f6\u7ec4\u5408\u6210\u591a\u5c11\u4e2a\u5b8c\u6574\u7684\u4e66\u518c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$n_1,n_2,n_3\\le 10^4$\uff0c$m_1,m_2\\le 2\\times 10^4$\n\n------\n\n## Solution\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u4e2a\u7f51\u7edc\u6d41\u7684\u6a21\u578b\u3002\u4e8e\u662f\u987a\u624b\u628a $n_1+n_2+n_3$ \u4e2a\u70b9\u5206\u6210 $3$ \u4e2a\u90e8\u5206\uff0c\u5efa\u7acb\u6e90\u70b9\u548c\u6c47\u70b9\u540e\u8dd1\u6700\u5927\u6d41\u3002\u5199\u5b8c\u624d\u53d1\u73b0\u8fd9\u6837\u662f\u6709\u6f0f\u6d1e\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n\n![](https://hydingsy.github.io/images/Luogu-1231-Composition-of-Book_1.png)\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u6309\u7167\u4e0a\u56fe\u8dd1\u6700\u5927\u6d41\u7b54\u6848\u80af\u5b9a\u662f $2$\uff0c\u800c\u9519\u8bef\u7684\u539f\u56e0\u5c31\u662f**\u4e66\u88ab\u91cd\u590d\u4f7f\u7528\u4e86\u591a\u6b21**\uff01\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u4fdd\u8bc1**\u6bcf\u672c\u4e66\u53ea\u80fd\u88ab\u4f7f\u7528\u4e00\u6b21**\uff01\n\n\u56e0\u6b64\u6211\u4eec\u5c31\u8981\u5f15\u5165\u62c6\u70b9\u7684\u601d\u60f3\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\uff1a\u5373\u4f7f\u4e00\u672c\u4e66\u4e0e\u591a\u4e2a\u8054\u7cfb\u518c\u6709\u5173\u7cfb\uff0c\u5b83\u6d41\u51fa\u7684\u6d41\u91cf\u4e5f\u53ea\u80fd\u662f $1$\u3002\u6240\u4ee5\u6211\u4eec\u628a\u6bcf\u4e2a\u4ee3\u8868\u4e66\u7684\u70b9\u62c6\u6210\u5de6\u53f3\u4e24\u4e2a\u70b9\uff0c\u5de6\u8fb9\u7684\u70b9\u548c\u7ec3\u4e60\u518c\u8fde\u8fb9\uff0c\u53f3\u8fb9\u7684\u70b9\u548c\u7b54\u6848\u8fde\u8fb9\uff1b\u5f53\u7136\u5de6\u53f3\u5bf9\u5e94\u70b9\u4e5f\u8981\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0b\u56fe\uff1a\n\n![](https://hydingsy.github.io/images/Luogu-1231-Composition-of-Book_2.png)\n\n\u8fd9\u6837\u6211\u4eec\u7684\u7b54\u6848\u5c31\u6b63\u786e\u4e86\uff0c\u4e8e\u662f\u76f4\u63a5\u62c6\u70b9\u540e\u518d\u8dd1\u6700\u5927\u6d41\u5373\u53ef\uff01\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2m)$\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nconst int N=4e4+5,M=1e6+5;\nint n1,n2,n3,m,tot=1,lnk[N],ter[M],nxt[M],val[M],dep[N],cnr[N];\n\nint id(int p,int x) {\n\tswitch(p) {\n\t\tcase 1: return x;\n\t\tcase 2: return n2+x;\n\t\tcase 3: return n2+n1+x;\n\t\tcase 4: return n2+n1+n1+x;\n\t}\n}\nvoid add(int u,int v,int w) {\n\tter[++tot]=v,nxt[tot]=lnk[u],lnk[u]=tot,val[tot]=w;\n}\nvoid addedge(int u,int v,int w) {\n\tadd(u,v,w),add(v,u,0);\n}\nint bfs(int s,int t) {\n\tmemset(dep,0,sizeof(dep));\n\tmemcpy(cnr,lnk,sizeof(lnk));\n\tstd::queue<int> q;\n\tq.push(s),dep[s]=1;\n\twhile(!q.empty()) {\n\t\tint u=q.front(); q.pop();\n\t\tfor(int i=lnk[u];i;i=nxt[i]) {\n\t\t\tint v=ter[i];\n\t\t\tif(!dep[v]&&val[i]) dep[v]=dep[u]+1,q.push(v);\n\t\t}\n\t}\n\treturn dep[t];\n}\nint dfs(int u,int t,int flow) {\n\tif(u==t) return flow;\n\tint ans=0;\n\tfor(int i=cnr[u];i&&ans<flow;i=nxt[i]) {\n\t\tcnr[u]=i;\n\t\tint v=ter[i];\n\t\tif(val[i]&&dep[v]==dep[u]+1) {\n\t\t\tint x=dfs(v,t,std::min(val[i],flow-ans));\n\t\t\tif(x) val[i]-=x,val[i^1]+=x,ans+=x;\n\t\t}\n\t}\n\tif(ans<flow) dep[u]=-1;\n\treturn ans;\n}\nint dinic(int s,int t) {\n\tint ans=0;\n\twhile(bfs(s,t)) {\n\t\tint x;\n\t\twhile((x=dfs(s,t,1<<30))) ans+=x;\n\t}\n\treturn ans;\n}\nint main() {\n\tscanf(\"%d%d%d\",&n1,&n2,&n3);\n\tfor(scanf(\"%d\",&m);m--;) {\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\taddedge(id(1,v),id(2,u),1);\n\t}\n\tfor(scanf(\"%d\",&m);m--;) {\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\taddedge(id(3,u),id(4,v),1);\n\t}\n\tfor(int i=1;i<=n1;++i) addedge(id(2,i),id(3,i),1);\n\tint S=0,T=n2+n1+n1+n3+1;\n\tfor(int i=1;i<=n2;++i) addedge(S,id(1,i),1);\n\tfor(int i=1;i<=n3;++i) addedge(id(4,i),T,1);\n\tprintf(\"%d\\n\",dinic(S,T));\n\treturn 0;\n}\n```\n\n",
        "postTime": 1543850442,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u5176\u5b9e\u5728\u60f3\u4e0d\u96be\uff0c\u4e3b\u8981\u662f\u6784\u56fe\u548c\u60f3\u51fa\u662f\u7f51\u7edc\u6d41\u96be\u3002\n\n\u672c\u9898\u7684\u6784\u56fe\u601d\u8def\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n\n**\u6e90\u70b9->\u7ec3\u4e60\u518c->\u4e66(\u62c6\u70b9)->\u7b54\u6848->\u6c47\u70b9**\n\n\u6ce8\u610f\u4e00\u5b9a\u8981\u62c6\u70b9\uff0c\u56e0\u4e3a\u4e00\u672c\u4e66\u53ea\u80fd\u7528\u4e00\u6b21\u3002\n\n\u66f4\u8be6\u7ec6\u4e00\u70b9\uff1a\n\n![\u56fe\u89e3](https://cdn.luogu.com.cn/upload/pic/13675.png)\n\n------------\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#define ll long long\n#define N 51001\n#define M 151001\n#define inf 23333333\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define fur(i,x,y) for(i=x;i<=y;i++)\n#define fdr(i,x,y) for(i=x;i>=y;i--)\n#define Fur(i,x,y) for(ll i=x;i<=y;i++)\n#define Fdr(x,y) for(ll i=x;i>=y;i--)\n#define in2(x,y) in(x);in(y)\n#define in3(x,y,z) in2(x,y);in(z)\n#define in4(a,b,c,d) in2(a,b);in2(c,d)\n#define ln pc('\\n');\n#define pk pc(' ');\n#define outn(x) out(x);ln;\n#define outk(x) out(x);pk;\n#define out2(x,y) outk(x);outn(y);\n#define out3(x,y,z) outk(x);out2(y,z)\n#define out4(w,x,y,z) outk(w);out3(x,y,z)\n#define clr(x,y) memset(x,y,sizeof(x))\n#define cpy(x,y) memcpy(x,y,sizeof(x))\nusing namespace std;\n```\n/\\*---------------------------------------\\*/\n```cpp\nnamespace fib{char b[300000]= {},*f=b;}\n#define gc ((*fib::f)?(*(fib ::f++)):(fgets(fib::b,sizeof(fib::b),stdin)?(fib::f=fib::b,*(fib::f++)):-1))\ninline void in(ll &x){x=0;char c;bool f=0;while((c=gc)>'9'||c<'0')if(c=='-')f=!f;x=c-48;while((c=gc)<='9'&&c>='0')x=x*10+c-48;if(f)x=-x;}\nnamespace fob{char b[300000]= {},*f=b,*g=b+300000-2;}\n#define pob (fwrite(fob::b,sizeof(char),fob::f-fob::b,stdout),fob::f=fob::b,0)\n#define pc(x) (*(fob::f++)=(x),(fob::f==fob::g)?pob:0)\nstruct foce{~foce(){pob;fflush(stdout);}} _foce;\nnamespace ib{char b[100];}\ninline void out(ll x){if(x==0){pc(48);return;}if(x<0){pc('-');x=-x;}char *s=ib::b;while(x) *(++s)=x%10,x/=10;while(s!=ib::b) pc((*(s--))+48);}\ninline void ps(char s[]){ll i=0,len=strlen(s);while(i<len)pc(s[i++]);}\n```\n/\\*------------------------------------------------------------------------------------------------\\*/\n\n/\\*------------------------------------------------------------------------------------------------\\*/\n\n```cpp\nstruct edge{ll next,to,w;}e[M];\nll cnt=2,n,m,st,ed;\nll head[N],d[N]={0},q[N*2];\ninline void add(ll x,ll y,ll w){e[cnt].to=y;e[cnt].next=head[x];e[cnt].w=w;head[x]=cnt++;}//\u90bb\u63a5\u8868\ninline void ins(){\n    ll n1,n2,n3,m,i,x,y;\n    in3(n1,n2,n3);\n    st=1;//\u6e90\u70b9\n    ed=n2+n1*2+n3+2;//\u6c47\u70b9\n    in(m);\n    while(m--){\n        in2(x,y);y++;x+=n2+1;\n        add(y,x,1);add(x,y,0);\n    }\n    fur(i,n2+2,n2+n1+1){y=i+n1;add(i,y,1);add(y,i,0);}\n    in(m);\n    while(m--){\n        in2(x,y);x+=n2+n1+1;y+=n1*2+n2+1;\n        add(x,y,1);add(y,x,0);\n    }\n    fur(i,2,n2+1){add(st,i,1);add(i,st,0);}\n    fur(i,n2+n1*2+2,ed-1){add(i,ed,1);add(ed,i,0);}\n}\ninline bool bfs(){\n    ll h=0,t=1,x,i;\n    clr(d,0);\n    q[h]=st;d[st]=1;\n    while(h<t){\n        x=q[h++];if(x==ed)return 1;\n        for(i=head[x];i;i=e[i].next)\n        if(e[i].w&&!d[e[i].to]){\n            d[e[i].to]=d[x]+1;\n            q[t++]=e[i].to;\n        }\n    }\n    return 0;\n}\ninline ll dfs(ll x,ll mf){\n    if(x==ed)return mf;\n    ll i,us=0,w;\n    for(i=head[x];i;i=e[i].next)\n    if(e[i].w&&d[e[i].to]==d[x]+1){\n        w=mf-us;\n        w=dfs(e[i].to,min(e[i].w,w));\n        e[i].w-=w;\n        e[i^1].w+=w;\n        us+=w;\n        if(us==mf)return us;\n    }\n    if(!us)d[x]=-1;//\u8fd9\u79cddinic\u52a0\u4e86\u4f18\u5316\uff0c\u76f8\u5bf9\u5feb\u4e00\u4e9b\n    return us;\n}\ninline ll work(){ll ans=0;while(bfs())ans+=dfs(st,inf);return ans;}\nint main(){\n    ins();//\u6784\u56fe\n    outn(work());//\u7f51\u7edc\u6d41\n}\n```\n/\\*\n5 3 4\n5\n4 3\n2 2\n5 2\n5 1\n5 3\n5\n1 3\n3 1\n2 2\n3 3\n4 3\n\\*/",
        "postTime": 1516632188,
        "uid": 36532,
        "name": "localhost",
        "ccfLevel": 0,
        "title": "\u7f51\u7edc\u6d41\uff08\u6559\u8f85\u7684\u7ec4\u6210\uff09"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u7f51\u8def\u6d41\u5165\u95e8\u7684\u597d\u9898\uff0c\u6211\u4eec\u5148\u5bf9\u7ec3\u4e60\u518c\u548c\u4e66\u8fde\u4e00\u6761\u8fb9\u5bb9\u91cf\u4e3a\u4e00\uff0c\u7136\u540e\u4e66\u4e0e\u7b54\u6848\u8fde\u4e00\u6761\u8fb9\u5bb9\u91cf\u4e3a\u4e00\uff0c\u4f46\u662f\u8fd9\u6837\u6709\u95ee\u9898\uff0c\u8fd9\u6837\u4e66\u7684\u6d41\u91cf\u53ef\u80fd\u4f1a\u5f88\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a\u4e66\u62c6\u6210\u4e24\u5806\uff0c\u7136\u540e\u4e66\u4e00\u4e0e\u4e66\u4e8c\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u5bb9\u91cf\u4e3a\u4e00\uff0c\u7136\u540e\u6211\u4eec\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff0c\u8d85\u7ea7\u6c47\u70b9\uff0c\u8fde\u8d77\u6765\uff0c\u5bb9\u91cf\u90fd\u662f\u4e00\uff0c\u8fd9\u6837\u5efa\u56fe\u5c31\u597d\u4e86\uff0c\u7136\u540edinic\u8dd1\u4e00\u6b21\uff0c\u5c31ok\n\n/*************************************************************************\n\n    > File Name: \u6d1b\u8c371231.cpp\n    > Author: Drinkwater-cnyali\n    > Created Time: 2017/2/13 16:10:45\n************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++ i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; -- i)\n#define mem(a, b) memset((a), b, sizeof(a))\nint read()\n{\n    int sum = 0, fg = 1; char c = getchar();\n    while(c < '0' || c > '9') { if (c == '-') fg = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return sum * fg;\n}\n#define inf 0x3f3f3f3f\nconst int maxn = 1000000;\nint e,be[maxn], ne[maxn], to[maxn], c[maxn];\nint nb, nex, na,m1,m2;\nvoid add(int x, int y, int z)\n{\n    to[e] = y, ne[e] = be[x], be[x] = e;\n    c[e] = z, e++;\n    to[e] = x, ne[e] = be[y], be[y] = e;\n    c[e] = 0, e++;\n}\nint d[maxn], end;\nbool bfs()\n{    \n    queue<int>q;\n    memset(d,-1,sizeof(d));\n    q.push(end),d[end] = 0;\n    while(!q.empty())\n    {\n        int u = q.front(); q.pop();\n        for(int i = be[u]; i!=-1; i = ne[i])\n        {\n            int v = to[i];\n            if(d[v] == -1 && c[i ^ 1])\n            {\n                d[v] = d[u] + 1;\n                q.push(v);\n            }\n        }\n    }\n    return d[0]!=-1;\n}\nint dfs(int x,int low)\n{\n    if(x == end || !low)return low;\n    int ret = 0;\n    for(int i = be[x]; i!=-1;i = ne[i])\n    {\n        int v = to[i];\n        if(d[v] == d[x] - 1 )\n        {\n            int    k = dfs(v,min(low-ret,c[i]));\n            if(k > 0)\n            {\n                c[i] -= k;\n                c[i^1] += k;\n                ret+=k;\n            }\n        }\n    }\n    return ret;\n}\nint dinic()\n{\n    int ans = 0;\n    while(bfs())\n    {\n        int k = dfs(0,inf);\n        if(k>0)ans+=k;\n    }\n    return ans;\n}\nint main()\n{\n    memset(be,-1,sizeof(be));    \n    nb = read(); nex = read(); na = read();\n    m1 = read();\n    REP(i,1,m1)\n    {\n        int x,y;\n        x = read(), y = read();\n        add(y,nex+x,1);\n    }\n    m2 = read();\n    REP(i,1,m2)\n    {\n        int x,y;\n        x = read(), y = read();\n        add(nex+nb+x,2*nb+nex+y,1);\n    }\n    end = 2*nb+nex+na+1;\n    REP(i,1,nex)    add(0,i,1);\n    REP(i,1,na) add(2*nb+nex+i,end,1);\n    REP(i,1,nb) add(nex+i,nex+nb+i,1);\n    printf(\"%d\",dinic());\n    return 0;\n}\n\n```",
        "postTime": 1487337637,
        "uid": 19645,
        "name": "Drinkwater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "\u6765\u81ea\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff08\u5b9e\u5728\u662f\u592a\u849f\u84bb\u4e86) OvO\n\n\u8fd9\u9898\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u7f51\u7edc\u6700\u5927\u6d41\uff0c\u6240\u4ee5\u7528\u7f51\u7edc\u6d41dinic\u8dd1\u4e00\u904d\u5c31\u884c \n\n\u4f46\u662f\u9898\u76ee\u53ea\u7ed9\u51fa\u4e86\u6bcf\u672c\u4e66\u548c\u7b54\u6848\u6216\u8005\u7ec3\u4e60\u518c\u53ef\u80fd\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u628a\u4e66\u4ee3\u8868\u7684\u70b9\u62c6\u6389\uff0c\u5efa\u4e00\u6761\u6d41\u91cf\u4e3a1\u7684\u8fb9\uff0c\u4ee5\u786e\u4fdd\u5f53\u8fd9\u672c\u4e66\u548c\u591a\u672c\u7b54\u6848\u6216\u7ec3\u4e60\u518c\u6709\u5173\u7cfb\u65f6\uff0c\u4ece\u8fd9\u6761\u8fb9\u4e0a\u6d41\u8fc7\u7684\u91cf\u4e3a1\uff08\u5373\u6bcf\u672c\u4e66\u53ea\u53ef\u80fd\u4e0e\u4e00\u672c\u7ec3\u4e60\u518c\u548c\u4e00\u672c\u7b54\u6848\u6709\u5173\u7cfb\uff09\uff0c\u5176\u4ed6\u8fb9\u5f00INF\u5373\u53ef\uff08\u8be6\u60c5\u770b\u4ee3\u7801\u6ce8\u91ca\uff09 \n\n\u7f51\u7edc\u6700\u5927\u6d41\u677f\u5b50\u4e0d\u4f1a\u6253\u7684\u53ef\u4ee5\u770b\u770bP3376\n\n\u63a5\u4e0b\u6765\u4e0a\u4ee3\u7801\n\n\n```cpp\n#include <bits/stdc++.h>//\u6211\u7231\u4e07\u80fd\u5934 \n\n#define ll long long\n#define FOR(i,l,r) for(register int i=l;i<=r;i++)\n#define INF 1<<30\n\nusing namespace std;\n\nconst int N=6000001;\nconst int M=1001;\n\nint to[N],nxt[N],head[N],cnt=2,w[N],ans;\n\nint n,m,s,t,d[N],q[N],cur[N],orz;\n\nint k , o;\t \n\nvoid qxx(int x,int y,int dis)\n{\n    to[cnt]=y;\n    w[cnt]=dis;\n    nxt[cnt]=head[x];\n    head[x]=cnt++;\n}//\u524d\u5411\u661f\u5efa\u56fe\n\nint bfs()\n{\n\n\tmemset(d,-1,sizeof(d));\n\tint fr,tail;\n\tfr=1,tail=0;\n\td[s]=0;\n\tq[1]=s;\n\twhile(tail<fr)\n\t{\n\t\tint k=q[++tail];\n\t\tfor(register int i=head[k];i;i=nxt[i])\n\t\t{\n\t\t\tint kk=to[i];\n\t\t\tif(d[kk]==-1&&w[i])\n\t\t\t{\n\t\t\t\td[kk]=d[k]+1;\n                \n\t\t\t\tq[++fr]=kk;\n                \n\t\t\t}\n\t\t}\n        \n\t}\n\tif(d[t]==-1)\n    \n\t\treturn 0;\n\telse \n    \n\t\treturn 1;\n}\n\nint dfs(int x,int minflow)\n{\n\n\tint a=0;\n\tif(x==t||!minflow)\n\t\treturn minflow;\n\tfor(register int i=cur[x];i;i=nxt[i])\n\t{\n\t\tint k=to[i];cur[x]=i;\n\t\tif(d[k]==d[x]+1&&(a=dfs(k,min(w[i],minflow))))\n\t\t{\n\t\t\tw[i]-=a;\n\t\t\tw[i^1]+=a;\n\t\t\treturn a;\n\t\t}\n\t}\n\treturn 0;\n} \nint dinic()\n{\n\n \tans=0;\n\tint STO;\n\twhile(bfs())\n\t{\n\t\tSTO=0;\n\t\tmemcpy(cur,head,sizeof(head));//\u6700\u5927\u6d41\u4f18\u5316 \n\t\twhile(STO=dfs(s,INF))\n\t\t{\n\t\t\tans+=STO;\n\t\t}\n\t}\n\treturn ans;\n}//\u7f51\u7edc\u6d41\u677f\u5b50 \n\nint main()\n{\n\n\t/*\u56fe    \u6e90\u70b9-> \u7b54\u6848-> \u4e66 -> \u7ec3\u4e60\u518c-> \u6c47\u70b9*/\n\t//\u7531\u4e8e\u7ed9\u7684\u90fd\u662f\u7b54\u6848\uff0c\u7ec3\u4e60\u518c\u548c\u4e66\u7684\u5173\u7cfb \uff0c\u6545\u5efa\u56fe\u65f6\u4e66\u653e\u4e2d\u95f4 \n\tscanf(\"%d%d%d%d\",&n,&m,&k,&o);//n \u4e66\u7684\u4e2a\u6570  m  \u7ec3\u4e60\u518c   k  \u7b54\u6848   o   \u4e66\u548c\u7ec3\u4e60\u518c\u5bf9\u5e94\u5173\u7cfb\u4e2a\u6570\n\torz = 2 * n + m + k ;//\u62c6\u70b9\u540e\u6240\u6709\u70b9\u7684\u4e2a\u6570  \n\tt = orz + 1;//\u6c47\u70b9 \n\ts = 0;//\u6e90\u70b9 \n    \n\tFOR(i , k + 1 , n + k)\n\t{\n\t\tqxx(i ,i + n, 1);\n\t\tqxx(i + n ,i , 0);\n\t}  \n\t//\u4e66\u672c\u62c6\u70b9 \n    \n\tFOR(i , 1 , o)\n\t{\n\t\tint l , r;//l \u4e66  r \u7ec3\u4e60\u518c \n\t\tscanf ( \"%d%d\",&l ,&r);\n\t\tqxx(l + n + k , r + 2 * n + k , INF);\n        qxx(r + 2 * n + k , l + n + k , 0);\n\t}//\u5efa\u8fb91 \n    \n\tint e;\n\tscanf(\"%d\",&e);//e  \u4e66\u548c\u7b54\u6848\u5bf9\u5e94\u5173\u7cfb\u4e2a\u6570\n    \n\tFOR(i , 1 , e )\n\t{\n\t\tint l , r;// l  \u4e66  r  \u7b54\u6848 \n\t\tscanf(\"%d%d\", &l, &r);\n\t\tqxx(r , l + k ,INF);\n\t\tqxx(l + k , r , 0);\n\t}//\u5efa\u8fb92 \n\tFOR(i , 1 , k)\n\t{\n\t\tqxx(s , i , 1);\n\t\tqxx(i , s , 0);\n\t}//\u6e90\u70b9\u7b54\u6848\u5efa\u8fb9 \n\tFOR(i , 1 , m)\n\t{\n\t\tqxx(i + 2 * n + k , t , 1); \n\t\tqxx(t , i + 2 * n + k , 0);\n\t}//\u6c47\u70b9\u7ec3\u4e60\u518c\u5efa\u8fb9 \n\tprintf(\"%d\",dinic());\n    return 0;//\u5feb\u4e50\u7ed3\u675f \n}\n```\n\n\u8c22\u8c22\u7ba1\u7406\u5458\u5927\u5927\uff0c\u6c42\u901a\u8fc7qwq",
        "postTime": 1544715543,
        "uid": 123318,
        "name": "ViXpop",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "## \u6559\u8f85\u7684\u7ec4\u6210\n### \u524d\u8a00\n\u521a\u5b66\u4e86\u7f51\u7edc\u6d41\uff0c\u8fc7\u6765\u7ec3\u7ec3\u624b\uff0c\u6ca1\u60f3\u5230\u662f\u4e2a\u4e09\u5206\u56fe\u5339\u914d\u3002\n\n### \u601d\u8def\n\u539f\u5148\u60f3\u76f4\u63a5\u66b4\u529b\uff0c\u76f4\u63a5\u4e0a\u5308\u7259\u5229\u7b97\u6cd5\u7684\uff0c\u4f46\u662f\u8fd9\u6bd5\u7adf\u662f\u7f51\u7edc\u6d41\u8fd8\u662f\u4e0a\u5427\u3002\n\n#### \u57fa\u672c\u601d\u8def\n\u5efa\u4e00\u4e2a\u8d85\u7ea7\u539f\u70b9\uff0c\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9\uff0c\u5728\u628a\u4e09\u79cd\u4e1c\u897f\u6709\u5173\u7cfb\u90fd\u8fde\u5728\u4e00\u8d77\uff0c\u653e\u5fc3\u7684\u8ba9\u7a0b\u5e8f\u53bb\u8dd1\u5427\uff01\uff01\uff01\n\n~~\u63d0\u4ea4\uff0cWA\u58f0\u4e00\u7247~~\n\n#### \u4ed4\u7ec6\u601d\u8003\n\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u4e00\u4e9b\u6781\u81f4\u7684\u60c5\u51b5\n\n\u4e66\u53ea\u6709\u4e00\u672c\uff0c\u7ec3\u4e60\u518c\u548c\u7b54\u6848\u6709\u4e24\u672c\uff0c\u90a3\u4e48\u6211\u4eec\u8fd9\u6837\u65e0\u8111\u8dd1\uff0c\u6c42\u51fa\u6765\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u4e8c\uff0c\u4f46\u662f\u6b63\u786e\u7b54\u6848\u662f\u4e00\u3002\n\n#### \u7406\u7531\uff1a\n\u82e5\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u5c31\u4e0d\u4f1a\u5728Dinic\u7b97\u6cd5\u7684\u5224\u65ad\u4e4b\u5185\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5f15\u51fa\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u70b9\n\n### \u62c6\u70b9\n\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u4e00\u4e2a\u56fe\u7ed9\u51fa\u4e86\u70b9\u6743\u800c\u4e0d\u662f\u8fb9\u6743\uff0c\u6211\u4eec\u5728\u8fde\u63a5\u8fb9\u7684\u65f6\u5019\u5c31\u663e\u5f97\u5341\u5206\u4e0d\u597d\u64cd\u4f5c\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5f80\u5f80\u5c31\u4f1a\u6709\u8fd9\u6837\u4e00\u79cd\u64cd\u4f5c\uff0c\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\n\n\u9898\u76ee\u7ed9\u51fa\u7684\u8fde\u8fb9\u5747\u7531\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde\u5411\u5165\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u7684\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u70b9\u6743\u7684\u8fb9\uff0c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u70b9\u6743\u7684\u9650\u5236\u4e86\u3002\n\n\u6240\u4ee5\u8fd9\u9053\u5c31\u5f88\u5bb9\u6613\u89e3\u4e86\n\n### \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int inf=2147483647;\nint n,m,n1,n2,n3,m1,m2,x,y,T,S,ans,deep[400005];\nstruct Edge\n{\n    int next,to,w;\n}edge[800050];\nint st[400005],cur[400005],nume=-1;\ninline int bo1(int x){return x*4;}\ninline int bo2(int x){return x*4+1;}\ninline int ex(int x){return x*4+2;}\ninline int an(int x){return x*4+3;}\ninline void adde(int f,int t,int w)\n{\n    edge[++nume].next=st[f];\n    edge[nume].to=t;\n    edge[nume].w=w;\n    st[f]=nume;\n}\ninline int bfs()\n{\n    memset(deep,0,sizeof(deep));\n    queue<int> q;\n    int now,i;\n    q.push(S);\n    deep[S]=1;\n    while(!q.empty())\n    {\n        now=q.front();\n        q.pop();\n        for(i=st[now];i!=-1;i=edge[i].next)\n            if(edge[i].w!=0&&deep[edge[i].to]==0)\n            {\n                deep[edge[i].to]=deep[now]+1;\n                q.push(edge[i].to);\n            }\n    }\n    if(deep[T]==0)\n        return 0;\n    return 1;\n}\nint dfs(int i,int m)\n{\n    int t;\n    if(i==T)\n        return m;\n    for(int& j=cur[i];j!=-1;j=edge[j].next)\n        if((deep[edge[j].to]==deep[i]+1)&&edge[j].w!=0)\n        {\n            t=dfs(edge[j].to,min(m,edge[j].w));\n            if(t>0)\n            {\n                edge[j].w-=t;\n                edge[j^1].w+=t;\n                return t;\n            }\n        }\n    return 0;\n}\ninline int dinic()\n{\n    int t,i;\n    while(bfs())\n    {\n        for (i=1;i<=n;i++)\n            cur[i]=st[i];\n        while(t=dfs(S,inf))\n            ans+=t;\n    }\n    return ans;\n}\nint main()\n{\n    int i;\n    memset(st,-1,sizeof(st));\n    nume=-1;\n    scanf(\"%d%d%d\",&n1,&n2,&n3);\n    S=1;n=(max(max(n1,n2),n3)+1)*4;T=n;\n    ans=0;\n    for(i=1;i<=n2;i++)\n    {\n        adde(S,ex(i),1);\n        adde(ex(i),S,0);\n    }\n    scanf(\"%d\",&m1);\n    for(i=1;i<=m1;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        adde(ex(y),bo1(x),1);\n        adde(bo1(x),ex(y),0);\n    }\n    for(i=1;i<=n1;i++)\n    {\n        adde(bo1(i),bo2(i),1);\n        adde(bo2(i),bo1(i),0);\n    }\n    scanf(\"%d\",&m2);\n    for(i=1;i<=m2;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        adde(bo2(x),an(y),1);\n        adde(an(y),bo2(x),0);\n    }\n    for(i=1;i<=n3;i++)\n    {\n        adde(an(i),T,1);\n        adde(T,an(i),0);\n    }\n    printf(\"%d\\n\",dinic());\n}\n```\n#### \u6ce8\u610f\uff1a\u5728\u5faa\u73af\u53d8\u91cf\u540e\u52a0&\u5c31\u53ef\u4ee5\u8dd1\u7684\u5f88\u5feb\u54e6\uff01\uff01\uff01\u5177\u4f53\u542b\u4e49\u767e\u5ea6\n",
        "postTime": 1554958711,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "# Luogu1231 \u6559\u8f85\u7684\u7ec4\u6210\n## \u4e24\u4e2a\u5c0ftrick\n\u521a\u521a\u5199\u8fc7\u4e86\u7f51\u7edc\u6d41\u6a21\u677f\u3002\u51c6\u5907\u6765\u5199\u4e00\u70b9\u7ec3\u4e60\u9898\u3002\u521a\u62ff\u5230\u8fd9\u9053\u9898\u5176\u5b9e\u6bd4\u8f83\u61f5\u3002\u5b8c\u5168\u627e\u4e0d\u5230\u5165\u624b\u70b9\u3002\u7ecf\u8fc7\u5b66\u4e60\uff0c\u6211\u53d1\u73b0\u7f51\u7edc\u6d41\u64cd\u4f5c\u6709\u4e24\u4e2a\u5c0ftrick\u3002\n\n1.**\u52a0\u5165\u865a\u62df\u6e90\u70b9\u548c\u6c47\u70b9\u3002**\u901a\u8fc7\u865a\u62df\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u6765\u5c06\u51e0\u4e2a\u56fe\uff08\u6216\u51e0\u4e2a\u7ec4\u5408\uff09\u53d8\u6210\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u5c31\u80fd\u5728\u4e0a\u9762\u8dd1\u7f51\u7edc\u6d41\u4e86\u3002\n\n2.**\u5efa\u7acb\u865a\u62df\u201c\u70b9\u5bf9\u201d\u3002**\u56e0\u4e3a\u7f51\u7edc\u6d41\u53ef\u4ee5\u9650\u5236\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\u4e0d\u8d85\u8fc7\u5bb9\u91cf\u9650\u5236\u3002\u4f46\u662f\u5374\u4e0d\u80fd\u9650\u5236\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u7684\u6d41\u91cf\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5c06\u4efb\u610f\u4e00\u4e2a\u70b9$x$\u90fd\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u70b9$x'$\u3002\u5e76\u5efa\u7acb\u4e00\u4e2a$x->x'$\u7684\u6709\u5411\u8fb9\uff08\u5bb9\u91cf\u4e3a1\uff09\u3002\u6240\u6709\u5165\u8fb9\u8fde\u63a5\u5728$x$\u4e0a\uff0c\u6240\u6709\u51fa\u8fb9\u8fde\u63a5\u5728$x'$\u4e0a\u3002\u8fd9\u6837\uff0c\u4efb\u610f\u4e00\u4e2a\u7ecf\u8fc7\u70b9$x$\u7684\u6d41\u90fd\u4f1a\u88ab$x->x'$\u8fd9\u6761\u8fb9\u9650\u5236\uff0c\u4f7f\u5f97\u53ea\u6709\u4e00\u6761\u8fb9\u7ecf\u8fc7\u70b9$x$\u3002\n\u5927\u6982\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50 \n![](https://gavin-1257756441.cos.ap-chengdu.myqcloud.com/\u9898\u89e3/luogu1231/1.png)\n\n## \u601d\u8def\n### \u70b9\u7684\u5904\u7406\n\u6211\u4eec\u9996\u5148\u628a\u6570\u7ec4\u5f00\u6210\u53cc\u500d\u7a7a\u95f4\uff0c\u90a3\u4e48\u4e00\u4e0b\u5c31\u662f\u6240\u6709\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u7f16\u53f7\u3002**\u8fd9\u91cc\u8bbe$N=N1+N2+N3$**\n\n- 1~N1 \u5bf9\u5e94N1(\u4e66\u7684\u4e2a\u6570)\n- N1+1~N1+N2 \u5bf9\u5e94N2\uff08\u7ec3\u4e60\u518c\u7684\u4e2a\u6570\uff09\n- N1+N2+1~N1+N2+N3 \u5bf9\u5e94N3\uff08\u7b54\u6848\u7684\u4e2a\u6570\uff09\n\n$\\forall x,index[x']=index[x]+N$\n\n\u70b9\u8868\u793a\u5b8c\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5904\u7406\u8fb9\u4e86\u3002\n### \u8fb9\u7684\u5904\u7406\n\u8fd8\u662f\u6309\u7167\u7f51\u7edc\u6d41\u57fa\u672c\u64cd\u4f5c\u6765\u505a\u3002\u4f46\u662f\u7f51\u7edc\u6d41\u5b58\u8fb9\u6709\u4e2a\u5c0f\u95ee\u9898\u3002\u90a3\u5c31\u662f\u90bb\u63a5\u8868\u7684$cnt$\u521d\u503c\u5fc5\u987b\u8981\u8bbe\u4e3a1\u3002\u624d\u80fd\u5728$++cnt$\u65f6\u4fdd\u8bc1\u6210\u5bf9\u53d8\u6362\u7684\u5339\u914d\u6027\u3002\n## \u4ee3\u7801\n\n### EK\u7248\n\n\u4e00\u5f00\u59cb\u542c\u4e86\u4e00\u4e2a\u53ebhwy\u7684\u6df7\u86cb\u3002\u5199\u4e86\u4e2aEK\u3002\u957f\u8fd9\u6837\u7684\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define maxn 100500\n#define inf (int)(1e9+1000)\n#define maxm 100500\nbool visit[maxn];\nint head[maxn],pre[maxn];\nint cnt=1,m1,m2,n,n1,n2,n3,incf[maxn],maxflow;\nint s=90401,t=90402;\nstruct gg{\n    int u,v,w,next;\n}side[maxm*4];\nvoid insert(int u,int v,int w){\n//\tif(u==3){\n//\t\tint gg=1;\n//\t}\n    side[++cnt]=(gg){u,v,w,head[u]};\n    head[u]=cnt;\n}\ninline int num(int type,int num){//\u4e09\u79cdtype\u5206\u522b\u4ee3\u8868\u4e66\uff0c\u7ec3\u4e60\u518c\uff0c\u7b54\u6848\u3002\u91cd\u590d\u4ee3\u8868\u6620\u5c04\u70b9\u3002\n    if(type==1)return num;\n    if(type==2)return n1+num;\n    if(type==3)return n1+n2+num;\n    if(type==11)return num+n;\n    if(type==22)return n1+num+n;\n    if(type==33)return n1+n2+num+n;\n    return 0;\n}\nbool bfs(){\n    memset(visit,0,sizeof(visit));\n    incf[s]=inf;visit[s]=1;\n    queue<int>line;line.push(s);\n    while(!line.empty()){\n        int now=line.front();line.pop();\n        for(int i=head[now];i;i=side[i].next){\n            int tar=side[i].v;int w=side[i].w;\n            if(visit[tar]||!w)continue;\n            incf[tar]=min(incf[now],1);\n            visit[tar]=1;pre[tar]=i;\n            line.push(tar);if(tar==t)return 1;\n        }\n    }\n    return 0;\n}\nvoid update(){\n    maxflow+=incf[t];\n    for(int i=t;i!=s;i=side[pre[i]^1].v){\n//\t\tcout<<i<<endl;\n        side[pre[i]].w-=incf[t];\n        side[pre[i]^1].w+=incf[t];\n    }\n    return;\n}\nint main(){\n//\tfreopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d%d%d%d\",&n1,&n2,&n3,&m1);\n    n=n1+n2+n3;\n    for(int i=1;i<=n;i++){//\u5efa\u7acb\u6620\u5c04\u70b9\u5bf9\n        insert(i,i+n,1);\n        insert(i+n,i,0);\n    }\n    for(int i=1;i<=n2;i++){//\u5efa\u7acb\u6e90\u70b9\u6240\u6709\u7ec3\u4e60\u518c\u7684\u8fde\u63a5\n        insert(s,num(2,i),1);\n        insert(num(2,i),s,0);\n    }\n    for(int i=1;i<=n3;i++){//\u5efa\u7acb\u6240\u6709\u7b54\u6848\u548c\u6c47\u70b9\u7684\u8fde\u63a5\n        insert(num(33,i),t,1);\n        insert(t,num(33,i),0);\n    }\n    for(int i=1;i<=m1;i++){\n        int x,y;scanf(\"%d%d\",&x,&y);\n        insert(num(22,y),num(1,x),1);//\u5c06\u7ec3\u4e60\u518c\u7684\u6620\u5c04\u70b9\u548c\u4e66\u76f8\u8fde\n        insert(num(1,x),num(22,y),0);\n    }\n    scanf(\"%d\",&m2);\n    for(int i=1;i<=m2;i++){\n        int x,y;scanf(\"%d%d\",&x,&y);\n        insert(num(11,x),num(3,y),1);//\u5c06\u4e66\u7684\u6620\u5c04\u70b9\u548c\u7b54\u6848\u76f8\u8fde\u3002\n        insert(num(3,y),num(11,x),0);\n    }\n    while(bfs()){update();}\n    cout<<maxflow;\n    return 0;\n}\n```\n\n\u7136\u540e\u3002\u3002\u3002\n\n![](https://gavin-1257756441.cos.ap-chengdu.myqcloud.com/\u9898\u89e3/luogu1231/2.png)\n\n~~\u6eda\u56de\u53bb\u5b66Dinic~~\n\n### Dinic\u7248\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\n#define maxn 10500\n#define maxm 105000\n#define inf (1e9+1000)\nint head[maxn];\nint cnt=1;\nstruct gg{\n    int u,v,w,next;\n}side[maxm*2];\nint n,m,s,t,rk[maxn];\nvoid insert(int u,int v,int w){\n    side[++cnt]=(gg){u,v,w,head[u]};head[u]=cnt;return;\n}\nint maxflow=0;\nbool bfs(){\n    memset(rk,0,sizeof(rk));\n    rk[s]=1;\n    queue<int>line;line.push(s);\n    while(!line.empty()){\n        int now=line.front();line.pop();\n        for(int i=head[now];i;i=side[i].next){\n            int tar=side[i].v;\n            if(!side[i].w)continue;\n            if(rk[tar])continue;\n            rk[tar]=rk[now]+1;line.push(tar);\n        }\n    }\n    if(rk[t])return 1;\n    return 0;\n}\nint dfs(int now,int flow){\n    if(now==t){return flow;}\n    int rest=flow;int tot=0;\n    for(int i=head[now];i;i=side[i].next){\n        int tar=side[i].v,w=side[i].w;\n        if(!w||rk[now]+1!=rk[tar])continue;\n        int used=dfs(tar,min(w,rest));rest-=used;tot+=used;\n        side[i].w-=used;side[i^1].w+=used;\n    }\n    return tot;\n}\nvoid dinic(){\n    while(bfs()){\n        maxflow+=dfs(s,inf);\n    }\n}\nint main(){\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++){\n        int u,v,w;scanf(\"%d%d%d\",&u,&v,&w);\n        insert(u,v,w);insert(v,u,0);\n    }\n    dinic();\n    cout<<maxflow;\n    return 0;\n}\n```\n\n",
        "postTime": 1547869181,
        "uid": 43420,
        "name": "GavinZheng",
        "ccfLevel": 8,
        "title": "P1231 \u6559\u8f85\u7684\u7ec4\u6210"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u63d0\u5230\u4e66\uff0c\u7ec3\u4e60\u518c\uff0c\u7b54\u6848\uff0c\u4e09\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\uff1b\u6c42\u5f97\u7b54\u6848\u662f\u6700\u591a\uff1b\u6240\u4ee5\u627e\u6700\u5927\u6d41\uff1b\n\n\u6b64\u9898\u4e00\u770b\u5c31\u662f\u4e09\u5206\u56fe\u4e4b\u7c7b\u7684\u9898\uff0c\u8fd9\u7c7b\u9898\u6211\u8ba4\u4e3a\u90fd\u6709\u4e00\u79cd\u5957\u8def\uff1b\u628a\u5176\u4e2d\u7528\u5230\u6700\u591a\u7684\u4e1c\u897f\u8fdb\u884c\u62c6\u5206\u3002\n\n\u4e3b\u8981\u601d\u8def\uff1a\n1. \u4f8b\u5982\u6b64\u9898\u5c06\u4e66\u62c6\u5206\u6210\u4e24\u4e2a\u70b9\uff1b\n\n2.\u6e90\u70b9\u4e0e\u7ec3\u4e60\u518c\uff0c\u7b54\u6848\u4e0e\u6c47\u70b9\uff0c\u4e66\u4e0e\u4e66\u4e4b\u95f4\u90fd\u8fde\u6d41\u91cf\u4e3a1\u5f97\u8fb9\uff1b\n\n3. \u518d\u5c06\u7b54\u6848\u4e0e\u4e66\uff0c\u7ec3\u4e60\u518c\u4e0e\u4e66\u4e4b\u95f4\u7684\u8fb9\u8fde\u8d77\u6765\uff1b\u5c31\u6784\u9020\u51fa\u4e86\u56fe\uff1b\n\n4. \u6784\u9020\u51fa\u56fe\u540e\uff0c\u6b64\u9898\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\uff0c\u5728\u56fe\u4e0a\u8dd1Dinic\u5373\u53ef\u6c42\u51fa\u7b54\u6848\uff1b\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\nusing namespace std;\n#define N 600010\n#define M 800010\nint ver[M],nxt[M],edge[M],tot=1,head[N],d[N];\nint n1,n2,n3,m1,m2,maxflow,s,t,inf=1<<30;//n1\u4e66\u7684\u6570\u91cf\uff0cn2\u7ec3\u4e60\u518c\u7684\u6570\u91cf\uff0cn3\u7b54\u6848\u7684\u6570\u91cf\uff0c\n//m1\u7ec3\u4e60\u518c\u548c\u4e66\u7684\u5173\u7cfb\u6570\u91cf\uff1bm2\u7b54\u6848\u548c\u4e66\u5173\u7cfb\u7684\u6570\u91cf\uff1b \nvoid add(int x,int y,int z){\n\tver[++tot]=y;\n\tnxt[tot]=head[x];\n\tedge[tot]=z;\n\thead[x]=tot;\n}\nbool bfs(){//\u6784\u9020\u5206\u5c42\u56fe\uff1b \n\tmemset(d,0,sizeof(d));\n\tqueue<int>q;\n\tq.push(s); d[s]=1;\n\twhile(q.size()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=nxt[i]){\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tif(z&&(!d[y])){\n\t\t\t\tq.push(y);\n\t\t\t\td[y]=d[x]+1;\n\t\t\t\tif(y==t) return 1;//\u8bf4\u660e\u6709\u589e\u5e7f\u8def \n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dinic(int x,int flow){//\u5728\u5206\u5c42\u56fe\u4e0a\u589e\u5e7f \n\tif(x==t) return flow;\n\tint rest=flow,k;\n\tfor(int i=head[x];i&&rest;i=nxt[i]){\n\t\tint z=edge[i],y=ver[i];\n\t\tif(z&&d[y]==d[x]+1){\n\t\t\tk=dinic(y,min(rest,z));\n\t\t\tif(!k) d[y]=0;//\u526a\u679d\uff0c\u53bb\u6389\u589e\u5e7f\u5b8c\u6bd5\u7684\u70b9 \n\t\t\tedge[i]-=k;\n\t\t\tedge[i^1]+=k;\n\t\t\trest-=k;\n\t\t}\n\t} \n\treturn flow-rest;\n}\nint main(){\n\tscanf(\"%d%d%d%d\",&n1,&n2,&n3,&m1);\n\tt=n1+n2+n3+n1+1;//\u6c47\u70b9\uff0cs\u4e3a\u6e90\u70b9\uff1b \n\tfor(int i=1;i<=n2;i++) add(s,i,1),add(i,s,0);//\u8fde\u6e90\u70b9\u548c\u7ec3\u4e60\u518c\u4e4b\u95f4\u7684\u8fb9\uff1b\uff08\u6ce8\u610f\u90fd\u662f\u53cc\u5411\u8fb9\uff09 \n\tfor(int i=1;i<=n3;i++) add(i+n1+n2+n1,t,1),add(t,i+n1+n2+n1,0);//\u8fde\u63a5\u7b54\u6848\u548c\u6c47\u70b9\u4e4b\u95f4\u7684\u8fb9\uff1b \n\tfor(int i=1;i<=n1;i++) add(i+n2,i+n2+n1,1),add(i+n1+n2,i+n2,0);//\u5c06\u4e66\u62c6\u70b9\u540e\uff0c\u8fde\u63a5\u4e66\u4e0e\u4e66\u4e4b\u95f4\u7684\u8fb9\uff1b \n\tfor(int i=1;i<=m1;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(y,x+n2,1);//\u8fde\u7ec3\u4e60\u518c\u4e0e\u4e66\uff081\uff09\u4e4b\u95f4\u7684\u8fb9\uff1b \n\t\tadd(x+n2,y,0);\n\t}\n\tscanf(\"%d\",&m2);\n\tfor(int i=1;i<=m2;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x+n2+n1,y+n2+n1+n1,1);//\u8fde\u4e66\uff082\uff09\u4e0e\u7b54\u6848\u4e4b\u95f4\u7684\u8fb9\uff1b \n\t\tadd(y+n2+n1+n1,x+n2+n1,0);\n\t}\n\tint flow=0;\n\twhile(bfs())//\u5224\u65ad\u6709\u65e0\u589e\u5e7f\u8def\uff1b \n\twhile((flow=dinic(s,inf)))maxflow+=flow;//\u6c42\u6700\u5927\u6d41 \n\tprintf(\"%d\",maxflow);\n\treturn 0;\n} \n```\n",
        "postTime": 1566216346,
        "uid": 143408,
        "name": "\u9648\u96ea\u68ee",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "**ISAP\u6700\u5927\u6d41+\u6307\u9488\u5b58\u56fe**\n\n\u7b2c\u4e00\u773c\u4e09\u5206\u56fe\u5339\u914d\u3002\u4f46\u662f\u7531\u4e8e**\u4e66\u4e0d\u80fd\u591a\u6b21\u9009\u7528**\uff0c\u8981\u5bf9\u4e2d\u5c42\u8fdb\u884c\u62c6\u70b9\u9650\u5236\u6d41\u91cf\u3002\n\n## \u5efa\u56fe\n\n- \u8bbe\u8d85\u7ea7\u539f\u70b9\u4e3a$0$\uff0c\u8d85\u7ea7\u6c47\u70b9\u4e3a$n_1 \\times 2 + n_2 + n_3 + 1$\n\n- \u5bf9\u4e8e$\\forall i \\in [1, n_1]$\uff0c\u4ece$i$\u5411$n_1 + i$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n- \u5bf9\u4e8e$\\forall i \\in [1, n_2]$\uff0c\u4ece$0$\u5411$n_1 \\times 2 + i$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n- \u5bf9\u4e8e$\\forall i \\in [1, n_3]$\uff0c\u4ece$n_1 \\times 2 + n_2 + i$\u5411$n_1 \\times 2 + n_2 + n_3 + 1$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n- \u5bf9\u4e8e\u53ef\u4ee5\u5339\u914d\u7684$\\forall i \\in [1, n_2]$\uff0c$\\forall j \\in [1, n_1]$\uff0c\u4ece$n_1 \\times 2 + i$\u5411$j$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n- \u5bf9\u4e8e\u53ef\u4ee5\u5339\u914d\u7684$\\forall i \\in [1, n_1]$\uff0c$\\forall j \\in [1, n_3]$\uff0c\u4ece$n_1 + i$\u5411$n_1 \\times 2 + n_2 + j$\u5efa\u7acb\u5bb9\u91cf\u4e3a$1$\u7684\u8fb9\n\n## \u4ee3\u7801\n\nISAP+\u5f53\u524d\u5f27\n\n```cpp\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <cstring>\n\nusing namespace std;\n\nconst int MAXN = 1e4 + 5;\nconst int INF = 0x3f3f3f3f;\n\nint n1, n2, n3;\n\nstruct Edge{\n    int to, val;\n    Edge *nxt, *ops;\n    Edge(int to, int val, Edge *nxt): to(to), val(val), nxt(nxt) {}\n};\n\nEdge *head[MAXN << 2], *cur[MAXN << 2];\n\nvoid AddEdge(int u, int v, int w) {\n    head[u] = new Edge(v, w, head[u]);\n    head[v] = new Edge(u, 0, head[v]);\n    head[u]->ops = head[v]; head[v]->ops = head[u];\n}\n\nint s, t, gap[MAXN << 2], dep[MAXN << 2], res;\n\nvoid Bfs() {\n    memset(gap, 0, sizeof(gap));\n    memset(dep, -1, sizeof(dep));\n    dep[t] = 0; gap[dep[t]]++;\n    queue<int> q;\n    q.push(t);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        for (Edge *e = head[u]; e; e = e->nxt) {\n            int v = e->to;\n            if (dep[v] != -1) continue;\n            dep[v] = dep[u] + 1;\n            gap[dep[v]]++;\n            q.push(v);\n        }\n    }\n}\n\nint Dfs(int u, int flow) {\n    if (u == t) {\n        res += flow;\n        return flow;\n    }\n    int used = 0;\n    for (Edge *&e = cur[u]; e; e = e->nxt) {\n        int v = e->to;\n        if (e->val && dep[v] == dep[u] - 1) {\n            int mi = Dfs(v, min(e->val, flow - used));\n            if (mi) {\n                used += mi;\n                e->val -= mi;\n                e->ops->val += mi;\n            }\n            if (used == flow) return used;\n        }\n    }\n    cur[u] = head[u];\n    gap[dep[u]]--;\n    if (gap[dep[u]] == 0) dep[s] = n1 * 2 + n2 + n3 + 3;\n    dep[u]++;\n    gap[dep[u]]++;\n    return used;\n}\n\nvoid Isap() {\n    res = 0;\n    Bfs();\n    memcpy(cur, head, sizeof(head));\n    while (dep[s] <= n1 * 2 + n2 + n3 + 2) Dfs(s, INF);\n}\n\nint main() {\n    ios :: sync_with_stdio(false); cin.tie(NULL);\n    cin >> n1 >> n2 >> n3;\n    s = 0; t = n1 * 2 + n2 + n3 + 1;\n    int m;\n    cin >> m;\n    for (int i = 1; i <= n2; i++) AddEdge(0, n1 * 2 + i, 1);\n    for (int i = 1; i <= n3; i++) AddEdge(n1 * 2 + n2 + i, t, 1);\n    for (int i = 1; i <= n1; i++) AddEdge(i, n1 + i, 1);\n    for (int i = 1; i <= m; i++) {\n        int x, y;\n        cin >> x >> y;\n        AddEdge(n1 * 2 + y, x, 1);\n    }\n    cin >> m;\n    for (int i = 1; i <= m; i++) {\n        int x, y;\n        cin >> x >> y;\n        AddEdge(n1 + x, n1 * 2 + n2 + y, 1);\n    }\n    Isap();\n    cout << res << endl;\n    return 0;\n}\n```",
        "postTime": 1556102769,
        "uid": 126376,
        "name": "Irelia\u10e6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "$Pascal$ \u8dd1\u5230\u4e86\u7b2c $2$ \u9875!!!\n\n\u58f0\u660e : \u56fe\u7247\u6765\u81ea [$programmy$](https://blog.csdn.net/mmy1996/article/details/52305135) \u3002\n\n\u8fd9\u662f\u4e00\u9053 **\u62c6\u70b9** \u7684\u57fa\u7840\u9898\u76ee\u3002\u9996\u5148,\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u201c\u4e09\u5206\u56fe\u201d,\u6211\u4eec\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u6765\u641e\u3002\n\n\u4f46\u662f\u53d1\u73b0\u6211\u4eec\u8981\u8d4b\u503c\u7684\u662f\u70b9\u7684\u6d41\u91cf\u800c\u4e0d\u662f\u8fb9\u7684\u6d41\u91cf,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5**\u62c6\u70b9**\u3002\n\n\u672c\u6765\u662f\u8fd9\u6837\u5b50\u7684 :\n\n![](https://i.loli.net/2018/10/31/5bd93ce2c9599.jpg)\n\n\u7136\u540e\u53d8\u6210\u8fd9\u6837\u5b50 :\n\n![](https://i.loli.net/2018/10/31/5bd93ce2d72e3.jpg)\n\n\u6240\u4ee5\u8fd9\u4e2a\u6837\u4f8b\u4f1a\u53d8\u6210\u8fd9\u6837\u5b50 (\u8349\u7a3f\u4e0d\u8981\u4ecb\u610f) :\n\n![](https://cdn.luogu.com.cn/upload/pic/41048.png)\n\n\u4e2d\u95f4\u6709\u4e24\u4e2a $n$ \u5bf9\u5427\u3002\u5efa\u5b8c\u6a21\u578b\u8dd1\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5f53\u7136\u8981\u8dd1 $ISAP$ \u5566\u5bf9\u5427\u3002\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    value,reach,next:array[-1..210000] of longint;\n    gap,dis,cnt:array[-1..81000] of longint;\n    n,m,z,l,r,k,i,j,sum,tot,sink,source,number,maxflow:longint;\n\nprocedure add(l,r:longint);\nbegin\n    inc(tot); reach[tot]:=r; value[tot]:=1; next[tot]:=cnt[l]; cnt[l]:=tot;\n    inc(tot); reach[tot]:=l; value[tot]:=0; next[tot]:=cnt[r]; cnt[r]:=tot;\nend;\n\nfunction Dfs(now,flow:longint):longint;\nvar i,k,mindis,ret:longint;\nbegin\n    mindis:=n-1; ret:=flow;\n    if now=sink then exit(flow);\n    i:=cnt[now];\n    while i<>-1 do\n    begin\n        if value[i]>0 then\n        begin\n            if dis[now]=dis[reach[i]]+1 then\n            begin\n                k:=Dfs(reach[i],min(ret,value[i]));\n                dec(value[i],k);inc(value[i xor 1],k);\n                dec(ret,k);\n                if dis[source]>=n then exit(flow-ret);\n                if ret=0 then break;\n            end;\n             mindis:=min(mindis,dis[reach[i]]);\n        end;\n        i:=next[i];\n    end;\n    if ret=flow then\n    begin\n        dec(gap[dis[now]]);\n        if gap[dis[now]]=0 then dis[source]:=n;\n        dis[now]:=mindis+1;\n        inc(gap[dis[now]]);\n    end;\n    exit(flow-ret);\nend;\n\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    read(n,m,z); source:=1; sink:=n+n+m+z+2;\n    for i:=1 to m do add(source,i+1); // \u8fde\u8d85\u6e90\u548c\u7ec3\u4e60\u518c\n    for i:=1 to z do add(i+n+n+m+1,sink); // \u8fde\u7b54\u6848\u548c\u8d85\u6c47\n    for i:=1 to n do add(i+m+1,i+m+n+1); // \u514b\u9686\u4e00\u4e9b\u4e66\u672c\u7136\u540e\u76f8\u8fde\n    read(k); for i:=1 to k do begin read(l,r); l:=l+m+1; r:=r+1; add(r,l); end; // \u8fde\u7ec3\u4e60\u518c\u548c\u4e66\u672c,\u6ce8\u610f\u8981\u8fde r -> l \u800c\u4e0d\u662f l -> r,\u5f53\u7136\u4f60\u7684\u5efa\u6a21\u4e0d\u4e00\u6837\u4e5f\u662f\u53ef\u4ee5\u7684\n    read(k); for i:=1 to k do begin read(l,r); l:=l+n+m+1; r:=r+n+n+m+1; add(l,r); end; // \u8fde\u4e66\u672c\u548c\u7b54\u6848\n    n:=sink; gap[source]:=n;\n    while dis[source]<n do inc(maxflow,Dfs(source,maxlongint)); // \u8dd1 ISAP\n    writeln(maxflow); \nend.\n```",
        "postTime": 1540963815,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "\u4ece\u6bcf\u672c\u4f5c\u4e1a\u672c\u5411\u67d0\u4e9b\u4e66\u8fde\u4e00\u6761\u8fb9\uff0c\u4ece\u6bcf\u672c\u4e66\u5411\u67d0\u4e9b\u7b54\u6848\u8fde\u4e00\u6761\u8fb9\uff0c\u533a\u5206\u4e00\u4e0b\u4e09\u7c7b\u672c\u5b50\uff0c\u518d\u5efa\u8d85\u7ea7\u6e90\u70b9\u3001\u8d85\u7ea7\u6c47\u70b9\u5c31\u884c\u4e86\uff0c\u4e00\u6b65\u4e00\u6b65\u6253\u3002\n\n\uff08\u720610\u4e13\u7528\uff09\u4f60\u720610\u5927\u6982\u662f\u56e0\u4e3a\u8fd9\u7c7b\u6570\u636e\u80fd\u628a\u4f60\u5361\u6389\u3002\n\n1 2 2\n2\n1 2\n1 1\n2\n1 2\n1 1\uff08\u7b54\u6848\u662f1\uff0c\u4f60\u4f1a\u62532\uff09\u89e3\u51b3\u65b9\u6cd5\u662f\u628a\u6bcf\u672c\u4e66\u7684\u70b9\u5bb9\u91cf\u8bbe\u4e3a1\uff0c\u7136\u540e\u62c6\u70b9\uff0c\u628a\u6bcf\u672c\u4e66\u5bf9\u5e94\u7684\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u4e2d\u95f4\u6dfb\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\u3002\n\n\uff08\u720630\u4e13\u7528\uff09\u6570\u7ec4\u5f00\u592710\u500d\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint la[200002],en[2000001],rev[2000001],c[2000001],ne[2000001];\nint q[200003],level[200002],now[200002];\nint n,n1,n2,n3,m1,m2,top;\nvoid bfs(int s){\n    memset(level,-1,sizeof(level));\n    memset(q,0,sizeof(q));\n    int h=0,t=1;\n    q[1]=s;\n    level[s]=0;\n    while (h<t)\n      for (int i=la[q[++h]];i;i=ne[i])\n        if (c[i]>0&&level[en[i]]<0){\n            level[en[i]]=level[q[h]]+1;\n            q[++t]=en[i];\n        }\n}\nint dfs(int u,int t,int f){\n    if (u==t) return f;\n    for (int &i=now[u];i>0;i=ne[i])\n      if (c[i]>0&&level[u]<level[en[i]]){\n          int d=dfs(en[i],t,min(f,c[i]));\n          if (d>0){\n              c[i]-=d;\n              c[rev[i]]+=d;\n              return d;\n          }\n      }\n    return 0;\n}\nint max_flow(int s,int t){\n    int flow=0;\n    while (1){\n        bfs(s);\n        if (level[t]<0) return flow;\n        for (int i=0;i<=n+n1;i++) now[i]=la[i];\n        int f;\n        while (f=dfs(s,t,1000000000)>0) flow+=f; \n    }\n}\nvoid add(int x,int y,int z){\n    ne[++top]=la[x];\n    en[top]=y;\n    c[top]=z;\n    rev[top]=top+1;\n    la[x]=top;\n    ne[++top]=la[y];\n    en[top]=x;\n    c[top]=0;\n    rev[top]=top-1;\n    la[y]=top;\n}\nint main(){\n    scanf(\"%d%d%d\",&n1,&n2,&n3);\n    n=n1+n2+n3;\n    scanf(\"%d\",&m1);\n    for (int i=1;i<=m1;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(b+n1,a,1);\n    }\n    scanf(\"%d\",&m2);\n    for (int i=1;i<=m2;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        add(a+n,b+n1+n2,1);\n    }\n    for (int i=1;i<=n1;i++) add(i,i+n,1);\n    for (int i=1;i<=n2;i++) add(0,i+n1,1);\n    for (int i=1;i<=n3;i++) add(i+n1+n2,n+n1+1,1);\n    int ans=max_flow(0,n+n1+1);\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1490097345,
        "uid": 13940,
        "name": "pupuvovovovovo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "\u770b\u8fd8\u6ca1\u6709\u4eba\u53d1\u9898\u89e3\uff0c\u8d76\u5feb\u6765\u53d1\u4e00\u7bc7\u9898\u89e3\uff08\u563f\u563f~~\uff09\n\n\u56e0\u4e3a\u662f\u4ee5\u6bcf\u672c\u4e66\u5ef6\u4f38\u7684\u5173\u7cfb\u56fe\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e00\u672c\u4e66\u6765\u8bb2\u5b83\u53ea\u80fd\u8ddf\u4e00\u672c\u7b54\u6848\u548c\u4e00\u672c\u7ec3\u4e60\u518c\u914d\u5957\uff0c\u90a3\u4e48\u5c31\u62c6\u70b9\n\n\u8fde\u8fb9\uff1a\u8d85\u6e90\u70b9st->\u7ec3\u4e60\u518c->\u4e66\u7684\u5165\u70b9->\u51fa\u70b9->\u7b54\u6848->\u8d85\u6c47\u70b9ed\n\n\u7528\u666e\u901adinic\u76f4\u63a5\u8dd1\u7684\u8bdd\u4f1aTLE 7 \u4e2a\u70b9\uff0c\n\n\u6240\u4ee5\u6211\u4eec\u52a0\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\uff1a\u5f53\u524d\u5f27\u4f18\u5316\uff08\u4e0d\u61c2\u7684\u53ef\u4ee5\u4e0a\u7f51\u767e\u5ea6\uff09\n\n\u73b0\u5728\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a C++\n\n/*************************************************************************\n\n    > Author: wzw-cnyali\n    > Created Time: 2017/2/12 14:20:28\n************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++ i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; -- i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mem(a, b) memset((a), b, sizeof(a))\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\nconst int Size = 1500010;\nconst int inf = 0x3f3f3f3f;\nint read()\n{\n    int sum = 0, fg = 1; char c = getchar();\n    while(c < '0' || c > '9') { if (c == '-') fg = -1; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return sum * fg;\n}\nint be[Size], nxt[Size], to[Size], w[Size], e;\nvoid add(int x, int y, int z)\n{\n    to[e] = y;\n    nxt[e] = be[x];\n    be[x] = e;\n    w[e] = z;\n    e++;\n}\nint dis[Size];\nint Start, End;\nint bfs()\n{\n    queue <int> q;\n    mem(dis, -1);\n    q.push(End);\n    dis[End] = 0;\n    while(!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for(int i = be[u]; i != -1; i =nxt[i])\n        {\n            int v = to[i];\n            if(w[i ^ 1] && dis[v] == -1)\n            {\n                dis[v] = dis[u] + 1;\n                q.push(v);\n            }\n        }\n    }\n    return dis[Start] != -1;\n}\nint cur[Size];\nint dfs(int x, int flow)\n{\n    if(x == End) return flow;\n    int k;\n    int ret = 0;\n    for(int i = (cur[x] != -1 ? cur[x] : be[x]); i != -1; i = nxt[i])\n    {\n        int y = to[i];\n        if(dis[y] == dis[x] - 1 && w[i] && (k = dfs(y, min(flow - ret, w[i]))))\n        {\n            w[i] -= k;\n            w[i ^ 1] += k;\n            ret += k;\n            cur[x] = i;\n            if(ret == flow) return ret;\n        }\n    }\n    return ret;\n}\nint dinic()\n{\n    int ans = 0, k;\n    while(bfs())\n    {\n        mem(cur, -1);\n        while((k = dfs(Start, inf)))\n        {\n            ans += k;\n        }\n    }\n    return ans;\n}\nvoid init()\n{\n    mem(be, -1);\n    e = 0;\n}\nint main()\n{\n    init();\n    int n1 = read(), n2 = read(), n3 = read();\n    int m1 = read();\n    REP(i, 1, m1)\n    {\n        int x = read(), y = read();\n        add(y, x + n2, 1);\n        add(x + n2, y, 0);\n    }\n    int m2 = read();\n    REP(i, 1, m2)\n    {\n        int x = read(), y = read();\n        add(x + n1 + n2, y + n1 + n1 + n2, 1);\n        add(y + n1 + n1 + n2, x + n1 + n2, 0);\n    }\n    REP(i, 1, n1)\n    {\n        add(i + n2, i + n1 + n2, 1);\n        add(i + n1 + n2, i + n2, 0);\n    }\n    Start =0;\n    End = n1 + n1 + n2 + n3 + 2;\n    REP(i, 1, n2)\n    {\n        add(Start, i , 1);\n        add(i, Start, 0);\n    }\n    REP(i, 1, n1)\n    {\n        add(i + n1 + n1 + n2, End, 1);\n        add(End, i + n1 + n1 + n2, 0);\n    }\n    printf(\"%d\\n\", dinic());\n    return 0;\n}\n\n```",
        "postTime": 1487471882,
        "uid": 19623,
        "name": "Jason_Yvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41+\u62c6\u70b9\u3002\n\n\u8fd9\u9053\u9898\u4e2d\u65e2\u6709\u4e66\u548c\u7ec3\u4e60\u518c\u7684\u914d\u5bf9\u95ee\u9898\uff0c\u53c8\u6709\u4e66\u548c\u7b54\u6848\u7684\u914d\u5bf9\u95ee\u9898\uff0c\u8fd9\u76f8\u5f53\u4e8e2\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u8fd9\u6837\u6211\u4eec\u60f3\u5230\u5efa\u4e00\u4e2a\u542b\u67093\u5c42\u4e2d\u7ee7\u70b9\u7684\u56fe\uff0c\u5176\u4e2d\u6bcf\u4e00\u5c42\u5206\u522b\u4ee3\u8868\u4e66\u3001\u7b54\u6848\u3001\u7ec3\u4e60\u518c\u3002\n\n\u53c8\u56e0\u4e3a\u4e66\u540c\u65f6\u53c2\u4e0e\u4e24\u79cd\u914d\u5bf9\uff0c\u6240\u4ee5\u628a\u4e66\u653e\u5728\u4e2d\u95f4\uff0c\u7b54\u6848\u548c\u7ec3\u4e60\u518c\u5206\u522b\u9760\u8fd1\u6e90\u70b9\u548c\u6c47\u70b9\uff08\u6211\u505a\u8fd9\u9053\u9898\u65f6\u4ee4\u7ec3\u4e60\u518c\u9760\u8fd1\u6e90\u70b9\uff09\u3002\n\n\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5efa\u7acb\u4e86\u4e00\u4e2a\u5e76\u4e0d\u80fdAC\u7684\u56fe\uff1a\n\n1. \u6e90\u70b9\u5411\u6bcf\u672c\u7ec3\u4e60\u518c\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a1\uff1b\n2. \u6bcf\u672c\u7b54\u6848\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a1\uff1b\n3. \u80fd\u591f\u914d\u5bf9\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff08\u4ece\u9760\u8fd1\u6e90\u70b9\u7684\u70b9\u5411\u9760\u8fd1\u6c47\u70b9\u7684\u70b9\u8fde\u8fb9\uff09\uff0c\u6743\u503c\u4e3a1\uff1b\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u9020\u6210UnAC\u7684\u539f\u56e0\u662f\u4e00\u672c\u4e66\u88ab\u91cd\u590d\u4f7f\u7528\u3002\u8981\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u672c\u4e66\u62c6\u62102\u4e2a\u70b9\uff0c\u4ece\u5de6\u90e8\u70b9\u5411\u5bf9\u5e94\u7684\u53f3\u90e8\u70b9\u8fde\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u8fb9\u3002\u8fd9\u6837\uff0c\u4e00\u672c\u4e66\u88ab\u4f7f\u7528\u4e00\u6b21\u540e\u8fd9\u6761\u8fb9\u5c31\u4f1a\u6ee1\u6d41\uff0c\u4e0d\u4f1a\u518d\u53c2\u4e0e\u5339\u914d\u3002\n\n\u4ee3\u7801\uff08C++11\uff09\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n#define maxn 51200\nchar str;\nint n,m,p;\nint M;\nstruct edge\n{\n\tint to;\n\tint nxt;\n\tint val;\n}nd[5*maxn];\nint head[maxn],cnt;\nint cur[maxn],dep[maxn];\nqueue<int>q;\nint ans;\ntemplate<class X> inline void read(X &x)\n{\n\tx=0;\n\tX f=1;\n\twhile(!isdigit(str))\n\t{\n\t\tif(str=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t}\n\t\tstr=getchar();\n\t}\n\twhile(isdigit(str))\n\t{\n\t\tx*=10;\n\t\tx+=str-'0';\n\t\tstr=getchar();\n\t}\n\tx*=f;\n\treturn;\n}\nvoid init()\n{\n\tmemset(head,-1,sizeof(head));\n\tcnt=0;\n\treturn;\n}\nvoid add(int x,int y,int z)\n{\n\tnd[cnt].to=y;\n\tnd[cnt].nxt=head[x];\n\tnd[cnt].val=z;\n\thead[x]=cnt++;\n\treturn;\n}\nbool bfs(int s,int t)\n{\n\tmemset(dep,0x3f,sizeof(dep));\n\tmemcpy(cur,head,sizeof(cur));\n\twhile(q.size())\n\t{\n\t\tq.pop();\n\t}\n\tq.push(s);\n\tdep[s]=0;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i!=-1;i=nd[i].nxt)\n\t\t{\n\t\t\tint tt=nd[i].to;\n\t\t\tif(dep[tt]==0x3f3f3f3f&&nd[i].val)\n\t\t\t{\n\t\t\t\tdep[tt]=dep[x]+1;\n\t\t\t\tq.push(tt);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=0x3f3f3f3f;\n}\nint dfs(int x,int t,int lim)\n{\n\tif(x==t||!lim)\n\t{\n\t\treturn lim;\n\t}\n\tint ff=0,f;\n\tfor(int i=cur[x];i!=-1;i=nd[i].nxt)\n\t{\n\t\tcur[x]=i;\n\t\tint tt=nd[i].to;\n\t\tif(dep[tt]==dep[x]+1&&(f=dfs(tt,t,min(lim,nd[i].val))))\n\t\t{\n\t\t\tff+=f;\n\t\t\tlim-=f;\n\t\t\tnd[i].val-=f;\n\t\t\tnd[i^1].val+=f;\n\t\t\tif(!lim)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn ff;\n}\nvoid dinic(int s,int t)\n{\n\twhile(bfs(s,t))\n\t{\n\t\tans+=dfs(s,t,0x3f3f3f3f);\n\t}\n\treturn;\n}\nint main()\n{\n\tinit();\n\tread(n),read(m),read(p);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tadd(0,i,1);\n\t\tadd(i,0,0);\n\t}\n\tfor(int i=m+1;i<=m+n;i++)\n\t{\n\t\tadd(i,i+n,1);\n\t\tadd(i+n,i,0);\n\t}\n\tfor(int i=m+2*n+1;i<=m+2*n+p;i++)\n\t{\n\t\tadd(i,m+2*n+p+1,1);\n\t\tadd(m+2*n+p+1,i,0);\n\t}\n\tread(M);\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(y,m+x,1);\n\t\tadd(m+x,y,0);\n\t}\n\tread(M);\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(m+n+x,m+2*n+y,1);\n\t\tadd(m+2*n+y,m+n+x,0);\n\t}\n\tdinic(0,m+2*n+p+1);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1582029270,
        "uid": 158849,
        "name": "renhr2002",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "P1231     \nn1\u672c\u4e66\uff0cn2\u672c\u7ec3\u4e60\u518c\uff0cn3\u672c\u7b54\u6848\uff0c\u6709\u5bf9\u5e94\u5173\u7cfb\uff0c\u6c42\u6700\u5927\u5339\u914d\u3002   \n\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u76f4\u63a5n1,n2,n3\u4e09\u7ec4\u8282\u70b9\u95f4\u5efa\u56fe\uff0cn2\u8fde\u6e90\u70b9\uff0cn3\u8fde\u6c47\u70b9\uff0c\u5bb9\u91cf\u8bbe\u4e3a1\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u6d41\u3002   \n\u53d1\u73b0WA\u4e86\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u80fd\u51fa\u73b0\u4e00\u672c\u4e66\u91cd\u590d\u4f7f\u7528\uff0c\u800c\u8fd9\u79cd\u60c5\u51b5\u662f\u9519\u8bef\u7684\u3002\u89e3\u51b3\u7684\u65b9\u6cd5\u662f\u201c\u62c6\u70b9\u201d\uff0c\u5c06n1\u672c\u4e66\u62c6\u6210\u4e24\u4e2a\u8fde\u4e00\u6761\u8fb9\uff0c\u5c31\u80fd\u4fdd\u8bc1\u4e66\u4e2d\u6d41\u8fc7\u7684\u6d41\u91cf\u4e5f\u662f1\u4e86\u3002  \n\u53e6\u5916\uff0c\u4e0d\u4f18\u5316\u7684Dinic\u53eaA\u4e86\u4e09\u4e2a\u70b9\uff0c\u53c8\u8fdb\u884c\u4e86\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u5c31AC\u4e86\u3002  \n\n\n------------\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<memory.h>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int MAXN=40005;\nconst int MAXM=400005;\nconst int inf=2147483647;\nint n,m,n1,n2,n3,m1,m2,x,y,T,S,ans,dep[MAXN];\nstruct EDGE{\n    int next;\n    int to;\n    int w;\n};\nEDGE g[MAXM*2];\nint head[MAXN]={0},cur[MAXN],nume=-1;\n\ninline void adde(int f,int t,int w){\n    g[++nume].next=head[f];\n    g[nume].to=t;\n    g[nume].w=w;\n    head[f]=nume;\n}\n\ninline int bfs(){\n    memset(dep,0,sizeof(dep));\n    queue<int> q;\n    int now;\n    int i;\n    while(!q.empty())\n        q.pop();\n    q.push(S);\n    dep[S]=1;\n    do{\n        now=q.front();\n        q.pop();\n        for(i=head[now];i!=-1;i=g[i].next)\n            if(g[i].w!=0&&dep[g[i].to]==0){\n                dep[g[i].to]=dep[now]+1;\n                q.push(g[i].to);\n            }\n    }while(!q.empty());\n    if(dep[T]==0)return 0;\n    return 1;\n}\n\nint dfs(int i,int m){\n    int t;\n    if(i==T)\n        return m;\n    for(int& j=cur[i];j!=-1;j=g[j].next)\n        if((dep[g[j].to]==dep[i]+1)&&g[j].w!=0){\n            \n            t=dfs(g[j].to,min(m,g[j].w));\n            if(t>0){\n                g[j].w-=t;\n                g[j^1].w+=t;\n                return t;\n            }\n        }\n    \n    return 0;\n}\n\ninline void dinic(){\n    int t,i;\n    while(bfs()){\n        for (i=1;i<=n;i++)\n            cur[i]=head[i];\n        while(t=dfs(S,inf))\n            ans+=t;\n        \n    }\n}\n\ninline int bo1(int x){\n    return x*4;\n}\n\ninline int bo2(int x){\n    return x*4+1;\n}\n\ninline int ex(int x){\n    return x*4+2;\n}\n\ninline int an(int x){\n    return x*4+3;\n}\n\n\nint main(){\n    int i;\n    memset(head,-1,sizeof(head));\n    nume=-1;\n    \n    scanf(\"%d%d%d\",&n1,&n2,&n3);\n    \n    S=1;\n    n=(max(max(n1,n2),n3)+1)*4;\n    \n    T=n;\n    //printf(\"%d\\n\",T);\n    ans=0;\n    \n    for(i=1;i<=n2;i++){\n        adde(S,ex(i),1);\n        adde(ex(i),S,0);\n    }\n    //source to exercise\n    scanf(\"%d\",&m1);\n    \n    for(i=1;i<=m1;i++){\n        scanf(\"%d%d\",&x,&y);\n        adde(ex(y),bo1(x),1);\n        adde(bo1(x),ex(y),0);\n    }\n    //exercise to book1\n    \n    for(i=1;i<=n1;i++){\n        adde(bo1(i),bo2(i),1);\n        adde(bo2(i),bo1(i),0);\n    }\n    //book1 to book2\n    scanf(\"%d\",&m2);\n    \n    for(i=1;i<=m2;i++){\n        scanf(\"%d%d\",&x,&y);\n        adde(bo2(x),an(y),1);\n        adde(an(y),bo2(x),0);\n    }\n    \n    //book2 to answer\n    \n    for(i=1;i<=n3;i++){\n        adde(an(i),T,1);\n        adde(T,an(i),0);\n    }\n    //answer to sink\n    dinic();\n    printf(\"%d\\n\",ans);\n    \n    \n    return 0;\n}\n\n```",
        "postTime": 1526825397,
        "uid": 71624,
        "name": "Frankenstein",
        "ccfLevel": 4,
        "title": "\u3010\u7f51\u7edc\u6d41\u3011\u6559\u8f85\u7684\u7ec4\u6210"
    },
    {
        "content": "\u7ec3\u4e60\u7f51\u7edc\u6d41\uff0c\u53d1\u73b0\u7f51\u7edc\u6d41\u96be\u5f97\u4e0d\u662f\u5199\u51fa\u6765\u6a21\u677f\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5565\u53d8\u5316\u7684\uff0c\u4f60\u90a3\u4e2adinic\u6253\u51fa\u6765\u8ddf\u6a21\u677f\u53ef\u4ee5\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u4f46\u662f\u96be\u7684\u662f\u5efa\u56fe\u548c\u60f3\u51fa\u6765\u8fd9\u662f\u7f51\u7edc\u6d41\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\uff0c\u5b9e\u9645\u4e0a\u662f\u4e2a\u5339\u914d\u7684\u95ee\u9898\uff0c\u800c\u4e14\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5339\u914d\uff0c\u6240\u4ee5\u6211\u4eec\u624d\u80fd\u628a\u6d41\u91cf\u8bbe\u4e3a1\uff0c\u4ed4\u7ec6\u60f3\u60f3\u7f51\u7edc\u6d41\u7684\u539f\u7406\uff0c\u662f\u5bf9\u8fd9\u5f20\u56fe\u8fdb\u884c\u589e\u5e7f\uff0c\u5982\u679c\u6709\u4e00\u6761\u8def\u80fd\u591f\u4ece\u5934\u8d70\u5230\u5c3e\u5c31\u662f\u4e00\u4e2a\u5339\u914d\uff0c\u5e76\u4e14\u6bcf\u4e00\u6761\u8def\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u90a3\u8fd9\u6837\u60f3\u662f\u4e0d\u662f\u5c31\u89c9\u5f97\u53ef\u4ee5\u7528\u7f51\u7edc\u6d41\u4e86\u5462\uff1f\u56e0\u4e3a\u6d41\u91cf\u90fd\u662f\u4e00\uff0c\u6240\u4ee5\u4e00\u6761\u8def\u589e\u5e7f\u540e\uff0c\u6d41\u91cf\u7684\u589e\u52a0\u4e5f\u4e00\u5b9a\u662f1\uff0c\u56e0\u6b64\u8dd1\u5b8cdinic\u540e\u7684\u7b54\u6848\u5373\u4e3a\u6240\u6c42\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u591a\u6e90\u591a\u6c47\u7684\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\uff0c\u672c\u8eab\u8fd9\u4e24\u4e2a\u70b9\u65e0\u4efb\u4f55\u610f\u4e49\uff0c\u53ea\u662f\u4e3a\u4e86\u8dd1\u7684\u65f6\u5019\u66f4\u65b9\u4fbf\uff0c\u56e0\u4e3a\u4ece\u8d85\u7ea7\u6e90\u70b9\u8dd1\u5230\u8d85\u7ea7\u6c47\u70b9\u662f\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u5176\u4e2d\u4e00\u4e2a\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u90a3\u4e48\u5c31\u6ee1\u8db3\u4e86\u4e4b\u524d\u7684\u8981\u6c42\uff0c\u53c8\u77e5\u9053\u6e90\u70b9\u4e4b\u95f4\u65e0\u6d41\uff0c\u6c47\u70b9\u4e4b\u95f4\u65e0\u6d41\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u8dd1\u3002\n\n\u7136\u540e\u4e3a\u5565\u8981\u628a\u4e66\u5206\u6210\u4e24\u5806\uff1f\u6211\u4e5f\u4e0d\u662f\u5f88\u61c2\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4e0d\u5206\u4e24\u5806\u7684\u8bdd\u4e0d\u597d\u63a7\u5236\u6d41\u91cf\uff1f\u56e0\u4e3a\u8fd9\u6837\u8dd1\u5fc5\u987b\u4fdd\u8bc1\u6bcf\u6b21\u6d41\u90fd\u662f1.\u53cd\u6b63\u5c31\u662f\u7ec3\u4e60\u518c-\u300b\u4e66-\u300b\u4e66\u2014\u300b\u7b54\u6848\uff0c\u53cd\u6b63\u600e\u4e48\u8f93\u5165\u600e\u4e48\u5efa\u56fe= =\n\n\u7136\u540e\u5c31\u662fdinic\u6a21\u677f\uff0c\u6211\u662f\u76f4\u63a5\u80cc\u7684\u6a21\u677f= =\n\n    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define INF 0x3f3f3f\nstruct node\n{\n    int from,to,cap,flow;\n};\nvector<node>edges;\nvector<int>load[1000005];\nint n,m,s,t;\nint cur[1000005];\nint d[1000005];\nvoid add(int u,int v,int w)\n{\n    edges.push_back((node){u,v,w,0});\n    edges.push_back((node){v,u,0,0});\n    int x=edges.size();\n    load[u].push_back(x-2);\n    load[v].push_back(x-1);\n}\nbool bfs()\n{\n    memset(d,0,sizeof(d));\n    queue<int>q;\n    q.push(s);\n    d[s]=1;\n    while(!q.empty())\n    {\n        int u=q.front();q.pop();\n        int x=load[u].size();\n        for(int i=0;i<x;i++)\n        {\n            node &v=edges[load[u][i]];\n            if(!d[v.to]&&v.cap>v.flow)\n            {\n                d[v.to]=d[u]+1;\n                q.push(v.to);\n            }\n        }\n    }\n    return d[t]!=0?1:0;\n}\nint dfs(int u,int mini)\n{\n    if(mini==0||u==t)\n    return mini;\n    int x=load[u].size();\n    int flow=0;\n    for(int &i=cur[u];i<x;i++)\n    {\n        node& v=edges[load[u][i]];\n        int f;\n        if(d[v.to]==d[u]+1&&(f=dfs(v.to,min(mini,v.cap-v.flow)))>0)\n        {\n            v.flow+=f;\n            edges[load[u][i]^1].flow-=f;\n            flow+=f;\n            mini-=f;\n            if(mini==0)break;\n        }\n    }\n    return flow;\n}\nvoid dinic()\n{\n    int ans=0;\n    while(bfs())\n    {\n        memset(cur,0,sizeof(cur));\n        ans+=dfs(s,INF);\n    }\n    printf(\"%d\",ans);\n}\nint n1,n2,n3,m1,m2,m3;\nint main()\n{\n    s=0;\n    scanf(\"%d %d %d\",&n1,&n2,&n3);\n    scanf(\"%d\",&m1);\n    for(int i=1;i<=m1;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        add(y,x+n2,1);\n    }\n    scanf(\"%d\",&m2);\n    for(int i=1;i<=m2;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        add(x+n2+n1,2*n1+n2+y,1);\n    }\n    for(int i=1;i<=n2;i++)\n    {\n        add(0,i,1);\n    }\n    for(int i=1;i<=n1;i++)\n    {\n        add(n2+i,n2+n1+i,1);\n    }\n    int end=n1+n2*2+n3+1;\n    t=end;\n    for(int i=1;i<=n1;i++)\n    {\n        add(n2+2*n1+i,end,1);\n    }\n    dinic();\n}\n```",
        "postTime": 1510229035,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u7ecf\u5178\u3002\u3002\u3002\n\n\u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u5199\u7ed3\u6784\u4f53\u524d\u5411\u661f\uff1f\uff1f\uff1f\n\n\u6765\u4e00\u53d1\u3002\u3002\u3002\n\n\u6ce8\uff1a\n1.\u6570\u7ec4\u5927\u5c0f\u5f0010\u500d\uff0c\u4e0d\u7136\u5c31\u50cf\u697c\u4e0b\u8bf4\u7684\u90a3\u6837\u4f1a WA\u3002\u3002\u3002\n\n2.\u5c06\u6bcf\u4e2a\u4e66\u62c6\u70b9\u3002\n\n3.\u8bdd\u8bf4\u4e00\u5f00\u59cb\u6211\u4ee5\u4e3a\u662f\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff0c\u5341\u5206\u949f\u4e00\u53d1\u5308\u7259\u5229\uff0c\u7ed3\u679c WA \u7684\u5f88\u60e8\u3002\u3002\u3002\n\n\u540e\u6765\u624d\u53d1\u73b0\u6211\u7684\u5308\u7259\u5229\u662f O\uff08n^2\uff09\uff0c\u800c n<=1W \u3002\u3002\u3002\n\n\u6211\u4e5f\u5f88\u60f3\u77e5\u9053\u5b83\u662f\u600e\u4e48 WA \u7684\uff0c\u4e0d\u5e94\u8be5\u662f TLE \u5417\uff1f\uff1f\uff1f\n\n\u4e0d\u8fc7\uff0c\u81f3\u5c11\u5f97\u51fa\u4e00\u70b9\uff1a\u6b64\u9898\u4e0d\u8981\u7528\u5308\u7259\u5229\u3002\u3002\u3002\n\n\u9644\u4e0a Dinic \u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<queue>// STL \u7684\u961f\u5217\uff0c\u61d2\u4eba\u4e13\u7528\uff0c\u61d2\u5230\u4e0d\u60f3\u624b\u5199\u3002\u3002\u3002\n#define MAXN 100010//\u6570\u7ec4\u5927\u5c0f\u5f00 10 \u500d\n#define MAX 999999999//\u6700\u5927\u503c\nusing namespace std;\nint n,m,k,s,t,c=2,ans=0;//\u7ed3\u6784\u4f53\u524d\u5411\u661f\u7684\u8d77\u59cb\u4e0b\u6807\u6211\u4e60\u60ef\u4e8e\u4ece2\u5f00\u59cb\uff0c0\u4e5f\u6ca1\u95ee\u9898\uff0c\u4f46\u4e0d\u80fd\u4ece1\u5f00\u59cb\u3002\u3002\u3002\nint head[MAXN],deep[MAXN];\nstruct node{//\u7ed3\u6784\u4f53\u524d\u5411\u661f\n    int next,to,w;\n}a[MAXN<<1];\ninline int read(){//\u5f31\u5f31\u7684\u8bfb\u4f18\u3002\u3002\u3002\n    int date=0,w=1;char c=0;\n    while(c<='0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\nvoid add(int u,int v,int w){//\u52a0\u8fb9\u5efa\u56fe\n     a[c].to=v;a[c].w=w;\u6b63\u5411\u8fb9\u00b7\n     a[c].next=head[u];\n     head[u]=c++;\n     a[c].to=u;a[c].w=0;//\u53cd\u5411\u8fb9\n     a[c].next=head[v];\n     head[v]=c++;\n}\nbool bfs(){//\u5e7f\u641c\uff0c\u5e94\u8be5\u90fd\u77e5\u9053\u662f \u5206\u5c42 \u7528\u7684\u5427\u3002\u3002\u3002\n     int u,v;\n     queue<int> q;\n     memset(deep,0,sizeof(deep));//\u6e05\u7a7a\n     deep[s]=1;\n     q.push(s);\n     while(!q.empty()){\n                       u=q.front();\n                       q.pop();\n                       for(int i=head[u];i;i=a[i].next){\n                               v=a[i].to;\n                               if(a[i].w&&!deep[v]){//\u679a\u4e3e\u6bcf\u4e00\u6761\u6b63\u5411\u8fb9\n                                                    deep[v]=deep[u]+1;\n                                                    if(v==t)return true;//\u8fbe\u5230\u6c47\u70b9\uff0c\u8bf4\u660e\u6709\u901a\u8def\uff0c\u76f4\u63a5\u8df3\u51fa\uff0c\u5f00\u59cb\u589e\u5e7f\u8def\n                                                    q.push(v);//\u5165\u961f\n                                                    }\n                               }\n                       }\n     return false;//\u82e5\u65e0\u901a\u8def\n}\nint dfs(int x,int limit){//\u589e\u5e7f\u8def\n    if(x==t)return limit;\n    int v,sum,cost=0;\n    for(int i=head[x];i;i=a[i].next){\n            v=a[i].to;\n            if(a[i].w&&deep[v]==deep[x]+1){//\u526a\u679d\n                                           sum=dfs(v,min(limit-cost,a[i].w));//\u9012\u5f52\uff0c\u6c42\u80fd\u589e\u5e7f\u5f97\u6d41\u91cf\n                                           if(sum>0){\n                                                     a[i].w-=sum;\n                                                     a[i^1].w+=sum;//\u201c^\u201d\u6c42\u53e6\u4e00\u6761\u8fb9\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7ed3\u6784\u4f53\u524d\u5411\u661f\u4e0b\u6807\u4e0d\u80fd\u4ece1\u5f00\u59cb\u4e4b\u539f\u56e0\n                                                     cost+=sum;//\u6d41\u91cf\u589e\u52a0\n                                                     if(cost==limit)break;\n                                                     }\n                                           else deep[v]=-1;//\u526a\u679d\n                                           }\n            }\n    return cost;\n}\nint dinic(){//\u5de5\u4f5c\u51fd\u6570 So easy!\n    int ans=0;\n    while(bfs())\n    ans+=dfs(s,MAX);\n    return ans;\n}\nint main(){\n    int f,u,v;\n    n=read();m=read();k=read();//\u8bfb\u5165\n    f=read();\n    for(int i=1;i<=f;i++){\n            u=read();v=read();\n            add(v,u+m,1);//\u4ece\u7b54\u6848\u5411\u4e66\u52a0\u8fb9\n            }\n    f=read();\n    for(int i=1;i<=f;i++){\n            u=read();v=read();\n            add(u+n+m,v+n+n+m,1);//\u4ece\u4e66\u7684\u62c6\u70b9\u5411\u4e60\u9898\u52a0\u8fb9\n            }\n    for(int i=1;i<=n;i++)add(i+m,i+n+m,1);//\u5c06\u4e66\u4e0e\u4e66\u7684\u62c6\u70b9\u8fde\u63a5\n    for(int i=1;i<=m;i++)add(n+m+k+n+1,i,1);//\u6e90\u70b9\u8fde\u5230\u7b54\u6848\n    for(int i=1;i<=k;i++)add(i+n+n+m,n+m+k+n+2,1);//\u4e60\u9898\u8fde\u5230\u6c47\u70b9\n    s=n+m+k+n+1;t=n+m+k+n+2;//\u8bbe\u5b9a\u6e90\u70b9\u4e0e\u6c47\u70b9\u3002\n    printf(\"%d\\n\",dinic());//\u89e3\u51b3\u5e76\u8f93\u51fa\n    while(1);//\u53cd\u6284\u88ad\n    return 0;\n}\n**\u6284\u88ad\u53ef\u803b\uff0c\u9886\u609f\u5149\u8363\uff01\u6284\u88ad\u53ef\u803b\uff0c\u9886\u609f\u5149\u8363\uff01\uff01\u6284\u88ad\u53ef\u803b\uff0c\u9886\u609f\u5149\u8363\uff01\uff01\uff01**\n```",
        "postTime": 1509466041,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    },
    {
        "content": "[\u849f\u84bb\u535a\u5ba2](http://www.cnblogs.com/Mr-WolframsMgcBox/)\n\n\n\u770b\u4e86\u8fd9\u4e48\u591a\u7f51\u7edc\u6d41\u9898\u89e3,\u96be\u9053\u5c31\u6ca1\u6709\u4eba\u7528\u4e8c\u5206\u56fe\u505a\u5417?\n\n\u672c\u9898\u4e0e[P1402\u9152\u5e97\u4e4b\u738b](https://www.luogu.org/problemnew/show/P1402)\u6781\u4e3a\u76f8\u4f3c.\n\n\n\u6709\u591a\u4e2a\u5339\u914d\u6761\u4ef6\u7684\u4e8c\u5206\u56fe\u7684\u505a\u6cd5\n\n\n\u6211\u4eec\u56de\u5fc6\u4e00\u4e0b\u4e8c\u5206\u56fe\u5339\u914d\u7684\u5308\u7259\u5229\u7b97\u6cd5\u7684\u5177\u4f53\u6d41\u7a0b\uff0c\u5b83\u662f\u901a\u8fc7\u5bfb\u627e\u589e\u5e7f\u8def\u6765\u5224\u65ad\u6700\u5927\u5339\u914d\u6570\u7684\uff0c\u6211\u4eec\u518d\u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\u4e2d\u7684\u4e24\u4e2a\u6761\u4ef6\uff0c\u53ea\u6709\u4e24\u4e2a\u6761\u4ef6\u90fd\u6ee1\u8db3\uff0c\u624d\u7b97\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5bfb\u627e\u5224\u65ad\u4e24\u4e2a\u6761\u4ef6\u3002\u5373\u5bf9\u4e24\u4e2a\u4e8c\u5206\u56fe\u4ea4\u66ff\u5339\u914d\uff0c\u53ea\u6709\u4e24\u4e2a\u4e8c\u5206\u56fe\u90fd\u80fd\u627e\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u624d\u7b97\u662f\u4e00\u6b21\u5339\u914d\u5b8c\u6210\u3002\n\n\u5177\u4f53\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003\u9152\u5e97\u4e4b\u738b\u90a3\u9053\u9898.\n",
        "postTime": 1516630098,
        "uid": 45753,
        "name": "Mr_Wolfram",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1231 \u3010\u6559\u8f85\u7684\u7ec4\u6210\u3011"
    }
]