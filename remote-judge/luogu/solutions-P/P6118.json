[
    {
        "content": "\u9996\u5148\uff0c\u5b9a\u4e49\u201c\u70b9 $t$ \u5bf9\u70b9 $u$ \u6709\u8d21\u732e\u201d\u7b49\u4ef7\u4e8e $t$ \u662f $u$ \u7684\u72ec\u7279\u7684\u57ce\u5e02\u3002\n\n\u94a6\u5b9a\u70b9 $u$ \u4e3a\u6839\uff0c\u4ee4\u70b9\u96c6 $L_u$ \u8868\u793a\u5230\u6240\u6709\u5230\u70b9 $u$ \u8ddd\u79bb\u6700\u8fdc\u7684\u53f6\u5b50\u8282\u70b9\u6784\u6210\u7684\u96c6\u5408\uff0c\u5bf9\u70b9 $u$ \u6709\u8d21\u732e\u7684\u70b9\u4e00\u5b9a\u5728 $L_u$ \u4e2d\u6240\u6709\u70b9\u5230 $u$ \u7684\u8def\u5f84\u7684\u4ea4\u4e0a\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6mks5uvn.png)\n\n\u6ce8\u610f\uff0c\u8def\u5f84\u4ea4\u4e0a\u7684\u6240\u6709\u70b9\u5e76\u4e0d\u90fd\u4e00\u5b9a\u5bf9 $u$ \u6709\u8d21\u732e\u3002\n\n\u56e0\u6b64\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\u8003\u8651\u627e\u5230\u968f\u4fbf\u4e00\u4e2a\u70b9 $v$ \u8ddd\u79bb\u70b9 $u$ \u6700\u8fdc\uff0c\u8003\u5bdf $u,v$ \u4e24\u70b9\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u3002\n\n\u800c\u8003\u8651\u79bb\u70b9 $u$ \u6700\u8fdc\u7684\u70b9\uff0c\u53ef\u4ee5\u9009\u4e00\u6761\u76f4\u5f84 $s-t$\uff0c$s,t$ \u4e24\u4e2a\u70b9\u4e2d\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9\u662f\u8ddd\u79bb\u70b9 $u$ \u6700\u8fdc\u7684\u70b9\u3002\n\n\u8fdb\u800c\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u70b9 $rt$\uff0c\u4ee5 $rt$ \u4e3a\u6839\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9 $u$ \u5230 $rt$ \u8def\u5f84\u4e0a\u6240\u6709\u5bf9\u70b9 $u$ \u6709\u8d21\u732e\u7684\u70b9\u7684\u989c\u8272\u6570\u3002\n\n\u5206\u522b\u4ee5 $s,t$ \u4e3a $rt$ \u6c42\u4e00\u904d\u4e0a\u9762\u7684\u95ee\u9898\u5373\u53ef\u3002 \n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u53bb\u6c42\u89e3\u4e0a\u9762\u8f6c\u5316\u540e\u7684\u95ee\u9898\u3002\n\n\u8003\u8651\u4e00\u4e2a\u5728\u70b9 $u$ \u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u70b9 $p$ \u4e0d\u4f1a\u5bf9\u70b9 $u$ \u4ea7\u751f\u8d21\u732e\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\uff1a\u5b58\u5728\u4e00\u4e2a\u70b9 $t$ \u4f7f\u5f97 $t$ \u4e0e $u$ \u7684\u8ddd\u79bb\u7b49\u4e8e $p$ \u4e0e $u$ \u7684\u8ddd\u79bb\uff0c\u6309\u7167\u70b9 $t$ \u7684\u4f4d\u7f6e\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n* $t$ \u5728 $u$ \u5b50\u6811\u5185\u3002\n\n* $t$ \u5728 $u$ \u5b50\u6811\u5916\u3002\n\n\u8003\u8651\u7ef4\u62a4\u51fa\u4e00\u4e2a\u70b9\u96c6 $T_u$\uff0c$\\forall x\\in T_u$ \u6ee1\u8db3\uff1a\n\n* $x$ \u5728\u6839\u8282\u70b9\u5230 $fa[u]$ \u7684\u8def\u5f84\u4e0a\u3002\n\n* \u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9 $t$ \u5728 $u$ \u7684\u5b50\u6811\u5916\uff0c\u4f7f\u5f97 $dist(u,t)=dist(u,x)$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tocapdq1.png)\n\n\u540c\u65f6\u8003\u8651\u70b9\u96c6 $S_u$\uff0c$\\forall x\\in S_u$ \u6ee1\u8db3\uff1a\n\n* $x$ \u5728\u6839\u8282\u70b9\u5230 $u$ \u7684\u8def\u5f84\u4e0a\u3002\n\n* \u4e0d\u5b58\u5728\u4e00\u4e2a\u70b9 $t$ \uff0c\u4f7f\u5f97 $dist(u,t)=dist(u,x)$\u3002\n\n\u5e76\u4e14 $S_u\\subseteq T_u$\uff0c\u5220\u6389 $T_u$ \u4e2d\u6240\u6709\u6ee1\u8db3\u5b58\u5728\u4e00\u4e2a\u70b9 $t$ \u5728 $u$ \u5b50\u6811\u5185\uff0c\u4f7f\u5f97 $dist(u,x)=dist(u,t)$ \u7684\u70b9 $x$ \u5373\u53ef\u5c06 $T_u$ \u201c\u53d8\u6210\u201d $S_u$\u3002\n\n\u8003\u8651 $u$ \u7684\u4e00\u4e2a\u513f\u5b50 $v$\uff0c\u60f3\u8981\u6784\u9020\u51fa $T_v$\uff0c\u9700\u8981\u5bf9 $T_u$ \u8fdb\u884c\u54ea\u4e9b \u201c\u6539\u9020\u201d\uff08\u6216\u8005\u8bf4\u70b9\u96c6\u5982\u4f55\u53d8\u5316\uff09\u3002\n\n$v$ \u7684\u5b50\u6811\u5916\u7b49\u4ef7\u4e8e $fa[v]$ \u7684\u5b50\u6811\u5916\u5e76\u4e0a $v$ \u7684\u5144\u5f1f\u5b50\u6811\n\n* \u5148\u4ee4 $T_v\\gets T_u\\cup \\{u\\}$\u3002\n\n* \u5220\u6389 $T_v$ \u4e2d\u6240\u6709\u6ee1\u8db3\u5b58\u5728\u4e00\u4e2a\u70b9 $t$ \u6ee1\u8db3 $t$ \u5c5e\u4e8e $v$ \u7684\u5144\u5f1f\u7684\u5b50\u6811\u4e2d\uff0c$dist(u,t) = dist(u,x)$ \u7684\u70b9 $x$\u3002\n\n\u800c \u201c\u5220\u6389 $T_v$ \u4e2d\u6240\u6709\u6ee1\u8db3\u5b58\u5728\u4e00\u4e2a\u70b9 $t$ \u6ee1\u8db3 $t$ \u5c5e\u4e8e $v$ \u7684\u5144\u5f1f\u7684\u5b50\u6811\u4e2d\uff0c$dist(u,t) = dist(u,x)$ \u7684\u70b9 $x$\u201d\uff0c\u53ef\u4ee5\u8f6c\u5316\u6210 \u201c\u5220\u6389 $T_v$ \u4e2d\u6240\u6709 $dist(u,x) <= \\text{v \u7684\u6240\u6709\u5144\u5f1f\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6 + 1} $ \u7684\u70b9 $x$\u3002\n\n\u8003\u8651\u5bf9\u8be5\u6811\u505a\u957f\u94fe\u5256\u5206\uff0c\u4ee4\u70b9 $u$ \u7684\u957f\u513f\u5b50\u4e3a $son[u]$\uff0c$\\mathrm{maxdist(u)}$ \u8868\u793a $u$ \u5b50\u6811\u5185\u8ddd\u79bb $u$ \u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\u4e0e $u$ \u7684\u8ddd\u79bb\uff0c$ts[u]$ \u8868\u793a $u$ \u7684\u6b21\u957f\u513f\u5b50\uff0c$\\mathrm{len(u)}=\\mathrm{maxdist(ts[u])}+1$\u3002\n\n\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e $u$ \u7684\u6240\u6709\u975e\u957f\u513f\u5b50\uff0c\u5728\u70b9\u96c6 $T_u\\cup\\{u\\}$ \u4e2d\u8981\u5220\u9664\u7684\u70b9\u96c6\u90fd\u4e00\u6837\u3002\n\n\u800c\u5bf9\u4e8e\u70b9 $u$ \u7684\u957f\u513f\u5b50\uff0c\u8981\u5220\u9664\u7684\u70b9\u96c6\u4e3a $T_u\\cup\\{u\\}$ \u4e2d\u6240\u6709\u6ee1\u8db3 $dist(u,x)\\le \\mathrm{len(u)}$ \u7684\u70b9 $x$\u3002\n\n\u8003\u8651\u5728 DFS \u7684\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u70b9\u96c6 $T_u$\uff0c\u5728\u8fdb\u5165\u5b50\u6811 $u$ \u524d\uff0c\u5168\u5c40\u7ef4\u62a4\u7684\u4fe1\u606f\u5e94\u4e3a $T_u$ \u7684\u4fe1\u606f\u3002\n\n\u8fdb\u5165\u5b50\u6811 $u$ \u540e\u4f9d\u6b21\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n* \u5220\u9664\u5f53\u524d\u5168\u5c40\u7ef4\u62a4\u7684\u70b9\u96c6\u4e2d\u6240\u6709\u6ee1\u8db3 $dist(u,x)\\le \\mathrm{len(u)}$ \u7684\u70b9 $x$\u3002\n\n* \u5728\u5f53\u524d\u5168\u5c40\u7ef4\u62a4\u7684\u70b9\u96c6\u4e2d\u52a0\u5165\u70b9 $u$\u3002\n\n* \u9012\u5f52\u957f\u5b50\u6811\u3002\n\n* \u5220\u6389\u5f53\u524d\u5168\u5c40\u7ef4\u62a4\u7684\u70b9\u96c6\u4e2d\u6240\u6709\u6ee1\u8db3 $dist(u,x)\\le \\mathrm{maxdist(u)}$\uff0c\u5f53\u524d\u5168\u5c40\u7ef4\u62a4\u7684\u70b9\u96c6\u4e3a $S_u$\uff0c\u540c\u65f6\u4e5f\u662f\u5bf9\u4e8e\u4efb\u610f\u8f7b\u513f\u5b50 $v$ \u7684 $T_v$\u3002\n\n* \u4f9d\u6b21\u9012\u5f52\u8f7b\u5b50\u6811,\u5176\u4e2d\u5728\u9012\u5f52\u8f7b\u5b50\u6811\u524d\u9700\u8981\u5c06\u70b9 $u$ \u52a0\u5165\u5168\u5c40\u7ef4\u62a4\u7684\u70b9\u96c6\u4e2d\u3002\n\n* \u5982\u679c\u70b9 $u$ \u5728\u5168\u5c40\u7ef4\u62a4\u7684\u70b9\u96c6\u4e2d\uff0c\u5220\u9664\u70b9 $u$\u3002\n\n\u8fd9\u6837\u64cd\u4f5c\u7684\u5408\u6cd5\u6027\uff1a\n\n\u5728\u9012\u5f52\u957f\u5b50\u6811\u65f6\uff0c\u5728\u957f\u5b50\u6811\u5185\u8fdb\u884c\u7684 \u201c\u5220\u9664\u64cd\u4f5c\u201d\u5f71\u54cd\u5230\u7684 $u$ \u7684\u7956\u5148\uff0c\u81f3\u591a\u5f71\u54cd\u5230 $u$ \u7684 $\\mathrm{maxdist(u)}-2$ \u7ea7\u7956\u5148\uff0c\u800c\u8fd9\u4e9b\u70b9\u5728\u5904\u7406\u8f7b\u5b50\u6811\u4e4b\u524d\u672c\u6765\u5c31\u9700\u8981\u88ab\u5220\u9664\u3002\n\n\u800c\u5728\u9012\u5f52\u975e\u957f\u5b50\u6811 $v$ \u65f6\uff0c\u53ea\u4f1a\u81f3\u591a\u5f71\u54cd $u$ \u7684 $\\mathrm{maxdist(v)}-1$ \u7ea7\u7956\u5148\uff0c\u800c\u8fd9\u4e9b\u7956\u5148\u4e00\u5b9a\u90fd\u88ab\u5220\u5149\u5149\u4e86\uff0c\u56e0\u6b64\u5728\u5904\u7406\u8f7b\u5b50\u6811\u65f6\u4e00\u5b9a\u4e0d\u4f1a\u5f71\u54cd\u5230\u96c6\u5408\u4e2d $u$ \u7684\u7956\u5148\u3002\n\n\u8fd9\u6837\uff0c\u4e00\u4e2a\u5143\u7d20\u81f3\u591a\u8d21\u732e\u513f\u5b50\u4e2a\u6570\u6b21\u603b\u590d\u6742\u7684\u4e3a $O(n)$\u3002",
        "postTime": 1645420688,
        "uid": 317459,
        "name": "RyexAwl",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011P6118 [JOI 2019 Final]\u73cd\u3057\u3044\u90fd\u5e02"
    },
    {
        "content": "\u9996\u5148\uff0c\u4e00\u4e2a\u57ce\u5e02\u7684\u72ec\u7279\u57ce\u5e02\uff08\u4e0b\u79f0\u72ec\u7279\u70b9\uff09\uff0c \u672c\u8d28\u4e0a\u5c31\u662f\u4ee5\u4e00\u4e2a\u70b9\u4e3a\u6839\u65f6\uff0c\u6df1\u5ea6\u552f\u4e00\u7684\u70b9\u3002\n\n\u7136\u540e\uff0c\u6709\u4e00\u4e2a\u663e\u7136\u7684\u6027\u8d28\uff0c \u4e00\u4e2a\u57ce\u5e02\u7684\u72ec\u7279\u70b9\uff0c \u53ea\u4f1a\u5728\u4ee5\u8be5\u70b9\u4e3a\u6839\u65f6\uff0c\u5411\u4e0b\u6700\u957f\u7684\u94fe\u4e0a\uff0c\u4e0d\u7136\u603b\u53ef\u4ee5\u5728\u6700\u957f\u94fe\u4e0a\u627e\u5230\u4e00\u4e2a\u70b9\u4e0e\u5b83\u6df1\u5ea6\u76f8\u540c\u3002\n\n\u63a5\u7740\uff0c\u627e\u5230\u8fd9\u68f5\u6811\u7684\u76f4\u5f84\u3002\u90a3\u4e48\u8be5\u70b9\u5411\u4e0b\u7684\u6700\u957f\u94fe\u5728\u4e00\u5b9a\u662f\u76f4\u5f84\u4e24\u7aef\u70b9\u5230\u8be5\u70b9\u8f83\u957f\u8def\u5f84\u4e0a\uff0c\u4e5f\u5373\u72ec\u7279\u70b9\u53ea\u4f1a\u5728\u5176\u4e2d\u4e00\u6761\u8def\u5f84\u4e0a\u3002\n\n\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u8981\u4ee5\u76f4\u5f84\u4e24\u7aef\u70b9\uff0c\u5404 $dfs$ \u4e00\u6b21\u7edf\u8ba1\u7b54\u6848\uff0c \u53d6\u8f83\u5927\u7684\u5373\u53ef\uff08\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u7b54\u6848\u4e3a $0$)\u3002\n\n\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\uff0c\u5728 $dfs$ \u8fc7\u7a0b\u4e2d\uff0c\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4\u6839\u8282\u70b9\u5230\u8be5\u70b9\u7684\u72ec\u7279\u70b9\uff0c\u518d\u7528\u4e00\u4e2a\u6876\u8bb0\u5f55\u6bcf\u4e2a\u7279\u4ea7\u51fa\u73b0\u6b21\u6570\uff0c\u5728\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6876\u7684\u5927\u5c0f\u3002\n\n\u5982\u4f55\u7ef4\u62a4\u6808\u662f\u5173\u952e\u3002\n\n\u5148\u8003\u8651\u4ee5\u4e00\u4e2a\u6839\u8282\u70b9\u7b2c\u4e00\u6b21 dfs\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u5411\u4e0b\u6700\u957f\u94fe\u548c\u6b21\u957f\u94fe\u957f\u5ea6\uff0c\u5e76\u8bb0\u5f55\u6700\u957f\u94fe\u6240\u5728\u7684\u513f\u5b50\uff0c\u7136\u540e\u7b2c\u4e8c\u904d dfs\n\n\u8fc7\u7a0b\u5982\u4e0b\uff1a\n1. \u5c06\u7236\u8282\u70b9\u5165\u6808\u3002\n2. \u5c06\u6808\u4e2d\u8282\u70b9\u5230\u8be5\u70b9\u8ddd\u79bb $\\leq$ \u8be5\u70b9\u5411\u4e0b\u6b21\u957f\u94fe\u7684\u5f39\u51fa\uff0c\u4e0d\u4f1a\u5bf9\u4efb\u4f55\u70b9\u4ea7\u751f\u5f71\u54cd\u3002\uff08\u6ce8\u610f\u5230\u4e00\u6b21 $dfs$ \u53ea\u8003\u8651\u5f53\u524d\u6839\u8282\u70b9\u5230\u8be5\u70b9\u7684\u72ec\u7279\u70b9\uff09\n3. \u904d\u5386\u6700\u957f\u94fe\u7684\u513f\u5b50\u3002\n4. \u5c06\u6808\u4e2d\u8282\u70b9\u5230\u8be5\u70b9\u8ddd\u79bb $\\leq$ \u8be5\u70b9\u5411\u4e0b\u6700\u957f\u94fe\u7684\u5f39\u51fa\uff0c\u4e0d\u4f1a\u5bf9\u9664\u6700\u957f\u94fe\u4e0a\u70b9\u5916\u4ea7\u751f\u5f71\u54cd\u3002\n5. \u8be5\u70b9\u7b54\u6848\u4e3a\u6876\u7684\u4e0d\u91cd\u5143\u7d20\u4e2a\u6570\n6. \u5904\u7406\u5176\u4ed6\u513f\u5b50\n7. \u56de\u6eaf\uff0c\u5982\u679c\u8be5\u70b9\u4e3a\u53f6\u8282\u70b9\uff0c\u5c06\u7236\u8282\u70b9\u5f39\u51fa\u3002\n\n\n```cpp\n/*\n * @Autor: suiqingying\n * @Date: 2020-11-17 18:38:50\n * @LastEditors: suiqingying\n * @LastEditTime: 2020-11-18 18:59:29\n */\n#include <bits/stdc++.h>\ninline int read()\n{\n    register int x = 0, f = 1;\n    register char c = getchar();\n    while (!isdigit(c))\n    {\n        if (c == '-')\n            f = -1;\n        c = getchar();\n    }\n    while (isdigit(c))\n    {\n        x = x * 10 + c - '0', c = getchar();\n    }\n    return x * f;\n}\nconst int maxn = 2e5 + 10;\nint tot, head[maxn], nxt[maxn << 1], ver[maxn << 1];\nvoid add(int u, int v)\n{\n    ver[++tot] = v;\n    nxt[tot] = head[u];\n    head[u] = tot;\n}\nint c[maxn];\nint rt1, rt2;\nnamespace GetDiameter\n{\n    int maxdep = 0;\n    void dfs(int x, int fa, int dep)\n    {\n        if (dep > maxdep)\n        {\n            rt2 = x;\n            maxdep = dep;\n        }\n        for (int i = head[x]; i; i = nxt[i])\n        {\n            register int y = ver[i];\n            if (y == fa)\n            {\n                continue;\n            }\n            dfs(y, x, dep + 1);\n        }\n    }\n    inline void work()\n    {\n        dfs(1, 0, 1);\n        rt1 = rt2, maxdep = 0;\n        dfs(rt1, 0, 1);\n    }\n} // namespace GetDiameter\nint ans[maxn], cnt[maxn];\nint depth[maxn], md1[maxn], md2[maxn], son[maxn];\nvoid dfs1(int x, int fa)\n{\n    depth[x] = depth[fa] + 1;\n    md1[x] = md2[x] = son[x] = 0;\n    for (register int i = head[x]; i; i = nxt[i])\n    {\n        register int y = ver[i];\n        if (y == fa)\n        {\n            continue;\n        }\n        dfs1(y, x);\n        if (md1[y] > md1[x])\n        {\n            md2[x] = md1[x];\n            md1[x] = md1[y];\n            son[x] = y;\n        }\n        else if (md1[y] > md2[x])\n        {\n            md2[x] = md1[y];\n        }\n    }\n    if (!son[x])\n    {\n        md1[x] = depth[x];\n    }\n}\ninline void addx(register int x)\n{\n    cnt[c[x]]++;\n    if (cnt[c[x]] == 1)\n    {\n        cnt[0]++;\n    }\n}\nint top, s[maxn];\ninline void delx(register int x)\n{\n    cnt[c[x]]--;\n    if (cnt[c[x]] == 0)\n    {\n        cnt[0]--;\n    }\n    // if(cnt[c[s.top()]])\n    top--;\n}\nvoid dfs2(int x, int fa)\n{\n    if (fa)\n    {\n        s[++top] = fa;\n        addx(fa);\n    }\n    while (top && depth[x] - depth[s[top]] <= md2[x] - depth[x])\n    {\n        // <\n        delx(s[top]);\n    }\n    if (son[x])\n    {\n        dfs2(son[x], x);\n    }\n    //ans[x] = std::max(ans[x], cnt[0]);\n    while (top && depth[x] - depth[s[top]] <= md1[x] - depth[x])\n    {\n        delx(s[top]);\n    }\n    ans[x] = std::max(ans[x], cnt[0]);\n    for (register int i = head[x]; i; i = nxt[i])\n    {\n        register int y = ver[i];\n        if (y == fa || y == son[x])\n        {\n            continue;\n        }\n        dfs2(y, x);\n    }\n    if (fa && top && s[top] == fa)\n    {\n        delx(s[top]);\n    }\n}\ninline void solve(register int rt)\n{\n    dfs1(rt, 0), dfs2(rt, 0);\n}\nint main()\n{\n    //    freopen(\"1.in\", \" r\", stdin);\n    register int n = read(), m = read();\n    for (register int i = 1; i < n; ++i)\n    {\n        register int x = read(), y = read();\n        add(x, y), add(y, x);\n    }\n    for (register int i = 1; i <= n; ++i)\n    {\n        c[i] = read();\n    }\n    GetDiameter::work();\n    solve(rt1), solve(rt2);\n    for (register int i = 1; i <= n; ++i)\n    {\n        printf(\"%d\\n\", ans[i]);\n    }\n    return 0;\n}\n",
        "postTime": 1605698926,
        "uid": 104006,
        "name": "\u968f\u60c5\u82f1",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6118 \u3010[JOI 2019 Final]\u73cd\u3057\u3044\u90fd\u5e02\u3011"
    },
    {
        "content": "#### \u95ee\u9898\u6982\u8981\n\n- \u6709\u4e00\u68f5\u6709  $N$  \u4e2a\u9876\u70b9\u7684\u6811\u3002\n\n- \u4f7f\u4e0e\u9876\u70b9  $x$  \u5177\u6709\u552f\u4e00\u8ddd\u79bb\u7684\u9876\u70b9\u6210\u4e3a\u72ec\u7279\u70b9\u3002\n \n- \u5bf9\u4e8e\u6bcf\u4e2a\u9876\u70b9\u56de\u7b54\u72ec\u7279\u57ce\u5e02\u7684\u6807\u7b7e\u7c7b\u578b\u6570\u91cf\u3002\n\n#### \u5bf9\u4e8e  $4\\%$  \u7684\u6570\u636e\n\n\u5bf9\u6bcf\u4e2a\u9876\u70b9\u505a  DFS  \u6216  BFS\u3002\n\n\u53d6\u4e00\u4e2a\u4e0e\u9876\u70b9  $x$  \u8ddd\u79bb\u6700\u5927\u7684\u9876\u70b9\uff0c\u8bbe\u7f6e\u4e3a  $D$\uff0c\u72ec\u7279\u70b9\u5728  $(D,x)$  \u8def\u5f84\u4e0a\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5bf9\u4e8e  $(D,x)$  \u8def\u5f84\uff0c\u627e\u4e00\u68f5\u5728\u9014\u4e2d\u5206\u652f\u7684\u5b50\u6811\uff0c\u5bf9\u4e8e\u5206\u652f\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u5019\u9009\u72ec\u7279\u57ce\u5e02\u6d88\u5931\uff0c\u6700\u540e\u5269\u4e0b\u7684\u9876\u70b9\u90fd\u662f\u72ec\u7279\u70b9\u3002\n\n\u987a\u4fbf\u8bf4\u4e00\u4e0b\uff0c\u8ba9  $D1$  \u548c  $D2$  \u4e3a\u6811\u7684\u76f4\u5f84\u7684\u7aef\u70b9\uff08\u8ddd\u79bb\u6700\u957f\u7684\u4e24\u70b9\u7684\u5bf9\uff09\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u9876\u70b9  $x$\uff0c$D1$  \u548c  $D2$  \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u79bb  $x$  \u6700\u8fdc\u7684\u9876\u70b9\uff0c\n\n\u4ece\u9876\u70b9  $D1$  \u8fdb\u884c  DFS  \u4ee5\u786e\u5b9a\u6bcf\u4e2a\u9876\u70b9  $x$  \u662f\u5426\u5728  $(D1,x)$  \u8def\u5f84\u4e0a\u6709\u72ec\u7279\u70b9\uff0c\u5bf9  $D2$  \u6267\u884c\u76f8\u540c\u7684  DFS  \u4ee5\u83b7\u5f97\u6bcf\u4e2a\u9876\u70b9\u7684\u6b63\u786e\u7b54\u6848\uff0c\n\n\u4ece\u6bcf\u4e2a\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\u5217\u53ef\u4ee5\u770b\u51fa  $(D,x)$  \u8def\u5f84\u4e0a\u7684\u72ec\u7279\u70b9\uff0c\u6bcf\u6b21\u901a\u8fc7  DFS  \u4e2d\u7684\u4e00\u6761\u8fb9\u65f6\uff0c\u6b64\u5217\u90fd\u4f1a\u66f4\u6539\u5176\u540e\u9762\u7684\u6052\u5b9a\u5143\u7d20\u6570\u3002\n\n\u8bbe\u6b64\u5217\u4e3a  $A$\uff0c\u95ee\u9898\u662f\uff1a\n\n\u7ed9\u5b9a\u5f88\u591a\u6539\u53d8  $A$  \u7684\u67e5\u8be2 (\u4f46\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20)\uff0c\u5bf9\u4e8e\u6bcf\u4e2a  $p(1 \\leq p \\leq |A|),p-A_{p} \\leq j<p$\uff0c\u5f53\u6ee1\u8db3\u7684  $j$  \u88ab\u7981\u7528\u65f6\uff0c\u4e0d\u88ab\u7981\u6b62\u7684  $j$  \u7684\u96c6\u5408  $|A|$  \u88ab\u8bbe\u7f6e\u4e3a  $S$\uff0c$S$  \u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a\u72ec\u7279\u70b9\u3002\n\n\u590d\u6742\u5ea6  $O(N^2)$\u3002\n\n#### \u5bf9\u4e8e  $36\\%$  \u7684\u6570\u636e\n\n\u53ea\u6709\u4e00\u79cd\u7c7b\u578b\u7684\u9876\u70b9\u6807\u7b7e\uff0c\u5224\u65ad\u662f\u5426\u6709\u72ec\u7279\u70b9\uff0c\u53ea\u9700\u5224\u65ad  $S$  \u662f\u5426\u4e3a\u7a7a\u3002\n\n\u5f53\u5230\u8fbe  $(D,x)$  \u8def\u5f84\u7684\u9876\u70b9  $x$  \u65f6\uff0c\u4fdd\u7559\u4ece\u5176\u4ed6\u4ee5\u5916\u751f\u957f\u7684\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\u7684\u884c\uff08\u5373\u4fdd\u7559  $A$  \u7ed3\u675f\u7684\u90a3\u4e00\u884c\uff09\uff0c\n\n\u8ba9\u6211\u4eec\u79f0\u4e4b\u4e3a  $A'$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6bd4\u8f83  $S$  \u7684\u6700\u5c0f\u503c\u4e0e\u4ece  $x$  \u751f\u957f\u7684\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\u6765\u627e\u5230\u7b54\u6848\uff0c\n\n\u63d0\u524d\u627e\u5230\u6bcf\u4e2a\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u6cbf\u7740\u8fb9\u7f18\u5411\u4e0b\u65f6\u6dfb\u52a0\u5230  $A'$  \u672b\u5c3e\u7684\u662f\u521a\u521a\u4e0b\u964d\u7684\u5b50\u6811\u7684\u5b50\u6811\u5144\u5f1f\u7684\u6700\u5927\u6df1\u5ea6\u3002\n\n$S$  \u7684\u6700\u5c0f\u503c\u662f\u539f\u96c6\u5408\u6216  $|A'|+1$\uff0c\u53ef\u4ee5  $O(1)$  \u5411\u4e0b\u8d70\u4e00\u6b21\uff0c\n\n\u590d\u6742\u5ea6  $O(N)$\u3002\n\n#### \u5bf9\u4e8e  $68\\%$  \u7684\u6570\u636e\n\n\u6240\u6709\u6807\u7b7e\u90fd\u4e0d\u540c\uff0c\u53ea\u9700\u8981\u77e5\u9053  $|S|$  \u7684\u5927\u5c0f\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a  $p(1 \\leq p \\leq |A|)$  \u4e0d\u8981\u4f7f\u7528\u6ee1\u8db3  $p-A_{p} \\leq j<p$  \u7684  $j$\uff0c\n\n\u4f46\u662f\uff0c\u51c6\u5907\u8f85\u52a9\u6570\u7ec4  $B$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a  $p(1 \\leq p \\leq |A|),B_{j} \\gets B_{j}+1$  \u5176\u4e2d  $j$  \u6ee1\u8db3  $p-A_{p} \\leq j<p$\uff0c\u7136\u540e\uff0c\u8ba1\u7b97  $j$ \u4f7f\u5f97  $B_{j}=0$\u3002\n\n$A$  \u7684\u5143\u7d20\u4fee\u6539\u5bf9\u5e94B\u7684\u533a\u95f4\u52a0\u6cd5\u67e5\u8be2\uff0c\u5982\u679c  $B$  \u7684\u533a\u95f4\u52a0\u6cd5\u548c\u53d8\u4e3a  $0$  \u7684\u5143\u7d20\u7684\u8ba1\u6570\u53ef\u4ee5\u9ad8\u901f\u5b8c\u6210\u66f4\u597d\u3002\n\n\u7531\u4e8e  $B$  \u7684\u5143\u7d20\u603b\u662f  $0$  \u6216\u66f4\u591a\uff0c\u56e0\u6b64\u53ea\u9700\u68c0\u67e5  $\\min\\{B\\}=0$  \u5e76\u8ba1\u7b97   $min$  \u7684\u5143\u7d20\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6bb5\u6811\u6765\u5b8c\u6210\uff0c$O(\\log N)$  \u66f4\u65b0\u4e00\u6b21\uff0c\n\n\u66f4\u65b0\u662f  $N$  \u6b21\uff0c\u6240\u4ee5\u603b\u4f53  $O(N\\log N)$\u3002\n\n#### \u5bf9\u4e8e  $100\\%$  \u7684\u6570\u636e\n\n\u66f4\u6539  $A$  \u7684\u67e5\u8be2\uff08\u4f46\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u5f53\u6d89\u53ca\u5230\u9876\u70b9  $x$  \u65f6\uff0c\u5b83\u6301\u6709  $A'$ \u4ece\u9876\u70b9  $x$  \u8fd4\u56de\u7236\u8282\u70b9\uff0c\u8981\u4fdd\u5b58  $A$\u3002\n\n\u9898\u4e2d\u6709: \u201c\u5f53\u4f60\u5f80\u4e0b\u8d70\u65f6\uff0c\u6dfb\u52a0\u5230  $A'$  \u672b\u5c3e\u7684\u662f\u4f60\u521a\u521a\u4e0b\u964d\u7684\u5b50\u6811\u7684\u5144\u5f1f\u7684\u5b50\u6811\u7684\u6700\u5927\u6df1\u5ea6\u3002\u201d\n\n\u6dfb\u52a0\u5230  $A'$  \u672b\u5c3e\u7684\u5143\u7d20\u5355\u8c03\u589e\u52a0\uff0c\u5f53\u79fb\u52a8\u5230  DFS  \u4e2d\u7684\u5144\u5f1f\u5b50\u6811\u65f6\uff0c\u67e5\u770b  $A$  \u672b\u5c3e\u5143\u7d20\u7684\u53d8\u5316\uff0c\u9664\u4e86  $p$  \u4e4b\u5916\u7684\u5143\u7d20\u53ef\u80fd\u4f1a\u4ece  $S$  \u4e2d\u6d88\u5931\u4f46\u4e0d\u4f1a\u589e\u52a0\uff0c\n\n\u5f53\u8fd4\u56de\u5230\u7236\u8282\u70b9\u7684\u9876\u70b9\u65f6\uff0c\u5982\u679c\u67e5\u770b  $A$  \u672b\u5c3e\u5143\u7d20\u7684\u53d8\u5316\uff0c$S$  \u7684\u5143\u7d20\u53ef\u80fd\u4f1a\u6d88\u5931\u4f46\u4e0d\u4f1a\u589e\u52a0\u3002\n\n\u7531\u4e0a\u53ef\u77e5\uff0c$S$  \u7684\u5143\u7d20\u589e\u52a0\u7684\u6b21\u6570\u4e3a $N$  \u6b21\uff0c\u56e0\u6b64\uff0c\u51cf\u5c11\u6b21\u6570\u53ef\u4ee5\u901a\u8fc7   $O(N)$  \u6765\u5b9e\u73b0\u3002\n\n$S$  \u4e0a\u7684\u64cd\u4f5c\u53ef\u4ee5\u7528\u5806\u6808\u8868\u793a\uff0c\u6240\u4ee5\u6bcf\u6b21  $O(1)$\uff0c\n\n\u5f53  $S$  \u7684\u5143\u7d20\u589e\u52a0\u6216\u51cf\u5c11\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u76f8\u5e94\u9876\u70b9\u7684\u6807\u7b7e\u96c6\u6765\u66f4\u65b0\u6807\u7b7e\u7c7b\u578b\u7684\u6570\u91cf\u3002\n\n\u590d\u6742\u5ea6  $O(N)$\u3002\n\n\n#### AC code:\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll=int64_t;\n\n#define int ll\n#define FOR(i,a,b) for(int i=int(a);i<int(b);i++)\n#define REP(i,b) FOR(i,0,b)\n#define MP make_pair\n#define PB push_back\n#define EB emplace_back\n#define ALL(x) x.begin(),x.end()\nauto& errStream=cerr;\n#ifdef LOCAL\n#define cerr (cerr<<\"-- line \"<<__LINE__<<\" -- \")\n#else\nclass CerrDummy {} cerrDummy;\ntemplate<class T>\nCerrDummy& operator<<(CerrDummy&cd,const T&) {return cd;}\nusing charTDummy=char;\nusing traitsDummy=char_traits<charTDummy>;\nCerrDummy& operator<<(CerrDummy&cd,basic_ostream<charTDummy,traitsDummy>&(basic_ostream<charTDummy,traitsDummy>&)) {return cd;}\n#define cerr cerrDummy\n#endif\n#define REACH cerr<<\"reached\"<<endl\n#define DMP(x) cerr<<#x<<\":\"<<x<<endl\n#define ZERO(x) memset(x,0,sizeof(x))\n#define ONE(x) memset(x,-1,sizeof(x))\n\nusing pi=pair<int,int>;\nusing vi=vector<int>;\nusing ld=long double;\n\ntemplate<class T,class U>\nostream& operator<<(ostream& os,const pair<T,U>& p) {os<<\"(\"<<p.first<<\",\"<<p.second<<\")\";return os;}\n\ntemplate<class T>\nostream& operator <<(ostream& os,const vector<T>& v) {os<<\"{\";REP(i,(int)v.size()) {if(i)os<<\",\";os<<v[i];}os<<\"}\";return os;}\n\ninline ll read() {ll i;scanf(\"%\"  SCNd64,&i);return i;}\n\ninline void printSpace() {printf(\" \");}\n\ninline void printEoln() {printf(\"\\n\");}\n\ninline void print(ll x,int suc=1) {printf(\"%\" PRId64,x);if(suc==1)printEoln();if(suc==2)printSpace();}\n\ninline string readString() {static char buf[3341000];scanf(\"%s\",buf);return string(buf);}\n\ninline char* readCharArray() {\n\tstatic char buf[3341000];\n\tstatic int bufUsed=0;\n\tchar* ret=buf+bufUsed;\n\tscanf(\"%s\",ret);\n\tbufUsed+=strlen(ret)+1;\n\treturn ret;\n}\n\ntemplate<class T,class U>\ninline void chmax(T& a,U b) {if(a<b)a=b;}\n\ntemplate<class T,class U>\ninline void chmin(T& a,U b) {if(b<a)a=b;}\n\ntemplate<class T>\ninline T Sq(const T& t) {return t*t;}\n\nconst ll infLL=LLONG_MAX/3;\n\n#ifdef int\nconst int inf=infLL;\n#else\nconst int inf=INT_MAX/2-100;\n#endif\n\nconst int Nmax=200010;\nvi tr[Nmax];\nint ans[Nmax];\nint col[Nmax],cnt[Nmax],curAns,stBuf[Nmax],stS;\n\ninline void AddCol(int c) {if(cnt[c]==0)curAns++;cnt[c]++;}\n\ninline void DelCol(int c) {cnt[c]--;if(cnt[c]==0)curAns--;}\n\ninline void Push(int v) {stBuf[stS++]=v;AddCol(col[v]);}\n\ninline bool Empty() {return stS==0;}\n\ninline int Last() {return stBuf[stS-1];}\n\ninline void Pop() {DelCol(col[Last()]);stS--;}\n\ninline void dfs1(int v,int p,int d,vi&dist) {\n\tdist[v]=d;\n\tfor(auto to:tr[v])if(to!=p)dfs1(to,v,d+1,dist);\n}\n\nint dep[Nmax];\ninline int dfs2(int v,int p) {\n\tint res=0;\n\tfor(auto to:tr[v])if(to!=p)chmax(res,dfs2(to,v));\n\treturn dep[v]=res+1;\n}\n\ninline void dfs3(int v,int p,const vi&dist) {\n\tvector<pi> ch;\n\tfor(auto to:tr[v]) if(to!=p)ch.EB(dep[to],to);\n\tif(!ch.empty()) {\n\t\tswap(ch[0],*max_element(ALL(ch)));\n\t\tint len=ch.size()>1?max_element(ch.begin()+1,ch.end())->first:0;\n\t\tfor(auto c:ch) {\n\t\t\tint to=c.second;\n\t\t\twhile(!Empty() && dist[Last()]>=dist[v]-len) Pop();\n\t\t\tPush(v);\n\t\t\tdfs3(to,v,dist);\n\t\t\tif(!Empty() && Last()==v) Pop();\n\t\t\tchmax(len,c.first);\n\t\t}\n\t\twhile(!Empty() && dist[Last()]>=dist[v]-len) Pop();\n\t}\n\tchmax(ans[v],curAns);\n}\n\ninline void Solve(int root,const vi&dist) {\n\tassert(Empty());\n\tdfs2(root,-1);\n\tdfs3(root,-1,dist);\n}\n\nsigned main() {\n\tint n=read(),k=read();\n\tint root;\n\tREP(_,n-1) {\n\t\tint a=read()-1,b=read()-1;\n\t\ttr[a].PB(b);\n\t\ttr[b].PB(a);\n\t}\n\tREP(i,n) col[i]=read()-1;\n\tvi dist(n);\n\tdfs1(0,-1,0,dist);\n\troot= max_element(ALL(dist)) - dist.begin();\n\tdfs1(root,-1,0,dist);\n\tSolve(root,dist);\n\troot= max_element(ALL(dist)) - dist.begin();\n\tdfs1(root,-1,0,dist);\n\tSolve(root,dist);\n\tREP(i,n) print(ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1658893836,
        "uid": 353350,
        "name": "wkh2008",
        "ccfLevel": 5,
        "title": "P6118 [JOI 2019 Final]\u73cd\u3057\u3044\u90fd\u5e02 \u9898\u89e3"
    }
]