[
    {
        "content": "\u601d\u8def\uff1a\u5f88\u597d\u7684\u4e00\u9053\u6811\u94fe\u5256\u5206\u3002\u6811\u5256\u540e\uff0c\u7ebf\u6bb5\u6811\u8981\u8bb0\u5f55\u5de6\u7aef\u70b9l,\u53f3\u7aef\u70b9r\uff0c\u5de6\u7aef\u70b9\u7684\u989c\u8272lc,\u53f3\u7aef\u70b9\u7684\u989c\u8272rc,\u533a\u95f4\u6210\u6bb5\u66f4\u65b0\u7684\u6807\u8bb0tag,\u533a\u95f4\n\n\u6709\u591a\u5c11\u989c\u8272\u6bb5\u3002\u533a\u95f4\u5408\u5e76\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5982\u679c\u5de6\u5b50\u6811\u7684\u53f3\u7aef\u548c\u53f3\u5b50\u6811\u7684\u5de6\u7aef\u989c\u8272\u76f8\u540c\u90a3\u4e48\u6570\u91cf\u8981\u51cf\u4e00\u3002\u4f46\u662f\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\u5f53\u524d\u5256\u5230\n\n\u7684\u94fe\u4e0e\u4e0a\u4e00\u6b21\u7684\u94fe\u5728\u76f8\u4ea4\u7684\u8fb9\u7f18\u53ef\u80fd\u989c\u8272\u76f8\u540c\uff0c\u5982\u679c\u989c\u8272\u76f8\u540c\u7b54\u6848\u9700\u8981\u51cf\u4e00\u3002\u6240\u4ee5\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u8981\u8bb0\u5f55\u4e0b\u4e0a\u4e00\u6b21\u5256\u5230\u7684\u94fe\u7684\u5de6\u7aef\n\n\u70b9\u7684\u989c\u8272\uff0c\u4e0e\u5f53\u524d\u5256\u5230\u7684\u94fe\u53f3\u7aef\u70b9\u7684\u989c\u8272\uff08\u56e0\u4e3a\u5728\u5904\u7406\u51fa\u7684\u7ebf\u6bb5\u6811\u4e2d\u8d8a\u9760\u8fd1\u6839\u7684\u70b9\u4f4d\u7f6e\u8d8a\u5de6\uff09\uff0c\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u989c\u8272\uff0c\u82e5\u76f8\u540c\u5219\u7b54\u6848\u51cf\n\n1\u3002\u53c8\u7531\u4e8e\u6709u\u548cv\u4e24\u4e2a\u4f4d\u7f6e\u5728\u5411\u4e0a\u8d70\uff0c\u90a3\u4e48\u8981\u8bb0\u5f55ans1\uff0cans2\u4e24\u4e2a\u53d8\u91cf\u6765\u5b58\u201c\u4e0a\u4e00\u6b21\u7684\u5de6\u7aef\u70b9\u989c\u8272\u201d\u3002\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u5f53\n\ntop[u]=top[v]\u7684\u65f6\u5019\uff0c\u5373\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u91cd\u94fe\u4e0a\u65f6\uff0c\u4e24\u8fb9\u7aef\u70b9\u989c\u8272\u90fd\u8981\u8003\u8651\u4e0e\u5bf9\u5e94ans\u6bd4\u8f83\u989c\u8272\uff0c\u76f8\u540c\u7b54\u6848\u8981\u76f8\u5e94\u51cf\u4e00\u3002\u8be6\u89c1\u4ee3\u7801\uff1a\n\n[cpp] view plain copy print?\n\n/*****\nfile name: bzoj2243.cpp\n\nauthor : 2016gdgzoi334\n\ncreate time: 2017\u5e7408\u670815\u65e5 \u661f\u671f\u4e8c 17\u65f600\u520600\u79d2\n\n*****/\n```cpp\n#include<iostream>  \n#include<cstdio>  \n#include<cstring>  \n#include<queue>  \n#include<set>  \n#include<map>  \n#include<vector>  \n#include<stack>  \n#include<cmath>  \n#include<string>  \n#include<algorithm>  \nusing namespace std;  \ntypedef long long ll;  \nconst int sigma_size=26;  \nconst int N=100+50;  \nconst int MAXN=100000+50;  \nconst int inf=0x3fffffff;  \nconst double eps=1e-8;  \nconst int mod=100000000+7;  \n#define L(x) (x<<1)  \n#define R(x) (x<<1|1)  \n#define PII pair<int, int>  \n#define mk(x,y) make_pair((x),(y))  \nint n,m,edge_cnt,cnt,Lc,Rc;  \nchar str[N];  \nint col[MAXN],head[MAXN],sz[MAXN],dep[MAXN],fa[MAXN],son[MAXN],top[MAXN],pos[MAXN];  \nstruct Edge{  \n    int u,v,next;  \n}edge[MAXN<<1];  \nstruct node{  \n    int l,r;  \n    int num,tag,lc,rc;  \n}segtree[MAXN<<2];  \nvoid init(){  \n    edge_cnt=cnt=0;  \n    memset(head,-1,sizeof(head));  \n}  \nvoid addedge(int u,int v){  \n    edge[edge_cnt].u=u; edge[edge_cnt].v=v;  \n    edge[edge_cnt].next=head[u]; head[u]=edge_cnt++;  \n}  \nvoid dfs1(int u,int pre,int depth){  \n    sz[u]=1; fa[u]=pre; son[u]=0; dep[u]=depth;  \n    for(int i=head[u];i!=-1;i=edge[i].next){  \n        int v=edge[i].v;  \n        if(v == pre)  \n            continue;  \n        dfs1(v,u,depth+1);  \n        sz[u]+=sz[v];  \n        if(sz[son[u]]<sz[v])  \n            son[u]=v;  \n    }  \n}  \nvoid dfs2(int u,int tp){  \n    pos[u]=++cnt; top[u]=tp;  \n    if(son[u]!=0)  \n        dfs2(son[u],top[u]);  \n    for(int i=head[u];i!=-1;i=edge[i].next){  \n        int v=edge[i].v;  \n        if(v == fa[u] || v == son[u])  \n            continue;  \n        dfs2(v,v);  \n    }  \n}  \nvoid push_down(int rt){  \n    if(segtree[rt].tag){  \n        segtree[L(rt)].tag=segtree[R(rt)].tag=segtree[rt].tag;  \n        segtree[L(rt)].num=segtree[R(rt)].num=1;  \n        segtree[L(rt)].lc=segtree[L(rt)].rc=segtree[rt].lc;  \n        segtree[R(rt)].lc=segtree[R(rt)].rc=segtree[rt].lc;  \n        segtree[rt].tag=0;  \n    }  \n}  \nvoid push_up(int rt){  \n    segtree[rt].lc=segtree[L(rt)].lc; segtree[rt].rc=segtree[R(rt)].rc;  \n    int ans=segtree[L(rt)].num+segtree[R(rt)].num;  \n    if(segtree[L(rt)].rc == segtree[R(rt)].lc)  \n        ans--;  \n    segtree[rt].num=ans;  \n}  \nvoid build(int rt,int l,int r){  \n    segtree[rt].l=l; segtree[rt].r=r; segtree[rt].num=0;  \n    if(l == r)  \n        return ;  \n    int mid=(l+r)>>1;  \n    build(L(rt),l,mid); build(R(rt),mid+1,r);  \n}  \nvoid update(int rt,int l,int r,int x){  \n    if(segtree[rt].l == l && segtree[rt].r == r){  \n        segtree[rt].num=segtree[rt].tag=1;  \n        segtree[rt].lc=segtree[rt].rc=x;  \n        return ;  \n    }  \n    push_down(rt);  \n    int mid=(segtree[rt].l+segtree[rt].r)>>1;  \n    if(r<=mid)  \n        update(L(rt),l,r,x);  \n    else if(l>mid)  \n        update(R(rt),l,r,x);  \n    else {  \n        update(L(rt),l,mid,x); update(R(rt),mid+1,r,x);  \n    }  \n    push_up(rt);  \n}  \nint query(int rt,int l,int r,int L,int R){  \n    if(segtree[rt].l == L)  \n        Lc=segtree[rt].lc;  \n    if(segtree[rt].r == R)  \n        Rc=segtree[rt].rc;  \n    if(segtree[rt].l == l && segtree[rt].r == r)  \n        return segtree[rt].num;  \n    push_down(rt);  \n    int mid=(segtree[rt].l+segtree[rt].r)>>1;  \n    if(r<=mid)  \n        return query(L(rt),l,r,L,R);  \n    else if(l>mid)  \n        return query(R(rt),l,r,L,R);  \n    else{  \n        int ans=query(L(rt),l,mid,L,R)+query(R(rt),mid+1,r,L,R);  \n        if(segtree[L(rt)].rc == segtree[R(rt)].lc)  \n            ans--;  \n        return ans;  \n    }  \n    push_up(rt);  \n}  \nint solve(int u,int v,int id,int c){  \n    int ans=0;  \n    if(id == 1){  \n        while(top[u]!=top[v]){  \n            if(dep[top[u]]<dep[top[v]])  \n                swap(u,v);  \n            update(1,pos[top[u]],pos[u],c);  \n            u=fa[top[u]];  \n        }  \n        if(dep[u]>dep[v])  \n            swap(u,v);  \n        update(1,pos[u],pos[v],c);  \n    }  \n    else{  \n        //printf(\"u=%d v=%d pos[u]=%d pos[v]=%d\\n\",u,v,pos[u],pos[v]);  \n        int ans1=-1,ans2=-1; //\u8bb0\u5f55\u4e0a\u6b21\u94fe\u7684\u5de6\u7aef\u7684\u989c\u8272  \n        while(top[u]!=top[v]){  \n            if(dep[top[u]]<dep[top[v]]){  \n                swap(u,v); swap(ans1,ans2);  \n            }  \n            ans+=query(1,pos[top[u]],pos[u],pos[top[u]],pos[u]);  \n            if(Rc == ans1)  \n                ans--;  \n           // printf(\"u=%d top[u]=%d Lc=%d Rc=%d ans=%d\\n\",u,top[u],Lc,Rc,ans);  \n            ans1=Lc; u=fa[top[u]];  \n        }  \n        if(dep[u]<dep[v]){  \n            swap(u,v); swap(ans1,ans2);  \n        }  \n        ans+=query(1,pos[v],pos[u],pos[v],pos[u]);  \n        if(Rc == ans1)  \n            ans--;  \n        if(Lc == ans2)  \n            ans--;  \n        //printf(\"u=%d v=%d Lc=%d Rc=%d ans=%d\\n\",u,v,Lc,Rc,ans);  \n    }  \n    return ans;  \n}  \nint main(){  \n    //freopen(\"in.txt\",\"r\",stdin);  \n    while(~scanf(\"%d%d\",&n,&m)){  \n        init();  \n        for(int i=1;i<=n;i++)  \n            scanf(\"%d\",&col[i]);  \n        for(int i=1;i<n;i++){  \n            int u,v;  \n            scanf(\"%d%d\",&u,&v);  \n            addedge(u,v); addedge(v,u);  \n        }  \n        dfs1(1,1,1); dfs2(1,1); build(1,1,n);  \n        //<F9>printf(\"%d %d\\n\",son[1],son[2]);  \n        /*for(int i=1;i<=n;i++) \n            printf(\"top[i]=%d pos[i]%d\\n\",top[i],pos[i]); \n        printf(\"---------------------------------------\\n\"); \n        printf(\"\\n\");*/  \n        for(int i=1;i<=n;i++)  \n            update(1,pos[i],pos[i],col[i]);  \n        while(m--){  \n            scanf(\"%s\",str);  \n            int u,v;  \n            if(str[0] == 'C'){  \n                int c;  \n                scanf(\"%d%d%d\",&u,&v,&c);  \n                solve(u,v,1,c);  \n            }  \n            else{  \n                int u,v;  \n                scanf(\"%d%d\",&u,&v);  \n                printf(\"%d\\n\",solve(u,v,2,0));  \n                //printf(\"--------------------------------------\\n\");  \n            }  \n        }  \n    }  \n    return 0;  \n}\n```",
        "postTime": 1502807915,
        "uid": 41490,
        "name": "qscqesze_lca",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "# [SDOI2011]\u67d3\u8272\n\n\u8fd9\u9053\u9898\u6709\u4e24\u79cd\u89e3\u6cd5\uff0c\u6811\u5256&LCT\n\u4f46\u662f\u5b9e\u73b0\u65b9\u6cd5\u5374\u622a\u7136\u4e0d\u540c\n\u505a\u5b8c\u672c\u9898\u540e\u5bf9\u6811\u5256\u548cLCT\u4f1a\u6709\u66f4\u6df1\u7684\u8ba4\u8bc6\n\u8ba9\u6211\u4eec\u5145\u5206\u8ba4\u8bc6\u5230\u4e24\u8005\u4e4b\u95f4\u7684\u4f18\u7f3a\u70b9\n\n## \u9898\u89e3 1 -- \u6811\u94fe\u5256\u5206\n\u4f18\u70b9\uff1a\u66b4\u529b\uff0c\u76f4\u63a5\n\n\u7f3a\u70b9\uff1a\u4ee3\u7801\u91cf\u5927\uff0c\u5e38\u6570\u5927\uff08\u6bd5\u7adf\u662f\u4f18\u96c5\u7684\u66b4\u529b\uff09\n\n\u505a\u6cd5\uff1a\n\n**\u4e00\u3001\u7ebf\u6bb5\u6811\uff1a**\n\n\u9700\u8981\u591a\u7ef4\u62a4\u4e24\u4e2a\u503c\uff0clc\u548crc\uff0c\u5206\u522b\u8bb0\u5f55\u53f3\u7aef\n\u70b9\u548c\u5de6\u7aef\u70b9\u7684\u989c\u8272\u3002\n\n\u5728\u5408\u5e76\u4e24\u4e2a\u5b50\u533a\u95f4\u7684\u65f6\u5019\uff0c\u5982\u679c\u5de6\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u989c\u8272=\u53f3\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u989c\u8272\uff0c\u5219\u989c\u8272\u5e26\u6570\u91cf-1\n\n**\u4e8c\u3001\u8def\u5f84\u6c42\u548c**\n\n\u5f53\u7136\u4e0d\u80fdnaive\u5730\u628a\u8def\u5f84\u4e0a\u7684\u989c\u8272\u5e26\u7d2f\u52a0\n\n\u6211\u4eec\u53d1\u73b0\u6811\u5256\u6c42LCA\u662f\u5229\u7528\u4e24\u4e2a\u70b9\u6309\u7167\u6df1\u5ea6\u5411\u4e0a\u8df3\u6700\u540e\u8df3\u5230\u4e00\u8d77\u7684\u65b9\u6cd5\n\n** \u81ea\u4e0b\u800c\u4e0a\uff0c\u6839\u636e\u6df1\u5ea6\u4ea4\u66ff\u5411\u4e0a\u8df3 **\n\n\u800c\u8fd9\u4e2a\u8def\u5f84\u53ef\u4ee5\u770b\u6210\u2018\u4eba\u2019\u5b57\u578b\n\n![](http://images.cnblogs.com/cnblogs_com/tply/1142800/o_graph.png)\n\n\u6211\u4eec\u4e0d\u59a8\u628a\u8fd9\u4e2a\u8def\u5f84\u5206\u6210\u4e24\u8fb9\n\n\u5de6\u8fb9\u548c\u53f3\u8fb9\n\n\u6211\u4eec\u518d\u7528\u53d8\u91cf\n\npos1\u8868\u793a**\u5f53\u524d\u8981\u5f80\u4e0a\u8df3\u7684\u8def\u5f84\\\u4e0a\u6b21\u7684\u7ec8\u70b9\u989c\u8272**\n\npos2\u8868\u793a**\u53e6\u4e00\u6761\u8def\u5f84\\\u4e0a\u4e00\u6b21\u7684\u7ec8\u70b9\u989c\u8272**\n\n\u8fd9\u6837\uff0c\u5982\u679c**\u5f53\u524d\u5f80\u4e0a\u8df3\u7684\u8def\u5f84\\\u8fd9\u6b21\u7684\u8d77\u70b9\u989c\u8272**\u7b49\u4e8e **\u5f53\u524d\u8981\u5f80\u4e0a\u8df3\u7684\u8def\u5f84\\\u4e0a\u6b21\u7684\u7ec8\u70b9\u989c\u8272**\n\u90a3\u4e48\u989c\u8272\u6bb5\u6570\u91cf-1\n\n\u5982\u679c**\u5f53\u524d\u8981\u5f80\u4e0a\u8df3\u7684\u8282\u70b9\u6240\u5728\u8def\u5f84**\u53d1\u751f\u4e86\u6539\u53d8\uff08\u4e5f\u5c31\u662f\u8def\u5f84\u53d1\u751f\u4e86\u4ea4\u66ff\uff09\uff0c\u5219```swap(pos1,pos2)```\n\n\u7136\u540e\u95ee\u9898\u5c31\u843d\u5230\u5982\u4f55\u627e\u8d77\u70b9\u7ec8\u70b9\u989c\u8272\u4e86\n\n\u5f88\u7b80\u5355\uff0c\u8d77\u70b9\u989c\u8272\u5c31\u662f\u7ebf\u6bb5\u6811\u4e0a**\u67e5\u8be2\u7684\u5de6\u7aef\u70b9**\u7684\u989c\u8272\uff0c\u7ec8\u70b9\u989c\u8272\u5c31\u662f**\u67e5\u8be2\u7684\u53f3\u7aef\u70b9**\u7684\u989c\u8272\u3002\n\n\u5728\u5f80\u4e0a\u8df3\uff08\u7ebf\u6bb5\u6811\u67e5\u8be2\uff09\u7684\u65f6\u5019\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0bLc\u548cRc\u5373\u53ef\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <queue>\n\n#define rg register int\n#define ll long long\n#define RG register \n#define il inline\n\nusing namespace std;\n\nil int gi() {\n    rg x=0,o=0;RG char ch=getchar();\n    while(ch!='-'&&(ch<'0'||'9'<ch)) ch=getchar();\n    if(ch=='-') o=1,ch=getchar();\n    while('0'<=ch&&ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return o?-x:x;\n}\n\n#define SZ 1000002\n\nint n,m,pos1,pos2,lc,rc,col[SZ];\nchar ch;\n\nstruct Edge { int to,nxt; }e[SZ<<1];\nint Ehead[SZ],Ecnt=2;\nil void Eadd(rg u,rg v) {\n    e[Ecnt]=(Edge){v,Ehead[u]};\n    Ehead[u]=Ecnt++;\n    e[Ecnt]=(Edge){u,Ehead[v]};\n    Ehead[v]=Ecnt++;\n}\n\nint cnt,fa[SZ],id[SZ],rid[SZ],siz[SZ],dep[SZ],son[SZ],top[SZ];\nil void pou_debug() {\n    for(rg i=1; i<=n; ++i) \n        printf(\"fa:%d id:%d son:%d siz:%d dep:%d top:%d\\n\",fa[i],id[i],son[i],siz[i],dep[i],top[i]);\n    \n}\nvoid dfs1(rg u,rg ff) {\n    fa[u]=ff,dep[u]=dep[ff]+1,siz[u]=1;\n    for(rg v,i=Ehead[u]; i; i=e[i].nxt) {\n        v=e[i].to;\n        if(v==ff) continue;\n        dfs1(v,u);\n        siz[u]+=siz[v];\n        if(siz[v]>siz[son[u]]) son[u]=v;\n    }\n}\t\nvoid dfs2(rg u,rg tp) {\n    top[u]=tp,id[u]=++cnt,rid[cnt]=u;\n    if(!son[u]) return;\n    dfs2(son[u],tp);\n    for(rg v,i=Ehead[u]; i; i=e[i].nxt) {\n        v=e[i].to;\n        if(v==son[u]||v==fa[u]) continue;\n        dfs2(v,v);\n    }\n} \n\n#define lson rt<<1\n#define rson rt<<1|1\nstruct Segtree { int l,r,lc,rc,c,v;  }tr[SZ<<4];\nil void Seg_debug() {\n    for(rg i=1; i<=n*3; ++i) \n        printf(\"#%d : l:%d r:%d lc:%d rc:%d c:%d v:%d\\n\",i,tr[i].l,tr[i].r,tr[i].lc,tr[i].rc,tr[i].c,tr[i].v);\n}\nil void pushup(rg rt) {\n    tr[rt].v=tr[lson].v+tr[rson].v;\n    if(tr[lson].rc==tr[rson].lc) --tr[rt].v;\n    tr[rt].lc=tr[lson].lc;\n    tr[rt].rc=tr[rson].rc;\n}\nil void pushcol(rg rt,rg col) {\n    tr[rt].lc=tr[rt].rc=col;\n    tr[rt].v=1,tr[rt].c=col;\n}\nil void pushdown(rg rt) {\n    if(tr[rt].c) {\n        if(lson) pushcol(lson,tr[rt].c);\n        if(rson) pushcol(rson,tr[rt].c);\n        tr[rt].c=0;\n    }\n}\nvoid build(rg rt,rg l,rg r) {\n    tr[rt].l=l,tr[rt].r=r;\n    if(l==r) {\n        tr[rt].lc=tr[rt].rc=col[rid[l]];\n        tr[rt].v=1;\n        return;\n    }\n    rg mid=l+r>>1;\n    build(lson,l,mid);\n    build(rson,mid+1,r);\n    pushup(rt);\n}\nvoid modify(rg rt,rg L,rg R,rg x) {\n    rg l=tr[rt].l,r=tr[rt].r;\n    if(L<=l&&r<=R) {\n        pushcol(rt,x);\n        return;\n    }\n    pushdown(rt);\n    rg mid=l+r>>1;\n    if(L<=mid) modify(lson,L,R,x);\n    if(R>mid) modify(rson,L,R,x);\n    pushup(rt);\n}\nint query(rg rt,rg L,rg R) {\n    rg l=tr[rt].l,r=tr[rt].r;\t\n    if(L<=l&&r<=R) {\n    \tif(l==L) lc=tr[rt].lc;\n    \tif(r==R) rc=tr[rt].rc;      \n    \treturn tr[rt].v;  \n    }\n    pushdown(rt);\n    rg mid=l+r>>1;\n    if(R<=mid) return query(lson,L,R);\n    if(L>mid)  return query(rson,L,R);\n    rg ret=query(lson,L,R)+query(rson,L,R);\n    if(tr[lson].rc==tr[rson].lc) --ret;\n    return ret; \n}\nil void add(rg u,rg v,rg c) {\n    while(top[u]!=top[v]) {\n        if(dep[top[u]]<dep[top[v]]) swap(u,v);\n        modify(1,id[top[u]],id[u],c);\n        u=fa[top[u]];\n    }\n    if(id[u]>id[v]) swap(u,v);\n    modify(1,id[u],id[v],c);\n}\nil int ask(rg u,rg v) {\n    rg ret=0;\n    pos1=pos2=0;\n    while(top[u]!=top[v]) {\n        if(dep[top[u]]<dep[top[v]]) swap(u,v),swap(pos1,pos2);\t\t\n        ret+=query(1,id[top[u]],id[u]);\n        if(rc==pos1) --ret;\n        pos1=lc,u=fa[top[u]];\n    }\n    if(id[u]>id[v]) swap(u,v),swap(pos1,pos2);\n    ret+=query(1,id[u],id[v]);\n    if(lc==pos1) --ret;\n    if(rc==pos2) --ret; \n    return ret;\n}\n\nint main() {\n    n=gi(),m=gi();\n    for(rg i=1; i<=n; ++i) col[i]=gi();\n    for(rg u,v,i=1; i<n; ++i) \n        u=gi(),v=gi(),Eadd(u,v);\n    dfs1(1,0);\n    dfs2(1,1);\n    build(1,1,n);\n    for(rg a,b,c,i=1; i<=m; ++i) {\n        ch=getchar();\n        while(ch!='C'&&ch!='Q') ch=getchar();\n        if(ch=='C') {\n            a=gi(),b=gi(),c=gi();\n            add(a,b,c);\n        }\n        if(ch=='Q') {\n            a=gi(),b=gi();\n            printf(\"%d\\n\",ask(a,b));\n        }\n    }\n    return 0;\n}\n```\n## \u9898\u89e32--LCT\n\u4f18\u70b9\uff1a\u5e38\u6570\u5c0f\uff0c\u4ee3\u7801\u77ed\n\n\u7f3a\u70b9\uff1a\u96be\u60f3\uff0c\u96be\u5b9e\u73b0\uff0c\u7ec6\u8282\u591a\n\n\u505a\u6cd5\uff1a\n\n\u6211\u4eec\u8003\u8651\u628a\u8fde\u63a5\u4e0d\u540c\u8272\u70b9\u7684\u8fb9\u6743\u503c\u8bbe\u4e3a1,\u8fde\u63a5\u540c\u8272\u7684\u70b9\u7684\u8fb9\u6743\u8bbe\u4e3a0\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u67e5\u8be2\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\u6743\u548c\uff0c\u4f60\u8981\u8f93\u51fa\u7684\u5c31\u662f\u8fd9\u4e2a\u7b54\u6848\u52a0\u4e00\n\n\u5bf9\u4e8e\u7ef4\u62a4\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2asplay\u8282\u70b9\u4e00\u4e2a\u6700\u5de6\u7aef\u70b9\u7684\u503c\u548c\u6700\u53f3\u7aef\u70b9\u7684\u989c\u8272\uff0c\u8fd9\u6837\uff0c\u5bf9\u4e8e\u5b83\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u627e\u5230\u5176\u524d\u9a71\u4e0e\u540e\u7ee7\u7684\u989c\u8272\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u7d2f\u8ba1\u5b83\u8ddf\u524d\u9a71\u540e\u7ee7\u6240\u8fde\u8fb9\u7684\u6743\u503c\u548c\u4e86\u3002\n\n\u524d\u9a71=\u5de6\u513f\u5b50\u6700\u53f3\u7aef\u70b9\uff0c\u540e\u7ee7=\u53f3\u513f\u5b50\u6700\u5de6\u7aef\u70b9\n\n** \u6ce8\u610f\uff1a\u533a\u95f4\u53cd\u8f6c\u65f6\u6700\u5de6\u548c\u6700\u53f3\u7aef\u70b9\u4e5f\u8981\u53cd\u8f6c **\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <queue>\n\n#define rg register int\n#define ll long long\n#define RG register \n#define il inline\n\nusing namespace std;\n\nil int gi() {\n    rg x=0,o=0;RG char ch=getchar();\n    while(ch!='-'&&(ch<'0'||'9'<ch)) ch=getchar();\n    if(ch=='-') o=1,ch=getchar();\n    while('0'<=ch&&ch<='9') x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n    return o?-x:x;\n}\n#define SZ 1000010\nint n,m;\nchar ch;\n\n#define lson tr[x].ch[0]\n#define rson tr[x].ch[1]\nstruct Splaytree { int w,c,lc,rc,tag,rev,fa,ch[2]; }tr[SZ];\nint stk[SZ],top;\n\nil bool isroot(rg x) { return tr[tr[x].fa].ch[0]!=x&&tr[tr[x].fa].ch[1]!=x; }\n\nil void pushdown(rg x) {\n    if(tr[x].rev) {\n        swap(lson,rson);\n        swap(tr[lson].lc,tr[lson].rc);\n        swap(tr[rson].lc,tr[rson].rc);\n        tr[lson].rev^=1,tr[rson].rev^=1;\n        tr[x].rev=0;\n    }\n    if(tr[x].tag) {\n        tr[x].lc=tr[x].rc=tr[x].c=tr[x].tag;\n        tr[lson].tag=tr[rson].tag=tr[x].tag;\n        tr[x].w=tr[x].tag=0;\n    }\n}\n\nil void pushup(rg x) {\n    pushdown(lson),pushdown(rson);\n    tr[x].w=tr[lson].w+tr[rson].w;\n    if(lson) {\n        tr[x].lc=tr[lson].lc;\n        if(tr[x].c!=tr[lson].rc) ++tr[x].w;\n    }\n    else tr[x].lc=tr[x].c;\n    if(rson) {\n        tr[x].rc=tr[rson].rc;\n        if(tr[x].c!=tr[rson].lc) ++tr[x].w;\n    }\n    else tr[x].rc=tr[x].c;\n}\n\nil void rotate(rg x) {\n    rg y=tr[x].fa,z=tr[y].fa;\n    rg k=tr[y].ch[1]==x;\n    if(!isroot(y)) tr[z].ch[tr[z].ch[1]==y]=x;  tr[x].fa=z;\n    tr[y].ch[k]=tr[x].ch[k^1],tr[tr[x].ch[k^1]].fa=y;\n    tr[x].ch[k^1]=y,tr[y].fa=x;\n    pushup(y);\n}\n\nil void splay(rg x) {\n    stk[top=1]=x;\n    for(rg i=x; !isroot(i); i=tr[i].fa) stk[++top]=tr[i].fa;\n    while(top) pushdown(stk[top--]);\n    while(!isroot(x)) {\n        rg y=tr[x].fa,z=tr[y].fa;\n        if(!isroot(y))\n            (tr[y].ch[0]==x)^(tr[z].ch[0]==y)?rotate(x):rotate(y);\n        rotate(x);\t\n    }\n    pushup(x);\n}\n\nil void access(rg x) {\n    for(rg y=0; x; y=x,x=tr[x].fa) splay(x),rson=y,pushup(x);\n}\n\nil void makeroot(rg x) {\n    access(x),splay(x),tr[x].rev^=1;\n}\n\nil int findroot(rg x) {\n    access(x),splay(x);\n    while(lson) x=lson;\n    return x;\n}\n\nil void split(rg x,rg y) {\n    makeroot(x),access(y),splay(y);\n}\n\nil void link(rg x,rg y) {\n    makeroot(x),tr[x].fa=y;\n}\n\nint main() {\n    n=gi(),m=gi();\n    for(rg i=1; i<=n; ++i) tr[i].c=tr[i].lc=tr[i].rc=gi();\n    for(rg u,v,i=1; i<n; ++i) u=gi(),v=gi(),link(u,v);\n    for(rg a,b,c,i=1; i<=m; ++i) {\n        ch=getchar();\n        while(ch!='C'&&ch!='Q') ch=getchar();\n        if(ch=='C') {\n            a=gi(),b=gi(),c=gi();\n            split(a,b);\n            tr[b].tag=c;\n        }\n        if(ch=='Q') {\n            a=gi(),b=gi();\n            split(a,b);\n            printf(\"%d\\n\",tr[b].w+1);\n        }\n    }\n    return 0;\n}\n```\n[\u535a\u5ba2\u94fe\u63a5](http://www.cnblogs.com/tply/p/8798904.html)",
        "postTime": 1523454005,
        "uid": 48618,
        "name": "yyb_test",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u6811\u5256\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff1a\n\n\u6570\u7ec4tot[N]\u8868\u793a\u6b64\u65f6\u7684\u989c\u8272\u6bb5\u6570\u3002\n\n\u6570\u7ec4zzz[N]\u8868\u793a\u6b64\u65f6\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u7684\u989c\u8272\u3002\n\n\u6570\u7ec4yyy[N]\u8868\u793a\u6b64\u65f6\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u7684\u989c\u8272\u3002\n\n\n\u5219\uff1a\n\u9996\u5148\u6211\u4eec\u8981\u660e\u786e\uff0c\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u53ea\u6709\u4e00\u79cd\u989c\u8272\uff0c\u4e5f\u5c31\u662f\u4e00\u6761\u989c\u8272\u6bb5\u3002\n\ntot[\u7236\u4eb2]=tot[\u5de6\u513f\u5b50]+tot[\u53f3\u513f\u5b50]\uff1b\n\nif (zzz[\u53f3\u513f\u5b50]==yyy[\u5de6\u513f\u5b50]) {tot[\u7236\u4eb2]--;}\n\n\u5373\u5982\u679c\u53f3\u513f\u5b50\u7684\u6700\u5de6\u8fb9\u989c\u8272\u548c\u5de6\u513f\u5b50\u7684\u6700\u53f3\u8fb9\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u4e2d\u95f4\u90e8\u5206\u5c5e\u4e8e\u540c\u4e00\u989c\u8272\u6bb5\u3002\n\n\n\u4ee3\u7801\uff1a\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n```cpp\n    //fushao zuishuai\n    #include <cstdio>\n    #include <cstring>\n    #include <iostream>\n    #define k (z+y>>1)\n    #define ll (r<<1)\n    #define rr (r<<1|1)\n    using namespace std;\n    const int N=1e5+10;int a[N];\n    int ys[N],s[N*2][2],o[N],cnt,dfn,n;\n    int zzz[N*4],yyy[N*4],laz[N*4],tot[N*4];\n    int d[N],siz[N],son[N],top[N],f[N],id[N];\n    void jia(int a,int b)\n    {\n        s[++cnt][1]=o[a];\n        s[cnt][0]=b;o[a]=cnt;\n        return;\n    }\n    void shang(int r)\n    {\n        tot[r]=tot[ll]+tot[rr];\n        zzz[r]=zzz[ll];yyy[r]=yyy[rr];\n        if (zzz[rr]==yyy[ll]) tot[r]--;\n        return;\n    }\n    void xiangxia(int r,int z,int y)\n    {\n        tot[ll]=tot[rr]=1;\n        zzz[ll]=zzz[rr]=yyy[ll]=yyy[rr]=laz[ll]=laz[rr]=laz[r];\n        laz[r]=0;return;\n    }\n    void jianshu(int r,int z,int y)\n    {\n        if (z==y) {\n            tot[r]=1;zzz[r]=yyy[r]=ys[a[z]];\n            return;\n        }\n        jianshu(ll,z,k);jianshu(rr,k+1,y);\n        shang(r);return;\n    }\n    void gai(int r,int z,int y,int zz,int yy,int v)\n    {\n        if (z==zz&&y==yy) {\n            tot[r]=1;laz[r]=zzz[r]=yyy[r]=v;\n            return;\n        }\n        if (laz[r]) xiangxia(r,z,y);\n        if (zz>k) gai(rr,k+1,y,zz,yy,v);\n        else if (yy<=k) gai(ll,z,k,zz,yy,v);\n        else {gai(ll,z,k,zz,k,v);gai(rr,k+1,y,k+1,yy,v);}\n        shang(r);return;\n    }\n    int chaxun(int r,int z,int y,int zz,int yy)\n    {\n        if (z==zz&&y==yy) return tot[r];\n        if (laz[r]) xiangxia(r,z,y);\n        if (zz>k) chaxun(rr,k+1,y,zz,yy);\n        else if (yy<=k) chaxun(ll,z,k,zz,yy);\n        else {\n            int ans=chaxun(ll,z,k,zz,k)+chaxun(rr,k+1,y,k+1,yy);\n            if (zzz[rr]==yyy[ll]) ans--;\n            return ans;\n        }\n    }\n    void dfs1(int x,int fa,int dep)\n    {\n        f[x]=fa;d[x]=dep;siz[x]=1;\n        for (int i=o[x];i;i=s[i][1]) {\n            if (s[i][0]!=fa) {\n                dfs1(s[i][0],x,dep+1);\n                siz[x]+=siz[s[i][0]];\n                if (siz[s[i][0]]>siz[son[x]]) son[x]=s[i][0];\n            }\n        }\n        return;\n    }\n    void dfs2(int x,int tp)\n    {\n        top[x]=tp;id[x]=++dfn;a[dfn]=x;\n        if (son[x]) dfs2(son[x],tp);\n        for (int i=o[x];i;i=s[i][1])\n        if (s[i][0]!=f[x]&&son[x]!=s[i][0])\n        dfs2(s[i][0],s[i][0]);\n        return;\n    }\n    void ranse(int x,int y,int v)\n    {\n        while (top[x]!=top[y]) {\n            if (d[top[x]]>d[top[y]]) swap(x,y);\n            gai(1,1,n,id[top[y]],id[y],v);\n            y=f[top[y]];\n        }\n        if (d[x]>d[y]) swap(x,y);\n        gai(1,1,n,id[x],id[y],v);\n        return;\n    }\n    int newww(int r,int z,int y,int p)\n    {\n        if (z==y) return zzz[r];\n        if (laz[r]) xiangxia(r,z,y);\n        if (p>k) return newww(rr,k+1,y,p);\n        else return newww(ll,z,k,p);\n    }\n    int xunwen(int x,int y)\n    {\n        int ans=0,nc,fc;\n        while (top[x]!=top[y]) {\n            if (d[top[x]]>d[top[y]]) swap(x,y);\n            ans+=chaxun(1,1,n,id[top[y]],id[y]);\n            nc=newww(1,1,n,id[top[y]]);\n            fc=newww(1,1,n,id[f[top[y]]]);\n            y=f[top[y]];if (nc==fc) ans--;\n        }\n        if (d[x]>d[y]) swap(x,y);\n        ans+=chaxun(1,1,n,id[x],id[y]);\n        return ans?ans:1;\n    }\n    int main()\n    {\n        int m,a,b,c;\n        cin>>n>>m;char caozuo[5];\n        for (int i=1;i<=n;i++) scanf(\"%d\",&ys[i]);\n        for (int i=1;i<n;i++) {\n            scanf(\"%d%d\",&a,&b);jia(a,b);jia(b,a);\n        }\n        dfs1(1,0,1);dfs2(1,1);jianshu(1,1,n);\n        while (m--) {\n            scanf(\"%s\",caozuo);\n            scanf(\"%d%d\",&a,&b);\n            switch (caozuo[0]) {\n                case 'C':scanf(\"%d\",&c);\n                ranse(a,b,c);break;\n```\ndefault:\n\n```cpp\n                printf(\"%d\\n\",xunwen(a,b));break;\n            }\n        }\n        //zhu wo zao dian AC!!!\n        return 0;\n    }\nok!!!\n```",
        "postTime": 1515760387,
        "uid": 45781,
        "name": "fyfy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "## \u8f7b\u91cd\u94fe\u5256\u5206\n\n### \u601d\u8def\n\n\u672c\u9898\u7684\u601d\u7ef4\u96be\u5ea6\u5f88\u5c0f\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u989c\u8272\u6bb5\u6570\uff0c\u91cd\u70b9\u5728\u5982\u4f55\u5b9e\u73b0\u53bb\u91cd\u3002\n\n\u73b0\u6709\u7684\u8f7b\u91cd\u94fe\u5256\u5206\u9898\u89e3\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u5f00\u4e86\u7a7a\u95f4\u5927\u5c0f\u4e3a 4 \u500d\u7684 $\\mathtt{lc,rc}$ \u6570\u7ec4\uff0c\u5206\u522b\u7ef4\u62a4\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u989c\u8272\uff0c\u5176\u5b9e\u6839\u672c\u6ca1\u6709\u5fc5\u8981\uff0c\n\n\u4e00\u4e2a 1 \u500d\u7a7a\u95f4\u7684 $\\mathtt{col}$ \u6570\u7ec4\u8db3\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u4e14\u8d3c\u597d\u5199\u3002\n\n1. **\u7ebf\u6bb5\u6811\u4e0a\u5408\u5e76\u65f6\u7684\u53bb\u91cd**\uff08\u5de6\u513f\u5b50\u53f3\u7aef\u70b9 \u548c \u53f3\u513f\u5b50\u5de6\u7aef\u70b9\uff09\n\n\u6211\u4eec\u7528 $\\mathtt{sum[i]}$ \u8868\u793a $i$ \u6240\u7ba1\u8f96\u533a\u95f4\u5185\u7684\u989c\u8272\u6bb5\u6570\u3002\u82e5 $i$ \u6240\u7ba1\u8f96\u7684\u533a\u95f4\u4e3a $\\mathtt{[l,r]}$\uff0c\u90a3\u4e48\u5de6\u513f\u5b50\u7ba1\u8f96\u533a\u95f4\u4e3a $\\mathtt{[l,mid]}$\uff0c\u53f3\u513f\u5b50\u7ba1\u8f96\u533a\u95f4\u4e3a $\\mathtt{[mid+1,r]}$\uff0c\u6211\u4eec**\u60f3\u8981\u5224\u65ad\u5408\u5e76\u65f6\u4f1a\u4e0d\u4f1a\u8ba1\u91cd\uff0c\u5176\u5b9e\u53ea\u662f\u60f3\u77e5\u9053 $\\mathtt{col[mid]}$ \u662f\u5426\u7b49\u4e8e $\\mathtt{col[mid+1]}$**\uff1b\n\n\u8fd9\u6837\u7684\u597d\u5904\u662f\uff1a**\u4e0a\u65b9\u7684\u8282\u70b9\u4e0d\u7528\u7ee7\u627f\u513f\u5b50\u7684\u989c\u8272**\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u8981\u77e5\u9053 $i$ \u7684\u7ba1\u8f96\u533a\u95f4\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5de6\u53f3\u7aef\u70b9\u7684\u989c\u8272\u3002\n\n\u540c\u6837\u7684\uff0c\u61d2\u6807\u8bb0\u4e0b\u4f20\u65f6\uff0c\u53ea\u9700\u8981\u5c06\u5de6\u513f\u5b50\u53f3\u7aef\u70b9 $\\mathtt{col[mid]}$ \u548c\u53f3\u513f\u5b50\u5de6\u7aef\u70b9 $\\mathtt{col[mid+1]}$ \u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\u3002\n\n2. **\u91cd\u94fe\u8df3\u8dc3\u65f6\u7684\u53bb\u91cd**\uff08\u91cd\u94fe\u8fde\u63a5\u5904 \u5373 \u8f7b\u94fe\u4e24\u7aef\u70b9\uff09\n\n\u5927\u90e8\u5206\u9898\u89e3\u90fd\u901a\u8fc7\u8bb0\u5f55\u4e0a\u6b21\u8df3\u8dc3\u4f4d\u7f6e\u5b9e\u73b0\uff0c\u4e4b\u6240\u4ee5\u8981\u8bb0\u5f55\u4e0a\u6b21\u8df3\u7684\u4f4d\u7f6e\uff0c\u662f\u56e0\u4e3a**\u7531\u4e8e\u6709\u61d2\u6807\u8bb0\uff0c\u53ea\u6709\u67e5\u8be2\u540e\u7684\u989c\u8272\u624d\u662f\u6b63\u786e\u7684\uff08\u8be5\u4e0b\u653e\u7684\u90fd\u4e0b\u653e\u4e86\uff09\u3002**\n\n\u5176\u5b9e\u6709\u4e00\u79cd\u66f4\u597d\u5199\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5168\u90e8\u67e5\u5b8c\u540e\uff0c\u91cd\u65b0\u8df3\u4e00\u904d\u6765\u5224\u65ad\u91cd\u94fe\u8fde\u63a5\u5904\uff0c\u8be6\u89c1\u4ee3\u7801\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\nconst int maxn = 100005;\nint n, m, o[maxn], col[maxn];\nvector<int> e[maxn];\nint dep[maxn], fa[maxn], son[maxn], size[maxn];//dfs1\nint dfn[maxn], top[maxn], clk;//clk:dfs_clock dfs2\nstruct SegTree {\n\tint sum[maxn<<2], tag[maxn<<2];\n\t#define ls i<<1\n\t#define rs i<<1|1\n\tinline void push_up(int i, int mid) { \n\t\tsum[i] = sum[ls] + sum[rs];\n\t\tif(col[mid] == col[mid+1]) --sum[i];\n\t}\n\tinline void push_down(int i, int mid) {\n\t\ttag[ls] = tag[rs] = col[mid] = col[mid+1] = tag[i];\n\t\tsum[ls] = sum[rs] = 1;\n\t\ttag[i] = 0;\n\t}\n\tvoid build(int i, int l, int r) {\n\t\tif(l == r) { sum[i] = 1; return; }\n\t\tint mid = (l+r) >> 1;\n\t\tbuild(ls, l, mid);\n\t\tbuild(rs, mid+1, r);\n\t\tpush_up(i, mid);\n\t}\n\tvoid ins(int i, int l, int r, int x, int y, int k) {\n\t\tif(x <= l and r <= y) { sum[i] = 1; col[l] = col[r] = tag[i] = k; return; }\n\t\tint mid = (l+r) >> 1;\n\t\tif(tag[i]) push_down(i, mid);\n\t\tif(x <= mid) ins(ls, l, mid, x, y, k);\n\t\tif(y > mid) ins(rs, mid+1, r, x, y, k);\n\t\tpush_up(i, mid);\n\t}\n\tint query(int i, int l, int r, int x, int y) {\n\t\tif(x <= l and r <= y) return sum[i];\n\t\tint mid = (l+r) >> 1, ans = 0;\n\t\tif(tag[i]) push_down(i, mid);\n\t\tif(x <= mid) ans = query(ls, l, mid, x, y);\n\t\tif(y > mid) ans += query(rs, mid+1, r, x, y);\n\t\tif(x <= mid and y > mid and col[mid] == col[mid+1]) --ans;\n\t\treturn ans;\n\t}\n} t;\nvoid dfs1(int u, int f) {\n\tfa[u] = f;\n\tdep[u] = dep[f] + 1;\n\tsize[u] = 1;\n\tfor(auto v : e[u])\n\t\tif(v != f) {\n\t\t\tdfs1(v, u);\n\t\t\tsize[u] += size[v];\n\t\t\tif(size[v] > size[son[u]]) son[u] = v;\n\t\t} \n}\nvoid dfs2(int u, int topf) {\n\tdfn[u] = ++clk;\n\tcol[clk] = o[u];\n\ttop[u] = topf;\n\tif(!son[u]) return;\n\tdfs2(son[u], topf);\n\tfor(auto v : e[u])\n\t\tif(!dfn[v]) dfs2(v, v);\n}\nvoid modify(int x, int y, int k) {\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tt.ins(1, 1, n, dfn[top[x]], dfn[x], k);\n\t\tx = fa[top[x]];\n\t}\n\tif(dfn[x] > dfn[y]) swap(x, y);\n\tt.ins(1, 1, n, dfn[x], dfn[y] ,k);\n}\nint inquire(int x, int y) {\n\tint u = x, v = y, ans = 0;//\u8bb0\u5f55 x,y \u56e0\u4e3a\u8fd8\u8981\u8df3\u7b2c\u4e8c\u6b21\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tans += t.query(1, 1, n, dfn[top[x]], dfn[x]);\n\t\tx = fa[top[x]];\n\t}\n\tif(dfn[x] > dfn[y]) swap(x, y);\n\tans += t.query(1, 1, n, dfn[x], dfn[y]);\n\twhile(top[u] != top[v]) {\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tif(col[dfn[top[u]]] == col[dfn[fa[top[u]]]]) --ans;\n\t\tu = fa[top[u]];//top[u] \u548c fa[top[u]] \u662f\u8f7b\u94fe\u7aef\u70b9\n\t}\n\treturn ans;\n}\nchar c[2];\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 1; i <= n; ++i) scanf(\"%d\", &o[i]);\n\tfor(int i = 1, u, v; i <= n; ++i)\n\t\tscanf(\"%d %d\", &u, &v), e[u].push_back(v), e[v].push_back(u);\n\tdfs1(1, 1);\n\tdfs2(1, 1);\n\tt.build(1, 1, n);\n\tfor(int i = 1, x, y, k; i <= m; ++i) {\n\t\tscanf(\"%s %d %d\", c, &x, &y);\n\t\tif(c[0] == 'C') scanf(\"%d\", &k), modify(x, y, k);\n\t\telse printf(\"%d\\n\", inquire(x, y));\n\t}\n}\n```",
        "postTime": 1562066708,
        "uid": 135658,
        "name": "emptysetvvvv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u8f6c\u81ea\uff1ahttp://www.cnblogs.com/xzz_233/p/bzoj2243.html\n\n\n~~\u5b66\u5b8cLCT\u540e\u8d76\u811a\u6811\u5256\u5fd8\u5149\u5149\u4e86~~\n\n\nLCT\u677f\u5b50\u9898~~LCT\u7684\u5168\u662f\u677f\u5b50\u9898~~\n\n\n\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u533a\u95f4\u6700\u5de6\u8fb9\u7684\u989c\u8272lcol\uff0c\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u989c\u8272rcol\u548c\u989c\u8272\u6bb5\u6570tot\u3002\n\n\n\u5408\u5e76\u65f6\u82e5\u5de6\u8fb9\u7684rcol==\u53f3\u8fb9\u7684lcol\uff0c\u65b0\u7684tot=\u5de6tot+\u53f3tot-1\uff1b\n\n\u4e0d\u662f\u5c31\u65b0tot=\u5de6tot+\u53f3tot\n\n\n\u4fee\u6539\u6253\u4e2a\u8986\u76d6\u6807\u8bb0\u5373\u53ef\u3002\n\n\n**\u6ce8\u610f\uff1a\u7ffb\u8f6c\u64cd\u4f5c\u8981\u4fee\u6539lcol\u548crcol\uff01\uff01\uff01**\n\n\n**\u6ce8\u610f\uff1a\u7ffb\u8f6c\u64cd\u4f5c\u8981\u4fee\u6539lcol\u548crcol\uff01\uff01\uff01**\n\n\n**\u6ce8\u610f\uff1a\u7ffb\u8f6c\u64cd\u4f5c\u8981\u4fee\u6539lcol\u548crcol\uff01\uff01\uff01**\n\n\n\u849f\u84bb\u56e0\u4e3a\u8fd9\u4e2ade\u4e861.5h\u7684bug\u3002\u3002\u3002\n\n\n\u53e6\u5916\u5e38\u6570\u6709\u70b9\u70b9\u5927\u3002\u3002\uff08\u4e3b\u7ad95180ms\uff0c\u6c27\u6c14\u5206\u7ad93456ms\uff09\n\n\n```cpp\n// It is made by XZZ\n#include<cstdio>\n#include<algorithm>\n#define il inline\n#define rg register\n#define vd void\n#define sta static\ntypedef long long ll;\nil int gi(){\n    rg int x=0,f=1;rg char ch=getchar();\n    while(ch<'0'||ch>'9')f=ch=='-'?-1:f,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*f;\n}\nconst int maxn=100001;\nint ch[maxn][2],fa[maxn],tot[maxn],col[maxn],lcol[maxn],rcol[maxn],tag[maxn];\nbool rev[maxn];\ntypedef const int& fast;\nil vd upd(fast x){\n    lcol[x]=ch[x][0]?lcol[ch[x][0]]:col[x];\n    rcol[x]=ch[x][1]?rcol[ch[x][1]]:col[x];\n    if(ch[x][0]&&ch[x][1])tot[x]=tot[ch[x][0]]+tot[ch[x][1]]+1-(rcol[ch[x][0]]==col[x])-(lcol[ch[x][1]]==col[x]);\n    else if(ch[x][0])tot[x]=tot[ch[x][0]]+(rcol[ch[x][0]]!=col[x]);\n    else if(ch[x][1])tot[x]=tot[ch[x][1]]+(lcol[ch[x][1]]!=col[x]);\n    else tot[x]=1;\n}\nil bool isrt(fast x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\nil vd Rev(fast x){if(x)rev[x]^=1,std::swap(ch[x][0],ch[x][1]),std::swap(lcol[x],rcol[x]);}\nil vd Change(fast x,int y){if(x)tag[x]=y,col[x]=lcol[x]=rcol[x]=y,tot[x]=1;}\nil vd down(fast x){\n    if(!isrt(x))down(fa[x]);\n    if(rev[x])Rev(ch[x][0]),Rev(ch[x][1]),rev[x]=0;\n    if(tag[x])Change(ch[x][0],tag[x]),Change(ch[x][1],tag[x]),tag[x]=0;\n}\nil vd rotate(fast x){\n    sta int y,z,o;y=fa[x],z=fa[y],o=x==ch[y][1];\n    if(!isrt(y))ch[z][y==ch[z][1]]=x;fa[x]=z;\n    ch[y][o]=ch[x][!o];fa[ch[x][!o]]=y;\n    fa[y]=x,ch[x][!o]=y;\n    upd(y);\n}\nil vd splay(fast x){\n    down(x);\n    sta int y,z;\n    for(y=fa[x],z=fa[y];!isrt(x);rotate(x),y=fa[x],z=fa[y])\n        if(!isrt(y))rotate(((ch[y][0]==x)^(ch[z][0]==y))?x:y);\n    upd(x);\n}\nil vd access(int x){for(rg int y=0;x;x=fa[y=x])splay(x),ch[x][1]=y,upd(x);}\nil vd makert(fast x){access(x),splay(x),Rev(x);}\nil vd split(fast x,fast y){makert(x),access(y),splay(y);}\nil vd link(fast x,fast y){makert(x),fa[x]=y;}\nint main(){\n    int n=gi(),m=gi();\n    for(rg int i=1;i<=n;++i)col[i]=lcol[i]=rcol[i]=gi(),tot[i]=1;\n    for(rg int i=1;i<n;++i)link(gi(),gi());\n    while(m--){\n        sta char opt[10];sta int a,b;\n        scanf(\"%s\",opt),a=gi(),b=gi();\n        split(a,b);\n        if(opt[0]=='C')Change(b,gi());\n        else printf(\"%d\\n\",tot[b]);\n    }\n    return 0;\n}\n```",
        "postTime": 1515074477,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "# \u5199\u5728\u524d\u9762\n\n\u5bf9\u4e8e\u521a\u5b66\u6811\u5256\u7684\u540c\u5b66~~\u6bd4\u5982\u6211\u8fd9\u79cd**\u5927\u5927\u5927**\u849f\u84bb~~\u6765\u8bf4\uff0c\u505a\u8fd9\u9898\u4f1a\u7ed9\u4f60\u5e26\u6765\u5f88\u5927\u7684\u63d0\u5347\uff1a\u4e0d\u4ec5\u53ef\u4ee5\u5bf9\u6811\u5256\u6709\u66f4\u6df1\u523b\u7684\u7406\u89e3\uff0c\u8fd8\u53ef\u4ee5\u66f4\u597d\u7684\u7406\u89e3\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u9053\u597d\u9898\u54e6\n\n\u4e3a\u4e86\u66f4\u597d\u61c2\uff0c\u6211\u4e00\u70b9\u4e00\u70b9\u8bf4\u8bf4\u601d\u8def\u5427\n\n# \u601d\u8def\n\n\u9996\u5148\u8fd9\u9898\u9898\u610f\u4e0d\u96be\u61c2\uff0c\u53ea\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\u533a\u95f4\u989c\u8272\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u989c\u8272\u6570\u91cf\uff0c\u6211\u4eec\u5206\u5f00\u6765\u770b\uff1a\n\n## \u533a\u95f4\u67e5\u8be2\u989c\u8272\u4e2a\u6570\n\n\u8fd9\u662f\u8fd9\u9898\u7684\u96be\u70b9\uff0c\u5f04\u61c2\u4e86\u4ee5\u540e\u53ef\u4ee5\u5bf9\u7ebf\u6bb5\u6811\u6709\u4e2a\u86ee\u5927\u7684\u63d0\u5347\u5427\n\n\u6211\u4eec\u5148\u628a\u95ee\u9898\u7b80\u5316\u4e00\u4e0b\uff0c\u5047\u8bbe\u8fd9\u4e0d\u662f\u4e00\u68f5\u6811\uff0c\u53ea\u662f\u4e00\u6761\u8fde\uff08\u5df2\u7ecf\u6811\u5256\u8fc7\u4e86\uff09\uff0c\u7ed9\u5b9a\u6bcf\u4e2a\u5143\u7d20\u7684\u989c\u8272\uff0c\u95ee\u6709\u51e0\u6bb5\u989c\u8272\uff08\u5c31\u662f\u8fd9\u9898\u4e2d\u989c\u8272\u6570\u91cf\u7684\u5b9a\u4e49\uff09\uff0c\u6211\u4eec\u600e\u4e48\u505a\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u4e3a\u4e86\u4fdd\u969c\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u9898\u80af\u5b9a\u662f\u7528\u7ebf\u6bb5\u6811\u6c42\u89e3\u7684\uff0c\u6700\u5148\u60f3\u5230\u7684\u662f**\u53f6\u5b50\u8282\u70b9\u7684\u989c\u8272\u4e2a\u6570\u4e3a1**\uff0c\u56e0\u4e3a\u6b64\u65f6\u4e0d\u5b58\u5728\u6709\u989c\u8272\u4f1a\u91cd\u590d\uff0c\u6309\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u73b0\u5728\u8981\u56de\u6eaf\u6c42\u66f4\u5927\u533a\u95f4\u7684\u989c\u8272\u4e2a\u6570\u4e86\uff0c\u6211\u4eec\u600e\u6837\u6c42\u89e3\u5462\uff1f\n\n\u5176\u5b9e\u5206\u60c5\u51b5\u8ba8\u8bba\u4e00\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff1a\u89c1\u4e0b\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\n\n\u5de6\u533a\u95f4\uff1a1231\uff08\u989c\u8272\u4e2a\u6570\u4e3a4\uff09 \u53f3\u533a\u95f4\uff1a222\uff08\u4e2a\u6570\u4e3a1\uff09\n\n\u5408\u5e76\u540e\uff1a1231222\uff08\u989c\u8272\u4e2a\u6570\u4e3a4+1=5\uff09\n\n\u8fd9\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\u6ca1\u6709\u91cd\u590d\n\n\u6211\u4eec\u518d\u6765\u770b\u7b2c\u4e8c\u79cd\uff1a\n\n\u5de6\u533a\u95f4\uff1a1231\uff08\u989c\u8272\u4e2a\u6570\u4e3a4\uff09\u53f3\u533a\u95f4\uff1a121\uff08\u4e2a\u6570\u4e3a3\uff09\n\n\u5408\u5e76\u540e\uff1a1231121\uff08\u989c\u8272\u4e2a\u6570\u4e3a4+3-1\uff09\n\n\u8fd9\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e86\uff0c**\u5de6\u533a\u95f4\u7684\u6700\u540e\u4e00\u4e2a\u989c\u8272\u548c\u53f3\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u989c\u8272\u91cd\u5408**\uff0c\u4e5f\u5c31\u91cd\u590d\u4e86\uff0c\u6240\u4ee5\u603b\u6570\u51cf\u4e00\n\n\u7efc\u4e0a\u6240\u8ff0\uff1a\u6211\u4eec\u7528\u6570\u7ec4lc[ ]\u548crc[ ]\u8868\u793a\u533a\u95f4\u5de6\u53f3\u989c\u8272\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u989c\u8272\u603b\u6570\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u94fe\u60c5\u51b5\u4e0b\u7684\u6b64\u95ee\u9898\u4e86\n```cpp\nint lc[maxn << 2];//\u8fd9\u91cc\u8981\u5f004\u500d\u5927\u5c0f\uff0c\u56e0\u4e3a\u662f\u5bf9\u5e94\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\nint rc[maxn << 2];\nvoid build(int id,int l,int r){\n\ttree[id].l = l;\n\ttree[id].r = r;\n\tif(l == r){\n\t\ttree[id].c = col[ori[l]];//\u8d4b\u503c\uff1a\u53f6\u5b50\u989c\u8272\n\t\tlc[id] = rc[id] = col[ori[l]];//\u8d4b\u503c\uff1a\u533a\u95f4\u5de6\u989c\u8272\u548c\u533a\u95f4\u53f3\u989c\u8272\n\t\ttree[id].sum = 1;//\u989c\u8272\u6570\u4e3a1\n\t\treturn ;\n\t\t}\n\tint mid = l + r >> 1;\n\tbuild(lid,l,mid);\n\tbuild(rid,mid + 1,r);\n\ttree[id].sum = tree[lid].sum + tree[rid].sum;\n\tif(rc[lid] == lc[rid])tree[id].sum -= 1;\n\tlc[id] = lc[lid];\n\trc[id] = rc[rid];\n\t}\nvoid pushdown(int id){\n\tif(tree[id].lazy != 0 && tree[id].l != tree[id].r){\n\t\tint c = tree[id].lazy;\n\t\ttree[lid].lazy = tree[rid].lazy = c;//\u7c89\u5237\n\t\ttree[lid].c = tree[rid].c = c;\n\t\tlc[lid] = rc[lid] = lc[rid] = rc[rid] = c;//\u66f4\u65b0\u5de6\u53f3\n\t\ttree[lid].sum = tree[rid].sum = 1;//\u7c89\u5237\u5b8c\u4ee5\u540e\u53ea\u6709\u4e00\u79cd\u989c\u8272\u4e86\n\t\ttree[id].lazy = 0;\n\t\t}\n\t}\nint query(int id,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\treturn tree[id].sum;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l){\n\t\treturn query(rid,l,r);\n\t\t}\n\telse if(mid >= r){\n\t\treturn query(lid,l,r);\n\t\t}\n\telse{\n\t\tint ret = query(lid,l,mid) + query(rid,mid + 1,r);\n\t\tif(rc[lid] == lc[rid])ret -= 1;\n\t\treturn ret;\n\t\t}\n\t}\n```\n\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a**\u4e0d\u8981\u5fd8\u8bb0\u5927\u533a\u95f4\u8981\u7ee7\u627f\u5c0f\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u989c\u8272**\n\n## \u6811\u4e0a\u67e5\u8be2\u989c\u8272\u4e2a\u6570\n\n\u6211\u4eec\u7684\u64cd\u4f5c\u65f6\u57fa\u4e8e\u6811\u5f62\u7684\uff0c\u6240\u4ee5\u6811\u5256\u8fc7\u540e\uff0c\u6211\u4eec\u6811\u5256\u7684\u67e5\u8be2\u51fd\u6570\u8981\u7565\u4f5c\u4fee\u6539\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/15749.png)\n\n\u5982\u4e0a\u56fe\uff1a\u6811\u5256\u5c31\u662f\u628a\u4e24\u70b9\u4e4b\u95f4\u5256\u6210\u4e86\u82e5\u5e72\u6761\u94fe\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u89e3\u51b3\u4e0d\u540c\u7684\u94fe\u4e4b\u95f4\u989c\u8272\u91cd\u590d\u95ee\u9898\u3002\u4e0a\u56fe\u5df2\u7ecf\u5f88\u660e\u6717\u4e86\uff1a\u89e3\u51b3top[a]\u4e0efa[top[a]]\u989c\u8272\u91cd\u590d\u95ee\u9898\u5373\u53ef\uff1a\n\n\u6211\u5199\u4e86\u4e2a\u51fd\u6570Qc\u6765\u67e5\u8be2\u5355\u70b9\u7684\u989c\u8272\uff0c\u5176\u4ed6\u5b66\u8fc7\u6811\u5256\u7684\u5e94\u8be5\u4e0d\u4f1a\u592a\u964c\u751f\uff1a\n\n```cpp\nint query(int id,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\treturn tree[id].sum;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l){\n\t\treturn query(rid,l,r);\n\t\t}\n\telse if(mid >= r){\n\t\treturn query(lid,l,r);\n\t\t}\n\telse{\n\t\tint ret = query(lid,l,mid) + query(rid,mid + 1,r);\n\t\tif(rc[lid] == lc[rid])ret -= 1;\n\t\treturn ret;\n\t\t}\n\t}\nint Qc(int id,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\treturn tree[id].c;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l)return Qc(rid,l,r);\n\telse return Qc(lid,l,r);\n\t}\nint Qsum(int x,int y){\n\tint ans = 0,Cson,Cfa;//\u513f\u5b50\u7684\u989c\u8272\uff0c\u7238\u7238\u7684\u989c\u8272\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tans += query(1,pos[top[x]],pos[x]);//\u7d2f\u52a0\u7b54\u6848\n\t\tCson = Qc(1,pos[top[x]],pos[top[x]]);\n\t\tCfa = Qc(1,pos[fa[top[x]]],pos[fa[top[x]]]);\n\t\tif(Cson == Cfa)ans -= 1;//\u91cd\u590d\u5219\u7b54\u6848\u51cf\u4e00\n\t\tx = fa[top[x]];\n\t\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tans += query(1,pos[x],pos[y]);\n\treturn ans;\n\t}\n```\n\n## \u533a\u95f4\u4fee\u6539\n\n\u4e0e\u666e\u901a\u7684\u6811\u5256\u9898\u4fee\u6539\u65e0\u5927\u5f02\uff0c\u6ce8\u610f\u7ebf\u6bb5\u6811\u4e2d\u7684\u989c\u8272\u6570\u91cf\u66f4\u65b0\u5373\u533a\u95f4\u7aef\u70b9\u7ee7\u627f\u5373\u53ef\n\n```cpp\nvoid update(int id,int c,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\ttree[id].c = c;\n\t\ttree[id].lazy = c;\n\t\ttree[id].sum = 1;\n\t\tlc[id] = rc[id] = c;\n\t\treturn ;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l){\n\t\tupdate(rid,c,l,r);\n\t\t}\n\telse if(mid >= r){\n\t\tupdate(lid,c,l,r);\n\t\t}\n\telse{\n\t\tupdate(lid,c,l,mid);\n\t\tupdate(rid,c,mid + 1,r);\n\t\t}\n\ttree[id].sum = tree[lid].sum + tree[rid].sum;\n\tif(rc[lid] == lc[rid])tree[id].sum -= 1;\n\tlc[id] = lc[lid];\n\trc[id] = rc[rid];\n\t}\nvoid uprange(int x,int y,int c){\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tupdate(1,c,pos[top[x]],pos[x]);\n\t\tx = fa[top[x]];\n\t\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tupdate(1,c,pos[x],pos[y]);\n\t}\n```\n\n# AC\u4ee3\u7801\n\n\u5c31\u4e0d\u591a\u63d0\u5566\uff0c\u795d\u5927\u5bb6\u5929\u5929AC\uff01\n\n\uff08\u91cd\u8981\u6ce8\u91ca\u5df2\u7ecf\u6253\u5728\u4e0a\u9762\u601d\u8def\u90e8\u5206\u4e86\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u4ee3\u7801\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 100019;\nint num,na,nume,cnt;\nint head[maxn];\nstruct Node{int v,nxt;}E[maxn * 2];\nvoid add(int u,int v){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    head[u] = nume;\n    }\nint size[maxn],wson[maxn],dep[maxn],fa[maxn],top[maxn],pos[maxn],ori[maxn];\nint col[maxn];\nvoid dfs1(int id,int F){\n    size[id] = 1;\n    for(int i = head[id];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(v == F)continue;\n        dep[v] = dep[id] + 1;\n        fa[v] = id;\n        dfs1(v,id);\n        size[id] += size[v];\n        if(size[v] > size[wson[id]])wson[id] = v;\n        }\n    }\nvoid dfs2(int id,int TP){\n    top[id] = TP;\n    pos[id] = ++cnt;\n    ori[cnt] = id;\n    if(!wson[id])return ;\n    dfs2(wson[id],TP);\n    for(int i = head[id];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(v == fa[id] || v == wson[id])continue;\n        dfs2(v,v);\n        }\n    }\nint lc[maxn << 2];\nint rc[maxn << 2];\n#define lid (id << 1)\n#define rid (id << 1) | 1\nstruct sag_tree{\n\tint l,r;\n\tint sum,c;//\u533a\u95f4\u989c\u8272\u603b\u6570\uff0c\u53f6\u5b50\u989c\u8272\n\tint lazy;//\u513f\u5b50\u7684\u989c\u8272\n\t}tree[maxn << 2];\nvoid build(int id,int l,int r){\n\ttree[id].l = l;\n\ttree[id].r = r;\n\tif(l == r){\n\t\ttree[id].c = col[ori[l]];//\u8d4b\u503c\uff1a\u53f6\u5b50\u989c\u8272\n\t\tlc[id] = rc[id] = col[ori[l]];//\u8d4b\u503c\uff1a\u533a\u95f4\u5de6\u989c\u8272\u548c\u533a\u95f4\u53f3\u989c\u8272\n\t\ttree[id].sum = 1;//\u989c\u8272\u6570\u4e3a1\n\t\treturn ;\n\t\t}\n\tint mid = l + r >> 1;\n\tbuild(lid,l,mid);\n\tbuild(rid,mid + 1,r);\n\ttree[id].sum = tree[lid].sum + tree[rid].sum;\n\tif(rc[lid] == lc[rid])tree[id].sum -= 1;\n\tlc[id] = lc[lid];\n\trc[id] = rc[rid];\n\t}\nvoid pushdown(int id){\n\tif(tree[id].lazy != 0 && tree[id].l != tree[id].r){\n\t\tint c = tree[id].lazy;\n\t\ttree[lid].lazy = tree[rid].lazy = c;//\u7c89\u5237\n\t\ttree[lid].c = tree[rid].c = c;\n\t\tlc[lid] = rc[lid] = lc[rid] = rc[rid] = c;//\u66f4\u65b0\u5de6\u53f3\n\t\ttree[lid].sum = tree[rid].sum = 1;//\u7c89\u5237\u5b8c\u4ee5\u540e\u53ea\u6709\u4e00\u79cd\u989c\u8272\u4e86\n\t\ttree[id].lazy = 0;\n\t\t}\n\t}\nvoid update(int id,int c,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\ttree[id].c = c;\n\t\ttree[id].lazy = c;\n\t\ttree[id].sum = 1;\n\t\tlc[id] = rc[id] = c;\n\t\treturn ;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l){\n\t\tupdate(rid,c,l,r);\n\t\t}\n\telse if(mid >= r){\n\t\tupdate(lid,c,l,r);\n\t\t}\n\telse{\n\t\tupdate(lid,c,l,mid);\n\t\tupdate(rid,c,mid + 1,r);\n\t\t}\n\ttree[id].sum = tree[lid].sum + tree[rid].sum;\n\tif(rc[lid] == lc[rid])tree[id].sum -= 1;\n\tlc[id] = lc[lid];\n\trc[id] = rc[rid];\n\t}\nint query(int id,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\treturn tree[id].sum;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l){\n\t\treturn query(rid,l,r);\n\t\t}\n\telse if(mid >= r){\n\t\treturn query(lid,l,r);\n\t\t}\n\telse{\n\t\tint ret = query(lid,l,mid) + query(rid,mid + 1,r);\n\t\tif(rc[lid] == lc[rid])ret -= 1;\n\t\treturn ret;\n\t\t}\n\t}\nint Qc(int id,int l,int r){\n\tpushdown(id);\n\tif(tree[id].l == l && tree[id].r == r){\n\t\treturn tree[id].c;\n\t\t}\n\tint mid = tree[id].l + tree[id].r >> 1;\n\tif(mid < l)return Qc(rid,l,r);\n\telse return Qc(lid,l,r);\n\t}\nvoid uprange(int x,int y,int c){\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tupdate(1,c,pos[top[x]],pos[x]);\n\t\tx = fa[top[x]];\n\t\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tupdate(1,c,pos[x],pos[y]);\n\t}\nint Qsum(int x,int y){\n\tint ans = 0,Cson,Cfa;\n\twhile(top[x] != top[y]){\n\t\tif(dep[top[x]] < dep[top[y]])swap(x,y);\n\t\tans += query(1,pos[top[x]],pos[x]);\n\t\tCson = Qc(1,pos[top[x]],pos[top[x]]);\n\t\tCfa = Qc(1,pos[fa[top[x]]],pos[fa[top[x]]]);\n\t\tif(Cson == Cfa)ans -= 1;\n\t\tx = fa[top[x]];\n\t\t}\n\tif(dep[x] > dep[y])swap(x,y);\n\tans += query(1,pos[x],pos[y]);\n\treturn ans;\n\t}\nint main(){\n\tnum = RD();na = RD();\n\tfor(int i = 1;i <= num;i++)col[i] = RD();\n\tint u,v;\n\tfor(int i = 1;i <= num - 1;i++){\n\t\tu = RD();v = RD();\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t\t}\n\tdfs1(1,-1);\n\tdfs2(1,1);\n\tbuild(1,1,num);\n\tchar ask;\n\tint c;\n\tfor(int i = 1;i <= na;i++){\n\t\tcin>>ask;\n\t\tif(ask == 'Q'){\n\t\t\tu = RD();v = RD();\n\t\t\tprintf(\"%d\\n\",Qsum(u,v));\n\t\t\t}\n\t\telse{\n\t\t\tu = RD();v = RD();c = RD();\n\t\t\tuprange(u,v,c);\n\t\t\t}\n\t\t}\n\treturn 0;\n\t}\n```\n\n\u6700\u540e\uff0c\u867d\u7136dalao\u6ca1\u5e2e\u5565\u5fd9\uff0c\u53ef\u662f\u6211\u662f\u770b\u5927\u4f6c\u4ee5\u524d\u7684\u4ee3\u7801\u67e5\u51fa\u9519\u7684\uff0c[\u5ba3\u4f20\u4e00\u4e0b\u5927\u4f6c](https://www.luogu.org/space/show?uid=32842)\n\n\u6700\u540e\u5f53\u7136\u662f\u5927\u5bb6\u6700\u559c\u6b22\u7684[\u5e7f\u544a](https://www.luogu.org/blog/QVQ/)\u5566",
        "postTime": 1521280753,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "### \u4e3b\u8981\u601d\u8def\uff1a\u6811\u94fe\u5256\u5206 + \u7ebf\u6bb5\u6811\n\n\u4e00\u770b\u5c31\u77e5\u9053\u662f\u68f5\u6811\uff0c\u53ef\u4ee5\u901a\u8fc7\u6811\u94fe\u5256\u5206\u540e\u7ef4\u62a4\u3002\n\n\u989c\u8272\u5c31\u76f8\u5f53\u4e8e\u70b9\u6743\uff0c\u5f3a\u70c8\u6697\u793a\u6811\u94fe\u5256\u5206\u3002\n\n\u6240\u4ee5\u91cd\u70b9\u5c31\u843d\u5728\u4e86\u5982\u4f55\u7ef4\u62a4\u533a\u95f4\u989c\u8272\u5757\u6570\uff1f\n\n    1 1 2 2 3 3 3 2\n\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff1a\n\n\u6211\u4eec\u8003\u8651\u5c0f\u533a\u95f4\u4e0e\u5c0f\u533a\u95f4\u662f\u4e0d\u662f\u53ef\u4ee5\u5408\u5e76\u3002\n\n\u5982\uff1a\n\n\t1 1 2 2    3 3 3 2\n    \n\u5047\u5982\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u5de6\u53f3\u4e24\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u5404\u81ea\u7684\u989c\u8272\u5757\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\u5bf9\u63a5\u8fd9\u4e24\u4e2a\u533a\u95f4\uff0c\u5982\u679c\u5de6\u534a\u6bb5\u53f3\u7aef\u70b9\u548c\u53f3\u534a\u6bb5\u5de6\u7aef\u70b9\u662f\u4e00\u6837\u7684\u8bdd\uff0c\u5408\u8d77\u6765\u7684\u533a\u95f4\u5c31\u4f1a\u6bd4\u539f\u6765\u4e24\u6bb5\u533a\u95f4\u4e2d\u989c\u8272\u5757\u6570\u4e4b\u548c\u5c11\u4e00\u4e2a\u989c\u8272\u5757\u3002\n\n\u5408\u5e76\u7684\u95ee\u9898\u89e3\u51b3\u4e86\uff0c\u90a3\u5982\u4f55\u7b97\u5176\u4e2d\u4e00\u4e2a\u533a\u95f4\u7684\u989c\u8272\u5757\u6570\uff1f\n\n\u6211\u4eec\u548c\u521a\u521a\u7684\u65b9\u6cd5\u76f8\u4f3c\uff0c\u5c31\u662f\u628a\u8fd9\u4e2a\u533a\u95f4\u5206\u5f00\uff0c\u7136\u540e\u6309\u7167\u521a\u521a\u7684\u529e\u6cd5\u5408\u5e76\uff0c\u5408\u5e76\u65f6\u628a\u540c\u5757\u7684\u51cf\u6389\uff0c\uff0c\uff0c\n\n\u5982\u679c\u4e00\u76f4\u5206\u4e0b\u53bb\uff0c\uff0c\u662f\u4e0d\u662f\u548c\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u6709\u70b9\u7c7b\u4f3c\uff0c\uff0c\uff0c\n\n**\u7ebf\u6bb5\u6811\uff01**\n\n\u6211\u4eec\u53ef\u4ee5\u62ff\u7ebf\u6bb5\u6811\u6a21\u62df\u51fa\u6765\u521a\u521a\u7684\u8fc7\u7a0b\uff0c\uff0c\uff0c\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u5c31\u8fd9\u4e48\u6109\u5feb\u7684\u7ed3\u675f\u4e86\n\n~~\u6211\u4e0d\u4f1a\u544a\u8bc9\u4f60\u6211\u4e00\u4e2a\u8bfb\u5165\u5199\u9519\u4e86\u4ea4\u4e86\u4e00\u9875\u76840\u5206\u4ee3\u7801~~\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for (int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for (int i = j; i >= n; i -= k)\n#define rep(i, x) for (int i = h[x]; i; i = e[i].nxt)\n#define mn 100010\n#define inf 2147483647\n#define ll long long\n#define ld long double\n#define fi first\n#define se second\n#define root 1, n, 1\n#define lson l, m, rt << 1\n#define rson m + 1, r, rt << 1 | 1\n#define bson l, r, rt\n//#define LOCAL\n#define mod \n#define Debug(...) fprintf(stderr, __VA_ARGS__)\ninline int read(){\n    int f = 1, x = 0;char ch = getchar();\n    while (ch > '9' || ch < '0'){if (ch == '-')f = -f;ch = getchar();}\n    while (ch >= '0' && ch <= '9'){x = x * 10 + ch - '0';ch = getchar();}\n    return x * f;\n}\n//This is AC head above...\nint n, m;\nstruct edge{\n    int v, nxt;\n} e[mn << 1];\nint p, h[mn];\ninline void add(int a,int b){\n    e[++p].nxt = h[a], h[a] = p, e[p].v = b;\n}\nint w[mn], dep[mn], sze[mn], fa[mn], son[mn], id[mn], ptn[mn], b[mn], top[mn], cnt;\n// Array\nstruct tree{\n    int l, r, lc, rc, sum, col;\n    tree(int _l = 0, int _r = 0, int _lc = 0, int _rc = 0, int _sum = 0, int _col = 0)\n        : l(_l), r(_r), lc(_lc), rc(_rc), sum(_sum), col(_col) {}\n};\nstruct segmenttree{\n    tree z[mn << 2];\n    inline void update(int rt){\n        z[rt].sum = z[rt << 1].sum + z[rt << 1 | 1].sum;\n        if(z[rt<<1].rc == z[rt<<1|1].lc)\n            z[rt].sum--;\n        z[rt].lc = z[rt << 1].lc;\n        z[rt].rc = z[rt << 1 | 1].rc;\n    }\n    inline void color(int l,int r,int rt,int v){\n        z[rt].lc = z[rt].rc = v;\n        z[rt].sum = 1;\n        z[rt].col = v;\n    }\n    inline void push_col(int l,int r,int rt){\n        if(z[rt].col){\n            int m = (l + r) >> 1;\n            color(lson, z[rt].col);\n            color(rson, z[rt].col);\n            z[rt].col = 0;\n        }\n    }\n    inline void build(int l,int r,int rt){\n        if(l==r){\n            z[rt].lc = z[rt].rc = b[l];\n            z[rt].sum = 1;\n            return;\n        }\n        int m = (l + r) >> 1;\n        build(lson);\n        build(rson);\n        update(rt);\n    }\n    inline void modify(int l,int r,int rt,int nowl,int nowr,int v){\n        if(nowl<=l && r<=nowr){\n            color(bson, v);\n            return;\n        }\n        int m = (l + r) >> 1;\n        push_col(bson);\n        if(nowl<=m)\n            modify(lson, nowl, nowr, v);\n        if(m<nowr)\n            modify(rson, nowl, nowr, v);\n        update(rt);\n    }\n    inline tree query(int l,int r,int rt,int nowl,int nowr){\n        if(nowl<=l && r<=nowr){\n            return z[rt];\n        }\n        int m = (l + r) >> 1;\n        push_col(bson);\n        if(nowl<=m){\n            if(m<nowr){\n                tree res, ltr = query(lson, nowl, nowr), rtr = query(rson, nowl, nowr);\n                res.sum = ltr.sum + rtr.sum + (ltr.rc == rtr.lc ? -1 : 0);\n                res.lc = ltr.lc, res.rc = rtr.rc;\n                return res;\n            }else{\n                return query(lson, nowl, nowr);\n            }\n        }else{\n            return query(rson, nowl, nowr);\n        }\n    }\n} tr;\n// line segment tree\nvoid dfs1(int x,int f,int deep){\n    dep[x] = deep;\n    fa[x] = f;\n    sze[x] = 1;\n    int maxson = -1;\n    rep(i,x){\n        int v = e[i].v;\n        if(v==f)\n            continue;\n        dfs1(v, x, deep + 1);\n        sze[x] += sze[v];\n        if(maxson<sze[v])\n            maxson = sze[v], son[x] = v;\n    }\n}\nvoid dfs2(int x,int topf){\n    id[x] = ++cnt;\n    ptn[id[x]] = x;\n    b[id[x]] = w[x];\n    top[x] = topf;\n    if(!son[x])\n        return;\n    dfs2(son[x], topf);\n    rep(i,x){\n        int v = e[i].v;\n        if(v==fa[x]||v==son[x])\n            continue;\n        dfs2(v, v);\n    }\n}\n// DFS\ninline void tree_modify(int x,int y,int v){\n    while(top[x] != top[y]){\n        if(dep[top[x]] < dep[top[y]])\n            swap(x, y);\n        tr.modify(root, id[top[x]], id[x], v);\n        x = fa[top[x]];\n    }\n    if(dep[x] > dep[y])\n        swap(x, y);\n    tr.modify(root, id[x], id[y], v);\n}\ninline int tree_query(int x,int y){\n    int sum = 0, lxx = 0, sxy = 0;\n    while(top[x] != top[y]){\n        if(dep[top[x]] < dep[top[y]])\n            swap(x, y), swap(lxx, sxy);\n        tree res = tr.query(root, id[top[x]], id[x]);\n        sum += res.sum;\n        if(res.rc == lxx)\n            sum--;\n        lxx = res.lc;\n        x = fa[top[x]];\n    }\n    if(dep[x] > dep[y])\n        swap(x, y), swap(lxx, sxy);\n    tree res = tr.query(root, id[x], id[y]);\n    sum += res.sum;\n    if(res.lc == lxx)\n        sum--;\n    if(res.rc == sxy)\n        sum--;\n    return sum;\n}\nint main(){\n    n = read(), m = read();\n    go(i, 1, n, 1) w[i] = read();\n    go(i, 1, n - 1, 1){\n        int a = read(), b = read();\n        add(a, b), add(b, a);\n    }\n    dfs1(1, 1, 1);\n    dfs2(1, 1);\n    tr.build(root);\n    go(i, 1, m, 1){\n        char c;\n        cin >> c;\n        int x = read(), y = read();\n        if(c=='Q')\n            cout << tree_query(x, y) << \"\\n\";\n        else{\n            int v = read();\n            tree_modify(x, y, v);\n        }\n    }\n#ifdef LOCAL\n    Debug(\"\\nMy Time: %.3lfms\\n\", (double)clock() / CLOCKS_PER_SEC);\n#endif\n    return 0;\n}\n\n```\n\n#### \u7b2c\u5341\u56db\u6b21\u5199\u9898\u89e3\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u8fd9\u9053\u9898\u7ebf\u6bb5\u6811\u7ef4\u62a4\u989c\u8272\u5757\u7684\u539f\u7406",
        "postTime": 1537376431,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u770b\u89c1\u5927\u5bb6\u90fd\u53d1\u4e86\u6811\u5256\u7684\u9898\u89e3 \u90a3\u6211\u6765\u5199\u4e00\u4e2aLCT\u7684\u5427~\n\n\u535a\u5ba2\u91cc\u67e5\u770b~\uff1a [\u2014\u2014>\u6233\u6211 \u6233\u6211](https://www.cnblogs.com/HLAUV/p/10330934.html)\n\n\u8fd8\u4e0d\u4f1aLCT\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u7bc7\u535a\u5ba2\uff1a[LCT\u603b\u7ed3](http://www.cnblogs.com/flashhu/p/8324551.html)\n\n\u6211\u521d\u5b66\u52a8\u6001\u6811\u65f6\u5c31\u662f\u770b\u7740\u90a3\u7bc7\u535a\u5ba2\u5b66\u7684\uff0c\u5199\u7684\u5f88\u597d\uff01\n\n\u90a3\u597d \u8a00\u5f52\u6b63\u4f20\u3002\n\n\u663e\u7136\u6811\u4e0a x \u5230 y \u7684\u8def\u5f84\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528LCT Access\u4e00\u4e0b\u628a\u8def\u5f84\u5256\u79bb\u51fa\u6765\uff0c\u90a3\u4e3b\u8981\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u7528Splay \u6765\u7ef4\u62a4\u989c\u8272\u5462\uff1f\n\n\u4e0a\u56fe\uff08~~XP\u7075\u9b42\u753b\u624b\u6240\u4f5c~~\uff09\n![](https://cdn.luogu.com.cn/upload/pic/50097.png)\n\n\u5bf9\u4e8eSplay\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4\u56db\u4e2a\u4fe1\u606f\n\n#### c[x] : \u8282\u70b9\u672c\u8eab\u7684\u989c\u8272\n#### cL[x]: \u8282\u70b9\u5bf9\u5e94\u5b50\u6811\u6700\u5de6\u7aef\u7684\u989c\u8272\n#### cR[x]: \u8282\u70b9\u5bf9\u5e94\u5b50\u6811\u6700\u53f3\u7aef\u7684\u989c\u8272\n#### tot[x]: \u8282\u70b9\u5bf9\u5e94\u5b50\u6811\u533a\u95f4\u7684\u989c\u8272\u6bb5\u6570\n\n\u6240\u4ee5upDATA\u7684\u65f6\u5019\u5c31\u5f88\u663e\u7136\u5566~\n```cpp\nvoid pUP(int x){\n\tint lc=ch[x][0],rc=ch[x][1];\n\t\n\tcL[x]= lc? cL[lc]:c[x];\n\tcR[x]= rc? cR[rc]:c[x];\n\t\n\tif(lc && rc) tot[x]=tot[lc]+tot[rc]+1-(cR[lc]==c[x])-(cL[rc]==c[x]);\n\t\n\tif(lc &&!rc) tot[x]=tot[lc]+1-(cR[lc]==c[x]);\n\t\n\tif(!lc&& rc) tot[x]=tot[rc]+1-(cL[rc]==c[x]);\n\t\n\tif(!lc&&!rc) tot[x]=1;\n}\n```\n\u5176\u4ed6\u90e8\u5206\u5c31\u548c\u5e73\u5e38\u7684LCT\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u4e86\n\n\u54e6 \u5bf9\uff0cpushDOWN\u65f6\u8981\u6ce8\u610f \u533a\u95f4\u7ffb\u8f6c\uff0ccL\u548ccR\u8981\u4e00\u8d77\u7ffb\n\n\u5168\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n\n#define For(i,a,b) for(register int i=a;i<=b;++i)\n#define Dwn(i,a,b) for(register int i=a;i>=b;--i)\n#define Pn putchar('\\n')\n#define I inline \n#define Re register\n\nusing namespace std;\n\nconst int N=1e5+5;\n\nint ch[N][2],fa[N],c[N],cL[N],cR[N],tot[N],tag[N],st[N],top,tgC[N];\nint n,m,x,y,z;\nchar opt;\n\nI void read(int &v){\n\tv=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9')v=v*10+c-'0',c=getchar();\n}\nvoid write(int x){\n\tif(x>9)write(x/10);\n\tint xx=x%10;\n\tputchar(xx+'0');\n}\nI bool NOrt(int x){\n\treturn ch[fa[x]][1]==x || ch[fa[x]][0]==x;\n}\nI void pTAG(int x){\n\tswap(ch[x][0],ch[x][1]);\n\tswap(cL[x],cR[x]);\n\ttag[x]^=1;\n}\nI void pTGC(int x,int Col){\n\tc[x]=cL[x]=cR[x]=Col;\n\ttot[x]=1;\n\ttgC[x]=Col;\n}\nI void pDOWN(int x){\n\tif(tag[x]){\n\t\tif(ch[x][0])pTAG(ch[x][0]);\n\t\tif(ch[x][1])pTAG(ch[x][1]);\n\t\ttag[x]^=1;\n\t}\n\tif(tgC[x]){\n\t\tif(ch[x][0])pTGC(ch[x][0],tgC[x]);\n\t\tif(ch[x][1])pTGC(ch[x][1],tgC[x]);\n\t\ttgC[x]=0;\n\t}\n}\nI void pUP(int x){\n\tint lc=ch[x][0],rc=ch[x][1];\n\t\n\tcL[x]= lc? cL[lc]:c[x];\n\tcR[x]= rc? cR[rc]:c[x];\n\t\n\tif(lc && rc) tot[x]=tot[lc]+tot[rc]+1-(cR[lc]==c[x])-(cL[rc]==c[x]);\n\t\n\tif(lc &&!rc) tot[x]=tot[lc]+1-(cR[lc]==c[x]);\n\t\n\tif(!lc&& rc) tot[x]=tot[rc]+1-(cL[rc]==c[x]);\n\t\n\tif(!lc&&!rc) tot[x]=1;\n}\nI bool Wson(int x){\n\treturn ch[fa[x]][1]==x;\n}\nI void Rotate(int x){\n\tint y=fa[x];\n\tint z=fa[y];\n\tint ws=Wson(x);\n\tif(NOrt(y))ch[z][Wson(y)]=x;\n\tfa[x]=z;\n\t\n\tch[y][ws]=ch[x][ws^1];\n\tif(ch[x][ws^1])fa[ch[x][ws^1]]=y;\n\t\n\tch[x][ws^1]=y;\n\tfa[y]=x;\n\t\n\tpUP(y); pUP(x);\n}\nI void Splay(int x){\n\ttop=0; int now=x;\n\tst[++top]=now;\n\twhile(NOrt(now))st[++top]=now=fa[now];\n\twhile(top) pDOWN(st[top--]);\n\t\n\twhile(NOrt(x)){\n\t\tint y=fa[x];\n\t\tif(NOrt(y)){\n\t\t\tif(Wson(y)==Wson(x))Rotate(y);\n\t\t\telse Rotate(x);\n\t\t}\n\t\tRotate(x);\n\t}\n}\nI void Access(int x){\n\tint lst=0;\n\twhile(x){\n\t\tSplay(x); ch[x][1]=lst; pUP(x);\n\t\tlst=x; x=fa[x];\n\t}\n}\nI void ChangeRt(int x){\n\tAccess(x); Splay(x); pTAG(x);\n}\nI void Link(int x,int y){\n\tChangeRt(x); fa[x]=y;\n}\nI void Split(int x,int y){\n\tChangeRt(x); Access(y); Splay(y);\n}\nint main(){ \n\tread(n); read(m); \n\tFor(i,1,n){\n\t\tread(c[i]); tot[i]=1;\n\t\tcL[i]=cR[i]=c[i]; \n\t};\n\tFor(i,1,n-1){ \n\t\tread(x); read(y);\n\t\tLink(x,y);\n\t}\n\tFor(i,1,m){ \n\t\topt=getchar();\n\t\twhile(opt!='C'&&opt!='Q')opt=getchar();\n\t\tif(opt=='C'){\n\t\t\tread(x); read(y); read(z);\n\t\t\tSplit(x,y); pTGC(y,z);\n\t\t}\n\t\tif(opt=='Q'){\n\t\t\tread(x); read(y);\n\t\t\tSplit(x,y);\n\t\t\twrite(tot[y]); Pn;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1548666195,
        "uid": 86041,
        "name": "_LAUV_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u5176\u5b9e\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c ` \u6811\u94fe\u5256\u5206 ` + ` \u7ebf\u6bb5\u6811 ` \uff0c\u53ea\u662f\u770b\u5230\u533a\u95f4\u8d4b\u503c\u5fc3\u8840\u6765\u6f6e\u60f3\u7528 ` \u73c2\u6735\u8389\u6811 ` \u6c34\uff0c\u7ed3\u679c\u5c31\u8fc7\u4e86\u256e(\u256f\u25bd\u2570)\u256d\n\n\u64cd\u4f5c 1 \u5c31\u662f ` \u533a\u95f4\u63a8\u5e73 ( assign ) ` \uff0c\u64cd\u4f5c 2 \u53ef\u4ee5\u50cf\u627e ` \u6700\u8fd1\u516c\u5171\u7956\u5148 ( LCA ) ` \u4e00\u6837\u4e00\u8fb9\u5f80\u4e0a\u65b9\u8df3\u4e00\u8fb9\u7edf\u8ba1\uff0c\u7531\u4e8e\u73c2\u6735\u8389\u6811\u7684\u7ed3\u70b9\u5b58\u50a8\u7684\u662f\u4e00\u6bb5\u503c\u76f8\u540c\u7684\u8fde\u7eed\u533a\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e0a\u4e00\u6b21\u8bbf\u95ee\u7684\u7ed3\u70b9\u7684\u503c\u4e0e\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u6bd4\u8f83\uff0c\u82e5\u4e0d\u540c\u5219\u66f4\u65b0\u5e76\u8ba1\u6570\u3002\n\n## \u503c\u5f97\u6ce8\u610f\u7684\u4e09\u70b9\uff1a\n\n#### 1.\u7531\u4e8e\u6211\u4eec\u662f\u7edf\u8ba1\u94fe\u4e0a\u7684\u8fde\u7eed\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u4ece\u6df1\u5ea6\u5927\u7684\u7ed3\u70b9\u5f80\u5c0f\u7684\u679a\u4e3e\u3002\n#### 2.\u7531\u4e8e\u6211\u4eec\u662f\u4ece\u94fe\u7684\u4e24\u7aef\u5206\u522b\u5f80\u4e0a\u8df3\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5206\u522b\u8bb0\u5f55\u4e24\u8fb9\u4e0a\u6b21\u8bbf\u95ee\u7684\u7ed3\u70b9\u7684\u503c\u3002\n#### 3.\u6700\u540e\u5904\u4e8e\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u9700\u8981\u8003\u8651\u4e24\u7aef\u7684\u503c\u76f8\u540c\u7684\u60c5\u51b5\u3002\n\n\u6700\u540e\u653e\u4e0aAC\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <set>\nusing std::set;\n\n#define N 100010\n\nstruct node\n{\n\tint l,r,v;\n\tnode(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n\tinline int operator<(const node&x)const{return l<x.l;}\n};\nset<node>s;\ntypedef set<node>::iterator IT;\n\ninline IT split(int pos)\n{\n\tIT it(--s.upper_bound(node(pos)));\n\tif(it->l==pos)\n\t\treturn it;\n\tint L(it->l),R(it->r),V(it->v);\n\ts.erase(it),s.insert(node(L,pos-1,V));\n\treturn s.insert(node(pos,R,V)).first;\n}\n\ninline void assign(int l,int r,int v)\n{\n\tIT itr(split(r+1)),itl(split(l));\n\ts.erase(itl,itr);s.insert(node(l,r,v));\n}\n\nint n,m,a[N],x,y,z;\nchar opt;\n\nint e,bg[N],nx[N<<1],to[N<<1];\ninline void link(int u,int v){to[++e]=v,nx[e]=bg[u],bg[u]=e;}\n\nint fa[N],dep[N],siz[N],ws[N];\nvoid dfs1(int now,int f)\n{\n\tfa[now]=f,dep[now]=dep[f]+1,siz[now]=1;\n\tint mx(-1);\n\tfor(int i=bg[now];i;i=nx[i])\n\t\tif(to[i]!=f)\n\t\t{\n\t\t\tdfs1(to[i],now);\n\t\t\tsiz[now]+=siz[to[i]];\n\t\t\tif(siz[to[i]]>mx)\n\t\t\t\tmx=siz[to[i]],ws[now]=to[i];\n\t\t}\n}\n\nint cnt,top[N],id[N],wt[N];\nvoid dfs2(int now,int tp)\n{\n\ttop[now]=tp,id[now]=++cnt,wt[cnt]=a[now];\n\tif(!ws[now])\n\t\treturn;\n\tdfs2(ws[now],tp);\n\tfor(int i=bg[now];i;i=nx[i])\n\t\tif(to[i]!=fa[now]&&to[i]!=ws[now])\n\t\t\tdfs2(to[i],to[i]);\n}\n\ninline void change(int x,int y,int z)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]])\n\t\t{\n\t\t\tassign(id[top[x]],id[x],z);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tassign(id[top[y]],id[y],z);\n\t\t\ty=fa[top[y]];\n\t\t}\n\t}\n\tif(dep[x]>dep[y])\n\t\tassign(id[y],id[x],z);\n\telse\n\t\tassign(id[x],id[y],z);\n}\n\ninline int query(int x,int y)\n{\n\tint ans(0),lasta(0),lastb(0);\n\tIT itl,itr;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]])\n\t\t{\n\t\t\titr=split(id[x]+1),itl=split(id[top[x]]);\n\t\t\tfor(--itr;;--itr)\n\t\t\t{\n\t\t\t\tif(itr->v!=lasta)\n\t\t\t\t\tlasta=itr->v,++ans;\n\t\t\t\tif(itr==itl)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\titr=split(id[y]+1),itl=split(id[top[y]]);\n\t\t\tfor(--itr;;--itr)\n\t\t\t{\n\t\t\t\tif(itr->v!=lastb)\n\t\t\t\t\tlastb=itr->v,++ans;\n\t\t\t\tif(itr==itl)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\ty=fa[top[y]];\n\t\t}\n\t}\n\tif(dep[x]>dep[y])\n\t{\n\t\titr=split(id[x]+1),itl=split(id[y]);\n\t\tfor(--itr;;--itr)\n\t\t{\n\t\t\tif(itr->v!=lasta)\n\t\t\t\tlasta=itr->v,++ans;\n\t\t\tif(itr==itl)\n\t\t\t\t\tbreak;\n\t\t}\n\t}\n\telse\n\t{\n\t\titr=split(id[y]+1),itl=split(id[x]);\n\t\tfor(--itr;;--itr)\n\t\t{\n\t\t\tif(itr->v!=lastb)\n\t\t\t\tlastb=itr->v,++ans;\n\t\t\tif(itr==itl)\n\t\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans-(lasta==lastb);\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%d\",a+i);\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tlink(x,y),link(y,x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;++i)\n\t\ts.insert(node(i,i,wt[i]));\n\twhile(m--)\n\t{\n\t\tscanf(\"\\n%c%d%d\",&opt,&x,&y);\n\t\tif(opt=='C')\n\t\t{\n\t\t\tscanf(\"%d\",&z);\n\t\t\tchange(x,y,z);\n\t\t}\n\t\telse\n\t\t\tprintf(\"%d\\n\",query(x,y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1547289651,
        "uid": 126486,
        "name": "yurzhang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u5185\u98df\u7528\u66f4\u52a0](https://blog.csdn.net/devout_/article/details/104374121)\n\n\u770b\u5230\u9898\u89e3\u91cc\u597d\u50cf\u6ca1\u6709\u548c\u6211\u505a\u6cd5\u5b8c\u5168\u4e00\u6837\u7684\n\n\u6765\u53d1\u4e00\u4e0b\n\n\u8fd9\u9053\u9898\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u6811\u5256\u4e00\u4e0b\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u600e\u4e48\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u533a\u95f4\u989c\u8272\u6bb5\u6570\n\n\u6211\u4eec\u4f1a\u60f3\u5230\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8fd9\u4e48\u51e0\u4e2a\u4e1c\u897f\n\n1.\u533a\u95f4\u6bb5\u6570\n\n2.\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u989c\u8272\n\n3.\u533a\u95f4\u53f3\u7aef\u70b9\u7684\u989c\u8272\n\n\u5408\u5e76\u7684\u65f6\u5019\u5c31\u662f\u5de6\u513f\u5b50\u7684\u6bb5\u6570\u52a0\u4e0a\u53f3\u513f\u5b50\u7684\u6bb5\u6570\uff0c\u5982\u679c\u5de6\u513f\u5b50\u7684\u53f3\u7aef\u70b9\u548c\u53f3\u513f\u5b50\u7684\u5de6\u7aef\u70b9\u662f\u4e00\u4e2a\u989c\u8272\uff0c\u90a3\u4e48\u5c31\u6bb5\u6570-1\n\n\u56e0\u4e3a\u662f\u533a\u95f4\u4fee\u6539\uff0c\u6240\u4ee5\u52a0\u4e0a\u4e00\u4e2a\u61d2\u6807\u8bb0\u5c31\u53ef\u4ee5\u4e86\n\n\u66f4\u65b0\u8ddf\u666e\u901a\u6811\u5256\u4e00\u6837\uff0c\u4f46\u662f\u67e5\u8be2\u4e0d\u592a\u4e00\u6837\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd~~\u9002\u7528\u8303\u56f4\u66f4\u5e7f~~\u7684\u505a\u6cd5\n\n\u6211\u662f\u53d7\u5230\u4e86[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/SP6779)\u7684\u542f\u53d1\uff0c\u90a3\u9053\u9898\u662f\u6c42\u6811\u4e0a\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u9700\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u5355\u7eaf\u7528\u53d8\u91cf\u4e0d\u592a\u597d\u505a\u3002\n\n\u6240\u4ee5\u6211\u8ba9\u6211\u4eec\u7684query\u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u50a8\u5b58\u8fd9\u4e00\u6bb5\u7684\u7b54\u6848\u7684\u6bb5\u6570\uff0c\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\u5206\u522b\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u6211\u4eec\u518d\u5199\u4e00\u4e2amerge\u51fd\u6570\u6765\u5408\u5e76\u4e24\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u5b9e\u5199\u8d77\u6765\u548cpushup\u5dee\u4e0d\u591a\uff0c\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\n\n```cpp\nsegment_tree merge(segment_tree l,segment_tree r){\n\tif(!l.sum)return r;\n\tif(!r.sum)return l;\n\tsegment_tree res;\n\tres.lcol=l.lcol,res.rcol=r.rcol;\n\tres.sum=l.sum+r.sum;\n\tif(l.rcol==r.lcol)res.sum--;\n\treturn res;\t\n}\n```\n\n\u90a3\u4e48\u6211\u4eec\u6811\u5256\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5f00\u4e24\u4e2asegment_tree\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53d8\u91cfl\uff0cr\uff0c\u5206\u522b\u8868\u793ax\u5f80\u4e0a\u8df3\u5230\u4ed6\u4eec\u7684lca\u7684\u8fd9\u4e00\u6bb5\u7684\u989c\u8272\u6bb5\u6570\u548cy\u8df3\u5230lca\u8fd9\u4e00\u6bb5\u7684\u989c\u8272\u6bb5\u6570\n\n\u7136\u540e\u4f9d\u6b21\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\n\n\u4f46\u662f\u6ce8\u610f\u4e00\u70b9\uff0cmerge\u51fd\u6570\u662f\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628atop[x]~x\u8fd9\u4e00\u6bb5\u653e\u5728\u5de6\u8fb9\u3002\n\n\u6700\u540e\u5408\u5e76\u7684\u65f6\u5019\u8981\u628al\u7684\u5de6\u7aef\u70b9\u989c\u8272\u548c\u53f3\u7aef\u70b9\u989c\u8272\u4ea4\u6362\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u628a\u4e00\u4e2a\u533a\u95f4\u6574\u4f53\u53cd\u8f6c\u624d\u80fd\u63a5\u5230\u4e00\u8d77\uff08\u53ef\u4ee5\u753b\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\n\n\u7136\u540e\u5982\u679c\u4f60~~\u53ea\u8fc7\u4e86hack\u6570\u636e~~\u7684\u8bdd\u5c31\u67e5\u4e00\u4e0b\u4f60\u7684\u67e5\u8be2\u90a3\u4e00\u6bb5\u6709\u6ca1\u6709\u67e5\u53cd\u5c31\u597d\u4e86\n\ncode time:\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\nconst int N=1e5+5;\ntemplate <typename T> void read(T &x){\n\tx=0;int f=1;\n\tchar c=getchar();\n\tfor(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n\tx*=f;\n}\n\nint n,m;\nint head[N],cnt;\nint a[N],_a[N];\nint faz[N],son[N],dep[N],siz[N],top[N],dfn[N],tot;\n\nstruct Edge{\n\tint to,next;\t\n}e[N<<1];\n\nvoid add(int x,int y){\n\te[++cnt]=(Edge){y,head[x]},head[x]=cnt;\t\n}\n\nstruct segment_tree{\n\tint l,r;\n\tint lcol,rcol,sum;\t\n\tint tag;\n\tsegment_tree(){l=r=lcol=rcol=sum=tag=0;}\n}seg[N<<2];\n\n# define lc (u<<1)\n# define rc (u<<1|1)\n\nvoid pushup(int u){\n\tseg[u].sum=seg[lc].sum+seg[rc].sum;\n\tif(seg[lc].rcol==seg[rc].lcol)seg[u].sum--;\n\tseg[u].lcol=seg[lc].lcol;\n\tseg[u].rcol=seg[rc].rcol;\t\n}\n\nvoid pushdown(int u){\n\tseg[lc].sum=1;\n\tseg[lc].lcol=seg[lc].rcol=seg[u].tag;\n\tseg[lc].tag=seg[u].tag;\n\tseg[rc].sum=1;\n\tseg[rc].lcol=seg[rc].rcol=seg[u].tag;\n\tseg[rc].tag=seg[u].tag;\n\tseg[u].tag=0;\t\n}\n\nsegment_tree merge(segment_tree l,segment_tree r){\n\tif(!l.sum)return r;\n\tif(!r.sum)return l;\n\tsegment_tree res;\n\tres.lcol=l.lcol,res.rcol=r.rcol;\n\tres.sum=l.sum+r.sum;\n\tif(l.rcol==r.lcol)res.sum--;\n\treturn res;\t\n}\n\nvoid build(int u,int l,int r){\n\tseg[u].l=l,seg[u].r=r;\n\tif(l==r){seg[u].sum=1,seg[u].lcol=seg[u].rcol=_a[l];return;}\n\tint mid=l+r>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(u);\n}\n\nvoid update(int u,int l,int r,int k){\n\tif(seg[u].l>=l&&seg[u].r<=r){\n\t\tseg[u].sum=1;\n\t\tseg[u].lcol=seg[u].rcol=k;\n\t\tseg[u].tag=k;\n\t\treturn;\n\t}\t\n\tif(seg[u].tag)pushdown(u);\n\tint mid=seg[u].l+seg[u].r>>1;\n\tif(l<=mid)update(lc,l,r,k);\n\tif(r>mid)update(rc,l,r,k);\n\tpushup(u);\n}\n\nsegment_tree query(int u,int l,int r){\n\tif(seg[u].l>=l&&seg[u].r<=r)return seg[u];\n\tif(seg[u].tag)pushdown(u);\n\tint mid=seg[u].l+seg[u].r>>1;\n\tif(r<=mid)return query(lc,l,r);\n\tif(l>mid)return query(rc,l,r);\n\treturn merge(query(lc,l,r),query(rc,l,r));\t\n}\n\nvoid RouteModify(int x,int y,int k){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tupdate(1,dfn[top[x]],dfn[x],k);\n\t\tx=faz[top[x]];\t\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tupdate(1,dfn[x],dfn[y],k);\n}\n\nint RouteQuery(int x,int y){\n\tsegment_tree l,r;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]){\n\t\t\tr=merge(query(1,dfn[top[y]],dfn[y]),r);\n\t\t\ty=faz[top[y]];\t\n\t\t}\n\t\telse{\n\t\t\tl=merge(query(1,dfn[top[x]],dfn[x]),l);\n\t\t\tx=faz[top[x]];\t\n\t\t}\n\t}\n\tif(dep[x]<dep[y])r=merge(query(1,dfn[x],dfn[y]),r);\n\telse l=merge(query(1,dfn[y],dfn[x]),l);\n\tswap(l.lcol,l.rcol);\n\treturn merge(l,r).sum; \n}\n\nvoid dfs1(int u,int fa){\n\tfaz[u]=fa;\n\tsiz[u]=1;\n\tdep[u]=dep[fa]+1;\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])son[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int _top){\n\ttop[u]=_top;\n\tdfn[u]=++tot;\n\t_a[tot]=a[u];\n\tif(!son[u])return;\n\tdfs2(son[u],_top);\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==faz[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n),read(m);\n\tRep(i,1,n)read(a[i]);\n\tRep(i,1,n-1){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tadd(x,y),add(y,x);\n\t}\n\tdfs1(1,0),dfs2(1,1);\n\tbuild(1,1,n);\n\tRep(i,1,m){\n\t\tchar opt[10];\n\t\tint x,y,z;\n\t\tscanf(\"%s\",opt);\n\t\tif(opt[0]=='C'){\n\t\t\tread(x),read(y),read(z);\n\t\t\tRouteModify(x,y,z);\n\t\t}\n\t\telse{\n\t\t\tread(x),read(y);\n\t\t\tprintf(\"%d\\n\",RouteQuery(x,y));\t\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1582005332,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "### [P2486](https://www.luogu.org/problem/P2486)\n\n\u5f88\u7ecf\u5178\u7684\u9898~\n\n\u601d\u8def: \u7ebf\u6bb5\u6811\u67d3\u8272+\"\u719f\u7ec3\"\u5256\u5206(\u67d0\u4e9b\u51fa\u9898\u4eba\u603b\u662f\u559c\u6b22\u628a\u5e8f\u5217\u4e0a\u7684\u9898\u52a0\u4e2a\u6811\u94fe\u5256\u5206\u641e\u5230\u6811\u4e0a\u53bb)\n\n\u5148\u60f3\u4e00\u60f3\u5e8f\u5217\u4e0a\u600e\u4e48\u505a\u5427\n\n~~\u7ebf\u6bb5\u6811\u662f\u4e2a\u597d\u4e1c\u897f~~\n\n\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e09\u4e2a\u4fe1\u606f: ls: \u5de6\u7aef\u70b9\u7684\u989c\u8272    rs: \u53f3\u7aef\u70b9\u7684\u989c\u8272 cnt: [l, r] \u4e2d\u5171\u6709\u51e0\u4e2a\u989c\u8272\u6bb5\n\n\u5408\u5e76? \n\nfa.cnt = son1.cnt + son2.cnt - [son1.rs == son2.ls]\n\nfa.ls = son1.ls ,       fa.rs =  son2.rs\n\n\u7239\u7684\u5de6\u7aef\u70b9\u989c\u8272\u5c31\u662f\u5de6\u513f\u5b50\u7684\u5de6\u7aef\u70b9\u989c\u8272, \u53f3\u7aef\u70b9\u4ea6\u7136\n\n\u5982\u679c\u5de6\u513f\u5b50\u4e0e\u53f3\u513f\u5b50\u76f8\u63a5\u7684\u989c\u8272\u76f8\u540c, \u90a3\u4e48\u7b49\u4e8e\u5de6\u513f\u5b50\u5757\u6570\u52a0\u53f3\u513f\u5b50\u5757\u6570-1(\u4e2d\u95f4\u4e24\u4e2a\u5757\u4f1a\u5408\u6210\u4e00\u4e2a)\n\n\u5426\u5219\u76f4\u63a5\u52a0\u5c31\u884c\u5566\n\n\u4fee\u6539\u65f6\u8981\u6253**\u6807\u8bb0** \u8bb0\u5f55\u6709\u6ca1\u6709\u88ab\u8986\u76d6\n\n#### \u56de\u5230\u6811\u4e0a\u95ee\u9898\u65f6\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\u8be2\u95ee\n\n\u56e0\u4e3a\u8be2\u95ee\u65f6\u6709swap\u7684\u64cd\u4f5c, \u5c06k\u8bb0\u5f55x,y\u7684\u987a\u5e8f, \u5373\u76f8\u5f53\u4e8e(x, y) \u8fd8\u662f(y, x)\n\n\u5982\u679c\u662f(y, x), \u6700\u540e\u8fd8\u8981\u53cd\u56de\u6765\u624d\u80fd\u8fdb\u884c\u5408\u5e76\n\n\u5728\u8df3\u91cd\u94fe\u65f6, \u603b\u662f\u5c06\u94fe\u63a5\u5728\u5b83\u7684\u5de6\u8fb9, \u6700\u540e\u5c06a\u5de6\u53f3\u513f\u5b50\u53cd\u4e00\u4e0b\u518d\u4e0eb\u5408\u5e76\u5373\u53ef\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdio>\n#define ll long long\nusing namespace std;\nconst int N = 105000*4;\nint fa[N], id[N], siz[N];\nint num, dep[N], son[N];\nint w[N], wt[N], Top[N];\nint h[N], ne[N], to[N];\nint tot;\ninline void add(int x,int y) {\n\tne[++tot] = h[x], h[x] = tot;\n\tto[tot] = y;\n}\nvoid dfs1(int x,int f) {\n\tfa[x] = f;\n\tsiz[x] = 1, dep[x] = dep[f] + 1;\n\tfor (int i = h[x]; i ;i = ne[i]) {\n\t\tint y = to[i];\n\t\tif (y == f) continue;\n\t\tdfs1(y, x);\n\t\tsiz[x] += siz[y];\n\t\tif (siz[y] > siz[son[x]]) son[x] = y;\n\t}\n}\nvoid dfs2(int x,int topf) {\n\tid[x] = ++num; wt[num] = w[x];\n\tTop[x] = topf;\n\tif (!son[x]) return;\n\tdfs2(son[x], topf);\n\tfor (int i = h[x]; i; i = ne[i]) {\n\t\tint y = to[i];\n\t\tif (y == fa[x] || y == son[x]) continue;\n\t\tdfs2(y, y);\n\t}\n}\nint n, m;\nint L[N], R[N], cnt[N], ls[N], rs[N];\nint tag[N];\n#define p1 p << 1\n#define p2 p << 1 | 1\n\nstruct node{\n\tint cnt, ls, rs;\n};\nvoid update(node &fa,node i,node j) {\n\tfa.cnt = i.cnt + j.cnt - (i.rs == j.ls);\n\tfa.ls = i.ls, fa.rs = j.rs;\n}\n\nvoid build(int l,int r,int p) {\n\tL[p] = l, R[p] = r;\n\tif (l == r) {\n\t\tcnt[p] = 1, ls[p] = rs[p] = wt[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(l, mid, p1);\n\tbuild(mid+1, r, p2);\n\tcnt[p] = cnt[p1] + cnt[p2] - (rs[p1] == ls[p2]);\n\tls[p] = ls[p1], rs[p] = rs[p2];\n}\n\nvoid spread(int p) {\n\tif (tag[p]) {\n\t\tcnt[p1] = cnt[p2] = 1;\n\t\ttag[p1] = tag[p2] = tag[p];\n\t\tls[p1] = ls[p2] = rs[p1] = rs[p2] = tag[p];\n\t\ttag[p] = 0;\n\t}\n}\n\nvoid change(int l,int r,int p,int c) {\n\tif (L[p] >= l && R[p] <= r) {\n\t\tcnt[p] = 1, tag[p] = c;\n\t\tls[p] = rs[p] = c;\n\t\treturn;\n\t}\n\tspread(p);\n\tif (R[p1] >= l) change(l, r, p1, c);\n\tif (L[p2] <= r) change(l, r, p2, c);\n\tcnt[p] = cnt[p1] + cnt[p2] - (rs[p1] == ls[p2]);\n\tls[p] = ls[p1], rs[p] = rs[p2];\n}\n\nnode ask(int l,int r,int p) {\n\tif (L[p] >= l && R[p] <= r) return (node){cnt[p], ls[p], rs[p]};\n\tspread(p);\n\tnode i;\n\tif (R[p1] < l) return ask(l, r, p2);\n\tif (L[p2] > r) return ask(l, r, p1);\n\tupdate(i, ask(l, r, p1), ask(l, r, p2));\n\treturn i;\n}\n\t\nvoid change_e(int x,int y,int c) {\n\twhile (Top[x] != Top[y]) {\n\t\tif (dep[Top[x]] < dep[Top[y]]) swap(x, y);\n\t\tchange(id[Top[x]], id[x], 1, c);\n\t\tx = fa[Top[x]];\n\t}\n\tif (dep[x] < dep[y]) swap(x, y);\n\tchange(id[y], id[x], 1, c);\n}\n\nint sum(int x,int y) {\n\tnode ans, a, b;\n\tans = a = b = (node){0,0,0};\n\tint k = 1;\n\twhile (Top[x] != Top[y]) {\n\t\tif (dep[Top[x]] < dep[Top[y]]) swap(x, y), swap(a, b), k ^= 1;\n\t\tif (a.cnt == 0) a = ask(id[Top[x]], id[x], 1);\n\t\telse update(a, ask(id[Top[x]], id[x], 1), a);\n\t\tx = fa[Top[x]];\n\t}\n\tif (dep[x] < dep[y]) swap(x, y), swap(a, b);\n\tif (a.cnt == 0) a = ask(id[y], id[x], 1);\n\telse update(a, ask(id[y], id[x], 1), a);\n\tif (b.cnt == 0) return a.cnt;\n\tif (a.cnt == 0) return b.cnt;\n\tif (!k) swap(a, b); // \u5c06a, b\u6062\u590d\u6b63\u5e38\u987a\u5e8f\n\tswap(a.ls, a.rs); //\u5c06a\u5de6\u53f3\u513f\u5b50\u6362\u4f4d\n\tupdate(ans, a, b);\n\treturn ans.cnt;\n}\n\t\n\t\t\nchar s[5];\nll a, b, c;\n\ntemplate <typename T> \nvoid read(T &x) {\n\tx = 0; int f = 1;\n\tchar c = getchar();\n\tfor (;!isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (;isdigit(c); c = getchar()) x = (x << 3) + (x << 1) + c - '0';\n\tx *= f;\n}\nint main() {\n\tread(n), read(m);\n\tfor (int i = 1;i <= n; i++) read(w[i]);\n\tfor (int i = 1;i < n; i++) {\n\t\tread(a), read(b);\n\t\tadd(a, b); add(b, a);\n\t}\n\tdfs1(1, 0); \n\tdfs2(1, 1);\n\tbuild(1, n, 1);\n\twhile (m--) {\n\t\tscanf (\"%s\", s + 1);\n\t\tif (s[1] == 'C') {\n\t\t\tread(a), read(b), read(c);\n\t\t\tchange_e(a, b, c);\n\t\t}\n\t\telse {\n\t\t\tread(a), read(b);\n\t\t\tprintf (\"%d\\n\", sum(a, b));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1570637298,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "## \u9898\u9762\u63cf\u8ff0\n[~~\u6ed1\u7a3d~~](https://www.luogu.org/problem/P2486)\n\n## \u601d\u8def\n~~\u521d\u770b\u4e0d\u53ef\u505a\uff0c\u518d\u770b\u4e0d\u53ef\u505a\u3002~~\n\n\u4e4b\u540e\u8fc7\u4e86\u51e0\u5929\u4e4b\u540e\uff0c\u624d\u60f3\u8d77\u6765\u6709\u8fd9\u9053\u9898\u3002\n\n\u94c1\u5934\u5a03$\\operatorname{LCT}$\u6765\u4e86\u3002\n\n\u7531\u4e8e\u662f\u7edf\u8ba1\u4e0d\u540c\u7684\u989c\u8272\u6bb5\u6570\uff0c\u90a3\u4e48\u4e00\u4e2a\u989c\u8272\u6bb5\u4e0e\u53e6\u4e00\u989c\u8272\u6bb5\u63a5\u58e4\u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f\u5de6\u7aef\u70b9\u7684$\\operatorname{col}$\uff0c\u4ee5\u53ca\u53f3\u7aef\u70b9\u7684$\\operatorname{col}$\u3002\n\n\u8f6c\u5316\u6210$\\operatorname{LCT}$\u4e5f\u5c31\u662f$\\operatorname{t[rc].rcol}$\uff0c$\\operatorname{t[lc].lcol}$\uff0c\u4e4b\u540e\u62d3\u5c55\u65f6\uff0c\u66f4\u65b0\u72b6\u6001\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u82e5$\\operatorname{t[rc].lcol}=\\operatorname{t[p].col}$\uff0c\u76f8\u5e94\u533a\u95f4\u6570\u9700\u8981\u51cf\u4e00\uff0c$\\operatorname{t[lc].rcol}$\u540c\u7406\u3002\n\n## AC code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstdlib>\n#include<cstring>\n#define gc getchar()\nusing namespace std;\nconst int N=1e5+10;\ninline void qr(int &x)\n{\n\tx=0;int f=1;char c=gc;\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=gc;}\n\twhile(c>='0'&&c<='9'){x=x*10+(c^48);c=gc;}\n\tx*=f;\n}\nvoid qw(int x)\n{\n\tif(x<0)x=-x,putchar('-');\n\tif(x/10)qw(x/10);\n\tputchar(x%10+48);\n}\nstruct node{int f,son[2],lcol,rcol,s,col,lz;bool rv;}t[N];\ninline bool nroot(int p){return t[t[p].f].son[0]==p||t[t[p].f].son[1]==p;}\ninline void update(int p)\n{\n\tint lc=t[p].son[0],rc=t[p].son[1];\n\tt[p].lcol=lc?t[lc].lcol:t[p].col;\n\tt[p].rcol=rc?t[rc].rcol:t[p].col;\n\tif(lc&&rc)t[p].s=t[lc].s+t[rc].s+1-(t[p].col==t[lc].rcol)-(t[p].col==t[rc].lcol);\n\telse if(lc)t[p].s=t[lc].s+1-(t[p].col==t[lc].rcol);\n\telse if(rc)t[p].s=t[rc].s+1-(t[p].col==t[rc].lcol);\n\telse t[p].s=1;\n}\nvoid crv(int p){if(!p)return ;swap(t[p].lcol,t[p].rcol);swap(t[p].son[0],t[p].son[1]);t[p].rv^=1;}\nvoid ccol(int p,int col){if(!p)return ;t[p].lcol=t[p].rcol=t[p].col=col;t[p].s=1;t[p].lz=col;}\nvoid pushdown(int p)\n{\n\tif(t[p].rv)t[p].rv=0,crv(t[p].son[0]),crv(t[p].son[1]);\n\tif(t[p].lz)ccol(t[p].son[0],t[p].lz),ccol(t[p].son[1],t[p].lz),t[p].lz=0;\n}\nvoid rotate(int p,int w)\n{\n\tint f=t[p].f,gf=t[f].f;\n\tint r=t[p].son[w],R=f;t[R].son[w^1]=r;if(r)t[r].f=R;\n\tr=p;R=gf;if(nroot(f))t[R].son[t[R].son[1]==f]=r;t[r].f=R;\n\tr=f;R=p;t[R].son[w]=r;t[r].f=R;update(f),update(p);\n}\nvoid sdfs(int p){if(nroot(p))sdfs(t[p].f);pushdown(p);}\nvoid splay(int p)\n{\n\tfor(sdfs(p);nroot(p);)\n\t{\n\t\tint f=t[p].f,gf=t[f].f;\n\t\tif(!nroot(f))rotate(p,t[f].son[0]==p);\n\t\telse\n\t\t{\n\t\t\tif(t[f].son[0]==p&&t[gf].son[0]==f)rotate(f,1),rotate(p,1);\n\t\t\telse if(t[f].son[0]==p&&t[gf].son[1]==f)rotate(p,1),rotate(p,0);\n\t\t\telse if(t[f].son[1]==p&&t[gf].son[0]==f)rotate(p,0),rotate(p,1);\n\t\t\telse rotate(f,0),rotate(p,0);\n\t\t}\n\t}\n}\nvoid access(int x)\n{\n\tfor(int y=0;x;x=t[y=x].f)\n\t\tsplay(x),t[x].son[1]=y,update(x);\n}\nvoid makeroot(int x)\n{\n\taccess(x),splay(x),crv(x);\n}\nvoid split(int x,int y)\n{\n\tmakeroot(x);access(y);splay(y);\n}\nvoid change(int x,int y)\n{\n\tint lz;qr(lz);\n\tsplit(x,y);ccol(y,lz);\n}\nvoid query(int x,int y)\n{\n\tsplit(x,y);\n\tqw(t[y].s);puts(\"\");\n}\nstruct edge{int y,next;}a[N<<1];int len,last[N];\nvoid ins(int x,int y){a[++len]=(edge){y,last[x]};last[x]=len;}\nvoid dfs(int x)\n{\n\tfor(int k=last[x],y;k;k=a[k].next)\n\t\tif((y=a[k].y)!=t[x].f)\n\t\t\tt[y].f=x,dfs(y);\n}\nint main()\n{\n\tint n,m;qr(n),qr(m);\n\tfor(int i=1;i<=n;i++)qr(t[i].col),t[i].lcol=t[i].rcol=t[i].col,t[i].s=1;\n\tfor(int i=1,x,y;i<n;i++)qr(x),qr(y),ins(x,y),ins(y,x);\n\tdfs(1);\n\twhile(m--)\n\t{\n\t\tchar s[3];int x,y;scanf(\"%s\",s+1);qr(x),qr(y);\n\t\tif(s[1]=='Q')query(x,y);\n\t\telse change(x,y);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565266310,
        "uid": 106232,
        "name": "_Sein",
        "ccfLevel": 0,
        "title": "[SDOI2011]\u67d3\u8272"
    },
    {
        "content": "\u6811\u5256\u505a\u6cd5\uff1a\n\n\u5c31\u662f\u4e24\u4e2adfs+\u4e00\u4e2a\u7ebf\u6bb5\u6811\n\n\u96be\u5ea6\u7684\u53d6\u51b3\u57fa\u672c==\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\u96be\u5ea6\n\n\u6240\u4ee5\u5bf9\u6709\u70b9\u7ebf\u6bb5\u6811\u57fa\u7840\u7684\uff0c\u6811\u5256\u4e5f\u4e0d\u96be\u505a\u5427\n\n\u8fd9\u91cc\u64cd\u4f5c\u6709\u4e8c\n\n\u4e00\uff1a\u4e24\u70b9\u95f4\u8def\u5f84\u67d3\u8272\n\n\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\n\n\u4e8c\uff1a\u67e5\u8be2\u8def\u5f84\u6bb5\u7684\u4e2a\u6570\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u5982\u4f55\u505a\n\n\u6211\u4eec\u53d1\u73b0\u4e24\u7aef\u533a\u95f4\u7684\u5408\u5e76\u53d6\u51b3\u4e8e\u4ed6\u4eec\u76f8\u8fde\u63a5\u7684\u90a3\u4e24\u4e2a\u989c\u8272\n\n\u6bd4\u5982\u8fd9\u5f20\u56fe\n![](https://i.loli.net/2018/12/25/5c22341e3efd1.png)\n\u4ed6\u4e24\u8fb9\u533a\u95f4\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5b8c\u5168\u5c31\u662f\u5de6\u533a\u95f4\u7b54\u6848+\u53f3\u533a\u95f4\u7b54\u6848\u4e5f\u5c31\u662f2+2\n\n\u4f46\u662f\u8fd9\u6837\n\n![](https://i.loli.net/2018/12/25/5c22343526dcb.png)\n\n\u4ed6\u4eec\u5408\u5e76\u7684\u7b54\u6848\u5c31\u662f2+2-1\u4e86\u4e5f\u5c31\u662f\u4e2d\u95f4\u8fde\u63a5\u7684\u4e24\u4e2a\u989c\u8272\u76f8\u540c\u65f6\u8981\u51cf1\n\n\u660e\u767d\u4e86\u8fd9\u4e2apushup\u4e5f\u5c31\u4e0d\u96be\u5199\u4e86\n\n\u8fd9\u91cc\u5728\u8bf4\u4e00\u4e0b\u67e5\u8be2\u64cd\u4f5c\n\n\u7531\u4e8e\u662f\u5206\u5f00\u67e5\u8be2\u7684\uff0c\u6240\u4ee5\u4e5f\u6709\u53ef\u80fd\u4f1a\u4e2d\u95f4\u76f8\u540c\u800c\u6ca1\u6709\u51cf1\n\n\u8fd9\u91cc\u5c31\u6709\u70b9\u5957\u8def(\u6280\u5de7\uff1f)\u4e86\uff0c\u7559\u7ed9\u4f60\u4eec\u60f3\u5427\n\n\u5149\u7ebf\u6bb5\u6811\u4e0a\u5c31\u5b8c\u4e8b\u4e86\u5417\uff0c\u5f53\u7136\u4e0d\u662f\n\n\u6811\u94fe\u5256\u5206\u628a\u6811\u7ed9\u5256\u4e86\u5f53\u7136\u4f1a\u6709\u5f71\u54cd\n\n\u8def\u5f84\u4e0a\u7684\u7ef4\u62a4\u548c\u5e8f\u5217\u7ef4\u62a4\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u53ea\u9700\u8981\u770b\u4e00\u4e0b\u4e24\u6761\u94fe\u4e4b\u95f4\u662f\u5426\u989c\u8272\u76f8\u540c\u5c31\u53ef\u4ee5\u4e86\n\n\u597d\u4e86,\u518d\u4e0d\u61c2\u5c31\u53bb\u770b\u4e00\u4e0b\u4ee3\u7801\u5427\n\n```cpp\n#include <bits/stdc++.h>\n#define FOR(i,a,b) for(int i=a;i<=b;++i)\nusing namespace std;\nconst int N=100007;\nint read() {\n\tint x=0,f=1;char s=getchar();\n\tfor(;s>'9'||s<'0';s=getchar()) if(s=='-') f=-1;\n\tfor(;s>='0'&&s<='9';s=getchar()) x=x*10+s-'0';\n\treturn x*f;\n}\nint n,m,a[N],col[N],top[N],f[N],son[N],siz[N],dep[N],idx[N],cnt;\nstruct node {\n\tint v,nxt;\n}e[N<<1];\nint head[N],tot;\nvoid add_edge(int u,int v) {\n\te[++tot].v=v;\n\te[tot].nxt=head[u];\n\thead[u]=tot;\n}\nvoid dfs1(int u,int fa) {\n\tdep[u]=dep[fa]+1;\n\tsiz[u]=1;\n\tf[u]=fa;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].v;\n\t\tif(v==fa) continue;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[son[u]] < siz[v]) son[u]=v;\n\t}\n}\nvoid dfs2(int u,int topf) {\n\tidx[u]=++cnt;\n\ta[cnt]=col[u];\n\ttop[u]=topf;\n\tif(!son[u]) return;\n\tdfs2(son[u],topf);\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t\tif(!idx[e[i].v]) dfs2(e[i].v,e[i].v);\n}\nnamespace seg_tree {\n\t#define ls (rt<<1)\n\t#define rs (rt<<1|1)\n\tstruct node {\n\t\tint l,r,lc,rc;\n\t\tint sum,lazy;\n\t}e[N<<2];\n\tvoid pushup(int rt) {\n\t\tif(ls&&rs) {\n\t\t\te[rt].sum=e[ls].sum+e[rs].sum-(e[ls].rc==e[rs].lc);\n\t\t\te[rt].lc=e[ls].lc;\n\t\t\te[rt].rc=e[rs].rc;\n\t\t} else e[rt]=e[ls+rs];\n\t}\n\tvoid build(int l,int r,int rt) {\n\t\te[rt].l=l,e[rt].r=r;\n\t\tif(l==r) {\n\t\t\te[rt].lc=e[rt].rc=a[l];\n\t\t\te[rt].sum=1;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,ls);\n\t\tbuild(mid+1,r,rs);\n\t\tpushup(rt);\n\t}\n\tvoid tag(int rt,int k) {\n\t\te[rt].lc=e[rt].rc=k;\n\t\te[rt].sum=1;\n\t\te[rt].lazy=k;\n\t}\n\tvoid pushdown(int rt) {\n\t\tif(e[rt].lazy) {\n\t\t\ttag(ls,e[rt].lazy);\n\t\t\ttag(rs,e[rt].lazy);\n\t\t\te[rt].lazy=0;\n\t\t}\n\t}\n\tvoid modify(int L,int R,int k,int rt) {\n\t\tif(L<=e[rt].l&&e[rt].r<=R) {\n\t\t\ttag(rt,k);\n\t\t\treturn;\n\t\t}\n\t\tpushdown(rt);\n\t\tint mid=(e[rt].l+e[rt].r)>>1;\n\t\tif(L<=mid) modify(L,R,k,ls);\n\t\tif(R>mid) modify(L,R,k,rs);\n\t\tpushup(rt);\n\t}\n\tnode query(int L,int R,int rt) {\n\t\tif(L<=e[rt].l&&e[rt].r<=R) return e[rt];\n\t\tpushdown(rt);\n\t\tint mid=(e[rt].l+e[rt].r)>>1;\n\t\tif(L<=mid && R>mid) {\n\t\t\tnode a=query(L,R,ls),b=query(L,R,rs);\n\t\t\tnode c;\n\t\t\tc.lc=a.lc;\n\t\t\tc.rc=b.rc;\n\t\t\tc.sum=a.sum+b.sum-(a.rc==b.lc);\n\t\t\treturn c;\n\t\t}\n\t\tif(L<=mid) return query(L,R,ls);\n\t\tif(R>mid) return query(L,R,rs);\n\t}\n\tint ask(int L,int rt) {\n\t\tif(e[rt].l==e[rt].r) return e[rt].lc;\n\t\tpushdown(rt);\n\t\tint mid=(e[rt].l+e[rt].r)>>1;\n\t\tif(L<=mid) return ask(L,ls);\n\t\telse return ask(L,rs);\n\t}\n}\nvoid CC(int x,int y,int k) {\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x,y);\n\t\tseg_tree::modify(idx[top[x]],idx[x],k,1);\n\t\tx=f[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tseg_tree::modify(idx[x],idx[y],k,1);\n}\nvoid QQ(int x,int y) {\n\tint ans=0;\n\twhile(top[x]!=top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x,y);\n\t\tans+=seg_tree::query(idx[top[x]],idx[x],1).sum;\n\t\tans-=(seg_tree::ask(idx[top[x]],1)==seg_tree::ask(idx[f[top[x]]],1));\n\t\tx=f[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tans+=seg_tree::query(idx[x],idx[y],1).sum;\n\tprintf(\"%d\\n\", ans);\n}\nint main() {\n\tn=read(),m=read();\n\tFOR(i,1,n) col[i]=read();\n\tFOR(i,2,n) {\n\t\tint x=read(), y=read();\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tseg_tree::build(1,n,1);\n\tFOR(i,1,m) {\n\t\tchar s=getchar();\n\t\twhile(s==' '||s=='\\n') s=getchar();\n\t\tint x=read(), y=read(), z;\n\t\tif(s=='C') z=read(),CC(x,y,z);\n\t\telse QQ(x,y);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1545745554,
        "uid": 92100,
        "name": "\u590d\u6742\u7684\u54c8\u76ae\u72d7",
        "ccfLevel": 7,
        "title": "P2486 [SDOI2011]\u67d3\u8272"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u6811\u5256+[\u73c2\u6735\u8389\u6811](https://www.luogu.org/blog/ACdreamer/chtholly-tree)\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u663e\u7136\u662f\u8981\u6811\u5256\u4e86\u3002\u6b64\u9898\u5927\u7ea6\u6709\u4e00\u534a\u7684\u64cd\u4f5c\u4e3a\u73c2\u6735\u8389\u6811\u7684\u533a\u95f4\u8d4b\u503c\uff0c\u53ef\u4ee5\u8003\u8651\u73c2\u6735\u8389\u6811\u9a97\u5206\u3002\uff08\u7136\u540e\u4e00\u4e0d\u5c0f\u5fc3\u5c31A\u4e86\uff09\u53e6\u4e00\u90e8\u5206\u7684\u64cd\u4f5c\u4e5f\u5f88\u597d\u641e\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff1a\n\n```\n#include<cctype>\n#include<cstdio>\n#include<set>\n#include<algorithm>\n\ninline int Read()\n{\n\tint x=0;char c=getchar();\n\twhile(!isdigit(c))\n\t\tc=getchar();\n\twhile(isdigit(c))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x;\n}\n\nconst int maxn=200000+10;\nint n,m;\nint son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],size[maxn],top[maxn],w[maxn],wt[maxn];\n\nstruct Edge\n{\n\tint to,next;\n}edge[maxn];\nint head[maxn],ecnt;\n\nvoid Add_edge(int u,int v)\n{\n\tedge[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n\tedge[++ecnt]=(Edge){u,head[v]};\n\thead[v]=ecnt;\n}\n\nstruct node\n{\n\tint l,r;\n\tmutable int v;\n\tnode(int L,int R=-1,int V=0):l(L),r(R),v(V){}\n\tbool operator<(const node& o) const\n\t{\n\t\treturn l < o.l;\n\t}\n};\n//\u8fd9\u6837\u7684\u4e00\u4e2a\u8282\u70b9\u8868\u793a[l,r]\u5185\u7684\u6240\u6709\u6570\u90fd\u662fv\u3002\n\ntypedef node Ret;\nRet operator + (Ret l,Ret r)\n{\n\treturn Ret(l.l?l.l:r.l,r.r?r.r:l.r,l.v+r.v-(l.r==r.l));\n}\n//\u8fd9\u6837\u7684\u4e00\u4e2aRet\u8868\u793a\u5de6\u8fb9\u989c\u8272\u4e3al\uff0c\u53f3\u8fb9\u989c\u8272\u4e3ar\uff0c\u5171\u6709v\u6bb5\u989c\u8272\u3002\n\nusing std::set;\nset<node> s;\n#define IT set<node>::iterator\n\n//split(pos)\u64cd\u4f5c\u662f\u6307\u5c06\u539f\u6765\u542b\u6709pos\u4f4d\u7f6e\u7684\u8282\u70b9\u5206\u6210\u4e24\u90e8\u5206\uff1a[l,pos\u22121]\u548c[pos,r]\u3002\nIT split(int pos)\n{\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos) return it;\n\t--it;\n\tint L=it->l,R=it->r,V=it->v;\n\ts.erase(it);\n\ts.insert(node(L,pos-1,V));\n\treturn s.insert(node(pos,R,V)).first;\n}\n\n//\u533a\u95f4\u8d4b\u503c\uff0c\u628al\u548cr+1\u8fdb\u884csplit\uff0c\u518d\u628a[l,r]\u5408\u6210\u4e00\u4e2a\u8282\u70b9\u3002\nvoid assign(int l,int r,int val=0)\n{\n\tIT itr=split(r+1),itl=split(l);\n\ts.erase(itl,itr);\n\ts.insert(node(l,r,val));\n}\n\nvoid build(int l,int r)\n{\n\tint cnt=1,last=wt[l];\n\tfor(int i=l+1;i<=r;++i)\n\t{\n\t\tif(wt[i]!=last)\n\t\t{\n\t\t\ts.insert(node(i-cnt,i-1,last));\n\t\t\tcnt=1;\n\t\t\tlast=wt[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++cnt;\n\t\t}\n\t}\n\ts.insert(node(r+1-cnt,r,last));\n\ts.insert(node(r+1,r+3,0));\n}\n\nRet query(int l,int r)\n{\n\tRet ans=Ret(0);\n\tIT itr=split(r+1),itl=split(l);\n\tfor(;itl!=itr;++itl)\n\t{\n\t\tans=ans+Ret(itl->v,itl->v,1);\n\t}\n\treturn ans;\n}\n\nint qRange(int x,int y)\n{\n\tRet lans=Ret(0),rans=Ret(0);\n    //lans\u8868\u793ax\u4e00\u4fa7\u7684\u7ed3\u679c\uff0crans\u8868\u793ay\u4e00\u4fa7\u7684\u7ed3\u679c\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]])\n\t\t{\n\t\t\tlans=query(id[top[x]],id[x])+lans;\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\trans=query(id[top[y]],id[y])+rans;\n\t\t\ty=fa[top[y]];\n\t\t}\n\t}\n\tif(dep[x]>dep[y])\n\t{\n\t\tlans=query(id[y],id[x])+lans;\n\t}\n\telse\n\t{\n\t\trans=query(id[x],id[y])+rans;\n\t}\n\tstd::swap(lans.l,lans.r);\n\treturn (lans+rans).v;\n}\n\nvoid updRange(int x,int y,int k)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tstd::swap(x,y);\n\t\tassign(id[top[x]],id[x],k);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tstd::swap(x,y);\n\tassign(id[x],id[y],k);\n}\n\n//\u6811\u5256\u57fa\u64cd\nvoid dfs1(int x,int f,int deep)\n{\n\tdep[x]=deep;\n\tfa[x]=f;\n\tsize[x]=1;\n\tint maxson=-1;\n\tfor(int i=head[x];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v==f)\n\t\t\tcontinue;\n\t\tdfs1(v,x,deep+1);\n\t\tsize[x]+=size[v];\n\t\tif(size[v]>maxson)\n\t\t{\n\t\t\tson[x]=v;\n\t\t\tmaxson=size[v];\n\t\t}\n\t}\n}\n\nvoid dfs2(int x,int topf)\n{\n\tid[x]=++cnt;\n\twt[cnt]=w[x];\n\ttop[x]=topf;\n\tif(!son[x])\n\t\treturn;\n\tdfs2(son[x],topf);\n\tfor(int i=head[x];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(v!=fa[x]&&v!=son[x])\n\t\t\tdfs2(v,v);\n\t}\n}\n\nint main()\n{\n\tn=Read(),m=Read();\n\tfor(int i=1;i<=n;i++)\n\t\tw[i]=Read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint a=Read(),b=Read();\n\t\tAdd_edge(a,b);\n\t}\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tbuild(1,n);\n\tchar opt[5];\n\twhile(m--)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%s\",opt);\n\t\tif(opt[0]=='C')\n\t\t{\n\t\t\tx=Read(),y=Read(),z=Read();\n\t\t\tupdRange(x,y,z);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx=Read(),y=Read();\n\t\t\tprintf(\"%d\\n\",qRange(x,y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539500678,
        "uid": 53374,
        "name": "SuperJvRuo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "## \u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011\n\n### \u3010\u9898\u610f\u3011\n\u6c42\u6811\u4e0a\u989c\u8272\u5757\u4e2a\u6570\u3002\n\n### \u3010\u5206\u6790\u3011\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u7684\u60f3\u5230\u7528\u6811\u94fe\u5256\u5206\u3002\n\n$modify$\u548c$query$\u7684\u90e8\u5206\u4e0e\u6a21\u677f\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u601d\u8003\u4e00\u4e0b$update$\uff08\u4e0a\u63a8\uff09\uff0c$pushdown$\uff08\u4e0b\u63a8\uff09\u548c$merge$\uff08\u7ebf\u6bb5\u6811\u5408\u5e76\uff09\u8fd9\u51e0\u4e2a\u51fd\u6570\u3002\n\n#### 1. $update$\u51fd\u6570\n\u8ba9\u6211\u4eec\u770b\u5982\u4e0b\u4e24\u4e2a\u533a\u95f4\uff1a\n\n\tleft: 1 1 2 2   right: 2 3 3 2\n\n$left$\u533a\u95f4\u7684\u4e2a\u6570\u662f$2$\uff0c$right$\u533a\u95f4\u7684\u4e2a\u6570\u662f$3$\u3002\u4f46\u662f\u8fd9\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u8d77\u6765\u662f\n\n\t1 1 2 2 2 3 3 2\n\u4e2a\u6570\u662f$4$\uff0c\u5e76\u4e0d\u662f$2+3=5$\u3002\n\n\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\n\n\u5f88\u663e\u7136\uff0c\u6211\u4eec\u53d1\u73b0$left$\u533a\u95f4\u7684\u6700\u53f3\u8fb9\u7684\u503c\u662f$2$\uff0c$right$\u533a\u95f4\u7684\u6700\u5de6\u8fb9\u7684\u503c\u4e5f\u662f$2$\u3002\u628a\u4e24\u8005\u5408\u5e76\uff0c$left$\u7684\u6700\u53f3\u8fb9\u533a\u95f4\u4e0e$right$\u7684\u6700\u5de6\u8fb9\u533a\u95f4\u5728\u5408\u5e76\u65f6\uff0c\u88ab\u5408\u5e76\u6210\u4e86\u540c\u4e00\u4e2a\u533a\u95f4\u3002\u56e0\u6b64\u5408\u5e76\u5b8c\u7684\u533a\u95f4\u4e2a\u6570\u8981$-1$\uff0c\u6240\u4ee5\u662f$2+3-1=4$\u3002\n\n\u5728\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u9700\u8bb0\u5f55\u6bcf\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5de6\u8fb9\u989c\u8272$lc$\uff0c\u6700\u53f3\u8fb9\u989c\u8272$rc$\uff0c\u4ee5\u53ca\u989c\u8272\u5757\u4e2a\u6570$sum$\u3002\n\n```cpp\nvoid update(int o)\n{\n\tdat[o].sum = dat[lson].sum+dat[rson].sum;\n\tif(dat[lson].rc==dat[rson].lc) //\u5982\u679cleft\u533a\u95f4\u7684\u53f3\u989c\u8272=right\u533a\u95f4\u7684\u5de6\u989c\u8272\uff0c\u4e24\u533a\u95f4\u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\n\t\tdat[o].sum--; //\u9700\u8981-1\n\tdat[o].lc = dat[lson].lc;\n\tdat[o].rc = dat[rson].rc;\n}\n```\n\n#### 2. $pushdown$\u51fd\u6570\n\u6211\u4eec\u5f88\u5bb9\u6613\u5f97\u5230\uff0c\u66f4\u65b0\u8fc7\u7684$left$\u533a\u95f4\u548c$right$\u533a\u95f4\uff0c\u56e0\u4e3a\u5185\u90e8\u989c\u8272\u5747\u76f8\u540c\uff0c\u6240\u4ee5$sum$\u90fd\u662f$1$\u3002\n```cpp\nvoid pushdown(int o,int l,int r)\n{\n\tif(dat[o].lazy>=0)\n\t{\n\t\tdat[lson].sum = dat[rson].sum = 1;\n\t\tdat[lson].lc = dat[lson].rc = dat[rson].lc = dat[rson].rc = dat[o].lazy;\n\t\tdat[lson].lazy = dat[rson].lazy = dat[o].lazy;\n\t}\n\tdat[o].lazy = -1;\n}\n```\n\n#### 3. $merge$\u51fd\u6570\n\u4e24\u7ebf\u6bb5\u6811\u5408\u5e76\u4e0e$update$\u76f8\u5dee\u65e0\u51e0\uff0c\u5728\u6b64\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u4e0b\u9762\u662fAC\u4ee3\u7801\u3002\n```cpp\n/*\nluogu P2486\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define lson o<<1\n#define rson o<<1|1\n#define mid (l+r>>1)\n\nint n,q,c[100005];\nint ee,h[100005],nex[100005<<1],to[100005<<1];\nint cnt,mark[100005],a[100005];\nint dep[100005],f[100005],son[100005],siz[100005],top[100005];\nstruct segtree{\n\tint sum;\n\tint lc,rc;\n\tint lazy;\n\tvoid init()\n\t{\n\t\tsum = 0;\n\t\tlc = rc = lazy = -1;\n\t}\n}dat[100005<<2];\n\nvoid addedge(int x,int y)\n{\n\tnex[++ee] = h[x];\n\tto[ee] = y;\n\th[x] = ee;\n}\n\nvoid dfs1(int x,int pre)\n{\n\tdep[x] = dep[pre]+1;\n\tf[x] = pre;\n\tsiz[x] = 1;\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(to[i]!=pre)\n\t\t{\n\t\t\tdfs1(to[i],x);\n\t\t\tsiz[x] += siz[to[i]];\n\t\t\tif(siz[to[i]]>siz[son[x]])\n\t\t\t\tson[x] = to[i];\n\t\t}\n}\n\nvoid dfs2(int x,int topx,int pre)\n{\n\tmark[x] = ++cnt;\n\ta[mark[x]] = c[x];\n\ttop[x] = topx;\n\tif(!son[x])\n\t\treturn;\n\tdfs2(son[x],topx,x);\n\tfor(int i=h[x];i;i=nex[i])\n\t\tif(to[i]!=son[x] && to[i]!=pre)\n\t\t\tdfs2(to[i],to[i],x);\n}\n\nvoid update(int o)\n{\n\tdat[o].sum = dat[lson].sum+dat[rson].sum;\n\tif(dat[lson].rc==dat[rson].lc)\n\t\tdat[o].sum--;\n\tdat[o].lc = dat[lson].lc;\n\tdat[o].rc = dat[rson].rc;\n}\n\nvoid build(int o,int l,int r)\n{\n\tdat[o].lazy = -1;\n\tif(l==r)\n\t{\n\t\tdat[o].sum = 1;\n\t\tdat[o].lc = dat[o].rc = a[l];\n\t\treturn;\n\t}\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\tupdate(o);\n}\n\nvoid pushdown(int o,int l,int r)\n{\n\tif(dat[o].lazy>=0)\n\t{\n\t\tdat[lson].sum = dat[rson].sum = 1;\n\t\tdat[lson].lc = dat[lson].rc = dat[rson].lc = dat[rson].rc = dat[o].lazy;\n\t\tdat[lson].lazy = dat[rson].lazy = dat[o].lazy;\n\t}\n\tdat[o].lazy = -1;\n}\n\nsegtree merge(segtree a,segtree b)\n{\n\tsegtree t;\n\tt.sum = a.sum+b.sum;\n\tif(a.rc==b.lc)\n\t\tt.sum--;\n\tt.lc = a.lc;\n\tt.rc = b.rc;\n\tt.lazy = -1;\n\treturn t;\n}\n\nvoid modify(int o,int l,int r,int ql,int qr,int v)\n{\n\tif(l>=ql && r<=qr)\n\t{\n\t\tdat[o].sum = 1;\n\t\tdat[o].lc = dat[o].rc = v;\n\t\tdat[o].lazy = v;\n\t\treturn;\n\t}\n\tpushdown(o,l,r);\n\tif(ql<=mid)\n\t\tmodify(lson,l,mid,ql,qr,v);\n\tif(qr>mid)\n\t\tmodify(rson,mid+1,r,ql,qr,v);\n\tupdate(o);\n}\n\nsegtree query(int o,int l,int r,int ql,int qr)\n{\n\tif(l>=ql && r<=qr)\n\t\treturn dat[o];\n\tpushdown(o,l,r);\n\tif(qr<=mid)\n\t\treturn query(lson,l,mid,ql,qr);\n\telse if(ql>mid)\n\t\treturn query(rson,mid+1,r,ql,qr);\n\treturn merge(query(lson,l,mid,ql,qr),query(rson,mid+1,r,ql,qr));\n}\n\nvoid modify_(int x,int y,int z)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tswap(x,y);\n\t\tmodify(1,1,n,mark[top[x]],mark[x],z);\n\t\tx = f[top[x]];\n\t}\n\tif(dep[x]<dep[y])\n\t\tmodify(1,1,n,mark[x],mark[y],z);\n\telse\n\t\tmodify(1,1,n,mark[y],mark[x],z);\n}\n\nint query_(int x,int y)\n{\n\tsegtree l,r;\n\tl.init();\n\tr.init();\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]>dep[top[y]])\n\t\t{\n\t\t\tl = merge(query(1,1,n,mark[top[x]],mark[x]),l);\n\t\t\tx = f[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr = merge(query(1,1,n,mark[top[y]],mark[y]),r);\n\t\t\ty = f[top[y]];\n\t\t}\n\t}\n\tif(dep[x]>dep[y])\n\t\tl = merge(query(1,1,n,mark[y],mark[x]),l);\n\telse\n\t\tr = merge(query(1,1,n,mark[x],mark[y]),r);\n\treturn l.sum+r.sum-(l.lc==r.lc);\n}\n\nint main()\n{\n\tcin>>n>>q;\n\tfor(int i=1;i<=n;scanf(\"%d\",c+i),i++);\n\tfor(int i=1,x,y;i<n&&scanf(\"%d %d\",&x,&y);i++)\n\t{\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1,0);\n\tbuild(1,1,n);\n\twhile(q--)\n\t{\n\t\tchar oper;\n\t\tcin>>oper;\n\t\tif(oper=='C')\n\t\t{\n\t\t\tint x,y,z;\n\t\t\tscanf(\"%d %d %d\",&x,&y,&z);\n\t\t\tmodify_(x,y,z);\n\t\t}\n\t\telse if(oper=='Q')\n\t\t{\n\t\t\tint x,y;\n\t\t\tscanf(\"%d %d\",&x,&y);\n\t\t\tprintf(\"%d\\n\",query_(x,y));\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n/*\n6 12\n0 0 11 4 2 6 \n5 4\n3 5\n3 1\n1 2\n6 5\nQ 2 6\nC 3 1 3\nQ 4 5\nQ 2 6\nQ 2 3\nC 3 3 5\nQ 2 1\nC 3 4 3\nC 2 4 2\nQ 1 3\nQ 1 6\nC 4 3 6\n\n10 4\n26 22 46 21 10 46 43 9 11 33 \n2 1\n3 2\n4 3\n5 2\n6 5\n7 3\n8 7\n9 5\n10 5\nC 10 1 28\nC 4 5 17\nQ 7 10\nQ 10 7\n\n7 20\n8 2 8 1 6 15 8\n4 2\n2 3\n5 3\n1 4\n6 5\n7 6\nC 6 3 1\nQ 6 7\nC 6 6 4\nC 6 6 5\nC 2 1 5\nQ 2 3\nC 7 1 6\nQ 4 6\nC 1 6 2\nQ 7 1\nC 7 5 7\nQ 6 5\nC 3 4 1\nQ 5 4\nQ 3 4\nC 4 2 6\nC 3 2 4\nQ 5 6\nQ 5 2\nC 7 4 2\n*/\n```\n\n### \u3010\u540e\u8bb0\u3011\n\u4e0e\u8fd9\u9053\u9898\u7c7b\u4f3c\u7684\u8fd8\u6709[\u6811\u4e0a\u6700\u5927\u5b50\u6bb5\u548c](https://www.luogu.com.cn/problem/SP6779)\uff08\u53e6\u9644[\u4e2a\u4eba\u9898\u89e3](https://www.luogu.com.cn/blog/123298/solution-sp6779)\uff09\uff0c\u5927\u5bb6\u8fd8\u53ef\u4ee5\u505a\u4e00\u4e0b\u8fd9\u9053\u9898\u3002\n\n\u795d\u5927\u5bb6AC\u6109\u5feb\uff01",
        "postTime": 1577592304,
        "uid": 123298,
        "name": "kouylty",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "### \u601d\u8def\uff1a\u770b\u5230\u4e24\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u64cd\u4f5c\uff0c\u8fd8\u662f\u4e00\u68f5\u6811\uff0c\u5c31\u60f3\u5230\u4e86\u6811\u5256\uff08\u7136\u800c\u6211\u5e76\u4e0d\u4f1aLCT\uff09\u2026\u2026\n\n\n------------\n\n\u5728\u5efa\u7ebf\u6bb5\u6811\u548c\u4fee\u6539\u65f6\u95ee\u9898\u4e0d\u5927\u52a0\u4e0a\u5408\u5e76\u533a\u95f4\uff08\u5373\u7ebf\u6bb5\u6811\u5408\u5e76\u65f6\uff0c\u82e5\u5de6\u53f3\u5b50\u6811\u6a61\u80f6\u7684\u5730\u65b9\u989c\u8272\u76f8\u540c\u5c31\u989c\u8272\u6bb5\u6570\u51cf\u4e00\uff09\uff0c\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\n\n##### ~~\u4f46\u662f\u8bf4\u5b9e\u8bdd\uff0c\u7528\u6811\u5256\u5904\u7406\u989c\u8272\u6bb5\u6570\uff0c\u771f\u7684\u5341\u5206\u6076\u5fc3~~\n\n\n------------\n\n\u4f46\u662f\u6211\u52a0\u4e86\u4e00\u4e2a\u5c0f\uff08mei\uff09\u5c0f\uff08yong\uff09\u7684\u4f18\u5316\uff0c\u5c31\u662f\u6c42\u4e86\u6811\u7684\u91cd\u5fc3\n\n\n------------\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=200001;\nstruct st{\n    int l,r,num;\n}t[N<<2];\nint n,m,rt,k,cnt,ans,rc,lc;\nint nxt[N<<1],last[N],a[N<<1];\nint sz[N],fa[N],dep[N],id[N],c[N],top[N],son[N];\nint color[N],lazy[N<<2];\nvoid add(int x,int y){\n    nxt[++k]=last[x];\n    last[x]=k;\n    a[k]=y;\n}\nvoid dfs(int x,int fa){\t\t\t//\u6c42\u6811\u7684\u91cd\u5fc3\n    bool flag=0;\n    sz[x]=1;\n    for (int i=last[x];i;i=nxt[i]){\n        int y=a[i];\n        if (y==fa) continue;\n        dfs(y,x);\n        sz[x]+=sz[y];\n        if (sz[y]>n/2) flag=1; \n    }\n    if (!flag&&n-sz[x]<=n/2) rt=x;\n}\nvoid dfs1(int x,int f,int d){\t//\u6b63\u5e38\u6811\u5256\n    dep[x]=d;\n    fa[x]=f;\n    sz[x]=1;\n    int maxson=-1;\n    for (int i=last[x];i;i=nxt[i]){\n        if (a[i]==f) continue;\n        dfs1(a[i],x,d+1);\n        sz[x]+=sz[a[i]];\n        if (sz[a[i]]>maxson) maxson=sz[a[i]],son[x]=a[i];\n    }\n}\nvoid dfs2(int x,int topf){\t//\u5efa\u7ebf\u6bb5\u6570\n    id[x]=++cnt;\n    c[cnt]=color[x];\n    top[x]=topf;\n    if (!son[x]) return ;\n    dfs2(son[x],topf);\n    for (int i=last[x];i;i=nxt[i]){\n        if (a[i]==fa[x]||a[i]==son[x]) continue;\n        dfs2(a[i],a[i]);\n    }\n}\nvoid pushdown(int rt,int l,int mid,int r){\t//\u4e0b\u653e\u61d2\u6807\u8bb0\n    if (!lazy[rt]) return ;\n    t[rt<<1].num=1;t[rt<<1].l=t[rt<<1].r=lazy[rt];\n    t[rt<<1|1].num=1;t[rt<<1|1].l=t[rt<<1|1].r=lazy[rt];\n    lazy[rt<<1]=lazy[rt<<1|1]=lazy[rt];\n    lazy[rt]=0;\n}\nvoid change(int rt){\t\t\t\t\t\t//\t\u5c31\u662f\u5904\u7406\u5408\u5e76\u533a\u95f4\u7684\u60c5\u51b5\n    t[rt].l=t[rt<<1].l;t[rt].r=t[rt<<1|1].r;\n    t[rt].num=t[rt<<1].num+t[rt<<1|1].num;\n    if (t[rt<<1].r==t[rt<<1|1].l) t[rt].num--;\n}\nvoid build(int rt,int l,int r){\n    if (l==r){\n       t[rt].l=t[rt].r=c[l];t[rt].num=1;\n       return ;\n    }\n    int mid=(l+r)>>1;\n    build(rt<<1,l,mid);build(rt<<1|1,mid+1,r);\n    change(rt);\n}\nvoid update(int rt,int l,int r,int x,int y,int z){\n    if (l==x&&r==y){\n        t[rt].l=t[rt].r=z;\n        t[rt].num=1;\n        lazy[rt]=z;\n        return ;\n    }\n    int mid=(l+r)>>1;\n    pushdown(rt,l,mid,r);\n    if (y<=mid) update(rt<<1,l,mid,x,y,z);\n    else if (x>mid) update(rt<<1|1,mid+1,r,x,y,z);\n    else update(rt<<1,l,mid,x,mid,z),update(rt<<1|1,mid+1,r,mid+1,y,z);\n    change(rt);\n}\nint query(int rt,int l,int r,int x,int y,int L,int R){\n    //\u5343\u4e07\u4e0d\u80fd\u628a\u4e0b\u9762\u4e24\u53e5\u8bdd\u5199\u6210 \u6211\u624d\u4e0d\u4f1a\u8bf4\u6211\u539f\u6765\u5c31\u662f\u8fd9\u4e48\u5199\u7684\u5462\n    /*\n    if (l==x&&r==y){\n\t    lc=t[rt].l;\n\t    rc=t[rt].r;\n        return t[rt].num;\n    }\n    */\n    //\u56e0\u4e3aquery\u4e0b\u4f20\u6807\u8bb0\u65f6\u4f1a\u4f7f\u5f97l\uff0cr\u4e0d\u5728\u662f\u539f\u672c\u7684\u533a\u95f4\uff0c\u800c\u662f\u4f1a\u88ab\u5206\u5f00\uff0c\u800c\u6240\u8981\u6c42\u7684\u662f\u6700\u5927\u7684\u90a3\u4e2a\u533a\u95f4\u7684lc\u548crc\uff1b\n    //\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u4e5f\u53ea\u6709\u6211\u8fd9\u79cd\u849f\u84bb\u4f1a\u5199\u9519\u4e86\n\tif(L==l) lc=t[rt].l;\n\tif(R==r) rc=t[rt].r;\n    if (l==x&&r==y){\n        return t[rt].num;\n    }\n    int mid=(l+r)>>1;\n    pushdown(rt,l,mid,r);\n    if (y<=mid) return query(rt<<1,l,mid,x,y,L,R);\n    else if (x>mid) return query(rt<<1|1,mid+1,r,x,y,L,R);\n    else return query(rt<<1,l,mid,x,mid,L,R)+query(rt<<1|1,mid+1,r,mid+1,y,L,R)-(t[rt<<1].r==t[rt<<1|1].l?1:0);\n}\nvoid t_add(int x,int y,int z){\n    while (top[x]!=top[y]){\n        if (dep[top[x]]<dep[top[y]]) swap(x,y);\n        update(1,1,n,id[top[x]],id[x],z);\n        x=fa[top[x]];\n    }\n    if (dep[x]>dep[y]) swap(x,y);\n    update(1,1,n,id[x],id[y],z);\n}\nint t_ask(int x,int y){//\u91cd\u70b9\uff01\uff01\uff01\n//\u5728\u540c\u65f6\u4ea4\u6362c1,c2\u4e0ex,y\u662f\u975e\u5e38\u7384\u5b66\u7684\u3002\n    ans=0;\n\tint c1=-1,c2=-1;\n    while (top[x]!=top[y]){\n        if (dep[top[x]]<dep[top[y]]) swap(x,y),swap(c1,c2);\n        ans+=query(1,1,n,id[top[x]],id[x],id[top[x]],id[x])-(c1==rc?1:0);\n        x=fa[top[x]];c1=lc;\n    }\n    if (dep[x]>dep[y]) swap(x,y),swap(c1,c2);\n    ans+=query(1,1,n,id[x],id[y],id[x],id[y])-(c1==lc?1:0)-(c2==rc?1:0);\n    return ans;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;i++) scanf(\"%d\",&color[i]);\n    for (int x,y,i=1;i<n;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);add(y,x);\n    }\n    dfs(1,0);\n    memset(sz,0,sizeof(sz));\n    dfs1(rt,0,1);\n    dfs2(rt,rt);\n    build(1,1,n);\n    char c;\n    for (int x,y,z,i=1;i<=m;i++){\n        cin>>c;\n        if (c=='C'){\n            scanf(\"%d%d%d\",&x,&y,&z);\n            t_add(x,y,z);\n        }else{\n            scanf(\"%d%d\",&x,&y);\n            printf(\"%d\\n\",t_ask(x,y));\n        }\n    }\n    return 0;\n}\n```\n\n~~\u8fd9\u9053\u9898\u5c31\u662f\u6811\u94fe\u5256\u5206\u52a0\u4e00\u70b9\u5c0f\u5c0f\u7684\u5904\u7406\uff0c\u4f46\u5c45\u7136\u548c\u6a21\u677f\u4e00\u4e2a\u96be\u5ea6\u7b49\u7ea7(\u7b11\u54ed)~~\n\n### **_\u6b22\u8fce\u5de8\u4f6c\u6765Di\uff0cQAQ_**",
        "postTime": 1570244010,
        "uid": 23170,
        "name": "\u56de\u9752\u7edd\u5f71",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u672c\u9898\u5c31\u662f\u5c06\u6811\u5256\u548c\u8fde\u7eed\u533a\u95f4\u6570\u7ed3\u5408\u4e86\u4e00\u4e0b  \n\u4e8c\u8005\u90fd\u662f\u677f\u5b50\uff0c\u4f46\u662fquery\u7684\u90e8\u5206\u503c\u5f97\u5bfb\u5473  \n[\u8fd9\u91cc](https://www.luogu.org/blog/user48618/solution-p2486)\u8be6\u7ec6\u7684\u8bb2\u89e3\u4e86query\u7684\u8fc7\u7a0b    \n\u5728\u6b64\u4ec5\u5bf9query\u4ee3\u7801\u8fdb\u884c\u89e3\u91ca   \n\u9644\u56fe\uff1a  \n![](http://images.cnblogs.com/cnblogs_com/tply/1142800/o_graph.png)\n```cpp\n#include<bits/stdc++.h>\n#define lc (p<<1)\n#define rc (p<<1|1)\nusing namespace std;\nstruct Edge{\n\tint u,v,nxt;\n}e[200010];\nint head[100010],cnt;\ninline void add(int u,int v){\n\te[++cnt].u=u;\n\te[cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\nint a[100010],sub_a[100010];\nint siz[100010],fa[100010],deep[100010];\nvoid dfs1(int u,int father,int dis){\n\tfa[u]=father;\n\tsiz[u]=1;deep[u]=dis;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t\tif(e[i].v!=father){\n\t\t\tdfs1(e[i].v,u,dis+1);\n\t\t\tsiz[u]+=siz[e[i].v];\n\t\t}\n}\nint sub[100010],dfn,top[100010];\nvoid dfs2(int u,int is_heavy){\n\tif(!is_heavy)top[u]=u;//\u6ce8\u610f:\u53ea\u6709\u91cd\u513f\u5b50\u624d\u6709top\u4e00\u8bf4! \n\telse top[u]=top[fa[u]];\n\tsub[u]=++dfn;\n\tsub_a[dfn]=a[u];\n\tint max_siz=0,max_son=0;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v!=fa[u]&&siz[v]>max_siz)\n\t\t\tmax_siz=siz[v],max_son=v;\n\t}\n\tif(max_son)dfs2(max_son,1);\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(v!=fa[u]&&v!=max_son)\n\t\t\tdfs2(v,0);\n\t}\n}\nstruct Node{\n\tint l,r,sum,lsum,rsum,lazy;\n}T[400010];\ninline void pushup(int p){\n\tT[p].sum=T[lc].sum+T[rc].sum-(T[lc].rsum==T[rc].lsum);\n\tT[p].lsum=T[lc].lsum;T[p].rsum=T[rc].rsum;\n}\nvoid build(int p,int l,int r){\n\tT[p].l=l;T[p].r=r;\n\tif(l==r){\n\t\tT[p].lsum=T[p].rsum=sub_a[l];\n\t\tT[p].sum=1;return;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(lc,l,mid);\n\tbuild(rc,mid+1,r);\n\tpushup(p);\n\t//printf(\"%d %d %d\\n\",T[p].l,T[p].r,T[p].sum);\n}\nvoid pushnow(int p,int v){\n\tT[p].sum=1;T[p].lsum=T[p].rsum=T[p].lazy=v;\n}\nvoid pushdown(int p){\n\tif(T[p].lazy){\n\t\tpushnow(lc,T[p].lazy);\n\t\tpushnow(rc,T[p].lazy);\n\t\tT[p].lazy=0;\n\t}\n}\nvoid update(int p,int ql,int qr,int v){\n\tif(ql<=T[p].l&&T[p].r<=qr){\n\t\tpushnow(p,v);return;\n\t}\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1;\n\tif(ql<=mid)update(lc,ql,qr,v);\n\tif(qr>mid)update(rc,ql,qr,v);\n\tpushup(p);\n}\ninline Node merge(Node l,Node r){\n\tNode ans;\n\tans.lsum=l.lsum;ans.rsum=r.rsum;\n\tans.sum=l.sum+r.sum-(l.rsum==r.lsum);\n\treturn ans;\n}\nNode query(int p,int ql,int qr){\n\tif(ql<=T[p].l&&T[p].r<=qr)\n\t\treturn T[p];\n\tpushdown(p);\n\tint mid=(T[p].l+T[p].r)>>1;\n\tif(ql<=mid&&mid<qr)\n\t\treturn merge(query(lc,ql,qr),query(rc,ql,qr));\n\tif(ql<=mid)return query(lc,ql,qr);\n\tif(qr>mid)return query(rc,ql,qr);\n}\nvoid update1(int x,int y,int z){\n\twhile(top[x]!=top[y]){\n\t\tif(deep[top[x]]<deep[top[y]])swap(x,y);\n\t\tupdate(1,sub[top[x]],sub[x],z);\n\t\tx=fa[top[x]];\n\t}\n\tif(deep[x]>deep[y])swap(x,y);\n\tupdate(1,sub[x],sub[y],z); \n}\n//\u5982\u679c\u91c7\u53d6x,y\u5206\u522b\u6839\u636e\u6df1\u5ea6\u5199,\u90a3\u4e48\u4e0d\u5fc5\u4ea4\u6362ans1\u548cans2 \nint query1(int x,int y){\n\t//\u5f88\u5bb9\u6613\u8bc1\u660e\u6811\u5256\u6bcf\u6b21\u4e0a\u8df3\u90fd\u662f\u63a5\u5728\u94fe\u7684\u5de6\u7aef(sub\u53d8\u5c0f)\n\t//\u6240\u4ee5\u7ef4\u62a4\u4e0a\u4e00\u6b21\u67e5\u8be2\u7684\u5de6\u7aef\u70b9\u4fbf\u53ef\u8fdb\u884c\u5408\u5e76 \n\tint ans1=0,ans2=0,ans=0;//ans1,ans2\u5206\u522b\u4e3ax,y\u4e0a\u4e00\u6b21\u7684\u5de6\u7aef\u70b9 \n\twhile(top[x]!=top[y]){\n\t\tif(deep[top[x]]<deep[top[y]])swap(x,y),swap(ans1,ans2);\n\t\t//\u5982\u679cy\u7684\u6df1\u5ea6\u66f4\u6df1,\u90a3\u4e48\u6709\u5173\u8fd9\u4e24\u4e2a\u70b9\u7684\u6240\u6709\u4fe1\u606f\u90fd\u5e94\u8be5\u4ea4\u6362 \n\t\tNode result=query(1,sub[top[x]],sub[x]);\n\t\tans+=result.sum-(result.rsum==ans1);//\u66f4\u65b0\u533a\u95f4\u5e8f\u5217\u6570\u76ee,\u6ce8\u610f\u51cf\u53bb\u76f8\u7b49\u90e8\u5206 \n\t\tans1=result.lsum;x=fa[top[x]];//\u66f4\u65b0\u5f53\u524d\u67e5\u8be2\u5de6\u7aef\u70b9\uff0cx\u4e0a\u8df3 \n\t}\n\tif(deep[x]>deep[y])swap(x,y),swap(ans1,ans2);//\u6ce8\u610f\u8fd9\u4e00\u6b65\u4e5f\u8981\u4ea4\u6362ans1\u548cans2 \n\t//\u6b64\u65f6\u6df1\u5ea6\u8f83\u9ad8\u7684\u70b9\u5c31\u662f\u4e8c\u8005\u7684lca \n\tNode result=query(1,sub[x],sub[y]);\n\tans+=result.sum-(result.lsum==ans1)-(result.rsum==ans2);\n\t//\u7ed3\u5408\u4e0a\u6587\u90a3\u7bc7\u9898\u89e3\u7406\u89e3\n\t// 4-1\u5c31\u662fans1\u6240\u4ee3\u8868\u7684\u533a\u95f4 \n\t// 2-3\u5c31\u662fans2\u6240\u4ee3\u8868\u7684\u533a\u95f4\n\t//\u800c1-2\u5c31\u662fresult\u4ee3\u8868\u7684\u533a\u95f4 \n\t//\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06ans1\u548cresult\u5de6\u7aef\u70b9\u5224\u91cd\uff0cans2\u548cresult\u53f3\u7aef\u70b9\u5224\u91cd \n\treturn ans;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)\t\n\t\tscanf(\"%d\",&a[i]);\n\tfor(int i=1;i<n;++i){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v);add(v,u);\n\t}\n\tdfs1(1,0,1);\n\tdfs2(1,0);\n\t/*\n\tprintf(\"---------------------------------------\\n\"); \n\tfor(int i=1;i<=n;++i)\n\t\tprintf(\"%d %d %d\\n\",fa[i],top[i],sub[i]);\n\tprintf(\"---------------------------------------\\n\"); \n\t*/\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;++i){\n\t\tchar ch=getchar();\n\t\twhile(ch!='Q'&&ch!='C')ch=getchar();\n\t\tif(ch=='Q'){\n\t\t\tint x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tprintf(\"%d\\n\",query1(x,y));\n\t\t}\n\t\tif(ch=='C'){\n\t\t\tint x,y,z;\n\t\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\t\tupdate1(x,y,z);\n\t\t}\n\t}\n\treturn 0;\n} \n```\n",
        "postTime": 1566826368,
        "uid": 138543,
        "name": "\u6597\u795e_\u541b\u83ab\u7b11",
        "ccfLevel": 0,
        "title": "P2486\u67d3\u8272 \u6811\u94fe\u5256\u5206-2"
    },
    {
        "content": "\u4e24\u79cd\u64cd\u4f5c\uff1a\n1. \u5c06\u4e24\u7ed3\u70b9\u4e4b\u95f4\u8def\u5f84\u67d3\u8272\u3002\n2. \u8be2\u95ee\u4e24\u7ed3\u70b9\u4e4b\u95f4\u8def\u5f84\u8fde\u7eed\u989c\u8272\u6bb5\u6570\u3002\n\n\u9996\u5148\u8003\u8651\u533a\u95f4\u67d3\u8272\u95ee\u9898\uff0c\u9700\u8981\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u5373\u8981\u4e0b\u63a8\u6807\u8bb0\uff1b\u9700\u8981\u533a\u95f4\u5408\u5e76\uff0c\u5219\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u5de6\u7aef\u70b9\u989c\u8272\u548c\u53f3\u7aef\u70b9\u989c\u8272\u4ee5\u53ca\u8fde\u7eed\u989c\u8272\u6bb5\u6570\uff0c\u5408\u5e76\u65f6\u9700\u8981\u68c0\u67e5\u4e24\u533a\u95f4\u4e2d\u95f4\u989c\u8272\u662f\u5426\u76f8\u540c\u3002\n\n\u5176\u6b21\u8003\u8651\u6811\u4e0a\u7684\u533a\u95f4\u5408\u5e76\uff0c\u6811\u94fe\u5256\u5206\u601d\u60f3\u662f\u4e24\u4e2a\u7ed3\u70b9\u5f80\u4e0a\u8df3\uff0c\u6240\u4ee5\u5f00\u4e24\u4e2a\u7ef4\u62a4\u7b54\u6848\uff0c\u6700\u540e\u5408\u5e76\u7b54\u6848\uff0c\u9700\u8981\u8003\u8651\u533a\u95f4\u7684\u53cd\u8f6c\uff0c\u5177\u4f53\u53ef\u4ee5\u624b\u63a8\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define REP(i,n) for(int i = 0; i < n; i++)\n#define PER(i,n) for(int i = n-1; i >= 0; i--)\n#define FOR(i,l,r) for(int i = l; i <= r; i++)\n#define ROF(i,l,r) for(int i = r; i >= l; i--)\n#define DEBUG(x) cout << #x << \"=\" << x << endl;\n#define SHOW1(A,n) { REP(i,n) cout<<A[i]<<(i==n-1?'\\n':' '); }\n#define SHOW2(A,m,n) { REP(j,m) SHOW1(A[j],n) }\n#define pb push_back\n#define fi first\n#define se second\n#define ALL(x) x.begin(),x.end()\n#define SZ(x) (int)((x).size())\ntypedef long long LL;\ntypedef unsigned long long ULL;\ntypedef pair<int, int> pii;\ntypedef pair<LL, LL> pll;\nconst int INF = 0x3f3f3f3f, MOD = 1000000007;\nconst double PI = acos(-1), EPS = 1e-6;\nconst int MAXN = 1e5+9, MAXM = 2e5+9;\n\nint n,q,a[MAXN],val[MAXN];\n#define ls x<<1\n#define rs x<<1|1\n#define mid (l+r)/2\nstruct node {\n    int lc,rc,cnt,lazy;\n    void update(int val) {\n        lc=rc=lazy=val;\n        cnt=1;\n    }\n} T[MAXN<<2];\nnode cal(node a, node b) {\n    return {a.lc,b.rc,a.cnt+b.cnt-(a.rc==b.lc),0};\n}\nvoid up(int x) {\n    T[x]=cal(T[ls],T[rs]);\n}\nvoid down(int x) {\n    if (T[x].lazy) {\n        T[ls].update(T[x].lazy);\n        T[rs].update(T[x].lazy);\n        T[x].lazy=0;\n    }\n}\nvoid build(int x, int l, int r) {\n    if (l==r) T[x]={a[l],a[l],1,0};\n    else {\n        build(ls,l,mid);\n        build(rs,mid+1,r);\n        up(x);\n    }\n}\nvoid update(int x, int l, int r, int ql, int qr, int val) {\n    if (ql<=l && r<=qr) T[x].update(val);\n    else {\n        down(x);\n        if (ql<=mid) update(ls,l,mid,ql,qr,val);\n        if (mid<qr) update(rs,mid+1,r,ql,qr,val);\n        up(x);\n    }\n}\nnode query(int x, int l, int r, int ql, int qr) {\n    if (ql<=l && r<=qr) return T[x];\n    else {\n        node ans;\n        down(x);\n        if (ql<=mid && mid<qr) {\n            node a=query(ls,l,mid,ql,qr);\n            node b=query(rs,mid+1,r,ql,qr);\n            ans=cal(a,b);\n        } else {\n            if (ql<=mid) ans=query(ls,l,mid,ql,qr);\n            else ans=query(rs,mid+1,r,ql,qr);\n        }\n        up(x);\n        return ans;\n    }\n}\nstruct edge {\n    int to,nxt;\n} e[MAXM];\nint f[MAXN],tot;\nvoid add(int u, int v) {\n    e[tot]={v,f[u]}; f[u]=tot++;\n}\nint sz[MAXN],fa[MAXN],d[MAXN],son[MAXN],top[MAXN],clk,in[MAXN];\nvoid dfs(int u) {\n    sz[u]=1; d[u]=d[fa[u]]+1; son[u]=0;\n    for (int i=f[u]; ~i; i=e[i].nxt) {\n        int v=e[i].to;\n        if (v!=fa[u]) {\n            fa[v]=u; dfs(v);\n            sz[u]+=sz[v];\n            if (sz[v]>sz[son[u]]) son[u]=v;\n        }\n    }\n}\nvoid dfs(int u, int tp) {\n    a[++clk]=val[u]; in[u]=clk;\n    top[u]=tp;\n    if (son[u]) dfs(son[u],tp);\n    for (int i=f[u]; ~i; i=e[i].nxt) {\n        int v=e[i].to;\n        if (v!=fa[u] && v!=son[u]) dfs(v,v);\n    }\n}\nvoid tree_update(int x, int y, int val) {\n    while (top[x]!=top[y]) {\n        if (d[top[x]]<d[top[y]]) swap(x,y);\n        update(1,1,n,in[top[x]],in[x],val);\n        x=fa[top[x]];\n    }\n    if (in[x]>in[y]) swap(x,y);\n    update(1,1,n,in[x],in[y],val);\n}\nint tree_query(int x, int y) {\n    node a{0,0,0}, b{0,0,0};\n    while (top[x]!=top[y]) {\n        if (d[top[x]]<d[top[y]]) swap(x,y), swap(a,b);\n        if (a.cnt) a=cal(query(1,1,n,in[top[x]],in[x]),a);\n        else a=query(1,1,n,in[top[x]],in[x]);\n        x=fa[top[x]];\n    }\n    if (in[x]>in[y]) swap(x,y), swap(a,b);\n    if (b.cnt) b=cal(query(1,1,n,in[x],in[y]),b);\n    else b=query(1,1,n,in[x],in[y]);\n    swap(a.lc,a.rc);\n    return cal(a,b).cnt;\n}\nvoid init() {\n    tot=fa[1]=clk=0;\n    memset(f,-1,sizeof(f));\n}\n\nint main()\n{\n#ifdef LOCAL\n    freopen(\"i.txt\", \"r\", stdin);\n    //freopen(\"o.txt\", \"w\", stdout);\n#endif //LOCAL\n\n    while (scanf(\"%d%d\", &n,&q)==2) {\n        init();\n        FOR(i,1,n) scanf(\"%d\", &val[i]);\n        REP(i,n-1) {\n            int x,y; scanf(\"%d%d\", &x,&y);\n            add(x,y); add(y,x);\n        }\n        dfs(1);\n        dfs(1,1);\n        build(1,1,n);\n        while (q--) {\n            char op[2]; int x,y,z; scanf(\"%s%d%d\", op,&x,&y);\n            if (op[0]=='Q') printf(\"%d\\n\", tree_query(x,y));\n            else scanf(\"%d\", &z), tree_update(x,y,z);\n        }\n    }\n\n    return 0;\n}\n```\n",
        "postTime": 1566270955,
        "uid": 120718,
        "name": "qq734628996",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "### ~~\u5927\u5bb6\u597d\uff01\u8fd9\u91cc\u849f\u84bb\u4e00\u679a~~\n## ~~\u6211\u4eec\u6765\u89e3\u8bfb\u4e00\u4e0b\u8fd9\u9053\u6709\u8da3\uff08po gai\uff09\u7684\u9898\u76ee~~\n\u8fd9\u662f\u4e00\u9053\u5f88\u6709\u8da3\uff08kewu\uff09\u7684\u9898\uff0c\u6211\u82b10.5h\u5de6\u53f3\u624d\u5c06AC\u4ee3\u7801\u6392\u51fa\uff08~~\u849f\u84bb\u7684\u7279\u70b9\uff1a\u6162~~\uff09\u3002\u4e0b\u9762\u6211\u6765\u8c08\u8c08\u601d\u8def\u3002\n\n\uff08\u524d\u7f6e\u77e5\u8bc6\uff1a\u6811\u94fe\u5256\u5206 + \u7ebf\u6bb5\u6811[%%%%%\u5927\u4f6c\u8bb2\u8bfe](https://www.luogu.org/blog/communist/shu-lian-pou-fen-yang-xie)\uff09\n#### \u4e00.\u4f60\u770b\u51fa\u6811\u94fe\u5256\u5206\u4e86\u5417\uff1f\n\u67d0\u5927\u4f6c\uff1a\u5e9f\u8bdd\uff0c\u9898\u76ee\u6807\u7b7e\u4e0a\u4e0d\u5199\u4e86\u561b\u3002\n#### \u4e8c.\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u7edf\u8ba1\u521d\u59cb\u6bb5\u6570\uff1f\n\u4e0e\u5176\u4ed6\u9898\u76ee\u4e0d\u540c\uff0c\u8fd9\u4e2a\u6811\u5256\u6211\u4eec\u8981\u7edf\u8ba1\u4e09\u4e2a\u53d8\u91cf\uff1a\n\n**1.\u8be5\u6bb5\u989c\u8272\u6bb5\u6570\u3002**\n\n**2\u548c3.\u8be5\u6bb5\u533a\u95f4\u5de6\u53f3\u8282\u70b9\u989c\u8272\u3002**\n\n**\u5bf9\u4e8e[L, R] \u533a\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5de6\u533a\u95f4\u4e0e\u53f3\u533a\u95f4\u7684\u6bb5\u6570\u76f8\u52a0\uff0c\u5728\u5224\u65ad\u4e2d\u95f4\u662f\u5426\u80fd\u8fde\u6210\u4e00\u6bb5\u5373\u53ef**\n\n\u4e3e2\u4e2a\u6817\u5b50????\uff1a\n\n1. \"111\" + \"211\" -> \u5de61 + \u53f32 = \u603b3\n2. \"111\" + \"111\" ->\u5de61 + \u53f31 - \uff081 == 1\uff09 = \u603b1\n\n\u4e8e\u662f\u4e4e\uff0c\u5bf9\u4e8e\u4e00\u6574\u6bb5\u533a\u95f4\u7684\u7edf\u8ba1\uff08\u7ebf\u6bb5\u6811\uff09\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u516c\u5f0f\uff1a\n\n**t[p] = t[p << 1] + t[p << 1 | 1] - (rig[p << 1] == lef[p << 1 | 1]);** \uff08~~ps\uff1a\u4f60\u4eec\u61c2\u4f4d\u8fd0\u7b97\u5427~~\uff09\n\t\t\n**lef[p] = lef[p << 1];**\n\n**rig[p] = rig[p << 1 | 1];**\n\n\u5230\u8fd9\u91cc\uff0c\u4f60\u5df2\u7ecf\u5207\u4e8633.33333%\u7684\u9898\u4e86\uff01\n\n#### \u4e09.\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u6539\u53d8\u989c\u8272\n\u6709\u4e86\u4e8c\u7684\u60f3\u6cd5\uff0c\u8fd9\u4e2a\u5c31\u7b80\u5355\u591a\u4e86\u3002\n\n\u8fd0\u7528\u533a\u95f4\u4fee\u6539\uff0c\u6253tag\u5373\u53ef\uff08\u4e0d\u8981\u5728\u610f\u7801\u98ce\uff09\n```cpp\ninline void modify(int p, int l, int r, int ql, int qr, int k) {\n\tif (l >= ql && r <= qr) {\n\t\tt[p] = 1;\n\t\ttag[p] = k;\n\t\tlef[p] = rig[p] = k;\n\t}\n\telse {\n\t\tif (tag[p]) down(p);\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= ql) modify(p << 1, l, mid, ql, qr, k);\n\t\tif (mid < qr) modify(p << 1 | 1, mid + 1, r, ql, qr, k);\n\t\tt[p] = t[p << 1] + t[p << 1 | 1] - (rig[p << 1] == lef[p << 1 | 1]);\n\t\tlef[p] = lef[p << 1];\n\t\trig[p] = rig[p << 1 | 1];\n\t}\n}\n```\n#### \u56db.\u6ce8\u610f\u4e8b\u9879\n**\uff01\uff01\uff01\u7edd\u5bf9\u8981\u8bb0\u4f4f\uff0c\u5f53\u4f60\u5c06\u6811\u5256\u8def\u5f84\u641e\u51fa\u6765\u67e5\u8be2\u65f6\uff0c\u7531\u4e8e\u4e24\u6bb5\u533a\u95f4\u5e76\u4e0d\u8fde\u7eed\uff0c\u56e0\u6b64\u4f60\u8981\u624b\u52a8\u5224\u65ad\u5934\u5c3e\u662f\u5426\u4e00\u81f4**\n```cpp\ninline void ask(int x, int y) {\n\tint fx = top[x], fy = top[y];\n\twhile(fx != fy) {\n\t\tif (dfn[fx] < dfn[fy]) {\n\t\t\tswap(x, y);\n\t\t\tswap(fx, fy);\n\t\t}\n\t\tquery(1, 1, cnt, seg[fx], seg[x]);//\u5bfb\u627e\u8be5\u533a\u95f4\n\t\tcol1(1, 1, cnt, seg[fx]);//\u4e0a\u4e2a\u533a\u95f4\u7684\u5c3e\n\t\tcol2(1, 1, cnt, seg[f[fx]]);//\u4e0b\u4e2a\u533a\u95f4\u7684\u5934\n\t\tif (q1 == q2) ans --;\n\t\tx = f[fx]; fx = top[x];\n\t}\n\tif (dfn[x] > dfn[y]) swap(x, y);\n\tquery(1, 1, cnt, seg[x], seg[y]);\n}\n```\n#### \u4e94.\u5168\u4ee3\u7801\n**\u7801\u98ce\u4e4b\u6c14\u5929\u4e0a\u6765\uff0cAC\u4e4b\u529b\u4e0d\u590d\u56de**\n```\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T> inline void read(T &x) {\n\tx = 0;\n\tT f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n\tx *= f;\n}\ninline void d_read(double &x) {\n\tx = 0.0;\n\tint f = 1;\n\tchar c = getchar();\n\tfor (; !isdigit(c); c = getchar()) if (c == '-') f = -1;\n\tfor (; isdigit(c); c = getchar()) x = x * 10 + (c ^ 48);\n\tif (c == '.'){\n\t\tdouble num = 1.0;\n\t\tc = getchar();\n\t\tfor (; isdigit(c); c = getchar()) x = x + (num /= 10) * (c ^ 48);\n\t}\n\tx *= f;\n}\n\ntemplate <typename T> inline void w(T x) {\n\tif (x > 9) w(x / 10);\n\tputchar(x % 10 + 48);\n}\ntemplate <typename T> inline void write(T x, char c) {\n\tif (x < 0){\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tw(x);\n\tputchar(c);\n}\nint ans, cnt, q1, q2, a[100005], head[100005], dfn[100005], f[100005], son[100005], siz[100005], seg[100005], rev[100005], top[100005], lef[400005], rig[400005], t[400005], tag[400005];\nstruct info{\n\tint to, nex;\n}g[200005];\ninline void build(int p, int l, int r) {\n\tif (l == r) {\n\t\tt[p] = 1;\n\t\tlef[p] = rig[p] = a[rev[l]];\n\t}\n\telse {\n\t\tint mid = l + r >> 1;\n\t\tbuild(p << 1, l, mid);\n\t\tbuild(p << 1 | 1, mid + 1, r);\n\t\tt[p] = t[p << 1] + t[p << 1 | 1] - (rig[p << 1] == lef[p << 1 | 1]);\n\t\tlef[p] = lef[p << 1];\n\t\trig[p] = rig[p << 1 | 1];\n\t}\n\t//cout << l << ' ' << r << ' ' << p << ' ' << lef[p] << endl;\n}\ninline void down(int p) {\n\tt[p << 1] = t[p << 1 | 1] = 1;\n\ttag[p << 1] = tag[p << 1 | 1] = lef[p << 1] = lef[p << 1 | 1] = rig[p << 1] = rig[p << 1 | 1] = tag[p];\n\ttag[p] = 0;\n}\ninline void modify(int p, int l, int r, int ql, int qr, int k) {\n\tif (l >= ql && r <= qr) {\n\t\tt[p] = 1;\n\t\ttag[p] = k;\n\t\tlef[p] = rig[p] = k;\n\t}\n\telse {\n\t\tif (tag[p]) down(p);\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= ql) modify(p << 1, l, mid, ql, qr, k);\n\t\tif (mid < qr) modify(p << 1 | 1, mid + 1, r, ql, qr, k);\n\t\tt[p] = t[p << 1] + t[p << 1 | 1] - (rig[p << 1] == lef[p << 1 | 1]);\n\t\tlef[p] = lef[p << 1];\n\t\trig[p] = rig[p << 1 | 1];\n\t}\n}\ninline void query(int p, int l, int r, int ql, int qr) {\n\tif (l >= ql && r <= qr) {\n\t\tans += t[p];\n\t}\n\telse {\n\t\tif (tag[p]) down(p);\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= ql && mid < qr) {\n\t\t\tquery(p << 1, l, mid, ql, qr);\n\t\t\tquery(p << 1 | 1, mid + 1, r, ql, qr);\n\t\t\tans -= (rig[p << 1] == lef[p << 1 | 1]);\n\t\t}\n\t\telse {\n\t\t\tif (mid >= ql) {\n\t\t\t\tquery(p << 1, l, mid, ql, qr);\n\t\t\t}\n\t\t\tif (mid < qr) {\n\t\t\t\tquery(p << 1 | 1, mid + 1, r, ql, qr);\n\t\t\t}\n\t\t}\n\t}\n}\ninline void col1(int p, int l, int r, int k) {\n\tif (l == r && r == k) {\n\t\tq1 = lef[p];\n\t}\n\telse {\n\t\tif (tag[p]) down(p);\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= k) col1(p << 1, l, mid, k);\n\t\tif (mid < k) col1(p << 1 | 1, mid + 1, r, k);\n\t}\n}\ninline void col2(int p, int l, int r, int k) {\n\tif (l == r && r == k) {\n\t\tq2 = lef[p];\n\t}\n\telse {\n\t\tif (tag[p]) down(p);\n\t\tint mid = l + r >> 1;\n\t\tif (mid >= k) col2(p << 1, l, mid, k);\n\t\tif (mid < k) col2(p << 1 | 1, mid + 1, r, k);\n\t}\n}\ninline void dfs1(int p, int fa) {\n\tdfn[p] = dfn[fa] + 1;\n\tf[p] = fa;\n\tsiz[p] = 1;\n\tfor (int e = head[p]; e; e = g[e].nex) {\n\t\tint u = g[e].to;\n\t\tif (u != fa) {\n\t\t\tdfs1(u, p);\n\t\t\tsiz[p] += siz[u];\n\t\t\tif (siz[u] > siz[son[p]]) son[p] = u;\n\t\t}\n\t}\n}\ninline void dfs2(int p) {\n\tif (son[p]) {\n\t\tseg[son[p]] = ++ cnt;\n\t\trev[cnt] = son[p];\n\t\ttop[son[p]] = top[p];\n\t\tdfs2(son[p]);\n\t}\n\tfor (int e = head[p]; e; e = g[e].nex) {\n\t\tint u = g[e].to;\n\t\tif (!top[u]) {\n\t\t\tseg[u] = ++ cnt;\n\t\t\trev[cnt] = u;\n\t\t\ttop[u] = u;\n\t\t\tdfs2(u);\n\t\t}\n\t}\n}\ninline void update(int x, int y, int z) {\n\tint fx = top[x], fy = top[y];\n\twhile(fx != fy) {\n\t\tif (dfn[fx] < dfn[fy]) {\n\t\t\tswap(x, y);\n\t\t\tswap(fx, fy);\n\t\t}\n\t\tmodify(1, 1, cnt, seg[fx], seg[x], z);\n\t\tx = f[fx]; fx = top[x];\n\t}\n\tif (dfn[x] > dfn[y]) swap(x, y);\n\tmodify(1, 1, cnt, seg[x], seg[y], z);\n}\ninline void ask(int x, int y) {\n\tint fx = top[x], fy = top[y];\n\twhile(fx != fy) {\n\t\tif (dfn[fx] < dfn[fy]) {\n\t\t\tswap(x, y);\n\t\t\tswap(fx, fy);\n\t\t}\n\t\tquery(1, 1, cnt, seg[fx], seg[x]);\n\t\tcol1(1, 1, cnt, seg[fx]);\n\t\tcol2(1, 1, cnt, seg[f[fx]]);\n\t\tif (q1 == q2) ans --;\n\t\tx = f[fx]; fx = top[x];\n\t}\n\tif (dfn[x] > dfn[y]) swap(x, y);\n\tquery(1, 1, cnt, seg[x], seg[y]);\n}\nint main(void) {\n\tint n, m, len = 0;\n\tread(n); read(m);\n\tfor (int i = 1; i <= n; i ++) read(a[i]);\n\tfor (int i = 1; i <= n - 1; i ++) {\n\t\tint x, y;\n\t\tread(x); read(y);\n\t\tg[++ len] = (info) {y, head[x]};\n\t\thead[x] = len;\n\t\tg[++ len] = (info) {x, head[y]};\n\t\thead[y] = len;\n \t} \n \tdfs1(1, 0);\n \tseg[1] = cnt = rev[1] = top[1] = 1;\n \tdfs2(1);\n \tbuild(1, 1, cnt);\n \tfor (int i = 1; i <= m; i ++) {\n \t\tchar c = getchar();\n \t\twhile(!isalpha(c)) c = getchar();\n \t\tif (c == 'C') {\n \t\t\tint x, y, z;\n \t\t\tread(x); read(y); read(z);\n \t\t\tupdate(x, y, z);\n\t\t}\n\t\t else {\n\t\t \tint x, y;\n\t\t \tans = 0;\n\t\t \tread(x); read(y);\n\t\t \task(x, y);\n\t\t \twrite(ans, '\\n');\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n#### \u516d.\u5f69\u86cb\n**\u6709\u4e0d\u5bf9\u7684\u8bf7\u5404\u4f4d\u795e\u7287\u6307\u51fa\uff0c\u6211\u6709\u53ef\u80fd\u4f1a\u6539\uff08\u524d\u63d0\u662f\u6211\u4f1a\uff09**",
        "postTime": 1565701744,
        "uid": 46820,
        "name": "Wall_breaker",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "## \u672c\u9898\u601d\u8def \uff1a\u6811\u94fe\u5256\u5206\u3000\uff0b\u3000\u7ebf\u6bb5\u6811\u533a\u95f4\u5408\u5e76\n### \u9996\u5148\u628a\u8fd9\u68f5\u6811\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff08\u82e5\u4e0d\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u8bf7\u5148\u505a[\u8fd9\u9898](https://www.luogu.org/problemnew/show/P3384)\uff09\u518d\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n### \u7ebf\u6bb5\u6811\u4e2d\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u989c\u8272\u3001\u533a\u95f4\u53f3\u7aef\u70b9\u7684\u989c\u8272\u3001\u533a\u95f4\u7684\u989c\u8272\u6bb5\u6570\u91cf\u3002\n### \u7ebf\u6bb5\u6811\u5411\u4e0a\u66f4\u65b0\u7b54\u6848\u5c31\u7b49\u4e8e\u5de6\u53f3\u5b50\u6811\u7b54\u6848\u4e4b\u548c\u3002\u82e5\u5de6\u5b50\u6811\u7684\u53f3\u7aef\u70b9\u989c\u8272\u4e0e\u53f3\u5b50\u6811\u5de6\u7aef\u70b9\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u6bb5\u533a\u95f4\u7b54\u6848\u8981-1\u3002\n\n```cpp\nvoid pushup(int rt)\n{\n    cl[rt] = cl[ls(rt)]; cr[rt] = cr[rs(rt)];\n    if(cr[ls(rt)] == cl[rs(rt)]) val[rt] = val[ls(rt)] + val[rs(rt)] - 1;//\u5de6\u5b50\u6811\u7684\u53f3\u7aef\u70b9\u989c\u8272\u4e0e\u53f3\u5b50\u6811\u5de6\u7aef\u70b9\u989c\u8272\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u6bb5\u533a\u95f4\u7b54\u6848\u8981-1\u3002\n    else val[rt] = val[ls(rt)] + val[rs(rt)];\n}\n\n```\n### \u4fee\u6539\u65f6\u9700\u8981\u4e0b\u4f20\u4e00\u4e2a\u61d2\u6807\u8bb0\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u662f\u5426\u9700\u8981\u4fee\u6539\u3002\n```\nvoid pushdown(int rt)\n{\n    int l = ls(rt) , r = rs(rt);//ls(rt)\u8868\u793art\u8fd9\u4e2a\u8282\u70b9\u7684\u5de6\u513f\u5b50\n    if(lazy[rt]){\n        lazy[l] = lazy[r] = 1;\n        val[l] = val[r] = 1;\n        cl[l] = cr[l] = cl[r] = cr[r] =  cl[rt];\n        lazy[rt] = 0;\n    }\n}\n```\n### \u5bf9\u4e8e\u63a5\u4e0b\u6765\uff12\u4e2a\u64cd\u4f5c\uff1a\n#### 1.\u4fee\u6539 \uff1a \u5c06\u8f93\u5165\u7684\u6811\u4e0a\u7684\u4e24\u4e2a\u7684\u8282\u70b9\u4ea4\u66ff\u5411\u4e0a\u8df3\uff0c\u6cbf\u8def\u7528\u7ebf\u6bb5\u6811\u4fee\u6539\u989c\u8272\u3002\n```cpp\nvoid update(int rt , int l , int r , int L , int R , int col)//\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\n{\n    if(l == L && r == R) {\n        lazy[rt] = 1; \n        cl[rt] = cr[rt] = col;\n        val[rt] = 1;\n        return ;\n    }\n    pushdown(rt);\n    int mid = (L + R) >> 1;\n    if(r <= mid) update(ls(rt) , l , r , L , mid , col);\n    else if(l > mid) update(rs(rt) , l , r , mid + 1 , R , col);\n    else update(ls(rt),l,mid,L,mid,col) , update(rs(rt),mid+1,r,mid+1,R,col);\n    pushup(rt);\n}\n\nvoid change(int x , int y , int c)//\u5c06\u8282\u70b9a\u548c\u8282\u70b9b\u4e4b\u95f4\u7684\u8def\u5f84\u67d3\u6210c\u989c\u8272\n{\n\twhile(top[x] != top[y]) {\n\t\tif(depth[top[x]] < depth[top[y]]) swap(x , y);\n\t\tupdate(1 , pos[top[x]] , pos[x] , 1 , n , c);\n\t\tx = par[top[x]];\n\t}\n\tif(pos[x] > pos[y]) swap(x , y);\n\tupdate(1 , pos[x] , pos[y] , 1 , n , c);\n}\n```\n#### 2.\u67e5\u8be2 \uff1a \u5c06\u8f93\u5165\u7684\u6811\u4e0a\u7684\u4e24\u4e2a\u7684\u8282\u70b9\u4ea4\u66ff\u5411\u4e0a\u8df3\uff0c\u6cbf\u8def\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u3002\n#### \u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff1a\u6cbf\u8def\u7684\u8def\u5f84\u4e2d\u5982\u679c\u4e24\u7aef\u8def\u5f84\u4e4b\u95f4\u7684\u989c\u8272\u76f8\u540c\uff0c\u7b54\u6848\u4e5f\u8981-1\u3002\n```cpp\n\nint query(int rt , int l , int r , int L , int R )//\u67e5\u8be2\u533a\u95f4\u989c\u8272\u6bb5\u6570\u91cf\n{ \n    if(l == L && r  == R) return val[rt];\n    pushdown(rt);\n    int mid = (L + R) >> 1;\n    if(r <= mid) return query(ls(rt) , l , r , L , mid);\n    else if(l > mid) return query(rs(rt) , l , r , mid + 1 , R);\n    int ans = query(ls(rt) , l , mid , L , mid)  + query(rs(rt) , mid + 1 , r , mid + 1 , R);\n    if(cr[ls(rt)] == cl[rs(rt)]) ans --;\n    return ans;\n} \n\nint qc(int rt , int l , int r , int L , int R )//\u67e5\u8be2\u5355\u70b9\u989c\u8272\n{ \n    if(l == L && r  == R) return cl[rt];\n    pushdown(rt);\n    int mid = (L + R) >> 1;\n    if(r <= mid) return qc(ls(rt) , l , r , L , mid);\n    else if(l > mid) return qc(rs(rt) , l , r , mid + 1 , R);\n} \n\n\nint qcolor(int x , int y)\n{\n    int sum = 0 ;\n    int pre1 = -INF , pre2 = - INF , rc , lc;//\u56e0\u4e3a\u8282\u70b9\u4f1a\u5de6\u53f3\u4ea4\u66ff\u5411\u4e0a\u8df3\uff0c\u6240\u4ee5\u8981\u8bb0\u5f55\u4e24\u6bb5\u4e4b\u524d\u7684\u53f3\u7aef\u70b9\u7684\u989c\u8272\uff0c\u4ea4\u66ff\u4e0a\u8df3\u7684\u65f6\u5019swap\u4e00\u4e0b\u5c31\u884c\u4e86\n    while(top[x] != top[y])\n    {\n        if(depth[top[x]] < depth[top[y]]) swap(x , y) , swap(pre1 , pre2);\n        sum += query(1 , pos[top[x]] , pos[x] , 1 , n);\n\t\tlc = qc(1 , pos[top[x]] , pos[top[x]] , 1 , n);//\u67e5\u8be2\u5de6\u7aef\u70b9\u989c\u8272\n\t\trc = qc(1 , pos[x] , pos[x] , 1 , n);//\u67e5\u8be2\u53f3\u7aef\u70b9\u989c\u8272\n\t\tif(rc == pre1) sum -- ;//\u989c\u8272\u76f8\u540c\u7b54\u6848\u5c31-1\n\t\tpre1 = lc;\n        x = par[top[x]];\n    }\n    if(pos[x] > pos[y]) swap(x , y) , swap(pre1 , pre2);\n    sum += query(1 , pos[x] , pos[y] , 1 , n);\n\tlc = qc(1 , pos[x] , pos[x] , 1 , n) , rc = qc(1 , pos[y] , pos[y] , 1 , n);\n\tif(lc == pre1) sum -- ;\n\tif(rc == pre2) sum -- ; //\u6700\u540e\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u7684\u65f6\u5019\u4e5f\u8981\u5224\u65ad\n    return sum;\n}\n```\n### \u6700\u540e\u9644\u4e0a\u6211\u5e38\u6570\u5de8\u5927\u7684AC\u4ee3\u7801\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ls(x) x << 1\n#define rs(x) x << 1 | 1\nconst int N = 400009 , INF = 2147483647;\nstruct Edge{int to , nxt;} e[N];\nint cl[N] , cr[N] , val[N] , lazy[N];\nint depth[N] , par[N] , size[N] , top[N] , color[N] , pos[N];\nint head[N] , tot = 0;\nint n , T;\n\nint read()//\u5feb\u8bfb\n{\n    int s = 0 , w = 1;\n    char ch = getchar();\n    while(ch < '0' || ch > '9'){if(ch == '-') w = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9'){s = (s << 1) + (s << 3) + (ch ^ 48);ch = getchar();}\n    return s * w;\n}\n\nvoid addedge(int x , int y)\n{\n\te[++tot].to = y;\n    e[tot].nxt = head[x];\n    head[x] = tot;\n}//\u90bb\u63a5\u8868\u5b58\u6811\n\nvoid dfs1(int x)\n{\n    size[x] = 1;\n    for(int i = head[x] ; i ; i = e[i].nxt)\n        if(e[i].to != par[x]) \n        {\n            par[e[i].to] = x; \n\t\t\tdepth[e[i].to] = depth[x] + 1;\n            dfs1(e[i].to); \n            size[x] += size[e[i].to];\n        }\n}\n\nvoid dfs2(int x , int chain)\n{\n    int k = 0;\n    pos[x] = ++tot;\n    top[x] = chain;\n    for(int i = head[x] ; i ; i = e[i].nxt)\n        if(depth[e[i].to] > depth[x] && size[e[i].to] > size[k]) k = e[i].to;\n    if(!k) return ;\n    dfs2(k , chain);\n    for(int i = head[x] ; i ; i = e[i].nxt)\n        if(depth[e[i].to] > depth[x] && k != e[i].to) dfs2(e[i].to , e[i].to);\n}\n\n//  --------------------------------------------------------------------\u2193\u7ebf\u6bb5\u6811\nvoid pushup(int rt)\n{\n    cl[rt] = cl[ls(rt)]; cr[rt] = cr[rs(rt)];\n    if(cr[ls(rt)] == cl[rs(rt)]) val[rt] = val[ls(rt)] + val[rs(rt)] - 1;\n    else val[rt] = val[ls(rt)] + val[rs(rt)];\n}\n\nvoid pushdown(int rt)\n{\n    int l = ls(rt) , r = rs(rt);\n    if(lazy[rt]){\n        lazy[l] = lazy[r] = 1;\n        val[l] = val[r] = 1;\n        cl[l] = cr[l] = cl[r] = cr[r] =  cl[rt];\n        lazy[rt] = 0;\n    }\n}\n\nvoid update(int rt , int l , int r , int L , int R , int col)\n{\n    if(l == L && r == R) {\n        lazy[rt] = 1; cl[rt] = cr[rt] = col; val[rt] = 1;\n        return ;\n    }\n    pushdown(rt);\n    int mid = (L + R) >> 1;\n    if(r <= mid) update(ls(rt) , l , r , L , mid , col);\n    else if(l > mid) update(rs(rt) , l , r , mid + 1 , R , col);\n    else update(ls(rt),l,mid,L,mid,col) , update(rs(rt),mid+1,r,mid+1,R,col);\n    pushup(rt);\n}\n\nint query(int rt , int l , int r , int L , int R )\n{ \n    if(l == L && r  == R) return val[rt];\n    pushdown(rt);\n    int mid = (L + R) >> 1;\n    if(r <= mid) return query(ls(rt) , l , r , L , mid);\n    else if(l > mid) return query(rs(rt) , l , r , mid + 1 , R);\n    int ans = query(ls(rt) , l , mid , L , mid)  + query(rs(rt) , mid + 1 , r , mid + 1 , R);\n    if(cr[ls(rt)] == cl[rs(rt)]) ans --;\n    return ans;\n} \n\nint qc(int rt , int l , int r , int L , int R )\n{ \n    if(l == L && r  == R) return cl[rt];\n    pushdown(rt);\n    int mid = (L + R) >> 1;\n    if(r <= mid) return qc(ls(rt) , l , r , L , mid);\n    else if(l > mid) return qc(rs(rt) , l , r , mid + 1 , R);\n} \n\n//-------------------------------------------------------------------------\u2191\u7ebf\u6bb5\u6811\nvoid change(int x , int y , int c)\n{\n\twhile(top[x] != top[y]) {\n\t\tif(depth[top[x]] < depth[top[y]]) swap(x , y);\n\t\tupdate(1 , pos[top[x]] , pos[x] , 1 , n , c);\n\t\tx = par[top[x]];\n\t}\n\tif(pos[x] > pos[y]) swap(x , y);\n\tupdate(1 , pos[x] , pos[y] , 1 , n , c);\n}\n\nint qcolor(int x , int y)\n{\n    int sum = 0 ;\n    int pre1 = -INF , pre2 = - INF , rc , lc;\n    while(top[x] != top[y])\n    {\n        if(depth[top[x]] < depth[top[y]]) swap(x , y) , swap(pre1 , pre2);\n        sum += query(1 , pos[top[x]] , pos[x] , 1 , n);\n\t\tlc = qc(1 , pos[top[x]] , pos[top[x]] , 1 , n);\n\t\trc = qc(1 , pos[x] , pos[x] , 1 , n);\n\t\tif(rc == pre1) sum -- ;\n\t\tpre1 = lc;\n        x = par[top[x]];\n    }\n    if(pos[x] > pos[y]) swap(x , y) , swap(pre1 , pre2);\n    sum += query(1 , pos[x] , pos[y] , 1 , n);\n\tlc = qc(1 , pos[x] , pos[x] , 1 , n) , rc = qc(1 , pos[y] , pos[y] , 1 , n);\n\tif(lc == pre1) sum -- ;\n\tif(rc == pre2) sum -- ; \n    return sum;\n}\n\nint main()\n{\n    n = read(); T = read();\n    for(int i = 1 ; i <= n ; i ++) color[i] = read();\n    for(int i = 1 ; i < n ; i ++){\n        int x = read() , y = read();\n        addedge(x , y); addedge(y , x);\n    }\n    tot = 0; \n    dfs1(1); dfs2(1 , 1);\n\n    for(int i = 1 ; i <= n ; i++) update(1 , pos[i] , pos[i] , 1 , n , color[i]); \n    while(T --){\n        char str[10];\n        scanf(\"%s\",str);\n        if(str[0] == 'C'){\n            int x = read() , y = read() , c = read();\n            change(x , y , c);\n        } else {\n            int x = read() , y = read();\n            printf(\"%d\\n\",qcolor(x , y));\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1550552397,
        "uid": 80852,
        "name": "\u7a0b\u5c31\u672a\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u6811\u5256\u6a21\u677f\u9898\u3002  \n\u5256\u5206\u4e4b\u540e\u628a\u6811\u4e0a\u7684\u70b9\u6839\u636e $\\text{dfs}$ \u5e8f\u53d8\u6210\u5e8f\u5217\u4e4b\u540e\uff0c\u5c31\u662f\u5f88\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u5e8f\u5217\u64cd\u4f5c\u4e86\u3002  \n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u662f\u533a\u95f4\u8d4b\u503c\uff0c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u662f\u67e5\u8be2\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u8fde\u7eed\u6570\u5b57\u76f8\u540c\u7684\u6bb5\u3002  \n\u8fd9\u4e2a\u64cd\u4f5c\u633a\u5957\u8def\u7684\uff0c\u5728\u7ebf\u6bb5\u6811\u7684 $\\text{pushUp}$ \u51fd\u6570\u548c\u67e5\u8be2\u7684\u65f6\u5019\u8003\u8651\u4e0b\u600e\u4e48\u5408\u5e76\u3002  \n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u9700\u8981\u8bb0\u5f55\u7684\u4fe1\u606f\u6709  \n$\\text{lcol}:$ \u8be5\u533a\u95f4\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u7684\u989c\u8272\u3002  \n$\\text{rcol}:$ \u8be5\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u7684\u989c\u8272\u3002  \n$\\text{cnt}$ \u8be5\u533a\u95f4\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u5373\u6709\u591a\u5c11\u4e2a\u989c\u8272\u6bb5\u3002  \n$\\text{tag}$ \u61d2\u6807\u8bb0\uff0c\u8868\u793a\u8be5\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u5185\u6240\u6709\u7684\u70b9\u7684\u989c\u8272\u90fd\u88ab\u6539\u4e3a $\\text{tag}$\u3002  \n\u5f53\u5408\u5e76\u4e24\u4e2a\u513f\u5b50\u7684\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u628a\u5de6\u53f3\u513f\u5b50\u7684 $\\text{cnt}$ \u52a0\u8d77\u6765\uff0c\u7136\u540e\u5224\u65ad\u4e00\u4e0b\u4e2d\u95f4\u989c\u8272\u662f\u5426\u76f8\u540c\uff0c\u76f8\u540c\u7684\u8bdd\u5c31\u628a$\\text{cnt- -}$\u3002  \n\u67e5\u8be2\u7684\u65f6\u5019\u540c\u7406\u3002  \n\u4ee3\u7801\u4e5f\u975e\u5e38\u597d\u5199\u3002  \n```cpp\nvoid pushUp() {\n   cnt = lc->cnt + rc->cnt - (lc->rcol == rc->lcol);\n   lcol = lc->lcol, rcol = rc->rcol;\n}\n```  \n\n\u8fd8\u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8981\u8bb0\u5f55\u4e0a\u4e00\u6b21\u67e5\u8be2\u7684\u6700\u4e0a\u9762\u7684\u7ed3\u70b9\u7684\u989c\u8272\uff0c\u518d\u5224\u65ad\u4e00\u4e0b\u3002  \n\n```cpp\nint Query(int u, int v) {\n    int ret = 0, cu = 0, cv = 0;\n    while (top[u] != top[v]) {\n        if (deep[top[u]] < deep[top[v]]) {\n            std::swap(u, v);\n            std::swap(cu, cv);\n        }\n        int tmp = root->queryColor(dfn[u]);\n        ret += root->queryCnt(dfn[top[u]], dfn[u]) - (cu == tmp);\n        cu = root->queryColor(dfn[top[u]]);\n        u = fa[top[u]];\n    }\n    if (dfn[u] > dfn[v]) {\n        std::swap(u, v);\n        std::swap(cu, cv);\n    }\n    ret += root->queryCnt(dfn[u], dfn[v]) - (cv == root->queryColor(dfn[v])) - (cu == root->queryColor(dfn[u]));\n    return ret;\n}\n```\n\n### \u5b8c\u6574\u4ee3\u7801  \n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <climits>\n\nconst int MAXN = 1e5 + 7;\n\nstruct Edge {\n    int t, next;\n} edge[MAXN << 1];\n\nint n, m;\nint head[MAXN], cnt;\nint col[MAXN];\nint fa[MAXN], deep[MAXN], size[MAXN], son[MAXN], dfn[MAXN], ts, top[MAXN], pos[MAXN];\n\nstruct Node {\n    int l, r, mid;\n    Node *lc, *rc;\n    int lcol, rcol, cnt;\n    int tag;\n\n    Node() {}\n\n    Node(int l, int r, Node *lc, Node *rc) : l(l), r(r), mid((l + r) / 2), lc(lc), rc(rc), lcol(0), rcol(0), cnt(0), tag(0) {}\n\n    static Node *build(int l, int r) {\n        Node *ret;\n        if (l == r) {\n            ret = new Node(l, r, NULL, NULL);\n            ret->lcol = ret->rcol = col[pos[l]];\n            ret->cnt = 1;\n        } else {\n            int mid = (l + r) >> 1;\n            ret = new Node(l, r, build(l, mid), build(mid + 1, r));\n            ret->pushUp();\n        }\n        return ret;\n    }\n\n    void pushUp() {\n        cnt = lc->cnt + rc->cnt - (lc->rcol == rc->lcol);\n        lcol = lc->lcol, rcol = rc->rcol;\n    }\n\n    void pushDown() {\n        if (tag) {\n            lc->cover(tag), rc->cover(tag);\n            tag = 0;\n        }\n    }\n\n    void cover(int delta) {\n        lcol = rcol = delta;\n        tag = delta;\n        cnt = 1;\n    }\n\n    void solveCover(int left, int right, int delta) {\n        if (l == left && r == right) return cover(delta);\n        pushDown();\n        if (right <= mid) lc->solveCover(left, right, delta);\n        else if (left > mid) rc->solveCover(left, right, delta);\n        else lc->solveCover(left, mid, delta), rc->solveCover(mid + 1, right, delta);\n        pushUp();\n    }\n\n    int queryCnt(int left, int right) {\n        if (l == left && r == right) return cnt;\n        pushDown();\n        if (right <= mid) return lc->queryCnt(left, right);\n        else if (left > mid) return rc->queryCnt(left, right);\n        else  return lc->queryCnt(left, mid) + rc->queryCnt(mid + 1, right) - (lc->rcol == rc->lcol);\n    }\n\n    int queryColor(int pos) {\n        if (l == pos && r == pos) return lcol;\n        pushDown();\n        if (pos <= mid) return lc->queryColor(pos);\n        else return rc->queryColor(pos);\n    }\n} *root;\n\nvoid dfs1(int u, int pre) {\n    fa[u] = pre;\n    deep[u] = deep[pre] + 1;\n    size[u] = 1;\n    int maxSize = 0;\n\n    for (int e = head[u]; e; e = edge[e].next) {\n        int v = edge[e].t;\n        if (v == pre) continue;\n        dfs1(v, u);\n        size[u] += size[v];\n        if (!son[u] || maxSize < size[v]) {\n            maxSize = size[v];\n            son[u] = v;\n        }\n    }\n}\n\nvoid dfs2(int u, int tp) {\n    top[u] = tp;\n    dfn[u] = ++ts;\n    pos[ts] = u;\n    if (son[u]) dfs2(son[u], tp);\n\n    for (int e = head[u]; e; e = edge[e].next) {\n        int v = edge[e].t;\n        if (v == fa[u] || v == son[u]) continue;\n        dfs2(v, v);\n    }\n}\n\nvoid Cover(int u, int v, int delta) {\n    while (top[u] != top[v]) {\n        if (deep[top[u]] < deep[top[v]]) std::swap(u, v);\n        root->solveCover(dfn[top[u]], dfn[u], delta);\n        u = fa[top[u]];\n    }\n    if (dfn[u] > dfn[v]) std::swap(u, v);\n    root->solveCover(dfn[u], dfn[v], delta);\n}\n\nint Query(int u, int v) {\n    int ret = 0, cu = 0, cv = 0;\n    while (top[u] != top[v]) {\n        if (deep[top[u]] < deep[top[v]]) {\n            std::swap(u, v);\n            std::swap(cu, cv);\n        }\n        int tmp = root->queryColor(dfn[u]);\n        ret += root->queryCnt(dfn[top[u]], dfn[u]) - (cu == tmp);\n        cu = root->queryColor(dfn[top[u]]);\n        u = fa[top[u]];\n    }\n    if (dfn[u] > dfn[v]) {\n        std::swap(u, v);\n        std::swap(cu, cv);\n    }\n    ret += root->queryCnt(dfn[u], dfn[v]) - (cv == root->queryColor(dfn[v])) - (cu == root->queryColor(dfn[u]));\n    return ret;\n}\n\ninline void add(int u, int v) {\n    edge[++cnt] = (Edge) {v, head[u]}; head[u] = cnt;\n}\n\nint main(int argc, char *argv[]) {\n    scanf(\"%d %d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", col + i);\n    }\n    int u, v;\n    for (int i = 1; i < n; i++) {\n        scanf(\"%d %d\", &u, &v);\n        add(u, v);\n        add(v, u);\n    }\n    deep[1] = 1;\n    dfs1(1, 0);\n    dfs2(1, 1);\n    root = Node::build(1, n);\n    char o[10];\n    int x, y, z;\n    while (m--) {\n        scanf(\"%s %d %d\", o, &x, &y);\n        if (o[0] == 'C') {\n            scanf(\"%d\", &z);\n            Cover(x, y, z);\n        } else {\n            printf(\"%d\\n\", Query(x, y));\n        }\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1543671893,
        "uid": 52748,
        "name": "Logey",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "# [\u987e](https://www.luogu.org/blog/RPdreamer/#)[z](https://www.cnblogs.com/-guz/)\n\n~~\u4f60\u6ca1\u6709\u53d1\u73b0\u4e24\u4e2a\u5b57\u91cc\u7684blog\u90fd\u4e0d\u4e00\u6837\u561b~~ qwq\n\n\u5f88\u660e\u663e,\u8fd9\u662f\u4e00\u4e2a\u6811\u5256\u9898.\n\n\u4f46\u662f\u7ef4\u62a4\u8d77\u6765\u4f1a\u5f88\u9ebb\u70e6.qwq\n\n\u9996\u5148\u660e\u786e\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u9700\u8981\u7ef4\u62a4\u4ec0\u4e48\u4e1c\u897f.\n\n1. \u6211\u4eec\u9700\u8981\u7ef4\u62a4\u989c\u8272\u6bb5\u7684\u4e2a\u6570(\u9898\u76ee\u8981\u6c42\u554a,\u5582)\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u662f\u6bcf\u6b21\u5c06\u533a\u95f4\u5206\u6210\u4e00\u534a,\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8003\u8651\u62fc\u63a5\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u8fd8\u6709\n\n1. \u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u533a\u95f4\u4e2d\u7684\u989c\u8272\u6bb5\n2. \u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b50\u533a\u95f4\u4e2d\u7684\u989c\u8272\u6bb5.\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u533a\u95f4\u7684\u53f3\u5b50\u989c\u8272\u6bb5\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b50\u533a\u95f4\u7684\u5de6\u5b50\u989c\u8272\u6bb5\u76f8\u540c,\u6211\u4eec\u5c31\u9700\u8981\u62fc\u63a5.(\u53ef\u80fd\u4f1a\u6709\u4e9b\u96be\u7406\u89e3,\u8bf7\u7ec6\u7ec6\u54c1\u8bfb)\n\n\u7136\u540e\u96be\u70b9\u5c31\u5728\u4e8e\u5256\u5206\u6210\u94fe\u4e4b\u540e,\u6211\u4eec\u8df3\u8f6c\u7684\u65f6\u5019,\u94fe\u9876\u4e0e\u65b0\u7684\u4e00\u90e8\u5206\u7684\u62fc\u63a5.\n\n\u8fd9\u91cc\u4ee5\u94fe\u7684\u4e0b\u7aef\u4e3a$L$,\u94fe\u7684\u4e0a\u7aef\u4e3a$R$,\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b.\n\n>  \u5176\u4e2d\u7ea2\u8272\u90e8\u5206\u4e3a\u5df2\u77e5\u90e8\u5206\u7684\u94fe,\u9ed1\u8272\u90e8\u5206\u4e3a\u5f53\u524d\u6240\u6c42.\n\n\u5f88\u5bb9\u6613\u53d1\u73b0,\u5982\u679c\u8981\u62fc\u63a5,\u6211\u4eec\u9700\u8981\u5c06\u9ed1\u8272\u90e8\u5206\u5de6\u53f3\u7aef\u70b9\u8c03\u6362,\u76f4\u63a5$swap$\u5373\u53ef.\n\n![](https://i.loli.net/2018/10/22/5bcdac12488d5.png)\n\n\u6700\u540e\u9700\u8981\u8003\u8651\u7684\u662f\u5f53\u4e24\u7aef\u70b9\u5728\u4e00\u6761\u94fe\u4e0a\u5982\u4f55\u62fc\u63a5,\u8fd9\u91cc\u4e0d\u518d\u8ba8\u8bba,\n\n\u8bf7\u5927\u5bb6\u72ec\u7acb\u601d\u8003QwQ\n\n~~\u672c\u6765\u5e94\u8be5\u4e00\u8fb9\u5207\u7684,\u7ed3\u679c\u56e0\u4e3a\u5c40\u90e8\u53d8\u91cf\u548c\u91cd\u8f7d\u51fa\u9505QAQ~~\n\n``\u4ee3\u7801``\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<cctype>\n#define ls o<<1\n#define rs o<<1|1\n#define R register\n#define N 300008\nusing namespace std;\ninline void in(int &x)\n{\n    int f=1;x=0;char s=getchar();\n    while(!isdigit(s)){if(s=='-')f=-1;s=getchar();}\n    while(isdigit(s)){x=x*10+s-'0';s=getchar();}\n    x*=f;\n}\nstruct cod{int lc,rc,sum;}tr[N<<2];\ncod operator +( cod a, cod b)\n{\n\tcod res;\n\tres.lc=a.lc;res.rc=b.rc;\n\tres.sum=a.sum+b.sum;\n\tif(a.rc==b.lc)res.sum--;\n\treturn res;\n}\nint n,m,head[N],tot,a[N],tg[N<<2];\nstruct code{int u,v;}edge[N<<2];\ninline void add(int x,int y)\n{\n    edge[++tot].u=head[x];\n    edge[tot].v=y;\n    head[x]=tot;\n}\nint size[N],son[N],f[N],depth[N];\nvoid dfs1(int u,int fa)\n{\n    depth[u]=depth[fa]+1;f[u]=fa;size[u]=1;\n    for(R int i=head[u];i;i=edge[i].u)\n    {\n        if(edge[i].v==fa)continue;\n        dfs1(edge[i].v,u);\n        size[u]+=size[edge[i].v];\n        if(son[u]==-1 or size[son[u]]<size[edge[i].v])\n            son[u]=edge[i].v;\n    }\n}\nint dfn[N],fdfn[N],idx,top[N];\nvoid dfs2(int u,int t)\n{\n    dfn[u]=++idx;fdfn[idx]=u;top[u]=t;\n    if(son[u]==-1)return;\n    dfs2(son[u],t);\n    for(R int i=head[u];i;i=edge[i].u)\n    {\n        if(dfn[edge[i].v])continue;\n        dfs2(edge[i].v,edge[i].v);\n    }\n}\nvoid build(int o,int l,int r)\n{\n    if(l==r)\n    {\n        tr[o].lc=tr[o].rc=a[fdfn[l]];\n        tr[o].sum=1;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(ls,l,mid);\n    build(rs,mid+1,r);\n    tr[o]=tr[ls]+tr[rs];\n}\ninline void down(int o,int l,int r)\n{\n    if(tg[o])\n    {\n        tg[ls]=tr[ls].lc=tr[ls].rc=tg[o];\n        tg[rs]=tr[rs].lc=tr[rs].rc=tg[o];\n        tr[ls].sum=tr[rs].sum=1;\n        tg[o]=0;\n    }\n}\nvoid change(int o,int l,int r,int x,int y,int z)\n{\n    if(x<=l and y>=r)\n    {\n        tr[o].lc=tr[o].rc=tg[o]=z;\n        tr[o].sum=1;\n        return;\n    }\n    down(o,l,r);\n    int mid=(l+r)>>1;\n    if(x<=mid)change(ls,l,mid,x,y,z);\n    if(y>mid)change(rs,mid+1,r,x,y,z);\n    tr[o]=tr[ls]+tr[rs];\n}\ncod query(int o,int l,int r,int x,int y)\n{\n    if(x<=l and y>=r)return tr[o];\n    down(o,l,r);\n    int mid=(l+r)>>1;\n    if(y<=mid)return query(ls,l,mid,x,y);\n    if(x>mid)return query(rs,mid+1,r,x,y);\n    return query(ls,l,mid,x,y)+query(rs,mid+1,r,x,y);\n}\ninline void tchange(int x,int y,int z)\n{\n    int fx=top[x],fy=top[y];\n    while(fx!=fy)\n    {\n        if(depth[fx]>=depth[fy])\n        {\n            change(1,1,n,dfn[fx],dfn[x],z);\n            x=f[fx];\n        }\n        else \n        {\n            change(1,1,n,dfn[fy],dfn[y],z);\n            y=f[fy];\n        }\n        fx=top[x],fy=top[y];\n    }\n    if(dfn[x]>dfn[y])swap(x,y);\n    change(1,1,n,dfn[x],dfn[y],z);\n}\ninline cod tquery(int x,int y)\n{\n    cod a,b,res;\n    a.lc=a.rc=b.lc=b.rc=a.sum=b.sum=0;\n    int fx=top[x],fy=top[y];\n    while(fx!=fy)\n    {\n        if(depth[fx]>=depth[fy])\n        {\n            res=query(1,1,n,dfn[fx],dfn[x]);\n            swap(res.lc,res.rc);\n            a=a+res;\n            x=f[fx];\n        }\n        else\n        {\n            res=query(1,1,n,dfn[fy],dfn[y]);\n            swap(res.lc,res.rc);\n            b=b+res;\n            y=f[fy];\n        }\n        fx=top[x],fy=top[y];\n    }\n    if(dfn[x]>dfn[y])\n    {\n        swap(x,y);\n        swap(a,b);\n    }\n    res=query(1,1,n,dfn[x],dfn[y]);\n    a=a+res;\n    swap(b.lc,b.rc);\n    return a+b;\n}\nchar s[8];\nint main()\n{\n    in(n),in(m);memset(son,-1,sizeof son);\n    for(R int i=1;i<=n;i++)in(a[i]);\n    for(R int i=1,x,y;i<n;i++)\n    {\n        in(x),in(y);\n        add(x,y),add(y,x);\n    }\n    dfs1(1,0);dfs2(1,1);build(1,1,n);\n    for(R int a,b,c;m;m--)\n    {\n        scanf(\"%s\",s+1);\n        if(s[1]=='Q')\n        {\n            in(a),in(b);\n            printf(\"%d\\n\",tquery(a,b).sum);\n        }\n        else\n        {\n            in(a),in(b),in(c);\n            tchange(a,b,c);\n        }\n    }\n}\n```",
        "postTime": 1540205679,
        "uid": 87960,
        "name": "\u987ez",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u597d\u60f3\uff0c\u5c31\u662f\u6811\u94fe\u5256\u5206\u5c06\u91cd\u513f\u5b50\u4f18\u5148\u7684dfs\u5e8f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684**\u7b2c\u4e00\u4e2a\u989c\u8272f\u3001\u6700\u540e\u4e00\u4e2a\u989c\u8272b\u3001\u989c\u8272\n\u6bb5\u6570num**\u4fe1\u606f\uff0c\u82e5\u5de6\u4fe1\u606f\u662fm1\uff0c\u53f3\u4fe1\u606f\u662fm2\uff0c\u90a3\u4e48\u5408\u5e76\u4fe1\u606f\u5c31\u662f :\n```cpp\nm.f=m1.f;\nm.b=m2.b;\nm.num=m1.num+m2.num-(m1.b==m2.f);\n```\n\u4f46\u662f\u6709\u5f88\u591a\u7ec6\u8282\u503c\u5f97\u6ce8\u610f\uff1a\n\n1.\u5c06\u9700\u8981\u7ef4\u62a4\u7684\u6570\u636ef,r,num\u6253\u5305\u6210\u4e00\u4e2a\u7ed3\u6784\u4f53Msg\uff0c\u5e76\u4e14\u5199\u4e00\u4e2acombine\u51fd\u6570\u5408\u5e76\u6570\u636e\uff08\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u57fa\u672c\u6027\u8d28\uff09\uff0c\u8fd9\u6837\u4f1a\u65b9\u4fbf\u7ef4\u62a4\n\n2.\u7ed3\u6784\u4f53\u91cc\u9762\u7684\u6240\u6709\u53d8\u91cf\u4e00\u5b9a\u8981\u5728\u6784\u9020\u51fd\u6570\u91cc\u9762\u521d\u59cb\u5316\uff01\uff08\u8fd9\u4e2a\u628a\u6211\u5751\u4e86\u5f88\u4e45\uff09\u4e0d\u7136\u4f1aWA\n\n3.\u5efa\u8bae\u5199\u4e00\u4e2asetNode\u51fd\u6570\uff0c\u8fd9\u6837pushDown\u548cset\u51fd\u6570\u7684\u53ef\u8bfb\u6027\u66f4\u5f3a\n\n\u8fd9\u6837\u5199\u51fa\u6765\u7684\u4ee3\u7801\u5c31\u7b80\u6d01\u6613\u61c2\u4e86\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int maxn = 100003;\nstruct Edge{\n    int next,to;Edge(){}\n    Edge(int a,int b){next=a,to=b;}\n}edge[maxn<<1];\nint n,m;\nstruct Msg{bool no;//\u7ef4\u62a4\u7684\u4fe1\u606f\u5305  //no==1\uff1a\u201c\u6ca1\u6709\u4fe1\u606f\u201d\n    int f,b,num;Msg(int noo=0){f=b=num=0;no=noo;}\n    Msg(int a,int aa,int aaa){f=a;b=aa;num=aaa;no=0;}\n    void set(int x){f=b=x;num=1;}\n};\nMsg combine(Msg m1,Msg m2){\n    if(m1.no)return m2;if(m2.no)return m1;//\u820d\u53bb\u201c\u6ca1\u6709\u4fe1\u606f\u201d\n    return Msg(m1.f,m2.b,m1.num+m2.num-(m1.b==m2.f));\n}\nstruct Node *null;\nstruct Node{//\u7ebf\u6bb5\u6811\n    Node* ch[2];Msg m;\n    int l,r,mid,sets;\n    Node(int a,int b){l=a,r=b,mid=a+b>>1,sets=0,ch[0]=ch[1]=null;m=Msg(0);}\n    void pushUp(){m=combine(ch[0]->m,ch[1]->m);}\n    void setNode(int x){sets=x;m.set(x);}\n    void pushDown(){if(sets){ch[0]->setNode(sets);ch[1]->setNode(sets);sets=0;}}\n}*root;\nint head[maxn],cnt,val[maxn];\nint tcnt,dep[maxn],siz[maxn],fa[maxn],son[maxn],top[maxn],pos[maxn],id[maxn];\nvoid addEdge(int u,int v){\n    edge[++cnt]=Edge(head[u],v);\n    head[u]=cnt;\n}\nvoid dfs1(int u,int f){//\u5904\u7406dep,siz,fa,son(\u91cd\u513f\u5b50)\n    dep[u]=dep[f]+1;fa[u]=f;siz[u]=1;\n    for(int i=head[u];i;i=edge[i].next){\n        int v=edge[i].to;if(v==f)continue;\n        dfs1(v,u);siz[u]+=siz[v];\n        if(!son[u]||siz[v]>siz[son[u]])son[u]=v;\n    }\n}\nvoid dfs2(int u,int t){//\u5904\u7406id(\u6811->\u7ebf\u6bb5),pos(\u7ebf\u6bb5->\u6811),top(\u94fe\u9876\u8282\u70b9)\n    top[u]=t;id[u]=++tcnt;pos[tcnt]=u;\n    if(!son[u])return;dfs2(son[u],t);\n    for(int i=head[u];i;i=edge[i].next){\n        int v=edge[i].to;if(id[v])continue;\n        dfs2(v,v);\n    }\n}\nvoid build(Node* &k=root){\n    if(k->r==k->l){k->m.set(val[pos[k->l]]);return;}\n    build(k->ch[0]=new Node(k->l,k->mid));\n    build(k->ch[1]=new Node(k->mid+1,k->r));\n    k->pushUp();\n}\nvoid set(int ql,int qr,int v,Node* &k=root){\n    if(ql>k->r||qr<k->l)return;\n    if(ql<=k->l&&qr>=k->r){k->setNode(v);return;}\n    k->pushDown();\n    set(ql,qr,v,k->ch[0]),set(ql,qr,v,k->ch[1]);\n    k->pushUp();\n}\nMsg query(int ql,int qr,Node* &k=root){//\u6ce8\u610f\u4ee5\u4fe1\u606f\u5305\u8fd4\u56de\n    if(ql>k->r||qr<k->l)return Msg(1);//\u4e0d\u5728\u8be2\u95ee\u533a\u95f4\uff0c\u8fd4\u56de\u201c\u6ca1\u6709\u4fe1\u606f\u201d\n    if(ql<=k->l&&qr>=k->r)return k->m;\n    k->pushDown();\n    return combine(query(ql,qr,k->ch[0]),query(ql,qr,k->ch[1]));\n}\nvoid setpath(int x,int y,int v){//\u5b8c\u5168\u662f\u6811\u5256lca\u7684\u677f\u5b50\n    while(top[x]^top[y]){\n        if(dep[top[x]]>dep[top[y]])set(id[top[x]],id[x],v),x=fa[top[x]];\n        else set(id[top[y]],id[y],v),y=fa[top[y]];\n    }if(dep[x]>dep[y])set(id[y],id[x],v);else set(id[x],id[y],v);\n}\nint quepath(int x,int y){Msg ans1=Msg(1);Msg ans2=Msg(1);//\u540c\u6837\u662flca\u677f\u5b50\uff0c\u4f46\u8981\u6ce8\u610f\uff0ccombine\u7684\u53c2\u6570\u662f\u6709\u5e8f\u7684\uff0c\u5373combine(\u5de6\u4fe1\u606f,\u53f3\u4fe1\u606f)\uff0c\u6240\u4ee5\u6ce8\u610f\u7ebf\u6bb5\u4e0a\u7684\u987a\u5e8f\n    while(top[x]^top[y]){\n        if(dep[top[x]]>dep[top[y]])ans1=combine(query(id[top[x]],id[x]),ans1),x=fa[top[x]];\n        else ans2=combine(query(id[top[y]],id[y]),ans2),y=fa[top[y]];\n    }if(dep[x]>dep[y])ans1=combine(query(id[y],id[x]),ans1);else ans2=combine(query(id[x],id[y]),ans2);\n\treturn ans1.num+ans2.num-(ans1.f==ans2.f);\n}\nint main(){int a,b,c;char ch;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i)scanf(\"%d\",&val[i]);\n    for(int i=1;i<n;++i){scanf(\"%d%d\",&a,&b);addEdge(a,b);addEdge(b,a);}\n    dfs1(1,1);dfs2(1,1);//no root\n    null=new Node(0,0);null->m=Msg(1);build(root=new Node(1,n));\n    while(m--){cin>>ch;scanf(\"%d%d\",&a,&b);\n        if(ch=='Q')printf(\"%d\\n\",quepath(a,b));\n        else scanf(\"%d\",&c),setpath(a,b,c);\n    }return 0;\n}\n\n```",
        "postTime": 1531933689,
        "uid": 51189,
        "name": "Delva",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u6811\u4e0a\u8def\u5f84\u4fee\u6539\uff0c\u5f53\u7136\u662f\u9009\u62e9\u6811\u94fe\u5256\u5206\u8fd9\u79cd\u6ca1\u6709\u601d\u7ef4\u542b\u91cf\u7684\u66b4\u529b\u4e86\u554a\u3002\u3002\u3002\n\n\u989c\u8272\u6bb5\u7684\u95ee\u9898\uff0c\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\u6bcf\u4e2a\u8282\u70b9\u50a8\u5b58\u533a\u95f4\u7684\u989c\u8272\u6bb5\u6570\u4ee5\u53ca\u5de6\u53f3\u7aef\u70b9\u7684\u989c\u8272\u79cd\u7c7b\u3002\u5f53\u6211\u4eec\u8981\u628a\u4e24\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\u5408\u5e76\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u7aef\u70b9\u5904\u989c\u8272\u6765\u51b3\u5b9a\u8981\u4e0d\u8981\u5c06\u989c\u8272\u6bb5\u6570\u51cf\u4e00\u5c31\u884c\u4e86\u3002\u3002\u3002\n\n\u6211\u7684\u5199\u6cd5\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5728\u8def\u5f84\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u201c\u4eba\u201d\u5b57\u5f62\u7684\u8def\u5f84\uff0c\u9700\u8981\u5206\u522b\u50a8\u5b58\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u4fe1\u606f\uff0c\u52a0\u4e0a\u6700\u540e\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u5f97\u5230\u7684\u533a\u95f4\u4fe1\u606f\uff0c\u4e00\u5171\u6709\u4e09\u4e2a\u533a\u95f4\u9700\u8981\u5408\u5e76\u3002\n\n![](https://www.xgzepto.cn/wp-content/uploads/2018/06/b%E7%B4%A0%E6%9D%90-300x263.png)\n\n\u5982\u56fe\uff0c\u8be2\u95ee$X$\u5230$Y$\u7684\u8def\u5f84\u4e0a\u7684\u989c\u8272\u6bb5\u65f6\uff0c\u6211\u4eec\u5148\u5206\u522b\u5c06$X$\u548c$Y$\u79fb\u52a8\u5230\u4e86$A$\u548c$B$\uff0c\u540c\u65f6\u8bb0\u5f55\u4e86$X$\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u4fe1\u606f$lres$\uff0c\u548c$Y$\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u4fe1\u606f$rres$\u3002\u6700\u540e\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4f4d\u4e8e\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684$A$\uff0c$B$\u4e4b\u95f4\u7684\u4fe1\u606f$res$\u3002\n\n\u7531\u4e8e\u6811\u94fe\u5256\u5206\u7684\u6027\u8d28\uff0c\u6211\u4eec\u77e5\u9053\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6df1\u5ea6\u66f4\u5c0f\uff0c\u6240\u4ee5$lres$\uff0c$rres$\uff0c$res$\u5728\u4e0a\u56fe\u72b6\u6001\u4e0b\u7684\u5de6\u7aef\u70b9\u5206\u522b\u4e3a$A$\uff0c$B$\u548c$B$\uff0c\u6240\u4ee5\u5728\u5408\u5e76\u7684\u65f6\u5019\uff0c\u9700\u8981\u4ea4\u6362\u4e00\u4e0b$rres$\u7684\u5de6\u53f3\u7aef\u70b9\u4fe1\u606f\u3002\n\n\u63a8\u5e7f\u4e00\u4e0b\u4e2a\u4eba\u535a\u5ba2[\u3010[SDOI2011]\u67d3\u8272\u3011](https://www.xgzepto.cn/post/bzoj-2243)\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```\n// Paint.cpp: \u5b9a\u4e49\u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\n//XG_Zepto, 5/15/2018. All rights reserved.\n\n#include \"stdafx.h\"\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#define ls (p<<1)\n#define rs (p<<1|1)\n#define mid ((r+l)>>1)\n#define NewN(k) Node(1,k,k) \n#define maxn 100100\nusing namespace std;\nstruct Edge{\n    int to,next;\n    Edge(int a=0,int b=0){\n        to=a,next=b;\n    }\n}l[maxn*2];\nstruct Node{\n    int num,lco,rco;\n    Node(int a=0,int b=0,int c=0){\n        num=a,lco=b,rco=c;\n    }\n}tree[maxn*4];\nint head[maxn],cnt,n,m,top[maxn],fa[maxn],id[maxn],col[maxn];\nint son[maxn],siz[maxn],dep[maxn],nco[maxn],nid,lazy[maxn*4];\ninline void Add(int x,int y){\n    l[++cnt]=Edge(y,head[x]);\n    head[x]=cnt;\n}\ninline void Pre_Work(int u,int f){\n    dep[u]=dep[f]+1;fa[u]=f;siz[u]=1;\n    int maxsiz=-1;\n    for (int i=head[u];i;i=l[i].next){\n        int v=l[i].to;if (v==f) continue;\n        Pre_Work(v,u);siz[u]+=siz[v];\n        if (siz[v]>maxsiz) maxsiz=siz[v],son[u]=v;\n    }\n}\ninline void Re_Build(int u,int topf){\n    id[u]=++nid,nco[nid]=col[u],top[u]=topf;\n    if (son[u]) Re_Build(son[u],topf);\n    for (int i=head[u];i;i=l[i].next){\n        int v=l[i].to;if (v==fa[u]||v==son[u]) continue;\n        Re_Build(v,v);\n    }\n}\ninline void Swap(Node &x){swap(x.lco,x.rco);} //\u8bf4\u597d\u7684\u4ea4\u6362\u5de6\u53f3\u7aef\u70b9\ninline void Pushup(int p){\n    if (tree[ls].lco==0){\n        tree[p]=tree[rs];\n        return;\n    }\n    if (tree[rs].lco==0){\n        tree[p]=tree[ls];\n        return;\n    }\n    int sum=tree[ls].num+tree[rs].num;\n    if (tree[ls].rco==tree[rs].lco) sum--;\n    tree[p]=Node(sum,tree[ls].lco,tree[rs].rco);\n}\ninline Node Merge(Node x,Node y){\n    if (x.lco==0) return y;\n    if (y.lco==0) return x;\n    int cut=(x.rco==y.lco);\n    return Node(x.num+y.num-cut,x.lco,y.rco);\n}\ninline void Set_Up(int l,int r,int p){\n    if (l==r){tree[p]=Node(1,nco[l],nco[r]);return;}\n    Set_Up(l,mid,ls);Set_Up(mid+1,r,rs);Pushup(p);\n}\ninline void Pushdown(int p){\n    int te=lazy[p];lazy[p]=0;\n    Node tem=NewN(te);\n    tree[ls]=tree[rs]=tem;\n    lazy[ls]=lazy[rs]=te;\n}\ninline Node Query(int l,int r,int L,int R,int p){\n    if (l>R||r<L) return Node(0,0,0);\n    if (l>=L&&r<=R) return tree[p];\n    if (lazy[p]) Pushdown(p);\n    return Merge(Query(l,mid,L,R,ls),Query(mid+1,r,L,R,rs));\n}\ninline void Change(int l,int r,int L,int R,int k,int p){\n    if (l>R||r<L) return;\n    if (l>=L&&r<=R){\n        tree[p]=NewN(k);\n        lazy[p]=k;\n        return;\n    }\n    if (lazy[p]) Pushdown(p);\n    Change(l,mid,L,R,k,ls);\n    Change(mid+1,r,L,R,k,rs);\n    Pushup(p);\n}\ninline void Path_Query(int x,int y){\n    Node lres=rres=res=Node(0,0,0);\n    while(top[x]!=top[y]){\n        if (dep[top[x]]>dep[top[y]]){\n            lres=Merge(Query(1,n,id[top[x]],id[x],1),lres);\n            x=fa[top[x]];\n        }\n       else{\n            rres=Merge(Query(1,n,id[top[y]],id[y],1),rres);\n            y=fa[top[y]];\n        }\n    }\n    if (dep[x]<dep[y]){//\u9700\u8981\u5224X\u548cY\u7684\u6df1\u5ea6\n        res=Query(1,n,id[x],id[y],1);\n        Swap(lres);\n        res=Merge(lres,res);\n        res=Merge(res,rres);\n    }\n    else{\n        res=Query(1,n,id[y],id[x],1);\n        Swap(rres);\n        res=Merge(rres,res);\n        res=Merge(res,lres);\n    }\n    cout<<res.num<<endl;\n}\ninline void Path_Change(int x,int y,int k){\n    while(top[x]!=top[y]){\n        if (dep[top[x]]<dep[top[y]]) swap(x,y);\n        Change(1,n,id[top[x]],id[x],k,1);\n        x=fa[top[x]];\n    }\n    if (dep[x]>dep[y]) swap(x,y);\n    Change(1,n,id[x],id[y],k,1);\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for (int i=1;i<=n;i++) cin>>col[i];\n    for (int i=1,t1,t2;i<=n-1;i++)\n        cin>>t1>>t2,Add(t1,t2),Add(t2,t1);\n    Pre_Work(1,0);Re_Build(1,1);Set_Up(1,n,1);char op;\n    for (int i=1;i<=m;i++){\n        cin>>op;\n        if (op=='Q'){\n            int t1,t2;cin>>t1>>t2;\n            Path_Query(t1,t2);\n        }\n        else{\n            int t1,t2,t3;cin>>t1>>t2>>t3;\n            Path_Change(t1,t2,t3);\n        }\n    }\n    return 0;\n}\n```\n### \u63a8\u5e7f\n\u5b89\u5229\u4e00\u4e0b\u4e2a\u4eba\u535a\u5ba2\uff0c\u9898\u89e3\u540c\u6b65\u66f4\u65b0\n\nhttps://www.xgzepto.cn/changecol-sdoi/",
        "postTime": 1529662021,
        "uid": 37158,
        "name": "XG_Zepto",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "# WTF\uff1f\n\u6211\u7684\u975e\u6b63\u89e3\u597d\u50cf\u8fc7\u4e86\u2026\u2026\n\n\u5e95\u4e0b\u7684\u9898\u89e3\u5df2\u7ecf\u628a\u505a\u6cd5\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6811\u5256+\u7ebf\u6bb5\u6811\uff0c\u552f\u4e00\u7684\u96be\u70b9\u5728\u4e8e\u5224\u91cd\u3002\n\n\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u6211\u8981\u8bf4\u4e00\u4e2a\u677f\u5b50\u505a\u6cd5\u2026\u2026\u6211\u4eec\u77e5\u9053\u6811\u5256\u7684\u65f6\u5019\u6211\u4eec\u8981\u628a\u8fd9\u4e00\u6761\u8def\u5f84\u5206\u6210\u51e0\u4e2a\u533a\u95f4\u6765\u5904\u7406\uff0c\u4f46\u4f60\u6253\u4e0a\u677f\u5b50\u4e4b\u540e\u4f1a\u53d1\u73b0\uff0c\u8fd9\u51e0\u4e2a\u533a\u95f4\u4e0d\u4f1a\u8fde\u7eed\u64cd\u4f5c\uff0c\u800c\u662f\u4e0d\u65ad\u64cd\u4f5ctop\u6700\u9760\u4e0b\u7684\u533a\u95f4\uff0c\u53ef\u4e0d\u8fde\u7eed\u7684\u8bdd\u600e\u4e48\u5224\u91cd\u5462\uff1f\n\n### LCA\u554a\uff01\n\n\u6211\u4eec\u901a\u8fc7LCA\u628a\u8fd9\u6761\u8def\u5f84\u5206\u6210\u4e24\u6bb5\uff0c\u800c\u6bcf\u4e00\u6bb5\u90fd\u80fd\u4fdd\u8bc1\u4ece\u5e95\u4e0b\u7684\u533a\u95f4\u5411\u4e0a\u9762\u7684\u533a\u95f4\u4f9d\u6b21\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u6bcf\u4e00\u6bb5\u533a\u95f4\u5185\u90e8\u88ab\u7ebf\u6bb5\u6811\u5206\u6210\u597d\u591a\u4e2a\u5c0f\u533a\u95f4\uff0c\u5c0f\u533a\u95f4\u88ab\u9012\u5f52\u5230\u7684\u987a\u5e8f\u6ee1\u8db3\u4ece\u5de6\u5f80\u53f3\uff0c\u653e\u5230\u6811\u4e2d\u4e5f\u5c31\u662f\u4ece\u4e0a\u5f80\u4e0b\uff0c\u8fd9\u6837\u8bbe\u51e0\u4e2a\u5168\u5c40\u53d8\u91cf\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u5c31\u80fd\u5f88\u8f7b\u677e\u7684\u5224\u91cd\u8fa3\u3002\n\n\u5f53\u7136\u8fd8\u6709\u4e00\u70b9\u662f\u9700\u8981\u6ce8\u610f\u7684\u3002\u5bf9\u4e8eLCA\u8fd9\u4e2a\u70b9\u672c\u8eab\uff0c\u663e\u7136\u6211\u4eec\u53ea\u80fd\u628a\u5b83\u653e\u5230\u4e24\u6bb5\u8def\u5f84\u4e2d\u7684\u4e00\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u500d\u589eLCA\u7684\u7279\u6027\u2014\u2014\u5148\u8df3\u5230LCA\u7684\u5b50\u8282\u70b9\uff0c\u7136\u540e\u4fdd\u5b58\u4e0b\u6765\u8fd9\u4e2a\u5b50\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u77db\u76fe\u4e86\u3002\n\n\u5f53\u7136LCA\u4e2d\u6709\u4e9b\u7ec6\u8282\u7684\u5730\u65b9\u96be\u4ee5\u8868\u8ff0\uff0c\u770b\u4ee3\u7801\u6bd4\u8f83\u597d\u7406\u89e3\u3002\n\n### %%%xzz\u7403\u7237\u592a\u795e\u5566\uff01\n\n\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cctype>\n#define N (100000 + 10)\nusing namespace std;\nint a[N],deep[N],f[N][25],son[N],dfn[N],top[N],tot[N],idfn[N],head[N<<1];\nint sum[N<<2],tag[N<<2],ls[N<<2],rs[N<<2];\nint n,m,cnt,Dfn_clock,Pre,pre,Mx,Nxt,xx,yy,Fir,Sec,Sw;\n\nint read() {\n    char c=getchar();\n    int r=0,f=1;\n    while (!isdigit(c)) {\n        if (c=='-') f=-1;\n        c=getchar();\n    }\n    while (isdigit(c)) {\n        r=(r*10)+(c^48);\n        c=getchar();\n    }\n    return r*f;\n}\n\nstruct edge {\n\tint next,to;\n}E[N<<1];\n\nvoid Add(int x,int y) {\n\tE[++cnt].next=head[x];\n\tE[cnt].to=y;\n\thead[x]=cnt;\n}\n\nvoid Dfs1(int x,int fa) {\n\tdeep[x]=deep[fa]+1; f[x][0]=fa; tot[x]=1;\n\tint Max=-1;\n\tfor (int i=head[x];i;i=E[i].next) {\n\t\tint y=E[i].to;\n\t\tif (y!=fa) {\n\t\t\tDfs1(y,x);\n\t\t\ttot[x]+=tot[y];\n\t\t\tif (tot[y]>Max) {\n\t\t\t\tMax=tot[y];\n\t\t\t\tson[x]=y;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid Dfs2(int x,int tp) {\n\tdfn[x]=++Dfn_clock;\n\tidfn[Dfn_clock]=x;\n\ttop[x]=tp;\n\tif (!son[x]) return;\n\tDfs2(son[x],tp);\n\tfor (int i=head[x];i;i=E[i].next) {\n\t\tint y=E[i].to;\n\t\tif (y!=f[x][0] && y!=son[x]) Dfs2(y,y);\t\t\t\n\t}\n}\n\nvoid ST() {\n\tMx=log2(n)+1;\n\tfor (int i=1;i<=Mx;i++)\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tf[j][i]=f[f[j][i-1]][i-1];\n}\n\nint Lca(int x,int y) {\n\tif (deep[x]!=deep[y]) {\n\t\tint d=deep[x]-deep[y]-1;\n\t\tfor (int i=0;i<=Mx;i++)\n\t\t\tif (d&(1<<i)) x=f[x][i];\n\t\txx=x; yy=y;\n\t\tif (f[x][0]==y) return y;\n\t\tx=f[x][0];\n\t}\n\tfor (int i=Mx;i>=0;i--) \n\t\tif (f[x][i]!=f[y][i]) {\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\txx=x; yy=y;\n\treturn f[x][0];\n}\n\nvoid Pushup(int x) {\n\tint l=(x<<1),r=(x<<1|1);\n\tsum[x]=sum[l]+sum[r];\n\tif (rs[l]==ls[r]) --sum[x];\n\tls[x]=ls[l]; rs[x]=rs[r];\n}\n\nvoid Pushdown(int x) {\n\tint l=(x<<1),r=(x<<1|1);\n\tif (tag[x]) {\n\t\ttag[l]=tag[r]=tag[x];\n\t\tls[l]=ls[r]=tag[x];\n\t\trs[l]=rs[r]=tag[x];\n\t\tsum[l]=sum[r]=1;\n\t\ttag[x]=0;\n\t}\n}\n\nvoid Build(int l,int r,int x) {\n\tif (l==r) {\n\t\tsum[x]=1; \n\t\tls[x]=rs[x]=a[idfn[l]];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(l,mid,x<<1);\n\tBuild(mid+1,r,x<<1|1);\n\tPushup(x);\n}\n\nvoid Change(int L,int R,int l,int r,int val,int x) {\n\tif (L<=l && r<=R) {\n\t\tsum[x]=1; \n\t\tls[x]=rs[x]=tag[x]=val;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tPushdown(x);\n\tif (L<=mid) Change(L,R,l,mid,val,x<<1);\n\tif (R>mid) Change(L,R,mid+1,r,val,x<<1|1);\n\tPushup(x);\n}\n\nint Query(int L,int R,int l,int r,int x) {\n\tint ans=0;\n\tif (L<=l && r<=R) {\n\t\tif (pre==ls[x]) --ans;\n\t\tif (!Pre) Pre=ls[x];\n\t\tif (Nxt==rs[x] && R==r) --ans;\n\t\tans+=sum[x]; pre=rs[x];\n\t\treturn ans;\n \t}\n \tint mid=(l+r)>>1;\n \tPushdown(x);\n \tif (L<=mid) ans+=Query(L,R,l,mid,x<<1);\n \tif (R>mid) ans+=Query(L,R,mid+1,r,x<<1|1);\n \treturn ans;\n}\n\nvoid TreeChange(int x,int y,int val) {\n\tint t1=top[x],t2=top[y];\n\twhile (t1!=t2) {\n\t\tif (deep[t1]<deep[t2]) {\n\t\t\tswap(x,y); swap(t1,t2);\n\t\t}\n\t\tChange(dfn[t1],dfn[x],1,n,val,1);\n\t\tx=f[t1][0]; t1=top[x];\n\t}\n\tif (deep[x]<deep[y]) swap(x,y);\n\tChange(dfn[y],dfn[x],1,n,val,1);\n}\n\nint TreeQuery(int x,int y,int flag) {\n\tint t1=top[x],t2=top[y],ans=0;\n\twhile (t1!=t2) {\n\t\tif (deep[t1]<deep[t2]) {\n\t\t\tswap(x,y); swap(t1,t2);\n\t\t}\t\n\t\tans+=Query(dfn[t1],dfn[x],1,n,1);\n\t\tNxt=Pre; Pre=pre=0;\n\t\tx=f[t1][0]; t1=top[x];\n\t}\n\tif (deep[x]<deep[y]) swap(x,y);\n\tans+=Query(dfn[y],dfn[x],1,n,1);\n\tif (!flag) Fir=Pre; else Sec=Pre;\n\tNxt=Pre=pre=0;\n\treturn ans;\n}\n\nint main() {\n\tn=read(); m=read();\n\tfor (int i=1;i<=n;i++) a[i]=read();\t\n\tfor (int i=1;i<=n-1;i++) {\n\t\tint x=read(),y=read();\n\t\tAdd(x,y); Add(y,x);\n\t} \n\tDfs1(1,1);\n\tDfs2(1,1);\n\tBuild(1,n,1);\n\tST();\n\tfor (int i=1;i<=m;i++) {\n\t\tchar opt;int x,y,z;\n\t\tcin>>opt; x=read(),y=read();\n\t\tif (opt=='C') {\n\t\t\tz=read();\n\t\t\tTreeChange(x,y,z);\n\t\t}\n\t\tif (opt=='Q') {\n\t\t\tif (x==y) puts(\"1\");\n\t\t\telse {\n\t\t\t\tif (deep[x]<deep[y]) swap(x,y);\n\t\t\t\tint t=Lca(x,y);\n\t\t\t\tint Answer=TreeQuery(xx,x,0)+TreeQuery(t,y,1);\n\t\t\t\tif (Fir==Sec) --Answer; Fir=Sec=0;\n\t\t\t\tprintf(\"%d\\n\",Answer);\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1522288282,
        "uid": 43470,
        "name": "xMinh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u989d\uff0c\u88f8\u7684\u7ebf\u6bb5\u6811\u52a0\u4e0a\u4e00\u4e2a\u88f8\u7684\u6811\u5256\u5c31\u597d\u4e86\uff0c\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\u5c31\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u8ba8\u8bbatop\u548cfa[top[]]\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5c06\u7b54\u6848\u51cf\u4e00\uff0c\u7136\u540e....\u5f88\u96be\u8bf4\u6e05\u695a\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u628a\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5de6\u7aef\u989c\u8272\u53f3\u7aef\u548c\u989c\u8272\u603b\u6570\uff0cupdate\u7684\u65f6\u5019\u540c\u4e0a\n\n        \n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define ls u<<1,l,mid\n#define rs u<<1|1,mid+1,r\n#define maxn 200020\nusing namespace std;\nvoid init(){\n    freopen(\"paint.in\",\"r\",stdin);\n    freopen(\"paint.out\",\"w\",stdout);\n}\nint n,m,top[maxn],f[maxn],size[maxn],tot=1,cnt,dfn[maxn],son[maxn],head[maxn*3],col[maxn],h[maxn],nu[maxn];\nstruct edge{\n    int v,next;\n}e[maxn*3];\nvoid adde(int a,int b){\n    e[tot].v=b;\n    e[tot].next=head[a];\n    head[a]=tot++;\n}\nvoid dfs1(int u,int fa){\n    size[u]=1;h[u]=h[fa]+1;f[u]=fa;\n    for(int i=head[u];~i;i=e[i].next){\n        int v=e[i].v;if(v==fa)continue;\n        dfs1(v,u);\n        size[u]+=size[v];\n        if(size[v]>size[son[u]])son[u]=v;\n    }\n}\nvoid dfs2(int u,int fa,int ff){\n    dfn[u]=++cnt;nu[cnt]=u;top[u]=ff;\n    if(son[u])dfs2(son[u],u,ff);\n    for(int i=head[u];~i;i=e[i].next){\n        int v=e[i].v;if(v==fa||v==son[u])continue;\n        dfs2(v,u,v);\n    }\n}\nstruct node{\n    int l,r,sum,lc,rc,lazy;\n}nod[maxn*4];\nvoid push_up(int u){\n    nod[u].lc=nod[u<<1].lc ,nod[u].rc=nod[u<<1|1].rc ;//\u6211\u64e6\u6211\u64e6\u6211\u64e6\u6211\u64e6\u6211\u64e6\u6211\u64e6\u6211\u64e6 \n    nod[u].sum=nod[u<<1].sum+nod[u<<1|1].sum;\n    if(nod[u<<1].rc==nod[u<<1|1].lc)nod[u].sum--;\n}\nvoid push_down(int u){\n    int ll=u<<1,rr=u<<1|1;\n    if(nod[u].lazy==-1)return ;\n    int add=nod[u].lazy;\n    nod[ll].lazy=nod[rr].lazy=nod[ll].lc=nod[ll].rc=nod[rr].lc=nod[rr].rc=add;\n    nod[ll].sum=nod[rr].sum=1;\n    nod[u].lazy=-1;\n}\nvoid build(int u,int l,int r){\n    nod[u].l=l,nod[u].r=r,nod[u].lazy=-1;\n    if(l==r){\n        nod[u].sum=1;nod[u].lc=nod[u].rc=col[nu[l]];\n        return;\n    }\n    int mid=l+r>>1;\n    build(ls);build(rs);\n    push_up(u);\n}\nvoid update(int u,int l,int r,int x,int y,int add){\n    if(l==x&&y==r){\n        nod[u].sum=1;nod[u].lc=nod[u].rc=nod[u].lazy=add;\n        return;\n    }\n    push_down(u);\n    int mid=l+r>>1;\n    if(x>mid)update(rs,x,y,add);\n    else if(y<=mid)update(ls,x,y,add);\n    else update(ls,x,mid,add),update(rs,mid+1,y,add);\n    push_up(u);\n}\nint query(int u,int l,int r,int x,int y){\n    if(x==l&&y==r){\n        return nod[u].sum;\n    }\n    push_down(u);\n    int mid=l+r>>1;\n    if(x>mid)return query(rs,x,y);\n    else if(y<=mid)return query(ls,x,y);\n    else {\n        int ans=query(ls,x,mid)+query(rs,mid+1,y);\n        if(nod[u<<1].rc==nod[u<<1|1].lc)ans--;\n        return ans;\n    }\n}\nint query_colour(int u,int l,int r,int x){\n    if(l==r)return nod[u].lc;\n    push_down(u);\n    int mid=l+r>>1;\n    if(x>mid)return query_colour(rs,x);\n    else return query_colour(ls,x);\n}\nvoid change(int a,int b,int add){\n    while(top[a]!=top[b]){\n        if(h[top[a]]>h[top[b]])swap(a,b);\n        update(1,1,cnt,dfn[top[b]],dfn[b],add);\n        b=f[top[b]];\n    }\n    if(h[a]>h[b])swap(a,b);\n    update(1,1,cnt,dfn[a],dfn[b],add);\n}\nint QUERY(int a,int b){\n    int ans=0,nc,fc;\n    while(top[a]!=top[b]){\n        if(h[top[a]]>h[top[b]])swap(a,b);\n        ans+=query(1,1,cnt,dfn[top[b]],dfn[b]);\n        nc=query_colour(1,1,cnt,dfn[top[b]]);\n        fc=query_colour(1,1,cnt,dfn[f[top[b]]]);\n        b=f[top[b]];\n        if(nc==fc)ans--;\n    }\n    if(h[a]>h[b])swap(a,b);\n    ans+=query(1,1,cnt,dfn[a],dfn[b]);\n    return ans==0?1:ans;\n}\nint main(){\n    //init();\n    scanf(\"%d%d\",&n,&m);\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<=n;i++)scanf(\"%d\",col+i);\n    for(int a,b,i=1;i<n;i++){\n        scanf(\"%d%d\",&a,&b);\n        adde(a,b);adde(b,a);\n    }\n    dfs1(1,1);dfs2(1,1,1);\n    build(1,1,cnt);\n    /*for(int i=1;i<=n;i++){\n        printf(\"%d %d\\n\",query_colour(1,1,cnt,dfn[i]),query(1,1,cnt,dfn[i],dfn[i]));\n    }*/\n    char s[5];\n    int a,b,c;\n    /*while(scanf(\"%d%d\",&a,&b)!=EOF){\n        printf(\"%d\\n\",query(1,1,cnt,dfn[a],dfn[b]));\n    }*/\n    while(m--){\n        scanf(\"%s%d%d\",s,&a,&b);\n        if(s[0]=='Q')printf(\"%d\\n\",QUERY(a,b));\n        else {\n            scanf(\"%d\",&c);\n            change(a,b,c);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1475645530,
        "uid": 18431,
        "name": "intruder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "~~\u7b2c\u4e00\u6b21\u7684\u6811\u5256\u4e00$A$\u9898\uff0c\u611f\u52a8~~\n\n\u8fd9\u9898\u7684\u601d\u8def\u5e94\u8be5\u8fd8\u662f\u975e\u5e38\u7b80\u5355\u7684\uff0c\u5c31\u662f\u6811\u5256\u52a0\u4e0a\u7ebf\u6bb5\u6811\u3002\u7ebf\u6bb5\u6811\u4e2d\u591a\u5f00\u4e24\u4e2a\u53d8\u91cf\uff0c$lc$\u548c$rc$\u7ef4\u62a4\u533a\u95f4\u7684\u5de6\u8fb9\u7684\u989c\u8272\u548c\u53f3\u8fb9\u7684\u989c\u8272\uff0c$w$\u7ef4\u62a4$l--r$\u533a\u95f4\u5185\u7684\u989c\u8272\u6bb5\u6570\n\n#### \u8003\u8651\u67e5\u8be2\uff1a\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a$dfs$\u5e8f\u8fde\u7eed\u7684\u67e5\u8be2\uff0c\u53ea\u8981\u5de6\u5b50\u6811\u7684\u6bb5\u6570\u52a0\u4e0a\u53f3\u5b50\u6811\u7684\u6bb5\u6570\u4e4b\u540e\u51cf\u6389\u591a\u7b97\u7684\u90e8\u5206\u5c31\u662f\u7b54\u6848\u3002\u53ea\u8981\u5de6\u5b50\u6811\u7684\u533a\u95f4\u6700\u53f3\u8fb9\u7684\u989c\u8272\u548c\u53f3\u5b50\u6811\u6700\u5de6\u8fb9\u7684\u989c\u8272\u76f8\u540c\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u989c\u8272\u6bb5\u591a\u7b97\u4e86\u4e00\u6b21\u3002\n\n#### \u5bf9\u4e8e\u6811\u4e0a\u8def\u5f84\u7684\u67e5\u8be2:\n\u56e0\u4e3a\u6211\u4eec\u7684\u67e5\u8be2\u662f\u4e24\u4e2a\u8282\u70b9$x$\u548c$y$\u5f80\u6811\u94fe\u9876\u7aef\u8df3\u7684\u8fc7\u7a0b\n\n\u8003\u8651\u53bb\u91cd\n\n\u5f53\u4e00\u4e2a\u70b9\u5f80\u4e0a\u8df3\u7684\u65f6\u5019\uff0c\u5982\u679c$father[top[n]]$\u7684\u989c\u8272\u548c$top[n]$\u4e00\u6837\u7684\u8bdd\uff0c\u8fd9\u4e2a\u989c\u8272\u5c31\u4f1a\u88ab\u91cd\u590d\u7b97\u5230\n\n![](https://cdn.luogu.com.cn/upload/pic/41459.png)\n\n~~\u539f\u8c05\u5728\u4e0b\u5de8\u4e11\u65e0\u6bd4\u7684\u56fe~~\n\n\u6811\u4e0a\u5947\u602a\u7684\u7ad6\u7ebf\u8868\u793a\u4ed6\u4eec\u662f$1$\u53f7\u989c\u8272\u7684\u8282\u70b9\n\n\u5f53$x$\u5f80\u6811\u94fe\u7684\u9876\u7aef\u8df3\u7684\u65f6\u5019\uff0c\u5b83\u67e5\u8be2\u4e86\u7ea2\u8272\u8def\u5f84\u4e0a\u7684\u989c\u8272\u6bb5\u6570\uff0c\u5e76\u8df3\u5230\u4e86\u7eff\u8272\u8def\u5f84\u7684\u4e0b\u7aef\uff0c\u5c31\u662f$father[top[x]]$\u3002\u7136\u540e\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u989c\u8272\u548c$top[x]$\u4e00\u6837\u7684\u8bdd\uff0c\u5c31\u4ee3\u8868\u8fd9\u4e00\u6bb5\u7684\u989c\u8272\u88ab\u591a\u7b97\u4e86\u4e00\u6b21\u3002\n\n\u7136\u540e\u5c31\u662f\u4e00\u6bb5\u753b\u98ce\u6b63\u5e38\u7684\u6811\u5256\u6a21\u677f\u3002\n\n\u9644\u4e0a\u5de8\u4e11\u65e0\u6bd4\u7684\u4ee3\u7801\uff0c\u5e38\u6570\u8d85\u5927\u3002\u3002\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 100008\n#define pb push_back\nint n,m;\nint arr[maxn];\nint size[maxn];\nint son[maxn];\nint f[maxn];\nint depth[maxn];\nint top[maxn];\nint dfn[maxn];\nint rank[maxn];\nint tot=0;\nvector<int> v1[maxn];\n\nstruct node{\n\tint l,r,w,lc,rc,lazy;\n}tree[maxn*4];\nvoid up(int k){\n\ttree[k].lc=tree[k*2].lc;\n\ttree[k].rc=tree[k*2+1].rc;\n\ttree[k].w=tree[k*2].w+tree[k*2+1].w-(tree[k*2].rc==tree[k*2+1].lc);\n}\nvoid ch(int k,int col){\n\ttree[k].lazy=col;\n\ttree[k].lc=col;\n\ttree[k].rc=col;\n\ttree[k].w=1;\n}\nvoid down(int k){\n\tch(k*2,tree[k].lazy);\n\tch(k*2+1,tree[k].lazy);\n\ttree[k].lazy=0;\n}\nvoid build(int k,int ll,int rr){\n\ttree[k].l=ll;\n\ttree[k].r=rr;\n\ttree[k].lazy=0;\n\tif(ll==rr){\n\t\ttree[k].w=1;\n\t\ttree[k].lc=tree[k].rc=arr[rank[ll]];\n\t\treturn ;\n\t}\n\tint mid=(ll+rr)>>1;\n\tbuild(k*2,ll,mid);\n\tbuild(k*2+1,mid+1,rr);\n\tup(k);\n}\nint query(int k,int ll,int rr){\n\tif(tree[k].l>=ll&&tree[k].r<=rr){\n\t//\tcout<<tree[k].l<<' '<<tree[k].r<<' '<<tree[k].w<<' '<<tree[k].lc<<' '<<tree[k].rc<<endl;\n\t\treturn tree[k].w;\n\t}\n\tif(tree[k].lazy)down(k);\n\tint mid=(tree[k].l+tree[k].r)>>1,ans=0,ttt=0;\n\tif(ll<=mid){\n\t\tttt++;\n\t\tans+=query(k*2,ll,rr);\n\t}\n\tif(rr>mid){\n\t\tans+=query(k*2+1,ll,rr);\n\t\tttt++;\n\t}\n\tif(ttt==2)ans-=(tree[k*2].rc==tree[k*2+1].lc);\n\treturn ans;\n}\nvoid change(int k,int ll,int rr,int col){\n\tif(tree[k].l>=ll&&tree[k].r<=rr){\n\t\tch(k,col);\n\t//\tcout<<tree[k].l<<' '<<tree[k].r<<' '<<col<<endl;\n\t\treturn ;\n\t}\n\tif(tree[k].lazy)down(k);\n\tint mid=(tree[k].l+tree[k].r)>>1;\n\tif(ll<=mid)change(k*2,ll,rr,col);\n\tif(rr>mid)change(k*2+1,ll,rr,col);\n\tup(k);\n}\nvoid dfs_deep(int u,int fa,int deep){\n\tdepth[u]=deep;\n\tf[u]=fa;\n\tsize[u]=1;\n\tint len1=v1[u].size();\n\tfor(int i=0;i<len1;i++){\n\t\tint v=v1[u][i];\n\t\tif(v!=fa){\n\t\t\tdfs_deep(v,u,deep+1);\n\t\t\tsize[u]+=size[v];\n\t\t\tif(son[u]==-1||size[son[u]]<size[v]){\n\t\t\t\tson[u]=v;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs_top(int u,int t){\n\ttop[u]=t;\n\tdfn[u]=++tot;\n\trank[tot]=u;\n\tif(son[u]==-1)return ;\n\tdfs_top(son[u],t);\n\tint len1=v1[u].size();\n\tfor(int i=0;i<len1;i++){\n\t\tint v=v1[u][i];\n\t\tif(v!=f[u]&&v!=son[u]){\n\t\t\tdfs_top(v,v);\n\t\t}\n\t}\n}\nint query_col(int k,int pos){\n\tif(tree[k].l==tree[k].r)return tree[k].lc;\n\tif(tree[k].lazy)down(k);\n\tint mid=(tree[k].l+tree[k].r)>>1;\n\tif(pos<=mid)return query_col(k*2,pos);\n\telse return query_col(k*2+1,pos);\n}\nint query_tree(int x,int y){\n\tint fx=top[x],fy=top[y],ans=0,ans1=0,last1=-1,last2=-1;\n\twhile(fx!=fy){\n\t\tif(depth[fx]>depth[fy]){\n\t\t\tif(query_col(1,dfn[x])==last1)ans1++;\n\t\t\tlast1=query_col(1,dfn[fx]);\n\t\t\tans+=query(1,dfn[fx],dfn[x]);\n\t\t\tx=f[fx];\n\t\t}else{\n\t\t\tif(query_col(1,dfn[y])==last2)ans1++;\n\t\t\tlast2=query_col(1,dfn[fy]);\n\t\t\tans+=query(1,dfn[fy],dfn[y]);\n\t\t\ty=f[fy];\n\t\t}\n\t\tfx=top[x],fy=top[y];\n\t}\n\tif(query_col(1,dfn[x])==last1)ans1++;\n\tif(query_col(1,dfn[y])==last2)ans1++;\n\tans+=query(1,min(dfn[x],dfn[y]),max(dfn[x],dfn[y]));\n\treturn ans-ans1;\n}\nvoid change_tree(int x,int y,int val){\n\tint fx=top[x],fy=top[y];\n\twhile(fx!=fy){\n\t\tif(depth[fx]>depth[fy]){\n\t\t\tchange(1,dfn[fx],dfn[x],val);\n\t\t\tx=f[fx];\n\t\t}else{\n\t\t\tchange(1,dfn[fy],dfn[y],val);\n\t\t\ty=f[fy];\n\t\t}\n\t\tfx=top[x],fy=top[y];\n\t}\n\tchange(1,min(dfn[x],dfn[y]),max(dfn[x],dfn[y]),val);\n\treturn ;\n}\nint main(){\n\tmemset(son,-1,sizeof(son));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&arr[i]);\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tv1[a].pb(b);\n\t\tv1[b].pb(a);\n\t}\n\tdfs_deep(1,0,1);\n\tdfs_top(1,1);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tstring s1;\n\t\tcin>>s1;\n\t\tint a,b,c;\n\t\tif(s1==\"Q\"){\n\t\t\tscanf(\"%d%d\",&a,&b);\n\t\t\tprintf(\"%d\\n\",query_tree(a,b));\n\t\t}else{\n\t\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\t\tchange_tree(a,b,c);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1541143913,
        "uid": 53023,
        "name": "tiandong123",
        "ccfLevel": 0,
        "title": "\u67d3\u8272"
    },
    {
        "content": "\u8fd9\u9898\u76ee\u6211\u53bb\u5e74\u770b\u7684\u65f6\u5019\u60f3\u7528LCT\uff0c\u7136\u540e\u6ca1\u5199\u51fa\u6765\u3002 \n\n\u518d\u6b21\u770b\u8fd9\u9053\u9898\u6012\u6765\u4e00\u53d1\u6811\u5256\u3002  \n\n\u53c2\u8003\u521d\u5b66\u7ebf\u6bb5\u6811\u65f6\u7edf\u8ba1\u989c\u8272\u7684\u67d0\u9053\u9898\uff0c\u5c06\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\u989c\u8272\u8bb0\u5f55\uff0c\u4e0a\u63a8\u65f6\u5982\u679c\u8fb9\u754c\u989c\u8272\u76f8\u540c\u5c31\u8ba9\u4e2a\u6570-1\u3002  \n\n**\u6ce8\u610f\u6bcf\u4e2a\u5730\u65b9\u90fd\u8981\u4e0b\u63a8\u3002\u7edf\u8ba1\u7b54\u6848\u65f6\u6ce8\u610f\u8fb9\u754c\u989c\u8272\u76f8\u540c\u4e5f\u8981\u51cf1\u3002\u67e5\u8be2\u8df3\u94fe\u65f6\u6ce8\u610f\u4e0e\u7236\u4eb2\u989c\u8272\u76f8\u540c\u4e5f\u8981\u51cf1\u3002**\u6b64\u5916\u6211\u7684\u7ebf\u6bb5\u6811\u8c8c\u4f3c\u8ddf\u5176\u4ed6\u4eba\u7684\u5199\u6cd5\u6709\u4e9b\u4e0d\u540c\uff1f  \n\nP.S. $\\rm namespace$\u5927\u6cd5\u975e\u5e38\u597d\uff0c\u8c03\u4ee3\u7801\u5229\u5668\u3002~~\u5c31\u662f\u5bb9\u6613\u8ba9\u4ee3\u7801\u53d8\u957f~~\n\n```cpp\n#include<bits/stdc++.h>\n#define neko 200010\n#define meko 200010\n#define chkmin(a,b) ((a)<(b)?(a):(b))\n#define f(i,a,b) for(register int i=(a);i<=(b);i=-(~(i)))\n#define travel(i,u,v) for(register int i=head[u],v=e[i].v;i;i=e[i].next,v=e[i].v)\nint n,m,t,Root;\ntypedef int arr[neko];\narr head,dep,siz,fa,son,w,ord,top,col;\nint Sum[neko<<2],Led[neko<<2],Red[neko<<2],Pnt[neko<<2];\nstruct node\n{\n    int v,next;\n}e[meko<<1];\nvoid add(int x,int y)\n{\n    e[++t].v=y;\n    e[t].next=head[x];\n    head[x]=t;\n}\nnamespace Seg_Tree\n{\n    #define mid ((l+r)>>1)\n    #define ori tagl,tagr\n    #define lson root<<1,l,mid\n    #define rson root<<1|1,mid+1,r\n    void pushup(int root)\n    {\n        Sum[root]=Sum[root<<1]+Sum[root<<1|1];\n        if(Red[root<<1]==Led[root<<1|1])--Sum[root];\n        Led[root]=Led[root<<1],Red[root]=Red[root<<1|1];\n    }\n    void pushdown(int root)\n    {\n        if(Pnt[root])\n        {\n            Sum[root<<1]=Sum[root<<1|1]=1;\n            Led[root<<1]=Led[root<<1|1]=Red[root<<1]=Red[root<<1|1]=Pnt[root];\n            Pnt[root<<1]=Pnt[root<<1|1]=Pnt[root];\n            Pnt[root]=0;\n        }\n    }\n    void build(int root,int l,int r)\n    {\n        if(l==r){Led[root]=Red[root]=col[ord[l]],Sum[root]=1;return;}\n        build(lson);\n        build(rson);\n        pushup(root);\n    }\n    void update(int root,int l,int r,int tagl,int tagr,int x)\n    {\n        if(l>=tagl&&r<=tagr){Pnt[root]=x,Led[root]=Red[root]=x,Sum[root]=1;return;}\t\n        pushdown(root);\n        if(tagl<=mid)update(lson,ori,x);\n        if(tagr>mid)update(rson,ori,x);\n        pushup(root);\n    }\n    int query(int root,int l,int r,int tagl,int tagr)\n    {\n        if(l>=tagl&&r<=tagr)return Sum[root];\n        pushdown(root);\n        int tmp=0;\n        if(tagl<=mid)tmp+=query(lson,ori);\n        if(tagr>mid)tmp+=query(rson,ori);\n        if(tagl<=mid&&tagr>mid&&Red[root<<1]==Led[root<<1|1])--tmp;\n        return tmp;\n    }\n    int confirm(int root,int l,int r,int tag)\n    {\n        if(l==r)return Led[root];\n        pushdown(root);\n        if(tag<=mid)return confirm(lson,tag);\n        else return confirm(rson,tag);\n    }\n}\nnamespace Siz_Subdivision\n{\n    using namespace std;\n    using namespace Seg_Tree;\n    int cnt;\n    void dfs(int u)\n    {\n        dep[u]=dep[fa[u]]+1;\n        siz[u]=1;\n        travel(i,u,v)\n        {\n            if(v!=fa[u])\n            {\n                fa[v]=u;\n                dfs(v);\n                siz[u]+=siz[v];\n                if(!son[u]||siz[v]>siz[son[u]])son[u]=v; \n            } \n        }\n    }\n    void dfs2(int u)\n    {\n        w[u]=++cnt;\n        ord[cnt]=u;\n        if(son[fa[u]]==u)top[u]=top[fa[u]];\n        else top[u]=u;\n        if(son[u])dfs2(son[u]);\n        travel(i,u,v)if(v!=fa[u]&&v!=son[u])dfs2(v);\n    }\n    void pathu(int l,int r,int x)\n    {\n        while(top[l]!=top[r])\n        {\n            if(dep[top[l]]<dep[top[r]])swap(l,r);\n            update(1,1,n,w[top[l]],w[l],x);\n            l=fa[top[l]];\n        }if(dep[l]>dep[r])swap(l,r);\n        update(1,1,n,w[l],w[r],x);\n    }\n    int pathq(int l,int r)\n    {\n        int sum=0,alp,bet;\n        while(top[l]!=top[r])\n        {\n            if(dep[top[l]]<dep[top[r]])swap(l,r);\n            sum+=query(1,1,n,w[top[l]],w[l]);\n            alp=confirm(1,1,n,w[top[l]]),bet=confirm(1,1,n,w[fa[top[l]]]);\n            if(alp==bet)--sum;\n            l=fa[top[l]];\n        }if(dep[l]>dep[r])swap(l,r);\n        sum+=query(1,1,n,w[l],w[r]);\n        return sum;\n    }\n}\nint main()\n{\n    using namespace Siz_Subdivision;\n    int x,y,z;char opt[30];\n    scanf(\"%d%d\",&n,&m),Root=chkmin(5,n);\n    f(i,1,n)scanf(\"%d\",&col[i]);\n    f(i,1,n-1)scanf(\"%d%d\",&x,&y),add(x,y),add(y,x);\n    dfs(Root),dfs2(Root);Seg_Tree::build(1,1,n);\n    f(i,1,m)\n    {\n        getchar();\n        scanf(\"%s%d%d\",opt,&x,&y);\n        if(opt[0]=='C')scanf(\"%d\",&z),pathu(x,y,z);\n        else printf(\"%d\\n\",pathq(x,y));\n    }return 0;\n}\n```",
        "postTime": 1523587735,
        "uid": 7020,
        "name": "teafrogsf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u611f\u89c9\u9898\u89e3\u5168\u662fC\u7684\uff0c\u6211\u6765\u4e2apascal\u7684\u9898\u89e3\u3002\u7528\u6811\u94fe\u5256\u5206\u3002\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u533a\u95f4\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u8fb9\u7684\u989c\u8272\uff0c\u53f3\u8fb9\u7684\u989c\u8272\uff0c\u8fd9\u4e00\u6bb5\u4e2d\u6709\u51e0\u79cd\u989c\u8272\u5c31\u53ef\u4ee5\u4e86\u3002\u6ce8\u610f\u67e5\u8be2\u548c\u5408\u5e76\u65f6\u8981\u6ce8\u610f\u5de6\u989c\u8272\u548c\u53f3\u989c\u8272\u662f\u4e0d\u662f\u4e00\u6837\uff0c\u4e00\u6837\u8ba9\u7b54\u6848-1\u3002\u4e0a\u4ee3\u7801\n\n\n\n```cpp\nconst maxn=100000;\ntype etype=record\n  from,too,head,next:longint;\nend;\ntype notype=record\n  size,w,fw,top,son,fa,deep,colour:longint;\nend;\ntype ttype=record\n  left,right,value,doubt,lc,rc:longint;\nend;\nvar e:array[1..maxn shl 1] of etype;\n    no:array[1..maxn] of notype;\n    t:array[1..maxn shl 2] of ttype;\n    num,index,p:longint;\nprocedure save(x,y:longint);\nbegin\n  num:=num+1; e[num].from:=x; e[num].too:=y;\n  e[num].next:=e[x].head; e[x].head:=num;\nend;\nprocedure dfs1(k,dp:longint);\n var t:longint;\nbegin\n  no[k].size:=1;\n  no[k].deep:=dp;\n  t:=e[k].head;\n  while t<>0 do\n   begin\n     if no[e[t].too].size=0 then begin\n                                  no[e[t].too].fa:=k;\n                                  dfs1(e[t].too,dp+1);\n                                  no[k].size:=no[k].size+no[e[t].too].size;\n                                  if no[e[t].too].size>no[no[k].son].size then no[k].son:=e[t].too;\n                                 end;\n      t:=e[t].next;\n     end;\nend;\nprocedure dfs2(k,tp:longint);\n  var t:longint;\nbegin\n  index:=index+1;\n  no[k].top:=tp;\n  no[k].w:=index;\n  no[index].fw:=k;\n  if no[k].son<>0 then dfs2(no[k].son,tp);\n  t:=e[k].head;\n  while t<>0 do\n   begin\n     if no[e[t].too].w=0 then dfs2(e[t].too,e[t].too);\n     t:=e[t].next;\n   end;\nend;\nprocedure pushup(k:longint);\n var lson:longint;\nbegin\n  lson:=k shl 1;\n  t[k].value:=t[lson].value+t[lson+1].value;\n  t[k].lc:=t[lson].lc;\n  t[k].rc:=t[lson+1].rc;\n  if t[lson].rc=t[lson+1].lc then t[k].value:=t[k].value-1;\nend;\nprocedure build(l,r,k:longint);\n  var lson,mid:longint;\nbegin\n  t[k].left:=l; t[k].right:=r;\n  if l=r then begin\n               t[k].lc:=no[no[l].fw].colour;\n               t[k].rc:=no[no[l].fw].colour;\n               t[k].value:=1;\n              end\n               else\n               begin\n                lson:=k shl 1;\n                mid:=(l+r) shr 1;\n                build(l,mid,lson);\n                build(mid+1,r,lson+1);\n                pushup(k);\n               end;\nend;\nprocedure pushdown(k:longint);\n var lson:longint;\nbegin\n  if t[k].doubt<>0 then begin\n                         lson:=k shl 1;\n                         t[lson].doubt:=t[k].doubt;\n                         t[lson+1].doubt:=t[k].doubt;\n                         t[lson].value:=1;\n                         t[lson+1].value:=1;\n                         t[lson].lc:=t[lson].doubt;\n                         t[lson].rc:=t[lson].doubt;\n                         t[lson+1].lc:=t[lson+1].doubt;\n                         t[lson+1].rc:=t[lson+1].doubt;\n                         t[k].doubt:=0;\n                        end;\nend;\nprocedure update(l,r,c,k:longint);\n  var lson,mid:longint;\nbegin\n  if (l<=t[k].left) and (t[k].right<=r) then begin\n                                               t[k].value:=1;\n                                               t[k].lc:=c;\n                                               t[k].rc:=c;\n                                               t[k].doubt:=c;\n                                             end\n                                             else\n                                               begin\n                                                 pushdown(k);\n                                                 lson:=k shl 1;\n                                                 mid :=t[lson].right;\n                                                 if l<=mid then update(l,r,c,lson);\n                                                 if r>=mid+1 then update(l,r,c,lson+1);\n                                                 pushup(k);\n                                               end;\nend;\nfunction query(l,r,k:longint;var x,p:longint):longint;//\u67e5\u8be2\u65f6\u8fd4\u56de\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u8fb9\u989c\u8272\u548c\u53f3\u8fb9\u989c\u8272\u540e\u9762\u8981\u7528\u3002\n var lson,mid,tt:longint;\nbegin\n  tt:=0;\n  if (l<=t[k].left) and (t[k].right<=r) then begin query:=t[k].value; if t[k].left=l then x:=t[k].lc; if t[k].right=r then  p:=t[k].rc end\n                                        else begin\n                                              pushdown(k);\n                                              query:=0;\n                                              lson:=k shl 1;\n                                              mid :=t[lson].right;\n                                              if l<=mid  then begin query:=query+query(l,r,lson,x,p); tt:=1;end;\n                                              if r>=mid+1  then begin query:=query+query(l,r,lson+1,x,p); if (tt=1)and(t[lson].rc=t[lson+1].lc) then query:=query-1;end;\n                                             end;\nend;\nprocedure lca1(x,y,z:longint);\n  var f1,f2:longint;\nbegin\n  f1:=no[x].top; f2:=no[y].top;\n  while f1<>f2 do\n    if no[f1].deep>no[f2].deep then begin update(no[f1].w,no[x].w,z,1); x:=no[f1].fa; f1:=no[x].top; end\n                               else  begin update(no[f2].w,no[y].w,z,1); y:=no[f2].fa; f2:=no[y].top; end;\n  if no[x].deep>no[y].deep then update(no[y].w,no[x].w,z,1) else update(no[x].w,no[y].w,z,1);\nend;\nprocedure lca2(x,y:longint);\n var f1,f2,t1,t2,s,ans,u:longint;\nbegin\n  f1:=no[x].top; f2:=no[y].top;  ans:=0; t1:=0; t2:=0;\n  while f1<>f2 do\n    if no [f1].deep>no[f2].deep then begin u:=t1; ans:=ans+query(no[f1].w,no[x].w,1,t1,s); if u=s then ans:=ans-1; x:=no[f1].fa; f1:=no[x].top end\n  //t1\u8bb0\u5f55lca\u4e2d\u8def\u8fc7\u7684\u7956\u5148\u7684\u989c\u8272\uff0c\u5148\u7528U\u5b58\u50a8t1\uff0c\u7136\u540e\u67e5\u8be2\u987a\u4fbf\u4fee\u6539t1\u5e76\u5e26\u56det1\u7956\u5148\u7684\u989c\u8272s\uff0c\u5982\u679ct1\u548cs\u4e00\u6837\u90a3\u4e48[x,t1]\u548c[t1,t1\u7684\u7956\u5148]\u662f\u8054\u901a\u7684\u6240\u4ee5\u603b\u6570\u51cf\u6389\u4e00\uff0c\u4e0b\u9762\u7684\u4e5f\u7c7b\u4f3c\n                           else begin u:=t2; ans:=ans+query(no[f2].w,no[y].w,1,t2,s); if u=s then ans:=ans-1; y:=no[f2].fa; f2:=no[y].top end;\n    if no[x].deep>no[y].deep then begin ans:=ans+query(no[y].w,no[x].w,1,u,s);if t2=u then ans:=ans-1; if t1=s then ans:=ans-1; end\n                              else begin ans:=ans+query(no[x].w,no[y].w,1,u,s);if t1=u then ans:=ans-1; if t2=s then ans:=ans-1; end;\n    writeln(ans);\nend;\nprocedure work;\n var m,n,i,x,y,z,j:longint;\n     w:char;\nbegin\n  fillchar(e,sizeof(e),0);\n  fillchar(no,sizeof(no),0);\n  fillchar(t,sizeof(t),0);\n  num:=0; index:=0;\n  readln(n,m);\n  for i:=1 to n do\n   read(no[i].colour);\n  for i:=1 to n-1 do\n   begin\n     readln(x,y);\n     save(x,y);\n     save(y,x);\n   end;\n  dfs1(1,1);\n  dfs2(1,1);\n  build(1,n,1);\n  for i:=1 to m do\n   begin\n     read(w);\n     if w='C' then begin readln(x,y,z); lca1(x,y,z);{ for j:=1 to n*4 do writeln(t[j].left,' ',t[j].right,' ',t[j].value,' ',t[j].lc, ' ',t[j].rc,' ',t[j].doubt);} end;\n     if w='Q' then begin readln(x,y); lca2(x,y); end;\n   end;\nend;\nbegin\n  work;\nend.\n```",
        "postTime": 1497008347,
        "uid": 44628,
        "name": "\u3010\u54cf\u54cf\u72ec\u4e50\u3011",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "\u9898\u76ee\u4e2d\u6240\u7ed9\u51fa\u5bf9\u6811\u7684\u64cd\u4f5c\u5c31\u662f\u6811\u4e0a\u533a\u95f4\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u6811\u94fe\u5256\u5206\u3002\u7ebf\u6bb5\u6811\u4fdd\u5b58\u533a\u95f4\u7684\u4e0d\u540c\u989c\u8272\u5757\u7684\u6570\u91cf\uff0c\u5173\u4e8e\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u7b54\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f85\u52a9\u6570\u7ec4lc\u548crc\u6765\u8bb0\u5f55\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u989c\u8272\uff0c\u5b9e\u73b0O(1)\u5408\u5e76\u3002\n\n\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff0c\u4ee5\u53ca\u5404\u79cd\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u6d89\u53ca\u7aef\u70b9\u3001\u8fb9\u754c\u7684\u95ee\u9898\u9700\u8981\u7279\u522b\u6ce8\u610f\u3002\n\n\u524d\u9762\u90a3\u4e2a\u795e\u7287\u5199\u7684\u975e\u5e38\u597d\uff0c\u4f46\u6211\u8fd8\u662f\u60f3\u8865\u4e00\u4e2a\u6211\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u53ea\u6709\u4e00\u4efd\u4ee3\u7801\u6211\u662f\u770b\u4e0d\u61c2\u7684\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=1e5+5;\nint inline swp(int &a,int &b){\n    a^=b^=a^=b;\n}\nint inline readint(){\n    int Num;char ch;\n    while((ch=getchar())<'0'||ch>'9');Num=ch-'0';\n    while((ch=getchar())>='0'&&ch<='9') Num=Num*10+ch-'0';\n    return Num;\n}\nvoid outint(int x){\n    if(x>=10) outint(x/10);\n    putchar(x%10+'0');\n}\nint n,m,data[MAXN];\nint v[MAXN<<1],ne[MAXN<<1],fir[MAXN],cnt=0;\nvoid add(int a,int b){\n    v[++cnt]=b,ne[cnt]=fir[a],fir[a]=cnt;\n    v[++cnt]=a,ne[cnt]=fir[b],fir[b]=cnt;\n}\nint siz[MAXN],fa[MAXN],dep[MAXN];\nint top[MAXN],son[MAXN],pos[MAXN],fp[MAXN],pcnt=0;\nvoid dfs1(int x){\n    siz[x]=1,son[x]=0;\n    for(int i=fir[x];i!=-1;i=ne[i]) if(v[i]!=fa[x]){\n        fa[v[i]]=x,dep[v[i]]=dep[x]+1;dfs1(v[i]);\n        siz[x]+=siz[v[i]];\n        if(siz[son[x]]<siz[v[i]]) son[x]=v[i];\n    }\n}\nvoid dfs2(int x){\n    pos[x]=++pcnt,fp[pcnt]=x;\n    if(!son[x]) return;\n    top[son[x]]=top[x],dfs2(son[x]);\n    for(int i=fir[x];i!=-1;i=ne[i]) if(v[i]!=fa[x]&&v[i]!=son[x]){top[v[i]]=v[i];dfs2(v[i]);}\n}\n#define lson l,mid,rt<<1\n#define rson mid+1,r,rt<<1|1\nint sum[MAXN<<2],laz[MAXN<<2],lc[MAXN<<2],rc[MAXN<<2];\nvoid inline pushup(int &rt){\n    sum[rt]=sum[rt<<1]+sum[rt<<1|1];if(rc[rt<<1]==lc[rt<<1|1]) sum[rt]--;\n    lc[rt]=lc[rt<<1],rc[rt]=rc[rt<<1|1];\n}\nvoid inline pushdown(int &rt){\n    if(laz[rt]){\n        lc[rt<<1]=lc[rt<<1|1]=rc[rt<<1]=rc[rt<<1|1]=laz[rt<<1]=laz[rt<<1|1]=laz[rt],laz[rt]=0;\n        sum[rt<<1]=sum[rt<<1|1]=1;\n    }\n}\nvoid build(int l,int r,int rt){\n    if(l==r){\n        lc[rt]=rc[rt]=data[fp[l]],sum[rt]=1;\n        return;\n    }\n    int mid=l+r>>1;\n    build(lson);build(rson);\n    pushup(rt);\n}\nvoid clr(int c,int L,int R,int l,int r,int rt){\n    if(L<=l&&r<=R){\n        laz[rt]=lc[rt]=rc[rt]=c,sum[rt]=1;\n        return;\n    }\n    pushdown(rt);\n    int mid=l+r>>1;\n    if(L<=mid) clr(c,L,R,lson);\n    if(R>mid) clr(c,L,R,rson);\n    pushup(rt);\n}\nvoid Clr(int x,int y,int c){\n    int tx=top[x],ty=top[y];\n    while(tx!=ty){\n        if(dep[tx]>dep[ty]) clr(c,pos[tx],pos[x],1,n,1),x=fa[tx],tx=top[x];\n        else clr(c,pos[ty],pos[y],1,n,1),y=fa[ty],ty=top[y];\n    }\n    if(dep[x]<dep[y]) swp(x,y);clr(c,pos[y],pos[x],1,n,1);\n}\nint qryclr(int p,int l,int r,int rt){\n    if(l==r) return lc[rt];\n    pushdown(rt);\n    int mid=l+r>>1;\n    if(p<=mid) return qryclr(p,lson);\n    else return qryclr(p,rson);\n}\nint qry(int L,int R,int l,int r,int rt){\n    if(L<=l&&r<=R) return sum[rt];\n    pushdown(rt);\n    int mid=l+r>>1,sm=0;\n    if(L<=mid) sm+=qry(L,R,lson);\n    if(R>mid) sm+=qry(L,R,rson);\n    if(L<=mid&&R>mid&&rc[rt<<1]==lc[rt<<1|1]) return sm-1;\n    return sm;\n}\nvoid Qry(int x,int y){\n    int tx=top[x],ty=top[y],ans=0;\n    while(tx!=ty){\n        if(dep[tx]>dep[ty]) ans+=qry(pos[tx],pos[x],1,n,1),ans-=qryclr(pos[tx],1,n,1)==qryclr(pos[fa[tx]],1,n,1),x=fa[tx],tx=top[x];\n        else ans+=qry(pos[ty],pos[y],1,n,1),ans-=qryclr(pos[ty],1,n,1)==qryclr(pos[fa[ty]],1,n,1),y=fa[ty],ty=top[y];\n    }\n    if(dep[x]<dep[y]) swp(x,y);ans+=qry(pos[y],pos[x],1,n,1);\n    outint(ans),putchar('\\n');\n}\nint main(){\n    memset(laz,0,sizeof(laz));\n    memset(fir,-1,sizeof(fir));\n    memset(ne,-1,sizeof(ne));\n    n=readint(),m=readint();\n    for(int i=1;i<=n;i++) data[i]=readint();\n    for(int i=1;i<n;i++) add(readint(),readint());\n    siz[0]=fa[1]=dep[1]=0;dfs1(1);\n    top[1]=1;dfs2(1);\n    build(1,n,1);\n    for(int i=1;i<=m;i++){\n        char opt[5];scanf(\"%s\",opt);\n        int a=readint(),b=readint();\n        switch(opt[0]){\n            case 'C':Clr(a,b,readint());break;\n            case 'Q':Qry(a,b);break;\n        }\n    }\n}\n```",
        "postTime": 1483752167,
        "uid": 20903,
        "name": "halfrot",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    },
    {
        "content": "### \u4e3a\u4ec0\u4e48\u5f88\u591a\u4eba\u90fd\u7528\u6570\u7ec4\u7248\u7ebf\u6bb5\u6811\uff1f\n\n#### \u867d\u7136\u6211\u7ecf\u5e38\u5199\u6570\u7ec4\u7248\u7ebf\u6bb5\u6811\uff0c\u4f46\u8fd9\u9898\u5f88\u660e\u663e\u7528\u7ed3\u6784\u4f53\u66f4\u597d\u5199\n\n\u6811\u94fe\u5256\u5206\u7684\u66f4\u65b0\u8fc7\u7a0b\u4e0d\u52a0\u53d9\u8ff0\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u770b\u770b\u5176\u4ed6DALAO\u7684\u9898\u89e3\n\n## \u8fd9\u91cc\u4e3b\u8981\u8bb2\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0\uff0c\u4ee5\u53ca\u67e5\u8be2\u7684\u8fc7\u7a0b,\u6bd4\u5176\u4ed6DALAO\u66f4\u8be6\u7ec6\n\n\u66f4\u65b0\u65f6\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\n\n```cpp\nseg update(seg a,seg b)\n{\n\tseg p;\n\tp.lc=p.rc=p.sum=0;\n\tp.lc=a.lc;\n\tp.rc=b.rc;\n\tp.sum=a.sum+b.sum;\n\tif(a.rc==b.lc)p.sum--;\n\treturn p;\n}\n```\n\n\u8fd9\u6837\u5199\u6709\u4e00\u4e2a\u597d\u5904\uff0cupdate\u5c31\u76f8\u5f53\u4e8e\u4e00\u79cd\u8fd0\u7b97\uff0c\u5bf9\u4e8e\u6240\u6709\u7684seg\u7c7b\u578b\u6211\u90fd\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u65b9\u4fbf\u5730\u5408\u5e76\u4e24\u4e2aseg\n\n### \u5f88\u663e\u7136\uff0c\u8fd9\u4e2audpate\u662f\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u7684\n\n### \u56e0\u6b64\u6811\u94fe\u5256\u5206\u67e5\u8be2\u7684\u8fc7\u7a0b\u5c31\u4e0d\u80fd\u50cf\u6a21\u677f\u9898\u90a3\u6837\u7528\u4e00\u4e2aans\u76f4\u63a5\u66f4\u65b0\n\n#### \u4ee5\u4e0b\u662f\u5206\u6790\u7684\u8fc7\u7a0b\n\n\u8bbe$ x $,$ y $\u4e3a\u8981\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\n\n\u5219\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u6761\u94fe\u4ece$ x $,$ y $,$ lca(x,y) $\u5206\u4e3a\u4e24\u6bb5\n\n\u5bf9$ x $\u5230$ lca(x,y) $,\u7ef4\u62a4ansl\n\n\u5bf9$y$\u7ef4\u62a4ansr\n\n\u67e5\u8be2\u65f6,\u5728\u5411\u4e0a\u8df3\u7684\u8fc7\u7a0b\u4e2d,id\u662f\u9010\u6e10\u51cf\u5c0f\u7684\n\n\u56e0\u6b64,\u65b0\u4e00\u6b21\u67e5\u8be2\u6240\u5f97\u7684\u7ed3\u679c\u5e94\u8be5\u653e\u5728\u5de6\u8fb9\u66f4\u65b0(\u56e0\u4e3a\u65b0\u4e00\u6bb5\u7684id\u66f4\u5c0f)\n\n### \u5f53\u4e24\u70b9\u6c47\u5408\u65f6,ansl,ansr\u7684lc\u90fd\u662f\u671d\u7740lca\u65b9\u5411\n\n\u8fd9\u6837\u5c31\u65e0\u6cd5\u5408\u5e76ansl,ansr\n\n\u56e0\u4e3aansl\u7684rc\u662f\u5bf9\u4e0d\u4e0aansr\u7684lc\u7684\n\n\u6240\u4ee5\u8981\u4ea4\u6362ansl\u7684lc,rc\n\ncode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=100005;\nstruct seg\n{\n\tint lc,rc,sum,setc;\n\tseg(){lc=rc=sum=setc=0;}\n}tr[MAXN<<2];\nint n,m,cnt;\nint d[MAXN],top[MAXN],fa[MAXN];\nint val[MAXN],son[MAXN];\nint id[MAXN],sz[MAXN];\nvector<int>v[MAXN];\nvoid read(int& x)\n{\n\tchar c=getchar();\n\tx=0;\n\twhile(c<'0'||c>'9')c=getchar();\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n}\nseg update(seg a,seg b)\n{\n\tseg p;\n\tp.lc=p.rc=p.sum=0;\n\tp.lc=a.lc;\n\tp.rc=b.rc;\n\tp.sum=a.sum+b.sum;\n\tif(a.rc==b.lc)p.sum--;\n\treturn p;\n}\nvoid pushdown(int o)\n{\n\tif(tr[o].setc)\n\t{\n\t\ttr[o<<1].setc=tr[o<<1|1].setc=tr[o].setc;\n\t\ttr[o<<1].sum=tr[o<<1|1].sum=1;\n\t\ttr[o<<1].lc=tr[o<<1].rc=tr[o].setc;\n\t\ttr[o<<1|1].lc=tr[o<<1|1].rc=tr[o].setc;\n\t\ttr[o].setc=0;\n\t}\n}\nvoid change(int o,int l,int r,int ql,int qr,int k)\n{\n\tif(ql<=l&&qr>=r)\n\t{\n\t\ttr[o].lc=tr[o].rc=k;\n\t\ttr[o].sum=1;\n\t\ttr[o].setc=k;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tpushdown(o);\n\tif(ql<=mid)change(o<<1,l,mid,ql,qr,k);\n\tif(qr>mid)change(o<<1|1,mid+1,r,ql,qr,k);\n\ttr[o]=update(tr[o<<1],tr[o<<1|1]);\n}\nseg query(int o,int l,int r,int ql,int qr)\n{\n\tif(ql<=l&&qr>=r)\n\t{\n\t\treturn tr[o];\n\t}\n\tseg ans,ansl,ansr;\n\tbool okl=0,okr=0;\n\tint mid=(l+r)>>1;\n\tpushdown(o);\n\tif(ql<=mid)\n\t{\n\t\tansl=query(o<<1,l,mid,ql,qr);\n\t\tokl=1;\n\t}\n\tif(qr>mid)\n\t{\n\t\tansr=query(o<<1|1,mid+1,r,ql,qr);\n\t\tokr=1;\n\t}\n\tif(okl&&okr)ans=update(ansl,ansr);\n\telse if(okl)ans=ansl;\n\telse if(okr)ans=ansr;\n\treturn ans;\n}\nvoid dfs(int x,int dep)\n{\n\td[x]=dep;\n\tsz[x]=1;\n\tfor(int i=0;i<v[x].size();i++)\n\t{\n\t\tint y=v[x][i];\n\t\tif(!d[y])\n\t\t{\n\t\t\tfa[y]=x;\n\t\t\tdfs(y,dep+1);\n\t\t\tif(!son[x]||sz[son[x]]<sz[y])son[x]=y;\n\t\t\tsz[x]+=sz[y];\n\t\t}\n\t}\n}\nvoid dfs2(int x,int t)\n{\n\tid[x]=++cnt;\n\ttop[x]=t;\n\tif(son[x])dfs2(son[x],t);\n\tfor(int i=0;i<v[x].size();i++)\n\t{\n\t\tint y=v[x][i];\n\t\tif(!id[y])dfs2(y,y);\n\t}\n}\nvoid modify(int x,int y,int k)\n{\n\tif(d[x]<d[y])swap(x,y);\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]<d[top[y]])swap(x,y);\n\t\tchange(1,1,n,id[top[x]],id[x],k);\n\t\tx=fa[top[x]];\n\t}\n\tif(d[x]<d[y])swap(x,y);\n\tchange(1,1,n,id[y],id[x],k);\n}\nseg ask(int x,int y)\n{\n\tseg ansl,ansr;\n\tansl.sum=1;\n\tansl.lc=ansl.rc=query(1,1,n,id[x],id[x]).lc;\n\tansr.sum=1;\n\tansr.lc=ansr.rc=query(1,1,n,id[y],id[y]).rc;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(d[top[x]]>d[top[y]])\n\t\t{\n\t\t\tansl=update(query(1,1,n,id[top[x]],id[x]),ansl);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tansr=update(query(1,1,n,id[top[y]],id[y]),ansr);\n\t\t\ty=fa[top[y]];\n\t\t}\n\t}\n\tif(d[x]>d[y])ansl=update(query(1,1,n,id[y],id[x]),ansl);\n\telse ansr=update(query(1,1,n,id[x],id[y]),ansr);\n\tswap(ansl.lc,ansl.rc);\n\treturn update(ansl,ansr);\n}\nint main()\n{\n\tread(n);\n\tread(m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tread(val[i]);\n\t}\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tread(x);\n\t\tread(y);\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\tdfs(1,1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchange(1,1,n,id[i],id[i],val[i]);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar op[2];\n\t\tscanf(\"%s\",op);\n\t\tif(op[0]=='Q')\n\t\t{\n\t\t\tint x,y;\n\t\t\tread(x);\n\t\t\tread(y);\n\t\t\tprintf(\"%d\\n\",ask(x,y).sum);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint x,y,k;\n\t\t\tread(x);\n\t\t\tread(y);\n\t\t\tread(k);\n\t\t\tmodify(x,y,k);\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1554897037,
        "uid": 68207,
        "name": "CreeperLordVader",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2486 \u3010[SDOI2011]\u67d3\u8272\u3011"
    }
]