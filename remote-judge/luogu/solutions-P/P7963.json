[
    {
        "content": "\u68cb\u5b50\u4f1a\u5c06\u68cb\u76d8\u5206\u5f00\u4e3a\u82e5\u4e2a\u90e8\u5206\uff0c\u5206\u88c2\u8fc7\u7a0b\u4e0d\u597d\u7ef4\u62a4\u3002\u6545\u5148\u79bb\u7ebf\u6240\u6709\u8be2\u95ee\uff0c\u5c06\u6dfb\u52a0\u68cb\u5b50\u6539\u4e3a\u5220\u9664\u68cb\u5b50\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u7565\u5fae\u66f4\u6539\u68cb\u5b50\u7684\u7b49\u7ea7\uff0c\u4f7f\u5176\u4e24\u4e24\u4e0d\u540c\u3002\n\n\u6211\u4eec\u9996\u5148\u8003\u8651 3 \u7c7b\u8fb9\u3002\u6211\u4eec\u7ef4\u62a4\u4e09\u7c7b\u8fb9\u7ec4\u6210\u7684\u8fde\u901a\u5757\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u9700\u8981\u7ef4\u62a4\u56db\u4e2a\u6570\u636e\u7ed3\u6784\uff1a\n- \u5176\u8fde\u5230\u7684\u767d\u5b50\u7684\u7b49\u7ea7\uff08\u6211\u4eec\u9700\u8981\u67e5\u8be2\u7b49\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u68cb\u5b50\u4e2a\u6570\uff09\uff1b\n- \u5176\u8fde\u5230\u7684\u9ed1\u5b50\u7684\u7b49\u7ea7\uff08\u6211\u4eec\u9700\u8981\u67e5\u8be2\u7b49\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u68cb\u5b50\u4e2a\u6570\uff09\uff1b\n- \u7a7a\u4f4d\uff0c\u540c\u4e00\u884c\u7684\u7a7a\u4f4d\u5e94\u5f53\u8fde\u7eed\uff08\u6211\u4eec\u9700\u8981\u67e5\u8be2\u4e00\u884c\u7684\u67d0\u4e00\u6bb5\u4e2d\u5305\u542b\u591a\u5c11\u7a7a\u4f4d\uff09\uff1b\n- \u7a7a\u4f4d\uff0c\u540c\u4e00\u5217\u7684\u7a7a\u4f4d\u5e94\u5f53\u8fde\u7eed\uff08\u6211\u4eec\u9700\u8981\u67e5\u8be2\u4e00\u5217\u7684\u67d0\u4e00\u6bb5\u4e2d\u5305\u542b\u591a\u5c11\u7a7a\u4f4d\uff09\uff1b\n\n\u540c\u65f6\u6211\u4eec\u8fd8\u9700\u8981\u652f\u6301\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\u3001\u5220\u9664\u4e00\u4e2a\u68cb\u5b50\u3002\u5176\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6+\u7ebf\u6bb5\u6811\u5408\u5e76\u5b9e\u73b0\u3002\n\n\u63a5\u7740\u8003\u8651 2 \u7c7b\u8fb9\u3002\u6211\u4eec\u76f4\u63a5\u7ef4\u62a4\u4e24\u4e2a\uff08\u6a2a\u5411\u4e0e\u7eb5\u5411\u7684\uff09\u5e76\u67e5\u96c6\uff0c\u5206\u522b\u7ef4\u62a4 2 \u7c7b\u8fb9\u6784\u6210\u7684\u8fde\u901a\u5757\u3002\u4e3a\u4e86\u4e0d\u4e0e 3 \u7c7b\u8fb9\u7b97\u91cd\uff0c\u6211\u4eec\u8981\u53bb\u6389\uff1a\n- 2 \u7c7b\u8fde\u901a\u5757\u4e24\u7aef\u7684\u68cb\u5b50\uff0c\u5982\u679c\u51fa\u73b0\u5728 3 \u7c7b\u8fde\u901a\u5757\u4e2d\uff1b\n- 2 \u7c7b\u8fde\u901a\u5757\u5185\u7684\u7a7a\u767d\u6bb5\uff0c\u5c06\u8fd9\u4e2a\u6bb5\u653e\u5230 3 \u7c7b\u8fde\u901a\u5757\u5185\u67e5\u8be2\u3002\n\n\u6700\u540e\u8003\u8651 1 \u7c7b\u8fb9\uff0c\u6211\u4eec\u4f9d\u6b21\u68c0\u67e5\u5176\u76f8\u90bb\u7684\u51e0\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5b83\u4eec\u6ca1\u6709\u5728 2 \u6216 3 \u7c7b\u8fb9\u4e2d\u7edf\u8ba1\u8fc7\uff0c\u5219\u52a0\u8fdb\u7b54\u6848\u4e2d\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e5;\n#define x first\n#define y second\n#define pii pair<int,int>\nint n,m,q,idlim;\nint idh(int x,int y){ return x*(m+2)+y; }\npii hdi(int id){ return pii(id/(m+2),id%(m+2)); }\nint idv(int x,int y){ return y*(n+2)+x; }\npii vdi(int id){ return pii(id%(n+2),id/(n+2)); }\ntemplate<class T>\nstruct array2d{\n\tT a[N];\n\tint n,m;\n\tvoid init(int val=0){\n\t\tmemset(a,val,sizeof(a));\n\t}\n\tvoid set_size(int n,int m,int val=0){\n\t\tthis->n=n;\n\t\tthis->m=m;\n\t\tinit(val);\n\t}\n\tT* operator[](int i){\n\t\treturn a+i*(m+2);\n\t}\n\tconst T* operator[](int i)const{\n\t\treturn a+i*(m+2);\n\t}\n\tT& operator[](pii p){\n\t\treturn a[p.x*(m+2)+p.y];\n\t}\n\tconst T& operator[](pii p)const{\n\t\treturn a[p.x*(m+2)+p.y];\n\t}\n};\narray2d<int> v,h,col,lv,tim;\nvector<pii> piece;\n\nstruct node{\n\tint ch[2],sz;\n};\nnode t[N*30];int cnt;\nvoid pushup(int x){\n\tt[x].sz=t[t[x].ch[0]].sz+t[t[x].ch[1]].sz;\n}\nvoid insert(int p,int &x,int l,int r){\n\tif(!x)x=++cnt;\n\tif(l==r){ t[x].sz=1;return; }\n\tint mid=(l+r)>>1;\n\tif(p<=mid)insert(p,t[x].ch[0],l,mid);\n\telse insert(p,t[x].ch[1],mid+1,r);\n\tpushup(x);\n}\nvoid erase(int p,int &x,int l,int r){\n\tif(!x)return;\n\tif(l==r){ t[x].sz=0;return; }\n\tint mid=(l+r)>>1;\n\tif(p<=mid)erase(p,t[x].ch[0],l,mid);\n\telse erase(p,t[x].ch[1],mid+1,r);\n\tpushup(x);\n}\nint merge(int x,int y){\n\tif(!(x&&y))return x+y;\n\tt[x].ch[0]=merge(t[x].ch[0],t[y].ch[0]);\n\tt[x].ch[1]=merge(t[x].ch[1],t[y].ch[1]);\n\tif(t[x].ch[0]||t[x].ch[1])pushup(x);\n\telse t[x].sz|=t[y].sz;\n\treturn x;\n}\nint query_rk(int v,int x,int l,int r){\n\tif(!t[x].sz)return 0;\n\tif(l==r)return t[x].sz;\n\tint mid=(l+r)>>1;\n\tif(v<=mid)return query_rk(v,t[x].ch[0],l,mid);\n\telse return t[t[x].ch[0]].sz+query_rk(v,t[x].ch[1],mid+1,r);\n}\nbool exist(int v,int x,int l,int r){\n\tif(!t[x].sz)return 0;\n\tif(l==r)return 1;\n\tint mid=(l+r)>>1;\n\tif(v<=mid)return exist(v,t[x].ch[0],l,mid);\n\telse return exist(v,t[x].ch[1],mid+1,r);\n}\n\nstruct DSU_with_lr{\n\tint l[N],r[N],f[N];\n\tint _(int x){ return f[x]==x?x:f[x]=_(f[x]); }\n\tvoid merge(int x,int y){\n\t\tx=_(x),y=_(y);\n\t\tif(x==y)return;\n\t\tf[x]=y;\n\t\tl[y]=min(l[y],l[x]);\n\t\tr[y]=max(r[y],r[x]);\n\t}\n\tint getl(int id){ return l[_(id)]; }\n\tint getr(int id){ return r[_(id)]; }\n\tbool check(int x,int y){ return _(x)==_(y); }\n};\nDSU_with_lr hseg,vseg;\n\nstruct block{\n\tint rt0,rt1,rth,rtv;\n\tvoid merge(block &y){\n\t\trt0=::merge(rt0,y.rt0);\n\t\trt1=::merge(rt1,y.rt1);\n\t\trth=::merge(rth,y.rth);\n\t\trtv=::merge(rtv,y.rtv);\n\t}\n\tint get0(int v){ return query_rk(v,rt0,1,q); }\n\tvoid ins0(int v){ insert(v,rt0,1,q); }\n\tvoid era0(int v){ erase(v,rt0,1,q); }\n\tint get1(int v){ return query_rk(v,rt1,1,q); }\n\tvoid ins1(int v){ insert(v,rt1,1,q); }\n\tvoid era1(int v){ erase(v,rt1,1,q); }\n\tvoid ins01(int col,int v){ col?ins1(v):ins0(v); }\n\tvoid era01(int col,int v){ col?era1(v):era0(v); }\n\tvoid insp(int x,int y){\n\t\tinsert(idh(x,y),rth,1,idlim);\n\t\tinsert(idv(x,y),rtv,1,idlim);\n\t}\n\tint getsz(int col,int lv){\n\t\treturn t[rth].sz+(1-col?get1(lv):get0(lv));\n\t}\n\tint geth(int x,int y1,int y2,int colx,int lvx){\n\t\tauto check=[&](int p,int q){\n\t\t\treturn col[p][q]==1-colx&&lv[p][q]<=lvx&&exist(lv[p][q],1-colx?rt1:rt0,1,::q);\n\t\t};\n\t\treturn query_rk(idh(x,y2),rth,1,idlim)-query_rk(idh(x,y1-1),rth,1,idlim)\n\t\t\t  +(h[x][y1-1]==2&&check(x,y1-1))+(h[x][y2]==2&&check(x,y2+1));\n\t}\n\tint getv(int x1,int x2,int y,int colx,int lvx){\n\t\tauto check=[&](int p,int q){\n\t\t\treturn col[p][q]==1-colx&&lv[p][q]<=lvx&&exist(lv[p][q],1-colx?rt1:rt0,1,::q);\n\t\t};\n\t\treturn query_rk(idv(x2,y),rtv,1,idlim)-query_rk(idv(x1-1,y),rtv,1,idlim)\n\t\t\t  +(v[x1-1][y]==2&&check(x1-1,y))+(v[x2][y]==2&&check(x2+1,y));\n\t}\n};\ntemplate<class T>\nstruct DSU_array2d{\n\tarray2d<T>a;\n\tarray2d<pii>f;\n\tvoid init(int val=0){\n\t\ta.init(val);\n\t}\n\tvoid set_size(int n,int m,int val=0){\n\t\ta.set_size(n,m,val);\n\t\tf.set_size(n,m,val);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t\tf[i][j]={i,j};\n\t}\n\tpii _(pii x){ return x==f[x]?x:f[x]=_(f[x]); }\n\tT& operator[](pii p){\n\t\treturn a[_(p)];\n\t}\n\tvoid merge(pii x,pii y){\n\t\tx=_(x),y=_(y);\n\t\tif(x==y)return;\n\t\ta[x].merge(a[y]);\n\t\tf[y]=x;\n\t}\n};\nDSU_array2d<block> b;\n\nint qsum=0;\nint ans[N];\nint lvcnt[N];\nvoid mian(){\n\tcin>>n>>m>>q;\n\tv.set_size(n,m);\n\th.set_size(n,m);\n\tcol.set_size(n,m,-1);\n\tlv.set_size(n,m);\n\ttim.set_size(n,m);\n\tpiece.clear();\n\tmemset(t,0,sizeof(t));\n\tmemset(&hseg,0,sizeof(hseg));\n\tmemset(&vseg,0,sizeof(vseg));\n\tmemset(lvcnt,0,sizeof(lvcnt));\n\tb.set_size(n,m);\n\tfor(int i=0;i<N;i++)hseg.l[i]=hseg.r[i]=hseg.f[i]=i;\n\tfor(int i=0;i<N;i++)vseg.l[i]=vseg.r[i]=vseg.f[i]=i;\n\tidlim=(n+3)*(m+3);\n\n\tcnt=1;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<m;j++){\n\t\t\tchar c;cin>>c;\n\t\t\th[i][j]=c-'0';\n\t\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tchar c;cin>>c;\n\t\t\tv[i][j]=c-'0';\n\t\t}\n\tfor(int i=1;i<=q;i++){\n\t\tint colx,lvx,x,y;\n\t\tcin>>colx>>lvx>>x>>y;\n\t\tcol[x][y]=colx;\n\t\tlv[x][y]=lvx;\n\t\t++lvcnt[lvx];\n\t\ttim[x][y]=i;\n\t\tpiece.push_back(pii(x,y));\n\t}\n\tfor(int i=1;i<=q;i++)lvcnt[i]+=lvcnt[i-1];\n\tfor(int i=q-1;i>=0;--i)lv[piece[i].x][piece[i].y]=lvcnt[lv[piece[i].x][piece[i].y]]--;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<m;j++){\n\t\t\tif(h[i][j]==2&&!lv[i][j]&&!lv[i][j+1])hseg.merge(idh(i,j),idh(i,j+1));\n\t\t\tif(h[i][j]==3&&!lv[i][j]&&!lv[i][j+1])b.merge({i,j},{i,j+1});\n\t\t\tif(h[i][j]==3&&lv[i][j]&&!lv[i][j+1]){\n\t\t\t\tb[{i,j+1}].ins01(col[i][j],lv[i][j]);\n\t\t\t}\n\t\t\tif(h[i][j]==3&&!lv[i][j]&&lv[i][j+1]){\n\t\t\t\tb[{i,j}].ins01(col[i][j+1],lv[i][j+1]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(v[i][j]==2&&!lv[i][j]&&!lv[i+1][j])vseg.merge(idv(i,j),idv(i+1,j));\n\t\t\tif(v[i][j]==3&&!lv[i][j]&&!lv[i+1][j])b.merge({i,j},{i+1,j});\n\t\t\tif(v[i][j]==3&&lv[i][j]&&!lv[i+1][j]){\n\t\t\t\tb[{i+1,j}].ins01(col[i][j],lv[i][j]);\n\t\t\t}\n\t\t\tif(v[i][j]==3&&!lv[i][j]&&lv[i+1][j]){\n\t\t\t\tb[{i,j}].ins01(col[i+1][j],lv[i+1][j]);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(!lv[i][j]){\n\t\t\t\tb[{i,j}].insp(i,j);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=q-1;i>=0;--i){\n\t\tint ans=-1;\n\t\tint x=piece[i].x,y=piece[i].y;\n\t\tint lvx=lv[x][y],colx=col[x][y];\n\t\tlv[x][y]=0; col[x][y]=-1;\n\n\t\tif(h[x][y]==2&&!lv[x][y]&&!lv[x][y+1])hseg.merge(idh(x,y),idh(x,y+1));\n\t\tif(h[x][y-1]==2&&!lv[x][y-1]&&!lv[x][y])hseg.merge(idh(x,y-1),idh(x,y));\n\t\tpii l=hdi(hseg.getl(idh(x,y))),r=hdi(hseg.getr(idh(x,y)));\n\t\tans+=r.y-l.y+1;\n\n\t\tif(v[x][y]==2&&!lv[x][y]&&!lv[x+1][y])vseg.merge(idv(x,y),idv(x+1,y));\n\t\tif(v[x-1][y]==2&&!lv[x-1][y]&&!lv[x][y])vseg.merge(idv(x-1,y),idv(x,y));\n\t\tpii u=vdi(vseg.getl(idv(x,y))),d=vdi(vseg.getr(idv(x,y)));\n\t\tans+=d.x-u.x+1;\n\n\t\tb[{x,y}].insp(x,y);\n\t\tif(h[x][y]==3){\n\t\t\tif(!lv[x][y+1])b.merge({x,y},{x,y+1});\n\t\t\telse b[{x,y}].ins01(col[x][y+1],lv[x][y+1]);\n\t\t}\n\t\tif(h[x][y-1]==3){\n\t\t\tif(!lv[x][y-1])b.merge({x,y-1},{x,y});\n\t\t\telse b[{x,y}].ins01(col[x][y-1],lv[x][y-1]);\n\t\t}\n\t\tif(v[x][y]==3){\n\t\t\tif(!lv[x+1][y])b.merge({x,y},{x+1,y});\n\t\t\telse b[{x,y}].ins01(col[x+1][y],lv[x+1][y]);\n\t\t}\n\t\tif(v[x-1][y]==3){\n\t\t\tif(!lv[x-1][y])b.merge({x-1,y},{x,y});\n\t\t\telse b[{x,y}].ins01(col[x-1][y],lv[x-1][y]);\n\t\t}\n\t\tb[{x,y}].era01(colx,lvx);\n\t\tans+=b[{x,y}].getsz(colx,lvx);\n\t\tans-=b[{x,y}].geth(l.x,l.y,r.y,colx,lvx);\n\t\tans-=b[{x,y}].getv(u.x,d.x,u.y,colx,lvx);\n\n\t\tif(col[l.x][l.y-1]==1-colx&&h[l.x][l.y-1]==2&&lv[l.x][l.y-1]<=lvx)++ans,--l.y;\n\t\tif(col[r.x][r.y+1]==1-colx&&h[r.x][r.y  ]==2&&lv[r.x][r.y+1]<=lvx)++ans,++r.y;\n\t\tif(col[u.x-1][u.y]==1-colx&&v[u.x-1][u.y]==2&&lv[u.x-1][u.y]<=lvx)++ans,--u.x;\n\t\tif(col[d.x+1][d.y]==1-colx&&v[d.x  ][d.y]==2&&lv[d.x+1][d.y]<=lvx)++ans,++d.x;\n\t\t\n\t\tauto check=[&](int p,int q){\n\t\t\treturn !lv[p][q]||(col[p][q]==1-colx&&lv[p][q]<=lvx);\n\t\t};\n\t\tauto vis=[&](int p,int q){\n\t\t\tif(b._({p,q})==b._({x,y}))return 1;\n\t\t\tif(lv[p][q]&&exist(lv[p][q],col[p][q]?b[{x,y}].rt1:b[{x,y}].rt0,1,::q))return 1;\n\t\t\treturn 0;\n\t\t};\n\t\tif(h[x][y]==1&&check(x,y+1)&&!vis(x,y+1))++ans;\n\t\tif(v[x][y]==1&&check(x+1,y)&&!vis(x+1,y))++ans;\n\t\tif(h[x][y-1]==1&&check(x,y-1)&&!vis(x,y-1))++ans;\n\t\tif(v[x-1][y]==1&&check(x-1,y)&&!vis(x-1,y))++ans;\n\t\t::ans[i]=ans;\n\t}\n\tfor(int i=0;i<q;i++)cout<<ans[i]<<\"\\n\";\n\tqsum+=q;\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tint T;cin>>T;\n\twhile(T--){\n\t\tmian();\n\t}\n}\n```\n",
        "postTime": 1638239916,
        "uid": 37676,
        "name": "\u7834\u58c1\u4eba\u4e94\u53f7",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011P7963 [NOIP2021] \u68cb\u5c40"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a $n\\times m$ \u7684\u68cb\u76d8\uff0c\u68cb\u76d8\u4e0a\u6709 $4$ \u79cd\u7c7b\u578b\u7684\u8fb9\uff0c\u5206\u522b\u4ee3\u8868\u4e0d\u53ef\u901a\u884c\u3001\u53ea\u80fd\u8d70\u4e00\u6b65\u3001\u53ea\u80fd\u4e00\u76f4\u6cbf\u4e00\u4e2a\u65b9\u5411\u5f80\u524d\u8d70\u548c\u53ef\u4ee5\u4efb\u610f\u8d70\u3002\u68cb\u5b50\u6709\u4e24\u79cd\u989c\u8272\u548c\u7b49\u7ea7\uff0c\u68cb\u5b50\u95f4\u53ef\u4ee5\u5403\u5b50\uff0c\u89c4\u5b9a\u53ea\u80fd\u5403\u989c\u8272\u4e0d\u540c\u4e14\u7b49\u7ea7\u4e0d\u9ad8\u4e8e\u81ea\u5df1\u7684\u68cb\u5b50\uff0c\u4e14\u5403\u5b8c\u5b50\u540e\u4e0d\u80fd\u7ee7\u7eed\u5411\u524d\u8d70\u3002\u540c\u65f6\u89c4\u5b9a\u6bcf\u6b21\u8d70\u5b50\u65f6\u7ecf\u8fc7\u7684\u8fb9\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u3002\u521d\u59cb\u68cb\u76d8\u662f\u7a7a\u7684\uff0c\u6709 $q$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5f80\u68cb\u76d8\u4e0a\u653e\u4e00\u4e2a\u68cb\u5b50\uff0c\u95ee\u8fd9\u4e2a\u68cb\u5b50\u80fd\u8d70\u5230\u591a\u5c11\u4e2a\u683c\u5b50\u3002\n\n\u9898\u89e3\uff1a\u5148\u5728\u4e0d\u8003\u8651\u5403\u5b50\u7684\u60c5\u51b5\u4e0b\u770b\u4e00\u4e2a\u68cb\u5b50\u80fd\u8d70\u5230\u54ea\u4e9b\u7a7a\u683c\u5b50\u3002\u6b64\u65f6\u53ef\u4ee5\u628a\u4e4b\u524d\u5df2\u7ecf\u653e\u4e0a\u7684\u68cb\u5b50\u5f53\u4f5c\u969c\u788d\uff0c\u90a3\u4e48\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u8fb9\uff0c\u53ea\u9700\u8981\u8003\u8651\u4e0a\u4e0b\u5de6\u53f3 $4$ \u4e2a\u683c\u5b50\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u8fb9\uff0c\u53ea\u9700\u8981\u8003\u8651\u6cbf\u7740\u4e0a\u4e0b\u5de6\u53f3 $4$ \u4e2a\u65b9\u5411\u5ef6\u4f38\u51fa\u53bb\u7684\u4e00\u6761\u7ebf\u6bb5\uff1b\u5bf9\u4e8e\u7b2c\u4e09\u7c7b\u8fb9\uff0c\u53ea\u9700\u8981\u8003\u8651\u7b2c\u4e09\u7c7b\u8fb9\u5f62\u6210\u7684\u8fde\u901a\u5757\u3002\n\n\u6211\u4eec\u53d1\u73b0\u653e\u4e00\u4e2a\u68cb\u5b50\u76f8\u5f53\u4e8e\u5220\u6389\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5220\u70b9\u7ef4\u62a4\u56fe\u7684\u8fde\u901a\u6027\u8fd9\u4ef6\u4e8b\u592a\u86cb\u75bc\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u59a8\u628a\u95ee\u9898\u53cd\u8fc7\u6765\uff1a\u5047\u8bbe\u4e00\u5f00\u59cb\u6240\u6709\u7684\u68cb\u5b50\u90fd\u662f\u5728\u68cb\u76d8\u4e0a\u7684\uff0c\u6211\u4eec\u8981\u6bcf\u6b21\u5220\u53bb\u4e00\u4e2a\u68cb\u5b50\uff0c\u5220\u4e4b\u524d\u95ee\u5b83\u80fd\u8d70\u5230\u591a\u5c11\u4e2a\u683c\u5b50\u3002\n\n\u663e\u7136\u52a0\u70b9\u7ef4\u62a4\u8fde\u901a\u6027\u662f\u76f8\u5bf9\u5bb9\u6613\u7684\uff0c\u5728\u4e0d\u9700\u8981\u7ef4\u62a4\u7279\u6b8a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u53ea\u9700\u8981\u5e76\u67e5\u96c6\u5c31\u80fd\u641e\u5b9a\uff1b\u5373\u4f7f\u9700\u8981\u7ef4\u62a4\u96c6\u5408\uff0c\u6211\u4eec\u4e5f\u6709\u542f\u53d1\u5f0f\u5408\u5e76\u3001\u7ebf\u6bb5\u6811\u5408\u5e76\u7b49\u4e00\u5806\u5408\u5e76\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u3002\u8fd9\u4e3a\u6211\u4eec\u8fdb\u4e00\u6b65\u5206\u6790\u9898\u76ee\u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u6280\u672f\u652f\u6301\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u7c7b\u8fb9\uff0c\u53ea\u6709\u6709\u9650\u4e2a\u70b9\u7684\u60c5\u51b5\u603b\u662f\u597d\u5904\u7406\u7684\uff1a\u5728\u522b\u7684\u60c5\u51b5\u90fd\u5904\u7406\u5b8c\u4e4b\u540e\uff0c\u53ea\u9700\u8981\u66b4\u529b\u67e5\u8be2\u4e00\u4e0b\u8fd9\u51e0\u4e2a\u70b9\u662f\u5426\u80fd\u88ab\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8d70\u5230\u5373\u53ef\u3002\u7528\u5e76\u67e5\u96c6\u81ea\u7136\u5c31\u53ef\u4ee5\u505a\u5230\u3002\n\n\u5bf9\u4e8e\u4e8c\u7c7b\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u70b9\u4e0a\u7ef4\u62a4\u5b83\u5411 $4$ \u4e2a\u65b9\u5411\u6700\u8fdc\u80fd\u6cbf\u7740\u4e8c\u7c7b\u8fb9\u8d70\u5230\u54ea\u3002\u8fd9\u4ef6\u4e8b\u4e5f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\uff0c\u5c31\u662f\u8fde\u7eed\u4e00\u6bb5\u6a2a\u5411\u6216\u7eb5\u5411\u7684\u4e8c\u7c7b\u8fb9\u4e32\u8d77\u6765\u7684\u70b9\u5206\u522b\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8d77\u6765\uff0c\u5e76\u67e5\u96c6\u4e2d\u518d\u987a\u624b\u7ef4\u62a4\u4e00\u4e2a\u96c6\u5408\u7684\u7f16\u53f7\u6700\u5c0f/\u6700\u5927\u7684\u70b9\u603b\u662f\u5bb9\u6613\u7684\u3002\n\n\u5bf9\u4e8e\u4e09\u7c7b\u8fb9\uff0c\u6211\u4eec\u597d\u50cf\u4e5f\u53ef\u4ee5\u76f4\u63a5\u62ff\u5e76\u67e5\u96c6\u7ef4\u62a4\u6240\u6709\u70b9\u5728\u4e09\u7c7b\u8fb9\u4e0b\u7684\u8fde\u901a\u6027\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u5373\u53ef\u3002\n\n\u505a\u5b8c\u4e86\u5417\uff1f\u6ca1\u6709\uff0c\u6700\u9ebb\u70e6\u4e4b\u5904\u5728\u4e8e\uff1a\u5982\u679c\u4e00\u4e2a\u70b9\u901a\u8fc7\u4e8c\u7c7b\u8fb9\u548c\u4e09\u7c7b\u8fb9\u90fd\u80fd\u8d70\u5230\uff0c\u600e\u4e48\u53bb\u91cd\uff1f\n\n\u6b64\u65f6\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u6027\u8d28\uff1a\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e8c\u7c7b\u8fb9\u4e32\u8d77\u6765\u7684\u4e00\u6392\u70b9\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\u3002\u5982\u679c\u6211\u4eec\u628a\u70b9\u6309\u7167\u6a2a\u5750\u6807\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u7eb5\u5750\u6807\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u7684\u8bdd\uff0c\u90a3\u4e48\u6a2a\u5411\u7684\u4e8c\u7c7b\u8fb9\u8fde\u901a\u5757\u5bf9\u5e94\u7f16\u53f7\u8fde\u7eed\u7684\u96c6\u5408\uff1b\u53cd\u4e4b\uff0c\u5982\u679c\u7eb5\u5750\u6807\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u6a2a\u5750\u6807\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u7f16\u53f7\u8fde\u7eed\u7684\u5c31\u662f\u7eb5\u5411\u7684\u4e8c\u7c7b\u8fb9\u8fde\u901a\u5757\u4e86\u3002\n\n\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u80fd\u5728\u4e00\u4e2a\u4e09\u7c7b\u8fb9\u8fde\u901a\u5757\u91cc\u67e5\u8be2\u7f16\u53f7\u4f4d\u4e8e\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u70b9\u7684\u6570\u91cf\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u53bb\u91cd\u4e86\u3002\n\n\u56de\u8fc7\u5934\u6765\uff0c\u6211\u4eec\u53d1\u73b0\u7b80\u5355\u5730\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e09\u7c7b\u8fb9\u7684\u8fde\u901a\u5757\u4f3c\u4e4e\u662f\u884c\u4e0d\u901a\u7684\uff0c\u56e0\u4e3a\u53bb\u91cd\u64cd\u4f5c\u610f\u5473\u7740\u6211\u4eec\u8fd8\u9700\u8981\u5b9e\u6253\u5b9e\u5730\u628a\u6bcf\u4e2a\u8fde\u901a\u5757\u4e2d\u7684\u70b9\u8bb0\u5f55\u4e0b\u6765\u3002\u8fd9\u5c31\u8981\u7528\u5230\u6211\u4eec\u5148\u524d\u63d0\u5230\u7684\u96c6\u5408\u5408\u5e76\u4e86\uff1a\u6211\u4eec\u5bf9\u6bcf\u4e2a\u4e09\u7c7b\u8fb9\u8fde\u901a\u5757\u5f00\u4e24\u4e2a\u96c6\u5408\uff0c\u5206\u522b\u5b58\u50a8\u5176\u4e2d\u7684\u70b9\u6309\u7167\u4e24\u79cd\u7f16\u53f7\u65b9\u5f0f\u7684\u7f16\u53f7\u3002\u5408\u5e76\u8fde\u901a\u5757\u65f6\uff0c\u5c06\u4e24\u4e2a\u96c6\u5408\u5bf9\u5e94\u5408\u5e76\uff0c\u67e5\u8be2\u65f6\u5728\u96c6\u5408\u4e2d\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u56e0\u4e3a\u590d\u6742\u5ea6\u4e3a $1$ \u4e2a $\\log$ \u4e14\u7ebf\u6bb5\u6811\u5929\u751f\u652f\u6301\u533a\u95f4\u67e5\u8be2\u3002\n\n\u6700\u540e\u8fd8\u8981\u5904\u7406\u5403\u5b50\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53d1\u73b0\u80fd\u901a\u8fc7\u4e00\u3001\u4e8c\u7c7b\u8fb9\u5403\u5230\u7684\u5b50\u6bcf\u4e2a\u65b9\u5411\u4e0a\u6700\u591a\u4e00\u4e2a\uff0c\u56e0\u6b64\u4e5f\u7559\u5230\u6700\u540e\u66b4\u529b\u5904\u7406\u5373\u53ef\uff1b\u800c\u901a\u8fc7\u4e09\u7c7b\u8fb9\u80fd\u5403\u5230\u7684\u5b50\u53ef\u80fd\u5f88\u591a\uff0c\u5728\u5f53\u524d\u8fd9\u4e2a\u4e09\u7c7b\u8fb9\u8fde\u901a\u5757\u91cc\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u53c8\u5411\u5916\u8fde\u4e86\u4e00\u6761\u4e09\u7c7b\u8fb9\u800c\u4e14\u6070\u597d\u9047\u5230\u4e86\u4e00\u4e2a\u68cb\u5b50\uff0c\u5b83\u5c31\u8981\u88ab\u7eb3\u5165\u8003\u8651\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u8981\u5728\u6bcf\u4e2a\u4e09\u7c7b\u8fb9\u8fde\u901a\u5757\u4e0a\u540c\u65f6\u7ed1\u5b9a\u4e0e\u5176\u76f4\u63a5\u901a\u8fc7\u4e09\u7c7b\u8fb9\u76f8\u90bb\u7684\u68cb\u5b50\u96c6\u5408\uff0c\u5f53\u7136\u80af\u5b9a\u8981\u5206\u9ed1\u767d\u4e24\u8272\u7ef4\u62a4\uff1b\u5408\u5e76\u8fde\u901a\u5757\u65f6\uff0c\u9700\u8981\u628a\u4e24\u4e2a\u96c6\u5408\u5206\u522b\u5408\u5e76\uff0c\u540c\u65f6\u6ce8\u610f\u4e00\u4e2a\u68cb\u5b50\u53ef\u80fd\u540c\u65f6\u5728\u4e24\u4e2a\u4e09\u7c7b\u8fb9\u8fde\u901a\u5757\u7684\u96c6\u5408\u4e2d\uff0c\u56e0\u6b64\u8fd8\u8981\u53bb\u91cd\uff08\u8fd9\u91cc\u63a8\u8350\u5148\u79bb\u6563\u5316\u4f7f\u5f97\u6bcf\u4e2a\u68cb\u5b50\u7684\u7b49\u7ea7\u5747\u4e0d\u540c\uff0c\u4ee5\u4fbf\u4e8e\u53bb\u91cd\uff09\u3002\u67e5\u8be2\u65f6\uff0c\u53ea\u9700\u67e5\u8be2\u4e0e\u5f53\u524d\u68cb\u5b50\u989c\u8272\u76f8\u53cd\u7684\u96c6\u5408\u4e2d\uff0c\u7b49\u7ea7\u4e0d\u8d85\u8fc7\u5b83\u81ea\u8eab\u7684\u68cb\u5b50\u6709\u591a\u5c11\u4e2a\u5373\u53ef\uff0c\u8fd9\u76f8\u5f53\u4e8e\u4e00\u4e2a\u524d\u7f00\u67e5\u8be2\u64cd\u4f5c\u3002\u663e\u7136\u8fd9\u4e5f\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u80fd\u89e3\u51b3\u7684\u4efb\u52a1\u3002\u5bf9\u4e8e\u4e00\u3001\u4e8c\u7c7b\u8fb9\u7684\u7279\u5224\uff0c\u53ea\u9700\u5c06\u6d89\u53ca\u5230\u7684\u68cb\u5b50\u5728\u7ebf\u6bb5\u6811\u4e2d\u67e5\u8be2\u4e00\u4e0b\u662f\u5426\u5b58\u5728\u5373\u53ef\u3002\n\n\u603b\u7ed3\uff1a\u5012\u5e8f\u64cd\u4f5c+\u5408\u5e76\u8fde\u901a\u5757+\u7ef4\u62a4\u96c6\u5408\uff0c\u652f\u6301\u5408\u5e76\u3001\u533a\u95f4\u67e5\u8be2+\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u603b\u590d\u6742\u5ea6 $O((nm+q) \\log (nm+q))$ \u3002\n\n\u6700\u540e\u7801\u957f\u5927\u7ea66KB\u591a\u7684\u6837\u5b50\uff0c\u80fd\u5728\u573a\u4e0a\u5199\u51fa\u6765\u8c03\u8fc7\u7684\u4eba\u8bf7\u6df1\u53d7\u6211\u4e00\u62dcorz\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u4e0d\u53bb\u5199\u6b63\u89e3\u7684\u8bdd\uff0c\u81f3\u5c11\u524d $32$ \u5206\u662f\u53ef\u4ee5\u76f4\u63a5\u6a21\u62df+bfs\u7b80\u5355\u901a\u8fc7\u7684\uff0c\u4e2d\u95f4\u201c\u6ca1\u6709\u4e09\u7c7b\u8fb9\u201d\u7684\u90e8\u5206\u53ef\u4ee5\u5982\u4e0a\u8ff0\u9898\u89e3\u6240\u8ff0\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e8c\u7c7b\u8fb9\u8fde\u901a\u5757\uff0c\u6700\u540e $n,m\\leq 1000,q\\leq 2000$ \u7684\u90e8\u5206\u53ea\u9700\u8981\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e09\u7c7b\u8fb9\u8fde\u901a\u5757\u7684\u5927\u5c0f\uff0c\u800c\u4e00\u3001\u4e8c\u7c7b\u8fb9\u4ee5\u53ca\u53ef\u80fd\u7684\u5403\u5b50\u5747\u4e0d\u8d85\u8fc7 $O(n+m+q)$ \u7ea7\u522b\uff0c\u53ef\u4ee5\u679a\u4e3e+\u66b4\u529b\u5224\u65ad\uff0c\u590d\u6742\u5ea6 $O(nm+q(n+m+q))$\uff08\u4e0d\u8fc7\u636e\u6211\u6240\u77e5\u573a\u4e0a\u771f\u6b63\u5199\u4e86\u8fd9\u6863\u7684\u4eba\u597d\u50cf\u5f88\u5c11\u7684\u6837\u5b50qwq\uff09\u3002\u5982\u4e0a\u81f3\u5c11 $56$ \u5206\u662f\u53ef\u4ee5\u4e0d\u7528\u5199\u5927\u6570\u636e\u7ed3\u6784\u5373\u53ef\u5b9e\u73b0\u7684\u3002~~\u6709\u4eba\u8bf4T4\u90e8\u5206\u5206\u662f\u4e71\u7ed9\u7684\uff0c\u4ed6\u53ef\u4e0d\u662f\u4e71\u7ed9\u7684\u554a~~\n\n```cpp\n#include<bits/stdc++.h>\n#define gc getchar()\n#define pc putchar\n#define li long long\n#define md int mid = (l + r) >> 1\n#define ln ls[q],l,mid\n#define rn rs[q],mid + 1,r\nusing namespace std;\ninline void file(char *s){\n\tchar c[50];\n\tsprintf(c,\"%s.in\",s);\n\tfreopen(c,\"r\",stdin);\n\tsprintf(c,\"%s.out\",s);\n\tfreopen(c,\"w\",stdout);\n}\nint t,n,m,q;\nint e[4][200010],ans[100010],qz[200010];\n\nstruct node{\n\tint col,lv,x,y,id;\n}a[100010],aa[100010];\ninline bool operator < (node x,node y){\n\treturn x.lv == y.lv ? x.id < y.id : x.lv < y.lv;\n}\nchar ch[200010];\n#define pos(x,y) (((x) - 1) * m + (y))\n#define pos2(x,y) (((y) - 1) * n + (x))\n#define tox(x) (((x) - 1) / m + 1)\n#define toy(x) (((x) - 1) % m + 1)\nvoid mgg(int,int);\nstruct bcj{\n\tint f[200010],sz[200010],mx[200010],mn[200010];\n\tinline int getf(int x){\n\t\treturn f[x] == x ? x : f[x] = getf(f[x]);\n\t}\n\tinline void mg(int u,int v,bool fg = 0){\n\t\tu = getf(u),v = getf(v);\n\t\tif(u == v) return;\n\t\tif(sz[u] > sz[v]) swap(u,v);\n\t\tsz[v] += sz[u];f[u] = v;\n\t\tmx[v] = max(mx[v],mx[u]);\n\t\tmn[v] = min(mn[v],mn[u]);\n\t\tif(fg) mgg(u,v);\n\t}\n\tinline void init(int p){\n\t\tfor(int i = 1;i <= p;++i) f[i] = mx[i] = mn[i] = i,sz[i] = 1;\n\t}\n\tinline int chksz(int x){return sz[getf(x)];}\n\tinline int chkmx(int x){return mx[getf(x)];}\n\tinline int chkmn(int x){return mn[getf(x)];}\n}bc[3];\nstruct xds{\n\tint rt[200010],ls[8000010],rs[8000010],sz[8000010],cnt;\n\tinline void init(){\n\t\tmemset(rt,0,sizeof(rt));\n\t\tfor(int i = 1;i <= cnt;++i) ls[i] = rs[i] = sz[i] = 0; \n\t\tcnt = 0;\n\t}\n\tint ins(int q,int l,int r,int x,int v = 1){\n\t\tif(!q) q = ++cnt;\n\t\tif(l == r){\n\t\t\tif(v == -1) return 0;\n\t\t\tif(!sz[q]) ++sz[q]; \n\t\t\treturn q;\n\t\t}\n\t\tmd;\n\t\tif(mid >= x) ls[q] = ins(ln,x,v);\n\t\telse rs[q] = ins(rn,x,v);\n\t\tsz[q] = sz[ls[q]] + sz[rs[q]];\n\t\treturn sz[q] ? q : 0;\n\t}\n\tint mg(int p,int q,int l,int r,int op = -1){\n\t\tif(!p || !sz[p]) return q;\n\t\tif(!q || !sz[q]) return p;\n\t\tif(l == r){\n\t\t\tsz[q] = min(1,sz[q] + sz[p]);\n\t\t\treturn q;\n\t\t}\n\t\tmd;\n\t\tls[q] = mg(ls[p],ln,op);\n\t\trs[q] = mg(rs[p],rn,op);\n\t\tsz[q] = sz[ls[q]] + sz[rs[q]];\n\t\treturn q;\n\t}\n\tint qy(int q,int l,int r,int x){\n\t\tif(!q || !x) return 0;\n\t\tif(l == r) return sz[q];\n\t\tmd;\n\t\tif(mid >= x) return qy(ln,x);\n\t\treturn sz[ls[q]] + qy(rn,x);\n\t}\n\tint qy2(int q,int l,int r,int x){\n\t\tif(!q || !x) return 0;\n\t\tif(l == r) return sz[q];\n\t\tmd;\n\t\tif(mid >= x) return qy2(ln,x);\n\t\treturn qy2(rn,x);\n\t}\n\tint cx(int q,int l,int r){\n\t\treturn qy(rt[q],1,n * m,r) - qy(rt[q],1,n * m,l - 1);\n\t}\n}xd[4];\nvoid mgg(int u,int v){\n\txd[0].rt[v] = xd[0].mg(xd[0].rt[u],xd[0].rt[v],1,q);\n\txd[1].rt[v] = xd[1].mg(xd[1].rt[u],xd[1].rt[v],1,q);\n\txd[2].rt[v] = xd[2].mg(xd[2].rt[u],xd[2].rt[v],1,n * m);\n\txd[3].rt[v] = xd[3].mg(xd[3].rt[u],xd[3].rt[v],1,n * m);\n}\n\ninline void init(){\n\tmemset(e,0,sizeof(e));\n\tmemset(qz,0,sizeof(qz));\n\tmemset(ans,0,sizeof(ans));\n\tfor(int i = 0;i < 3;++i) bc[i].init(n * m);\n\tfor(int i = 0;i < 4;++i) xd[i].init();\n}\nint dx[4] = {-1,0,1,0},dy[4] = {0,-1,0,1};\ninline bool caneat(int x,int y){\n\tif(!y || y >= x) return 0;\n\tnode ax = a[x],ay = a[y];\n\treturn ax.col != ay.col && ax.lv >= ay.lv;\n}\nint main(){\n\t//file(\"chess\");\n\tint i,j,k,id,tx,ty,nxt;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%d%d%d\",&n,&m,&q);\n\t\tinit();\n\t\tfor(i = 1;i <= n;++i){\n\t\t\tscanf(\"%s\",ch + 1);\n\t\t\tfor(j = 1;j < m;++j){\n\t\t\t\te[1][pos(i,j + 1)] = e[3][pos(i,j)] = ch[j] - '0';\n\t\t\t}  \n\t\t}\n\t\tfor(i = 1;i < n;++i){\n\t\t\tscanf(\"%s\",ch + 1);\n\t\t\tfor(j = 1;j <= m;++j){\n\t\t\t\te[0][pos(i + 1,j)] = e[2][pos(i,j)] = ch[j] - '0';\n\t\t\t} \n\t\t}\n\t\tfor(i = 1;i <= q;++i){\n\t\t\tscanf(\"%d%d%d%d\",&a[i].col,&a[i].lv,&a[i].x,&a[i].y);\n\t\t\ta[i].id = i;\n\t\t}\n\t\tsort(a + 1,a + q + 1);\n\t\tfor(i = 1;i <= q;++i) a[i].lv = i;\n\t\tfor(i = 1;i <= q;++i) aa[a[i].id] = a[i];\n\t\tfor(i = 1;i <= q;++i) a[i] = aa[i];\n\t\tfor(i = 1;i <= q;++i) qz[pos(a[i].x,a[i].y)] = i;\n\t\tfor(i = 1;i <= n;++i){\n\t\t\tfor(j = 1;j <= m;++j){\n\t\t\t\tid = pos(i,j);\n\t\t\t\tfor(k = 0;k < 4;++k) if(e[k][id] > 1){\n\t\t\t\t\ttx = i + dx[k];ty = j + dy[k];nxt = pos(tx,ty);\n\t\t\t\t\tif(!qz[id] && !qz[nxt]) bc[e[k][id] == 3 ? 0 : k % 2 + 1].mg(id,nxt);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(i = 1;i <= n;++i){\n\t\t\tfor(j = 1;j <= m;++j){\n\t\t\t\tid = pos(i,j);int iid = bc[0].getf(id);\n\t\t\t\txd[2].rt[iid] = xd[2].ins(xd[2].rt[iid],1,n * m,pos2(i,j));\n\t\t\t\txd[3].rt[iid] = xd[3].ins(xd[3].rt[iid],1,n * m,id);\n\t\t\t\tfor(k = 0;k < 4;++k) if(e[k][id] == 3){\n\t\t\t\t\ttx = i + dx[k];ty = j + dy[k];nxt = pos(tx,ty);\n\t\t\t\t\tif(qz[nxt]){\n\t\t\t\t\t\tint tmp = a[qz[nxt]].col;\n\t\t\t\t\t\txd[tmp].rt[iid] = xd[tmp].ins(xd[tmp].rt[iid],1,q,a[qz[nxt]].lv);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(i = q;i;--i){\n\t\t\tid = pos(a[i].x,a[i].y);\n\t\t\tint tmp = a[i].col,px = a[i].x,py = a[i].y;\n\t\t\t\n\t\t\t//opt=3\n\t\t\tfor(j = 0;j < 4;++j) if(e[j][id] == 3){\n\t\t\t\ttx = px + dx[j];ty = py + dy[j];nxt = pos(tx,ty);\n\t\t\t\tnxt = bc[0].getf(nxt);\n\t\t\t\txd[tmp].rt[nxt] = xd[tmp].ins(xd[tmp].rt[nxt],1,q,a[i].lv,-1);\n\t\t\t}\n\t\t\tfor(j = 0;j < 4;++j) if(e[j][id] == 3){\n\t\t\t\ttx = px + dx[j];ty = py + dy[j];nxt = pos(tx,ty);\n\t\t\t\tif(qz[nxt] && qz[nxt] < i) continue;\n\t\t\t\tbc[0].mg(id,nxt,1);\n\t\t\t}\n\t\t\tint iid = bc[0].getf(id);\n\t\t\tans[i] = bc[0].chksz(id) + xd[!tmp].qy(xd[!tmp].rt[iid],1,q,a[i].lv);\n\t\t\t\n\t\t\t//opt=2\n\t\t\tfor(j = 0;j < 4;++j) if(e[j][id] == 2){\n\t\t\t\ttx = px + dx[j];ty = py + dy[j];nxt = pos(tx,ty);\n\t\t\t\tif(qz[nxt] && qz[nxt] < i) continue;\n\t\t\t\tbc[j % 2 + 1].mg(id,nxt);\n\t\t\t} \n\t\t\tint mx1 = bc[1].chkmx(id),mx2 = bc[2].chkmx(id);\n\t\t\tint mn1 = bc[1].chkmn(id),mn2 = bc[2].chkmn(id);\n\t\t\tans[i] += mx2 - mn2 + 1 + (mx1 - mn1) / m + 1;\n\t\t\t\n\t\t\t//all\n\t\t\tint dmx = pos2(tox(mx1),toy(mx1)),dmn = pos2(tox(mn1),toy(mn1));\n\t\t\tans[i] -= xd[2].cx(iid,dmn,dmx) + xd[3].cx(iid,mn2,mx2);\n\t\t\tif(e[0][mn1] == 2 && caneat(i,qz[mn1 - m])){\n\t\t\t\tif(!xd[!tmp].qy2(xd[!tmp].rt[iid],1,q,a[qz[mn1 - m]].lv)) ++ans[i];\n\t\t\t} \n\t\t\tif(e[1][mn2] == 2 && caneat(i,qz[mn2 - 1])){\n\t\t\t\tif(!xd[!tmp].qy2(xd[!tmp].rt[iid],1,q,a[qz[mn2 - 1]].lv)) ++ans[i];\n\t\t\t} \n\t\t\tif(e[2][mx1] == 2 && caneat(i,qz[mx1 + m])){\n\t\t\t\tif(!xd[!tmp].qy2(xd[!tmp].rt[iid],1,q,a[qz[mx1 + m]].lv)) ++ans[i];\n\t\t\t} \n\t\t\tif(e[3][mx2] == 2 && caneat(i,qz[mx2 + 1])){\n\t\t\t\tif(!xd[!tmp].qy2(xd[!tmp].rt[iid],1,q,a[qz[mx2 + 1]].lv)) ++ans[i];\n\t\t\t} \n\t\t\t\n\t\t\t//opt=1\n\t\t\tfor(j = 0;j < 4;++j) if(e[j][id] == 1){\n\t\t\t\ttx = px + dx[j];ty = py + dy[j];nxt = pos(tx,ty);\n\t\t\t\tif(qz[nxt] && qz[nxt] < i){\n\t\t\t\t\tif(caneat(i,qz[nxt]) && !xd[!tmp].qy2(xd[!tmp].rt[iid],1,q,a[qz[nxt]].lv)) ++ans[i];\n\t\t\t\t}\n\t\t\t\telse if(bc[0].getf(id) != bc[0].getf(nxt)) ++ans[i];\n\t\t\t}\n\t\t\t--ans[i];\n\t\t}\n\t\tfor(i = 1;i <= q;++i){\n\t\t\tprintf(\"%d\\n\",ans[i]);\n\t\t} \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1638274152,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P7963 \u3010[NOIP2021] \u68cb\u5c40\u3011"
    },
    {
        "content": "- \u591a\u5199\u9898\u89e3\u4ece\u6211\u505a\u8d77\u3002\n- \u52ff\u505a\u659c\u6760\u9752\u5e74\u4ece\u6211\u505a\u8d77\u3002\n- \u5e0c\u671b\u4f5c\u8005\u4e0d\u8981\u7206\u96f6\u3002\n\n**\u9898\u610f**\n- [\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P7963)\u3002\n- \u4e00\u4e2a $n\\times m$ \u7684\u7f51\u683c\u3002\n- \u6bcf\u4e2a\u683c\u70b9\u9664\u4e86\u5411\u8fb9\u7f18\u6ca1\u6709\u7f51\u683c\u7ebf\u4ee5\u5916\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u90fd\u6709\u56db\u6761\u7f51\u683c\u7ebf\u3002\n- \u6bcf\u4e2a\u68cb\u5b50\u6709\u4e14\u4ec5\u6709\u4e09\u79cd\u8d70\u5b50\u65b9\u5f0f\uff1a**\u53ea**\u901a\u8fc7**\u4e00\u6761**\u6807\u53f7\u4e3a $1$ \u7684\u7f51\u683c\u7ebf\u8d70\u4e00\u6b65\uff0c**\u53ea**\u901a\u8fc7\u6807\u53f7\u4e3a $2$ \u7684\u7f51\u683c\u5f80**\u540c\u4e00\u4e2a\u65b9\u5411**\u4e00\u76f4\u8d70\uff0c**\u53ea**\u901a\u8fc7\u6807\u53f7\u4e3a $3$ \u7684\u7f51\u683c\u8d70\u3002\n- \u6bcf\u4e2a\u68cb\u5b50\u5728\u901a\u5f80\u5176\u5b83\u683c\u70b9\u65f6\u53ef\u80fd\u4f1a\u9047\u5230\u68cb\u5b50\u963b\u788d\uff0c\u8fd9\u65f6\u4e00\u5b9a\u4e0d\u80fd**\u7a7f\u8fc7**\u8be5\u68cb\u5b50\uff0c\u4f46\u662f\u5982\u679c\u8be5\u68cb\u5b50\u4e0e\u672c\u68cb\u5b50\u989c\u8272\u4e0d\u540c\u4e14\u7b49\u7ea7\u4e0d\u9ad8\u4e8e\u8d70\u5b50\u7684\u7b49\u7ea7\uff0c\u5219\u53ef\u4ee5\u5230\u8fbe\u8be5\u68cb\u5b50\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u4e0d\u53ef\u4ee5\u3002\n- \u7ed9\u51fa\u68cb\u76d8\u4ee5\u53ca\u6240\u6709\u7f51\u683c\u7ebf\u7684\u6807\u53f7\uff0c\u5728\u68cb\u76d8\u4e0a\u6309\u987a\u5e8f\u653e $q$ \u4e2a\u68cb\u5b50\uff0c\u4f60\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u68cb\u5b50\u8f93\u51fa**\u5f53\u524d**\u5b83\u80fd\u591f\u8d70\u5230\u7684\u683c\u70b9\u6570\u91cf\uff08\u4f46\u4e0d\u9700\u8981\u8d70\u5b50\uff09\u3002\n- \u591a\u6d4b\uff0c\u6570\u636e\u7ec4\u6570\u4e0d\u8d85\u8fc7 $5$\uff0c$1\\le q\\le n\\times m\\le 2\\times 10^5$\uff0c$q\\le 10^5$\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u68cb\u5b50\u7684\u7b49\u7ea7\u90fd\u662f $1$ \u5230 $q$ \u7684\u6574\u6570\uff0c\u4e14\u53ea\u6709\u767d\u5b50\u548c\u9ed1\u5b50\u3002\n\n**\u66b4\u529b**\n- \u522b\u770b\u5230\u8fd9\u9898\u5982\u6b64\u8981\u6c42\u590d\u6742\u8fde\u66b4\u529b\u90fd\u4e0d\u4f1a\u6253\u4e86\u3002\n- ~~\u4e0b\u6b21\u5c31\u5e94\u8be5\u591a\u505a\u5927\u6a21\u62df\u3002~~\n- \u8fd9\u91cc\u4e3b\u8981\u8981\u6ce8\u610f\u7684\u662f\u4e09\u79cd\u8d70\u6cd5\u662f\u53ef\u80fd\u7ecf\u8fc7\u91cd\u590d\u7684\u8282\u70b9\u7684\uff08\u6bd4\u5982\u8d70\u6cd5 $1$ \u548c\u8d70\u6cd5 $3$ \u91cd\u5408\u4e86\uff09\uff0c\u8fd9\u91cc\u4e0d\u80fd\u8349\u7387\u5730\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6709\u6ca1\u6709\u8dd1\u8fc7\u3002\n- [\u66b4\u529b\u4ee3\u7801](https://www.luogu.com.cn/paste/a9szfy92)\uff0c\u5f97\u5206 $32$\u3002\n- \u6253\u5b8c\u5b83\u540e\u7b14\u8005\u8868\u793a\u6000\u7591\u4eba\u751f\u3002\n- \u63a5\u4e0b\u6765\u8fd8\u6709\u66f4\u6000\u7591\u4eba\u751f\u7684\uff1a\u770b\u7740 $\\text{1.00GB}$ \u7684\u7a7a\u95f4\u6211\u4eec\u5927\u80c6\u731c\u6d4b\u5b83\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u9898\u2026\u2026\n- \u6240\u4ee5\u6211\u4eec\u8d76\u5feb\u6765\u6c34\u5206\u5427\uff01\u6c34\u5b8c\u5206\u518d\u53bb\u5b66\u6570\u636e\u7ed3\u6784\u3002\n- [\u8fd9\u662f\u4f5c\u8005\u5f00\uff08\u6b63\u5728\u66f4\u65b0\u7684\uff09\u7684\u7ebf\u6bb5\u6811\u4e13\u9898](https://www.luogu.com.cn/blog/luo1gu1zui1bang1/xian-duan-shu)\u3002\n- \u4e0b\u9762\u662f\u4f5c\u8005\u7684\u6c34\u5206\u6311\u6218\u3002\uff08\u4f5c\u8005\u5c06\u4f1a\u7ed9\u51fa\u4e0b\u9762\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u95f4\u5f00\u59cb\u5230\u7ed3\u675f\uff09\n\n**\u66b4\u529b**\n- \u4f5c\u8005\u89c9\u5f97\u81ea\u5df1\u66b4\u529b\u6253\u5f97\u592a\u70c2\u4e86\u4e8e\u662f\u51b3\u5b9a\u91cd\u65b0\u6253\u4e00\u904d\u66b4\u529b\uff01\n- \u4f5c\u8005\u5c06\u4e00\u4e9b\u5b9e\u73b0\u7684\u7ec6\u8282\u8bb0\u5f55\uff1a\u6211\u9760\u4f5c\u8005\u7684\u4f4d\u79fb\u60ef\u6027\u6253\u6210\u77ed\u6574\u578b\uff0c\u6211\u9760\u4f5c\u8005\u5fd8\u8bb0\u5224\u65ad\u662f\u5426\u8d8a\u754c\u5c31\u8bfb\u53d6\u6570\u636e\uff01\n- \u867d\u7136\u6253\u4e86 $2$ \u5c0f\u65f6\u4f46\u4ee3\u7801\u53ea\u6709 $1.6\\text{KB}$ \u8fd8\u662f\u53ef\u4ee5\u7684\u3002\n- [\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/5beweyjc)\u3002\n- \u65f6\u95f4\u590d\u6742\u5ea6 $O(nmq)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(nm+q)$\uff0c\u7531\u4e8e\u67d0\u7ec4\u7ec7\u7684\u6570\u636e\u592a\u6c34\u8fd9\u4e2a\u53ef\u4ee5\u62ff $44$ \u5206\uff0c\u5373\u901a\u8fc7\u7f16\u53f7\u4e3a $1$ \u81f3 $11$ \u7684\u6d4b\u8bd5\u70b9\u3002\n\n\n**\u4e0d\u5b58\u5728\u4e92\u901a\u9053\u8def**\n- \u8fd9\u91cc\u91cd\u70b9\u8ba8\u8bba\u76f4\u884c\u9053\u8def\u7684\u60c5\u51b5\u3002\n- \u4f7f\u7528\u5e76\u67e5\u96c6\u5373\u53ef\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u4e0a\u4e0b\u5de6\u53f3\u6240\u5230\u8fbe\u7684\u6700\u8fdc\u7684\u68cb\u5b50\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u8ba1\u7b97\uff08\u4e0d\u6127\u662f\u5e76\u67e5\u96c6\uff09\u3002\n- \u7531\u4e8e\u67d0\u7ec4\u7ec7\u7684\u6570\u636e\u592a\u6c34\u5bfc\u81f4\u66b4\u529b\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u6c34\u5230\u8be5\u90e8\u5206\u5206\u6240\u4ee5\u8fd9\u91cc\u4e0d\u7ed9\u51fa\u4ee3\u7801\u3002\n\n**\u4e0d\u5b58\u5728\u76f4\u884c\u9053\u8def**\n- \u4e5f\u5c31\u662f\u53ea\u9700\u8981\u7ef4\u62a4\u4e92\u901a\u9053\u8def\u7684\u60c5\u51b5\u5916\u52a0\u56db\u4e2a\u70b9\u7684\u7279\u5224\u3002\n- \u8003\u8651\u79bb\u7ebf\u4ece\u540e\u5f80\u524d\u8dd1\u3002\uff08\u8fd9\u662f\u4e00\u4e2a\u76f4\u89c9\uff1a\u8fde\u8fb9\u6bd4\u5220\u8fb9\u597d\u7ef4\u62a4\uff09\n- \u4f7f\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u7528\u4e24\u68f5\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u5206\u522b\u7ef4\u62a4\u68cb\u5b50\u9ed1\u8272\u548c\u767d\u8272\u7684\u68cb\u5b50\u6709\u54ea\u4e9b\uff0c\u66b4\u529b\u5220\u70b9\uff0c\u66b4\u529b\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u3002\n- \u6c34\u5206\u4ee3\u7801\u6253\u7ebf\u6bb5\u6811\u5408\u5e76\u2026\u2026\u771f\u662f\u975e\u4eba\u54c9\u3002\n- \u65f6\u95f4\u590d\u6742\u5ea6 $O(\\max(n,m)\\alpha(nm)q+nm\\lg(nm))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(nm\\lg(nm)+q)$\u3002\n- \u6ce8\u610f\u5b9e\u73b0\u6709\u4e2a\u5c0f\u7ec6\u8282\uff0c\u68cb\u5b50\u53ef\u80fd\u4f1a\u88ab\u4e0d\u540c\u7684\u8fde\u901a\u5757\u76ef\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5408\u5e76\u4fe1\u606f\u7684\u65f6\u5019\u8981\u5bf9\u68cb\u5b50\u8fdb\u884c\u53bb\u91cd\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u79bb\u6563\u5316\u91cd\u65b0\u6807\u8bb0\u6bcf\u4e2a\u68cb\u5b50\u7684\u7ea7\u522b\u4f7f\u5f97\u68cb\u5b50\u7ea7\u522b\u4e24\u4e24\u4e0d\u540c\u4fbf\u4e8e\u64cd\u4f5c\u3002\n- \u4f5c\u8005\u6253\u4e86\u5f88\u4e45\uff0c\u4f46\u662f\u81ea\u6d4b\u6709\u70b9\u50cf\u66b4\u529b\uff1f~~\u539f\u6765\u662f\u4f5c\u8005\u4e0e\u6216\u4e0d\u6e05\u5199\u5047\u4e86\u3002~~\n- [\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/xofzw4ew)\uff0c\u80fd\u591f\u5f97\u5230 $56$ \u5206\u7684~~\u597d~~\u6210\u7ee9\u3002\n- \u6253\u4e86 $6$ \u5c0f\u65f6\uff08\u5176\u5b9e\u4e2d\u9014\u7a7a\u7f3a\u4e86\uff09\uff0c\u4ee3\u7801 $3.7\\text{KB}$\uff08\u6b7b\u4eba\u5566\uff09\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u90e8\u5206\u7684\u4ee3\u7801\u5176\u5b9e\u5e76\u4e0d\u957f\u3002\n\n**\u4e00\u822c\u60c5\u51b5**\n- \u5fc5\u987b\u5904\u7406\u6389\u90a3\u4e2a\u201c\u76f4\u884c\u9053\u8def\u201d\u3002\n- ~~\u5176\u5b9e\u5230\u73b0\u5728\u6211\u4eec\u90fd\u6ca1\u6709\u8003\u5bdf\u5230\u5e95\u6709\u4ec0\u4e48\u6027\u8d28\u3002~~\n- \u5728\u5e76\u67e5\u96c6\u7ef4\u62a4\u6700\u8fdc\u70b9\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u4e3b\u8981\u5c31\u662f\u5e0c\u671b\u77e5\u9053\u80fd\u8d70\u5230\u7684\u8def\u5f84\u4e2d\u6709\u591a\u5c11\u5df2\u7ecf\u5728 $3$ \u8def\u5f84\u4e4b\u5185\u3002\n- \u7b80\u5355\u6765\u8bb2\u5c31\u662f\u67e5\u8be2\u67d0\u4e2a\u8fde\u901a\u5757\u5185\u6a2a/\u7eb5\u5750\u6807\u4e3a $x$ \u7684\u70b9\u5728\u533a\u95f4 $[l,r]$ \u6709\u591a\u5c11\u4e2a\u3002\n- \u6811\u5957\u6811\u662f\u4e00\u4e2a\u76f4\u89c2\u7684\u60f3\u6cd5~~\u6811\u5957\u6811\u5408\u5e76\u5417~~\uff0c~~\u867d\u7136\u5982\u679c\u6b63\u786e\u5b9e\u73b0\u65f6\u7a7a\u590d\u6742\u5ea6\u4e5f\u662f\u5bf9\u7684~~\u4f46\u663e\u7136\u8fc7\u4e8e\u590d\u6742\u3002\n- \u5b8c\u5168\u6ca1\u6709\u7528\u5230\u8fde\u901a\u5757\u662f\u6a2a\u7eb5\u5750\u6807\u8fde\u7eed\u7684\u6027\u8d28\u5462\uff0c\u6211\u4eec\u5bf9\u5750\u6807 $(x,y)$ \u5206\u522b\u6807\u53f7\u4e3a $mx+y$ \u548c $ny+x$\uff0c\u7136\u540e\u67e5\u8be2\u76f8\u5f53\u4e8e\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u7684\u70b9\u6709\u591a\u5c11\u4e2a\uff0c\u7528\u6700\u6734\u7d20\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u3002\n- $4$ \u7c7b\u7ebf\u6bb5\u6811\uff0c$3$ \u7c7b\u5e76\u67e5\u96c6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nm\\lg(nm)+q\\lg q)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(nm\\lg(nm)+q)$ ~~\u5b9e\u5728\u662f\u592a\u597d\u6253\u4e86\u5462~~\u3002\n- [\u4ee3\u7801\u5b9e\u73b0](https://www.luogu.com.cn/paste/gtojy7s8)\u3002\n- \u6253\u4e86\u4e24\u5929\uff08\u4e2d\u9014\u6709\u7a7a\u7f3a\uff09\uff0c\u4ee3\u7801\u957f\u5ea6 $4.3\\text{KB}$\uff08\u6211\u9760\u600e\u4e48\u8fd9\u4e48\u957f\uff09\u3002\n- \u505a\u4e00\u4e9b\u7ec6\u8282\u4e0a\u7684\u63d0\u793a\uff1a\u5224\u65ad\u6807\u53f7\u4e3a $1$ \u7684\u7f51\u683c\u7ebf\u9700\u8981\u7684\u5224\u65ad\u8bed\u53e5\u8f83\u957f\uff0c\u63a8\u8350\u4f7f\u7528\u5b8f\u5b9a\u4e49\u3002\n- \u6ce8\u610f\u56db\u7c7b\u7ebf\u6bb5\u6811\u5168\u90fd\u662f\u7528\u6765\u7ef4\u62a4 $3$ \u53f7\u7f51\u683c\u7ebf\u7684\uff0c\u800c\u4e0a\u4e0b\u7684\u6700\u503c\u4fe1\u606f\u624d\u662f $2$ \u53f7\u7f51\u683c\u7ebf\u7ef4\u62a4\u7684\u3002\n- \u611f\u89c9\u7ebf\u6bb5\u6811\u5408\u5e76\u5e76\u4e0d\u662f\u6700\u56f0\u96be\u7684\uff0c\u7ef4\u62a4\u624d\u662f\u6700\u56f0\u96be\u7684\uff0c\u8003\u573a\u4e0a\u5f88\u5bb9\u6613\u5199\u6302\u3002\n- \u8fd8\u6709\u611f\u89c9\u9898\u76ee\u7684\u6837\u4f8b\u771f\u7684\u4e0d\u9519\uff0c\u8fc7\u4e86\u6837\u4f8b\u57fa\u672c\u4e0a\u7a0b\u5e8f\u5c31\u6ca1\u9519\u4e86\u3002",
        "postTime": 1638109337,
        "uid": 260884,
        "name": "WeLikeStudying",
        "ccfLevel": 0,
        "title": "[NOIP2021] \u68cb\u5c40"
    },
    {
        "content": "\u7531\u4e8e\u5b58\u5728\u76f8\u5bf9\u989c\u8272\u5927\u5c0f\u5173\u7cfb\uff0c\u6211\u4eec\u8003\u8651\u7ebf\u6bb5\u6811\u5408\u5e76\u6765\u7ef4\u62a4\u8fd9\u4e2a\u7ed3\u6784\u3002\n\n\u4e3a\u4e86\u540e\u7eed\u7684\u8ba8\u8bba\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06`lv`\u8fdb\u884c\u79bb\u6563\u5316\u3002\n\n\u8fd9\u91cc\u7684\u79bb\u6563\u5316\u662f\u5728\u5bf9\u7edf\u8ba1\u4e0d\u4ea7\u751f\u5f71\u54cd\u65f6\uff0c\u5c06\u6240\u6709\u7684\u503c\u90fd\u53d8\u5f97\u4e0d\u540c\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u6211\u4eec\u7ef4\u62a4\u56db\u9897\u7ebf\u6bb5\u6811\u5206\u522b\u8868\u793a\u8868\u793a\uff1a\n\n- \u4e0e\u8fd9\u4e2a\u8fde\u901a\u5757\u76f8\u90bb\u7684\u9ed1\u8272\u70b9\u7684\u6743\u503c\u3002\n- \u4e0e\u8fd9\u4e2a\u8fde\u901a\u5757\u76f8\u90bb\u7684\u767d\u8272\u70b9\u7684\u6743\u503c\u3002\n- \u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u6240\u6709\u7a7a\u683c\u70b9\u6309\u7167\u5217\u8fde\u7eed\u7f16\u53f7\u7684\u5bf9\u5e94\u5e8f\u53f7\u3002\n- \u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u6240\u6709\u7a7a\u683c\u70b9\u6309\u7167\u5217\u884c\u8fde\u7eed\u7684\u5bf9\u5e94\u5e8f\u53f7\u3002\n\n\u540c\u65f6\u7ef4\u62a4\u4e24\u4e2a\u662f\u4e3a\u4e86\u4e4b\u540e\u5904\u7406\u76f4\u884c\u9053\u8def\u65f6\u597d\u5904\u7406\u3002\n\n\u521d\u59cb\u5316\u65f6\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u70b9\u7684\u76f8\u90bb\u7684\u6709`\u4e92\u901a\u9053\u8def`\u4e14\u6ca1\u6709\u70b9\u7684\u76f4\u63a5`merge`\u8d77\u6765\uff0c\u5bf9\u4e8e\u65c1\u8fb9\u6709\u90bb\u5c45\u7684\u70b9\uff0c\u6211\u4eec\u5c31\u5728\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a\u7684\u8be5\u70b9\u5bf9\u5e94\u7684\u503c\u8bbe\u4e3a`1`\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u76f4\u884c\u9053\u8def\uff0c\u6211\u4eec\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u50cf\u4e0a\u4e0b\u5de6\u53f3\u6700\u8fdc\u80fd\u8d70\u5230\u54ea\u91cc\uff0c\u4ee5\u53ca\u662f\u5426\u662f\u56e0\u4e3a\u4e00\u4e2a\u653e\u4e0a\u68cb\u5b50\u7684\u70b9\u800c\u505c\u6b62\uff0c\u82e5\u662f\u4ee5\u4e00\u4e2a\u653e\u4e0a\u68cb\u5b50\u7684\u70b9\u800c\u505c\u6b62\uff0c\u90a3\u4e48\u989d\u5916\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u7684\u4f4d\u7f6e\u3002\n\n**\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u5904\u7406\u70b9\u662f\u4ece\u524d\u5411\u540e\u4e0d\u65ad\u52a0\u5165\u7684\u3002**\n\n\u56de\u7b54\u95ee\u9898\u90e8\u5206\uff0c\u6211\u4eec\u5148\u5220\u53bb\u8fd9\u4e2a\u70b9\u7684\u8d21\u732e\uff1a\n\n1. \u5bf9\u56db\u5468\u7531`\u4e92\u901a\u9053\u8def`\u8fde\u8d77\u6765\u7684\u8fde\u901a\u5757\u7684\u8be5\u70b9\u5bf9\u5e94`lv`\u7684\u8d21\u732e\u7f6e\u4e3a`0`\u3002\n2. \u5bf9\u8be5\u70b9\u6240\u5728\u8fde\u901a\u5757\u8be5\u4f4d\u7f6e\u7684\u503c\u8bbe\u4e3a`1`\u3002\n3. \u5bf9\u65c1\u8fb9\u6ca1\u6709\u653e\u68cb\u5b50\u7684\u70b9`merge`\u8d77\u6765\u3002\n\n\u7136\u540e\u518d\u56de\u7b54\u8be2\u95ee\uff0c\u7b54\u6848\u5206\u4e3a\u4e2a\u90e8\u5206\uff1a\n\n\u8bbe\u5f53\u524d\u8be2\u95ee\u70b9\u4e3a $u$ \u3002\n\n1. `+`\u6240\u6709\u5728 $u$ \u8054\u901a\u5757\u7684`\u7a7a\u683c`\u7684\u4e2a\u6570\u3002\n2. `+`\u6240\u6709\u4e0e $u$ \u8054\u901a\u5757\u76f8\u90bb\u7684`\u53ef\u4ee5\u88ab\u5403\u6389\u7684\u68cb\u5b50`\u7684\u4e2a\u6570\u3002\n3. `+`\u884c\u548c\u5217\u7684`\u7a7a\u683c`\u8d21\u732e\u7684\u4e2a\u6570\u3002\n4. `-`\u884c\u548c\u5217\u7684`\u7a7a\u683c`\u4e2d\u5728\u4e92\u901a\u9053\u8def\u4e2d\u8bb0\u5f55\u7684\u4e2a\u6570\u3002\n5. `+`\u8fd9\u4e0a\u9762\uff0c\u6211\u4eec\u5728`1`\u4e2d\u5bf9 $u$ \u7b97\u4e86\u4e00\u6b21\uff0c\u5728`3,4`\u4e2d\u5206\u522b\u51cf\u4e86 $u$ \u4e00\u6b21\uff0c\u6240\u4ee5\u7b54\u6848\u8fd8\u8981`+1`\u3002\n6. `+`\u5bf9\u4e8e\u666e\u901a\u9053\u8def\uff0c\u6211\u4eec\u5224\u65ad\u4ed6\u662f\u5426\u662f\u68cb\u5b50\n   - \u82e5\u662f\u68cb\u5b50\uff0c\u5224\u65ad\u5b83\u662f\u5426\u548c $u$ \u6240\u5728\u8fde\u901a\u5757\u4e2d `\u4e92\u901a\u9053\u8def` \u7684\u7a7a\u683c\u76f8\u90bb\u3002\n   - \u82e5\u662f\u7a7a\u683c\uff0c\u5224\u65ad\u5b83\u662f\u5426\u5728 $u$ \u6240\u5728\u8fde\u901a\u5757\u4e2d `\u4e92\u901a\u9053\u8def` \u4e2d\u7edf\u8ba1\u8fc7\u3002\n7. `+`\u5bf9\u4e8e\u56e0\u4e3a\u662f\u4e00\u4e2a\u68cb\u5b50\u6446\u5728\u76f4\u884c\u9053\u8def\u7684\u6700\u540e\u800c\u7ed3\u675f\u7684\u76f4\u884c\u9053\u8def\uff0c\u6211\u4eec\u8981\u5224\u65ad\u5224\u65ad\u5b83\u662f\u5426\u548c $u$ \u6240\u5728\u8fde\u901a\u5757\u4e2d `\u4e92\u901a\u9053\u8def` \u7684\u7a7a\u683c\u76f8\u90bb\u3002\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\n\n\u7ec6\u5fc3\u4e00\u70b9\uff0c\u4e00\u70b9\u4e00\u70b9\u8ba8\u8bba\uff0c\u5199\u51fa\u8fd9\u9053\u9898\u7684\u6b63\u89e3\u7684\u601d\u8def\u8fd8\u662f\u5f88\u6e05\u6670\u7684\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n)$ \u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define FOR(i,a,b) for(int i=a;i<=b;++i)\n#define pb push_back\n#define sz(x) (int)(x.size())\n#define ll long long\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nusing namespace std;\nchar buf[100000],*p1=buf,*p2=buf;\ninline int gi()\n{\n\tint x=0,f=1;char ch=gc;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=gc;}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=gc;}\n\treturn (f==1)?x:-x;\n}\nconst int maxn=2e5+5;\nconst int dr[4]={1,-1,0,0};\nconst int dc[4]={0,0,1,-1};\nchar tmp[maxn];\nint n,m,q;\nvector<vector<int>>s,t;\nint col[maxn],lv[maxn],x[maxn],y[maxn];\nint id[maxn],fa[maxn],ans[maxn];\n//vector<int>nodes_row[maxn],nodes_column[maxn];///\u7a7a\u683c\nvector<pair<int,int>>neighbors[maxn];\nvector<int>nvis;\nvector<int>lef[maxn],rig[maxn],up[maxn],down[maxn];\n///up and down \u662f\u5bf9\u5e94\u7ebf\u6bb5\u6811\u7684column\n///lef and rig \u5bf9\u5e94\u7684\u662f\u7ebf\u6bb5\u6811\u7684row\n///\u6ce8\u610f\u5148merge\u5728\u67e5\u8be2\uff0c\u67e5\u8be2\u65f6\u6ce8\u610f\u8fd9\u4e2a\u70b9\u8981\u526a\u63891 \nset<int>nowr[maxn],nowc[maxn];\npair<int,int>qcol[maxn],qrow[maxn];\nvector<int>special[maxn]; \nvector<vector<int>>vis,ncol;\n///vis,nvis->leval\nstruct segmentree///\u7ebf\u6bb5\u6811\u5408\u5e76 \n{\n\tstatic const int maxm=8e6+5;\n\tint rt[maxn],tot;\n\tint ls[maxm],rs[maxm],sum[maxm];\n\tinline void clear()\n\t{\n\t\tmemset(rt,0,sizeof(rt));\n\t\tmemset(ls,0,sizeof(int)*(tot+1));\n\t\tmemset(rs,0,sizeof(int)*(tot+1));\n\t\tmemset(sum,0,sizeof(int)*(tot+1));\n\t\ttot=0;\n\t}\n\tinline void pushup(int u)\n\t{\n\t\tsum[u]=sum[ls[u]]+sum[rs[u]];\n\t}\n\tinline void update(int &u,int l,int r,int x,int v)\n\t{\n\t\tif(!u)u=++tot;\n\t\tif(l==r)return sum[u]=v,void();\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid)update(ls[u],l,mid,x,v);\n\t\telse update(rs[u],mid+1,r,x,v);\n\t\tpushup(u);\n\t}\n\tinline int query(int u,int l,int r,int x,int y)\n\t{\n\t\tif(!u)return 0;\n\t\tif(x<=l&&y>=r)return sum[u];\n\t\tint mid=(l+r)>>1,ret=0;\n\t\tif(x<=mid)ret=query(ls[u],l,mid,x,y);\n\t\tif(y>mid)ret+=query(rs[u],mid+1,r,x,y);\n\t\treturn ret;\n\t}\n\tinline int merge(int u,int v,int l,int r)\n\t{\n\t\tif(!u||!v)return u+v;\n\t\tif(l==r)return sum[u]=sum[u]|sum[v],u;\n\t\tint mid=(l+r)>>1;\n\t\tls[u]=merge(ls[u],ls[v],l,mid);\n\t\trs[u]=merge(rs[u],rs[v],mid+1,r);\n\t\tpushup(u);\n\t\treturn u;\n\t}\n\t///\u76f4\u63a5\u5408\u5e76\uff0c\u5982\u679c\u6709\u70b9=1 \n}tree[2],row,column;\n///\u5206\u522b\u6309\u884c\u5217\u53bb\u7edf\u8ba1\u8be5\u8fde\u901a\u5757\u7684\u70b9\u5728\u76f4\u884c\u9053\u8def\u7684\u60c5\u51b5 \ninline int index_row(int x,int y){return (x-1)*m+y;}\ninline int index_column(int x,int y){return (y-1)*n+x;}\ninline int get(int x)\n{\n\tif(x==fa[x])return x;\n\treturn fa[x]=get(fa[x]);\n}\ninline void init()\n{\n\tmemset(tmp,0,sizeof(tmp));\n\tmemset(col,0,sizeof(col));\n\tmemset(lv,0,sizeof(lv));\n\tmemset(x,0,sizeof(x));\n\tmemset(y,0,sizeof(y));\n\tmemset(id,0,sizeof(id));\n\tmemset(fa,0,sizeof(fa));\n//\tmemset(cnt,0,sizeof(cnt));\n\tmemset(ans,0,sizeof(ans));\n\tmemset(qrow,0,sizeof(qrow));\n\tmemset(qcol,0,sizeof(qcol));\n\ts.clear(),t.clear();\n//\tFOR(i,1,n*m)nodes_row[i].clear();\n//\tFOR(i,1,n*m)nodes_column[i].clear();\n\tFOR(i,1,n*m)neighbors[i].clear();\n\tFOR(i,1,n*m)special[i].clear();\n\tFOR(i,1,max(n,m))nowr[i].clear(),lef[i].clear(),rig[i].clear();\n\tFOR(i,1,max(n,m))nowc[i].clear(),up[i].clear(),down[i].clear();\n\ttree[0].clear(),tree[1].clear();\n\trow.clear(),column.clear(),nvis.clear();\n\tvis.clear(),ncol.clear();\n}\ninline void merge(int u,int v)\n{\n\tu=get(u),v=get(v);\n\tif(u==v)return ;\n\tfa[u]=v;\n\ttree[0].rt[v]=tree[0].merge(tree[0].rt[u],tree[0].rt[v],1,n*m);\n\ttree[1].rt[v]=tree[1].merge(tree[1].rt[u],tree[1].rt[v],1,n*m);\n\trow.rt[v]=row.merge(row.rt[u],row.rt[v],1,n*m);\n\tcolumn.rt[v]=column.merge(column.rt[u],column.rt[v],1,n*m);\n}\ninline void read(char *s)\n{\n\tchar ch=gc;\n\twhile(ch<'0'||ch>'3')ch=gc;\n\twhile(ch>='0'&&ch<='3')*s++=ch,ch=gc;\n\t*s='\\0';\n} \ninline void input()\n{\n\tn=gi(),m=gi(),q=gi();\n\tnvis.resize(n*m+1);\n\ts.resize(n+2);\n\tFOR(i,0,n)s[i].resize(m+2);\n\tt.resize(n+2);\n\tFOR(i,0,n)t[i].resize(m+2);\n\tvector<pair<int,int>>ord;\n\tFOR(i,1,n)\n\t{\n\t\tread(tmp+1);\n//\t\tscanf(\"%s\",tmp+1);\n\t\tFOR(j,1,m-1)s[i][j]=tmp[j]-'0';\n\t}\n\tFOR(i,1,n-1)\n\t{\n\t\tread(tmp+1);\n//\t\tscanf(\"%s\",tmp+1);\n\t\tFOR(j,1,m)t[i][j]=tmp[j]-'0';\n\t}\n\tFOR(i,1,q)\n\t{\n\t\tcol[i]=gi(),lv[i]=gi(),x[i]=gi(),y[i]=gi();\n\t\tord.pb({lv[i],i});\n\t}\n\tsort(ord.begin(),ord.end());\n\tFOR(i,0,sz(ord)-1)\n\t{\n\t\tint id=i+1;\n\t\tlv[ord[i].second]=id;\n\t}\n\tvis.resize(n+1),ncol.resize(n+1);\n\tFOR(i,0,n)vis[i].resize(m+1),ncol[i].resize(m+1);\n\tFOR(i,1,q)vis[x[i]][y[i]]=lv[i],ncol[x[i]][y[i]]=col[i];\n\tFOR(i,1,n)FOR(j,1,m)\n\t{\n\t\tint u=index_row(i,j);\n\t\tFOR(k,0,3)\n\t\t{\n\t\t\tint tx=i+dr[k],ty=j+dc[k];\n\t\t\tif(tx<1||tx>n||ty<1||ty>m)continue;\n\t\t\tint typ=0;\n\t\t\tif(k==0)typ=t[i][j];\n\t\t\telse if(k==1)typ=t[i-1][j];\n\t\t\telse if(k==2)typ=s[i][j];\n\t\t\telse typ=s[i][j-1];\n\t\t\tneighbors[index_row(i,j)].pb({index_row(tx,ty),typ});\n\t\t\tint c=ncol[tx][ty];\n\t\t\tif(vis[tx][ty]&&typ==3)tree[c].update(tree[c].rt[u],1,n*m,vis[tx][ty],1);\n\t\t}\n\t\tcolumn.update(column.rt[u],1,n*m,index_column(i,j),1);\n\t\trow.update(row.rt[u],1,n*m,index_row(i,j),1);\n\t\tint c=ncol[i][j],v=vis[i][j];\n\t\tif(v)tree[c].update(tree[c].rt[u],1,n*m,v,1);\n\t\tif(v)nvis[u]=v;\n\t}\n\tFOR(i,1,n*m)fa[i]=i;\n//\tFOR(i,1,n)FOR(j,1,m)\n//\t{\n//\t\tint x=index_row(i,j);\n//\t\tprintf(\"ans[%d][%d][0]=%d,ans[%d][%d][1]=%d\\n\",i,j,tree[0].query(tree[0].rt[get(x)],1,n*m,1,n*m),\n//\t\ti,j,tree[1].query(tree[1].rt[get(x)],1,n*m,1,n*m));\n//\t}\n\tFOR(i,1,n*m)\n\t{\n\t\tfor(auto x:neighbors[i])\n\t\t{\n\t\t\tint v=x.first,typ=x.second;\n\t\t\tif(typ!=3)continue;\n\t\t\tif(!nvis[i]&&!nvis[v])merge(i,v);\n\t\t}\n\t}\n}\ninline void solve()\n{\n\tFOR(i,1,n)lef[i].resize(m+1),rig[i].resize(m+1),up[i].resize(m+1),down[i].resize(m+1);\n\tFOR(i,1,n)FOR(j,1,m)lef[i][j]=rig[i][j]=j,up[i][j]=down[i][j]=i;\n\tFOR(i,1,n)\n\t{\n\t\tFOR(j,2,m)if(s[i][j-1]==2)lef[i][j]=lef[i][j-1];\n\t\tfor(int j=m-1;j>=1;--j)if(s[i][j]==2)rig[i][j]=rig[i][j+1];\n\t}\n\tFOR(j,1,m)\n\t{\n\t\tFOR(i,2,n)if(t[i-1][j]==2)up[i][j]=up[i-1][j];\n\t\tfor(int i=n-1;i>=1;--i)if(t[i][j]==2)down[i][j]=down[i+1][j];\n\t}\n\t///\u7279\u5224\u666e\u901a\u9053\u8def\u4ee5\u53ca\u76f4\u884c\u9053\u8def\u7684\u5c3d\u5934\u7684\u989c\u8272 \n\tFOR(i,1,q)\n\t{\n\t\tint u=index_row(x[i],y[i]);\n\t\tqrow[i]={index_row(x[i],lef[x[i]][y[i]]),index_row(x[i],rig[x[i]][y[i]])};\n\t\tqcol[i]={index_column(up[x[i]][y[i]],y[i]),index_column(down[x[i]][y[i]],y[i])};\n\t\tauto it=nowr[x[i]].lower_bound(y[i]);\n\t\tif(it!=nowr[x[i]].end()&&(*it)<=rig[x[i]][y[i]])\n\t\t{\n\t\t\tqrow[i].second=index_row(x[i],(*it)-1);\n\t\t\tspecial[u].pb(index_row(x[i],*it));\n\t\t}\n\t\tif(it!=nowr[x[i]].begin()&&*(--it)>=lef[x[i]][y[i]])\n\t\t{\n\t\t\tqrow[i].first=index_row(x[i],(*it)+1);\n\t\t\tspecial[u].pb(index_row(x[i],*it));\n\t\t}\n\t\tit=nowc[y[i]].lower_bound(x[i]);\n\t\tif(it!=nowc[y[i]].end()&&(*it)<=down[x[i]][y[i]])\n\t\t{\n\t\t\tqcol[i].second=index_column((*it)-1,y[i]);\n\t\t\tspecial[u].pb(index_row(*it,y[i]));\n\t\t}\n\t\tif(it!=nowc[y[i]].begin()&&*(--it)>=up[x[i]][y[i]])\n\t\t{\n\t\t\tqcol[i].first=index_column((*it)+1,y[i]);\n\t\t\tspecial[u].pb(index_row(*it,y[i]));\n\t\t}\n\t\tnowr[x[i]].insert(y[i]);\n\t\tnowc[y[i]].insert(x[i]);\n\t}\n\tfor(int i=q;i>=1;--i)\n\t{\n\t\t///del it\n\t\tint u=index_row(x[i],y[i]);\n//\t\tcerr<<x[i]<<' '<<y[i]<<endl;\n\t\tfor(auto x:neighbors[u])\n\t\t{\n\t\t\tint v=x.first,typ=x.second;\n\t\t\tif(typ==3&&nvis[v])tree[col[i]].update(tree[col[i]].rt[get(v)],1,n*m,lv[i],0);\n\t\t\tif(typ!=3||nvis[v])continue;\n\t\t\tmerge(u,v);\n\t\t}\n\t\tnvis[u]=0;\n//\t\tfor(auto x:neighbors[u])\n//\t\t{\n//\t\t\tint v=x.first,typ=x.second;\n//\t\t\tif(typ!=3||!nvis[v])continue;\n//\t\t\ttree[nvis[v]].update(tree[nvis[v]].rt[get(u)],1,n*m,nvis[v],1);\n//\t\t}\n\t\tu=get(u);\n\t\ttree[col[i]].update(tree[col[i]].rt[u],1,n*m,lv[i],0);\n\t\tans[i]=tree[col[i]^1].query(tree[col[i]^1].rt[u],1,n*m,1,lv[i]);\n\t\tans[i]+=column.sum[column.rt[u]];\n\t\t///\u6ce8\u610f\u8fd9\u91cccolumn\u548crow\u7684\u60c5\u51b5\u6ca1\u5904\u7406\u5b8c \n\t\tans[i]+=qcol[i].second-qcol[i].first;\n\t\tans[i]+=qrow[i].second-qrow[i].first;\n\t\tans[i]-=column.query(column.rt[u],1,n*m,qcol[i].first,qcol[i].second);\n\t\tans[i]-=row.query(row.rt[u],1,n*m,qrow[i].first,qrow[i].second);\n\t\tans[i]++;\n\t\tint v=index_row(x[i],y[i]); \n\t\tfor(int x:special[v])\n\t\t{\n\t\t\tint r=(x-1)/m+1,c=(x-1)%m+1;\n\t\t\tif(vis[r][c]<=lv[i]&&ncol[r][c]!=col[i])\n\t\t\t{\n\t\t\t\tans[i]++;\n\t\t\t\tif(tree[col[i]^1].query(tree[col[i]^1].rt[u],1,n*m,nvis[x],nvis[x]))ans[i]--;\n\t\t\t}\n\t\t}\n\t\tfor(auto x:neighbors[v])\n\t\t{\n\t\t\tint v=x.first,typ=x.second;\n\t\t\tif(typ!=1)continue;\n\t\t\tif(nvis[v])\n\t\t\t{\n\t\t\t\tint r=(v-1)/m+1,c=(v-1)%m+1;\n\t\t\t\tif(vis[r][c]<=lv[i]&&ncol[r][c]!=col[i])\n\t\t\t\t{\n\t\t\t\t\tans[i]++;\n\t\t\t\t\tif(tree[ncol[r][c]].query(tree[ncol[r][c]].rt[u],1,n*m,nvis[v],nvis[v]))ans[i]--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tans[i]++;\n\t\t\t\tif(row.query(row.rt[u],1,n*m,v,v))ans[i]--;\n\t\t\t}\n\t\t}\n\t}\n\tFOR(i,1,q)printf(\"%d\\n\",ans[i]);\n} \nint main()\n{\n\tfreopen(\"chess.in\",\"r\",stdin);\n\tfreopen(\"chess.out\",\"w\",stdout);\n\tint T=gi();\n\twhile(T--)\n\t{\n\t\tinit();\n\t\tinput();\n\t\tsolve();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1638257238,
        "uid": 333789,
        "name": "lory1608",
        "ccfLevel": 9,
        "title": "[NOIP2021] \u68cb\u5c40 \u9898\u89e3"
    },
    {
        "content": "\u6628\u5929\u4fe1\u8a93\u65e6\u65e6\u5730\u548c MC \u8bf4\u4eca\u5929\u8981\u505a\u8fd9\u9898\uff0c\u7ed3\u679c\u5728\u5730\u94c1\u4e0a\u5c31\u4f1a\u4e86\u3002\n\n\u666e\u901a\u9053\u8def\u592a\u7b80\u5355\uff0c\u76f4\u884c\u9053\u8def\u5927\u6982\u5c31\u662f\u5f80\u56db\u4e2a\u65b9\u5411\u53bb\u627e\u7b2c\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5224\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u5c31\u884c\u4e86\u3002\u8fd9\u73a9\u610f\u53ef\u4ee5\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u8003\u8651\u4e92\u901a\u9053\u8def\u662f\u4e00\u4e2a\u7c7b\u4f3c\u96c6\u5408\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u63d2\u5165\u70b9\u7684\u8fc7\u7a0b\u662f\u4e00\u4e2a\u5206\u88c2\u7684\u8fc7\u7a0b\uff0c\u662f\u4e0d\u597d\u505a\u7684\uff0c\u6240\u4ee5\u8003\u8651\u79bb\u7ebf\u4e0b\u6765\u53cd\u7740\u505a\uff0c\u53d8\u6210\u4e00\u4e2a\u52a0\u70b9\u7684\u8fc7\u7a0b\uff0c\u5c31\u53d8\u6210\u4e86\u5408\u5e76\u3002\n\n\u7136\u540e\u5c31\u662f\u5403\u5b50\u7684\u9650\u5236\u4e86\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u96c6\u5408\u5f00\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5b58\u4e00\u4e2a\u96c6\u5408\u8fb9\u754c\u88ab\u54ea\u4e9b\u70b9\u5835\u7740\u3002\u56e0\u4e3a\u5f02\u8272\u6240\u4ee5\u4e24\u79cd\u989c\u8272\u5404\u5f00\u4e00\u4e2a\uff0c\u7136\u540e\u4ee5\u7b49\u7ea7\u4e3a\u4e0b\u6807\uff0c\u7136\u540e\u5c31\u662f\u67e5\u8be2\u4e00\u4e2a\u524d\u540e\u7f00\u7684\u548c\u4e86\u3002\u5408\u5e76\u7684\u65f6\u5019\u5c31\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u3002\n\n\u8003\u8651\u4e0d\u540c\u7684\u9053\u8def\u4e4b\u95f4\u4f1a\u6709\u91cd\u590d\u7684\uff0c\u666e\u901a\u9053\u8def\u76f4\u63a5\u679a\u4e3e\u56db\u4e2a\u70b9\u770b\u770b\u5728\u522b\u7684\u9053\u8def\u662f\u5426\u4f1a\u51fa\u73b0\u5373\u53ef\u3002\u5bf9\u4e8e\u76f4\u884c\u9053\u8def\u5728\u4e92\u901a\u9053\u8def\u91cc\u7684\u91cd\u590d\uff0c\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e00\u884c\u90fd\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u90a3\u4e48\u76f4\u884c\u9053\u8def\u7684\u751f\u6210\u533a\u95f4\u5c31\u662f\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u6bb5\uff0c\u5217\u540c\u7406\u3002\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u5c06 $(x,y)$ \u7f16\u53f7\u4e3a $(x-1)m+y$\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7f16\u53f7\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\uff0c\u90a3\u4e48\u884c\u7684\u4e00\u6bb5\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u4e86\u3002\u5217\u540c\u7406\u3002\n\n\u8fd9\u6837\u4e0b\u6765\u53ea\u9700\u8981\u7ef4\u62a4 5 \u4e2a\u5e76\u67e5\u96c6\u548c 4 \u4e2a\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u611f\u89c9\u8fd9\u4e2a\u505a\u6cd5\u5341\u5206\u66b4\u529b\uff0c\u4f46\u662f\u56e0\u4e3a\u5168\u662f\u7ebf\u6bb5\u6811\u6240\u4ee5\u975e\u5e38\u597d\u5199\uff0c\u53ea\u662f\u5355\u7eaf\u7684\u4ee3\u7801\u91cf\u6bd4\u8f83\u5927\u3002\n\n\u7136\u800c\u5b66\u6821\u7684\u952e\u76d8\u592a\u96be\u53d7\u4e86\uff0c\u6240\u4ee5\u56de\u5bb6\u518d\u5199\u5427\u3002\n\nupd \u4e00\u4e2a\u5f88\u53ef\u80fd\u51fa\u73b0\u7684\u9519\u8bef\u3002\n\n\u56e0\u4e3a\u4e24\u4e2a\u96c6\u5408\u53ef\u80fd\u4f1a\u5171\u4eab\u4e00\u4e2a\u8fb9\u754c\u4e0a\u88ab\u5403\u7684\u5b50\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u5408\u5e76**\u4e0d\u80fd\u7528\u52a0\u7684\u5f62\u5f0f\uff0c\u8981\u7528\u6216\u7684\u5f62\u5f0f**\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u7ebf\u6bb5\u6811\u662f\u4ee5\u7b49\u7ea7\u4e3a\u4e0b\u6807\u7684\uff0c\u6240\u4ee5\u8fd9\u8981\u6c42\u6211\u4eec\u5bf9\u7b49\u7ea7\u91cd\u65b0\u5206\u914d\uff0c\u4f7f\u5f97\u4e24\u4e24\u4e0d\u540c\u3002\u5177\u4f53\u5206\u914d\u65b9\u5f0f\u662f**\u4ee5\u9898\u76ee\u7b49\u7ea7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u4ee5\u65f6\u95f4\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57**\u3002\n\n\u653e\u4e00\u4e0b\u4ee3\u7801\u5427\uff0c\u611f\u89c9\u5f88\u4e11\u3002\n\n```cpp\n#include<cstdio>\n#include<cassert>\n#include<algorithm>\nusing namespace std;\nconst int N=2e5+5;\nconst int Z=4;\nconst int dx[]={-1,0,0,1},\n\t\t  dy[]={0,-1,1,0};\n//dir:\n//0:up 1:left 2:right 3:down\nint val[N][Z];\nint n,m,q;\nint col[N],lv[N],tim[N];\nbool flg[N];\nint xx[N],yy[N];\nint gx[N],gy[N];\nint id[N];\ninline int Read(){\n\tchar ch;\n\tint f=1;\n\twhile((ch=getchar())<'0'||ch>'9')\n\t\tif(ch=='-') f=-1;\n\tint x=ch^48;\n\twhile((ch=getchar())>='0'&&ch<='9')\n\t\tx=(x<<3)+(x<<1)+(ch^48);\n\treturn x*f;\n}\ninline void print(int x){\n\tif(x>=10) print(x/10);\n\tputchar(x%10+48);\n\treturn ;\n}\ninline void Print(int x,char ch='\\n'){\n\tif(x<0){\n\t\tputchar('-');\n\t\tprint(-x);\n\t}\n\telse print(x);\n\tputchar(ch);\n\treturn ;\n}\ninline int Get(int x,int y){\n\treturn (x-1)*m+y;\n}\ninline int GetR(int x,int y){\n\treturn (x-1)*m+y;\n}\ninline int GetC(int x,int y){\n\treturn x+(y-1)*n;\n}\nstruct DSU{\n\tint fa[N],siz[N];\n\tinline void Clear(){\n\t\tfor(int i=1;i<=n*m;i++){\n\t\t\tfa[i]=i;\n\t\t\tsiz[i]=1;\n\t\t}\n\t\treturn ;\n\t}\n\tinline int Find(int u){\n\t\treturn fa[u]==u?u:fa[u]=Find(fa[u]);\n\t}\n}stra[Z],fre;\nstruct SGT{\n\tint sum[N<<7],lc[N<<7],rc[N<<7],tot;\n\tint root[N];\n\tinline void Clear(){\n\t\tfor(int i=1;i<=n*m;i++)\n\t\t\troot[i]=0;\n\t\ttot=0;\n\t\treturn ;\n\t}\n\tinline int NewNode(){\n\t\t++tot;\n\t\tsum[tot]=0;\n\t\tlc[tot]=0;\n\t\trc[tot]=0;\n\t\treturn tot;\n\t}\n\tinline void Update(int u){\n\t\tsum[u]=sum[lc[u]]+sum[rc[u]];\n\t}\n\tinline void Change(int&u,int ll,int rr,int p,int value){\n\t\tif(!u) u=NewNode();\n\t\tif(ll==rr){\n\t\t\tsum[u]+=value;\n\t\t\treturn ;\n\t\t}\n\t\tint mid=ll+rr>>1;\n\t\tif(mid>=p) Change(lc[u],ll,mid,p,value);\n\t\telse Change(rc[u],mid+1,rr,p,value);\n\t\treturn Update(u);\n\t}\n\tinline int Query(int u,int ll,int rr,int ql,int qr){\n\t\tif(!u) return 0;\n\t\tif(ll>=ql&&rr<=qr) return sum[u];\n\t\tint mid=ll+rr>>1,ss=0;\n\t\tif(mid>=ql) ss+=Query(lc[u],ll,mid,ql,qr);\n\t\tif(mid<qr) ss+=Query(rc[u],mid+1,rr,ql,qr);\n\t\treturn ss;\n\t}\n\tinline int Merge(int u,int v,int ll,int rr){\n\t\tif(!u||!v) return u+v;\n\t\tint uu=NewNode();\n\t\tif(ll==rr) sum[uu]=sum[u]||sum[v];\n\t\telse{\n\t\t\tint mid=ll+rr>>1;\n\t\t\tlc[uu]=Merge(lc[u],lc[v],ll,mid);\n\t\t\trc[uu]=Merge(rc[u],rc[v],mid+1,rr);\n\t\t\tUpdate(uu);\n\t\t}\n\t\treturn uu;\n\t}\n}str[2],fr[2];\n//edge:\n//0:none 1:only one 2:straight 3:fre\ninline int Del(int ux,int uy){\n\t//printf(\"del ux=%d uy=%d\\n\",ux,uy);\n\tint u=Get(ux,uy);\n\tint ur=GetR(ux,uy),uc=GetC(ux,uy);\n\tfor(int i=0;i<Z;i++){\n\t\tint vx=ux+dx[i],vy=uy+dy[i];\n\t\tif(vx<1||vx>n||vy<1||vy>m) continue ;\n\t\tint v=Get(vx,vy);\n\t\tint vr=GetR(vx,vy),vc=GetC(vx,vy);\n\t\tif(val[u][i]<=1) continue ;\n\t\tif(val[u][i]==2){\n\t\t\tstra[i].fa[u]=v;\n\t\t\tif(lv[v]) continue ;\n\t\t\tstra[3-i].fa[v]=u;\n\t\t\tcontinue ;\n\t\t}\n\t\tif(lv[v]){\n\t\t\tif(str[0].Query(str[0].root[u],1,n*m,v,v)) continue ;\n\t\t\t//printf(\"u=%d v=%d lv=%d\\n\",u,v,lv[v]);\n\t\t\tfr[col[v]].Change(fr[col[v]].root[u],1,n*m,lv[v],1);\n\t\t\tstr[0].Change(str[0].root[u],1,n*m,vr,1);\n\t\t\tstr[1].Change(str[1].root[u],1,n*m,vc,1);\n\t\t\tcontinue ;\n\t\t}\n\t\tint fv=fre.Find(v);\n\t\tif(u==fv) continue ;\n\t\tfre.fa[fv]=u;\n\t\tfre.siz[u]+=fre.siz[fv];\n\t\tfr[col[u]].Change(fr[col[u]].root[fv],1,n*m,lv[u],-1);\n\t\tstr[0].Change(str[0].root[fv],1,n*m,ur,-1);\n\t\tstr[1].Change(str[1].root[fv],1,n*m,uc,-1);\n\t\tfr[0].root[u]=fr[0].Merge(fr[0].root[u],fr[0].root[fv],1,n*m);\n\t\tfr[1].root[u]=fr[1].Merge(fr[1].root[u],fr[1].root[fv],1,n*m);\n\t\tstr[0].root[u]=str[0].Merge(str[0].root[u],str[0].root[fv],1,n*m);\n\t\tstr[1].root[u]=str[1].Merge(str[1].root[u],str[1].root[fv],1,n*m);\n\t}\n\tstr[0].Change(str[0].root[u],1,n*m,ur,1);\n\tstr[1].Change(str[1].root[u],1,n*m,uc,1);\n\t/*for(int i=1;i<=n*m;i++){\n\t\tassert(str[0].Query(str[0].root[u],1,n*m,i,i)<=1);\n\t\tassert(str[1].Query(str[1].root[u],1,n*m,i,i)<=1);\n\t}*/\n\t//puts(\"del finish\");\n\tint ss=0;\n\tss+=fre.siz[u]-1;\n\tassert(fre.Find(u)==u);\n\t//printf(\"after free ans=%d\\n\",ss);\n\tss+=fr[col[u]^1].Query(fr[col[u]^1].root[u],1,n*m,1,lv[u]);\n\t//printf(\"after free eat ans=%d\\n\",ss);\n\tint vx,vy,v;\n\tv=stra[0].Find(u);\n\tvx=gx[v],vy=gy[v];\n\t//printf(\"up vx=%d vy=%d\\n\",vx,vy);\n\tif(v!=u){\n\t\tint vc=GetC(vx,vy);\n\t\tss+=uc-vc;\n\t\tif(vc+1<=uc-1) ss-=str[1].Query(str[1].root[u],1,n*m,vc+1,uc-1);\n\t\tif((lv[v]&&col[u]==col[v])||lv[v]>lv[u]) ss--;\n\t\telse ss-=str[1].Query(str[1].root[u],1,n*m,vc,vc);\n\t}\n\t//printf(\"after up ans=%d\\n\",ss);\n\tv=stra[1].Find(u);\n\tvx=gx[v],vy=gy[v];\n\t//printf(\"left vx=%d vy=%d\\n\",vx,vy);\n\tif(v!=u){\n\t\tint vr=GetR(vx,vy);\n\t\t//printf(\"vr=%d ur=%d\\n\",vr,ur);\n\t\tss+=ur-vr;\n\t\t//printf(\"now ans=%d\\n\",ss);\n\t\tif(vr+1<=ur-1) ss-=str[0].Query(str[0].root[u],1,n*m,vr+1,ur-1);\n\t\t//printf(\"after query ans=%d\\n\",ss);\n\t\tif((lv[v]&&col[u]==col[v])||lv[v]>lv[u]) ss--;\n\t\telse ss-=str[0].Query(str[0].root[u],1,n*m,vr,vr);\n\t}\n\t//printf(\"after left ans=%d\\n\",ss);\n\tv=stra[2].Find(u);\n\tvx=gx[v],vy=gy[v];\n\t//printf(\"right vx=%d vy=%d\\n\",vx,vy);\n\tif(v!=u){\n\t\tint vr=GetR(vx,vy);\n\t\tss+=vr-ur;\n\t\tif(ur+1<=vr-1) ss-=str[0].Query(str[0].root[u],1,n*m,ur+1,vr-1);\n\t\tif((lv[v]&&col[u]==col[v])||lv[v]>lv[u]) ss--;\n\t\telse ss-=str[0].Query(str[0].root[u],1,n*m,vr,vr);\n\t}\n\t//printf(\"after right ans=%d\\n\",ss);\n\tv=stra[3].Find(u);\n\tvx=gx[v],vy=gy[v];\n\t//printf(\"down vx=%d vy=%d\\n\",vx,vy);\n\tif(v!=u){\n\t\tint vc=GetC(vx,vy);\n\t\tss+=vc-uc;\n\t\tif(uc+1<=vc-1) ss-=str[1].Query(str[1].root[u],1,n*m,uc+1,vc-1);\n\t\tif((lv[v]&&col[u]==col[v])||lv[v]>lv[u]) ss--;\n\t\telse ss-=str[1].Query(str[1].root[u],1,n*m,vc,vc);\n\t}\n\t//printf(\"after down ans=%d\\n\",ss);\n\tfor(int i=0;i<Z;i++){\n\t\tvx=ux+dx[i],vy=uy+dy[i];\n\t\tif(vx<1||vx>n||vy<1||vy>m) continue ;\n\t\tif(val[u][i]!=1) continue ;\n\t\tv=Get(vx,vy);\n\t\tif((lv[v]&&col[v]==col[u])||lv[v]>lv[u]) continue ;\n\t\tif(!str[0].Query(str[0].root[u],1,n*m,v,v)) ss++;\n\t}\n\t//puts(\"get ans finish\");\n\t//printf(\"ans=%d\\n\",ss);\n\tlv[u]=0;\n\treturn ss;\n}\ninline bool Cmp(int x,int y){\n\treturn lv[x]<lv[y]||(lv[x]==lv[y]&&tim[x]<tim[y]);\n}\ninline void Init(){\n\tn=Read(),m=Read();\n\tq=Read();\n\tstr[0].Clear(),str[1].Clear();\n\tfr[0].Clear(),fr[1].Clear();\n\tstra[0].Clear(),stra[1].Clear(),stra[2].Clear(),stra[3].Clear();\n\tfre.Clear();\n\tfor(int x=1;x<=n;x++)\n\t\tfor(int y=1;y<=m;y++){\n\t\t\tint u=Get(x,y);\n\t\t\tgx[u]=x,gy[u]=y;\n\t\t\tlv[u]=1,flg[u]=0;\n\t\t\ttim[u]=0;\n\t\t\tid[u]=u;\n\t\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<m;j++){\n\t\t\tchar ch;\n\t\t\twhile((ch=getchar())<'0'||ch>'9');\n\t\t\tint u=Get(i,j);\n\t\t\tval[u][2]=val[u+1][1]=ch-'0';\n\t\t}\n\tfor(int i=1;i<n;i++)\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tchar ch;\n\t\t\twhile((ch=getchar())<'0'||ch>'9');\n\t\t\tint u=Get(i,j);\n\t\t\tval[u][3]=val[u+m][0]=ch-'0';\n\t\t}\n\tfor(int i=1;i<=q;i++){\n\t\tint co=Read(),lvv=Read();\n\t\txx[i]=Read();\n\t\tyy[i]=Read();\n\t\tint u=Get(xx[i],yy[i]);\n\t\ttim[u]=i;\n\t\tcol[u]=co,lv[u]=lvv;\n\t\tflg[u]=1;\n\t}\n\tsort(id+1,id+n*m+1,Cmp);\n\tfor(int i=1;i<=n*m;i++)\n\t\tlv[id[i]]=i;\n\tfor(int x=1;x<=n;x++)\n\t\tfor(int y=1;y<=m;y++)\n\t\t\tif(!flg[Get(x,y)]) Del(x,y);\n\t//puts(\"init finish\");\n\treturn ;\n}\nint qans[N];\ninline void Solve(){\n\tfor(int i=q;i;i--)\n\t\tqans[i]=Del(xx[i],yy[i]);\n\tfor(int i=1;i<=q;i++)\n\t\tPrint(qans[i]);\n\treturn ;\n}\nint T;\nint main(){\n\t//freopen(\"chess4.in\",\"r\",stdin);\n\t//freopen(\"chess.out\",\"w\",stdout);\n\tfor(T=Read();T;T--){\n\t\tInit();\n\t\tSolve();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1663716744,
        "uid": 115936,
        "name": "\u6cf7\u6cfd\u4e09\u6708",
        "ccfLevel": 0,
        "title": "P7963"
    },
    {
        "content": "# P7963 [NOIP2021] \u68cb\u5c40\n\n\u7ed9\u5b9a $n\\times m$ \u7684\u68cb\u76d8\uff0c\u8fde\u6709\u6a2a\u7eb5 $2$ \u79cd\u65e0\u5411\u8fb9\uff0c\u6709 $3$ \u79cd\u7c7b\u578b\u7684\u8fb9\uff1a\n\n1. \u53ea\u5141\u8bb8\u6309\u7167\u8fd9\u6761\u8fb9\u8d70 $1$ \u6b65\n2. \u5141\u8bb8\u7ee7\u7eed\u8d70\u8fb9\u6743\u4e3a $2$ \u7684\u8fb9\uff0c\u4f46\u4e0d\u5141\u8bb8\u6539\u53d8\u65b9\u5411\n3. \u5141\u8bb8\u7ee7\u7eed\u8d70\u8fb9\u6743\u4e3a $3$ \u7684\u8fb9\uff0c\u53ef\u4ee5\u6539\u53d8\u65b9\u5411\n\n\u8d70\u5230\u4e0d\u540c\u989c\u8272\u7b49\u7ea7 $\\leq$ \u81ea\u5df1\u7b49\u7ea7\u7684\u68cb\u5b50\u65f6\u53ef\u4ee5\u5403\u6389\u68cb\u5b50\u5e76\u505c\u4e0b\uff0c\u6c42\u5148\u540e\u653e\u4e0b $q$ \u4e2a\u68cb\u5b50\u65f6\u6bcf\u4e2a\u68cb\u5b50\u6700\u591a\u80fd\u8d70\u5230\u7684\u4f4d\u7f6e\u3002\n\n$n\\times m \\leq 2\\times 10^5,q\\leq 10^5$\n\n------\n\n\u611f\u8c22[\u8fd9\u7bc7\u535a\u5ba2](https://www.luogu.com.cn/blog/user45775/solution-p7963)\u8ba9\u6211 $2$ \u5929\u505a\u61c2\u4e86\u8fd9\u9053\u795e\u4ed9\u9898\u3002\uff08\u5199\u4e0b\u8fd9\u7bc7\u9898\u89e3\u4e5f\u7b97\u662f\u5bf9\u4e8e TA \u7684\u9898\u89e3\u8fdb\u884c\u8865\u5145\uff09\n\n\u9996\u5148\u80af\u5b9a\u4f1a\u60f3\u5230\u7ef4\u62a4\u68cb\u76d8\u4e0a\u683c\u5b50\u7684\u8fde\u901a\u6027\uff0c\u53ef\u4ee5\u5c06\u6240\u6709 $2$ \u53f7\u9053\u8def\u8fde\u6210\u7684\u8fde\u7eed\u4e00\u6761\uff08\u884c/\u5217\uff09\u7ef4\u62a4\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u5185\uff08\u6240\u4ee5\u9700\u8981 $2$ \u4e2a\u5e76\u67e5\u96c6\uff09\uff0c\u5c06\u6240\u6709 $3$ \u53f7\u9053\u8def\u8fde\u6210\u7684\u8fde\u901a\u5757\u7ef4\u62a4\u5728\u540c\u4e00\u5e76\u67e5\u96c6\u5185\u3002\u7136\u800c\u95ee\u9898\u662f\u653e\u4e0a\u68cb\u5b50\u7684\u8fc7\u7a0b\u5c31\u662f\u65ad\u5f00\u8fde\u901a\u6027\u7684\u8fc7\u7a0b\uff0c\u5b9e\u5728\u96be\u4ee5\u7ef4\u62a4\uff0c\u60f3\u5230\u7684\u5bf9\u7b56\u662f\u79bb\u7ebf\u6240\u6709\u8be2\u95ee\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u626b\u4e00\u904d\uff0c\u4e00\u8fb9\u5c06\u8fde\u901a\u6027\u8fd8\u539f\uff0c\u4e00\u8fb9\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u5403\u5b50\u5462\uff1f\u9996\u5148 $1,2$ \u53f7\u9053\u8def\u597d\u60f3\uff0c\u53ea\u7528\u5224\u65ad\u9053\u8def\u672b\u7aef\u662f\u5426\u6709\u68cb\u5b50\uff0c\u82e5\u6709\u5219\u5224\u65ad\u80fd\u5426\u5403\u6389\uff0c\u5982\u679c\u80fd\u5403\u6389\u5c31\u8ba1\u5165\u7b54\u6848\u3002 $3$ \u53f7\u9053\u8def\u9700\u8981\u7528\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u9053\u8def\u53ef\u62b5\u8fbe\u7684\u6240\u6709\u68cb\u5b50\u7b49\u7ea7\uff08\u5176\u5b9e\u662f $2$ \u4e2a\uff0c\u5206\u522b\u7ef4\u62a4 $2$ \u79cd\u989c\u8272\uff09\uff0c\u7136\u540e\u67e5\u8be2\u67d0\u4e00\u8fde\u901a\u5757\u5185\u6307\u5b9a\u989c\u8272\u7684\u6bd4\u67e5\u8be2\u68cb\u5b50\u7b49\u7ea7\u5c0f\u7684\u5143\u7d20\u4e2a\u6570\uff08\u4ee3\u7801\u4e2d\u7684 $query1$ \uff09\u3002\u56e0\u4e3a\u662f\u7ef4\u62a4\u6bcf\u4e2a\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u8fd8\u8981\u6d89\u53ca\u5230\u5408\u5e76\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u91cc\u9009\u62e9\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u5408\u5e76\u3002\n\n\u4f46\u662f\u4ec5\u4ec5\u8fd9\u6837\u7edf\u8ba1\u7b54\u6848\u662f\u4e0d\u884c\u7684\uff0c\u6bd4\u5982\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/wzvsjen8.png)\n\n\u90a3\u4e48 $1$ \u53f7\u70b9\u5c31\u4f1a\u88ab\u7b97 $2$ \u6b21\u3002\uff08\u65e2\u5728 $3$ \u53f7\u5e76\u67e5\u96c6\u5185\uff0c\u53c8\u5728 $2$ \u53f7\u6a2a\u5411\u5e76\u67e5\u96c6\u5185\uff09\n\n\u65e2\u7136\u6709\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u5c31\u5224\u91cd\u3002\u5229\u7528 $2$ \u53f7\u8fb9\u6784\u6210\u5e76\u67e5\u96c6\u5185\u5143\u7d20\u7684\u8fde\u7eed\u6027\uff0c\u53ef\u4ee5\u5728\u5e76\u67e5\u96c6\u4e2d\u989d\u5916\u52a0\u5165 $maxn,minn$ \u6765\u5f97\u5230\u8fd9\u4e00\u6bb5\u533a\u95f4\u7684\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u7136\u540e\u518d\u989d\u5916\u521b\u5efa $2$ \u4e2a\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u6a2a/\u7ad6\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2\u533a\u95f4\u548c\u6765\u5f97\u5230\u88ab\u7b97\u91cd\u7684\u5143\u7d20\u4e2a\u6570\uff08\u5b9e\u9645\u5b9e\u73b0\u65f6\u901a\u8fc7\u524d\u9762\u63d0\u5230\u7684\u67e5\u8be2\u524d\u7f00\u51fd\u6570 $query1(r)-query1(l-1)$ \u6765\u5b9e\u73b0\u533a\u95f4\u548c)\u3002\n\n\u7136\u540e\u662f\u5403\u5b50\u7684\u95ee\u9898\uff0c\u6240\u6709\u7684 $1,2$ \u9053\u8def\u7684\u5403\u5b50\u90fd\u9700\u8981\u67e5\u8be2\u662f\u5426\u5728 $3$ \u9053\u8def\u7684\u5403\u5b50\u4e2d\uff0c\u7136\u800c\u4ec5\u51ed\u501f\u7b49\u7ea7\u662f\u65e0\u6cd5\u786e\u5b9a\u552f\u4e00\u68cb\u5b50\u7684\uff0c\u6240\u4ee5\u9700\u8981\u91c7\u53d6\u4e00\u79cd\u9ad8\u7ea7\u7684\u79bb\u6563\u5316\u65b9\u6cd5\uff0c\u8ba9\u6240\u6709\u68cb\u5b50\u7684\u7b49\u7ea7\u5168\u90e8\u4e0d\u540c\u800c\u4e0d\u6539\u53d8\u6bd4\u5927\u5c0f\u7684\u539f\u5219\u3002\u5177\u4f53\u7684\uff0c\u8ba9\u4e0d\u540c\u7b49\u7ea7\u7684\u68cb\u5b50\u4f9d\u7136\u6309\u7167\u539f\u987a\u5e8f\uff0c\u800c\u76f8\u540c\u7b49\u7ea7\u7684\u68cb\u5b50\u6309\u7167\u8f93\u5165\u7684\u5148\u540e\u987a\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u4e4b\u524d\u7684\u68cb\u5b50\u5c31\u4f1a\u6bd4\u4e4b\u540e\u7684\u68cb\u5b50\u5c0f\uff0c\u4f9d\u7136\u6ee1\u8db3\u6bd4\u5927\u5c0f\u7684\u539f\u5219\uff0c\u800c\u79bb\u6563\u5316\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u552f\u4e00\u7684\u7b49\u7ea7\u786e\u5b9a\u67d0\u4e00\u68cb\u5b50\u662f\u5426\u5728\u7ebf\u6bb5\u6811\u5185\u3002\n\n\u6700\u540e\u662f\u4e00\u4e9b\u7ec6\u8282\uff0c\u6bd4\u5982\u901a\u8fc7\u7528 $e[i][j]$ \u8868\u793a\u6807\u53f7\u4e3a $j$ \u7684\u68cb\u5b50\u5728 $i$ \u65b9\u5411\u4e0a\u7684\u8fb9\u6743\uff0c\u7528 $val[i]$ \u6765\u8bb0\u5f55 $i$ \u6807\u53f7\u4e0a\u7684\u70b9\u662f\u5426\u6709\u68cb\u5b50\uff0c\u82e5\u6709\u5219\u4e3a\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u7ebf\u6bb5\u6811\u63d2\u5165\u65f6\u591a\u5e26\u4e00\u4e2a $flag$ \uff0c\u4e3a $1$ \u662f\u63d2\u5165\uff0c\u4e3a $-1$ \u662f\u5220\u9664\uff0c\u8fd8\u6709\u4e00\u4e9b\u90fd\u5199\u5728\u6ce8\u91ca\u91cc\u4e86\uff08\u9707\u60ca\uff0c\u6211\u8fd8\u4f1a\u5199\u6ce8\u91ca\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define mp std::make_pair\n#define pii std::pair<int,int>\n#define chkmin(_A,_B) (_A=std::min(_A,_B))\n#define chkmax(_A,_B) (_A=std::max(_A,_B))\n\nint t,n,m;\nint e[4][200005],ans[100005],val[200005];\n//val\u7528\u6765\u5b58\u50a8\u6bcf\u4e2a\u70b9\u662f\u5426\u6709\u68cb\u5b50\uff0c\u82e5\u6709\u5219val[i]\u8868\u793a\u4f4d\u7f6e\u4e0a\u7684\u70b9\u5728\u68cb\u76d8\u4e0a\u88ab\u653e\u4e0a\u53bb\u7684\u987a\u5e8f\uff08\u8f93\u5165\u7684\u987a\u5e8f\uff09\n//e[i][j]\u8868\u793a\u7f16\u53f7j\u7684\u68cb\u5b50\u5728i\u65b9\u5411\u4e0a\u7684\u8fb9\u7684\u6743\u503c\nint dx[4]={-1,0,1,0};\nint dy[4]={0,-1,0,1};\nchar s[200005];\nstruct chess{\n    int col,lv,x,y,id;\n}a[100005];\ninline bool cmp_lv(const chess &A,const chess &B){return (A.lv==B.lv)?(A.id<B.id):(A.lv<B.lv);}\n//\u7b49\u7ea7\u76f8\u540c\u6309\u7167\u6765\u5230\u68cb\u76d8\u4e0a\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7b49\u7ea7\u6765\u5230\u68cb\u76d8\u65e9\u7684\u53ef\u4ee5\u88ab\u6765\u5230\u68cb\u76d8\u665a\u7684\u5403\u5230\ninline bool cmp_id(const chess &A,const chess &B){return A.id<B.id;}\ninline int pos1(int x,int y){return (x-1)*m+y;}\ninline int pos2(int x,int y){return (y-1)*n+x;}\ninline pii getxy(int pos)   {return mp((pos-1)/m+1,(pos-1)%m+1);}\nvoid merge_All_ST(int,int);\n//--------------------DSU--------------------//\nstruct DSU{\n    int f[200005],sz[200005],maxn[200005],minn[200005];\n    //maxn\u548cminn\u7528\u4e8e\u5904\u7406\u540c\u4e00\u5e76\u67e5\u96c6\u5185\u5143\u7d20\u7684\u6700\u5927\u7f16\u53f7\u548c\u6700\u5c0f\u7f16\u53f7\n    int getfa(const int &x){\n        return (f[x]==x)?x:f[x]=getfa(f[x]);\n    }\n    inline void merge(int x,int y,int flag=0){\n        x=getfa(x),y=getfa(y);\n        if(x==y)\n            return;\n        if(sz[x]<=sz[y])\n            std::swap(x,y);\n        sz[x]+=sz[y];\n        f[y]=x;\n        chkmax(maxn[x],maxn[y]);\n        chkmin(minn[x],minn[y]);\n        if(flag)\n            merge_All_ST(x,y);\n    }\n    inline void init(const int &p){\n        for(int i=0;i<=p;++i){\n            f[i]=maxn[i]=minn[i]=i;\n            sz[i]=1;\n        }\n    }\n    inline int getmaxn(const int &x){return maxn[getfa(x)];}\n    inline int getminn(const int &x){return minn[getfa(x)];}\n    inline int getsize(const int &x){return sz[getfa(x)];}\n}dsu[3];\n//dsu[0]\u7528\u6765\u5904\u7406\u7c7b\u578b\u4e3a3\u7684\u9053\u8def\uff0cdsu[1/2]\u7528\u6765\u5904\u7406\u6a2a\u7ad6\u4e24\u4e2a\u65b9\u5411\u7684\u5408\u5e76\u60c5\u51b5\n\n//--------------------SegmentTree--------------------//\nstruct SegmentTree{\n    struct node{\n        int ls,rs,sz;\n    }nd[8000005];\n    int root[200005],ncnt;\n    #define ls(_p) (nd[_p].ls)\n    #define rs(_p) (nd[_p].rs)\n    void init(){\n        memset(root,0,sizeof root);\n        for(int i=0;i<=8000000;++i){\n            nd[i].ls=nd[i].rs=nd[i].sz=0;\n        }\n        ncnt=0;\n    }\n    int ins(int p,const int &l,const int &r,const int &x,const int &flag=1){\n        //flag=1,\u6dfb\u52a0;flag=-1,\u5220\u9664\n        if(p==0)\n            p=++ncnt;\n        if(l==r){\n            if(flag==-1)\n                return 0;\n            if(nd[p].sz==0)\n                nd[p].sz++;\n            return p;\n        }\n        int mid=(l+r)>>1;\n        if(x<=mid)\n            ls(p)=ins(ls(p),l,mid,x,flag);\n        else\n            rs(p)=ins(rs(p),mid+1,r,x,flag);\n        nd[p].sz=nd[ls(p)].sz+nd[rs(p)].sz;\n        return (nd[p].sz)?p:0;\n    }\n    int merge(const int &p,const int &q,const int &l,const int &r){\n        if(p==0 || q==0)\n            return p+q;\n        if(l==r){\n            nd[p].sz=std::min(nd[p].sz+nd[q].sz,1);\n            return p;\n        }\n        int mid=(l+r)>>1;\n        ls(p)=merge(ls(p),ls(q),l,mid);\n        rs(p)=merge(rs(p),rs(q),mid+1,r);\n        nd[p].sz=nd[ls(p)].sz+nd[rs(p)].sz;\n        return p;\n    }\n    int query1(const int &p,const int &l,const int &r,const int &x){\n        //\u67e5\u8be2\u5c0f\u4e8e\u7b49\u4e8e\u67d0\u4e00\u5143\u7d20\u7684\u5143\u7d20\u4e2a\u6570\n        if(p==0 || x==0)\n            return 0;\n        if(l==r)\n            return nd[p].sz;\n        int mid=(l+r)>>1;\n        if(x<=mid)\n            return query1(ls(p),l,mid,x);\n        else\n            return nd[ls(p)].sz+query1(rs(p),mid+1,r,x);\n    }\n    int query2(const int &p,const int &l,const int &r,const int &x){\n        //\u67e5\u8be2\u67d0\u4e00\u5143\u7d20\u662f\u5426\u5728\u5e76\u67e5\u96c6\u5185\n        if(p==0 || x==0)\n            return 0;\n        if(l==r)\n            return nd[p].sz;\n        int mid=(l+r)>>1;\n        if(x<=mid)\n            return query2(ls(p),l,mid,x);\n        else\n            return query2(rs(p),mid+1,r,x);\n    }\n    int querynum(const int &p,const int &l,const int &r){\n        //\u67e5\u8be2[l,r]\u5185\u5728\u8fd9\u4e00\u5e76\u67e5\u96c6\u5185\u7684\u5143\u7d20\u4e2a\u6570\n        return query1(root[p],1,n*m,r)-query1(root[p],1,n*m,l-1);\n    }\n}st[4];\n//st[0/1]\u5b58\u50a8\u7b49\u7ea7\uff0cst[2/3]\u5b58\u50a8\u884c/\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\nint q;\nvoid merge_All_ST(int x,int y){\n    //\u5c06x,y\u5e76\u67e5\u96c6\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u5408\u5e76\uff08\u5e76\u67e5\u96c6\u662fy\u5408\u5e76\u5230x\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u4e5f\u662fy\u5408\u5e76\u5230x\uff09\n    st[0].root[x]=st[0].merge(st[0].root[x],st[0].root[y],1,q);\n    st[1].root[x]=st[1].merge(st[1].root[x],st[1].root[y],1,q);\n    st[2].root[x]=st[2].merge(st[2].root[x],st[2].root[y],1,n*m);\n    st[3].root[x]=st[3].merge(st[3].root[x],st[3].root[y],1,n*m);\n}\n\ninline bool caneat(const int &x,const int &y){\n    if(y==0 || y>=x)\n        return 0;\n    return (a[x].col!=a[y].col && a[x].lv>=a[y].lv);\n}\n\nint main(){\n    scanf(\"%d\",&t);\n    while(t--){\n        scanf(\"%d %d %d\",&n,&m,&q);\n        memset(e,0,sizeof e);\n        memset(val,0,sizeof val);\n        memset(ans,0,sizeof ans);\n        dsu[0].init(n*m);\n        dsu[1].init(n*m);\n        dsu[2].init(n*m);\n        st[0].init();\n        st[1].init();\n        st[2].init();\n        st[3].init();\n        for(int i=1;i<=n;++i){\n            scanf(\"%s\",s+1);\n            for(int j=1;j<m;++j)\n                e[1][pos1(i,j+1)]=e[3][pos1(i,j)]=s[j]-'0';\n        }\n        for(int i=1;i<n;++i){\n            scanf(\"%s\",s+1);\n            for(int j=1;j<=m;++j)\n                e[0][pos1(i+1,j)]=e[2][pos1(i,j)]=s[j]-'0';\n        }\n        for(int i=1;i<=q;++i){\n\t\t\tscanf(\"%d %d %d %d\",&a[i].col,&a[i].lv,&a[i].x,&a[i].y);\n\t\t\ta[i].id=i;\n\t\t}\n        std::sort(a+1,a+q+1,cmp_lv);\n        for(int i=1;i<=q;++i)\n            a[i].lv=i;\n        std::sort(a+1,a+q+1,cmp_id);\n        for(int i=1;i<=q;++i)\n            val[pos1(a[i].x,a[i].y)]=i;   \n        for(int i=1;i<=n;++i){\n            for(int j=1;j<=m;++j){\n                //\u5148\u5c06\u540c\u4e00\u8fde\u901a\u5757\u4e0a\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u518d\u7ef4\u62a4\u7ebf\u6bb5\u6811\u4fe1\u606f\uff0c\u53ef\u4ee5\u7701\u53bb\u5408\u5e76\u7ebf\u6bb5\u6811\u7684\u590d\u6742\u5ea6\n                int id=pos1(i,j);\n                for(int k=0;k<4;++k){\n                    if(e[k][id]>1){\n                        int nxt=pos1(i+dx[k],j+dy[k]);\n                        if(val[id]==0 && val[nxt]==0){\n                            dsu[(e[k][id]==3)?0:(k%2+1)].merge(id,nxt);\n                        }\n                    }\n                }\n            }\n        }\n        for(int i=1;i<=n;++i){\n            for(int j=1;j<=m;++j){\n                //\u7ef4\u62a4\u7ebf\u6bb5\u6811\u4fe1\u606f\uff0c\u5305\u62ec\u81ea\u5df1\u6240\u5728\u7684\u884c\u5217\u548c\u53ef\u4ee5\u5230\u8fbe\u7684\u68cb\u5b50\u7684\u7b49\u7ea7\n                int id=pos1(i,j);\n                int idfa=dsu[0].getfa(id);\n                st[2].root[idfa]=st[2].ins(st[2].root[idfa],1,n*m,pos2(i,j));\n                st[3].root[idfa]=st[3].ins(st[3].root[idfa],1,n*m,id);\n                for(int k=0;k<4;++k){\n                    if(e[k][id]==3){\n                        int nxt=pos1(i+dx[k],j+dy[k]);\n                        if(val[nxt]){\n                            int col=a[val[nxt]].col;\n                            st[col].root[idfa]=st[col].ins(st[col].root[idfa],1,q,a[val[nxt]].lv);\n                        }\n                    }\n                }\n            }\n        }\n        for(int i=q;i>=1;--i){\n            int id=pos1(a[i].x,a[i].y);\n            int col=a[i].col;\n            for(int j=0;j<4;++j){\n                //\u5904\u7406\u8fb9\u6743\u4e3a3\u7684\u7ebf\u6bb5\u6811\uff0c\u628a\u68cb\u5b50\u81ea\u8eab\u5220\u9664\n                if(e[j][id]==3){\n                    int nxt=pos1(a[i].x+dx[j],a[i].y+dy[j]);\n                    int nxtfa=dsu[0].getfa(nxt);\n                    st[col].root[nxtfa]=st[col].ins(st[col].root[nxtfa],1,q,a[i].lv,-1);\n                }\n            }\n            for(int j=0;j<4;++j){\n                //\u5408\u5e76\u8fb9\u6743\u4e3a3\u7684\u6240\u6709\u5e76\u67e5\u96c6\uff0c\u540c\u65f6\u5408\u5e76\u7ebf\u6bb5\u6811\n                if(e[j][id]==3){\n                    int nxt=pos1(a[i].x+dx[j],a[i].y+dy[j]);\n                    if(val[nxt] && val[nxt]<i)\n                        continue;\n                        //\u82e5\u51fa\u73b0\u8fd8\u6ca1\u6709\u88ab\u5220\u9664\u7684\u68cb\u5b50\uff0c\u76f4\u63a5\u8df3\u8fc7\n                    dsu[0].merge(id,nxt,1);\n                }\n            }\n            int idfa=dsu[0].getfa(id);\n            //\u9996\u5148\u5c06\u5e76\u67e5\u96c6\u5185\u7684\u6240\u6709\u786e\u5b9a\u70b9\u52a0\u5165ans\uff0c\u518d\u5c06\u6240\u6709\u8fb9\u754c\u4e0a\u989c\u8272\u4e0d\u540c\u7ea7\u522b\u66f4\u5c0f\u7684\u68cb\u5b50\u52a0\u5165\n            ans[i]=dsu[0].getsize(id)+st[1^col].query1(st[1^col].root[idfa],1,q,a[i].lv);\n            for(int j=0;j<4;++j){\n                //\u5408\u5e76\u8fb9\u6743\u4e3a2\u7684\u5e76\u67e5\u96c6\n                if(e[j][id]==2){\n                    int nxt=pos1(a[i].x+dx[j],a[i].y+dy[j]);\n                    if(val[nxt] && val[nxt]<i)\n                        continue;\n                        //\u82e5\u51fa\u73b0\u8fd8\u6ca1\u6709\u88ab\u5220\u9664\u7684\u68cb\u5b50\uff0c\u76f4\u63a5\u8df3\u8fc7\n                    dsu[j%2+1].merge(id,nxt);\n                }\n            } \n            //\u8ba1\u7b97\u8fb9\u6743\u4e3a2\u7684\u8d21\u732e\uff0c\u7531\u4e8e\u7f16\u53f7\u7684\u5f71\u54cd\u540c\u4e00\u5217\u4e0a\u7684\u5143\u7d20\u5e76\u4e0d\u8fde\u7eed\uff0c\u6240\u4ee5\u8981\u9664\u4ee5m\n            int mx1=dsu[1].getmaxn(id),mx2=dsu[2].getmaxn(id),mn1=dsu[1].getminn(id),mn2=dsu[2].getminn(id);\n            ans[i]+=mx2-mn2+1+(mx1-mn1)/m+1;\n            int dmx=pos2(getxy(mx1).first,getxy(mx1).second);\n            int dmn=pos2(getxy(mn1).first,getxy(mn1).second);\n            //\u5c062\uff0c3\u91cd\u590d\u7684\u90e8\u5206\u5220\u9664\uff08\u5c062\u4e2d\u7684\u884c/\u5217\u653e\u52303\u4e2d\u7684\u5e76\u67e5\u96c6\u5185\u627e\uff09\n            ans[i]-=st[2].querynum(idfa,dmn,dmx)+st[3].querynum(idfa,mn2,mx2);\n            //\u7279\u6b8a\u5904\u74062\u7684\u8fb9\u754c,\u82e5\u53ef\u4ee5\u5403\u5b50\u4e14\u6ca1\u6709\u88ab3\u7684\u8fb9\u754c\u5305\u542b\u8fdb\u53bb\u5c31\u8ba1\u5165\u7b54\u6848\n            if(e[0][mn1]==2 && caneat(i,val[mn1-m]))\n                if(!st[1^col].query2(st[1^col].root[idfa],1,q,a[val[mn1-m]].lv))\n                    ++ans[i];\n            if(e[1][mn2]==2 && caneat(i,val[mn2-1]))\n                if(!st[1^col].query2(st[1^col].root[idfa],1,q,a[val[mn2-1]].lv))\n                    ++ans[i];\n            if(e[2][mx1]==2 && caneat(i,val[mx1+m]))\n                if(!st[1^col].query2(st[1^col].root[idfa],1,q,a[val[mx1+m]].lv))\n                    ++ans[i];\n            if(e[3][mx2]==2 && caneat(i,val[mx2+1]))\n                if(!st[1^col].query2(st[1^col].root[idfa],1,q,a[val[mx2+1]].lv))\n                    ++ans[i];\n            //\u5904\u7406\u8fb9\u6743\u4e3a1\u7684\u8fb9\n            for(int j=0;j<4;++j){\n                if(e[j][id]==1){\n                    int nxt=pos1(a[i].x+dx[j],a[i].y+dy[j]);\n                    //\u82e5\u6709\u68cb\u5b50\u5224\u65ad\u662f\u5426\u80fd\u5403\uff0c\u7136\u540e\u90fd\u8981\u5224\u65ad\u662f\u5426\u88ab\u5305\u542b\n                    if(val[nxt] && val[nxt]<i){\n                        if(caneat(i,val[nxt]) && (st[1^col].query2(st[1^col].root[idfa],1,q,a[val[nxt]].lv)==0))\n                            ++ans[i];\n                    }\n                    else if(dsu[0].getfa(id)!=dsu[0].getfa(nxt)){\n                        ans[i]=ans[i]+1;\n                    }\n                    \n                }\n            }\n            //\u5728\u8ba1\u7b97\u8fb9\u6743\u4e3a2\u65f6\u81ea\u5df1\u591a\u7b97\u4e861\u6b21\uff0c\u51cf\u6389\n            --ans[i];\n        }\n        for(int k=1;k<=q;++k){\n            printf(\"%d\\n\",ans[k]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1660630912,
        "uid": 342989,
        "name": "HBWH_zzz",
        "ccfLevel": 7,
        "title": "P7963 [NOIP2021] \u68cb\u5c40"
    },
    {
        "content": "> \u90fd\u4ec0\u4e48\u5e74\u4ee3\u4e86\u8fd8\u5728\u4e0b\u4f20\u7edf\u56f4\u68cb\uff1f\n\n\u9898\u9762\u770b\u8d77\u6765\u5f88\u5413\u4eba\uff0c\u4f46\u7ec6\u60f3\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\u601d\u8def\u8fd8\u662f\u5f88\u76f4\u63a5\u7684\u3002\u4ee5\u4e0b\u628a\u6709\u68cb\u5b50\u7684\u683c\u70b9\u79f0\u4e3a\u7279\u6b8a\u70b9\u3002\n\n\u9996\u5148\u60f3\u5230\u7684\u662f\u5bf9\u666e\u901a\u9053\u8def\u3001\u76f4\u8fbe\u9053\u8def\u3001\u4e92\u901a\u9053\u8def\u5206\u522b\u7ef4\u62a4\u3002\u524d\u4e24\u8005\u770b\u8d77\u6765\u90fd\u6bd4\u8f83\u5bb9\u6613\uff1a\u666e\u901a\u9053\u8def\u53ea\u6709 $4$ \u79cd\u53ef\u80fd\uff0c\u76f4\u8fbe\u9053\u8def\u4e5f\u53ea\u6709\u56db\u4e2a\u65b9\u5411\uff0c\u53ef\u4ee5\u6982\u62ec\u4e3a\u56db\u6761\u7ebf\u6bb5\uff1b\u800c\u76f4\u8fbe\u9053\u8def\u548c\u666e\u901a\u9053\u8def\u53ef\u8fbe\u7684\u70b9\u4e5f\u662f\u4e0d\u4ea4\u7684\u3002\u95ee\u9898\u5728\u4e8e\u4e92\u901a\u9053\u8def\uff0c\u4ee5\u53ca\u600e\u4e48\u53bb\u9664\u4e92\u901a\u9053\u8def\u4e0e\u5176\u5b83\u9053\u8def\u7684\u4ea4\u96c6\u3002\u63a5\u4e0b\u6765\u5148\u8ba8\u8bba\u600e\u4e48\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u901a\u8fc7\u4e92\u901a\u9053\u8def\u80fd\u5230\u8fbe\u7684\u70b9\u96c6\u3002\n\n\u7531\u4e8e\u5230\u4e86\u4e00\u4e2a\u7279\u6b8a\u70b9\u4e4b\u540e\u5c31\u4e0d\u53ef\u80fd\u518d\u8d70\u4e0b\u53bb\uff0c\u6240\u4ee5\u8003\u8651\u628a\u7279\u6b8a\u70b9\u548c\u666e\u901a\u70b9\u5206\u5f00\u7ef4\u62a4\u53ef\u8fbe\u6027\u3002\u5177\u4f53\u5730\uff0c\u5bf9\u6bcf\u4e2a\u666e\u901a\u70b9\u5f00\u4e00\u4e2a\u96c6\u5408\u5b58\u50a8\u4e0e\u5b83\u76f8\u90bb\u7684\u7279\u6b8a\u70b9\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u68cb\u5b50\u65f6\uff0c\u628a\u5bf9\u5e94\u683c\u70b9\u5220\u6389\uff0c\u5e76\u628a\u8fd9\u679a\u68cb\u5b50\u653e\u5165\u76f8\u90bb\u7684\u3001\u4e0e\u5b83\u7531\u4e00\u6761\u4e92\u901a\u9053\u8def\u8fde\u63a5\u7684\u666e\u901a\u70b9\u7684\u96c6\u5408\u4e2d\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u80fd\u5230\u8fbe\u7684\u7279\u6b8a\u70b9\u7684\u96c6\u5408\u5c31\u662f\u4ece\u5b83\u51fa\u53d1\u80fd\u5230\u8fbe\u7684\u666e\u901a\u70b9\u5bf9\u5e94\u7684\u96c6\u5408\u7684\u5e76\u3002\u73b0\u5728\u7684\u4efb\u52a1\u770b\u8d77\u6765\u5c31\u53ea\u6709\u5220\u70b9\uff0c\u4ee5\u53ca\u7ef4\u62a4\u666e\u901a\u70b9\u7684\u8fde\u901a\u5757\u4fe1\u606f\u3002\u65f6\u95f4\u5012\u6d41\uff0c\u7531\u5220\u70b9\u53d8\u4e3a\u52a0\u70b9\u3002\u4e3a\u4e86\u652f\u6301\u67e5\u8be2\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e24\u68f5\u5e73\u8861\u6811\u5206\u522b\u8868\u793a\u989c\u8272\u4e3a $0,1$ \u7684\u53ef\u8fbe\u7279\u6b8a\u70b9\uff0c\u5e73\u8861\u6811\u4ee5\u7b49\u7ea7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u7f16\u53f7\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u3002\u52a0\u70b9\u65f6\u5408\u5e76\u5bf9\u5e94\u8fde\u901a\u5757\u7684\u5e73\u8861\u6811\uff0c\u540c\u65f6\u628a\u5bf9\u5e94\u7684\u7279\u6b8a\u70b9\u6539\u4e3a\u666e\u901a\u70b9\uff0c\u8fd9\u53ea\u9700\u8981\u628a\u5bf9\u5e94\u68cb\u5b50\u4ece\u8fde\u901a\u5757\u7684\u5e73\u8861\u6811\u4e2d\u5220\u9664\u3002\u6ce8\u610f\u5e73\u8861\u6811\u81ea\u5e26\u4e86\u53d6\u5e76\u64cd\u4f5c\u3002\u800c\u7531\u666e\u901a\u9053\u8def\u548c\u76f4\u8fbe\u9053\u8def\u80fd\u5230\u8fbe\u7684\u7279\u6b8a\u70b9\u6700\u591a\u6709 $4$ \u4e2a\uff0c\u90a3\u4e48\u5224\u91cd\u4e5f\u662f\u7b80\u5355\u7684\u3002\n\n\u800c\u5bf9\u4e8e\u80fd\u5230\u8fbe\u7684\u666e\u901a\u70b9\u4e5f\u662f\u7c7b\u4f3c\u5730\u7ef4\u62a4\uff0c\u4f46\u662f\u4e3a\u4e86\u53bb\u91cd\u6211\u4eec\u9700\u8981\u7b97\u51fa\u5bf9\u5e94\u70b9\u96c6\u4e2d\uff0c\u6a2a\u5750\u6807\u4e3a $x$\uff0c\u7eb5\u5750\u6807\u4ecb\u4e8e $[l,r]$ \u4e4b\u95f4\u7684\u70b9\u7684\u6570\u91cf\u3002\u4ee5\u53ca\u6a2a\u5750\u6807\u4ecb\u4e8e $[l,r]$ \u4e4b\u95f4\uff0c\u7eb5\u5750\u6807\u4e3a $y$ \u7684\u70b9\u6570\u3002\u4e0d\u8fc7\u8fd9\u4e5f\u662f\u597d\u529e\u7684\uff0c\u4ecd\u7136\u5f00\u4e24\u68f5\u5e73\u8861\u6811\uff0c\u4e00\u68f5\u4ee5\u6a2a\u5750\u6807\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u7eb5\u5750\u6807\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u53e6\u4e00\u68f5\u4ee5\u7eb5\u5750\u6807\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u3001\u6a2a\u5750\u6807\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u67e5\u8be2\u65f6\u5dee\u5206\u4e00\u4e0b\u5c31\u884c\u3002\u6ce8\u610f\u81ea\u8eab\u53ef\u80fd\u88ab\u7b97\u8fdb\u53bb\uff0c\u8981\u53bb\u6389\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u53ea\u5269\u4e0b\u6c42\u51fa\u76f4\u8fbe\u9053\u8def\u5bf9\u5e94\u7684\u6a2a\u7ad6\u4e24\u6761\u7ebf\u6bb5\u7684\u8303\u56f4\u3002\u5bf9\u4e8e\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u76f4\u8fbe\u9053\u8def\u7684\u8fde\u7eed\u6bb5\uff0c\u52a0\u70b9\u65f6\u5408\u5e76\u5373\u53ef\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u7528 pb_ds \u7684\u5e73\u8861\u6811\u4f1a\u88ab\u5361\u5e38\u3002\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u4ee3\u66ff\u5e73\u8861\u6811\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u4f46\u8fd9\u6837\u7684\u8bdd\uff0c\u7279\u6b8a\u70b9\u7684\u96c6\u5408\u53d6\u5e76\u4f1a\u6bd4\u8f83\u5934\u75bc\u3002\u5982\u679c\u4f60\u60f3\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u54c8\u5e0c\u8868\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\uff0c\u5c31\u4f1a\u9677\u5165\u4e0d\u5e78\u3002\u6b63\u786e\u7684\u6253\u5f00\u65b9\u5f0f\u662f\u628a\u68cb\u5b50\u7684\u6743\u503c\u6309\uff08\u6743\u503c\uff0c\u51fa\u73b0\u65f6\u95f4\uff09\u79bb\u6563\u5316\u6210\u4e0d\u540c\u7684\u503c\uff0c\u8fd9\u6837\u76f4\u63a5\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u5565\u4e8b\u4e5f\u6ca1\u6709\u4e86\u3002\u590d\u6742\u5ea6\u5355 $\\log$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp> \n//#include<ext/pb_ds/tree_policy.hpp> \n#include<ext/pb_ds/hash_policy.hpp> \nnamespace vectorwyx{\n#define pii pair<int,int>\n#define fi first\n#define se second\n#define pb push_back\n#define eb emplace_back\n#define mk make_pair\n#define sml(x,y) (x=min(x,y))\n#define big(x,y) (x=max(x,y))\n#define ll long long\n#define uint unsigned\n#define ull unsigned long long\n#define umap unordered_map\n#define db double\n#define fo(i,x,y) for(int i=(x);i<=(y);++i)\n#define go(i,x,y) for(int i=(x);i>=(y);--i)\n#define ptc putchar\n#define gtc getchar\n#define emp emplace\n#define re return\n#define co continue\n#define brk break\n#define HH (ptc('\\n'))\n#define bctz __builtin_ctz\n#define bclz __builtin_clz\n#define bppc __builtin_popcount\n//#define Tree tree<pii,null_type,less<pii>,rb_tree_tag,tree_order_statistics_node_update>\n//#define It Tree::iterator\nusing namespace std;\nusing namespace __gnu_pbds;\nll seed=chrono::system_clock::now().time_since_epoch().count();\nmt19937 rnd(seed);\ninline int rm(int x,int y){return (int)(rnd()%(y-x+1ll)+x);}\ninline int read(){signed ch=getchar();int x=0,f=1;while(!isdigit(ch)){if(ch==(int)('-'))f=-1;ch=getchar();}while(isdigit(ch)){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}return x*f;}\ninline void out(int *a,int l,int r){fo(i,l,r) cout<<*(a+i)<<' ';puts(\"\");}\n\nconst int N=2e5+5,inf=1e9;\n#define F(i,j) ((i-1)*m+j)\n#define F_(i,j) ((i-1)*n+j)\nint ban[N],n,m,q,col[N],lv[N];\nvector<int> e[N][4];\n\nnamespace Sgt{\nconst int N=2e7;\nstruct Node{\n\tint lt,rt,sum;\n\tNode(){lt=rt=sum=0;}\n}tr[N];\nint num,trash[N],ct;\nvoid clear(){fo(i,1,num) tr[i]=Node();ct=num=0;}\n#define ls (tr[x].lt)\n#define rs (tr[x].rt)\n#define mid ((l+r)>>1)\nint new_(){\n\tif(ct) re trash[ct--];\n\tre ++num;\n}\nvoid ps(int x){tr[x].sum=tr[ls].sum+tr[rs].sum;}\nvoid upd(int &x,int l,int r,int aim,int k){\n\tif(!x) x=new_();//,assert(x<=N*4*21);\n//\tprintf(\"upd(%d,%d,%d,%d,%d)\\n\",x,l,r,aim,k);\n\tif(l==r){tr[x].sum=k;re;}\n\tif(aim<=mid) upd(ls,l,mid,aim,k);\n\telse upd(rs,mid+1,r,aim,k);\n\tps(x);\n}\n#define JI(x) (tr[x]=Node(),trash[++ct]=x)\nint merge(int x,int y){\n\tif(!x||!y) re x|y;\n\tint w=new_();\n\tif(!tr[x].lt&&!tr[x].rt&&!tr[y].lt&&!tr[y].rt){\n\t\ttr[w].sum=tr[x].sum|tr[y].sum;\n\t\tJI(x),JI(y);\n\t\tre w;\n\t}\n\ttr[w].lt=merge(tr[x].lt,tr[y].lt);\n\ttr[w].rt=merge(tr[x].rt,tr[y].rt);\n\tps(w);\n\tJI(x),JI(y);\n\tre w;\n}\nint rank(int x,int l,int r,int k){\n\tif(!x) re 0;\n\tif(r<=k) re tr[x].sum;\n\tint ret=rank(ls,l,mid,k);\n\tif(k>mid) ret+=rank(rs,mid+1,r,k);\n\tre ret;\n}\nint ask(int x,int l,int r,int aim){\n\tif(!x) re 0;\n\tif(l==r) re tr[x].sum; \n\tif(aim<=mid) re ask(ls,l,mid,aim);\n\telse re ask(rs,mid+1,r,aim);\n}\n//void clr(int x){\n//\tif(!x) re;\n//\tclr(ls);clr(rs);\n//\tJI(x);\n//}\n}\nusing Sgt::upd;\n\nstruct Splay{\n//\t#define hxb map<int,int>\n//\thxb mp;\n\tint rt;\n\tvoid clear(){\n\t\trt=0;\n//\t\thxb tmp;swap(mp,tmp);\n\t}\n\tvoid insert(int x){\n//\t\tre;\n//\t\tprintf(\"insert(%d)\\n\",x);\n//\t\tif(mp[x]) re;\n//\t\tmp[x]=1;\n\t\tupd(rt,1,q,lv[x],1);\n\t}\n\tint order_of_key(int x){re Sgt::rank(rt,1,q,x);}\n\tint size(){re Sgt::tr[rt].sum;}\n\tvoid erase(int x){//\u6ce8\u610f STL set \u7684 erase \u662f\u4f1a\u5148\u68c0\u9a8c\u5143\u7d20\u662f\u5426\u5b58\u5728\u7684\uff01 \n//\t\tre;\n//\t\tif(mp.find(x)==mp.end()) re;\n//\t\tmp.erase(x);\n\t\tupd(rt,1,q,lv[x],0);\n\t}\n\tbool find(int x){re Sgt::ask(rt,1,q,lv[x]);}\n}rea[N][2];\n\nstruct Set{\n\tint rt;\n\tvoid clear(){rt=0;}\n\tvoid insert(int x){upd(rt,1,n*m,x,1);}\n\tint order_of_key(int x){re Sgt::rank(rt,1,n*m,x);}\n\tint size(){re Sgt::tr[rt].sum;}\n\tbool find(int x){\n\t\tre Sgt::ask(rt,1,n*m,x);\n\t}\n}Rh[N],Rl[N];\n\nint siz[N];\nstruct DSU{\nvector<int> f,mn,mx;\nvoid reset(int len){\n\tf.resize(len+2);mn.resize(len+2);mx.resize(len+2);\n\tfo(i,1,len) f[i]=mn[i]=mx[i]=i;\n}\nint fin(int x){\n\tif(f[x]==x) re x;\n\tre f[x]=fin(f[x]);\n}\nvoid merge(int x,int y){\n\tint fx=fin(x),fy=fin(y);\n\tif(fx==fy) re;\n\tf[fx]=fy;sml(mn[fy],mn[fx]),big(mx[fy],mx[fx]);\n}\nint L(int x){re mn[fin(x)];}\nint R(int x){re mx[fin(x)];}\n}B1[N],B2[N],all;//\u5e76\u67e5\u96c6 \n\n//Tree rea[N][2],Rh[N],Rl[N];\n\nstruct Opt{\n\tint col,lv,x,y;\n}a[N];\n\nint road[N][4]; \nvoid connect(int x,int y,int o){\n\tif(!o) re;\n\te[x][o].eb(y);\n\te[y][o].eb(x);\n}\n\nvoid clear(){\n\tfo(i,1,n*m){\n\t\tfo(o,0,3) road[i][o]=0;\n\t\trea[i][0].clear(),rea[i][1].clear();\n\t\tRh[i].clear(),Rl[i].clear();\n\t\tfo(j,1,3) e[i][j].clear();\n\t}\n\tSgt::clear();\n}\n\n#define H_(x) ((x-1)/m+1)\n#define L_(x) ((x-1)%m+1)\n\nvoid gao(Splay &x,Splay &y){//\u628a x \u5e76\u5165\u5230 y \u4e2d \n\ty.rt=Sgt::merge(x.rt,y.rt);\n//\tfor(auto i:x.mp) y.insert(i.fi),cnt++;\n//\tx.clear();\n}\n\nvoid gao(Set &x,Set &y){\n\ty.rt=Sgt::merge(x.rt,y.rt);\n}\n\nvoid merge(int x,int y){//\u4e92\u901a\u9053\u8def\u7684\u8fde\u63a5 \n//\tprintf(\"merge(%d,%d)\\n\",x,y);\n//\tfor(auto i:rea[3][0].mp) printf(\"(%d,%d) \",i.fi,i.se);HH;\n//\tint x_=x,y_=y;\n\tx=all.fin(x),y=all.fin(y);\n\tif(x==y) re;\n\tif(siz[x]>siz[y]) swap(x,y);\n\tall.merge(x,y);siz[y]+=siz[x];\n\tgao(Rh[x],Rh[y]);\n\tgao(Rl[x],Rl[y]);\n\tgao(rea[x][0],rea[y][0]);\n\tgao(rea[x][1],rea[y][1]);\n}\n\nvoid add_point(int x){\n\tint i=H_(x),j=L_(x);\n//\tprintf(\"add_point(%d) %d,%d\\n\",x,i,j);\n//\ttr1[i].upd(j,1);tr2[j].upd(i,1);\n\t//\u5904\u7406\u76f4\u8fbe\u9053\u8def \n\tfor(int k:e[x][2]) if(!ban[k]){\n\t\tif(H_(k)==i) B1[i].merge(L_(k),j);\n\t\telse B2[j].merge(H_(k),i);\n\t}\n\t//\u5904\u7406\u4e92\u901a\u9053\u8def \n\tfor(int k:e[x][3]) if(ban[k]) \n\t\trea[all.fin(x)][col[k]].insert(k);\n\tfor(int k:e[x][3]) if(!ban[k]) merge(x,k);\n}\n\nint cnt[N];\n\nvoid build(){\n\tall.reset(n*m);fo(i,1,n*m) siz[i]=1;\n\tfo(i,1,n) B1[i].reset(m);\n\tfo(i,1,m) B2[i].reset(n);\t\n\tfo(i,1,q) cnt[i]=0;fo(i,1,q) cnt[a[i].lv]++;\n\tfo(i,2,q) cnt[i]+=cnt[i-1];\n\tgo(i,q,1) lv[F(a[i].x,a[i].y)]=cnt[a[i].lv]--;\n\tfo(i,1,n) fo(j,1,m){\n\t\tint x=F(i,j);\n\t\tRh[x].insert(F(i,j));\n\t\tRl[x].insert(F_(j,i));\n\t\tif(!ban[x]) for(int k:e[x][3]) if(ban[k]) \n\t\t\trea[x][col[k]].insert(k);\n\t}\n\tfo(i,1,n) fo(j,1,m){\n\t\tint x=F(i,j);\n\t\tif(ban[x]) co;\n\t\tadd_point(x);\n\t}\n}\n\nint calc_H(int x,int l,int r){\n\t//\u8ba1\u7b97\u5728 x \u80fd\u901a\u8fc7\u4e92\u901a\u9053\u8def\u5230\u8fbe\u7684\u666e\u901a\u70b9\u4e2d\uff0c\n\t//\u4e0e x \u540c\u884c\u4e14\u5217\u5750\u6807\u4f4d\u4e8e [l,r] \u7684\u70b9\u6570 \n\tint i=H_(x),fx=all.fin(x);\n\tre (int)( Rh[fx].order_of_key(F(i,r))-Rh[fx].order_of_key(F(i,l-1)) );\n}\n\nint calc_L(int x,int l,int r){\n\tint j=L_(x),fx=all.fin(x);\n\tre (int)( Rl[fx].order_of_key(F_(j,r))-Rl[fx].order_of_key(F_(j,l-1)) );\n}\n\nint ask(int x){\n//\tre 0;\n//\tprintf(\"ask(%d)\\n\",x);\n\tint ans=0,i=H_(x),j=L_(x),fx=all.fin(x);\n\t#define Rea rea[fx][col[x]^1]\n//\tfor(auto w:Rea.mp) printf(\"(%d,%d) \",w.fi,w.se);HH;\n\t//\u8ba1\u7b97\u80fd\u5230\u8fbe\u7684\u7279\u6b8a\u70b9\n\tans+=(int)Rea.order_of_key(lv[x]);\n//\tint l=tr1[i].getL(B1[i].L(j),j-1),r=tr1[i].getR(j+1,B1[i].R(j));\n\tint l=B1[i].L(j),r=B1[i].R(j);\n//\tint L=tr2[j].getL(B2[j].L(i),i-1),R=tr2[j].getR(i+1,B2[j].R(i));\n\tint L=B2[j].L(i),R=B2[j].R(i);\n//\tprintf(\"l=%d r=%d L=%d R=%d\\n\",l,r,L,R);\n\t#define QC(y) if(ban[y]&&lv[y]<=lv[x]&&col[y]!=col[x])\\\n\t\t\t\t\t\tans+=Rea.find(y)^1;\n\tif(l>1){\n\t\tint y=F(i,l-1);\n\t\tif(road[y][2]==2) QC(y);\n\t}\n\tif(L>1){\n\t\tint y=F(L-1,j);\n\t\tif(road[y][3]==2) QC(y);\n\t}\n\tif(r<m){\n\t\tint y=F(i,r+1);\n\t\tif(road[y][0]==2) QC(y);\n\t}\n\tif(R<n){\n\t\tint y=F(R+1,j);\n\t\tif(road[y][1]==2) QC(y);\n\t}\n\tfor(int k:e[x][1]) if(ban[k]) QC(k);\n//\tprintf(\"\u53ef\u8fbe\u7684\u7279\u6b8a\u70b9\u6570\u76ee\u4e3a %d\\n\",ans);\n\t\n\t//\u8ba1\u7b97\u80fd\u5230\u8fbe\u7684\u666e\u901a\u70b9 \n\t//\u6ce8\u610f Rh \u548c Rl \u53ea\u6709\u6bd4\u8f83\u65b9\u5f0f\u7684\u5dee\u522b \n\tans+=(int)Rh[fx].size()-1;//\u6ce8\u610f\u5305\u542b\u5b83\u672c\u8eab \n\tif(l<j) ans+=j-l-calc_H(x,l,j-1);\n\tif(r>j) ans+=r-j-calc_H(x,j+1,r);\n\tif(L<i) ans+=i-L-calc_L(x,L,i-1);\n\tif(R>i) ans+=R-i-calc_L(x,i+1,R);\n\tfor(int k:e[x][1]) if(!ban[k]) \n\t\tans+=Rh[fx].find(k)==0;\n//\tprintf(\"\u53ef\u8fbe\u7684\u603b\u70b9\u6570\u4e3a %d\\n\",ans);\t\n\tre ans;\n}\n\nint ans[N];\n\nvoid solve(){\n\tcin>>n>>m>>q;\n\tclear();\n\tfo(i,1,n){\n\t\tstring s;cin>>s;\n\t\tfo(j,1,m-1){\n\t\t\tint x=F(i,j),y=F(i,j+1),o=(int)(s[j-1]-'0');\n\t\t\tconnect(x,y,o);\n\t\t\troad[x][2]=road[y][0]=o;\n\t\t}\n\t}\n\tfo(i,1,n-1){\n\t\tstring s;cin>>s;\n\t\tfo(j,1,m){\n\t\t\tint x=F(i,j),y=F(i+1,j),o=(int)(s[j-1]-'0');\n\t\t\tconnect(x,y,o);\n\t\t\troad[x][3]=road[y][1]=o;\n\t\t}\n\t}\n\tfo(i,1,q){\n\t\ta[i].col=read(),a[i].lv=read(),a[i].x=read(),a[i].y=read();\n\t\tint x=F(a[i].x,a[i].y);\n\t\tban[x]=1;col[x]=a[i].col;lv[x]=a[i].lv;\n//\t\ttr1[a[i].x].upd(a[i].y,1);tr2[a[i].y].upd(a[i].x,1);\n\t}\n\tbuild();\n\tgo(t,q,1){\n\t\tint nd=F(a[t].x,a[t].y);\n\t\t\n\t\tban[nd]=0;\n\t\t//tr1[x].upd(y,-1),tr2[y].upd(x,-1);\n\t\tadd_point(nd);\n//\t\trea[all.fin(nd)][col[nd]].erase(mk(lv[nd],nd));\n//\t\tcout<<\"?\";for(auto i:rea[all.fin(nd)][col[nd]].mp) printf(\"(%d,%d) \",i.fi,i.se);HH; \n\t\trea[all.fin(nd)][col[nd]].erase(nd);\n\t\tans[t]=ask(nd);\n\t}\n\tfo(i,1,q) cout<<ans[i]<<'\\n';\n}\n\nvoid file(){\n\tfreopen(\"chess5.in\",\"r\",stdin);\n\tfreopen(\".out\",\"w\",stdout);\n}\n\nsigned main(){\n//\tfile();\n\tint T=read();\n\twhile(T--) solve();\n\treturn 0;\n}\n}\n/*\n-------------------------------------------------\n*/\n\n\n\n\n\n\n\n\n\n\nsigned main(){re vectorwyx::main();}\n```\n\n\n\n",
        "postTime": 1674465179,
        "uid": 238408,
        "name": "vectorwyx",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7963 [NOIP2021] \u68cb\u5c40"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a\u7ebf\u6bb5\u6811\u5408\u5e76\n\n\u5148\u8003\u8651\u6ca1\u6709\u5403\u5b50\u7684\u60c5\u51b5\uff08\u5373 $lv_i = q - i + 1$\uff09\u3002\n\n\u5bf9\u4e8e\u4e92\u901a\u9053\u8def\uff0c\u6ce8\u610f\u5230\u5176\u8fde\u63a5\u7684\u4e3a\u4e00\u4e2a\u6ca1\u6709\u68cb\u5b50\u7684\u8fde\u901a\u5757\uff0c\u800c\u6bcf\u6b21\u6dfb\u52a0\u68cb\u5b50\u76f8\u5f53\u4e8e\u5220\u8fb9\uff0c\u4e8e\u662f\u8003\u8651\u5012\u8fc7\u6765\uff0c\u6539\u5220\u8fb9\u4e3a\u52a0\u8fb9\uff0c\u80fd\u901a\u8fc7\u4e92\u901a\u9053\u8def\u5230\u8fbe\u7684\u70b9\u6570\u5373\u4e3a\u8fde\u901a\u5757\u5927\u5c0f $- 1$\uff08\u56e0\u4e3a\u4e0d\u5305\u62ec\u8fd9\u4e2a\u68cb\u5b50\u81ea\u5df1\uff09\u3002\n\n\u5bf9\u4e8e\u76f4\u884c\u9053\u8def\uff0c\u6ce8\u610f\u5230\u5176\u8fde\u63a5\u7684\u4e00\u5b9a\u4e3a\u884c\u5217\u65b9\u5411\u7684\u56db\u4e2a\u8fde\u901a\u5757\uff0c\u4e8e\u662f\u5148\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u9884\u5904\u7406\u53ea\u8d70\u76f4\u884c\u9053\u8def\u9879\u56db\u4e2a\u65b9\u5411\u5206\u522b\u80fd\u5230\u54ea\u4e2a\u5730\u65b9\uff0c\u518d\u5bf9\u6bcf\u884c\u6bcf\u5217\u7528\u4e00\u4e2a set \u7ef4\u62a4\u4e0d\u5305\u62ec\u68cb\u5b50\u7684\u8fde\u901a\u5757\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u6837\u4f1a\u7b97\u91cd\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u67d0\u4e9b\u4f4d\u7f6e\u4e92\u901a\u9053\u8def\u548c\u76f4\u884c\u9053\u8def\u90fd\u53ef\u4ee5\u5230\u8fbe\uff0c\u4e8e\u662f\u8003\u8651\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u7528\u4e24\u68f5\uff08\u56e0\u4e3a\u4f1a\u67e5\u8be2\u6a2a\u7ad6\u4e24\u4e2a\u65b9\u5411\uff09\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fde\u901a\u5757\u4e2d\u6709\u54ea\u4e9b\u70b9\uff0c\u7b97\u76f4\u884c\u9053\u8def\u65f6\u51cf\u53bb\u4e92\u901a\u9053\u8def\u4e5f\u80fd\u5230\u8fbe\u7684\u70b9\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u666e\u901a\u9053\u8def\uff0c\u679a\u4e3e\u56db\u4e2a\u65b9\u5411\uff0c\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u666e\u901a\u9053\u8def\u5230\u8fbe\u4e14\u4e92\u901a\u9053\u8def\u4e0d\u80fd\u5230\u8fbe\uff0c\u628a\u7b54\u6848\u52a0\u4e00\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6709\u5403\u5b50\u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u4e92\u901a\u9053\u8def\uff0c\u6ce8\u610f\u5230\u5f53\u524d\u68cb\u5b50\u53ef\u80fd\u5403\u7684\u68cb\u5b50\u4e00\u5b9a\u662f\u8fde\u901a\u5757\u5468\u56f4\u7684\u4e00\u4e9b\u989c\u8272\u4e0e\u4e4b\u4e0d\u540c\u7684\u68cb\u5b50\uff0c\u4e8e\u662f\u8003\u8651\u518d\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u5f00\u4e24\u68f5\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fde\u901a\u5757\u5468\u56f4\u4e24\u79cd\u989c\u8272\u7684\u68cb\u5b50\uff0c\u67e5\u8be2\u989c\u8272\u4e0e\u81ea\u5df1\u4e0d\u540c\u4e14\u7b49\u7ea7\u4e0d\u9ad8\u4e8e\u81ea\u5df1\u7684\u68cb\u5b50\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u6837\u4f1a\u5728\u5408\u5e76\u65f6\u7b97\u91cd\uff0c\u56e0\u4e3a\u4e24\u4e2a\u8fde\u901a\u5757\u53ef\u80fd\u5171\u4eab\u67d0\u4e9b\u5728\u5b83\u4eec\u5468\u56f4\u7684\u68cb\u5b50\uff0c\u800c\u7531\u4e8e\u68cb\u5b50\u7b49\u7ea7\u5e76\u975e\u4e92\u4e0d\u76f8\u540c\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u5408\u5e76\u662f\u76f4\u63a5\u76f8\u52a0\u6216\u53d6 $\\max$\u3002\u6240\u4ee5\u8003\u8651\u66f4\u6539\u68cb\u5b50\u7b49\u7ea7\u4f7f\u5176\u4e92\u4e0d\u76f8\u540c\uff0c\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u5148\u6309\u672c\u6765\u7684\u7b49\u7ea7\u6392\u5e8f\uff0c\u76f8\u540c\u65f6\u518d\u6309\u51fa\u73b0\u65f6\u95f4\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u76f4\u884c\u9053\u8def\uff0c\u6ce8\u610f\u5230\u5176\u6700\u5927\u53ef\u8fbe\u533a\u95f4\u5916\u56f4\u7684\u56db\u4e2a\u8282\u70b9\u4e5f\u9700\u8981\u8003\u8651\uff0c\u8fd9\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u8fd9\u4e2a\u70b9\u80fd\u4e0d\u80fd\u901a\u8fc7\u4e92\u901a\u9053\u8def\u5230\u8fbe\u3002\n\n\u5bf9\u4e8e\u666e\u901a\u9053\u8def\uff0c\u4e0e\u76f4\u884c\u9053\u8def\u7684\u64cd\u4f5c\u57fa\u672c\u76f8\u540c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(T (nm + q) (\\log nm + \\log q))$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <algorithm>\n#include <set>\n#include <vector>\n#include <cstdio>\n\nusing namespace std;\n\ntypedef struct {\n\tint ls;\n\tint rs;\n\tint cnt;\n} Node;\n\nconst int N = 2e5 + 7, M = 2 + 7, K = 1e5 + 7, P = 4, Q = 1.52e7 + 7;\nint id;\nint dsu_root[N], seg_root1[N], seg_root2[N], seg_root3[N], seg_root4[N][M], size[N], x[K], y[K], dx[P + 7] = {0, -1, 0, 0, 1}, dy[P + 7] = {0, 0, -1, 1, 0}, ans[K];\nNode tree[Q];\npair<int, int> pr[K];\nset<int> s1[K], s2[K];\nvector<int> v1[K], v2[K], v3[K], v4[K], v5[K], v6[K], v7[K], v8[K], v9[K], v10[K];\n\ninline int f(int x, int y, int n){\n\treturn n * (x - 1) + y;\n}\n\ninline void init(int n, int m){\n\tint mi = m + 1, sz = n * m;\n\tid = 0;\n\tfor (register int i = 1; i <= n; i++){\n\t\tv1[i].resize(mi);\n\t\tv2[i].resize(mi);\n\t\tv3[i].resize(m);\n\t\tv4[i].resize(mi);\n\t\tv5[i].resize(mi);\n\t\tv6[i].resize(mi);\n\t\tv7[i].resize(mi);\n\t\tv8[i].resize(mi);\n\t\tv9[i].clear();\n\t\tv9[i].resize(mi);\n\t\tv10[i].clear();\n\t\tv10[i].resize(mi);\n\t\ts1[i].clear();\n\t\tfor (register int j = 1; j <= m; j++){\n\t\t\tv1[i][j] = f(i, j, m);\n\t\t\tv2[i][j] = f(j, i, n);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\ts2[i].clear();\n\t}\n\tfor (register int i = 1; i <= sz; i++){\n\t\tdsu_root[i] = i;\n\t\tseg_root1[i] = seg_root2[i] = seg_root3[i] = seg_root4[i][1] = seg_root4[i][2] = 0;\n\t\tsize[i] = 1;\n\t}\n}\n\ninline int read(){\n\tint ans = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9'){\n\t\tans = ans * 10 + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn ans;\n}\n\ninline int read_one(){\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\treturn ch - '0';\n}\n\ninline int get_road_type(int x, int y, int dx, int dy){\n\tif (dx == -1) return v4[x - 1][y];\n\tif (dx == 0){\n\t\tif (dy == -1) return v3[x][y - 1];\n\t\treturn v3[x][y];\n\t}\n\treturn v4[x][y];\n}\n\ninline void update(int x){\n\ttree[x].cnt = tree[tree[x].ls].cnt + tree[tree[x].rs].cnt;\n}\n\nvoid seg_insert(int &x, int l, int r, int pos){\n\tif (x == 0){\n\t\tx = ++id;\n\t\ttree[x].ls = tree[x].rs = 0;\n\t}\n\tif (l == r){\n\t\ttree[x].cnt = 1;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid){\n\t\tseg_insert(tree[x].ls, l, mid, pos);\n\t} else {\n\t\tseg_insert(tree[x].rs, mid + 1, r, pos);\n\t}\n\tupdate(x);\n}\n\nint get_root(int x){\n\tif (dsu_root[x] == x) return x;\n\treturn dsu_root[x] = get_root(dsu_root[x]);\n}\n\nint seg_merge(int x, int y, int l, int r){\n\tif (x == 0) return y;\n\tif (y == 0) return x;\n\tif (l == r){\n\t\ttree[x].cnt = max(tree[x].cnt, tree[y].cnt);\n\t\treturn x;\n\t}\n\tint mid = (l + r) >> 1;\n\ttree[x].ls = seg_merge(tree[x].ls, tree[y].ls, l, mid);\n\ttree[x].rs = seg_merge(tree[x].rs, tree[y].rs, mid + 1, r);\n\tupdate(x);\n\treturn x;\n}\n\ninline void dsu_merge(int x, int y, int n, int m){\n\tint x_root = get_root(x), y_root = get_root(y);\n\tif (x_root != y_root){\n\t\tdsu_root[x_root] = y_root;\n\t\tseg_root1[y_root] = seg_merge(seg_root1[y_root], seg_root1[x_root], 1, n);\n\t\tseg_root2[y_root] = seg_merge(seg_root2[y_root], seg_root2[x_root], 1, n);\n\t\tseg_root3[y_root] = seg_merge(seg_root3[y_root], seg_root3[x_root], 1, n);\n\t\tseg_root4[y_root][1] = seg_merge(seg_root4[y_root][1], seg_root4[x_root][1], 1, m);\n\t\tseg_root4[y_root][2] = seg_merge(seg_root4[y_root][2], seg_root4[x_root][2], 1, m);\n\t\tsize[y_root] += size[x_root];\n\t}\n}\n\nvoid seg_erase(int x, int l, int r, int pos){\n\tif (l == r){\n\t\ttree[x].cnt = 0;\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid){\n\t\tseg_erase(tree[x].ls, l, mid, pos);\n\t} else {\n\t\tseg_erase(tree[x].rs, mid + 1, r, pos);\n\t}\n\tupdate(x);\n}\n\ninline void chess_erase(int x, int y, int n, int m, int k){\n\tint size = n * m;\n\ts1[x].erase(y);\n\ts2[y].erase(x);\n\tfor (register int i = 1; i <= P; i++){\n\t\tint new_x = x + dx[i], new_y = y + dy[i];\n\t\tif (new_x >= 1 && new_x <= n && new_y >= 1 && new_y <= m && get_road_type(x, y, dx[i], dy[i]) == 3 && v9[new_x][new_y] == 0){\n\t\t\tint cur_root = get_root(v1[new_x][new_y]);\n\t\t\tseg_erase(seg_root3[cur_root], 1, size, v1[x][y]);\n\t\t\tseg_erase(seg_root4[cur_root][v9[x][y]], 1, k, v10[x][y]);\n\t\t}\n\t}\n}\n\ninline void blank_insert(int x, int y, int n, int m, int k){\n\tint cur_root = get_root(v1[x][y]), size = n * m;\n\tseg_insert(seg_root1[cur_root], 1, size, v1[x][y]);\n\tseg_insert(seg_root2[cur_root], 1, size, v2[x][y]);\n\tfor (register int i = 1; i <= P; i++){\n\t\tint new_x = x + dx[i], new_y = y + dy[i];\n\t\tif (new_x >= 1 && new_x <= n && new_y >= 1 && new_y <= m && get_road_type(x, y, dx[i], dy[i]) == 3){\n\t\t\tif (v9[new_x][new_y] == 0){\n\t\t\t\tdsu_merge(v1[x][y], v1[new_x][new_y], size, k);\n\t\t\t} else {\n\t\t\t\tcur_root = get_root(v1[x][y]);\n\t\t\t\tseg_insert(seg_root3[cur_root], 1, size, v1[new_x][new_y]);\n\t\t\t\tseg_insert(seg_root4[cur_root][v9[new_x][new_y]], 1, k, v10[new_x][new_y]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint get_val(int x, int l, int r, int pos){\n\tif (x == 0) return 0;\n\tif (l == r) return tree[x].cnt;\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) return get_val(tree[x].ls, l, mid, pos);\n\treturn get_val(tree[x].rs, mid + 1, r, pos);\n}\n\nint get_sum(int x, int L, int R, int l, int r){\n\tif (x == 0) return 0;\n\tif (l <= L && R <= r) return tree[x].cnt;\n\tint mid = (L + R) >> 1, ans = 0;\n\tif (l <= mid) ans = get_sum(tree[x].ls, L, mid, l, r);\n\tif (r > mid) ans += get_sum(tree[x].rs, mid + 1, R, l, r);\n\treturn ans;\n}\n\ninline bool check(int pos, int a, int b){\n\treturn v9[a][b] == 0 || (v9[x[pos]][y[pos]] != v9[a][b] && v10[x[pos]][y[pos]] >= v10[a][b]);\n}\n\nint main(){\n\tint t = read();\n\tfor (register int i = 1; i <= t; i++){\n\t\tint n = read(), m = read(), q = read(), sz = n * m;\n\t\tinit(n, m);\n\t\tfor (register int j = 1; j <= n; j++){\n\t\t\tfor (register int k = 1; k < m; k++){\n\t\t\t\tv3[j][k] = read_one();\n\t\t\t}\n\t\t}\n\t\tfor (register int j = 1; j < n; j++){\n\t\t\tfor (register int k = 1; k <= m; k++){\n\t\t\t\tv4[j][k] = read_one();\n\t\t\t}\n\t\t}\n\t\tfor (register int j = n; j >= 1; j--){\n\t\t\tfor (register int k = m; k >= 1; k--){\n\t\t\t\tif (k == m || get_road_type(j, k, 0, 1) != 2){\n\t\t\t\t\tv5[j][k] = k;\n\t\t\t\t} else {\n\t\t\t\t\tv5[j][k] = v5[j][k + 1];\n\t\t\t\t}\n\t\t\t\tif (j == n || get_road_type(j, k, 1, 0) != 2){\n\t\t\t\t\tv6[j][k] = j;\n\t\t\t\t} else {\n\t\t\t\t\tv6[j][k] = v6[j + 1][k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (register int j = 1; j <= n; j++){\n\t\t\tfor (register int k = 1; k <= m; k++){\n\t\t\t\tif (k == 1 || get_road_type(j, k, 0, -1) != 2){\n\t\t\t\t\tv7[j][k] = k;\n\t\t\t\t} else {\n\t\t\t\t\tv7[j][k] = v7[j][k - 1];\n\t\t\t\t}\n\t\t\t\tif (j == 1 || get_road_type(j, k, -1, 0) != 2){\n\t\t\t\t\tv8[j][k] = j;\n\t\t\t\t} else {\n\t\t\t\t\tv8[j][k] = v8[j - 1][k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (register int j = 1; j <= q; j++){\n\t\t\tint col = read() + 1, lv = read();\n\t\t\tx[j] = read();\n\t\t\ty[j] = read();\n\t\t\tv9[x[j]][y[j]] = col;\n\t\t\tpr[j] = make_pair(lv, j);\n\t\t\ts1[x[j]].insert(y[j]);\n\t\t\ts2[y[j]].insert(x[j]);\n\t\t}\n\t\tsort(pr + 1, pr + q + 1);\n\t\tfor (register int j = 1; j <= q; j++){\n\t\t\tint pos = pr[j].second;\n\t\t\tv10[x[pos]][y[pos]] = j;\n\t\t}\n\t\tfor (register int j = 1; j <= n; j++){\n\t\t\tfor (register int k = 1; k <= m; k++){\n\t\t\t\tif (v9[j][k] == 0) blank_insert(j, k, n, m, q);\n\t\t\t}\n\t\t}\n\t\tfor (register int j = q; j >= 1; j--){\n\t\t\tint cur_root, pos;\n\t\t\tset<int>::iterator it;\n\t\t\tchess_erase(x[j], y[j], n, m, q);\n\t\t\tblank_insert(x[j], y[j], n, m, q);\n\t\t\tcur_root = get_root(v1[x[j]][y[j]]);\n\t\t\tans[j] = 0;\n\t\t\tfor (register int k = 1; k <= P; k++){\n\t\t\t\tint new_x = x[j] + dx[k], new_y = y[j] + dy[k];\n\t\t\t\tif (new_x >= 1 && new_x <= n && new_y >= 1 && new_y <= m && get_road_type(x[j], y[j], dx[k], dy[k]) == 1 && check(j, new_x, new_y) && get_val(seg_root1[cur_root], 1, sz, v1[new_x][new_y]) == 0 && get_val(seg_root3[cur_root], 1, sz, v1[new_x][new_y]) == 0) ans[j]++;\n\t\t\t}\n\t\t\tit = s1[x[j]].upper_bound(y[j]);\n\t\t\tpos = v5[x[j]][y[j]];\n\t\t\tif (it != s1[x[j]].end()) pos = min(pos, *it - 1);\n\t\t\tif (pos > y[j]) ans[j] += (pos - y[j]) - get_sum(seg_root1[cur_root], 1, sz, v1[x[j]][y[j] + 1], v1[x[j]][pos]);\n\t\t\tif (pos < v5[x[j]][y[j]] && check(j, x[j], pos + 1) && get_val(seg_root3[cur_root], 1, sz, v1[x[j]][pos + 1]) == 0) ans[j]++;\n\t\t\tpos = v7[x[j]][y[j]];\n\t\t\tif (it != s1[x[j]].begin()) pos = max(pos, *(--it) + 1);\n\t\t\tif (pos < y[j]) ans[j] += (y[j] - pos) - get_sum(seg_root1[cur_root], 1, sz, v1[x[j]][pos], v1[x[j]][y[j] - 1]);\n\t\t\tif (pos > v7[x[j]][y[j]] && check(j, x[j], pos - 1) && get_val(seg_root3[cur_root], 1, sz, v1[x[j]][pos - 1]) == 0) ans[j]++;\n\t\t\tit = s2[y[j]].upper_bound(x[j]);\n\t\t\tpos = v6[x[j]][y[j]];\n\t\t\tif (it != s2[y[j]].end()) pos = min(pos, *it - 1);\n\t\t\tif (pos > x[j]) ans[j] += (pos - x[j]) - get_sum(seg_root2[cur_root], 1, sz, v2[x[j] + 1][y[j]], v2[pos][y[j]]);\n\t\t\tif (pos < v6[x[j]][y[j]] && check(j, pos + 1, y[j]) && get_val(seg_root3[cur_root], 1, sz, v1[pos + 1][y[j]]) == 0) ans[j]++;\n\t\t\tpos = v8[x[j]][y[j]];\n\t\t\tif (it != s2[y[j]].begin()) pos = max(pos, *(--it) + 1);\n\t\t\tif (pos < x[j]) ans[j] += (x[j] - pos) - get_sum(seg_root2[cur_root], 1, sz, v2[pos][y[j]], v2[x[j] - 1][y[j]]);\n\t\t\tif (pos > v8[x[j]][y[j]] && check(j, pos - 1, y[j]) && get_val(seg_root3[cur_root], 1, sz, v1[pos - 1][y[j]]) == 0) ans[j]++;\n\t\t\tans[j] += size[cur_root] + get_sum(seg_root4[cur_root][3 - v9[x[j]][y[j]]], 1, q, 1, v10[x[j]][y[j]]) - 1;\n\t\t\tv9[x[j]][y[j]] = v10[x[j]][y[j]] = 0;\n\t\t}\n\t\tfor (register int j = 1; j <= q; j++){\n\t\t\tprintf(\"%d\\n\", ans[j]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1660273866,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7963 \u3010[NOIP2021] \u68cb\u5c40\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u590d\u6742\u5ea6\u8f83\u52a3\uff0c\u4f46\u5199\u8d77\u6765\u6ca1\u90a3\u4e48\u96be\u53d7\u7684\u505a\u6cd5\u3002\n\n\u5206\u6790\u590d\u6742\u5ea6\u65f6\uff0c\u8bb0 $S=n\\times m$\uff0c\u5373\u68cb\u76d8\u603b\u70b9\u6570\u3002\n\n\u9898\u76ee\u8ba9\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u8fde\u901a\u5757\u5927\u5c0f\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u5e26\u5220\u3002\u8fd9\u4e1c\u897f\u5220\u9664\u770b\u8d77\u6765\u5f88\u4e0d\u53ef\u505a\uff0c\u6240\u4ee5\u65f6\u5149\u5012\u6d41\u8f6c\u5316\u4e3a\u52a0\u70b9\u3002\u7136\u540e\u5206\u56db\u6b65\u5904\u7406\u3002\n\n### \u666e\u901a\u9053\u8def\n\n\u4e0d\u96be\u53d1\u73b0\u53ea\u80fd\u8d70\u4e00\u6b65\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u68cb\u5b50\u66b4\u529b\u5904\u7406\u5c31\u597d\u3002\n\n### \u76f4\u884c\u9053\u8def\n\n\u4e0d\u96be\u53d1\u73b0\u8d70\u76f4\u884c\u9053\u8def\u80fd\u5230\u7684\u4e00\u5b9a\u662f\u7ad6\u76f4\u6216\u6c34\u5e73\u7684\u4e00\u6bb5\uff0c\u5982\u679c\u9047\u5230\u68cb\u5b50\u7684\u8bdd\u5355\u72ec\u5224\u4e00\u4e0b\u80fd\u4e0d\u80fd\u5403\u5c31\u597d\u3002\u7b49\u4ef7\u4e8e\u5bf9\u6bcf\u4e00\u884c\u5217\u7ef4\u62a4\u82e5\u5e72\u533a\u95f4\uff0c\u627e\u4e00\u4e2a\u4f4d\u7f6e\u5728\u533a\u95f4\u5185\u5de6\u53f3\u7b2c\u4e00\u4e2a\u969c\u788d\u7269\u6216\u533a\u95f4\u7ec8\u70b9\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e24\u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u51fa\u6765\u3002\n\n\u7136\u540e\u6bcf\u6b21\u64cd\u4f5c\uff0c**\u7ef4\u62a4\u8be5\u4f4d\u7f6e\u5411\u56db\u4e2a\u65b9\u5411\u7edf\u8ba1\u7b54\u6848\u7684\u957f\u5ea6**\uff0c\u4f5c\u7528\u8fc7\u4f1a\u8bf4\u660e\u3002\n\n### \u4e92\u901a\u9053\u8def\n\n\u4e92\u901a\u9053\u8def\u8d70\u51fa\u6765\u7684\u5e94\u8be5\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u7531\u4e92\u901a\u9053\u8def\u6784\u6210\u7684\u8fde\u901a\u5757\uff0c\u6211\u4eec\u5c06\u5176\u67d3\u8272\u3002\n\n\u4e0d\u5403\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\u67d0\u79cd\u989c\u8272\u7684\u6570\u91cf\uff0c\u76f4\u63a5\u7ef4\u62a4\u5c31\u597d\u3002\n\n\u7ef4\u62a4\u6bcf\u79cd\u989c\u8272\u5757\u6cbf\u4e92\u901a\u9053\u8def\u80fd\u8d70\u5230\u7684\u68cb\u5b50\uff0c\u5bf9\u9ed1\u767d\u5206\u522b\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b49\u7ea7\u7684\u524d\u7f00\u548c\u5373\u53ef\u5904\u7406\u5403\u5b50\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u68cb\u5b50\u6570\u4e0e\u8fde\u901a\u5757\u70b9\u6570\u6700\u574f\u60c5\u51b5\u4e0b\u5927\u81f4\u540c\u9636\uff0c\u5927\u591a\u65f6\u5019\u8fdc\u5c0f\u4e8e\u8fde\u901a\u5757\u70b9\u6570\uff0c\u6240\u4ee5\u5408\u5e76\u65f6\u5019\u5206\u522b dsu \u5c31\u597d\uff0c\u4f7f\u7528 map \u53bb\u91cd\uff0c\u590d\u6742\u5ea6 $O(S\\log^2S)$\u3002\n\n### \u53bb\u91cd\n\n\u76f4\u884c\u548c\u666e\u901a\u80af\u5b9a\u4e0d\u4f1a\u91cd\u590d\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u5bf9\u8fd9\u4e24\u7c7b\u7ef4\u62a4\u4e86\u5b83\u4eec\u80fd\u8d70\u5230\u7684\u533a\u95f4\u3002\u53ea\u9700\u8981\u8003\u8651\u5b83\u4eec\u548c\u4e92\u901a\u7684\u91cd\u590d\u3002\n\n\u8bb0\u65b0\u52a0\u5165\u7684\u68cb\u5b50\u5728\u6b64\u65f6\u6240\u5728\u4e92\u901a\u8fde\u901a\u5757\u7684\u989c\u8272\u4e3a $c$\u3002\n\n#### \u5403\u5b50\n\n\u7b49\u4ef7\u4e8e\u95ee\u8be5\u65f6\u523b\u4e0b\u88ab\u5403\u7684\u68cb\u5b50\u662f\u5426\u5728 $c$ \u7684\u76f8\u90bb\u5757\u4e2d\u3002\n\n\u76f4\u63a5\u7528\u7ef4\u62a4\u7684 map \u67e5\u8be2\u5373\u53ef\u3002\n\n#### \u884c\u8d70\n\n\u7b49\u4ef7\u4e8e\u8be5\u65f6\u523b\u4e0b\uff0c\u95ee\u56db\u6b21\u67d0\u6bb5\u533a\u95f4\u91cc\u989c\u8272\u4e3a $c$ \u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\u4e4d\u4e00\u770b\u8fd9\u4e1c\u897f\u5f88\u4e0d\u53ef\u505a\uff0c\u6bd5\u7adf\u4e3b\u5e2d\u6811\u4e0d\u652f\u6301\u5e26\u4fee\u3002\n\n\u9996\u5148\u8981\u660e\u786e dsu \u5bf9\u989c\u8272\u7684\u4fee\u6539\u6b21\u6570\u4e3a $O(n\\log n)$ \u7ea7\u522b\u3002\n\n\u53e6\u4e00\u4e2a\u5f88\u597d\u7684\u4e8b\u60c5\u662f\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u3002\n\n\u79bb\u7ebf\uff0c\u5c06 $q$ \u6b21\u8be2\u95ee\u6309\u989c\u8272\u5206\u7ec4\uff0c\u6bcf\u6b21\u5904\u7406\u8be2\u95ee\u989c\u8272\u76f8\u540c\u7684\u7ec4\u3002\n\n\u90a3\u4e48\u4fee\u6539\u5c31\u53d8\u6210\u51e0\u7c7b\uff1a$0$ \u53d8 $0$\u3001$0$ \u53d8 $1$ \u548c $1$ \u53d8 $0$\u3002\n\n$0$ \u53d8 $0$ \u7684\u4fee\u6539\u6211\u4eec\u9700\u8981\u5ffd\u7565\u6389\uff0c\u5bf9\u4e8e\u5269\u4e0b\u7684\uff0c\u7ad6\u76f4\u65b9\u5411\u7684\u8be2\u95ee\u5f00 $m$ \u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e9b\u4fee\u6539\u5373\u53ef\uff0c\u6c34\u5e73\u65b9\u5411\u540c\u7406\u3002\n\n\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c$1$ \u53d8 $0$ \u7684\u64cd\u4f5c\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u56e0\u4e3a\u5982\u679c\u4f4d\u7f6e $(x,y)$ \u4ee5 $c$ \u989c\u8272\u5bf9\u68cb\u5b50\u4f4d\u7f6e $p$ \u4ea7\u751f\u8d21\u732e\uff0c\u90a3\u4e48 $(x,y)$ \u989c\u8272\u6539\u53d8\u7684\u65f6\u5019 $p$ \u4e5f\u4e00\u5b9a\u968f\u4e4b\u6539\u53d8\uff0c\u4e5f\u5c31\u662f\u5b83\u80fd\u4ea7\u751f\u7684\u8d21\u732e\u90fd\u5df2\u7ecf\u7b97\u8fc7\u4e86\u3002\n\n\u6bcf\u4e2a\u4fee\u6539\u53ea\u4f1a\u751f\u6548\u4e00\u6b21\uff0c\u590d\u6742\u5ea6 $O(S\\log S\\log(n+m))$\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(S\\log^2S)$\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\uff1a\n\n1. \u4e00\u7c7b\u8fb9\u5904\u7406\u5b8c\u540e\uff0c\u505a\u4e8c\u7c7b\u8fb9\u7684\u65f6\u5019\u6ce8\u610f\u4e0d\u8981\u518d\u5f80\u4e00\u7c7b\u8fb9\u7684\u65b9\u5411\u66f4\u65b0\u7b54\u6848\u3002\n2. \u53bb\u91cd\u90e8\u5206\u7ebf\u6bb5\u6811\u6e05\u7a7a\u7684\u65f6\u5019 root \u4e0d\u80fd\u66b4\u529b\u5168\u6e05\uff0c\u8981\u8bb0\u5f55\u54ea\u4e9b\u4f4d\u7f6e root \u88ab\u7528\u8fc7\u5355\u72ec\u6e05\u7406\u8fd9\u4e9b\u3002\n3. \u4e0a\u4e00\u6761\u8bb0\u5f55\u4f4d\u7f6e\u7684\u65f6\u5019 umap \u53bb\u91cd\u4f1a\u56e0\u4e3a\u795e\u79d8\u529b\u91cf\u88ab\u5361\u3002\n\n\u5904\u7406\u7b2c\u4e8c\u7c7b\u8fb9\u5199\u7684\u975e\u5e38\u7c97\u7cd9\uff0c\u5c24\u5176\u8868\u73b0\u5728\u6c34\u5e73\u7ad6\u76f4\u4e24\u4e2a\u65b9\u5411\u5206\u522b\u5199\u4e86\u4e00\u4e2a\u51fd\u6570\u3002\n\n\u53bb\u6389\u6ce8\u91ca\u548c\u57fa\u672c\u590d\u5236\u7c98\u8d34\u7684\u90e8\u5206\u540e\u5e94\u8be5\u662f AC \u4ee3\u7801\u76f8\u5bf9\u8f83\u77ed\u7684\uff086.5k\uff09\u3002\n\n\u82b1\u7d6e\uff1a\u8fd9\u4efd\u4ee3\u7801\u5305\u542b\u6ce8\u91ca\u540e\u6070\u597d $400$ \u884c\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<map>\n#define rz(x) x.resize(0)\n#define pb(x) x.push_back(0)\n#define ls(k) tr[k].ls\n#define rs(k) tr[k].rs\nconst int fx[4]={-1,1,0,0};\nconst int fy[4]={0,0,-1,1};\n//0 \u4e0a 1 \u4e0b 2 \u5de6 3 \u53f3 \nusing namespace std;\nstruct cgs{\n\tint x,y,tms;\n};\n//\u4fee\u6539\u4f4d\u7f6e\u3001\u65f6\u95f4\u3002 \nstruct qz{\n\tint col,lv;\n\tint x,y;\n}a[100001];\nstruct rc{\n\tint col,id;\n}h[100001];\nbool operator<(rc x,rc y){return x.col==y.col?x.id>y.id:x.col>y.col;}\n//\u7b2c\u4e09\u7c7b\u8fb9\u7684\u53bb\u91cd\uff0c\u68cb\u5b50\u7f16\u53f7\u53ca\u989c\u8272 \nvector<int>t[4][200001];\n//\u4f4d\u7f6e (x,y) \u5f80\u56db\u4e2a\u65b9\u5411\u7684\u8fde\u8fb9 \nvector<int>f[4],cz[4];\n//\u7b2c q \u6b21\u8be2\u95ee\u5f80\u56db\u65b9\u5411\u53ea\u8d70 1,2 \u7c7b\u8fb9\u80fd\u5230\u54ea \n//\u7b2c q \u6b21\u8be2\u95ee\u5f80\u56db\u65b9\u5411\u5403\u5b50\u662f\u8c01\uff08\u6ca1\u6709\u4e3a 0\uff09 \nvector<int>mp[4][200001];\n//\u4ece (x,y) \u5f80\u56db\u65b9\u5411\u53ea\u8d70\u76f4\u884c\u8fb9\u6700\u8fdc\u80fd\u5230\u54ea \nvector<cgs>g[200001];\n//\u989c\u8272 i \u4ece 0 \u53d8 1 \u7684\u4fee\u6539 \nvector<int>qp[200001],qc[200001];\n//\u68cb\u76d8\u68cb\u5b50\u72b6\u6001\uff1b\u68cb\u76d8\u67d3\u8272\u72b6\u6001 \nint ccz[200001],clo;\n//\u6bcf\u79cd\u989c\u8272\u70b9\u6570\uff1b\u67d3\u4e86\u51e0\u79cd\u989c\u8272 \nmap<int,bool>xl[200001];\n//\u989c\u8272 i \u7684\u76f8\u90bb\u68cb\u5b50\nint n,m,q,ans[100001];\nint rt[400001],cnt;\nstruct tree{\n\tint ls,rs,sum;\n}tr[50000001];\nnamespace SGT{\n\tvoid insert(int &k,int l,int r,int x){\n\t\tif(!k)k=++cnt;\n\t\ttr[k].sum++;\n\t\tif(l==r)return;\n\t\tint mid=l+r>>1;\n\t\tif(x<=mid)insert(ls(k),l,mid,x);\n\t\telse insert(rs(k),mid+1,r,x);\n\t}\n\tvoid change(int k,int l,int r,int x){\n\t\ttr[k].sum--;\n\t\tif(l==r)return;\n\t\tint mid=l+r>>1;\n\t\tif(x<=mid)change(ls(k),l,mid,x);\n\t\telse change(rs(k),mid+1,r,x);\n\t}\n\tint qsum(int k,int l,int r,int x,int y){\n\t\tif(!k)return 0;\n\t\tif(l>=x&&r<=y)return tr[k].sum;\n\t\tint mid=l+r>>1,res=0;\n\t\tif(x<=mid)res+=qsum(ls(k),l,mid,x,y);\n\t\tif(mid<y)res+=qsum(rs(k),mid+1,r,x,y);\n\t\treturn res;\n\t}\n\tvoid clr(){\n\t\tint i;\n\t\tfor(i=1;i<=cnt;i++)tr[i]={0,0,0};\n\t\tfor(i=0;i<=n*m*2;i++)rt[i]=0;\n\t\tcnt=0;\n\t}\n}\nusing namespace SGT;\n//\u7ebf\u6bb5\u6811\uff08\u5355\u70b9\u52a0\u51cf1 \u533a\u95f4 sum\uff09 \nnamespace prework{\n\tchar s[200002];\n\tvoid build(){\n\t\tint i,j,k;\n\t\tfor(i=0;i<4;i++)rz(f[i]),rz(cz[i]);\n\t\tfor(j=0;j<4;j++)for(i=0;i<=q;i++)pb(f[j]),pb(cz[j]);\n\t\tfor(i=1;i<=n||i<=m;i++){\n\t\t\tfor(j=0;j<4;j++)rz(t[j][i]),rz(mp[j][i]);\n\t\t\trz(qp[i]);rz(qc[i]);\n\t\t}\n\t\tfor(i=1;i<=n;i++){\n\t\t\tfor(j=0;j<4;j++)for(k=0;k<=m;k++)pb(t[j][i]),pb(mp[j][i]);\n\t\t\tfor(k=0;k<=m;k++)pb(qp[i]),pb(qc[i]);\n\t\t}\n\t\tclr();\n\t\tfor(i=1;i<=clo;i++)rz(g[i]),xl[i].clear(),ccz[i]=0;\n\t\tfor(i=1;i<=q;i++)ans[i]=0;\n\t\tclo=0;\n\t}\n\tvoid read(){\n\t\tint i,j;\n\t\tscanf(\"%d%d%d\",&n,&m,&q);\n\t\tbuild();\n\t\tfor(i=1;i<=n;i++){\n\t\t\tscanf(\"%s\",s+1);\n\t\t\tfor(j=1;j<m;j++){\n\t\t\t\tint x=s[j]-'0';\n\t\t\t\tt[2][i][j+1]=x;\n\t\t\t\tt[3][i][j]=x;\n\t\t\t}\n\t\t}\n\t\tfor(i=1;i<n;i++){\n\t\t\tscanf(\"%s\",s+1);\n\t\t\tfor(j=1;j<=m;j++){\n\t\t\t\tint x=s[j]-'0';\n\t\t\t\tt[0][i+1][j]=x;\n\t\t\t\tt[1][i][j]=x;\n\t\t\t}\n\t\t}\n\t\tfor(i=1;i<=q;i++)scanf(\"%d%d%d%d\",&a[i].col,&a[i].lv,&a[i].x,&a[i].y);\n\t\tfor(i=1;i<=n;i++){\n\t\t\tfor(j=1;j<=m;j++){\n\t\t\t\tif(t[0][i][j]==2)mp[0][i][j]=mp[0][i-1][j];\n\t\t\t\telse mp[0][i][j]=i;\n\t\t\t\tif(t[2][i][j]==2)mp[2][i][j]=mp[2][i][j-1];\n\t\t\t\telse mp[2][i][j]=j;\n\t\t\t}\n\t\t}\n\t\tfor(i=n;i;i--){\n\t\t\tfor(j=m;j;j--){\n\t\t\t\tif(t[1][i][j]==2)mp[1][i][j]=mp[1][i+1][j];\n\t\t\t\telse mp[1][i][j]=i;\n\t\t\t\tif(t[3][i][j]==2)mp[3][i][j]=mp[3][i][j+1];\n\t\t\t\telse mp[3][i][j]=j;\n\t\t\t}\n\t\t}\n\t}\n\tvoid init(){\n\t\t//\u8bfb\u5b8c\u540e\u987a\u624b\u628a 1 \u7c7b\u8fb9\u5904\u7406\u4e86 \n\t\tread();\n\t\tint i,j,k;\n\t\tfor(i=1;i<=q;i++){\n\t\t\tint x=a[i].x,y=a[i].y,col=a[i].col,lv=a[i].lv;\n\t\t\tfor(j=0;j<4;j++){\n\t\t\t\tif(t[j][x][y]!=1)continue;\n\t\t\t\tint d=qp[x+fx[j]][y+fy[j]];\n\t\t\t\tint np;\n\t\t\t\tif(j<2)np=x+fx[j];\n\t\t\t\telse np=y+fy[j];\n\t\t\t\tif(!d)f[j][i]=np,ans[i]++;\n\t\t\t\telse{\n\t\t\t\t\tnp-=fx[j]+fy[j];\n\t\t\t\t\tf[j][i]=np;\n\t\t\t\t\tif(a[d].col!=col&&a[d].lv<=lv)ans[i]++,cz[j][i]=d;\n\t\t\t\t}\n\t\t\t}\n\t\t\tqp[x][y]=i;\n\t\t}\n\t\tfor(i=1;i<=n;i++)for(j=1;j<=m;j++)qp[i][j]=0;\n\t}\n}\nnamespace type2{\n\tvoid solve01(){\n\t\t//\u7ad6\u76f4\u65b9\u5411\n\t\t//\u8fd9\u91cc\u5b9e\u73b0\u7684\u6bd4\u8f83\u7c97\u7cd9 \n\t\tclr();\n\t\tint i,j;\n\t\tfor(i=1;i<=q;i++){\n\t\t\tint x=a[i].x,y=a[i].y,col=a[i].col,lv=a[i].lv;\n\t\t\tint l=mp[0][x][y],r=x-1,res=x;\n\t\t\tif(t[0][x][y]!=1){\n\t\t\t\twhile(l<=r){\n\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\tif(qsum(rt[y],1,n,mid,x))l=mid+1;\n\t\t\t\t\telse r=mid-1,res=mid;\n\t\t\t\t}\n\t\t\t\tans[i]+=x-res;f[0][i]=res;\n\t\t\t\tif(res!=mp[0][x][y]){\n\t\t\t\t\tint d=qp[res-1][y];\n\t\t\t\t\tif(a[d].col!=col&&a[d].lv<=lv){\n\t\t\t\t\t\tans[i]++;\n\t\t\t\t\t\tcz[0][i]=d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(t[1][x][y]!=1){\n\t\t\t\tl=x+1,r=mp[1][x][y],res=x;\n\t\t\t\twhile(l<=r){\n\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\tif(qsum(rt[y],1,n,x,mid))r=mid-1;\n\t\t\t\t\telse l=mid+1,res=mid;\n\t\t\t\t}\n\t\t\t\tans[i]+=res-x;f[1][i]=res;\n\t\t\t\tif(res!=mp[1][x][y]){\n\t\t\t\t\tint d=qp[res+1][y];\n\t\t\t\t\tif(a[d].col!=col&&a[d].lv<=lv){\n\t\t\t\t\t\tans[i]++;\n\t\t\t\t\t\tcz[1][i]=d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinsert(rt[y],1,n,x);\n\t\t\tqp[x][y]=i; \n\t\t}\n\t\tfor(i=1;i<=n;i++)for(j=1;j<=m;j++)qp[i][j]=0;\n\t}\n\tvoid solve23(){\n\t\t//\u6c34\u5e73\u65b9\u5411\n\t\tclr();\n\t\tint i,j;\n\t\tfor(i=1;i<=q;i++){\n\t\t\tint x=a[i].x,y=a[i].y,col=a[i].col,lv=a[i].lv;\n\t\t\tint l=mp[2][x][y],r=y-1,res=y;\n\t\t\tif(t[2][x][y]!=1){\n\t\t\t\twhile(l<=r){\n\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\tif(qsum(rt[x],1,m,mid,y))l=mid+1;\n\t\t\t\t\telse r=mid-1,res=mid;\n\t\t\t\t}\n\t\t\t\tans[i]+=y-res;f[2][i]=res;\n\t\t\t\tif(res!=mp[2][x][y]){\n\t\t\t\t\tint d=qp[x][res-1];\n\t\t\t\t\tif(a[d].col!=col&&a[d].lv<=lv){\n\t\t\t\t\t\tans[i]++;\n\t\t\t\t\t\tcz[2][i]=d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tl=y+1,r=mp[3][x][y],res=y;\n\t\t\tif(t[3][x][y]!=1){\n\t\t\t\twhile(l<=r){\n\t\t\t\t\tint mid=l+r>>1;\n\t\t\t\t\tif(qsum(rt[x],1,m,y,mid))r=mid-1;\n\t\t\t\t\telse l=mid+1,res=mid;\n\t\t\t\t}\n\t\t\t\tans[i]+=res-y;f[3][i]=res;\n\t\t\t\tif(res!=mp[3][x][y]){\n\t\t\t\t\tint d=qp[x][res+1];\n\t\t\t\t\tif(a[d].col!=col&&a[d].lv<=lv){\n\t\t\t\t\t\tans[i]++;\n\t\t\t\t\t\tcz[3][i]=d;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinsert(rt[x],1,m,y);\n\t\t\tqp[x][y]=i;\n\t\t}\n\t\t//\u4e0d\u91cd\u7f6e\u4e86\uff0c\u4e00\u4f1a\u76f4\u63a5\u505a 3 \u7684\u521d\u59cb\u67d3\u8272\u3002 \n\t}\n\tvoid solve2(){\n\t\tsolve01();\n\t\tsolve23();\n\t\tclr();\n\t}\n}\nnamespace type3{\n\tvoid dfs(int x,int y,int cl,int op){\n\t\t//\u67d3\u8272\n\t\tif(qc[x][y]==cl)return;\n\t\t//\u8bbf\u95ee\u8fc7 \n\t\tif(qp[x][y]){\n\t\t\t//\u9047\u5230\u68cb\u5b50 \n\t\t\tint d=qp[x][y];\n\t\t\tif(!xl[cl][d]){\n\t\t\t\txl[cl][d]=1;\n\t\t\t\tinsert(rt[cl+a[d].col*n*m],1,n*m,a[d].lv);\n\t\t\t\t// 1-nm \u5b58\u7684\u662f\u767d\u5b50\u5728\u67d0\u989c\u8272\u91cc lv \u524d\u7f00\u548c \n\t\t\t\t// nm+1-2nm \u5b58\u7684\u662f\u9ed1\u5b50 \n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tg[cl].push_back({x,y,op});\n\t\tint rl=qc[x][y];\n\t\tif(rl&&ccz[rl]){\n\t\t\txl[rl].clear();\n\t\t\tccz[rl]=0;\n\t\t}\n\t\tqc[x][y]=cl;ccz[cl]++;\n\t\tint i;\n\t\tfor(i=0;i<4;i++){\n\t\t\tif(t[i][x][y]!=3)continue;\n\t\t\tdfs(x+fx[i],y+fy[i],cl,op);\n\t\t}\n\t}\n\tvoid merge(int d){\n\t\t//\u5220\u53bb d \u68cb\u5b50 \n\t\tint x=a[d].x,y=a[d].y;\n\t\tint mxz=0,mxc=0,i;\n\t\tbool nw=0; \n\t\tfor(i=0;i<4;i++){\n\t\t\tif(t[i][x][y]!=3)continue;\n\t\t\tint d=qc[x+fx[i]][y+fy[i]];\n\t\t\tif(ccz[d]>mxz)mxz=ccz[d],mxc=d;\n\t\t}\n\t\tqp[x][y]=0;\n\t\tif(!mxc)mxc=++clo,nw=1;\n\t\th[d]={mxc,d};\n\t\tdfs(x,y,mxc,d);\n\t\txl[mxc][d]=0;\n\t\tif(!nw)change(rt[mxc+a[d].col*n*m],1,n*m,a[d].lv);\n\t}\n\tvoid bld(){\n\t\t//\u5904\u7406\u51fa\u6700\u7ec8\u56fe \n\t\tint i,j;\n\t\tfor(i=1;i<=q;i++)qp[a[i].x][a[i].y]=i;\n\t\tfor(i=1;i<=n;i++)for(j=1;j<=m;j++)qc[i][j]=0;\n\t\tfor(i=1;i<=clo;i++)ccz[i]=0,xl[i].clear();\n\t\tclo=0;\n\t\tfor(i=1;i<=n;i++){\n\t\t\tfor(j=1;j<=m;j++){\n\t\t\t\tif(!qp[i][j]&&!qc[i][j])dfs(i,j,++clo,q+1);\n\t\t\t}\n\t\t}\n\t}\n\tvoid solve3(){\n\t\tint i,j;\n\t\tbld();\n\t\tfor(i=q;i;i--){\n\t\t\tint x=a[i].x,y=a[i].y,col=a[i].col,lv=a[i].lv;\n\t\t\tmerge(i);\n\t\t\tint lc=qc[x][y];\n\t\t\tans[i]+=ccz[lc]-1;\n\t\t\tans[i]+=qsum(rt[lc+(col^1)*n*m],1,n*m,1,lv);\n\t\t\tfor(j=0;j<4;j++){\n\t\t\t\tint x=cz[j][i];\n\t\t\t\tif(!x)continue;\n\t\t\t\tif(xl[lc][x])ans[i]--;\n\t\t\t}\n\t\t\t//\u53bb\u91cd-\u5403\u5b50 \n\t\t}\n\t\tclr();\n\t}\n}\nnamespace type4{\n\t//\u53bb\u91cd-\u884c\u8d70 \n\t//\u9996\u5148\u6392\u5e8f\u628a\u989c\u8272\u4e0d\u540c\u7684\u5206\u6bb5\n\t//\u540c\u79cd\u989c\u8272\u6309\u65f6\u95f4\u6233\u4ece\u5927\u5230\u5c0f\u5904\u7406\n\t//\u8fd9\u91cc\u6e05\u7ebf\u6bb5\u6811\u4e0d\u80fd\u66b4\u529b\u7684\u6e05 root \u4e86\n\t//\u5f00 vector \u5b58\u4e00\u4e0b\u6d89\u53ca\u5230\u7684 root \u4f4d\u7f6e\n\t//1-n \u5b58\u6c34\u5e73\u65b9\u5411\u4fee\u6539\uff0cn+1-m \u5b58\u7ad6\u76f4\u65b9\u5411\u4fee\u6539 \n\tvector<int>bz;\n\tbool usd[1000001];\n\tvoid solve4(){\n\t\tint i,j,k,lst=0;\n\t\tsort(h+1,h+q+1);\n\t\tfor(i=1;i<=q;i++){\n\t\t\tif(i!=q&&h[i].col==h[i+1].col)continue;\n\t\t\tint p=0,r=h[i].col;\n\t\t\tfor(j=0;j<bz.size();j++){\n\t\t\t\tint x=bz[j];\n\t\t\t\trt[x]=0;usd[x]=0;\n\t\t\t}\n\t\t\tfor(j=1;j<=cnt;j++)tr[j]={0,0,0};\n\t\t\tcnt=0;\n\t\t\tbz.resize(0);\n\t\t\tfor(j=lst+1;j<=i;j++){\n\t\t\t\twhile(p<g[r].size()){\n\t\t\t\t\tcgs tt=g[r][p];\n\t\t\t\t\tif(tt.tms<h[j].id)break;\n\t\t\t\t\tp++;\n\t\t\t\t\tif(!usd[tt.x])usd[tt.x]=1,bz.push_back(tt.x);\n\t\t\t\t\tif(!usd[tt.y+n])usd[tt.y+n]=1,bz.push_back(tt.y+n);\n\t\t\t\t\tinsert(rt[tt.x],1,m,tt.y);\n\t\t\t\t\tinsert(rt[tt.y+n],1,n,tt.x);\n\t\t\t\t}\n\t\t\t\tint d=h[j].id;\n\t\t\t\tfor(k=0;k<4;k++){\n\t\t\t\t\tint pl=f[k][d];\n\t\t\t\t\tif(k<2&&pl==a[d].x)continue;\n\t\t\t\t\tif(k>=2&&pl==a[d].y)continue;\n\t\t\t\t\tif(k==0)ans[d]-=qsum(rt[a[d].y+n],1,n,pl,a[d].x-1);\n\t\t\t\t\tif(k==1)ans[d]-=qsum(rt[a[d].y+n],1,n,a[d].x+1,pl);\n\t\t\t\t\tif(k==2)ans[d]-=qsum(rt[a[d].x],1,m,pl,a[d].y-1);\n\t\t\t\t\tif(k==3)ans[d]-=qsum(rt[a[d].x],1,m,a[d].y+1,pl);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlst=i;\n\t\t}\n\t}\n}\nvoid solve(){\n\tint i;\n\tprework::init();\n\ttype2::solve2();\n\ttype3::solve3();\n\ttype4::solve4();\n\tfor(i=1;i<=q;i++)printf(\"%d\\n\",ans[i]);\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--)solve();\n}\n/*\n1\n2 2 1\n3\n3\n31\n1 1 2 2\n*/\n```",
        "postTime": 1681740808,
        "uid": 128606,
        "name": "2018ljw",
        "ccfLevel": 7,
        "title": "P7963 \u9898\u89e3"
    }
]