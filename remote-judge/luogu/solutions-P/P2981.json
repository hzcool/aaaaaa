[
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2981)\n## \u9898\u76ee\u63cf\u8ff0\uff1a\nBessie \u5728\u4e00\u4e2a\u51b0\u5c01\u7684\u6e56\u9762\u4e0a\u6e38\u6cf3\uff0c\u6e56\u9762\u53ef\u4ee5\u8868\u793a\u4e3a\u4e8c\u7ef4\u7684\u5e73\u9762\uff0c\u5750\u6807\u8303\u56f4\u662f-1,000,000,000..1,000,000,000\u3002\n\n\u6e56\u9762\u4e0a\u7684N(1 <= N <= 20,000)\u4e2a\u4f4d\u7f6e\u6709\u77f3\u5757(\u7f16\u53f7\u5206\u522b\u4e3a1\u5230N)\uff0c\u5176\u5b83\u4f4d\u7f6e\u662f\u51b0\u9762\u3002\n\n\u7531\u4e8eBessie\u6ed1\u51b0\u6280\u672f\u4e0d\u591f\u597d\uff0c\u5979\u901a\u8fc7\u63a8\u52a8\u81ea\u5df1\u65c1\u8fb9\u7684\u77f3\u5757\uff0c\u4f9d\u9760\u53cd\u4f5c\u7528\u529b\u5411\u67d0\u4e00\u4e2a\u65b9\u5411\u524d\u8fdb\uff0c\u5728\u78b0\u5230\u4e00\u4e2a\u65b0\u7684\u77f3\u5757\u4e4b\u524d\uff0cBessie\u662f\u4e0d\u4f1a\u505c\u4e0b\u6765\u7684\u3002(\u5f53\u7136\uff0c\u6700\u540e\u4f1a\u505c\u7559\u5728\u67d0\u5757\u77f3\u5757\u7684\u524d\u4e00\u4e2a\u683c\u5b50\u91cc)\u7531\u4e8eBessie\u65e0\u6cd5\u8ba1\u7b97\u590d\u6742\u7684\u89d2\u5ea6\uff0c\u5979\u53ea\u80fd\u591f\u5411\u4e1c\u5357\u897f\u5317\u56db\u4e2a\u65b9\u5411\u524d\u8fdb\u3002\n\n\u5f88\u663e\u7136\uff0cBessie\u4e0d\u80fd\u591f\u7a7f\u8d8a\u77f3\u5757\uff0c\u56e0\u6b64\uff0cBessie\u4ec5\u4ec5\u53ef\u4ee5\u5411\u4e09\u4e2a\u65b9\u5411\u6ed1\u3002\n\u6ed1\u51b0\u4e0d\u662f\u6ca1\u6709\u98ce\u9669\uff0cBessie\u6ed1\u5411\u67d0\u4e2a\u65b9\u5411\u540e\u5fc5\u987b\u80fd\u78b0\u5230\u67d0\u4e2a\u77f3\u5757\uff0c\u56e0\u6b64\u5979\u5fc5\u987b\u5f88\u5c0f\u5fc3\u3002\n\n  \u8003\u8651\u4e0b\u9762\u7684\u4e00\u4e2a\u60c5\u51b5\uff0cBessie\u5e0c\u671b\u5230\u8fbe\u5728\u5979\u4e1c\u9762\u7684\u76ee\u6807\u4f4d\u7f6e(x=5,y=1)\uff0c(. = \u51b0\u5757,* = \u77f3\u5934, B = Bessie, G = \u76ee\u7684\u4f4d\u7f6e)\u5982\u679c\u5979\u76f4\u63a5\u5411\u4e1c\u6ed1\uff0c\u90a3\u4e48\u5979\u4f1a\u6ed1\u8fc7\u76ee\u6807\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u5979\u901a\u8fc7\u649e\u4e0a\u67d0\u5757\u77f3\u5934\u6765\u505c\u4e0b\u6765\uff0c\u4e00\u4e2a\u80fd\u591f\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\u7684\u65b9\u6848\u662f\u8fd9\u6837\u7684\uff1a\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20190330152944387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5nX2tlX2hhaQ==,size_16,color_FFFFFF,t_70)\n\u5728(a)\u4e2d\uff0cBessie \u53ea\u80fd\u671d\u5411\u5317\uff0c\u4e1c\uff0c\u6216\u8005\u5357\u4e09\u4e2a\u65b9\u5411\uff0c\u4f46\u662f\u53ea\u6709\u5728\u5317\u9762\u80fd\u649e\u4e0a\u77f3\u5934\u4ece\u800c\u505c\u4e0b\u6765\uff0c\u5728(b)\u4e2d\uff0c\u7c7b\u4f3c\u5730\uff0c\u5979\u53ea\u80fd\u5411\u4e1c\u8d70\u3002\n\n\u5bf9\u4e8e\u8f93\u5165\uff0c\u77f3\u5934 i\u4f4d\u4e8e\u5750\u6807\u4e3aX_i,Y_i\u7684\u4f4d\u7f6e\uff0c(-1,000,000,000<= X_i <= 1,000,000,000; -1,000,000,000 <= Y_i <= 1,000,000,000)\uff0c\u6ca1\u6709\u4efb\u4f55\u4e24\u5757\u77f3\u5934\u4f4d\u4e8e\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0cBessie\u4eceBx,By\u7684\u4f4d\u7f6e\u51fa\u53d1(\u51fa\u53d1\u70b9\u4e00\u5b9a\u4e0e\u67d0\u4e2a\u77f3\u5934\u76f8\u90bb)\uff0cBessie\u7684\u76ee\u6807\u4f4d\u7f6e\u662fGx,Gy(-1,000,000,000 <= Gx <= 1,000,000,000; -1,000,000,000 <= Gy <=1,000,000,000).\n\nBessie \u5e76\u4e0d\u4ecb\u610f\u957f\u65f6\u95f4\u6ed1\u51b0\uff0c\u4f46\u662f\uff0c\u4e0d\u505c\u5730\u63a8\u77f3\u5934\u4f9d\u9760\u53cd\u4f5c\u7528\u529b\u524d\u8fdb\u5f88\u7d2f\u3002FJ \u975e\u5e38\u5173\u5fc3Bessie\u7684\u5065\u5eb7\uff0c\u56e0\u6b64\u4ed6\u5e0c\u671b\u77e5\u9053Bessie\u6700\u5c11\u8981\u63a8\u591a\u5c11\u6b21\u77f3\u5934\u624d\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002\n***\n## \u5206\u6790\uff1a\n\u8fd9\u9898\u7684\u6700\u4e3b\u8981\u601d\u8def\u5c31\u662f\u627e\u5230\u6bcf\u4e00\u884c\u6bcf\u4e00\u5217\u7684\u77f3\u5934\u4e2a\u6570\uff0c\u53ea\u8981\u80fd\u627e\u5230\u77f3\u5934\uff0c\u6211\u4eec\u5c31\u80fd\u786e\u5b9a\u6ed1\u52a8\u540e\u5230\u8fbe\u7684\u4f4d\u7f6e\u3002\u90a3\u4e48\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199**12\u4e2a\u4e8c\u5206**\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u5f53\u7136\u662f\u5047\u7684\u3002\u3002\uff09\uff0c\u4e0d\u8fc712\u4e2a\u4e8c\u5206\u4ee3\u7801\u91cf\u6709\u70b9\u5927\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u6539\u8fdb\u3002\n\n\u5176\u5b9e\u53ef\u4ee5\u7528 $set$ \u548c $map$ \u4f18\u5316\n\n$set$\u662f\u5c06\u6bcf\u4e00\u884c\u6240\u5bf9\u5e94\u77f3\u5934\u7684\u5750\u6807\u8fdb\u884c\u5b58\u50a8\n$map$\u662f\u5c06\u6bcf\u4e00\u4e2aset\u6240\u5bf9\u5e94\u7684\u6b65\u6570\u8bb0\u5f55\u4e0b\u6765\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a$map$ \u5957 $set$ \u7684\u8fc7\u7a0b\n\n\u6211\u4eec\u7528\u4e86stl\u4e4b\u540e\uff0c\u4e8c\u5206\u7684\u5185\u5bb9\u4fbf\u53ef\u4ee5\u7701\u7565\uff0c\u56e0\u4e3astl\u4e4b\u4e2d\u662f\u81ea\u5e26\u4e8c\u5206\u7684\u3002\n\n* \u5982\u4f55\u5728 $set$ \u548c $map$ \u4e2d\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\u5462\uff1f\n1\u3001 \u5bf9\u8bf8\u5982set\u3001map\u8fd9\u79cd\u5173\u952e\u5b57\u552f\u4e00\u7684\u96c6\u5408\u800c\u8a00\uff0clower_bound\u3001upper_bound\u8fd4\u56de\u8fed\u4ee3\u5668\u662f\u76f8\u540c\uff0c\u5173\u952e\u5b57val\u5728\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728\uff0c\u4e8c\u8005\u8fd4\u56de\u7ed3\u679c\u4e00\u6837\uff0c\u90fd\u662f\u6309\u7167\u96c6\u5408\u5b9e\u4f8b\u5316\u65f6\u7ed9\u5b9a\u7684Compare\u6bd4\u8f83\uff0c\u4e0d\u5728val\u4e4b\u524d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u4ea6\u5373\u4e4b\u540e\u6216\u8005\u7b49\u4e8e\uff0c\u5982\u679c\u6309\u7167\u9ed8\u8ba4\u7684\u6bd4\u8f83\u7c7b\u578bless\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u662f\u2265val\u7684\u6700\u5c0f\u7684\u5143\u7d20\uff09\uff1b\n2. \u5982\u679c\u5173\u952e\u5728val\u5728\u96c6\u5408\u4e2d\u5b58\u5728\uff0clower_bound\u8fd4\u56deval\u5173\u952e\u5b57\u672c\u8eab\u7684\u8fed\u4ee3\u5668\uff0cupper_bound\u8fd4\u56de\u5173\u952e\u5b57val\u4e0b\u4e00\u4e2a\u5143\u7d20\u8fed\u4ee3\u5668\u3002\n3. \u6309\u7167\u5173\u952e\u5b57\u540e\u9762\u4e00\u4e2a\u5173\u952e\u5b57\u5728\u96c6\u5408\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u53ef\u5206\u4e3a\uff1a\u5173\u952e\u5b57val\u51fa\u73b0\u5728\u96c6\u5408\u4e2d\uff0c\u4f46\u662f\u662f\u552f\u4e00\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u548cset\u3001map\u60c5\u51b5\u7c7b\u4f3c\uff1b\n4. \u5173\u952e\u5b57val\u51fa\u73b0\u5728\u96c6\u5408\u4e2d\uff0c\u51fa\u73b0\u591a\u6b21\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0blower_bound\u8fd4\u56de\u7b2c\u4e00\u4e2a\u51fa\u73b0\u5173\u952e\u5b57val\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\uff0cupper_bound\u8fd4\u56de\u4f4d\u4e8e\u5173\u952e\u5b57val\u5bf9\u5e94\u4f4d\u7f6e\u540e\u7b2c\u4e00\u4e2a\u4e0d\u662fval\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff1b\u5173\u952e\u5b57val\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0eset\u3001map\u4e00\u81f4\u3002\n\n**\u7efc\u5408\u4e00\u4e0b\uff1alower_bound\u3001upper_bound\u51fd\u6570\u4e0d\u7ba1\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u4ee5\u4e0b\u6761\u4ef6\u5747\u6210\u7acb\uff1a\nIterator(val)\u2264Iterator(lower_bound)\u2264Iterator(upper_bound)\n\u4e5f\u5c31\u662flower_bound\u3001upper_bound\u6784\u6210\u7684\u4e0a\u4e0b\u9650\u7684\u533a\u95f4\u603b\u662f\u8868\u793a\u4e00\u4e2a\u6709\u6548\u7684\u8fed\u4ee3\u5668\u533a\u95f4\uff08equal_range\u8fd4\u56de\u503c\uff09\uff0c\u8be5\u8fed\u4ee3\u533a\u95f4\u7684\u957f\u5ea6\u8868\u793a\u5173\u952e\u5b57val\u5728\u96c6\u5408\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002**\n\n\u597d\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u5f0f\u5206\u6790\uff1a\n\u56e0\u4e3a\u9898\u76ee\u7ed9\u7684\u5750\u6807\u5927\u5c0f\u975e\u5e38\u5927\uff0c\u4f46\u662f\u77f3\u5934\u5374\u6700\u591a\u53ea\u670920000\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u77f3\u5934\u5165\u624b\u3002\n\u7528map\u5efa\u7acb\u4e00\u4e2a\u6620\u5c04\u5173\u7cfb\uff0c\u6765\u8fdb\u884c\u79bb\u6563\u5316\u77f3\u5934\u7684\u5750\u6807\u5373\u53ef\u3002\n\n\u800cset\u4e2d\u7684\u96c6\u5408\u662f\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6240\u4ee5\u8fd9\u6837\u4e5f\u590d\u5408\u4e86\u4e8c\u5206\u67e5\u627e\u7684\u6027\u8d28\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u7cfb\u7edf\u81ea\u5e26\u7684\u4e8c\u5206\u67e5\u627e\u6765\u67e5\u8be2\u6700\u8fd1\u7684\u77f3\u5934\u5373\u53ef\u3002\n\n* \u5982\u4f55\u5bfb\u627e\u77f3\u5934\u7684\u4f4d\u7f6e\uff1f\uff1f\n\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5f80\u4e0a\u67e5\u627e\u7684\u4f8b\u5b50\uff1a\n\n```cpp\nnode go_up(node k){\n    set<int> y=rock_x[k.fi];//\u627e\u5230\u76f8\u5e94\u7684\u5217\n    it=y.upper_bound (k.se) ;//\u627e\u5230\u77f3\u5934\n    if (it==y.end()||(*it)-k.se<=1) return b;//\u4e0d\u7b26\u5408\u60c5\u51b5\n    return node(k.fi,(*it)-1);//\u8fd4\u56de\n}\n```\n\nbfs\u5176\u5b9e\u5c31\u662f\u88f8\u7684bfs\uff0c\u4e3b\u8981\u662f\u67e5\u627e\u9ebb\u70e6\u3002\n\n***\n# Code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\ntypedef pair<int , int > node; \nint n;\nmap < int , set < int > > rock_x;\nmap < int , set < int > > rock_y;\nqueue < node > q;\nmap < node , int > dis;\nnode b,g;\nset < int > :: iterator it;//\u8868\u793a\u662f\u590d\u5236\u7684\u6765\u7684 \nnode go_up(node k){\n    set<int> y=rock_x[k.fi];\n    it=y.upper_bound (k.se) ;\n    if (it==y.end()||(*it)-k.se<=1) return b;\n    return node(k.fi,(*it)-1);\n}//\u5f80\u4e0a\u67e5\u627e\nnode go_down(node k){\n    set<int> y=rock_x[k.fi];\n    it=y.upper_bound (k.se) ;\n    if (it==y.begin()||(k.se-(*(--it))<=1)) return b;\n    return node(k.fi,(*it)+1);\n}//\u5f80\u4e0b\u67e5\u627e\nnode go_left(node k){\n    set<int> x=rock_y[k.se];\n    it=x.upper_bound (k.fi) ;\n    if (it==x.begin()||(k.fi-(*(--it))<=1)) return b;\n    return node((*it)+1,k.se);\n}//\u5f80\u5de6\u67e5\u627e\nnode go_right(node k){\n    set<int> x=rock_y[k.se];\n    it=x.upper_bound (k.fi) ;\n    if (it==x.end()||((*it)-k.fi<=1)) return b;\n    return node((*it)-1,k.se);\n}//\u5f80\u53f3\u67e5\u627e\nint main(){\n\tfreopen(\"ice..in\",\"r\",stdin);\n\tfreopen(\"ice..out\",\"w\",stdout);\n\tscanf(\"%d %d %d %d %d\",&n,&b.fi,&b.se,&g.fi,&g.se);\n    for (int i=1,x,y;i<=n;i++)\n      scanf(\"%d %d\",&x,&y),rock_x[x].insert(y),rock_y[y].insert(x);//\u5efa\u7acb\u6bcf\u4e00\u4e2a\u77f3\u5934\u7684\u884c\u5217\u7684\u7d22\u5f15\n    q.push(b);\n    dis[b]=0;\n    while (!q.empty()){\n\t    node x=q.front();\n\t    q.pop();\n\t    node xx;\n\t    xx=go_up(x);\n\t    if (xx!=b&&!dis[xx]) q.push(xx),dis[xx]=dis[x]+1;\n\t    xx=go_down(x);\n\t    if (xx!=b&&!dis[xx]) q.push(xx),dis[xx]=dis[x]+1;\n\t    xx=go_left(x);\n\t    if (xx!=b&&!dis[xx]) q.push(xx),dis[xx]=dis[x]+1;\n\t    xx=go_right(x);\n\t    if (xx!=b&&!dis[xx]) q.push(xx),dis[xx]=dis[x]+1;\n\t    if (dis[g]) break;\n\t}//bfs\u67e5\u627e\u8fc7\u7a0b\n\tprintf(\"%d\",dis[g]);//\u8f93\u51fa\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n\n```\n# [\u8bf7\u5927\u5bb6\u652f\u6301\u6211](https://blog.csdn.net/huang_ke_hai)\n",
        "postTime": 1553932000,
        "uid": 34301,
        "name": "\u9e6d\u5929",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2981 \u3010[USACO10FEB]\u5976\u725b\u5728\u51b0Cows on Ice\u3011"
    },
    {
        "content": "\u697c\u4e0a\u7684\u601d\u8def\u90fd\u662f\u4ece\u4e00\u4e2a\u77f3\u5934\u627e\u8df3\u5230\u53e6\u4e00\u4e2a\u77f3\u5934\u7684\u8def\u5f84,\u4f46\u5176\u5b9e\u8fd9\u9898\u53ef\u4ee5\u5bf9\u4e8e\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u5206\u522b\u505a\u4e00\u4e2a\u865a\u62df\u8282\u70b9,\u7136\u540e\u53ea\u9700\u8981\u627e\u865a\u62df\u8282\u70b9\u5de6\u8fb9\u7684\u865a\u62df\u8282\u70b9\u5c31\u884c\u4e86\n\n\u95ee\u9898\u662f:\u4e0d\u4f1a\u7528set\u600e\u4e48\u529e???\n\n\u5176\u5b9e\u53ef\u4ee5\u53d1\u73b0\u7528vector\u4e8c\u5206\u53ef\u4ee5\u5b9e\u73b0\u540c\u6837\u7684\u64cd\u4f5c(~~\u867d\u7136\u957f\u5f97\u4e0d\u884c\u800c\u4e14\u8fd8\u5404\u79cdwa~~)\n\nvector\u5b58\u56fe\u7684\u65b9\u6cd5:\n\n\u5206\u522b\u5b58\u4e0bx\u548cy\u65b9\u5411\u7684\u77f3\u5934,\u7136\u540e\u7528vec_x\u548cvec_y\u5b58\u56db\u4e2a\u65b9\u5411\u7684\u865a\u62df\u8282\u70b9\n\n\u4f5c\u4e3a\u4e00\u4e2a\u61d2\u4eba,\u8d1f\u6570\u662f\u6700\u5927\u7684\u6298\u78e8.\u5c06\u6bcf\u4e2a\u70b9\u52a0\u4e0a1e9\u80fd\u6709\u6548\u907f\u514d\u8d1f\u6570\n\n\u7136\u540e,\u5bf9\u6bcf\u4e2a\u65b9\u5411\u5224\u65ad\u4e00\u6b21\u5de6\u8fb9\u6700\u591a\u80fd\u8d70\u5230\u591a\u8fdc.\u8fd9\u91cc\u662f\u5f80\u4e0a\u7684\u5224\u65ad\n\n```cpp\nlong long find_up(long long x, long long y){\n  string going = to_string(x);\n  if (!mp_horizontal[going].size()) return -1; //\u8fd9\u91cc\u9762\u6ca1\u4e1c\u897f\n  if (!sorted_hori[going]) {sort(mp_horizontal[going].begin(),mp_horizontal[going].end());sorted_hori[going] = true;}//\u5148\u628a\u4ed6\u6392\u5e8f\u624d\u80fd\u4e8c\u5206\n  long long le = 0, ri = mp_horizontal[going].size()-1;\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n    if (mp_horizontal[going][mid]<=y) le = mid;\n    else ri = mid;\n  }//\u88f8\u7684\u4e8c\u5206\n  if (mp_horizontal[going][le]>y && !between_y(mp_horizontal[going][le],y,going)) return mp_horizontal[going][le];\n  if (mp_horizontal[going][ri]>y && !between_y(mp_horizontal[going][ri],y,going)) return mp_horizontal[going][ri];\n  return -1;//between_y\u662f\u67e5\u627e\u4e24\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u77f3\u5934\n}\n```\n\u73b0\u5728\u6765\u8bb2\u8bb2between_y.between_y\u7684\u610f\u4e49\u662f\u786e\u8ba4\u865a\u62df\u8282\u70b9\u4e4b\u95f4\u4e0d\u4f1a\u6709\u77f3\u5934.\u8fd9\u91cc\u6211\u4eec\u540c\u6837\u7528\u4e8c\u5206\u5b9e\u73b0\n\u4ee5\u4e0b\u662fbetween_y,between_x\u540c\u7406\n```cpp\nbool between_y(long long l, long long r, string ptr){\n  string going = ptr;\n  if (!stone_x[going].size()) return false;//\u6ca1\u4e1c\u897f\n  if (l>r) swap(l,r);\n  if (!sorted_x[going]) {sort(stone_x[going].begin(),stone_x[going].end());sorted_x[going] = true;}\n  long long le = 0, ri = stone_x[going].size()-1;\n\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n\n    if (between(l,r,stone_x[going][mid])) return true;\n    if (r>stone_x[going][mid]) le = mid;//\u4e8c\u5206\n    else ri = mid;\n  }\n  return between(l,r,stone_x[going][le])||between(l,r,stone_x[going][ri]);//between\u5b9a\u4e49\u4e3a\u6bd4left\u5927\u4e14\u6bd4right\u5c0f\n}\n```\n\n\u6ce8\u610f\u8fd9\u9898\u7531\u4e8e\u662fmap\u548cvector\u5b58\u56fe,unordered_map\u4e5f\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\n\n\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#include <cstdio>\n#include <vector>\n#include <queue>\nusing namespace std;\n#define pp pair<long long,long long>\n#define f first\n#define s second\nlong long n,sx,sy,ex,ey;\nvector<int> vec_x,vec_y,st_x,st_y;\nunordered_map<string, bool> sorted_x,sorted_y,sorted_hori,sorted_vert;\nunordered_map<string,vector<long long> > mp_vertical,mp_horizontal,stone_x,stone_y;\nunordered_map<string,long long> vis;\nbool between(long long x, long long y, long long ptr){\n  return x<=ptr && y>=ptr;\n}//\u5c31\u662f\u61d2\u5f97\u6bcf\u6b21\u90fd\u8fd9\u4e48\u6253\nbool between_x(long long l, long long r, string ptr){\n  string going = ptr;\n  if (!stone_y[going].size()) return false;\n  if (l>r) swap(l,r);\n  if (!sorted_y[going]) {sort(stone_y[going].begin(),stone_y[going].end());sorted_y[going] = true;}\n  long long le = 0, ri = stone_y[going].size()-1;\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n    if (between(l,r,stone_y[going][mid])) return true;\n    if (r<stone_y[going][mid]) ri = mid;\n    else le = mid;\n  }\n  return between(l,r,stone_y[going][le])||between(l,r,stone_y[going][ri]);\n}//\u6ce8\u610fbetween_x\u662f\u6307y\u4e0d\u53d8,\u6240\u4ee5\u8fd9\u91cc\u8981\u7528stone_y.\nbool between_y(long long l, long long r, string ptr){\n  string going = ptr;\n  if (!stone_x[going].size()) return false;\n  if (l>r) swap(l,r);\n  if (!sorted_x[going]) {sort(stone_x[going].begin(),stone_x[going].end());sorted_x[going] = true;}\n  long long le = 0, ri = stone_x[going].size()-1;\n\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n\n    if (between(l,r,stone_x[going][mid])) return true;\n    if (r>stone_x[going][mid]) le = mid;\n    else ri = mid;\n  }\n  return between(l,r,stone_x[going][le])||between(l,r,stone_x[going][ri]);\n}//y\u65b9\u5411\u67e5\u627e\nlong long find_up(long long x, long long y){\n  string going = to_string(x);\n  if (!mp_horizontal[going].size()) return -1;\n  if (!sorted_hori[going]) {sort(mp_horizontal[going].begin(),mp_horizontal[going].end());sorted_hori[going] = true;}\n  long long le = 0, ri = mp_horizontal[going].size()-1;\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n    if (mp_horizontal[going][mid]<=y) le = mid;\n    else ri = mid;\n  }\n  if (mp_horizontal[going][le]>y && !between_y(mp_horizontal[going][le],y,going)) return mp_horizontal[going][le];\n  if (mp_horizontal[going][ri]>y && !between_y(mp_horizontal[going][ri],y,going)) return mp_horizontal[going][ri];\n  return -1;\n}//\u5f80\u4e0a\nlong long find_down(long long x, long long y){\n  string going = to_string(x);\n  if (!mp_horizontal[going].size()) return -1;\n  if (!sorted_hori[going]) {sort(mp_horizontal[going].begin(),mp_horizontal[going].end());sorted_hori[going] = true;}\n  long long le = 0, ri = mp_horizontal[going].size()-1;\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n    if (mp_horizontal[going][mid]>=y) ri = mid;\n    else le = mid;\n  }\n  if (mp_horizontal[going][ri]< y && !between_y(mp_horizontal[going][ri],y,going)) return mp_horizontal[going][ri];\n  if (mp_horizontal[going][le]<y  && !between_y(mp_horizontal[going][le],y,going)) return mp_horizontal[going][le];\n  return -1;\n}//\u5f80\u4e0b\nlong long find_left(long long x, long long y){\n  string going = to_string(y);\n  if (!mp_vertical[going].size()) return -1;\n  if (!sorted_vert[going]) {sort(mp_vertical[going].begin(),mp_vertical[going].end());sorted_vert[going] = true;}\n  long long le = 0, ri = mp_vertical[going].size()-1;\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n    if (mp_vertical[going][mid]>=x) ri = mid;\n    else le = mid;\n  }\n  if (mp_vertical[going][ri]<x && !between_x(x,mp_vertical[going][ri],going)) return mp_vertical[going][ri];\n  if (mp_vertical[going][le]<x && !between_x(x,mp_vertical[going][le],going)) return mp_vertical[going][le];\n  return -1;\n}//\u5f80\u5de6\nlong long find_right(long long x, long long y){\n  string going = to_string(y);\n  if (!mp_vertical[going].size()) return -1;\n  if (!sorted_vert[going]) {sort(mp_vertical[going].begin(),mp_vertical[going].end());sorted_vert[going] = true;}\n  long long le = 0, ri = mp_vertical[going].size()-1;\n  while(le<ri-1){\n    long long mid = (le+ri)/2;\n    if (mp_vertical[going][mid]<=x) le = mid;\n    else ri = mid;\n  }\n  if (mp_vertical[going][le]>x && !between_x(x,mp_vertical[going][le],going)) return mp_vertical[going][le];\n  if (mp_vertical[going][ri]>x && !between_x(x,mp_vertical[going][ri],going)) return mp_vertical[going][ri];\n  return -1;\n}//\u5f80\u53f3\nvoid find_all(int x ,int y){\n  cout << find_up(x,y) << \" \" << find_down(x,y) << \" \" << find_left(x,y) << \" \" << find_right(x,y) << endl;\n}//\u8fd9\u662f\u6211\u81ea\u5df1\u7528\u6765\u6d4b\u8bd5\u7684\u7a0b\u5e8f\nint main(){\n  scanf(\"%lld%lld%lld%lld%lld\",&n,&sx,&sy,&ex,&ey);\n  sx+=1e9;sy+=1e9;ex+=1e9;ey+=1e9;\n  for (long long i=0;i<n;i++){\n    long long a,b;scanf(\"%lld%lld\",&a,&b);\n    a+=1e9;b+=1e9;\n    stone_x[to_string(a)].push_back(b);\n    stone_y[to_string(b)].push_back(a);//\u5c06\u77f3\u5934\u7684\u72b6\u6001\u5206\u522b\u8ba1\u5165map\u4e2d\n    if (a-1>=0) mp_vertical[to_string(b)].push_back(a-1);\n    mp_vertical[to_string(b)].push_back(a+1);vec_x.push_back(a+1);\n    if (b-1>=0) mp_horizontal[to_string(a)].push_back(b-1);\n    mp_horizontal[to_string(a)].push_back(b+1);\n    //\u5efa\u7acb\u865a\u62df\u8282\u70b9(\u5176\u5b9ea-1\u8fd9\u4e9b\u4e0d\u8981\u90fd\u65e0\u6240\u8c13\u4e86)\n  }\n  queue<pp> q;\n  q.push(make_pair(sx,sy));\n  vis[to_string(sx)+\"?\"+to_string(sy)] = 0;\n  while(!q.empty()){\n    long long qf = q.front().f, qs = q.front().s; q.pop();\n    long long prev = vis[to_string(qf)+\"?\"+to_string(qs)];\n    if (qf==ex && qs==ey) {cout << prev;return 0;}\n    long long le = find_left(qf,qs), ri = find_right(qf,qs), up = find_up(qf,qs), down = find_down(qf,qs);\n    if (le!=-1){\n      if (!vis[to_string(le)+\"?\"+to_string(qs)] && (le!=sx || qs!=sy)){\n        vis[to_string(le)+\"?\"+to_string(qs)] = prev+1;\n        q.push(make_pair(le,qs));\n      }//\u80fd\u5f80\u5de6\u5e76\u4e14\u5de6\u8fb9\u7684\u70b9\u6ca1\u62ff\u8fc7\n    }\n    if (ri!=-1){\n      if (!vis[to_string(ri)+\"?\"+to_string(qs)] && (ri!=sx || qs!=sy)){\n        vis[to_string(ri)+\"?\"+to_string(qs)] = prev+1;\n        q.push(make_pair(ri,qs));\n      }//\u80fd\u5f80\u53f3\u5e76\u4e14\u53f3\u8fb9\u7684\u70b9\u6ca1\u62ff\u8fc7\n    }\n    if (up!=-1){\n      if (!vis[to_string(qf)+\"?\"+to_string(up)] && (qf!=sx || up!=sy)){\n        vis[to_string(qf)+\"?\"+to_string(up)] = prev+1;\n        q.push(make_pair(qf,up));\n      }//\u80fd\u5f80\u4e0a\u5e76\u4e14\u4e0a\u8fb9\u7684\u70b9\u6ca1\u62ff\u8fc7\n    }\n    if (down!=-1){\n      if (!vis[to_string(qf)+\"?\"+to_string(down)] && (qf!=sx || down!=sy)){\n        vis[to_string(qf)+\"?\"+to_string(down)] = prev+1;\n        q.push(make_pair(qf,down));\n      }//\u80fd\u5f80\u4e0b\u5e76\u4e14\u4e0b\u9762\u7684\u70b9\u6ca1\u62ff\u8fc7\n    }\n  }\n}\n```\n\n\u5176\u5b9e\u8fd9\u4e2a\u4ee3\u7801\u610f\u4e49\u4e0d\u7b97\u5f88\u5927(\u6bd5\u7adf\u786e\u5b9e\u53c8\u81ed\u53c8\u957f).\u8fd9\u5c31\u662f\u4e00\u4e2a\u53c2\u8003,\u5982\u679c\u4f1a\u7528set\u5efa\u8bae\u4f7f\u7528\u697c\u4e0a\u7684\u65b9\u6cd5.\n\n\u987a\u4fbf\u7559\u4e0b\u4e00\u7ec4\u6bd2\u7624\u6570\u636e\u9020\u798f\u540e\u4eba\n\n```cpp\n/*\n9\n0 0 -2 -3\n-3 0\n-2 -2\n-3 -3\n-1 -3\n-1 -4\n-2 -4\n-3 -4\n-2 -5\n0 -3*/\n```\np.s\u8fd9\u7ec4\u6570\u636e\u65e0\u89e3(\u867d\u7136\u539f\u9898\u4e0d\u4f1a\u51fa\u73b0,\u4f46\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b)\n",
        "postTime": 1581269339,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2981 \u3010[USACO10FEB]\u5976\u725b\u5728\u51b0Cows on Ice\u3011"
    },
    {
        "content": "## Problem\n\u9898\u76ee\u63cf\u8ff0\nBessie \u5728\u4e00\u4e2a\u51b0\u5c01\u7684\u6e56\u9762\u4e0a\u6e38\u6cf3\uff0c\u6e56\u9762\u53ef\u4ee5\u8868\u793a\u4e3a\u4e8c\u7ef4\u7684\u5e73\u9762\uff0c\u5750\u6807\u8303\u56f4\u662f-1,000,000,000..1,000,000,000\u3002\n\n\u6e56\u9762\u4e0a\u7684N(1 <= N <= 20,000)\u4e2a\u4f4d\u7f6e\u6709\u77f3\u5757(\u7f16\u53f7\u5206\u522b\u4e3a1\u5230N)\uff0c\u5176\u5b83\u4f4d\u7f6e\u662f\u51b0\u9762\u3002\n\n\u7531\u4e8eBessie\u6ed1\u51b0\u6280\u672f\u4e0d\u591f\u597d\uff0c\u5979\u901a\u8fc7\u63a8\u52a8\u81ea\u5df1\u65c1\u8fb9\u7684\u77f3\u5757\uff0c\u4f9d\u9760\u53cd\u4f5c\u7528\u529b\u5411\u67d0\u4e00\u4e2a\u65b9\u5411\u524d\u8fdb\uff0c\u5728\u78b0\u5230\u4e00\u4e2a\u65b0\u7684\u77f3\u5757\u4e4b\u524d\uff0cBessie\u662f\u4e0d\u4f1a\u505c\u4e0b\u6765\u7684\u3002(\u5f53\u7136\uff0c\u6700\u540e\u4f1a\u505c\u7559\u5728\u67d0\u5757\u77f3\u5757\u7684\u524d\u4e00\u4e2a\u683c\u5b50\u91cc)\u7531\u4e8eBessie\u65e0\u6cd5\u8ba1\u7b97\u590d\u6742\u7684\u89d2\u5ea6\uff0c\u5979\u53ea\u80fd\u591f\u5411\u4e1c\u5357\u897f\u5317\u56db\u4e2a\u65b9\u5411\u524d\u8fdb\u3002\n\n\u5f88\u663e\u7136\uff0cBessie\u4e0d\u80fd\u591f\u7a7f\u8d8a\u77f3\u5757\uff0c\u56e0\u6b64\uff0cBessie\u4ec5\u4ec5\u53ef\u4ee5\u5411\u4e09\u4e2a\u65b9\u5411\u6ed1\u3002\n\n\u6ed1\u51b0\u4e0d\u662f\u6ca1\u6709\u98ce\u9669\uff0cBessie\u6ed1\u5411\u67d0\u4e2a\u65b9\u5411\u540e\u5fc5\u987b\u80fd\u78b0\u5230\u67d0\u4e2a\u77f3\u5757\uff0c\u56e0\u6b64\u5979\u5fc5\u987b\u5f88\u5c0f\u5fc3\u3002\n\n\u8003\u8651\u4e0b\u9762\u7684\u4e00\u4e2a\u60c5\u51b5\uff0cBessie\u5e0c\u671b\u5230\u8fbe\u5728\u5979\u4e1c\u9762\u7684\u76ee\u6807\u4f4d\u7f6e(x=5,y=1)\uff0c(. = \u51b0\u5757,* = \u77f3\u5934, B = Bessie, G = \u76ee\u7684\u4f4d\u7f6e)\u5982\u679c\u5979\u76f4\u63a5\u5411\u4e1c\u6ed1\uff0c\u90a3\u4e48\u5979\u4f1a\u6ed1\u8fc7\u76ee\u6807\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u5979\u901a\u8fc7\u649e\u4e0a\u67d0\u5757\u77f3\u5934\u6765\u505c\u4e0b\u6765\uff0c\u4e00\u4e2a\u80fd\u591f\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\u7684\u65b9\u6848\u662f\u8fd9\u6837\u7684\uff1a\n\n\n   (a)              (b)             (c)              (d)\n\n4 .....*.         .....*.         .....*.          .....*.\n\n3 ..*....  slide  ..*....  slide  ..*....   slide  ..*....\n\n2 ......*  north  ..B...*  east   .....B*   south  ......*\n\n1 .*B..G. ------> .*...G. ------> .*...G.  ------> .*...B.\n\n0 *....*.         *....*.         *....*.          *....*.\n\n0123456\n\u5728(a)\u4e2d\uff0cBessie \u53ea\u80fd\u671d\u5411\u5317\uff0c\u4e1c\uff0c\u6216\u8005\u5357\u4e09\u4e2a\u65b9\u5411\uff0c\u4f46\u662f\u53ea\u6709\u5728\u5317\u9762\u80fd\u649e\u4e0a\u77f3\u5934\u4ece\u800c\u505c\u4e0b\u6765\uff0c\u5728(b)\u4e2d\uff0c\u7c7b\u4f3c\u5730\uff0c\u5979\u53ea\u80fd\u5411\u4e1c\u8d70\u3002\n\n\u5bf9\u4e8e\u8f93\u5165\uff0c\u77f3\u5934 i\u4f4d\u4e8e\u5750\u6807\u4e3aX_i,Y_i\u7684\u4f4d\u7f6e\uff0c(-1,000,000,000<= X_i <= 1,000,000,000; -1,000,000,000 <= Y_i <= 1,000,000,000)\uff0c\u6ca1\u6709\u4efb\u4f55\u4e24\u5757\u77f3\u5934\u4f4d\u4e8e\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0cBessie\u4eceBx,By\u7684\u4f4d\u7f6e\u51fa\u53d1(\u51fa\u53d1\u70b9\u4e00\u5b9a\u4e0e\u67d0\u4e2a\u77f3\u5934\u76f8\u90bb)\uff0cBessie\u7684\u76ee\u6807\u4f4d\u7f6e\u662fGx,Gy(-1,000,000,000 <= Gx <= 1,000,000,000; -1,000,000,000 <= Gy <=1,000,000,000).\n\nBessie \u5e76\u4e0d\u4ecb\u610f\u957f\u65f6\u95f4\u6ed1\u51b0\uff0c\u4f46\u662f\uff0c\u4e0d\u505c\u5730\u63a8\u77f3\u5934\u4f9d\u9760\u53cd\u4f5c\u7528\u529b\u524d\u8fdb\u5f88\u7d2f\u3002FJ \u975e\u5e38\u5173\u5fc3Bessie\u7684\u5065\u5eb7\uff0c\u56e0\u6b64\u4ed6\u5e0c\u671b\u77e5\u9053Bessie\u6700\u5c11\u8981\u63a8\u591a\u5c11\u6b21\u77f3\u5934\u624d\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002\n\n## \u9898\u76ee\u5927\u610f\n\u5976\u725b\u8981\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\uff0c\u6bcf\u6b21\u8981\u5728\u67d0\u4e00\u4e2a\u77f3\u5934\u9644\u8fd1\u671d\u4e0a\u4e0b\u5de6\u53f3\u7684\u67d0\u4e00\u4e2a\u65b9\u5411\u8d70\u5230\u53e6\u5916\u7684\u4e00\u4e2a\u77f3\u5934\u9644\u8fd1\u3002\u6c42\u62d0\u5f2f\u65b9\u5411-1\u3002\n\n## Solution\n\u5e7f\u641c\u662f\u5341\u5206\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u6bcf\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u6269\u5c55\u3002\n\n\u8fd9\u4e00\u9053\u9898\u7684\u96be\u70b9\u5c31\u662f\u5982\u4f55\u627e\u5230\u67d0\u4e00\u4e2a\u5750\u6807\u4e0a\u4e0b\u5de6\u53f3\u79bb\u5b83\u6700\u8fd1\u7684\u77f3\u5934\uff1a\n- \u4e0a\uff1a\u5728y\u5750\u6807\u76f8\u7b49\uff0c\u4e14\u5c0f\u4e8e\u5f53\u524dx\u5750\u6807\u7684\u60c5\u51b5\u4e0b\uff0c\u6709x\u5750\u6807\u6700\u5927\u6240\u5bf9\u5e94\u7684\u70b9\u3002\n- \u4e0b\uff1a\u5728y\u5750\u6807\u76f8\u7b49\uff0c\u4e14\u5927\u4e8e\u5f53\u524dx\u5750\u6807\u7684\u60c5\u51b5\u4e0b\uff0c\u6709x\u5750\u6807\u6700\u5c0f\u6240\u5bf9\u5e94\u7684\u70b9\u3002\n- \u5de6\uff1a\u5728x\u5750\u6807\u76f8\u7b49\uff0c\u4e14\u5c0f\u4e8e\u5f53\u524dy\u5750\u6807\u7684\u60c5\u51b5\u4e0b\uff0c\u6709y\u5750\u6807\u6700\u5927\u6240\u5bf9\u5e94\u7684\u70b9\u3002\n- \u53f3\uff1a\u5728x\u5750\u6807\u76f8\u7b49\uff0c\u4e14\u5927\u4e8e\u5f53\u524dy\u5750\u6807\u7684\u60c5\u51b5\u4e0b\uff0c\u6709y\u5750\u6807\u6700\u5c0f\u6240\u5bf9\u5e94\u7684\u70b9\u3002\n\n\u8fd9\u9700\u8981\u4e8c\u5206\u67e5\u627e\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528STL\u7684set\u548cmap\u6765\u89e3\u51b3\u3002\n\n\u7531\u4e8e\u5750\u6807\u6bd4\u8f83\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528map\u6765\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u5bf9\u4e8e\u884c\uff0c\u5b9a\u4e49\u4e00\u4efd\u96c6\u5408set\u6765\u5b58\u50a8\u8fd9\u4e00\u884c\u7684\u6240\u6709\u7eb5\u5750\u6807\uff1b\u540c\u7406\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u5b58\u50a8\u6240\u6709\u7684\u6a2a\u5750\u6807\uff1b\u7136\u540e\u6211\u4eec\u5728\u627e\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5728set\u4e0a\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\u5373\u53ef\u3002\n\n\u5728\u4e8c\u5206\u67e5\u627e\u7684\u65f6\u5019\u6ce8\u610f\u5224\u65ad\u662f\u5426\u6709\u89e3\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u601d\u8def\u8fd8\u662f\u5f88\u6e05\u6670\u7684\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\n#include <map>\n#include <set>\n#include <cmath>\n#include <limits.h>\n#include <queue>\n\n#define pos pair<int,int>\n#define x first\n#define y second\n\nusing namespace std;\n\nint n,bx,by,gx,gy;\nstruct node\n{\n\tint x,y,v;\n};\nmap < pos, bool > v;\nmap < int, set<int> > map_x,map_y;\nset <int> ::iterator it;\npos no_ans;\nqueue< node > q;\n\npos find_up(pos now)\n{\n\tset <int> temp=map_y[now.y];\n\tit=temp.lower_bound(now.x);\n\tif (it==temp.begin()) return no_ans;\n\tit--;\n\tif (abs(*it-now.x)<=1) return no_ans;\n\treturn pos{*it+1,now.y};\n}\n//\u67e5\u627e\u70b9now\u4e0a\u9762\u7684\u70b9\n//\u7eb5\u5750\u6807\u76f8\u540c \u6a2a\u5750\u6807\u5c0f\u4e8enow_x\n\npos find_down(pos now)\n{\n\tset <int> temp=map_y[now.y];\n\tit=temp.upper_bound(now.x);\n\tif (it==temp.end()) return no_ans;\n\tif (abs(*it-now.x)<=1) return no_ans;\n\treturn pos{*it-1,now.y};\n} \n//\u67e5\u627e\u70b9now\u4e0b\u9762\u7684\u70b9\n//\u7eb5\u5750\u6807\u76f8\u540c \u6a2a\u5750\u6807\u5927\u4e8enow_y \n\npos find_left(pos now)\n{\n    set <int> temp=map_x[now.x];\n\tit=temp.lower_bound(now.y);\n\tif (it==temp.begin()) return no_ans;\n\tit--;\n\tif (abs(*it-now.y)<=1) return no_ans;\n\treturn pos{now.x,*it+1};\t\n}\n//\u67e5\u627e\u70b9now\u5de6\u8fb9\u7684\u70b9\n//\u6a2a\u5750\u6807\u76f8\u540c \u7eb5\u5750\u6807\u5c0f\u4e8enow_y \n\npos find_right(pos now)\n{\n\tset <int> temp=map_x[now.x];\n\tit=temp.upper_bound(now.y);\n\tif (it==temp.end()) return no_ans;\n\tif (abs(*it-now.y)<=1) return no_ans;\n\treturn pos{now.x,*it-1}; \n} \n//\u67e5\u627e\u70b9now\u53f3\u8fb9\u7684\u70b9\n//\u7eb5\u5750\u6807\u76f8\u540c \u6a2a\u5750\u6807\u5927\u4e8enow_x\n \nint main(void)\n{\n\tfreopen(\"ice..in\",\"r\",stdin);\n\tfreopen(\"ice..out\",\"w\",stdout);\n\tcin>>n>>bx>>by>>gx>>gy;\n\tfor (int i=1;i<=n;++i)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tmap_x[x].insert(y);\n\t\t//map_x\u8868\u793a\u7b2cx\u884c\u5bf9\u5e94\u7684\u6240\u6709y\u5750\u6807 \n\t\tmap_y[y].insert(x);\n\t\t//map_y\u8868\u793a\u7b2cy\u884c\u5bf9\u5e94\u7684\u6240\u6709x\u5750\u6807 \n\t}\n\tno_ans=pos{INT_MAX,-INT_MAX};//\u65e0\u89e3\u72b6\u6001 \n\tq.push(node{bx,by,0});\n\tpos st;\n\tst=pos{bx,by};\n\tv[st]=1;\n\twhile (q.size())\n\t{\n\t\tnode top=q.front();\n\t\tq.pop();\n\t\tif (top.x==gx && top.y==gy) \n\t\t    return cout<<top.v,0; \n\t\t//\u5230\u8fbe\u7ec8\u70b9 \n\t\tpos now;\n\t\t//\u521d\u59cb\u5316\u548c\u8fb9\u754c\n\t\tnow=find_up(pos{top.x,top.y});\n\t\tif (!v[now] && now!=no_ans)\n\t\t{\n\t\t\tv[now]^=1;\n\t\t\tq.push(node{now.x,now.y,top.v+1});\n\t\t}\n\t\t//\u5411\u4e0a\u641c\u7d22\n\t\tnow=find_down(pos{top.x,top.y});\n\t\tif (!v[now] && now!=no_ans)\n\t\t{\n\t\t\tv[now]^=1;\n\t\t\tq.push(node{now.x,now.y,top.v+1});\n\t\t}\n\t\t//\u5411\u4e0b\u641c\u7d22\n\t\tnow=find_left(pos{top.x,top.y});\n\t\tif (!v[now] && now!=no_ans)\n\t\t{\n\t\t\tv[now]^=1;\n\t\t\tq.push(node{now.x,now.y,top.v+1});\n\t\t}\n\t\t//\u5411\u5de6\u641c\u7d22\n\t\tnow=find_right(pos{top.x,top.y});\n\t\tif (!v[now] && now!=no_ans)\n\t\t{\n\t\t\tv[now]^=1;\n\t\t\tq.push(node{now.x,now.y,top.v+1});\n\t\t} \n\t\t//\u5411\u53f3\u641c\u7d22\n\t} \n\treturn 0;\n}\n```\n",
        "postTime": 1553934047,
        "uid": 33243,
        "name": "\u5c0f\u5468\u732a\u732a",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2981 \u3010[USACO10FEB]\u5976\u725b\u5728\u51b0Cows on Ice\u3011"
    }
]