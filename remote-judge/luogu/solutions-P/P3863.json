[
    {
        "content": "\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u4f3c\u4e4e\u5c31\u5f88\u597d\u7ef4\u62a4\u4e86\u3002\n\n\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u65f6\u523b\u8fd9\u4e2a\u6570\u52a0\u4e0a\u7684\u503c\u3002\u67e5\u8be2\u67d0\u4e00\u6bb5\u65f6\u95f4\u91cc\u5927\u4e8e\u67d0\u4e2a\u503c\u7684\u65f6\u95f4\u6570\u91cf\u3002\u5c06\u65f6\u95f4\u5206\u5757\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\n\n\u4f46\u5982\u679c\u662f $n$ \u4e2a\u6570\u5462\uff1f\u5982\u679c\u5728\u7ebf\u641e\u7684\u8bdd\uff0c\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u5f88\u597d\u7684\u7ef4\u62a4\u3002\u90a3\u4e48\u79bb\u7ebf\u4e0b\u6765\uff0c\u7ed9\u8be2\u95ee\u6392\u5e8f\uff0c\u4f9d\u6b21\u5904\u7406\u5c31\u597d\u4e86\u3002\n\n\u90a3\u600e\u4e48\u5904\u7406\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u5462\uff1f\u89c2\u5bdf\u5230\u5982\u679c\u5728 $t$ \u65f6\u523b\u7ed9 $[l,r]$ \u52a0\u4e0a $v$\uff0c\u4f1a\u5bf9\u5904\u7406 $[l,r]$ \u4e2d\u6bcf\u4e00\u4e2a\u6570\u65f6\u90fd\u9020\u6210\u540c\u6837\u7684\u5f71\u54cd\u3002\u6240\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u5206\u6210\u4e24\u90e8\u5206\uff1a\n\n- \u7b2c\u4e00\u90e8\u5206\uff0c\u5728\u5904\u7406\u7b2c $l$ \u4e2a\u6570\u7684\u65f6\u5019\u5c06\u65f6\u523b $[t,m]$ \u90fd\u52a0\u4e0a $v$\u3002\n- \u7b2c\u4e8c\u90e8\u5206\uff0c\u5728\u5904\u7406\u7b2c $r+1$ \u4e2a\u6570\u7684\u65f6\u5019\u5c06\u65f6\u523b $[t,m]$ \u90fd\u51cf\u53bb $v$\uff0c\u62b5\u6d88\u5f71\u54cd\uff08\u56e0\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u4e0d\u4f1a\u5bf9 $r+1$ \u53ca\u5176\u4e4b\u540e\u7684\u6570\u9020\u6210\u5f71\u54cd\uff0c\u6545\u51cf\u53bb\uff09\u3002\n\n\uff08\u662f\u4e0d\u662f\u611f\u89c9\u6709\u70b9\u50cf\u626b\u63cf\u7ebf\u5462\uff09\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e00\u4e2a\u6570\u6bcf\u4e2a\u65f6\u523b\u88ab\u52a0\u4e0a\u7684\u503c\u3002\n\n\u5904\u7406\u7b2c $i$ \u4e2a\u6570\u7b2c $t$ \u79d2\u7684\u8be2\u95ee\u65f6\uff0c\u5206\u5757\u67e5\u8be2 $[0,t-1]$ \u6709\u591a\u5c11\u4e2a\u65f6\u523b\u7684\u503c\u5927\u4e8e\u7b49\u4e8e $y - a_i$ \u5373\u53ef\u3002\n\n\u6ce8\u610f\u5230\u6700\u540e\u8f93\u51fa\u7ed3\u679c\u65f6\u662f\u6309\u7167\u8f93\u5165\u987a\u5e8f\u8f93\u51fa\uff0c\u6240\u4ee5\u8fd8\u8981\u5904\u7406\u4e00\u4e0b\u8be2\u95ee\u7684\u987a\u5e8f\u3002\n\n```cpp\n# include <bits/stdc++.h>\n# define rr register\n# define int long long\nconst int N=100010;\nstruct Line{//\u4fee\u6539\n\tint x;\n\tint Time;\n\tint v;\n}a[N<<1];\nstruct Asker{//\u67e5\u8be2\n\tint x,v; \n\tint Time;\n\tint Index;// \u8bb0\u5f55\u662f\u7b2c\u51e0\u6b21\u8be2\u95ee\n}ask[N];\nint cnta,cntb;//\u4fee\u6539\u6570\u91cf & \u67e5\u8be2\u6570\u91cf\nint ans[N]; // \u5b58\u50a8\u6bcf\u4e00\u6b21\u8be2\u95ee\u7684\u7b54\u6848\nint val[N];\nint n,m;\n/* \u5206\u5757\u90e8\u5206 */\nint tseque[N];\nint fseque[N];\nint add[N];\nint Kuai[N];\nint KL[N],KR[N];\n/* \u5206\u5757\u90e8\u5206 */\nint siz;// \u8981\u5206\u7684\u5757\u5927\u5c0f\ninline int read(void){\n\tint res,f=1;\n\tchar c;\n\twhile((c=getchar())<'0'||c>'9')\n\t\tif(c=='-')f=-1;\n\tres=c-48;\n\twhile((c=getchar())>='0'&&c<='9')\t\n\t\tres=res*10+c-48;\n\treturn res*f;\t\t\n}\ninline bool cmp_Line(Line X,Line Y){//\u7ed9\u4fee\u6539\u6392\u5e8f\n\treturn X.x!=Y.x?X.x<Y.x:X.Time<Y.Time;\n}\ninline bool cmp_Ask(Asker X,Asker Y){//\u7ed9\u8be2\u95ee\u6392\u5e8f\n\treturn X.x!=Y.x?X.x<Y.x:X.Time<Y.Time;\n}\ninline bool cmp_Integer(int X,int Y){//\u4e3a\u4e86\u7ed9\u5757\u5185\u5143\u7d20\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7528\u7684\n\treturn X>Y;\n}\ninline void resort(int x){//\u6bcf\u6b21\u4fee\u6539\u4e4b\u540e\uff0c\u5757\u5185\u5143\u7d20\u9700\u8981\u91cd\u65b0\u6392\u5e8f\n\tfor(rr int i=KL[x];i<=KR[x];++i)\n\t\tfseque[i]=tseque[i];\n\tstd::sort(fseque+KL[x],fseque+KR[x]+1,cmp_Integer);\n\treturn;\t\n}\ninline void change(int l,int r,int v){// \u5206\u5757\u4fee\u6539\u64cd\u4f5c\n\tl=std::max(l,0ll);\n\tr=std::min(r,m);\n\tif(Kuai[l]==Kuai[r]){\n\t\tfor(rr int i=l;i<=r;++i){\n\t\t\ttseque[i]+=v;\n\t\t}\n\t\tresort(Kuai[l]);\n\t\treturn;\n\t}\n\tfor(rr int i=l;i<=KR[Kuai[l]];++i)\n\t\ttseque[i]+=v;\n\tresort(Kuai[l]);\n\tfor(rr int i=r;i>=KL[Kuai[r]];--i)\n\t\ttseque[i]+=v;\n\tresort(Kuai[r]);\n\tfor(rr int i=Kuai[l]+1;i<=Kuai[r]-1;++i){\n\t\tadd[i]+=v;\n\t}\n\treturn;\n}\ninline int query(int l,int r,int v){// \u5206\u5757\u67e5\u8be2\u64cd\u4f5c\n\tint cnt=0;\n\tif(Kuai[l]==Kuai[r]){\n\t\tfor(rr int i=l;i<=r;++i)\n\t\t\tif(tseque[i]+add[Kuai[i]]>=v)\n\t\t\t\t++cnt;\n\t\treturn cnt;\t\t\n\t}\n\tfor(rr int i=l;i<=KR[Kuai[l]];++i)\n\t\tif(tseque[i]+add[Kuai[i]]>=v)\n\t\t\t++cnt;\n\tfor(rr int i=r;i>=KL[Kuai[r]];--i)\n\t\tif(tseque[i]+add[Kuai[i]]>=v)\n\t\t\t++cnt;\n\tfor(rr int i=Kuai[l]+1;i<=Kuai[r]-1;++i){\n\t\tint L=KL[i],R=KR[i],ans=KL[i]-1;\n\t\twhile(L<=R){\n\t\t\tint mid=(L+R)>>1;\n\t\t\tif(fseque[mid]+add[Kuai[mid]]>=v){\n\t\t\t\tans=mid;\n\t\t\t\tL=mid+1;\n\t\t\t}else{\n\t\t\t\tR=mid-1;\n\t\t\t}\n\t\t}\n\t\tcnt+=(ans-KL[i])+1;\n\t}\n\treturn cnt;\n}\n# undef int\nint main(void){\n# define int long long\n\tn=read(),m=read();\n\tfor(rr int i=1;i<=n;++i){\n\t\tval[i]=read();\n\t}\n\tfor(rr int i=1,opt;i<=m;++i){\n\t\topt=read();\n\t\tif(opt==1){\n\t\t\tint l=read(),r=read(),v=read();\n\t\t\ta[++cnta].x=l;\n\t\t\ta[cnta].Time=i;\n\t\t\ta[cnta].v=v;\n\t\t\ta[++cnta].x=r+1;\n\t\t\ta[cnta].Time=i;\n\t\t\ta[cnta].v=-v;\n\t\t}else{\n\t\t\tint p=read(),y=read();\n\t\t\task[++cntb].x=p;\n\t\t\task[cntb].Index=cntb;\n\t\t\task[cntb].v=y;\n\t\t\task[cntb].Time=i;\n\t\t}\n\t}\n\tstd::sort(a+1,a+1+cnta,cmp_Line);\n\tstd::sort(ask+1,ask+1+cntb,cmp_Ask);// \u8bfb\u5165\u3001\u5b58\u50a8\u5e76\u6392\u5e8f\u6bcf\u4e00\u4e2a\u64cd\u4f5c\n\tsiz=sqrt(m);\n\tfor(rr int i=0;i<=m;++i){\n\t\tKuai[i]=i/siz+1;\n\t}\n\tfor(rr int i=1;(i-1)*siz<=m;++i){\n\t\tKL[i]=(i-1)*siz;\n\t\tKR[i]=std::min(i*siz-1,m);\n\t}\n\tint now=1;\n\tfor(rr int i=1;i<=cntb;++i){\n\t\twhile((a[now].x<ask[i].x||(a[now].x==ask[i].x&&a[now].Time<ask[i].Time))&&now<=cnta){\n\t\t\tchange(a[now].Time,m,a[now].v);\n\t\t\t++now;\n\t\t}\n\t\tans[ask[i].Index]=query(0,ask[i].Time-1,ask[i].v-val[ask[i].x]);\n\t}\n\tfor(rr int i=1;i<=cntb;++i)\n\t\tprintf(\"%lld\\n\",ans[i]);\n\treturn 0;\n} \n```",
        "postTime": 1574917659,
        "uid": 108949,
        "name": "Meatherm",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3863 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "\u795e\u5947\u7684\u9898\u76ee\uff0c\u5237\u9898\u5355\u7684\u65f6\u5019\u505a\u5230\u4e86\u8fd9\u9053\u9898\u3002\n\n\u4e0d\u59a8\u5148\u60f3\u60f3\u53ea\u6709\u4e00\u4e2a\u6570\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e0d\u540c\u65f6\u523b\u7684 $a_i$ \u5199\u6210\u4e00\u4e2a\u5e8f\u5217\u3002\u90a3\u4e48\u6211\u4eec\u9700\u8981\u652f\u6301\u533a\u95f4\u8be2\u95ee $[0,time-1]$ \u4e0d\u5c0f\u4e8e $lim$ \u7684\u6570\u4e2a\u6570\u548c\u533a\u95f4\u589e\u91cf $[l,r]$\u3002\u7528\u5206\u5757\u641e\u4e00\u641e\u5c31\u597d\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+Q\\sqrt Q \\log Q)$\u3002\n\n\u56de\u5230\u672c\u9898\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u76f8\u4f3c\u7684\u65b9\u6cd5\u5904\u7406\u3002\u8003\u8651\u533a\u95f4\u589e\u91cf\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u4e8b\u5b9e\u4e0a\u662f\u5728\u7b2c $l$ \u4e2a\u6570\u4e0a $+d$ \uff0c\u5728\u7b2c $r+1$ \u4e2a\u6570\u4e0a $-d$\u3002\u6b64\u5904\u6211\u4eec\u6240\u8bf4\u7684\u52a0\u51cf\u663e\u7136\u662f\u4e00\u79cd\u8d21\u732e\u7684\u52a0\u51cf\u3002\u90a3\u4e48\u628a\u4fee\u6539\u62c6\u6210\u4e24\u4e2a\uff0c\u53ea\u7ef4\u62a4\u4e00\u4e2a\u5bf9\u4e8e\u5355\u4e2a\u6570\u5728\u65f6\u95f4\u4e0a\u7684\u5206\u5757\uff0c\u5c06\u6240\u6709\u64cd\u4f5c\u6309\u4e0b\u6807\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u65f6\u95f4\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u5982\u679c\u5b8c\u6210\u4e86\u5bf9 $a_x$ \u7684\u64cd\u4f5c\uff0c\u5373\u5c06\u8fdb\u884c\u5bf9 $a_y$ \u7684\u64cd\u4f5c\uff0c\u5219\u5c06 $[0,m]$ \u5168\u90e8\u52a0\u4e0a $a_y-a_x$\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n+Q\\sqrt Q \\log Q)$\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u6839\u53f7\u5e73\u8861\u7ee7\u7eed\u4f18\u5316\uff0c~~\u4f46\u662f\u6211\u662f\u9e3d\u5b50~~\n\n\u4ee3\u7801\u4e2d\u7ea6\u5b9a\u6240\u6709\u65f6\u95f4\u5168\u90e8 $+1$ \uff0c\u5373 $[1,m+1]$ \uff0c\u4e3a\u4e86\u9002\u5e94\u5e73\u5e38\u5206\u5757\u7684\u5199\u6cd5\u3002\u5199\u7684\u4e5f\u5f88\u5a31\u4e50\uff0c\u770b\u770b\u5c31\u597d\uff08\u5927\u96fe\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<algorithm>\ntypedef long long ll;\nint block,T,a[100005],ans[100005];\nll c[100005],sum[1005];\nstd::vector<ll> order[1005];\nstruct _ask {int opt,t,x,v;}ask[200005];\ninline int read() {\n\tregister int x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline int min(const int &x,const int &y) {return x<y? x:y;} \ninline bool cmp(const _ask &x,const _ask &y) {return x.x!=y.x? x.x<y.x:x.t<y.t;}\ninline void BlockModify(int l,int r,int val) {\n\tint bl=(l-1)/block+1,br=(r-1)/block+1;\n\tif(bl==br) {\n\t\torder[bl].clear();\n\t\tfor(register int i=l;i<=r;++i) c[i]+=val;\n\t\tfor(register int i=(bl-1)*block+1;i<=min(bl*block,T);++i) order[bl].push_back(c[i]);\n\t\tstd::sort(order[bl].begin(),order[bl].end());\n\t}\n\telse {\n\t\torder[bl].clear(); order[br].clear();\n\t\tfor(register int i=l;i<=min(bl*block,T);++i) c[i]+=val;\n\t\tfor(register int i=(br-1)*block+1;i<=r;++i) c[i]+=val;\n\t\tfor(register int i=(bl-1)*block+1;i<=min(bl*block,T);++i) order[bl].push_back(c[i]);\n\t\tfor(register int i=(br-1)*block+1;i<=min(br*block,T);++i) order[br].push_back(c[i]);\n\t\tstd::sort(order[bl].begin(),order[bl].end());\n\t\tstd::sort(order[br].begin(),order[br].end());\n\t\tfor(register int i=bl+1;i<=br-1;++i) sum[i]+=val;\n\t}\n}\ninline int BlockQuery(int l,int r,int val) {\n\tint bl=(l-1)/block+1,br=(r-1)/block+1,res=0;\n\tif(bl==br) {for(register int i=l;i<=r;++i) if(c[i]+sum[bl]>=val) ++res;}\n\telse {\n\t\tfor(register int i=l;i<=min(bl*block,T);++i) if(c[i]+sum[bl]>=val) ++res;\n\t\tfor(register int i=(br-1)*block+1;i<=r;++i) if(c[i]+sum[br]>=val) ++res;\n\t\tfor(register int i=bl+1;i<=br-1;++i) {int tmp=std::lower_bound(order[i].begin(),order[i].end(),1ll*val-sum[i])-order[i].begin(); res+=order[i].size()-tmp;}\n\t}\n\treturn res;\n}\nsigned main() {\n\tint n=read(),num=0; T=read();\n\tfor(register int i=1;i<=n;++i) a[i]=read();\n\tfor(register int Q=1;Q<=T;++Q) {\n\t\tint op=read(); ans[Q]=-1;\n\t\tif(op==1) {\n\t\t\tint l=read(),r=read(),x=read();\n\t\t\task[++num].t=Q;ask[num].opt=1;ask[num].x=l;ask[num].v=x;\n\t\t\tif(r<n) {ask[++num].t=Q;ask[num].opt=1;ask[num].x=r+1;ask[num].v=-x;}\n\t\t}\n\t\telse {\n\t\t\tint x=read(),lim=read();\n\t\t\task[++num].t=Q;ask[num].opt=2;ask[num].x=x;ask[num].v=lim;\n\t\t}\n\t}\n\tstd::sort(ask+1,ask+1+num,cmp);\n\tint cur=0; ++T; block=sqrt(T);\n\tfor(register int i=1;i<=T;++i) order[(i-1)/block+1].push_back(0);\n\tfor(register int i=1;i<=num;++i) {\n\t\tif(cur!=ask[i].x) {BlockModify(1,T,a[ask[i].x]-a[cur]);cur=ask[i].x;}\n\t\tif(ask[i].opt==1) {BlockModify(ask[i].t+1,T,ask[i].v);}\n\t\telse {ans[ask[i].t]=BlockQuery(1,ask[i].t,ask[i].v);}\n\t}\n\tfor(register int i=1;i<T;++i) if(ans[i]!=-1) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1600847093,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3863 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "\u4e00\u9053\u633a\u4e0d\u9519\u7684\u9898\u76ee\u3002\n\n\u8003\u8651\u6211\u4eec\u5c06\u6700\u7ec8\u6bcf\u4e2a\u65f6\u95f4\u7684\u5e8f\u5217\u5199\u51fa\u6765\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5f62\u6210\u4e86\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u5982\u4e0b\u56fe\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9pt2o9hj.png)\n\n\u7136\u540e\u5bb9\u6613\u9677\u5165\u4e00\u4e2a\u8bef\u533a\uff0c\u53ef\u80fd\u4f1a\u53bb\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u523b\u7684\u5e8f\u5217\u60c5\u51b5\uff0c\u7136\u540e\u76f4\u63a5\u56de\u7b54\u3002\n\n\u4f46\u662f\u5176\u5b9e\u53ef\u4ee5\u8003\u8651\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u8003\u8651\u67e5\u8be2\u548c\u4fee\u6539\u7684\u60c5\u51b5\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z6zqrsx8.png)\n\n\u4f60\u53d1\u73b0\u67e5\u8be2\u662f\u67e5\u4e00\u4e2a\u533a\u95f4\uff0c\u4f46\u662f\u4fee\u6539\u662f\u4fee\u6539\u4e00\u4e2a\u77e9\u5f62\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8003\u8651\u79bb\u7ebf\u8be2\u95ee\uff0c\u7136\u540e\u626b\u63cf\u7ebf\u626b\u5e8f\u5217\uff0c\u7136\u540e\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u65f6\u95f4\u7ef4\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u4fee\u6539\uff0c\u53ef\u4ee5\u5c06\u4ed6\u62c6\u6210\u4e24\u4e2a\u5f62\u5982 $(l,t,val)$ \u548c $(r + 1,t,-val)$ \u7684\u5f62\u5f0f\u3002\n\n\u7136\u540e\u5c31\u5728\u626b\u5230 $l$ \u7684\u65f6\u5019\u5bf9\u7ef4\u62a4\u7684\u65f6\u95f4\u7ef4\u4e0a $t \\sim q$ \u7684\u8303\u56f4\u6574\u4f53\u52a0 $val$ \u7136\u540e\u626b\u5230 $r + 1$ \u65f6\u5bf9 $t \\sim q$ \u7684\u8303\u56f4\u6574\u4f53\u52a0\u4e0a $-val$ \u6d88\u9664\u8d21\u732e\u3002\n\n\u7136\u540e\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\u52a0\u533a\u95f4\u67e5\u8be2\u6392\u540d\u95ee\u9898\uff0c\u5206\u5757\u7ef4\u62a4\u5373\u53ef\u3002\n\n```cpp\n// \u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\n// Problem: P3863 \u5e8f\u5217\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P3863\n// Memory Limit: 500 MB\n// Time Limit: 2000 ms\n// The Author : Pitiless0514\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nnamespace IO {\n\tint len = 0;\n\tchar ibuf[(1 << 20) + 1], *iS, *iT, out[(1 << 25) + 1];\n\t#define gh()                                                                   \\\n\t  (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin),         \\\n\t   (iS == iT ? EOF : *iS++) : *iS++)\n\tinline int read() {\n\t  char ch = gh();\n\t  int x = 0;\n\t  char t = 0;\n\t  while (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n\t  while (ch >= '0' && ch <= '9') x = x * 10 + (ch ^ 48), ch = gh();\n\t  return t ? -x : x;\n\t}\n\tinline void putc(char ch) { out[len++] = ch; }\n\ttemplate <class T> inline void write(T x) {\n\t  if (x < 0) putc('-'), x = -x;\n\t  if (x > 9) write(x / 10);\n\t  out[len++] = x % 10 + 48;\n\t}\n\tstring getstr(void) {\n\t  string s = \"\";\n\t  char c = gh();\n\t  while (c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == EOF) c = gh();\n\t  while (!(c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == EOF))s.push_back(c), c = gh();\n\t  return s;\n\t}\n\tvoid putstr(string str, int begin = 0, int end = -1) {\n\t  if (end == -1)\n\t    end = str.size();\n\t  for (int i = begin; i < end; i++)\n\t    putc(str[i]);\n\t  return;\n\t}\n\tinline void flush() {\n\t  fwrite(out, 1, len, stdout);\n\t  len = 0;\n\t}\n} // namespace IO by Macesuted\nusing IO::flush;\nusing IO::getstr;\nusing IO::putc;\nusing IO::putstr;\nusing IO::read;\nusing IO::write;\nconst int N = 2e6;\nint n, siz = 360, bel, q, num, cnt, ans[N], a[N], pos[N], LL[N], RR[N], s[N], t[N], tag[N];\nstruct update { \n  int x, tim, val; \n  update(int xx = 0,int yy = 0,int zz = 0) {\n    x = xx, tim = yy, val = zz;\n  }\n}q1[N];\nstruct ask { \n  int x, tim, val, id; \n  ask(int xx = 0,int yy = 0,int zz = 0,int uu = 0) {\n    x = xx, tim = yy, val = zz, id = uu;\n  }\n}q2[N];\nint cmp1(update x, update y) { return (x.x != y.x) ? x.x < y.x : x.tim < y.tim; }\nint cmp2(ask x, ask y) { return (x.x != y.x) ? x.x < y.x : x.tim < y.tim; }\nvoid change(int l,int r,int k) {\n  l = max(l, 0ll);\n\tr = min(r, q);\n  int pl = pos[l], pr = pos[r];\n  if(pl == pr) {\n    for(int i = l; i <= r; i++) s[i] += k;\n    int L = LL[pl], R = RR[pl];\n    for(int i = L; i <= R; i++) t[i] = s[i];\n    sort(t + L, t + R + 1);\n    reverse(t + L, t + R + 1);\n  }  else{\n    for(int i = pl + 1; i <= pr - 1; i++) tag[i] += k;\n    int L = LL[pl], R = RR[pl];\n    for(int i = l; i <= R; i++) s[i] += k;\n    for(int i = L; i <= R; i++) t[i] = s[i];\n    sort(t + L, t + R + 1);\n    reverse(t + L, t + R + 1);\n    L = LL[pr], R = RR[pr];\n    for(int i = L; i <= r; i++) s[i] += k;\n    for(int i = L; i <= R; i++) t[i] = s[i];\n    sort(t + L, t + R + 1);\n    reverse(t + L, t + R + 1);\n  }\n}\nint check(int l,int r,int k) {\n  int pl = pos[l], pr = pos[r], cnt = 0;\n  if(pl == pr) {\n    for(int i = l; i <= r; i++) if(s[i] + tag[pl] >= k) cnt++;\n    return cnt;\n  }  else {\n    for(int i = pl + 1; i <= pr - 1; i++) {\n      int l1 = LL[i], r1 = RR[i];\n      while(l1 < r1) {\n        int mid = (l1 + r1) / 2 + 1;\n        if(t[mid] + tag[i] >= k) l1 = mid;\n        else r1 = mid - 1;\n      }\n      if(t[l1] + tag[i] >= k) cnt += l1 - LL[i] + 1;\n    }\n    int L = LL[pr], R = RR[pl];\n    for(int i = l; i <= R; i++) if(s[i] + tag[pl] >= k) cnt++;\n    for(int i = L; i <= r; i++) if(s[i] + tag[pr] >= k) cnt++;\n    return cnt;\n  }\n}\nsigned main () {\n  n = read(), q = read();\n  for(int i = 1; i <= n; i++) a[i] = read();\n  for(int i = 1; i <= q; i++) {\n    int op = read(), l, r, x;\n    if(op == 1) {\n      l = read(), r = read(), x = read();\n      ++cnt; q1[cnt] = update(l, i, x);\n      ++cnt; q1[cnt] = update(r + 1, i, -x);\n    }  else {\n      l = read(), x = read();\n      ++num; q2[num] = ask(l, i, x, num);\n    }\n  }\n  bel = (q + 1 - 1) / siz + 1;\n  for(int i = 1; i <= bel; i++) {\n    LL[i] = (i - 1) * siz + 1;\n    RR[i] = min(i * siz, q + 1);\n    for(int j = LL[i]; j <= RR[i]; j++) {\n      pos[j] = i;\n    }\n  }\n  sort(q1 + 1, q1 + cnt + 1, cmp1);\n  sort(q2 + 1, q2 + num + 1, cmp2);\n  memset(ans, -1, sizeof(ans));\n  for(int i = 1, j = 1; i <= num; i++) {\n    while( (q1[j].x < q2[i].x || (q1[j].x == q2[i].x && q1[j].tim < q2[i].tim) ) && j <= cnt) {\n      change(q1[j].tim + 1, q + 1, q1[j].val);\n      ++j;\n    }\n    ans[q2[i].id] = check(1, q2[i].tim, q2[i].val - a[q2[i].x]);\n  }\n  for(int i = 1; i <= q; i++) {\n    if(ans[i] != -1) write(ans[i]), putc('\\n');\n  }\n  flush();\n  return 0;\n}\n\n```",
        "postTime": 1638876384,
        "uid": 206021,
        "name": "Pitiless0514",
        "ccfLevel": 7,
        "title": "P3863 \u5e8f\u5217"
    },
    {
        "content": "## \u5206\u5757\n\n\n\n------------\n\n\u524d\u8a00\uff1a\u849f\u84bb\u5f88\u5c11\u5199\u5206\u5757\uff0c\u672c\u9898\u5e94\u8be5\u4e0d\u7b97\u592a\u6bd2\u7624\u4f46\u662f\u60f3\u4e86\u633a\u4e45\u6ca1\u60f3\u51fa\u6765\uff0c\u770b\u5b8c\u9898\u89e3\u601d\u8def\u5927\u6982\u61c2\u4e86\uff0c\u4f46\u4e0d\u592a\u4f1a\u5b9e\u73b0\uff0c\u5e76\u4e14\u88ab\u8d85\u957f\u4ee3\u7801\u5413\u4f4f\uff08\u9898\u89e3\u4ee3\u7801\u7528 VScode \u81ea\u5e26\u7684\u683c\u5f0f\u5316\u4e4b\u540e\u5927\u591a $200+$ \u884c\uff0c\u5c11\u7684\u4e5f $100+$ \u884c\uff09\uff0c\u849f\u84bb\u7422\u78e8\u4e86\u633a\u4e45\u81ea\u5df1\u5b9e\u73b0\u4e86\uff0c\u53d1\u73b0\u52a0\u4e0a\u8be6\u7ec6\u6ce8\u91ca\u4e5f\u53ea\u6709 $60+$ \u884c\uff08\u683c\u5f0f\u5316\u4e4b\u540e $80+$ \u884c\uff09\u3002\u6240\u4ee5\u4f5c\u6b64\u9898\u89e3\u5e0c\u671b\u53ef\u4ee5\u5e2e\u5230\u548c\u6211\u4e00\u6837\u5bf9\u5b9e\u73b0\u6709\u7591\u95ee\u7684\u4eba\u3002\n\n\n------------\n\n\u9996\u5148\uff0c\u5e26\u4fee\u4e5f\u53ef\u4ee5\u79bb\u7ebf\uff0c\u4f46\u662f\u4f1a\u4ece\u4e00\u7ef4\uff08\u5e8f\u5217\u7ef4\u5ea6\uff09\u53d8\u6210\u4e8c\u7ef4\uff08\u5e8f\u5217\u3001\u65f6\u95f4\u7ef4\u5ea6\uff09\uff0c\u591a\u4e86\u65f6\u95f4\u7ef4\u5ea6\u3002\n\n\n\u5982\u679c\u53ea\u662f\u5b9e\u73b0\u7ef4\u62a4\u6734\u5b9e\u7684\u4e8c\u7ef4\u4fe1\u606f\uff08\u52a0\u3001\u51cf\u3001\u6c42\u548c...\uff09\u90a3\u5f88\u7b80\u5355\uff0c\u6700\u7b80\u5355\u7684\u626b\u63cf\u7ebf\u5373\u53ef\uff0c\u9009\u62e9\u4e00\u4e2a\u7ef4\u5ea6\u626b\u8fc7\u53bb\uff0c\u53e6\u5916\u4e00\u4e2a\u7ef4\u62a4\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\n\n\n\u4f46\u662f\u8fd9\u91cc\u8981\u67e5\u8be2\u5927\u4e8e\u7b49\u4e8e $y$ \u7684\u503c\u51fa\u73b0\u6b21\u6570\uff0c\u5373 $y$ \u5728\u5386\u53f2\u4e0a\u51fa\u73b0\u7684\u6240\u6709\u503c\u4e2d\u7684\u6392\u540d\u3002\n\u8fd9\u4e2a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u8fd8\u597d\u672c\u9898\u65f6\u95f4\u9650\u5236\u5bbd\u677e\uff0c\u4ecd\u7136\u662f\u626b\u63cf\u7ebf\uff0c\u201c\u6570\u636e\u7ed3\u6784\u201d\u53ef\u4ee5\u4f7f\u7528\u6839\u53f7\u751a\u81f3\u6839\u53f7\u5bf9\u6570\u505a\u6cd5\u3002\u5728\u5e8f\u5217\u7ef4\u5ea6\u6876\u6392\u5e8f\uff0c\u4fee\u6539\u3001\u67e5\u8be2\u65f6\u95f4\u7ef4\u5ea6\uff08\u524d\u9762\u8bf4\u7684\u201c\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u201d\uff0c\u8fd9\u91cc\u7528\u5206\u5757\uff09\u3002\u5206\u5757\u52a0\u6392\u5e8f $O(n\\,\\sqrt{n} \\, \\log n)$\uff0c\u5177\u4f53\u5b9e\u73b0\u5728\u4ee3\u7801\u6709\u8be6\u7ec6\u6ce8\u91ca\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\uff08\u8be6\u7ec6\u6ce8\u91ca\u4e14\u4e0d\u592a\u538b\u884c\u8d85\u77ed\u554a\uff01\uff09\uff1a\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=300010,B=333;\nint n,q,ans[N],L[N],R[N],id[N];\nll tag[N];//\u6bcf\u4e2a\u5757\u7684\u533a\u95f4\u52a0\u61d2\u6807\u8bb0\nstruct A{\n    int pos;//pos\u662f\u539f\u672c\u7684\u4f4d\u7f6e\uff0c\u5b58\u4e0b\u624d\u80fd\u5224\u65ad\u5b83\u9700\u4e0d\u9700\u8981\u4fee\u6539/\u67e5\u8be2(\u6bcf\u4e2a\u5757\u5185\u90e8\u4f1a\u6253\u4e71\u987a\u5e8f\u7684\uff09\n    ll v;//V\u662f\u503c\n    bool operator<(const A &t){\n        if(v!=t.v) return v<t.v;\n        else return pos<t.pos;\n    }\n}a[N];\nstruct node{int t,pos,x;};//t=1:\u4fee\u6539\uff0ct=2:\u67e5\u8be2  pos\u662f\u4fee\u6539/\u67e5\u8be2\u7684\u65f6\u95f4\u7ef4\u5ea6\u4e0a\u4f4d\u7f6e\uff0cX\u662f\u589e\u52a0\u7684\u503c/\u67e5\u8be2\u7684\u503c\nvector<node> Do[N];//\uff08\u5e8f\u5217\u7ef4\u5ea6\uff09\u6876\u6392\u5e8f\ninline void modify(int l,int x)\n{\n    for(int i=L[id[l]];i<=R[id[l]];i++)//\u5757\u5185\n        if(a[i].pos>=l) //\u5c5e\u4e8e[l,q]\n            a[i].v+=x;\n    sort(a+L[id[l]],a+R[id[l]]+1);//\u6ce8\u610f\u8fd9\u4e2a\u5e8f\u5217\u662f\u65f6\u95f4\uff0c\u6240\u4ee5\u6392\u5e8f\u662f\u53ef\u4ee5\u7684\n    for(int i=id[l]+1;i<=(q-1)/B+1;i++) tag[i]+=x;\n}\ninline int query(int r,int x)\n{\n    int ans=0;\n    for(int i=L[id[r]];i<=R[id[r]];i++)\n        if(a[i].pos<=r&&a[i].v+tag[id[r]]>=x)\n            ans++;\n    for(int i=1;i<id[r];i++) \n        ans+=R[i]-(lower_bound(a+L[i],a+R[i]+1,A({0,x-tag[i]}))-a)+1;\n    return ans;\n}\nint main()\n{\n    memset(ans,-1,sizeof ans);//\u6807\u8bb0\u4e00\u4e0b\u6ca1\u6709\u8be2\u95ee\uff0c\u5426\u5219\u8f93\u51fa\u7684\u65f6\u5019\u4e0d\u77e5\u90530\u662f\u8fd9\u91cc\u6839\u672c\u6ca1\u6709\u8be2\u95ee\u8fd8\u662f\u7b54\u6848\u662f0\n    scanf(\"%d%d\",&n,&q); \n    q++;//\u628a\u6240\u6709\u4fee\u6539\u8be2\u95ee\u5411\u540e\u79fb\u4e00\u4e2a\uff0c\u628aQ=1\u5f53\u4f5c\u521d\u59cb\u503c\n    for(int i=1,a;i<=n;i++)\n    {\n        scanf(\"%d\",&a);\n        Do[i].push_back({1,1,a});\n        Do[i+1].push_back({1,1,-a});//\u8fd9\u4e24\u884c\u76f8\u5f53\u4e8e\u53ea\u6539[i,i]\n    }\n    for(int i=2,op,l,r,x,p,y;i<=q;i++)\n    {\n        scanf(\"%d\",&op);\n        if(op==1) \n        {\n            scanf(\"%d%d%d\",&l,&r,&x);\n            Do[l].push_back({1,i,x});\n            Do[r+1].push_back({1,i,-x});//\u8fd9\u4e24\u884c\u76f8\u5f53\u4e8e\u6539[l,r]\n        }\n        else scanf(\"%d%d\",&p,&y),Do[p].push_back({2,i,y});\n    }\n    for(int i=1;i<=q;i++) a[i]={i,0},id[i]=(i-1)/B+1;\n    for(int i=1;i<=(q-1)/B+1;i++) L[i]=B*(i-1)+1,R[i]=min(B*i,q);\n    for(int i=1;i<=n;i++)\n        for(node t:Do[i])//\u64cd\u4f5c\u5e8f\u5217\u4e0a\u7684\u6bcf\u4e2a\u4f4d\u7f6e\n        {\n            if(t.t==1) modify(t.pos,t.x);//\u4fee\u6539[t.pos,q]\n            else ans[t.pos]=query(t.pos-1,t.x);//\u67e5\u8be2[1,t.pos-1]\n        }\n    for(int i=2;i<=q;i++) if(~ans[i]) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n",
        "postTime": 1665321724,
        "uid": 546246,
        "name": "E_huan",
        "ccfLevel": 8,
        "title": "P3863 \u9898\u89e3"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u4e00\u7bc7\u9898\u89e3\u90fd\u6ca1\u6709\uff1f\uff1f\uff1f\n\n\u7b97\u6cd5\u4e00\uff1a\n\u6bcf\u4e00\u6b21\u4fee\u6539\u65f6\u76f4\u63a5\u590d\u5236\u4e00\u904d\uff0c\u67e5\u8be2\u65f6\u66b4\u529b\u67e5\u8be2\uff0c\u590d\u6742\u5ea6\u5c31\u4e0d\u5206\u6790\u4e86\uff0c\u671f\u671b\u5f97\u520620\u5206\n\n\u7b97\u6cd5\u4e8c\uff1a\n\u6211\u4eec\u8003\u8651\u6bcf\u4e00\u6b21\u8be2\u95ee\u65f6\u80fd\u5bf9\u6b64\u6b21\u8be2\u95ee\u4ea7\u751f\u5f71\u54cd\u7684\u4fee\u6539\u64cd\u4f5c\u6709\u54ea\u4e00\u4e9b\uff0c\u6211\u4eec\u5c06\u6240\u6709\u64cd\u4f5c\u79bb\u7ebf\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\u6211\u4eec\u6309\u7167L\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u518d\u5c06\u8be2\u95ee\u4e5f\u6309\u7167\u67e5\u8be2\u65f6\u95f4\u6392\u5e8f\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b21\u8be2\u95ee\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u901f\u627e\u51fa\u5f71\u54cd\u6b64\u6b21\u7b54\u6848\u7684\u4fee\u6539\uff0c\u7136\u540e\u67e5\u8be2\u5373\u53ef\u3002\u671f\u671b\u5f97\u520670\u5206\u3002\n\n\u7b97\u6cd5\u4e09\uff1a\n\u6211\u4eec\u8003\u8651\u5229\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u5728\u65f6\u95f4\u70b9\u4e3ax\u65f6\u7684\u72b6\u6001\uff0c\u6211\u4eec\u8981\u4e00\u4e2a\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u5927\u4e8e\u7b49\u4e8ex\u6570\u7684\u4e2a\u6570\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u60f3\u5230\u5206\u5757\uff0c[\u89c1\u6b64\u9898](https://www.luogu.org/problemnew/show/P2801)\n\n\u8bb0\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u5de6\u7aef\u70b9\u4e3al\uff0c\u53f3\u7aef\u70b9\u4e3ar\u65f6\u95f4\u4e3at\uff0c\u589e\u52a0\u91cf\u4e3ax\n\n\u6bcf\u4e00\u6b21\u8be2\u95ee\u7684\u4f4d\u7f6e\u4e3ax\uff0c\u65f6\u95f4\u4e3at\uff0c\u67e5\u8be2\u6570\u5b57\u4e3ay\n\n\u8003\u8651\u5230\u533a\u95f4\u4fee\u6539\u4e0d\u4f1a\u5bf9\u6392\u5e8f\u4ea7\u751f\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u5c06\u5757\u4e2d\u7684\u6570\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u5728logn\u7684\u65f6\u95f4\u5185\u627e\u51fa\u5927\u4e8e\u7b49\u4e8ex\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8fb9\u89d2\u4fee\u6539\u65f6\u5c31\u76f4\u63a5\u91cd\u6784\u3002\u590d\u6742\u5ea6\u4e3anlogn\u6839\u53f7n\n\n\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5206\u5757\uff0c\u4ee5\u65f6\u95f4\u4e3a\u4e0b\u6807\uff0c\u8868\u793a\u5728\u5e8f\u5217\u7684x\u5904\uff0c\u5404\u4e2a\u65f6\u95f4\u6bb5\u7684\u60c5\u51b5\uff0c\u8fd8\u8981\u7528\u4e00\u4e2a\u96c6\u5408\u7ef4\u62a4\u6240\u6709\u5e94\u7528\u7684\u64cd\u4f5c\u3002\u6bcf\u4e00\u6b21\u64cd\u4f5c\u5982\u679c\u5bf9\u4e8ex\u5904\u6709\u5f71\u54cd\uff0c\u5c31\u5c06\u5206\u5757\u4e2dt\u5230q\u52a0\u4e0ax\u3002\u5f53\u6211\u4eec\u5206\u5757\u7ef4\u62a4\u7684x\u8f6c\u79fb\u5230y\u5904\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u64cd\u4f5c\u96c6\u5408\u4e2d\u4e0d\u4f1a\u5bf9y\u4ea7\u751f\u5f71\u54cd\u7684\u64cd\u4f5c\u5220\u6389\uff0c\u5373\u5c06t\u5230q\u7684\u4f4d\u7f6e\u51cf\u53bbx,\u7136\u540e\u518d\u5c06\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u5f71\u54cd\u64cd\u4f5c\u5e94\u7528\uff0c\u67e5\u8be2\u65f6\u5c31\u662f\u67e5\u8be21\u5230t\u4e2d\u5927\u4e8e\u7b49\u4e8ey\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a\n\n\u603b\u4f53\u590d\u6742\u5ea6nlogn\u6839\u53f7n\n```cpp\n# include<iostream>\n# include<cstdio>\n# include<algorithm>\n# include<cmath>\n# include<cstring>\n# include<queue>\nusing namespace std;\ntypedef long long LL;\nconst int mn = 100100;\npriority_queue< pair<int,int> > q;\nint n,Q,c[mn],cnt1,cnt2;\nstruct ask{int pos,ti,val,id;};\nask a[mn];\nbool cmp1(ask x,ask y)\n{\n    if(x.pos==y.pos) return x.ti<y.ti;\n    else return x.pos<y.pos;\n}\nstruct update{int l,r,val,ti;};\nupdate b[mn];\nbool cmp2(update x,update y)\n{\n    if(x.l==y.l) return x.ti<y.ti;\n    else return x.l<y.l;\n}\nint bl[mn],siz;\nLL pa[mn],up[mn],tag[5000];\nint ans[mn];\nvoid change(int l,int r,LL d)\n{\n    if(bl[l]==bl[r])\n    {\n        for(int i=l;i<=r;i++)\n            up[i]+=d;\n        int m=min(Q+1,bl[l]*siz);\n        for(int i=(bl[l]-1)*siz+1;i<=m;i++)\n            pa[i]=up[i];\n        sort(pa+(bl[l]-1)*siz+1,pa+m+1);\n        return ;\n    }\n    else {\n        for(int i=l;i<=bl[l]*siz;i++)\n            up[i]+=d;\n        for(int i=(bl[l]-1)*siz+1;i<=bl[l]*siz;i++)\n            pa[i]=up[i];\n        for(int i=(bl[r]-1)*siz+1;i<=r;i++)\n            up[i]+=d;\n        int m=min(bl[r]*siz,Q+1);\n        for(int i=(bl[r]-1)*siz+1;i<=m;i++)\n            pa[i]=up[i];\n        sort(pa+(bl[l]-1)*siz+1,pa+bl[l]*siz+1);\n        sort(pa+(bl[r]-1)*siz+1,pa+m+1);\n        for(int i=bl[l]+1;i<=bl[r]-1;i++)\n            tag[i]+=d;\n    }\n}\nint cal(int x,LL y)\n{\n    int m=min(x*siz,Q+1);\n    int tmp=lower_bound(pa+(x-1)*siz+1,pa+m+1,y)-pa;\n    if(tmp==x*siz+1) return 0;\n    tmp=x*siz-tmp+1;\n    return tmp;\n}\nint query(int x,LL y)\n{\n    //printf(\"%d\\n\",x);\n    int ret=0;\n    for(int i=1;i<=bl[x]-1;i++)\n        ret+=cal(i,y-tag[i]);\n    for(int i=(bl[x]-1)*siz+1;i<=x;i++)\n        if(tag[bl[i]]+up[i]>=y) ret++;\n    return ret;\n}\nint main()\n{\n    int opt,x,y;\n    scanf(\"%d%d\",&n,&Q);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\",&c[i]);\n    for(int i = 2; i <= Q+1; i++)\n    {\n        scanf(\"%d\",&opt);\n        if(opt==1)\n        {\n            cnt2++;\n            scanf(\"%d%d%d\",&b[cnt2].l,&b[cnt2].r,&b[cnt2].val);\n            b[cnt2].ti=i;\n        }\n        else{\n            cnt1++;\n            scanf(\"%d%d\",&a[cnt1].pos,&a[cnt1].val);\n            a[cnt1].ti=i;\n            a[cnt1].id=cnt1;\n        }\n    }\n    sort(a+1, a+1+cnt1, cmp1);\n    sort(b+1, b+1+cnt2, cmp2);\n    n++;\n    siz=sqrt(1.0*n);\n    for(int i = 1; i<=Q + 1; i++)\n        bl[i]=(i-1) / siz + 1;\n    int now=1;\n    for(int i = 1; i<=cnt1; i++)\n    {\n        while(!q.empty() && -q.top().first<a[i].pos)\n        {\n            int xx=q.top().second;\n            change(b[xx].ti,Q+1,-b[xx].val);\n            q.pop();\n        }\n        if(a[i].pos!=a[i-1].pos)\n        {\n            change(1,Q+1,c[a[i].pos]);\n            change(1,Q+1,-c[a[i-1].pos]);\n        }\n        while(b[now].l <= a[i].pos && now <= cnt2)\n        {\n            /*change(1,b[now].ti,b[now].val);\n            q.push(make_pair(-b[now].r,now));\n            now++;*/\n            if(b[now].r<a[i].pos) {now++;continue;}\n            change(b[now].ti,Q+1,b[now].val);\n            q.push(make_pair(-b[now].r,now));\n            now++;\n        }\n        ans[a[i].id] = query(a[i].ti-1,a[i].val);\n    }\n    for(int i = 1; i <= cnt1 ;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1536819510,
        "uid": 58931,
        "name": "logeadd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3863 \u30108\u6708\u6708\u8d5bC\u3011"
    },
    {
        "content": "\u5e8f\u5217\n\n[Github Blog](https://onlypath.github.io/2022/03/30/P3863/)\u3002\n\n\u8fd9\u4e2a\u9898\u6bd4\u8f83\u795e\u5947\uff0c\u6211\u4eec\u91c7\u7528\u626b\u63cf\u7ebf\u7684\u65b9\u6cd5\uff0c\u5e76\u79bb\u7ebf\u5904\u7406\u8be2\u95ee\u3002\n\n\u5927\u6982\u6765\u8bf4\uff0c\u5c31\u662f\u8fd9\u6837\u7684\uff1a\n\n![\u793a\u610f\u56fe](https://cdn.luogu.com.cn/upload/image_hosting/l5n7x970.png)\n\n\u8fd9\u91cc\u6bcf\u6761\u84dd\u8272\u7684\u7ebf\u6bb5\u8868\u793a\u5728\u8fd9\u4e2a\u65f6\u95f4\u5bf9\u5e8f\u5217\u8fdb\u884c\u4e86\u64cd\u4f5c\u3002\n\n\u7136\u540e\u6211\u4eec\u7684\u6bcf\u4e2a\u8be2\u95ee\u5b9e\u9645\u4e0a\u5c31\u662f\u9488\u5bf9\u5e73\u9762\u4e0a\u7684\u67d0\u4e2a\u7ad6\u76f4\u5411\u4e0a\u7684\u5c04\u7ebf\u7684\u4fe1\u606f\u7684\u8be2\u95ee\u3002\n\n\u6211\u4e0d\u592a\u597d\u89e3\u91ca\u8fd9\u4e2a\u4e1c\u897f/kk\u3002\n\n\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u626b\u63cf\u7ebf\u626b\u5230\u4e86\u4e00\u4e2a\u4f4d\u7f6e $x$\uff0c\u5b83\u5bf9\u5e94\u5e8f\u5217\u8f74\u4e0a\u6a2a\u5750\u6807\u4e3a $x$ \u7684\u7ad6\u76f4\u7ebf\uff0c\u8868\u793a\u73b0\u5728\u6211\u4eec\u8981\u5bf9 $p=x$ \u7684\u6240\u6709\u8be2\u95ee\u8fdb\u884c\u96c6\u4e2d\u5904\u7406\u3002\n\n\u8be2\u95ee\u7684\u5c31\u662f\u8be5\u70b9\u5728\u65f6\u95f4 $i-1$ \u53ca\u4e4b\u524d\uff08\u4e00\u76f4\u5230 0\uff09\u6570\u503c\u4e0a\u5927\u4e8e\u7b49\u4e8e $y$ \u7684\u79d2\u6570\uff0c\u5bf9\u5e94\u5230\u8fd9\u4e2a\u5e73\u9762\u4e0a\u5c31\u662f\u626b\u63cf\u7ebf\u7eb5\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e $i-1$ \u7684\u90a3\u4e00\u6bb5\u4e2d\uff0c\u7edf\u8ba1\u4e00\u4e0b\u8fd9\u4e2a\u5927\u4e8e\u7b49\u4e8e $y$ \u7684\u6570\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n\u6bcf\u6b21\u626b\u4e4b\u524d\u6211\u4eec\u8981\u5148\u628a\u7ea2\u7ebf\u548c\u7c89\u7ebf\u8fdb\u884c\u64cd\u4f5c\uff0c\u5373\u5728\u5e73\u884c\u4e8e\u626b\u63cf\u7ebf\u7684\u65f6\u95f4\u5e8f\u5217\u4e0a\u52a0\u6216\u51cf\u64cd\u4f5c\u7684\u6570\u3002\n\n\u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u4e00\u822c\u7684\u626b\u63cf\u7ebf\u662f\u7ebf\u6bb5\u6811\uff0c\u4f3c\u4e4e\u5f88\u96be\u5904\u7406\u8fd9\u7c7b\u8be2\u95ee\u5927\u4e8e\u7b49\u4e8e $y$ \u7684\u6570\u7684\u4e2a\u6570\u4e4b\u7c7b\u7684\u95ee\u9898\u3002\u3002\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5206\u5757\u7ef4\u62a4\u3002\n\n\u8fd9\u4e2a\u5206\u5757\u7ef4\u62a4\u7684\u5957\u8def\u5b9e\u9645\u4e0a\u6bd4\u8f83\u5165\u95e8\u3002\u6bcf\u4e2a\u5757\u5185\u5143\u7d20\u9884\u5148\u6392\u5e8f\uff0c\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6574\u5757\u4e8c\u5206\u5f97\u5230\u4e2a\u6570\uff0c\u5bf9\u4e8e\u96f6\u6563\u5757\u76f4\u63a5\u66b4\u529b\u7edf\u8ba1\uff1b\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u6574\u5757\u76f4\u63a5\u7528 ```laztag```\uff0c\u96f6\u6563\u5757\u66b4\u529b\u91cd\u6784\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n}\\log n)$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nnamespace Ehnaev{\n  inline ll read() {\n    ll ret=0,f=1;char ch=getchar();\n    while(ch<48||ch>57) {if(ch==45) f=-f;ch=getchar();}\n    while(ch>=48&&ch<=57) {ret=(ret<<3)+(ret<<1)+ch-48;ch=getchar();}\n    return ret*f;\n  }\n  inline void write(ll x) {\n    static char buf[22];static ll len=-1;\n    if(x>=0) {do{buf[++len]=x%10+48;x/=10;}while(x);}\n    else {do{buf[++len]=-(x%10)+48;x/=10;}while(x);}\n    while(len>=0) putchar(buf[len--]);\n  }\n}using Ehnaev::read;using Ehnaev::write;\ninline void writeln(ll x) {write(x);putchar(10);}\n\nconst ll N=1e5,M=1e3;\n\nll n,m,nn,cnt,cntq;\nll a[N+5],pos[N+5];\n\nstruct Opt{\n  ll l,r,val,id;\n  inline bool operator<(const Opt& rhs) const{return id<rhs.id;}\n}opt[N+5];\n\nstruct Qry{ll id,pos,val,ans;}q[N+5];\n\ninline bool Cmp1(Qry x,Qry y) {return x.pos<y.pos;}\ninline bool Cmp2(Qry x,Qry y) {return x.id<y.id;}\n\nstruct node{\n  ll val,id;\n  inline node() {}\n  inline node(ll x,ll y):val(x),id(y){}\n  inline bool operator<(const node& rhs) const{return val<rhs.val;}\n};\n\nstruct Block{node a[M+5];ll l,r,laz;}blo[M+5];\n\ninline void Add(ll l,ll r,ll k) {\n  if(pos[l]==pos[r]) {\n    ll len=blo[pos[l]].r-blo[pos[l]].l+1;\n    for(ll i=1;i<=len;i++) {\n      ll tmp=blo[pos[l]].a[i].id;\n      if(tmp>=l&&tmp<=r) blo[pos[l]].a[i].val+=k;\n    }\n    sort(blo[pos[l]].a+1,blo[pos[l]].a+len+1);\n  }\n  else {\n    if(l==blo[pos[l]].l) {blo[pos[l]].laz+=k;}\n    else {\n      ll len=blo[pos[l]].r-blo[pos[l]].l+1;\n      for(ll i=1;i<=len;i++) {\n        ll tmp=blo[pos[l]].a[i].id;\n        if(tmp>=l) blo[pos[l]].a[i].val+=k;\n      }\n      sort(blo[pos[l]].a+1,blo[pos[l]].a+len+1);\n    }\n    if(r==blo[pos[r]].r) {blo[pos[r]].laz+=k;}\n    else {\n      ll len=blo[pos[r]].r-blo[pos[r]].l+1;\n      for(ll i=1;i<=len;i++) {\n        ll tmp=blo[pos[r]].a[i].id;\n        if(tmp<=r) blo[pos[r]].a[i].val+=k;\n      }\n      sort(blo[pos[r]].a+1,blo[pos[r]].a+len+1);\n    }\n    for(ll i=pos[l]+1;i<pos[r];i++) blo[i].laz+=k;\n  }\n}\n\ninline ll Ask(ll l,ll r,ll k,ll x) {\n  ll res=0;\n  if(pos[l]==pos[r]) {\n    ll len=blo[pos[l]].r-blo[pos[l]].l+1;\n    for(ll i=1;i<=len;i++) {\n      ll tmp=blo[pos[l]].a[i].id;\n      if(tmp>=l&&tmp<=r) {\n        res+=(blo[pos[l]].a[i].val+blo[pos[l]].laz+a[x]>=k);\n      }\n    }\n  }\n  else {\n    ll len=blo[pos[l]].r-blo[pos[l]].l+1;\n    for(ll i=1;i<=len;i++) {\n      ll tmp=blo[pos[l]].a[i].id;\n      if(tmp>=l) {\n        res+=(blo[pos[l]].a[i].val+blo[pos[l]].laz+a[x]>=k);\n      }\n    }\n    // printf(\"here:\\n\");\n    // printf(\"l=%lld r=%lld\\n\",l,r);\n    // printf(\"x=%lld res=%lld\\n\",x,res);\n    len=blo[pos[r]].r-blo[pos[r]].l+1;\n    for(ll i=1;i<=len;i++) {\n      ll tmp=blo[pos[r]].a[i].id;\n      if(tmp<=r) {\n        res+=(blo[pos[r]].a[i].val+blo[pos[r]].laz+a[x]>=k);\n      }\n    }\n    // printf(\"x=%lld res=%lld\\n\",x,res);\n    for(ll i=pos[l]+1;i<pos[r];i++) {\n      ll len=blo[i].r-blo[i].l+1;\n      ll tmp=lower_bound(blo[i].a+1,blo[i].a+len+1\n      ,node(k-blo[i].laz-a[x],0))-blo[i].a-1;\n      res+=len-tmp;\n    }\n    // printf(\"x=%lld res=%lld\\n\",x,res);\n  }\n  return res;\n}\n\nint main() {\n\n  n=read();m=read();\n  nn=max(1ll,(ll)sqrt(m+1));\n  for(ll i=1;i<=n;i++) {a[i]=read();}\n  for(ll i=0,cntt=1;i<=m;i+=nn,cntt++) {\n    blo[cntt].l=i;blo[cntt].r=i+nn-1;if(blo[cntt].r>m) blo[cntt].r=m;\n    for(ll j=blo[cntt].l,k=1;j<=blo[cntt].r;j++,k++) {\n      blo[cntt].a[k].val=0;blo[cntt].a[k].id=j;pos[j]=cntt;\n    }\n    ll len=blo[cntt].r-blo[cntt].l+1;\n    sort(blo[cntt].a+1,blo[cntt].a+len+1);\n  }\n\n  for(ll i=1;i<=m;i++) {\n    ll op=read();\n    if(op==1) {\n      ll l,r,x;l=read();r=read();x=read();\n      opt[++cnt].l=i;opt[cnt].r=m;opt[cnt].val=x;opt[cnt].id=l;\n      opt[++cnt].l=i;opt[cnt].r=m;opt[cnt].val=-x;opt[cnt].id=r+1;\n    }\n    if(op==2) {\n      ll p,y;p=read();y=read();\n      q[++cntq].id=i;q[cntq].pos=p;q[cntq].val=y;\n    }\n  }\n\n  sort(opt+1,opt+cnt+1);sort(q+1,q+cntq+1,Cmp1);\n\n  for(ll i=1,it=1,jt=1;i<=n;i++) {\n    while(opt[it].id==i) {Add(opt[it].l,opt[it].r,opt[it].val);it++;}\n    while(q[jt].pos==i) {q[jt].ans=Ask(0,q[jt].id-1,q[jt].val,i);jt++;}\n  }\n\n  sort(q+1,q+cntq+1,Cmp2);\n\n  for(ll i=1;i<=cntq;i++) {writeln(q[i].ans);}\n\n  return 0;\n}\n```",
        "postTime": 1648643815,
        "uid": 154279,
        "name": "Apolynth",
        "ccfLevel": 0,
        "title": "P3863"
    },
    {
        "content": "\u5907\u9009 T4\u3002                   \n\n\u300a\u5173\u4e8e\u6211\u7b2c\u4e8c\u904d\u8bfb\u9898\u8bfb\u9519\u4ee5\u81f4\u4e8e\u770b\u4e0d\u61c2\u81ea\u5df1\u4ee5\u524d\u505a\u6cd5\u8fd9\u4ef6\u4e8b\u300b                 \n\n\u5176\u5b9e\u5e76\u4e0d\u662f\u4e00\u9053\u5f88\u96be\u7684\u9898\uff0c\u4e0d\u8fc7\u8fd9 trick \u6211\u5012\u662f\u7b2c\u4e00\u6b21\u89c1\u3002           \n\n\u9898\u76ee\u8981\u6c42\u8be2\u95ee\u5355\u70b9\u5386\u53f2 $a_p$ \u503c\u5728\u4e00\u4e2a\u524d\u7f00\u503c\u57df\u91cc\u7684\u6570\u91cf\uff0c\u7136\u540e\u9644\u4e0a\u533a\u95f4\u52a0\u3002                 \n\n\u5982\u679c\u6211\u4eec\u80fd\u901a\u8fc7\u6570\u636e\u7ed3\u6784\u4efb\u610f\u65f6\u523b $a_p$ \u7684\u503c\u7684\u8bdd\u8c8c\u4f3c\u5c31\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4 kth \u6765\u56de\u7b54\u67e5\u8be2\u3002                \n\n\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u6027\u8d28\u5373\u6211\u4eec\u53d1\u73b0\u52a0\u4e0a\u65f6\u95f4\u4e00\u7ef4\u540e\u8fd9\u5176\u5b9e\u662f\u4e2a\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\uff0c\u6240\u4ee5\u8003\u8651\u626b\u63cf\u7ebf\u79bb\u7ebf\u7ef4\u5ea6\u3002\n\n\u6211\u4eec\u8003\u8651\u53ef\u4ee5\u628a $[l,r]$ \u7684\u533a\u95f4\u52a0\u62c6\u6210 $[l , n]$ \u548c $[r + 1 , n]$ \u540e\u7f00\u52a0\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u5bf9\u4e8e\u65f6\u95f4\u8fd9\u4e00\u7ef4\u800c\u8a00\u4fee\u6539\u4e5f\u662f\u540e\u7f00\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u6309\u6bcf\u4e2a\u540e\u7f00\u4fee\u6539\u7684\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u53ea\u8981\u5de6\u7aef\u70b9\u5728\u4e00\u4e2a\u67e5\u8be2\u7684\u70b9 $p$ \u524d\u9762\u5fc5\u5b9a\u4f1a\u5f71\u54cd $a_p$ \u7684\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u56de\u7b54\u4e00\u4e2a\u8be2\u95ee\u524d\u53ea\u8981\u628a\u6240\u6709\u540e\u7f00\u4fee\u6539\u7684\u5de6\u7aef\u70b9\u5728\u8be2\u95ee\u70b9 $p$ \u4e4b\u524d\u7684\u4fee\u6539\u90fd\u5bf9\u5e94\u7684\u52a0\u5230\u65f6\u95f4\u4e0a\u9762\u53bb\u5c31\u597d\u4e86\u3002                   \n\n\u7136\u540e\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\u4e00\u4e2a\u540e\u7f00\u52a0\uff0c\u524d\u7f00\u67e5\u8be2 kth \u503c\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u7528\u4e00\u822c\u5f62\u5f0f\u7684\u533a\u95f4\u52a0\u533a\u95f4 kth \u5206\u5757\u505a\u5c31\u53ef\u4ee5\u4e86\uff0c\u76f4\u63a5 $O(m \\sqrt n \\log n)$ \u968f\u4fbf\u91cd\u6784\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u5b9e\u73b0\u7cbe\u7ec6\u7684 $O(m \\sqrt {n \\log n})$ \u548c $O(m \\sqrt n)$ \u53ef\u4ee5\u770b P5356 \u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002                  \n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\n#define int long long\nconst int Len = 2e5 + 5 , SIZE = 525;\nint n,m,L[SIZE],R[SIZE],t,cntu,cntq,Print[Len],pos[Len],tag[SIZE];\nint A[Len],a[Len],b[Len];\nstruct node\n{\n\tint idx,val,tim,id,ans;\n\tnode(){idx = 0 , val = 0 , tim = 0;}\n\tnode(int IDX,int VAL,int TIM,int ID){idx = IDX , val = VAL , tim = TIM , id = ID;}\n}Upd[Len] , Ques[Len];\nbool cmp(node x , node y){return x.idx < y.idx;}\nbool cmpd(node x,node y){return x.tim < y.tim;}\nvoid Init()\n{\n\tt = sqrt(m + 1); \n\tfor(int i = 1 ; i <= t ; i ++) L[i] = (i - 1) * t + 1 , R[i] = i * t;\n\tif(R[t] < m + 1) R[t] = m + 1;\n\tfor(int i = 1 ; i <= t ; i ++)\n\t\tfor(int j = L[i] ; j <= R[i] ; j ++) pos[j] = i;\n\tfor(int i = 1 ; i <= t ; i ++) sort(b + L[i] , b + R[i] + 1);\n}\nvoid maintain(int t)\n{\n\tfor(int i = L[t] ; i <= R[t] ; i ++) b[i] = a[i];\n\tsort(b + L[t] , b + R[t] + 1);\n}\nvoid update(int l,int r,int val)\n{\n\tint Ll = pos[l] , Rr = pos[r];\n\tif(Ll == Rr)\n\t{\n\t\tfor(int i = l ; i <= r ; i ++) a[i] += val;\n\t\tmaintain(Ll);\n\t\treturn;\n\t}\n\tfor(int i = l ; i <= R[Ll] ; i ++) a[i] += val;\n\tmaintain(Ll);\n\tfor(int i = Ll + 1 ; i <= Rr - 1 ; i ++) tag[i] += val;\n\tfor(int i = L[Rr] ; i <= r ; i ++) a[i] += val;\n\tmaintain(Rr); \n}\nint query(int l,int r,int val)\n{\n\tint Ll = pos[l] , Rr = pos[r] , res = 0;\n\tif(Ll == Rr)\n\t{\n\t\tfor(int i = l ; i <= r ; i ++) if(a[i] >= val - tag[Ll]) res ++;\n\t\treturn res;\n\t} \n\tfor(int i = l ; i <= R[Ll] ; i ++) if(a[i] >= val - tag[Ll]) res ++;\n\tfor(int i = Ll + 1 ; i <= Rr - 1 ; i ++) res += R[i] - (lower_bound(b + L[i] , b + R[i] + 1 , val - tag[i]) - b) + 1;\n\tfor(int i = L[Rr] ; i <= r ; i ++) if(a[i] >= val - tag[Rr]) res ++;\n\treturn res;\n}\nsigned main()\n{\n\tscanf(\"%lld %lld\",&n,&m);\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%lld\",&A[i]);\n\tInit();\n\tfor(int k = 1 ; k <= m ; k ++)\n\t{\n\t\tint opt;scanf(\"%lld\",&opt);\n\t\tif(opt == 1)\n\t\t{\n\t\t\tint l,r,x;scanf(\"%lld %lld %lld\",&l,&r,&x);\n\t\t\tUpd[++ cntu] = node(l , x , k + 1 , 0);\n\t\t\tUpd[++ cntu] = node(r + 1 , -x , k + 1 , 0);\n\t\t}\n\t\tif(opt == 2)\n\t\t{\n\t\t\tint p,y;scanf(\"%lld %lld\",&p,&y);\n\t\t\tQues[++ cntq] = node(p , y , k + 1 , k);\n\t\t}\n\t}\t\n\tsort(Upd + 1 , Upd + 1 + cntu , cmp);\n\tsort(Ques + 1 , Ques + 1 + cntq , cmp);\n\t//for(int i = 1 ; i <= cntu ; i ++) printf(\"%lld %lld %lld %lld\\n\",Upd[i].idx,Upd[i].val,Upd[i].tim,Upd[i].id,Upd[i].ans);\n\tint num = 1;\n\tfor(int i = 1 ; i <= cntq ; i ++) \n\t{\n\t\twhile(num <= cntu && Upd[num].idx <= Ques[i].idx) \n\t\t{\n\t\t\tupdate(Upd[num].tim , m + 1 , Upd[num].val);\n\t\t\tnum ++;\t\n\t\t}\n\t\t//printf(\"%lld %lld %lld\\n\",Ques[i].tim,Ques[i].val,Ques[i].idx);\n\t\tQues[i].ans = query(1 , Ques[i].tim - 1 , Ques[i].val - A[Ques[i].idx]);\n\t}\n\tsort(Ques + 1 , Ques + 1 + cntq , cmpd);\n\tfor(int i = 1 ; i <= cntq ; i ++) printf(\"%lld\\n\",Ques[i].ans);\n\treturn 0;\n}\n```",
        "postTime": 1630144932,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3863 \u5e8f\u5217"
    },
    {
        "content": "> \u8ddd ${{{C_S}^{P_-}}_S}+AFO$ \u8fd8\u5269 $-inf$ \u5929\n\n\u5206\u5757\u9898(\u4f3c\u4e4e\u5f52\u5e76\u6811\u4e5f\u80fd\u5199,~~\u4f46\u849f\u84bb\u4e0d\u4f1a~~).\n\n\u697c\u4e0a\u795e\u7287\u5199\u5f97\u5df2\u7ecf\u5f88\u597d\u4e86(~~\u4e8e\u662f\u6211\u5c31\u6765\u6c34\u9898\u89e3\u4e86~~),\u8fd9\u7bc7\u9898\u89e3\u548c\u697c\u4e0a\u7684\u89e3\u6cd5\u5dee\u4e0d\u591a(~~\u53ef\u80fd\u66f4\u5dee~~).\n\n## solve\n\n\u4ee5\u4e0b\u5047\u8bbe\u795e\u7287\u4eec\u5b66\u4f1a\u4e86[\u5206\u5757](http://hzwer.com/8053.html)\n\n\u4f3c\u4e4e\u4e5f\u6ca1\u4ec0\u4e48\u7b80\u5355\u89e3\u6cd5,\u533a\u95f4\u4fee\u6539+\u5386\u53f2\u67e5\u8be2\u4e5f\u96be\u4ee5\u5b9e\u73b0.\n\n\u5bf9\u4e8e\u5355\u4e2a\u6570(\u6570\u5217\u4e2d\u7684\u5355\u4e2a\u6570)\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c,\u6309\u65f6\u95f4\u5efa\u5206\u5757\u6570\u7ec4\u80fd\u5feb\u901f\u6c42\u89e3:\n\n> + \u9996\u5148\u6309\u65f6\u95f4\u987a\u5e8f\u5904\u7406\u4e0e\u5f53\u524d\u6570(\u6570\u5217\u4e2d\u7684\u5355\u4e2a\u6570)\u64cd\u4f5c\n>\n> + \u5355\u4e2a\u6570\u4fee\u6539:\u8bbe\u4e0e\u8be5\u6570\u76f8\u5173\u7684\u64cd\u4f5c\u53d1\u751f\u65f6\u95f4\u4e3ai,\u90a3\u4e48\u7ed9\u533a\u95f4$[i, m+1)$\u52a0\u4e0a\u8981\u52a0\u4e0a\u7684\u503c,\u7528\u5206\u5757\u76f4\u63a5\u66f4\u65b0\n>\n> + \u5355\u4e2a\u6570\u67e5\u8be2:\u7528\u5206\u5757\u76f4\u63a5\u67e5\u8be2\u533a\u95f4$[0,i)$\u5185(\u4e0b\u68070\u5b58\u521d\u59cb\u6570\u636e)\u6ee1\u8db3\u8981\u6c42\u7684\u6570\u7684\u6570\u91cf\n\n\u4f46\u6574\u4e2a\u6570\u5217\u5982\u4f55\u5904\u7406\u5462?\n\n\u8003\u8651\u5c06\u67e5\u8be2\u53ca\u64cd\u4f5c\u79bb\u7ebf,\u5c06\u67e5\u8be2\u6216\u64cd\u4f5c\u6309\u539f\u5e8f\u5217\u4e0b\u6807$0 \\leq i < n$\u4ee5\u53ca\u65f6\u95f4\u6392\u5e8f(\u5148\u6309\u4e0b\u6807\u6392\u5e8f,\u518d\u6309\u65f6\u95f4\u6392\u5e8f).\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6570\u76f8\u5173\u7684\u64cd\u4f5c\u53ca\u7b54\u6848\u5c31\u80fd\u5728\u5927\u7ea6$O(m \\sqrt m)$\u5185\u5f97\u5230.\n\n\u4f46\u76f4\u63a5\u66b4\u529b\u7b97\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nm \\sqrt m)$,\u8fd9\u4f9d\u7136\u4e0d\u591f,\u56e0\u4e3a\u64cd\u4f5c\u662f\u5728\u8fde\u7eed\u533a\u95f4\u4e0a\u7684,\u5bf9\u4e8e\u540c\u4e00\u4e2a\u64cd\u4f5c\u5355\u4e2a\u6570\u6c42\u89e3\u53ef\u80fd\u4f1a\u6709\u91cd\u590d\u8ba1\u7b97.\n\n\u63a5\u4e0b\u6765\u7740\u624b\u5229\u7528\u540c\u4e00\u4e2a\u6570\u7ec4\u5b8c\u6210\u6c42\u89e3\n\n##### 1. \u5904\u7406\u8f6c\u79fb\u4e0d\u540c\u7684\u6570$vul_1$\u548c$vul_2$\u7684\u60c5\u51b5\n\n\u5f53\u5904\u7406\u5b8c$vul_1$\u7684\u64cd\u4f5c,\u8981\u5f00\u59cb\u5904\u7406$vul_2$\u7684\u64cd\u4f5c\u65f6,\u53ea\u8981\u7ed9\u533a\u95f4$[0,m+1)$\u52a0\u4e0a$vul_2-vul_1$\u5c31\u53ef\u5b8c\u6210\u4e0d\u540c\u6570\u7684\u8f6c\u79fb\n\n##### 2. \u5904\u7406\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u4e0e\u67e5\u8be2\n\n\u8003\u8651\u5c06\u540c\u4e00\u4e2a\u64cd\u4f5c \u5728\u65f6\u95f4$i$\u66f4\u65b0$[l,r)+c$ \u89c6\u4e3a\n\n> 1. \u5f53\u5904\u7406\u5230\u7b2cl\u4e2a\u6570\u65f6,\u5c06[i, m+1)+c\n>\n> 2. \u5f53\u5904\u7406\u5230\u7b2cr\u4e2a\u6570\u65f6,\u5c06[i, m+1)-c\n\n\u5373\u53ef\u5728$O((n+m) \\sqrt m)$\u5185\u6c42\u89e3\n\n## code:\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\ntypedef long long ll;\nconst int MAX_N = 1e5;\nconst int MAX_M = 1e5+1;\nconst int MAX_S = 1e3;\nstruct data { ll id, tim, cng; bool type; };\n\n/*\u8f93\u5165-----------------------------------------------*/\nll n, m;\nll vul[MAX_N];\ndata in[(MAX_M+MAX_N)<<1], *ite=in-1;\ninline void push(int id, ll tim, ll cng, bool type) {\n\t*++ite = (data){id, tim, cng, type};\n}\n/*end------------------------------------------------*/\n\n/*\u8f93\u51fa-----------------------------------------------*/\nll ans[MAX_M];\nbool flag[MAX_M];\n/*end------------------------------------------------*/\n\n/*~\u5206\u5757~---------------------------------------------*/\nnamespace tool {\n\tll bit[MAX_M];\n\tvector<ll*> buck[MAX_S];\n\tll BASE, rang[MAX_M], cng[MAX_S];\n\tbool cut[MAX_M], sted[MAX_M];\n\n\tinline bool cmp(ll* i, ll* j) { return *i<*j; }\n\tinline void st(ll k) {\n\t\tsort(buck[k].begin(), buck[k].end(), cmp);\n\t}\n\tinline ll ld(ll k, ll c) {\n\t\treturn lower_bound(buck[k].begin(), buck[k].end(), &c, cmp)-buck[k].begin();\n\t}\n\n\tinline void upRange(ll k, ll add) { cng[k] += add; }\n\tinline void upPoint(ll in, ll add) {\n\t\tsted[rang[in]] = false; bit[in] += add;\n\t}\n\n\tinline ll quRange(ll k, ll c) {\n\t\tif (!sted[k]) { st(k); sted[k] = true; }\n\t\treturn (BASE-ld(k, c-cng[k]));\n\t}\n\tinline ll quPoint(ll in, ll c) {\n\t\treturn bit[in]+cng[rang[in]]>=c;\n\t}\n\n\tinline void updata(ll l, ll r, ll add) {\n\t\twhile (l<r&&!cut[l]) upPoint(l++, add);\n\t\twhile (l<r&&!cut[r]) upPoint(--r, add);\n\t\twhile (l<r) upRange(rang[r-=BASE], add);\n\t}\n\tinline ll query(ll l, ll r, ll c) {\n\t\tll res = 0;\n\t\twhile (l<r&&!cut[l]) res += quPoint(l++, c);\n\t\twhile (l<r&&!cut[r]) res += quPoint(--r, c);\n\t\twhile (l<r) res += quRange(rang[r-=BASE], c);\n\t\treturn res;\n\t}\n\n\tinline void init();\n\tinline void solve() {\n\t\tinit();\n\t\tfor (data* d=in; d!=ite; ++d) {\n\t\t\tif (d->type) {\n\t\t\t\tans[d->tim] = query(0, d->tim, d->cng);\n\t\t\t\tflag[d->tim] = true;\n\t\t\t} else updata(d->tim, m, d->cng);\n\t\t}\n\t\tfor (ll i=0; i<m; ++i) {\n\t\t\tif (flag[i]) cout<<ans[i]<<endl;\n\t\t}\n\t}\n\n\tinline void init() {\n\t\t++m; BASE = sqrt(m);\n\t\tfor (int i=0; i<m; i+=BASE) cut[i]=true;\n\t\tfor (ll i=0, k=-1; i<m; ++i) {\n\t\t  k += cut[i]; rang[i] = k;\n\t\t\tbuck[k].push_back(&bit[i]);\n\t\t}\n\t}\n}\n/*end------------------------------------------------*/\n\n/*\u8bfb\u5165\u6570\u636e\u5904\u7406----------------------------------------*/\ninline bool cmp(data &i, data &j) {\n\tif (i.id!=j.id) return i.id<j.id;\n\telse if (j.type) return !i.type;\n\telse return i.tim<j.tim;\n}\n\ninline void pre() {\n\tios::sync_with_stdio(false); cin>>n>>m;\n\tfor (int i=0; i<n; ++i) cin>>vul[i];\n\tll id, cng, type;\n\tfor (int i=0; i<n; ++i)\n\t\tpush(i, 0, vul[i]-(i?vul[i-1]:0), 0);\n\tfor (int i=1; i<=m; ++i) {\n\t\tcin>>type; --type;\n\t\tif (type) {\n\t\t\tcin>>id>>cng;\n\t\t\tpush(--id, i, cng, true);\n\t\t} else {\n\t\t\tcin>>type>>id>>cng;\n\t\t\tpush(--type, i, cng, false);\n\t\t\tpush(id, i, -cng, false);\n\t\t}\n\t} sort(in, ++ite, cmp);\n}\n\nint main() {\n\tpre(); tool::solve();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1572420784,
        "uid": 270561,
        "name": "x_liuier",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3863 \u3010\u5e8f\u5217\u3011 --time(CSP-S + AFO )"
    },
    {
        "content": "\u64cd\u4f5c\u5206\u5757\u7ec3\u624b\u9898\u3002\n\n# Solution\n\n\u8fd9\u9898\u76f4\u63a5\u7ef4\u62a4\u7684\u7a7a\u95f4\u81f3\u5c11\u662f $O(nm)$\uff08\u56e0\u4e3a\u8be2\u95ee\u7684 $y$ \u4e0d\u5b9a\uff0c\u6240\u4ee5\u8981\u5b58\u5168\u90e8\u7684\uff09\uff0c\u6240\u4ee5\u5c31\u8981\u79bb\u7ebf\u4e0b\u6765\u5361 cache\uff0c\u9996\u5148\u601d\u8003\u6309\u4ec0\u4e48\u987a\u5e8f\u5904\u7406\uff0c\u8fd9\u91cc\u5982\u679c\u6309\u65f6\u95f4\u987a\u5e8f\u5c31\u548c\u5f00\u5934\u8bf4\u7684\u90a3\u79cd\u505a\u6cd5\u76f8\u4f3c\uff0c\u6211\u4eec\u5c31\u662f\u60f3\u8981\u4f18\u5316\u6389\u4e00\u4e2a\u7cfb\u6570\uff0c\u56e0\u4e3a\u8be2\u95ee\u7684 $y$ \u4e0d\u662f\u5b9a\u503c\uff0c\u6240\u4ee5 $O(n)$ \u7684\u7a7a\u95f4\u662f\u5fc5\u8981\u7684\uff0c\u6240\u4ee5 $m$ \u5c31\u8981\u892a\u53bb\uff0c\u4e8e\u662f\u6211\u4eec\u6309\u539f\u5e8f\u5217\u4e0b\u6807\u4e00\u4e2a\u4e00\u4e2a\u5904\u7406\u3002\n\n\u5148\u662f\u4fee\u6539\uff0c\u56e0\u4e3a\u4e0d\u80fd\u540c\u65f6\u5904\u7406\u4e24\u4e2a\u4e0d\u540c\u4e0b\u6807\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u8fd9\u4e2a $[l,r]$ \u7684\u533a\u95f4\u52a0\u8f6c\u6362\u6210 $[l,n]$ \u7684\u52a0\u548c $[r+1,n]$ \u7684\u51cf\uff0c\u8fd9\u5728\u6309\u4e0b\u6807\u5904\u7406\u7684\u7b97\u6cd5\u91cc\u662f\u5341\u5206\u53cb\u597d\u7684\uff0c\u53ea\u9700\u8981\u5728\u5904\u7406 $l$ \u7684\u65f6\u5019\u52a0\u4e00\u4e0b\uff0c\u5728\u5904\u7406 $r+1$ \u7684\u65f6\u5019\u51cf\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u91cc\u7684\u6563\u5757\u7684\u4fee\u6539\u4e3a\u4e86\u9002\u5e94\u4e0b\u9762\u7684\u67e5\u8be2\uff0c\u6211\u4eec\u5c06\u5757\u91cd\u6784\u4e00\u4e0b\uff08\u89c1\u4e0b\uff09\u3002\n\n\u7136\u540e\u662f\u67e5\u8be2\uff0c\u8fd9\u91cc\u5c31\u662f\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u5206\u5757\uff0c\u4f46\u662f\u6211\u4eec\u8981\u601d\u8003\u7684\u662f\u6574\u5757\u5982\u4f55\u5904\u7406\uff0c\u8fd9\u91cc\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b[\u6559\u4e3b\u7684\u9b54\u6cd5](https://www.luogu.com.cn/problem/P2801)\u7684\u601d\u60f3\uff0c\u5c06\u6bcf\u4e2a\u5757\u90fd\u5b58\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u590d\u5236\u54c1\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u6563\u5757\u66b4\u529b\uff0c\u6574\u5757\u6253\u4e8c\u5206\uff0c\u4fee\u6539\u7684\u65f6\u5019\u6563\u5757\u5c31\u91cd\u65b0\u590d\u5236\u548c\u6392\u5e8f\uff0c\u603b\u65f6\u95f4\u662f $O(n\\sqrt n\\log n)$\u3002\n\n**Code**\uff0c\u53ef\u80fd\u6709\u70b9\u81ed\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nint qr(){\n\tint x=0,f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)) f|=(c=='-'),c=getchar();\n\twhile(isdigit(c)) x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn f?~(x-1):x;\n}\nint idx[100005],R[405],L[405],s,bls,n,m,a[100005],opt,l,r,x,top,ans[200005];\nll b[100005],c[100005],tag[405];\nstruct node{\n\tint opt,t,x,y,id;\n\tbool operator<(const node &p)const{\n\t\treturn x<p.x||(x==p.x&&t<p.t);\n\t}\n}p[200005];\nbool cmp(node x,node y){\n\treturn x.t<y.t;\n}\nint getsum(int l,int r,ll v){\n\tint ans=0;\n\tif(idx[l]==idx[r]){\n\t\tfor(int i=l;i<=r;i++) ans+=b[i]>=(v-tag[idx[l]]);\n\t}else{\n\t\tfor(int i=l;i<=R[idx[l]];i++) ans+=b[i]>=(v-tag[idx[l]]);\n\t\tfor(int i=L[idx[r]];i<=r;i++) ans+=b[i]>=(v-tag[idx[r]]);\n\t\tfor(int i=idx[l]+1;i<idx[r];i++) ans+=((c+R[i])-lower_bound(c+L[i],c+R[i]+1,v-tag[i])+1);\n\t}\n\treturn ans;\n}\nvoid modify(int l,int r,ll v){\n\tif(idx[l]==idx[r]){\n\t\tfor(int i=l;i<=r;i++) b[i]+=v;\n\t\tfor(int i=L[idx[l]];i<=R[idx[l]];i++) c[i]=b[i];\n\t\tsort(c+L[idx[l]],c+R[idx[l]]+1);\n\t}else{\n\t\tfor(int i=l;i<=R[idx[l]];i++) b[i]+=v;\n\t\tfor(int i=L[idx[l]];i<=R[idx[l]];i++) c[i]=b[i];\n\t\tsort(c+L[idx[l]],c+R[idx[l]]+1);\n\t\tfor(int i=L[idx[r]];i<=r;i++) b[i]+=v;\n\t\tfor(int i=L[idx[r]];i<=R[idx[r]];i++) c[i]=b[i];\n\t\tsort(c+L[idx[r]],c+R[idx[r]]+1);\n\t\tfor(int i=idx[l]+1;i<idx[r];i++) {\n\t\t\ttag[i]+=v;\n\t\t}\n\t}\n}\nint main() {\n\tn=qr(),m=qr();\n\tfor(int i=1;i<=n;i++){\n\t\ta[i]=qr();\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\topt=qr();\n\t\tif(opt^2){\n\t\t\tl=qr(),r=qr(),x=qr();\n\t\t\tp[++top]=(node){opt,i,l,x,top};\n\t\t\tp[++top]=(node){opt,i,r+1,-x,top};\n\t\t}else{\n\t\t\tl=qr(),r=qr();\n\t\t\tp[++top]=(node){opt,i,l,r,top};\n\t\t}\n\t}\n\tsort(p+1,p+top+1);\n\ts=sqrt(m+1),bls=(m+s-1)/s,R[0]=-1;\n\tfor(int i=1;i<=bls;i++){\n\t\tL[i]=R[i-1]+1,R[i]=min(m,s*i-1);\n\t\tfor(int j=L[i];j<=R[i];j++) idx[j]=i;\n\t}\n\tint now=0;\n\tfor(int i=1;i<=top;i++){\n\t\tif(p[i].x>n) break;\n\t\tif(p[i].x!=now){\n\t\t\tmodify(0,m,a[p[i].x]-a[now]);\n\t\t\tnow=p[i].x;\n\t\t}\n\t\tif(p[i].opt^2) modify(p[i].t,m,p[i].y);\n\t\telse ans[p[i].id]=getsum(0,p[i].t-1,p[i].y);\n\t}\n\tsort(p+1,p+top+1,cmp);\n\tfor(int i=1;i<=top;i++){\n\t\tif(p[i].opt^1){\n\t\t\tprintf(\"%d\\n\",ans[i]);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1638665151,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "P3863 \u9898\u89e3"
    },
    {
        "content": "\u6211\u4eec\u5b9a\u4e49\u7b2c $i$ \u79d2\u65f6 $a_p$ \u7684\u503c\u4e3a $a_{p,i}$\uff0c\u6211\u4eec\u6bcf\u6b21\u5728\u7b2c $t$ \u79d2\u67e5\u8be2\u5176\u5b9e\u662f\u5728\u67e5\u8be2 $p,y$ \u5176\u5b9e\u662f\u5728\u67e5\u8be2 $\\sum\n\\limits_{i=0}^t \\left[a_{p,i}<y\\right]$.\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u4e1c\u897f\u5fc5\u7136\u662f\u4e0d\u597d\u7ef4\u62a4\u7684\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u53e6\u4e00\u4e2a\u6027\u8d28\uff0c$a_{p,i}=a_{p,0}+s_{p,i}$\uff0c\u5176\u4e2d\uff0c$s_{p,i}$  \u8868\u793a\u7b2c $i$ \u4e2a\u65f6\u523b\u5bf9\u4e8e\u4f4d\u7f6e $p$ \u7684\u589e\u91cf\uff0c\u800c\u8fd9\u4e2a $s$ \u5fc5\u7136\u662f\u597d\u7ef4\u62a4\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6240\u6709\u7684\u8be2\u95ee\u6309\u7167 $p$ \u6392\u5e8f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6eda\u52a8\u6389 $s$ \u7684\u7b2c\u4e00\u7ef4\uff0c\u73b0\u5728\u9700\u8981\u8003\u8651\u7684\u662f\u5982\u4f55\u901a\u8fc7 $s_{p-1,i}$ \u8f6c\u79fb\u5230 $s_{p,i},i\\in{\\left[1,q\\right]}$.\n\n\u65e2\u7136\u5df2\u7ecf\u6eda\u52a8\u6389\u4e86\u7b2c\u4e00\u7ef4\uff0c\u539f\u5148\u7684\u533a\u95f4\u95ee\u9898\u4e5f\u8f6c\u5316\u4e3a\u5355\u70b9\u95ee\u9898\uff0c\u800c\u5355\u70b9\u662f\u5e73\u51e1\u7684\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21 $t$ \u65f6\u523b\u7684\u533a\u95f4 $\\left[l,r\\right]$ \u52a0 $w$ \u64cd\u4f5c\uff0c\u4ed6\u5bf9\u4e8e\u5355\u70b9 $p\\in\\left[l,r\\right]$ \u7684\u5f71\u54cd\u662f\u4ec0\u4e48\uff0c\u4ed6\u4f1a\u4f7f $s_{p,i}+w,i\\in\\left[t,n\\right]$.\n\n\u8fd9\u7531\u6b64\u542f\u53d1\u6211\u4eec\u5728\u7531 $s_{l-1,i}$ \u8f6c\u79fb\u5230 $s_{l,i},i\\in{\\left[1,q\\right]}$ \u65f6\u7ed9 $s_{l,i}+w,i\\in\\left[t,n\\right]$\uff0c\u800c\u7531 $s_{r,i}$ \u8f6c\u79fb\u5230 $s_{r+1,i},i\\in{\\left[1,q\\right]}$ \u65f6\u7ed9  $s_{r+1,i}-w,i\\in\\left[t,n\\right]$\uff0c\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u5728\u73b0\u6709\u7684 $s$ \u6570\u5217\u4e0a\u8fdb\u884c\u4e00\u6b21\u524d\u7f00\u67e5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7b49\u4e8e\u8bf4\u8981\u6c42\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u51cf\uff0c\u533a\u95f4\u5927\u4e8e\u67d0\u6570\u67e5\u3002\u663e\u7136\u7684\u662f\uff0c\u5206\u5757\u53ef\u4ee5\u7ef4\u62a4\uff0c\u6240\u4ee5\u5229\u7528\u5206\u5757\u505a\u626b\u63cf\u7ebf\u5bf9\u8be2\u95ee\u8fdb\u884c\u626b\u63cf\u5373\u53ef\u89e3\u51b3\u8be5\u9898\u3002\n",
        "postTime": 1652859787,
        "uid": 183026,
        "name": "Cocoly1990",
        "ccfLevel": 0,
        "title": "P3863 \u5e8f\u5217"
    },
    {
        "content": "\u8981\u6c42\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\uff1a\n\n1. \u533a\u95f4\u52a0\n  \n2. \u5355\u70b9\u67e5\u8be2\u5386\u53f2\u4e0d\u5c0f\u4e8e\u67d0\u4e2a\u503c\u7684\u65f6\u95f4\n  \n\n\u5e38\u89c1\u7684\u5206\u6cbb\u6570\u636e\u7ed3\u6784\u5f88\u96be\u505a\u8fd9\u4e2a\uff08\u4e5f\u8bb8\u6709\u80fd\u505a\u7684\u5206\u6cbb\u6570\u636e\u7ed3\u6784\u4f46\u662f\u6ca1\u6709\u5f15\u5165 OI \u5b9e\u6218\uff0c\u53c8\u6216\u8005\u662f\u6211\u65e0\u77e5\uff09\uff0c\u56e0\u4e3a\u533a\u95f4\u52a0\u7684\u6570\u636e\u7ed3\u6784\u5f88\u96be\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u800c\u80fd\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u7684\u6570\u636e\u7ed3\u6784\u5f80\u5f80\u4e5f\u53ea\u80fd\u5355\u70b9\u4fee\u6539\uff0c\u5982\u679c\u628a\u533a\u95f4\u52a0\u62c6\u6210\u5355\u70b9\u52a0\uff0c\u65e0\u8bba\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f\u5185\u5b58\u5f00\u652f\u90fd\u4f1a\u5f88\u5927\u3002\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8003\u8651\u5206\u5757\uff0c\u53d1\u73b0\u5982\u679c\u53ea\u7ef4\u62a4\u4e00\u4e2a\u6570\u5b57\u7684\u8bdd\u53ef\u4ee5\u65f6\u95f4\u5206\u5757\u89e3\u51b3\u65f6\u95f4\u533a\u95f4\u52a0\u3001\u5355\u70b9\u67e5\u8be2\u5386\u53f2\u4e0d\u5c0f\u4e8e\u67d0\u4e2a\u503c\u7684\u65f6\u95f4\u7684\u95ee\u9898\u3002\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u628a\u6bcf\u4e00\u4e2a\u65f6\u95f4\u5f53\u4f5c\u5e8f\u5217\u7684\u4e0b\u6807\uff0c\u6574\u4e2a\u65f6\u95f4\u8f74\u653e\u5728\u5e8f\u5217\u4e0a\u505a\u5206\u5757\uff0c\u8fd9\u6837\u53ef\u4ee5\u89c4\u7ea6\u5230\u533a\u95f4\u52a0\u3001\u533a\u95f4\u67e5\u8be2\u4e0d\u5c0f\u4e8e\u67d0\u4e2a\u503c\u7684\u6570\u5b57\u4e2a\u6570\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f [LibreOJ::\\#6278.\u00a0\u6570\u5217\u5206\u5757\u5165\u95e8 2](https://loj.ac/p/6278)\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u628a\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f\u4ece\u7ef4\u62a4\u4e00\u4e2a\u6570\u5b57\u53d8\u6210\u7ef4\u62a4 $n$ \u4e2a\u6570\u5b57\u3002\u4e0d\u59a8\u76f4\u63a5\u5728\u5206\u5757\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u7ef4\uff0c\u53d8\u6210\u4e00\u4e2a\u4e8c\u7ef4\u7684\u95ee\u9898\uff0c\u65f6\u95f4\u7ef4\u4ecd\u7136\u662f\u5206\u5757\uff0c\u7a7a\u95f4\u7ef4\u53ef\u4ee5\u4ece\u524d\u5f80\u540e\u4e00\u4e2a\u4e00\u4e2a\u5730\u5904\u7406\uff0c\u8fd9\u6837\u505a\u7684\u53ef\u884c\u6027\u53ef\u4ee5\u7528\u4e00\u4e2a\u56fe\u7406\u89e3\uff08\u5b57\u4e11\u8b66\u544a\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/g403xnfc.png)\n\n\u6211\u4eec\u628a\u6240\u6709\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\uff0c\u7528\u626b\u63cf\u7ebf\u4e00\u4e2a\u4e00\u4e2a\u5730\u628a\u5e8f\u5217\u4e0a\u6bcf\u4e2a\u6570\u5b57\u7684\u7b54\u6848\u7ef4\u62a4\u51fa\u6765\u5373\u53ef\u3002\u6240\u4ee5\u8fd9\u9898\u662f\u626b\u63cf\u7ebf\u5957\u5206\u5757\u7684\u601d\u8def\uff0c\u89e3\u9898\u6b65\u9aa4\u5c31\u662f\uff1a\n\n1. \u628a\u6240\u6709\u64cd\u4f5c\u79bb\u7ebf\u3002\u628a\u533a\u95f4\u52a0\u62c6\u6210 $[l,n]$ \u548c $[r+1,n]$ \u65b9\u4fbf\u626b\u63cf\u7ebf\u3002\n  \n2. \u628a\u6240\u6709\u7684\u4fee\u6539\u548c\u67e5\u8be2\u90fd\u6392\u5e8f\u3002\u6309\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807\u6392\u5e8f\u65b9\u4fbf\u6309\u987a\u5e8f\u5904\u7406\u3002\n  \n3. \u5728\u5206\u5757\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u5b8c\u6210\u5355\u4e2a\u6570\u5b57\u7b54\u6848\u7684\u7ef4\u62a4\u3002\n  \n4. \u628a\u6240\u6709\u7684\u67e5\u8be2\u7684\u7b54\u6848\u8f93\u51fa\u3002\n  \n\n\u4ee3\u7801\u7684\u8bdd\u5c31\u662f\u5728\u6570\u5217\u5206\u5757\u5165\u95e8 2 \u4e0a\u52a0\u4e00\u4e2a\u79bb\u7ebf\u3001\u52a0\u4e00\u4e2a\u626b\u63cf\u7ebf\u5373\u53ef\uff0c\u53ef\u4ee5 $O(n+q\\sqrt q\\log q)$ \u5730\u89e3\u51b3\u3002\u653e\u4e00\u4e2a\u626b\u63cf\u7ebf\u90e8\u5206\u7684\u6838\u5fc3\u4ee3\u7801\uff0c\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u9898\u89e3\u3002\n\n```cpp\n//qpp \u662f\u67e5\u8be2\u603b\u6570\uff0cquop \u662f\u67e5\u8be2\u64cd\u4f5c\u7684\u6570\u7ec4\n//upp \u662f\u4fee\u6539\u603b\u6570\uff0cupop \u662f\u4fee\u6539\u64cd\u4f5c\u7684\u6570\u7ec4\n//c \u662f\u9898\u76ee\u8f93\u5165\u7684\u539f\u6570\u5217\nstruct cmp1{\n  bool operator()(const op_t &a,const op_t &b){ return a.id<b.id; }\n};\nstruct cmp2{\n  bool operator()(const op_t &a,const op_t &b){ return a.t<b.t; }\n};\nstd::sort(upop+1,upop+upp+1,cmp1());\nstd::sort(quop+1,quop+qpp+1,cmp1());\nfor(int cx=1,cut=1;cx<=qpp;++cx){\n  while(cut<=upp&&upop[cut].id<=quop[cx].id){\n    add(upop[cut].t,q+1,upop[cut].val);\n    cut++;\n  }\n  quop[cx].ans=query(1,quop[cx].t-1,quop[cx].val-c[quop[cx].id]);\n}\nstd::sort(quop+1,quop+qpp+1,cmp2());\n```\n\n\u8fd9\u91cc\u91cd\u70b9\u5199\u4e00\u5199\u590d\u6742\u5ea6\u5206\u6790\u3002\n\n\u8bbe\u5757\u957f\u4e3a $B$\uff0c\u6574\u5757\u6570\u4e3a $O(\\frac q B)$ \u7ea7\u522b\u7684\uff0c\u5355\u6b21\u4fee\u6539 $O(\\frac q B +B)$\uff0c\u5355\u6b21\u67e5\u8be2\u5982\u679c\u66b4\u529b\u6392\u5e8f\u4e8c\u5206\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(B\\log B+\\frac q B \\log B)$\uff0c\u524d\u4e00\u9879\u662f\u96f6\u6563\u5757\u6392\u5e8f\u66b4\u529b\uff0c\u540e\u4e00\u9879\u662f\u6574\u5757\u6392\u5e8f\u4e8c\u5206\uff0c\u56e0\u6b64\u5206\u5757\u90e8\u5206\u603b\u590d\u6742\u5ea6 $O(q(B\\log B+\\frac q B \\log B))$\uff0c\u53d6 $B=O(\\sqrt q)$ \u5373\u5f97\u590d\u6742\u5ea6 $O(q\\sqrt q\\log q)$\uff0c\u8f93\u5165\u8f93\u51fa $O(n)$\uff0c\u7ed9\u8be2\u95ee\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u4e3a $O(q\\log q)$\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6 $O(n+q\\sqrt q\\log q)$\u3002\u5f53\u7136\uff0c\u8fd9\u662f\u6700\u6734\u7d20\u7684\u505a\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u5b83\u7b97\u6cd5\u4f18\u5316\u590d\u6742\u5ea6\u3002",
        "postTime": 1646786595,
        "uid": 496840,
        "name": "SAMSHAWCRAFT",
        "ccfLevel": 0,
        "title": "\u5e8f\u5217 - \u9898\u89e3"
    }
]