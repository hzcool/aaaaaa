[
    {
        "content": "# 70\u5206\u7b97\u6cd5\uff1a\u8d39\u7528\u6d41\n\n- \u6211\u4eec\u53ef\u4ee5\u5c06\u7164\u770b\u505a\u6d41\u91cf\uff0c\u901a\u8fc7**\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41**\u6765\u7b97\u51fa\u6211\u4eec\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n- \u679a\u4e3e\u65b0\u5382\u5730\u5740$now$\uff0c\u6bcf\u6b21\u90fd\u91cd\u65b0\u5efa\u56fe\uff0c\u5c06\u6700\u5927\u6d41\u63a7\u5236\u5728$\\sum{a_i}$\uff0c\u5e76\u63a7\u5236\u9001\u5230\u4e24\u5382\u7684\u7164\u7684\u6570\u91cf\uff0c\u6765\u6c42\u6700\u5c0f\u8d39\u7528\u3002\n\n- \u5efa\u56fe\u5982\u4e0b\uff1a\n\n- \u4ece\u6e90\u70b9\u5411\u7b2c$i$\u5ea7\u7164\u77ff\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$a_i$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\uff0c\u8868\u793a\u7b2c$i$\u53f7\u77ff\u6bcf\u5e74\u4ea7\u91cf\u4e3a$a_i$\u5428\u3002\n\n- \u4ece\u7b2c$i$\u5ea7\u7164\u77ff\u5411\u65e7\u5382\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$INF$\uff08\u7164\u7684\u6570\u91cf\u5df2\u7ecf\u5728\u524d\u9762\u9650\u5236\u8fc7\uff09\uff0c\u8d39\u7528\u4e3a$c_{i,0}$\u7684\u8fb9\uff0c\u8868\u793a\u4ece\u8fd9\u5ea7\u7164\u77ff\u9001\u7164\u5230\u65e7\u5382\u7684\u5355\u4f4d\u8d39\u7528\u4e3a$c_{i,0}$\uff08\u5b83\u9700\u8981\u7684\u7164\u6570\u91cf\u4f1a\u5728\u540e\u9762\u9650\u5236\uff0c\u800c\u4e0d\u80fd\u5728\u8fd9\u91cc\u9650\u5236\uff0c\u80af\u5b9a\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a$b$\u662f\u9001\u5230\u65e7\u5382\u7684\u7164\u7684**\u603b\u6570**\uff09\u3002\n\n- \u540c\u7406\uff0c\u4ece\u7b2c$i$\u5ea7\u7164\u77ff\u5411\u65b0\u5382\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$INF$\uff08\u7164\u7684\u6570\u91cf\u5df2\u7ecf\u5728\u524d\u9762\u9650\u5236\u8fc7\uff09\uff0c\u8d39\u7528\u4e3a$c_{i,now}$\u7684\u8fb9\uff0c\u8868\u793a\u4ece\u8fd9\u5ea7\u7164\u77ff\u9001\u7164\u5230\u65e7\u5382\u7684\u5355\u4f4d\u8d39\u7528\u4e3a$c_{i,now}$\u3002\n\n- \u6700\u91cd\u8981\u7684\u90e8\u5206\u2014\u2014\u4ece\u539f\u5382\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$b$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\uff1b\u4ece\u65b0\u5382\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a$\\sum{a_i}-b$\uff0c\u8d39\u7528\u4e3a$0$\u7684\u8fb9\u3002\u56e0\u4e3a\u539f\u5382\u9700\u8981$b$\u4e2a\u5355\u4f4d\u7684\u7164\u77ff**\uff08\u8fd9\u91cc\u8981\u6c42\u9001\u6765\u7684\u7164\u4e25\u683c\u7b49\u4e8e$b$\uff0c\u4e0d\u80fd\u591a\u4e5f\u4e0d\u80fd\u5c11\uff09**\uff0c\u6211\u4eec\u9700\u8981\u7528\u8fd9\u6761\u8fb9\u9650\u5236\uff1b\u5bf9\u4e8e\u65b0\u5382\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u7164\u90fd\u9001\u51fa\uff0c\u56e0\u6b64\u9001\u5230\u65b0\u5382\u7684\u7164\u5c31\u662f$\\sum{a_i}-b$\uff0c\u6211\u4eec\u4e5f\u540c\u6837\u8fde\u4e00\u6761\u8fb9\u9650\u5236\u3002\n\n- \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5c06\u7b2c$i$\u5ea7\u7164\u77ff\u7684\u7f16\u53f7\u770b\u505a$i$\uff0c\u539f\u5382\u7f16\u53f7\u770b\u505a$m+1$\uff0c\u65b0\u5382\u7f16\u53f7\u770b\u505a$m+2$\uff0c\u6e90\u70b9\u6c47\u70b9\u7f16\u53f7\u5206\u522b\u770b\u4f5c$0$\u548c$m+3$\u3002\n\n- \u56e0\u4e3a\u65e7\u5382\u548c\u65b0\u5382\u8fd8\u6709\u81ea\u5df1\u7684\u8fd0\u884c\u8d39\u7528\uff0c\u800c\u8d39\u7528\u6d41\u6c42\u51fa\u6765\u7684\u53ea\u662f\u8fd0\u8f93\u8d39\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u6700\u540e\u8fd8\u8981\u7528(\u8fd0\u8f93\u8d39\u7528+$h_0+h_{now}$)\u6765\u66f4\u65b0\u7b54\u6848\u3002\n\n- \u5efa\u56fe\u5982\u4e0b\u56fe\u6240\u793a\uff1a\uff08cap\u8868\u793a\u5bb9\u91cf\uff0cw\u8868\u793a\u5355\u4f4d\u8d39\u7528\uff09\n\n ![](https://cdn.luogu.com.cn/upload/pic/6310.png) \n\n- \u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n\ninline void read(int &x)\n{\n    static char ch; \n    while ((ch = getchar()) < '0' || ch > '9'); \n    x = ch - '0'; \n    while ((ch = getchar()) >= '0' && ch <= '9')\n        x = (x << 3) + (x << 1) + ch - '0'; \n}\n\ninline int getmin(const int &a, const int &b) {return a < b ? a : b;}\n\nconst int MaxN = 55; \nconst int MaxM = 5e4 + 10; \nconst int MaxB = 1e4 + 10; \nconst int INF = 0x3f3f3f3f; \n\nconst int MaxP = MaxM; \nconst int MaxE = MaxP * 10; \n\nint dis[MaxP], src, des; \nint ect = 1, nxt[MaxE], to[MaxE], cap[MaxE], cst[MaxE], adj[MaxP], frm[MaxE], pre[MaxP]; \nint n, m, b, ans = 0, minAns = INF, ansNum; \nint h[MaxN], a[MaxM], c[MaxM][MaxN], tota; \n\ninline void addEdge(const int &u, const int &v, const int &c, const int &w)\n{\n    nxt[++ect] = adj[u], adj[u] = ect, to[ect] = v, frm[ect] = u, cap[ect] = c, cst[ect] = w; \n    nxt[++ect] = adj[v], adj[v] = ect, to[ect] = u, frm[ect] = v, cap[ect] = 0, cst[ect] = -w; \n}\n\ninline bool SPFA()\n{\n    static int q[MaxE << 2], tail; \n    static bool inq[MaxP]; \n    for (int i = src; i <= des; ++i)\n        dis[i] = INF; \n    inq[q[tail = 1] = src] = 1; \n    dis[src] = 0; \n    for (int head = 1, u, v, e; inq[u = q[head]] = 0, head <= tail; ++head)\n        for (e = adj[u]; v = to[e], e; e = nxt[e])\n            if (cap[e] > 0 && dis[v] > dis[u] + cst[e])\n            {\n                dis[v] = dis[u] + cst[e], pre[v] = e; \n                if (!inq[v])\n                    inq[q[++tail] = v] = 1; \n            }\n    return dis[des] != INF; \n}\n\ninline void deal()\n{\n    int minFlow = INF; \n    for (int e = pre[des]; e; e = pre[frm[e]]) minFlow = getmin(minFlow, cap[e]); \n    for (int e = pre[des]; e; e = pre[frm[e]])\n    {\n        cap[e] -= minFlow; \n        cap[e ^ 1] += minFlow; \n        ans += minFlow * cst[e]; \n    }\n}\n\nint now; \ninline void MCMF()\n{\n    ans = 0; \n    while (SPFA()) deal(); \n    ans += h[0] + h[now]; \n    if (ans < minAns)\n        minAns = ans, ansNum = now; \n}\n\ninline void buildGraph()\n{\n    ect = 1; \n    for (int i = src; i <= des; ++i) adj[i] = 0, pre[i] = 0; \n    src = 0, des = m + 3; \n    for (int i = 1; i <= m; ++i)\n        addEdge(src, i, a[i], 0), addEdge(i, m + 1, INF, c[i][0]), addEdge(i, m + 2, INF, c[i][now]); \n    addEdge(m + 1, des, b, 0), addEdge(m + 2, des, tota - b, 0); \n}\n\nint main()\n{\n    read(m), read(b), read(h[0]), read(n); \n    for (int i = 1; i <= m; ++i) read(a[i]), tota += a[i]; \n    for (int i = 1; i <= n; ++i) read(h[i]); \n    for (int i = 0; i <= n; ++i)\n        for (int j = 1; j <= m; ++j)\n            read(c[j][i]); \n    for (now = 1; now <= n; ++now)\n        buildGraph(), MCMF(); \n    printf(\"%d\\n%d\\n\", ansNum, minAns); \n    return 0; \n}\n```\n# 100\u5206\u7b97\u6cd5\uff1a\u8d2a\u5fc3\n\n- \u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u65b0\u5de5\u5382\u7684\u5730\u5740\u6765\u8d2a\u5fc3\u3002\n\n- \u8bbe\u7b2ci\u4e2a\u7164\u77ff\u5230\u65b0\u5de5\u5382\u7684\u5355\u4f4d\u8fd0\u8d39\u4e3a$x_i$\uff0c\u5230\u65e7\u5de5\u5382\u7684\u5355\u4f4d\u8fd0\u8d39\u4e3a$x_i+delta_i$\u3002\n\n- \u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u5355\u4f4d\u7684\u7164\uff0c\u5b83\u7684\u8fd0\u8d39\u8981\u4e48\u662f$x_i$\uff0c\u8981\u4e48\u662f$x_i+delta_i$\u3002\n\n- \u7531\u4e8e\u6240\u6709\u7164\u7684\u8fd0\u8d39\u4e2d\u90fd\u5305\u542b\u9879$x_i$\uff0c \u6709b\u5355\u4f4d\u7164\u7684\u8fd0\u8d39\u4e2d\u5305\u542b\u9879$delta_i$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u9879$delta_i$\u5c3d\u91cf\u5c0f\uff0c\u8fd9\u6837\u5c31\u80fd\u4f7f\u6574\u4f53\u65b9\u6848\u6700\u4f18\u3002\n\n- \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u6b65\u9aa4\uff1a\n\n- \u679a\u4e3e\u65b0\u5de5\u5382\u5730\u5740$now$\uff1b\n\n- \u9884\u5904\u7406\u51fa$delta_i=c[i,0]-c[i,now]$\uff0c\u8fd9\u91cc$x_i$\u5c31\u662f$c[i,now]$\uff1b\n\n- \u5c06\u7164\u77ff\u4ee5$delta_i$\u4e3a\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n- \u5047\u8bbe\u6211\u4eec\u76ee\u524d\u628a\u7164\u5168\u9001\u5230\u4e86\u65b0\u5de5\u5382\uff0c\u76ee\u524d\u8d39\u7528\u4e3a$\\sum{x_i*a_i}$\u3002\u90a3\u4e48\u8981\u6709$b$\u4e2a\u5355\u4f4d\u7684\u7164\u8981\u8c03\u5230\u65e7\u5de5\u5382\uff0c\u6211\u4eec\u8d2a\u5fc3\u5c06$delta_i$\u6700\u5c0f\u7684\u90a3\u4e9b\u7164\u90fd\u9001\u5230\u65e7\u5de5\u5382\uff0c\u76f4\u5230\u9001\u6ee1$b$\u4e3a\u6b62\u3002\u6bcf\u6b21\u5728\u7b2ci\u4e2a\u7164\u77ff\u8c03\u4e00\u5355\u4f4d\u7684\u7164\u65f6\uff0c\u8d39\u7528\u5e94\u52a0\u4e0a$delta_i$\u3002\n\n- \u90a3\u4e48\u6211\u4eec\u5c31\u7b97\u51fa\u4e86\u65b0\u5de5\u5382\u4e3a$now$\u65f6\u7b26\u5408\u6761\u4ef6\u7684\u6700\u4f18\u65b9\u6848\uff0c\u7528(\u8fd0\u8f93\u8d39\u7528$+h_0+h_{now}$)\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n- \u5916\u5c42\u679a\u4e3en\u4e2a\u5382\u5740\uff0c\u5185\u5c42\u5bf9m\u4e2a\u7164\u77ff\u6392\u5e8f\uff0c\u65f6\u95f4\u603b\u590d\u6742\u5ea6\u4e3a$O(nm\\log m)$\u3002\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nint getintRes; \ninline int getint()\n{\n    static char ch; \n    while ((ch = getchar()) < '0' || ch > '9'); \n    getintRes = ch - '0'; \n    while ((ch = getchar()) >= '0' && ch <= '9')\n        getintRes = getintRes * 10 + ch - '0'; \n    return getintRes; \n}\n\ninline void read(int &x)\n{\n    static char ch; \n    while ((ch = getchar()) < '0' || ch > '9'); \n    x = ch - '0'; \n    while ((ch = getchar()) >= '0' && ch <= '9')\n        x = x * 10 + ch - '0'; \n}\n\ninline int getmin(const int &a, const int &b) {return a < b ? a : b;}\n\nconst int MaxN = 55; \nconst int MaxM = 5e4 + 10; \nconst int MaxB = 1e4 + 10; \nconst int INF = ~0u >> 1; \n\nstruct cyxPair\n{\n    int delta, count; \n    cyxPair() {}\n    cyxPair(const int &d, const int &c):\n        delta(d), count(c) {}\n    inline bool operator < (const cyxPair &rhs) const\n    {\n        return delta < rhs.delta; \n    }\n}c[MaxM]; \n\nint n, m, b; \nint a[MaxM], h[MaxN], c0[MaxM]; \nint minAns = INF, numAns; \n\n#define p(x, y) cyxPair(x, y)\n\nint main()\n{\n    read(m), read(b), read(h[0]), read(n); \n    for (int i = 1; i <= m; ++i) read(a[i]); \n    for (int i = 1; i <= n; ++i) read(h[i]); \n    for (int i = 1; i <= m; ++i) read(c0[i]); \n    \n    int totCount, totAns, tmp;  \n    for (int now = 1; now <= n; ++now)\n    {\n        static int i; \n        totCount = b, totAns = 0; \n        for (i = 1; i <= m; ++i)\n            read(tmp), c[i] = p(c0[i] - tmp, a[i]), totAns += tmp * a[i]; \n        std::sort(c + 1, c + m + 1); \n        for (i = 1; i <= m; ++i)\n            if (totCount >= c[i].count)\n                totCount -= c[i].count, totAns += c[i].delta * c[i].count; \n            else\n                break; \n        if (totCount > 0)\n            totAns += totCount * c[i].delta; //\u5f53\u6211\u4eec\u6709\u5269\u4f59\u7684\u7164\u8981\u9001\u4f46\u4e0d\u6ee1\u8be5\u7164\u77ff\u603b\u91cf\uff0c\u6211\u4eec\u4e5f\u8981\u5c06\u5269\u4e0b\u7684\u9001\u51fa\n        totAns += h[0] + h[now]; \n        if (totAns < minAns)\n            minAns = totAns, numAns = now; \n    }\n    printf(\"%d\\n%d\\n\", numAns, minAns); \n    return 0; \n}\n```",
        "postTime": 1500121443,
        "uid": 20729,
        "name": "\u6211\u597d\u84bb\u5440",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2514 \u3010[HAOI2010]\u5de5\u5382\u9009\u5740\u3011"
    },
    {
        "content": "\u4e00\u5f00\u59cb\u60f3\u5230\u679a\u4e3e\u6bcf\u4e2a\u5907\u7528\u5382\u5740\u8d2a\u5fc3\u9009\u53d6\u6700\u5c0f\u8d39\u7528 $c[i][j]$\uff0c\u5efa\u4e86\u4e24\u4e2a\u5806\u540e\u5b8c\u7f8e\u7206\u96f6\u3002\n\n\u4ed4\u7ec6\u60f3\u60f3\u540e\u611f\u89c9\u4e0d\u5bf9\uff0c\u6700\u5c0f\u8d39\u7528\u5e76\u975e\u6700\u4f18\uff0c\u800c\u4e14\u8fd8\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u7684\u9009\u53d6\uff0c\u4e8e\u662f\u5fc3\u6001\u5f88\u5d29\u5730\u819c\u62dc\u4e86\u7f51\u4e0a\u4ee3\u7801\u3002\n\n\u770b\u5b8c\u4ee3\u7801\u540e\u4eff\u4f5b\u987f\u609f\uff1a**\u5b9e\u9645\u4e0a\u5e94\u8d2a\u5fc3\u7684\u662f $c[0][j] - c[i][j]$ \u7684\u6700\u5c0f\u503c\u3002**\n\n\u6211\u4eec\u5047\u8bbe\u90fd\u5c06\u539f\u7164\u9001\u81f3\u679a\u4e3e\u7684\u5907\u7528\u5382\u5740 $i$\uff0c\u7136\u540e\u5c06 $m$ \u5ea7\u7164\u77ff\u6309 $c[0][j] - c[i][j]$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6309\u987a\u5e8f\u9009\u53d6\u8fd9\u4e9b\u7164\u77ff\u4e2d $c[0][j] - c[i][j]$ \u6700\u5c0f\u7684 $b$ \u5428\u7164\u8fd0\u5f80\u539f\u706b\u529b\u53d1\u7535\u5382\uff0c\u5219\u8fd9\u6837\u5fc5\u5b9a\u662f\u5bf9\u4e8e\u5907\u7528\u5382\u5740 $i$ \u7684\u6700\u4f18\u65b9\u6848\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u9996\u5148\u65e0\u8bba\u8fd0\u5f80\u54ea\u91cc\uff0c\u7164\u4ea7\u91cf $a[j]$ \u90fd\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\uff1b\u90a3\u4e48 $c[0][j] - c[i][j]$ \u8868\u793a\u8fd0\u5f80\u539f\u706b\u529b\u53d1\u7535\u5382\u8f83\u4e8e\u5907\u7528\u5382\u5740 $i$ \u4ea7\u751f\u7684\u5bf9\u8fd0\u7164\u8d39\u7528\u7684\u5f71\u54cd\uff0c\u8fd9\u4e2a\u503c\u8d8a\u5c0f\uff0c\u5219\u603b\u7684\u8fd0\u7164\u82b1\u8d39\u5c31\u8d8a\u5c0f\uff0c\u56e0\u6b64\u8d2a\u5fc3\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nmlogm)$\u3002\n\n\u6700\u540e\u9644\u4e0a\u4ee3\u7801\uff08\u611f\u89c9\u8d2a\u5fc3\u6ca1\u60f3\u6e05\u695a\u8fd8\u662f\u4e0d\u80fd\u778e\u5199\u554a\uff09\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\nconst int Maxn = 0x3f3f3f3f;\nconst int N = 55, M = 5e4 + 5;\nint val[M], Id[M], c[N][M], a[M], h[N];\nint n, b, Ans = Maxn, K, m;\n\ninline int get()\n{\n    char ch; bool f = false; int res = 0;\n    while (((ch = getchar()) < '0' || ch > '9') && ch != '-');\n    if (ch == '-') f = true;\n     else res = ch - '0';\n    while ((ch = getchar()) >='0' && ch <= '9')\n        res = (res << 3) + (res << 1) + ch - '0';\n    return f? ~res + 1 : res;\n}\n\ninline void put(int x)\n{\n    if (x < 0)\n      x = ~x + 1, putchar('-');\n    if (x > 9) put(x / 10);\n    putchar(x % 10 + 48);\n}\n\ninline bool cmp(const int &x, const int &y) {return val[x] < val[y];}\n\nint main()\n{\n    m = get(); b = get(); h[0] = get(); n = get();\n    for (int i = 1; i <= m; ++i) a[i] = get();\n    for (int i = 1; i <= n; ++i) h[i] = get();\n    for (int i = 0; i <= n; ++i) \n     for (int j = 1; j <= m; ++j) c[i][j] = get();\n    for (int i = 1; i <= n; ++i)\n    {\n        int sum = h[i], tmp = b;\n        for (int j = 1; j <= m; ++j) \n        {\n            sum += c[i][j] * a[j];\n            Id[j] = j; val[j] = c[0][j] - c[i][j];\n        }\n        sort(Id + 1, Id + m + 1, cmp);\n        for (int j = 1; j <= m && tmp; ++j)\n        if (tmp >= a[Id[j]])\n         sum += val[Id[j]] * a[Id[j]], tmp -= a[Id[j]]; \n        else sum += val[Id[j]] * tmp, tmp = 0;\n        if (sum < Ans) Ans = sum, K = i;\n    }\n    put(K), putchar('\\n'), put(Ans + h[0]);\n    return 0;\n}\n```",
        "postTime": 1499947506,
        "uid": 17952,
        "name": "Log_x",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2514 \u3010[HAOI2010]\u5de5\u5382\u9009\u5740\u3011"
    },
    {
        "content": "\u672c\u9898\u5f88\u5bb9\u6613\u6784\u5efa\u51fa\u4e00\u4e2a\u7f51\u7edc\u6d41\u7684\u6a21\u578b\uff0c\u4f46\u662f\u5bf9\u4e8e$M<=50000$\u7684\u6570\u636e\u800c\u8a00\uff0c\u7f51\u7edc\u6d41\u662f\u65e0\u6cd5\u627f\u53d7\u7684\u3002\u800c\u672c\u9898\u7684\u4e8c\u5206\u56fe\u5f88\u7279\u6b8a\uff0c\u6709\u4e00\u8fb9\u53ea\u67092\u4e2a\u70b9\uff0c\u800c\u4e14\u5176\u4e2d\u4e00\u4e2a\u70b9\u662f\u56fa\u5b9a\u6d41\u91cf\u7684\uff0c\u6240\u4ee5\u679c\u65ad\u653e\u5f03\uff08~~\u53cd\u6b63\u6211\u4e5f\u4e0d\u4f1a~~\uff09\u3002\n\n\u7531\u4e8e**\u6240\u6709\u7684\u7164\u90fd\u8981\u8fd0\u51fa**\uff0c\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe\u6240\u6709\u7684\u7164\u90fd\u5148\u8fd0\u8f93\u5230**\u65b0\u5de5\u5382**\uff0c\u518d\u7531\u65b0\u5de5\u5382\u8f6c\u8fd0\u5230\u65e7\u5de5\u5382\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u672c\u5904\u7684\u201c\u8f6c\u8fd0\u201d\u7b2c $i$ \u4e2a\u7164\u77ff\u7684\u7164\u5bf9\u5e94\u7684\u8d39\u7528\u5c31\u662f\u8fd9\u4e2a\u7164\u77ff\u8fd0\u5230\u4e24\u4e2a\u5de5\u5382**\u8fd0\u8d39\u7684\u5dee\u503c** $Ci0-Cin$\u3002\u6240\u4ee5\u5c31\u6709\u4e86\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u5373**\u679a\u4e3e\u65b0\u5de5\u5382\uff0c\u4f18\u5148\u9009\u62e9\u5dee\u503c\u6700\u5c0f\u7684\u7164\u77ff\u586b\u8865\u65e7\u5de5\u5382\u7684 $b$ \u5428\u7528\u7164**\uff0c\u76f4\u81f3\u586b\u6ee1\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u5728\u679a\u4e3e\u5230\u4e00\u4e2a\u65b0\u5de5\u5382\u662f\u5feb\u901f\u5bf9\u5dee\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u672c\u4eba\u63d0\u4f9b\u4ee5\u4e0b3\u79cd\uff1a\n- **\u5feb\u6392\uff1a** \u6700\u7b80\u5355\u6613\u61c2\uff0c\u5bf9\u4e8e\u672c\u9898\u7684\u6570\u636e\u7406\u8bba\u4e0a\u52c9\u5f3a\u80fd\u8fc7\uff0c\u4f46\u4e0d\u4fdd\u9669\u3002\u4ee3\u7801\u7565\u3002\u3002\u3002\n\n- **\u5806\u6392\u5e8f\uff08\u672c\u4eba\u505a\u6cd5\uff09\uff1a** \u56e0\u4e3a\u6bcf\u6b21\u53ea\u53d6\u6700\u5c0f\uff0c\u6240\u4ee5\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5efa\u5806 $O(M)$\uff0c\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(NMlogM)$\uff0c\u5feb\u8d76\u4e0a\u5feb\u6392\u4e86\uff0c\u4f46\u662f\u81f3\u5c11\u4e0d\u4f1a\u6162\u4e8e\u5feb\u6392\u3002\u7528STL\u540c\u6837\u5bb9\u6613\u5b9e\u73b0\uff0c\u4e0d\u5f00O2\u8d85\u65f6\uff0c\u5f00\u4e86O2\u8dd1\u5f97\u98de\u5feb\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\n#define N 55\n#define M 50005\nusing namespace std;\n\ninline int read(){\n\tre int x=0,f=1;\n\tre char c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n\treturn x*f;\n}\n\nint m,b,h,n;\nint a[M];\nint hh[N];\nint v[N][M];\nint dif[M];\nint ans=1<<30,ansi;\n\nstruct cmp{\n    bool operator ()(int &a,int &b){\n\t\treturn dif[a]>dif[b];\n    }\n};\n\npriority_queue <int,vector<int>,cmp> q;\n\nint main(){\n\tm=read();\n\tb=read();\n\th=read();\n\tn=read();\n\tfor(re int i=1;i<=m;i++) a[i]=read(),a[0]+=a[i];\n\tfor(re int i=1;i<=n;i++) hh[i]=read();\n\tfor(re int i=0;i<=n;i++)\n\t\tfor(re int j=1;j<=m;j++) v[i][j]=read();\n\tfor(re int i=1,sum,rest;i<=n;i++){\n\t\tsum=h+hh[i]; rest=b;\n\t\tfor(re int j=1;j<=m;j++){\n\t\t\tdif[j]=v[0][j]-v[i][j];\n\t\t\tsum+=v[i][j]*a[j];\n\t\t\tq.push(j);\n\t\t}\n\t\tre int l;\n\t\twhile(rest){//\u8d2a\u5fc3\u5730\u52a0\n\t\t\tl=q.top();\n\t\t\tif(rest>=a[l]){\n\t\t\t\trest-=a[l];\n\t\t\t\tsum+=dif[l]*a[l];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum+=dif[l]*rest;\n\t\t\t\trest=0;\n\t\t\t}\n\t\t\tq.pop();\n\t\t}\n\t\tif(sum<ans){\n\t\t\tans=sum;\n\t\t\tansi=i;\n\t\t}\n\t\twhile(!q.empty()) q.pop();//\u521d\u59cb\u5316\n\t}\n\tprintf(\"%d\\n%d\",ansi,ans);\n\treturn 0;\n}\n```\n\n\n- **\u8ba1\u6570\u6392\u5e8f\uff1a** \u7531\u4e8e\u672c\u9898\u6570\u636e\u5f88\u5c0f\uff0c\u6240\u4ee5\u8ba1\u6570\u6392\u5e8f\u6700\u4f18\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N * M)$\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MaxN=50005,oo=0x7fffffff>>1;\n\nint C[55],s[MaxN],a[MaxN],f[MaxN],h[MaxN];\nint sa[MaxN],sum[MaxN],M,B,N,MM,low,high,ans,MinCost;\n\nvoid Init()\n{\n\tint i;\n\tscanf(\"%d%d%d%d\",&M,&B,&C[0],&N);\n\tfor (i=1;i<=M;i++)scanf(\"%d\",&a[i]);\n\tfor (i=1;i<=N;i++)scanf(\"%d\",&C[i]);\n\tfor (i=1;i<=M;i++)scanf(\"%d\",&f[i]);\n}\nvoid CountSort()//\u7c7b\u4f3c\u540e\u7f00\u6570\u7ec4\u7684\u8ba1\u6570\u6392\u5e8f\n{\n\tlow=MaxN,high=-MaxN;\n\tint i;\n\tfor(i=1;i<=M;i++){ if(h[i]<low)low=h[i]; if(h[i]>high)high=h[i];}\n\tfor(i=1;i<=M;i++) h[i]-=low;high-=low;\n\tfor(i=0;i<=high;i++) sum[i]=0;\n\tfor(i=1;i<=M;i++) sum[h[i]]++;\n\tfor(i=1;i<=high;i++) sum[i]+=sum[i-1];\n\tfor(i=M;i>=1;i--) sa[sum[h[i]]--]=i;\n}\nvoid Make()\n{\n\tint x,y,z,i;\n\tfor (i=1;i<=M;i++){scanf(\"%d\",&x); MinCost+=x*a[i]; h[i]=f[i]-x;}\n\t//\u8bfb\u5165\u6570\u636e\uff0c\u8ba1\u7b97\u5dee\u503c\n\tCountSort();\n\ty=B;i=1;\n\twhile (y)//\u679a\u4e3e\u6ee1\u8db3\u539f\u6709\u53d1\u7535\u5382\u7684\u7528\u7164\u9700\u6c42\n\t{\n\t\tx=sa[i];z=h[x]+low;\n\t\tif (a[x]>y){MinCost+=y*z;return;}\n\t\ty-=a[x];\n\t\tMinCost+=a[x]*z;\n\t\ti++;\n\t}\n}\nvoid Solve()\n{\n\tint i,deci;\n\tans=oo;//\u521d\u59cb\u5316\n\tfor(i=1;i<=N;i++)//\u679a\u4e3e\u7b2ci\u4e2a\u5de5\u5382\u4e3a\u65b0\u5efa\u7684\u5382\u5740\n\t{\n\t\tMinCost=C[0]+C[i];//\u8fd9\u4e24\u4e2a\u5382\u7684\u56fa\u5b9a\u8d39\u7528\n\t\tMake();//\u5904\u7406\n\t\tif(MinCost<ans){ans=MinCost;deci=i;}//\u53d6\u6700\u5c0f\u503c\n\t}\n\tcout<<deci<<endl<<ans<<endl;//\u8f93\u51fa\u7b54\u6848\n}\nint main()\n{\n\tInit();\n\tSolve();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1595043565,
        "uid": 236099,
        "name": "H_D_NULL",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2514 \u3010[HAOI2010]\u5de5\u5382\u9009\u5740\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P2514)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e0d\u96be\u60f3\u5230\u679a\u4e3e\u65b0\u5de5\u5382\u7684\u9009\u5740\u7136\u540e\u8ba1\u7b97\u82b1\u8d39\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u8003\u8651\u5982\u4f55\u5206\u914d\u6bcf\u4e2a\u5de5\u5382\u7684\u7164\u3002\u5148\u5047\u8bbe\u6ca1\u6709\u8fd9\u6837\u4e00\u4e2a\u65e7\u5de5\u5382\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ea\u6709\u4e00\u4e2a\u65b0\u5de5\u5382\u4e86\uff0c\u6bd4\u5982\u5f53\u524d\u679a\u4e3e\u5230\u4e86$i$\u53f7\u65b0\u5de5\u5382\u3002\u8fd9\u4e2a\u65f6\u5019\u80af\u5b9a\u662f\u5168\u90e8\u7164\u90fd\u8fd0\u8fc7\u53bb\uff0c\u603b\u82b1\u8d39\u662f$H+h_i+\\sum_{j=1}^mC_{j,i}\\times a_j$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u7136\u540e\u8003\u8651\u51fa\u73b0\u4e86\u65e7\u5de5\u5382\uff0c\u90a3\u4e48\u6bcf\u4ece$j$\u53f7\u77ff\u5411\u65e7\u5de5\u5382\u8fd0\u8fc7\u53bb\u4e00\u5428\u7164\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8282\u7ea6\u4e0b\u6765$C_{j,i}-C_{j,0}$\u3002\u6240\u4ee5\u5c31\u53ef\u4ee5\u60f3\u5230\u6309\u7167$C_{j,i}-C_{j,0}$\u4ece\u5927\u5230\u5c0f\u8d2a\u5fc3\u5730\u5411\u65e7\u5de5\u5382\u8fd0\u7164\uff0c\u76f4\u5230\u88c5\u6ee1\u4e86$B$\u5428\uff08\u8fd9\u4e5f\u76f8\u5f53\u4e8e\u6309\u7167$C_{j,0}-C_{j,i}$\u4ece\u5c0f\u5230\u5927\u8d2a\u5fc3\uff09\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u90e8\u5206\u80cc\u5305\u7684\u95ee\u9898\uff0c\u89e3\u6cd5\u4e0d\u518d\u8d58\u8ff0\uff0c\u65f6\u95f4\u662f$O(nm\\log_2m)$\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\n\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\nconst int MAXN = 55, MAXM = 50005;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nint seq[MAXM], dif[MAXM];\nint C[MAXN][MAXM];\nint a[MAXM], h[MAXN];\nint M, B, H, N;\n\nbool cmp1( const int &x, const int &y ) { return dif[x] < dif[y]; }\n\nint main()\n{\n\tread( M ), read( B ), read( H ), read( N );\n\tfor( int i = 1 ; i <= M ; i ++ ) read( a[i] );\n\tfor( int i = 1 ; i <= N ; i ++ ) read( h[i] );\n\tfor( int j = 0 ; j <= N ; j ++ )\n\t\tfor( int i = 1 ; i <= M ; i ++ )\n\t\t\tread( C[j][i] );\n\tLL cost = 0, mnCost = INF;\n\tint ans, left, u;\n\tfor( int cur = 1 ; cur <= N ; cur ++ )\n\t{\n\t\tleft = B, cost = H + h[cur];\n\t\tfor( int i = 1 ; i <= M ; i ++ ) cost += 1ll * C[cur][i] * a[i], dif[i] = C[0][i] - C[cur][i], seq[i] = i;\n\t\tsort( seq + 1, seq + 1 + M, cmp1 );\n\t\tfor( int i = 1 ; i <= M ; i ++ )\n\t\t{\n\t\t\tif( a[u = seq[i]] <= left ) left -= a[u], cost += 1ll * dif[u] * a[u];\n\t\t\telse { cost += 1ll * dif[u] * left; break; }\n\t\t}\n\t\tif( cost < mnCost ) ans = cur, mnCost = cost;\n\t}\n\twrite( ans ), putchar( '\\n' ), write( mnCost ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1578028680,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[HAOI2010]\u5de5\u5382\u9009\u5740"
    }
]