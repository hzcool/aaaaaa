[
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u4e00\u770b\u5c31\u77e5\u9053\u662f\u62d3\u6251\u6392\u5e8f\u3002\n\n1.\u9996\u5148\u89c2\u5bdf\u6570\u636e\u8303\u56f4\u548c\u8f93\u51fa\uff0c\u6570\u636e\u8303\u56f426\uff0c\u662f\u771f\u7684\u5c0f\uff0c\u5c31\u8bf4\u660e\u591a\u641e\u4e00\u641e\u80af\u5b9a\u4e5fT\u4e0d\u4e86\u3002\u8f93\u51fa\u8981\u6c42\u8f93\u51fa\u5230\u7b2c\u51e0\u6b21\u5c31\u884c\u4e86\uff0c\u6216\u8005\u4e0d\u884c\u4e86\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u6bcf\u5efa\u4e00\u6761\u8fb9\u5c31\u9700\u8981\u4e00\u6b21\u62d3\u6251\u6392\u5e8f\u3002\n\n2.\u518d\u770b\u8fd9\u9053\u9898\u7684\u4e09\u79cd\u60c5\u51b5\u3002\u7b2c\u4e00\u4e2a\u662f\u6709\u7a33\u5b9a\u987a\u5e8f\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6709\u73af\uff0c\u7b2c\u4e09\u4e2a\u662f\u65e0\u73af\u4f46\u662f\u4e5f\u6ca1\u6709\u7a33\u5b9a\u62d3\u6251\u987a\u5e8f\u3002\u7136\u540e\u6211\u4eec\u5bf9\u8fd9\u4e09\u4e2a\u95ee\u9898\u8fdb\u884c\u4f9d\u6b21\u89e3\u51b3\u3002\n\n\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a\u6709\u7a33\u5b9a\u62d3\u6251\u6392\u5e8f\u8bf4\u660e\u62d3\u6251\u6392\u5e8f\u7684\u5c42\u6570\u662fn\u3002\u4e5f\u5c31\u662f\u4e0b\u9762\u4ee3\u7801\u7684val\u3002\u4e00\u5c42\u4e00\u5c42\u4e0b\u53bb\u5982\u679c\u662fn\u5c42\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u91cc\u9762\u80af\u5b9a\u5305\u542b\u4e00\u4e2an\u957f\u5ea6\u7684\u94fe\uff0c\u6211\u4eec\u53ea\u8981\u770b\u6700\u5927\u7684\u5c42\u6570\u662f\u4e0d\u662fn\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e5f\u5c31\u662f\u4ee3\u7801\u7684ans==n\u3002\n\n\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5c31\u662f\u6210\u73af\uff0c\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6709\u6ca1\u6709\u73af\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5982\u679c\u62d3\u6251\u6392\u5e8f\u6ca1\u80fd\u904d\u5386\u6240\u6709\u7684\u70b9\uff0c\u5c31\u8bf4\u660e\u5b58\u5728\u4e00\u4e2a\u73af\u3002\u4e5f\u5c31\u662f\u4e0b\u9762\u7684sum==s1.size()\u3002s1\u662f\u7528\u6765\u5b58\u50a8\u76ee\u524d\u5143\u7d20\uff08\u70b9\uff09\u4e2a\u6570\u7684\u3002\n\n\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u6700\u7b80\u5355\uff0c\u5982\u679c\u524d\u4e24\u79cd\u90fd\u4e0d\u662f\uff0c\u90a3\u80af\u5b9a\u5c31\u662f\u6700\u540e\u4e00\u79cd\u4e86\uff01\n\n\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define MAXN 50\nusing namespace std;\nint n,m;\nstruct Node{\n    int u;\n    int val;\n    Node(int u=0,int val=0):u(u),val(val){}\n};\nvector<int> vec[MAXN];\nint ru[MAXN];\nint sum;\nint ans;\nint k;\nset<int> s1;\nvoid make(){\n    queue<int> q;\n    int ru1[MAXN];\n    memset(ru1,0,sizeof(ru1));\n    for(int i=0; i<26; i++){\n        for(int j=0; j<vec[i].size(); j++){\n            ru1[vec[i][j]]++;\n        }\n    }\n    for(int i=0; i<26; i++){\n        if(ru1[i]==0&&s1.count(i)){\n            q.push(i);\n            cout<<char(i+'A');\n        }\n    }\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        for(int i=0; i<vec[u].size(); i++){\n            int v=vec[u][i];\n            ru1[v]--;\n            if(ru1[v]==0){\n                q.push(v);\n                cout<<char(v+'A');\n            }\n        }\n    }\n}\nint have;\nvoid topo(){\n    queue<Node> q;\n    for(int i=0; i<26; i++){\n        if(ru[i]==0&&s1.count(i)){\n            q.push(Node(i,1));\n            sum++;\n        }\n    }\n    while(!q.empty()){\n        int u=q.front().u;\n        int val=q.front().val;\n        q.pop();\n        for(int i=0; i<vec[u].size(); i++){\n            int v=vec[u][i];\n            ru[v]--;\n            if(ru[v]==0){\n                sum++;\n                q.push(Node(v,val+1));\n                ans=max(ans,val+1);\n            }\n        }\n    }\n    if(ans==n){\n        printf(\"Sorted sequence determined after %d relations: \",k);\n        make();\n        cout<<\".\";\n        exit(0);\n    }\n    if(sum!=have){\n        printf(\"Inconsistency found after %d relations.\",k);\n        exit(0);\n    }\n}\nint ru2[MAXN];\nint main(){\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        string s;\n        cin>>s;\n        k=i;\n        vec[s[0]-'A'].push_back(s[2]-'A');\n        s1.insert(s[0]-'A');\n        s1.insert(s[2]-'A');\n        have=s1.size();\n        ru2[s[2]-'A']++;\n        sum=0;\n        ans=0;\n        memcpy(ru,ru2,sizeof(ru2));\n        topo();\n    }\n    printf(\"Sorted sequence cannot be determined.\");\n    return 0;\n}\n\n```",
        "postTime": 1538103093,
        "uid": 45696,
        "name": "gogoduan",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u8f83\u4e3a\u7b80\u5355\u7684\u62d3\u6251\u6392\u5e8f\u9898WA\u4e863\u6b21\u624dAC\uff0c\u6211\u7684\u601d\u8def\u8ddf\u5927\u591a\u6570\u9898\u89e3\u4e0d\u540c\uff0c\u53d1\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0bQwQ\n\n\u6211\u4eec\u5c06\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u5316\u4e3a\u4e00\u4e2a\u70b9\uff0c\u53ea\u9700\u8981\u8003\u8651\u6574\u4e2a\u56fe\u62d3\u6251\u6392\u5e8f\u7684\u60c5\u51b5\u3002\n\n\u8fd9\u9053\u9898\u9700\u8981\u5224\u65ad\u77db\u76fe\u3001\u5f97\u4e0d\u5230\u89e3\u7684\u60c5\u51b5\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u8fd9\u9053\u9898\u76ee\u6539\u4e3a\uff1a\u7ed9\u51faX\u6761\u9650\u5236\uff0c\u5224\u65ad\u8fd9$X$\u6761\u9650\u5236\"\u662f\u5426\u77db\u76fe\"\u3001\"\u5f97\u5230\u7ed3\u679c\"\u4e0e\"\u6761\u4ef6\u4e0d\u8db3\"\u3002\n\nbfs\u7248\u7684\u62d3\u6251\u6392\u5e8f\u662f\uff1a\u9996\u5148\u5c06$du[i]$\uff08\u5165\u5ea6\uff09$==0$\u7684\u70b9\u52a0\u5165\u961f\u5217\uff0c\u7136\u540e\u6bcf\u6b21\u53d6\u961f\u5217\u9996\uff0c\u5c06\u6240\u6709\u961f\u5217\u9996\u8fde\u5411\u7684\u70b9\u7684\u5165\u5ea6--\uff0c\u5206\u522b\u5224\u65ad\u6bcf\u4e2a\u8fde\u5411\u7684\u70b9\uff0c\u82e5\u5165\u5ea6\u4e3a$0$\uff0c\u5219\u518d\u52a0\u5165\u961f\u5217\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\u4e3a\u6b62\u3002\u53c2\u8003\u4e0b\u9762\u7684\u4f2a\u4ee3\u7801\uff1a\n\n```cpp\n\nfor i in range[1,n] :\n\ti\u5165\u961f\n    \nwhile \u961f\u5217\u4e0d\u4e3a\u7a7a :\n\t\u53d6\u961f\u9996u\n    for u\u53d1\u51fa\u7684\u8fb9p :\n    \tdu[p->v]--; \n        //p\u6240\u6307\u5411\u7684\u70b9\u7684\u5165\u5ea6--\uff0c\u4e5f\u76f8\u5f53\u4e8e\u628au\u53d1\u51fa\u7684\u8fb9\u90fd\u5220\u53bb\n        if du[p->v]==0 :\n        \tp->v\u5165\u961f\n            \n```\n\n\u9996\u5148\uff0c\u8fd9\u6837\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f\n#### \u7531\u4e8e\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u5c31\u5165\u961f\uff0c\u6240\u4ee5\u6700\u7ec8\u961f\u5217\u91cc\u7684\u70b9\u7684\u987a\u5e8f\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u4e2d\u7684\u961f\u5217\u6240\u5b58\u7684\u7ed3\u679c\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5224\u65ad\u662f\u5426\u77db\u76fe\u3002\n\n\u5f53\u6ca1\u6709\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u7684\u65f6\u5019\uff0c\u663e\u7136\u6761\u4ef6\u6709\u77db\u76fe\u3002\n\u540c\u65f6\uff0c\u5f53\u51fa\u73b0\u77db\u76fe\u65f6\uff0c\u6709\u4e9b\u70b9\u7684\u5165\u5ea6\u6c38\u8fdc\u4e0d\u4f1a\u51cf\u5230\u96f6\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u8fd9\u4e9b\u70b9\u6c38\u8fdc\u5165\u4e0d\u4e86\u961f\u3002\n\n#### \u56e0\u6b64\uff0c\u5f53\u6ca1\u6709\u70b9\u5165\u5ea6\u4e3a\u96f6\uff0c\u6216\u5f53\u6700\u7ec8\u5165\u961f\u7684\u70b9\u7684\u4e2a\u6570<n\u7684\u65f6\u5019\uff0c\u6761\u4ef6\u6709\u77db\u76fe\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u8003\u8651\u600e\u6837\u5224\u65ad\u6761\u4ef6\u4e0d\u8db3\u3002\n\n\u5982\u679c\u6700\u5f00\u59cb\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u6709\u4e0d\u6b62\u4e00\u4e2a\uff0c\u90a3\u4e48\u6761\u4ef6\u4e00\u5b9a\u4e0d\u8db3\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u7684\u987a\u5e8f\u65e0\u6cd5\u786e\u5b9a\u3002\n\u540c\u65f6\uff0c\u5982\u679c\u6bcf\u6b21\u53d6\u961f\u9996\u65f6\uff0c\u6709\u4e0d\u6b62\u4e00\u4e2a\u70b9\u5165\u961f\u4e86\uff0c\u90a3\u4e48\u6761\u4ef6\u4e00\u5b9a\u4e0d\u8db3\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u90fd\u53ea\u6709\u961f\u9996\u8fde\u5411\u7684\u8fb9\u3002\u6240\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u65e0\u6cd5\u786e\u5b9a\u987a\u5e8f\u3002\n\n\u53e6\u5916\u5c31\u662f\uff0c\u5982\u679c\u540c\u65f6\u6ee1\u8db3\u6761\u4ef6\u77db\u76fe\u4e0e\u6761\u4ef6\u4e0d\u8db3\uff0c\u8fd9\u65f6\u5e94\u8be5\u5224\u5b9a\u4e3a\u6761\u4ef6\u77db\u76fe\u3002\u5927\u5bb6\u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\uff08\u6211\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2aWA\u7684QwQ\uff09\n\n#### \u56e0\u6b64\uff0c\u5f53\u6709\u4e0d\u6b62\u4e00\u4e2a\u70b9\u5165\u5ea6\u4e3a\u96f6\uff0c\u6216\u5f53\u53d6\u540c\u4e00\u4e2a\u961f\u9996u\u65f6\u6709\u4e0d\u6b62\u4e00\u4e2av\u7684\u5165\u5ea6\u53d8\u6210\u4e86\u96f6\uff0c\u5219\u6761\u4ef6\u4e0d\u8db3\u3002\n\n\u8fd9\u9053\u9898\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u904d\u5386\u6bcf\u4e2a$1<=i<=m$\uff0c\u7528$1~i$\u6761\u8fb9\u5efa\u8fb9\uff0c\u7136\u540e\u8dd1\u62d3\u6251\u6392\u5e8f\u5373\u53ef\u3002\u5982\u679c\u6761\u4ef6\u77db\u76fe\u6216\u8005\u6761\u4ef6\u5145\u8db3\u76f4\u63a5\u8f93\u51fa\u5373\u53ef\uff0c\u5982\u679c\u6761\u4ef6\u4e0d\u8db3\u5219\u7ee7\u7eed\u52a0\u4e00\u6761\u8fb9\u91cd\u8dd1toposort\u3002\n\n\u9644\u4ee3\u7801\n\n```cpp\n\n#include <iostream>\n#include <cstring>\n#include <cstdio>\nusing namespace std;\n\nconst int maxn=30,maxm=905;\n\nstruct Node\n{\n\tint v;\n\tNode *next;\n}*h[maxn],pool[maxm];\nint tot;\nint du[maxn];\nint q[maxn],head,tail;\nint n,m;\n\nvoid addEdge(int u, int v)\n{\n\tNode *p=&pool[++tot];\n\tp->v=v; p->next=h[u]; h[u]=p;\n}\n\nint toposort() //\u8fd4\u56de\u503c\u4e3a1\u4ee3\u8868\u6210\u7acb\uff0c\u8fd4\u56de\u503c\u4e3a0\u4ee3\u8868\u6761\u4ef6\u4e0d\u8db3\uff0c\u8fd4\u56de\u503c\u4e3a-1\u4ee3\u8868\u6761\u4ef6\u77db\u76fe\n{\n\tint temp=0;\n\tint f=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(du[i]==0)\n\t\t{\n\t\t\tq[tail++]=i;\n\t\t\ttemp++;\n\t    } \n    }\n    if(temp>1)\n    \tf=1;\n    while(head<tail)\n    {\n    \ttemp=0;\n    \tint u=q[head++];\n    \tfor(Node *p=h[u];p;p=p->next)\n    \t{\n    \t\tdu[p->v]--;\n    \t\tif(du[p->v]==0)\n    \t\t{\n    \t\t\tq[tail++]=p->v;\n    \t\t\ttemp++;\n    \t\t}\n\t\t}\n\t\tif(temp>1)\n\t\t\tf=1;\n    }\n    if(tail!=n)\n    \treturn -1;\n    else\n\t\tif(f==1)\n\t\t\treturn 0;\n\telse return 1;\n}\t\n\nstruct Edge\n{\n\tint u,v;\n}a[maxm];\n\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar aa,bb,cc;\n\t\tcin>>aa>>bb>>cc;\n\t\ta[i].u=aa-'A'+1; a[i].v=cc-'A'+1;\n    }\n    for(int i=1;i<=m;i++)\n    {\n    \taddEdge(a[i].u,a[i].v);\n    \thead = tail = 0;\n    \tmemset(du,0,sizeof(du));\n    \tfor(int j=1;j<=i;j++) du[a[j].v]++;\n    \tint flag=toposort();\n    \tif(flag==1)\n    \t{\n    \t\tcout<<\"Sorted sequence determined after \"<<i<<\" relations: \";\n\t\t\tfor(int j=0;j<=n-1;j++)\n\t\t\t{\n\t\t\t\tcout<<(char)(q[j]+'A'-1);\n\t\t    }\n\t\t    cout<<'.'<<endl;\n\t\t    return 0;\n        }\n        else if(flag==0) continue;\n        else\n        {\n        \tcout<<\"Inconsistency found after \";\n        \tcout<<i<<\" relations.\"<<endl;\n        \treturn 0;\n        }\n    }\n    cout<<\"Sorted sequence cannot be determined.\"<<endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1537582867,
        "uid": 38212,
        "name": "mydiplomacy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u601d\u8def\u4e0e\u65b9\u6cd5\u7684\u8be6\u89e3\u5168\u90e8\u653e\u5728\u4e86\u4ee3\u7801\u91cc\u9762\n\n\n\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define N 110\nusing namespace std;\nint a,b,n,m,s,sum,tot,head[N],in[N],inn[N],p[N];\nbool v,unpd,vis[N];\nqueue<int>q;\nchar ch;\nint read()//\u5728\u8fd9\u91cc\u6211\u7528\u7684\u8bfb\u5165\u4f18\u5316 \n{\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-') f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=x*10+ch-'0';ch=getchar();}\n    return f*x;\n}\nstruct Edge\n{\n    int from,to,next;\n}edge[N];\nint add(int x,int y)\n{\n    tot++;\n    edge[tot].to=y;\n    edge[tot].next=head[x];\n    head[x]=tot;\n```\n}//\u548c\u4ee5\u524d\u7684\u62d3\u6251\u6392\u5e8f\u8fc7\u7a0b\u4e00\u6837\uff0c\u53ea\u662f\u591a\u52a0\u4e86\u51e0\u79cd\u60c5\u51b5\n```cpp\nint tp()\n{\n    unpd=false;    v=false; sum=0;//\u521d\u59cb\u6570\u503c \n    for(int i=1;i<=26;i++)//\u5f00\u59cb\u627e\u5165\u8bfb\u4e3a\u4e00\u7684\u70b9 \n     {\n         inn[i]=in[i];//\u7531\u4e8e\u6211\u4eec\u8981\u6ca1\u8f93\u5165\u4e00\u7ec4\u540e\u5c31\u5bf9\u8be5\u5e8f\u5217\u8fdb\u884c\u5224\u65ad\uff0c\u6240\u4ee5\u6211\u4eec\u65b0\u8bbe\u4e00\u4e2a\u6570\u7ec4inn\u50a8\u5b58in\u4e2d\u7684\u5404\u70b9\u5165\u5ea6\u7684\u503c\uff0c\u9632\u6b62\u6211\u4eec\u4e0b\u4e00\u6b21\u5728\u7528\u65f6\uff0c\u8be5\u5e97\u7684\u5165\u5ea6\u503c\u5df2\u4e0d\u662f\u521d\u59cb\u503c \n         if(!inn[i]&&vis[i])//\u8be5\u70b9\u7684\u5165\u8bfb\u4e3a0\u5e76\u4e14\u6211\u4eec\u8f93\u5165\u8fc7\u8be5\u503c \n          {\n              if(!v) v=true;//\u6211\u4eec\u8981\u5224\u65ad\u6709\u51e0\u4e2a\u5165\u8bfb\u4e3a0\u7684\u70b9\uff0c\u7531\u4e8e\u5982\u679c\u6709\u4e24\u4e2a\u5165\u8bfb\u4e3a0\u7684\u70b9\u6211\u4eec\u5219\u65e0\u6cd5\u5224\u65ad\u4ed6\u4eec\u7684\u5173\u7cfb\u56e0\u4e3a\u5165\u8bfb\u4e3a0\u7684\u70b9\u4e00\u5b9a\u662f\u5c0f\u7684\uff0c\u4f46\u8fd9\u4e24\u4e2a\u503c\u5f97\u5927\u5c0f\u6211\u4eec\u53c8\u65e0\u6cd5\u5224\u65ad \n              else unpd=true;//unpd\u7528\u6765\u5224\u65ad\u65e0\u6cd5\u5224\u6bb5\u7684\u60c5\u51b5 \n              q.push(i);\n              p[++sum]=i;\n           } \n      } \n    if(q.empty()) return 1;//\u5982\u679cq\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5c31\u8bf4\u660e\u51fa\u73b0\u4e86\u73af\uff0c\u5219\u662f\u5b58\u5728\u77db\u76fe\u7684\u60c5\u51b5\u3002 \n    while(!q.empty())//\u5355\u7eaf\u7684\u62d3\u6251\u6392\u5e8f\uff0c\u4f46\u6211\u4eec\u8981\u5728\u91cc\u9762\u591a\u52a0\u4e00\u70b9\u4e1c\u897f\uff1a\u548c\u524d\u9762\u5224\u65ad\u5165\u8bfb\u4e3a0\u7684\u65b9\u6cd5\u4e00\u6837\uff0c\u5982\u679c\u5220\u9664\u4e00\u4e2a\u70b9\u4ee5\u540e\u51fa\u73b0\u4e86\u4e24\u4e2a\u5165\u5ea6\u4e3a0\u7684\u8fb9\uff0c\u8fd9\u6837\u6211\u4eec\u5c06\u65e0\u6cd5\u5224\u65ad\u8fd9\u4e24\u4e2a\u70b9\u7684\u5927\u5c0f \n    {\n        int x=q.front();v=false;q.pop();\n        for(int i=head[x];i;i=edge[i].next)\n        {\n            inn[edge[i].to]--;\n            if(!inn[edge[i].to])\n            {\n                q.push(edge[i].to);\n                if(!v) v=true;\n                else unpd=true;\n                p[++sum]=edge[i].to;\n            } \n        }\n    }\n    if(sum!=s) return 1;//\u8bf4\u660e\u51fa\u73b0\u4e86\u73af\u3002 \n    if(unpd) return 2;\n    return 0; \n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        cin>>ch,a=ch-64;if(!vis[a]) vis[a]=true,s++;//s\u662f\u7528\u6765\u5b58\u6211\u4eec\u8f93\u5165\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u65b9\u4fbf\u540e\u9762\u5224\u65ads\u503c\u4e0esum\u503c\u7684\u5173\u7cfb\uff08\u6765\u5224\u65ad\u662f\u5426\u4e3a\u73af\uff09 \n        cin>>ch;//\u8fd9\u4e2a\u5728\u8f93\u5165\u65f6\u5176\u5b9e\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8868\u793a\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u7531\u4e8e\u6709\u4e00\u4e2a<\u662f\u6ca1\u6709\u7528\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8f93\u5165\u5c31\u597d\u4e86 \n        cin>>ch,b=ch-64;if(!vis[b]) vis[b]=true,s++;//vis\u7528\u6765\u8868\u793a\u8be5\u6570\u6709\u503c \n        add(a,b);//\u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u6211\u4eec\u8f93\u5165\u7684\u5b57\u7b26\u8f6c\u5316\u6210\u4e86\u6570\u5b57\uff0c\u65b9\u4fbf\u540e\u9762\u8fdb\u884c\u64cd\u4f5c \n        in[b]++;//\u50a8\u5b58\u5165\u8bfb \n        if(tp()==1) //\u5728\u8fd9\u91cc\u6211\u4eec\u5fc5\u987b\u8ba9\u4ed6\u7b49\u4e8e1\uff0c\u56e0\u4e3a\u6211\u4eec\u5728tp\u51fd\u6570\u4e2d\u8fd4\u56de\u7684\u662f0,1,2 \n        {\n            printf(\"Inconsistency found after %d relations.\",i);//\u5b58\u5728\u77db\u76fe \n            return 0;\n        }\n        if(sum==n&&!tp())//sum=n,\u8bf4\u660e\u8be5\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u6570\u90fd\u8fdb\u884c\u4e86\u6392\u5e8f\uff0c\u90fd\u80fd\u786e\u5b9a\u4ed6\u4eec\u7684\u4f4d\u7f6e \n        {\n            printf(\"Sorted sequence determined after %d relations: \",i);\n            for(int j=1;j<=n;j++) printf(\"%c\",p[j]+64);//\u5728\u6700\u5f00\u59cb\u7684\u65f6\u5019\u6211\u7adf\u7136\u8ba9\u4ed6\u8f93\u51fap[i]+64.\u8fd9\u544a\u8bc9\u6211\u4eec\u8981\u6ce8\u610f\u6211\u4eec\u5faa\u73af\u4f7f\u7528\u7684\u53d8\u91cfi,j \n            printf(\".\");\n            return 0;\n        }\n    }\n    printf(\"Sorted sequence cannot be determined.\");//\u7531\u4e8e\u6211\u4eec\u5728tp\u51fd\u6570\u4e2d\u53ea\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u9664\u4e86\u524d\u4e24\u79cd\u5269\u4e0b\u7684\u5c31\u662f\u8fd9\u4e00\u79cd\u4e86\u3002 \n    return 0;\n}\n```",
        "postTime": 1497529863,
        "uid": 43615,
        "name": "QwQ_operator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "# **\u6700\u957f\u8def\u505a\u6cd5**\n~~\u6bd5\u7adf\u2026\u2026\u6570\u636e\u91cf\u5c0f\u7684\u53ef\u601c\u2026\u2026~~\n## \u901a\u8fc7\u9898\u610f\u6613\u5f97\uff1a\n### \t\u5982\u679c\u8981\u786e\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u90a3\u4e48\u4e00\u5b9a\u5f97\u4ece\u5934\u5230\u5c3e\u6709\u4e2an\u4e2a\u70b9\u6784\u6210\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u8bf4\u901a\u8fc7\u4e00\u6761\u5355\u5411\u9053\u8def\u8d70\u5230\u5e95\u521a\u597d\u80fd\u8d70\u904d\u5168\u90e8n\u4e2a\u70b9\n    \n#### \t\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u901a\u8fc7\u4ec0\u4e48\u6765\u786e\u5b9a\u4ed6\u7684\u8d77\u70b9\u5462\uff1f\u5f53\u7136\u6709\u540c\u5b66\u8bf4\u53ef\u4ee5\u7edf\u8ba1\u5165\u5ea6\u7684\u65b9\u6cd5\uff0c\u8fd9\u8fb9\u5462\u6211\u7528\u4e86\u4e2a\u8d85\u7ea7\u539f\u70b9\u548c\u8d85\u7ea7\u7ec8\u70b9\uff0c\u9999\u554a\uff01\n###     \u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u8981\u662f\u80fd\u8d70\u51fa\u4e00\u4e2a\u4ee5\u8d85\u7ea7\u539f\u70b9\u5230\u8d85\u7ea7\u7ec8\u70b9\u4e0d\u5e26\u91cd\u590d\u70b9\u7684\u8def\u5f84\u2014\u2014\u5c31\u6210\u54af\uff01\n####     \u4f46\u662f\u4e07\u4e00\u6709\u73af\u600e\u4e48\u529e\uff08\u6837\u4f8b2\uff09\uff0c\u4e07\u4e00\u8d70\u4e0d\u5230\u600e\u4e48\u529e\uff08\u6837\u4f8b3\uff09\n####     \u8fd9\u65f6\u5019\u6700\u957f\u8def\u5c31\u51fa\u6765\u9732\u8138\u4e86\uff0c~~\u6240\u4ee5\u8bf4\u522b\u628a\u56fe\u8bba\u5b66\u6b7b\u4e86~~**\n    \n### \u6211\u4eec\u901a\u8fc7\u4e00\u904d\u8f93\u5165\u5173\u7cfb\u4e00\u904d\u7edf\u8ba1\u7edf\u8ba1\u8d85\u7ea7\u539f\u70b9\u5230\u8d85\u7ea7\u7ec8\u70b9\u7684\u6700\u957f\u8def\uff08\u70b9\u6743\u90fd\u8bbe1\uff09\uff1a\n    1. \u5982\u679c\u80fd\u8d70\u51fa\u6765\u957f\u5ea6\u4e3an+2\u7684\u6700\u957f\u8def\uff0c\u8bc1\u660e\u4f7f\u7528\u76ee\u524d\u4e3a\u6b62\u7ed9\u7684k\u6761\u5173\u7cfb\uff08\u8fb9\uff09\u5c31\u80fd\u5f97\u5230\u6240\u6709\u70b9\u7684\u5b8c\u6574\u5e8f\u5217\n    2. \u5982\u679c\u5728\u7edf\u8ba1\u6700\u957f\u8def\u65f6\u8def\u5f84\u957f\u5ea6\u5df2\u7ecf\u8d85\u8fc7\u4e86n+2\uff0c\u90a3\u4e48\u80af\u5b9a\u662f\u5230\u76ee\u524d\u7ed9\u7684\u5173\u7cfb\uff08\u8fb9\uff09\u4e2d\u4e00\u5b9a\u6709\u73af\u8def\u7684\u5b58\u5728\uff08\u60f3\u4e0d\u660e\u767d\uff1f\u7ec6\u54c1\uff01\u4e00\u4e2a\u5b8c\u6574\u5e8f\u5217\u600e\u4e48\u53ef\u80fd\u6709\u91cd\u590d\u7684\u70b9\uff1f\uff09\n    3. \u5982\u679c\u5173\u7cfb\u8f93\u5165\u5230\u6700\u540e\uff0c\u53d1\u73b0\u6839\u672c\u8d70\u4e0d\u5230\u7ec8\u70b9\uff0c\u90a3\u4e48\u5c31\u8bc1\u660e\u65e0\u6cd5\u5f97\u51fa\u6574\u5f20\u5e8f\u5217\n###     \u8fd9\u6837\u53ef\u53d1\u73b0\uff0c\u6211\u4eec\u4e0d\u4ec5\u89e3\u51b3\u4e86\u4e09\u79cd\u60c5\u51b5\uff0c\u800c\u4e14\u521a\u597d\u7b26\u5408\u9898\u76ee\u7684\u610f\u601d\uff08\u5982\u679c\u65e0\u6cd5\u6392\u5217\u4f46\u662f\u7ed9\u7684\u6761\u4ef6\u4e2d\u6709\u77db\u76fe\u4e5f\u4f1a\u5f53\u505a\u77db\u76fe\u5904\u7406\uff09\u4e00\u65e6\u627e\u5230\u60c5\u51b5\uff08\u60c5\u51b5\u4e09\u8981\u7b49\u5230\u6700\u540e\u8f93\u5165\u5b8c\u5173\u7cfb\u624d\u80fd\u8bc1\u660e\uff09\u5c31\u80fd\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\uff01\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=30;\nint n,m,path[N];//\u8bb0\u5f55\u524d\u9a71\nvector<int> G[N];\nbool g[N][N];//\u4fdd\u8bc1\u6ca1\u6709\u91cd\u8fb9\u7684\u5e72\u6270\n  \nvoid dfs(int v)//\u8f93\u51fa\u5e8f\u5217\n{\n\tif(path[v]) dfs(path[v]);\n\tcout<<char('A'+v-1);\n}\n  \nvoid bfs(int k)//\u6b63\u7ecf\u6700\u957f\u8def\uff0ck\u5c31\u662f\u76ee\u524d\u77e5\u9053\u7684\u5173\u7cfb\n{\n\tqueue<int> p;\n\tint dis[N]={0};\n\tdis[0]=1;\n\tp.push(0);\n\twhile (!p.empty())\n\t{\n\t\tint u=p.front();\n\t\t\tp.pop();\n\t\tfor(int i=0;i<G[u].size();i++)\n\t\t{\n\t\t\tint v=G[u][i];\n\t\t\tif(dis[v]<dis[u]+1)\n\t\t\t{\n\t\t\t\tpath[n+1]=v;\n\t\t\t\tpath[v]=u;\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tp.push(v);\n\t\t\t}\n\t\t\tif(dis[v]>n+2)//\u53d1\u73b0\u77db\u76fe\u76f4\u63a5\u6253\u65ad\u7a0b\u5e8f\n\t\t\t{\n\t\t\t\tprintf(\"Inconsistency found after %d relations.\",k);\n\t\t\t\texit(0);//\u7ec8\u6b62\u4e00\u5207\t\n\t\t\t}\n\t\t}\n\t}\n\tif(k==m&&dis[n+1]!=n+2) //\u5230\u6700\u540e\u8fd8\u662f\u4e0d\u884c\n\t\tcout<<\"Sorted sequence cannot be determined.\";\n\tif(dis[n+1]==n+2)//\u53e3\u4ee5\u5566\n\t{\n\t\tprintf(\"Sorted sequence determined after %d relations: \",k);\n\t\tdfs(path[n+1]);\n\t\tcout<<\".\";\n\t\texit(0);\n\t}\t\n}\n  \nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\t\n\tfor(int i=1;i<=n;i++)//\u5efa\u7acb\u6bcf\u4e2a\u70b9\u548c\u8d85\u7ea7\u70b9\u7684\u8054\u7cfb\n\t{\n\t\tG[0].push_back(i);\n\t\tG[i].push_back(n+1);\n\t}\t\n\t\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar a,b,c;\n\t\tcin>>a>>b>>c;\n\t\t//getchar();\n\t\tif(!g[a-'A'+1][c-'A'+1])\n\t\t{\n\t\t\tG[a-'A'+1].push_back(c-'A'+1);\n\t\t\tg[a-'A'+1][c-'A'+1]=1;\n\t\t}\n\t\t\n\t\tbfs(i);\n\t}\n}\n```\n\n",
        "postTime": 1584707606,
        "uid": 238784,
        "name": "cjhspeed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "# [P1347](https://www.luogu.org/problem/P1347)\n\n---\n\n**\u672c\u4eba\u6c34\u5e73\u4e0d\u9ad8\uff0c\u6709\u9519\u8bef\u8fd8\u8bf7\u6307\u51fa\uff0c\u8c22\u8c22**\n\n---\n\n## \u770b\u9898\n\n### \u5206\u6790\u6837\u4f8b\n\n#### Sample #1\n\n```cpp\n//data1.in\n4 6\nA<B\nA<C\nB<C\nC<D\nB<D\nA<B\n//data1.out\nSorted sequence determined after 4 relations: ABCD.\n```\n\n\u901a\u8fc7\u5206\u6790\u6837\u4f8b1\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a**\u6211\u4eec\u7684\u6700\u7ec8\u7b54\u6848\u662f\u7531\u4e00\u6761\u94fe\u7ec4\u6210**\u3002\n\n![pic_1](https://s2.ax1x.com/2019/11/24/ML7xI0.png)\n\n#### Sample #2\n\n```cpp\n//data2.in\n3 2\nA<B\nB<A\n//data2.out\nInconsistency found after 2 relations.\n```\n\n\u901a\u8fc7\u5206\u6790\u6837\u4f8b2\uff0c\u6211\u4eec\u5f97\u77e5\uff1a**\u73af\u7684\u51fa\u73b0\u610f\u5473\u7740\u4e0d\u5408\u6cd5\u7684\u5927\u5c0f\u5173\u7cfb**\u3002\n\n![pic_2](https://s2.ax1x.com/2019/11/24/MLH9RU.png)\n\n#### Sample #3\n\n```cpp\n//data3.in\n26 1\nA<Z\n//data3.out\nSorted sequence cannot be determined.\n```\n\u901a\u8fc7\u5206\u6790\u6837\u4f8b3\uff0c\u6211\u4eec\u53c8\u77e5\u9053\u4e86\uff1a**\u53ea\u6709\u5f53\u5168\u56fe\u8054\u901a\u65f6\uff0c\u624d\u6709\u89e3**\u3002\n\n![pic_3](https://s2.ax1x.com/2019/11/24/MLHpGT.png)\n\n### \u770b\u6570\u636e\u8303\u56f4\n\n\u8fd9\u9898\u5f88\u53cb\u597d\uff0c\u6570\u636e\u5e76\u4e0d\u7b97\u5f3a\uff1a\n$$\n2 \\le n \\le 26\n$$\n\n\u867d\u7136\u6211\u4eec\u6e05\u695a\u5730\u77e5\u9053\uff0c ``m`` \u7684\u8303\u56f4\u662f\u65e0\u9650\u7684\uff0c\u4f46\u662f\u90a3\u53c8\u5982\u4f55\uff1f\n\u6211\u4eec\u4e00\u5b9a\u662f\u53ef\u4ee5\u5728\u6709\u9650\u7684\u8fb9\u6570\u5185\u6c42\u51fa\u7b54\u6848\u7684\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e8b\u5b9e\u4e0a\u662f\u8fd9\u6837(\u65e0\u91cd\u8fb9\u548c\u81ea\u73af)\uff1a\n$$\n2^{2} \\le m \\le 26^{2}\n$$\n\n## \u8003\u8651\u7ec6\u8282\n\n### \u5224**\u91cd\u8fb9**\n\n~~\u5176\u5b9e\u4e0d\u7528\u5224\uff0c\u91cd\u8fb9\u4e0d\u5f71\u54cd\u7b54\u6848\uff0c\u53ea\u662f\u5360\u7a7a\u95f4~~\n\n### \u5224**\u73af**\n\n#### \u81ea\u73af\n\n\u8fd9\u4e2a\u5f88\u597d\u529e\uff1a\n\n```cpp\nint u , v ; \nu = readlint ( ) ; \nv = readlint ( ) ; \nif ( u == v )\n{\n    //\u51fa\u73b0\u81ea\u73af,\u7b54\u6848\u975e\u6cd5\n    return 0 ;\n}\n```\n\n#### \u73af\n\n\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f ``Tarjan`` \u5224\u5f3a\u8054\u901a\u3002\n~~\u53cd\u6b63\u6570\u636e\u4e5f\u4e0d\u5f3a\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u66b4\u529b\u5462\u3002~~\n\n```cpp\ntarjan_init ( ) ; //Tarjan\u521d\u59cb\u5316\nfor ( int j = 1 ; j <= n ; j ++ ) //\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u70b9\n{\n    if ( ! dfn[ j ] ) //\u5982\u679cj\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7(\u65e0\u65f6\u95f4\u6233)\n    {\n        tarjan ( j ) ; //\u628a\u5b83Tarjan\u6389\n    }\n}\nif ( scccnt < n ) //\u5f3a\u8fde\u901a\u5206\u91cf\u6570 < \u603b\u70b9\u6570\n{\n\t//\u51fa\u73b0\u73af,\u7b54\u6848\u975e\u6cd5\n    return 0 ;\n}\n```\n\n\u53ef\u662f\u4e3a\u4ec0\u4e48 ``scccnt < n`` \u65f6\u5c31\u51fa\u73b0\u4e86\u73af\u5462\uff1f\n\n\u663e\u7136,\u5982\u679c\u591a\u4e2a\u70b9\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u5b83\u4eec\u4e00\u5b9a\u662f\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u3002\n\u6240\u4ee5\u6211\u4eec\u7684\u5f3a\u8054\u901a\u5206\u91cf\u6570\u5c31\u4f1a\u6bd4 ``n`` \u5c11\uff0c\u8fd9\u662f\u4e00\u5b9a\u7684\u3002\n\n### \u5224**\u94fe**\n\n\u7a0d\u7a0d\u5206\u6790\u4e00\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u4e00\u4e2a\u94fe\u4e00\u5b9a**\u5b58\u5728\u4e14\u65f6\u5b58\u5728\u53ea\u5b58\u5728\u4e00\u4e2a**``\u5165\u5ea6\u4e3a\u96f6``\u7684\u70b9\u548c**\u4e00\u4e2a**``\u51fa\u5ea6\u4e3a\u96f6``\u7684\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ee5\u8fd9\u4e2a\u4e3a\u8fdb\u5165\u7b54\u6848\u5224\u65ad\u7684\u6807\u51c6\u3002(\u56e0\u4e3a\u4fdd\u8bc1\u65e0\u73af\u540e\u624d\u4f1a\u8fdb\u5165\u5224\u94fe)\n\n```cpp\n//\u5165\u5ea6\u4e3a\u96f6\u7684\u70b9\u4ec5\u6709\u4e00\u4e2a && \u51fa\u5ea6\u4e3a\u96f6\u7684\u70b9\u4ec5\u6709\u4e00\u4e2a\nif ( indegcnt == n - 1 &&  outdegcnt == n - 1 ) \n{\n    //\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n    //\u8f93\u51fa\u7b54\u6848\n    return 0 ; \n}\n```\n\n\u4f46\u8fd9\u5c31\u591f\u4e86\u5417\uff1f\n\n\u50cf\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e\u5c31\u80fd\u5361\u6389\u521a\u624d\u7684\u60f3\u6cd5\uff1a\n\n![pic_4](https://s2.ax1x.com/2019/11/24/ML7vaq.png)\n\n\u94fe\u4e2d(\u975e\u9996\u5c3e)\u7684\u6bcf\u4e00\u4e2a\u70b9\u4e00\u5b9a\u53ea\u6709**\u552f\u4e00\u7684\u524d\u9a71**\u548c**\u552f\u4e00\u7684\u540e\u7ee7**\u3002\n\n\u6240\u4ee5\u5728\u62d3\u6251\u6392\u5e8f\u4e2d\u5e94\u8be5\u8fd9\u4e48\u5e72\uff1a\n\n```cpp\nbool mrk = false ; //\u6807\u8bb0\u578b\u53d8\u91cf\nfor ( int i = list [ u ] ; i ; i = e [ i ].last ) //\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\n{\n    //\u6539\u70b9\u53ef\u5230\u8fbe\u7684\u70b9\u5165\u5ea6\u81ea\u51cf\n    //\u5982\u679c\u53ef\u8fbe\u7684\u70b9\u5165\u5ea6\u53d8\u4e3a\u96f6\uff0c\u8fdb\u5165\u5206\u652f\u8bed\u53e5\n    if ( ! ( -- indeg [ e [ i ].to ] ) )\n    {\n        if ( mrk ) //\u5982\u679c\u6807\u8bb0\u8fc7\uff0c\u90a3\u4e48\u6539\u70b9\u6709\u4e24\u4e2a\u540e\u7ee7\n        {\n            return false ; //\u975e\u94fe\n        }\n        que [ ++ quehead ] = e [ i ].to ; //\u5426\u5219\u5165\u961f\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u64cd\u4f5c\n        mrk = true ; //\u6253\u4e0a\u6807\u8bb0\n    }\n}\n```\n\n### \u5224\u6761\u4ef6\u4e0d\u591f\n\n\u8fd9\u5c31\u4e0d\u96be\u4e86\uff0c\u5982\u679c\u6240\u6709\u8fb9\u90fd\u52a0\u8fdb\u6765\u4e86\u4f9d\u7136\u6ca1\u6709**\u65e0\u89e3**\u6216**\u7b54\u6848**\uff0c\u90a3\u81ea\u7136\u5c31\u662f\u6761\u4ef6\u4e0d\u591f\u3002\n\n\u6240\u4ee5\uff1a\n\n```cpp\n//\u4e00\u7cfb\u5217\u64cd\u4f5c\n//\u5982\u679c\u90fd\u6ca1\u6709\u4f7f\u7a0b\u5e8f\u9000\u51fa\n//\u90a3\u4e48\u4e00\u5b9a\u662f\u6761\u4ef6\u4e0d\u591f\n\nprintf ( \"Sorted sequence cannot be determined.\\n\" ) ; //\u8f93\u51fa\u6761\u4ef6\u4e0d\u591f\n\nreturn 0 ; \n```\n\n## [AC\u4ee3\u7801](https://www.luogu.org/record/27711595)\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string>\n#include <cstring>\nusing namespace std ; \n\ntypedef long long lint ; \ntypedef long double ntrl ; \n\n#define MAXN 30\n\ninline lint readlint ( )\n{\n\tchar tmp = getchar ( ) ; \n\tlint val = 0 , sign = 1 ; \n\twhile ( tmp < '0' || tmp > '9' ) { if ( tmp == '-' ) sign = - sign ; tmp = getchar ( ) ; }\n\twhile ( '0' <= tmp && tmp <= '9' ) { val = (val << 1 ) + ( val << 3 ) + tmp - 48 ; tmp = getchar ( ) ; }\n\treturn val * sign ; \n}\n\n///adjacency list///\nstruct node\n{\n\tint last ; \n\tint to ; \n} e [ MAXN * MAXN ] ;\nint list [ MAXN ] , edgecnt ;\ninline void addedge ( int u , int v )\n{\n\te [ ++ edgecnt ].to = v ; \n\te [ edgecnt ].last = list [ u ] ; \n\tlist [ u ] = edgecnt ; \n}\n//////\n\nint n , m ; \n\n///topological sorting///\nint indeg [ MAXN ] , outdeg [ MAXN ] ; \nint indegcnt , outdegcnt ; \nint topo [ MAXN ] , topotop ; \nint que [ MAXN ] , quehead , quetail ; \ninline bool toposort ( ) \n{\n\tquehead = quetail = topotop = 0 ; \n\tmemset ( topo , 0 , sizeof ( topo ) ) ;\n\tmemset ( que , 0 , sizeof ( que ) ) ;\n\tfor ( int i = 1 ; i <= n ; i ++ )\n\t{\n\t\tif ( ! indeg [ i ] )\n\t\t{\n\t\t\tque [ ++ quehead ] = i ; \n\t\t}\n\t}\n\tint u ; \n\twhile ( quehead != quetail )\n\t{\n\t\tu = que [ ++ quetail ] ; \n\t\ttopo [ ++ topotop ] = u ; \n\t\tbool mrk = false ; \n\t\tfor ( int i = list [ u ] ; i ; i = e [ i ].last )\n\t\t{\n\t\t\tif ( ! ( -- indeg [ e [ i ].to ] ) )\n\t\t\t{\n\t\t\t\tif ( mrk )\n\t\t\t\t{\n\t\t\t\t\treturn false ; \n\t\t\t\t}\n\t\t\t\tque [ ++ quehead ] = e [ i ].to ; \n\t\t\t\tmrk = true ; \n\t\t\t}\n\t\t}\n\t}\n\tif ( topotop == n )\n\t{\n\t\treturn true ; \n\t}\n\telse \n\t{\n\t\treturn false ; \n\t}\n}\n//////\n\n///tarjan///\nint stck[ MAXN ] , stcktop ; \nint dfn[ MAXN ] , low[ MAXN ] , dfncnt ; \nint scc[ MAXN ] , sccsize[ MAXN ] , scccnt ; \ninline void tarjan_init ( ) \n{\n\tmemset ( stck , 0 , sizeof ( stck ) ) ;\n\tmemset ( dfn , 0 , sizeof ( dfn ) ) ;\n\tmemset ( low , 0 , sizeof ( low ) ) ;\n\tmemset ( scc , 0 , sizeof ( scc ) ) ;\n\tmemset ( sccsize , 0 , sizeof ( sccsize ) ) ;\n\tstcktop = dfncnt = scccnt = 0 ; \n}\ninline void tarjan ( int u )\n{\n\tlow[ u ] = dfn[ u ] = ++ dfncnt ; \n\tstck[ ++ stcktop ] = u ; \n\t\n\tfor ( int i = list[u] ; i ; i = e[ i ].last )\n\t{\n\t\tconst int v = e[ i ].to ; \n\t\tif ( ! dfn[ v ] )\n\t\t{\n\t\t\ttarjan( v ) ; \n\t\t\tlow[ u ] = min( low[ u ] , low[ v ] ) ; \n\t\t}\n\t\telse if ( ! scc[ v ] )\n\t\t{\n\t\t\tlow[ u ] = min( low[ u ] , dfn[ v ] ) ; \n\t\t}\n\t}\n\t\n\tif ( dfn[ u ] == low[ u ] )\n\t{\n\t\t++ scccnt ; \n\t\tdo \n\t\t{\n\t\t\tscc[ stck[ stcktop ] ] = scccnt ; \n\t\t\tsccsize[ scccnt ] ++ ; \n\t\t}\n\t\twhile ( stck[ stcktop -- ] != u ) ; \n\t}\n}\n//////\n\nint main ( ) \n{\n\tn = readlint ( ) ; \n\tm = readlint ( ) ; \n\tindegcnt = outdegcnt = 0 ; \n\t{\n\t\tstring got ; \n\t\tfor ( int i = 1 ; i<= m ; i ++ )\n\t\t{\n\t\t\tcin >> got ; \n\t\t\taddedge ( got [ 0 ] - 64  , got [ 2 ] - 64 ) ; \n\t\t\tif ( got [ 0 ]  == got [ 2 ]  )\n\t\t\t{\n\t\t\t\tprintf ( ''Inconsistency found after %d relations.\\n'' , i ) ; \n\t\t\t\treturn 0 ; \n\t\t\t}\n\t\t\tif ( ! indeg [ got [ 2 ] - 64 ] )\n\t\t\t{\n\t\t\t\tindegcnt ++ ;\n\t\t\t}\n\t\t\tindeg [ got [ 2 ] - 64 ] ++ ; \n\t\t\tif ( ! outdeg [ got [ 0 ] - 64 ] )\n\t\t\t{\n\t\t\t\toutdegcnt ++ ;\n\t\t\t}\n\t\t\toutdeg [ got [ 0 ] - 64 ] ++ ; \n\n\t\t\ttarjan_init ( ) ;\n\t\t\tfor ( int j = 1 ; j <= n ; j ++ )\n\t\t\t{\n\t\t\t\tif ( ! dfn[ j ] )\n\t\t\t\t{\n\t\t\t\t\ttarjan ( j ) ; \n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( scccnt < n )\n\t\t\t{\n\t\t\t\tprintf ( ''lnconsistency found after %d relations.\\n'' , i ) ; \n\t\t\t\treturn 0 ;\n\t\t\t}\n\t\t\telse if ( indegcnt == n - 1 &&  outdegcnt == n - 1 )\n\t\t\t{\n\t\t\t\tif ( toposort ( ) )\n\t\t\t\t{\n\t\t\t\t\tprintf ( ''Sorted sequence determined after %d relations: '' ,  i ) ; \n\t\t\t\t\tfor(int i = 1 ; i <= n ; i ++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tprintf ( ''%c'' , topo [ i ] + 64 ) ; \n\t\t\t\t\t}\n\t\t\t\t\tprintf ( ''.\\n'' ) ; \n\t\t\t\t\treturn 0 ; \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprintf ( ''Sorted sequence cannot be determined.\\n'' ) ;\n\n\treturn 0 ; \n}\n```\n\n",
        "postTime": 1574581539,
        "uid": 44504,
        "name": "BlueDone",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "# \u8fd9\u662f\u62d3\u6251\u6392\u5e8f\u6a21\u677f\u9898~\n     \u662f\u9053\u597d\u9898\uff0c\u8003\u5bdf\u5bf9\u62d3\u6251\u6392\u5e8f(topological sorting)\u7684\u7406\u89e3\u3002\n   \u56e0\u4e3a\u9898\u76ee\u95ee\u7684\u662f\u7b2c\u51e0\u4e2a\u5173\u7cfb\u5f0f\u540e\u5f97\u51fa\u7ed3\u679c\uff0c\u6240\u4ee5\u8003\u8651\u5bf9\u6bcf\u6b21\u8f93\u5165\u5173\u7cfb\u5f0f\u540e\u7684\u72b6\u6001\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff1a\n\t\n    \u62d3\u6251\u6392\u5e8f\u601d\u60f3\uff1a\n      1.\u5efa\u7acb\u6808\uff0c\u5c06\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u6808\u3002\n      2.\u5c06\u6808\u9996\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u5165\u5ea6\u51cf\u4e00\u3002\n      3.\u5f53\u6808\u4e0d\u7a7a\u65f6\u4e0d\u65ad\u9000\u6808\u5e76\u91cd\u590d\u6b65\u9aa4\u4e00\n   \u5176\u4e2d\uff0c\u6ce8\u610f\u5b9a\u4e49vis\u6570\u7ec4\u6807\u8bb0\u8fdb\u8fc7\u6808\u7684\u70b9\uff0c\u5e76\u4e14\u5343\u4e07\u6ce8\u610f\u5176\u5728\u4ee3\u7801\u4e2d\u6807\u8bb0\u7684\u4f4d\u7f6e\uff01\uff08~~\u6211\u5728\u6837\u4f8b\u4e09\u4e2d\u56e0\u4e3a\u53ea\u5728\u9000\u6808\u65f6\u6807\u8bb0\u800c\u5728\u6808\u4e2d\u63a8\u5165\u4e86\u65e0\u6570\u6ca1\u7528\u7684\u70b9\uff0c\u5361\u7206~~\uff09\n   \n   \u4ece\u4e2d\uff0c\u6211\u4eec\u80fd\u201c\u89c1\u7f1d\u63d2\u9488\u201d\u7684\u5f97\u5230\u6b63\u89e3\uff1a\n   \n      1.\u8bb0\u5f55**\u51fa\u6808**\u4e2a\u6570sz\uff0c\u4e00\u6b21\u62d3\u6251\u6392\u5e8f\u4e2dsz\u5c0f\u4e8e0\uff0c\u8bf4\u660e\u4e00\u4e9b\n        \u70b9\u6784\u6210\u4e86\u73af\uff0c\u8868\u793a\u5b58\u5728\u77db\u76fe\uff0c\u8f93\u51fa\u540e\u76f4\u63a5\u7ed3\u675f\u7a0b\u5e8f\n      2.\u68c0\u67e5\u6bcf\u6b21\u51fa\u6808\u524d\u6808\u4e2d\u5143\u7d20\u4e2a\u6570\uff0c\u82e5\u5927\u4e8e1\uff0c\u8bf4\u660e\u5b83\u4eec\u95f4\u5173\u7cfb\n        \u672a\u5b9a\n      3.\u82e5\u5173\u7cfb\u786e\u5b9a\uff0c\u8bb0\u5f55\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u4e0d\u80fd\u7ed3\u675f\u7a0b\u5e8f\uff0c\u8fd8\u6709\u51fa\u73b0\u77db\n        \u76fe\u7684\u53ef\u80fd\n\u6700\u540e\u5949\u4e0aAC\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 30;\n\nint n, m;\nvector<int> e[maxn];\nint degree[maxn];\nint a[maxn];\nstack<int> s;\nbool vis[maxn];\nint mrk;\n\nbool topo(int r) {\n\tint sz = 0;\n\tbool finished = true;\n\tint t[maxn];\n\tfor(int i = 0; i < n; i++) {\n\t\tt[i] = degree[i];\n\t\tif(!degree[i]) s.push(i), vis[i] = true;\n\t}\n\twhile(!s.empty()) {\n\t\tif(s.size() > 1) finished = false;\n\t\tint k = s.top();\n\t\ta[sz++] = k; \n\t\ts.pop();\n\t\tfor(int i = 0; i < e[k].size(); i++) t[e[k][i]]--;\n\t\tfor(int i = 0; i < n; i++) if(!t[i] && !vis[i]) s.push(i), vis[i] = true;;\n\t}\n\tif(sz < n) return false;\n\tif(finished && !mrk) mrk = r;\n\treturn true;\n}\n\nint main() {\n\tcin>>n>>m;\n\tfor(int i = 1; i <= m; i++) {\n\t\tchar c[3];\n\t\tscanf(\"%s\", c);\n\t\tint x = c[0] - 'A', y = c[2] - 'A';\n\t\te[x].push_back(y);\n\t\tdegree[y]++;\n\t\tif(!topo(i)) {\n\t\t\tcout<<\"Inconsistency found after \"<<i<<\" relations.\";\n\t\t\treturn 0;\n\t\t}\n\t\tmemset(vis, false, sizeof(vis));\n\t}\n\tif(mrk) {\n\t\tcout<<\"Sorted sequence determined after \"<<mrk<<\" relations: \";\n\t\tfor(int i = 0; i < n; i++) cout<<char(a[i] + 'A');\n\t\tcout<<\".\";\n\t}\n\telse cout<<\"Sorted sequence cannot be determined.\";\n\treturn 0;\n}\n```\n PS\uff1a~~\u73b0\u5728\u5df2\u8003\u4e86CSP DAY1\u4e86\u624d\u505a\u6211\u7684\u7b2c\u4e00\u9053\u62d3\u6251\u6392\u5e8f\u7684\u9898~~qwq\n \n \u8fd9\u662f\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c~~\u6c42\u7ba1\u7406\u5458\u653e\u8fc7~~~qwq",
        "postTime": 1573896905,
        "uid": 228388,
        "name": "ZZRZZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "#\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\u8fd8\u6709\u70b9\u5c0f\u6fc0\u52a8 (\u273f\u25d5\u203f\u25d5\u273f)\n\n\n\u8fd9\u9053\u9898\u8fd8\u662f\u633a\u5751\u7684\uff0c\u5982\u679c\u4f60\u7b2c\u4e5d\u4e2a\u70b9\u6ca1\u8fc7\u8981\u4e48\u662f\u6ca1\u8f93\u51fa --->\u2018.\u2019\n\n~~\u8981\u4e48\u8822\u5f97\u8fde\u987a\u5e8f\u90fd\u6ca1\u8f93\u51fa\u6765~~\n\n\n\u597d\u4e86\uff0c\u8bf4\u9898\u89e3\u3002\u6211\u7684\u601d\u8def\u662f\u5148\u7528Floyed\u4f20\u9012\u95ed\u5305\uff0c\u6211\u7528map[i][j] = -1 \u8868\u793a i<j \u75281 \u8868\u793a > ,\u82e5\u6ca1\u6709\u5173\u7cfb\u53730\u3002\u7136\u540e\u5224\u65ad\u4e8e\u67d0\u4e00\u4e2a\u5143\u7d20 i \u548c\u5176\u4ed6\u5143\u7d20\u7684\u5173\u7cfb\u662f\u5426\u90fd\u786e\u5b9a\uff0c\u5982\u679c\u90fd\u786e\u5b9a\uff0c\u5219 i \u7684\u6392\u5728\u7b2c\u51e0\u4f4d\u662f\u786e\u5b9a\u4e86\u7684\u3002\u90a3\u4e48\u4ed6\u6392\u5728\u7b2c\u51e0\u4f4d\u5462\uff1f\u5982\u679c\u4ed6\u548c\u5176\u4ed6\u5143\u7d20\u5173\u7cfb\u6709\u591a\u5c11\u4e2a\u662f-1\u5c31\u8bf4\u660ei\u6bd4\u5176\u4ed6\u5143\u7d20\u90fd\u5c0f\uff0c\u6392\u540d\u5c31\u662f \uff08\u4e2a\u6570+1\uff09\u3002\n\n\n\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u5751\u7684\u662f\u6570\u636e\u91cc\u7b2c\u4e00\u4e2a\u70b9 \u6709\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u624d\u8f93\u51faInconsistency found = =\u3002\n\n\nAC\u4ee3\u7801\uff0c\u849f\u84bb\u5199\u7684\u6709\u4e9b\u81c3\u80bf = =\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint n,m;\nint map[128][128];\nvoid Floyed(){\n    for(int k=1;k<=26;k++)\n        for(int i=1;i<=26;i++)\n            for(int j=1;j<=26;j++)\n                if(map[i][k]==1 && map[k][j]==1)\n                        map[i][j]=1,map[j][i]=-1;\n                    else if(map[i][k]==-1 && map[k][j]==-1)\n                        map[i][j]=-1,map[j][i]=1;\n}\nchar ANS[30];\nint ans = 0;\nbool check(){\n    ans=0;\n    int s ,fu;\n    for(int i=1;i<=26;i++){\n        s =0,fu=0;\n        for(int j=1;j<=26;j++){\n            if(i!=j&&(map[i][j]==1||map[j][i]==1||map[i][j]==-1||map[j][i]==-1)){\n                s++;\n                if(map[i][j]==-1)\n                    fu++;    \n            }    \n        }\n        if(s==n-1){\n            ans++;\n            ANS[fu+1]=i+'A'-1;\n        }\n    }\n    return ans==n? 1 : 0 ;\n}\nint main(){\n    char input[3],rel[5];\n        scanf(\"%d%d\",&n,&m);\n        for(int i=1;i<=m;i++){\n            scanf(\"%s\",rel);\n            int a = rel[0]-'A'+1;\n            int b = rel[2]-'A'+1;\n            \n            if(rel[0]==rel[2]){\n                printf(\"Inconsistency found after %d relations.\\n\",i);\n                return 0 ; \n            }\n            if(rel[1]=='>'){\n                if(map[a][b]==-1||map[b][a]==1){\n                    printf(\"Inconsistency found after %d relations.\\n\",i);\n                    return 0 ;\n                }\n                else\n                    map[a][b]=1,map[b][a]=-1;\n            }else{\n                if(map[b][a]==-1||map[a][b]==1){\n                    printf(\"Inconsistency found after %d relations.\\n\",i);\n                    return 0;    \n                }\n                else\n                    map[b][a]=1,map[a][b]=-1;\n            }\n            Floyed();\n            if(check()){\n                printf(\"Sorted sequence determined after %d relations: \",i);\n                for(int i=n;i>=1;i--)\n                    cout<<ANS[i];\n                printf(\".\");\n                return 0;\n            }    \n        }\n        printf(\"Sorted sequence cannot be determined.\\n\");\n    return 0;\n}\n```",
        "postTime": 1509759178,
        "uid": 51180,
        "name": "Ellen7ions",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "# \u8fd9\u9898\u5728poj\u6709\u4e00\u6a21\u4e00\u6837\u7684\u9898\u76ee\u3002\n----\n## \u9898\u76ee\u94fe\u63a5\n\n- POJ\uff1a[Sorting It All Out](http://poj.org/problem?id=1094)\n- LUOGU\uff1a[\u6392\u5e8f](https://www.luogu.org/problemnew/show/P1347)\n\n----\n\u8a00\u5f52\u6b63\u4f20\uff0c\u9898\u76ee\u63cf\u8ff0\u5f88\u6e05\u695a\uff0c\u6c42\u5df2\u77e5\u5173\u7cfb\u662f\u662f\u5426\u80fd\u786e\u5b9a\u8fd9\u4e2a\u5e8f\u5217\u3002\u7531\u4e8e\u8fd9\u9053\u9898\u76ee\u9700\u8981\u6211\u4eec\u8f93\u51fa\u7b2c\u51e0\u6b21\u8f93\u5165\u540e\u5c31\u80fd\u786e\u5b9a\u5e8f\u5217\uff0c\u6240\u4ee5\u6bcf\u8f93\u5165\u4e00\u4e2a\u6570\u90fd\u8981\u8fdb\u884c**\u62d3\u6251\u6392\u5e8f**\u3002\n#### \u9898\u76ee\u6709\u5f88\u591a\u5751\u70b9\u3002\n- ABCD\u524d\u6709\u7a7a\u683c\u3002\n- \u4e0d\u7528\u7ba1\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\u4e2d\u76841.2.3.\uff0c\u8fd9\u662f\u51fa\u9898\u4eba\u8499\u4f60\u7684\u3002\n- \u4f18\u5148\u5224\u65ad\u6570\u636e\u51b2\u7a81\u3002\n- \u5373\u4f7f\u5df2\u7ecf\u5f97\u51fa\u7b54\u6848\uff0c\u4e5f\u8981\u8f93\u5165\u5b8c**\u5de8\u5751**\u3002\n\n#### \u6211\u7684\u505a\u6cd5\uff1a\n- bfs\u540c\u65f6\u8bb0\u5f55\u62d3\u6251\u987a\u5e8f\u3002\n- \u4ee5out\u53d8\u91cf\u8bb0\u5f55\u72b6\u6001\u3002\n\n### code\n```cpp\n//\u5751\u70b9\u6ce8\u91ca\u5728\u4ee3\u7801\u91cc\u9762\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\nconst int MAXN=2500;\nint n,m,cas,id;\n\nstruct edge\n{\n    int v,nx;\n}set[MAXN];\nint head[30],d[30],ok[30],write[30];\t\t//write\u6570\u7ec4\u8bb0\u5f55\u62d3\u6251\u987a\u5e8f\u3002\nqueue<int> Q;\n\nvoid Addedge(int u,int v)\n{\n    id++;set[id].v=v;set[id].nx=head[u];\n    head[u]=id;\n}\n\nint bfs()\n{\n    cas=0;\n    while(!Q.empty())Q.pop();\n    int out=1,t,u;t=0;\t\t\t//\u5df2out\u7684\u6700\u7ec8\u7ed3\u679c\u4f5c\u4e3abfs\u7684\u8fd4\u56de\u503c\u3002\n    for(int i=1;i<=n;i++)\n        if(!ok[i])\n        {\n            t++;Q.push(i);\n        }\n    if(t>1)out=0;\n    while(!Q.empty())\n    {\n        u=Q.front();Q.pop();t=0;write[++cas]=u;\n        for(int k=head[u];k>0;k=set[k].nx)\n        {\n            ok[set[k].v]--;\n            if(!ok[set[k].v])\n            {\n                t++;Q.push(set[k].v);\n            }\n        }\n        if(t>1)out=0;\n    }\n    for(int i=1;i<=n;i++)if(ok[i]>0){out=-1;break;}\n    return out;\n}\t\t\t\t\t//\u62d3\u6251\u6392\u5e8f\n\nchar print()\n{\n    for(int i=1;i<=cas;i++)printf(\"%c\",(char)(write[i]+64));\n    return '.';    \n}\t\t\t\t\t\t//\u9b54\u6027\u5904\u7406\n\nint main()\n{\n    while(~scanf(\"%d%d\",&n,&m))\t\t\t//\u6709\u591a\u7ec4\u6570\u636e\n    {\n        memset(write,0,sizeof(write));    \n        memset(d,0,sizeof(d));    \n        memset(head,-1,sizeof(head));\n        id=0;\n        int now=0,loca;\n        char a,b,c;\n        if(n==0 && m==0)break;\n        for(int i=1;i<=m;i++)\n        {\n            cin>>a>>b>>c;\n            if(b=='<')\n            {\n                Addedge(a-64,c-64);d[c-64]++;\n            }\n            else \n            {\n                Addedge(c-64,a-64);d[a-64]++;\n            }\n            if(now==0)\n            {\n                for(int j=1;j<=n;j++)ok[j]=d[j];\n                now=bfs();loca=i;\n            }\n        }\n        if(now==0)puts(\"Sorted sequence cannot be determined.\");\n        else if(now==1)printf(\"Sorted sequence determined after %d relations: \",loca),printf(\"%c\\n\",print());\n        else printf(\"Inconsistency found after %d relations.\\n\",loca);\t\t\t//\u8f93\u51fa\u7a7a\u683c\u8bf7\u6ce8\u610f\u3002\n    }\n    return 0;\n}\n```\n### \u540e\u8bb0\n\u8fd9\u9898\u5b9e\u9645\u4e0a\u6570\u636e\u592a\u6c34\u4e86\uff0c$n \\le 26$\uff0c\u82e5\u6570\u636e\u52a0\u5f3a\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u6709\u73af\uff08\u6709\u73af\u5373\u51b2\u7a81\uff09\uff0c\u4fbf\u51cf\u5c11\u4e86\u62d3\u6251\u6392\u5e8f\u7684\u6b21\u6570\u3002",
        "postTime": 1549593732,
        "uid": 141348,
        "name": "\u26a1LZSY01_XZY\u26a1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "## [\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P1347)\n\n## \u601d\u8def\n\n\u53ef\u4ee5\u5c06$A<B$\u770b\u6210$A$\u548c$B$\u4e4b\u95f4\u6709\u4e00\u6761\u6743\u503c\u4e3a1\u6709\u5411\u8fb9\uff0c\u90a3\u4e48$A-B$\u7684\u503c\u5c31\u8868\u793a\u4e3a\u6392\u5b8c\u5e8f\u540e\uff0c$A$\u5728$B$\u524d\u9762\u51e0\u4f4d\u3002\n\n\u7136\u540e\u5206\u60c5\u51b5\uff0c\u5224\u65ad\u7ed3\u679c\u4e3a\u7b2c1,2,3\u79cd\u4e2d\u7684\u54ea\u4e00\u79cd\u3002\n\n**\u5224\u65ad\u7ed3\u679c\u4e3a\u7b2c1\u79cd\u7684\u65b9\u6cd5**\n\n\u5982\u679c\u6709\u6070\u597d\u6709$(n-1)*n/2$\u6761\u8fb9\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u7ed3\u679c\u80af\u5b9a\u4e3a\u7b2c1\u79cd\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u56e0\u4e3a\u5f53\u80fd\u5c06\u8fd9\u4e9b\u53d8\u91cf\u6392\u5e8f\u65f6\uff0c\u90bb\u63a5\u77e9\u9635\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u8fd9\u4e2a\u4e9a\u5b50\u7684\uff1a\n```cpp\n   x1 x2 x3 x4 x5 ... xn\nx1  0  1  2  3  4 ... n-1\nx2 -1  0  1  2  3 ... n-2\nx3 -1 -1  0  1  2 ... n-3\nx4 -1 -1 -1  0  1 ... n-4\nx5 -1 -1 -1 -1  0 ... n-5\n...\nxn -1 -1 -1 -1 -1 ... 0\n\n\"-1\"\u8868\u793aA-B\u4e4b\u95f4\u6ca1\u6709\u8fb9\uff0cxi\u8868\u793a\u6392\u5728\u7b2ci\u4f4d\u7684\u53d8\u91cf\n```\n\n\u6240\u4ee5\u6ca1\u88ab\u66f4\u65b0\u7684\u8fb9\u7684\u6570\u91cf\u4e00\u5b9a\u4e3a$(n-1)*n/2$\u3002\n\n**\u5224\u65ad\u7ed3\u679c\u4e3a\u7b2c2\u79cd\u7684\u65b9\u6cd5**\n\n\u5982\u679c\u627e\u5230\u4e24\u4e2a\u53d8\u91cf$A,B$\uff0c$A$\u5728$B$\u524d\u9762\uff0c$B$\u4e5f\u5728$A$\u524d\u9762\uff0c\u90a3\u4e48\u8fd9\u80af\u5b9a\u77db\u76fe\u4e86\uff0c\u6240\u4ee5\u7ed3\u679c\u80af\u5b9a\u4e3a\u7b2c2\u79cd\u3002\n\n**\u5224\u65ad\u7ed3\u679c\u4e3a\u7b2c3\u79cd\u7684\u65b9\u6cd5**\n\n\u5982\u679c\u7ed3\u679c\u4e0d\u4e3a\u7b2c1,2\u79cd\uff0c\u90a3\u4e48\u7ed3\u679c\u80af\u5b9a\u4e3a\u7b2c3\u79cd\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint Map[30][30];\nint ans[30];\nint n,m,flag;\n//flag=1\u8868\u793a\u7ed3\u679c\u4e3a\u7b2c1\u79cd\uff0cflag=-1\u8868\u793a\u7ed3\u679c\u4e3a\u7b2c2\u79cd\uff0cflag=0\u8868\u793a\u7ed3\u679c\u4e3a\u7b2c3\u79cd\n\ninline void get(int &u,int &v)//\u5f97\u5230\u8fb9\u7684\u4fe1\u606f\n{\n    char ch=getchar();\n    while(ch>'Z'||ch<'A')\n        ch=getchar();\n    u=ch-'A',ch=getchar();\n    while(ch>'Z'||ch<'A')\n        ch=getchar();\n    v=ch-'A';\n}\n\ninline void floyd(int u,int v)//\u5c06\u56fe\u66f4\u65b0\n{\n    for(register int i=0;i<n;i++)\n        for(register int j=0;j<n;j++)\n            if(Map[i][j]<Map[i][u]+1/* 1\u8868\u793au,v\u4e4b\u95f4\u6709\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u5355\u5411\u8fb9 */+Map[v][j])\n                Map[i][j]=Map[i][u]+1+Map[v][j]; \n                //\u5982\u679cMap[i][j]<Map[i][u]+1+Map[v][j]\uff0c\u8bf4\u660ei-j\u4e4b\u95f4\u8fd8\u6709u\u548cv\uff0c\u4e8e\u662f\u66f4\u65b0Map[i][j]\u7684\u503c\n    //\u8fd9\u91cc\u4e0d\u7528\u5355\u72ec\u66f4\u65b0u-v\uff0c\u5f53i==u\uff0cj==v\u65f6\u5c31\u5df2\u7ecf\u66f4\u65b0\u4e86\n}\n\ninline void check(int now)//\u5224\u65ad\u7ed3\u679c\u4e3a\u7b2c1,2,3\u79cd\u4e2d\u7684\u54ea\u4e00\u79cd\n{\n    if(flag) return;\n    //\u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a\u7b2c2\u79cd\n    for(int i=0;i<n;i++)\n        for(int j=0;j<n;j++)\n            if(Map[i][j]>0&&Map[j][i]>0) flag=-1;\n            //\u5982\u679cj\u5728i\u524d\u9762\u4e14i\u5728j\u524d\u9762\uff0c\u90a3\u4e48\u7ed3\u679c\u4e3a\u7b2c\u4e8c\u79cd\n    if(flag==-1){ans[0]=now;return;}\n    //\u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a\u7b2c1\u79cd\n    if(now<n-1) return;//\u5982\u679c\u64cd\u4f5c\u5e8f\u5217\u6b21\u6570<n-1\u80af\u5b9a\u7ed3\u679c\u4e0d\u4e3a\u7b2c1\u79cd\n    int tot=0,p,tf;\n    //tot\u4e3a\u6709\u591a\u5c11\u6761\u8fb9\u8fd8\u6ca1\u88ab\u66f4\u65b0\uff0cp\u4e3a\u5728\u6700\u524d\u9762\u7684\u53d8\u91cf\uff0ctf\u4e3a\u5f53\u524d\u53d8\u91cf\u662f\u5426\u5728\u6700\u524d\u9762\n    for(int i=0;i<n;i++){\n        tf=1;\n    \tfor(int j=0;j<n;j++)\n    \t    if(Map[i][j]<0) tot++,tf=0;\n    \t    //\u5982\u679c\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u80fd\u5230\u8fbe\u5176\u4ed6\u6240\u6709\u53d8\u91cf\uff0c\u90a3\u4e48\u4ed6\u5c31\u4e0d\u5728\u6700\u524d\u9762\n    \tif(tf) p=i;\n    }\n    if(tot!=(n-1)*n/2) return;\n    flag=1,ans[0]=now;\n    //\u66f4\u65b0ans\u6570\u7ec4\n    for(int i=0;i<n;i++)\n        ans[Map[p][i]+1]=i;\n}\n\ninline void print()//\u8f93\u51fa\u51fd\u6570\n{\n    if(flag){\n        if(flag==1){\n            printf(\"Sorted sequence determined after %d relations: \",ans[0]);\n            for(int i=1;i<=n;i++) printf(\"%c\",ans[i]+'A'); puts(\".\");\n        }\n        else printf(\"Inconsistency found after %d relations.\\n\",ans[0]);\n    }\n    else puts(\"Sorted sequence cannot be determined.\");\n}\n\nint main()\n{\n    while(cin>>n>>m){\n    \t//\u521d\u59cb\u5316\n        memset(Map,-10,sizeof Map);\n        for(int i=0;i<n;i++) Map[i][i]=0;\n        flag=0; \n        //\u8f93\u5165\n        int u,v;\n        for(int i=1;i<=m;i++){\n            get(u,v);\n            floyd(u,v);\n            if(flag) continue;\n            check(i);\n        }\n        //\u8f93\u51fa\n        print();\n    }\n    return 0;\n}\n/*\nSorted sequence determined after () relations: ().\nInconsistency found after () relations.\nSorted sequence cannot be determined.\n*/\n```",
        "postTime": 1574605653,
        "uid": 177445,
        "name": "loafer\u3001",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\uff0c\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u4e0d\u9700\u8981\u62d3\u6251\uff0c\u76f4\u63a5dfs\u5bfb\u627e\u80fd\u5426\u5728\u65e0\u73af\u7684\u524d\u63d0\u4e0b\u4ece\u5355\u4e2a\u70b9\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u6240\u6709\u7684\u70b9\u5c31\u53ef\u4ee5\u4e86  \n\u53ea\u4e0a\u6838\u5fc3\u4ee3\u7801  \nlink\u90bb\u63a5\u77e9\u9635  \nvis\u8868\u793a\u5f53\u524ddfs\u641c\u7d22\u7684\u8def,  \n\u8fd4\u56de\u503c0\u662f\u4f18\u5148\u5224\u65ad\u77db\u76fe,  \n\u800c1\u5219\u5305\u62ec\u4e24\u79cd\u60c5\u51b51.\u5bfb\u627e\u5230\u6709\u6548\u8def;2.\u4e0d\u80fd\u5224\u65ad\u5173\u7cfb;  \n\u90a3\u4e48\u5728\u6ca1\u6709\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u56de\u6eaf\u4e4b\u524d\u90fd\u8981\u5148\u628avis[u]\u6539\u4e3a0\uff0c\u800ccnt\u8bb0\u5f55\u7684\u7ecf\u8fc7\u7684\u70b9\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\u56de\u6eaf\u524d\u8981\u53bb\u6389\u5f53\u524d\u70b9\uff08cnt--\uff09  \n\u4e00\u65e6cnt==n\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u5927\u529f\u544a\u6210\u4e86\uff0c\u4fdd\u6301cnt\u7684\u503c\u56de\u6eaf\uff0c\u5728\u5168\u56fe\u65e0\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u8df3\u51fadfs\u5e76\u8f93\u51fa\u7ed3\u679c\n\uff08\u5176\u5b9e\u540e\u9762\u90fd\u662f\u8bc1\u660e\uff0c\u5199\u7b97\u6cd5\u7684\u65f6\u5019\u6ca1\u8003\u8651\u8fd9\u4e9bXD\uff09\n```cpp\nint dfs(int u){\n    cnt++;\n    vis[u]=1;\n    for(int i=1;i<=n;i++){\n        if(link[u][i]){\n            if(vis[i]||(!dfs(i))) return 0;//0 \u627e\u5230\u73af\n        }\n    }\n    vis[u]=0;\n    if(cnt==n) {\n    \tans[++t]=u;//\u8bb0\u5f55\u5b57\u6bcd\u987a\u5e8f\n        return 1;\n    }//1 \u627e\u5230\u6240\u6709\u70b9 \u4e5f\u5c31\u610f\u5473\u7740\u6b64\u65f6\u6240\u6709\u70b9\u90fd\u5728\u8def\u91cc\u9762\n    cnt--;\n    return 1;\n}\n```",
        "postTime": 1531790701,
        "uid": 42139,
        "name": "xeonz1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u9898\u76ee\u63cf\u8ff0\uff1a\n   [\u6392\u5e8f](https://www.luogu.org/problemnew/show/P1347)\n   \n\u5f88\u660e\u663e\u8fd9\u9053\u9898\u662f **\u62d3\u6251\u6392\u5e8f**\n\n\u62d3\u6251\u6392\u5e8f\u7684\u6c42\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u8fd9\u91cc\u6211\u7528 **dfs** \u6765\u6c42\u62d3\u6251\u5e8f\u3002\n\n### BUT\n\n\u8fd9\u9053\u9898\u5b58\u5728\u51e0\u4e2a\u96be\u70b9\uff1a\n  \n 1. \u6839\u636e\u524di\u4e2a\u7684\u5173\u7cfb\u5373\u53ef\u6765\u5224\u65ad\uff0c\u4e5f\u5c31\u662f\u5047\u8bbe\u6709\u8f93\u5165\u4e3a\n     \n        3 3\n        A<B\n        B<C\n        C<A\n    \u6211\u4eec\u8f93\u51fa\u7684\u7ed3\u679c\u4e3a\u6709\u62d3\u6251\u5e8f\uff0c\u800c\u4e0d\u662f\u6709\u77db\u76fe\u3002\n    \n    \u56e0\u4e3a\u6211\u4eec\u6839\u636e\u524d\u4e24\u4e2a\u5173\u7cfb\u5373\u53ef\u5f97\u51fa\u62d3\u6251\u5e8f\uff0c\u8fd9\u65f6\u4fbf\u53ef\u4ee5\u9000\u51fa\u4e86\u3002\n    \n    \u56e0\u6b64\u6211\u4eec\u4fbf\u91c7\u7528\u8fb9\u8bfb\u5165\u8fb9\u67e5\u8be2\u7684\u529e\u6cd5\uff0c\u627e\u5230\u5373\u9000\u51fa\uff0c\u6709\u73af\u5373\u9000\u51fa\u3002\n    \n 2. \u975e\u5e38\u89c4\u6c42\u62d3\u6251\u5e8f\n        \n    \u7531\u7b2c\u4e09\u4e2a\u6570\u636e\u53ef\u77e5\uff0c\u5982\u679c\u7ed9\u5b9a\u7684\u5173\u7cfb\u4e0d\u8db3\uff0c\u5c31\u65e0\u6cd5\u6c42\u51fa\u62d3\u6251\u5e8f\u3002\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u529e\u5462\uff1f\n    \n    \u5728BFS\u4e2d\uff0c\u62d3\u6251\u6392\u5e8f\u901a\u5e38\u8981\u4ece[\u5165\u5ea6](https://baike.baidu.com/item/%E5%85%A5%E5%BA%A6/6172141?fr=aladdin)\u4e3a0\u7684\u70b9\u5f00\u59cb\u5220\u9664\u8fb9\u3002\u4f46DFS\u4e0d\u4e00\u6837\uff0cDFS\u662f\u4e00\u641c\u641c\u5230\u5e95\u7684\uff0c\u4e0d\u5230\u505c\u6b62\u4e0d\u7f62\u4f11\u3002\u6216\u8bb8\u6211\u4eec\u4e0d\u597d\u627e\u90a3\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u4f46\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u9053\u9898~~\u7531\u4e8e\u6570\u636e\u8f83\u6c34~~\u652f\u6301\u76f4\u63a5\u5faa\u73af\u3002\n    \n    \u90a3\u4e48DFS\u9012\u5f52\u5230\u6700\u540e\u7684\u60c5\u51b5\u662f\uff1a\n \n    \u627e\u5230\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u6216\u8005\u8bf4\u662f\u8fd9\u4e2a\u70b9\u4e0d\u6307\u5411\u5176\u4ed6\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u4fbf\u5c06\u6b64\u70b9\u52a0\u5165\u6570\u7ec4; \u6216\u662f\u53d1\u73b0\u5b58\u5728\u6709\u5411\u73af\uff0c\u5219\u9000\u51fa\u9012\u5f52\u7a0b\u5e8f\u3002\n    \n    \u9644\u4e0a\u4ee3\u7801\uff1a\n    ```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint f[27],topu[27];\nint dis[27][27];\nint n,m,t,num;\nbool dfs(int u){  //dfs\u6c42\u62d3\u6251\u5e8f\n    f[u]=-1;  //\u8bbf\u95ee\u6807\u5fd7\n    for(int v=1;v<=n;v++)\n    if(dis[u][v]){\n        if(f[v]<0) return 0; //\u5982\u679c\u5b58\u5728\u6709\u5411\u73af\uff0c\u5219\u9000\u51fa\u3002\n        else if(!f[v]&&!dfs(v)) \n        return 0; //\u5982\u679c\u5224\u65ad\u51fa\u6709\u73af\u6216\u4ece\u672a\u52a0\u5165\uff0c\u8fd4\u56de0\uff1b\n    }\n    f[u]=1;\n    topu[--t]=u;\n    return 1;\n}\nint main(){\n    int u,v;\n    char ch[3];\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        memset(f,0,sizeof(f));\n        scanf(\"%s\",ch);\n        u=ch[0]-64; v=ch[2]-64;  //\u8f6c\u4e3a\u6570\u5b57\n        if(!dis[u][v]) dis[u][v]=i;\n        for(int j=1;j<=n;j++){ //\u4e00\u4e2a\u5faa\u73af\uff0c\u5f00\u59cb\u5224\u65ad\n            t=n;\n            num=dfs(j);\n            if(!num) {  //\u6709\u73af\n                printf(\"Inconsistency found after %d relations.\\n\",i); \n                return 0;\n            }\n            if(num&&t==0){  //\u65e0\u73af\u4e14\u627e\u5230\u5168\u90e8\u7684\u62d3\u6251\u5e8f\n                printf(\"Sorted sequence determined after %d relations: \",i);\n         \t\tfor(int j=0;j<n;j++)\n        \t\tprintf(\"%c\",topu[j]+64);\n        \t\tprintf(\".\\n\");\n        \t\treturn 0;\n            }\n        }\n    }\n    printf(\"Sorted sequence cannot be determined.\\n\");  \n    //\u524d\u4e24\u79cd\u60c5\u51b5\u5747\u6ca1\u53d1\u73b0\u3002\n    return 0;\n}\n```\n                                     \n   \u8fd9\u91cc\u89e3\u91ca\u4e00\u4e0bf\u6570\u7ec4\uff1a\n   \n        \u5f53\u4e3a0\u65f6\uff0c\u8868\u793a\u4ece\u672a\u52a0\u5165\u641c\u7d22\uff1b \n        \u5f53\u4e3a-1\u65f6\uff0c\u8868\u793a\u8bbf\u95ee\u641c\u7d22\uff1b\n        \u5f53\u4e3a1\u65f6\uff0c\u8868\u793a\u52a0\u5165\u62d3\u6251\u5e8f\u3002\n    \n    ",
        "postTime": 1530444311,
        "uid": 59951,
        "name": "throusea",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u4e00\u770b\u57fa\u672c\u4e0a\u90fd\u77e5\u9053\u662f\u62d3\u6251\u6392\u5e8f\n\u4f46\u662f\u5343\u4e07\u522b\u5168\u90e8\u8f93\u5165\u540e\u5728\u62d3\u6251\u6392\u5e8f\n\u6bcf\u8f93\u5165\u4e00\u6761\u8fb9\u5c31\u8fdb\u884c\u4e00\u6b21dfs\u62d3\u6251\u6392\u5e8f\n\u5982\u679c\u5168\u90e8\u70b9\u8fdb\u5165\u5e8f\u5217\u5219\u8f93\u51fa\n\u82e5\u6709\u73af\uff0c\u5219\u6709\u77db\u76fe\n\u5982\u679c\u4e0d\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\uff0c\u8f93\u51fa\u65e0\u6cd5\u5224\u65ad\u5373\u53ef\n\n\n------------\n\n\n------------\n~~\uff08\u88ab\u5751\u4e86\u597d\u4e45\u7684\u5b57\u7b26\u4e32\uff0c\u672c\u4eba\u5b57\u7b26\u4e32\u4e0d\u597d\uff09~~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<vector>\n#include<stack> \n#include<queue>\n#define M 1010000\nusing namespace std;\nqueue <int> q;\nint n,m;\nstruct edge{\n    int next;\n    int to;\n}e[M];\nint cnt,head[M],tp[M],po,c[M],wrong;\nvoid add(int f,int t)\n{\n    e[++cnt].next=head[f];\n    e[cnt].to=t;\n    head[f]=cnt;\n}\nint dfs(int x)\n{\n    int flag=0;\n    c[x]=true;\n    for (int ii=head[x];ii!=0;ii=e[ii].next)\n    {\n        if (c[e[ii].to])\n        {\n            return 1;\n        }\n        flag=max(flag,dfs(e[ii].to));\n    }\n    c[x]=false;\n    for (int pp=1;pp<=po;pp++)\n    {\n        if (tp[pp]==x)\n        {\n            return flag;\n        }\n    }\n    tp[++po]=x;\n    return flag;\n}\nint main()\n{\n    int ch=0;\n    scanf(\"%d %d\",&n,&m);\n    for (int i=1;i<=m;i++)\n    {\n        char u,v;\n        scanf(\"\\n\");\n        scanf(\"%c<%c\",&u,&v);\n        add(int(u-'A'+1),int(v-'A'+1));\n        po=0;\n        memset(c,0,sizeof(c));\n        memset(tp,0,sizeof(tp));\n        ch=0;\n        int num=0;\n        for (int p=1;p<=n;p++)\n        {\n\t\t\tif (!c[p])\n\t\t\t{\n\t\t\t\tch=max(dfs(p),ch);\n\t\t\t\tnum++;\n\t\t\t}\n\t\t\tif (ch==1)\n       \t \t{\n        \t\twrong=i;\n         \t   \tbreak;\n    \t    } \n\t\t\tif (po==n&&num==1)\n      \t  \t{\n        \t    printf(\"Sorted sequence determined after %d relations: \",i);\n         \t   \tfor (int j=n;j>=1;j--)\n         \t   \t{\n        \t    \tprintf(\"%c\",char(tp[j]+64));\n        \t    }\n       \t    \tprintf(\".\\n\");\n        \t    ch=-1;\n        \t    break;\n      \t \t}\n      \t \tpo=0;\n\t\t}\n        if (ch==1)\n        {\n            wrong=i;\n            break;\n        } \n        if (ch==-1)\n        {\n        \tbreak;\n\t\t}\n    }\n    if (ch==1)\n    {\n        printf(\"Inconsistency found after %d relations.\",wrong);\n    }\n    if (ch!=-1&&ch!=1)\n    {\n        printf(\"Sorted sequence cannot be determined.\");\n    }\n    return 0;\n}\n\n\n\n```\n",
        "postTime": 1561534451,
        "uid": 78290,
        "name": "Polaris_Dane",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u6211\u60f3\u8bf4\u8fd9\u9898\u96be\u9053\u4e0d\u662f\u4e8c\u5206\u7b54\u6848\u4e48\u3002\u3002\u3002\n\n\u7528floyd\u4f20\u9012\u95ed\u5305\u5224\u65ad\uff0c\u7136\u540e\u4e8c\u5206\u662f\u524d\u51e0\u7ec4\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u5217\u51fa\u8fd9\u9898\u7684\u51e0\u4e2a\u5751\u70b9\uff1a\n\n1.\u5982\u679c\u4f60\u7b2c\u4e5d\u4e2a\u70b9WA\u4e86\u8bf7\u6ce8\u610f\uff0crelations\uff1a\u540e\u9762\u6709\u7a7a\u683c\u3002\n\n2.\u5982\u679c\u4f60\u7684\u7b2c\u4e00\u4e2a\u70b9WA\u4e86\u8bf7\u6ce8\u610f\uff0c\u6ce8\u610f\u81ea\u5df1\u4e0d\u80fd\u5c0f\u4e8e\u81ea\u5df1\n\n3.\u5982\u679c\u4f60\u5168WA\u4e86\u8bf7\u6ce8\u610f\uff0c\u8fd9\u9898\u6570\u636e\u4e0d\u662f\u6837\u4f8b\u90a3\u6837\u7684\u6709\u591a\u7ec4\u6570\u636e\uff0c\u53ea\u6709\u4e00\u7ec4\u7684\uff0c\u5f00\u59cb\u6211\u8fd8\u6309\u7167\u6837\u4f8b\u90a3\u6837\u8bfb\u5c31\u5168\u6316\u4e86\u3002\n\n\u7136\u540e\u8bf4\u4e00\u4e0b\u5177\u4f53\u7684\u601d\u8def\u5427\uff1a\n\n\u5728\u8fd9\u4e2a\u77e9\u9635\u4e2d\uff0ci->j\u8fde\u8fb9\u5c31\u4ee3\u8868i<j,\u6240\u4ee5\u6211\u4eec\u6839\u636e\u7ed9\u51fa\u7684\u5173\u7cfb\u8fdb\u884c\u8fde\u8fb9\uff0c\u6ce8\u610f\u5230\u4e0d\u7b49\u5f0f\u5177\u6709\u4f20\u9012\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636efloyd\u4f20\u9012\u95ed\u5305\u6765\u4f20\u9012\u4ed6\u4eec\u4e4b\u95f4\u7684\u4e0d\u7b49\u5173\u7cfb\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u4f20\u9012\u95ed\u5305\u7ed3\u675f\u540e\u51fa\u73b0\u7684\u4e09\u79cd\u60c5\u51b5\u5bf9\u5e94\u4e86\u4e09\u79cd\u7ed3\u679c\u3002\n\n1.\u82e5\u5b58\u5728i->j &&j->i \u5219\u4e3a\u77db\u76fe\u3002  \uff08->\u8868\u793a\u8fde\u8fb9\uff09\n\n2.\u82e5\u5b58\u5728i\u4e0ej\u4e14j\u4e0ei\u6ca1\u6709\u8fb9\u76f8\u8fde\uff0c\u90a3\u4e48\u65e0\u6cd5\u786e\u5b9a\u987a\u5e8f\u3002\n\n3.\u82e5\u5bf9\u4e8ei->j\u548cj->i\u6709\u4e14\u4ec5\u67091\u4e2a\u6210\u7acb\uff0c\u90a3\u4e48\u53ef\u4ee5\u786e\u5b9a\u987a\u5e8f\u3002\n\n\u660e\u786e\u4e86\u4f20\u9012\u95ed\u5305\u7684\u4f5c\u7528\u540e\u6211\u4eec\u5f00\u59cb\u8ba8\u8bba\u4e8c\u5206\u7684\u8fb9\u754c\uff1a\n\n\u5982\u679c\u4f20\u9012\u95ed\u5305\u540e\u53d1\u73b0\u4e0d\u80fd\u786e\u5b9a\u987a\u5e8f\uff0c\u90a3\u4e48\u4e00\u5b9a\u9700\u8981\u66f4\u591a\u7684\u5173\u7cfb\u6765\u786e\u5b9a\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9lb=mid\n\n\u5982\u679c\u53d1\u73b0\u786e\u5b9a\u4e86\u987a\u5e8f\u6216\u8005\u51fa\u73b0\u77db\u76fe\uff0c\u5219\u4e00\u5b9a\u5b58\u5728\u4e0d\u5927\u4e8e\u5f53\u524d\u5173\u7cfb\u6570\u7684\u5173\u7cfb \u53ef\u4ee5\u786e\u5b9a\u987a\u5e8f\u6216\u8005\u77db\u76fe\uff0c\u6211\u4eec\u8ba9ub=mid\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u662f\u5de6\u5f00\u53f3\u95ed\u7684\u533a\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u521d\u59cb\u5316ub=m\uff0clb=0,\u6765\u786e\u4fdd\u5168\u90e8\u7684\u60c5\u51b5\u90fd\u88ab\u6db5\u76d6\u3002\n\n\u6700\u540e\u51fa\u73b0\u7684\u534a\u5f00\u534a\u95ed\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684\u7b54\u6848\uff0c\u8fd9\u65f6\u518d\u6b21check\u4e00\u6b21\u786e\u5b9a\u662f\u51fa\u73b0\u4e86\u77db\u76fe\u8fd8\u662f\u786e\u5b9a\u4e86\u987a\u5e8f\u3002\n\n\u4e0a\u8ff0\u601d\u8def\u7684\u6838\u5fc3\u5728\u4e8e\u9898\u4e2d\u8bf4\uff08\u63d0\u793a\uff1a\u786e\u5b9an\u4e2a\u5143\u7d20\u7684\u987a\u5e8f\u540e\u5373\u53ef\u7ed3\u675f\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u786e\u5b9a\u987a\u5e8f\u4e4b\u540e\u51fa\u73b0\u77db\u76fe\u7684\u60c5\u51b5\uff09\n\n\u786e\u4fdd\u4e86\u5355\u8c03\u6027\uff0c\u624d\u53ef\u4ee5\u4e8c\u5206\u3002\n\n\u603b\u7684\u590d\u6742\u5ea6\u662fn^3logm\n\n\u8bf4\u4e86\u8fd9\u4e48\u591a\u3002\u4e0a\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\nusing namespace std;\n\nconst int maxn=30;\nbool matrix1[maxn][maxn];\nint n,m;\nstruct rela\n{\n\tint x,y;\n}a[maxn*maxn];\n\nint floyd(int t)\n{\n\tmemset(matrix1,0,sizeof(matrix1));\n\tfor(int i=1;i<=t;i++)matrix1[a[i].x][a[i].y]=true;\n\tfor(int k=1;k<=n;k++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<=n;j++)\n\t\t\t\tmatrix1[i][j]|=(matrix1[i][k]&matrix1[k][j]);//\u4f20\u9012\u95ed\u5305 \n\tbool tag=false;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t{\n\t\t\tif(matrix1[i][j]&&matrix1[j][i])return 2;\t\t//2\u8868\u793a\u51fa\u73b0\u4e86\u77db\u76fe \n\t\t\tif(!(matrix1[i][j]||matrix1[j][i]))tag=true;\t//\u51fa\u73b0\u4e86\u987a\u5e8f\u4e0d\u786e\u5b9a\u7684\u60c5\u51b5 \n\t\t}\n\tfor(int i=1;i<=n;i++)if(matrix1[i][i])return 2;//\u81ea\u5df1\u5c0f\u4e8e\u81ea\u5df1\u4e5f\u662f\u77db\u76fe \n\tif(!tag)return 1;//\u5982\u679c\u6240\u6709\u987a\u5e8f\u7686\u786e\u5b9a\uff0c\u5219\u786e\u5b9a\u987a\u5e8f \n\treturn 3;//\u5426\u5219\u5c31\u662f\u4e0d\u786e\u5b9a \n}\nvoid getrank()\t//\u627e\u5e8f\u5217 \n{\n\tint seq[maxn];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint sum=0;\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tif(i!=j)\n\t\t\t\tif(matrix1[i][j])sum++;//sum\u8bb0\u5f55\u5927\u4e8ei\u7684\u6570\u7684\u4e2a\u6570 \n\t\tseq[n-sum]=i;//\u653e\u5230\u5e8f\u5217\u4e2d \n\t}\n\tfor(int i=1;i<=n;i++)cout<<char(seq[i]+'A'-1);\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tchar s[20];\n\t\tcin>>s;\n\t\ta[i].x=s[0]-'A'+1;\n\t\ta[i].y=s[2]-'A'+1;\n\t}\n\tif(floyd(m)==3)\n\t{\n\t\tcout<<\"Sorted sequence cannot be determined.\"<<endl;//\u4e00\u5f00\u59cb\u5c31\u8981\u5148\u5224\u65ad\u4e00\u4e0b \n\t\treturn 0;\n\t}\n\tint ub=m,lb=0;//\u6ce8\u610f\u8fb9\u754c \n\twhile(ub-lb>1)\n\t{\n\t\tint mid=(lb+ub)>>1;\n\t\tint temp=floyd(mid);\n\t\tif(temp==3)lb=mid;\n\t\telse ub=mid;\n\t}\n\tint temp=floyd(ub);\n\tif(temp==1)\n\t{\n\t\tcout<<\"Sorted sequence determined after \"<<ub<<\" relations: \";//\u6ce8\u610f\u7a7a\u683c \n\t\tgetrank();\n\t\tcout<<\".\";\n\t}\n\telse cout<<\"Inconsistency found after \"<<ub<<\" relations.\"<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1537320929,
        "uid": 54825,
        "name": "ysj1173886760",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u672c\u9898\u662f\u62d3\u6251\u6392\u5e8f\u7684\u4e00\u4e2a\u53d8\u5f62\uff0c\u5bf9\u4e8e\u62d3\u6251\u6392\u5e8f\u719f\u7684\u4eba\u5e94\u8be5\u77e5\u9053\uff0c\u5173\u952e\u662f\u8981\u5224\u65ad\u6709\u6ca1\u6709\u73af\u548c\u987a\u5e8f\u662f\u5426\u53ef\u4ee5\u5b9a\u4e0b\u6765\n\n\u8fd8\u6709\u4e00\u70b9\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u8981\u7279\u522b\u6ce8\u610f\u683c\u5f0f\uff0c\u4e0d\u8981\u76f4\u63a5copy\u9898\u76ee\uff0c\u8981\u52a0\u4e00\u4e9b\u6539\u52a8\uff0c\u6ce8\u610f\u53e5\u53f7\uff0c\u672c\u4eba\u5c31\u662f\u56e0\u4e3a\u6ca1\u6709\u6ce8\u610f\u53e5\u53f7wa\u4e86\u7b2c\u4e5d\u4e2a\u70b9\uff0c\u6539\u5b8c\u4ee5\u540e\u5c31ac\u4e86\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n    #include<iostream>\n    #include<cstdio>\n    #include<queue>\n    #include<string.h>\n    using namespace std;\n    int n,m,h[27],indegree[27],gs,check,pd,Ans;\n    string in,ans;\n    struct EDGE\n    {\n        int next,target;\n    }edge[1001];\n    void Topsort()\n    {\n        pd=0;\n        gs=0;\n        queue<int>q;\n        for(int i=1;i<=n;i++)\n          if(indegree[i]==0)\n          {\n                gs++;\n                if(gs>=2) pd=1; //\u5982\u679c\u540c\u4e00\u65f6\u95f4\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u5165\u5ea6\u4e3a0\uff08\u5b83\u4eec\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6446\u653e\uff09\u7684\u5b57\u6bcd\uff0c\u8bf4\u660e\u65e0\u6cd5\u786e\u5b9a\u987a\u5e8f \n                q.push(i);\n          }\n        while(!q.empty()) //\u62d3\u6251\u4e3b\u4f53 \n        {\n            gs=0;\n            int u=q.front();\n            q.pop();\n            ans+=char(u+'A'-1);\n            for(int i=h[u];i!=-1;i=edge[i].next)\n            {\n                indegree[edge[i].target]--;\n                Ans=max(Ans,i); \n                if(!indegree[edge[i].target])\n                {\n                    q.push(edge[i].target);\n                    gs++;\n                    if(gs>=2) pd=1;\n                }\n            }\n        }\n        if(pd) cout<<\"Sorted sequence cannot be determined.\";\n        else cout<<\"Sorted sequence determined after \"<<Ans<<\" relations: \"<<ans<<\".\";\n        return ;\n    }\n    bool Check()\n    {\n        int Indegree[27];\n        for(int i=1;i<=n;i++)\n          Indegree[i]=indegree[i];  \n        queue<int>q;\n        for(int i=1;i<=n;i++)\n          if(Indegree[i]==0) q.push(i);\n        while(!q.empty())\n        {\n            gs=0;\n            int u=q.front();\n            q.pop();\n            for(int i=h[u];i!=-1;i=edge[i].next)\n            {\n                Indegree[edge[i].target]--;\n                if(!Indegree[edge[i].target]) q.push(edge[i].target);\n            }\n        }\n        for(int i=1;i<=n;i++) \n          if(Indegree[i]) return true; //\u5982\u679c\u8fd8\u6709\u5269\u4f59\u7684\u70b9\uff08\u5165\u5ea6\u65e0\u6cd5\u51cf\u4e3a0\uff09\uff0c\u5c31\u8bf4\u660e\u6709\u73af \n        return false;\n    }\n    int main()\n    {\n        memset(h,-1,sizeof(h));\n        cin>>n>>m;\n        for(int i=1;i<=m;i++)\n        {\n            cin>>in;\n            int x=in[0]-'A'+1,y=in[2]-'A'+1;\n            edge[i].next=h[x];\n            edge[i].target=y;\n            h[x]=i;\n            indegree[y]++; //\u94fe\u5f0f\u6784\u56fe \n            if(Check()) //Check()\u5224\u65ad\u662f\u5426\u6709\u73af \n            {\n                cout<<\"Inconsistency found after \"<<i<<\" relations.\";\n                return 0;\n            }\n        }\n        Topsort(); //\u57fa\u7840\u62d3\u6251\u6392\u5e8f \n        return 0;\n    }\n\n```",
        "postTime": 1513432226,
        "uid": 72089,
        "name": "zhouzihan_2004",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u6211\u7528\u4e86floyd+\u62d3\u6251\u6392\u5e8f\u6765\u5199\uff0cfloyd\u5224\u662f\u5426\u51b2\u7a81\uff0c\u62d3\u6251\u6392\u5e8f\u68c0\u9a8c\u662f\u5426\u5df2\u7ecf\u786e\u5b9a\u987a\u5e8f\u3002\n\n\u7b97\u662f\u9898\u89e3\u91cc\u8fd9\u4e24\u79cd\u7b97\u6cd5\u7684\u7ed3\u5408\u7248\u5427\uff0c\u4e0d\u8fc7\u611f\u89c9\u76f8\u5bf9\u597d\u60f3\u4e00\u4e9b\uff0c\u4ee3\u7801\u4e5f\u597d\u5199\u3002\n\nfloyd\u90e8\u5206\u5f88\u7b80\u5355\uff0c\u6bcf\u6b21\u8f93\u5165\u4e4b\u540e\u8dd1\u4e00\u904d\uff0c\u770b\u770b\u6709\u6ca1\u6709\u6210\u73af\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u6a21\u677f\u591a\u52a0\u4e86\u4e00\u4e2a\u7279\u5224\uff0c\u7528\u6808\u5b58\u50a8\u65b0\u52a0\u5165\u7684\u70b9\uff0c\u6bcf\u6b21\u5f39\u51fa\u4e4b\u524d\u68c0\u67e5\u6808\u4e2d\u7684\u70b9\u4e2a\u6570\u662f\u5426\u5927\u4e8e\u4e00\uff08\u5927\u4e8e\u4e00\u8bf4\u660e\u6808\u4e2d\u7684\u70b9\u4e4b\u95f4\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff09\uff0c\u662f\u5219\u76f4\u63a5\u9000\u51fa\u51fd\u6570\u3002\u8fc7\u7a0b\u4e2d\u987a\u4fbf\u8bb0\u5f55\u987a\u5e8f\uff0c\u4e0d\u9000\u51fa\u5c31\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u4e86\u3002\n\n\u4e00\u4e2a\u5c0f\u5751\u70b9\uff1a\u4e00\u5f00\u59cb\u5224\u51b2\u7a81\u7684\u65f6\u5019\u6ca1\u6709\u8003\u8651\u7c7b\u4f3cA<A\u7684\u60c5\u51b5\uff0c\u7ed3\u679cWA\u7b2c\u4e00\u4e2a\u70b9\uff0c\u6539\u6389\u4e4b\u540e\u5c31A\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n\n\n\n```cpp\n#include <queue>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int mxn = 30;\nconst int mxm = 12345;\nint n,m,tail,pre[mxn],ind[mxn],st[mxn],sin[mxn];\nbool f[mxn][mxn];\nstruct edge{\n    int v,nxt;\n}e[mxm];\nvoid floyd()\n{\n    for(int k = 1;k <= n;++k)\n        for(int i = 1;i <= n;++i)\n            for(int j = 1;j <= n;++j)\n                f[i][j] |= f[i][k]&f[k][j];//\u66f4\u65b0\u5404\u70b9\u4e4b\u95f4\u7684\u8054\u901a\u72b6\u51b5\n}\nvoid topo(int t)\n{\n    queue<int> q;//\u7528\u961f\u5217\u8bb0\u5f55\u7b54\u6848\n    tail = 0;\n    for(int i = 1;i <= n;++i) if(!ind[i]) st[++tail] = i;\n    for(int i = 1;i <= n;++i) sin[i] = ind[i];\n    while(tail > 0)\n    {\n        int cnt = 0,p = st[tail--];\n        q.push(p);\n        for(int i = pre[p];i;i=e[i].nxt)\n        {\n            sin[e[i].v]--;\n            if(!sin[e[i].v]) st[++tail] = e[i].v,++cnt;\n            if(cnt > 1) return;//<-\u5173\u4e8e\u987a\u5e8f\u4e0d\u786e\u5b9a\u7684\u5224\u65ad\uff0c\u4e00\u6b21\u52a0\u5165\u4e24\u4e2a\u70b9\u5c31\u9000\u51fa\n        }\n    }\n    printf(\"Sorted sequence determined after %d relations: \",t);\n    while(!q.empty()) putchar(q.front()+64),q.pop();putchar('.');\n    exit(0);\n}\nint main()\n{\n    char in[5];\n    scanf(\"%d %d\",&n,&m);\n    for(int i = 1;i <= m;++i)\n    {\n        scanf(\"%s\",in+1);\n        int u = in[1]-64,v = in[3]-64;\n        if(f[v][u] || u == v){printf(\"Inconsistency found after %d relations.\",i);return 0;}\n        f[u][v] = 1,ind[v]++;\n        e[i].v = v,e[i].nxt = pre[u],pre[u] = i;\n        floyd();    \n        topo(i);\n    }\n    puts(\"Sorted sequence cannot be determined.\");\n    return 0;\n}\n```",
        "postTime": 1509003722,
        "uid": 27165,
        "name": "Dijkspfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e00\u5f00\u59cb\u4ec0\u4e48\u601d\u8def\u90fd\u6ca1\u6709\uff0c\u6700\u540e\u8fd8\u662f\u770b\u4e86\u6807\u7b7e\uff1b\n\n\u7136\u540e\u7ecf\u8fc7\u5927\u795e\u7684\u4e00\u53e5\u8bdd\uff1b\n\n\u5224\u65ad\u662f\u5426\u4f1a\u8fde\u6210\u73af\uff1b\n\n\u8fd9\u9053\u9898\u5224\u65ad\u6700\u597d\u7528floyd\uff1b\n\n\u56e0\u4e3a\u597d\u5199\uff1b\n\n\u4e00\u65e6\u51fa\u73b0\u73af\uff0c\u81ea\u7136\u662f\u77db\u76fe\uff0c\u8f93\u51fa\uff0c\u7136\u540eexit(0)\uff1b\n\n\u5982\u679c\u6ca1\u6709\u73af\uff0c\u5c31\u6df1\u641c\u4e00\u8fb9\uff1b\n\n\u5982\u679c\u53ef\u4ee5\u628a\u6240\u4ee5\u6709\u7684\u70b9\u90fd\u904d\u5386\u5230\uff1b\n\n\u5c31\u76f4\u63a5\u8f93\u51fa\u6210\u7acb\uff1b\n\n\u5426\u5219\uff1b\n\n\u5982\u679c\u6240\u6709\u7684\u90fd\u8f93\u5165\u5b8c\u4e86\uff0c\u8fd8\u662f\u4e0d\u80fd\u5224\u65ad\uff1b\n\n\u5c31\u8f93\u51fa\u65e0\u6cd5\u5224\u65ad\uff1b\n\n\u8fd8\u6709\u4e00\u70b9\u5c31\u662f\u6bcf\u8f93\u5165\u4e00\u6b21\u5c31\u5224\u65ad\u4e00\u6b21\uff0c\u5373\u505a\u4e00\u904d\u4ee5\u4e0a\u6b65\u9aa4\uff1b\n\n\u6700\u597ddfs\u65f6\u7528vector\u6216\u8005\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u901f\uff0c\u4e0d\u7136\u7b2c\u4e5d\u4e2a\u70b9\u4f1aTLE\uff1b\n\n\u4ee5\u53ca\u6210\u7acb\u7684\u65f6\u5019\u8f93\u51fa\u7684\u4e1c\u897f\u540e\u6709\u4e2a\u53e5\u70b9\uff1b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define II int\n#define C char\n#define R register\n#define IL inline\n#define I 30\nusing namespace std;\n\n\n\nstruct node {\n    II to,up;\n}aa[I];\n\nII head[I*123];\n\nII _tot;\n\nvoid add(R II x,R II y)\n{\n    aa[++_tot].to=y;\n    aa[_tot].up=head[x];\n    head[x]=_tot;\n}\n\nII had[I], f[I][I], ans[I], in[I];\n\nII n,m,now;\n\n\nIL II can()\n{\n    for(R II i=1;i<=26;i++)\n    {\n        for(R II j=1;j<=26;j++)\n        {\n            for(R II k=1;k<=26;k++)\n            {\n                f[j][k]=max(f[j][k],f[j][i]&f[i][k]);\n            }\n        }\n    }\n    \n    for(R II i=1;i<=26;i++) if(f[i][i]) return 0; \n    return 1;\n}\n\n\nIL II dfs(R II x,R II ka)\n{\n    ans[ka]=x;\n    if(ka==n) return 1;\n    for(R II i=head[x];i;i=aa[i].up)\n    {\n        II g=aa[i].to;\n        if(!had[g]) {\n            had[g]=1;\n            if(dfs(g,ka+1)) return 1; \n            had[g]=0;\n        }\n    }\n    return 0;\n}\n\n\nint main()\n{\n//    freopen(\"1.in\",\"r\",stdin);\n    \n    scanf(\"%d%d\",&n,&m);\n    for(R II i=1;i<=m;i++)\n    {\n        R C a,b,z;\n        cin>>a>>z>>b;\n        R II ka1=a-'A'+1;\n        R II ka2=b-'A'+1;\n        f[ka1][ka2]=1;\n        add(ka1,ka2);\n        in[ka2]++;\n        \n        if(!can()) {\n            printf(\"Inconsistency found after %d relations.\\n\",i);\n            exit(0);\n        } else {\n            for(R II j=1;j<=26;j++)\n            {\n                if(!in[j]) {\n                    for(R II k=1;k<=26;k++) had[k]=0;\n                    if(dfs(j,1)) {\n                        printf(\"Sorted sequence determined after %d relations: \",i);\n                        for(R II k=1;k<=n;k++) printf(\"%c\",ans[k]-1+'A');\n                        cout<<'.'<<endl;\n                        exit(0); \n                    }\n                }\n            }\n        }\n    }\n    \n    printf(\"Sorted sequence cannot be determined.\\n\");\n    exit(0);\n}\n```",
        "postTime": 1505974100,
        "uid": 36716,
        "name": "wuzhoupei",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u66b4\u529b\u90fd\u53ef\u4ee5\u8fc7\u7684,\u6253\u4e00\u4e2afor\u5faa\u73af\u4ece1\u5230m\u6bcf\u6b21\u627e\u524dt\u6761\u8fb9\uff0c\u5982\u679c\u6392\u5e8f\u6210\n\u529f\u5219\u8f93\u51fa\u6392\u5e8f\u7ed3\u679c\uff0c\u51fa\u73b0\u73af\u5219\u8f93\u51fa\u9519\u8bef\uff0c\u5426\u5219\u518d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u76f4\u5230m\u6761\u8fb9\u5df2\u7ecf\u586b\u5b8c\u4e86\u4ecd\u7136\u6ca1\u6709\u7ed3\u679c\u5c31\u8f93\u51fa\u65e0\u89e3\u3002\n\n\u4e0a\u4ee3\u7801\uff08\u66b4\u529b\u6bcf\u4e2a\u70b9\u90fd3ms\u8fc7\u7684\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,cnt;\nint fr[10000],to[10000];\n//fr&to:\u5b58\u8fb9\nint rd[500];\n//\u5165\u5ea6\nint sum,p[500];\n//p:\u5224\u65ad\u662f\u5426\u5df2\u5220\u9664\nstruct node{//sx:\u6bcf\u4e2a\u70b9\u6392\u7b2c\u51e0\u4e2a\uff0cbh:\u5b83\u662f\u54ea\u4e00\u4e2a\u5b57\u6bcd\n\tint sx,bh;\n}po[500];\nstring jm;\nbool cmp(node u,node v){//\u6392\u5e8f\n\treturn u.sx<v.sx;\n}\nint main(){\n\tcin>>n>>m;\n\tgetline(cin,jm);\n\tfor(int i=1;i<=m;i++){\n\t\tgetline(cin,jm);\n\t\tint x=jm[0]-'A'+1;\n\t\tint y=jm[2]-'A'+1;\n\t\tfr[i]=x;\n\t\tto[i]=y;\n\t}//\u8f93\u5165\n\tfor(int t=1;t<=m;t++){//\u5bf9\u524dt\u6761\u8fb9\u505a\u62d3\u6251\u6392\u5e8f\n\t\tmemset(p,0,sizeof(p));\n\t\tmemset(rd,0,sizeof(rd));\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tpo[i].sx=100000000;\n\t\t\tpo[i].bh=i;\n\t\t}\n\t\tfor(int i=1;i<=t;i++){\n\t\t\trd[to[i]]++;\n\t\t}\n\t\tsum=0;\n\t\tint ppd=1;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tint x,y;\n\t\t\ty=0;\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tif(p[j]==0&&rd[j]==0){\n\t\t\t\t\tx=j;\n\t\t\t\t\ty++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(y>1){//\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\u4e0d\u552f\u4e00\n\t\t\t\tppd=0;\n\t\t\t}\n\t\t\tif(y==0){//\u51fa\u73b0\u73af\uff0c\u76f4\u63a5\u8f93\u51fa\u9519\u8bef\n\t\t\t\tprintf(\"Inconsistency found after %d relations.\",t);\n\t\t\t\treturn 0;\n\t\t\t}\n            p[x]=1;\n\t\t\tsum++;\n\t\t\tpo[x].sx=sum;\n\t\t\tfor(int j=1;j<=t;j++){\n\t\t\t\tif(fr[j]==x){\n\t\t\t\t\trd[to[j]]--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++){//\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u662f\u5426\u90fd\u8bbf\u95ee\u5230\u4e86\n\t\t\tif(po[i].sx==100000000){\n\t\t\t\tppd=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(ppd==1){\n\t\t\tsort(po+1,po+1+n,cmp);//sort\u5927\u6cd5\u597d\n\t\t\tprintf(\"Sorted sequence determined after %d relations: \",t);\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tprintf(\"%c\",po[i].bh+'A'-1);\n\t\t\t}\n\t\t\tprintf(\".\");\n\t\t\treturn 0;//\u6709\u7ed3\u679c\n\t\t}\n\t}\n\tcout<<\"Sorted sequence cannot be determined.\";\n\treturn 0;//\u627e\u4e0d\u5230\u7ed3\u679c\n}\n```\n",
        "postTime": 1559569431,
        "uid": 90176,
        "name": "xixiup",
        "ccfLevel": 0,
        "title": "P1347\u9898\u89e3"
    },
    {
        "content": "```cpp\n//\u8fd9\u4e2a\u6211\u662f\u5c11\u4ec0\u4e48\u5c31\u52a0\u4ec0\u4e48\u7684\uff0c\u8bf4\u4ee5\u8fb9\u5199\u8fb9\u52a0\uff0c\u6709\u70b9\u70b9\u957f \n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<queue>\n#include<vector>\n using namespace std;\n \n char kb[27]={'0','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n //\u8f6c\u6362\u5b57\u6bcd\u7528 \n map<char,int>cp;//\u914d\u5408\u5c06\u5b57\u6bcd\u8f6c\u6362\u4e3a\u6570\u5b57\uff1b \n int n,m;\n int book[27]; \n int mp[27][27];//\u5b58\u8fb9 \n int disr[27];//\u5b58\u5165\u5ea6 \n int disc[27];//\u5b58\u51fa\u5ea6 \n char sum[27];//\u5b58\u5df2\u6709\u62d3\u6251\u5e8f\u5217 \n void invid()\n  {\n  \tfor(int i=1;i<=26;i++)\n  \t   cp[kb[i]]=i;\n  }\n  void inpid()\n {\n \tfor(int i=1;i<=26;i++)\n \t    mp[i][i]=1;\n }\n\n int tuopu(int num)\n {\n        queue<int>kmp;\n    \tint ct;\n\t\t\tint ccl= 0; \n\t  for(int i=1;i<=n;i++)\n\t  {\n\t  \tif(disr[i]==0)\n\t     {\n\t     \tkmp.push(i);\n\t     \tif(ccl>1)//\u5982\u679c\u6709\u591a\u4f591\u4e2a\u70b9\u5165\u5ea6\u4e0d\u4e3a0\uff0c\u5219\u4e0d\u80fd\u786e\u5b9a\u987a\u5e8f \uff0c\u5c31\u4e0d\u518d\u6392\u5e8f \n\t     \treturn -1;\n\t     }\t\n\t  }\n//\u5148\u627e\u51fa\u51fa\u5ea6\u4e3a0\u7684\u70b9\uff0c\u52a0\u5165\u961f\u5217\uff0c\u5b58\u5165sum,\u7136\u540e\u5f39\u51fa,\u76f4\u5230\u5f39\u5b8cn\u4e2a\u70b9 \n\t  \tint cpp=0;\n \t  while(!kmp.empty())//\u5176\u5b9e\u53ef\u4ee5\u66f4\u7b80\u5355\u7684 \n \t  {\n\t     ccl=0;\n \t  \tct=kmp.front();\n \t  \tkmp.pop();  \n\t     mp[ct][ct]=0;\n     \tsum[++cpp]=kb[ct];\t  \n        disr[ct]--;\n \t     \tfor(int i=1;i<=n;i++)\n \t  \t        {\t\n \t  \t\t        if(mp[ct][i]==1)\n\t\t\t             {\n\t\t\t        \tdisr[i]--;\n\t\t\t\t\t\tmp[ct][i]==0;\n\t\t\t            }\n\t\t\t            \n \t  \t\t      if(disr[i]==0)\n\t\t\t\t\t\t{\n\t\t\t\tkmp.push(i);\n\t\t\t\tccl++;\n\t\t\t\tif(ccl>1)//\u5982\u679c\u6709\u591a\u4f591\u4e2a\u70b9\u5165\u5ea6\u4e0d\u4e3a0\uff0c\u5219\u4e0d\u80fd\u786e\u5b9a\u987a\u5e8f ,\u5c31\u4e0d\u518d\u6392\u5e8f \n\t\t\t\treturn -1;\n\t\t\t\t\t} \n \t        \t}\n \t  \t\n \t  }   \n\t    printf(\"Sorted sequence determined after %d relations: \",num);//\u8f93\u51fa\u5c31\u662f\u4e86 \n\t    \t\t for(int i1=1;i1<=n;i1++)\n\t    \t     printf(\"%c\",sum[i1]);\n\t    \t     printf(\".\\n\");\n   return 1;\n }\n\tvector<int>hh[27];\nbool qb(int l1,int l2)//\u641c\u7d22\u68c0\u67e5l1\u7684\u8ddf\u73ed\u91cc\u9762\u662f\u5426\u6709l2; \n\t{\t\t\n\t\tfor(int i=0;i<hh[l1].size();i++)\n\t\t{\n\t\t    if(hh[l1][i]==l2)\n\t\t     {\n\t\t  \treturn true;\n\t\t    }\n\t\tif(qb(hh[l1][i],l2))\n\t\treturn true;\n\t\t}\t\n\t\treturn false;\n\t}\n\t\n int main()\n {\n     invid();//\u5c06\u6240\u6709\u5b57\u6bcd\u4ee3\u8868\u7684\u6570\u5b57\u5b58\u8fdbcp\u91cc \n     inpid();//\u5c06\u6240\u6709\u5b57\u6bcd\u5230\u5979\u81ea\u5df1\u7684\u8fb9\u5b58\u4e3a1 \n \t scanf(\"%d%d\",&n,&m);\n\t       \n\t    \tmemset(book,0,sizeof(book));\n\t    \tmemset(mp,0,sizeof(mp));\n\t\t\t//\u521d\u59cb\u5316\t    \n\t    \tchar a,s,b;\n\t    \t\n\t    \tint bian=0;//\u8fb9\u8ba1\u6570 \n\t    \tint cs=0;//\u70b9\u8ba1\u6570 \n\t    \tfor(int i=1;i<=m;i++)\n\t    \t{\n\t    \t   cin>>a>>s>>b;\n\t    \t   \n\t    \t   if(a==b)//\u5982\u679ca=b,\u5219\u76f4\u63a5IFA\uff1b \n\t    \t   {\n\t    \t   \tprintf(\"Inconsistency found after %d relations.\\n\",i);\n\t    \t   return 0;\n\t    \t   }\n\t    \t   \n\t    \t   int l1=cp[a];\n\t    \t   int l2=cp[b];//\u5c06\u5b57\u6bcd\u4ee3\u8868\u7684\u6570\u8f6c\u6362\u51fa\u6765 \n\t    \t   \n\t    \t   hh[l2].push_back(l1);//\u5c06l1\u653e\u5230l2\u7684\u8ddf\u73ed\u91cc\u9762\u53bb \n\t    \t   \n\t    \t   if(qb(l1,l2))//\u5982\u679cl2\u540c\u65f6\u662fl1\u7684\u8ddf\u73ed\uff0c\u5219\u6709\u73af \n\t    \t   {\t\n\t\t\t\tprintf(\"Inconsistency found after %d relations.\\n\",i);\n\t\t\t\treturn 0;\n\t    \t   } \n\t    \t   \n\t\t\t   if(mp[l1][l2]==0)//\u6ca1\u6709\u5b58\u5728\u7684\u8fb9 \n\t    \t    \t{\n\t    \t    \tdisc[l1]++;//\u51fa\u5ea6+1 \n\t\t\t\t \tdisr[l2]++;\t//\u5165\u5ea6+1 \n\t\t\t\t \tmp[l1][l2]=1;//\u6807\u8bb0\u8fb9 \n\t\t\t\t    bian++;//\u8ba1\u6570\u5668\u541b+1\uff1b \n\t    \t    \t}\n\t    \t    \t\n\t    \t    \tif(book[l1]==0)\n\t    \t    \t  cs++;//\u70b9+1 \n\t    \t    \tif(book[l2]==0)\n\t    \t    \t   cs++; //\u70b9+1 \n\t\t\t\n\t\t\n\t\t\t        int oi=0;\n\t\t\t        int oj=0;\n\t    \t      for(int i1=1;i1<=n;i1++)\n\t    \t        {\n\t    \t       \tif(disc[i1]==0)\n\t    \t         \toi++;\n\t    \t         \tif(disr[i1]==0)\n\t    \t         \toj++;\n\t    \t        }//\u68c0\u67e5\u51fa\u5ea6,\u5165\u5ea6, \u662f\u5426\u90fd\u53ea\u6709\u4e00\u4e2a\u4e3a0 \n\t    \t        \n\t    \t   if(cs==n&&oi==1&&bian>=n-1&&oj==1)//\u6ee1\u8db3\u6761\u4ef6\uff1a\u53ea\u6709\u4e00\u4e2a\u70b9\u51fa\u5ea6=0\uff0c\u4e00\u4e2a\u70b9\u5165\u5ea6=0\uff0c\u6709n\u4e2a\u5b58\u5165\u4e86\uff0c\u6709\u81f3\u5c11n-1\u6761\u8fb9 \n\t    \t       {  \t\n\t\t\t        flag2=i;\n\t    \t      int pd= tuopu(i);\n\t\t\t    if(pd==1)//\u5982\u679c\u62d3\u6251\u6210\u529f \n\t    \t     return 0;\n\t    \t       }\n\t    \t   book[l1]=1;\n\t\t\t   book[l2]=1;//\u5b58\u5165l1,l2;\t\n\t    \t   }\n    //\u4ec0\u4e48\u90fd\u6ca1\u6709\u53d1\u751f \n\t    \tprintf(\"Sorted sequence cannot be determined.\\n\");\n\t    return 0;\n\t   \n }\n```",
        "postTime": 1538656999,
        "uid": 42930,
        "name": "Reduce",
        "ccfLevel": 0,
        "title": "locatep1347"
    },
    {
        "content": "Floyd\u4f20\u9012\u95ed\u5305\uff0cmap\u6620\u5c04\uff0c\u62d3\u6251\u6392\u5e8f\u3002\n\n\u4f46\u672c\u9898\u9700\u8981\u5f00\u4e24\u4e2a\u90bb\u63a5\u77e9\u9635\uff0c\u4e00\u4e2a\u7528\u4e8e\u4f20\u9012\u95ed\u5305\uff0c\u4e00\u4e2a\u7528\u4e8e\u62d3\u6251\u6392\u5e8f\uff08\u53cd\u6b63\u6211\u662f\u5982\u6b64\uff09\u3002\n\n\u4f46\u6709\u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u3002\n- \u5224\u65ad\u662f\u5426\u77db\u76fe\u7528\u7684\u662f\u4f20\u9012\u95ed\u5305\u7684\u90bb\u63a5\u77e9\u9635\u3002\n- \u8f93\u51fa\u62d3\u6251\u5e8f\uff0c\u5192\u53f7\u540e\u6709\u4e2a\u7a7a\u683c\uff0c\u8d3c\u5751\u3002\uff08\u7136\u800c\u672c\u9898\u8c8c\u4f3c\u53ea\u6709\u4e00\u4e2a\u70b9\u8f93\u51fa\u62d3\u6251\u5e8f\u7684\uff09\u3002\n\ng\u4e3a\u4f20\u9012\u95ed\u5305\u7684\u90bb\u63a5\u77e9\u9635\u3002tg\u4e3a\u62d3\u6251\u7684\u90bb\u63a5\u77e9\u9635\u3002s\u4e3a\u4e0e\u8fd9\u4e2a\u70b9\u6709\u5173\u7cfb\u7684\u70b9\u6709\u591a\u5c11\u4e2a\uff0c\u5f53\u5176\u4e3an-1\u65f6\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u7684\u4f4d\u7f6e\u53ef\u4ee5\u786e\u5b9a\u3002inder\u4e3a\u70b9\u7684\u5165\u5ea6\uff0c\u7528\u4e8e\u62d3\u6251\u5e8f\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nmap <char,int> vh;\nmap <int,char> fvh;\nint n,m,g[30][30],s[30],ans=0,inder[30],tg[30][30];\nbool flag=true;\nchar ansx[30];\n\nvoid Floyd() {\n\tfor(int k=1;k<=n;k++) {\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tfor(int j=1;j<=n;j++) {\n\t\t\t\tif(!g[i][j]&&g[i][k]&&g[k][j]) {\n\t\t\t\t\tg[i][j]=1;\n\t\t\t\t\ts[i]++;\n\t\t\t\t\ts[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid top() {\n\tint sum=0;\n\twhile(sum<n) {\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(!inder[i]) {\n\t\t\t\tansx[++sum]=fvh[i];\n\t\t\t\tinder[i]--;\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(tg[vh[ansx[sum]]][i]) inder[i]--;\n\t\t}\n\t}\n}\n\nint main() {\n\tcin>>n>>m;\n\tint js=0;\n\tfor(int i=1;i<=m;i++) {\n\t\tchar a,b,c;\n\t\tcin>>a>>b>>c;\n\t\tif(!vh[a]) vh[a]=++js,fvh[js]=a;\n\t\tif(!vh[c]) vh[c]=++js,fvh[js]=c;\n\t\tinder[vh[c]]++;\n\t\tif(g[vh[c]][vh[a]]||a==c) {\n\t\t\tflag=false;\n\t\t\tans=i;\n\t\t\tbreak;\n\t\t}\n\t\tg[vh[a]][vh[c]]=1;\n\t\ttg[vh[a]][vh[c]]=1;\n\t\ts[vh[a]]++,s[vh[c]]++;\n\t\tFloyd();\n\t\tint sum=0;\n\t\tfor(int j=1;j<=n;j++) if(s[j]==n-1) sum++;\n\t\tif(sum==n) {\n\t\t\tans=i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(!flag) cout<<\"Inconsistency found after \"<<ans<<\" relations.\"<<endl;\n\telse if(!ans) cout<<\"Sorted sequence cannot be determined.\"<<endl;\n\telse {\n\t\ttop();\n\t\tcout<<\"Sorted sequence determined after \"<<ans<<\" relations: \";\n\t\tfor(int i=1;i<=n;i++) cout<<ansx[i];\n\t\tcout<<\".\"<<endl;\n\t}\n\t\n\treturn 0;\n}\n\t\t\n```\n",
        "postTime": 1573777195,
        "uid": 71936,
        "name": "HoshiuZ",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e9b\u70b9\u548c\u5f62\u5982x < y\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u6c42\u70b9\u7684\u552f\u4e00\u6392\u5217\u3002 \n\n\n\u663e\u7136\u5e94\u8be5\u662f\u7528\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\u7684\u4e00\u9053\u95ee\u9898\uff0c\u5927\u4f53\u601d\u8def\u5e76\u4e0d\u96be\u60f3\uff0c\u53ea\u8981\u5bf9\u4e8e\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u4ecex\u5411y\u5efa\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u6bcf\u52a0\u5165\u4e00\u6761\u8fb9\u8dd1\u4e00\u6b21\u62d3\u6251\u5373\u53ef\u3002  \n\n\n\u4f46\u662f\u672c\u9898\u6700\u5927\u7684\u96be\u70b9\u5728\u4e8e\u5176\u4ed6\u7ec6\u8282\u7684\u5904\u7406\uff08\u4e2a\u4eba\u8ba4\u4e3a\uff09\uff0c\u53ef\u4ee5\u770b\u5230\u9898\u76ee\u8981\u6c42\u8fdb\u884c\u4e09\u79cd\u4e0d\u540c\u60c5\u51b5\u7684\u5224\u65ad\uff0c\u5206\u522b\u662f\uff1a\u2460n\u4e2a\u70b9\u6709\u552f\u4e00\u5e8f\u5217\uff1b\u2461\u6709\u4e00\u4e9b\u70b9\u7684\u7ea6\u675f\u6761\u4ef6\u51b2\u7a81\uff1b\u2462\u7ed9\u51fa\u6240\u6709\u6761\u4ef6\u540e\u4ecd\u65e0\u6cd5\u786e\u5b9a\u552f\u4e00\u5e8f\u5217\n\n\u4e0b\u9762\u6765\u4e00\u6761\u6761\u89e3\u51b3\uff1a  \n\n\u5bf9\u4e8e\u2460\uff1a\u53ea\u8981\u6ee1\u8db3\u6709\u552f\u4e00\u7684\u62d3\u6251\u5e8f\u5217\u5373\u53ef\uff0c\u6240\u4ee5\u53ea\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a1\u3001\u80fd\u62d3\u6251\u5230\u6240\u6709\u70b9\uff1b2\u3001\u4efb\u4f55\u65f6\u523b\u961f\u5217\u4e2d\u90fd\u6ca1\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u70b9\u3002 \u975e\u5e38\u597d\u89e3\u51b3\uff0c\u52a0\u4e00\u4e2a\u7279\u5224\u5373\u53ef  \n\n\u5bf9\u4e8e\u2461\uff1a\u7ea6\u675f\u6761\u4ef6\u51b2\u7a81\u5176\u5b9e\u5c31\u662f\u5728\u56fe\u4e0a\u51fa\u73b0\u4e86\u73af\uff08\u4e00\u65f6\u60f3\u4e0d\u660e\u767d\u7684\u8bdd\u81ea\u5df1\u52a8\u624b\u753b\u4e2a\u56fe\u5c31\u660e\u767d\u4e86\uff09\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u672c\u4eba\u4ee3\u7801\u662f\u7528tarjan\u8ba1\u7b97\u5f3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570\uff08~~\u6bd5\u7adf\u6570\u636e\u8fd9\u4e48\u5c0f\u53ef\u4ee5\u968f\u4fbf\u641e~~\uff09\uff0c\u6709\u663e\u7136\u7684\u7ed3\u8bba\u5c31\u662f\u82e5\u5f3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570\u5c0f\u4e8e\u70b9\u6570\u7684\u8bdd\u5c31\u4ee3\u8868\u51fa\u73b0\u4e86\u73af  \n\n\u5bf9\u4e8e\u2462\uff1a\u6240\u6709\u8fb9\u8f93\u5165\u5b8c\u4e4b\u540e\u5747\u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u4e24\u70b9\u5c31\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\u60c5\u51b5  \n\n\u6700\u540e\u8f93\u51fa\u65f6\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\uff08~~\u672c\u4eba\u4e5f\u56e0\u6b64\u88ab\u5361\u4e86\u51e0\u6b21~~\uff09  \n\n\u8be6\u7ec6\u7684\u90e8\u5206\u5728\u4ee3\u7801\u4e2d\u8fd8\u4f1a\u6709\u6ce8\u91ca\uff0c\u4ee5\u4e0b\u4e3a\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <queue>\nusing namespace std;\n\nconst int N = 101, M = 1010;\n\nint n, m, tot;\nint head[N], ver[M], Next[M], deg[N], dg[N], cnt;\n//deg, dg\u4e3a\u5b58\u5165\u5ea6\u7684\u6570\u7ec4 \nchar a[N];\nbool p[N], pd, vis[N];\n\nint dfn[N], low[N], stack[N], id, top;//tarjan\u6570\u7ec4 \nint scc;//\u5f3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570 \n\ninline void add(int x, int y) {\n\tver[++cnt] = y; Next[cnt] = head[x]; head[x] = cnt;\n\tdeg[y]++;\n}\n\ninline int topsort() {\n\tqueue <int> q;\n\ttot = 0;//\u8bb0\u5f97\u6e05\u96f6 \n\tfor (int i = 1; i <= n; i++) dg[i] = deg[i];//\u56e0\u4e3a\u8981\u591a\u6b21\u62d3\u6251\u6240\u4ee5\u53e6\u5f00\u4e00\u4e2a\u6570\u7ec4\u7528\u4e8e\u62d3\u6251\n\tfor (int i = 1; i <= n; i++) if (dg[i] == 0 && p[i]) q.push(i);//\u53ea\u6709\u5df2\u7ecf\u6709\u8fb9\u8fde\u63a5\u7684\u70b9\u624d\u80fd\u5165\u961f\n\tif(q.size() > 1) return 2;\n    \t//\u5982\u679c\u961f\u5217\u5185\u5143\u7d20\u8d85\u8fc7\u4e00\u4e2a\u5c31\u65e0\u6cd5\u786e\u5b9a\u552f\u4e00\u5e8f\u5217,\u76f4\u63a5\u8fd4\u56de,\u4ee5\u4e0b\u540c\u7406 \n\twhile (q.size()) {\n\t\tint x = q.front(); q.pop();\n\t\ta[++tot] = 'A' + x - 1;\n\t\tfor (int i = head[x]; i; i = Next[i]) {\n\t\t\tint y = ver[i];\n\t\t\tif (--dg[y] == 0) {\n\t\t\t\tq.push(y);\n\t\t\t\tif(q.size() > 1) return 2;\n\t\t\t}\n\t\t}\n\t}\n\tif (tot == n) return 1;\n   \t//\u6240\u6709\u70b9\u90fd\u8fdb\u5165\u4e86\u62d3\u6251\u5e8f\u5217\n\treturn 0;\n}\n\ninline void clear() {\n\tscc = 0; id = 0; top = 0;\n\tmemset(dfn, 0, sizeof(dfn));\n\tmemset(low, 0, sizeof(low));\n}\n\ninline void tarjan(int x) {\n\tdfn[x] = low[x] = ++id; vis[x] = 1; stack[++top] = x;\n\tfor (int i = head[x]; i; i = Next[i]) {\n\t\tint y = ver[i];\n\t\tif (!dfn[y]) {\n\t\t\ttarjan(y);\n\t\t\tlow[x] = min(low[x], low[y]);\n\t\t}\n\t\telse if (vis[y]) low[x] = min(low[x], dfn[y]);\n\t}\n\tif (dfn[x] == low[x]) {\n\t\tint now; scc++;\n        \t//\u8fd9\u91cc\u7684tarjan\u53ea\u9700\u8bb0\u5f55\u5f3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570\u5373\u53ef\n\t\tdo {\n\t\t\tnow = stack[top--];\n\t\t\tvis[now] = 0;\n\t\t} while (now != x);\n\t}\n}\n\ninline int read() {\n\tint x = 0, f = 1; char ch = getchar();\n\twhile (ch < '0' || ch > '9') {if (ch == '-') f = -1; ch = getchar();}\n\twhile (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar();\n\treturn x * f;\n}\n\nint main() {\n\tn = read(); m = read();\n\tchar in[4];\n\tfor (int i = 1; i <= m; i++) {\n\t\tscanf(\"%s\", in);\n\t\tint x = in[0] - 'A' + 1, y = in[2] - 'A' + 1;\n\t\tif (x == y) {//\u5982\u679cx==y\u76f4\u63a5\u7279\u5224\u8f93\u51fa\u4e0d\u7b26\u5408\u56e0\u4e3a\u4e00\u4e2a\u6570\u4e0d\u53ef\u80fd\u5c0f\u4e8e\u5b83\u672c\u8eab \n\t\t\tcout << \"Inconsistency found after \" << i << \" relations.\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tadd(x, y);\n\t\tp[x] = 1; p[y] = 1;//\u8bb0\u5f55\u4e00\u4e0b\u5df2\u7ecf\u51fa\u73b0\u7684\u70b9\n\t\tclear();//\u6e05\u7a7atarjan\u7684\u6570\u7ec4\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (!dfn[j]) tarjan(j);//\u8dd1tarjan\n\t\t}\n\t\tif (scc < n) {//\u5f3a\u8fde\u901a\u5206\u91cf\u6570\u91cf\u5c0f\u4e8en\u5219\u4ee3\u8868\u51fa\u73b0\u4e86\u73af\n\t\t\tcout << \"Inconsistency found after \" << i << \" relations.\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tint ret = topsort();\n\t\tif (ret == 1) {\n\t\t\tcout << \"Sorted sequence determined after \" << i << \" relations: \";\n\t\t\tfor (int j = 1; j <= tot; j++) cout << a[j];\n\t\t\tputs(\".\");//\u7ed3\u5c3e\u8bb0\u5f97\u8f93\u51fa\u8fd9\u4e2a\u70b9\uff0c\u5bb9\u6613\u9057\u6f0f\n\t\t\treturn 0;\n\t\t}\n\t\telse if (i < m) continue;//\u5982\u679c\u6570\u636e\u8fd8\u6ca1\u8f93\u5165\u5b8c\u5c31\u7ee7\u7eed\n\t\tcout << \"Sorted sequence cannot be determined.\" << endl;\n\t\t//\u6570\u636e\u8f93\u5b8c\u4e86\u540e\u6254\u4e0d\u80fd\u5c06\u6240\u6709\u70b9\u62d3\u6251\u5230\u5c31\u8f93\u51fa\u65e0\u6cd5\u5224\u65ad\n\t\treturn 0;\n\t}\n\treturn 0;\n}\n```\n\u7801\u98ce\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\u8fd8\u8bf7\u89c1\u8c05",
        "postTime": 1571061082,
        "uid": 18282,
        "name": "Phykyer",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "```cpp\n//\u6bcf\u8f93\u5165\u4e00\u6761\u8fb9\u8fdb\u884c\u4e00\u5b9a\u5224\u65ad\uff0c\u9996\u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u5df2\u51fa\u73b0\uff0c\u5982\u679c\u7ed3\u70b9\u90fd\u51fa\u73b0\uff0c\u5e76\u4e14\u65e0\u73af\uff0c\u90a3\u4e48\u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u7ed3\u70b9\u5f00\u59cb\u6df1\u641c\uff0c\u5982\u679c\u80fd\u904d\u5386\u8f93\u51fa\u62d3\u6251\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002\u5982\u679c\u4e0d\u80fd\u904d\u5386\u5b8c\uff0c\u8bf4\u660e\u6240\u6709\u7684\u7ed3\u70b9\u5e76\u6ca1\u6709\u5168\u90e8\u8fde\u901a\u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\u3002\n//\u8001\u5b50\u4ee5\u540e\u518d\u4e5f\u4e0d\u7528bool\u5566\uff01\uff01\uff01 \n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>G[30];\nconst int N = 30;\nint n, m, t, tot = 0;\nint exist[N];\nstring s;\nint v[N];\nint out[30], in[30];\nint  check(int x){\n\tv[x] = -1;\n\tfor(int i = 0 ; i < G[x].size() ; i++){\n\t\tint y = G[x][i];\n\t\tif(v[y] == -1){\n\t\t\treturn 1;\n\t\t}\n\t\tif(!v[y] && check(y)){\n\t\t\treturn 1;\n\t\t}\n\t}\n\tv[x] = 1;\n\treturn 0; \n}\nint ans[100200];\nvoid dfs(int cur , int  x , int cnt){\n\tans[cur] = x;\n\tif(cur == n - 1){\n\t\n\t\tprintf(\"Sorted sequence determined after %d relations: \",cnt);\n\t   for(int i = 0; i < n ; i ++ ){\n\t   \tcout << char (ans[i] + 'A' - 1);\n\t   }\n\t    printf(\".\\n\");  \n\t   exit(0);\n}\n\tfor(int i = 0 ; i < G[x].size() ; i ++){\n    \tdfs(cur + 1, G[x][i] , cnt);\n\t}\n}\nvoid search(int i){\n\tfor(int j = 1; j <= n; j ++){\n\t  if(exist[j]){\n\t   memset(v , 0 , sizeof(v));\n       if(check(j)){\n       \tprintf(\"Inconsistency found after %d relations.\\n\",i);\n       \texit(0);\n\t   }\n    }\n  }\n  if(tot == n){\n  \tfor(int j  = 1 ; j <= n ; j ++){\n  \t\tif(!in[j]){\n  \t\tdfs(0 , j , i);\n\t\t  }\n\t  }\n  }\n}\nint main () {\n\tcin >> n >> m;\n\tfor(int i =  1; i <= m ; i ++){\n\t\t  cin >> s; \n\tint a = s[0] - 'A' + 1;\n\tint b = s[2] - 'A' + 1;\n\tin[b]++;\n\tout[a]++;\n\tif(!exist[a])tot++;\n\tif(!exist[b])tot++;\n\texist[a] = exist[b] = 1;\n\tG[a].push_back(b);\n\tsearch(i);\n\t}\n\tprintf(\"Sorted sequence cannot be determined.\\n\");\n}\n```\n",
        "postTime": 1570888151,
        "uid": 155958,
        "name": "wmjlzw1314",
        "ccfLevel": 3,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "##### \u987a\u5e8f\u662f\u5426\u77db\u76fe\uff0c\u5176\u5b9e\u5c31\u662f\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\uff0c\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\uff0c\u6216\u8005Floyed\u3002\u8fd9\u4e2a\u697c\u4e0b\u5e94\u8be5\u8bb2\u7684\u86ee\u6e05\u695a\u4e86\uff0c\u6211\u5c31\u4e0d\u8fc7\u591a\u8d58\u8ff0\u4e86\u3002\n#### \u5173\u4e8e\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5982\u4f55\u786e\u5b9a\u987a\u5e8f\uff0c\u5176\u5b9e\u53ef\u4ee5\u5c06\u6240\u6709\u7684X<Y\u770b\u6210\u4e00\u6761\u4eceX\u5230Y\u6216\u8005\u4eceY\u5230X\u7684\u6709\u5411\u8fb9\uff0c\u5e76\u4e14\u8fb9\u6743\u4e3a1\u3002\u7136\u540e\u6839\u636e\u4e4b\u524d\u7684\u62d3\u6251\u6392\u5e8f\u6216\u8005\u76f4\u63a5\u679a\u4e3e\u4e00\u904d\u627e\u51fa\u6ca1\u6709\u8fb9\u6307\u5411\u7684\u70b9\u4e5f\u5c31\u662f\u6e90\u70b9\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u56fe\u4e2d\u65e0\u73af\uff08\u6709\u73af\u7684\u60c5\u51b5\u5df2\u7ecf\u88ab\u6392\u9664\uff09\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u505a\u4e00\u904d _\u5355\u6e90\u6700\u957f\u8def_ \u3002\n#### \u53ea\u8981\u5b58\u5728\u6e90\u70b9\u5230\u67d0\u4e00\u70b9\u7684\u8ddd\u79bb\u662fn-1\u7684\u90a3\u4e48\u5fc5\u7136\u8fd9\u4e00\u70b9\u548c\u6e90\u70b9\u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8def\u5f84\u4e14\u8fd9\u6761\u8def\u5f84\u4e0a\u521a\u597d\u6709n\u4e2a\u70b9\uff0c\u6839\u636e\u6211\u4eec\u5b9a\u4e49\u7684\u8fb9\u5c31\u76f8\u5f53\u4e8e\u627e\u51fan-1\u4e2a\u4e92\u4e0d\u91cd\u590d\u7684X<Y\u7684\u6761\u4ef6\uff0c\u5b8c\u5168\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint x,y,n,m,bian[30],next[2000],to[2000];\nbool map[30][30],flag[30];\nchar s[3];\nint head,tail,origin,path[30],dis[30],sum,q[10000],pre[30],len;\n// \u961f\u5217\u7684\u4e00\u4e9b\u64cd\u4f5c\nbool empty() \n{\n  return sum==0;\n}\nvoid push(int x)\n {\n  tail=(tail+1)%10000;\n  q[tail]=x;\n  sum++;\n }\nint pop()\n  {\n   head=(head+1)%10000;\n   sum--;\n   return q[head];\n  }\n//\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  for (int t=1;t<=m;t++)\n   {\n   \tscanf(\"%s\",s);\n   \tx=s[0]-'A'+1;\n   \ty=s[2]-'A'+1;\n   \tflag[y]=true;//\u6807\u8bb0\u6709\u8fb9\u6307\u5411\u7684\u70b9\uff0c\u4ee5\u6b64\u627e\u51fa\u6ca1\u6709\u8fb9\u6307\u5411\u7684\u70b9\u4e5f\u5c31\u662f\u6e90\u70b9\n   \tmap[x][y]=true;//\u90bb\u63a5\u77e9\u9635\u5b58\u8fb9\u65b9\u4fbfFloyed\n   \t\n    next[t]=bian[x];//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\u65b9\u4fbf\u627e\u6700\u957f\u8def\n   \tbian[x]=t;\n   \tto[t]=y;\n    \n   \tfor (int k=1;k<=n;k++)//Floyed\u627e\u73af\n   \t for (int i=1;i<=n;i++)\n   \t  for (int j=1;j<=n;j++)\n   \t   map[i][j]=map[i][j]||(map[i][k]&&map[k][j]);\n\t for (int i=1;i<=n;i++)\n      if (map[i][i]) {printf(\"Inconsistency found after %d relations.\\n\",t);return 0;}\n      \n     for (int i=1;i<=n;i++)\n      if (!flag[i]) {origin=i;break;}//\u679a\u4e3e\u627e\u51fa\u6e90\u70b9\n      \n\t memset(dis,255,sizeof(dis));//\u4e00\u4e9b\u57fa\u672c\u7684\u9884\u5904\u7406\u64cd\u4f5c\n\t sum=1; \n\t head=-1;\n\t tail=0;\n\t q[0]=origin;\n\t dis[origin]=0;  \n\t len=0;//\u627e\u51fa\u6b63\u786e\u987a\u5e8f\u7684\u957f\u5ea6 \t\n\t while (!empty())\n   \t  {\n   \t  \tx=pop();\n   \t  \tif (dis[x]==n-1)//\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u8def\u5f84\uff0c\n        //\u901a\u8fc7pre\u6570\u7ec4\u5f00\u59cb\u56de\u9000\u627e\u51fa\u7ecf\u8fc7\u7684\u70b9\u3002\n   \t  \t {\n   \t  \t    path[++len]=x;\t\n   \t  \t \tfor (int i=pre[x];i!=0;i=pre[i])\n   \t  \t \t path[++len]=i;\n   \t  \t \tbreak;\n   \t     }\n   \t  \tfor (int i=bian[x];i!=0;i=next[i])\n   \t  \t \tif (dis[x]+1>dis[to[i]])//\u627e\u5230\u66f4\u957f\u7684\u8def\u5f84\uff0c\u66f4\u65b0dis\u6570\u7ec4\n   \t  \t \t {\n   \t  \t \t \tdis[to[i]]=dis[x]+1;\n   \t  \t \t \tpre[to[i]]=x;\n   \t  \t \t \tpush(to[i]);\n   \t  \t     }\n      }\n      if (len==n)//\u5f53\u627e\u51fa\u7684\u6b63\u786e\u987a\u5e8f\u957f\u5ea6\u7b49\u4e8en\n      {\n      \tprintf(\"Sorted sequence determined after %d relations: \",t);\n       for (int i=n;i>0;i--)\n        printf(\"%c\",path[i]+'A'-1);\n        printf(\".\\n\");\n        return 0;\n\t  }\n\t  if (len!=n&&t==m)//\u6ca1\u627e\u5230\u6b63\u786e\u987a\u5e8f\uff0c\u5e76\u4e14\u5df2\u7ecf\u8bfb\u5165\u5230\u6700\u540e\u4e00\u6761\u8fb9\u4e86\n\t   puts(\"Sorted sequence cannot be determined.\");\n   }\n  return 0;\n}\n```",
        "postTime": 1527413123,
        "uid": 23977,
        "name": "LuckyCloud",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "\u5c31\u662f\u6bcf\u52a0\u4e00\u6761\u8fb9\u4e4b\u540e\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\uff08\u597d\u50cf\u6ca1\u6709topo\u7684\u6837\u5b50\uff09\uff0c\u5b58\u5728\u5c31\u662f\u7b2c2\u79cd\u60c5\u51b5\uff0cexit(0)\uff1b\u5982\u679cn\u4e2a\u5b57\u6bcd\u90fd\u5df2\u7ecf\u51fa\u73b0\u8fc7\u7684\u8bdd\uff0c\u4ece\u5165\u5ea6\u4e3a0\u7684\u70b9dfs\u4e00\u904d\u770b\u662f\u5426\u80fd\u8dd1\u5b8c\u6240\u6709\u70b9\uff0c\u5982\u679c\u80fd\u5c31\u662f\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0cexit(0)\uff1b\u5982\u679c\u8f93\u5165\u7ed3\u675f\u90fd\u4e0d\u662f\u7b2c1\u30012\u79cd\u60c5\u51b5\uff0c\u5219\u4e3a\u7b2c\u4e09\u79cd\u60c5\u51b5\u3002\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,in[30],out[30],tot,p[30];\nvector<int>x[30];\nchar st[4];\nbool vis[30],exist[30];\nbool dfs(int v){\n    vis[v]=1;\n    for(int i=x[v].size()-1;i>=0;i--){\n        int u=x[v][i];\n        if(vis[u]){\n            return 0;\n        }\n        if(!dfs(x[v][i]))return 0;\n    }\n    vis[v]=0;\n    return 1;\n}\nvoid search(int v,int sum,int q){\n    p[sum]=v;\n    if(sum==n){\n        printf(\"Sorted sequence determined after %d relations: \",q);\n        for(int i=1;i<=n;i++){\n            printf(\"%c\",p[i]+'A'-1);\n        }\n        printf(\".\");exit(0);\n    }\n    for(int i=x[v].size()-1;i>=0;i--){\n        search(x[v][i],sum+1,q);\n    }\n}\nvoid check(int v){\n    for(int i=1;i<=n;i++){\n        if(exist[i]){\n            memset(vis,0,sizeof(vis));\n            if(!dfs(i)){\n                printf(\"Inconsistency found after %d relations.\",v);exit(0);\n            }\n        }\n    }\n    if(tot!=n)return;\n    for(int i=1;i<=n;i++){\n        if(!in[i]){\n            search(i,1,v);break;\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int a,b,i=1;i<=m;i++){\n        scanf(\"%s\",st);\n        a=st[0]-'A'+1;b=st[2]-'A'+1;\n        out[a]++;in[b]++;\n        if(!exist[a])tot++;\n        if(!exist[b])tot++;\n        exist[a]=exist[b]=1;\n        x[a].push_back(b);\n        check(i);\n    }\n    printf(\"Sorted sequence cannot be determined.\");\n    return 0;\n}\n```",
        "postTime": 1476930022,
        "uid": 14490,
        "name": "vagary",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1347 \u3010\u6392\u5e8f\u3011"
    },
    {
        "content": "**\u62d3\u6251\u6392\u5e8f\uff1a**\n\n\u5bf9\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe(Directed Acyclic Graph\u7b80\u79f0DAG)G\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u662f\u5c06G\u4e2d\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9u\u548cv\uff0c\u82e5\u8fb9(u,v)\u2208E(G)\uff0c\u5219u\u5728\u7ebf\u6027\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728v\u4e4b\u524d\u3002\n\n\u901a\u5e38\uff0c\u8fd9\u6837\u7684\u7ebf\u6027\u5e8f\u5217\u79f0\u4e3a\u6ee1\u8db3\u62d3\u6251\u6b21\u5e8f(Topological Order)\u7684\u5e8f\u5217\uff0c\u7b80\u79f0\u62d3\u6251\u5e8f\u5217\u3002\u7531\u67d0\u4e2a\u96c6\u5408\u4e0a\u7684\u4e00\u4e2a\u504f\u5e8f\u5f97\u5230\u8be5\u96c6\u5408\u4e0a\u7684\u4e00\u4e2a\u5168\u5e8f\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u79f0\u4e4b\u4e3a\u62d3\u6251\u6392\u5e8f\u3002\n\n**\u504f\u5e8f/\u5168\u5e8f\u5173\u7cfb\uff1a**\n\n\u504f\u5e8f\u548c\u5168\u5e8f\u5b9e\u9645\u4e0a\u662f\u79bb\u6563\u6570\u5b66\u4e2d\u7684\u6982\u5ff5\u3002\n\n\u8fd9\u91cc\u4e0d\u6253\u7b97\u8bf4\u592a\u591a\u5f62\u5f0f\u5316\u7684\u5b9a\u4e49\uff0c\u5f62\u5f0f\u5316\u7684\u5b9a\u4e49\u6559\u79d1\u4e66\u4e0a\u6216\u8005\u7f51\u9875\u5c31\u8bf4\u7684\u5f88\u8be6\u7ec6\u3002   \u8fd8\u662f\u4ee5\u4e0a\u9762\u9009\u8bfe\u7684\u4f8b\u5b50\u6765\u63cf\u8ff0\u8fd9\u4e24\u4e2a\u6982\u5ff5\u3002\u5047\u8bbe\u6211\u4eec\u5728\u5b66\u4e60\u5b8c\u4e86\u7b97\u6cd5\u8fd9\u95e8\u8bfe\u540e\uff0c\u53ef\u4ee5\u9009\u4fee\u673a\u5668\u5b66\u4e60\u6216\u8005\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u3002\n\n\u8fd9\u4e2a\u6216\u8005\u8868\u793a\uff0c\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u548c\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u8fd9\u4e24\u95e8\u8bfe\u4e4b\u95f4\u6ca1\u6709\u7279\u5b9a\u7684\u5148\u540e\u987a\u5e8f\u3002\n\n\u56e0\u6b64\uff0c\u5728\u6211\u4eec\u6240\u6709\u53ef\u4ee5\u9009\u62e9\u7684\u8bfe\u7a0b\u4e2d\uff0c\u4efb\u610f\u4e24\u95e8\u8bfe\u7a0b\u4e4b\u95f4\u7684\u5173\u7cfb\u8981\u4e48\u662f\u786e\u5b9a\u7684(\u5373\u62e5\u6709\u5148\u540e\u5173\u7cfb)\uff0c\u8981\u4e48\u662f\u4e0d\u786e\u5b9a\u7684(\u5373\u6ca1\u6709\u5148\u540e\u5173\u7cfb)\uff0c\u7edd\u5bf9\u4e0d\u5b58\u5728\u4e92\u76f8\u77db\u76fe\u7684\u5173\u7cfb(\u5373\u73af\u8def)\u3002\n\n\u4ee5\u4e0a\u5c31\u662f\u504f\u5e8f\u7684\u610f\u4e49\uff0c\u62bd\u8c61\u800c\u8a00\uff0c\u6709\u5411\u56fe\u4e2d\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u4e0d\u5b58\u5728\u73af\u8def\uff0c\u81f3\u4e8e\u8fde\u901a\u4e0e\u5426\uff0c\u662f\u65e0\u6240\u8c13\u7684\u3002\u6240\u4ee5\uff0c\u6709\u5411\u65e0\u73af\u56fe\u5fc5\u7136\u662f\u6ee1\u8db3\u504f\u5e8f\u5173\u7cfb\u7684\u3002   \u7406\u89e3\u4e86\u504f\u5e8f\u7684\u6982\u5ff5\uff0c\u90a3\u4e48\u5168\u5e8f\u5c31\u597d\u529e\u4e86\u3002\u6240\u8c13\u5168\u5e8f\uff0c\u5c31\u662f\u5728\u504f\u5e8f\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u6709\u5411\u65e0\u73af\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u5bf9\u9876\u70b9\u8fd8\u9700\u8981\u6709\u660e\u786e\u7684\u5173\u7cfb(\u53cd\u6620\u5728\u56fe\u4e2d\uff0c\u5c31\u662f\u5355\u5411\u8fde\u901a\u7684\u5173\u7cfb\uff0c\u6ce8\u610f\u4e0d\u80fd\u53cc\u5411\u8fde\u901a\uff0c\u90a3\u5c31\u6210\u73af\u4e86)\u3002\u53ef\u89c1\uff0c\u5168\u5e8f\u5c31\u662f\u504f\u5e8f\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u56de\u5230\u6211\u4eec\u7684\u9009\u8bfe\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u673a\u5668\u5b66\u4e60\u9700\u8981\u5728\u5b66\u4e60\u4e86\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e4b\u540e\u624d\u80fd\u5b66\u4e60(\u53ef\u80fd\u5b66\u7684\u662f\u56fe\u5f62\u5b66\u9886\u57df\u76f8\u5173\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u2026\u2026)\uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u4e5f\u5c31\u5b58\u5728\u4e86\u786e\u5b9a\u7684\uff0c\u539f\u672c\u7684\u504f\u5e8f\u5173\u7cfb\u5c31\u53d8\u6210\u4e86\u5168\u5e8f\u5173\u7cfb\u3002  \n\n\u5b9e\u9645\u4e0a\uff0c\u5f88\u591a\u5730\u65b9\u90fd\u5b58\u5728\u504f\u5e8f\u548c\u5168\u5e8f\u7684\u6982\u5ff5\u3002\n\n\u6bd4\u5982\u5bf9\u82e5\u5e72\u4e92\u4e0d\u76f8\u7b49\u7684\u6574\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u540e\u603b\u662f\u80fd\u591f\u5f97\u5230\u552f\u4e00\u7684\u6392\u5e8f\u7ed3\u679c(\u4ece\u5c0f\u5230\u5927\uff0c\u4e0b\u540c)\u3002\n\n\u8fd9\u4e2a\u7ed3\u8bba\u5e94\u8be5\u4e0d\u4f1a\u6709\u4eba\u8868\u793a\u7591\u95ee\u5427\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u4ee5\u504f\u5e8f/\u5168\u5e8f\u7684\u89d2\u5ea6\u6765\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u518d\u81ea\u7136\u4e0d\u8fc7\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u5c31\u4f1a\u6709\u522b\u7684\u4f53\u4f1a\u4e86\u3002   \u90a3\u4e48\u5982\u4f55\u7528\u504f\u5e8f/\u5168\u5e8f\u6765\u89e3\u91ca\u6392\u5e8f\u7ed3\u679c\u7684\u552f\u4e00\u6027\u5462\uff1f\n\n\u6211\u4eec\u77e5\u9053\u4e0d\u540c\u6574\u6570\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\u662f\u786e\u5b9a\u7684\uff0c\u53731\u603b\u662f\u5c0f\u4e8e4\u7684\uff0c\u4e0d\u4f1a\u6709\u4eba\u8bf41\u5927\u4e8e\u6216\u8005\u7b49\u4e8e4\u5427\u3002\n\n\u8fd9\u5c31\u662f\u8bf4\uff0c\u8fd9\u5e8f\u5217\u662f\u6ee1\u8db3\u5168\u5e8f\u5173\u7cfb\u7684\u3002\u800c\u5bf9\u4e8e\u62e5\u6709\u5168\u5e8f\u5173\u7cfb\u7684\u7ed3\u6784(\u5982\u62e5\u6709\u4e0d\u540c\u6574\u6570\u7684\u6570\u7ec4)\uff0c\u5728\u5176\u7ebf\u6027\u5316(\u6392\u5e8f)\u4e4b\u540e\u7684\u7ed3\u679c\u5fc5\u7136\u662f\u552f\u4e00\u7684\u3002\n\n\u5bf9\u4e8e\u6392\u5e8f\u7684\u7b97\u6cd5\uff0c\u6211\u4eec\u8bc4\u4ef7\u6307\u6807\u4e4b\u4e00\u662f\u770b\u8be5\u6392\u5e8f\u7b97\u6cd5\u662f\u5426\u7a33\u5b9a\uff0c\u5373\u503c\u76f8\u540c\u7684\u5143\u7d20\u7684\u6392\u5e8f\u7ed3\u679c\u662f\u5426\u548c\u51fa\u73b0\u7684\u987a\u5e8f\u4e00\u81f4\u3002\n\n\u6bd4\u5982\uff0c\u6211\u4eec\u8bf4\u5feb\u901f\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6700\u540e\u7684\u5feb\u6392\u7ed3\u679c\u4e2d\u76f8\u540c\u5143\u7d20\u7684\u51fa\u73b0\u987a\u5e8f\u548c\u6392\u5e8f\u524d\u4e0d\u4e00\u81f4\u4e86\u3002\n\n\u5982\u679c\u7528\u504f\u5e8f\u7684\u6982\u5ff5\u53ef\u4ee5\u8fd9\u6837\u89e3\u91ca\u8fd9\u4e00\u73b0\u8c61\uff1a\u76f8\u540c\u503c\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u65e0\u6cd5\u786e\u5b9a\u7684\u3002\u56e0\u6b64\u5b83\u4eec\u5728\u6700\u7ec8\u7684\u7ed3\u679c\u4e2d\u7684\u51fa\u73b0\u987a\u5e8f\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u3002\n\n\u800c\u5bf9\u4e8e\u8bf8\u5982\u63d2\u5165\u6392\u5e8f\u8fd9\u79cd\u7a33\u5b9a\u6027\u6392\u5e8f\uff0c\u5b83\u4eec\u5bf9\u4e8e\u503c\u76f8\u540c\u7684\u5143\u7d20\uff0c\u8fd8\u6709\u4e00\u4e2a\u6f5c\u5728\u7684\u6bd4\u8f83\u65b9\u5f0f\uff0c\u5373\u6bd4\u8f83\u5b83\u4eec\u7684\u51fa\u73b0\u987a\u5e8f\uff0c\u51fa\u73b0\u9760\u524d\u7684\u5143\u7d20\u5927\u4e8e\u51fa\u73b0\u540e\u51fa\u73b0\u7684\u5143\u7d20\u3002\n\n\u56e0\u6b64\u901a\u8fc7\u8fd9\u4e00\u6f5c\u5728\u7684\u6bd4\u8f83\uff0c\u5c06\u504f\u5e8f\u5173\u7cfb\u8f6c\u6362\u4e3a\u4e86\u5168\u5e8f\u5173\u7cfb\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u7ed3\u679c\u7684\u552f\u4e00\u6027\u3002   \u62d3\u5c55\u5230\u62d3\u6251\u6392\u5e8f\u4e2d\uff0c\u7ed3\u679c\u5177\u6709\u552f\u4e00\u6027\u7684\u6761\u4ef6\u4e5f\u662f\u5176\u6240\u6709\u9876\u70b9\u4e4b\u95f4\u90fd\u5177\u6709\u5168\u5e8f\u5173\u7cfb\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e00\u5c42\u5168\u5e8f\u5173\u7cfb\uff0c\u90a3\u4e48\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u4e5f\u5c31\u4e0d\u662f\u552f\u4e00\u7684\u4e86\u3002\n\n\u5728\u540e\u9762\u4f1a\u8c08\u5230\uff0c\u5982\u679c\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u552f\u4e00\uff0c\u90a3\u4e48\u8be5\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u540c\u65f6\u4e5f\u4ee3\u8868\u4e86\u4e00\u6761\u54c8\u5bc6\u987f\u8def\u5f84\u3002\n\n\u7b80\u5355\u8bf4\u5c31\u662f\uff0c\u5c06\u6709\u5411\u56fe\u4e2d\u7684\u9876\u70b9\u4ee5\u7ebf\u6027\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\u3002\u5373\u5bf9\u4e8e\u4efb\u4f55\u8fde\u63a5\u81ea\u9876\u70b9u\u5230\u9876\u70b9v\u7684\u6709\u5411\u8fb9uv\uff0c\u5728\u6700\u540e\u7684\u6392\u5e8f\u7ed3\u679c\u4e2d\uff0c\u9876\u70b9u\u603b\u662f\u5728\u9876\u70b9v\u7684\u524d\u9762\u3002\n\n\u62bd\u8c61\u8bf4\uff1a\u5982\u679c\u8fd9\u4e2a\u6982\u5ff5\u8fd8\u7565\u663e\u62bd\u8c61\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0d\u59a8\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u7ecf\u5178\u7684\u4f8b\u5b50\u2014\u2014\u9009\u8bfe\u3002\u6211\u60f3\u4efb\u4f55\u770b\u8fc7\u6570\u636e\u7ed3\u6784\u76f8\u5173\u4e66\u7c4d\u7684\u540c\u5b66\u90fd\u77e5\u9053\u5b83\u5427\u3002\n\n\u5047\u8bbe\u6211\u975e\u5e38\u60f3\u5b66\u4e60\u4e00\u95e8\u673a\u5668\u5b66\u4e60\u7684\u8bfe\u7a0b\uff0c\u4f46\u662f\u5728\u4fee\u8fd9\u4e48\u8bfe\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u5b66\u4e60\u4e00\u4e9b\u57fa\u7840\u8bfe\u7a0b\uff0c\u6bd4\u5982\u8ba1\u7b97\u673a\u79d1\u5b66\u6982\u8bba\uff0cC\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u7b97\u6cd5\u7b49\u7b49\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u5236\u5b9a\u9009\u4fee\u8bfe\u7a0b\u987a\u5e8f\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u6bcf\u95e8\u8bfe\u7a0b\u76f8\u5f53\u4e8e\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u9876\u70b9\uff0c\u800c\u8fde\u63a5\u9876\u70b9\u4e4b\u95f4\u7684\u6709\u5411\u8fb9\u5c31\u662f\u8bfe\u7a0b\u5b66\u4e60\u7684\u5148\u540e\u5173\u7cfb\u3002\n\n\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u662f\u90a3\u4e48\u590d\u6742\uff0c\u4ece\u800c\u5f88\u81ea\u7136\u7684\u5728\u6211\u4eec\u7684\u5927\u8111\u4e2d\u5b8c\u6210\u4e86\u3002\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u4ee5\u7b97\u6cd5\u7684\u5f62\u5f0f\u63cf\u8ff0\u51fa\u6765\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u3002   \u90a3\u4e48\u662f\u4e0d\u662f\u6240\u6709\u7684\u6709\u5411\u56fe\u90fd\u80fd\u591f\u88ab\u62d3\u6251\u6392\u5e8f\u5462\uff1f\u663e\u7136\u4e0d\u662f\u3002\u7ee7\u7eed\u8003\u8651\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u544a\u8bc9\u4f60\u5728\u9009\u4fee\u8ba1\u7b97\u673a\u79d1\u5b66\u6982\u8bba\u8fd9\u95e8\u8bfe\u4e4b\u524d\u9700\u8981\u4f60\u5148\u5b66\u4e60\u673a\u5668\u5b66\u4e60\uff0c\u4f60\u662f\u4e0d\u662f\u4f1a\u88ab\u5f04\u7cca\u6d82\uff1f\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u65e0\u6cd5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4e2d\u95f4\u5b58\u5728\u4e92\u76f8\u4f9d\u8d56\u7684\u5173\u7cfb\uff0c\u4ece\u800c\u65e0\u6cd5\u786e\u5b9a\u8c01\u5148\u8c01\u540e\u3002\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u88ab\u63cf\u8ff0\u4e3a\u5b58\u5728\u73af\u8def\u3002\n\n\u56e0\u6b64\uff0c\u4e00\u4e2a\u6709\u5411\u56fe\u80fd\u88ab\u62d3\u6251\u6392\u5e8f\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u5b83\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\n\n(DAG\uff1aDirected Acyclic Graph)\u3002\n\n\n\n------------\n\u7b80\u5355\u8bf4\u5c31\u662f\uff0c\u5c06\u6709\u5411\u56fe\u4e2d\u7684\u9876\u70b9\u4ee5\u7ebf\u6027\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\u3002\u5373\u5bf9\u4e8e\u4efb\u4f55\u8fde\u63a5\u81ea\u9876\u70b9u\u5230\u9876\u70b9v\u7684\u6709\u5411\u8fb9uv\uff0c\u5728\u6700\u540e\u7684\u6392\u5e8f\u7ed3\u679c\u4e2d\uff0c\u9876\u70b9u\u603b\u662f\u5728\u9876\u70b9v\u7684\u524d\u9762\u3002\n\n\n------------\n\u62bd\u8c61\u8bf4\uff1a\u5982\u679c\u8fd9\u4e2a\u6982\u5ff5\u8fd8\u7565\u663e\u62bd\u8c61\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0d\u59a8\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u7ecf\u5178\u7684\u4f8b\u5b50\u2014\u2014\u9009\u8bfe\u3002\u6211\u60f3\u4efb\u4f55\u770b\u8fc7\u6570\u636e\u7ed3\u6784\u76f8\u5173\u4e66\u7c4d\u7684\u540c\u5b66\u90fd\u77e5\u9053\u5b83\u5427\u3002\n\n\u5047\u8bbe\u6211\u975e\u5e38\u60f3\u5b66\u4e60\u4e00\u95e8\u673a\u5668\u5b66\u4e60\u7684\u8bfe\u7a0b\uff0c\u4f46\u662f\u5728\u4fee\u8fd9\u4e48\u8bfe\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u5b66\u4e60\u4e00\u4e9b\u57fa\u7840\u8bfe\u7a0b\uff0c\u6bd4\u5982\u8ba1\u7b97\u673a\u79d1\u5b66\u6982\u8bba\uff0cC\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u7b97\u6cd5\u7b49\u7b49\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u5236\u5b9a\u9009\u4fee\u8bfe\u7a0b\u987a\u5e8f\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u6bcf\u95e8\u8bfe\u7a0b\u76f8\u5f53\u4e8e\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u9876\u70b9\uff0c\u800c\u8fde\u63a5\u9876\u70b9\u4e4b\u95f4\u7684\u6709\u5411\u8fb9\u5c31\u662f\u8bfe\u7a0b\u5b66\u4e60\u7684\u5148\u540e\u5173\u7cfb\u3002\n\n\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u662f\u90a3\u4e48\u590d\u6742\uff0c\u4ece\u800c\u5f88\u81ea\u7136\u7684\u5728\u6211\u4eec\u7684\u5927\u8111\u4e2d\u5b8c\u6210\u4e86\u3002\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u4ee5\u7b97\u6cd5\u7684\u5f62\u5f0f\u63cf\u8ff0\u51fa\u6765\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u3002   \u90a3\u4e48\u662f\u4e0d\u662f\u6240\u6709\u7684\u6709\u5411\u56fe\u90fd\u80fd\u591f\u88ab\u62d3\u6251\u6392\u5e8f\u5462\uff1f\u663e\u7136\u4e0d\u662f\u3002\u7ee7\u7eed\u8003\u8651\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u544a\u8bc9\u4f60\u5728\u9009\u4fee\u8ba1\u7b97\u673a\u79d1\u5b66\u6982\u8bba\u8fd9\u95e8\u8bfe\u4e4b\u524d\u9700\u8981\u4f60\u5148\u5b66\u4e60\u673a\u5668\u5b66\u4e60\uff0c\u4f60\u662f\u4e0d\u662f\u4f1a\u88ab\u5f04\u7cca\u6d82\uff1f\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u65e0\u6cd5\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u4e3a\u5b83\u4e2d\u95f4\u5b58\u5728\u4e92\u76f8\u4f9d\u8d56\u7684\u5173\u7cfb\uff0c\u4ece\u800c\u65e0\u6cd5\u786e\u5b9a\u8c01\u5148\u8c01\u540e\u3002\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u88ab\u63cf\u8ff0\u4e3a\u5b58\u5728\u73af\u8def\u3002\n\n\u56e0\u6b64\uff0c\u4e00\u4e2a\u6709\u5411\u56fe\u80fd\u88ab\u62d3\u6251\u6392\u5e8f\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u5b83\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\n(DAG\uff1aDirected Acyclic Graph)\u3002\n\n------------\n**\u9884\u5907\u77e5\u8bc6**\n\n\u4e00\u4e2a\u8f83\u5927\u7684\u5de5\u7a0b\u5f80\u5f80\u88ab\u5212\u5206\u6210\u8bb8\u591a\u5b50\u5de5\u7a0b\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u5b50\u5de5\u7a0b\u79f0\u4f5c\u6d3b\u52a8(activity)\u3002\n\n\u5728\u6574\u4e2a\u5de5\u7a0b\u4e2d\uff0c\u6709\u4e9b\u5b50\u5de5\u7a0b(\u6d3b\u52a8)\u5fc5\u987b\u5728\u5176\u5b83\u6709\u5173\u5b50\u5de5\u7a0b\u5b8c\u6210\u4e4b\u540e\u624d\u80fd\u5f00\u59cb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u5b50\u5de5\u7a0b\u7684\u5f00\u59cb\u662f\u4ee5\u5b83\u7684\u6240\u6709\u524d\u5e8f\u5b50\u5de5\u7a0b\u7684\u7ed3\u675f\u4e3a\u5148\u51b3\u6761\u4ef6\u7684\uff0c\u4f46\u6709\u4e9b\u5b50\u5de5\u7a0b\u6ca1\u6709\u5148\u51b3\u6761\u4ef6\uff0c\u53ef\u4ee5\u5b89\u6392\u5728\u4efb\u4f55\u65f6\u95f4\u5f00\u59cb\u3002\n\n\u4e3a\u4e86\u5f62\u8c61\u5730\u53cd\u6620\u51fa\u6574\u4e2a\u5de5\u7a0b\u4e2d\u5404\u4e2a\u5b50\u5de5\u7a0b(\u6d3b\u52a8)\u4e4b\u95f4\u7684\u5148\u540e\u5173\u7cfb\uff0c\u53ef\u7528\u4e00\u4e2a\u6709\u5411\u56fe\u6765\u8868\u793a\uff0c\u56fe\u4e2d\u7684\u9876\u70b9\u4ee3\u8868\u6d3b\u52a8(\u5b50\u5de5\u7a0b)\uff0c\u56fe\u4e2d\u7684\u6709\u5411\u8fb9\u4ee3\u8868\u6d3b\u52a8\u7684\u5148\u540e\u5173\u7cfb\uff0c\u5373\u6709\u5411\u8fb9\u7684\u8d77\u70b9\u7684\u6d3b\u52a8\u662f\u7ec8\u70b9\u6d3b\u52a8\u7684\u524d\u5e8f\u6d3b\u52a8\uff0c\u53ea\u6709\u5f53\u8d77\u70b9\u6d3b\u52a8\u5b8c\u6210\u4e4b\u540e\uff0c\u5176\u7ec8\u70b9\u6d3b\u52a8\u624d\u80fd\u8fdb\u884c\u3002\n\n\u901a\u5e38\uff0c\u6211\u4eec\u628a\u8fd9\u79cd\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u3001\u8fb9\u8868\u793a\u6d3b\u52a8\u95f4\u5148\u540e\u5173\u7cfb\u7684\u6709\u5411\u56fe\u79f0\u505a\u9876\u70b9\u6d3b\u52a8\u7f51(Activity On Vertex network)\uff0c\u7b80\u79f0AOV\u7f51\u3002\n\n![](https://p1.ssl.qhmsg.com/t016e0776e7ec546704.png)\n\n\u4f8b\u5982\uff0c\u5047\u5b9a\u4e00\u4e2a\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u5b66\u751f\u5fc5\u987b\u5b8c\u6210\u56fe3-4\u6240\u5217\u51fa\u7684\u5168\u90e8\u8bfe\u7a0b\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u8bfe\u7a0b\u4ee3\u8868\u6d3b\u52a8\uff0c\u5b66\u4e60\u4e00\u95e8\u8bfe\u7a0b\u5c31\u8868\u793a\u8fdb\u884c\u4e00\u9879\u6d3b\u52a8\uff0c\u5b66\u4e60\u6bcf\u95e8\u8bfe\u7a0b\u7684\u5148\u51b3\u6761\u4ef6\u662f\u5b66\u5b8c\u5b83\u7684\u5168\u90e8\u5148\u4fee\u8bfe\u7a0b\u3002\n\n\u5982\u5b66\u4e60\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u5c31\u5fc5\u987b\u5b89\u6392\u5728\u5b66\u5b8c\u5b83\u7684\u4e24\u95e8\u5148\u4fee\u8bfe\u7a0b\u300a\u79bb\u6563\u6570\u5b66\u300b\u548c\u300a\u7b97\u6cd5\u8bed\u8a00\u300b\u4e4b\u540e\u3002\n\n\u5b66\u4e60\u300a\u9ad8\u7b49\u6570\u5b66\u300b\u8bfe\u7a0b\u5219\u53ef\u4ee5\u968f\u65f6\u5b89\u6392\uff0c\u56e0\u4e3a\u5b83\u662f\u57fa\u7840\u8bfe\u7a0b\uff0c\u6ca1\u6709\u5148\u4fee\u8bfe\u3002\u82e5\u7528AOV\u7f51\u6765\u8868\u793a\u8fd9\u79cd\u8bfe\u7a0b\u5b89\u6392\u7684\u5148\u540e\u5173\u7cfb\uff0c\u5219\u5982\u56fe3-5\u6240\u793a\u3002\n\n\u56fe\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u4ee3\u8868\u4e00\u95e8\u8bfe\u7a0b\uff0c\u6bcf\u6761\u6709\u5411\u8fb9\u4ee3\u8868\u8d77\u70b9\u5bf9\u5e94\u7684\u8bfe\u7a0b\u662f\u7ec8\u70b9\u5bf9\u5e94\u8bfe\u7a0b\u7684\u5148\u4fee\u8bfe\u3002\u56fe\u4e2d\u7684\u6bcf\u4e2a\u9876\u70b9\u4ee3\u8868\u4e00\u4ece\u56fe\u4e2d\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u51fa\u5404\u8bfe\u7a0b\u4e4b\u95f4\u7684\u5148\u4fee\u548c\u540e\u7eed\u7684\u5173\u7cfb\u3002\n\n\u5982\u8bfe\u7a0bC5\u7684\u5148\u4fee\u8bfe\u4e3aC2\uff0c\u540e\u7eed\u8bfe\u7a0b\u4e3aC4\u548cC6\u3002\n\n\u4e00\u4e2aAOV\u7f51\u5e94\u8be5\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5373\u4e0d\u5e94\u8be5\u5e26\u6709\u56de\u8def\uff0c\u56e0\u4e3a\u82e5\u5e26\u6709\u56de\u8def\uff0c\u5219\u56de\u8def\u4e0a\u7684\u6240\u6709\u6d3b\u52a8\u90fd\u65e0\u6cd5\u8fdb\u884c\u3002\n\n**\u7b97\u6cd5\uff1a**\n\n\u8be5\u7b97\u6cd5\u7684\u5b9e\u73b0\u5341\u5206\u76f4\u89c2\uff0c\u5173\u952e\u5728\u4e8e\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u7684\u96c6\u5408\uff1a\n\n\u6bcf\u6b21\u4ece\u8be5\u96c6\u5408\u4e2d\u53d6\u51fa(\u6ca1\u6709\u7279\u6b8a\u7684\u53d6\u51fa\u89c4\u5219\uff0c\u968f\u673a\u53d6\u51fa\u4e5f\u884c\uff0c\u4f7f\u7528\u961f\u5217/\u6808\u4e5f\u884c\uff0c\u4e0b\u540c)\u4e00\u4e2a\u9876\u70b9\uff0c\u5c06\u8be5\u9876\u70b9\u653e\u5165\u4fdd\u5b58\u7ed3\u679c\u7684List\u4e2d\u3002\n\n\u7d27\u63a5\u7740\u5faa\u73af\u904d\u5386\u7531\u8be5\u9876\u70b9\u5f15\u51fa\u7684\u6240\u6709\u8fb9\uff0c\u4ece\u56fe\u4e2d\u79fb\u9664\u8fd9\u6761\u8fb9\uff0c\u540c\u65f6\u83b7\u53d6\u8be5\u8fb9\u7684\u53e6\u5916\u4e00\u4e2a\u9876\u70b9\uff0c\u5982\u679c\u8be5\u9876\u70b9\u7684\u5165\u5ea6\u5728\u51cf\u53bb\u672c\u6761\u8fb9\u4e4b\u540e\u4e3a0\uff0c\u90a3\u4e48\u4e5f\u5c06\u8fd9\u4e2a\u9876\u70b9\u653e\u5230\u5165\u5ea6\u4e3a0\u7684\u96c6\u5408\u4e2d\u3002\u7136\u540e\u7ee7\u7eed\u4ece\u96c6\u5408\u4e2d\u53d6\u51fa\u4e00\u4e2a\u9876\u70b9\u2026\u2026\u2026\u2026   \u5f53\u96c6\u5408\u4e3a\u7a7a\u4e4b\u540e\uff0c\u68c0\u67e5\u56fe\u4e2d\u662f\u5426\u8fd8\u5b58\u5728\u4efb\u4f55\u8fb9\uff0c\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u8bf4\u660e\u56fe\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u73af\u8def\u3002\u4e0d\u5b58\u5728\u7684\u8bdd\u5219\u8fd4\u56de\u7ed3\u679cList\uff0c\u6b64List\u4e2d\u7684\u987a\u5e8f\u5c31\u662f\u5bf9\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\u3002\n\n```\npublic class KahnTopological\n{\n    private List<Integer> result;   // \u7528\u6765\u5b58\u50a8\u7ed3\u679c\u96c6\n    private Queue<Integer> setOfZeroIndegree;  // \u7528\u6765\u5b58\u50a8\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\n    private int[] indegrees;  // \u8bb0\u5f55\u6bcf\u4e2a\u9876\u70b9\u5f53\u524d\u7684\u5165\u5ea6\n    private int edges;\n    private Digraph di;\n\n    public KahnTopological(Digraph di)\n    {\n        this.di = di;\n        this.edges = di.getE();\n        this.indegrees = new int[di.getV()];\n        this.result = new ArrayList<Integer>();\n        this.setOfZeroIndegree = new LinkedList<Integer>();\n\n        // \u5bf9\u5165\u5ea6\u4e3a0\u7684\u96c6\u5408\u8fdb\u884c\u521d\u59cb\u5316\n        Iterable<Integer>[] adjs = di.getAdj();\n        for(int i = 0; i < adjs.length; i++)\n        {\n            // \u5bf9\u6bcf\u4e00\u6761\u8fb9 v -> w \n            for(int w : adjs[i])\n            {\n                indegrees[w]++;\n            }\n        }\n\n        for(int i = 0; i < indegrees.length; i++)\n        {\n            if(0 == indegrees[i])\n            {\n                setOfZeroIndegree.enqueue(i);\n            }\n        }\n        process();\n    }\n\n    private void process()\n    {\n        while(!setOfZeroIndegree.isEmpty())\n        {\n            int v = setOfZeroIndegree.dequeue();\n\n            // \u5c06\u5f53\u524d\u9876\u70b9\u6dfb\u52a0\u5230\u7ed3\u679c\u96c6\u4e2d\n            result.add(v);\n\n            // \u904d\u5386\u7531v\u5f15\u51fa\u7684\u6240\u6709\u8fb9\n            for(int w : di.adj(v))\n            {\n                // \u5c06\u8be5\u8fb9\u4ece\u56fe\u4e2d\u79fb\u9664\uff0c\u901a\u8fc7\u51cf\u5c11\u8fb9\u7684\u6570\u91cf\u6765\u8868\u793a\n                edges--;\n                if(0 == --indegrees[w])   // \u5982\u679c\u5165\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u52a0\u5165\u5165\u5ea6\u4e3a0\u7684\u96c6\u5408\n                {\n                    setOfZeroIndegree.enqueue(w);\n                }\n            }\n        }\n        // \u5982\u679c\u6b64\u65f6\u56fe\u4e2d\u8fd8\u5b58\u5728\u8fb9\uff0c\u90a3\u4e48\u8bf4\u660e\u56fe\u4e2d\u542b\u6709\u73af\u8def\n        if(0 != edges)\n        {\n            throw new IllegalArgumentException(\"Has Cycle !\");\n        }\n    }\n\n    public Iterable<Integer> getResult()\n    {\n        return result;\n    }\n}\n```\n\n![](http://my.csdn.net/uploads/201207/04/1341373589_4609.png)\n\n\u6392\u5e8f\u7ed3\u679c\uff1a\n\n2->8->0->3->7->1->5->6->9->4->11->10->12\n\n**\u4f2a\u4ee3\u7801\uff1a**\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n\nint tp[10000],r[],c[];//r\u8868\u793a\u5165\u5ea6\uff0cc\u8868\u793a\u51fa\u5ea6\uff0ctp\u8868\u793a\u6700\u540e\u751f\u6210\u7684\u62d3\u6251\u5e8f\nvector<int> G[];\nvoid tuopu()\n{\n    int cnt=0;\n    queue<int> q;\n    for(int i=1;i<=n;i++)\n    {\n        if(r[i]==0) q.push(i);\n    }\n    while(!q.empty())\n    {\n        int now=q.front();\n        q.pop();\n        tp[cnt++]=now;\n        for(int i=0;i<G[now].size();i++)\n        {\n            r[G[now][i]]--;\n            if(r[G[now][i]]==0) q.push(G[now][i]);\n        }\n    }\n}\n\nint main()\n{\n    return 0;\n}\n```\n\n[P1347 \u6392\u5e8f](https://www.luogu.org/problemnew/show/P1347)\n\n```\n/////////////\u4ee3\u7801\u6765\u81ea @\u674e\u79d1\u826f\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\nint n,m,num,sum,r[30],tmp[30];\nchar ans[30];\nbool flag[30],f,l;   //  \u8bb0\u5f55\u90a3\u4e9b\u70b9\u51fa\u73b0\u8fc7 \nqueue<int>q; \nvector<int>v[30];   // \u4e0b\u6807\u4e3a\u5143\u7d20 \u503c\u4e3a\u80fd\u5230\u7684\u5143\u7d20 \nvoid topu(int x)\n{\n    for(int i=1;i<=n;i++) tmp[i]=r[i];\n    while(!q.empty()) q.pop();\n    for(int i=1;i<=n;i++) if(r[i]==0) q.push(i),ans[++num]=(char)(i+64);   // \u627e\u5230\u4e00\u4e2a\u8d77\u70b9 \u5373\u6700\u5c0f\u7684\u5143\u7d20\n    if(num>1) return;\n    while(!q.empty())\n    {\n        int now=q.front();   // \u6b64\u65f6\u7684\u6700\u5c0f\u5143\u7d20 \n        q.pop();\n        for(int i=0;i<v[now].size();i++)\n        {\n            tmp[v[now][i]]--;   // \u8fd9\u4e2a\u5143\u7d20\u80fd\u5230\u7684\u5143\u7d20\u7684\u5165\u5ea6\u51cf\u5c0f   \n            if(tmp[v[now][i]]==0) q.push(v[now][i]),ans[++num]=(char)(v[now][i]+64),sum++;\n            if(sum>1) {sum=0;return;}\n            if(num==n)\n            {\n                cout<<\"Sorted sequence determined after \"<<x<<\" relations: \";\n                for(int k=1;k<=num;k++) cout<<ans[k];\n                cout<<\".\";\n                l=true;\n                return;             \n            }\n        }\n        sum=0;\n    } \n}\nvoid dfs(int x,int i)    //  x\u662f\u5f53\u524d\u7684\u8d77\u70b9 i\u662f\u7b2c\u51e0\u6b65\u8be2\u95ee \n{\n    if(flag[x]) {cout<<\"Inconsistency found after \"<<i<<\" relations.\";f=true;return;}\n    flag[x]=true;\n    for(int j=0;j<v[x].size();j++) \n    {\n        dfs(v[x][j],i); \n        if(f) return;\n    }\n    flag[x]=false;\n}\nint main()\n{\n    cin>>n>>m;      //  n\u4e2a\u5143\u7d20  m\u4e2a\u5173\u7cfb \n    char a,b,c;     //  \u5c06A B C ... \u4f9d\u6b21\u8f6c\u6362\u4e3a 1 2 3 ... \n    for(int i=1;i<=m;i++)\n    {\n        cin>>a>>b>>c;  // \u8868\u793a a<c \u5373a\u53ef\u4ee5\u5230c \n        r[c-64]++;     // \u5165\u5ea6\u589e\u52a0 \u8868\u793a\u4e0b\u6807\u5143\u7d20\u7684\u5165\u5ea6 \n        v[a-64].push_back(c-64);   // \u88c5\u4e0b\u6807\u53ef\u4ee5\u5230\u7684\u5143\u7d20\n        for(int j=1;j<=n;j++)\n        {\n            dfs(j,i);\n            if(f) return 0;\n        }\n        topu(i);\n        num=0;\n        if(l) return 0;\n    }\n    if(!l) cout<<\"Sorted sequence cannot be determined.\";\n    return 0;\n}\n```\n\u90e8\u5206\u6458\u81ea dm_vincent \u7684CSDN \u535a\u5ba2\n\u6765\u81ea\u7801\u4e91\n",
        "postTime": 1538711498,
        "uid": 107307,
        "name": "\u5f7c\u5cb8\u6731\u7802",
        "ccfLevel": 0,
        "title": "\u62d3\u6251\u6392\u5e8f\u2014\u2014\u8bb2\u89e3"
    }
]