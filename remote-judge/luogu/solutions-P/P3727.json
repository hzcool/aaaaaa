[
    {
        "content": "##\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\n\n**\u4e00\u9897\u6811\u4e0a\u6bcf\u4e2a\u70b9\u6709\u6743\u503c\uff08SG\u51fd\u6570\u503c\uff09\uff0c\u95ee\u80fd\u5426\u9009\u62e9\u4e00\u6761\u94fe\uff0c\u4f7fSG\u51fd\u6570\u503c\u5f02\u6216\u548c\u4e3a\u96f6\u3002**\n\n\n##\u9884\u5907\u77e5\u8bc6\n\n\u4e0d\u4f1aSG\u51fd\u6570\u7684\u540c\u5b66\u8bf7\u79fb\u6b65\u8fd9\u91cc -> [ydc\u8001\u5e08\u7684\u535a\u5ba2](http://ydcydcy1.blog.163.com/blog/static/216089040201342412717440/)\n\n\n##\u9898\u89e3\n\n\u76f4\u63a5\u653e\u795e\u7287\u540c\u5b66[@loveyayoi](http://loveyayoi.net/blog/)\u7684\u9898\u89e3:\n\n\n- \u77e5\u8bc6\u9700\u6c42\uff1asg\u51fd\u6570\uff0c\u70b9\u5206\u6cbb\n\n- \u505a\u8fc7\u4e00\u4e9b\u70b9\u5206\u7684\u9898\u7684\u540c\u5b66\u5e94\u8be5\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u9053\u70b9\u5206\n\n- \u505a\u8fc7\u4e00\u4e9b\u535a\u5f08\u95ee\u9898\u7684\u540c\u5b66\u5e94\u8be5\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u9053SG\u51fd\u6570\u535a\u5f08\n\n- \u6211\u4eec\u5206\u522b\u8ba8\u8bban\uff0ck\uff0cw\u4e09\u4e2a\u6761\u4ef6\n\n\n## n\n- \u5bf9\u4e8en<=1000\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u66b4\u529bDFS\u5373\u53ef\n\n- \u5bf9\u4e8en<=30000\u7684\u60c5\u51b5\uff0c\u70b9\u5206\u6cbb+set/hash\n\n\n## k\n- \u901a\u8fc7\u6253\u8868\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b\n\n- k=1\u65f6\u5c31\u662f\u666e\u901a\u7684nim\u6e38\u620f\uff0c$sg(x)=x$\n\n- k=2\u65f6\u901a\u8fc7\u6253\u8868\u53ef\u4ee5\u53d1\u73b0\u660e\u663e\u7684\u89c4\u5f8b\uff0c\u5982\u679cs\u662f\u5076\u6570\uff0csg\u51fd\u6570\u6709\u957f\u5ea6\u4e3as+1\u7684\u5faa\u73af\u8282\uff0c\u503c\u4e3a0,1,0,1,0,1,0,1....,2\uff0c\u5982\u679cs\u662f\u5947\u6570\uff0c\u90a3\u4e48$sg(x)=x\\ mod\\ 2$\n\n- k=3\u65f6\uff0c\u6253\u8868\u4e5f\u53ef\u4ee5\u770b\u51fa\u89c4\u5f8b\uff0c$sg(x)=\\lfloor \\frac{x}{s} \\rfloor$\n\n```cpp\n- k=4\u65f6\uff0c\u6253\u8868\u5f97\u77e5\uff0c\n$$sg(x)=\n\\begin{cases}\n0 & \\text{ , } x= 0 \\\\\nx & \\text{ , } x\\equiv 1,2 (mod\\ 4) \\\\\nx+1 & \\text{ , } x\\equiv 3 (mod\\ 4) \\\\\nx-1 & \\text{ , } x\\equiv 0 (mod\\ 4)\n\\end{cases}\n```\n$$\n\n## w\n\n- w<=1000\uff0c\u66b4\u529b\u7b5b\u51fasg\u51fd\u6570\u5373\u53ef\n\n- w<=1e9\uff0c\u627e\u89c4\u5f8bO(1)\u6c42sg\u51fd\u6570\n\n## \u590d\u6742\u5ea6\n\n$O(T N log N)$\uff0c\u5047\u8bbehash\u8fbe\u5230\u671f\u671b\u590d\u6742\u5ea6$O(1)$\n\n\n\u4ee3\u7801:\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=30005, MAXB=1e7;\nchar BUF[MAXB], *cp=BUF;\nvoid rd(int &x){\n    x=0;\n    while(*cp<'0'||'9'<*cp) cp++;\n    while('0'<=*cp&&*cp<='9') x=x*10+*cp-'0', cp++;\n}\nint ne, hs, ok, nt, T, N, K, S;\nint w[MAXN], sz[MAXN], vis[MAXN], tp[MAXN];\nstruct Edge{Edge *nxt; int to;}E[MAXN<<1], *hd[MAXN];\nvoid adde(int u, int v){\n    E[ne].to=v; E[ne].nxt=hd[u]; hd[u]=&E[ne++];\n    E[ne].to=u; E[ne].nxt=hd[v]; hd[v]=&E[ne++];\n}\nint sg1(int x){return x;}\nint sg2(int x){return (x+1)%(S+1)?x&1:2;}\nint sg3(int x){return x/S;}\nint sg4(int x){\n    switch(x%4){\n        case 0: return x-1;\n        case 3: return x+1;\n        default: return x;\n    }\n}\nvoid init(){\n    memset(hd,0,sizeof(hd)); ne=0;\n    memset(vis,0,sizeof(vis));\n}\nint gs(int u, int p){\n    sz[u]=1;\n    for(Edge *e=hd[u]; e; e=e->nxt){\n        int v=e->to;\n        if(v!=p&&!vis[v]) sz[u]+=gs(v,u);\n    }\n    return sz[u];\n}\nint gg(int u, int p){\n    for(Edge *e=hd[u]; e; e=e->nxt){\n        int v=e->to;\n        if(v!=p&&!vis[v]&&sz[v]>=hs) return gg(v,u);\n    }\n    return u;\n}\nint tt[MAXN];\nvoid dfs(int u, int p, int s){\n    tt[nt]=u;tp[nt++]=s;\n    for(Edge *e=hd[u]; e; e=e->nxt){\n        int v=e->to;\n        if(v!=p&&!vis[v]) dfs(v,u,s^w[v]);\n    }\n}\nstruct Hash{\n    static const int P1=100003, P2=100069;\n    inline int h1(int x){return x%P1;}\n    inline int h2(int x){return x%P2;}\n    int t1[P1], t2[P2], st[MAXN], top;\n    Hash(){\n        memset(t1,-1,sizeof(t1));\n        memset(t2,-1,sizeof(t2));\n    }\n    int find(int x){return t1[h1(x)]==x||t2[h2(x)]==x;}\n    void insert(int x){ if(find(x)) return;\n        int h=h2(x); st[top++]=x;\n        if(t2[h]==-1) t2[h]=x;\n        else while(~x){\n            h=h1(x); swap(x,t1[h]);\n            if(x==-1) return;\n            h=h2(x); swap(x,t2[h]);\n        }\n    }\n    void del(int x){\n        if(t1[h1(x)]==x) t1[h1(x)]=-1;\n        else t2[h2(x)]=-1;\n    }\n    void clear(){ while(top) del(st[--top]);}\n}H;\nvoid dc(int u){\n    hs=gs(u,0)>>1; int g=gg(u,0); vis[g]=1; H.insert(0);\n    for(Edge *e=hd[g]; e; e=e->nxt){\n        int v=e->to;\n        if(!vis[v]){\n            nt=0; dfs(v,0,w[v]);\n            for(int i=0; i<nt; ++i){\n                if(H.find(w[g]^tp[i])){ok=1;break;}\n            }\n            for(int i=0; i<nt; ++i) H.insert(tp[i]);\n        }\n    }\n    H.clear();\n    for(Edge *e=hd[g]; e&&!ok; e=e->nxt) if(!vis[e->to]) dc(e->to);\n}\nint main(){\n    fread(BUF, 1, MAXB, stdin);\n    rd(T);\n    while(T--){\n        init(); rd(N);\n        for(int i=1,u,v; i<N; ++i) rd(u),rd(v),adde(u,v);\n        for(int i=1; i<=N; ++i) rd(w[i]);\n        rd(K); int (*sg)(int);\n        if(K==1) sg=sg1;\n        else if(K==2) rd(S),sg=sg2;\n        else if(K==3) rd(S),sg=sg3;\n        else sg=sg4;\n        ok=0;\n        for(int i=1; i<=N; ++i) if(!(w[i]=sg(w[i]))) ok=1;\n        if(!ok) dc(1);\n        puts(ok?\"Mutalisk ride face how to lose?\":\"The commentary cannot go on!\");\n    }\n    return 0;\n}\n```",
        "postTime": 1492856899,
        "uid": 15326,
        "name": "will7101",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3727 \u3010\u66fc\u54c8\u987f\u8ba1\u5212E\u3011"
    },
    {
        "content": "[$\\mathfrak{View\\space it\\space on\\space my\\space Blog}$](https://blog.seniorious.cc/2020/luogu-3727/)\n\n## \u5206\u6790\n\u53d1\u73b0\u5b9e\u8d28\u4e0a\u662f\u628a\u6811\u4e0a\u4e00\u6bb5\u94fe\u62c9\u4e0b\u6765\u73a9 Nim \u6e38\u620f\uff0c\u82e5\u94fe\u4e0a $sg$ \u51fd\u6570\u7684\u5f02\u6216\u548c\u4e3a $0$ \u5219\u5148\u624b\u5fc5\u8d25\uff0c\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\u70b9\u5206\u6cbb\u627e\u51fa\u6811\u4e0a\u5f02\u6216\u548c\u4e3a $0$ \u7684\u94fe\uff0c\u7528\u81ea\u5df1\u559c\u6b22\u7684 Hash \u65b9\u5f0f\u5373\u53ef\n\n## SG \u51fd\u6570\n1. $k=1$\uff1a\u539f\u59cb\u7684 Nim \u6e38\u620f $sg(x)=x$\n2. $k=2$\uff1a\u5206\u4e24\u79cd\u60c5\u51b5\uff0c(1) $s$ \u4e3a\u5947\u6570\uff0c\u663e\u7136 $s^k$ \u5747\u4e3a\u5947\u6570\uff0c\u6545\u7b80\u5355\u5f52\u7eb3\u53ef\u5f97 $sg(x)=x\\bmod 2$\uff1b(2) $s$ \u4e3a\u5076\u6570\uff0c\u627e\u89c4\u5f8b\u5f97\u6709\u957f\u4e3a $(s+1)$ \u7684\u5faa\u73af\u8282\uff0c\u5927\u6982\u957f\u8fd9\u6837 $\\overbrace{0101\\cdots01}^{s}2$\uff0c\u6709 $1=(s+1)\\times0+1,s=(s+1)\\times1-1,s^2=(s+1)\\times(s-1)+1,s^3=(s+1)\\times(s^2-s+1)-1\\cdots$ \u4e8e\u662f\u5bf9\u5faa\u73af\u8282\u65bd\u52a0\u5f52\u7eb3\uff0c\u6bcf\u4e2a\u70b9\u53ef\u770b\u505a\u524d\u540e\u4e24\u4e2a\u70b9\u7684 $\\operatorname{mex}$ \u5373\u53ef\u5f97\u8bc1\n3. $k=3$\uff1a$sg(x)=\\lfloor\\frac{x}{s}\\rfloor$ \u8bc1\u660e\u5927\u6982\u662f\u5bf9\u5faa\u73af\u8282\u65bd\u52a0\u5f52\u7eb3\uff0c\u6bcf\u4e2a\u5faa\u73af\u8282\u53ef\u4ee5\u5230\u8fbe\u6240\u6709\u4e4b\u524d\u7684\u5faa\u73af\u8282\uff0c\u5373\u53ef\u5f97\u8bc1\n4. $k=4$\uff1a$sg(x)=\\begin{cases}0&(x=0)\\\\x&(x\\equiv1,2\\pmod4)\\\\x+1&(x\\equiv3\\pmod4)\\\\x-1&(x\\equiv4\\pmod4)\\end{cases}$ \u8bc1\u660e\u5927\u6982\u662f\u5148 $4$ \u4e2a\u5206\u4e00\u5757\u5e76\u5bf9\u5757\u65bd\u52a0\u5f52\u7eb3\uff0c\u518d\u5bf9\u6bcf\u4e00\u79cd\u5355\u72ec\u8bc1\u660e  \n\u9996\u5148\u5bf9\u4e8e\u4e00\u4e2a\u5b8c\u6574\u7684\u5757 $x=4k+1\\sim 4k+4$ \u5b83\u7684 $sg(x)$ \u53d6\u904d\u4e86 $4k+1\\sim4k+4$\uff0c\u6240\u4ee5\u76f4\u63a5\u53d6\u7684 $sg$ \u503c\u53ef\u4ee5\u53d6\u904d $0\\sim 4k$  \n\u4ee5\u4e0b $1,2,3,4$ \u5747\u4e3a $\\bmod\\ 4$ \u610f\u4e49\u4e0b\u7684  \n\u8003\u8651 $1$ \u5206\u6210 $1+0$ \u65f6\u5f02\u6216\u503c\u4e3a $1\\oplus3=2\\neq1$\uff0c$2+3$ \u65f6\u5f02\u6216\u503c\u4e3a $2\\oplus0=2\\neq1$ \u6545\u65e0\u6cd5\u5c06 $1$ \u5206\u89e3\u5f97\u5230\u81ea\u8eab\uff0c\u53c8\u56e0\u4e3a\u80fd\u76f4\u63a5\u53d6\u5230 $0\\sim4k$ \u6545 $sg(4k+1)=4k+1$  \n$2$ \u4e5f\u65e0\u6cd5\u5206\u89e3\uff0c\u8bc1\u660e\u662f\u7c7b\u4f3c\u7684\uff0c\u53c8\u56e0\u4e3a\u80fd\u76f4\u63a5\u53d6\u5230 $0\\sim4k+1$ \u6545 $sg(4k+2)=4k+2$  \n$3$ \u53ef\u4ee5\u76f4\u63a5\u53d6\u5230 $0\\sim4k+2$\uff0c\u53c8\u53ef\u4ee5\u5206\u89e3\u4e3a $4k+2$ \u548c $1$\uff0c\u5373 $(4k+2)\\oplus1=4k+3$\uff0c\u6545 $sg(4k+3)=4k+4$  \n$4$ \u53ef\u4ee5\u76f4\u63a5\u53d6\u5230 $0\\sim4k+2$ \u548c $4k+4$\uff0c\u7c7b\u4f3c $1,2$ \u7684\u60c5\u51b5 $4$ \u65e0\u6cd5\u5206\u89e3\u4e3a $4k+3$ \u6545 $sg(4k+4)=4k+3$\n\n## \u4ee3\u7801\n```cpp\nconstexpr int N = 30005;\nconstexpr int M = 60005;\n\nvoid add(int u, int v);\nvoid getsiz(int u, int fa);\nvoid getrot(int u, int fa);\nvoid getp(int u, int fa, int len);\nvoid solve(int u);\nvoid dfs(int u);\n\nint hed[N], nxt[M], to[M], id;\nint siz[N];\nint asz, nsz, rot;\nint dis[N], tot;\nbool vis[N];\nint val[N], sg[N];\nbool ans;\nint n;\n\nint main() {\n  int T;\n  read(T);\n  while (T--) {\n    memset(hed, 0, sizeof(hed));\n    id = 0;\n    ans = false;\n    memset(vis, false, sizeof(vis));\n    read(n);\n    for (int i = 1; i < n; ++i) {\n      int u, v;\n      read(u), read(v);\n      add(u, v), add(v, u);\n    }\n    for (int i = 1; i <= n; ++i) {\n      read(val[i]);\n    }\n    int k;\n    read(k);\n    if (k == 1) {\n      for (int i = 1; i <= n; ++i) {\n        sg[i] = val[i];\n      }\n    }\n    if (k == 2) {\n      int s;\n      read(s);\n      for (int i = 1; i <= n; ++i) {\n        if (val[i] % (s + 1) == s) {\n          sg[i] = 2;\n        } else {\n          sg[i] = val[i] % (s + 1) % 2;\n        }\n      }\n    }\n    if (k == 3) {\n      int s;\n      read(s);\n      for (int i = 1; i <= n; ++i) {\n        sg[i] = val[i] / s;\n      }\n    }\n    if (k == 4) {\n      for (int i = 1; i <= n; ++i) {\n        if (!val[i]) {\n          sg[i] = 0;\n        } else {\n          if (val[i] % 4 == 0) {\n            sg[i] = val[i] - 1;\n          } else {\n            if (val[i] % 4 == 3) {\n              sg[i] = val[i] + 1;\n            } else {\n              sg[i] = val[i];\n            }\n          }\n        }\n      }\n    }\n    getsiz(1, 0);\n    asz = siz[1];\n    nsz = iinf;\n    rot = 0;\n    getrot(1, 0);\n    dfs(rot);\n    if (ans) {\n      puts(\"Mutalisk ride face how to lose?\");\n    } else {\n      puts(\"The commentary cannot go on!\");\n    }\n  }\n  return 0;\n}\n\nvoid add(int u, int v) {\n  nxt[++id] = hed[u];\n  hed[u] = id;\n  to[id] = v;\n}\nvoid getsiz(int u, int fa) {\n  siz[u] = 1;\n  for (int i = hed[u]; i; i = nxt[i]) {\n    int v = to[i];\n    if (v != fa && !vis[v]) {\n      getsiz(v, u);\n      siz[u] += siz[v];\n    }\n  }\n}\nvoid getrot(int u, int fa) {\n  int maxi = 0;\n  for (int i = hed[u]; i; i = nxt[i]) {\n    int v = to[i];\n    if (v != fa && !vis[v]) {\n      getrot(v, u);\n      maxi = max(maxi, siz[v]);\n    }\n  }\n  maxi = max(maxi, asz - siz[u]);\n  if (maxi < nsz) {\n    nsz = maxi;\n    rot = u;\n  }\n}\nvoid getp(int u, int fa, int len) {\n  len ^= sg[u];\n  dis[++tot] = len;\n  for (int i = hed[u]; i; i = nxt[i]) {\n    int v = to[i];\n    if (v != fa && !vis[v]) {\n      getp(v, u, len);\n    }\n  }\n}\nvoid solve(int u) {\n  if (!sg[u]) {\n    ans = true;\n  }\n  if (ans) {\n    return;\n  }\n  std::unordered_set<int> S;\n  S.insert(sg[u]);\n  for (int i = hed[u]; i; i = nxt[i]) {\n    int v = to[i];\n    if (!vis[v]) {\n      tot = 0;\n      getp(v, u, 0);\n      for (int j = 1; j <= tot; ++j) {\n        if (S.count(dis[j])) {\n          ans = true;\n          return;\n        }\n      }\n      for (int j = 1; j <= tot; ++j) {\n        S.insert(dis[j] ^ sg[u]);\n      }\n    }\n  }\n}\nvoid dfs(int u) {\n  vis[u] = true;\n  solve(u);\n  for (int i = hed[u]; i; i = nxt[i]) {\n    int v = to[i];\n    if (!vis[v]) {\n      getsiz(v, u);\n      asz = siz[v];\n      nsz = iinf;\n      rot = 0;\n      getrot(v, u);\n      dfs(rot);\n    }\n  }\n}\n```\n",
        "postTime": 1605195899,
        "uid": 25251,
        "name": "moongazer",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3727 \u3010\u66fc\u54c8\u987f\u8ba1\u5212E\u3011"
    },
    {
        "content": "\u5f02\u6216\u6709\u6027\u8d28\uff01\u6240\u4ee5\u4e0d\u7528\u70b9\u5206\u6cbb\uff01\uff011\n\n\u6c42 SG \u51fd\u6570\u7684\u90e8\u5206\u5c31\u662f\u6253\u8868\u627e\u89c4\u5f8b\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u6ce8\u610f\u5230\u4e24\u4e2a\u76f8\u540c\u7684\u6570\u5f02\u6216\u5c31\u4f1a\u53d8\u6210 $0$\u3002\n\n\u6240\u4ee5\u73b0\u5728\u8981\u6c42\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\u4f7f $d_u\\oplus d_v\\oplus w_{lca(u,v)}$ \u7b49\u4e8e $0$\u3002\u5176\u4e2d $d_u$ \u8868\u793a $u$ \u5230\u6839\u8def\u5f84\u5f02\u6216\u548c\u3002$lca(u,v)$ \u4e0a\u65b9\u7684\u90e8\u5206\u521a\u597d\u62b5\u6d88\u6389\u3002\n\n\u7528\u4e00\u4e2a unordered_set \u5b58\u50a8 $d_u$\u3002\n\n\u4ece\u6839\u8282\u70b9\u5f00\u59cb dfs\uff0c\u8bbf\u95ee\u5230\u8fb9 $(u,v)$ \u65f6\uff0c\u5148\u904d\u5386 $v$ \u7684 unordered_set \u4e2d\u6bcf\u4e2a\u5143\u7d20 $j$\uff0c\u5224\u65ad $u$ \u7684unordered_set $s_u$ \u4e2d\u662f\u5426\u5b58\u5728 $j\\oplus w_u$\uff0c\u82e5\u5b58\u5728\u5219\u6709\u89e3\u3002\n\n\u7136\u540e\u5c06 $s_v$ \u5411 $s_u$ \u5408\u5e76\uff0c\u66b4\u529b\u63d2\u5165\u5c31\u884c\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u662f $O(n^2)$\u3002\n\n\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u4f18\u5316\uff0c\u5982\u679c $size_{s_u}<size_{s_v}$\uff0c\u5c31\u4ea4\u6362 $s_u,s_v$\uff0c\u8fd9\u6837\u5c31\u662f $O(n\\log n)$\u3002\n\n\u590d\u6742\u5ea6\u548c\u70b9\u5206\u6cbb\u4e00\u6837\uff0c\u4f46\u4ee3\u7801\u975e\u5e38\u77ed\uff01\uff011\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=30009;\nbasic_string<int>g[N],_;\nunordered_set<int>h[N];\nint w[N],b;\nvoid dfs(int x,int y,int z){\n\th[x]={z^=w[x]};\n\tfor(int i:g[x])if(i!=y){\n\t\tif(dfs(i,x,z),h[x].size()<h[i].size())swap(h[x],h[i]);//\u542f\u53d1\u5f0f\u5408\u5e76\n\t\tfor(int j:h[i])if(h[x].count(j^w[x]))b=1;\n\t\tfor(int j:h[i])h[x].insert(j); \n\t}\n}\nint main(){\n\tint T,n,i,j,k,l,s;\n\tfor(scanf(\"%d\",&T);T--;dfs(1,b=0,0),puts(b?\"Mutalisk ride face how to lose?\":\"The commentary cannot go on!\")){\n\t\tfor(scanf(\"%d\",&n),fill(g,g+n+1,_),i=1;i<n;++i)scanf(\"%d%d\",&j,&k),g[j]+=k,g[k]+=j;\n\t\tfor(i=1;i<=n;++i)scanf(\"%d\",w+i);\n\t\tif(scanf(\"%d\",&k),k==2||k==3)scanf(\"%d\",&s);\n\t\tif(k>1)for(i=1;i<=n;++i)l=w[i],w[i]=k==2?(s%2?l%2:((j=l%(s+1))==s?2:j%2)):(k==3?l/s:((j=l%4)?(j==3?l+1:l):(l?l-1:0)));//\u6c42SG\u51fd\u6570\u503c\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1619436050,
        "uid": 221955,
        "name": "panyf",
        "ccfLevel": 10,
        "title": "P3727 \u66fc\u54c8\u987f\u8ba1\u5212E\uff08\u542f\u53d1\u5f0f\u5408\u5e76\uff09"
    }
]