[
    {
        "content": "\u4ee5\u6392\u540d\u6216\u7f16\u53f7\u5efa\u6811\u90fd\u4e0d\u80fd\u5b8c\u7f8e\u6ee1\u8db3\u6240\u6709\u64cd\u4f5c\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u540c\u65f6\u4ee5\u6392\u540d\u548c\u7f16\u53f7\u4e3a\u5e8f\u5efa\u7acb\u4e24\u68f5\u5e73\u8861\u6811$T_1$, $T_2$\u3002\n\n$T_1$\u4ee5\u6392\u540d\u4e3a\u5e8f\uff0c$T_2$\u4ee5\u7f16\u53f7\u4e3a\u5e8f\uff0c$T_2$\u4e2d\u4fdd\u5b58\u8fd9\u4e2a\u7f16\u53f7\u5728$T_1$\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\u3002\n\n\u64cd\u4f5c\u4e00\uff0c\u5728$T_2$\u4e2d\u627e\u5230\u7f16\u53f7\uff0c\u56de\u5230$T_1$\u4e2d\u7b97\u7b54\u6848\uff0c\u7136\u540e\u76f4\u63a5\u66f4\u65b0$T_2$\u5373\u53ef\u3002\n\n\u5176\u4ed6\u64cd\u4f5c\u7c7b\u4f3c\u3002\n\n\u53e6\u5916\u6b64\u9898\u6700\u591a\u6709$10^8$\u540d\u7528\u6237\uff0c\u4f46\u53ea\u6709$10^5$\u4e2a\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u4e00\u6bb5\u7528\u6237\u5408\u6210\u4e00\u4e2a\u70b9\uff0c\u8bbf\u95ee\u5230\u5176\u4e2d\u65f6\u518d\u5206\u88c2\u3002\n\n$T_2$\u7684\u529f\u80fd\u5355\u4e00\uff0c\u7528std::map\u5c31\u597d\u4e86\u3002~~\u6211\u4f1a\u968f\u4fbf\u544a\u8bc9\u4f60\u4eec\u6211\u624b\u5199\u7684map\u8fd8\u6ca1\u6709STL\u5feb\u5417~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAX = 330000;\nmap<int, int> f;\nint n, m, cnt, ans, root;\nint read()\n{\n    int x = 0, f = 1; char ch = getchar();\n    while (ch > '9' || ch  < '0') { if (ch == '-') f = -1; ch = getchar(); }\n    while (ch <= '9' && ch >= '0') { x = x * 10 + ch - '0'; ch = getchar(); }\n    return x * f;\n}\nstruct Node\n{\n    int fa, son[2], siz, l, r;\n} T[MAX];\nvoid pushup(int x)\n{\n    T[x].siz = T[T[x].son[0]].siz + T[T[x].son[1]].siz + T[x].r - T[x].l + 1;\n}\nvoid rotate(int x)\n{\n    int y = T[x].fa, z = T[y].fa;\n    int op = T[y].son[1] == x;\n    T[x].fa = z;\n    if (z) T[z].son[T[z].son[1] == y] = x;\n    T[y].son[op] = T[x].son[!op];\n    T[T[y].son[op]].fa = y;\n    T[y].fa = x;\n    T[x].son[!op] = y;\n    pushup(y);\n}\nvoid splay(int x, int to)\n{\n    while (T[x].fa != to)\n    {\n        int y = T[x].fa, z = T[y].fa;\n        if (z != to)\n        {\n            if ((T[z].son[0] == y) ^ (T[y].son[0] == x)) rotate(x);\n            else rotate(y);\n        } rotate(x);\n    }\n    pushup(x); \n    if (to == 0) root = x;\n}\nint query(int x)\n{\n    splay(x, 0);\n    return T[x].siz - T[T[x].son[1]].siz;\n}\nint getkth(int k)\n{\n    int x = root;\n    while (k)\n    {\n        int sum = T[T[x].son[0]].siz + T[x].r - T[x].l + 1;\n        if (T[T[x].son[0]].siz < k && k <= sum)\n        {\n            k -= T[T[x].son[0]].siz;\n            break;\n        }\n        if (sum < k)\n        {\n            k -= sum;\n            x = T[x].son[1];\n        }\n        else x = T[x].son[0];\n    }\n    return T[x].l + k - 1;\n}\nvoid erase(int x)\n{\n    int pre = T[x].son[0], nxt = T[x].son[1];\n    while (T[pre].son[1]) pre = T[pre].son[1];\n    while (T[nxt].son[0]) nxt = T[nxt].son[0];\n    if (!pre && !nxt) root = 0;\n    else if (!pre)\n    {\n        splay(nxt, root);\n        root = nxt; T[root].fa = 0;\n        T[x].son[0] = T[x].son[1] = 0;\n        T[x].siz = 1;\n    }\n    else if (!nxt)\n    {\n        splay(pre, root);\n        root = pre; T[root].fa = 0;\n        T[x].son[0] = T[x].son[1] = 0;\n        T[x].siz = 1;\n    }\n    else\n    {\n        splay(pre, 0);\n        splay(nxt, pre);\n        T[nxt].son[0] = T[x].fa = 0;\n        T[x].siz = 1;\n        pushup(nxt); pushup(pre);\n    }\n}\nvoid push_front(int x)\n{\n    if (!root) { root = x; return ; }\n    int fa_ = root;\n    while (T[fa_].son[0]) T[fa_].siz ++, fa_ = T[fa_].son[0];\n    T[fa_].siz ++;\n    T[fa_].son[0] = x;\n    T[x].fa = fa_;\n    splay(x, 0);\n}\nvoid push_back(int x)\n{\n    if (!root) { root = x; return ; }\n    int fa_ = root;\n    while (T[fa_].son[1]) T[fa_].siz ++, fa_ = T[fa_].son[1];\n    T[fa_].siz ++;\n    T[fa_].son[1] = x;\n    T[x].fa = fa_;\n    splay(x, 0);\n}\nvoid split(int x, int id)\n{\n    int L = T[x].l, R = T[x].r, ls, rs;\n    if (L == R) return ;\n    if (L == id)\n    {\n        rs = ++cnt;\n        f[R] = rs; f[id] = x;\n        T[rs].son[1] = T[x].son[1];\n        T[T[rs].son[1]].fa = rs;\n        T[x].son[1] = rs; T[rs].fa = x;\n        T[rs].l = L + 1; T[rs].r = R;\n        T[x].r = L;\n        pushup(rs); pushup(x);\n    }\n    else if (R == id)\n    {\n        ls = ++cnt;\n        f[R - 1] = ls; f[id] = x;\n        T[ls].son[0] = T[x].son[0];\n        T[T[ls].son[0]].fa = ls;\n        T[x].son[0] = ls; T[ls].fa = x;\n        T[ls].l = L; T[ls].r = R - 1;\n        T[x].l = R;\n        pushup(ls); pushup(x);\n    }\n    else\n    {\n        ls = ++cnt; rs = ++cnt;\n        f[id] = x; f[id - 1] = ls; f[R] = rs;\n        T[ls].son[0] = T[x].son[0]; T[rs].son[1] = T[x].son[1];\n        T[T[ls].son[0]].fa = ls; T[T[rs].son[1]].fa = rs;\n        T[x].son[0] = ls; T[x].son[1] = rs; T[ls].fa = T[rs].fa = x;\n        T[x].l = T[x].r = id;\n        T[ls].l = L; T[ls].r = id - 1;\n        T[rs].l = id + 1; T[rs].r = R;\n        pushup(ls); pushup(rs); pushup(x);\n    }\n    splay(x, 0);\n}\nvoid init()\n{\n    root = cnt = 1;\n    T[root].l = 1, T[root].r = n;\n    T[root].siz = n;\n    f[n] = 1;\n}\nint main()\n{\n    n = read(); m = read();\n    init();\n    while (m --)\n    {\n        int opt = read();\n        if (opt == 1)\n        {\n            int oid = read() - ans, nid = read() - ans;\n            int x = f.lower_bound(oid) -> second;\n            split(x, oid);\n            ans = query(x);\n            T[x].l = T[x].r = nid; f[nid] = x;\n            printf(\"%d\\n\", ans);\n        }\n        else if (opt == 2)\n        {\n            int id = read() - ans;\n            int x = f.lower_bound(id) -> second;\n            split(x, id);\n            ans = query(x);\n            erase(x);\n            push_front(x);\n            printf(\"%d\\n\", ans);\n        }\n        else if (opt == 3)\n        {\n            int id = read() - ans;\n            int x = f.lower_bound(id) -> second;\n            split(x, id);\n            ans = query(x);\n            erase(x);\n            push_back(x);\n            printf(\"%d\\n\", ans);\n        }\n        else if (opt == 4)\n        {\n            int k = read() - ans;\n            ans = getkth(k);\n            printf(\"%d\\n\", ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1515157980,
        "uid": 37070,
        "name": "Ameyax",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u6c34\u6c34\u6c34\uff0cnoip2017\u5217\u961f\u5f31\u5316\u7248\uff1f\n\n\u7b80\u5316\u7248\u9898\u610f\uff1a\u5199\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u67e5\u8be2\u7b2c $k$ \u5927\u3002\n\n~~\uff08\u5f53\u7136\u539f\u9898\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff09~~\n\n\u4e0d\u8fc7\u5e73\u8861\u6811\u6216\u8005\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u90fd\u662f\u53ef\u4ee5\u7684\u3002\n\n\u7136\u540e\u7528\u4e00\u4e2a $map$\uff08\u6216\u8005\u54c8\u5e0c\u8868\uff09\u5b58\u4e00\u4e0b\u6bcf\u4e2a\u7f16\u53f7\u5728\u7ebf\u6bb5\u6811\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5728\u7528\u53e6\u4e00\u4e2a\u5b58\u4e00\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u662f\u54ea\u4e2a\u7f16\u53f7\u5c31\u6ca1\u4e86\u3002\n\n\uff08\u6362\u6210 $unordered$_$map$\u4e4b\u540e\u53cd\u800c\u66f4\u6162\u4e86\n\n\u4ee3\u7801\uff1a\u6743\u503c\u7ebf\u6bb5\u6811\u5199\u6cd5\uff0c**\u4ee3\u7801\u5f88\u77ed**\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100005\n#define M N*33 \n#define mid ((l+r)>>1)\n#define inf 100100005\nusing namespace std;\n\ninline void rd(int &X){\n    X=0;int w=0;char ch=0;\n    while(!isdigit(ch))w|=ch=='-',ch=getchar();\n    while( isdigit(ch))X=(X<<3)+(X<<1)+(ch^48),ch=getchar();\n    X=w?-X:X;\n}\n\nint L,R;\nmap<int,int> id,id2;\nint n,m,rt,cnt,ans;\nint sum[M],ls[M],rs[M];\n\nvoid ins(int &p,int x,int l=-inf,int r=inf){\n\tif(!p) p=++cnt;sum[p]++;if(l==r) return ;\n\tx<=mid ? ins(ls[p],x,l,mid) : ins(rs[p],x,mid+1,r);\n}\nint ask(int p,int x,int l=-inf,int r=inf){\n\tif(!sum[p] or l==r) return 0;\n\treturn x<=mid ? ask(ls[p],x,l,mid) : ask(rs[p],x,mid+1,r)+sum[ls[p]];\n}\nint find(int p,int k,int l=-inf,int r=inf){\n\tif(l==r) return l;int num=max(0,min(R,mid)-max(L,l)+1-sum[ls[p]]);\n\treturn num>=k ? find(ls[p],k,l,mid) : find(rs[p],k-num,mid+1,r);\n}\ninline void work1(int x){\n\tint now=(id.find(x)==id.end() ? x : id[x]);\n\tans=now-L+1-ask(rt,now); ins(rt,now); id[x]=--L;id2[L]=x;\t\n}\ninline void work2(int x){\n\tint now=(id.find(x)==id.end() ? x : id[x]);\n\tans=now-L+1-ask(rt,now); ins(rt,now); id[x]=++R;id2[R]=x;\n}\ninline void change(int x,int y){\n\tint now=(id.find(x)==id.end() ? x : id[x]);\n\tans=now-L+1-ask(rt,now); id[y]=now; id2[now]=y;\n}\ninline void ask(int x){\n\tans=find(rt,x);ans=(id2.find(ans)==id2.end() ? ans : id2[ans]);\n}\nsigned main(){\n\trd(n);rd(m);L=1,R=n;\n\twhile(m--){\n\t\tint pd,x,y;rd(pd);rd(x);\n\t\tif(pd==1) rd(y),change(x-ans,y-ans),printf(\"%d\\n\",ans);\n\t\tif(pd==2) work1(x-ans),printf(\"%d\\n\",ans);\n\t\tif(pd==3) work2(x-ans),printf(\"%d\\n\",ans);\n\t\tif(pd==4) ask(x-ans),printf(\"%d\\n\",ans);\n\t}\n}\n```",
        "postTime": 1542427082,
        "uid": 56659,
        "name": "AubRain",
        "ccfLevel": 0,
        "title": "[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u2014\u2014\u7ebf\u6bb5\u6811/\u5e73\u8861\u6811"
    },
    {
        "content": "FHQ Treap\u3002\u5c45\u7136\u6ca1\u6709 FHQ \u7684\u9898\u89e3\u2026\u2026\u505a\u6cd5\u4e00\u6837\uff0c\u4e00\u4e2a\u7528\u5e73\u8861\u6811\u4e00\u4e2a\u7528 map\uff0c\u4e0d\u8fc7\u8fd9\u9898\u7684\u5199\u6cd5\u6bd4\u8f83\u795e\u5947\uff0c\u8981\u5c06\u4e00\u6bb5\u5408\u6210\u4e00\u4e2a\u70b9\uff0c\u4e0d\u7136\u4f1a\u7206\u7a7a\u95f4\u3002\n\n\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 500005\nusing namespace std;\nint n,m,lastans;\nmap <int,int> M;\nstruct FHQTreap\n{\n\tint root,sze,siz[MAXN],son[MAXN][2],faz[MAXN],key[MAXN],L[MAXN],R[MAXN];\n\tint NewNode(int l,int r)\n\t{\n\t\tsiz[++sze]=r-l+1;\n\t\tL[sze]=l;\n\t\tR[sze]=r;\n\t\tson[sze][0]=son[sze][1]=faz[sze]=0;\n\t\tkey[sze]=rand();\n\t\tM[l]=sze;\n\t\treturn sze;\n\t}\n\tvoid PushUp(int rt)\n\t{\n\t\tfaz[son[rt][0]]=rt;\n\t\tfaz[son[rt][1]]=rt;\n\t\tsiz[rt]=siz[son[rt][0]]+siz[son[rt][1]]+1+R[rt]-L[rt];\n\t}\n\tint Merge(int x,int y)\n\t{\n\t\tif(!x || !y) return x+y;\n\t\tif(key[x]<key[y])\n\t\t{\n\t\t\tson[x][1]=Merge(son[x][1],y);\n\t\t\tPushUp(x);\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tson[y][0]=Merge(x,son[y][0]);\n\t\t\tPushUp(y);\n\t\t\treturn y;\n\t\t}\n\t}\n\tvoid Split(int rt,int pos,int &l,int &r)\n\t{\n\t\tif(!rt) l=r=0;\n\t\telse\n\t\t{\n\t\t\tif(pos<=siz[son[rt][0]])\n\t\t\t{\n\t\t\t\tSplit(son[rt][0],pos,l,r);\n\t\t\t\tson[rt][0]=r;\n\t\t\t\tr=faz[r]=rt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSplit(son[rt][1],pos-siz[son[rt][0]]-R[rt]+L[rt]-1,l,r);\n\t\t\t\tson[rt][1]=l;\n\t\t\t\tl=faz[l]=rt;\n\t\t\t}\n\t\t\tPushUp(rt);\n\t\t}\n\t}\n\tint FindKth(int rt,int pos)\n\t{\n\t\tif(pos<=siz[son[rt][0]]) return FindKth(son[rt][0],pos);\n\t\tpos-=siz[son[rt][0]];\n\t\tif(pos-R[rt]+L[rt]-1<=0) return L[rt]+pos-1;\n\t\treturn FindKth(son[rt][1],pos-R[rt]+L[rt]-1);\n\t}\n\tint FindRak(int rt)\n\t{\n\t\tint res=siz[rt]-siz[son[rt][1]];\n\t\twhile(rt!=root)\n\t\t{\n\t\t\tif(son[faz[rt]][1]==rt) res+=siz[faz[rt]]-siz[son[faz[rt]][1]];\n\t\t\trt=faz[rt];\n\t\t}\n\t\treturn res;\n\t}\n\tvoid Insert(int pos,int l,int r)\n\t{\n\t\tint x,y;\n\t\tSplit(root,pos-1,x,y);\n\t\troot=Merge(Merge(x,NewNode(l,r)),y);\n\t}\n\tvoid Delete(int l,int r)\n\t{\n\t\tint x,y,z;\n\t\tSplit(root,r,x,z);\n\t\tSplit(x,l-1,x,y);\n\t\troot=Merge(x,z);\n\t}\n}T;\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tM[1]=1;\n\tT.Insert(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint opt,x,y;\n\t\tscanf(\"%d %d\",&opt,&x);\n\t\tx-=lastans;\n\t\tif(opt==4)\n\t\t{\n\t\t\tlastans=T.FindKth(T.root,x);\n\t\t\tprintf(\"%d\\n\",lastans);\n\t\t\tcontinue;\n\t\t}\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%d\",&y);\n\t\t\ty-=lastans;\n\t\t\tint l=(--M.lower_bound(x+1))->first;\n\t\t\tint pos=M[l];\n\t\t\tint r=T.R[pos];\n\t\t\tlastans=T.FindRak(pos)-r+x;\n\t\t\tprintf(\"%d\\n\",lastans);\n\t\t\tT.Delete(lastans-x+l,lastans-x+r);\n\t\t\tif(x>l) T.Insert(lastans-x+l,l,x-1);\n\t\t\tT.Insert(lastans,y,y);\n\t\t\tif(r>x) T.Insert(lastans+1,x+1,r);\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tint l=(--M.lower_bound(x+1))->first;\n\t\t\tint pos=M[l];\n\t\t\tint r=T.R[pos];\n\t\t\tlastans=T.FindRak(pos)-r+x;\n\t\t\tprintf(\"%d\\n\",lastans);\n\t\t\tT.Delete(lastans-x+l,lastans-x+r);\n\t\t\tif(x>l) T.Insert(lastans-x+l,l,x-1);\n\t\t\tif(r>x) T.Insert(lastans,x+1,r);\n\t\t\tT.Insert(1,x,x);\n\t\t}\n\t\telse if(opt==3)\n\t\t{\n\t\t\tint l=(--M.lower_bound(x+1))->first;\n\t\t\tint pos=M[l];\n\t\t\tint r=T.R[pos];\n\t\t\tlastans=T.FindRak(pos)-r+x;\n\t\t\tprintf(\"%d\\n\",lastans);\n\t\t\tT.Delete(lastans-x+l,lastans-x+r);\n\t\t\tif(x>l) T.Insert(lastans-x+l,l,x-1);\n\t\t\tif(r>x) T.Insert(lastans,x+1,r);\n\t\t\tT.Insert(n,x,x);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550806662,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\n\u5927\u4f6c\u4eec\u90fd\u662f\u7528Splay\u505a\u7684\uff0c\u5176\u5b9e\u5728\u6570\u636e\u7ed3\u6784\u8fd0\u7528\u4e0a\u9762\uff0c\u6b64\u9898\u53ea\u662fNOIP2017D2T3\u5217\u961f\u7684\u62d3\u5c55\u7248\uff0c\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u641e\u5b9a\u3002\n\n**\u6211\u7684\u505a\u6cd5\u7684\u5173\u952e\u5728**\uff1a\n1. \u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u5229\u7528\u521d\u59cb\u72b6\u6001\u6613\u4e8e\u8ba1\u7b97\u7684\u7279\u70b9\uff0c\u4e0d\u7528\u5b9e\u9645\u503c\u4f5c\u4e3a\u521d\u59cb\u5316\u5185\u5bb9\uff0c\u800c\u76f4\u63a5\u5728\u8282\u70b9\u533a\u95f4\u672a\u88ab\u4fee\u6539\u65f6\u8ba1\u7b97\u72b6\u6001\u3002\n\n2. \u4e0d\u6539\u53d8\u7f16\u53f7\u5728\u7ebf\u6bb5\u6811\u4e2d\u5b9e\u9645\u4f4d\u7f6e\uff0c\u800c\u901a\u8fc7\u7ed9\u8282\u70b9\u4e00\u4e2acal\u8868\u793a\u533a\u95f4\u6709\u6548\u70b9\u4e2a\u6570\u6765\u786e\u5b9a\u6b64\u7f16\u53f7\u7684\u6392\u540d\n\n\u64cd\u4f5c\u53ef\u4ee5\u770b\u505a\u662f\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u7684\u7ec4\u5408\uff1a\n\n1. \u67e5\u8be2\u6392\u540d\u4e3ak\u7684\u7f16\u53f7\n2. \u5220\u9664\u7f16\u53f7k\uff0c\u5e76\u8fd4\u56de\u5220\u9664\u524dk\u7684\u6392\u540d\n3. \u5c06\u7f16\u53f7k\u7684\u7f16\u53f7\u6539\u4e3ap\n4. \u5411\u961f\u5c3e\u6216\u961f\u9996\u6dfb\u52a0\u4e00\u4e2a\u7f16\u53f7\n\n\u6211\u4eec\u5f00\u4e00\u4e2amap\u8bb0\u5f55\u7f16\u53f7\u5728\u7ebf\u6bb5\u6811\u7684\u5b9e\u9645\u4f4d\u7f6e\uff0c\u7ed9\u5c061~n\u653e\u5728m+1~n+m\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u7ed9\u6392\u5217\u524d\u540e\u5404\u9884\u7559m\u4e2a\u4f4d\u7f6e\uff0c\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\u5728\u6392\u5217\u524d\u540e\u6307\u5411\u4ee5\u524d\u6ca1\u6709\u63d2\u5165\u8fc7\u7f16\u53f7\u7684\u4f4d\u7f6e\uff0c\u63d2\u5165\u7f16\u53f7\u540e\u5c06\u6307\u9488\u524d\u79fb\u6216\u540e\u79fb\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b04\u64cd\u4f5c\u30022\uff0c3\u64cd\u4f5c\u91cc\u7528map\u91cc\u7684\u6570\u636e\u83b7\u5f97\u7f16\u53f7\u7684\u4f4d\u7f6e\u53ef\u4ee5\u5b9e\u73b0\u30021\u64cd\u4f5c\u91cc\uff0c\u7528cal\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u5c31\u884c\u4e86\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(mlogm)$,\u7a7a\u95f4$O(mlogm)$\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <map>\nusing namespace std;\nstruct Node{\n    Node* l;\n    Node* r;\n    int cal,val;\n    Node(){\n        cal=val=0;\n        l=r=NULL;\n    }\n};\nint n,q,Bi,Ai,Jia,Len,pai;\nNode* Root;\nmap<int,int> wei;\n\nNode* NewNode(){\n    return new Node();\n}\n\ninline int Cal(Node* o,int l,int r)\n{\n    if(o!=NULL)\n        return o->cal;\n    r=min(Jia+n,r);\n    l=max(Jia+1,l);\n    return (l>r?0:r-l+1);\n}\n\nvoid update(Node* o,int l,int r,int k,int val0,int cao)\n{\n//\tprintf(\"%d %d %d %d %d %d\\n\",l,r,k,val0,cao,pai);\n    o->cal+=cao;\n    if(l==r){\n        if(cao!=-1)\n            o->val=val0;\n        return;\n    }\n    int mid=(l+r)>>1,l_cal=Cal(o->l,l,mid);\n//\tcout<<\"cal: \"<<l_cal<<endl;\n    if(k<=mid)\n    {\n        if(o->l==NULL){\n            o->l=NewNode();\n            o->l->cal=l_cal;\n        }\n        update(o->l,l,mid,k,val0,cao);\n    }\n    else\n    {\n        if(o->r==NULL){\n            o->r=NewNode();\n            o->r->cal=o->cal-1-l_cal;\n        }\n        pai+=l_cal;\n        update(o->r,mid+1,r,k,val0,cao);\n    }\n}\n\nint query(Node* o,int l,int r,int k)\n{\n    if(l==r){\n        if(!o->val)\n            o->val=l-Jia;\n        return o->val;\n    }\n    int mid=(l+r)>>1,l_cal=Cal(o->l,l,mid);\t\n    if(k<=l_cal)\n    {\n        if(o->l==NULL){\n            o->l=NewNode();\n            o->l->cal=l_cal;\n        }\n        return query(o->l,l,mid,k);\n    }\n    else\n    {\n        if(o->r==NULL){\n            o->r=NewNode();\n            o->r->cal=o->cal+1-l_cal;\n        }\n        return query(o->r,mid+1,r,k-l_cal);\n    }\n}\n\nvoid out(int f,int x){\n    printf(\"After %d %d the rank is :\\n\",f,x);\n    for(int i=1;i<=n;i++)\n        printf(\"%d \",query(Root,1,Len,i));\n    printf(\"\\nEnd\\n\");\n\n}\n\nint main()\n{\n//\tfreopen(\"scoi.in\",\"r\",stdin);\n//\tfreopen(\"scois.out\",\"w\",stdout);\n    Root=NewNode();\n    scanf(\"%d%d\",&n,&q);\n    Jia=q;\n    Root->cal=n;\n    Bi=Jia;\n    Ai=Jia+n+1;\n    Len=n+2*Jia;\n    int a=0;\n    while(q--)\n    {\n        pai=0;\n        int f,x,y;\n        scanf(\"%d%d\",&f,&x);\n        x-=a;\n        int w=wei[x];\n//\t\tcout<<\"sd:\"<<w<<endl;\n        if(!w) w=x+Jia;\n        if(f==1)\n        {\n            scanf(\"%d\",&y);\n            y-=a;\t\n            wei[x]=-1;\n            wei[y]=w;\n            \n            update(Root,1,Len,w,y,0);\n            pai++;\n            a=pai;\n            printf(\"%d\\n\",a);\n        }\n        else if(f==2)\n        {\n            wei[x]=Bi;\n            \n            update(Root,1,Len,w,2853,-1);\n            pai++;\n            a=pai;\n            printf(\"%d\\n\",a);\n            update(Root,1,Len,Bi,x,1);\n            Bi--;\n        }\n        else if(f==3)\n        {\n            wei[x]=Ai;\n            \n            update(Root,1,Len,w,2853,-1);\n            pai++;\n            a=pai;\n            printf(\"%d\\n\",a);\n            update(Root,1,Len,Ai,x,1);\n            Ai++;\n        }\n        else\n        {\n            a=query(Root,1,Len,x);\n            printf(\"%d\\n\",a);\n        }\n//\t\tout(f,x);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1540824148,
        "uid": 41271,
        "name": "\u59a9\u5a9a\u7684ak\u841d\u8389",
        "ccfLevel": 9,
        "title": "[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\uff08\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "# \u52a8\u6001\u5f00\u70b9Splay\n### splay\u6309\u6392\u540d\u6392\u5e8f,map\u8bb0\u5f55\u53f3\u7aef\u70b9\u7f16\u53f7,\u5373map[k]=t[k].r\n\u8fd9\u6837,map.lower_bound\u5c31\u53ef\u4ee5\u76f4\u63a5\u627e\u5230\u76ee\u6807\u8282\u70b9\n\n#### \u6211\u89c1\u8bb8\u591a\u9898\u89e3\u7684splay\u76842,3\u64cd\u4f5c\u90fd\u662f\u5148erase\u518dpush_front\u6216\u662fpush_back,\u4e0d\u8fc7\u6211\u76f4\u63a5\u518d\u539f\u70b9\u4e0a\u4fee\u6539,\u8fd9\u6837\u4e00\u4e2achange\u5b8c\u4e8b,\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u4ee3\u7801\u91cf~~(\u4e5f\u5361\u4e86\u5e38)\n---\n\u7c7b\u4f3c\u7684\u9898:[P3960 \u5217\u961f](https://www.luogu.org/problemnew/show/P3960)\n\n---\n## change\u51fd\u6570\u539f\u7406:\n\n* #### 2\u64cd\u4f5c:\u5c06\u76ee\u6807\u8282\u70b9\u62c6\u5f00,\u65cb\u5230\u6839,\u5c06\u5de6\u5b50\u6811\u5411\u53f3\u5b50\u6811\u5408\u5e76,\u76ee\u6807\u8282\u70b9\u5c31\u53d8\u6210\u4e86\u7b2c\u4e00\u540d\n* #### 3\u64cd\u4f5c:\u5c06\u76ee\u6807\u8282\u70b9\u62c6\u5f00,\u65cb\u5230\u6839,\u5c06\u53f3\u5b50\u6811\u5411\u5de6\u5b50\u6811\u5408\u5e76,\u76ee\u6807\u8282\u70b9\u5c31\u53d8\u6210\u4e86\u6700\u540e\u4e00\u540d\n\u5177\u4f53\u5b9e\u73b0\u89c1\u4ee3\u7801\u91cc\u7684change()\u51fd\u6570\n\n---\n## \u53e6:\n* 1\u64cd\u4f5c\u76f4\u63a5\u62c6,\u4fee\u6539\u7f16\u53f7,\u522b\u5fd8\u4e86\u6539map\n* 4\u64cd\u4f5c\u6b63\u5e38,\u6309rank\u8be2\u95ee\u7f16\u53f7\n~~(\u6211\u4e00\u5f00\u59cb\u5fd8\u628arank-=t[son].siz\u4e86,\u8c03\u4e86\u4e00\u4e2a\u661f\u671fQWQ)~~\n# AC\u4ee3\u7801:\n~~\u9a6c\u8702\u4e2d\u89c4\u4e2d\u77e9~~\n```cpp\n  #include<iostream>\n  #include<cstdio>\n  #include<map>\n  using namespace std;\n  #define N 100010\n  inline int read(){\n      int x=0,f=1;\n      char c=getchar();\n      while(c<'0'||c>'9'){\n          if(c=='-')f=-1;\n          c=getchar();\n      }\n      while(c>='0'&&c<='9'){\n          x=(x<<3)+(x<<1)+c-'0';\n          c=getchar();\n      }\n      return x*f;\n  }\n  int root,cnt=0,n,m,lans;\n  map<int,int> mp; \n  struct node{\n      int ch[2],siz,l,r,fa;\n  }t[N<<2];\n  int newNode(int l,int r){\n      int k=++cnt;\n      t[k].ch[0]=t[k].ch[1]=0;\n      t[k].l=l,t[k].r=r;\n      t[k].siz=t[k].r-t[k].l+1;\n      return k;\n  }\n  void up(int k){\n      t[k].siz=t[t[k].ch[0]].siz+t[t[k].ch[1]].siz+t[k].r-t[k].l+1;\n  }\n  int get(int k){\n      return t[t[k].fa].ch[1]==k;\n  }\n  void rorate(int k){//\u7565\n      int fa=t[k].fa,gfa=t[fa].fa;\n      int d1=get(k),d2=get(fa);\n      t[fa].ch[d1]=t[k].ch[d1^1];\n      t[t[k].ch[d1^1]].fa=fa;\n      t[gfa].ch[d2]=k;\n      t[k].fa=gfa;\n      t[fa].fa=k;\n      t[k].ch[d1^1]=fa;\n      up(fa);\n      up(k);\n  }\n  void splay(int k,int goal){//\u540c\u4e0a\n      while(t[k].fa!=goal){\n          int fa=t[k].fa,gfa=t[fa].fa;\n          int d1=get(k),d2=get(fa);\n          if(gfa!=goal){\n              if(d1==d2)rorate(fa);\n              else rorate(k);\n          }\n          rorate(k);\n      }\n      if(goal==0)root=k;\n  }\n  int kth(int rank){\n      int k=root;\n      while(1){\n          int son=t[k].ch[0];\n          if(rank<=t[son].siz)k=son;\n          else if(rank>t[son].siz+t[k].r-t[k].l+1){\n              rank-=t[son].siz+t[k].r-t[k].l+1;\n              k=t[k].ch[1];\n          }\n          else{\n              rank-=t[son].siz;\n              return t[k].l+rank-1;\n          }\n      }\n  }\n  int rank(int k){//\u6309\u7f16\u53f7\u627e\u6392\u540d\n      splay(k,0);\n      return t[t[k].ch[0]].siz+1;\n  }\n  inline void split(int k,int id){//\u5206\u88c2\u64cd\u4f5c\n      int l=0,r=0;\n      if(t[k].l==t[k].r)return;\n      mp[id]=k;\n      if(t[k].l!=id){\n          mp[id-1]=l=newNode(t[k].l,id-1);\n          t[l].ch[0]=t[k].ch[0];\n          t[t[l].ch[0]].fa=l;\n          t[k].ch[0]=l;\n          t[l].fa=k;\n      }\n      if(t[k].r!=id){\n          mp[t[k].r]=r=newNode(id+1,t[k].r);\n          t[r].ch[1]=t[k].ch[1];\n          t[t[r].ch[1]].fa=r;\n          t[k].ch[1]=r;\n          t[r].fa=k;\n      }\n      t[k].l=t[k].r=id;\n      if(l)up(l);\n      if(r)up(r);\n      up(k);\n  }\n  void change(int k,int p){//\u8fd9\u91cc,IMPORTANT!\n      splay(k,0);\n      k=root;\n      if(!t[k].ch[p])return;//\u5982\u679c\u672c\u8eab\u5c31\u662f\u5934\u6216\u5c3e,\u76f4\u63a5\u518d\u89c1\n      if(!t[k].ch[p^1]){//\u5982\u679c\u5728\u9065\u8fdc\u7684\u53e6\u4e00\u7aef,\u5de6\u53d8\u53f3\u6216\u53f3\u53d8\u5de6\n          t[k].ch[p^1]=t[k].ch[p];\n          t[k].ch[p]=0;\n      }\n      else{//\u5728\u4e2d\u95f4\u7684\u8bdd,\u5408\u5e76\u5b50\u6811\n          k=t[k].ch[p^1];\n          while(t[k].ch[p])k=t[k].ch[p];\n          t[t[root].ch[p]].fa=k;\n          t[k].ch[p]=t[root].ch[p];\n          t[root].ch[p]=0;\n          splay(t[k].ch[p],0);\n      }\n  }\n  int main(){\n      n=read();m=read();\n      mp[n]=root=newNode(1,n);\n      for(int i=1;i<=m;i++){\n          int opt,x,y;\n          opt=read();x=read();\n          x-=lans;\n          if(opt == 1){\n              y=read(),y -= lans;\n              int pos=(*mp.lower_bound(x)).second;\n              split(pos,x);\n              lans=rank(pos);\n              t[pos].l=t[pos].r=y;\n              mp[y]=pos;\n              cout<<lans<<endl;\n          }\n          if(opt == 2 || opt == 3){\n              int pos=(*mp.lower_bound(x)).second;\n              split(pos,x);\n              lans=rank(pos);\n              change(pos,opt-2);\n              cout<<lans<<endl;\n          }\n          if(opt==4){\n              lans=kth(x);//\u6309\u6392\u540d\u627e\u7f16\u53f7\n              cout<<lans<<endl;\n          }\n      }\n      return 0;//bye~\n\t}\n```\n##### \u987a\u4fbf\u653e\u4e0aP3960\u7684\u4ee3\u7801,\u65b9\u4fbf\u5927\u5bb6\u5b66\u4e60~\n~~\u4e0d\u5f00long long\u89c1\u7956\u5b97~~\n```cpp\n  #include<iostream>\n  #include<cstdio>\n  using namespace std;\n  #define N 300010\n  #define ll long long\n  inline int read(){\n      int x=0,f=1;\n      char c=getchar();\n      while(c<'0'||c>'9'){\n          if(c=='-')f=-1;\n          c=getchar();\n      }\n      while(c>='0'&&c<='9'){\n          x=(x<<3)+(x<<1)+c-'0';\n          c=getchar();\n      }\n      return x*f;\n  }\n  int n,m,q,root[N],cnt;\n  struct node{\n      int ch[2],fa;\n      ll siz,l,r;\n  }t[N*30];\n  inline int newNode(ll l,ll r){\n      int k=++cnt;\n      t[k].ch[0]=t[k].ch[1]=0;\n      t[k].l=l,t[k].r=r;\n      t[k].siz=t[k].r-t[k].l+1;\n      return k;\n  }\n  inline void up(int k){\n      t[k].siz=t[t[k].ch[0]].siz+t[t[k].ch[1]].siz+t[k].r-t[k].l+1;\n  }\n  inline int get(int k){\n      return t[t[k].fa].ch[1]==k;\n  }\n  inline void rorate(int k){\n      int fa=t[k].fa,gfa=t[fa].fa;\n      int d1=get(k),d2=get(fa);\n      t[fa].ch[d1]=t[k].ch[d1^1];\n      t[t[k].ch[d1^1]].fa=fa;\n      t[gfa].ch[d2]=k;\n      t[k].fa=gfa;\n      t[fa].fa=k;\n      t[k].ch[d1^1]=fa;\n      up(k);\n      up(fa);\n  }\n  inline void splay(int &root,int k,int goal){\n      while(t[k].fa!=goal){\n          int fa=t[k].fa,gfa=t[fa].fa;\n          int d1=get(k),d2=get(d2);\n          if(gfa!=goal){\n              if(d1==d2)rorate(fa);\n              else rorate(k);\n          }\n          rorate(k);\n      }\n      if(goal==0)root=k;\n  }\n  inline void Insert(int &root,ll l){\n      int k=root,fa=0;\n      while(k){\n          fa=k;\n          k=t[k].ch[1];\n      }\n      k=newNode(l,l);\n      if(fa)t[fa].ch[1]=k;\n      t[k].fa=fa;\n      splay(root,k,0);\n  }\n  ll splitNode(int &root,int k,ll rank){\n      splay(root,k,0);\n      rank+=t[k].l-1;\n      int tmp=newNode(rank+1,t[k].r);\n      t[k].r=rank-1;\n      if(t[k].ch[1]==0){\n          t[k].ch[1]=tmp;\n          t[tmp].fa=k;\n      }\n      else{\n          t[tmp].ch[1]=t[k].ch[1];\n          t[t[tmp].ch[1]].fa=tmp;\n          t[k].ch[1]=tmp;\n          t[tmp].fa=k;\n      }\n      up(tmp);\n      up(k);\n      return rank;\n  }\n  inline ll getKth(int &root,ll rank){\n      int k=root;\n      while(1){\n          int son=t[k].ch[0];\n          if(rank<=t[son].siz){\n              k=t[k].ch[0];\n          }\n          else if(rank>t[son].siz+t[k].r-t[k].l+1){\n              rank-=(t[son].siz+t[k].r-t[k].l+1);\n              k=t[k].ch[1];\n          }\n          else{\n              rank-=t[son].siz;\n              return splitNode(root,k,rank);\n          }\n      }\n  }\n  int main(){\n      n=read();m=read();q=read();\n      for(int i=1;i<=n;i++){\n          root[i]=newNode(1ll*(i-1)*m+1,1ll*i*m-1);\n      }\n      root[n+1]=newNode(1ll*m,1ll*m);\n      for(int i=2;i<=n;i++){\n          Insert(root[n+1],1ll*i*m);\n      }\n\n      while(q--){\n          int x=read(),y=read();\n          if(y==m){\n              ll ans=getKth(root[n+1],x);\n              printf(\"%lld\\n\",ans);\n              Insert(root[n+1],ans);\n          }\n          else{\n              ll ans=getKth(root[x],y);\n              printf(\"%lld\\n\",ans);\n              Insert(root[n+1],ans);\n              Insert(root[x],getKth(root[n+1],x));\n          }\n      }\n      return 0;\n  }\n```\n\n",
        "postTime": 1554469884,
        "uid": 100285,
        "name": "Froggy",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u4e3b\u6d41\u505a\u6cd5\u662f\u52a8\u6001\u5f00\u70b9\u7684\u5e73\u8861\u6811 / \u7ebf\u6bb5\u6811\uff0c\u4f46\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u57fa\u4e8e\u5206\u7c7b\u7684\u5e73\u8861\u6811\u505a\u6cd5\uff08\u975e\u52a8\u6001\u5f00\u70b9\uff09\u3002\n\n\u601d\u8def\u6765\u6e90\uff1a@[kczno1](https://www.luogu.com.cn/user/9168) \u7684 [\u9898\u89e3](https://www.luogu.com.cn/blog/kczno1/solution-p3285)\u3002\n\n---\n## $\\bf Solution$\n### Part 1\n\u6240\u6709\u7528\u6237\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e09\u7c7b\uff1a**$\\bf\\small A.$ \u4e0a\u6b21\u64cd\u4f5c\u662f 2 \u64cd\u4f5c\u7684\uff1b$\\bf\\small B.$ \u5728\u4e2d\u95f4\u6ca1\u6709\u7ecf\u5386\u8fc7 2, 3 \u64cd\u4f5c\u7684\uff1b$\\bf\\small C.$ \u4e0a\u6b21\u64cd\u4f5c\u662f 3 \u64cd\u4f5c\u7684**\u3002\n\n\u521d\u59cb\u65f6\u6240\u6709\u7528\u6237\u90fd\u5728 $\\bf\\small B$ \u96c6\u5408\u4e2d\u3002\u5bf9\u7528\u6237 $x$ \u8fdb\u884c 2 \u64cd\u4f5c\u65f6\uff0c\u628a $x$ \u4ece\u539f\u96c6\u5408\u4e2d\u5220\u9664\uff0c\u52a0\u5165\u5230 $\\bf\\small A$ \u4e2d\uff1b\u5bf9\u7528\u6237 $x$ \u8fdb\u884c 3 \u64cd\u4f5c\u65f6\uff0c\u628a $x$ \u4ece\u539f\u96c6\u5408\u4e2d\u5220\u9664\uff0c\u52a0\u5165\u5230 $\\bf\\small C$ \u4e2d\u3002\n\n### Part 2\n\u5177\u4f53\u800c\u8a00\uff0c\u7ef4\u62a4\u4e09\u68f5\u5e73\u8861\u6811\uff0c\u5206\u522b\u8868\u793a $\\bf\\small A,B,C$ \u96c6\u5408\u3002**\u5e73\u8861\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5373\u4e3a\u6392\u540d**\u3002\u5e73\u8861\u6811\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7ef4\u62a4\u5176 **\u952e\u503c\u3001\u7f16\u53f7**\uff08\u5916\u52a0\u5b50\u6811\u5927\u5c0f\u7b49\u5176\u5b83\u5e73\u8861\u6811\u81ea\u5e26\u4fe1\u606f\uff09\u3002\n\n\u5176\u4e2d\u7684\u952e\u503c\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n- $\\bf\\small A$ \u4e2d\u5143\u7d20 **\u6309\u52a0\u5165\u987a\u5e8f\uff0c\u4f9d\u6b21\u8d4b\u952e\u503c\u4e3a $-1,-2,-3,\\cdots$**\n- $\\bf\\small B$ \u4e2d\u5143\u7d20 **\u952e\u503c\u4e0e\u521d\u59cb\u7f16\u53f7\uff08\u5373\u521d\u59cb\u6392\u540d\uff09\u76f8\u540c\uff08\u6ce8\u610f\u4e0d\u662f 1 \u64cd\u4f5c\u540e\u7684\u7f16\u53f7\uff09**\u3002\n- $\\bf\\small C$ \u4e2d\u5143\u7d20 **\u6309\u52a0\u5165\u987a\u5e8f\uff0c\u4f9d\u6b21\u8d4b\u952e\u503c\u4e3a $n+1,n+2,n+3,\\cdots$**\n\n\u8fd9\u6837\u5b9a\u4e49\u7684\u952e\u503c\uff0c\u65e2\u7ef4\u62a4\u4e86\u6709\u5e8f\u6027\uff0c\u53c8\u53ef\u4ee5\u5f97\u77e5\u5143\u7d20\u6240\u5728\u96c6\u5408\u3002\n\n\u4e0e\u6b64\u540c\u65f6\uff0c\u518d\u7ef4\u62a4 **\u7f16\u53f7\u6240\u5bf9\u5e94\u7684\u952e\u503c**\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u6839\u636e\u7ed9\u51fa\u7684\u7f16\u53f7\uff0c\u8bbf\u95ee\u5176\u5728\u5e73\u8861\u6811\u4e2d\u7684\u4f4d\u7f6e\u3002\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868 / \u5e73\u8861\u6811\u3002\u65b9\u4fbf\u8d77\u89c1\uff0c\u4ee3\u7801\u91cc\u7528 STL \u4e2d\u7684 map \u5b9e\u73b0\u3002\n\n\u663e\u7136 $\\bf\\small B$ \u4e2d\u5143\u7d20\u8fc7\u591a\uff0c\u4e0d\u80fd\u76f4\u63a5\u8bb0\u5f55\u6240\u6709\u5143\u7d20\u3002\u6211\u4eec\u53ef\u4ee5\u53d6\u5176\u8865\u96c6\uff0c\u5373 **\u53ea\u8bb0\u5f55\u88ab\u5220\u9664\u7684\u5143\u7d20**\u3002\n\n### Part 3\n\u5bf9\u4e8e\u524d\u4e09\u79cd\u64cd\u4f5c\uff0c\u5728 map \u4e2d\u7528\u7f16\u53f7\u67e5\u5230\u952e\u503c\uff0c\u5728\u5e73\u8861\u6811\u4e2d\u67e5\u627e\u5230\u5bf9\u5e94\u5143\u7d20\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 4\uff0c\u82e5\u7b54\u6848\u5728 $\\bf\\small A$ \u6216 $\\bf\\small C$ \u4e2d\u5f88\u597d\u505a\uff0c\u4f46\u7531\u4e8e $\\bf\\small B$ \u8bb0\u5f55\u7684\u662f\u8865\u96c6\uff0c\u7b54\u6848\u5728 $\\bf\\small B$ \u4e2d\u8f83\u4e3a\u96be\u6c42\u3002\n\n\u7b54\u6848\u4e00\u5b9a\u5728\u67d0\u6bb5\u533a\u95f4 $(L,R)$ \u4e2d\uff0c$L,R$ \u662f\u7b97\u4e0a $0$ \u548c $n+1$ \u540e\u8fde\u7eed\u7684\u4e24\u4e2a\u88ab\u5220\u9664\u7684\u5143\u7d20\u3002\u8bb0 $g(x)$ \u8868\u793a **\u539f\u96c6\u5408 $\\bf\\small B$ \u4e2d\u6ee1\u8db3 $t\\in[1,x]$ \u7684 $t$ \u7684\u4e2a\u6570**\uff0c\u6709 $g(L)<\\text{rank}<g(R)$\u3002\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u6c42\u5f97\u6700\u5927\u7684 $x$ \u6ee1\u8db3 $g(x)<\\text{rank}$ \uff0c\u53ef\u4ee5\u7b97\u51fa\u7b54\u6848\u3002\n\n\u5b9e\u73b0\u65f6\u53d1\u73b0\u64cd\u4f5c 4 \u5728 $\\bf\\small B$ \u4e2d\u6c42\u5f97\u7684\u7b54\u6848\u53ef\u80fd\u88ab\u6539\u53d8\u4e86\u7f16\u53f7\u3002\u518d\u5f00\u4e00\u4e2a map\uff0c\u8bb0\u5f55\u521d\u59cb\u7f16\u53f7\u4e3a $x$ \u7684\u6570\u73b0\u5728\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n---\n## $\\bf Code$\n**[\u6d1b\u8c37](https://www.luogu.com.cn/record/67392890) / [LibreOJ](https://loj.ac/s/1356624)**\n\n\u4f7f\u7528 FHQ-Treap \u5b9e\u73b0\u3002\u9898\u89e3\u4e2d\u7684 $\\bf\\small A,B,C$ \u96c6\u5408\u5206\u522b\u5bf9\u5e94\u4ee3\u7801\u4e2d\u7684 $\\bf\\small U,P,D$ \u5e73\u8861\u6811\u3002\n\n",
        "postTime": 1642726522,
        "uid": 193308,
        "name": "lyx1311",
        "ccfLevel": 7,
        "title": "\u9898\u89e3\uff1aP3285 [SCOI2014] \u65b9\u4f2f\u4f2f\u7684OJ"
    },
    {
        "content": "\u5927\u5927\u5927\u5927\u5927\uff01\uff01\uff01\uff01\uff01\uff01\u6570\u636e\u7ed3\u6784\u9898\u3002\n\n\u592a\u5927\u4e86\uff1a\n\n\u6cd5\u4e00\uff1a\u7ebf\u6bb5\u6811\u52a8\u6001\u5f00\u70b9\uff1a\u6ce8\u610fn\u67091e8\u4e8e\u662f\u8003\u8651m\u5f71\u54cd\u7684\u3002\n\n\u6cd5\u4e8c\uff1a\u4e24\u4e2aSPLAY\uff1a\u76ee\u7684\u662f\u5728n\u67091e8\u65f6\u4e00\u68f5\u7ef4\u62a4\u540d\u6b21\uff0c\u4e00\u68f5\u7ef4\u62a4\u7f16\u53f7\u3002\u76ee\u7684\u662f\u89e3\u51b3n\n\n\u539f\u7406\uff1a\u4fee\u6539k\uff1a\u5219\u5256\u6210\uff081\uff0ck-1\uff09\uff08k\uff0ck\uff09\uff08k+1\uff0cn\uff09\uff1b\n\n\u6700\u591a\u590d\u6742\u5ea6\uff1alogn*m\uff1b\n\n\u6cd5\u4e09\uff1a\uff1a\u4e00\u4e2aSPLAY\uff0c\u53e6\u5916\u4e00\u4e2a\u7528map\u5c31\u53ef\u4ee5\u4e86\u3002\u7528\u4e00\u4e2ain\u8bb0\u5f55\u662f\u5426\u5230\u4e86\u524d\u7aef\u4e0e\u540e\u7f00\u3002\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<map>\nusing namespace std;\ninline void read(int &x){//fast read\n\tint f=1;\n\tx=0;\n\tchar ch=getchar(); \n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-'){\n\t\t\tf=-1;\n\t\t}\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\tx*=f;\n}\nint n,m,d;//d is the max num that the tree could expand using by the SET\nstruct SET{//a set to make sure the line is priority\n\t#define N (int) 2e5\n\tint a[N*3];\n\tint id[N];//idx just record the left sum and that is priority\n\tint n;\n\tint insert(int idx){//\u7ef4\u6301\u5355\u8c03\u7684\u672c\u8d28\u539f\u56e0\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5728\u67e5\u8be2\u7f16\u53f7\u65f6\u53ef\u4ee5\u5f97\u5230\u5728\u54ea\u4e00\u5757 \n\t\tn++;\n\t\tid[n]=idx;\n\t\tint i=n+d;//we have two sum should be recorded;\n\t\ta[i]=1;\n\t\twhile(i>>=1){\n\t\t\ta[i]++;\n\t\t}\n\t\treturn n;\n\t}\n\tvoid del(int i){// del a point and expand 1 to 3 points \n\t\ti+=d;\n\t\ta[i]=0;\n\t\twhile(i>>=1){\n\t\t\ta[i]--;\n\t\t}\n\t} \n\tint rank(int i){//give you a sum and que the rank;\n\t\ti+=d;\n\t\tint ans=a[i];\n\t\twhile(i){\n\t\t\tif(i%2==1){\n\t\t\t\tans+=a[i-1];\n\t\t\t}\n\t\t\ti/=2;\n\t\t}\n\t\treturn ans;\n\t}\n\tint get_by_rank(int x){//give you the rank ans que the sum;\n\t\tint i=1;\n\t\twhile(i<=d){\n\t\t\tif(x<=a[i*2]){\n\t\t\t\ti*=2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx-=a[i*2];\n\t\t\t\ti=i*2+1;\n\t\t\t}\n\t\t}\n\t\treturn id[i-d];\n\t}\n}pre,suf;//pre\u5c1a\u672a\u5f00\u5c01\u7684\u5de6\u7aef\uff08\u540d\u6b21\u5c0f\uff09suf\u5c1a\u672a\u5f00\u5c01\u7684\u53f3\u7aef\uff08\u540d\u6b21\u5927\uff09 \nstruct SPlAY{\n\t#define cl(x) c[x][0]\n\t#define cr(x) c[x][1]\n\tint fa[N];\n\tint c[N][2];\n\tint siz[N];\n\tint v[N];\n\tint rt;\n\tint n;\n\tint rank(int x){\n\t\tint ans=x;\n\t\tint i=rt;\n\t\twhile(i){\n\t\t\tif(v[i]>x){\n\t\t\t\ti=cl(i);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans-=siz[cl(i)]+1;\n\t\t\t\ti=cr(i); \n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tvoid sc(int y,int x,bool flag){\n\t\tfa[x]=y;\n\t\tc[y][flag]=x;\n\t}\n\tbool get(int x){\n\t\treturn x==c[fa[x]][1];\n\t} \n\tvoid pushup(int x){\n\t\tsiz[x]=siz[cl(x)]+siz[cr(x)]+1;\n\t}\n\tvoid rotate(int x){\n\t\tint y=fa[x];\n\t\tbool flag=get(x);\n\t\tif(y==rt){\n\t\t\tfa[rt=x]=0;\n\t\t}\n\t\telse{\n\t\t\tsc(fa[y],x,get(y));\n\t\t}\n\t\tsc(y,c[x][!flag],flag);\n\t\tsc(x,y,!flag);\n\t\tpushup(y);\n\t}\n\tvoid splay(int x,int to=0/*depends on the root*/){\n\t\tint y;\n\t\twhile(y=fa[x],y!=to){\n\t\t\tif(fa[y]==to){\n\t\t\t\trotate(x);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\trotate(get(x)==get(y)?y:x);\n\t\t\t\trotate(x);\n\t\t\t}\n\t\t}\n\t\tpushup(x);\n\t}\n\tvoid insert(int x){//insert the sum to the SPLAY tree   \n\t\tn++;\n\t\tv[n]=x;\n\t\tsiz[n]=1;\n\t\tif(!rt){\n\t\t\trt=n;\n\t\t\treturn;\n\t\t}\n\t\tint i=rt;\n\t\twhile(1){\n\t\t\tbool d=v[i]<x;\n\t\t\tif(c[i][d])\n\t\t\t\ti=c[i][d];\n\t\t\telse{\n\t\t\t\tsc(i,n,d);\n\t\t\t\tsplay(n);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tmap<int,int> dy;\n\tint DY(int x){//hash the changing name of the num\n\t\tif(!dy.count(x)){\n\t\t\treturn x;\n\t\t}\n\t\treturn dy[x];\n\t}\n\tint get_by_rank(int x){//got the sum get the rank\u503c\u627e\u7f16\u53f7 \n\t\tif(!rt){\n\t\t\treturn DY(x);\n\t\t}\n\t\tint i=rt;\n\t\tint i0;\n\t\tint rank=1;\n\t\twhile(i){\n\t\t\ti0=i;\n\t\t\tif(x>v[i]-(siz[cl(i)]+rank)){\n\t\t\t\trank+=siz[cl(i)]+1;\n\t\t\t\ti=c[i][1];\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti=c[i][0];\n\t\t\t}\n\t\t}\n\t\tsplay(i0);\n\t\treturn DY(x+rank-1);\n\t}\n}out;\nconst int PRE=1;//PRE means at the head of the queue\nconst int SUF=2;//SUF means at the tail of the queue\nstruct point{\n\tint in,id;//in means if that has been in the queue already and the location that is\n};\nmap<int,point> belong;//the location of the i;\npoint &B(int x){//\u8fd9\u4e2a\u51fd\u6570\u7684\u76ee\u7684\u5b9e\u5728\u6620\u5c04\u4e2d\u5bfb\u627e\u8fd9\u4e2a\u7f16\u53f7\u7684\u4f4d\u7f6e.\u6253\u4f20\u9012\u662f\u56e0\u4e3a\u8981\u901a\u8fc7\u8fd9\u4e2a\u6539\u53d8belong\u6240hash\u7684\u503c \n\tif(!belong.count(x))\n\t\tbelong[x]=(point){0,x};//\u5982\u679c\u6ca1\u6709hash\u8fc7\u90a3\u4e48\u5fc5\u7136\u8fd9\u65f6\u8fd8\u6ca1\u6709\u8fc7\u632a\u52a8\u5230\u961f\u9996\u6216\u961f\u5c3e \n\treturn belong[x];\n}\nint get_rank(int x){//\u5df2\u77e5\u7f16\u53f7\u6c42\u540d\u6b21 \n\tif(B(x).in==1){\n\t\treturn pre.a[1]+1-pre.rank(B(x).id);//a \u6570\u7ec4\u5728\u8fd9\u91cc\u8868\u793a\u6700\u5de6\u7aef\u540d\u6b21\uff08\u6700\u5927\uff09\uff0c\u7136\u540e\u52a0\u4e00\u662f\u56e0\u4e3a\u8ba1\u7b97\u81ea\u5df1\u3002 \n\t}\n\tif(B(x).in==2){\n\t\treturn n-suf.a[1]+suf.rank(B(x).id);\n\t}\n\treturn pre.a[1]+out.rank(B(x).id);//\u5982\u679c\u5df2\u7ecf\u52a0\u5165splay\u5185\uff0c\u5219\u5148\u52a0\u4e0a\u53f3\u7aef\u6240\u6709\u7684\u503c\u7136\u540e\u518d\u52a0\u4e0asplay\u4e2d\u7684rank \n}\n//\u5f15\u7406\uff1apre\u4e2d\u7684\u6700\u5927\u540d\u6b21<out\u4e2d\u7684\u6700\u5c0f\u540d\u6b21<=out\u4e2d\u7684\u6700\u5927\u540d\u6b21<suf\u4e2d\u7684\u6700\u5c0f\u540d\u6b21\u3002 \nint get_by_rank(int x){//\u5df2\u77e5\u540d\u6b21\u6c42\u7f16\u53f7\u3002 \n\tif(x<=pre.a[1]){//\u5f15\u74061 \n\t\treturn pre.get_by_rank(pre.a[1]-x+1);//\u5728pre\u4e2d\u7684\u540d\u6b21\u662f\u603b\u540d\u6b21-\u5b9e\u9645\u540d\u6b21+1\uff0c\u56e0\u4e3apre\u662f\u5012\u8fc7\u6765\u7684 \n\t}\n\tif(x>n-suf.a[1]){//\u5f15\u74063 \n\t\treturn suf.get_by_rank(x-(n-suf.a[1]));//\u51cf\u53bbsuf\u4e4b\u524d\u7684\u6240\u6709\u540d\u6b21\uff0c\u5219\u662f\u5728suf\u4e2d\u7684\u5b9e\u9645\u540d\u6b21\u3002 \n\t}//\u5f15\u74062 \n\treturn out.get_by_rank(x-pre.a[1]);//\u51cf\u53bbpre\u4e2d\u7684\u6240\u6709\u540d\u6b21\u5219\u662f\u5728out\u4e2d\u7684\u540d\u6b21\u3002 \n} \nint main(){\n\tread(n);\n\tread(m);\n//\tcout<<n<<\" \"<<m<<endl; \n\tfor(d=1;d<m;d*=2);// get the max sum may be\n\td--;\n\tint lastans=0;//must online\n\tfor(int i=1;i<=m;i++){\n//\t\tcout<<\"number \"<<i<<endl;\n\t\tint flag;\n\t\tread(flag);\n\t\tint ans;\n\t\tif(flag==4){\n\t\t\tint k;\n\t\t\tread(k);\n\t\t\tk-=lastans;\n\t\t\tans=get_by_rank(k);//\u5df2\u77e5\u540d\u6b21\u53cd\u5411\u6c42\u7f16\u53f7\u3002 \n\t\t}\n\t\telse{\n\t\t\tint k;\n\t\t\tread(k);\n\t\t\tk-=lastans;\n\t\t\tans=get_rank(k);//\u8fd9\u4e09\u4e2d\u64cd\u4f5c\u90fd\u662f\u8981\u6c42\u7528\u7f16\u53f7\u6c42\u540d\u6b21\u3002 \n\t\t\tif(flag==1){\n\t\t\t\tint to;\n\t\t\t\tread(to);\n\t\t\t\tto-=lastans;\n\t\t\t\tB(to)=B(k);\n\t\t\t\tif(B(k).in){//\u51fa\u73b0 in \u5219\u5fc5\u7136\u662f\u6539\u53d8\u5757\uff0c\u5426\u5219\u662f\u539f\u5757 \n\t\t\t\t\t(B(k).in==PRE?pre:suf).id[B(k).id]=to;//change the sum to the loc should be and hash the change sum\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tout.dy[B(k).id]=to;//if not hash the change sum; \n\t\t\t\t}\n\t\t\t}\n\t\t\telse{//\u5fc5\u7136\u4f1a\u632a\u52a8\u5230\u961f\u9996\u6216\u961f\u5c3e \n\t\t\t\tif(B(k).in==0){//\u5982\u679c\u6ca1\u6709\u632a\u52a8\u8fc7\uff0c\u90a3\u4e48\u5728SPLAY\u63d2\u5165\u8fd9\u4e2a\u4e0b\u6807\u3002 \n\t\t\t\t\tout.insert(B(k).id);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\t(B(k).in==PRE?pre:suf).del(B(k).id);//\u56e0\u4e3a\u4f1a\u88ab\u632a\u52a8\u8fc7\uff0c\u6240\u4ee5\u5220\u53bb\u539f\u672c\u7684\u70b9\u3002\n\t\t\t\tif(flag==2){\n\t\t\t\t\tB(k)=(point){PRE,pre.insert(k)};//go ahead \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tB(k)=(point){SUF,suf.insert(k)};//turn back \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t\tlastans=ans;//must online\n\t}\n\treturn 0;//or wrong answer\n}\n```",
        "postTime": 1519654636,
        "uid": 28147,
        "name": "\u5289\u5b50\u98ba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u8ddf $[ZJOI2006]$ \u4e66\u67b6\u6709\u70b9\u50cf\uff0c\u4f46\u8fd9\u9898 $n\\leq 10^8$\uff0c\u90a3\u4e48\u5f00\u4e09\u500d\u6811\u72b6\u6570\u7ec4\u5c31\u6c34\u4e0d\u6389\u8fd9\u9898\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u975e\u5e73\u8861\u6811\u7684\u505a\u6cd5\u2014\u2014\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\n\n\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u7cbe\u9ad3\u5728\u4e8e\u6bcf\u6b21\u64cd\u4f5c $\\log n$ \u7684\u7a7a\u95f4\u3002\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c\uff0c\u82e5\u8be5\u533a\u95f4\u672a\u88ab\u5f00\u51fa\u6765\uff0c\u6211\u4eec\u624b\u52a8\u5f00\u51fa\u90a3\u4e2a\u70b9\u5e76\u4e14\u8ba1\u7b97 $sum$\uff0c\u5373\u533a\u95f4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u53ef\u4ee5\u7531 $len(l,r)=max(0,min(r,n)-max(l,1)+1)$ \u7528 $O(1)$ \u5f97\u5230\n\n```cpp\n#define len(l,r) (max(0,min(r,n)-max(l,1)+1))\nif(!now){\n\tnow=++cnt;\n\tsum[now]=len(l,r);\n}\n```\n\n\u6211\u4eec\u5bf9\u4e8e\u6ca1\u5f00\u51fa\u6765\u7684\u5de6\u513f\u5b50\u4e5f\u8981\u8ba1\u7b97\u51fa $sum$\n\n```cpp\nint mid=(l+r)>>1,k=L[now]?sum[L[now]]:len(l,mid);\n```\n\n\u5f53\u7136\uff0c\u5728 $query$ \u7684\u65f6\u5019\u8981\u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u7f16\u53f7\uff0c\u82e5 $l=r$ \u7684\u65f6\u5019\u7a7a\u95f4\u672a\u88ab\u5f00\u51fa\u6765\uff0c\u90a3\u4e48 $val[now]=l$\n\n```cpp\nif(!now){\n\tnow=++cnt;\n\tsum[now]=len(l,r);\n\tif(l == r) val[now]=l;\n}\n```\n\n\u8fd9\u5c31\u662f\u5927\u81f4\u8981\u70b9\u4e86\u3002\n\n\u64cd\u4f5c $1:$ \u5355\u70b9\u4fee\u6539\u7f16\u53f7\n\n\u64cd\u4f5c $2:$ \u5c06\u539f\u6765\u7684\u7f16\u53f7\u64a4\u9500\u6389\uff0c\u653e\u5230\u6700\u524d\u9762\n\n\u64cd\u4f5c $3:$ \u5c06\u539f\u6765\u7684\u7f16\u53f7\u64a4\u9500\u6389\uff0c\u653e\u5230\u6700\u540e\u9762\n\n\u64cd\u4f5c $4:$ \u76f4\u63a5\u67e5\u8be2\u7b2c $k$ \u5927\u7f16\u53f7\n\n\u8fd8\u6709\u6ce8\u610f\u7684\u70b9\uff1a\n\n1\u3001\u7f16\u53f7\u8d85\u7ea7\u5927\uff0c\u6240\u4ee5\u8003\u8651\u5f00\u4e00\u4e2a $map$ \u8bb0\u5f55\n\n2\u3001$map.count(x)$ \u548c $map[x]$ \u662f\u4e0d\u540c\u7684\uff0c$map.count(x)$ \u662f\u53ea\u8981\u8fd9\u4e2a\u503c\u4fee\u6539\u8fc7\u5c31\u4e3a $1$\uff0c\u5426\u5219\u4e3a $0$\u3002\u800c $map[x]$ \u76f4\u63a5\u8fd4\u56de\u503c\u3002\u6240\u4ee5\u82e5\u4eba\u5de5\u8bbe\u5b9a $map[x]=0$\uff0c$map.count(x)$ \u548c $map[x]$ \u8fd4\u56de\u7684\u503c\u524d\u8005\u4e3a $1$\uff0c\u540e\u8005\u4e3a $0$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(m\\log n)$\u3002\u7531\u4e8e\u64cd\u4f5c $2,3$ \u4e00\u6b21\u64cd\u4f5c\u5f00\u51fa\u6765\u7684\u662f $2\\log n$ \u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u7a7a\u95f4\u5f00\u5728 $60$ \u500d\u5de6\u53f3\u4e0d\u4f1a\u88ab\u5361\u3002\n\n$Code\\ Below:$\n\n```cpp\n#include <bits/stdc++.h>\n#define len(l,r) (max(0,min(r,n)-max(l,1)+1))\nusing namespace std;\nconst int maxn=100000+10;\nint n,m,rt,L[maxn*60],R[maxn*60],sum[maxn*60],val[maxn*60],cnt;\nmap<int,int> mp;\n\ninline int read(){\n\tregister int x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n\treturn (f==1)?x:-x;\n}\n\nint modify(int &now,int l,int r,int x,int id){\n\tif(!now){\n\t\tnow=++cnt;\n\t\tsum[now]=len(l,r);\n\t}\n\tif(l == r){\n\t\tval[now]=id;\n\t\treturn 0;\n\t}\n\tint mid=(l+r)>>1,k=L[now]?sum[L[now]]:len(l,mid);\n\tif(x <= mid) return modify(L[now],l,mid,x,id);\n\treturn k+modify(R[now],mid+1,r,x,id);\n}\n\nint update(int &now,int l,int r,int x,int v,int id){\n\tif(!now){\n\t\tnow=++cnt;\n\t\tsum[now]=len(l,r);\n\t}\n\tsum[now]+=v;\n\tif(l == r){\n\t\tval[now]=id;\n\t\treturn 0;\n\t}\n\tint mid=(l+r)>>1,k=L[now]?sum[L[now]]:len(l,mid);\n\tif(x <= mid) return update(L[now],l,mid,x,v,id);\n\treturn k+update(R[now],mid+1,r,x,v,id);\n}\n\nint query(int &now,int l,int r,int x){\n\tif(!now){\n\t\tnow=++cnt;\n\t\tsum[now]=len(l,r);\n\t\tif(l == r) val[now]=l;\n\t}\n\tif(l == r) return val[now];\n\tint mid=(l+r)>>1,k=L[now]?sum[L[now]]:len(l,mid);\n\tif(x <= k) return query(L[now],l,mid,x);\n\treturn query(R[now],mid+1,r,x-k);\n}\n\nint main()\n{\n\tn=read(),m=read();\n\tint op,x,y,Le=1,Ri=n,lastans=0;\n\tfor(int i=1;i<=m;i++){\n\t\top=read(),x=read()-lastans;\n\t\tif(op==1){\n\t\t\ty=read()-lastans;mp[y]=mp[x]?mp[x]:x;\n\t\t\tprintf(\"%d\\n\",lastans=1+modify(rt,-m,n+m,mp[y],y));\n\t\t}\n\t\tif(op==2){\n\t\t\tprintf(\"%d\\n\",lastans=1+update(rt,-m,n+m,mp[x]?mp[x]:x,-1,-1));\n\t\t\tupdate(rt,-m,n+m,mp[x]=--Le,1,x);\n\t\t}\n\t\tif(op==3){\n\t\t\tprintf(\"%d\\n\",lastans=1+update(rt,-m,n+m,mp[x]?mp[x]:x,-1,-1));\n\t\t\tupdate(rt,-m,n+m,mp[x]=++Ri,1,x);\n\t\t}\n\t\tif(op==4){\n\t\t\tprintf(\"%d\\n\",lastans=query(rt,-m,n+m,x));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1546222811,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u8003\u8651\u5c06\u6240\u6709\u7528\u6237\u5206\u62103\u7c7b\n\n\u539f\u672c\u76841->n\uff0c\u88ab\u63d0\u524d\u7684\uff0c\u88ab\u62c9\u540e\u7684\n\n\u5bf92,3\u7c7b\u90fd\u5f00\u4e2a\u5e73\u8861\u6811\n\n\u8bb0\u5f55\u6bcf\u4e2a\u7528\u6237\u5c5e\u4e8e\u54ea\u4e00\u7c7b\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u5e73\u8861\u6811\u4e2d\u7684\u8282\u70b9\u7f16\u53f7\n\n\u5e73\u8861\u6811\u4e5f\u53cd\u8fc7\u6765\u8bb0\u5f55\u8282\u70b9\u5bf9\u5e94\u7684\u7528\u6237\u7f16\u53f7\n\n\u8fd9\u6837\u5982\u679c\u57282,3\u7c7b\u67e5\u8be2rank,k\u5927\u5c31ok\u4e86\n\n\u5982\u679c\u57281\u7c7b\u67e5\u8be2rank,k\u5927\n\n\u56e0\u4e3a\u8282\u70b9\u4e2a\u6570\u662fO(n)\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u7ef4\u62a4\n\n\u6240\u4ee5\u5bf9\u4e0d\u57281\u7c7b\u7684\u70b9\u7528\u5e73\u8861\u6811\u7ef4\u62a4\n\n\nO(mlogm)\n\n\u5728\u5b9e\u73b0\u4e2d\uff0c2,3\u7c7b\u6211\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e86\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,l,r) for(int i=l;i<=r;++i)\nint lastans;\n#define gc (c=getchar())\nint read()\n{\n    char c;\n    while(gc<'0'); \n    int x=c-'0';\n    while(gc>='0')x=x*10+c-'0';\n    return x;\n}\nint r()\n{\n#ifdef ONLINE_JUDGE\n    return read()-lastans;\n#else\n    return read();\n#endif\n}\n\nconst int N=1e5+5;\nint n,m,d;\nstruct SET\n{\nint a[N*3],id[N],n;\nint insert(int _id)\n{\n    ++n;\n    id[n]=_id;\n    int i=n+d;\n    a[i]=1;\n    while(i>>=1)++a[i];\n    return n;\n}\nvoid del(int i)\n{\n    i+=d;\n    a[i]=0;\n    while(i>>=1)--a[i];\n}\nint rank(int i)\n{\n    i+=d;\n    int ans=a[i];\n    while(i)\n    {\n        if(i&1)ans+=a[i-1];\n        i>>=1;\n    }\n    return ans;\n}\nint find_by_rank(int x)\n{\n    int i=1;\n    while(i<=d)\n    {\n        if(x<=a[i*2])i*=2;\n        else \n        {\n            x-=a[i*2];i=i*2+1;\n        }\n    }\n    return id[i-d];    \n}\n};\nSET pre,suf;\n\nstruct SPLAY\n{\n#define cl(x) c[x][0]\n#define cr(x) c[x][1]\nint fa[N],c[N][2],sz[N];\nint v[N],n,rt;\nint rank(int x)\n{\n    int ans=x;\n    int i=rt;\n    while(i)\n    if(v[i]>x)i=cl(i);\n    else \n    {\n        ans-=sz[cl(i)]+1;\n        i=cr(i);\n    }\n    return ans;\n}\nvoid sc(int y,int x,bool d)\n{\n    fa[x]=y;c[y][d]=x;\n}\nbool get(int x)\n{\n    return x==c[fa[x]][1];\n}\nvoid up(int x)\n{\n    sz[x]=sz[cl(x)]+sz[cr(x)]+1;\n}\nvoid rot(int x)\n{\n    int y=fa[x];bool d=get(x);\n    if(y==rt)fa[rt=x]=0;\n    else sc(fa[y],x,get(y));\n    sc(y,c[x][!d],d);\n    sc(x,y,!d);\n    up(y);\n}\nvoid splay(int x,int to=0)\n{\n    int y;\n    while(y=fa[x],y!=to)\n    {\n        if(fa[y]==to){rot(x);break;}\n        rot(get(x)==get(y)?y:x);rot(x);\n    }\n    up(x);\n}\nvoid insert(int x)\n{\n    ++n;\n    v[n]=x;sz[n]=1;\n    if(!rt)\n    {\n        rt=n;return ;\n    }\n    int i=rt;\n    while(1)\n    {\n        bool d=v[i]<x;\n        if(c[i][d]) i=c[i][d];\n        else \n        {\n            sc(i,n,d);\n            splay(n);\n            return ;\n        }\n    }\n}\nmap<int,int>dy;\nint DY(int x)\n{\n    if(!dy.count(x))return x;\n    return dy[x];\n}\nint find_by_rank(int x)\n{\n    if(!rt)return DY(x);\n    int i=rt,i0=0,rk=1;\n    while(i)\n    {\n        i0=i;\n        if(x>v[i]-(sz[cl(i)]+rk)) \n        {\n            rk+=sz[cl(i)]+1;\n            i=c[i][1];\n        }\n        else i=c[i][0];\n    }\n    splay(i0);\n    return DY(x+rk-1);\n}\n}out;\n\nconst int PRE=1,SUF=2;\nstruct point\n{\n    int in,id;\n};\nmap<int,point>belong;//i de wei zhi  \npoint &B(int x)\n{\n    if(!belong.count(x))belong[x]=(point){0,x};\n    return belong[x];\n}\nint rk(int x)\n{\n    if(B(x).in==1)\n    {\n        return pre.a[1]+1 - pre.rank(B(x).id);\n    }\n    if(B(x).in==2)\n    {\n        return n-suf.a[1]+suf.rank(B(x).id);\n    }\n    return pre.a[1]+out.rank(B(x).id);\n}\nint find_by_rank(int x)\n{\n    if(x<=pre.a[1]) return pre.find_by_rank(pre.a[1]-x+1);\n    if(x>n-suf.a[1]) return suf.find_by_rank(x-(n-suf.a[1]));\n    return out.find_by_rank(x-pre.a[1]);\n}\n\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    //freopen(\"1.out\",\"w\",stdout);\n    n=read();m=read();\n    for(d=1;d<m;d<<=1);d-=1;\n    lastans=0;\n    while(m--)\n    {\n        int type=read(),x=r(),ans;\n        if(type==4)\n        {\n            ans=find_by_rank(x);\n        }\n        else \n        {\n            ans=rk(x);\n            if(type==1)\n            {\n                int y=r();\n                B(y)=B(x);\n                if(B(x).in) (B(x).in==PRE?pre:suf).id[B(x).id]=y;    \n                else out.dy[B(x).id]=y;\n            }\n            else\n            {\n                if(B(x).in==0) out.insert(B(x).id);\n                else \n                (B(x).in==PRE?pre:suf).del(B(x).id);    \n                if(type==2) B(x)=(point){PRE,pre.insert(x)};\n                else B(x)=(point){SUF,suf.insert(x)};\n            }\n        }\n\n        printf(\"%d\\n\",lastans=ans);\n    }\n}    \n\n```",
        "postTime": 1514528535,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u770b\u9898\u89e3\u91cc\u6ca1\u6709\u5199 fhq \u7684\uff0c\u6765\u8d21\u732e\u4e00\u53d1 fhq \u9898\u89e3\u3002\n\n\u9996\u5148\uff0cfhq treap \u53ef\u4ee5\u5f88\u8f7b\u677e\u7ef4\u62a4\u77e5\u6392\u540d\uff0c\u6c42\u70b9\u7684\u7f16\u53f7\u53ca\u7528\u6237\u7f16\u53f7\uff0c\u4f46\u4e0d\u80fd\u5f88\u597d\u7684\u7ef4\u62a4\u77e5\u7528\u6237\u7f16\u53f7\u6765\u6392\u540d\u3002\u6211\u4eec\u5148\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u989d\u5916\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\uff0c\u5c31\u662f\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\u3002\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7 $x$\uff0c\u6839\u636e BST \u7684\u6027\u8d28\uff0c\u5219\u5b83\u7684\u5de6\u5b50\u6811\u5e94\u8be5\u6392\u540d\u90fd\u5c0f\u4e8e\u5b83\uff0c\u5982\u679c\u5b83\u662f\u5b83\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u5219\u5b83\u7684\u7236\u4eb2\u4e0e\u5b83\u7684\u5de6\u5144\u5f1f\u6392\u540d\u4e5f\u5c0f\u4e8e\u5b83\uff0c\u6839\u636e\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u9012\u5f52\u6c42\u89e3\u51fa\u77e5\u8282\u70b9\u7f16\u53f7\u6c42\u6392\u540d\u7684\u95ee\u9898\u3002\n\n\u5982\u679c\u6211\u4eec\u77e5\u9053\u7684\u662f\u7528\u6237\u7f16\u53f7\u800c\u4e0d\u662f\u8282\u70b9\u7f16\u53f7\uff0c\u53ea\u7528\u62ff `map` \u5bf9\u7528\u6237\u7f16\u53f7\u548c\u8282\u70b9\u7f16\u53f7\u505a\u4e00\u4e2a\u6620\u5c04\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898 $n \\le 10^8$\uff0c\u4e0d\u80fd\u63d2\u5165\u8fd9\u4e48\u591a\u8282\u70b9\u3002\u539f\u6765\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b58\u4e00\u4e2a\u7528\u6237\u7f16\u53f7\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u6bb5\u8fde\u7eed\u7684\u7528\u6237\u7f16\u53f7\u5373\u53ef\u3002\u5177\u4f53\u7ec6\u8282\u770b\u4ee3\u7801\u3002\n\n\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u6211\u4eec\u53d6\u7528\u6237\u7f16\u53f7\u8fde\u7eed\u6bb5\u7684\u5de6\u7aef\u70b9\u4f5c\u4e3a\u548c\u8282\u70b9\u7f16\u53f7\u505a\u6620\u5c04\u3002\u7531\u4e8e\u5b58\u7684\u662f\u8fde\u7eed\u6bb5\uff0c`sz(x)` \u53d6\u503c\u4e3a\u8fde\u7eed\u6bb5\u7684\u957f\u5ea6\u3002\n\n```cpp\nint New(int l, int r){\n    mp[l] = ++tot;\n    rd(tot) = rand(); sz(tot) = r-l+1;\n    l(tot) = l; r(tot) = r;\n    return tot;\n}\n```\n\n`push_up` \u7684\u65f6\u5019\u989d\u5916\u7ef4\u62a4 `fa` \u4fe1\u606f\n\n```cpp\nvoid push_up(int x){\n    sz(x) = sz(ls(x))+sz(rs(x))+len(x);\n    fa(ls(x)) = fa(rs(x)) = x;\n}\n```\n\n`merge` \u6ca1\u4ec0\u4e48\u533a\u522b\uff0c`split` \u8981\u6ce8\u610f\uff0c\u5f53\u524d\u8282\u70b9\u7684 `sz` \u4e0d\u518d\u4e3a\u4e00\n\n```cpp\nint merge(int x, int y){\n    if (!x || !y) return x|y;\n    if (rd(x) > rd(y)){\n        rs(x) = merge(rs(x),y);\n        push_up(x);\n        return x;\n    }else{\n        ls(y) = merge(x,ls(y));\n        push_up(y);\n        return y;\n    }\n}\nvoid split(int p, int k, int &x, int &y){\n    if (!p) {\n        x = y = 0;\n        return;\n    }\n    if (sz(ls(p)) >= k){\n        y = p;\n        split(ls(p),k,x,ls(y));\n    }else{\n        x = p;\n        split(rs(p),k-sz(ls(p))-len(p),rs(x),y); // len(x) = r(x)-l(x)+1;\n    }\n    push_up(p);\n}\n```\n\n\n\u9700\u8981\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 `k-sz(ls(p))-len(p)` \u4e0d\u4f1a\u51fa\u73b0\u662f\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u4f1a\u5c06\u4e00\u4e2a\u8282\u70b9\u4e2d\u7684\u8fde\u7eed\u7f16\u53f7\u518d\u6b21\u5206\u88c2\uff0c\u5982\u679c\u6709\u9700\u8981\u5206\u88c2\u4e00\u4e2a\u8282\u70b9\uff0c\u4f1a\u5148\u5206\u88c2\u8282\u70b9\uff0c\u518d\u8c03\u7528\u6b64\u51fd\u6570\u3002\n\n\u77e5\u6392\u540d\u6c42\u7528\u6237\u7f16\u53f7\uff1a\n\n```cpp\nint find_kth(int x, int rk){\n    if (rk <= sz(ls(x))) return find_kth(ls(x),rk); // \u9012\u5f52\u5de6\u8fb9\n    rk -= sz(ls(x));\n    if (rk <= len(x)) return l(x)+rk-1;\n    // \u5982\u679c\u5728\u8fd9\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u8fde\u7eed\u7f16\u53f7\u91cc\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u7b49\u4e8e\u533a\u95f4\u5de6\u7aef\u70b9\n    // \u6240\u4ee3\u8868\u7684\u7528\u6237\u7f16\u53f7\u52a0\u4e0a\u6392\u540d\u518d -1\n    return find_kth(rs(x),rk-len(x)); \n    // \u76f8\u5f53\u4e8e\u51cf\u53bb sz(ls(x)) \u4e0e len(x) \u9012\u5f52\u53f3\u8fb9\n}\n```\n\n\u77e5\u8282\u70b9\u7f16\u53f7\u6c42\u6392\u540d\uff1a\uff08\u6c42\u7684\u662f\u8282\u70b9\u4ee3\u8868\u8fde\u7eed\u7528\u6237\u7f16\u53f7\u53f3\u7aef\u70b9\u7684\u6392\u540d\uff09\n\n```cpp\nint find_rk(int x){\n    int res = sz(ls(x))+len(x); \n    // \u5b83\u7684\u5de6\u5b50\u6811\u548c\u5b83\u81ea\u8eab\u53f3\u7aef\u70b9\u5de6\u8fb9\u7684\u7f16\u53f7\u6392\u540d\u6bd4\u5b83\u5c0f\n    while(x != rt && x){ // \u4e00\u76f4\u5faa\u73af\u5230\u6839\n        if (rs(fa(x)) == x) res += sz(ls(fa(x)))+len(fa(x));\n        // \u5b83\u662f\u53f3\u5b50\u6811\uff0c\u7236\u4eb2\u548c\u5de6\u5144\u5f1f\u90fd\u6bd4\u5b83\u5c0f\n        x = fa(x);\n    }\n    return res;\n}\n```\n\n\u5220\u9664\u63d2\u5165\u4e00\u6bb5\u533a\u95f4\uff1a\n\n```cpp\nvoid erase(int l, int r){\n    int x,y,z;\n    split(rt,l-1,x,y);\n    split(y,r-l+1,y,z);\n    rt = merge(x,z);\n}\nvoid insert(int p, int l, int r){\n    int x,y;\n    split(rt,p-1,x,y);\n    rt = merge(x,merge(New(l,r),y));\n}\n```\n\n\u4e3b\u51fd\u6570\uff1a\n\n```cpp\nwhile(m--){\n    int opt,x,y;\n    cin >> opt;\n    if (opt == 4){\n        int rk;\n        cin >> rk;  rk -= lst;\n        cout << (lst = find_kth(rt,rk)) << endl;\n        continue;\n    }\n    cin >> x; x -= lst;\n    if (opt == 1){\n        cin >> y; y -= lst;\n    }\n    auto it = --mp.upper_bound(x);\n    int l = (*it).fi, p = (*it).se;\n    int r = r(p);\n    // \u627e\u5230\u7528\u6237\u7f16\u53f7\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u4ee5\u53ca\u8282\u70b9\u5bf9\u5e94\u7684\u8fde\u7eed\u7528\u6237\u7f16\u53f7\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\n    \n    \n    cout << (lst = find_rk(p)-(r-x)) << endl;\n    // \u6392\u540d\u662f \u8fde\u7eed\u7528\u6237\u6bb5\u53f3\u7aef\u70b9\u7684\u6392\u540d\u51cf\u53bb (\u53f3\u7aef\u70b9\u5230\u7f16\u53f7 x \u7684\u8ddd\u79bb)\n    \n    erase(lst-(x-l),lst+(r-x));\n    // \u5c06\u8fd9\u4e2a\u6bb5\u5220\u53bb\n\n    if (x > l) insert(lst-(x-l),l,x-1);\n    if (x < r) insert(lst,x+1,r);\n    if (opt == 1) insert(lst,y,y);\n    if (opt == 2) insert(1,x,x);\n    if (opt == 3) insert(n,x,x);\n    \n    // \u4f9d\u9898\u610f\u63d2\u5165\u65b0\u6bb5\u5373\u53ef\n}\n```\n\n\n\n\n\n",
        "postTime": 1670757072,
        "uid": 127682,
        "name": "lg_zhou",
        "ccfLevel": 7,
        "title": "P3285 [SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ"
    },
    {
        "content": "## \u9898\u89e3\n\n\u8be6\u7ec6\u63cf\u8ff0\u4e00\u4e0b\u9898\u89e3\u7b2c\u4e8c\u7bc7\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u505a\u6cd5\u662f\u5565\u610f\u601d\u3002\n\n\u6211\u4eec\u5148\u7ed9\u6bcf\u4e2a\u7528\u6237\u8d4b\u4e88\u4e00\u4e2a\u6743\u503c\uff0c\u5b83\u4eec\u6743\u503c\u7684\u6392\u540d\u5c31\u662f\u5b83\u4eec\u5728\u9898\u76ee\u4e2d\u7684\u6392\u540d\u3002\u6700\u5f00\u59cb\u7684\u6743\u503c\u533a\u95f4\u662f $[1,n]$\uff0c\u7528\u4e24\u4e2a\u6307\u9488 $L,R$ \u7ef4\u62a4\u503c\u57df\u8fb9\u754c\u3002\u6bcf\u51fa\u73b0\u4e00\u4e2a\u5c06\u67d0\u4e2a\u7528\u6237\u632a\u5230\u6700\u524d\u9762\u65f6\u6269\u5c55\u5de6\u8fb9\u754c\uff0c\u632a\u5230\u6700\u540e\u9762\u65f6\u62d3\u5c55\u53f3\u8fb9\u754c\uff0c\u4ee5\u8fd9\u4e2a\u6743\u503c\u4e3a\u4e0b\u6807\u5f00\u4e00\u68f5\u52a8\u6001\u5f00\u70b9\u6743\u503c\u7ebf\u6bb5\u6811\u3002\u4f46\u56e0\u4e3a\u5e8f\u5217\u957f\u5ea6\u5f88\u5927\uff0c\u64cd\u4f5c\u6b21\u6570\u53ef\u4ee5\u63a5\u53d7\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u5e76\u4e0d\u80fd\u8bb0\u5f55\u201c\u54ea\u4e9b\u4f4d\u7f6e\u6709\u4eba\u201d\uff0c\u800c\u662f\u8bb0\u5f55\u54ea\u4e9b\u4f4d\u7f6e\u201c\u6ca1\u6709\u4eba\u201d\uff0c\u8fd9\u6837\u5c31\u90fd\u53ef\u4ee5\u505a\u4e86\u3002\n\n1. \u5c06\u7f16\u53f7\u4e3a $x$ \u7684\u7528\u6237\u7f16\u53f7\u6539\u4e3a $y$\uff0c\u5e76\u8f93\u51fa\u8be5\u7528\u6237\u7684\u6392\u540d\u3002\n\n\u7528\u4e00\u4e2a $\\text{map}$  \u7ef4\u62a4\u7f16\u53f7\u5230\u7528\u6237\u6743\u503c\u7684\u6620\u5c04\u3002\u5982\u679c $\\text{map}$ \u4e2d\u6709 $x$ \u5219\u6b63\u5e38\u53d6\u51fa\u5176\u6743\u503c\uff0c\u5426\u5219\u5176\u6743\u503c\u5c31\u4e3a\u7f16\u53f7\u672c\u8eab\uff0c\u82e5\u4ee4\u6743\u503c\u4e3a $v$\uff0c$[l, r]$ \u503c\u57df\u533a\u95f4\u6ca1\u6709\u6570\u7684\u4f4d\u7f6e\u6570\u91cf\u4e3a $w(l,r)$\uff0c\u5219\u8be5\u7528\u6237\u6392\u540d\u4e3a $v - L + 1 - w(l,r)$\u3002\n\n2. \u5c06\u7f16\u53f7\u4e3a $x$ \u7684\u7528\u6237\u6392\u540d\u63d0\u5347\u5230\u7b2c\u4e00\u4f4d\uff0c\u5e76\u8f93\u51fa\u8be5\u7528\u6237\u6267\u884c\u8be5\u64cd\u4f5c\u4e4b\u524d\u7684\u6392\u540d\u3002\n\n\u8fd8\u662f\u6309\u7167\u521a\u624d\u7684\u65b9\u6cd5\u6c42\u51fa\u8be5\u7528\u6237\u7684\u6743\u503c\uff0c\u6c42\u6392\u540d\u7684\u65b9\u6cd5\u4e5f\u7c7b\u4f3c\u3002\u6b64\u65f6\u5728\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u6c42\u51fa\u7684\u6743\u503c\u4f4d\u7f6e\uff0c\u8868\u793a\u8fd9\u4e2a\u5730\u65b9\u5df2\u7ecf\u6ca1\u6709\u4eba\u5e76\u4e14\u4e5f\u4e0d\u518d\u53ef\u80fd\u6709\u4eba\uff0c\u56e0\u4e3a\u65b0\u4ea7\u751f\u4eba\u7684\u4f4d\u7f6e\u53ea\u53ef\u80fd\u662f\u5728\u5934\u5c3e\uff0c\u5e76\u5c06\u8be5\u7f16\u53f7\u7684\u6620\u5c04\u6307\u5411 $L - 1$\u3002\n\n3. \u5c06\u7f16\u53f7\u4e3a $x$ \u7684\u7528\u6237\u6392\u540d\u63d0\u5347\u5230\u6700\u540e\u4e00\u4f4d\uff0c\u5e76\u8f93\u51fa\u8be5\u7528\u6237\u6267\u884c\u8be5\u64cd\u4f5c\u4e4b\u524d\u7684\u6392\u540d\u3002\n\n\u548c $2$ \u64cd\u4f5c\u7c7b\u4f3c\u3002\n\n4. \u6c42\u51fa\u6392\u540d\u4e3a $k$ \u7684\u7528\u6237\u7684\u7f16\u53f7\u3002\n\n\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6c42\u51fa\u7b2c $k$ \u5c0f\u7684\u6743\u503c\uff0c\u6c42\u7f16\u53f7\u5efa\u7acb\u4e00\u4e2a\u6743\u503c\u5230\u7f16\u53f7\u7684\u53cd\u6620\u5c04\u5373\u53ef\uff0c\u6ce8\u610f\u5728\u524d\u9762\u51e0\u4e2a\u64cd\u4f5c\u7684\u65f6\u5019\u4e5f\u8981\u4fee\u6539\u8fd9\u4e2a\u53cd\u6620\u5c04\u3002\u5982\u679c\u53cd\u6620\u5c04\u91cc\u6709\u6c42\u5f97\u6743\u503c\u7684\u6620\u5c04\u5c31\u6b63\u5e38\u53d6\u51fa\u7f16\u53f7\uff0c\u5426\u5219\u7f16\u53f7\u548c\u6743\u503c\u76f8\u540c\uff0c\u9053\u7406\u548c $1$ \u64cd\u4f5c\u4e2d\u6240\u8bf4\u7684\u5dee\u4e0d\u591a\u3002\n\n\u81f3\u6b64\u505a\u5b8c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log n)$\u3002",
        "postTime": 1656054991,
        "uid": 385093,
        "name": "uniqueharry",
        "ccfLevel": 0,
        "title": "P3285 [SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u9898\u89e3"
    },
    {
        "content": "\u5177\u4f53\u601d\u8def\u5927\u5bb6\u90fd\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u4e86\u3002\n\n\u5f00\u4e00\u4e2asplay\u7ef4\u62a4\u6392\u540d\u5e8f\u5217\uff0c\u5c06\u672a\u8fdb\u884c\u64cd\u4f5c\u7684\u8282\u70b9\u5408\u5e76\u3002\n\n\u7528map\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u7f16\u53f7\u5728splay\u4e2d\u5bf9\u5e94\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5bf9\u4e8e\u5408\u5e76\u7684\u8282\u70b9\uff0c\u53ea\u8981\u8bb0\u5f55\u53f3\u7aef\u70b9\u7684\u7f16\u53f7\u5373\u53ef(\u53ef\u4ee5lower_bound\u6c42\u51fa)\n\n\u7136\u540e\u6a21\u62df\u64cd\u4f5c\u8fc7\u7a0b\u3002\n\n\u6211\u7b80\u5316\u4e86\u4e00\u4e0b\u4ee3\u7801\uff0c\u4ec5\u63d0\u4f9b\u4e00\u4e2a\u53ef\u80fd\u6bd4\u8f83\u7cbe\u7b80\u7684\u4ee3\u7801\u4f9b\u53c2\u8003\u3002\n```cpp\n#include<bits/stdc++.h>\n#include<bitset>\ntypedef long long LL;\ntypedef double DB;\n#define REP(i,s,t) for(register int i=s;i<=t;++i)\n#define PER(i,s,t) for(register int i=s;i>=t;--i)\n#define FOREDGE(i,x,v) for(int i=fir[x],v=to[i];i;i=nex[i],v=to[i])\ntemplate<typename T>inline T in(){\n    T ans=0;bool b=0;char ch=getchar();\n    while(ch<'0'||ch>'9')b=(ch=='-'),ch=getchar();\n    while(ch>='0'&&ch<='9')ans=ans*10+ch-48,ch=getchar();\n    return b?-ans:ans;\n}\n#define II in<int>()\n#define IL in<LL>()\n//<-----QAQ----->\nconst int MX=3e5+100;\nstd::map<int,int>MP;\nint n,m;\nstruct Splay{\n#define ls ch[0][x]\n#define rs ch[1][x]\n    int fa[MX],ch[2][MX],sz[MX],L[MX],R[MX],size,root;\n    void pushUp(int x){\n        sz[x]=sz[ls]+sz[rs]+R[x]-L[x]+1;\n    }\n    int newNode(int id,int f,int lc,int rc,int l,int r){\n        int x=id;fa[x]=f;\n        ls=lc;rs=rc;L[x]=l;R[x]=r;\n        return pushUp(x),x;\n    }\n    void init(int len){\n        root=newNode(++size,0,0,0,1,len);R[0]=-1;\n    }\n    int ws(int x){\n        return x==ch[1][fa[x]];\n    }\n    void rotate(int x){\n        int f=fa[x],ff=fa[f],h=ws(x),w=ch[h^1][x];\n        fa[x]=ff;if(ff)ch[ws(f)][ff]=x;\n        fa[f]=x;ch[h^1][x]=f;\n        if(w)fa[w]=f;ch[h][f]=w;\n        pushUp(f),pushUp(x);\n    }\n    void splay(int x,int goal=0){\n        if(x==goal)return;\n        for(;fa[x]!=goal;rotate(x))if(fa[fa[x]]!=goal)rotate(ws(x)^ws(fa[x])?x:fa[x]);\n        if(goal==0)root=x;\n    }\n    void split(int x,int id){\n        if(id!=L[x])ls=fa[ls]=newNode(++size,x,ls,0,L[x],id-1),MP[id-1]=ls,pushUp(ls),fa[0]=0;\n        if(id!=R[x])rs=fa[rs]=newNode(++size,x,0,rs,id+1,R[x]),MP[R[x]]=rs,pushUp(rs),fa[0]=0;\n        L[x]=R[x]=id;MP[id]=x;pushUp(x);\n    }\n    int query(int x){\n        splay(x);\n        return sz[ls]+1;\n    }\n    void pushHead(int id){\n        int x=root;\n        while(ls)x=ls;\n        ls=newNode(id,x,0,0,L[id],R[id]);\n        pushUp(id),splay(id);\n    }\n    void pushTail(int id){\n        int x=root;\n        while(rs)x=rs;\n        rs=newNode(id,x,0,0,L[id],R[id]);\n        pushUp(id),splay(id);\n    }\n    void remove(int x){\n        splay(x);\n        if(!ls)return root=rs,fa[rs]=0,rs=sz[x]=0,void();\n        if(!rs)return root=ls,fa[ls]=0,ls=sz[x]=0,void();\n        int p=ls,s=rs;\n        while(ch[1][p])p=ch[1][p];\n        while(ch[0][s])s=ch[0][s];\n        splay(p),splay(s,p);\n        ch[0][s]=0;fa[x]=0;\n        pushUp(x),pushUp(s),pushUp(p);\n    }\n    int rnk(int k){\n        int x=root;\n        for(;;){\n            if(sz[ls]>=k)x=ls;\n            else if(sz[x]-sz[rs]<k)k-=sz[x]-sz[rs],x=rs;\n            else break;\n        }\n        return L[x]+k-1-sz[ls];\n    }\n#undef ls\n#undef rs\n}T;\nint ans,pre;\nint modify(int y,int x){\n    int id=MP.lower_bound(x)->second;\n    T.split(id,x);\n    ans=T.query(id);\n    T.L[id]=T.R[id]=y;MP[y]=id;\n    return printf(\"%d\\n\",ans),ans;\n}\nint move(int x,void (Splay::*op)(int)){\n    int id=MP.lower_bound(x)->second;\n    T.split(id,x);\n    ans=T.query(id);\n    T.remove(id);\n    (T.*op)(id);\n    return printf(\"%d\\n\",ans),ans;\n}\nint rnk(int x){\n    ans=T.rnk(x);\n    return printf(\"%d\\n\",ans),ans;\n}\nint main(){\n    n=II;m=II;\n    T.init(n);\n    MP[n]=1;\n    REP(i,1,m)switch(II){\n        case 1:pre=modify(II-pre,II-pre);break;\n        case 2:pre=move(II-pre,&Splay::pushHead);break;\n        case 3:pre=move(II-pre,&Splay::pushTail);break;\n        case 4:pre=rnk(II-pre);break;\n    }\n}\n```",
        "postTime": 1576311085,
        "uid": 32483,
        "name": "2344b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p3285scoi2014%E6%96%B9%E4%BC%AF%E4%BC%AF%E7%9A%84oj/)\n\n---\n# Solution\n\u8fd9\u662f\u4e00\u9053\u6570\u636e\u7ed3\u6784\u5927\u66b4\u529b\u9898\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5f88\u663e\u7136\u7684\u53d1\u73b0\u5bf9\u4e8e\u8be2\u95ee\u6392\u540d\uff0c**\u7ef4\u62a4\u6392\u540d\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e0a\u4e00\u4e2a\u7ef4\u62a4\u4e0b\u6807\u7684splay**\u3002\n\n\u56e0\u4e3a\u70b9\u7684\u6570\u91cf\u5947\u591a\uff0c\u8fd9\u8ba9\u6211\u4eec\u56de\u60f3\u8d77NOIP2017 \u5217\u961f\uff0c**\u6211\u4eec\u53ef\u4ee5\u7528\u201csplay \u52a8\u6001\u5f00\u70b9\u201d\u8fd9\u6837\u7684\u64cd\u4f5c\u6765\u89e3\u51b3**\uff0c\u5373\u4e00\u5f00\u59cb\u6211\u4eec\u628a\u6240\u6709\u4fe1\u606f\u5168\u90e8\u538b\u5230\u4e00\u4e2a\u70b9\u91cc\u9762\u53bb\uff08\u5373\u4e00\u4e2a\u70b9\u4ee3\u8868\u4e00\u6bb5\u533a\u95f4\uff09\uff0c\u9700\u8981\u7684\u65f6\u5019\u518d\u7528\u201c\u62c6\u70b9\u201d\u628a\u70b9\u62c6\u5f00\u3002\n\n\u95ee\u9898\u662f\u8fd9\u7834\u9898\u5f88\u8ba9\u4eba\u8ba8\u538c\u5730\u51fa\u4e86\u4e24\u4e2a\u57fa\u4e8e\u7f16\u53f7\u7684\u64cd\u4f5c\u3002\u56e0\u4e3a\u6211\u4eec\u7684splay\u662f\u4ee5\u4e0b\u6807\u505a\u4e3a\u6743\u503c\u6765\u7684\uff0c\u5931\u53bb\u4e86\u7ef4\u62a4\u7f16\u53f7\u7684\u80fd\u529b\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u8bb0\u5f55\u6bcf\u4e2a\u7f16\u53f7\u7684\u70b9\u5728splay\u4e2d\u7684\u4e0b\u6807\u3002\u5f88\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u70b9\u7684\u7f16\u53f7\u5341\u5206\u5de8\u5927\uff0c\u6ca1\u6cd5\u76f4\u63a5\u5f00\u6876\u6765\u5b58\u3002\n\n\u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eecsplay\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651**\u5f00\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5728\u62c6\u70b9/\u6539\u7f16\u53f7\u7684\u65f6\u5019\u66b4\u529b\u533a\u95f4\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002**\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(mlogn)$\n\n\u5c31\u9171\uff0c\u8fd9\u9898\u6211\u4eec\u5c31\u5207\u6389\u5566\u0669(\u0e51>\u25e1<\u0e51)\u06f6 \n\n---\n# Code\n```cpp\n//Luogu P3285 [SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\n//Mar,11th,2019\n//\u52a8\u6001\u5f00\u70b9splay+\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u9b3c\u755c\u9898\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000*2+100;\nconst int M=200000000;\nstruct SegmentTree\n{\n\t#define mid ((now_l+now_r)>>1)\n\tint son[N*20][2],w[N*20],to;\n\tvoid Change(int l,int r,int num,int now,int now_l,int now_r)\n\t{\n\t\tif(now_l>=l and now_r<=r)\n\t\t{\n\t\t\tw[now]=num;\n\t\t\treturn;\n\t\t}\n\t\tif(l<=mid)\n\t\t{\n\t\t\tif(son[now][0]==0) son[now][0]=++to,w[to]=w[now];\n\t\t\tChange(l,r,num,son[now][0],now_l,mid);\n\t\t}\n\t\tif(r>mid)\n\t\t{\n\t\t\tif(son[now][1]==0) son[now][1]=++to,w[to]=w[now];\n\t\t\tChange(l,r,num,son[now][1],mid+1,now_r);\n\t\t}\n\t}\n\tint Query(int x,int now,int now_l,int now_r)\n\t{\n\t\tif(now_l==now_r) return w[now];\n\t\tif(x<=mid)\n\t\t{\n\t\t\tif(son[now][0]==0) return w[now];\n\t\t\telse return Query(x,son[now][0],now_l,mid);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(son[now][1]==0) return w[now];\n\t\t\telse return Query(x,son[now][1],mid+1,now_r);\n\t\t}\n\t}\n\t#undef mid\n}sgt;//\u7f16\u53f7->\u4e0b\u6807\nstruct SPLAY\n{\n\t#define root son[0][1]\n\tint son[N][2],fa[N],cnt[N],no[N],size[N],to;\n\tinline void update(int x)\n\t{\n\t\tsize[x]=size[son[x][0]]+size[son[x][1]]+cnt[x];\n\t}\n\tinline void rotate(int x,int type)\n\t{\n\t\tint y=fa[x],z=fa[y];\n\t\tfa[x]=z,son[z][y==son[z][1]]=x;\n\t\tfa[son[x][type]]=y,son[y][!type]=son[x][type];\n\t\tfa[y]=x,son[x][type]=y;\n\t\tupdate(y),update(x);\n\t}\n\tvoid splay(int x,int to)\n\t{\n\t\twhile(fa[x]!=to)\n\t\t{\n\t\t\tif(fa[fa[x]]!=to and x==son[fa[x]][fa[x]==son[fa[fa[x]]][1]])\n\t\t\t\trotate(fa[x],x==son[fa[x]][0]);\n\t\t\trotate(x,x==son[fa[x]][0]);\n\t\t}\n\t}\n\tvoid split(int x,int K)//\u4f20\u5165\u4e0b\u6807\n\t{\n\t\tsplay(x,0);\n\t\tint t1=son[x][0],t2=son[x][1];\n\t\twhile(son[t1][1]!=0) t1=son[t1][1];\n\t\twhile(son[t2][0]!=0) t2=son[t2][0];\n\t\tsplay(t1,0);\n\t\tsplay(t2,root);\n\t\t\t\n\t\tif(K!=1)\n\t\t{\n\t\t\tson[x][0]=++to,fa[to]=x;\n\t\t\tno[to]=no[x],size[to]=cnt[to]=K-1;\n\t\t\tsgt.Change(no[to],no[to]+cnt[to]-1,to,1,1,M);\n\t\t}\n\t\tif(K!=cnt[x])\n\t\t{\n\t\t\tson[x][1]=++to,fa[to]=x;\n\t\t\tno[to]=no[x]+K,size[to]=cnt[to]=cnt[x]-K;\n\t\t\tsgt.Change(no[to],no[to]+cnt[to]-1,to,1,1,M);\n\t\t}\n\t\tno[x]=no[x]+K-1,cnt[x]=1;\n\t}\n\tint GetKth(int x,int K)//\u8fd4\u56de\u4e0b\u6807\n\t{\n\t\tif(size[son[x][0]]>=K) \n\t\t\treturn GetKth(son[x][0],K);\n\t\tK-=size[son[x][0]];\n\t\tif(K<=cnt[x])\n\t\t{\n\t\t\tif(cnt[x]==1)\n\t\t\t{\n\t\t\t\tsplay(x,0);\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\tsplit(x,K);\n\t\t\tsplay(x,0);\n\t\t\treturn x;\n\t\t}\n\t\tK-=cnt[x];\n\t\treturn GetKth(son[x][1],K);\n\t}\n\tint Change(int x,bool type)//\u4f20\u5165\u7f16\u53f7\n\t{\n\t\tint t=sgt.Query(x,1,1,M),ans;\n\t\tsplay(t,0);\n\t\tans=size[son[t][0]]+x-no[t]+1;\n\t\tsplit(t,x-no[t]+1);\n\t\tif(son[t][0]!=0 or son[t][1]!=0)\n\t\t\tsplit(t,1);\n\t\tif(type==0)\n\t\t{\n\t\t\tson[fa[t]][t==son[fa[t]][1]]=0;\n\t\t\tupdate(fa[t]);\n\t\t\tsplay(1,0);\n\t\t\tint now=son[root][1];\n\t\t\twhile(son[now][0]!=0) now=son[now][0];\n\t\t\tson[now][0]=t,fa[t]=now;\n\t\t\tupdate(now),splay(now,0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tson[fa[t]][t==son[fa[t]][1]]=0;\n\t\t\tupdate(fa[t]);\n\t\t\tsplay(3,0);\n\t\t\tint now=son[root][0];\n\t\t\twhile(son[now][1]!=0) now=son[now][1];\n\t\t\tson[now][1]=t,fa[t]=now;\n\t\t\tupdate(now),splay(now,0);\n\t\t}\n\t\treturn ans;\n\t}\n\tint Change2(int x,int y)//\u4f20\u5165\u7f16\u53f7\n\t{\n\t\tint t=sgt.Query(x,1,1,M);\n\t\tsplit(t,x-no[t]+1);\n\t\tsgt.Change(y,y,t,1,1,M);\n\t\tno[t]=y;\n\t\tsplay(t,0);\n\t\treturn size[son[t][0]]+1;\n\t}\n\tint Query(int K)\n\t{\n\t\treturn no[GetKth(root,K)];\n\t}\n\tvoid Init(int n)\n\t{\n\t\troot=++to,fa[root]=0;\n\t\tson[root][1]=++to,fa[to]=root,cnt[to]=size[to]=n,no[to]=1;\n\t\tsgt.to=1;\n\t\tsgt.Change(1,n,to,1,1,M);\n\t\tson[to][1]=to+1,fa[to+1]=to,to++;\n\t\tupdate(to),update(to-1),update(root);\n\t}\n\tvoid Print(int now)\n\t{\n\t\tif(now==0) return;\n\t\tPrint(son[now][0]);\n\t\tcout<<\"no:\"<<now<<\" [\"<<no[now]<<\",\"<<no[now]+cnt[now]-1<<\"] \"<<\"size:\"<<size[now]<<\" cnt:\"<<cnt[now]<<\" sonl&r:\"<<son[now][0]<<\" \"<<son[now][1]<<endl;\n\t\tPrint(son[now][1]);\n\t}\n\t#undef root\n}splay;\nint n,m;\nint main()\n{\n\tn=read(),m=read();\n\t\n\tsplay.Init(n);\n\tint ans=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint op=read(),x=read()-ans;\n\t\tif(op==1)\n\t\t{\n\t\t\tint y=read()-ans;\n\t\t\tprintf(\"%d\\n\",ans=splay.Change2(x,y));\n\t\t}\n\t\telse if(op==2)\n\t\t\tprintf(\"%d\\n\",ans=splay.Change(x,0));\n\t\telse if(op==3)\n\t\t\tprintf(\"%d\\n\",ans=splay.Change(x,1));\n\t\telse\n\t\t\tprintf(\"%d\\n\",ans=splay.Query(x));\n\t\t//ans=0;//RTC\n\t\t//splay.Print(splay.son[0][1]);\n\t\t//cerr<<endl;\n\t}\n\treturn 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1552287722,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u7ef4\u62a4\u4e00\u4e2a\u7f16\u53f7\u5e8f\u5217\u548c\u4e00\u4e2a\u6392\u540d\u5e8f\u5217\uff0c\u5e76\u652f\u6301\u56db\u79cd\u64cd\u4f5c\uff1a\n\n1.\u6309\u7167\u7f16\u53f7\u4fee\u6539\u7f16\u53f7\uff0c\u5e76\u8fd4\u56de\u8be5\u7f16\u53f7\u7684\u6392\u540d\u3002\n\n2.\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6392\u540d\u63d0\u5347\u5230\u7b2c\u4e00\u4e2a\u3002\n\n3.\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6392\u540d\u964d\u4f4e\u5230\u6700\u540e\u4e00\u4e2a\u3002\n\n4.\u67e5\u8be2\u67d0\u4e2a\u6392\u540d\u7684\u7f16\u53f7\u3002 \n\n\u5f88\u663e\u7136\u662f\u7528Splay\u7ef4\u62a4\u6392\u540d\uff0c\u7136\u540e\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u7f16\u53f7\u54af\u3002 \n\n\u7136\u800c\u6211\u4eec\u89c2\u5bdf\u5230\u8fd9\u4e00\u9898\u7684\u6570\u636e\u8303\u56f4\u662fn<=10^8\uff0c\u90a3\u4e48\u7528\u4e0a\u8ff0\u7684\u65b9\u6cd5\u663e\u7136\u4f1aMLE\u3002\n\u6545\u800c\u6211\u4eec\u8003\u8651\u4e00\u4e2aSplay\u8282\u70b9\u300c\u771f\u7684\u7ef4\u62a4\u300d\u4e00\u4e2a\u533a\u95f4\u3002\u7136\u540e\u6bcf\u4e00\u6b21\u8981\u7528\u5230\u4e00\u4e2a\u65b0\u7684\u70b9\u5c31\u628a\u539f\u6709\u7684\u533a\u95f4\u5256\u5f00\u3002\n\n\u800c\u6570\u7ec4\u5b58\u7f16\u53f7\u4e5f\u5c31\u5f88\u5957\u8def\u5730\u6362\u6210map\u5b58\u7f16\u53f7\u3002\n\n\n\u7eed\uff1a\u8fd9\u4e00\u9898\u662f\u6211\u5728190103\u7684\u65f6\u5019\u5199\u5b8c\u7684\uff0c\u7136\u800c\u76f4\u5230191003\u6211\u624d\u8c03\u51fa\u6765\u3002\u671f\u95f4\u7ecf\u8fc7\u4e86\u5341\u4e2a\u6708\u3002\n\n\u8c03\u8bd5\u7684\u7a81\u7834\u6027\u8fdb\u5c55\u6765\u81ea\u4e8e\u5bf9\u8c03\u8bd5\u5de5\u5177\u7684\u5b66\u4e60\u4f7f\u7528\uff0c\u8fd9\u4f7f\u5f97\u6211\u5728\u5de8\u5927\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u5f97\u4ee5\u60f3\u529e\u6cd5\u8c03\u8bd5\u3002\n\n\u6211\u9996\u5148\u53d1\u73b0\u4e86size\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u8fdb\u800c\u53d1\u73b0\u67d0\u4e2a\u8282\u70b9\u7684size\u4e0d\u7b49\u4e8e\u5176\u4e24\u5b69\u5b50\u7684\u5927\u5c0f\u4e4b\u548c\u52a0\u4e0a\u5b83\u672c\u8eab\u7684\u5927\u5c0f\u3002\u7136\u540e\uff0c\u7ecf\u7531\u6b64\u5904\uff0c\u6211\u53d1\u73b0\u6709\u4e2a\u8282\u70b9\u7684\u76f8\u90bb\u8282\u70b9\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a\u7a7a\u7684\u8282\u70b9\uff0c\u8fdb\u800c\u53d1\u73b0\u8fd9\u4e2a\u8282\u70b9\u5728\u88ab\u5206\u914d\u4e0b\u6807\u4e4b\u524d\u5c31\u88ab\u8bbf\u95ee\u4e86\u3002\n\n\u6700\u7ec8\uff0c\u6211\u6ce8\u610f\u5230\u5b83\u7b2c\u4e00\u6b21\u51fa\u73b0\u6240\u76f8\u63a5\u7684\u8282\u70b9\uff0c\u5e76\u53d1\u73b0\u8fd9\u4e2a\u6570\u4e8b\u5b9e\u4e0a\u662f\u4e00\u4e2a\u6807\u53f7\u3002\n\n\u7d27\u63a5\u7740\u6211\u5c31\u987a\u5229\u5730\u8c03\u51fa\u53e6\u4e00\u4e2a\u9519\uff0c\u5e76\u901a\u8fc7\u4e86\u6b64\u9898\u3002 \n\n\u6ce8\u610f\u70b9\uff1a\n\n1.\u5bf9\u4e8e\u7a7a\u8282\u70b9\u7684\u60c5\u51b5\u4e00\u5b9a\u8981\u8ba4\u771f\u8003\u8651\uff0c\u56e0\u4e3a\u5982\u679c\u7a7a\u8282\u70b9\u64cd\u4f5c\u4e0d\u614e\u7684\u8bdd\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u83ab\u540d\u5176\u5999\u7684\u9519\u8bef\u3002\n\n2.\u8981\u6ce8\u610f\u9002\u65f6\u66f4\u65b0\u8282\u70b9\u3002\n\n3.\u5343\u4e07\u4e0d\u8981\u641e\u6df7\u300c\u6807\u53f7\u300d\u548c\u300c\u6392\u540d\u300d\uff01\uff01\uff01\uff01\uff01\uff01\n\n4.\u5982\u679c\u4e00\u4e2a\u70b9\u672c\u6765\u5c31\u662f\u6392\u540d\u6700\u540e\u7684\u70b9\u800c\u8981\u79fb\u5230\u6392\u540d\u6700\u540e\uff0c\u6709\u53ef\u80fd\u4f1a\u51fa\u9519\u3002 \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\n#define error(X) printf(\"ERROR: %d\",X)\n#define debug(P) printf(\"(%d):%d,%d,sn:[%d,%d],FA:%d,SZ:%d\\n\",P,tr[P].l,tr[P].r,tr[P].sn[0],tr[P].sn[1],tr[P].fa,tr[P].sz);\n\nbool bo=0;\nclass Splay{\n\tpublic:\n\t\tclass Node{\n\t\t\tpublic:\n\t\t\t\tint l;\n\t\t\t\tint r;\n\t\t\t\tint sz;\n\t\t\t\tint sn[2];\n\t\t\t\tint fa;\n\t\t\t\tinline void set(int L,int R,int FA){\n\t\t\t\t\tl=L,r=R,fa=FA,sz=R-L+1,sn[0]=sn[1]=0;\n\t\t\t\t}\n\t\t};\n\t\t//i\u8868\u793amp[i]\u8fd9\u4e2a\u8282\u70b9\u7684\u53f3\u7aef\u70b9\u7684\u6807\u53f7\u3002 \n\t\tstd::map<int,int> mp;\n\t\tNode tr[400005];\n\t\tint cnt,rt;\n\t\t//\u5bfb\u627e\u5f53\u524d\u8282\u70b9\u4e0e\u7236\u4eb2\u7684\u5173\u7cfb\u3002 \n\t\tinline int fndD(int X){\n\t\t\treturn tr[tr[X].fa].sn[1]==X;\n\t\t}\n\t\t//\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u3002 \n\t\tinline void updt(int X){\n\t\t\ttr[X].sz=tr[tr[X].sn[0]].sz+tr[tr[X].sn[1]].sz+tr[X].r-tr[X].l+1;\n//\t\t\tif(X==10619&&tr[X].sz<=30){prnt(tr[X].fa);}\n\t\t}\n\t\t//\u65cb\u8f6c\u5957\u88c5\u3002 \n\t\tinline void splayOne(int X){\n\t\t\tif(!X){return;}\n\t\t\tint D=fndD(X),D2=fndD(tr[X].fa);\n//\t\t\tif(X==65505||tr[X].fa==65505||tr[tr[X].fa].sn[D^1]==65505){\n//\t\t\t\tputs(\"FKFKFK\");\n//\t\t\t\tprintf(\"X\");debug(X);\n//\t\t\t\tprintf(\"FA\");debug(tr[X].fa);\n//\t\t\t\tprintf(\"BR\");debug(tr[tr[X].fa].sn[D^1]);\n//\t\t\t}\n\t\t\ttr[tr[X].sn[D^1]].fa=tr[X].fa,tr[tr[X].fa].sn[D]=tr[X].sn[D^1];\n\t\t\ttr[X].sn[D^1]=tr[X].fa,tr[X].fa=tr[tr[X].sn[D^1]].fa;\n\t\t\ttr[tr[X].fa].sn[D2]=X,tr[tr[X].sn[D^1]].fa=X;\n\t\t\tupdt(tr[X].sn[D^1]),updt(X);\n\t\t}\n\t\tinline void splayTwo(int X){\n//\t\t\tif(bo&&X==38190){debug(X);}\n\t\t\tint D=fndD(X),D2=fndD(tr[X].fa);\n\t\t\ttr[X].fa?(tr[tr[X].fa].fa?(D==D2?(splayOne(tr[X].fa),splayOne(X),0):(splayOne(X),splayOne(X),0)):(splayOne(X),0)):0;\n\t\t}\n\t\tinline void splayRnw(int X){\n\t\t\twhile(tr[X].fa){splayTwo(X);}\n\t\t\trt=X;\n\t\t}\n//\t\tinline void splayRnw(int X){\n//\t\t\twhile(tr[X].fa){\n//\t\t\t\tint F=tr[X].fa,FF=tr[tr[X].fa].fa;\n//\t\t\t\tif(!FF)\n//\t\t\t}\n//\t\t}\n\t\t//\u627e\u5230\u6392\u540d\u4e3aX\u7684\u5143\u7d20\u3002 \n\t\tinline int fnd(int X){\n\t\t\tint P=rt;\n\t\t\twhile(P){\n\t\t\t\tif(X>tr[tr[P].sn[0]].sz+tr[P].r-tr[P].l+1){\n\t\t\t\t\tX-=tr[tr[P].sn[0]].sz+tr[P].r-tr[P].l+1;\n\t\t\t\t\tP=tr[P].sn[1];\n\t\t\t\t}else if(X>tr[tr[P].sn[0]].sz){\n\t\t\t\t\tX-=tr[tr[P].sn[0]].sz;\n\t\t\t\t\tsplayRnw(P);\n//\t\t\t\t\tdebug(P);\n\t\t\t\t\treturn tr[P].l+X-1;\n\t\t\t\t}else{\n\t\t\t\t\tP=tr[P].sn[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1; \n\t\t}\n\t\t//\u5f00\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u4ee5X\u4e3a\u5b83\u7684\u7236\u4eb2\u3002 \n\t\tinline int nwlc(int X,int L,int R){\n\t\t\tint P=++cnt;\n//\t\t\tif(P==65505){\n//\t\t\t\tprintf(\"START:\");\n//\t\t\t\tdebug(P);\n//\t\t\t}\n\t\t\ttr[P].set(L,R,X);\n\t\t\treturn P;\n\t\t}\n\t\t//\u5c06\u7f16\u53f7\u4e3aX\u7684\u8282\u70b9\u5355\u72ec\u5f04\u6210\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u7136\u540e\u5c06\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u63a5\u5230\u5b83\u7684\u5de6\u53f3\uff0c\u5e76\u66f4\u6539\u76f8\u5e94\u7684\u7f16\u53f7\u7684\u6620\u5c04 \n\t\tinline int split(int P,int X){\n\t\t\tif(tr[P].l==tr[P].r){return P;}\n\t\t\tif(P==-1){return error(192600404),192600404;}\n\t\t\tif(X>tr[P].l){\n\t\t\t\tint L=tr[P].sn[0];\n\t\t\t\tL?(cut(L),0):(tr[0].fa=0);\n\t\t\t\ttr[P].sn[0]=nwlc(P,tr[P].l,X-1);\n\t\t\t\tL?(cnnct(L,tr[P].sn[0],0),0):0;\n\t\t\t\tmp[X-1]=tr[P].sn[0];\n//\t\t\t\tupdt(tr[P].sn[0]);\n\t\t\t}\n\t\t\tif(X<tr[P].r){\n\t\t\t\tint R=tr[P].sn[1];\n\t\t\t\tR?(cut(R),1):(tr[0].fa=0);\n\t\t\t\ttr[P].sn[1]=nwlc(P,X+1,tr[P].r);\n\t\t\t\tR?(cnnct(R,tr[P].sn[1],1),1):1;\n\t\t\t\tmp[tr[P].r]=tr[P].sn[1];\n//\t\t\t\tupdt(tr[P].sn[1]);\n\t\t\t}\n\t\t\ttr[P].l=tr[P].r=X;mp[X]=P;\n\t\t\tupdt(P);\n\t\t\treturn P;\n\t\t}\n\t\tinline int fndMn(int X){\n\t\t\tint P=X,FP=tr[X].fa;\n\t\t\twhile(P){\n\t\t\t\tFP=P;\n\t\t\t\tP=tr[P].sn[0]; \n\t\t\t}\n\t\t\treturn FP;\n\t\t}\n\t\tinline int fndMx(int X){\n\t\t\tint P=X,FP=tr[X].fa;\n\t\t\twhile(P){\n\t\t\t\tFP=P;\n\t\t\t\tP=tr[P].sn[1];\n\t\t\t}\n\t\t\treturn FP;\n\t\t}\n\t\tinline void cut(int X){\n\t\t\tint D=fndD(X);\n\t\t\ttr[tr[X].fa].sn[D]=0,tr[X].fa=0;\n\t\t}\n\t\tinline void cnnct(int X,int Y,int D){\n\t\t\ttr[Y].sn[D]=X,tr[X].fa=Y;\n\t\t\tupdt(Y);\n\t\t}\n\t\tinline void prnt(int X,int dep=0){\n\t\t\tif(!X){return;}\n\t\t\tfor(int i=1;i<=dep;++i){\n\t\t\t\tprintf(\" \");\n\t\t\t}debug(X);\n\t\t\tprnt(tr[X].sn[0],dep+1);\n\t\t\tprnt(tr[X].sn[1],dep+1);\n\t\t}\n\tpublic:\n\t\tinline int CHANGE(int X,int Y){\n\t\t\tint P=mp.lower_bound(X)->second;\n\t\t\tP=split(P,X);\n\t\t\ttr[P].l=tr[P].r=Y;\n\t\t\tmp[Y]=P;\n\t\t\tsplayRnw(P);\n\t\t\treturn tr[tr[P].sn[0]].sz+1;\n\t\t}\n\t\tinline int LST(int X){\n\t\t\tint P=mp.lower_bound(X)->second;\n\t\t\tP=split(P,X);\n\t\t\tsplayRnw(P);\n\t\t\tint L=tr[P].sn[0],R=tr[P].sn[1],RT=tr[tr[P].sn[0]].sz+1;\n\t\t\tif(!L){\n\t\t\t\treturn RT;\n\t\t\t}\n\t\t\tR?(R=fndMn(R),cut(L),cnnct(L,R,0),splayRnw(L)):(cut(L),cnnct(L,P,1));//\u6b64\u5904P\u5199\u6210X,\u8c03\u4e86\u6211\u4e00\u5e74\u3002 \n\t\t\treturn RT;\n\t\t}\n\t\tinline int RST(int X){\n\t\t\tint P=mp.lower_bound(X)->second;\n\t\t\tP=split(P,X);\n\t\t\tsplayRnw(P);\n\t\t\tint L=tr[P].sn[0],R=tr[P].sn[1],RT=tr[tr[P].sn[0]].sz+1;\n\t\t\tif(!R){\n\t\t\t\treturn RT;\n\t\t\t}\n\t\t\tL?(L=fndMx(L),cut(R),cnnct(R,L,1),splayRnw(R)):(cut(R),cnnct(R,P,0));\n\t\t\treturn RT;\n\t\t}\n\t\tinline int ARNK(int X){\n\t\t\treturn fnd(X);\n\t\t} \n\t\t//\u521d\u59cb\u5316\u3002 \n\t\tinline void INIT(int N){\n\t\t\tcnt=1;\n\t\t\trt=1;\n\t\t\ttr[1].set(1,N,0);\n\t\t\tmp[N]=1;\n\t\t}\n};\n/*\nError:\n192600404: \u6307\u5b9a\u7684\u8282\u70b9\u4e0d\u5b58\u5728\u3002\n192600500: \u5207\u5272\u7684\u8282\u70b9\u4e0d\u662f\u533a\u95f4\u8282\u70b9\u3002 \n*/\n\nint n,m;\nSplay T;\nvoid init(){\n\tint code=0;\n\tscanf(\"%d%d\",&n,&m);\n\tT.INIT(n);\n\tint op,x,y;\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d\",&op);\n\t\tswitch(op){\n\t\t\tcase 1:{\n\t\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\t\tx-=code,y-=code;\n\t\t\t\tprintf(\"%d\\n\",code=T.CHANGE(x,y));\n//\t\t\t\tif(code==95204&&i>=80000){\n//\t\t\t\t\tputs(\"fk1\");\n//\t\t\t\t\tprintf(\"%d\\n\",x);\n//\t\t\t\t\treturn;\n//\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2:{\n\t\t\t\tscanf(\"%d\",&x);\n\t\t\t\tx-=code;\n\t\t\t\tprintf(\"%d\\n\",code=T.LST(x));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3:{\n\t\t\t\tscanf(\"%d\",&x);\n\t\t\t\tx-=code;\n\t\t\t\tprintf(\"%d\\n\",code=T.RST(x));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4:{\n\t\t\t\tscanf(\"%d\",&x);\n\t\t\t\tx-=code;\n\t\t\t\tprintf(\"%d\\n\",code=T.ARNK(x));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n//\t\tprintf(\"CORESIZE:%d\\n\",T.tr[54567].sz);\n\t}\n}\n\nint main(){\n//\tfreopen(\"input1.in\",\"r\",stdin);\n//\tfreopen(\"output1.out\",\"w\",stdout);\n\tinit();\n\treturn 0;\n} \n```\n",
        "postTime": 1570113169,
        "uid": 97512,
        "name": "Smokey_Days",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8db3\u8db3\u8c03\u4e86\u6211\u4e00\u665a\u4e0a\n\n\u4e4d\u4e00\u770b\u8fd9\u9053\u9898\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u7ec6\u8282\u5f88\u96be\u5199\u3002\n\n\u9996\u5148\u6807\u7b97\u80af\u5b9a\u662f\u7528\u4e00\u68f5\u4ee5\u6392\u540d\u4e3a\u5173\u952e\u5b57\u7684\u5e73\u8861\u6811\uff0c\u4e00\u68f5\u4ee5\u7f16\u53f7\u4e3a\u5173\u952e\u5b57\u7684\u5e73\u8861\u6811\uff08\u8fd9\u9897\u5e73\u8861\u6811\u4f55\u4ee5\u7528map\u4ee3\u66ff\uff09\u3002\n\n### \u64cd\u4f5c\u4e00\n\u5728map\u4e2d\u627e\u5230\u5bf9\u5e94\u7f16\u53f7\u5728\u5e73\u8861\u6811\u4e2d\u7684\u8282\u70b9\uff0c\u4fee\u6539\u7f16\u53f7\uff0c\u8ba1\u7b97\u7b54\u6848\n\n\u5177\u4f53\u53ef\u4ee5\u5728\u6539\u53d8\u7f16\u53f7\u65f6\u8bb0\u5f55\u65b0\u7f16\u53f7\u5728\u5e73\u8861\u6811\u4e2d\u90a3\u4e2a\u8282\u70b9\n\n\u7528map.lower_bound(x)->second\u67e5\u8be2\n\n\u4fee\u6539\u65f6\u4e0d\u5fc5\u5220\u9664\u539f\u6765\u7f16\u53f7\u7684\u6620\u5c04\n\n\n### \u64cd\u4f5c\u4e8c & \u64cd\u4f5c\u4e09\uff08\u4e24\u79cd\u65b9\u6cd5\uff09\n#### 1. \u5728map\u4e2d\u627e\u5230\u5bf9\u5e94\u7f16\u53f7\u5728\u5e73\u8861\u6811\u4e2d\u7684\u8282\u70b9\uff0c\u5220\u9664\uff0c\u518d\u63d2\u5165\u5230\u6700\u524d\uff08\u540e\uff09\n#### 2. \u8fd9\u79cd\u65b9\u6cd5\u9002\u7528\u4e8esplay\uff1a\u5728map\u4e2d\u627e\u5230\u5bf9\u5e94\u7f16\u53f7\u5728\u5e73\u8861\u6811\u4e2d\u7684\u8282\u70b9\u3002\u628a\u5de6\u5b50\u6811\u53d8\u6210\u8fd9\u4e2a\u8282\u70b9\u7684\u540e\u7ee7\u7684\u5de6\u5b50\u6811\uff08\u628a\u53f3\u5b50\u6811\u53d8\u6210\u8fd9\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u7684\u53f3\u5b50\u6811\uff09\n\n### \u64cd\u4f5c\u56db\n\u66b4\u529b\u67e5\u8be2\u6392\u540d\u5373\u53ef\n\n\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u5751\u70b9\uff1an <= 1e8 \uff0c\u4f46\u662fm<=1e5 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u591a\u4e2a\u7f16\u53f7\u8fde\u7eed\u7684\u8282\u70b9\u538b\u7f29\u4e3a\u4e00\u4e2a\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u8282\u70b9\u7684l\u3001r\uff08\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u8868\u793a\u6700\u5c0f\u548c\u6700\u5927\u7684\u7f16\u53f7\uff09\uff0c\u5f53\u64cd\u4f5c\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u518d\u5206\u88c2\uff08split\uff09\u5f00\u3002\n\n### \u5173\u4e8e\u5206\u88c2\uff08split\uff09\u64cd\u4f5c\n1.\u5206\u88c2\u64cd\u4f5c\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u82e5\u5206\u51fa\u7684\u8282\u70b9\u5728\u5de6\u7aef\u70b9\u4e0a\uff0c\u5c31\u5206\u88c2\u4e3a\uff08l[rt],l[rt]\uff09,(l[rt]+1,r[rt])\n\n2.\u82e5\u5206\u51fa\u7684\u8282\u70b9\u5728\u53f3\u7aef\u70b9\u4e0a\uff0c\u5c31\u5206\u88c2\u4e3a(l[rt],r[rt]-1),(r[rt],r[rt])\n\n3.\u5426\u5219\u5206\u88c2\u4e3a(l[rt],mid-1),(mid,mid),(mid+1,r[rt]-1)\n\n(ps:\u522b\u5fd8\u8bb0pushup\u4e86)\n```cpp\nvoid connect(int f , int son , int d) {ch[f][d] = son; par[son] = f;}\n\nint split(int rt , int mid) {\n\tif(l[rt] == r[rt]) return rt;//\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5c31\u4e0d\u5fc5\u5206\u88c2\n\tint prel = ch[rt][0] , prer = ch[rt][1];\n\tif(mid == l[rt]) {//\u7b2c\u4e00\u79cd\u60c5\u51b5\n\t\tconnect(rt , New(l[rt] , l[rt]) , 0);//connect\u662f\u8fde\u8fb9\n\t\tconnect(ch[rt][0] , prel , 0); \n\t\tl[rt] = mid + 1; \n\t\tpushup(ch[rt][0]); pushup(rt);\n\t\treturn ch[rt][0];\n\t} else if(mid == r[rt]) {//\u7b2c\u4e8c\u79cd\u60c5\u51b5\n\t\tmp[mid - 1] = rt; \n\t\tconnect(rt , New(r[rt] , r[rt]) , 1);\n\t\tconnect(ch[rt][1] , prer , 1);\n\t\tr[rt] = mid - 1; \n\t\tpushup(ch[rt][1]); pushup(rt);\n\t\treturn ch[rt][1];\n\t} else {//\u7b2c\u4e09\u79cd\u60c5\u51b5\n\t\tmp[mid] = rt;\n\t\tconnect(rt , New(l[rt] , mid - 1) , 0);\n\t\tconnect(rt , New(mid + 1 , r[rt]) , 1);\n\t\tconnect(ch[rt][0] , prel , 0);\n\t\tconnect(ch[rt][1] , prer , 1);\n\t\tr[rt] = l[rt] = mid; \n\t\tpushup(ch[rt][0]) , pushup(ch[rt][1]) , pushup(rt);\n\t\treturn rt;\n\t}\n}\n\n```\n\n\u591a\u4e86\u8fd9\u4e2asplit\u64cd\u4f5c\uff0c\u67e5\u8be2\u6392\u540d\u7684\u65f6\u5019\u5927\u90e8\u5206\u4e0d\u53d8\uff0c\u5148\u67e5\u51fa\u5b83\u5728\u90a3\u4e2a\u8282\u70b9\uff0c\u4e0d\u8fc7\u8fd8\u8981\u8bb0\u5f55\u5b83\u5728\u8fd9\u4e2a\u8282\u70b9\u7684\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\uff08rank\uff09\u3002\n```cpp\nint kth(int &x) {//\u5f15\u7528\u53ef\u4ee5\u8bb0\u5f55\u5b83\u5728\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\uff08rank\uff09\n\tint rt = root;\n\twhile(1) {\n\t\tif(x <= size[ch[rt][0]]) rt = ch[rt][0];\n\t\telse if(x > size[ch[rt][0]] + r[rt] - l[rt] + 1) {\n\t\t\tx = x - (size[ch[rt][0]] + r[rt] - l[rt] + 1);\n\t\t\trt = ch[rt][1];\n\t\t} else {\n\t\t\tx -= size[ch[rt][0]];//\u7ec6\u8282\uff0c\u627e\u5230\u8fd9\u4e2a\u8282\u70b9\u540e\u66f4\u65b0\u5b83\u7684rank\n\t\t\treturn rt;\n\t\t} \n\t}\n}\nint query(int x) {//\u64cd\u4f5c\u56db\n\tint rt = kth(x);\n\treturn l[rt] + x - 1;\n} \n```\n\u6700\u540e\u4e0aAC\u4ee3\u7801\uff0csplay\u5b9e\u73b0\u7684\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6 + 5 , INF = 1e9;\n\nint n , m , last = 0;\n\nmap<int , int> mp;//map\n\ninline int read() {//\u5feb\u8bfb\u4e0d\u89e3\u91ca\n\tint s = 0 ,w = 1; char ch = getchar();\n\twhile(ch < 48 || ch > 57) {if(ch == '-') w = -1; ch = getchar();}\n\twhile(ch >= 48 && ch <= 57) s = (s << 1) + (s << 3) + (ch ^ 48) , ch = getchar();\n\treturn s * w;\n}\n\nstruct Splay { // \u4ee5\u6392\u540d\u4e3a\u5173\u952e\u5b57 , l\uff0cr\u8868\u793a\u7f16\u53f7\u8fde\u7eed\u7684r-l+1\n\tint ch[N][2] , par[N] , size[N] , l[N] , r[N]  , tot , root;\n\t//par\u662f\u7236\u6307\u9488\uff0ctot\u662f\u8282\u70b9\u603b\u6570\n\tint chk(int rt) {return ch[par[rt]][1] == rt;}\n\t\n\tvoid pushup(int rt) {size[rt] = size[ch[rt][0]] + size[ch[rt][1]] + r[rt] - l[rt] + 1;}\n\t\n\tvoid rotate(int rt) {\n\t\tint f = par[rt] , gf = par[f] , d = chk(rt) , son = ch[rt][d ^ 1];\n\t\tch[f][d] = son; par[son] = f;\n\t\tch[gf][chk(f)] = rt; par[rt] = gf;\n\t\tch[rt][d ^ 1] = f; par[f] = rt;\n\t\tpushup(f) , pushup(rt);\n\t}\n\t\n\tvoid splay(int rt , int goal = 0) {//splay\u7684\u57fa\u672c\u64cd\u4f5c\n\t\twhile(par[rt] != goal) {\n\t\t\tint f = par[rt] , gf = par[f];\n\t\t\tif(gf != goal) {\n\t\t\t\tif(chk(rt) == chk(f)) rotate(f);\n\t\t\t\telse rotate(rt);\n\t\t\t} rotate(rt);\n\t\t} if(!goal) root = rt;\n\t}\n\t\n\tint New(int L , int R) {//\u65b0\u5efa\u8282\u70b9\n\t\tint rt = ++tot;\n\t\tpar[rt] = ch[rt][0] = ch[rt][1] = 0;\n\t\tsize[rt] = R - L + 1;\n\t\tl[rt] = L ; r[rt] = R;\n\t\tmp[R] = rt;\n\t\treturn rt;\n\t} \n\t\n\tvoid connect(int p , int son , int d) {ch[p][d] = son; par[son] = p;}\n\t\n\tint split(int rt , int mid) {//\u5206\u88c2\u64cd\u4f5c\n\t\tif(l[rt] == r[rt]) return rt;\n\t\tint prel = ch[rt][0] , prer = ch[rt][1];\n\t\tif(mid == l[rt]) {\n\t\t\tconnect(rt , New(l[rt] , l[rt]) , 0);\n\t\t\tconnect(ch[rt][0] , prel , 0); \n\t\t\tl[rt] = mid + 1; \n\t\t\tpushup(ch[rt][0]); pushup(rt);\n\t\t\treturn ch[rt][0];\n\t\t} else if(mid == r[rt]) {\n\t\t\tmp[mid - 1] = rt; \n\t\t\tconnect(rt , New(r[rt] , r[rt]) , 1);\n\t\t\tconnect(ch[rt][1] , prer , 1);\n\t\t\tr[rt] = mid - 1; \n\t\t\tpushup(ch[rt][1]); pushup(rt);\n\t\t\treturn ch[rt][1];\n\t\t} else {\n\t\t\tmp[mid] = rt;\n\t\t\tconnect(rt , New(l[rt] , mid - 1) , 0);\n\t\t\tconnect(rt , New(mid + 1 , r[rt]) , 1);\n\t\t\tconnect(ch[rt][0] , prel , 0);\n\t\t\tconnect(ch[rt][1] , prer , 1);\n\t\t\tr[rt] = l[rt] = mid; \n\t\t\tpushup(ch[rt][0]) , pushup(ch[rt][1]) , pushup(rt);\n\t\t\treturn rt;\n\t\t}\n\t}\n\t\n\tint kth(int &x) {\n\t\tint rt = root;\n\t\twhile(1) {\n\t\t\tif(x <= size[ch[rt][0]]) rt = ch[rt][0];\n\t\t\telse if(x > size[ch[rt][0]] + r[rt] - l[rt] + 1) {\n\t\t\t\tx = x - (size[ch[rt][0]] + r[rt] - l[rt] + 1);\n\t\t\t\trt = ch[rt][1];\n\t\t\t} else {\n\t\t\t\tx -= size[ch[rt][0]];\n\t\t\t\treturn rt;\n\t\t\t} \n\t\t}\n\t}\n\t\n\tint prev(int rt) {\n\t\tif(!ch[rt][0]) return rt;\n\t\trt = ch[rt][0];\n\t\twhile(ch[rt][1]) rt = ch[rt][1];\n\t\treturn rt;\n\t}\n\t\n\tint succ(int rt) {\n\t\tif(!ch[rt][1]) return rt;\n\t\trt = ch[rt][1];\n\t\twhile(ch[rt][0]) rt = ch[rt][0];\n\t\treturn rt;\n\t}\n\t\n\tint change(int x , int y) {//\u64cd\u4f5c\u4e00\n\t\tint rt = mp.lower_bound(x) -> second;\n\t\trt = split(rt , x); \n\t\tl[rt] = r[rt] = y;\n\t\tmp[y] = rt;\n\t\tsplay(rt);\n\t\treturn size[rt] - size[ch[rt][1]];\n\t}\n\t\n\tint top(int x) {//\u64cd\u4f5c\u4e8c\n\t\tint rt = mp.lower_bound(x) -> second;\n\t\trt = split(rt , x);\n\t\tsplay(rt);\n\t\tint ans = size[rt] - size[ch[rt][1]];\n\t\tint nxt = succ(rt);\n\t\tif(!ch[rt][0]) return ans;\n\t\tif(!ch[rt][1]) {\n\t\t\tconnect(rt , ch[rt][0] , 1);\n\t\t\tch[rt][0] = 0; pushup(rt); return ans;\n\t\t}\n\t\tsplay(nxt , rt);\n\t\tconnect(nxt , ch[rt][0] , 0);\n\t\tch[rt][0] = 0;\n\t\tpushup(nxt) , pushup(rt);\n\t\treturn ans;\n\t}\n\t\n\tint bottom(int x) {//\u64cd\u4f5c\u4e09\n\t\tint rt = mp.lower_bound(x) -> second;\n\t\trt = split(rt , x);\n\t\tsplay(rt);\n\t\tint ans = size[rt] - size[ch[rt][1]];\n\t\tint pre = prev(rt);\n\t\tif(!ch[rt][1]) return ans;\n\t\tif(!ch[rt][0]) {\n\t\t\tconnect(rt , ch[rt][1] , 0);\n\t\t\tch[rt][1] = 0; pushup(rt); return ans;\n\t\t}\n\t\tsplay(pre , rt);\n\t\tconnect(pre , ch[rt][1] , 1);\n\t\tch[rt][1] = 0;\n\t\tpushup(pre) , pushup(rt);\n\t\treturn ans;\n\t}\n\t\n\tint query(int x) {//\u64cd\u4f5c\u56db\n\t\tint rt = kth(x);\n\t\treturn l[rt] + x - 1;\n\t} \t\n\t\n\tvoid init() {\n\t\tmp.clear();\n\t\troot = New(1 , n);\n\t}\n} T;\nint main() {\n\tn = read() ; m = read();\n\tT.init();\n\twhile(m -- ) {\n\t\tint opt = read() , x = read() , y;\n\t\tx -= last;\n\t\tif(opt == 1) {\n\t\t\ty = read(); y -= last;\n\t\t\tlast = T.change(x , y);\t\t\n\t\t} else if(opt == 2) last = T.top(x);\n\t\telse if(opt == 3) last = T.bottom(x);\n\t\telse last = T.query(x);\n\t\tprintf(\"%d\\n\",last);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1555082741,
        "uid": 80852,
        "name": "\u7a0b\u5c31\u672a\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "## \u4e0d\u60f3\u5199 $Splay$ \u7684\u8bf7\u770b\u8fd9\u91cc\uff01\n\n\u9996\u5148\uff0c\u5148\u5bf9\u697c\u4e0a\u90a3\u4f4d\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u6b64\u9898\u7684dalao l_h_j\u81f4\u656c\u2014\u2014\u56e0\u4e3a\u8fd9\u4e2a\u601d\u8def\u6211\u4eec\u662f\u540c\u65f6\u60f3\u5230\u7684\uff0c\u4f46\u4ed6\u53ea\u7528\u4e86\u4e00\u6b21\u5c31\u641e\u5b9a\u4e86\uff0c\u6211\u5374\u5199\u4e86\u8db3\u8db3\u4e24\u4e2a\u665a\u4e0a\uff08\u6700\u540e\u8fd8\u56e0\u4e3a\u628a $20$ \u5199\u6210 $27$ \u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff09\u3002\u3002\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u9898\u89e3\u4e86\uff1a(\u534e\u4e3d\u7684\u5206\u5272\u7ebf)\n\n---\n\n\u5728\u770b\u8fd9\u4e2a\u505a\u6cd5\u4e4b\u524d\uff0c\u8bf7\u5404\u4f4d\u795e\u7287\u5148\u7565\u5fae\u53c2\u8003\u4e00\u4e0b2017\u5e74 $NOIP$ \u7684 $day2T3$ \u5217\u961f\u3002\u8fd9\u9053\u9898\u7684\u7ebf\u6bb5\u6811\u505a\u6cd5\u6d89\u53ca\u5230\u4e24\u4e2a\u64cd\u4f5c\uff1a\u4ece\u4e00\u4e2a\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e2a\u6570 \u4ee5\u53ca \u7ed9\u8fd9\u4e2a\u5e8f\u5217\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u6570\u3002\u8fd9\u4e2a\u64cd\u4f5c\u62d3\u5c55\u4e00\u4e0b\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u652f\u6301\u4e24\u8fb9\u6dfb\u52a0\u7684\u7ebf\u6bb5\u6811\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u89e3\u51b32,3\u4e24\u4e2a\u8be2\u95ee\u4e86\u3002\n\n\u8fd9\u4e2a\u5176\u5b9e\u975e\u5e38\u597d\u89e3\u51b3\uff0c\u53ea\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u7684\u5de6\u53f3\u4e24\u8fb9\u5404\u9884\u7559\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $1e5$ \u7684\u7a7a\u95f4\uff0c\u6bcf\u6b21\u63d2\u5165\u66b4\u529b\u628a\u5e8f\u5217\u9996\u4f4d\u4e4b\u524d\u7684\u4e00\u4f4d\u6216\u8005\u5e8f\u5217\u672b\u5c3e\u540e\u9762\u7684\u4e00\u4f4d+1\u5373\u53ef\u3002\n\n\u8be2\u95ee1\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u53ea\u8981\u7528\u4e00\u4e2a $map$ (\u7528id[i]\u8868\u793a) \u5b58\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u7f16\u53f7\u88ab\u6539\u6210\u4e86\u4ec0\u4e48\u4ee5\u53ca\u6bcf\u4e00\u4e2a\u5f53\u524d\u7f16\u53f7\u7684\u539f\u59cb\u7f16\u53f7\u5373\u53ef\u3002\u8fd9\u6837\u6bcf\u4e00\u6b21\u8be2\u95ee\u5c31\u548c\u7f16\u53f7\u4fee\u6539\u57fa\u672c\u65e0\u5173\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u5269\u4e0b\u4e24\u4e2a\u95ee\u9898\u4e86\uff1a\u67e5\u8be2\u67d0\u4eba\u7684\u6392\u540d \u4ee5\u53ca \u67e5\u8be2\u67d0\u4e2a\u6392\u540d\u7684\u4eba\u3002\n\n\u67e5\u8be2\u67d0\u4eba\u7684\u6392\u540d\u5f88\u7b80\u5355\uff0c\u4f60\u53ea\u8981\u7528 $map$ \u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u7f16\u53f7\u7684\u4eba\u5728\u7ebf\u6bb5\u6811\u91cc\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u67e5\u8be2\u533a\u95f4\u548c\u5373\u53ef\u3002\n\n\u4f46\u662f\u67e5\u8be2\u67d0\u4e2a\u6392\u540d\u7684\u4eba\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u4e2a\u5176\u5b9e\u591a\u60f3\u60f3\u4e5f\u80fd\u5f97\u51fa\u505a\u6cd5\uff1a\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\u4e3a\u975e 0 \u53ca 1\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4e8c\u5206\u8fd9\u4e2a\u4eba\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5224\u65ad\u5f53\u533a\u95f4\u548c\u4e3a $x$ \u65f6\uff0c\u8fd9\u4e2a\u4eba\u6240\u5728\u7684\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\u6211\u4eec\u53ea\u9700\u8981\u7528\u4e00\u4e2a $map$(\u5176\u5b9e\u5c31\u662f\u53cd\u7740\u8bb0\u5f55\u4e00\u4e0b$id[i]$) \u8bb0\u5f55\u4e00\u4e0b\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u7684\u7f16\u53f7\uff0c\u7136\u540e\u76f4\u63a5\u8f93\u51fa\u5c31\u884c\u4e86\u3002\n\n\u6700\u540e\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff1a$n$ \u7684\u8303\u56f4\u662f $1e8$\uff01\u4e8c\u5206\u5f97\u5f00\u5230 $2^{27}$\uff01\uff08\u6211\u5c31\u662f\u5728\u8fd9\u91cc\u6302\u4e86\u4e00\u4e2a\u5c0f\u65f6 QwQ\uff09\n\n\u5269\u4e0b\u4e0d\u591a\u8bf4\u4e86\uff0c\u9644\u4e0a\u4ee3\u7801\u5427\uff1a\n\n```cpp\n#include<map>\n#include<stdio.h>\n#include<iostream>\n#define lim 100000\n#define N 20000005\n#define M 100005\nusing namespace std;\nint n,m,ans,cnt=1,sum[N],lazy[N],ls[N],rs[N];\nmap<int,int> id,lasid,pos,num,vispos,visnum,visid,vislasid;\nvoid update(int i) {sum[i]=sum[ls[i]]+sum[rs[i]];}\nvoid pushdown(int i,int l,int r)\n{\n\tif(!lazy[i])\treturn;\n\tif(r-l<=0)\t{lazy[i]=0; return;}\n\tint mid=(l+r)/2,v=lazy[i];\n\tif(!ls[i])\tls[i]=++cnt;\n\tif(!rs[i])\trs[i]=++cnt;\n\tsum[ls[i]]+=(mid-l+1)*v,sum[rs[i]]+=(r-mid)*v;\n\tlazy[ls[i]]+=v,lazy[rs[i]]+=v;\n\tlazy[i]=0;\n}\nvoid ins(int i,int l,int r,int L,int R,int v)\n{\n\tif(!i)\treturn;\n\tpushdown(i,l,r);\n\tif(L<=l && r<=R) {sum[i]+=(r-l+1)*v,lazy[i]=v; return;}\n\tint mid=(l+r)/2;\n\tif(!ls[i])\tls[i]=++cnt;\n\tif(!rs[i])\trs[i]=++cnt;\n\tif(L<=mid)\tins(ls[i],l,mid,L,R,v);\n\tif(mid+1<=R)\tins(rs[i],mid+1,r,L,R,v);\n\tupdate(i);\n}\nint ques(int i,int l,int r,int L,int R)\n{\n\tif(!i)\treturn 0;\n\tpushdown(i,l,r);\n\tif(L<=l && r<=R) {return sum[i];}\n\tint mid=(l+r)/2,ans=0;\n\tif(L<=mid)\tans+=ques(ls[i],l,mid,L,R);\n\tif(mid+1<=R)\tans+=ques(rs[i],mid+1,r,L,R);\n\treturn ans;\n}\nint posi(int i) {return pos[i]?pos[i]:pos[i]=i;}\nint numi(int i) {return num[i]?num[i]:num[i]=i;}\nint idi(int i) {return id[i]?id[i]:id[i]=i-lim;}\nint lasidi(int i) {return lasid[i]?lasid[i]:lasid[i]=i+lim;}\nint main()\n{\n\tint x,y,k;\n\tscanf(\"%d%d\",&n,&m);\n\tint head=lim,tail=lim+n+1;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&k,&x);\n\t\tif(k==1)\tscanf(\"%d\",&y);\n\t\tx-=ans,y-=ans;\n\t\tint now=posi(lasidi(x));\n\t\tif(k==1)\n\t\t{\n\t\t\tid[lasidi(x)]=y,lasid[y]=lasidi(x);\n\t\t\tans=now-head-ques(1,1,n+lim*2,head+1,now);\n\t\t}\n\t\telse if(k==2)\n\t\t{\n\t\t\tans=now-head-ques(1,1,n+lim*2,head+1,now);\n\t\t\tins(1,1,n+lim*2,now,now,1);\n\t\t\tpos[lasidi(x)]=head--,num[head+1]=lasidi(x);\n\t\t}\n\t\telse if(k==3)\n\t\t{\n\t\t\tans=now-head-ques(1,1,n+lim*2,head+1,now);\n\t\t\tins(1,1,n+lim*2,now,now,1);\n\t\t\tpos[lasidi(x)]=tail++,num[tail-1]=lasidi(x);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint las=head;\n\t\t\tfor(int j=27;j>=0;j--)\n\t\t\t\tif(las+(1<<j)<tail && (las+(1<<j)-head-ques(1,1,n+lim*2,head+1,las+(1<<j)))<x)\n\t\t\t\t\tlas+=(1<<j);\n\t\t\tans=idi(numi(las+1));\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1541773984,
        "uid": 41262,
        "name": "SSHhh",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u6307\u9488Splay\n\nNmax=10^8 \u5efa\u4e00\u4ebf\u4e2a\u70b9\u8fde\u7f16\u8bd1\u90fd\u8fc7\u4e0d\u53bb\n\n\u4e0eNOIP2017DAY2T3\u5217\u961f\u7c7b\u4f3c \u5e73\u8861\u6811\u4e0a\u4e00\u4e2a\u70b9\u8868\u793a\u4e00\u4e2a\u533a\u95f4[l,r] \u8868\u793a\u8fd9\u4e2a\u70b9\u5b58\u4e86\u7f16\u53f7\u8fde\u7eed\u5730\u4ecel\u5230r\n\n\u8981\u4fee\u6539\u4e00\u4e2a\u70b9\u65f6\uff0c\u7531\u4e8e\u65e0\u8bba\u662f\u6539\u7f16\u53f7\u8fd8\u662f\u63d0\u524d\u6ede\u540e\uff0c\u90fd\u4f1a\u7834\u574f\u8fd9\u4e2a\u70b9\u7684\u8fde\u7eed\u6027\uff0c\u6240\u4ee5\u5148\u628a\u5b83\u5355\u72ec\u62c6\u51fa\u6765\n\n\u5047\u8bbe\u4e00\u4e2a\u70b9A\u8868\u793a\u533a\u95f4[l,r]\uff0c\u8981\u4fee\u6539\u4f4d\u7f6ex(\u4e5f\u5c31\u662f\u533a\u95f4[x,x])\uff0c\u9996\u5148\u80af\u5b9a\u8981\u65b0\u5efa\u8282\u70b9B\u8868\u793a[x,x]\n\n1.x==l \u6b64\u65f6B\u5373\u662f[l,l]\uff0c\u4ee4A\u8868\u793a[l+1,r]\uff0c[l,l]\u80af\u5b9a\u662f[l+1,r]\u7684\u524d\u9a71\uff0c\u6240\u4ee5\u5148\u627e\u5230A\u539f\u6765\u7684\u524d\u9a71C\uff0c\u628aB\u5f53\u4f5cC\u7684\u53f3\u513f\u5b50\uff0c\u90a3\u4e48\u6b64\u65f6B\u5373\u662fA\u7684\u65b0\u524d\u9a71\u4e86(\u5982\u679cA\u539f\u6ca1\u6709\u524d\u9a71\uff0c\u76f4\u63a5\u628aB\u5f53\u4f5cA\u7684\u5de6\u513f\u5b50)\n\n2.x==r \u6b64\u65f6B\u5373\u662f[r,r]\uff0c\u4ee4A\u8868\u793a[l,r-1]\uff0c[r,r]\u80af\u5b9a\u662f[l,r-1]\u7684\u540e\u7ee7\uff0c\u6240\u4ee5\u5148\u627e\u5230A\u539f\u6765\u7684\u540e\u7ee7C\uff0c\u628aB\u5f53\u4f5cC\u7684\u5de6\u513f\u5b50\uff0c\u90a3\u4e48\u6b64\u65f6B\u5373\u662fA\u7684\u65b0\u540e\u7ee7\u4e86(\u5982\u679cA\u539f\u6ca1\u6709\u540e\u7ee7\uff0c\u76f4\u63a5\u628aB\u5f53\u4f5cA\u7684\u53f3\u513f\u5b50)\n\n3.l<x<r \u6b64\u65f6A\u88ab\u62c6\u6210\u4e09\u4e2a\u533a\u95f4A[l,x-1]\uff0cB[x,x]\uff0cC[x+1,r]\uff0c\u7531\u4e8eC\u662fB\u7684\u540e\u7ee7\uff0c\u6240\u4ee5\u53ef\u4ee5\u628aC\u4f5c\u4e3aB\u7684\u53f3\u513f\u5b50\u770b\u4f5c\u4e00\u4e2a\u6574\u4f53BC\uff0cBC\u53c8\u662fA\u7684\u540e\u7ee7\uff0c\u6240\u4ee5\u540c\u7406\u627e\u5230A\u539f\u5148\u7684\u540e\u7ee7D\uff0c\u628aBC\u63a5\u4f5cD\u7684\u5de6\u513f\u5b50(\u6ca1\u6709\u540e\u7ee7\u5c31\u628aBC\u5f53\u4f5cA\u7684\u53f3\u513f\u5b50)\n\n\u63d0\u524d\u5c31\u662f\u5148\u628a\u539f\u4f4d\u7f6e\u7684\u70b9\u63d0\u53d6\u51fa\u6765\u8bb0\u4f5cX\uff0c\u7136\u540e\u628aX\u4ece\u6811\u4e2d\u5220\u9664\uff0c\u518d\u628aX\u63d2\u5165\u5230\u6811\u4e2d\u7b2c\u4e00\u4e2a\u70b9\u7684\u5de6\u513f\u5b50\u5904\uff0c\u653e\u5230\u6700\u540e\u7684\u64cd\u4f5c\u53cd\u4e4b\n\n\u8be2\u95ee\u64cd\u4f5c\u5c31\u662f\u627e\u6392\u540d\u4e3ak\u7684\u6570\uff0c\u91cd\u5b9a\u4e49size\uff0c\u521d\u503c\u7b49\u4e8e\u533a\u95f4[l,r]\u7684\u957f\u5ea6\u5373size=r-l+1\uff0c\u7136\u540e\u540c\u6837\u50cf\u5e38\u89c4\u5e73\u8861\u6811\u90a3\u6837\u627ekth\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u70b9\u540e\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u6570\n\n\u7531\u4e8eMmax=10^5\uff0c\u70b9\u6570\u6700\u591a\u4e0d\u4f1a\u8d85\u8fc7\u5341\u4e07\u591a\uff0c\u7a0d\u5fae\u5f00\u5927\u4e00\u70b9\u4ee5\u9632\u4e07\u4e00\u5c31ok\u4e86\n```cpp\n#include<map>\n#include<cstdio>\n#define reg register\nusing namespace std;\nconst int N=1e8+1,M=1e5+10;\nint n,m,lastans;\nnamespace Splay\n{\n\tstruct tree\n\t{\n\t\tint l,r,size;\n\t\ttree *son[2],*fa;\n\t\tinline void pushup()\n\t\t{\n\t\t\tsize=r-l+1+son[0]->size+son[1]->size;\n\t\t}\n\t\tinline bool relation()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t}*root,*tail,memory_pool[M<<1],*recycle[M<<1],*null;\n\tint top;\n\tmap<int,tree*>loc;\n\tinline void init() //\u5199\u4e2a\u5185\u5b58\u6c60\n\t{\n\t\ttail=memory_pool;\n\t\tnull=tail++;\n\t\tnull->son[0]=null->son[1]=null->fa=null;\n\t\tnull->l=null->r=null->size=top=0;\n\t\troot=null;\n\t}\n\tinline tree *newtree(reg int l,reg int r)\n\t{\n\t\treg tree *p=top?recycle[--top]:tail++;\n\t\tp->l=l;p->r=r;p->size=r-l+1;\n\t\tp->son[0]=p->son[1]=p->fa=null;\n\t\treturn p;\n\t}\n\tinline void erase(tree *&p)\n\t{\n\t\trecycle[top++]=p;\n\t\tp=null;\n\t}\n\tinline void connect(reg tree *&p,reg tree *&fa,reg bool which)\n\t{\n\t\tif (p!=null)p->fa=fa;\n\t\tif (fa!=null)fa->son[which]=p,fa->pushup();\n\t}\n\tinline void rotate(reg tree *&p)\n\t{\n\t\treg tree *fa=p->fa;\n\t\treg bool dir=p->relation();\n\t\tconnect(p,fa->fa,fa->relation());\n\t\tconnect(p->son[dir^1],fa,dir);\n\t\tconnect(fa,p,dir^1);\n\t\tfa->pushup();p->pushup();\n\t}\n\tinline void splay(reg tree *p)\n\t{\n\t\tfor (reg tree *fa;(fa=p->fa)!=null;rotate(p))\n\t\t\tif (fa->fa!=null)\n\t\t\t\trotate(p->relation()==fa->relation()?fa:p);\n\t\troot=p;\n\t}\n\tinline tree *precursor(reg tree *&p)\n\t{\n\t\tsplay(p);\n\t\treg tree *now=p->son[0];\n\t\twhile (now->son[1]!=null)now=now->son[1];\n\t\treturn now;\n\t}\n\tinline tree *successor(reg tree *&p)\n\t{\n\t\tsplay(p);\n\t\treg tree *now=p->son[1];\n\t\twhile (now->son[0]!=null)now=now->son[0];\n\t\treturn now;\n\t}\n\tinline void Delete(reg tree *&p)\n\t{\n\t\tsplay(p);\n\t\tif (p->son[0]==null&&p->son[1]==null)return erase(root);\n\t\tif (p->son[0]==null)return erase((root=p->son[1])->fa);\n\t\tif (p->son[1]==null)return erase((root=p->son[0])->fa);\n\t\treg tree *pre=precursor(p);splay(pre);\n\t\tconnect(p->son[1],pre,1);erase(p);\n\t}\n\tinline void split(reg tree *p,reg int pos)\n\t{\n\t\tif (p->l==p->r)return;\n\t\treg tree *now=newtree(pos,pos),*pre=precursor(p),*nxt=successor(p);\n\t\tloc[pos]=now;\n\t\tif (pos==p->l)\n\t\t\treturn p->l++,p->pushup(),\n\t\t\t(pre==null?connect(now,p,0):connect(now,pre,1)),splay(now);\n\t\tif (pos==p->r)\n\t\t\treturn (loc[--p->r]=p)->pushup(),\n\t\t\t(nxt==null?connect(now,p,1):connect(now,nxt,0)),splay(now);\n\t\tconnect(loc[p->r]=newtree(pos+1,p->r),now,1);\n\t\t(loc[p->r=pos-1]=p)->pushup();\n\t\tif (nxt==null)return connect(now,p,1),splay(now);\n\t\tconnect(now,nxt,0);splay(now);\n\t}\n\tinline int get_rank(reg tree *p,reg int pos)\n\t{\n\t\tsplit(p,pos);splay(loc[pos]);\n\t\treturn root->son[0]->size+1;\n\t}\n\tinline int find_rank(reg int ranking)\n\t{\n\t\treg tree *now=root;\n\t\twhile (1)\n\t\t\tif (ranking<=now->son[0]->size)now=now->son[0];\n\t\t\telse\n\t\t\t{\n\t\t\t\treg int len=now->r-now->l+1;\n\t\t\t\tranking-=now->son[0]->size+len;\n\t\t\t\tif (ranking<=0)return now->l+ranking+len-1;\n\t\t\t\tnow=now->son[1];\n\t\t\t}\n\t}\n}using namespace Splay;\ninline int read()\n{\n\treg int out=0;reg char ch=getchar();\n\twhile (ch<48||ch>57)ch=getchar();\n\twhile (ch>47&&ch<58)out=(out<<3)+(out<<1)+ch-48,ch=getchar();\n\treturn out;\n}\ninline void Init()\n{\n\tn=read();m=read();\n\tloc[n]=root=newtree(1,n);\n}\ninline void change(int idx,int idy)\n{\n\treg tree *p=loc.lower_bound(idx)->second;\n\tprintf(\"%d\\n\",lastans=get_rank(p,idx));\n\tloc[idx]->l=loc[idx]->r=idy;\n\tloc[idy]=loc[idx];\n}\ninline void lift_front(reg int id)\n{\n\treg tree *p=loc.lower_bound(id)->second;\n\tprintf(\"%d\\n\",lastans=get_rank(p,id));\n\treg int l=loc[id]->l,r=loc[id]->r;\n\tDelete(loc[id]);\n\tif (root==null){loc[id]=root=newtree(l,r);return;}\n\treg tree *k=root,*nt=newtree(l,r);\n\twhile (k->son[0]!=null)k=k->son[0];\n\tconnect(loc[id]=nt,k,0);splay(nt);\n}\ninline void push_back(reg int id)\n{\n\treg tree *p=loc.lower_bound(id)->second;\n\tprintf(\"%d\\n\",lastans=get_rank(p,id));\n\treg int l=loc[id]->l,r=loc[id]->r;\n\tDelete(loc[id]);\n\tif (root==null){loc[id]=root=newtree(l,r);return;}\n\treg tree *k=root,*nt=newtree(l,r);\n\twhile (k->son[1]!=null)k=k->son[1];\n\tconnect(loc[id]=nt,k,1);splay(nt);\n}\ninline void get_kth(reg int k)\n{\n\tprintf(\"%d\\n\",lastans=find_rank(k));\n}\nint main()\n{\n\tinit();Init();\n\twhile (m--)\n\t{\n\t\treg int opt=read(),x=read()-lastans;\n\t\tswitch (opt)\n\t\t{\n\t\t\tcase 1:change(x,read()-lastans);break;\n\t\t\tcase 2:lift_front(x);break;\n\t\t\tcase 3:push_back(x);break;\n\t\t\tcase 4:get_kth(x);break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1540212480,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "# \u5514\u59c6\n\u8fd9\u4e48\u5feb\u4e50\u7684\u9898\u600e\u4e48\u80fd\u5c11\u4e86\u6211treap\u54d2!\n\u770b\u8fd9\u9898\u8fd8\u6ca1\u6709treap\u7684\u9898\u89e3\u6211\u5c31\u6765\u6c34\u4e00\u4e2a\n\n------------\n\u6211\u662f\u5148\u505a\u4e86[P2596 [ZJOI2006]\u4e66\u67b6](https://www.luogu.org/problemnew/show/P2596)\u8fd9\u9898\uff0c\u770b\u4e86\u8fd9\u9898\u6211\u76f4\u63a5\u7a0d\u5fae\u6539\u4e86\u4e00\u4e0b\u5c31\u6295\u4e86\uff0c\u5168mle\u3002\u3002\u3002\u3002\u3002\n\n\u9996\u5148\u601d\u8def\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u7528\u4e00\u4e2atreap\uff08splay\uff09+map\u3002treap\u4ee5\u8282\u70b9\u7684\u5e8f\u53f7\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u6392\u5e8f\uff08**\u4e0d\u662f\u7f16\u53f7**\uff09\uff0c\u800cmap\u662f\u8bb0\u5f55\u6bcf\u4e2a\u7f16\u53f7\u5bf9\u5e94\u7684\u5e8f\u53f7\u3002\n\n\u4f46\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u5927\u5927\u7684\u95ee\u9898\uff0c\u5c31\u662fn<=10^8\uff0c\u663e\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u5c06\u6bcf\u4e00\u4e2a\u6570\u90fd\u5b58\u8fdbtreap\u548cmap\uff0c\u5b58\u5c31\u76f4\u63a5mle\uff0c\u8bf4\u4e0d\u5b9a\u8fd8\u4f1atel\u3002\u4e0d\u8fc7\u597d\u5728\u521d\u59cb\u72b6\u6001\u7684\u7f16\u53f7\u5c31\u662f1~n\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u628a\u8fd9\u4e2a1~n**\u5f53\u505a\u4e00\u4e2a\u6574\u4f53\u7684\u8282\u70b9**\uff0c\u5e76\u540c\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684left\u548cright\uff0c\u800c\u4e14\u8981\u5bf9\u5e94\u4fee\u6539num\uff08\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6570\u7684\u4e2a\u6570\uff09\u3002\u8fd9\u6837\uff0c\u7b49\u6211\u4eec\u9700\u8981\u5bf9**\u7f16\u53f7**\u4e3ak\u7684\u6570\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u53ea\u9700\u628amap[k]\u6240\u5728\u533a\u95f4\uff08a,b\uff09\u5220\u9664\uff0c\u5e76\u91cd\u65b0\u5efa\u4e00\u4e2a\uff08a,map[k]-1\uff09(map[k],map[k])\u548c(map[k]+1,b)\u5f53\u7136\uff0c\u5982\u679ca==b\u7684\u8bdd\uff0c\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\u5c31\u884c\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\n\n- \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u6211\u4eec\u5148\u628amap[x]\u7ed9\u62c6\u51fa\u6765\uff0c\u7136\u540e\u5bf9\u5e94map[x]\u53bb\u67e5\u627e\u6392\u540d\uff08\u8fd9\u662f\u5e73\u8861\u6811\u57fa\u672c\u64cd\u4f5c\u5566\uff0c\u53ea\u662f\u8981\u7a0d\u5fae\u6539\u4e00\u70b9\u4e1c\u897f\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u6211\u7a0b\u5e8f\u91cc\u7684rank\u51fd\u6570\uff09\u7136\u540e\u628a\u5bf9\u5e94\u7684map[x]\u8282\u70b9\u6240\u8bb0\u5f55\u7684\u7f16\u53f7\u6539\u6210y\u3002\n- \u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u6211\u4eec\u8981\u8bb0\u5f55\u4e00\u4e2aminn\uff0c\u5373\u6700\u5c0f\u7684\u5e8f\u53f7\uff0c\u8fd9\u65f6\u6211\u4eec\u5148\u67e5\u8be2\u5bf9\u5e94\u8282\u70b9\u7684\u6392\u540d\uff0c\u7136\u540e\u518d\u62c6\u70b9\uff0c\u4f46\u6211\u4eec\u8fd9\u65f6\u8981\u628amap[x]\u6539\u4e3a--minn\u8fd9\u6837\u5c31\u662f\u628a\u8fd9\u4e2a\u6570\u76f4\u63a5\u6392\u5728\u4e86\u7b2c\u4e00\u4e2a\n- \u5bf9\u4e8e\u64cd\u4f5c3\uff0c\u548c\u64cd\u4f5c2\u662f\u4e00\u6837\u7684\uff0c\u53ea\u9700\u8bb0\u5f55maxx\uff0c\u7136\u540e\u628amap[x]=++maxx\u5c31\u884c\n- \u5bf9\u4e8e\u64cd\u4f5c4\uff0c\u8fde\u62c6\u70b9\u90fd\u4e0d\u7528\uff0c\u5c31\u662f\u5e73\u8861\u6811\u6807\u51c6\u64cd\u4f5c\uff0c\u53ea\u662f\u5982\u679c\u53d1\u73b0\u6211\u4eec\u8981\u7684\u76ee\u6807\u5728\u4e00\u6bb5\u533a\u95f4\u91cc\u65f6\uff0c\u6211\u4eec\u5c31\u8f93\u51faleft+\uff08x-\u5de6\u5b50\u6811\u7684**\u6570\u7684\u4e2a\u6570**\uff09-1\n\n\u7ec6\u8282\u90e8\u5206\u89c1\u4ee3\u7801\u5566~~\u7801\u98ce\u6bd2\u7624\uff0c\u6211\u5c3d\u529b\u4e86~~\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<ctime>\n#include<queue>\n#include<string>\n#include<cstring>\n#include<cmath>\n#include<map>\n#define MAXN 2001000\n#define INF 10000000\nusing namespace std;\nint sum=0,R=0;\nint n,m;\nmap<int,int>ma;\nstruct node{\n       int son[2];\n       int num;\n       int size;\n       int left;\n       int right;\n       int rd;\n       int yuan;//\u8fd9\u4e2a\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u7f16\u53f7\n}tree[MAXN];\nvoid up(int now){\n     tree[now].size=tree[tree[now].son[0]].size+tree[tree[now].son[1]].size+tree[now].num;\n}\nvoid rotate(int &now,int d){\n     int to=tree[now].son[!d];\n     tree[now].son[!d]=tree[to].son[d];\n     tree[to].son[d]=now;\n     up(now);\n     up(to);\n     now=to;\n}\nvoid change(int &now,int x,int y,int z,int size){\n     if (!now){now=++sum;tree[now].size=tree[now].num=size;tree[now].left=x;tree[now].right=y;tree[now].rd=rand();tree[now].yuan=z;return;}\n     else if(tree[now].left==x){tree[now].num+=size;tree[now].size+=size;return;}; \n     int tmp=(x>tree[now].left);\n     change(tree[now].son[tmp],x,y,z,size);\n     if (tree[now].rd>tree[tree[now].son[tmp]].rd)rotate(now,!tmp);\n     up(now);\n}\nvoid del(int &now,int x){\n     if(!now)return;\n     if (x==tree[now].left){\n                       if(!tree[now].son[0]&&!tree[now].son[1]){\n                                                      tree[now].num=0;tree[now].size=0;\n                                                      if(!tree[now].num)now=0;\n                       }\n                       else if(tree[now].son[0]&&!tree[now].son[1]){\n                                                          rotate(now,1);\n                                                          del(tree[now].son[1],x);\n                       }\n                       else if(!tree[now].son[0]&&tree[now].son[1]){\n                                                          rotate(now,0);\n                                                          del(tree[now].son[0],x);\n                       }\n                       else {int tmp=(tree[tree[now].son[0]].rd>tree[tree[now].son[1]].rd);\n                            rotate(now,tmp);\n                            del(tree[now].son[tmp],x);\n                       }\n     }\n     else{\n          int tmp=(x>tree[now].left);\n          del(tree[now].son[tmp],x);\n     }\n     up(now);\n}\nint rank(int now,int x){//\u6309\u5173\u952e\u5b57\u67e5\u6392\u540d\n    if (!now)return 0;\n    if (tree[now].left<=x&&x<=tree[now].right)return x-tree[now].left+1+tree[tree[now].son[0]].size;\n    if (tree[now].left<x) return tree[tree[now].son[0]].size+tree[now].num+rank(tree[now].son[1],x);\n    if (tree[now].left>x) return rank(tree[now].son[0],x);\n}\nint find(int now,int x){//\u6309\u6392\u540d\u67e5\u7f16\u53f7\n    if(!now)return 0;\n    if (tree[tree[now].son[0]].size>=x)return find(tree[now].son[0],x);\n    else if (tree[tree[now].son[0]].size+tree[now].num>=x){\n         if (tree[now].left==tree[now].right)return tree[now].yuan;\n         else return tree[now].left+x-tree[tree[now].son[0]].size-1;\n    }\n    else return find(tree[now].son[1],x-tree[tree[now].son[0]].size-tree[now].num);\n}\nvoid search(int now,int x,int &left,int &right){\n     if (!now)return;\n     if (x>=tree[now].left&&x<=tree[now].right){left=tree[now].left;right=tree[now].right;return;}\n     else if (x<tree[now].left)return search(tree[now].son[0],x,left,right);\n     else return search(tree[now].son[1],x,left,right);\n}\nint main(){\n    cin>>n>>m;\n    int minn=1,maxx=n;\n    memset(tree,0,sizeof(tree));\n    change(R,1,n,1,n);\n    int last=0;\n    for(int i=1;i<=m;i++){\n            int a,b,c;\n            scanf(\"%d\",&a);\n            if (a==1){\n                      scanf(\"%d%d\",&b,&c);\n                      b-=last;c-=last;\n                      if (!ma.count(b))ma[b]=b;\n                      int left,right;\n                      search(R,ma[b],left,right);\n                      ma[c]=ma[b];\n                      del(R,left);\n                      if (ma[b]>left)change(R,left,ma[b]-1,left,ma[b]-left);\n                      if (ma[b]<right)change(R,ma[b]+1,right,ma[b]+1,right-ma[b]);\n                      change(R,ma[b],ma[b],c,1);\n                      last=rank(R,ma[b]);\n                      printf(\"%d\\n\",last);\n            }\n            if (a==2){\n                      scanf(\"%d\",&b);\n                      b-=last;\n                      if (!ma.count(b))ma[b]=b;\n                      last=rank(R,ma[b]);\n                      int left,right;\n                      search(R,ma[b],left,right);\n                      del(R,left);\n                      if (ma[b]>left)change(R,left,ma[b]-1,left,ma[b]-left);\n                      if (ma[b]<right)change(R,ma[b]+1,right,ma[b]+1,right-ma[b]);\n                      ma[b]=--minn;\n                      change(R,ma[b],ma[b],b,1);\n                      printf(\"%d\\n\",last);\n            }\n            if (a==3){\n                      scanf(\"%d\",&b);\n                      b-=last;\n                      if (!ma.count(b))ma[b]=b;\n                      last=rank(R,ma[b]);\n                      int left,right;\n                      search(R,ma[b],left,right);\n                      del(R,left);\n                      if (ma[b]>left)change(R,left,ma[b]-1,left,ma[b]-left);\n                      if (ma[b]<right)change(R,ma[b]+1,right,ma[b]+1,right-ma[b]);\n                      ma[b]=++maxx;\n                      change(R,ma[b],ma[b],b,1);\n                      printf(\"%d\\n\",last);\n            }\n            if (a==4){\n                      scanf(\"%d\",&b);\n                      b-=last;\n                      if (!ma.count(b))ma[b]=b;\n                      last=find(R,b);\n                      printf(\"%d\\n\",last);\n            }\n    }\n    return 0;\n}\n\n```",
        "postTime": 1550374846,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3285 \u3010[SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ\u3011"
    },
    {
        "content": "#### \u5148\u6765\u8bf4\u4e00\u4e9b\u548c\u6b63\u89e3\u65e0\u5173\u7684\u7f62\u3002\n\n\u8fd9\u4e2a\u9898\u6211\u5199\u4e86\u4e00\u5929\u591a\u624d\u8fc7\u3002\n\n\u9006\u5929\u7684\u662f\u5f53\u65f6\u6ca1\u770b\u5230\u7b2c\u56db\u4e2a\u64cd\u4f5c\u662f\u6c42\u5bf9\u5e94\u7684\u7f16\u53f7\uff0c\u6309\u6c42\u6392\u540d\u5199\u7684\uff0c\u5e76\u79c9\u6301\u7740\u201c\u8111\u5b50\u4e0d\u591f\uff0c\u6570\u636e\u7ed3\u6784\u6765\u51d1\u201d\u7684\u539f\u5219\uff0c\u5199\u4e86\u56db\u4e2a\u5e73\u8861\u6811\u548c\u4e09\u4e2a\u54c8\u5e0c\u2014\u2014\u5173\u952e\u662f\u771f\u5199\u51fa\u6765\u4e86\uff0c\u7ed3\u679c\u53d1\u73b0\u6837\u4f8b\u6700\u540e\u4e00\u4e2a\u6570\u59cb\u7ec8\u5bf9\u4e0d\u4e0a\uff0c\u7136\u540e\u518d\u770b\u4e00\u904d\u9898\u624d\u53d1\u73b0\u9898\u5ba1\u9519\u4e86\u3002\n\n\u8bf4\u5b9e\u8bdd\u5f53\u65f6\u662f\u6709\u70b9\u5d29\u6e83\u7684\u3002\n\n\uff08\u6240\u4ee5\u8bf4\u8fd9\u91cc\u63d0\u9192\u5927\u5bb6\u4e00\u5b9a\u8981\u628a\u9898\u8bfb\u597d\u60f3\u6e05\u518d\u5199\uff0c\u4e0d\u7136\u5927\u6982\u7387\u4f1a\u89c1\u7956\u5b97\u3002\uff09\n\n\u4e0d\u8fc7\u8fd8\u597d\uff0c\u628a\u6b63\u89e3\u5199\u51fa\u6765\u4e86\u3002\n\n## \u597d\u7684\u6211\u4eec\u56de\u5230\u6b63\u9898\n\n### \u9898\u76ee\u5927\u610f\n\n- \u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u6700\u5f00\u59cb\u65f6\u8fd9\u4e9b\u6570\u7684\u7f16\u53f7\u4e3a $1$ \u5230 $n$\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u9700\u8981\uff1a\n\n\t1. \u5c06 $x$ \u7f16\u53f7\u6539\u4e3a $y$ \u5e76\u8f93\u51fa\u6392\u540d\uff1b\n    \n   2. \u5c06 $x$ \u79fb\u5230\u9996\u4f4d\u5e76\u8f93\u51fa\u4e4b\u524d\u7684\u6392\u540d\uff1b\n   \n   3. \u5c06 $x$ \u79fb\u5230\u672b\u5c3e\u5e76\u8f93\u51fa\u4e4b\u524d\u7684\u6392\u540d\uff1b\n   \n   4. \u8f93\u51fa\u6392\u540d\u4e3a $x$ \u7684\u7f16\u53f7\u3002\n   \n- $1 \\le m \\le 10 ^ 5$\uff0c$1 \\le n \\le 10 ^ 8$\u3002\n\n### \u9898\u610f\u5206\u6790\n\n- \u9996\u5148 $1 \\le n \\le 10 ^ 8$ \u8fd9\u6837\u7684\u8303\u56f4\u5c31\u4e0d\u652f\u6301\u6211\u4eec\u628a\u6240\u6709\u7684\u6570\u90fd\u5b58\u8d77\u6765\u4e86\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\u3002\n\n- \u56e0\u4e3a $n$ \u8fdc\u5927\u4e8e $m$\uff0c\u800c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u53ea\u662f\u66f4\u6539\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5e8f\u5217\u4e2d\u88ab\u52a8\u8fc7\u624b\u811a\u7684\u6570\u5176\u5b9e\u8fdc\u8fdc\u5c0f\u4e8e\u4ece\u5f00\u59cb\u82df\u5230\u7ed3\u675f\u7684\u6570\u3002\u8fd9\u4e9b\u672a\u88ab\u66f4\u6539\u6570\u4e0d\u7981\u6570\u91cf\u5e9e\u5927\uff0c\u800c\u4e14\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u6837\u987a\u7740\u8fd9\u4e2a\u601d\u8def\u8fd9\u4e2a\u9898\u5c31\u80fd\u505a\u4e86\u3002\n\n- \u7ef4\u62a4\u6392\u540d\u5c31\u8003\u8651\u7ef4\u62a4\u4e00\u79cd\u533a\u95f4\u7684\u6587\u827a\u5e73\u8861\u6811\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u8ba9\u5b83\u8868\u793a\u4e00\u6bb5\u8fde\u7eed\u7684\u6570\uff0c\u7ef4\u62a4\u4e24\u4e2a\u8fb9\u754c\uff0c$size$ \u5c31\u7ef4\u62a4\u6210\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8986\u76d6\u7684\u8fb9\u754c\u5927\u5c0f\u3002\n\n\t\u540c\u65f6\u5f00\u4e00\u4e2a map\uff0c\u5c06\u5de6\u8fb9\u754c\u4e0e\u5e73\u8861\u6811\u8282\u70b9\u7f16\u53f7\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u3002\n    \n   \u8fd9\u6837\u6211\u4eec\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\u5c31\u628a\u4e00\u6bb5\u533a\u95f4\u62c6\u6210\u4e09\u6bb5\uff0c\u4e2d\u95f4\u7684\u4e00\u6bb5\u4e3a\u5f53\u524d\u64cd\u4f5c\u7684\u7f16\u53f7\uff0c\u8fd9\u6837\u6267\u884c\u5404\u79cd\u64cd\u4f5c\u5c31\u65b9\u4fbf\u4e86\uff0c\u800c\u5de6\u53f3\u4e24\u6bb5\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u76f8\u5f53\u4e8e\u8fd8\u5728\u539f\u6765\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5199\u6210\u5220\u53bb\u76ee\u6807\u6570\u6240\u5728\u533a\u95f4\u7684\u8282\u70b9\u5e76\u5c06\u4e09\u6bb5\u91cd\u65b0\u63d2\u5165\u76f8\u5e94\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\u8fd9\u6837\u7b97\u7b97\u6811\u4e0a\u7684\u8282\u70b9\u6700\u591a\u6709 $2 \\times 10 ^ 5$ \u4e2a\uff0c\u5b8c\u5168\u5141\u8bb8\u3002\n    \n   \u4f17\u6240\u5468\u77e5\uff0cmap \u672c\u8d28\u662f\u4e00\u9897\u5e73\u8861\u6811\uff0c\u5176\u5185\u90e8\u5c01\u88c5\u4e86\u4e00\u68f5\u7ea2\u9ed1\u6811\uff0c\u4e0e unordered_map \u548c pb_ds \u4e2d\u7684 hash_table \u7684\u67e5\u627e\u65b9\u5f0f\u4e0d\u540c\uff0c\u5176\u67e5\u627e\u662f\u57fa\u4e8e\u6bd4\u8f83\u7684\u67e5\u627e\u65b9\u5f0f\uff0c\u6240\u4ee5\u8bf4\u5b83\u5bf9\u4e8e\u5173\u952e\u5b57 key \u652f\u6301 lower_bound \u548c upper_bound \u51fd\u6570\uff0c\u8fd9\u7ed9\u6211\u4eec\u5199\u8fd9\u4e2a\u9898\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u5e2e\u52a9\u3002\u6709\u4e0d\u61c2\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u53bb\u5b66\u4e60\u4e00\u4e0b [map](http://c.biancheng.net/view/7173.html)\u3002\n   \n- \u63a5\u4e0b\u6765\u8bf4\u660e\u5e73\u8861\u6811\u7684\u4ee3\u7801\u600e\u4e48\u5199\uff08\u6211\u8fd9\u91cc\u4f7f\u7528\u7684\u662f FHQ Treap\uff09\u3002\n\n\t\u9996\u5148\uff1a\n    \n   ```cpp\n   #define ls(x) t[x].ls\n\t#define rs(x) t[x].rs\n\t#define fa(x) t[x].fa\n\t#define len(x) (t[x].r - t[x].l + 1)// \u5077\u61d2\u5927\u6cd5\u597d\n    const int N = 1e5 + 5;\n\tstruct FHQ_Treap\n\t{\n\t\tint size, ls, rs, fa, key, l, r;\n\t}t[N << 5];\n\t```\n\t\uff08\u5e9f\u8bdd\uff09\n    \n   \u8fd9\u4e2a $fa$ \u7ef4\u62a4\u7236\u4eb2\u8282\u70b9\uff0c\u63a5\u4e0b\u6765\u67e5\u8be2\u6392\u540d\u8981\u7528\u5230\u3002\n   \n   update \u51fd\u6570\u8fd9\u4e48\u5199\uff1a\n   \n   ```cpp\n\tvoid update(int x)\n\t{\n\t\tfa(ls(x)) = fa(rs(x)) = x;\n\t\tt[x].size = t[ls(x)].size + t[rs(x)].size + len(x);\n\t}\n\t```\n\t\u5efa\u7acb\u65b0\u7ed3\u70b9\uff1a\n    \n   ```cpp\n\tint addnode(int l, int r)\n\t{\n\t\tHash[l] = ++cnt;// map \u5efa\u7acb\u6620\u5c04\u5173\u7cfb\n\t\tt[cnt].size = r - l + 1;\n\t\tt[cnt].l = l; t[cnt].r = r;\n\t\tt[cnt].key = rand();\n\t\treturn cnt;\n\t}\n\t```\n\tsplit \u548c merge \u548c\u666e\u901a\u7684\u6587\u827a\u5e73\u8861\u6811\u57fa\u672c\u4e00\u6837\uff1a\n    \n   ```cpp\n\tvoid split(int now, int pos, int &x, int &y)\n\t{\n\t\tif(!now) return x = y = 0, void();\n\t\tif(t[ls(now)].size < pos)\n\t\t\tx = now, split(rs(now), pos - t[ls(now)].size - len(now), rs(now), y);\n            // \u8fd9\u91cc\u5e76\u4e0d\u4f1a\u51fa\u95ee\u9898\uff0c\u6211\u4eec\u4f1a\u907f\u514d\u51cf\u6210\u8d1f\u6570\n\t\telse y = now, split(ls(now), pos, x, ls(now));\n\t\tupdate(now);\n\t}\n\tint merge(int x, int y)\n\t{\n\t\tif(!x || !y) return x | y;\n\t\tif(t[x].key > t[y].key)\n\t\t\treturn rs(x) = merge(rs(x), y), update(x), x;\n\t\telse return ls(y) = merge(x, ls(y)), update(y), y;\n\t}\n\t```\n\t\u67e5\u8be2\u6392\u540d\uff1a\n    \n   ```cpp\n\tint getrank(int now)\n    // \u8fd9\u91cc\u7684 now \u4e00\u5f00\u59cb\u8868\u793a\u7684\u662f\u88ab\u64cd\u4f5c\u6570\u6240\u5728\u533a\u95f4\u7684\u5e73\u8861\u6811\u8282\u70b9\u7f16\u53f7\n    // \u67e5\u8be2\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5f53\u524d\u7f16\u53f7\u8282\u70b9\u7684\u53f3\u7aef\u70b9\u7684\u6392\u540d\n\t{\n\t\tint ans = t[now].size - t[rs(now)].size;// \u5176\u5de6\u5b50\u6811\u548c\u5b83\u672c\u8eab\u80af\u5b9a\u6bd4\u5b83\u5c0f\uff0c\u52a0\u5165\u7b54\u6848\n\t\twhile(now != root)\n\t\t{\n\t\t\tif(rs(fa(now)) == now) ans += t[fa(now)].size - t[rs(fa(now))].size;\n            // \u5982\u679c\u8be5\u8282\u70b9\u662f\u7236\u4eb2\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u5219\u8bf4\u660e\u5de6\u5b50\u6811\u548c\u7236\u4eb2\u8282\u70b9\u7684\u533a\u95f4\u4e00\u5b9a\u6bd4\u5b83\u5c0f\uff0c\u52a0\u5165\u7b54\u6848\n\t\t\tnow = t[now].fa;\n\t\t}\n\t\treturn ans;\n\t}\n\t```\n\t\u67e5\u8be2\u6392\u540d\u5bf9\u5e94\u7684\u6570\uff1a\n    \n    ```cpp\n\tint getnum(int now, int pos)\n\t{\n\t\tif(pos <= t[ls(now)].size) return getnum(ls(now), pos);\n\t\tpos -= t[ls(now)].size;\n\t\tif(pos <= t[now].r - t[now].l + 1) return t[now].l + pos - 1;\n        \t// \u627e\u5230\u4e86\u8be5\u4f4d\u7f6e\u6240\u5728\u7684\u533a\u95f4\uff0c\u8f93\u51fa\u5de6\u7aef\u70b9\u6392\u540d + \u5f53\u524d\u4f4d\u7f6e - 1\uff0c\u6613\u8bc1\u8fd9\u79cd\u5199\u6cd5\u7684\u6b63\u786e\u6027\n\t\telse return getnum(rs(now), pos - len(now));//\u7ee7\u7eed\u627e\n\t}\n\t```\n   \u63d2\u5165\u548c\u5220\u9664\uff1a\n   \n   ```cpp\n\tvoid Insert(int pos, int l, int r)\n\t{\n\t\tint x, y;\n\t\tsplit(root, pos - 1, x, y);\n\t\troot = merge(merge(x, addnode(l, r)), y);\n\t}\n\tvoid Delete(int l, int r)\n\t{\n\t\tint x, y, z;\n\t\tsplit(root, r, x, z);\n\t\tsplit(x, l - 1, x, y);\n\t\troot = merge(x, z);\n\t}// \u4e0d\u591a\u89e3\u91ca\n\t```\n\t\u64cd\u4f5c\u51fd\u6570\uff1a\n    \n    ```cpp\n\tvoid work(int x, int y)\n\t{\n\t\tauto it = --Hash.upper_bound(x);\n\t\tint l = it -> first, pos = it -> second;\n\t\tint r = t[pos].r;\n      \t// \u627e\u5230\u5de6\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u8282\u70b9\u7684\u5de6\u8282\u70b9\u6700\u5927\u533a\u95f4\n  \t   \t// \u8bed\u6cd5\u77e5\u8bc6\u4e0d\u518d\u8d58\u8ff0\n\t\twrite(last = getrank(pos) - r + x, '\\n');\n      \t// \u8f93\u51fa\u8be5\u6570\u6240\u5728\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u6392\u540d - \uff08\u53f3\u7aef\u70b9 - \u5f53\u524d\u6570\uff09\n\t\tDelete(last - x + l, last - x + r);\n\t\tif(x > l) Insert(last - x + l, l, x - 1);\n\t\tif(r > x) Insert(last, x + 1, r);\n\t\tif(y == -2) Insert(1, x, x);// \u5bf9\u5e94\u64cd\u4f5c 2\n\t\telse if(y == -3) Insert(n, x, x); // \u5bf9\u5e94\u64cd\u4f5c 3\n\t\telse Insert(last, y, y);// \u5bf9\u5e94\u64cd\u4f5c 1\n        \t// \u6309\u8981\u6c42\u5220\u9664\u548c\u63d2\u5165\n\t}\n\t```\n#### \u6700\u540e\u653e\u4e0a\u65e0\u6ce8\u91ca\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ls(x) t[x].ls\n#define rs(x) t[x].rs\n#define fa(x) t[x].fa\n#define len(x) (t[x].r - t[x].l + 1)\nmap <int, int> Hash;\nconst int N = 1e5 + 10;\nint n, m, root, cnt, last;\nstruct FHQ_Treap\n{\n\tint size, ls, rs, fa, key, l, r;\n}t[N << 5];\ntemplate <typename Tp> void read(Tp &x)\n{\n\tTp f = 1; x = 0; char ch = getchar();\n\twhile(ch > '9' || ch < '0') { if(ch == '-') f = -1; ch = getchar(); }\n\twhile(ch >= '0' && ch <= '9') { x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar(); }\n\tx *= f;\n}\ntemplate <typename Tp> void write(Tp x, char ch)\n{\n\tif(x < 0) putchar('-'), x = -x;\n\tif(x > 9) write(x / 10, 0); putchar(x % 10 + '0');\n\tif(ch == ' ') putchar(' '); if(ch == '\\n') putchar('\\n');\n}\nint addnode(int l, int r)\n{\n\tHash[l] = ++cnt;\n\tt[cnt].size = r - l + 1;\n\tt[cnt].l = l; t[cnt].r = r;\n\tt[cnt].key = rand();\n\treturn cnt;\n}\nvoid update(int x)\n{\n\tfa(ls(x)) = fa(rs(x)) = x;\n\tt[x].size = t[ls(x)].size + t[rs(x)].size + len(x);\n}\nvoid split(int now, int pos, int &x, int &y)\n{\n\tif(!now) return x = y = 0, void();\n\tif(t[ls(now)].size < pos)\n\t\tx = now, split(rs(now), pos - t[ls(now)].size - len(now), rs(now), y);\n\telse y = now, split(ls(now), pos, x, ls(now));\n\tupdate(now);\n}\nint merge(int x, int y)\n{\n\tif(!x || !y) return x | y;\n\tif(t[x].key > t[y].key)\n\t\treturn rs(x) = merge(rs(x), y), update(x), x;\n\telse return ls(y) = merge(x, ls(y)), update(y), y;\n}\nint getrank(int now)\n{\n\tint ans = t[now].size - t[rs(now)].size;\n\twhile(now != root)\n\t{\n\t\tif(rs(fa(now)) == now) ans += t[fa(now)].size - t[rs(fa(now))].size;\n\t\tnow = t[now].fa;\n\t}\n\treturn ans;\n}\nint getnum(int now, int pos)\n{\n\tif(pos <= t[ls(now)].size) return getnum(ls(now), pos);\n\tpos -= t[ls(now)].size;\n\tif(pos <= t[now].r - t[now].l + 1) return t[now].l + pos - 1;\n\telse return getnum(rs(now), pos - len(now));\n}\nvoid Insert(int pos, int l, int r)\n{\n\tint x, y;\n\tsplit(root, pos - 1, x, y);\n\troot = merge(merge(x, addnode(l, r)), y);\n}\nvoid Delete(int l, int r)\n{\n\tint x, y, z;\n\tsplit(root, r, x, z);\n\tsplit(x, l - 1, x, y);\n\troot = merge(x, z);\n}\nvoid work(int x, int y)\n{\n\tauto it = --Hash.upper_bound(x);\n\tint l = it -> first, pos = it -> second;\n\tint r = t[pos].r;\n\twrite(last = getrank(pos) - r + x, '\\n');\n\tDelete(last - x + l, last - x + r);\n\tif(x > l) Insert(last - x + l, l, x - 1);\n\tif(r > x) Insert(last, x + 1, r);\n\tif(y == -2) Insert(1, x, x);\n\telse if(y == -3) Insert(n, x, x);\n\telse Insert(last, y, y);\n}\nint main()\n{\n\tread(n); read(m);\n\tHash[1] = 1; Insert(1, 1, n);\n\tfor(int i = 1, x, y, opt; i <= m; ++ i)\n\t{\n\t\tread(opt); read(x); x -= last;\n\t\tswitch(opt)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\tread(y); y -= last; work(x, y); break;\n\t\t\tcase 2:\n\t\t\t\twork(x, -2); break;\n\t\t\tcase 3:\n\t\t\t\twork(x, -3); break;\t\n\t\t\tcase 4:\n\t\t\t\twrite(last = getnum(root, x), '\\n'); break;\t\n\t\t}\n\t}\n}\n```\n\u7801\u98ce\u4e2d\u89c4\u4e2d\u77e9\u5427\u5927\u5bb6\u8f7b\u55b7\u3002\u3002\uff08\u9003",
        "postTime": 1685000966,
        "uid": 765449,
        "name": "wwwjy4612code",
        "ccfLevel": 4,
        "title": "P3285 [SCOI2014]\u65b9\u4f2f\u4f2f\u7684OJ \u9898\u89e3"
    }
]