[
    {
        "content": "\u51e0\u4f55 + DS\u795e\u9898\u3002\n\n\u5f00\u59cb\u770b\u975e\u5e38\u6ca1\u6709\u601d\u8def\uff0c\u4f46\u662f\u6839\u636e\u6837\u4f8b\u6211\u4eec\u53ef\u4ee5\u731c\u5230\u7b54\u6848\u4e00\u5b9a\u5f88\u5c0f\uff0c\u4e8b\u5b9e\u4e0a\u7b54\u6848 $\\le 3$\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u5148\u8003\u8651\u4e8c\u7ef4\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6211\u4eec\u53ea\u6709\u4e24\u79cd\u8c03\u6599\u5982\u4f55\u5904\u7406\u3002\n\n\u6211\u4eec\u7528\u4e8c\u5143\u7ec4 $(P,Q)$ \u63cf\u8ff0\u4e00\u4e2a\u74f6\u5b50\uff0c\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u53ea\u5173\u5fc3\u8fd9\u4e2a\u6bd4\u503c $\\frac{P}{Q}$ \u3002\u800c\u6700\u7ec8\u6211\u4eec\u9700\u8981\u8c03\u51fa\u7684\u4e5f\u53ea\u9700\u8981\u4e00\u4e2a\u6bd4\u503c\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u6bd4\u503c\u53ef\u4ee5\u770b\u6210\u6570\u8f74\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u663e\u7136\u4e24\u4e2a\u74f6\u5b50\u5bf9\u5e94\u4e24\u4e2a\u70b9 $A,B$\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u51fa\u7ebf\u6bb5 $AB$ \u4e0a\u5bf9\u5e94\u7684\u4efb\u610f\u6bd4\u503c\u3002\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u5982\u679c\u53ea\u7528\u4e00\u4e2a\u74f6\u5b50\uff0c\u5c31\u662f\u7ebf\u6bb5\u7aef\u70b9\uff0c\u518d\u52a0\u5165\u53e6\u4e00\u4e2a\u74f6\u5b50\u80fd\u4f7f\u5f97\u6bd4\u4f8b\u504f\u79fb\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e09\u5143\u7ec4 $(X,Y,Z)$ \uff0c\u6211\u4eec\u4e5f\u53ea\u5173\u5fc3\u6bd4\u503c $(\\dfrac{X}{X+Y+Z},\\dfrac{Y}{X+Y+Z})$\uff0c\u73b0\u5728\u6211\u4eec\u4e00\u4e2a\u74f6\u5b50\u770b\u6210\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\u7684\u4e00\u4e2a\u70b9\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e24\u4e2a\u74f6\u5b50\uff0c\u663e\u7136\u53ea\u80fd\u8c03\u51fa\u5bf9\u5e94\u4e24\u70b9\u7ebf\u6bb5\u4e0a\u7684\u6bd4\u503c\u3002\n\n\u73b0\u5728\u52a0\u5165\u7b2c\u4e09\u4e2a\u74f6\u5b50\uff0c\u4e5f\u5c31\u662f\u5728\u8fd9\u6761\u7ebf\u6bb5\u53d6\u4e00\u4e2a\u70b9\uff0c\u518d\u4e0e\u7b2c\u4e09\u4e2a\u70b9\u8fde\u7ebf\u3002\u4e0d\u96be\u53d1\u73b0\u8fd9\u6761\u8fde\u7ebf\u662f\u52a8\u6001\u7684\uff0c\u4e14\u626b\u8fc7\u7684\u9762\u79ef\u6070\u597d\u662f\u4ee5\u4e09\u4e2a\u70b9\u4e3a\u9876\u70b9\u4e09\u89d2\u5f62\u3002\n\n\u5f52\u7eb3\u4e00\u4e0b\uff0c\u5bf9\u4e8e $N$ \u4e2a\u70b9\uff0c\u53ef\u4ee5\u53d6\u5230\u7684\u6bd4\u503c\u5c31\u662f $N$ \u70b9\u5bf9\u5e94\u51f8\u5305\u91cc\u9762\u7684\u6bd4\u503c\u3002\n\n\u56e0\u6b64\u7b54\u6848 $\\le 3$\u3002\n\n\u5982\u679c\u6709\u74f6\u5b50\u4e0e\u521d\u59cb\u70b9\u91cd\u5408\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $1$\u3002\n\n\u5982\u679c\u6709\u4e24\u4e2a\u74f6\u5b50\u7684\u8fde\u7ebf\u7ecf\u8fc7\u521d\u59cb\u70b9\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $2$\u3002\n\n\u5982\u679c\u521d\u59cb\u70b9\u5728\u51f8\u5305\u4e2d\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a $3$ \u3002\n\n\u5426\u5219\u7b54\u6848\u4e3a $0$\u3002\n\n\u4f46\u662f\u6734\u7d20\u7ef4\u62a4\u51f8\u5305\u548c\u8fde\u7ebf\uff0c\u548c\u6734\u7d20\u7684 $\\mathcal{O}(N^4)$ \uff0c\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u3002\n\n\u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u74f6\u5b50\u4e0e\u521d\u59cb\u70b9\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6211\u4eec\u4ee5\u521d\u59cb\u70b9\u4e3a\u7aef\u70b9\u8fdb\u884c\u6781\u89d2\u6392\u5e8f\u3002\n\n\u90a3\u4e48\u7ecf\u8fc7\u521d\u59cb\u70b9\u7684\u8fde\u7ebf\uff0c\u610f\u5473\u7740\u5b58\u5728\u4e24\u4e2a\u89d2\u76f8\u5dee\u4e3a $\\pi$\u3002\n\n\u5982\u679c\u521d\u59cb\u70b9\u5728\u51f8\u5305\u4e2d\uff0c\u610f\u5473\u7740\u5927\u5c0f\u76f8\u90bb\u7684\u4e24\u4e2a\u89d2\u76f8\u5dee $\\le \\pi$\u3002\n\n\u6211\u4eec\u76f4\u63a5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u89d2\u5ea6\u5373\u53ef\uff0c\u6ce8\u610f\u7cbe\u5ea6\u95ee\u9898\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(N\\log N)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\n#define N 100005\nusing namespace std;\nint a[N], b[N], c[N], idx, n, s0, s1, s2;\ntypedef long double db;\ndb st, ed;\nconst db pi = acos(-1.0), eps = 1e-15;\nstruct cmp{bool operator ()(const db &x, const db &y)const{return x + eps < y;}};\nmultiset<db, cmp>s;\ndb calc(db x, db y){\n\tdb cur = atan2(x, y);\n\tif(cur < 0)cur += pi + pi;\n\treturn cur;\n}\ninline db rev(db ang){\n\tif(ang > pi)return ang - pi;\n\treturn ang + pi;\n}\nvoid ins(int i){\n\tint sum = a[i] + b[i] + c[i];\n\tdb x = (db)a[i] / sum, y = (db)b[i] / sum;\n\tif(fabs(x - st) <= eps && fabs(y - ed) <= eps)s0++;\n\telse {\n\t\tdb ang = calc(x - st, y - ed);\n\t\tif(s.find(ang) == s.end() && s.find(rev(ang)) != s.end())s1++;\n\t\ts.insert(ang); \n\t}\n}\nvoid del(int i){\n\tint sum = a[i] + b[i] + c[i];\n\tdb x = (db)a[i] / sum, y = (db)b[i] / sum;\n\tif(fabs(x - st) <= eps && fabs(y - ed) <= eps)s0--;\n\telse {\n\t\tdb ang = calc(x - st, y - ed);\n\t\ts.erase(s.find(ang));\n\t\tif(s.find(ang) == s.end() && s.find(rev(ang)) != s.end())s1--; \n\t}\n}\nint main(){\n\tscanf(\"%d%d%d\", &a[0], &b[0], &c[0]);\n\tst = (db)a[0] / (a[0] + b[0] + c[0]), ed = (db)b[0] / (a[0] + b[0] + c[0]);\n\tscanf(\"%d\", &n);\n\tchar op[2];int x;\n\trep(i, 1, n){\n\t\tscanf(\"%s\", op);\n\t\tif('A' == *op)++idx, scanf(\"%d%d%d\", &a[idx], &b[idx], &c[idx]), ins(idx);\n\t\telse scanf(\"%d\", &x), del(x);\n\t\tif(s0)puts(\"1\");else if(s1)puts(\"2\");else if(s.size() < 3)puts(\"0\");\n\t\telse if((*s.rbegin() - *s.begin()) < pi)puts(\"0\");\n\t\telse if((*s.lower_bound(pi) - *(--s.upper_bound(pi))) > pi)puts(\"0\");\n\t\telse puts(\"3\");\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1626355213,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[BalticOI 2020 Day1] \u6df7\u5408\u8c03\u6599"
    }
]