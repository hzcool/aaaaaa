[
    {
        "content": "\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n\u79df\u6bcf\u4e00\u4e2a\u96c7\u4f63\u5175\uff0c\u6211\u4eec\u5c31\u4ece\u8d85\u7ea7\u6e90\u5411\u8fd9\u4e2a\u96c7\u4f63\u5175\u6240\u5728\u5c9b\u5c7f\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\uff08\u56e0\u4e3a\u53ea\u80fd\u96c7\u4f63\u4e00\u6b21\uff09\uff0c\u8d39\u7528\u4e3a\u8be5\u96c7\u4f63\u5175\u4ef7\u683c\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u5ea7\u6865\uff0c\u6211\u4eec\u770b\u4f5c\u662f\u4e00\u6761\u8fde\u63a5\u70b9\u7684\u65e0\u5411\u8fb9\u3002\u5219\u4ece\u8be5\u6865\u4e24\u8fb9\u5411\u5f7c\u6b64\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u8be5\u6865\u957f\u5ea6\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u5ea7\u5c9b\u4e0a\u7684\u91ce\u517d\uff0c\u6211\u4eec\u53ef\u4ee5\u62c6\u70b9\u3002\u628a\u8be5\u5c9b\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3aINF\uff0c\u8d39\u7528\u4e3a\u8be5\u5c9b\u91ce\u517d\u6570\u91cf\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5956\u8d4f\uff0c\u90fd\u5411\u8d85\u7ea7\u6c47\u8fde\u4e00\u6761\u957f\u5ea6\u4e3a1\uff08\u56e0\u4e3a\u53ea\u80fd\u53d6\u4e00\u6b21\uff09\uff0c\u8d39\u7528\u4e3a0\u7684\u8fb9\u3002\n\n\u6700\u540e\u6c42\u89e3\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n\u82e5\u6700\u5927\u6d41\u6d41\u91cf\u5c0f\u4e8e\u5b9d\u85cf\u6570\u91cf\uff0c\u5219\u65e0\u6cd5\u83b7\u5f97\u6240\u6709\u7684\u5956\u8d4f\u3002\u8f93\u51fa\u6700\u5927\u6d41\u7684\u6d41\u91cf\u3002\n\n\u5426\u5219\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u7684\u5b9d\u85cf\u3002\u8f93\u51fa\u6240\u6709\u5956\u8d4f\u7684\u8bf1\u60d1\u529b\u51cf\u53bb\u6700\u5c0f\u8d39\u7528\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> P;\n\nconst int MAXN = 2001, MAXM = 15000, INF = 0x7F7F7F7F;\n\nstruct edge {\n    int to, cap, cost, rev;\n};\n\nint n, m, a, b, sum;\nvector <edge> G[MAXN + 1];\n\nedge make_edge(int to, int cap, int cost, int rev) {\n    edge x;\n    x.to = to, x.cap = cap, x.cost = cost, x.rev = rev;\n    return x;\n}\n\nvoid add_edge(int from, int to, int cap, int cost) {\n    G[from].push_back(make_edge(to, cap, cost, G[to].size()));\n    G[to].push_back(make_edge(from, 0, -cost, G[from].size() - 1));\n}\n\nvoid init() {\n    scanf(\"%d%d%d%d\", &n, &m, &a, &b);\n    for (int i = 1; i <= n; ++i) {\n        int x;\n        scanf(\"%d\", &x);\n        add_edge(i, i+n, INF, x);\n    }\n    for (int i = 1; i <= m; ++i) {\n        int u, v, w;\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add_edge(u + n, v, INF, w);\n        add_edge(v + n, u, INF, w);\n    }\n    for (int i = 1; i <= a; ++i) {\n        int q, p;\n        scanf(\"%d %d\", &q, &p);\n        add_edge(0, p, 1, q);\n    }\n    for (int i = 1; i <= b; ++i) {\n        int k, q;\n        scanf(\"%d %d\", &k, &q);\n        sum += k;\n        add_edge(q + n, n + n + 1, 1, 0);\n    }\n}\n\nnamespace EK_SPFA {\n    int dis[MAXN + 1];\n    int prev[MAXN + 1];\n    int pree[MAXN + 1];\n\n    void bfs(int s) {\n        bool mark[MAXN + 1];\n        memset(dis, 0x7F, sizeof(dis));\n        memset(prev, -1, sizeof(prev));\n        memset(pree, -1, sizeof(pree));\n        memset(mark, 0, sizeof(mark));\n        queue <int> q;\n        dis[s] = 0;\n        q.push(s);\n        while (!q.empty()) {\n            int x = q.front();\n            q.pop();\n            mark[x] = false;\n            for (int i = 0; i < G[x].size(); ++i) {\n                edge &e = G[x][i];\n                if (e.cap > 0  &&  dis[x] + e.cost < dis[e.to]) {\n                    dis[e.to] = dis[x] + e.cost;\n                    prev[e.to] = x;\n                    pree[e.to] = i;\n                    if (!mark[e.to]) {\n                        mark[e.to] = true;\n                        q.push(e.to);\n                    }\n                }\n            }\n        }\n    }\n\n    P min_cost_max_flow(int s, int t) {\n        int flow = 0, cost = 0;\n        for(;;) {\n            bfs(s);\n            if (dis[t] == INF)\n                return make_pair(flow, cost);\n            int d = INF;\n            for (int i = t; prev[i] != -1; i = prev[i])\n                d = min(d, G[prev[i]][pree[i]].cap);\n            flow += d;\n            cost += d*dis[t];\n            for (int i = t; prev[i] != -1; i = prev[i]) {\n                edge &e = G[prev[i]][pree[i]];\n                e.cap -= d;\n                G[e.to][e.rev].cap += d;\n            }\n        }\n    }\n}\n\nint main() {\n    init();\n    P ans = EK_SPFA::min_cost_max_flow(0, n + n + 1);\n    if (ans.first < b) {\n        puts(\"No\");\n        printf(\"%d\\n\", ans.first);\n    } else {\n        puts(\"Yes\");\n        printf(\"%d\\n\", sum - ans.second);\n    }\n    return 0;\n}\n```",
        "postTime": 1518831993,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4237 \u3010\u8352\u829c\u7684\u6d77\u6d0b\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u51fa\u4e00\u5f20\u6709 $n$ \u8282\u70b9\u56fe\uff0c\u6bcf\u6761\u8fb9\u548c\u6bcf\u4e2a\u70b9\u90fd\u6709\u82b1\u8d39\uff0c\u6c42\u51fa\u6240\u6709\u76ee\u6807\u70b9\u90fd\u53ef\u5230\u8fbe\u7684\u8f93\u51fa\u6700\u5c0f\u82b1\u8d39\uff0c\u5982\u679c\u4e0d\u80fd\u5219\u8f93\u51fa\u6700\u591a\u53ef\u5230\u8fbe\u7684\u76ee\u6807\u70b9\u4e2a\u6570\u3002[QWQ](https://www.luogu.com.cn/blog/xzc/solution-p4237)\n## \u5206\u6790\n\u6211\u4eec\u5148\u8003\u8651\u4e00\u4e2a\u51fa\u53d1\u70b9\u548c\u4e00\u4e2a\u76ee\u6807\u70b9\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u8fd9\u5c31\u662f\u4e2a\u6700\u77ed\u8def\uff0c\u8def\u7684\u957f\u5ea6\u4e3a\u7ecf\u8fc7\u7684\u8fb9\u548c\u70b9\u6743\u7684\u548c\u3002\u90a3\u4e48\u6709\u591a\u4e2a\u51fa\u53d1\u70b9\u548c\u591a\u4e2a\u76ee\u6807\u70b9\u65f6\uff0c\u8fd9\u5c31\u628a\u539f\u56fe\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u8fd9\u91cc\u5c31\u662f\u6c42\u4e8c\u5206\u56fe\u6700\u5c0f\u6743\u5b8c\u7f8e\u5339\u914d\u3002\n\n- $KM$ \u548c $MCMF$ \u90fd\u53ef\u4ee5\u6c42\u89e3\u3002\u90a3\u6211\u4eec\u76f4\u63a5\u505a\u4e2a\u8d39\u7528\u6d41\uff0c\u5c06\u6700\u77ed\u8def\u7684\u90e8\u5206\u5728\u4e3b\u51fd\u6570\u4e2d\u5904\u7406\uff0c\u800c\u4e0d\u662f\u9884\u5904\u7406\u540e\u518d\u505a\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e2a\u8d39\u7528\u6d41\u7684\u677f\u5b50\u9898\u4e86\uff0c\u53ea\u662f\u8981\u8bb0\u4f4f\u62c6\u70b9\u3002\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf = 0x3f3f3f3f;\nconst int N = 30510;\nint n,m,maxflow,mincost,A,B,head[N],lastn[N],laste[N],dis[N],vis[N],a[N],cnt = 1;\nstruct Edge{int flow,cap,to,nxt,cost;}e[N<<1];\nvoid Add(int x,int y,int cap,int cost){\n\te[++cnt].flow = 0;e[cnt].cap = cap;e[cnt].to = y;e[cnt].nxt = head[x];e[cnt].cost = cost;head[x] = cnt;\n\te[++cnt].flow = 0;e[cnt].cap = 0; e[cnt].to = x;e[cnt].nxt = head[y];e[cnt].cost = -cost;head[y] = cnt; \n}\nqueue<int> Q;\nbool Bfs(int s,int t){\n\tmemset(dis,inf,sizeof(dis));dis[s] = 0;\n\tmemset(a,0,sizeof(a)); a[s] = inf;\n\tmemset(vis,0,sizeof(vis)); vis[s] = 1;\n\tQ.push(s);\n\twhile(Q.size()){\n\t\tint x = Q.front();Q.pop();vis[x] = 0;\n\t\tfor(int i = head[x];i;i = e[i].nxt)\n\t\t{\n\t\t\tint y = e[i].to;\n\t\t\tif(e[i].cap > e[i].flow && dis[y] > dis[x] + e[i].cost)\n\t\t\t{\n\t\t\t\tdis[y] = dis[x] + e[i].cost;\n\t\t\t\tlastn[y] = x;\n\t\t\t\tlaste[y] = i;\n\t\t\t\ta[y] = min(a[x],e[i].cap - e[i].flow);\n\t\t\t\tif(vis[y]) continue;\n\t\t\t\tvis[y] = 1;Q.push(y);\n\t\t\t}\n\t\t}\n\t}\n\treturn a[t] > 0;\n}\nvoid Mcmf(int s,int t)\n{\n\twhile(Bfs(s,t)){\n\t\tint u = t;\n\t\twhile(u != s){\n\t\t\te[laste[u]].flow += a[t];\n\t\t\te[laste[u]^1].flow -= a[t];\n\t\t\tu = lastn[u];\n\t\t}\n\t\tmaxflow += a[t];\n\t\tmincost += a[t] * dis[t];\n\t} \n}\nint read(){\n\tint x;scanf(\"%d\",&x);return x;\n}\nint main()\n{\n\tn = read();m = read();A = read();B = read();\n\tfor(int i = 1;i <= n;i++)\n\t{\n\t\tint cost = read();\n\t\tAdd(i,i+n,inf,cost);\n\t}\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint a = read(),b = read(),w = read();\n\t\tAdd(a+n,b,inf,w);\n\t\tAdd(b+n,a,inf,w);\n\t}\n\tint s = 0,t = 2*n+1;\n\tfor(int i = 1;i <= A;i++){\n\t\tint q = read(),p = read();\n\t\tAdd(s,p,1,q);\n\t}\n\tfor(int i = 1;i <= B;i++){\n\t\tint k = read(),q = read();\n\t\tAdd(q+n,t,1,-k);\n\t}\n\tMcmf(s,t);\n\tif(maxflow == B){\t\n\t\tprintf(\"Yes\\n%d\\n\",-mincost);\n\t}\n\telse printf(\"No\\n%d\\n\",maxflow);\n\treturn 0;\n}\n\n\n\n```\n",
        "postTime": 1596154950,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4237 \u3010\u8352\u829c\u7684\u6d77\u6d0b\u3011"
    },
    {
        "content": "**\u6ce8\u610f\u5173\u952e\u5b57:\u6bcf\u4e2a\u96c7\u4f63\u5175\u6700\u591a\u53ea\u80fd\u96c7\u7528\u4e00\u6b21**\n\n\u770b\u5230\u8fd9\u4e2a\u5173\u952e\u5b57\u5c31\u662fSB\u9898\u4e86\u3002\n\n\u5148\u8dd1a\u904d\u6700\u77ed\u8def\u5f97\u51fa\u6bcf\u4e2a\u96c7\u4f63\u5175\u62ff\u6bcf\u4e2a\u5b9d\u7269\u9700\u8981\u7684\u4ee3\u4ef7\uff08\u4e8b\u5b9e\u8bc1\u660e\u5e76\u6ca1\u6709\u5361spfa,\u4e0d\u5fc5\u5199dijkstra+\u5806\uff09\uff0c\u7136\u540e\u505a\u4e00\u6b21\u4e8c\u5206\u5339\u914d\u5373\u53ef\u3002\n\n\uff08\u8003\u8bd5\u7684\u65f6\u5019\u5c45\u7136\u5fd8\u4e86KM \u600e\u4e48\u5199...\u56de\u8fc7\u795e\u6765\u624d\u60f3\u8d77\u786e\u5b9a\u4e86\u4e24\u8fb9\u70b9\u4ee5\u540e\u7684\u4e8c\u5206\u5339\u914d\u7f51\u7edc\u6d41\u4e5f\u662f\u80fd\u505a\u7684QAQ\uff09\n\n\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1003;\nconst int maxm = 15003;\nconst int INF = 0x3f3f3f3f;\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = 0;\n    for (;!isdigit(ch);ch = getchar()) if (ch == '-') f = -1;\n    for (;isdigit(ch);ch = getchar()) x = x *10 + ch - 48;\n    return x * f;\n}\nconst int S = 0, T = 1001;\nstruct node{int ne,to,dis,w,f;}e[maxm <<7];\nint n,m,A,B;\nint a[maxn][maxn],s[maxn],bing[maxn][2],bao[maxn][2],he[maxn],nume;\nint dis[305][maxn],Dis[maxn],pre[maxn],ed[maxn],flow,cost;\nint que[maxn << 4],He,ta;\nbool vis[maxn],used[maxn];\nint C[maxn];\ninline void add(int p,int q,int r,int s)\n{\n    //printf(\"%d %d %d %d\\n\",p,q,r,s);\n    e[++nume].to = q; e[nume].w = r; e[nume].f = s; e[nume].ne = he[p]; he[p] = nume;\n    e[++nume].to = p; e[nume].w = -r; e[nume].f = 0; e[nume].ne = he[q]; he[q] = nume;\n}\ninline void addside(int p,int q,int r)\n{\n//\tprintf(\"%d %d %d\\n\",p,q,r);\n    if (p == q) return;\n    e[++nume].to = q; e[nume].ne = he[p]; he[p] = nume; e[nume].dis = r;\n}\nbool Spfa() \n{\n    memset(Dis,63,sizeof(Dis));\n    memset(vis,0,sizeof(vis));\n    Dis[S] = 0;vis[S] = 1;\n    queue<int> q; q.push(S);\n    while (!q.empty())\n    {\n        int f = q.front(); q.pop();vis[f] = 0;\n        for (int i = he[f]; i; i = e[i].ne)\n        {\n            if (Dis[e[i].to] > Dis[f] + e[i].w && e[i].f)\n            {\n                pre[e[i].to] = f,Dis[e[i].to] = Dis[f] + e[i].w; ed[e[i].to] = i;\n                if (!vis[e[i].to]) vis[e[i].to] = 1, q.push(e[i].to);\t\t\t\t\n            }\n        }\n    }\n    if (Dis[T] == INF) return 0;\n    int tmp = INF,all = 0; \n    for (int i = T; i != S; i = pre[i]) tmp = min(tmp,e[ed[i]].f);\n    for (int i = T; i != S; i = pre[i]) e[ed[i]].f-= tmp, e[ed[i]^1].f += tmp;\n    flow += tmp; cost += Dis[T];\n    return 1;\n}\nvoid spfa(int now)\n{\n    memset(vis,0,sizeof(vis));\n    dis[now][bing[now][1]] = s[bing[now][1]];\n    He = ta = 1;que[He] = bing[now][1];\n    while (He <= ta)\n    {\n        int f = que[He];\n        for (int i = he[f]; i; i = e[i].ne)\n        {\n            if (dis[now][e[i].to] > dis[now][f] + e[i].dis + s[e[i].to])\n            {\n                dis[now][e[i].to] = dis[now][f] + e[i].dis + s[e[i].to];\n                if (!vis[e[i].to]) que[++ta] = e[i].to, vis[e[i].to] = 1;\n            }\n        }\n        vis[f] = 0;He++;\n    }\n    for (int i = 1; i <= n; ++i) dis[now][i] += bing[now][0];\n}\nint main()\n{\n    memset(a,63,sizeof(a));memset(dis,63,sizeof(dis));\n    n = read(); m = read(), A = read(); B = read();\n    for (int i = 1; i <= n; ++i) s[i] = read();\n    for (int i = 1; i <= m; ++i) \n    {\n        int u = read(), v = read(), w = read();\n        a[u][v] = min(a[u][v],w); a[v][u] = min(a[v][u],w);\n    }\n    for (int i = 1; i <= A; ++i) bing[i][0] = read(), bing[i][1] = read();\n    for (int i = 1; i <= B; ++i) bao[i][0] = read(), bao[i][1] = read();\n    for (int i = 1; i <= n; ++i)\n    for (int j = i + 1; j <= n; ++j)\n    {\n        if (a[i][j] == INF) continue;\n        else addside(i,j,a[i][j]),addside(j,i,a[i][j]); \n    }\n    for (int i = 1; i <= A; ++i) spfa(i);\n    memset(he,0,sizeof(he)); nume = 1;\n    for (int i = 1; i <= A; ++i)\n    for (int j = 1; j <= B; ++j)\n        if (dis[i][bao[j][1]] < (int)1e9)add(i,j+A+5,dis[i][bao[j][1]],1);\n    for (int i = 1; i <= A; ++i) add(S,i,0,1);\n    for (int i = 1; i <= B; ++i) add(i+A+5,T,0,1);\n    while (Spfa());\n    int tot = 0;\n    for (int i = 1; i<= B; ++i) tot += bao[i][0];\n    if (flow != B) printf(\"No\\n%d\\n\",flow);\n    else printf(\"Yes\\n%d\\n\",tot - cost);\n}\n```",
        "postTime": 1518830223,
        "uid": 47764,
        "name": "Maniac\u4e36\u575a\u679c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4237 \u3010\u8352\u829c\u7684\u6d77\u6d0b\u3011"
    },
    {
        "content": "## \u3010\u8352\u829c\u7684\u6d77\u6d0b\u3011 C++\u9898\u89e3\n### \u9898\u610f\u7b80\u8ff0\n\n- \u53ef\u4ee5\u81f3\u591a\u96c7\u4f63 $a$ \u4e2a\u4eba\uff0c\u53bb\u5bfb\u627e $b$ \u4e2a\u5b9d\u85cf\u3002\n- \u5b9d\u85cf\u5206\u5e03\u5728 $n$ \u4e2a\u5c9b\uff0c\u5c9b\u4e0e\u5c9b\u4e4b\u95f4\u5171\u6709 $m$ \u5ea7\u6865\u76f8\u8fde\u3002\n- \u901a\u8fc7\u6bcf\u4e2a\u5c9b\uff0c\u9700\u8981\u4e00\u5b9a\u4ee3\u4ef7 $x_i$ \uff08\u5bf9\u5e94\u5230\u5c9b\u4e0a\u7684\u91ce\u517d\u6570\u91cf\uff09\u3002\n- \u901a\u8fc7\u6bcf\u5ea7\u6865\uff0c\u9700\u8981\u4e00\u5b9a\u4ee3\u4ef7 $w_i$ \uff08\u5bf9\u5e94\u5230\u6865\u7684\u957f\u5ea6\uff09\u3002\n- \u96c7\u4f63\u6bcf\u4e2a\u4eba\uff0c\u9700\u8981\u4e00\u5b9a\u4ee3\u4ef7 $q_i$ \uff08\u5bf9\u5e94\u5230\u96c7\u4f63\u7684\u4ef7\u683c\uff09\u3002\n- \u6bcf\u4e2a\u4eba\u4e00\u5f00\u59cb\u90fd\u5728\u7279\u5b9a\u7684\u5c9b $p_i$ \u4e0a\uff0c\u4e14\u53ea\u80fd\u5e26\u4e00\u4e2a\u5b9d\u85cf\u79bb\u5f00\u3002\n- \u6bcf\u4e2a\u5b9d\u85cf\u90fd\u5728\u7279\u5b9a\u7684\u5c9b $q_i$ \u4e0a\uff0c\u90fd\u6709\u7279\u5b9a\u7684\u4ef7\u503c $k_i$\u3002\n- \u95ee\uff0c\u80fd\u5426\u83b7\u53d6\u5168\u90e8\u5b9d\u85cf\uff1f\u80fd\uff0c\u5219\u8f93\u51fa\u6700\u7ec8\u6536\u76ca\uff1b\u4e0d\u80fd\uff0c\u5219\u8f93\u51fa\u83b7\u53d6\u7684\u5b9d\u85cf\u6570\u3002\n\n\u6700\u7ec8\u6536\u76ca\u662f $\\sum\\limits_{i=1}^{b} k_i$ \u51cf\u53bb\u5168\u90e8\u4ee3\u4ef7\u3002\n\n### \u9898\u610f\u5206\u6790\n\n\u8fd9\u662f\u4e00\u4e2a\u8d39\u7528\u6d41\u7684\u9898\u76ee\uff0c\u9700\u8981\u7528\u5230\u62c6\u70b9\u3001\u8d85\u7ea7\u6e90\u6c47\u3002\u56e0\u4e3a\u6709\u70b9\u6743\uff0c\u6240\u4ee5\u9700\u8981\u62c6\u6210\u4e24\u4e2a\u70b9\u64cd\u4f5c\uff1b\u56e0\u4e3a\u8d77\u70b9\u3001\u7ec8\u70b9\u90fd\u6709\u591a\u4e2a\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u6240\u6709\u8d77\u70b9\u4e0e\u8d85\u7ea7\u6e90\u76f8\u63a5\uff0c\u6240\u6709\u7ec8\u70b9\u4e0e\u8d85\u7ea7\u6c47\u76f8\u63a5\u3002\u56e0\u6b64\uff0c\u5efa\u56fe\u65b9\u5f0f\u5982\u4e0b\uff1a\n\n|\u5bf9\u8c61|\u8fde\u63a5\u65b9\u5f0f|\u5bb9\u91cf|\u8d39\u7528|\n|:-:|:-|:-:|:-:|\n|\u5c9b|\u62c6\u6210\u4e24\u70b9\uff0c\u8fde\u6709\u5411\u8fb9|$\\inf$|$x_i$|\n|\u6865|\u8fde\u65e0\u5411\u8fb9|$\\inf$|$w_i$|\n|\u4eba|\u8d85\u7ea7\u6e90\u6307\u5411 $p_i$|$1$|$q_i$|\n|\u5b9d\u85cf|$q_i$ \u6307\u5411\u8d85\u7ea7\u6c47|$1$|$0$|\n\n\u8fdb\u884c\u4e00\u904d\u8d39\u7528\u6d41\uff0c\u5f97\u5230\u6d41\u548c\u8d39\u7528\uff0c\u6309\u8981\u6c42\u8f93\u51fa\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n\u8fd9\u91cc\u7ed9\u51fa\u8d39\u7528\u6d41\u7684\u6a21\u677f\uff0c[\u94fe\u63a5](https://www.luogu.com.cn/paste/4lg5ijl3)\u3002\n\n\u8fd9\u4efd\u6a21\u677f\u53ef\u4ee5\u5e94\u5bf9\u7edd\u5927\u591a\u6570\u8d39\u7528\u6d41\u7684\u9898\u76ee\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u4fee\u6539\u3002\u8c03\u7528 `.link(a,b,c,d)` \u5efa\u56fe\uff0c\u8c03\u7528 `.MCMF(a,b)` \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a `pair<int,int>` \u7c7b\u578b\u7684\u7ed3\u679c\uff0c\u5206\u522b\u662f\u6700\u5927\u6d41\u548c\u6700\u5c0f\u8d39\u7528\u3002\n\n\u9664\u4e86\u6a21\u677f\u4ee5\u5916\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\ngraph G;\nint main()\n{\n\tint n,m,a,b,sum=0;\n\tscanf(\"%d%d%d%d\",&n,&m,&a,&b);\n\tint S=n*2+1,T=n*2+2;\t//\u8d85\u7ea7\u6e90\u6c47\n\tfor(int i=1;i<=n;i++)\t//\u5c9b\n\t{  \n\t    int x;\n\t    scanf(\"%d\",&x);\n\t    G.link(i,i+n,2147483647,x);\n\t}\n\tfor(int i=1;i<=m;i++)\t//\u6865\n\t{\n\t    int u,v,w;\n\t    scanf(\"%d%d%d\",&u,&v,&w);\n\t    G.link(u+n,v,2147483647,w);\n        G.link(v+n,u,2147483647,w);\n\t}\n\tfor(int i=1;i<=a;i++)\t//\u4eba\n\t{\n\t    int q,p;\n\t    scanf(\"%d%d\",&q,&p);\n\t    G.link(S,p,1,q);\n\t}\n\tfor(int i=1;i<=b;i++)\t//\u5b9d\u85cf\n\t{\n\t    int k,q;\n\t    scanf(\"%d%d\",&k,&q);\n\t    sum+=k;\n\t    G.link(q+n,T,1,0);\n\t}\n\tpair<int,int>ans=G.MCMF(S,T);\n\tif(ans.first<b)\n\t    printf(\"No\\n%d\",ans.first);\n\telse\n\t    printf(\"Yes\\n%d\",sum-ans.second);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1642825369,
        "uid": 239988,
        "name": "TianLuen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4237 \u3010\u8352\u829c\u7684\u6d77\u6d0b\u3011"
    },
    {
        "content": "\u672c\u9898\u9898\u610f\u8f83\u4e3a\u590d\u6742\uff0c\u7565\u8003\u9a8c\u8bed\u6587\u80fd\u529b\u3002\u4f46\u82e5\u627e\u5230\u91cd\u70b9\uff0c\u5c31\u80fd\u53d1\u73b0\u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u88f8\u7684\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n**\u91cd\u70b9**\uff1a\u4e00\u4e2a\u4eba\u53ea\u80fd\u627e**\u4e00\u4e2a**\u5956\u52b1\u3002\u82e5\u6709\u80fd\u529b\u62ff\u8d70\u6240\u6709\u5956\u52b1\uff0c\u5219\u5fc5\u987b**\u5168\u90e8**\u62ff\u8d70\uff08\u5c31\u7b97\u8d39\u7528\u9ad8\u4e8e\u5956\u52b1\uff0c>\u5bfc\u81f4\u603b\u6536\u76ca\u4e3a\u8d1f\u4e5f\u4e0d\u4f8b\u5916\uff09\u3002\n\n\u4e0e\u666e\u901a\u8d39\u7528\u6d41\u76f8\u540c\uff0c\u6211\u4eec\u5efa\u8d85\u7ea7\u539f\u548c\u8d85\u7ea7\u6c47\uff0c\u6e90\u5411\u4f63\u5175\u8fde\u6d41\u4e3a $1$ \u8d39\u7528\u4e3a\u4f63\u91d1\u4e0e\u91ce\u517d\u6570\u91cf\u4e4b\u548c\u7684\u8fb9\uff0c\u5956\u52b1\u5411\u6c47\u8fde\u8fb9\uff0c\u6d41\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\uff0c\u5c9b\u4e0e\u5c9b\u4e4b\u95f4\u60c5\u51b5\u6bd4\u8f83\u590d\u6742\uff0c\u91ce\u517d\u548c\u6865\u90fd\u4f1a\u4ea7\u751f\u82b1\u8d39\uff0c\u4f46\u5176\u5b9e\u6211\u4eec **\u6ca1\u5fc5\u8981\u62c6\u70b9** \uff0c\u8003\u8651\u53cc\u5411\u8fde\u8fb9\uff0c\u6d41\u91cf\u663e\u7136\u4e3a\u6b63\u65e0\u7a77\uff0c\u53ea\u9700\u8981\u5c06\u8d39\u7528\u8bbe\u4e3a\u6865\u957f\u4e0e\u7ec8\u70b9\u91ce\u517d\u6570\u91cf\u4e4b\u548c\u5c31\u884c\u4e86\uff0c\u51cf\u5c11\u4e86\u4e00\u534a\u7684\u70b9\u4e4b\u540e\u4f1a\u8282\u7701\u5f88\u5927\u5e38\u6570\u3002\u5f53\u80fd\u62ff\u5230\u6240\u6709\u5956\u52b1\uff0c\u5c31\u8f93\u51fa\u5168\u90e8\u5956\u52b1\u503c\u51cf\u53bb\u6700\u5c0f\u8d39\u7528\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u5c31\u8f93\u51fa\u6700\u5927\u6d41\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u73b0\u5c45\u6700\u4f18\u89e3 rank1 ~~\u56e0\u4e3a\u6682\u65f6\u6ca1\u6709\u5927\u4f6c\u6765\u79c0\u5361\u5e38~~\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#define MX 1987654321\nusing namespace std;\n//\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=fast read\ninline int read() {\n\tregister int a=0,f=1;\n\tregister char g=getchar();\n\twhile(g<'0'||'9'<g) {\n\t\tif(g=='-')f=-1;\n\t\tg=getchar();\n\t}\n\twhile('0'<=g&&g<='9') {\n\t\ta=a*10+g-'0';\n\t\tg=getchar();\n\t}\n\treturn a*f;\n}\n//\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=basic var\nint n,m,start,aaa,bbb,endd,mon[2047];\n//\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=chain forward star\nint head[2047],cont=1;\nstruct li {\n\tint s,to,next,val,cost;\n} e[114514];\ninline void add(int s,int t,int cs,int v) {\n\te[++cont].s=s;\n\te[cont].to=t;\n\te[cont].cost=cs;\n\te[cont].val=v;\n\te[cont].next=head[s];\n\thead[s]=cont;\n\te[++cont].s=t;\n\te[cont].to=s;\n\te[cont].cost=-cs;\n\te[cont].val=0;\n\te[cont].next=head[t];\n\thead[t]=cont;\n}\n//\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=dinic mcmf\nint dis[2047],cur[2047],cst;\nbool book[2047];\n//\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\tspfa\ninline bool spfa() {\n\tfor(int i=1; i<=n+2; ++i)cur[i]=head[i],dis[i]=MX;\n\tdis[start]=0;\n\tqueue<int>q;\n\tq.push(start);\n\tint ak,vk,ck,th;\n\twhile(!q.empty()) {\n\t\tth=q.front();\n\t\tq.pop();\n\t\tbook[th]=0;\n\t\tfor(int i=head[th]; i; i=e[i].next) {\n\t\t\tak=e[i].to,vk=e[i].val,ck=e[i].cost;\n\t\t\tif(vk&&dis[ak]>dis[th]+ck) {\n\t\t\t\tdis[ak]=dis[th]+ck;\n\t\t\t\tif(!book[ak])book[ak]=1,q.push(ak);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[endd]!=MX;\n}\n//\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\tdfs\nint dfs(int a,int flow) {\n\tif(a==endd)return flow;\n\tbook[a]=1;\n\tint rnm=flow,ak,vk,ck;\n\tfor(int i=cur[a]; i&&rnm; i=e[i].next) {\n\t\tcur[a]=i;\n\t\tak=e[i].to,vk=e[i].val,ck=e[i].cost;\n\t\tif(!book[ak]&&vk>0&&dis[ak]==dis[a]+ck) {\n\t\t\tint c=dfs(ak,min(rnm,vk));\n\t\t\tif(c) {\n\t\t\t\tcst+=c*ck;\n\t\t\t\trnm-=c;\n\t\t\t\te[i].val-=c;\n\t\t\t\te[i^1].val+=c;\n\t\t\t}\n\t\t}\n\t}\n\tbook[a]=0;\n\treturn flow-rnm;\n}\n//\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\t-\tdinic\ninline int mcmf(){\n\tint ans=0;\n\twhile(spfa()){\n\t\tint l;\n\t\twhile((l=dfs(start,MX)))ans+=l;\n\t}\n\treturn ans;\n}\n//\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=\t=main\nint main() {\n\tn=read(),m=read(),aaa=read(),bbb=read();\n\tstart=n+1;\n\tendd=n+2;\n\tfor(int i=1;i<=n;++i){\n\t\tmon[i]=read();\n\t}\n\tint ls,lss,lsss;\n\tfor(int i=1;i<=m;++i){\n\t\tls=read(),lss=read(),lsss=read();\n\t\tif(ls==lss)continue;\n\t\tadd(ls,lss,lsss+mon[lss],MX);\n\t\tadd(lss,ls,lsss+mon[ls],MX);\n\t}\n\tfor(int i=1;i<=aaa;++i){\n\t\tls=read(),lss=read();\n\t\tadd(start,lss,ls+mon[lss],1);\n\t}\n\tint ttt=0;\n\tfor(int i=1;i<=bbb;++i){\n\t\tls=read(),lss=read();\n\t\tttt+=ls;\n\t\tadd(lss,endd,0,1);\n\t}\n\tn+=2;\n\tint kkksc3=mcmf();\n\tif(kkksc3==bbb){\n\t\tprintf(\"Yes\\n%d\",ttt-cst);\n\t}else{\n\t\tprintf(\"No\\n%d\",kkksc3);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1628238383,
        "uid": 279095,
        "name": "gargantuar",
        "ccfLevel": 0,
        "title": "P4237 \u8352\u829c\u7684\u6d77\u6d0b \u9898\u89e3"
    }
]