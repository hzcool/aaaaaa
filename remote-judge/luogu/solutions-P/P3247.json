[
    {
        "content": "#### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe ($1\\le n\\le 5\\cdot10^4$, $1\\le m\\le 10^5$)\uff0c\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u6743\u503c $a_e$, $b_e$\u3002\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e24\u4e2a\u70b9\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u4e00\u6761\uff08\u4e0d\u4e00\u5b9a\u7b80\u5355\u7684\uff09\u8def\u5f84\u4f7f\u5f97\u8def\u5f84\u4e0a\u4e24\u79cd\u8fb9\u6743\u7684\u6700\u5927\u503c\u5206\u522b\u7b49\u4e8e\u7ed9\u5b9a\u503c\u3002\n\n#### \u9898\u89e3\n\n\u5bb9\u6613\u53d1\u73b0\u6709\u7528\u7684\u8fb9\u6ee1\u8db3\u4e24\u79cd\u6743\u503c\u90fd\u4e0d\u8d85\u8fc7\u8be2\u95ee\uff0c\u628a\u6709\u7528\u7684\u8fb9\u52a0\u5165\u4e4b\u540e\u68c0\u67e5\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4ee5\u53ca\u4e24\u79cd\u6743\u503c\u7684\u6700\u5927\u503c\u662f\u5426\u5206\u522b\u7b49\u4e8e\u8be2\u95ee\u7684\u503c\u5373\u53ef\u3002\n\n\u5148\u5c06\u8fb9\u6309\u7167 $a_e$ \u6392\u5e8f\u5e76\u5206\u5757\u3002\u628a\u6bcf\u4e2a\u8be2\u95ee\u653e\u5230\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684\u5757\uff1a\u524d\u9762\u5757\u7684 $a_e$ \u90fd\u4e0d\u8d85\u8fc7\u8be2\u95ee\u7684 $a$\u3002\u8fd9\u6837\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u6709\u7528\u7684\u8fb9\u5c31\u53ea\u6709\u524d\u9762\u7684\u5757\u548c\u5b83\u6240\u5728\u7684\u5757\u3002\n\n\u4f9d\u6b21\u5904\u7406\u6bcf\u4e2a\u5757\uff0c\u7531\u4e8e\u524d\u9762\u5757\u7684 $a_e$ \u90fd\u4e0d\u8d85\u8fc7\u8be2\u95ee\u7684 $a$\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651 $b$\u3002\u628a\u524d\u9762\u5757\u7684\u6240\u6709\u8fb9\u548c\u5f53\u524d\u5757\u7684\u8be2\u95ee\u90fd\u6309\u7167 $b$ \u6392\u5e8f\uff0c\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u7684\u65f6\u5019\u628a\u4e0d\u8d85\u8fc7\u8be2\u95ee\u7684 $b$ \u7684\u8fb9\u90fd\u52a0\u5165\u5373\u53ef\u3002\u7528\u8def\u5f84\u538b\u7f29\u548c\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u6bcf\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\alpha(n))$\u3002\n\n\u5bf9\u4e8e\u5757\u5185\u7684\u8fb9\uff0c\u66b4\u529b\u5c06\u6240\u6709\u6709\u7528\u7684\u8fb9\u52a0\u5165\uff0c\u8fdb\u884c\u4e00\u6b21 BFS \u5373\u53ef\u56de\u7b54\u8be2\u95ee\u3002\n\n\u8bbe\u5757\u5927\u5c0f\u4e3a $B$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((qB+\\frac{m^2}B)\\alpha(n))$\u3002\u53d6 $B=O(\\frac{m}{\\sqrt q})$\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(m\\sqrt q\\alpha(n))$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconstexpr int N = 50'000, M = 100'000, Q = 50'000;\nstruct Edge {\n    int u, v, a, b;\n};\nstruct Query {\n    int u, v, a, b, id;\n};\nint fa[N], mxa[N], mxb[N];\nEdge edge[M];\nvector<Query> query[M];\nvector<tuple<int, int, int>> e[N];\nint id[N], stk[N], que[N];\nbool ans[Q], vis[N], used[N];\nint find(int x) {\n    while (fa[x] >= 0 && fa[fa[x]] >= 0)\n        x = fa[x] = fa[fa[x]];\n    return fa[x] >= 0 ? fa[x] : x;\n}\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int n, m, q;\n    cin >> n >> m;\n    memset(id, -1, n * sizeof(int));\n    for (int i = 0; i < m; ++i) {\n        cin >> edge[i].u >> edge[i].v >> edge[i].a >> edge[i].b;\n        --edge[i].u;\n        --edge[i].v;\n    }\n    sort(edge, edge + m, [&](const Edge &lhs, const Edge &rhs) {\n        return lhs.a < rhs.a;\n    });\n    cin >> q;\n    int sz = 1.5 * m / sqrt(q);\n    int blocks = (m + sz - 1) / sz;\n    for (int i = 0; i < q; ++i) {\n        int u, v, a, b;\n        cin >> u >> v >> a >> b;\n        --u;\n        --v;\n        int j = 0;\n        while (j + 1 < blocks && edge[sz * j + sz - 1].a <= a)\n            ++j;\n        query[j].push_back(Query{u, v, a, b, i});\n    }\n    for (int bl = 0; bl < blocks; ++bl) {\n        memset(fa, -1, n * sizeof(int));\n        memset(mxa, -1, n * sizeof(int));\n        memset(mxb, -1, n * sizeof(int));\n        int i = 0;\n        sort(edge, edge + sz * bl, [&](const auto &lhs, const auto &rhs) {\n            return lhs.b < rhs.b;\n        });\n        sort(query[bl].begin(), query[bl].end(), [&](const auto &lhs, const auto &rhs) {\n            return lhs.b < rhs.b;\n        });\n        for (auto &&q : query[bl]) {\n            while (i < sz * bl && edge[i].b <= q.b) {\n                int u = find(edge[i].u);\n                int v = find(edge[i].v);\n                if (u != v) {\n                    if (fa[u] > fa[v])\n                        swap(u, v);\n                    fa[u] += fa[v];\n                    mxa[u] = max(mxa[u], mxa[v]);\n                    mxb[u] = max(mxb[u], mxb[v]);\n                    fa[v] = u;\n                }\n                mxa[u] = max(mxa[u], edge[i].a);\n                mxb[u] = max(mxb[u], edge[i].b);\n                ++i;\n            }\n            int stkTop = 0;\n            int u = find(q.u);\n            used[u] = true;\n            stk[stkTop++] = u;\n            int v = find(q.v);\n            if (u != v) {\n                used[v] = true;\n                stk[stkTop++] = v;\n            }\n            for (int j = sz * bl; j < m && j < sz * (bl + 1); ++j) {\n                if (edge[j].a <= q.a && edge[j].b <= q.b) {\n                    int u = find(edge[j].u);\n                    int v = find(edge[j].v);\n                    if (!used[u]) {\n                        used[u] = true;\n                        stk[stkTop++] = u;\n                    }\n                    if (!used[v]) {\n                        used[v] = true;\n                        stk[stkTop++] = v;\n                    }\n                    e[u].emplace_back(v, edge[j].a, edge[j].b);\n                    e[v].emplace_back(u, edge[j].a, edge[j].b);\n                }\n            }\n            int queL = 0, queR = 0;\n            que[queR++] = u;\n            vis[u] = true;\n            int ma = -1, mb = -1;\n            while (queL < queR) {\n                int u = que[queL++];\n                ma = max(ma, mxa[u]);\n                mb = max(mb, mxb[u]);\n                for (auto &&ed : e[u]) {\n                    int v, a, b;\n                    tie(v, a, b) = ed;\n                    ma = max(ma, a);\n                    mb = max(mb, b);\n                    if (!vis[v]) {\n                        vis[v] = true;\n                        que[queR++] = v;\n                    }\n                }\n            }\n            ans[q.id] = vis[v] && ma == q.a && mb == q.b;\n            for (int j = 0; j < stkTop; ++j) {\n                int u = stk[j];\n                used[u] = vis[u] = false;\n                e[u].clear();\n            }\n        }\n    }\n    for (int i = 0; i < q; ++i)\n        cout << (ans[i] ? \"Yes\" : \"No\") << \"\\n\";\n    return 0;\n}\n```\n\n",
        "postTime": 1576210564,
        "uid": 149656,
        "name": "jiangly",
        "ccfLevel": 10,
        "title": "P3247 [HNOI2016]\u6700\u5c0f\u516c\u500d\u6570 \u9898\u89e3"
    },
    {
        "content": "# \u9898\u76ee\n\n&emsp;&emsp;[luogu](https://www.luogu.com.cn/problem/P3247).\n\n# \u9898\u89e3\n\n&emsp;&emsp;\u7384\u5b66\u79bb\u7ebf + \u79e9\u4f18\u5316\u5e76\u67e5\u96c6\u3002  \n\n&emsp;&emsp;\u5f88\u6709\u6536\u83b7\u7684\u4e00\u9053\u9898qwq\u3002  \n\n&emsp;&emsp;\u6839\u636e $\\operatorname{lcm}$ \u7684\u5b9a\u4e49\uff0c\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6bcf\u6761\u8fb9\u6709\u8fb9\u6743 $(a_e,b_e)$\uff0c\u7ed9\u5b9a\u8be2\u95ee $(u,v,a,b)$\uff0c\u95ee\u662f\u5426\u5b58\u5728\u4e00\u6761\u4ece $u$ \u5230 $v$ \u7684\u8def\u5f84\uff08\u53ef\u4ee5\u975e\u7b80\u5355\u8def\u5f84\uff09\uff0c\u4f7f\u5f97 $\\max\\{a_e\\}=a$ \u4e14 $\\max\\{b_e\\}=b$\u3002\n\n&emsp;&emsp;\u4e0d\u96be\u60f3\u5230\u79bb\u7ebf\uff1a\u6309\u7279\u5b9a\u7684\u987a\u5e8f\u52a0\u5165\u56fe\u4e0a\u7684\u8fb9\uff0c\u5e76\u5728\u8fc7\u7a0b\u4e2d\u6c42\u89e3\u7b54\u6848\u3002  \n\n&emsp;&emsp;\u5bf9\u4e8e\u672c\u9898\u7684\u67d0\u7ec4\u8be2\u95ee $(u,v,a,b)$\uff0c\u6211\u4eec\u53ea\u9700\u8981**\u5728\u4fdd\u8bc1\u56fe\u4e0a\u6240\u6709 $a_e\\le a,b_e\\le b$** \u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u548c\u8054\u901a\u5757\u6700\u5927\u6743\u503c\u5373\u53ef\u3002\n\n&emsp;&emsp;\u63a5\u4e0b\u6765\u662f\u91cd\u5934\u620f\uff1a\u79bb\u7ebf\u7684\u65b9\u5f0f\u3002\n\n- \u7b2c\u4e00\u6b65\uff0c\u8fb9\u4ee5 $a_e$ \u4e3a\u952e\u503c\u6392\u5e8f\uff0c\u8be2\u95ee\u4ee5 $b$ \u4e3a\u952e\u503c\u6392\u5e8f\u3002  \n\n- \u7b2c\u4e8c\u6b65\uff0c\u5c06\u8fb9\u5206\u5757\u5e76\u679a\u4e3e\u5757\uff0c\u8bbe\u5f53\u524d\u5757 $a_e$ \u7684\u8303\u56f4\u4e3a $[a_l,a_r)$\uff0c\u5219\u53d6\u51fa\u6240\u6709 $a\\in[a_l,a_r)$ \u7684\u8be2\u95ee\uff0c\u6211\u4eec\u5c06\u89e3\u51b3\u8fd9\u4e9b\u8be2\u95ee\u3002\n\n- \u7b2c\u4e09\u6b65\uff0c\u8003\u8651\u5230\u5206\u5757\u679a\u4e3e\u4e4b\u540e\uff0c\u5f53\u524d\u5757\u4e4b\u524d\u7684 $a_e$ \u4e00\u5b9a\u6709 $a_e\\le a$\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8fb9\u7684 $a_e$ \u5176\u5b9e\u5df2\u7ecf\u65e0\u5173\u7d27\u8981\u4e86\u3002\u91cd\u65b0\u628a\u8fd9\u4e9b\u8fb9\u6309 $b_e$ \u6392\u5e8f\u3002\n\n- \u7b2c\u56db\u6b65\uff0c\u679a\u4e3e\u6bcf\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u8be2\u95ee\uff0c\u6211\u4eec\u5fc5\u987b\u4fdd\u8bc1\u4e0a\u6587\u7684\u6761\u4ef6\u3002\u4e8e\u662f\uff0c\u4f9d\u6b21\u52a0\u5165\u5f53\u524d\u5757\u4e4b\u524d\u7684\u8fb9\uff0c\u76f4\u5230 $b_e>b$\u3002\u63a5\u7740\uff0c\u66b4\u529b\u52a0\u5165\u5f53\u524d\u5757\u5185\u6240\u6709 $a_e\\le a,b_e\\le b$ \u8fb9\u3002\u5229\u7528\u5e76\u67e5\u96c6\u6c42\u51fa\u5f53\u524d\u7b54\u6848\uff0c\u6700\u540e**\u56de\u9000\u5230\u52a0\u5165\u5f53\u524d\u5757\u7684\u8fb9\u4e4b\u524d\u7684\u72b6\u6001**\uff0c\u800c\u5e76\u975e\u76f4\u63a5\u6e05\u7a7a\uff08\u8be2\u95ee\u7684 $b$ \u6709\u5e8f\uff09\u3002\n\n    &emsp;&emsp;\u56de\u9000\u64cd\u4f5c\uff0c\u53ea\u9700\u8981\u7528\u79e9\u4f18\u5316\u5e76\u67e5\u96c6\u518d\u52a0\u4e00\u4e2a\u6808\u8bb0\u5f55\u4fee\u6539\u5373\u53ef\u3002\n\n    &emsp;&emsp;\u8bbe\u5757\u7684\u5927\u5c0f\u4e3a $k$\uff0c\u5219\u590d\u6742\u5ea6 $\\Theta(km\\log_2m+qk\\log_2k)$\uff08\u53ef\u80fd\u6709\u8befqwq\uff0c\u6b22\u8fce\u6307\u6b63\u3002\n\n    &emsp;&emsp;~~\u7ffb\u4e00\u7ffb\u9898\u89e3\u53d1\u73b0\uff0c~~ \u5f53 $k=\\sqrt{m\\log_2n}$ \u65f6\u53d6\u5f97\u590d\u6742\u5ea6\u5e73\u8861\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n\n#define aiskey( type ) []( const type x, const type y ) { return x.a ^ y.a ? x.a < y.a : x.b < y.b; }\n#define biskey( type ) []( const type x, const type y ) { return x.b ^ y.b ? x.b < y.b : x.a < y.a; } \n\ninline int rint () {\n\tint x = 0; char s = getchar ();\n\tfor ( ; s < '0' || '9' < s; s = getchar () );\n\tfor ( ; '0' <= s && s <= '9'; s = getchar () ) x = x * 10 + ( s ^ '0' );\n\treturn x;\n}\n\ntemplate<typename Tp>\ninline void wint ( Tp x ) {\n\tif ( x < 0 ) putchar ( '-' ), x = ~ x + 1;\n\tif ( 9 < x ) wint ( x / 10 );\n\tputchar ( x % 10 ^ '0' );\n}\n\nconst int MAXN = 5e4, MAXM = 1e5;\nint n, m, q, ans[MAXN + 5];\n\ninline bool chkmax ( int& a, const int b ) { return a < b ? a = b, true : false; }\n\nstruct Edge {\n\tint u, v, a, b;\n\tinline void read () { u = rint (), v = rint (), a = rint (), b = rint (); }\n} eset[MAXM + 5];\n\nstruct Query {\n\tint u, v, a, b, id;\n\tinline void read ( const int i ) { u = rint (), v = rint (), a = rint (), b = rint (), id = i; }\n} qry[MAXM + 5], now[MAXM + 5];\n\nstruct DSU {\n\tint fa[MAXN + 5], mxa[MAXN + 5], mxb[MAXN + 5], rnk[MAXN + 5];\n\tint rcnt, ru[MAXN + 5], rv[MAXN + 5], ra[MAXN + 5], rb[MAXN + 5], rr[MAXN + 5];\n\tinline void clear ( const int n ) {\n\t\tfor ( int i = 1; i <= n; ++ i ) {\n\t\t\tfa[i] = i, rnk[i] = 1;\n\t\t\tmxa[i] = mxb[i] = -1;\n\t\t}\n\t}\n\tinline int find ( int x ) { for ( ; x ^ fa[x]; x = fa[x] ); return x; }\n\tinline bool unite ( const int x, const int y, const int a, const int b ) {\n\t\tint u = find ( x ), v = find ( y );\n\t\tif ( rnk[v] > rnk[u] ) u ^= v ^= u ^= v;\n\t\t++ rcnt;\n\t\tru[rcnt] = u, rv[rcnt] = v, ra[rcnt] = mxa[u], rb[rcnt] = mxb[u], rr[rcnt] = rnk[u];\n\t\tif ( u ^ v ) {\n\t\t\tfa[v] = u, rnk[u] += rnk[v];\n\t\t\tchkmax ( mxa[u], mxa[v] ), chkmax ( mxb[u], mxb[v] );\n\t\t}\n\t\tchkmax ( mxa[u], a ), chkmax ( mxb[u], b );\n\t\treturn u ^ v;\n\t}\n\tinline void regress () {\n\t\tfor ( int& i = rcnt; i; -- i ) {\n\t\t\tfa[rv[i]] = rv[i];\n\t\t\tmxa[ru[i]] = ra[i], mxb[ru[i]] = rb[i], rnk[ru[i]] = rr[i];\n\t\t}\n\t}\n} dsu;\n\nint main () {\n\tn = rint (), m = rint ();\n\tfor ( int i = 1; i <= m; ++ i ) eset[i].read ();\n\tq = rint ();\n\tfor ( int i = 1; i <= q; ++ i ) qry[i].read ( i );\n\tstd :: sort ( eset + 1, eset + m + 1, aiskey ( Edge ) );\n\tstd :: sort ( qry + 1, qry + q + 1, biskey ( Query ) );\n\tint blk = sqrt ( m * log2 ( n ) );\n\tfor ( int i = 1; i <= m; i += blk ) {\n\t\tdsu.clear ( n );\n\t\tint qcnt = 0;\n\t\tfor ( int j = 1; j <= q; ++ j ) {\n\t\t\tif ( eset[i].a <= qry[j].a && ( i + blk > m || qry[j].a < eset[i + blk].a ) ) {\n\t\t\t\tnow[++ qcnt] = qry[j];\n\t\t\t}\n\t\t}\n\t\tif ( ! qcnt ) continue;\n\t\tstd :: sort ( eset + 1, eset + i, biskey ( Edge ) );\n\t\tfor ( int j = 1, k = 1; j <= qcnt; ++ j ) {\n\t\t\tfor ( ; k < i && eset[k].b <= now[j].b; ++ k ) {\n\t\t\t\tdsu.unite ( eset[k].u, eset[k].v, eset[k].a, eset[k].b );\n\t\t\t}\n\t\t\tdsu.rcnt = 0;\n\t\t\tfor ( int t = i; t < i + blk && t <= m; ++ t ) {\n\t\t\t\tif ( eset[t].a <= now[j].a && eset[t].b <= now[j].b ) {\n\t\t\t\t\tdsu.unite ( eset[t].u, eset[t].v, eset[t].a, eset[t].b );\n\t\t\t\t}\n\t\t\t}\n\t\t\tint u = dsu.find ( now[j].u ), v = dsu.find ( now[j].v );\n\t\t\tans[now[j].id] = u == v && dsu.mxa[u] == now[j].a && dsu.mxb[u] == now[j].b;\n\t\t\tdsu.regress ();\n\t\t}\n\t}\n\tfor ( int i = 1; i <= q; ++ i ) puts ( ans[i] ? \"Yes\" : \"No\" );\n\treturn 0;\n}\n```\n\n",
        "postTime": 1591104250,
        "uid": 123807,
        "name": "Rainybunny",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3247 \u3010[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://blog.csdn.net/BeNoble_/article/details/79777757)\n\n\u7ed9\u4f60\u4e00\u5f20\u56fe,\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u6743\u503c$a,b$\n\n\u6bcf\u6b21\u8be2\u95ee\u662f\u5426\u5b58\u5728\u4e00\u4e2a$u\\to v$\u7684\u8def\u5f84,\u6ee1\u8db3$max\\{a\\}=A,max\\{b\\}=B$\n\n---\n\n## \u5199\u5728\u524d\u9762\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6709\u4e24\u79cd\u9650\u5236\u7684\u9898\u76ee\n\n\u4e00\u822c\u7684\u5957\u8def\u5c31\u662f\u6761\u4ef6\u6309\u7167\u7b2c\u4e00\u79cd\u6743\u503c\u4e3a\u5173\u952e\u5b57\u6392\u5e8f,\u8be2\u95ee\u6309\u7167\u7b2c\u4e8c\u79cd\u5173\u952e\u5b57\u6392\u5e8f\n\n\u7136\u540e\u7ed9\u6761\u4ef6\u5206\u5757,\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u5757\u53ea\u628a\u7b2c\u4e00\u5173\u952e\u5b57\u7b26\u5408\u6761\u4ef6\u7684\u8be2\u95ee\u653e\u8fdb\u53bb\n\n\u5728\u628a\u5f53\u524d\u5757\u524d\u9762\u7684\u70b9\u6309\u7167\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\n\n\u8fd9\u6837\u5f53\u524d\u5757\u524d\u9762\u7684\u70b9\u90fd\u662f\u7b26\u5408\u5f53\u524d\u8be2\u95ee\u70b9\u5bf9\u4e8e\u7b2c\u4e00\u5173\u5efa\u5b57\u6761\u4ef6\u7684\n\n\u800c\u4e14\u7b2c\u4e8c\u5173\u952e\u5b57\u90fd\u662f\u5355\u8c03\u7684,\u6240\u4ee5\u5c31\u53ef\u4ee5$two-pointer$\u626b\u4e00\u4e0b\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee,\u66b4\u529b\u5904\u7406\u4e00\u4e0b\u5f53\u524d\u5757\u7684\u8d21\u732e\n\n---\n\n## \u9898\u89e3\n\n\u8003\u8651\u8fd9\u9053\u9898,\u53ef\u4ee5\u770b\u51fa\u53ea\u6709\u8fb9\u6743$a\\le A,b\\le B$\u7684\u8fb9\u624d\u6709\u7528\n\n\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u628a\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9\u52a0\u8fdb\u53bb,\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u4e24\u70b9\u662f\u5426\u8054\u901a,\u5e76\u4e14\u8054\u901a\u5757\u5185\u6700\u5927\u503c\u662f\u5426\u5408\u6cd5\n\n\u6839\u636e\u4e0a\u9762\u8bf4\u7684\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u6309\u7167$a$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f,\u8be2\u95ee\u6309\u7167$b$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5757$[i,i+Size]$\u6211\u4eec\u628a\u8be2\u95ee\u7684$A$\u5728$[val_a[i],val_a[i+Size])$\u4e4b\u95f4\u7684\u8be2\u95ee\u653e\u8fdb\u53bb\n\n\u7136\u540e\u628a$[1,i)$\u7684\u8fb9\u6309\u7167$b$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f,$two-pointer$\u8fb9\u626b\u8fb9\u52a0\u8fb9(\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u548c\u6700\u5927\u503c)\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u66b4\u529b\u628a$[i,i+Size)$\u5185\u6ee1\u8db3$val_a\\le A,val_b\\le B$\u7684\u8fb9\u52a0\u8fdb\u53bb\n\n\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u662f\u5426\u5408\u6cd5\n\n\u5904\u7406\u5b8c\u4e00\u4e2a\u8be2\u95ee\u540e\u518d\u66b4\u529b\u628a\u8fd9\u4e9b\u8fb9\u5220\u6389\n\n\u6240\u4ee5\u5e76\u67e5\u96c6\u4e0d\u80fd\u8def\u5f84\u538b\u7f29,\u800c\u4e14\u8fd8\u8981\u7528\u4e00\u4e2a\u6876\u5b50\u628a\u8fd9\u4e9b\u8fb9\u90fd\u5b58\u4e0b(\u5b58\u8054\u901a\u5757\u5408\u5e76\u524d\u7684\u72b6\u6001)\n\n\u8fd9\u79cd\u5199\u6cd5\u5f53$Size=\\sqrt{m\\log n}$\u65f6\u6700\u4f18~~\u624b\u73a9\u51fa\u6765\u7684~~\n\n```\n#include<bits/stdc++.h>\n#define fp(i,a,b) for(register int i=a,I=b+1;i<I;++i)\n#define fd(i,a,b) for(register int i=a,I=b-1;i>I;--i)\n#define go(u) for(register int i=fi[u],v=e[i].to;i;v=e[i=e[i].nx].to)\n#define file(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\ntemplate<class T>inline bool cmin(T&a,const T&b){return a>b?a=b,1:0;}\nusing namespace std;\nchar ss[1<<17],*A=ss,*B=ss;\ninline char gc(){return A==B&&(B=(A=ss)+fread(ss,1,1<<17,stdin),A==B)?-1:*A++;}\ntemplate<class T>inline void sd(T&x){\n    char c;T y=1;while(c=gc(),(c<48||57<c)&&c!=-1)if(c==45)y=-1;x=c-48;\n    while(c=gc(),47<c&&c<58)x=x*10+c-48;x*=y;\n}\nconst int N=1e5+5;\ntypedef int arr[N];\nstruct eg{\n    int u,v,a,b,k;\n    inline void in(){sd(u),sd(v),sd(a),sd(b);}\n}a[N],b[N],c[N],d[N];\nint n,m,q,Top;arr fa,sz,Am,Bm,ans;\ninline bool cpa(const eg a,const eg b){return a.a==b.a?a.b<b.b:a.a<b.a;}\ninline bool cpb(const eg a,const eg b){return a.b==b.b?a.a<b.a:a.b<b.b;}\nint gf(int x){return fa[x]==x?x:gf(fa[x]);}\ninline void merge(int u,int v,int a,int b){\n    u=gf(u),v=gf(v);if(sz[u]>sz[v])swap(u,v);\n    d[++Top]={u,v,Am[v],Bm[v],sz[v]};\n    if(u^v)fa[u]=v,sz[v]+=sz[u],\n        cmax(Am[v],Am[u]),cmax(Bm[v],Bm[u]);\n    cmax(Am[v],a),cmax(Bm[v],b);\n}\nint main(){\n    #ifndef ONLINE_JUDGE\n        file(\"s\");\n    #endif\n    sd(n),sd(m);\n    fp(i,1,m)a[i].in();\n    sd(q);\n    fp(i,1,q)b[i].in(),b[i].k=i;\n    sort(a+1,a+m+1,cpa);sort(b+1,b+q+1,cpb);\n    register int Sz=sqrt(m*log2(n)),i,j,k,l;\n    for(i=1;i<=m;i+=Sz){\n        fp(j,1,n)fa[j]=j,Am[j]=Bm[j]=-1,sz[j]=1;\n        int Sum=0;\n        fp(j,1,q)if(a[i].a<=b[j].a&&\n            (b[j].a<a[i+Sz].a||i+Sz>m))c[++Sum]=b[j];\n        if(!Sum)continue;if(i^1)sort(a+1,a+i,cpb);\n        for(j=k=1;j<=Sum;++j){\n            for(;k<i&&a[k].b<=c[j].b;++k)\n                merge(a[k].u,a[k].v,a[k].a,a[k].b);\n            Top=0;\n            for(l=i;l<i+Sz&&l<=m;++l)\n                if(a[l].a<=c[j].a&&a[l].b<=c[j].b)\n                    merge(a[l].u,a[l].v,a[l].a,a[l].b);\n            int u=gf(c[j].u),v=gf(c[j].v);\n            ans[c[j].k]=(u==v&&Am[u]==c[j].a&&Bm[u]==c[j].b);\n            fd(l,Top,1){\n                u=d[l].u,v=d[l].v;fa[u]=u;\n                Am[v]=d[l].a,Bm[v]=d[l].b,sz[v]=d[l].k;\n            }Top=0;\n        }\n    }\n    fp(i,1,q)puts(ans[i]?\"Yes\":\"No\");\nreturn 0;\n}\n\n```",
        "postTime": 1522562800,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3247 \u3010[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\u3011"
    },
    {
        "content": "\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u662f\u5426\u80fd\u627e\u4e00\u6761\u4ece$u$\u5230$v$\u7684\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u8fb9\u7684$a$\u548c$b$\u7684\u6700\u5927\u503c\u6070\u597d\u90fd\u662f\u8be2\u95ee\u6240\u7ed9\u5b9a\u7684\u503c\u3002\n\n\u82e5\u53ea\u6709$a$\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u5bf9\u8fb9\u548c\u8be2\u95ee\u90fd\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u7ef4\u62a4\u5f53\u524d\u5408\u6cd5\u7684\u8fb9\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u7684\u6700\u503c\u548c\u8fde\u901a\u6027\u3002\n\n\u73b0\u5728\u6709$a$\u548c$b$\u7684\u9650\u5236\uff0c\u8003\u8651\u5bf9\u8fb9\u5206\u5757\uff0c\u5148\u5bf9\u6240\u6709\u8fb9\u6309$a$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5bf9\u6240\u6709\u8be2\u95ee\u6309$b$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u8003\u8651\u5f53\u524d\u679a\u4e3e\u5230\u7684\u4e00\u4e2a\u5757\u53ca\u5176\u4e4b\u524d\u5757\u5bf9\u8be2\u95ee\u7684\u8d21\u732e\u3002\u5bf9\u6240\u6709\u8be2\u95ee\u627e\u5230$a$\u5927\u5c0f\u6070\u597d\u5728\u5f53\u524d\u5757\u8303\u56f4\u5185\u7684\u8be2\u95ee\uff0c\u5bf9\u5f53\u524d\u5757\u4e4b\u524d\u7684\u6574\u5757\u6309$b$\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u5728\u5f53\u524d\u5757\u4e4b\u524d\u7684\u6240\u6709\u8fb9\u7684$a$\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u73b0\u5728\u627e\u5230\u7684\u8fd9\u4e9b\u8be2\u95ee\uff0c\u7136\u540e\u8fd9\u4e9b\u8fb9\u5bf9$b$\u90fd\u6709\u5e8f\uff0c\u56e0\u4e3a\u5df2\u7ecf\u4e8b\u5148\u5df2\u7ecf\u5bf9\u8be2\u95ee\u6392\u8fc7\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5\u50cf\u53ea\u6709\u4e00\u4e2a\u9650\u5236\u65f6\u4e00\u6837\uff0c\u5bf9\u5f53\u524d\u5757\u4e4b\u524d\u7684\u6574\u5757\u8fdb\u884c\u53cc\u6307\u9488\u7ef4\u62a4\u5bf9\u5f53\u524d\u8be2\u95ee\u5408\u6cd5\u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u96f6\u6563\u5757\u5185\u7684\u8fb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\uff0c\u5982\u679c\u5408\u6cd5\u5c31\u52a0\u5165\uff0c\u5f53\u8003\u8651\u5230\u4e0b\u4e00\u4e2a\u8be2\u95ee\u65f6\uff0c\u5bf9\u4e8e\u96f6\u6563\u5757\u5185\u52a0\u5165\u7684\u8fb9\u8981\u6267\u884c\u5220\u9664\uff0c\u6240\u4ee5\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u5373\u53ef\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,qu,S,top;\nint ans[maxn],fa[maxn],de[maxn],va[maxn],vb[maxn];\nstruct node\n{\n    int x,y,a,b,id;\n}e[maxn],q[maxn],t[maxn];\nbool cmp1(const node &x,const node &y)\n{\n    if(x.a==y.a) return x.b<y.b;\n    return x.a<y.a;\n}\nbool cmp2(const node &x,const node &y)\n{\n    if(x.b==y.b) return x.a<y.a;\n    return x.b<y.b;\n}\nstruct Node\n{\n    int x,y,deep,a,b;\n}st[maxn];\nint find(int x)\n{\n    return fa[x]==x?x:find(fa[x]);\n}\nvoid merge(int x,int y,int a,int b)\n{\n    x=find(x),y=find(y);\n    if(de[x]<de[y]) swap(x,y);\n    st[++top]=(Node){x,y,de[x],va[x],vb[x]};\n    va[x]=max(va[x],a),vb[x]=max(vb[x],b);\n    if(x==y) return;\n    fa[y]=x,de[x]=max(de[x],de[y]+1);\n    va[x]=max(va[x],va[y]),vb[x]=max(vb[x],vb[y]);\n}\nbool query(int id)\n{\n    int x=find(t[id].x),y=find(t[id].y);\n    if(x!=y) return false;\n    if(va[x]!=t[id].a||vb[x]!=t[id].b) return false;\n    return true;\n}\nvoid del(int id)\n{\n    int x=st[id].x,y=st[id].y;\n    fa[y]=y,de[x]=st[id].deep,va[x]=st[id].a,vb[x]=st[id].b;\n}\nint main()\n{\n    read(n),read(m),S=sqrt(m*log2(n));\n    for(int i=1;i<=m;++i)\n        read(e[i].x),read(e[i].y),read(e[i].a),read(e[i].b);\n    read(qu);\n    for(int i=1;i<=qu;++i)\n        read(q[i].x),read(q[i].y),read(q[i].a),read(q[i].b),q[i].id=i;\n    sort(e+1,e+m+1,cmp1),sort(q+1,q+qu+1,cmp2);\n    for(int i=1;i<=m;i+=S)\n    {\n        int tot=0,pos=1;\n        for(int j=1;j<=n;++j) fa[j]=j,va[j]=vb[j]=-1,de[j]=0;\n        for(int j=1;j<=qu;++j)\n            if(q[j].a>=e[i].a&&(q[j].a<e[i+S].a||i+S>m))\n                t[++tot]=q[j];\n        if(!tot) continue;\n        if(i!=1) sort(e+1,e+i,cmp2);\n        for(int j=1;j<=tot;++j)\n        {\n            while(pos<i&&e[pos].b<=t[j].b)\n                merge(e[pos].x,e[pos].y,e[pos].a,e[pos].b),pos++;\n            top=0;\n            for(int k=i;k<i+S&&k<=m;++k)\n                if(e[k].a<=t[j].a&&e[k].b<=t[j].b)\n                    merge(e[k].x,e[k].y,e[k].a,e[k].b);\n            ans[t[j].id]=query(j);\n            while(top) del(top--);\n        }\n    }\n    for(int i=1;i<=qu;++i)\n    {\n        if(ans[i]) puts(\"Yes\");\n        else puts(\"No\");\n    }\n    return 0;\n}\n```",
        "postTime": 1589299427,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3247 \u3010[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u795e\u5947\u7684\u79d1\u6280\uff1a$\\text{KDT \u5206\u6cbb}$\u3002\n\n___\n\n\u5148\u8f6c\u5316\u4e00\u4e0b\u95ee\u9898\uff0c\u4e00\u4e2a\u8be2\u95ee\u7684\u6761\u4ef6\u80fd\u88ab\u6ee1\u8db3\uff0c\u5f53\u4e14\u4ec5\u5f53\uff08\u8bbe\u8fd9\u6b21\u8be2\u95ee\u7ed9\u51fa\u7684\u4e3a $s,t,A,B$\uff09\uff0c\u5c06\u6240\u6709\u6ee1\u8db3 $a \\leq A,b \\leq B$ \u7684\u8fb9\u52a0\u5165\u4e4b\u540e\uff1a\n\n- $s,t$ \u5728\u56fe\u4e0a\u8054\u901a\u3002\n\n- $s,t$ \u6240\u5728\u7684\u8054\u901a\u5757\u5185 $\\max a = A,\\max b = B$\u3002\n\n\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u597d\u7ef4\u62a4\u3002\n\n\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5148\u6765\u8003\u8651\u4e00\u7ef4\u7684\u60c5\u51b5\uff0c\u5373\u53ea\u5b58\u5728 a \u8fd9\u4e00\u4e2a\u9650\u5236\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u6761\u8fb9\u90fd\u5f71\u54cd\u7684\u662f\u8be2\u95ee a \u503c\u662f**\u4e00\u6bb5**\u540e\u7f00\u4e0a\u7684\u8be2\u95ee\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u5f88\u5957\u8def\uff1a\u6bcf\u4e00\u6761\u8fb9\u6709\u5176\u5f71\u54cd\u533a\u95f4\uff0c\u53ef\u4ee5\u79bb\u7ebf -> **\u7ebf\u6bb5\u6811\u5206\u6cbb**\u3002\n\n\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\uff0c\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u601d\u60f3\u5c31\u662f\uff0c\u901a\u8fc7\u7ebf\u6bb5\u6811\u7ed3\u6784\uff0c\u5c06\u6bcf\u4e00\u6bb5\u5f71\u54cd\u533a\u95f4\u62c6\u5230 $\\log $ \u4e2a\u533a\u95f4\u4e0a\uff0c\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a DFS\uff0c\u8fdb\u5165\u5b50\u6811\u65f6\u52a0\u4e0a\u8fb9\uff0c\u56de\u6eaf\u65f6\u64a4\u9500\uff0c\u5230\u8fbe\u53f6\u5b50\u65f6\u56de\u7b54\u8be2\u95ee\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u53d8\u5220\u9664\u4e3a\u64a4\u9500\uff0c\u800c\u4ec5\u4ec5\u591a\u652f\u4ed8\u4e86\u4e00\u4e2a $O(\\log n) $ \u7684\u590d\u6742\u5ea6\u3002\n\n\u672c\u9898\u4e2d\u7528\u5e26\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u8054\u901a\u5757\u5185 $\\max a,\\max b$ \u5373\u53ef\u3002\n\n\u91cd\u65b0\u56de\u5230\u4e8c\u7ef4\u60c5\u51b5\uff0c\u53d1\u73b0\u6211\u4eec\u6240\u9700\u8981\u505a\u7684\uff0c\u6240\u8c13\u7684\u5f71\u54cd\u533a\u95f4\u6982\u5ff5\u4f9d\u65e7\u4e0d\u53d8\uff0c\u4ec5\u4ec5\u662f\u5c06\u7ebf\u6bb5\u6811\u7684\u4e00\u7ef4\u7ed3\u6784\u6269\u5c55\u5230\u4e8c\u7ef4\u800c\u5df2\u3002\n\n\u4e8c\u7ef4\u6570\u636e\u7ed3\u6784 \u2014\u2014 \u65b9\u4fbf\u5199\u7684\u81ea\u7136\u5c31\u662f KDT \u4e86\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u53d8\u5f97\u5f88\u7b80\u5355\u4e86\u2014\u2014\u6211\u4eec\u4eff\u7167\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u5f62\u5f0f\u5728 KDT \u4e0a Cover \u8fb9\uff0c\u6700\u540e DFS \u4e00\u904d\u6c42\u7b54\u6848\u3002\n\n\u4ece KDT \u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u4e00\u4e2a\u4e8c\u7ef4\u533a\u95f4\u6700\u591a\u88ab\u6302\u5728 $O(\\sqrt n)$ \u4e2a\nKDT\u8282\u70b9\u4e0a\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt n \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt n)$\u3002\n\ntips\uff1a\u597d\u50cf\u53ef\u4ee5\u901a\u8fc7\u5c06\u6240\u6709\u64cd\u4f5c\u4e00\u8d77\u5904\u7406\uff0c\u4e0d\u63d0\u65e9 Cover \u800c\u505a\u5230 $O(n\\log n)$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6709\u5174\u8da3\u81ea\u5df1\u5c1d\u8bd5\u5427\u3002\n\n\u56e0\u4e3a\u65f6\u7a7a\u9650\u5236\u90fd\u6bd4\u8f83\u677e\u6240\u4ee5\u53ef\u4ee5\u8fc7\u3002\n\n___\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n- \u56e0\u4e3a KDT \u5e76\u4e0d\u662f\u4e00\u4e2a Leafy \u7684\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5355\u72ec\u5728\u4e00\u4e2a\u70b9\u800c\u975e\u4ed6\u7684\u6574\u4e2a\u5b50\u6811\u4e0a cover \u4e0a\u4e00\u6761\u8fb9\uff0c\u6240\u4ee5\u5f00\u4e24\u4e2a vector \u8bb0\u5373\u53ef\u3002\n\n- \u4e3a\u4e86\u7a7a\u95f4\u7740\u60f3\uff0c\u8bf7\u5c3d\u91cf\u5728 vector \u4e2d\u5c11\u5b58\u4e00\u4e9b\u4e1c\u897f\u3002\n\n- \u5373\u4f7f\u662f\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5df2\u7ecf\u5728\u4e00\u4e2a\u8054\u901a\u5757\u5185\uff0c\u4e5f\u8981\u66f4\u65b0\u8fd9\u4e2a\u8054\u901a\u5757\u7684 $\\max a,\\max b$\uff0c\u5e76\u9700\u8981\u5c06\u5176\u5728\u56de\u6eaf\u65f6\u64a4\u9500\u3002\n\n___\n\n\u4ee3\u7801\uff1a\n\n~~\u601d\u7ef4\u548c\u4ee3\u7801\u96be\u5ea6\u5728\u6211\u770b\u6765\u90fd\u6bd4\u64cd\u4f5c\u5206\u5757\u4f4e\u4e00\u4e2a\u6863\u6b21\u2026\u2026~~\n\n```cpp\n\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing std::min;using std::max;\nchar gc(){static char buf[1<<16],*S,*T;if(T==S){T=(S=buf)+fread(buf,1,1<<16,stdin);if(T==S) return EOF;}return *S++;}\n#define getchar gc\ninline int re(){\n\tchar c;\n\twhile((c=getchar())>'9'||c<'0');\n\tint res = c-'0';\n\twhile((c=getchar())>='0'&&c<='9')res = res*10+c-'0';\n\treturn res;\n}\nconst int maxn = 2e5+5,inf = 0x3f3f3f3f;\nint n,m,q,root,xb,yb,ins,ans[maxn];\nstruct Edge{int x,y,a,b;}e[maxn];\nstruct point{int s,t,x,y,id;}p[maxn];\nbool cmpx(point a,point b){return a.x<b.x;}\nbool cmpy(point a,point b){return a.y<b.y;}\nint ch[maxn][2],xp[maxn][2],yp[maxn][2];\nvoid pushup(int x){\n\txp[x][0] = min(p[x].x,min(xp[ch[x][0]][0],xp[ch[x][1]][0]));\n\typ[x][0] = min(p[x].y,min(yp[ch[x][0]][0],yp[ch[x][1]][0]));\n\txp[x][1] = max(p[x].x,max(xp[ch[x][0]][1],xp[ch[x][1]][1]));\n\typ[x][1] = max(p[x].y,max(yp[ch[x][0]][1],yp[ch[x][1]][1]));\n}\nint build(int l,int r,int d){\n\tif(l>r)return 0;\n\tint mid = l+r>>1;\n\tstd :: nth_element(p+l,p+mid,p+r+1,d?cmpy:cmpx);\n\tch[mid][0] = build(l,mid-1,d^1),ch[mid][1] = build(mid+1,r,d^1);\n\treturn pushup(mid),mid;\n}\nint fa[maxn],siz[maxn],maxa[maxn],maxb[maxn],top;\nstruct Back{int ty,x,y,prxa,prxb;};\nBack st[maxn];\nint getfa(int x){return fa[x] == x ? x : getfa(fa[x]);}\nstd :: vector <int> opt[maxn],sub[maxn];\nvoid cover(int u){\n\tif(xp[u][1]<xb||yp[u][1]<yb)return ;\n\tif(xp[u][0]>=xb&&yp[u][0]>=yb)return sub[u].push_back(ins),void();\n\tif(p[u].x>=xb&&p[u].y>=yb)opt[u].push_back(ins);\n\tcover(ch[u][0]),cover(ch[u][1]);\n}\nvoid trymerge(int x,int y,int a,int b){\n\tint fx = getfa(x),fy = getfa(y);\n\tif(fx != fy){\n\t\tif(siz[fx] < siz[fy])fx ^= fy ^= fx ^= fy;\n\t\tst[++top] = (Back){1,fx,fy,maxa[fx],maxb[fx]};\n\t\tsiz[fx] += siz[fy],fa[fy] = fx,maxa[fx] = max(max(maxa[fx],maxa[fy]),a),maxb[fx] = max(max(maxb[fx],maxb[fy]),b);\n\t}\n\telse if(maxa[fx] < a || maxb[fx] < b){\n\t\tst[++top] = (Back){0,fx,fx,maxa[fx],maxb[fx]};\n\t\tmaxa[fx] = max(maxa[fx],a),maxb[fx] = max(maxb[fx],b);\n\t}\n}\nvoid getans(int u){\n\tif(!u)return ;\n\tint nowtop = top,fx,fy;\n\tfor(int i=0;i<sub[u].size();++i)trymerge(e[sub[u][i]].x,e[sub[u][i]].y,e[sub[u][i]].a,e[sub[u][i]].b);\n\tgetans(ch[u][0]),getans(ch[u][1]);\n\tfor(int i=0;i<opt[u].size();++i)trymerge(e[opt[u][i]].x,e[opt[u][i]].y,e[opt[u][i]].a,e[opt[u][i]].b);\n\tfx = getfa(p[u].s),fy = getfa(p[u].t);\n\tif(fx == fy && maxa[fx] == p[u].x && maxb[fx] == p[u].y)ans[p[u].id] = 1;\n\telse ans[p[u].id] = 0;\n\twhile(nowtop != top){\n\t\tif(st[top].ty == 1){\n\t\t\tsiz[st[top].x] -= siz[st[top].y],fa[st[top].y] = st[top].y;\n\t\t\tmaxa[st[top].x] = st[top].prxa,maxb[st[top].x] = st[top].prxb,--top;\n\t\t}\n\t\telse maxa[st[top].x] = st[top].prxa,maxb[st[top].x] = st[top].prxb,--top;\n\t}\n}\nint main(){\n\txp[0][0] = yp[0][0] = inf,xp[0][1] = yp[0][1] = -inf;\n\tn = re(),m = re(); \n\tfor(int i=1;i<=n;++i)fa[i] = i,siz[i] = 1,maxa[i] = maxb[i] = -1;\n\tfor(int i=1;i<=m;++i)\n\t\te[i].x = re(),e[i].y = re(),e[i].a = re(),e[i].b = re();\n\tq = re();\n\tfor(int i=1;i<=q;++i)\n\t\tp[i].s = re(),p[i].t = re(),p[i].x = re(),p[i].y = re(),p[i].id = i;\n\troot = build(1,q,0);\n\tfor(int i=1;i<=m;++i)xb = e[i].a,yb = e[i].b,ins = i,cover(root);\n\tgetans(root);\n\tfor(int i=1;i<=q;++i)puts(ans[i]?\"Yes\":\"No\");\n\treturn 0;\n}\n```",
        "postTime": 1618399278,
        "uid": 114153,
        "name": "Sali\u0435ri",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3247"
    },
    {
        "content": "# \u9898\u76ee\n&emsp;&emsp;[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3247)\u770b\u9898\u76ee\u3002  \n# \u5206\u6790\n&emsp;&emsp;\u4e00\u7c7b\u6bd4\u8f83\u7ecf\u5178\u7684\u5206\u5757\u4f18\u5316\u66b4\u529b\u7684\u601d\u8def\u3002  \n&emsp;&emsp;\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u67e5\u8be2\uff0c\u5f53$a\\le Qa, b\\le Qb$\u7684\u6240\u6709\u8fb9\u90fd\u63d2\u5165\u4e86\u56fe\u4e4b\u540e\uff0c$u,v$\u662f\u5426\u8fde\u901a\uff0c\u5e76\u4e14$u,v$\u7684\u8fde\u901a\u5757\u91cc\u9762\u662f\u5426\u540c\u65f6\u5b58\u5728$a=Qa$\u548c$b=Qb$\u7684\u8fb9\u3002  \n&emsp;&emsp;\u4ee5\u4e0a\u4fe1\u606f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u3002    \n&emsp;&emsp;\u95ee\u9898\u7684\u74f6\u9888\u662f\uff0c\u5982\u4f55\u5feb\u901f\u5730\u63d0\u53d6\u51fa\u9700\u8981\u7684\u8fb9\u3002  \n&emsp;&emsp;\u6211\u4eec\u4e0d\u59a8\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u7b97\u6cd5\uff1a  \n&emsp;&emsp;\u5c06\u8fb9\u6309\u7167$a$\u6392\u5e8f\u5e76\u4e14\u5206\u5757\u5904\u7406\uff0c\u5757\u7684\u5927\u5c0f\u662f$T$\u3002\u5bf9\u4e8e\u5f53\u524d\u5757$[i,i+T)$\uff0c\u6211\u4eec\u5904\u7406$Qa$\u5728$[a_i,a_{i+T})$\u4e4b\u95f4\u7684\u8be2\u95ee\u3002  \n&emsp;&emsp;\u73b0\u5728\u8003\u8651\u5904\u7406\u6389$b$\u3002\u53d1\u73b0\u5bf9\u4e8e$[1,i)$\u7684\u8fb9\uff0c\u5f53\u524d\u8be2\u95ee\u53ea\u8981\u6c42\u5b83$b\\le Qb$\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8ba9$[1,i)$\u7684\u8fb9\u6309\u7167$b$\u6765\u6392\u5e8f\uff0c\u5e76\u4e14\u8ba9\u6240\u6709\u8be2\u95ee\u6309\u7167$Qb$\u6765\u6392\u5e8f\u3002\u8fd9\u6837\u5bf9\u4e8e$[1,i)$\u7684\u8fb9\uff0c$b$\u7684\u9650\u5236\u5c31\u53ef\u4ee5\u7528\u6307\u9488\u65b9\u4fbf\u5730\u7ef4\u62a4\u4e86\u3002  \n&emsp;&emsp;\u518d\u8003\u8651$[i,i+T)$\u7684\u8fb9\uff0c\u7531\u4e8e\u5b83\u4eec\u7684\u6570\u91cf\u6bd4\u8f83\u5c11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u63d2\u5165\u5408\u6cd5\u8fb9\uff0c\u67e5\u8be2\u5b8c\u4e4b\u540e\u518d\u5220\u9664\u3002\u7531\u4e8e\u8fd9\u91cc\u5b58\u5728\u5e76\u67e5\u96c6\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7528\u5230\u53ef\u56de\u9000\u7684\u5e76\u67e5\u96c6\uff0c\u914d\u5408\u79e9\u4f18\u5316\u3002  \n&emsp;&emsp;\u65f6\u95f4\u590d\u6742\u5ea6\uff1a  \n&emsp;&emsp;&emsp;&emsp;\u591a\u6b21\u6392\u5e8f\uff1a$O(\\frac{m^2}T\\log_2m)$\uff1b  \n&emsp;&emsp;&emsp;&emsp;\u5757\u5916\u8fb9\uff1a$O(\\frac{m^2}T\\log_2n)$\uff1b  \n&emsp;&emsp;&emsp;&emsp;\u5757\u5185\u8fb9\uff1a$O(TQ\\log_2n)$\u3002    \n&emsp;&emsp;\u603b\u65f6\u95f4\u5927\u6982\u662f......$O(\\frac{m^2}T\\log_2n+\\frac{mQ}T\\log_2n)$\u3002  \n&emsp;&emsp;\u6839\u636e\u5747\u503c\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u5f97\u5230\uff0c$T=\\sqrt{\\frac{m^2}Q}$\u662f\u6bd4\u8f83 OK \u7684\u5427......   \n&emsp;&emsp;\u4f46\u662f\u7ecf\u8fc7\u8bc4\u6d4b\uff0c**\u5f53$T=\\sqrt{m\\log_2n}$\u7684\u65f6\u5019**\u662f\u6bd4\u8f83\u4f18\u79c0\u7684\u3002  \n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 1e5 + 5, MAXM = 2e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\ntemplate<typename _T>\nvoid swapp( _T &x, _T &y )\n{\n\t_T t = x; x = y, y = t;\n}\n\nstruct element\n{\n\tint u, v, a, b, s;\n\telement() { u = v = a = b = s = 0; }\n\tvoid get() { read( u ), read( v ), read( a ), read( b ); }\n\telement( const int U, const int V, const int A, const int B, const int S ) { u = U, v = V, a = A, b = B, s = S; }\n}E[MAXM], q[MAXN], lst[MAXM];\n\nint fa[MAXN], siz[MAXN], mxA[MAXN], mxB[MAXN];\nint seq[MAXM];\nint N, M, Q, blk, top;\nbool ans[MAXN];\n\nvoid upt( int &x, const int v ) { x = MAX( x, v ); }\nbool cmp1( const element &x, const element &y ) { return x.a < y.a; }\nbool cmp2( const element &x, const element &y ) { return x.b < y.b; }\nint findSet( const int u ) { return u == fa[u] ? u : findSet( fa[u] ); }\nvoid makeSet( const int n ) { for( int i = 1 ; i <= n ; i ++ ) fa[i] = i, siz[i] = 1, mxA[i] = mxB[i] = -1; }\n\nvoid unionSet( int u, int v, const int A, const int B )\n{\n\tu = findSet( u ), v = findSet( v );\n\tif( siz[u] > siz[v] ) swapp( u, v );\n\tlst[++ top] = element( u, v, mxA[v], mxB[v], siz[v] );\n\tif( u ^ v ) \n\t\tfa[u] = v, siz[v] += siz[u], \n\t\tupt( mxA[v], mxA[u] ), upt( mxB[v], mxB[u] );\n\tupt( mxA[v], A ), upt( mxB[v], B );\n}\n\nbool chk( int u, int v, const int A, const int B )\n{\n\tu = findSet( u ), v = findSet( v );\n\treturn u == v && mxA[u] == A && mxB[u] == B;\n}\n\nint main()\n{\n\tread( N ), read( M );\n\tfor( int i = 1 ; i <= M ; i ++ ) E[i].get();\n\tread( Q ), blk = sqrt( M * log2( N ) );\n\tfor( int i = 1 ; i <= Q ; i ++ ) q[i].get(), q[i].s = i;\n\tsort( E + 1, E + 1 + M, cmp1 );\n\tsort( q + 1, q + 1 + Q, cmp2 );\n\tint tot = 0, p, cur;\n\tfor( int i = 1 ; i <= M ; i += blk )\n\t{\n\t\tmakeSet( N ), tot = 0;\n\t\tif( i > 1 ) std :: sort( E + 1, E + i, cmp2 );\n\t\tfor( int k = 1 ; k <= Q ; k ++ )\n\t\t\tif( E[i].a <= q[k].a && ( q[k].a < E[i + blk].a || i + blk > M ) )\n\t\t\t\tseq[++ tot] = k;\n\t\tp = 1;\n\t\tfor( int k = 1 ; k <= tot ; k ++ )\n\t\t{\n\t\t\tcur = seq[k];\n\t\t\tfor( ; p < i && E[p].b <= q[cur].b ; p ++ ) \n\t\t\t\tunionSet( E[p].u, E[p].v, E[p].a, E[p].b );\n\t\t\ttop = 0;\n\t\t\tfor( int j = i ; j < i + blk && j <= M ; j ++ )\n\t\t\t\tif( E[j].a <= q[cur].a && E[j].b <= q[cur].b )\n\t\t\t\t\tunionSet( E[j].u, E[j].v, E[j].a, E[j].b );\n\t\t\tans[q[cur].s] = chk( q[cur].u, q[cur].v, q[cur].a, q[cur].b );\n\t\t\twhile( top )\n\t\t\t{\n\t\t\t\tint u = lst[top].u, v = lst[top].v; fa[u] = u;\n\t\t\t\tmxA[v] = lst[top].a, mxB[v] = lst[top].b, siz[v] = lst[top].s;\n\t\t\t\ttop --;\n\t\t\t}\n\t\t}\n\t}\n\tfor( int i = 1 ; i <= Q ; i ++ ) puts( ans[i] ? \"Yes\" : \"No\" );\n\treturn 0;\n}\n```",
        "postTime": 1591105531,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570"
    },
    {
        "content": "### [HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\n\n`\u5206\u5757\uff0c\u5e76\u67e5\u96c6`\n\n\u601d\u8def\u524d\u9762\u7684\u9898\u89e3\u5df2\u7ecf\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u6765\u8bf4\u8bf4\u5177\u4f53\u7684\u5b9e\u73b0\n\n1. \u5bf9\u8fb9\uff08\u6309 $a$ \u4e3a\u5173\u952e\u5b57\uff09\u548c\u8be2\u95ee\uff08\u6309 $b$ \u4e3a\u5173\u952e\u5b57\uff09\u5206\u522b\u6392\u5e8f\n2. \u8fb9\u5206\u5757\u5904\u7406\uff0c\u627e\u51fa\u5f53\u524d\u5757\u5185\u6240\u6709\u7684\u8be2\u95ee\u4e00\u8d77\u5904\u7406\n3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u7684\u8be2\u95ee\uff1a\n   1. \u5bf9\u4e8e\u524d\u9762\u5757\u5185\u7684\u8fb9\uff0c$a$ \u80af\u5b9a\u6bd4\u5f53\u524d\u8be2\u95ee\u5c0f\uff0c\u6240\u4ee5\u6309 $b$ \u6392\u5e8f\uff0c\u4e00\u6761\u6761\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u76f4\u5230\u8d85\u8fc7\u8be2\u95ee\u7684b\uff08\u8fd9\u4e00\u6b65\u53ef\u4ee5\u53cc\u6307\u9488\u7ef4\u62a4\uff0c\u5c31\u4e0d\u7528\u6807\u8bb0\u4e86\uff09\n   2. \u66b4\u529b\u904d\u5386\u8be5\u5757\uff0c\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u8fb9\uff0c\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u540c\u65f6\u6807\u8bb0\n   3. \u5e76\u67e5\u96c6\u5224\u8054\u901a\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\uff0c\u5f97\u5230\u8be2\u95ee\u7b54\u6848\n   4. \u6e05\u7a7a\u6b64\u6b21\u8be2\u95ee\u5e26\u6807\u8bb0\u7684\u5e76\u67e5\u96c6\u64cd\u4f5c\uff08\u6808\u8bb0\u5f55\uff09\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8be2\u95ee\n4. \u6e05\u7a7a\u5e76\u67e5\u96c6\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5757\n\n\u7ec6\u8282\uff1a\n\n- \u521d\u59cb\u5316\u6700\u5927 $a,b$ \u8d4b\u4e3a $-1$\uff0c\u56e0\u4e3a $0\\le a,b \\le 10^9$\n- \u8fb9\u754c\u5904\u7406\uff0c\u6bd4\u5982\u6700\u540e\u4e00\u4e2a\u5757\n\n\u4f18\u5316\uff1a\n\n- \u53d1\u73b0\u74f6\u9888\u5728\u4e8e\u8bbf\u95ee\u6bcf\u4e2a\u5757\u65f6\u5bf9\u524d\u9762\u7684 $b$ \u6392\u5e8f\uff0c\u800c\u524d\u9762\u5927\u90e8\u5206\u7684 $b$ \u53c8\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f52\u5e76\u6392\u5e8f\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\n\n```cpp\n#include <bits/stdc++.h>\n#define re register\n// #define int long long\n#define pair pair<int, int>\n//#define File(a) freopen(a\".in\", \"r\", stdin), freopen(a\".out\", \"w\", stdout);\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\nusing namespace std;\ninline int read()\n{\n    re int x = 0, f = 0;\n    re char ch = getchar();\n    while (!isdigit(ch)) {if (ch == '-') f = 1; ch = getchar();}\n    while (isdigit(ch)) {x = (x << 3) + (x << 1) + ch - 48; ch = getchar();}\n    return f ? -x : x;\n}\ninline string getstr()\n{\n    string res = \"\";\n    re char ch = getchar();\n    while (isspace(ch)) ch = getchar();\n    while (!isspace(ch)) res.push_back(ch), ch = getchar();\n    return res;\n}\nconst int N = 5e4 + 4, M = 1e5 + 5;\nint n, m, Q, ans[N];\nstruct edge\n{\n    int fr, to, a, b;\n}e[M];\nstruct query\n{\n    int fr, to, a, b, id;\n}q[N];\ntemplate<typename T> inline bool cmpa(const T &x, const T &y) {return x.a < y.a;}\ntemplate<typename T> inline bool cmpb(const T &x, const T &y) {return x.b < y.b;}\nint fa[N], siz[N], mxa[N], mxb[N];\nstack<tuple<int, int, int, int, int> > st;\ninline void init()\n{\n    for (re int i = 1; i <= n; ++i)\n        fa[i] = i, siz[i] = 1, mxa[i] = mxb[i] = -1;\n}\ninline int getfa(int u)\n{\n    while (fa[u] != u) u = fa[u];\n    return u;\n}\ninline void Merge(int u, int v, const int &a, const int &b, const bool &del)\n{\n    u = getfa(u), v = getfa(v);\n    if (siz[u] > siz[v]) swap(u, v);\n    if (del) st.push(make_tuple(u, v, mxa[v], mxb[v], siz[v]));\n    mxa[v] = max(mxa[v], a), mxb[v] = max(mxb[v], b);\n    if (u == v) return;\n    fa[u] = v, siz[v] += siz[u];\n    mxa[v] = max(mxa[u], mxa[v]), mxb[v] = max(mxb[u], mxb[v]);\n}\ninline void delet()\n{\n    while (!st.empty())\n    {\n        int u, v, a, b, s;\n        tie(u, v, a, b, s) = st.top(); st.pop();\n        fa[u] = u, siz[v] = s, mxa[v] = a, mxb[v] = b;\n    }\n}\nsigned main()\n{\n    n = read(), m = read();\n    for (re int i = 1; i <= m; ++i) e[i] = {read(), read(), read(), read()};\n    Q = read();\n    for (re int i = 1; i <= Q; ++i) q[i] = {read(), read(), read(), read(), i};\n    sort(e + 1, e + m + 1, cmpa<edge>);\n    sort(q + 1, q + Q + 1, cmpb<query>);\n    const int len = sqrt(m * log2(n)); int siz = 0;\n    static int *l = new int [m / len + 5], *v = new int [m + 5];\n    for (re int i = 1; i <= m; i += len) l[++siz] = i;\n    l[siz + 1] = m + 1, e[m + 1].a = 0x7fffffff, e[m + 1].b = 0x7fffffff;\n    for (re int i = 1; i <= siz; ++i)\n    {\n        init();\n        int cnt = 0;\n        for (re int j = 1; j <= Q; ++j)\n            if (q[j].a >= e[l[i]].a && q[j].a < e[l[i + 1]].a) v[++cnt] = j;\n        if (!cnt) continue;\n        sort(e + 1, e + l[i], cmpb<edge>);\n        for (re int j = 1, k = 1; j <= cnt; ++j)\n        {\n            int now = v[j];\n            while (k < l[i] && e[k].b <= q[now].b) Merge(e[k].fr, e[k].to, e[k].a, e[k].b, 0), ++k;\n            for (re int x = l[i]; x < l[i + 1] && x <= m; ++x)\n            {\n                if (e[x].a > q[now].a) break;\n                if (e[x].b <= q[now].b) Merge(e[x].fr, e[x].to, e[x].a, e[x].b, 1);\n            }\n            int u = getfa(q[now].fr), v = getfa(q[now].to);\n            if (u == v && mxa[u] == q[now].a && mxb[u] == q[now].b) ans[q[now].id] = 1;\n            delet();\n        }\n    }\n    for (re int i = 1; i <= Q; ++i) puts(ans[i] ? \"Yes\" : \"No\");\n    return 0;\n}\n```",
        "postTime": 1642927001,
        "uid": 205541,
        "name": "Aftglw",
        "ccfLevel": 0,
        "title": "[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570"
    },
    {
        "content": "\u5206\u5757\u597d\u9898\u3002          \n      \n\u4e0d\u8bf4\u5206\u5757\u8fd8\u771f\u6ca1\u60f3\u5230\u600e\u4e48\u5206\u5757\u3002\u521a\u5f00\u59cb\u62ff\u5230\u8fd9\u9053\u9898\u8fd8\u6709\u70b9\u7591\u60d1\uff0c\u5728 Kruscal \u91cd\u6784\u6811\u4e0a\u9762\u8d70\u504f\u4e86\u5f88\u8fdc\u624d\u53d1\u73b0\u4e00\u884c\u5173\u952e\u5b57\uff1a         \n\n```\u6ce8\u610f\uff1a\u8def\u5f84\u53ef\u4ee5\u4e0d\u662f\u7b80\u5355\u8def\u5f84\u3002```       \n\n\u4e4b\u540e\u5c31\u77ac\u95f4\u4f1a\u4e86 $O(m ^ 2)$ \u505a\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u628a\u53ef\u4ee5\u8fde\u7684\u8fb9(\u5373\u8fb9\u503c a,b \u90fd\u4e0d\u8d85\u8fc7\u67e5\u8be2\u503c a,b )\u90fd\u8fde\u4e86\u7136\u540e\u5224\u65ad\u4e00\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a          \n\n- \u4e24\u70b9\u662f\u5426\u8fde\u901a        \n\n- u \u70b9\u662f\u5426\u53ef\u4ee5\u8d70\u5230\u8fb9\u6743\u6709 a , b \u90a3\u4e48\u5927\u7684\u8fb9\u3002\n\n- v \u70b9\u662f\u5426\u53ef\u4ee5\u8d70\u5230\u8fb9\u6743\u6709 a , b \u90a3\u4e48\u5927\u7684\u8fb9\u3002      \n\n\u8fd9\u6837\u5c31\u662f $O(m ^ 2)$ \u7684\u4e86\u3002         \n\n\u5148\u8003\u8651\u7b80\u5316\u4e00\u4e0b\u8be2\u95ee\uff0c\u5982\u679c\u53ea\u6709 a \u7684\u8bdd\u6211\u4eec\u76f4\u63a5\u628a\u67e5\u8be2\u548c\u8fb9\u6309 a \u6392\u5e8f\u7136\u540e\u53cc\u6307\u9488\u505a\u4e00\u904d\u5373\u53ef\u3002         \n\n\u73b0\u5728\u987a\u7740\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u8fd8\u662f\u5148\u8003\u8651\u5bf9\u8be2\u95ee a \u6392\u5e8f\uff0c\u73b0\u5728\u6211\u4eec\u5982\u679c\u8fd8\u662f\u6309\u7167\u53cc\u6307\u9488\u7684\u5957\u8def\u6765\u505a\u5c31\u6709\u70b9\u96be\u4e86\u3002          \n\n\u6211\u4eec\u4e0d\u96be\u60f3\u5230\uff0c\u5728\u53ea\u6709 a \u7684\u60c5\u51b5\u6211\u4eec\u6392\u5e8f\u53cc\u6307\u9488\u8df3\u5176\u5b9e\u662f\u5728\u5229\u7528\u524d\u9762\u7684\u72b6\u6001\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u59a8\u4e5f\u5229\u7528\u597d\u524d\u9762\u7684\u72b6\u6001\u3002            \n\n\u8003\u8651\u5206\u5757\uff0c\u6bcf\u4e2a\u5757\u540e\u9762\u5904\u7406\u4e00\u7cfb\u5217\u8be2\u95ee\uff1a\u5f53\u524d\u8be2\u95ee\u7684 a \u503c\u4e25\u683c\u5927\u4e8e\u7b49\u4e8e\u5757\u4e2d\u7684\u6240\u6709 a \u503c\u7684\u6700\u5927\u503c\u5e76\u4e14\u4e25\u683c\u5c0f\u4e8e\u4e0b\u4e00\u4e2a\u5757\u4e2d\u7684 a \u503c\u7684\u6700\u5927\u503c\u3002       \n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u8981\u5904\u7406\u7684\u8be2\u95ee\u5c31\u53ea\u6709\u5757\u524d\u9762\u7684\u6240\u6709\u8fb9\u548c\u540e\u9762\u4e00\u4e2a\u96f6\u6563\u5757\u7684\u8fb9\u3002              \n\n\u6211\u4eec\u63a5\u7740\u601d\u8003\uff1a\u5982\u679c\u6211\u4eec\u524d\u9762\u53c8\u6709\u4e00\u4e2a\u6309 b \u6392\u597d\u5e8f\u7684\u8fb9\u6570\u7ec4\uff0c\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u76f4\u63a5\u7528\u7c7b\u4f3c\u5f52\u5e76\u7684\u601d\u60f3\uff0c\u628a\u540e\u9762\u7684\u67e5\u8be2\u4e5f\u6309 b \u6392\u597d\u5e8f\uff0c\u7136\u540e\u7528\u53cc\u6307\u9488\u6765\u89e3\u51b3\u524d\u9762\u7684\u64cd\u4f5c\uff08\u5177\u4f53\u800c\u8a00\u5c31\u662f\u4e24\u4e2a\u6307\u9488\u6bd4 b \u7684\u5927\u5c0f\uff0c\u6bcf\u6b21\u5f80\u540e\u4e00\u4e2a\u67e5\u8be2\u5373\u76f8\u5bf9\u5e94\u7684\u632a\u52a8\u524d\u4e00\u4e2a\u53cc\u6307\u9488\u6765\u52a0\u8fb9\uff09\uff0c\u6bcf\u4e2a\u67e5\u8be2\u505a\u5b8c\u524d\u9762\u7684\u64cd\u4f5c\u540e\u6211\u4eec\u518d\u53bb\u904d\u5386\u4e00\u904d\u540e\u9762\u7684\u96f6\u6563\u5757\u540e\u67e5\u8be2\u7b54\u6848\uff0c\u4e4b\u540e\u7528\u4e00\u4e2a\u6808\u6765\u56de\u9000(\u5373\u628a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u4e4b\u524d\u7684\u72b6\u6001\u8bb0\u5f55\u4e00\u4e0b\u7136\u540e\u8fd8\u539f\u4e00\u4e0b) \u3002         \n\nPS\uff1a\u4e4b\u524d\u55b7\u540c\u5b66\u7684\u9898\u89e3\u5199\u7684\u592a\u4e11\u73b0\u5728\u770b\u6765\u6211\u81ea\u5df1\u4e5f\u6ca1\u5199\u7684\u597d\u5230\u54ea\u91cc\u53bb\u3002    \n\n\u7531\u4e8e\u6d89\u53ca\u56de\u9000\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5728\u5757\u957f\u53d6 $\\sqrt {n \\log n}$ \u65f6\u4e3a $O(n \\sqrt n \\log n)$ \u3002        \n\n\u5b9e\u73b0\u7684\u8bdd\uff0c\u6211\u4eec\u76f4\u63a5\u5148\u628a\u67e5\u8be2\u6309 b \u6392\u597d\u5e8f\u4e00\u4e2a\u4e2a\u5f80\u91cc\u9762\u653e\u5373\u53ef\u3002       \n\n\u5173\u4e8e\u4f18\u5316\u64cd\u4f5c\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u628a\u5e76\u67e5\u96c6\u770b\u6210\u4e00\u4e2a\u7f29\u70b9\u8fc7\u7a0b\uff0c\u628a\u8fd9\u90e8\u5206\u7b54\u6848\u7ef4\u62a4\u597d\u4e4b\u540e\u6211\u4eec\u5c31\u53ea\u7528\u628a\u540e\u9762\u96f6\u6563\u5757\u7684\u8fb9\u66b4\u529b\u62ff\u6765\u5efa\u56fe\u4e4b\u540e\u505a\u4e00\u904d BFS \uff0c\u4f46\u4e00\u5b9a\u8981\u6ce8\u610f\u5f97\u7528 flag \u6253\u8fb9\u662f\u5426\u8d70\u8fc7\u7684\u6807\u8bb0\u800c\u4e0d\u662f\u70b9\u662f\u5426\u8d70\u8fc7\u7684\u6807\u8bb0\u3002\u8fd9\u6837\u7684\u8bdd\u4e0d\u6d89\u53ca\u5e76\u67e5\u96c6\u56de\u9000\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q \\sqrt m \\alpha(n))$ \u3002       \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nconst int Len = 2e5 + 5 , SIZE = 1025;\nint n,m,q,top,fa[Len],maxa[Len],maxb[Len],dep[Len],t,sizt,L[SIZE],R[SIZE],lsh[SIZE],lshtot,Print[Len]; \nstruct node\n{\n\tint u,v,a,b,pst;\n}edge[Len],qsk[Len];\nstruct Node\n{\n\tint u,v,dep,a,b;\n\tNode(){u = 0 , v = 0 , dep = 0 , a = 0 , b = 0;}\n\tNode(int U,int V,int DEP,int A,int B){u = U , v = V , dep = DEP , a = A , b = B;}\n}stk[Len];\nbool cmpa(node x,node y){return x.a < y.a;}\nbool cmpb(node x,node y){return x.b < y.b;}\nvector<int> v[Len];\nvoid makeSet(int x){for(int i = 1 ; i <= x ; i ++) fa[i] = i , dep[i] = 0 , maxa[i] = maxb[i] = -1;}\ninline int findSet(int x){return fa[x] == x ? fa[x] : findSet(fa[x]);}\ninline void unionSet(int x,int y,int A,int B)\n{\n\tint u = findSet(x) , v = findSet(y);\n\tif(dep[u] < dep[v]) swap(u , v);\n\tstk[++ top] = (Node){u , v , dep[u] , maxa[u] , maxb[u]};\n\tmaxa[u] = max(maxa[u] , A) , maxb[u] = max(maxb[u] , B); \n\tif(u == v) return;\n\tfa[v] = u , dep[u] = max(dep[u] , dep[v] + 1) , maxa[u] = max(maxa[u] , maxa[v]) , maxb[u] = max(maxb[u] , maxb[v]);\n}\ninline void del(int Id)\n{\n\tint u = stk[Id].u , v = stk[Id].v;\n\tfa[v] = v , dep[u] = stk[Id].dep , maxa[u] = stk[Id].a , maxb[u] = stk[Id].b;\n}\nint main()\n{\n\t//freopen(\"1.in\",\"r\",stdin);\n\tscanf(\"%d %d\",&n,&m);\n\tt = max(1 , (int)sqrt(m * log(m))) , sizt = m / t;\n\tfor(int i = 1 ; i <= m ; i ++) scanf(\"%d %d %d %d\",&edge[i].u,&edge[i].v,&edge[i].a,&edge[i].b);\n\tsort(edge + 1 , edge + 1 + m , cmpa);\n\tfor(int i = 1 ; i <= sizt ; i ++) L[i] = (i - 1) * t + 1 , R[i] = i * t;\n\tif(R[sizt] < m) R[sizt] = m;\n\tfor(int i = 1 ; i <= sizt ; i ++) lsh[++ lshtot] = edge[L[i]].a;\n\tscanf(\"%d\",&q);//\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6254\u53bb\n\tfor(int i = 1 ; i <= q ; i ++){scanf(\"%d %d %d %d\",&qsk[i].u,&qsk[i].v,&qsk[i].a,&qsk[i].b);qsk[i].pst = i;}\n\tsort(qsk + 1 , qsk + 1 + q , cmpb);\n\tfor(int i = 1 ; i <= q ; i ++) \n\t{\n\t\tint idx = upper_bound(lsh + 1 , lsh + 1 + lshtot , qsk[i].a) - lsh;\n\t\tidx --;\n\t\tif(!idx) Print[qsk[i].pst] = 0;\n\t\telse v[idx].push_back(i);\n\t}\n\t//for(int i = 1 ; i <= sizt ; i ++) sort(edge + L[i] , edge + R[i] + 1 , cmpb);\n\tfor(int i = 1 ; i <= sizt ; i ++)\n\t{\n\t\tint idx = 1;\n\t\tmakeSet(n);\n\t\tif(i != 1) sort(edge + 1 , edge + L[i] , cmpb);\n\t\tfor(int j = 0 ; j < v[i].size() ; j ++)\n\t\t{\n\t\t\twhile(idx < L[i] && edge[idx].b <= qsk[v[i][j]].b){unionSet(edge[idx].u , edge[idx].v , edge[idx].a , edge[idx].b) ; idx ++;}\n\t\t\ttop = 0;\n\t\t\tfor(int k = L[i] ; k <= R[i] ; k ++) if(edge[k].a <= qsk[v[i][j]].a && edge[k].b <= qsk[v[i][j]].b){unionSet(edge[k].u , edge[k].v , edge[k].a , edge[k].b);}\n\t\t\tint nowu = findSet(qsk[v[i][j]].u) , nowv = findSet(qsk[v[i][j]].v);\n\t\t\tif(nowu == nowv && maxa[nowu] == qsk[v[i][j]].a && maxb[nowu] == qsk[v[i][j]].b) Print[qsk[v[i][j]].pst] |= 1;\n\t\t\twhile(top) del(top --);\n\t\t}\n\t}\n\tfor(int i = 1 ; i <= q ; i ++) (Print[i] == 1) ? puts(\"Yes\") : puts(\"No\"); \n\treturn 0;\n}\n```",
        "postTime": 1617975921,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3247 [HNOI2016]\u6700\u5c0f\u516c\u500d\u6570"
    },
    {
        "content": "\u8fd9\u9898\u9664\u4e86\u5206\u5757\uff0c\u540c\u6837\u53ef\u4ee5\u7528k-d tree\u4e71\u641e\uff0c~~\u867d\u7136\u65f6\u95f4\u548c\u7a7a\u95f4\u90fd\u6781\u4e3a\u5783\u573e~~\n\n\u9996\u5148\u5bf9\u4e8e\u8fd9\u9898\u7684\u5173\u952e\u5c31\u662f$a$\u548c$b$\u53ef\u4ee5\u770b\u505a\u4e24\u4e2a**\u7ef4\u5ea6**\uff0c\u7136\u540e\u6211\u4eec\u5c31\u60f3\u8c61\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u6bcf\u4e2a\u8fb9\u548c\u8be2\u95ee\u90fd\u80fd\u8868\u793a\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9$(a,b)$\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8be2\u95ee\u5c31\u662f\uff0c\u5728\u8fd9\u4e2a\u70b9$(a,b)$\u7684\u5de6\u4e0b\u65b9\uff08\u542b\u8fb9\u754c\uff09\u77e9\u5f62\u533a\u57df\u5185\u7684\u6240\u6709\u8fb9\uff0c\u662f\u5426\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u8fde\u901a\u5757\u4f7f\u5f97$s$\u548c$t$\u90fd\u5728\u91cc\u9762\u5e76\u4e14\u6700\u5927\u7684$a$\u548c$b$\u90fd\u6b63\u597d\u662f$a$\u548c$b$\u3002\n\n\u770b\u5230\u6709\u5173\u7ef4\u5ea6\u7684\u8be2\u95ee\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u5206\u6cbb\uff0c\u53ef\u662f\u8fd9\u9898\u7684\u7edf\u8ba1\u7b54\u6848\u6bd4\u8f83\u6076\u5fc3\uff0c\u9700\u8981\u7528\u5e76\u67e5\u96c6\uff0c\u800c\u8fd9\u4e2a\u7684\u8d21\u732e\u5c31\u4e0d\u80fd\u72ec\u7acb\u4e86\uff0c\u6240\u4ee5\u4f60\u4f1a\u53d1\u73b0\u65e0\u8bba\u662fCDQ\u8fd8\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u90fd\u505a\u4e0d\u4e86\u8fd9\u9898\uff0c\u751a\u81f3\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb~~\u522b\u95ee\u6211\u548b\u77e5\u9053\u7684~~\n\n\u4f46\u662f\u6211\u4eec\u662f\u5728\u4e00\u4e2a**\u4e8c\u7ef4\u5e73\u9762**\u4e0a\u7edf\u8ba1\u7684\u554a\uff0c\u521a\u624d\u8bf4\u7684\u90a3\u4e24\u4e2a\u5783\u573e\u5206\u6cbb\u7684\u7f3a\u70b9\u5c31\u662f\u53ea\u80fd\u5206\u6389\u4e00\u7ef4\uff0c\u8fd8\u6709\u4e00\u7ef4\u6ca1\u6cd5\u5904\u7406\u3002\u4e3a\u5565\u6211\u4eec\u4e0d\u80fd\u7528\u80fd\u591f\u5904\u7406\u591a\u7ef4\u95ee\u9898\u7684k-d tree\u5462\uff1f\n\n\u7136\u540e\u6211\u4eec\u60f3\u5230\u4e86k-d tree\uff0c\u6211\u4eec\u5c1d\u8bd5\u628a\u6240\u6709\u8fb9\u5efa\u4e00\u4e2a\u6811\uff0c\u7136\u540e\u6bcf\u4e2a\u8be2\u95ee\u53bb$O(\\sqrt n)$\u8dd1\u4e00\u904d\u627e\u51fa\u6240\u6709\u53ef\u884c\u8fb9\u7684\u5b50\u6811\u3002\u54ce\u5440\uff0c\u90fd\u8bf4\u4e86\u8fd9\u73a9\u610f\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u6ca1\u6cd5\u72ec\u7acb\uff0c\u8fd8\u662f\u505a\u4e0d\u4e86\u3002\n\n\u989d\u2026\u2026\u5176\u5b9e\u54b1\u4eec\u522b\u5fd8\u4e86\u7ebf\u6bb5\u6811\u5206\u6cbb\u4e2d\u6709\u4e00\u79cd\u5e38\u7528\u6280\u5de7\u5c31\u662f\u5bf9\u8be2\u95ee\u5efa\u6811\u7136\u540e\u4fee\u6539\u653e\u5230\u7956\u5148\u4e0a\u7684\u4e00\u6761\u94fe\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u4fdd\u8bc1\u5728\u6811\u4e0adfs\u7684\u65f6\u5019\u5230\u4e86\u6bcf\u4e2a\u53f6\u8282\u70b9\u4e0a\u7684\u8be2\u95ee\u7684\u65f6\u5019\u5c31\u53ea\u80fd\u770b\u89c1\u5f71\u54cd\u5230\u4ed6\u7684\u4fee\u6539\u4e86\uff0c\u5e76\u4e14\u5e76\u67e5\u96c6\u662f\u53ef\u4ee5\u6309\u7167\u6808\u5e8f$O(logn)$\u64a4\u9500\u7684\u3002\u6211\u4eec\u628a\u8fd9\u73a9\u610f\u642c\u5230k-d tree\u4e0a\u6765\uff0c\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u73a9\u610f\u65f6\u7a7a\u5f00\u9500\u6781\u5927\uff0c\u65f6\u95f4\u4e0a~~\u53ea\u8981\u4f60\u5e76\u67e5\u96c6\u6309\u79e9\u5408\u5e76\u522b\u5199\u9519~~\u8fd8\u662f\u80fd\u7a0d\u5fae\u8dd1\u8fc7\u53bb\u7684\uff0c\u7a7a\u95f4\u7684\u82b1\u8d39\u5c31\u66f4\u5927\u4e86\u2026\u2026\u8981\u8fc7\u6389\u8fd9\u9898\u4f60\u9700\u8981\u4e00\u4e9b\u6bd4\u8f83\u6bd2\u7624\u7684\u5361\u7a7a\u95f4\u6280\u5de7\u2026\u2026\u53cd\u6b63\u6211\u628a\u70b9\u5b58\u6210unsigned short\u5c31\u64e6\u8fb9\u5361\u8fc7\u53bb\u4e86\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tint ints[200001],size[200001],mxa[200001],mxb[200001];\n\tinline int find(int n){\n\t\twhile(ints[n]!=n){\n\t\t\tn=ints[n];tot++;\n\t\t}\n\t\treturn(n);\n\t}\n\ttypedef struct _pt{\n\t\tint a;int b;int id;int s;int t;\n\t}pt;\n\tpt memchi[200001];\n\tint bkaa[200001],bkab[200001],bksz[200001],bktz[200001],bkmxaa[200001];\n\tint bkmxab[200001],bkmxba[200001],bkmxbb[200001];\n\ttypedef struct _b{\n\t\tunsigned short s;unsigned short t;int a;int b;int id;\n\t}bian;\n\tbian bians[200001];\n\tvector<bian> vec[100001];\n\tint cmpa(const _pt &a,const _pt &b){\n\t\treturn(a.a<b.a);\n\t}\n\tint cmpb(const _pt &a,const _pt &b){\n\t\treturn(a.b<b.b);\n\t}\n\tint lef[200001],rgh[200001],gn=1;\n\tint mina[200001],minb[200001],maxa[200001],maxb[200001];\n\tint build(int l,int r,int d){\n\t\tint tree=gn;gn++;if(l==r){\n\t\t\tmina[tree]=maxa[tree]=memchi[l].a;minb[tree]=maxb[tree]=memchi[l].b;return(tree);\n\t\t}\n\t\tint mid=(l+r)>>1;nth_element(memchi+l,memchi+mid,memchi+1+r,d?cmpa:cmpb);\n\t\tlef[tree]=build(l,mid,d^1);rgh[tree]=build(mid+1,r,d^1);\n\t\tmina[tree]=min(mina[lef[tree]],mina[rgh[tree]]);\n\t\tminb[tree]=min(minb[lef[tree]],minb[rgh[tree]]);\n\t\tmaxa[tree]=max(maxa[lef[tree]],maxa[rgh[tree]]);\n\t\tmaxb[tree]=max(maxb[lef[tree]],maxb[rgh[tree]]);return(tree);\n\t}\n\tbian num;\n\tvoid insert(int l,int r,int tree){\n\t\tif(maxa[tree]<num.a||maxb[tree]<num.b)return;\n\t\tif(mina[tree]>=num.a&&minb[tree]>=num.b){\n\t\t\tvec[tree].push_back(num);return;\n\t\t}int mid=(l+r)>>1;insert(l,mid,lef[tree]);insert(mid+1,r,rgh[tree]);\n\t}\n\tunsigned char anss[100001];\n\tvoid dfs(int l,int r,int tree){\n\t\tfor(register int i=0;i<vec[tree].size();i++){\n\t\t\tint aa=find(vec[tree][i].s),ab=find(vec[tree][i].t);\n\t\t\tbkaa[vec[tree][i].id]=aa;\n\t\t\tbkab[vec[tree][i].id]=ab;\n\t\t\tbksz[vec[tree][i].id]=size[aa];\n\t\t\tbktz[vec[tree][i].id]=size[ab];\n\t\t\tbkmxaa[vec[tree][i].id]=mxa[aa];\n\t\t\tbkmxab[vec[tree][i].id]=mxb[aa];\n\t\t\tbkmxba[vec[tree][i].id]=mxa[ab];\n\t\t\tbkmxbb[vec[tree][i].id]=mxb[ab];\n\t\t\tmxa[aa]=max(mxa[aa],vec[tree][i].a);\n\t\t\tmxb[aa]=max(mxb[aa],vec[tree][i].b);\n\t\t\tif(aa==ab)continue;if(size[aa]>size[ab])swap(aa,ab);\n\t\t\tsize[ab]+=size[aa];ints[aa]=ab;\n\t\t\tmxa[ab]=max(mxa[ab],mxa[aa]);mxb[ab]=max(mxb[ab],mxb[aa]);\n\t\t}\n\t\tint mid=(l+r)>>1;if(l==r){\n\t\t\tint aa=find(memchi[l].s),ab=find(memchi[l].t);\n\t\t\tif(aa==ab&&mxa[aa]==memchi[l].a&&mxb[ab]==memchi[l].b)anss[memchi[l].id]=1;\n\t\t}\n\t\telse dfs(l,mid,lef[tree]),dfs(mid+1,r,rgh[tree]);\n\t\tfor(register int i=vec[tree].size()-1;i>=0;i--){\n\t\t\tint aa=bkaa[vec[tree][i].id],ab=bkab[vec[tree][i].id];\n\t\t\tints[aa]=aa;ints[ab]=ab;\n\t\t\tsize[aa]=bksz[vec[tree][i].id];size[ab]=bktz[vec[tree][i].id];\n\t\t\tmxa[aa]=bkmxaa[vec[tree][i].id];mxa[ab]=bkmxba[vec[tree][i].id];\n\t\t\tmxb[aa]=bkmxab[vec[tree][i].id];mxb[ab]=bkmxbb[vec[tree][i].id];\n\t\t}\n\t}\n\tvoid ywymain(){\n\t\tint n=get(),m=get();\n\t\tfor(register int i=1;i<=n;i++)ints[i]=i,size[i]=1,mxa[i]=mxb[i]=-1234567;\n\t\tfor(register int i=1;i<=m;i++)bians[i].s=get(),bians[i].t=get(),bians[i].a=get(),bians[i].b=get(),bians[i].id=i;;\n\t\tint q=get();\n\t\tfor(register int i=1;i<=q;i++){\n\t\t\tmemchi[i].s=get();memchi[i].t=get();\n\t\t\tmemchi[i].a=get();memchi[i].b=get();memchi[i].id=i;\n\t\t}\n\t\tint root=build(1,q,1);\n\t\tfor(register int i=1;i<=m;i++){\n\t\t\tnum=bians[i];insert(1,q,root);\n\t\t}\n\t\tdfs(1,q,root);\n\t\tfor(register int i=1;i<=q;i++){\n\t\t\tif(anss[i])printf(\"Yes\\n\");else printf(\"No\\n\");\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);\n}\n```",
        "postTime": 1545224176,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3247 \u3010[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p3247-hnoi2016%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/)\n\n---\n# Solution\n\u8fd9\u662f\u4e00\u9053\u5999\u9898\u3002\n\n\u9996\u5148\uff0c~~\u6839\u636e\u5e38\u8bc6~~\uff0c\u9898\u9762\u8981\u6211\u4eec\u6c42\u7684\u662f\u627e\u4e00\u6761\u4eces,t\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a$max\\ a=a,max\\ b=b$\u3002\n\n\u8fd9\u548b\u6c42\u5462\uff1f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c**\u6211\u4eec\u8981\u6c42\u7684\u8def\u5f84\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u8fde\u901a\u5757\u53ef\u4ee5\u8003\u8651\u7528\u5e76\u67e5\u96c6\u5904\u7406**\u3002\n\u63a5\u4e0b\u6765\u8003\u8651\u5bf9a\u5206\u5757\uff0c\u5148\u628a\u6240\u6709\u7684\u8fb9\u6309\u7167$a$\u6765\u6392\u5e8f\uff0c\u518d\u5206\u5757\uff0c\u6bcf\u4e2a\u5757\u91cc\u8fde\u7684\u6240\u6709\u8fb9\u4fdd\u8bc1$<=a_{[size*x]}$\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a\n![AuMb0e.png](https://s2.ax1x.com/2019/03/19/AuMb0e.png)\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8003\u8651\u628a\u6240\u6709\u8be2\u95ee\u6309\u7167**b\u4ece\u5c0f\u5230\u5927**\u6392\u5e8f\u53bb\u4e00\u4e2a\u4e2a\u8ba1\u7b97\uff0c\u6bcf\u8ba1\u7b97\u4e00\u4e2a\u8be2\u95ee\u4e4b\u524d\uff0c\u628a$b<=q[i].b$\u7684\u8fb9\u5168\u90e8\u90fd\u5bf9\u5e94\u5730\u585e\u5230\u8054\u901a\u5feb\u91cc\u9762\u53bb(\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5206\u5757\u7684\u5b9a\u4e49\uff0c\u6bcf\u6761\u8fb9\u8bf4\u8981\u585e\u5165\u7684\u5e76\u67e5\u96c6\u4e00\u5b9a\u4e3a\u4ece\u67d0\u4e2a\u8fde\u901a\u5757\u5f00\u59cb\u4e00\u76f4\u5f80\u540e\u5230\u6700\u540e\u4e00\u4e2a\u5757\u4e3a\u6b62)\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bf9\u5e94\u7684\u53bb\u627e\u6700\u5927\u7684$a<=q[i].a$\u7684\u8fde\u901a\u5757\uff0c\u7136\u540e\u628a\u4e00\u4e9b\u8fd8\u96f6\u6563\u5728\u5916\u9762\u7684\u8fb9\u5168\u90e8\u585e\u5230\u90a3\u4e2a\u8fde\u901a\u5757\u91cc\u9762\uff0c**\u8fd9\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u6240\u6709\u7684\u8fb9\u4e00\u5b9a\u80fd\u4fdd\u8bc1$a<=q[i].a,b<=q[i].b$**\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u5e94\u7684\u770b\u770b$u,v$\u662f\u5426\u8054\u901a\uff0c\u5b83\u4eec\u6240\u5728\u7684\u8fde\u901a\u5757\u7684$max\\_a,max\\_b$\u662f\u5426\u6ee1\u8db3\u8981\u6c42\u5373\u53ef\u3002\n\n\u6211\u4eec\u6bcf\u505a\u5b8c\u4e00\u4e2a\u64cd\u4f5c\u540e\uff0c\u5fc5\u987b\u628a\u4e4b\u524d\u8fde\u7684\u96f6\u6563\u7684\u8fb9\u7ed9\u64a4\u9500\u6389\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u5fc5\u987b\u7528**\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6**\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7528\u4e00\u4e2a\u6808/\u961f\u5217\u8bb0\u5f55\u6240\u6709\u7684\u4fee\u6539\u64cd\u4f5c(\u6539fa/\u6539max)\u4e00\u4e2a\u4e00\u4e2a\u6539\u56de\u53bb\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u6709$\\sqrt m$\u4e2a\u5757\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u96f6\u6563\u8fb9\u4e0d\u8d85\u8fc7$\\sqrt m$\u6761\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u5e94\u8be5\u662f$O(n \\cdot \\sqrt m)$\n\n---\n# Code\n**\u6570\u636e\u751f\u6210\u5668**\n\n[\u5728\u8fd9\u91ccw](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p3247-hnoi2016%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/)\n\n**\u8bf7\u6ce8\u610f\u7279\u5224(0,0)\u8fb9\u6784\u6210\u81ea\u73af\u7684\u60c5\u51b5\uff0c\u6211\u56e0\u4e3a\u8fd9\u4e2a\u7834\u4e8bWA\u4e86\u534a\u5929**\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=50000+100;\nconst int M=100000+100;\nconst int Q=1000;\nstruct line\n{\n    int s,t,a,b,ans,no;\n    friend bool operator < (line x,line y)\n    {\n        return x.a<y.a;\n    }\n}l[M],l2[M],q[N];\nbool cmp1(line x,line y)\n{\n    return x.a<y.a;\n}\nbool cmp2(line x,line y)\n{\n    return x.b<y.b;\n}\nbool cmp3(line x,line y)\n{\n    return x.no<y.no;\n}\nint n,m,K,block[Q];//block[i]:\u8bb0\u5f55\u7b2ci\u5757\u7684a\u503c\nstruct SIT\n{\n    int type,x,num1,num2;//type=0:\u6539fa;type=1:\u6539max\n}mstack[N];\nint top;\nstruct UnF\n{\n    int fa[N],size[N],MAX_a[N],MAX_b[N];\n    int FindFather(int x)\n    {\n        if(fa[x]==0) return x;\n        return FindFather(fa[x]);\n    }\n    void Merge(int x,int y,int a,int b,bool type)//type=0\uff1a\u4e0d\u64a4\u56de;=1:\u8981\u64a4\u56de\n    {\n        int fa1=FindFather(x),fa2=FindFather(y);\n        if(size[fa1]>size[fa2]) \n            swap(x,y),swap(fa1,fa2);\n        if(type==1)\n            mstack[++top].type=1,mstack[top].x=fa2,\n            mstack[top].num1=MAX_a[fa2],mstack[top].num2=MAX_b[fa2];\n        MAX_a[fa2]=max(max(MAX_a[fa2],MAX_a[fa1]),a);\n        MAX_b[fa2]=max(max(MAX_b[fa2],MAX_b[fa1]),b);\t\n        if(fa1==fa2)\n            return;\n        if(type==1)\n            mstack[++top].type=0,mstack[top].x=fa1,mstack[top].num1=fa2,mstack[top].num2=size[fa1];\n        fa[fa1]=fa2,size[fa2]+=size[fa1];\n    }\n    void Undo()\n    {\n        for(;top>0;top--)\n        {\n            if(mstack[top].type==0)\n                fa[mstack[top].x]=0,size[mstack[top].num1]-=mstack[top].num2;\n            else\n                MAX_a[mstack[top].x]=mstack[top].num1,\n                MAX_b[mstack[top].x]=mstack[top].num2;\n        }\n    }\n    int Query(int x,int y,int a,int b)\n    {\n        if(x==y and a==0 and b==0)\n            return size[FindFather(x)]!=1;\n        int fa=FindFather(x);\n        if(FindFather(x)!=FindFather(y)) return false;\n        if(MAX_a[fa]!=a or MAX_b[fa]!=b)\n            return false;\n        return true;\n    }\n}unf[Q];\nint main()\n{\n    int t=clock();\n    n=read(),m=read();\n    for(int i=1;i<=m;i++)\n    {\n        l[i].s=read(),l[i].t=read(),l[i].a=read(),l[i].b=read();\n        l2[i]=l[i];\n    }\n    K=read();\n    for(int i=1;i<=K;i++)\n        q[i].s=read(),q[i].t=read(),q[i].a=read(),q[i].b=read(),q[i].no=i;\n        \n    int size=int(sqrt(m*20)),cnt=m/size;\t\t\n    for(int i=0;i<=cnt;i++)\n        for(int j=1;j<=n;j++)\n            unf[i].size[j]=1;\n    sort(l+1,l+1+m,cmp1);\n    sort(l2+1,l2+1+m,cmp1);\n    for(int i=0;i<=m/size;i++)\n        block[i]=l[i*size].a;\n    sort(q+1,q+1+K,cmp2);\n    sort(l+1,l+1+m,cmp2);\n    \n    int to=1;//\u8bb0\u5f55\u5f53\u524d\u6267\u884c\u5230\u7b2cto\u6761\u8fb9\n    for(int i=1;i<=K;i++)\n    {\n        //cerr<<i<<endl;\n        for(;l[to].b<=q[i].b and to<=m;to++)\n        {\n            int begin=lower_bound(block,block+1+cnt,l[to].a)-block;\n            for(int j=begin;j<=cnt;j++)\n                unf[j].Merge(l[to].s,l[to].t,l[to].a,l[to].b,0);\n        }\n        int t=upper_bound(block,block+1+cnt,q[i].a)-block-1;\n        line tmp;tmp.a=block[t];\n        for(int j=upper_bound(l2+1,l2+1+m,tmp)-l2;j<=m and l2[j].a<=q[i].a;j++)\n            if(l2[j].b<=q[i].b)\n                unf[t].Merge(l2[j].s,l2[j].t,l2[j].a,l2[j].b,1);\n        q[i].ans=unf[t].Query(q[i].s,q[i].t,q[i].a,q[i].b);\n        unf[t].Undo();\n    }\n    \n    sort(q+1,q+1+K,cmp3);\n    for(int i=1;i<=K;i++)\n        if(q[i].ans==1)\n            printf(\"Yes\\n\");\n        else\n            printf(\"No\\n\");\n    cerr<<clock()-t<<endl;\n    return 0;\n}\n\n```\n\n\n\n\n\n\n\n\n",
        "postTime": 1552994849,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3247 \u3010[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\u3011"
    },
    {
        "content": "##\u5206\u5757 + \u5e76\u67e5\u96c6\u542f\u53d1\u5f0f\u5408\u5e76\n\n\u601d\u8def\u5f88\u7b80\u5355,\u5c31\u662f\u627e\u5230\u6240\u6709a,b\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u67d0\u4e2a\u8be2\u95ee\u7684\u8fb9\u7136\u540e\u5e76\u67e5\u96c6\u5408\u5e76,\u7ef4\u62a4\u6bcf\u4e2a\u96c6\u5408\u7684a,b\u7684\u6700\u5927\u503c\u770b\u662f\u5426\u7b49\u4e8e\u8be2\u95ee\u7684a,b.\n\n\u76f4\u63a5\u66b4\u529b\u663e\u7136\u4f1a\u8d85\u65f6,\u4e8e\u662f\u8003\u8651\u5206\u5757,\u663e\u7136\u5206\u6210\u6839\u53f7n\u5757.\n\n\u5148\u6574\u4f53\u628a\u8fb9\u6309a\u6392\u5e8f,\u8be2\u95ee\u5148\u8bfb\u8fdb\u6765\u540e\u6309b\u6392\u5e8f,\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u8fb9\u6309b\u6392\u5e8f,\u7136\u540e\u8fdb\u884c\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u64cd\u4f5c\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f,\u7531\u4e8e\u8981\u64a4\u9500\u64cd\u4f5c(\u5206\u5757\u5904\u7406,\u5904\u7406\u5b8c\u4e00\u5757\u540e\u8981\u201c\u5904\u7406\u4f5c\u6848\u75d5\u8ff9\u201d)\u6545\u8fd9\u91cc\u7684\u5e76\u67e5\u96c6\u4e0d\u80fd\u4f7f\u7528\u538b\u7f29\u8def\u5f84,\u5426\u5219\u96be\u4ee5\u5b9e\u73b0\u64a4\u9500undo\u64cd\u4f5c,\u800c\u53ea\u80fd\u4f7f\u7528\u5e76\u67e5\u96c6\u7684\u542f\u53d1\u5f0f\u5408\u5e76,\u5373\u6309\u79e9\u5408\u5e76(\u8fd9\u6837\u5b50\u7684\u8bdd\u6548\u7387\u4f3c\u4e4e\u662f\u5747\u644aO(lgn)\uff1f\uff1f\uff1f)\u5e76\u8bb0\u5f55\u64cd\u4f5c,\u7136\u540e\u64a4\u9500\u5373\u53ef.\n\n\nPS:\u8fd9\u9898\u672c\u67654s\u65f6\u9650\u7ed3\u679cLG\u4e0a\u4e00\u5f00\u59cb\u662f1s\u65f6\u9650\u5361\u4e86\u6211\u51e0\u6b21....\n\n\n\u53c8\u81ed\u53c8\u957f\u7684\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n/*\n    Programed By Harry\u00b7Shaun\u00b7Wang\n    2016.12.4 \n*/\n#include <algorithm>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#define MAXN 50005\n#define MAXM 100005\n#define MAXQ 50005\n#define union Union\nusing namespace std;\ninline int getint()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0' || c>'9') c=getchar();\n    while(c>='0' && c<='9')\n    {\n        x=x*10+c-48;\n        c=getchar();\n    }\n    return x;\n}\nstruct Edge\n{\n    int from,to;\n    int a,b;\n    int index;\n    Edge& input(int i)\n    {\n        from=getint(),to=getint();\n        a=getint(),b=getint();\n        index=i;\n        return *this;\n    }\n};\nstruct Operation\n{\n    int from,to;\n    int father,size;\n    int maxa,maxb;\n};\nint n,m,q,l;\nEdge E[MAXM],Q[MAXQ],S[MAXN];\nOperation O[MAXQ];\nint f[MAXN],size[MAXN];\nint maxa[MAXN],maxb[MAXN];\nint top,sum;\nint ans[MAXQ];\ninline bool cmpa(const Edge &x,const Edge &y)\n{\n    if(x.a!=y.a) return x.a<y.a;\n    else return x.b<y.b;\n}\ninline bool cmpb(const Edge &x,const Edge &y)\n{\n    if(x.b!=y.b) return x.b<y.b;\n    else return x.a<y.a;\n}\ninline int max(int a,int b,int c)\n{\n    if(a<b) a=b;\n    if(a<c) a=c;\n    return a;\n}\ninline int find(int x)\n{\n    while(x!=f[x]) x=f[x];\n    return x;\n}\ninline void union(int x,int y,int a,int b)\n{\n    x=find(x),y=find(y);\n    if(size[x]>size[y]) swap(x,y);\n    ++sum;\n    O[sum].from=x,O[sum].to=y;\n    O[sum].maxa=maxa[y],O[sum].maxb=maxb[y];\n    O[sum].father=f[x],O[sum].size=size[y];\n    if(x==y)\n    {\n        maxa[x]=max(maxa[x],a); \n        maxb[x]=max(maxb[x],b); \n        return;\n    }\n    f[x]=y;\n    size[y]+=size[x];\n    maxa[y]=max(maxa[x],maxa[y],a);\n    maxb[y]=max(maxb[x],maxb[y],b);\n}\ninline void undo()\n{\n    while(sum) \n    {\n        f[O[sum].from]=O[sum].father; \n        size[O[sum].to]=O[sum].size;\n        maxa[O[sum].to]=O[sum].maxa;\n        maxb[O[sum].to]=O[sum].maxb;\n        --sum;\n    }\n}\nint main()\n{\n    n=getint(),m=getint();\n    for(int i=1; i<=m; ++i) E[i].input(i);\n    q=getint();\n    for(int i=1; i<=q; ++i) Q[i].input(i);\n    stable_sort(E+1,E+m+1,cmpa),stable_sort(Q+1,Q+q+1,cmpb);\n    l=sqrt(m);\n    for(int i=1; i<=m; i+=l)\n    {\n        top=0;\n        for(int j=1; j<=q; ++j)\n            if(Q[j].a>=E[i].a && (i+l>m || Q[j].a<E[i+l].a))\n                S[++top]=Q[j];\n        stable_sort(E+1,E+i,cmpb);\n        for(int j=1; j<=n; ++j)\n        {\n            f[j]=j;\n            size[j]=1;\n            maxa[j]=maxb[j]=-1;\n        }\n        for(int j=1,k=1; j<=top; ++j)\n        {\n            for(; k<i && E[k].b<=S[j].b; ++k)\n                union(E[k].from,E[k].to,E[k].a,E[k].b);\n            sum=0;\n            for(int o=i; o<i+l && o<=m; ++o)\n                if(E[o].a<=S[j].a && E[o].b<=S[j].b)\n                    union(E[o].from,E[o].to,E[o].a,E[o].b);\n            int x=find(S[j].from),y=find(S[j].to);\n            ans[S[j].index]=(x==y && maxa[x]==S[j].a && maxb[x]==S[j].b);\n            undo();\n        }\n    }\n    for(int i=1; i<=q; ++i)\n        if(ans[i]) puts(\"Yes\");\n        else puts(\"No\");\n    return 0;\n}\n```",
        "postTime": 1482840888,
        "uid": 19370,
        "name": "ShaunWang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3247 \u3010[HNOI2016]\u6700\u5c0f\u516c\u500d\u6570\u3011"
    }
]