[
    {
        "content": "\u9898\u76ee\u5f88\u590d\u6742\uff0c\u56fe\u7247\u5f88\u62bd\u8c61\uff0c\u7ffb\u8bd1\u5f88\u7b80\u7565  \n----\u8fd9\u9053\u9898\u7684\u771f\u5b9e\u5199\u7167  \n\n\n\n------------\n## \u6b65\u5165\u6b63\u9898  \n\u9898\u76ee\u4ed4\u7ec6\u9605\u8bfb\u4e00\u4e0b\u662f\u4e0d\u96be\u7684\uff1a\u4e00\u5f20\u7f51\u7edc\uff0c\u6c42A\u70b9\u5230Z\u70b9\u7684\u6700\u5927\u6d41\u91cf  \n\u4ee5\u81f3\u4e8e\u4ec0\u4e48\u5e76\u8054\u4e32\u8054\u5c31\u662f\u7f51\u7edc\u6d41\u91cd\u8fb9\u548c\u6d41\u91cf\u9650\u5236  \n\u4e8e\u662f\u6211\u4eec\u6309\u7167\u7f51\u7edc\u6d41\u6a21\u677f\u6765\u5c31\u597d\u4e86\n\n\n\n------------\n## Code: \u6367\u4e0a\u6211\u4e11\u964b\u65e0\u6bd4\u7684dinic\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint to,next,data;\n}e[100000];\nint h[500],d[500],n,s=1,t=26,pop=1;\nvoid add(int x,int y,int dat){\n\tpop++;\n\te[pop].data=dat;e[pop].to=y;\n\te[pop].next=h[x];h[x]=pop;\n}\nqueue<int>q;\nbool bfs(){\n\tmemset(d,0,sizeof(d));\n\twhile(!q.empty())q.pop();\n\tq.push(s);d[s]=1;\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=h[x];i;i=e[i].next){\n\t\t\tif(!d[e[i].to]&&e[i].data){\n\t\t\t\td[e[i].to]=d[x]+1;\n\t\t\t\tq.push(e[i].to);\n\t\t\t\tif(e[i].to==t)return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint dfs(int p,int flow){\n\tint rest=flow;\n\tif(p==t)return flow;\n\tfor(int i=h[p];i&&rest;i=e[i].next){\n\t\tif(e[i].data&&d[e[i].to]==d[p]+1)\n\t\t  {\n\t\t  \tint k=dfs(e[i].to,min(rest,e[i].data));\n\t\t  \tif(!k)d[e[i].to]=-1;\n\t\t  \te[i].data-=k;e[i^1].data+=k;rest-=k;\n\t\t  }\n\t}\n\treturn flow-rest;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tmemset(h,0,sizeof(h));\n\tstring a,b;int x,y,z;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a>>b>>z;\n\t\tx=a[0]-'A'+1;y=b[0]-'A'+1;\n\t\t//cout<<x<<\" \"<<y<<endl;\n\t\tadd(x,y,z);add(y,x,0);\n\t}\n\tint ans=0;\n\twhile(bfs())\n\t  ans+=dfs(s,(1<<30));\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n-----\n\n\u6709\u5174\u8da3\u53ef\u4ee5\u53bb\u770b\u770b\u6a21\u677f[P3376](https://www.luogu.org/problemnew/show/P3376)",
        "postTime": 1546322911,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "## \u9996\u5148\u611f\u8c22@JK_LOVER\u5927\u7287\u76f8\u52a9\uff0c\u89e3\u51b3\u4e86\u6211\u7684\u56f0\u60d1\n\n\t\u7b80\u5316\u9898\u610f\uff1a\u6c42A\u5230Z\u7684\u6700\u5927\u6d41\uff1b\n\n\t\u672c\u9898\u4f5c\u4e3a\u7f51\u7edc\u6d41\u7684\u677f\u9898\uff0c\u5176\u5b9e\u4e5f\u5e76\u4e0d\u662f\u5f88\u677f\uff0c\u8fd8\u662f\u8003\u5bdf\u4e86\u4e00\u4e9b\u7ec6\u8282\u7684\uff1a\n1. \u9898\u76ee\u4e0a\u7684****\u7ba1\u7406\u5458\u6ce8****\uff0c\u5176\u5b9e\u6ce8\u4e86\u8ddf\u6ca1\u6ce8\u4e00\u6837\uff0c\u8fd9\u662f\u5728\u6211\u7684\u6ee1\u7bc7~~WA~~\u63d0\u4ea4\u4e0b\u5b9e\u8df5\u51fa\u6765\u7684\uff0c\u6240\u4ee5duck\u76f4\u63a5\u5904\u7406\u5efa\u8fb9\uff1a\n   \n   \n   ![](https://cdn.luogu.com.cn/upload/image_hosting/ggdzvkgo.png)\uff1b\n   \n   \n   2.\u672c\u9898\u4f7f\u7528\u5361\u65e0\u4f18\u5316\u7248\u672c\u7684dinic\uff0c\u4f1aT\u98de7\u4e2a\u70b9\uff0c\u4f46\u662f\u5176\u5b83\u9898\u89e3\u4e0a\u597d\u50cf\u5e76\u672a\u51fa\u73b0\u6b64\u95ee\u9898~~\u53ef\u80fd\u662f\u672c\u4eba\u7801\u98ce\u95ee\u9898~~\uff1b\n   \n   \n30pts\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define rg register int \nusing namespace std;\nint N,cnt=1,head[400040],dep[400040];\nstruct node{\n\tint nxt;\n\tint to;\n\tint w;\n}edge[400040];\nvoid add_edge(int u,int v,int w)\n{\n\tedge[++cnt].nxt=head[u];\n\tedge[cnt].to=v;\n\tedge[cnt].w=w;\n\thead[u]=cnt;\n}\nbool bfs()\n{\n\tmemset(dep,0,sizeof dep);\n\tqueue< int >x;x.push(1);\n\tdep[1]=1;\n\twhile(!x.empty())\n\t{\n\t\tint u=x.front();\n\t\tfor(rg i=head[u];i;i=edge[i].nxt)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(!dep[v]&&edge[i].w)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tx.push(v);\n\t\t\t}\n\t\t\tif(v==26) return 1;\n\t\t}\n\t\tx.pop();\n\t}\n\treturn 0;\n}\nint dinic(int u,int flow)\n{\n\tif(u==26) return flow;\n\tint k;int res=flow;\n\tfor(rg i=head[u];i&&res;i=edge[i].nxt)\n\t{\n\t\tint v=edge[i].to;\n\t\tif(dep[v]==dep[u]+1&&edge[i].w)\n\t\t{\n\t\t\tk=dinic(v,min(edge[i].w,res));\n\t\t\tif(!k) dep[v]=0;\n\t\t\tedge[i].w-=k;\n\t\t\tedge[i^1].w+=k;\n\t\t\tres-=k;\n\t\t}\n\t}\n\treturn flow-res;\n}\nint ans,flo;\nsigned main()\n{\n\tscanf(\"%d\",&N);\n\twhile(N--)\n\t{\n\t\tchar a,b;int w;\n\t\tcin>>a>>b>>w;\n//\t\tif(a>=97) a-=96;if(b>=97) b-=96;if(a>=65&&a<=90) a-=64;if(b>=65&&b<=90) b-=64;\n\t\tadd_edge(int(a)-'A'+1,int(b)-'A'+1,w);\n\t\tadd_edge(int(b)-'A'+1,int(a)-'A'+1,0);\n\t}\n\twhile(bfs())\n\t{\n\t\twhile(flo=dinic(1,INT_MAX)) ans+=flo;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n100pts\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define rg register int \nusing namespace std;\nint N,cnt=1,head[4101],dep[4100];\nint ans,flo;\nstruct node{\n    int nxt;\n    int to;\n    int w;\n}edge[11200];\nvoid add_edge(int u,int v,int w)\n{\n    edge[++cnt].nxt=head[u];\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\nbool bfs()\n{\n    memset(dep,0,sizeof dep);\n    queue< int >x;x.push(1);\n    dep[1]=1;\n    while(!x.empty())\n    {\n        int u=x.front();x.pop();\n        for(rg i=head[u];i;i=edge[i].nxt)\n        {\n            int v=edge[i].to;\n            if(!dep[v]&&edge[i].w)\n            {\n                dep[v]=dep[u]+1;\n                if(v==26) return 1;\n                x.push(v);\n            }\n        }\n    }\n    return 0;\n}\nint cur[4010];\nint dinic(int u,int flow)\n{\n    if(u==26 || flow == 0) return flow;\n    int k;int res=0;\n    for(rg i=cur[u];i;i=edge[i].nxt)\n    {\n        cur[u] = i;\n        int v=edge[i].to;\n        if(dep[v]==dep[u]+1&&edge[i].w)\n        {\n            k=dinic(v,min(edge[i].w,flow));\n            if(!k) continue;\n            edge[i].w-=k;\n            edge[i^1].w+=k;\n            res+=k;flow -=k;\n            if(flow == 0) break;\n        }\n    }\n    return res;\n}\nsigned main()\n{\n    scanf(\"%d\",&N);\n    while(N--)\n    {\n        char a,b;int w;\n        cin>>a>>b>>w;\n        add_edge(int(a-'A'+1),int(b-'A'+1),w);\n        add_edge(int(b-'A'+1),int(a-'A'+1),0);\n    }\n    while(bfs())\n    {\n        memcpy(cur,head,sizeof(cur));\n        int maxflow = dinic(1,19260817);\n        ans += maxflow;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n%%%\uff0c\u7287\u7bc7\u5b8c\u7ed3\n\n",
        "postTime": 1604228660,
        "uid": 233298,
        "name": "OraclePi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]Total Flow S\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u6a21\u677f\uff0c\u597d\u591a\u4eba\u56e0\u4e3a\u5c0f\u5199\u5b57\u6bcd\u5d29\u4e86\uff0c\u8fd9\u91cc\u601d\u8def\u662f\u76f4\u63a5\u8f6c\u5316\u5b57\u6bcd\u5230\u6570\u5b57\u540e\u518d\u8fdb\u884c\u8fde\u8fb9\u3002\n\n\u81f3\u4e8e\u91cd\u8fb9\u7684\u5904\u7406\uff0c\u5f00\u59cb\u8fd8\u5728\u60f3\u5f88\u590d\u6742\u7684\u8f93\u5165\u4e2d\u6570\u7ec4\u8bb0\u5f55\u540e\u52a0\u8fb9\u518d\u8fdb\u884c\u64cd\u4f5c\uff0c\u540e\u9762\u53d1\u73b0\u5176\u5b9e\u91cd\u8fb9\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u4e3a\u91cd\u8fb9\u53ea\u4e0d\u8fc7\u662f\u590d\u6742\u5ea6\u7a0d\u5fae\u9ad8\u4e00\u70b9\uff0c\u53ea\u8981n\u7684\u5927\u5c0f\u6ca1\u6709\u5230\u4e0d\u53ef\u7406\u55bb\u7684\u5730\u6b65\u5c31\u884c\u3002\n\n\u8fde\u8fb9\u7684\u65b9\u5f0f\u5927\u6982\u662f\u5c06\u6bcf\u4e2a\u5b57\u6bcd\u5f53\u505a\u8282\u70b9\u8fde\uff0c\u4e4b\u540e\u5c06 \u2018A\u2019 \u4f5c\u4e3a\u8d77\u70b9\uff0c \u2018Z\u2019 \u4f5c\u4e3a\u7ec8\u70b9\u8fdb\u884c\u4e00\u4e2a\u6700\u5927\u6d41\u7684\u67e5\u627e\u5c31\u80fd\u627e\u51fa\u7b54\u6848\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u89e3\u6cd5\u6b63\u786e\u5462\uff1f\u56e0\u4e3a\u5408\u5e76\u7ba1\u5b50\u4ee3\u66ff\u9001\u6c34\u91cf\u7b49\u4ef7\u4e8e\u4e24\u6761\u6c34\u7ba1\u5206\u522b\u9001\u6c34\uff0c\u800c\u4e32\u8054\u53d6\u6700\u5c0f\u503c\u5176\u5b9e\u5c31\u662f\u8def\u5f84\u4e2d\u6700\u5c0f\u6c34\u7ba1\u7684\u5bb9\u91cf\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <cstring>\n#include <fstream>\nusing namespace std;\nconst int MAXN = 1e4+5;\nconst int MAXM = 1e5+5;\nnamespace Dinic{\n  int n,m,s,t,a,b,head[MAXN],c,tot=1,dep[MAXN],flow;\n\n  struct Edge{\n    int u,v,nxt,val;\n  }edge[MAXM<<1];\n\n  inline void add(int f, int t, int d){\n    edge[++tot].u = f;\n    edge[tot].v = t;\n    edge[tot].nxt = head[f];\n    edge[tot].val = d;\n    head[f] = tot;\n  }\n  inline void addedge(int f,int t, int d){\n    add(f,t,d);add(t,f,0);\n  }//\u53cc\u5411\u52a0\uff0c\u53cd\u5411\u8fb9\u521d\u59cb\u4e3a0\n  inline bool Dinic(){\n    queue<int> q;\n    q.push(s);\n    memset(dep,0,sizeof(dep));\n    dep[s] = 1;\n    while(!q.empty()){\n      int qf = q.front();q.pop();\n      for (int i=head[qf];i;i=edge[i].nxt){\n        int v= edge[i].v;\n        if (!dep[v] && edge[i].val){\n          dep[v] = dep[qf]+1;\n          q.push(v);\n        }\n      }\n    }\n    return dep[t];\n  }//dinic\u7b97\u6cd5\u7684\u57fa\u7840\uff0c\u67e5\u770b\u7ec8\u70b9\u662f\u5426\u80fd\u591f\u8bbf\u95ee\u3002\n  inline int dfs(int u, int lim){\n    if(!lim || u==t) return lim;\n    int tflow = 0;\n    for (int i=head[u];i;i=edge[i].nxt){\n      int v = edge[i].v;\n      if (dep[v] ==dep[u]+1 && edge[i].val){\n        int now = dfs(v,min(lim,edge[i].val));\n        edge[i].val-=now;\n        edge[i^1].val+=now;\n        tflow+=now;\n        lim-=now;\n      }\n    }\n    if (!tflow) dep[u] = 0;\n    return tflow;\n  }\n  inline void solve();\n}\n\ninline int id(char x){\n  return (int) x-64;\n}//\u5c06\u5b57\u6bcd\u8f6c\u5316\u4e3a\u70b9\uff0c'A'\u7684ASCII\u7801\u4e3a65\uff0c\u51cf\u53bb64\u540e\u4e3a1\u3002\nchar c1,c2;\ninline void Dinic::solve(){\n  s = id('A'), t = id('Z');\n  cin >> n;\n  for (int i=1;i<=n;i++){\n    cin >> c1 >> c2 >> c;\n    addedge(id(c1),id(c2),c);\n  }//\u52a0\u4e2a\u8fb9\n  while(Dinic()) flow+= dfs(s,1e9);//\u4e0d\u65ad\u627e\u589e\u5e7f\u8def\u5c31\u597d\u4e86\u3002\n  cout << flow;\n}\n\nsigned main(){\n  Dinic::solve();\n}\n\n```",
        "postTime": 1591732686,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]Total Flow S\u3011"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problem/P2936)\n---\n\u6807\u51c6\u7684\u7f51\u7edc\u6d41\u88f8\u9898  \n\u53ea\u9700\u8981\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u7684\u6a21\u677f\u5c31\u597d\u4e86\n\n---\n\u4e0d\u77e5\u9053\u7f51\u7edc\u6d41\u662f\u4ec0\u4e48\u7684\u8bf7\u770b[\u8fd9\u9053\u9898](https://www.luogu.org/problem/P3376)  \n\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=10010,MAXM=100010;\nint N,M,S,T;\nint to[MAXM<<1],edge[MAXM<<1],nxt[MAXM<<1],head[MAXN],tot=1;\nvoid addedge(int u,int v,int c){\n  to[++tot]=v;\n  edge[tot]=c;\n  nxt[tot]=head[u];\n  head[u]=tot;\n}\nint d[MAXN];\nmap<string,int> m;\\\\\u5c06\u5b57\u6bcd\u53d8\u6210\u6570\u5b57\nint tot2;\nqueue<int> q;\nbool bfs(){\n  memset(d,0,sizeof(d));\n  while(!q.empty()) q.pop();\n  q.push(S);\n  d[S]=1;\n  while(!q.empty()){\n    int t=q.front();\n    q.pop();\n    for(int i=head[t];i;i=nxt[i]){\n      int v=to[i];\n      if(edge[i] && !d[v]) {\n        d[v]=d[t]+1;\n        q.push(v);\n        if(v==T) return true;\n      }\n    }\n  }\n  return false;\n}\n\nint dinic(int now,int flow){\n  if(now==T) return flow;\n  int rest=flow;\n  for(int i=head[now];i;i=nxt[i]){\n    int v=to[i];\n    if(edge[i] && d[v]==d[now]+1) {\n      int k=dinic(v,min(rest,edge[i]));\n      rest-=k;\n      edge[i]-=k;\n      edge[i^1]+=k;\n      if(k==0) d[v]=0;\n    }\n  }\n  return flow-rest;\n}\n\nint main(){\n  scanf(\"%d%d\",&N,&M);\n  string t1,t2;\n  int t3;\n  while(cin>>t1>>t2>>t3){\n    // scanf(\"%d%d%d\",&t1,&t2,&t3);\n    if(m.count(t1)==0) m[t1]=++tot2;\n    if(m.count(t2)==0) m[t2]=++tot2;\n    addedge(m[t1],m[t2],t3);\n    addedge(m[t2],m[t1],t3);\n  }\n  if(m.count(\"A\")==0 || m.count(\"Z\")==0){\n      printf(\"%d\\n\",0);\n      system(\"pause\");\n      return 0;\n  }\n  S=m[\"A\"],T=m[\"Z\"];\n  int maxflow=0;\n  while(bfs()){\n    int flow;\n    while(flow=dinic(S,0x3f3f3f3f)) maxflow+=flow;\n  }\n  printf(\"%d\\n\",maxflow);\n//  system(\"pause\");\n  return 0;\n}\n```",
        "postTime": 1567600651,
        "uid": 55812,
        "name": "_lcy_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u8fd9\u9898\u641e\u5f97\u6211\u60f3\u54edQAQ\n\nA\u4e86\u4e4b\u540e\u770b\u4e86\u4e00\u4e0b\u522b\u4eba\u7684\u4ee3\u7801\uff0c\u88f8\u7684Dinic\u53ea\u898120~200ms\u4e0d\u7b49\uff0c\u6211\u8fd9\u4e2a\u8fd8\u52a0\u4e86\u5f27\u4f18\u5316\u7684\u600e\u4e48\u8dd1\u4e86600ms\uff1f\uff01\n\n\uff08\u96be\u9053\u662f\u56e0\u4e3a\u6211\u7528\u4e86$cin$\u5417\uff09\n\n\u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u6309\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u8def\u5f84\u8fde\u8fb9\uff0c\u7136\u540e\u8bbe\u6e90\u70b9$S=ASCII('A')$\uff0c\u6c47\u70b9$T=ASCII('Z')$\u8dd1\u4e00\u904d$Dinic/EK$\u6c42\u6700\u5927\u6d41\u5373\u53ef\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2147400000\nusing namespace std;\nqueue <int> q;\nint cnt=1,fst[505],nxt[200005],to[200005],w[200005],cur[505];\nint n,S,T,dep[505];\nvoid AddEdge(int u,int v,int c)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=fst[u];\n\tfst[u]=cnt;\n\tw[cnt]=c;\n}\nbool Bfs()\n{\n\tmemset(dep,0,sizeof(dep));\n\tq.push(S);\n\tdep[S]=1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=fst[u];i;i=nxt[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(!dep[v] && w[i])\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[T];\n}\nint Dfs(int u,int flow)\n{\n\tif(u==T || !flow) return flow;\n\tint used=0;\n\tfor(int i=cur[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(dep[v]==dep[u]+1 && w[i])\n\t\t{\n\t\t\tint fl=Dfs(v,min(flow,w[i]));\n\t\t\tif(fl)\n\t\t\t{\n\t\t\t\tused+=fl;\n\t\t\t\tflow-=fl;\n\t\t\t\tw[i]-=fl;\n\t\t\t\tw[i^1]+=fl;\n\t\t\t\tif(!flow) break;\n\t\t\t}\n\t\t}\n\t}\n\treturn used;\n}\nint Dinic()\n{\n\tint sum=0;\n\twhile(Bfs())\n\t{\n\t\tmemcpy(cur,fst,sizeof(fst));\n\t\tsum+=Dfs(S,inf);\n\t}\n\treturn sum;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tS=65;\n\tT=90;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar x,y;\n\t\tint z;\n\t\tcin >> x >> y >> z;\n\t\tAddEdge(x,y,z);\n\t\tAddEdge(y,x,z);\n\t}\n\tint ans=Dinic();\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1542693637,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053\u697c\u4e0b\u7684ISAP\u51fa\u73b0\u4ec0\u4e48\u95ee\u9898\u4f7f\u5f97bfs\u7684\u8ddd\u79bbd\u6570\u7ec4\u7206\u4e86\uff0c\u53cd\u6b63\u6211\u662f\u627e\u7740\u6a21\u677f\u6253\u7684\uff0c\u6700\u540e\u8fc7\u4e86\u5c31\u662f\u4e86\u3002\n\n\n\u55ef\uff0c\u8bf4\u8bf4\u8fd9\u9898\u5427\uff0c\u9898\u76ee\u5c31\u662f\u8bf4\u7ed9\u51fa\u4e00\u5806\u5b57\u6bcd\u6807\u53f7\u7684\u6c34\u7ba1\uff0c\u8981\u6c42A\u5230Z\u7684\u6700\u5927\u6d41\u91cf\uff0c\u6c34\u7ba1\u7684\u5b57\u6bcd\u6807\u53f7\u4e5f\u6709\u53ef\u80fd\u662f\u5c0f\u5199\u7684\u54df\u3002\n\n\n\u7136\u540e\u76f4\u63a5\u5c06\u8bfb\u5230\u7684\u5b57\u6bcd\u7684ASCII\u7801\u503c\u51cf\u53bb64\uff0c\u5efa\u4e2a\u56fe\uff0c\u8dd1\u4e2a\u6700\u5927\u6d41\u5c31\u884c\u4e86\u3002\n\n\n\u6211\u539f\u672c\u4e5f\u662fDinic\u515a\uff0c\u4f46\u8ba4\u771f\u5b66\u4e86ISAP\u540e\uff0c\u89c9\u5f97\u4e5f\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u4f46\u6bd4Dinic\u5feb\u4e86\u4e0d\u5c11\uff0c\u5efa\u8bae\u5927\u5bb6\u90fd\u80fd\u5b66\u5b66\uff0c\u4e07\u4e00\u8003\u8bd5\u7684\u65f6\u5019\u5361\u4e86\u90a3\u4e2a\u5e38\u6570\u5462\uff1f\n\n\nISAP\u7684\u5177\u4f53\u539f\u7406\u4e00\u53e5\u4e24\u53e5\u4e5f\u4e0d\u597d\u8bf4\uff0c\u5927\u5bb6\u770b\u770b\u7a0b\u5e8f\u7684\u6ce8\u91ca\u5427\uff0c\u5e94\u8be5\u8bf4\u4e0d\u662f\u5f88\u96be\u7406\u89e3\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\nusing namespace std;\nconst int M=888;\nconst int INF=0x3f3f3f3f;\nint n,EdgeCnt=0,S,T;\nstruct Edge{\n    int to,cap,next;\n}e[M*2];\nint a[M],d[M],num[M],cur[M],fa[M];\nqueue<int> Q;\nvoid addedge(int u,int v,int w){\n    int &p=EdgeCnt;\n    e[p].to=v;e[p].cap=w;e[p].next=a[u];\n    a[u]=p++;\n}\nvoid BFS(){\n    for (int i=1;i<=80;i++)d[i]=52;//\u4e00\u5171\u5c3152\u4e2a\u70b9\uff0c\u6240\u4ee5\u6700\u5927\u8ddd\u79bb\u4e0d\u4f1a\u8d85\u8fc752\n    Q.push(T);d[T]=0;\n    while (!Q.empty()){\n        int u=Q.front();Q.pop();\n        for (int p=a[u];p!=-1;p=e[p].next){\n            int v=e[p].to;\n            if (e[p^1].cap && d[v]>d[u]+1){//\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u4ece\u6c47\u70b9\u5f00\u59cb\u5012\u7740bfs\u7684\uff0c\u6240\u4ee5\u5f53\u524d\u7684\u8fb9\u662f\u53cd\u5411\u5f27\uff0c\u5fc5\u987b\u8981p^1\u5207\u6362\u5230\u6b63\u5411\u8fb9\n                d[v]=d[u]+1;\n                Q.push(v);\n            }\n        }\n    }\n}\nint Augment(){\n    int u=T,f=INF;\n    while (u!=S){\n        u=fa[u];\n        f=min(f,e[cur[u]].cap);\n    }\n    u=T;\n    while (u!=S){\n        u=fa[u];\n        e[cur[u]].cap-=f;\n        e[cur[u]^1].cap+=f;\n    }\n    return f;\n```\n}//\u589e\u5e7f\uff0c\u5c31\u4e0d\u7528\u89e3\u91ca\u4e86\u5427\uff1f\n```cpp\nint MaxFlow(){\n    memset(num,0,sizeof(num));\n    BFS();//\u9884\u5904\u7406\u7b2c\u4e00\u6b21\u7684\u8ddd\u79bb\u6807\u53f7\n    for (int i=1;i<=80;i++)num[d[i]]++,cur[i]=a[i];\n    int u=S,flow=0;\n    while (d[S]<52){//\u65e2\u7136\u90fd\u4e3a\u4e86\u65f6\u95f4\u5feb\uff0c\u5199ISAP\u4e86\uff0c\u5e72\u8106\u5199\u6210\u975e\u9012\u5f52\u7684\n        if (u==T){\n            flow+=Augment();u=S;//\u8d70\u5230\u6c47\u70b9\u4e86\uff0c\u589e\u5e7f\uff0c\u5728\u56de\u5230\u6e90\u70b9\n        }\n        bool done=false;//\u662f\u5426\u524d\u8fdb\u7684\u6807\u5fd7\n        for (int p=cur[u];p!=-1;p=e[p].next){\n            int v=e[p].to;\n            if (e[p].cap && d[u]==d[v]+1){\n                fa[v]=u;cur[u]=p;//cur\u4e0efa\u7c7b\u4f3c\u9012\u5f52\u65f6\u7684\u6808\u4fdd\u5b58\u5f53\u524d\u9009\u62e9\u4e86\u90a3\u6761\u8fb9\uff0c\u56de\u6eaf\u65f6\u5c31\u4e0d\u4f1a\u8d70\u91cd\u590d\u7684\u8def\n                u=v;done=true;//\u524d\u8fdb\n                break;\n            }\n        }\n        if (!done){\n            int m=51;\n            for (int p=a[u];p!=-1;p=e[p].next){\n                int v=e[p].to;\n                if (e[p].cap)m=min(m,d[v]);\n```\n}//\u53d6\u6d88Dinic\u7684\u4e00\u6b21\u6027bfs\u4fee\u6539d\u6570\u7ec4\uff0c\u800c\u662f\u56de\u6eaf\u65f6\u76f4\u63a5\u4ece\u6240\u6709\u4ed6\u7684\u540e\u7ee7\u72b6\u6001\u76f4\u63a5\u8f6c\u79fb\u4e00\u4e2a\u6700\u77ed\u8def\u8fc7\u6765\nif (--num[d[u]]==0)break;//gap\u4f18\u5316\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u5c31\u662f\u4e2d\u95f4\u4e00\u4e2a\u8ddd\u79bb\u72b6\u6001\u4e3a\u7a7a\u4e86\uff0c\u6240\u4ee5\u6e90\u70b9\u4e0e\u6c47\u70b9\u4e00\u5b9a\u4e0d\u8fde\u901a\n\n```cpp\n            num[d[u]=m+1]++;\n            cur[u]=a[u];\n            if (u!=S)u=fa[u];//\u56de\u6eaf\n        }\n    }\n    return flow;\n}\nint main(){\n    scanf(\"%d\",&n);\n    S=1;T=26;\n    memset(a,0xff,sizeof(a));\n    for (int i=1;i<=n;i++){\n        char tu,tv;int u,v,w;\n        scanf(\"\\n%c %c %d\",&tu,&tv,&w);\n        u=tu-64;v=tv-64; \n        addedge(u,v,w);\n        addedge(v,u,0);//\u6b63\u53cd\u5411\u5efa\u56fe\n    }\n    printf(\"%d\",MaxFlow());\n    return 0;\n}\n```",
        "postTime": 1503565576,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u7f51\u7edc\u6d41\u6700\u5927\u6d41\u6a21\u677f\n\n\u9898\u76ee\u5f88\u53cb\u5584\uff0c\u751a\u81f3\u6c34\u7ba1\u7ed9\u7684\u90fd\u662f\u6709\u5411\u7684\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\nFord\\_Fulkerson\u7b97\u6cd5\uff08\u589e\u5e7f\u8def\uff09\uff1a\n\n\u6bcf\u6b21\u4f5c\u51fa\u539f\u56fe\u7684\u6b8b\u91cf\u7f51\u7edc\uff0c\u7136\u540e\u6cbf\u7740\u4e00\u6761\u53ef\u4ee5\u5230\u8fbe\u6c47\u70b9\u7684\u8def\u5f84\uff0c\u5c06\u8def\u5f84\u4e0a\u6240\u6709\u7684\u70b9\u7684\u6d41\u503c\u52a0\u4e0a\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u5141\u8bb8\u6d41\u91cf\n\n\u77e5\u9053\u627e\u4e0d\u5230\u8fd9\u6837\u4e00\u6761\u589e\u5e7f\u8def\u4e3a\u6b62\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cctype>\nusing namespace std;\nconst int maxn=60,maxe=1500,INF=2000000000,S=0,T=25;\nbool vis[maxn];\nint read()                                         //\u8bfb\u5165\u4f18\u5316\n{\n    int out=0;\n    char c=getchar();\n    while(c<48||c>57) c=getchar();\n    while(c>=48&&c<=57)\n    {\n        out=out*10+c-48;\n        c=getchar();\n    }\n    return out;\n}\ninline int code(char c)                                      //\u5b57\u7b26\u8f6c\u5316\u6574\u578b\n{\n    return c>='a' ? c-'a'+26:c-'A';\n}\nint head[maxn],nedge=0;\nclass EDGE                                          //\u94fe\u5f0f\u524d\u5411\u661f\u6784\u56fe\n{\n```\npublic:\n\n\n\n\n```cpp\n        int to,f,next;\n}edge[maxe];\nvoid build(int a,int b,int w)\n{\n    edge[nedge]=(EDGE){b,w,head[a]};\n    head[a]=nedge++;\n    edge[nedge]=(EDGE){a,0,head[b]};\n    head[b]=nedge++;\n}\nint dfs(int u,int minf)                                                 //\u6df1\u641c\u627e\u589e\u5e7f\u8def\n{\n    if(u==T)\n        return minf;\n    vis[u]=true;\n    int d;\n    for(int k=head[u];k!=-1;k=edge[k].next)\n    {\n        if(!vis[edge[k].to]&&edge[k].f)\n        {\n            d=dfs(edge[k].to,min(minf,edge[k].f));\n            if(d>0)\n            {\n                edge[k].f-=d;\n                edge[k^1].f+=d;                                                       //\u53cd\u56fe\n                return d;\n            }\n        }\n    }\n    return 0;\n}\nint flow_max()                                                      //\u6700\u5927\u6d41\u7b97\u6cd5\n{\n    int ans=0,f=INF;\n    while(f)\n    {\n        fill(vis,vis+maxn,false);\n        f=INF;\n        f=dfs(S,f);\n        ans+=f;\n    }\n    return ans;\n}\nint main()\n{\n    fill(head,head+maxn,-1);\n    int N=read(),x;\n    char a,b;\n    while(N--)\n    {\n        a=getchar();\n        while(!isalpha(a)) a=getchar();\n        b=getchar();\n        while(!isalpha(b)) b=getchar();\n        x=read();\n        build(code(a),code(b),x);\n    }\n    cout<<flow_max()<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1491473212,
        "uid": 32842,
        "name": "Mychael",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd9\u9053~~\u7ecf\u5178\u7684\u7f51\u7edc\u6d41\u88f8\u9898~~\uff0c\u6211\u6beb\u4e0d\u72b9\u8c6b\u7684\u4f7f\u7528**EK\u7b97\u6cd5**A\u6389\u4e86\u5b83\uff0c\u9898\u89e3\u533a\u768412\u7bc7\u9898\u89e3\u8c8c\u4f3c\u8fd8\u6ca1\u6709\u7528EK\u505a\u7684\uff0c\u90a3\u4e48\u6211\u5c31\u6765\u5199\u4e00\u7bc7\u9898\u89e3\u5e2e\u52a9\u50cf\u6211\u4e00\u6837\u521a\u5b66\u7f51\u7edc\u6d41\u7684\u5c0f\u767d\u6765\u4e86\u89e3**\u6700\u5927\u6d41\u95ee\u9898\u7684EK\u505a\u6cd5**\u5427\uff01\n\n- \u5148\u6765\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7531\u6765\u5427\uff01\n\nEK\u7b97\u6cd5\u5168\u79f0 _Edmonds-Karp_ \u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u6700\u521d\u7531 _Yefim Dinitz_ \u4e8e1970\u5e74\u51fa\u7248\uff0c\u5e76\u7531 _Jack Edmonds_ \u548c _Richard Kar_ p\u4e8e1972\u5e74\u72ec\u7acb\u51fa\u7248\u3002\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d _Edmonds-Karp_ \u7b97\u6cd5\u662f\u7528\u4e8e**\u8ba1\u7b97\u6d41\u7f51\u7edc\u4e2d\u7684\u6700\u5927\u6d41\u91cf**\u7684 _Ford-Fulkerson_ \u65b9\u6cd5\u7684\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f**O(VE\u00b2)**.\n\n- \u7b97\u6cd5\u5b9e\u73b0\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5b9e\u8d28\u5176\u5b9e\u5c31\u662f**\u4e0d\u505c\u7684\u8fdb\u884cBFS**\uff0c\u627e\u589e\u5e7f\u8def\uff0c\u5e76\u66f4\u65b0\uff0c\u76f4\u5230\u627e\u4e0d\u5230\u8def\u5f84\uff0c\u6d41\u91cf\u65e0\u6cd5\u518d\u589e\u52a0\u65f6\u5c31\u7ed3\u675f\u4e86\u3002\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u4e00\u6b21BFS\u627e\u5230\u7684\u8def\u5f84\u5e76\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u51b3\u7b56\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u7ed9\u81ea\u5df1\u7559\u6709**\u53cd\u6094**\u7684\u4f59\u5730\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u53cc\u5411\u5b58\u56fe\uff0c\u5728\u7b2c\u4e00\u6b21\u627e\u5230\u589e\u5e7f\u8def\u4e4b\u540e\uff0c\u5728**\u628a\u8def\u4e0a\u6bcf\u4e00\u6bb5\u7684\u5bb9\u91cf\u51cf\u5c11flow\u7684\u540c\u65f6\uff0c\u4e5f\u628a\u6bcf\u4e00\u6bb5\u4e0a\u7684\u53cd\u65b9\u5411\u7684\u5bb9\u91cf\u589e\u52a0flow\u3002**\n\n\u90a3\u4e48\u8bdd\u4e0d\u591a\u8bf4\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u6ce8\u91ca\u4ee3\u7801\n-\n```cpp\nint cnt=1;//\u91cd\u4e2d\u4e4b\u91cd\uff0c\u4e0d\u7136\u4f60\u4f1a\u4ec0\u4e48\u4e5f\u5f97\u4e0d\u5230\nsigned main()\n{\n\tn=read(),m=read(),s=read(),t=read();//n\u4e3a\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0cs\uff0ct\u4e3a\u8d77\u70b9\u7ec8\u70b9\n\tint x,y,z;\n\tfor(fint i=1;i<=m;i++)\n\tx=read(),y=read(),z=read(),adds(x,y,z);\n\twhile(EK(s,t))\n\taddup(t);//\u4e0d\u505c\u7684\u8fdb\u884cbfs\n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n\ninline void adds(int u,int v,int w)\n{\n\te[++cnt].to=v;\n\te[cnt].val=w;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n\te[++cnt].to=u;\n\te[cnt].val=0;//\u6ce8\u610f\u53cd\u5411\u56fe\u6d41\u91cf\u521d\u59cb\u4e3a0\n\te[cnt].next=head[v];\n\thead[v]=cnt;\n\treturn ;\n}//\u94fe\u5f0f\u524d\u5411\u661f\u53cc\u5411\u5b58\u56fe\u5927\u6cd5\n\ninline int EK(int s,int t)\n{\n\tqueue <int>q;\n\tmemset(vis,0,sizeof(vis));\n\tvis[s]=1,dis[s]=inf;//vis\u6807\u8bb0\u8bbf\u95ee\uff0cdis\u4e3a\u8fb9\u4e0a\u7684\u6d41\u91cf\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint hea=q.front();\n\t\tq.pop();\n\t\tfor(fint i=head[hea];i;i=e[i].next)//BFS\n\t\t\tif(e[i].val)//\u6709\u6d41\u91cf\u65f6\u624d\u53ef\u641c\u54e6\n\t\t\t{\n\t\t\t\tif(!vis[e[i].to])\n\t\t\t\tdis[e[i].to]=min(dis[hea],e[i].val),pre[e[i].to]=i,vis[e[i].to]=1,q.push(e[i].to);//\u8fd9\u91cc\u8bb0\u5f97\u66f4\u65b0\u524d\u9a71\u8282\u70b9pre\u6570\u7ec4\uff0c\u4e00\u4f1a\u6709\u7528\n\t\t\t\tif(e[i].to==t)\n\t\t\t\treturn 1;\u82e5\u641c\u5230\u4e86\u6c47\u70b9\uff0cbfs\u6210\u529f\uff0c\u53ef\u4ee5\u66f4\u65b0\u4e86\n\t\t\t}\n\t}\n\treturn 0;//bfs\u5931\u8d25\uff0c\u5373\u5df2\u7ecf\u6ca1\u6709\u53ef\u66f4\u65b0\u7684\u6d41\u91cf\n}\n\ninline void addup(int x)\n{\n\twhile(x!=s)//\u53cd\u5411\u64cd\u4f5c\n\t{\n\t\te[pre[x]].val-=dis[t];\n\t\te[pre[x]^1].val+=dis[t];//\u6b63\u51cf\u53cd\u52a0\n\t\tx=e[pre[x]^1].to;\n\t}\n\tans+=dis[t];//\u7d2f\u52a0\u6700\u5927\u6d41\n\treturn ;\n}\n```\n\u540e\u6392\u63d0\u793a\uff0c\u6b64\u4ee3\u7801**\u5e76\u975e**\u8fd9\u9053\u9898\u7684AC\u4ee3\u7801\uff0c\u800c\u662f[\u8fd9\u9053](https://www.luogu.com.cn/problem/P3376)\u4e0d\u8981\u8111\u5b50\u4e00\u70ed\u6284\u4e0a\u53bb\u4e86\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u9700\u8981\u5728~~\u5c06\u77e5\u8bc6\u8fc1\u79fb\u8fd0\u7528~~\u65f6\u6ce8\u610f\uff1a\n```\n2019.2.21 \u7ba1\u7406\u5458\u6ce8\uff1a\u8f93\u5165\u6570\u636e\u4e2d\u53ef\u80fd\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002\n```\n\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u5c06A-Z,a-z\u8f6c\u5316\u4e3a\u6570\u5b57\uff08\u5176\u5b9e\u4e0d\u8f6c\u6362\u4e5f\u4e0d\u662f\u4e0d\u884c\uff0c\u53ea\u662f\u9ebb\u70e6\u70b9\u7f62\u4e86\uff09\n\n\u6839\u636e\u6211\u4eec\u719f\u6089\u7684ASCII\u7801\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u8fd9\u6bb5\u4ee3\u7801\uff1a\n```cpp\nfor(fint i=1;i<=n;i++)\n\tcin>>a>>b,c=read(),aa=a-64,bb=b-64,adds(aa,bb,c);\n```\n\u90a3\u4e48\u8fd9\u9053\u9898\u4fbf\u7ed3\u675f\u4e86\uff0c\u540c\u65f6P3376\u7684~~\u53cc\u500d\u7ecf\u9a8c\u4e5f\u62ff\u4e86~~\uff0c\u8c22\u8c22\u5927\u5bb6\u7684\u6d4f\u89c8\uff01",
        "postTime": 1587809647,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "Total Flow S\u7684\u7b2c\u4e00\u7bc7EK\u9898\u89e3"
    },
    {
        "content": "> \u7f51\u7edc\u6700\u5927\u6d41\u7684\u6a21\u677f\u9898\n>\n> \u8dd1\u4e00\u904d\u6700\u5927\u6d41\u7684\u6a21\u677f\u5c31\u597d\u7684\n>\n> \u5177\u4f53\u770b\u4ee3\u7801\n>\n> \u6ce8\u91ca\u6709\u8bb2\u89e3\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<iostream>\nusing namespace std;\n\nconst int N = 1000 + 10;\nint s, t, n, m, tot, maxflow;//s:\u6e90\u70b9,t\u6c47\u70b9, maxflow\u6700\u5927\u6d41\u91cf\nint head[N], pre[N], d[N];//head\u6570\u7ec4\u90bb\u63a5\u8868\u5b58\u8fb9,pre\u8bb0\u5f55\u5206\u5c42\u56fe\u7684\u70b9,d\u62ff\u6765\u5206\u5c42\nstruct node {\n\tint from, to, dis;//from\u8bb0\u5f55\u4ece\u8d77\u70b9,to\u8bb0\u5f55\u7ec8\u70b9,dis\u8bb0\u5f55\u5bb9\u91cf\n\tint nxt, op;//nxt\u4e0b\u4e00\u4e2a,op\u53cd\u5411\u8fb9\n}e[N];\n\nvoid add(int x, int y, int z) {//\u90bb\u63a5\u8868\u52a0\u8fb9\n\t//\u6b63\u5411\u52a0\u8fb9\n\ttot++;\n\te[tot].from = x;\n\te[tot].to = y;\n\te[tot].dis = z;\n\te[tot].nxt = head[x];\n\thead[x] = tot;\n\te[tot].op = tot + 1;\n    //\u53cd\u5411\u5b58\u8fb9\n\ttot++;\n\te[tot].from = y;\n\te[tot].to = x;\n\te[tot].dis = 0;//\u6ce8\u610f\u5bb9\u91cf\u4e3a0\n\te[tot].nxt = head[y];\n\thead[y] = tot;\n\te[tot].op = tot - 1;\n}\n\nbool found() {//\u5bfb\u627e\u53ef\u589e\u5e7f\u8def\n\tmemset(d, 0x77, sizeof(d));//\u76f8\u5f53\u4e8e\u7ed9d\u6570\u7ec4\u7f6eINF\n\td[s] = 0;\n\tqueue<int > q;\n\tq.push(s);//\u4ece\u8d77\u70b9\u5f00\u59cb\n\twhile(!q.empty()) {\n\t\tint lin = q.front();\n\t\tint now = head[lin];\n\t\twhile(now != -1) {//\u8fd8\u6709\u8fb9\n\t\t\tif(e[now].dis > 0 && d[e[now].from] + 1 < d[e[now].to]) {\n\t\t\t\td[e[now].to] = d[e[now].from] + 1;//\u5206\u5c42\n\t\t\t\tpre[e[now].to] = now;//\u8bb0\u5f55\u7ecf\u8fc7\u7684\u70b9\n\t\t\t\tq.push(e[now].to);\n\t\t\t\tif(e[now].to == t) return true;//\u8fd8\u5b58\u5728\u53ef\u589e\u5e7f\u8def\n\t\t\t}\n\t\t\tnow = e[now].nxt;\n\t\t}\n\t\tq.pop();\n\t}\n\treturn false;\n}\n\t\nvoid augment() {\n\tint p;//\u6c42\u6bcf\u4e00\u6761\u589e\u5e7f\u8def\u7684\u6d41\u91cf\n\tp = t;\n\tint flow = 100000000;\n\twhile(p != s) {\n\t\tflow = min(e[pre[p]].dis, flow);//\u589e\u5e7f\u8def\u7684\u6d41\u91cf\u7531\u6700\u5c0f\u5bb9\u91cf\u51b3\u5b9a\n\t\tp = e[pre[p]].from;\n\t}\n\tmaxflow += flow;//\u6700\u5927\u6d41\u52a0\u4e0a\u672c\u6b21\u6d41\u91cf\n\tp = t;\n\twhile(p != s) {\n\t\te[pre[p]].dis -= flow;//\u8def\u5f84\u51cf\u53bb\u5bb9\u91cf\n\t\te[e[pre[p]].op].dis = flow;\n\t\tp = e[pre[p]].from;\n\t}\n}\n\nint main() {\n\tint i, j, k;\n\tcin >> m;\n\ts = int('A');//\u4eceA\u51fa\u53d1\n\tt = int('Z');//\u5230Z\u7ed3\u675f\n\tmemset(head, -1, sizeof(head));//head\u6570\u7ec4\u7f6e-1\n\tfor(i = 1; i <= m; i++) {\n\t\tchar x, y;\n\t\tint z;\n\t\tcin >> x >> y >> z;\n\t\tadd(int(x), int(y), z);//\u70b9\u7528\u5b83\u7684ASCII\u7801\u8868\u793a\uff0c\u6ce8\u610f\u5f3a\u5236\u8f6c\u6362\n\t}\n\twhile(found()) augment();//\u8fd8\u6709\u53ef\u589e\u5e7f\u8def\n\tcout << maxflow << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1542207129,
        "uid": 56583,
        "name": "a2920353120",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u5e76\u6ca1\u6709\u53d1\u73b0\u6709\u54ea\u4e00\u7bc7\u9898\u89e3\u65b9\u4fbf\u98df\u7528\n\n\n\u5176\u5b9e\u8fd9\u662f\u4e00\u4e2a\u6700\u5927\u6d41\u6a21\u677f\u9898\u76ee\n\n\n\u5e26\u6709\u4e09\u4e2a\u4f18\u5316\u7684Dinic\n\n1\u3001\u5f53\u524d\u5f27\u4f18\u5316\uff0c\u8bbf\u95ee\u8fd9\u4e2a\u70b9\u7684\u51fa\u8fb9\u65f6\uff0c\u4ece\u4e0a\u4e00\u6b21\u8bbf\u95ee\u7684\u4e0b\u4e00\u6761\u8fb9\u5f00\u59cb\n\n2\u3001\u5f53\u589e\u5e7f\u5230\u67d0\u4e2a\u70b9\u65f6\uff0c\u589e\u5e7f\u8fc7\u7a0b\u4e2d\uff0c\u5df2\u51fa\u53bb\u7684\u6d41\u91cf==\u8fdb\u6765\u7684\uff0c\u505c\u6b62\u589e\u5e7f\uff1b\u589e\u5e7f\u5b8c\u6bd5\u65f6\uff0c\u51fa\u53bb\u7684\u6d41\u91cf<\u8fdb\u6765\u7684\u6d41\u91cf\uff0c\u6807\u8bb0\u8fd9\u4e2a\u70b9\uff0c\u4ee5\u540e\u4e0d\u518d\u8bbf\u95ee\u6b64\u70b9\n\n3\u3001\u5206\u5c42\u65f6\uff0c\u627e\u5230\u6c47\u70b9\u540e\u5373\u523breturn\uff0c\u4e0d\u8981\u7b49\u5230\u961f\u5217\u4e3a\u7a7a\n\nDinic\u6709\u6b64\u4e09\u4e2a\u4f18\u5316\uff0c\u8db3\u4ee5\u4e0d\u5b66\u5176\u4ed6\u7b97\u6cd5\uff08By XXY\uff09\n\nxxy dalao \u535a\u5ba2\n\n\n> #include <iostream>\n```cpp\nhttp://www.cnblogs.com/TheRoadToTheGold/p/6502767.html\n#include <cstdio>\n#include <queue>\n#define inf 0x3fffffff\n#define min(x,y) (x<y)?(x):(y)\n#define N 701\n#define M 101\nint n,head[M],cnt[M],lev[M];\nint src,decc,tot=1;\nstruct Edge{\n    int v,w,nxt;\n}edge[N<<1];\ninline int read()\n{\n    int n=0,w=1;register char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c<='9'&&c>='0')n=n*10+c-'0',c=getchar();\n    return n*w;\n}\ninline void add(int u,int v,int w)\n{\n    edge[++tot].v=v;\n    edge[tot].w=w;\n    edge[tot].nxt=head[u];\n    head[u]=tot;\n    return ;\n}\ninline void add_(int u,int v)\n{\n    edge[++tot].v=u;\n    edge[tot].w=0;\n    edge[tot].nxt=head[v];\n    head[v]=tot;\n    return ;\n}\nstd::queue<int> que;\ninline bool bfs()\n{\n    for(int i=0;i<=100;++i)\n```\n{//\u5f53\u524d\u5f27\u4f18\u5316\n```cpp\n        cnt[i]=head[i];\n        lev[i]=-1;\n    }\n    while(!que.empty())que.pop();\n    que.push(src);lev[src]=0;\n    while(!que.empty())\n    {\n        int now=que.front();que.pop();\n        for(int i=head[now];i;i=edge[i].nxt)\n        {\n            int t=edge[i].v;\n            if(lev[t]==-1&&edge[i].w>0)\n            {\n                que.push(t);\n                lev[t]=lev[now]+1;\n                if(t==decc)return true;\n```\n}//\u4f18\u53163\n```cpp\n        }\n    }\n    return false;\n}\nint dinic(int now,int flow)\n{\n    int delta,rest=0;\n    if(now==decc)return flow;\n    for(int &i=cnt[now];i;i=edge[i].nxt)\n    {\n        int t=edge[i].v;\n        if(lev[t]==lev[now]+1&&edge[i].w>0)\n        {\n            delta=dinic(t,min(edge[i].w,flow-rest));\n            if(delta)\n            {\n                edge[i].w-=delta;\n                edge[i^1].w+=delta;\n                rest+=delta;\n                if(rest==flow)break;\n```\n}//\u4f18\u53162\n```cpp\n        }\n    }\n    if(rest!=flow)lev[now]=-1;\n    return rest;\n}\nint main()\n{\n    n=read();\n    src=1,decc=26;\n    char c;\n    for(int x,y,z,i=0;i<n;++i)\n    {\n         c=0;\n        while((c<'A'||c>'Z')&&(c<'a'||c>'z'))c=getchar();\n        x=c-'A'+1;\n        c=0;\n        while((c<'A'||c>'Z')&&(c<'a'||c>'z'))c=getchar();\n        y=c-'A'+1;\n        z=read();\n        add(x,y,z);add_(x,y);\n    }\n    int ans=0;\n    while(bfs())\n        ans+=dinic(src,inf);\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\u53e6\uff1a\u53ef\u80fd\u6709\u4eba\u53d1\u73b0\u6211\u7684\u4ee3\u7801\u5f00\u5934\u6ca1\u6709using namespace std;\n\u7b97\u662f\u5c0f\u6280\u5de7\u2026\u2026\u8003\u573a\u4e0a\u9762\u4e0d\u52a0\u8fd9\u4e00\u53e5\u8bdd\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u53d8\u91cf\u91cd\u540d\u5bfc\u81f4\u7684CE\n\n\u7528STL\u7684\u65f6\u5019\u5728\u524d\u9762\u52a0\u4e0astd::\u5c31\u597d\u4e86\uff0c\u4e5f\u4e0d\u662f\u5f88\u9ebb\u70e6\n",
        "postTime": 1514467014,
        "uid": 39864,
        "name": "\u4e0d\u4e89\u4e0d\u95f9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u55ef\uff0c\u5176\u5b9e\u5c31\u662f\u6700\u591a26\\*2\u4e2a\u6c34\u7ba1\u7ec4\u6210\u7684\u7f51\u7edc\uff0c\u539f\u70b9A\uff0c\u6c47\u70b9Z\uff0c\u7136\u540e\u8dd1\u4e00\u904ddinic  without\u4efb\u4f55\u4f18\u5316\n\n#\u6ce8\u610f\n\n- \u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\n\n- \u6c34\u7ba1\u8fde\u63a5\u53ef\u80fd\u6709\u91cd\u590d\uff0c\u6bd4\u5982\uff08\u6d4b\u8bd5\u70b92\u8f93\u51fa\u7b2c\u67d0\u884c\uff09  A B 121  A B 112 \u6240\u4ee5\u6700\u7ec8A\u4e0eB\u4e4b\u95f4\u7684\u5bb9\u91cf\u662f233\u3002\u6240\u4ee5\u8fde\u8fb9\u7684\u65f6\u5019\u6ce8\u610f\u8981\u76f8\u52a0\n\n\n\u849f\u84bb\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<string.h>\n#define MA 5200\nint edge[256][256],m,dl[333],dis[333];\nusing namespace std;\nint minn(int a,int b){return a>b?b:a;}\nint BFS()\n{\n    int g=0,r=1;memset(dis,0xff,sizeof(dis));\n    dl[g]='A';dis['A']=0;\n    while(g!=r)\n    {\n        for(int i='A';i<='z';i++)\n        {\n            if(edge[dl[g]][i]>0&&dis[i]<0)\n            {\n                dis[i]=dis[dl[g]]+1;\n                dl[r++]=i;\n            }\n        }\n        g++;\n    }\n    return dis['Z']>0;\n}\nint DFS(int now,int mins)\n{\n    int a=0;\n    if(now=='Z')return mins;\n    for(int i='A';i<='z';i++)\n    if(edge[now][i]>0&&dis[now]+1==dis[i])\n    if(a=DFS(i,minn(mins,edge[now][i])))\n    {\n        edge[now][i]-=a;\n        edge[i][now]+=a;\n        return a;\n    }\n    return 0;\n}\nint main()\n{\n    scanf(\"%d\",&m);\n    char a,b;\n    int k=0;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>a>>b>>k;\n        edge[a][b]+=k;\n        edge[b][a]+=k;\n    }\n    int ans=0,jl=0;\n    while(BFS())\n        while(jl=DFS('A',23333333)){ans+=jl;}\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\u8d2a\u56fe\u7b80\u6d01\u7684\u4ee3\u7801\uff0c\u54c8\u54c8\u3002\n\n\n##\u9898\u5916\u8bdd\uff1a\u6700\u540e\u63a8\u5e7f\u4e0b\u6211\u4eec\u7684Dodou\n\n[Dodou](http://dodou.hicasper.com)\n",
        "postTime": 1503732080,
        "uid": 31454,
        "name": "\u5361\u8f66cckk",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u6700\u5927\u6d41\u6a21\u677f\u9898\uff0c\u663e\u800c\u6613\u89c1\uff0cdinic\u7684\u786e\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u8fd9\u4e48\u6297\u62d2isap\u5462\uff0cisap\u5927\u6cd5\u597d\u3002\n\n\u8fd9\u9053\u9898\u7684\u7b2c\u4e03\u4e2a\u70b9\u610f\u5916\u5730\u7206\u4e86isap\u7684\u53cd\u5411\u641c\u7d22\u9884\u5904\u7406\u8ddd\u79bb\u6570\u7ec4\uff0c\u4f46\u662fisap\u8fd9\u79cd\u9ad8\u5ea6\u6a21(bao)\u5757(li)\u5316\u7684\u7b97\u6cd5\u600e\u4e48\u4e0d\u80fd\u7075\u6d3b\u8fd0\u7528\u5462\uff0c\u65e2\u7136\u9488\u5bf9\u6700\u77ed\u8def\u589e\u5e7f\uff0c\u6211\u4eec\u5c31\u628ad\u6570\u7ec4\u53bb\u6389\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u53ef\u884c\u6d41\u5f3a\u884c\u589e\u5e7f\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u9000\u5316\u6210\u4e86O( f\u22c5\u2223E\u2223) \uff0c\u7ed3\u679c\u8fd9\u4e2a\u9898\u7684\u6700\u5927\u6d41f\u7279\u522b\u5c0f\uff0c\u5c31\u76f4\u63a5\u79d2\u4e86\u3002\n\n\u4e00\u4e9b\u7ec6\u8282\u8fd8\u9700\u8981\u770b\u4ee3\u7801\uff0c\u52a0\u8fb9\u4ec0\u4e48\u7684\u2026\u2026\u5509\n\n```cpp\n#include<stdio.h>\n#include<iostream>\n#include<string.h>\n#include<queue>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int maxn=10001;\nconst int inf=0x3f3f3f3f;\nint read()\n{\n    int x=0;char c=getchar();\n    while(c<48||c>57)c=getchar();\n    while(c>47&&c<58)x*=10,x+=c-48,c=getchar();\n    return x;\n}\nstruct edge{int from,to,cap,flow;};\nstruct isap\n{\n    int n,s,t,p[maxn],d[maxn],cur[maxn],num[maxn];\n    bool vis[maxn];\n    vector<int>g[maxn];\n    vector<edge>edges;\n    void init(int n,int s,int t)\n    {\n        this->n=n;\n        this->s=s;\n        this->t=t;\n        for(int i=1;i<=n;i++) g[i].clear();\n        edges.clear();\n    }\n    void addegde(int from,int to,int cap)\n    {\n        edges.push_back((edge){from,to,cap,0});\n        edges.push_back((edge){to,from,0,0});\n        int m=edges.size();\n        g[from].push_back(m-2);\n        g[to].push_back(m-1);\n    }\n    \n    int augment()\n    {\n        int x=t,a=inf;\n        while(x!=s)\n        {\n            a=min(a,edges[p[x]].cap-edges[p[x]].flow);\n            x=edges[p[x]].from;\n        }\n        x=t;\n        while(x!=s)\n        {\n            edges[p[x]].flow+=a;\n            edges[p[x]^1].flow =-a;\n            x=edges[p[x]].from;\n        }\n        return a;\n    }\n    int maxflow()\n    {\n        int flow=0;\n        memset(num,0,sizeof(num));\n        memset(cur,0,sizeof(cur));\n        for(int i=1;i<=n;i++) num[d[i]]++;\n        int x=s;\n        while(d[s]<n)\n        {\n            if(x==t)\n            {\n            flow+=augment();\n            x=s;    \n            }\n            bool ok=0;\n            for(int i=cur[x];i<g[x].size();i++)\n            {\n                edge &e=edges[g[x][i]];\n                if(d[x]==d[e.to]+1&&e.cap>e.flow)\n                {\n                    p[e.to]=g[x][i];\n                    cur[x]=i;x=e.to;\n                    ok=1;\n                    break;\n                }\n            }\n            if(!ok)\n            {\n                int m=n-1;\n                for(int i=0;i<g[x].size();i++)\n                {\n                    edge &e=edges[g[x][i]];\n                    if(e.cap>e.flow) m=min(m,d[e.to]);\n                }\n                num[d[x]]--;\n                if(!num[d[x]]) break;\n                d[x]=m+1;\n                num[d[x]]++;\n                cur[x]=0;\n                if(x!=s) x=edges[p[x]].from;    \n            }\n        }\n        return flow;\n    }\n}ISAP;\ninline int get_in()\n{\n    char c;\n    cin>>c;\n    return (c<='Z'&&c>='A')?c-'A'+1:c-'a'+27; \n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    int n,m,s,t,u,v,w;\n    n=1000;\n    s=1,t=26;\n    cin>>m;\n    ISAP.init(n,s,t);\n    for(int i=1;i<=m;i++)\n    {\n        char c1,c2;\n        int c;\n        c1=get_in();\n        c2=get_in();\n        cin>>c;\n        ISAP.addegde(c1,c2,c);\n    }\n    cout<<ISAP.maxflow();\n    return 0;\n}\n```",
        "postTime": 1499435964,
        "uid": 22816,
        "name": "\u82ac\u7279",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u6b64\u9898\u5c31\u662f\u7f51\u7edc\u6d41\u6a21\u677f\uff0c\u5f88\u88f8\uff0cdinic\u968f\u4fbf\u8fc7\uff08\u5e76\u4e0d\u9700\u8981\u4ec0\u4e48\u4f18\u5316\uff0c\u7f29\u8fb9\u8fd9\u7c7b\u7684\u9b3c\u73a9\u610f\uff0c\u5c3d\u7ba1\u9898\u76ee\u6709\u8bf4\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nclass bigpig\n{\n    public:\n        void work()\n        {\n            while(bfs())\n                while(tot=dfs(start,1e9))ans+=tot;\n        }\n        void add(int x,int y,int v)\n        {\n            a[++tot].end=y,a[tot].val=v,a[tot].next=head[x],head[x]=tot;\n            a[++tot].end=x,a[tot].val=0,a[tot].next=head[y],head[y]=tot;\n        }\n        void updata(int s,int e)\n        {\n            start=s,end=e;\n        }\n        int extract(int k)\n        {\n            if(k==1)return start;\n            if(k==2)return end;\n            if(k==3)return ans;\n        }\n    private:\n        int bfs()\n        {\n            memset(dis,-1,sizeof(dis));\n            dis[start]=0;\n            while(!q.empty())q.pop();\n            q.push(start);\n            while(!q.empty())\n            {\n                int now=q.front();\n                q.pop();\n                for(int i=head[now];i;i=a[i].next)\n                    if(a[i].val>0 && dis[a[i].end]<0)\n                        dis[a[i].end]=dis[now]+1,q.push(a[i].end);\n            }\n            if(dis[end]>0)return 1;\n            else return 0;\n        }\n        int dfs(int now,int val)\n        {\n            if(now==end)return val;\n            for(int i=head[now],k;i;i=a[i].next)\n                if(a[i].val>0 && dis[a[i].end]==dis[now]+1 && (k=dfs(a[i].end,min(a[i].val,val))))\n                    {a[i].val-=k,a[i+1].val+=k;return k;}\n            dis[now]=-1;\n            return 0;\n        }\n        int start,end,tot,ans,dis[1005],head[1005];\n        queue<int>q;\n        struct smallpig\n        {\n            int end,next,val;\n        }a[2005];\n};\nbigpig flow;\nint n,start_,end_;\nchar a,b;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>n,start_=1,end_=26;\n    for(int i=1,x,y,z;i<=n;i++)\n        cin>>a>>b>>z,x=a-'A'+1,y=b-'A'+1,flow.add(x,y,z);\n    flow.updata(start_,end_);\n    flow.work();\n    cout<<flow.extract(3)<<endl;\n    return 0;\n}\n```\n\u597d\u5427\uff0c\u5c31\u8fd9\u6837\u3002\n",
        "postTime": 1496235111,
        "uid": 20564,
        "name": "\u963f\u5ed6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    },
    {
        "content": "\u672c\u4eba\u4eca\u5929\u521a\u521a\u5b66\u4f1a\u6700\u5927\u6d41\uff0c\u6b64\u9898\u611f\u89c9\u5b8c\u5168\u6ca1\u6709\u63d0\u9ad8+\u7684\u96be\u5ea6\uff0c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u6a21\u677f[\u6700\u5927\u6d41](https://www.luogu.org/problemnew/show/P3376)\uff0c\u6211\u7528\u4e86Dinic\u7b97\u6cd5\uff0c\u800c\u4e14\u672c\u9898\u6570\u636e\u5f88\u5c0f\uff0c\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\u5373\u53ef\u3002\n\n## \u6ce8\u610f\uff1a\u672c\u9898\u5927\u5c0f\u5199\u5b57\u6bcd\u5747\u5305\u62ec\u5728\u5185\uff01\uff01\n\n\n~~\u88ab\u5361\u4e86\u4e00\u6b2110\u5206~~\n\nDinic\u6a21\u677f\u7684\u4ee3\u7801   (AC\u672c\u9898\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int INF=99999999;\nqueue<int>q;\nint n,w[257][257],d[257];\ninline bool bfs()\n{\n\tmemset(d,0,sizeof(d));\n\td['A']=1;\n\tq.push('A');\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tfor(int i='A';i<='z';i++)   //\u4e00\u5b9a\u8981\u5230\u5c0f\u5199z\n\t\t\tif(w[now][i]>0&&d[i]==0)\n\t\t\t{\n\t\t\t\td[i]=d[now]+1;\n\t\t\t\tq.push(i);\n\t\t\t}\n\t}\n\treturn d['Z']!=0;\n}\nint dfs(int now,int dist)\n{\n\tif(now=='Z') return dist;\n\tfor(int i='A';i<='z';i++)  //\u540c\u4e0a\n\t\tif(d[i]==d[now]+1&&w[now][i]>0)\n\t\t{\n\t\t\tint x=dfs(i,min(dist,w[now][i]));\n\t\t\tif(x>0)\n\t\t\t{\n\t\t\t\tw[now][i]-=x;\n\t\t\t\tw[i][now]+=x;\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\treturn 0;\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar x,y;\n\t\tint z;\n\t\tcin>>x>>y>>z;\n\t\tw[x][y]+=z;\n\t}\n\tint ans=0;\n\twhile(bfs())\n\t{\n\t\twhile(int di=dfs('A',INF))\n\t\t\tans+=di;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1537631420,
        "uid": 43385,
        "name": "Infinity_shl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2936 \u3010[USACO09JAN]\u5168\u6d41Total Flow\u3011"
    }
]