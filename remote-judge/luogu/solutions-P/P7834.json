[
    {
        "content": "# _Kruskal \u91cd\u6784\u6811_\n\nupdated\uff1a\u611f\u8c22 @cyffff \u6307\u51fa\u9519\u8bef\n\n## \u524d\u8a00\n\n\u542c\u4e86 @[Wankupi](https://www.luogu.com.cn/user/128771) \u5b66\u957f\u8bb2\u4e86\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u4e8e\u662f\u5c31\u722c\u8fc7\u6765\u5b66\u4e86\u3002\n\n\u786e\u5b9e\u662f\u5f88\u6709\u610f\u601d\u7684\u4e1c\u897f\u3002\n\n\u4e0d\u8fc7\u8c8c\u4f3c\u4e5f\u5f88\u5c0f\u4f17\uff0c\u51e0\u4e4e\u4e0d\u548b\u7528\u3002\n\n\u4f46\u662f\u6027\u8d28\u786e\u5b9e\u5f88\u4f18\u7f8e\u3002\n\n\u7279\u6b8a\u7684\u9898\u76ee\u4e5f\u6709\u5947\u6548\u3002\n\n## \u524d\u7f6e\u77e5\u8bc6\n\n1. _Kruskal_ \u7b97\u6cd5\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n2. \u500d\u589e\n\n3. \u4e3b\u5e2d\u6811\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u4e9b\u73a9\u610f\uff0c~~\u5176\u5b9e\u5e76\u4e0d\u5fc5\u8981~~\n\n\u5728\u9898\u76ee\u91cc\u4f1a\u7528\u5230\u7684\u3002\n\n## \u5b9a\u4e49\n\n\u8fd9\u4e2a\u4e1c\u897f\u6211\u627e\u904d\u4e86\u5404\u5927\u8bcd\u6761\uff0c\u5e76\u6ca1\u6709\u4e00\u4e2a\u5408\u9002\u7684\u5b9a\u4e49\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u8df3\u8fc7\u3002\n\n\n## \u5b9e\u73b0\u8fc7\u7a0b\n\n\u5728\u6267\u884c _kruskal_ \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5148\u5c06\u8fb9\u8fdb\u884c\u6392\u5e8f\uff08\u6392\u5e8f\u7684\u65b9\u5f0f\u51b3\u5b9a\u4e86\u91cd\u6784\u6811\u7684\u6027\u8d28\uff09\uff0c\u4e4b\u540e\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff0c\u67e5\u770b\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e4b\u5185\u3002\u5982\u679c\u4e0d\u5728\uff0c\u90a3\u4e48\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 $node$,**\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743**\u3002\n\n\u6709\u4e00\u5f20\u56fe\u753b\u7684\u597d\u554a\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/kbflkzrt.png)\n\n\u56fe\u7247\u6765\u6e90\uff1a@[asd369 ](https://www.luogu.com.cn/blog/asd369-zzh/p4197-peaks)\n\n\n\n\u5177\u4f53\u505a\u6cd5\uff1a\n\n\u9996\u5148\u627e\u5230\u4e24\u4e2a\u7aef\u70b9\u5728\u5e76\u67e5\u96c6\u4e2d\u7684\u6839\uff0c\u4e4b\u540e\u68c0\u67e5\u662f\u5426\u5728\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\u3002\u7136\u540e\u8fde\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\nnamespace Kruskal{\n\tinline void add(int u,int v){\n\t\tnxt[++cnt]=head[u];\n\t\tto[cnt]=v;\n\t\thead[u]=cnt;\n\t}\n\t\n\tstruct node{\n\t\tint u,v,dis;\n\t\t\n\t\tinline bool operator < (const node &a)const{\n\t\t\treturn dis<a.dis;\n\t\t}\n\t}e[maxm<<1];\n\n\tint ff[maxn];\n\t\n\tinline void init(){\n\t\tfor(re int i=1;i<maxn;i++){\n\t\t\tff[i]=i;\n\t\t}\n\t}\n\t\n\tint find(int x){\n\t\treturn x==ff[x]?x:ff[x]=find(ff[x]);\n\t}\n\t\n\tint val[maxn<<1],tot;\n\t\n\tinline void kruskal(){\n\t\tsort(e+1,e+1+m);\n\t\t\n\t\tinit();\n\t\t\n\t\tfor(re int i=1;i<=m;i++){\n\t\t\tint x=find(e[i].u),y=find(e[i].v);\n\t\t\tif(x!=y){\n\t\t\t\tval[++tot]=e[i].dis;\n\t\t\t\tff[x]=ff[y]=ff[tot]=tot;\n\t\t\t\tadd(tot,x);add(tot,y);\n\t\t\t\tfa[x][0]=fa[y][0]=tot;\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n```\n\n## \u6027\u8d28\n\n- 1. _Kruskal_ \u91cd\u6784\u6811\u662f\u4e00\u68f5\u6811\uff08~~\u8fd9\u4e0d\u662f\u5e9f\u8bdd\uff1f\uff01~~\n\n\u800c\u4e14\u4ed6\u8fd8\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff08~~\u867d\u7136\u770b\u4e0a\u53bb\u4e5f\u662f\u5e9f\u8bdd~~\n\n\u8fd8\u662f\u4e00\u68f5\u6709\u6839\u6811\uff0c\u6839\u8282\u70b9\u5c31\u662f\u6700\u540e\u65b0\u5efa\u7684\u8282\u70b9\u3002\n\n- 2. \u82e5\u539f\u56fe\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u5efa\u51fa\u6765\u7684 _Kruskal_ \u91cd\u6784\u6811\u5c31\u662f\u4e00\u4e2a\u68ee\u6797\u3002\n\n- 3. \u5982\u679c\u4e00\u5f00\u59cb\u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u5efa\u51fa\u7684 _Kruskal_ \u91cd\u6784\u6811\u5c31\u662f\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u53cd\u4e4b\u5c31\u662f\u5c0f\u6839\u5806\u3002\n\n- 4. \u82e5\u4e00\u5f00\u59cb\u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48 `lca(u,v)` \u7684\u6743\u503c\u4ee3\u8868\u4e86\u539f\u56fe\u4e2d $u$ \u5230 $v$ \u8def\u5f84\u4e0a\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002\u53cd\u4e4b\u5c31\u662f\u6700\u5c0f\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\n\n- 5. _Kruskal_ \u91cd\u6784\u6811\u4e2d\u7684\u53f6\u5b50\u7ed3\u70b9\u5fc5\u5b9a\u662f\u539f\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u5176\u4f59\u7684\u8282\u70b9\u90fd\u662f\u539f\u56fe\u7684\u4e00\u6761\u8fb9\u3002\n\n- 6. _Kruskal_ \u91cd\u6784\u6811\u5efa\u597d\u4ee5\u540e\u4f1a\u6bd4\u539f\u56fe\u591a\u51fa $n-1$ \u4e2a\u8282\u70b9\uff08\u5982\u679c\u539f\u56fe\u8054\u901a\u7684\u8bdd\uff09\n\n\u4e00\u6761\u4e00\u6761\u6765\u770b\uff1a\n\n\u5bf9\u4e8e\u6027\u8d28 $1$ \u548c $2$\uff0c\u6bd4\u8f83\u663e\u7136\uff0c\u6211\u4eec\u5c31\u4e0d\u8bf4\u4e86\u3002\n\n\u5bf9\u4e8e\u6027\u8d28 $3$ \u548c $4$\uff0c\u7531\u4e8e\u4e00\u5f00\u59cb\u5bf9\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u904d\u5386\u5230\u7684\u8fb9\u4e00\u5b9a\u662f\u6743\u503c\u6700\u5c0f\u7684\u3002\n\n\u4e8e\u662f\u5bf9\u4e8e _Kruskal_ \u91cd\u6784\u6811\u4e2d\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u7684\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4e00\u5b9a\u5c0f\u4e8e\u5b83\u672c\u8eab\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u77e5\u9053\uff0c\u6743\u503c\u8d8a\u5c0f\u7684\u6df1\u5ea6\u8d8a\u5927\uff0c\u6743\u503c\u8d8a\u5927\u7684\u6df1\u5ea6\u8d8a\u5c0f\u3002\n\n\u4e8e\u662f\u8fd9\u662f\u5927\u6839\u5806\u6027\u8d28\u3002\n\n\u6709\u4e86\u5927\u6839\u5806\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u7531\u4e8e\u8fb9\u6743\u5347\u5e8f\uff0c\u5176\u5b9e\u5c31\u662f\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\uff0c\u4e8e\u662f\u80fd\u51fa\u73b0\u5728 _Kruskal_ \u91cd\u6784\u6811\u4e2d\u7684\u8282\u70b9\u5fc5\u7136\u662f\u8981\u6ee1\u8db3\u4e5f\u51fa\u73b0\u5728\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\uff0c\u90a3\u4e48\u5728\u627e `LCA` \u7684\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u7684\u5fc5\u7136\u662f\u5728 _Kruskal_ \u91cd\u6784\u6811\u4e0a\u8fd9\u6761\u8def\u5f84\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u6743\u503c\u6700\u5927\u7684\u3002\u5bf9\u4e8e\u539f\u56fe\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6743\u503c\u6700\u5927\u7684\u6070\u597d\u662f\u4ece $u$ \u5230 $v$ \u6700\u5c0f\u503c\u3002\n\n>\u82e5\u4e00\u4e2a\u70b9\u80fd\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u5230\u8fbe\uff0c\u90a3\u4e48\u6211\u4eec\u8d70\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e5f\u4e00\u5b9a\u80fd\u5230\u8fbe\u8be5\u8282\u70b9\u3002\n\n\u4e8e\u662f\u6ee1\u8db3\u4e86\u6700\u5927\u503c\u6700\u5c0f\u7684\u6027\u8d28\u3002\n\n\u540c\u7406\u964d\u5e8f\u4e5f\u80fd\u591f\u5f97\u51fa\u6700\u5c0f\u503c\u6700\u5927\u7684\u6027\u8d28\u3002\n\n\u5bf9\u4e8e\u6027\u8d28 $5$\uff0c\u53ef\u4ee5\u753b\u56fe\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u6027\u8d28 $6$\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5efa\u51fa _Kruskal_ \u91cd\u6784\u6811\u7684\u8fc7\u7a0b\u5176\u5b9e\u4e5f\u5c31\u662f\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\uff0c\u90a3\u4e48 _Kruskal_ \u91cd\u6784\u6811\u4e2d\u65b0\u589e\u52a0\u7684\u8282\u70b9\u6570\u4e5f\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u6570\u3002\u800c\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u6570\u6700\u591a\u662f $n-1$ \u6761\uff0c\u4e8e\u662f _Kruskal_ \u91cd\u6784\u6811\u4e2d\u65b0\u589e\u52a0\u7684\u8282\u70b9\u6570\u4e5f\u5c31\u662f   $n-1$ \u4e2a\u3002 \n\n## \u5e94\u7528\n\n\u6839\u636e\u4e0a\u9762\u7684\u6027\u8d28\u4eec\uff0c_Kruskal_ \u91cd\u6784\u6811\u6709\u51e0\u79cd\u5e38\u89c1\u7528\u6cd5\uff1a\n\n### u->v\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u6700\u5c0f or u->v\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u6700\u5927\n\n\u8fd9\u5c31\u662f\u4e0a\u9762\u7684\u6027\u8d28 $3$ \u548c $4$ \u4e86\u3002\n\n\u4e8e\u662f\u76f4\u63a5\u5957\u677f\u5b50\u5c31\u884c\u4e86\u3002\n\n\u4e5f\u7ed9\u6211\u4eec\u4e00\u4e2a\u63d0\u793a\uff0c\u9047\u5230\u8fd9\u79cd**\u6700\u5927\u503c\u6700\u5c0f**\u6216\u8005**\u6700\u5c0f\u503c\u6700\u5927**\u8fd9\u79cd\u7c7b\u4f3c\u7684\u8bed\u53e5\uff0c\u53ef\u4ee5\u4e0d\u6025\u7740\u60f3\u4e8c\u5206\uff0c\u8fd8\u53ef\u4ee5\u60f3\u60f3 _Kruskal_ \u91cd\u6784\u6811\u3002\n\n\u4f8b\u9898\u5c31\u662f [P1967 [NOIP2013 \u63d0\u9ad8\u7ec4] \u8d27\u8f66\u8fd0\u8f93](https://www.luogu.com.cn/problem/P1967)\n\n\u6c42\u89e3\u8def\u5f84\u4e0a\u6700\u5c0f\u503c\u6700\u5927\u3002\n\n\u5c06\u8fb9\u964d\u5e8f\u6392\u5e8f\uff0c\u5efa\u51fa _Kruskal_ \u91cd\u6784\u6811\uff0c\u6ce8\u610f\u5904\u7406\u4e00\u4e0b\u6709\u53ef\u80fd\u662f\u4e2a\u68ee\u6797\u3002\n\n`lca` \u600e\u4e48\u641e\u90fd\u884c\uff0c\u4e0d\u8fc7\u6211\u559c\u6b22\u6811\u5256\uff0c\u6bd4\u8f83\u4f18\u96c5\u3002\n\n\u67e5\u8be2\u5728 _Kruskal_ \u91cd\u6784\u6811\u4e2d `lca(u,v)` \u7684\u6743\u503c\u5c31\u597d\u4e86\u3002\n\n```cpp\n//#define LawrenceSivan\n\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define re register\nconst int maxn=1e5+5;\n#define INF 0x3f3f3f3f\n\nint n,m,tot,q;\n\nstruct node{\n\tint u,v,dis;\n\n\tinline bool operator < (const node &a)const{\n\t\treturn dis>a.dis;\n\t}\n}a[maxn<<1];\n\nint head[maxn],to[maxn<<1],nxt[maxn<<1],cnt;\n\nint val[maxn<<1];\n\ninline void add(int u,int v){\n\tto[++cnt]=v;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\n\nint dep[maxn],size[maxn],fa[maxn],son[maxn],top[maxn];\n\nbool vis[maxn];\n\nvoid dfs1(int u,int f){\n\tsize[u]=1;\n\tvis[u]=true;\n\tfa[u]=f;\n\tdep[u]=dep[f]+1;\n\tfor(re int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==f)continue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]])son[u]=v;\n\t}\n}\n\nvoid dfs2(int u,int topf){\n\ttop[u]=topf;\n\tif(!son[u])return;\n\tdfs2(son[u],topf);\n\tfor(re int i=head[u];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\ninline int lca(int x,int y){\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\treturn dep[x]<dep[y]?x:y;\n}\n\nint ff[maxn];\n\nint find(int x){\n\treturn x==ff[x]?x:ff[x]=find(ff[x]);\n}\n\ninline void init(){\n\tfor(re int i=1;i<maxn;i++){\n\t\tff[i]=i;\n\t}\n}\n\ninline void Kruskal(){\n\tsort(a+1,a+1+m);\n\n\tinit();\n\n\tfor(re int i=1;i<=m;i++){\n\t\tint x=find(a[i].u),y=find(a[i].v);\n\t\tif(x!=y){\n\t\t\tval[++tot]=a[i].dis;\n\t\t\tff[tot]=ff[x]=ff[y]=tot;\n\t\t\tadd(tot,x);\n\t\t\tadd(tot,y);\n\t\t}\n\t} \n\n\tfor(re int i=1;i<=tot;i++){\n\t\tif(!vis[i]){\n\t\t\tint f=find(i);\n\t\t\tdfs1(f,0);\n\t\t\tdfs2(f,f);\n\t\t}\n\t}\n}\n\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint main(){\n#ifdef LawrenceSivan\n    freopen(\"aa.in\",\"r\",stdin);\n    freopen(\"aa.out\",\"w\",stdout);\n#endif\n    n=read();m=read();tot=n;\n\n    for(re int i=1;i<=m;i++){\n    \ta[i].u=read();a[i].v=read();a[i].dis=read();\n    }\n\n    Kruskal();\n\n    q=read();\n    while(q--){\n\t\tint u=read(),v=read();\n\t\tif(find(u)!=find(v))puts(\"-1\");\n\t\telse printf(\"%d\\n\",val[lca(u,v)]);\n    }\n\n\n\n\treturn 0;\n}\n```\n\n### \u4ece u \u51fa\u53d1\u53ea\u7ecf\u8fc7\u8fb9\u6743\u4e0d\u8d85\u8fc7 x \u7684\u8fb9\u80fd\u5230\u8fbe\u7684\u8282\u70b9\n\n\u6839\u636e\u6027\u8d28 $3$\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u627e\u5230\u8fb9\u6743\u5347\u5e8f\u7684 _Kruskal_ \u91cd\u6784\u6811\u4e2d\u627e\u5230\u6df1\u5ea6\u6700\u5c0f\u7684\uff0c\u70b9\u6743\u4e0d\u8d85\u8fc7 $x$ \u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5373\u4e3a\u6240\u6c42\u3002\n\n\u627e\u8fd9\u4e2a\u70b9\u4e00\u822c\u7528\u6811\u4e0a\u500d\u589e\n\n\u6211\u4e0d\u8981\uff01\uff01\uff01\uff01~~\u6811\u5256\u515a\u58f0\u5636\u529b\u7aed~~\n\n\u6ca1\u529e\u6cd5\u8fd9\u73a9\u610f\u8fd8\u662f\u500d\u589e\u597d\n\n\u6211\u4eec\u8003\u8651\u5f53\u524d\u6211\u4eec\u627e\u5230\u7684\u8fd9\u4e2a\u8282\u70b9\u4e3a $x$\uff0c\u7136\u540e\u6211\u4eec\u500d\u589e\u679a\u4e3e\u5b83\u7684\u7956\u5148\uff0c\u7531\u4e8e\u662f\u5347\u5e8f\u6392\u5e8f\uff0c\u6240\u4ee5\u5b83\u7956\u5148\u7684\u70b9\u7684\u70b9\u6743\u5fc5\u7136\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\u70b9\u6743\uff0c\u4e8e\u662f\uff0c\u6211\u4eec\u500d\u589e\u7684\u65f6\u5019\u53ea\u8981\u5224\u65ad\u5982\u679c\u5b83\u7684\u7956\u5148\u7684\u70b9\u6743\u5c31\u597d\u4e86\u3002\n\n```cpp\ninline void kruskal(){\n\t\tsort(e+1,e+1+m);\n\t\t\n\t\tinit();\n\t\t\n\t\tfor(re int i=1;i<=m;i++){\n\t\t\tint x=find(e[i].u),y=find(e[i].v);\n\t\t\tif(x!=y){\n\t\t\t\tval[++tot]=e[i].dis;\n\t\t\t\tff[x]=ff[y]=ff[tot]=tot;\n\t\t\t\tadd(tot,x);add(tot,y);\n\t\t\t\tfa[x][0]=fa[y][0]=tot;\n\t\t\t}\n\t\t}\n\t\tdfs(tot);\n\t}\n\n\nnamespace BIN{\n\tint fa[maxn<<1][21],range[maxn<<1][2];\n\n\tvoid dfs(int u){\n\t\tfor(re int i=1;i<=20;i++){\n\t\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t\t}\n\t\t\n\t\t...\n\t}\n}\n\nint main(){\n\twhile(q--){\n\t\tint u=read(),x=read();\n\t\tfor(re int i=20;~i;i--){\n\t\t\tif(fa[u][i]&&val[fa[u][i]]<=x)v=fa[u][i];\n\t\t}\n\t}\n}\n```\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u7684\u3002\n\n\u4f8b\u9898\uff1a[P4197 Peaks](https://www.luogu.com.cn/problem/P4197) & [P7834 [ONTAK2010] Peaks \u52a0\u5f3a\u7248](https://www.luogu.com.cn/problem/P7834)\n\n\u8fd9\u4e2a\u9898\u5176\u5b9e\u4e5f\u80fd\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u3002\uff08\u6307\u7684\u662f\u524d\u9762\u90a3\u4e2a\uff0c\u8fd9\u4e2a\u9898\u662f\u5f3a\u5236\u5728\u7ebf\u7684\uff0c\u7528\u4e0d\u4e86\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u611f\u8c22@cyffff \u6307\u51fa\u9519\u8bef\uff09\n\n\u4e3b\u4f53\u601d\u8def\u662f\u88f8\u7684\uff0c\u591a\u51fa\u6765\u7684\u5c31\u662f\u4e00\u4e2a\u7b2c $k$ \u5927\u3002\n\n~~\u8fd9\u5c31\u662f\u4e3a\u5565\u6211\u8bf4\u9700\u8981\u4e3b\u5e2d\u6811\u5f53\u505a\u524d\u7f6e\u77e5\u8bc6~~\n\n\u7136\u540e\u5b50\u6811\u533a\u95f4\u7b2c $k$ \u5927\uff0cdfs \u5e8f + \u4e3b\u5e2d\u6811\u5927\u529b\u7ef4\u62a4\u5c31\u884c\u4e86\u3002\n\n\u7801\u519c\u9898\uff0c\u4e0d\u597d\uff0c\u601d\u7ef4\u9898\uff0c\u597d\uff01\n\n~~\u4f46\u662f\u601d\u7ef4\u9898\u4e0d\u4f1a\u505a\u5624\u5624\u5624~~\n\n\u5176\u5b9e\u8fd8\u662f\u6709\u5f88\u591a\u7ec6\u8282\u95ee\u9898\u7684\u3002\n\n\u9996\u5148\u95ee\u9898\u5c31\u662f\u5173\u4e8e\u65e0\u89e3\u60c5\u51b5\u7684\u5224\u65ad\u3002\n\n\u80af\u5b9a\u662f\u5bf9\u4e8e\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6811\uff0c\u5b50\u6811\u4e2d\u8282\u70b9\u4e2a\u6570\u4e0d\u8db3 $k$ \u4e2a\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e _Kruskal_ \u91cd\u6784\u6811\u7684\u6027\u8d28 $5$\uff0c\u6211\u4eec\u77e5\u9053\u5728 _Kruskal_ \u91cd\u6784\u6811\u4e2d\u53ea\u6709\u53f6\u5b50\u8282\u70b9\u624d\u662f\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u7684\u5b50\u6811\u5927\u5c0f\u5e76\u4e0d\u662f\u6211\u4eec\u4ee5\u5f80\u7edf\u8ba1\u7684\u90a3\u6837\uff0c\u800c\u662f\u53ea\u7edf\u8ba1\u53f6\u5b50\u8282\u70b9\u3002\n\n\u5b9e\u73b0\u4e5f\u5f88\u7b80\u5355\uff1a\n\n```cpp\nvoid dfs(int u){\n    for(re int i=head[u];i;i=nxt[i]){\n        int v=to[i];\n        if(v==fa[u][0])continue;\n        fa[v][0]=u;\n        dfs(v);\n        size[u]+=size[v];\n    }\n    if(!size[u])size[u]=1;\n}\n```\n\n\u5269\u4e0b\u7684\u90e8\u5206\u5176\u5b9e\u5c31\u597d\u8bf4\u5f88\u591a\u4e86\u3002\n\n\u6ce8\u610f\u4e00\u4e0b\u79bb\u6563\u5316\u5c31\u884c\u4e86\u3002\n\n```cpp\n//#define LawrenceSivan\n\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define re register\nconst int maxn=2e5+5;\nconst int maxm=5e5+5;\n#define INF 0x3f3f3f3f\n\nint n,m,q,tmp,num,last;\n\nint a[maxn],b[maxn]; \n\nint head[maxn<<1],to[maxn<<1],nxt[maxn<<1],cnt;\n\n\nnamespace SegmentTree{\n    inline void Discretization(){\n        sort(b+1,b+1+n);\n        tmp=unique(b+1,b+1+n)-b-1;\n        for(re int i=1;i<=n;i++)a[i]=lower_bound(b+1,b+1+tmp,a[i])-b;\n    }\n\n    struct SegmentTree{\n        int lc,rc,v;\n        #define ls(x) st[x].lc\n        #define rs(x) st[x].rc\n    }st[maxn<<6];\n\n    int segtot,root[maxn<<1];\n\n    void build(int &rt,int l,int r){\n        rt=++segtot;\n        if(l==r)return;\n\n        int mid=(l+r)>>1;\n        build(ls(rt),l,mid);\n        build(rs(rt),mid+1,r);\n    }\n\n    int modify(int rt,int l,int r,int x){\n        int t=++segtot;\n        ls(t)=ls(rt),rs(t)=rs(rt);\n        st[t].v=st[rt].v+1;\n\n        if(l==r)return t;\n\n        int mid=(l+r)>>1;\n        if(x<=mid)ls(t)=modify(ls(t),l,mid,x);\n        else rs(t)=modify(rs(t),mid+1,r,x);\n\n        return t;\n    }\n\n    int query(int x,int y,int l,int r,int k){\n        int xx=st[rs(y)].v-st[rs(x)].v;\n\n        if(l==r)return l;\n\n        int mid=(l+r)>>1;\n        if(k<=xx)return query(rs(x),rs(y),mid+1,r,k);\n        else return query(ls(x),ls(y),l,mid,k-xx);\n    }\n    \n}\n\nusing namespace SegmentTree;\n\nnamespace BIN{\n    int fa[maxn<<1][30],pos[maxn<<1],st1[maxn<<1],ed[maxn<<1],size[maxn<<1];\n\n    void dfs(int u){\n        pos[++num]=u;st1[u]=num;\n        for(re int i=1;i<=25;i++){\n            fa[u][i]=fa[fa[u][i-1]][i-1];\n        }\n        for(re int i=head[u];i;i=nxt[i]){\n            int v=to[i];\n            if(v==fa[u][0])continue;\n            fa[v][0]=u;\n            dfs(v);\n            size[u]+=size[v];\n        }\n        if(!size[u])size[u]=1;\n        ed[u]=num;\n    }\n}\n\nusing namespace BIN;\n\nnamespace Kruskal{\n    inline void add(int u,int v){\n        nxt[++cnt]=head[u];\n        to[cnt]=v;\n        head[u]=cnt;\n    }\n    \n    struct node{\n        int u,v,dis;\n        \n        inline bool operator < (const node &a)const{\n            return dis<a.dis;\n        }\n    }e[maxm];\n\n    int ff[maxn<<1];\n    \n    inline void init(){\n        for(re int i=1;i<maxn;i++){\n            ff[i]=i;\n        }\n    }\n    \n    int find(int x){\n        return x==ff[x]?x:ff[x]=find(ff[x]);\n    }\n    \n    int val[maxn<<1],tot;\n\n    inline void kruskal(){\n        sort(e+1,e+1+m);\n        \n        init();\n        \n        for(re int i=1;i<=m;i++){\n            int x=find(e[i].u),y=find(e[i].v);\n            if(x!=y){\n                val[++tot]=e[i].dis;\n                ff[x]=ff[y]=ff[tot]=tot;\n                add(tot,x);add(tot,y);\n            }\n        }\n        \n        dfs(tot);\n    }\n    \n}\n\nusing namespace Kruskal;\n\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){x=x*10+(ch^48);ch=getchar();}\n    return x*f;\n}\n\nint main(){\n#ifdef LawrenceSivan\n    freopen(\"aa.in\",\"r\",stdin);\n    freopen(\"aa.out\",\"w\",stdout);\n#endif\n    n=read();m=read();q=read();tot=n;\n    for(re int i=1;i<=n;i++){\n        a[i]=b[i]=read();\n    }\n\n    Discretization();\n    \n    for(re int i=1;i<=m;i++){\n        e[i].u=read();\n        e[i].v=read();\n        e[i].dis=read();\n    }\n    \n    kruskal();\n\n    for(re int i=1;i<=tot;i++){\n        root[i]=root[i-1];\n        if(pos[i]<=n)root[i]=modify(root[i-1],1,tmp,a[pos[i]]);\n     }\n    \n    while(q--){\n        int v=read(),x=read(),k=read();\n        v=(v^last)%n+1;k=(k^last)%n+1;x=x^last;\n        for(re int i=25;~i;i--){\n            if(fa[v][i]&&val[fa[v][i]]<=x)v=fa[v][i];\n        }\n        if(size[v]<k){\n            puts(\"-1\");\n            last=0;\n            continue;\n        }\n        else printf(\"%d\\n\",last=b[query(root[st1[v]-1],root[ed[v]],1,tmp,k)]);\n    }\n    \n    \n    return 0;\n}\n```",
        "postTime": 1624008580,
        "uid": 375208,
        "name": "LawrenceSivan",
        "ccfLevel": 0,
        "title": "Kruskal \u91cd\u6784\u6811\u603b\u7ed3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P7834)\n\n### \u524d\u7f6e\u829d\u58eb\uff1aKruskal \u91cd\u6784\u6811\u3001\u4e3b\u5e2d\u6811\u3002\n\n### $ \\mathcal{Solution} $\uff1a\n\n\u770b\u5230\u53ea\u7ecf\u8fc7\u6743\u503c $\\le x$ \u7684\u8fb9\u53ef\u4ee5\u60f3\u5230\u5efa\u7acb Kruskal \u91cd\u6784\u6811\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u91cd\u6784\u6811\u4e2d \u70b9 $u$ \u7684\u4efb\u610f\u6743\u503c $\\le x$ \u7684\u7956\u5148\u8282\u70b9\uff0c\u5176\u5b50\u6811\u4e2d\u7684\u70b9\u5fc5\u5b9a\u53ef\u4ee5\u7531 $u$ \u7ecf\u8fc7\u6743\u503c $\\le x$ \u7684\u8fb9\u5230\u8fbe\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u627e\u5230\u6df1\u5ea6\u6700\u5c0f\u7684\u7956\u5148\u8282\u70b9\u6ee1\u8db3\u70b9\u6743\uff08\u91cd\u6784\u6811\u4e2d\u7684\uff09 $\\le x$\uff0c\u5f88\u5bb9\u6613\u901a\u8fc7\u6811\u4e0a\u500d\u589e\u5b9e\u73b0\u3002\n\n\u627e\u5230\u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u540e\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u91cd\u6784\u6811\u4e2d\u4e00\u4e2a\u5b50\u6811\u4e2d\u539f\u5148\u70b9\u6743\u7b2c $k$ \u5927\u7684\u70b9\u7684\u70b9\u6743\u3002\n\n\u5b50\u6811\u53ef\u4ee5\u8f6c\u5316\u4e3a dfs \u5e8f\u4e0a\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u6c42\u91cd\u6784\u6811\u7684 dfs \u5e8f\u7684\u9759\u6001\u533a\u95f4\u7b2c $k$ \u5927\u3002\n\n\u9759\u6001\u533a\u95f4\u7b2c $k$ \u5927\u3001\u5f3a\u5236\u5728\u7ebf\uff0c\u7ecf\u5178\u7684\u4e0d\u80fd\u518d\u7ecf\u5178\u7684\u4e3b\u5e2d\u6811\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(m \\log m)$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e6+10;\nconst int inf=0x3f3f3f3f;\nint n,m,q,a[N],b[N],aa[N],cnt,ans;//a \u6570\u7ec4\u662f\u539f\u56fe\u4e2d\u7684\u70b9\u6743\uff0caa\u6570\u7ec4\u662f\u91cd\u6784\u6811\u4e2d\u7684\u70b9\u6743\nint s[N];\nint dfn[N],en[N],tot;\nint fa[N];\nint f[N][25];\nint ch[N][2];\nstruct edge\n{\n\tint u,v,w;\n}e[N];\nbool cmp(edge A,edge B){return A.w<B.w;}\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nvoid dfs(int x)\n{\n\tif(!x) return;\n\tfor(int i=1;i<=20;++i) f[x][i]=f[f[x][i-1]][i-1];\n\tdfn[x]=++tot;\n\ts[tot]=a[x];\n\tdfs(ch[x][0]);\n\tdfs(ch[x][1]);\n\ten[x]=tot;\n}\nvoid kruskal()\n{\n\tsort(e+1,e+m+1,cmp);\n\tfor(int i=1;i<=2*n;++i) fa[i]=i;\n\tcnt=n;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint fu=find(e[i].u),fv=find(e[i].v);\n\t\tif(fu==fv) continue;\n\t\taa[++cnt]=e[i].w;\n\t\tfa[fu]=fa[fv]=cnt;\n\t\tch[cnt][0]=fu;ch[cnt][1]=fv;\n\t\tf[fu][0]=f[fv][0]=cnt;\n\t}\n\tfor(int i=1;i<=cnt;++i) if(fa[i]==i) dfs(i);\n}\n//\u4ee5\u4e0b\u4e3a\u4e3b\u5e2d\u6811 \nint cnt2,r[N],t[N<<5],L[N<<5],R[N<<5];\nint build(int l,int r)\n{\n\tint rt=++cnt2,mid=(l+r)>>1;\n\tif(l==r) return rt;\n\tL[rt]=build(l,mid);\n\tR[rt]=build(mid+1,r);\n\treturn rt;\n}\nint update(int pre,int l,int r,int k)\n{\n\tif(!k) return pre;\n\tint rt=++cnt2,mid=(l+r)>>1;\n\tt[rt]=t[pre]+1,L[rt]=L[pre],R[rt]=R[pre];\n\tif(l==r) return rt;\n\tif(k<=mid) L[rt]=update(L[pre],l,mid,k);\n\telse R[rt]=update(R[pre],mid+1,r,k);\n\treturn rt;\n}\nint query(int u,int v,int l,int r,int k)\n{\n\tif(l==r) return l;\n\tif(t[v]-t[u]<k) return 0;\n\tint x=t[R[v]]-t[R[u]],mid=(l+r)>>1;\n\tif(x<k) return query(L[u],L[v],l,mid,k-x);\n\telse return query(R[u],R[v],mid+1,r,k);\n}\n//\u4ee5\u4e0a\u4e3a\u4e3b\u5e2d\u6811 \nint main()\n{\n//\tfreopen(\"\",\"r\",stdin);\n//\tfreopen(\"\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(int i=1;i<=n;++i) scanf(\"%d\",a+i),b[i]=a[i];\n\tsort(b+1,b+n+1);\n\tint nn=unique(b+1,b+n+1)-b-1;\n\tfor(int i=1;i<=n;++i) a[i]=lower_bound(b+1,b+nn+1,a[i])-b;\n\tfor(int i=1;i<=m;++i) scanf(\"%d%d%d\",&e[i].u,&e[i].v,&e[i].w);\n\taa[0]=inf;\n\tkruskal();\n\tr[0]=build(1,nn);\n\tfor(int i=1;i<=cnt;++i) r[i]=update(r[i-1],1,nn,s[i]);\n\tint u,x,k;\n\twhile(q--)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&x,&k);\n\t\tu=(u^ans)%n+1,x^=ans,k=(k^ans)%n+1;\n\t\tfor(int i=20;i>=0;--i) if(f[u][i]&&aa[f[u][i]]<=x) u=f[u][i];\n\t\tans=b[query(r[dfn[u]-1],r[en[u]],1,nn,k)];\n\t\tif(!ans) puts(\"-1\");\n\t\telse printf(\"%d\\n\",ans);\n\t}\n    return 0;\n}\n\n```\n",
        "postTime": 1659680355,
        "uid": 255581,
        "name": "gao_yc",
        "ccfLevel": 0,
        "title": "P7834 [ONTAK2010] Peaks \u52a0\u5f3a\u7248 \u9898\u89e3"
    },
    {
        "content": "### [\u3010\u539f\u9898\u94fe\u63a5\u3011](https://www.luogu.com.cn/problem/P7834)\n\n## \u9898\u76ee\u5206\u6790\n\n\u5899\u88c2\u5efa\u8bae\u5148\u505a\u5b8c [$\\text{Peaks}$](https://www.luogu.com.cn/problem/P4197)\n\n\u770b\u5230\u9898\u89e3\u533a\u5168\u90e8\u90fd\u662f Kruskal \u91cd\u6784\u6811\uff0c\u7136\u800c\u849f\u84bb\u8868\u793a\u5e76\u4e0d\u4f1a qwq\u3002\n\n\u6211\u4eec\u77e5\u9053\u4e0d\u52a0\u5f3a\u5236\u5728\u7ebf\u7684 Peaks \u662f\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u5e76\u67e5\u96c6+\u79bb\u7ebf+\u7ebf\u6bb5\u6811\u5408\u5e76\u6c34\u8fc7\u7684\u3002\uff08\u8bf4\u53e5\u95f2\u8bdd\uff0c\u6211\u7684\u8fd9\u79cd\u5199\u6cd5\u5728 Peaks \u62ff\u4e86\u6700\u4f18\u89e3\uff0c\u6b64\u65f6 $2021.9.18$\u3002\uff09\n\n\u65b9\u6cd5\u5c31\u662f\uff0c\u7ed9\u6bcf\u4e2a\u70b9\u5f00\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u628a\u8fb9\u548c\u8be2\u95ee\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u8fb9\u5e76\u5904\u7406\u8be2\u95ee\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u5904\u7406\u8fde\u901a\u5757\u7684\u4fe1\u606f\uff0c\u6bcf\u6b21\u5408\u5e76\u65f6\u540c\u65f6\u5c06\u4e24\u4e2a\u7ebf\u6bb5\u6811\u4e5f\u5408\u5e76\u3002\u67e5\u8be2\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u627e\u7b2c $k$ \u5927\u3002\n\n\u6709\u4e86\u5f3a\u5236\u5728\u7ebf\u540e\uff0c\u4e00\u822c\u7684\u5904\u7406\u5c31\u662f\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u3002\u5c06\u5e76\u67e5\u96c6\u548c\u5176\u5185\u5c42\u7684\u7ebf\u6bb5\u6811\u90fd\u8fdb\u884c\u53ef\u6301\u4e45\u5316\u5904\u7406\uff0c\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6dfb\u52a0\uff0c\u6bcf\u52a0\u5165\u4e00\u6761\u8fb9\u5c31\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff0c\u67e5\u8be2\u65f6\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u627e\u51fa\u5e94\u67e5\u8be2\u7684\u76f8\u5e94\u7248\u672c\u3002\n\n\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u4ee3\u7801\u5b9e\u73b0\u548c\u8c03\u8bd5\u96be\u5ea6\u5c31\u3002\u3002\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u6b64\u4ee3\u7801\u53ef $127.59\\text{MB}$ \u6781\u9650\u8fc7\u9898\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n/*\n  \u7701\u7565100\u591a\u884c\u7684\u5feb\u8bfb\u5feb\u4e9b\u6a21\u677f\n  \u5373\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u7684qin\u3001qout\n*/\n\nint n,m,q,maxx,ans,a[100005],b[100005],zt[500005];\nstruct Edge\n{\n\tint u,v,w;\n\tinline bool operator <(const Edge &b)const\n\t\t{ return w<b.w; }\n}e[500005];\n\nclass PersistantSegTree\n{\n private:\n\tstatic struct TreeNode{ int sum,lc,rc; }t[5000005];\n\tstatic int cnt;\n\tint rt;\n\tstatic void __merge(int &dst,int &src)\n\t{\n\t\tif(!dst || !src)\tdst|=src;\n\t\telse\n\t\t{\n\t\t\tt[++cnt]=t[dst],dst=cnt;\n\t\t\t__merge(t[dst].lc,t[src].lc);\n\t\t\t__merge(t[dst].rc,t[src].rc);\n\t\t\tt[dst].sum+=t[src].sum;\n\t\t}\n\t}\n\tstatic void __modify(int p,int &i,int l=1,int r=maxx)\n\t{\n\t\tt[i?i:(i=++cnt)].sum++;\n\t\tif(l!=r)\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(mid>=p)\t__modify(p,t[i].lc,l,mid);\n\t\t\telse\t__modify(p,t[i].rc,mid+1,r);\n\t\t}\n\t}\n\tstatic int __getKth(int k,int i)\n\t{\n\t\tint l=1,r=maxx,mid,sz;\n\t\tif(k>t[i].sum || k<1)\treturn -1;\n\t\twhile(l<r)\n\t\t{\n\t\t\tmid=(l+r)>>1,sz=t[t[i].rc].sum;\n\t\t\tif(sz>=k)\ti=t[i].rc,l=mid+1;\n\t\t\telse\tk-=sz,i=t[i].lc,r=mid;\n\t\t}\n\t\treturn b[l];\n\t}\n public:\n\tPersistantSegTree(): rt(0){}\n\tinline void merge(PersistantSegTree &b)\n\t\t{ __merge(rt,b.rt); }\n\tinline void modify(int p)\t{ __modify(p,rt); }\n\tinline int getKth(int k)\t{ return __getKth(k,rt); }\n};\nPersistantSegTree::TreeNode PersistantSegTree::t[]={};\nint PersistantSegTree::cnt=0;\n\nclass PersistantUnionSet\n{\n private:\n\tstruct TreeNode\n\t{\n\t\tint fa,dep,lc,rc;\n\t\tPersistantSegTree tr;\n\t}t[4000005];\n\tint cnt,rt[500005];\n\tvoid __build(int l,int r,int &i)\n\t{\n\t\ti=++cnt;\n\t\tif(l==r)\n\t\t{\n\t\t\tt[i].fa=l,t[i].dep=1;\n\t\t\tt[i].tr.modify(lower_bound(b+1,b+maxx+1,a[l])-b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\t__build(l,mid,t[i].lc),__build(mid+1,r,t[i].rc);\n\t\t}\n\t}\n\tvoid modify(int p,int x,int &i,int l=1,int r=n)\n\t{\n\t\tt[++cnt]=t[i],i=cnt;\n\t\tif(l==r)\tt[i].fa=x;\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(mid>=p)\tmodify(p,x,t[i].lc,l,mid);\n\t\t\telse\tmodify(p,x,t[i].rc,mid+1,r);\n\t\t}\n\t}\n\tint query(int p,int i,int l=1,int r=n)\n\t{\n\t\tif(l==r)\treturn i;\n\t\telse\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(mid>=p)\treturn query(p,t[i].lc,l,mid);\n\t\t\telse\treturn query(p,t[i].rc,mid+1,r);\n\t\t}\n\t}\n public:\n\tPersistantUnionSet(): cnt(0){ memset(t,0,sizeof(t)); }\n\tinline void build()\t{ __build(1,n,rt[0]); }\n\tinline void update(int v)\t{ rt[v]=rt[v-1]; }\n\tinline int findFa(int x,int v)\n\t{\n\t\tint f=t[query(x,rt[v])].fa;\n\t\treturn x==f?x:findFa(f,v);\n\t}\n\tinline void link(int x,int y,int v)\n\t{\n\t\tx=findFa(x,v),y=findFa(y,v);\n\t\tif(x==y)\treturn;\n\t\tint &r=rt[v],dx=t[query(x,r)].dep,dy=t[query(y,r)].dep;\n\t\tif(dx<dy)\tswap(x,y);\n\t\tint i;\n\t\tmodify(y,x,r),modify(x,x,r);\n\t\tt[i=query(x,r)].tr.merge(t[query(y,r)].tr);\n\t\tif(dx==dy)\tt[i].dep++;\n\t}\n\tinline int getKth(int x,int k,int v)\n\t\t{ return t[query(findFa(x,v),rt[v])].tr.getKth(k); }\n}s;\n\nint main()\n{\n\tqin>>n>>m>>q;\n\tfor(int i=1;i<=n;i++)\tqin>>a[i],b[i]=a[i];\n\tfor(int i=1;i<=m;i++)\tqin>>e[i].u>>e[i].v>>e[i].w;\n\tsort(b+1,b+n+1),maxx=unique(b+1,b+n+1)-b-1;\n\ts.build(),sort(e+1,e+m+1);\n\tfor(int i=1;i<=m;i++)\n\t\ts.update(i),s.link(e[i].u,e[i].v,i),zt[i]=e[i].w;\n\twhile(q--)\n\t{\n\t\tint x,y,k,i;\n\t\tqin>>x>>y>>k;\n\t\tx=(x^ans)%n+1,k=(k^ans)%n+1,y^=ans;\n\t\ti=upper_bound(zt+1,zt+m+1,y)-zt-1;\n\t\tqout.writeln(ans=s.getKth(x,k,i));\n\t\tif(ans==-1)\tans=0;\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1631976878,
        "uid": 279800,
        "name": "ExplodingKonjac",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011P7834 [ONTAK2010] Peaks \u52a0\u5f3a\u7248"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P7834)\n## \u9898\u76ee\u5927\u610f\n\u611f\u89c9\u9898\u76ee\u63cf\u8ff0\u5df2\u7ecf\u8db3\u591f\u6e05\u695a\u4e86\u3002\n## Solution\n\u8fd9\u9053\u9898\u9700\u8981\u7684\u4e1c\u897f\u6709\u70b9\u591a\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u6765\u5206\u89e3\u4e00\u4e0b\u9898\u76ee\u7684\u9700\u6c42\u3002\n\n- \u7ecf\u8fc7\u6743\u503c $\\le x$ \u7684\u8fb9\u6240\u80fd\u5230\u8fbe\u7684\u70b9\u3002\n\n\u9a6c\u4e0a\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f88\u660e\u663e\u4e86\uff0c\u548c\u8d27\u8f66\u8fd0\u8f93\u4e00\u6837\u3002\u4e0d\u8d58\u8ff0\u4e86\u3002\n\n- \u6240\u6709\u70b9\u4e2d\u6743\u503c\u7b2c $k$ \u5927\u3002\n\n\u597d\u7684\uff0c\u53c8\u662f\u88f8\u7684\u9759\u6001\u533a\u95f4\u7b2c $k$ \u5927\u3002\u7531\u4e8e\u662f\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u4e00\u53d1\u4e3b\u5e2d\u6811\u5c31\u7ed3\u675f\u4e86\u3002\n\n\u597d\u63a5\u4e0b\u6765\u6211\u4eec\u628a\u8fd9\u4e24\u4e2a\u73a9\u610f\u513f\u7ed3\u5408\u4e00\u4e0b\uff0c\u54e6\uff0c\u7136\u540e\u6211\u4eec\u638f\u51fa\u4e00\u4e2a\u514b\u9c81\u65af\u5361\u5c14\u91cd\u6784\u6811\u5c31\u505a\u5b8c\u4e86\u3002\n\n>\u6211\u662f fyy\uff0c\u6211\u4e00\u773c\u79d2\u4e86\uff0c\u611f\u89c9\u8fd9\u9898\u6ca1\u5565\u6280\u5de7\u554a\u3002\n\n\u597d\u7684\u6211\u5177\u4f53\u8bb2\u4e00\u4e0b\u3002\u6211\u4eec\u5bf9\u4e8e\u56fe\u505a\u4e00\u6b21\u91cd\u6784\u6811\uff0c\u7136\u540e\u5728\u5927\u6cd5\u5e08\u7684\u65f6\u5019\u987a\u4fbf\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u4e2d\u6db5\u76d6\u7684\u53f6\u8282\u70b9\u7684 $dfn$ \u533a\u95f4\uff0c\u5e76\u636e\u6b64\u5efa\u4e3b\u5e2d\u6811\uff0c\u7136\u540e\u76f4\u63a5\u56de\u7b54\u8be2\u95ee\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd8\u662f\u6bd4\u8f83\u6a21\u677f\u7684\uff0c\u6ce8\u610f\u7ec6\u8282\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## Code\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define inf (1<<30)\n#define INF (1ll<<60)\nusing namespace std;\nconst int MAXN=3e6+10;\nstruct Tree{\n\tint l,r,ls,rs;\n\tint sum;\n}tr[MAXN];\nint ntot,T[MAXN];\nint build(int l,int r){\n\tint i=++ntot;\n\ttr[i].l=l;tr[i].r=r;\n\tif(l==r) return i;\n\tint mid=l+r>>1;\n\ttr[i].ls=build(l,mid);\n\ttr[i].rs=build(mid+1,r);\n\treturn i;\n}\nint upd(int pre,int x){\n\tint i=++ntot;\n\ttr[i]=tr[pre];tr[i].sum++;\n\tif(tr[i].l==tr[i].r) return i;\n\tint mid=tr[i].l+tr[i].r>>1;\n\tif(x<=mid) tr[i].ls=upd(tr[pre].ls,x);\n\telse tr[i].rs=upd(tr[pre].rs,x);\n\treturn i;\n}\nint query(int L,int R,int k){\n\tif(tr[L].l==tr[L].r) return tr[L].l;\n\tint dif=tr[tr[R].ls].sum-tr[tr[L].ls].sum;\n\tif(k<=dif) return query(tr[L].ls,tr[R].ls,k);\n\telse return query(tr[L].rs,tr[R].rs,k-dif);\n}//\u4e3b\u5e2d\u6811\u6c42\u533a\u95f4\u7b2c k \u5c0f\nstruct Edge{\n\tint x,y,w;\n\tvoid input(){\n\t\tscanf(\"%d%d%d\",&x,&y,&w);\n\t}bool friend operator<(Edge a,Edge b){\n\t\treturn a.w<b.w;\n\t}\n}E[MAXN];\nint to[MAXN],head[MAXN],nxt[MAXN],edgec;\nvoid add(int u,int v){\n\tto[++edgec]=v;\n\tnxt[edgec]=head[u];\n\thead[u]=edgec;\n}\nint f[MAXN],h[MAXN],lsh[MAXN],val[MAXN],num;\nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}\nint fa[MAXN][20],lb[MAXN],rb[MAXN],tot;\nvoid dfs(int x,int fat){\n\tfa[x][0]=fat;\n\tfor(int i=1;i<20;i++)\n\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\tlb[x]=tot;\n\tif(head[x]==-1){\n\t\tlb[x]=tot;rb[x]=++tot;//\u5305\u542b\u5b50\u8282\u70b9\u7684\u533a\u95f4\uff0c\u6ce8\u610f\u662f\u5de6\u5f00\u53f3\u95ed\u7684\n\t\tT[tot]=upd(T[tot-1],lower_bound(lsh+1,lsh+1+num,h[x])-lsh);\n\t\treturn;\n\t}\n\tfor(int i=head[x];~i;i=nxt[i])\n\t\tdfs(to[i],x);\n\trb[x]=tot;\n}\nint main()\n{\n\tint n,m,q;\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&h[i]),lsh[i]=h[i];\n\tsort(lsh+1,lsh+1+n);\n\tnum=unique(lsh+1,lsh+1+n)-lsh-1;\n\tfor(int i=1;i<=m;i++)\n\t\tE[i].input();\n\tsort(E+1,E+1+m);\n\tfor(int i=1;i<=n+m;i++)\n\t\tf[i]=i;\n\tint cnt=n;\n\tmemset(val,0,sizeof(val));\n\tmemset(head,-1,sizeof(head));\n\tfor(int i=1;i<=m;i++){\n\t\tint fx=find(E[i].x),fy=find(E[i].y);\n\t\tif(fx==fy) continue;\n\t\tf[fx]=f[fy]=++cnt;\n\t\tadd(cnt,fx);add(cnt,fy);\n\t\tval[cnt]=E[i].w;\n\t}T[0]=build(1,num);\n\tdfs(cnt,0);\n\tint lastans=0; val[0]=0x3f3f3f3f;\n\tfor(int _=1;_<=q;_++){\n\t\tint v,x,k;\n\t\tscanf(\"%d%d%d\",&v,&x,&k);\n\t\tv=(v^lastans)%n+1;k=(k^lastans)%n+1;\n\t\tx=x^lastans;\n\t\tfor(int i=19;i>=0;i--)\n\t\t\tif(fa[v][i]&&val[fa[v][i]]<=x)\n\t\t\t\tv=fa[v][i];\n\t\tint l=lb[v],r=rb[v];\n\t\tif(r-l<k) puts(\"-1\"),lastans=0;\n\t\telse printf(\"%d\\n\",lastans=lsh[query(T[l],T[r],r-l-k+1)]);//\u6c42\u7b2c k \u5927\uff0c\u5c31\u662f\u6c42\u7b2c len-k \u5c0f\n\t}\n}\n```\n# End",
        "postTime": 1631432312,
        "uid": 292315,
        "name": "ZCETHAN",
        "ccfLevel": 7,
        "title": "P7834 [ONTAK2010] Peaks \u52a0\u5f3a\u7248"
    },
    {
        "content": "[\u524d\u7f6e\u829d\u58eb](https://www.luogu.com.cn/blog/Peterprpr/p1967-noip2013-ti-gao-zu-huo-ju-yun-shu-ji-lu)\n\n\u9898\u610f\uff1a\u7ed9\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u5b58\u5728\u4e00\u4e2a\u70b9\u6743\uff0c\u8fdb\u884c\u82e5\u5e72\u6b21\u5f3a\u5236\u5728\u7ebf\u8be2\u95ee\uff0c\u4ece\u70b9 $u$ \u51fa\u53d1\uff0c\u53ea\u7ecf\u8fc7\u6743\u503c $\\le x$ \u7684\u8fb9\uff0c\u5230\u8fbe\u7b2c $k$ \u5927\u7684\u70b9\u3002\n\n\u4f60\u5148\u505a\u51fa\u6765\u4e00\u4e2a $\\text{Kruskal}$ \u91cd\u6784\u6811\uff0c\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5efa\u51fa\u6765\u4e00\u4e2a\u9876\u4e0a\u70b9\u6743\u4ee3\u8868\u62e5\u6709\u8fd9\u4e2a\u70b9\u6743\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5b50\u6811\u4e0b\u7684\u70b9\u6784\u6210\u7684\u56fe\u91cc\u968f\u4fbf\u8d70\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u500d\u589e\u5730\u8df3\u7236\u4eb2\uff0c\u4e00\u76f4\u8df3\u5230\u4e00\u4e2a\u70b9\u6743 $\\le x$ \u7684\u6700\u6d45\u70b9\uff0c\u8fd9\u6837\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5c31\u662f\u53ef\u4ee5\u8d70\u5230\u7684\u70b9\u3002\n\n\u7136\u540e\u4f60\u7ef4\u62a4\u4e3b\u5e2d\u6811\uff0c\u7528 $\\text{dfn}$ \u5e8f\u8dd1\u5c31\u884c\u4e86\u3002\n\n\u73b0\u5728\u662f $18:35$\uff0c\u6211\u770b\u6211\u4ec0\u4e48\u65f6\u5019\u5199\u5b8c\u3002\n\n\u73b0\u5728\u662f $20:00$\uff0c\u6211\u5199\u5b8c\u4e86\u3002\n\n```cpp\n#define maxn 1000010\nint n,m,Q;\nint a[maxn],b[maxn];\nint head[maxn],Next[maxn<<1],ver[maxn<<1],tot;\nvoid add(int x,int y){\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\nstruct prpr{\n\tint x,y,z;\n}q[maxn];\nint fa[maxn],rk[maxn];\nint get(int x){\n\tif(x==fa[x])return x;\n\treturn fa[x]=get(fa[x]);\n}\nint fx,fy,cnt;\nint siz[maxn];\nint t,FA[maxn][20];\nstruct qrqr{\n\tint lc,rc,sm;\n}tree[maxn*24];\nint _g_;\nint rt[maxn];\nint insert(int now,int pos,int l=1,int r=b[0]){\n\tint rt=++_g_;\n\ttree[rt]=tree[now];tree[rt].sm++;\n\tif(l==r)return _g_;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)tree[rt].lc=insert(tree[now].lc,pos,l,mid);\n\telse tree[rt].rc=insert(tree[now].rc,pos,mid+1,r);\n\treturn rt;\n}\nint ask(int p,int q,int k,int l=1,int r=b[0]){\n\tif(l==r)return l;\n\tint cnt=tree[tree[q].lc].sm-tree[tree[p].lc].sm;\n\tint mid=(l+r)>>1;\n\tif(k<=cnt)return ask(tree[p].lc,tree[q].lc,k,l,mid);\n\treturn ask(tree[p].rc,tree[q].rc,k-cnt,mid+1,r);\n}\nint dfn[maxn],____;\nvoid dfs(int x){\n\tdfn[x]=++____;\n\trk[____]=x;\n\tsiz[x]=1;\n\tfor(int i=head[x];i;i=Next[i]){\n\t\tint y=ver[i];\n\t\tFA[y][0]=x;\n\t\tfor(int j=1;j<=t;j++)FA[y][j]=FA[FA[y][j-1]][j-1];\n\t\tdfs(y);\n\t\tsiz[x]+=siz[y];\n\t}\n}\nint u,x,k,cc,lst;\nint val[maxn];\nsigned main(){\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\",\"r\",stdin);\n#endif\n\tcin>>n>>m>>Q;\n\tfor(int i=1;i<=n;i++)cin>>a[i],b[i]=a[i];\n\tsort(b+1,b+n+1);\n\tb[0]=unique(b+1,b+n+1)-b-1;\n\tfor(int i=1;i<=n;i++)a[i]=lower_bound(b+1,b+b[0]+1,a[i])-b;\n\tfor(int i=1;i<=m;i++)\n\t\tcin>>q[i].x>>q[i].y>>q[i].z;\n\tsort(q+1,q+m+1,[&](prpr a,prpr b){return a.z<b.z;});\n\tcnt=n;\n\tfor(int i=1;i<=n+m;i++)fa[i]=i;\n\tfor(int i=1;i<=m;i++){\n\t\tfx=get(q[i].x),fy=get(q[i].y);\n\t\tif(fx==fy)continue;\n\t\tfa[fx]=fa[fy]=++cnt;\n\t\tadd(cnt,fx),add(cnt,fy);\n\t\tval[cnt]=q[i].z;\n\t}\n\tt=ceil(log(n)/log(2));\n\tdfs(cnt);\n\tfor(int i=1;i<=____;i++){//\u76f4\u63a5\u679a\u4e3edfn\uff0c\u6211\u89c9\u5f97\u5f88\u5999\u554a\n\t\tif(!head[rk[i]])rt[i]=insert(rt[i-1],a[rk[i]]);\n\t\telse rt[i]=rt[i-1];\n\t}\n\tval[0]=INT_MAX;\n\twhile(Q--){\n\t\tcin>>u>>x>>k;\n\t\tu=(u^lst)%n+1,x=x^lst,k=(k^lst)%n+1;\n\t\tfor(int i=t;~i;i--)\n\t\tif(val[FA[u][i]]<=x)u=FA[u][i];\n\t\tif(tree[rt[dfn[u]+siz[u]-1]].sm-tree[rt[dfn[u]-1]].sm<k)cout<<-1<<endl,lst=0;\n\t\telse cout<<(lst=b[ask(rt[dfn[u]-1],rt[dfn[u]+siz[u]-1],tree[rt[dfn[u]+siz[u]-1]].sm-tree[rt[dfn[u]-1]].sm-k+1)])<<endl;\n\t}\n#ifndef ONLINE_JUDGE\n\tcerr<<endl<<(double)clock()/CLOCKS_PER_SEC;\n#endif\n}\n```\n\u6211\u81ea\u5df1\u4ee3\u7801\u90fd\u4e0d\u8ba4\u8bc6\u4e86\u3002\u3002\u3002\u3002\n\n\u5904\u7406\u6811\u4e0a\u95ee\u9898\u771f\u662f\u9ebb\u70e6\uff0c\u7ec6\u8282\u8981\u8003\u8651\u5468\u5230\u3002\n\n\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u6211\u7684[\u539f\u7248\u8bb0\u5f55](https://www.luogu.com.cn/record/list?pid=P4197&user=100325&page=1)$\\text{TLE}$ \u7684\u539f\u56e0\u662f\u5e76\u67e5\u96c6\u5199\u5047\u4e86\u5462\u3002",
        "postTime": 1633689345,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "P7834 [ONTAK2010] Peaks \u52a0\u5f3a\u7248 \u8bb0\u5f55"
    },
    {
        "content": "# Peaks \u52a0\u5f3a\u7248\uff08\u5f3a\u5236\u5728\u7ebf\u7248\uff09-\u9898\u89e3\n\n### \u9898\u9762\n\n\u5728\u6709 $n$ \u5ea7\u5c71\u5cf0\uff0c\u6bcf\u5ea7\u5c71\u5cf0\u6709\u9ad8\u5ea6 $h_i$\u3002\u6709\u4e9b\u5c71\u5cf0\u4e4b\u95f4\u6709\u53cc\u5411\u9053\u8def\u76f8\u8fde\uff0c\u5171 $m$ \u6761\u8def\u5f84\uff0c\u6bcf\u6761\u8def\u5f84\u6709\u4e00\u4e2a\u56f0\u96be\u503c\u3002\u73b0\u5728\u6709 $Q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u8be2\u95ee\u4ece\u70b9 $p$ \u5f00\u59cb\u53ea\u7ecf\u8fc7\u56f0\u96be\u503c\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u8def\u5f84\u6240\u80fd\u5230\u8fbe\u7684\u5c71\u5cf0\u4e2d\u7b2c $k$ \u9ad8\u7684\u5c71\u5cf0\uff0c\u5982\u679c\u65e0\u89e3\u8f93\u51fa `-1`\u3002\n\n### \u7b97\u6cd5\u6807\u7b7e\n\n- Kruskal \u91cd\u6784\u6811\n\n- \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff08\u4e3b\u5e2d\u6811\uff09\n\n- \u500d\u589e\n\n- \u79bb\u6563\u5316\n\n### \u9898\u76ee\u5206\u6790\n\n\u5bfb\u627e\u53ea\u7ecf\u8fc7\u56f0\u96be\u503c\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u8def\u5f84\u6240\u80fd\u5230\u8fbe\u7684\u5c71\u5cf0\uff0c\u5373\u5bfb\u627e\u70b9 $p$ \u4e0e\u54ea\u4e9b\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u6700\u5927\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8e $x$\u3002Kruskal \u91cd\u6784\u6811\uff08\u4ece\u5c0f\u5230\u5927\u4fbf\u6392\u5e8f\uff09\u4e4b\u540e\uff0c\u4e24\u4e2a\u8282\u70b9\u7684 $\\mathrm{LCA}$ \u70b9\u503c\u5373\u4e3a\u56fe\u4e0a\u8fd9\u4e24\u70b9\u95f4\u8def\u5f84\u6700\u5927\u8fb9\u6743\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e00\u7b97\u6cd5\u5904\u7406\u56fe\uff0c\u5904\u7406\u5b8c\u6210\u4e4b\u540e\u8fd9\u68f5\u6811\u6784\u6210\u4e00\u4e2a\u5927\u6839\u5806\u3002\n\n\u6211\u4eec\u4ece\u70b9 $p$ \u5f00\u59cb\u8d70\uff0c\u5f88\u663e\u7136\uff0c\u5f53\u6211\u4eec\u53ea\u80fd\u5f80\u4e0a\u8d70\u5230\u6743\u503c\u5c0f\u4e8e $x$ \u7684\u70b9\uff0c\u5982\u679c\u518d\u5f80\u4e0a\uff0c\u5c31\u4f1a\u9047\u5230\u8fb9\u6743\u66f4\u5927\u7684\u8fb9\u4e86\u3002\u8fd9\u79cd\u5355\u8c03\u7684\u6027\u8d28\u4f7f\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u500d\u589e\u5411\u4e0a\u8df3\u5230\u8fd9\u4e2a\u70b9\u3002$\\mathrm{LCA}(p,q)$ \u5728\u8fd9\u4e2a\u70b9\u4ee5\u4e0b\u7684 $q$ \u80af\u5b9a\u90fd\u662f\u8fd9\u4e2a\u70b9\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u3002\u6211\u4eec\u8981\u6c42\u7684\u5c31\u8f6c\u6362\u4e3a\u4e86\u8fd9\u4e2a\u70b9\u5b50\u6811\u4e2d\u9ad8\u5ea6\u7b2c $k$ \u9ad8\u7684\u5c71\u5cf0\u3002\u8fd9\u5c31\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u4e86\u3002\n\n\n### \u5b9e\u73b0\u7ec6\u8282\n\n\u6309\u7167 Kruskal \u91cd\u6784\u51fa\u6765\u7684 dfs \u5e8f\u5efa\u7acb\u4e3b\u5e2d\u6811\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u7ba1\u8f96\u8303\u56f4\u7684\u5f00\u59cb\u5bf9\u5e94\u6839\u8282\u70b9\u548c\u7ed3\u675f\u5bf9\u5e94\u6839\u8282\u70b9\u3002\u539f\u56fe\u4e2d\u7684\u8282\u70b9\u5728\u91cd\u6784\u7684\u6811\u4e2d\u5168\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u63d2\u5165\u64cd\u4f5c\u53ea\u5728\u53f6\u5b50\u8282\u70b9\u5b58\u5728\u3002\u63a5\u7740\u5c31\u662f\u4e3b\u5e2d\u6811\u6c42\u7b2c $k$ \u5927\u7684\u677f\u5b50\u4e86\u3002\n\n### \u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define  Int  long long int\n#define  Tem  template\n#define  Pub  public\n\nusing std::min;using std::max;\n\nint n,m,q;\nInt h[100005];\nInt num[100005],newn;//\u5bf9h\u7684\u9700\u79bb\u6563\u5316 \n\nclass Edge{//\u8fb9 \nPub:int a,b;Int c;\n}e[500005];\nclass HJT{//\u4e3b\u5e2d\u6811 \nPub:int size;\n    int ls,rs;\n}t[5000000];\nint root[100005];\nint cnt_HJT;\nint ins(int RT,int L,int R,int x){//\u4e3b\u5e2d\u6811\u63d2\u5165 \n    int rt=++cnt_HJT;\n    t[rt]=t[RT];\n    ++t[rt].size;\n    if(L<R){\n        int M=(L+R)/2;\n        if(x<=M)\n            t[rt].ls=ins(t[RT].ls,L,M,x);\n        else\n            t[rt].rs=ins(t[RT].rs,M+1,R,x);\n    }\n    return rt;\n}\nint kth(int RT1,int RT2,int L,int R,int k){//\u4e3b\u5e2d\u6811\u67e5\u8be2 \n    if(t[RT2].size-t[RT1].size<k)return -1;\n    if(L==R)return L|R;\n    int M=(L+R)/2;\n    if(t[t[RT2].rs].size-t[t[RT1].rs].size>=k)\n        return kth(t[RT1].rs,t[RT2].rs,M+1,R,k);\n    else\n        return kth(t[RT1].ls,t[RT2].ls,L,M,k-(t[t[RT2].rs].size-t[t[RT1].rs].size));\n}\n\nclass Node{//\u91cd\u6784\u6811\u7684\u8282\u70b9 \nPub:Int c[20],cc;\n    int ls,rs,fa[20];\n    int boss;\n    int lrt,rrt;\n}d[200005];\nint cnt_node;\n\nint Boss(int x){//\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29 \n    if(d[x].boss!=x)d[x].boss=Boss(d[x].boss);\n    return d[x].boss;\n}\nvoid Merge(int x,int y,Int c){//\u5e76\u67e5\u96c6\u5408\u5e76\u4e0e\u91cd\u6784\u6811\u65b0\u5efa\u8282\u70b9 \n    x=Boss(x),y=Boss(y);\n    if(x==y)return;\n    d[x].fa[0]=d[x].boss=d[y].fa[0]=d[y].boss=++cnt_node;\n    d[x].c[0]=d[y].c[0]=c;\n    d[cnt_node].boss=cnt_node;\n    d[cnt_node].cc=c;\n    d[cnt_node].ls=x;d[cnt_node].rs=y;\n}\nvoid kruskal(){//Kruskal\u91cd\u6784\u6811 \n    for(int i=1;i<=n;++i)d[i].boss=i;\n    std::sort(e+1,e+1+m,[](Edge a,Edge b)->bool{return a.c<b.c;});\n    for(int i=1;i<=m;++i)\n        Merge(e[i].a,e[i].b,e[i].c);\n}\n\nint cnt_rt;\nvoid dfs(int x){//\u500d\u589e\u9884\u5904\u7406 \n    if(x==0)return;\n    d[x].lrt=cnt_rt;\n    for(int i=1;i<=18;++i){\n        d[x].fa[i]=d[d[x].fa[i-1]].fa[i-1];\n        d[x].c[i]=max(d[x].c[i-1],d[d[x].fa[i-1]].c[i-1]);\n    }\n    if(x<=n){\n        root[cnt_rt+1]=ins(root[cnt_rt],1,newn,h[x]);\n        ++cnt_rt;\n    }\n    dfs(d[x].ls);dfs(d[x].rs);\n    d[x].rrt=cnt_rt;\n}\n\nint lastans;\nvoid query(int st,Int x,int k){//\u67e5\u8be2 \n    for(int i=18;i>=0;--i)\n        if(d[st].c[i]<=x&&d[st].fa[i])\n            st=d[st].fa[i];\n    int ans;\n    if(d[st].cc>x)ans=-1;\n    else ans=kth(root[d[st].lrt],root[d[st].rrt],1,newn,k);\n    if(ans==-1)printf(\"-1\\n\"),lastans=0;\n    else printf(\"%lld\\n\",num[ans]),lastans=num[ans];\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&q);\n    cnt_node=n;\n    \n    for(int i=1;i<=n;++i){\n        scanf(\"%lld\",&h[i]);\n        num[i]=h[i];\n    }\n    std::sort(num+1,num+1+n);\n    newn=std::unique(num+1,num+1+n)-num-1;\n    for(int i=1;i<=n;++i)\n        h[i]=std::lower_bound(num+1,num+1+newn,h[i])-num;\n    \n    for(int i=1;i<=m;++i)\n        scanf(\"%d%d%lld\",&e[i].a,&e[i].b,&e[i].c);\n    kruskal();\n    dfs(cnt_node);\n    while(~--q){\n        int st;Int x;int k;\n        scanf(\"%d%lld%d\",&st,&x,&k);//\u6ce8\u610f\u5f3a\u5236\u5728\u7ebf\u7684\u8f6c\u6362 \n        st=st^lastans;\n        x=x^lastans;\n        k=k^lastans;\n        query(st,x,k);\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1658364866,
        "uid": 492662,
        "name": "Endt_or_endt",
        "ccfLevel": 5,
        "title": "Peaks \u52a0\u5f3a\u7248-\u9898\u89e3"
    },
    {
        "content": "\u770b\u89c1\u6709\u7bc7\u9898\u89e3\u8bf4\u8fd9\u73a9\u610f\u7528\u500d\u589e\u505a.\n\n\u4f5c\u4e3a\u6811\u5256\u515a\u8868\u793a\uff0c\u8fd9\u9053\u9898\u662f\u96be\u4e0d\u4f4f\u6811\u94fe\u5256\u5206\u7684 QWQ\n\n\n------------\n\n### $kruskal$ \u91cd\u6784\u6811\n\n\u6839\u636e\u91cd\u6784\u6811\u7684\u6027\u8d28\uff0c\u663e\u7136\u56fe\u4e0a\u4e24\u70b9\u95f4\u7684\u6700\u5927\u8fb9\u6743\u5373\u4e3a\u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u7684 $LCA$ \u7684\u70b9\u6743\u3002\n\n\u6700\u5c0f\u751f\u6210\u6811\u80fd\u591f\u7ef4\u62a4\u8fde\u901a\u5173\u7cfb\u3002\u6240\u6709\u5728\u539f\u56fe\u8fde\u901a\u7684\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u90fd\u662f\u8fde\u901a\u7684\u3002~~\uff08\u4e5f\u662f\u663e\u7136\uff09~~\n\n\u7531\u4e8e $kruskal$ \u662f\u4ece\u5c0f\u5230\u5927\u8fde\u7684\u8fb9\uff0c\u5219\u6811\u4e0a\u4e24\u70b9\u7684 $LCA$ \u5373\u4e3a\u8054\u901a\u7684\u56fe\u4e0a\u80fd\u4f7f\u4e24\u70b9\u8fde\u901a\u7684 \u4e24\u70b9\u95f4\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u60f3\u8ba9\u4e24\u70b9\u8fde\u901a\uff0c\u5c31\u5fc5\u987b\u7528\u8fd9\u6761\u8fb9\n\n\u800c\u4ece\u4e00\u4e2a\u70b9 $u$ \u51fa\u53d1\uff0c\u8fb9\u6743\u4e0d\u8d85\u8fc7 $x$ \u80fd\u5230\u8fbe\u7684\u70b9\u6709\u4e14\u4ec5\u6709\uff1a\u5176\u671d\u4e0a\u4e00\u76f4\u8d70\u8d70\u5230\u7684\u6700\u8fdc\u7684\uff0c\u70b9\u6743 $<=x$ \u7684\u90a3\u4e2a\u70b9 \u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u70b9\n\n**\u7b80\u8981\u8bc1\u660e\uff1a**\n\n\u4e00\u3001\u56e0\u4e3a $kruskal$ \u91cd\u6784\u6811\u7684\u6027\u8d28\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5176\u5b50\u6811\u4e0a\u7684\u6240\u6709\u70b9\u662f\u4e14\u4ec5\u662f\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e0d\u8d85\u8fc7\u5176\u70b9\u6743\u7684\u8fb9\u76f8\u4e92\u5230\u8fbe\u7684\u70b9\n\n\u5982\u679c\u6709\u8fd9\u4e48\u4e00\u4e2a\u70b9\u6743 $>x$ \u7684\u70b9\uff0c\u662f\u8d77\u70b9\u7684\u7956\u5148\u3002\u60f3\u8981\u4ece\u8d77\u70b9\u5230\u8fbe\u90a3\u4e2a\u70b9\u5fc5\u987b\u7ecf\u8fc7\u70b9\u6743 $>x$ \u7684\u70b9\uff0c\u7136\u800c\u70b9\u6743 $>x$ \u7684\u90a3\u4e2a\u70b9\u5c31\u662f\u8d77\u70b9\u548c\u90a3\u4e2a\u70b9\u7684 $LCA$\n\n\u7531\u4e8e $LCA$ \u5373\u4e3a\u8054\u901a\u7684\u4e24\u70b9\u95f4\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u8f6c\u6362\u6210\u91cd\u6784\u6811\u4e0a\u7684\u70b9\uff0c\u5176\u70b9\u6743\u662f\u6700\u5c0f\u751f\u6210\u6811\u4e24\u70b9\u95f4\u94fe\u4e0a\u7684\u8fb9\u6743\uff0c\n\n\u5219\u60f3\u8981\u4ece\u8d77\u70b9\u5230\u8fbe\u7ec8\u70b9\uff0c\u5c31\u5fc5\u987b\u7ecf\u8fc7\u90a3\u4e2a\u70b9\u6743\u7684\u8fb9\u6743\u3002\u5982\u679c\u8fd9\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u6743\u90fd $>x$ \u4e86\uff0c\u5219\u4ece\u8d77\u70b9\u53ea\u7ecf\u8fc7\u8fb9\u6743 $<=x$ \u7684\u70b9\u662f\u65e0\u6cd5\u5230\u8fbe\u7ec8\u70b9\u7684\u3002\n\n\u4e8c\u3001\u800c\u80fd\u901a\u8fc7\u4e0d\u8d85\u8fc7 $x$ \u8fb9\u6743\u7684\u8fb9\u76f8\u8fde\u7684\u70b9\u4e5f\u5fc5\u4f1a\u8fde\u5230\u4e00\u4e2a\u6839\u70b9\u6743 $<=x$ \u7684\u5b50\u6811\u91cc\uff0c\u4e0d\u4f1a\u8de8\u8fc7\u7ecf\u8fc7\u90a3\u4e2a\u70b9\u6743 $>x$ \u7684\u70b9\n\n\u7efc\u4e0a\uff0c\u5145\u5206\u6027\u548c\u5fc5\u8981\u6027\u90fd\u5f97\u5230\u4e86\u8bc1\u660e\u3002\n\n\n------------\n\n### \u6811\u94fe\u5256\u5206\n\n\u5728\u5904\u7406\u201c\u627e\u5230\u70b9 $u$ \u6700\u8fdc\u7684\u70b9\u6743\u4e0d\u8d85\u8fc7 $x$ \u7684\u7956\u5148\u201d\u7684\u95ee\u9898\u65f6\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u6811\u5256\u5f80\u4e0a\u8df3\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u94fe\uff0c\u9996\u5148\u5224\u65ad\u4e0b\u76ee\u6807\u4f4d\u7f6e\u662f\u5426\u5728\u8fd9\u4e2a\u94fe\u4e0a\uff1a\n+ \u5982\u679c\u5728\u94fe\u4e0a\uff0c\u5219\u76f4\u63a5\u4e8c\u5206\u67e5\u627e\uff08\u660e\u663e\u5c31\u53d8\u6210\u4e00\u4e2a\u4e8c\u5206\u677f\u5b50\u4e86\uff09\n+ \u5982\u679c\u4e0d\u5728\u94fe\u4e0a\uff0c\u5c31\u770b\u4e00\u4e0b\u7ee7\u7eed\u5f80\u4e0a\u7684\u90a3\u6761\u94fe\u4e2d\u662f\u5426\u5b58\u5728\u7b54\u6848\u3002\u662f\u7684\u8bdd\u5c31\u5f80\u4e0a\u8df3\uff0c\u5426\u5219\u5c31\u53d6\u94fe\u7684 $top$ \uff1b\u4e5f\u4e0d\u96be\u60f3\u5230\u3002\n\n------------\n\n\u5177\u4f53\u770b\u4ee3\u7801\uff0c\u6709\u6ce8\u91ca\u3002\n\n\u7136\u540e\u533a\u95f4 $k$ \u5927\u5c31\u62ff\u4e3b\u5e2d\u6811\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u611f\u89c9\u8fd9\u9053\u9898\u79bb\u6563\u5316\u6709\u70b9\u9ebb\u70e6\uff0c\u5728\u67e5\u8be2\u65f6\u8fd8\u5f97\u7ed9\u8f93\u5165\u7684 $x$ \u627e\u5230\u79bb\u6563\u540e\u7684\u503c\uff0c\u800c\u4e0d\u79bb\u6563\u5316\u4e5f\u53ef\u4ee5\u8fc7\u3002\n\n~~\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a\u6211\u592a\u83dc~~\n\n\u5f53\u7136\u500d\u589e\u6216\u6811\u5256+\u4e8c\u5206\u7684\u90e8\u5206\u4e5f\u53ef\u4ee5\u7528 $LCT$ \u5199\uff0c~~\u867d\u7136\u7801\u91cf\u8c8c\u4f3c\u66f4\u591a\u4e86~~\u3002\n\n\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<1)+(x<<3)+(ch&15);ch=getchar();}\n\treturn x*f;\n}\n\nconst int N=1e5+7,M=5e5+7;\n\nint n,m,q;\nint H[N],indeg[N<<1];\nint nn,val[N<<1];\n\nstruct Node {\n\tint u,v,w;\n\tbool operator < (const Node &x) const{return w<x.w;}\n}E[M];\n\nstruct T{int v,next;}edge[N<<2];\nint f[N<<1],cnt;\nvoid insert(int u,int v){//\u4eceu\u5411v\uff0c\u6709\u6839\u6811\n\tedge[++cnt]=T{v,f[u]};f[u]=cnt;\n\tedge[++cnt]=T{u,f[v]};f[v]=cnt;\n\tindeg[v]++;\n}\n\nint Fa[N<<1];//\u865a\u62df\u8282\u70b9\u4e5f\u5360N\u4e2a\nvoid init(){for(int i=1;i<=(n<<1);i++)Fa[i]=i;}\nint find_fa(int x){return x==Fa[x]?x:Fa[x]=find_fa(Fa[x]);}\n\nvoid kruskal(){\n\tsort(E+1,E+m+1);\n\tinit();\n\tfor(int i=1;i<=m;i++){\n\t\tint u=E[i].u,v=E[i].v,w=E[i].w;\n\t\tint fu=find_fa(u),fv=find_fa(v);\n\t\tif(fu^fv){\n\t\t\tval[++nn]=w;\n\t\t\tFa[fu]=Fa[fv]=nn;\n\t\t\tinsert(nn,fu),insert(nn,fv);\n\t\t}\n\t}\n}\n\nint fa[N<<1],deep[N<<1],size[N<<1],hea_s[N<<1];\nvoid dfs1(int u,int fath){\n\tfa[u]=fath;deep[u]=deep[fath]+1;size[u]=1;\n\tfor(int i=f[u];i;i=edge[i].next){\n\t\tint v=edge[i].v;\n\t\tif(v==fath) continue;\n\t\tdfs1(v,u);size[u]+=size[v];\n\t\tif(size[v]>size[hea_s[u]]) hea_s[u]=v;\n\t}\n}\nint SEQ,dfs_s[N<<1],seq_s[N<<1],top[N<<1];\nvoid dfs2(int u,int t){\n\ttop[u]=t;dfs_s[u]=++SEQ;seq_s[SEQ]=u;\n\tif(hea_s[u]) dfs2(hea_s[u],t);\n\telse return;\n\tfor(int i=f[u];i;i=edge[i].next){\n\t\tint v=edge[i].v;\n\t\tif(v^fa[u]&&v^hea_s[u]) dfs2(v,v);\n\t}\n}\n\nint Upper_bound(int a[],int l,int r,int x){//\u6ce8\u610f\u5230\u65f6\u5019\u4ecetop\u5f80u\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684\u6570\u5217\uff0c\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a\n    while(r-l>7){//\u679c\u7136\u5728\u8fd9\u91cc\u8fd8\u662f\u8fd9\u4e48\u5904\u7406\u8fb9\u754c\u6bd4\u8f83\u7701\u4e8b\n        int mid=(l+r)>>1;\n        if(a[mid]<=x) r=mid-1;\n        else l=mid;\n    }\n//    return l;\n    for(int i=r;i>=l;i--) if(a[i]>x) return i;\n\treturn -1;\n}\nint val_s[N<<1];\nint findpos(int u,int x){//\u627e\u5230u\u7684\u7956\u5148\u4e2d\u6700\u540e\u4e00\u4e2aval<=x\u7684\u70b9\u3002\u4fdd\u8bc1\u8fdb\u5165\u51fd\u6570\u65f6u\u5408\u6cd5(<=x)\n//\tcout<<\"find:\"<<u<<endl;\n\tif(val[top[u]]>x){\n//\t\tfor(int i=dfs_s[top[u]];i<=dfs_s[u]+1;i++) cout<<\"bins:\"<<val_s[i]<<endl;\n\t\treturn seq_s[Upper_bound(val_s,dfs_s[top[u]],dfs_s[u],x)+1];//\u7b54\u6848\u5728\u8fd9\u6761\u94fe\u4e0a\n\t}\n\telse if((!fa[top[u]])||val[fa[top[u]]]>x) return top[u];//top\u5408\u6cd5\u800cfa[top]\u4e0d\u5408\u6cd5\n\telse return findpos(fa[top[u]],x);//\u5426\u5219\u5c31\u7ee7\u7eed\u5f80\u4e0a\u9762\u7684\u90a3\u6761\u8fde\u4e0a\u627e\n}//\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u662f\u865a\u62df\u8282\u70b9\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u4f1a\u8dd1\u5230\u539f\u56fe\u8282\u70b9\u4e0a\u6743\u503c\u4e3a0\u7684\u95ee\u9898\n\n//vector <int> vec;\n//inline void prework(){\n//\tfor(int i=1;i<=n;i++) vec.push_back(H[i]);\n//\tsort(vec.begin(),vec.end());\n//\tvec.erase(unique(vec.begin(),vec.end()),vec.end());\n//}\n//inline int getid(int x){\n//    return lower_bound(vec.begin(),vec.end(),x)-vec.begin()+1;\n//}\n\n#define _L 0\n#define _R 1e9+7\n#define mid ((l+r)>>1)\n\nint rt[N<<1],ls[N<<6],rs[N<<6],sum[N<<6];\nint NUM;\nvoid update(int &NEW,int OLD,int l,int r,int x){\n\tNEW=++NUM;ls[NEW]=ls[OLD],rs[NEW]=rs[OLD],sum[NEW]=sum[OLD]+1;\n\tif(l==r) return;\n\tx<=mid?update(ls[NEW],ls[OLD],l,mid,x):update(rs[NEW],rs[OLD],mid+1,r,x);\n}\nint kth(int x,int y,int l,int r,int k){//\u6ce8\u610f\uff0c\u8fd8\u662f\u7b2ck\u5927\u800c\u4e0d\u662f\u7b2ck\u5c0f\n\tif(k>sum[y]-sum[x]) return 0x3f3f3f3f;//\u5224\u8d8a\u754c\n\tif(l==r) return l;\n\tint s=sum[rs[y]]-sum[rs[x]];\n\tif(k<=s) return kth(rs[x],rs[y],mid+1,r,k);\n\telse return kth(ls[x],ls[y],l,mid,k-s);\n}\n\nint query(int u,int x,int k){\n\tint root=findpos(u,x);\n//\tcout<<root<<' '<<u<<endl;\n//\tcout<<rt[dfs_s[root]+size[root]-1]<<' '<<rt[dfs_s[root]-1]<<endl;\n\tint ans=kth(rt[dfs_s[root]-1],rt[dfs_s[root]+size[root]-1],_L,_R,k);\n\treturn ans^0x3f3f3f3f?ans:-1;\n}//\u82e5root=u\uff0c\u5219\u53ea\u80fd\u8d70\u5230\u81ea\u5df1\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u5c31\u54ea\u4e5f\u53bb\u4e0d\u4e86\uff0c\u8fd4\u56de-1\n\nint main(){\n\tn=read(),m=read(),q=read();\n\tnn=n;\n\tint u,v,w;\n\tfor(int i=1;i<=n;i++) H[i]=read();\n\tfor(int i=1;i<=m;i++){\n\t\tu=read(),v=read(),w=read();\n\t\tE[i]=Node{u,v,w};\n\t}\n\tkruskal();\n\tfor(int i=1;i<=nn;i++) if(!indeg[i]) dfs1(i,0),dfs2(i,i);//\u5bf9\u4e8e\u6bcf\u4e2a\u6839\u8fdb\u884c\u8f6c\u6709\u6839\u6811\u6811\u5256\n\tfor(int i=1;i<=nn;i++) val_s[i]=val[seq_s[i]];//\u5e8f\u53f7\u5bf9\u5e94\u7684\u6743\u503c\uff0c\u8fd9\u6837\u628a\u76f8\u90bb\u5e8f\u53f7\u7684\u70b9\u7684\u6743\u503c\u653e\u5230\u4e00\u5757\uff0c\u80fd\u4e8c\u5206\u67e5\u627e\n\tfor(int i=1;i<=nn;i++)\n\t\tif(seq_s[i]<=n) update(rt[i],rt[i-1],_L,_R,H[seq_s[i]]);//\u5e8f\u53f7\u5e8f\u5217\u4e0a\u5efa\u4e3b\u5e2d\u6811\n\t\telse rt[i]=rt[i-1];//\u6ce8\u610f\u53ea\u628a\u5b58\u5728\u4e8e\u539f\u56fe\u4e0a\u7684\u70b9\u8bb0\u5f55\u5230\u4e3b\u5e2d\u6811\u4e0a\uff0c\u865a\u62df\u8282\u70b9\u5c31\u4e0d\u65b0update\u4e86\n\tint x,k;\n\tint lastans=0;\n\tfor(int i=1;i<=q;i++){\n\t\tu=(read()^lastans)%n+1,x=(read()^lastans),k=(read()^lastans)%n+1;\n//\t\tfor(int i=u;i;i=fa[i]) cout<<i<<' '<<val[i]<<endl;\n\t\tint ans=query(u,x,k);\n\t\tlastans=~ans?ans:0;\n\t\tprintf(\"%d\\n\",~ans?ans:-1);\n\t}\n\treturn 0;\n}\n\n#undef _L\n#undef _R\n#undef mid\n```\n",
        "postTime": 1630543854,
        "uid": 145119,
        "name": "WhiteLabs",
        "ccfLevel": 0,
        "title": "Kruskal\u91cd\u6784\u6811+\u6811\u5256+\u4e3b\u5e2d\u6811"
    },
    {
        "content": "### Preface\n\n\u52a0\u5f3a\u7248 $=$ \u5f3a\u5236\u5728\u7ebf\n\n\u505a\u6cd5\uff1a$\\text{Kruskal}$ \u91cd\u6784\u6811 $+\\text{DFS}$ \u5e8f $+$ \u4e3b\u5e2d\u6811\n\n### Analysis\n\n\u5148\u9020\u51fa $\\text{Kruskal}$ \u91cd\u6784\u6811\uff0c\u9884\u5904\u7406\u500d\u589e\u8df3\u7956\u5148\uff0c\u90a3\u95ee\u9898\u8f6c\u5316\u6210\uff1a\n\n**\u6bcf\u6b21\u7ed9 $x,k$\uff0c\u5728\u7ebf\u6c42 $x$ \u5b50\u6811\u5185\u53f6\u5b50\u6743\u503c\u7b2c $k$ \u5927\u3002**\n\n\u6211\u4eec\u6c42\u51fa\u91cd\u6784\u6811\u7684 $\\text{DFS}$ \u5e8f\uff0c\u8fd9\u6837\u5c31\u5c06\u6811\u4e0a\u8f6c\u5316\u6210\u6570\u7ec4\u95ee\u9898\u4e86\uff0c\u7136\u540e\u5c31\u662f [P3834 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 2](https://www.luogu.com.cn/problem/P3834) \u4e86\u3002\n\n### Code\n\n\u4ee3\u7801\u957f\uff0c\u6bd5\u7adf\u662f\u7b97\u6cd5\u53e0\u52a0\u9898\u3002\n\n```cpp\n//Said no more counting dollars. We'll be counting stars.\n#include<bits/stdc++.h>\nusing namespace std;\n#define fir first\n#define sec second\n#define mkp make_pair\n#define pb emplace_back\n#define mem(x,y) memset(x,y,sizeof(x))\n#define For(i,j,k) for(int i=j;i<=k;i++)\n#define Rof(i,j,k) for(int i=j;i>=k;i--)\n#define Fe(x,y) for(int x=head[y];x;x=e[x].nxt)\n#define ckmx(a,b) a=max(a,b)\n#define ckmn(a,b) a=min(a,b)\n#define fin(s) freopen(s,\"r\",stdin)\n#define fout(s) freopen(s,\"w\",stdout)\n#define file(s) fin(s\".in\");fout(s\".out\")\n#define cerr cerr<<'_'\n#define debug cerr<<\"Passed line #\"<<__LINE__<<endl\ntemplate<typename T>T ov(T x){cerr<<\"Value: \"<<x<<endl;return x;}\n#define ll long long\nconst ll mod=1000000007;\ninline ll pw(ll x,ll y){ll r=1;while(y){if(y&1)r=r*x%mod;x=x*x%mod;y>>=1;}return r;}\ninline void mad(ll &a,ll b){a=(a+b)%mod;while(a<0)a+=mod;}\ninline void mmu(ll &a,ll b){a=a*b%mod;while(a<0)a+=mod;}\n#define inv(a) pw(a,mod-2)\n#define int long long\n#define N 100002\n#define M 500002\n#define C 17\n#define gc getchar\n#define pc putchar\ninline int read(){\n\tint x=0;char c=gc();bool f=0;\n\twhile(!isdigit(c)){if(c=='-')f=1;c=gc();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+c-48;c=gc();}\n\tif(f)x=-x;return x;\n}\ninline void write(int x){if(x<0){pc('-');x=-x;}if(x>9)write(x/10);pc(x%10+'0');}\nconst int inf=1e17;\n#define mid ((l+r)>>1)\n//P7834\nstruct Edge{\n\tint u,v,val;\n\tfriend bool operator<(Edge x,Edge y){return x.val<y.val;}\n}g[M];\nstruct node{int ls,rs,sz;}t[(2*C+4)*N];\nint n,m,q,a[N],f[2*N][C+1],son[2*N][2],Rt[2*N],lim,root[2*N],b[2*N],so[N],lis,tot=0,id[N],L[2*N],R[2*N],tim=0;\ninline int grt(int x){return Rt[x]==x?x:Rt[x]=grt(Rt[x]);}\nvoid build(int rt,int l,int r){\n\tif(l==r) return ;\n\tbuild(t[rt].ls=++tot,l,mid);\n\tbuild(t[rt].rs=++tot,mid+1,r);\n}\nvoid add(int lt,int rt,int l,int r,int id){\n\tif(l==r){\n\t\tt[rt].sz=t[lt].sz+1;\n\t\treturn ;\n\t}\n\tif(id<=mid){\n\t\tt[rt].rs=t[lt].rs;\n\t\tadd(t[lt].ls,t[rt].ls=++tot,l,mid,id);\n\t}else{\n\t\tt[rt].ls=t[lt].ls;\n\t\tadd(t[lt].rs,t[rt].rs=++tot,mid+1,r,id);\n\t}\n\tt[rt].sz=t[t[rt].ls].sz+t[t[rt].rs].sz;\n//\tcerr<<rt<<\":\"<<l<<\" \"<<r<<\" \"<<id<<\":\"<<t[rt].sz<<endl;\n}\nvoid dfs(int rt){\n\tL[rt]=tim;\n\tif(rt>n){\n\t\tdfs(son[rt][0]);\n\t\tdfs(son[rt][1]);\n\t}else{\n\t\tid[++tim]=rt;\n\t}\n\tR[rt]=tim;\n}\nint que(int lt,int rt,int l,int r,int k){\n\tif(l==r) return l;\n\tint rsz=t[t[rt].rs].sz-t[t[lt].rs].sz;\n//\tcerr<<lt<<\" \"<<rt<<\":\"<<l<<\"~\"<<r<<\" \"<<k<<\" rsz: \"<<t[t[rt].rs].sz<<\"-\"<<t[t[lt].rs].sz<<endl;\n\tif(rsz>=k) return que(t[lt].rs,t[rt].rs,mid+1,r,k);\n\telse return que(t[lt].ls,t[rt].ls,l,mid,k-rsz);\n}\nsigned main(){\n\tn=read();m=read();q=read();\n\tFor(i,1,n) so[i]=a[i]=read();\n\tsort(so+1,so+1+n);\n\tlis=unique(so+1,so+1+n)-so-1;\n\tFor(i,1,n) a[i]=lower_bound(so+1,so+1+lis,a[i])-so;\n//\tFor(i,1,n) cerr<<a[i]<<\" \"; cerr<<endl;\n\tFor(i,1,2*n-1) Rt[i]=i;\n\tlim=n;\n\tFor(i,1,m) g[i].u=read(),g[i].v=read(),g[i].val=read();\n\tsort(g+1,g+1+m);\n\tint x,y,z;\n\tFor(i,1,m){\n\t\tx=grt(g[i].u);y=grt(g[i].v);\n\t\tif(x==y) continue;\n\t\tRt[x]=Rt[y]=f[x][0]=f[y][0]=++lim;\n\t\tson[lim][0]=x;\n\t\tson[lim][1]=y;\n\t\tb[lim]=g[i].val;\n\t}\n//\tFor(i,n+1,lim) cerr<<i<<\" \"<<son[i][0]<<endl<<i<<\" \"<<son[i][1]<<endl;\n\tFor(j,1,C) For(i,1,lim) f[i][j]=f[f[i][j-1]][j-1];\n\tb[0]=inf;\n\tFor(i,1,lim) if(f[i][0]==0) dfs(i);\n\tbuild(root[0]=++tot,1,lis);\n//\tFor(i,1,n) cerr<<id[i]<<\" \"; cerr<<endl;\n\tFor(i,1,n){\n//\t\tcerr<<i<<\"^^^\"<<endl;\n\t\tadd(root[i-1],root[i]=++tot,1,lis,a[id[i]]);\n\t}\n\tint ans=0;\n\tFor(i,1,q){\n\t\tx=(read()^ans)%n+1;\n\t\ty=read()^ans;\n\t\tz=(read()^ans)%n+1;\n//\t\tcerr<<x<<\" \"<<y<<\" \"<<z<<endl;\n\t\tRof(j,C,0) if(b[f[x][j]]<=y) x=f[x][j];\n//\t\tcerr<<x<<\"##\"<<endl;\n\t\tif(R[x]-L[x]<z){\n\t\t\tans=0;\n\t\t\tputs(\"-1\");\n\t\t}else{\n//\t\t\tcerr<<L[x]<<\"%%%\"<<R[x]<<endl;\n\t\t\tans=so[que(root[L[x]],root[R[x]],1,lis,z)];\n\t\t\twrite(ans);pc('\\n');\n\t\t}\n\t}\nreturn 0;}\n```",
        "postTime": 1649937612,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "P7834 [ONTAK2010] Peaks \u52a0\u5f3a\u7248"
    },
    {
        "content": "\u4e0b\u9762\u79f0 `Kruscal` \u5efa\u6811\u7684\u65f6\u5019\u7684\u4ea7\u751f\u7684\u70b9\u7684\u6743\u503c\u4e3a \u201c\u6743\u503c\u201d\uff0c\u9898\u76ee\u4e2d\u7ed9\u7684\u70b9\u6743\u79f0\u4f5c \u201c\u8d21\u732e\u201d\u3002\n\n+ \u5148\u662f\u5bf9\u4e8e\u539f\u56fe\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u7684\u540c\u65f6\u5efa\u7acb `Kruscal` \u91cd\u6784\u6811\n+ \u968f\u540e dfs \u904d\u5386\u6574\u68f5\u6811\uff0c\u7ef4\u62a4\u597d\u500d\u589e\u6570\u7ec4\u4ee5\u53ca\u7ed9\u53f6\u5b50\u8282\u70b9\uff08\u539f\u56fe\u8282\u70b9\uff09\u7f16\u53f7\uff0c\u5e76\u4e14\u5904\u7406\u51fa\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5305\u542b\u7684\u53f6\u5b50\u8282\u70b9\u7684\u7f16\u53f7 \u6700\u5927 / \u6700\u5c0f\u503c\u3002\n+ \u6309\u7167\u7f16\u53f7\u7684\u987a\u5e8f\u5c06\u53f6\u5b50\u8282\u70b9\u7684 \"\u8d21\u732e\" \u63d2\u5165\u4e3b\u5e2d\u6811\u4e2d\u3002\n+ \u67e5\u8be2\u7684\u65f6\u5019\u5c31\u500d\u589e\u627e\u5230\u8be2\u95ee\u7684\u70b9 $u$ \u5728\u6811\u4e2d\u6700\u8fdc\u7684\u4e00\u4e2a\u6ee1\u8db3\u6743\u503c $\\leq x$ \u7684\u8282\u70b9 $p$\uff08\u56e0\u4e3a\u6df1\u5ea6\u8d8a\u6d45\uff0c\u6743\u503c\u8d8a\u5927\uff09\uff0c\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u91cc\u9762\u4efb\u610f\u4e00\u4e2a\u70b9\u8ddf $u$ \u7684 `LCA` \u7684\u6743\u503c\u4e00\u5b9a\u4f1a $\\leq p$ \u7684\u6743\u503c\u3002\n+ \u6c42 $p$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5305\u542b\u7684\u53f6\u5b50\u8282\u70b9\u7684 \u201c\u8d21\u732e\u201d \u7b2c $k$ \u5927\uff0c\u56e0\u4e3a\u7f16\u53f7\u8fde\u7eed\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e3b\u5e2d\u6811\u533a\u95f4\u67e5\u8be2\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m \\log n + n \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n \\log n)$\n\n#### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read() {\n    int x = 0, flag = 1;\n    char ch = getchar();\n    for( ; ch > '9' || ch < '0' ; ch = getchar()) if(ch == '-') flag = -1;\n    for( ; ch >= '0' && ch <= '9' ; ch = getchar()) x = (x << 3) + (x << 1) + ch - '0';\n    return x * flag;\n}\nconst int MAXN = 2e5 + 50, MAXM = 5e5 + 50;\nint n, m, f[MAXM + MAXN], tot, rt, start[MAXN], q, V[MAXN];\nint fa[MAXN][20], L[MAXN], dfn_id[MAXN], R[MAXN], dep[MAXN], A[MAXN], now = 0;\nint head, tail, Rt[MAXN], cnt = 0;\nvector <int> Son[MAXN];\nstruct Edge {\n    int from, to, w;\n} e[MAXM << 1];\nint find(int x) { return f[x] == x ? x : f[x] = find(f[x]); }\nbool cmp(Edge a, Edge b) { return a.w < b.w; }\nstruct SegmentTree {\n    int ls, rs, Sum;\n} T[MAXN * 16];\n\ninline void DFS(int x, int from) {\n    fa[x][0] = from, dep[x] = dep[from] + 1;\n    L[x] = 1e9 + 7, R[x] = 0;\n    for(int i = 1 ; i <= log2(dep[x]) ; i ++)\n        fa[x][i] = fa[fa[x][i - 1]][i - 1];\n    if(!Son[x].size()) L[x] = R[x] = ++ now, dfn_id[now] = x;\n    for(int i = 0 ; i < Son[x].size(); i ++) {\n        int to = Son[x][i];\n        DFS(to, x);\n        L[x] = min(L[to], L[x]);\n        R[x] = max(R[to], R[x]);\n    }\n    return ;\n}\ninline int insert(int x, int l, int r, int pos) {\n    int cur = ++ cnt, mid = (l + r) >> 1;\n    T[cur] = T[x], T[cur].Sum ++;\n    if(l == r) return cur;\n    if(pos <= mid) T[cur].ls = insert(T[x].ls, l, mid, pos);\n    else T[cur].rs = insert(T[x].rs, mid + 1, r, pos);\n    return cur;\n}\ninline int Getfa(int x, int s) {\n    for(int i = log2(dep[x]) ; i >= 0 ; i --)\n        if(fa[x][i] != 0 && V[fa[x][i]] <= s) x = fa[x][i];\n    return x;\n}\ninline int GetAns(int u, int v, int l, int r, int k) {\n    int S = T[T[v].rs].Sum - T[T[u].rs].Sum, mid = (l + r) >> 1;\n    if(l == r) return l;\n    if(S >= k) return GetAns(T[u].rs, T[v].rs, mid + 1, r, k);\n    else return GetAns(T[u].ls, T[v].ls, l, mid, k - S);\n}\nsigned main() {\n    //freopen(\"out\",\"w\",stdout);\n    n = read(), m = read(), q = read(), rt = n;\n    for(int i = 1 ; i <= n ; i ++) A[i] = read(); \n    for(int i = 1 ; i <= m ; i ++) {\n        int u = read(), v = read(), w = read();\n        e[i] = (Edge) { u, v, w };\n    }\n    for(int i = 1 ; i <= n + m ; i ++) f[i] = i;\n    sort(e + 1, e + 1 + m, cmp);\n    for(int i = 1 ; i <= m ; i ++) {\n        int u = find(e[i].from), v = find(e[i].to);\n        if(u != v) {\n            rt ++, f[u] = f[v] = f[rt] = rt;\n            V[rt] = e[i].w;\n            Son[rt].push_back(u), Son[rt].push_back(v);\n        }\n    } DFS(rt, 0);\n    int Ans = 0;\n    for(int i = 1 ; i <= n ; i ++) \n        Rt[i] = insert(Rt[i - 1], 1, 1e9, A[dfn_id[i]]);\n    for(int i = 1 ; i <= q ; i ++) {\n        int u = (read() ^ Ans) % n + 1, x = read() ^ Ans, k = (read() ^ Ans) % n + 1;\n        u = Getfa(u, x);\n        if(R[u] - L[u] + 1 < k) Ans = 0, printf(\"-1\\n\");\n        else Ans = GetAns(Rt[L[u] - 1], Rt[R[u]], 1, 1e9, k), printf(\"%d\\n\", Ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1629431984,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "Peaks \u52a0\u5f3a\u7248"
    },
    {
        "content": "\u6211\u662f\u5e2e Leasier \u9a8c\u8fd9\u9053\u9898\u7684\u3002\n\n## \u7b97\u6cd5\u601d\u8def\uff1a\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u7528 Kruskal \u91cd\u6784\u6811\u52a0\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u505a\u3002Kruskal\u662f\u5904\u7406\u4e0d\u5927\u4e8e\u6216\u4e0d\u5c0f\u4e8e\u95ee\u9898\u7684\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u662f\u89e3\u51b3\u533a\u95f4\u7b2c\u51e0\u76f8\u5173\u95ee\u9898\u7684\uff0c\u6070\u597d\u53ef\u4ee5\u89e3\u51b3\u8fd9\u9053\u9898\u3002\n\n## \u5177\u4f53\u89e3\u9898\u8fc7\u7a0b\uff1a\n\n\u5c06\u8f93\u5165\u7684\u8fb9\u6309\u7167\u6743\u503c\u7531\u5c0f\u5230\u5927\u5efa\u7acb Kruskal \u91cd\u6784\u6811\uff0c\u8dd1\u4e00\u8fb9 dfs \u6c42\u51fa\u8fd9\u68f5\u91cd\u6784\u6811\u7684 dfs \u5e8f\uff0c\u5c06 dfs \u5e8f\u5bf9\u5e94\u8282\u70b9\u7684\u6743\u503c\u5efa\u7acb\u4e00\u68f5\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u5c06 $v$ \u500d\u589e\u5411\u4e0a\u8df3\u5230\u6743\u503c\u5c0f\u4e8e $x$ \u4e14\u6df1\u5ea6\u6700\u6d45\u7684\u4e00\u4e2a\u70b9 $u$\uff0c\u6839\u636e kruskal \u91cd\u6784\u6811\u7684\u6027\u8d28\uff0c\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u70b9\u6743\uff08\u91cd\u6784\u6811\u4e2d\u7684\u70b9\u6743\u4e3a\u539f\u6765\u7684\u8fb9\u6743\uff09\u4e5f\u4e00\u5b9a\u5c0f\u4e8e $x$\uff0c\u6240\u4ee5\u5c31\u5728 $u$ \u7684 dfs \u5e8f\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u8fd9\u4e00\u6bb5\u533a\u95f4\u627e\u7b2c $k$ \u5927\u7684\u5c31\u884c\u4e86\u3002\n\n\n\n## \u5c0f\u7ec6\u8282\uff1a\n\n$1.$ \u70b9\u6743\u8981\u79bb\u6563\u5316\u3002\n\n$2.$ \u67e5\u8be2\u7b2c $k$ \u5927\u800c\u4e0d\u662f\u7b2c $k$ \u5c0f\u3002\n\n$3.$ \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u53ea\u9700\u8981\u7ef4\u62a4 dfs \u5e8f\u4e0a\u5c0f\u4e8e\u7b49\u4e8e $n$ \u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u4e9b\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff08\u6216\u8005\u53eb\u771f\u5b9e\u8282\u70b9\uff09\u3002\n\n\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int MAXN=5e6+50;\n\nstruct Edge\n{\n\tint x,y,Len,Next;\n}e[MAXN],et[MAXN];\nint elast[MAXN],elastt[MAXN];\nint Tot=0,tott=0;\nint father[MAXN];\nint N,M,Q,Cnt;\nvoid Addt(int x,int y,int Len)\n{\n\ttott++;\n\tet[tott].x=x;\n\tet[tott].y=y;\n\tet[tott].Len=Len;\n\tet[tott].Next=elastt[x];\n\telastt[x]=tott;\n}\nvoid Add(int x,int y)\n{\n\tTot++;\n\te[Tot].x=x;\n\te[Tot].y=y;\n\te[Tot].Next=elast[x];\n\telast[x]=Tot;\n}\nint Size[MAXN];\nbool cmp(Edge a,Edge b)\n{\n\treturn a.Len<b.Len;\n}\nvoid StartFather()\n{\n\tfor(int i=1;i<=2*N;i++)\n\tfather[i]=i;\n\tfor(int i=1;i<=N;i++)\n\tSize[i]=1;\n}\nint getfather(int x)\n{\n\tif(father[x]!=x)\n\tfather[x]=getfather(father[x]);\n\treturn father[x];\n}\nint Nowf;\nint dis[MAXN];\n\nvoid Kruskal()\n{\n\tStartFather();\n\tsort(et+1,et+M+1,cmp);\n\t\n\tfor(int i=1;i<=M&&Nowf<N*2-1;i++)\n\t{\n\t\tint fx=getfather(et[i].x),fy=getfather(et[i].y);\n\t\tif(fx!=fy)\n\t\t{\n\t\t\tNowf++;\n\t\t\tfather[fx]=Nowf;\n\t\t\tfather[fy]=Nowf;\n\t\t\tAdd(Nowf,fx);\n\t\t\tAdd(Nowf,fy);\n\t\t\tdis[Nowf]=et[i].Len;\n\t\t\tSize[Nowf]=Size[fx]+Size[fy];\n\t\t}\n\t}\n}\nint K,f[MAXN][45],depth[MAXN];\nint Nowid=0;\nstruct DFSXU\n{\n\tint In,Out;\n}Dot[MAXN];\nint DFSXU[MAXN];\nvoid dfs(int u,int fa)\n{\n\tdepth[u]=depth[fa]+1;\n\tf[u][0]=fa;\n\tfor(int j=1;;j++)\n\t{\n\t\tf[u][j]=f[f[u][j-1]][j-1];\n\t\tif(f[u][j]==0)\n\t\t{\n\t\t\tK=max(K,j-1);\n\t\t\tbreak;\n\t\t}\n\t}\n\tNowid++;\n\tDot[u].In=Nowid;\n\tDFSXU[Nowid]=u;\n\tfor(int j=elast[u];j;j=e[j].Next)\n\t{\n\t\tint v=e[j].y;\n\t\tif(v!=fa)\n\t\t{\n\t\t\tdfs(v,u);\n\t\t}\n\t}\n\tDot[u].Out=Nowid;\n}\n\n\nstruct Tr\n{\n\tint Sum;\n\tint Ls,Rs;\n}tr[MAXN];\n\n\nint tot=0;\nint A[MAXN],lsh[MAXN];\nint h[MAXN];\nint Tree[MAXN];\nint build(int l,int r)\n{\n\tint u=++tot;\n\ttr[u].Sum=0;\n\tif(l==r)\n\treturn u;\n\tint mid=l+r>>1;\n\ttr[u].Ls=build(l,mid);\n\ttr[u].Rs=build(mid+1,r);\n\treturn u;\n}\nint update(int u,int x,int y,int k)\n{\n\tint u1=++tot;\n\ttr[u1].Sum=tr[u].Sum+1;\n\tif(x==y)\n\t{\n\t\ttr[u1].Ls=tr[u].Ls;\n\t\ttr[u1].Rs=tr[u].Rs;\n\t\treturn u1;\n\t}\n\tint mid=x+y>>1;\n\tif(k<=mid)\n\t{\n\t\ttr[u1].Ls=update(tr[u].Ls,x,mid,k);\n\t\ttr[u1].Rs=tr[u].Rs;\n\t}\n\telse\n\t{\n\t\ttr[u1].Ls=tr[u].Ls;\n\t\ttr[u1].Rs=update(tr[u].Rs,mid+1,y,k);\n\t}\n\n\treturn u1;\n}\n\nint Query(int u1,int u2,int l,int r,int k)\n{\n\tif(l==r)\n\treturn l;\n\tint mid=l+r>>1;\n\tif(tr[tr[u2].Ls].Sum-tr[tr[u1].Ls].Sum>=k)\n\t{\n\t\treturn Query(tr[u1].Ls,tr[u2].Ls,l,mid,k);\n\t}\n\telse\n\t{\n\t\treturn Query(tr[u1].Rs,tr[u2].Rs,mid+1,r,k-tr[tr[u2].Ls].Sum+tr[tr[u1].Ls].Sum);\n\t}\n}\nint Hash[MAXN];\nint main()\n{\n\tscanf(\"%d%d%d\",&N,&M,&Q);\n\tNowf=N;\n\tfor(int i=1;i<=N;i++)\n\t{\n\t\tscanf(\"%d\",&h[i]);\n\t\tlsh[i]=h[i];\n\t}\n\tfor(int i=1;i<=M;i++)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tAddt(a,b,c);\n\t}\n\tKruskal();\n\tdfs(Nowf,0);\n\tsort(lsh+1,lsh+N+1);\n\tCnt=unique(lsh+1,lsh+N+1)-lsh-1;\n\tTree[0]=build(1,Cnt);\n\tfor(int i=1;i<=Nowf;i++)\n\t{\n\t\tif(DFSXU[i]<=N)\n\t\t{\n\t\t\tint tt=lower_bound(lsh+1,lsh+Cnt+1,h[DFSXU[i]])-lsh;\n\t\t\tTree[i]=update(Tree[i-1],1,Cnt,tt);\n\t\t}else{\n\t\t\tTree[i]=Tree[i-1];\n\t\t}\n\t}\n\tint LastAns=0;\n\twhile(Q--)\n\t{\n\t\tint v,x,k;\n\t\tscanf(\"%d%d%d\",&v,&x,&k);\n\t\tv^=LastAns;\n\t\tx^=LastAns;\n\t\tk^=LastAns;\n\t\tv=v%N+1;\n\t\tk=k%N+1;\n\t\tfor(register int i=log2(depth[v]);i>=0;--i)\n\t\t{\n\t\t\tif(dis[f[v][i]]<=x&&f[v][i]!=0)\n\t\t\t{\n\t\t\t\tv=f[v][i];\n\t\t\t}\n\t\t}\n\t\tint Ans;\n\t\tif(Size[v]<k)\n\t\t\tAns=-1;\n\t\telse\n\t\t\tAns=lsh[Query(Tree[Dot[v].In-1],Tree[Dot[v].Out],1,Cnt,Size[v]-k+1)];\n\t\tprintf(\"%d\\n\",Ans);\n\t\tif(Ans!=-1)\n\t\tLastAns=Ans;\n\t\telse\n\t\tLastAns=0;\n\t}\n}\n```",
        "postTime": 1629332869,
        "uid": 335366,
        "name": "0htoAi",
        "ccfLevel": 0,
        "title": "P7834\u9898\u89e3"
    }
]