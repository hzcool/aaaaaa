[
    {
        "content": "# P2738 \\[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\n\n\u8fd9\u4e2a\u9898\u7684\u96be\u70b9\u4e3b\u8981\u5728\u4e8e\u5efa\u56fe, \u53ea\u8981\u56fe\u5efa\u597d\u4e86, \u627e\u4e00\u4e0b\u6700\u5c0f\u73af\u5c31\u597d\u3002\u6240\u4ee5\u6211\u4eec\u4e3b\u8981\u8003\u8651\u600e\u4e48\u5efa\u56fe\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u9898\u7684\u8f93\u5165\u662f\u6309\u8fb9\u6765\u8f93\u5165\u7684, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u5047\u5b9a\u7f16\u53f7\u4e3a $ i $ \u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u662f $2i - 1$ \u548c $2i$ \u5e76\u4e14\u89c4\u5b9a $2i - 1$ \u662f\u5176\u8f93\u5165\u65f6\u7684\u7b2c\u4e00\u4e2a\u7aef\u70b9\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5206\u522b\u5b58\u4e00\u4e0b\u4e24\u4e2a\u7aef\u70b9\u4e0e\u54ea\u4e9b\u8fb9\u76f8\u4ea4, \u7136\u540e\u679a\u4e3e $i$ \u548c $j$, \u5224\u65ad $i$ \u7684\u54ea\u4e2a\u7aef\u70b9\u4e0e $j$ \u7684\u54ea\u4e2a\u7aef\u70b9\u662f\u540c\u4e00\u4e2a\u7aef\u70b9, \u7136\u540e\u53bb\u91cd\u5373\u53ef\u3002\n\n\u90a3\u5982\u4f55\u53bb\u91cd\u5462\uff1f\u6ce8\u610f\u5230\u4e24\u4e2a\u70b9\u76f8\u540c\u8fd9\u6837\u7684\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4, \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u679a\u4e3e\u53d1\u73b0\u4e24\u4e2a\u7aef\u70b9\u76f8\u540c\u65f6\u5c06\u8fd9\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76, \u6700\u540e\u7ed9\u5269\u4e0b\u7684\u6bcf\u4e2a\u6839\u8282\u70b9\u91cd\u65b0\u7f16\u53f7, \u7136\u540e\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6539\u6210\u5176\u6240\u5728\u96c6\u5408\u7684\u6839\u8282\u70b9\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n\u56fe\u5efa\u5b8c\u4e86\u4e4b\u540e\u5c31\u5269\u4e0b\u8dd1\u6700\u5c0f\u73af\u4e86, \u53ef\u4ee5\u7528Floyd\u6765\u7b97, \u4e0d\u8fc7\u7531\u4e8e\u6211Floyd\u7684\u65b9\u6cd5\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5199\u70b8\u4e86, \u6240\u4ee5\u6211\u5c31\u6539\u6210\u679a\u4e3e\u6bcf\u6761\u8fb9, \u7136\u540e\u5bf9\u6bcf\u6761\u8fb9\u4ece\u4e00\u4e2a\u7aef\u70b9\u51fa\u53d1\u8dd1 SPFA (\u4e0d\u8fc7\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u4e0b, \u8dd1 SPFA \u65f6\u8981\u7279\u5224\u8d70\u7684\u8fb9\u662f\u5426\u5c31\u662f\u679a\u4e3e\u7684\u8fd9\u6761\u8fb9)\u518d\u52a0\u4e0a\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6\u5c31\u597d\u3002\n\n\u590d\u6742\u5ea6\u5927\u6982\u5728 $O(n^{2})$ \u5de6\u53f3\u3002\n\n\u4e0b\u9762\u662f\u6211\u7684Code:\n```cpp\n#include<iostream>\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxn = 2e2 + 5;\nint n, x, y, z, l, r, cur, cure, cant;\nint fa[maxn], dy[maxn], head[maxn], nex[maxn], to[maxn], val[maxn], dis[maxn];\nbool al[maxn];\nqueue<int> q;\nstruct node{ //\u5b58\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f \n\tint u, v, w;\n\tbool ltmp[maxn], rtmp[maxn];\n}ep[maxn];\nvoid init(){ // \u5e76\u67e5\u96c6\u521d\u59cb\u5316 \n\tfor(int i = 0;i < maxn;i++){\n\t\tfa[i] = i;\n\t}\n\treturn ;\n}\nint find(int x){ // \u627e\u4e00\u4e2a\u96c6\u5408\u6839\u8282\u70b9 \n\tif(fa[x] == x){\n\t\treturn x;\n\t}\n\treturn fa[x] = find(fa[x]);\n}\nvoid merge(int x, int y){ // \u5408\u5e76\u4e24\u4e2a\u96c6\u5408 \n\tfa[find(x)] = find(y);\n\treturn ;\n}\nvoid add(int u, int v, int w){ // \u94fe\u5f0f\u524d\u5411\u661f \n\tnex[++cure] = head[u];\n\tto[cure] = v;\n\tval[cure] = w;\n\thead[u] = cure;\n\treturn ;\n}\nvoid spfa(int s){ // SPFA \n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(al, 0, sizeof(al));\n\tq.push(s);\n\tdis[s] = 0;\n\tal[s] = 1;\n\twhile(!q.empty()){\n\t\tint fr = q.front();\n\t\tq.pop();\n\t\tal[fr] = 0;\n\t\tfor(int i = head[fr];i;i = nex[i]){\n\t\t\tint t = to[i];\n\t\t\tint k = val[i];\n\t\t\tif(dis[fr] + k < dis[t]){\n            \tif(i == cant || i == cant + 1){ // \u8fd9\u91cc\u7684 cant \u5c31\u662f\u4e0d\u80fd\u8d70\u7684\u8fb9\u7684\u7f16\u53f7\n            \t\tcontinue; \t\t\t\t\t// \u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5cant + 1\u5c31\u662f\u5176\u53cd\u5411\u8fb9 \n            \t}\n\t\t\t    dis[t] = dis[fr] + k; \t\t\t\t\t\t\t\n\t\t\t\tif(al[t]){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tq.push(t);\n\t\t\t\tal[t] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\nint main(){\n\tinit();\n\tscanf(\"%d\", &n);\n\tfor(int i = 1;i <= n;i++){\n\t\tscanf(\"%d %d %d %d\", &x, &z, &l, &r); // \u8f93\u5165 \n\t\tep[x].u = 2 * x - 1;\n\t\tep[x].v = 2 * x;\n\t\tep[x].w = z;\n\t\tfor(int j = 1;j <= l;j++){\n\t\t\tscanf(\"%d\", &y);\n\t\t\tep[x].ltmp[y] = 1; // \u8bb0\u5f55\u4e0e\u90a3\u4e9b\u8fb9\u76f8\u4ea4 \n\t\t}\n\t\tfor(int j = 1;j <= r;j++){\n\t\t\tscanf(\"%d\", &y);\n\t\t\tep[x].rtmp[y] = 1;\n\t\t}\n\t}\n\tfor(int i = 1;i <= n;i++){\n\t\tfor(int j = 1;j <= n;j++){\n\t\t\tif(i == j){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(ep[i].ltmp[j] && ep[j].ltmp[i]){\n\t\t\t\tmerge(ep[i].u, ep[j].u);  \t\t// \u5e76\u67e5\u96c6\u7ef4\u62a4 \n\t\t\t}\n\t\t\tif(ep[i].ltmp[j] && ep[j].rtmp[i]){\n\t\t\t\tmerge(ep[i].u, ep[j].v);\n\t\t\t}\n\t\t\tif(ep[i].rtmp[j] && ep[j].ltmp[i]){\n\t\t\t\tmerge(ep[i].v, ep[j].u);\n\t\t\t}\n\t\t\tif(ep[i].rtmp[j] && ep[j].rtmp[i]){\n\t\t\t\tmerge(ep[i].v, ep[j].v);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 1;i <= 2 * n;i++){\n\t\tif(fa[i] == i){\n\t\t\tdy[fa[i]] = ++cur; // \u7ed9\u5269\u4e0b\u7684\u96c6\u5408\u6839\u8282\u70b9\u91cd\u65b0\u7f16\u53f7 \n\t\t}\n\t}\n\tfor(int i = 1;i <= n;i++){\n\t\tep[i].u = dy[find(ep[i].u)]; // \u53bb\u91cd \n\t\tep[i].v = dy[find(ep[i].v)];\n\t\tadd(ep[i].u, ep[i].v, ep[i].w); // \u52a0\u8fb9 \n\t\tadd(ep[i].v, ep[i].u, ep[i].w);\n\t}\n\tint ans = 0x3f3f3f3f;\n\tfor(int i = 1;i <= cure;i += 2){ // \u7531\u4e8e i + 1 \u5c31\u662f\u5176\u53cd\u5411\u8fb9\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u518d\u679a\u4e3e\u4e00\u6b21, \u8ba9\u5176\u76f4\u63a5\u8df3\u8fc7 \n\t\tint j = (i + 1) / 2;\n\t\tcant = i; // \u8bb0\u5f55\u4e0d\u80fd\u8d70\u7684\u8fb9\u7684\u7f16\u53f7 \n\t\tspfa(ep[j].v); // \u4ece\u4e00\u4e2a\u7aef\u70b9\u8dd1 SPFA \n\t\tans = min(ans, ep[j].w + dis[ep[j].u]); // \u66f4\u65b0\u7b54\u6848 \n\t}\n\tprintf(\"%d\", ans); // \u8f93\u51fa \n\treturn 0;\n} ",
        "postTime": 1583480491,
        "uid": 177999,
        "name": "juicyyou",
        "ccfLevel": 9,
        "title": "P2738 [USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops"
    },
    {
        "content": "\u601d\u8003\u8fd9\u4e48\u4e00\u4e2a\u95ee\u9898\uff1a\u901a\u8fc7\u5e76\u67e5\u96c6\u5efa\u56fe\u975e\u5e38\u9ebb\u70e6\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u5077\u61d2\uff0c\u628a\u8fb9\u770b\u6210\u70b9\u5462\uff1f\n\n\u5e94\u8be5\u53ef\u4ee5\u3002\n\n\u4ece\u8fd9\u79cd\u65b9\u5411\u8d70\u4e0b\u53bb\uff0c\u6211\u4eec\u5c31\u8981\u628a\u8fb9\u6743\u770b\u6210\u70b9\u6743\uff0c\u4e4b\u540efloyd\u6700\u5c0f\u73af\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\uff08\u8fb9\u6539\u70b9\u540e\u7684\uff09\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5c31\u662f\u4e24\u70b9\u95f4\u7ecf\u8fc7\u7684\u70b9\u6743\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n\u5982\u4f55\u89e3\u51b3\u8fb9\u754c\uff1f\n\n**\u5bb9\u65a5\u539f\u7406\u3002**\u628a\u7aef\u70b9\u70b9\u6743\u52a0\u4e0a\uff0c\u5408\u5e76\u65f6\u628a\u8fde\u4e0a\u7684\u4e2d\u95f4\u7aef\u70b9\u7684\u6743\u51cf\u6389\u4e00\u6b21\u3002\n~~\uff08\u8131\u6c34\u7f29\u5408\uff09~~\n\n\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\uff1a\n\n![\u533a\u522b](https://cdn.luogu.com.cn/upload/pic/25554.png)\n\n//\u9ed1\u8272\u4e3a\u539f\u56fe\uff0c\u7ea2\u8272\u4e3a\u8fb9\u6539\u70b9\u540e\u7684\u56fe\u3002\n\n\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u4e09\u8fb9\u662f\u5426\u4ea4\u4e8e\u4e00\u70b9\uff0c\u89e3\u51b3\u65b9\u6cd5\u8be6\u89c1\u4ee3\u7801\u3002\n\n\u8fd9\u79cd\u65b9\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6$O(n^3)$,\u4f18\u70b9\u662f\u4ee3\u7801\u590d\u6742\u5ea6\u975e\u5e38\u4f4e\u3002\n\n\u653e\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=123,inf=0x3f3f3f3f;\nint n,len[N]/*\u65b0\u56fe\u70b9\u6743*/,minc=inf/*\u6700\u5c0f\u73af*/,dist[N][N],g[N][N],rec[N];\nbool f[N][N]/*\u90bb\u63a5\u77e9\u9635*/,jg[N][N][N];/*\u5224\u65ad\u4e09\u8fb9\u662f\u5426\u4ea4\u4e8e\u4e00\u70b9*/\n\nint main(){\n\tscanf(\"%d\",&n);\n\t#define jj(x,y,z) jg[rec[x]][rec[y]][rec[z]]\n\tfor(int inp,ns[3],s,i=1;i<=n;i++){\n\t\tscanf(\"%d\",&s);\n\t\tscanf(\"%d%d%d\",&len[s],&ns[1],&ns[2]);\n\t\trec[0]=s;\n\t\tfor(int h=1;h<=2;h++){\n\t\t\tfor(int j=1;j<=ns[h];j++){\n\t\t\t\tscanf(\"%d\",&inp);\n\t\t\t\tf[s][inp]=f[inp][s]=true;\n\t\t\t\trec[j]=inp;//\u8bb0\u5f55\u8fb9\u4ea4\u4e8e\u4e00\u70b9\u7684\u7f16\u53f7\n\t\t\t\tfor(int k=1;k<j;k++){\n\t\t\t\t\tfor(int l=0;l<k;l++){\n\t\t\t\t\t\tjj(j,k,l)=jj(j,l,k)=jj(l,k,j)=jj(l,j,k)=jj(k,l,j)=jj(k,j,l)=true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tmemset(dist,0x3f,sizeof dist);\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(f[i][j])dist[i][j]=g[i][j]=len[i]+len[j];\n\t\t}\n\t}\n\tfor(int k=1;k<=n;k++){\n\t\tfor(int i=1;i<k;i++){\n\t\t\tif(f[i][k]){\n\t\t\t\tfor(int j=i+1;j<k;j++){\n\t\t\t\t\tif(f[k][j]&&!jg[i][j][k]){\n\t\t\t\t\t\tminc=min(minc,dist[i][j]+g[i][k]+g[k][j]-len[k]-len[i]-len[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tdist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]-len[k]);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",minc);\n\treturn 0;\n}\n```",
        "postTime": 1532688894,
        "uid": 61466,
        "name": "ivorLin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5c31\u662f\u5f17\u6d1b\u4f0a\u5fb7\u5224\u6700\u5c0f\u73af\uff0c\u4f46\u662f\u5efa\u56fe\u975e\u5e38\u6076\u5fc3\u3002\u6240\u4ee5\u6211\u8981\u8bb2\u4e00\u4e0b\u6211\u7684\u5efa\u56fe\u65b9\u6cd5\uff0c\u9996\u5148\u6211\u628a\u6570\u636e\u8bfb\u5165\uff0c\u7136\u540e\u679a\u4e3e\u5b83\u7684\u65c1\u8fb9\uff08\u5b57\u9762\u610f\u601d\uff09\uff0c\u5982\u679c\u4ed6\u7684\u5de6\u8282\u70b9\u6ca1\u6709\u7f16\u53f7\u5c31\u7ed9\u4ed6\u5b9a\u4e2a\u65b0\u7f16\u53f7\uff0c\u5982\u679c\u6709\u7684\u8bdd\u5c31\u8df3\u8fc7\u53bb\uff0c\u5bf9\u53f3\u8fb9\u4e5f\u4e00\u6837\uff0c\u4f46\u662f\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u4f60\u5e76\u4e0d\u77e5\u9053\u90a3\u8fb9\u662f\u5de6\u90a3\u8fb9\u662f\u53f3\uff0c\u6240\u4ee5\u9700\u8981\u5224\u65ad\uff0c\u5728\u8fd9\u91cc\u6211\u7528\u4e86stl\u91cc\u7684set\uff0c\u867d\u8bf4\u5c31\u7b97\u4e0d\u7528\u4e5f\u80af\u5b9a\u4e0d\u4f1aTLE\u4f46\u7528\u540e\u80af\u5b9a\u4f1a\u5feb\uff0c\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u8be6\u60c5\u8bf7\u89c1\u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstring>\n#include <set>\n#include <vector>\nusing namespace std;\nstruct fense{//\u7ed3\u6784\u4f53 \n\tint rc,lc,value;//\u5206\u8fa8\u5bf9\u5e94 \u5de6\u8282\u70b9\u7f16\u53f7 \u53f3\u8282\u70b9\u7f16\u53f7 \u503c \n\tset <int> sl;//\u4e34\u8fb9\u7684\u7f16\u53f7\uff08\u4f9b\u4ed6\u4eba\u67e5\u8be2\u7684\uff09 \n\tset <int> sr;\n\tvector <int> vl;//\u4e34\u8fb9\u7684\u7f16\u53f7\uff08\u4f9b\u81ea\u5df1\u67e5\u8be2\u7684\uff09 \n\tvector <int> vr;\n};\nfense a[20005]; \nint dp[105][105],f[105][105];\nint main(){\n\tint n,id,value,t1,t2,tp,temp=0;//temp\u8868\u793a\u5f53\u524d\u4e0b\u4e00\u4e2a\u8282\u70b9\u5e94\u8be5\u8868\u793a\u7684\u7f16\u53f7 \n\tcin>>n;\n\tfor (int i=1;i<=n;i++){//\u521d\u59cb\u5316 \n\t\ta[i].rc=0; \n\t\ta[i].lc=0;\n\t}\n\tfor(int i=1;i<=n;i++){//\u8bfb\u5165\u6570\u636e \n\t\tcin>>id;\n\t\tcin>>a[id].value>>t1>>t2;\n\t\tfor (int j=1;j<=t1;j++){\n\t\t\tcin>>tp;\n\t\t\ta[id].sl.insert(tp);\n\t\t\ta[id].vl.push_back(tp);\n\t\t}\n\t\tfor (int j=1;j<=t2;j++){\n\t\t\tcin>>tp;\n\t\t\ta[id].sr.insert(tp);\n\t\t\ta[id].vr.push_back(tp);\n\t\t}\n\t}\n\tfor (int i=1;i<=n;i++){//\u6700\u5916\u5c42\u5faa\u73af\u679a\u4e3e\u6bcf\u6761\u8fb9 \n\t\tif (a[i].lc==0) {//\u5982\u679c\u5de6\u8fb9\u8282\u70b9\u6ca1\u7f16\u53f7 \n\t\t\ta[i].lc=++temp;//\u7ed9\u4e88\u7f16\u53f7 \n\t\t\tfor (int j=0;j<a[i].sl.size();j++){//\u679a\u4e3e\u4e34\u8fb9 \n\t\t\t\ttp=a[i].vl[j];\n\t\t\t\tif (a[tp].sr.count(i)==1) a[tp].rc=a[i].lc;//\u5224\u65ad\u5de6\u53f3 \n\t\t\t\tif (a[tp].sl.count(i)==1) a[tp].lc=a[i].lc;\n\t\t\t}\n\t\t} \n\t\tif (a[i].rc==0) {//\u53f3\u4fa7\u540c\u7406 \n\t\t\ta[i].rc=++temp;\n\t\t\tfor (int j=0;j<a[i].sr.size();j++){\n\t\t\t\ttp=a[i].vr[j];\n\t\t\t\tif (a[tp].sr.count(i)==1) a[tp].rc=a[i].rc;\n\t\t\t\tif (a[tp].sl.count(i)==1) a[tp].lc=a[i].rc;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tmemset(dp,0x3f,sizeof(dp));\n\tmemset(f,0x3f,sizeof(f));\n\tint ans=dp[1][1];\n\t//\u5efa\u56fe \n\tfor (int i=1;i<=n;i++){\n\t\tint lc=a[i].lc;\n\t\tint rc=a[i].rc;\n\t\tdp[lc][rc]=a[i].value;\n\t\tdp[rc][lc]=a[i].value;\n\t\tf[lc][rc]=a[i].value;\n\t\tf[rc][lc]=a[i].value;\n\t}\n\t//\u5f17\u6d1b\u4f0a\u5fb7\u5224\u6700\u5c0f\u73af \n\tfor (int i=1;i<=temp;i++){\n\t\tdp[i][i]=0;\n\t\tf[i][i]=0;\n\t}\n\t\n\tfor (int k=1;k<=temp;k++){\n\t\tfor (int i=1;i<=k-1;i++){\n\t\t\tfor (int j=i+1;j<=k-1;j++) ans=min(ans,f[i][k]+f[k][j]+dp[i][j]);\n\t\t}\n\t\tfor (int i=1;i<=temp;i++){\n\t\t\tfor (int j=1;j<=temp;j++) dp[i][j]=min(dp[i][k]+dp[k][j],dp[i][j]);\n\t\t}\n\t}\n\tcout<<ans;\n} \n```\n",
        "postTime": 1550930505,
        "uid": 122077,
        "name": "momo5440",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u6765\u4e2a\u7a0d\u5fae\u9ebb\u70e6\u70b9\u4f46\u6ca1\u6bdb\u75c5\u7684\u505a\u6cd5\uff1a\u5efa\u56fe\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u73af\uff0c\u6240\u6709\u70b9\u4e00\u51718ms\uff0c\u548c\u90a3\u4e9b0ms\u7684\u76f8\u6bd4\u53ef\u80fd\u6709\u4e9b\u6162\n\n\u6700\u5c0f\u73af\u4e0d\u8bf4\u4e86\uff0c\u7528Floyd\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u91cc\u9ebb\u70e6\u7684\u662f\u5efa\u56fe\uff0c\u6839\u636e\u8fb9\u627e\u51fa\u70b9\u6709\u70b9\u56f0\u96be\uff0c\u6211\u7528\u7684\u662f\u5e76\u67e5\u96c6\uff08\u6709\u5927\u4f6c\u63d0\u5230\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e0b\uff09\n\n\u9898\u76ee\u7ed9\u4e86$m$\u6761\u8fb9\uff0c\u5148\u5047\u5b9a\u7b2c$i$\u6761\u8fb9\u7684\u4e24\u7aef\u70b9\u4e3a$2i-1,2i$\uff0c\u5e76\u8bb0\u5f55\u7b2c$i$\u6761\u8fb9\u548c\u7b2c$j$\u6761\u8fb9\u7684\u4ea4\u70b9\u4e3a$connect[i][j]$\uff08\u4e0d\u76f4\u8fde\u5c31\u4e3a0\uff09\uff0c\u8fd9\u6837\u8bfb\u5b8c\u6570\u636e\u540e\u4f1a\u5f97\u5230\u5f88\u591a\u8fde\u63a5\u5173\u7cfb\u3002\n\n\u7531\u4e8e\u9898\u76ee\u4e2d**\u4e0d\u5b58\u5728\u91cd\u8fb9\u6216\u81ea\u73af**\uff0c\u90a3\u4e48\u5c31\u6709\uff1a$connect[i][j]$\u4e0e$connect[j][i]$\u8868\u793a\u7684\u662f\u540c\u4e00\u4e2a\u9876\u70b9\uff08\u800c\u6839\u636e\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u663e\u7136\u8fd92\u4e2a\u503c\u4e0d\u7b49\uff09\u3002\u5982\u4f55\u7ef4\u62a4\u76f8\u7b49\u5173\u7cfb\uff1f\u5f88\u81ea\u7136\u5730\u4f1a\u60f3\u5230\u5e76\u67e5\u96c6\uff0c\u76f4\u63a5\u5408\u5e76\u4e24\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u6839\u636e\u5e76\u67e5\u96c6\u4e2d\u4e0d\u540c\u9876\u70b9\u7684fa\uff0c\u53ef\u4ee5\u5f97\u5230\u5b9e\u9645\u4e0a\u4e0d\u540c\u7684\u9876\u70b9\uff0c\u4f46\u662f\u9700\u8981\u5c06\u5176\u79bb\u6563\u4e00\u4e0b\u3002\u79bb\u6563\u7684\u8fc7\u7a0b\u5f88\u7b80\u5355\uff0c\u8fd9\u91cc\u63d0\u4e00\u4e0b\u3002\u521d\u59cb\u5316$n$\u548c$nid[]$\u4e3a0\uff08$nid[]$\u7528\u4e8e\u6620\u5c04\uff09\uff0c\u5bf9\u4e8e\u70b9$i\u2208[1,2m]$\uff0c\u8003\u5bdf\u5b83\u7684fa\uff0c\u5982\u679c$nid[fa[i]]==0$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u6ca1\u88ab\u52a0\u5165\u56fe\u4e2d\uff0c$nid[i]=++n$\uff0c\u5426\u5219$nid[i]=nid[fa[i]]$\u3002\u7136\u540e\u5faa\u73af\u6bcf\u6761\u8fb9\uff0c\u8fde\u63a5\u70b9$nid[i*2-1]$,$nid[i*2]$\u5373\u53ef\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define MAXN 210\nusing namespace std;\nint n,m,l[MAXN],g[MAXN][MAXN],dist[MAXN][MAXN];\nint connect[MAXN][MAXN]; //\u4e24\u6761\u8fb9\u7684\u4ea4\u70b9\nstruct union_find_set { //\u8d85\u7ea7\u7b80\u6d01\u7684\u5e76\u67e5\u96c6\n\tint n,fa[MAXN];\n\tvoid init(int N) {\n\t\tn=N;\n\t\tfor (int i=1;i<=n;i++) fa[i]=i;\n\t}\n\tint getFather(int u) {\n\t\twhile (u=fa[u]=fa[fa[u]],u!=fa[u]);\n\t\treturn u;\n\t}\n\tbool set_union(int u,int v) {\n\t\treturn (u=getFather(u))==(v=getFather(v)) ? false : fa[v]=u;\n\t}\n} ufs;\ninline int min(int a,int b) {\n\treturn a<b ? a : b;\n}\nint main() {\n\tscanf(\"%d\",&m);\n\t//\u4e00\u5f00\u59cb\u9ed8\u8ba4\u67092m\u4e2a\u70b9\uff0c\u540e\u9762\u8fdb\u884c\u5408\u5e76\n\tfor (int i=0;i<m;i++) {\n\t\tint s,L,n1,n2,x; //\u6807\u53f7\uff0c\u957f\u5ea6\n\t\tscanf(\"%d%d%d%d\",&s,&L,&n1,&n2);\n\t\tl[s]=L;\n\t\tfor (int i=0;i<n1;i++) {\n\t\t\tscanf(\"%d\",&x);\n\t\t\tconnect[s][x]=s*2-1;\n\t\t}\n\t\tfor (int i=0;i<n2;i++) {\n\t\t\tscanf(\"%d\",&x);\n\t\t\tconnect[s][x]=s*2;\n\t\t}\n\t}\n\t//\u5408\u5e76\n\tint nn=m*2,nid[MAXN]={};\n\tufs.init(m*2);\n\tfor (int i=1;i<=m;i++) {\n\t\tfor (int j=1;j<=m;j++) {\n\t\t\tif (connect[i][j]) ufs.set_union(connect[i][j],connect[j][i]);\n\t\t}\n\t}\n\t//\u79bb\u6563\u5316  \u52a0\u8fb9\n\tfor (int i=1;i<=nn;i++) {\n\t\tint fa=ufs.getFather(i);\n\t\tnid[i]=nid[fa] ? nid[fa] : nid[fa]=++n;\n\t}\n\t//\u5efa\u56fe\n\tmemset(dist,0x0f,sizeof dist);\n\tmemset(g,0x0f,sizeof g);\n\tfor (int i=1;i<=m;i++) {\n\t\tint u=nid[i*2-1],v=nid[i*2];\n\t\tg[u][v]=g[v][u]=dist[u][v]=dist[v][u]=l[i];\n\t}\n\t//\u6c42\u89e3\n\tint ans=1<<20;\n\tfor (int i=1;i<=n;i++) dist[i][i]=0;\n\tfor (int k=1;k<=n;k++) {\n\t\tfor (int i=1;i<k;i++) {\n\t\t\tfor (int j=i+1;j<k;j++) {\n\t\t\t\tans=min(ans,dist[i][j]+g[j][k]+g[k][i]);\n\t\t\t}\n\t\t}\n\t\tfor (int i=1;i<=n;i++) {\n\t\t\tfor (int j=1;j<=n;j++) {\n\t\t\t\tdist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1531885987,
        "uid": 32771,
        "name": "\u554a\u561e\u561e\u561e\u561e",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u96be\u5728\u5efa\u56fe\uff0c\u56fe\u5efa\u597d\u4e86\u5c31\u53ef\u4ee5\u4e86\uff0c\u6211\u4eec\u8bbe\u7bf1\u7b06\u6709\u5de6\u53f3\u4e24\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u70b9\u6211\u4eec\u5c31\u53bb\u679a\u4e3e\u8ddf\u4ed6\u6709\u5173\u7684\u8fb9\uff0c\u7136\u540e\u5b58\u5165\u6570\u7ec4\uff0c\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u7136\u540e\u5efa\u5b8c\u56fe\u540eFLOYD\u5224\u6700\u5c0f\u73af\uff0c\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u77e5\u9053FLOYD\u5224\u6700\u5c0f\u73af\u7684\u770b\u8fd9\u7bc7\u535a\u5ba2<http://blog.csdn.net/BroDrinkWater/article/details/62416723>\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define REP(i,a,b) for(register int i = (a), i##_end_ =  (b); i <= i##_end_; ++i)\ninline int read()\n{\n    char c = getchar();register int fg = 1, sum = 0;\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')fg = -1;\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        sum = sum * 10 + c - '0';\n        c = getchar();\n    }\n    return fg * sum;\n}\nconst int maxn = 500;\nint n;\nstruct T\n{\n    int s,len,ls,rs;\n    int l[maxn],r[maxn];\n    int l_id,r_id;\n}a[maxn];\nint dis[maxn][maxn],map[maxn][maxn];\nint id[maxn][maxn],num;\n#define inf 0x3f3f3f3f\nint main()\n{\n    n = read();\n    REP(i,1,n)\n    {\n        a[i].s = read();\n        int ID = a[i].s;a[ID].len = read();a[ID].ls = read();a[ID].rs = read();\n        REP(j,1,a[ID].ls)\n            a[ID].l[j] = read();\n        REP(j,1,a[ID].rs)\n            a[ID].r[j] = read();\n    }\n    int mina = inf;\n    REP(i,1,n)\n    {\n        REP(j,1,n)\n        {\n            if(i == j)continue;\n            dis[i][j] = map[i][j] = inf;\n        }\n    }\n    REP(i,1,n)\n    {\n        if(!a[i].l_id)a[i].l_id = ++num;\n        REP(j,1,a[i].ls)\n        {\n            int x = a[i].l[j];bool flag = 0;\n            REP(k,1,a[x].ls)\n                if(a[x].l[k] == i){flag = 1;break;}\n            if(flag)a[x].l_id = a[i].l_id;\n            else a[x].r_id = a[i].l_id;\n        }\n        if(!a[i].r_id)a[i].r_id = ++num;\n        REP(j,1,a[i].rs)\n        {\n            int x = a[i].r[j];bool flag = 0;\n            REP(k,1,a[x].ls)\n                if(a[x].l[k] == i){flag = 1;break;}\n            if(flag)a[x].l_id = a[i].r_id;\n            else a[x].r_id = a[i].r_id;\n        }\n    }\n    REP(i, 1, n)\n    {\n        int L_id = a[i].l_id;\n        int R_id = a[i].r_id;\n        int len = a[i].len;\n        map[R_id][L_id] = map[L_id][R_id] = len;\n        dis[R_id][L_id] = dis[L_id][R_id] = len;\n    }\n    REP(k,1,num)\n    {\n        REP(i,1,k-1)\n        {\n            REP(j,i+1,k-1)\n            {\n                mina = min(mina,dis[i][j] + map[i][k] + map[k][j]);\n            }\n        }\n        REP(i,1,num)\n        {\n            REP(j,1,num)\n            {\n                dis[i][j] = min(dis[i][j],dis[i][k] + dis[k][j]);\n            }\n        }\n    }\n    printf(\"%d\\n\",mina);\n    return 0;\n}\n```",
        "postTime": 1491745515,
        "uid": 19645,
        "name": "Drinkwater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9053\u9898\u67093\u4e2a\u96be\u70b9\uff1a\n\n\uff081\uff09\u6bcf\u4e00\u6761\u8fb9\u90fd\u6709\u7f16\u53f7\uff0c\u611f\u89c9\u6709\u4e9b\u9ebb\u70e6\uff1a\n\n\u8ba4\u771f\u770b\u9898\u53ef\u4ee5\u53d1\u73b0\u201c\u8fb9\u7684\u6807\u53f7s(1<=s<=N)\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u662f\u628a\u8fb9\n\n\u7684\u987a\u5e8f\u6253\u4e71\u800c\u5df2\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u7ba1\u8fd9\u4e48\u591a\uff0c\u76f4\u63a5\u653e\u4e0a\u53bb\u8fb9\u7684\u7f16\u53f7\uff0c\u7136\u540e\u641c\u7d22\u7684\u65f6\u50191-n\n\n\uff082\uff09\u8fd9\u4e00\u9053\u9898\u7684\u4e3b\u8981\u96be\u70b9\u2014\u2014\u2014\u2014\u627e\u6700\u5c0f\u7684\u73af\u7684\u5927\u5c0f\uff1a\n\n\u8fd9\u4e2adfs\u6216\u8005bfs\u90fd\u53ef\u4ee5\uff0c\u4e0d\u8fc7bfs\u6bcf\u4e00\u4e2a\u961f\u5217\u90fd\u8981\u7528\u7ed3\u6784\u4f53\u5e26\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f46\u662fdfs\u662f\u4e00\u6b21\u641c\u5230\u5e95\uff0c\u6240\u4ee5\u91c7\u7528dfs\u6765\u505a\n\n\u8fd9\u91cc\u8fd8\u8981\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u67e5\u627e\u53ea\u7528\u627e\u4e00\u8fb9\uff0c\u56e0\u4e3a\u73af\u662f\u4e24\u9762\u60f3\u901a\u7684\uff0c\u6240\u4ee5\u627e\u4e00\u8fb9\u5373\u53ef\n\n\u9996\u5148\u5728\u4e3b\u51fd\u6570\u91cc\u9762for\uff08i=1;i<=n;i++\uff09\uff0c\u4f18\u5316\u4e00\u4e0b\u6bcf\u6b21\u641c\u7d22\u5b8c\n\n\u5f00\u59cb\u7684\u90a3\u4e00\u6761\u8fb9\u5c31\u628a\u8fd9\u4e00\u6761\u8fb9\u8bbe\u7f6e\u4e3a\u4e0d\u80fd\u8d70\uff0c\u56e0\u4e3a\u4ee5\u540e\u641c\u7d22\n\n\u5230\u8fd9\u4e00\u6761\u53c8\u4f1a\u628a\u4ee5\u524d\u641c\u8fc7\u7684\u518d\u641c\u4e00\u6b21\uff0c\u6d6a\u8d39\u4e86\u5f88\u591a\u65f6\u95f4\n\n\uff083\uff09\u8fb9\u7684\u65b9\u5411\uff1a\n\n\u56e0\u4e3a\u8fd9\u662f\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u5f97\u6ce8\u610f\u4e00\u4e0b\u65b9\u5411.\n\n\u8f93\u5165\u7684\u65f6\u5019\u628a\u5de6\u8fb9\u7684\u53d8\u8bbe\u7f6e\u4e3a1\uff0c\u53f3\u8fb9\u7684\u8fb9\u8bbe\u7f6e\u4e3a2\n\n\u641c\u7d22\u7684\u65f6\u5019\u5047\u5982\u5728\u8fb9\u7684\u5de6\u8fb9\u5fc5\u987b\u5230\u53f3\u8fb9\u53bb\uff0c\u53f3\u8fb9\u5c31\u5fc5\u987b\u5230\u5de6\u8fb9\u53bb\uff0c\u6bcf\u6b21\u8d70\u90fd\u8981\u52a0\u4e0a\u8ddd\u79bb\n\n\u4ece\u4e00\u6761\u8fb9\u7684\u5de6\u8fb9\u8d70\u5230\u53e6\u4e00\u6761\u8fb9\uff0c\u4f60\u8fd8\u662f\u5728\u4f60\u73b0\u5728\u6240\u5728\u7684\u8fb9\u7684\u5de6\u8fb9\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 110\nusing namespace std;\ntypedef long long ll;\nll n;\nll a[MAXN][MAXN],d[MAXN],ans=0,minn=LONG_MAX;\nbool v[MAXN],bk[MAXN];\nvoid dfs(ll k,ll t,ll flag)//k\u8bb0\u5f55\u5f53\u524d\u6240\u5728\u7684\u8fb9\uff0ct\u8868\u793a\u5de6\u6216\u53f3\uff0cflag\u8868\u793a\u5f00\u5934 \n{\n    if(ans>=minn) return;//\u5982\u679c\u5df2\u7ecf\u8d85\u51fa\u4e86\u6700\u5c0f\u503c\uff0c\u5c31\u80af\u5b9a\u4e0d\u7528\u7ba1\u4e86 \n    if(k==flag)//\u5982\u679c\u8d70\u5230\u4e86\u8d77\u70b9 \n    {\n        minn=ans;//\u8d4b\u503c\u7136\u540e\u8fd4\u56de \n        return;\n    }\n    for(ll i=1;i<=n;i++)//\u679a\u4e3e\u6240\u6709\u7684\u8fb9 \n    {\n        if(v[i]==true && bk[i]==true && a[k][i]==3-t)//\u5982\u679c\u53ef\u4ee5\u8d70\u7684\u8bdd\uff0c3-t\u5c31\u662f\u5728\u53e6\u5916\u4e00\u4e2a\u70b9 \n        {\n            v[i]=false;ans=ans+d[i];//\u8bb0\u4e3a\u4e0d\u53ef\u4ee5\u8d70 \n            dfs(i,a[i][k],flag);//\u5f80\u4e0b\u641c\u7d22 \n            v[i]=true;ans=ans-d[i];//\u56de\u6eaf \n        }\n    }\n}\nint main()\n{\n    ll i,j,t,t1,x,y;\n    scanf(\"%lld\",&n);\n    for(i=1;i<=n;i++)//\u8f93\u5165 \n    {\n        scanf(\"%lld\",&t);\n        scanf(\"%lld%lld%lld\",&d[t],&x,&y);\n        for(j=1;j<=x;j++)//\u8bb0\u5f55\u4f4d\u7f6e \n        {\n            scanf(\"%lld\",&t1);\n            a[t][t1]=1;\n        }\n        for(j=1;j<=y;j++)\n        {\n            scanf(\"%lld\",&t1);\n            a[t][t1]=2;\n        }\n    }\n    memset(bk,true,sizeof(bk));//\u4e00\u5f00\u59cb\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u53ef\u4ee5\u8d70\u7684 \n    for(i=1;i<=n;i++)\n    {\n        memset(v,true,sizeof(v));\n        ans=0;\n        for(j=i+1;j<=n;j++)//\u6211\u4e0d\u60f3\u5224\u65ad\u5f00\u5934\uff0c\u5c31\u76f4\u63a5\u8fd9\u6837\u4e86\uff0ci+1\u662f\u4e00\u4e2a\u4f18\u5316 \n        { \t\n            if(a[i][j]==1)//\u5982\u679c\u5728\u5de6\u8fb9\uff0c\u56e0\u4e3a\u4e0d\u60f3\u4e24\u8fb9\u90fd\u627e\uff0c\u6240\u4ee5\u53ea\u627e\u4e00\u8fb9 \n            //\u5982\u679c\u613f\u610f\u7684\u8bdd\uff0c\u5b8c\u5168\u53ef\u4ee5\u6539\u6210\u53f3\u8fb9\uff0c\u53ea\u662f\u8981\u6ce8\u610f\u4e00\u4e0bans\u8be5\u52a0\u4ec0\u4e48 \n            {\n                v[j]=false;ans=ans+d[j];\n                dfs(j,a[j][i],i);//\u5f00\u59cbdfs \n                v[j]=true;ans=ans-d[j];\n            }\n        }\n        bk[i]=false;\n    }\n    printf(\"%lld\\n\",minn);\n    return 0;\n}\n```\n\n\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u4e0d\u5bf9\u7684\u5730\u65b9\u6216\u8005\u60a8\u53c8\u4e0d\u61c2\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u5927\u5bb6\u53d1\u90ae\u4ef6\u7ed9\u6211",
        "postTime": 1526277307,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u5c31\u662f\u5f88\u88f8\u5f88\u88f8\u7684\u6c42\u6700\u5c0f\u73af\u3002\n\n\u767e\u5ea6\u4e86\u4e09\u79cd\u9898\u89e3\uff0c\u6211\u6765\u7ed9\u5927\u5bb6\u5206\u6790\u4e00\u4e0b\u3002\n\n\u89e3\u6cd5\u4e00\uff1adfs(m^2)\n\n\u89e3\u6cd5\u4e8c\uff1afloyd(n^3)\n\ndfs\u56fa\u7136\u7b80\u5355\uff0c\u4f46\u5982\u679c\u8fd9\u9898\u6570\u636e\u91cf\u8c03\u5927\u800c\u4e14\u662f\u7a20\u5bc6\u56fe\u7684\u8bdd\u5c31\u4e0d\u884c\u4e86\u3002\n\n\u81f3\u4e8e\u9488\u5bf9\u70b9\u64cd\u4f5c\u7684floyd\u3002\u6211\u53ea\u60f3\u8bf4\n\n\u9898\u76ee\u7684\u8f93\u5165\u592a\u6076\u5fc3\u4e86\u3002\n\n\u5bf9\u4e8e\u600e\u4e48\u628a\u8fb9\u96c6\u8f6c\u6362\u6210\u70b9\u96c6\u6211\u4e5f\u770b\u5230\u4e24\u79cd\u65b9\u6cd5\uff08\u6240\u4ee5\u8bf4\u4e09\u79cd\u9898\u89e3\uff09\n\n\u4e00\u662f\u7528\u5e76\u67e5\u96c6\u3002\u4e8c\u662f\u76f4\u63a5\u628a\u4e24\u4e2a\u91cd\u5408\u7684\u70b9\u52a0\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u8fb9\u3002\n\n\u81f3\u4e8e\u7528\u5e76\u67e5\u96c6\u7684\u65b9\u6cd5\uff0c\u672c\u849f\u84bb\u611f\u89c9\u53c8\u9ebb\u70e6\u53c8\u8017\u65f6\u3002\u8fd8\u4e0d\u5982\u76f4\u63a5\u52a0\u8fb9\u597d\u4f7f\u3002\n\n\u539f\u5740\u5728\u6b64http://blog.sina.com.cn/s/blog\\_84438fd70100t6f2.html(\u6211\u90fd\u5f15\u4e86\u539f\u5740\u4e86\u535a\u4e3b\u5e94\u8be5\u4e0d\u4f1a\u6253\u6211\u4e86\u5427\uff09\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48floyd\u7684\u5224\u65ad\u662fd[i]]j]>0\uff0c\u56e0\u4e3a\u6211\u4eec\u91c7\u53d6\u4e86\u6bd4\u8f83\u7279\u6b8a\u7684\u6784\u56fe\uff0c\u5728floyd\u4e2d\uff0c\u7b2ck\u70b9\u80af\u5b9a\u8981\u4e0e\u524d\u4e24\u4e2a\u70b9\u90fd\u6709\u8fb9\u8fde\uff0c\u90a3\u5c31\u80af\u5b9a\u6709\u4e00\u6761\u662f\u503c\u4e3a0\u7684\u8fb9\u3002\u5982\u679cd[i][j]==0\uff0c\u90a3\u4e09\u4e2a\u70b9\u5c31\u91cd\u5408\u4e86\u3002\n\n\u6700\u540e\u9644\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801owo\n\n\n\n\n\n\n\n    \n\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<string>\n#include<cstdio>\n#include<queue>\n#include<stack>\n#include<set>\n#include<map>\n#include<vector>\n#include<climits>\n#define rep(i,s,n) for(int (i)=(s);(i)<=(n);(i)++)\nusing namespace std;\nconst int maxm=110,maxn=220;\nstatic int G[maxn][maxn],v[maxm][maxm],d[maxn][maxn];\nint ans=1<<30,n,scnt;\ninline void init()\n{\n    memset(G,30,sizeof(G));\n    memset(d,30,sizeof(d));\n    memset(v,-1,sizeof(v));\n    int x,y,len,t1,t2;\n    scanf(\"%d\",&n);\n    rep(i,1,n)\n    {\n        scanf(\"%d%d%d%d\",&x,&len,&t1,&t2);\n        G[2*x-1][2*x]=G[2*x][2*x-1]=len;\n        rep(j,1,t1)\n        {\n            scanf(\"%d\",&y);\n            v[x][y]=1;    //1 left,0 right\n        }\n        rep(j,1,t2)\n        {\n            scanf(\"%d\",&y);\n            v[x][y]=0;\n        }\n    }\n    rep(i,1,n-1)\n      rep(j,i+1,n)\n        if(v[i][j]>=0)\n        {\n              G[i*2-v[i][j]][j*2-v[j][i]]=0;\n              G[j*2-v[j][i]][i*2-v[i][j]]=0;\n        }\n}\ninline void mcfloyd()\n{\n    memcpy(d,G,sizeof(G));\n    rep(k,1,2*n)\n    {\n        rep(i,1,k-1)\n          rep(j,i+1,k-1)\n            if(d[i][j]) ans=min(ans,d[i][j]+G[j][k]+G[k][i]); \n    rep(i,1,2*n)\n      rep(j,1,2*n)\n      {\n          d[i][j]=min(d[i][j],d[i][k]+d[k][j]); \n            }\n    }\n}\nint main()\n{\n  freopen(\"e:/in.txt\",\"r\",stdin);\n     init();\n     mcfloyd();\n     printf(\"%d\",ans);\n}\n//by lyyz-ljy\n\u90a3\u8fd9\u4e09\u4e2a\u70b9\u5c31\u91cd\u5408\u4e86\uff0c\u5c31\u6c42\u4e0d\u4e86\u6700\u5c0f\u503c\u4e86\n```",
        "postTime": 1474120588,
        "uid": 17378,
        "name": "Vin_1999",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u6211\u671f\u4e2d\u6d4b\u8bd5\u7684\u4e00\u9898\u6c34\u9898,\u7136\u800c\u82f1\u6587\u9898\u76ee\u592a\u957f\u4e86\u4e0d\u60f3\u8bfb...\u540e\u9762\u8003\u5b8c\u88ab\u540c\u5b66\u63d0\u9192\u540e20\u5206\u949f\u5207\u4e86(\u5fc3\u585e)\n\n\u5207\u5b8c\u770b\u4e86\u6ce2\u9898\u89e3,\u53d1\u73b0\u8c8c\u4f3c\u6211\u7684\u65b9\u6cd5\u8ddf\u5927\u5bb6\u90fd\u4e0d\u4e00\u6837\u5462...\n\n\u5e38\u89c4\u505a\u6cd5: $Floyd$\n\n\u8fd9\u4e2a\u6709\u4e09\u9875\u7684\u9898\u89e3\u4e86,\u672c\u849f\u84bb\u5728\u6b64\u4e0d\u591a\u8bb2\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^3)$\n\n\u6211\u7684\u89e3\u6cd5: $queue+dijkstrra$\n\n\u53ef\u4ee5\u53d1\u73b0,\u5982\u679c\u4e00\u4e2a\u70b9\u7ed5\u4e86\u4e00\u5708\u540e\u8dd1\u56de\u8fdc\u70b9,\u90a3\u4e48\u4ed6\u6240\u8dd1\u7684\u8def\u5c31\u662f\u4e00\u5708\u5468\u957f\n\n\u7528\u8fd9\u4e2a\u601d\u8def,\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u70b9\u8dd1 $dijkstra$ .\u6bcf\u6b21\u7ed5\u4e86\u4e00\u5708\u56de\u5230\u539f\u70b9\u7684\u65f6\u5019(\u80af\u5b9a\u6bd4\u539f\u70b9\u8981\u5927),\u6211\u4eec\u66f4\u65b0\u7b54\u6848,\u4e0d\u66f4\u65b0\u539f\u70b9(~~\u672c\u6765\u4e5f\u4e0d\u9700\u8981\u66f4\u65b0~~)\n\n\u95ee\u9898\u6765\u4e86, $dijkstra$ \u4e0d\u4f1a\u4ece\u81ea\u5df1\u4e00\u6761\u8fb9\u51fa\u53d1,\u518d\u4ece\u5bf9\u5417\u8dd1\u56de\u81ea\u5df1\u5462?\n\n\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u4e00\u4e2a\u70b9:\u5de6\u8fb9\u7aef\u70b9\u6240\u8fde\u7684\u8fb9\u8ddf\u53f3\u8fb9\u7aef\u70b9\u6240\u8fde\u7684\u8fb9\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb.\u57fa\u4e8e\u6b64,\u4e0d\u7ba1\u6211\u4eec\u5728\u70b9 $i$ \u7684\u54ea\u4e00\u4e2a\u7aef\u70b9,\u6211\u4eec\u53ea\u8981\u786e\u8ba4\u53bb\u7684\u70b9 $j$ \u8ddf\u70b9 $i$ \u6240\u8fde\u63a5\u7684\u7aef\u70b9\u7684\u4f4d\u7f6e.\u4f8b\u5982\u6211\u4eec\u5728\u4ed6\u7684\u5de6\u7aef\u70b9,\u6211\u4eec\u53ea\u5c06\u53f3\u7aef\u70b9\u653e\u5165\u961f\u5217.\u53cd\u4e4b\u4f9d\u7136.(\u8bb0\u5f97\u4e0d\u8981\u5728\u7aef\u70b9\u4e4b\u95f4\u5efa\u8fb9)\n\n```cpp\n  int to = 1;//\u5047\u8bbe\u4ed6\u5728\u53f3\u7aef\u70b9(1\u4e3a\u53f3\u7aef\u70b9,0\u4e3a\u5de6\u7aef\u70b9)\n  for (int k : adj[v][0]) if (k==qf) goto abcd;\u5047\u8bbe\u5728\u5de6\u7aef\u70b9\u627e\u5230,\u90a3\u4e48\u5c31\u4e4b\u95f4\u4e0b\u4e00\u6b65(\u56e0\u4e3a\u5982\u679c\u4ed6\u5728\u5de6\u7aef\u70b9,\u4ed6\u8981\u53bb\u7684\u5730\u65b9\u662f\u53f3\u7aef\u70b9,to\u8868\u793a\u7684\u4e0d\u662f\u4ed6\u73b0\u5728\u7684\u5730\u65b9,\u800c\u662f\u8981\u53bb\u7684\u5730\u65b9)\n  to = 0;//\u5982\u679c\u641c\u904d\u5de6\u7aef\u70b9\u90fd\u6ca1\u627e\u5230,\u90a3\u4e48\u8bc1\u660e\u4ed6\u73b0\u5728\u5728\u53f3\u7aef\u70b9,\u8981\u53bb\u5de6\u7aef\u70b9\n  abcd:;\n  if (dist[v][to]>dist[qf][qs]+len[v]){//\u88f8\u7684dijkstra\n      dist[v][to] = dist[qf][qs]+len[v];\n      if (!inq[v][to]){inq[v][to] = true;q.push(make_pair(v,to));}\n\t}\n```\n\n\u6700\u540e\u7684\u7b54\u6848\u66f4\u65b0\u65b9\u6cd5:(\u5728 $dijkstra$ \u91cc\u9762\u66f4\u65b0)\n\n```cpp\nif (v==pos && to==curr) {\n        ans = min(ans,dist[qf][qs]+len[pos]);\n      }\n```\n\n\u5b8c\u6574\u4ee3\u7801:\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\nusing namespace std;\n#define pp pair<int,int>\n#define f first\n#define s second\nint n;\nint len[105],ans = 1e9;\nint dist[105][2];\nbool inq[105][2];\nvector<int> adj[105][2];\nvoid dfs(int pos,int curr){\n  queue<pp> q;\n  memset(dist,0x3f3f,sizeof(dist));\n  dist[pos][curr] = 0;\n  q.push(make_pair(pos,curr));//\u8d77\u70b9(\u8bb0\u5f97\u5c06\u8d77\u70b9\u72b6\u6001\u653e\u8fdb\u53bb\n  while(!q.empty()){\n    int qf = q.front().f,qs = q.front().s;q.pop();\n    inq[qf][qs] = false;\n    for (int v : adj[qf][qs]){\n      int to = 1;\n      for (int k : adj[v][0]) if (k==qf) goto abcd;\n      to = 0;\n      abcd:;//\u4e0a\u9762\u8bb2\u7684\u8f6c\u79fb\u65b9\u5f0f\n      if (dist[v][to]>dist[qf][qs]+len[v]){\n        dist[v][to] = dist[qf][qs]+len[v];\n        if (!inq[v][to]){inq[v][to] = true;q.push(make_pair(v,to));}\n      }\n      if (v==pos && to==curr) {\n        ans = min(ans,dist[qf][qs]+len[pos]);\n      }//\u5982\u679c\u4ed6\u73b0\u5728\u8981\u53bb\u539f\u70b9,\u90a3\u4e48\u66f4\u65b0\u7b54\u6848\n    }\n  }\n}\nint main(){\n  cin >> n;\n  for (int i=0;i<n;i++){\n    int a,b,c,d; cin >> a >> b >> c >> d;\n    len[a] = b;\n    for (int j=0;j<c;j++) {\n      int t; cin >> t;\n      adj[a][0].push_back(t);\n    }\n    for (int j=0;j<d;j++){\n      int t; cin >> t;\n      adj[a][1].push_back(t);\n    }//\u5206\u5f00\u5de6\u53f3\u7aef\u70b9\u5efa\u8fb9\n  }\n  for (int i=1;i<=n;i++) {dfs(i,0);dfs(i,1);}\n  cout << ans;\n}\n\n```\n\n\u590d\u6742\u5ea6\u4ecd\u7136\u662f $O(n^3)$\n\n\u4e3a\u4ec0\u4e48\u5462?\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5c0f\u5730\u65b9:\u5728\u5bfb\u627e\u5de6\u53f3\u7aef\u70b9\u7684\u65f6\u5019\u6700\u574f\u60c5\u51b5\u4f1a\u505an\u6b21.\u8fd9\u4e2a\u8f6c\u79fb\u7528\u6570\u7ec4\u53ef\u4ee5\u4f18\u5316\u6210 $O(1)$ .\u52a0\u4e24\u884c\u4ee3\u7801\u540e\u53ef\u4ee5\u53d8\u6210 $O(n^2)$ ~~\u7136\u800c\u8fc7\u4e86\u5c31\u61d2\u5f97\u6539\u4e86~~\n\n\u63a5\u4e0b\u6765\u5c06\u90a3\u4f4dJava\u5927\u4f6c\u7684\u601d\u8def\u4e86(\u5df2\u5f97\u5230\u6388\u6743):\n[\u5927\u4f6c\u7684\u5730\u5740](https://www.luogu.com.cn/user/232274)\n\n\u5176\u5b9e\u533a\u522b\u4e5f\u4e0d\u5927,\u5c31\u662f\u5c06 $queue$ \u6539\u6210\u4e86 $priority$ $queue$ ,\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u7ec6\u8282\u7684\u533a\u522b\n\n\u5b58\u56fe\u65b9\u6cd5: \u7528 $hashset$ \u6765\u4ee3\u66ff\u6570\u7ec4,\u4fdd\u8bc1\u80fd\u5728 $O(logn)$ \u7684\u901f\u5ea6\u627e\u5230\u8fd9\u4e2a\u6570\n\n\u66f4\u65b0\u7b54\u6848\u65b9\u5f0f:\u4ed6\u5c06\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u6539\u4e3a $inf$ (\u5305\u62ec\u539f\u70b9),\u5728\u539f\u70b9\u51fa\u53d1\u65f6\u76f4\u63a5\u66f4\u65b0\u800c\u4e0d\u662f\u53d6\u6700\u5c0f\u503c.\u8dd1\u5b8c\u4e4b\u540e\u53ea\u9700\u8981\u53d6\u539f\u70b9\u7684\u8ddd\u79bb\u5c31\u662f\u6700\u7ec8\u7b54\u6848\n\u6c42\u662f\u5426\u5728\u7aef\u70b9\u4e0a:\n```java\nif(j==i) {//\u53bb\u5de6\u7aef\u70b9\n\tif(!seg[i].hs2.contains(e.v))continue;//\u8fd9\u4e2a\u70b9\u4e0d\u5728\u53f3\u7aef\u70b9\u5c31\u4e0d\u505a\n\tdist[i] = Math.min(dist[i], seg[i].l+e.w);}//\u770b\u770b\u81ea\u5df1\u80fd\u4e0d\u80fd\u66f4\u65b0\n\tif(seg[j].l+e.w < dist[j]) {\n\t\tdist[j] = seg[j].l + e.w;\n\t\tpq.add(new Status(e.v,j,dist[j]));\n\t}//pq\u66f4\u65b0\u4e0b\u4e00\u4e2a\u6570\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801:\n```java\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n\tprivate static StreamTokenizer st;\n\tprivate static int nextInt()throws IOException{\n\t\tst.nextToken();\n\t\treturn (int)st.nval;\n\t}\n\tpublic static void main(String args[]) throws IOException{\n\t\tst = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint N = nextInt();\n\t\tSegment[] seg = new Segment[N];\n\t\tfor(int i = 0; i < N; ++i) {\n\t\t\tint s = nextInt()-1, l = nextInt(), n1 = nextInt(), n2 = nextInt();\n\t\t\tseg[s] = new Segment(l);\n\t\t\tfor(int j = 0; j < n1; ++j)seg[s].hs1.add(nextInt()-1);\n\t\t\tfor(int j = 0; j < n2; ++j)seg[s].hs2.add(nextInt()-1);\n\t\t}//\u8bb0\u56fe\n\t\t//bfs\n\t\tPriorityQueue<Status> pq = new PriorityQueue<>();\n\t\tint ans = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < N; ++i) {\n\t\t\t//go from hs1 and back to hs2\n\t\t\tint dist[] = new int[N];\n\t\t\tArrays.fill(dist, Integer.MAX_VALUE);\n\t\t\tfor(int j : seg[i].hs1) {\n\t\t\t\tpq.add(new Status(i,j,seg[j].l));\n\t\t\t\tdist[j] = seg[j].l;\n\t\t\t}\n\t\t\twhile(!pq.isEmpty()) {\n\t\t\t\tStatus e = pq.poll();\n\t\t\t\tif(e.w != dist[e.v])continue;\n\t\t\t\tif(seg[e.v].hs1.contains(e.u)) {\n\t\t\t\t\t//\u5f80\u53f3\u7aef\u70b9\u8d70\u7684\u60c5\u51b5\n\t\t\t\t\tfor(int j : seg[e.v].hs2) {\n\t\t\t\t\t\tif(j==i) {\n\t\t\t\t\t\t\tif(!seg[i].hs2.contains(e.v))continue;\n\t\t\t\t\t\t\tdist[i] = Math.min(dist[i], seg[i].l+e.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(seg[j].l+e.w < dist[j]) {\n\t\t\t\t\t\t\tdist[j] = seg[j].l + e.w;\n\t\t\t\t\t\t\tpq.add(new Status(e.v,j,dist[j]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\t//\u5f80\u5de6\u7aef\u70b9\u8d70\u7684\u60c5\u51b5 \n\t\t\t\t\tfor(int j : seg[e.v].hs1) {\n\t\t\t\t\t\tif(j==i) {\n\t\t\t\t\t\t\tif(!seg[i].hs2.contains(e.v))continue;\n\t\t\t\t\t\t\tdist[i] = Math.min(dist[i], seg[i].l+e.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(seg[j].l+e.w < dist[j]) {\n\t\t\t\t\t\t\tdist[j] = seg[j].l + e.w;\n\t\t\t\t\t\t\tpq.add(new Status(e.v,j,dist[j]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tans = Math.min(ans, dist[i]);\n\t\t}\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\tpw.println(ans);\n\t\tpw.close();\n\t}\n\tprivate static class Segment{\n\t\tint l;\n\t\tHashSet<Integer> hs1, hs2;\n\t\tpublic Segment(int l) {\n\t\t\tthis.l = l;\n\t\t\ths1 = new HashSet<>();\n\t\t\ths2 = new HashSet<>();\n\t\t}\n\t}\n\tprivate static class Status implements Comparable<Status>{\n\t\tint u, v, w;\n\t\tpublic Status(int u, int v, int w) {\n\t\t\tthis.u = u;\n\t\t\tthis.v = v;\n\t\t\tthis.w = w;\n\t\t}\n\t\t@Override\n\t\tpublic int compareTo(Status o) {\n\t\t\treturn w-o.w;\n\t\t}\n\t}\n}\n```\n\u590d\u6742\u5ea6 $O(n^2log^2n)$ \u7b2c\u4e00\u4e2a $log $\u5728 $pq$ ,\u7b2c\u4e8c\u4e2a $log$ \u5728 $set$.\u7136\u800c\u7531\u4e8e $priority$ $queue$ $dijkstra$ \u7684\u6027\u8d28,\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\u8dd1\u4e0d\u6ee1\u8fd9\u4e2a\u65f6\u95f4,\u9884\u4f30\u65f6\u95f4 $O(n^2)$.\n\n~~\u7136\u800c\u8fd9\u4f4d\u5927\u4f6c\u7528\u7684java,\u4e8e\u662f\u5728\u6d1b\u8c37\u65f6\u95f4\u88ab\u8650\u7684\u4f53\u65e0\u5b8c\u80a4~~",
        "postTime": 1582534550,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u6211\u7684\u4e60\u60ef\u603b\u662f\u76f4\u63a5\u5199hash\u4f5c\u4e3a\u51fd\u6570\u6216\u8005\u53d8\u91cf\u540d...\u7136\u540e\u6bcf\u6b21\u90fdCE...\u5c31\u662f\u63d0\u9192\u5927\u5bb6\u6ce8\u610f\u4fdd\u7559\u5b57\u7684\u95ee\u9898\u3002DEV C++\u5199hash\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u6d1b\u8c37\u8981\u6c42\u66f4\u52a0\u4e25\u683c\uff0c\u4e5f\u6709\u52a9\u4e8e\u597d\u4e60\u60ef\u3002\n\n\u505a\u6cd5\u4e00\n\n\u6c42\u65e0\u5411\u56fe\u4e2d\u7684\u6700\u5c0f\u73af\u3002\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u505am \u904ddijkstra\u2014\u2014\u6bcf\u6b21\u627e\u5230\u4e00\u6761\u8fb9\uff0c\u62ff\u6389\uff0c\u6c42\u8fd9\u6761\u8fb9\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e24\u70b9\u95f4\u5b58\u5728\u6700\u77ed\u8def\uff0c\u5219\u8fd9\u6761\u8def\u5f84\u4e0e\u539f\u6765\u7684\u8fb9\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u73af\u3002\u8fd9\u6837\u6240\u6709\u73af\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u5c31\u662f\u7b54\u6848\u3002\u95ee\u9898\u662f\u9898\u76ee\u7ed9\u51fa\u7684\u662f\u8fb9\u8fde\u901a\u7684\u4fe1\u606f\u800c\u975e\u70b9\u8fde\u901a\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5f97\u5230\u7684\u4fe1\u606f\u65e0\u6cd5\u6309\u7167\u5e38\u89c4\u7684\u65b9\u6cd5\uff08\u90bb\u63a5\u77e9\u9635\uff0c\u90bb\u63a5\u8868\uff09\u6765\u6784\u56fe\u3002\u8fd9\u91cc\u5c31\u9700\u8981\u4e00\u4e2a\u8f6c\u5316\u3002\u7531\u4e8e\u6211\u60f3\u4e0d\u5230\u4ec0\u4e48\u597d\u7684\u7b97\u6cd5\uff0c\u6240\u4ee5\u5c31\u7528\u4e86\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3aO(n^2)\u7684\u8f6c\u5316\u3002\u9996\u5148\u5c06\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u90fd\u770b\u4f5c\u5355\u72ec\u7684\u70b9\uff08\u4e5f\u5c31\u662f\u8bf4\u5047\u8bbe\u6240\u6709\u8fb9\u90fd\u4e0d\u8fde\u901a\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5206\u522b\u8bbe\u7b2ci \u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u7f16\u53f7\u4e3ai\\*2-1 \u548ci\\*2\uff09\uff0c\u7136\u540e\u5bf9\u4e8e\u4e24\u6761\u8fde\u901a\u7684\u8fb9\uff0c\u5c06\u8fde\u901a\u8fd9\u4e24\u6761\u8fb9\u7684\u70b9\u5e76\u5728\u4e00\u8d77\u3002\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u5c06\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u8fde\u901a\u60c5\u51b5\u5168\u90e8\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u70b9\uff0c\u5e76\u4fee\u6539\u56fe\u4e2d\u5176\u4ed6\u4e0e\u8be5\u70b9\u8fde\u901a\u7684\u70b9\u4fe1\u606f\u4f7f\u5f97\u5408\u5e76\u6210\u7acb\u3002\u8fd9\u91cc\u6211\u501f\u52a9\u4e86\u5e76\u67e5\u96c6\uff0c\u4f7f\u5f97\u6bcf\u6b21\u67e5\u627e\u7684\u65f6\u95f4\u90fd\u8fd1\u4f3c\u4e3a\u5e38\u6570\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(n^2)\u3002\u5176\u4e2dn \u662f\u5408\u5e76\u540e\u603b\u7684\u70b9\u7684\u4e2a\u6570\u7ecf\u8fc7\u4e0a\u8ff0\u8f6c\u5316\u4ee5\u540e\uff0c\u518d\u7528m\u904ddijkstra\uff0c\u603b\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662fO(mn^2)\u3002\n\n\u505a\u6cd5\u4e8c\n\n\u8fd9\u9053\u9898\u7ed9\u7684\u6570\u636e\u662f\u8fb9\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u9996\u5148\u60f3\u5230\u7684\u662f\u6784\u56fe\uff0c\u7136\u540e\u5957\u7ecf\u5178\u7684\u6700\u77ed\u8def\u505a.\u4f46\u662f\u8fd9\u9053\u9898\u7684\u6570\u636e\u8f93\u5165\u4f1a\u4f7f\u6309\u70b9\u6784\u56fe\u5f88\u9ebb\u70e6\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u641c\u7d22\u5373\u53ef\uff0c\u800c\u4e14\u52a0\u526a\u679d\u540e\u5f88\u5feb.\u7531v\u6761\u8fb9\u5f00\u59cb\u641c\u7d22\u5728\u5b83b\u65b9\u5411\u7684\u8fb9\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u56de\u5230v \u800c\u4e14\u662f\u7531a\u65b9\u5411\u56de\u5230\u7684\uff0c\u4e3a\u4e86\u5224\u65ad\u73af\u53ef\u4ee5\u52a0\u4e2a\u5224\u91cd\uff0c\u4e00\u4e2a\u526a\u679d:\u5bf9\u4e8e\u8def\u5f84\u957f\u5ea6\u5927\u4e8e\u5df2\u77e5\u6700\u5c0f\u73af\u7684\u53ef\u526a\u3002\n\n\u505a\u6cd5\u4e09\n\n\u4e00\u79cd\u6bd4\u8f83\u8be1\u5f02\u7684\u65b9\u6cd5\u3002\u5c31\u662f\u628a\u8fb9\u53d8\u6210\u201c\u70b9\u201d\u3002\u5728\u628a\u201c\u8fb9\u201d\u7684\u957f\u5ea6\u8bbe\u5b9a\u4e3a\u8fb9\u4e24\u7aef\u7684\u201c\u70b9\u201d\uff08\u65e2\u539f\u6765\u7684\u8fb9\uff09\u7684\u957f\u5ea6\u7684\u548c\u3002\u7528\u7531floyed\u7b97\u6cd5\u6539\u8fdb\u7684\u6c42\u6700\u5c0f\u73af\u7684\u7b97\u6cd5\u6c42\u6700\u5c0f\u73af\u3002\u6ce8\u610f\u7684\u662f\u679a\u4e3e\u201c\u70b9\u201d\u65f6\uff0c\u6ce8\u610f\u201c\u70b9\u201d\u8fde\u63a5\u7684\u4e24\u201c\u70b9\u201d\u8981\u662f\u5206\u522b\u8fde\u63a5\u5230\u8be5\u201c\u70b9\u201d\u4ee3\u8868\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e3aO(n^3)\u3002\u8d85\u7ea7\u5feb\u3002\u8bc1\u660e\u7565\uff0c\u6709\u5174\u8da3\u7684\u81ea\u5df1\u60f3\u4e00\u4e0b\u3002\n\n\u505a\u6cd5\u56db\n\n\u4ecd\u7136\u662f\u6c42\u6700\u5c0f\u73af\uff0c\u5148\u5c06\u8fb9\u90bb\u63a5\u77e9\u9635\u8f6c\u4e3a\u70b9\u90bb\u63a5\u77e9\u9635\uff0c\u518ddfs \u6c42\u51fa\u6240\u6709\u73af\u3002\u53ef\u4ee5\u8bc1\u660e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^3)\uff0c\u6240\u4ee5\u80fd\u5feb\u901fAC\u3002\n\n\u4e0b\u9644\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong a[303][303]={0},n=0,m=0,l[303]={0},ans=LONG_MAX,y=0;\nbool hahash[303]={false},kk[303]={0};\nvoid dfs(long goal,long u,long t){\n    if(goal==u){\n        if(y<ans)ans=y;\n            return;\n    }\n    if(y>=ans)return;\n    for(long i=1;i<=n;i++)\n        if(!hahash[i]&&!kk[i]&&a[u][i]==3-t){\n            kk[i]=true;\n            y+=l[i];\n            dfs(goal,i,a[i][u]);\n            y-=l[i];\n            kk[i]=false;\n        }\n}\nint main(){\n    cin>>n;\n    for(long i=1;i<=n;i++){\n        long temp,l1,l2;\n        cin >>temp;cin >>l[temp]>>l1>>l2;\n        for(long j=1;j<=l1;j++){\n            long p=0;cin>>p;\n            a[temp][p]=1;\n        }\n        for(long j=1;j<=l2;j++){\n            long p=0;cin>>p;\n            a[temp][p]=2;\n        }\n    }\n    for(long i=1;i<=n;i++){\n        y=0;\n        memset(kk,0,sizeof kk);\n        for(long j=1;j<=n;j++)\n            if(a[i][j]==1&&!hahash[j]){\n                kk[j]=true;\n                y+=l[j];\n                dfs(i,j,a[j][i]);\n                kk[j]=false;\n                y-=l[j];\n            }\n        hahash[i]=true;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1504277981,
        "uid": 39922,
        "name": "vinvor",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u5c31\u662f\u6c42\u4e00\u4e2a\u6700\u5c0f\u73af\u3002\u96be\u70b9\u662f\u9898\u76ee\u7ed9\u4f60\u7ed9\u51fa\u7684\u662f\u8fb9\u7684\u4fe1\u606f\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u5c06\u8fb9\u7684\u4fe1\u606f\u8f6c\u5316\u5230\u70b9\u4e0a\u9762\u6765\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u8fb9\u5206\u914d\u8282\u70b9\u3002\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1aa->b\u5982\u679c\u4e24\u6761\u8fb9\u90fd\u662f\u8fd9\u6837\u7684\u3002\u4e5f\u5c31\u662f\u4ed6\u4fe9\u662f\u91cd\u8fb9\uff0c\u8fd9\u79cd\u8fb9\u662f\u5934\u63a5\u5934\uff0c\u5c3e\u63a5\u5c3e\u3002\u4e4b\u540e\u5c31\u662f\u5efa\u56fe\uff0c\u7136\u540e\u7528Floyd\u8dd1\u51fa\u6700\u5c0f\u73af\u4e86\u3002\uff08\u7b2c\u4e00\u6b21\u505a\u8fd9\u79cd\u6700\u5c0f\u73af\u7684\u9898\u76ee\uff0c\u5efa\u56fe\u8fd8\u662f\u53c2\u8003\u7684\u697c\u4e0b\u5927\u4f6c\u7684\u601d\u8def\u3002\uff09\u6211\u770b\u5230\u7f51\u4e0a\u8fd8\u6709\u4e00\u4e9b\u8bf4CLZ\u7b97\u6cd5\u6c42\u89e3\u6700\u5c0f\u73af\u7684\u3002\u5e0c\u671b\u6709\u5927\u4f6c\u80fd\u5199\u4e00\u7bc7\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 10010\n#define maxnode 2000005\n#define sigma_size 26\n#define md 12345678\n//#define INF 0x3f3f3f3f\n#define INF 10000000\nusing namespace std;\ntypedef long long LL;\n\nstruct Edge\n{\n    int Ln,Rn,len;\n    int cl[MAXN],cr[MAXN];\n    int id_l,id_r;\n};\nEdge P[20020];\nint n,ncnt;\nint mp[110][110],cc[110][110];\n\nvoid init()\n{\n    for(int i=1;i<=n;i++)                         //\u5904\u7406\u51fa\u5de6\u8fb9\u8282\u70b9\n    {\n        if(!P[i].id_l)                                      //\u770b\u8fd9\u4e2a\u8fb9\u7684\u5de6\u8fb9\u7aef\u70b9\u662f\u4e0d\u662f\u5df2\u7ecf\u88ab\u6807\u8bb0\n           P[i].id_l=++ncnt;                            //\u6ca1\u6709\u5c31\u7ed9\u4ed6\u5206\u914d\u4e00\u4e2a\u7f16\u53f7\n        for(int j=1;j<=P[i].Ln;j++)\n        {\n            int x=P[i].cl[j];                                 //\u679a\u4e3e\u51fai\u8fb9\u7684\u5de6\u8fb9\u7684\u8fb9\n            bool flag=false;\n            for(int k=1;k<=P[x].Ln;k++)\n            {\n                int y=P[x].cl[k];\n                if(y==i)\n                {\n                    flag=true;\n                    break;\n                }\n            }\n            if(flag)                                           //\u8fd9\u4e24\u6761\u8fb9a->b\uff0c\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u662f\u5934\u63a5\u5934\uff0c\u5c3e\u63a5\u5c3e\n                P[x].id_l=P[i].id_l;\n            else\n                P[x].id_r=P[i].id_l;                //\u8fd9\u4e2a\u662f\u5934\u63a5\u5c3e\uff0c\u5c3e\u63a5\u5934\n        }\n    }\n    for(int i=1;i<=n;i++)\n        {if(!P[i].id_r)                                                   //\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u8fd8\u6ca1\u6709\u88ab\u7f16\u53f7\n            P[i].id_r=++ncnt;                                         //\u5206\u914d\u7f16\u53f7\n        for(int j=1;j<=P[i].Rn;j++)\n        {\n            int x=P[i].cr[j];\n            bool flag=false;\n            for(int k=1;k<=P[x].Rn;k++)\n            {\n                int y=P[x].cr[k];\n                if(y==i)\n                {\n                    flag=true;\n                    break;\n                }\n            }\n            if(flag)\n                P[x].id_r=P[i].id_r;                             //\u5934\u63a5\u4e0a\u5934\n            else\n                P[x].id_l=P[i].id_r;                             //\u9996\u5c3e\u76f8\u63a5\n          }\n    }\n    for(int i=1;i<=ncnt;i++)                             //\u521d\u59cb\u60c5\u51b5\u8bbe\u7f6e\u4e3a\u6b63\u65e0\u7a77\n    {\n        for(int j=1;j<=ncnt;j++)\n        {\n            mp[i][j]=mp[j][i]=INF;\n            cc[i][j]=cc[j][i]=INF;\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        mp[P[i].id_l][P[i].id_r]=mp[P[i].id_r][P[i].id_l]=cc[P[i].id_l][P[i].id_r]=cc[P[i].id_r][P[i].id_l]=P[i].len;\n    }\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    int id;\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&id);\n        scanf(\"%d %d %d\",&P[id].len,&P[id].Ln,&P[id].Rn);\n        for(int j=1;j<=P[id].Ln;j++)\n            scanf(\"%d\",&P[id].cl[j]);\n        for(int j=1;j<=P[id].Rn;j++)\n            scanf(\"%d\",&P[id].cr[j]);\n    }\n    init();                                                                   //\u5b8c\u6210\u7b54\u5bf9\u8282\u70b9\u7684\u7f16\u53f7\n    for(int i=1;i<=ncnt;i++)                                  //\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8fb9\u6743\u503c\u4e3a0\n        mp[i][i]=cc[i][i]=0;\n    int ans=INF;\n    for(int i=1;i<=ncnt;i++)\n    {\n        for(int j=1;j<i;j++)\n        {\n            for(int k=j+1;k<i;k++)\n            {\n                if(cc[i][j]+cc[i][k]+mp[j][k]<INF)\n                    ans=min(ans,cc[i][j]+cc[i][k]+mp[j][k]);\n            }\n        }\n        for(int j=1;j<=ncnt;j++)\n        {\n            for(int k=1;k<=ncnt;k++)\n                mp[j][k]=min(mp[j][k],mp[j][i]+mp[i][k]);\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```\n\n",
        "postTime": 1574575922,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4ec0\u4e48\uff1f  \n\u5f00\u59cb\u6211\u6309\u666e\u901a\u7684\u601d\u8defdfs\u5efa\u56fe\u3002  \n```cpp\nbool pd[110];\nvoid dfs(int ln,int le,int flag)\n{\n\t#define edge a[flag][le][i]\n\t#define node vis[le][flag]\n\tif(!node)node=++n;\n\tpd[le]=1;\n\td[ln][node]=d[node][ln]=v[le];\n\t//printf(\"%d %d\\n\",le,node);\n\tfor(int i=0;edge;i++)\n\t\tvis[edge][isf[edge][le]]=node;\n\tfor(int i=0;edge;i++)\n\t\tif(!pd[edge])\n\t\t\tdfs(node,edge,!isf[edge][le]);\n\t#undef edge\n}\n```\n\u7ed3\u679c\u53d1\u73b0\u975e\u5e38\u96be\u8c03\uff0c\u4e3b\u7a0b\u5e8f\u8fd8\u6709\u5f88\u591a\u7ec6\u8282\uff0c\u6700\u521d10+bug\uff0c\u6d6a\u8d39\u4e86\u4e09\u4e2a\u5c0f\u65f6\uff0c\u6240\u4ee5\u6211\u5c31\u6362\u6210\u4e86\u8fed\u4ee3\u5efa\u56fe\uff0c\u7ebf\u6027\u65f6\u95f4\uff0c\u7b80\u5355\u9ad8\u6548\uff0c\u800c\u4e14\u7adf\u7136\u8fd8\u6ca1\u4eba\u5199\u8fc7\u3002  \n\u5f53\u7136\uff0cFloyd\u6700\u5c0f\u73af\u4e5f\u8981\u6ce8\u610f\u3002\uff08\u6211\u5c31\u56e0\u4e3a\u4e0d\u719f\u6089\uff0c\u76f4\u63a5\u6284Floyd\u6700\u5c0f\u73af\u6a21\u677f\uff0c\u8fd8\u6284\u9519\u4e86\uff0c\u7ed3\u679c\u8fd9\u4e2a\u6700\u7b80\u5355\u7684bug\u627e\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\uff09  \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nbool isf[110][110];//isf[i][j]\uff1a\u8fb9i\u5728\u8fb9j\u7684\u5de6\u8fb9(0)\u8fd8\u662f\u53f3\u8fb9(1)\nint n,no,t1,t2,m;\nint a[2][110][10],v[110],vis[110][2];//a[][][]:\u4e00\u6761\u8fb9\u7684\u5de6\u53f3\u90fd\u6709\u54ea\u4e9b\u8fb9\uff1bvis[][]:\u4e00\u6761\u8fb9\u5de6\u53f3\u4e24\u70b9\u7684\u5e8f\u53f7\u3002\nint d[210][210],ans=1<<30,dis[210][210];\nint main()\n{\n\tmemset(dis,32,sizeof(dis));\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tdis[i*2-1][i*2-1]=dis[i*2][i*2]=0;//m\u6761\u8fb9\u7684\u56fe\u6700\u591a\u53ef\u80fd\u67092*m\u4e2a\u8282\u70b9\n\t\tscanf(\"%d\",&no);\n\t\tscanf(\"%d%d%d\",&v[no],&t1,&t2);\n\t\twhile(t1--)scanf(\"%d\",&a[0][no][t1]);\n\t\twhile(t2--)scanf(\"%d\",&a[1][no][t2]),isf[no][a[1][no][t2]]=1;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\t#define edge a[j][i][k]//\u5f53\u524d\u8fb9\n\t\t#define node vis[edge][isf[edge][i]]//\u5f53\u524d\u70b9\n\t\tfor(int j=0;j<2;j++)\n\t\t{\n\t\t\tif(!vis[i][j])vis[i][j]=++n;\n\t\t\tfor(int k=0;edge;k++)node=vis[i][j];\n\t\t}\n\t\tdis[vis[i][0]][vis[i][1]]=dis[vis[i][1]][vis[i][0]]=v[i];\n\t}\n\tmemcpy(d,dis,sizeof(dis));\n\t//printf(\"--------------------\\n\");\n\t//for(int i=1;i<=m;i++)printf(\"%d %d\\n\",vis[i][0],vis[i][1]);\n\tfor(int k=1;k<=n;k++)\n\t{\n\t\tfor(int i=1;i<k;i++)\n\t\t\tfor(int j=i+1;j<k;j++)\n\t\t\t\tans=min(ans,d[i][j]+dis[i][k]+dis[j][k]);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<i;j++)\n\t\t\t\td[j][i]=d[i][j]=min(d[i][j],d[i][k]+d[k][j]);//d[j][i]\u539f\u672c\u6211\u6f0f\u5199\u4e86\uff0c\u81ea\u5df1\u6dfb\u52a0\u7684\u4f18\u5316\u81ea\u5df1\u8fd8\u641e\u51fa\u4e86bug\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\u672c\u6765\u8fd8\u53ef\u4ee5\u518d\u4f18\u5316\uff0c\u4f46\u8fd9\u4efd\u4ee3\u7801\u5df2\u7ecf\u76f8\u5f53\u9ad8\u6548\u4e86\u3002  \n\u90a3\u4e48\uff0c\u8fd8\u6709\u4ec0\u4e48\u4f18\u5316\u53ef\u4ee5\u7528\u5462\uff1f  \n\u4e00\u662f\u5185\u5b58\u3002Floyd\u5e38\u7528\u90bb\u63a5\u77e9\u9635\uff0c\u800c\u8fd9\u9898\u8981\u8ba1\u7b97\u7684\u5c31\u662f\u70b9\u7684\u4e2a\u6570\u3002\u4e0a\u9762\u8bf4\u5230m\u6761\u8fb9\u7684\u56fe\u6700\u591a\u67092m\u4e2a\u70b9\uff08\u76f8\u5f53\u4e8em\u6761\u6ca1\u6709\u516c\u5171\u7aef\u70b9\u7684\u7ebf\u6bb5\uff09\uff0c\u7136\u800c\u8fd9\u9898\u8fd8\u6709\u4e00\u4e2a\u9650\u5236\u6761\u4ef6\uff1a1<=n1s,1<=n2s\u3002  \n\u8fd9\u4e2a\u6761\u4ef6\u8bf4\u660e\u4e86\u6bcf\u4e2a\u70b9\u81f3\u5c11\u8fde\u63a5\u4e24\u6761\u8fb9\uff0c\u6240\u4ee5\u6700\u591a\u6709100\u4e2a\u70b9\uff0c\u90bb\u63a5\u77e9\u9635\u53ea\u7528\u5f00\u5230100$\\times$100\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u88ab\u4f18\u5316\u5230\u4e861/4\u3002  \n\u7136\u540e\u662f\u65f6\u95f4\u7684\u4f18\u5316\u3002\u8fed\u4ee3\u65f6\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u70b9\uff0c\u5b83\u6240\u6709\u8fde\u63a5\u7684\u8fb9\u90fd\u5728\u52a0\u5165\u8fd9\u4e2a\u70b9\u65f6\u5c31\u5224\u65ad\u8fc7\u4e86\uff0c\u6240\u4ee5\u90a3\u4e00\u90e8\u5206\u53ef\u4ee5\u8fd9\u4e48\u6539\uff1a  \n```cpp\nfor(int j=0;j<2;j++)\n\tif(!vis[i][j])\n\t{\n\t\tvis[i][j]=++n;\n\t\tfor(int k=0;edge;k++)node=n;\n\t}\n```\n\u8fd9\u6837\u4f18\u5316\u4e4b\u540e\u5feb\u4e866ms\uff08\u4f18\u5316\u540e30ms\uff09\u3002  \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nbool isf[110][110];\nint n,no,t1,t2,m;\nint a[2][110][10],v[110],vis[110][2];\nint d[110][110],ans=1<<30,dis[110][110];\nint main()\n{\n\tmemset(dis,32,sizeof(dis));\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tdis[i][i]=0;\n\t\tscanf(\"%d\",&no);\n\t\tscanf(\"%d%d%d\",&v[no],&t1,&t2);\n\t\twhile(t1--)scanf(\"%d\",&a[0][no][t1]);\n\t\twhile(t2--)scanf(\"%d\",&a[1][no][t2]),isf[no][a[1][no][t2]]=1;\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\t#define edge a[j][i][k]\n\t\t#define node vis[edge][isf[edge][i]]\n\t\tfor(int j=0;j<2;j++)\n\t\t\tif(!vis[i][j])\n\t\t\t{\n\t\t\t\tvis[i][j]=++n;\n\t\t\t\tfor(int k=0;edge;k++)node=n;\n\t\t\t}\n\t\tdis[vis[i][0]][vis[i][1]]=dis[vis[i][1]][vis[i][0]]=v[i];\n\t}\n\tmemcpy(d,dis,sizeof(dis));\n\tfor(int k=1;k<=n;k++)\n\t{\n\t\tfor(int i=1;i<k;i++)if(dis[i][k]!=dis[0][0])//\u8fd9\u91cc\u6211\u4e5f\u6dfb\u52a0\u4e86\u4e00\u4e2a\u4f18\u5316\uff0ci\u4e0ek\u8fde\u901a\u65f6\u624d\u66f4\u65b0ans\n\t\t\tfor(int j=i+1;j<k;j++)\n\t\t\t\tans=min(ans,d[i][j]+dis[i][k]+dis[j][k]);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tfor(int j=1;j<i;j++)\n\t\t\t\td[j][i]=d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\u6211\u6c38\u8fdc\u559c\u6b22\u8fed\u4ee3\uff01",
        "postTime": 1559399454,
        "uid": 144740,
        "name": "\u9006\u6d41\u4e4b\u65f6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5b58\u50a8\u8fd9\u5f20\u56fe\u3002\u672c\u9898\u9ebb\u70e6\u4e4b\u5904\u5728\u4e8e\u672a\u7ed9\u51fa\u70b9\u7684\u7f16\u53f7\uff01\n\n\u672c\u9898\u7ed9\u51fa\u4e86\u6bcf\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u6bcf\u6761\u8fb9\u7684\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\u7684\u7f16\u53f7\u3002\u6c42\u7684\u662f\u6700\u5c0f\u73af\u957f\u5ea6\u3002\u5982\u4f55\u5c06\u8fb9\u5316\u6210\u70b9\u662f\u4e00\u4e2a\u96be\u70b9\u3002\n\n\u6211\u91c7\u7528\u79bb\u7ebf\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9Edge(i) = v\uff0c\u5047\u8bbe\u7f16\u53f7\u4e3ai\u7684\u8fb9\u5de6\u53f3\u8282\u70b9\u7f16\u53f7\u5206\u522b\u4e3ai<<1\u548ci<<1|1\uff08\u5373Edge(i) = (i<<1, i<<1|1) = v\uff09\uff0c\u5e76\u7528\u90bb\u63a5\u8868\u5efa\u7acb\u8be5\u8fb9\uff0c\u5c06\u6240\u6709\u4fe1\u606f\u5168\u90e8\u5b58\u4e0b\u6765\u3002\n\n\u5728\u8f93\u5165\u7ed3\u675f\u540e\uff0c\u5bf9\u6bcf\u6761\u8fb9\uff08\u8bbe\u7f16\u53f7\u4e3ai\uff09\uff0c\u53ef\u505a\u5982\u4e0b\u5904\u7406\uff1a\n\n*\u5bf9\u4e8e\u6bcf\u4e2a\u5de6\u8282\u70b9\uff08\u7f16\u53f7\u4e3ai<<1\uff09\u6240\u8fde\u63a5\u7684\u8fb9\uff08\u8bbe\u7f16\u53f7\u4e3atar\uff09\uff0c\u641c\u5bfbi\u51fa\u73b0\u5728tar\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\u3002\n\n**\u82e5\u51fa\u73b0\u5728\u5de6\u8fb9\uff0c\u5219\u5efa\u8fb9(i<<1, tar<<1) = 0\uff1b\n\n**\u82e5\u51fa\u73b0\u5728\u53f3\u8fb9\uff0c\u5219\u5efa\u8fb9(i<<1, tar<<1|1) = 0\uff1b\n\n*\u5bf9\u4e8e\u6bcf\u4e2a\u53f3\u8282\u70b9\uff08\u7f16\u53f7\u4e3ai<<1|1\uff09\u6240\u8fde\u63a5\u7684\u8fb9\uff08\u8bbe\u7f16\u53f7\u4e3atar\uff09\uff0c\u641c\u5bfbi\u51fa\u73b0\u5728tar\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\u3002\n\n**\u82e5\u51fa\u73b0\u5728\u5de6\u8fb9\uff0c\u5219\u5efa\u8fb9(i<<1|1, tar<<1) = 0\uff1b\n\n**\u82e5\u51fa\u73b0\u5728\u53f3\u8fb9\uff0c\u5219\u5efa\u8fb9(i<<1|1, tar<<1|1) = 0\uff1b\n\n\n\u7531\u6b64\u4e00\u6765\uff0c\u53ea\u9700\u5bf9\u6bcf\u6761\u8fb9\uff08\u8bbe\u7f16\u53f7\u4e3ai\uff09\u8fdb\u884c\u5982\u4e0b\u5904\u7406\u5373\u53ef\uff1a\n1.\t\u6682\u65f6\u5220\u53bb(i<<1, i<<1|1)\u8fd9\u6761\u8fb9\n2.\tDijkstra(i<<1)  ans = min{ans, i<<1|1}\n\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#define N 205\n#define INF 0xfffffff\nusing namespace std;\n\nint n, head[N], cnt, edge_value[N], dis[2*N], ans = INF;\nbool vis[2*N];\n\nstruct Edge\n{\n    int to, nxt, val;\n} e[N*2];\n\nstruct Node\n{\n    int lnum, rnum, ln[10], rn[10];\n} edge[N];\n\nvoid make_edge(int from, int to, int val);\nvoid dijkstra(int start);\n\nint main(int argc, char const *argv[])\n{\n    int x, u, v, ln, rn;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i++)\n    {\n        scanf(\"%d%d\", &x, &v);\n        edge_value[x] = v;\n        make_edge(x<<1, x<<1|1, v);\n        make_edge(x<<1|1, x<<1, v);\n        scanf(\"%d%d\", &edge[x].lnum, &edge[x].rnum);\n        for(int j = 1; j <= edge[x].lnum; j++)\n            scanf(\"%d\", &edge[x].ln[j]);\n        for(int j = 1; j <= edge[x].rnum; j++)\n            scanf(\"%d\", &edge[x].rn[j]);\n    }\n    \n    for(int i = 1; i <= n; i++)// fence_num\n    {\n        for(int j = 1; j <= edge[i].lnum; j++)// make edge for every left point\n        {\n            int tar = edge[i].ln[j];\n            for(int k = 1; k <= edge[tar].lnum; k++)\n            {\n                if(edge[tar].ln[k] == i)\n                {\n                    make_edge(i<<1, tar<<1, 0);\n                    break;\n                }\n            }\n            for(int k = 1; k <= edge[tar].rnum; k++)\n            {\n                if(edge[tar].rn[k] == i)\n                {\n                    make_edge(i<<1, tar<<1|1, 0);\n                    break;\n                }\n            }\n        }\n\n        for(int j = 1; j <= edge[i].rnum; j++)// make edge for every right point\n        {\n            int tar = edge[i].rn[j];\n            for(int k = 1; k <= edge[tar].lnum; k++)\n            {\n                if(edge[tar].ln[k] == i)\n                {\n                    make_edge(i<<1|1, tar<<1, 0);\n                    break;\n                }\n            }\n            for(int k = 1; k <= edge[tar].rnum; k++)\n            {\n                if(edge[tar].rn[k] == i)\n                {\n                    make_edge(i<<1|1, tar<<1|1, 0);\n                    break;\n                }\n            }\n        }\n    }\n\n    for(int i = 2; i <= 2 * n; i += 2)\n    {\n        dijkstra(i);\n        ans = min(ans, dis[i|1] + edge_value[i>>1]);\n        // printf(\"%d:%d\\n\", i/2, dis[i|1] + edge_value[i>>1]);\n    }\n    \n    printf(\"%d\\n\", ans);\n    return 0;\n}\n\nvoid make_edge(int from, int to, int val)\n{\n    // printf(\"(%d, %d) = %d\\n\", from, to, val);\n    e[++cnt].nxt = head[from];\n    e[cnt].to = to;\n    e[cnt].val = val;\n    head[from] = cnt;\n}\n\nvoid dijkstra(int start)\n{\n    for(int i = 2; i <= n*2+1; i++)\n    {\n        dis[i] = (i == start) ? 0 : INF;\n        vis[i] = 0;\n    }\n    for(int i = 2; i <= n*2+1; i++)\n    {\n        int minnum = -1, minval = INF;\n        for(int j = 2; j <= n*2+1; j++)\n        {\n            if(minval > dis[j] && !vis[j])\n            {\n                minval = dis[j];\n                minnum = j;\n            }\n        }\n        // printf(\"->%d(%d)\", minnum, minval);\n        if(minnum == -1 || minval == INF || minnum == (start|1)) return;\n        vis[minnum] = 1;\n        for(int j = head[minnum]; j; j = e[j].nxt)\n        {\n            int t = e[j].to;\n            if(t == (start | 1) && i == 2) continue; \n            // if((t == (start | 1)) && edge_value[start] == minval + e[j].val) continue;\n            if(dis[t] > minval + e[j].val)\n            {\n                dis[t] = minval + e[j].val;\n                // printf(\"dis[%d]=%d  \", t, dis[t]);\n            }\n        }\n    }\n}\n\n```",
        "postTime": 1540558792,
        "uid": 13265,
        "name": "tangyifei009",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2\uff1ahttps://www.luogu.org/blog/cdttzr666/\n\n\u672c\u849f\u84bb\u6709\u4e24\u79cd\u5199\u6cd5\uff0c\u4e0b\u9762\u6765\u4e00\u4e00\u4ecb\u7ecd\uff1a\n\n1. \u76f4\u63a5\u7206\u641c\u6bcf\u6761\u8fb9\uff0c\u770b\u770b\u6784\u4e0d\u6784\u6210\u6700\u5c0f\u73af\u3002\n```cpp\n#include<iostream>\t//\u5934\u6587\u4ef6\nusing namespace std;\t//\u540d\u5b57\u7a7a\u95f4\nconst int MAXN=110;\t\t//\u5b9a\u4e49\u5e38\u91cf,\u662f\u4e2a\u597d\u4e60\u60ef\nint n,s,ans=1000000,start,ls[MAXN],num[MAXN][2],a[MAXN][2][10];\t\t\n//a\u6570\u7ec4\u7b2c\u4e00\u7ef4\u8868\u793a\u8be5\u7bf1\u7b06\u7f16\u53f7\uff0c\n//\u7b2c\u4e8c\u7ef4\u8868\u793a\u94fe\u63a5\u5de6\u7aef\u8fd8\u662f\u53f3\u7aef\uff0c\n//\u7b2c\u4e09\u7ef4\u8868\u793a\u8fde\u63a5\u7bf1\u7b06\u7684\u7f16\u53f7\u3002\nint checkdir(int s,int t) {\t\t//\u5f53\u524d\u8fb9\uff0c\u73b0\u5728\u641c\u5230\u7684\u7f16\u53f7\n\tfor (int i=1; i<=num[t][0]; i++) {\t//\u904d\u5386\u603b\u6570\n\t\tif (a[t][0][i]==s) return 0; \t//\u8fd4\u56de\u53f3\u7aef\n\t}\n\treturn 1;\t//\u8fd4\u56de\u5de6\u7aef\n}\nvoid dfs(int u, int dir, int sum) {\t\t//\u5f00\u59cb\u7206\u641c\uff0c\u53d8\u91cf\u4e0b\u9762\u8c03\u7528\u65f6\u89e3\u91ca\u8fc7\u4e86\n\tif (sum>ans) return;\t//ans\u662f\u6700\u4f18\u89e3,\u5982\u679c\u5f53\u524d\u5927\u4e8e\u5b83\u4e86\uff0c\u5c31\u6ca1\u5fc5\u8981\u7ee7\u7eed\u8fdb\u884c\n\tif (u==start && sum>0) {\t//\u91cd\u53c8\u56de\u5230\u8d77\u70b9\uff0c\u5373\u5f62\u6210\u73af\u8def\n\t\tans=sum;\t\t//\u8bb0\u5f55\u6700\u4f18\u89e3\n\t\treturn;\t\t\t//\u8fd4\u56de\n\t}\n\tfor (int i=1; i<=num[u][dir]; i++) {\t//\u904d\u5386\u8be5\u7aef\u94fe\u63a5\u7684\u6bcf\u6761\u8fb9\n\t\tdfs(a[u][dir][i],1-checkdir(u,a[u][dir][i]),sum+ls[u]);\t\t//\u641c\u4e0b\u53bb\uff0c\u4e2d\u95f4\u7684checkdir\u662f\u7528\u6765\u786e\u8ba4\u73b0\u5728\u8be5\u8d70\u54ea\u4e00\u7aef\u4e86\n\t}\n}\nint main() {\t//\u4e3b\u51fd\u6570\n\tcin>>n;\t\t//\u8bfb\u5165\u603b\u8fb9\u6570\n\tfor (int zz=1; zz<=n; zz++) {\t//for\u5faa\u73af\u8bfb\u5165\n\t\tcin>>s;\t\t//\u5f53\u524d\u8fb9\u7684\u7f16\u53f7\n\t\tcin>>ls[s]>>num[s][0]>>num[s][1];\t\t//\u8be5\u8fb9\u7684\u957f\u5ea6,\u5de6\u7aef\u8fde\u7684\u603b\u4e2a\u6570,\u6709\u7aef\u8fde\u7684\u603b\u4e2a\u6570\n\t\tfor (int i=1; i<=num[s][0]; i++) cin>>a[s][0][i];\t\t//\u8bfb\u5165\u5de6\u7aef\u8fde\u7684\u7f16\u53f7\n\t\tfor (int i=1; i<=num[s][1]; i++) cin>>a[s][1][i];\t\t//\u8bfb\u5165\u53f3\u7aef\u8fde\u7684\u7f16\u53f7\n\t}\n\tfor (start=1; start<=n; start++) {\t//\u7206\u641c\u6bcf\u6761\u8fb9\n\t\tdfs(start,0,0);\t\t//\u8d77\u8fb9\u4e3astart,\u5f53\u524d\u662f\u54ea\u4e00\u7aef\uff0c\u5f53\u524d\u603b\u957f\u5ea6\n\t}\n\tcout<<ans<<endl;\t\t//\u8f93\u51fa\u7b54\u6848\n\treturn 0;\t\t//\u8fd4\u56de\n}\n```\n\n1. \u5c31\u662f\u7528floyed\u5224\u6700\u5c0f\u73af\uff0c\u697c\u4e0b\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\uff0c\uff08\u53ea\u5199\u4e86\u5c11\u91cf\u6ce8\u91ca\uff09\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<cstring>\nusing namespace std;\nconst int MAXN=110;\nconst int INF=10000000;\nstruct Node {\t\t//\u7ed3\u6784\u4f53\u91cc\u76f4\u63a5\u6392\u5e8f\n\tint s[9];\n\tNode() {\n\t\tmemset(s,0,sizeof(s));\n\t}\n\tbool operator==(const Node& a) const {\n\t\tfor (int i=0; i<9; i++) {\n\t\t\tif (s[i]!=a.s[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\tbool operator<(const Node& a) const {\n\t\tfor (int i=0; i<9; i++) {\n\t\t\tif (s[i]<a.s[i]) return true;\n\t\t\telse if (s[i]>a.s[i]) return false; \n\t\t}\n\t\treturn false;\n\t}\n}; \nint G[MAXN][MAXN],n,s,ls,n1s,n2s,cnt,dis[MAXN][MAXN];\nmap<Node,int> mp;\t\t//map,C++\u7684\u597d\u5e2e\u624b,\u76f4\u63a5\u4e0d\u540c\u7c7b\u578b\u53d8\u91cf\u8f6c\u6362\nint floyed() {\n\tint ans=INF;\n\tmemcpy(dis,G,sizeof(G));\n\tfor (int k=1; k<=cnt; k++) {\t//\u5148\u66f4\u65b0ans\uff0c\u518d\u6c42\u6700\u77ed\u8def\n\t\tfor (int i=1; i<k; i++) {\n\t\t\tfor (int j=i+1; j<k; j++) {\n\t\t\t\tans=min(ans,dis[i][j]+G[i][k]+G[k][j]);\n\t\t\t}\n\t\t}\n\t\tfor (int i=1; i<=cnt; i++) {\t\n\t\t\tfor (int j=1; j<=cnt; j++) {\n\t\t\t\tdis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n\tcin>>n;\n\tfor (int i=0; i<MAXN; i++) {\n\t\tfill(G[i],G[i]+MAXN,INF);\n\t}\n\tint sta,des;\n\tfor (int i=1; i<=n; i++) {\t\t//\u8bfb\u5165\uff0c\u7ed9\u70b9\u7f16\u53f7\uff0c\u8fd9\u6837\u5bb9\u6613floyed\n\t\tNode f1,f2;\n\t\tcin>>s>>ls>>n1s>>n2s;\n\t\tf1.s[8]=f2.s[8]=s;\n\t\twhile (n1s--) cin>>f1.s[n1s];\n\t\tsort(f1.s,f1.s+9);\n\t\tif (mp[f1]==0) mp[f1]=++cnt;\n\t\twhile (n2s--) cin>>f2.s[n2s];\n\t\tsort(f2.s,f2.s+9);\n\t\tif (mp[f2]==0) mp[f2]=++cnt;\n\t\tsta=mp[f1];\n\t\tdes=mp[f2];\n\t\tG[sta][des]=G[des][sta]=ls;\n\t}\n\tcout<<floyed()<<endl;\t//\u76f4\u63a5floyed\n\treturn 0;\n}\n```",
        "postTime": 1533300408,
        "uid": 22950,
        "name": "dltzr6662019",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u603b\u7ed3\u8be5\u9898\u7684\u4e24\u79cd\u65b9\u6cd5\u3002\n\n**1.Floyd\u6c42\u6700\u5c0f\u73af\u3002**\n\n  \u5efa\u56fe\u771f\u7684\u662f\u975e\u5e38\u975e\u5e38\u975e\u5e38\u975e\u5e38\u9ebb\u70e6\u3002\n  \n  \u7528\u5230\u96c6\u5408map\u8fd8\u6709\u7ed3\u6784\u4f53\u91cd\u8f7d\u8fd0\u7b97\u7b26\u2026\n  \n  \u8fd8\u6709\u7ed3\u6784\u4f53\u4e2d\u7684s\u6570\u7ec4\u4e00\u5b9a\u8981\u521d\u59cb\u5316\uff01\u4e4b\u524d\u6837\u4f8b\u8dd1\u4e0d\u8fc7\u5c31  \u662f\u56e0\u4e3a\u5c11\u52a0\u4e86\u8fd9\u53e5\u3002\n  \n  \u4e0d\u8fc7\u56fe\u5efa\u597d\u4e86\u5c31\u662ffloyd\u7b97\u6700\u5c0f\u73af\u3002\n  \n**2.dfs\u6c42\u6700\u5c0f\u73af\u3002**\n\n  \u7b80\u5355\u7c97\u66b4\u7684\u641c\u7d22\u52a0\u4e0a\u7b80\u5355\u7c97\u66b4\u7684\u8f93\u5165\u3002\n  \n  \u7a0d\u5fae\u9ebb\u70e6\u7684\u5730\u65b9\u662fdfs\u7684\u53c2\u6570\uff0c\u7279\u522b\u662fdir\u3002\n  \n  \u603b\u4f53\u6765\u8bf4\u601d\u8def\u548c\u4ee3\u7801\u90fd\u6bd4\u7b2c\u4e00\u79cd\u7b80\u5355\u3002\n  \n**\u6cd51\uff1a**\n```cpp\n#include<iostream>\n#include<map>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\n\n#define MAXN 110\n#define INF 99999999\n\nstruct node {\n\tint s[9];\n\tnode() {\n\t\tmemset(s,0,sizeof(s));\n\t}\n\t//\u91cd\u8f7d==\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8emap \n\tbool operator==(const node &a) const {\n\t\tfor (int i=0;i<9;i++) {\n\t\t\tif (s[i]!=a.s[i]) return false;\n\t\t}\n\t\treturn true;\n\t}\n\t//\u91cd\u8f7d<\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8esort \n\tbool operator<(const node &a) const {\n\t\tfor (int i=0;i<9;i++) {\n\t\t\tif (s[i]<a.s[i]) return true;\n\t\t\telse if (s[i]>a.s[i]) return false;\n\t\t}\n\t\treturn false;\n\t}\n};\n\nint n,s,ls,n1s,n2s,cnt;//cnt\u4e3a\u9876\u70b9\u4e2a\u6570 \nint G[MAXN][MAXN];\nmap<node,int> mp; \nint d[MAXN][MAXN];\nint ans=INF;\n\nvoid floyd() {\n\t//d\u6570\u7ec4\u8d4b\u521d\u503c\uff0c\u76f4\u63a5\u62f7\u8d1dG\u6570\u7ec4\u7684\u503c \n\tmemcpy(d,G,sizeof(G));\n\tfor (int k=1;k<=cnt;k++) {\n\t\t//\u6c42\u6700\u5c0f\u73af \n\t\t//\u8fd9\u65f6d[i][j]\u8868\u793a\uff1a\u4e2d\u8f6c\u70b9\u4e3a1~k-1\u65f6\uff0c\u6240\u6c42\u51fa\u7684i\u5230j\u7684\u6700\u77ed\u8def\u5f84\n\t\t//\u90a3\u4e48d[i][j]\u518d\u52a0\u4e0ai~k\u548cj~k\u7684\u8ddd\u79bb\uff0c\u5373\u4e3a\u73af\u7684\u5468\u957f\n\t\t//\u5c06\u8be5\u503c\u53d6min\uff0c\u6700\u540e\u6c42\u5f97\u7684\u5c31\u662f\u6700\u5c0f\u73af\u7684\u5468\u957f \n\t\tfor (int i=1;i<k;i++) {\n\t\t\tfor (int j=i+1;j<k;j++) {\n\t\t\t\tans=min(ans,d[i][j]+G[i][k]+G[k][j]);\n\t\t\t} \n\t\t}\n\t\t//\u4e0b\u9762\u662ffloyd\u7684\u677f\u5b50 \n\t\tfor (int i=1;i<=cnt;i++) {\n\t\t\tfor (int j=1;j<=cnt;j++) {\n\t\t\t\td[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n\t\t\t}\n\t\t}\n\t} \n} \n\nint main() {\n\tfor (int i=0;i<MAXN;i++) {\n\t\tfill(G[i],G[i]+MAXN,INF);\n\t}\n\tcin>>n;\n\tfor (int i=1;i<=n;i++) {\n\t\tnode f1,f2;\n\t\tcin>>s>>ls>>n1s>>n2s;\n\t\tf1.s[8]=f2.s[8]=s;\n\t\twhile (n1s--) {\n\t\t\tcin>>f1.s[n1s];//\u4e0b\u6807\u987a\u5e8f\u65e0\u6240\u8c13\uff0c\u4e00\u4f1a\u513f\u8fd8\u8981\u6392\u5e8f \n\t\t}\n\t\tsort(f1.s,f1.s+9);//\u5c06\u5e8f\u5217\u6392\u5e8f\uff0c\u4fbf\u4e8e\u6bd4\u8f83\u5e8f\u5217\u662f\u5426\u76f8\u7b49 \n\t\tif (mp[f1]==0) mp[f1]=++cnt;//\u82e5\u96c6\u5408\u4e2d\u8fd8\u6ca1\u6709f1\u8fd9\u4e2a\u5e8f\u5217\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\n\t\twhile (n2s--) {\n\t\t\tcin>>f2.s[n2s];\n\t\t} \n\t\tsort(f2.s,f2.s+9);\n\t\tif (mp[f2]==0) mp[f2]=++cnt;\n\t\t//\u9876\u70b9\u7f16\u53f7\u5b8c\u6210\uff0c\u5f00\u59cb\u5efa\u56fe\n\t\tint s,e;\n\t\ts=mp[f1];\n\t\te=mp[f2];\n\t\tG[s][e]=G[e][s]=ls;\t \n\t}\n\t//Floyd\u6c42\u6700\u5c0f\u73af \n\tfloyd();\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\n**\u6cd52\uff1a**\n```cpp\n#include<iostream>\nusing namespace std;\n\n#define MAXN 110\n\nint n,s,ls[MAXN],num[MAXN][2],a[MAXN][2][10]; //\u4eba\u4e3a\u5b9a\u4e490\u4e3a\u5411\u5de6\uff0c1\u4e3a\u5411\u53f3\nint ans,start;\n\nint checkdir(int s,int t) {//\u5224\u65ad\u4e0b\u4e00\u6761\u8fb9\u7684\u65b9\u5411 \n\tfor (int i=1;i<=num[t][0];i++) {//\u904d\u5386\u4e0b\u4e00\u6761\u8fb9\u6240\u8fde\u7684\u8fb9 \n\t\tif (a[t][0][i]==s) return 0;//\u5982\u679c\u5411\u5de6\u641c\u7d22\uff0c\u67d0\u4e00\u6761\u8fb9\u8fde\u5411\u4e86\u5f53\u524d\u8fb9\uff0c\u90a3\u4e48return 0\u8bf4\u660e\u4e0d\u53ef\u4ee5\u5f800\u65b9\u5411\u8d70 \n\t}\n\treturn 1;//\u53cd\u4e4b\uff0c\u5c31\u4e0d\u53ef\u4ee5\u5f801\u65b9\u5411\u8d70\uff08\u56e0\u4e3a\u65b0\u7684\u8fb9\u4e00\u5b9a\u6709\u4e00\u4e2a\u65b9\u5411\u4f1a\u8fde\u5411\u5f53\u524d\u8fb9\uff09 \n}\n\nvoid search(int u,int dir,int sum) { //u:\u5f53\u524d\u8fb9\u7684\u7f16\u53f7 dir:\u8868\u793a\u8fb9\u7684\u65b9\u5411 sum:\u8def\u5f84\u7684\u7d2f\u52a0 \n\tif (sum>ans) return;//\u6700\u4f18\u6027\u526a\u679d \n\tif (u==start && sum>0) {//\u5f53\u53d1\u73b0\u5f53\u524d\u641c\u5230\u7684\u8fb9\u521a\u597d\u662f\u8d77\u59cb\u8fb9\uff0c\u5219\u8bf4\u660e\u5f62\u6210\u4e86\u73af\uff0c\u66f4\u65b0\u7b54\u6848 \n\t\tans=min(ans,sum);\n\t\treturn;\n\t}\n\tfor (int i=1;i<=num[u][dir];i++) {\n\t\tint v=a[u][dir][i];//\u641c\u7d22\u7684\u4e0b\u4e00\u6761\u8fb9 \n\t\tsearch(v,1-checkdir(u,v),sum+ls[u]);//\u56e0\u4e3acheckdir()\u8fd4\u56de\u7684\u662f\u4e0d\u53ef\u4ee5\u5f80\u54ea\u8fb9\u8d70\uff0c\u90a3\u4e481-checkdir()\u5c31\u662f\u5c060\u53d8\u4e3a1\uff0c1\u53d8\u4e3a0\uff0c\u521a\u597d\u7b97\u51fa\u76f8\u53cd\u7684\u65b9\u5411 \n\t}\n}\n\nint main() {\n\tans=99999999;\n\tcin>>n;\n\tfor (int i=1;i<=n;i++) {\n\t\tcin>>s;\n\t\tcin>>ls[s]>>num[s][0]>>num[s][1];\n\t\tfor (int j=1;j<=num[s][0];j++) {\n\t\t\tcin>>a[s][0][j];\n\t\t}\n\t\tfor (int j=1;j<=num[s][1];j++) {\n\t\t\tcin>>a[s][1][j];\n\t\t}\n\t} \n\t//\u6df1\u641c\u6c42\u6700\u5c0f\u73af \n\tfor (start=1;start<=n;start++) {\n\t\t//\u6bcf\u4e00\u6761\u8fb9\u90fd\u641c\u4e00\u904d \n\t\tsearch(start,0,0);\n\t} \n\tcout<<ans<<endl;\n \treturn 0;\n} \n```",
        "postTime": 1530858759,
        "uid": 24511,
        "name": "\u996e\u6eaa",
        "ccfLevel": 0,
        "title": "P2738 [USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops"
    },
    {
        "content": "\u6765\u4e00\u53d1\u5efa\u56fe\u6700\u77ed\u4ee3\u7801\u6700\u77ed\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u7206\u641c\u5224\u73af\u5373\u53ef\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define inf 999999999\nusing namespace std;\nconst int maxn = 100010;\nint Begin[maxn],to[maxn],Next[maxn],e;\nvoid add(int x,int y){\n    to[++e] = y;\n    Next[e] = Begin[x];\n    Begin[x] = e;\n}\nint minn(int x,int y){return x < y ? x : y;}\nint n,a[maxn],p[maxn],sign[maxn],link[500][500],min_ans = inf,nowid,tmp;\n//a\u662f\u6bcf\u6761\u8fb9\u7684\u6743\u503c\nvoid dfs(int h,int des,int ans){//\u5206\u522b\u662f\u5f53\u524d\u8282\u70b9\uff0c\u7ec8\u70b9\uff0c\u7ecf\u8fc7\u8def\u7684\u957f\u5ea6\n    if(ans >= min_ans)return;//\u5982\u679c\u5df2\u641c\u5230\u7684\u7b54\u6848\u5c0f\u4e8e\u5f53\u524d\u7684\u957f\u5ea6\u76f4\u63a5\u526a\u6389\n    for(int i=Begin[h];i;i=Next[i]){\n        if(!p[to[i]]){\n            p[to[i]] = 1;\n            if(link[to[i]][(tmp=h>n?h-n:h)])dfs(to[i]+n,des,ans+a[to[i]]);//\u5224\u65ad\u662fto[i]\u8fd9\u6761\u8fb9\u7684\u54ea\u4e2a\u7aef\u70b9\u4e0eh\u8fd9\u4e2a\u7aef\u70b9\u91cd\u5408\uff0c\u82e5\u662fto[i]\u8fd9\u4e2a\u7aef\u70b9\uff0c\u5c31\u4eceto[i]\u7684\u53e6\u4e00\u4e2a\u7aef\u70b9to[i]+n\u5f00\u59cb\u641c\n            else dfs(to[i],des,ans+a[to[i]]);\n            p[to[i]] = 0;\n        }\n        else{\n            if(to[i] == nowid){\n                if(link[des][(tmp=h>n?h-n:h)]){//\u5982\u679c\u8bbf\u95ee\u8fc7\u4e14\u7ec8\u70b9\u4e0eh\u6240\u5728\u7684\u8fb9\u6709\u8def\uff0c\u5c31\u641c\u5230\u73af\u4e86\n                    min_ans = minn(min_ans , ans);\n                    return;\n                }\n            }\n        }\n    }\n}\nint main(){\n#ifndef ONLINE_JUDGE\n    freopen(\"bigwest.in\",\"r\",stdin);\n    freopen(\"bigwest.out\",\"w\",stdout);\n#endif\n    int x,id,len,len1,len2;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;++i){\n                //\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u7f16\u53f7\u4e3ai\u548ci+n\uff1b\n        scanf(\"%d%d%d%d\",&id,&len,&len1,&len2);a[id] = len;\n        for(int j=1;j<=len1;++j)scanf(\"%d\",&x),add(id,x),link[id][x]=1;//\u628a\u5f53\u524d\u8fd9\u4e2a\u7aef\u70b9\u548c\u53e6\u4e00\u6761\u8fb9\u5efa\u7acb\u8054\u7cfb\n        for(int j=1;j<=len2;++j)scanf(\"%d\",&x),add(id+n,x),link[id+n][x]=1;//\u540c\u4e0a\n    }\n    for(int i=1;i<=n;++i){\n        nowid = i;memset(p,0,sizeof(p));//nowid\u662f\u5f53\u524d\u641c\u7684\u8fb9\u7684\u7f16\u53f7\n        p[i] = 1;dfs(i,n+i,a[i]);\n    }\n    printf(\"%d\\n\",min_ans);\n    return 0;\n}\n```",
        "postTime": 1494038117,
        "uid": 18421,
        "name": "ergeda",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u7528Floyd\u641c\u6700\u5c0f\u73af\n\nFloyd\u641c\u6700\u5c0f\u73af\u8be6\u60c5\u8bf7\u89c1\u535a\u5ba2\uff1a\n\n[http://blog.csdn.net/wzw1376124061/article/details/69870161](http://blog.csdn.net/wzw1376124061/article/details/69870161)\n\n\u8bfb\u5165\u7684\u65f6\u5019\u5570\u55e6\u70b9\n\n\u91cd\u70b9\u5728\u4e8e\u628a\u8fb9\u7684\u7f16\u53f7\u8f6c\u6362\u4e3a\u7aef\u70b9\u7684\u7f16\u53f7\n\n\u8be6\u60c5\u89c1\u4ee3\u7801\uff1a\n\n\u4ee3\u7801\u5185\u89e3\u91ca\u8be6\u7ec6\uff1a\n\n\u4ee3\u7801C++\u5982\u4e0b\uff1a\n\n/*************************************************************************\n\n    > Author: wzw-cnyali\n    > Created Time: 2017/4/9 19:07:01\n************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long uLL;\n#define REP(i, a, b) for(register int i = (a), i##_end_ = (b); i <= i##_end_; ++ i)\n#define DREP(i, a, b) for(register int i = (a), i##_end_ = (b); i >= i##_end_; -- i)\n#define EREP(i, a) for(register int i = (be[a]); i != -1; i = nxt[i])\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mem(a, b) memset((a), b, sizeof(a))\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\ntemplate <class T>\nT read(T sum = 0, T fg = 0)\n{\n    char c = getchar();\n    while(c < '0' || c > '9') { fg |= c == '-'; c = getchar(); }\n    while(c >= '0' && c <= '9') { sum = sum * 10 + c - '0'; c = getchar(); }\n    return fg ? -sum : sum;\n}\nconst int inf = 0x3f3f3f3f;\nconst int Size = 100000;\nconst int maxn = 10;\nconst int maxm = 1000;\nstruct node\n{\n    int L_id, R_id; //\u8be5\u6761\u8def\u7684\u5de6\u53f3\u7aef\u70b9\u7f16\u53f7\n    int L[maxn], R[maxn]; //\u5de6\u53f3\u7aef\u70b9\u8fde\u63a5\u7684\u8def\n    int Lsum, Rsum;\n    int len; //\u8be5\u8def\u7684\u957f\u5ea6\n}line[Size];\nint id_cnt; //\u7f16\u53f7\nint map[maxm][maxm];\nint dist[maxm][maxm];\nint floyd() //floyd\u6c42\u6700\u5c0f\u73af\n{\n    int minCircle = inf;\n    REP(k, 1, id_cnt)\n    {\n        REP(i, 1, k - 1) REP(j, 1, i - 1)\n            chkmin(minCircle, dist[i][j] + map[i][k] + map[k][j]);\n        REP(i, 1, id_cnt) REP(j, 1, id_cnt)\n            chkmin(dist[i][j], dist[i][k] + dist[k][j]);\n    }\n    return minCircle;\n}\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"input.in\", \"r\", stdin);\n    freopen(\"output.out\", \"w\", stdout);\n#endif\n    int n = read<int>();\n    REP(i, 1, n)\n    {\n        int id = read<int>();\n        line[id].len = read<int>();\n        line[id].Lsum = read<int>();\n        line[id].Rsum = read<int>();\n        REP(j, 1, line[id].Lsum)\n            line[id].L[j] = read<int>();\n        REP(j, 1, line[id].Rsum)\n            line[id].R[j] = read<int>();\n    }\n    REP(i, 1, n) //\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7aef\u70b9\n    {\n        if(!line[i].L_id) line[i].L_id = ++id_cnt; //\u7b2ci\u6761\u8fb9\u5de6\u7aef\u70b9\u7f16\u53f7\n        REP(j, 1, line[i].Lsum) //\u679a\u4e3e\u7b2ci\u6761\u8fb9\u5de6\u7aef\u70b9\u8fde\u63a5\u7684\u8fb9j\n        {\n            int x = line[i].L[j]; bool flag = 0;\n            REP(k, 1, line[x].Lsum) //\u5224\u65ad\u7b2cj\u6761\u8fb9\u5728\u7b2ci\u6761\u8fb9\u7684\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9\n                if(line[x].L[k] == i) { flag = 1; break; }\n            if(flag) line[x].L_id = line[i].L_id;\n            else line[x].R_id = line[i].L_id;\n        }\n        //\u7b2ci\u6761\u8fb9\u53f3\u7aef\u70b9\u7f16\u53f7,\u5904\u7406\u76f8\u540c\n        if(!line[i].R_id) line[i].R_id = ++id_cnt;\n        REP(j, 1, line[i].Rsum)\n        {\n            int x = line[i].R[j]; bool flag = 0;\n            REP(k, 1, line[x].Lsum)\n                if(line[x].L[k] == i) { flag = 1; break; }\n            if(flag) line[x].L_id = line[i].R_id;\n            else line[x].R_id = line[i].R_id;\n        }\n    }\n    mem(dist, inf);\n    mem(map, inf);\n    REP(i, 1, n) //\u6bcf\u6761\u8def\u5b58\u5165map\u4e2d\n    {\n        int L_id = line[i].L_id;\n        int R_id = line[i].R_id;\n        int len = line[i].len;\n        map[R_id][L_id] = map[L_id][R_id] = len;\n        dist[R_id][L_id] = dist[L_id][R_id] = len;\n    }\n    printf(\"%d\\n\", floyd());\n    return 0;\n}\n\n```",
        "postTime": 1491746767,
        "uid": 19623,
        "name": "Jason_Yvan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u5509\uff0c\u849f\u84bb\u53ea\u4f1a\u7528\u7206\u641c\uff1b\n\n\u56e0\u4e3a\u7ed9\u51fa\u7684\u4fe1\u606f\u662f\u5173\u4e8e\u8fb9\u7684\u6240\u4ee5\u5de6\u53f3\u4e24\u7aef\u5c31\u5341\u5206\u5fc5\u8981\uff1b\n\n\u4f46\u6211\u4e00\u5f00\u59cb\u4ee5\u4e3a\u5de6\u53f3\u4e4b\u5206\u5bf9\u7206\u641c\u6765\u8bb2\u6ca1\u6709\u4e8b\u60c5\uff1b\n\n\u7206\u641c\u65f6\uff0c\u6211\u641e\u4e86\u4e00\u5173\u4e8e\u7206\u641c\u987a\u5e8f\u7684\u524d\u5760\u548c\uff0c\u5982\u679c\u7206\u641c\u5230x\u8fb9\u4e14x\u8fb9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u90a3\u4e48\u51fa\u73b0\u4e86\u4e00\u4e2a\u73af\uff0c\u5c31\u53ef\u4ee5\u7528\u524d\u5760\u548c\u7b97\u51fa\u5f53\u524d\u7684\u73af\u7684\u957f\u5ea6\n\n\u6240\u4ee5\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\u7206\u641c\uff0c\u5c31\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684\u73af\uff1b\n\n\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u8981\u4fdd\u8bc1\u7206\u641c\u65f6\u8def\u5f84\u662f\u4e00\u6761\u7ebf\uff0c\u4e0d\u53ef\u4ee5\u5206\u53c9\uff0c\u4e00\u5355\u5206\u53c9\u4e86\uff0c\u524d\u5760\u548c\u5c31\u840e\u4e86\uff1b\n\n\u600e\u4e48\u9632\u6b62\u5206\u53c9\u5462\n\n\u5047\u5982\u5f53\u524d\u8bbf\u95ee\u5230x\u6bb5\uff0c\u662f\u4ecey\u6bb5\u8bbf\u95ee\u8fc7\u6765\u7684\uff1b\n\nx\u6bb5\u6709\u4e24\u4e2a\u7aef\u70b9z1,z2\uff1b\n\n\u5982\u679cz1\u94fe\u63a5\u7740y\uff0c\u90a3\u4e48z1\u8fd9\u4e2a\u70b9\u4e0d\u80fd\u7206\u641c\uff1b\n\nz2\u540c\u7406\n\n\u56e0\u4e3a\u81f3\u5c113\u6761\u7ebf\u6bb5\u8fde\u6210\u5708\uff0c\u6240\u4ee5z1,z2\u4e00\u5b9a\u6709\u4e00\u70b9\u53ef\u4ee5\u641c\u4e0b\u53bb\uff0c\u5bf9\u4e8e\u8d77\u70b9\u5219\u6709\u4e24\u70b9\u53ef\u4ee5\u641c\uff08\u8c8c\u4f3c\u53ea\u641c\u4e00\u70b9\u4e5f\u53ef\u4ee5\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nstruct cs{//\u94fe\u8868\u5566 \n    int to,next;\n}a[1000];\nint head[200],hea[200],v[200],sum[200];//\u4e24\u4e2ahead\uff0c\u8868\u793a\u4e24\u4e2a\u7aef\u70b9\uff0cv[i]\u662f\u7b2ci\u6bb5\u7684\u957f,sum[i]\u662f\u7206\u641c\u5230i\u6bb5\u65f6\uff0c\u524d\u9762\u7ebf\u6bb5\u7684\u603b\u957f\uff0c\u4e0d\u5305\u62ecv[i] \nbool vi[200];\nint n,m,x,y,z,num,ll,ans;\nvoid init(int x,int y){\n    ll++;\n    a[ll].to=y;\n    a[ll].next=head[x];\n    head[x]=ll;\n}\nvoid ini(int x,int y){\n    ll++;\n    a[ll].to=y;\n    a[ll].next=hea[x];\n    hea[x]=ll;\n}\nbool check1(int x,int y){//\u68c0\u67e5x\u70b9\u662f\u5426\u94fe\u63a5\u7ebf\u6bb5y \n    int k=head[x];\n    while(k){\n        if(a[k].to==y)return 0;\n        k=a[k].next;\n    }\n    return 1;\n}\nbool check2(int x,int y){\n    int k=hea[x];\n    while(k){\n        if(a[k].to==y)return 0;\n        k=a[k].next;\n    }\n    return 1;\n}\nvoid dfs(int x,int y,int s){\n    if(vi[x]){\n        int temp=s-sum[x];\n        ans=min(ans,temp);\n        return;\n    }\n    vi[x]=1;\n    sum[x]=s;\n    if(check1(x,y)){\n    int k=head[x];\n    while(k){\n        if(a[k].to!=y)dfs(a[k].to,x,s+v[x]);\n        k=a[k].next;\n    }}\n    if(check2(x,y)){\n    int k=hea[x];\n    while(k){\n        if(a[k].to!=y)dfs(a[k].to,x,s+v[x]);\n        k=a[k].next;\n    }}\n    vi[x]=0;\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d%d%d\",&num,&z,&x,&y);\n        v[num]=z;\n        for(int i=1;i<=x;i++){\n            scanf(\"%d\",&z);\n            init(num,z);\n        }\n        for(int i=1;i<=y;i++){\n            scanf(\"%d\",&z);\n            ini(num,z);\n        }\n    }\n    ans=1e9;\n    dfs(1,-1,0);\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1485834053,
        "uid": 7442,
        "name": "\u5de8\u578b\u65b9\u5757",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u611f\u89c9\u4e0b\u9762\u7684\u795e\u7287\u90fd\u975e\u5e38\u5389\u5bb3\uff0c\u6211\u8fd9\u91cc\u5f31\u5f31\u5730\u7b80\u8ff0\u4e00\u4e0b\u6211\u7684\u65b9\u6cd5\n\n\u6211\u6ca1\u6709\u7528\u592a\u591a\u884c\u5904\u7406\u8f93\u5165\uff0c\u4e3b\u8981\u662f\u611f\u89c9\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5f31\uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u70b9\u5f53\u6210\u8fb9\uff0c\u628a\u8fb9\u5f53\u6210\u70b9\uff0c\u70b9\u4e0a\u6709\u6743\u503c\n\n\u7136\u540e\u66b4\u529b\u6df1\u641c\uff0c\u6bcf\u6b21\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4ece\u8fd9\u8fb9\u51fa\u53bb(\u4f9d\u636e\u4e3a\u4e0a\u4e00\u6b21\u8fdb\u6765\u7684\u70b9\u662f\u4e0d\u662f\u5728\u8fd9\u8fb9\u7684\u8fde\u63a5\u91cc)\uff0c\u5982\u679c\u4e0d\u884c\u5c31\u4ece\u53e6\u4e00\u8fb9\u51fa\u53bb\n\n[codec]\n\n/\\*\nID: herofox1\n\nLANG: C++\n\nTASK: fence6\n\n\\*/\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nconst int inf = 2147483647;\nint n;\nvector<int> g[2][110];\nint Ls, Ns, Is, l[110];\nint xx, ans = inf;\nbool visit[110];\nstruct E{\n    int l, num;\n}e[110];\ninline void open()\n{\n    freopen(\"fence6.in\", \"r\", stdin);\n    freopen(\"fence6.out\", \"w\", stdout);\n}\ninline void close()\n{\n    fclose(stdin);\n    fclose(stdout);\n}\ninline int read(){\n    char ch;\n    bool flag = false;\n    int a=0;\n    while(!((((ch=getchar())>='0') && (ch<='9')) || (ch=='-')));\n    if(ch!='-'){\n        a *= 10;\n        a += ch - '0';\n    }\n    else{\n        flag = true;\n    }\n    while(((ch=getchar())>='0')&& (ch<='9')){\n        a *= 10;\n        a += ch - '0';\n    }\n    if(flag){\n        a = -a;\n    }\n    return a;\n}\ninline bool cmp(E a, E b)\n{\n    return a.l < b.l;\n}\ninline void scanff()\n{\n    n = read();\n    for(int i = 0;i < n;++i)\n    {\n        e[i].num = read();Ls = read();e[i].l = Ls;l[e[i].num] = Ls;\n        Ns = read();Is = read();\n        for(int kk = 0;kk < Ns;++kk)\n        {\n            xx = read();\n            g[0][e[i].num].push_back(xx);//\u5b58\u4e00\u7aef\u7684\u8fb9\n        }\n        for(int kk = 0;kk < Is;++kk)\n        {\n            xx = read();\n            g[1][e[i].num].push_back(xx);//\u5b58\u53e6\u4e00\u7aef\u7684\u8fb9\n        }\n    }\n    sort(e, e + n, cmp);//\u6392\u5e8f\u957f\u5ea6\n}\ninline void dfs(int xxx, int dis, int last)\n{\n    //cout<<xxx<<\" \"<<bb<<\" \"<<dis<<endl;\n    //cout<<\"-------\"<<endl;\n    int bb1 = 0;\n    bool flag = 0;\n    for(int i = 0;i < g[bb1][xxx].size();++i)\n    {\n        if(g[bb1][xxx][i] == last)\n        {\n            flag = 1;\n            break;\n        }\n```\n}//\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u4ece\u201c0\u201d\u7aef\u51fa\uff0c\u4e0d\u884c\u5c31\u6539\u4e3a\u201c1\u201d\u7aef\n\n\n```cpp\n    if(flag == 1)\n        bb1 = 1;\n    //cout<<g[bb1][xxx].size()<<endl;\n    for(int i = 0;i < g[bb1][xxx].size();++i)\n    {\n        if(visit[g[bb1][xxx][i]] == 1)\n        {\n            //cout<<\"1\"<<endl;\n            if(ans > dis + l[xxx])\n                ans = dis + l[xxx];\n        }\n        else\n        {\n            //cout<<\"2\"<<endl;\n            //cout<<g[bb1][xxx][i]<<endl;\n            visit[g[bb1][xxx][i]] = 1;\n            dfs(g[bb1][xxx][i], dis + l[xxx], xxx);\n            visit[g[bb1][xxx][i]] = 0;\n        }\n    }\n}\ninline void printff()\n{\n    printf(\"%d\\n\", ans);\n}\nint main()\n{\n    open();\n    scanff();\n    for(int i = 0;i < n;++i)\n    {\n        if(e[i].l > ans)//\u5982\u679c\u8fd9\u6b21\u8981\u641c\u7684\u8fb9\u672c\u8eab\u957f\u5ea6\u5c31\u6bd4\u4e4b\u524d\u627e\u5230\u7684\u73af\u8981\u957f\u8bf4\u660e\u6ca1\u6709\u66f4\u4f18\u89e3\n            break;\n        visit[e[i].num] = 1;\n        dfs(e[i].num, 0, 0);\n        visit[e[i].num] = 0;\n    }\n    printff();\n    close();\n}\n```\n[/codec]\n\u795d\u5927\u5bb6\u6109\u5feb\u5730AC\n",
        "postTime": 1482650128,
        "uid": 6201,
        "name": "herofox",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u8f93\u5165\u771f\u662f\u6076\u5fc3\uff0c\u6574\u6574\u7528\u6389\u4e8675\u884c\u4ee3\u7801\u6765\u8f93\u5165\u56fe...\u679c\u7136\u6211\u8fd8\u662f\u592a\u5f31\u4e86Orz\n\n\u663e\u7136\uff0c\u8fd9\u9898\u662f\u65e0\u5411\u56fe\u6c42\u6700\u5c0f\u73af\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u628a\u8fd9\u4e2a\u56fe\u5b58\u4e86\u8d77\u6765\u3002\n\n\u6c42\u6700\u5c0f\u73af\u600e\u4e48\u6c42\u5462\u2026\u2026\u5176\u5b9e\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9(u, v)\uff0c\u5728\u5220\u9664\u5b83\u4e4b\u540e\u6c42u\u5230v\u7684\u6700\u77ed\u8def\uff0c\u8fd9\u4e2a\u6700\u77ed\u8def\u957f\u5ea6\uff08\u5982\u679c\u627e\u5f97\u5230\u7684\u8bdd\uff09\u52a0\u4e0a(u, v)\u7684\u957f\u5ea6\u5c31\u662f\u4e00\u4e2a\u73af\u7684\u957f\u5ea6\u3002\u627e\u4e00\u4e0b\u6700\u5c0f\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8dd1m\u6b21\u7684Dijkstra\u6216\u8005SPFA\uff0c\u8fd8\u53ef\u4ee5\u5728\u8dd1Floyd\u7684\u65f6\u5019\u987a\u4fbf\u627e\u6700\u5c0f\u73af\u3002\u6211\u662f\u8dd1\u7684Dijkstra\uff0c\u5bf9\u4e8e\u8fd9\u9898\u6765\u8bf4\u65f6\u95f4\u5012\u662f\u5f88\u5bcc\u88d5\u3002\n\n\u7136\u540e\u6211\u4eec\u56de\u6765\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u5904\u7406\u8f93\u5165\u2026\u2026\n\n\u4e4b\u524d\u7684\u540c\u5b66\u5df2\u7ecf\u8bb2\u8fc7\u4e24\u79cd\u65b9\u6cd5\u4e86\uff0c\u4f46\u662f\u6211\u7528\u7684\u65e2\u4e0d\u662f\u5e76\u67e5\u96c6\u4e5f\u4e0d\u662f\u52a0\u8fb9\uff0c\u800c\u662f\u6734\u7d20\u7684\u6a21\u62df\u3002**\u4ec5\u4f9b\u53c2\u8003\uff0c\u5efa\u8bae\u8fd8\u662f\u53bb\u5b66\u4e60\u4e00\u4e0b\u66f4\u597d\u5199\u7684\u5199\u6cd5\uff0c\u7684\u4e0d\u8fc7\u6211\u53ea\u60f3\u51fa\u6765\u8fd9\u4e2a\u3002**\n\n\u600e\u4e48\u4e2a\u6a21\u62df\u6cd5\uff1f\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u8bb0\u5f55\u7684\u6709\u5b83\u7684\u6743\u503c\uff0c\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u7684\u7f16\u53f7\uff08\u5f53\u7136\uff0c\u8fd9\u8981\u6211\u4eec\u81ea\u5df1\u751f\u6210\uff09\uff0c\u4ee5\u53ca\u4e24\u7aef\u5206\u522b\u8fde\u7740\u7684\u8fb9\u96c6\uff0c\u8fd8\u6709\u4e00\u4e2amode\uff08\u5f53mode\u4e3atrue\uff0c\u5de6\u7aef\u70b9\u662f\u4e0e\u8fb9\u96c62\u7684\u4ea4\u70b9\uff1b\u5426\u5219\uff0c\u662f\u4e0e\u8fb9\u96c61\u7684\u4ea4\u70b9\uff09\u3002\n\n\u7528\u4e00\u4e2abuild\u51fd\u6570\u6765dfs\u3002build(e)\u7684\u4f5c\u7528\u4e3a\uff0c\u786e\u5b9a\u7b2ce\u6761\u8fb9\u7684\u5de6\u53f3\u7aef\u70b9\u7f16\u53f7\uff0c\u5e76\u540c\u65f6\u66f4\u65b0\u4e24\u7aef\u8fde\u7740\u7684\u6240\u6709\u8fb9\u7684\u5bf9\u5e94\u7aef\u70b9\u7f16\u53f7\uff0c\u6b64\u65f6\u4e5f\u80fd\u591f\u786e\u5b9a\u8fd9\u4e9b\u8fb9\u7684mode\u4e86\u3002\n\n\u5728\u8dd1\u5b8c\u4e4b\u540e\uff0c\u8bb0\u5f97\u628a\u8fd9\u4e9b\u8fb9\u590d\u5236\u4e00\u904d\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\u3002\n\n\n```cpp\n/* P2738\n * Au: SJoshua\n */\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <set>\n#include <queue>\n\nusing namespace std;\n\nstruct edge {\n    int u, v, w;\n} edges[300];\n\nstruct node {\n    int u, d;\n    bool operator < (const node &p) const {\n        return d > p.d;\n    }\n};\n\nset <int> nearl[101], nearr[101];\nvector <int> map[101];\nint proc[101], m, p;\nbool mode[101], vis[101];\n\nvoid dfs(int e = 1) {\n    vis[e] = true;\n    if (!edges[e].u) {\n        edges[e].u = ++p;\n        if (mode[e]) {\n            for (set <int> :: iterator it = nearr[e].begin(); it != nearr[e].end(); it++) {\n                if (!edges[*it].u) {\n                    edges[*it].u = p;\n                    if (nearr[*it].find(e) != nearr[*it].end()) {\n                        mode[*it] = true;\n                    }\n                } else {\n                    edges[*it].v = p;\n                }\n            }\n        } else { \n            for (set <int> :: iterator it = nearl[e].begin(); it != nearl[e].end(); it++) {\n                if (!edges[*it].v) {\n                    edges[*it].v = p;\n                    if (nearl[*it].find(e) != nearl[*it].end()) {\n                        mode[*it] = true;\n                    }\n                } else {\n                    edges[*it].u = p;\n                }\n            }\n        }\n    }\n    if (!edges[e].v) {\n        edges[e].v = ++p;\n        if (!mode[e]) {\n            for (set <int> :: iterator it = nearr[e].begin(); it != nearr[e].end(); it++) {\n                if (!edges[*it].u) {\n                    edges[*it].u = p;\n                    if (nearr[*it].find(e) != nearr[*it].end()) {\n                        mode[*it] = true;\n                    }\n                } else {\n                    edges[*it].v = p;\n                }\n            }\n        } else { \n            for (set <int> :: iterator it = nearl[e].begin(); it != nearl[e].end(); it++) {\n                if (!edges[*it].v) {\n                    edges[*it].v = p;\n                    if (nearl[*it].find(e) != nearl[*it].end()) {\n                        mode[*it] = true;\n                    }\n                } else {\n                    edges[*it].u = p;\n                }\n            }\n        }\n    }\n    for (set <int> :: iterator it = nearl[e].begin(); it != nearl[e].end(); it++) {\n        if (!edges[*it].u || !edges[*it].v) {\n            dfs(*it);\n        }\n    }\n    for (set <int> :: iterator it = nearr[e].begin(); it != nearr[e].end(); it++) {\n        if (!edges[*it].u || !edges[*it].v) {\n            dfs(*it);\n        }\n    }\n}\n\nint dijkstra(int s, int t) {\n    priority_queue <node> pq;\n    int dis[200];\n    bool visited[200];\n    memset(dis, 0x3f, sizeof(dis));\n    memset(visited, false, sizeof(visited));\n    dis[s] = 0;\n    pq.push((node){s, 0});\n    while (!pq.empty()) {\n        node p = pq.top();\n        pq.pop();\n        if (visited[p.u]) {\n            continue;\n        }\n        visited[p.u] = true;\n        for (unsigned int k = 0; k < map[p.u].size(); k++) {\n            edge &e = edges[map[p.u][k]];\n            if (!visited[e.v] && !((e.u == s && e.v == t) || (e.u == t && e.v == s))) {\n                if (p.d + e.w < dis[e.v]) {\n                    pq.push((node){e.v, dis[e.v] = p.d + e.w});\n                }\n            }\n        }\n    }\n    return dis[t];\n}\n\nint main(void) {\n    scanf(\"%d\", &m); \n    for (int k = 1; k <= m; k++) {\n        int s, leftn, rightn;\n        scanf(\"%d\", &s);\n        scanf(\"%d %d %d\", &edges[s].w, &leftn, &rightn); \n        for (int i = 0; i < leftn; i++) {\n            int v;\n            scanf(\"%d\", &v);\n            nearl[s].insert(v);\n        }\n        for (int i = 0; i < rightn; i++) {\n            int v;\n            scanf(\"%d\", &v);\n            nearr[s].insert(v);\n        }\n    }\n    dfs(); \n    for (int k = 1; k <= m; k++) {\n        edges[k+m] = (edge){edges[k].v, edges[k].u, edges[k].w};\n        map[edges[k].u].push_back(k);\n        map[edges[k].v].push_back(k+m);\n    }\n    int ans = 0x7fffffff;\n    for (int k = 1; k <= m; k++) {\n        ans = min(ans, dijkstra(edges[k].u, edges[k].v)+edges[k].w);\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1477901498,
        "uid": 790,
        "name": "\u7ea6\u4fee\u4e9a_RK",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    },
    {
        "content": "\u6c42\u65e0\u5411\u56fe\u6700\u5c0f\u73af\uff0c\u53ef\u7528floyd,\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u5728\u66f4\u65b0\u6700\u77ed\u8def\u524d\u5148\u5c1d\u8bd5\u4ee5\u4e4b\u4e3a\u73af\u7684\u6700\u5927\u70b9\u627e\u73af\u3002\n\n\u95ee\u9898\u662f\u8bfb\u5165\u7684\u662f\u6bcf\u6761\u8fb9\u7684\u90bb\u8fb9\uff0c\u6240\u4ee5\u8981\u81ea\u5df1\u9020\u70b9\uff0c\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u6c42\u51fa\u6240\u8fde\u7684\u6700\u5c0f\u7684\u4e24\u6761\u8fb9\u7684\u7f16\u53f7\uff0c\u518d\u8bb0\u5f55\u8fd9\u4e24\u4e2a\u7f16\u53f7\u5bf9\u5e94\u7684\u70b9\uff0c\u5373\u53ef\u5224\u65ad\u54ea\u4e9b\u70b9\u662f\u4e00\u4e2a\u70b9\u4e86\u3002\n",
        "postTime": 1474115623,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2738 \u3010[USACO4.1]\u7bf1\u7b06\u56de\u8defFence Loops\u3011"
    }
]