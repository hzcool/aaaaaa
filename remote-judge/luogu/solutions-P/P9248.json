[
    {
        "content": "# \u9898\u76ee\n\n[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P9248)\u770b\u9898\u76ee\u3002\n\n# \u5206\u6790\n\n\u201c\u9009 $K$ \u4e2a\u201d\u7684\u8981\u6c42\u662f\u4f9d\u6258\u7b54\u8fa9\uff0c\u5148\u4e0d\u7ba1\u5b83\uff0c\u8003\u8651 $K=1$ \u7684\u60c5\u51b5\u3002\n\n\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u5b9a\u70b9 $y$\uff0c\u6ee1\u8db3 $\\operatorname{dist}(x,y)\\times v_y>\\mathrm{Max}$ \u7684 $x$ \u6784\u6210\u6811\u4e0a\u7684\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u4e8e\u662f\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u96c6\u5408 $S$\uff0c\u53ef\u4ee5\u653e\u7f6e\u6d4b\u8bd5\u88c5\u7f6e\u7684\u70b9**\u4e5f\u6784\u6210\u6811\u4e0a\u7684\u4e00\u4e2a\u8fde\u901a\u5757**\u3002\u56e0\u6b64\uff0c\u505a\u4e00\u4e2a\u201c\u70b9-\u8fb9\u5bb9\u65a5\u201d\u5373\u53ef\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u201c\u4f7f\u5f97\u70b9 $x$\uff08\u6216\u8fb9 $(x,y)$ \u7684\u4e24\u4e2a\u7aef\u70b9\uff09\u53ef\u4ee5\u653e\u7f6e\u6d4b\u8bd5\u88c5\u7f6e\u7684\u5b8c\u7f8e\u7684\u96c6\u5408\u6709\u591a\u5c11\u4e2a\uff1f\u201d\u3002\n\n\u7edf\u8ba1\u6839\u4e3a\u67d0\u9876\u70b9\u7684\u8fde\u901a\u5757\u7684\u4fe1\u606f\u662f\u5bb9\u6613\u7684\uff0c\u6b64\u5904\u5c31\u6709\u4e00\u4e2a $O(nm)$ \u7684\u7b97\u6cd5\u3002\u4e8e\u662f\uff0c\u5148\u7528\u4e00\u4e2a $O(n^2m)$\uff08\u6216 $O(nm\\log n)$\uff09\u7684\u7b97\u6cd5\u8ba1\u7b97\u51fa\u5b8c\u7f8e\u7684\u96c6\u5408\u7684\u7ed3\u70b9\u4ef7\u503c\u4e4b\u548c\uff0c\u518d\u82b1 $O(n^2m)$ \u7684\u65f6\u95f4\u505a\u4e0a\u8ff0\u5bb9\u65a5\uff0c\u590d\u6742\u5ea6\u5373\u4e3a $O(n^2m)$\u3002\n\n\u52a0\u5165\u201c\u9009 $K$ \u4e2a\u201d\u7684\u8981\u6c42\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u7c07 $\\mathcal F$\uff0c\u53ef\u4ee5\u653e\u7f6e\u6d4b\u8bd5\u88c5\u7f6e\u7684\u70b9\u8fd8\u662f\u5f62\u6210\u4e00\u4e2a\u6811\u4e0a\u7684\u8fde\u901a\u5757\uff0c\u4e8e\u662f\u201c\u70b9-\u8fb9\u5bb9\u65a5\u201d\u8fd8\u662f\u53ef\u884c\u7684\u3002\u53ea\u4e0d\u8fc7\uff0c\u5982\u679c\u201c\u4f7f\u5f97\u70b9 $x$\uff08\u6216\u8fb9 $(x,y)$ \u7684\u4e24\u4e2a\u7aef\u70b9\uff09\u53ef\u4ee5\u653e\u7f6e\u6d4b\u8bd5\u88c5\u7f6e\u7684\u5b8c\u7f8e\u7684\u96c6\u5408\u201d\u7684\u4e2a\u6570\u4e3a $t$\uff0c\u539f\u5148\u8d21\u732e\u4e3a $\\pm t$\uff0c\u73b0\u5728\u8d21\u732e\u4e3a $\\pm\\binom{t}{K}$\uff0c\u8fd9\u4e00\u70b9\u548c[\u300c\u5341\u4e8c\u7701\u8054\u8003 2019\u300d\u5e0c\u671b](https://www.luogu.com.cn/problem/P5291)\u4e00\u6a21\u4e00\u6837\u3002\n\n-------\n\n\uff08\u6b63\u7247\u5f00\u59cb\uff09\n\n\u95ee\u9898\u7684\u4e3b\u8981\u77db\u76fe\u6765\u5230\u4e86\u201c\u8ba1\u7b97 $\\binom{t}{K}$\u201d\uff0c\u5176\u4e2d $t,K$ \u90fd\u662f\uff08\u76f8\u5bf9\u4e8e\u901a\u5e38\u60c5\u51b5\u800c\u8a00\uff09\u975e\u5e38\u5927\u7684\u6570\u3002\u4e0d\u8fc7\uff0c\u56e0\u4e3a $t\\le 2^n$\uff0c\u6240\u4ee5\u4e0a\u4e0b\u6307\u6807\u90fd\u8fd8\u80fd\u5b58\u5f97\u4e0b\u771f\u5b9e\u503c\u3002\n\n\u6b64\u65f6\u5c31\u4e0d\u5f97\u4e0d\u7814\u7a76\u6a21\u6570\u7684\u6027\u8d28\u4e86\u3002\u8fdb\u884c\u4e00\u4e2a\u8d28\u56e0\u6570\u5206\u89e3\uff0c**\u53d1\u73b0 $M=11920928955078125=5^{23}$**\uff0c\u975e\u5e38\u7684 smooth\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8003\u8651\u4f7f\u7528\u6269\u5c55 Lucas \u7b97\u6cd5\u3002\n\n\u6269\u5c55 Lucas \u7b97\u6cd5\u5173\u952e\u4e3a\uff1a\u5bf9\u4e8e $n$\uff0c\u6c42\u51fa $\\prod_{1\\le k\\le n,5\\nmid k}k$\u3002\u5728\u6a21\u6570\u8f83\u5c0f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u4e58\u79ef\u5f0f\u7684\u5468\u671f\u6027\u9884\u5904\u7406\uff0c\u4f46\u73b0\u5728\u4e0d\u884c\u3002\u8003\u8651\u5e38\u89c4\u7b56\u7565\u2014\u2014**\u5206\u6cbb\u8ba1\u7b97**\u3002\u7279\u522b\u5730\uff0c\u56e0\u4e3a\u7ed3\u679c\u548c\u6a21 $5$ \u7684\u4f59\u6570\u6709\u5173\uff0c\u6211\u4eec\u8003\u8651\u4ece\u5b83\u5f00\u59cb\u8fdb\u884c\u5206\u6cbb\u3002\n\n\u5047\u5982\u73b0\u5728\u8981\u5bf9\u4e8e $n>1$\uff0c\u6c42\u51fa $g(n)=\\prod_{1\\le k\\le n,5\\nmid k}k$\u3002\u8bbe $m=\\lceil\\log_5 n\\rceil-1$ \u4e3a\u6ee1\u8db3 $5^m<n$ \u7684\u6700\u5927\u7684\u6574\u6570\uff0c\u5e76\u8bbe $r=\\lceil\\frac n {5^m}\\rceil-1$\u3002\u5f53 $m\\ge 1$ \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e58\u79ef\u5f0f\u5212\u5206\u4e3a\uff1a\n\n$$\n\\prod_{t=0}^{r-1}\\left(\\prod_{t\\times 5^m< k\\le (t+1)\\times 5^m,5\\nmid k}k\\right)\\cdot \\prod_{r\\times 5^m< k\\le n,5\\nmid k}k\n$$\n\n\u6ce8\u610f\u5230 **$r\\times 5^m+k$ \u5bf9\u4e8e $5$ \u7684\u6574\u9664\u6027\u548c $k$ \u76f8\u540c**\uff0c\u6240\u4ee5\u6709\uff1a\n\n$$\n\\prod_{r\\times 5^m< k\\le n,5\\nmid k}k=\\prod_{0< k\\le n-r\\times 5^m,5\\nmid k}(k+r\\times 5^m)\n$$\n\n\u8981\u60f3\u5feb\u901f\u5730\u8ba1\u7b97\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8ba1\u7b97\u51fa $f_{n}(x)=\\prod_{0<k\\le n,5\\nmid k}(x+k)$\uff0c\u8fd9\u6837\u5c31\u5c06 $n$ \u51cf\u5c0f\uff0c\u53d8\u6210\u4e86\u5b50\u95ee\u9898\u3002\u5bf9\u4e8e\u524d\u9762\u82e5\u5e72\u4e2a\u957f\u5ea6\u4e3a $5^m$ \u7684\u90e8\u5206\u505a\u7c7b\u4f3c\u5904\u7406\uff0c\u6211\u4eec\u8981\u7b97\u7684\u5c31\u662f\uff1a\n\n$$\nf_n(x)=\\prod_{t=0}^{r-1}f_{5^m}(x+t\\times 5^m)\\cdot f_{n-r\\times 5^m}(x+r\\times 5^m)\n$$\n\n\u95ee\u9898\u6765\u4e86\uff1a\u8fd9\u4e2a\u591a\u9879\u5f0f\u53ef\u80fd\u5f88\u957f\uff0c\u600e\u4e48\u529e\uff1f\u89c2\u5bdf\u5230\u4e09\u6761\u6027\u8d28\uff1a\n\n- $g(n)=[x^0]f_n(x)$\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1\u5b83\u7684\u5e38\u6570\u9879\u662f\u5bf9\u7684\u5c31\u597d\u3002\n\n- \u7b54\u6848\u5bf9\u4e8e $5^{23}$ \u53d6\u6a21\uff0c\u800c**\u590d\u5408\u7684\u4e00\u6b21\u5f0f\u7684\u5e38\u6570\u9879\u4e00\u5b9a\u662f $5$ \u7684\u500d\u6570**\u3002\n\n- \u5408\u5e76\u5b50\u95ee\u9898\u65f6\uff0c\u57fa\u672c\u8fd0\u7b97\u4e3a\u201c\u590d\u5408\u4e00\u6b21\u5f0f\u201d\u548c\u201c\u5377\u79ef\u201d\uff0c\u5176\u4e2d\u53ea\u6709\u201c\u590d\u5408\u4e00\u6b21\u5f0f\u201d\u4f1a\u4ea7\u751f\u9ad8\u6b21\u9879\u5230\u4f4e\u6b21\u9879\u7684\u5f71\u54cd\u3002\u800c\u8ba1\u7b97 $f(x+c)$ \u7684\u8fc7\u7a0b\u4e2d\uff0c**$x^{t}$ \u5230 $x^0$ \u7684\u8d21\u732e\u5fc5\u7136\u5e26\u6709 $c^t$ \u7684\u56e0\u5b50**\u3002\u5373\u4fbf\u662f\u591a\u6b21\u590d\u5408\uff0c\u5305\u542b\u53c2\u6570\u7684\u56e0\u5f0f\u4e5f\u662f\u4e00\u4e2a\u6b21\u6570\u4e3a $t$ \u7684\u9f50\u6b21\u5f0f\u3002\n\n\u4ee5\u4e0a\u4e09\u6761\u53ef\u4ee5\u5bfc\u51fa\uff0c\u6b21\u6570\u4e0d\u4f4e\u4e8e $23$ \u7684\u9879\u90fd\u53ef\u4ee5\u88ab\u820d\u5f03\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f1a\u518d\u5bf9\u5e38\u6570\u9879\u9020\u6210\u5f71\u54cd\u3002\u8fd9\u6837\u591a\u9879\u5f0f\u5c31\u53d8\u5f97\u5f88\u8f7b\u5de7\u4e86\uff0c\u53ef\u4ee5\u5feb\u901f\u5730\u5b8c\u6210\u8fd0\u7b97\u3002\n\n\u7279\u522b\u5730\uff0c\u5f53 $m=0$ \u65f6\uff0c$5^m$ \u4e0d\u518d\u662f $5$ \u7684\u500d\u6570\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u8fb9\u754c\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u66b4\u529b\u7b97\u4e00\u4e0b\u591a\u9879\u5f0f\u7684\u4e58\u79ef\u5373\u53ef\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $m$ \u90fd\u9884\u5904\u7406\u51fa $f_{5^m}(x)$\uff0c\u6700\u597d\u8fd8\u53ef\u4ee5\u9884\u5904\u7406\u4e00\u4e2a $\\prod_{t=0}^{r-1}f_{5^m}(x+t\\times 5^m)$ \u7684\u524d\u7f00\u79ef\u3002\n\n\u590d\u6742\u5ea6\u4e0d\u7b97\u4e86\uff0c\u80fd\u8fc7\u5c31\u662f\u4e86\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\n#define rep( i, a, b ) for( int i = (a) ; i <= (b) ; i ++ )\n#define per( i, a, b ) for( int i = (a) ; i >= (b) ; i -- )\n\ntypedef long long LL;\ntypedef  __int128 ExLL;\n\nconst LL mod = 11920928955078125;\nconst int MAXLOG = 30, MAXN = 65, MAXM = 10005;\n\ntemplate<typename _T>\ninline void Read( _T &x ) {\n    x = 0; char s = getchar(); bool f = false;\n    while( s < '0' || '9' < s ) { f = s == '-', s = getchar(); }\n    while( '0' <= s && s <= '9' ) { x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar(); }\n    if( f ) x = -x;\n}\n\ntemplate<typename _T>\ninline void Write( _T x ) {\n    if( x < 0 ) putchar( '-' ), x = -x;\n    if( 9 < x ) Write( x / 10 );\n    putchar( x % 10 + '0' );\n}\n\ninline LL Sub( LL x, const LL &v ) { return ( x -= v ) < 0 ? x + mod : x; }\ninline LL Add( LL x, const LL &v ) { return ( x += v ) >= mod ? x - mod : x; }\n\ninline LL& SubEq( LL &x, const LL &v ) { return ( x -= v ) < 0 ? ( x += mod ) : x; }\ninline LL& AddEq( LL &x, const LL &v ) { return ( x += v ) >= mod ? ( x -= mod ) : x; }\n\nnamespace PureCalculation {\n    struct Poly {\n        LL coe[23];\n\n        Poly(): coe{} {}\n    };\n\n    Poly bas[MAXLOG], pref[MAXLOG][6];\n    LL sml[23][23], pw[23], pw5[MAXLOG];\n    LL vpK, factK; int K;\n\n    inline LL Inv( LL base, LL indx = 9536743164062500 - 1 ) {\n        LL ret = 1;\n        while( indx ) {\n            if( indx & 1 ) ret = ( ExLL ) ret * base % mod;\n            base = ( ExLL ) base * base % mod, indx >>= 1;\n        }\n        return ret;\n    }\n\n    inline Poly operator * ( const Poly &a, const Poly &b ) {\n        Poly ret; ExLL tmp;\n        rep( i, 0, 22 ) {\n            tmp = 0;\n            rep( j, 0, i )\n                tmp += ( ExLL ) a.coe[j] * b.coe[i - j];\n            ret.coe[i] = tmp % mod;\n        }\n        return ret;\n    }\n\n    inline Poly Shift( const Poly &f, const LL &c ) {\n        if( ! c ) return f;\n        Poly ret; ExLL tmp;\n        pw[0] = 1; \n        rep( i, 1, 22 ) pw[i] = ( ExLL ) pw[i - 1] * c % mod;\n        rep( i, 0, 22 ) {\n            tmp = 0;\n            rep( j, i, 22 )\n                tmp += ( ExLL ) f.coe[j] * pw[j - i] * sml[j][i];\n            ret.coe[i] = tmp % mod;\n        }\n        return ret;\n    }\n\n    inline Poly PartialFactorial( const int &lvl, const LL &n ) {\n        if( lvl == 0 ) return pref[0][n];\n        int idx = ( n - 1 ) / pw5[lvl];\n        if( ! idx ) return PartialFactorial( lvl - 1, n );\n        return Shift( PartialFactorial( lvl - 1, n - idx * pw5[lvl] ), idx * pw5[lvl] ) * pref[lvl][idx];\n    }\n\n    inline LL Factorial( const LL &n ) {\n        if( n == 0 ) return 1;\n        return ( ExLL ) PartialFactorial( 25, n ).coe[0] * Factorial( n / 5 ) % mod;\n    }\n\n    inline LL Legendre( LL n ) {\n        LL ret = 0;\n        for( ; n ; ret += n /= 5 );\n        return ret;\n    }\n\n    inline LL Binom( const LL &n ) {\n        if( n < K ) return 0;\n        LL idx = Legendre( n ) - vpK - Legendre( n - K );\n        if( idx >= 23 ) return 0;\n        LL a = Factorial( n ), c = Factorial( n - K );\n        return ( ExLL ) a * Inv( c ) % mod * factK % mod * pw5[idx] % mod;\n    }\n\n    inline void Init( const int &k ) {\n        K = k, pw5[0] = 1;\n        rep( i, 1, 25 ) pw5[i] = pw5[i - 1] * 5;\n        rep( i, 0, 22 ) {\n            sml[i][0] = 1;\n            rep( j, 1, i )\n                sml[i][j] = Add( sml[i - 1][j], sml[i - 1][j - 1] );\n        }\n        bas[0].coe[0] = bas[0].coe[1] = 1;\n        pref[0][0].coe[0] = 1;\n        rep( i, 1, 4 ) {\n            Poly tmp;\n            tmp.coe[0] = i, tmp.coe[1] = 1;\n            pref[0][i] = pref[0][i - 1] * tmp;\n        }\n        pref[0][5] = pref[0][4];\n        rep( i, 1, 25 ) {\n            bas[i] = pref[i - 1][5];\n            pref[i][0].coe[0] = 1;\n            rep( j, 1, 5 )\n                pref[i][j] = pref[i][j - 1] * Shift( bas[i], pw5[i] * ( j - 1 ) );\n        }\n        vpK = Legendre( K );\n        factK = Inv( Factorial( K ) );\n    }\n}\n\nnamespace OnTree {\n    struct Edge {\n        int to, nxt, w;\n    } Graph[MAXN << 1];\n\n    struct Values {\n        LL val, cnt;\n    \n        Values(): val( -1 ), cnt( 0 ) {}\n        Values( LL V ): val( V ), cnt( 1 ) {}\n        Values( LL V, LL C ): val( V ), cnt( C ) {}\n\n        inline void operator += ( const Values &q ) {\n            if( q.val  > val ) val = q.val, cnt = 0;\n            if( q.val == val ) cnt += q.cnt;\n        }\n\n        inline Values operator + ( const Values &q ) const {\n            if( val > q.val ) return *this;\n            if( val < q.val ) return q;\n            return Values( val, cnt + q.cnt );\n        }\n\n        inline Values operator * ( const Values &q ) const {\n            return Values( val + q.val, cnt * q.cnt );\n        }\n    };\n\n    Values dp[MAXN][MAXM];\n    LL dist[MAXN][MAXN];\n\n    int seq[MAXN], siz[MAXN], tot = 0;\n    int edgFr[MAXN], edgTo[MAXN];\n    int head[MAXN], cnt = 1;\n\n    int wei[MAXN], val[MAXN];\n\n    int N, M, K; LL lim;\n\n    inline void AddEdge( const int &from, const int &to, const int &W ) {\n        Graph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n        Graph[cnt].w = W, head[from] = cnt;\n    }\n\n    inline void Input() {\n        Read( N ), Read( M ), Read( K ), Read( lim );\n        rep( i, 1, N ) Read( wei[i] );\n        rep( i, 1, N ) Read( val[i] );\n        rep( i, 1, N - 1 ) {\n            int u, v, w;\n            Read( u ), Read( v ), Read( w );\n            AddEdge( u, v, w ), AddEdge( v, u, w );\n            edgFr[i] = u, edgTo[i] = v;\n        }\n    }\n\n    void ProcessDist( const int &u, const int &fa, LL *d ) {\n        for( int i = head[u], v ; i ; i = Graph[i].nxt )\n            if( ( v = Graph[i].to ) ^ fa )\n                d[v] = d[u] + Graph[i].w, ProcessDist( v, u, d );\n    }\n    \n    void DFS( const int &u, const int &fa ) {\n        seq[++ tot] = u, siz[u] = 1;\n        for( int i = head[u], v ; i ; i = Graph[i].nxt )\n            if( ( v = Graph[i].to ) ^ fa )\n                DFS( v, u ), siz[u] += siz[v];\n    }\n\n    inline void ClearDP() {\n        rep( i, 1, N + 1 )\n            rep( j, 0, M )\n                dp[i][j] = Values();\n    }\n\n    inline void Solve() {\n        Input();\n        rep( i, 1, N )\n            ProcessDist( i, 0, dist[i] );\n        PureCalculation :: Init( K );\n\n        Values glb;\n        rep( i, 1, N ) {\n            tot = 0, DFS( i, 0 );\n            ClearDP(), dp[1][0] = Values( 0 );\n            rep( j, 1, N ) {\n                int u = seq[j];\n                rep( k, 0, M ) \n                    if( dp[j][k].val >= 0 )\n                        dp[j + siz[u]][k] += dp[j][k];\n                if( wei[u] <= M ) {\n                    Values delt( val[u] );\n                    rep( k, 0, M - wei[u] )\n                        if( dp[j][k].val >= 0 )\n                            dp[j + 1][k + wei[u]] += dp[j][k] * delt;\n                }\n            }\n            rep( k, 0, M ) \n                glb += dp[N + 1][k];\n        }\n\n        LL ans = 0;\n        rep( i, 1, N ) {\n            if( wei[i] > M ) continue;\n            tot = 0, DFS( i, 0 );\n            ClearDP(), dp[1][0] = Values( 0 );\n            rep( j, 1, N ) {\n                int u = seq[j];\n                if( u != i ) {\n                    rep( k, 0, M )\n                        if( dp[j][k].val >= 0 )\n                            dp[j + siz[u]][k] += dp[j][k];\n                }\n                if( wei[u] <= M && ( ExLL ) dist[i][u] * val[u] <= lim ) {\n                    Values delt( val[u] );\n                    rep( k, 0, M - wei[u] )\n                        if( dp[j][k].val >= 0 )\n                            dp[j + 1][k + wei[u]] += dp[j][k] * delt;\n                }\n            }\n            LL num = 0;\n            rep( k, 0, M )\n                if( glb.val == dp[N + 1][k].val )\n                    num += dp[N + 1][k].cnt;\n            AddEq( ans, PureCalculation :: Binom( num ) );\n        }\n        rep( i, 1, N - 1 ) {\n            int x = edgFr[i], y = edgTo[i];\n            if( wei[x] + wei[y] > M ) continue;\n            tot = 0, DFS( x, 0 );\n            ClearDP(), dp[1][0] = Values( 0 );\n            rep( j, 1, N ) {\n                int u = seq[j];\n                if( u != x && u != y ) {\n                    rep( k, 0, M )\n                        if( dp[j][k].val >= 0 )\n                            dp[j + siz[u]][k] += dp[j][k];\n                }\n                if( wei[u] <= M && ( ExLL ) dist[x][u] * val[u] <= lim &&\n                                   ( ExLL ) dist[y][u] * val[u] <= lim ) {\n                    Values delt( val[u] );\n                    rep( k, 0, M - wei[u] )\n                        if( dp[j][k].val >= 0 )\n                            dp[j + 1][k + wei[u]] += dp[j][k] * delt;\n                }\n            }\n            LL num = 0;\n            rep( k, 0, M )\n                if( glb.val == dp[N + 1][k].val )\n                    num += dp[N + 1][k].cnt;\n            SubEq( ans, PureCalculation :: Binom( num ) );\n        }\n        Write( ans ), putchar( '\\n' );\n    }\n}\n\nint main() {\n    OnTree :: Solve();\n    return 0;\n}\n```",
        "postTime": 1684506875,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "\u300cP9248\u300d\u5b8c\u7f8e\u7684\u96c6\u5408"
    },
    {
        "content": "\u663e\u7136\uff0c\u5982\u679c\u9009\u62e9\u7684 $k$ \u4e2a\u201c\u5408\u6cd5\u96c6\u5408\u201d\u56fa\u5b9a\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u653e\u7f6e\u88c5\u7f6e\u7684\u70b9\u5982\u679c\u5b58\u5728\uff0c\u90a3\u4e48\u5fc5\u7136\u5f62\u6210\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b54\u6848\u7b49\u4e8e\u6240\u6709\u5408\u6cd5\u65b9\u6848\u4e2d\uff0c\u53ef\u4ee5\u653e\u7f6e\u88c5\u7f6e\u7684\u70b9\u5f62\u6210\u7684\u8fde\u901a\u5757\u4e2a\u6570\u4e4b\u548c\u3002\u800c\u6839\u636e\u70b9\u51cf\u8fb9\u7684\u5957\u8def\uff0c\u8fd9\u7b49\u4ef7\u4e8e\uff0c\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u65b9\u6848\u6ee1\u8db3\u53ef\u4ee5\u5728\u5176\u653e\u7f6e\u88c5\u7f6e\uff0c\u518d\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u65b9\u6848\u6ee1\u8db3\u8fd9\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u90fd\u53ef\u4ee5\u653e\u7f6e\u8f6c\u7f6e\uff0c\u4e8c\u8005\u76f8\u51cf\u3002\n\n\u4ee5\u70b9\u4e3a\u4f8b\uff0c\u8fd9\u6837\u90a3\u4e2a $\\text{dis}(x,y)\u00b7v_y\\le \\text{Max}$ \u76f8\u5f53\u4e8e\u4e00\u90e8\u5206\u70b9\u4e0d\u80fd\u9009\u62e9\uff0c\u800c\u5269\u4e0b\u7684\u70b9\u4e2d\u9009\u62e9\u9700\u8981\u5f62\u6210\u4e00\u4e2a\u4ee5 $x$ \u4e3a\u6839\u7684\u8fde\u901a\u5757\uff0c\u8fd9\u65f6\u5019\u6709\u4e00\u4e2a\u7ecf\u5178\u7684\u5904\u7406\u6811\u4e0a\u8fde\u901a\u5757\u95ee\u9898\u7684 DP \u6a21\u578b\u5c31\u662f\u5148\u5c06 DP \u503c\u4f20\u7ed9\u513f\u5b50\uff0cDFS \u4e00\u5708\u4ee5\u540e\u518d\u5c06\u513f\u5b50\u7684 DP \u503c\u4e0e\u7236\u4eb2\u5408\u5e76\uff0c\u672c\u8d28\u4e0a\u6765\u8bf4\u8fd9\u76f8\u5f53\u4e8e\u5728\u6b27\u62c9\u5e8f\u4e0a\u8fdb\u884c\u80cc\u5305\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728 $O(nm)$ \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5408\u6cd5\u96c6\u5408\u6ee1\u8db3 $x$ \u70b9\u53ef\u4ee5\u653e\u7f6e\u88c5\u7f6e\uff0c$\\dbinom{cnt}{k}$ \u5c31\u662f\u9009\u51fa $k$ \u4e2a\u8fd9\u6837\u7684\u96c6\u5408\u7684\u65b9\u6848\u6570\u3002\n\n\u7136\u540e\u4f60\u779f\u4e00\u773c\u6570\u636e\u8303\u56f4\u53d1\u73b0 $k$ \u6570\u636e\u8303\u56f4\u8fbe\u5230 $10^9$\uff0c\u5e76\u4e14\u6a21\u6570\u5f88\u602a\uff0c\u5206\u89e3\u8d28\u56e0\u6570\u4e00\u4e0b\u53d1\u73b0\u7adf\u7136\u662f $5^{23}$\u3002\u56e0\u6b64\u6211\u4eec\u8fd8\u8981\u518d\u601d\u8003\u4e00\u4e0b\u600e\u4e48\u8ba1\u7b97\u8fd9\u4e2a\u5927\u7ec4\u5408\u6570\u3002\u663e\u7136\u8fd9\u7b49\u4ef7\u4e8e\u8ba1\u7b97 $n!$ \u4e2d $5$ \u7684\u6b21\u6570\u4e0e\u6240\u6709\u4e0e $5$ \u4e92\u8d28\u7684\u6570\u7684\u4e58\u79ef\u3002\u524d\u8005\u662f\u597d\u6c42\u7684\uff0c\u8003\u8651\u600e\u4e48\u8ba1\u7b97\u540e\u8005\uff0c\u6211\u4eec\u8bb0 $F_n(x)$ \u8868\u793a $1\\sim 5n$ \u4e2d\u6240\u6709\u4e0e $5$ \u4e92\u8d28\u7684 $i$ \u7684 $x+i$ \u7684\u4e58\u79ef\u5f62\u6210\u7684\u591a\u9879\u5f0f\u3002\u8fd9\u6837\u6211\u4eec\u5bf9\u540e\u9762\u96f6\u5934\u90e8\u5206\u66b4\u529b\u7b97\uff0c\u5269\u4f59\u90e8\u5206\u7b49\u4ef7\u4e8e $F_{\\lfloor\\frac{n}{5}\\rfloor}(0)$\u3002\u8003\u8651\u500d\u589e\uff0c\u663e\u7136 $F_{2n}(x)=F_{n}(x)\u00b7F_{n}(x+5n)$\uff0c\u540e\u9762\u7684\u90a3\u90e8\u5206\u53ef\u4ee5\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u62c6\u5f00\uff0c\u7531\u4e8e $5n$ \u4e00\u5b9a\u662f $5$ \u7684\u500d\u6570\uff0c\u56e0\u6b64\u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u65f6\u5019\uff0c$x^{23}$ \u4ee5\u4e0a\u7684\u9879\u662f\u6ca1\u6709\u7528\u7684\uff0c\u6211\u4eec\u53ea\u7528\u5b58\u524d $23$ \u9879\u7684\u7cfb\u6570\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $n^2m+n\u00b7(23^2\u00b7\\log V)$\n\n```cpp\ntypedef __int128_t i128;\nconst ll MOD=11920928955078125ll;\nll mul(i128 x,i128 y){return x*y%MOD;}\nnamespace Binomial{\n\tll pw5[25],c[25][25];\n\tstruct poly{\n\t\tll v[25];\n\t\tpoly(){memset(v,0,sizeof(v));}\n\t\tfriend poly operator *(const poly &X,const poly &Y){\n\t\t\tpoly res;\n\t\t\tfor(int i=0;i<=23;i++)for(int j=0;j+i<=23;j++)\n\t\t\t\tres.v[i+j]=(res.v[i+j]+mul(X.v[i],Y.v[j]))%MOD;\n\t\t\treturn res;\n\t\t}\n\t}f[65];//F_{5*2^i}(x)\n\tpoly shift(poly x,ll v){\n\t\tstatic ll pw[25];poly res;\n\t\tfor(int i=(pw[0]=1);i<=23;i++)pw[i]=mul(pw[i-1],v);\n\t\tfor(int i=0;i<=23;i++)for(int j=0;j<=i;j++)\n\t\t\tres.v[j]=(res.v[j]+mul(mul(c[i][j],pw[i-j]),x.v[i]))%MOD;\n\t\treturn res;\n\t}\n\tll calc_pw5(ll x){if(!x)return 0;return x/5+calc_pw5(x/5);}\n\tvoid exgcd(ll x,ll y,ll &a,ll &b){\n\t\tif(!y)return a=1,b=0,void();\n\t\texgcd(y,x%y,a,b);ll tmp=a;a=b;b=tmp-x/y*b;\n\t}\n\tll inv(ll x){ll a,b;exgcd(x,MOD,a,b);return (a+MOD)%MOD;}\n\tll calc_prd(ll x){\n\t\tpoly prd;prd.v[0]=1;ll sum=0;\n\t\tfor(int i=60;~i;i--)if((x/5)>>i&1)prd=prd*shift(f[i],sum),sum+=5ll<<i;\n\t\tll res=prd.v[0];\n\t\tfor(ll i=x/5*5+1;i<=x;i++)if(i%5)res=mul(res,i);\n\t\treturn res;\n\t}\n\tll calc(ll x){if(!x)return 1;return mul(calc_prd(x),calc(x/5));}\n\tll binom(ll n,ll k){\n\t\tif(n<0||k<0||n<k)return 0;\n\t\tll pw=calc_pw5(n)-calc_pw5(k)-calc_pw5(n-k);\n\t\tif(pw>=23)return 0;\n\t\telse{\n\t\t\tll A=calc(n),B=calc(k),C=calc(n-k);\n\t\t\treturn mul(mul(A,inv(B)),mul(inv(C),pw5[pw]));\n\t\t}\n\t}\n\tvoid init(){\n\t\tfor(int i=(pw5[0]=1);i<=23;i++)pw5[i]=pw5[i-1]*5;\n\t\tfor(int i=0;i<=23;i++){\n\t\t\tc[i][0]=1;\n\t\t\tfor(int j=1;j<=i;j++)c[i][j]=c[i-1][j]+c[i-1][j-1];\n\t\t}\n\t\tf[0].v[0]=24;f[0].v[1]=50;f[0].v[2]=35;f[0].v[3]=10;f[0].v[4]=1;\n\t\tfor(int i=1;i<=60;i++)f[i]=f[i-1]*shift(f[i-1],5ll<<i-1);\n\t}\n}\nll binom(ll n,ll k){return Binomial::binom(n,k);}\nconst int MAXN=60;\nconst int MAXM=1e4;\nint n,m,k,w[MAXN+5],v[MAXN+5],hd[MAXN+5],to[MAXN*2+5],nxt[MAXN*2+5],val[MAXN*2+5],ec;ll mx;\nvoid adde(int u,int v,int w){to[++ec]=v;val[ec]=w;nxt[ec]=hd[u];hd[u]=ec;}\nint dis[MAXN+5][MAXN+5];\nvoid dfs0(int x,int f,int rt){\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e],z=val[e];if(y==f)continue;\n\t\tdis[rt][y]=dis[rt][x]+z;dfs0(y,x,rt);\n\t}\n}\nstruct dat{\n\tll mx,cnt;\n\tdat(){mx=-1e18;cnt=0;}\n\tdat(ll _mx,ll _cnt){mx=_mx;cnt=_cnt;}\n\tfriend dat operator +(const dat &X,const dat &Y){\n\t\tdat ret;ret.mx=max(X.mx,Y.mx);ret.cnt=0;\n\t\tif(X.mx==ret.mx)ret.cnt+=X.cnt;\n\t\tif(Y.mx==ret.mx)ret.cnt+=Y.cnt;\n\t\treturn ret;\n\t}\n}dp[MAXN+5][MAXM+5];\nbool ban[MAXN+5];\nvoid dfs(int x,int f){\n\tfor(int e=hd[x];e;e=nxt[e]){\n\t\tint y=to[e];if(y==f||ban[y])continue;\n\t\tfor(int i=0;i+w[y]<=m;i++)dp[y][i+w[y]]=dat(dp[x][i].mx+v[y],dp[x][i].cnt);\n\t\tdfs(y,x);for(int i=0;i<=m;i++)dp[x][i]=dp[x][i]+dp[y][i];\n\t}\n}\nll mx_val;\nll calc_val(int x){\n\tfor(int i=1;i<=n;i++)for(int j=0;j<=m;j++)dp[i][j]=dat();\n\tdp[x][w[x]]=dat(v[x],1);dfs(x,0);dat res;\n\tfor(int i=0;i<=m;i++)res=res+dp[x][i];\n\treturn res.mx;\n}\nll calc_vert(int x){\n\tmemset(ban,0,sizeof(ban));\n\tfor(int i=1;i<=n;i++)if(1ll*dis[i][x]*v[i]>mx)ban[i]=1;\n\tfor(int i=1;i<=n;i++)for(int j=0;j<=m;j++)dp[i][j]=dat();\n\tdp[x][w[x]]=dat(v[x],1);dfs(x,0);dat res;\n\tfor(int i=0;i<=m;i++)res=res+dp[x][i];\n\treturn (res.mx==mx_val)?binom(res.cnt,k):0;\n}\nll calc_edge(int x,int y){\n\tmemset(ban,0,sizeof(ban));\n\tfor(int i=1;i<=n;i++)if(1ll*dis[i][x]*v[i]>mx||1ll*dis[i][y]*v[i]>mx)ban[i]=1;\n\tif(ban[x]||ban[y])return 0;\n\tfor(int i=1;i<=n;i++)for(int j=0;j<=m;j++)dp[i][j]=dat();\n\tdp[x][w[x]]=dat(v[x],1);dp[y][w[y]]=dat(v[y],1);dfs(x,y);dfs(y,x);\n\tfor(int i=1;i<=m;i++)dp[y][i]=dp[y][i]+dp[y][i-1];\n\tdat res;for(int i=0;i<=m;i++)res=res+dat(dp[x][i].mx+dp[y][m-i].mx,1ll*dp[x][i].cnt*dp[y][m-i].cnt);\n\treturn (res.mx==mx_val)?binom(res.cnt,k):0;\n}\nint main(){\n\tBinomial::init();scanf(\"%d%d%d%lld\",&n,&m,&k,&mx);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&w[i]);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&v[i]);\n\tfor(int i=1,u,v,w;i<n;i++)scanf(\"%d%d%d\",&u,&v,&w),adde(u,v,w),adde(v,u,w);\n\tfor(int i=1;i<=n;i++)dfs0(i,0,i);\n\tfor(int i=1;i<=n;i++)chkmax(mx_val,calc_val(i));\n\tll res=0;\n\tfor(int i=1;i<=n;i++)if(w[i]<=m)res=(res+calc_vert(i))%MOD;\n\tfor(int i=1;i<=n;i++)for(int e=hd[i];e;e=nxt[e]){\n\t\tint j=to[e];\n\t\tif(i<j&&w[i]+w[j]<=m)res=(res-calc_edge(i,j)+MOD)%MOD;\n\t}\n\tprintf(\"%lld\\n\",res);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1684545082,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P9248 [\u96c6\u8bad\u961f\u4e92\u6d4b 2018] \u5b8c\u7f8e\u7684\u96c6\u5408"
    }
]