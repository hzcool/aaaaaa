[
    {
        "content": "# \u9898\u610f\u89e3\u91ca\uff08\u672c\u9898\u6700\u91cd\u8981\u7684\u90e8\u5206\uff09  \n~~\u672c\u7bc7\u9898\u89e3\u8fc7\u4e8e\u8be6\u7ec6\uff0c\u9002\u5408\u521d\u5b66\u8005\u98df\u7528~~  \n\n\u7ed9\u4f60\u4e00\u4e9b\u5b57\u7b26\u4e32\uff0c\u8ba9\u4f60\u5bf9\u5176\u8fdb\u884c\u6392\u5217\uff0c\u4f7f\u5f97\u6309\u4ee5\u4e0b\u89c4\u5219\u82b1\u8d39\u6700\u5c11(\u7136\u800c\u9898\u610f\u771f\u7684\u4e0d\u6e05\u695a\uff0c\u5f88\u5bb9\u6613\u5c31\u8ba9\u4eba\u4ee5\u4e3a\u5b57\u7b26\u4e32\u7684\u987a\u5e8f\u662f\u6392\u597d\u7684)  \n\n> \uff08$x$\u4e3a\u5b57\u7b26\u4e32\u5728\u81ea\u884c\u6392\u5b9a\u7684\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5f53\u524d\u5b57\u7b26\u4e32\u4e3a$a$)  \n> 1.\u5982\u679c$a$\u5b58\u5728\u540e\u7f00\u4e14a\u7684\u540e\u7f00\u5728a\u4e4b\u540e\uff0c\u82b1\u8d39$+=n^2$  \n> 2.\u5982\u679c$a$\u4e0d\u5b58\u5728\u540e\u7f00\u5219\u82b1\u8d39$+=x$  \n> 3.\u8bbe$y$\u4e3a$a$\u4e4b\u524d\u79bb\u5176\u6700\u8fd1\u7684\u662f$a$\u7684\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c$a$\u5b58\u5728\u540e\u7f00\u4e14$a$\u7684\u540e\u7f00\u5728$a$\u4e4b\u524d\uff0c\u5219\u82b1\u8d39$+=x-y$   \n\n\u7ecf\u8fc7\u8f6c\u5316\u9898\u610f\u5c31\u6bd4\u8f83\u663e\u7136\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u5982\u679c\u4ed4\u7ec6\u8bfb\u9898\u6211\u4eec\u53d1\u73b01\uff0c2\u89c4\u5219\u5176\u5b9e\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u3002  \n\n\u89c4\u52191\u6211\u4eec\u53ea\u8981\u628a$a$\u7684\u540e\u7f00\u653e\u5728$a$\u4e4b\u524d\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u80af\u5b9a\u4f18\u4e8e\u653e\u5728$a$\u7684\u540e\u9762\u56e0\u4e3a$x-y$\u7684\u503c\u6700\u5927\u53ea\u80fd\u662fn-1\u663e\u7136\u4f18\u4e8e$n^2$ \n\n\u89c4\u52192\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u89c4\u5219\u4e09\u4e2d$y=0$\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u76f4\u63a5\u5f53\u89c4\u52193\u6765\u5904\u7406\u5c31\u597d  \n\n# \u5927\u4f53\u601d\u8def  \n\u770b\u5230\u540e\u7f00\u6211\u4eec\u663e\u7136\u9996\u5148\u60f3\u5230\u7684\u662f\u540e\u7f00\u6570\u7ec4\uff0c\u4f46\u662f\u672c\u849f\u84bb\u592a\u5f31\u4e86\u4e0d\u4f1a\u600e\u4e48\u529e\uff1f\uff1f\uff1f\uff08~~\u800c\u4e14\u672c\u849f\u84bb\u4e5f\u4e0d\u77e5\u9053\u672c\u9898\u80fd\u4e0d\u80fd\u7528\u540e\u7f00\u6570\u7ec4~~\uff09\n\n\u6211\u4eec\u628a\u5b57\u7b26\u4e32\u7ffb\u4e2a\u987a\u5e8f\u5c31\u4f1a\u53d1\u73b0\u540e\u7f00\u5176\u5b9e\u5c31\u662f\u524d\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ffb\u8f6c\u5b57\u7b26\u4e32\uff0c\u5904\u7406\u524d\u7f00\u3002  \n\n\u800c\u5904\u7406\u524d\u7f00\u6211\u4eec\u9996\u5148\u5c31\u4f1a\u60f3\u5230trie\u5b57\u5178\u6811\uff0c\u5ea7\u6905\u672c\u9898\u6211\u4eec\u91c7\u7528\u5efa\u7acbtrie\u5b57\u5178\u6811\u7684\u505a\u6cd5\u3002  \n\n\u770b\u61c2\u9898\u76ee\u7684\u89c4\u5219\u4e4b\u540e\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u8d2a\u5fc3\u7684\u6c42\u89e3\u6b64\u9898\uff0c\u53ea\u8981\u8ba9\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u4e0e\u5b57\u7b26\u4e32\u4e4b\u95f4\u6240\u9694\u7684\u5b57\u7b26\u4e32\u6570\u76ee\u6700\u5c0f\u5373\u53ef  \n\n\u6240\u4ee5\u7b2c\u4e00\u6b65\u6211\u4eec\u5efa\u7acb\u4e00\u9897trie\u6811  \n\n\u7b2c\u4e8c\u6b65\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709\u53ef\u80fd\u6709\u5f88\u591a\u540e\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5224\u91cd\uff0c\u8fd9\u91cc\u4f7f\u7528**\u5e76\u67e5\u96c6**  \n+\n\u4f18\u4e8e\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u4e0e\u5b57\u7b26\u4e32\u4e4b\u95f4\u5b58\u5728\u6709\u5411\u7684\u5173\u7cfb\uff0c\u4fbf\u5efa\u7acb\u4e00\u5f20\u6709\u5411\u56fe\u3002$x->y$\u4ee3\u8868$x$\u662f$y$\u7684\u540e\u7f00   \n\n\u56e0\u4e3a\u8981\u4fdd\u8bc1\u5b57\u7b26\u4e32\u4e0e\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u4e4b\u95f4\u8ddd\u79bb\u6700\u5c0f\u6240\u4ee5\u8d2a\u5fc3\u7684\u9009\u53d6\u4ee5x\u4e3a\u6839\u7684\u6700\u5c0f\u7684\u5b50\u6811 \n\n\uff08\u4f7f\u7528vector\u5728\u7b97\u51fa\u6bcf\u68f5\u5b50\u6811\u5927\u5c0f\u540e\u8fdb\u884c\u6392\u5e8f\u5373\u53ef\uff09   \n\u6700\u540e\u6309\u7167\u89c4\u5219\u6c42\u548c\n\n# \u6c42\u548c\u65f6\u4f7f\u7528dfs\u5e8f\u7684\u6b63\u786e\u6027\u7684\u8bc1\u660e  \n\n## \u7ecfWQY\u67e5\u9605\u65e0\u8bef^_^\n\n\u5982\u679c\u4f60\u6709\u8ba4\u771f\u770b\u6211\u7684\u6216\u5176\u4ed6\u4eba\u7684\u9898\u89e3\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5728\u6700\u540e\u6c42\u548c\u7684\u65f6\u5019\u662f\u6309\u7167dfs\u5e8f\u7684\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\uff1f\uff08~~\u6211\u4e0d\u4f1a~~\uff09  \n\n\u6240\u4ee5\u6211\u5728\u590f\u4ee4\u8425\u65f6\u627e\u4e86wqy\u795e\u4ed9\u8bf7\u6559\u3002  \n\n>\u8003\u8651\u5efa\u51fa\u4e00\u68f5\u6811\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6784\u5efa\u7684\u4efb\u610f\u5408\u6cd5\u7684\u5e8f\u5217\uff0c\u90fd\u6ee1\u8db3i\u7684\u7236\u4eb2\u4e00\u5b9a\u5728i\u4e4b\u524d\u51fa\u73b0\uff0ci\u7684\u5b69\u5b50\u4eec\u90fd\u4e00\u5b9a\u5728i\u4e4b\u540e\u51fa\u73b0  \n\n>\u5148\u5c1d\u8bd5\u8bc1\u660edfs\u5e8f\u4e00\u5b9a\u6700\u4f18\uff0c\u5bf9\u4e8e\u4ee5\u540c\u4e00\u6df1\u5ea6\u7684\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5728\u4e00\u9897\u4e2d\u627e\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9j,\u5728\u53e6\u4e00\u9897\u91cc\u627e\u4e00\u4e2a\u6839\u8282\u70b9i(\u5f53\u524d\u5e8f\u5217\u4e2dj\u6240\u5728\u7684\u5b50\u6811\u7684\u6839\u5728i\u4e4b\u524d\u51fa\u73b0  \n\n>\u5047\u8bbej<i\u7684\u65f6\u5019\u4ee3\u4ef7\u6700\u5c0f\uff0c\u5c1d\u8bd5\u5c06j\u653e\u5728i\u7684\u540e\u9762\uff0c\u6b64\u65f6i<j\u3002\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u5982\u679cj\u653e\u5728i\u4e0ei\u7684\u5b69\u5b50\u4eec\u4e4b\u95f4\uff0ci\u7684\u5b69\u5b50\u4eec\u548ci\u7684\u8ddd\u79bb\u90fd\u4f1a\u52a01\uff0c\u6240\u4ee5\u603b\u4ee3\u4ef7\u4f1a\u589e\u52a0\uff0c\u800cj\u548cj\u7684\u7236\u4eb2\u7684\u8ddd\u79bb\u4e00\u5b9a\u4e5f\u4f1a\u589e\u52a0\uff0c\u6240\u4ee5\u603b\u4ee3\u4ef7\u4e5f\u4f1a\u589e\u52a0  \n\n>\u6240\u4ee5\u5bf9\u4e8ej\u6240\u5728\u5b50\u6811\u7684\u6839\u6bd4i\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u65e9\u7684\u60c5\u51b5\uff0cj<i\u7684\u60c5\u51b5\u662f\u6700\u4f18\u7684  \n\n>\u90a3\u4e48\u6bcf\u4e2a\u5b50\u6811\u5f62\u6210\u4e86\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u8c03\u6574\uff0c\u6700\u540e\u6211\u4eec\u53d1\u73b0\u5f62\u6210\u4e86\u4e00\u4e2adfs\u5e8f(\u6709\u65f6\u522b\u7684\u5e8f\u5217\u4e5f\u4f1a\u548cdfs\u5e8f\u5217\u4e00\u6837\u4f18\u79c0\uff0c\u4f46\u662f\u6b64\u5904\u8bc1\u660e\u7684\u662fdfs\u5e8f\u5217\u662f\u6700\u4f18\u89e3\u4e4b\u4e00\uff0c\u4e0d\u662f\u552f\u4e00\u89e3\n\n>\u63a5\u4e0b\u6765\u518d\u8bc1\u660e\u5148\u904d\u5386\u5b50\u6811\u5c0f\u7684\u66f4\u4f18\u79c0\u3002  \n\n>WQY:  \n>\u6708\u660e\u98ce\u6e05 2019.11.4 21:28:04  \n>\u56e0\u4e3a\u4f60\u6240\u6709\u7684size\u6392\u5e8f\u4e4b\u540e\n\n>\u6708\u660e\u98ce\u6e05 2019.11.4 21:28:17  \n>\u7b2ci\u4e2a\u6839\u8282\u70b9\u7684\u8d21\u732e\u662f\u524d\u9762\u6240\u6709\u6811\u7684size\u4e4b\u548c  \n>\u6240\u4ee5\u8981\u6392\u5e8f\n\n>\u7efc\u4e0a\u6240\u8ff0\uff0c\u5f53\u6211\u4eec\u8fdb\u884cdfs\u5e8f\u4e14\u6309\u5b50\u6811\u5927\u5c0f\u6392\u5e8f\u65f6\uff0c\u6c42\u51fa\u4ee3\u4ef7\u5373\u4e3a\u6700\u4f18\u3002 \n\n>Q.E.D\n\n\u611f\u8c22wqy\uff0c\u7ed9\u4e86\u6211\u5f88\u5927\u7684\u5e2e\u52a9[wucstdio](https://www.luogu.org/space/show?uid=54214)\n\n# CODE \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#define N 510050\n#define M 100050\n#define ll long long\nll ans=0;\nchar x[N];\nint n,cnt,bo[N],tot=1,trie[5000050][27],fa[N],id[N],son[N],num;\nvector<int>tu[N];\nint read()\n{\n    int s=0,p=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-')p=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        s=(s<<1)+(s<<3)+(ch^48);\n        ch=getchar();\n    }\n    return s*p;\n}\nint find(int x)\n{\n    if(fa[x]==x)return fa[x];\n    else return fa[x]=find(fa[x]);\n}\nvoid insert(char *s,int bh)\n{\n    int l=strlen(s);\n    int u=1;\n    for(int i=l-1;i>=0;i--)\n    {\n        int c=s[i]-'a';\n        if(!trie[u][c])trie[u][c]=++tot;\n        u=trie[u][c];\n    }\n    bo[u]=bh;\n}\nvoid make(int x)\n{\n    for(int i=0;i<26;i++)\n    {\n        int v=trie[x][i];\n        if(v)\n        {\n            if(!bo[v])\n            {\n                fa[v]=find(x);\n            }\n            else\n            {\n                tu[bo[find(x)]].push_back(bo[v]);\n            }\n            make(v);\n        }\n    }\n}\nint cmp(int x,int y)\n{\n    return son[x]<son[y];\n}\nvoid sonsum(int x)\n{\n    son[x]=1;\n    for(vector<int> :: iterator it=tu[x].begin();it!=tu[x].end();it++)\n    {\n        int v=*it;\n        sonsum(v);\n        son[x]+=son[v];\n    }\n    sort(tu[x].begin(),tu[x].end(),cmp);\n}\nvoid dfs(int x)\n{\n    id[x]=num++;\n    for(vector<int> :: iterator it=tu[x].begin();it!=tu[x].end();it++)\n    {\n        int v=*it;\n        ans+=num-id[x];\n        dfs(v);\n    }\n}\nvoid dfss(int x)\n{\n    for(vector<int> :: iterator it=tu[x].begin();it!=tu[x].end();it++)\n    {\n        int v=*it;\n        cout<<v<<endl;\n        dfss(v);\n    }\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",x);\n        insert(x,i);\n    }\n    for(int i=1;i<=tot;i++)fa[i]=i;\n    make(1); sonsum(0);dfs(0);\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\u5e76\u67e5\u96c6\u53bb\u91cd\u7684\u601d\u8def\u6765\u6e90\u4e8e[\u6b64\u7bc7blog](https://www.luogu.org/blog/communist/solution-p3294)",
        "postTime": 1563189786,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u8ba4\u4e3a\u56fe\u7247\u662f\u6700\u597d\u7406\u89e3\u7684\uff0c\u56e0\u6b64\u672c\u9898\u89e3\u5c06\u6309\u56fe\u8bf4\u8bdd\n\n---\n\n### \u9898\u610f\uff08\u5df2\u7528\u8d2a\u5fc3\u601d\u8def\u7b80\u5316\uff09\n\u7ed9\u5b9an\u4e2a\u5355\u8bcd$s_i$\uff0c\u8bf7\u91cd\u6392\u5e8f\u5217\uff0c\u4f7f\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b58\u5728\u7684\u540e\u7f00\u90fd\u5728**\u524d\u9762**\n\n\u8bbe$s_j$\u4e3a\u79bb$s_i$\u6700\u8fd1\u7684\u540e\u7f00\u5b57\u7b26\u4e32\n\n\u5b9a\u4e49$a_i=i-j$\n\n$ans=min(\\sum a_i)$\n\n---\n\n### \u9898\u89e3\n\n\u540e\u7f00\u663e\u7136\u6ca1\u6709\u524d\u7f00\u6765\u7684\u5bb9\u6613\u5904\u7406\uff0c\u6240\u4ee5\u81ea\u7136\u60f3\u5230\u7ffb\u8f6c\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5efa\u51fatrie\u6811\n\n\u4e0b\u9762\u662f\u4e2a\u4f8b\u5b50\uff1a\n\n```cpp\n6\na\nca\nea\ngda\nhda\nifb\n```\n\n#### 1. \u5efa\u51fatrie\u6811(\u7ea2\u70b9\u662f\u98a0\u5012\u540e\u6bcf\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\uff0c\u6ce8\u610f\u6839\u4e5f\u662f\uff09\uff1a\n\n![](https://s2.ax1x.com/2019/10/28/K6m0Rf.png)\n\n```cpp\n\tvoid ins(char *s){\n\t\tint x=0;\n\t\tfor(int i=0;s[i];i++){\n\t\t\tif(!a[x].nt[s[i]-'a']) a[x].nt[s[i]-'a']=++cnt;\n\t\t\tx=a[x].nt[s[i]-'a'];\n\t\t}\n\t\ta[x].tag=1; //tag==1\u8bf4\u660e\u662f\u7ea2\u70b9\n\t}\n```\n\n#### 2. \u91cd\u6784\u6811\n\n\u8df3\u8fc7\u767d\u70b9\uff0c\u4fdd\u7559\u7ea2\u70b9\uff08\u767d\u70b9\u65e0\u7528\uff0c\u53ef\u4ee5\u5ffd\u7565\uff09\n\n![](https://s2.ax1x.com/2019/10/28/K6mwJP.png)\n\n```cpp\n\tvoid doit(int x){\n\t\tif(a[x].tag&&x){\n\t\t\tg[last[x]].push_back(x); //g[x][]\u5b58\u91cd\u6784\u6811\u4e2d\u70b9x\u7684\u513f\u5b50\u4eec\n\t\t\tlast[x]=x; //last[x]\u662f\u539f\u6811\u91ccx\u8282\u70b9\u4e0a\u65b9\u79bb\u5b83\u6700\u8fd1\u7684\u7ea2\u70b9\uff08\u5305\u62ec\u81ea\u5df1\uff09\n\t\t}\n\t\tfor(int i=0;i<26;i++) if(a[x].nt[i]){\n\t\t\tlast[a[x].nt[i]]=last[x];\n\t\t\tdoit(a[x].nt[i]);\n\t\t}\n\t}\n```\n\n#### 3. dfs\u904d\u5386\u91cd\u6784\u6811\uff0c\u5e76\u5c06\u76f4\u63a5\u7956\u5148\u76f8\u540c\u7684\u5b50\u6811\u6309\u8282\u70b9\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n![](https://s2.ax1x.com/2019/10/28/K6uGEd.png)\n\n```cpp\ninline bool cmp(const int &x,const int &y){\n\treturn sz[x]<sz[y];\n}\nvoid dfs(int x){\n\tsz[x]=1; //sz[x]\u662f\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\n\tfor(int i=0;i<g[x].size();i++){\n\t\tdfs(g[x][i]);\n\t\tsz[x]+=sz[g[x][i]];\n\t}\n\tsort(g[x].begin(),g[x].end(),cmp);\n}\n```\n\n#### 4. \u6839\u636e\u9898\u610f\u904d\u5386\u91cd\u6784\u6811\uff0c\u7528dfs\u5e8f\u5f97\u5230\u7b54\u6848\n\n```cpp\nvoid getans(int x){\n\tint dfn=cnt++; //dfn\u662f\u7236\u4eb2\u7684dfs\u5e8f\uff0ccnt\u662f\u8282\u70b9\u81ea\u5df1\u7684dfs\u5e8f\n\tfor(int i=0;i<g[x].size();i++){\n\t\tans+=cnt-dfn; //\u4e24\u8005\u76f8\u51cf\u5c31\u662f\u9898\u610f\u91cc\u7684ai\n\t\tgetans(g[x][i]);\n\t}\n}\n```\n\n---\n\n### \u601d\u8def\u80cc\u540e\u7684\u7406\u7531\n\n#### Q1. \u4e3a\u4ec0\u4e48\u9898\u610f\u53ef\u4ee5\u8fd9\u6837\u7b80\u5316\uff1f\n\u4e09\u6761\u89c4\u5219\uff0c\u89c4\u5219\u4e00\u663e\u7136\u662f\u53ef\u4ee5\u88ab\u907f\u514d\u4e14\u6ca1\u6709\u540e\u4e24\u79cd\u4f18\u7684\uff0c\u89c4\u5219\u4e8c\u53ef\u4ee5\u770b\u505a\u89c4\u5219\u4e09\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u53ea\u8003\u8651\u89c4\u5219\u4e09\u5373\u53ef\n\n#### Q2. \u6392\u5e8f\u7684\u6b63\u786e\u6027\uff1f\n\u82b1\u8d39\u4e0e\u6700\u540e\u4e00\u4e2a\u586b\u5165\u7684\u540e\u7f00\u6709\u5173,\u90a3\u4e48\u8fd9\u4e2a\u540e\u7f00\u7684\u4f4d\u7f6e\u79bb\u5f53\u524d\u4f4d\u7f6e\u8d8a\u8fd1\u8d8a\u597d,\u4e5f\u5c31\u662f\u5e94\u8be5\u6709\u5c3d\u91cf\u5c11\u7684\u5355\u8bcd\u5939\u5728\u4e24\u4e2a\u4e2d\u95f4,\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u9009\u4e0b\u5c5e\u5355\u8bcd\u6700\u5c11\u7684\u90a3\u4e2a\u8fdb\u884c\u62d3\u5c55\uff0c\u800c\u4e0b\u5c5e\u5355\u8bcd\u7684\u591a\u5c11\u5c31\u7b49\u4ef7\u4e8e\u91cd\u6784\u6811\u4e2d\u5b50\u6811\u7684\u5927\u5c0f\u3002\n\n#### Q3. dfs\u5e8f\u7684\u6b63\u786e\u6027\uff1f\n\u8fd9\u91cc\u5f15\u7528 @\u5750\u5c71\u5ba2 \u7684\u9898\u89e3\uff1a\n> \u8003\u8651\u91cd\u65b0\u5efa\u6811\u4e4b\u540e\uff0ci\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u540e\u7f00\u90fd\u662fi\n\n>\u5982\u679c\u540c\u4e00\u6df1\u5ea6\u4e0a\u6709\u4e0d\u6b62\u4e00\u68f5\u5b50\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u5728\u4e00\u68f5\u4e0a\u53d6\u51fa\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9j\uff0c\u518d\u53d6\u51fa\u4e00\u4e2a\u6839\u8282\u70b9i\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679cj>i\u7684\u8bdd\u80af\u5b9a\u4e0d\u5982i<j\u4f18\u79c0\n\n>\u56e0\u4e3a\u8c03\u6574\u4e4b\u540ei\u7684\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u5bf9\u82b1\u8d39\u7684\u8d21\u732e-=\u5b50\u6811\u5927\u5c0f\uff0cj\u5bf9\u82b1\u8d39\u7684\u8d21\u732e+1\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u770b\u5230j>i\u7684\u82b1\u8d39<=i>j\u7684\u60c5\u51b5\n\n>\u6700\u540e\u6211\u4eec\u7ecf\u8fc7\u6240\u6709\u7684\u8c03\u6574\u53ef\u4ee5\u53d1\u73b0\u5e8f\u5217\u53d8\u6210\u4e86dfs\u5e8f\n\n>\u6240\u4ee5dfs\u5e8f\u6700\u4f18\n\n---\n\n### \u5b8c\u6574\u4ee3\u7801\n\n\u5c06\u4ee5\u4e0a\u5404\u6b65\u9aa4\u4ee3\u7801\u5408\u5728\u4e00\u8d77\u5c31\u662f\uff1a\n\n**tips. ANS\u8981\u7528long long!!!**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read(int &x){\n\tchar c=getchar();bool f=0;x=0;\n\twhile(!isdigit(c)) f|=c=='-',c=getchar();\n\twhile(isdigit(c)) x=(x<<1)+(x<<3)+(c^48),c=getchar();\n\tif(f) x=-x;return x;\n}\ninline void write(long long x){\n\tif(x<0) putchar('-'),write(-x);\n\telse{if(x>9) write(x/10);putchar('0'+x%10);}\n}\nconst int L=5.1e5+5;\nstruct node{ //trie\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\n\tint nt[26];\n\tbool tag;\n};\nlong long ans;\nint cnt,last[L],sz[L],n;\nvector<int> g[L];\nchar s[L];\nstruct trie{ //trie\u53ca\u6240\u9700\u64cd\u4f5c\n\tnode a[L];\n\tint cnt;\n\tvoid ins(char *s){ //\u5efa\u6811\n\t\tint x=0;\n\t\tfor(int i=0;s[i];i++){\n\t\t\tif(!a[x].nt[s[i]-'a']) a[x].nt[s[i]-'a']=++cnt;\n\t\t\tx=a[x].nt[s[i]-'a'];\n\t\t}\n\t\ta[x].tag=1;\n\t}\n\tvoid doit(int x){ //\u91cd\u6784\u6811\n\t\tif(a[x].tag&&x){\n\t\t\tg[last[x]].push_back(x);\n\t\t\tlast[x]=x;\n\t\t}\n\t\tfor(int i=0;i<26;i++) if(a[x].nt[i]){\n\t\t\tlast[a[x].nt[i]]=last[x];\n\t\t\tdoit(a[x].nt[i]);\n\t\t}\n\t}\n}tr;\n\ninline bool cmp(const int &x,const int &y){\n\treturn sz[x]<sz[y];\n}\nvoid dfs(int x){ //\u91cd\u6392\u91cd\u6784\u6811\n\tsz[x]=1;\n\tfor(int i=0;i<g[x].size();i++){\n\t\tdfs(g[x][i]);\n\t\tsz[x]+=sz[g[x][i]];\n\t}\n\tsort(g[x].begin(),g[x].end(),cmp);\n}\nvoid getans(int x){ //\u7edf\u8ba1\u7b54\u6848\n\tint dfn=cnt++;\n\tfor(int i=0;i<g[x].size();i++){\n\t\tans+=cnt-dfn;\n\t\tgetans(g[x][i]);\n\t}\n}\nsigned main(){\n\tread(n);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",s);\n\t\treverse(s,s+strlen(s)); //\u53cd\u8f6c\u5355\u8bcd\n\t\ttr.ins(s);\n\t}\n\ttr.a[0].tag=1; //\u6839\u4e5f\u662f\u7ea2\u70b9\n\ttr.doit(0);\n\tdfs(0);\n\tgetans(0);\n\twrite(ans);\n}\n```",
        "postTime": 1572232256,
        "uid": 65735,
        "name": "yuzhechuan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "### \u9605\u8bfb\u7406\u89e3\u9898\n\n\u9898\u610f\u89c1\u697c\u4e0a\u9898\u89e3\n\n------------\n\n### $Trie$\n\n\u540e\u7f00\u95ee\u9898\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u628a\u5b83\u8f6c\u5316\u4e3a\u524d\u7f00\u95ee\u9898\uff0c\u7528\u5b57\u5178\u6811\u89e3\u51b3\u95ee\u9898\n\n### \u8d2a\u5fc3\n\n\u5bb9\u6613\u60f3\u5230\uff0c\u4e00\u4e2a\u4e32\u7684\u540e\u7f00\u8981\u5148\u4e8e\u5b83\u63d2\u5165\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4e32\u548c\u5176\u82e5\u5e72\u540e\u7f00\u4e32\uff0c\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u8981\u5148\u63d2\u5165\u540e\u7f00\u4e32\n\n\u7136\u540e\u9012\u5f52\u8fdb\u5165$size$\u6700\u5c0f\u7684\u5b50\u4e32\n\n```\nbool cmp(const int &x,const int &y)\n{\n\treturn size[x]<size[y];\n}\nvoid makes(int x)\n{\n\tsize[x]=1;\n\tfor(int i=0;i<t[x].size();i++)\n\t{\n\t\tmakes(t[x][i]);\n\t\tsize[x]+=size[t[x][i]];\n\t}\n\tsort(t[x].begin(),t[x].end(),cmp);\n}\nvoid dfs(int x)\n{\n\tid[x]=tot++;\n\tfor(int i=0;i<t[x].size();i++)\n\t{\n\t\tans+=tot-id[x];\n\t\tdfs(t[x][i]);\n\t}\n}\n```\n\n### \u6ce8\u610f\n\n\u6c42$size$\u8981\u91cd\u6784\u6811\uff0c\u53ea\u4fdd\u7559\u5173\u952e\u70b9\n\n### \u548c\u697c\u4e0a\u4e0d\u4e00\u6837\u7684\u5730\u65b9\n\n#### \u56e0\u4e3a\u6211\u592a\u84bb\u4e86\uff0c\u5e76\u4e0d\u4f1a\u6307\u9488\uff0c\u6240\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cd\u6784\u6811\u7684\u65b9\u6cd5\n\n\u5728\u5efa$Trie$\u65f6\u7ed9\u6240\u6709\u4e32\u7684\u7ed3\u5c3e\u548c$Trie$\u6811\u7684\u6839\u8282\u70b9\u6807\u53f7\uff0c\u8868\u793a\u65b0\u6811\u4e2d\u70b9\u7684\u7f16\u53f7\n\n```\nvoid insert(const string &s,int id)\n{\n\tint now=0,l=len[id];\n\tfor(int i=0;i<l;i++)\n\t{\n\t\tint c=idx(s[i]);\n\t\tnow=tr[now][c]?tr[now][c]:tr[now][c]=++cnt;\n\t}\n\tval[now]=id;\n}\n```\n\n\u7136\u540e\u904d\u5386$Trie$\u6811\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u88ab\u6807\u53f7\uff0c\u5c31\u628a\u5b83\u5e76\u5165\u5f53\u524d\u8282\u70b9\u7684\u96c6\u5408\uff1b\u5426\u5219\u628a\u8fd9\u4e2a\u5b50\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u6240\u5728\u96c6\u5408\u7684\u6839\u7684\u513f\u5b50\uff08\u5c31\u662f\u8fde\u4e00\u6761\u8fb9\uff09\n\n```\nvoid make(int x)\n{\n\tfor(int v,i=0;i<26;i++)\n\t\tif(v=tr[x][i])\n\t\t{\n\t\t\tif(!val[v])\n\t\t\t\tf[v]=find(x);\n\t\t\telse\n\t\t\t\tt[val[find(x)]].push_back(val[v]);\n\t\t\tmake(v);\n\t\t}\n}\n```\n\n### \u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#define int long long \nusing namespace std;\nconst int maxl=510010,maxn=1e5+10;\nint n,tr[maxl][30],val[maxl],cnt,len[maxn],size[maxn],tot,f[maxl],id[maxn],ans;\nvector<int>t[maxn];\nstring st[maxn];\ninline int find(int x)\n{\n\treturn x==f[x]?x:f[x]=find(f[x]);\n}\ninline int idx(char c)\n{\n\treturn c-'a';\n}\nvoid insert(const string &s,int id)\n{\n\tint now=0,l=len[id];\n\tfor(int i=0;i<l;i++)\n\t{\n\t\tint c=idx(s[i]);\n\t\tnow=tr[now][c]?tr[now][c]:tr[now][c]=++cnt;\n\t}\n\tval[now]=id;\n}\nvoid make(int x)\n{\n\tfor(int v,i=0;i<26;i++)\n\t\tif(v=tr[x][i])\n\t\t{\n\t\t\tif(!val[v])\n\t\t\t\tf[v]=find(x);\n\t\t\telse\n\t\t\t\tt[val[find(x)]].push_back(val[v]);\n\t\t\tmake(v);\n\t\t}\n}\nbool cmp(const int &x,const int &y)\n{\n\treturn size[x]<size[y];\n}\nvoid makes(int x)\n{\n\tsize[x]=1;\n\tfor(int i=0;i<t[x].size();i++)\n\t{\n\t\tmakes(t[x][i]);\n\t\tsize[x]+=size[t[x][i]];\n\t}\n\tsort(t[x].begin(),t[x].end(),cmp);\n}\nvoid dfs(int x)\n{\n\tid[x]=tot++;\n\tfor(int i=0;i<t[x].size();i++)\n\t{\n\t\tans+=tot-id[x];\n\t\tdfs(t[x][i]);\n\t}\n}\nsigned main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>st[i];\n\t\tlen[i]=st[i].length();\n\t\tfor(int j=0;j<len[i]/2;j++)\n\t\t\tswap(st[i][j],st[i][len[i]-j-1]);\n\t\tinsert(st[i],i);\n\t}\n\tfor(int i=1;i<=cnt;i++)\n\t\tf[i]=i;\n\tmake(0),makes(0),dfs(0);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1540028212,
        "uid": 57045,
        "name": "communist",
        "ccfLevel": 7,
        "title": "P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u4f60n\u4e2a\u5b57\u7b26\u4e32\uff0c\u4e0d\u540c\u7684\u6392\u5217\u6709\u4e0d\u540c\u7684\u4ee3\u4ef7\uff0c\u4ee3\u4ef7\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8ba1\u7b97\uff08\u5b57\u7b26\u4e32s\u7684\u4f4d\u7f6e\u4e3ax\uff09\uff1a\n\n1.\u6392\u5728s\u540e\u9762\u7684\u5b57\u7b26\u4e32\u6709s\u7684\u540e\u7f00\uff0c\u5219\u4ee3\u4ef7\u4e3an^2\uff1b\n\n2.\u6392\u5728s\u524d\u9762\u7684\u5b57\u7b26\u4e32\u6709s\u7684\u540e\u7f00\uff0c\u4e14\u6ca1\u6709\u6392\u5728s\u540e\u9762\u7684s\u7684\u540e\u7f00\uff0c\u5219\u4ee3\u4ef7\u4e3ax-y\uff08y\u4e3a\u6700\u540e\u4e00\u4e2a\u4e0es\u4e0d\u76f8\u7b49\u7684\u540e\u7f00\u7684\u4f4d\u7f6e\uff09\uff1b\n\n3.s\u6ca1\u6709\u540e\u7f00\uff0c\u5219\u4ee3\u4ef7\u4e3ax\u3002\n\n\u6c42\u6700\u5c0f\u4ee3\u4ef7\u548c\u3002\n\n\u601d\u8def\uff1a\n\n\u5f88\u663e\u7136\uff0c\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5012\u8fc7\u6765\u540e\uff0c\u6240\u6709\u7684\u540e\u7f00\u90fd\u53d8\u6210\u4e86\u524d\u7f00\uff0c\u800c\u5904\u7406\u524d\u7f00\u95ee\u9898\u7684\u597d\u5de5\u5177\u662fTrie\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c06\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5012\u8fc7\u6765\u5efa\u7acb\u4e00\u68f5Trie\u3002\n\n\u5206\u6790\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u4ee3\u4ef7\uff0c\u5f88\u663e\u7136\uff0c\u57281\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u7684\u4ee3\u4ef7\u6bd4\u5176\u4ed6\u7684\u90fd\u5927\uff0c\u5bb9\u6613\u8bc1\u660e\u57281\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u8fd9\u4e2a\u540e\u7f00\u79fb\u5230s\u7684\u524d\u9762\uff0c\u4ee3\u4ef7\u603b\u4f1a\u6bd4\u539f\u6765\u5c0f\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u8ba9\u60c5\u51b51\u51fa\u73b0\u3002\n\n\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\u3002\n\n\u53ea\u8003\u8651\u90a3\u4e9b\u4e3a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u5b57\u7b26\u7684\u7ed3\u70b9\uff0c\u6211\u4eec\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u7ed3\u70b9\u7684\u7f16\u53f7\u51cf\u53bb\u5176\u7236\u4eb2\u7ed3\u70b9\u7f16\u53f7\u7684\u548c\u6700\u5c0f\u3002\n\n\u8fd9\u6837\u4ece\u5c0f\u5230\u5927\u904d\u5386\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\uff0c\u5f97\u5230\u6bcf\u4e2a\u7ed3\u70b9\u7684\u7f16\u53f7\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\nconst int N=100001;\nconst int LEN=510001;\nchar s[LEN];\nstd::vector<int> e[N];\nint size[N];\nlong long f[N];\nbool cmp(const int &x,const int &y) {\n    return size[x]<size[y];\n}\nclass Trie {\n    private:\n        static const int MAX_NODE=LEN;\n        static const int SIGMA_SIZE=26;\n        struct Node {\n            Node *ch[SIGMA_SIZE];\n            int val;\n            Node() {\n                memset(ch,0,sizeof ch);\n                val=0;\n            }\n        };\n        int idx(const char &ch) {\n            return ch-'a';\n        }\n    public:\n        Node *root;\n        Trie() {\n            root=new Node;\n        }\n        void insert(char s[],const int &id) {\n            Node *p=root;\n            for(unsigned i=strlen(s)-1;~i;i--) {\n                int w=idx(s[i]);\n                if(p->ch[w]) {\n                    p=p->ch[w];\n                } else {\n                    p=p->ch[w]=new Node;\n                }\n            }\n            p->val=id;\n        }\n        void rebuild(const Node *x,const int &p) {\n            if(x->val) {\n                e[p].push_back(x->val);\n            }\n            for(unsigned i=0;i<SIGMA_SIZE;i++) {\n                Node *y=x->ch[i];\n                if(!y) continue;\n                rebuild(y,x->val?x->val:p);\n            }\n            delete x;\n        }\n        void getsize(const int &x) {\n            size[x]=1;\n            for(unsigned i=0;i<e[x].size();i++) {\n                int &y=e[x][i];\n                getsize(y);\n                size[x]+=size[y];\n            }\n            std::sort(e[x].begin(),e[x].end(),cmp);\n        }\n        void solve(const int &x) {\n            f[x]=1;\n            long long tmp=0;\n            for(unsigned i=0;i<e[x].size();i++) {\n                int &y=e[x][i];\n                solve(y);\n                f[x]+=f[y]+tmp;\n                tmp+=size[y];\n            }\n        }\n};\nTrie t;\nint main() {\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) {\n        scanf(\"%s\",s);\n        t.insert(s,i);\n    }\n    t.rebuild(t.root,0);\n    t.getsize(0);\n    t.solve(0);\n    printf(\"%lld\\n\",f[0]-1);\n    return 0;\n}\n```",
        "postTime": 1505729491,
        "uid": 10086,
        "name": "skylee",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "\u8fd9\u9898\u76ee\u63cf\u8ff0\u771f\u662f\u4ee4\u4eba\u7a92\u606f\u3002\n\n3\u4e2a\u6761\u4ef6\u7684\u610f\u601d\u5927\u6982\u662f\u8fd9\u6837\uff1a\n\n(1).\u5982\u679c\u6709\u5355\u8bcd\u4f5c\u4e3a\u73b0\u5728\u6b63\u5728\u586b\u5165\u7684\u5355\u8bcd\u7684\u540e\u7f00\u4f46\u5e76\u672a\u586b\u5165\uff0c\u5c06\u82b1\u8d39n*n\u7684\u4ee3\u4ef7\u3002\n\n(2).\u5982\u679c\u6ca1\u6709\u5355\u8bcd\u4f5c\u4e3a\u5f53\u524d\u586b\u5165\u5355\u8bcd\u7684\u540e\u7f00\uff0c\u4ee3\u4ef7\u4e3a\u5f53\u524d\u586b\u5165\u5355\u8bcd\u5e8f\u53f7x\n\n(3).\u5982\u679c\u6240\u6709\u4f5c\u4e3a\u8be5\u5355\u8bcd\u7684\u540e\u7f00\u7684\u5355\u8bcd\u4e4b\u524d\u90fd\u5df2\u7ecf\u586b\u5165\uff0c\u90a3\u4e48\u4ee3\u4ef7\u4e3a\u5f53\u524d\u5e8f\u53f7x-\u6700\u540e\u4e00\u4e2a\u4f5c\u4e3a\u5f53\u524d\u5355\u8bcd\u7684\u540e\u7f00\u7684\u5355\u8bcd\u7684\u5e8f\u53f7y\u3002\n\n\u8bfb\u61c2\u9898\u4ee5\u540e\u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u660e\u663e\u7684\u8d2a\u5fc3\u3002\u7b2c1\u4e2a\u6761\u4ef6\u63d0\u793a\u4e00\u5b9a\u662f\u5148\u5c06\u6240\u6709\u4f5c\u4e3a\u540e\u7f00\u7684\u5355\u8bcd\u586b\u5165\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u8fd9\u6837\u586b\u4e0d\u7ba1\u600e\u4e48\u6837\u4ee3\u4ef7\u90fd\u5c0f\u4e8en*n\u3002\n\n\u7531\u4e8e\u8be2\u95ee\u7684\u662f\u540e\u7f00\uff0c\u6240\u4ee5\u540e\u7f00\u76f8\u540c\u5176\u5b9e\u7b49\u4ef7\u4e8e\u53cd\u4e32\u7684\u524d\u7f00\u76f8\u540c\uff0c\u6240\u4ee5\u5012\u7740\u5efa\u7acb\u4e00\u4e2atrie\u6811\u3002\n\n\u8fd9\u65f6\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4e00\u68f5\u6811\u7684\u62d3\u6251\u5e8f\uff0c\u6ee1\u8db3\u513f\u5b50\u4e0e\u7236\u4eb2\u7684\u7f16\u53f7\u5dee\u7684\u548c\u6700\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u6765\u505a\uff0c\u7b80\u5355\u89c2\u5bdf\u53d1\u73b0\uff0c\u5bf9\u4e8e\u67d0\u4e00\u523b\uff0c\u65e0\u8bba\u9009\u54ea\u4e2a\u8282\u70b9\uff0c\u603b\u4ee3\u4ef7\u90fd\u4f1a\u589e\u5927\u76ee\u524d\u80fd\u626b\u5230\u7684\u7b2c\u4e00\u4e2a\u6807\u8bb0\u70b9\u7684\u603b\u91cf\u3002\n\n\u8981\u4f7f\u603b\u4ee3\u4ef7\u6700\u5c11\uff0c\u90a3\u4e48\u8fd9\u6b21\u9009\u7684\u70b9\u4e00\u5b9a\u8981\u4f7f\u4ee5\u540e\u589e\u52a0\u7684\u70b9\u6700\u5c0f.\n\n\u6240\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u80fd\u770b\u5230\u7684\uff0c\u4ee5\u53ca\u8fd9\u4e00\u4e2a\u5b50\u6811\u4e0b\u5206\u652f\u603b\u91cf\uff0c\u4e00\u5b9a\u4f18\u5148\u5904\u7406\u5206\u652f\u66f4\u5c0f\u7684\u5b50\u6811\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair<int,int> pll;\nconst int MAXN=5e5+10;\n\nlong long n,siz,ans;\nchar s[MAXN];\nstruct Trie{\n\tint val;\n\tint son[26];\n}tr[MAXN];\nint tot[MAXN],sum[MAXN];\nvector<int> idx[MAXN];\n\nvoid insert(char a[]){          //\u5efa\u7acbtrie\u6811 \n\tint len=strlen(a);\n\tint last=0;\n\tfor(int i=len-1;i>=0;--i){  //\u540e\u7f00 \n\t\tint x=a[i]-'a';\n\t\tif(!tr[last].son[x]){\n\t\t\ttr[last].son[x]=++siz;\n\t\t}\n\t\tlast=tr[last].son[x];\n\t}\n\ttr[last].val=1;             //\u8bb0\u5f55\u7ec8\u6b62\u70b9 \n}\n\nvoid dfs(int u,int fa){\n\tif(tr[u].val)               //\u662f\u4e00\u4e2a\u7ec8\u6b62\u70b9 \n\t  tot[fa]++,idx[fa].push_back(u),fa=u;\n\tfor(int i=0;i<='z'-'a';++i){\n\t\tif(tr[u].son[i])\n\t\t  dfs(tr[u].son[i],fa);\n\t}\n\tsum[u]=tot[u];\n\tint size=idx[u].size();\n\tfor(int i=0;i<size;++i){\n\t\tsum[u]+=sum[idx[u][i]];//\u8bb0\u5f55\u5b50\u6811\u4fe1\u606f \n\t}\n}\n\nvoid bfs(){\n\tpriority_queue<pll> q;\n\tq.push(make_pair(0,0));\n\tint now=1;\n\twhile(!q.empty()){\n\t\tpair<int,int> u=q.top();\n\t\tq.pop();\n\t\tnow=now+tot[u.second]-1;\n\t\tans+=now;\n\t\tint size=idx[u.second].size();\n\t\tfor(int i=0;i<size;++i){\n\t\t\tq.push(make_pair(-sum[idx[u.second][i]],idx[u.second][i]));//\u5148\u627e\u5c0f\u7684\u6240\u4ee5\u53d6\u76f8\u53cd\u6570 \n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%s\",s);\n\t\tinsert(s);\n\t}\n\tdfs(0,0);\n\tbfs();\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1545446203,
        "uid": 31639,
        "name": "Thosaka_Forest",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "**upd on 23/01/11 \u589e\u52a0\u4e86\u5bf9\u5efa\u56fe\u90e8\u5206\u7684\u66f4\u591a\u8bf4\u660e\u3001\u5bf9\u65b9\u6cd5\u7684\u611f\u6027\u8bc1\u660e\u548c\u4ee3\u7801\u6ce8\u91ca\uff0c\u4f7f\u5176\u66f4\u51c6\u786e\u4e25\u8c28\u3001\u6d45\u663e\u6613\u61c2\u3002**\n\n***\n\n\u9898\u89e3 P3294\u3002\n\n\u6211\u4eec\u770b\u5230\u5b57\u5178\u6811\u8fd9\u4e2a\u6807\u7b7e\uff0c\u4e0b\u610f\u8bc6\u60f3\u5230\u4e86\u524d\u7f00\u3002\n\n\u4f46\u662f\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u540e\u7f00\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u5b57\u7b26\u4e32\u5148 `reverse` \u4e00\u4e0b\uff0c\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u524d\u7f00\uff0c\u65b9\u4fbf\u63cf\u8ff0\u3002\n\n***\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u56e0\u4e3a $y < x \\le n$\uff0c\u6240\u4ee5\u4e09\u79cd\u60c5\u51b5\u7684\u82b1\u8d39\u6392\u5e8f\u4e3a $x-y<x<n\\times n$\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u7b80\u5355\u5730\u901a\u8fc7\u300c\u628a\u67d0\u5355\u8bcd\u7684\u6240\u6709\u524d\u7f00\u5355\u8bcd\u653e\u5230\u5b83\u4e4b\u524d\u300d\u6d88\u9664\u5f00\u9500\u4e3a $n\\times n$ \u7684\u60c5\u51b5\u3002\u6b64\u65f6\u5f00\u9500\u6700\u52a3\u60c5\u51b5\u4e0b\u4e3a $\\sum\\limits_{i=1}^ni < n\\times n$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u95ee\u9898\u5728\u4e8e\u600e\u6837\u5728\u6ee1\u8db3\u300c\u628a\u67d0\u5355\u8bcd\u7684\u6240\u6709\u524d\u7f00\u5355\u8bcd\u653e\u5230\u5b83\u4e4b\u524d\u300d\u7684\u6761\u4ef6\u4e0b\uff0c\u6700\u5c0f\u5316\u5f00\u9500\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u53bb\u9664\u7b2c\u4e00\u79cd\u60c5\u51b5\u540e\uff0c\u5269\u4e0b\u7684 $x$ \u548c $x-y$ \u90fd\u5305\u542b $x$ \u9879\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6700\u5c0f\u5316 $\\sum -y$ \u7684\u503c\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u5316 $\\sum y$ \u7684\u503c\u3002\u800c $\\sum x$ \u4e3a\u5b9a\u503c $\\sum\\limits_{i=1}^ni$\u3002\n\n**\u5173\u4e8e\u5904\u7406\u65b9\u5f0f\uff1a\u4e0d\u96be\u53d1\u73b0\u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u957f\u524d\u7f00\u5355\u8bcd\u6700\u591a\u53ea\u6709\u4e00\u4e2a\uff0c\u4f46\u4ee5\u8be5\u5355\u8bcd\u4e3a\u6700\u957f\u524d\u7f00\u5355\u8bcd\u7684\u5355\u8bcd\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u8054\u60f3\u5230\u6811\u3002**\n\n**\u6211\u4eec\u5c06\u6bcf\u4e2a\u5355\u8bcd\u7684\u6700\u957f\u524d\u7f00\u548c\u8be5\u5355\u8bcd\u8fde\u8fb9\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u68ee\u6797\u3002**\n\n\u4e0d\u59a8\u5148\u8003\u8651\u95ee\u9898\u7684\u7b80\u5316\uff0c\u5047\u8bbe\u6709\u4e24\u6761\u94fe\uff08\u5373\uff0c\u4e0d\u4f1a\u540c\u65f6\u5b58\u5728\u591a\u4e2a\u5355\u8bcd\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u6700\u957f\u524d\u7f00\u5355\u8bcd\u76f8\u540c\uff09\uff0c\u5e94\u8be5\u5982\u4f55\u5b89\u6392\u5176\u987a\u5e8f\u3002\n\n\u5982\u56fe\u6240\u793a\uff0c\u8003\u8651\u300c\u540c\u4e00\u6761\u94fe\u5747\u5300\u5206\u6563\u5230\u5e8f\u5217\u4e2d\u300d\u548c\u300c\u540c\u4e00\u6761\u94fe\u96c6\u4e2d\u5728\u4e00\u8d77\u300d\u4e24\u79cd\u6709\u89c4\u5f8b\u7684\u5b89\u6392\u65b9\u5f0f\uff0c\u5f97\u5230\uff1a\n\n![](https://pic.imgdb.cn/item/63bd1692be43e0d30e65e7de.jpg)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u660e\u663e\u66f4\u4f18\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6269\u5c55\u731c\u60f3\uff1a\u5bf9\u4e8e\u67d0\u4e00\u5355\u8bcd\uff0c\u4ee5\u5b83\u4e3a\u524d\u7f00\u7684\u6240\u6709\u5355\u8bcd\u5fc5\u987b\u7d27\u968f\u5176\u540e\u3002\u8be5\u7ed3\u8bba\u662f\u53ef\u9012\u5f52\u7684\u3002\n\n\u7ee7\u7eed\u5904\u7406\u7ec6\u8282\u90e8\u5206\u3002\u8003\u8651\u4e24\u6761\u94fe\u957f\u5ea6\u4e0d\u540c\uff0c\u5e94\u5982\u4f55\u6392\u5217\u5b83\u4eec\u7684\u4f4d\u7f6e\uff1f\n\n\u4e0b\u56fe\u5c55\u793a\u4e86\u300c\u524d\u77ed\u540e\u957f\u300d\u548c\u300c\u524d\u957f\u540e\u77ed\u300d\u4e24\u79cd\u65b9\u6848\uff1a\n\n![](https://pic.imgdb.cn/item/63bd18e1be43e0d30e6a566c.jpg)\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u524d\u77ed\u540e\u957f\u7684\u65b9\u6848\u66f4\u4f18\u3002\n\n\u6269\u5c55\u5f97\u5230\u731c\u60f3\uff0c\u540c\u4e00\u5355\u8bcd\u7684\u6240\u6709\u5b50\u6811\u4e2d\uff0c\u5927\u5c0f\u66f4\u5c0f\u7684\u5e94\u5728\u66f4\u524d\u9762\u3002\u8be5\u7ed3\u8bba\u662f\u53ef\u9012\u5f52\u7684\u3002\n\n***\n\n\u63a5\u4e0b\u6765\u5bf9\u731c\u60f3\u8fdb\u884c\u8bc1\u660e\u3002\n\n\u5047\u8bbe\u73b0\u5728\u5df2\u6709\u4e00\u6761\u94fe\u3002\u6211\u4eec\u53ea\u6709\u628a\u6574\u6761\u94fe\u8fde\u5728\u4e00\u8d77\uff0c\u77ed\u5355\u8bcd\u653e\u5230\u957f\u5355\u8bcd\u524d\u9762\u8fd9\u4e00\u79cd\u65b9\u6cd5\u3002\n\n\u7136\u540e\u65b0\u6765\u4e86\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u8fd9\u6761\u94fe\u7684\u8282\u70b9\uff0c\u660e\u663e\uff0c\u56e0\u4e3a\u8282\u70b9\u4e0d\u7ba1\u653e\u5230\u54ea\u91cc\uff0c\u5176 $y$ \u503c\u4e0d\u53d8\uff0c\u4f46\u4f1a\u6539\u53d8\u5df2\u6709\u94fe\u7684 $y$ \u503c\uff0c\u6240\u4ee5\u653e\u5230\u6700\u524d\u9762\u6700\u4f18\u3002\n\n\u53c8\u6765\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u548c\u521a\u624d\u65b0\u589e\u7684\u8282\u70b9\u5c5e\u4e8e\u540c\u4e00\u6761\u94fe\uff0c\u4e00\u6837\uff0c\u4e0d\u7ba1\u8fd9\u4e2a\u8282\u70b9\u4f55\u53bb\u4f55\u4ece\uff0c\u5176 $y$ \u4e0d\u53d8\uff0c\u4f46\u653e\u5728\u8d8a\u524d\u9762\uff0c\u540e\u9762\u7684\u8282\u70b9\u7684 $y$ \u503c\u589e\u52a0\u5f97\u8d8a\u591a\u3002\n\n\u4ee5\u6b64\u7c7b\u63a8\u53ef\u5f97\u5230\u7ed3\u8bba\uff0c\u540c\u4e00\u6761\u94fe\u653e\u5230\u4e00\u8d77\u3002\u77ed\u94fe\u653e\u5230\u957f\u94fe\u524d\u9762\u4e5f\u662f\u6bd4\u8f83\u597d\u60f3\u7684\u3002\u5047\u8bbe\u6709\u4e24\u6761\u94fe\uff0c\u77ed\u94fe\u957f\u5ea6\u4e3a $a$\uff0c\u957f\u94fe\u957f\u5ea6\u4e3a $b$\uff0c\u653e\u7f6e\u8d77\u70b9\u4e3a $l$\uff0c\u5219\u524d\u77ed\u540e\u957f\u548c\u94b1\u957f\u540e\u77ed\u7684 y \u4e4b\u548c\u5206\u522b\u4e3a $\\dfrac{(l + l + a - 2) \\times (a - 1) + (l + a + l + a + b - 2) \\times (b - 1)} 2$ \u548c $\\dfrac{(l + l + b - 2) \\times (b - 1) + (l + b + l + b + a - 2) \\times (b - 1)} 2$\uff08\u8fd0\u7528\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f\uff09\uff0c\u89e3\u4e0d\u7b49\u5f0f\u53ef\u5f97\u524d\u77ed\u540e\u957f\u4e00\u5b9a\u66f4\u4f18\u3002\n\n\u63a5\u4e0b\u6765\u662f\u4ece\u94fe\u6269\u5c55\u5230\u6811\u3002\u90a3\u4e48\u6211\u4eec\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\u6811\u94fe\u5256\u5206\u3002\n\n\u6211\u4eec\u5316\u7528\u6811\u5256\u601d\u60f3\uff0c\u4ee5\u6700\u8f7b\u8fb9\u4e3a\u5256\u5206\u6761\u4ef6\uff0c\u5c06\u6811\u5212\u5206\u4e3a\u6709\u987a\u5e8f\u7684\u94fe\uff0c\u6309\u7167\u4e0a\u8ff0\u65b9\u5f0f\u6392\u5217\u5176\u987a\u5e8f\u5373\u53ef\u3002 \n\n\u6b64\u65f6\u6211\u4eec\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u5355\u8bcd\u7684\u76f4\u7cfb\u7236\u4eb2\uff08\u5373\u5176\u6700\u957f\u524d\u7f00\u5355\u8bcd\uff09\uff0c\u5728\u552f\u4e00\u5e8f\u5217\u4e2d\u6a21\u62df\u8ba1\u5206\u64cd\u4f5c\uff0c\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002\n\n***\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u53ef\u5c06\u6240\u6709\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\u4e0e\u4e00\u4e2a\u865a\u70b9\u76f8\u8fde\uff0c\u5c06\u68ee\u6797\u8f6c\u5316\u4e3a\u6811\u3002\n\n\u6ce8\u610f `long long`\u3002\n\n```cpp\nnamespace XSC062 {\nusing namespace fastIO;\nusing str = std::string;\nconst int maxn = 1e6 + 5;\nconst int maxm = 1e6 + 5;\nstr s[maxn];\nint T[maxm][26];\nint kaz[maxn], siz[maxn]; // kaz \u5373\u4e3a kazuha(?) \u8868\u793a\u5355\u8bcd\u5728\u6700\u7ec8\u5e8f\u5217\u4e2d\u6240\u5904\u7684\u4f4d\u7f6e\nstd::vector<int> g[maxn];\nint n, l, res, cnt = 1, ti;\nint tot[maxm], fa[maxn], deg[maxn];\ninline void Insert(int k) { \n\tint f = 1, len = s[k].length();\n\tfor(int i = 0; i < len; ++i) {\n\t\tif (!T[f][s[k][i] - 'a']) \n\t\t\tT[f][s[k][i] - 'a'] = ++cnt;\n\t\tf = T[f][s[k][i]-'a'];\n\t}\n\ttot[f] = k;\n\treturn;\n}\ninline void Search(int k) {\n\tint f = 1;\n\tint len = s[k].length();\n\tfor (int i = 0; i < len; ++i) {\n\t\tf = T[f][s[k][i] - 'a'];\n\t\tif (tot[f]) {\n\t\t\tif (tot[f] != k)\n\t\t\t\tfa[k] = tot[f]; // \u8bb0\u5f55\u5f53\u524d\u6700\u957f\u524d\u7f00\n\t\t}\n\t}\n\treturn;\n}\ninline void add(int x, int y) {\n\t++deg[y];\n\tg[x].push_back(y);\n\treturn;\n}\nvoid DFS1(int x) { // \u63d0\u524d\u8ba1\u7b97\u6bcf\u4e2a\u5b50\u6811\u7684 size\n\tsiz[x] = 1;\n\tfor (auto i : g[x]) {\n\t\tDFS1(i);\n\t\tsiz[x] += siz[i];\n\t}\n\treturn;\n}\nvoid DFS2(int x) {\n\tkaz[x] = ti++;  // \u65f6\u95f4\u6233\u5373\u4e3a\u5355\u8bcd\u4f4d\u7f6e\n\tstd::sort(g[x].begin(), g[x].end(),\n\t\t[&](int x, int y) { return siz[x] < siz[y]; }); // \u6309\u5b50\u6811 size \u6392\u5e8f\n\tfor (auto i : g[x])\n\t\tDFS2(i);\n\treturn;\n}\nint main() {\n\tscanf(\"%lld\", &n);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tstd::cin >> s[i];\n\t\tstd::reverse(s[i].begin(), s[i].end());  // \u540e\u7f00\u8f6c\u524d\u7f00\n\t\tInsert(i);\n\t\tres += i;\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tSearch(i);\n\t\tif (fa[i])\n\t\t\tadd(fa[i], i); // \u5efa\u56fe\n\t}\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (!deg[i]) // \u5efa\u865a\u70b9\u65b9\u4fbf\u64cd\u4f5c\n\t\t\tadd(n + 1, i), fa[i] = n + 1;\n\t}\n\tDFS1(n + 1), DFS2(n + 1);\n\tfor (int i = 1; i <= n; ++i)\n\t\tres -= kaz[fa[i]]; // \u5904\u7406 y \u503c\n\tprint(res);\n\treturn 0;\n}\n} // namespace XSC062\n```",
        "postTime": 1673337325,
        "uid": 245052,
        "name": "ollll62",
        "ccfLevel": 7,
        "title": "\u5f53\u4f60\u597d\u4e0d\u5bb9\u6613\u6252\u62c9\u4e0b\u6765\u53d1\u73b0\u662f\u4e2a\u738b\u516b"
    },
    {
        "content": "\u6211\u4eec\u5c06\u6240\u6709\u5355\u8bcd\u53cd\u8f6c\uff0c\u4e4b\u540e\u5efa\u4e00\u4e2atrie\u6811\uff0c\n\n\u5229\u7528trie\u6811\u5f97\u5230\u4e00\u4e2a\u65b0\u6811(\u6240\u6709\u70b9\u7684\u7238\u7238\u5bf9\u5e94\u7684\u5355\u8bcd\u90fd\u662f\u5176\u524d\u7f00)\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5373 \u6c42\u8be5\u6811\u6240\u6709\u70b9\u7684\u4e00\u4e2a\u6392\u5217\u4f7f\u5f97\u6240\u6709\u7236\u5b50\u5728\u6392\u5217\u4e2d\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f\u3002\n\n\u663e\u7136\uff0c\u4efb\u610f\u5b50\u6811\u7684\u70b9\u5728\u6392\u5217\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u800c\u4e14\u4e00\u4e2a\u70b9\u8bbf\u95ee\u513f\u5b50\u7684\u987a\u5e8f\u662f\u5176\u5b50\u6811\u4e2a\u6570\u4ece\u5c0f\u5230\u5927\u3002\n\n\u56e0\u4e3a\u7a7a\u95f4\u4e0d\u591f\uff0c\u6211\u628a\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u7684\u5b50\u6811\u4e2a\u6570\u653e\u5230\u4e00\u4e2a\u516c\u7528\u6570\u7ec4\u91cc\u6765\u6392\u5e8f\uff0c\u8ba1\u7b97\uff1b\n\n\u800c\u5b9e\u9645\u641c\u7d22\u987a\u5e8f\u5e76\u4e0d\u662f\u4ece\u5c0f\u5230\u5927\u7684\u3002\n\n```pascal\nvar\n n,o,i,now,top,len:longint;\n l:array[0..510000,'a'..'z'] of longint;\n s,f,t,hou,son:array[0..510000] of longint;\n b:array[0..510000] of boolean;\n a:ansistring;\n j:char;\n ans:qword;\n\nprocedure swap(var x,y:longint);\nvar t:longint;\nbegin\n t:=x;x:=y;y:=t;\nend;\n\nprocedure sort(l,r: longint);\n      var\n         i,j,x: longint;\n      begin\n         i:=l;\n         j:=r;\n         x:=son[(l+r) >>1];\n         repeat\n           while son[i]<x do\n            inc(i);\n           while x<son[j] do\n            dec(j);\n           if not(i>j) then\n             begin\n                swap(son[i],son[j]);\n                inc(i);\n                j:=j-1;\n             end;\n         until i>j;\n         if l<j then\n           sort(l,j);\n         if i<r then\n           sort(i,r);\n      end;\n\n\nprocedure dfs(x:longint);\nvar i:char;\nbegin\n if b[x] then\n begin\n  hou[x]:=t[f[x]];t[f[x]]:=x;\n     for i:='a' to 'z' do\n     if l[x][i]>0 then\n     begin\n       f[l[x][i]]:=x;\n       dfs(l[x][i]);\n     end;\n end\n else\n  for i:='a' to 'z' do\n     if l[x][i]>0 then\n     begin\n       f[l[x][i]]:=f[x];\n       dfs(l[x][i]);\n     end;\nend;\n\nprocedure try(x:longint);\nvar num,i:longint;\nbegin\n  num:=0;i:=t[x];\n  while i<>0 do\n  begin\n   inc(num);son[num]:=s[i];\n   i:=hou[i];\n  end;\n  sort(1,num);\n\n  s[x]:=1;\n  for i:=1 to num do\n  begin\n   inc(ans, s[x] );\n   inc(s[x],son[i]);\n  end;\n\n  i:=t[x];\n  while i<>0 do\n  begin\n   try(i);\n   i:=hou[i];\n  end;\nend;\n\nbegin\n assign(input,'1.in');reset(input);assign(output,'1.out');rewrite(output);\n readln(n);top:=1;\n for o:=1 to n do\n begin\n  now:=1;\n  readln(a);len:=length(a);\n  for i:=len downto 1 do\n  begin\n   if l[now][a[i]]=0 then\n   begin\n    inc(top);l[now][a[i]]:=top;\n   end;\n   now:=l[now][a[i]];inc(s[now])\n  end;\n  b[now]:=true;\n end;\n\n f[1]:=1;\n dfs(1);\n try(1);\n\n writeln(ans);close(output);\nend.\n\n```",
        "postTime": 1476534061,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "### \u9898\u610f\u7b80\u5316\n\n\u6211\u4eec\u8981\u586b\u5165 `n` \u4e2a\u5355\u8bcd\u3002\n\n1. \u5982\u679c\u6709\u5355\u8bcd\u4f5c\u4e3a\u5f53\u524d\u5355\u8bcd\u7684\u540e\u7f00\u4f46\u5e76\u672a\u586b\u5165\uff0c\u5c06\u82b1\u8d39 `n*n` \u7684\u4ee3\u4ef7\u3002\n2. \u5982\u679c\u5355\u8bcd\u4e2d\u6ca1\u6709\u5f53\u524d\u5355\u8bcd\u7684\u540e\u7f00\uff0c\u4ee3\u4ef7\u4e3a\u5f53\u524d\u586b\u5165\u5355\u8bcd\u5e8f\u53f7 `x` \u3002\n3. \u5982\u679c\u6240\u6709\u4f5c\u4e3a\u8be5\u5355\u8bcd\u7684\u540e\u7f00\u7684\u5355\u8bcd\u4e4b\u524d\u90fd\u5df2\u586b\u5165\uff0c\u90a3\u4e48\u4ee3\u4ef7\u7b49\u4e8e\u5f53\u524d\u7f16\u53f7 `x` \u51cf\u53bb\u6700\u540e\u4e00\u4e2a\u4f5c\u4e3a\u5f53\u524d\u5355\u8bcd\u7684\u540e\u7f00\u7684\u5355\u8bcd\u7684\u7f16\u53f7 `y` \u3002\n\n\u6c42\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n### \u601d\u8def\u5256\u6790\n\n#### \u5927\u81f4\u6b65\u9aa4\n\n\u5bf9\u4e8e\u540e\u7f00\u5904\u7406\u662f\u4e0d\u662f\u5f88\u9ebb\u70e6\uff1f\u6211\u4eec\u8003\u8651\u628a\u5355\u8bcd\u7ffb\u8f6c\uff0c\u7528\u524d\u7f00\u5904\u7406\uff08\u6bd5\u7adf\u8fd9\u6837\u5904\u7406\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\u6b63\u786e\u6027\uff0c\u53ea\u662f\u66f4\u597d\u5904\u7406\u4e86\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u91cc\u7ffb\u8f6c\u6240\u6709\u5b57\u7b26\u4e32\uff0c\u540e\u9762\u8bf4\u7684\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u662f\u7ffb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u3002\n\n\u8bf4\u5230\u5355\u8bcd\u7684\u524d\u7f00\uff0c\u9664\u4e86 `KMP` \u4ee5\u5916\uff0c\u5c31\u80fd\u60f3\u5230\u5b57\u5178\u6811\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7528\u5b57\u5178\u6811\u6765\u5904\u7406\u3002\n\n\u6211\u4eec\u7684\u6839\u8282\u70b9\u4ee3\u8868\u7684\u5c31\u662f\u7a7a\uff08 `0` \u6216 `1` \uff0c\u6309\u4e2a\u4eba\u5199\u5b57\u5178\u6811\u7684\u4e60\u60ef\u6765\uff09\u3002\u4e0b\u9762\u8fde\u63a5\u7684\u662f\u6240\u6709\u957f\u5ea6\u4e3a `1` \u7684\u524d\u7f00\uff0c\u518d\u4e0b\u9762\u5c31\u662f\u957f\u5ea6\u4e3a `2` \u7684\u524d\u7f00\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\u3002\u6240\u4ee5\u6211\u4eec\u5148\u5efa\u7acb\u4e00\u9897\u5b57\u5178\u6811\u3002\n\n\u5efa\u7acb\u5b8c\u5b57\u5178\u6811\u5462\uff0c\u6211\u4eec\u8981\u627e\u5230\u4e00\u4e2a\u653e\u5165\u5355\u8bcd\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u7528\u4e00\u9897\u6811\u6765\u5904\u7406\uff0c\u800c\u904d\u5386\u987a\u5e8f\u7b97\u7b54\u6848\u4e2d\u5462\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u5355\u8bcd\u7684 **\u672b\u5c3e\u8282\u70b9** \uff0c\u90a3\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u53ea\u6709\u5355\u8bcd\u672b\u5c3e\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u8fd8\u53ef\u4ee5\u4fdd\u8bc1\u7236\u8282\u70b9\u90fd\u662f\u5b50\u5b59\u8282\u70b9\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u9700\u8981\u628a\u6240\u6709\u7684\u975e\u672b\u5c3e\u8282\u70b9\u5220\u9664\u3002\u5728\u8fd9\u6211\u4eec\u5c31\u8981\u628a\u6240\u6709\u975e\u672b\u5c3e\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u662f\u672b\u5c3e\u7ed3\u70b9\u7684\u7956\u5b97\u6307\u5411\u5b83\u90a3\u4e9b\u672b\u5c3e\u7ed3\u70b9\u7684\u5b69\u5b50\u4eec\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n```cpp\n                                                   (1)\n                                                   / \\\n                                                  2   5\n                                                 / \\   \\\n                                               (3)  4  (6)\n                                                     \\\n                                                     (7)\n\u5047\u8bbe\u8fd9\u68f5\u6811\u4e2d\uff0c\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u662f\u672b\u5c3e\u7ed3\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5220\u7684\u65f6\u5019\u7684\u6b65\u9aa4\u5c31\u662f\uff08\u5047\u8bbe\u6211\u4eec\u7528fa[i]\u6765\u8868\u793a\u5220\u5b8c\u540ei\u7684\u7236\u4eb2\uff0c\u539f\u6765fa[i]\u6307\u5411\u5b57\u5178\u6811\u4e2di\u7684\u7236\u4eb2\uff09\uff1a\nfa[3]=1;\nfa[7]=1;\nfa[6]=1;\n\u5220\u5b8c\u540e\u53d8\u6210\uff1a\n    \t\t\t\t\t\t\t\t\t\t\t\t1\n    \t\t\t\t\t\t\t\t\t\t\t  / | \\\n    \t\t\t\t\t\t\t\t\t\t\t 3  7  6\n    \t\t\t\t\t\t\t\t\t\n```\n\n\u4f46\u5bf9\u4e8e\u8fd9\u6837\u7684\u64cd\u4f5c\u6211\u4eec\u8be5\u600e\u4e48\u5904\u7406\u5462\uff1f\u6211\u4eec\u80fd\u53d1\u73b0\uff0c\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff01\uff01\uff01\n\n\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u662f\u5355\u8bcd\u7684\u672b\u5c3e\u7684\u8282\u70b9\u7684\u7236\u4eb2\u6307\u5411 `find(fa[i])` \uff0c\u5efa\u7acb\u6240\u6709\u90fd\u662f\u672b\u5c3e\u7ed3\u70b9\u7684\u4e00\u68f5\u6811\u3002\u7136\u540e\u6309\u7167 `dfs` \u7684\u987a\u5e8f\u7b97\u4ee3\u4ef7\u548c\u3002\n\n\u6240\u4ee5\u5927\u4f53\u7684\u601d\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a\n\n1. \u5bf9\u4e8e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u5efa\u7acb\u4e00\u9897\u5b57\u5178\u6811\n2. \u53bb\u6389\u6240\u6709\u975e\u5355\u8bcd\u7684\u672b\u5c3e\u7684\u8282\u70b9\uff0c\u5efa\u7acb\u65b0\u7684\u6811\n3. \u6309\u5b50\u6811\u7684\u5927\u5c0f\u628a\u6240\u6709\u5b50\u6811\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n4. \u6309\u7167 `dfs` \u5e8f\u8ba1\u7b97\u4ee3\u4ef7\n\n#### \u7b97\u6cd5\u8bc1\u660e\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\uff0c\u6211\u4eec\u6309\u7167 `dfs` \u5e8f\u7684\u8bdd\uff0c\u987a\u5e8f\u9760\u524d\u9762\u7684\u90a3\u9897\u5b50\u6811\u5148\u88ab\u7edf\u8ba1\u3002\u6211\u4eec\u5047\u8bbe\u90a3\u9897\u5b50\u6811\u4e2d\u6709\u4e00\u4e2a\u975e\u5b50\u6811\u6839\u7684\u8282\u70b9 `x` \uff0c\u5b83\u548c\u5f53\u524d\u5b50\u6811\u540e\u9762\u4e00\u9897\u5b50\u6811\u7684\u6839 `y` \u5e94\u8be5\u90a3\u4e2a\u5148\u7edf\u8ba1\u5462\uff1f\u7b54\u6848\u663e\u7136\u662f `x` \u5148\u641c\u597d\u3002\u56e0\u4e3a `y` \u5728\u524d\u9762\uff0c\u90a3\u4e48\u6309\u7167\u8fd9\u4e2a\u987a\u5e8f `y` \u4e0e\u5176\u5b69\u5b50\u7684\u8ddd\u79bb\u6bcf\u4e2a\u5b69\u5b50\u90fd\u4f1a\u589e\u52a0 `1` \uff0c\u800c\u6240\u6709\u5b50\u6811\u7684\u5b69\u5b50\u4e0e\u5176\u7236\u4eb2\u7684\u8ddd\u79bb\u90fd\u4f1a\u589e\u52a0\uff0c\u90a3\u4e48\u603b\u4ee3\u4ef7\u5c06\u4f1a\u589e\u52a0\u5f88\u591a\u3002\u4f46\u662f\u5982\u679c `x` \u5728 `y` \u524d\u9762\uff0c\u589e\u52a0\u7684\u65e0\u975e\u5c31\u662f\u6839\u8282\u70b9\u7684\u4ee3\u4ef7\u662f\u524d\u9762\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5176\u5b83\u8282\u70b9\u5c31\u662f\u91cc\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u800c\u4e14\u6211\u4eec\u6309\u7167\u5b50\u6811\u7684\u5927\u5c0f\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u6700\u4f18\u3002\n\n\u800c\u5b50\u6811\u4ece\u5c0f\u5230\u5927\u7684\u8bc1\u660e\u5462\uff1f\u56e0\u4e3a\u7b2c `i` \u4e2a\u6839\u8282\u70b9\u7684\u8d21\u732e\u662f\u524d\u9762\u6240\u6709\u6811\u7684 `size` \u4e4b\u548c\uff0c\u4e3a\u4e86\u662f\u603b\u548c\u6700\u5c0f\u5316\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=500010;\nchar x[N];\nint n,cnt,bo[N],tot=1,trie[N][27],fa[N],id[N],son[N],num;\nlong long ans=0;\nvector<int>g[N];\nint find(int x){\n\treturn fa[x]==x?x:fa[x]=find(fa[x]); \n}\nvoid insert(char s[],int num){//\u5b57\u5178\u6811\u7684\u5fc5\u5907\u51fd\u6570\n    int l=strlen(s),u=1;\n    for(int i=l-1;i>=0;i--){\n        int c=s[i]-'a';\n        if(!trie[u][c])\n\t\t\ttrie[u][c]=++tot;\n        u=trie[u][c];\n    }\n    bo[u]=num;\n}\nvoid make_tree(int x){//\u5efa\u7acb\u4e00\u9897\u53ea\u6709\u672b\u5c3e\u8282\u70b9\u7684\u6811\n    for(int i=0;i<26;i++){\n        int v=trie[x][i];\n        if(v){\n            if(!bo[v])\n                fa[v]=find(x);\n            else\n                g[bo[find(x)]].push_back(bo[v]);\n            make_tree(v);\n        }\n    }\n}\nint cmp(int x,int y){//\u6309\u5b50\u6811\u5927\u5c0f\u6392\u5e8f\n    return son[x]<son[y];\n}\nvoid sonsum(int x){//\u7b97\u6bcf\u9897\u5b50\u6811\u7684\u5927\u5c0f\n    son[x]=1;\n    for(int i=0;i<g[x].size();i++){\n        int v=g[x][i];\n        sonsum(v);\n        son[x]+=son[v];\n    }\n    sort(g[x].begin(),g[x].end(),cmp);\n}\nvoid dfs(int x){//\u8ba1\u7b97\u4ee3\u4ef7\u548c\n    id[x]=num++;\n    for(int i=0;i<g[x].size();i++){\n        int v=g[x][i];\n        ans+=num-id[x];\n        dfs(v);\n    }\n}\nint main(){\n\tscanf(\"%d\",&n);\n    for(int i=1;i<=n;i++){\n        scanf(\"%s\",x);\n        insert(x,i);\n    }\n    for(int i=1;i<=tot;i++)\n\t\tfa[i]=i;\n    make_tree(1);\n\tsonsum(0);\n\tdfs(0);\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1651280182,
        "uid": 341946,
        "name": "zac2010",
        "ccfLevel": 7,
        "title": "P3294 [SCOI2016]\u80cc\u5355\u8bcd"
    },
    {
        "content": "##    P3294\u3010SCOI2016\u3011\u80cc\u5355\u8bcd\n\n\n### \u3010\u63d0\u793a\u3011\n\n\u8fd9\u9053\u9898\u5927\u6982\u662f\u544a\u8bc9\u6211\u4eec\uff0c\u8ba9\u6211\u4eec\u7528\u4e00\u5806n\u4e2a\u5355\u8bcd\u5b89\u6392\u987a\u5e8f\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e3ax\uff0c\u5f53\u524d\u5355\u8bcd\u7684\u540e\u7f00\u6ca1\u5728\u8fd9\u5806\u5355\u8bcd\u51fa\u73b0\u8fc7\uff0c\u4ee3\u4ef7\u5c31\u4e3ax\uff0c\u8fd9\u91cc\u7684\u540e\u7f00\u662f\u539f\u610f\uff0c\u4f46\u4e0d\u7b97\u81ea\u5df1\uff08\u4e0d\u7b97\u672c\u8eab\u7684\u540e\u7f00\u3010\u5982\u679c\u7528\u96c6\u5408\u6765\u8bf4\u5c31\u662f\u771f\u5b50\u96c6\u3011\uff09\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u6bd4\u5982abc\u7684\u540e\u7f00\u662fbc\u548cc\u4f46\u662f\u5b83\u7684\u540e\u7f00\u4e0d\u5305\u62ec\u5b83\u672c\u8eab\u3002\n\n\u5426\u5219\u5982\u679c\u5b83\u7684\u540e\u7f00(\u6307\u5728n\u4e2a\u5355\u8bcd\u4e2d\u7684)\u57281~x-1\u5168\u90e8\u51fa\u73b0\u4e86\uff0c\u4ee3\u4ef7\u4e3ax\u51cf\u53bb\u6700\u540e\u4e00\u4e2a\u540e\u7f00\u7684\u4f4d\u7f6ey\uff0c\u5982\u679c\u6ca1\u6709\u5168\u90e8\u51fa\u73b0\uff0c\u4ee3\u4ef7\u5c31\u4e3an^2\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u663e\u7136\u7684\u53d1\u73b0\u8fd9\u4e2a\u5403\u6ce1\u6912\u7684\u6570\u91cf\u662f\u6839\u636e\u8fd9\u4e2a\u540e\u7f00\u6765\u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5c3d\u91cf\u5c06\u6240\u6709\u7684\u80cc\u5f53\u524d\u7684\u5355\u8bcd\u5403\u7684\u6ce1\u6912\u6570\u76ee\u53d8\u5f97\u6700\u5c0f\u65f6\uff0c\u5403\u6ce1\u6912\u7684\u603b\u6570\u5c31\u4f1a\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u8ba9\u80cc\u5f53\u524d\u7684\u5355\u8bcd\u65f6\uff0c\u5403\u7684\u6ce1\u6912\u7684\u7c7b\u578b\u662fy-x\u7c7b\u578b\u7684\uff0c\u56e0\u4e3a\u53ea\u6709\u8fd9\u6837\u624d\u80fd\u6ee1\u8db3\u6700\u5c0f\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6309\u540e\u7f00\u5efa\u5b57\u5178\u6811\uff0c\u7136\u540e\u76f4\u63a5\u6309\u5b50\u6811\u5927\u5c0f\u8d2a\u5fc3\u4f7f\u5176\u88ab\u6bcf\u4e00\u4e2a\u5355\u8bcd\u5403\u7684\u6ce1\u6912\u6570\u6700\u5c11\uff0c\u7136\u540e\u76f4\u63a5\u4e00\u4e2a\u8d2a\u5fc3+\u5b57\u5178\u6811\u5c31\u53ef\u4ee5\u8fc7\u4e86\u8fd9\u9053\u9898\u3002\n\n\u4f46\u662f\u6211\u4e00\u5f00\u59cb\u5077\u61d2\u5c31\u76f4\u63a5\u5728\u5b57\u5178\u6811\u4e0a\u8d2a\u5fc3\u8d70\u5b50\u6811\uff0c\u8fd9\u6837\u662f\u4e0d\u884c\u7684\uff0c\u5403\u6ce1\u6912\u7684\u6570\u91cf\u7684\u5927\u5c0f\u662f\u9519\u8bef\u7684\uff0c\u6211\u4eec\u5f97\u628a\u5173\u952e\u70b9\u6811\u7ed9\u5efa\u51fa\u6765\u7136\u540e\u518d\u505a\uff0c\u53ea\u6709\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u5c06\u8fd9\u9898A\u6389\u3002\n\n### \u9898\u89e3\n\u76f4\u63a5\u6765\u8bb2\u6b63\u786e\u7684\u89e3\u6cd5\uff1a\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u8981\u4fdd\u8bc1\u653e\u6bcf\u4e2a\u70b9\u524d\u5b83\u7684\u540e\u7f00\u4e00\u5b9a\u5df2\u7ecf\u88ab\u653e\u4e86\uff08\u53ef\u4ee5\u6839\u636e\u4e4b\u524d\u8bf4\u7684\u8981\u4f7f\u6bcf\u4e2a\u5355\u8bcd\u7684\u5403\u7684\u6ce1\u6912\u6570\u6700\u5c11\u3010\u8d2a\u5fc3\u7684\u601d\u8def\u3011\u6765\u7406\u89e3\u8fd9\u4e2a\u4e1c\u897f\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u628a\u6240\u6709\u7684\u4e32\u5012\u7740\u63d2\u5165\u6211\u4eec\u5efa\u7684\u5b57\u5178\u6811\u5f53\u4e2d\uff0c\u7136\u540e\u7b54\u6848\u4e00\u5b9a\u662f\u7c7b\u4f3c\u4e8e\u8fd9\u4e2a\u6837\u5b50\u7684:\u4e00\u4e2a\u4e32->\u82e5\u5e72\u4ee5\u8fd9\u4e2a\u4e32\u4e3a\u540e\u7f00\u7684\u4e32\u3002\n\n\u90a3\u4e48\u6309\u7167\u600e\u6837\u7684\u63d2\u5165\u987a\u5e8f\u63d2\u5165\u4f1a\u66f4\u4f18\u5462?\n\u53ef\u4ee5\u53d1\u73b0\u5148\u63d2\u5165\u513f\u5b50\u8f83\u5c11\u7684\u4e32\u7b54\u6848\u4f1a\u66f4\u4f18\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u628a\u8fd9\u68f5\u5b57\u5178\u6811\u91cd\u6784\u4e00\u4e0b,\u53bb\u6389\u6240\u6709\u7684\u65e0\u6548\u8282\u70b9,\u53ea\u7559\u4e0b\u4ee3\u8868\u67d0\u4e2a\u70b9\u7684\u7ed3\u5c3e\u7684\u8282\u70b9\n\u7136\u540e\u6bcf\u6b21\u90fd\u662f\u8d2a\u5fc3\u7684\u6309\u7167\u513f\u5b50\u4ece\u5c11\u5230\u591a\u7684\u8282\u70b9\u7684\u987a\u5e8fDfs\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u884c\u4e86\u3002\n\n```\n\n#include <bits/stdc++.h>//\u4e07\u80fd\u5934\u6587\u4ef6\n#define ll long long//\u5b8f\u5b9a\u4e49long long\nusing namespace std;//\u8fd0\u7528\u547d\u540d\u7a7a\u95f4std\nconst int N=6e5+10;//\u6839\u636e\u6570\u636e\u8303\u56f4\u7ed9\u51fan\u7684\u6700\u5927\u503c\nvector <int> Edge[N];//\u5b9a\u4e49\u4e00\u4e2a\u53ef\u53d8\u7684\u6570\u7ec4\nchar s[N];\nint ch[N][26],endro[N],tot;\nint n,clock=-1,siz[N];\nll ans;\nvoid ins()//\u521d\u59cb\u5316\uff0c\u5c06\u5b57\u6bcd\u8f6c\u6362\u6210\u6570\u5b57\u5b58\u50a8\n{\n    scanf(\"%s\",s+1);//\u4e0b\u6807\u4ece\u4e00\u5f00\u59cb\n    int now=0,len=strlen(s+1);\n    for(int i=len;i;i--)\n    {\n        int c=s[i]-'a';\n        if(!ch[now][c]) ch[now][c]=++tot;\n        now=ch[now][c];\n    }\n    endro[now]=1;\n}\nvoid dfs0(int now,int anc)\n{\n    if(endro[now]) Edge[anc].push_back(now),anc=now;\n    for(int i=0;i<26;i++)\n        if(ch[now][i])\n            dfs0(ch[now][i],anc);\n}\nvoid dfs(int now)//\u6309\u7167\u513f\u5b50\u4ece\u5c11\u5230\u591a\u7684\u8282\u70b9\u7684\u987a\u5e8f\u7684\u8d2a\u5fc3\u7684Dfs\n{\n    siz[now]=1;\n    for(int i=0;i<Edge[now].size();i++)\n        dfs(Edge[now][i]),siz[now]+=siz[Edge[now][i]];\n}\nbool cmp(int x,int y){return siz[x]<siz[y];}\nvoid dfs(int now,int las)\n{\n    int tim=++clock;\n    ans=ans+tim-las;\n    std::sort(Edge[now].begin(),Edge[now].end(),cmp);\n    for(int i=0;i<Edge[now].size();i++)\n        dfs(Edge[now][i],tim);\n}\nint main()//\u4e3b\u51fd\u6570\n{\n    scanf(\"%d\",&n);//n\u4e2a\u5355\u8bcd\n    for(int i=1;i<=n;i++) ins();\n    dfs0(0,0);\n    dfs(0);\n    dfs(0,0);\n    printf(\"%lld\\n\",ans);//\u8f93\u51fa\u5403\u6ce1\u6912\u7684\u603b\u6570\n    return 0;//\u7ed3\u675f\u7a0b\u5e8f\n}\n```\n\n",
        "postTime": 1591688572,
        "uid": 118877,
        "name": "\u54f2\u5b66\u5bb6",
        "ccfLevel": 0,
        "title": "P3294 \u80cc\u5355\u8bcd"
    },
    {
        "content": "- ### \u7b80\u6d01\u9898\u610f\n`(\u5927\u4f6c\u8bf7\u65e0\u89c6\u6b64\u90e8\u5206)`  \n  \n\u5f53\u7136\u662f\n~~[P3294](https://www.luogu.org/problemnew/show/P3294)~~  \u5c31\u602a~  \n\u5b9e\u9645\u4e0a\u628a\u9898\u9762~~\u5316\u7b80~~\u7406\u89e3\u540e,\u5c31\u662f\u8fd9\u6837:  \n```\n\u5f53\u4f60\u586b\u5165\u7b2cx\u4e2a\u5355\u8bcd\u65f6:\n1. \u5982\u679c\u6709\u7ed9\u51fa\u7684\u5355\u8bcd\u662f\u5b83\u7684\u540e\u7f00\u4e14\u8fd8\u6ca1\u586b\u5165,\u82b1\u8d39n\u00d7n;\n2. \u5982\u679c\u5b83\u6ca1\u6709\u540e\u7f00(\u5355\u5b57\u6bcd),\u82b1\u8d39x;\n3. \u5982\u679c\u5b83\u7684\u6240\u6709\u540e\u7f00\u90fd\u5df2\u586b\u5165,\u8bbe\u5176\u6700\u540e\u4e00\u4e2a\u88ab\u586b\u5165\u7684\u540e\u7f00\u4f4d\u7f6ey,\u82b1\u8d39x-y\u3002\n```\n\u6ca1\u9519,\u518d\u770b\u770b\u539f\u9898\u9762,\u5c31\u662f\u8fd9\u4e48\u4e2a\u610f\u601d\u3002  \n\u8ba9\u6211\u4eec\u518d\u770b\u770b,\u6ca1\u6709\u540e\u7f00\u7684\u8bdd,\u90a3\u4e48\u5b83\u5728\u7b2c3\u79cd\u60c5\u51b5\u4e0by\u4e3a0,\u4e5f\u5c31\u662f\u8bf4,\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u6389,\u4e5f\u5c31\u662f\u8bf4\u76f8\u5f53\u4e8e\u51fa\u9898\u4eba\u641e\u51fa\u4e86\u7b2c\u4e8c\u4e2a\u6ca1\u7528\u7684\u72b6\u6001\u8fd8\u8fdb\u884c\u4e86\u52a0\u5de5\u4f7f\u5b83\u53d8\u5f97\u8c8c\u4f3c\u5f88\u590d\u6742\u6765\u8ff7\u60d1\u6211,\u771f\u7684\u662f\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u8bdd\u8bf4\u51fa\u9898\u9762\u7684\u76ee\u7684\u662f\u4ec0\u4e48(?)\u2014\u2014\u589e\u52a0\u7406\u89e3\u9898\u76ee\u7684\u96be\u5ea6\u3002~~(\u96fe~~  \n\u597d\u5427\u6211\u8fd8\u662f\u592a~\u3000\u4e86\u3002\n\n- ### \u7b97\u6cd5\u63cf\u8ff0\n\u7b2c\u4e00\u79cd\u72b6\u51b5\u663e\u7136\u4e0d\u5212\u7b97,\u800c\u7b2c\u4e8c\u79cd\u4e5f\u8bf4\u4e86\u5728\u7a0b\u5e8f\u4e2d\u76f8\u5f53\u4e8e\u7b2c\u4e09\u79cd,\u6240\u4ee5\u6211\u4eec\u53ea\u5269\u4e0b\u7b2c\u4e09\u79cd\u89c4\u5219,\u4e5f\u5c31\u662f\u5c3d\u91cf\u5148\u628a\u540e\u7f00\u586b\u8fdb\u53bb\u3002  \n\u90a3\u4e48\u65e2\u7136\u662f\u540e\u7f00,\u4e5f\u5c31\u662f\u5c06\u5355\u8bcd\u53cd\u8fc7\u6765\u5efa\u4e00\u9897\u5b57\u5178\u6811(\u5e38\u89c4\u64cd\u4f5c),\u63a5\u7740\u627e\u7b54\u6848\u65f6\u6811\u4e0a\u6709\u5f88\u591a\u4e0d\u80fd\u6784\u6210\u5355\u8bcd\u7684\u8282\u70b9,\u4f1a\u975e\u5e38\u9ebb\u70e6,\u4e8e\u662f\u6211\u4eec\u5efa\u4e00\u68f5\u4ee5\u5355\u8bcd\u4e3a\u8282\u70b9\u7684\u6811,\u53bb\u9664\u4e86\u8bb8\u591a\u4e0d\u5fc5\u8981\u7684\u865a\u70b9\u3002  \n\u7136\u540e\u5982\u679c\u4e00\u4e2a\u8bcd\u662f\u51e0\u4e2a\u8bcd\u7684\u540e\u7f00,\u800c\u8fd9\u51e0\u4e2a\u8bcd\u4e5f\u53ef\u80fd\u662f\u5176\u4ed6\u8bcd\u7684\u540e\u7f00,\u90a3\u4e48\u5e94\u8be5\u5148\u586b\u54ea\u4e00\u4e2a\u5462\uff1f  \n\u5206\u6790\u4e00\u4e0b,\u82b1\u8d39\u4e0e\u6700\u540e\u4e00\u4e2a\u586b\u5165\u7684\u540e\u7f00\u6709\u5173,\u90a3\u4e48\u8fd9\u4e2a\u540e\u7f00\u7684\u4f4d\u7f6e\u79bb\u5f53\u524d\u4f4d\u7f6e\u8d8a\u8fd1\u8d8a\u597d,\u4e5f\u5c31\u662f\u5e94\u8be5\u6709\u5c3d\u91cf\u5c11\u7684\u5355\u8bcd\u5939\u5728\u4f60\u4eec\u4e2d\u95f4,\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u9009\u884d\u751f\u51fa\u5176\u4ed6\u5355\u8bcd\u6700\u5c11\u7684\u90a3\u4e2a\u3002  \n\u518d\u6811\u4e0a\u6765\u8bf4,\u5373\u627e\u7b54\u6848\u65f6\u5b50\u6811\u6700\u5c0f\u7684\u8282\u70b9\u5e94\u4f18\u5148\u904d\u5386,dfs\u6bcf\u627e\u4e00\u4e2a\u7acb\u523b\u586b\u5165,\u56e0\u4e3a\u5efa\u7684\u65b0\u6811\u548c\u6392\u5e8f\u5df2\u7ecf\u6ee1\u8db3\u8d2a\u5fc3\u7b56\u7565,\u6240\u4ee5\u76f4\u63a5\u6a21\u62df\u7b2c\u4e09\u79cd\u60c5\u51b5\u7684\u8ba1\u7b97\u65b9\u6cd5\u6c42\u5f97\u7b54\u6848\u3002\n- ### ***CODE***\n```cpp\n\t#include<cstdio>\n\t#include<cstring>\n\t#include<algorithm>\n\t#define N 510000\n\t#define ll long long\n\tusing namespace std;\n\tint n,ip;//ip\u5728dfs\u4f1a\u7528\u5230,\u8bb0\u5f55\u5f53\u524d\u586b\u7b2c\u51e0\u4e2a\u683c\n\tint tot,ch[N][26];//trie\n\tbool v[N];//\u5230\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u662f\u5355\u8bcd\n\tchar s[N];//\u7528\u4e8e\u8f93\u5165\n\tll ans;//\u4e0d\u5f00\u540e\u679c\u81ea\u8d1f\n\tstruct node {\n\t\tint y,next;//\u65b0\u6811\u7684\u8fb9\n\t} a[100005];\n\tint len,last[100005];\n\t//int cnt,sum[N];\u65b0\u6811\u8282\u70b9\u6570,\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u5927\u5c0f\n\tbool cmp(int x,int y) {\n\t\treturn ch[x][0]<ch[y][0];   //\u7528\u4e8edfs\u627e\u5b50\u6811\u8282\u70b9\u6570\u5c11\u7684\u5b69\u5b50\n\t}\n\tinline void be(int x) { //build edge\n\t\tlen++;\n\t\ta[len].y=len;//\u5176\u5b9e\u4ece\u70b90\u5f00\u59cb\u591a\u4e00\u6761\u8fb9\u5c31\u65b0\u5efa\u4e00\u4e2a\u70b9,\u6240\u4ee5y\u5c31\u662f\u8fb9\u6570\n\t\ta[len].next=last[x];\n\t\tlast[x]=len;\n\t}\n\tinline void ins() {\n\t\tscanf(\"%s\",s);\n\t\tint now=0,len=strlen(s);//trie\u6811\u6839\u8282\u70b9\u662f0\n\t\t/**/for(int i=len-1; i>=0; i--) { //!!!\u7814\u7a76\u540e\u7f00\u8981\u5c06\u5355\u8bcd\u53cd\u8f6c!!!\n\t\t\tint c=s[i]-'a';//\u53d6\u51fa\u5b57\u6bcd\n\t\t\tif(!ch[now][c])ch[now][c]=++tot;\n\t\t\tnow=ch[now][c];//\u6a21\u7248\u4e0d\u8bf4\u4e86\n\t\t}\n\t\tv[now]=1;//\u6807\u8bb0\u5355\u8bcd\n\t}\n\tvoid bt(int x,int now) { //x\u8868\u793a\u65b0\u6811\u5efa\u5230\u7684\u7f16\u53f7\n\t\t//build (new)tree\n\t\tif(v[now])be(x),x=len;//\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u5355\u8bcd\u5c31\u8fde\u4e00\u6761\u8fb9,\u540c\u65f6\u73b0\u5728\u5c31\u53d8\u6210\u65b0\u8282\u70b9\u53bb\u8ba4\u5b69\u5b50\n\t\tfor(int c=0; c<26; c++)\n\t\t\tif(ch[now][c])bt(x,ch[now][c]);//x\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u8c01\u505a\u8fd9\u4e2a\u5b69\u5b50\u7684\u7236\u4eb2\n\t}\n\tvoid gs(int x) { //get sum\n\t\tch[x][0]=1;//\u5229\u7528\u5e9f\u5f03\u7684ch\u6570\u7ec4\u6765\u8282\u7701\u5e76\u6ca1\u6709\u591a\u5c11\u7684\u7a7a\u95f4\n\t\tfor(int k=last[x]; k; k=a[k].next)\n\t\t\tgs(a[k].y),ch[x][0]+=ch[a[k].y][0];//\u5f53\u7136\u5c31\u662f\u5b69\u5b50\u7684\u548c\n\t}\n\tint q[100005];//\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50,\u5728\u8fd9\u91cc\u9762\u6392\u5e8f\n\tvoid dfs(int x,int y) { //find ans\n\t\tip++;\n\t\tans+=ip-y;\n\t\ty=ip;//\u586b\u5230\u4e0b\u4e00\u4e2a\u683c\u5b50,\u66f4\u65b0\u7b54\u6848\u548c\u2462\u4e2d\u7684y\n\t\tint l=q[0];//l\u8bb0\u5f55\u5f53\u524d\u6700\u540e\u7528\u5230\u7684\u4f4d\u7f6e(\u4e0a\u4e00\u4e2adfs\u7684r)\n\t\tfor(int k=last[x]; k; k=a[k].next)q[++q[0]]=a[k].y;\n\t\tint r=q[0];//r\u8bb0\u5f55\u5728\u672cdfs\u65b0\u589e\u70b9\u540e\u7684\u4f4d\u7f6e\n\t\tstable_sort(q+l+1,q+r+1,cmp);//\u5b50\u6811\u5c0f\u7684\u5148\u904d\u5386\n\t\tfor(int i=l+1; i<=r; i++)dfs(q[i],y); //q[l+1~r]\u5373\u662f\u6b64\u6b21dfs\u8981\u4e0b\u53bb\u627e\u7684\u8282\u70b9\n\t\tq[0]=l;//\u7528\u5b8c\u5f97\u8fd8\u539f\n\t}\n\tint main() {\n\t\tscanf(\"%d\",&n);\n\t\twhile(n--)ins();//\u5efatrie\u6811\n\t\tbt(0,0);//\u65b0\u6811\u4ee50\u4e3a\u6839,trie\u4e2d0\u4e3a\u6839\n\t\tgs(0);//\u4ece\u6839\u8282\u70b90\u5f00\u59cb\u8ba1\u7b97\n\t\tdfs(0,1);//\u4ece\u6839\u8282\u70b90\u5f00\u59cb\u627e\uff0c\u586b\u7b2c\u4e00\u4e2a\u683c\n\t\tprintf(\"%lld\\n\",ans);//\u8981\u5f00long long...\n\t\treturn 0;\n\t}\n```\n\u8fd9\u9898\u4e09\u4e2a\u91cd\u8981\u51fd\u6570\u90fd\u662f\u9012\u5f52\u7684,~~\u4e5f\u8bb8\u53ea\u6709\u6211\u8fd9\u4e48\u83dc\u624d\u4f1a\u89c9\u5f97\u5f88\u96be\u60f3\u3002~~  \nPS:\u6211\u90fd\u4ee5`0`\u4e3a\u6839\u8282\u70b9,~~\u4ee3\u7801\u98ce\u683c\u4e11\u964b,\u4e0d\u559c\u52ff\u55b7~~\u6839\u8282\u70b9\u4e3a`1`\u4e5f\u53ef,\u53ea\u662f\u6ce8\u610f\u4e09\u4e2a\u51fd\u6570\u4f20\u8fdb\u53bb\u7684\u53c2\u6570\u9700\u8981\u659f\u914c\u4e00\u4e0b\u3002\u3002\u3002~~(\u5b9e\u9645\u4e0a\u5168\u6539`1`\u5c31\u597d\u4e86)~~  \n#### \u5982\u6709\u9519\u8bef,\u656c\u8bf7\u6307\u51fa\u3002",
        "postTime": 1543557310,
        "uid": 60654,
        "name": "key_rA9",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "\u548c\u5176\u4ed6\u9898\u89e3\u7684\u65b9\u6cd5\u597d\u50cf\u4e0d\u662f\u5f88\u4e00\u6837\u3002\n\n\u9996\u5148\u7b97\u51fa\u6bcf\u4e2a\u4e32\u7684 $hash$ \u503c\uff0c\u5b58\u5230 $map$ \u91cc\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4e32 $S$ \uff0c\u627e\u5230\u6700\u957f\u7684\u4e32 $C$ \uff0c\u4f7f\u5176\u6ee1\u8db3 $C$ \u662f $S$ \u7684\u540e\u7f00\uff0c\u7136\u540e\u8fde\u4e00\u6761\u4ece $C$ \u5230 $S$ \u7684\u8fb9\uff0c\u82e5 $C$ \u4e0d\u5b58\u5728\uff0c\u5219\u8fde\u4e00\u6761\u865a\u62df\u8282\u70b9 $0$ \u5230 $S$ \u7684\u8fb9\u3002\n\n\u8fd9\u6837\u4fbf\u6784\u6210\u4e86\u4e00\u9897\u6811\uff0c\u663e\u7136\u6392\u5e8f\u7684\u65f6\u5019\u6bcf\u4e2a\u8282\u70b9\u8981\u5148\u4e8e\u4ed6\u7684\u5b50\u8282\u70b9\uff0c\u4e14\u6613\u77e5\u4f18\u5148\u6392\u5b50\u6811\u66f4\u5c0f\u7684\u8282\u70b9\u5f97\u5230\u7684\u7ed3\u679c\u66f4\u4f18\u3002\n\n\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u53d1\u73b0\u8282\u70b9 $x$ \u7684\u8d21\u732e $W(x) = (-1) \\cdot pos(x) \\cdot (son(x) - 1)$\n\n\u5176\u4e2d $ pos(x) $ \u8868\u793a $x$ \u8282\u70b9\u6392\u5b8c\u5e8f\u4e4b\u540e\u7684\u4f4d\u7f6e\n\n$son(x)$ \u8868\u793a $x$ \u8282\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u513f\u5b50\u7684\u6570\u91cf\uff08\u4e0e\u4ee3\u7801\u4e2d\u7684 $son[]$ \u4e0d\u540c\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <map>\n#include <unordered_map>\nusing namespace std;\ntypedef long long lld;\nmap <lld, int> mp; \nconst int N = 100005;\nconst int M = 510005;\nconst lld p1 = 13331, mod = 1e12 + 7;\nint n, pos = -1;\nlld ans = 0;\nint son[N];\nvector <string> s;\nvector <int> e[N];\nlld f(string c) { //\u6c42hash\u503c\n\tint len = c.length();\n\tlld tmp = 0;\n\tfor(int i = len - 1; i >= 0; i--) {\n\t\ttmp = tmp * p1 % mod + (c[i] - 'a' + 1);\n\t}\n\treturn tmp;\n}\nvoid dfs(int x) { //dfs\u627e\u51fa\u4ee5x\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570son[x]\n\tfor(int i = 0; i < e[x].size(); i++) {\n\t\tint y = e[x][i];\n\t\tdfs(y);\n\t\tson[x] += son[y];\n\t}\n\tson[x]++;\n}\nstruct par {\n\tint num, sons;\n};\npar make_p(int a, int b) {\n\tpar e; e.num = a; e.sons = b;\n\treturn e;\n}\nbool cmp(par a, par b) {\n\treturn a.sons < b.sons;\n}\n \nvoid getans(int x) {\n\tif(son[x] == 1) { //\u5230\u4e86\u53f6\u8282\u70b9\uff0c\u628a\u5f53\u524d\u7684\u6392\u4f4d\u52a0\u4e0a\n\t\tpos++; ans += pos; return ;\n\t}\n\tvector <par> tmp;\n\tfor(int i = 0; i < e[x].size(); i++) {\n\t\tint y = e[x][i];\n\t\ttmp.push_back(make_p(y, son[y]));\n\t}\n\tsort(tmp.begin(), tmp.end(), cmp); //\u6309\u7167\u5b50\u6811\u8282\u70b9\u6570\u91cf\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\tpos++;\n\tans -= pos * (tmp.size() - 1); //\u82e5\u5f53\u524d\u8282\u70b9\u6709\u4e0d\u6b62\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u51cf\u53bb\u76f8\u5e94\u7684\u503c\n\tfor(int i = 0; i < tmp.size(); i++) {\n\t\tgetans(tmp[i].num);\n\t}\n}\nint main() {\n\t// freopen(\"data.in\", \"r\",stdin);\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i++) {\n\t\tchar ss[M]; cin >> ss;\n\t\ts.push_back(ss);\n\t\tmp[f(s[i - 1])] = i; //\u8bb2\u6bcf\u4e2a\u4e32\u7684hash\u503c\u5b58\u5230map\u91cc\n\t\t\n\t}\n\tfor(int i = 0; i < s.size(); i++) {\n\t\tint len = s[i].length(), fa = 0;\n\t\tlld tmp = 0;\n\t\tfor(int j = len - 1; j >= 1; j--) {//\u627e\u5230\u5f53\u524d\u4e32\u7684\u6700\u957f\u540e\u7f00\uff0c\u5373fa\n\t\t\ttmp = tmp * p1 % mod + (s[i][j] - 'a' + 1);\n\t\t\tif(mp[tmp]) fa = mp[tmp];\n\t\t}\n\t\te[fa].push_back(i + 1); //\u5efa\u4e00\u6761fa\u5230\u5f53\u524d\u4e32\u7684\u8fb9\n\t}\n\ts.clear(); mp.clear();\n\tdfs(0); getans(0);\n\tprintf(\"%lld\\n\", ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1672403533,
        "uid": 84066,
        "name": "Mcggvc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3294 [SCOI2016]\u80cc\u5355\u8bcd"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5b83\u7ed9\u4f60\u4e86\u4e09\u79cd\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u662f\u5c06\u4e00\u4e2a\u8bcd\u653e\u5230\u4efb\u610f\u4e00\u4e2a\u7684\u540e\u7f00\u7684\u524d\u9762\uff0c\u9700\u8981\u82b1\u8d39 $n^2$ \u7684\u4ee3\u4ef7\uff0c\u7b2c\u4e8c\u79cd\u662f\u5c06\u65e0\u540e\u7f00\u7684\u8bcd\u653e\u5728\u4f4d\u7f6e $x$ \u4e0a\uff0c\u9700\u8981\u82b1\u8d39 $x$ \u7684\u4ee3\u4ef7\uff0c\u7b2c\u4e09\u79cd\u662f\u5c06\u4e00\u4e2a\u8bcd\u653e\u5230\u5b83\u6240\u6709\u540e\u7f00\u7684\u540e\u9762\u4e14\u5b83\u5728\u4f4d\u7f6e $x$ \u4e0a\uff0c\u8bbe\u5b83\u7684\u4f4d\u7f6e\u5e8f\u53f7\u6700\u5927\u7684\u540e\u7f00\u7684\u4f4d\u7f6e\u5e8f\u53f7\u662f $y$\uff0c\u90a3\u4e48\u9700\u8981\u82b1\u8d39 $x-y$ \u7684\u4ee3\u4ef7\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u5171\u6709\u4e09\u79cd\u65b9\u5f0f\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u7b2c\u4e00\u79cd\u4e00\u6b21\u5c31\u9700\u8981\u82b1\u8d39 $n^2$ \u7684\u4ee3\u4ef7\uff0c\u800c\u5f53\u6211\u4eec\u53ea\u64cd\u4f5c\u7b2c\u4e8c\u3001\u4e09\u79cd\u64cd\u4f5c\u65f6\uff0c\u6240\u82b1\u8d39\u7684\u603b\u4ee3\u4ef7\u4e5f\u4e0d\u4f1a\u8d85\u8fc7 $n^2$\u3002\u6240\u4ee5\u6211\u4eec\u5927\u53ef\u4e0d\u5fc5\u8003\u8651\u7b2c\u4e00\u79cd\u505a\u6cd5\uff0c\u73b0\u5728\u53ea\u5269\u4e0b\u7b2c\u4e8c\u3001\u4e09\u79cd\u65b9\u6cd5\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u5176\u5b9e\u5c31\u662f\u7b2c\u4e09\u79cd\u64cd\u4f5c\u7684\u7279\u6b8a\u64cd\u4f5c\uff0c\u5176\u5b9e\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u53ea\u9700\u8981\u53d8\u4e3a\u7b2c\u4e09\u79cd\u64cd\u4f5c\u4e2d\u7684 $y=0$ \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u90a3\u5c31\u5269\u4e0b\u4e00\u79cd\u65b9\u6cd5\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u5f53\u65f6\u5c31\u5bf9\u5b57\u7b26\u4e32\u6392\u5e8f\u505a\u51fa\u4e86\u4e00\u4e2a\u9650\u5236\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u540e\u7f00\u5c31\u5fc5\u987b\u5230\u5b83\u524d\u9762\u3002\u9996\u5148\u6211\u4eec\u5f97\u8fdb\u884c\u5224\u65ad\uff0c\u5224\u65ad\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 Trie\u6811 \u6765\u89e3\u51b3\uff0c\u4f46\u662f\u6bd5\u7adf\u8981\u6c42\u7684\u662f\u540e\u7f00\uff0c\u4e0d\u59a8\u6211\u4eec\u5c31\u628a\u5b57\u7b26\u4e32\u5012\u8fc7\u6765\u5373\u53ef\uff08\u5373\u5c06\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u5012\u7740\u679a\u4e3e\u5efa\u6811\uff09\u3002\u5e76\u4e14\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u5efa\u6811\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6807\u8bb0\u4e0a\uff0c\u5728\u5efa\u6811\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u53ef\u4ee5\u628a\u5728\u5efa\u6811\u8fc7\u7a0b\u4e2d\u7ecf\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u6807\u8bb0\u7684\u8282\u70b9\u4e0e\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6807\u8bb0\u7684\u8282\u70b9\u7528 vector \u8fde\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\u5c31\u4ee3\u8868\u8fd9\u4e2a\u7ecf\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u6807\u8bb0\u7684\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u662f\u8fd9\u4e2a\u5b57\u7b26\u4e32\u8ddd\u79bb\u6700\u8fd1\u7684\u540e\u7f00\u3002\n\n\u5b57\u7b26\u4e32\u4e2d\u7684\u540e\u7f00\u5173\u7cfb\u8fde\u8fb9\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u8003\u8651\u5b83\u4eec\u600e\u4e48\u6392\u5e8f\u4e86\u3002\n\n\u5176\u5b9e\u6392\u5e8f\u7684\u65b9\u6cd5\u6309\u7167 dfs\u5e8f \u5c31\u53ef\u4ee5\u4e86\uff0c\u4f46\u662f\u4f18\u5148\u7ea7\u662f\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u8d8a\u5c0f\u7684\u8fd9\u4e2a\u8282\u70b9\u4f18\u5148\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u9996\u5148\u8003\u8651 dfs\u5e8f \u4e2d\u7684\u4f18\u5148\u7ea7\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u7684\u3002\u5982\u679c\u6211\u4eec\u9009\u4e00\u4e2a\u8282\u70b9\u5e76\u4e14\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u7279\u522b\u5927\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0e\u5b83\u7684\u7236\u8282\u70b9\u76f8\u540c\u7684\u8282\u70b9\u7684\u5e8f\u53f7\u4e5f\u5c31\u8d8a\u5927\uff0c\u90a3\u4e48\u4ea7\u751f\u7684\u5dee\u503c\u4e5f\u5c31\u8d8a\u5927\uff0c\u5982\u679c\u6ee1\u8db3\u8fd9\u6837\u8981\u6c42\u7684\u8282\u70b9\u6570\u91cf\u7279\u522b\u591a\u7684\u8bdd\uff0c\u672c\u6765\u4e4b\u524d\u4ea7\u751f\u7684\u5dee\u503c\u5c31\u7279\u522b\u5927\uff0c\u800c\u4e14\u8fd8\u4f1a\u4e00\u76f4\u4f20\u5230\u4e0b\u9762\u53bb\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5c31\u4f1a\u4ea7\u751f\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\u65e2\u7136\u5728 dfs\u5e8f \u7684\u6700\u4f18\u89e3\u662f\u8fd9\u6837\u7684\uff0c\u90a3\u4e48\u5c31\u80fd\u4ee3\u8868\u8fd9\u4e2a\u5c31\u662f\u6700\u4f18\u89e3\u5417\uff1f\n\n\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5f97\u5230\u4e86\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5c31\u662f\u4e00\u4e2a\u8282\u70b9\u8981\u60f3\u8fdb\u884c\u904d\u5386\uff0c\u5b83\u7684\u6839\u8282\u70b9\u5fc5\u987b\u8981\u904d\u5386\u8fc7\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4efb\u9009\u4e24\u4e2a\u540c\u6df1\u5ea6\u7684\u8282\u70b9 $a,b$\uff0c\u518d\u9009 $b$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u9009\u4efb\u610f\u4e00\u4e2a\u8282\u70b9 $c$\uff0c\u5982\u679c\u5148\u904d\u5386 $a$ \u518d\u904d\u5386 $c$\uff0c\u8fd9\u5c31\u4f1a\u9020\u6210 $a$ \u7684\u5b50\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u6240\u82b1\u8d39\u7684\u4ee3\u4ef7\u90fd\u8981\u589e\u52a0\uff0c\u800c\u56e0\u4e3a\u4f60\u5df2\u7ecf\u904d\u5386\u4e86 $c$\uff0c\u6240\u4ee5\u4f60\u80af\u5b9a\u65e9\u5c31\u5df2\u7ecf\u904d\u5386\u4e86 $b$\uff0c\u6240\u4ee5\u53c8\u589e\u52a0\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u4ee3\u4ef7\u3002\uff08\u5148\u904d\u5386 $c$ \u518d\u904d\u5386 $a$ \u5176\u5b9e\u4e0d\u5fc5\u8003\u8651\uff0c\u56e0\u4e3a\u5148\u904d\u5386 $c$ \u80af\u5b9a\u8981\u5148\u904d\u5386 $b$\uff0c\u8fd9\u6837\u5176\u5b9e\u5c31\u662f dfs\u5e8f\uff0c\u90a3\u4e48\u4e4b\u540e\u7684\u904d\u5386\u5176\u5b9e\u8fd8\u662f\u8981\u505a\u4e00\u904d\u4e0a\u9762\u7684\u8bc1\u660e\uff09\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u8981\u7528 dfs\u5e8f \u6765\u6807\u53f7\uff0c\u8fd9\u6837\u4e5f\u5c31\u8bc1\u660e\u4e86 dfs\u5e8f \u7684\u6700\u4f18\u89e3\u5c31\u662f\u672c\u9898\u7684\u6700\u4f18\u89e3\u3002\n\n\u5176\u5b9e\u4e4b\u524d dalao \u4eec\u7684\u9898\u89e3\u7684\u8bc1\u660e\u5e94\u8be5\u90fd\u6bd4\u6211\u597d\uff0c\u6240\u4ee5\u5f3a\u70c8\u5efa\u8bae\u770b\u770b\u5b83\u4eec\u7684\u8bc1\u660e\uff0c\u5c24\u5176\u662f\u4e00\u4f4d dalao \u627e\u4e86\u96c6\u8bad\u961f\u7237 wqy \u5e2e\u5fd9\u6765\u8bc1\u660e\uff0c\u8bc1\u660e\u8fc7\u7a0b\u975e\u5e38\u8be6\u7ec6\u975e\u5e38\u597d\uff08%%%\u961f\u7237\u5c31\u662f\u961f\u7237\uff09\u3002\n\n\u6b64\u9898\u89e3\u94fe\u63a5\uff1a[This](https://www.luogu.com.cn/blog/Tian-Xing/solution-p3294)\n\n\u63a5\u4e0b\u6765\u5c31\u7528 dfs \u904d\u5386\u4e00\u904d\u518d\u7b97\u51fa\u6700\u5c0f\u4ee3\u4ef7\u5c31\u884c\u4e86\u3002\n\n# code (40\u5206):\n```cpp\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<iostream>\n#include<vector>\nusing namespace std;\nstring a[100005];\nint trie[510005][26],dp[510005],num[510005],numm;\nbool yes[510005];\nvector<int> edge[510005];\nlong long ans;\nbool cmp(int x,int y){\n    return dp[x]<dp[y];\n}\nvoid dfs(int x){\n    int i;\n    for(i=0;i<edge[x].size();i++){\n        dfs(edge[x][i]);\n        dp[x]+=dp[edge[x][i]];\n    }\n    sort(edge[x].begin(),edge[x].end(),cmp);\n}\nvoid dfs1(int x){\n    int i;\n    num[x]=numm++;\n    for(i=0;i<edge[x].size();i++){\n        ans+=numm-num[x];\n        dfs1(edge[x][i]);\n    }\n}\nint main(){\n\tint n,i,j,cnt=0;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++){\n\t\tcin>>a[i];\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tint len,u=0,bj=0;\n\t\tfor(j=a[i].size()-1;j>=0;j--){\n\t\t\tif(!trie[u][a[i][j]-'a']){\n\t\t\t\ttrie[u][a[i][j]-'a']=++cnt;\n\t\t\t}\n            if(yes[u]){\n                bj=u;\n            }\n\t\t\tu=trie[u][a[i][j]-'a'];\n\t\t}\n        edge[bj].push_back(u);\n        dp[u]=yes[u]=1;\n\t}\n    dfs(0);\n    dfs1(0);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n**\u6ce8\u610f**\uff1a\u6b64\u9898 $40$ \u5206\u7684\u539f\u56e0\u662f\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u7528 vector \u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u6700\u8fd1\u7684\u540e\u7f00\u8fd8\u6ca1\u6709\u6784\u5efa\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5df2\u7ecf\u8fde\u597d\u8fb9\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u80fd\u4f1a\u9020\u6210\u6784\u6811\u9519\u8bef\u5bfc\u81f4 WA \u6389\u3002\n\n\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u8981\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u6309\u7167**\u957f\u5ea6\u5927\u5c0f**\u6392\u5e8f\uff0c\u4e4b\u540e\u624d\u53ef\u4ee5\u5b89\u5fc3\u8fde\u8fb9\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u505a\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(\\left|len\\right|+n\\log n)$\u3002\n\n# code (100\u5206):\n\n```\n#include<cstdio>\n#include<string>\n#include<algorithm>\n#include<iostream>\n#include<vector>\nusing namespace std;\nstring a[100005];\nint trie[510005][26],dp[510005],num[510005],numm;\nbool yes[510005];\nvector<int> edge[510005];\nlong long ans;\nbool cmp(int x,int y){\n    return dp[x]<dp[y];\n}\nvoid dfs(int x){\n    int i;\n    for(i=0;i<edge[x].size();i++){\n        dfs(edge[x][i]);\n        dp[x]+=dp[edge[x][i]];\n    }\n    sort(edge[x].begin(),edge[x].end(),cmp);\n}\nvoid dfs1(int x){\n    int i;\n    num[x]=numm++;\n    for(i=0;i<edge[x].size();i++){\n        ans+=numm-num[x];\n        dfs1(edge[x][i]);\n    }\n}\nbool cmp1(string x,string y){\n    return x.size()<y.size();\n}\nint main(){\n\tint n,i,j,cnt=0;\n\tscanf(\"%d\",&n);\n\tfor(i=1;i<=n;i++){\n\t\tcin>>a[i];\n\t}\n    sort(a+1,a+n+1,cmp1);\n\tfor(i=1;i<=n;i++){\n\t\tint len,u=0,bj=0;\n\t\tfor(j=a[i].size()-1;j>=0;j--){\n\t\t\tif(!trie[u][a[i][j]-'a']){\n\t\t\t\ttrie[u][a[i][j]-'a']=++cnt;\n\t\t\t}\n            if(yes[u]){\n                bj=u;\n            }\n\t\t\tu=trie[u][a[i][j]-'a'];\n\t\t}\n        edge[bj].push_back(u);\n        dp[u]=yes[u]=1;\n\t}\n    dfs(0);\n    dfs1(0);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1588144598,
        "uid": 80614,
        "name": "ZCPB",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u4e32\u80af\u5b9a\u5f97\u5728\u5b83\u7684\u540e\u7f00\u90fd\u88ab\u586b\u5165\u540e\u518d\u586b\u5165\uff0c\u6211\u4eec\u5efa\u51fa\u8fd9\u4e9b\u4e32\u7684\u53cd\u4e32\u7684 Trie\uff0c\u73b0\u5728\u5f97\u5230\u4e00\u68f5\u6811\u5f62\u7ed3\u6784\uff0c\u5176\u4e0a\u6709\u82e5\u5e72\u4e2a\u5173\u952e\u70b9\uff0c\u8981\u6c42\u7ed9\u8fd9\u4e9b\u5173\u952e\u70b9\u8d4b\u6743\uff08$[n]$ \u7684\u5168\u6392\u5217\uff09\uff0c\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u5173\u952e\u70b9\u7684\u6743\u5c0f\u4e8e\u5176\u5b50\u6811\u5185\u7684\u5173\u952e\u70b9\u7684\u6743\uff0c\u7136\u540e\u6700\u5c0f\u5316\u9898\u76ee\u91cc\u6c42\u7684\u90a3\u4e2a\u4e1c\u897f\u3002\n\n\u7531\u4e8e\u6211\u4eec\u4ec5\u9700\u8003\u5bdf\u5173\u952e\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u5efa\u4e00\u68f5\u65b0\u6811\uff0c\u65b0\u6811\u7684\u8282\u70b9\u90fd\u662f\u539f\u6765\u7684 Trie \u4e0a\u7684\u5173\u952e\u70b9\u4ee5\u53ca Trie \u7684\u6839\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u662f\u5b83\u5728 Trie \u4e0a\u79bb\u4ed6\u6700\u8fd1\u7684\u4e00\u4e2a\u7956\u5148\u5173\u952e\u70b9\u3002\n\n\u7406\u6027\u5206\u6790\u4e00\u4e0b\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u4e00\u5b9a\u662f\u6309\u67d0\u4e2a dfs \u5e8f\u7ed9\u8fd9\u4e9b\u70b9\u5b9a\u6743\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u6743\u4e00\u5b9a\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u53d6\u503c\u3002\n\n\u8bbe $u$ \u5b50\u6811\u5927\u5c0f\u4e3a $s(u)$\uff0c$f(u)$ \u8868\u793a\u4ec5\u8003\u8651 $u$ \u7684\u5b50\u6811\u65f6\uff0c\u7528 $[s(u)]$ \u7684\u5168\u6392\u5217\u7ed9 $u$ \u7684\u5b50\u6811\u5185\u7684\u70b9\u8d4b\u6743\u5f97\u5230\u7684\u6700\u5c0f\u7b54\u6848\u3002\u5c06\u6743\u7684\u503c\u57df\u4ece $[1,s(u)]$ \u8f6c\u5230\u5230 $[1+\\Delta,s(u)+\\Delta]$ \u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u7ed9 $f(u)$ \u52a0\u4e0a $\\Delta$\uff0c\u56e0\u4e3a\u5b50\u6811\u5185\u7684\u70b9\u9664\u4e86 $u$ \u90fd\u662f $?-?$ \u7684\u5f62\u5f0f\uff0c\u4e24\u8fb9\u540c\u52a0 $\\Delta$ \u540e\u503c\u4e0d\u53d8\u3002\n\n\u73b0\u5728\u6765\u8003\u8651\u8f6c\u79fb\uff0c\u9664\u53bb\u70b9 $u$ \u7684\u8d21\u732e\u4ee5\u53ca\u8ba9\u513f\u5b50\u7684\u8d4b\u6743\u504f\u79fb\u548c\u5c06 $v$ \u63a5\u5728 $u$ \u540e\u51cf\u53bb $u$ \u7684\u6743 $1$\uff0c\u63a5\u4e0b\u6765\u5b9e\u9645\u4e0a\u662f\u8003\u8651\u5982\u4f55\u6392\u5217 $u$ \u7684\u513f\u5b50\uff0c\u5f53\u6211\u4eec\u5c06\u67d0\u4e2a\u513f\u5b50 $v$ \u586b\u5728\u7b2c $k$ \u4f4d\u65f6\uff0c\u5b83\u4f1a\u8ba9\u540e\u9762\u7684\u513f\u5b50\u7684\u8d4b\u6743\u504f\u79fb $s(v)$\uff0c\u4e5f\u5c31\u662f\u4ea7\u751f\u989d\u5916\u7684\u8d21\u732e $s(v)\\bigg{(}|son(u)|-k\\bigg{)}$\u3002\u7531\u4e8e\u65e0\u8bba\u5982\u4f55\u6392\u5217\uff0c$f(v)$ \u603b\u662f\u4e0d\u53d8\u7684\uff0c\u6211\u4eec\u53ea\u9700\u6700\u5c0f\u5316\u989d\u5916\u7684\u8d21\u732e\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u8d2a\u5fc3\u95ee\u9898\uff0c\u6211\u4eec\u8ba9 $s(v)$ \u5c0f\u7684\u5c3d\u91cf\u9760\u524d\u5373\u53ef\u3002\n\n\u6b63\u5e38\u8ba1\u7b97\u540e\uff0c\u53d6\u6839\u7684 $f$ \u51cf $1$ \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define pb push_back\n#define mp make_pair\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\ninline void read(int& x){\n    static char c;\n    while(!isdigit(c=getchar())); x=c^48;\n    while(isdigit(c=getchar()))x=(x*10)+(c^48);\n}\ninline void read(ll& x){\n    static char c;\n    while(!isdigit(c=getchar())); x=c^48;\n    while(isdigit(c=getchar()))x=(x*10)+(c^48);\n}\n\nconst int N=6e5+10,M=1e5+10;\n\nint n;\nchar str[N];\nnamespace Trie{\n    int tot;\n    struct Tree{int ed,ch[26];}t[N];\n    inline void Init(){tot=1;}\n    inline void Insert(char *str){\n        int now=1,len=strlen(str);\n        for(int i=len-1;~i;--i){\n            if(!t[now].ch[str[i]-'a']) t[now].ch[str[i]-'a']=++tot;\n            now=t[now].ch[str[i]-'a'];\n        }\n        t[now].ed=1;\n    }\n}\n\nusing namespace Trie;\n\nint cnt=1;\nvector<int> Edge[M];\n\nvoid dfs(int now,int top){\n    if(t[now].ed) Edge[top].pb(++cnt),top=cnt;\n    for(int c=0;c<26;++c)\n        if(t[now].ch[c]) dfs(t[now].ch[c],top);\n}\n\nint siz[M];\nll F[M];\nvoid PreCalc(int now){\n    siz[now]=1;\n    for(int v:Edge[now]) PreCalc(v),siz[now]+=siz[v];\n    sort(Edge[now].begin(),Edge[now].end(),[](const int &lhs,const int &rhs)->bool{return siz[lhs]<siz[rhs];});\n}\nvoid Calc(int now){\n    int deg=Edge[now].size();\n    F[now]=1;\n    for(int i=0;i<deg;++i) Calc(Edge[now][i]),F[now]+=F[Edge[now][i]]+1ll*siz[Edge[now][i]]*(deg-i-1);\n}\n\nvoid Work(){\n    read(n),Init();\n    for(int i=1;i<=n;++i) scanf(\"%s\",str),Insert(str);\n    dfs(1,1),PreCalc(1),Calc(1);\n    printf(\"%lld\\n\",F[1]-1);\n}\n\nint main(){Work();}\n\n```",
        "postTime": 1615514478,
        "uid": 83547,
        "name": "LCuter",
        "ccfLevel": 7,
        "title": "SCOI2016 \u80cc\u5355\u8bcd \u9898\u89e3"
    },
    {
        "content": "\n- \u540e\u7f00\u95ee\u9898\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u628a\u5b83\u8f6c\u5316\u4e3a\u524d\u7f00\u95ee\u9898\uff0c\u7528\u5b57\u5178\u6811\u89e3\u51b3\u95ee\u9898\n\n- \u5bb9\u6613\u60f3\u5230\uff0c\u4e00\u4e2a\u4e32\u7684\u540e\u7f00\u8981\u5148\u4e8e\u5b83\u63d2\u5165\n\n- \u5bf9\u4e8e\u4e00\u4e2a\u4e32\u548c\u5176\u82e5\u5e72\u540e\u7f00\u4e32\uff0c\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u8981\u5148\u63d2\u5165\u540e\u7f00\u4e32\n\n- \u7136\u540e\u9012\u5f52\u8fdb\u5165$size$\u6700\u5c0f\u7684\u5b50\u4e32\n\n- \u5728\u5efa$Trie$\u65f6\u7ed9\u6240\u6709\u4e32\u7684\u7ed3\u5c3e\u548c$Trie$\u6811\u7684\u6839\u8282\u70b9\u6807\u53f7\uff0c\u8868\u793a\u65b0\u6811\u4e2d\u70b9\u7684\u7f16\u53f7\n\n- \u7136\u540e\u904d\u5386$Trie$\u6811\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6ca1\u6709\u88ab\u6807\u53f7\uff0c\u5c31\u628a\u5b83\u5e76\u5165\u5f53\u524d\u8282\u70b9\u7684\u96c6\u5408\uff1b\n\n- \u5426\u5219\u628a\u8fd9\u4e2a\u5b50\u8282\u70b9\u4f5c\u4e3a\u5f53\u524d\u8282\u70b9\u6240\u5728\u96c6\u5408\u7684\u6839\u7684\u513f\u5b50\uff08\u5c31\u662f\u8fde\u4e00\u6761\u8fb9\uff09\n\n- \u6700\u540e\u6309$dfs$\u5e8f\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define eps 1e-7\n#define re register\n#define N 510101\n#define MAX 2001\n#define PI 3.1415927\nusing namespace std;\ntypedef unsigned long long ll;\ntypedef double db;\ninline void read(re ll &ret)\n{\n    ret=0;re ll pd=0;re char c=getchar();\n    while(!isdigit(c)){pd|=c=='-';c=getchar();}\n    while(isdigit(c)){ret=(ret<<1)+(ret<<3)+(c^48);c=getchar();}\n    ret=pd?-ret:ret;\n}\nll n,f[N],trie[N][26],tot,fa[N],siz[N],ans,cnt,dfn[N];\nchar s[N];\ninline void insert(re ll pos)\n{\n\tre ll p=0,len=strlen(s+1);\n\tfor(re int i=len;i;i--)\n\t{\n\t\tre ll c=s[i]-'a';\n\t\tif(!trie[p][c])\n\t\t\ttrie[p][c]=++tot;\n\t\tp=trie[p][c];\n\t}\n\tf[p]=pos;\n\treturn;\n}\nvector<ll>v[N];\ninline ll find(re ll pos)\n{\n\treturn fa[pos]==pos?pos:fa[pos]=find(fa[pos]);\n}\ninline void build(re ll pos)\n{\n\tfor(re int i=0;i<26;i++)\n\t{\n\t\tif(trie[pos][i])\n\t\t{\n\t\t\tif(!f[trie[pos][i]])\n\t\t\t\tfa[trie[pos][i]]=find(pos);\n\t\t\telse\n\t\t\t\tv[f[find(pos)]].push_back(f[trie[pos][i]]);\n\t\t\tbuild(trie[pos][i]);\n\t\t}\n\t}\n\treturn;\n}\ninline bool cmp(re ll x,re ll y)\n{\n\treturn siz[x]<siz[y];\n}\ninline void get_size(re ll pos)\n{\n\tsiz[pos]=1;\n\tfor(re int i=0;i<v[pos].size();i++)\n\t{\n\t\tre ll ver=v[pos][i];\n\t\tget_size(ver);\n\t\tsiz[pos]+=siz[ver];\n\t}\n\tsort(v[pos].begin(),v[pos].end(),cmp);\n\treturn;\n}\ninline void dfs(re ll pos)\n{\n\tdfn[pos]=cnt++;\n\tfor(re int i=0;i<v[pos].size();i++)\n\t{\n\t\tre ll ver=v[pos][i];\n\t\tans+=cnt-dfn[pos];\n\t\tdfs(ver);\n\t}\n\treturn;\n}\nint main()\n{\n\tread(n);\n\tfor(re int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",s+1);\n\t\tinsert(i);\n\t}\n\tfor(re int i=1;i<=tot;i++)\n\t\tfa[i]=i;\n\tbuild(0);\n\tget_size(0);\n\tdfs(0);\n\tprintf(\"%lld\\n\",ans);\n\texit(0);\n}\n```\n",
        "postTime": 1579488595,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "~~\u9605\u8bfb\u7406\u89e3\u9898~~\u9898\u610f\u89e3\u91ca\u53ef\u4ee5\u770b[\u8fd9\u4f4d\u5927\u4f6c\u7684\u535a\u5ba2](https://www.luogu.org/blog/Tian-Xing/solution-p3294)\uff08\u5e94\u8be5\u4e00\u697c\u5c31\u662f\uff09\u3002\n\n\u3000\u3000\u53d1\u73b0\u6c42\u540e\u7f00\u4e0e\u5012\u5e8f\u6c42\u524d\u7f00\u662f\u7b49\u4ef7\u7684\uff0c\u800c\u627e\u524d\u7f00\u81ea\u7136\u5c31\u60f3\u5230\u4e86trie\u6811\u3002\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u7ffb\u8f6c\u540e\u518d\u5efa\u5165trie\u6811\u4e2d\uff0c\u518d\u5bf9\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7ffb\u8f6c\u540e\u4ecetrie\u6811\u4e2d\u627e\u524d\u7f00\uff0c\u5c31\u80fd\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u540e\u7f00\u4e86\u3002\n\n\u3000\u3000\u7531\u7b2c\u4e09\u79cd\u60c5\u51b5\u77e5\u6211\u4eec\u8981\u60f3\u6700\u5c0f\u5316\u603b\u4ee3\u4ef7\uff0c\u5219\u6700\u5c0f\u5316\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e0e\u6700\u9760\u8fd1\u5b83\u7684\u540e\u7f00\u95f4\u7684\u8ddd\u79bb\u5e94\u8be5\u4e5f\u662f\u4e00\u4e2a\u8981\u8003\u8651\u7684\u56e0\u7d20\u3002\u5176\u5b9e\u4e00\u4e2a\u4e32\u6700\u8fd1\u7684\u540e\u7f00\u5176\u5b9e\u4e00\u5b9a\u662f\u5b83\u7684\u6240\u6709\u540e\u7f00\u4e2d\u957f\u5ea6\u6700\u5927\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u540e\u7f00\u4e2d\u957f\u5ea6\u77ed\u7684\u4e5f\u4e00\u5b9a\u662f\u957f\u5ea6\u5927\u7684\u540e\u7f00\uff0c\u5e76\u4e14\u8fd8\u8981\u907f\u514d\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u51fa\u73b0\uff08\u5373\u5e8f\u5217\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u540e\u9762\u7684\u4e32\u4e2d\u4e0d\u80fd\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u540e\u7f00\uff09\u3002\u6545\u6211\u4eec\u53ea\u8981\u77e5\u9053\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6700\u957f\u7684\u540e\u7f00\u5c31\u597d\u3002\u82e5\u4e00\u4e2a\u4e32\u662f\u53e6\u4e00\u4e2a\u4e32\u7684\u540e\u7f00\uff0c\u5219\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u4e32\u5411\u53e6\u4e00\u4e2a\u4e32\u8fde\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5219\u6700\u7ec8\u4f1a\u5f62\u6210\u4e00\u4e2a\u68ee\u6797\u3002\n\n\u3000\u3000\u8fd9\u65f6\u907f\u514d\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\u540e\uff0c\u8fd8\u6709\u4e24\u79cd\u60c5\u51b5\u3002\u6211\u4eec\u505a\u4e86\u8fd9\u4e48\u591a\u9898\uff0c\u77e5\u9053\u4e00\u79cd\u60c5\u51b5\u603b\u5e94\u8be5\u6bd4\u591a\u79cd\u60c5\u51b5\u597d\u505a\u3002\u6545\u8003\u8651\u5c06\u4e24\u79cd\u60c5\u51b5\u8f6c\u5316\u4e3a\u4e00\u79cd\u3002\u53d1\u73b0\u5982\u679c\u6211\u4eec\u5728\u6240\u6709\u9898\u76ee\u7ed9\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u5165\u4e00\u4e2a\u5904\u4e8e\u5e8f\u5217\u7b2c0\u4e2a\u4f4d\u7f6e\u7684\u7a7a\u4e32\uff0c\u90a3\u4e48\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e5f\u5c31\u8f6c\u5316\u4e3a\u4e86\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u5e76\u4e14\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u3002\u8fd9\u79cd\u8f6c\u5316\u5bf9\u4e8e\u5f53\u524d\u7684\u68ee\u6797\uff0c\u53ea\u8981\u518d\u5efa\u4e2a\u6807\u53f7\u4e3a0\u7684\u7a7a\u4e32\u8282\u70b9\u8fde\u5411\u6240\u6709\u6811\u7684\u6839\u5c31\u597d\u4e86\u3002\n\n\u3000\u3000\u6b64\u65f6\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\u7ed9\u6811\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u8981\u6c42\u7236\u4eb2\u8282\u70b9\u7684\u5e8f\u53f7\u6bd4\u513f\u5b50\u8282\u70b9\u5c0f\uff0c\u4e14\u6839\u8282\u70b9\u7684\u5e8f\u53f7\u4e3a0\uff0c\u5e76\u4f7f\u5f97\u513f\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u51cf\u7236\u4eb2\u8282\u70b9\u7f16\u53f7\u7684\u5dee\u7684\u548c\u6700\u5c0f\uff0c\u6c42\u6700\u5c0f\u7684\u548c\u3002\u8003\u8651\u600e\u4e48\u9009\u70b9\u7f16\u53f7\u3002~~\u4f5c\u8005\u4e00\u5f00\u59cb\u4e5f\u61f5\u7684\u4e00\u903c\u4e8e\u662f\u770b\u4e86\u770b[\u8fd9\u4f4d\u5927\u4f6c\u535a\u5ba2](https://www.luogu.org/blog/Tian-Xing/solution-p3294)\u5173\u4e8e\u9009\u6cd5\u7684\u8bc1\u660e\u90e8\u5206\uff08\u201c\u8003\u8651\u5efa\u51fa\u2026\u2026Q.E.D\u201d\uff09\u7ec8\u4e8e\u660e\u767d~~\u5982\u679c\u9009\u5230\u4e86\u4e00\u4e2a\u70b9\uff0c\u5c31\u8981\u4e00\u53e3\u6c14\u628a\u5b83\u7684\u5b50\u6811\u90fd\u9009\u4e86\uff0c\u5e76\u4e14\u4f18\u5148\u9009\u5b50\u6811\u5927\u5c0f\u6700\u5c0f\u7684\u513f\u5b50\u3002dfs\u5c31\u641e\u5b9a\u4e86\u5440\u3002\u81f3\u4e8e\u5bf9\u67d0\u4e2a\u70b9\u7684\u513f\u5b50\u4ece\u5b50\u6811\u5927\u5c0f\u5c0f\u7684\u5f80\u5927\u7684\u9009\uff0c\u53ef\u4ee5\u7528\u5806\u7ef4\u62a4\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8bf7\u770b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n\n#define max(a,b) ((a)>(b)?(a):(b))\n\nusing namespace std;\n\nconst int N=100005,LEN=510005;\n\nint tree[510005][26],cnt,n,l,dfs;\nint ed[LEN],in[N],lst[N],to[N],nxt[N],ecnt,dfn[N];\n\nlong long siz[N],ans;\n\nstring word[N];\n\nchar ch;\n\ninline int read()\n{\n\tint x=0;\n\tch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn x;\n}\n\ninline void getstring(string &a)\n{\n\ta=\"\";\n\tch=getchar();\n\twhile(ch<'a'||ch>'z')\n\t\tch=getchar();\n\twhile(ch>='a'&&ch<='z')\n\t\ta+=ch,ch=getchar();\n}\n\ninline void insert(const string &a,int j)\n{\n\tl=a.length();\n\tint now=0,num;\n\tfor(int i=l-1;i>=0;--i)//\u8981\u5c06\u5b57\u7b26\u4e32\u5012\u5e8f\u63d2\u5165trie\u6811\u4e2d \n\t{\n\t\tnum=a[i]-'a';\n\t\tif(!tree[now][num])\n\t\t\ttree[now][num]=++cnt;\n\t\tnow=tree[now][num];\n\t}\n\ted[now]=j;\n}\n\ninline void addedge(int u,int v)\n{\n\tnxt[++ecnt]=lst[u];\n\tlst[u]=ecnt;\n\tto[ecnt]=v;\n}\n\ninline int fin(const string &a)\n{\n\tint now=0,num,ret=-1;\n\tl=a.length();\n\tfor(int i=l-1;i>=0;--i)//\u67e5\u540e\u7f00\u5c31\u662f\u5012\u5e8f\u67e5\u524d\u7f00 \n\t{\n\t\tnum=a[i]-'a';\n\t\tif(!tree[now][num])\n\t\t\treturn ret;\n\t\tnow=tree[now][num];\n\t\tif(ed[now]&&i)\n\t\t\tret=ed[now];\n\t}\n\treturn ret;\n}\n\nvoid dfssiz(int u)\n{\n\tsiz[u]=1;\n\tfor(int e=lst[u];e;e=nxt[e])\n\t{\n\t\tdfssiz(to[e]);\n\t\tsiz[u]+=siz[to[e]];\n\t}\n}\n\nstruct node{\n\tint lar,ord;\n}head;\n\ninline bool operator < (const node &a,const node &b)\n{\n\treturn a.lar>b.lar;//\u5927\u6839\u5806\u53d8\u5c0f\u6839\u5806 \n}\n\nvoid dfsans(int u)\n{\n\tpriority_queue<node>hep;\n\tfor(int e=lst[u];e;e=nxt[e])\n\t{\n\t\thep.push((node){siz[to[e]],to[e]});\t\n\t}\n\twhile(!hep.empty())\n\t{\n\t\thead=hep.top();\n\t\thep.pop();\n\t\tdfn[head.ord]=++dfs;//\u7f16\u53f7\u8fc7\u7a0b \n\t\tans+=dfn[head.ord]-dfn[u];\n\t\tdfsans(head.ord);\n\t}\n}\n\nint main()\n{\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tgetstring(word[i]);//\u5b57\u7b26\u4e32\u7684\u8bfb\u5165\u4f18\u5316 \n\t\tinsert(word[i],i);\n\t}\n\tint u;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tu=fin(word[i]);\n\t\tif(u!=-1)\n\t\t{\n\t\t\taddedge(u,i);\n\t\t\tin[i]++;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;++i)\n\t\tif(!in[i])//\u6ca1\u6709\u5165\u5ea6\u7684\u70b9\u5c31\u662f\u68ee\u6797\u4e2d\u6811\u7684\u6839 \n\t\t\taddedge(0,i);\n\tdfssiz(0);//\u6c42\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u3002 \n\tdfsans(0);//\u7edf\u8ba1\u7b54\u6848\u3002 \n\tprintf(\"%lld\",ans);\n\treturn 0;\n}\n```\n\u6587\u7ae0\u540c\u6b65\u53d1\u8868\u4e8e[\u535a\u5ba2\u56ed](https://www.cnblogs.com/InductiveSorting-QYF/p/11808756.html)\u3002\n\n\uff08\u5199\u4e86\u8fd9\u4e48\u591a\uff0c\u5e94\u8be5\u80fd\u61c2\u4e86\u5427~\uff09\n\n\uff08\u61c2\u4e86\u7684\u8bdd\u8bf7\u7559\u4e2a\u8d5e\uff0c\u8ba9\u66f4\u591a\u4eba\u770b\u5230\uff1b\u4e0d\u61c2\u7684\u8bdd\uff1f\u95ee\u5c31\u597d\u4e86~\uff09",
        "postTime": 1573046423,
        "uid": 45543,
        "name": "YHASDY",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3294 \u3010[SCOI2016]\u80cc\u5355\u8bcd\u3011"
    },
    {
        "content": "trie \u6811\u597d\u9898\uff0c\u9898\u9762\u5dee\u8bc4\u3002\n\n### \u9898\u610f\u548c\u601d\u8def\n\n> [P3294 [SCOI2016]\u80cc\u5355\u8bcd](https://www.luogu.com.cn/problem/P3294)\n\u7ed9\u5b9a $n$ \u4e2a\u5b57\u7b26\u4e32\uff0c\u8981\u6c42\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u603b\u8d21\u732e\u6700\u5c0f\u3002\n\u5047\u8bbe\u63d2\u5165\u67d0\u4e2a\u6392\u5e8f\u540e\u7f16\u53f7\u4e3a $x$ \u7684\u5b57\u7b26\u4e32 $s$\uff0c\u4ea7\u751f\u7684\u8d21\u732e\u89c4\u5219\u4e3a\uff1a\n> - \u5982\u679c\u5728 $s$ \u540e\u7684\u5b57\u7b26\u4e32\u4e2d\u6709 $s$ \u7684\u540e\u7f00\uff0c\u8d21\u732e\u4e3a $n^2$\u3002\n> - \u5982\u679c\u5728 $s$ \u524d\u7684\u5b57\u7b26\u4e32\u4e2d\u6709 $s$ \u7684\u540e\u7f00\uff0c\u4e14 $s$ \u540e\u65e0 $s$ \u7684\u540e\u7f00\uff0c\u5219\u8d21\u732e\u4e3a $x-y$\uff08$y$ \u662f\u4e0a\u4e00\u4e2a\u662f $s$ \u7684\u540e\u7f00\u7684\u5b57\u7b26\u4e32\u6392\u5e8f\u540e\u7684\u7f16\u53f7\uff09\u3002\n> - \u5982\u679c $s$ \u65e0\u540e\u7f00\uff08\u5355\u4e2a\u5b57\u7b26\uff09\uff0c\u5219\u8d21\u732e\u4e3a $x$\u3002\n\n\n\u5bf9\u4e8e\u89c4\u5219 3\uff0c\u5176\u5b9e\u53ef\u4ee5\u770b\u51fa\u5176\u5b9e\u5c31\u662f\u89c4\u5219 2 \u4e2d $y=0$ \u7684\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u56e0\u4e3a\u65e0\u8bba\u5982\u4f55\uff0c$x-y$ \u5fc5\u7136\u8fdc\u5c0f\u4e8e $n^2$\uff0c\u6240\u4ee5\u8d2a\u5fc3\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u90fd\u653e\u5230\u5176**\u4e4b\u524d**\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u5f97**\u6700\u540e\u4e00\u4e2a**\u6b64\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u4e0e\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u8ddd\u79bb\u6700\u5c0f\u5373\u53ef\u3002\n\n### \u505a\u6cd5\n\n> \u5c06\u6240\u6709\u5b57\u7b26\u4e32\u7ffb\u8f6c\uff0c\u5efa\u7acb trie \u6811\uff0c\u5e76\u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u7f16\u53f7\u3002\n\n\u56e0\u4e3a\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u7ffb\u8f6c\u5c31\u80fd\u628a\u540e\u7f00\u8f6c\u53d8\u4e3a\u524d\u7f00\uff0c\u4ece\u800c\u4fbf\u4e8e\u7528 trie \u6811\u5904\u7406\u524d\u7f00\u95ee\u9898\u3002\n\n> \u5bf9\u6240\u6709\u7f16\u53f7\u7684\u8282\u70b9\u5efa\u91cd\u6784\u6811\u3002\n\u904d\u5386\u539f\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\uff0c\u5206\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u91c7\u7528**\u5e76\u67e5\u96c6**\u5224\u662f\u5426\u5c5e\u540c\u4e00\u96c6\u5408\u3002\n> 1. \u5982\u679c\u67d0\u4e2a\u8282\u70b9\u7684\u67d0\u4e2a\u5b50\u8282\u70b9\u6ca1\u6709\u88ab\u7f16\u53f7\uff0c\u5c31\u5c06\u5176\u4e0e\u5f53\u524d\u8282\u70b9\u5e76\u67e5\u96c6\u5408\u5e76\u3002\n> 2. \u5426\u5219\u628a\u5b50\u8282\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u96c6\u5408\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u4e4b\u524d\u7f16\u53f7\u662f\u4e3a\u4e86\u4e4b\u540e\u8dd1\u51fa\u91cd\u6784\u6811\uff0c\u539f\u5148\u6811\u4e2d**\u6ca1\u6709\u7f16\u53f7\u7684\u70b9**\u4e0e\u540e\u7eed\u64cd\u4f5c\u65e0\u5173\uff0c\u53ea\u9700\u4fdd\u7559\u6839\u8282\u70b9\u548c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u7684\u8282\u70b9\u5373\u53ef\u3002\n\n\u5efa\u91cd\u6784\u6811\u7684\u539f\u56e0\u662f\uff0c\u8981\u7edf\u8ba1\u6bcf\u4e2a\u5b50\u6811\u7684\u5173\u952e\u8282\u70b9\u4e2a\u6570\u3002\n\n> \u7edf\u8ba1\u91cd\u6784\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7684**\u5b50\u6811\u5927\u5c0f**\u540e\uff0c\u4ee5\u6b64\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n\u6bd4\u8f83\u91cd\u6784\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5b50\u6811\u7684\u5173\u952e\u8282\u70b9\u4e2a\u6570\u7684\u539f\u56e0\u662f\u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9\uff0c\u5176\u8d21\u732e\u662f**\u5176\u524d\u9762\u6240\u6709\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4e4b\u548c**\uff0c\u6240\u4ee5\u8981\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u6811\u6240\u542b\u5173\u952e\u8282\u70b9\u6570\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n> \u6700\u540e\u6309\u7167\u9898\u76ee\u7ed9\u51fa\u7684\u89c4\u5219\u7edf\u8ba1\u548c\u5373\u53ef\u3002\n\n\u8bb0\u5f97\u6700\u540e\u7edf\u8ba1\u7b54\u6848\u7684\u53d8\u91cf\u8981\u5f00 long long\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;const int N=5e5+1e4;\nint n,len[N],size[N],id[N],c,u,cnt,tot,t[N][30],flag[N],f[N],v,ans;string s[N];\nvector <int> e[N];int cz(int x){return x==f[x]?x:f[x]=cz(f[x]);}\nint R(){\n    int x=0,f=0; char ch=getchar();while(!isdigit(ch)) f|=(ch==45),ch=getchar();\n    while(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();return f?-x:x;\n}void W(int x){if(x>9)W(x/10);putchar(x%10+'0');}bool cmp(int x,int y){return size[x]<size[y];}\nvoid ins(int x){u=0;for(int i=len[x]-1;i>=0;i--){c=s[x][i]-'a';if(!t[u][c])t[u][c]=++tot;u=t[u][c];}flag[u]=x;}\nvoid pre(int x){for(int i=0;i<26;i++)if(v=t[x][i]){if(!flag[v])f[v]=cz(x);else e[flag[cz(x)]].push_back(flag[v]);pre(v);}}\nvoid dfs(int x){size[x]=1;for(int i=0;i<e[x].size();i++){dfs(e[x][i]);size[x]+=size[e[x][i]];}sort(e[x].begin(),e[x].end(),cmp);}\nvoid ask(int x){id[x]=cnt++;for(int i=0;i<e[x].size();i++){ans+=cnt-id[x];ask(e[x][i]);}}\nsigned main(){\n    n=R();for(int i=1;i<=n;i++)cin>>s[i],len[i]=s[i].length();for(int i=1;i<=n;i++)ins(i);\n    for(int i=1;i<=tot;i++)f[i]=i;pre(0);dfs(0);ask(0);cout<<ans<<endl;return 0;\n}\n```",
        "postTime": 1648558974,
        "uid": 540715,
        "name": "A_I_Skeleton",
        "ccfLevel": 0,
        "title": "P3294"
    }
]