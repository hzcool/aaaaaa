[
    {
        "content": "# Description\n\n\u6709 $n$ \u4e2a\u5b57\u7b26\u4e32 $S_1, S_2, \\cdots, S_n$\u3002\u4ee5\u53ca\u4e00\u4e2a\u5b57\u5178 $T$\uff0c\u4e00\u5f00\u59cb\u5b57\u5178 $T$ \u4e3a\u7a7a\u3002\n\n\u63a5\u4e0b\u6765\u6709 $q$ \u4e2a\u64cd\u4f5c\uff0c\u64cd\u4f5c\u5305\u542b\u4ee5\u4e0b\u4e24\u79cd\uff1a\n\n- `1 P`\uff1a\u5411\u5b57\u5178 $T$ \u4e2d\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32 $P$\u3002\n- `2 x`\uff1a\u8bf7\u4f60\u6c42\u51fa $S_x$ \u662f\u5b57\u5178 $T$ \u4e2d\u591a\u5c11\u4e2a\u4e32\u7684\u5b50\u4e32\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leq n, q \\leq 10^5$\uff0c\u5b57\u7b26\u96c6\u4e3a\u5c0f\u5199\u5b57\u6bcd\u96c6\uff0c\u5b57\u7b26\u4e32\u603b\u957f $\\leq 2 \\times 10^6$\u3002   \n\u65f6\u7a7a\u9650\u5236\uff1a$4000 \\ \\text{ms} / 500 \\ \\text{MiB}$\u3002\n\n# Solution\n\n\u64cd\u4f5c 2 \u662f\u4e00\u4e2a\u591a\u6a21\u5339\u914d\u95ee\u9898\u3002\n\n\u8003\u8651\u5c06 $S_1, S_2, \\cdots, S_n$ \u5efa\u51fa AC \u81ea\u52a8\u673a\u3002  \n\u5bf9 AC \u81ea\u52a8\u673a\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9 $u$\uff0c\u6c42\u51fa\u5b83\u7684\u5931\u914d\u6307\u9488 $fail_u$\uff0c\u5c06 $fail_u \\to u$ \u8fde\u8fb9\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u68f5 $fail$ \u6811\u3002\n\n\u5bf9\u4e8e\u5b57\u5178 $T$ \u4e2d\u65b0\u63d2\u5165\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32 $P$\uff0c\u8003\u8651\u6c42 $P$ \u5bf9 $S_1, S_2, \\cdots, S_n$ \u4e2d\u7684\u54ea\u4e9b\u5b57\u7b26\u4e32\u9020\u6210\u8d21\u732e\u3002\n\n\u8003\u8651\u6587\u672c\u4e32 $P$ \u5339\u914d\u7684\u8fc7\u7a0b\uff1a$P$ \u5728 AC \u81ea\u52a8\u673a\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e00\u4e2a\u5b57\u7b26\u8d70\u7684\u8fc7\u7a0b\uff0c\u76f8\u5f53\u4e8e\u679a\u4e3e\u4e86\u4e00\u4e2a\u524d\u7f00\uff0c\u4efb\u610f\u65f6\u523b\u5728 AC \u81ea\u52a8\u673a\uff08trie \u56fe\uff09\u4e0a\u8d70\u5230\u7684\u8282\u70b9 $u$ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4e3a\u8be5\u524d\u7f00\u4e0e\u81ea\u52a8\u673a\u5339\u914d\u7684\u6700\u957f\u540e\u7f00\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8003\u8651\u5728 $u$ \u8282\u70b9\u8fd9\u4e2a\u4f4d\u7f6e\u5411\u4e0a\u8df3 $fail$ \u6307\u9488\uff0c\u6839\u636e $fail$ \u6307\u9488\u7684\u5b9a\u4e49\uff0c\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u90fd\u662f $P$ \u7684\u5b50\u4e32\u3002\n\n\u8bbe $P$ \u5728 AC \u81ea\u52a8\u673a\u4e0a\u4f9d\u6b21\u8d70\u5230\u4e86\u8282\u70b9 $u_1, u_2, \\cdots, u_k$\u3002  \n\u90a3\u4e48 $P$ \u5728 AC \u81ea\u52a8\u673a\u4e0a\u80fd\u5339\u914d\u5230\u7684\u5b50\u4e32\u4f4d\u4e8e $u_1, u_2, \\cdots, u_k$ \u5728 $fail$ \u6811\u4e0a\u5230\u6839\u8282\u70b9\u4e0a\u7684\u94fe\u7684\u70b9\u96c6\u5e76\u3002  \n\u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u662f\u5c06\u8be5\u70b9\u96c6\u5185\u7684\u6240\u6709\u70b9\u7684\u7b54\u6848\u52a0\u4e0a $1$\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6811\u94fe\u6c42\u5e76\u3002\n\n\u6ce8\u610f\u5230\u6839\u8282\u70b9\u662f\u56fa\u5b9a\u7684\uff0c\u53ef\u4ee5\u8003\u8651\u5c06 $u_1, u_2, \\cdots, u_k$ \u6309\u7167\u5728 $fail$ \u6811\u4e2d\u7684 dfs \u5e8f\u6392\u5e8f\u540e\uff0c\u505a\u4e0b\u9762\u7684\u4e8b\u60c5\uff1a\n\n- \u5bf9\u4e8e\u6bcf\u4e2a $1 \\leq i \\leq k$\uff0c\u5c06 $u_i$ \u5728 $fail$ \u6811\u4e0a\u5230\u6839\u8282\u70b9\u4e0a\u7684\u94fe\u7684\u6240\u6709\u70b9\u7684\u7b54\u6848\u52a0\u4e0a $1$\u3002\n- \u5bf9\u4e8e\u6bcf\u4e2a $1 \\leq i < k$\uff0c\u5c06 $\\text{lca}(u_i, u_{i + 1})$ \u5728 $fail$ \u6811\u4e0a\u5230\u6839\u8282\u70b9\u4e0a\u7684\u94fe\u7684\u6240\u6709\u70b9\u7684\u7b54\u6848\u51cf\u53bb $-1$\u3002\n\n\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\uff1a\" \u8def\u5f84\u52a0 \" & \" \u5355\u70b9\u6c42\u503c \"\u3002  \n\u53ef\u4ee5\u4f7f\u7528**\u6811\u4e0a\u5dee\u5206**\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\" \u5355\u70b9\u52a0 \" & \" \u5b50\u6811\u6c42\u548c \"\u3002\n\n\u5229\u7528\u5728 dfs \u5e8f\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u5b9e\u73b0\u4e0a\u8ff0\u64cd\u4f5c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5373\u4e3a\u7ebf\u6027\u5bf9\u6570\uff08\u7ebf\u6027\u51fd\u6570\u4e58\u4e0a\u5bf9\u6570\u51fd\u6570\uff09\u3002\n\n# Code\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue> \n\nusing namespace std;\n\nconst int N = 100100, SIZE = 2001000;\n\nint n, m;\n\nchar S[N]; \n\nint cT = 1;\nstruct AC {\n\tint trans[26];\n\tint fail;\n} t[SIZE];\n\nint End[N];\n\nvoid insert(char *S, int id) {\n\tint p = 1, len = strlen(S + 1);\n\tfor (int i = 1; i <= len; i ++) {\n\t\tint v = S[i] - 'a';\n\t\tif (!t[p].trans[v]) t[p].trans[v] = ++ cT;\n\t\tp = t[p].trans[v];\n\t}\n\tEnd[id] = p;\n}\n\nvoid GetFail() {\n\tfor (int i = 0; i < 26; i ++)\n\t\tt[0].trans[i] = 1;\n\n\tqueue<int> q;\n\tq.push(1), t[1].fail = 0;\n\n\twhile (q.size()) {\n\t\tint u = q.front(); q.pop();\n\t\tfor (int i = 0; i < 26; i ++) {\n\t\t\tif (t[u].trans[i])\n\t\t\t\tt[t[u].trans[i]].fail = t[t[u].fail].trans[i], q.push(t[u].trans[i]);\n\t\t\telse\n\t\t\t\tt[u].trans[i] = t[t[u].fail].trans[i];\n\t\t}\n\t}\n}\n\nint tot, head[SIZE], ver[SIZE], Next[SIZE];\n\nvoid addedge(int u, int v) {\n\tver[++ tot] = v;    Next[tot] = head[u];    head[u] = tot;\n}\n\nint d[SIZE];\nint size[SIZE];\nint son[SIZE];\n\nvoid dfs1(int u) {\n\tsize[u] = 1;\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\td[v] = d[u] + 1;\n\t\tdfs1(v);\n\t\tsize[u] += size[v];\n\t\tif (size[v] > size[son[u]]) son[u] = v;\n\t}\n}\n\nint ovo, dfn[SIZE];\nint top[SIZE];\n\nvoid dfs2(int u) {\n\tdfn[u] = ++ ovo;\n\n\tif (son[u]) {\n\t\ttop[son[u]] = top[u];\n\t\tdfs2(son[u]);\n\t}\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (v == son[u]) continue; \n\t\ttop[v] = v;\n\t\tdfs2(v);\n\t}\n}\n\nint lca(int x, int y) {\n\twhile (top[x] != top[y]) {\n\t\tif (d[top[x]] > d[top[y]]) swap(x, y);\n\t\ty = t[top[y]].fail;\n\t}\n\tif (d[x] > d[y]) swap(x, y);\n\treturn x;\n}\n\nint c[SIZE];\n\nvoid add(int x, int val) {\n\tfor (; x <= cT; x += x & -x) c[x] += val;\n}\n\nint ask(int x) {\n\tint ans = 0;\n\tfor (; x; x -= x & -x) ans += c[x];\n\treturn ans;\n}\n\nint seq[SIZE];\n\nbool cmp(int i, int j) {\n\treturn dfn[i] < dfn[j];\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\n\tfor (int i = 1; i <= n; i ++) {\n\t\tscanf(\"%s\", S + 1);\n\t\tinsert(S, i);\n\t}\n\n\tscanf(\"%d\", &m);\n\n\tGetFail();\n\n\tfor (int i = 2; i <= cT; i ++)\n\t\taddedge(t[i].fail, i); \n\n\td[1] = 1, dfs1(1);\n\ttop[1] = 1, dfs2(1);\n\n\twhile (m --) {\n\t\tint opt, x;\n\t\tscanf(\"%d\", &opt);\n\n\t\tswitch (opt) {\n\t\t\tcase 1: {\n\t\t\t\tscanf(\"%s\", S + 1);\n\n\t\t\t\tint p = 1, len = strlen(S + 1);\n\t\t\t\tfor (int i = 1; i <= len; i ++) {\n\t\t\t\t\tint v = S[i] - 'a';\n\t\t\t\t\tp = t[p].trans[v];\n\t\t\t\t\tseq[i] = p;\n\t\t\t\t}\n\n\t\t\t\tsort(seq + 1, seq + 1 + len, cmp);\n\n\t\t\t\tfor (int i = 1; i <= len; i ++) {\n\t\t\t\t\tint p = seq[i];\n\t\t\t\t\tadd(dfn[p], 1);\n\t\t\t\t} \n\n\t\t\t\tfor (int i = 1; i < len; i ++) {\n\t\t\t\t\tint p = seq[i], q = seq[i + 1];\n\t\t\t\t\tadd(dfn[lca(p, q)], -1);\n\t\t\t\t} \n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 2: {\n\t\t\t\tscanf(\"%d\", &x);\n\t\t\t\tint p = End[x];\n\t\t\t\tprintf(\"%d\\n\", ask(dfn[p] + size[p] - 1) - ask(dfn[p] - 1));\n\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t} \n\n\treturn 0;\n}\n```",
        "postTime": 1614326516,
        "uid": 129578,
        "name": "Calculatelove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5840\u3010[COCI2015] Divljak\u3011"
    },
    {
        "content": "~~\u9996\u5148\u7ed9\u70c8\u58eb\u642c\u9898\u4eba\u4e0a\u9999~~\n\n\u5927\u6982\u662f\u8003\u8651\uff0c\u53cd\u6b63\u662f\u5339\u914d\u95ee\u9898\u2014\u2014\u90a3\u4e48\u662f\u5bf9\u7740 $\\rm T$ \u5efa\u81ea\u52a8\u673a\u5462\uff0c\u8fd8\u662f\u5bf9 $\\rm \\{S_n\\}$ \u5efa\u3002 \u8003\u8651 AC \u81ea\u52a8\u673a\u66f4\u9002\u5408\u505a\u8fd9\u79cd\u5339\u914d\u9898\uff0c\u4e8e\u662f\u5927\u6982\u60f3\u5230\u8981\u62ff AC \u81ea\u52a8\u673a\u505a\uff1b\u8003\u8651\u5982\u679c\u5bf9\u7740 $\\rm T$ \u5efa\u81ea\u52a8\u673a\uff0c\u6811\u7684\u5f62\u6001\u4f1a\u53d8\uff0c$\\rm S$ \u7684\u4fe1\u606f\u9700\u8981\u52a8\u6001\u7ef4\u62a4\uff0c\u5e76\u4e0d\u5f88\u597d\u505a\uff0c\u4e8e\u662f\u8003\u8651\u5bf9 $\\rm S$ \u5efa\u81ea\u52a8\u673a $\\rm AC_s$\u3002\n\n\u8003\u8651\u8fd9\u6837\u505a\uff0c\u5c31\u9700\u8981\u5728\u5df2\u7ecf\u5efa\u597d\u7684\u81ea\u52a8\u673a\u4e0a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u52a0\u8fdb\u6765\u7684 $P$ \u8ba1\u7b97\u8d21\u732e\u3002\u90a3\u4e48\u4f1a\u88ab $P$ \u5305\u542b\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u5b9a\u662f $P$ \u5728 $\\rm AC_s$ \u91cc\u5339\u914d\u7684 $endpos$ \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e2a\u70b9\uff0c\u5230\u6839\u7684\u94fe\u4e0a\u7684\u70b9\u96c6\u5e76\u3002\u66b4\u529b\u662f $n^2$ \u7684\uff0c\u8003\u8651\u5982\u4f55\u5feb\u901f\u8ba1\u7b97\u8fd9\u4e2a\u8d21\u732e\uff0c\u53d1\u73b0\u80fd\u505a\u5230\u6700\u5feb\u7684\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u7ef4\u62a4 dfs \u5e8f\u7684\u65b9\u5f0f\u6c42\u51fa\u70b9\u96c6\u5e76\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fd9\u6837\u7684\u94fe\u7684\u5e76\u6253\u4e00\u4e2a\u6807\u8bb0\u3002\u8be2\u95ee\u7684\u65f6\u5019\u53ea\u9700\u8981\u56de\u7b54\u4e00\u4e0b\u5b50\u6811\u5185\u6709\u591a\u5c11\u4e2a\u70b9\u88ab\u6253\u4e86\u4e0d\u540c\u7684\u6807\u8bb0\u3002\n\n\u53d1\u73b0\u300c\u7ef4\u62a4\u6811\u94fe\u6807\u8bb0\u300d+\u300c\u5b50\u6811\u6c42\u548c\u300d\uff0c\u6700\u5feb\u901f\u7684\u65b9\u6cd5\u662f\u7ef4\u62a4\u5dee\u5206\u3002\u540c\u65f6\u7531\u4e8e\u662f\u52a8\u6001\u7684\uff0c\u53ef\u4ee5\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u6216\u8005 BIT \u5feb\u901f\u7ef4\u62a4\u3002\n\n\u8003\u8651\u4fee\u6539\u5982\u4f55\u8fdb\u884c\u3002\u53d1\u73b0\u4e3a\u4e86\u4fdd\u8bc1 $\\and$ \u5f62\u6001\u7684\u94fe\u53ea\u4f1a\u88ab\u8ba1\u6570\u4e00\u6b21\uff0c\u9700\u8981\u5728 $lca$ \u5904\u5dee\u5206\u3002\u6b64\u5904\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8981\u5bf9 $dfs$ \u5e8f\u6392\u5e8f\u4e4b\u540e\uff0c\u518d\u9010\u4e2a\u5dee\u5206\uff0c\u65b9\u6cd5\u662f $(i,+1),(i+1,+1),(lca_{i,i+1},-1)$ \u3002\n\n\u60f3\u4e86\u534a\u5929\u624d\u5927\u7ea6\u660e\u767d\u4e3a\u4ec0\u4e48\u8981\u6309 dfs \u5e8f\u6392\u4e00\u904d\u5e8f\u3002\u5927\u6982\u662f\u5982\u679c\u4e0d\u6309 dfs \u5e8f\u7684\u987a\u5e8f\u679a\u4e3e\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u67d0\u4e2a\u5b50\u6811\u672a\u88ab\u6210\u529f\u6253\u4e0a\u6807\u8bb0\u7684\u60c5\u51b5\u3002\n\n\u6700\u7ec8\u590d\u6742\u5ea6\u662f $O(\\rm |S|\\log |S|)$ \u7684\uff0c\u8dd1\u7684\u4e0d\u662f\u5f88\u5feb\u3002\n\n\u54e6\uff0c\u5bf9\uff0c`_end`\u662f\u5173\u952e\u5b57\uff0c\u5343\u4e07\u522b\u5fd8\u4e86\u3002\n\n```cpp\n#define Sigma 27\n#define il inline\n#define MAXN 2000010\n\nusing namespace std ;\n\nchar S[MAXN] ;\nint T, M, N, L[MAXN] ;\nstruct Edge{\n    int to, next ;\n    #define to(k) E[k].to\n    #define next(k) E[k].next\n}E[MAXN] ; int head[MAXN], base[MAXN], cnt, tot ;\nint _ed[MAXN], dfn[MAXN], rgl[MAXN], rgr[MAXN], tp ;\nint sz[MAXN], dep[MAXN], fa[MAXN], top[MAXN], son[MAXN], val[MAXN] ;\n\nvoid add(int u, int v){\n    E[++ cnt].to = v, E[cnt].next = head[u], head[u] = cnt ;\n}\nvoid dfs(int u){\n    sz[u] = 1, dep[u] = dep[fa[u]] + 1 ;\n    for (int k = head[u] ; k ; k = next(k)){\n        fa[to(k)] = u, dfs(to(k)), sz[u] += sz[to(k)] ;\n        if (!son[u] || sz[to(k)] > sz[son[u]]) son[u] = to(k) ;\n    }\n}\nvoid dfs2(int u, int tp){\n    top[u] = tp,\n    dfn[u] = rgl[u] = ++ tot ;\n    if (son[u]) dfs2(son[u], tp) ;\n    for (int k = head[u] ; k ; k = next(k))\n        if (to(k) != son[u]) dfs2(to(k), to(k)) ;\n    rgr[u] = tot ;\n}\nil bool comp(int x, int y){ return dfn[x] < dfn[y] ; }\nint lca(int u, int v){\n    while (top[u] != top[v]){\n        if (dep[top[u]] >= dep[top[v]]) u = fa[top[u]] ;\n        else v = fa[top[v]] ;\n    }\n    return dep[u] < dep[v] ? u : v ;\n}\n\nvoid _up(int rt){\n    val[rt] = val[rt << 1] + val[rt << 1 | 1] ;\n}\nvoid update(int rt, int l, int r, int p, int v){\n    if (l == r)\n        return val[rt] += v, void() ;\n    int mid = (l + r) >> 1 ;\n    if (mid >= p)\n        update(rt << 1, l, mid, p, v) ;\n    else update(rt << 1 | 1, mid + 1, r, p, v) ;\n    _up(rt) ;\n}\nint query(int rt, int l, int r, int pl, int pr){\n\tif (pl > pr) return 0 ; \n    if (l >= pl && pr >= r) return val[rt] ;\n    int mid = (l + r) >> 1, res = 0 ;\n    if (pl <= mid) res += query(rt << 1, l, mid, pl, pr) ;\n    if (pr > mid) res += query(rt << 1 | 1, mid + 1, r, pl, pr) ;\n    return res ;\n}\nstruct ACAM{\n    queue <int> q ;\n    int _size, fail[MAXN] ;\n    int trie[MAXN][Sigma] ;\n    void insert(char *s, int n){\n        int rt = 0, x ;\n        for (int i = 1 ; i <= L[n] ; ++ i){\n            x = s[i] - 'a' ;\n            if (!trie[rt][x])\n                trie[rt][x] = ++ _size ;\n            rt = trie[rt][x] ;\n        }\n        _ed[n] = rt ;\n    }\n    void build(){\n        for (int i = 0 ; i < Sigma ; ++ i)\n            if (trie[0][i]) q.push(trie[0][i]) ;\n        while (!q.empty()){\n            int n = q.front() ; add(fail[n], n), q.pop() ;\n            for (int i = 0 ; i < 26 ; ++ i){\n                if (!trie[n][i]) trie[n][i] = trie[fail[n]][i] ;\n                else fail[trie[n][i]] = trie[fail[n]][i], q.push(trie[n][i]) ;\n            }\n        }\n    }\n    void solve(char *S){\n        int x, rt = 0 ; tp = 0 ;\n        for (int i = 1 ; i <= N ; ++ i)\n            x = S[i] - 'a', rt = trie[rt][x], base[++ tp] = rt ;\n        sort(base + 1, base + tp + 1, comp),\n        tp = unique(base + 1, base + tp + 1) - base - 1 ;\n        for (int i = 1 ; i <= tp ; ++ i){\n            update(1, 1, tot, dfn[base[i]], 1) ;\n            if (i > 1) update(1, 1, tot, dfn[lca(base[i], base[i - 1])], -1) ;\n        }\n    }\n}AC ;\n\nint qr(){\n    int r = 0 ; char c = getchar() ;\n    while (!isdigit(c)) c = getchar() ;\n    while (isdigit(c)) r = (r << 1) + (r << 3) + c - 48, c = getchar() ;\n    return r ;\n}\nint main(){\n    // freopen(\"1.in\", \"r\", stdin) ;\n    // freopen(\"1.ans\", \"w\", stdout) ;\n    cin >> T ; int m, q ;\n    for (int i = 1 ; i <= T ; ++ i)\n        scanf(\"%s\", S + 1), L[i] = strlen(S + 1), AC.insert(S, i) ;\n    AC.build() ; cin >> M ; dfs(0), dfs2(0, 0) ;\n//    for (int i = 1 ; i <= T ; ++ i) cout << rgl[i] << \" \" << rgr[i] << endl ;\n    while (M --){\n        m = qr() ;\n        if (m == 1) scanf(\"%s\", S + 1), N = strlen(S + 1), AC.solve(S) ;\n        else q = qr(),\n            printf(\"%d\\n\", query(1, 1, tot, 1, rgr[_ed[q]]) - query(1, 1, tot, 1, rgl[_ed[q]] - 1)) ;\n    }\n    return 0 ; \n}\n\n```\n\n\u5410\u69fd\n\n* \u4e3a\u5565`lxl`\u5e38\u6570\u8fd9\u4e48\u5c0f\u554a\uff08\n\n* `_end`\u8fd9\u4e1c\u897f\u4e00\u8c03\u4e00\u4e0a\u5348\u554aqaq\n",
        "postTime": 1576807828,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5840 \u3010[COCI2015] Divljak\u3011"
    },
    {
        "content": "~~\u54a6\uff1f\u9000\u5f79\u9009\u624b\u8bc8\u5c38\u4e86\uff1f~~\n\n\u4e00\u9053\u4e0e AC \u81ea\u52a8\u673a\u4e0e\u6811\u8bba\u7ed3\u5408\u7684\u9898\u3002\n\n\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u5c06 $s_i$ \u548c\u6240\u6709\u65b0\u52a0\u8fdb\u6765\u7684\u5b57\u7b26\u4e32\u4e00\u8d77\u641e\u51fa\u4e00\u4e2a AC \u81ea\u52a8\u673a\u51fa\u6765\uff0c\u7136\u540e\u53d1\u73b0\u4e0d\u592a\u884c\u3002\n\n\u4e0d\u59a8\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u53ea\u5bf9 $s_i$ \u5efa AC \u81ea\u52a8\u673a\uff0c\u5e76\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b0\u52a0\u8fdb\u6765\u7684\u5b57\u7b26\u4e32 $t$\uff0c\u6c42\u51fa\u5b83\u7684\u8d21\u732e\u3002\n\n\u5f53\u6211\u4eec\u63d2\u5165\u4e00\u4e2a $t$\uff0c\u5c31\u7528\u5b83\u5728 AC \u81ea\u52a8\u673a\u4e0a\u5339\u914d\uff0c\u5047\u8bbe\u5339\u914d\u7ecf\u8fc7\u7684\u8282\u70b9\u4e3a $p_1,p_2,\\dots,p_{|t|}$\u3002\n\n\u548c\u4e0a\u9898\u7c7b\u4f3c\uff0c\u8fd9\u4e9b\u70b9\u5728 fail \u6811\u4e0a\u7684\u7956\u5148\u90fd\u5728 $t$ \u4e2d\u51fa\u73b0\u8fc7\u4e86\uff0c\u5c06\u5b83\u4eec\u5bf9\u5e94\u7684\u503c $+1$\u3002\n\n\u6bd4\u8f83\u9ebb\u70e6\u7684\u4e00\u4e2a\u5730\u65b9\u662f\uff0c\u672c\u9898\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u591a\u53ea\u8ba1\u7b97\u4e00\u6b21\u8d21\u732e\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u4ee4 $\\cup_{i=1}^{|t|}P(p_i)$ \u52a0 $1$\uff0c\u5176\u4e2d $P(i)$ \u4e3a $i$ \u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u8282\u70b9\u7684\u96c6\u5408\u3002\n\n\u6b64\u65f6\u5c31\u8981\u7528\u5230\u4e00\u70b9\u6811\u8bba\u7684\u6280\u5de7\u4e86\uff0c\u501f\u9274 [Gym 102082](https://codeforces.ml/gym/102082) J Colorful Tree \u7684\u6280\u5de7\uff0c\u6211\u4eec\u5c06\u8fd9 $|t|$ \u4e2a\u8282\u70b9\u6309 dfs \u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u5728 $p_i$ \u6253\u4e0a\u6807\u8bb0 $1$\uff0c\u5e76\u5728 $\\operatorname{lca}(p_i,p_{i+1})$ \u4e0a\u6253\u4e0a $-1$\u3002\n\n\u6811\u72b6\u6570\u7ec4\u8ba1\u7b97\u7b54\u6848\uff0c\u590d\u6742\u5ea6\u7ebf\u6027\u5bf9\u6570\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define fz(i,a,b) for(int i=a;i<=b;i++)\n#define fd(i,a,b) for(int i=a;i>=b;i--)\n#define ffe(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define fill0(a) memset(a,0,sizeof(a))\n#define fill1(a) memset(a,-1,sizeof(a))\n#define fillbig(a) memset(a,63,sizeof(a))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\ntemplate<typename T1,typename T2> void chkmin(T1 &x,T2 y){if(x>y) x=y;}\ntemplate<typename T1,typename T2> void chkmax(T1 &x,T2 y){if(x<y) x=y;}\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntemplate<typename T> void read(T &x){\n\tchar c=getchar();T neg=1;\n\twhile(!isdigit(c)){if(c=='-') neg=-1;c=getchar();}\n\twhile(isdigit(c)) x=x*10+c-'0',c=getchar();\n\tx*=neg;\n}\nconst int MAXN=1e5;\nconst int MAXL=2e6;\nconst int ALPHA=26;\nconst int LOG_L=25;\nint n,q,ch[MAXL+5][ALPHA+2],ncnt=0,fail[MAXL+5],ed[MAXN+5];\nchar buf[MAXL+5];\nvoid insert(char *s,int id){\n\tint len=strlen(s+1),cur=0;\n\tfor(int i=1;i<=len;i++){\n\t\tif(!ch[cur][s[i]-'a']) ch[cur][s[i]-'a']=++ncnt;\n\t\tcur=ch[cur][s[i]-'a'];\n\t} ed[id]=cur;\n}\nvoid getfail(){\n\tqueue<int> q;\n\tfor(int i=0;i<ALPHA;i++) if(ch[0][i]) q.push(ch[0][i]);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=0;i<ALPHA;i++){\n\t\t\tif(ch[x][i]) fail[ch[x][i]]=ch[fail[x]][i],q.push(ch[x][i]);\n\t\t\telse ch[x][i]=ch[fail[x]][i];\n\t\t}\n\t}\n}\nint to[MAXL+5],nxt[MAXL+5],hd[MAXL+5],ec=0;\nvoid adde(int u,int v){to[++ec]=v;nxt[ec]=hd[u];hd[u]=ec;}\nint bgt[MAXL+5],edt[MAXL+5],tim=0,fa[MAXL+5][LOG_L+2],dep[MAXL+5];\nvoid dfs(int x){bgt[x]=++tim;for(int e=hd[x];e;e=nxt[e]) dep[to[e]]=dep[x]+1,dfs(to[e]);edt[x]=tim;}\nint getlca(int x,int y){\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=LOG_L;~i;i--) if(dep[x]-(1<<i)>=dep[y]) x=fa[x][i];\n\tif(x==y) return x;\n\tfor(int i=LOG_L;~i;i--) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nstruct fenwick_tree{\n\tint t[MAXL+5];\n\tvoid add(int x,int v){for(int i=x;i<=ncnt+1;i+=(i&(-i))) t[i]+=v;}\n\tint query(int x){int ret=0;for(int i=x;i;i-=(i&(-i))) ret+=t[i];return ret;}\n\tint query(int l,int r){return query(r)-query(l-1);} \n} w;\nint pt[MAXL+5],ptn=0;\nbool cmp(int x,int y){return bgt[x]<bgt[y];}\nint main(){\n\tread(n);\n\tfor(int i=1;i<=n;i++) scanf(\"%s\",buf+1),insert(buf,i);\n\tread(q);getfail();\n\tfor(int i=1;i<=ncnt;i++) adde(fail[i],i),fa[i][0]=fail[i];dfs(0);\n\tfa[0][0]=-1;\n//\tfor(int i=0;i<=ncnt;i++) printf(\"%d %d\\n\",bgt[i],edt[i]);\n\tfor(int i=1;i<=LOG_L;i++) for(int j=0;j<=ncnt;j++) fa[j][i]=fa[fa[j][i-1]][i-1];\n\twhile(q--){\n\t\tint opt;scanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tscanf(\"%s\",buf+1);int len=strlen(buf+1);\n\t\t\tptn=0;for(int i=1;i<=len;i++) ptn++,pt[ptn]=ch[pt[ptn-1]][buf[i]-'a'];\n\t\t\tsort(pt+1,pt+ptn+1,cmp);ptn=unique(pt+1,pt+ptn+1)-pt-1;\n\t\t\tfor(int i=1;i<=ptn;i++) w.add(bgt[pt[i]],1);\n\t\t\tfor(int i=1;i<ptn;i++) w.add(bgt[getlca(pt[i],pt[i+1])],-1);\n\t\t\tfor(int i=1;i<=ptn;i++) pt[i]=0;\n\t\t} else {\n\t\t\tint x;scanf(\"%d\",&x);printf(\"%d\\n\",w.query(bgt[ed[x]],edt[ed[x]]));\n\t\t}\n\t}\n\treturn 0;\n}\n/*\n3\na\nb\nab\n7\n1 abc\n1 ba\n1 aa\n1 bb\n2 1\n2 2\n2 3\n*/\n```",
        "postTime": 1607783230,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5840 \u3010[COCI2015]Divljak\u3011"
    },
    {
        "content": "[\u6211\u7684blog](https://www.cnblogs.com/wangjunrui/p/12321083.html)\n> > \u9898\u76ee\u94fe\u63a5\uff1a[\u6d1b\u8c37P5840 [COCI2015]Divljak](https://www.luogu.com.cn/problem/P5840)\n\n\n$$preface$$\n\n\u4e00\u9053AC\u81ea\u52a8\u673a+LCA+\u6811\u94fe\u5256\u5206+\u6811\u4e0a\u5dee\u5206+\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u6076\u5fc3\u9898\n\n$$description$$\n\n\u9996\u5148\u7406\u89e3trie\uff0c\u6811\u4e0a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5230\u8ddf\u8282\u70b9\u662f\u63d2\u5165\u4e32\u7684\u524d\u7f00\uff0c\u800c$nxt$\u6307\u9488\u662f\u6307\u5411\u8fd9\u4e2a\u524d\u7f00\u7684\u540e\u7f00\u3002\n\n\u6211\u4eec\u5efa\u4e00\u68f5\u5173\u4e8e\u8fd9\u6837\u7684\u6811\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0a\u7684\u6240\u6709\u8282\u70b9\u5230\u6839\u90fd\u662f\u628a\u5176\u8fd9\u4e2a\u8282\u70b9\u5f53\u505a\u540e\u7f00\uff0c\u90a3\u6211\u4eec\u5c31\u5efa\u4e00\u68f5\u6811\u3002\n\n\u5148\u5c06$S$\u4e32\u96c6\u5408\u5efa\u4e00\u4e2aAC\u81ea\u52a8\u673a\n\n\u7136\u540e\u5c06$(nxt[u],u)$\u63d2\u5165\u8fd9\u6761\u6811(\u662f\u53e6\u5efa\u4e00\u68f5\u6811\uff0c\u4e0d\u662fAC\u81ea\u52a8\u673a\u7684Trie\u6811)\u7684\u8fb9\uff0c\u663e\u7136\u5982\u679c$nxt[u]=0$\u8fde\u5411\u7684\u662f\u6839\u8282\u70b9\n(\u6211\u7684\u4ee3\u7801\u6839\u8282\u70b9\u662f$0$\uff0c\u6240\u4ee5\u4e0d\u505a\u5224\u65ad)\u3002\n\n\u63a5\u7740\u518d\u5c06\u5efa\u597d\u7684\u90a3\u68f5\u6811\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684$dfs$\u5e8f\u3002\n\n\u6211\u4eec\u7528\u5230\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\uff0c\u7136\u540e\u628a\u8981\u63d2\u5165\u7684$T$\u96c6\u5408\u5728$Trie$\u6811\u4e2d\u7edf\u8ba1\u8d70\u8fc7\u7684\u8282\u70b9\uff0c\u8bb0\u5f55\u4e0b\u6765\uff0c\u518d\u6309$dfn$\u6392\u5e8f\uff0c\u5c06\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u5728\u6811\u4e0a\u7684\u4f4d\u7f6e$+1$\uff0c\u8868\u793a\u591a\u4e00\u4e2a\u4e32\u5339\u914d\uff0c\u4f46\u662f\u4ed6\u4eec\u7684$LCA$\u548c$LCA$\u7684\u7956\u5148\u5f88\u660e\u663e\u662f$+2$\u4e32\u5339\u914d\uff0c\u4e0d\u7b26\u5408\u6211\u4eec\u6b64\u4e32\u5728$T$\u96c6\u5408\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6240\u4ee5\u5c06\u4e24\u4e2a\u8282\u70b9\u7684$LCA$\u7684\u4f4d\u7f6e\u6807\u8bb0$-1$\u3002\n\n\u5bf9\u4e8e\u6b64\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7edf\u8ba1\u7b54\u6848\uff0c\u5c06\u6b64\u6811\u6811\u94fe\u5256\u5206\u540e\uff0c\u6309\u6bcf\u4e2a\u8282\u70b9\u7684dfs\u5e8f\u7ef4\u62a4\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8dd1$LCA$\uff0c\u5219$S$\u4e32\u5728$T$\u96c6\u5408\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5176\u8282\u70b9\u548c\u5176\u5b50\u6811\u7684\u4e4b\u548c\u3002\n$$code$$\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cassert>\n#include <algorithm>\n#define re register\nusing namespace std;\nconst int N=2e6+5,M=1e5+5;\nint ch[N][26],nxt[N],tot;\nint pos[M];\ninline void insert(char *s,int id)\n{\n\tint u=0;\n\tfor(re int i=0; s[i]; ++i)\n\t{\n\t\tint c=s[i]-'a';\n\t\tif(!ch[u][c])\n\t\t\tch[u][c]=++tot;\n\t\tu=ch[u][c];\n\t}\n\tpos[id]=u;\n}\nstruct Edge\n{\n\tint next,to;\n} edge[N];\nint head[N],num_edge;\ninline void add_edge(int from,int to)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\thead[from]=num_edge;\n}\ninline void build()\n{\n\tqueue<int>q;\n\tfor(re int i=0; i<26; ++i)\n\t\tif(ch[0][i])\n\t\t\tq.push(ch[0][i]);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(re int i=0; i<26; ++i)\n\t\t\tif(!ch[u][i])\n\t\t\t\tch[u][i]=ch[nxt[u]][i];\n\t\t\telse\n\t\t\t{\n\t\t\t\tq.push(ch[u][i]);\n\t\t\t\tnxt[ch[u][i]]=ch[nxt[u]][i];\n\t\t\t}\n\t}\n}\nint fa[N],top[N],dep[N],size[N],son[N];\ninline void dfs1(int u,int fa_)\n{\n\tfa[u]=fa_;\n\tsize[u]=1;\n\tdep[u]=dep[fa_]+1;\n\tfor(re int i=head[u]; i; i=edge[i].next)\n\t{\n\t\tint &v=edge[i].to;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(!son[u]||size[v]>size[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\nint dfn[N],dfstime;\ninline void dfs2(int u,int topf)\n{\n\ttop[u]=topf;\n\tdfn[u]=++dfstime;\n//\tprintf(\"%d \",u);\n\tif(!son[u])return;\n\tdfs2(son[u],topf);\n\tfor(re int i=head[u]; i; i=edge[i].next)\n\t{\n\t\tint &v=edge[i].to;\n\t\tif(v==son[u])\n\t\t\tcontinue;\n\t\tdfs2(v,v);\n\t}\n}\ninline int LCA(int x,int y)\n{\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tswap(x,y);\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tswap(x,y);\n\treturn x;\n}\nint n,q;\nchar str[N];\nint a[N];\nint lowbitsum[N];\n#define lowbit(x) (x&(-x))\ninline void update(int x,int y)\n{\n//\tassert(x>=1);\n\tfor(; x<=dfstime; x+=lowbit(x))\n\t\tlowbitsum[x]+=y;\n}\ninline int query(int x)\n{\n//\tassert(x>=1);\n\tint res=0;\n\tfor(; x; x-=lowbit(x))\n\t\tres+=lowbitsum[x];\n\treturn res;\n}\ninline bool cmp(const int &x,const int &y)\n{\n\treturn dfn[x]<dfn[y];\n}\ninline void solve1()\n{\n\tint u=0,tp=0;\n\tfor(re int i=0; str[i]; ++i)\n\t{\n\t\tu=ch[u][str[i]-'a'];\n\t\ta[++tp]=u;\n\t}\n//\tfor(re int i=1; i<=tp; ++i)\n//\t\tprintf(\"%d \",a[i]);\n\tsort(a+1,a+1+tp,cmp);\n\tbool flag=false;\n\tfor(re int i=1; i<=tp; ++i)\n\t{\n\t\tupdate(dfn[a[i]],1);\n\t\tif(flag)\n\t\t\tupdate(dfn[LCA(a[i],a[i-1])],-1);\n\t\telse\n\t\t\tflag=true;\n\t}\n}\ninline void solve2()\n{\n\tint x;\n\tscanf(\"%d\",&x);\n\tprintf(\"%d\\n\",query(dfn[pos[x]]+size[pos[x]]-1)-query(dfn[pos[x]]-1));\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(re int i=1; i<=n; ++i)\n\t{\n\t\tscanf(\"%s\",str);\n\t\tinsert(str,i);\n\t}\n\tbuild();\n//\tfor(re int i=1; i<=tot; ++i)\n//\t\tprintf(\"%d %d\\n\",nxt[i],i);\n\tfor(re int i=1; i<=tot; ++i)\n\t\tadd_edge(nxt[i],i);\n//\tprintf(\"%d\\n\",num_edge);\n\tdfs1(0,tot+1);\n\tdfs2(0,0);\n//\tprintf(\"%d\\n\",dfstime);\n//\tfor(re int i=0; i<=tot; ++i)\n//\t\tprintf(\"%d \",dfn[i]);\n\tscanf(\"%d\",&q);\n\twhile(q--)\n\t{\n\t\tint opt;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tscanf(\"%s\",str);\n\t\t\tsolve1();\n\t\t}\n\t\telse if(opt==2)\n\t\t\tsolve2();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1581912309,
        "uid": 133322,
        "name": "QwQ\u849f\u84bbwjr",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5840 \u3010[COCI2015]Divljak\u3011"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5840)\n\n------------\n\n# Solution\n\n~~\u9996\u5148\u770b\u5230\u8fd9\u9898\u5c31\u60f3SAM\u5bf9\u5427\uff0c\u7136\u540eqwaszx\u5199\u4e86\u4e00\u53d1\u5e38\u6570\u592a\u5927\u8fc7\u4e0d\u4e86\u5c31\u679c\u65ad\u6539AC\u81ea\u52a8\u673a\u5bf9\u5427\u3002~~\n\n\u8003\u8651\u5bf9$S$\u5efa\u7acb$AC$\u81ea\u52a8\u673a\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u524d\u7f00\u7684\u6240\u6709\u540e\u7f00\u662f\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b50\u4e32\uff0c\u800c$fail$\u6307\u9488\u6307\u7684\u72b6\u6001\u5c31\u662f\u8be5\u72b6\u6001\u7684\u6700\u957f\u53ef\u8bc6\u522b\u540e\u7f00\uff0c\u6240\u4ee5\u5728\u5bf9$S$\u5efa\u597d$AC$\u81ea\u52a8\u673a\u4e4b\u540e\u5c31\u628a\u63d2\u5165\u7684\u5b57\u7b26\u4e32\u6254\u5230$AC$\u81ea\u52a8\u673a\u4e0a\u8dd1\uff0c\u5b83\u80fd\u5230\u8fbe\u7684\u6240\u6709\u72b6\u6001\u5c31\u662f\u6240\u6709\u7684\u524d\u7f00\u3002\u8fd9\u6837\u518d\u5bf9\u6bcf\u4e2a\u72b6\u6001\u8df3\u6240\u6709\u7684$fail$\u6307\u9488\u5c31\u80fd\u628a\u8be5\u5b57\u7b26\u4e32\u7684\u6240\u6709\u53ef\u8bc6\u522b\u5b50\u4e32\u5728$AC$\u81ea\u52a8\u673a\u4e0a\u627e\u51fa\u6765\u4e86\u3002\n\n\u6240\u4ee5\u6bcf\u6b21\u65b0\u63d2\u5165\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u53ea\u8981\u5728$fail$\u6811\u4e0a\u628a\u6240\u6709\u7ecf\u8fc7\u7684\u72b6\u6001\u5230$root$\u7684\u94fe\u90fd\u52a0\u4e00\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u67e5\u8be5\u5b57\u7b26\u4e32\u5728$AC$\u81ea\u52a8\u673a\u4e0a\u7684\u4f4d\u7f6e\u7684\u503c\u5c31\u884c\u4e86\u3002\n\n\u76f4\u63a5\u8fd9\u6837\u505a\u4e0d\u5927\u597d\u505a\uff0c\u6240\u4ee5\u8003\u8651\u6811\u4e0a\u5dee\u5206\uff0c\u5148\u628a\u6240\u6709\u7684\u7ecf\u8fc7\u7684\u72b6\u6001\u90fd\u627e\u51fa\u6765\uff0c\u7136\u540e\u6309$dfs$\u5e8f\u6392\u5e8f\uff0c\u6bcf\u6b21\u5bf9\u6bcf\u4e2a\u72b6\u6001\u5355\u70b9\u52a0\uff0c\u5bf9\u76f8\u90bb\u72b6\u6001\u7684$lca$\u5355\u70b9\u51cf\u3002\u6700\u540e\u67e5\u8be2\u67d0\u4e2a\u70b9\u7684\u65f6\u5019\u53ea\u9700\u8981\u67e5\u8be2\u5b50\u6811\u548c\u5373\u53ef\u3002\n\n\u8003\u8651\u4e3a\u4ec0\u4e48\u6309\u7167$dfs$\u5e8f\u6392\u5e8f\uff0c\u539f\u6765\u7684\u8fd9\u4e9b\u70b9\u662f\u6742\u4e71\u65e0\u7ae0\u7684\uff0c\u5728\u6309$dfs$\u5e8f\u6392\u5e8f\u540e\u5c31\u4f1a\u6309\u7167\u4ece\u5de6\u5f80\u53f3\u7684\u987a\u5e8f\u4f9d\u6b21\u4fee\u6539\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u91cd\u4e0d\u6f0f\u3002\u5982\u679c\u5b66\u8fc7\u865a\u6811\u7684\u8bdd\u5e94\u8be5\u5f88\u5bb9\u6613\u5c31\u80fd\u7406\u89e3\u3002\n\n------------\n\n# Code\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm> \n#include <queue> \n\nusing namespace std;\n\nconst int N = 100000;\nconst int M = 2000000;\n\nint head[M + 50], num, id[N + 50], tree[M + 50], trie[M + 50][26], cnt, root, top[M + 50], maxson[M + 50], siz[M + 50], dfx[M + 50], dfxx, f[M + 50], dep[M + 50], n, tmp[M + 50], len, fail[M + 50]; \n\nchar st[M + 50];\n\nstruct Node\n{\n\tint next, to;\n} edge[M + 50];\n\nvoid Addedge(int u, int v)\n{\n\tedge[++num] = (Node){head[u], v};\n\thead[u] = num;\n\treturn;\n}\n\nvoid Insert(char st[M + 50], int bh)\n{\n\tint l = strlen(st + 1), now = root;\n\tfor (int i = 1; i <= l; i++)\n\t{\n\t\tint c = st[i] - 'a';\n\t\tif (!trie[now][c]) trie[now][c] = ++cnt;\n\t\tnow = trie[now][c]; \t\n\t} \n\tid[bh] = now;\n\treturn;\n}\n\nvoid Build_AC_auto()\n{\n\tqueue<int> q;\n\tfor (int i = 0; i <= 25; i++) if (trie[root][i]) q.push(trie[root][i]);\n\twhile (!q.empty())\t\n\t{\n\t\tint u = q.front(); q.pop();\n\t\tfor (int i = 0; i <= 25; i++)\n\t\t\tif (trie[u][i]) fail[trie[u][i]] = trie[fail[u]][i], q.push(trie[u][i]);\n\t\t\telse trie[u][i] = trie[fail[u]][i];\n\t}\n\treturn;\n}\n\nvoid Build_Fail_tree()\n{\n\tfor (int i = 1; i <= cnt; i++) Addedge(fail[i], i);\n\treturn;\n}\n\nvoid Dfs1(int x)\n{\n\tdfx[x] = ++dfxx; siz[x] = 1;\t\n\tint maxx = 0;\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to; f[v] = x; dep[v] = dep[x] + 1;\n\t\tDfs1(v);\n\t\tsiz[x] += siz[v];\n\t\tif (siz[v] > maxx) maxx = siz[v], maxson[x] = v;\n\t}\n\treturn;\n} \n\nvoid Dfs2(int x, int topf)\n{\n\ttop[x] = topf;\n\tif (!maxson[x]) return;\n\tDfs2(maxson[x], topf);\n\tfor (int i = head[x]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tif (v == maxson[x]) continue;\n\t\tDfs2(v, v);\n\t} \n\treturn;\n } \n\nint Lca(int a, int b)\n{\n\twhile (top[a] != top[b])\n\t{\n\t//\tcout << a << \" \" << b << endl;\n\t\tif (dep[top[a]] < dep[top[b]]) swap(a, b);\n\t\ta = f[top[a]];\t\n\t}\n\treturn dep[a] < dep[b] ? a : b; \n}\n\nint Lowbit(int x)\n{\n\treturn x & (-x);\n}\n\nvoid Add(int pos, int val)\n{\n\tfor (int i = pos; i <= cnt + 1; i += Lowbit(i)) tree[i] += val;\n\treturn;\n}\n\nint Query(int pos)\n{\n\tint ans = 0;\n\tfor (int i = pos; i; i -= Lowbit(i)) ans += tree[i];\n\treturn ans;\n}\n\nint Cmp(int a, int b)\n{\n\treturn dfx[a] < dfx[b];\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) scanf(\"%s\", st + 1), Insert(st, i);\n\tBuild_AC_auto(); Build_Fail_tree(); dep[0] = 1; Dfs1(0); Dfs2(0, 0);\n\tint q;\n\tscanf(\"%d\", &q); \n\tint opt, ask;\n\twhile (q--)\n\t{\n\t\tscanf(\"%d\", &opt); \n\t\tif (opt == 1)\n\t\t{\n\t\t\tscanf(\"%s\", st + 1); len = 0; \n\t\t\tint now = root, l = strlen(st + 1);\n\t\t\tfor (int i = 1; i <= l; i++)\n\t\t\t{\n\t\t\t\tint c = st[i] - 'a';\n\t\t\t\tnow = trie[now][c];\n\t\t\t\ttmp[++len] = now;\n\t\t\t}\n\t\t\tsort(tmp + 1, tmp + len + 1, Cmp);\n\t\t\tlen = unique(tmp + 1, tmp + len + 1) - tmp - 1;\n\t\t\tfor (int i = 1; i <= len; i++)\n\t\t\t{\n\t\t\t\tAdd(dfx[tmp[i]], 1);\n\t\t\t\tif (i > 1) Add(dfx[Lca(tmp[i], tmp[i - 1])], -1);\n\t\t\t} \n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\", &ask);\n\t\t\tprintf(\"%d\\n\", Query(dfx[id[ask]] + siz[id[ask]] - 1) - Query(dfx[id[ask]] - 1));\n\t\t}\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1590566338,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5840 \u3010[COCI2015]Divljak\u3011"
    },
    {
        "content": "## \u4e00.\u9898\u610f\u7b80\u8ff0\r\n\r\n- \u7ed9\u5b9a $n$ \u4e2a\u5b57\u7b26\u4e32 $S_i,i\\in [1,n]$\u3002\r\n\r\n- \u521d\u59cb\u6709\u4e00\u4e2a\u7a7a\u96c6 $T$\uff0c$q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u5f80\u96c6\u5408 $T$ \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32 $P_i$\uff0c\u6216\u8005\u7ed9\u5b9a $x$\uff0c\u8be2\u95ee\u5f53\u524d $T$ \u4e2d\u6709\u591a\u5c11\u4e2a\u4e32\u5305\u542b\u4e32 $S_x$\u3002\r\n\r\n- $n,q\\leq 10^5,\\sum S_i\\leq 2\\cdot 10^6,\\sum P_i\\leq 2\\cdot 10^6$\u3002\r\n\r\n## \u4e8c.\u89e3\u9898\u65b9\u6cd5\r\n\r\n\u5b57\u7b26\u4e32\u7684\u591a\u6a21\u5f0f\u5339\u914d\u95ee\u9898\uff0c\u4e00\u822c\u7528 AC \u81ea\u52a8\u673a\u89e3\u51b3\u3002\u719f\u6089 AC \u81ea\u52a8\u673a\u7684\u7ae5\u978b\u5e94\u8be5\u77e5\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u7684 $S$ \u4e32\u548c $T$ \u4e32\u5efa\u7acb AC \u81ea\u52a8\u673a\u3002\r\n\r\n1. \u5bf9\u4e8e\u6bcf\u6b21\u65b0\u52a0\u5165 $P_i$ \u4e32\uff0c\u6211\u4eec\u5c31\u5bf9\u5176\u5728 trie \u56fe\u4e0a\u5bf9\u5e94\u7684\u6240\u6709\u8282\u70b9\u4e0a\u90fd\u52a0\u4e0a\uff08\u4e0d\u662f\u67d3\u4e0a\uff09\u4e00\u4e2a\u989c\u8272\u7f16\u53f7\u4e3a $i$\u3002\r\n2. \u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee $S_x$\uff0c\u5373\u4e3a\u67e5\u8be2\u5728 fail \u6811\u4e0a\uff0c\u4ee5\u4e32 $S_x$ \u7684\u7ec8\u6b62\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\u90e8\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002\r\n\r\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a\u56e0\u4e3a\u4e00\u4e2a\u4e32 $S_x$ \u82e5\u5728\u67d0\u4e2a\u4e32 $P_i$ \u4e2d\u51fa\u73b0\u4e86\u591a\u6b21\uff0c\u90a3\u4e48\u5e94\u8be5\u53ea\u7edf\u8ba1\u4e00\u6b21\uff0c\u800c\u6811\u72b6\u6570\u7ec4\u662f\u65e0\u6cd5\u7ef4\u62a4\u201c\u82e5\u51fa\u73b0\u591a\u6b21\u5219\u53ea\u7edf\u8ba1\u4e00\u6b21\u201d\u7684\u64cd\u4f5c\u7684\u3002\r\n\r\n\u600e\u4e48\u89e3\u51b3\u5462\uff1f\u9700\u8981\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u5728\u6bcf\u4e2a fail \u6811\u7684\u8282\u70b9\u4e0a\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5b50\u6811\u7684\u4fe1\u606f\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u5e95\u5c42\u8282\u70b9\uff0c\u82e5\u5b83\u7684\u4e0b\u6807\u4e3a $i$\uff0c\u90a3\u4e48\u4ed6\u5c31\u8868\u793a\u5728\u8fd9\u68f5\u5b50\u6811\u4e2d\u662f\u5426\u5b58\u5728\u4e32 $P_i$ \u5728 trie \u56fe\u4e0a\u5bf9\u5e94\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u5b58\u5728\u5373\u4e3a $1$\uff0c\u4e0d\u5b58\u5728\u5373\u4e3a $0$\u3002\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u5728\u67d0\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u6c42\u524d\u7f00\u548c\u3002\r\n\r\n\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e48\u591a\u68f5\u7ebf\u6bb5\u6811\uff1f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002\u9996\u5148\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e0a\u52a0\u4e0a\u7ecf\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b57\u7b26\u4e32 $P_i$ \u6240\u5bf9\u5e94\u7684\u7f16\u53f7\uff0c\u7136\u540e\u9012\u5f52\u8ba1\u7b97\u513f\u5b50\u8282\u70b9\uff0c\u6700\u540e\u5c06\u513f\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u4e0a\u6765\u3002\u5e95\u5c42\u8282\u70b9\u5408\u5e76\u7684\u903b\u8f91\u8fd0\u7b97\u7b26\u5e94\u8be5\u662f\u201c\u6216\u201d\u800c\u4e0d\u662f\u8fd0\u7b97\u7b26\u201c\u52a0\u201d\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u51fa\u73b0\u591a\u6b21\u7684\u4e32\u53ea\u7edf\u8ba1\u4e00\u6b21\u4e86\u3002\r\n\r\nmerge \u51fd\u6570\u7684\u4ee3\u7801\uff1a( val \u6570\u7ec4\u7ef4\u62a4\u533a\u95f4\u548c\uff0cbin \u6536\u96c6\u5e9f\u5f03\u8282\u70b9\uff09 \r\n\r\n```cpp\r\nint merge(int x,int y,int l,int r){\r\n\tif(!x || !y) return x|y;\r\n\tif(l==r){\r\n    \tval[x]=val[x]|val[y];\r\n        bin.push_back(y);\r\n        ls[y]=val[y]=rs[y]=0;\r\n        return x;\r\n    }\r\n\tint mid=l+r>>1;\r\n\tls[x]=merge(ls[x],ls[y],l,mid);\r\n\trs[x]=merge(rs[x],rs[y],mid+1,r);\r\n\tbin.push_back(y);ls[y]=rs[y]=val[y]=0;\r\n\tval[x]=val[ls[x]]+val[rs[x]];\r\n\treturn x;\r\n}\r\n```\r\n\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a\u7ebf\u6027\u5bf9\u6570\u3002\u4f46\u662f\u672c\u9898\u5361\u7ebf\u6bb5\u6811\u5408\u5e76\u505a\u6cd5\u7684\u7a7a\u95f4\u5361\u7684\u5f88\u5389\u5bb3\uff0c\u6240\u4ee5\u4e0b\u9762\u5199\u4e00\u4e0b\u672c\u4eba\u4f7f\u7528\u7684\u5e38\u6570\u4f18\u5316\u6280\u5de7\uff1a\r\n\r\n1.\u628a\u6240\u6709 STL \u5bb9\u5668\u90fd\u5220\u4e86\uff0c\u5c3d\u91cf\u624b\u5199\uff0c\u5b9e\u6d4b vector \u989d\u5916\u5360\u7528\u6781\u591a\u7a7a\u95f4\uff0c\u5f53\u65f6\u95f4\u5361\u7684\u4e0d\u7d27\u7684\u65f6\u5019\u7528\u94fe\u5f0f\u524d\u5411\u661f\u4ee3\u66ff vector \u5b58\u56fe\uff1b\r\n\r\n2.**\u6ce8\u610f\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\u6709\u4e24\u5927\u7c7b\u578b\uff0c\u9700\u8981\u533a\u5206\u3002** \r\n\r\n\u7b2c\u4e00\u79cd\uff0c\u65e0\u9700\u5bf9\u6bcf\u68f5\u7ebf\u6bb5\u6811\u90fd\u6b63\u786e\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u5728\u6811\u5f62\u7ed3\u6784\u7684\u6839\u8282\u70b9\u4e0a\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\uff0c\u90a3\u4e48\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f53\u6211\u4eec\u5408\u5e76\u7ebf\u6bb5\u6811\u8282\u70b9 $x$ \u548c $y$ \u65f6\uff0c\u76f4\u63a5\u4fee\u6539 $x$ \u7684\u4fe1\u606f\uff08\u533a\u95f4\u548c\uff0c\u5de6\u513f\u5b50\uff0c\u53f3\u513f\u5b50\uff09\u5373\u53ef\u3002\r\n\r\n\u7b2c\u4e8c\u79cd\uff0c\u9700\u8981\u5bf9\u6bcf\u68f5\u7ebf\u6bb5\u6811\u90fd\u6b63\u786e\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f\uff0c\u67e5\u8be2\u65f6\u6bcf\u68f5\u7ebf\u6bb5\u6811\u90fd\u53ef\u80fd\u7528\u5230\uff0c\u90a3\u4e48\u5728\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u5fc5\u987b\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9 $z$ \u8868\u793a\u5408\u5e76\u4e4b\u540e\u7684\u8282\u70b9\uff0c\u82e5\u662f\u76f4\u63a5\u7528 $x$ \u7684\u8bdd\u4f1a\u9020\u6210\u4fe1\u606f\u7684\u6df7\u4e71\u3002\r\n\r\n\u8fd9\u9053\u9898\u770b\u4e0a\u53bb\u662f\u7b2c\u4e8c\u79cd\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u800c\u8fd9\u79cd\u7ebf\u6bb5\u6811\u5408\u5e76\u663e\u7136\u662f\u66f4\u6d6a\u8d39\u7a7a\u95f4\u7684\uff0c\u90a3\u4e48\u600e\u4e48\u628a\u5b83\u8f6c\u5316\u6210\u7b2c\u4e00\u79cd\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5148\u8bfb\u5165\u6240\u6709\u8be2\u95ee\uff0c\u5728\u6bcf\u4e2a\u8be2\u95ee\u6240\u5bf9\u5e94\u7684 $S_x$ \u7ec8\u6b62\u8282\u70b9\u4e0a\u6302\u4e0a\u8fd9\u4e2a\u8be2\u95ee\uff0c\u7136\u540e\u5728\u9012\u5f52\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u987a\u4fbf\u56de\u7b54\u6389\u6302\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u7684\u6240\u6709\u8be2\u95ee\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u5728\u4e4b\u540e\u88ab\u83ab\u540d\u4fee\u6539\u6389\u4e5f\u5c31\u662f\u4e00\u4ef6\u53ef\u4ee5\u63a5\u53d7\u7684\u4e8b\u60c5\u4e86\u3002\u5b9e\u9645\u4e0a\u53bb\u6389\u6bcf\u6b21\u65b0\u5f00\u8282\u70b9 $z$ \u7684\u7a7a\u95f4\u6d88\u8017\uff0c\u53ef\u4ee5\u51cf\u5c0f\u8fd1\u4e00\u534a\u7684\u7a7a\u95f4\u5e38\u6570\u3002\r\n\r\n\u53e6\u5916\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u5bb9\u6613\u53d1\u73b0\u8282\u70b9 $y$ \u5b9e\u9645\u4e0a\u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e9f\u5f03\u5b83\u4e4b\u540e\u5c06\u5b83\u6254\u5230\u5783\u573e\u6876\u91cc**\u5e76\u6e05\u7a7a\u5b83\u4fdd\u5b58\u7684\u4fe1\u606f**\u3002\u4ee5\u540e\u9700\u8981\u65b0\u5f00\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5148\u68c0\u67e5\u6709\u6ca1\u6709\u5e9f\u5f03\u6389\u7684\u8282\u70b9\uff0c\u6ca1\u6709\u7684\u8bdd\u518d\u65b0\u7533\u8bf7\u3002\u5b9e\u6d4b\u8fd9\u4e5f\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u7a7a\u95f4\u6d88\u8017\u91cf\u3002\r\n\r\n\u5728\u52a0\u4e0a\u4ee5\u4e0a\u79cd\u79cd\u5e38\u6570\u4f18\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u4e86\u3002~~\u611f\u8c22\u6bd2\u7624\u51fa\u9898\u4eba\u3002~~\r\n\r\n## \u4e09.\u4ee3\u7801\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=4e6+5,M=3.2e7+5;\r\nint tr[N][26];\r\nint n,q,fail[N],tot=0,R=0,root[N];\r\nint sum=0,ls[M],rs[M],val[M],ed[100005],Ans[100005];\r\nint head[N],nxt[N],ver[N],gg=0;\r\nint vhead[N],vnxt[N],vver[N],gv=0;\r\nint ghead[N],gnxt[100005],gver[100005],gk=0;\r\nvector<int>bin;\r\nchar s[N/2];\r\nint New(){\r\n\tint u=bin.size(),v;\r\n\tif(u){\r\n\t\tv=bin[u-1];\r\n\t\tbin.pop_back();\r\n\t\treturn v;\r\n\t}\r\n\treturn ++sum;\r\n}\r\nvoid add(int x,int y){\r\n\t++gg,nxt[gg]=head[x],head[x]=gg;\r\n\tver[gg]=y;\r\n\treturn ;\r\n}\r\nvoid addv(int x,int y){\r\n\t++gv,vnxt[gv]=vhead[x],vhead[x]=gv;\r\n\tvver[gv]=y;\r\n\treturn ;\r\n}\r\nvoid addg(int x,int y){\r\n\t++gk,gnxt[gk]=ghead[x],ghead[x]=gk;\r\n\tgver[gk]=y;\r\n\treturn ;\r\n}\r\nvoid insert(int id){\r\n\tint now=0,r=0,l=strlen(s),u;\r\n\twhile(r<l){\r\n\t\tu=(int)(s[r]-'a');\r\n\t\tif(!tr[now][u]) tr[now][u]=++tot;\r\n\t\tnow=tr[now][u],++r;\r\n\t\tif(id>0) addv(now,id);\r\n\t}\r\n\tif(id<0) ed[-id]=now;\r\n\treturn ;\r\n}\r\nvoid build(){\r\n\tqueue<int>q;\r\n\tfor(int i=0;i<26;++i) if(tr[0][i]) q.push(tr[0][i]);\r\n\twhile(!q.empty()){\r\n\t\tint u=q.front();q.pop();\r\n\t\tfor(int i=0;i<26;++i){\r\n\t\t\tif(tr[u][i]) fail[tr[u][i]]=tr[fail[u]][i],q.push(tr[u][i]);\r\n\t\t\telse tr[u][i]=tr[fail[u]][i];\r\n\t\t}\r\n\t}\r\n\treturn ;\r\n}\r\nint modify(int x,int l,int r,int y){\r\n\tif(!x) x=New();\r\n\tif(l==r){val[x]=1;return x;}\r\n\tint mid=l+r>>1;\r\n\tif(y<=mid) ls[x]=modify(ls[x],l,mid,y);\r\n\telse rs[x]=modify(rs[x],mid+1,r,y);\r\n\tval[x]=val[ls[x]]+val[rs[x]];\r\n\treturn x;\r\n}\r\nint merge(int x,int y,int l,int r){\r\n\tif(!x || !y) return x|y;\r\n\tif(l==r){val[x]=val[x]|val[y];bin.push_back(y);ls[y]=val[y]=rs[y]=0;return x;}\r\n\tint mid=l+r>>1;\r\n\tls[x]=merge(ls[x],ls[y],l,mid);\r\n\trs[x]=merge(rs[x],rs[y],mid+1,r);\r\n\tbin.push_back(y);ls[y]=rs[y]=val[y]=0;\r\n\tval[x]=val[ls[x]]+val[rs[x]];\r\n\treturn x;\r\n}\r\nint ask(int x,int l,int r,int L,int R){\r\n\tif(L>R || !x) return 0;\r\n\tif(l==L && r==R) return val[x];\r\n\tint mid=l+r>>1;\r\n\tif(R<=mid) return ask(ls[x],l,mid,L,R);\r\n\telse if(L>=mid+1) return ask(rs[x],mid+1,r,L,R);\r\n\treturn ask(ls[x],l,mid,L,mid)+ask(rs[x],mid+1,r,mid+1,R);\r\n}\r\nint q2[100005];\r\nvoid dfs(int x){\r\n\tfor(int i=vhead[x];i;i=vnxt[i]) root[x]=modify(root[x],1,R,vver[i]);\r\n\tfor(int i=head[x];i;i=nxt[i]) dfs(ver[i]),root[x]=merge(root[x],root[ver[i]],1,R);\r\n\tfor(int i=ghead[x];i;i=gnxt[i]) Ans[gver[i]]=ask(root[x],1,R,1,q2[gver[i]]);\r\n\treturn ;\r\n}\r\nint main(){\r\n\tscanf(\"%d\",&n);\r\n\tfor(int i=1;i<=n;++i) scanf(\"%s\",s),insert(-i);\r\n\tscanf(\"%d\",&q);\r\n\tint x,y;\r\n\tfor(int i=1;i<=q;++i){\r\n\t\tscanf(\"%d\",&x);\r\n\t\tif(x==1) scanf(\"%s\",s),++R,insert(R);\r\n\t\telse scanf(\"%d\",&y),q2[i-R]=R,addg(ed[y],i-R);\r\n\t}\r\n\tbuild();\r\n\tfor(int i=1;i<=tot;++i) add(fail[i],i);\r\n\tdfs(0);\r\n\tfor(int i=1;i<=q-R;++i) printf(\"%d\\n\",Ans[i]);\r\n\treturn 0;\r\n}\r\n```\r\n\u5199\u7684\u6bd4\u8f83\u4e11\u964b\uff08\u5361\u7a7a\u95f4\u5361\u7684\u5fc3\u6001\u5d29\u4e86\uff09\uff0c\u89c1\u8c05~",
        "postTime": 1652249796,
        "uid": 131591,
        "name": "\u849f\u84bb\u541bHJT",
        "ccfLevel": 7,
        "title": "P5840 Divljak \u9898\u89e3"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\u6709 $n$ \u4e2a\u5b57\u7b26\u4e32 $S_1, S_2, \\cdots, S_n$ \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u96c6\u5408 $T$\uff0c\u4e00\u5f00\u59cb $T$ \u4e3a\u7a7a\u3002\n\n\u7136\u540e\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\n\n1. `1 P` \u5f80 $T$ \u91cc\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32 $P$\u3002\n2. `2 x` \u8be2\u95ee\u96c6\u5408 $T$ \u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u4e32 $S_x$ \uff08\u6211\u4eec\u79f0\u4e32 $A$ \u5305\u542b\u4e32 $B$\uff0c\u5f53\u4e14\u4ec5\u5f53 $B$ \u662f $A$ \u7684\u5b50\u4e32\uff09\u3002\n\n\u5bf9\u4e8e $100\\%$ \u7684\u6570\u636e\uff0c$1 \\leq n,q \\leq 10^5$\uff0c\u5b57\u7b26\u4e32\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\uff0c\u6240\u6709\u5b57\u7b26\u4e32\u7684\u603b\u957f $\\le 2 \\times 10^6$\u3002\n\n# \u89e3\u9898\u601d\u8def\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[`AC` \u81ea\u52a8\u673a](https://blog.csdn.net/qq_46258139/article/details/119918655)\uff0c[\u6811\u94fe\u5256\u5206](https://blog.csdn.net/qq_46258139/article/details/118554607)\uff0c\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\u3002\n\n~~\u663e\u7136\uff0c\u770b\u5230\u6570\u636e\u8303\u56f4\u53ef\u4ee5\u60f3\u5230\u80af\u5b9a\u4e0d\u80fd\u66b4\u529b\u3002~~\n\n\u9996\u5148\u8003\u8651\u5bf9 $S_1, S_2, \\cdots, S_n$ \u5efa `AC` \u81ea\u52a8\u673a\u3002\n\n~~\u7136\u540e\u5c31\u6ca1\u601d\u8def\u4e86\u3002\u3002\u3002~~\n\n\u4f46\u662f\uff0c\u5f80\u5f80\u6a21\u62df\u4e00\u904d\u5c31\u4f1a\u6709\u601d\u8def\u4e86\u3002\n\n\u4e8e\u662f\uff0c\u6a21\u62df\u66b4\u529b\u65f6\u662f\u600e\u6837\u5bf9\u7b54\u6848\u8fdb\u884c\u6c42\u548c\u7684\u3002\n\n\u663e\u7136\uff0c\u505a\u8fc7\u6a21\u677f\u9898\u7684\u90fd\u77e5\u9053\uff0c\u5c06\u4e32\u653e\u5728 `AC` \u81ea\u52a8\u673a\u4e0a\u4e00\u4f4d\u4e00\u4f4d\u8dd1\uff0c\u6bcf\u8dd1\u4e00\u4f4d\u5c06 `fail` \u94fe\u4e0a\u7684\u6240\u6709\u8d21\u732e\u52a0\u8d77\u6765\uff0c\u7b49\u7b49\uff0c\u8fd9\u662f\u4e0d\u662f\u4f3c\u66fe\u76f8\u8bc6\uff1f\uff1f\n\n\n\u8003\u8651\u5efa `fail` \u6811\uff0c`fail` \u94fe\u5373\u662f\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u7b80\u5355\u8def\u5f84\u3002\n\n\u73b0\u5728\u5c31\u8981\u7528\u5230\u6811\u94fe\u5256\u5206\u4e86\u3002\n\n\u90a3\u6811\u4e0a\u5dee\u5206\u7684\u8eab\u5f71\u53c8\u5728\u54ea\u5462\uff1f\n\n\u53ef\u4ee5\u60f3\u5230\uff0c\u5bf9\u4e32\u7684\u6bcf\u4e00\u4f4d\u90fd\u6c42\u8def\u5f84\u548c\uff0c\u80af\u5b9a\u4f1a\u70b8\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u5c06\u4e32\u7684\u6bcf\u4e00\u4f4d\u6839\u636e `dfn` \u5e8f\u8fdb\u884c\u6392\u5e8f\u3002\n\n\u7136\u540e\uff0c\u5c06\u6bcf\u4e2a\u70b9\u8d21\u732e\u52a0 $1$\uff0c\u76f8\u90bb\u4e24\u70b9\u7684 `lca` \u8d21\u732e\u51cf $1$\u3002\n\n\u6811\u4e0a\u5dee\u5206\u5c31\u6709\u4e86\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5bf9\u4e32\u5728 `trie` \u4e0a\u7ed3\u675f\u7684\u8282\u70b9\u6c42\u4e00\u904d\u5b50\u6811\u548c\u5c31\u884c\u4e86\u3002\n\n# AC CODE\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int _ = 2e6 + 7;\n\nint n, m;\n\nint cnt = 1, tr[_][27], fail[_], tag[_];\n\nchar c[_];\n\nvoid insert(char *s, int id)\n{\n\tint p = 1;\n\tfor(int i = 1, len = strlen(s + 1); i <= len; ++i)\n\t{\n\t\tint v = s[i] - 'a';\n\t\tif(!tr[p][v]) tr[p][v] = ++cnt;\n\t\tp = tr[p][v];\n\t}\n\ttag[id] = p;\n}\n\nvoid getfail()\n{\n\tfor (int i = 0; i < 26; i ++)\n\t\ttr[0][i] = 1;\n\tqueue<int> q;\n\tq.push(1);\n\tfail[1] = 0;\n\twhile(!q.empty())\n\t{\n\t\tint now = q.front();\n\t\tq.pop();\n\t\tfor(int i = 0; i < 26; ++i)\n\t\t{\n\t\t\tif(tr[now][i])\n\t\t\t{\n\t\t\t\tq.push(tr[now][i]);\n\t\t\t\tfail[tr[now][i]] = tr[fail[now]][i];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttr[now][i] = tr[fail[now]][i];\n\t\t\t}\n\t\t}\n\t}\n}\n\nint tot, head[_], to[_ << 1], nxt[_ << 1];\n\nvoid add(int u, int v)\n{\n\tto[++tot] = v;\n\tnxt[tot] = head[u];\n\thead[u] = tot;\n}\n\nint cnt_node, dep[_], siz[_], hson[_], top[_], fa[_], dfn[_];\n\nvoid dfs1(int u, int d = 1)\n{\n\tdep[u] = d;\n\tsiz[u] = 1;\n\tfor(int i = head[u]; i; i = nxt[i])\n\t{\n\t\tint v = to[i];\n\t\tif(dep[v]) continue;\n\t\tfa[v] = u;\n\t\tdfs1(v, d + 1);\n\t\tsiz[u] += siz[v];\n\t\tif(siz[v] > siz[hson[u]]) hson[u] = v;\n\t}\n}\n\nvoid dfs2(int u, int topf)\n{\n\tdfn[u] = ++cnt_node;\n\ttop[u] = topf;\n\tif(!hson[u]) return;\n\tdfs2(hson[u], topf);\n\tfor(int i = head[u]; i; i = nxt[i])\n\t{\n\t\tint v = to[i];\n\t\tif(top[v]) continue;\n\t\tdfs2(v, v);\n\t}\n}\n\nint LCA(int u, int v)\n{\n\twhile(top[u] != top[v])\n\t{\n\t\tif(dep[top[u]] < dep[top[v]]) swap(u, v);\n\t\tu = fa[top[u]];\n\t}\n\treturn dep[u] > dep[v] ? v : u;\n}\n\nint k[_];\n\nint lowbit(int x)\n{\n\treturn x & -x;\n}\n\nvoid update(int x, int val)\n{\n\tfor(int i = x; i <= cnt; i += lowbit(i))\n\t{\n\t\tk[i] += val;\n\t}\n}\n\nint query(int x)\n{\n\tint res = 0;\n\tfor(int i = x; i; i -= lowbit(i))\n\t{\n\t\tres += k[i];\n\t}\n\treturn res;\n}\n\nbool cmp(int x, int y)\n{\n\treturn dfn[x] < dfn[y];\n}\n\nint q[_];\n\nsigned main()\n{\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tscanf(\"%s\", c + 1);\n\t\tinsert(c, i);\n\t}\n\tgetfail();\n\tfor(int i = 2; i <= cnt; ++i)\n\t\tadd(fail[i], i);\n\tdfs1(1);\n\tdfs2(1, 1);\n\tscanf(\"%d\", &m);\n\tfor(int i = 1; i <= m; ++i)\n\t{\t\n\t\tint op, kkk;\n\t\tscanf(\"%d\", &op);\n\t\tif(op == 1)\n\t\t{\n\t\t\tscanf(\"%s\", c + 1);\n\t\t\tint len = strlen(c + 1);\n\t\t\tfor(int j = 1, p = 1; j <= len; ++j)\n\t\t\t{\n\t\t\t\tint v = c[j] - 'a';\n\t\t\t\tp = tr[p][v];\n\t\t\t\tq[j] = p;\n\t\t\t}\n\t\t\tsort(q + 1, q + len + 1, cmp);\n\t\t\tfor(int j = 1; j <= len; ++j)\n\t\t\t\tupdate(dfn[q[j]], 1);\n\t\t\tfor(int j = 1; j < len; ++j) \n\t\t\t\tupdate(dfn[LCA(q[j], q[j + 1])], -1);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d\", &kkk);\n\t\t\tint x = tag[kkk];\n\t\t\tprintf(\"%d\\n\", query(dfn[x] + siz[x] - 1) - query(dfn[x] - 1));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1632483888,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "[COCI2015]Divljak"
    },
    {
        "content": "\u4e3b\u6d41\u505a\u6cd5\u662f\u865a\u6811\u601d\u60f3+\u6811\u4e0a\u5dee\u5206\uff0c\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u6b64\u9898\u7684\u7ef4\u62a4\u53ef\u4ee5\u4f7f\u7528\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u6765\u89e3\u51b3\u3002[\u4e0d\u4f1a\u5de6\u8f6c](https://www.luogu.com.cn/blog/nederland/globalbst)\u3002\r\n\r\n\u9996\u5148\u5efa fail \u6811\u90e8\u5206\u4e0d\u518d\u8d58\u8ff0\uff0c\u8003\u8651\u6211\u4eec\u6b64\u65f6\u8981\u5e72\u4ec0\u4e48\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u52a0\u5165\u7684\u4e32\u5728 AC \u81ea\u52a8\u673a\u4e0a\u5339\u914d\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5339\u914d\u5230\u7684\u70b9\uff0c\u628a\u5b83\u5230 fail \u6811\u4e0a\u7684\u6839\u90fd\u52a0 $1$\uff0c\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u4e32\uff0c\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u52a0 $1$\u3002\r\n\r\n\u6811\u5256\u76f4\u63a5\u505a\u662f\u4e24\u4e2a $\\log$\uff0c\u4f46\u662f GBT \u662f\u4e00\u4e2a $\\log$\u3002\u6211\u4eec\u8003\u8651 GBT \u600e\u4e48\u505a\u3002\u6ce8\u610f\u5230\u6bcf\u6b21\u4fee\u6539\u7684\u94fe\u4e00\u5b9a\u4f1a\u5230\u6839\uff0c\u8bb0\u5f55\u6bcf\u6761\u91cd\u94fe\u5f53\u524d\u8fd9\u4e2a\u4e32\u88ab\u8986\u76d6\u7684\u6700\u6df1\u7684\u70b9\uff0c\u6bcf\u6b21\u8df3\u91cd\u94fe\uff0c\u5c31\u5bf9\u4ece\u6700\u6df1\u7684\u70b9\u5230\u672c\u6765\u9700\u8981\u8986\u76d6\u6700\u6df1\u7684\u70b9\u52a0 $1$\u3002\u7136\u540e\u66f4\u65b0\u88ab\u8986\u76d6\u7684\u6700\u6df1\u7684\u70b9\u3002\r\n\r\n\u533a\u95f4\u52a0 $1$\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u8fd9\u4e1c\u897f\u5e76\u4e0d\u96be\u505a\uff0c\u533a\u95f4\u4fee\u6253 lazy\uff0c\u67e5\u8be2\u5c31\u4e00\u76f4 push_down\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6bcf\u4e2a\u70b9\u90fd\u771f\u5b9e\u5bf9\u5e94\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981 push_up\uff0c\u4fee\u6539\u7684\u65f6\u5019\u5c31\u8ddf\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u5dee\u4e0d\u591a\uff0c\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c GBT \u4e0a\u4e00\u4e2a\u8282\u70b9\u7ba1\u8f96\u8303\u56f4\u662f $[l,r]$\uff0c\u4f46\u5b83\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u90a3\u5b83\u5176\u5b9e\u8fd8\u6709\u4e00\u4e2a\u513f\u5b50 $[l,l]$ \u6216\u8005 $[r,r]$\u3002\u8981\u7279\u5224\u3002\uff08\u5177\u4f53\u7ec6\u8282\u53ef\u4ee5\u770b\u4ee3\u7801\uff09\r\n\r\n[\u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u3002](https://www.luogu.com.cn/discuss/418248)\r\n\r\n\u4ee3\u7801\uff1a\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define ri register int\r\nusing namespace std;\r\nconst int maxn=3.5e6+5; \r\nchar s[maxn];\r\nconst int inf=1e8;\r\nbool ff=0;\r\nstatic char buf[1000000],*p1=buf,*p2=buf,obuf[1000000],*p3=obuf;\r\n#define getchar() p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++\r\n#define putchar(x) (p3-obuf<1000000)?(*p3++=x):(fwrite(obuf,p3-obuf,1,stdout),p3=obuf,*p3++=x)\r\ntemplate<typename item>\r\ninline void read(register item &x)\r\n{\r\n\tff=1;\r\n    x=0;register char c=getchar();\r\n    while(c<'0'||c>'9'){                               \r\n\t\tif(c=='-')ff=0;\r\n\t\tc=getchar();\r\n\t}\r\n    while(c>='0'&&c<='9')x=(x<<3)+(x<<1)+(c^48),c=getchar();\r\n    if(!ff)x=-x;  \r\n}\r\nstatic char cc[10000];\r\ntemplate<typename item>\r\ninline void print(register item x)\r\n{\r\n\tif(x==0){putchar('0');return ;}\r\n\tregister long long len=0;\r\n\twhile(x)cc[len++]=x%10+'0',x/=10;\r\n\twhile(len--)putchar(cc[len]);\r\n}\r\nint mymax(int a,int b){\r\n\treturn a<b?b:a;\r\n}\r\nstruct ACM{\r\n\tconst int mc=26;\r\n\tint pos[maxn];\r\n\tstruct Edge{\r\n\t\tint v,nxt;\r\n\t}e[maxn];\r\n\tint h[maxn],cntt=0;\r\n\tinline void add(int u,int v){\r\n\t\te[++cntt].v=v;\r\n\t\te[cntt].nxt=h[u];\r\n\t\th[u]=cntt;\r\n\t}\r\n\tint vc=0;\r\n\tint t[maxn];\r\n\tint tl[maxn],tr[maxn];\r\n\tint CH[maxn][26];\r\n\tint sz[maxn],fath[maxn],son[maxn];\r\n\tint dfn[maxn],dc=0,ed[maxn],tp[maxn],val[maxn],RT[maxn];\r\n\tbool istp[maxn]; \r\n\tint ls[maxn],rs[maxn];\r\n\tint bl[maxn];\r\n\tvoid dfs1(int u,int fa){\r\n\t\tsz[u]=1;\r\n\t\tfath[u]=fa;\r\n\t\tfor(ri i=h[u];i;i=e[i].nxt){\r\n\t\t\tint v=e[i].v;\r\n\t\t\tif(v==fa)continue;\r\n\t\t\tdfs1(v,u);\r\n\t\t\tsz[u]+=sz[v]; \r\n\t\t\tif(sz[son[u]]<sz[v]){\r\n\t\t\t\tson[u]=v;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvoid dfs2(int u,int fa,int as){ \r\n\t\tdfn[u]=++dc; \r\n\t\tbl[dc]=u;\r\n\t\ttp[u]=as;   \r\n\t\tif(u==as){\r\n\t\t\tistp[u]=1;\r\n\t\t}\r\n\t\ted[as]=u;\r\n\t\tif(son[u]){\r\n\t\t\tdfs2(son[u],u,as);  \r\n\t\t} \r\n\t\tval[u]=1;\r\n\t\tfor(ri i=h[u];i;i=e[i].nxt){\r\n\t\t\tint v=e[i].v;\r\n\t\t\tif(v==fa||v==son[u])continue;\r\n\t\t\tval[u]+=sz[v];\r\n\t\t\tdfs2(v,u,v);\t\t  \t\t\r\n\t\t}\r\n\t} \r\n\tint build_SBT(int l,int r,int root){\r\n\t\tif(l>r)return 0;\r\n\t\tint mx=inf,Sum=0,pre=0,rt=l;\r\n\t\tfor(int i=l;i<=r;i++){\r\n\t\t\tSum+=val[bl[i]];\r\n\t\t}\r\n\t\tfor(int i=l;i<=r;i++){\r\n\t\t\tpre+=val[bl[i]];\r\n\t\t\tif(mx>mymax(pre,Sum-pre)){\r\n\t\t\t\tmx=mymax(pre,Sum-pre);\r\n\t\t\t\trt=i;\r\n\t\t\t}\r\n\t\t}  \r\n\t\tif(!root){\r\n \t\t\tRT[rt]=rt;\r\n\t\t\troot=rt;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tRT[rt]=root;\r\n\t\t}\r\n\t\ttl[rt]=l;\r\n\t\ttr[rt]=r; \r\n\t\tif(l==r)return rt;\r\n\t\tls[rt]=build_SBT(l,rt-1,root),rs[rt]=build_SBT(rt+1,r,root); \r\n\t\treturn rt;\r\n\t}\r\n\tint lz[maxn];\r\n\tvoid push_down(int i){\r\n\t\tt[ls[i]]+=lz[i];\r\n\t\tt[rs[i]]+=lz[i]; \r\n\t\tlz[ls[i]]+=lz[i];\r\n\t\tlz[rs[i]]+=lz[i];\r\n\t\tlz[i]=0;\r\n\t}\r\n\tvoid update(int i,int u,int v,int k){\r\n\t\tif(u<=tl[i]&&tr[i]<=v){\r\n\t\t\tt[i]+=k;\r\n\t\t\tlz[i]+=k;\r\n\t\t\treturn ;\r\n\t\t}\r\n\t\tpush_down(i);\r\n\t\tif(!ls[i]&&!rs[i])return ;\r\n\t\tif(u<=i&&i<=v){\r\n\t\t\tt[i]+=k;  \r\n\t\t}\r\n\t\tif(u<=tr[ls[i]])update(ls[i],u,v,k);\r\n\t\tif(tl[rs[i]]<=v)update(rs[i],u,v,k);\r\n\t}\r\n\tint query(int i,int x){\r\n\t\tif(i==x)return t[i];\r\n\t\tpush_down(i);\r\n\t\tif(x<=tr[ls[i]])return query(ls[i],x);\r\n\t\telse return query(rs[i],x);\r\n\t}\r\n\tint fail[maxn],nxt[maxn][26],tot,cnt[maxn],sum[maxn];\r\n\tACM(){\r\n\t\ttot=1;\r\n\t}\r\n\tvoid ins(int id,int n){ \r\n\t\tint u=1; \r\n\t\tfor(ri i=1;i<=n;i++){\r\n\t\t\tint ch=s[i]-'a';\r\n\t\t\tif(!nxt[u][ch]){nxt[u][ch]=++tot;CH[u][ch]=tot;}\r\n\t\t\tu=nxt[u][ch]; \r\n \t\t}  \r\n\t\tpos[id]=u;\r\n\t} \r\n\tint lstv[maxn],lt[maxn];\r\n\tinline void upd(int u){\r\n \t\twhile(u){\r\n\t\t\tif(lstv[tp[u]]!=vc){\r\n\t\t\t\tlstv[tp[u]]=vc;\r\n\t\t\t\tlt[tp[u]]=dfn[tp[u]];\t\r\n\t\t\t}\r\n\t\t\tif(lt[tp[u]]<=dfn[u]){ \r\n\t\t\t\tupdate(RT[dfn[u]],lt[tp[u]],dfn[u],1);\r\n\t\t\t\tlt[tp[u]]=dfn[u]+1;\t\t\t\r\n\t\t\t}\r\n\t\t\tu=fath[tp[u]]; \r\n\t\t}\r\n\t\treturn ;\r\n\t}\r\n\tinline void solve(int n){  \r\n\t\t++vc; \r\n\t\tint u=1; \r\n\t\tfor(int i=1;i<=n;i++){\r\n\t\t\tint ch=s[i]-'a';\r\n\t\t\tu=nxt[u][ch];\r\n\t\t\tif(u)upd(u); \r\n\t\t}   \r\n\t}\r\n\tqueue<int>q;\r\n\tvoid build_GBT(){ \t\r\n\t\tfor(ri i=1;i<=tot;i++){\r\n\t\t\tif(istp[i]){\r\n \t\t\t\tbuild_SBT(dfn[tp[i]],dfn[ed[i]],0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tinline void build(){ \r\n\t\tfor(ri i=0;i<mc;i++){\r\n\t\t \tif(!nxt[1][i]){\r\n\t\t \t\tnxt[1][i]=1;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t \tq.push(nxt[1][i]);\r\n\t\t\t \tfail[nxt[1][i]]=1;\r\n\t\t\t} \r\n\t\t}\r\n\t\twhile(!q.empty()){\r\n\t\t\tint u=q.front();\r\n\t\t\tq.pop();\r\n\t\t\tfor(ri i=0;i<mc;i++){\r\n\t\t\t\tif(nxt[u][i]){\r\n\t\t\t\t\tint v=nxt[u][i];\r\n\t\t\t\t\tif(u==1)fail[v]=1;\r\n\t\t\t\t\telse fail[v]=nxt[fail[u]][i];\r\n\t\t\t\t\tq.push(v);\r\n\t\t\t\t} \r\n\t\t\t\telse nxt[u][i]=nxt[fail[u]][i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(ri i=2;i<=tot;i++){  \r\n\t\t\tadd(fail[i],i); \r\n\t\t}\r\n\t\tdfs1(1,0);\r\n\t\tdfs2(1,0,1);\r\n\t\tbuild_GBT();\r\n\t}  \r\n\tinline int qry(int x){ \r\n\t\treturn query(RT[dfn[pos[x]]],dfn[pos[x]]);\r\n\t}\r\n}A;\r\nint n,q;\r\nint main(){\r\n \tread(n); \r\n\tint tot2=1;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\ttot2=1;\r\n\t\ts[tot2]=getchar();\r\n\t\twhile(s[tot2]<'a'||s[tot2]>'z')s[tot2]=getchar();\r\n\t\twhile(s[tot2]>='a'&&s[tot2]<='z')s[++tot2]=getchar(); \r\n\t\tA.ins(i,tot2-1);\r\n\t}\r\n\tA.build();\r\n\tread(q); \r\n\twhile(q--){\r\n\t\tint op,x;\r\n\t\tread(op);\r\n\t\tif(op==1){\r\n\t\t\ttot2=1;\r\n\t\t\ts[tot2]=getchar();\r\n\t\t\twhile(s[tot2]<'a'||s[tot2]>'z')s[tot2]=getchar();\r\n\t\t\twhile(s[tot2]>='a'&&s[tot2]<='z')s[++tot2]=getchar();\r\n\t\t\tA.solve(tot2-1);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tread(x);\r\n\t\t\tprint(A.qry(x));\r\n\t\t\tputchar('\\n'); \r\n\t\t}\r\n\t}\t\r\n\tfwrite(obuf,p3-obuf,1,stdout);\r\n\treturn 0;\r\n}\r\n\r\n```",
        "postTime": 1647433126,
        "uid": 282751,
        "name": "cryozwq",
        "ccfLevel": 7,
        "title": "P5840 [COCI2015]Divljak \u9898\u89e3"
    },
    {
        "content": "\u663e\u7136\uff0c\u8981\u5c06 $S$ \u96c6\u4e2d\u7684\u5355\u8bcd\u63d2\u5165 Trie \u6811\uff0c\u8fd9\u6837\u65b9\u4fbf\u67e5\u8be2\u7f16\u53f7\u4e3a $i$ \u7684\u5355\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u5b9a\u4e49\u5931\u914d\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9 $u$ \u4e00\u4e2a\u57df $cnt(u)$\uff0c\u4e3a\u76ee\u524d $T$ \u4e2d\u5305\u542b\u8be5\u8282\u70b9\u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u67e5\u8be2 $T$ \u4e2d\u5305\u542b $S$ \u4e2d\u67d0\u5355\u8bcd\u7684\u5b57\u7b26\u4e32\u7684\u4e2a\u6570\u5c31\u76f8\u5f53\u4e8e\u5728\u5931\u914d\u6811\u4e0a\u5355\u70b9\u67e5\u8be2\u3002\n\n\u7136\u540e\u8003\u8651\u5f80 $T$ \u96c6\u52a0\u5165\u5b57\u7b26\u4e32 $str$ \u65f6\u5bf9\u5931\u914d\u6811\u7684\u5f71\u54cd\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5728 AC \u81ea\u52a8\u673a\u4e0a\u5339\u914d $str$\u3002\u5728\u666e\u901a AC \u81ea\u52a8\u673a\u7684\u5339\u914d\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u5230\u8fbe\u4e00\u4e2a\u8282\u70b9\u5c31\u5c06\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684 $cnt$ \u52a0 $1$ \uff08\u6307\u5931\u914d\u6811\u4e0a\u7684\u8def\u5f84\uff09\uff0c\u76f8\u5f53\u4e8e\u524d\u7f00\u94fe\u7684\u52a0\u64cd\u4f5c\uff0c\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u53ef\u80fd\u540c\u65f6\u5728\u82e5\u5e72\u70b9\u7684\u524d\u7f00\u94fe\u4e0a\uff0c\u5b83\u7684 $cnt$ \u4f1a\u4e5f\u88ab\u52a0\u82e5\u5e72\u6b21\u3002\n\n\u4f46\u672c\u9898\u7a0d\u5fae\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u5728\u4e00\u6b21\u5339\u914d\u5f53\u4e2d\uff0c\u6bcf\u4e2a $cnt$ \u88ab\u52a0\u7684\u8282\u70b9\u53ea\u80fd\u52a0\u4e00\u6b21\u3002\u4e8e\u662f\uff0c\u5148\u628a\u5339\u914d\u4e2d\u6240\u6709\u7ecf\u8fc7\u7684\u70b9\u653e\u5728 $stk$ \uff08\u6808\uff09\u91cc\uff0c\u6808\u5927\u5c0f $top$ \u5c31\u7b49\u4e8e\u5b57\u7b26\u4e32 $str$ \u7684\u957f\u5ea6\uff0c\u7136\u540e\u4ee5\u8282\u70b9\u5bf9\u5e94\u7684 dfn \u5e8f\u4e3a\u5173\u952e\u5b57\uff0c\u5bf9 $stk$ \u6392\u5e8f\u5e76\u53bb\u91cd\uff08\u7528 sort \u548c unique\uff09\uff0c\u53bb\u91cd\u540e $top$ \u53ef\u80fd\u4f1a\u51cf\u5c0f\u3002\n\n\u7136\u540e\n\n$\\forall$ $0 \\leq i \\leq top - 1$\uff0c\u8ba9 $stk_i$ \u5230 $rt$ \u7684\u524d\u7f00\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684 $cnt$ \u52a0 $1$\u3002\n\n$\\forall$ $1 \\leq i \\leq top - 1$\uff0c\u8ba9 $LCA(stk_i,stk_{i-1})$ \u5230 $rt$ \u7684\u524d\u7f00\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7684 $cnt$ \u51cf $1$\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1 $stk_i$ \u4e0e $stk_{i-1}$ \u7684\u524d\u7f00\u94fe\u7684\u516c\u5171\u94fe\u4e0a\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u53ea\u88ab\u52a0\u4e00\u6b21\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0a\u4e0d\u662f\u76f4\u63a5\u524d\u7f00\u94fe\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u8fd9\u6837\u5f97\u7528\u6811\u5256\uff0c\u8f83\u6162\u3002\n\n\u66f4\u5feb\u7684\u662f\u65b9\u6cd5\u662f\u6811\u4e0a\u5dee\u5206\uff0c\u5c06\u524d\u7f00\u94fe\u4fee\u6539\u548c\u5355\u70b9\u67e5\u8be2\u53d8\u4e3a\u5355\u70b9\u52a0\u4e0e\u5b50\u6811\u548c\u67e5\u8be2\uff0c\u7136\u540e\u7528 dfn \u5e8f\u548c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\n\n\u6b64\u5916\uff0c\u56e0\u4e3a\u7b97\u6cd5\u4e2d\u6c42 LCA \u7684\u90e8\u5206\u4ec5\u4ec5\u53ea\u662f\u6c42 LCA\uff0c\u53ef\u4ee5\u7528\u6b27\u62c9\u5e8f\u4e0e st \u8868\u5b9e\u73b0 $O(N \\log N)$ \u9884\u5904\u7406\uff0c$O(1)$ \u67e5\u8be2\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N \\log N + M \\log M)$\uff0c$N$ \u4e3a $S$ \u96c6\u4e2d\u5b57\u7b26\u4e32\u603b\u957f\uff0c$M$ \u4e3a $T$ \u96c6\u4e2d\u5b57\u7b26\u4e32\u603b\u957f\u3002\n\n```cpp\n#include <stdio.h>\n#include <algorithm>\n#include <string.h>\n#include <iostream>\nusing namespace std;\n\n#define re register\n#define sf scanf\n#define pf printf\n#define nl() putchar('\\n')\n#define ms(x, val) memset(x, val, sizeof(x))\n#define _for(i, a, b) for(re int (i) = (a); (i) < (b); ++(i))\n#define _rfor(i, a, b) for(re int (i) = (a); (i) <= (b); ++(i))\n#define _fev(p, u) for(re int (p) = head[(u)]; (p); (p) = nex[(p)])\n#define maxn 2001000\n#define lbmaxn 26\n#define maxm 2001000\n#define maxc 26\n\ntemplate <class T>\nvoid print(string name, T arr[], int n, int flag = 1){\n\tcout<<name<<\":\";\n\tif (flag) _rfor(i, 1, n)cout<<\" \"<<arr[i];\n\telse _for(i, 0, n)cout<<\" \"<<arr[i];\n\tcout<<endl;\n}\n\nchar str[maxn];\n\nint \n\t//AC \u81ea\u52a8\u673a\u76f8\u5173 \n\tncnt = 1, //Trie \u8282\u70b9\u6570 \n\tmp[maxn], //S \u96c6\u4e2d\u7f16\u53f7\u4e3a i \u7684\u5b57\u7b26\u4e32\u5728 Trie \u4e0a\u5bf9\u5e94\u7684\u8282\u70b9 \n\tfail[maxn],\n\tnxt[maxn][maxc],\n\tque[maxn],\n\t\n\t//\u5931\u914d\u6811\u56fe \n\tecnt = 0, \n\thead[maxn],  \n\tto[maxn],\n\tnex[maxn],\n\tdeep[maxn], \n\t\n\t//dfn \u5e8f\u76f8\u5173 \n\tdfn_clock = 0,\n\tpre[maxn], //dfn \u5e8f\u9996 \n\tpst[maxn], //dfn \u5e8f\u5c3e \n\tori[maxn], //dfn \u5e8f\u9996\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7 \n\t\n\t//\u6811\u72b6\u6570\u7ec4(Fenwick \u6811) \n\tfwk[maxn],\n\t\n\t//\u6b27\u62c9\u5e8f\u76f8\u5173 \n\teuler_clock = 0,\n\tfir[maxn], //\u6b27\u62c9\u5e8f\u9996 \n\tlst[maxn], //\u6b27\u62c9\u5e8f\u5c3e \n\tid[2*maxn], //\u6b27\u62c9\u5e8f\u9996\u5bf9\u5e94\u7684\u8282\u70b9 \n\t\n\t//st \u8868\u76f8\u5173 \n\tlb[2*maxn], //\u4ee5 2 \u4e3a\u5e95\u7684\u5bf9\u6570 \n\tst[lbmaxn+2][2*maxn],\n\t\n\t//\u5f80 T \u96c6\u4e2d\u52a0\u5165\u5b57\u7b26\u4e32\u65f6\u7528\u7684 stk \n\tstk[maxn];\n\n//\u5728\u5931\u914d\u6811\u4e2d\u52a0\u8fb9 \ninline void add_edge(re int u, re int v){ to[++ecnt] = v, nex[ecnt] = head[u], head[u] = ecnt; }\n\n//\u5728 Trie \u4e2d\u63d2\u5165 S \u96c6\u4e2d\u7f16\u53f7\u4e3a i \u7684\u5b57\u7b26\u4e32 str \nvoid ins(re char *str, re int i){\n\tre int u = 1, c;\n\twhile(c = *str++){\n\t\tc -= 'a';\n\t\tif (!nxt[u][c]) nxt[u][c] = ++ncnt;\n\t\tu = nxt[u][c];\n\t}\n\tmp[i] = u;\n}\n\n//\u5efa fail \nvoid build(){\n\tre int fro = 0, bac = 0, u, v;\n\tfail[1] = 1;\n\t_for(i, 0, maxc){\n\t\tv = nxt[1][i];\n\t\tif (v) que[bac++] = v, fail[v] = 1, add_edge(1, v);\n\t\telse nxt[1][i] = 1;\n\t}\n\t\n\twhile(bac > fro){\n\t\tu = que[fro++];\n\t\t_for(i, 0, maxc){\n\t\t\tv = nxt[u][i];\n\t\t\tif (v) que[bac++] = v, fail[v] = nxt[fail[u]][i], add_edge(fail[v], v);\n\t\t\telse nxt[u][i] = nxt[fail[u]][i];\n\t\t}\n\t}\n}\n\n//\u6c42\u51fa dfn \u5e8f\u548c\u6b27\u62c9\u5e8f \nvoid dfs(int u){\n\tori[pre[u] = ++dfn_clock] = u;\n\tid[fir[u] = ++euler_clock] = u;\n\tint v;\n\t_fev(p, u){\n\t\tv = to[p];\n\t\tdeep[v] = deep[u] + 1;\n\t\tdfs(v);\n\t\tid[++euler_clock] = u;\n\t}\n\tpst[u] = dfn_clock;\n\tlst[u] = euler_clock;\n}\n\n//st \u8868\u9884\u5904\u7406 \nvoid prepare(){\n\tlb[0] = -1;\n\t_rfor(i, 1, euler_clock) lb[i] = lb[i>>1]+1;\n\t_rfor(i, 1, euler_clock) st[0][i] = id[i];\n\tre int tmp = lb[euler_clock], x, y;\n\t_rfor(j, 1, tmp){\n\t\t_rfor(i, 1, euler_clock + 1 - (1<<j)){\n\t\t\tx = st[j-1][i]; y = st[j-1][i+(1<<(j-1))];\n\t\t\tif (deep[x] <= deep[y]) st[j][i] = x;\n\t\t\telse st[j][i] = y;\n\t\t}\n\t}\n\t\n}\n\n//st \u8868\u4e2d\u67e5\u8be2 \nint query(re int l, re int r){\n\tre int lbl = lb[r-l+1], len = 1<<lbl, x, y;\n\tx = st[lbl][l]; y = st[lbl][r-len+1];\n\tif (deep[x] <= deep[y]) return x;\n\telse return y;\n}\n\nint lca(re int x, re int y){\n\tif (x == y) return x;\n\tif (fir[x] > fir[y]) x^=y^=x^=y;\n\tif (lst[x] < fir[y]) return query(lst[x], fir[y]);\n\telse if (lst[x] > lst[y]) return x;\n\telse pf(\"Wrong in lst[x] <= lst[y]\\n\");\n}\n\n//\u6811\u72b6\u6570\u7ec4\u52a0\u4e0e\u6811\u72b6\u6570\u7ec4\u67e5\u8be2 \nvoid add(re int x, re int val){ for(; x <= dfn_clock; fwk[x] += val, x += (x&(-x))); }\nint qry(re int x){ re int val = 0; for(; x; val += fwk[x], x -= (x&(-x))); return val; }\n\n//\u5f80 T \u96c6\u4e2d\u52a0\u5165 str\n//\u6ce8\u610f\u5b9e\u9645\u4e0a stk \u91cc\u88c5\u7684\u662f\u8282\u70b9\u7684 dfn \u5e8f\u9996\n//ori[dfn \u5e8f\u9996] \u662f\u5bf9\u5e94\u7684\u8282\u70b9 \nvoid handle(re char *str){\n\tre int u = 1, top = 0; stk[top++] = u;\n\twhile(*str) stk[top++] = pre[u = nxt[u][(*str++)-'a']];\n\tsort(stk, stk+top);\n\ttop = unique(stk, stk+top) - stk;\n\tre int x, y;\n\tadd(stk[0], 1);\n\t_for(i, 1, top){\n\t\tx = ori[stk[i-1]], y = ori[stk[i]];\n\t\tint z = lca(x,y);\n\t\tadd(pre[y], 1);\n\t\tadd(pre[lca(x, y)], -1);\n\t}\n}\n\nint main(){\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\", \"r\", stdin);\n\t//freopen(\"out.txt\", \"w\", stdout);\n\t#endif\n\t\n\tre int n, m, opt, x;\n\tsf(\"%d\", &n);\n\t_rfor(i, 1, n){\n\t\tsf(\"%s\", str);\n\t\tins(str, i);\n\t}\n\tbuild();\n\tdeep[1] = 0;\n\tdfs(1);\n\tprepare();\n\t\n\tsf(\"%d\", &m);\n\t_rfor(i, 1, m){\n\t\tsf(\"%d\", &opt);\n\t\tif (opt == 1){\n\t\t\tsf(\"%s\", str);\n\t\t\thandle(str);\n\t\t}\n\t\telse{\n\t\t\tsf(\"%d\", &x);\n\t\t\tpf(\"%d\\n\", qry(pst[mp[x]]) - qry(pre[mp[x]]-1));\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n\n\n```\n\n\n\n\n",
        "postTime": 1626517072,
        "uid": 474113,
        "name": "MoYuFang",
        "ccfLevel": 7,
        "title": "\u3010P5840 [COCI2015]Divljak\u3011 \u9898\u89e3"
    }
]