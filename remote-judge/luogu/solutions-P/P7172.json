[
    {
        "content": "$\\text{Subtask 1}$ \u53ef\u4ee5\u76f4\u63a5\u6784\u9020\u6811\u3002$\\text{Subtask 2}$ \u53ef\u4ee5\u76f4\u63a5\u5411\u4e0a\u8df3\u3002\u8fd9\u4e24\u4e2a $\\text{Subtask}$ \u90fd\u975e\u5e38\u7b80\u5355\uff0c\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u6307\u5bfc\u610f\u4e49\uff08\n\n\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u9898\u6709\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff1a\u7b2c $i$ \u5c42\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u5177\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6811\u7684\u5f62\u6001\u4e2d\u4f1a\u5305\u542b\u5f88\u591a\u957f\u94fe\u3002\u5982\u4e0b\u56fe\uff0c\u88ab\u7ea2\u8272\u5706\u5708\u5708\u51fa\u7684\u662f\u4e00\u4e9b\u957f\u94fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/nanucxp3.png)\n\n\u5982\u679c\u6211\u4eec\u5c06\u8fd9\u4e9b\u957f\u94fe\u7f29\u6210\u70b9\uff0c\u5e76\u4fdd\u7559\u8fde\u901a\u6027\uff0c\u5f97\u5230\u4e00\u68f5\u65b0\u6811\uff0c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u6211\u4eec\u60ca\u5947\u7684\u53d1\u73b0\u65b0\u6811\u7684\u70b9\u6570\u4e3a $O(n)$\u3002\u8bc1\u660e\u5982\u4e0b\uff0c\u5047\u8bbe\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u662f\u4e00\u6761\u957f\u94fe\uff0c\u90a3\u4e48\u521d\u59cb\u6709 $n+1$ \u6761\u957f\u94fe\u3002\u6bcf\u4e2a\u5177\u6709\u4e24\u4e2a\u513f\u5b50\u7684\u70b9\u90fd\u4f1a\u4f7f\u5f97\u957f\u94fe\u4e2a\u6570 $+1$\u3002\u6545\u957f\u94fe\u4e2a\u6570\u4e0d\u8d85\u8fc7 $2n+1$\uff0c\u5373\u957f\u94fe\u4e2a\u6570\u662f $O(n)$ \u7ea7\u522b\u7684\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5efa\u51fa\u4e86\u8fd9\u68f5\u65b0\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u65b0\u6811\u4e0a\u67e5\u8be2 $\\text{lca}$ \uff0c\u4ece\u800c\u5f97\u5230\u539f\u6811\u4e0a $x,y$ \u7684 $\\text{lca}$ \u6240\u5728\u7684\u957f\u94fe\u7684\u7f16\u53f7\u3002\u73b0\u5728\u9700\u8981\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u5efa\u51fa\u65b0\u6811\u4ee5\u53ca\u5982\u4f55\u67e5\u8be2\u4efb\u610f\u4e00\u4e2a\u70b9\u6240\u5728\u7684\u957f\u94fe\u7f16\u53f7\u3002\n\n\u663e\u7136\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u65b0\u6811\u4e0a\u7684\u8fb9\u53ea\u4f1a\u662f\u90a3\u4e9b $a_i$ \u4e0e\u5176\u513f\u5b50\u76f8\u8fde\u7684\u8fb9\u3002\u53ef\u4ee5\u60f3\u5230\uff0c\u81ea\u5e95\u5411\u4e0b\u8003\u8651\u6bcf\u4e2a $a_i$\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4ece\u7b2c $i$ \u5c42\u5230\u7b2c $i-1$ \u5c42\uff0c\u67d0\u4e2a $a_i$ \u5177\u6709\u4e24\u4e2a\u513f\u5b50\u5bf9\u7b2c $i-1$ \u5c42\u8282\u70b9\u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u770b\u4f5c\u7b2c $i$ \u5c42\u7684\u8282\u70b9\u5220\u53bb\u53f3\u8282\u70b9\u5f97\u5230\u3002\u800c\u5982\u679c\u4ece\u7b2c $i-1$ \u5c42\u5230\u7b2c $i$ \u5c42\uff0c\u5219 $a_{i-1}+i$ \u4e4b\u540e\u7684\u70b9\u90fd\u5411\u540e\u79fb\u4e86\u4e00\u4f4d\u3002\n\n\u50cf\u8fd9\u79cd\u52a8\u6001\u5220\u9664\uff0c\u5e76\u67e5\u8be2\u5b9e\u9645\u7b2c $k$ \u4e2a\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5b9e\u73b0\uff0c\u5bf9\u6bcf\u5c42\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\uff0c\u53f6\u5b50\u4e0a\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u957f\u94fe\u7f16\u53f7\u3002\u5e76\u4e14\u53d1\u73b0\u6bcf\u5c42\u9664\u4e86\u4e0e $a_i$ \u76f8\u5173\u7684\u70b9\uff0c\u5176\u4ed6\u70b9\u4fe1\u606f\u90fd\u6ca1\u6709\u6539\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0d\u81f3\u4e8e $\\text{MLE}$\u3002\u5efa\u6811\u7684\u65f6\u5019\u968f\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u539f\u6811\u4e0a\u5f53\u524d\u957f\u94fe\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u5728\u67e5\u8be2\u5230 $\\text{lca}$ \u6240\u5728\u957f\u94fe\u7f16\u53f7\u540e\u76f4\u63a5\u5f97\u5230 $\\text{lca}$ \u4e86\u3002\n\n$\\color{green}\\text{tommy}$ \u4e00\u904d\u5c31\u8fc7\u4e86\uff0c\u8bf6\uff0c\u975e\u5e38\u5f00\u5fc3~\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<functional>\ntypedef long long ll;\nint n,cnt=0,tot=0;\nint rt[400015];\nstruct node {int id,size,lson,rson;} t[20000005];\nll a[200005],minn[400015];\nint skip[400015][25],dep[400015];\nint h[400015],to[800035],ver[800035];\ninline ll read() {\n\tll x=0,f=1;register char s=getchar();\n\twhile(s>'9'||s<'0') {if(s=='-') f=-1;s=getchar();}\n\twhile(s>='0'&&s<='9') {x=x*10+s-'0';s=getchar();}\n\treturn x*f;\n}\ninline void swap(int &x,int &y) {int tmp=x;x=y;y=tmp;}\ninline ll min(const ll &x,const ll &y) {return x<y? x:y;}\ninline void add(int x,int y) {to[++cnt]=y;ver[cnt]=h[x];h[x]=cnt;}\ninline void assign(int x,int y) {\n\tt[x].size=t[y].size; t[x].id=t[y].id;\n\tt[x].lson=t[y].lson; t[x].rson=t[y].rson;\n}\ninline void change(int &p,int lst,int l,int r,int x,int val) {\n\tp=++tot; assign(p,lst);\n\tif(l==r) {t[p].size=(val>0); t[p].id=val; return;}\n\tint mid=l+r>>1; \n\tif(x<=mid) change(t[p].lson,t[lst].lson,l,mid,x,val);\n\telse change(t[p].rson,t[lst].rson,mid+1,r,x,val);\n\tt[p].size=t[t[p].lson].size+t[t[p].rson].size;\n}\ninline std::pair<int,int> ask(int p,int l,int r,int rk) {\n\tif(l==r) return std::make_pair(l,t[p].id);\n\tint mid=l+r>>1;\n\tif(t[t[p].lson].size>=rk) return ask(t[p].lson,l,mid,rk);\n\treturn ask(t[p].rson,mid+1,r,rk-t[t[p].lson].size);\n}\ninline void prework(int x) {\n\tfor(register int i=1;i<=20;++i) skip[x][i]=skip[skip[x][i-1]][i-1]; \n\tfor(register int i=h[x];i;i=ver[i]) {int y=to[i]; skip[y][0]=x; dep[y]=dep[x]+1; prework(y);}\n}\ninline int LCA(int x,int y) {\n\tif(dep[x]>dep[y]) swap(x,y); //dep[x]<=dep[y]\n\tfor(register int i=20;i>=0;--i) {if(dep[x]<=dep[skip[y][i]]) y=skip[y][i];}\n\tif(x==y) return x;\n\tfor(register int i=20;i>=0;--i) {if(skip[x][i]!=skip[y][i]) x=skip[x][i],y=skip[y][i];}\n\treturn skip[x][0];\n}\ninline ll solve(ll x,ll y) {\n\tll levX=sqrt(2ll*x),levY=sqrt(2ll*y);\n\tif(levX*1ll*(levX+1)/2<x) ++levX;\n\tif(levY*1ll*(levY+1)/2<y) ++levY;\n\tint lca=LCA(ask(rt[levX],1,n+1,x-levX*1ll*(levX-1)/2).second,ask(rt[levY],1,n+1,y-levY*1ll*(levY-1)/2).second);\n\treturn min(minn[lca],min(x,y));\n}\nint main() {\n\tn=read(); int Q=read(),type=read();\n\tfor(register int i=1;i<=n;++i) a[i]=read();\n\tfor(register int i=1;i<=n+1;++i) {\n\t\tminn[i]=n*1ll*(n+1)/2+i;\n\t\tchange(rt[n+1],rt[n+1],1,n+1,i,i);\n\t}\n\tint num=n+1;\n\tfor(register int i=n;i;--i) {\n\t\tint ind=a[i]-i*1ll*(i-1)/2;\n\t\tstd::pair<int,int> tmp1=ask(rt[i+1],1,n+1,ind);\n\t\tstd::pair<int,int> tmp2=ask(rt[i+1],1,n+1,ind+1);\n\t\tminn[++num]=a[i]; add(num,tmp1.second); add(num,tmp2.second);\n\t\tchange(rt[i],rt[i+1],1,n+1,tmp1.first,num);\n\t\tchange(rt[i],rt[i],1,n+1,tmp2.first,0);\n\t}\n\tdep[num]=1; prework(num);\n\tll ans=0; \n\twhile(Q--) {\n\t\tll x=read(),y=read();\n\t\tx=(x-1+type*ans)%((n+1)*1ll*(n+2)/2)+1;\n\t\ty=(y-1+type*ans)%((n+1)*1ll*(n+2)/2)+1;\n\t\tprintf(\"%lld\\n\",ans=solve(x,y)); \n\t}\n\treturn 0;\n}\n```",
        "postTime": 1614782924,
        "uid": 95244,
        "name": "tommymio",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P7172\u3010[COCI2020-2021#3] Specijacija\u3011"
    },
    {
        "content": "\u5927\u81f4\u9898\u610f\uff1a\u4e00\u68f5 $n+1$ \u5c42\u7684\u6811\uff0c\u7b2c $i$ \u5c42\u6709 $i$ \u4e2a\u7ed3\u70b9\uff0c\u6811\u4ece\u4e0a\u5f80\u4e0b\uff0c\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u4ece $1$ \u5f00\u59cb\u7f16\u53f7\uff0c\u7b2c $i$ \u5c42\u7684\u7ed3\u70b9 $a_i$ \u4f1a\u6709\u4e24\u4e2a\u513f\u5b50\uff0c\u540c\u5c42\u5176\u5b83\u70b9\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u513f\u5b50\u4ece\u4e0b\u4e00\u5c42\u7684\u6700\u5de6\u7ed3\u70b9\u5f00\u59cb\u4f9d\u6b21\u5206\u914d\uff0c$q$ \u6b21\u8be2\u95ee\u4e24\u4e2a\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c**\u5f3a\u5236\u5728\u7ebf**\u3002\n\n$1\\leq n,q\\leq 2\\times 10^5$\u3002\n\n\u9996\u5148\u8003\u8651\u8fd9\u68f5\u6811\u91cc\u4f1a\u6709\u5f88\u591a\u7684\u76f4\u94fe\uff0c\u5373\u8fd9\u6761\u94fe\u4e0a\u7684\u70b9\u9664\u4e86\u94fe\u5c3e\u90fd\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002\u5982\u679c\u6211\u4eec\u7528\u94fe\u5c3e\u7ed3\u70b9\u4ee3\u66ff\u8fd9\u6761\u76f4\u94fe\uff0c\u4fdd\u7559\u8fde\u901a\u6027\u5efa\u6811\uff0c\u90a3\u4e48\u6811\u7684\u70b9\u6570\u4e3a\u6700\u540e\u4e00\u5c42\u7684 $n+1$ \u4e2a\u70b9\u4ee5\u53ca\u5411\u4e0a $n$ \u5c42\u6bcf\u5c42\u65b0\u589e\u7684\u4e00\u4e2a\u70b9\uff0c\u5373 $2n+1=O(n)$\u3002\n\n\u601d\u8003\u8fd9\u68f5\u6811\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53d1\u73b0\u8be2\u95ee\u7684\u7b54\u6848\u8981\u4e48\u662f\u5176\u4e2d\u4e00\u4e2a\u70b9\uff0c\u8981\u4e48\u662f\u4e00\u4e2a\u94fe\u5c3e\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u5b9e\u9645\u5efa\u51fa\u4e86\u8fd9\u68f5\u6811\uff0c\u5e76\u80fd\u67e5\u8be2\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u76f4\u94fe\u7f16\u53f7\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u56de\u7b54\u8be2\u95ee\u3002\n\n\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5c42\u70b9\u5206\u522b\u7ef4\u62a4\u5b83\u4eec\u5bf9\u5e94\u7684\u76f4\u94fe\u7f16\u53f7\uff0c\u89c2\u5bdf\u81ea\u5e95\u5411\u4e0a\u7ef4\u62a4\u7684\u65f6\u5019\u7684\u66f4\u65b0\u53ef\u4ee5\u53d1\u73b0\uff0c\u4ece\u7b2c $i+1$ \u5c42\u5230\u7b2c $i$ \u5c42\uff0c\u53ea\u6709\u7b2c $i$ \u5c42\u7684\u7279\u6b8a\u7ed3\u70b9\u548c\u5b83\u540e\u9762\u7684\u4e00\u4e2a\u4f4d\u7f6e\u7684\u7f16\u53f7\u5408\u5e76\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u7f16\u53f7\uff0c\u5373\u53ea\u6709 **\u5355\u70b9\u5220\u9664\uff0c\u67e5\u8be2\u7b2c $k$ \u4e2a\u6ca1\u88ab\u5220\u9664\u7684\u5143\u7d20\uff0c\u5355\u70b9\u4fee\u6539** \u4e09\u79cd\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u7ecf\u5178\u7684\u4e3b\u5e2d\u6811\u6765\u89e3\u51b3\u3002\n\n\u4e8e\u662f\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n+q\\log n)$\u3002\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/g6gk92b6) \u4e0d\u5230 100 \u884c\uff0c\u4e0d\u5230 3kb\uff0c\u6781\u5176\u597d\u5199\u3002",
        "postTime": 1630323925,
        "uid": 173685,
        "name": "\u6478\u9c7c\u9171",
        "ccfLevel": 8,
        "title": "P7172"
    },
    {
        "content": "\u8bf4\u5b9e\u8bdd\uff0c\u601d\u7ef4\u96be\u5ea6\u4eca\u5929\u6a21\u62df\u8d5b\u4e09\u9053\u6700\u4f4e\uff0c\u8003\u573a\u4e0a\u57fa\u672c\u770b\u5b8c\u5c31\u4f1a\u4e86\uff0c\u4f46\u662f\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u6ca1\u5b66\u8fc7\u81ea\u5df1\u7814\u7a76\u4e86\u4e00\u4e0b\u5199\u5199\u5bc4\u6389\u4e86\u6700\u540e\u62fc\u66b4\u529b\u8fde\u79bb\u7ebf\u5206\u90fd\u6ca1\u62ff\u5230\uff0c\u54ed\u54ed\u3002\n\n\u8fd8\u8c03\u4e86\u534a\u5929\uff0c\u6700\u540e\u662f\u6570\u7ec4\u5f00\u5c0f\u4e86\uff0c\u7ef7\u4e0d\u4f4f\u4e86\u3002\n\n\u96be\u5ea6\u5728\u4e8e\u9700\u8981\u4f1a\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\uff0c\u56e0\u4e3a\u5b83\u5f3a\u5236\u5728\u7ebf\u3002\n\n-------------------------------------------------------\n\n\u9996\u5148\u8fd9\u4e2a\u4e1c\u897f\u5f88\u50cf\u4e00\u4e2a\u6ca1\u6709\u4f18\u5316\u8fc7\u7684 leafy tree \u7ed3\u6784\uff0c\u5c31\u662f\u5f88\u591a\u8282\u70b9\u90fd\u662f\u5947\u6570\u513f\u5b50\u53ea\u6709\u6781\u5c11\u6570\u8282\u70b9\u662f\u5076\u6570\u513f\u5b50\u3002\n\n\u8003\u8651\u76f4\u63a5\u8fdb\u884c\u4e00\u4e2a compress\uff0c\u5c31\u53ef\u4ee5\u5c06\u6811\u53d8\u6210\u4e00\u68f5\u513f\u5b50\u4e3a\u5947\u6570/\u5076\u6570\u7684\u8282\u70b9\u4e2a\u6570\u6570\u91cf\u7ea7\u76f8\u540c\u7684\u6811\uff0c\u53ef\u4ee5\u7406\u89e3\u6210\u865a\u6811\uff0c\u4f46\u662f\u4e25\u8c28\u6765\u8bf4\u6211\u89c9\u5f97\u662f\u4e00\u68f5\u6027\u8d28\u4e0d\u662f\u90a3\u4e48\u597d\u7684 \u5047 leafy tree \u7ed3\u6784\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\u5efa\u8fd9\u68f5\u6811\u7684\u8fc7\u7a0b\u7b49\u4ef7\u4e8e\u628a\u6240\u6709 $a$ \u5e8f\u5217\u4e2d\u7684\u70b9\u4e0e\u513f\u5b50\u4eec\u62ff\u51fa\u6765\u5efa\u865a\u6811\uff0c\u7136\u540e\u7ef4\u62a4\u538b\u7f29\u7684\u94fe\u4e0a\u6bcf\u4e2a\u8282\u70b9\u5904\u4e8e\u7684\u94fe\u7684\u9876\u7aef\u662f\u8c01\u3002\u67e5\u8be2 LCA \u7684\u65f6\u5019\u7528\u8fd9\u4e2a\u4e1c\u897f\u505a\u7c7b\u4f3c\u91cd\u94fe\u5256\u5206\u4e0a\u627e LCA \u7684\u65b9\u6cd5\u5373\u53ef\u3002\n\n\u96be\u70b9\u662f\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5904\u4e8e\u7684\u94fe\u7684\u9876\u7aef\u662f\u8c01\u3002\u8fd9\u4e2a\u4e5f\u6ca1\u6709\u4efb\u4f55\u601d\u7ef4\u96be\u5ea6\uff0c\u4ece\u4e0a\u5f80\u4e0b\u76f4\u63a5\u5bf9\u4e8e\u6bcf\u5c42\u770b\u6210\u4e00\u4e2a\u5386\u53f2\u7248\u672c\uff0c\u7528\u5e73\u8861\u6811\uff0c\u5e73\u8861\u6811\u7684\u952e\u503c\u662f\u5e8f\u5217\u7ef4\uff0c\u7ef4\u62a4\u7684\u4e1c\u897f\u5c31\u662f\u9876\u7aef\u8282\u70b9\u3002\u9700\u8981\u652f\u6301\u64cd\u4f5c\u5c31\u53ea\u6709\u5355\u70b9\u4fee\u6539\uff0c\u5355\u70b9\u63d2\u503c\uff0c\u8fd9\u4e2a\u5e73\u8861\u6811\u968f\u4fbf\u641e\u641e\u5c31\u505a\u5b8c\u4e86\u3002\n\n\u9700\u8981\u6ce8\u610f\u7a7a\u95f4\u5e38\u6570\u548c\u65f6\u95f4\u5e38\u6570\u3002\n\n\u61d2\u5f97\u5361\u5e38\u4e86\uff0c\u6d1b\u8c37\u8fc7\u4e86\u61d2\u5f97\u7ba1\u4e86\u3002\n\n```cpp\n// ubsan: undefined\n// accoders\n#include \"bits/stdc++.h\"\nusing namespace std;\n#define int ll\n#define ll long long\nconst int Len = 2e5 + 5;\nll dp[Len << 2],A[Len << 2];\nint pp,tot,n,q,t,m,a,b,c,rt[Len << 2];\nstruct node\n{\n\tint l,r,siz;\n\tll val;\n\tnode(){l = r = val = siz = 0;}\n\tnode(int L,int R,ll VAL,int SIZ){l = L , r = R , val = VAL , siz = SIZ;}\n}fhq[Len * 120];\ninline void update(int x){fhq[x].siz = fhq[fhq[x].l].siz + fhq[fhq[x].r].siz + 1;}\ninline int Id(){return ++ tot;}\ninline int clone(ll w)\n{\n\ttot ++;\n\tfhq[tot] = node(0 , 0 , w , 1);\n\treturn tot;\n}\nvoid split(int now,int Sz,int &x,int &y)\n{\n\tif(!now){x = y = 0;return;}\n\tif(fhq[fhq[now].l].siz + 1 <= Sz)\n\t{\n\t\tx = Id();\n\t\tfhq[x] = fhq[now];\n\t\tsplit(fhq[x].r , Sz - (fhq[fhq[now].l].siz + 1) , fhq[x].r , y);\n\t\tupdate(x);\n\t}\n\telse\n\t{\n\t\ty = Id();\n\t\tfhq[y] = fhq[now];\n\t\tsplit(fhq[y].l , Sz , x , fhq[y].l);\n\t\tupdate(y);\n\t}\n}\nint merge(int x,int y)\n{\n\tif(!x || !y) return x + y;\n\tif(rand() & 1) \n\t{\n\t\tint rt = Id();\n\t\tfhq[rt] = fhq[x];\n\t\tfhq[rt].r = merge(fhq[rt].r , y);\n\t\tupdate(rt);\n\t\treturn rt;\n\t}\n\telse\n\t{\n\t\tint rt = Id();\n\t\tfhq[rt] = fhq[y];\n\t\tfhq[rt].l = merge(x , fhq[rt].l);\n\t\tupdate(rt);\n\t\treturn rt;\n\t}\n}\ninline void ins(int &rt,int sz,ll w)\n{\n\tsplit(rt , sz , rt , a);\n\trt = merge(rt , clone(w));\n\trt = merge(rt , a);\n}\ninline void del(int &rt,int sz)\n{\n\tsplit(rt , sz - 1 , rt , a);\n\tsplit(a , 1 , a , b);\n\trt = merge(rt , b);\n}\nvoid change(int &rt,int sz,ll w)\n{\n\tint lsize = fhq[fhq[rt].l].siz;\n\tif(lsize + 1 == sz) \n\t{\n\t\tint p = Id();\n\t\tfhq[p] = fhq[rt];\n\t\tfhq[p].val = w;\n\t\trt = p;\n\t\tupdate(rt);\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tint p = Id();\n\t\tfhq[p] = fhq[rt];\n\t\trt = p;\n\t\tif(sz < lsize + 1) change(fhq[rt].l , sz , w);\n\t\telse change(fhq[rt].r , sz - (lsize + 1) , w);\n\t\tupdate(rt);\n\t\treturn;\n \t}\n}\ninline ll read() {\n    char ch = getchar();\n    ll x = 0, f = 1;\n    while (ch < '0' || ch > '9') {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while ('0' <= ch && ch <= '9') {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\ninline void write(ll x) {\n    if (x < 0)\n        putchar('-'), x = -x;\n    if (x > 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\ninline ll getdep(ll x) \n{\n    ll l = 1 , r = n + 1 , as = 0;\n    while (l <= r) \n\t{\n        int mid = (l + r) >> 1;\n        if (dp[mid] >= x) as = mid , r = mid - 1;\n        else l = mid + 1;\n    }\n    return as;\n}\ninline ll Getrk(int &rt,ll rk)\n{\n\tint u = rt;\n\tif(fhq[u].siz < rk) return -1;\n\twhile(u)\n\t{\n\t\tint lsize = fhq[fhq[u].l].siz;\n\t\tif(lsize + 1 == rk) return fhq[u].val;\n\t\telse if(rk <= lsize) u = fhq[u].l;\n\t\telse rk -= (lsize + 1) , u = fhq[u].r;\n\t}\n\treturn -1;\n}\nint nb;map<ll,ll> mp,pm;\nmap<pair<ll,ll>,ll> mpp;\nint head[Len << 2],cnt,dfn[Len << 2],tim,siz[Len << 2],son[Len << 2],top[Len << 2],dep[Len << 2],fa[Len << 2];\nstruct mode\n{\n\tint next,to;\n}edge[Len << 3];\nvoid add(int from,int to)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\thead[from] = cnt;\n}\nvoid dfs1(int x,int f)\n{\n\tdep[x] = dep[f] + 1;\n\tsiz[x] = 1;\n\tfa[x] = f;\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == f) continue;\n\t\tdfs1(to , x);\n\t\tsiz[x] += siz[to];\n\t\tif(siz[to] > siz[son[x]]) son[x] = to;\n\t}\n}\nvoid dfs2(int x,int topf)\n{\n\ttop[x] = topf;\n\tdfn[x] = ++ tim;\n\tif(!son[x]) return;\n\tdfs2(son[x] , topf);\n\tfor(int e = head[x] ; e ; e = edge[e].next)\n\t{\n\t\tint to = edge[e].to;\n\t\tif(to == fa[x] || to == son[x]) continue;\n\t\tdfs2(to , to);\t\n\t}\n}\ninline int lca(int x,int y)\n{\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x , y);\n\t\tx = fa[top[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\ninline ll LCA(ll x,ll y)\n{\n\tif(x == 1 || y == 1) return 1;\n\tif(x > y) swap(x , y);\n\tll dpx = getdep(x) , dpy = getdep(y) , nmx = x - dp[dpx - 1] , nmy = y - dp[dpy - 1] , fax = Getrk(rt[dpx - 1] , nmx) , fay = Getrk(rt[dpy - 1] , nmy);\n\tif(fax == fay) return x;\n\tint xx = mp[fax] , yy = mp[fay] , llca = lca(xx , yy);\n\tif(llca == xx) return x;\n\treturn pm[llca];\n}\nsigned main()\n{\n\tfreopen(\"tree.in\",\"r\",stdin);\n\tfreopen(\"tree.out\",\"w\",stdout);\n\tsrand(time(0));\n\tn = read() , q = read() , t = read();\n\tfor(int i = 1 ; i <= n ; i ++) A[i] = read();\n\tfor(int i = 1 ; i <= n + 1 ; i ++) dp[i] = 1ll * i * (i + 1) / 2;\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\tll nms = A[i] - dp[i - 1] , now1 = dp[i] + nms , now2 = dp[i] + nms + 1;\n\t\tif(!mp[A[i]]){mp[A[i]] = ++ pp;pm[pp] = A[i];}\n\t\tif(!mp[now1]){mp[now1] = ++ pp;pm[pp] = now1;}\n\t\tif(!mp[now2]){mp[now2] = ++ pp;pm[pp] = now2;}\n\t\trt[i] = rt[i - 1];\n\t\tchange(rt[i] , nms , now1);//42271 8920715078;\n\t\tins(rt[i] , nms , now2);\n\t\tif(!mpp[make_pair(mp[A[i]] , mp[now1])])\n\t\t{\n\t\t\tadd(mp[A[i]] , mp[now1]);\n\t\t\tmpp[make_pair(mp[A[i]] , mp[now1])] = 1;\n\t\t} \n\t\tif(!mpp[make_pair(mp[A[i]] , mp[now2])])\n\t\t{\n\t\t\tadd(mp[A[i]] , mp[now2]);\n\t\t\tmpp[make_pair(mp[A[i]] , mp[now2])] = 1;\n\t\t}\n\t\tif(i != 1)\n\t\t{\n\t\t\tll ff = Getrk(rt[i - 1] , nms);\n\t\t\tif(ff != A[i])\n\t\t\t{\n\t\t\t\tif(!mp[ff]){mp[ff] = ++ pp;pm[pp] = ff;}\n\t\t\t\tif(!mpp[make_pair(mp[ff] , mp[A[i]])])\n\t\t\t\t{\n\t\t\t\t\tadd(mp[ff] , mp[A[i]]);\n\t\t\t\t\tmpp[make_pair(mp[ff] , mp[A[i]])] = 1;\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t}\n\tdfs1(1 , 0);\n\tdfs2(1 , 1);\n\tconst ll mod = 1ll * (n + 1) * (n + 2) / 2;ll lstans = 0;\n\tfor(int i = 1 ; i <= q ; i ++)\n\t{\n\t\tll x = (read() - 1 + t * lstans) % mod + 1 , y = (read() - 1 + t * lstans) % mod + 1;\n\t\twrite(lstans = LCA(x , y)) , putchar('\\n');\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1659617711,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P7172 [COCI2020-2021#3] Specijacija"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u5206\u5757\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u628a\u6bcf\u4e00\u4e2a\u70b9\u8868\u793a\u6210 $(level,number)$\uff0c$level$ \u8868\u793a\u8fd9\u4e2a\u70b9\u6240\u5728\u7684\u5c42\u6570\uff0c$ number$ \u8868\u793a\u8fd9\u4e2a\u70b9\u662f\u8fd9\u4e00\u5c42\u7684\u7b2c\u51e0\u4e2a\u70b9\u3002\n\n\u540c\u7406\u53ef\u4ee5\u628a $a$ \u6570\u7ec4\uff0c\u548c\u8be2\u95ee\u7684 $x,y$ \u90fd\u8868\u793a\u6210\u8fd9\u79cd\u5f62\u5f0f\u3002\n\n\u8003\u8651\u5982\u679c\u70b9 $x$ \u79fb\u52a8\u5230 $x$ \u7684\u7236\u4eb2\uff0c\u90a3\u4e48 $level$ \u80af\u5b9a\u51cf\u4e00\uff0c\u800c\u53ea\u6709 $a_{i}<number$ \u65f6\uff0c$number$ \u4f1a\u51cf\u4e00\uff0c\u5426\u5219\u4e0d\u4f1a\u53d8\u3002\u4e5f\u5c31\u662f\u8bf4:\n\n```cpp\nnumber-=(a[i]<number).\n```\n\u8003\u8651\u5bf9 $a$ \u5e8f\u5217\u5206\u5757\uff0c\u8bbe $trans_{x,v}$ \u8868\u793a\u7b2c $x$ \u4e2a\u5757\uff0c\u8fdb\u5165\u8fd9\u4e2a\u5757\u4e4b\u524d$number$ \u4e3a $v$\uff0c\u7edf\u8ba1\u8fc7\u8fd9\u4e2a\u5757\u4e4b\u540e\uff0c$number$ \u662f\u591a\u5c11\u3002\n\n\u90a3\u4e48\u501f\u52a9 $trans$ \u6570\u7ec4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4eff\u7167\u6c42 lca \u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u80fd\u8df3\u8fc7\u4e00\u4e2a\u5757\uff0c\u5c31\u8df3\u8fc7\u4e00\u4e2a\u5757\uff0c\u5426\u5219\u5c31\u4e00\u5c42\u4e00\u5c42\u8df3\uff0c\u663e\u7136\u53ef\u4ee5\u5728 $O(q\\sqrt n)$\u3002\u7684\u65f6\u95f4\u5185\u6c42\u51fa lca \u3002\n\n\u4e8e\u662f\u53ea\u9700\u6c42\u51fa $trans$ \u6570\u7ec4\u5c31\u884c\u4e86\u3002\n\n\u8003\u8651\u589e\u91cf\u8ba1\u7b97\uff0c\u7531 $trans_{x,v}$ \u5f97\u5230 $trans_{x,v+1}$\u3002\n\n\u8bbe\u4f7f\u5f97 $number$ \u51cf\u5c11\u7684\u4f4d\u7f6e\u4e3a\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u4e00\u4e2a\u6027\u8d28\u5c31\u662f\u8bf4\u589e\u91cf\u7684\u65f6\u5019\u8981\u4e48\u65b0\u589e\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\uff0c\u539f\u6765\u5c31\u662f\u5173\u952e\u70b9\u7684\u73b0\u5728\u4e00\u5b9a\u8fd8\u662f\u5173\u952e\u70b9\u3002\n\n\u8003\u8651\u600e\u4e48\u6c42\u51fa\u65b0\u589e\u52a0\u7684\u5173\u952e\u70b9\uff0c\u8003\u8651\u8bbe $pre_i$ \u8868\u793a $i$ \u4e4b\u524d\u9009\u7684\u5173\u952e\u70b9\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u6210\u4e3a\u5173\u952e\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53 $a_i<v+1-pre_i$ \u3002\n\n\u90a3\u4e48\u65b0\u589e\u52a0\u7684\u5c31\u662f\u6700\u9760\u53f3\u7684\u4e00\u4e2a\u7b26\u5408\u8fd9\u4e2a\u6761\u4ef6\u7684\u4f4d\u7f6e\u3002\n\n\u8fd9\u4e2a\u6761\u4ef6\u4e5f\u5c31\u662f\uff1a\n\n$a_i+pre_i<v+1$\n\n\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4 $a_i+pre_i$\n\n\u90a3\u4e48\u663e\u7136\u53ea\u9700\u8981\u652f\u6301\u533a\u95f4\u52a0\u5c31\u53ef\u4ee5\u4e86\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u5224\u65ad\u6700\u9760\u524d\u7684\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\u662f\u5426\u5c0f\u4e8e $v+1$ \u5c31\u884c\u4e86\u3002\n\n\u590d\u6742\u5ea6\u662f $O(n\\sqrt n \\log n)$\n\n\u8003\u8651\u4f18\u5316\u4e00\u4e0b\uff0c\u56e0\u4e3a\u6700\u591a\u5c31\u53ea\u4f1a\u628a\u8fd9\u4e2a\u5757\u5168\u9009\u5b8c\uff0c\u56e0\u6b64\u53d8\u5316\u91cf\u662f $O(\\sqrt n)$ \u7684\uff0c\u8fd9\u610f\u5473\u7740\u6709\u5927\u91cf\u7684\u4f4d\u7f6e\u7684 $trans$ \u662f\u76f8\u7b49\u7684\uff0c\u53ef\u4ee5\u4e4b\u95f4\u8df3\u8fc7\u53bb\u3002\n\n\u590d\u6742\u5ea6 $O(n\\sqrt n+n\\log n)$\n\n\u4e0d\u8fc7\u56e0\u4e3a\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u5b9e\u6d4b\u8bbe\u5757\u957f\u4e3a $1700$ \u6bd4\u8f83\u4f18\u79c0\u3002\n\n\u4e0d\u8fc7\u672c\u4eba\u5b9e\u73b0\u4e0d\u597d\uff0c\u5fc5\u987b\u5f00 O2 \u624d\u80fd\u901a\u8fc7\u3002\n\n```cpp\nconst int BL = 220;\nint tr[BL][N];\nint dec[N];\nint bel[N], L[N], R[N];\nint B;\nLL tot[N];\nint Min[N * 4], tag[N * 4], Pos[N * 4];\nvoid pushup(int k) {\n    Min[k] = Min[k << 1 | 1];\n    Pos[k] = Pos[k << 1 | 1];\n    if (Min[k << 1] < Min[k << 1 | 1])\n        Min[k] = Min[k << 1], Pos[k] = Pos[k << 1];\n}\nvoid Build(int k, int l, int r) {\n    tag[k] = 0;\n    if (l == r) {\n        Min[k] = dec[l];\n        Pos[k] = l;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    Build(k << 1, l, mid);\n    Build(k << 1 | 1, mid + 1, r);\n    pushup(k);\n}\nvoid Push(int k, int v) {\n    tag[k] += v;\n    Min[k] += v;\n}\nvoid pushdown(int k) {\n    if (tag[k]) {\n        Push(k << 1, tag[k]);\n        Push(k << 1 | 1, tag[k]);\n        tag[k] = 0;\n    }\n}\nvoid Addate(int k, int l, int r, int L, int R) {\n    if (L <= l && r <= R) {\n        Push(k, 1);\n        return;\n    }\n    pushdown(k);\n    int mid = (l + r) >> 1;\n    if (L <= mid)\n        Addate(k << 1, l, mid, L, R);\n    if (R > mid)\n        Addate(k << 1 | 1, mid + 1, r, L, R);\n    pushup(k);\n}\nvoid Ban(int k, int l, int r, int x) {\n    if (l == r) {\n        Min[k] = 1e9;\n        return;\n    }\n    pushdown(k);\n    int mid = (l + r) >> 1;\n    if (x <= mid)\n        Ban(k << 1, l, mid, x);\n    else\n        Ban(k << 1 | 1, mid + 1, r, x);\n    pushup(k);\n}\nvoid rebuild(int x) {\n    Build(1, L[x], R[x]);\n    int len = 0;\n    for (int i = 1; i <= n + 1; i++) {\n        int o = Min[1];\n        if (o >= 1e9) {\n            for (; i <= n + 1; i++) tr[x][i] = i - len;\n            break;\n        }\n        for (int j = i; j <= o; j++) tr[x][j] = j - len;\n        len++;\n        tr[x][o + 1] = o + 1 - len;\n        int p = Pos[1];\n        Ban(1, L[x], R[x], p);\n        Addate(1, L[x], R[x], L[x], p);\n        i = o + 1;\n    }\n}\nint pos(LL x) {\n    int l = 0, r = n, mid, ans;\n    while (l <= r) {\n        mid = (l + r) >> 1;\n        if (tot[mid] < x)\n            ans = mid, l = mid + 1;\n        else\n            r = mid - 1;\n    }\n    return ans + 1;\n}\ninline int reduce(int x, int l, int r) {\n    for (int i = r - 1; i >= l; i--) x -= (dec[i] < x);\n    return x;\n}\nint LittleFools(int i, int x) { return reduce(x, L[bel[i]], i); }\nLL LittleFind(int i, int x, int y) {\n    for (i--; x != y && i >= 1; i--) {\n        x -= (dec[i] < x);\n        y -= (dec[i] < y);\n    }\n    return tot[i] + x;\n}\ninline LL LCA(int i, int x, int j, int y) {\n    while (abs(bel[i] - bel[j]) > 1) {\n        if (bel[i] < bel[j])\n            swap(i, j), swap(x, y);\n        if (i != L[bel[i]])\n            x = LittleFools(i, x), i = L[bel[i]];\n        i = L[bel[i] - 1], x = tr[bel[i]][x];\n    }\n    if (i < j)\n        swap(i, j), swap(x, y);\n    x = reduce(x, j, i);\n    i = j;\n    int fi = LittleFools(i, x), fj = LittleFools(j, y);\n    bool fl = 0;\n    while (fi != fj) {\n        if (!fl)\n            i = L[bel[i]], j = i;\n        else\n            i = L[bel[i] - 1], j = i;\n        x = fi;\n        y = fj;\n        fl = 1;\n        fi = tr[bel[i] - 1][x];\n        fj = tr[bel[j] - 1][y];\n    }\n    return LittleFind(i, x, y);\n}\nvoid solve() {\n    B = 1700;\n    for (int i = 1; i <= n; i++) {\n        dec[i] = a[i] - tot[i - 1];\n        tot[i] = tot[i - 1] + i;\n    }\n    for (int i = 1; i <= n; i++) {\n        bel[i] = (i - 1) / B + 1;\n        if (!L[bel[i]])\n            L[bel[i]] = i;\n        R[bel[i]] = i;\n    }\n    int cnt = bel[n];\n    bel[n + 1] = cnt + 1;\n    L[bel[n + 1]] = n + 1;\n    for (int i = 1; i <= cnt; i++) rebuild(i);\n    LL sum = 1ll * (n + 1) * (n + 2) / 2;\n    LL ans = 0;\n    while (m--) {\n        LL x, y;\n        read(x);\n        read(y);\n        x = (x - 1 + 1ll * tp * ans) % sum + 1;\n        y = (y - 1 + 1ll * tp * ans) % sum + 1;\n        int i = pos(x), u = x - tot[i - 1];\n        int j = pos(y), v = y - tot[j - 1];\n        ans = LCA(i, u, j, v);\n        printf(\"%lld\\n\", ans);\n    }\n}\n```",
        "postTime": 1658738263,
        "uid": 128215,
        "name": "Larunatrecy",
        "ccfLevel": 9,
        "title": "[COCI2020-2021#3] Specijacija \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0:\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6b63\u6574\u6570\u5e8f\u5217 $a_1,a_1,...,a_n$\u3002\u5176\u4e2d $\\frac{i(i-1)}{2}<a_i\\leq \\frac{i(i+1)}{2}$ \u3002 \n\n\u8fd9\u4e2a\u5e8f\u5217\u4f1a\u751f\u6210\u4e00\u4e2a\u5305\u542b $\\frac{(n+1)(n+2)}{2}$ \u4e2a\u8282\u70b9\u7684\u6811\u3002\u6811\u9ad8\u4e3a $n+1$\u3002\n\n\u6811\u7684\u7b2c $i$ \u5c42\u5305\u542b\u4e86\u8282\u70b9 $\\frac{i(i-1)}{2}+1,...,\\frac{i(i+1)}{2}$ \u3002\u5728\u8fd9\u4e00\u5c42\u4e2d\uff0c\u53ea\u6709\u8282\u70b9 $a_i$ \u7531\u4e24\u4e2a\u5b69\u5b50\uff0c\u5176\u4ed6\u7684\u8282\u70b9\u90fd\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u3002\n\n\u4f60\u7684\u95ee\u9898\u662f\u56de\u7b54 $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u4f1a\u8be2\u95ee\u4f60\u8282\u70b9 $x,y$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n### \u8f93\u5165\u63cf\u8ff0:\n\n\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e09\u4e2a\u6b63\u6574\u6570 $n,q,t(1\\leq n,q\\leq 2\\times 10^5,t\\in {0,1})$\u3002\u5206\u522b\u8868\u793a\u751f\u6210\u6811\u7684\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u67e5\u8be2\u7684\u6570\u76ee\u4ee5\u53ca\u662f\u5426\u5f3a\u5236\u5728\u7ebf\u3002 \n\n\u8f93\u5165\u7684\u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4 $a_i(\\frac{i(i-1)}{2}<a_i\\frac{i(i+1)}{2})$\u3002\u8fd9\u5c31\u662f\u751f\u6210\u6811\u7684\u6570\u7ec4\u3002\u63a5\u4e0b\u6765\u7684 $n$ \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570 $\\tilde{x},\\tilde{y}(1\\leq \\tilde{x_i},\\tilde{y_i}\\leq \\frac{i(i+1)}{2})$\u3002\u8fd9\u4e24\u4e2a\u6570\u4f1a\u51b3\u5b9a\u6700\u7ec8\u8be2\u95ee\u7684 $x,y$\u3002 \u6211\u4eec\u4ee4 $z_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u8be2\u95ee\u64cd\u4f5c\u7684\u7b54\u6848\uff0c\u5e76\u4ee4 $z_0=0$\u3002$x_i$ \u548c $y_i$ \u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u6cd5\u6c42\u51fa:\n\n$x_i=((\\tilde{x_i}-1+t\\times z_{i-1})\\ mod\\ \\frac{(n+1)\n(n+2)}{2})+1$\n\n$y_i=((\\tilde{y_i}-1+t\\times z_{i-1})\\ mod\\ \\frac{(n+1)(n+2)}{2})+1$\n\n$mod$ \u8868\u793a\u6574\u6570\u53d6\u6a21\u8fd0\u7b97\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c $t=0$\uff0c\u90a3\u4e48\u5c31\u6709 $x_i=\\tilde{x_i}$ \u800c $y_i=\\tilde{y_i}$\u3002\n\n### \u8f93\u51fa\u63cf\u8ff0:\n\n\u8f93\u51fa $q$ \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5373 $x,y$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u7f16\u53f7\u3002\n\n### \u5206\u6790:\n\n#### 20Pts:\n\n\u76f4\u63a5\u5efa\u51fa\u4e00\u68f5\u6811\u7136\u540e\u8dd1\u4e2a LCA \u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q\\log_2n)$\uff0c\u4f46 $n\\leq 1000$\u3002\n\n#### 100Pts:\n\n\u6ce8\u610f\uff1a\u6b64\u65b9\u6cd5\u60e8\u906d\u5361\u5e38\uff0c\u5728\u8fd0\u6c14\u597d\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62ff\u5230\u6ee1\u5206\uff0c\u5426\u5219\u89c6\u60c5\u51b5\u968f\u673aTLE\u3002\u8fd9\u73a9\u610f\u786e\u5b9e\u6709\u51e0\u7387\u901a\u8fc7\uff0c\u4e0d\u4fe1\u770b\u6211\u63d0\u4ea4\u8bb0\u5f55\u3002\n\n\u7531\u4e8e\u9700\u8981\u652f\u6301\u5728\u7ebf\u67e5\u8be2\uff0c\u4e14 $n\\leq 2\\times 10^5$\uff0c\u76f4\u63a5\u5efa\u6811\u7a7a\u95f4\u4e00\u5b9a\u4f1a\u70b8\uff0c\u8003\u8651\u4f7f\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6765\u5efa\u6811\u3002\n\n\u6211\u4eec\u9700\u8981\u5efa\u4e24\u9897\u4e3b\u5e2d\u6811\uff0c\u4e00\u9897\u7528\u6765\u7ef4\u62a4\u5efa\u5230\u5f53\u524d\u6df1\u5ea6\u65f6\u8fd8\u6709\u54ea\u4e9b\u70b9\u6ca1\u6709\u88ab\u4f7f\u7528\u8fc7\uff0c\u4e00\u9897\u7528\u6765\u7ef4\u62a4\u5e94\u8be5\u63a5\u5728\u54ea\u4e00\u4e2a\u8282\u70b9\u4e0a\u3002\n\n\u6bcf\u4e00\u6b21\u8f93\u5165\u4e00\u4e2a $a[i]$ \u65f6\uff0c\u8ba1\u7b97 $a[i]$ \u6240\u5728\u7684\u884c $x$ \u4e0e\u5217 $y$\uff0c\u5728\u7b2c\u4e00\u9897\u4e3b\u5e2d\u6811\u4e2d\u4e8c\u5206\u67e5\u8be2\u7b2c $y$ \u4e2a\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u70b9 $k$\uff0c\u5c06\u8fd9\u4e2a\u70b9\u52a0\u5165\u6211\u4eec\u65b0\u5efa\u7684\u4e00\u4e2a\u8282\u70b9 $node[cnt]$ \u4e2d\u3002\u5e76\u5c06\u5176\u4e0e\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811\u4e0a\u7b2c $k$ \u4e0e $k+1$ \u4e2a\u70b9\u8fde\u8fb9\uff0c\u5c06\u7b2c\u4e00\u9897\u4e3b\u5e2d\u6811\u7684\u7b2c $k+1$ \u4e2a\u8282\u70b9\u8d4b\u503c\u4e3a 0\u3002\n\n\u63a5\u7740\u5728\u8282\u70b9\u6570\u7ec4 $node$ \u4e0a\u8dd1\u4e00\u904d\u6b63\u5e38\u7684 DFS\uff0c\u8ba1\u7b97\u51fa\u5176\u6811\u72b6\u7ed3\u6784\u4e0b\u7684\u6df1\u5ea6\u4e0e\u5b83\u4e0a\u5347 $2^0$ \u7684\u6df1\u5ea6\u540e\u7684\u8282\u70b9\uff0c\u518d\u901a\u8fc7\u9012\u63a8\u8ba1\u7b97\u51fa\u67d0\u4e00\u4e2a\u8282\u70b9\u4e0a\u5347 $2^z$ \u7684\u6df1\u5ea6\u540e\u7684\u8282\u70b9\u3002\n\n\u63a5\u4e0b\u6765\u7684\u67e5\u8be2\u64cd\u4f5c\uff0c\u5148\u5c06\u4e24\u4e2a\u6570 $x$ \u4e0e $y$ \u89e3\u5bc6\u51fa\u6765\uff0c\u8ba1\u7b97\u51fa $x$ \u4e0e $y$ \u6240\u5728\u7684\u884c $f_x,f_y$ \u4e0e\u5217 $g_x,g_y$\uff0c\u518d\u5728\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811\u4e2d\u67e5\u8be2\u5f53\u5176\u5efa\u6811\u6df1\u5ea6\u4e3a $f_x,f_y$ \u65f6\u5bf9\u5e94\u7684\u8282\u70b9 $x',y'$\u3002\u5e76\u4ece\u8fd9\u4e2a\u8282\u70b9\u5f00\u59cb\u5728\u6240\u6709 $node$ \u8282\u70b9\u6240\u6784\u6210\u7684\u6811\u4e0a\u8fdb\u884c\u6b63\u5e38\u7684 LCA\u3002\u82e5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u5219\u76f4\u63a5\u8f93\u51fa\u884c\u6570\u8f83\u4f4e\u7684\u90a3\u4e00\u4e2a\uff0c\u5426\u5219\u8f93\u51fa $x',y'$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u771f\u5b9e\u7f16\u53f7\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log_2^2n)$\u3002\n\n### \u4ee3\u7801:\n\n```C++\n#include<bits/stdc++.h>\n#define van long long\nusing namespace std;\nconst van k=21,N=4e5+5;\nstruct node {\n\tvan ls,rs;\n\tvan num;\n};\nvan up[N][k],n,a[N],RealNum[N<<2],cnt;\nvan root[N],cnt2,root2[N],cnt3;\nnode tree[N<<5],tree2[N<<5];\nvector<van> g[N];van deep[N],q,t;\nvan Calc(van x) {\n\treturn x*(x-1)/2;\n}\npair<van,van> GetPos(van num) {\n\tvan l=1,r=n+1,ans;\n\twhile (l<=r) {\n\t\tvan mid=l+r>>1;\n\t\tif (Calc(mid)<num) ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n\treturn make_pair(ans,num-Calc(ans));\n}//\u7531\u67d0\u4e00\u4e2a\u6570\u83b7\u53d6\u5230\u5176\u6240\u5728\u7684\u884c\u4e0e\u5217\nvan BuildTree(van l,van r) {\n\tvan now=++cnt2;\n\tif (l==r) {\n\t\t++cnt;RealNum[cnt]=Calc(n+1)+l;\n\t\ttree[now].num=cnt;\n\t\treturn now;\n\t}\n\tvan mid=l+r>>1;\n\ttree[now].ls=BuildTree(l,mid);\n\ttree[now].rs=BuildTree(mid+1,r);\n\treturn now;\n}//\u5efa\u7acb\u7b2c\u4e00\u9897\u4e3b\u5e2d\u6811(\u53ca\u4e0a\u6587\u6240\u63d0\u5230\u7684\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811)\nvan ChangeTree(van p,van l,van r,van where,van num) {\n\tvan now=++cnt2;\n\ttree[now]=tree[p];\n\tif (l==r) {\n\t\t++cnt;RealNum[cnt]=num;\n\t\ttree[now].num=cnt;\n\t\treturn now;\n\t}\n\tvan mid=l+r>>1;\n\tif (where<=mid) tree[now].ls=ChangeTree(tree[p].ls,l,mid,where,num);\n\telse tree[now].rs=ChangeTree(tree[p].rs,mid+1,r,where,num);\n\treturn now;\n}//\u5355\u70b9\u4fee\u6539\u4e3b\u5e2d\u6811\u4e0a\u67d0\u4e00\u8282\u70b9\u7684\u503c\nvan QueryTree(van p,van l,van r,van num) {\n\tif (l==r) return tree[p].num;\n\tvan mid=l+r>>1;\n\tif (num<=mid) return QueryTree(tree[p].ls,l,mid,num);\n\telse return QueryTree(tree[p].rs,mid+1,r,num);\n}//\u5355\u70b9\u67e5\u8be2\u4e3b\u5e2d\u6811\u4e0a\u67d0\u4e00\u8282\u70b9\u7684\u503c\nvan BuildTree2(van l,van r) {\n\tvan now=++cnt3;\n\tif (l==r) {\n\t\ttree2[now].num=1;\n\t\treturn now;\n\t}\n\tvan mid=l+r>>1;\n\ttree2[now].ls=BuildTree2(l,mid);\n\ttree2[now].rs=BuildTree2(mid+1,r);\n\ttree2[now].num=tree2[tree2[now].ls].num+tree2[tree2[now].rs].num;\n\treturn now;\n}//\u5efa\u7acb\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811(\u53ca\u4e0a\u6587\u6240\u63d0\u5230\u7684\u7b2c\u4e00\u9897\u4e3b\u5e2d\u6811)\nvan ChangeTree2(van p,van l,van r,van where,van num) {\n\tvan now=++cnt3;\n\ttree2[now]=tree2[p];\n\tif (l==r) {\n\t\ttree2[now].num=num;\n\t\treturn now;\n\t}\n\tvan mid=l+r>>1;\n\tif (where<=mid) tree2[now].ls=ChangeTree2(tree2[p].ls,l,mid,where,num);\n\telse tree2[now].rs=ChangeTree2(tree2[p].rs,mid+1,r,where,num);\n\ttree2[now].num=tree2[tree2[now].ls].num+tree2[tree2[now].rs].num;\n\treturn now;\n}//\u5355\u70b9\u4fee\u6539\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811\u7684\u503c\nvan QueryTree2(van p,van l,van r,van L,van R) {\n\tif (L<=l&&r<=R) {\n\t\treturn tree2[p].num;\n\t}\n\tvan mid=l+r>>1,sum=0;\n\tif (L<=mid) sum+=QueryTree2(tree2[p].ls,l,mid,L,R);\n\tif (R>mid) sum+=QueryTree2(tree2[p].rs,mid+1,r,L,R);\n\treturn sum;\n}//\u533a\u95f4\u67e5\u8be2\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811\u4e0a\u67d0\u4e00\u4e9b\u8282\u70b9\u7684\u503c\u7684\u548c\nvoid AddLine(van father,van son) {\n\tg[father].push_back(son);\n\tg[son].push_back(father);\n}//\u65b0\u5efa\u4e00\u6761\u8fb9\nvoid initDFS(van now,van f) {\n\tfor (int i=0;i<g[now].size();i++) {\n\t\tif (g[now][i]!=f) {\n\t\t\tdeep[g[now][i]]=deep[now]+1;\n\t\t\tup[g[now][i]][0]=now;\n\t\t\tinitDFS(g[now][i],now);\n\t\t}\n\t}\n}//\u9884\u5904\u7406\u8282\u70b9\u6df1\u5ea6\u4e0eup[i][0]\u6570\u7ec4\nvoid initLCA() {\n\tdeep[cnt]=1;\n\tinitDFS(cnt,0);\n\tfor (int j=1;j<k;j++) {\n\t\tfor (int i=1;i<=cnt;i++) {\n\t\t\tup[i][j]=up[up[i][j-1]][j-1];\n\t\t}\n\t}\n}//\u9012\u63a8\u5904\u7406up\u6570\u7ec4\nvan GetDeep(van num) {\n\treturn GetPos(num).first;\n}\nvan LCA(van a,van b,van a1,van b1) {\n\tif (deep[a1]<deep[b1]) swap(a1,b1),swap(a,b);\n\tfor (int i=k-1;i>=0;i--) {\n\t\tif (deep[up[a1][i]]>=deep[b1]) {\n\t\t\ta1=up[a1][i];\n\t\t}\n\t}\n\tif (a1==b1) {\n\t\treturn (GetDeep(a)<GetDeep(b)?a:b);\n\t}\n\tfor (int i=k-1;i>=0;i--) {\n        if (up[a1][i]!=up[b1][i]) {\n\t\t\ta1=up[a1][i],b1=up[b1][i];\n\t\t}\n\t}\n\treturn RealNum[up[a1][0]];\n} //\u6b63\u5e38\u7684LCA(\u4f46\u76f4\u63a5\u8fd4\u56de\u6700\u7ec8\u7ed3\u679c)\ninline van read() {\n    van x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-')\n            f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        x=(x<<1)+(x<<3)+(ch^48);\n        ch=getchar();\n    }\n    return x*f;\n}//\u5feb\u8bfb\ninline void write(van x) {\n    char F[200];\n    van tmp=x>0?x:-x ;\n    if(x<0)putchar('-') ;\n    van cnt=0 ;\n    while(tmp>0)\n    {\n    \tF[cnt++]=tmp%10+'0';\n        tmp/=10;\n    }\n    while(cnt>0)putchar(F[--cnt]) ;\n    putchar('\\n');\n}//\u5feb\u8f93\nint main() {\n\tn=read(),q=read(),t=read();\n\tfor (int i=1;i<=n;i++) {\n\t\ta[i]=read();\n\t}\n\troot[n+1]=BuildTree(1,n+1);\n\troot2[n+1]=BuildTree2(1,n+1);//\u5efa\u6811\n\tfor (int i=n;i>=1;i--) {\n\t\tpair<van,van> pos=GetPos(a[i]);\n\t\tvan l=1,r=n+1,tmp1,tmp2;\n\t\twhile (l<=r) {\n\t\t\tvan mid=l+r>>1;\n\t\t\tif (QueryTree2(root2[i+1],1,n+1,1,mid)>=pos.second) {\n\t\t\t\ttmp1=mid;r=mid-1;\n\t\t\t} \n\t\t\telse l=mid+1;\n\t\t}//\u67e5\u627e\u5e94\u8be5\u63a5\u5728\u54ea\u4e00\u5217\n\t\tl=1,r=n+1;\n\t\twhile (l<=r) {\n\t\t\tvan mid=l+r>>1;\n\t\t\tif (QueryTree2(root2[i+1],1,n+1,1,mid)>=pos.second+1) {\n\t\t\t\ttmp2=mid,r=mid-1;\n\t\t\t}\n\t\t\telse l=mid+1;\n\t\t}//\u67e5\u627e\u4e0b\u4e00\u4e2a\u6709\u503c\u7684\u5217\n\t\tvan son1=QueryTree(root[i+1],1,n+1,tmp1),\n\t\t\tson2=QueryTree(root[i+1],1,n+1,tmp2);\n\t\troot[i]=ChangeTree(root[i+1],1,n+1,tmp1,a[i]);\n\t\tvan now=QueryTree(root[i],1,n+1,tmp1);\n\t\tAddLine(now,son1);AddLine(now,son2);//\u5efa\u8fb9\n\t\troot2[i]=ChangeTree2(root2[i+1],1,n+1,tmp1,1);\n\t\troot2[i]=ChangeTree2(root2[i],1,n+1,tmp2,0);//\u4fee\u6539\u7b2c\u4e8c\u9897\u4e3b\u5e2d\u6811\u67d0\u4e00\u8282\u70b9\u7684\u8fb9\u6743\n\t} \n\tinitLCA();\n\tvan z=0;\n\twhile (q--) {\n\t\tvan x,y;\n\t\tx=read(),y=read();\n\t\tif (t) {\n\t\t\tx=(x-1+t*z)%Calc(n+2)+1;\n\t\t\ty=(y-1+t*z)%Calc(n+2)+1;\n\t\t}//\u89e3\u5bc6x&y\n\t\tpair<van,van> posx=GetPos(x),posy=GetPos(y);\n\t\tvan l=1,r=n+1,tmp1,tmp2;\n\t\twhile (l<=r) {\n\t\t\tvan mid=l+r>>1;\n\t\t\tif (QueryTree2(root2[posx.first],1,n+1,1,mid)>=posx.second) {\n\t\t\t\ttmp1=mid,r=mid-1;\n\t\t\t}\n\t\t\telse l=mid+1;\n\t\t}\n\t\tl=1,r=n+1;\n\t\twhile (l<=r) {\n\t\t\tvan mid=l+r>>1;\n\t\t\tif (QueryTree2(root2[posy.first],1,n+1,1,mid)>=posy.second) {\n\t\t\t\ttmp2=mid,r=mid-1;\n\t\t\t}\n\t\t\telse l=mid+1;\n\t\t}//\u4e8c\u5206\u67e5\u8be2x&y\u8282\u70b9\u5728\u67d0\u4e00\u72b6\u6001\u4e0b\u6240\u5728\u7684\u5217\n\t\tvan x1=QueryTree(root[posx.first],1,n+1,tmp1),\n\t\t\ty1=QueryTree(root[posy.first],1,n+1,tmp2);\n\t\tz=LCA(x,y,x1,y1);\n\t\twrite(z);\n\t}\n}\n```",
        "postTime": 1630060171,
        "uid": 185758,
        "name": "LittleYang0531",
        "ccfLevel": 7,
        "title": "[COCI2020-2021#3] Specijacija \u9898\u89e3"
    },
    {
        "content": "\u9898\u610f\uff1a\u4f7f\u7528\u5947\u602a\u7684\u65b9\u5f0f\u5efa\u4e00\u4e2a\u6709 $ (n+1) \\times (n+2) \\div 2 $ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u6b21\u7ed9\u5b9a\u4e24\u4e2a\u70b9\u8be2\u95ee\u5176 $ \\rm LCA $\u3002\n\n\u9996\u5148\u5927\u773c\u89c2\u5bdf\uff1a\u7b54\u6848\u4f3c\u4e4e\u53ea\u53ef\u80fd\u662f\u7ed9\u5b9a\u7684 $ n $ \u4e2a\u8282\u70b9\uff1f\n\n\u5e76\u4e0d\uff0c\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u7956\u5148\u5173\u7cfb\u7684\u8bdd\u90a3\u4e48\u5c31\u5bc4\u4e86\u3002\u3002\u3002\n\n\u6240\u4ee5\u8003\u8651\u5148\u628a\u7956\u5148\u5173\u7cfb\u5224\u6389\uff0c\u7136\u540e\u8be2\u95ee\u5c31\u53ea\u5269\u4e0b\u6ca1\u6709\u7956\u5148\u5173\u7cfb\u7684\u4e86\u3002\n\n\u6ca1\u6709\u7956\u5148\u5173\u7cfb\uff0c\u7b54\u6848\u5c31\u53ea\u53ef\u80fd\u662f\u7ed9\u5b9a\u7684 $ n $ \u4e2a\u8282\u70b9\u4e86\uff01/mgx\n\n\u56e0\u4e3a\u6ca1\u6709\u7956\u5148\u5173\u7cfb\uff0c\u6240\u4ee5\u8003\u8651\u627e\u5230\u81ea\u5df1\u5230\u6839\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8282\u70b9\u3002\n\n\u8fd9\u6837\u8981\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u5de8\u9ebb\u70e6\uff0c\u4e8e\u662f\u627e\u5b50\u6811\u5185\u4e0d\u5305\u62ec\u81ea\u5df1\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u7ed9\u5b9a\u7684\u8282\u70b9\u3002\n\n\u5047\u8bbe\u81ea\u8eab\u662f $ u $\uff0c\u8be5\u8282\u70b9\u662f $ v $\uff0c\u4ee5\u53ca\u81ea\u8eab\u5904\u4e8e\u7b2c $ x $ \u5c42\uff0c\u8be5\u8282\u70b9\u5904\u4e8e\u7b2c $ y $ \u5c42\uff0c\u6709\uff1a\n$$ u+\\frac {(y-x)(y+x-1)} 2=v $$\n\u53ef\u4ee5\u81ea\u884c\u7406\u89e3\u4e00\u4e0b\u8fd9\u662f\u4e3a\u4ec0\u4e48\u3002\u79fb\u9879\u5f97\uff1a\n$$ u-\\frac {x^2-x} 2=v-\\frac {y^2-y} 2 $$\n$$ u-\\frac {x(x-1)} 2=v-\\frac {y(y-1)} 2 $$\n\u4e0d\u8fc7\u8fd9\u4e2a\u67ff\u5b50\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u6709\u7279\u6b8a\u70b9\u5728\u5f80\u513f\u5b50\u8d70\u7684\u8def\u5f84\u7684\u5de6\u8fb9\u5c31\u5047\u4e86\u3002\n\n\u6240\u4ee5\u8981\u5206\u522b\u51cf\u53bb\u67d0\u4e2a\u5e8f\u5217\u7684\u524d\u7f00\u6bd4\u81ea\u8eab\u5c0f\u7684\u6570\uff0c\u4e8c\u7ef4\u504f\u5e8f\u5f3a\u5236\u5728\u7ebf\uff0c\u53ea\u80fd\u4f7f\u7528\u4e3b\u5e2d\u6811\u6216\u8005 K-DT\u3002\n\n\u6240\u4ee5\u5bf9 $ u-\\frac {x(x-1)} 2- $ \u51cf\u53bb\u524d\u9762\u6bd4\u81ea\u5df1\u5927\u7684\u8282\u70b9\uff0c\u5bf9\u76f8\u540c\u7684\u7ed9\u5b9a\u7684\u8282\u70b9\u5f00\u4e00\u4e2a\u6808\uff0c\u6309\u7167\u6df1\u5ea6\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u4e2a\u5e8f\uff0c\u76f4\u63a5\u4e8c\u5206\u5c31\u597d\u4e86\u3002\n\n\u7136\u540e $ v $ \u5728\u53ea\u6709\u8fd9 $ n $ \u4e2a\u8282\u70b9\u7684\u6811\u4e0a\u7684\u7236\u4eb2\u5c31\u662f $ u $ \u5230\u6839\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8282\u70b9\u3002\n\n\u5efa\u51fa\u539f\u6811\u53ef\u4ee5\u5012\u5e8f\u626b\u63cf $ a $ \u6570\u7ec4\uff0c\u7136\u540e\u8bb0\u5f55 $ lst $\uff0c\u6700\u540e\u82e5\u6709\u8282\u70b9\u6ca1\u6709\u7236\u4eb2\u90a3\u4e48\u5c31\u4ee4\u7236\u4eb2\u4e3a $ 1 $\u3002\n\n\u5982\u679c\u6211\u662f\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\uff1f\u5c06\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u5168\u90e8\u52a0\u5165\u6808\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u6709\u7956\u5148\u5173\u7cfb\u7684\u3002\u6709\u7956\u5148\u5173\u7cfb\u7684\u8282\u70b9\u5728\u538b\u7f29\u540e\u7684\u6811\u4e0a\u4e00\u5b9a\u4e5f\u6709\u7956\u5148\u5173\u7cfb\uff0c\u901a\u8fc7 $ dfn $ \u5e8f\u5224\u65ad\u8fd9\u4e2a\uff0c\u8fd8\u9700\u8981\u901a\u8fc7\u4e0a\u9762\u7684\u5f0f\u5b50\u518d\u5224\u65ad\u4e00\u904d\uff08\u56e0\u4e3a\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u7b2c\u4e00\u4e2a\u7ed9\u5b9a\u7684\u8282\u70b9\u662f\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u5b50\u6811\u90a3\u5c31\u6ca1\u6709\u7956\u5148\u5173\u7cfb\uff09\uff0c\u4e4b\u540e\u76f4\u63a5\u8fd4\u56de\u7f16\u53f7\u5c0f\u7684\u8282\u70b9\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5495\u4e86\uff08\u4e0d\u8fc7\u8fd9\u79cd\u505a\u6cd5\u5e94\u8be5\u4f1a\u6bd4\u4e3b\u5e2d\u6811\u5feb\u5427",
        "postTime": 1640090445,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 \u6808 P7172\u9898\u89e3"
    }
]