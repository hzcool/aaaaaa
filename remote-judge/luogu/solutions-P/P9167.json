[
    {
        "content": "#### [P9167 [\u7701\u9009\u8054\u8003 2023] \u57ce\u5e02\u5efa\u9020](https://www.luogu.com.cn/problem/P9167)\n\n\u56e0\u4e3a\u9009\u62e9\u7684\u57ce\u5e02\u6570\u7b49\u4e8e\u8fde\u901a\u5757\u6570\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8fde\u901a\u5757\u6070\u9009\u62e9\u4e00\u4e2a\u57ce\u5e02\uff0c\u5426\u5219\u65e0\u6cd5\u8fde\u901a\u3002\n\n\u5148\u5728\u4e0d\u8003\u8651\u8fde\u901a\u5757\u5927\u5c0f\u7684\u9650\u5236\u4e0b\uff0c\u63a2\u7a76\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n##### \u6027\u8d28\u548c\u7ed3\u8bba\n\n\u5bf9\u4e8e\u9009\u62e9\u7684\u4e24\u4e2a\u57ce\u5e02\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u4e0d\u7ecf\u8fc7\u91cd\u590d\u70b9\u7684\u7b80\u5355\u8def\u5f84\u8fde\u63a5\u5b83\u4eec\uff0c\u5219\u8def\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u8981\u9009\u62e9\u3002\u5426\u5219\uff0c\u5fc5\u7136\u5b58\u5728\u67d0\u4e24\u4e2a\u9009\u62e9\u7684\u57ce\u5e02\u8fde\u901a\u3002\n\n\u76f8\u53cd\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c06\u9009\u62e9\u7684\u57ce\u5e02\u4e4b\u95f4\u7684\u8fb9\u5220\u53bb\u540e\uff0c\u8fd9\u4e9b\u57ce\u5e02\u4e24\u4e24\u4e0d\u8fde\u901a\u3002\u53ef\u4ee5\u53cd\u8bc1\u3002\n\n\u56e0\u6b64\uff0c\u6839\u636e\u70b9\u53cc\u7684\u6027\u8d28\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u53cc\u91cc\u9762\u9009\u4e86\u4e24\u4e2a\u70b9\uff0c\u5219\u6574\u4e2a\u70b9\u53cc\u90fd\u8981\u88ab\u9009\u62e9\u3002\n\n\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u79f0\u9009\u62e9\u4e00\u4e2a\u65b9\u70b9\u8868\u793a\u9009\u62e9\u5176\u5468\u56f4\u7684\u6240\u6709\u5706\u70b9\uff0c\u8981\u6c42\uff1a\n\n- \u4e3a\u4fdd\u8bc1\u9009\u62e9\u7684\u57ce\u5e02\u4e0d\u8fde\u901a\uff0c\u9009\u62e9\u7684\u65b9\u70b9\u662f\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u5373\u82e5\u4e24\u4e2a\u65b9\u70b9\u88ab\u9009\u62e9\uff0c\u5219\u5b83\u4eec\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u6240\u6709\u65b9\u70b9\u5747\u88ab\u9009\u62e9\u3002\n- \u5220\u53bb\u9009\u62e9\u7684\u65b9\u70b9\uff08\u76f8\u5f53\u4e8e\u5220\u53bb\u9009\u62e9\u57ce\u5e02\u4e4b\u95f4\u7684\u8fb9\uff09\u540e\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u5927\u5c0f\uff08\u5706\u70b9\u6570\u91cf\uff09\u76f8\u5dee\u4e0d\u8d85\u8fc7 $k$\u3002\n\n##### $\\boldsymbol{k = 0}$\n\n\u8003\u8651 $k = 0$\uff0c\u5219\u8fde\u901a\u5757\u5927\u5c0f $d$ \u4e3a $n$ \u7684\u56e0\u6570\u3002\n\n\u8003\u8651\u4ee5\u91cd\u5fc3 $R$ \u4e3a\u6839\uff0c\u5219\u82e5\u4e00\u4e2a\u65b9\u70b9\u88ab\u9009\u62e9\uff0c\u5176\u7956\u5148\u65b9\u70b9\u4e00\u5b9a\u88ab\u9009\u62e9\uff0c\u4e14\u82e5 $R$ \u4e3a\u65b9\u70b9\uff0c\u5219 $R$ \u4e00\u5b9a\u88ab\u9009\u62e9\u3002\u53ef\u4ee5\u53cd\u8bc1\u3002\n\n\u6811\u5f62 DP\uff0c\u80fd\u5265\u5b50\u6811\u5c31\u5265\u5b50\u6811\u3002\u8bbe $f_i$ \u8868\u793a\uff1a\u82e5 $i$ \u662f\u5706\u70b9\uff0c\u80fd\u5426\u5220\u53bb\u5176\u7236\u4eb2\u65b9\u70b9\uff08\u82e5 $i$ \u4e3a\u6839\uff0c\u5219\u7b54\u6848\u53ef\u4ee5\u89c6\u4e3a\u6dfb\u52a0\u5e76\u5f3a\u5236\u5220\u53bb $i$ \u7684\u7236\u4eb2\u65b9\u70b9\u65f6\u6574\u68f5\u5b50\u6811\u7684\u7b54\u6848\uff09\uff1b\u82e5 $i$ \u662f\u65b9\u70b9\uff0c\u80fd\u5426\u5220\u53bb\u5176\u672c\u8eab\u3002$f_R$ \u5373\u4e3a\u6240\u6c42\u3002\n\n- \u5bf9\u4e8e\u5706\u70b9 $i$\uff0c\u679a\u4e3e\u6240\u6709\u5b50\u7ed3\u70b9 $j$\uff08\u65b9\u70b9\uff09\u3002\u5f53 $sz_j \\geq d$ \u65f6\uff0c\u8981\u6c42 $f_j = 1$\u3002\u5426\u5219 $j$ \u4e0d\u80fd\u88ab\u5220\u53bb\uff0c\u56e0\u6b64\u8981\u6c42 $sz_j < d$ \u7684 $sz_j$ \u4e4b\u548c\u6070\u7b49\u4e8e $d$\u3002\n- \u5bf9\u4e8e\u65b9\u70b9 $i$\uff0c$f_i = 1$ \u5f53\u4e14\u4ec5\u5f53\u5176\u6240\u6709\u5b50\u7ed3\u70b9 $j$ \u7684 $f_j = 1$\u3002\n\n##### $\\boldsymbol{k = 1}$\n\n\u8003\u8651 $k = 1$\uff0c\u679a\u4e3e\u8fde\u901a\u5757\u5927\u5c0f $d = 1\\sim \\lfloor \\frac n 2\\rfloor$\uff0c\u5219 $k = 0$ \u7684 $2\\sim \\lfloor \\frac n 2\\rfloor$ \u591a\u7b97\u4e86\uff0c\u8981\u51cf\u6389\uff08\u56e0\u4e3a $n\\geq 3$\uff0c\u6240\u4ee5 $k = 0$ \u7684 $\\lfloor \\frac n 2\\rfloor + 1$ \u4e00\u5b9a\u4e0d\u5408\u6cd5\uff09\u3002\n\n\u7c7b\u4f3c\u5730\uff0c\u8bbe $f_i$ \u8868\u793a\u5bf9\u5e94\u65b9\u6848\u6570\uff0c$f_R$ \u5373\u4e3a\u6240\u6c42\u3002\n\n- \u5bf9\u4e8e\u5706\u70b9 $i$\uff1a\n\n  - \u82e5 $sz_j < d$\uff0c\u5219 $j$ \u4e0d\u80fd\u88ab\u5220\u53bb\u3002\n  - \u82e5 $sz_j > d$\uff0c\u5219 $j$ \u5fc5\u987b\u88ab\u5220\u53bb\u3002\n  - \u5426\u5219 $sz_j = d$\u3002\u5f53 $f_j = 0$ \u65f6\uff0c$j$ \u4e0d\u80fd\u88ab\u5220\u53bb\u3002\u5426\u5219 $j$ \u53ef\u4ee5\u88ab\u5220\u53bb\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u5220\u53bb\uff0c\u4f46\u540e\u8005\u8981\u6c42\u4e0d\u5b58\u5728\u4e0d\u80fd\u88ab\u5220\u53bb\u7684 $j$ \u4e14\u5176\u5b83 $j$ \u5747\u88ab\u5220\u53bb\u3002\n\n  \u8bbe $ss$ \u4e3a\u4e0d\u80fd\u88ab\u5220\u53bb\u7684 $\\sum sz_j$ \u52a0\u4e0a $i$ \u672c\u8eab\u8d21\u732e\u7684 $1$ \u8868\u793a $i$ \u7684\u8fde\u901a\u5757\u5927\u5c0f\u6700\u5c0f\u503c\uff0c\u8bbe $pd$ \u4e3a\u53ef\u4ee5\u88ab\u5220\u53bb\u7684 $\\prod f_j$\uff1a\n\n  - \u82e5 $ss > d + 1$\uff0c$f_i = 0$\u3002\n  - \u82e5 $d\\leq ss\\leq d + 1$\uff0c\u5219 $f_i$ \u52a0\u4e0a $pd$\u3002\n  - \u82e5 $ss = 1$\uff0c\u5219 $f_i$ \u52a0\u4e0a\u5bf9\u6bcf\u4e2a\u53ef\u4ee5\u88ab\u5220\u53bb\u7684 $sz_j = d$\uff0c$\\frac {pd} {f_j}$ \u4e4b\u548c\u3002\u56e0\u4e3a $sz_j = d$ \u4e14 $f_j > 0$ \u65f6 $f_j = 1$\uff0c\u6545 $\\sum \\frac {pd} {f_j}$ \u7b49\u4e8e $pd$ \u4e58\u4ee5 $sz_j = d$ \u4e14 $f_j > 0$ \u7684 $j$ \u7684\u6570\u91cf $cnt$\u3002\n\n  \u6ce8\u610f\u7b2c\u4e8c\u3001\u4e09\u4e2a\u6761\u4ef6\u53ef\u4ee5\u540c\u65f6\u6ee1\u8db3\u3002\n\n- \u5bf9\u4e8e\u65b9\u70b9 $i$\uff0c$f_i$ \u7b49\u4e8e $\\prod f_j$\u3002\n\n$k = 0$ \u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(nd(n))$\uff0c$k = 1$ \u7684\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n ^ 2)$\u3002 \n\n\u679a\u4e3e\u9009\u62e9\u7684\u57ce\u5e02\u6570\u91cf\uff0c\u53d1\u73b0\u53ea\u6709\u6574\u9664\u503c\u6216\u6574\u9664\u503c $-1$ \u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff08\u7b49\u4ef7\u4e8e $n\\bmod l \\leq \\frac n l$ \u7684 $l$ \u7684\u6570\u91cf\uff09\uff0c\u590d\u6742\u5ea6\u964d\u4e3a $\\mathcal{O}(n ^ {1.5})$\u3002\u52a0\u5165\u90e8\u5206\u526a\u679d\u540e\u4ee5\u975e\u5e38\u5feb\u7684\u901f\u5ea6\u901a\u8fc7\uff08\u82e5 $sz_j > d$ \u4e14 $f_j = 0$ \u5219\u65e0\u89e3\uff0c\u82e5 $sz_j < d$ \u5219\u4e0d\u7528\u9012\u5f52\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconstexpr int N = 2e5 + 5;\nconstexpr int mod = 998244353;\nvoid add(int &x, int y) {\n  x += y, x >= mod && (x -= mod);\n}\n\nint n, m, k, ans, node;\nvector<int> e[N], g[N], h[N];\nint dn, dfn[N], low[N], stc[N], top;\nvoid tarjan(int id) {\n  low[id] = dfn[id] = ++dn, stc[++top] = id;\n  for(int it : e[id]) {\n    if(!dfn[it]) {\n      tarjan(it);\n      low[id] = min(low[id], low[it]);\n      if(low[it] >= dfn[id]) {\n        g[++node].push_back(id);\n        g[id].push_back(node);\n        for(int x = 0; x != it; ) {\n          x = stc[top--];\n          g[node].push_back(x);\n          g[x].push_back(node);\n        }\n      }\n    }\n    else low[id] = min(low[id], dfn[it]);\n  }\n}\n\nint R, mx[N], sz[N];\nvoid findroot(int id, int ff) {\n  sz[id] = id <= n;\n  for(int it : g[id]) {\n    if(it == ff) continue;\n    findroot(it, id);\n    sz[id] += sz[it];\n    mx[id] = max(mx[id], sz[it]);\n  }\n  mx[id] = max(mx[id], n - sz[id]);\n  if(id <= n && mx[id] < mx[R]) R = id;\n}\n\nint pos, fa[N], mn[N], ind[N];\nvoid dfs(int id, int ff) {\n  ind[++pos] = id;\n  mn[id] = N, fa[id] = ff, sz[id] = id <= n;\n  for(int it : g[id]) {\n    if(it == ff) continue;\n    dfs(it, id), sz[id] += sz[it];\n    mn[id] = min(mn[id], sz[it]);\n    h[id].push_back(it);\n  }\n}\n\nint f[N];\nvoid dfs2(int id, int x) {\n  for(int i = node; i; i--) {\n    int id = ind[i], cnt = 0;\n    if(sz[id] < x) continue;\n    if(id <= n) {\n      f[id] = 0;\n      int tot = 1, prod = 1;\n      for(int i = 1; i <= h[id].size(); i++) {\n        int it = h[id][i - 1];\n        if(sz[it] < x) tot += sz[it];\n        if(sz[it] == x) f[it] ? cnt++ : tot += x;\n        if(sz[it] > x) prod = 1ll * prod * f[it] % mod;\n      }\n      if(x <= tot && tot <= x + 1) f[id] = prod;\n      if(tot == 1) f[id] = (f[id] + 1ll * prod * cnt) % mod;\n    }\n    else {\n      f[id] = 1;\n      for(int it : h[id]) {\n        if(sz[it] < x) {\n          f[id] = 0;\n          break;\n        }\n        f[id] = 1ll * f[id] * f[it] % mod;\n      }\n    }\n    if(sz[id] > x + 1 && f[id] == 0) {\n      f[R] = 0;\n      break;\n    }\n  }\n}\nvoid dfs3(int id, int x) {\n  for(int i = node; i; i--) {\n    int id = ind[i];\n    if(sz[id] < x) continue;\n    if(id <= n) {\n      f[id] = 0;\n      int tot = 1, ok = 1;\n      for(int it : h[id]) {\n        if(sz[it] < x) tot += sz[it];\n        else if(!f[it]) ok = 0;\n      }\n      f[id] = tot == x && ok;\n    }\n    else {\n      f[id] = 1;\n      for(int it : h[id]) {\n        if(sz[it] < x) f[id] = 0;\n        else if(!f[it]) f[id] = 0;\n      }\n    }\n    if(sz[id] > x + 1 && f[id] == 0) {\n      f[R] = 0;\n      break;\n    }\n  }\n}\nint check(int x, int k) {\n  if(k == 0 && n % x) return 0;\n  k == 1 ? dfs2(R, x) : dfs3(R, x);\n  int res = f[R];\n  if(k == 1) res = (res - check(x + 1, 0) + mod) % mod;\n  return res;\n}\n\nint main() {\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m >> k, node = n;\n  for(int i = 1; i <= m; i++) {\n    int u, v;\n    cin >> u >> v;\n    e[u].push_back(v);\n    e[v].push_back(u);\n  }\n\n  tarjan(1);\n\n  mx[0] = N, findroot(1, 0), dfs(R, 0);\n  static bool vis[N];\n  for(int i = 2; i <= n; i++) {\n    vis[n / i] = 1;\n    if(n % i == 0) vis[n / i - 1] = 1;\n  }\n  for(int l = 1; l <= n / 2; l++) {\n    if(!vis[l]) continue;\n    ans = (ans + check(l, k)) % mod;\n  }\n  cout << ans << \"\\n\";\n\n  cerr << 1e3 * clock() / CLOCKS_PER_SEC << \" ms\\n\";\n  return 0;\n}\n/*\ng++ cities.cpp -o cities -std=c++14 -O2\n*/\n```\n\n##### \u7ebf\u6027\u505a\u6cd5\n\n\u8003\u8651\u540c\u65f6 DP \u6240\u6709 $d$\uff0c\u7528\u54c8\u5e0c\u8868\u7ef4\u62a4\u6709\u503c\u7684\u4f4d\u7f6e $f_{i, d}$\u3002\n\n- \u5bf9\u4e8e\u65b9\u70b9\uff0c\u5408\u5e76\u5b50\u7ed3\u70b9\u7684\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7\u5b50\u7ed3\u70b9\u54c8\u5e0c\u8868\u5927\u5c0f\u4e4b\u548c\u3002\n\n- \u5bf9\u4e8e\u5706\u70b9\uff0c\u6309\u5b50\u6811\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5219\u53ea\u6709 $1$ \u6216\u5b50\u6811\u5927\u5c0f\u524d\u7f00\u548c\u6216\u5b50\u6811\u5927\u5c0f\u524d\u7f00\u548c $+1$ \u53ef\u80fd\u5408\u6cd5\u3002\u9884\u5904\u7406\u5b50\u6811\u5927\u5c0f\u524d\u7f00\u548c\u3002\u8ba1\u7b97 $f_{i, d}$ \u65f6\uff0c\u4ece\u540e\u5f80\u524d\u679a\u4e3e\u3002\n\n  - \u82e5 $sz_j < d$ \u5219\u4e0d\u7528\u7ee7\u7eed\u679a\u4e3e\uff0c\u76f4\u63a5\u7ed9 $ss$ \u52a0\u4e0a\u5b50\u6811\u5927\u5c0f\u524d\u7f00\u548c\u3002\n  - \u82e5 $sz_j > d$ \u5219\u5c06 $pd$ \u4e58\u4ee5 $f_{j, d}$\uff0c\u82e5 $f_{j, d} = 0$ \u5219\u76f4\u63a5\u9000\u51fa\u3002\n  - \u82e5 $sz_j = d$ \u4e14 $f_{j, d} = 1$\uff0c\u5219\u7ed9 $cnt$ \u52a0 $1$\u3002\n  - \u82e5 $sz_j = d$ \u4e14 $f_{j, d} = 0$\uff0c\u5219\u7ed9 $ss$ \u52a0 $d$\uff0c\u8fd9\u6837\u7684 $j$ \u6700\u591a\u53ea\u80fd\u6709 $1$ \u4e2a\u3002\n\n  \u53ef\u77e5\u5706\u70b9\u7684\u54c8\u5e0c\u8868\u5927\u5c0f\u4e0d\u8d85\u8fc7\u5176\u5ea6\u6570\uff0c\u4e14\u8ba1\u7b97 $f_{i, d}$ \u7684\u603b\u590d\u6742\u5ea6\u4e0d\u8d85\u8fc7\u5b50\u7ed3\u70b9\u7684\u54c8\u5e0c\u8868\u5927\u5c0f\u4e4b\u548c\u3002\n\n\u9664\u53bb\u6309\u5b50\u6811\u5927\u5c0f\u6392\u5e8f\u5916\uff0c\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n)$\u3002\u751a\u81f3\u8dd1\u4e0d\u8fc7 $\\mathcal{O}(n ^ {1.5})$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nbool Mbe;\nconstexpr int N = 2e5 + 5;\nconstexpr int mod = 998244353;\nvoid add(int &x, int y) {\n  x += y, x >= mod && (x -= mod);\n}\n\nvector<int> e[N], g[N], son[N];\nint node, dn, dfn[N], low[N], stc[N], top;\nvoid tarjan(int id) {\n  dfn[id] = low[id] = ++dn;\n  stc[++top] = id;\n  for(int it : e[id]) {\n    if(!dfn[it]) {\n      tarjan(it);\n      low[id] = min(low[id], low[it]);\n      if(low[it] >= dfn[id]) {\n        g[++node].push_back(id);\n        g[id].push_back(node);\n        for(int x = 0; x != it; ) {\n          g[node].push_back(x = stc[top--]);\n          g[x].push_back(node);\n        }\n      }\n    }\n    else low[id] = min(low[id], dfn[it]);\n  }\n}\n\nint n, m, k;\nint R, sz[N], mx[N];\nvoid dfs(int id, int ff) {\n  sz[id] = id <= n;\n  for(int it : g[id]) {\n    if(it == ff) continue;\n    dfs(it, id), sz[id] += sz[it];\n    mx[id] = max(mx[id], sz[it]);\n  }\n  mx[id] = max(mx[id], n - sz[id]);\n  if(mx[id] < mx[R]) R = id;\n}\n\nint ss[N];\nunordered_map<int, int> f[N];\nint calc() {\n  int ans = 0;\n  for(auto it : f[R]) {\n    if(it.first * 2 <= n) add(ans, it.second);\n  }\n  return ans;\n}\nvoid merge(int x, int y) {\n  unordered_map<int, int> nw;\n  for(auto it : f[x]) {\n    auto pt = f[y].find(it.first);\n    if(pt != f[y].end()) nw[it.first] = 1ll * it.second * pt->second % mod;\n  }\n  f[x] = nw;\n}\n\nvoid dfs0(int id, int ff) {\n  for(int it : g[id]) {\n    if(it == ff) continue;\n    dfs0(it, id), son[id].push_back(it);\n  }\n  sort(son[id].begin(), son[id].end(), [&](int x, int y) {\n    return sz[x] < sz[y];\n  });\n  int E = son[id].size();\n  if(id <= n) {\n    for(int i = 1; i <= E; i++) ss[i] = ss[i - 1] + sz[son[id][i - 1]];\n    auto update = [&](int x) {\n      for(int i = E; i; i--) {\n        int it = son[id][i - 1];\n        if(sz[it] >= x) {\n          auto pt = f[it].find(x);\n          if(pt == f[it].end()) return;\n          continue;\n        }\n        if(ss[i] + 1 != x) return;\n        break;\n      }\n      f[id][x] = 1;\n    };\n    for(int i = 0; i <= E; i++) update(ss[i] + 1);\n  }\n  else {\n    f[id] = f[son[id][0]];\n    for(int i = 1; i < E; i++) merge(id, son[id][i]);\n  }\n}\nvoid dfs1(int id, int ff) {\n  for(int it : g[id]) {\n    if(it == ff) continue;\n    dfs1(it, id);\n  }\n  int E = son[id].size();\n  if(id <= n) {\n    for(int i = 1; i <= E; i++) ss[i] = ss[i - 1] + sz[son[id][i - 1]];\n    auto update = [&](int x) {\n      int prod = 1, size = 1, cnt = 0;\n      for(int i = E; i && size <= x + 1; i--) {\n        int it = son[id][i - 1];\n        if(sz[it] >= x) {\n          auto pt = f[it].find(x);\n          if(sz[it] >= x + 1) {\n            if(pt == f[it].end()) return;\n            prod = 1ll * prod * pt->second % mod;\n          }\n          else {\n            if(pt == f[it].end()) size += sz[it];\n            else cnt++;\n          }\n        }\n        else {\n          size += ss[i];\n          break;\n        }\n      }\n      if(size > x + 1) return;\n      f[id][x] = 1ll * prod * ((int) (size >= x) + (size == 1 ? cnt : 0)) % mod;\n    };\n    for(int i = 0; i <= E; i++) {\n      if(i && ss[i - 1] + 1 != ss[i]) update(ss[i]);\n      update(ss[i] + 1);\n    }\n  }\n  else {\n    f[id] = f[son[id][0]];\n    for(int i = 1; i < E; i++) merge(id, son[id][i]);\n  }\n}\n\nbool Med;\nint main() {\n  fprintf(stderr, \"%.4lf\\n\", (&Mbe - &Med) / 1048576.0);\n  #ifdef ALEX_WEI\n    FILE* IN = freopen(\"cities.in\", \"r\", stdin);\n    FILE* OUT = freopen(\"cities.out\", \"w\", stdout);\n  #endif\n  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n  cin >> n >> m >> k, node = n;\n  for(int i = 1; i <= m; i++) {\n    int u, v;\n    cin >> u >> v;\n    e[u].push_back(v);\n    e[v].push_back(u);\n  }\n  tarjan(1);\n  mx[0] = N, dfs(1, 0), dfs(R, 0);\n  dfs0(R, 0);\n  int ans = calc();\n  if(k == 0) cout << calc() << \"\\n\", exit(0);\n  ans = mod - ans + 1, dfs1(R, 0);\n  cout << (ans + calc()) % mod << \"\\n\";\n  cerr << 1e3 * clock() / CLOCKS_PER_SEC << \" ms\\n\";\n  return 0;\n}\n/*\ng++ cities.cpp -o cities -std=c++14 -O2 -DALEX_WEI\n*/\n```\n\nymx \u6709\u4e00\u4e2a\u9664\u5e76\u67e5\u96c6\u5916\u7ebf\u6027\u7684\u5999\u5999\u505a\u6cd5\u3002",
        "postTime": 1681303058,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "P9167 [\u7701\u9009\u8054\u8003 2023] \u57ce\u5e02\u5efa\u9020"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/JCY-std/p/17315880.html)\n\n[\u6d1b\u8c37\u9898\u9762](https://www.luogu.com.cn/problem/P9167)\n\n\u539f\u9898\u7b49\u4ef7\u4e8e\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u70b9\u96c6 $V$\uff0c\u6ee1\u8db3\u5220\u53bb $V$ \u7684\u5bfc\u51fa\u5b50\u56fe\u4e2d\u7684\u8fb9\u540e\uff0c\u539f\u56fe\u5f62\u6210\u4e86 $|V|$ \u4e2a\u8fde\u901a\u5757\uff0c\u4e14\u8fde\u901a\u5757\u5927\u5c0f\u7684\u6781\u5dee $\\le k$\u3002\u5f62\u6210 $|V|$ \u4e2a\u8fde\u901a\u5757\u53c8\u7b49\u4ef7\u4e8e $V$ \u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u5206\u5c5e\u4e0d\u540c\u7684\u8fde\u901a\u5757\uff0c\u6211\u4eec\u79f0\u8fd9\u6837\u7684 $V$ \u4e3a**\u5408\u6cd5**\u7684\u3002\n\n\u8003\u8651\u5728\u540c\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u4e09\u70b9 $u, v, w$\u3002\u82e5 $u, v \\in V$ \u800c $w \\not \\in V$\uff0c\u6839\u636e\u70b9\u53cc\u8fde\u901a\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u4ece $u$ \u5230 $v$ \u7ecf\u8fc7 $w$ \u7684\u7b80\u5355\u8def\u5f84\uff0c\u6b64\u65f6\u5fc5\u6709\u4e24\u4e2a $V$ \u4e2d\u7684\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u56e0\u6b64\u5bf9\u4e8e**\u5408\u6cd5**\u7684 $V$\uff0c\u540c\u4e00\u4e2a\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u70b9\uff0c\u8981\u4e48\u5168\u5728 $V$ \u4e2d\uff0c\u8981\u4e48\u53ea\u6709\u4e00\u4e2a\u5728 $V$ \u4e2d\uff0c\u8981\u4e48\u5168\u4e0d\u5728 $V$ \u4e2d\u3002\n\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\uff0c\u82e5 $V$ \u7684\u5bfc\u51fa\u5b50\u56fe\u4e0d\u8fde\u901a\uff0c\u5219\u5fc5\u6709\u4e24\u4e2a $V$ \u4e2d\u7684\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u56e0\u6b64\u5bf9\u4e8e**\u5408\u6cd5**\u7684 $V$\uff0c\u5176\u5bfc\u51fa\u5b50\u56fe\u5fc5\u987b\u8fde\u901a\u3002\n\n\u4e0a\u9762\u4e24\u6761\u6027\u8d28\u542f\u53d1\u6211\u4eec\u5efa\u51fa\u539f\u56fe\u7684\u5706\u65b9\u6811\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u6211\u4eec\u9009\u62e9\u7684 $V$ \u4e00\u5b9a\u662f\u5728\u5706\u65b9\u6811\u4e0a\u201c\u8fde\u901a\u201d\u7684\u4e00\u4e9b\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u3002\u5177\u4f53\u5730\uff0c\u7528\u4e00\u4e2a\u65b9\u70b9\u5728 $S$ \u4e2d\u4ee3\u8868\u8be5\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u70b9\u90fd\u5728 $V$ \u4e2d\uff0c**\u5408\u6cd5**\u7684 $V$ \u5bf9\u5e94\u7684 $S$ \u9700\u8981\u6ee1\u8db3\uff1a\u82e5\u65b9\u70b9 $u, v \\in S$\uff0c\u5219\u6240\u6709\u5728\u5706\u65b9\u6811\u4e0a $u, v$ \u95f4\u552f\u4e00\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u65b9\u70b9\u90fd\u5728 $S$ \u4e2d\u3002\u6211\u4eec\u79f0\u8fd9\u6837\u7684 $S$ \u4e3a**\u5408\u6cd5**\u7684\u3002\n\n\u5728\u539f\u56fe\u4e2d\u5220\u53bb $V$ \u7684\u5bfc\u51fa\u5b50\u56fe\u4e2d\u7684\u8fb9\u3001\u5728\u5706\u65b9\u6811\u4e2d\u5220\u53bb $S$ \u4e2d\u7684\u70b9\u540e\uff0c\u539f\u56fe\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u548c\u5706\u65b9\u6811\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\u4e00\u4e00\u5bf9\u5e94\u3002\u5b9a\u4e49\u5706\u65b9\u6811\u4e0a\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e3a\u8fde\u901a\u5757\u7684\u5706\u70b9\u6570\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5706\u65b9\u6811\u4e0a\u7684**\u5408\u6cd5**\u65b9\u70b9\u70b9\u96c6 $S$\uff0c\u6ee1\u8db3\u5220\u53bb $S$ \u4e2d\u7684\u70b9\u540e\u8fde\u901a\u5757\u5927\u5c0f\u7684\u6781\u5dee $\\le k$\u3002\u6211\u4eec\u79f0\u8fd9\u6837\u7684 $S$ \u4e3a**\u7b26\u5408\u9898\u610f**\u7684\u3002\n\n\u8003\u8651 $k \\le 1$ \u6709\u4ec0\u4e48\u7528\u3002\u4e0d\u96be\u731c\u60f3 $S$ \u4e00\u5b9a\u5305\u542b\u91cd\u5fc3\uff0c\u56e0\u4e3a\u8fde\u901a\u5757\u7684\u5212\u5206\u770b\u8d77\u6765\u5341\u5206\u5e73\u5747\u3002\n\n\u8bc1\u660e\uff1a\n\n\u4ee4\u5706\u70b9\u7684\u70b9\u6743\u4e3a $1$\uff0c\u65b9\u70b9\u7684\u70b9\u6743\u4e3a $0$\uff0c\u627e\u51fa\u5706\u65b9\u6811\u7684\u5e26\u6743\u91cd\u5fc3 $rt$\u3002$rt$ \u7684\u6240\u6709\u513f\u5b50\u5b50\u6811\u5185\u7684\u70b9\u6743\u548c\u90fd $\\le \\frac{n}{2}$\u3002\n\n\u5982\u679c $rt$ \u4e3a\u65b9\u70b9\uff0c\u5219**\u7b26\u5408\u9898\u610f**\u7684 $S$ \u5fc5\u7136\u5305\u542b $rt$\uff0c\u56e0\u4e3a\u82e5\u4e0d\u5305\u542b\u5219 $rt$ \u6240\u5728\u7684\u8fde\u901a\u5757\u70b9\u6743\u548c $\\ge \\frac{n}{2} + 1$\uff0c\u800c $rt$ \u4e0d\u5728\u7684\u8fde\u901a\u5757\u70b9\u6743\u548c\u90fd $\\le \\frac{n}{2} - 1$\uff0c\u65e0\u8bba $k$ \u53d6\u591a\u5c11\u90fd\u4e0d**\u7b26\u5408\u9898\u610f**\u3002\n\n\u5982\u679c $rt$ \u4e3a\u5706\u70b9\uff0c\u5bf9\u4e8e**\u7b26\u5408\u9898\u610f**\u7684 $S$\uff0c\u82e5 $u \\in S$\uff0c\u5219\u4ee5 $rt$ \u4e3a\u6839\u65f6 $u$ \u7684\u6240\u6709\u7956\u5148\u65b9\u70b9\u90fd\u5e94\u5c5e\u4e8e $S$\uff0c\u8bc1\u660e\u540c\u7406\u3002\n\n\u8bc1\u6bd5\u3002\n\n\u5f53 $rt$ \u4e3a\u65b9\u70b9\u65f6\u4ee5 $rt$ \u7684\u4efb\u610f\u76f8\u90bb\u5706\u70b9\u4e3a\u6839\uff0c\u5f53 $rt$ \u4e3a\u5706\u70b9\u65f6\u4ee5 $rt$ \u4e3a\u6839\uff0c\u5c06\u5706\u65b9\u6811\u53d8\u4e3a\u6709\u6839\u6811\u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e**\u7b26\u5408\u9898\u610f**\u7684 $S$\uff0c\u82e5 $u \\in S$\uff0c\u5219 $u$ \u7684\u6240\u6709\u7956\u5148\u65b9\u70b9\u90fd\u5e94\u5c5e\u4e8e $S$\u3002\n\n\u5148\u8003\u8651 $k = 0$ \u65f6\u600e\u4e48\u505a\u3002\n\n\u679a\u4e3e\u8fde\u901a\u5757\u5927\u5c0f $x$\uff0c\u8bb0 $sz_i$ \u8868\u793a\u5706\u65b9\u6811\u5b9a\u6839\u540e $i$ \u7684\u5b50\u6811\u5185\u7684\u6743\u503c\u548c\u3002\u5bf9\u4e8e\u65b9\u70b9 $u$\uff0c\u53ef\u4ee5\u53d1\u73b0\u5176\u662f\u5426\u5c5e\u4e8e $S$ \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 $sz_u$ \u786e\u5b9a\u3002\u82e5 $sz_u < x$ \u5219 $u \\not \\in S$\u3002\u82e5 $sz_u > x$ \u5219 $u \\in S$\u3002\u82e5 $sz_u = x$\uff0c\u5982\u679c\u5b9a\u6839\u540e $u$ \u7684\u513f\u5b50\u6570 $\\ge 2$ \u5219 $u \\not \\in S$\uff0c\u5426\u5219 $u \\in S$\u3002\u8bc1\u660e\u8003\u8651\u53cd\u8bc1\uff0c\u82e5\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u4efb\u610f\u6761\u4ef6\u5219 $S$ \u5fc5\u7136\u4e0d**\u7b26\u5408\u9898\u610f**\uff0c\u8bfb\u8005\u53ef\u81ea\u8bc1\u3002\n\n\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e $x$\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u518d\u5f00\u4e00\u4e2a\u6876 $cnt_i$ \u8bb0\u5f55\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $i$ \u7684\u8fde\u901a\u5757\u6570\u91cf\u5373\u53ef\u3002\n\n\u518d\u8003\u8651 $k = 1$\u3002\n\n\u5bb9\u6613\u60f3\u5230\u4e00\u4e2a\u5bb9\u65a5\uff0c\u679a\u4e3e\u8fde\u901a\u5757\u5927\u5c0f\u7684\u96c6\u5408 $\\{x, x + 1\\}$\uff0c\u94a6\u5b9a\u6240\u6709\u8fde\u901a\u5757\u5927\u5c0f\u5c5e\u4e8e\u8be5\u96c6\u5408\uff0c\u8ba1\u7b97\u65b9\u6848\u6570\uff0c\u7136\u540e\u51cf\u53bb\u8fde\u901a\u5757\u5927\u5c0f\u5168\u4e3a $x$ \u6216\u5168\u4e3a $x + 1$ \u7684\u65b9\u6848\u6570\u3002\n\n\u7c7b\u4f3c $k = 0$\uff0c\u82e5 $sz_u < x$ \u5219 $u \\not \\in S$\u3002\u82e5 $sz_u > S$ \u5219 $u \\in S$\u3002\u82e5 $sz_u = x$\uff0c\u5982\u679c\u5b9a\u6839\u540e $u$ \u7684\u513f\u5b50\u6570 $\\ge 2$ \u5219 $u \\not \\in S$\uff0c\u5426\u5219\u7279\u6b8a\u5904\u7406\u3002\n\n\u7279\u6b8a\u5904\u7406\u662f $k = 1$ \u7684\u4e00\u4e2a\u5c0f\u96be\u70b9\u3002\n\n\u5148\u8003\u8651 $x > 1$ \u7684\u60c5\u51b5\u3002\n\n\u8bb0 $fa_i$ \u4e3a\u5b9a\u6839\u540e\u70b9 $i$ \u7684\u7236\u4eb2\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684 $u$\uff0c\u82e5 $fa_u$ \u6709\u82e5\u5e72\u4e2a\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u513f\u5b50\uff0c\u5176\u4e2d\u53ea\u80fd\u6709\u81f3\u591a\u4e00\u4e2a $\\not \\in S$\u3002\n\n\u6211\u4eec\u5148\u94a6\u5b9a\u6240\u6709\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u70b9\u5c5e\u4e8e $S$\uff0c\u6b64\u65f6\u82e5 $fa_u$ \u6240\u5728\u8fde\u901a\u5757\u5927\u5c0f $> 1$\uff0c\u5219\u5176\u6240\u6709\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u513f\u5b50\u53ea\u80fd $\\in S$\u3002\u5426\u5219\uff0c$fa_u$ \u5e94\u6709\u6070\u597d\u4e00\u4e2a\u513f\u5b50 $\\not \\in S$\u3002\n\n\u5373\u5bf9\u4e8e\u6240\u6709\u5b58\u5728\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u513f\u5b50\u3001\u4e14\u5f53\u524d\u6240\u5728\u8fde\u901a\u5757\u5927\u5c0f $= 1$ \u7684 $v$\uff0c\u7ed9\u7b54\u6848\u4e58\u4e0a **\u70b9 $v$ \u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u513f\u5b50\u6570\u91cf**\u3002\n\n\u4f46\u5f53 $x = 1$ \u65f6\uff0c\u6211\u4eec\u5e94\u5bf9\u4e8e\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684 $v$\uff0c\u7ed9\u7b54\u6848\u4e58\u4e0a **\u70b9 $v$ \u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u513f\u5b50\u6570\u91cf\u52a0\u4e00**\u3002\u4e0d\u96be\u53d1\u73b0\u82e5 $fa_v$ \u5b58\u5728\u5219\u5fc5\u6709 $fa_v \\in S$\uff0c\u56e0\u6b64\u6b64\u65f6\u70b9 $v$ \u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u513f\u5b50\u53ef\u4ee5\u90fd $\\in S$\u3002\n\n\u540c\u6837\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u52a0\u6876\u7ef4\u62a4\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\alpha(n))$\uff0c\u74f6\u9888\u5728\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u7cbe\u7ec6\u5b9e\u73b0\u53ef\u4ee5\u4e0d\u7528\u5e76\u67e5\u96c6\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\ntemplate <typename T>\nvoid chkmax(T &x, const T &y) {\n  if (x < y) x = y;\n}\ntemplate <typename T>\nvoid chkmin(T &x, const T &y) {\n  if (y < x) x = y;\n}\nconstexpr int MAXN = 1e5 + 10, MOD = 998244353, INF = 0x3f3f3f3f;\nvoid inc(int &x, int y) { x += y, x >= MOD && (x -= MOD); }\nvoid dec(int &x, int y) { x -= y, x < 0 && (x += MOD); }\nint n, k, dfn[MAXN], low[MAXN], dfc, stk[MAXN], tp, num, sz[MAXN * 2];\nint mini, rt, ans1[MAXN], ans2[MAXN], fa[MAXN * 2], rec[MAXN];\nbool vis[MAXN * 2];\nvector<int> og[MAXN], g[MAXN * 2], buc[MAXN];\nnamespace dsu {\nint fa[MAXN], sz[MAXN], cnt[MAXN];\nvoid init() {\n  iota(fa + 1, fa + n + 1, 1);\n  fill(sz + 1, sz + n + 1, 1);\n  cnt[1] = n;\n}\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\nvoid merge(int x, int y) {\n  x = find(x);\n  y = find(y);\n  --cnt[sz[x]];\n  --cnt[sz[y]];\n  fa[x] = y;\n  sz[y] += sz[x];\n  ++cnt[sz[y]];\n}\n}  // namespace dsu\nvoid tarjan(int u) {\n  dfn[u] = low[u] = ++dfc;\n  stk[++tp] = u;\n  for (auto v : og[u]) {\n    if (!dfn[v]) {\n      tarjan(v);\n      chkmin(low[u], low[v]);\n      if (low[v] == dfn[u]) {\n        g[u].emplace_back(++num);\n        g[num].emplace_back(u);\n        while (true) {\n          int t = stk[tp--];\n          g[num].emplace_back(t);\n          g[t].emplace_back(num);\n          if (t == v) break;\n        }\n      }\n    } else {\n      chkmin(low[u], dfn[v]);\n    }\n  }\n}\nvoid get_root(int u, int pre) {\n  sz[u] = (u <= n);\n  int tmp = 0;\n  for (auto v : g[u]) {\n    if (v == pre) continue;\n    get_root(v, u);\n    sz[u] += sz[v];\n    chkmax(tmp, sz[v]);\n  }\n  chkmax(tmp, n - sz[u]);\n  if (tmp < mini) {\n    mini = tmp;\n    rt = u;\n  }\n}\nvoid dfs(int u, int pre) {\n  fa[u] = pre;\n  sz[u] = (u <= n);\n  for (auto v : g[u]) {\n    if (v == pre) continue;\n    dfs(v, u);\n    sz[u] += sz[v];\n  }\n  if (u > n) buc[sz[u]].emplace_back(u);\n}\nint main() {\n  freopen(\"cities.in\", \"r\", stdin);\n  freopen(\"cities.out\", \"w\", stdout);\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  int m;\n  cin >> n >> m >> k;\n  while (m--) {\n    int u, v;\n    cin >> u >> v;\n    og[u].emplace_back(v);\n    og[v].emplace_back(u);\n  }\n  num = n;\n  tarjan(1);\n  mini = INF;\n  get_root(1, 0);\n  if (rt > n) rt = g[rt][0];\n  dfs(rt, 0);\n  dsu::init();\n  for (int i = 1; i < n; ++i) {\n    for (auto u : buc[i]) {\n      if (g[u].size() > 2) {\n        for (int j = 1; j < (int)g[u].size(); ++j)\n          dsu::merge(g[u][j - 1], g[u][j]);\n      }\n    }\n    ans1[i] = (dsu::cnt[i] * i == n);\n    vector<int> vec;\n    for (auto u : buc[i]) {\n      if (g[u].size() == 2) {\n        if (dsu::sz[dsu::find(fa[u])] == 1) {\n          vis[u] = vis[fa[u]] = true;\n          dsu::merge(fa[u], g[u][g[u][0] == fa[u]]);\n          vec.emplace_back(fa[u]);\n          rec[fa[u]] = 1;\n        } else if (vis[fa[u]]) {\n          ++rec[fa[u]];\n        }\n      }\n    }\n    if (dsu::cnt[i] * i + dsu::cnt[i + 1] * (i + 1) == n) {\n      ans2[i] = 1;\n      for (auto u : vec) ans2[i] = (ll)ans2[i] * (rec[u] + (i == 1)) % MOD;\n    }\n    for (auto u : buc[i]) {\n      if (g[u].size() == 2 && !vis[u]) {\n        for (int j = 1; j < (int)g[u].size(); ++j)\n          dsu::merge(g[u][j - 1], g[u][j]);\n      }\n    }\n  }\n  if (!k) {\n    cout << accumulate(ans1 + 1, ans1 + n, 0) << \"\\n\";\n  } else {\n    int ans = MOD - 1;\n    for (int i = 1; i < n; ++i) inc(ans, ans2[i]);\n    for (int i = 2; i < n; ++i) dec(ans, ans1[i]);\n    cout << ans << \"\\n\";\n  }\n  return 0;\n}\n```",
        "postTime": 1681386964,
        "uid": 141572,
        "name": "JCY_",
        "ccfLevel": 7,
        "title": "P9167 [\u7701\u9009\u8054\u8003 2023] \u57ce\u5e02\u5efa\u9020"
    },
    {
        "content": "# D1T2 \u57ce\u5e02\u5efa\u9020 cities\n\n\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u70b9\u88ab\u9009\u4e2d\u3002\n\n\u7531\u4e8e\u8fde\u901a\u5757\u5927\u5c0f\u662f $\\left\\lfloor n/cnt\\right\\rfloor$ \u548c $\\left\\lceil n/cnt\\right\\rceil$\uff0c\u53ea\u6709 $O(\\sqrt{n})$ \u79cd\uff0c\u53ef\u4ee5\u679a\u4e3e\u8fde\u901a\u5757\u5927\u5c0f\u3002\n\n\u8003\u8651\u6811\u4e0a\u600e\u4e48\u505a\uff0c\u5047\u8bbe\u5f53\u524d\u679a\u4e3e\u7684\u8fde\u901a\u5757\u5927\u5c0f $siz$\uff0c\u53ef\u80fd\u7684\u8fde\u901a\u5757\u4e2a\u6570 $cnt$\uff0c\u90a3\u4e48\u6709 $cnt$ \u4e2a\u8282\u70b9\u88ab\u9009\u4e2d\uff0c\u4e14\u65ad\u8fb9\u540e\u65ad\u6210\u4e86 $cnt$ \u4e2a\u8fde\u901a\u5757\uff0c\u4e5f\u5c31\u662f $cnt$ \u4e2a\u8282\u70b9\u6709 $cnt-1$ \u6761\u8fb9\uff0c\u56e0\u6b64\u5408\u6cd5\u65b9\u6848\u5b9e\u9645\u4e0a\u662f\u4e00\u68f5\u6811\uff08\u8fd9\u4e2a\u6027\u8d28\u5728\u8003\u573a\u4e0a\u8ba4\u4e3a\u662f\u83ca\u82b1\u6216\u662f\u94fe\u4e4b\u7c7b\u7684\uff0c\u6ca1\u62ff\u5230\u90e8\u5206\u5206\uff09\u3002\n\n\u8003\u8651\u4e00\u4e2a\u6811\u5f62 DP\uff0c\u8bbe $f_v$ \u4e3a $v$ \u4e0e\u7236\u4eb2\u7684\u8fde\u8fb9\u88ab\u65ad\u5f00\uff0c\u5373 $v$ \u5b50\u6811\u5185\u90e8\u5212\u5206\u6210\u5927\u5c0f\u4e3a $siz$ \u6216 $siz+1$ \u7684\u8fde\u901a\u5757\u7684\u65b9\u6848\u6570\u3002\n\n\u4e00\u68f5\u6811\u7684\u6027\u8d28\u540c\u6837\u63ed\u793a\u4e86\u53e6\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u5982\u679c $v$ \u4e0e\u7236\u4eb2\u7684\u8fde\u8fb9\u4e0d\u65ad\u5f00\uff0c\u90a3\u4e48 $v$ \u4e00\u5b9a\u662f\u6574\u4f53\u5e76\u5165\u5176\u7236\u4eb2\u6240\u5728\u8fde\u901a\u5757\u7684\uff0c\u4e5f\u5c31\u53ea\u548c\u5b50\u6811\u5927\u5c0f $siz_v$ \u6709\u5173\u4e86\u3002\n\n\u8fd9\u6837\u5bf9\u4e8e $u$ \u7684\u513f\u5b50 $v$\uff0c\u4e0d\u540c\u7684 $siz_v$ \u76f4\u63a5\u5bf9\u5e94\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\uff1a\n\n- $siz_v>siz$\uff0c\u4e0d\u53ef\u80fd\u4e0e $u$ \u5728\u540c\u4e00\u8fde\u901a\u5757\uff0c$(u,v)$ \u5fc5\u987b\u65ad\u5f00\u3002\n\n- $siz_v=siz$\uff0c\u65e2\u53ef\u80fd\u4e0e $u$ \u5728\u540c\u4e00\u8fde\u901a\u5757\uff0c\u4e5f\u53ef\u80fd\u5355\u72ec\u6210\u8fde\u901a\u5757\u3002\n\n- $siz_v<siz$\uff0c\u4e00\u5b9a\u4e0e $u$ \u5728\u540c\u4e00\u8fde\u901a\u5757\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u5426\u5185\u90e8\u5212\u5206\u90fd\u5408\u6cd5\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u4e4b\u548c\u4e0e $u$ \u62fc\u5728\u4e00\u8d77\u662f\u5426\u5408\u6cd5\uff0c\u540c\u65f6\u5c06\u7684\u7b2c\u4e00\u79cd\u60c5\u51b5\u7684\u65b9\u6848\u6570\u7d2f\u6210\u5373\u4e3a\u7b54\u6848\u3002\u8fd8\u6709\u4e00\u540c\u65f6\u60c5\u51b5\u4e3a\uff1a\u4e0d\u5b58\u5728\u5c0f\u4e8e $siz$ \u7684\uff0c\u6b64\u65f6\u82e5 $siz=1$ \u6216\u5b58\u5728\u7b49\u4e8e $siz$ \u7684\u5b50\u6811 $v$ \u624d\u5408\u6cd5\uff0c\u4e14\u65b9\u6848\u6570\u4e58\u4e0a\u6ee1\u8db3\u6761\u4ef6\u7684 $v$ \u7684\u4e2a\u6570\uff08\u5982\u679c $u$ \u5355\u72ec\u6210\u5757\u4e5f\u5408\u6cd5\u4e5f\u8981\u8ba1\u5165\uff09\u3002\n\n\u8fd9\u6837\u5728\u6bcf\u4e2a\u8282\u70b9\u7edf\u8ba1\u7b54\u6848\uff0c\u9ed8\u8ba4\u5176\u7236\u4eb2\u53ca\u5176\u4ed6\u5b50\u6811\u90fd\u4e0d\u65ad\u5f00\u3002\n\n---\n\n\u653e\u5230\u56fe\u4e0a\uff0c\u7531\u4e8e\u5220\u53bb\u9009\u4e2d\u8282\u70b9\u7684\u5168\u90e8\u8fde\u8fb9\u540e\u4e0d\u8fde\u901a\uff0c\u5bb9\u6613\u60f3\u5230\u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u6837\u4e00\u4e2a\u70b9\u53cc\u5185\u5982\u679c\u9009\u53d6\u8d85\u8fc7\u4e00\u4e2a\u4e14\u6709\u6ca1\u6709\u9009\u53d6\u7684\uff0c\u65e0\u6cd5\u8fbe\u5230\u4e0d\u8fde\u901a\u7684\u6761\u4ef6\u3002\u56e0\u6b64\u4e00\u4e2a\u70b9\u53cc\u8981\u4e48\u5168\u4e0d\u9009\uff0c\u8981\u4e48\u5168\u9009\uff0c\u8981\u4e48\u9009\u4e00\u4e2a\u3002\u53cd\u6620\u5230\u5706\u65b9\u6811\u4e0a\u5c31\u662f\u9009\u53d6\u70b9\u51fb\u6784\u6210\u7684\u6811\uff0c\u53f6\u5b50\u8282\u70b9\u4e00\u5b9a\u5168\u662f\u5706\u70b9\u3002\n\n\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u540c\u6837\u53ef\u4ee5\u8ba8\u8bba\u5706\u70b9\u65b9\u70b9\u540e DP\uff0c$f_u$ \u5b9a\u4e49\u76f8\u540c\u3002\n\n\u5bf9\u4e8e\u5706\u70b9\uff0c\u548c\u4e0a\u9762\u6811\u7684\u60c5\u51b5\u8ba8\u8bba\u662f\u4e00\u81f4\u7684\uff1b\u5bf9\u4e8e\u65b9\u70b9\uff0c\u5982\u679c\u65ad\u5f00\u4e86\u5176\u4e0e\u7236\u4eb2\u7684\u8fde\u8fb9\uff0c\u90a3\u4e48\u610f\u5473\u7740\u5176\u4e0e\u513f\u5b50\u8fde\u8fb9\u8981\u4e48\u4e0d\u65ad\u5f00\u8981\u4e48\u5168\u90e8\u65ad\u5f00\uff0c\u56e0\u6b64\u5728\u5bf9\u65b9\u70b9 DP \u65f6\uff0c\u53ea\u9700\u8981\u8003\u8651\u5168\u90e8\u65ad\u5f00\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\n\n\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56fe\u4e0a\u548c\u6811\u4e0a\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5373\u4fbf $siz_v=siz$\uff0c\u65ad\u5f00 $(u,v)$ \u540e\u4e0d\u4e00\u70b9\u5408\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u4ee3\u8868\u7740 $v$ \u5bf9\u5e94\u6240\u6709\u5706\u70b9\u8fde\u8fb9\u90fd\u5c06\u65ad\u5f00\uff0c\u800c\u4e0d\u662f\u50cf\u6811\u4e0a\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u3002\n\n\u8fd9\u6837\u5927\u81f4\u5c31\u662f\u5168\u90e8\u7b97\u6cd5\u6d41\u7a0b\uff0c\u8fd8\u5b58\u5728\u7684\u95ee\u9898\u662f\u679a\u4e3e\u5230 $\\left\\lfloor n/cnt\\right\\rfloor$ \u65f6\u6709\u53ef\u80fd\u5b58\u5728\u65b9\u6848\u81f3\u5212\u5206\u6210\u4e86\u5927\u5c0f\u4e3a $\\left\\lceil n/cnt\\right\\rceil$ \u7684\u8fde\u901a\u5757\uff0c\u8fd9\u6837\u4f1a\u7b97\u91cd\u3002\u53ef\u4ee5\u5bb9\u65a5\uff0c\u51cf\u53bb $\\left\\lceil n/cnt\\right\\rceil$ \u5bf9\u5e94 $k=0$ \u7684\u60c5\u51b5\u3002\n\n--- \n\n\u7531\u4e8e\u590d\u6742\u5ea6\u4e00\u5b9a\u62c9\u6ee1\uff0c\u9700\u8981\u5927\u9762\u79ef\u5361\u5e38\uff1a\n\n- \u53ea\u5728\u91cd\u5fc3\u4f4d\u7f6e\u7edf\u8ba1\u7b54\u6848\uff0c\u91cd\u5fc3\u4e00\u5b9a\u4f1a\u88ab\u9009\u4e2d\uff0c\u5426\u5219\u88ab\u9009\u4e2d\u7684\u90e8\u5206\u662f\u5176\u4e00\u4e2a\u5b50\u6811\uff0c\u5927\u5c0f\u4e0d\u8d85\u8fc7\u4e00\u534a\uff0c\u4e5f\u5c31\u548c\u5176\u4f59\u90e8\u5206\u5927\u5c0f\u76f8\u5dee $1$ \u4ee5\u4e0a\u3002\n\n- DFS \u65f6\u6309\u7167 DFS \u5e8f\u91cd\u6807\u53f7\uff0c$O(\\sqrt{n})$ \u6b21 DFS \u4f7f\u7528\u975e\u9012\u5f52 DFS\u3002\n\n- \u4f7f\u7528\u90bb\u63a5\u8868\u800c\u4e0d\u662f `vector`\u3002\n\n- \u5982\u679c\u5b58\u5728\u5927\u5c0f\u5927\u4e8e $siz$ \u7684\u5b50\u6811\u5185\u90e8\u4e0d\u5408\u6cd5\u6216\u662f\u5927\u5c0f\u5c0f\u4e8e $siz$ \u7684\u5b50\u6811\u5927\u5c0f\u4e4b\u548c\u8d85\u8fc7\u4e86 $siz$\uff0c\u4e00\u5b9a\u6ca1\u6709\u5408\u6cd5\u65b9\u6848\uff0c\u53ef\u4ee5\u4e0d\u518d\u679a\u4e3e\u5b50\u6811\u3002\n\n- \u5982\u679c $siz_u<siz$\uff0c\u4e00\u5b9a\u6ca1\u6709\u5408\u6cd5\u65b9\u6848\uff0c\u8fd9\u4e00\u5904\u80fd\u5e26\u6765\u6781\u5927\u7684\u4f18\u5316\u3002",
        "postTime": 1681802434,
        "uid": 321177,
        "name": "SoyTony",
        "ccfLevel": 6,
        "title": "P9167 \u9898\u89e3"
    },
    {
        "content": "\u8003\u573a\u964d\u667a\u7cfb\u5217\u3002\n\n\u9996\u5148\u624b\u6a21\u4e00\u4e0b\uff0c\u53d1\u73b0\u9898\u610f\u5c31\u662f\u8ba9\u6211\u4eec\u9009\u51fa\u4e00\u4e2a\u70b9\u96c6\uff0c\u5220\u53bb\u4e4b\u95f4\u7684\u6240\u6709\u8fb9\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u70b9\u96c6\u4e2d\u7684\u6bcf\u4e2a\u70b9\u90fd\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u3002\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u9009\u62e9\u7684\u70b9\u96c6\u4e00\u5b9a\u662f\u82e5\u5e72\u4e2a\u70b9\u53cc\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u53cc\u4e2d\u7684\u70b9\u6ca1\u6709\u5168\u90e8\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u5176\u4e2d\u81f3\u5c11\u4e24\u4e2a\u70b9\u4ecd\u7136\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\u3002\u5176\u6b21\uff0c\u6211\u4eec\u53d1\u73b0\u9009\u53d6\u7684\u70b9\u96c6\u4e00\u5b9a\u662f\u8054\u901a\u7684\uff0c\u5426\u5219\u540c\u6837\u4f1a\u6709\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\u3002\u4e0d\u96be\u53d1\u73b0\u8fd9\u5c31\u662f\u70b9\u96c6\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u6362\u6210\u4e86\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u5220\u53bb\u82e5\u5e72\u4e2a\u8054\u901a\u7684\u70b9\u53cc\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u8fde\u901a\u5757\u7684\u5927\u5c0f\u7684\u6781\u5dee $\\le k$\u3002\n\n\u9996\u5148\u70b9\u53cc\u5bb9\u6613\u60f3\u5230\u5706\u65b9\u6811\u8f6c\u6210\u6811\uff0c\u73b0\u5728\u5c31\u662f\u4e00\u4e2a\u6811\u5f62 DP \u4e86\u3002\u6781\u5dee\u4e0d\u597d\u505a\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u679a\u4e3e\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53 $k=0$ \u65f6\uff0c\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u53ea\u80fd\u662f $n$ \u7684\u56e0\u5b50\uff0c\u6570\u91cf\u662f $O(\\sqrt{n})$ \u7684\uff1b$k=1$ \u65f6\uff0c\u5047\u5982\u6709 $k$ \u4e2a\u8fde\u901a\u5757\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e3a $\\lfloor \\frac{n}{k}\\rfloor$ \u4e0e $\\lceil \\frac{n}{k}\\rceil$\uff0c\u800c\u8fd9\u4e2a\u8fde\u901a\u5757\u5927\u5c0f\u4e5f\u53ea\u6709 $O(\\sqrt{n})$ \u79cd\u3002\n\n\u5047\u5982\u6211\u4eec\u679a\u4e3e\u5f53\u524d\u7684\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $t$\uff08\u4e0e $t+1$\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5728\u5706\u65b9\u6811\u4e0a\u8dd1\u6811\u5f62\u80cc\u5305\uff0c\u5c31\u5f88\u5bb9\u6613\u80fd\u591f DP \u6c42\u51fa\u7b54\u6848\u3002\u5177\u4f53\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65b9\u70b9\uff0c\u5b83\u7684\u65b9\u6848\u4e3a\u6240\u6709\u513f\u5b50\u7684\u65b9\u6848\u6570\u7684\u4e58\u79ef\uff1b\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5706\u70b9\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5f53\u524d\u5706\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $t$\uff08\u4e0e $t+1$\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u513f\u5b50\u4fdd\u7559\uff0c\u9009\u62e9\u4e00\u4e9b\u513f\u5b50\u5220\u9664\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6811\u5f62\u80cc\u5305\u5b9e\u73b0\u3002\n\n\u5bf9\u4e8e\u9009\u53d6\u7684\u8fde\u901a\u5757\uff0c\u6211\u4eec\u5728\u6df1\u5ea6\u6700\u5c0f\u7684\u4f4d\u7f6e\u7edf\u8ba1\u7b54\u6848\uff0c\u90a3\u4e48\u5728\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u5b83\u4f5c\u4e3a\u9009\u53d6\u7684\u8fde\u901a\u5757\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u65f6\u7684\u65b9\u6848\u6570\u5373\u53ef\u3002\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e3a $O(nt)$\u3002\u5047\u5982\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u5927\u5c0f\u505a\u4e00\u904d\uff0c\u7531\u4e8e\u8c03\u548c\u7ea7\u6570\u4e3a $O(\\log n)$\uff0c\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u4e3a $O(n^2 \\log n)$\uff0c\u80fd\u591f\u62ff\u5230 65 \u5206\u3002\n\n\u4ee5\u4e0a\u662f\u8003\u573a\u4e0a\u60f3\u5230\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u8003\u573a\u964d\u667a\uff0c\u5fd8\u4e86\u600e\u4e48\u5efa\u5706\u65b9\u6811\u4e86\uff0c\u75db\u5931 40 \u5206\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u66f4\u4ed4\u7ec6\u7684\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u80cc\u5305\u7684\u9009\u53d6\u8fc7\u7a0b\u3002\u5148\u8003\u8651 $k=0$ \u7684\u60c5\u51b5\u3002\u6211\u4eec\u53d1\u73b0\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u6811\uff0c\u5982\u679c\u6211\u4eec\u9009\u53d6\u5b83\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u81f3\u5c11\u8981\u4e3a $t$\uff0c\u5426\u5219\u5185\u90e8\u4e0d\u53ef\u80fd\u5212\u5206\u51fa\u5927\u5c0f\u4e3a $t$ \u7684\u8fde\u901a\u5757\u3002\u800c\u4e14\uff0c\u5982\u679c\u5b50\u6811\u5927\u5c0f $\\ge t$\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u4e0d\u80fd\u4e0d\u9009\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u9009\uff0c\u6839\u8282\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\u5927\u5c0f\u81f3\u5c11\u4e3a $t+1$\uff0c\u4e5f\u4e0d\u7b26\u5408\u9898\u610f\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b50\u6811\u5927\u5c0f\u4e0e $t$ \u7684\u5173\u7cfb\uff0c\u552f\u4e00\u786e\u5b9a\u4e0b\u6765\u5b50\u6811\u7684\u9009\u53d6\u65b9\u6848\uff0c\u7136\u540e\u5224\u65ad\u4e00\u4e0b\u5f62\u6210\u7684\u8fde\u901a\u5757\u5927\u5c0f\u662f\u5426\u7b49\u4e8e $t$ \u5373\u53ef\u3002\u8fd9\u6837\u5c31\u80fd\u4f18\u5316\u5230\u5355\u6b21 $O(n)$ \u4e86\u3002\n\n$k=1$ \u7684\u60c5\u51b5\u540c\u6837\u53ef\u4ee5\u7c7b\u4f3c\u7684\u8003\u8651\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5b50\u6811\u5927\u5c0f $<t$ \u65f6\u540c\u6837\u4e00\u5b9a\u4e0d\u9009\uff0c\u5b50\u6811\u5927\u5c0f $>t$ \u65f6\u540c\u6837\u4e00\u5b9a\u9009\uff0c\u800c\u5bf9\u4e8e $=t$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u4e0d\u9009\uff0c\u8fd9\u6837\u6839\u8282\u70b9\u6240\u5728\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $t+1$\uff0c\u540c\u6837\u7b26\u5408\u9650\u5236\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u54ea\u4e2a $=t$ \u7684\u5b50\u6811\u4e0d\u9009\uff0c\u7136\u540e\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u4e5f\u662f $O(n)$ \u7684\uff0c\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(n \\sqrt{n})$ \u7684\u4e86\u3002\n\n\u636e\u8bf4\u8fd9\u4e2a\u505a\u6cd5\u5361\u5361\u5e38\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f\u6211\u81ea\u5df1\u5361\u4e86\u4e00\u4e0a\u5348\uff0c\u4ecd\u7136\u53ea\u80fd\u505a\u5230\u6700\u5927\u7684\u70b9\u672c\u673a\u8dd1 0.8s\uff0cluogu \u4e0a TLE\u3002\u6211\u8fd8\u662f\u6bd4\u8f83\u83dc\u3002\n\n\u4e0a\u8ff0\u505a\u6cd5\u611f\u89c9\u4e0a\u5176\u5b9e\u5f88\u591a\u8282\u70b9\u90fd\u4e0d\u5b58\u5728\u5408\u6cd5\u7684\u5212\u5206\u65b9\u6848\u3002\u6211\u4eec\u8003\u8651\u4e0d\u679a\u4e3e\u8fde\u901a\u5757\u5927\u5c0f\u5206\u522b\u8dd1 DP\uff0c\u800c\u662f\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u5927\u5c0f\u4e00\u8d77\u8dd1 DP\u3002\u5206\u6790\u4e0a\u8ff0\u7b97\u6cd5\u8fc7\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u6b21\u9009\u53d6\u7684\u5b50\u6811\u90fd\u662f\u4e00\u4e2a\u540e\u7f00\uff08\u4e2d\u95f4\u53ef\u80fd\u5220\u53bb\u4e00\u4e2a\u6811\uff09\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u679a\u4e3e\u9009\u53d6\u7684\u8fd9\u4e2a\u540e\u7f00\uff0c\u7136\u540e\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u8fde\u901a\u5757\u5927\u5c0f\uff0c\u53ea\u5bf9\u8fd9\u4e9b\u8fde\u901a\u5757\u5927\u5c0f\u8fdb\u884c DP\u3002\u7531\u4e8e\u524d\u7f00\u7684\u4e2a\u6570\u662f $O(deg)$ \u7684\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5706\u70b9\u7684\u5408\u6cd5\u7684\u8fde\u901a\u5757\u5927\u5c0f\u5c31\u53ea\u6709 $O(deg)$ \u79cd\uff0c\u603b\u5171\u7684\u72b6\u6001\u6570\u5176\u5b9e\u5c31\u53ea\u6709 $O(n)$ \u4e2a\u3002\u5bf9\u4e8e\u65b9\u70b9\u6765\u8bf4\uff0c\u5b83\u7684\u65b9\u6848\u6570\u7b49\u4e8e\u6240\u6709\u5b50\u6811\u7684\u65b9\u6848\u6570\u7684\u4e58\u79ef\uff0c\u90a3\u4e48\u5b83\u7684\u5408\u6cd5\u72b6\u6001\u6570\u4e5f\u4e00\u5b9a\u662f\u5c0f\u4e8e\u7b49\u4e8e\u6240\u6709\u5b50\u6811\u4e2d\u72b6\u6001\u6570\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u65b9\u70b9\u7684\u72b6\u6001\u6570\u4e5f\u662f $O(n)$ \u7684\u3002\u4e8e\u662f\u8fd9\u6837\u8dd1 DP \u5c31\u80fd $O(n)$ \u5f97\u51fa\u7b54\u6848\u4e86\u3002\u7ec6\u8282\u5f88\u591a\uff0c\u6211\u5199\u4e86\u597d\u4e45\u624d\u5199\u51fa\u6765\uff0c\u6211\u597d\u83dc\u3002\n\n\u89c6\u5b9e\u73b0\u800c\u5b9a\uff0c\u53ef\u505a\u5230 $O(n \\log n)$ \u6216 $O(n)$ \u7684\u590d\u6742\u5ea6\u3002\u6211\u5199\u7684 $O(n \\log n)$\uff0c\u590d\u6742\u5ea6\u74f6\u9888\u5728\u7ed9\u5b50\u6811\u6392\u5e8f\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 200005, P = 998244353;\nint n, m, k;\nint ans[MAXN][2];\nset<int> s;\nunordered_map<int, int> f[MAXN][2], fsuf[MAXN];\nstruct Tree {\n    vector<int> e[MAXN], re[MAXN];\n    int tot;\n    void add(int u, int v) {\n        e[u].push_back(v), e[v].push_back(u);\n    }\n    int siz[MAXN];\n    int to[MAXN];\n    void dfs(int u, int pre) {\n        siz[u] = u <= n;\n        for (int v : e[u]) if (v != pre) {\n            dfs(v, u);\n            siz[u] += siz[v];\n        }\n        sort(e[u].begin(), e[u].end(), [&](int a, int b) { return siz[a] < siz[b]; });\n        int deg = 0;\n        for (int v : e[u]) if (v != pre) {\n            deg++;\n            to[deg] = v;\n        }\n        if (u <= n) {\n            { // k = 0\n                for (int i = 1; i <= deg; i++) \n                    fsuf[i].clear();\n                for (int i = deg; i >= 1; i--) {\n                    int v = to[i];\n                    if (i == deg) fsuf[i] = f[v][0];\n                    else for (auto p : f[v][0]) {\n                        int t = p.first, w = p.second;\n                        fsuf[i][t] = 1ll * fsuf[i + 1][t] * w % P;\n                    }\n                }\n                int sz = 1, up = n - siz[u];\n                for (int i = 1; i <= deg; i++) {\n                    if (siz[to[i]] >= sz) {\n                        if (s.count(sz)) f[u][0][sz] = (f[u][0][sz] + fsuf[i][sz]) % P;\n                        if (s.count(sz + up)) ans[sz + up][0] = (ans[sz + up][0] + fsuf[i][sz + up]) % P;\n                    }\n                    sz += siz[to[i]];\n                }\n                if (s.count(sz)) f[u][0][sz] = (f[u][0][sz] + 1) % P;\n                if (s.count(sz + up)) ans[sz + up][0] = (ans[sz + up][0] + 1) % P;\n            }\n            { // k = 1\n                for (int i = 1; i <= deg; i++) \n                    fsuf[i].clear();\n                for (int i = deg; i >= 1; i--) {\n                    int v = to[i];\n                    if (i == deg) fsuf[i] = f[v][1];\n                    else for (auto p : f[v][1]) {\n                        int t = p.first, w = p.second;\n                        fsuf[i][t] = 1ll * fsuf[i + 1][t] * w % P;\n                    }\n                }\n                int sz = 1, up = n - siz[u];\n                for (int i = 1; i <= deg; i++) {\n                    if (siz[to[i]] >= sz) {\n                        if (s.count(sz)) f[u][1][sz] = (f[u][1][sz] + fsuf[i][sz]) % P;\n                    }\n                    if (siz[to[i]] >= sz + up) {\n                        if (s.count(sz + up)) {\n                            ans[sz + up][1] = (ans[sz + up][1] + fsuf[i][sz + up]) % P;\n                        }\n                    }\n                    if (sz - 1 > 0 && siz[to[i - 1]] < sz - 1 && siz[to[i]] >= sz - 1) {\n                        if (s.count(sz - 1)) f[u][1][sz - 1] = (f[u][1][sz - 1] + fsuf[i][sz - 1]) % P;\n                    }\n                    if (sz + up - 1 > 0 && siz[to[i - 1]] < sz + up - 1 && siz[to[i]] >= sz + up - 1) {\n                        if (s.count(sz + up - 1)) {\n                            ans[sz + up - 1][1] = (ans[sz + up - 1][1] + fsuf[i][sz + up - 1]) % P;\n                        }\n                    }\n                    sz += siz[to[i]];\n                }\n                if (s.count(sz)) f[u][1][sz] = (f[u][1][sz] + 1) % P;\n                if (deg && siz[to[deg]] < sz - 1) {\n                    if (s.count(sz - 1)) f[u][1][sz - 1] = (f[u][1][sz - 1] + 1) % P;\n                }\n                if (deg && siz[to[deg]] < sz + up - 1) {\n                    if (s.count(sz + up - 1)) ans[sz + up - 1][1] = (ans[sz + up - 1][1] + 1) % P;\n                }\n                if (deg) {\n                    int kk = 0, prod = 1;\n                    int lst = 0;\n                    sz = siz[to[1]];\n                    for (int i = 1; i <= deg; i++) {\n                        int v = to[i];\n                        if (siz[v] != sz) {\n                            lst = i;\n                            break;\n                        }\n                        kk = (prod + 1ll * kk * f[v][1][sz]) % P;\n                        prod = 1ll * prod * f[v][1][sz] % P;\n                    }\n                    if (lst) kk = 1ll * kk * fsuf[lst][sz] % P;\n                    if (s.count(sz)) f[u][1][sz] = (f[u][1][sz] + kk) % P;\n                    if (u == 1 && s.count(sz)) {\n                        ans[sz][1] = (ans[sz][1] + kk) % P;\n                    }\n                }\n            }\n        } else {\n            int vv = 0;\n            for (int v : e[u]) if (v != pre) {\n                vv = v;\n                break;\n            }\n            if (!vv) {\n                for (int t : s) f[u][0][t] = f[u][1][t] = 1;\n            } else {\n                for (int k = 0; k <= 1; k++) {\n                    for (auto p : f[vv][k]) {\n                        int t = p.first;\n                        f[u][k][t] = 1;\n                        for (int v : e[u]) if (v != pre) {\n                            f[u][k][t] = 1ll * f[u][k][t] * f[v][k][t] % P;\n                        }\n                    }\n                }\n            }\n        }\n    }\n} t;\nstruct Graph {\n    vector<int> e[MAXN];\n    void add(int u, int v) {\n        e[u].push_back(v), e[v].push_back(u);\n    }\n    int low[MAXN], dfn[MAXN], dcnt;\n    stack<int> s;\n    void tarjan(int u) {\n        low[u] = dfn[u] = ++dcnt;\n        s.push(u);\n        for (int v : e[u]) if (!dfn[v]) {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n            if (low[v] >= dfn[u]) {\n                int id = ++t.tot;\n                while (1) {\n                    int w = s.top(); s.pop();\n                    t.add(id, w);\n                    if (w == v) break;\n                }\n                t.add(id, u);\n            }\n        } else {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n} g;\nint main() {\n    // freopen(\"cities.in\", \"r\", stdin);\n    // freopen(\"cities.out\", \"w\", stdout);\n    scanf(\"%d%d%d\", &n, &m, &k);\n    for (int i = 1; i <= m; i++) {\n        int u, v; scanf(\"%d%d\", &u, &v);\n        g.add(u, v);\n    }\n    t.tot = n;\n    g.tarjan(1);\n    for (int i = 2; i <= n; i++) \n        s.insert(n / i);\n    t.dfs(1, 0);\n    int fans = 0;\n    if (k == 0) {\n        for (int i : s) if (n % i == 0) {\n            fans = (fans + ans[i][0]) % P;\n        }\n    } else {\n        for (int i : s) {\n            fans = (fans + ans[i][1]) % P;\n        }\n        for (int i : s) if (s.count(i - 1)) {\n            fans = (fans - ans[i][0] + P) % P;\n        }\n    }\n    printf(\"%d\\n\", fans);\n    return 0;\n}\n```",
        "postTime": 1681265541,
        "uid": 279652,
        "name": "APJifengc",
        "ccfLevel": 9,
        "title": "\u300c\u89e3\u9898\u62a5\u544a\u300dP9167 [\u7701\u9009\u8054\u8003 2023] \u57ce\u5e02\u5efa\u9020"
    },
    {
        "content": "1. \u5728\u539f\u56fe\u4e0a\u5220\u8fb9\uff0c\u6700\u540e\u82e5\u6ee1\u8db3\u6761\u4ef6\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fde\u901a\u5757\u5927\u5c0f\u6ee1\u8db3\u6761\u4ef6\u4e14\u6bcf\u4e2a\u8fde\u901a\u5757\u5404\u51fa\u6070\u597d\u4e00\u4e2a\u8282\u70b9\u6709\u5220\u8fb9\u3002\u7531\u6b64\u63a8\u8bba\uff1a\u4efb\u610f\u4e00\u6761\u88ab\u5220\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6700\u540e\u4e0d\u8fde\u901a\u3002\n\n2. \u8fdb\u4e00\u6b65\u5f97\u5230\uff0c\u4e00\u4e2a\u70b9\u53cc\uff08\u56e0\u4e3a\u7531\u5176\u5b9a\u4e49\uff0c\u9664\u4e86\u53ea\u6709\u4e00\u6761\u8fb9\u4e4b\u5916\uff0c\u90fd\u6ee1\u8db3\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u81f3\u5c11\u6709\u4e24\u6761\u4e0d\u5728\u70b9\u5904\u76f8\u4ea4\u7684\u8def\u5f84\uff09\u5185\u6240\u6709\u8fb9\u8981\u4e48\u540c\u65f6\u5220\u9664\u8981\u4e48\u540c\u65f6\u4e0d\u5220\u9664\u3002\n\n3. \u4ee5\u4e0a\u6784\u6210\u4e86\u4e00\u4e2a\u65b9\u6848\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u3002\n\n---\n\n\u5706\u65b9\u6811\uff0c\u65b9\u70b9\u70b9\u6743\u4e3a $0$\u3002\u5982\u679c\u80fd\u627e\u5230\u4e00\u4e2a\u70b9\u5468\u56f4\u7684\u8fb9\u5fc5\u987b\u5220\uff0c\u4ee5\u5176\u4e3a\u6839\u8fd9\u4e2a\u95ee\u9898\u5c31\u5f88\u7b80\u5355\u3002\u53ef\u4ee5\u8bc1\u660e\u91cd\u5fc3\u662f\u8fd9\u6837\u7684\u70b9\u3002\n\n> \u65ad\u8a00\uff1a\u82e5 $k = 0$\uff0c\u76f4\u63a5\u968f\u4fbf\u5220\u6389\u5b83\u5230\u91cd\u513f\u5b50\u7684\u8fb9\u5c31\u662f\u53ef\u884c\u7684\u3002\n\n\u56e0\u4e3a\u82e5\u8fd9\u6761\u8fb9\u4e0d\u5220\uff0c\u90a3\u4e48\u81f3\u5c11\u5c31\u6709\u4e00\u4e2a $siz_{son_x} + 1$ \u7684\u5927\u5c0f\uff0c\u800c\u4ed6\u662f\u91cd\u5fc3\uff0c\u6240\u4ee5\u5f97\u5230 $n - siz_{son_x} \\le siz_{son_x} < siz_{son_x} + 1$\u3002\u90a3\u4e48\u5176\u4ed6\u90e8\u5206\u4e0d\u53ef\u80fd\u548c\u8fd9\u4e2a\u76f8\u7b49\u3002\n\n\u7531\u4e8e\u5220\u7684\u8fb9\u5fc5\u987b\u8054\u901a\uff0c\u6240\u4ee5\u6bcf\u6b21\u53ea\u9700\u8981\u8003\u8651\u65b0\u51fa\u73b0\u7684\u8fde\u901a\u5757\u7684\u6839\u3002\u628a\u8fde\u901a\u5757\u6309\u7167\u91cd\u513f\u5b50\u5927\u5c0f\u6392\u5e8f\uff0c\u8fd9\u6837\u4e0d\u65ad\u5207\u5272\uff0c\u5e76\u7ef4\u62a4\u662f\u5426\u5168\u90e8\u76f8\u7b49\uff0c\u663e\u7136\u7b49\u4ef7\u4e8e\u6700\u5927\u503c\u7b49\u4e8e\u6700\u5c0f\u503c\u3002\u6ce8\u610f\u6bcf\u6b21\u5220\u8fb9\u8981\u5220\u6389\u8fd9\u6761\u8fb9\u4e0a\u7684\u65b9\u70b9\u7684\u6240\u6709\u8fb9\u3002\u8fd9\u79cd\u60c5\u51b5\u65b9\u6848\u6570\u663e\u7136\u5f88\u5c0f\u3002\n\n\u82e5 $k = 1$\uff0c\u6cbf\u7528\u5148\u524d\uff0c\u53d1\u73b0\u8fd9\u65f6\u5019\u591a\u51fa\u4e00\u79cd\u60c5\u51b5\uff0c\u628a\u6839\u548c\u91cd\u5b50\u6811\u5212\u5206\u5728\u4e00\u8d77\uff0c\u518d\u5220\u6389\u4e00\u4e9b\u8fb9\u4f7f\u5f97\u8fd9\u4e9b\u5b50\u6811\u76f8\u7b49\u3002\u90a3\u4e48\u90a3\u4e9b\u5b50\u6811\u7684\u5927\u5c0f\u5fc5\u987b\u7b49\u4e8e\u91cd\u5b50\u6811\uff0c\u4e8e\u662f\u6240\u6709\u5b50\u6811\u5fc5\u987b\u90fd\u76f8\u7b49\u3002\u9996\u5148\u4e00\u5f00\u59cb\u94a6\u5b9a\u5f53\u524d\u7684\u6839\u4e0d\u4e3a\u65b9\u70b9\uff08\u53ef\u80fd\u65b9\u70b9\u662f\u91cd\u5fc3\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u7b2c\u4e00\u4e0b\u5c31\u5220\u9664\u4e86\u6240\u4ee5\u65e0\u6240\u8c13\uff09\uff0c\u6240\u4ee5\u8fdb\u800c\u8981\u6c42\uff1a\n\n1. \u5982\u679c\u6bcf\u4e2a\u513f\u5b50\u90fd\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\uff08\u5373\u6bcf\u4e2a\u65b9\u70b9\u5bf9\u5e94\u70b9\u53cc\u5927\u5c0f\u4e3a $2$\uff09\u5c31\u968f\u4fbf\u4fdd\u7559\u4e00\u4e2a\u513f\u5b50\u5176\u5b83\u5168\u90e8\u5220\u9664\u3002\n\n2. \u5426\u5219\u968f\u4fbf\u5220\u9664\u4e00\u4e2a\uff0c\u6ca1\u6709\u5176\u5b83\u533a\u522b\u3002\n\n> \u7406\u89e3\uff1a\u9996\u5148\u5207\u51fa\u6765\u7684\u6240\u6709\u8fde\u901a\u5757\u5728\u88ab\u5207\u5206\u524d $siz$ \u7684\u5206\u5e03\u662f\u4e00\u81f4\u7684\uff1b\u4fdd\u7559\u540e\uff0c\u80af\u5b9a\u6070\u597d\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u662f\u6839\u4e3a\u5706\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u65b9\u70b9\u4f5c\u4e3a\u513f\u5b50\u3002\u5b83\u80af\u5b9a\u6bd4\u5207\u51fa\u7684\u5176\u5b83\u8fde\u901a\u5757\u5148\u5904\u7406\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u60c5\u5f62\u90fd\u662f\u4e00\u6837\u7684\u3002\n\n\u8fd9\u65f6\u4e3a\u4e86\u907f\u514d\u513f\u5b50\u5168\u90e8\u88ab\u5220\u5b8c\u7684\u7ec6\u8282\uff0c\u8003\u8651\u5bf9\u4e8e\u6700\u5c0f\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $1$ \u7684\u60c5\u51b5\u7279\u5224\u5904\u7406\u3002\n\n\u53e6\u5916\u4e00\u4e2a\u7ec6\u8282\u662f\uff0c\u5728 $k=1$ \u65f6\uff0c\u82e5\u6700\u5927\u513f\u5b50\u5b58\u5728\u591a\u4e2a\uff0c\u5e94\u8be5\u5bf9\u5220\u9664\u540e\u5f62\u6210\u7684\u6700\u5c0f\u8fde\u901a\u5757\u6700\u5927\u7684\u4f18\u5148\u5220\u9664\u3002\n\n\u7528\u6876\u8bb0\u5f55\u8fde\u901a\u5757\u5927\u5c0f\uff0c\u590d\u6742\u5ea6\u5c31\u662f $O(n+m)$\u3002\n\n\u8fd9\u4efd\u4ee3\u7801\u5199\u6210 Shift Mountain \u4e86\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxn = 400005, mod = 998244353;\nlong long ans, tmp = 1;\nint n0, n, m, k;\nvector<int> e[maxn];\nvoid add(int x, int y) {\n\te[x].push_back(y), e[y].push_back(x);\n}\n// Original\nint tot = 1, hd[maxn];\nnamespace Org {\n\tstruct Edg {\n\t\tint y, nxt;\n\t} e[maxn * 2];\n\tint id, dfn[maxn], low[maxn], b[maxn], num;\n\tint stk[maxn], top;\n\tvoid tarjan(int x) {\n\t\tlow[x] = dfn[x] = ++num, stk[++top] = x;\n\t\tfor (int i = hd[x]; i; i = e[i].nxt) {\n\t\t\tint y = e[i].y;\n\t\t\tif (dfn[y]) low[x] = min(low[x], dfn[y]);\n\t\t\telse {\n\t\t\t\ttarjan(y), low[x] = min(low[x], low[y]);\n\t\t\t\tif (low[y] == dfn[x]) {\n\t\t\t\t\t++id, add(id, x);\n\t\t\t\t\tfor (int z = 0; z != y; --top)\n\t\t\t\t\t\tz = stk[top], add(id, z);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tvoid solve() {\n\t\tid = n0;\n\t\tfor (int x = 1; x <= n0; ++x)\n\t\t\tif (!dfn[x]) tarjan(x), --top;\n\t\tn = id;\n//\t\tfor (int x = 1; x <= n; ++x)\n//\t\t\tfor (int y : ::e[x])\n//\t\t\t\tprintf(\"%d %d\\n\", x, y);\n\t}\n}\n// New\nint rt, ms[maxn], siz[maxn], f[maxn];\nvoid init(int x, int fa) {\n\tsiz[x] = (x <= n0);\n\tfor (int y : e[x])\n\t\tif (y != fa) init(y, x), siz[x] += siz[y], ms[x] = max(ms[x], siz[y]);\n\tms[x] = max(ms[x], n0 - siz[x]);\n\tif (x <= n0 && ms[rt] > ms[x]) rt = x;\n}\nvoid dfs(int x, int fa) {\n\tf[x] = fa, siz[x] = (x <= n0), ms[x] = n + 1;\n\tfor (int y : e[x])\n\t\tif (y != fa) dfs(y, x), ms[x] = min(ms[x], siz[y]), siz[x] += siz[y];\n}\nvector<int> q[maxn];\nint mx, mi, b[maxn];\nvoid insert(int x) {\n\tassert(x > n0), b[x] = 1;\n\tassert(f[x]), siz[f[x]] -= siz[x];\n\tfor (int y : e[x])\n\t\tif (y != f[x]) q[siz[y]].push_back(y), mi = min(mi, siz[y]);//, cout << y << \" \" << siz[y] << endl;\n}\n// \u66b4\u529b\n//namespace Patch {\n//\tint ans;\n//\tint b[maxn], t, siz, mx, mi;\n//\tvoid dfs(int x) {\n//\t\tb[x] = 1, siz += (x <= n0);\n//\t\tfor (int y : e[x])\n//\t\t\tif (!b[y] && (y <= n0 || !(t & (1 << (y - n0 - 1))))) dfs(y);\n//\t}\n//\tvoid check(int x) {\n//\t\tb[x] = 1;\n//\t\tfor (int y : e[x])\n//\t\t\tif (!b[y] && (y <= n0 || (t & (1 << (y - n0 - 1))))) check(y);\n//\t}\n//\tint solve() {\n//\t\tif (n - n0 > 20) return 0;\n//\t\tint lim = (1 << (n - n0));\n//\t\tfor (t = 1; t < lim; ++t) {\n//\t\t\tmi = 0x3f3f3f3f, mx = 0, tmp = 0;\n//\t\t\tfor (int i = 1; i <= n; ++i) b[i] = 0;\n//\t\t\tfor (int i = n0 + 1; i <= n; ++i)\n//\t\t\t\tif ((t & (1 << (i - n0 - 1))) && !b[i]) ++tmp, check(i);\n//\t\t\tif (tmp > 1) continue;\n//\t\t\tfor (int i = 1; i <= n; ++i) b[i] = 0;\n//\t\t\tfor (int i = 1; i <= n0; ++i)\n//\t\t\t\tif (!b[i]) siz = 0, dfs(i), mx = max(mx, siz), mi = min(mi, siz);\n//\t\t\tif ((mx - mi <= k)) ++ans; \n//\t\t\t//for(int i = n0 + 1; i <= n; ++i) if (t & (1 << (i - n0 - 1))) cout << i << \" \"; cout << endl;\n//\t\t}\n//\t\treturn ans;\n//\t}\n//}\nlong long dp[maxn];\nbool leaf[maxn];\nvoid solve(int x, int fa) {\n\tb[x] = 1, dp[x] = 1;\n\tleaf[x] = e[x].size() == 1;\n\tint ct = 0;\n\tfor (int y : e[x]) {\n\t\tif (b[y] || y == fa) continue;\n\t\tsolve(y, x), leaf[x] |= (x > n0 && leaf[y] && e[x].size() <= 2);\n\t\tif (x > n0) (dp[x] *= dp[y]) %= mod;\n\t\telse if (leaf[y] == 1) assert(y > n0), ++ct;\n\t\telse assert(y > n0), dp[x] = dp[x] * dp[y] % mod;\n\t}\n\tdp[x] = dp[x] * (ct + 1) % mod;\n\tif (dp[x] < 1) exit(0);\n}\nsigned main() {\n\tint x, y, z;\n\tscanf(\"%d%d%d\", &n0, &m, &k);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tOrg::e[++tot] = {y, hd[x]}, hd[x] = tot;\n\t\tOrg::e[++tot] = {x, hd[y]}, hd[y] = tot;\n\t}\n\tOrg::solve(), ms[rt = 0] = n + 1, init(1, 0), dfs(rt, 0);\n\tq[siz[rt]].push_back(rt), mx = mi = siz[rt];\n\twhile (mx > 1) {\n\t\tx = q[mx].back(), q[mx].pop_back();\n\t\tint sx = 0, si = 0, sn = 0, ns = 0;\n\t\tfor (int y : e[x]) {\n\t\t\tif (b[y] || y == f[x]) continue;\n\t\t\t++sn, ns = max(ns, int(e[y].size()) - 1);\n\t\t\tif (!sx || siz[y] > siz[sx] || (siz[y] == siz[sx] && ms[sx] < ms[y])) sx = y;\n\t\t\tif (!si || siz[y] < siz[si]) si = y;\n\t\t}\n\t\tassert(x <= n && sx && si);\n\t\tif (k == 0 || sn == 1 || siz[sx] > siz[si] || ns > 1) {\n\t\t\tinsert(sx);\n\t\t\tq[siz[x]].push_back(x), mi = min(mi, siz[x]);\n\t\t} else {\n\t\t\tassert(k == 1 && sn > 1 && siz[sx] == siz[si]);\n\t\t\tfor (int y : e[x])\n\t\t\t\tif (!b[y] && y != f[x] && y != sx) insert(y);\n\t\t\tq[siz[x]].push_back(x), mi = min(mi, siz[x]);\n\t\t\t(tmp *= sn) %= mod;\n\t\t}\n\t\tif (mi <= 1) break;\n\t\twhile (q[mx].empty() && mx > 1) --mx;\n\t\tif (mx - mi <= k) (ans += tmp) %= mod;\n\t}\n\tif (k == 0) {\n\t\tprintf(\"%lld\", (ans + 1) % mod);\n\t\treturn 0;\n\t}\n\tmemset(b, 0, sizeof(b));\n\tsolve(rt, 0), ans += dp[rt] % mod;\n\t//\tprintf(\"%d\\n\", Patch::solve());\n\tprintf(\"%lld\", ans % mod);\n\treturn 0;\n}\n```",
        "postTime": 1681993350,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "P9167 [\u7701\u9009\u8054\u8003 2023] \u57ce\u5e02\u5efa\u9020 \u9898\u89e3"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/eastcloud/p/17279237.html)\n\n\u7b80\u5355\u6982\u62ec\u4e00\u4e0b\u9898\u76ee\uff1a\u8be2\u95ee\u6709\u591a\u5c11\u7ec4\u8fb9\u96c6\uff0c\u6ee1\u8db3\u539f\u56fe\u5220\u53bb\u540e\u5206\u4e3a\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u8054\u901a\u5757\u5927\u5c0f\u7684\u6781\u5dee\u4e0d\u8d85\u8fc7 $k$\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9 $(u,v)$\uff0c\u88ab\u5220\u9664\u4e86\uff0c\u79f0 $u$ \u548c $v$ \u4e3a\u5220\u9664\u70b9\uff08\u5e76\u6ca1\u6709\u5220\u9664\uff0c\u53ea\u662f\u8fd9\u4e48\u53eb\uff09\uff0c\u56fe\u8fd8\u5f97\u6ee1\u8db3\u6bcf\u4e2a\u8054\u901a\u5757\u53ea\u6709\u4e00\u4e2a\u5220\u9664\u70b9\u3002\n\n\u5148\u8003\u8651\u9898\u76ee\u4e2d\u7684\u6781\u5dee\uff0c\u5bf9\u4e8e $k=0$ \u7684\u60c5\u51b5\uff0c\u8fde\u901a\u5757\u5927\u5c0f\u80af\u5b9a\u662f $n$ \u7684\u56e0\u5b50\uff0c\u800c $k=1$ \u65f6\u8fde\u901a\u5757\u7684\u5927\u5c0f\u4e5f\u53ea\u80fd\u662f $\\lfloor \\frac{n}{s} \\rfloor$ \u548c $\\lceil \\frac{n}{s} \\rceil$ \u7684\uff08$s$ \u4e3a 1 \u5230 $n$ \u4e4b\u95f4\u4efb\u610f\u4e00\u4e2a\u6574\u6570\uff09\uff0c\u7ed3\u5408\u6574\u9664\u5206\u5757\u7684\u76f8\u5173\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053\u6240\u6709\u53ef\u80fd\u7684\u8054\u901a\u5757\u5927\u5c0f\u53ea\u6709\u4e0d\u8d85\u8fc7 $2\\sqrt n$ \u79cd\uff0c\u8fd9\u590d\u6742\u5ea6\u52a0\u4e2a\u7ebf\u6027\u8fd8\u5728\u6211\u4eec\u7684\u63a5\u53d7\u8303\u56f4\u4e4b\u5185\uff0c\u7ee7\u7eed\u8003\u8651\u5176\u4ed6\u6761\u4ef6\u3002\n\n\u518d\u5148\u8003\u8651\u6709\u5173\u5220\u9664\u70b9\u7684\u6761\u4ef6\uff0c\u8fd9\u4e2a\u6761\u4ef6\u53ea\u4e0e\u70b9\u6709\u5173\uff0c\u800c\u4e14\u8003\u8651\u8fb9\u7684\u8bdd\u89e3\u7684\u5224\u65ad\u548c\u6c42\u89e3\u4e0d\u592a\u597d\u5b9e\u73b0\uff0c\u4e8e\u662f\u8bd5\u7740\u628a\u5220\u9664\u8fb9\u8f6c\u5316\u4e3a\u9009\u62e9\u70b9\uff0c\u8fd9\u91cc\u7684\u9009\u62e9\u6307\u7684\u662f\u627e\u5230\u4e00\u4e9b\u70b9\u653e\u5230\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u3002\n\n\u7c7b\u4f3c dp \u4e2d\u6784\u9020\u8f6c\u79fb\u65b9\u7a0b\uff0c\u8003\u8651\u5728\u5df2\u6709\u70b9\u7684\u60c5\u51b5\u4e0b\u8fd8\u9700\u8981\u548c\u8fd8\u53ef\u4ee5\u52a0\u5165\u54ea\u4e9b\u70b9\uff0c\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u70b9\u5728\u5df2\u9009\u62e9\u7684\u70b9\u96c6\u5185\uff0c\u4e14\u90fd\u6709\u5411\u5916\u8fde\u7684\u8fb9\uff0c\u8bbe\u5176\u4e3a $(a,b)$ \u548c $(c,d)$\uff0c\u90a3\u4e48 $c$ \u4e0e $d$ \u6211\u4eec\u4e00\u5b9a\u8981\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u5426\u5219\u5c31\u4f1a\u5bfc\u81f4\u5220\u9664\u70b9\u4e0d\u53ea\u4e00\u4e2a\u3002\n\n\u82e5 $c$ \u4e0e $d$ \u662f\u540c\u4e00\u4e2a\u70b9\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u7b49\u4ef7\u4e8e\u5b58\u5728\u4e00\u4e2a\u70b9\u6709\u4e24\u6761\u4e0d\u540c\u7684\u5230\u8fbe\u9009\u62e9\u7684\u70b9\u96c6\u7684\u8def\u5f84\uff08\u53ea\u7528\u7ec8\u70b9\u4e0d\u540c\u5c31\u884c\uff09\uff0c\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u70b9\u4e5f\u5fc5\u987b\u9009\u62e9\u3002\u524d\u9762\u7684\u8868\u8ff0\u662f\u5426\u6709\u4e9b\u719f\u6089\uff1f\u8fd9\u4e0e\u6211\u4eec\u5bf9\u70b9\u53cc\u8fde\u901a\u5206\u91cf\u7684\u5b9a\u4e49\u6709\u4e9b\u76f8\u4f3c\uff0c\u628a\u5b83\u5957\u8fdb\u53bb\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u53cc\u4e2d\u7684\u70b9\uff0c\u53ea\u8981\u6709\u4e24\u4e2a\u88ab\u9009\u5230\u540c\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u5176\u4ed6\u70b9\u4e5f\u5fc5\u987b\u9009\u5230\u90a3\u4e2a\u8054\u901a\u5757\u4e2d\u3002\n\n\u70b9\u53cc\u548c\u9009\u62e9\u95ee\u9898\uff0c\u81ea\u7136\u7684\u60f3\u5230\u5efa\u51fa\u5706\u65b9\u6811\u8fdb\u884c dp \u5904\u7406\uff0c\u6211\u4eec\u8bbe $siz_u$ \u8868\u793a\u5b50\u6811 $u$ \u7684\u5706\u70b9\u4e2a\u6570\uff0c$f_u$ \u8868\u793a\u5b50\u6811 $u$ \u80fd\u5355\u72ec\u5f62\u6210\u5408\u6cd5\u89e3\uff08\u80fd\u88ab\u5206\u6210\u82e5\u5e72\u4e2a\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u8054\u901a\u5757\uff09\u7684\u5408\u6cd5\u89e3\u7684\u6570\u91cf\uff0c\u8bbe\u8ba1\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n\u5982\u679c $u$ \u662f\u5706\u70b9\uff1a\n\n* $siz_v < siz_u$\uff0c\u6b64\u65f6\u80af\u5b9a\u4e0d\u80fd\u628a $v$ \u5355\u72ec\u5272\u4e0b\u6765\uff0c\u4f7f $tot$ \u53d8\u4e3a $tot+siz_v$\u3002\n\n* $siz_v = siz_u$\uff0c\u6b64\u65f6 $v$ \u53ef\u4ee5\u5272\u4e5f\u53ef\u4ee5\u4e0d\u5272\uff0c\u8003\u8651 $f_v$\uff0c\u5982\u679c $f_v=0$\uff0c\u4f7f $tot$ \u53d8\u4e3a $tot+siz_v$\uff0c\u5426\u5219\u4f7f $cnt$ \u53d8\u4e3a $cnt+1$\u3002\n\n* $siz_v > siz_u$\uff0c\u6b64\u65f6\u5fc5\u987b\u5272 $v$\uff0c\u4f7f $ned$ \u53d8\u4e3a $ned \\cdot siz_v$\u3002\n\n$tot$ \u521d\u503c\u4e3a 1\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u8bb0\u5f55\u4e86\u5f88\u591a\u53d8\u91cf\uff0c\u73b0\u5728\u8003\u8651\u7edf\u8ba1\u7b54\u6848\uff0c\u9996\u5148\uff0c\u5982\u679c $d \\leq tot \\leq d+1$\uff08$d$  \u4e3a\u679a\u4e3e\u51fa\u7684\u8054\u901a\u5757\u5927\u5c0f\uff09\uff0c\u90a3\u4e48 $f_i$ \u52a0\u4e0a $ned$\uff0c\u82e5 $ tot > d $\uff0c\u80af\u5b9a\u65e0\u89e3\uff0c\u5269\u4e0b\u60c5\u51b5\u53ea\u6709 $tot=1$ \u65f6\u6709\u53ef\u80fd\u6709\u89e3\uff0c\u6b64\u65f6\u7b54\u6848\u52a0\u4e0a $ned \\cdot cnt$ \u8868\u793a\u8003\u8651 $cnt$ \u79cd\u591a\u4f59\u7684\u5272\u8fd8\u662f\u4e0d\u5272\uff0c\u6700\u591a\u53ea\u80fd\u4e0d\u5272\u4e00\u4e2a\uff0c\u6211\u4eec\u8003\u8651\u4e0d\u5272\u54ea\u4e2a\u540e\u5269\u4e0b\u5c31\u53ea\u6709 $ned$ \u79cd\u60c5\u51b5\uff0c\u4e8c\u8005\u76f8\u4e58\u5c31\u5f97\u5230\u4e86\u7ed3\u679c\uff0c\u6ce8\u610f\u7b2c\u4e8c\u79cd\u70b9\u65e2\u53ef\u4ee5\u5408\u5e76\u4e5f\u53ef\u4ee5\u4e0d\u5408\u5e76\uff0c\u7b2c\u4e00\u548c\u7b2c\u4e09\u79cd\u60c5\u51b5\u53ef\u4ee5\u5171\u5b58\uff0c\u800c $k=0$ \u65f6\u540c\u7406\u3002\n\n\u5bf9\u4e8e\u65b9\u70b9\uff0c$f_u = \\Pi_{v \\in son(u)} f_v $\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u7684\u610f\u4e49\u5728\u4e8e\u53ea\u8003\u8651\u628a\u6bcf\u4e2a\u5706\u70b9\u5404\u81ea\u5206\u5f00\u7684\u60c5\u51b5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u53d1\u73b0\u5168\u90e8\u5408\u8d77\u6765\u7684\u60c5\u51b5\u4f1a\u5728\u5176\u7236\u4eb2\u5706\u70b9\u90a3\u91cc\u88ab\u8003\u8651\uff0c\u56e0\u6b64\u4e0d\u7528\u8fdb\u884c\u5904\u7406\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u8fd8\u5dee\u4e00\u4e2a\u6839\u8282\u70b9\u6ca1\u6709\u786e\u5b9a\uff0c\u7531\u4e8e\u6211\u4eec\u5bf9\u4e8e\u72b6\u6001\u7684\u7279\u6b8a\u5b9a\u4e49\uff0c\u6839\u8282\u70b9\u82e5\u662f\u5706\u70b9\uff0c\u5fc5\u987b\u662f\u5bf9\u5e94\u8054\u901a\u5757\u7684\u5220\u9664\u8282\u70b9\uff0c\u82e5\u662f\u65b9\u70b9\uff0c\u5b50\u8282\u70b9\u5fc5\u987b\u5168\u90e8\u5206\u5272\uff0c\u53ef\u4ee5\u53d1\u73b0\u91cd\u5fc3\u521a\u597d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\uff0c\u82e5\u5176\u4e0d\u662f\u5220\u9664\u8282\u70b9\uff0c\u90a3\u4e48\u8be5\u8054\u901a\u5757\u8981\u4e48\u6709\u4e0d\u6b62\u4e00\u4e2a\u5220\u9664\u8282\u70b9\uff0c\u8981\u4e48\u5bf9\u5e94\u8054\u901a\u5757\u5927\u5c0f\u80af\u5b9a\u5927\u4e8e $\\frac{n}{2}$\uff0c\u82e5\u662f\u65b9\u70b9\u5219\u540c\u7406\u3002\n\n\u7531\u4e8e\u5e38\u6570\u8f83\u5927\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u52a0\u5165\u4e00\u70b9\u526a\u679d\uff0c\u4f8b\u5982\uff0c\u5f53 $siz_u<d$ \u65f6\u4e0d\u8fdb\u884c\u5904\u7406\uff0c\u5f53 $siz_u>d$ \u4e14 $f_u=0$ \u65f6\u76f4\u63a5\u65e0\u89e3\u7b49\uff0c\u4e8e\u662f\u6b64\u9898\u5f97\u5230\u89e3\u51b3\u3002",
        "postTime": 1681969285,
        "uid": 421265,
        "name": "eastcloud",
        "ccfLevel": 4,
        "title": "P9167 [\u7701\u9009\u8054\u8003 2023] \u57ce\u5e02\u5efa\u9020 \u9898\u89e3"
    }
]