[
    {
        "content": "\u56de\u6587\u81ea\u52a8\u673a\u7684\u597d\u9898\u554a\n\n\u4e0d\u77e5\u9053\u56de\u6587\u81ea\u52a8\u673a\u662f\u5565\u7684\u53ef\u4ee5\u770b\u770b\u849f\u84bb\u7684blog->[\u8fd9\u91cc](https://www.cnblogs.com/bztMinamoto/p/9630617.html)\n\n\u5148\u5efa\u4e00\u4e2a\u56de\u6587\u81ea\u52a8\u673a\uff0c\u7136\u540e\u8bb0$dp[i]$\u8868\u793a\u8f6c\u79fb\u5230$i$\u8282\u70b9\u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c11\u7684\u9700\u8981\u6b21\u6570\n\n\u9996\u5148\u80af\u5b9a2\u64cd\u4f5c\u8d8a\u591a\u8d8a\u597d\uff0c\u7ecf\u8fc72\u64cd\u4f5c\u4e4b\u540e\u7684\u4e32\u5fc5\u5b9a\u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u80af\u5b9a\u662f\u7531\u4e00\u4e2a\u56de\u6587\u4e32+\u4e0d\u65ad\u66b4\u529b\u6dfb\u52a0\u5f97\u6765\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f$min(ans,dp[i]+n-len[i])$\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u4e32$i$\uff0c\u5982\u679c\u5b83\u5728\u524d\u9762\u548c\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u5f62\u6210\u56de\u6587\u4e32$j$\uff0c\u5219$dp[j]=dp[i]+1$\n\n\u4e3a\u5565\u561e\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u5728\u5f62\u6210$i$\u7684\u4e4b\u524d\u4e00\u6b65\u628a\u8fd9\u4e2a\u5b57\u6bcd\u52a0\u4e0a\u53bb\uff0c\u6267\u884c2\u64cd\u4f5c\u540e\u5c31\u53ef\u4ee5\u53d8\u6210$j$\u4e86\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5fail\u6307\u9488\u627e\u5230\u6700\u957f\u7684\u56de\u6587\u4e32$x$\u6ee1\u8db3$len[x]<=len[i]/2$\uff0c\u90a3\u4e48$dp[i]=min(dp[i],dp[x]+1+len[i]/2-len[x])$\uff08\u5148\u66b4\u529b\u586b\u597d\u4e00\u534a\uff0c\u5269\u4e0b\u7684\u75282\u64cd\u4f5c\uff09\n\n\u7136\u540e\u53ef\u4ee5\u7528\u961f\u5217\u8bb0\u5f55\u72b6\u6001\uff0c\u4fdd\u8bc1\u8f6c\u79fb\u81f3\u6709\u5e8f\u7684\n\n\u81f3\u4e8e\u600e\u4e48\u627e$x$\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u5efa\u81ea\u52a8\u673a\u7684\u65f6\u5019\u987a\u4fbf\u6c42\u51fa\u6765\uff0c\u5c31\u662f\u591a\u8df3\u51e0\u6b21\u3002\u8fd9\u4e2a\u770b\u4ee3\u7801\u597d\u4e86\n```\n//minamoto\n#include<cstring>\n#include<cstdio>\ntemplate<class T>inline bool cmin(T&a,const T&b){return a>b?a=b,1:0;}\nconst int N=2e5+5,M=5;\nchar s[N];int dp[N],len[N],fail[N],ch[N][M];\nint trans[N],last,p,q,str[N],tot,ans,n,qu[N];\nint val[105];\ninline int newnode(int x){\n    len[++tot]=x;memset(ch[tot],0,sizeof(ch[tot])*5);return tot;\n}\ninline int getfail(int x,int n){\n    while(s[n-len[x]-1]!=s[n]) x=fail[x];return x;\n}\ninline void init(){\n    val['A']=0,val['T']=1,val['C']=2,val['G']=3;\n    s[0]=-1,fail[0]=1,last=0;\n    len[0]=0,len[1]=-1,tot=1;\n    memset(ch[0],0,sizeof(int)*5),memset(ch[1],0,sizeof(int)*5);\n}\nvoid ins(int c,int i){\n    p=getfail(last,i);\n    if(!ch[p][c]){\n        q=newnode(len[p]+2);\n        fail[q]=ch[getfail(fail[p],i)][c];\n        ch[p][c]=q;\n        if(len[q]<=2) trans[q]=fail[q];\n        else{\n            int tmp=trans[p];\n            while(s[i-1-len[tmp]]!=s[i]||(len[tmp]+2)*2>len[q]) tmp=fail[tmp];\n            trans[q]=ch[tmp][c];\n        }\n    }\n    last=ch[p][c];\n//\tprintf(\"%d\\n\",last);\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n    int T;scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%s\",s+1);\n        init(),ans=n=strlen(s+1);\n        for(int i=1;i<=n;++i) ins(val[s[i]],i);\n        for(int i=2;i<=tot;++i) dp[i]=len[i];\n        int h=1,t=0;qu[++t]=0,dp[0]=1;\n        while(h<=t){\n            int u=qu[h++];\n            for(int i=0;i<4;++i){\n                int x=ch[u][i];\n                if(!x) continue;\n                dp[x]=dp[u]+1;\n                int y=trans[x];\n                cmin(dp[x],dp[y]+1+len[x]/2-len[y]);\n                cmin(ans,dp[x]+n-len[x]);\n                qu[++t]=x;\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1536671766,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4762 \u3010[CERC2014]Virus synthesis\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P4762)\n\n\u771f\u662f\u9053\u56de\u6587\u81ea\u52a8\u673a\u597d\u9898\u3002\n\n\u9996\u5148\u8003\u8651\u7b54\u6848\u5fc5\u5b9a\u662f\u4e00\u4e2a\u56de\u6587\u4e32+\u5269\u4f59\u90e8\u5206\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u53ef\u4ee5\u5efa\u51fa\u56de\u6587\u81ea\u52a8\u673a\uff0c\u4e4b\u540e\u8003\u8651\u6bcf\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\uff0c\u8bbe\u5b83\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u4e3a$x$\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a$x$\u6c42\u51fa$trans_x$\u8868\u793ax\u7684\u6700\u957f\u540e\u7f00\u56de\u6587\u4e32\uff0c\u6ee1\u8db3$len_{trans_x}\\leqslant len_x/2$\u3002\n\n\u4e4b\u540e\u8bbe$f_x$\u8868\u793a$x$\u62fc\u6210$x$\u8fd9\u4e2a\u4e32\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u6211\u4eec\u4ece$0$\uff08\u5076\u6839\uff09\u51fa\u53d1\u8fdb\u884c$bfs$\uff0c\u4e2d\u9014\u8ba1\u7b97$f_x$\u3002\n\n\u5bf9\u4e8e$f_x$\uff1a  \n\u521d\u503c\u80af\u5b9a\u662f\u81ea\u8eab\u957f\u5ea6$f_x=len_x$\u3002  \n\u5982\u679c\u5b58\u5728\u4e00\u6761\u8fb9$(x,y)$\uff0c\u90a3\u4e48$f_y=f_x+1$\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u62fc$x$\u65f6\u8fd8\u6ca1\u8fdb\u884c$2$\u64cd\u4f5c\u65f6\u5411$x$\u540e\u9762\u586b\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5176\u8fdb\u884c$2$\u64cd\u4f5c\u540e\u53d8\u4e3a$y$\u3002  \n\u540c\u65f6$f_x=min(f_x,f_{trans_x}+1+lem_x/2-len_{trans_x})$\uff0c\u5373\u6211\u4eec\u53ef\u4ee5\u4ece$trans_x$\u53d8\u8fc7\u6765\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a$x$\uff0c\u5b83\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u662f$n-len_x+f_x$\uff0c$n$\u662f\u5b57\u7b26\u4e32\u957f\u5ea6\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+10;\nconst int inf=1e9;\nint T,n,tot,last,ans;\nint fail[maxn],len[maxn],trans[maxn],f[maxn];\nint ch[maxn][5];\nchar s[maxn];\ninline int change(char c)\n{\n\tif(c=='A')return 1;\n\tif(c=='G')return 2;\n\tif(c=='C')return 3;\n\tif(c=='T')return 4;\n\treturn 2333;\n}\ninline void init()\n{\n\tfor(int i=0;i<=tot;i++)\n\t\tfor(int j=1;j<=4;j++)\n\t\t\tch[i][j]=0;\n\tfail[0]=1;len[1]=-1;\n\ttot=1;last=0;\n}\ninline int getfail(int x,int pos)\n{\n\twhile(s[pos-len[x]-1]!=s[pos])x=fail[x];\n\treturn x;\n}\ninline void add(int c,int pos)\n{\n\tint p=getfail(last,pos);\n\tif(!ch[p][c])\n\t{\n\t\tint q=++tot,tmp;len[q]=len[p]+2;\n\t\ttmp=getfail(fail[p],pos);\n\t\tfail[q]=ch[tmp][c];ch[p][c]=q;\n\t\tif(len[q]<=2)trans[q]=fail[q];\n\t\telse  \n\t\t{\n\t\t\ttmp=trans[p];\n\t\t\twhile(s[pos-len[tmp]-1]!=s[pos]||((len[tmp]+2)<<1)>len[q])tmp=fail[tmp];\n\t\t\ttrans[q]=ch[tmp][c];\n\t\t}\n\t}\n\tlast=ch[p][c];\n}\ninline void solve()\n{\n\tqueue<int>q;\n\tfor(int i=2;i<=tot;i++)f[i]=len[i];\n\tfor(int i=1;i<=4;i++)if(ch[0][i])q.push(ch[0][i]);\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tf[x]=min(f[x],f[trans[x]]+1+len[x]/2-len[trans[x]]);\n\t\tans=min(ans,n-len[x]+f[x]);\n\t\tfor(int i=1;i<=4;i++)\n\t\t{\n\t\t\tif(!ch[x][i])continue;\n\t\t\tint y=ch[x][i];\n\t\t\tf[y]=min(f[y],f[x]+1);\n\t\t\tq.push(y);\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%s\",s+1);n=strlen(s+1);\n\t\ts[0]='#';\n\t\tinit();\n\t\tfor(int i=1;i<=n;i++)add(change(s[i]),i);\n\t\tans=n;solve();\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\t\n}\n```\n",
        "postTime": 1576758204,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P4762 [CERC2014]Virus synthesis(\u56de\u6587\u81ea\u52a8\u673a+DP)"
    },
    {
        "content": "# Virus synthesis\n\n\u9996\u5148\uff0c\u6700\u540e\u7684\u4e32\u4e00\u5b9a\u662f\u4e00\u4e2a\u6700\u540e\u4e00\u6b21\u7ffb\u8f6c\u5f97\u5230\u7684\u56de\u6587\u4e32\u5728\u9996\u5c3e\u52a0\u4e0a\u4e00\u4e9b\u5b57\u7b26\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u591a\u53ea\u80fd\u5229\u7528\u539f\u4e32\u4e2d\u7684\u4e00\u4e2a\u56de\u6587\u4e32\u3002\n\n\u5bf9\u539f\u4e32\u5efa\u51fa\u56de\u6587\u81ea\u52a8\u673a\u3002\u8bbe $s_u$ \u4e3a\u70b9 $u$ \u6240\u4ee3\u8868\u7684\u4e32\uff0c$dp_u$ \u8868\u793a\u6784\u9020 $s_u$ \u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f $\\min_u |S|-len_u+dp_u$\u3002\n\n> **\u5f15\u7406 1**\uff1a\u5982\u679c\u8981\u5f97\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32 $A$\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u80af\u5b9a\u662f\u7ffb\u8f6c\u3002\n\n**\u8bc1\u660e**\uff1a$|A|=2$ \u65f6\uff0c\u663e\u7136\u5148\u586b\u4e00\u4e2a\u5b57\u7b26\u7136\u540e\u7ffb\u8f6c\u4e0d\u52a3\u3002\n\n\u5982\u679c $|X| \\in [2,l]$ \u65f6\u6784\u9020 $X$ \u7684\u6700\u540e\u4e00\u6b65\u90fd\u662f\u7ffb\u8f6c\uff0c$|A|=|X|+1$\uff1a\n\n\u5982\u679c\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u4e0d\u662f\u7ffb\u8f6c\uff0c\u627e\u5230\u6700\u540e\u4e00\u6b21\u7ffb\u8f6c\u51fa\u6765\u7684\u56de\u6587\u4e32 $B$ \u6240\u5728\u7684\u4f4d\u7f6e\uff08\u5982\u6ca1\u6709\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u90a3\u4e48 $|B|=0$\uff09\u3002\u8bbe $|A|=2a,|B|=2b$\uff0c\u6784\u9020 $B$ \u7684\u4e00\u534a\u9700\u8981\u64cd\u4f5c $d$ \u6b21\u3002\n\n+ \u5982\u679c\u7ffb\u8f6c\u524d $B$ \u7684\u4e00\u534a\u5168\u90e8\u4f4d\u4e8e $A$ \u56de\u6587\u4e2d\u5fc3\u7684\u4e00\u8fb9\uff1a\n\n    ![](https://cdn.luogu.com.cn/upload/image_hosting/x3zieuxm.png)\n\n    \u7eff\u8272\u662f $B$ \u7684\u4e00\u534a\uff08\u53f3\u8fb9\u7684\u662f\u7ffb\u8f6c\u524d\u6240\u5728\u7684\u4f4d\u7f6e\uff09\u3002\u5982\u679c\u6211\u4eec\u7528\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u7ffb\u8f6c\u7eff\u8272\u90e8\u5206\u5f97\u5230 $B$\uff0c\u518d\u5728\u4e24\u8fb9\u586b\u9ec4\u8272\u7684\u5b57\u7b26\uff0c\u64cd\u4f5c\u6570\u4e3a $d+1+(2a-2b)$\u3002\u4f46\u5982\u679c\u6211\u4eec\u7528\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u5148\u5728\u7eff\u8272\u90e8\u5206\u4e24\u8fb9\u586b\u4e0a\u9ec4\u8272\u5b57\u7b26\uff0c\u518d\u901a\u8fc7\u4e00\u6b21\u7ffb\u8f6c\u5f97\u5230\u84dd\u8272\u90e8\u5206\uff0c\u90a3\u4e48\u64cd\u4f5c\u6570\u53ea\u6709 $d+(a-b)+1$\u3002\u663e\u7136 $a \\ge b$\uff0c\u90a3\u4e48\u7b2c\u4e00\u79cd\u65b9\u6cd5\u4e0d\u4f18\u3002\n\n+ \u5982\u679c\u7ffb\u8f6c\u524d $B$ \u7684\u4e00\u534a\u8de8\u8fc7\u4e86 $A$ \u7684\u56de\u6587\u4e2d\u5fc3\uff1a\n    ![](https://cdn.luogu.com.cn/upload/image_hosting/cka5u9pd.png)\n\n    \u4e32\u4e2d\u7684\u7c97\u7ad6\u7ebf\u8868\u793a\u56de\u6587\u4e2d\u5fc3\u3002\n\n    \u8bbe\u4e00\u4e2a\u4e32 $X$ \u7684\u53cd\u4e32\u4e3a $T(x)$\uff0c\u90a3\u4e48\u6709 $T(F)=D=T(C)=G=T(H)=E$\u3002\u90a3\u4e48\u4e24\u4e2a\u4e32\u5982\u4e0a\uff0c\u5176\u4e2d\u9ec4\u8272\u548c\u84dd\u8272\u4e92\u4e3a\u53cd\u4e32\u3001\u7ea2\u8272\u548c\u7eff\u8272\u4e92\u4e3a\u53cd\u4e32\uff0c\u8bbe\u84dd\u8272\u548c\u9ec4\u8272\u957f\u5ea6\u5747\u4e3a $L_1$\uff0c\u6784\u9020\u51fa\u4e00\u6bb5\u84dd\u8272\u9700\u8981 $d$ \u6b65\uff0c\u7ea2\u8272\u548c\u7eff\u8272\u957f\u5ea6\u5747\u4e3a $L_2$\u3002\n\n    \u5982\u679c\u6309\u7167\u539f\u6765\u7684\u601d\u8def\uff0c\u6784\u9020\u51fa $GC$ \u540e\u7ffb\u8f6c\u5f97\u5230 $DH$\uff0c\u6dfb\u5b57\u7b26\u5f97\u5230 $EF$ \u4e0e\u7ea2\u7eff\u90e8\u5206\uff0c\u90a3\u4e48\u9700\u8981 $d+1+2L_1+2L_2$ \u6b65\u3002\n\n    $|B|<|A|$\uff0c\u90a3\u4e48\u6784\u9020 $B$ \u7684\u6700\u540e\u4e00\u6b65\u662f\u7ffb\u8f6c\uff0c\u90a3\u4e48\u628a\u7ffb\u8f6c\u524d\u7684\u4e32 $GC$ \u653e\u5165 $EF$ \u7684\u4f4d\u7f6e\uff0c\u6dfb\u5b57\u7b26\u5f97\u5230\u7ea2\u8272\u90e8\u5206\u548c $G$ \u518d\u7ffb\u8f6c\u5f97\u5230 $A$\uff0c\u90a3\u4e48\u9700\u8981 $d+L_1+L_2+1$ \u6b65\uff0c\u663e\u7136 $L_1,L_2 \\ge 0$\uff0c\u90a3\u4e48\u603b\u4e0d\u52a3\u3002\n\n> **\u5f15\u7406 2**\uff1a\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u56de\u6587\u4e32\u5bf9\u4e8e\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u3002\n\n**\u8bc1\u660e**\uff1a\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u56de\u6587\u4e32 $A$ \u4e0d\u80fd\u7531\u7ffb\u8f6c\u5f97\u5230\uff0c\u90a3\u4e48\u627e\u5230\u6784\u9020\u5b83\u7684\u8fc7\u7a0b\u4e2d\u6700\u540e\u4e00\u6b21\u7ffb\u8f6c\u64cd\u4f5c\u7ffb\u8f6c\u51fa\u7684\u4e32 $B$\uff08\u5982\u679c\u6ca1\u6709\u7ffb\u8f6c\u64cd\u4f5c\u90a3\u4e48 $|B|=0$\uff09\u3002$A$ \u7684\u8f6c\u79fb\u5168\u90e8\u53ef\u4ee5\u89c6\u4e3a\u7531 $B$ \u8f6c\u79fb\u5f97\u5230\u3002\n\n\u4e0b\u9762\u53ea\u8003\u8651\u5076\u56de\u6587\u4e32\u3002\n\n\u8003\u8651\u8ba1\u7b97 $dp_u$\u3002\n\n+ $s_u$ \u53ef\u4ee5\u7531 $u$ \u7684\u7236\u4eb2 $f$ \u4ee3\u8868\u7684\u4e32\u5728\u6700\u540e\u4e00\u6b21\u7ffb\u8f6c\u64cd\u4f5c\u524d\u5728\u524d\u9762\u6dfb\u4e0a\u4e00\u4e2a\u5b57\u7b26\u518d\u7ffb\u8f6c\u5f97\u5230\uff0c\u90a3\u4e48\u6709 $dp_u \\overset{\\min}{\\longleftarrow} dp_f+1$\u3002\n+ $s_u$ \u8fd8\u53ef\u80fd\u662f\u67d0\u4e2a\u56de\u6587\u5b50\u4e32\u5728\u524d\u540e\u6dfb\u52a0\u5b57\u7b26\uff0c\u7136\u540e\u518d\u7ffb\u8f6c\u5f97\u5230\u3002\n    \u7ffb\u8f6c\u8bf4\u660e\u8fd9\u4e2a\u56de\u6587\u5b50\u4e32\u5fc5\u987b\u5168\u90e8\u5728\u56de\u6587\u4e2d\u5fc3\u7684\u4e00\u8fb9\uff0c\u4e0d\u59a8\u8bbe\u5b83\u5728 $s_u$ \u7684\u524d\u9762\u4e00\u534a\u3002\n    \u5982\u679c\u8fd9\u4e2a\u56de\u6587\u5b50\u4e32\u4e0d\u662f $u$ \u7684\u524d\u7f00\uff0c\u90a3\u4e48\u5728\u4e0a\u9762\u7684\u4e00\u6761\u8f6c\u79fb\u4f1a\u88ab\u7edf\u8ba1\u5230\uff0c\u6240\u4ee5\u53ea\u9700\u8003\u8651 $s_u$ \u7684\u56de\u6587\u524d\u7f00\u5373\u53ef\u3002\n    \u8bbe $u$ \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 $\\frac{|s_u|}{2}$ \u7684\u6700\u957f\u56de\u6587\u524d\u7f00\u6240\u5728\u7684\u70b9\u662f $h_u$\u3002\n    \n>    **\u5f15\u7406 3**\uff1a\u8fd9\u91cc\u5982\u679c\u4e00\u4e2a\u56de\u6587\u524d\u7f00\u4e0d\u662f $s_u$ \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 $\\frac{s_u}{2}$ \u7684\u6700\u957f\u56de\u6587\u524d\u7f00 $s_{h_u}$\uff0c\u90a3\u4e48\u65e0\u9700\u4ece\u5b83\u8f6c\u79fb\u3002\n\n**\u8bc1\u660e**\uff1a\u5176\u4ed6\u957f\u5ea6\u4e0d\u8d85\u8fc7 $\\frac{|s_u|}{2}$ \u7684\u56de\u6587\u524d\u7f00 $X$ \u90fd\u662f $s_{h_u}$ \u7684\u524d\u7f00\uff0c$X$ \u5728\u540e\u9762\u6dfb\u52a0\u5b57\u7b26\u5f97\u5230 $s_u$ \u7684\u4e00\u534a\u7136\u540e\u7ffb\u8f6c\u5f97\u5230 $s_u$\u3002\u90a3\u4e48\u6dfb\u52a0\u5b57\u7b26\u5230 $h_u$ \u65f6\uff0c\u7531\u5f15\u7406 1\uff0c\u6211\u4eec\u6ca1\u6709\u901a\u8fc7\u7ffb\u8f6c\u5f97\u5230 $s_{h_u}$\uff0c\u6b64\u65f6\u80af\u5b9a\u4e0d\u4f18\uff0c\u4e0d\u5982\u901a\u8fc7 $s_{h_u}$ \u8f6c\u79fb\u3002\n    \u90a3\u4e48\u6709\u8f6c\u79fb $dp_u \\overset{\\min}{\\longleftarrow} dp_{h_u}+\\left(\\frac{|s_u|}{2}-|s_{h_u}|\\right)+1$\u3002\n\n$dp$ \u7684\u521d\u59cb\u503c\uff1a\u957f\u5ea6\u4e3a $2$ \u7684\u4f4d\u7f6e $dp$ \u503c\u4e3a $2$\uff0c\u5076\u6839 $dp$ \u503c\u4e3a $0$\uff0c\u5176\u4ed6\u8bbe\u4e3a\u6781\u5927\u503c\u3002\n\n\u6700\u540e\uff0c\u9700\u8981\u8ba1\u7b97 $h$\u3002\u5982\u679c\u4e00\u4e2a\u4e32 $s_u$ \u901a\u8fc7\u5728\u540e\u9762\u6dfb\u52a0\u5b57\u7b26\u5f97\u5230 $s_v$\uff08\u5373 $u$ \u662f $v$ \u5728 PAM \u7684 fail \u6811\u4e0a\u7684\u7956\u5148\uff09\uff0c\u90a3\u4e48 $s_u$ \u7684\u56de\u6587\u524d\u7f00\u4e5f\u662f $s_v$ \u7684\u56de\u6587\u524d\u7f00\u3002\u53c8 $|s_u|<|s_v|$\uff0c\u90a3\u4e48\u6709 $s_{h_u}$ \u662f $s_{h_v}$ \u7684\u4e00\u4e2a\u524d\u7f00\u3002\u6240\u4ee5 $h_u$ \u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u7684\u6df1\u5ea6\u5173\u4e8e $u$ \u7684\u6df1\u5ea6\u6709\u5355\u8c03\u6027\u3002\u90a3\u4e48\u8bbe $u$ \u5728 trie \u6811\u4e0a\u7684\u7236\u4eb2\u4e3a $f$\u3001$f$ \u5230 $u$ \u7ecf\u8fc7\u5b57\u7b26\u8fb9 $c$\uff0c\u6211\u4eec\u5148\u8bbe $w=h_f$\uff0c\u4e0d\u65ad\u8df3 $fail_w$ \u76f4\u5230 $len_w+2 \\le len_u$\u3001$w$ \u6709 $c$ \u513f\u5b50\u4e14 $s_u$ \u6700\u540e\u653e\u5f97\u4e0b $cs_wc$\uff08\u4e5f\u5c31\u662f\u6b64\u65f6\u7684 $s_w$ \u524d\u4e00\u4e2a\u5b57\u7b26\u662f $c$\uff09\u6216\u8005\u5230\u4e86\u5947\u6839\uff0c\u7136\u540e\u4ee4 $h_u$ \u4e3a $w$ \u7684 $c$ \u513f\u5b50\u5373\u53ef\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint trans(char c)\n{\n\tstatic const string charset=\"ATCG\";\n\tfor(int i=0;i<=3;i++)\n\t{\n\t\tif(charset[i]==c)\n\t\t\treturn i;\n\t}\n\treturn -1;\n}\nstruct PalimdromeAutomaton\n{\n\tstruct Node\n\t{\n\t\tint ch[4];\n\t\tint len;\n\t\tint fth;\n\t\tint fil,hlf;\n\t};\n\tstring s;\n\tvector<Node> t;\n\tint lst;\n\tint newNode()\n\t{\n\t\tt.push_back((Node){{0},0,0,0,0});\n\t\treturn t.size()-1;\n\t}\n\tPalimdromeAutomaton()\n\t{\n\t\ts=\"\";\n\t\tt.clear();\n\t\tnewNode();\n\t\tnewNode(),newNode();\n\t\tt[1].fil=2,t[2].fil=1;\n\t\tt[1].len=-1,t[2].len=0;\n\t\tt[1].hlf=1,t[2].hlf=2;\n\t\tlst=2;\n\t}\n\tint findFail(int u,int pos,char c)\n\t{\n\t\twhile(u!=1&&s[pos-t[u].len-1]!=c)\n\t\t\tu=t[u].fil;\n\t\treturn u;\n\t}\n\tvoid insert(char c)\n\t{\n\t\tint x=trans(c);\n\t\ts+=c;\n\t\tint f=findFail(lst,s.size()-1,c);\n\t\tif(!t[f].ch[x])\n\t\t{\n\t\t\tint u=newNode();\n\t\t\tt[u].len=t[f].len+2;\n\t\t\tint tmp=findFail(t[f].fil,s.size()-1,c);\n\t\t\tt[u].fil=(t[tmp].ch[x]?t[tmp].ch[x]:2);\n\t\t\tif(t[u].len<=1)\n\t\t\t\tt[u].hlf=2;\n\t\t\telse\n\t\t\t{\n\t\t\t\tint v=t[f].hlf;\n\t\t\t\twhile(v!=1&&(t[v].len+2>t[u].len/2||!t[v].ch[x]||s[s.size()-t[v].len-2]!=c))\n\t\t\t\t\tv=t[v].fil;\n\t\t\t\tt[u].hlf=t[v].ch[x];\n\t\t\t}\n\t\t\tt[f].ch[x]=u;\n\t\t\tt[u].fth=f;\n\t\t}\n\t\tlst=t[f].ch[x];\n\t}\n};\nPalimdromeAutomaton pam;\nint dp[110000];\nvoid calcDP()\n{\n\tmemset(dp,127,sizeof(dp));\n\tdp[2]=0;\n\tfor(int i=0;i<=3;i++)\n\t{\n\t\tdp[pam.t[2].ch[i]]=2;\n\t}\n\tfor(int i=1;i<pam.t.size();i++)\n\t{\n\t\tif(pam.t[i].len%2==1||pam.t[i].len<=2)\n\t\t\tcontinue;\n\t\tif(pam.t[pam.t[i].fth].len%2==0)\n\t\t\tdp[i]=min(dp[i],dp[pam.t[i].fth]+1);\n\t\tif(pam.t[pam.t[i].hlf].len%2==0)\n\t\t\tdp[i]=min(dp[i],dp[pam.t[i].hlf]+pam.t[i].len/2-pam.t[pam.t[i].hlf].len+1);\n\t}\n}\nint main()\n{\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tint T;\n\tcin>>T;\n\tfor(int _=1;_<=T;_++)\n\t{\n\t\tstring s;\n\t\tcin>>s;\n\t\tpam=PalimdromeAutomaton();\n\t\tfor(int i=0;i<s.size();i++)\n\t\t{\n\t\t\tpam.insert(s[i]);\n\t\t}\n\t\tcalcDP();\n\t\tint ans=1e9;\n\t\tfor(int i=1;i<pam.t.size();i++)\n\t\t{\n\t\t\tif(pam.t[i].len%2==0)\n\t\t\t{\n\t\t\t\tans=min(ans,(int)(s.size()-pam.t[i].len+dp[i]));\n\t\t\t}\n\t\t}\n\t\tcout<<ans<<'\\n';\n\t}\n}\n```",
        "postTime": 1648024098,
        "uid": 175586,
        "name": "Zxc200611",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4762 Virus synthesis"
    },
    {
        "content": "\u56de\u6587\u81ea\u52a8\u673a\u597d\u9898\u3002\n\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u64cd\u4f5c 2 \u663e\u7136\u662f\u8d8a\u591a\u8d8a\u597d\u3002\u800c\u6211\u4eec\u53d1\u73b0\uff0c\u64cd\u4f5c 2 \u4e4b\u540e\u4ea7\u751f\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u3002\u7531\u4e8e\u4e0d\u80fd\u62fc\u63a5\uff0c\u6700\u7ec8\u7b54\u6848\u4e00\u5b9a\u662f\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u57fa\u7840\u4e0a\u66b4\u529b\u6dfb\u52a0\u5f97\u5230\u7684\u3002\n\n\u4e8e\u662f\u8003\u8651\u5efa\u7acb PAM\uff0c\u8bbe $f_x$ \u8868\u793a\u4ea7\u751f\u8282\u70b9 $x$ \u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c0f\u64cd\u4f5c\u6b65\u6570\uff0c$l_x$ \u4ee3\u8868\u8282\u70b9 $x$ \u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u6700\u7ec8\u7b54\u6848\u5373\u4e3a $\\min\\{f_x+n-l_x\\}$\u3002\n\n\u5bf9\u4e8e\u8f6c\u79fb\uff0c\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u8282\u70b9 $x$ \u5bf9\u5e94\u7684\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u4e14\u4e0d\u4e3a $0$ \u7684\u56de\u6587\u4e32\uff0c\u5982\u679c\u5728\u5b83\u4e24\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u53ef\u4ee5\u5f97\u5230\u8282\u70b9 $v$ \u5bf9\u5e94\u7684\u56de\u6587\u4e32\uff08\u76f8\u5f53\u4e8e PAM \u4e0a\u7684\u4e00\u6761\u8fb9\uff09\uff0c\u90a3\u4e48 $f_v=\\min(f_v,f_x+1)$\u3002\n\n\u8bc1\u660e\uff1a\u53ef\u4ee5\u5148\u6784\u9020 $x$ \u7684\u4e00\u534a\uff0c\u518d\u52a0\u4e0a\u4e24\u7aef\u7684\u5b57\u7b26\uff0c\u6700\u540e\u6267\u884c\u4e00\u6b21 2 \u64cd\u4f5c\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u957f\u5ea6\u4e3a $0$ \u7684\u60c5\u51b5\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u8bbe $f_0=1$\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u4e2a\u56de\u6587\u4e32\u4e5f\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c $2$ \u83b7\u5f97\u3002\u4e8e\u662f\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a trans \u6307\u9488\uff0c\u4ee3\u8868\u8fd9\u4e2a\u4e32\u6700\u957f\u7684\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc7\u8be5\u4e32\u957f\u5ea6\u7684\u4e00\u534a\u7684\u56de\u6587\u4e32\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u3002\u800c\u8fd9\u53ef\u4ee5\u5728\u63d2\u5165\u65f6\u987a\u4fbf\u6c42\u51fa\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8bb2\u4e86\u3002\n\n\u8bbe $trans_x=p$\uff0c\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\uff1a$f_x=\\min(f_x,f_p+\\dfrac{l_x}{2}-l_p+1)$\u3002\n\n\u7136\u540e\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\u6c42\u51fa\u7b54\u6848\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(|S|)$\u3002\n\nCode:\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\nconst int MAXN = 5e5 + 10 , INF = 0x3f3f3f3f ;\nint T , n , fail[MAXN] , ch[MAXN][4] , dep[MAXN] ;\nint las , tot , nw , tr[MAXN] , ans , f[MAXN] ;\nint p[210] , q[MAXN] , hd , tl ;\nchar s[MAXN] ;\nint gfail (int x) {\n\tfor (; s[nw - dep[x] - 1] != s[nw] ; x = fail[x]) ;\n\treturn x ;\n}\nvoid ext (int x) {\n\tlas = gfail (las) ;\n\tif (!ch[las][x]) {\n\t\tdep[++tot] = dep[las] + 2 ;\n\t\tfail[tot] = ch[gfail (fail[las])][x] ;\n\t\tif (dep[tot] <= 2) tr[tot] = fail[tot] ;\n\t\telse {\n\t\t\tint tmp = tr[las] ;\n\t\t\tfor (; s[nw - dep[tmp] - 1] != s[nw] || (dep[tmp] + 2) * 2 > dep[tot] ; tmp = fail[tmp]) ;\n\t\t\ttr[tot] = ch[tmp][x] ;\n\t\t}\n\t\tch[las][x] = tot ;\n\t}\n\tlas = ch[las][x] ;\n}\nint main () {\n\tscanf (\"%d\" , &T) ;\n\tp['A'] = 0 , p['C'] = 1 , p['G'] = 2 , p['T'] = 3 ;\n\twhile (T--) {\n\t\tscanf (\"%s\" , s + 1) ;\n\t\tn = strlen (s + 1) ; ans = n ;\n\t\tfail[0] = fail[1] = 1 ; dep[1] = -1 ; las = tot = 1 ;\n\t\tfor (nw = 1 ; nw <= n ; nw++) ext (p[s[nw]]) ;\n\t\tfor (int i = 2 ; i <= tot ; i++) f[i] = dep[i] ;\n\t\tf[0] = 1 ; hd = tl = 1 ; q[1] = 0 ;\n\t\twhile (hd <= tl) {\n\t\t\tint x = q[hd++] ;\n\t\t\tans = min (ans , f[x] + n - dep[x]) ;\n\t\t\tfor (int i = 0 ; i < 4 ; i++) {\n\t\t\t\tint v = ch[x][i] ;\n\t\t\t\tif (!v) continue ;\n\t\t\t\t//printf (\"%d->%d\\n\" , x , v) ;\n\t\t\t\tf[v] = f[x] + 1 ;\n\t\t\t\tf[v] = min (f[v] , f[tr[v]] + 1 + dep[v] / 2 - dep[tr[v]]) ;\n\t\t\t\tq[++tl] = v ;\n\t\t\t}\n\t\t}\n\t\t//for (int i = 2 ; i <= tot ; i++) printf (\"%d:%d\\n\" , i , f[i]) ;\n\t\tprintf (\"%d\\n\" , ans) ;\n\t\tfor (int i = 0 ; i <= tot ; i++) {\n\t\t\tdep[i] = tr[i] = fail[i] = f[i] = 0 ;\n\t\t\tfor (int j = 0 ; j < 4 ; j++) ch[i][j] = 0 ;\n\t\t}\n\t}\n\treturn 0 ;\n}\n```",
        "postTime": 1645862331,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4762 \u3010[CERC2014]Virus synthesis\u3011"
    },
    {
        "content": "\n### \u9898\u610f\uff1a\n\u521d\u59cb\u6709\u4e00\u4e2a\u7a7a\u4e32\uff0c\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u4e32\u5f00\u5934\u6216\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\n2. \u5411\u524d\u590d\u5236\uff0c\u5f62\u6210\u56de\u6587\u4e32\n\n\u8be2\u95ee\u8981\u64cd\u4f5c\u6210\u7ed9\u5b9a\u7684\u4e32\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u3002\n\n### \u5206\u6790\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u5148\u6c42\u51fa\u6765\u5bf9\u5e94\u7ed9\u5b9a\u7684\u4e32\u7684\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u53ef\u4ee5\u5927\u81f4\u63a8\u7b97\u51fa\u6765\uff0c\u8fd9\u79cd\u9898\u76ee\u4e00\u822c\u90fd\u662f $DP$ \uff0c\u6211\u4eec\u8bbe $dp[i]$ \u8868\u793a\u8f6c\u79fb\u5230 $i$ \u8282\u70b9\u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c11\u9700\u8981\u6b21\u6570\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u5c3d\u91cf\u60f3\u8ba9\u64cd\u4f5c\u53d8\u5c11\uff0c\u56e0\u6b64\u80af\u5b9a\u64cd\u4f5c\u4e8c\u8d8a\u591a\u8d8a\u597d\u3002\n\n\u56e0\u6b64\u6700\u540e\u7684\u7b54\u6848\u80af\u5b9a\u662f\u7531\u4e00\u4e2a\u56de\u6587\u4e32+\u66b4\u529b\u6dfb\u52a0 \u7684\u6765\uff0c\u7b54\u6848\u4e3a $min(dp[i]+n-len[i])$\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4e32 $i$ ,\u5982\u679c\u524d\u540e\u52a0\u4e00\u4e2a\u5b57\u6bcd\u5f62\u6210 $j$, \u5219 $dp[j]=dp[i]+1$\n\n\u6211\u4eec\u901a\u8fc7 $trans$ \u627e\u5230\u6700\u957f\u7684 $x$ \u540e\u7f00\u56de\u6587\u4e32 $x$ \u6ee1\u8db3 $len[x] \\leq len[i]/2$ \n\n\u90a3\u4e48\u5219\u6709 $dp[i]=min(dp[i],dp[x]+1+len[i]/2-len[x])$ ,\u5373\u66b4\u529b\u540e\u590d\u5236\u3002\n\n![](https://pic.imgdb.cn/item/614ee20d2ab3f51d91b82b13.jpg)\n\n\u7eff\u8272\u90e8\u5206\u5373\u4e3a\u6211\u4eec\u8981\u6dfb\u52a0\u7684\u90e8\u5206\uff0c\u56e0\u6b64\u5c31\u4e3a\u4e0a\u9762\u516c\u5f0f\n\n\u7136\u540e\u7528\u961f\u5217\u8bb0\u5f55\u72b6\u6001\uff0c\u4fdd\u8bc1\u8f6c\u79fb\u5230\u6709\u5e8f\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nint T;\nint fail[N],trans[N],n,val[N];\nint son[N][5],last,len[N],cnt,ans;\nchar s[N];\n\nint dp[N],que[N];\n\nint new_node(int x){\n    len[++cnt]=x;\n    memset(son[cnt],0,sizeof(son[cnt])*5); \n    return cnt;\n}\n\nint getfail(int x,int now){\n    while(s[now-len[x]-1]!=s[now]) x=fail[x]; return x;\n}\n\nvoid init(){\n    memset(son[0],0,sizeof(int)*5); memset(son[1],0,sizeof(int)*5);//\u76f4\u63a5\u6e05\u7406\uff0c\u4f1a\u70b8\u7b2c\u4e00\u4e2a\u70b9\n    val['A']=0, val['T']=1,val['C']=2, val['G']=3;\n    s[0]=-1,last=0,cnt=1;fail[0]=1,len[1]=-1;\n}\n\nvoid build_PAM(){\n    for(int i=1;i<=n;i++){\n        int now=getfail(last,i),x=val[s[i]];\n        // cout<<now<<endl;\n        if(!son[now][x]){\n            int newnode=new_node(len[now]+2);\n            fail[newnode]=son[getfail(fail[now],i)][x];\n            son[now][x]=newnode;\n            if(len[newnode]<=2) trans[newnode]=fail[newnode];\n            else{\n                int tmp=trans[now];\n                while(s[i-len[tmp]-1]!=s[i]||((len[tmp]+2)<<1)>len[newnode]) tmp=fail[tmp];\n                trans[newnode]=son[tmp][x];\n            }\n        }\n        last=son[now][x];\n    }\n}\n\nint main(){\n    cin>>T;\n    while(T--){\n        scanf(\"%s\",s+1);  init(); \n        ans=n=strlen(s+1);\n        build_PAM();\n        for(int i=2;i<=cnt;i++) dp[i]=len[i];\n        int L=1,R=0; que[++R]=0, dp[0]=1;\n        while(L<=R){\n            int now=que[L++];\n            for(int i=0;i<4;i++){\n                int x=son[now][i],y=trans[x]; \n                if(!x) continue;\n                dp[x]=dp[now]+1;\n                dp[x]=min(dp[x],dp[y]+1+len[x]/2-len[y]);\n                ans=min(ans,dp[x]+n-len[x]);\n                que[++R]=x;\n            }\n        }\n        cout<<ans<<endl;\n    }\n    system(\"pause\");\n    return 0;\n}\n\n```\n\n\n",
        "postTime": 1632559773,
        "uid": 310709,
        "name": "Evitagen",
        "ccfLevel": 6,
        "title": "[CERC2014]Virus synthesis"
    },
    {
        "content": "\u8fd9\u9898\u7528$Hash+SAM$\u4e5f\u53ef\u4ee5\uff0c\u7c7b\u4f3c\u4e8e[\u8fd9\u9898](https://www.luogu.org/problemnew/show/P3649)\u7684hash\u505a\u6cd5\uff0c\u6bd4\u56de\u6587\u81ea\u52a8\u673a\u591a\u4e2alog~~\u7136\u540e\u6211\u5c31\u8dd1\u5230\u4e86rk\u50121~~\u3002\n\n\u9996\u5148\u8fd9\u9898\u610f\u770b\u4e0a\u53bb\u5c31\u50cf\u4e2a\u66b4\u529b\u7684\u533a\u95f4dp\u5427\u2026\u2026$dp[l][r]$\u8868\u793a\u6784\u9020\u51fa$[l,r]$\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u5982\u679c$[l,r]$\u662f\u5076\u56de\u6587\u4e32\u5c31\u53ef\u4ee5\u4f7f$[l,mid]$\u7684\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u4e00\u534a\u589e\u500d\uff0c\u6216\u8005\u628a\u5f00\u5934\u6216\u7ed3\u5c3e\u7684\u4e00\u4e2a\u5b57\u7b26\u53bb\u6389\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u66b4\u529bdp\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u8fd9\u4e2a\u533a\u95f4\u662f\u5076\u56de\u6587\u4e32\u7684\u5904\u7406\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8fc7\u7a0b\u672c\u8d28\u4e0a\u5c31\u662f\u201c\u4e00\u6761\u94fe\u7684\u5076\u56de\u6587\u4e32\u201d\uff0c\u5c31\u662f\u6211\u4eec\u8fd9\u4e2a\u5b57\u7b26\u4e32\u80af\u5b9a\u662f\u6700\u7ec8\u7531\u4e00\u4e2a\u5076\u56de\u6587\u4e32$T$\u5728\u4e24\u8fb9\u586b\u5145\u4e0a\u5b57\u7b26\u641e\u51fa\u6765\u7684\u5bf9\u5427\uff0c\u7136\u540e$T$\u662f\u7531\u5728$T$\u534a\u8fb9\u7684\u4e00\u4e2a\u5076\u56de\u6587\u5b50\u4e32$R$\u5728\u4e24\u8fb9\u586b\u5145\u4e00\u5806\u5b57\u7b26\u7136\u540e\u589e\u500d\u641e\u51fa\u6765\u7684\u5bf9\u5427\uff0c\u7136\u540e$R$\u4e5f\u662f\u8fd9\u4e48\u641e\u51fa\u6765\u7684\u2026\u2026\u4f9d\u6b64\u7c7b\u63a8\uff0c\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u628a\u6240\u6709\u5076\u56de\u6587\u4e32\u641e\u51fa\u6765\u7136\u540e\u4f7f\u7528\u56de\u6587\u4e32\u4e4b\u95f4\u7684\u8f6c\u79fb\u5173\u7cfb\u8fdb\u884cdp\uff0c\u56e0\u4e3a~~\u6839\u636e\u5e38\u8bc6~~\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u5b50\u4e32\u53ea\u6709$O(n)$\u4e2a\u3002\n\n\u90a3\u4e48\u5982\u4f55\u627e\u51fa\u6240\u6709\u5076\u56de\u6587\u4e32\uff1f\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9012\u5f52\u5904\u7406\uff0c\u5c31\u662f\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u627e\u51fa\u4ee5\u8fd9\u91cc\u4e3a\u4e2d\u5fc3\u7684\u6781\u957f\u5076\u56de\u6587\u4e32\u8fd9\u4e2a\u4e8c\u5206hash\u8fd8\u662fmanacher\u968f\u4fbf\u600e\u4e48\u7740\u90fd\u884c\uff0c\u7136\u540e\u9012\u5f52\u8fd9\u6bb5\u56de\u6587\u4e32\u7684\u533a\u95f4\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u54c8\u5e0c\u8868\u5b58\u6240\u6709\u56de\u6587\u4e32\u7684\u54c8\u5e0c\u503c\uff0c\u5982\u679c\u8fd9\u4e2a\u56de\u6587\u4e32\u5df2\u7ecf\u5728\u54c8\u5e0c\u8868\u91cc\uff0c\u5c31\u4e0d\u7528\u518d\u5f80\u4e0b\u9012\u5f52\u4e86\uff0c\u56e0\u4e3a\u5185\u5c42\u7684\u56de\u6587\u4e32\u663e\u7136\u90fd\u5df2\u7ecf\u5904\u7406\u8fc7\u4e86\uff0c\u5426\u5219\u5c31\u628a\u5916\u5c42\u5265\u6389\u9012\u5f52\u5185\u5c42\u7684\u56de\u6587\u4e32\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u4e3a\u56de\u6587\u4e32$i$\u7684$ch[i]$\u3002\u8fd9\u6837\u5c31\u80fd\u4e0d\u91cd\u4e0d\u6f0f\u7684$O(n)$\u627e\u51fa\u6240\u6709\u5076\u56de\u6587\u4e32\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u56de\u6587\u4e32\u4e0a\u7684dp\u600e\u4e48\u505a\uff0c\u8bbe$dp[i]$\u4e3a\u628a\u56de\u6587\u4e32i\u62fc\u51fa\u6765\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u66b4\u529b\u5f0f\u5b50\uff08\u8fd9\u4e2adp\u987a\u5e8f\u662f\u6309\u7167len\u4ece\u5927\u5230\u5c0f\u505a\u7684\uff09\uff1a\n\n$dp[i]=min(len_i,min_{j<i,j\\text{\u662fi\u534a\u8fb9\u7684\u5b50\u4e32}}\\{dp[j]+\\frac{len_i}2-len_j+1\\})$\n\n\u663e\u7136\u54b1\u4eec\u4e0d\u80fd\u66b4\u529b\u679a\u4e3ej\uff0c\u4f46\u662fj\u662fi\u534a\u8fb9\u7684\u5b50\u4e32\u8fd9\u4e2a\u6761\u4ef6\u786e\u5b9e\u6bd4\u8f83\u68d8\u624b\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0**\u5982\u679cj\u4e0d\u662fi\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u4e00\u5b9a\u9700\u8981\u5728j\u540e\u9762\u586b\u5145\u5b57\u7b26**\uff0c\u8fd9\u6bd4\u8f83\u663e\u7136\u5427\uff0c\u90a3\u4e48\u8fd9\u5b9e\u9645\u4e0a\u5c31\u53ef\u4ee5\u901a\u8fc7$ch[i]$\u8f6c\u79fb\u4e86\uff0c\u5373**\u6211\u4eec\u53ea\u8003\u8651j\u662fi\u7684\u540e\u7f00\u7684\u60c5\u51b5**\u3002\u6211\u4eec\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n```cpp\nAGCTTTTCCTTTTCGA\n```\n\n\u8fd9\u662f\u4e2a\u5076\u56de\u6587\u4e32\uff0c\u7136\u540e\u4ed6\u534a\u8fb9\u6709\u4e2a\u5076\u56de\u6587\u5b50\u4e32\u662f\u201cTTTT\u201d\uff0c\u5047\u5982\u6211\u4eec\u60f3\u8ba9\u4ed6\u4eceTTTT\u8f6c\u79fb\u8fc7\u6765\uff0c\u5c31\u9700\u8981\u5728TTTT\u4e4b\u524d\u586b\u4e2aC\uff0c\u518d\u5728\u540e\u9762\u586b\u4e2aCGA\uff0c\u589e\u500d\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u5b9e\u9645\u4e0a\u8fd9\u7b49\u4ef7\u4e8e\u8ba9TTTT\u5148\u6784\u6210\u8fd9\u4e2a\u4e32\u7684$ch$\u5373GCTTTTCCTTTTCG\u7684\u53f3\u534a\u8fb9\uff0c\u518d\u5728\u540e\u9762\u586b\u4e2a\u5b57\u7b26A\u5c31\u884c\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u4ece$ch$\u8f6c\u79fb\u5c31\u4e0d\u7528\u679a\u4e3e\u4e0d\u662fi\u7684\u540e\u7f00\u7684\u5076\u56de\u6587\u4e32\u4e86\uff0c\u4e0d\u59a8\u8ba9$dp[i]$\u7684\u610f\u4e49\u4e3a\u6784\u9020\u51fai\u7684**\u53f3\u534a\u8fb9**\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u4e8e\u662fdp\u5f0f\u5b50\u957f\u8fd9\u6837\uff1a\n\n$dp[i]=min(dp[ch_i]+1,min_{j<i,j\\space is\\space suf_i}\\{dp[j]+\\frac{len_i}2-len_j+1\\})$\n\n\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u627e\u662fi\u7684\u540e\u7f00\u7684j\uff0c\u90a3\u8fd9\u4e0d\u5efa\u4e2aSAM\u7136\u540e\u4eceparent\u6811\u4e0a\u7684\u7956\u5148\u8f6c\u79fb\u8fc7\u6765\u4e0d\u5c31\u884c\u4e86\uff1f\uff08\u540e\u6765\u540c\u673a\u623fi207M\u795e\u7287\u5411\u6211\u666e\u53ca\u4e86\u4e00\u4e0b\u4ec0\u4e48\u662f\u56de\u6587\u81ea\u52a8\u673a\u4e4b\u540e\u6211\u624d\u77e5\u9053\u8fd9\u4e2a\u7b97\u6cd5\u548c\u56de\u6587\u81ea\u52a8\u673a\u4f3c\u4e4e\u662f\u672c\u8d28\u76f8\u540c\u7684\u2026\u2026\uff09\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u6211\u4eec\u5148\u6309\u957f\u5ea6\u628a\u6240\u6709\u56de\u6587\u4e32\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u4e0d\u65ad\u5f80\u540e\u79fb\u52a8\u7684\u6307\u9488$ptr$\u8868\u793a\u8fd9\u4e4b\u524d\u7684len\u90fd\u5c0f\u4e8e\u7b49\u4e8e$\\frac{len_i}2$\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86j\u4e00\u5b9a\u662fi\u53f3\u534a\u8fb9\u7684\u540e\u7f00\uff0c\u6bcf\u6b21ptr\u5f80\u540e\u626b\u4e00\u4e2a\u56de\u6587\u4e32\u5c31\u628a\u8fd9\u4e2a\u4e32\u7684$dp[j]-len_j$\u7528\u7ebf\u6bb5\u6811\u8986\u76d6\u5230\u8fd9\u4e2a\u56de\u6587\u4e32\u6240\u5728\u8282\u70b9\u7684parent\u6811\u7684\u5b50\u6811dfn\u533a\u95f4\u4e0a\u53bb\uff0c\u56e0\u4e3a\u6211\u4eec\u627e\u7684\u5c31\u662f\u7956\u5148\u4e0a\u6700\u5c0f\u7684$dp[j]-len_j$\u3002\u7136\u540e\u6bcf\u4e2a\u56de\u6587\u4e32\u5728SAM\u4e0a\u7684\u8282\u70b9\u53ef\u4ee5\u7528\u6811\u4e0a\u500d\u589e\u627e\u51fa\u6765\u8fd9\u5c31\u662f\u57fa\u672c\u5957\u8def\u4e86\u3002\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u2026\u2026\u6392\u5e8f+\u7ebf\u6bb5\u6811+\u6811\u4e0a\u500d\u589e\u90fd\u662f$O(nlogn)$\u7684\u5e38\u6570\u6781\u5927\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ll unsigned long long\n#define inf 123456789\n#define ls(_o) (_o << 1)\n#define rs(_o) ((_o << 1) | 1)\n#define gethsh(_l, _r) (hsh[_r] - hsh[(_l)-1] * dk[(_r) - (_l) + 1])\n#define getfhsh(_l, _r) (fhsh[_r] - fhsh[(_l)-1] * dk[(_r) - (_l) + 1])\nusing namespace std;\nnamespace ywy {\nnamespace haxi {\n#define p 1000003\ntypedef struct _n {\n    ll data;\n    int nxt;\n    int id;\n} node;\nnode memchi[1000001];\nint heads[1000003], gn = 1;\ninline void insert(ll data, int id) {\n    memchi[gn].id = id;\n    memchi[gn].data = data;\n    memchi[gn].nxt = heads[data % p];\n    heads[data % p] = gn;\n    gn++;\n}\ninline int query(ll data) {\n    for (register int i = heads[data % p]; i; i = memchi[i].nxt) {\n        if (memchi[i].data == data)\n            return (memchi[i].id);\n    }\n    return (0);\n}\n#undef p\n}  // namespace haxi\nchar str[111111];\nint sam[200001][4], deep[200001], heads[200001], len[200001], fa[200001], ance[200001][18];\ninline int get() {\n    char c;\n    int ptr = 1;\n    while ((c = getchar()) || 23333)\n        if (c >= 'A' && c <= 'Z')\n            break;\n    str[ptr] = c;\n    ptr++;\n    while ((c = getchar()) || 23333) {\n        if (c >= 'A' && c <= 'Z')\n            str[ptr] = c, ptr++;\n        else\n            return (ptr - 1);\n    }\n}\nll dk[200001], hsh[100001];\nint dfn[200001], lg[200001], size[200001];\ntypedef struct _b {\n    int dest;\n    int nxt;\n} bian;\nbian memchi[200001];\nint gn = 2, gnn = 1;\ninline void add(int s, int t) {\n    memchi[gnn].dest = t;\n    memchi[gnn].nxt = heads[s];\n    heads[s] = gnn;\n    gnn++;\n}\ntypedef struct _n {\n    int len;\n    int nd;\n    int ch;\n    int id;\n    ll data;\n    friend bool operator<(const _n &a, const _n &b) { return (a.len < b.len); }\n} node;\nnode nodes[1000001];\nint minn[1000001], nd[200001];\nvoid setqj(int rl, int rr, int l, int r, int tree, int num) {\n    if (minn[tree] <= num)\n        return;\n    if (rl == l && rr == r) {\n        minn[tree] = min(minn[tree], num);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (rl > mid)\n        setqj(rl, rr, mid + 1, r, rs(tree), num);\n    else {\n        if (rr <= mid)\n            setqj(rl, rr, l, mid, ls(tree), num);\n        else {\n            setqj(rl, mid, l, mid, ls(tree), num);\n            setqj(mid + 1, rr, mid + 1, r, rs(tree), num);\n        }\n    }\n}\nvoid build(int l, int r, int tree) {\n    minn[tree] = inf;\n    if (l == r) {\n        nd[l] = tree;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(l, mid, ls(tree));\n    build(mid + 1, r, rs(tree));\n}\ninline int getpt(int pt) {\n    int ans = inf;\n    for (register int i = nd[pt]; i; i >>= 1) ans = min(ans, minn[i]);\n    return (ans);\n}\nint gdfn = 1;\nvoid dfs(int pt) {\n    size[pt] = 1;\n    dfn[pt] = gdfn;\n    gdfn++;\n    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n        deep[memchi[i].dest] = deep[pt] + 1;\n        dfs(memchi[i].dest);\n        size[pt] += size[memchi[i].dest];\n    }\n}\ninline int zhuanyi(int p, int x) {\n    int me = gn;\n    gn++;\n    len[me] = len[p] + 1;\n    while (p && !sam[p][x]) sam[p][x] = me, p = fa[p];\n    if (!p) {\n        fa[me] = 1;\n        return (me);\n    }\n    int q = sam[p][x];\n    if (len[q] == len[p] + 1) {\n        fa[me] = q;\n        return (me);\n    }\n    int nq = gn;\n    gn++;\n    len[nq] = len[p] + 1;\n    for (register int i = 0; i < 4; i++) sam[nq][i] = sam[q][i];\n    fa[nq] = fa[q];\n    fa[q] = fa[me] = nq;\n    while (p && sam[p][x] == q) sam[p][x] = nq, p = fa[p];\n    return (me);\n}\nint ghui = 1;\nint f[100001];\ninline int digui(int l, int r) {\n    int cjr = haxi::query(gethsh(l, r));\n    if (cjr)\n        return (cjr);\n    cjr = ghui;\n    ghui++;\n    nodes[cjr].id = cjr;\n    nodes[cjr].data = gethsh(l, r);\n    haxi::insert(gethsh(l, r), cjr);\n    int cur = f[r];\n    for (register int i = lg[deep[cur]]; i >= 0; i--) {\n        if (ance[cur][i] && len[ance[cur][i]] >= r - l + 1)\n            cur = ance[cur][i];\n    }\n    nodes[cjr].nd = cur;\n    nodes[cjr].len = r - l + 1;\n    if (r != l + 1)\n        nodes[cjr].ch = digui(l + 1, r - 1);\n    return (cjr);\n}\nint orz[300];\nll fhsh[100001];\nint dp[1000001];\nvoid ywymain() {\n    dk[0] = 1;\n    lg[0] = -1;\n    for (register int i = 1; i <= 200000; i++) {\n        dk[i] = dk[i - 1] * 233ull;\n        lg[i] = lg[i - 1];\n        if (i == (i & -i))\n            lg[i]++;\n    }\n    orz['A'] = 0;\n    orz['T'] = 1;\n    orz['C'] = 2;\n    orz['G'] = 3;\n    int t;\n    cin >> t;\n    while (t) {\n        t--;\n        int n = get();\n        haxi::gn = 1;\n        gn = 2;\n        gnn = 1;\n        ghui = 1;\n        gdfn = 1;\n        int p = 1;\n        for (register int i = 1; i <= n; i++) {\n            hsh[i] = hsh[i - 1] * 233ull + str[i];\n            p = zhuanyi(p, orz[str[i]]);\n            f[i] = p;\n            fhsh[i] = fhsh[i - 1] * 233ull + str[n - i + 1];\n        }\n        for (register int i = 2; i < gn; i++) add(fa[i], i), ance[i][0] = fa[i];\n        dfs(1);\n        build(1, gn - 1, 1);\n        for (register int i = 1; i <= lg[gn - 1]; i++) {\n            for (register int j = 2; j < gn; j++) ance[j][i] = ance[ance[j][i - 1]][i - 1];\n        }\n        for (register int i = 1; i < n; i++) {\n            if (str[i + 1] != str[i])\n                continue;\n            int ans = 0, l = 1, r = min(i, n - i);\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (gethsh(i - mid + 1, i) == getfhsh(n - (i + mid) + 1, n - (i + 1) + 1))\n                    ans = mid, l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            digui(i - ans + 1, i + ans);\n        }\n        ghui--;\n        if (!ghui) {\n            cout << n << endl;\n            for (register int i = 1; i < gn; i++) {\n                heads[i] = 0;\n                sam[i][0] = sam[i][1] = sam[i][2] = sam[i][3] = 0;\n                if (i > 1)\n                    for (register int j = 0; j <= lg[deep[i]]; j++) ance[i][j] = 0;\n            }\n            for (register int i = 1; i <= ghui; i++) haxi::heads[nodes[i].data % 1000003] = 0;\n            continue;\n        }\n        sort(nodes + 1, nodes + 1 + ghui);\n        int ans = n;\n        int ptr = 0;\n        for (register int i = 1; i <= ghui; i++) {\n            while (ptr + 1 < i && nodes[ptr + 1].len <= nodes[i].len / 2) {\n                ptr++;\n                setqj(dfn[nodes[ptr].nd], dfn[nodes[ptr].nd] + size[nodes[ptr].nd] - 1, 1, gn - 1, 1,\n                      dp[nodes[ptr].id] - nodes[ptr].len);\n            }\n            if (nodes[i].len == 2)\n                dp[nodes[i].id] = 1;\n            else {\n                dp[nodes[i].id] = min(dp[nodes[i].ch] + 1, getpt(dfn[nodes[i].nd]) + 1 + nodes[i].len / 2);\n            }\n            ans = min(ans, dp[nodes[i].id] + 1 + n - nodes[i].len);\n        }\n        cout << ans << endl;\n        for (register int i = 1; i < gn; i++) {\n            heads[i] = 0;\n            sam[i][0] = sam[i][1] = sam[i][2] = sam[i][3] = 0;\n            if (i > 1)\n                for (register int j = 0; j <= lg[deep[i]]; j++) ance[i][j] = 0;\n        }\n        for (register int i = 1; i <= ghui; i++) haxi::heads[nodes[i].data % 1000003] = 0;\n    }\n}\n}  // namespace ywy\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1551350436,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4762 \u3010[CERC2014]Virus synthesis\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5\uff1a[[CERC2014]Virus synthesis](https://www.luogu.com.cn/problem/P4762)\n\n\u9898\u610f\uff1a \n\n\u3000\u3000\u521d\u59cb\u7ed9\u5b9a\u4e00\u4e2a\u7a7a\u4e32\uff0c\u6709 2 \u79cd\u64cd\u4f5c\uff1a\n\n\u3000\u3000\u3000\u30001.\u5728\u4e32\u5f00\u5934\u6216\u8005\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002\n\n\u3000\u3000\u3000\u30002.\u5c06\u5f53\u524d\u4e32\u590d\u5236\u4e00\u4efd\u5e76\u53cd\u63a5\u5728\u540e\u9762\u3002\uff08AAAB $\\rightarrow $ AAABBAAA\uff09\n\n\u3000\u3000\u591a\u6b21\u8be2\u95ee\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6700\u5c11\u80fd\u7528\u591a\u5c11\u6b21\u64cd\u4f5c\u5f97\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\n\n\u9898\u89e3\uff1a\n\n\u3000\u3000PAM \u7684\u677f\u9898\uff0c \u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u64cd\u4f5c 2 \u8d8a\u591a\u8d8a\u597d\uff0c\u4f46\u662f\u53d1\u73b0\u64cd\u4f5c 2 \u53ea\u80fd\u5f97\u5230\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u7b54\u6848\u5176\u5b9e\u5c31\u662f **\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u7684\u57fa\u7840\u4e0a\u66b4\u529b\u6dfb\u52a0\u5b57\u7b26** \u3002\n\n\u3000\u3000\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u7684\u4e32\u5efa\u7acb PAM\uff0c\u8bbe $dp_x$ \u8868\u793a\u5f97\u5230\u8282\u70b9 $x$ \u6240\u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\uff0c$Len_x$ \u4e3a\u8282\u70b9 $x$ \u6240\u4ee3\u8868\u7684\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\uff0c$n$ \u4e3a\u8be2\u95ee\u4e32\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u7b54\u6848\u5176\u5b9e\u5c31\u662f $min\\left \\{ dp_x + n -Len_x\\right\\}$ \u3002\n\n\u3000\u3000\u9996\u5148\u5bf9\u4e8e $dp$ \u6570\u7ec4\u7684\u8f6c\u79fb\uff0c\u6709\uff1a\n\n\u3000\u3000\u3000\u3000\u8bbe $S_x$ \u4e3a $x$ \u8282\u70b9\u4ee3\u8868\u7684\u56de\u6587\u4e32\u3002  \n\n\u3000\u3000\u3000\u3000\u82e5\u5728 PAM \u4e0a\u5b58\u5728\u4e00\u6761 $u \\rightarrow v$ \u7684\u8f6c\u79fb\u8fb9\uff08\u5373\u5728 $S_x $ \u5f00\u5934\u548c\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u76f8\u540c\u5b57\u7b26\u80fd\u5f97\u5230 $S_v$\uff09\uff0c\u90a3\u4e48\u5c31\u6709\u8f6c\u79fb\uff1a $dp_v = min(dp_v , dp_u+1)$ \u3002\n\n\u3000\u3000\u3000\u3000\u8bc1\u660e\uff1a\u5148\u6784\u9020 $S_u$ \u7684\u4e00\u534a\uff0c\u518d\u5728\u5f00\u5934\u6dfb\u52a0\u4e00\u4e2a\u5bf9\u5e94\u5b57\u7b26\uff0c\u5728\u901a\u8fc7\u64cd\u4f5c 2 \u5f97\u5230 $Sv$ \uff0c\u64cd\u4f5c\u6b21\u6570\uff1a $dp_u - 1 + 1 + 1= dp_u + 1$\n\n\u3000\u3000\u3000\u3000\u6211\u4eec\u53d1\u73b0\u56de\u6587\u4e32\u53ef\u80fd\u7531\u81ea\u5df1\u7684\u4e00\u534a\u8f6c\u79fb\u8fc7\u6765\uff0c\u56e0\u6b64\u6211\u4eec\u5728PAM\u4e0a\u9762\u5229\u7528 $fail$ \u7ef4\u62a4\u4e00\u4e2a $tran$ \u6307\u9488\uff0c \u8868\u793a**\u957f\u5ea6\u4e0d\u8d85\u8fc7\u5f53\u524d\u56de\u6587\u4e32\u4e00\u534a\u7684\u6700\u957f\u56de\u6587\u4e32\u5bf9\u5e94\u7684\u8282\u70b9**\u3002\uff08\u5177\u4f53\u770b\u4ee3\u7801\uff09\n\n\u3000\u3000\u6211\u4eec\u8bbe $y = tran_x$ \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\uff1a$ dp_x = min(dp_x , dp_y + \\frac{Len_x} {2} - Len_y + 1)$ \u3002\n\n\u3000\u3000\u76f4\u63a5\u4ece\u6839\u5f00\u59cb BFS \u8f6c\u79fb\u5c31\u884c\u4e86\uff0c\u590d\u6742\u5ea6 $O(\\sum|S|)$\u3002\n\nCode\uff1a\n\n```cpp\n/* Written by Rikka__  */\n/* \u951f\u65a4\u62f7 */\n#include<bits/stdc++.h>\nusing namespace std;\n#define _ =read()\ninline int read(){\n    int r = 0 , w = 1;\n    char ch = getchar();\n    while(ch > '9' || ch < '0') {if(ch == '-') w = -1; ch = getchar();} \n    while(ch >='0' && ch <='9') {r = r * 10 + ch -'0'; ch = getchar();}\n    return r * w;\n}\nnamespace FileIO{\n    string InFile;\n    string OutFile;\n    void File(string s){\n        InFile = s + \".in\";\n        OutFile = s + \".out\";\n        freopen(InFile.data() , \"r\" , stdin);\n        freopen(OutFile.data() , \"w\" , stdout);\n    }\n}\nconst int Maxn = 500010;\nchar str[Maxn];\nint n;\nint L;\nint ans;\nint a[5]={0,'G'-'A','C'-'A','T'-'A'};\nnamespace PAM{\n    int tot = 1;\n    int cur = 0;\n    int Len[Maxn];\n    int fail[Maxn];\n    int ch[Maxn][26];\n    int num[Maxn];\n    int tran[Maxn];\n    int dp[Maxn];\n    inline int Get(int x , int i){\n        while(str[i - Len[x] - 1] != str[i]) x = fail[x];\n        return x;\n    }\n    void extend(int i){\n        int pos = Get(cur , i);\n        if(ch[pos][str[i] - 'A'] == 0){\n            fail[++tot] = ch[Get(fail[pos] , i)][str[i] - 'A'];\n            ch[pos][str[i] - 'A'] = tot;\n            Len[tot] = Len[pos] + 2;\n            if(Len[tot] <= 2) tran[tot] = fail[tot];\n            else{\n                int now = tran[pos];\n                while(str[i - Len[now] - 1] != str[i] || (Len[now] + 2) * 2 > Len[tot]) now = fail[now];\n                tran[tot] = ch[now][str[i] - 'A'];\n            }\n\t    }\n        cur = ch[pos][str[i] - 'A'];\n        num[cur]++;\n    }\n    void init(){\n        for(int i = 0 ; i <= tot ; i++){\n            for(int j = 0 ; j < 4 ; j++){\n                ch[i][a[j]] = 0;    \n            }\n        }\n        tot = 1;\n        cur = 0;\n        Len[1] = -1;\n        fail[0] = 1 , fail[1] = 1;\n    }\n}\nsigned main(){\n    // FileIO::File(\"dna\");\n    using namespace PAM;\n    n _;\n    while(n --> 0){\n        scanf(\"%s\" , str + 1);\n        L = strlen(str + 1);\n        ans = L;\n        init();\n        for(int i = 1 ; i <= L ; i++) extend(i);\n        for(int i = 2 ; i <= tot ; i++) dp[i] = Len[i];\n        queue<int> q;\n        q.push(0);\n        dp[0] = 1;\n        while(!q.empty()){\n            int now = q.front();\n            q.pop();\n            for(int i = 0 ; i <= 3 ; i++){\n                int son = ch[now][a[i]];\n                if(son == 0) continue;\n                dp[son] = dp[now] + 1;\n                dp[son] = min(dp[son] , dp[tran[son]] + 1 + Len[son] / 2 - Len[tran[son]]);\n                ans = min(ans , dp[son] + L - Len[son]);\n                q.push(son);\n\t\t\t}\n\t\t}\n        cout << ans << \"\\n\";\n    }\n\treturn 0;\n}\n```\n",
        "postTime": 1649657956,
        "uid": 106103,
        "name": "Rikka__",
        "ccfLevel": 4,
        "title": "[CERC2014]Virus synthesis \u9898\u89e3"
    },
    {
        "content": "[**\u4f60\u8c37 link**](https://www.luogu.com.cn/problem/P4762)\n\n\u56de\u6587\u81ea\u52a8\u673a\u597d\u9898\uff0c\u9996\u5148\u53d1\u73b0\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u7684\u7ed3\u679c\u80af\u5b9a\u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u7406\u60f3\u7684\u7ed3\u679c\u80af\u5b9a\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u52a0\u4e0a\u524d\u540e\u63a5\u4e00\u4e9b\u6742\u5b57\u7b26\uff0c\u56e0\u4e3a\u53c8\u662f\u548c\u5b57\u7b26\u4e32\u7684\u6240\u6709\u56de\u6587\u5b50\u4e32\u76f8\u5173\uff0c\u6240\u4ee5\u5148\u5efa\u51fa\u56de\u6587\u81ea\u52a8\u673a\u3002\n\n\u7136\u540e\u8003\u8651\u8fd9\u9898\u4e2d\u4e0d\u662f\u6240\u6709\u7684\u5b50\u4e32\u90fd\u662f\u6709\u7528\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u7684\u5b58\u5728\uff0c\u91cd\u8981\u7684\u80af\u5b9a\u662f\u56de\u6587\u4e32\uff0c\u800c\u4e14\u5fc5\u987b\u662f**\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32**\uff0c\u8003\u8651\u6c42\u51fa\u6784\u9020\u6bcf\u4e2a\u56de\u6587\u4e32\u6240\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\uff0c\u53ef\u4ee5\u60f3\u5230\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u8dd1 dp\u3002\n\n\u8bbe $f_i$ \u8868\u793a\u6784\u9020\u56de\u6587\u81ea\u52a8\u673a $i$ \u8282\u70b9\u8868\u793a\u7684\u56de\u6587\u4e32\u6240\u9700\u8981\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\uff0c\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u521d\u59cb\u5316 $f_i=\\mathrm{len}(i)$\uff0c\u800c\u4e14\u5947\u6570\u957f\u5ea6\u5b57\u7b26\u4e32\u7684\u4ee3\u4ef7\u5df2\u7ecf\u56fa\u5b9a\u4e86\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u901a\u8fc7 $2$ \u64cd\u4f5c\u5f97\u5230\uff0c\u5373\u4e00\u4e2a\u4e00\u4e2a\u7528 $1$ \u64cd\u4f5c\u62fc\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u662f\u52a3\u7684\uff0c\u8fd8\u6709\u66f4\u597d\u7684\u529e\u6cd5\uff0c\u5c31\u662f\u5229\u7528 $2$ \u64cd\u4f5c\uff0c\u53ef\u4ee5\u60f3\u5230\u62fc\u51fa\u534a\u4e2a\u4e32\u518d\u7528 $2$ \u64cd\u4f5c\u5b8c\u6210\u6574\u4e2a\u4e32\u7684\u6784\u9020\uff0c\u4e14\u8fd9\u6837\u5fc5\u7136\u4f18\u4e8e\u53ea\u7528 $1$ \u64cd\u4f5c\u62fc\uff0c\u6240\u4ee5\u6240\u6709\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32\u6784\u9020\u8fc7\u7a0b\u4e2d\u6700\u540e\u4e00\u6b21\u5fc5\u7136\u662f $2$ \u64cd\u4f5c\uff0c\u9996\u5148\u53ef\u4ee5\u4ece\u56de\u6587\u81ea\u52a8\u673a\u4e0a\u7236\u4eb2\u5904\u8f6c\u79fb\uff0c\uff0c\u5373 $f_i=f_{\\textrm{fa}_i}+1$\uff0c\u5c31\u662f\u8bf4\u5728\u7528 $2$ \u64cd\u4f5c\u7ffb\u500d\u524d\u76f4\u63a5\u628a\u672b\u5c3e\u5b57\u7b26\u585e\u8fdb\u53bb\uff0c\u8fd9\u79cd\u60c5\u51b5\u4ee3\u8868\u7740 $1$ \u64cd\u4f5c\u5728\u540e\u9762\u52a0\u5b57\u7b26\uff0c\u53e6\u4e00\u79cd\u60c5\u51b5\u662f\u5229\u7528**\u957f\u5ea6\u4e0d\u8d85\u8fc7\u4e00\u534a**\u7684\u540e\u7f00\u56de\u6587\u4e32\u524d\u9762\u52a0\u5b57\u7b26\u5f97\u5230\u8be5\u4e32\u7684\u4e00\u534a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5728\u6c42 $\\textrm{fail}$ \u6307\u9488\u65f6\u987a\u4fbf\u6c42\u51fa\u4ee3\u8868\u957f\u5ea6\u4e0d\u8d85\u8fc7\u5f53\u524d\u4e32\u4e00\u534a\u7684\u56de\u6587\u540e\u7f00 $\\textrm{half}$ \uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u770b\u4ee3\u7801\uff0c\u6700\u540e $f_i$ \u7684\u603b\u52a8\u6001\u8f6c\u79fb\u65b9\u7a0b $f_i=\\min\\{\\operatorname{len}(i),f_{\\textrm{fa}_i}+1,f_{\\textrm{half}_i}+\\operatorname{len}(i)-\\operatorname{len}(\\textrm{half}_i)\\}$\uff0c\u5177\u4f53\u5b9e\u73b0\u4e0a\u7b2c\u4e00\u90e8\u5206\u53ef\u4ee5\u521d\u59cb\u5316\u8d4b\u503c\uff08\u56e0\u4e3a\u5947\u6839\u7684\u5b50\u5b59\u4e5f\u8981\u8d4b\u503c\uff09\uff0c\u7b2c\u4e8c\u90e8\u5206\u56e0\u4e3a\u5728\u56de\u6587\u81ea\u52a8\u673a\u4e2d\u4e0d\u5b58\u50a8 $\\textrm{fa}$ \u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u7236\u4eb2\u5904\u5904\u7406\uff0c\u6700\u540e\u5728\u5904\u7406\u7b2c\u4e09\u4e2a\u90e8\u5206\u3002\n\n[\u4ee3\u7801](https://www.cnblogs.com/LaoMang-no-blog/p/16449928.html)",
        "postTime": 1657092314,
        "uid": 310525,
        "name": "\u8001\u83bd\u83bd\u7a7f\u4e00\u5207",
        "ccfLevel": 0,
        "title": "[CERC2014] Virus synthesis \u9898\u89e3"
    },
    {
        "content": "### P.S.\n[\u5982\u679c\u4e0d\u4f1aPAM\u53ef\u4ee5\u53c2\u8003](https://www.luogu.com.cn/blog/command-block/hui-wen-zi-dong-ji-xiao-ji)\uff0c\u7b14\u8005\u4e5f\u662f\u4ece\u8fd9\u91cc\u5b66 PAM \u7684\u3002  \n\uff08\u91cc\u9762\u4e5f\u6709\u8fd9\u9898\u7684\u8f83\u7b80\u7565\u9898\u89e3\n### Description.\n\u7ed9\u4f60\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5728\u5f00\u5934/\u7ed3\u5c3e\u52a0\u5165\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u628a\u5b83 `reverse` \u4e00\u904d\u540e\u653e\u5230\u672b\u5c3e\uff0c\u6c42\u6784\u9020\u51fa\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6700\u5c11\u6b65\u6570\u3002  \n### Solution.\n\u6ce8\u610f\u8fd9\u91cc\u6ca1\u6709\u62fc\u63a5\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f1a\u663e\u5f97\u7a0d\u5fae\u7b80\u5355\u4e00\u70b9\u3002  \n\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u628a\u6240\u6709\u56de\u6587\u4e32\u4e2d\u4e00\u4e2a\u7528 `2` \u64cd\u4f5c\u4f18\u5316\u6b65\u6570\uff0c\u800c\u4e0d\u9700\u8981\u540c\u65f6\u8003\u8651\u591a\u4e2a\u56de\u6587\u4e32\u3002  \n\u800c\u8003\u8651\u5355\u4e2a\u56de\u6587\u4e32\u663e\u7136\u8ba9\u6211\u4eec\u8054\u60f3\u5230\u5904\u7406\u56de\u6587\u4e32\u7684\u5229\u5668\u2014\u2014\u56de\u6587\u81ea\u52a8\u673a\u3002  \n\n\u56de\u60f3\u4e00\u904d\u9898\u76ee\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u627e\u51fa\u56de\u6587\u4e32\u80fd\u4f18\u5316\u6b65\u6570\u6700\u5927\u503c\u3002  \n\u800c\u8fd9\u91cc\u7684\u56de\u6587\u4e32\u663e\u7136\u53ea\u80fd\u957f\u5ea6\u4e3a**\u5076\u6570**\uff08\u5947\u6570\u65e0\u6cd5\u4f7f\u7528\u65b9\u6cd5 `2`\uff0c\u4e0b\u6587\u57fa\u4e8e\u6b64\u3002  \n\u8fd9\u5c31\u5f15\u8bf1\u6211\u4eec\u8003\u8651 `dp` \uff0c\u8bbe $dp[x]$ \u8868\u793a\u7b2c $x$ \u4e2a\u70b9\u6700\u591a\u7528\u591a\u5c11\u6b21\u3002  \n\u9996\u5148\uff0c$dp[x]+1\\rightarrow dp[son_x]$\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u5728 $x$ \u8fdb\u884c\u64cd\u4f5c `2` \u4e4b\u524d\u591a\u52a0\u4e00\u4e2a\u5b57\u7b26\u5c31\u53ef\u4ee5\u5f97\u5230 $son_x$\u3002  \n\uff08\u6ce8\u610f\u8fd9\u91cc\u4e0d\u53ef\u4ee5 $fa_x$\uff0c\u56e0\u4e3a PAM \u4e0a $fa_x$ \u4ee3\u8868\u7684\u4e0d\u662f\u52a0\u4e0a\u4e00\u4e2a\u5b57\u7b26\u3002  \n\u7136\u540e\uff0c$dp[x]\\leftarrow len[x]$\uff0c\u8fd9\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u66b4\u529b\u4e00\u4e2a\u4e00\u4e2a\u52a0\u5b57\u7b26\u3002  \n\u8fd8\u6709\uff0c$dp[x]\\leftarrow dp[link_x]+\\left\\lfloor\\frac{len[x]}2\\right\\rfloor+1-len[link_x]$\u3002  \n\uff08$link_x$ \u8868\u793a $x$ \u4ee3\u8868\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 $\\left\\lfloor\\frac{len[x]}2\\right\\rfloor$ \u7684\u56de\u6587\u4e32\u8282\u70b9\u3002  \n\u8fd9\u4e2a\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u5927\u6982\u5c31\u662f\u8fd9\u4e2a\u56de\u6587\u4e32\u53ef\u4ee5\u7531\u5b83\u7684\u5b50\u56de\u6587\u4e32\u7ffb\u500d\u540e\u5f97\u5230\u5b83\u3002  \n\n\u7136\u540e\u628a\u6240\u6709\u5076\u56de\u6587\u4e32\u7684 `dp` \u503c\u7b97\u51fa\u6765\u540e\uff0c\u5bf9\u6bcf\u4e2a $len[x]-dp[x]$ \u53d6 $\\max$ \u5c31\u662f\u6700\u591a\u8282\u7701\u6b21\u6570\u4e86\u3002  \n### Coding.\n```\n//\u613f\u4f60\u548c\u4f60\u91cd\u8981\u7684\u4eba\u80fd\u591f\u518d\u6b21\u91cd\u9022\uff01\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<48||c>59;c=getchar()) if(!(c^45)) f=1;\n\tfor(;c>=48&&c<=57;c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tf?x=-x:0;\n}\nstruct pamn{int ch[4],fa,len,hf;}S[100005];int smt,sls;\nint T,n,dp[100005];char c[100005];//cg[100005];string debug[100005];\n//inline char DBG(int x) {return x==0?'A':x==1?'C':x==2?'G':'T';}\ninline int gc(char s) {return s=='A'?0:s=='C'?1:s=='G'?2:3;}\ninline void paminit()\n{\n\tsmt=sls=2,S[1].len=-1,S[1].fa=S[2].fa=1,S[1].hf=S[2].hf=2;\n\tmemset(S[1].ch,0,sizeof(S[1].ch)),memset(S[2].ch,0,sizeof(S[2].ch));\n}//PAM \u7684\u6e05\u7a7a\ninline void pamins(int wh,int c,char *s)\n{\n\tint p=sls;for(;s[wh]^s[wh-S[p].len-1];p=S[p].fa);\n\tif(S[p].ch[c]) return sls=S[p].ch[c],void();\n\tint np=sls=++smt,ph=S[p].fa;S[np].len=S[p].len+2;\n\tmemset(S[np].ch,0,sizeof(S[np].ch));for(;s[wh]^s[wh-S[ph].len-1];ph=S[ph].fa);\n\tS[np].fa=S[ph].ch[c]?S[ph].ch[c]:2,S[p].ch[c]=np;\n\tint pw=S[p].hf;if(S[np].len<=2) return S[np].hf=2,void();\n\tfor(;s[wh]^s[wh-S[pw].len-1]||((S[pw].len+2)<<1)>S[np].len;pw=S[pw].fa);\n\tS[np].hf=S[pw].ch[c];//\u66b4\u8df3\u7236\u4eb2\u627e\u5230 link\uff08\u4ee3\u7801\u4e2d\u662f hf=half\n}\ninline void solve()\n{\n\tscanf(\"%s\",c+1),n=strlen(c+1),c[0]=-1,paminit();queue<int>q;\n\tfor(int i=1;i<=n;i++) pamins(i,c[i]=gc(c[i]),c);\n\tint mn=n;for(int i=3;i<=smt;i++) dp[i]=S[i].len;\n\tfor(int i=0;i<4;i++) if(S[2].ch[i]) q.push(S[2].ch[i]);\n\twhile(!q.empty())\n\t{//dp\uff0c\u4e0a\u6587\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\u3002\n\t\tint x=q.front();q.pop(),dp[x]=min(dp[x],dp[S[x].hf]+S[x].len/2+1-S[S[x].hf].len),mn=min(mn,n-S[x].len+dp[x]);\n\t\tfor(int i=0;i<4;i++) if(S[x].ch[i]) dp[S[x].ch[i]]=min(dp[x]+1,dp[S[x].ch[i]]),q.push(S[x].ch[i]);\n\t}\n\t//for(int i=2;i<=smt;i++) if(cg[i]) for(int j=0;j<4;j++) if(S[i].ch[j]) debug[S[i].ch[j]]=DBG(j)+debug[i]+DBG(j);\n\t//for(int i=2;i<=smt;i++) if(cg[i]) cout<<debug[i]<<\"<-\"<<debug[S[i].hf]<<endl;\n\tprintf(\"%d\\n\",mn);\n}\nint main() {for(read(T);T--;) solve();return 0;}\n```",
        "postTime": 1612275633,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P4762 [CERC2014]Virus synthesis\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u8fd9\u9053\u9898\u663e\u7136\u662fmanacher\u4e0d\u592a\u597d\u505a\uff0c\u53ef\u7528pam\u8fdb\u884cdp\u8f6c\u79fb\u7684\u4e00\u7c7b\u9898\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651pam\u7684\u72b6\u6001\uff0c\u5177\u4f53\u7684\u5957\u8def\u662f\u4e00\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u6c42half\u7684\u5957\u8def\n\n\u8fd9\u91cc\u7684half\u662f\u6307<=\u5f53\u524d\u4e32\u76841/2\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u548c\u6c42getfail\u7684\u8fc7\u7a0b\u4e00\u6837\uff08\u8fd9\u91cc\u7684getfail\u5c31\u662fpar\u6811\uff09\uff0c\u7136\u540e\u6211\u4eec\u6c42\u51fa\u4e86half\u4ee5\u540e\u53ef\u4ee5\u8fdb\u884cdp\u8f6c\u79fb\uff01\n\n\u6211\u4eec\u8bbe\u4e00\u4e2au\u4e3a\u5f53\u524d\u8282\u70b9\uff0cv\u4e3a\u5f53\u524d\u8282\u70b9\u7684\u4e00\u4e2a\u513f\u5b50\n\n\u7136\u540e\u8003\u8651\u8f6c\u79fb\u5c31\u662f\uff1a\n\n```cpp\ndp[v] = dp[u] + 1, dp[v] = min(dp[v], dp[hf] + 1 + (len[v] >> 1) - len[hf]);\n```\n\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u663e\u7136\n\n\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u628ahf\u6269\u52301/2\u7136\u540e\u62f7\u8d1d\u4e00\u904d\u5373\u53ef\n\n\u4f46\u662f\u5176\u4ed6\u9898\u89e3\u5c06\u7684\u4e0d\u592a\u6e05\u695a\u7684\u5c31\u662f\uff1a\n\n\u5f53\u524d\u7684u\u548cv\u5fc5\u987b\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u56e0\u4e3a\u53ea\u6709\u5076\u6570\u624d\u80fd\u6ee1\u8db3\u4ee5\u4e0a\u4e24\u79cd\u8f6c\u79fb\n\n\u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u521a\u5f00\u59cb\u53ef\u80fd\u4f1a\u60f3\u5982\u679c\u5947\u6570\u8f6c\u79fb\u5230\u5076\u6570\u5462\uff1f\u4f1a\u4e0d\u4f1a\u6709\u5f71\u54cd\uff1f\n\n\u7136\u540e\u53d1\u73b0\u8fd9\u7c7b\u8f6c\u79fb\u53ef\u4ee5\u7528\u7b2c\u4e8c\u79cd\u8f6c\u79fb\u7684\u64cd\u4f5c\u6765\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\uff01\n\n\u6240\u4ee5\u6211\u4eecBFS\u7684\u65f6\u5019\u6211\u4eec\u521d\u59cb\u53eapush\u8fdb\u5165\u5076\u6570\u7684\u70b9\u5c31\u53ef\u4ee5\u4e86\uff0c\u7136\u540e\u663e\u7136\u8f6c\u79fb\u4e5f\u53ea\u4f1a\u8f6c\u79fb\u5230\u5076\u6570\u7684\u70b9\uff0c\u6700\u540e\u5728\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\uff01\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ninline int read() {\n\tchar c = getchar(); int x = 0, f = 1;\n\twhile (c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\nconst int N = 200005;\n\nint n, len[N], ch[N][4], tot, lst, par[N], half[N];\nint dp[N]; int ans; char str[N];\n\nint newnode(int d) {\n\tlen[tot] = d; memset(ch[tot], par[tot] = 0, sizeof(ch[tot]));\n\treturn tot++;\n}\nvoid init() {\n\ttot = 0; lst = newnode(-1); lst = newnode(0);\n}\nvoid extend(int c, int pos) {\n\tint p = lst;\n\twhile (str[pos - len[p] - 1] != str[pos]) p = par[p];\n\tif (!ch[p][c]) {\n\t\tint np = newnode(len[p] + 2), q = par[p];\n\t\twhile (str[pos - len[q] - 1] != str[pos]) q = par[q];\n\t\tpar[np] = ch[q][c]; if (!par[np]) par[np] = 1;\n\t\tch[p][c] = np;\n\t\tif (len[np] <= 2) half[np] = par[np];\n\t\telse {\n\t\t\tint hh = half[p];\n\t\t\twhile (str[pos - len[hh] - 1] != str[pos] || (len[hh] + 2 << 1) > len[np]) hh = par[hh];\n\t\t\thalf[np] = ch[hh][c];\n\t\t\tassert((len[half[np]]) << 1 <= len[np]);\n\t\t}\n\t}\n\tlst = ch[p][c];\n}\nvoid BFS() {\n\tqueue<int> que; while (!que.empty()) que.pop();\n\tque.push(1), dp[1] = 1;\n\tfor (int i = 2; i < tot; i++) dp[i] = len[i];\n\twhile (!que.empty()) {\n\t\tint u = que.front(); que.pop();\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tint v = ch[u][i], hf = half[v]; if (!v) continue;\n\t\t\tassert(len[v] % 2 == 0);\n\t\t\tdp[v] = dp[u] + 1, dp[v] = min(dp[v], dp[hf] + 1 + (len[v] >> 1) - len[hf]);\n\t\t\t// printf(\"DP: %d %d\\n\", v, dp[v]);\n\t\t\tans = min(ans, n - len[v] + dp[v]);\n\t\t\tque.push(v);\n\t\t}\n\t}\n}\n\nint main() {\n\tmap<char, int> rev; rev.clear();\n\trev['A'] = 0, rev['C'] = 1, rev['T'] = 2, rev['G'] = 3;\n\tint T = read();\n\twhile (T--) {\n\t\tscanf(\"%s\", str + 1); n = strlen(str + 1);\n\t\tinit(); for (int i = 1; i <= n; i++) extend(rev[str[i]], i);\n\t\tans = n, BFS(); printf(\"%d\\n\", ans);\n\t} \n\treturn 0;\n}\n```\n",
        "postTime": 1593779848,
        "uid": 203968,
        "name": "ConorGallagher23",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4762 \u3010[CERC2014]Virus synthesis\u3011"
    }
]