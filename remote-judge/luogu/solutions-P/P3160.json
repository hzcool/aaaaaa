[
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u5c061~n\\*m\u5206\u522b\u653e\u5165n\\*m\u7684\u683c\u5b50\u77e9\u9635\u91cc\uff0c\u5176\u4e2d\u7684\u4e00\u4e9b\u683c\u5b50\u6709\u7279\u6b8a\u8981\u6c42\uff08\u5468\u56f4\u76848\u4e2a\u683c\u5b50\u90fd\u8981\u6bd4\u5b83\u5927\uff09\uff0c\u95ee\u65b9\u6848\u6570\u3002\n\n\u89e3\u51b3\uff1a\u4ece\u5c0f\u5230\u5927\u653e\u6570\uff0c\u5219\u4e00\u4e2a\u666e\u901a\u683c\u5b50\u53ea\u6709\u7b49\u5b83\u5468\u56f4\u7684\u7279\u6b8a\u683c\u5b50\u90fd\u653e\u5b8c\u6570\u4e86\u624d\u80fd\u653e\u6570\u3002\u5728\u4e0d\u8003\u8651\u672c\u9898\u4e2d\u201c.\u201d\u7684\u683c\u5b50\u4e0d\u80fd\u662f\u84c4\u6c34\u6c60\u7684\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u7a0b\u5f0ff[k][s]=sum{f[k-1][s\u2019]}\u3002\u5176\u4e2dsum\u4e3a\u6c42\u548c\uff0ck\u4e3a\u653e\u5230\u4e86\u7b2c\u51e0\u4e2a\u6570\uff0cs\u4e3a\u84c4\u6c34\u6c60\u7684\u653e\u6570\u72b6\u6001\uff08\u4e8c\u8fdb\u5236\u72b6\u538b\uff09\uff0cs\u2019\u8868\u793a\u7531s\u5c11\u653e\u4e00\u4e2a\u84c4\u6c34\u6c60\u80fd\u8fbe\u5230\u7684\u72b6\u6001\u3002\u6700\u540ef[n\\*m][s\u5168\u653e]\u5373\u4e3a\u89e3\u3002\u672c\u9898n<=4\uff0cm<=7\uff0c\u6700\u591a\u53ea\u67098\u4e2a\u84c4\u6c34\u6c60\uff0c\u6545\u6b64\u89e3\u53ef\u884c\u3002\n\n\u672c\u9898\u7684\u96be\u70b9\u5728\u4e8e\u201c.\u201d\u7684\u683c\u5b50\u4e0d\u80fd\u662f\u84c4\u6c34\u6c60\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u5bb9\u65a5\u539f\u7406\u6765\u89e3\u51b3\u3002\u6211\u4eec\u8bbe\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u53c8\u589e\u52a0\u4e86p\u4e2a\u84c4\u6c34\u6c60\uff0c\u82e5p\u4e3a\u5947\u6570\uff0c\u5219ans\u5e94\u51cf\u53bbf[n\\*m][s\u5168\u653e]\uff0c\u5426\u5219\u4e3a\u52a0\u4e0a\u3002\u7531\u4e8e\u672c\u9898\u5bf9\u4e8e\u84c4\u6c34\u6c60\u7684\u9650\u5236\u5f88\u8db3\uff08\u4e0d\u80fd\u76f8\u90bb\uff09\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u679a\u4e3e\u6b21\u6570\u4e0d\u4f1a\u592a\u591a\uff0c\u8017\u65f6\u4e5f\u4e0d\u5927\u3002\n\n\u72b6\u6001\u538b\u7f29\u8bb0\u5fc6\u5316\u641c\u7d22\u4e5f\u53ef\u4ee5\u5199\u6210\u641c\u7d22\uff08\u5373\u6807\u7a0b\u505a\u6cd5\uff09\uff0c\u6240\u6709\u6d4b\u8bd5\u70b9\u5747\u5728100ms\u5185\u89e3\u51b3\u3002\n\n```cpp\n\n#include <iostream>\nusing namespace std;\n\nconst int maxp = 8;\nconst int maxs = 1 << maxp;\nconst int mod = 12345678;\nconst int maxrow = 4;\nconst int maxcol = 7;\nconst int maxn = maxrow * maxcol + 2;\n\nint n, m, ans;\nint f[maxs][maxn], x[maxp], y[maxp], tp;\nbool use[maxrow][maxcol];\nchar graph[maxrow][maxcol];\n\nvoid init() {\n    scanf(\"%d%d\\n\", &n, &m);\n    for (int i = 0; i < n; ++i)\n        gets(graph[i]);\n}\n\nbool in_range(int x, int y) {\n    return x >= 0 && y >= 0 && x < n && y < m;\n}\n\nint calc() {\n    tp = 0;\n    for (int i = 0; i < n; ++i)\n        for (int j = 0; j < m; ++j)\n            if (graph[i][j] == 'X') x[tp] = i, y[tp++] = j;\n    memset(f, 0, sizeof(f));\n    f[0][0] = 1;\n    for (int s = 0; s < 1 << tp; ++s) {\n        memset(use, 1, sizeof(use));\n        for (int i = 0; i < tp; ++i)\n            if (!(s & (1 << i)))\n                for (int dx = -1; dx <= 1; ++dx)\n                    for (int dy = -1; dy <= 1; ++dy)\n                        if (in_range(x[i] + dx, y[i] + dy)) use[x[i] + dx][y[i] + dy] = 0;\n        \n        int cnt = 0;\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < m; ++j)\n                if (use[i][j]) ++cnt;\n\n        for (int i = 0; i <= cnt; ++i)\n            if (f[s][i]) {\n                f[s][i + 1] = (f[s][i + 1] + f[s][i] * (cnt - i)) % mod;\n                for (int j = 0; j < tp; ++j)\n                    if (!(s & (1 << j))) f[s | (1 << j)][i + 1] = (f[s | (1 << j)][i + 1] + f[s][i]) % mod;\n            }\n    }\n    return f[(1 << tp) - 1][n * m];\n}\n\nvoid search(int x, int y, int k) {\n    if (x >= n) ans = (ans + k * calc()) % mod;\n    else if (y >= m) search(x + 1, 0, k);\n    else {\n        search(x, y + 1, k);\n        bool ok = 1;\n        for (int dx = -1; dx <= 1; ++dx)\n            for (int dy = -1; dy <= 1; ++dy)\n                if (in_range(x + dx, y + dy) && graph[x + dx][y + dy] == 'X')\n                    ok = 0;\n        if (ok) {\n            graph[x][y] = 'X';\n            search(x, y + 1, -k);\n            graph[x][y] = '.';\n        }\n    }\n}\n\nint solve() {\n    for (int i = 0; i < n; ++i)\n        for (int j = 0; j < m; ++j)\n            if (graph[i][j] == 'X')\n                for (int dx = -1; dx <= 1; ++dx)\n                    for (int dy = -1; dy <= 1; ++dy)\n                        if ((dx || dy) && in_range(i + dx, j + dy) && graph[i + dx][j + dy] == 'X')\n                            return 0;\n    ans = 0;\n    search(0, 0, 1);\n    return (ans + mod) % mod;\n}\n\nint main() {\n    freopen(\"mon.in\", \"r\", stdin);\n    freopen(\"mon.out\", \"w\", stdout);\n\n    init();\n    printf(\"%d\\n\", solve());\n    \n    return 0;\n}\n\n\n```\n[/cdec]\n",
        "postTime": 1381156624,
        "uid": 1,
        "name": "kkksc03",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1763 \u3010\u84c4\u6c34\u6c60\u3011"
    },
    {
        "content": "\u6b64\u9898\u7684\u7ec6\u8282\u5341\u5206\u7e41\u6742\uff08\u4e0d\u7136\u600e\u80fd\u662f\u9ed1\u9898\uff09\uff0c\u800c\u4e24\u7bc7\u9898\u89e3\u4f3c\u4e4e\u90fd\u6709\u4e9b\u7701\u6f0f\u548c\u4e0d\u4e25\u8c28\u4e4b\u5904\uff0c\u4f7f\u65b0\u4eba\u96be\u4ee5\u770b\u61c2\u3002\u6545\u5728\u6b64\u8be6\u7ec6\u89e3\u91ca\u4e00\u4e0b\uff0c\u65b9\u4fbf\u8bf8\u4f4d\u7406\u89e3\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u6c34\u6c60\u7684\u9650\u5236\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u5730\u586b\u5165\u6570\u5b57\u3002\u6211\u4eec\u8003\u8651\u7528$dp[i][S]$\u8868\u793a\u5df2\u7ecf\u586b\u5230\u4e86\u6570\u5b57i\uff0c\u4e14\u76ee\u524d\u5df2\u7ecf\u586b\u5165\u6570\u5b57\u7684\u6c34\u6c60\u6240\u6784\u6210\u7684\u96c6\u5408\u4e3a$S$\u65f6\uff0c\u7b26\u5408\u8981\u6c42\u7684\u65b9\u6848\u6570\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6bcf\u4e00\u6b21\u586b\u5165\u6570\u5b57\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\n- \u5f53\u524d\u6570\u5b57\u586b\u5165\u4e00\u4e2a\u975e\u6c34\u6c60\u70b9\u3002  \n\n\u6b64\u65f6\u6709$dp[i][S]=dp[i-1][S]*\\max(able[S]-i+1,0)$\uff0c\u5176\u4e2dable[S]\u8868\u793a**\u5df2\u7ecf\u5728\u96c6\u5408S\u4e2d\u7684\u70b9**\u4e0e**\u53ef\u4ee5\u653e\u7f6e\u6570\u5b57\u800c\u4e0d\u4f1a\u4f7f\u5468\u56f4\u7684\u6c34\u6c60\u70b9\u4e0d\u518d\u6ee1\u8db3\u6761\u4ef6\u7684\u975e\u6c34\u6c60\u70b9**\u7684\u603b\u6570\u91cf\u3002\u81f3\u4e8e\u4e3a\u4f55able\u8981\u5305\u542b\u5df2\u7ecf\u5728S\u4e2d\u7684\u70b9\uff0c\u662f\u7531\u4e8e\u5982\u4e0b\u7406\u7531\uff1a\n\n\u6211\u4eec\u5728\u8f6c\u79fb\u72b6\u6001\u65f6\uff0c\u5e76\u4e0d\u77e5\u9053\u524d\u9762i-1\u4e2a\u6570\u6709\u591a\u5c11\u5360\u636e\u4e86\u975e\u6c34\u6c60\u70b9\u3002\u5982\u679c\u6211\u4eec\u7684able\u6570\u7ec4\u4e0d\u5305\u542bS\u4e2d\u7684\u70b9\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8ba1\u7b97S\u7684\u5927\u5c0f\u6765\u7b97\u51fa\u5f53\u524d\u53ef\u4ee5\u653e\u7f6e\u7b2ci\u4e2a\u6570\u7684\u4e2a\u6570\uff1a$able[S]-(i-1-|S|)$\uff08\u56e0\u4e3a\u524d\u9762i-1\u4e2a\u70b9\u6709|S|\u4e2a\u662f\u6c34\u6c60\u70b9\uff0c\u6545\u6709i-1-|S|\u4e2a\u6570\u5360\u636e\u4e86\u975e\u6c34\u6c60\u70b9\u3002\u90a3\u73b0\u5728\u80fd\u7528\u7684\u5c31\u662f\u4e0a\u9762\u90a3\u4e2a\u67ff\u5b50\uff09\u3002\u8fd9\u65e0\u7591\u975e\u5e38\u9ebb\u70e6\u3002  \n\n\u800c\u5982\u679cable[S]\u5305\u542bS\u4e2d\u7684\u70b9\uff0c\u524d\u540e\u4e24\u4e2a|S|\u5c31\u80fd\u591f\u88ab\u62b5\u6d88\u3002\u4ece\u800c\u73b0\u5728\u80fd\u653e\u7b2ci\u4e2a\u6570\u7684\u975e\u6c34\u6c60\u70b9\u6709$\\max(able[S]-i+1,0)$\u4e2a\uff08\u56e0\u4e3a\u53ef\u80fd\u4e0d\u591f\u7528\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u9884\u5904\u7406\u6570\u7ec4able\u3002\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u975e\u6c34\u6c60\u70b9\uff0c\u5982\u679c\u5b83\u5468\u56f4\u6709\u6ca1\u653e\u6570\u7684\u6c34\u6c60\u70b9\uff0c\u90a3\u4e48\u663e\u7136\u8fd9\u91cc\u662f\u4e0d\u53ef\u4ee5\u653e\u6570\u7684\u3002\u5426\u5219\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u4ece\u5c0f\u5230\u5927\u653e\u6570\uff0c\u4ee5\u540e\u653e\u5728\u6c34\u6c60\u70b9\u4e2d\u7684\u6570\u5c06\u4f1a\u5927\u4e8e\u8fd9\u4e2a\u975e\u6c34\u6c60\u70b9\u7684\u6570\uff0c\u4e0e\u7ea6\u675f\u6761\u4ef6\u4e0d\u7b26\u3002\n\n\u90a3\u4e48\u6211\u4eec\u679a\u4e3e\u4e0d\u5728S\u4e2d\u7684\u6c34\u6c60\u70b9\uff08\u6ca1\u6709\u653e\u8fc7\u6570\u7684\uff09\uff0c\u5411\u56db\u5468\u6269\u5c55\uff08\u5b83\u56db\u5468\u7684\u70b9\u80af\u5b9a\u90fd\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff09\u3002\u5047\u8bbe\u4e0d\u5728S\u4e2d\u7684\u6c34\u6c60\u70b9\u548c\u4e0d\u6ee1\u8db3\u8981\u6c42\u7684\u975e\u6c34\u6c60\u70b9\u5171\u6709used\u4e2a\uff0c\u5373\u6709$able[S]=n*m-used$\u3002\u53c2\u89c1\u4ee3\u7801\u3002\u6ce8\u610f\u9700\u8981\u5f00vis\u6570\u7ec4\u907f\u514d\u91cd\u590d\u8ba1\u6570\u3002\n\n- \u5f53\u524d\u6570\u5b57\u586b\u5165\u4e00\u4e2a\u6c34\u6c60\u70b9\u3002\n\n\u6b64\u65f6\u662f\u663e\u7136\u7684\u3002\u679a\u4e3e\u4e0d\u5728S\u4e2d\u7684\u6c34\u6c60\u70b9j\uff0c\u6267\u884c$dp[i][S+\\{j\\}]+=dp[i-1][S]$\u5373\u53ef\u3002\n\n\u7531\u4e8e$|S|$\u4f1a\u975e\u5e38\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u72b6\u6001\u538b\u7f29\u6765\u5b8c\u6210\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f$dp[n*m][2^{cnt}-1]$\u3002cnt\u4e3a\u6c34\u6c60\u70b9\u4e2a\u6570\u3002\n\n~~WA~~\n\n\u8003\u8651\u9650\u52362\u3002\u6211\u4eec\u7684$dp$\u503c\u5176\u5b9e\u6709\u53ef\u80fd\u5728\u968f\u610f\u586b\u6570\u7684\u8fc7\u7a0b\u4e2d\uff0c\u628a\u4e00\u4e9b\u975e\u6c34\u6c60\u70b9\u586b\u6210\u4e86\u6ee1\u8db3\u6c34\u6c60\u70b9\u6761\u4ef6\u7684\u70b9\u3002\n\n\u5229\u7528\u5bb9\u65a5\u539f\u7406\u3002\u8bbe$Ans[k][map]$\u4e3a\u6709k\u4e2a\u6c34\u6c60\u70b9\uff0c\u70b9\u7684\u5206\u5e03\u72b6\u6001\u4e3amap\u7684\u7b54\u6848\uff0c\u5219\u6700\u7ec8\u7b54\u6848\u4e3a\uff1a\n$$Ans[k][map_0]-\\sum\\limits_{\\text{\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684map}}Ans[k+1][map]+\\sum\\limits_{\\text{\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684map}}Ans[k+2][map]-......$$\n\n$map$\u6ee1\u8db3\u6761\u4ef6\u662f\u6307\uff1a\u6709\u7b26\u5408\u6570\u91cf\u7684\u6c34\u6c60\u70b9\uff0c\u4e14\u521d\u59cb\u72b6\u6001$map_0$\u4e2d\u7684\u6c34\u6c60\u70b9\u5728$map$\u4e2d\u4e5f\u662f\u6c34\u6c60\u70b9\u3002\n\n\u600e\u6837\u679a\u4e3e\u6ee1\u8db3\u6761\u4ef6\u7684map\u5462\uff1f\n\nDFS\uff01\n\n\u987a\u5e8f\u679a\u4e3e\u6bcf\u4e00\u6b21\u65b0\u52a0\u8fdb\u53bb\u7684\u6c34\u6c60\u70b9\uff0c\u7528op\u6765\u5207\u6362+\u548c-\u3002\n\n\u6ce8\u610f\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7528$islow[i][j]$\u6765\u8868\u793amap\u3002\n\n\u4ee3\u7801\u6709\u4e00\u5b9a\u5361\u5e38\u56e0\u7d20\u3002\u4e3a\u65b9\u4fbf\u5bf9\u62cd\uff0c\u6ca1\u6709\u53cd\u4f5c\u5f0a\u6807\u5fd7\uff08\u9ed1\u9898\u4e5f\u6ca1\u4eba\u6562\u6284\u9898\u89e3\u5427\uff09\u3002\n\n\u6ce8\u610f\u9650\u52361\u9700\u8981\u7279\u5224\uff01\n## code\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n#define reg register\ninline void work();\nint main(){\n    work();\n    return 0;\n}\n//End of MAIN\nconst int mod=12345678,dx[]={-1,0,1,0,-1,1,-1,1},dy[]={0,-1,0,1,-1,-1,1,1};//\u65b9\u5411\u6570\u7ec4\nint n,m,cnt,ans,islow[10][10],vis[10][10],able[1<<10],dp[30][1<<10];\nstruct Node{int x,y;}pnt[10];\ninline int calc(){\n    cnt=0,\n    memset(dp,0,sizeof dp),dp[0][0]=1,\n    memset(vis,0,sizeof vis);\n    for(reg int i=1;i<=n;++i)\n        for(reg int j=1;j<=m;++j)\n            islow[i][j]&&(pnt[++cnt]=Node{i,j},0);\n    for(reg int i=0,used;i<(1<<cnt);++i){\n        memset(vis,0,sizeof vis),used=0;\n        for(reg int j=1;j<=cnt;++j)\n            if(!(i&(1<<j-1))){\n                vis[pnt[j].x][pnt[j].y]||(vis[pnt[j].x][pnt[j].y]=1,++used);\n                for(reg int dir=0,x1,y1;dir<8;++dir)\n                    x1=pnt[j].x+dx[dir],y1=pnt[j].y+dy[dir],\n                    x1>0&&x1<=n&&y1>0&&y1<=m&&!vis[x1][y1]&&(vis[x1][y1]=1,++used);\n            }\n        able[i]=n*m-used;\n    }\n    for(reg int i=1;i<=n*m;++i)\n        for(reg int j=0;j<(1<<cnt);++j){\n            dp[i][j]+=dp[i-1][j]*max(able[j]-i+1,0)%mod,dp[i][j]%=mod;\n            for(reg int k=1;k<=cnt;++k)\n                (j&(1<<k-1))||((dp[i][j|1<<k-1]+=dp[i-1][j])%=mod);\n        }\n    return dp[n*m][(1<<cnt)-1];\n}\nvoid dfs(int x,int y,int op){\n    if(x>n){(ans+=op*calc())%=mod;return;}\n    if(y>m){dfs(x+1,1,op);return;}\n    dfs(x,y+1,op);\n    if(!islow[x][y]){\n        reg bool fl=0;\n        for(reg int dir=0,x1,y1;dir<8;++dir)\n            x1=x+dx[dir],y1=y+dy[dir],islow[x1][y1]&&(fl=1,dir=8);\n        fl||(islow[x][y]=1,dfs(x,y+1,-op),islow[x][y]=0);\n    }\n}\ninline void work(){\n    char str[10];\n    scanf(\"%d%d\",&n,&m);\n    for(reg int i=1;i<=n;++i){\n        scanf(\"%s\",str+1);\n        for(reg int j=1;j<=m;++j)\n            islow[i][j]=str[j]=='X';\n    }\n    for(reg int i=1;i<=n;++i)\n        for(reg int j=1;j<=m;++j)\n            islow[i][j]&&(islow[i-1][j]||islow[i][j-1])&&(puts(\"0\"),exit(0),0);\n    dfs(1,1,1);\n    printf(\"%d\",(ans%mod+mod)%mod);\n}\n```\n\u70b9\u8d5e\u662f\u4e00\u79cd\u7f8e\u5fb7\uff01",
        "postTime": 1581408919,
        "uid": 75765,
        "name": "Starlight237",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1763 \u3010\u84c4\u6c34\u6c60\u3011"
    },
    {
        "content": "\u8fd9\u9898\u592a\u96be\u4e86...\u770b\u4e8630\u7bc7\u9898\u89e3\u624d\u6574\u660e\u767d\u5230\u5e95\u548b\u56de\u4e8b...\n\n\u6838\u5fc3\u601d\u60f3\uff1a\u72b6\u538bdp+\u641c\u7d22+\u5bb9\u65a5\n\n\u9996\u5148\u6211\u4eec\u5206\u6790\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a4*7\u7684\u68cb\u76d8\uff0c\u4f4e\u70b9\u7684\u4e2a\u6570\u81f3\u591a\u53ea\u67098\u4e2a\uff08\u53ef\u4ee5\u6570\u4e00\u6570\uff09\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e2a\u72b6\u538b\uff0c\u628a\u6240\u6709\u7684\u4f4e\u70b9\u538b\u8fdb\u6765\n\n\u7136\u540e\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6240\u6709\u6570\uff0c\u8f6c\u79fb\u5373\u53ef\n\n\u8bb0\u72b6\u6001f[i][j]\u8868\u793a\u5230\u4e86\u7b2ci\u4e2a\u6570\uff0c\u4f4e\u70b9\u7684\u72b6\u6001\u4e3aj\u7684\u65b9\u6848\u6570\n\n\u90a3\u4e48\u5728\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u6709\u4e24\u4e2a\u8f6c\u79fb\u65b9\u5411\uff1a\n\n\u2460.\u5982\u679c\u7b2ci\u4e2a\u6570\u653e\u5728\u4f4e\u70b9\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u4f4e\u70b9k\uff0c\u5982\u679c\u4f4e\u70b9\u6ca1\u6709\u5728\u72b6\u6001\u91cc\uff0c\u6709\uff1a\n\ndp[i][j|(1<<k)]+=dp[i-1][j]\n\n\u2461.\u5982\u679c\u7b2ci\u4e2a\u6570\u653e\u5728\u9ad8\u70b9\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u4ee5\u4f7f\u7528\u7684\u9ad8\u70b9\uff0c\u6240\u8c13\u53ef\u4ee5\u4f7f\u7528\u7684\u9ad8\u70b9\u5c31\u662f\u6307\u7684\u67d0\u4e00\u9ad8\u70b9\u5468\u56f4\u6ca1\u6709\u672a\u4f7f\u7528\u7684\u4f4e\u70b9\uff08\u539f\u56e0\uff1a\u6211\u662f\u4ece\u5c0f\u5f80\u5927\u679a\u4e3e\u7684\u6240\u6709\u6570\uff0c\u5982\u679c\u6211\u5728\u4e00\u4e2a\u9ad8\u70b9\u4e0a\u653e\u4e86\u4e00\u4e2a\u6570\u800c\u4ed6\u9644\u8fd1\u5374\u6709\u4f4e\u70b9\u6ca1\u6709\u653e\u4e0a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f4e\u70b9\u4f1a\u53d8\u5f97\u6bd4\u8fd9\u4e2a\u9ad8\u70b9\u9ad8\uff0c\u8fd9\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u4e86\u3002\uff09\n\n\u4f46\u662f\u5982\u679c\u6bcf\u6b21\u90fd\u679a\u4e3e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4f1a\u7206\u70b8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u4e00\u4e2a\u9884\u5904\u7406num[i]\uff0c\u8868\u793ai\u72b6\u6001\u4e0b\u6709\u591a\u5c11\u4e2a\u9ad8\u70b9\u53ef\u4ee5\u4f7f\u7528\n\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662fdp[n*m][1<<cnt-1]\n\n\u53ef\u662f\u8fd9\u4e2a\u7b54\u6848\u662f\u6b63\u786e\u7684\u5417\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u8fd9\u4e48\u679a\u4e3e\uff0c\u5f88\u5bb9\u6613\u51fa\u73b0\u4e00\u79cd\u60c5\u51b5\uff1a\u67d0\u4e2a\u70b9\u672c\u6765\u662f\u9ad8\u70b9\uff0c\u4f46\u662f\u7531\u4e8e\u968f\u610f\u7684\u653e\u7f6e\u4f7f\u5f97\u8fd9\u4e2a\u70b9\u53d8\u6210\u4e86\u4f4e\u70b9\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u89e3\u51b3\u6389\u8fd9\u4e2a\u95ee\u9898\n\n\u600e\u4e48\u89e3\u51b3\uff1f\n\n\u5f88\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u6c42\u51fa\u628a\u6bcf\u4e2a\u53ef\u80fd\u88ab\u653e\u9519\u7684\u9ad8\u70b9\u771f\u6b63\u4f5c\u4e3a\u4f4e\u70b9\u7684\u65b9\u6848\u6570\uff0c\u7136\u540e\u7528\u603b\u65b9\u6848\u6570\u51cf\u6389\u8fd9\u4e2a\u65b9\u6848\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u53ef\u662f\uff0c\u5982\u679c\u6211\u4eec\u5206\u522b\u53bb\u51cf\uff0c\u7531\u4e8e\u51cf\u7684\u65b9\u6848\u6570\u8fd8\u8981\u50cf\u4e0a\u9762\u90a3\u6837dp\u51fa\u6765\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u66f4\u591a\u7684\u91cd\u590d\uff08\u5373\u9ad8\u70b91\u548c\u9ad8\u70b92\u540c\u65f6\u653e\u9519\uff09\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5229\u7528\u5bb9\u65a5\uff0c\u5373\n\n0\u4e2a\u9ad8\u70b9\u53cd\u8f6c-1\u4e2a\u9ad8\u70b9\u53cd\u8f6c+2\u4e2a\u9ad8\u70b9\u53cd\u8f6c....\n\n\uff08\u53cd\u8f6c\u6307\u53cd\u8f6c\u72b6\u6001\uff09\n\n\u90a3\u4e48\u600e\u4e48\u53cd\u8f6c\uff1f\n\ndfs\uff01\n\n\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <stack>\n#define ll long long\n#define mode 12345678\nusing namespace std;\nbool used[10][10];\nbool maps[10][10];\nint n,m;\nll dp[30][(1<<8)+5];\nchar ch[10];\nint dir[10][2]={{0,0},{1,1},{1,0},{1,-1},{0,1},{0,-1},{-1,1},{-1,0},{-1,-1}};\nint temp[30][2];\nint num[(1<<8)+5];\nll ans=0;\nbool check(int x,int y)\n{\n    if(x>0&&x<=n&&y>0&&y<=m)\n    {\n        return 1;\n    }\n    return 0;\n}\nll get_dp()\n{\n    int cnt=0;\n    memset(dp,0,sizeof(dp));\n    memset(used,0,sizeof(used));\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            if(maps[i][j])\n            {\n                used[i][j]=1;\n                temp[++cnt][0]=i;\n                temp[cnt][1]=j;\n            }\n        }\n    }\n    for(int i=0;i<=(1<<cnt)-1;i++)\n    {\n        int tot=0;\n        memset(used,0,sizeof(used));\n        for(int j=1;j<=cnt;j++)\n        {\n            if(!((1<<(j-1))&i))\n            {\n                if(!used[temp[j][0]][temp[j][1]])\n                {\n                    used[temp[j][0]][temp[j][1]]=1;\n                    tot++;\n                }\n                for(int t=1;t<=8;t++)\n                {\n                    int x=temp[j][0]+dir[t][0];\n                    int y=temp[j][1]+dir[t][1];\n                    if(check(x,y)&&!used[x][y])\n                    {\n                        used[x][y]=1;\n                        tot++;\n                    }\n                }\n            }\n        }\n        num[i]=n*m-tot;\n    }\n    dp[0][0]=1;\n    for(int i=1;i<=n*m;i++)\n    {\n        for(int j=0;j<=(1<<cnt)-1;j++)\n        {\n            dp[i][j]+=dp[i-1][j]*max(num[j]-i+1,0)%mode;\n            dp[i][j]%=mode;\n            for(int k=1;k<=cnt;k++)\n            {\n                if(!((1<<(k-1))&j))\n                {\n                    dp[i][j|(1<<(k-1))]+=dp[i-1][j];\n                    dp[i][j|(1<<(k-1))]%=mode;\n                }\n            }\n        }\n    }\n    return dp[n*m][(1<<cnt)-1];\n}\nvoid dfs(int x,int y,int typ)\n{\n    if(x==n+1)\n    {\n        if(typ%2)\n        {\n            ans-=get_dp();\n            ans%=mode;\n        }else\n        {\n            ans+=get_dp();\n            ans%=mode;\n        }\n        return;\n    }\n    if(y==m+1)\n    {\n        dfs(x+1,1,typ);\n        return;\n    }\n    dfs(x,y+1,typ);\n    if(!maps[x][y])\n    {\n        bool flag=0;\n        for(int i=1;i<=8;i++)\n        {\n            int st=x+dir[i][0];\n            int ed=y+dir[i][1];\n            if(maps[st][ed])\n            {\n                flag=1;\n                break;\n            }\n        }\n        if(!flag)\n        {\n            maps[x][y]=1;\n            dfs(x,y+1,typ+1);\n            maps[x][y]=0;\n            return;\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%s\",ch);\n        for(int j=0;j<m;j++)\n        {\n            if(ch[j]=='.')\n            {\n                maps[i][j+1]=0;\n            }else\n            {\n                maps[i][j+1]=1;\n            }\n        }\n    }\n    dfs(1,1,0);\n    printf(\"%lld\\n\",(ans%mode+mode)%mode);\n    return 0;\n} \n```",
        "postTime": 1534492708,
        "uid": 66905,
        "name": "leozhang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3160 \u3010[CQOI2012]\u5c40\u90e8\u6781\u5c0f\u503c\u3011"
    },
    {
        "content": "[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P3160)  \n\n### Problem.\n\u6709\u8fd9\u6837\u4e00\u4e2a\u5730\u56fe\uff0c\u4f60\u9700\u8981\u7edf\u8ba1\u6ee1\u8db3\u6761\u4ef6\u7684\u5730\u56fe\u9ad8\u5ea6\u65b9\u6848\u6570\u3002  \n\u5730\u56fe\u9ad8\u5ea6\u4ece$1$~$n\\times m$\uff0c\u7136\u540e\u6709\u4e00\u4e9b\u9650\u5236\u6761\u4ef6\uff0c\u8868\u793a\u4e3a\u4e00\u4e2a\u70b9\u7684\u6570\u503c\u6bd4\u548c\u5b83\u56db\u5468\u516b\u4e2a\u683c\u5b50\u5c0f\u3002  \n\u8fd8\u6709\u9898\u76ee\u4e2d\u7684\u90a3\u4e24\u4e2a\u8865\u6ce8\u6761\u4ef6\u633a\u91cd\u8981\u7684\u3002  \n### Solution.\n\u6211\u4eec\u9996\u5148\u5148\u8003\u8651\u4e0d\u7ba1\u4e24\u4e2a\u6ce8\u91ca\u3002  \n\n\u90a3\u4e48\u5c31\u662f\u4e00\u4e2adp\u95ee\u9898\u3002  \n\u72b6\u6001\uff1a\u5f53\u524d\u8fd9\u4e00\u884c\u662f\u600e\u4e48\u653e\u7684\u3002  \n\u7136\u540e\u8fd8\u9700\u8981\u5f00\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\u3002  \n\u56e0\u4e3a\u4e00\u884c\u7684\u72b6\u6001\u4e4b\u548c\u4e0a\u4e00\u884c\u6709\u5173\uff0c\u6240\u4ee5\u8fd9\u4e2a\u72b6\u6001\u8bbe\u8ba1\u5177\u6709\u65e0\u540e\u6548\u6027\u3002  \n\u6240\u4ee5\u5b83\u662f\u53ef\u4ee5dp\u7684\u3002  \n\u5177\u4f53dp\u8fc7\u7a0b\u770b\u4ee3\u7801\u3002  \n\n\u7136\u540e\u5462\uff0c\u6211\u4eec\u8003\u8651\u52a0\u4e0a\u7b2c\u4e8c\u4e2a\u6ce8\u91ca\u3002  \n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u88f8\u7684\u5bb9\u65a5\u65b9\u6cd5\u3002  \n\u5047\u8bbe\u8bfb\u5165\u6709$k$\u4e2a\u84c4\u6c34\u6c60\u3002  \n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7b54\u6848\u4e3a$k$\u4e2a\u84c4\u6c34\u6c60\u7684\u7b54\u6848-$k+1$\u4e2a\u84c4\u6c34\u6c60\u7684\u7b54\u6848+$k+2$...  \n\u4f46\u662f\u6211\u4eec\u600e\u4e48\u7b97$k+1$\u4e2a\u84c4\u6c34\u6c60\u7684\u7b54\u6848\u5462\uff1f  \n\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u8ba1\u7b97\uff0c\u91cd\u65b0dp\u4e00\u6b21\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002  \n\n\u7136\u540e\u5462\uff0c\u6211\u4eec\u8003\u8651\u52a0\u4e0a\u7b2c\u4e00\u4e2a\u6ce8\u91ca\u3002  \n\u6211\u4eec\u53d1\u73b0\uff0c\u7b2c\u4e00\u4e2a\u6ce8\u91ca\u5176\u5b9e\u5c31\u662f\u4e00\u70b9\u7279\u5224\u7684\u4e8b\u60c5\u3002  \n\u53ea\u8981\u521a\u5f00\u59cb\u65f6\u7279\u5224\u6709\u6ca1\u6709\u84c4\u6c34\u6c60\u76f8\u90bb\u5c31\u597d\u4e86\u3002  \n### Coding\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int P=12345678,dx[]={-1,0,1,0,-1,1,-1,1,0},dy[]={0,-1,0,1,-1,-1,1,1,0};//P\u662f\u6a21\u6570\uff0cdx\u548cdy\u8868\u793a\nint n,m,cnt,x[35],y[35],mp[15][15],vis[15][15],f[35][265],te[515];char a[15];\ninline int bs(int x) {return x>0?x:-x;}//\u7edd\u5bf9\u503c\ninline int dp()//dp\u7684\u8fc7\u7a0b\n{\n\tmemset(f,0,sizeof(f)),f[0][0]=1;//f\u662fdp\u503c\n\tfor(int i=0;i<(1<<cnt);i++)//\u679a\u4e3e\u96c6\u5408\u3002\n\t{\n\t\tte[i]=n*m,memset(vis,0,sizeof(vis));//vis\u8868\u793a\u73b0\u5728\u662f\u5426\u7528\u4e86\u5f53\u524d\u503c\u3002\n\t\tfor(int j=0;j<cnt;j++) if((i&(1<<j))==0) for(int k=0;k<=8;k++) vis[x[j]+dx[k]][y[j]+dy[k]]=1;//\u628a\u90a3\u4e9b\u4f1a\u7528\u5230\u7684\u4e1c\u897f\u8bb0\u4e0b\u6765\n\t\tfor(int j=1;j<=n;j++) for(int k=1;k<=m;k++) if(vis[j][k]) te[i]--;//\u8868\u793a\u80fd\u5411\u591a\u5c11\u4e2a\u8f6c\u79fb\n\t}\n\tfor(int i=1;i<=n*m;i++)\n\t\tfor(int j=0;j<(1<<cnt);j++)\n\t\t{\n\t\t\tif(te[j]-i+1>0) f[i][j]+=f[i-1][j]*(te[j]-i+1),f[i][j]%=P;//\u6b63\u5f0f\u8f6c\u79fb\uff0c\u7528\u5230\u4e86\u4e0a\u9762\u7684te\n\t\t\tfor(int k=0;k<cnt;k++) if((1<<k)&j) f[i][j]+=f[i-1][j^(1<<k)],f[i][j]%=P;\n\t\t}\n\treturn f[n*m][(1<<cnt)-1];//\u8fd4\u56de\u7b54\u6848\u3002\n}\ninline int dfs(int xx,int yy)\n{\n\tint ans;if(yy==m+1) xx++,yy=1;if(xx==n+1) return dp();ans=dfs(xx,yy+1);//\u8fb9\u754c\u5904\u7406\uff08\u7136\u540e\u6709\u70b9\u538b\u884c\n\tfor(int i=0;i<9;i++) if(mp[xx+dx[i]][yy+dy[i]]) return ans;//\u5982\u679c\u8fd9\u91cc\u662f\u5df2\u7ecf\u662f\u84c4\u6c34\u6c60\uff0c\u6216\u8005\u5468\u56f4\u6709\u84c4\u6c34\u6c60\uff0c\u5c31\u8fd4\u56de\u3002\n\treturn x[cnt]=xx,y[cnt++]=yy,mp[xx][yy]=1,(ans+=P-dfs(xx,yy+1))%=P,mp[xx][yy]=0,cnt--,ans;\n\t//\u9996\u5148\u5148\u52a0\u4e0a\u5f53\u524d\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u84c4\u6c34\u6c60\uff0c\u8bb0\u5f55\u4e3a\u84c4\u6c34\u6c60\n   //\u7136\u540edfs\uff0c\u7b54\u6848\u52a0\u4e0adfs\u6307\n   //\u7136\u540e\u56de\u6eaf\u3002\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m),memset(mp,0,sizeof(mp));//\u6e05\u96f6\u6570\u7ec4\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%s\",a+1);\n\t\tfor(int j=1;j<=m;j++) if(a[j]=='X') mp[i][j]=1,x[cnt]=i,y[cnt++]=j;\n\t}//\u8bfb\u5165\n\tfor(int i=0;i<cnt;i++) for(int j=0;j<i;j++) if(bs(x[i]-x[j])<2&&bs(y[i]-y[j])<2) return puts(\"0\"),0;//\u7279\u5224\u7b2c\u4e00\u4e2a\u6ce8\u91ca\u3002\n\treturn cnt?printf(\"%d\\n\",dfs(1,1)):puts(\"0\"),0;//\u5b8c\u7f8e\u7ed3\u675f\u3002\n}\n```\n\u5b8c\u7ed3\u6492\u82b1\uff0c~~\u65e0\u803b\u6c42\u8d5e~~",
        "postTime": 1580569392,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P1763\u84c4\u6c34\u6c60\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u5b58\u4e0b\u6765\u6bcf\u4e2a\u5751\uff08\u6781\u5c0f\u503c\u70b9\uff09\u7684\u4f4d\u7f6e\uff0c\u4ee5\u8fd9\u4e2a\u5e8f\u53f7\u8fdb\u884c\u72b6\u6001\u538b\u7f29\u3002\n\n\u663e\u7136\uff0c$4*7$\u7684\u6570\u636e\u8303\u56f4\u8ba9\u6781\u5c0f\u503c\u70b9\u57288\u4e2a\u4ee5\u5185\uff08\u4ee5\u4e0b\u793a\u610f\uff09\n\n>X . X . X . X . \n\n>.&ensp;.&ensp;.&ensp;.&ensp;.&ensp;.&ensp;.&ensp;. \n\n>X . X . X . X .\n\n>.&ensp;.&ensp;.&ensp;.&ensp;.&ensp;.&ensp;.&ensp;. \n\n\u6240\u4ee5\u8003\u8651\u7528$S$\u8868\u793a\u5404\u4e2a\u6781\u5c0f\u503c\u70b9\u662f\u5426\u5df2\u586b\u7684\u72b6\u6001\uff0c\u679a\u4e3e$1-n*m$\u8fdb\u884c\u72b6\u538b$DP$\u3002\n\n\u5f53\u524d\u586b\u7684\u6570\u6709\u4e24\u79cd\u9009\u62e9\uff1a\n\n\uff08$1$\uff09\u586b\u5165\u5751\u4e2d\uff0c\u8fd9\u6837\u679a\u4e3e$S$\u72b6\u6001\u8868\u793a\u7684\u6bcf\u4e00\u4e2a\u5df2\u586b\u7684\u5751\uff0c$f[i][S]+=$$\\sum_{k|((1<<k)\\&S==0)}^{} {f[i-1][S-(1<<k)]}$\uff08$k$\u8868\u793a\u7b2c$k$\u4e2a\u5751\u662f\u6ca1\u586b\u8fc7\u7684\uff09\uff08\u8fd9\u6b65\u7684\u610f\u601d\u662f\uff1a$S-(1<<k)$\u8fd9\u4e2a\u72b6\u6001\u6ca1\u6709\u586b$k$\u4f4d\u7f6e\u7684\u5751\uff0c\u6211\u73b0\u5728$i$\u8981\u586b\u8fd9\u4e2a\u5751\u7684\u79cd\u7c7b\u6570\u5c31\u662f$f[i-1][S-(1<<k)]$\uff09\n\n\uff08$2$\uff09\u4e0d\u586b\u5165\u5751\u4e2d\uff0c\u8fd9\u6837\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u53ef\u4ee5\u586b\uff08\u6307\u5982\u679c\u6709\u5751\u8fd8\u6ca1\u586b\uff0c\u90a3\u4e48\u4ed6\u65c1\u8fb9\u4ee5\u53ca\u4ed6\u672c\u8eab\u5171$9$\u4e2a\u683c\u90fd\u4e0d\u80fd\u586b\u4e1c\u897f\uff0c\u5426\u5219\u8fd9\u4e2a\u5751\u7ee7\u7eed\u5f80\u540e\u586b\u586b\u4e0d\u6210\u6781\u5c0f\u503c\uff09\uff0c\u90a3\u4e48\u5c31\u662f\u4e00\u79cd\u65b0\u7684\u586b\u6cd5\uff0c\u6570\u51fa\u6765$tot$\u79cd\u586b\u6cd5\uff0c\u90a3\u4e48$dp[i][S]+=dp[i-1][S]*(tot-i+1)$\u3002\u7136\u540e\u53d1\u73b0\u679a\u4e3e\u4e0d\u662f\u5f88\u597d\uff0c\u53ef\u4ee5\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684$tot$\uff08\u4ee3\u7801\u4e2d\u7528$hi[S]$\u8868\u793a\uff09\u3002\n\n\u7136\u540e\u7b54\u6848\u5c31\u662f$f[m*n][(1<<num)-1]$\u3002\uff08$num$\u4ee3\u8868\u5751\u7684\u4e2a\u6570\uff09\n\n\u7136\u540e\u56e0\u4e3a\u662f\u80e1\u4e71\u586b\u6570\uff0c\u4e8e\u662f\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u5e94\u8be5\u662f\u5751\u7684\u5730\u65b9\u53d8\u6210\u5751\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u5c31\u5728\u6bcf\u4e2a\u53ef\u80fd\u51fa\u73b0\u5751\u7684\u5730\u65b9\u5206\u522b\u65b0\u52a0\u4e00\u4e2a\u5751\u8fdb\u884c$DP$\uff0c\u5b8c\u4e86\u518d\u51cf\u53bb\u3002\u800c\u8fd9\u4e2a$DP$\u53c8\u5e26\u6765\u65b0\u7684\u53ef\u80fd\u586b\u7684\u5751......\u800c\u8fd9\u5c31\u662f\u4e2a\u5bb9\u65a5\u95ee\u9898\u4e86\u3002\n\n\u5949\u4e0a\u4ee3\u7801\uff1a\n```\n#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\nchar a[10];\nint m,n,min[6][10];//\u63cf\u8ff0\u6574\u4e2a\u77e9\u9635 \nint num,x[30],y[30];//\u63cf\u8ff0\u5751\u7684\u4e2a\u6570\u3001\u4f4d\u7f6e \nint w=12345678;//\u819c \nint dx[10]={-1,-1,-1,0,0,1,1,1,0};//\u79fb\u52a8\u4f4d\u7f6e \nint dy[10]={-1,0,1,-1,1,-1,0,1,0};\nint vis[6][10],f[29][(1<<8)+10],hi[1<<9];//dp\u7528\u5230\u7684\u4e1c\u897f \nint dp(){\n\tint i,j,k;\n\tmemset(f,0,sizeof(f));\n\tf[0][0]=1;\n\tfor(i=0;i<(1<<num);i++){//\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u72b6\u6001i\u5bf9\u5e94\u7684\u53ef\u586b\u70b9\u6570\u91cf \n\t\thi[i]=n*m;\n\t\tmemset(vis,0,sizeof(vis));\n\t\tfor(j=0;j<num;j++)if(!(i&(1<<j)))for(k=0;k<9;k++)vis[x[j]+dx[k]][y[j]+dy[k]]=1;\n\t\tfor(j=1;j<=n;j++)for(k=1;k<=m;k++)if(vis[j][k])hi[i]--;\n\t}\n\tfor(i=1;i<=n*m;i++){//\u679a\u4e3e\u586b\u54ea\u4e2a\u6570 \n\t\tfor(j=0;j<(1<<num);j++){//\u679a\u4e3e\u72b6\u6001 \n\t\t\tif(hi[j]-i+1>0)f[i][j]+=f[i-1][j]*(hi[j]-i+1),f[i][j]%=w;\n\t\t\tfor(k=0;k<num;k++)if((1<<k)&j)f[i][j]+=f[i-1][j^(1<<k)],f[i][j]%=w;\n\t\t}\n\t}\n\treturn f[n*m][(1<<num)-1];\n}\nint dfs(int X,int Y){\n\tif(Y==m+1)X++,Y=1;\n\tif(X==n+1)return dp();\n\tint i,ans=dfs(X,Y+1);\n\tfor(i=0;i<9;i++)if(min[X+dx[i]][Y+dy[i]])return ans;\n\t//\u5982\u679c\u6ca1return\u8bf4\u660e\u8fd9\u4e2a\u5730\u65b9\u662f\u4e2a\u53ef\u80fd\u53d8\u6210\u5751\u7684\u5730\u65b9\uff0c\u90a3\u5c31\u628a\u5b83\u53d8\u6210\u5751dfs\u4e00\u4e0b \n\tx[num]=X;y[num++]=Y;min[X][Y]=1;\n\tans-=dfs(X,Y+1),ans=(ans+w)%w;\n\tmin[X][Y]=0;num--;//\u522b\u5fd8\u4e86\u53d8\u56de\u53bb \n\treturn ans;\n}\nint main(){\n\tint i,j;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;i++){\n\t\tscanf(\"%s\",a+1);\n\t\tfor(j=1;j<=m;j++)if(a[j]=='X'){\n\t\t\tmin[i][j]=1;\n\t\t\tx[num]=i;y[num++]=j;\n\t\t}\n\t}\n\tfor(i=0;i<num;i++)for(j=0;j<i;j++)if(abs(x[i]-x[j])<2&&abs(y[i]-y[j])<2)return printf(\"0\"),0;\n\tif(!num)return printf(\"0\"),0;\n\tprintf(\"%d\",dfs(1,1));\n\treturn 0;\n}\n```",
        "postTime": 1551619823,
        "uid": 108971,
        "name": "Potassium",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3160 \u3010[CQOI2012]\u5c40\u90e8\u6781\u5c0f\u503c\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u628a\u8fd9\u9898\u5f53\u505a\u7b2c\u4e00\u9053\u5bb9\u65a5\u9898\u5199\u7684\u849f\u84bb\uff0c\u5374\u5728\u9898\u89e3\u91cc\u7ffb\u6765\u7ffb\u53bb\u90fd\u6ca1\u627e\u5230\u6709\u4eba\u8bb2\u5bb9\u65a5\u90e8\u5206QAQ\n\n~~\u83dc\u662f\u539f\u7f6a\uff09~~\n\n\u8bdd\u8bf4\u8fd9\u7bc7\u89e3\u6790\u5199\u7684\u5f88\u7e41\u7410\uff0c\u53ef\u80fd\u5e76\u4e0d\u9002\u5408\u7ed9\u53ea\u662f\u60f3\u627e\u70b9\u63d0\u793a\u7684\u4eba\u770b...\u5176\u4e2d\u8fd8\u6709\u4e00\u4e9b\u56e0\u6211\u6587\u7b14\u6c34\u5e73\u800c\u8868\u8fbe\u758f\u5ffd\u7684\u90e8\u5206\u3001\u548c\u6570\u5b66\u7528\u8bed\u4e0d\u4e25\u8c28\u7684\u5730\u65b9\uff0c\u8fd8\u8bf7\u89c1\u8c05QAQ\uff08\u5b9e\u5728\u770b\u4e0d\u4e0b\u53bb\u5c31\u79c1\u4fe1\u95ee\u6211\u628a\uff09\n\n## \u89e3\u6790\n\n### $\\text{Part 1.}$ dp\u90e8\u5206\n\n\u5982\u679c\u76f4\u63a5\u6c42\u9898\u76ee\u7684\u7b54\u6848\u7684\u8bdd\uff0c\u4f1a\u4e0d\u592a\u597d\u505a\uff0c\u539f\u56e0\u662f\u5f88\u96be\u5728\u7edf\u8ba1\u7b54\u6848\u65f6\u8981\u6c42\u9664\u4e86\u89c4\u5b9a\u4f4d\u7f6e\u5916\uff0c\u5176\u4ed6\u4f4d\u7f6e\u4e0d\u51fa\u73b0\u84c4\u6c34\u6c60\u3002\n\n\u56e0\u6b64\u6211\u4eec\u5148\u4e0d\u8003\u8651\u5254\u9664\u6709\u591a\u4f59\u84c4\u6c34\u6c60\u7684\u65b9\u6848\uff0c\u90a3\u4e48\u60f3\u5230\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u653e\u6570\u5b57\uff08\u9ad8\u5ea6\uff09\uff0c\u5e76\u4e14\u8981\u6c42\u4e00\u4e2a\u84c4\u6c34\u6c60\u683c\u5b50\u5468\u56f4\u7684\u683c\u5b50\u5fc5\u987b\u8981\u7b49\u8fd9\u4e2a\u84c4\u6c34\u6c60\u683c\u5b50\u653e\u5b8c\u540e\u624d\u80fd\u653e\u3002\u7531\u4e8e\u84c4\u6c34\u6c60\u6700\u591a $8$ \u4e2a\uff0c\u56e0\u6b64\u53ef\u4ee5\u60f3\u5230\u7528\u72b6\u538b\uff1a\n\n$\\text{dp[k][s]}$\uff0c\u5176\u4e2d $s$ \u8868\u793a\u76ee\u524d\u6bcf\u4e2a\u84c4\u6c34\u6c60\u7684\u72b6\u6001\uff1a$0$ \u8868\u793a\u8fd8\u6ca1\u653e\uff0c$1$ \u8868\u793a\u653e\u4e86\uff1b$k$ \u8868\u793a\u5df2\u7ecf\u653e\u5230\u7b2c\u51e0\u4e2a\u6570\u5b57\u4e86\u3002\n\n\u8f6c\u79fb\u4e5f\u5f88\u663e\u7136\uff1a\u5bf9\u4e8e\u7b2c $k$ \u4e2a\u6570\u5b57\u653e\u5230\u7684\u683c\u5b50\uff0c\u4fdd\u8bc1\u5408\u6cd5\uff0c\u5982\u679c\u662f\u84c4\u6c34\u6c60\u683c\u5b50\uff0c\u90a3\u4e48\u5176\u8d21\u732e\u5c31\u662f\u6240\u6709 $\\text{dp[k-1][s']}$\uff0c\u4e14\u6ee1\u8db3 $[\\text{ s' == s|(1<<x) }]$ \u7684\u548c\uff1b\u5982\u679c\u4e0d\u662f\u84c4\u6c34\u6c60\u683c\u5b50\uff0c\u90a3\u4e48\u5176\u8d21\u732e\u5c31\u662f $\\text{dp[k-1][s]}$\u3002\n\n\u81f3\u4e8e\u4fdd\u8bc1\u653e\u7684\u683c\u5b50\u5408\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e00\u6b21\u5bf9\u4e8e `s` \u7684\u5faa\u73af\u4e2d\u6807\u8bb0\u90a3\u4e9b\u6ca1\u6709\u653e\u7684\u84c4\u6c34\u6c60\u683c\u5b50\u548c\u8fd9\u4e9b\u683c\u5b50\u5468\u56f4\u7684\u683c\u5b50\uff0c\u5e76\u4e14**\u7edf\u8ba1\u6570\u91cf**\uff08\u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53\u662f\u54ea\u4e2a\uff09\u3002\u9664\u4e86\u90a3\u4e9b\u683c\u5b50\u5176\u4ed6\u7684\u683c\u5b50\u90fd\u662f\u53ef\u653e\u7684\uff08\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u6ca1\u7edf\u8ba1\u5df2\u653e\u7684\u683c\u5b50\uff0c\u53ef\u4ee5\u89c1\u4ee3\u7801\u5b9e\u73b0\uff1b\u4e3b\u8981\u662f\u56e0\u4e3a\u5bf9\u4e8e $k < |s|$\uff08$|.|$ \u8868\u72b6\u6001\u7684\u5df2\u653e\u84c4\u6c34\u6c60\u4e2a\u6570\uff09**\u4e0d\u4f1a\u6709\u8d21\u732e**\uff09\u3002\n\n\u4ee3\u7801\u5c31\u50cf\u8fd9\u6837\uff08\u91cc\u9762\u7684\u8f6c\u79fb\u5199\u6cd5\u6709\u70b9\u7279\u6b8a\uff09\uff1a\n\n```cpp\nint cntX =0, x[10] ={0}, y[10] ={0};\n/*\u627e\u51fa\u6240\u6709\u84c4\u6c34\u6c60\u683c\u5b50\u7684\u5750\u6807*/\nfor(int i =0; i < n; ++i) for(int j =0; j < m; ++j) if(map[i][j]) x[cntX] =i, y[cntX++] =j;\ndp[0][0] =1;/*\u521d\u503c*/\nfor(int s =0; s < (1<<cntX); ++s){\n\tmemset(block, 0, sizeof(block));\n\tint cnt =n*m;/*\u53ef\u4ee5\u653e\u7f6e\u7684\u683c\u5b50\u7684\u4e2a\u6570*/\n\tfor(int k =0; k < cntX; ++k)\n\t\tif(!(s&(1<<k))){/*\u627e\u51fa\u672a\u653e\u7684\u84c4\u6c34\u6c60*/\n\t\t\tfor(int di =-1; di <= 1; ++di) for(int dj =-1; dj <= 1; ++dj)\n\t\t\t\tif(inrange(x[k]+di, y[k]+dj))\n\t\t\t\t\tif(!block[x[k]+di][y[k]+dj])\n\t\t\t\t\t\tblock[x[k]+di][y[k]+dj] =1, --cnt;\n\t\t}\n\tfor(int i =0; i <= cnt; ++i)\n\t\tif(dp[i][s]){/*\u5bf9\u4e8e i < |s| \u4e0d\u4f1a\u6709\u8d21\u732e*/\n\t\t\t/*\u4e0b\u4e00\u4e2a\u653e\u7684\u4e0d\u662f\u84c4\u6c34\u6c60*/\n\t\t\tdp[i+1][s] =(dp[i+1][s]+dp[i][s]*(cnt-i))%M;\n\t\t\t/*\u4e0b\u4e00\u4e2a\u653e\u7684\u662f\u84c4\u6c34\u6c60*/\n\t\t\tfor(int k =0; k < cntX; ++k){\n\t\t\t\tif(!(s&(1<<k)))/*\u627e\u51fa\u672a\u653e\u7684\u84c4\u6c34\u6c60*/\n\t\t\t\t\tdp[i+1][s|(1<<k)] =(dp[i+1][s|(1<<k)]+dp[i][s])%M;\n\t\t\t}\n\t\t}\n}\n```\n\n---\n\n### $\\text{Part 2.}$ \u5bb9\u65a5\u90e8\u5206\n\n\u5148\u89c2\u5bdf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec dp \u6c42\u7684\u5b9e\u9645\u4e0a\u662f\uff1a\u6240\u6709**\u81f3\u5c11\u5305\u542b**\u9898\u76ee\u7ed9\u51fa\u7684\u84c4\u6c34\u6c60\u7684\u65b9\u6848\u7684\u6570\u91cf\u3002\n\n\u90a3\u4e48\u8981\u53bb\u9664\u7684\u5176\u5b9e\u5c31\u662f\uff1a\u6240\u6709**\u4e0d\u53ea\u5305\u542b**\u9898\u76ee\u7ed9\u51fa\u7684\u84c4\u6c34\u6c60\u7684\u65b9\u6848\u7684\u6570\u91cf\u3002\n\n\u5b9a\u4e49\u6211\u4eec\u4ee5\u9898\u76ee\u6761\u4ef6\uff08\u89c4\u5b9a\u7684\u84c4\u6c34\u6c60\u72b6\u6001\uff09\u8ba1\u7b97\uff08\u7528\u4e0a\u6587\u7684\u672a\u53bb\u91cd dp\uff09\u51fa\u7684\u65b9\u6848\u96c6\u5408\u4e3a $S$\uff1b\u5e76\u4e14\u518d\u89c4\u5b9a\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u6cd5\u7684\u683c\u5b50**\u5fc5\u987b**\u4f5c\u4e3a\u84c4\u6c34\u6c60\uff0c\u5e76\u5b9a\u4e49\u5176\u8ba1\u7b97\u51fa\u7684\u65b9\u6848\u96c6\u5408 $S'$\u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 $S'\\subsetneq S$\uff08\u771f\u5b50\u96c6\uff09\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u60f3\u5230**\u5bb9\u65a5**\u7684\u65b9\u5411\u3002\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u5957\u5bb9\u65a5\u7684\u57fa\u672c\u5f62\u5f0f\uff08\u8fd9\u662f\u600e\u4e48\u60f3\u5230\u7684\u6211\u4e5f\u4e0d\u77e5\u9053QAQ\uff09\uff1a\n\n\u5148\u5b9a\u4e49 $G(S, k)$ \u8868\u793a\u5fc5\u5b9a\u5305\u542b\u84c4\u6c34\u6c60\u683c\u5b50 $S$\uff0c\u5e76\u4e14\u9664 $S$ \u5916\u8fd8\u6709 $k$ \u4e2a\u84c4\u6c34\u6c60\u7684\u6240\u6709**\u84c4\u6c34\u6c60\u72b6\u6001**\u8ba1\u7b97\u51fa\u7684\u65b9\u6848\u7684\u548c\u3002\n\n\u4f8b\u5982\u8bbe\u9898\u76ee\u8981\u6c42\u7684\u84c4\u6c34\u6c60\u96c6\u5408\u4e3a $S$\uff0c$S$ \u53ca\u5730\u56fe\u4e3a\uff1a\n\n```\n. 0 1 2\n0 X . X\n1 . . .\n2 . . .\n```\n\n\u90a3\u4e48 $G(S, 1)$ \u7684\u6240\u6709\u72b6\u6001\u5982\u4e0b\uff1a\n\n```\n. 0 1 2 | . 0 1 2 | . 0 1 2\n0 X . X | 0 X . X | 0 X . X\n1 . . . | 1 . . . | 1 . . .\n2 X . . | 2 . X . | 2 . . X\n```\n\u6211\u4eec\u5c31**\u5bf9\u6240\u6709\u72b6\u6001\u5e26\u5165\u6c42\u4e00\u6b21 dp**\uff0c\u5e76\u6c42\u548c\uff0c\u5c31\u662f $G(S, 1)$ \u7684\u503c\u3002\n\n\u8bbe\u9898\u76ee\u8981\u6c42\u7684\u84c4\u6c34\u6c60\u96c6\u5408 $S$\uff0c\u5730\u56fe\u6700\u591a\u53ef\u5bb9\u7eb3 $n$ \u4e2a\u84c4\u6c34\u6c60\uff0c$|.|$ \u8868\u793a\u96c6\u5408\u7684\u5143\u7d20\u4e2a\u6570\uff08\u6216\u8005\u8bf4\u57fa\u6570\u66f4\u5408\u9002\uff1f\uff09\uff0c\u5c31\u53ef\u4ee5\u5217\u51fa\u5f0f\u5b50\uff1a$\\sum\\limits_{k=0}^{n-|S|} (-1)^k\\cdot G(S, k)$ \u5373\u4e3a\u6700\u7ec8\u7684\u7b54\u6848\u3002\n\n&nbsp;\n\n\u5173\u4e8e\u5b83\u7684\u6b63\u786e\u6027\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u7ec4\u5408\u6570\u89e3\u91ca\uff1a\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u591a\u9009\u4e86 $m$ \u4e2a\u84c4\u6c34\u6c60\uff0c\u5176\u591a\u9009\u7684\u84c4\u6c34\u6c60\u96c6\u5408\u4e3a $S_m$ \u7684\u65b9\u6848\u5728\u5f0f\u5b50\u4e2d\u7b2c $k$ \u9879\u7684\u51fa\u73b0\u6b21\u6570\u3002\u53ef\u4ee5\u53d1\u73b0\u5728\u7b2c $k$ \u9879\u7684**\u6240\u6709\u72b6\u6001\u4e2d**\uff0c\u53ea\u8981\u6ee1\u8db3\u591a\u9009\u7684 $k$ \u4e2a\u84c4\u6c34\u6c60\u5747\u662f\u96c6\u5408 $S_m$ \u4e2d\u7684\u5143\u7d20\uff0c\u5c31\u4e00\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u65b9\u6848**\u4e00\u6b21**\uff08\u601d\u8003\u4e0b dp \u6c42\u51fa\u6765\u7684\u4e1c\u897f\u542b\u4e49\uff09\u3002\n\n\u4e8e\u662f\u8fd9\u4e2a\u65b9\u6848\u5728\u5f0f\u5b50\u4e2d\u7b2c $k$ \u9879\u7684\u51fa\u73b0\u6b21\u6570**\u5c31\u662f $C_m^k$\u3002**\n\n\u63a5\u7740\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u65b9\u6848\u5728\u6574\u4e2a\u5f0f\u5b50\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u662f $\\sum\\limits_{k=0}^m (-1)^k\\cdot C_m^k$\uff08\u540c\u65f6\u663e\u7136 $0\\leq m\\leq n-|S|$\uff09\u3002\n\n\u8fd9\u4e2a\u5f0f\u5b50\u9664\u4e86\u5728 $[ m=0 ]$ \u65f6\u53d6 $1$\uff0c\u5176\u4f59\u65f6\u523b\u662f\u6052\u4e3a $0$ \u7684\u3002\u601d\u8003\u5176\u542b\u4e49\uff0c\u4e5f\u5c31\u662f\u8bf4\u9664\u4e86**\u6ca1\u6709\u591a\u9009\u84c4\u6c34\u6c60\u7684\u65b9\u6848**\u53ea\u4fdd\u7559\u4e00\u6b21\uff0c\u5176\u4f59\u7684\u90fd\u88ab\u6d88\u53bb\u4e86\uff0c\u800c\u8fd9\u5c31\u662f\u6211\u4eec\u6700\u7ec8\u6c42\u7684\u7b54\u6848\u3002\n\n&nbsp;\n\n\u7531\u4e8e\u6570\u636e\u8303\u56f4\u6700\u591a\u652f\u6301 $8$ \u4e2a\u84c4\u6c34\u6c60\uff0c\u53ef\u80fd\u7684\u72b6\u6001\u5e76\u4e0d\u4f1a\u5f88\u591a\uff0c\u4e8e\u662f\u53ea\u8981\u60f3\u5230\u8fd9\u91cc\u5373\u53ef\uff1b\u4e0a\u9762\u7684\u5f0f\u5b50\u7684\u6bcf\u4e00\u9879\u62ff dfs **\u679a\u4e3e**\u5c31\u53ef\u4ee5\u4e86\uff08\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u5c31\u770b\u5b8c\u6574 code \u628a\uff09\u3002\n\n\uff08\u53e6\u5916\u8fd9\u9053\u9898\u8fd8\u88ab CQOI2012 \u62ff\u53bb\u8003\u4e86qwq\uff09\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define ll long long\n\nconst int M =12345678;\n\nint n, m;\nbool map[9][9];\nll ans;\n\ninline bool inrange(int x, int y){ return (x >= 0 && y >= 0 && x < n && y < m); }\n\nll dp[50][(1<<9)];\nbool block[9][9];\n\ninline ll calc(){\n\tmemset(dp, 0, sizeof(dp));\n\tint cntX =0, x[10] ={0}, y[10] ={0};\n\tfor(int i =0; i < n; ++i) for(int j =0; j < m; ++j) if(map[i][j]) x[cntX] =i, y[cntX++] =j;\n\tdp[0][0] =1;\n\tfor(int s =0; s < (1<<cntX); ++s){\n\t\tmemset(block, 0, sizeof(block));\n\t\tint cnt =n*m;\n\t\tfor(int k =0; k < cntX; ++k)\n\t\t\tif(!(s&(1<<k))){\n\t\t\t\tfor(int di =-1; di <= 1; ++di) for(int dj =-1; dj <= 1; ++dj)\n\t\t\t\t\tif(inrange(x[k]+di, y[k]+dj))\n\t\t\t\t\t\tif(!block[x[k]+di][y[k]+dj])\n\t\t\t\t\t\t\tblock[x[k]+di][y[k]+dj] =1, --cnt;\n\t\t\t}\n\t\tfor(int i =0; i <= cnt; ++i)\n\t\t\tif(dp[i][s]){/*\u5bf9\u4e8e i < |s| \u4e0d\u4f1a\u6709\u8d21\u732e*/\n\t\t\t\tdp[i+1][s] =(dp[i+1][s]+dp[i][s]*(cnt-i))%M;\n\t\t\t\tfor(int k =0; k < cntX; ++k){\n\t\t\t\t\tif(!(s&(1<<k)))\n\t\t\t\t\t\tdp[i+1][s|(1<<k)] =(dp[i+1][s|(1<<k)]+dp[i][s])%M;\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn dp[n*m][(1<<cntX)-1];\n}\n\nvoid dfs(int nx, int ny, int k){\n\tif(nx >= n){\n\t\tans =(ans+calc()*k+M)%M;\n\t\treturn;\n\t}\n\tint netx, nety;\n\tif(ny+1 >= m) netx =nx+1, nety =0;\n\telse netx =nx, nety =ny+1;\n\t/*dfs \u679a\u4e3e*/\n\tdfs(netx, nety, k);\n\tif(!map[nx][ny]){\n\t\tbool flg =1;\n\t\tfor(int di =-1; di <= 1; ++di) for(int dj =-1; dj <= 1; ++dj){\n\t\t\tif((di != 0 || dj != 0) && inrange(nx+di, ny+dj)) if(map[nx+di][ny+dj])\n\t\t\t\tflg =0;\n\t\t}\n\t\tif(flg){\n\t\t\tmap[nx][ny] =1;\n\t\t\tdfs(netx, nety, -k);\n\t\t\tmap[nx][ny] =0;\n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i =0; i < n; ++i){\n\t\tchar s[10]; scanf(\"%s\", s);\n\t\tfor(int j =0; j < m; ++j) if(s[j] == 'X') map[i][j] =1;\n\t}\n\t/*\u975e\u6cd5\u60c5\u51b5\u5fc5\u987b\u8981\u7279\u5224\uff08\u601d\u8003\u4e0b\u7b97\u6cd5\u542b\u4e49\uff09*/\n\tfor(int i =0; i < n; ++i) for(int j =0; j < m; ++j)\n\t\tif(map[i][j]){\n\t\t\tfor(int di =-1; di <= 1; ++di) for(int dj =-1; dj <= 1; ++dj){\n\t\t\t\tif((di != 0 || dj != 0) && inrange(i+di, j+dj)) if(map[i+di][j+dj])\n\t\t\t\t\treturn putchar('0') && 0;\n\t\t\t}\n\t\t}\n\tdfs(0, 0, 1);\n\tprintf(\"%lld\", ans);\n}\n```\n",
        "postTime": 1592476032,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1763 \u3010\u84c4\u6c34\u6c60\u3011"
    },
    {
        "content": "\u6574\u4f53\u4e0a\u662f\u4e24\u53e5\u8bdd\n- \u6bcf\u4e2a\u5173\u952e\u70b9\u6bd4\u5176\u4e34\u96c6\u70b9\u5148\u9009\n- \u6bcf\u4e2a\u975e\u5173\u952e\u70b9\u4e0d\u6bd4\u5176\u4e34\u96c6\u70b9\u540e\u9009\n\n\n## Part1\n\n\u8bbe\u5173\u952e\u70b9\u96c6\u5408\u4e3a$S$\n\n\u7b54\u6848\u5c31\u662f\u6c42$f(S)$**\u6070\u597d**\u53ea\u6709$S$\u96c6\u5408\u6bd4\u5176\u4e34\u96c6\u70b9\u5148\u9009\n\n\u518d\u8bbe$g(S)$**\u81f3\u5c11**\u6709$S$\u96c6\u5408\u6bd4\u5176\u4e34\u96c6\u70b9\u5148\u9009\n\n$f(S)=\\sum\\limits_{S\\subseteq T}(-1)^{|T|-|S|}g(T)$\n\n\u4f60\u6574\u4f53\u4e0a\u505a\u4e00\u4e2a\u5bb9\u65a5\uff0c\u679a\u4e3e\u975e\u5173\u952e\u70b9\u7684\u9009\u62e9\u60c5\u51b5\u5373$T\\oplus S$,\u6c42\u51fa$g(T)$\n\n## Part2\n\n\u505adp\u7684\u6574\u4f53\u601d\u8def\u662f\u6309\u7167\u6570\u7684\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u653e\uff0c\u5047\u8bbe\u5df2\u7ecf\u653e\u7684\u5173\u952e\u70b9\u96c6\u5408\u662f$S$,\u8bbe$g_{i,S}$\u8868\u793a\u653e\u4e86$[1,i]$\u8fd9\u4e9b\u6570\uff0c\u5173\u952e\u70b9\u96c6\u5408\u4e3a$S$\n\n\u5bf9\u5df2\u7ecf\u5b9a\u7684$S$\uff0c\u6211\u4eec\u5148\u9884\u5904\u7406\u51fa\u5bf9\u5176\u6bcf\u4e2a\u5b50\u96c6$S'$\u7684$h(S')$\u8868\u793a**\u90bb\u96c6\u4e0d\u5305\u542b\u9664\u4e86\u8fd9\u4e2a\u5b50\u96c6\u5916\u4efb\u4f55\u5176\u4ed6\u5173\u952e\u70b9\u7684\u975e\u5173\u952e\u70b9\u4e2a\u6570**\n\n\u5219\u6211\u4eec\u4ee5\u5173\u952e\u70b9\u96c6\u5408\u4e3a\u5206\u5c42\u505a\u5c42\u95f4\u548c\u5c42\u5185dp\n\n- $f_{i-1,S}\\cdot \\max\\{h(S)-i+1,0\\}\\to f_{i,S}$\n- $f_{i-1,S}\\to f_{i,S\\oplus sta_j}$\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define mod 12345678\nusing namespace std;\nint n,m,ans,cnt,g[1<<9],f[29][1<<9],dx[8]={-1,-1,-1,0,0,1,1,1},dy[8]={-1,0,1,-1,1,-1,0,1};\nchar s[5][8];\nstruct Node{int x,y;}p[10];\ninline int DP(void){\n\tint i,j,k,d,flag;\n\tfor(cnt=0,i=1;i<=n;++i)\n\t\tfor(j=1;j<=m;++j)if(s[i][j]=='X')p[++cnt]={i,j};\n\tfor(i=0;i<1<<cnt;++i){\n\t\tfor(j=1;j<=cnt;++j)s[p[j].x][p[j].y]=((i>>(j-1))&1)?'.':'X'; \n\t\tfor(g[i]=0,j=1;j<=n;++j)\n\t\t\tfor(k=1;k<=m;++k)if(s[j][k]=='.'){\n\t\t\t\tfor(flag=1,d=0;d<8;++d)if(s[j+dx[d]][k+dy[d]]=='X'){flag=0;break;}\n\t\t\t\tg[i]+=flag;\n\t\t\t}\n\t}for(i=1;i<=cnt;++i)s[p[i].x][p[i].y]='X'; \n\tfor(f[0][0]=i=1;i<=n*m;++i)\n\t\tfor(j=0;j<1<<cnt;++j){\n\t\t\tfor(f[i][j]=1ll*f[i-1][j]*max(0,g[j]-i+1)%mod,k=1;k<=cnt;++k)if((j>>(k-1))&1)f[i][j]=(f[i][j]+f[i-1][j-(1<<(k-1))])%mod;\n\t\t}\n\t\n\treturn f[n*m][(1<<cnt)-1];\n}\ninline void dfs(int x,int y,int dlt){\n\tint tx,ty,i;\n\tif(x>n)return void(ans=(ans+1ll*dlt*DP())%mod);\n\tif(y==m)tx=x+1,ty=1;else tx=x,ty=y+1;\n\tdfs(tx,ty,dlt);if(s[x][y]=='.'){for(i=0;i<8;++i)if(s[x+dx[i]][y+dy[i]]=='X')return ;s[x][y]='X',dfs(tx,ty,mod-dlt),s[x][y]='.';}\n}\nsigned main(void){\n\tint i;scanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;++i)scanf(\"%s\",s[i]+1);\n\tprintf(\"%d\\n\",(dfs(1,1,1),ans));\n\treturn 0;\n}\n```",
        "postTime": 1609640429,
        "uid": 40629,
        "name": "zzw4257",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3160 \u3010[CQOI2012]\u5c40\u90e8\u6781\u5c0f\u503c\u3011"
    },
    {
        "content": "\n\u5bf9\u6070\u597d\u5bb9\u65a5\uff0c\u73b0\u5728\u95ee\u9898\u53d8\u6210\u5bf9\u4e00\u4e2a\u5c40\u9762\u7edf\u8ba1\u8fd9\u4e9b\u4f4d\u7f6e\u81f3\u5c11\u4e3a $X$ \u7684\u65b9\u6848\u6570\u4e4b\u548c\u3002\n\n\u6839\u636e\u9898\u610f\u9650\u5236\u53ef\u80fd\u51fa\u73b0\u5c40\u9762\u4e0d\u4f1a\u592a\u591a\uff08\u4e0d\u80fd\u76f8\u90bb\u5747\u4e3a $X$\uff09\u6700\u540e\u641c\u51fa\u6765\u5927\u6982\u662f 6W \u4e2a\uff0c\u8003\u8651\u66b4\u529b\u3002\n\n\u9996\u5148\u53ef\u4ee5\u6839\u636e\u504f\u5e8f\u5173\u7cfb\u5efa\u4e00\u5f20 DAG\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\u6c42\u5176\u6240\u6709\u53ef\u80fd\u7684 top \u5e8f\u7684\u6570\u91cf\u3002\n\n\u6734\u7d20\u5904\u7406\u662f $\\mathcal O(2^{NM}(NM))$\uff0c\u8003\u8651\u4f18\u5316\uff0c\u6211\u4eec\u53d1\u73b0\u6709\u51fa\u5ea6\u7684\u70b9\u53ea\u6709 $X$ \u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u4ed6\u4eec\u4f1a\u5411\u4e00\u4e9b\u8282\u70b9\u8fde\u8fb9\uff0c\u4e8e\u662f\u70b9 $x$ \u80fd\u88ab\u9009\u5f53\u4e14\u4ec5\u5f53\u8986\u76d6\u4ed6\u7684\u8282\u70b9\u5747\u88ab\u9009\u4e2d\u3002\n\n\u53ef\u4ee5\u6ce8\u610f\u5230 $X$ \u7684\u6570\u91cf\u4e0d\u8d85\u8fc7 $8$\uff0c\u4e00\u4e2a\u66b4\u529b\u662f\u679a\u4e3e $X$ \u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u7136\u540e\u8003\u8651\u5916\u90e8\u5143\u7d20\u5982\u4f55\u653e\u5165\u8fdb\u53bb\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6392\u5217\u8ba1\u6570\u7684\u7c7b\u578b\uff0c\u4ece\u524d\u5f80\u540e\u7ef4\u62a4\u5e8f\u5217\u957f\u5ea6\uff0c\u7ef4\u62a4 $f_{i,j}$ \u8868\u793a\u8003\u8651\u5230\u7b2c $i$ \u4e2a\uff0c\u5f53\u524d\u5269\u4f59 $j$ \u4e2a\u5143\u7d20\u5728\u7ed3\u5c3e\u5904\u7684\u65b9\u6848\u6570\uff0c\u63d2\u5165\u65b0\u5143\u7d20\u65f6\u679a\u4e3e\u5176\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u9884\u5904\u7406\u5176\u53ef\u4ee5\u989d\u5916\u9644\u5e26\u7684\u53ef\u63d2\u5165\u7684\u8282\u70b9\u6570\uff0c\u53ef\u4ee5 $\\mathcal O(|X|!\\cdot |X|^2)$ \u7684\u89e3\u51b3\u6b64\u95ee\u9898\u3002\n\n\u8fdb\u4e00\u6b65\u4f18\u5316\u662f\u901a\u8fc7\u72b6\u538b dp\uff0c\u5904\u7406\uff0c\u74f6\u9888\u5728\u4e8e\u6c42\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001 $S$ \u52a0\u5165\u5143\u7d20 $u$ \u4e4b\u540e\uff0c\u989d\u5916\u9644\u5e26\u7684\u5143\u7d20\u6570\u91cf\uff08\u6216\u8005\u8bf4 DAG \u4e0a\u6ca1\u6709\u88ab\u70b9\u8986\u76d6\u7684\u70b9\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u679a\u4e3e\u5b50\u96c6\u505a\u5230 $\\mathcal O(3^{|X|})$\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u9ad8\u7ef4\u524d\u7f00\u548c\u505a\u5230 $\\mathcal O(2^{|X|}|X|)$\n\n\u6700\u540e\uff0c\u53ef\u4ee5\u5728 $\\mathcal O(\\sum 3^{|X|}+\\sum 2^{|X|}|X|(NM))$ \u7684\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u95ee\u9898\u3002\u5b9e\u9645\u641c\u51fa\u6765\u5927\u6982\u662f $2\\cdot 10^7$ \u5de6\u53f3\uff1f\u8dd1\u5f97\u633a\u5feb\u7684\u3002\n\n$Code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ; \n#define re register\n#define rep(i, s, t) for(register int i = (s); i <= (t); ++ i)\n#define il inline\n#define vi vector<int>\n#define int long long\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ; \n\twhile( cc > '9' || cc < '0' ) { if(cc == '-') flus = -flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' ) cn = cn * 10 + cc - '0', cc = getchar() ; \n\treturn cn * flus ; \n}\nconst int P = 12345678 ; \nconst int N = 55 ; \nconst int M = (1 << 9) + 5 ; \nchar s[N] ; \nint n, m, Ans, D, C[N][N], a[N][N], b[N][N], A[N], g[N] ; \nint dp[M][N], Id[N][N], w[M], fac[N] ; \nvoid inc(int &x, int y) {\n\tx += y ; x %= P ; \n}\nvoid check() {\n\tint num = 0 ; \n\trep( i, 0, n + 1 ) rep( j, 0, m + 1 ) Id[i][j] = b[i][j] = 0 ;\n\trep( i, 1, n ) rep( j, 1, m ) \n\tif(g[i] & (1 << (j - 1))) b[i][j] = 1, ++ num, Id[i][j] = num ; \n\trep( i, 1, n ) rep( j, 1, m ) {\n\t\tif(b[i][j]) continue ;\n\t\tint u = 0 ; \n\t\trep( dx, -1, 1 ) rep( dy, -1, 1 ) {\n\t\t\tint x = i + dx, y = j + dy ; \n\t\t\tif(b[x][y]) u |= (1 << (Id[x][y] - 1)) ;\n\t\t} ++ w[u] ;\n\t}\n\tint bf = w[0], limit = (1 << num) - 1, ans = 0, L = n * m ; \n\tdp[0][bf] = fac[bf] ;\n\tfor(re int S = 0; S < limit; ++ S) {\n\t\tfor(re int j = 1; j <= num; ++ j) {\n\t\t\tif((S & (1 << (j - 1)))) continue ; \n\t\t\tint tS = (S | (1 << (j - 1))) ;\n\t\t\tint len = w[1 << (j - 1)], z = 0 ; \n\t\t\tfor(re int k = S; k; k = (k - 1) & S) len += w[k | (1 << (j - 1))] ; \n\t\t\tz = fac[len] ; int F = 0 ; \n\t\t\tfor(re int k = L; k >= 0; -- k) \n\t\t\tF = (F + dp[S][k]) % P, inc( dp[tS][k + len], F * z % P * C[k + len][len] % P ) ; \n\t\t}\n\t\trep( j, 0, L ) dp[S][j] = 0 ; \n\t}\n\trep( i, 0, L ) ans = (ans + dp[limit][i]) % P, dp[limit][i] = 0 ; \n\tif((D - num) & 1) Ans = (Ans - ans + P) % P ; \n\telse Ans = (Ans + ans) % P ; \n\trep( i, 0, limit ) w[i] = 0 ;\n}\nvoid Dfs(int x, int bef) {\n\tif(x == n + 1) { check() ; return ; }\n\tint lim = (1 << m) - 1 ; \n\tfor(re int j = 0; j <= lim; ++ j) {\n\t\tif((j & A[x]) != A[x]) continue ; \n\t\tif((j & (j << 1)) || (j & (j >> 1))) continue ; \n\t\tif((j & bef) || ((j << 1) & bef) || ((j >> 1) & bef)) continue ; \n\t\tg[x] = j, Dfs(x + 1, j) ; \n\t}\n}\nvoid solve() {\n\tn = gi(), m = gi(), Ans = D = 0 ; \n\trep( i, 1, n ) {\n\t\tscanf(\"%s\", s + 1) ; A[i] = 0 ; \n\t\trep( j, 1, m ) a[i][j] = (s[j] == 'X'), D += a[i][j] ;\n\t\trep( j, 1, m ) A[i] |= (1 << (j - 1)) * a[i][j] ; \n\t}\n\tif(D) Dfs(1, 0) ; \n\tcout << Ans << endl ; \n\tmemset(w, 0, sizeof(w)), memset( Id, 0, sizeof(Id) ) ;  \n}\nvoid init() {\n\tint lim = 50 ; C[0][0] = 1, fac[0] = 1 ; \n\trep( i, 1, lim ) rep( j, 0, i ) \n\tC[i][j] = (!j) ? 1 : (C[i - 1][j] + C[i - 1][j - 1]) % P ;  \n\trep( i, 1, lim ) fac[i] = fac[i - 1] * i % P ;\n}\nsigned main() { \n\tinit(), solve() ; \n\treturn 0 ; \n} \n```",
        "postTime": 1606978411,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3160 \u3010[CQOI2012]\u5c40\u90e8\u6781\u5c0f\u503c\u3011"
    },
    {
        "content": "\u9996\u5148\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u76ee==\n\n\u4f1a\u53d1\u73b0\u77e9\u9635\u4e2d\u6700\u591a\u67098\u4e2aX \u4e0d\u7136\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u77e9\u9635\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u8fd98\u4e2aX\u8fdb\u884c\u72b6\u538b\n\n\u5982\u679c\u6309\u71671-n\\*m\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5f80\u91cc\u9762\u586b\u6570\u5b57\u7684\u8bdd \u4e00\u4e2aX\u5468\u56f4\u7684\u683c\u662f\u4e00\u5b9a\u4e0d\u4f1a\u6bd4\u4ed6\u5148\u586b\u597d\u7684\n\n\u4e8e\u662f\u5c31\u770b\u4e00\u4e0b\u5728\u5f53\u524d\u72b6\u6001\u4e0b\u8fd9\u4e2a\u6570\u5b57\u4e0d\u586b\u5230X\u683c\u5b50\u6709\u591a\u5c11\u79cd\u65b9\u6cd5 cnt[s]\n\n\u8fd8\u6709\u4e0a\u4e00\u4e2a\u586b\u5728X\u7684\u683c\u5b50\u662f\u4e00\u5b9a\u5408\u6cd5\u7684\n\n\u4e8e\u662f\u5c31\u6709\u4e86\u65b9\u7a0b\uff1a\n\n#### f[i][j]=f[i-1][j]\\*(cnt[j]-i+1)+sigma[0-p((1<<p)&j)](f[i-1][j-(1<<p)]\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MOD=12345678;\nint n,m,x[9],y[9],top,cnt[1<<9];\nlong long f[30][1<<9];\nlong long ans;\nbool mm[6][9],wtm[6][9];\nint dx[]={0,1,0,-1,1,-1,1,-1};\nint dy[]={1,0,-1,0,1,-1,-1,1};\nint dp(){\n    top=0;int s;memset(cnt,0,sizeof(cnt));\n    memset(f,0,sizeof(f));\n    for(int i=0;i<n;i++)\n        for(int j=0;j<m;j++)\n            if(mm[i][j]){\n                x[++top]=i;y[top]=j;\n            }\n    s=1<<top;\n    for(int i=0;i<s;i++){\n        memset(wtm,0,sizeof(wtm));\n        for(int j=0;j<top;j++){\n            if(!((1<<j)&i)){\n                for(int k=0;k<8;k++){\n                    int xx=x[j+1]+dx[k];\n                    int yy=y[j+1]+dy[k];\n                    if(xx<0||yy<0||xx>=n||yy>=m) continue;\n                    wtm[xx][yy]=1;\n                }\n                wtm[x[j+1]][y[j+1]]=1;\n            }\n        }\n        for(int ni=0;ni<n;ni++)\n            for(int nj=0;nj<m;nj++) cnt[i]+=!(wtm[ni][nj]);\n    }\n     f[0][0]=1;\n    for(int i=1;i<=n*m;i++)\n        for(int j=0;j<s;j++){\n            f[i][j]+=(f[i-1][j]*(cnt[j]-i+1))%MOD;\n            f[i][j]%=MOD;\n            for(int p=0;p<top;p++){\n                if(!((1<<p)&j)) continue;\n                f[i][j]+=f[i-1][j-(1<<p)];\n                f[i][j]%=MOD;\n            }\n        }\n    return f[n*m][s-1];\n}\nvoid dfs(int nx,int ny,int z){\n    if(ny==m){dfs(nx+1,0,z);return;}\n    if(nx==n){\n        ans+=dp()*z;\n        ans%=MOD;\n        return;\n    }//Judge that the spot can be X or not Just Judge its round\n    dfs(nx,ny+1,z);\n    int judge(1);\n    for(int i=0;i<8;i++){\n        int xx=nx+dx[i];\n        int yy=ny+dy[i];\n        if(xx<0||yy<0||xx>=n||yy>=m) continue;\n        if(mm[xx][yy]) {judge=0;break;}\n    }\n    if(mm[nx][ny]) judge=0;\n    if(judge){mm[nx][ny]=1;dfs(nx,ny+1,z*(-1));mm[nx][ny]=0;}\n}\nvoid input(){\n    cin>>n>>m;\n    cin.get();\n    for(int i=0;i<n;i++){\n        char c[10];\n        scanf(\"%s\",c);\n        for(int j=0;j<m;j++){\n            if(c[j]=='X') mm[i][j]=1;\n            else mm[i][j]=0;\n        }\n    }\n}\nvoid xxj(){\n    dfs(0,0,1);\n}\nvoid output(){\n    cout<<(ans+12*MOD)%MOD<<endl;\n}\nint main(){\n    input();\n    xxj();\n    output();\n    return 0;\n}\n```",
        "postTime": 1490238842,
        "uid": 26051,
        "name": "Xiaojian_xiang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3160 \u3010[CQOI2012]\u5c40\u90e8\u6781\u5c0f\u503c\u3011"
    }
]