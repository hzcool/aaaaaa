[
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/T154241)\n\n\u672c\u9898\u662f\u7eb8\u5e01\u627e\u96f6\u95ee\u9898\uff0c\u4e0e\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u6709\u76f8\u4f3c\u4e4b\u5904\u3002\u8f6c\u6362\u4e3a\u7f8e\u5206\u540e\uff0c\u9700\u8981\u5151\u6362\u7684\u7eb8\u5e01\u6570\u91cf\u5bf9\u5e94\u80cc\u5305\u7684\u5bb9\u91cf\uff0c\u4e0d\u540c\u79cd\u7c7b\u7684\u786c\u5e01\u5bf9\u5e94\u7740\u4e0d\u540c\u7684\u7269\u54c1\uff0c\u786c\u5e01\u7684\u9762\u503c\u5bf9\u5e94\u7740\u7269\u54c1\u7684\u4ef7\u503c\uff0c\u4e0d\u8fc7\u4e0e\u6807\u51c6\u7684\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u5904\u6240\u6c42\u7684\u5e76\u4e0d\u662f\u80cc\u5305\u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u4ef7\u503c\uff0c\u800c\u662f\u6c42\u6070\u80fd\u591f\u5c06\u80cc\u5305\u88c5\u6ee1\u65f6\u6240\u4f7f\u7528\u7684\u6700\u5c11\u7269\u54c1\u6570\u91cf\u5373\u5177\u4f53\u7684\u7269\u54c1\u6570\u91cf\u6784\u6210\u3002\n\n\u6700\u5c11\u627e\u96f6\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u4e88\u4ee5\u89e3\u51b3\u3002\u7ed9\u5b9a\u4e00\u7ec4\u9762\u503c $D=<d_1,\\ d_2,\\ \u2026,\\ d_n>$\uff0c\u9762\u503c\u6309\u9012\u589e\u6392\u5217\uff08\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u53ea\u662f\u4e3a\u4e86\u63cf\u8ff0\u95ee\u9898\u65b9\u4fbf\uff09\uff0c\u6ee1\u8db3$d_i < d_i+1(1 \\leq i < n)$\uff0c$d_1$ \u662f\u8be5\u7eb8\u5e01\u7cfb\u7edf\u7684\u201c\u6700\u5c0f\u5355\u5143\u201d\uff0c\u5373\u5bf9\u4e8e\u4efb\u610f\u96f6\u94b1 $X$\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u6709\u9650\u4e2a $d_1$ \u8fdb\u884c\u627e\u96f6\uff08\u5982\u4eba\u6c11\u5e01\u4e2d\u7684 $1$ \u5206\u9762\u503c\uff09\uff0c\u5426\u5219\u5c06\u51fa\u73b0\u67d0\u4e9b\u7279\u5b9a\u96f6\u94b1\u65e0\u6cd5\u627e\u96f6\u7684\u60c5\u51b5\uff08\u5982\u679c\u4eba\u6c11\u5e01\u4e0d\u5b58\u5728 $1$ \u5206\u7684\u96f6\u94b1\uff0c\u5219\u627e $1$ \u5206\u96f6\u94b1\u65f6\u5b58\u5728\u56f0\u96be\uff09\u3002\u8bbe\u627e\u96f6\u94b1 $X$ \u7684\u6700\u5c11\u5f20\u6570\u4e3a $C(X)$\uff0c\u82e5\u8981\u627e\u7684\u96f6\u94b1\u6570\u4e3a $M$\uff0c\u5219\u6240\u6c42\u4e3a $C(M)$\uff0c\u56e0\u4e3a\u6700\u540e\u627e\u7684\u4e00\u5f20\u96f6\u94b1\u5fc5\u5b9a\u662f\u7ed9\u5b9a\u9762\u503c\u4e2d\u7684\u4e00\u79cd\uff0c\u90a3\u4e48\u53ea\u8981\u77e5\u9053\u4e86 $C(M-d_1)$\uff0c$C(M-d_2)$\uff0c\u2026\uff0c$C(M-d_i)$\uff0c\u5176\u6700\u5c0f\u503c\u518d\u52a0\u4e00\u5373\u4e3a $C(M)$\uff0c\u800c\u53ea\u8981\u77e5\u9053\u4e86 $C(M-d_1-d_1)$\uff0c$C(M-d_1-d_2)$\uff0c\u2026\uff0c$C(M-d_1-d_i)$\uff0c\u5176\u6700\u5c0f\u503c\u518d\u52a0\u4e00\u5373\u4e3a $C(M-d_1)$\u2026\u2026\u3002\u6545\u6b64\u95ee\u9898\u7684\u9012\u63a8\u5173\u7cfb\u4e3a\n\n$$C(M)=\\operatorname{min}\\{C(M-d_i) + 1\\}, \\  1 \\leq i \\leq n, \\ C(0)=0$$\n\u5f88\u663e\u7136\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u627e $0$ \u5143\u96f6\u94b1\u9700\u8981\u7684\u6700\u5c11\u7eb8\u5e01\u5f20\u6570\u4e3a $0$\uff0c\u56e0\u6b64\u6709 $C(0)=0$\u3002\n\n\u7531\u4e8e\u9700\u8f93\u51fa\u6700\u5c11\u786c\u5e01\u65b9\u6848\u7684\u5177\u4f53\u6784\u6210\uff0c\u56e0\u6b64\u5728\u81ea\u5e95\u5411\u4e0a\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u65f6\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u6b21\u9009\u62e9\u65f6\u7684\u76f8\u5173\u53c2\u6570\uff0c\u4ee5\u4fbf\u91cd\u5efa\u9009\u62e9\u8def\u5f84\u65f6\u4f7f\u7528\u3002\n\n\u4ee5\u4e0b\u662f\u6682\u4e0d\u8003\u8651\u65b9\u6848\u5b57\u5178\u5e8f\u6700\u5c0f\u65f6\u7684\u89e3\u9898\u65b9\u6848\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\n\nint n;\nint denom[110];\nint coins[10010], parent[10010], idx[10010], cnt[110];\n\nvoid findPath(int money)\n{\n    if (money > 0)\n    {\n        cnt[idx[money]]++;\n        findPath(parent[money]);\n    }\n}\n\nvoid findMiniumCoins(int money)\n{\n    fill(coins, coins + 10010, INF);\n    fill(cnt, cnt + 110, 0);\n\n    coins[0] = 0;\n    for (int m = 1; m <= money; m++)\n    {\n        int minCoins = INF, minIdx = INF;\n        for (int d = 0; d < n; d++)\n            if (m >= denom[d] && coins[m - denom[d]] != INF &&\n                minCoins > (coins[m - denom[d]] + 1))\n                minCoins = coins[m - denom[d]] + 1, minIdx = d;\n\n        if (minIdx != INF)\n        {\n            coins[m] = minCoins;\n            parent[m] = m - denom[minIdx];\n            idx[m] = minIdx;\n        }\n    }\n\n    if (coins[money] == INF)\n        cout << \"No solution.\" << endl;\n    else\n    {\n        cout << coins[money];\n\n        findPath(money);\n\n        int plusPrinted = 0;\n        for (int i = 0; i < n; i++)\n            if (cnt[i] > 0)\n            {\n                cout << (plusPrinted++ ? \"+\" : \" \");\n                cout << denom[i] << \"*\" << cnt[i];\n            }\n        cout << endl;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    double money;\n    int cases;\n    cin >> cases;\n    for (int cs = 1; cs <= cases; cs++)\n    {\n        cin >> n;\n        for (int i = 0; i < n; i++)\n            cin >> denom[i];\n\n        sort(denom, denom + n);\n        n = unique(denom, denom + n) - denom;\n\n        cin >> money;\n        findMiniumCoins((int)(money * 100.0 + 0.5));\n    }\n\n    return 0;\n}\n```\n\n\u53ef\u4ee5\u8bc1\u660e\uff1a\u5bf9\u7ed9\u5b9a\u7684\u9762\u503c\u6309\u9012\u589e\u6392\u5e8f\uff0c\u53bb\u9664\u91cd\u590d\u503c\uff0c\u5982\u679c\u6ee1\u8db3 $d_i \\leq 2 \\times d_{i+1}$\uff08$1 \\leq i \\lt c$\uff09\uff0c\u5219\u5151\u6362\u5e8f\u5217\u5fc5\u5b9a\u552f\u4e00\u3002\u6d4b\u8bd5\u70b9 $1$ \u5305\u542b\u7684\u6d4b\u8bd5\u6570\u636e\u5747\u662f\u5177\u6709\u552f\u4e00\u5151\u6362\u65b9\u6848\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u5373\u53ef\u83b7\u5f97 $\\operatorname{Accepted}$\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\u7684\u786c\u5e01\u9762\u503c\u5e8f\u5217\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u79cd\u7684\u5151\u6362\u65b9\u6848\uff0c\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u5f97\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f\u6b63\u786e\u7b54\u6848\u3002\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u5bf9\u9762\u503c\u6309\u7167\u5b57\u5178\u5e8f\u8fdb\u884c\u6392\u5217\uff0c\u5148\u4f7f\u7528\u5b57\u5178\u5e8f\u5c0f\u7684\u9762\u503c\u8fdb\u884c\u5151\u6362\uff0c\u5f97\u5230\u4ee5\u4e0b\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\n\nint n;\nint denom[110];\nint coins[10010], parent[10010], idx[10010], cnt[110];\n\nvoid findPath(int money)\n{\n    if (money > 0)\n    {\n        cnt[idx[money]]++;\n        findPath(parent[money]);\n    }\n}\n\nvoid findMiniumCoins(int money)\n{\n    fill(coins, coins + 10010, INF);\n    fill(cnt, cnt + 110, 0);\n\n    coins[0] = 0;\n    for (int m = 1; m <= money; m++)\n    {\n        int minCoins = INF, minIdx = INF;\n        for (int d = 0; d < n; d++)\n            if (m >= denom[d] && coins[m - denom[d]] != INF &&\n                minCoins > (coins[m - denom[d]] + 1))\n                minCoins = coins[m - denom[d]] + 1, minIdx = d;\n\n        if (minIdx != INF)\n        {\n            coins[m] = minCoins;\n            parent[m] = m - denom[minIdx];\n            idx[m] = minIdx;\n        }\n    }\n\n    if (coins[money] == INF)\n        cout << \"No solution.\" << endl;\n    else\n    {\n        cout << coins[money];\n\n        findPath(money);\n\n        map<int, int> output;\n        for (int i = 0; i < n; i++)\n            if (cnt[i])\n                output[denom[i]] = cnt[i];\n        int plusPrinted = 0;\n        for (auto p : output)\n        {\n            cout << (plusPrinted++ ? \"+\" : \" \");\n            cout << p.first << \"*\" << p.second;\n        }\n        cout << endl;\n    }\n}\n\nint cmp(int a, int b)\n{\n    return to_string(a) < to_string(b);\n}\n\nint main(int argc, char *argv[])\n{\n    double money;\n    int cases;\n    cin >> cases;\n    for (int cs = 1; cs <= cases; cs++)\n    {\n        cin >> n;\n        for (int i = 0; i < n; i++)\n            cin >> denom[i];\n\n        sort(denom, denom + n, cmp);\n        n = unique(denom, denom + n) - denom;\n\n        cin >> money;\n        findMiniumCoins((int)(money * 100.0 + 0.5));\n    }\n\n    return 0;\n}\n```\n\n\u5bf9\u4e8e\u4e0a\u8ff0\u4f7f\u7528\u7b80\u5355\u6392\u5e8f\u540e\u518d\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u7684\u65b9\u6cd5\uff0c\u867d\u7136\u8003\u8651\u5230\u4e86\u9762\u503c\u5b57\u5178\u5e8f\u5927\u5c0f\u5bf9\u65b9\u6848\u5b57\u5178\u5e8f\u5927\u5c0f\u7684\u5f71\u54cd\uff0c\u4f46\u662f\u672a\u8003\u8651\u5230\u786c\u5e01\u4e2a\u6570\u3001`*` \u7b26\u53f7\u3001`+` \u7b26\u53f7\u5bf9\u65b9\u6848\u5b57\u5178\u5e8f\u5927\u5c0f\u7684\u5f71\u54cd\uff08\u6d4b\u8bd5\u70b9 $2$ \u5305\u542b\u7684\u5747\u662f\u4f7f\u7528\u4e0a\u8ff0\u7b80\u5355\u6392\u5e8f\u540e\u5728\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u5c31\u53ef\u83b7\u5f97 $\\operatorname{Accepted}$ \u7684\u6570\u636e\u3002\uff09\u3002\u4f8b\u5982\u4ee5\u4e0b\u7684\u6d4b\u8bd5\u6570\u636e\uff1a\n\n```cpp\n1\n11 304 399 203 268 173 76 39 241 266 18 393 7.63\n```\n\n\u4f7f\u7528\u524d\u8ff0\u4ee3\u7801\u7684\u8f93\u51fa\u4e3a\uff1a\n```cpp\n4 18*1+173*2+399*1\n```\n\n\u4f46\u6b63\u786e\u7684\u8f93\u51fa\u4e3a\uff1a\n```cpp\n4 18*1+173*1+268*1+304*1\n```\n\n\u57fa\u4e8e\u4ee5\u4e0a\u539f\u56e0\uff0c\u5fc5\u987b\u5728\u52a8\u6001\u89c4\u5212\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u79cd\u5177\u6709\u6700\u5c0f\u786c\u5e01\u6570\u91cf\u7684\u5151\u6362\u65b9\u6848\uff0c\u6700\u540e\u4f7f\u7528\u56de\u6eaf\u6765\u641c\u7d22\u5177\u6709\u6700\u5c0f\u5b57\u5178\u5e8f\u7684\u5151\u6362\u65b9\u6848\u3002\u4ee5\u4e0b\u662f\u4e00\u79cd\u4f7f\u7528 $\\operatorname{STL}$ \u7684\u201c\u5077\u61d2\u201d\u5b9e\u73b0\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\n\nint n, denom[110], coins[10010];\nvector<int> parent[10010];\nmap<int, int> path, best;\n\nvoid dfs(int money)\n{\n    if (money > 0)\n    {\n        if (best.size())\n        {\n            auto it1 = path.begin(), it2 = best.begin();\n            for (int i = 0; i < path.size() - 1; i++)\n            {\n                string s1 = to_string(it1->first) + '*' + to_string(it1->second);\n                string s2 = to_string(it2->first) + '*' + to_string(it2->second);\n                if (s1 != s2)\n                {\n                    if (s1 > s2) return;\n                    break;\n                }\n                it1++, it2++;\n            }\n        }\n        for (auto m : parent[money])\n        {\n            if (path.size() && m < path.rbegin()->first) continue;\n            path[m]++;\n            dfs(money - m);\n            path[m]--;\n            if (!path[m]) path.erase(m);\n        }\n    }\n    else\n    {\n        if (best.size())\n        {\n            auto it1 = path.begin(), it2 = best.begin();\n            for (int i = 0; i < path.size(); i++)\n            {\n                string s1 = to_string(it1->first) + '*' + to_string(it1->second);\n                string s2 = to_string(it2->first) + '*' + to_string(it2->second);\n                if (s1 != s2)\n                {\n                    if (s1 > s2) return;\n                    break;\n                }\n                it1++, it2++;\n            }\n        }\n        best = path;\n    }\n}\n\nvoid dp(int money)\n{\n    for (int i = 0; i <= money; i++) parent[i].clear();\n    coins[0] = 0;\n    for (int i = 1; i <= money; i++)\n    {\n        coins[i] = INF;\n        for (int j = 0; j < n; j++)\n            if (i >= denom[j] && coins[i - denom[j]] != INF)\n            {\n                if (coins[i] > coins[i - denom[j]] + 1)\n                {\n                    coins[i] = coins[i - denom[j]] + 1;\n                    parent[i].clear();\n                    parent[i].push_back(denom[j]);\n                }\n                else if (coins[i] == coins[i - denom[j]] + 1)\n                {\n                    parent[i].push_back(denom[j]);\n                }\n            }\n    }\n\n    if (coins[money] == INF) cout << \"No solution.\" << endl;\n    else\n    {\n        path.clear();\n        best.clear();\n        dfs(money);\n        cout << coins[money] << ' ';\n        bool plus = false;\n        for (auto p : best)\n        {\n            if (plus) cout << '+';\n            cout << p.first << '*' << p.second;\n            plus = true;\n        }\n        cout << '\\n';\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    int cases;\n    cin >> cases;\n    for (int cs = 1; cs <= cases; cs++)\n    {\n        cin >> n;\n        for (int i = 0; i < n; i++) cin >> denom[i];\n        sort(denom, denom + n);\n        n = unique(denom, denom + n) - denom;\n        double money;\n        cin >> money;\n        dp((int)(money * 100.0 + 0.5));\n    }\n    return 0;\n}\n```\n\n\n\u4f46\u662f\u7531\u4e8e\u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 $\\operatorname{STL}$ \u8f83\u591a\uff0c\u800c\u672c\u9898\u5e76\u672a\u5f00\u542f $\\operatorname{O_2}$ \u4f18\u5316\uff0c\u56e0\u6b64\u5bf9\u4e8e\u540e\u9762\u51e0\u4e2a\u6d4b\u8bd5\u70b9\u4f1a\u53d1\u751f\u8d85\u65f6\uff0c\u9700\u8981\u81ea\u884c\u4f18\u5316\uff0c\u4ee5\u4e0b\u662f\u4e00\u79cd\u53ef\u884c\u7684 $\\operatorname{Accepted}$ \u4ee3\u7801\u3002\n\n\u9644\u6ce8\uff1a\u57fa\u4e8e [Macesuted](https://www.luogu.com.cn/user/98482) \u7684\u5efa\u8bae\uff0c\u5361 $\\operatorname{STL}$ \u5bf9\u53c2\u8d5b\u8005\u5e76\u4e0d\u53cb\u597d\uff0c\u56e0\u6b64\u4e0b\u8c03\u4e86\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\uff0c\u540c\u65f6\u63d0\u9ad8\u4e86\u65f6\u9650\u5230 $2.0s$\uff0c\u6240\u4ee5\u4f7f\u7528 $\\operatorname{STL}$ \u7684\u524d\u8ff0\u5b9e\u73b0\u4e5f\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\n\nint n, denom[110], coins[10010];\nint parent[10010][110], parentCnt[10010];\nint path[10010], best[10010];\nint pathCnt[10010], bestCnt[10010];\nint pathTotal, bestTotal;\n\nvoid dfs(int money)\n{\n    if (money > 0)\n    {\n        if (bestTotal)\n        {\n            for (int i = 0; i < pathTotal - 1; i++)\n            {\n                if (path[i] != best[i])\n                {\n                    if (to_string(path[i]) > to_string(best[i])) return;\n                    break;\n                }\n\n                if (pathCnt[i] != bestCnt[i])\n                {\n                    if (to_string(pathCnt[i]) > to_string(bestCnt[i])) return;\n                    break;\n                }\n            }\n        }\n        \n        for (int i = 0; i < parentCnt[money]; i++)\n        {\n            int m = parent[money][i];\n            if (pathTotal && m < path[pathTotal - 1]) continue;\n            if (m == path[pathTotal -1]) pathCnt[pathTotal - 1]++;\n            else path[pathTotal] = m, pathCnt[pathTotal]++, pathTotal++;\n            dfs(money - m);\n            pathCnt[pathTotal - 1]--;\n            if (pathCnt[pathTotal - 1] == 0)\n            pathTotal--;\n        }\n    }\n    else\n    {\n        \n        if (bestTotal)\n        {\n            for (int i = 0; i < pathTotal; i++)\n            {\n                if (path[i] != best[i])\n                {\n                    if (to_string(path[i]) > to_string(best[i])) return;\n                    break;\n                }\n\n                if (pathCnt[i] != bestCnt[i])\n                {\n                    if (to_string(pathCnt[i]) > to_string(bestCnt[i])) return;\n                    break;\n                }\n            }\n        }\n        \n        bestTotal = pathTotal;\n        for (int i = 0; i < pathTotal; i++)\n            best[i] = path[i], bestCnt[i] = pathCnt[i];\n    }\n}\n\nvoid dp(int money)\n{\n    for (int i = 0; i <= money; i++) parentCnt[i] = 0;\n    coins[0] = 0;\n    for (int i = 1; i <= money; i++)\n    {\n        coins[i] = INF;\n        for (int j = 0; j < n; j++)\n            if (i >= denom[j] && coins[i - denom[j]] != INF)\n            {\n                if (coins[i] > coins[i - denom[j]] + 1)\n                {\n                    coins[i] = coins[i - denom[j]] + 1;\n                    parentCnt[i] = 0;\n                    parent[i][parentCnt[i]++] = denom[j];\n                }\n                else if (coins[i] == coins[i - denom[j]] + 1)\n                {\n                    parent[i][parentCnt[i]++] = denom[j];\n                }\n            }\n    }\n\n    if (coins[money] == INF) cout << \"No solution.\" << endl;\n    else\n    {\n        bestTotal = pathTotal = 0;\n        memset(bestCnt, 0, sizeof bestCnt);\n        memset(pathCnt, 0, sizeof pathCnt);\n        dfs(money);\n        cout << coins[money] << ' ';\n        bool plus = false;\n        for (int i = 0; i < bestTotal; i++)\n        {\n            if (plus) cout << '+';\n            cout << best[i] << '*' << bestCnt[i];\n            plus = true;\n        }\n        cout << '\\n';\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    int cases;\n    cin >> cases;\n    for (int cs = 1; cs <= cases; cs++)\n    {\n        cin >> n;\n        for (int i = 0; i < n; i++) cin >> denom[i];\n        sort(denom, denom + n);\n        n = unique(denom, denom + n) - denom;\n        double money;\n        cin >> money;\n        dp((int)(money * 100.0 + 0.5));\n    }\n    return 0;\n}\n```",
        "postTime": 1604536303,
        "uid": 333388,
        "name": "metaphysis",
        "ccfLevel": 0,
        "title": "T4 \u81ea\u52a8\u5151\u6362\u673a"
    }
]