[
    {
        "content": "Problem\n------------\n\u60f3\u8981\u6570\u636e\u7684\u53ef\u4ee5\u53bbCode+\u4e0a\u4e0b\u8f7d\n\n\u9898\u610f\uff1a\n\u7ed9\u5b9a$n$\u4e2a\u70b9\uff0c\u6c42\u4ece$s$\u5230$t$\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5176\u4e2d\u6709\u4e24\u79cd\u8d70\u6cd5\uff08\u53ef\u4ee5\u6df7\u642d\uff09\uff1a\u4e00\u79cd\u662f\u8d70\u7ed9\u5b9a\u7684$m$\u6709\u5411\u8fb9$(u_i,v_i,w_i)$\uff1b\u53e6\u4e00\u79cd\u53ef\u4ee5\u7531\u4efb\u610f\u70b9$x$\u5230\u4efb\u610f\u70b9$y$\uff0c\u5176\u8d39\u7528\u662f$c*(x$ $xor$ $y)$\n\nSolution\n------------\n\n\u660e\u663e\u4e0d\u80fd\u76f4\u63a5$n^2$\u5efa\u8fb9\uff0c\u4e3a\u4e86\u591a\u9a97\u70b9\u5206\u53ef\u80fd\u4f1a\u60f3\u5230\u53ef\u4ee5dijkstra\u5728\u8fc7\u7a0b\u4e2d\u5728\u7ebf\u52a0\u8fb9\uff0c\u5904\u7406\u5230\u91cd\u70b9\u4e3a\u6b62\n\n\u4f46\u8fd9\u6837\u7684\u6700\u574f\u590d\u6742\u5ea6\u4f9d\u65e7\u662f\u8dd1\u4e0d\u8fc7\u7684\uff08code+\u4e0a\u8fd9\u9898\u7684\u6d4b\u8bd5\u70b9\u670999\u4e2a\uff0c\u9a97\u5206\u57fa\u672c\u9a97\u4e0d\u6ee1\uff09\n\n\u672c\u7740\u5728\u4efb\u610f\u4e00\u4e2a\u6b63\u89e3\u4e2d\u7edd\u5bf9\u4e0d\u53ef\u80fd\u5904\u7406\u6240\u6709\u7684$n^2+m$\u6761\u8fb9\uff0c\u53d1\u73b0\u6709\u4e00\u4e9b\u8fb9\u53ef\u4ee5\u88ab\u5176\u4ed6\u8fb9\u66ff\u4ee3\uff0c\u6bd4\u5982\u4e24\u4e2a\u6570\u5f02\u6216\u503c\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6709\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u76841\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u503c\u5206\u522b\u4e3a\u8fd9\u4e24\u4e2a1\u7684\u8fb9\u5408\u5e76\u800c\u6210\n\n>\u6bd4\u5982\uff1a$3$ $xor$ $6$ $= 5$  $\\Leftrightarrow$ $11_2$ $xor$ $110_2 = 101_2$\n>5 \u4e8c\u8fdb\u5236\u4e0b\u6709\u4e4b\u95f4\u6709\u4e24\u4e2a 1\n>\u90a3\u4e48\u8fd9\u4e2a\u503c\u53ef\u4ee5\u7531 $100_2$ \u548c $1_2$\u8fd9\u4e24\u4e2a\u503c\u5408\u5e76\u800c\u5f97\n>\u5373\u8fb9$(3,6)=(3,7)+(7,6)$\n>\u5176\u6743\u503c\u5bf9\u5e94\u4e3a\n>$101_2$ $100_2$ $1_2$\n\n\u5219\u5bf9\u4e8e\u4efb\u610f\u70b9$x$\uff0c\u53ea\u7528\u8003\u8651\u7ed9\u5b9a\u8fb9\u548c\u5230$\\{v|v=x$ $xor$ $ 2^k,k\\in N,v<=n\\}$\u7684\u8fb9\u5373\u53ef\uff0c\u5176\u4ed6\u8fb9\u7684\u6548\u7528\u5b9a\u53ef\u4ee5\u88ab\u8fd9\u4e9b\u8fb9\u7684\u7ec4\u5408\u5305\u542b\uff0c\u5219\u5bf9\u4e8e\u70b9$x$\uff0c\u7b2c\u4e8c\u7c7b\u8fb9\u53ea\u6709$\\log_2x$\u6761\n\n\u5219\u95ee\u9898\u7b80\u5316\u5230\u53ea\u6709$n\\log n+m$\u6761\u8fb9\u4e86\uff0c$SPFA$\u76ee\u6d4b\u4f1a\u6302\uff08\u670999\u4e2a\u6d4b\u8bd5\u70b9\uff09\uff0c\u7528$dijkstra$\uff08\u535a\u4e3b\u7528\u7684\u662f$dijkstra$\u7684\u7ebf\u6bb5\u6811\u4f18\u5316\uff09\n\n\u6ce8\u610f$0$\u53f7\u7ed3\u70b9\u4e5f\u9700\u8981\u8003\u8651\uff08\u6709\u53ef\u80fd\u4e24\u4e2a\u8282\u70b9\u7f16\u53f7\u6309\u4f4d\u4e0e\u4e3a$0$\uff09\uff0c\u5e76\u628a\u5f02\u6216\u503c\u63a7\u5236\u5728$n$\u4ee5\u5185\uff08\u51fa\u4e86$n$\u8303\u56f4\u7684\u70b9\u4e00\u5b9a\u53ef\u4ee5\u7528$0$\u53f7\u8282\u70b9\u89e3\u51b3\uff09\n\nCode\n---------\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rg register\n#define cl(x) memset(x,0,sizeof(x))\n#define max(x,y) ((x)>(y)?(x):(y))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define abs(x) ((x)>0?(x):(-(x)))\n\ntemplate <typename _Tp> inline _Tp read(_Tp&x){\n\trg char c11=getchar(),ob=0;x=0;\n\twhile(c11^'-'&&!isdigit(c11))c11=getchar();if(c11=='-')c11=getchar(),ob=1;\n\twhile(isdigit(c11))x=x*10+c11-'0',c11=getchar();if(ob)x=-x;return x;\n}\n\nconst int N=201000,M=1001000,inf=2147483647;\nstruct Edge{int v,w,nxt;}a[M];\nint head[N],dis[N],seg[N<<2];\nchar bo[N];\nint n,m,c,_,ds,s,t;\n\ninline void add(int u,int v,int w){a[++_].v=v,a[_].w=w,a[_].nxt=head[u],head[u]=_;}\n\n#define mid (((l)+(r))>>1)\n\ninline void build(int l,int r,int x){\n\tif(l==r){seg[x]=inf;return ;}\n\tbuild(l,mid,x<<1);\n\tbuild(mid+1,r,x<<1|1);\n\tseg[x]=inf;\n\tif(~seg[x<<1])seg[x]=min(seg[x],seg[x<<1]);\n\tif(~seg[x<<1|1])seg[x]=min(seg[x],seg[x<<1|1]);\n\treturn ;\n}\n\ninline void update(int l,int r,int x,int pos,int t){\n\tif(l==r){seg[x]=min(seg[x],t);return ;}\n\tif(pos<=mid)update(l,mid,x<<1,pos,t);\n\telse update(mid+1,r,x<<1|1,pos,t);\n\tseg[x]=inf;\n\tif(~seg[x<<1])seg[x]=min(seg[x],seg[x<<1]);\n\tif(~seg[x<<1|1])seg[x]=min(seg[x],seg[x<<1|1]);\n\treturn ;\n}\n\ninline int query(int l,int r,int x){\n\tif(l==r){ds=seg[x];return l;}\n\tif(seg[x]==seg[x<<1])return query(l,mid,x<<1);\n\telse if(seg[x]==seg[x<<1|1])return query(mid+1,r,x<<1|1);\n\telse return -1;\n}\n\n#undef mid\n\nvoid spath(){\n\tbuild(0,n,1);\n\tupdate(0,n,1,s,0);\n\twhile(!bo[t]){\n\t\trg int x=query(0,n,1);\n\t\tbo[x]=1;dis[x]=ds;\n\t\tupdate(0,n,1,x,-1);\n\t\tfor(rg int i=head[x];i;i=a[i].nxt)\n\t\t\tif(!bo[a[i].v])update(0,n,1,a[i].v,dis[x]+a[i].w);\n\t\tfor(rg int i=1;i<=n;i<<=1)\n\t\t\tif(!bo[x^i]&&(x^i)<=n)update(0,n,1,x^i,dis[x]+c*i);\n\t}\n\treturn ;\n}\n\nint main(){\n\tread(n);read(m);read(c);\n\tfor(rg int i=0,x,y,z;i<m;++i)read(x),read(y),read(z),add(x,y,z);\n\tread(s);read(t);\n\tspath();\n\tprintf(\"%d\\n\",dis[t]);\n\treturn 0;\n}\n```\n",
        "postTime": 1523610042,
        "uid": 22112,
        "name": "Mirach",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4366 \u3010[Code+#4]\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "#### [\u9898\u76ee\u4f20\u9001\u95e8~](https://www.luogu.com.cn/problem/P4366)\n\n------------\n\n\n# \u601d\u8def\n\n------------\n\n\u521a\u770b\u5230\u8fd9\u9053\u9898\uff0c\u672c\u849f\u84bb\u7684\u7b2c\u4e00\u60f3\u6cd5\u662f**\u5efa\u4e00\u4e2a\u5b8c\u5168\u56fe**\uff0c\u518d\u8dd1\u6700\u77ed\u8def\u3002\u4f46\u662f\u770b\u4e00\u773c**\u6570\u636e**\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/16868.png)\n(~~\u826f\u5fc3\u6570\u636e\uff0ci\u4e86i\u4e86~~)\n\n**$10^5$ \u7684 N**\uff0c\u5efa\u6210\u5b8c\u5168\u56fe\u2026\u2026\u55ef\uff0c\u8fb9\u90fd\u5b58\u4e0d\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8f6c\u6362\u4e00\u4e0b\u601d\u8def\uff0c\u60f3\u529e\u6cd5\u51cf\u5c11\u8fb9\u7684\u6570\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u9898\u76ee\u4e2d\u770b\u5230\uff1a\n\n**\u5bf9\u4e8e\u4efb\u610f\u7684\u4e24\u5ea7\u57ce\u5e02 i \u548c j \uff0c\u4f01\u9e45\u4eec\u53ef\u4ee5\u82b1\u8d39 $( i~\\mathrm{xor}~j) \\times C $ \u7684\u65f6\u95f4\u4ece\u57ce\u5e02 i \u8d70\u5230\u57ce\u5e02 j \u3002**\n\n\u8fd9\u4fbf\u662f\u51cf\u5c11\u8fb9\u6570\u7684\u5173\u952e\uff0c\u4e3a\u4ec0\u4e48\u5450\uff1f\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\n\n- 1. \u82e5\u6211\u4eec\u7684\u8d77\u70b9\u662f 1\uff0c\u7ec8\u70b9\u662f 7\u3002\n- 2. \u5148\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff0c\u5373 $(001)_2 $\uff0c\u548c $(111)_2$\u3002\n- 3. \u76f4\u63a5\u4ece 1 \u8d70\u5230 7 \uff0c\u90a3\u4e48\u4ee3\u4ef7\u5c31\u662f 6C\u3002\n- 4. \u5982\u679c\u6211\u4eec\u6309\u4f4d\u8d70\uff1a\n- 5. \u5148\u4ece $(001)_2$ \u8d70\u5230 $(011)_2$\uff0c\u4ee3\u4ef7\u4e3a 2C\uff0c\n- 6. \u518d\u4ece $(011)_2$ \u8d70\u5230 $(111)_2$\uff0c\u4ee3\u4ef7\u4e3a 4C\u3002\n- 7. \u6211\u4eec\u53d1\u73b0\uff0c\u7b2c\u4e8c\u79cd\u548c\u7b2c\u4e00\u79cd\u8d70\u6cd5\u7684\u4ee3\u4ef7\u4e00\u6837\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u8981**\u6bcf\u4e00\u4e2a\u70b9\u548c $2^k$ \u5f02\u6216\uff0c\u5c31\u80fd\u4ece\u5f53\u524d\u70b9\u8d70\u5230\u4efb\u4f55\u4e00\u4e2a\u70b9\uff0c\u4e14\u4ee3\u4ef7\u4e0d\u53d8\uff08\u4e8c\u8fdb\u5236\u561b\uff09**\u3002\u56e0\u6b64\u9700\u8981\u8dd1\u4e00\u904d\u5faa\u73af\u6765\u5efa\u8fb9\uff0c\u8ba9\u5faa\u73af\u5230\u7684\u70b9  i  $\\rightarrow$ $( i~\\mathrm{xor}~2^k)$ \u5f97\u5230\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff0c\u7136\u540e\u5f97\u5230\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u4e3a\uff1a\n$$ ( i~\\mathrm{xor}~(i + 2^k)) \\times C $$\n\u5316\u7b80\u5f97\uff1a\n$$  2^k \\times C $$\n\n\u540c\u65f6\u6211\u4eec\u8fd8\u9700\u8981\u6ce8\u610f\uff0c**$i + 2^k$ \u4e0d\u80fd\u5927\u4e8e n\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u52a0\u4e00\u4e2a\u8fb9\u754c\u3002**\n$$ i + 2^k <= n$$\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u4e50\u5730\u5199\u4ee3\u7801\u4e86~\n\n**\u4f46\u662f\uff0c\u8fd9\u9053\u9898\u7528\u5806\u4f18\u5316\u7684 $dijkstra$ \u4f1a TLE \u51e0\u4e2a\u70b9\uff0c\u6240\u4ee5\u672c\u849f\u84bb\u5c31\u5199\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4f18\u5316\u7684\u4ee3\u7801\uff0c\u8dd1\u7684\u901f\u5ea6\u8fd8\u4e0d\u6233\u3002**\n\n[\u672a\u5f00$O^2$](https://www.luogu.com.cn/record/43657907)\n\n[\u5f00$O^2$](https://www.luogu.com.cn/record/43647412)\n\n------------\n\n\n# \u4ee3\u7801\n\n------------\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define re register\nusing namespace std;\n\ntypedef long long ll;\n\ninline char nc () {  //fread\u5feb\u8bfb\n\tstatic char buf[100000], *p1 = buf, *p2 = buf;\n\treturn p1 == p2 && (p2 = (p1 = buf) + fread (buf, 1, 100000, stdin), p1 == p2) ? EOF : *p1++;\n}\n\ninline int read () {\n\tre int x(0), f(1); char ch = nc ();\n\twhile (ch < '0' || ch > '9') {if (ch == '-') f = ~f +1; ch = nc ();}\n\twhile (ch >= '0' && ch <= '9') {x = (x<<3) + (x<<1) + (ch^48); ch = nc ();}\n\treturn x * f;\n}\n\nconst int N = 1500010;  //\u8bd5\u51fa\u6765\u7684\u4e00\u4e2a\u5e38\u6570\nconst int inf = 0x3f3f3f3f;\nint n, m ,c;\nint start, m_end;\n\nstruct edge {int v; int w; int nxt;} e[N<<1];\n\nint head[N], cnt;\n\ninline void add (re int u ,re int v , re int w) {\n\te[++cnt] = (edge){v, w, head[u]};\n\thead[u] = cnt;\n} \n\ninline int ls (int s) {return s<<1;}\ninline int rs (int s) {return s<<1|1;}\n\nint minv[N<<2], minp[N<<2];\n\ninline void push_up (int o) {\n\tre int lc = ls (o);\n\tre int rc = rs (o);\n\tif (minv[lc] <= minv[rc]) {\n\t\tminv[o] = minv[lc];\n\t\tminp[o] = minp[lc];\n\t}\n\telse {\n\t\tminv[o] = minv[rc]; \n\t\tminp[o] = minp[rc];\n\t}\n}\n\nvoid build (re int o ,re int l ,re int r) {\n\tif (l == r) {\n\t\tminv[o] = inf;\n\t\tminp[o] = l;\n\t\treturn ;\n\t}\n\tre int mid = (l + r) >> 1;\n\tbuild (ls(o), l, mid);\n\tbuild (rs(o), mid + 1, r);\n\tpush_up (o);\n}\n\nvoid modfity (re int o, re int l ,re int r ,re int p ,re int w) {\n\tif (l == r) {minv[o] = w; return ;}\n\tre int mid = (l + r) >> 1;\n\tif (p <= mid) modfity (ls(o), l, mid, p, w);\n\telse modfity (rs(o), mid + 1, r, p, w);\n\tpush_up (o);\n}\n\nint dis[N];\n\nvoid dijkspfa (re int s) {\n\tbuild (1, 0, n);\n\tmodfity (1, 0, n, s, 0);\n\tmemset (dis, 0x3f3f3f3f, sizeof (dis));\n\tdis[s] = 0;\n\twhile (minv[1] != inf) {\n\t\tre int u = minp[1];\n\t\tmodfity (1, 0, n, u, inf);\n\t\tfor (re int i (head[u]); i; i = e[i].nxt) {\n\t\t\tif (dis[u] + e[i].w < dis[e[i].v]) {\n\t\t\t\tdis[e[i].v] = dis[u] +e[i].w;\n\t\t\t\tmodfity (1, 0, n, e[i].v, dis[e[i].v]);\n\t\t\t}\n\t\t}\n\t}\n}  //\u4ee5\u4e0a\u4ee3\u7801\u4e0d\u7406\u89e3\u7684\uff0c\u53ef\u4ee5\u6362\u6210\u5806\u4f18\u5316\u7684dijkstra\uff0c\uff08\u4e0d\u8fc7\u8981\u5438\u6c27\uff09\n\nint main () {\n\tn = read (), m = read (), c = read ();\n\tfor (re int i(1); i <= m; ++i) {\n\t\tre int u = read (), v = read (), w = read ();\n\t\tadd (u, v, w);\n\t}\n\tfor (register int i(0); i <= n; ++i) {  //\u5173\u952e\u4ee3\u7801\uff1a\u5efa\u56fe\n\t\tfor (register int j(1); j <= 20; ++j) {  //\u8fd9\u91cc\u5faa\u73af\u523020\u6b21\u65b9\u5c31\u53ef\u4ee5\n\t\t\tint qwq = i ^ (1 << j); \n\t\t\tif (qwq <= n) add (i, qwq, c * (1 << j));\n\t\t}\n\t}  \n\tstart = read (), m_end = read (); \n\tdijkspfa (start);\n\tprintf (\"%d\", dis[m_end]);\n\treturn 0;\n}\n```\n\n\n------------\n\n\uff08[\u6084\u6084\u8981\u4e2a\u5173\u6ce8](https://www.luogu.com.cn/user/361432)\uff0c\u4e0d\u8fc7\u5206\u5427\uff0cqwq\uff09",
        "postTime": 1607851194,
        "uid": 361432,
        "name": "Froranzen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4366 \u3010[Code+#4]\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "\u5febNOIP\u4e86\uff0c\u5374\u505a\u4e0d\u4e0b\u53bb\u9898\uff0c\u4e8e\u662f\u5199\u7bc7\u9898\u89e3\u5427\u3002\u8fd9\u9898\u6211\u662f\u5f00O2\u8fc7\u7684\uff0c\u6240\u4ee5\u8fd9\u7bc7\u9898\u89e3\u80fd\u4e0d\u80fd\u8fc7\u4e5f\u4e0d\u77e5\u9053\uff0c\u4f46\u5e0c\u671bCZdalao\u80fd\u653e\u6211\u4e00\u9a6c~~\u5b89\u6170\u4e00\u4e0b\u6211\u5e7c\u5c0f\u7684\u5fc3\u7075~~\n\n\u8fd9\u9898\u4e3b\u8981\u662f\u5efa\u56fe\u6bd4\u8f83\u96be\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u90fd\u662f\u6709\u53ef\u80fd\u8054\u901a\u7684\uff0c\u5982\u679c\u66b4\u529b\u5efa\u56fe\u7684\u8bdd\u6700\u574f\u8981\u5efa10\u768410\u6b21\u65b9\u4e2a\u8fb9\uff0c\u8fd9\u7edd\u5bf9\u662f128MB\u627f\u53d7\u4e0d\u4e86\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8003\u8651\u7684\u662f\u5982\u4f55\u7f29\u5c0f\u5efa\u56fe\u7684\u89c4\u6a21\uff0c\u5f02\u6216\u662f\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff0c\u5f02\u6216\u7684\u6027\u8d28\u5c31\u662f\u540c0\u5f021\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u6570xor\u53e6\u4e00\u4e2a\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u4eec\u62c6\u6210\u4e24\u90e8\u5206\u6765\u89e3\u51b3\uff0c\u6bd4\u65b9\u8bf4$$6xor9=15$$\n\u5b83\u5c31\u7b49\u4ef7\u4e8e\u4e8c\u8fdb\u5236\u4e0b\uff08\u4e3a\u4e86\u597d\u7406\u89e3\u90fd\u5199\u62104\u4f4d\uff09$$0110xor1001=1111$$\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u62c6\u6210$$1100xor0011=1111$$\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u800c1100\u548c0011\u53c8\u53ef\u4ee5\u7ee7\u7eed\u62c6\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u80fd\u7701\u7565\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8fb9\uff0c\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u5efaXxor2\u7684k\u6b21\u65b9\u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff0c\u5efa\u8fb9\u4ee3\u7801\u5982\u4e0b(build_tu_automachine\u4e2d\u6587\u7ffb\u8bd1\uff0c\u5efa\u8fb9\u81ea\u52a8\u673a):\n```cpp\nvoid build_tu_automachine()\n{\n    for(int i=0;i<=n;i++) \n    {\n        for(int j=1;j<=n;j<<=1) \n        {\n            if((i^j)>n) continue;\n            add(i,i^j,j*c);\n        }\n    }\n}\n```\n\n\u7136\u540e\u5c31\u662f\u8fea\u6770\u65af\u7279\u62c9\u8dd1\uff08\u5806\u4f18\u5316\uff09\u6700\u77ed\u8def\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long inf=2147483647;\nstruct edge{\n    int u,v,w,next;\n}e[500010+20*100010];\nint head[100010],cnt,n,m,c,vis[100010],dis[100010];\nint a,b;\nstruct node{\n    int w,now;\n    inline bool operator <(const node &x)const\n    {\n        return w>x.w;\n    }\n};\npriority_queue<node> q;\nvoid add(int u,int v,int w)\n{\n    e[++cnt].u=u;\n    e[cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\nvoid dj()\n{\n    for(int i=1;i<=n;i++)\n    {\n        dis[i]=inf;\n    }\n    dis[a]=0;\n    q.push(node{0,a});\n    while(!q.empty())\n    {\n        node x=q.top();\n        q.pop();\n        int u=x.now;\n        if(vis[u])\n        continue;\n        vis[u]=1;\n        for(int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].v;\n            if(dis[v]>dis[u]+e[i].w)\n            {\n                dis[v]=dis[u]+e[i].w;\n                q.push((node){dis[v],v});\n            }\n        }\n    }\n}\nvoid build_tu_automachine()\n{\n    for(int i=0;i<=n;i++) \n    {\n        for(int j=1;j<=n;j<<=1) \n        {\n            if((i^j)>n) continue;\n            add(i,i^j,j*c);\n        }\n    }\n}\nint main()\n{\n    cin>>n>>m>>c;\n    build_tu_automachine();\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        cin>>x>>y>>z;\n        add(x,y,z);\n    }\n    cin>>a>>b;\n    dj();\n    cout<<dis[b]<<\" \";\n}\n\n```\n\n\u6c42\u8fc7QAQ",
        "postTime": 1541424697,
        "uid": 94437,
        "name": "philosopherchang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4366 \u3010[Code+#4]\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "# \u9898\u76ee\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\u70b9\u8fd9\u91cc](https://www.luogu.org/problem/P4366)\u770b\u9898\u76ee\u3002\n# \u5206\u6790  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u66b4\u529b\u5efa\u8fb9\u80af\u5b9a\u4e0d\u884c\u3002\u800c\u5728\u7b97\u6cd5\u4e0a......\u597d\u50cf\u4e5f\u6ca1\u4ec0\u4e48\u53ef\u884c\u7684\u7279\u6b8a\u7b97\u6cd5......  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u4e00\u7b79\u83ab\u5c55\u7684\u4f60\u6c89\u601d\u4e86\u4e00\u9635\uff0c\u7a81\u7136\uff0c\u4f60\u62ac\u8d77\u4e86\u5934\uff0c\u60ca\u559c\u5730\u5927\u53eb\uff1a\u201c~~\u51fa\u9898\u4eba\u4f60\u51fa\u9505\u4e86~~\u8fb9\u4e2d\u6709\u65e0\u7528\u7684\uff01\u201d  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$Exactly!$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u663e\u7136\uff0c\u5982\u679c\u4e24\u4e2a\u6570\u5728\u4e8c\u8fdb\u5236\u4e0a\u6709\u8d85\u8fc7\u4e00\u5904\u7684\u4e0d\u540c\u5904\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7ecf\u8fc7\u591a\u6761\u8fb9\u4ee3\u66ff\u76f4\u63a5\u8d70\u5230\uff0c\u5e76\u4e14\u82b1\u8d39\u4e0d\u53d8\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6bd4\u5982\uff0c\u4ece$1$\u8d70\u5230$6$\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u9996\u5148\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff1a$(001)_2$\u548c$(110)_2$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u5c1d\u8bd5\u901a\u8fc7\u4e00\u4f4d\u4e00\u4f4d\u5730\u8ba9\u8d70\u5230\u76ee\u6807\u8282\u70b9\uff1a  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(001)_2\\rightarrow (101)_2$\uff0c\u82b1\u8d39$4C$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(101)_2\\rightarrow (100)_2$\uff0c\u82b1\u8d39$C$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(100)_2\\rightarrow (110)_2$\uff0c\u82b1\u8d39$2C$  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u603b\u8ba1$7C$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u800c\u5982\u679c\u76f4\u63a5\u4ece$1$\u8d70\u5230$6$\u7684\u8bdd\uff0c\u82b1\u8d39\u4e5f\u662f$7C$\u3002  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\u6309\u7167\u8fd9\u79cd\u65b9\u6cd5\uff0c\u8fb9\u7684\u6570\u91cf\u76f4\u63a5\u5c31\u4ece$O(n^2)$\u964d\u6210\u4e86$O(n\\times log_2(N))$\u3002\u7136\u540e\u518d\u65b0\u7684\u56fe\u4e0a\u8dd1$Dijkstra$\u5c31\u53ef\u4ee5\u4e86\u3002\n# \u4ee3\u7801\n```cpp\n#include <cmath>\n#include <queue>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nconst int MAXN = 1e5 + 5, MAXM = 5e5 + 5, MAXLOG = 17;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\nstruct edge\n{\n\tint to, nxt, w;\n}Graph[MAXN * MAXLOG * 4 + MAXM];\n\nstruct node\n{\n\tint u, dis;\n\tnode(){}\n\tnode( const int U, const int Dis )\n\t{\n\t\tu = U, dis = Dis;\n\t}\n\tbool operator < ( const node & other ) const\n\t{\n\t\treturn ! ( dis < other.dis );\n\t}\n};\n\npriority_queue<node> q;\n\nint dis[2 * MAXN];\nint head[2 * MAXN];\nint N, M, A, B, C, cnt, lg2;\nbool visited[2 * MAXN];\n\nvoid addEdge( const int from, const int to, const int W )\n{\n\tcnt ++;\n\tGraph[cnt].nxt = head[from];\n\tGraph[cnt].to = to;\n\tGraph[cnt].w = W;\n\thead[from] = cnt;\n}\n\nint Dijkstra( const int sta, const int tar )\n{\n\twhile( ! q.empty() ) q.pop();\n\tmemset( dis, 0x3f, sizeof( dis ) );\n\tmemset( visited, false, sizeof( visited ) );\n\tdis[sta] = 0;\n\tq.push( node( sta, 0 ) );\n\tnode h;\n\tint v, w;\n\twhile( ! q.empty() )\n\t{\n\t\th = q.top();\n\t\tq.pop();\n\t\tif( visited[h.u] ) continue;\n\t\tif( h.u == tar ) return h.dis;\n\t\tvisited[h.u] = true;\n\t\tfor( int i = head[h.u] ; i ; i = Graph[i].nxt )\n\t\t{\n\t\t\tv = Graph[i].to, w = Graph[i].w;\n\t\t\tif( ! visited[v] )\n\t\t\t{\n\t\t\t\tif( dis[v] > dis[h.u] + w )\n\t\t\t\t{\n\t\t\t\t\tdis[v] = dis[h.u] + w;\n\t\t\t\t\tq.push( node( v, dis[v] ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n\nint main()\n{\n\tint fr, to, W;\n\tread( N ), read( M ), read( C );\n\tlg2 = log2( N );\n\tfor( int i = 1 ; i <= M ; i ++ )\n\t{\n\t\tread( fr ), read( to ), read( W );\n\t\taddEdge( fr, to, W );\n\t}\n\tfor( int i = 1 ; i <= N + ( 1 << lg2 ) ; i ++ )\n\t{\n\t\tfor( int j = 0 ; j <= lg2 ; j ++ )\n\t\t{\n\t\t\tto = i ^ ( 1 << j );\n\t\t\taddEdge( i, to, ( 1 << j ) * C );\n\t\t}\n\t}\n\tread( A ), read( B );\n\twrite( Dijkstra( A, B ) ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1565091605,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[P4366][Code+#4]\u6700\u77ed\u8def"
    },
    {
        "content": "\n### \u76f4\u63a5\u8bb2\u5173\u4e8e\u666e\u901a\u8def\u5f84\u7684\u5efa\u56fe\n1.\u6613\u8bc1\u4ece\u4efb\u610f $i$ \u57ce\u5e02\u5230 $j$ \u57ce\u5e02\u76f4\u63a5\u8d70\u8def\uff0c\u4ece $i$ \u76f4\u63a5\u8d70\u8fc7\u53bb\u662f\u6700\u8fd1\u8def\u5f84\u4e4b\u4e00\uff08\u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u6709\u6bd4\u76f4\u63a5\u8d70\u66f4\u8fd1\u7684\u4e86\uff09\n\n~~\u4e8b\u5b9e\u4e0a\u6211\u4e0d\u4f1a\u8bc1\u660e\uff0c\u4f46\u611f\u6027\u7406\u89e3\u5e94\u8be5\u662f\u8fd9\u6837\u7684~~\n\n2.\u5bf9\u4e8e\u67d0\u4e9b $i$ \u5230 $j$\uff0c\u6709\u5176\u5b83\u8def\u5f84\u53ef\u4ee5\u4f7f\u6b64\u8def\u5f84\u7684\u957f\u5ea6\u4e5f\u7b49\u4e8e $ixorj$\u3002\n\n3.\u5047\u8bbe $1$ \u4e3a\u8d77\u59cb\u70b9\uff0c\u4efb\u610f\u70b9\u4e3a\u7ec8\u70b9\uff0c\u53ef\u4ee5\u751f\u6210\u4e00\u68f5\u6811\u4f7f\u5f97\u4ece $1$ \u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e4b\u4e00\u90fd\u5728\u8fd9\u68f5\u6811\u4e0a\u3002\n\n4.\u7406\u89e3 $xor$ \u7684\u4f5c\u7528\uff0c\u6309\u4f4d\u76f8\u540c\u4e3a $0$\uff0c\u4e0d\u540c\u4e3a $1$ \u53ef\u4ee5\u8bc1\u660e           $(2^n+1)xor1$ \u662f\u4e0d\u53ef\u80fd\u6709\u9664\u76f4\u63a5\u8d70\u8fc7\u53bb\u4e4b\u5916\u5176\u5b83\u76f8\u540c\u957f\u5ea6\u7684\u8def\u5f84\u7684\u3002\n\n##### \u90a3\u4e48\u5982\u679c\u8fd9\u9053\u9898\u7684\u8d77\u59cb\u70b9\u4e3a $1$\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd9\u6837\u5199\u4ee3\u7801\uff1a\n```cpp\ninline void BuildTree(int x,int n)\n{\n\tif(x>N)\n\t\treturn;\n\tif(x==1)\n\t{\n\t\tif(x+(1<<n+1)<=N)\n\t\t\tBuildTree(x,n+1);\n\t\tAdd(x,x+(1<<n),(x^(x+(1<<n)))*C);\n\t\tAdd(x+(1<<n),x,(x^(x+(1<<n)))*C);\n\t\tBuildTree(x+(1<<n),n-1);\n\t}\n\telse\n\t{\n\t\tAdd(x,x-1,C);\n\t\tAdd(x-1,x,C);\n\t\tfor(int i=n;i>=1;i--)\n\t\t{\n\t\t\tif(x+(1<<i)<=N)\n\t\t\t{\n\t\t\t\tAdd(x,x+(1<<i),(x^(x+(1<<i)))*C);\n\t\t\t\tAdd(x+(1<<i),x,(x^(x+(1<<i)))*C);\n\t\t\t\tBuildTree(x+(1<<i),i-1);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}\n```\n 5.\u4e8b\u5b9e\u4e0a\u9898\u76ee\u8981\u6c42\u4ece\u4efb\u610f\u4e00\u70b9\u5230\u53e6\u4e00\u70b9\u7684\u6700\u77ed\u8def\u3002\n \n 6.\u6240\u4ee5\u8981\u8dd1 $n$ \u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\u2026\u2026\u2026\u2026\uff1f\n \n \u5148\u5904\u7406\u4e00\u4e0b\u3002\n \n \u5bf9\u4e8e $1$\uff1a\u5230 $(2^n+1)xor1$ \u8fd9\u4e2a\u70b9\u6ca1\u6709\u6700\u77ed\u8def\u5f84\uff0c\u5230\u5176\u5b83\u70b9\u53ef\u4ee5\u901a\u8fc7\u8fd9\u51e0\u4e2a\u70b9\u8d70\u51fa\u8ddf\u76f4\u63a5\u8d70\u8fc7\u53bb\u957f\u5ea6\u76f8\u540c\u7684\u8def\u5f84\u3002\n \n \u63a8\u5e7f\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a $i$,\u6709\u5230 $(2^n+i)xor i$ \u8fd9\u4e2a\u70b9\u76f4\u63a5\u8d70\u662f\u552f\u4e00\u6700\u77ed\u8def\u5f84\u3002\n \n \u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u4efb\u610f $i$ \u53f7\u70b9\u90fd\u8fde $(2^n+i)xori$ \u8fd9\u4e2a\u70b9\uff0c\u8fd9\u6837\u5efa\u56fe\u8dd1\u51fa\u6765\u6700\u77ed\u8def\u8dd1\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u8ddf\u539f\u56fe\u4e00\u6837\u7684\u957f\u5ea6\u3002\n \u6240\u4ee5\u6b63\u786e\u7684\u5efa\u56fe\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a\n ```cpp\ninline void BuildTree(int n)\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j<<=1)\n\t\t{\n\t\t\tif((i^j)>n)\n\t\t\t\tcontinue;\n\t\t\tAdd(i,i^j,j*C);\n\t\t}\n\t}\n}\n```\n\u5efa\u56fe\u5b8c\u6210\u4e4b\u540e\u518d\u8f93\u5165\u5feb\u6377\u901a\u9053\u518d\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u4e86\u3002\n\n###### \u9644\uff1a\u5806\u4f18\u5316\u8dd1 $Dijkstra$ \u4e5f\u8bb8\u4f1a\u8d85\u65f6\uff0c\u52a0\u4e2a\u5feb\u8bfb\u5427\uff01\n\n\n\n",
        "postTime": 1622543262,
        "uid": 335366,
        "name": "0htoAi",
        "ccfLevel": 0,
        "title": "4366\u9898\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u5bb9\u6613\u8ba9\u4eba\u8054\u60f3\u5230 **\u6700\u77ed\u8def**\uff0c\u4f46\u662f\u6700\u77ed\u8def\u9700\u8981\u5148 **\u5efa\u56fe**\uff1b\n\n\u66b4\u529b\u5efa\u51fa\u6240\u6709\u8fb9\u7684\u7b97\u6cd5\u663e\u7136\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5efa\u51fa $O(n^2 + m)$ \u6761\u8fb9\uff1b\n\n\u90a3\u4e48\u6211\u4eec\u8981\u8003\u8651\u80fd\u4e0d\u80fd **\u51cf\u5c11\u4e00\u4e9b\u8fb9** \uff0c\u4f7f\u8fb9\u7684\u6570\u91cf\u53ef\u4ee5\u63a5\u53d7\u3002\n\n\u4ece\u54ea\u91cc\u5165\u624b\u51cf\u5c11\u8fb9\u7684\u6570\u91cf\u5462\uff1f\u5f02\u6216\u6216\u8bb8\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u5207\u5165\u53e3\u3002\n\n\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n> \u5047\u8bbe\u6211\u4eec\u8981\u4ece $001_2$ \u5230 $010_2$\uff0c\u6211\u4eec\u8981\u82b1\u8d39 $2^0 + 2^1$ \u7684\u8d39\u7528\uff1b\n\u4f46\u662f\uff0c\u6700\u77ed\u8def\u6709\u4e00\u4e2a **\u4f18\u8d8a\u7684\u6027\u8d28**\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u62c6\u5f00\u6765\uff0c\u53ef\u4ee5\u5148\u4ece $001_2$ \u5230 $000_2$\uff0c\u518d\u4ece $000_2$ \u5230 $010_2$\uff0c**\u8d39\u7528\u662f\u4e00\u6837\u7684**\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $i$\uff0c\u53ea\u9700\u8981\u5efa $i$ \u5230 $i \\ XOR \\ 2^k$ \u7684\u8fb9\uff0c\u4e4b\u540e *Dijkstra* \u5c31\u53ef\u4ee5\u4e86\u54c8\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f **\u8fb9\u754c\u60c5\u51b5**\uff1a\u4ece $i$ \u5230 $j$ \u7ecf\u8fc7\u7684\u4e2d\u95f4\u70b9\u53ef\u80fd\u8d85\u8fc7 $n$\uff0c\u5bf9\u6b64\u6709 2 \u79cd\u5904\u7406\u65b9\u6cd5\uff1a\n\n1. \u5efa\u8fb9\u548c *Dijkstra* \u7684\u8303\u56f4\u8c03\u6574\u4e3a $[0,n]$\n2. \u5efa\u8fb9\u548c *Dijkstra* \u7684\u8303\u56f4\u8c03\u6574\u4e3a $[1, 2^k-1]\uff0ck = min \\{ k \\ | \\ n \\leq 2^k -1 \\}$\n\n---\n\n**\u65b9\u6cd5 1 \u7684\u4ee3\u7801**\n\n```c++\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\n\u00a0\nconst int maxn = 100007;\nconst int maxm = 2500007;\nint n, m, c;\nint edgenum, head[maxn], nxt[maxm], vet[maxm], val[maxm];\ninline void addedge(int u, int v, int w){\n\u00a0\u00a0\u00a0\u00a0++edgenum;\n\u00a0\u00a0\u00a0\u00a0vet[edgenum] = v;\n\u00a0\u00a0\u00a0\u00a0val[edgenum] = w;\n\u00a0\u00a0\u00a0\u00a0nxt[edgenum] = head[u];\n\u00a0\u00a0\u00a0\u00a0head[u] = edgenum;\n}\n\u00a0\ninline int read(){\n\u00a0\u00a0\u00a0\u00a0int f = 1, val = 0; char ch = getchar();\n\u00a0\u00a0\u00a0\u00a0while ((ch < '0' || ch > '9') && (ch != '-')) ch = getchar();\n\u00a0\u00a0\u00a0\u00a0if (ch == '-') f = -1, ch = getchar();\n\u00a0\u00a0\u00a0\u00a0while (ch >= '0' && ch <= '9') val = (val << 3) + (val << 1) + ch - '0', ch = getchar();\n\u00a0\u00a0\u00a0\u00a0return val * f;\n}\n\u00a0\nint dist[maxn];\nbool vis[maxn];\n#define pii pair<int, int>\npriority_queue< pii, vector< pii >, greater< pii > > Qmin;\nconst int INF = 1000000007;\ninline void Dijkstra(int s){\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i <= n; ++i){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vis[i] = false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dist[i] = INF;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0dist[s] = 0; Qmin.push( make_pair(0, s) );\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i <= n; ++i){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (!Qmin.empty() && vis[Qmin.top().second]) Qmin.pop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (Qmin.empty()) break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int u = Qmin.top().second; Qmin.pop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vis[u] = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int e = head[u]; e; e = nxt[e]){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int v = vet[e], cost = val[e];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (dist[v] > dist[u] + cost){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dist[v] = dist[u] + cost;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Qmin.push( make_pair(dist[v], v) );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n\u00a0\nint main(){\n\u00a0\u00a0\u00a0\u00a0n = read(); m = read(); c = read();\n\u00a0\u00a0\u00a0\u00a0for (int i = 1; i <= m; ++i){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int u = read(), v = read(), w = read();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addedge(u, v, w);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i <= n; ++i){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0; j < 20; ++j){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int to = i ^ (1 << j);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (to <= n) addedge(i, to, c * (1 << j));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0int A = read(), B = read();\n\u00a0\u00a0\u00a0\u00a0Dijkstra(A);\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0printf(\"%d\\n\", dist[B]);\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```\n\n**\u65b9\u6cd5 2 \u7684\u4ee3\u7801**\n\n```c++\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define pii pair<int,int>\nusing namespace std;\n\nconst int maxn = 200007;\nconst int maxm = 3000007;\nint n, m, C, lgn, A, B;\nint edgenum, hea[maxn], vet[maxm], nxt[maxm], val[maxm];\ninline void addedge(int u, int v, int cost){\n    ++edgenum;\n    vet[edgenum] = v;\n    val[edgenum] = cost;\n    nxt[edgenum] = hea[u];\n    hea[u] = edgenum;\n\n    //printf(\"%d -> %d (%d)\\n\", u, v, cost);\n} \n\ninline int read(){\n    int f=1, val=0; char ch=getchar();\n    while ((ch<'0'||ch>'9')&&(ch!='-')) ch=getchar();\n    if (ch=='-') f=-1,ch=getchar();\n    while (ch>='0'&&ch<='9') val=(val<<3)+(val<<1)+ch-'0',ch=getchar();\n    return val*f;\n}\n\nint dist[maxn];\nbool vis[maxn];\npriority_queue<pii, vector< pii >, greater< pii > > Qmin;\ninline void Dijkstra(int s){\n    for (int i = 1; i <= n; ++i){\n        vis[i] = false;\n        dist[i] = 1000000000;\n    }\n    dist[s] = 0; Qmin.push(make_pair(0, s));\n    for (int i = 1; i <= n; ++i){\n        while (!Qmin.empty() && vis[Qmin.top().second]) Qmin.pop();\n        if (Qmin.empty()) break;\n        int u = Qmin.top().second; Qmin.pop();\n        vis[u] = true;\n        for (int e = hea[u]; e; e = nxt[e]){\n            int v = vet[e], cost = val[e];\n            if (dist[v] > dist[u] + cost) dist[v] = dist[u] + cost, Qmin.push(make_pair(dist[v], v));\n        }\n    }\n}\n\nint main(){\n    n = read(); m = read(); C = read();\n    for (int i = 1; i <= m; ++i){\n        int u = read(), v = read(), cost = read();\n        addedge(u, v, cost);\n    }\n    lgn = floor(log2(n)) + 1;\n    n = (1 << lgn) - 1;\n\n    for (int i = 1; i <= n; ++i){\n        for (int j = 0; j < lgn; ++j)\n            addedge(i, i ^ (1 << j), (1 << j) * C);\n    }\n\n    A = read(); B = read();\n    Dijkstra(A);\n\n    printf(\"%d\\n\", dist[B]);\n    return 0;\n}\n```\n",
        "postTime": 1537924410,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4366 \u3010[Code+#4]\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "\u672c\u840c\u65b0\u4e22\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff1b\n\n\u65b9\u6cd5\uff1aDijkstra+\u5806\u4f18\u5316\uff1b\n\n\u7136\u540e\u6bcf\u4e2a\u70b9\u9700\u8981\u53e6\u5916\u591a\u5b58\u7684\u8fb9\uff0c\u5982\u4f55\u5b58\uff0c\u53e6\u5916\u51e0\u4f4d\u5927\u4f6c\u7684\u9898\u89e3\u5df2\u7ecf\u8bf4\u4e86\uff1b\n\n\u672c\u6765\u5806\u4f18\u5316\u6211\u662f\u5f00O2\u8fc7\u7684\uff0c\u4f46\u662f\u5f88\u4e0d\u7518\u5fc3\uff0c\u7136\u540e\u5c31\u60f3\u4e86\u60f3\uff0c\u5728Dijkstra\u66f4\u65b0\u70b9\u7684\u65f6\u5019\uff0c\u5982\u679c\u7ec8\u70b9\u66f4\u65b0\u8fc7\u4e86\uff0c\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u8df3\u51fa\u53bb\u4e86\uff0c\u60f3\u5230\u8fd9\u91cc\u672c\u840c\u65b0\u7acb\u9a6c\u5c31\u8bd5\u4e86\u8bd5\uff0c\u7ed3\u679c\uff1bemmm\n\u6ca1\u5f00O2\u603b\u8017\u65f67000ms+\uff1b\u6211\u770b\u4e86\u4e00\u773c\u5176\u4ed6\u5927\u4f6c\u7684\u9898\u89e3\u597d\u50cf\u6ca1\u5199\u8fd9\u4e2a\u4e1c\u897f\uff0c\uff08\u5e94\u8be5\u662f\u6211\u592a\u83dc\u4e86\u770b\u4e0d\u51fa\u6765\uff09\uff0c\u56e0\u6b64\u672c\u840c\u65b0\u4e22\u4e0a\u81ea\u5df1\u7684\u5904\u5973\u9898\u89e3\u221a\uff1b\n\n\u7136\u540e\uff0c\u5c31\u770b\u4ee3\u7801\u5427\uff1b\n\n```cpp\n#include<bits/stdc++.h>\n#define ilv inline void\n#define fo(I,J,K) for(int I=J;I<=K;I++)\nusing namespace std;\nconst int N=10e6\uff1b //\u8303\u56f4\u5f00\u5f97\u6709\u70b9\u5927\uff0c\u4e0d\u8fc7\u65e0\u4f24\u5927\u96c5emmm\nint n,m,dis[N],cnt=1,head[N],next[N],to[N],ww[N],cc,A,B,vis[N];\nilv add(const int u,const int v,const int w) //\u524d\u5411\u661f\u5b58\u8fb9\n{\n    to[cnt]=v;\n    ww[cnt]=w;\n    next[cnt]=head[u];\n    head[u]=cnt++;\n}\nstruct node{\n    int d,p;\n    node(int a,int b){d=a;p=b;}\n    bool operator <(const node &x)\n    const{return x.d<d;}\n};\npriority_queue<node> q;\n\nilv disj(const int s) //Dijkstra\n{\n    dis[s]=0;\n    q.push(node{0,s});\n    while(!q.empty())\n    {\n    \tif(vis[B]) break; //\u6211\u8bf4\u7684\u5c31\u662f\u8fd9\u53e5\uff0c\u52a0\u4e0a\u540e\u4e0d\u752802\u4e5f\u80fd\u8fc7\uff0c\u800c\u4e14\u8dd1\u5f97\u8d3c\u5feb\n    \tint pi=q.top().p;\n        q.pop();\n        if(vis[pi]) continue;\n        vis[pi]=1;\n        for(register int i=head[pi];i;i=next[i])\n        {\n            int ti=to[i];\n            if(dis[ti]>dis[pi]+ww[i])\n            {\n                dis[ti]=dis[pi]+ww[i];\n                if(!vis[ti])\n                q.push(node{dis[ti],ti});\n            }\n        }\n    }\n}\nilv ra(int &x) //\u5feb\u8bfb\n{\n    x=0;char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while('0'<=c&&c<='9') {x=(x<<3)+(x<<1)+(c^48);c=getchar();}\n}\nint main()\n{\n    int x,y,z;\n    ra(n);ra(m);ra(cc);\n    for(register int i=0;i<=n;i++)\n    {\n    dis[i]=21474833;//\u5728\u591a\u5b58\u8fb9\u7684\u65f6\u5019\u987a\u624b\u91cd\u7f6edis[]\n    for(register int j=1;j<=n;j<<=1) //\u8fd9\u4e2a\u5c31\u662f\u53e6\u5916\u51e0\u4f4d\u5927\u4f6c\u4ecb\u7ecd\u7684\u62c6\u8fb9 \n    {\n            if((i^j)>n) continue;\n            add(i,i^j,j*cc);\n    }\n\t}\n\tfor(register int i=1;i<=m;i++)\n    {\n        ra(x);ra(y);ra(z);\n        add(x,y,z);\n    }\n    ra(A);ra(B);\n    disj(A); //\u8dd1\u6700\u77ed\u8def\n    printf(\"%d \",dis[B]); //\u8f93\u51fa\n    return 0;//\u517b\u6210\u597d\u4e60\u60ef \u7ed3\u675f\n}\n```\n\n\n",
        "postTime": 1558332116,
        "uid": 146798,
        "name": "Sirius_Sakura",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4366 \u3010[Code+#4]\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd**\u66b4\u529b**\u7684\u505a\u6cd5\uff0c\u9002\u7528\u4e8e\u6700\u77ed\u8def\u521d\u5b66\u8005\u3002\uff08\n\n------------\n\n\u65e2\u7136\u9898\u76ee\u662f\u6700\u77ed\u8def\uff0c\u90a3\u5c31\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\u5457\u3002\n\n\u7136\u540e\u53d1\u73b0 $O(N^2)$ \u5efa\u8fb9\u5410\u8840\u3002\n\n\u8003\u8651\u5f02\u6216\u6027\u8d28\uff0c\u5f53\u4e24\u4e2a\u6570\u5728 2 \u8fdb\u5236\u4e0b\u67d0\u4e00\u4f4d\u4e0d\u540c\u65f6\uff0c\u82b1\u8d39\u52a0\u4e0a\u5f53\u524d\u6570\u4e58 $C$ \u3002\n\n\u90a3\u6211\u4eec\u8ba9\u5b83\u6bcf\u6b21\u5728 2 \u8fdb\u5236\u4e0b\u53ea\u53d8\u5316\u4e00\u4f4d\u4e0d\u5c31\u884c\u4e86\uff1f\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3fjmxj1e.png)\n\n\u7136\u540e\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94 $log(N)$ \u4e2a\u8282\u70b9\uff0c\u603b\u5171 $N\u00b7log(N)$ \u4e2a\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u4e3a\u5408\u7406\u3002\n\n\u7136\u540e\u66b4\u529b Dijkstra \uff0c\u53d1\u73b0\u6709\u53ef\u80fd TLE \u4e00\u7247\uff1f\uff08\u6211\u662f T \u4e86 14 \u4e2a\uff09 \n\n\u90a3\u4f18\u5316\u4e00\u4e0b\uff1a\n\n1. Dijkstra \u65f6\u4e00\u65e6\u627e\u5230\u7ec8\u70b9\u76f4\u63a5\u9000\u51fa\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u5176\u4f59\u90e8\u5206\u8fd0\u884c\u5b8c\u6210\n\n2. \u8003\u8651\u5efa\u8fb9\u65b9\u6cd5\uff0c\u56e0\u4e3a \u90bb\u63a5\u77e9\u9635 \u7a7a\u95f4\u590d\u6742\u5ea6\u5927\uff0c\u65e0\u7528\u5185\u5b58\u591a\uff0c\u6240\u4ee5\u7528 \u524d\u5411\u661f\uff08\u90bb\u63a5\u8868\uff09\u3002\n\n3. \u7136\u540e\u6211\u4eec\u60f3\uff0c\u4e3a\u4ec0\u4e48 \u90bb\u63a5\u77e9\u9635 \u6ca1\u6709\u5b8c\u5168\u6dd8\u6c70\uff1f\uff08\u6211\u521a\u5f00\u59cb\u5b66\u6700\u77ed\u8def\u662f\u53ea\u559c\u6b22\u7528\u5b83\uff09\u3002\n\n* \u597d\u5b66\u662f\u4e00\u65b9\u9762\uff0c\u53e6\u4e00\u65b9\u9762\u662f\u8fd0\u884c\u65f6\u8fde\u7eed\u7684\u5185\u5b58\u8bbf\u95ee\u901f\u5ea6\u5feb\uff0c\u5bf9\u4e8e\u7a20\u5bc6\u56fe\u6bd4\u524d\u5411\u661f\uff08\u90bb\u63a5\u8868\uff09\u5feb $233$ \u500d\u3002\n\n\n* \u5b58\u8fb9\u65b9\u5f0f\u662f\u901f\u5ea6\u74f6\u9888\u4e4b\u4e00\uff0c\u867d\u7136\u8fd9\u9898\u6211\u4eec\u4e0d\u80fd\u7528 \u90bb\u63a5\u77e9\u9635 \uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u4ed6\u7684\u4f18\u70b9\u3002\n\n\n\u5bf9\u4e8e\u4e0a\u9762\u6bcf\u4e2a\u8282\u70b9\u7684 $log(N)$ \u4e2a\u8fb9\uff0c\u7531\u4e8e\u662f\u7531\u5f53\u524d\u8282\u70b9\u5728 $2$ \u8fdb\u5236\u4e0b\u6539\u53d8\u4e00\u4f4d\u5f97\u6765\uff0c\u6240\u4ee5\u5e76\u4e0d\u7528\u5b58\u5165\u524d\u5411\u661f\u4e2d\uff0c\u53ea\u8981\u5728\u8fd9\u4e2a\u8282\u70b9\u53d6\u51fa\u65f6\u5f02\u6216\u4e0a $2^0 , 2^1 , 2^2......$ \u5c31\u884c\u4e86\uff0c\u901f\u5ea6\u63d0\u5347\u548c\u5185\u5b58\u8282\u7701\u975e\u5e38\u53ef\u89c2\u3002\n\n\n4.  \u5806\u4e5f\u53ef\u4ee5\u4f18\u5316\uff0c\u867d\u7136\u662f $O(log(N))$ \uff0c\u4f46\u662f\u5f53\u5b58\u5165\u8282\u70b9\u8fc7\u591a\u65f6\u4e5f\u4f1a\u5f88\u6162\uff0c\u800c\u4e14\u5185\u5b58\u5360\u7528\u4e5f\u4f1a\u53d8\u591a\u3002\n\n* \u90a3\u4e48\u6211\u4eec\u5f00\u4e00\u6570\u7ec4\uff0c\u4f7f\u5176\u540c\u4e00\u8282\u70b9\u4e0d\u540c\u8ddd\u79bb\u5165\u5806\u5355\u8c03\u5c31\u884c\u4e86\u3002\n\n\n------------\n\n\n\u867d\u7136\u4e0a\u9762\u7684\u4f18\u5316\u65b9\u6848\u770b\u8d77\u6765\u957f\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u975e\u5e38\u7b80\u5355\uff0c~~\u81f3\u5c11\u6bd4\u7ebf\u6bb5\u6811\u4f18\u5316\u597d~~\n\n\u7136\u540e\u653e\u4e0a\u6ca1\u6709\u4f18\u5316\u7684\u4ee3\u7801\u548cAC\u4ee3\u7801\uff1a\n\nTLE 72:\n\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,c,s,t;\nint fir[120050],nxt[5800050],to[5800050],qp[5800050],top=0;//\u524d\u5411\u661f \nint dis[120050];//\u8ddd\u79bb \nint xo[80];//2\u7684\u51e0\u6b21\u65b9\uff0c\u7528\u4e8e\u5f02\u6216 \nstruct PX{//\u5806\u6392\u5e8f \n\tint zhi,id;\t\n}dui[3000050];\nint dtop=0;//\u5806\u6307\u9488\n \nvoid add(int x,int y,int z){//\u524d\u5411\u661f\u52a0\u8fb9 \n\ttop++;nxt[top]=fir[x];fir[x]=top;to[top]=y;qp[top]=z;\n}\n\nbool cmp(int a,int b){//\u5806\u6392\u5e8f\u65b9\u5f0f  \u624b\u6253\u5806\u4f60\u8981cmp\u5e72\u4ec0\u4e48\uff08\u6342\u8138 \n\treturn dui[a].zhi<dui[b].zhi;\n}\n\n\nvoid dadd(int x,int v){//\u5165\u5806 \n\tdtop++;dui[dtop].id=x;dui[dtop].zhi=v;\n\tint zz=dtop;\n\twhile(zz>1){\n\t\tif(cmp(zz,zz>>1))swap(dui[zz],dui[zz>>1]),zz>>=1;\n\t\telse return ;\n\t}\n}\n\nvoid push(int &x,int &v){//\u51fa\u5806 \n\tif(!dtop){\n\t\tx=v=0;\n\t\treturn ;\n\t}\n\tx=dui[1].id;v=dui[1].zhi;\n\tswap(dui[1],dui[dtop]);dtop--;\n\tint zz=1;\n\twhile((zz<<1)<=dtop){\n\t\tint zzz;\n\t\tif((zz<<1|1)<=dtop&&cmp(zz<<1|1,zz<<1))zzz=zz<<1|1;\n\t\telse zzz=zz<<1;\n\t\tif(cmp(zzz,zz))swap(dui[zzz],dui[zz]),swap(zz,zzz);\n\t\telse return ;\n\t}\n}\n\nint minn(int x,int y){\n\treturn x>y? y:x;\n}\n\nvoid dij(){//Dijkstra \u677f\u5b50 \n\tfor(int i=0;i<=n;i++)dis[i]=0x3f3f3f3f;\n\tdadd(s,0);\n\twhile(dtop){\n\t\tint x,v;\n\t\tpush(x,v);\n\t\tif(dis[x]!=0x3f3f3f3f)continue;\n\t\tdis[x]=v;\n\t\tfor(int i=fir[x];i;i=nxt[i]){\n\t\t\tdadd(to[i],v+qp[i]);\n\t\t}\n\t}\n}\n\nvoid addb(int x){//\u50cf\u524d\u5411\u661f\u4e2d\u52a0\u90a3 N log N \u4e2a\u8fb9 \n\tfor(int i=1;;i++){\n\t\tint too=(xo[i]^x);\n\t\tif(too>n){if(xo[i]>n)break;else continue;}\n\t\tadd(x,too,xo[i]*c);\n\t}\n} \n\nsigned main(){\n\t//-------------------------//\u8bfb\u5165 \n\tcin>>n>>m>>c;\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t}\n\tscanf(\"%d%d\",&s,&t);\n\t\n\txo[1]=1;\n\tfor(int i=2;i<=30;i++){// 2\u7684 n\u6b21\u65b9 \n\t\txo[i]=(xo[i-1]<<1);\n\t}\n\t\n\t\n\tfor(int i=0;i<=n;i++)addb(i);//\u52a0\u90a3 N log N \u6761\u8fb9 \n\t\n\t\n\tdij();//\u677f\u5b50 \n\t\n\tcout<<dis[t]<<endl;//\u7b54\u6848 \n}\n\n```\n\nAC:\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,c,s,t;\nint fir[120050],nxt[600050],to[600050],qp[600050],top=0;\nint dis[120050];\nint dt[120050];\nint xo[80];\n\nstruct PX{\n\tint zhi,id;\t\n}dui[1200050];\nint dtop=0;\n\nvoid add(int x,int y,int z){\n\ttop++;nxt[top]=fir[x];fir[x]=top;to[top]=y;qp[top]=z;\n}\n\nbool cmp(int a,int b){\n\treturn dui[a].zhi<dui[b].zhi;\n}\n\nvoid dadd(int x,int v){\n\tif(dt[x]<=v)return ;\n\tdt[x]=v;\n\tdtop++;dui[dtop].id=x;dui[dtop].zhi=v;//\u5355\u8c03\u52a0\u5165 \n\tint zz=dtop;\n\twhile(zz>1){\n\t\tif(cmp(zz,zz>>1))swap(dui[zz],dui[zz>>1]),zz>>=1;\n\t\telse return ;\n\t}\n}\n\nvoid push(int &x,int &v){\n\tif(!dtop){\n\t\tx=v=0;\n\t\treturn ;\n\t}\n\tx=dui[1].id;v=dui[1].zhi;\n\tswap(dui[1],dui[dtop]);dtop--;\n\tint zz=1;\n\twhile((zz<<1)<=dtop){\n\t\tint zzz;\n\t\tif((zz<<1|1)<=dtop&&cmp(zz<<1|1,zz<<1))zzz=zz<<1|1;\n\t\telse zzz=zz<<1;\n\t\tif(cmp(zzz,zz))swap(dui[zzz],dui[zz]),swap(zz,zzz);\n\t\telse return ;\n\t}\n}\n\nint minn(int x,int y){\n\treturn x>y? y:x;\n}\n\nvoid dij(){\n\tfor(int i=0;i<=n;i++)dt[i]=dis[i]=0x3f3f3f3f;//\u8bb0\u5f97\u52a0\u4e0a\u5bf9\u5806\u4f18\u5316\u7684\u521d\u59cb\u5316 \n\tdadd(s,0);\n\twhile(dtop&&dis[t]==0x3f3f3f3f){//\u627e\u5230\u5c31\u9000\u51fa \n\t\tint x,v;\n\t\tpush(x,v);\n\t\tif(dis[x]!=0x3f3f3f3f)continue;\n\t\tdis[x]=v;\n\t\tfor(int i=fir[x];i;i=nxt[i]){\n\t\t\tdadd(to[i],v+qp[i]);\n\t\t}\n\t\tfor(int i=1;;i++){//\u8865\u4e0a\u524d\u5411\u661f\u7684\u4e00\u4e9b\u8fb9 \n\t\t\tint too=(xo[i]^x);\n\t\t\tif(too>n){if(xo[i]>n)break;else continue;}\n\t\t\tdadd(too,v+xo[i]*c);\n\t\t}\n\t}\n}\n\nsigned main(){\n\tcin>>n>>m>>c;\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t}\n\tscanf(\"%d%d\",&s,&t);\n\tif(m==0){\n\t\tcout<<(s^t)*c<<endl;\n\t\treturn 0;\n\t}\n\txo[1]=1;\n\tfor(int i=2;i<=30;i++){\n\t\txo[i]=(xo[i-1]<<1);\n\t}\n\t//---------------------------------//\u7701\u4e0b\u524d\u5411\u661f\u4e2d\u7684\u4e00\u4e9b\u8fb9 \n\tdij();\n\tcout<<dis[t]<<endl;\n}\n\n```\n\n\n\n\n------------\n\n\n\u4e0d\u5f00 O2 \u6700\u6162 $393ms$\uff0c\u901f\u5ea6\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\n",
        "postTime": 1619771451,
        "uid": 399239,
        "name": "\u5929\u5357\u661f\u9b54\u828b",
        "ccfLevel": 0,
        "title": "P4366 [Code+#4]\u6700\u77ed\u8def \u9898\u89e3"
    },
    {
        "content": "**\u9898\u610f\u7b80\u8ff0\uff1a**\n\u6709 $n$ \u4e2a\u70b9\u548c $m$ \u6761\u8fb9\u6784\u6210\u7684\u56fe\u4e2d\u518d\u52a0\u4e0a\u4e00\u4e9b\u7279\u6b8a\u7684\uff0c\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8fb9\uff0c\u5e76\u4e14\u957f\u5ea6\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u7684 $xor$ \u503c\u4e58\u4e0a\u4e00\u4e2a\u5e38\u6570\u3002\u6c42\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u3002\n\n**\u601d\u8def\u89e3\u6790\uff1a**\n\u5982\u679c\u8981\u66b4\u529b\u7684\u8bdd\u53ef\u4ee5\u6709 $n^3$ \u7684 $floyd$ \u6216\u8005\u5927\u6a21\u62df\u8fde\u8fb9\uff0c\u5373\u6709 $n^2+m$ \u6761\u8fb9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n^2+m)\\times log(n^2+m))$ \u3002\u4f46\u662f\u8fd9\u4e2a\u53ea\u80fd\u62ff\u5230 $30$ \u5206\uff0c\u8fd9\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\u3002\u4e0b\u9762\u6211\u4eec\u8003\u8651\u6b63\u89e3\u3002\n\n\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8def\u5f84\u6761\u4ef6\uff0c\u80af\u5b9a\u5927\u5bb6\u90fd\u4f1a\u505a\uff0c\u5c31\u662f $dijkstra$ \u6a21\u677f\uff0c\u6240\u4ee5\u6211\u4eec\u770b\u770b\u600e\u4e48\u5c06\u8fd9\u4e2a\u8fde\u8fb9\u4f18\u5316\u4e00\u4e0b\u3002\n\n$$(0111)_2 \\ xor \\ (1101)_2=(1010)_2$$\n\n\u90a3\u8003\u8651\u4e00\u4e0b\uff0c\u7531\u4e8e\u6700\u77ed\u8def\u7684\u6027\u8d28\uff0c\u5047\u8bbe\u6709\u4e09\u6761\u8fb9\n\n$x->y \\ (a) \\ \\ \\ \\ \\ \\ \\  y->z \\ (b)$ \u5219\u662f\u4e0d\u662f\u4e0d\u9700\u8981\u5efa\u591a\u4f59\u7684 $x->z\\ (a+b)$ \u7684\u8fb9\u4e86\uff1f\n\n\u8fd9\u4e2a\u4e5f\u5c31\u662f\u4e00\u6837\u7684\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u589e\u52a0\u6216\u51cf\u5c11\u4e00\u4e2a\u6570\u4f4d\u4e0a\u7684 $1$\uff0c\u8fd9\u6837\u603b\u7684\u6700\u77ed\u8def\u4e0d\u53d8\u3002\u4e3e\u4e00\u4e2a\u6817\u5b50\uff1a\n\n$$(1001)_2 -> (1010)_2$$\n\n\u8fd9\u6761\u8def\u662f\u80fd\u88ab $(1001)_2->(1000)_2$ \u548c $(1001 \\ xor 1000)_2 -> (0001)_2$ \u8fd9\u4e24\u6761\u8def\u4e00\u8d77\u66ff\u4ee3\u7684\uff0c\u6240\u4ee5\u6bcf\u6b21\u6211\u4eec\u53ea\u7528\u53d8\u5316\u4e00\u4e2a\u7ed3\u70b9\u7684\u4e00\u6761\u8fb9\u5373\u53ef\u3002\n\n\u5982\u4ee3\u7801\uff1a\n```cpp\nfor(int i=0;i<=n;i++)\n{\n\tfor(int j=1;j<=n;j<<=1)\n\t{\n\t\tif((i^j)<=n)\n\t\t{\n\t\t\tadd(i,i^j,c*j);\n\t\t}\n\t}\n}\n```\n\n\u800c\u5176\u4ed6\u7684\u5c31\u662f\u4e00\u4e2a $dijkstra$ \u7684\u6a21\u677f\u4e86\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=1e5+10;\nconst int MR=3e6+10;\nint n,m,c;\nint to[MR],nxt[MR],val[MR];\nint head[NR];\nint tot=1;\nvoid add(int x,int y,int z)\n{\n\tto[tot]=y;\n\tval[tot]=z;\n\tnxt[tot]=head[x];\n\thead[x]=tot++;\n}\nstruct Nd\n{\n\tint x,d;\n\tbool operator <(const Nd& A) const\n\t{\n\t\treturn d>A.d;\n\t}\n};\nbool vis[NR];\nint dis[NR];\npriority_queue<Nd> q;\nNd tmp;\nvoid dijkstra(int s)\n{\n\tmemset(vis,0,sizeof(vis));\n\tmemset(dis,0x3f,sizeof(dis));\n\ttmp.x=s,tmp.d=0;\n\tq.push(tmp);dis[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().x;q.pop();\n\t\tif(vis[x]) continue;\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i];\n\t\t\tif(dis[y]>dis[x]+val[i])\n\t\t\t{\n\t\t\t\tdis[y]=dis[x]+val[i];\n\t\t\t\ttmp.x=y,tmp.d=dis[y];\n\t\t\t\tq.push(tmp);\n\t\t\t}\n\t\t}\n\t}\n}\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch<='9'&&ch>='0'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=read(),m=read(),c=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read(),z=read();\n\t\tadd(x,y,z);\n\t}\n\tfor(int i=0;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j<<=1)\n\t\t{\n\t\t\tif((i^j)<=n)\n\t\t\t{\n\t\t\t\tadd(i,i^j,c*j);\n\t\t\t}\n\t\t}\n\t}\n\tint s=read(),t=read();\n\tdijkstra(s);\n\tprintf(\"%d\\n\",dis[t]);\n\treturn 0;\n}\n```",
        "postTime": 1587118482,
        "uid": 97136,
        "name": "chenzida",
        "ccfLevel": 0,
        "title": "P4366 [Code+#4]\u6700\u77ed\u8def"
    }
]