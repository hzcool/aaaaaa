[
    {
        "content": "## [\u9898\u89e3] \u300cJOI 2017 Final\u300d\u8db3\u7403\n\n> \u53ea\u7528**\u62c6\u4e09\u4e2a\u70b9\uff01\uff01**\n>\n> [\u4e0d\u4e00\u5b9a\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/Liang-sheng/p/15226678.html)\n\n~~\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u9898\u89e3\u90fd\u662f\u62c6\u6210 $6$ \u4e2a\u70b9\u7684\uff0c\u6240\u8c13\u7684\u201c\u8774\u8776\u6548\u5e94\u201d\uff1f~~ \n\n\u800c\u4e14\uff0c\u4e00\u4e2a\u4eba\u6700\u591a\u63a7\u51e0\u6b21\u7403\u6839\u672c\u5c31\u4e0d\u7528\u5173\u5fc3\u3002\n\n\u9996\u5148\u5e76\u4e0d\u597d DP\uff0c**\u4f20\u9012\u95ee\u9898**\u60f3\u5230\u5efa\u56fe\u3002\n\n\u5efa\u4e00\u5c42\u56fe\u80af\u5b9a\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u6709\u63a7\u7403\u548c\u4e0d\u63a7\u7403\u7684\u72b6\u6001\u5dee\u522b\uff0c\u6216\u8005\u8bf4\u6709\u7403\u6eda\u52a8\u548c\u4eba\u79fb\u52a8\u7684\u4e0d\u540c\u4ee3\u4ef7\uff0c\u6240\u4ee5\u9700\u8981\u62c6\u70b9\u6216\u8005\u8bf4**\u5efa\u5206\u5c42\u56fe**\uff08\u4e2a\u4eba\u611f\u89c9\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff09\u3002\n\n\u56e0\u4e3a\u4eba\u7684\u79fb\u52a8\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5**\u4eba\u5e26\u7740\u7403\u7684\u79fb\u52a8**\u53ef\u4ee5\u5f53\u6210\u4e00\u5c42\u6765\u770b\u3002\n\n\u7403\u6eda\u52a8\u7684\u8fc7\u7a0b\u4e5f\u9700\u8981\u8003\u8651\uff0c\u56e0\u4e3a\u4ee3\u4ef7\u4e0d\u540c\uff08\u4e5f\u5c31\u662f\u8e22\u7403\u7684\u4ee3\u4ef7\uff09\u3002\n\n\u6ce8\u610f\uff1a**\u7403\u6eda\u52a8\u7684\u8fc7\u7a0b\u9700\u8981\u5206\u4e3a\u4e24\u5c42**\uff0c\u6a2a\u7740\u6eda\u52a8\u548c\u7ad6\u7740\u6eda\u52a8\uff0c\u56e0\u4e3a**\u8fd9\u4e24\u4e2a\u65b9\u5411\u662f\u4e0d\u76f8\u901a\u7684\uff01**\n\n> \u5982\u4f55\u4ece\u6eda\u52a8\u8fc7\u7a0b\u8df3\u8dc3\u5230\u8fd0\u7403\u8fc7\u7a0b\n\n\u5982\u679c\u72b6\u6001\u7684\u7b2c\u4e00\u5c42\u5b9a\u4e49\u7684\u662f**\u4eba\u8fd0\u7403\u7684\u8fc7\u7a0b**\uff0c\u800c\u4e0d\u662f\u4eba\u79fb\u52a8\u7684\u8fc7\u7a0b\u7684\u8bdd\uff0c\u90a3\u4e48\u4ece\u6eda\u52a8\u8fc7\u7a0b\u7684\u5f53\u524d\u70b9 $(x,y)$ \u8df3\u5230\u8fd0\u7403\u8fc7\u7a0b\u7684\u5f53\u524d\u70b9**\u4e00\u5b9a\u9700\u8981\u4eba\u6765\u63a5**\uff0c\u8fd9\u4e2a\u4eba\u4e00\u5b9a\u662f\u79bb $(x,y)$ \u6700\u8fd1\u7684\u90a3\u4e2a\u7403\u5458\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u70b9\u4e00\u5b9a\u8981\u8df3\u72b6\u6001\u5230\u8fd0\u7403\u72b6\u6001\uff0c\u9700\u8981**\u5f3a\u5236\u8ba9\u6700\u8fd1\u7684\u7403\u5458\u77ac\u65f6\u8fc7\u6765\u63a5**\u3002\n\n> \u5c0f\u7ed3\n\n\u6211\u89c9\u7684\u4e00\u5927\u90e8\u5206\u4eba\u7684\u601d\u8def\u5728**\u72ec\u7acb\u601d\u8003**\u7684\u60c5\u51b5\u4e0b\u5e94\u8be5\u662f\u8fd9\u6837\u62c6\u6210\u4e09\u4e2a\u70b9\u6765\u8fdb\u884c\u6700\u77ed\u8def\u7684\uff0c\u56e0\u4e3a\u4eba\u7684\u4e00\u822c\u6027\u601d\u7ef4\u5927\u90e8\u5206\u65f6\u95f4\u662f\u57fa\u4e8e\u589e\u91cf\u6cd5\u7684\u3002\n\n\u4f55\u51b5\u4e0a\u4e0b\u5de6\u53f3\u771f\u7684\u6ca1\u5fc5\u8981\uff0c\u62c6\u6210\u4e09\u4e2a\u70b9\u601d\u7ef4\u96be\u5ea6\u5e76\u6ca1\u6709\u589e\u52a0\u3002~~\u53cd\u800c\u964d\u4f4e\u4e86\uff08\uff1f~~\n\n**\u8981\u6709\u5efa\u56fe\u7684\u610f\u8bc6\uff01**\n\n\u76ee\u524d Luogu \u5168\u7ad9\u7b2c\u4e8c\uff0c~~\u6b22\u8fcehack~~\n\n> \u5751\u70b9\n\n\u5750\u6807\u662f\u4ece $0$ \u5f00\u59cb\u7684\uff0c\u4e00\u5f20\u56fe\u6709 $(n+1)\\times (m+1)$ \u4e2a\u70b9\u800c\u4e0d\u662f $n\\times m$ \u4e2a\u3002\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntemplate <typename T>\ninline T read(){\n\tT x=0;char ch=getchar();bool fl=false;\n\twhile(!isdigit(ch)){if(ch=='-')fl=true;ch=getchar();}\n\twhile(isdigit(ch)){\n\t\tx=(x<<3)+(x<<1)+(ch^48);ch=getchar();\n\t}\n\treturn fl?-x:x;\n}\n#include <queue>\nconst int maxn = 1e5 + 10;\nconst int maxm = 505;\n#define LL long long\nLL A,B,C;\nint n,m,k,X[maxn],Y[maxn];\nbool vis[maxm][maxm];\nint head[maxm*maxm*3],cnt=0;\nstruct edge{\n\tint to,nxt;LL w;\n}e[maxm*maxm*30];\ninline void link(int u,int v,LL w){\n\te[++cnt].to=v;e[cnt].nxt=head[u];head[u]=cnt;e[cnt].w=w;\n}\nLL dis[maxm*maxm*3];\ninline int id(int x,int y){\n\treturn x*(m+1)+y;\n}\nconst int dx[]={0,0,1,-1};\nconst int dy[]={1,-1,0,0};\n#define read() read<int>()\n#define Pair pair<LL,int>\n#define mp make_pair\nbool visit[maxm*maxm*3];\nvoid dij(int s){\n\tmemset(dis,0x3f,sizeof dis);\n\tpriority_queue<Pair,vector<Pair>,greater<Pair> > q;q.push(mp(0,s));\n\tdis[s]=0;\n\twhile(q.size()){\n\t\tint u=q.top().second;q.pop();\n\t\tif(visit[u])continue;\n\t\tvisit[u]=true;\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(dis[v]>dis[u]+e[i].w && !visit[v]){\n\t\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\t\tq.push(mp(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nLL dist[maxm][maxm];\nvoid bfs(){\n\tqueue<Pair> q;\n\tfor(int i=1;i<=k;i++)q.push(mp(X[i],Y[i])),dist[X[i]][Y[i]]=0;\n\twhile(q.size()){\n\t\tint x=q.front().first,y=q.front().second;q.pop();\n\t\tfor(int i=0;i<4;i++){\n\t\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\t\tif(xx<0 || xx>n || yy<0 || yy>m)continue;\n\t\t\tif(vis[xx][yy] || dist[xx][yy])continue;\n\t\t\tdist[xx][yy]=dist[x][y]+1;\n\t\t\tq.push(mp(xx,yy));\n\t\t}\n\t}\n}\nint main(){\n\tn=read();m=read();\n\tA=read<LL>();B=read<LL>();C=read<LL>();\n\tk=read();\n\tfor(int i=1;i<=k;i++)X[i]=read(),Y[i]=read(),vis[X[i]][Y[i]]=true;\n\tbfs();\n\tfor(int x=0;x<=n;x++){\n\t\tfor(int y=0;y<=m;y++){\n\t\t\tfor(int i=0;i<4;i++){\n\t\t\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\t\t\tif(xx<0 || xx>n || yy<0 || yy>m)continue;\n\t\t\t\tlink(id(x,y),id(xx,yy),C);\n\t\t\t}\n\t\t\tlink(id(x,y),id(x,y)+(n+1)*(m+1),B);\n\t\t\tlink(id(x,y),id(x,y)+2*(n+1)*(m+1),B);\n\t\t}\n\t}\n\tfor(int x=0;x<=n;x++){\n\t\tfor(int y=0;y<=m;y++){\n\t\t\tfor(int i=0;i<2;i++){\n\t\t\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\t\t\tif(xx<0 || xx>n || yy<0 || yy>m)continue;\n\t\t\t\tlink(id(x,y)+(n+1)*(m+1),id(xx,yy)+(n+1)*(m+1),A);\n\t\t\t}\n\t\t\tlink(id(x,y)+(n+1)*(m+1),id(x,y),dist[x][y]*C);\n\t\t}\n\t}\n\tfor(int x=0;x<=n;x++){\n\t\tfor(int y=0;y<=m;y++){\n\t\t\tfor(int i=2;i<4;i++){\n\t\t\t\tint xx=x+dx[i],yy=y+dy[i];\n\t\t\t\tif(xx<0 || xx>n || yy<0 || yy>m)continue;\n\t\t\t\tlink(id(x,y)+2*(n+1)*(m+1),id(xx,yy)+2*(n+1)*(m+1),A);\n\t\t\t}\n\t\t\tlink(id(x,y)+2*(n+1)*(m+1),id(x,y),dist[x][y]*C);\n\t\t}\n\t}\n\tdij(id(X[1],Y[1]));\n\tprintf(\"%lld\\n\",dis[id(X[k],Y[k])]);\n\treturn 0;\n}\n```",
        "postTime": 1630739139,
        "uid": 375110,
        "name": "\u00b6\u51c9\u7b19",
        "ccfLevel": 6,
        "title": "[\u9898\u89e3] \u300cJOI 2017 Final\u300d\u8db3\u7403"
    },
    {
        "content": "\u6ce8\u610f\u5230\u6bcf\u4e2a\u4eba\u81f3\u591a\u63a7\u7403\u4e00\u6b21\uff0c\u90a3\u4e48\u7403\u4e00\u5b9a\u662f\u4e00\u4e2a\u4eba\u63a7\u7740\u5230\u67d0\u4e2a\u5730\u65b9\uff0c\u7136\u540e\u4e00\u811a\u8e22\u51fa\u53bb\uff0c\u7136\u540e\u4e00\u4e2a\u6700\u8fd1\u7684\u7403\u5458\u8dd1\u8fc7\u6765\u63a7\u7403\u5e76\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b\u3002\n\n\u53ef\u4ee5\u8003\u8651\u5efa\u56fe\u8dd1\u6700\u77ed\u8def\uff0c\u4f46\u662f\u8fd9\u4e2a\u4ee3\u4ef7\u957f\u5f97\u6bd4\u8f83\u5947\u5999\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u9700\u8981\u4e00\u4e9b\u5947\u5999\u7684\u5efa\u56fe\u3002\n\n\u6ce8\u610f\u5230\u63a7\u7403\u65f6\u53ef\u4ee5\u4e0a\u4e0b\u5de6\u53f3\u8dd1\uff0c\u4f46\u662f\u7403\u4e00\u65e6\u88ab\u8e22\u51fa\u53bb\u5c31\u53ea\u80fd\u5f80\u4e00\u4e2a\u65b9\u5411\u524d\u8fdb\uff1b\u8fd8\u6ce8\u610f\u5230\u53ef\u4ee5\u628a\u90a3\u4e2a $Ap+B$ \u770b\u6210\u5148\u53d8\u6210\u672a\u88ab\u63a7\u7403\u82b1\u8d39 $B$\uff0c\u7136\u540e\u6eda\u52a8 $1$ \u7c73\u82b1\u8d39 $A$\u3002\u8fd9\u4e9b\u542f\u53d1\u6211\u4eec\u62c6\u70b9\u3002\n\n\u4e0b\u9762\u7684\u9898\u89e3\u90fd\u62c6\u4e86 $6$ \u4e2a\u70b9\uff0c\u5176\u5b9e\u53ea\u8981\u62c6\u6210 $3$ \u4e2a\u70b9\u5c31\u597d\u4e86\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6211\u4eec\u62c6\u51fa $3$ \u4e2a\u70b9\u8868\u793a\u63a7\u7403\uff08$0$\uff09\u3001\u672a\u88ab\u63a7\u7403\u5de6\u53f3\u6eda\u52a8\uff08$1$\uff09\u3001\u672a\u88ab\u63a7\u7403\u4e0a\u4e0b\u6eda\u52a8\uff08$2$\uff09\u3002\n\n\u7136\u540e\u5927\u6982\u6709\u8fd9\u6837\u51e0\u7c7b\u8fb9\u8981\u8fde\uff08$dis_{i,j}$ \u8868\u793a\u8ddd\u79bb $(i,j)$ \u6700\u8fd1\u7684\u7403\u5458\u5230 $(i,j)$ \u7684\u8ddd\u79bb\uff08\u5f53\u7136\u662f\u6307\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\uff09\uff1a\n\n- $(i,j,0)$ \u5411\u56db\u5468\u7684 $0$ \u8fde\u8fb9\u6743\u4e3a $C$ \u7684\u8fb9\uff0c\u8868\u793a\u63a7\u7403\u8dd1 $1$ \u7c73\u3002\n- $(i,j,1)$ \u5411\u5de6\u53f3\u7684 $1$ \u8fde\u8fb9\u6743\u4e3a $A$ \u7684\u8fb9\uff0c\u8868\u793a\u7403\u5411\u5de6\u53f3\u6eda\u52a8 $1$ \u7c73\u3002\n- $(i,j,2)$ \u5411\u4e0a\u4e0b\u7684 $2$ \u8fde\u8fb9\u6743\u4e3a $A$ \u7684\u8fb9\uff0c\u8868\u793a\u7403\u5411\u4e0a\u4e0b\u6eda\u52a8 $1$ \u7c73\u3002\n- $(i,j,0)$ \u5411 $(i,j,1)$ \u548c $(i,j,2)$ \u8fde\u8fb9\u6743\u4e3a $B$ \u7684\u8fb9\uff0c\u8868\u793a\u628a\u7403\u8e22\u51fa\u53bb\u3002\n- $(i,j,1)$ \u548c $(i,j,2)$ \u5411 $(i,j,0)$ \u8fde\u8fb9\u6743\u4e3a $dis_{i,j}\\times C$ \u7684\u8fb9\uff0c\u8868\u793a\u6700\u8fd1\u7684\u7403\u5458\u8dd1\u8fc7\u6765\u628a\u7403\u63a7\u4f4f\u3002\n\n\u7136\u540e\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n~~\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u8dd1\u5f97\u6bd4\u62c6 6 \u4e2a\u70b9\u7684 kls \u6162\u90a3\u4e48\u591a\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4ed6\u592a\u5f3a\u4e86\u3002~~\n\n```cpp\n// ====================================\n//   author: M_sea\n//   website: https://m-sea-blog.com/\n// ====================================\n#include <bits/stdc++.h>\n#define file(x) freopen(#x\".in\",\"r\",stdin); freopen(#x\".out\",\"w\",stdout)\n#define debug(...) fprintf(stderr,__VA_ARGS__)\nusing namespace std;\ntypedef long long ll;\n\nint read() {\n\tint X=0,w=1; char c=getchar();\n\twhile (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n\twhile (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n\treturn X*w;\n}\n\nconst int N=100000+10,M=500+10;\nconst int V=1000000+10,E=9000000+10;\nconst int dx[4]={0,1,0,-1},dy[4]={1,0,-1,0};\n\nint w,h,a,b,c,n,x[N],y[N];\n\nnamespace H {\n\tqueue<pair<int,int>> Q;\n\tint dis[M][M];\n\tvoid bfs() {\n\t\tmemset(dis,0x3f,sizeof(dis));\n\t\tfor (int i=1;i<=n;++i)\n\t\t\tdis[x[i]][y[i]]=0,Q.push({x[i],y[i]});\n\t\twhile (!Q.empty()) {\n\t\t\tint x=Q.front().first,y=Q.front().second; Q.pop();\n\t\t\tfor (int d=0;d<4;++d) {\n\t\t\t\tint X=x+dx[d],Y=y+dy[d];\n\t\t\t\tif (X<0||X>w||Y<0||Y>h) continue;\n\t\t\t\tif (dis[x][y]+1<dis[X][Y])\n\t\t\t\t\tdis[X][Y]=dis[x][y]+1,Q.push({X,Y});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint id[M][M][3],tot=0;\nstruct edge { int v; ll w; int nxt; } e[E];\nint head[V];\nvoid addEdge(int u,int v,ll w) {\n\tstatic int cnt=0;\n\te[++cnt]=(edge){v,w,head[u]},head[u]=cnt;\n}\n\nstruct node { int u; ll d; };\nbool operator <(node a,node b) { return a.d>b.d; }\npriority_queue<node> Q;\t\nll dis[V];\nvoid dijkstra(int s) {\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[s]=0,Q.push((node){s,0});\n\twhile (!Q.empty()) {\n\t\tint u=Q.top().u; ll d=Q.top().d; Q.pop();\n\t\tif (d!=dis[u]) continue;\n\t\tfor (int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].v; ll w=e[i].w;\n\t\t\tif (dis[u]+w<dis[v])\n\t\t\t\tdis[v]=dis[u]+w,Q.push((node){v,dis[v]});\n\t\t}\n\t}\n}\n\nint main() {\n\tw=read(),h=read(),a=read(),b=read(),c=read(),n=read();\n\tfor (int i=1;i<=n;++i) x[i]=read(),y[i]=read();\n\tH::bfs();\n\tfor (int i=0;i<=w;++i)\n\t\tfor (int j=0;j<=h;++j)\n\t\t\tfor (int k=0;k<3;++k) id[i][j][k]=++tot;\n\tfor (int i=0;i<=w;++i)\n\t\tfor (int j=0;j<=h;++j) {\n\t\t\taddEdge(id[i][j][0],id[i][j][1],b);\n\t\t\taddEdge(id[i][j][0],id[i][j][2],b);\n\t\t\taddEdge(id[i][j][1],id[i][j][0],1ll*H::dis[i][j]*c);\n\t\t\taddEdge(id[i][j][2],id[i][j][0],1ll*H::dis[i][j]*c);\n\t\t\tfor (int d=0;d<4;++d) {\n\t\t\t\tint x=i+dx[d],y=j+dy[d];\n\t\t\t\tif (x<0||x>w||y<0||y>h) continue;\n\t\t\t\taddEdge(id[i][j][0],id[x][y][0],c);\n\t\t\t\tif (d==1||d==3) addEdge(id[i][j][1],id[x][y][1],a);\n\t\t\t\telse addEdge(id[i][j][2],id[x][y][2],a);\n\t\t\t}\n\t\t}\n\tdijkstra(id[x[1]][y[1]][0]);\n\tll ans=1e18;\n\tans=min(ans,dis[id[x[n]][y[n]][0]]);\n\tans=min(ans,dis[id[x[n]][y[n]][1]]);\n\tans=min(ans,dis[id[x[n]][y[n]][2]]);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1604630903,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5100 \u3010[JOI 2017 Final]\u8db3\u7403\u3011"
    },
    {
        "content": "\u6b64\u9898\u5e26\u7403\u4f20\u7403\u63a7\u7403\u7684\u72b6\u6001\u8f6c\u6362~~\u8f83\u4e3a\u590d\u6742~~\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651 _\u62c6\u70b9_ \u3002\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u6700\u4f18\u89e3\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u73b0\u4e00\u4e2a\u4eba\u91cd\u590d\u63a7\u7403\uff08\u8fd9\u4e2a\u2026\u2026\u5f88\u5bb9\u6613\u60f3\u5230\u5427\uff09\n\n\u5206\u6790\u6bcf\u4e00\u4e2a\u5750\u6807\u53ef\u80fd\u51fa\u73b0\u7684\u72b6\u6001\uff0c\u5206\u4e3a\u63a7\u7403\u548c\u4e0d\u63a7\u7403\u4e24\u79cd\u60c5\u51b5\n\n\u800c\u4e0d\u63a7\u7403\u53c8\u5206\u4e3a\u505c\u7559\u5728\u8be5\u5750\u6807\u548c\u6eda\u52a8\u7ecf\u8fc7\u8be5\u5750\u6807\u4e24\u79cd\u60c5\u51b5\n\n\u800c\u6eda\u52a8\u53c8\u5206\u4e3a\u4e0a\u4e0b\u5de6\u53f3\u6eda\n\n~~\u53e3\u80e1\u5b8c\u6bd5~~\uff0c\u603b\u800c\u8a00\u4e4b\u5c31\u662f\u4e00\u4e2a\u5750\u6807\u8981\u62c6\u6210**\u516d\u4e2a\u70b9**\uff08\u636e\u8bf4\u53ef\u4ee5\u53ea\u62c6\u4e94\u4e2a\u70b9\uff0c\u4f46\u662f\u516d\u4e2a\u70b9~~\u53ef\u80fd\u66f4\u52a0\u4fbf\u4e8e\u7406\u89e3\uff1f~~\uff09\n\n\u7ecf\u8fc7~~\u7b80\u5355\u7684~~\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528**p\u70b9\u7684\u5750\u6807 + k * \u573a\u5730\u7684\u70b9\u6570**\u6765\u8868\u793a\u62c6\u70b9\u540e\u7684\u56fe\u4e2d\u67d0\u4e00\u4e2a\u70b9\uff08k\u4e3a\u8be5\u70b9\u7684\u72b6\u6001\u5e8f\u53f7\uff09\uff0c\u53ef\u4ee5\u7528**x * (w + 1) + y**\u8868\u793a\u4e00\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff08x\u3001y\u5206\u522b\u8868\u793a\u8be5\u70b9\u7684\u4e0a\u4e0b\u5750\u6807\u548c\u5de6\u53f3\u5750\u6807\uff0c\u5fc5\u987b\u8981\u6ce8\u610f\u4e00\u4e0b**\u5750\u6807\u53ef\u4ee5\u4e3a0**\uff0c\u6240\u4ee5w\u8981\u52a01\uff09\n\n\u5b9a\u4e49k\u503c\u4e3a0\u30011\u30012\u30013\u65f6\u8868\u793a\u7403\u6b63\u5728\u6eda\u52a8\u72b6\u6001\uff08\u56db\u4e2a\u65b9\u5411\uff09\uff0ck\u4e3a4\u65f6\u8868\u793a\u7403\u5728\u8be5\u4f4d\u7f6e\u505c\u6b62\uff0ck\u4e3a5\u65f6\u8868\u793a\u7403\u5728\u8be5\u4f4d\u7f6e\u88ab\u63a7\u5236\uff0c\u8fde\u8fb9\u4ee3\u4ef7\u5373\u4e3a\u72b6\u6001\u8f6c\u6362\u7684\u4ee3\u4ef7\u3002\n\n\u4ece\u6eda\u52a8\u5230\u505c\u6b62\u4e0d\u9700\u8981\u82b1\u8d39\u75b2\u52b3\u5ea6\uff0c\u4ece\u63a7\u7403\u5230\u5c06\u7403\u8e22\u51fa\u9700\u8981\u82b1\u8d39b\u70b9\u75b2\u52b3\u5ea6\uff08\u56e0\u4e3a\u4f20\u7403\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3aA * p + B\uff0c\u6211\u4eec\u4e0d\u59a8\u5c06B\u5728\u7403\u4f20\u51fa\u65f6\u5c31\u5904\u7406\u4e86\uff09\uff0c\u800c\u4ece\u9759\u6b62\u5230\u63a7\u7403\u5219\u9700\u8981\u79bb\u7403\u6700\u8fd1\u7684\u7403\u5458\u8dd1\u8fc7\u6765\u6361\u7403\u3002\u53ef\u4ee5\u9884\u5904\u7406\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u8fd1\u7684\u7403\u5458\u5230\u8be5\u70b9\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff0c\u7528dt[i][j]\u5b58\u50a8\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7528\u5230\u5e7f\u641c\u7684\u601d\u60f3\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline void Manhattan_Distance()\n{\n    queue<player> q;\n    for(register int i = 0;i <= h;i++) for(register int j = 0;j <= w;j++) dt[i][j] = INF;\n    for(register int i = 1; i <= n; i++){ dt[P[i].x][P[i].y] = 0; q.push(P[i]); }\n    while(!q.empty())\n    {\n        int x = q.front().x, y = q.front().y;\n        q.pop(); vis[x][y] = false;\n        for(register int i = 0; i < 4; i++)\n        {\n            int xx = x + dx[i], yy = y + dy[i];\n            if(xx >= 0 && xx <= h && yy >= 0 && yy <= w && dt[xx][yy] > dt[x][y] + 1) {\n                dt[xx][yy] = dt[x][y] + 1;\n                if(!vis[xx][yy]) {\n                    player graph;\n                    graph.x = xx, graph.y = yy;\n                    q.push(graph);  vis[xx][yy] = true;\n                }\n            }\n        }\n    }\n}\n```\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u62c6\u70b9\u5982\u4e0b\u56fe\u6240\u793a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dynannsk.png)\n\n\u4ee3\u7801\u5927\u6982\u662f\u8fd9\u6837\uff1a\n\n```cpp\nadd(p + k * sum, p + 4 * sum, 0);\nadd(p + 5 * sum, p + k * sum, b);\nadd(p + 4 * sum, p + 5 * sum, c * (ll)dt[i][j]);\n```\n\n\u5728\u4e0d\u8d8a\u754c\u7684\u524d\u63d0\u4e0b\u76f8\u90bb\u7684\u4f4d\u7f6e\u5b58\u5728\u7403\u7684\u6eda\u52a8\u548c\u8fd0\u7403\u7684\u64cd\u4f5c\uff0c\u4e8e\u662f\u6211\u4eec\u6709\u4e86\u4e0b\u9762\u8fd9\u6837\u7684\u4ee3\u7801\u3002\n\n```cpp\nint xx = i + dx[k], yy = j + dy[k];\nif(xx >= 0 && yy >= 0 && xx <= h && yy <= w) {\n    int q = id(xx, yy);\n    add(p + k * sum, q + k * sum, a);\n    add(p + 5 * sum, q + 5 * sum, c);\n}\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/io9qgjmf.png)\n\n\u4f20\u7403\u4ee3\u4ef7\u4e0d\u59a8\u62c6\u6210\u6bcf\u4e00\u4e2a\u76f8\u90bb\u70b9\u7684\u79fb\u52a8\u4ee3\u4ef7a\u7684\u7d2f\u8ba1\u3002\n\n\u81f3\u6b64\u8fd9\u9898\u5c31\u88ab\u5206\u89e3\u6210\u4e86\u4e00\u4e2a\u88f8\u7684\u6700\u77ed\u8def\u3002\n\n\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include <queue>\n#include <vector>\n#include <stdio.h>\n#include <iostream>\n#include <algorithm>\n#define INF 0x3f3f3f3f\n#define MAX 0x7f7f7f7f7f7f7f7f\nusing namespace std;\ntypedef long long ll;\nconst int W = 505;\nconst int N = 100005;\n\nstruct Node{ int x; ll y; };\nstruct player{ int x, y; }P[N];\nstruct Edge{ int to, next; ll weight; }edge[W * W * 36];\nstruct cmp{ bool operator()(Node x, Node y){ return x.y > y.y; } };\n\nll dis[W * W * 6], ans = MAX;\nbool vis[W][W], vis2[W * W * 6];\nint h, w, a, b, c, n, sum, cnt = 1;\nint dx[4] = { 1, -1, 0, 0 };\nint dy[4] = { 0, 0, 1, -1 };\nint head[W * W * 6], dt[W][W];\n\ntemplate<typename T> inline void read(T &x)\n{\n    x = 0; char ch = getchar(); bool flag = false;\n    while(ch < '0' || ch > '9'){if(ch == '-') flag = true; ch = getchar();}\n    while('0' <= ch && ch <= '9'){x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n    if(flag) x = -x;\n}\n\ninline void add(int u, int v, ll w)\n{\n    edge[cnt].to = v, edge[cnt].weight = w;\n    edge[cnt].next = head[u], head[u] = cnt++;\n}\n\ninline ll Min(ll x, ll y){ return x < y ? x : y; }\ninline int id(int x, int y){ return x * (w + 1) + y; } //\u7528\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5750\u6807 \n\ninline void Manhattan_Distance()\n{\n    queue<player> q;\n    for(register int i = 0; i <= h; i++) for(register int j = 0; j <= w; j++) dt[i][j] = INF;\n    for(register int i = 1; i <= n; i++){ dt[P[i].x][P[i].y] = 0; q.push(P[i]); }\n    while(!q.empty())\n    {\n        int x = q.front().x, y = q.front().y;\n        q.pop(); vis[x][y] = false;\n        for(register int i = 0; i < 4; i++)\n        {\n            int xx = x + dx[i], yy = y + dy[i];\n            if(xx >= 0 && xx <= h && yy >= 0 && yy <= w && dt[xx][yy] > dt[x][y] + 1) {\n                dt[xx][yy] = dt[x][y] + 1;\n                if(!vis[xx][yy]) {\n                    player graph;\n                    graph.x = xx, graph.y = yy;\n                    q.push(graph);  vis[xx][yy] = true;\n                }\n            }\n        }\n    }\n}\n\ninline void Dijkstra()\n{\n    priority_queue<Node, vector<Node>, cmp> q;\n    for(register int i = 0; i <= W * W * 6; i++) dis[i] = MAX;\n    Node graph; graph.x = id(P[1].x, P[1].y) + 4 * sum, graph.y = 0;\n    q.push(graph); dis[id(P[1].x, P[1].y) + 4 * sum] = 0;\n    while(!q.empty())\n    {\n        int x = q.top().x;\n        q.pop(); if(!vis2[x])\n        {\n            vis2[x] = true;\n            for(register int i = head[x]; i != 0; i = edge[i].next)\n            {\n                int v = edge[i].to;\n                if (dis[v] > dis[x] + edge[i].weight) {\n                    dis[v] = dis[x] + edge[i].weight; Node graph;\n                    graph.x = v, graph.y = dis[v];\n                    q.push(graph);\n                }\n            }\n        }\n    }\n}\n\nint main()\n{\n    read(h), read(w), read(a), read(b), read(c), read(n);\n    for(register int i = 1; i <= n; i++) read(P[i].x), read(P[i].y);\n    Manhattan_Distance();\n    sum = (w + 1) * (h + 1); //\u56e0\u4e3a\u6a2a\u7eb5\u5750\u6807\u53ef\u4ee5\u4e3a0\uff0c\u6240\u4ee5\u8981+1\n    //\u901a\u8fc7k * sum\u7684\u8868\u793a\u65b9\u6cd5\u62c6\u70b9 \n    for(register int i = 0; i <= h; i++)\n    {\n        for(register int j = 0; j <= w; j++)\n        {\n            int p = id(i, j);\n            for(register int k = 0; k < 4; k++)\n            {\n                add(p + k * sum, p + 4 * sum, 0); //\u7403\u4ece\u6eda\u52a8\u72b6\u6001\uff08\u65e0\u4eba\u63a7\u7403\uff09\u5230\u505c\u6b62 \n                add(p + 5 * sum, p + k * sum, b); //\u7403\u4ece\u9759\u6b62\u72b6\u6001\uff08\u6709\u4eba\u63a7\u7403\uff09\u5230\u5c06\u7403\u4f20\u51fa \n                add(p + 4 * sum, p + 5 * sum, c * (ll)dt[i][j]); //\u79bb\u7403\u6700\u8fd1\u7684\u7403\u5458\uff08\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\u8dd1\u8fc7\u6765\u63a7\u7403 int xx = i + dx[k], yy = j + dy[k];\n                if(xx >= 0 && yy >= 0 && xx <= h && yy <= w) {\n                    int q = id(xx, yy);\n                    add(p + k * sum, q + k * sum, a); //\u7403\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u6309\u7167\u5176\u65b9\u5411\u6eda\u5230\u76f8\u90bb\u7684\u4f4d\u7f6e\uff08\u4f20\u7403\uff09 \n                    add(p + 5 * sum, q + 5 * sum, c); //\u7403\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u6309\u7167\u5176\u65b9\u5411\u6eda\u5230\u76f8\u90bb\u7684\u4f4d\u7f6e\uff08\u5e26\u7403\uff09 \n                }\n            }\n        }\n    }\n    Dijkstra();\n    for(register int i = 0; i < 6; i++) {\n        ans = Min(ans, dis[id(P[n].x, P[n].y) + i * sum]);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1586217372,
        "uid": 140515,
        "name": "\u95f2\u9c7c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5100 \u3010[JOI 2017 Final]\u8db3\u7403\u3011"
    },
    {
        "content": "\u89c2\u5bdf\u51e0\u4e2a\u6027\u8d28\uff1a\n\n1.\u4e00\u4e2a\u4eba\u6700\u591a\u63a7\u4e00\u6b21\u7403\uff08\u81f3\u5c11\u8fdb\u884c\u4e86\u4f20\u7403\u6216\u8005\u5e26\u7403\uff09\uff1b\n\n2.\u4e00\u4e2a\u4eba\u7684\u8def\u7ebf\u4e00\u5b9a\u662f\uff1a\uff08\u65e0\u7403\u8dd1\u52a8->\uff09\uff08\u5e26\u7403->\uff09\u4f20\u7403/\u5e26\u7403\uff08\u5e26\u62ec\u53f7\u8868\u793a\u975e\u5fc5\u9009\u9879\uff09\uff1b\n\n\u90a3\u4e48\u5f53\u4e00\u4e2a\u7403\u505c\u5728\u4e86\u4f4d\u7f6e(x,y)\uff0c\u90a3\u4e48\u5728\u67d0\u79cd\u6700\u4f18\u89e3\u4e2d\uff0c\u79fb\u52a8\u81f3(x,y)\u5e76\u7ee7\u7eed\u63a7\u7403\u7684\u4e00\u5b9a\u662f\u79bb(x,y)\n\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u4f4d\u7f6e(x,y)\u62c6\u70b9\uff1a\uff08\u8bbe\u603b\u70b9\u6570\u4e3am\uff09\n\u8bbe\u4e3a(x,y)k\uff08k\u2208{0,1,2,3,4,5}\uff09\n\n\u5176\u4e2d\uff0c(x,y)4\n\u8868\u793a\u7403\u5230\u4e86(x,y)\uff0c\u4e14\u6ca1\u6709\u4eba\u63a7\u7403\u72b6\u6001\u5c0f\u6700\u5c0f\u75b2\u60eb\u503c\uff1b(x,y)5\u8868\u793a\u7403\u5230\u4e86(x,y)\uff0c\u4e14\u6709\u4eba\u5728\u63a7\u7403\u72b6\u6001\u4e0b\u7684\u6700\u5c0f\u75b2\u60eb\u503c\uff1b(x,y)0,1,2,3\n\n\u5206\u522b\u8868\u793a\u7403\u6b63\u5728\u5411\u4e0a\u4e0b\u5de6\u53f3\u6eda\u52a8\u72b6\u6001\u4e0b\u7684\u6700\u5c0f\u75b2\u60eb\u503c\u3002\u5219\u5c31\u53ef\u4ee5\u5efa\u56fe\u8dd1\u6700\u77ed\u8def\u3002\n\n\u90a3\u5176\u4e2d\u6709\u4e00\u4e2a\u4ee3\u4ef7\uff0c\u5c31\u662f\u4e00\u4e2a\u4eba\u4f20\u7403\u65f6\uff0c\u4ee3\u4ef7\u4e3aa\u2217p+b\uff08a,b\u662f\u5e38\u6570\uff0cp\u662f\u4f20\u7403\u7684\u8ddd\u79bb\uff09\uff0c\u6b64\u65f6\u6211\u4eec\u628aa\u2217p\u7684\u8d21\u732e\u5206\u914d\u5230\u6bcf\u6761\u8fb9\u4e0a\uff0cb\n\u7684\u8bdd\u4e5f\u662f\u53ef\u4ee5\u5206\u914d\u5230\u67d0\u6761\u8fb9\u4e0a\u7684\u3002\n\n\u6700\u7ec8\u8dd1\u4e00\u4e2adij\u6700\u77ed\u8def\u5373\u53ef\u3002\uff08\u5e38\u6570\u633a\u5927\u7684\uff09\n\n#####\nstd:\n ```c++\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#define ll long long\nconst int N = 251005;\nint dx[4] = { 1, -1, 0, 0 };\nint dy[4] = { 0, 0, 1, -1 };\nbool vis[505][505], Vis[N * 6];\nint minn[505][505];\nint x[100005], y[100005];\nint n;\nll dis[N * 6], ans = 0x7f7f7f7f7f7f7f7f;\nint h, w, a, b, c, m;\nstruct node {\n    int x, y;\n};\nstruct Node {\n    int x;\n    ll y;\n};\nstruct cmp {\n    bool operator()(Node x, Node y) { return x.y > y.y; }\n};\nusing namespace std;\nint e, ver[N * 6 * 6], head[N * 6], nexts[N * 6 * 6];\nll edge[N * 6 * 6];\ninline void add(int x, int y, ll z) { ver[++e] = y, nexts[e] = head[x], head[x] = e, edge[e] = z; }\ninline int id(int x, int y) { return x * (w + 1) + y; }\ninline void bfs() {\n    queue<node> q;\n    memset(minn, 0x3f, sizeof(minn));\n    for (int i = 1; i <= m; i++) {\n        minn[x[i]][y[i]] = 0;\n        q.push((node){ x[i], y[i] });\n    }\n    while (!q.empty()) {\n        int x = q.front().x;\n        int y = q.front().y;\n        q.pop();\n        vis[x][y] = false;\n        for (int i = 0; i < 4; i++) {\n            int xx = x + dx[i];\n            int yy = y + dy[i];\n            if (xx < 0 || yy < 0 || xx > h || yy > w)\n                continue;\n            if (minn[xx][yy] > minn[x][y] + 1) {\n                minn[xx][yy] = minn[x][y] + 1;\n                if (!vis[xx][yy]) {\n                    q.push((node){ xx, yy });\n                    vis[xx][yy] = true;\n                }\n            }\n        }\n    }\n}\ninline void build() {\n    n = (w + 1) * (h + 1);\n    for (int i = 0; i <= h; i++)\n        for (int j = 0; j <= w; j++) {\n            int p = id(i, j);\n            for (int k = 0; k < 4; k++) {\n                add(p + k * n, p + 4 * n, 0);\n                add(p + 4 * n, p + 5 * n, 1ll * c * minn[i][j]);\n                add(p + 5 * n, p + k * n, b);\n                int xx = i + dx[k];\n                int yy = j + dy[k];\n                if (xx < 0 || yy < 0 || xx > h || yy > w)\n                    continue;\n                int q = id(xx, yy);\n                add(p + k * n, q + k * n, a);\n                add(p + 5 * n, q + 5 * n, c);\n            }\n        }\n}\ninline void Dij() {\n    priority_queue<Node, vector<Node>, cmp> q;\n    memset(dis, 0x3f, sizeof(dis));\n    dis[id(x[1], y[1]) + 4 * n] = 0;\n    q.push((Node){ id(x[1], y[1]) + 4 * n, 0 });\n    while (!q.empty()) {\n        int x = q.top().x;\n        int y = q.top().y;\n        q.pop();\n        if (Vis[x])\n            continue;\n        Vis[x] = true;\n        for (int i = head[x]; i; i = nexts[i]) {\n            int v = ver[i];\n            if (dis[v] > dis[x] + edge[i]) {\n                dis[v] = dis[x] + edge[i];\n                q.push((Node){ v, dis[v] });\n            }\n        }\n    }\n}\nint main() {\n    scanf(\"%d%d\", &h, &w);\n    scanf(\"%d%d%d\", &a, &b, &c);\n    scanf(\"%d\", &m);\n    for (int i = 1; i <= m; i++) scanf(\"%d%d\", &x[i], &y[i]);\n    bfs();\n    build();\n    Dij();\n    for (int i = 0; i < 6; i++) {\n        ans = min(ans, dis[id(x[m], y[m]) + i * n]);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```\n\u597d\u50cf\u4e5f\u4e0d\u96be\u662f\u4e0d\u662f\uff0c\u5c31\u662f\u4ee3\u7801\u957f\u5ea6\u5927\uff0c\u6709\u70b9\u96be\u8c03\uff01",
        "postTime": 1568289666,
        "uid": 122822,
        "name": "Merci",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5100 \u3010[JOI 2017 Final]\u8db3\u7403\u3011"
    },
    {
        "content": "## P5100 [JOI 2017 Final]\u8db3\u7403\n\n\u663e\u7136 \u6bcf\u4e2a\u4eba\u6700\u591a\u63a7\u7403\u4e00\u6b21 \u56e0\u4e3a\u5982\u679c\u63a7\u591a\u6b21\u7403\u7684\u8bdd\u4e3a\u4ec0\u4e48\u4e0d\u4e00\u6b21\u63a7\u7403\u63a7\u5230\u5e95\u5462\uff1f\n\n\u90a3\u4e48\u5bf9\u4e8e\u7403\u6765\u8bf4 \u5b83\u7684\u884c\u52a8\u5c31\u662f \u4e00\u4e2a\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u8dd1\u8fc7\u6765\u63a7\u7403 \u7136\u540e\u628a\u7403\u8e22\u51fa\u53bb \u53e6\u4e00\u4e2a\u8ddd\u79bb\u7403\u6700\u8fd1\u7684\u4eba\u53c8\u8dd1\u8fc7\u6765\u63a7\u7403\u2026\u2026\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u7684\u4f4d\u7f6e\u5b58\u5728\u516d\u79cd\u53ef\u80fd\u7684\u60c5\u51b5\n\n1. \u5411\u4e0a\u6eda\u52a8 \n2. \u5411\u4e0b\u6eda\u52a8\n3. \u5411\u5de6\u6eda\u52a8\n4. \u5411\u53f3\u6eda\u52a8\n5. \u88ab\u6bcf\u4e2a\u7403\u5458\u63a7\u7403\n6. \u5728\u67d0\u4e2a\u4f4d\u7f6e\u4e14\u4e0d\u662f\u88ab\u63a7\u7684\u72b6\u6001\n\n\u5bf9\u4e8e 1~4 \u79cd\u60c5\u51b5\u5411\u5b83\u5bf9\u5e94\u7684\u65b9\u5411\u7684\u4e0b\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u4ee3\u4ef7\u4e3a a \u7684\u8fb9 \u8868\u793a\u7ee7\u7eed\u6eda\u52a8\n\n\u5bf9\u4e8e 1~4 \u79cd\u60c5\u51b5\u5411\u8fd9\u4e2a\u70b9\u7b2c6\u79cd\u60c5\u51b5\u8fde\u4e00\u6761\u4ee3\u4ef7\u4e3a 0 \u7684\u8fb9 \u8868\u793a\u4ece\u6eda\u52a8\u72b6\u6001\u505c\u4e0b\u6765\u4e86\n\n\u5bf9\u4e8e 5 \u5411\u8fd9\u4e2a\u70b9\u76841~4 \u5404\u8fde\u63a5\u4e00\u6761\u4ee3\u4ef7\u4e3ab\u7684\u8fb9 \u8868\u793a\u88ab\u67d0\u4e2a\u7403\u5458\u8e22\u8d77\u6765\u4e86\n\n\u5bf9\u4e8e 5 \u5411\u56db\u4e2a\u65b9\u5411\u7684\u4e0b\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u4ee3\u4ef7\u4e3ac\u7684\u8fb9 \u8868\u793a\u4e00\u4e2a\u7403\u5458\u5e26\u7740\u7403\u8dd1\u52a8\n\n\u5bf9\u4e8e 6 \u5411\u7b2c5\u79cd\u60c5\u51b5\u8fde\u4e00\u6761\u4ee3\u4ef7\u4e3a c*\uff08\u79bb\u7403\u6700\u8fd1\u7684\u961f\u5458\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\u8868\u793a\u4e00\u4e2a\u7403\u5458\u8dd1\u8fc7\u6765\u63a7\u7403\u4e86\n\n\n------------\n\u5230\u8fd9\u91cc \u8fd9\u4e2a\u9898\u76ee\u9700\u8981\u6211\u4eec bfs \u5904\u7406\u51fa\u66fc\u54c8\u987f\u8ddd\u79bb\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u679a\u4e3e\u4e0a\u8ff0\u8fde\u8fb9\u53ef\u80fd\n\n\u6700\u540e\u8dd1\u4e00\u904dDijkstra\u6c42\u51fa\u5230\u6700\u540e\u4e00\u4e2a\u7403\u5458\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u4e86\n\n\u7b54\u6848\u5c31\u662f\u4e0a\u9762\u516d\u79cd\u60c5\u51b5\u7684\u6700\u5c0f\u503c\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint h,w,a,b,c,n,m;\nconst int N=300005;\n//\u5b58\u8fb9 \nint head[N*10],ver[N*40],nxt[N*40],cnt;\nlong long edge[N*40];\nvoid add(int x,int y,long long z)\n{\n\tver[++cnt]=y;\n\tedge[cnt]=z;\n\tnxt[cnt]=head[x];\n\thead[x]=cnt;\n}\n//\u66fc\u54c8\u987f\u8ddd\u79bb \nint x[100005],y[100005];\nint dis[505][505];\nint dx[]={1,-1,0,0};\nint dy[]={0,0,1,-1};\nint v[505][505];\nstruct node {int x,y;};\nvoid bfs()\n{\n\tqueue<node> q;\n\tmemset(dis,0x3f,sizeof dis);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tdis[x[i]][y[i]]=0;\n\t\tq.push((node){x[i],y[i]});\n\t}\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front().x;\n\t\tint y=q.front().y;\n\t\tq.pop();\n\t\tfor(int i=0;i<4;i++)\n\t\t{\n\t\t\tint nx=x+dx[i];\n\t\t\tint ny=y+dy[i];\n\t\t\tif(nx<0||ny<0||nx>h||ny>w)continue;\n\t\t\tif(dis[nx][ny]>dis[x][y]+1)\n\t\t\t{\n\t\t\t\tdis[nx][ny]=dis[x][y]+1;\n\t\t\t\tq.push((node){nx,ny});\n\t\t\t}\n\t\t}\n\t}\n}\n//id\nint id(int x,int y){return x*(w+1)+y;}\n//\u5efa\u56fe \nvoid build()\n{\n\tn=(w+1)*(h+1);\n\tfor(int i=0;i<=h;i++)\n\t{\n\t\tfor(int j=0;j<=w;j++)\n\t\t{\n\t\t\tint x=id(i,j);\n//\t\t\t\u4e00\u5171\u62c6\u4e866\u4e2a\u70b9\n//\t\t\t0,1,2,3\u4ee3\u8868\u7403\u5411\u56db\u4e2a\u65b9\u5411\u6eda\u52a8\n//\t\t\t4\u4ee3\u8868\u6c42\u5728\u8fd9\u91cc\u505c\u4e0b\u6ca1\u6709\u4eba\u63a7\u7403\n//\t\t\t5\u4ee3\u8868\u6709\u4eba\u63a7\u7403 \n\t\t\tfor(int k=0;k<4;k++)\n\t\t\t{\n\t\t\t\tadd(x+k*n,x+4*n,0);//\u7403\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4ece\u6eda\u52a8\u505c\u4e0b\u6765\n\t\t\t\tadd(x+5*n,x+k*n,b);//\u5728\u6709\u4eba\u63a7\u7403\u7684\u60c5\u51b5\u4e0b\u8e22\u7403 \n\t\t\t\tint nx=i+dx[k];\n\t\t\t\tint ny=j+dy[k];\n\t\t\t\tif(nx<0||ny<0||nx>h||ny>w)continue;\n\t\t\t\tint y=id(nx,ny);\n\t\t\t\tadd(x+k*n,y+k*n,a);//\u7403\u5411\u524d\u6eda\u52a8 \n\t\t\t\tadd(x+5*n,y+5*n,c);//\u4e00\u4e2a\u4eba\u63a7\u7403\u5411\u524d \n\t\t\t}\n\t\t\tadd(x+4*n,x+5*n,1ll*c*dis[i][j]);//\u4e00\u4e2a\u7403\u5458\u8dd1\u8fc7\u6765\u63a7\u7403 \n\t\t}\n\t}\n}\n//dij\nstruct Node\n{\n\tint x;\n\tlong long d;\n\tbool operator<(const Node& B)const\n\t{\n\t\treturn d>B.d;\n\t}\n};\nlong long d[N*10];\nbool V[N*10];\nlong long ans=0x7f7f7f7f7f7f7f7f;\nvoid dij()\n{\n\tpriority_queue<Node>q;\n\tmemset(d,0x3f,sizeof d);\n\td[id(x[1],y[1])+4*n]=0;\n\tq.push((Node){id(x[1],y[1])+4*n,0});\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().x;\n\t\tq.pop();\n\t\tif(V[x])continue;\n\t\tV[x]=1;\n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(d[y]>d[x]+edge[i])\n\t\t\t{\n\t\t\t\td[y]=d[x]+edge[i];\n\t\t\t\tq.push((Node){y,d[y]});\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&h,&w);\n\tscanf(\"%d%d%d\",&a,&b,&c);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&x[i],&y[i]);\n\t}\n\tbfs();\n\tbuild();\n\tdij();\n\tfor(int i=0;i<6;i++)\n\t{\n\t\tans=min(ans,d[id(x[m],y[m])+i*n]);\n\t}\n\tprintf(\"%lld\",ans);\n\treturn 0;\n} \n```\n",
        "postTime": 1615017050,
        "uid": 250916,
        "name": "_Dreamer_",
        "ccfLevel": 0,
        "title": "P5100 [JOI 2017 Final]\u8db3\u7403"
    },
    {
        "content": "\u4e0d\u6127\u662f\u672c\u5b50\u56fd\uff0c\u9898\u76ee\u771f\u4f1a\u73a9\u3002\n\n------------\n\n\u770b\u5230\u6c42\u6700\u5c0f\u4ee3\u4ef7\uff0c\u8fd8\u6709\u683c\u5b50\u5f62\u72b6\u7684\u5730\u56fe\uff0c\u60f3\u5230\u4e86\u5efa\u56fe\u7136\u540e\u6c42\u6700\u77ed\u8def\u5f84\u3002\n\n\u600e\u4e48\u5efa\u56fe\u5462\uff1f\u6839\u636e\u4e00\u4e9b\u7384\u5b66\u7ecf\u9a8c\uff0c\u5982\u679c\u96be\u4ee5\u76f4\u63a5\u8f6c\u5316\u4e3a\u56fe\uff0c\u4e00\u822c\u53ef\u4ee5\u62c6\u70b9\uff0c\u6784\u9020\u5206\u5c42\u56fe\u3002\n\n\u9996\u5148\u62c6\u51fa\u4eba\u8fd0\u7403\u7684\u4e00\u5c42\uff08$0$\u5c42\uff09\uff0c\u56e0\u4e3a\u4eba\u8fd0\u7403\u7684\u4ee3\u4ef7\u548c\u7403\u81ea\u5df1\u6eda\u7684\u4ee3\u4ef7\u4e0d\u4e00\u6837\uff0c\u5e76\u4e14\u8fd9\u4e24\u79cd\u72b6\u6001\u4e92\u76f8\u8f6c\u5316\u4ee3\u4ef7\u4e0d\u4e3a $0$\u3002\n\n\u7136\u540e\u628a\u7403\u6eda\u7684\u4e00\u5c42\u62c6\u6210\u4e24\u5c42\uff0c\u4e0a\u4e0b\u6eda\uff08$1$\u5c42\uff09\u548c\u5de6\u53f3\uff08$2$\u5c42\uff09\uff0c\u56e0\u4e3a\u7403\u6eda\u52a8\u4e2d\u4e0d\u80fd\u968f\u610f\u62d0\u5f2f\u3002\n\n\u8003\u8651\u5982\u4f55\u6784\u9020\u8de8\u5c42\u7535\u68af\u3002\n\n\u4ece\u8fd0\u7403\u5230\u4f20\u51fa\u53bb\u9700\u8981\u5f00\u4e00\u811a\u7684\u4ee3\u4ef7 $B$\u3002\n\n\u8bbe $(i,j)$ \u6700\u8fd1\u7684\u7403\u5458\u8d76\u8fc7\u6765\u7684\u6b65\u6570\u4e3a $mindist_{i,j}$\u3002\n\n\u63a5\u7403\u9700\u8981\u6700\u8fd1\u7684\u7403\u5458\u706b\u901f\u8d76\u8fc7\u6765\uff0c\u5373\u4ee3\u4ef7\u4e3a $mindist_{i,j}\\times C$\u3002\n\n\u56fe\u793a\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/25eylaxz.png)\n\n$$\\color{grey}{\\tiny\\text{\u62b1\u6b49 1 \u5c42\u548c 2 \u5c42\u653e\u53cd\u4e86\uff0c\u4f60\u4eec\u77e5\u9053\u5c31\u597d\u3002}}$$\n\n\u6240\u4ee5\u5efa\u56fe\u5c31\u662f\u8fd9\u6837\u7684\uff1a\n\n* $0$ \u5c42\u5efa\u7f51\u683c\u56fe\uff0c\u6240\u6709\u4ee3\u4ef7\u4e3a $C$\u3002\n\n* $1$ \u5c42\u5efa\u53ea\u6709\u4e0a\u4e0b\u8fb9\u7684\u56fe\u3002\u6240\u6709\u4ee3\u4ef7\u4e3a $A$\u3002\n\n* $2$ \u5c42\u5efa\u53ea\u6709\u5de6\u53f3\u8fb9\u7684\u56fe\u3002\u6240\u6709\u4ee3\u4ef7\u4e3a $A$\u3002\n\n* $0$ \u5230 $1,2$ \u5c42\u70b9\u5185\u5efa\u5355\u5411\u8fb9\uff0c\u4ee3\u4ef7\u4e3a $B$\u3002\n\n* $1,2$ \u5230 $0$ \u5c42\u70b9\u5185\u5efa\u5355\u5411\u8fb9\uff0c\u4ee3\u4ef7\u4e3a $mindist_{i,j}\\times C$\u3002\n\n\u5f00\u59cb\u7528\u4e00\u4e2a BFS \u9884\u5904\u7406 $mindist$ \u6570\u7ec4\u5373\u53ef\u3002\n\n\u4ec0\u4e48\u4e1c\u897f\u90fd\u53ef\u4ee5\u770b\u4ee3\u7801\u77e5\u9053\u3002\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <algorithm>\n#define int long long\n#define MAXPLAYERS 100010\n#define MLEN 510\nusing namespace std;\nstruct edge\n{\n    int b;\n    int next;\n    int w;\n} e[4001000];\nint tot;\nint head[4000010];\nvoid add(int a, int b, int c)\n{\n    e[++tot].b = b;\n    e[tot].next = head[a];\n    head[a] = tot;\n    e[tot].w = c;\n}\nvoid cadd(int u, int v, int w)\n{\n    add(u, v, w);\n    add(v, u, w);\n}\nint n, w, h;\nint A,B,C;\nint read()\n{\n    char ch=getchar();\n    int x=0,cf=1;\n    while(ch<'0'||ch>'9') {if(ch=='-') cf=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9') {x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*cf;\n}\nstruct block{\n    int S;\n    int T;\n    block operator+(block b)\n    {\n        return block{S+b.S,T+b.T};\n    }\n}players[MAXPLAYERS];//\u5b58\u50a8\u4e00\u4e2a\u5750\u6807\u3002\nint mapping[MLEN][MLEN][3];\nint mindist[MLEN][MLEN];//\u6700\u8fd1\u7684\u7403\u5458\u8d76\u8fc7\u6765\u7684\u6b65\u6570\n\n//\u5e7f\u641c\u5904\u7406mindist\nint shiftx[4]={1,0,-1,0};\nint shifty[4]={0,1,0,-1};\nvoid get_Mindist()\n{\n    memset(mindist,0x3f,sizeof(mindist));\n    queue<block> q;//\u7528\u4e8eBFS\n    for(int i = 1; i <= n; i++)\n    {\n        mindist[players[i].S][players[i].T]=0;\n        q.push(players[i]);\n    }\n    while(q.size())\n    {\n        block cur=q.front();\n        q.pop();\n        for(int i = 0;i<4;i++)\n        {\n            if(0<=cur.S+shiftx[i]&&cur.S+shiftx[i]<=h)\n                if(0<=cur.T+shifty[i]&&cur.T+shifty[i]<=w)\n                    if(mindist[cur.S+shiftx[i]][cur.T+shifty[i]]>mindist[cur.S][cur.T]+1)\n                    {\n                        mindist[cur.S+shiftx[i]][cur.T+shifty[i]]\n                            =mindist[cur.S][cur.T]+1;\n                        q.push(block{cur.S+shiftx[i],cur.T+shifty[i]});\n                    }\n        }\n    }\n    // for(int i = 0; i <= h; i++)\n    // {\n    //     for(int j = 0; j <= w; j++)\n    //         cout << mindist[i][j]<<\" \";\n    //     cout << endl;\n    // }    \n    \n}\n//\u5f97\u5230\u5206\u5c42\u56fe\u6240\u6709\u70b9\u7684\u6620\u5c04\nint tot_count;\nvoid get_Mapping()\n{\n    //0\u5c42\uff0c\u8fd0\u7403\n    for(int i = 0; i <= h+1; i++)\n        for(int j = 0; j <= w+1; j++)\n            mapping[i][j][0]=++tot_count;\n    //1\u5c42\uff0c\u4e0a\u4e0b\u8e22\u7403\uff0c\u6cbf\u7b2c\u4e00\u7ef4\n    for(int i = 0; i <= h+1; i++)\n        for(int j = 0; j <= w+1; j++)\n            mapping[i][j][1]=++tot_count;\n    //2\u5c42\uff0c\u5de6\u53f3\u8e22\u7403\uff0c\u6cbf\u7b2c\u4e8c\u7ef4\n    for(int i = 0; i <= h+1; i++)\n        for(int j = 0; j <= w+1; j++)\n            mapping[i][j][2]=++tot_count;\n}\n\nvoid linkup()\n{\n    //\u8fd0\u7403\n    for(int i = 0; i <= h; i++)\n        for(int j = 0; j <= w; j++)\n        {\n            cadd(mapping[i][j][0],mapping[i][j+1][0],C);\n            cadd(mapping[i][j][0],mapping[i+1][j][0],C);\n        }\n    //\u4e0a\u4e0b\u8e22\n    for(int i = 0; i <= h; i++)\n        for(int j = 0; j <= w; j++)\n            cadd(mapping[i][j][1],mapping[i+1][j][1],A);\n    //\u5de6\u53f3\u8e22\n    for(int i = 0; i <= h; i++)\n        for(int j = 0; j <= w; j++)\n            cadd(mapping[i][j][2],mapping[i][j+1][2],A);\n    //\u8fd0\u7403\u53d8\u4f20\u7403\n    //\u6ce8\u610f\uff0c\u662f\u5355\u5411\u7684\n    for(int i = 0; i <= h; i++)\n        for(int j = 0; j <= w; j++)\n        {\n            add(mapping[i][j][0],mapping[i][j][1],B);\n            add(mapping[i][j][0],mapping[i][j][2],B);\n        }\n    //\u4f20\u7403\u53d8\u8fd0\u7403\uff0c\u903c\u6700\u8fd1\u7403\u5458\u6765\u63a5\u4f4f\n    for(int i = 0; i <= h; i++)\n        for(int j = 0; j <= w; j++)\n        {\n            add(mapping[i][j][1],mapping[i][j][0],mindist[i][j]*C);\n            add(mapping[i][j][2],mapping[i][j][0],mindist[i][j]*C);\n        }\n    \n}\nint s;\n\nstruct node{\n    int u;\n    int dist;\n    const bool operator<(const node b)const{\n        return dist>b.dist;\n    }\n};priority_queue<node> dijkq;\nint ddist[MLEN*MLEN*4];\nint last[MLEN*MLEN*4];\nvoid dijkstra()\n{\n    s=mapping[players[1].S][players[1].T][0];\n    memset(ddist,0x3f,sizeof(ddist));\n    \n    ddist[s]=0;\n    dijkq.push({s,0});\n    while(dijkq.size())\n    {\n        node cur=dijkq.top();\n        dijkq.pop();\n        int u=cur.u;\n        if(ddist[u]!=cur.dist)continue;\n        for(int i = head[u];i;i=e[i].next)\n        {\n            int v=e[i].b;\n            int w=e[i].w;\n            if(ddist[v]>ddist[u]+w)\n            {\n                ddist[v]=ddist[u]+w;\n                last[v]=u;\n                dijkq.push({v,ddist[v]});\n            }\n        }\n    }\n}\nsigned main()\n{\n    h=read();w=read();\n    A=read();B=read();C=read();\n    n=read();\n    for(int i = 1; i <= n; i++)\n    {\n        players[i].S=read();\n        players[i].T=read();\n    }\n    get_Mindist();\n    get_Mapping();\n    linkup();\n    dijkstra();\n    cout << min({\n        ddist[mapping[players[n].S][players[n].T][0]],\n        ddist[mapping[players[n].S][players[n].T][1]],\n        ddist[mapping[players[n].S][players[n].T][2]]});\n        //\u5230\u7ec8\u70b9\uff0c\u6ca1\u8bf4\u600e\u4e48\u5230\uff0c\u53d6min\u5373\u53ef\u3002\n}\n```",
        "postTime": 1668522645,
        "uid": 364027,
        "name": "The_BJX",
        "ccfLevel": 5,
        "title": "P5100 [JOI2017Final] Soccer \u9898\u89e3"
    }
]