[
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c -> [\u63a8\u9500\u535a\u5ba2](https://nikaidou-shinku.github.io/\u3010\u9898\u89e3\u3011-Luogu5489-EntropyIncreaser\u4e0e\u52a8\u6001\u56fe/)\n\n---\n\n# \u524d\u8a00\n\n\u8fd9\u4e2a\u9898\u5176\u5b9e\u6ca1\u6709\u591a\u96be\uff0c\u9759\u4e0b\u6765\u6162\u6162\u5199\u8fd8\u662f\u5341\u5206\u53ef\u505a\u7684\uff0c\u4e0d\u5931\u4e3a\u4e00\u9053 $\\text{LCT}$ \u7ec3\u624b\u597d\u9898\u3002\n\n---\n\n# \u6b63\u6587\n\n\u9996\u5148\u770b\u5230 $1$ \u64cd\u4f5c\u8fde\u8fb9\uff0c\u7b2c\u4e00\u53cd\u5e94\u5e94\u8be5\u5c31\u662f $\\text{Link/Cut Tree}$ \u4e86\uff0c\u7136\u800c\u600e\u4e48\u7ef4\u62a4\u5272\u8fb9\u5272\u70b9\u6570\u91cf\u5462\uff1f\u6211\u4eec\u5206\u5f00\u8ba8\u8bba\u3002\n\n## \u5272\u8fb9\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u6240\u6709\u8fb9\u4e00\u5b9a\u4e0d\u4f1a\u662f\u5272\u8fb9\uff1b\u800c\u5bf9\u4e8e\u4e00\u6761\u94fe\uff0c\u94fe\u4e0a\u6240\u6709\u8fb9\u4e00\u5b9a\u662f\u5272\u8fb9\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u6bcf\u6761\u8fb9\u662f\u4e0d\u662f\u5272\u8fb9\uff0c\u521d\u59cb\u65f6\u6240\u6709\u8fb9\u90fd\u662f\u5272\u8fb9\uff0c\u5f53\u67d0\u6b21\u52a0\u8fb9\u64cd\u4f5c\u4ea7\u751f\u4e86\u73af\uff0c\u5219\u73af\u4e0a\u6240\u6709\u8fb9\u90fd\u4e0d\u4f1a\u6210\u4e3a\u5272\u8fb9\u4e86\u3002\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u8fb9\u8f6c\u70b9\u540e\u6240\u6709\u8fb9\u6743\u503c\u5747\u4e3a $1$ \uff0c\u5f53\u67d0\u6b21 $\\text{Link}$ \u7684\u4e24\u7ed3\u70b9\u5df2\u7ecf\u8fde\u901a\uff0c\u5219\u5c06\u4e24\u7ed3\u70b9\u95f4\u7684\u94fe\u4e0a\u7684\u8fb9\u5168\u90e8\u8d4b\u503c\u4e3a $0$ \uff0c\u540c\u65f6\u7ef4\u62a4\u548c\u5373\u53ef\u3002\n\n## \u5272\u70b9\n\n\u5272\u70b9\u4e0d\u50cf\u5272\u8fb9\u90a3\u6837\u597d\u5904\u7406\u4e86\u3002\n\n\u8003\u8651\u9759\u6001\u7684\u60c5\u51b5\uff0c\u9759\u6001\u5272\u70b9\u6709\u4e00\u4e2a\u6bd4\u8f83\u5957\u8def\u7684\u65b9\u6cd5\u662f\u7528**\u5706\u65b9\u6811**\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u52a8\u6001\u5730\u7ef4\u62a4\u4e00\u68f5\u5706\u65b9\u6811\uff1a\u6bcf\u6b21\u8fde\u8fb9\u4ea7\u751f\u73af\u5c31\u5c06\u73af\u4e0a\u6240\u6709\u70b9\u8fde\u5230\u4e00\u4e2a\u65b9\u70b9\u4e0a\u6765\u3002\n\n\u8003\u8651\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\uff1a\n\n\u5047\u8bbe\u73af\u7684\u957f\u5ea6\u662f $L$ \uff0c\u6bcf\u6b21\u4f1a\u7528 $O(L\\log n)$ \u7684\u590d\u6742\u5ea6\u5220\u53bb\u4e00\u4e2a\u957f\u4e3a $O(L)$ \u7684\u73af\uff0c\u5747\u644a\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$ \u3002\n\n---\n\n# \u6700\u540e\n\n\u4e8e\u662f\u4f7f\u7528\u4e24\u68f5 $\\text{LCT}$ \u5206\u522b\u7ef4\u62a4\u5272\u8fb9\u548c\u5272\u70b9\u5373\u53ef\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n\n#define N 200010\n#define lc(x) ch[x][0]\n#define rc(x) ch[x][1]\n\ninline void swap(int&a,int&b) {\n\tint tmp(a); a=b,b=tmp;\n}\n\nnamespace Summer {\n\tint ch[N][2],fa[N],rev[N],val[N],sumv[N],mark[N];\n\tinline void reverse(int x) {\n\t\tif(x) {\n\t\t\tswap(lc(x),rc(x));\n\t\t\trev[x]^=1;\n\t\t}\n\t}\n\tinline void NaCly_Fish_Orz(int x) {\n\t\tif(x) {\n\t\t\tval[x]=sumv[x]=0;\n\t\t\tmark[x]=1;\n\t\t}\n\t}\n\tinline void up(int x) {\n\t\tsumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x];\n\t}\n\tinline void down(int x) {\n\t\tif(rev[x]) {\n\t\t\treverse(lc(x));\n\t\t\treverse(rc(x));\n\t\t\trev[x]=0;\n\t\t}\n\t\tif(mark[x]) {\n\t\t\tNaCly_Fish_Orz(lc(x));\n\t\t\tNaCly_Fish_Orz(rc(x));\n\t\t\tmark[x]=0;\n\t\t}\n\t}\n\tinline int nrt(int x) {\n\t\treturn x==lc(fa[x])||x==rc(fa[x]);\n\t}\n\tvoid psa(int x) {\n\t\tif(nrt(x)) psa(fa[x]);\n\t\tdown(x);\n\t}\n\tinline void rotate(int x) {\n\t\tint y(fa[x]),z(fa[y]),k(x==rc(y));\n\t\tch[y][k]=ch[x][k^1],ch[x][k^1]=y;\n\t\tif(nrt(y)) ch[z][y==rc(z)]=x;\n\t\tif(ch[y][k]) fa[ch[y][k]]=y;\n\t\tfa[y]=x,fa[x]=z,up(y);\n\t}\n\tinline void splay(int x) {\n\t\tint y,z;\n\t\tfor(psa(x);nrt(x);rotate(x)) {\n\t\t\ty=fa[x],z=fa[y];\n\t\t\tif(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y);\n\t\t} up(x);\n\t}\n\tinline void access(int x) {\n\t\tfor(int y=0;x;x=fa[y=x]) {\n\t\t\tsplay(x); rc(x)=y; up(x);\n\t\t}\n\t}\n\tinline void mrt(int x) {\n\t\taccess(x); splay(x); reverse(x);\n\t}\n\tinline void link(int x,int y) {\n\t\tmrt(x); fa[x]=y;\n\t}\n\tinline void cut(int x,int y) {\n\t\tmrt(x); access(y); splay(y);\n\t\tfa[x]=lc(y)=0; up(y);\n\t}\n}\n\nnamespace Pockets {\n\tint ch[N][2],fa[N],rev[N],val[N],sumv[N],st[N],num;\n\tinline void reverse(int x) {\n\t\tif(x) {\n\t\t\tswap(lc(x),rc(x));\n\t\t\trev[x]^=1;\n\t\t}\n\t}\n\tinline void up(int x) {\n\t\tsumv[x]=sumv[lc(x)]+sumv[rc(x)]+val[x];\n\t}\n\tinline void down(int x) {\n\t\tif(rev[x]) {\n\t\t\treverse(lc(x));\n\t\t\treverse(rc(x));\n\t\t\trev[x]=0;\n\t\t}\n\t}\n\tinline int nrt(int x) {\n\t\treturn x==lc(fa[x])||x==rc(fa[x]);\n\t}\n\tvoid psa(int x) {\n\t\tif(nrt(x)) psa(fa[x]);\n\t\tdown(x);\n\t}\n\tinline void rotate(int x) {\n\t\tint y(fa[x]),z(fa[y]),k(x==rc(y));\n\t\tch[y][k]=ch[x][k^1],ch[x][k^1]=y;\n\t\tif(nrt(y)) ch[z][y==rc(z)]=x;\n\t\tif(ch[y][k]) fa[ch[y][k]]=y;\n\t\tfa[y]=x,fa[x]=z,up(y);\n\t}\n\tinline void splay(int x) {\n\t\tint y,z;\n\t\tfor(psa(x);nrt(x);rotate(x)) {\n\t\t\ty=fa[x],z=fa[y];\n\t\t\tif(nrt(y)) rotate(x==rc(y)^y==rc(z)?x:y);\n\t\t} up(x);\n\t}\n\tinline void access(int x) {\n\t\tfor(int y=0;x;x=fa[y=x]) {\n\t\t\tsplay(x); rc(x)=y; up(x);\n\t\t}\n\t}\n\tinline void mrt(int x) {\n\t\taccess(x); splay(x); reverse(x);\n\t}\n\tinline void link(int x,int y) {\n\t\tmrt(x); fa[x]=y;\n\t}\n\tinline void cut(int x,int y) {\n\t\tmrt(x); access(y); splay(y);\n\t\tfa[x]=lc(y)=0; up(y);\n\t}\n\tvoid print(int now) {\n\t\tif(now) {\n\t\t\tdown(now);\n\t\t\tprint(lc(now));\n\t\t\tst[++num]=now;\n\t\t\tprint(rc(now));\n\t\t}\n\t}\n}\n\nint n,q,opt,u,v,last,tot,ans,SummerPockets;\n\nint fa[N];\ninline int find(int x) {\n\treturn x==fa[x]?x:fa[x]=find(fa[x]);\n}\n\ninline void getEdge(int u,int v) {\n\tint x=find(u),y=find(v);\n\tif(x!=y) {\n\t\tans=-1;\n\t\treturn;\n\t}\n\tSummer::mrt(u);\n\tSummer::access(v);\n\tSummer::splay(v);\n\tans=Summer::sumv[v];\n}\n\ninline void getPoint(int u,int v) {\n\tint x=find(u),y=find(v);\n\tif(x!=y) {\n\t\tans=-1;\n\t\treturn;\n\t}\n\tPockets::mrt(u);\n\tPockets::access(v);\n\tPockets::splay(v);\n\tans=Pockets::sumv[v];\n}\n\ninline void link(int u,int v) {\n\tint x=find(u),y=find(v);\n\tif(x==y) {\n\t\tSummer::mrt(u);\n\t\tSummer::access(v);\n\t\tSummer::splay(v);\n\t\tSummer::NaCly_Fish_Orz(v);\n\t\t\n\t\tgetPoint(u,v);\n\t\tif(ans>2) {\n\t\t\t++SummerPockets;\n\t\t\tPockets::mrt(u);\n\t\t\tPockets::access(v);\n\t\t\tPockets::splay(v);\n\t\t\tPockets::num=0;\n\t\t\tPockets::print(v);\n\t\t\tfor(int i=1;i<Pockets::num;++i)\n\t\t\t\tPockets::cut(Pockets::st[i],Pockets::st[i+1]);\n\t\t\tfor(int i=1;i<=Pockets::num;++i)\n\t\t\t\tPockets::link(Pockets::st[i],SummerPockets);\n\t\t}\n\t} else {\n\t\t++tot; fa[y]=x;\n\t\tSummer::val[tot]=1;\n\t\tSummer::link(u,tot);\n\t\tSummer::link(tot,v);\n\t\t\n\t\tPockets::link(u,v);\n\t}\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&q);\n\ttot=SummerPockets=n;\n\tfor(int i=1;i<=n;++i)\n\t\tfa[i]=i,Pockets::val[i]=1;\n\twhile(q--) {\n\t\tscanf(\"%d%d%d\",&opt,&u,&v);\n\t\tu^=last,v^=last;\n\t\tswitch(opt) {\n\t\t\tcase 1: {\n\t\t\t\tlink(u,v);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tgetEdge(u,v);\n\t\t\t\tif(ans!=-1) last=ans;\n\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tgetPoint(u,v);\n\t\t\t\tif(ans!=-1) last=ans;\n\t\t\t\tprintf(\"%d\\n\",ans);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1565135305,
        "uid": 126486,
        "name": "yurzhang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5489 \u3010EntropyIncreaser \u4e0e \u52a8\u6001\u56fe\u3011"
    },
    {
        "content": "upd 20221122\uff1a\u539f\u6765\u7684\u4ee3\u7801\u6709\u4e00\u5904\u5c0f\u9505\uff08\u5728 LCT \u4e2d\u8bbf\u95ee\u4e86\u88ab\u7f29\u6389\u7684\u70b9\uff09\uff0c\u73b0\u5728\u4fee\u597d\u4e86\n\n##\n\n%%% NaCly_Fish\n\n\u8003\u8651\u7528 LCT \u7ef4\u62a4\u64cd\u4f5c $1,2$\uff0c\u53ef\u4ee5\u5c06\u6bcf\u4e2a **\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf** \u7f29\u6210\u4e00\u4e2a\u70b9\u3002\n\n\u52a0\u8fb9\u65f6\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u8fde\u63a5\u7684 $u,v$ \u4e24\u70b9\u4e0d\u8fde\u901a\uff0c\u5728\u52a8\u6001\u6811\u4e0a\u8fde\u63a5 $u,v$ \u5373\u53ef\uff1b\u5982\u679c\u5df2\u7ecf\u8fde\u901a\uff0c\u5219 $u,v$ \u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u5e94\u8be5\u5728\u4e00\u4e2a\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u5f53\u4e2d\uff0c\u9700\u8981\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\u6211\u4eec\u5148 `Split(u,v)`\uff0c\u5728\u8f85\u52a9\u6811\u4e0a\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5c06\u4e00\u4e2a\u5b50\u6811\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\n\n\u6bcf\u4e2a\u70b9\u5f52\u5c5e\u7684\u7f29\u70b9\u4e4b\u540e\u7684\u70b9\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3001\u7f29\u70b9\u65f6\u66b4\u529b\u904d\u5386\u5b50\u6811\uff0c\u5c06\u5176\u4e0e\u7f29\u70b9\u540e\u7684\u7ed3\u70b9\u5408\u5e76\u3002\u7531\u4e8e\u66b4\u529b\u904d\u5386\u7684\u5b50\u6811\u4e2d\u6700\u540e\u53ea\u4f1a\u5269\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\u3002\n\n\u67e5\u8be2\u4e24\u70b9\u95f4\u7684\u5272\u8fb9\u6570\u91cf\uff0c\u7531\u4e8e\u6b64\u65f6\u6240\u6709\u8fb9-\u53cc\u8fde\u901a\u5206\u91cf\u90fd\u88ab\u7f29\u6210\u4e86\u4e00\u4e2a\u70b9\uff0c\u8fd8\u5728\u8f85\u52a9\u6811\u4e0a\u7684\u8fb9\u4e00\u5b9a\u662f\u5272\u8fb9\u3002\u6b64\u65f6\u7684\u7b54\u6848\u5373\u4e3a\u7f29\u70b9\u540e LCT \u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u7684\u8fb9\u6570\uff08$=$ \u70b9\u6570 $-1$\uff09\u3002\n\n\u8003\u8651\u52a0\u5165 $3$ \u64cd\u4f5c\u3002\u6b64\u65f6\u8981\u6c42\u7684\u662f\u5c06\u6bcf\u4e2a **\u70b9-\u53cc\u8fde\u901a\u5206\u91cf** \u7f29\u6210\u4e00\u4e2a\u70b9\u3002\u4f46\u662f\u4e00\u4e2a\u70b9\u53ef\u80fd\u5f52\u5c5e\u4e8e\u591a\u4e2a **\u6781\u5927** \u70b9-\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u4e0d\u80fd\u76f4\u63a5\u7f29\u70b9\u7ef4\u62a4\u3002\n\n\u5229\u7528 **\u5706\u65b9\u6811** \u7684\u601d\u60f3\u3002\u5047\u8bbe\u539f\u6765\u7684 $n$ \u4e2a\u70b9\u90fd\u662f **\u5706\u70b9** \uff0c\u7528\u4e00\u4e2a **\u65b9\u70b9** \u4ee3\u8868\u4e00\u4e2a\u70b9-\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5219\u5f53\u8fde\u8fb9\u65f6 $u,v$ \u5df2\u7ecf\u8fde\u901a\uff0c\u5219 $u,v$ \u8def\u5f84\u4e0a\u7684\u70b9\u5f52\u5c5e\u4e8e\u4e00\u4e2a\u70b9-\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u53ef\u4ee5\u66b4\u529b\u904d\u5386\u8f85\u52a9\u6811\u4e0a\u7684\u5b50\u6811\uff08\u53ef\u80fd\u5305\u542b\u5706\u70b9\u548c\u65b9\u70b9\uff09\uff0c\u65ad\u5f00\u539f\u6709\u7684\u8fde\u63a5\uff0c\u5e76\u5c06\u5b50\u6811\u4e0a\u7684\u6240\u6709\u70b9\u8fde\u63a5\u5230\u65b0\u7684\u4e00\u4e2a\u65b9\u70b9\u3002\n\n\u67e5\u8be2\u4e24\u70b9\u95f4\u7684\u5272\u70b9\u6570\u91cf\uff0c\u53ea\u8981\u6c42\u8def\u5f84\u4e0a\u7684\u5706\u70b9\u7684\u6570\u91cf\u5373\u53ef\u3002\u56e0\u4e3a\u5728\u4e00\u4e2a\u70b9-\u53cc\u8fde\u901a\u5206\u91cf\u5185\u90e8\uff0c\u4e0d\u5b58\u5728\u5272\u70b9\uff0c\u53ef\u80fd\u7684\u5272\u70b9\u53ea\u4f1a\u662f\u5728\u8def\u5f84\u4e0a\u7684\u4e24\u4e2a\uff0c\u6240\u4ee5\u8fd9\u6837\u6c42\u5f97\u7684\u7b54\u6848\u662f\u6b63\u786e\u7684\u3002\n\n\u81f3\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u611f\u6027\u7406\u89e3\uff08\u5728\u540c\u4e00\u4e2a\u70b9\u53cc\u5185\u90e8\u7684\u70b9\u7684\u8ddd\u79bb\u90fd $\\le 2$\uff09\uff0c\u6216\u8005\u7528\u52bf\u80fd\u5206\u6790\u6cd5\u8bc1\u660e\u662f $O(n\\log n)$ \u7684\u3002\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n#### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100010;\nint n,q,op,u,v,lstans,f[maxn];\nstruct LCT3\n{\n    int cur,ch[maxn*4][2],fa[maxn*4],tag[maxn*4],siz[maxn*4],val[maxn*4],sum[maxn*4];\n    int getch(int x){return ch[fa[x]][1]==x;}\n    int isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\n    void maintain(int x)\n    {\n        siz[x]=siz[ch[x][0]]+1+siz[ch[x][1]];\n        sum[x]=sum[ch[x][0]]+val[x]+sum[ch[x][1]];\n    }\n    void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],chx=getch(x),chy=getch(y);\n        fa[x]=z;if(!isroot(y))ch[z][chy]=x;\n        ch[y][chx]=ch[x][chx^1];fa[ch[x][chx^1]]=y;\n        ch[x][chx^1]=y;fa[y]=x;\n        maintain(y);maintain(x);\n    }\n    void pushdown(int x)\n    {\n        if(!tag[x])return;\n        if(ch[x][0])tag[ch[x][0]]^=1,swap(ch[ch[x][0]][0],ch[ch[x][0]][1]);\n        if(ch[x][1])tag[ch[x][1]]^=1,swap(ch[ch[x][1]][0],ch[ch[x][1]][1]);\n        tag[x]=0;\n    }\n    void update(int x)\n    {\n        if(!isroot(x))update(fa[x]);\n        pushdown(x);\n    }\n    void splay(int x)\n    {\n        update(x);\n        for(int f=fa[x];f=fa[x],!isroot(x);rotate(x))\n        if(!isroot(f))rotate(getch(x)==getch(f)?f:x);\n    }\n    void access(int x)\n    {\n        for(int f=0;x;f=x,x=fa[x])splay(x),ch[x][1]=f,maintain(x);\n    }\n    void makeroot(int x)\n    {\n        access(x);splay(x);\n        tag[x]^=1;swap(ch[x][0],ch[x][1]);\n    }\n    int find(int x)\n    {\n        access(x);splay(x);\n        while(ch[x][0])x=ch[x][0];\n        splay(x);\n        return x;\n    }\n    void build(int x,int f)\n    {\n        if(!x)return;\n        fa[x]=f;\n        build(ch[x][0],f);build(ch[x][1],f);\n        ch[x][0]=ch[x][1]=0;\n        maintain(x);\n    }\n    void link(int x,int y)\n    {\n        makeroot(x);access(y);splay(y);\n        fa[x]=y;\n    }\n}st3;\nint findp(int x){return f[x]?f[x]=findp(f[x]):x;}\nvoid merge(int x,int y){x=findp(x);y=findp(y);if(x!=y)f[x]=y;}\nstruct LCT\n{\n    int cur,ch[maxn][2],fa[maxn],tag[maxn],siz[maxn],val[maxn],sum[maxn];\n    int getch(int x){return ch[fa[x]][1]==x;}\n    int isroot(int x){return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;}\n    void maintain(int x)\n    {\n        siz[x]=siz[ch[x][0]]+1+siz[ch[x][1]];\n        sum[x]=sum[ch[x][0]]+val[x]+sum[ch[x][1]];\n    }\n    void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],chx=getch(x),chy=getch(y);\n        fa[x]=z;if(!isroot(y))ch[z][chy]=x;\n        ch[y][chx]=ch[x][chx^1];fa[ch[x][chx^1]]=y;\n        ch[x][chx^1]=y;fa[y]=x;\n        maintain(y);maintain(x);\n    }\n    void pushdown(int x)\n    {\n        if(!tag[x])return;\n        if(ch[x][0])tag[ch[x][0]]^=1,swap(ch[ch[x][0]][0],ch[ch[x][0]][1]);\n        if(ch[x][1])tag[ch[x][1]]^=1,swap(ch[ch[x][1]][0],ch[ch[x][1]][1]);\n        tag[x]=0;\n    }\n    void update(int x)\n    {\n        if(!isroot(x))update(fa[x]);\n        pushdown(x);\n    }\n    void splay(int x)\n    {\n        update(x);\n        for(int f=fa[x];f=fa[x],!isroot(x);rotate(x))\n        if(!isroot(f))rotate(getch(x)==getch(f)?f:x);\n    }\n    void access(int x)\n    {\n        for(int f=0;x;f=x,x=fa[x])splay(x),ch[x][1]=f,fa[x]=findp(fa[x]),maintain(x);\n    }\n    void makeroot(int x)\n    {\n        access(x);splay(x);\n        tag[x]^=1;swap(ch[x][0],ch[x][1]);\n    }\n    int find(int x)\n    {\n        access(x);splay(x);\n        while(ch[x][0])x=ch[x][0];\n        splay(x);\n        return x;\n    }\n    void build(int x)\n    {\n        if(!x)return;\n        if(ch[x][0])build(ch[x][0]),merge(ch[x][0],x);\n        if(ch[x][1])build(ch[x][1]),merge(ch[x][1],x);\n    }\n    void link(int x,int y)\n    {\n        makeroot(x);access(y);splay(y);\n        fa[x]=y;\n    }\n}st2;\nint main()\n{\n    scanf(\"%d%d\",&n,&q);st3.cur=n;\n    for(int i=1;i<=n;i++)st3.val[i]=1,st3.maintain(i),st2.maintain(i);\n    while(q--)\n    {\n        scanf(\"%d%d%d\",&op,&u,&v);\n        u^=lstans;v^=lstans;\n        if(op==1)\n        {\n        \tint uu=findp(u),vv=findp(v);\n            if(st2.find(uu)!=st2.find(vv))st2.link(uu,vv),st3.link(u,v);\n            else\n            {\n                st3.makeroot(u);st3.access(v);st3.splay(v);\n                if(st3.sum[v]>2)st3.cur++,st3.build(v,st3.cur);\n                u=findp(u);v=findp(v);\n                st2.makeroot(u);st2.access(v);st2.splay(v);\n                st2.build(v);st2.maintain(v);\n            }\n        }\n        if(op==2)\n        {\n            u=findp(u);v=findp(v);\n            if(st2.find(u)!=st2.find(v)){printf(\"-1\\n\");continue;}\n            st2.makeroot(u);st2.access(v);st2.splay(v);\n            printf(\"%d\\n\",lstans=st2.siz[v]-1);\n        }\n        if(op==3)\n        {\n            if(st3.find(u)!=st3.find(v)){printf(\"-1\\n\");continue;}\n            st3.makeroot(u);st3.access(v);st3.splay(v);\n            printf(\"%d\\n\",lstans=st3.sum[v]);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1565137452,
        "uid": 43486,
        "name": "hsfzLZH1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5489 \u3010EntropyIncreaser \u4e0e \u52a8\u6001\u56fe\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n$n$ \u4e2a\u70b9\u7684\u56fe\uff0c\u521d\u59cb\u6ca1\u6709\u8fb9\uff0c\u6267\u884c $3$ \u79cd\u64cd\u4f5c\u3002\n\n\u52a8\u6001\u52a0\u8fb9\uff0c\u52a8\u6001\u67e5\u8be2\u4e24\u70b9\u95f4\u5272\u8fb9\u4e0e\u5272\u70b9\u7684\u6570\u91cf\u3002\n\n\u64cd\u4f5c\u4e00\u5171 $q$ \u6b21\u3002\n\n$\\text{Data Range:} 1 \\le n \\le 10^5, 1\\le q\\le 3 \\times 10^5$\n\n---------\n\u4f5c\u4e3a $\\text{LCT}$ \u7684\u7ef4\u62a4\u56fe\u7ed3\u6784\u7684\u7ec3\u624b\u9898\u662f\u4e0d\u9519\u7684\u3002\n\n\u5206\u522b\u8003\u8651\u5982\u4f55\u6c42\u5272\u8fb9\u5272\u70b9\u3002\n\n\u5148\u8003\u8651\u5272\u8fb9\u600e\u4e48\u505a\u3002\n\n\u8003\u8651\u4e00\u68f5\u6811\u7684\u5272\u8fb9\u5c31\u662f\u6811\u4e0a\u7684\u8fb9\u6570\u91cf\uff0c\u5f53\u5f62\u6210\u4e86\u4e00\u4e2a\u73af\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u73af\u5185\u7684\u5168\u90e8\u8fb9\u5c06\u90fd\u4e0d\u662f\u5272\u8fb9\u3002\n\n\u56e0\u4e3a\u52a8\u6001\u52a0\u8fb9\uff0c\u81ea\u7136\u60f3\u5230 $\\text{LCT}$ \u7ef4\u62a4\uff0c\u8003\u8651\u56e0\u4e3a\u7ef4\u62a4\u7684\u662f\u8fb9\uff0c\u80af\u5b9a\u8981\u65b0\u52a0\u70b9\uff0c\u521d\u59cb\u5c06\u53ef\u80fd\u88ab\u52a0\u5165\u7684\u70b9\u5168\u90e8\u503c\u8bbe\u4e3a $1$\uff0c\u7136\u540e\u67e5\u8be2\u5c31\u662f\u67e5\u8be2\u4e24\u70b9\u95f4\u7684\u6743\u503c\u548c\u3002\n\n\u52a0\u8fb9\u65f6\u5982\u679c\u4e24\u70b9\u6ca1\u6709\u8054\u901a\u76f4\u63a5\u52a0\u5c31\u597d\u4e86\u3002\n\n\u5982\u679c\u5df2\u7ecf\u8fde\u901a\uff0c\u4ee3\u8868\u6210\u73af\u4e86\uff0c\u4e8e\u662f\u8981\u53bb\u6389\u8fd9\u8def\u5f84\u4e0a\u8fb9\u7684\u8d21\u732e\uff0c\u7b49\u4ef7\u4e8e\u5c06\u4e24\u70b9\u95f4\u8fb9\u503c\u5168\u90e8\u53d8\u4e3a $0$\u3002\n\n\u8fd9\u4e1c\u897f\u76f4\u63a5\u63d0\u51fa\u8def\u5f84\u4e4b\u540e\u6253\u6807\u8bb0\u5c31\u597d\u4e86\u3002\n\n\u8003\u8651\u5272\u70b9\u600e\u4e48\u505a\u3002\n\n\u6c42\u5272\u70b9\u5e38\u7528\u7684\u505a\u6cd5\u662f\u5706\u65b9\u6811\u3002\n\n\u90a3\u8003\u8651\u52a8\u6001\u7ef4\u62a4\u4e00\u4e2a\u5706\u65b9\u6811\u3002\n\n\u5176\u5b9e\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\uff0c\u5982\u679c\u52a0\u8fb9\u7684\u65f6\u5019\u6210\u73af\u4e86\uff0c\u90a3\u5c31\u76f4\u63a5\u66b4\u529b\u904d\u5386\u6bcf\u4e2a\u73af\uff0c\u7136\u540e\u5220\u73af\uff0c\u5efa\u4e00\u4e2a\u65b9\u70b9\uff0c\u8fd9\u4e9b\u6362\u4e0a\u70b9\u90fd\u662f\u5706\u70b9\u76f4\u63a5\u8fde\u5411\u8fd9\u4e2a\u65b9\u70b9\uff0c\u65b9\u70b9\u6743\u503c\u8bbe\u4e3a $1$\u3002\n\n\u90a3\u4e48\u8be2\u95ee\u4ecd\u7136\u662f\u4e00\u4e2a\u95ee\u4e24\u70b9\u95f4\u6743\u503c\u548c\u7684\u95ee\u9898\u3002\n\n\u505a\u5b8c\u4e86\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $n \\log n$\uff0c\u4ee3\u7801\u633a\u597d\u5199\u7684\u3002\n\n```cpp\n// \u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\u5fb7\u4e3d\u838e\u4f60\u597d\u53ef\u7231\n// \u5fb7\u4e3d\u838e\u7684\u53ef\u7231\u5728\u4e8e\u5fb7\u4e3d\u838e\u5f88\u53ef\u7231\uff0c\u5fb7\u4e3d\u838e\u4e3a\u4ec0\u4e48\u5f88\u53ef\u7231\u5462\uff0c\u8fd9\u662f\u56e0\u4e3a\u5fb7\u4e3d\u838e\u5f88\u53ef\u7231\uff01\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e6;\nint n, q, las, tot;\nvector<int> ver;\nclass LCT {\n  public :\n  struct node {\n    int val, tag, fa, ltag;\n    int ch[2];\n    int siz;//\u5272\u8fb9\u6570\u91cf\n    int sum;//\u5272\u70b9\u6570\u91cf\n  }t[N];\n  public :\n  #define ls(k) t[k].ch[0]\n  #define rs(k) t[k].ch[1]\n  public :\n  void pushup(int k) {\n    t[k].siz = t[ls(k)].siz + t[rs(k)].siz + t[k].val;\n    t[k].sum = t[ls(k)].sum + t[rs(k)].sum + t[k].val;\n  }\n  public :\n  bool chk(int x) {\n    return ( rs(t[x].fa) != x ) && ( ls(t[x].fa) != x );\n  }\n  public :\n  void pushdown(int x) {\n    if( t[x].tag ) {\n      swap( ls(x), rs(x) );\n      t[x].tag = 0;\n      t[ls(x)].tag ^= 1;  t[rs(x)].tag ^= 1;\n    }\n    if( t[x].ltag ) {\n      t[x].ltag = 0;\n      t[ls(x)].ltag = t[rs(x)].ltag = 1;\n      t[ls(x)].siz = t[rs(x)].siz = 0;\n      t[ls(x)].val = t[rs(x)].val = 0;\n    }\n  }\n  public :\n  void rotate(int x) {\n    int f = t[x].fa, ff = t[f].fa;\n    int z = (rs(f) == x), ch = t[x].ch[z ^ 1];\n    t[x].fa = ff; \n    if( !chk(f) ) t[ff].ch[rs(ff) == f] = x;\n    t[f].fa = x;  t[x].ch[z ^ 1] = f;\n    t[ch].fa = f;  t[f].ch[z] = ch;\n    pushup(f), pushup(x);\n  }\n  public :\n  int st[N], tp;\n  public :\n  void splay(int x) {\n    int u = x;  st[++tp] = x;\n    while(!chk(u)) st[++tp] = (u = t[u].fa);\n    while(tp) pushdown(st[tp--]);\n    while(!chk(x)) {\n      int f = t[x].fa, ff = t[f].fa;\n      if(!chk(f)) {\n        ( ( rs(ff) == f ) ^ ( rs(f) == x ) ) ? rotate(x) : rotate(f);\n      }\n      rotate(x);\n    }\n  }\n  public :\n  void access(int x) {\n    for(int y = 0; x; y = x, x = t[x].fa) {\n      splay(x);  rs(x) = y;  pushup(x);\n    }\n  }\n  public :\n  void makeroot(int x) {\n    access(x);  splay(x);  t[x].tag ^= 1;\n  }\n  public :\n  void spilt(int x,int y) {\n    makeroot(x);  access(y);  splay(y);\n  }\n  public :\n  int findrt(int x) {\n    access(x);  splay(x);  pushdown(x);\n    while ( ls(x) ) pushdown( x = ls(x) );\n    return x;\n  }\n  public :\n  void link(int x,int y) {\n    makeroot(x);\n    if(findrt(y) != x) t[x].fa = y;\n  }\n  public :\n  bool cut(int x,int y) {\n    if(findrt(x) != findrt(y)) return 0;\n    spilt(x, y);\n    if(t[x].fa != y || t[x].ch[1]) return 0;\n    t[x].fa = t[y].ch[0] = 0;\n    pushup(x);\n    return 1;\n  }\n  void dfs(int x, vector<int>& ver) {\n    pushdown(x);\n    if(t[x].ch[0]) dfs(t[x].ch[0], ver);\n    ver.push_back(x);\n    if(t[x].ch[1]) dfs(t[x].ch[1], ver);\n  }\n  void getroad(int x,int y, vector<int>& ver) {\n    ver.clear();\n    spilt(x, y);\n    dfs(y, ver);\n  }\n};\nLCT A, B;\nsigned main () {\n  ios :: sync_with_stdio( 0 );\n  cin.tie( 0 ), cout.tie( 0 );\n  cin >> n >> q;\n  for(int i = n + 1; i <= n + q; i++) A.t[i].val = 1;\n  for(int i = 1; i <= n; i++) B.t[i].val = 1;\n  tot = n;\n  int num = n;\n  for(int i = 1; i <= q; i++) {\n    int op, u, v, w;  cin >> op >> u >> v;\n    u ^= las;  v ^= las;\n    //cout << u << \" \" << v << \"\\n\";\n    int qx = A.findrt(u);\n    int qy = A.findrt(v);\n    if(op == 1) {\n      if(qx == qy) {\n        //\u5272\u8fb9\n        A.spilt(u, v);\n        A.t[v].siz = 0;  A.t[v].val = 0;\n        A.t[v].ltag = 1;\n        //\u5272\u70b9\n        B.getroad(u, v, ver);\n        for(int i = 1; i < ver.size(); i++) B.cut(ver[i], ver[i - 1]);\n        ++num;\n        for(int i = 0; i < ver.size(); i++) B.link(ver[i], n + num);\n      }  else  {\n        tot++;\n        A.link(u, tot);  A.link(tot, v);\n        B.link(u, v);\n      }\n    }  else if(op == 2) {\n      if(qx != qy) {  cout << \"-1\\n\";  continue;  }\n      A.spilt(u, v);\n      las = A.t[v].siz;\n      cout << A.t[v].siz << \"\\n\";\n    }  else if(op == 3) {\n      if(qx != qy) {  cout << \"-1\\n\";  continue;  }\n      B.spilt(u, v);\n      las = B.t[v].sum;\n      cout << B.t[v].sum << \"\\n\";\n    }\n  }\n  return 0;\n}\n```",
        "postTime": 1644326008,
        "uid": 206021,
        "name": "Pitiless0514",
        "ccfLevel": 7,
        "title": "P5489 EntropyIncreaser \u4e0e \u52a8\u6001\u56fe"
    },
    {
        "content": "\u9898\u76ee\u5728\u8fd9\uff1a[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5489)\u3002\n\n\u8fd9\u662f\u4e00\u9053\u5f88\u4e0d\u9519\u7684 LCT \u9898\u76ee\u3002\n\n\u4e00\u770b\u5230\u52a8\u6001\u52a0\u8fb9\u5c31\u77e5\u9053\u662f LCT \u4e86\u3002\n\n\u6b64\u9898\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\n\n1. \u52a8\u6001\u6c42\u6865\u3002\n2. \u52a8\u6001\u6c42\u5272\u70b9\u3002\n\n\u52a8\u6001\u6c42\u6865\u7684\u8bdd\u6709\u4e00\u9053[\u6a21\u677f\u9898](https://www.luogu.com.cn/problem/P2542)\uff0c\u800c\u52a8\u6001\u6c42\u5272\u70b9\u4e5f\u6709\u4e00\u9053[\u6a21\u677f\u9898](https://www.luogu.com.cn/problem/P5622)\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5148 A \u90a3\u4e24\u9898\uff0c\u4e5f\u53ef\u4ee5 A \u4e86\u8fd9\u9898\u540e\u518d A \u5176\u4ed6\u90a3\u4e24\u9898\u3002\n\n#### \u5982\u4f55\u52a8\u6001\u6c42\u6865\n\n\u56e0\u4e3a\u5728\u4e00\u4e2a\u70b9\u53cc\u7684\u8fb9\u4e00\u5b9a\u4e0d\u662f\u6865\uff0c\u6240\u4ee5\u8fde\u8fb9\u65f6\u5982\u679c\u539f\u5148\u8054\u901a\u7684\u8bdd\u5c31\u8fdb\u884c\u66b4\u529b dfs \u7f29\u6210\u4e00\u4e2a\u70b9\u3002\u770b\u4f3c\u5f88\u66b4\u529b\uff0c\u4f46\u5b9e\u9645\u4e0a\u5374\u662f\u5747\u644a $O(1)$ \u7684\uff08\u6bcf\u4e00\u4e2a\u70b9\u6700\u591a\u88ab\u7f29\u4e00\u6b21\uff09\u3002\n\n\u67e5\u8be2\u8def\u5f84\u4e0a\u7684\u6865\u65f6\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u8f93\u51fa LCT \u4e2d\u8fd9\u6761\u8def\u5f84\u7684\u70b9\u6570 -1 \u5373\u53ef\u3002\u56e0\u4e3a LCT \u4e0a\u7684\u4e00\u4e2a\u70b9\u4ee3\u8868\u4e00\u4e2a\u70b9\u53cc\uff0c\u6240\u4ee5 LCT \u4e2d\u8def\u5f84\u7684\u70b9\u6570 -1 \u5373\u4e3a\u8fde\u63a5\u8fd9\u4e9b\u70b9\u53cc\u7684\u8fb9\u6570\uff0c\u5373\u4e3a\u6865\u7684\u6570\u91cf\u3002\n\n\u66b4\u529b dfs \u7684\u4ee3\u7801:\n```cpp\nvoid dfs(int pos,int fa){//\u66b4\u529bdfs\n\tif(!pos)//\u5982\u679cpos\u4e3a\u7a7a\u5c31\u9000\u51fa\n\t\treturn ;\n\tf[pos]=fa;//f\u4e3a\u5e76\u67e5\u96c6\uff0cf[pos]\u8868\u793apos\u6240\u5728\u7684\u53cc\u8054\u901a\u5206\u91cf\u7684\u7f16\u53f7\n\tdfs(spl[pos].son[0],fa);\n\tdfs(spl[pos].son[1],fa);\n\tspl[pos].son[0]=spl[pos].son[1]=0;//\u65ad\u513f\u5b50\n\tpushup(pos);//\u66f4\u65b0\uff08\u6bd5\u7adf\u513f\u5b50\u90fd\u6ca1\u4e86\u561b\uff09\n}\n```\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u66f4\u65b0\u4e86 $f$ \u6570\u7ec4\uff0c\u6240\u4ee5\u5728 access \u64cd\u4f5c\u65f6\u8df3 $fa$ \u65f6\u9700\u8981\u66f4\u65b0\u3002\n\naccess \u4ee3\u7801\uff1a\n```cpp\nvoid access(int pos){\n\tint son=0;\n\twhile(pos){\n\t\tsplaying(pos);\n\t\tspl[pos].son[1]=son;\n\t\tpushup(pos);\n\t\tson=pos;\n\t\tpos=spl[pos].fa=find(spl[pos].fa);//\u8bb0\u5f97\u66f4\u65b0\n\t}\n}\n```\n\n#### \u5982\u4f55\u52a8\u6001\u6c42\u5272\u70b9\n\n\u5f04\u5272\u70b9\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u4e1c\u897f\uff1a**\u5706\u65b9\u6811**\u3002\n\n\u4e0d\u592a\u61c2\u601d\u60f3\u7684\u53ef\u4ee5\u53bb[\u6d1b\u8c37\u65e5\u62a5](https://www.luogu.com.cn/blog/PinkRabbit/Introduction-to-Round-Square-Tree)\u770b\u770b\u3002\n\n\u56e0\u4e3a\u8fde\u63a5\u70b9\u53cc\u7684\u5206\u9694\u70b9\u662f\u5272\u70b9\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u5706\u65b9\u6811\u4e2d\uff0c$x$ \u5230 $y$ \u7684\u8def\u5f84\u4e0a\u7684\u5706\u70b9\u4e2a\u6570\u5373\u4e3a $x$ \u5230 $y$ \u8def\u5f84\u4e0a\u7684\u5272\u70b9\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u8fde\u8fb9\u65f6\u5982\u679c\u539f\u5148\u8054\u901a\u7684\u8bdd\u5c31\u8fdb\u884c\u66b4\u529b dfs\uff0c\u628a\u8fd9\u4e00\u4e2a\u70b9\u53cc\u4e0a\u7684\u70b9\u90fd\u4e0e\u4e00\u4e2a\u65b9\u70b9\u8fdb\u884c\u8fde\u8fb9\u3002\u8fd9\u4e2a dfs \u7684\u8fc7\u7a0b\u4e5f\u662f\u5747\u644a $O(1)$ \u7684\u3002\n\n\u66b4\u529b dfs \u7684\u4ee3\u7801\uff1a\n```cpp\nvoid dfs(int pos,int fa){//\u66b4\u529bdfs\n\tspl[pos].fa=fa;//\u65ad\u6389\u539f\u6765\u7684\u8fb9\uff0c\u8fde\u5411\u4e00\u4e2a\u65b9\u70b9\n\tif(spl[pos].son[0])\n\t\tdfs(spl[pos].son[0],fa);\n\tif(spl[pos].son[1])\n\t\tdfs(spl[pos].son[1],fa);\n\tspl[pos].son[0]=spl[pos].son[1]=0;//\u65ad\u513f\u5b50\n\tpushup(pos);//\u66f4\u65b0\uff08\u6bd5\u7adf\u513f\u5b50\u90fd\u6ca1\u4e86\u561b\uff09\n}\n```\n\npushup \u51fd\u6570\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a\n```cpp\ninline void pushup(int pos){\n\tint lson=spl[pos].son[0],rson=spl[pos].son[1];\n\tspl[pos].sum=spl[lson].sum+spl[rson].sum+(pos<=n);//\u5982\u679cpos\u7684\u7f16\u53f7\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5373\u4e3a\u5706\u70b9\uff0c\u90a3\u4e48sum\u6570\u5c31\u8981+1\n}\n```\n\n#### \u5982\u4f55AC\u6b64\u9898\n\n\u601d\u60f3\u5df2\u7ecf\u5168\u90e8\u8bb2\u5b8c\uff0c\u5c31\u5269\u4e0b\u7efc\u5408\u8d77\u6765\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff1a\u56e0\u4e3a\u6c42\u6865\u7684 dfs \u4f1a\u628a\u70b9\u53cc\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u800c\u6c42\u5272\u70b9\u7684 dfs \u5219\u8981\u4fdd\u7559\u70b9\u53cc\u7684\u5176\u4ed6\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u540c\u4e00\u4e2a LCT \u6765\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u4e1c\u897f\uff0c\u800c\u662f\u8981\u5f00\u4e24\u4e2a\u4e0d\u540c\u7684 LCT \u8fdb\u884c\u5206\u522b\u7ef4\u62a4\u3002~~\u56e0\u4e3a\u6211\u7684\u5f3a\u8feb\u75c7~~\uff0c\u6211\u5f00\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\u8fdb\u884c\u5c01\u88c5\u8d77\u6765\u3002\n\n\u56e0\u4e3a\u8fd9\u4e24\u4e2a LCT \u8fd8\u662f\u6709\u4e00\u90e8\u5206\u4e0d\u4e00\u6837\u7684\u3002\u90a3\u5c31\u662f access \u64cd\u4f5c\u4e86\u3002\u6c42\u6865\u7684 access \u4e2d\u6709\u5e76\u67e5\u96c6\u627e $fa$ \u7684\u6b65\u9aa4\uff0c\u800c\u6c42\u5272\u70b9\u7684\u6ca1\u6709\u3002\u5206\u6210\u4e24\u4e2a\u64cd\u4f5c\u5417\uff1f\u592a\u7e41\u7410\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u4e24\u4e2a access \u5408\u4e3a\u4e00\u4f53\u5417\uff1f\u53ef\u4ee5\u3002\u600e\u4e48\u529e\u5462\uff1f\u56e0\u4e3a $f$ \u6570\u7ec4\u6700\u5f00\u59cb\u90fd\u662f\u81ea\u5df1\uff0c\u800c\u6c42\u5272\u70b9\u7684\u4ee3\u7801\u53c8\u6ca1\u6709\u8fdb\u884c\u66f4\u6539\u5b83\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u6c42\u6865\u7684\u90a3\u4e2a access \u51fd\u6570\u3002\n\n\u5176\u4ed6\u7684\u53ef\u4ee5\u770b\u770b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N=1e6+10;//\u56e0\u4e3a\u662f\u5706\u65b9\u6811\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u7a7a\u95f4\u5f002\u500d\u3002\u6211\u5c31\u76f4\u63a5\u5f00\u52301e6\u4e86\nint n,m;\nstruct link_cut_tree{\n\tstruct splay{\n\t\tint fa,son[2];\n\t\tint size;//\u70b9\u53cc\u4e2a\u6570\n\t\tint sum;//\u5706\u70b9\u4e2a\u6570\n\t\tint rev;\n\t};\n\tsplay spl[N];\n\tint f[N];\n\tlink_cut_tree(){//\u521d\u59cb\u5316\n\t\tfor(int i=0;i<N;i++)\n\t\t\tf[i]=i;\n\t}\n\tinline int find(int x){\n\t\treturn f[x]==x?x:f[x]=find(f[x]);\n\t}\n\tinline bool check_root(int pos){\n\t\treturn spl[spl[pos].fa].son[0]!=pos&&spl[spl[pos].fa].son[1]!=pos;\n\t}\n\tinline int relation(int pos,int fa){\n\t\treturn spl[fa].son[1]==pos;\n\t}\n\tinline void connect(int pos,int fa,int son){\n\t\tspl[pos].fa=fa;\n\t\tspl[fa].son[son]=pos;\n\t}\n\tinline void pushup(int pos){\n\t\tint lson=spl[pos].son[0],rson=spl[pos].son[1];\n\t\tspl[pos].size=spl[lson].size+spl[rson].size+1;\n\t\tspl[pos].sum=spl[lson].sum+spl[rson].sum+(pos<=n);\n\t}\n\tinline void pushdown(int pos){\n\t\tif(!spl[pos].rev)\n\t\t\treturn ;\n\t\tswap(spl[pos].son[0],spl[pos].son[1]);\n\t\tspl[spl[pos].son[0]].rev^=1;\n\t\tspl[spl[pos].son[1]].rev^=1;\n\t\tspl[pos].rev=0;\n\t}\n\tinline void pushall(int pos){\n\t\tif(!check_root(pos))\n\t\t\tpushall(spl[pos].fa);\n\t\tpushdown(pos);\n\t}\n\tvoid rotate(int pos){\n\t\tint fa=spl[pos].fa,gf=spl[fa].fa;\n\t\tint t1=relation(pos,fa),t2=relation(fa,gf);\n\t\tconnect(spl[pos].son[t1^1],fa,t1);\n\t\tconnect(fa,pos,t1^1);\n\t\tspl[pos].fa=gf;\n\t\tif(spl[gf].son[t2]==fa)\n\t\t\tspl[gf].son[t2]=pos;\n\t\tpushup(fa);\n\t\tpushup(pos);\n\t}\n\tvoid splaying(int pos){\n\t\tpushall(pos);\n\t\twhile(!check_root(pos)){\n\t\t\tint fa=spl[pos].fa,gf=spl[fa].fa;\n\t\t\tif(!check_root(fa))\n\t\t\t\trelation(pos,fa)^relation(fa,gf)?rotate(pos):rotate(fa);\n\t\t\trotate(pos);\n\t\t}\n\t}\n\tvoid access(int pos){\n\t\tint son=0;\n\t\twhile(pos){\n\t\t\tsplaying(pos);\n\t\t\tspl[pos].son[1]=son;\n\t\t\tpushup(pos);\n\t\t\tson=pos;\n\t\t\tpos=spl[pos].fa=find(spl[pos].fa);//\u8bb0\u5f97\u8981find\n\t\t}\n\t}\n\tvoid make_root(int pos){\n\t\taccess(pos);\n\t\tsplaying(pos);\n\t\tspl[pos].rev^=1;\n\t}\n\tint find_root(int pos){\n\t\taccess(pos);\n\t\tsplaying(pos);\n\t\tpushdown(pos);\n\t\twhile(spl[pos].son[0]){\n\t\t\tpos=spl[pos].son[0];\n\t\t\tpushdown(pos);\n\t\t}\n\t\tsplaying(pos);\n\t\treturn pos;\n\t}\n\tvoid link(int x,int y){\n\t\tmake_root(x);\n\t\tspl[x].fa=y;\n\t}\n\tvoid split(int x,int y){\n\t\tmake_root(x);\n\t\taccess(y);\n\t\tsplaying(y);\n\t}\n\tbool check(int x,int y){\n\t\treturn find_root(x)==find_root(y);//\u6ce8\u610f\u8981\u7528find_root\n\t}\n};\nlink_cut_tree lct[2];\n//lct[0]\u4e3a\u6c42\u6865\u7684lct\uff0clct[1]\u4e3a\u6c42\u5272\u70b9\u7684lct\u3002\u6ce8\u610f\u8981\u5206\u6e05\nvoid dfs1(int pos,int fa){\n\tif(!pos)//\u8981\u4e00\u8fdb\u6765\u5c31\u5224\u65adpos\u662f\u5426\u4e3a0\u3002\u5982\u679c\u4e0d\u60f3\u7684\u53ef\u4ee5\u5728main\u51fd\u6570\u91cc\u7279\u5224\u4e00\u4e0b\n\t\treturn ;\n\tlct[0].f[pos]=fa;\n\tdfs1(lct[0].spl[pos].son[0],fa);\n\tdfs1(lct[0].spl[pos].son[1],fa);\n\tlct[0].spl[pos].son[0]=lct[0].spl[pos].son[1]=0;\n\tlct[0].pushup(pos);\n}\nvoid dfs2(int pos,int fa){\n\tlct[1].spl[pos].fa=fa;\n\tif(lct[1].spl[pos].son[0])\n\t\tdfs2(lct[1].spl[pos].son[0],fa);\n\tif(lct[1].spl[pos].son[1])\n\t\tdfs2(lct[1].spl[pos].son[1],fa);\n\tlct[1].spl[pos].son[0]=lct[1].spl[pos].son[1]=0;\n\tlct[1].pushup(pos);\n}\nint main(){\n\tcin>>n>>m;\n\tint t=0;\n\tint fx,fy;\n\tint opt,x,y;\n\tint lastans=0;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>opt>>x>>y;\n\t\tx^=lastans;\n\t\ty^=lastans;\n\t\tfx=lct[0].find(x);\n\t\tfy=lct[0].find(y);\n\t\t//\u627e\u5230x\u548cy\u7f29\u70b9\u540e\u6210\u4e3a\u7684\u70b9\u3002\u5426\u5219\u4f1a\u51fa\u9519\n\t\tswitch(opt){\n\t\t\tcase 1:\n\t\t\t\tif(lct[0].check(fx,fy)){//\u8054\u901a\n\t\t\t\t\tlct[0].split(fx,fy);\n\t\t\t\t\tlct[1].split(x,y);\n\t\t\t\t\t//\u5728\u5404\u81ea\u7684lct\u4e2d\u5206\u88c2\u51fa\u8def\u5f84\n\t\t\t\t\tt++;\n\t\t\t\t\tdfs1(lct[0].spl[fy].son[0],fy);//\u628a\u70b9\u53cc\u7f29\u6210fy\u4e00\u4e2a\u70b9\n\t\t\t\t\tdfs2(y,n+t);//\u8fde\u5411\u4e00\u4e2a\u65b9\u70b9\n\t\t\t\t}\n\t\t\t\telse{//\u76f4\u63a5\u8fde\u8fb9\u3002\u6ce8\u610f\u4e24\u4e2alct\u90fd\u8981\u8fdb\u884c\u8fde\u8fb9\n\t\t\t\t\tlct[0].link(fx,fy);\n\t\t\t\t\tlct[1].link(x,y);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif(lct[0].check(fx,fy)){\n\t\t\t\t\tlct[0].split(fx,fy);\n\t\t\t\t\tlastans=lct[0].spl[fy].size-1;\n\t\t\t\t\tcout<<lastans<<'\\n';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tcout<<\"-1\\n\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tif(lct[1].check(x,y)){\n\t\t\t\t\tlct[1].split(x,y);\n\t\t\t\t\tlastans=lct[1].spl[y].sum;\n\t\t\t\t\tcout<<lastans<<'\\n';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tcout<<\"-1\\n\";\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```",
        "postTime": 1608997699,
        "uid": 204705,
        "name": "KiDDOwithTopTree",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5489 \u3010EntropyIncreaser \u4e0e \u52a8\u6001\u56fe\u3011"
    }
]