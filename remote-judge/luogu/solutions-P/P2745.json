[
    {
        "content": "**\u9898\u89e3:** \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u79cd\u53eb\u505a\u4e0a\u6d6e\u6cd5\u7684\u7b97\u6cd5.\n\n\u8003\u8651\u5f53\u524d\u8981\u4e0a\u6d6e\u7684\u77e9\u5f62\u5728\u7b2c$k$\u5c42,\u9700\u8981\u4e0a\u5347\u5230\u7b2c$k-1$\u5c42,\u90a3\u4e48\u5b83\u4e0a\u9762\u7684\u77e9\u5f62\u548c\u5b83\u53ea\u6709\u4e24\u79cd\u60c5\u51b5:\u76f8\u4ea4\u6216\u8005\u4e0d\u76f8\u4ea4,\u663e\u7136\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u53ef\u4ee5\u4e0d\u7528\u8003\u8651,\u76f4\u63a5\u5c06\u5b83\u63d0\u5230\u7b2c$k-1$\u5c42\u5c31\u53ef\u4ee5\u4e86.\n\n\u90a3\u4e48\u76f8\u4ea4\u7684\u60c5\u51b5\u600e\u4e48\u5904\u7406\u5462?\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u5f20\u56fe:\n![](http://images.cnblogs.com/cnblogs_com/BCOI/1261368/o_float_method.png)\n\n\n\n\u56fe\u4e2d\u84dd\u8272\u7684\u662f\u6211\u4eec\u6b63\u5728\u4e0a\u6d6e\u7684\u77e9\u5f62$B(blue)$,\u7ea2\u8272\u7684\u662f\u5728$R(red)$\u4e0a\u9762\u4e00\u5c42\u6321\u4f4f$B$\u4e00\u90e8\u5206\u9762\u79ef\u7684\u77e9\u5f62$R$,\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0,\u53ea\u8981$R,B$\u6709\u4ea4\u96c6,\u90a3\u4e48\u5c31\u53ef\u4ee5\u6839\u636e$R$\u7684\u4e0a\u4e0b\u5de6\u53f3\u8fb9\u5c06$B$\u5206\u6210\u51e0\u4e2a\u77e9\u5f62\u7ee7\u7eed\u4e0a\u6d6e(\u5176\u4ed6\u7684\u60c5\u51b5\u53ef\u4ee5\u81ea\u5df1\u624b\u753b\u4e00\u4e0b,\u56e0\u4e3a\u4f5c\u56fe\u6709\u70b9\u9ebb\u70e6\u5c31\u4e0d\u518d\u4e3e\u4f8b\u5b50\u4e86).\n\n\u90a3\u4e48\u6839\u636e\u8fd9\u4e2a\u539f\u7406,\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6b63\u5728\u4e0a\u5347\u7684\u77e9\u5f62\u5206\u4e3a\u6700\u591a$4$\u90e8\u5206\u7ee7\u7eed\u4e0a\u6d6e,\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u4ee5\u7528$dfs$\u6765\u5b9e\u73b0,\u5177\u4f53\u5b9e\u73b0\u770b\u4e00\u4e0b\u4ee3\u7801.\n\n```\nvoid dfs(int k, int x1, int y1, int x2, int y2){\n    if(x1 == x2 || y1 == y2) return; // \u5224\u65ad\u9012\u5f52\u7684\u8fb9\u754c\u6761\u4ef6\n    if(!k){ ans += (double)(x2-x1)*(y2-y1); return; }\n    int a1 = a[k].x1, b1 = a[k].y1, a2 = a[k].x2, b2 = a[k].y2;\n    if(a2 < x1 || a1 > x2 || b2 < y1 || b1 > y2){\n        dfs(k-1, x1, y1, x2, y2); return; // \u65e0\u4ea4\u96c6\u76f4\u63a5\u7ee7\u7eed\u4e0b\u4e00\u5c42\u4e0d\u9700\u8981\u56de\u6eaf\n    }\n    if(a1 <= x1 && b1 <= y1 && x2 <= a2 && y2 <= b2) return; // \u5df2\u7ecf\u88ab\u67d0\u4e2a\u77e9\u5f62\u5b8c\u5168\u8986\u76d6\u4e86\u90a3\u4e48\u5c31\u4e0d\u53ef\u80fd\u88ab\u770b\u5230\u4e86,\u76f4\u63a5return\n    dfs(k-1, x1, min(y2, b2), min(x2, a2), y2); // up\n    dfs(k-1, min(x2, a2), max(y1, b1), x2, y2); // right\n    dfs(k-1, max(x1, a1), y1, x2, max(y1, b1)); // down\n    dfs(k-1, x1, y1, max(x1, a1), min(y2, b2)); // left\n    //\u8fd9\u91cc\u7684\u56db\u4e2adfs\u5c31\u662f\u5c06\u6b63\u5728\u4e0a\u6d6e\u7684\u77e9\u5f62\u5206\u5272\u7684\u8fc7\u7a0b,\u53c2\u6570\u53ef\u4ee5\u81ea\u5df1\u753b\u51e0\u4e2a\u6817\u5b50\u6a21\u62df\u4e00\u4e0b\n}\n```\n\n\u77e5\u9053\u4e86\u5982\u4f55\u7edf\u8ba1\u77e9\u5f62\u9762\u79ef,\u5269\u4e0b\u7684\u53ea\u9700\u8981\u6a21\u62df\u4e00\u4e0b\u5c31\u597d\u4e86.\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 100;\n// N\u53ea\u6709100\u662f\u56e0\u4e3a\u7a97\u53e3\u6807\u8bc6\u7b26\u53ea\u6709\u5927\u5c0f\u5199\u5b57\u6bcd\u548c0\u52309\n\nint used[300], cnt = 0;\ndouble ans = 0, tot = 0;\n\nstruct window{\n    int x1, x2, y1, y2; char c;\n    window(int _x1 = 0, int _y1 = 0, int _x2 = 0, int _y2 = 0, int _c = 0){\n        x1 = _x1, y1 = _y1, x2 = _x2, y2 = _y2, c = _c;\n    }\n    bool operator == (const window &a) const {\n        return c == a.c;\n    }\n    bool operator < (const window &a) const {\n        if(x1 != a.x1) return x1 < a.x1;\n        if(y1 != a.y1) return y1 < a.y1;\n        if(x2 != a.x2) return x2 < a.x2;\n        return y2 < a.y2;\n    }\n}a[N], win[300];\n\nvoid move(window x, int f){\n    int pos = 0;\n    for(int i = 1; i <= cnt; i++)\n        if(a[i] == x){ pos = i; break; }\n    if(f == 0) for(int i = pos; i >= 2; i--) swap(a[i], a[i-1]);\n    else for(int i = pos; i < cnt; i++) swap(a[i], a[i+1]);\n}\n\nvoid delet(window x){\n    int pos;\n    for(int i = 1; i <= cnt; i++)\n        if(a[i] == x) pos = i;\n    used[x.c] = 0, win[x.c] = (window){ 0, 0, 0, 0, 0 };\n    for(int i = pos+1; i <= cnt; i++) a[i-1] = a[i];\n    cnt--;\n}\n\nvoid dfs(int k, int x1, int y1, int x2, int y2){\n    if(x1 == x2 || y1 == y2) return;\n    if(!k){ ans += (double)(x2-x1)*(y2-y1); return; }\n    int a1 = a[k].x1, b1 = a[k].y1, a2 = a[k].x2, b2 = a[k].y2;\n    if(a2 < x1 || a1 > x2 || b2 < y1 || b1 > y2){\n        dfs(k-1, x1, y1, x2, y2); return;\n    }\n    if(a1 <= x1 && b1 <= y1 && x2 <= a2 && y2 <= b2) return;\n    dfs(k-1, x1, min(y2, b2), min(x2, a2), y2); // up\n    dfs(k-1, min(x2, a2), max(y1, b1), x2, y2); // right\n    dfs(k-1, max(x1, a1), y1, x2, max(y1, b1)); // down\n    dfs(k-1, x1, y1, max(x1, a1), min(y2, b2)); // left\n}\n\nint main(){\n    char opt, id; int x1, y1, x2, y2, pos; window tmp;\n    while(cin >> opt){\n        if(opt == 's'){\n            scanf(\"(%c)\", &id); pos = 0;\n            for(int i = 1; i <= cnt; i++)\n                if(a[i] == win[id]) pos = i;\n            ans = 0, tot = (double)(a[pos].x2-a[pos].x1)*(a[pos].y2-a[pos].y1);\n            dfs(pos-1, a[pos].x1, a[pos].y1, a[pos].x2, a[pos].y2);\n            cout << fixed << setprecision(3) << ans*100/tot << endl;\n        } else {\n            scanf(\"(%c,%d,%d,%d,%d)\", &id, &x1, &y1, &x2, &y2);\n            if(x1 > x2) swap(x1, x2); if(y1 > y2) swap(y1, y2);\n            tmp = (window){ x1, y1, x2, y2, id };\n            if(opt == 'w'){\n                if(used[id]) continue;\n                win[id] = a[++cnt] = tmp, move(tmp, 0);\n            }\n            if(opt == 't') move(tmp, 0);\n            if(opt == 'b') move(tmp, 1);\n            if(opt == 'd') delet(tmp);\n        }\n        opt = getchar();\n    }\n    return 0;\n}\n```\n",
        "postTime": 1551007057,
        "uid": 45661,
        "name": "Brave_Cattle",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2745 \u3010[USACO5.3]\u7a97\u4f53\u9762\u79efWindow Area\u3011"
    },
    {
        "content": "\u9898\u89e3by\uff1aredbag\n\n\u5927\u6982\u601d\u8def\u540c\u697c\u4e0b\n\n\u5148\u79bb\u6563\uff0c\u7136\u540e\u518d\u6839\u636e\u987a\u5e8f\u628a\u8be5\u51cf\u7684\u51cf\u6389\uff0c\u8be5\u6807\u8bb0\u7684\u6807\u8bb0\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n```cpp\n\n/*\nID: ylx14271\nPROG: window\nLANG: C++\n*/\n#include<set>\n#include<map>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cmath> \n#include<iostream>\n#include<algorithm>\nusing namespace std;\nchar ch;\nint x,y,x1,y12;\nint n;//\u5b58\u7a97\u6237\u7684\u4e2a\u6570/\u6807\u53f7\nstruct node\n{\n    int x1,x2,y11,y2;\n    int id,deep,flag;\n} a[2500];//\u5b58\u6bcf\u4e2a\u7a97\u6237\u7684\u56db\u4e2a\u8fb9\u754c\uff08x1:\u5de6\uff0cx2:\u53f3\uff0cy1\uff1a\u4e0b\uff0cy2:\u4e0a \nmap<char,int> a1;\nint max1,min1;\nint zx[2500],lx,ux[45000];\nint zy[2500],ly,uy[45000];\nint f[250][250];\nvoid sum(int x)\n{\n    memset(f,0,sizeof(f));\n    lx=0;ly=0;\n    for (int i=1;i<=n;i++)\n    {\n        if (a[i].flag==0||a[i].deep<a[x].deep) continue;//\u538b\u5728\u4e0b\u9762\u7684\u6216\u8005\u4e0d\u5b58\u5728\u7684\u4e0d\u8981\u5904\u7406 \n        zx[++lx]=a[i].x1;zx[++lx]=a[i].x2; \n        zy[++ly]=a[i].y11;zy[++ly]=a[i].y2;//\u5b58\u5750\u6807 \n    }\n    sort(zx+1,zx+lx+1);//\u6392\u5e8f \n    sort(zy+1,zy+ly+1); \n    \n    int t=0;\n    for (int i=1;i<=lx;i++)\n    {\n        //cout<<zx[i]<<\" \";\n        if (zx[i]!=zx[i-1])\n        {\n            t++;\n            zx[t]=zx[i];\n            ux[zx[i]]=t;\n        }\n    } \n    lx=t;\n    //\u79bb\u6563 \n    t=0;\n    for (int i=1;i<=ly;i++)\n    {\n        //cout<<zy[i]<<\" \";\n        if (zy[i]!=zy[i-1])\n        {\n            t++;\n            zy[t]=zy[i];\n            uy[zy[i]]=t; \n        }\n    } \n    ly=t;\n    //\u79bb\u6563 \n\n    for (int i=ux[a[x].x1];i<=ux[a[x].x2]-1;i++)\n        for (int j=uy[a[x].y11];j<=uy[a[x].y2]-1;j++)\n        f[i][j]=1;//\u7a97\u6237\u90e8\u5206\u6807\u8bb0 \n    for (int i=1;i<=n;i++)\n        if (a[i].deep>a[x].deep&&a[i].flag==1)\n        {\n            for (int j=ux[a[i].x1];j<=ux[a[i].x2]-1;j++)\n                for (int k=uy[a[i].y11];k<=uy[a[i].y2]-1;k++)\n                f[j][k]=0;\n        }//\u6709\u5176\u4ed6\u7a97\u6237\u8986\u76d6\u5728\u4e0a\u9762\u7684\u4e5f\u6807\u8bb0 \n    double sum1=0.0;\n    for (int i=1;i<lx;i++)\n        for (int j=1;j<ly;j++)\n        {\n            sum1+=f[i][j]*(zx[i+1]-zx[i])*(zy[j+1]-zy[j]);\n        }//\u7b97\u9762\u79ef \n    double x1=100*(double)(sum1)/(double)((a[x].x2-a[x].x1)*(a[x].y2-a[x].y11));\n    printf(\"%.3lf\\n\",x1);//\u8f93\u51fa \n    return;\n}\nint main()\n{\n    freopen(\"window.in\",\"r\",stdin);\n    freopen(\"window.out\",\"w\",stdout);\n    while (scanf(\"%c\",&ch)!=EOF)\n    {\n        if (ch=='w')\n        {\n            scanf(\"(%c,%d,%d,%d,%d)\",&ch,&x,&y,&x1,&y12);\n            n++;//\u5b58\u6709\u591a\u5c11\u4e2a \n            a1[ch]=n;//ch\u7684\u7f16\u53f7\u5b58\u8d77\u6765 \n            a[n].x1=min(x,x1);a[n].x2=max(x,x1);\n            a[n].y11=min(y,y12);a[n].y2=max(y,y12);\n            a[n].id=ch;a[n].flag=1;\n            max1++;//\u5168\u90e8\u5b58\u8d77\u6765 \n            a[n].deep=max1;//\u5b58\u6df1\u5ea6 \n        } else\n        if (ch=='t')//\u7f6e\u9876 \n        {\n            scanf(\"(%c)\",&ch);\n            a[a1[ch]].deep=++max1;\n        } else\n        if (ch=='b')//\u7f6e\u5e95 \n        {\n            scanf(\"(%c)\",&ch);\n            a[a1[ch]].deep=--min1;\n        } else\n        if (ch=='d')//\u5220\u9664 \n        {\n            scanf(\"(%c)\",&ch);\n            a[a1[ch]].flag=0;\n        } else\n        if (ch=='s')//\u7edf\u8ba1 \n        {\n            scanf(\"(%c)\",&ch);\n            sum(a1[ch]); \n        } \n        getchar();getchar();//\u6d1b\u8c37\u6709\u884c\u672b\u7a7a\u683c \n    }\n    return 0;\n}\n```",
        "postTime": 1499528928,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2745 \u3010[USACO5.3]\u7a97\u4f53\u9762\u79efWindow Area\u3011"
    },
    {
        "content": "\u5982\u679c$\\LaTeX$\u5d29\u4e86\uff0c[\u8bf7\u5728\u535a\u5ba2\u4e2d\u67e5\u770b](https://www.luogu.com.cn/blog/McHf/p2745-discrete)\u3002\n\n## \u9898\u76ee\u5927\u610f\n\n\u8981\u6c42\u6a21\u62df\u4e00\u4e2a\u7a97\u4f53\u754c\u9762\u3002\u5171\u6709\u82e5\u5e72\u64cd\u4f5c\uff1a\n\n- \u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u4f53\uff1a$\\operatorname{w}(I,x,y,X,Y)$\uff0c\u6807\u8bc6\u7b26\u4e3a$I$\uff0c\u4e24\u4e2a\u5bf9\u89d2\u4e3a$(x,y),(X,Y)$\n\n- \u5c06\u7a97\u4f53\u7f6e\u9876\uff1a $\\operatorname{t}(I)$\uff0c\u7f6e\u9876\u6807\u8bc6\u7b26\u4e3a$I$\u7684\u7a97\u4f53\u3002\n\n- \u5c06\u7a97\u4f53\u7f6e\u5e95\uff1a $\\operatorname{b}(I)$\uff0c\u7f6e\u5e95\u6807\u8bc6\u7b26\u4e3a$I$\u7684\u7a97\u4f53\u3002\n\n- \u5220\u9664\u4e00\u4e2a\u7a97\u4f53\uff1a$\\operatorname{d}(I)$\uff0c\u5220\u9664\u6807\u8bc6\u7b26\u4e3a$I$\u7684\u7a97\u4f53\u3002\n\n- \u8f93\u51fa\u7a97\u4f53\u53ef\u89c1\u90e8\u5206\u7684\u767e\u5206\u6bd4\uff1a$\\operatorname{s}(I)$\u3002\n\n\u6ee1\u8db3$I\\in\\mathtt{\\{'a'\\cdots 'z','A'\\cdots 'Z','1'\\cdots'9'\\}}, x,y\\in[1,32767],s\\text{\u64cd\u4f5c\u4e0d\u8d85\u8fc7500\u6b21}$\n## \u9898\u89e3\n\n### \u8bfb\u5165\u6570\u636e\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bfb\u5165\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u6839\u636e\u64cd\u4f5c\u7684\u79cd\u7c7b\u786e\u5b9a\u63a5\u4e0b\u6765\u8981\u8bfb\u5165\u4ec0\u4e48\u5c31\u884c\u4e86\u3002\u53ef\u4ee5\u624b\u5199\u8bfb\u5165\uff0c\u6392\u9664`(`,`)`,`\\n`,`\\r`\u8fd9\u4e9b\u65e0\u7528\u7684\u7b26\u53f7\u3002\n\n### \u7a97\u53e3\u6a21\u62df\n\n\u8fd9\u662f\u4e00\u9053\u633a\u597d\u7684\u6a21\u62df\u9898\uff0c\u633a\u8003\u9a8c\u9009\u624b\u7684\u7801\u529b\u7684\u2026\u2026\n\n\u867d\u7136\u9898\u76ee\u5e76\u6ca1\u6709\u660e\u786e\u5199\u51fa\u603b\u64cd\u4f5c\u6570\u662f\u591a\u5c11\uff0c\u4ee5\u53ca\u7a97\u53e3\u7684\u5177\u4f53\u6570\u91cf\uff0c\u4f46\u4ece\u6807\u8bc6\u7b26\u7684\u53ef\u80fd\u79cd\u7c7b\u53ef\u4ee5\u53d1\u73b0\u7a97\u53e3\u5728\u540c\u4e00\u65f6\u523b\u4e0d\u4f1a\u5f88\u591a\uff1b\u67e5\u8be2\u64cd\u4f5c\u4e0d\u4f1a\u5f88\u591a\u3002\u5176\u4ed6\u7684\u64cd\u4f5c\u8d8a\u5feb\u8d8a\u597d\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u94fe\u8868\u6a21\u62df\u7a97\u53e3\u7684\u5220\u9664\u3001\u7f6e\u9876\u3001\u7f6e\u5e95\u3001\u521b\u5efa\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u5220\u9664\u548c\u521b\u5efa\uff1b\u5bf9\u4e8e\u7f6e\u5e95\u3001\u7f6e\u9876\uff0c\u5148\u521b\u5efa\u4e00\u4e2a\u865a\u7684\u6700\u9876\u5c42\u7a97\u53e3$head$\uff0c\u4ee5\u53ca\u865a\u7684\u6700\u5e95\u5c42\u7a97\u53e3$tail$\u3002\u7f6e\u9876$I$\u76f8\u5f53\u4e8e\u5220\u9664$I$\u5e76\u5728$head$\u540e\u9762\u63d2\u5165$I$\uff1b\u7f6e\u5e95\u76f8\u5f53\u4e8e\u5728$tail$\u524d\u9762\u63d2\u5165$I$\u3002\n\n### \u67e5\u8be2\u64cd\u4f5c\n\n\u5f88\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406\u5728$I$\u4e4b\u4e0a\u7684\u5757\u3002\u8003\u8651\u5230$x,y\\in[1,32767]$\uff0c\u6211\u4eec\u5148\u8fdb\u884c\u79bb\u6563\u5316\u3002\u540c\u65f6\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u79bb\u6563\u5316\u540e\u6bcf\u4e2a\u6709\u7528\u7684\u70b9\uff08\u5373\u5f53\u524d\u5b58\u5728\u7684\u6240\u6709\u7a97\u53e3\u7684$4$\u4e2a\u9876\u70b9\u5750\u6807\uff09\uff0c\u7136\u540e\u7528\u5dee\u5206\u7684\u65b9\u6cd5\u67d3\u8272\uff0c\u6700\u540e\u7edf\u8ba1\u6709\u591a\u5c11\u5757\u88ab\u8986\u76d6\u3002\n\n\u4e3e\u4e2a\u6817\u5b50\uff1a\n\n$$\\tt\\begin{matrix}\\backslash  & -200 & -150 & 0 & 12 & 16 & 233\\cr -100 & A & A & A\\cr 25 & A & AB & AB & B & B\\cr 500 &  & B & B & B & B\\cr 700\\cr \\end{matrix}$$\n\n\u6211\u4eec\u8fdb\u884c\u79bb\u6563\u5316\n\n$$\\tt\\begin{matrix}\\backslash  & 1 & 2 & 3 & 4 & 5 & 6\\cr 1 & A & A & A\\cr 2 & A & AB & AB & B & B\\cr 3 &  & B & B & B & B\\cr 4\\cr \\end{matrix}$$\n\n\u7136\u540e\u8fdb\u884c\u5dee\u5206\u3002\n\n$$\\tt\\begin{matrix}\\backslash  & 1 & 2 & 3 & 4 & 5 & 6\\cr 1 & +1 & 0 & 0 & -1 & 0 & 0\\cr 2 & 0 & +1 & 0 & 0 & 0 & -1\\cr 3 & -1 & 0 & 0 & +1 & 0 & 0\\cr 3 & 0 & -1 & 0 & 0 & 0 & +1\\cr \\end{matrix}$$\n\n\u6211\u4eec\u5c06\u5b83\u7ad6\u7740\u626b\u4e00\u904d\n\n$$\\tt\\begin{matrix}\\backslash  & 1 & 2 & 3 & 4 & 5 & 6\\cr 1 & +1 & 0 & 0 & -1 & 0 & 0\\cr 2 & +1 & +1 & 0 & -1 & 0 & -1\\cr 3 & 0 & +1 & 0 & 0 & 0 & -1\\cr 3 & 0 & 0 & 0 & 0 & 0 & 0\\cr \\end{matrix}$$\n\n\u518d\u6a2a\u7740\u626b\u4e00\u904d\uff08\u5176\u5b9e\u5148\u6a2a\u7740\u626b\u518d\u7ad6\u7740\u626b\u4e5f\u4e00\u6837\uff09\n\n$$\\tt\\begin{matrix}\\backslash  & 1 & 2 & 3 & 4 & 5 & 6\\cr 1 & 1 & 1 & 1 & 0 & 0 & 0\\cr 2 & 1 & 2 & 2 & 1 & 1 & 0\\cr 3 & 0 & 1 & 1 & 1 & 1 & 0\\cr 3 & 0 & 0 & 0 & 0 & 0 & 0\\cr \\end{matrix}$$\n\n\u6700\u540e\uff0c\u6309\u7167\u6211\u4eec\u8981\u67e5\u8be2\u7684\u90a3\u4e2a\u7a97\u53e3\u7684\u5750\u6807\u66b4\u529b\u626b\u63cf\u91cc\u9762\u7684\u5757\u3002\u82e5\u6743\u503c\u4e0d\u4e3a$0$\uff0c\u7b54\u6848\u51cf\u53bb\u5b83\u79bb\u6563\u5316\u524d\u7684\u9762\u79ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(N\\times N \\times M)$\u3002\u5176\u4e2d$N$\u4e3a\u5b58\u5728\u7684\u5757\u7684\u603b\u4e2a\u6570\uff0c$M$\u4e3a\u67e5\u8be2\u64cd\u4f5c\u7684\u603b\u4e2a\u6570\u3002\u56e0\u4e3a$N\\le 62,M\\le 500$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n## \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define up(l,r,i) for(int i=l;i<=r;i++)\n#define dn(l,r,i) for(int i=l;i>=r;i--)\nusing namespace std;\n\ntypedef long long LL;\nconst int INF =2147483647;\nint qread(){\n    int w=1,c,ret;\n    while((c=getchar())> '9'||c< '0')\n    w=(c=='-'?-1:1); ret=c-'0';\n    while((c=getchar())>='0' &  & c<='9')\n    ret=ret*10+c-'0';\n    return ret*w;\n}  \nint hsh(char ID){\n    if('a'<=ID &  & ID<='z') return ID-'a'+1;\n    if('A'<=ID &  & ID<='Z') return ID-'A'+1+26;\n    return ID-'0'+26+26+1;\n}\nchar readc(){\n    char c; while(((c=getchar())=='('||c==')'||c==' '||c=='\\n'||c=='\\r') &  & c!=EOF); return c;\n}\nconst int MAXN =26+26+10+3;\nint X1[MAXN],Y1[MAXN],X2[MAXN],Y2[MAXN],rd;\nint bef[MAXN],nxt[MAXN];\nvoid dlt(int ID){\n    nxt[bef[ID]]=nxt[ID],bef[nxt[ID]]=bef[ID];\n}\nvoid ist(int bf,int ID){\n    bef[ID]=bf,nxt[ID]=nxt[bf],bef[nxt[bf]]=ID,nxt[bf]=ID;\n}\nint e=MAXN-1,tot,tp1,tp2,Q1[MAXN*2],Q2[MAXN*2];\nbool use[MAXN*2][MAXN*2];\nmap<int,int> mmpA,mmpB;\nint main(){\n    bef[e]=0,nxt[0]=e;\n    while((rd=readc())!=EOF){\n        int ID=hsh(readc()); \n        if(rd=='w'){\n            ist(0,ID),X1[ID]=qread(),Y1[ID]=qread(),\n            X2[ID]=qread(),Y2[ID]=qread();\n            if(X1[ID]>X2[ID]) swap(X1[ID],X2[ID]);\n            if(Y1[ID]>Y2[ID]) swap(Y1[ID],Y2[ID]);\n        }\n        else if(rd=='d') dlt(ID);\n        else if(rd=='t') dlt(ID),ist(0,ID);\n        else if(rd=='b') dlt(ID),ist(bef[e],ID);\n        else if(rd=='s'){\n            mmpA.clear(),mmpB.clear(); tp1=tp2=0; int ans=0;\n            for(int i=0;i!=ID;){\n                i=nxt[i];\n                Q1[++tp1]=X1[i],Q1[++tp1]=X2[i],Q2[++tp2]=Y1[i],Q2[++tp2]=Y2[i];\n            }\n            sort(Q1+1,Q1+1+tp1),sort(Q2+1,Q2+1+tp2);\n            tp1=unique(Q1+1,Q1+1+tp1)-Q1-1,tp2=unique(Q2+1,Q2+1+tp2)-Q2-1;\n            up(1,tp1,i) mmpA[Q1[i]]=i;up(1,tp2,i) mmpB[Q2[i]]=i;\n            memset(use,0,sizeof(use));\n            for(int i=nxt[0];i!=ID;i=nxt[i]){\n                up(mmpA[X1[i]],mmpA[X2[i]]-1,a)\n                up(mmpB[Y1[i]],mmpB[Y2[i]]-1,b) use[a][b]=true;\n            }\n            up(mmpA[X1[ID]],mmpA[X2[ID]]-1,a)\n            up(mmpB[Y1[ID]],mmpB[Y2[ID]]-1,b)\n            if(!use[a][b]) ans+=(Q1[a+1]-Q1[a])*(Q2[b+1]-Q2[b]);\n            printf(\"%.3lf\\n\",(double)100.0*ans/((X2[ID]-X1[ID])*(Y2[ID]-Y1[ID])));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1584501494,
        "uid": 68344,
        "name": "\u79bb\u6563\u5c0f\u6ce2\u53d8\u6362\u00b0",
        "ccfLevel": 9,
        "title": "\u3010\u9898\u89e3\u3011\u3010P2745  [USACO5.3]\u7a97\u4f53\u9762\u79efWindow Area\u3011"
    },
    {
        "content": "\u4e0d\u4f1a\u79bb\u6563\u5316\u7684\u540c\u5b66\u770b\u8fd9\u91cc\uff01\uff01\uff01\uff01\n\n\u8fd9\u9898\u867d\u7136\u662f\u6a21\u62df\u9898\u4f46\u8fd8\u662f\u6709\u4e00\u5b9a\u6280\u5de7\u6027\u7684\n\n\u4e3b\u8981\u9700\u8981\u653b\u514b\u7684\u95ee\u9898\u6709\u4ee5\u4e0b\u4e24\u4e2a\n\n1. \u5982\u4f55\u5bf9\u4f18\u5148\u7ea7\u8fdb\u884c\u64cd\u4f5c\n2. \u5982\u4f55\u8ba1\u7b97\u53ef\u89c1\u90e8\u5206\u9762\u79ef\n\n\u9996\u5148\u7b2c\u4e00\u4e2a\u95ee\u9898\u5e94\u8be5\u76f8\u5bf9\u8f83\u597d\u89e3\u51b3\u3002\u5b9a\u4e49\u4e00\u4e2aqt qw\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u961f\u5217\u5934\u548c\u961f\u5217\u5c3e\uff09\u7136\u540e\u5bf9\u5e94\u6bcf\u4e2a\u64cd\u4f5c\u7684\u66f4\u65b0\u5c31\u5341\u5206\u5bb9\u6613\u4e86\n- w\uff1a\u6bcf\u6b21\u521b\u5efa\u65b0\u7a97\u53e3\u5c31\u5c06qw++ \u628a\u65b0\u7a97\u53e3\u7684\u6807\u8bc6\u7b26\u52a0\u5165vector \u5e76\u628a\u8be5\u7a97\u53e3\u7684\u4f18\u5148\u7ea7\u8d4b\u4e3aqw\uff08\u6ce8\u610f\u5751\u70b9\uff01\u9898\u76ee\u4e2d\u8bf4\uff1a\u201c\u4f60\u4e0d\u80fd\u7528\u5df2\u7ecf\u5b58\u5728\u7684\u6807\u8bc6\u7b26\u6765\u521b\u5efa\u7a97\u4f53\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u7a97\u4f53\u540e\u518d\u7528\u5df2\u5220\u9664\u7a97\u4f53\u7684\u6807\u8bc6\u7b26\u6765\u521b\u5efa\u7a97\u4f53\u3002\u201d\u5373\u65b0\u5efa\u64cd\u4f5c\u7684\u6807\u8bc6\u7b26\u6709\u53ef\u80fd\u76f8\u540c\uff0c\u8fd9\u65f6\u5f97\u628a\u4e4b\u524d\u7684\u8986\u76d6\u6389\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u539f\u6709\u57fa\u7840\u4e0a\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u518d\u6b21\u65b0\u52a0\u5165\u4e00\u4e2a//\u6b64\u5904\u8868\u8ff0\u4e0d\u6e05\u770b\u4e86\u4ee3\u7801\u5c31\u77e5\u9053\u4e86\uff09\n- t: qw++ \u5e76\u628a\u8be5\u7a97\u53e3\u7684\u4f18\u5148\u7ea7\u8d4b\u4e3aqw\n- d\uff1aqt-- \u5e76\u628a\u8be5\u7a97\u53e3\u7684\u4f18\u5148\u7ea7\u8d4b\u4e3aqt\n\n\u7136\u540e\u5c31\u662f\u5982\u4f55\u6c42\u9762\u79ef\u4e86 \u53ef\u4ee5\u7c7b\u6bd4\u5f26\u56fe\u7528\u6bd4\u5f53\u524d\u77e9\u5f62\u4f18\u5148\u7ea7\u9ad8\u7684\u77e9\u5f62\u5c06\u5f53\u524d\u77e9\u5f62\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206 \u7136\u540e\u5bf91 2 3 4\u56db\u4e2a\u90e8\u5206\u518d\u8fdb\u884cdfs\n\n111122\n\n440022\n\n440022\n\n443333\n\n\u5982\u679c\u4e24\u4e2a\u77e9\u5f62\u53ea\u662f\u6709\u4e00\u90e8\u5206\u91cd\u5408\uff0c\u4e5f\u53ef\u4ee5\u5982\u6b64\u5904\u7406\uff0c\u4e0d\u8fc7\u5f97\u8fd0\u7528\u597dmin max\uff08\u770b\u4ee3\u7801\uff01\uff01\uff09 \u8fd9\u6837\u5c31\u4f1a\u6709\u4e00\u4e2a\u90e8\u5206\u56e0\u4e3a\u4e0d\u5b58\u5728\u800c\u4e0d\u4f1a\u88ab\u8ba1\u7b97\n\n\u8fd9\u4e2a\u505a\u6cd5\u662f\u4ece\u4e00\u4f4ddalao\u7684\u535a\u5ba2\u91cc\u5b66\u6765\u7684[[USACO5.3]Window Area\u3010\u7a97\u4f53\u9762\u79ef\u3011](https://blog.csdn.net/zsyzClb/article/details/80580309)\n\u8bb2\u89e3\u7684\u633a\u8be6\u7ec6\u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u5b66\u4e60\u4e00\u4e0b\uff08\u4ed6\u7684\u4ee3\u7801\u603b\u4f53\u601d\u8def\u4e5f\u548c\u6211\u5dee\u4e0d\u591a\uff09\u6211\u89c9\u5f97\u8fd9\u4e2a\u505a\u6cd5\u8fd8\u662f\u81ea\u5df1\u5bf9\u7740\u56fe\u63e3\u6469\u63e3\u6469\u597d \u6211\u4e5f\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\n\n\u8fd9\u9053\u9898\u6700\u53ef\u7231\u7684\u5730\u65b9\u5728\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\u3002\u56e0\u4e3a\u6240\u6709\u7a97\u53e3\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u5728'A'-'z'\u7684\u8303\u56f4\u5185\uff0c\u5373\u6700\u591a\u53ea\u53ef\u80fd\u670952\u4e2a\uff0c\u6240\u4ee5\u5199\u7684\u65f6\u5019\u53ef\u4ee5\u66b4\u529b\u4e00\u4e9b\u3002\u4ee3\u7801\u5982\u4e0b\uff08PS\uff1a\u56e0\u4e3a\u8fd9\u9053\u9898\u4e4b\u524d\u5e76\u6ca1\u6709\u60f3\u5230dfs\u6240\u4ee5\u7b97\u6cd5\u975e\u5e38\u66b4\u529b\u548c\u8be1\u5f02 \u540e\u6765\u91cd\u65b0\u4fee\u6539\u65f6\u61d2\u5f97\u4ece\u5934\u5199\u8d77 \u4e8e\u662f\u4ee3\u7801\u975e\u5e38\u975e\u5e38\u7684\u4e11\u964b\u3002\u6c42\u8f7b\u55b7\uff09\n```cpp\n#include<iostream>\n#include<vector>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nstruct node{\n\tint x1,y1,x2,y2,p;\n}a[60];//\u8fd9\u4e2a\u540d\u5b57\u8d77\u7684\u4e0d\u597d\u3002\u3002\u5176\u5b9e\u662f\u8bb0\u5f55\u6bcf\u4e2a\u77e9\u5f62\u7684\n\nvector <int> win;//\u8bb0\u5f55\u6bcf\u4e2a\u4e3e\u884c\u7684\u6807\u8bc6\u7b26\ndouble tot=0.0;//\u8bb0\u5f55\u5f53\u524d\u67e5\u8be2\u77e9\u5f62\u7684\u53ef\u89c1\u9762\u79ef\n\nvoid solve(int cur,int xx1,int yy1,int xx2,int yy2,int dep){//\u5148\u770bw\u64cd\u4f5c\u4e2d\u5173\u4e8ex1 y1 y1 y2\u7684\u89e3\u91ca\uff01\uff01\n\t//\u6700\u7cbe\u9ad3\u7684dfs\u6c42\u9762\u79ef\n\tif (xx1==xx2||yy1==yy2) return;//\u77e9\u5f62\u4e0d\u5b58\u5728\n\tbool ok=false;\n\tfor (int i=cur;i<win.size();i++) \n\t\tif (a[win[i]].p>dep) {//\u4f18\u5148\u7ea7\u66f4\u9ad8\n\t\t\tint x1=a[win[i]].x1,y1=a[win[i]].y1;\n\t\t\tint x2=a[win[i]].x2,y2=a[win[i]].y2;\n\t\t\tif (x1>xx2||x2<xx1||y1>yy2||y2<yy1) continue;\n\t\t\telse if (x1<xx1&&y1<yy1&&x2>xx2&&y2>yy2) return;\n\t\t\telse {//\u8fd9\u6bb5\u5f88\u662f\u91cd\u8981\uff01\uff01\uff014\u4e2a\u90e8\u5206\u4ee5\u53ca\u4f7f\u7528max min\u7684\u76ee\u7684 \u4e00\u5b9a\u5bf9\u7740\u56fe\u597d\u597d\u7406\u89e3\n\t\t\t\tok=true;\n\t\t\t\tsolve(cur+1,xx1,min(y2,yy2),min(x2,xx2),yy2,dep);\n\t\t\t\tsolve(cur+1,min(xx2,x2),max(y1,yy1),xx2,yy2,dep);\n\t\t\t\tsolve(cur+1,max(xx1,x1),yy1,xx2,max(y1,yy1),dep);\n\t\t\t\tsolve(cur+1,xx1,yy1,max(x1,xx1),min(y2,yy2),dep);\n\t\t\t\tbreak;\n                //\u627e\u5230\u5b83\u4e0a\u9762\u7684\u4e00\u4e2a\u5c31\u884c\u4e86 \u4e0d\u7136\u5c31\u4f1a\u51fa\u95ee\u9898\u8fa3 \n                //\u8bed\u6587\u592a\u5dee\u4e0d\u77e5\u9053\u600e\u4e48\u63cf\u8ff0\u4e0d\u8fc7\u8fd9\u4e2a\u5e94\u8be5\u5f88\u597d\u7406\u89e3\u5427\n\t\t\t}\n\t\t}\n\tif (!ok) tot+=(double)abs((xx2-xx1)*(yy1-yy2));\n    //ok=false\u5373\u4ee3\u8868\u8be5\u77e9\u5f62\u5df2\u4e0d\u88ab\u8986\u76d6\uff0csolve\u51fd\u6570\u4e5f\u6ca1\u6709\u518d\u88ab\u8c03\u7528\u4e86\uff0c\u5373\u53ef\u66f4\u65b0tot\u503c\n\treturn;\n}\n\nint main(){\n\tchar ope;\n\tint qt=0,qw=-1;\n\twhile (scanf(\"%c\",&ope)!=EOF){\n\t\tif (ope=='s') {\n\t\t\tchar id;\n\t\t\tscanf(\"(%c)\",&id);\n\t\t\tint ID=id-'A';\n\t\t\ttot=0;//\u52ff\u5fd8\uff01\uff01\uff01\n\t\t\tsolve(0,a[ID].x1,a[ID].y1,a[ID].x2,a[ID].y2,a[ID].p);\n\t\t\tprintf(\"%.3f\\n\",tot/(double)abs((a[ID].x2-a[ID].x1)*(a[ID].y1-a[ID].y2))*(double)100);\n\t\t}\n\t\tif (ope=='w') {\n\t\t\tchar id;\n\t\t\tint x,y,X,Y;\n\t\t\tscanf(\"(%c,%d,%d,%d,%d)\\n\",&id,&x,&y,&X,&Y);\n\t\t\tint ID=id-'A';\n\t\t\tbool ok=false;\n\t\t\tfor (int i=0;i<win.size();i++) if (win[i]==ID){\n\t\t\t\tok=true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ta[ID].x1=min(x,X);\n\t\t\ta[ID].y1=min(y,Y);\n\t\t\ta[ID].x2=max(x,X);\n\t\t\ta[ID].y2=max(y,Y);\n            //\u8fd9\u91cc\u7684x1 y1\u5e76\u975e\u662f\u5de6\u4e0a\u89d2\u7684\u6a2a\u7eb5\u5750\u6807 \u800c\u662f\u59cb\u7ec8\u6ee1\u8db3x1<x2 y1<y2\n            //\u4e5f\u5c31\u662f\u8bf4\u5176\u5b9e\u5de6\u4e0a\u89d2\u662f\uff08x1,y2\uff09 \u53f3\u4e0b\u89d2\u662f\uff08x2,y1\uff09\n\t\t\tqw++;\n\t\t\ta[ID].p=qw;\n\t\t\tif (!ok) win.push_back(ID);//\u5751\u70b9\uff01\uff01\u53ea\u6709\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e4b\u524d\u6ca1\u51fa\u73b0\u8fc7\u65f6\u624d\u80fd\u76f4\u63a5\u5f80vector\u91cc\u52a0id\n\t\t}\n\t\tif (ope=='t') {//\u7f6e\u9876\n\t\t\tchar id;\n\t\t\tscanf(\"(%c)\",&id);\n\t\t\tint ID=id-'A';\n\t\t\tqw++;\n\t\t\ta[ID].p=qw;\n\t\t}\n\t\tif (ope=='b'){//\u7f6e\u5e95\n\t\t\tchar id;\n\t\t\tscanf(\"(%c)\",&id);\n\t\t\tint ID=id-'A';\n\t\t\tqt--;\n\t\t\ta[ID].p=qt;\n\t\t}\n\t\tif (ope=='d'){\n\t\t\tchar id;\n\t\t\tscanf(\"(%c)\",&id);\n\t\t\tint ID=id-'A';\n\t\t\tfor (int i=0;i<win.size();i++) {\n\t\t\t\tif (win[i]==ID) {\n\t\t\t\t\twin.erase(win.begin()+i);\n                    //\u76f4\u63a5\u5220\u9664 \u56e0\u4e3asolve\u51fd\u6570\u4e2d\u5bf9\u4f18\u5148\u7ea7\u7684\u67e5\u627e\u4e5f\u662f\u901a\u8fc7win\u7684 \u56e0\u6b64\u65e0\u9700\u6539\u52a8a\u6570\u7ec4\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```",
        "postTime": 1531119876,
        "uid": 65566,
        "name": "Myrcella",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2745 \u3010[USACO5.3]\u7a97\u4f53\u9762\u79efWindow Area\u3011"
    }
]