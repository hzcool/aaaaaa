[
    {
        "content": "\u5c45\u7136\u6210\u4e3a\u4e86\u8fd9\u9053\u9898\u7b2c\u4e00\u4e2aAC\u7684\u4eba\uff0c\u90a3\u5fc5\u987b\u8981\u5199\u4e00\u7bc7\u9898\u89e3\u4e86\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u62d3\u6251\u6392\u5e8f\uff0c\u5e76\u67e5\u96c6\uff0c\u5f3a\u8fde\u901a\u5206\u91cf\u3002\n\n\u672c\u9898\u95ee\u6211\u4eec\u7403\u8ff7\u7684\u884c\u52a8\u987a\u5e8f\uff0c\u5e76\u4e14\u7ed9\u4e86\u5f88\u591a\u6709\u5411\u8fb9\uff0c\u90a3\u4e48\u7b2c\u4e00\u53cd\u5e94\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u4e0d\u8fc7\u56fe\u4e0a\u53ef\u80fd\u6709\u73af\uff0c\u4e0d\u4e00\u5b9a\u662f\u53ef\u4ee5\u62d3\u6251\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b65\u5148\u60f3\u529e\u6cd5\u53bb\u6389\u73af\u3002\n\n\u5982\u679c\u56fe\u4e0a\u6709\u82e5\u5e72\u4e2a\u5e7f\u573a\uff0c\u4ed6\u4eec\u7684\u8fb9\u76f8\u4e92\u90fd\u4e0d\u51b2\u7a81\uff0c\u5e76\u4e14\u4ed6\u4eec\u76f8\u4e92\u53ef\u8fbe\uff0c\u5f62\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5e7f\u573a\u4e0a\u7684\u7403\u8ff7\u4e2d\uff0c\u53ef\u4ee5\u4efb\u9009\u4e00\u4e2a\u5148\u5f00\u59cb\u884c\u52a8\u3002\u4ed6\u4eec\u4f1a\u5360\u6ee1\u6574\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u7136\u540e\u5f80\u5916\u9762\u53bb\u6269\u5c55\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5148\u8f93\u51fa\u8fd9\u4e2a\u5e7f\u573a\uff0c\u7136\u540e\u5176\u4ed6\u6240\u6709\u5728\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u9762\u7684\u5176\u4ed6\u7403\u8ff7\u6211\u4eec\u90fd\u53ef\u4ee5\u5148\u4e0d\u7ba1\uff0c\u6700\u540e\u7edf\u4e00\u5728\u6700\u540e\u8f93\u51fa\uff0c\u56e0\u4e3a\u8f6e\u5230\u4ed6\u4eec\u884c\u52a8\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u81ea\u5df1\u7684\u5e7f\u573a\u5df2\u7ecf\u88ab\u5360\u9886\u4e86\uff0c\u6240\u4ee5\u4ed6\u4eec\u5c31\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u4e0d\u5f71\u54cd\u51b3\u7b56\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148 `tarjan` \u8dd1\u4e00\u4e0b\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u9762\u9009\u4e00\u4e2a\u70b9\u51fa\u6765\u505a\u4ee3\u8868\uff0c\u5176\u4ed6\u6682\u65f6\u90fd\u5ffd\u7565\u3002\n\n\u5c31\u8fd9\u6837\u8dd1\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\uff0c\u7f29\u70b9\u4ee5\u540e\u7684\u56fe\u4e0a\u6709\u4e24\u79cd\u8fb9\uff0c\u4e00\u79cd\u662f\u6709\u51b2\u7a81\u7684\uff0c\u4e00\u79cd\u662f\u6ca1\u6709\u51b2\u7a81\u7684\u3002\u5982\u679c $u$ \u5230 $v$ \u7684\u8fb9\u662f\u6709\u51b2\u7a81\u7684\uff0c\u90a3\u4e48 $v$ \u5c31\u8981\u5728 $u$ \u7684\u524d\u9762\uff0c\u5426\u5219 $u$ \u5c31\u8981\u5728 $v$ \u7684\u524d\u9762\u884c\u52a8\u3002\u90a3\u4e48\u6211\u4eec\u6309\u7167\u884c\u52a8\u7684\u987a\u5e8f\u518d\u5efa\u4e00\u5f20\u65b0\u56fe\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\u5c31\u884c\u4e86\u3002\u8fd9\u662f\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u770b\u8d77\u6765\u7b80\u5355\u6709\u6548\u7684\u505a\u6cd5\uff0c `WA` \u4e86\uff01\u6211\u8003\u8651\u4e86\u4e00\u4e0b\uff0c\u6709\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u662f\u6709\u95ee\u9898\u7684\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/aoie6pfi.png)\n\n\u5047\u8bbe $1$ \u70b9\u5230 $2$ \u7684\u8fb9\u6ca1\u6709\u51b2\u7a81\uff0c $2$ \u5230 $3$ \u7684\u8fb9\u6709\u51b2\u7a81\u3002\u90a3\u4e48\u6309\u7167\u521a\u624d\u7684\u505a\u6cd5\uff0c $1$ \u5230 $2$ \u548c $3$ \u5230 $2$ \u90fd\u8981\u5efa\u8fb9\u3002\u8fd9\u4e2a\u65f6\u5019\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u6709\u53ef\u80fd\u662f`3 1 2`\uff0c\u8fd9\u6837\u662f\u5408\u6cd5\u7684\u3002\u4f46\u662f\u4e5f\u53ef\u80fd\u8dd1\u51fa\u6765`1 3 2`\uff0c\u4f46\u662f\u8fd9\u6837\u662f\u9519\u7684\uff0c\u56e0\u4e3a $1$ \u5f00\u59cb\u884c\u52a8\u4ee5\u540e\uff0c\u4f1a\u628a $2$ \u5360\u9886\uff0c\u8fdb\u800c\u53bb\u5360\u9886 $3$ \uff0c\u8fd9\u4e2a\u65f6\u5019 $2$ \u548c $3$ \u8fd9\u6761\u8fb9\u6ca1\u6709\u51b2\u7a81\uff0c\u56e0\u4e3a $3$ \u8fd8\u6ca1\u884c\u52a8\uff0c\u8fd9\u4e2a\u663e\u7136\u662f\u4e0d\u7b26\u5408\u9898\u610f\u7684\u3002\n\n\u518d\u5047\u8bbe $6$ \u5230 $5$ \u6ca1\u51b2\u7a81\uff0c $4$ \u5230 $5$ \u4e5f\u6ca1\u51b2\u7a81\u3002\u8fd9\u4e2a\u65f6\u5019\u6309\u7167\u4e0a\u8ff0\u7b97\u6cd5\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u4e5f\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u662f $4$ \u8fd8\u662f $6$ \u5148\u884c\u52a8\uff0c\u90fd\u4f1a\u5360\u9886 $5$ \uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u51fa\u73b0 $4$ \u548c $6$ \u90fd\u4e0e $5$ \u6ca1\u6709\u51b2\u7a81\u7684\u60c5\u51b5\u3002\n\n\u9488\u5bf9\u4e0a\u8ff0\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u628a\u7b97\u6cd5\u505a\u4e2a\u4fee\u6b63\u3002\n\n\u9996\u5148\uff0c\u6839\u636e\u521a\u624d\u8bf4\u7684\u9519\u8bef\u60c5\u51b5 $1$ \uff0c\u62d3\u6251\u6392\u5e8f\u7684\u65f6\u5019\uff0c**\u771f\u6b63\u7684\u987a\u5e8f\u662f\u7531\u6709\u51b2\u7a81\u7684\u8fb9\u51b3\u5b9a\u7684\uff0c\u800c\u4e0d\u662f\u4e24\u79cd\u8fb9\u90fd\u80fd\u51b3\u5b9a\u987a\u5e8f**\u3002\u5148\u4e0d\u8003\u8651\u6709\u51b2\u7a81\u7684\u8fb9\uff0c\u53ea\u8003\u8651\u6ca1\u6709\u51b2\u7a81\u7684\u8fb9\uff0c\u5728\u5efa\u56fe\u7684\u65f6\u5019\uff0c\u4e0d\u8003\u8651\u8fb9\u7684\u65b9\u5411\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u8fde\u901a\u5757\u3002\u5f53\u5f3a\u8fde\u901a\u5206\u91cf\u8dd1\u5b8c\u4ee5\u540e\uff0c\u65b0\u7684\u7f29\u70b9\u56fe\u4e0a\uff0c\u6bcf\u4e2a\u8fde\u901a\u5757\u91cc\u9762\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\u3002\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u6709\u4e24\u4e2a\u6216\u8005\u4e24\u4e2a\u4ee5\u4e0a\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u5c31\u662f\u521a\u624d\u8bf4\u7684\u9519\u8bef\u60c5\u51b5 $2$ \uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa $-1$ .\u5982\u4f55\u53bb\u7edf\u8ba1\u5462\uff1f\u53ef\u4ee5\u904d\u5386\u6bcf\u4e2a\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u5728\u5e76\u67e5\u96c6\u4e0a\u627e\u5230\u8fd9\u4e2a\u70b9\u7684\u6839\uff0c\u5728\u6839\u4e0a\u505a\u4e2a\u6807\u8bb0\u3002\u5982\u679c\u4e0b\u6b21\u53d1\u73b0\u67d0\u4e2a\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\u7684\u6839\u5df2\u7ecf\u88ab\u6807\u8bb0\u8fc7\u4e86\uff0c\u90a3\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\u3002\n\n\u5728\u5408\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u8fd9\u4e9b\u5165\u5ea6\u4e3a0\u7684\u70b9\u624d\u80fd\u4f5c\u4e3a\u7b2c\u4e00\u6279\u884c\u52a8\u7684\u70b9\u3002\u4ece\u8fd9\u4e9b\u70b9\u51fa\u53d1\uff0c `dfs` \u4e00\u904d\uff0c\u628a\u4ed6\u4eec\u80fd\u5360\u9886\u7684\u70b9\u90fd\u6807\u8bb0\u4e00\u4e0b\u662f\u88ab\u8c01\u5360\u9886\u7684\uff0c\u5c31\u76f8\u5f53\u4e8e\u7ed9\u6bcf\u4e2a\u8fde\u901a\u5757\u67d3\u8272\u4e86\u3002\n\n\u67d3\u8272\u7ed3\u675f\u4ee5\u540e\uff0c\u518d\u91cd\u65b0\u8003\u8651\u6240\u6709\u6709\u51b2\u7a81\u7684\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u5efa\u4e00\u4e2a\u56fe\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\u3002\u6ce8\u610f\u8fd9\u4e2a\u65b0\u56fe\u5728\u5efa\u56fe\u7684\u65f6\u5019\uff0c\u53ea\u5728\u6240\u6709\u7b2c\u4e00\u6279\u884c\u52a8\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\u6240\u4ee5\u539f\u6765\u8f93\u5165\u7684\u65f6\u5019\u7684\u70b9\u53f7\u662f\u4e0d\u80fd\u76f4\u63a5\u7528\u7684\uff0c\u8981\u6839\u636e\u8f93\u5165\u7684\u70b9\uff0c\u67e5\u4e00\u4e0b\u6240\u5c5e\u7684\u989c\u8272\uff0c\u7528\u989c\u8272\u4f5c\u4e3a\u65b0\u56fe\u7684\u70b9\u53f7\u8fde\u8fb9\u3002\u8fd9\u6b21\u8dd1\u7684\u62d3\u6251\u6392\u5e8f\u53ef\u4ee5\u51b3\u5b9a\u6240\u6709\u7b2c\u4e00\u6279\u884c\u52a8\u70b9\u7684\u884c\u52a8\u987a\u5e8f\u3002\u5982\u679c\u8fd9\u4e9b\u70b9\u7684\u884c\u52a8\u987a\u5e8f\u6ca1\u6709\u73af\uff0c\u5c31\u53ef\u4ee5\u8f93\u51fa\u4e86\u3002\n\n\u8f93\u51fa\u5b8c\u7b2c\u4e00\u6279\u884c\u52a8\u70b9\u4ee5\u540e\uff0c\u5269\u4f59\u90a3\u4e9b\u88ab\u5360\u9886\u6389\u7684\u70b9\u8ddf\u5728\u540e\u9762\u8f93\u51fa\u5c31\u884c\u4e86\uff0c\u987a\u5e8f\u65e0\u6240\u8c13\uff0c\u53cd\u6b63\u4ed6\u4eec\u90fd\u4e0d\u4f1a\u6709\u4efb\u4f55\u4f5c\u7528\u3002\n\n\u4ee3\u7801\u975e\u5e38\u4e11\u964b\uff0c\u5199\u5b8c\u76f4\u63a5\u5c31 `AC` \u4e86\uff0c\u90fd\u6ca1\u6709\u597d\u597d\u6574\u7406\u4e00\u4e0b\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n\nusing namespace std;\ntypedef long long ll;\nconst ll MAXN = 2e4 + 5;\nconst ll MOD = 1e9 + 7;\n\n//\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6ca1\u6709\u51b2\u7a81\u7684\u8fb9\nstruct Edge {\n    int v, next;\n} pool[MAXN * 10];\n\nint head[MAXN], nn;\n\nint n, m, dt, pre[MAXN], low[MAXN], sccCount, sccNo[MAXN];\nint us[MAXN * 10], vs[MAXN * 10], os[MAXN * 10];//\u539f\u59cb\u8f93\u5165\u7684\u56fe\nstack<int> s;\nvector<int> scc[MAXN];//\u6bcf\u4e2ascc\u91cc\u9762\u7684\u70b9\u53f7\n\nvoid addEdge(int u, int v) {\n    pool[++nn].v = v;\n    pool[nn].next = head[u];\n    head[u] = nn;\n}\n\nvoid tarjan(int u) {\n    pre[u] = low[u] = ++dt;\n    s.push(u);\n    for (int i = head[u]; i; i = pool[i].next) {\n        int v = pool[i].v;\n        if (pre[v] == 0) {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        } else if (sccNo[v] == 0) {\n            low[u] = min(low[u], pre[v]);\n        }\n    }\n    if (pre[u] == low[u]) {\n        vector<int> now;\n        sccCount++;\n        while (true) {\n            int t = s.top();\n            s.pop();\n            sccNo[t] = sccCount;\n            scc[sccCount].push_back(t);\n            if (t == u) {\n                break;\n            }\n        }\n    }\n}\n\nint fa[MAXN], root[MAXN];//root\u8868\u793a\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u7b2c\u4e00\u4e2a\u884c\u52a8\u7684\u70b9\u53f7\nint occupy[MAXN];//\u6bcf\u4e2a\u8fde\u901a\u5757\u662f\u5426\u88ab\u5360\u9886\n\nint find(int x) {\n    if (fa[x] == x) return x;\n    return fa[x] = find(fa[x]);\n}\n\nvoid merge(int x, int y) {\n    fa[find(x)] = find(y);\n}\n\nvoid dfs(int u, int num) {\n    root[u] = num;\n    for (int i = head[u]; i; i = pool[i].next) {\n        int v = pool[i].v;\n        if (root[v] == 0) {\n            dfs(v, num);\n        }\n    }\n}\n\n//\u6709\u51b2\u7a81\u7684\u8fb9\u7528\u90bb\u63a5\u8868\u5b58\nvector<int> adj[MAXN];\nint in[MAXN];\nvector<int> ans;\n\nvoid topo() {\n    queue<int> q;\n    for (int i = 1; i <= n; ++i) {\n        if (in[i] == 0 && root[i] == i) q.push(i);\n    }\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        ans.push_back(u);\n        for (int i = 0; i < adj[u].size(); ++i) {\n            int v = adj[u][i];\n            in[v]--;\n            if (in[v] == 0) {\n                q.push(v);\n            }\n        }\n    }\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) {\n        fa[i] = i;\n    }\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d%d%d\", &us[i], &vs[i], &os[i]);\n        if (os[i] == 0) {\n            addEdge(us[i], vs[i]);\n            merge(us[i], vs[i]);//\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e0d\u51b2\u7a81\u7684\u8fb9\u7ec4\u6210\u7684\u8fde\u901a\u5757\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (pre[i] == 0) {\n            tarjan(i);\n        }\n    }\n    //\u8dd1\u5b8c\u5f3a\u8fde\u901a\u4ee5\u540e\uff0c\u5148\u627e\u5230\u6240\u6709\u5165\u5ea6\u4e3a0\u7684scc\n    for (int u = 1; u <= n; ++u) {\n        for (int i = head[u]; i; i = pool[i].next) {\n            int v = pool[i].v;\n            if(sccNo[u]!=sccNo[v]){\n                in[sccNo[v]]++;\n            }\n        }\n    }\n    int rc = 0;\n    for (int i = 1; i <= sccCount; ++i) {\n        if (in[i] == 0) {\n            rc++;//\u5165\u5ea6\u4e3a0\u7684scc\u7684\u4e2a\u6570\n            //\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5148\u884c\u52a8\uff0c\u4e00\u65e6\u5b83\u884c\u52a8\uff0c\u4f1a\u628a\u6574\u4e2a\u8fde\u901a\u5757\u5360\u9886\n            int r = find(scc[i][0]);//\u7528\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u6839\u4f5c\u4e3a\u4ee3\u8868\u5143\n            if (occupy[r] == 1) {\n                //\u5982\u679c\u8fd9\u4e2a\u8fde\u901a\u5757\u5df2\u7ecf\u88ab\u5360\u9886\u4e86\uff0c\u8bf4\u660e\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u6709\u4e0d\u6b62\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u8fd9\u6837\u4e0d\u884c\n                printf(\"-1\\n\");\n                return 0;\n            }\n            occupy[r] = 1;\n            dfs(scc[i][0], scc[i][0]);\n        }\n    }\n    memset(in, 0, sizeof in);//\u5165\u5ea6\u6570\u7ec4\u6e05\u7a7a\uff0c\u4e00\u4f1a\u513f\u62d3\u6251\u8fd8\u9700\u8fd8\u9700\u8981\u7528\u4e00\u6b21\n    for (int i = 0; i < m; ++i) {\n        if (os[i] == 1) {\n            int uu = sccNo[us[i]];\n            int vv = sccNo[vs[i]];\n            adj[root[scc[vv][0]]].push_back(root[scc[uu][0]]);\n            in[root[scc[uu][0]]]++;\n        }\n    }\n    topo();\n    if (ans.size() != rc) {\n        printf(\"-1\\n\");\n    } else {\n        for (int i = 0; i < rc; ++i) {\n            printf(\"%d \", ans[i]);\n        }\n        for (int i = 1; i <= n; ++i) {\n            if (root[i] != i) {\n                printf(\"%d \", i);\n            }\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1646814795,
        "uid": 43206,
        "name": "\u6ce5\u571f\u7b28\u7b28",
        "ccfLevel": 0,
        "title": "P8066 [BalkanOI 2012] Fan Groups \u9898\u89e3"
    }
]