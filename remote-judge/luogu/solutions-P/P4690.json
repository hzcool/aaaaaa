[
    {
        "content": "\u666e\u901a\u6570\u636e\u7ed3\u6784\u9898\u2026\u2026\n\n\u6ce8\u610f\u901a\u8fc7\u5c01\u88c5\u4ee5\u53ca\u5206\u597d\u51fd\u6570\u6765\u89c4\u907f\u5206\u60c5\u51b5\u8ba8\u8bba\u7684\u5c34\u5c2c\u60c5\u51b5\u2026\u2026\uff0c\u4e0d\u7136\u4f60\u4f1a\u6b7b\u7684\u5f88\u60e8\n\n_____________________\n\n# \u672c\u9898\u9898\u89e3\n\n\u9898\u76ee\u7b80\u5355\u660e\u4e86\u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272\n\n\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u4e4d\u4e00\u770b\u662f\u5341\u5206\u4e0d\u53ef\u505a\u7684\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u5148\u6765\u60f3\u4e00\u4e2a\u8fd9\u4e2a\u95ee\u9898\u7684\u5f31\u5316\u7248\u672c\u4f5c\u4e3a\u542f\u53d1\u2026\n____________________\n\n### \u5355\u70b9\u4fee\u6539\u533a\u95f4\u6570\u989c\u8272\n\n\u90a3\u4e48\u5bf9\u4e8e\u533a\u95f4\u6570\u989c\u8272\u95ee\u9898\u6211\u4eec\u662f\u6709\u4e00\u4e2a\u975e\u5e38\u660e\u786e\u7684\u5957\u8def\u7684\uff0c\u5c31\u662f\u53ea\u6570\u8fd9\u4e2a\u533a\u95f4\u91cc\u67d0\u79cd\u989c\u8272\u6700\u5de6\u8fb9\u7684\u70b9\uff0c\u8fd9\u6837\u7684\u8bdd\u6bcf\u79cd\u989c\u8272\u53ea\u4f1a\u88ab\u6570\u5230\u8fc7\u4e00\u6b21\n\n\u5177\u4f53\u5b9e\u73b0\u4e0a\u6765\u8bb2\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a$pre$\u6570\u7ec4\uff0c\u5176\u4e2d$pre_{i}$\u8868\u793ai\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u548c\u4ed6\u540c\u8272\u70b9\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u7684$pre_{i}=0$\n\n\u8fd9\u6837\u7684\u8bdd\u8be2\u95ee$[l,r]$\u533a\u95f4\u91cc\u7684\u989c\u8272\u4e2a\u6570\u7b49\u4ef7\u4e8e\u8be2\u95ee$[l,r]$\u533a\u95f4\u91cc\u6709\u591a\u5c11\u4e2a\u70b9\u7684$pre$\u503c\u5c0f\u4e8e$l$\uff0c\u56e0\u4e3a\u8fd9\u4e9b$pre$\u503c\u5c0f\u4e8el\u7684\u70b9\u90fd\u662f\u81ea\u5df1\u8fd9\u4e2a\u989c\u8272\u7684\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u8fd9\u6837\u6570\u989c\u8272\u5c31\u53ef\u4ee5\u4e0d\u91cd\u4e0d\u6f0f\u7684\u6570\u5b8c\u6bcf\u4e00\u4e2a\u989c\u8272\n\n\u7136\u540e\u63a5\u4e0b\u6765\u8981\u652f\u6301\u9759\u6001\u7684\u8be2\u95ee\u5c31\u4e0d\u662f\u975e\u5e38\u56f0\u96be\u4e86\uff0c\u65e0\u8bba\u662f\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u4e00\u4e0b\u8fd8\u662f\u628a\u8be2\u95ee\u79bb\u7ebf\u4e00\u4e0b\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u90fd\u53ef\u4ee5\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u662f\u5c06$(i,pre_{i})$\u770b\u4f5c\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u6bcf\u6b21\u6570\u989c\u8272\u76f8\u5f53\u4e8e\u662f\u8be2\u95ee$[l,r][0,l)$\u8fd9\u4e2a\u77e9\u5f62\u91cc\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u4ece\u800c\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\n\n\u95ee\u9898\u6765\u4e86\uff0c\u6211\u4eec\u73b0\u5728\u8981\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u53d1\u73b0\u4e00\u4ef6\u4e8b\u60c5\u662f\u6211\u4eec\u66f4\u6539\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u7684\u65f6\u5019\u8fd9\u4e2a\u70b9\u7684pre\u503c\u4f1a\u6539\u53d8\uff0c\u5e76\u4e14pre\u503c\u662f\u8fd9\u4e2a\u70b9\u7684\u70b9\u7684pre\u503c\u4e5f\u4f1a\u53d1\u751f\u6539\u53d8(\u4e5f\u5c31\u662f\u8fd9\u4e2a\u70b9\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u548c\u4ed6\u540c\u8272\u7684\u70b9\u7684pre\u503c\u4f1a\u6539\u53d8),\u4f46\u662f\u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u522b\u7684\u70b9\u7684pre\u503c\u4f1a\u53d1\u751f\u6539\u53d8\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4e00\u6b21\u64cd\u4f5c\u53ea\u9700\u8981\u4fee\u6539$O(1)$\u4e2a\u70b9\u7684pre\u503c\u5c31\u53ef\u4ee5\u4e86\n\n\u6211\u4eec\u6bcf\u79cd\u989c\u8272\u5f00\u4e00\u4e2aset,\u7136\u540e\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u51fa\u4fee\u6539\u7684\u7684\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u548c\u4ed6\u540c\u8272\u7684\u70b9\u7684\u662f\u8c01\uff0c\u7136\u540e\u6211\u4eec\u4fee\u6539pre\u503c\u7684\u8bdd\u76f8\u5f53\u4e8e\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u63d2\u5165\u4e00\u4e2a\u70b9\u5e76\u5220\u53bb\u4e00\u4e2a\u70b9\u5177\u4f53\u6765\u8bb2\u6211\u4eec\u628ai\u7684pre\u503c\u4fee\u6539\u4e3aval\u7684\u65f6\u5019\u5728$(i,pre_{i})$\u5355\u70b9-1\u4e00\u4e0b\u7136\u540e\u5728$(i,val)$\u8fd9\u4e2a\u4f4d\u7f6e\u5355\u70b9+1\u4e00\u4e0b\u5c31\u884c\u4e86\n\n\u7136\u540e\u8fd9\u5c31\u662f\u7ecf\u5178\u7684\u5e26\u4fee\u6539\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\u4e86\n\n\u5199\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff1f\u5e38\u6570\u5927\u7684\u4e0d\u884c\u800c\u4e14\u7531\u4e8e\u4e00\u6b21\u4fee\u6539\u9700\u8981\u62c6\u62104\u6b21\u5355\u70b9\u52a0\u51cf\u6cd5\u64cd\u4f5c\u7a0d\u5fae\u591a\u4e9b\u7a0d\u4e0d\u7559\u795e\u5c31mle\u4e86\n\n\u4e3a\u4ec0\u4e48\u4e0d\u8bd5\u8bd5\u795e\u5947\u7684cdq\u5206\u6cbb\u5462\uff1f\u5e38\u6570\u5c0f\u7701\u7a7a\u95f4\u8fd8\u8dd1\u5230\u5feb\n\n\u6211\u4eec\u53d1\u73b0\u6bcf\u4e00\u4e2a\u70b9\u4fee\u6539\u4f1a\u5bf9\u65f6\u95f4\u5728\u4ed6\u4e4b\u540e\u7684\u4e00\u4e2a\u77e9\u5f62\u8be2\u95ee\u4ea7\u751f+1/-1/0\u7684\u8d21\u732e(\u53d6\u51b3\u4e8e\u8fd9\u4e2a\u70b9\u5230\u5e95\u5728\u4e0d\u5728\u77e9\u5f62\u91cc\u9762)\n\n\u800c\u8fd9\u6837\u7684\u5173\u7cfb\u6709$O(n^2)$\u79cd\uff0c\u56e0\u6b64\u6211\u4eec\u5bf9\u8fd9\u4e9b\u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\u8fdb\u884c\u5206\u6cbb\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5904\u7406\u65f6\u95f4\u5728$(l,r)$\u8fd9\u6bb5\u533a\u95f4\u7684\u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\u662f\u5426\u8de8\u8d8a$(l,r)$\u7684\u4e2d\u70b9mid\u8fdb\u884c\u5206\u7c7b\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u9012\u5f52\u7684\u8003\u8651$(l,mid)$\u7684\u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\u3002\u9012\u5f52\u7136\u540e\u8003\u8651$(mid,r)$\u7684\u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\n\n\u73b0\u5728\u8003\u8651\u6240\u6709\u8de8\u8d8a\u4e86mid\u7684\u4fee\u6539\u8be2\u95ee\u5173\u7cfb\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u76f8\u5f53\u4e8e\u662f\u5148\u505a\u4e86$(l,mid)$\u4e4b\u524d\u7684\u6240\u6709\u4fee\u6539\u7136\u540e\u505a\u4e86$(mid,r)$\u7684\u6240\u6709\u8be2\u95ee\u5de5\u4f5c\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u6b64\u65f6\u7684\u95ee\u9898\u662f\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u9759\u6001\u95ee\u9898\u2026\u2026\n\n\u90a3\u4e48\u5c06\u6240\u6709\u4fee\u6539\u6309\u7167$pre$\u8fdb\u884c\u6392\u5e8f\uff0c\u5c06\u6240\u6709\u8be2\u95ee\u6309\u7167$l$\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5f00\u59cb\u5904\u7406\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c06\u6240\u6709$pre$\u503c\u5c0f\u4e8e\u8fd9\u4e2a\u8be2\u95ee\u7684$l$\u7684\u4fee\u6539\uff0c\u90fd\u63d2\u5230\u6811\u72b6\u6570\u7ec4\u91cc\u9762\n(\u63d2\u5165\u65b9\u6cd5\u662f\u5982\u679c\u8fd9\u4e2a\u4fee\u6539\u662f\u5c06$(i,pre)$\u8fd9\u4e2a\u70b9\u6dfb\u52a0/\u5220\u53bb\uff0c\u90a3\u4e48\u5c31\u5728\u6811\u72b6\u6570\u7ec4i\u8fd9\u4e2a\u4f4d\u7f6e\u5355\u70b9+1/-1)\n\n\u6b64\u65f6\u6211\u4eec\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u533a\u95f4\u6c42\u4e00\u4e0b\u548c\u5c31\u53ef\u4ee5\u7b97\u51fa$(l,mid)$\u6240\u6709\u7684\u4fee\u6539\u5bf9\u8fd9\u4e2a\u8be2\u95ee\u7684\u8d21\u732e\u4e86\n\n\u7531\u4e8e\u6240\u6709\u4fee\u6539\u5df2\u7ecf\u6309\u7167pre\u503c\u6392\u597d\u5e8f\uff0c\u6240\u6709\u8be2\u95ee\u5df2\u7ecf\u6309\u7167l\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\u7684\u5f62\u5f0f\u6765\u4e0d\u505c\u7684\u5411\u6811\u72b6\u6570\u7ec4\u63d2\u5165\u70b9\uff0c\u603b\u63d2\u5165\u91cf$O(n)$\n\n\u6b64\u65f6\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$T(n)=T(\\lfloor \\frac{n}{2} \\rfloor)+T(\\lceil \\frac{n}{2} \\rceil)+O(nlogn)=O(nlog^2n)$\u7684\n\n\u5177\u4f53\u5199\u7684\u65f6\u5019\u4f60\u4f1a\u53d1\u73b0\u53ef\u80fd\u4e3a\u4e86\u6392\u5e8f\u53ea\u80fd\u5199\u4e00\u4e2a5\u5143\u7ec4\u7ed3\u6784\u4f53\u51fa\u6765(\u56e0\u4e3a\u8be2\u95ee\u662f$(time,l,r,ans)$\u800c\u4fee\u6539\u662f$(time,pos,pre,val)$\u8fd9\u4e2a4\u4e2a\u53c2\u6570\uff0c\u4e3a\u4e86\u533a\u5206\u7c7b\u578b\u53ef\u80fd\u8fd8\u5f97\u52a0\u4e00\u4e2atype\u5c5e\u6027)\u8fd9\u4f1a\u5bfc\u81f4\u4fee\u6539\u548c\u8be2\u95ee\u53ea\u80fd\u51d1\u5408\u7740\u7528\u540c\u4e00\u7ec4\u53d8\u91cf\u540d\uff0c\u5341\u5206\u7684\u4e0d\u6e05\u771f\u3002\n\n\u90a3\u4e48\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u4ee3\u7801\u4e0a\u7684trick\u53ef\u4ee5\u8ba9\u4f60\u4e0d\u7528\u5199\u4e00\u4e2a5\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u800c\u662f\u8be2\u95ee\u5199\u4e00\u4e2a4\u5143\u7ec4\uff0c\u4fee\u6539\u5199\u4e00\u4e2a4\u5143\u7ec4\uff0c\u53d8\u91cf\u540d\u4f1a\u53d8\u5f97\u6bd4\u8f83\u6e05\u771f\u7684\u5199\u6cd5\n\n\u5c31\u662f\u6211\u4eec\u5199cdq\u7684solve\u51fd\u6570\u7684\u65f6\u5019\u4e0d\u4f20$(l,r)$\u8fd9\u4e2a\u53c2\u8868\u793a\u6211\u4eec\u5206\u6cbb$(l,r)$\u8fd9\u6bb5\u64cd\u4f5c\u5e8f\u5217\u800c\u662f\u4f206\u4e2a\u53c2$(l1,r1),(l2,r2),(L,R)$\u8868\u793a\u5206\u6cbb\u65f6\u95f4\u8303\u56f4\u5728$(L,R]$\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u5176\u4e2d\u4fee\u6539\u90e8\u5206\u7684\u5e8f\u5217\u662f$(l1,r1]$\u800c\u8be2\u95ee\u90e8\u5206\u7684\u5e8f\u5217\u662f$(l2,r2]$,\u7136\u540e\u6bcf\u6b21\u5206\u6cbb\u7684\u65f6\u5019\u5148\u6c42\u51fa$(L,R]$\u4e2d\u70b9\u7684$MID$\uff0c\u7136\u540e\u5206\u522b\u6c42\u51fa\u4fee\u6539\u5e8f\u5217\u548c\u8be2\u95ee\u5e8f\u5217\u65f6\u95f4\u6bd4$MID$\u5c0f\u7684\u90e8\u5206$(l1,mid1]$\u548c$(l2,mid2]$\u90a3\u4e48\u6bd4$MID$\u5927\u7684\u90e8\u5206\u5c31\u662f$(mid1,r1]$\u548c$(mid2,r2]$\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u9012\u5f52\u7684\u5411\u4e24\u4fa7\u5206\u6cbb\u4e86\n\n\u8fd9\u6837\u5199\u7684\u8bdd\u5e76\u4e0d\u9700\u8981\u5c06\u4fee\u6539\u548c\u8be2\u95ee\u585e\u5230\u540c\u4e00\u4e2a\u6570\u7ec4\u91cc\u9762\u800c\u662f\u53ef\u4ee5\u5c06\u4fee\u6539\u5b58\u4e00\u4e2a\u6570\u7ec4\uff0c\u8be2\u95ee\u5b58\u4e00\u4e2a\u6570\u7ec4\uff0c\u540c\u65f6\u5bf9\u4e24\u4e2a\u5e8f\u5217\u8fdb\u884c\u5206\u6cbb\u56e0\u6b64\u81ea\u7136\u53ef\u4ee5\u5f00\u4e24\u4e2a\u7ed3\u6784\u4f53\uff0c\u4e0d\u4ec5\u53d8\u91cf\u540d\u6e05\u771f\u800c\u4e14\u5904\u7406\u8d21\u732e\u7684\u65f6\u5019\u4e0d\u7528\u5224\u8282\u70b9\u7684\u7c7b\u578b\u4e86\u3002\n__________________________\n\n### \u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272\n\n## \u7ed3\u8bba:\n\n## \u5bf9\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u8fdb\u884cm\u6b21\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0cpre\u6570\u7ec4\u7684\u6539\u53d8\u6b21\u6570\u4e3a$O(n+m)$\u7ea7\u522b\n\n~~\u597d\u4e86\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5cdq\u4e86\uff0c\u6bcf\u6b21\u533a\u95f4\u8d4b\u503c\u62c6\u6210\u66b4\u529b\u5355\u70b9\u7684pre\u503c\u6539\u53d8\u5373\u53ef~~\n\n\u4e4d\u4e00\u770b\u8fd9\u4e2a\u7ed3\u8bba\u76f8\u5f53\u7684\u4e0d\u53ef\u63a5\u53d7\uff0c\u660e\u660e\u6211\u5355\u6b21\u4fee\u6539\u4e86$O(n)$\u4e2a\u70b9\u7684\u989c\u8272\u5230\u5934\u6765\u4f60\u544a\u8bc9\u6211\u603b\u6539\u53d8\u6b21\u6570\u662f$O(n+m)$\u7ea7\u522b\u7684\uff1f\n\n~~\u5f53\u4f60\u89c9\u5f97\u4e00\u4e2a\u4e1c\u897f\u590d\u6742\u5ea6\u76f8\u5f53\u8be1\u5f02\u7684\u65f6\u5019\u4ed6\u4e00\u5b9a\u662f\u7528\u4e86\u644a\u8fd8\u5206\u6790\uff0c\u6bd4\u5982splay\uff0c\u6bd4\u5982lct~~\n\n\u6240\u4ee5\u6211\u4eec\u4e5f\u7528\u644a\u8fd8\u5206\u6790\u6765\u8bc1\u660e\u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u7684\n\n\u5148\u6765\u8003\u8651\u4e00\u4e0bpre\u6570\u7ec4\u7684\u5b9a\u4e49\uff0c\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u548ci\u540c\u8272\u70b9\u7684\u4f4d\u7f6e\n\n\u6240\u4ee5\u5982\u679c\u6709\u4e00\u4e2a\u5185\u90e8\u7684\u70b9\u7684\u989c\u8272\u76f8\u540c\u7684\u533a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c06\u8fd9\u4e2a\u533a\u95f4\u7684\u989c\u8272\u6574\u4f53\u8d4b\u503c\u6210\u4e00\u4e2a\u522b\u7684\u989c\u8272\uff0c\u90a3\u4e48\u53ea\u6709\u8fd9\u4e2a\u533a\u95f4\u5de6\u7aef\u70b9\u7684pre\u503c\u4ee5\u53ca\u53f3\u7aef\u70b9\u53f3\u4fa7\u7b2c\u4e00\u4e2a\u540c\u8272\u70b9\u7684pre\u503c\u4f1a\u53d8\uff0c\u5bf9\u4e8e\u5176\u4ed6\u7684\u70b9\uff0c\u56e0\u4e3a\u5de6\u8fb9\u7684\u70b9\u6362\u5b8c\u989c\u8272\u4e4b\u540e\u8fd8\u662f\u540c\u8272\u7684\uff0cpre\u503c\u4fdd\u6301$i-1$\u4e0d\u53d8\n\n\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c06\u989c\u8272\u76f8\u540c\u7684\u4e00\u6bb5\u770b\u6210\u4e00\u4e2a\u70b9\n\n\u90a3\u4e48\u6211\u4eec\u7684\u533a\u95f4\u8d4b\u503c\u76f8\u5f53\u4e8e\u6267\u884c\u5220\u53bb$(l,r)$\u4e2d\u7684\u6240\u6709\u70b9,\u7136\u540e\u63d2\u5165$(l,r)$\u8fd9\u4e2a\u70b9\u8fd9\u4e2a\u64cd\u4f5c(\u53ef\u80fd\u6211\u4eec\u7684l,r\u843d\u5728\u4e86\u4e00\u4e2a\u533a\u95f4\u91cc\u9762\u800c\u4e0d\u662f\u5305\u542b\u8fd9\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u8282\u70b9\u4ecel\u5904\u6216\u8005\u4ecer\u65ad\u5f00\uff0c\u62c6\u6210\u4e24\u4e2a\u8282\u70b9)\n\n\u6839\u636e\u521a\u624d\u7684\u7ed3\u8bba\uff0c$pre_{i}$\u7684\u6539\u53d8\u6b21\u6570\u5e94\u8be5\u662fO(\u5220\u53bb\u8282\u70b9\u4e2a\u6570)\u7684\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u4e00\u5f00\u59cb\u8282\u70b9\u6709n\u4e2a\uff0c\u6bcf\u6b21\u533a\u95f4\u8d4b\u503c\u6700\u591a\u63d2\u51653\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u88ab\u5220\u9664\u4e00\u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u5220\u9664\u7684\u603b\u8282\u70b9\u4e2a\u6570\u5c31\u662f$O(n+m)$\u7ea7\u522b\u7684\uff0c\u4ece\u800cpre\u7684\u6539\u53d8\u6b64\u65f6\u5c31\u662f$O(n+m)$\u7ea7\u522b\u7684\u4e86\u2026\u2026\n\n\u5177\u4f53\u6765\u8bb2\u6211\u4eec\u6bcf\u4e2a\u533a\u95f4\u7f29\u6210\u4e00\u4e2a\u70b9\u5b58\u5230set\u91cc\u9762\uff0c\u5f53\u533a\u95f4\u8d4b\u503c\u7684\u65f6\u5019\u9996\u5148split\u4e24\u4e0b\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u6240\u5728\u7684\u5757\uff0c\u5c06\u4ed6\u4eec\u4ecel\u548cr\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u65ad\u6210\u4e24\u4e2a\u5757,\u4e4b\u540e\u5220\u9664l\uff0cr\u4e4b\u95f4\u7684\u6240\u6709\u5757,\u6700\u540e\u5c06$(l,r)$\u8fd9\u4e2a\u5757\u63d2\u5230set\u91cc\u9762\uff0c\u603b\u590d\u6742\u5ea6$O((n+m)logn)$\uff0c\u81f3\u4e8e\u63d2\u5165\u548c\u5220\u9664\u65f6pre\u5230\u5e95\u53d8\u6210\u4e86\u8c01\u53ef\u4ee5\u6bcf\u79cd\u989c\u8272\u5f00\u4e00\u4e2aset\u5355\u72ec\u7ef4\u62a4\u4e00\u4e0b\uff0c\u6ce8\u610f\u4fdd\u6301\u6bcf\u79cd\u989c\u8272\u5f00\u7684set\u548c\u5b58\u50a8\u6574\u4e2a\u5e8f\u5217\u7684set\u662f\u540c\u6b65\u7684\uff0c\u5426\u5219\u4f60\u7684pre\u7684\u6539\u53d8\u91cf\u5c31\u70b8\u6389\u4e86\n\n\u7136\u540e\u5c31\u662f\u5b9e\u73b0\u65f6\u5019\u7684\u7ec6\u8282\u4e86\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8bf7\u4e0d\u8981\u5984\u60f3\u4f60\u53ef\u4ee5\u4e00\u904d\u63d2\u5165\u5220\u9664\u4e00\u904d\u7ef4\u62a4\u597dpre\u7684\u53d8\u5316\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u4f60\u7684\u4ee3\u7801\u53c8\u81ed\u53c8\u957f\u5145\u65a5\u5206\u60c5\u51b5\u8ba8\u8bba\n\n\u6b63\u786e\u7684\u5199\u6cd5\u7684\u662f\u4fee\u6539\u7684\u65f6\u5019\u628a\u6240\u6709\u53ef\u80fdpre\u503c\u53d8\u52a8\u7684\u70b9\uff0c\u4e5f\u5c31\u662f\u88ab\u5220\u6389\u5757\u7684\u5de6\u7aef\u70b9\u548c\u88ab\u5220\u6389(\u63d2\u5165)\u5757\u5728\u81ea\u5df1\u989c\u8272\u7684set\u91cc\u7684\u540e\u7ee7\u7684\u5de6\u7aef\u70b9\uff0c\u4e22\u5230\u4e00\u4e2aset\u91cc\u9762\uff0c\u5728\u4fee\u6539\u7ed3\u675f\u4e4b\u540e\u6328\u4e2a\u53bb\u67e5\u8fd9\u4e9b\u70b9\u7684pre\u503c\u90fd\u53d8\u6210\u4e86\u4ec0\u4e48\uff0c\u5177\u4f53\u6765\u8bb2\u5148\u5728\u7ef4\u62a4\u5e8f\u5217\u7684set\u91cc\u9762\u67e5\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u7684\u989c\u8272\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u5de6\u7aef\u70b9\u7684\u8bddpre\u5c31\u662fi-1\uff0c\u5426\u5219\u5230\u81ea\u5df1\u7684\u989c\u8272\u91cc\u9762\u53d6\u67e5\u524d\u9a71\uff0cpre\u503c\u5c31\u662f\u524d\u9a71\u7684\u53f3\u7aef\u70b9\n\n\u5904\u7406\u597dpre\u503c\u7684\u53d8\u5316\u4e4b\u540e\u76f4\u63a5\u53bb\u5957\u5355\u70b9\u4fee\u6539\u65f6\u7684cdq\u4ee3\u7801\u5c31\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u4e86\n\n\n\u4e0a\u4ee3\u7801~\n\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<map> \n#define SNI set <nod> :: iterator \n#define SDI set <data> :: iterator \nusing namespace std;const int N=1e5+10;int n;int m;int pre[N];int npre[N];int a[N];int tp[N];int lf[N];int rt[N];int co[N];\nstruct modi{int t;int pos;int pre;int va;friend bool operator <(modi a,modi b){return a.pre<b.pre;}}md[10*N];int tp1;\nstruct qry{int t;int l;int r;int ans;friend bool operator <(qry a,qry b){return a.l<b.l;}}qr[N];int tp2;int cnt;\ninline bool cmp(const qry& a,const qry& b){return a.t<b.t;}\ninline void modify(int pos,int co)//\u4fee\u6539\u51fd\u6570\n{\n\tif(npre[pos]==co)return;md[++tp1]=(modi){++cnt,pos,npre[pos],-1};\n\tmd[++tp1]=(modi){++cnt,pos,npre[pos]=co,1};\n}\nnamespace prew\n{\n\tint lst[2*N];map <int,int> mp;//\u63d0\u524d\u79bb\u6563\u5316\n\tinline void prew()\n\t{\n\t\tscanf(\"%d%d\",&n,&m);for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]),mp[a[i]]=1;\n\t\tfor(int i=1;i<=m;i++){scanf(\"%d%d%d\",&tp[i],&lf[i],&rt[i]);if(tp[i]==1)scanf(\"%d\",&co[i]),mp[co[i]]=1;}\n\t\tmap <int,int> :: iterator it,it1;\n\t\tfor(it=mp.begin(),it1=it,++it1;it1!=mp.end();++it,++it1)it1->second+=it->second;\n\t\tfor(int i=1;i<=n;i++)a[i]=mp[a[i]];for(int i=1;i<=m;i++)if(tp[i]==1)co[i]=mp[co[i]];\n\t\tfor(int i=1;i<=n;i++)pre[i]=lst[a[i]],lst[a[i]]=i;for(int i=1;i<=n;i++)npre[i]=pre[i];\n\t}\n}\nnamespace colist\n{\n    struct data {int l;int r;int x;friend bool operator <(data a,data b){return a.r<b.r;}};set <data> s;\n    struct nod {int l;int r;friend bool operator <(nod a,nod b){return a.r<b.r;}};set <nod> c[2*N];set <int> bd;\n    inline void split(int mid)//\u5c06\u4e00\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\n    {\n    \tSDI it=s.lower_bound((data){0,mid,0});data p=*it;if(mid==p.r)return;\n\t\ts.erase(p);s.insert((data){p.l,mid,p.x});s.insert((data){mid+1,p.r,p.x});\n    \tc[p.x].erase((nod){p.l,p.r});c[p.x].insert((nod){p.l,mid});c[p.x].insert((nod){mid+1,p.r});\n\t}\n\tinline void del(set <data> :: iterator it)//\u5220\u9664\u4e00\u4e2a\u8fed\u4ee3\u5668\n\t{\n\t\tbd.insert(it->l);SNI it1,it2;it1=it2=c[it->x].find((nod){it->l,it->r});\n\t\t++it2;if(it2!=c[it->x].end())bd.insert(it2->l);c[it->x].erase(it1);s.erase(it);\n\t}\n\tinline void ins(data p)//\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\n\t{\n\t\ts.insert(p);SNI it=c[p.x].insert((nod){p.l,p.r}).first;++it;\n\t\tif(it!=c[p.x].end()){bd.insert(it->l);}\n\t}\n\tinline void stv(int l,int r,int x)//\u533a\u95f4\u8d4b\u503c\n\t{\n\t\tif(l!=1)split(l-1);split(r);int p=l;//split\u4e24\u4e0b\u4e4b\u540e\u5220\u6389\u6240\u6709\u533a\u95f4\n\t\twhile(p!=r+1){SDI it=s.lower_bound((data){0,p,0});p=it->r+1;del(it);}\n\t\tins((data){l,r,x});//\u626b\u4e00\u904dset\u5904\u7406\u6240\u6709\u53d8\u5316\u7684pre\u503c\n\t\tfor(set <int> :: iterator it=bd.begin();it!=bd.end();++it)\n\t\t{\n\t\t\tSDI it1=s.lower_bound((data){0,*it,0});\n\t\t\tif(*it!=it1->l)modify(*it,*it-1);\n\t\t\telse\n\t\t\t{\n\t\t\t\tSNI it2=c[it1->x].lower_bound((nod){0,*it});\n\t\t\t\tif(it2!=c[it1->x].begin())--it2,modify(*it,it2->r);else modify(*it,0);\n\t\t\t}\n\t\t}bd.clear();\n\t}\n\tinline void ih()\n\t{\n\t\tint nc=a[1];int ccnt=1;//\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u63d2\u5165\u5230set\u4e2d\n\t\tfor(int i=2;i<=n;i++)\n\t\t\tif(nc!=a[i]){s.insert((data){i-ccnt,i-1,nc}),c[nc].insert((nod){i-ccnt,i-1});nc=a[i];ccnt=1;}\n\t\t\telse {ccnt++;} s.insert((data){n-ccnt+1,n,a[n]}),c[a[n]].insert((nod){n-ccnt+1,n});\n\t}\n}\nnamespace cdq\n{   \n    struct treearray//\u6811\u72b6\u6570\u7ec4\n    {\n        int ta[N];\n        inline void c(int x,int t){for(;x<=n;x+=x&(-x))ta[x]+=t;}\n        inline void d(int x){for(;x<=n;x+=x&(-x))ta[x]=0;}\n        inline int  q(int x){int r=0;for(;x;x-=x&(-x))r+=ta[x];return r;}\n        inline void clear(){for(int i=1;i<=n;i++)ta[i]=0;}\n    }ta;int srt[N];\n    inline bool cmp1(const int& a,const int& b){return pre[a]<pre[b];}\n    inline void solve(int l1,int r1,int l2,int r2,int L,int R)//cdq\n    {\n        if(l1==r1||l2==r2)return;int mid=(L+R)/2;\n        int mid1=l1;while(mid1!=r1&&md[mid1+1].t<=mid)mid1++;\n        int mid2=l2;while(mid2!=r2&&qr[mid2+1].t<=mid)mid2++;\n        solve(l1,mid1,l2,mid2,L,mid);solve(mid1,r1,mid2,r2,mid,R);\n        if(l1!=mid1&&mid2!=r2)\n        {\n            sort(md+l1+1,md+mid1+1);sort(qr+mid2+1,qr+r2+1);\n            for(int i=mid2+1,j=l1+1;i<=r2;i++)//\u8003\u8651\u5de6\u4fa7\u5bf9\u53f3\u4fa7\u8d21\u732e\n            {\n                while(j<=mid1&&md[j].pre<qr[i].l)ta.c(md[j].pos,md[j].va),j++;\n                qr[i].ans+=ta.q(qr[i].r)-ta.q(qr[i].l-1);\n            }for(int i=l1+1;i<=mid1;i++)ta.d(md[i].pos);\n        }\n    }\n\tinline void mainsolve()\n\t{\n\t\tcolist::ih();for(int i=1;i<=m;i++)\n\t\t\tif(tp[i]==1)colist::stv(lf[i],rt[i],co[i]);else qr[++tp2]=(qry){++cnt,lf[i],rt[i],0};\n\t\tsort(qr+1,qr+tp2+1);for(int i=1;i<=n;i++)srt[i]=i;sort(srt+1,srt+n+1,cmp1);\n\t\tfor(int i=1,j=1;i<=tp2;i++)//\u521d\u59cb\u5316\u4e00\u4e0b\u6bcf\u4e2a\u8be2\u95ee\u7684\u503c\n\t\t{\n\t\t\twhile(j<=n&&pre[srt[j]]<qr[i].l)ta.c(srt[j],1),j++;\n\t\t\tqr[i].ans+=ta.q(qr[i].r)-ta.q(qr[i].l-1);\n\t\t}ta.clear();sort(qr+1,qr+tp2+1,cmp);solve(0,tp1,0,tp2,0,cnt);sort(qr+1,qr+tp2+1,cmp);\n\t\tfor(int i=1;i<=tp2;i++)printf(\"%d\\n\",qr[i].ans);\n\t}\n}\nint main(){prew::prew();cdq::mainsolve();return 0;}//\u62dc\u62dc\u7a0b\u5e8f~\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1536397210,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "## update on 2020.3.8\n## \u65f6\u7a7a\u5f00\u5c0f\u540e\u4f7f\u7528\u4e86$O(n)$\u7a7a\u95f4\u7684\u5206\u5757\n\njuruo\u7b2c\u4e00\u6b21\u7ed9Ynoi\u5199\u9898\u89e3\u554a\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a$nsqrt(n)$\u7684\u505a\u6cd5\n\n\u6211\u4eec\u5b9a\u4e49$f[i]$\u8868\u793a$i$\u540e\u9762\u7b2c\u4e00\u4e2a\u4e0e$i$\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\u7684\u4e0b\u6807\n\n\uff08\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u8ba4\u4e3a$f[i] = n+1$\uff09\n\n\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a$set$\u7ef4\u62a4\u6bcf\u4e00\u6bb5\u91cc\u540c\u4e00\u79cd\u989c\u8272\u7684\uff0c\u53e6\u5916\u518d\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\u5206\u522b\u5f00\u4e2a$set$\u7ef4\u62a4,\u7136\u540e$f$\u7684\u4fee\u6539\u6b21\u6570\u662f$O(n+m)$\u7684\u3002\n\n\u8fd9\u4e2a\u6211\u5c31\u4e0d\u8be6\u7ec6\u8bf4\u4e86\uff0c\u522b\u7684\u9898\u89e3\u4e5f\u6709\u3002\n\n\u8fd9\u91cc\u4e3b\u8981\u8bb2\u4e0b\u5206\u5757\u600e\u4e48\u7ef4\u62a4\n\n\uff08\u6211\u770b\u5176\u4ed6dalao\u6709\u5199\u6811\u5957\u6811\u7684\uff0c\u6211\u8fd9\u4e2a\u849f\u84bb\u6811\u5957\u6811\u8fd8\u4e0d\u592a\u719f\u7ec3\uff0c\u4e8e\u662f\u5199\u4e86\u4e2a\u5206\u5757\uff09\n\n\u6bcf\u6b21\u8be2\u95ee\u6211\u4eec\u7684\u7b54\u6848\uff0c\u5c31\u662f$[l,r]$\u91cc$f$\u503c$>=r$\u7684\u6570\u7684\u4e2a\u6570\n\n\u6211\u4eec\u5bf9\u4e8e\u6574\u4e2a\u5e8f\u5217\u5206\u5757\uff0c\u5757\u91cc\u7ef4\u62a4$f$\u503c\u3002\u5bf9\u4e8e\u5757\u91cc\uff0c\u6211\u4eec\u73b0\u5728\u8981\u6c42\u8fd9\u4e48\u4e00\u4e2a\u4e1c\u897f\uff1a\n\n> \u5355\u70b9\u4fee\u6539\n\n> \u67e5\u8be2\u6574\u4f53 >= r \u7684\u4e2a\u6570\n\n\u56e0\u4e3a$f$ \u7684\u503c\u57df\u662f$[1,n]$\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u5757\u5185\u524d\u7f00\u548c\uff0c\u5c31\u662f\n\u5757\u5185f\u503c\u5728$[1,i]$\u5185\u7684\u6570\u7684\u4e2a\u6570\n\n\u8fd9\u4e2a\u5982\u679c\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u518d\u8c03\u6574\u5757\u5927\u5c0f\uff0c\u53ef\u4ee5\n\n$n\\sqrt{nlogn}$\u89e3\u51b3\n\n\uff08\u6ca1\u5199\u8fc7\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\n\n\u5f53\u7136\uff0c\u4e5f\u6709\u66f4\u597d\u7684\u65b9\u6cd5\n\n\u6211\u4eec\u5728\u5757\u91cc\u518d\u6765\u4e00\u4e2a\u5206\u5757\n\n\u8981\u6c42\u8fbe\u5230\u4e00\u4e2a\u57fa\u672c\u64cd\u4f5c\n\n> O(1)\u524d\u7f00\u548c\n\n> O(sqrt(n)) \u4fee\u6539\n\n\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u7ef4\u62a4\u6bcf\u4e2a\u6570\u5728\u5757\u4e2d\u7684\u524d\u7f00\u548c\uff0c\u548c\u6bcf\u4e2a\u5757\u7ed3\u5c3e\u7684\u524d\u7f00\u548c\u5373\u53ef\n\n\u8fd9\u4e2a\u8fd8\u662f\u653e\u4e0b\u4ee3\u7801\u5427\n\n```\n    inline void add(int x,int y)\n    {\n    \tfor(int i = c[x]; i <= mm; i ++)\n\t\t\ts[i] += y;\n\t\tfor(int i = x; c[i] == c[x]; i ++)\n\t\t\tss[i] += y; \n\t  }\n\n    inline int sum(int x) {\n    \treturn ss[x] + s[c[x]-1];\n    }\n```\n\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u8fbe\u5230\u4e86$n\\sqrt{n}$\n\n\u8fd9\u4e2a\u505a\u6cd5\u5e94\u8be5\u8fd8\u662f\u6bd4\u6811\u5957\u6811\u5199\u7740\u65b9\u4fbf\u5f88\u591a\u7684\n\n\u597d\u4e86\uff0c\u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\n```\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 200005\n#define se set<aa>\n#define it iterator\n#define lb lowber_bound\n\nint n,m,nn,mm,sb;\nmap<int,int>p;\nint a[MAXN],f[MAXN],u[MAXN],tt[MAXN];\nint c[MAXN],d[MAXN]; \nstruct aa\n{\n    int l,r,v;\n};\nset<aa>s[MAXN];\n\nbool operator <(aa a,aa b) {\n    return a.r < b.r;\n}\n\nset<aa>odt;\n\nvoid fenkuai() \n{\n\tsb = sqrt(n);\n\tfor(int i = 1; i <= n+1; i ++) {\n\t\tif(i%sb == 1) {\n\t\t\tc[i] = c[i-1]+1;\n\t\t\td[i] = 1;\n\t\t} else {\n\t\t\tc[i] = c[i-1];\n\t\t\td[i] = d[i-1]+1;\n\t\t}\n\t}\n\tmm = c[n];\n}\n\nstruct kuai\n{\n    int s[MAXN],ss[MAXN];\n\n    inline void jia(int x,int y)\n    {\n    \tfor(int i = c[x]; i <= mm; i ++)\n\t\t\ts[i] += y;\n\t\tfor(int i = x; c[i] == c[x]; i ++)\n\t\t\tss[i] += y; \n\t}\n\n    inline int sum(int x) {\n    \treturn ss[x] + s[c[x]-1];\n    }\n}b[355];\n\nvoid rd()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1; i <= n; i ++)\n        scanf(\"%d\",&a[i]);\n    for(int i = 1; i <= n; i ++)\n    {\n    \tif(!p.count(a[i])) {\n    \t\tnn ++;\n    \t\tp[a[i]] = nn;\n    \t\ttt[nn] = a[i];\n\t\t}\n\t\ts[ p[a[i]] ].insert((aa){i,i,p[a[i]]});\n\t}\n    fenkuai();\n    for(int i = n; i >= 1; i --) {\n    \tint t = u[ p[a[i]] ];\n    \tif(t) f[i] = t;\n    \telse f[i] = n+1;\n    \tb[c[i]].jia(f[i],1);\n\t\tu[p[a[i]]] = i;\n\t}\n\tfor(int i = 1; i <= n; i ++) {\n\t\todt.insert((aa){i,i,p[a[i]]});\n\t} \n\t\n\tfor(int i = 1; i <= n*2; i ++) {\n\t\ts[i].insert((aa){n+1,n+1,i}); \n\t\ts[i].insert((aa){0,0,i}); \n\t\t\n\t}\n} \n\nvoid split(se::it x,int i)\n{\n\tint v = x->v,l = x->l,r = x->r;\n\tif(i < l || i >= r) return; \n\t\n\ts[v].erase((aa){l,r,v});\n\ts[v].insert((aa){l,i,v});\n\ts[v].insert((aa){i+1,r,v});\n\t\n\todt.erase(x);\n\todt.insert((aa){l,i,v});\n\todt.insert((aa){i+1,r,v});\n}\n\naa qls(int v,int x) {\n\tse::it i = s[v].upper_bound((aa){0,x,0});\n\ti --;\n\treturn (*i);\n} \n\nvoid qf(int x,int y) {\n\tb[c[x]].jia(f[x],-1);\n\tf[x] = y; \n\tb[c[x]].jia(f[x],1);\n} \n\nvoid dlt(int l,int r,int v)\n{\n\ts[v].erase((aa){l,r,v});\n\taa ls = qls(v,l);\n\taa rs = *s[v].lower_bound((aa){0,r,0});\n\tqf(r,r+1); \n\tqf(ls.r,rs.l);\n}\n\nvoid jlt(int l,int r,int v)\n{\n\taa ls = qls(v,l);\n\taa rs = *s[v].lower_bound((aa){0,r,0}); \n\ts[v].insert((aa){l,r,v});\n\tqf(ls.r,l);\n\tqf(r,rs.l);\n} \n\nvoid assign(int l,int r,int v)\n{\n\tse::it x = odt.lower_bound((aa){0,l-1,0});\n\tsplit(x,l-1);\n\t\n\tse::it y = odt.lower_bound((aa){0,r,0});\n\tsplit(y,r);\n\t\n\tx = odt.lower_bound((aa){0,l,0});\n\ty = odt.lower_bound((aa){0,r+1,0});\n\t\n\tfor(se::it i = x; i != y; ) {\n\t\tse::it j = i;\n\t\ti ++; \n\t\tdlt(j->l,j->r,j->v);\n\t\todt.erase(j);\n\t} \n\t\n\todt.insert((aa){l,r,v});\n\tjlt(l,r,v);\n}\n\nsigned main()\n{\n    rd();\n    for(int i = 1; i <= m; i ++)\n    {\n        int l,r,v,opt;\n        scanf(\"%d%d%d\",&opt,&l,&r);\n        if(opt == 1) {\n\t    \tscanf(\"%d\",&v);\n\t\t    if(!p.count(v)) {\n\t        \tnn ++;\n\t        \tp[v] = nn;\n\t        \ttt[nn] = v;\n\t\t\t}\n\t\t\tassign(l,r,p[v]);\n\t\t} else {\n\t\t\tint ans = r-l+1;\n\t\t\tif(c[l] != c[r])\n\t\t\t{\n\t\t\t\tfor(int j = c[l]+1; j <= c[r]-1; j ++) \n\t\t\t\t\tans -= b[j].sum(r);\n\t\t\t\tfor(int j = l; c[l] == c[j]; j ++)\n\t\t\t\t\tans -= (f[j] <= r);\n\t\t\t\tfor(int j = r; c[r] == c[j]; j --)\n\t\t\t\t\tans -= (f[j] <= r);\n\t\t\t\t\t\n\t\t\t} else {\n\t\t\t\tfor(int j = l; j <= r; j ++)\n\t\t\t\t\tans -= (f[j] <= r);\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n    return 0;\n } \n\n```\n\n## Update \u5173\u4e8eO(n)\u7a7a\u95f4\u5206\u5757\u505a\u6cd5\n\n\u8fd8\u662f\u5f53\u521d[Juan_Feng](https://www.luogu.com.cn/user/66965)\u9e3d\u9e3d\u6559\u6211\u7684qaq\n\n\u8003\u8651\u5bf9\u8be2\u95ee\u5206\u5757\uff0c\u8003\u8651\u6bcf\u4e00\u4e2a\u5757\u7684\u8be2\u95ee\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0$r$\u53ea\u6709$\\sqrt n$\u79cd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6309\u7167$r$,\u628a$f[i]$\u7684\u503c\u5206\u6210$\\sqrt n$\u6bb5\uff0c\u7136\u540e\u8be2\u95ee\u6bcf\u4e2a\u5757\u5b8c\u6210\u540e\u91cd\u6784\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u65f6\u95f4\u548c\u4e0e\u539f\u6765\u7684\u505a\u6cd5\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u7a7a\u95f4\u5c0f\u4e86\u5f88\u591a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define MAXN 200005\n#define se set<aa>\n#define it iterator\n#define lb lowber_bound\n\nint n,m,nn,mm,sb;\nmap<int,int>p;\nint a[MAXN],f[MAXN],u[MAXN],tt[MAXN];\nint c[MAXN],d[MAXN]; \nstruct aa\n{\n    int l,r,v;\n};\nset<aa>s[MAXN];\nstruct op {\n\tint op,l,r,v;\n}opt[MAXN]; \nint mr[MAXN],srz[MAXN],ak;\n\nbool operator <(aa a,aa b) {\n    return a.r < b.r;\n}\n\nset<aa>odt;\n\nvoid fenkuai() \n{\n\tsb = sqrt(n);\n\tfor(int i = 1; i <= n+1; i ++) {\n\t\tif(i%sb == 1) {\n\t\t\tc[i] = c[i-1]+1;\n\t\t\td[i] = 1;\n\t\t} else {\n\t\t\tc[i] = c[i-1];\n\t\t\td[i] = d[i-1]+1;\n\t\t}\n\t}\n\tmm = c[n];\n}\n\nstruct kuai\n{\n    int s[355];\n\n    inline void jia(int x,int y)//sqrt(n)\n\t  {\n\t\tif(srz[x] == 0) return; \n    \tfor(int i = srz[x]; i <= mm; i ++)\n\t\t\ts[i] += y;\n\t  }\n\n    inline int sum(int x) {//O(1)\n    \treturn s[x];\n    }\n}b[355];\n\ninline int read()\n{\n    register int x = 0 , ch = getchar();\n    while( !isdigit( ch ) ) ch = getchar();\n    while( isdigit( ch ) ) x = x * 10 + ch - '0' , ch = getchar();\n    return x;\n}\n\nvoid chonggou(int x)\n{\n\tfor(int i = 1; i <= c[n]; i ++)\n\t\tmemset(b[i].s,0,sizeof(b[i].s));\n\tmemset(srz,0,sizeof(srz));\n\tak = 0;\n\tfor(int i = x; i <= m && i <= x+sb-1; i ++)  \n\tif(opt[i].op == 2){\n\t\tak ++;\n\t\tmr[ak] = opt[i].r+1;\n\t\tsrz[mr[ak]] ++;\n\t}\n\tsort(mr+1,mr+ak+1);\n\tsrz[1] ++;\n\tfor(int i = 1; i <= n; i ++)\n\t\tsrz[i] += srz[i-1];\n\tsrz[n+1] = 0;\n\tfor(int i = 1; i <= n; i ++) \n\t\tb[c[i]].s[srz[f[i]]] ++;\n\n\tfor(int i = 1; i <= mm; i ++)\n\t\tfor(int j = 2; j <= mm; j ++)\n\t\t\tb[i].s[j] += b[i].s[j-1];\n} \n\nvoid rd()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1; i <= n; i ++)\n        scanf(\"%d\",&a[i]);\n    for(int i = 1; i <= m; i ++) {\n    \topt[i].op = read();\n    \topt[i].l = read();\n    \topt[i].r = read();\n    \t\n\t\tif(opt[i].op == 1) {\n    \t\topt[i].v = read();\n\t\t}\n\t}\n    for(int i = 1; i <= n; i ++)\n    {\n    \tif(!p.count(a[i])) {\n    \t\tnn ++;\n    \t\tp[a[i]] = nn;\n    \t\ttt[nn] = a[i];\n\t\t}\n\t\ts[ p[a[i]] ].insert((aa){i,i,p[a[i]]});\n\t}\n    fenkuai();\n    for(int i = n; i >= 1; i --) {\n    \tint t = u[ p[a[i]] ];\n    \tif(t) f[i] = t;\n    \telse f[i] = n+1;\n    \tb[c[i]].jia(f[i],1);\n\t\tu[p[a[i]]] = i;\n\t}\n\tchonggou(1);\n\tfor(int i = 1; i <= n; i ++) {\n\t\todt.insert((aa){i,i,p[a[i]]});\n\t} \n\tfor(int i = 1; i <= n*2; i ++) {\n\t\ts[i].insert((aa){n+1,n+1,i}); \n\t\ts[i].insert((aa){0,0,i}); \n\t}\n} \n\nvoid split(se::it x,int i)\n{\n\tint v = x->v,l = x->l,r = x->r;\n\tif(i < l || i >= r) return; \n\t\n\ts[v].erase((aa){l,r,v});\n\ts[v].insert((aa){l,i,v});\n\ts[v].insert((aa){i+1,r,v});\n\t\n\todt.erase(x);\n\todt.insert((aa){l,i,v});\n\todt.insert((aa){i+1,r,v});\n}\n\naa qls(int v,int x) {\n\tse::it i = s[v].upper_bound((aa){0,x,0});\n\ti --;\n\treturn (*i);\n} \n\ninline void qf(int x,int y)\n{\n\tif(x == 0) return;\n\tb[c[x]].jia(f[x],-1);\n\tf[x] = y; \n\tb[c[x]].jia(f[x],1);\n} \n\nvoid dlt(int l,int r,int v)\n{\n\ts[v].erase((aa){l,r,v});\n\taa ls = qls(v,l);\n\taa rs = *s[v].lower_bound((aa){0,r,0});\n\tqf(r,r+1); \n\tqf(ls.r,rs.l);\n}\n\nvoid jlt(int l,int r,int v)\n{\n\taa ls = qls(v,l);\n\taa rs = *s[v].lower_bound((aa){0,r,0}); \n\ts[v].insert((aa){l,r,v});\n\tqf(ls.r,l);\n\tqf(r,rs.l);\n} \n\nvoid assign(int l,int r,int v)\n{\n\tse::it x = odt.lower_bound((aa){0,l-1,0});\n\tsplit(x,l-1);\n\tse::it y = odt.lower_bound((aa){0,r,0});\n\tsplit(y,r);\n\t\n\tx = odt.lower_bound((aa){0,l,0});\n\ty = odt.lower_bound((aa){0,r+1,0});\n\t\n\tfor(se::it i = x; i != y; ) {\n\t\tse::it j = i;\n\t\ti ++;\n\t\tdlt(j->l,j->r,j->v);\n\t\todt.erase(j);\n\t} \n\t\n\todt.insert((aa){l,r,v});\n\tjlt(l,r,v);\n}\n\nsigned main()\n{\n    rd();\n    for(int i = 1; i <= m; i ++)\n    {\n        int l = opt[i].l,r = opt[i].r,v = opt[i].v,op = opt[i].op;\n        if(op == 1) {\n\t\t    if(!p.count(v)) {\n\t        \tnn ++;\n\t        \tp[v] = nn;\n\t        \ttt[nn] = v;\n\t\t\t}\n\t\t\tassign(l,r,p[v]);\n\t\t} else {\n\t\t\tint ans = r-l+1;\n\t\t\tif(c[l] != c[r])\n\t\t\t{\n\t\t\t\tint t = srz[r];\n\t\t\t\tfor(int j = c[l]+1; j <= c[r]-1; j ++) \n\t\t\t\t\tans -= b[j].sum(t);\n\t\t\t\tfor(int j = l; c[l] == c[j]; j ++)\n\t\t\t\t\tans -= (f[j] <= r);\n\t\t\t\tfor(int j = r; c[r] == c[j]; j --)\n\t\t\t\t\tans -= (f[j] <= r);\n\t\t\t} else {\n\t\t\t\tfor(int j = l; j <= r; j ++)\n\t\t\t\t\tans -= (f[j] <= r);\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\n\t\tif((i%sb) == 0) {\n\t\t\tchonggou(i+1);\n\t\t}\n\t}\n    return 0;\n } \n\n```\n",
        "postTime": 1567428731,
        "uid": 124721,
        "name": "Ynoi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "# Ynoi2016 \u955c\u4e2d\u7684\u6606\u866b\r\n\r\n**\u7531\u4e8e\u672c\u9898\u7a7a\u95f4\u8303\u56f4\u4fee\u6539\uff0c\u8be5\u9898\u89e3\u76ee\u524d\u65e0\u6cd5\u901a\u8fc7\uff0c\u4f46\u505a\u6cd5\u4e3a\u6b63\u89e3\u7684\u4e8c\u7ef4\u6570\u70b9\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002**\r\n\r\n\uff08\u5176\u5b9e\u8fd9\u9053\u5728Ynoi\u4e2d\u8fd8\u7b97\u7b80\u5355\uff09\r\n\r\n\u9996\u5148\uff0c\u533a\u95f4\u67d3\u8272\uff0c\u60f3\u5230\u73c2\u6735\u8389\u6811\u3002\u4f46\u663e\u7136\u8fd9\u9898\u6570\u636e\u4e0d\u53ef\u80fd\u968f\u673a\u3002\r\n\r\n\u63a5\u7740\u6211\u4eec\u6765\u601d\u8003\uff1a\u5728\u65e0\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\uff08\u4e5f\u5c31\u662f[HH\u7684\u9879\u94fe](https://www.luogu.com.cn/problem/P1972)\uff09\u6211\u4eec\u662f\u4f7f\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u524d\u9a71\u7684\u3002\r\n\r\n\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u89e3\u6cd5\u5c31\u662f\u7efc\u5408\u8fd9\u4e24\u79cd\u601d\u60f3\uff1a\r\n\r\n\r\n\r\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u989c\u8272\uff0c\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u79cd\u989c\u8272\u8bb0\u5f55\u4e00\u6b21\u3002\r\n\r\n\u5728\u9759\u6001\u4e2d\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u7ef4\u62a4\u524d\u9a71\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u5728\u52a8\u6001\u4e2d\uff0c\u6211\u4eec\u540c\u6837\u7ef4\u62a4\u524d\u9a71\u3002\r\n\r\n\u8bb0\u4e00\u4e2a\u70b9\u5de6\u4fa7\u6700\u9760\u53f3\u4e14\u4e0e\u4e4b\u989c\u8272\u76f8\u540c\u7684\u70b9\u4e3a $pre$\uff0c\u82e5\u65e0\u5219\u4e3a $0$\uff0c\r\n\r\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1 $i\\in[l,r]$ \u4e14 $pre_i\\in[0,l)$ \u7684\u70b9\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u70b9\u662f\u8fd9\u4e2a\u533a\u95f4\u4e2d\u8fd9\u4e2a\u989c\u8272\u7684\u70b9\u4e2d\u6700\u9760\u5de6\u7684\u90a3\u4e00\u4e2a\u3002\r\n\r\n(\u8fd9\u662f\u4e2a\u5f88\u663e\u7136\u7684\u4e8b\u5b9e\uff0c\u56e0\u4e3a\u5982\u679c\u8fd9\u4e2a\u70b9\u7684 $pre_i\\le l$ \u90a3\u4e48 $pre_i$ \u8fd9\u4e00\u4e2a\u70b9\u4e5f\u5c5e\u4e8e $[l,r]$ \u4e14\u4e0e\u4e4b\u540c\u8272\uff0c\u5e76\u4e14\u66f4\u9760\u5de6)\r\n\r\n\u5c06\u70b9\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u4e00\u7ef4\uff0c\u524d\u9a71\u4f5c\u4e3a\u53e6\u4e00\u7ef4\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u5957\u6743\u503c\u6811\u7ef4\u62a4\u3002\r\n\r\n\u5728\u4fee\u6539\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7528\u73c2\u6735\u8389\u6811\u7684\u601d\u60f3\uff0c\u7528 set \u5c06\u540c\u8272\u7684\u70b9\u7ed3\u5408\u6210\u4e00\u4e2a\u6bb5\uff0c\u663e\u7136\uff0c\u4e00\u4e2a\u6bb5\u5185\u7684\u70b9\u51fa\u4e86\u6700\u5de6\u4fa7\u7684\u4e4b\u5916\u524d\u9a71\u5747\u4e3a $i-1$\u3002\r\n\r\n\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c06\u5de6\u53f3\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u6bb5\u62c6\u5206\uff0c\u7136\u540e\u66b4\u529b\u53d6\u51fa\u4e2d\u95f4\u7684\u6bb5\u4fee\u6539\u5e76\u5c06\u4e4b\u5408\u5e76\u4e3a\u4e00\u4e2a\u6bb5\u3002\r\n\r\n\u91c7\u7528\u644a\u8fd8\u6cd5\uff0cset \u5185\u521d\u59cb\u6709 $n$ \u4e2a\u6bb5\uff0c\u4fee\u6539\u65f6\u4ea7\u751f\u7684\u6bb5\u4e2a\u6570\u53ef\u4ee5\u770b\u6210 $\\operatorname{O}(m)$ \uff08\u5de6\u53f3\u7aef\u70b9\u65ad\u5f00\u540e\u65b0\u589e\u7684\u6bb5\uff09\uff0c\r\n\r\n\u90a3\u4e48\u4fee\u6539\u6b21\u6570\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u770b\u6210\u5747\u644a\u7684 $\\operatorname{O}(n+m)=\\operatorname{O}(n)$ \uff08$n,m$ \u540c\u9636\uff09\uff0c\u5355\u6b21\u4fee\u6539\u590d\u6742\u5ea6 $\\operatorname{O}(\\log^2 n)$\uff0c\u603b\u590d\u6742\u5ea6 $\\operatorname{O}(n\\log^2 n)$\u3002\r\n\r\n\u5728\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\u6709\u51e0\u4e2a\u5c0f\u7ec6\u8282\u3002\u7b2c\u4e00\u4e2a\u662f\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u4e0b\u6807\u8981\u4ece $0$ \u5f00\u59cb\uff0c\r\n\r\n\u7b2c\u4e8c\u4e2a\u662f\u6211\u4eec\u5728\u7ef4\u62a4\u5168\u5c40 set \u7684\u540c\u65f6\u4e5f\u5bf9\u6bcf\u4e2a\u989c\u8272\u5404\u5f00\u4e00\u4e2a set \u4e00\u8d77\u64cd\u4f5c\uff0c\u8fd9\u6837\u4f1a\u66f4\u65b9\u4fbf\u3002\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\ninline int read(){\r\n\tregister int x=0;\r\n\tregister bool f=0;\r\n\tregister char c=getchar();\r\n\twhile(c<'0'||c>'9'){\r\n\t\tif(c=='-') f=1;\r\n\t\tc=getchar();\r\n\t}\r\n\twhile(c>='0'&&c<='9'){\r\n\t\tx=(x<<3)+(x<<1)+c-48;\r\n\t\tc=getchar();\r\n\t}\r\n\treturn f?-x:x;\r\n}\r\nvoid write(int x){\r\n    if(x<0) putchar('-'), x=-x;\r\n    if(x>=10) write(x/10);\r\n    putchar('0'+x%10);\r\n}\r\nconst int maxn=400005;\r\nint len=0;\r\nconst int inf=2147483647;\r\nstruct node{\r\n\tint l,r,x;\r\n\t//node():l(0),r(0),x(0){}\r\n\tfriend bool operator <(node a,node b){\r\n\t\treturn a.l<b.l;\r\n\t}\r\n}tp;\r\nstruct seg{\r\n\tint v,ls,rs;\r\n}t[maxn*50];\r\nint rt[maxn],n,m,tot,tem[maxn],tmp[maxn],cnt,num;\r\nint lsh[maxn<<1],a[maxn],pre[maxn];\r\nstruct cz{\r\n\tint a,b,c,d;\r\n}q[maxn];\r\nset<node> s[maxn],al;\r\nset<int> now;\r\nset<node>:: iterator it;\r\nset<int>:: iterator _it;\r\nint lb(int x){\r\n\treturn x&(-x);\r\n}\r\nvoid pushup(int o){\r\n\tt[o].v=t[t[o].ls].v+t[t[o].rs].v;\r\n}\r\nvoid change(int &o,int l,int r,int k,int v){\r\n\tif(!o) o=++tot;\r\n\tif(l==r){\r\n\t\tt[o].v+=v;\r\n\t\treturn ;\r\n\t}\r\n\tint mid=l+r>>1;\r\n\tif(k<=mid) change(t[o].ls,l,mid,k,v);\r\n\telse change(t[o].rs,mid+1,r,k,v);\r\n\tpushup(o);\r\n}\r\nvoid add(int o,int v){\r\n\tfor(int i=o;i<=n;i+=lb(i)) change(rt[i],0,n,pre[o],v);\r\n}\r\nint query(int l,int r,int k){\r\n\tif(l==r) {\r\n\t\treturn 0;\r\n\t}\r\n\tint mid=l+r>>1,sum=0;\r\n\tif(k<=mid){\r\n\t\tfor(int i=1;i<=cnt;i++) tem[i]=t[tem[i]].ls;\r\n\t\tfor(int i=1;i<=num;i++) tmp[i]=t[tmp[i]].ls;\r\n\t\treturn query(l,mid,k);\r\n\t}\r\n\telse{\r\n\t\tfor(int i=1;i<=cnt;i++) sum+=t[t[tem[i]].ls].v,tem[i]=t[tem[i]].rs;\r\n\t\tfor(int i=1;i<=num;i++) sum-=t[t[tmp[i]].ls].v,tmp[i]=t[tmp[i]].rs;\r\n\t\treturn sum+query(mid+1,r,k);\r\n\t}\r\n}\r\nint find(int l,int r,int k){\r\n\tcnt=num=0;\r\n\tfor(int i=r;i;i-=lb(i)){\r\n\t\ttem[++cnt]=rt[i];\r\n\t}\r\n\tfor(int i=l-1;i;i-=lb(i)){\r\n\t\ttmp[++num]=rt[i];\r\n\t}\r\n\treturn query(0,n,k);\r\n}\r\nvoid split(int x){\r\n\ttp=(node){x,0,0};\r\n\tit=al.upper_bound(tp);--it;\r\n\tif(it->l==x) return;\r\n\ttp=*it;\r\n\tal.erase(tp);s[tp.x].erase(tp);\r\n\tnode tp1=(node){tp.l,x-1,tp.x};\r\n\tnode tp2=(node){x,tp.r,tp.x};\r\n\tal.insert(tp1);al.insert(tp2);\r\n\ts[tp.x].insert(tp1);\r\n\ts[tp.x].insert(tp2);\r\n}\r\nvoid update(int l,int r,int x){\r\n\tif(l!=1) split(l);\r\n\tif(r+1<=n) split(r+1);\r\n\tnow.insert(x);\r\n\ttp=(node){l,0,0};\r\n\tit=al.lower_bound(tp);\r\n\twhile(it->l!=r+1){\r\n\t\ttp=*it;now.insert(tp.x);\r\n\t\tif(tp.l>l&&pre[tp.l]!=tp.l-1){\r\n            add(tp.l,-1);\r\n            pre[tp.l]=tp.l-1;\r\n            add(tp.l,1);\r\n        }\r\n        al.erase(tp);s[tp.x].erase(tp);\r\n\t\ttp=(node){l,0,0};\r\n\t\tit=al.lower_bound(tp);\r\n\t\tif(it==al.end()) break;\r\n\t}\r\n\ttp=(node){l,0,0};\r\n\tit=s[x].lower_bound(tp);--it;\r\n\tadd(l,-1);pre[l]=it->r;add(l,1);\r\n\ttp=(node){l,r,x};\r\n\tal.insert(tp);s[x].insert(tp);\r\n\tfor(_it=now.begin();_it!=now.end();++_it){\r\n\t\ttp=(node){r,0,0};\r\n\t\tit=s[*_it].upper_bound(tp);\r\n\t\tif(it!=s[*_it].end()){\r\n\t\t\tl=it->l;\r\n\t\t\ttp=(node){l,0,0};\r\n\t\t\tit=s[*_it].lower_bound(tp);--it;\r\n\t\t\tadd(l,-1);pre[l]=it->r;add(l,1);\r\n\t\t}\r\n\t}\r\n\tnow.clear();\r\n}\r\nsigned main(){\r\n\tn=read();m=read();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\ta[i]=read();lsh[++len]=a[i];\r\n\t}\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tq[i].a=read();q[i].b=read();q[i].c=read();\r\n\t\tif(q[i].a==1){\r\n\t\t\tq[i].d=read();\r\n\t\t\tlsh[++len]=q[i].d;\r\n\t\t}\r\n\t}\r\n\tsort(lsh+1,lsh+len+1);\r\n\tlen=unique(lsh+1,lsh+len+1)-lsh-1;\r\n\ttp=(node){0,0,0};\r\n\tfor(int i=1;i<=len;i++)s[i].insert(tp);\r\n\tfor(int i=1;i<=n;i++){\r\n\t\ta[i]=lower_bound(lsh+1,lsh+1+len,a[i])-lsh;\r\n\t\tit=s[a[i]].end();it--;pre[i]=it->l;\r\n\t\tadd(i,1);\r\n\t\ttp=(node){i,i,a[i]};\r\n\t\tal.insert(tp);s[a[i]].insert(tp);\r\n\t}\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tif(q[i].a==1){\r\n\t\t\tq[i].d=lower_bound(lsh+1,lsh+len+1,q[i].d)-lsh;\r\n\t\t\tupdate(q[i].b,q[i].c,q[i].d);\r\n\t\t}\r\n\t\telse{\r\n\t\t\twrite(find(q[i].b,q[i].c,q[i].b));\r\n\t\t\tputs(\"\");\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1580826341,
        "uid": 120074,
        "name": "BFqwq",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "\u597d\u9898\u3002\u4e0d\u8fc7\u4e22 Yn \u91cc\u6709\u70b9\u6c34\u4e86\u3002\n\n\u5199\u4e86\u4e09\uff08\u56db\uff1f\uff09\u5929\u7ec8\u4e8e\u8fc7\u4e86\uff0c\u5199\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n------------\n\u9996\u5148\u8003\u8651\u5355\u70b9\u4fee\u6539\u533a\u95f4\u6570\u989c\u8272\u548b\u505a\u3002\n\n~~\u5565\uff1f\u4f60\u8bf4\u5e26\u4fee\u83ab\u961f\uff1f$O(n^\\frac53)$ \u7684\u590d\u6742\u5ea6\uff0c\u8fc7\u4e86\u8fd9\u9898\u6211\u8bf7\u4f60\u5403\u7cd6\u3002~~\n\n\u6b63\u786e\u59ff\u52bf\u5927\u6982\u662f\u5e26\u4fee\u83ab\u961f\u6a21\u677f\u9898\u91cc xzz \u795e\u4ed9\u90a3\u4e2a\u9898\u89e3\uff0c\u6bcf\u6b21\u4fee\u6539\u7684\u65f6\u5019\u628a\u4fee\u6539\u9700\u8981\u4fee\u6539\u7684\u524d\u9a71\u3002\u7136\u540e\u67e5\u8be2 $[l,r]$ \u5c31\u662f $[l,r]$ \u91cc\u6709\u591a\u5c11\u4e2a\u70b9\u7684\u524d\u9a71\u662f\u5c0f\u4e8e $l$ \u7684\u3002\u6811\u5957\u6811\u7ef4\u62a4\u3002\n\n\u7136\u540e\u533a\u95f4\u8d4b\u503c\u5c31\u53ef\u4ee5\u731c\u4e00\u4e2a\u5f88\u663e\u7136\u5e76\u4e14\u5f88\u5e38\u89c1\uff08\uff1f\uff09\u7684\u6027\u8d28\uff1a\u6240\u6709\u70b9\u7684\u524d\u9a71\u7684\u6539\u53d8\u6b21\u6570\u4e4b\u548c\u4e3a $O(n)$\u3002\n\n\u7528\u73c2\u6735\u8389\u6811\u7684\u601d\u60f3\uff0c~~\u8bfb\u8005\u81ea\u8bc1\u4e0d\u96be~~\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5efa\u73c2\u6735\u8389\u6811\uff0c\u548c\u6bcf\u79cd\u989c\u8272\u7684\u73c2\u6735\u8389\u6811\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\n\n\u8981\u662f\u4f60\u75af\u72c2\u5206\u7c7b\u8ba8\u8bba\u4f60\u591a\u534a\u662f\u8c03\u4e0d\u51fa\u6765\u7684~~\u8c03\u51fa\u6765\u6211\u4e5f\u8bf7\u4f60\u5403\u7cd6~~\uff0c\u6b63\u786e\u59ff\u52bf\u662f\u628a\u6240\u6709\u9700\u8981\u4fee\u6539\u7684\u70b9\u5b58\u4e0b\u6765\uff0c\u6700\u540e\u4e00\u4e2a\u4e2a\u770b\u8981\u6539\u6210\u4ec0\u4e48\u3002\n\n\u6240\u6709\u9700\u8981\u4fee\u6539\u7684\u70b9\u6709\uff1a\u73c2\u6735\u8389\u6811\u6240\u6709\u88ab\u5220\u6389\u7684\u70b9\u7684\u5de6\u7aef\u70b9\uff0c\u8fd9\u4e9b\u70b9\u5728\u5b83\u4eec\u7684\u989c\u8272\u91cc\u7684\u540e\u7ee7\u7684\u5de6\u7aef\u70b9\uff0c\u63d2\u5165\u7684\u6bb5\u5728\u81ea\u5df1\u989c\u8272\u91cc\u7684\u540e\u7ee7\u7684\u5de6\u7aef\u70b9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e0a\u6811\u5957\u6811\u4e86\u3002\n```cpp\n#include<set>\n#include<map>\n#include<vector>\n#include<cstdlib>\n#include<ctime>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n\twhile(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=1e5+5;\nint n,m;\nstruct odt_node{\n\tint l,r,v;\n\todt_node(int l,int r,int v):l(l),r(r),v(v){}\n\tbool operator <(odt_node b)const{\n\t\treturn r<b.r;\n\t}\n};\nset<odt_node> s,s2[maxn*2];\ntypedef set<odt_node>::iterator iter;\niter split(set<odt_node>& s,int x){\n\titer it=s.lower_bound(odt_node(x,x,0));\n\tif(it==s.end()||it->l>x) return it;\n\todt_node res=*it;\n\ts.erase(res);\n\tif(x>res.l) s.insert(odt_node(res.l,x-1,res.v));\n\treturn (s.insert(odt_node(x,res.r,res.v))).first;\n}\nint lst[maxn],pre[maxn];\nstruct treap_node{\n\tint v,s,r;\n\ttreap_node* ch[2];\n\ttreap_node(int x):v(x),s(1),r(rand()){\n\t\tch[0]=ch[1]=0;\n\t}\n\tinline void pushup(){\n\t\ts=1;\n\t\tif(ch[0]) s+=ch[0]->s;\n\t\tif(ch[1]) s+=ch[1]->s;\n\t}\n\tint rank(int x){\n\t\tif(x<=v){\n\t\t\tif(ch[0]) return ch[0]->rank(x);\n\t\t\telse return 0;\n\t\t}\n\t\telse{\n\t\t\tif(ch[0]){\n\t\t\t\tif(ch[1]) return ch[0]->s+1+ch[1]->rank(x);\n\t\t\t\telse return ch[0]->s+1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(ch[1]) return 1+ch[1]->rank(x);\n\t\t\t\telse return 1;\n\t\t\t}\n\t\t}\n\t}\n};\ntreap_node* merge(treap_node* l,treap_node* r){\n\tif(!l) return r;\n\tif(!r) return l;\n\tif(l->r>r->r){\n\t\tr->ch[0]=merge(l,r->ch[0]);\n\t\tr->pushup();\n\t\treturn r;\n\t}\n\telse{\n\t\tl->ch[1]=merge(l->ch[1],r);\n\t\tl->pushup();\n\t\treturn l;\n\t}\n}\nvoid split(treap_node* o,int x,treap_node*& l,treap_node*& r){\n\tif(!o){\n\t\tl=r=0;\n\t\treturn;\n\t}\n\tif(x>=o->v){\n\t\tsplit(o->ch[1],x,o->ch[1],r);\n\t\to->pushup();\n\t\tl=o;\n\t}\n\telse{\n\t\tsplit(o->ch[0],x,l,o->ch[0]);\n\t\to->pushup();\n\t\tr=o;\n\t}\n}\nstruct treap{\n\ttreap_node* rt;\n\ttreap():rt(0){}\n\tvoid insert(int x){\n\t\ttreap_node *l,*r;\n\t\tsplit(rt,x,l,r);\n\t\trt=merge(merge(l,new treap_node(x)),r);\n\t}\n\tvoid remove(int x){\n\t\ttreap_node *l,*mid,*r;\n\t\tsplit(rt,x,mid,r);\n\t\tsplit(mid,x-1,l,mid);\n\t\trt=merge(merge(l,merge(mid->ch[0],mid->ch[1])),r);\n\t\tdelete mid;\n\t}\n\tint rank(int x){\n\t\tif(!rt) return 0;\n\t\treturn rt->rank(x);\n\t}\n};\ntreap c[maxn];\ninline int lowbit(int x){\n\treturn x&-x;\n}\nvoid insert(int x,int k){\n\twhile(x<=n){\n\t\tc[x].insert(k);\n\t\tx+=lowbit(x);\n\t}\n}\nvoid remove(int x,int k){\n\twhile(x<=n){\n\t\tc[x].remove(k);\n\t\tx+=lowbit(x);\n\t}\n}\nint query(int x,int k){\n\tint ans=0;\n\twhile(x>0){\n\t\tans+=c[x].rank(k);\n\t\tx-=lowbit(x);\n\t}\n\treturn ans;\n}\nint get_pre(int x){\n\titer it=s.lower_bound(odt_node(x,x,0));\n\tit=s2[it->v].lower_bound(odt_node(x,x,0));\n\tif(it->l!=x) return x-1;\n\telse{\n\t\tif(it==s2[it->v].begin()) return 0;\n\t\telse return (--it)->r;\n\t}\n}\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    srand(time(0)*20060122);\n    n=readint();\n    m=readint();\n    map<int,int> mp;\n    for(int i=1;i<=n;i++){\n    \tint a=readint();\n    \tif(!mp.count(a)) mp[a]=mp.size();\n    \ta=mp[a];\n    \ts.insert(odt_node(i,i,a));\n    \ts2[a].insert(odt_node(i,i,a));\n    \tpre[i]=lst[a];\n    \tlst[a]=i;\n    \tinsert(i,pre[i]);\n\t}\n\twhile(m--){\n\t\tint opt=readint();\n\t\tif(opt==1){\n\t\t\tint l,r,x;\n\t\t\tl=readint();\n\t\t\tr=readint();\n\t\t\tx=readint();\n\t\t\tif(!mp.count(x)) mp[x]=mp.size();\n\t\t\tx=mp[x];\n\t\t\titer itl,itr;\n\t\t\titr=split(s,r+1);\n\t\t\titl=split(s,l);\n\t\t\titr--;\n\t\t\tsplit(s2[itr->v],r+1);\n\t\t\tsplit(s2[itl->v],l);\n\t\t\titr++;\n\t\t\tvector<int> res;\n\t\t\tfor(iter i=itl;i!=itr;i++){\n\t\t\t\tres.push_back(i->l);\n\t\t\t\titer it=s2[i->v].upper_bound(*i);\n\t\t\t\tif(it!=s2[i->v].end()) res.push_back(it->l);\n\t\t\t}\n\t\t\tfor(iter i=itl;i!=itr;i++) s2[i->v].erase(*i);\n\t\t\ts.erase(itl,itr);\n\t\t\ts.insert(odt_node(l,r,x));\n\t\t\ts2[x].insert(odt_node(l,r,x));\n\t\t\titer it=s2[x].upper_bound(odt_node(l,r,x));\n\t\t\tif(it!=s2[x].end()) res.push_back(it->l);\n\t\t\tfor(int i=0;i<(int)res.size();i++){\n\t\t\t\tint x=res[i];\n\t\t\t\tremove(x,pre[x]);\n\t\t\t\tinsert(x,pre[x]=get_pre(x));\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint l,r;\n\t\t\tl=readint();\n\t\t\tr=readint();\n\t\t\tprintf(\"%d\\n\",query(r,l)-query(l-1,l));\n\t\t}\n\t}\n    return 0;\n}\n```\n\u5c31\u53ef\u4ee5\u4e86\u2026\u2026\u5417\uff1f\n\n\u7531\u4e8e\u8981\u5361\u5206\u5757\uff0c\u6240\u4ee5\u5927\u6bd2\u7624\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u628a\u6811\u5957\u6811\u4e00\u4e2a log \u7684\u7a7a\u95f4\u4e5f\u7ed9\u5361\u6389\u4e86\u2026\u2026\n\n~~\u5e76\u4e14\u5bf9\u6211\u4e0d\u8010\u70e6\u4e4b\u540e\u5927\u6bd2\u7624\u8fd8\u53eb\u6211\u53bb\u9020 5e5 \u7684\u6570\u636e\uff0c\u6211\u5c31\u7b97\u771f\u80fd\u9020\u51fa\u6765\u4e5f\u81f3\u5c11\u5f97\u4e00\u4e2a\u6708\u4e86\u3002~~\n\n\u6240\u4ee5\u6211\u4eec\u8981\u627e\u4e00\u79cd\u7ebf\u6027\u7a7a\u95f4\u7684\u4e1c\u897f\u6765\u505a\u8fd9\u9898\u3002\n\n\u6211\u4eec\u628a $(i,pre_i)$\uff08$pre_i$ \u4ee3\u8868 $i$ \u7684\u524d\u7f00\uff09\u770b\u6210\u662f\u4e00\u4e2a\u70b9\uff0c\u5219\u67e5\u8be2\u5c31\u662f\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u4fee\u6539\u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u70b9\u518d\u5220\u9664\u4e00\u4e2a\u70b9\u2026\u2026\n\n\u504f\u5e8f\u95ee\u9898\uff1f\u90a3\u53ef\u4e0d\u53ef\u4ee5\u79bb\u7ebf\u4e0b\u6765\u4e0a cdq \u5206\u6cbb\u5462\uff1f\n\n\u8fd9\u91cc\u8bb2\u4e00\u4e0b cdq \u5206\u6cbb\u600e\u4e48\u53bb\u505a\u5e26\u4fee\u4e8c\u7ef4\u504f\u5e8f\u3002\n\n\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u628a\u65f6\u95f4\u4e5f\u770b\u4f5c\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u4fee\u6539\u548c\u63d2\u5165\u5220\u9664\u90fd\u770b\u6210\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u4e09\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u76f4\u63a5\u4e0a cdq \u5373\u53ef\u3002\n\n\u7136\u540e\u4f60\u5c31\u88ab\u5361\u5e38\u4e86\u2026\u2026\n\n\u5f88\u7b80\u5355\uff0ccdq \u6539\u6210\u5f52\u5e76\u6392\u5e8f\uff0c\u52a0\u4e2a\u706b\u8f66\u5934\uff0c\u5c31\u80fd\u8fc7\u4e86\u3002\n```cpp\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n    int x=0;\n    bool f=0;\n    char c=getchar();\n    while(!isdigit(c)&&c!='-') c=getchar();\n    if(c=='-'){\n        f=1;\n        c=getchar();\n    }\n\twhile(isdigit(c)){\n        x=x*10+c-'0';\n        c=getchar();\n    }\n    return f?-x:x;\n}\nconst int maxn=1e5+5;\nint n,m;\nstruct node{\n\tint l,r,v;\n\tnode(int l,int r,int v):l(l),r(r),v(v){}\n\tbool operator <(node b)const{\n\t\treturn r<b.r;\n\t}\n};\nset<node> s,s2[maxn*2];\ntypedef set<node>::iterator iter;\niter split(set<node>& s,int x){\n\titer it=s.lower_bound(node(x,x,0));\n\tif(it==s.end()||it->l>x) return it;\n\tnode res=*it;\n\ts.erase(res);\n\tif(x>res.l) s.insert(node(res.l,x-1,res.v));\n\treturn (s.insert(node(x,res.r,res.v))).first;\n}\nint lst[maxn],pre[maxn];\nint get_pre(int x){\n\titer it=s.lower_bound(node(x,x,0));\n\tit=s2[it->v].lower_bound(node(x,x,0));\n\tif(it->l!=x) return x-1;\n\telse{\n\t\tif(it==s2[it->v].begin()) return 0;\n\t\telse return (--it)->r;\n\t}\n}\nstruct point{\n\tint x,y,w,id;\n\tbool flag;\n\tpoint(int x,int y,int w,int id,bool flag)\n\t:x(x),y(y),w(w),id(id),flag(flag){}\n};\nvector<point> p;\nint ans[maxn];\nint ord[maxn*11];\nint c[maxn];\ninline int lowbit(int x){\n\treturn x&-x;\n}\nvoid modify(int x,int k){\n\twhile(x<=n+1){\n\t\tc[x]+=k;\n\t\tx+=lowbit(x);\n\t}\n}\nint query(int x){\n\tint s=0;\n\twhile(x>0){\n\t\ts+=c[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn s;\n}\nvoid solve(int l,int r){\n\tif(l==r){\n\t\tord[r]=r;\n\t\treturn;\n\t}\n\tint mid=l+(r-l)/2;\n\tsolve(l,mid);\n\tsolve(mid+1,r);\n\tint cur=l;\n\tvector<int> res;\n\tfor(int i=mid+1;i<=r;i++){\n\t\twhile(cur<=mid&&p[ord[cur]].x<=p[ord[i]].x){\n\t\t\tmodify(p[ord[cur]].y+1,p[ord[cur]].w);\n\t\t\tres.push_back(ord[cur]);\n\t\t\tcur++;\n\t\t}\n\t\tif(p[ord[i]].id>=0){\n\t\t\tint res=query(p[ord[i]].y+1);\n\t\t\tif(p[ord[i]].flag) ans[p[ord[i]].id]+=res;\n\t\t\telse ans[p[ord[i]].id]-=res;\n\t\t}\n\t\tres.push_back(ord[i]);\n\t}\n\tfor(int i=l;i<cur;i++) modify(p[ord[i]].y+1,-p[ord[i]].w);\n\tfor(int i=cur;i<=mid;i++) res.push_back(ord[i]);\n\tfor(int i=l;i<=r;i++) ord[i]=res[i-l];\n}\nint main(){\n    #ifdef LOCAL\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    n=readint();\n    m=readint();\n    map<int,int> mp;\n    for(int i=1;i<=n;i++){\n    \tint a=readint();\n    \tif(!mp.count(a)) mp[a]=mp.size();\n    \ta=mp[a];\n    \ts.insert(node(i,i,a));\n    \ts2[a].insert(node(i,i,a));\n    \tpre[i]=lst[a];\n    \tlst[a]=i;\n    \tp.push_back(point(i,pre[i],1,-1,0));\n\t}\n\tint cnt=0;\n\twhile(m--){\n\t\tint opt=readint();\n\t\tif(opt==1){\n\t\t\tint l,r,x;\n\t\t\tl=readint();\n\t\t\tr=readint();\n\t\t\tx=readint();\n\t\t\tif(!mp.count(x)) mp[x]=mp.size();\n\t\t\tx=mp[x];\n\t\t\titer itl,itr;\n\t\t\titr=split(s,r+1);\n\t\t\titl=split(s,l);\n\t\t\titr--;\n\t\t\tsplit(s2[itr->v],r+1);\n\t\t\tsplit(s2[itl->v],l);\n\t\t\titr++;\n\t\t\tvector<int> res;\n\t\t\tfor(iter i=itl;i!=itr;i++){\n\t\t\t\tres.push_back(i->l);\n\t\t\t\titer it=s2[i->v].upper_bound(*i);\n\t\t\t\tif(it!=s2[i->v].end()) res.push_back(it->l);\n\t\t\t}\n\t\t\tfor(iter i=itl;i!=itr;i++) s2[i->v].erase(*i);\n\t\t\ts.erase(itl,itr);\n\t\t\ts.insert(node(l,r,x));\n\t\t\ts2[x].insert(node(l,r,x));\n\t\t\titer it=s2[x].upper_bound(node(l,r,x));\n\t\t\tif(it!=s2[x].end()) res.push_back(it->l);\n\t\t\tfor(int i=0;i<(int)res.size();i++){\n\t\t\t\tint x=res[i];\n\t\t\t\tp.push_back(point(x,pre[x],-1,-1,0));\n\t\t\t\tp.push_back(point(x,pre[x]=get_pre(x),1,-1,0));\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint l,r;\n\t\t\tl=readint();\n\t\t\tr=readint();\n\t\t\tp.push_back(point(r,l-1,0,cnt,1));\n\t\t\tp.push_back(point(l-1,l-1,0,cnt,0));\n\t\t\tcnt++;\n\t\t}\n\t}\n\tsolve(0,p.size()-1);\n\tfor(int i=0;i<cnt;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1586524090,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "[$\\tt Link$](/problem/P4690)\n\n\u9898\u610f\uff1a\u533a\u95f4\u63a8\u5e73\uff0c\u533a\u95f4\u6570\u989c\u8272\n\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6e05\u65b0\u7684\u5206\u5757\u505a\u6cd5\u3002\n\n\u6211\u4eec\u4ece\u5f31\u5316\u7248\u5f00\u59cb\u8c08\u8d77\u3002\n\n## 1. \u533a\u95f4\u6570\u989c\u8272\n\n$a_i\\le10^9$\uff0c\u4f60\u9996\u5148\u5f97\u60f3\u79bb\u6563\u5316\u5427\u3002\u8003\u8651\u4e00\u79cd\u65b9\u4fbf\u7684\u5199\u6cd5\uff0c\u5373\u76f4\u63a5\u4f7f\u7528 `map` \u7ef4\u62a4\u6bcf\u4e2a\u503c\u7684\u79bb\u6563\u5316\u540e\u7684\u7ed3\u679c\u3002\u5982\u679c\u8fd9\u4e2a\u503c\u7b2c\u4e00\u6b21\u51fa\u73b0\u5c31\u7ed9\u5b83\u653e\u4e0a\u4e00\u4e2a\u65b0\u7684\u79bb\u6563\u503c\u3002\n\n\u8003\u8651\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684 **\u4e0a\u4e00\u4e2a\u4e0e\u5176\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e**\uff0c\u8bb0\u4e3a $pre_i$\u3002\u5355\u6b21\u8be2\u95ee $l,r$\uff0c\u5c31\u7b49\u4ef7\u4e8e\u6c42\u533a\u95f4 $[l,r]$ \u4e2d\u6709\u591a\u5c11 $i$ \u4f7f\u5f97 $pre_i\\lt l$\u3002\u95ee\u9898\u8f6c\u5316\u4e3a **\u6c42\u533a\u95f4\u5c0f\u4e8e $x$ \u7684\u6570\u7684\u4e2a\u6570**\u3002\n\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u5927\u663e\u795e\u901a\u4e86\u3002\u4f60\u53ef\u4ee5\u76f4\u63a5\u4e3b\u5e2d\u6811\uff0c\u4e5f\u53ef\u4ee5\u79bb\u7ebf\u540e\u4e0a\u503c\u57df\u6811\u72b6\u6570\u7ec4\u3002\n\n## 2. \u5355\u70b9\u4fee\u6539\u533a\u95f4\u6570\u989c\u8272\n\n~~\u5e26\u4fee\u83ab\u961f\uff1f$\\sout{O(n^{\\frac 53})}$ \u7684\u590d\u6742\u5ea6\uff0c\u60a8\u60f3\u60f3\u8fd8\u662f\u7b97\u4e86\u5427~~\u3002\n\n\u8003\u8651\u5728\u7b2c\u4e00\u95ee\u7684\u89e3\u6cd5\u4e0a\u4fee\u6539\u3002\u6211\u4eec\u7ef4\u62a4 $nxt_i$ \u4ee3\u8868 **\u4e0b\u4e00\u4e2a\u4e0e\u5176\u76f8\u540c\u989c\u8272\u7684\u4f4d\u7f6e**\u3002\u60f3\u60f3 $i$ \u4f4d\u7f6e\u7684\u6539\u53d8\u4f1a\u5f71\u54cd\u54ea\u4e9b\u4f4d\u7f6e\u3002$pre_i$ \u663e\u7136\u4f1a\u88ab\u6539\u53d8\uff0c$pre_{nxt_i}$ \u53d8\u6210 $pre_i$\u3002\n\n\u4f46\u662f\u2026\u600e\u4e48\u8ba1\u7b97\u66f4\u6539\u540e\u7684 $pre_i$ \u5462\uff1f\u8003\u8651\u7ef4\u62a4 $n+m$ \u4e2a `set`\uff0c\u8bb0\u5f55\u6bcf\u79cd\u989c\u8272\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u4fee\u6539\u66b4\u529b \u5728 `set` \u91cc\u9762 `insert()/erase()`\uff0c\u7136\u540e\u4f7f\u7528 `lower_bound` \u6765\u8ba1\u7b97\u66f4\u6539\u540e\u7684 $pre_i$\u3002\n\n\u56e0\u4e3a\u8981\u4fee\u6539\uff0c\u90a3\u4e48\u4e3b\u5e2d\u6811\u4e0d\u884c\u4e86\uff0c\u53ef\u4ee5\u8003\u8651 CDQ/\u6811\u5957\u6811\u3002\n\n## 3. \u533a\u95f4\u4fee\u6539\u533a\u95f4\u6570\u989c\u8272\n\n\u4e4d\u4e00\u770b\uff0c\u76f4\u63a5\u5f03\u6389\uff0c\u8fd9\u4e2a\u4e1c\u897f\u6ca1\u6cd5\u505a\u4e86\u3002\n\n\u4f46\u662f\u4f60\u6ce8\u610f\u5230\u4e00\u4e2a\u6027\u8d28\uff1a\u5982\u679c\u672c\u6765\u6709\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u989c\u8272\u76f8\u540c\uff0c\u6211\u4eec\u8981\u628a\u5b83\u6574\u4f53\u6539\u6210\u53e6\u4e00\u4e2a\u989c\u8272\uff0c\u90a3\u4e48\u53ea\u6709 $prv_l$ \u4f1a\u53d1\u751f\u6539\u53d8\uff08\u540c\u6837\u8981\u53d8\u7684\u8fd8\u6709\u8fd9\u4e2a\u533a\u95f4\u53f3\u7aef\u7b2c\u4e00\u4e2a\u540c\u8272\u70b9\uff09\uff0c$prv_{l+1},\\cdots,prv_r$ \u4fdd\u6301\u4e0d\u53d8\uff0c\u5b83\u4eec\u5e94\u8be5\u662f $l,l+1,\\cdots,r-1$ \u7684\u4e00\u4e2a\u7b49\u5dee\u6570\u5217\u3002\n\n\u65e2\u7136\u95ee\u9898\u548c\u533a\u95f4\u63a8\u5e73\u6709\u5173\uff0c\u8fd9\u4e2a\u6027\u8d28\u548c **\u989c\u8272\u76f8\u540c\u7684\u533a\u95f4** \u6709\u5173\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e2a\u8001\u670b\u53cb\u2014\u2014 $\\tt ODT$\uff0c\u7136\u540e\u6211\u4eec **\u628a\u6240\u6709\u989c\u8272\u76f8\u540c\u7684\u533a\u95f4\u770b\u6210\u4e00\u4e2a\u70b9**\u3002\n\n\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5bf9\u4e00\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f\u4e0d\u662f\u5c31\u6b63\u786e\u4e86\u5462\uff1f\u8003\u8651\u8bc1\u660e\u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n+ \u9996\u5148\u53ef\u77e5\u4e00\u5f00\u59cb $\\tt ODT$ \u5185\u6709 $n$ \u4e2a\u70b9\u3002\n+ \u6bcf\u6b21\u4fee\u6539\n\t1. \u628a $l$ \u4ee5\u53ca $r+1$ \u6240\u5728\u8282\u70b9\u65ad\u5f00\uff0c\u4e00\u5206\u4e3a\u4e8c\u3002\u8fd9\u4e00\u6b65\u6700\u574f\u589e\u52a0\u4e24\u4e2a\u8282\u70b9\u3002\n\t1. \u7136\u540e\u5220\u53bb\u5c5e\u4e8e\u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u8282\u70b9\n\t1. \u7136\u540e\u589e\u52a0\u4e00\u4e2a\u8282\u70b9 $[l,r]$\u3002\n\n\u6ce8\u610f\u5230\u4e24\u70b9\n\n+ \u6bcf\u6b21\u64cd\u4f5c\u6700\u574f\u589e\u52a0\u4e09\u4e2a\u8282\u70b9\uff08\u7b2c\u4e00\u6b65\u4e24\u4e2a\uff0c\u7b2c\u4e09\u6b65\u4e00\u4e2a\uff09\uff0c\u603b\u91cf\u662f $O(m)$ \u4e2a\u3002\n+ \u7b2c\u4e8c\u6b65\u5220\u53bb\u7684\u8282\u70b9\u603b\u6570\u662f $O(n)$ \u4e2a\u3002\n\n\u4e8e\u662f\u6240\u6709\u4fee\u6539\u7684\u603b\u6570\u662f $O(n+m)$\u3002\n\n## 4. \u533a\u95f4\u4fee\u6539\u600e\u4e48\u5199\n\n\u5728\u4e0a\u6587\u6709\u63d0\u5230\u8fc7\u7ef4\u62a4 $n+m$ \u4e2a `set`\uff0c\u8bb0\u4e3a $t$ \u6570\u7ec4\u3002\u4f46\u662f\u8981\u8bb0\u5f97\u7ef4\u62a4\u6210 $\\tt ODT$ \u8282\u70b9\u7684\u5f62\u5f0f\u3002\n\n1. \u6211\u4eec\u9996\u5148\u63d0\u53d6\u51fa $l\\sim r$ \u7684\u6240\u6709 $\\tt ODT$ \u7ed3\u70b9\n1. \u7136\u540e\u6211\u4eec\u626b\u63cf $l\\sim r$ \u7684\u6240\u6709\u8282\u70b9\uff0c\u628a\u6240\u6709\u8981\u4fee\u6539\u7684\u4f4d\u7f6e\u88c5\u8fdb\u4e00\u4e2a\u6876\u91cc\n1. \u6ce8\u610f\u4f60\u8981\u4fee\u6539\u7684\u4f4d\u7f6e\u4e0d\u4ec5\u4ec5\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u7aef\u70b9\uff0c\u8fd8\u6709\u8fd9\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u76f8\u540c\u503c\u7684\u4f4d\u7f6e\uff08\u8fd9\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u7684 $t$ \u6570\u7ec4\u8fdb\u884c `lower_bound/upper_bound` \u7b97\u51fa\uff09\n1. \u5220\u9664 $t$ \u91cc\u9762\u7684\u548c $\\tt ODT$ \u91cc\u9762\u7684\u6240\u6709\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u8282\u70b9\n1. \u6700\u540e\u9010\u4e00\u5904\u7406\u6211\u4eec\u63d0\u53d6\u51fa\u6765\u7684\u8981\u4fee\u6539\u7684\u4f4d\u7f6e\uff0c\u4fee\u6539\u5b83\u3002\n\n## 5. \u5355\u70b9\u4fee\u6539\u533a\u95f4\u6570\u989c\u8272\u7684\u7ebf\u6027\u7a7a\u95f4\u5199\u6cd5\n\n\u4f60\u5f53\u7136\u53ef\u4ee5\u8003\u8651\u6811\u5957\u6811\uff0c\u4f46\u662f ~~\u6211\u4e0d\u4f1a~~ \u8fd9\u9898\u5361\u7a7a\u95f4\u3002  \n\u4f60\u5f53\u7136\u4e5f\u53ef\u4ee5\u8003\u8651 CDQ\uff0c\u4f46\u662f\u4e2a\u4eba\u611f\u89c9\u5206\u5757\u5199\u6cd5\u7b80\u5355\u7684\u591a\u3002\n\n\u6211\u4eec\u628a\u7a7a\u95f4\u9650\u5236\u53bb\u6389\uff0c\u539f\u95ee\u9898\u662f\u8fd9\u6837\u7684\uff1a\n\n+ \u5355\u70b9\u4fee\u6539\n+ \u8be2\u95ee\u533a\u95f4\u503c $\\lt x$ \u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u8fd9\u4e2a\u9898\u6709\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684 \u5e8f\u5217\u5206\u5757+\u503c\u57df\u5206\u5757 \u7684\u505a\u6cd5\n\n> \u6ce8\uff1a\u8fd9\u91cc\u7684\u503c\u57df\u6307\u7684\u662f $prv$ \u7684\u503c\u7684\u8303\u56f4\uff08\u5373 $0\\sim n-1$\uff09\u3002\u5728\u503c\u57df\u548c $n$ \u6709\u533a\u522b\u7684\u65f6\u5019\uff0c\u9700\u8981\u5bf9\u4e8e\u503c\u57df\u548c\u5e8f\u5217\u5904\u7406\u4e24\u5957\u5206\u5757\u8f85\u52a9\u6570\u7ec4\uff0c\u8fd9\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002\u8fd9\u9898\u503c\u57df\u6709\u7279\u6b8a\u6027\u8d28\uff0c\u6240\u4ee5\u8003\u8651\u5c06\u5176\u6574\u4f53 $+1$\uff0c\u7136\u540e\u548c\u5e8f\u5217\u5171\u7528\u4e00\u4e2a\u5206\u5757\u8f85\u52a9\u6570\u7ec4\u3002\n\n\u8003\u8651\u5e8f\u5217\u5206\u5757\u90e8\u5206\u5728\u6563\u5757\u66b4\u529b\uff0c\u53ea\u60f3\u6574\u5757\uff0c\u90a3\u4e48\u539f\u95ee\u9898\u53d8\u4e3a\u5982\u6b64\uff1a\n\n+ \u5355\u70b9\u4fee\u6539\n+ \u8be2\u95ee\u5168\u5c40\u503c $\\lt x$ \u7684\u6570\u7684\u4e2a\u6570\uff08\u6ce8\u610f\u7559\u7ed9\u8fd9\u4e00\u6b65\u7684\u65f6\u95f4\u662f $O(1)$\uff09\n\n\u90a3\u4e48\u8fd9\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u5b83\u53d8\u6210\u4e00\u4e2a $O(\\sqrt n)$ \u5355\u70b9\u4fee\u6539 $O(\\sqrt n)$ \u524d\u7f00\uff08\u533a\u95f4\uff09\u548c\u67e5\u8be2\uff0c\u76f4\u63a5\u83bd\u4e0a\u503c\u57df\u5206\u5757\u5206\u5757\uff0c\u8fd9\u91cc\u7a7a\u95f4\u662f\u503c\u57df\u7684 $O(n)$\u3002\n\n\u7136\u540e\u6bcf\u4e2a\u5757\u90fd\u6765\u4e00\u4e2a\u8fd9\u6837\u7684\u503c\u57df\u5206\u5757\uff0c\u65f6\u7a7a\u90fd\u662f $O(n\\sqrt n)$\u3002\n\n~~\u7136\u540e\u6211\u5c31\u5728\u8fd9\u91cc\u5361\u4f4f\u4e86~~\u3002\n\n\u4f5c\u4e3a\u5927\u53e3\u80e1\u9009\u624b\uff0c\u6211\u9996\u5148\u8003\u8651\u4e86 Ynoi \u5e38\u89c1\u5957\u8def **\u79bb\u7ebf\u540e\u6eda\u5757**\uff1a\u5bf9\u6240\u6709\u64cd\u4f5c\u7684\u4f4d\u7f6e\u8fdb\u884c\u5206\u5757\uff0c\u679a\u4e3e\u5757\u7136\u540e\u5904\u7406\u5305\u542b\u8fd9\u4e2a\u5757\u7684\u64cd\u4f5c\u3002\n\n\u7136\u540e\u5c31\u53e3\u80e1\u6302\u4e86\uff0c\u56e0\u4e3a\u53ef\u80fd\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u533a\u95f4\u7684\u4fee\u6539\uff0c\u4e5f\u4f1a\u5f71\u54cd\u5230\u8fd9\u4e2a\u533a\u95f4\u7684 $prv$ \u503c\u3002\n\n\u7136\u540e\u53bb\u770b sol\uff0c\u53d1\u73b0\u4e86 [$\\texttt{\\color{black}Y\\color{red}noi}$](https://www.luogu.com.cn/user/124721) \u5927\u4f6c\u7684\u505a\u6cd5\uff1a\u5bf9\u8be2\u95ee\u800c\u975e\u8be2\u95ee\u7684\u4f4d\u7f6e\u8fdb\u884c\u5206\u5757\uff0c\u4f46\u662f\uff01\uff01\u54c8\u54c8\u6211\u770b\u4e0d\u61c2\u554a\u54c8\u54c8\u54c8\u54c8\uff01\uff01\n\n\u4e8e\u662f\u60f3\u5230\u6b64\u9898\u89e3\u91cc\u533a\u95f4\u4fee\u6539\u7684\u7b2c 5 \u6b65\uff1a\u63d0\u53d6\u51fa\u6240\u6709\u8981\u4fee\u6539\u7684\u4f4d\u7f6e\u8fdb\u884c\u4fee\u6539\u3002\u90a3\u4e48\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u628a\u8fd9\u4e9b\u5355\u70b9\u4fee\u6539\u7ed9\u5b58\u4e0b\u6765\uff1f\uff08\u6bd5\u7adf\u5b83\u7684\u603b\u6570\u662f $O(n+m)$ \u7684\uff09\u3002\n\n\u597d\uff0c\u90a3\u5c31\u628a\u6240\u6709\u7684\u5355\u70b9\u4fee\u6539\u4ee5\u53ca\u533a\u95f4\u67e5\u8be2\u5b58\u4e0b\u6765\uff0c\u79bb\u7ebf\u540e\u6eda\u5757\u5373\u53ef\u3002\n\n\u611f\u89c9\u8fd9\u9898\u5361\u4e0d\u6389\u5206\u5757\u3002\n\n## 6. [\u4ee3\u7801](https://www.luogu.com.cn/paste/bubz6le0)\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m)(\\sqrt n+\\log n))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002",
        "postTime": 1650952790,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b"
    },
    {
        "content": "\u8c03\u4e86\u4e09\u5929\u7684\u9898\uff0c\u4eca\u5929\u53ef\u7b97\u5e72\u51fa\u6765\u4e86\u3002\n\n**\u6811\u5957\u6811**\uff0c\u6ca1\u9519\uff0c\u5c31\u662f\u6811\u5957\u6811\uff0c\u5728\u7ebf\u505a\u6cd5\uff0c\u65f6\u95f4\u7a7a\u95f4\u90fd\u8fc7\u4e86\u3002\n\n~~\u867d\u7136\u62ff\u4e86\u4e00\u4e2a\u4f60\u8c37\u6700\u52a3\u89e3~~\uff0c\u4f46\u662f\u8fd9\u81f3\u5c11\u8bf4\u660e\u5e26\u6bd2\u7624\u8fd8\u6ca1\u6709\u592a\u72e0\uff0c\u4e0d\u7136\u7ed9\u8fd9\u9898\u52a0\u5f3a\u5236\u5728\u7ebf\u4e86www\u3002\n\n\u9644\u5e26\u672c\u849f\u84bb\u8c03\u9898\u65f6\u62cd\u5230\u7684\u66fe\u7ecf\u8ba9\u6211\u7684\u4ee3\u7801\u5361 WA \u7684\u6570\u636e\uff1a[Link](https://www.luogu.com.cn/paste/oc4i9cyt)\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\u3002\n\n## \u9898\u610f\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4690)\uff0c\u5927\u81f4\u9898\u610f\u5982\u4e0b\uff1a\n\n> \u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff1a\n>\n> 1. \u5c06\u533a\u95f4 $[l,r]$ \u67d3\u8272\u3002\n> 2. \u67e5\u5bfb\u533a\u95f4 $[l,r]$ \u6709\u51e0\u79cd\u989c\u8272\u3002\n>\n> $n,m\\leqslant 10^5$\uff0c\u7a7a\u95f4\u9650\u5236 $\\text{64MiB}$\u3002\n\n\u989c\u8272\u7f16\u53f7\u4e0d\u7ba1\u591a\u5927\uff0c\u79bb\u6563\u5316\u5373\u53ef\uff0c\u56e0\u6b64\u989c\u8272\u6570\u4e3a $n+m$ \u7ea7\u522b\u3002\n\n## \u5206\u6790\n\n\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u7684\u5f31\u5316\u7248 [CF848C](https://www.luogu.com.cn/problem/CF848C)\uff08\u53ef\u4ee5\u8f6c\u5316\u4e3a**\u7c7b\u4f3c**\u5355\u70b9\u4fee\u6539\u989c\u8272\uff0c\u533a\u95f4\u67e5\u8be2\u7684\u95ee\u9898\uff09\u600e\u4e48\u505a\uff0c\u8bbe\u4f4d\u7f6e\u4e3a $i$ \u7684\u989c\u8272\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e3a $pre_i$\uff0c\u67e5\u5bfb\u65f6\u8f6c\u5316\u4e3a\u67e5\u5bfb $i\\in[l,r],pre_i\\in[0,l-1]$ \u7684 $i$ \u7684\u6570\u91cf\u3002\u5c06 $i,pre_i$ \u770b\u4f5c\u6a2a\u7eb5\u5750\u6807\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6570\u70b9\u95ee\u9898\u3002\u4e8e\u662f\u53ef\u4ee5\uff1a\u7528 $n+m$ \u4e2a `set` \u5206\u522b\u7ef4\u62a4\u6bcf\u4e2a\u989c\u8272\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u67e5\u5bfb\u524d\u9a71\u540e\u7ee7\u3002\u5355\u6b21\u4fee\u6539\u65f6\uff1a\n\n1. \u8fd9\u4e2a\u4f4d\u7f6e\u539f\u672c\u7684\u8d21\u732e\uff0c\u548c\u5b83\u540e\u7ee7\u7684\u8d21\u732e\u5220\u9664\u3002\n\n2. \u66f4\u65b0\u5b83\u7684\u540e\u7ee7\u7684\u8d21\u732e\u3002\n\n3. \u4fee\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u989c\u8272\uff0c\u66f4\u65b0\u65b0\u989c\u8272\u5e26\u6765\u7684\u8d21\u732e\u548c\u53d8\u5316\u3002\n\n\u73b0\u5728 **\u5355\u70b9\u4fee\u6539** \u95ee\u9898\u8f6c\u5316\u4e3a\u4e86 **\u533a\u95f4\u4fee\u6539**\u3002\u663e\u7136\u628a $i,pre_i$ \u5f53\u6210\u6a2a\u7eb5\u5750\u6807\u6570\u70b9\u7684\u601d\u8def\u4ecd\u7136\u6b63\u786e\uff0c\u8003\u8651\u5982\u4f55\u89e3\u51b3\u533a\u95f4\u4fee\u6539\u3002\u53d1\u73b0\u672c\u9898\u7684\u4fee\u6539\u64cd\u4f5c\u5c31\u662f\u533a\u95f4\u8986\u76d6\uff0c\u53ef\u4ee5\u7528\u7c7b\u4f3c ODT \u7684\u63a8\u5e73\u64cd\u4f5c\u8fdb\u884c\u3002\n\n\u8fd8\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a `set`\uff0c\u4f46\u662f `set` \u5185\u5e94\u8be5\u5b58\u533a\u95f4\uff0c\u8868\u793a\u8fd9\u4e00\u6bb5\u533a\u95f4\u5185\u90fd\u662f\u8fd9\u4e2a\u989c\u8272\uff0c\u6309\u5de6\u53f3\u7aef\u70b9\u6392\u5e8f\u65e0\u6240\u8c13\uff0c\u56e0\u4e3a\u663e\u7136\u5404\u4e2a `set` \u7684\u533a\u95f4\u65e0\u4ea4\u3002\u5355\u6b21\u4fee\u6539\u65f6\uff1a\n\n1. **\u7ec6\u8282**\uff1a\u5de6\u7aef\u70b9\u53ef\u80fd\u88ab\u4e00\u4e2a\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff0c\u8fd9\u65f6\u53ef\u4ee5\u628a\u8fd9\u4e2a\u533a\u95f4\u88c2\u6210\u4e24\u4e2a\u533a\u95f4\uff0c\u53f3\u7aef\u70b9\u540c\u7406\u3002\u4f7f\u5f97\u8981\u4fee\u6539\u7684\u8303\u56f4\u5185\u6240\u6709\u533a\u95f4\u90fd\u4e25\u683c\u88ab\u4fee\u6539\u7684\u8303\u56f4 $[l,r]$ \u5305\u542b\u3002\n2. \u904d\u5386 $[l,r]$ \u5185\u7684\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u533a\u95f4\uff0c\u4fee\u6539\u5b83\u7684\u540e\u7ee7\u5bf9\u8fd9\u4e2a\u533a\u95f4\u9020\u6210\u7684\u7684\u8d21\u732e\uff0c\u5220\u9664\u672c\u533a\u95f4\u5bf9 $pre$ \u9020\u6210\u7684\u8d21\u732e\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u533a\u95f4\u5220\u9664\u3002\n3. \u628a\u8fd9\u4e2a\u533a\u95f4\u8986\u76d6\u6210\u65b0\u7684\u989c\u8272\uff0c\u66f4\u65b0\u65b0\u989c\u8272\u5e26\u6765\u7684\u8d21\u732e\u548c\u53d8\u5316\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u4e0d\u4f1a T\uff1f\u8003\u8651\u521d\u59cb\u72b6\u6001\u4e0b\u6709 $n$ \u4e2a\u533a\u95f4\uff0c\u5355\u6b21\u4fee\u6539\u6700\u574f\u4ea7\u751f\u4e09\u4e2a\u533a\u95f4\uff08\u5728\u4e00\u4e2a\u533a\u95f4\u5185\u90e8\u8986\u76d6\uff09\uff0c\u4fee\u6539\u6b21\u6570\u53ef\u4ee5\u5747\u644a\u5730\u89c6\u4e3a $\\operatorname{O}(n)$ \u7ea7\u522b\u3002\n\n\u8003\u8651\u67e5\u5bfb\uff0c\u53d1\u73b0\u4e00\u6bb5\u533a\u95f4\u5185\u51fa\u4e86\u5de6\u7aef\u70b9\u5176\u5b83\u6240\u6709\u70b9\u7684 $pre_i=i-1$\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e2a\u5de6\u7aef\u70b9\u4ea7\u751f\u7684\u8d21\u732e\u3002\u67e5\u8be2\u65f6\uff0c\u5982\u679c $l$ \u88ab\u4e00\u4e2a\u533a\u95f4\u5305\u542b\uff0c\u53ef\u4ee5\u5c06 $l$ \u76f4\u63a5\u62c9\u5230\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\u518d\u67e5\u5bfb\uff0c\u907f\u514d\u8fd9\u4e2a\u533a\u95f4\u88ab\u67e5\u6f0f\u3002\n\n## \u5b9e\u73b0\n\n\u6839\u636e\u4e0a\u8ff0\u5206\u6790\u672c\u9898\u7684\u505a\u6cd5\u5df2\u7ecf\u5b8c\u5f62\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u5982\u4f55\u5b9e\u73b0\uff0c\u6211\u89c1\u8fc7\u7684\uff08\u4e0d\u4e00\u5b9a\u5199\u8fc7\uff09\u7684\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a\n\n1. \u79bb\u7ebf cdq \u67e5\u8be2\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $n\\log n$\uff0c\u7a7a\u95f4\u7ebf\u6027\u3002\u53ef\u8fc7\u3002\n2. \u5728\u7ebf KDTree \u6570\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $n\\sqrt{n}$\uff0c\u7a7a\u95f4\u7ebf\u6027\uff0c\u4e0d\u53ef\u8fc7\u3002\u53c2\u8003\u6211 [LOJ \u4e0a\u4ee3\u7801](https://loj.ac/s/1340282)\u3002\n3. \u5206\u5757\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6 $n\\sqrt n$\uff0c\u4e0d\u53ef\u8fc7\u3002\n4. \u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7b49\uff0c\u65f6\u7a7a\u590d\u6742\u5ea6 $n\\log^2 n$\uff0c\u4e0d\u53ef\u8fc7\u3002\n5. \u6811\u5957\u6811\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $n\\log^2n$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $n\\log n$\uff0c\u53ef\u8fc7\u3002\n\n\u5f88\u591a\u4eba\u8ba4\u4e3a\u6811\u5957\u6811\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $n\\log^2 n$\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8003\u8651\u7528\u6811\u72b6\u6570\u7ec4\u5957\u5e73\u8861\u6811\u5373\u53ef\u3002\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u5355 $\\log$\uff0c\u5199\u5e73\u8861\u6811\u7684\u65f6\u5019\u5220\u9664\u64cd\u4f5c\u8bb0\u4e2a\u5185\u5b58\u6c60\u56de\u6536\u5373\u53ef\u3002\n\n\u672c\u4eba\u7528\u7684\u6811\u72b6\u6570\u7ec4\u5957\u66ff\u7f6a\u7f8a\uff0c\u66ff\u7f6a\u7f8a\u6811\u5e38\u6570\u8f83\u5c0f\uff0c\u63a8\u8350\u4f7f\u7528\u3002\n\n## \u4ee3\u7801\n\n\u672c\u4eba\u4ee3\u7801\u8f83\u5197\u957f\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u5728 [LOJ \u4e0a\u7684\u63d0\u4ea4\u8bb0\u5f55](https://loj.ac/s/1340227)\uff0c\u8fd9\u4efd\u4ee3\u7801\u5728 luogu \u5df2\u7ecf\u540c\u6b65 AC\uff0c\u7a7a\u95f4\u57fa\u672c\u538b\u7ebf\u3002\n\n",
        "postTime": 1641624752,
        "uid": 181776,
        "name": "_Arahc_",
        "ccfLevel": 7,
        "title": "P4690 \u9898\u89e3"
    },
    {
        "content": "\u76f8\u5bf9 Ynoi \u6765\u8bf4\u66f4\u504f\u7ed3\u8bba\u548c\u6a21\u677f\u7684 cdq \u9898\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1aCDQ \u5206\u6cbb\u3001\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u3001\u5361\u5e38\u3002\n\n---\n\n\u9996\u5148\u8fd9\u73a9\u610f\u770b\u8d77\u6765\u4e0d\u592a\u597d\u505a\uff0c\u8003\u8651\u5f31\u5316\u4e3a\u5355\u70b9\u4fee\u6539\u3002\n\n\u5355\u70b9\u4fee\u6539\u533a\u95f4\u989c\u8272\u6570\u6709\u4e00\u4e2a\u975e\u5e38\u5957\u8def\u7684\u8f6c\u6362\uff0c\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u7684\u524d\u9a71\uff08\u5373\u5bf9\u6bcf\u4e00\u4e2a $i$ \u7ef4\u62a4\u6700\u5927\u7684 $p_i$ \u4f7f\u5f97 $p_i<i$ \u4e14 $a_{p_i}=a_i$\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4e3a $0$\uff09\uff0c\u7136\u540e\u6bcf\u6b21\u7edf\u8ba1\u6ee1\u8db3 $l\\leq i\\leq r, 1\\leq p_i<l$ \u7684 $i$ \u7684\u6570\u91cf\u3002\n\n\u663e\u7136\u8fd9\u73a9\u610f\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u70b9\u3002\n\n\u4f46\u662f\u5e26\u4e0a\u5355\u70b9\u4fee\u6539\u4e4b\u540e\u5c31\u6ca1\u6cd5\u7b80\u5355\u5730\u7ef4\u62a4\u4e86\u600e\u4e48\u529e\u5462\uff1f\n\n\u663e\u7136\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539 $i$ \u4e3a $x$\uff0c\u53ea\u4f1a\u6539\u53d8 $i$ \u7684\u524d\u9a71\u3001$i$ \u7684\u539f\u540e\u7ee7\u7684\u524d\u9a71\u3001$i$ \u7684\u65b0\u540e\u7ee7\u7684\u524d\u9a71\u3002\n\n\u4fee\u6539\u4e00\u4e2a\u70b9\u53ef\u4ee5\u62c6\u5206\u4e3a\u5148\u5220\u9664\u518d\u52a0\u5165\uff0c\u7136\u540e\u5728 $t$ \u65f6\u95f4\u5220\u9664\u4e00\u4e2a\u70b9 $(x,y)$ \u53ef\u4ee5\u901a\u8fc7\u52a0\u4e00\u4e2a\u6743\u503c\u4e3a $-1$ \u7684\u4e09\u7ef4\u7a7a\u95f4\u5185\u7684\u70b9 $(t,x,y)$\uff0c\u7136\u540e\u518d\u52a0\u5165\u4e00\u4e2a\u6743\u503c\u4e3a $1$ \u7684\u70b9 $(t,x',y')$ \u6765\u5b9e\u73b0\u3002\n\n\u7136\u540e\uff0c\u56e0\u4e3a\u8be2\u95ee\u53ea\u8003\u8651\u5230\u8be2\u95ee\u65f6\u95f4\u4e4b\u524d\u7684\u4fee\u6539\u7684\u5f71\u54cd\uff0c\u6240\u4ee5\u8fd9\u5c31\u8f6c\u6362\u4e3a\u4e86\u4e00\u4e2a\u4e09\u7ef4\u504f\u5e8f\uff0c\u5c31\u53ef\u4ee5\u6811\u5957\u6811/CDQ \u7ef4\u62a4\u4e86\u3002\n\n---\n\n\u90a3\u4e48\u533a\u95f4\u4fee\u6539\u600e\u4e48\u505a\u5462\uff1f\n\n\u3010\u533a\u95f4\u4fee\u6539\u7684\u65f6\u5019\uff0c$p$ \u6570\u7ec4\u6700\u591a\u53d1\u751f\u591a\u5c11\u6b21\u6539\u53d8\uff1f\u3011  \n\u90a3\u8fd8\u7528\u8bf4\u5417\uff0c\u6bcf\u6b21\u6539\u53d8 $O(n)$ \u4e2a\u4f4d\u7f6e\uff0c\u663e\u7136\u662f $O(nm)$\u3002  \n\u3010\u597d\uff0c\u4f60\u8bf4\u662f $O(nm)$\uff0c\u600e\u4e48\u5361\u6ee1\u8fd9\u4e2a\u590d\u6742\u5ea6\uff1f\u3011  \n\u55ef\u2026\u2026  \n\u3010\u8bd5\u4e86 15 \u5206\u949f\u3011  \n\u4e3a\u5565\u5c31\u6b7b\u6d3b\u5361\u4e0d\u6ee1\u5462\u2026\u2026  \n\u3010\u4e5f\u8bb8\u4e0d\u662f $O(nm)$\uff1f\u3011  \n\u4e5f\u8bb8\u5427\u2026\u2026\u8bd5\u7740\u8bc1\u4e00\u4e0b\u5427\u3002\n\n\u6bcf\u6b21\u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\u7684\u65f6\u5019\uff0c\u6240\u6709 $p$ \u6539\u53d8\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f **\u4e00\u6bb5\u6781\u957f\u8fde\u7eed\u540c\u8272\u5b50\u6bb5\u7684\u5de6\u7aef\u70b9**\uff0c\u5269\u4e0b\u7684\u90fd\u5c06 **\u7ef4\u6301\u4e3a\u4e0b\u6807\u51cf $1$ \u4e0d\u53d8**\u3002\n\n\u63a8\u5e73\u4e4b\u540e\uff0c\u8fd9\u4e9b\u8fde\u7eed\u540c\u8272\u5b50\u6bb5\u90fd\u4f1a\u88ab **\u5220\u9664**\u3002\n\n\u5982\u679c\u6211\u4eec\u5220\u6389\u4e86 $O(x)$ \u4e2a\u8282\u70b9\uff0c\u82b1\u8d39\u7684\u4ee3\u4ef7\u4e00\u5b9a\u662f $O(x)$ \u7684\u3002\n\n\u5220\u9664\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5148\u8981\u6267\u884c ODT \u7684 split\uff0c\u8fd9\u4e00\u6b65\u589e\u52a0\u7684\u70b9\u7684\u6570\u91cf\u662f $O(1)$ \u7684\u3002\n\n\u7136\u540e\u82b1\u8d39 $O(x)$ \u7684\u4ee3\u4ef7\u5220\u53bb $O(x)$ \u4e2a\u8282\u70b9\u3002\n\n\u7136\u540e\u518d\u628a\u8fd9\u4e00\u6bb5\u52a0\u56de\u6765\uff0c\u589e\u52a0\u7684\u70b9\u7684\u6570\u91cf\u662f $O(1)$ \u7684\u3002\n\n\u6240\u4ee5\u589e\u52a0\u7684\u70b9\u7684\u6570\u91cf\u662f $O(m)$ \u7684\u3002\n\n\u4e00\u5f00\u59cb\u6709 $O(n)$ \u4e2a\u70b9\uff0c\u6240\u4ee5\u603b\u70b9\u6570\u662f $O(n+m)$ \u7684\u3002\n\n\u663e\u7136\u53ea\u6709 $O(n+m)$ \u4e2a\u70b9\uff0c\u5220\u9664\u7684\u603b\u6b21\u6570\u4e5f\u53ea\u6709 $O(n+m)$\u3002\n\n\u6bcf\u6b21\u5220\u9664\u5bf9\u603b\u4fee\u6539\u6b21\u6570\u7684\u8d21\u732e\u4e3a $O(1)$\u3002\n\n\u5f97\u5230\u7ed3\u8bba\uff1a\n\n**\u6240\u6709\u4fee\u6539\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c$p$ \u6570\u7ec4\u4e0a\u5355\u70b9\u4fee\u6539\u7684\u6b21\u6570\u4e3a $O(n+m)$\u3002**\n\n---\n\n\u597d\uff01\u90a3\u4e48\u8fd9\u5c31\u53d8\u6210\u4e86\u5355\u70b9\u4fee\u6539\uff01\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u7ef4\u62a4\u51fa\u9700\u8981\u4fee\u6539\u7684\u70b9\u3002\n\n\u663e\u7136\u8fd8\u662f\u8981\u62ff\u4e00\u68f5 ODT\uff0c\u4f46\u662f\u533a\u95f4\u4fee\u6539\u7684\u65f6\u5019\u8981\u662f\u76f4\u63a5\u8ba8\u8bba\u9700\u8981\u4fee\u6539\u7684\u4f4d\u7f6e\u2026\u2026\u770b\u7740\u2026\u2026\u770b\u7740\u2026\u2026\u5c31\u4e0d\u60f3\u5199\u4e86\u2026\u2026\n\n\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u5982\u679c\u628a\u6240\u6709\u9700\u8981\u4fee\u6539\u7684\u4f4d\u7f6e\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u6392\u9664\u6389 $p$ \u6570\u7ec4\u76f4\u63a5\u4fee\u6539 ODT\uff0c\u7136\u540e\u518d\u5bf9\u8fd9\u4e9b\u4f4d\u7f6e\u770b\u8981\u6539\u6210\u5565\u2026\u2026\u8bf6\uff01\u597d\u50cf\u975e\u5e38\u597d\u5199\uff01\n\n\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u524d\u9a71\uff0cODT \u4e0a\u9762\u8fd8\u8981\u518d\u989d\u5916\u5bf9\u6bcf\u4e00\u79cd\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a set\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5c31\u53ea\u9700\u8981\u628a\u6240\u6709\u4fee\u6539\u7684\u4f4d\u7f6e\u5904\u7406\u51fa\u6765\uff0c\u7136\u540e\u4f7f\u7528\u5355\u70b9\u4fee\u6539\u7684\u65b9\u6cd5\u62c6\u70b9\u8f6c\u6362\u4e3a\u4e09\u7ef4\u504f\u5e8f\uff0c\u8fd9\u9898\u5c31\u505a\u5b8c\u5566~\n\n\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m)\\log ^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n+m)$\u3002\n\n---\n\n\u7136\u540e\u76f4\u63a5\u5199\u597d\u4e86\u4ea4\u4e0a\u53bb\uff0c\u5c31 TLE+MLE \u4e86 QAQ\n\n\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u70b9\u7684\u7a7a\u95f4\u5f00\u9500\u8f83\u5927\uff0c\u9700\u8981 $5$ \u4e2a int\uff0c\u7136\u540e\u8fd9\u4e2a\u70b9\u6570\u7684 $O(n)$ \u5e26\u5927\u5e38\u6570\uff0c\u6240\u4ee5\u5728 CDQ \u5206\u6cbb\u7684\u5f52\u5e76\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u4e0d\u53bb\u7ef4\u62a4\u70b9\u7684\u4e34\u65f6\u6570\u7ec4 $p'$\uff0c\u800c\u662f\u7ef4\u62a4 **\u70b9\u7684\u4e0b\u6807** \u7684\u4e34\u65f6\u6570\u7ec4 $v'$\uff0c\u5176\u4e2d $v'_i$ \u5b9e\u9645\u5bf9\u5e94\u7684\u70b9\u662f $p_{v'_i}$\u3002\n\n\u8fd9\u6837\u4e34\u65f6\u6570\u7ec4\u7684\u7a7a\u95f4\u5c31\u4f18\u6389\u4e86\u5f88\u591a\uff0c\u4e8e\u662f\u5c31\u4e0d MLE \u4e86\u3002\n\n\u7136\u540e\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u526a\u679d\uff1a\n\n1. \u5bf9\u4e8e\u6240\u6709**\u67e5\u8be2**\u70b9\u7ef4\u62a4\u51fa\u6700\u5927\u7684 $X$\u3001\u6700\u5927\u7684 $Y$ \u548c\u6700\u5927\u7684 $Z$\uff0c\u7136\u540e\u5c06\u6240\u6709\u6ee1\u8db3 $x_0>X$ \u6216 $y_0>Y$ \u6216 $z_0>Z$ \u7684**\u4fee\u6539**\u70b9\u5254\u9664\uff08\u56e0\u4e3a\u8fd9\u4e9b\u70b9\u4e0d\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\uff09\uff1b\n2. \u6811\u72b6\u6570\u7ec4\u6e05\u96f6\u7684\u65f6\u5019\u53ef\u4ee5\u53e6\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6e05\u5230\u4e00\u4e2a\u4f4d\u7f6e\u4e3a $0$ \u7684\u65f6\u5019\u5c31\u6ca1\u6709\u5fc5\u8981\u5f80\u4e0b\u8d70\u4e86\u3002\n\n\u52a0\u4e0a\u8fd9\u4e24\u4e2a\u526a\u679d\u548c\u4e00\u4e9b\u5e38\u7528\u7684\u5361\u5e38\u6280\u5de7\uff08\u5982\u5feb\u8bfb\uff09~~\u518d\u6253\u5f00 O2~~ \u5c31\u53ef\u4ee5\u7206\u8fc7\u53bb\u5566~\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <set>\n#include <vector>\n#include <tr1/unordered_map>\nusing namespace std;\nusing namespace std::tr1;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nstruct Node {\n\tint l, r, v;\n\tbool operator < (const Node& b) const {return l < b.l;}\n\tNode() {}\n\tNode(int l, int r, int v) : l(l), r(r), v(v) {}\n};\nstruct Point {\n\tint _time, x, y, val;\n\tbool type;\n\tPoint() {}\n\tPoint(int _time, int x, int y, int val, bool type) : _time(_time), x(x), y(y), val(val), type(type) {}\n};\nint n, prv[100005], a[100005], m, mptop, lst[100005], ans[100005], c[100005], idx[1200005];\nvector <Point> vc;\nunordered_map <int, int> mp;\nstruct ChthollyTree {\n\ttypedef set<Node>::iterator SNI;\n\tset <Node> tr, col[200005];\n\tinline SNI Insert(int l, int r, int v) {\n\t\tcol[v].insert(Node(l, r, v));\n\t\treturn tr.insert(Node(l, r, v)).first;\n\t}\n\tinline void Delete(int l, int r, int v) {\n\t\tcol[v].erase(Node(l, r, v));\n\t\ttr.erase(Node(l, r, v));\n\t}\n\tinline int Prev(int pos) {\n\t\tSNI it = tr.upper_bound(Node(pos, 0, 0));\n\t\tit--;\n\t\tif (it->l < pos) return pos - 1;\n\t\telse {\n\t\t\tSNI rm = col[it->v].lower_bound(Node(pos, 0, 0));\n\t\t\tif (rm != col[it->v].begin()) {\n\t\t\t\trm--;\n\t\t\t\treturn rm->r;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n\tinline SNI Split(int pos) {\n\t\tSNI it = tr.lower_bound(Node(pos, 0, 0));\n\t\tif (it != tr.end() && it->l == pos) return it;\n\t\t--it;\n\t\tint l = it->l, r = it->r;\n\t\tlong long v = it->v;\n\t\tDelete(l, r, v);\n\t\tInsert(l, pos - 1, v);\n\t\treturn Insert(pos, r, v);\n\t}\n\tinline void Assign(int l, int r, int v, int _time) {\n\t\t//printf(\"%d:\\n\", _time);\n\t\tSNI itr = Split(r + 1), itl = Split(l);\n\t\tvector <int> mpnt;\n\t\tfor (SNI it = itl;it != itr;it++) {\n\t\t\tif (it != itl) mpnt.push_back(it->l);\n\t\t\tSNI nxt = col[it->v].upper_bound(*it);\n\t\t\tif (nxt != col[it->v].end()) mpnt.push_back(nxt->l);\n\t\t\tcol[it->v].erase(*it);\n\t\t}\n\t\ttr.erase(itl, itr);\n\t\ttr.insert(Node(l, r, v));\n\t\tcol[v].insert(Node(l, r, v));\n\t\tmpnt.push_back(l);\n\t\tSNI nxt = col[v].upper_bound(Node(l, r, v));\n\t\tif (nxt != col[v].end()) mpnt.push_back(nxt->l);\n\t\tregister int siz = mpnt.size();\n\t\tfor (register int i = 0;i < siz;i++) {\n\t\t\tif (mpnt[i] > n || mpnt[i] < 1) continue;\n\t\t\tvc.push_back(Point(_time, mpnt[i], prv[mpnt[i]], -1, 0));\n\t\t\tprv[mpnt[i]] = Prev(mpnt[i]);\n\t\t\t//printf(\"%d %d\\n\", mpnt[i], prv[mpnt[i]]);\n\t\t\tvc.push_back(Point(_time, mpnt[i], prv[mpnt[i]], 1, 0));\n\t\t}\n\t\t//puts(\"End\");\n\t}\n};\nChthollyTree tr;\n\ninline int Lowbit(int x) {\n\treturn x & -x;\n}\n\ninline void Update(int i, int x) {\n\tfor (register int j = i;j <= n;j += Lowbit(j)) c[j] += x;\n}\n\ninline void Remove(int i) {\n\tfor (register int j = i;j <= n;j += Lowbit(j)) {\n\t\tif (!c[j]) break;\n\t\telse c[j] = 0;\n\t}\n}\n\ninline int Query(int i) {\n\tregister int ans = 0;\n\tfor (register int j = i;j >= 1;j -= Lowbit(j)) ans += c[j];\n\treturn ans;\n}\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (register int i = 1;i <= n;i++) {\n\t\ta[i] = qread();\n\t\tif (!mp[a[i]]) {\n\t\t\tmptop++;\n\t\t\tmp[a[i]] = mptop;\n\t\t}\n\t\ta[i] = mp[a[i]];\n\t}\n}\n\ninline void Prefix() {\n\tvc.push_back(Point(-1, 0, 0, 0, 0));\n\tfor (register int i = 1;i <= n;i++) {\n\t\tprv[i] = lst[a[i]];\n\t\tvc.push_back(Point(0, i, prv[i], 1, 0));\n\t\tlst[a[i]] = i;\n\t\ttr.tr.insert(Node(i, i, a[i]));\n\t\ttr.col[a[i]].insert(Node(i, i, a[i]));\n\t}\n}\n\ninline void Cdq(int l, int r) {\n\t//printf(\"cdq(%d,%d){\\n\", l, r);\n\tif (l == r) return;\n\tregister int mid = l + r >> 1;\n\tCdq(l, mid);\n\t//puts(\"}\");\n\tCdq(mid + 1, r);\n\t//puts(\"}\");\n\tvector <int> tmp;\n\tint i = l, j = mid + 1;\n\twhile (i <= mid && j <= r) {\n\t\tif (vc[idx[i]].x <= vc[idx[j]].x) {\n\t\t\tif (vc[idx[i]].type == 0) Update(vc[idx[i]].y, vc[idx[i]].val);\n\t\t\ttmp.push_back(idx[i]);\n\t\t\ti++;\n\t\t} else {\n\t\t\tif (vc[idx[j]].type == 1) {\n\t\t\t\tans[vc[idx[j]]._time] += vc[idx[j]].val * Query(vc[idx[j]].y);\n\t\t\t\t//printf(\"%d %d %d %d\\n\", vc[j]._time, vc[j].x, vc[j].y, ans[vc[j]._time]);\n\t\t\t}\n\t\t\ttmp.push_back(idx[j]);\n\t\t\tj++;\n\t\t}\n\t}\n\twhile (j <= r) {\n\t\tif (vc[idx[j]].type == 1) {\n\t\t\tans[vc[idx[j]]._time] += vc[idx[j]].val * Query(vc[idx[j]].y);\n\t\t\t//printf(\"%d %d %d %d\\n\", vc[j]._time, vc[j].x, vc[j].y, ans[vc[j]._time]);\n\t\t}\n\t\ttmp.push_back(idx[j]);\n\t\tj++;\n\t}\n\tfor (register int k = l;k < i;k++) {\n\t\tif (vc[idx[k]].type == 0) Remove(vc[idx[k]].y);\n\t}\n\twhile (i <= mid) {\n\t\ttmp.push_back(idx[i]);\n\t\ti++;\n\t}\n\tfor (i = l;i <= r;i++) idx[i] = tmp[i - l];\n}\n\ninline void Solve() {\n\tfor (register int i = 1;i <= m;i++) {\n\t\tregister int opt = qread();\n\t\tif (opt == 1) {\n\t\t\tregister int l = qread(), r = qread(), v = qread();\n\t\t\tif (!mp[v]) {\n\t\t\t\tmptop++;\n\t\t\t\tmp[v] = mptop;\n\t\t\t}\n\t\t\tv = mp[v];\n\t\t\ttr.Assign(l, r, v, i);\n\t\t} else {\n\t\t\tregister int l = qread(), r = qread();\n\t\t\tvc.push_back(Point(i, r, l - 1, 1, 1));\n\t\t\tvc.push_back(Point(i, l - 1, l - 1, -1, 1));\n\t\t}\n\t}\n\tregister int pcnt = vc.size() - 1;\n\tfor (register int i = 1;i <= pcnt;i++) vc[i].y++;\n\t// for (register int i = 1;i <= pcnt;i++) {\n\t// \tprintf(\"%d %d %d %d %d\\n\", vc[i].type, vc[i]._time, vc[i].x, vc[i].y, vc[i].val);\n\t// }\n\tregister int maxx = 0, maxy = 0, maxz = 0;\n\tvector <int> ridx;\n\tfor (register int i = 1;i <= pcnt;i++) {\n\t\tif (vc[i].type) {\n\t\t\tmaxx = Max(maxx, vc[i]._time);\n\t\t\tmaxy = Max(maxy, vc[i].x);\n\t\t\tmaxz = Max(maxz, vc[i].y);\n\t\t}\n\t}\n\tfor (register int i = 1;i <= pcnt;i++) {\n\t\tif (vc[i].type || (vc[i]._time <= maxx && vc[i].x <= maxy && vc[i].y <= maxz)) ridx.push_back(i);\n\t}\n\tpcnt = ridx.size();\n\tfor (register int i = 1;i <= pcnt;i++) idx[i] = ridx[i - 1];\n\tCdq(1, pcnt);\n\tfor (register int i = 1;i <= m;i++) {\n\t\tif (ans[i]) printf(\"%d\\n\", ans[i]);\n\t}\n}\n\nint main() {\n\tRead();\n\tPrefix();\n\tSolve();\n\treturn 0;\n}\n```",
        "postTime": 1590492186,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "### **\u5206\u6790**\n\u533a\u95f4\u4fee\u6539\u6570\u989c\u8272\u3002\n\n\u5355\u70b9\u4fee\u6539\u7684\u64cd\u4f5c\u662f\u628a\u76f8\u540c\u989c\u8272\u5f80\u524d\u94fe\uff0c\u7b49\u4ef7\u4e8e\u95ee\u533a\u95f4\u5185\u524d\u9a71\u76f8\u540c\u989c\u8272\u4e0d\u5728\u5f53\u524d\u533a\u95f4\u7684\u6570\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u4e1c\u897f\u7528$cdq$\u5206\u6cbb\u6216\u8005\u6811\u5957\u6811\u53ef\u4ee5\u89e3\u51b3\u3002\u4fee\u6539\u7684\u8bdd\u7528$set$\u641e\u5b9a\u3002\n\n\u533a\u95f4\u4fee\u6539\u7684\u8bdd\u6709\u4e00\u4e2a\u7ed3\u8bba\u662f\u4fee\u6539\u6b21\u6570\u4e0d\u8d85\u8fc7$O(n+m)$\u6b21\u3002\n\n\u8bc1\u660e\u7684\u8bdd\u91c7\u7528\u644a\u8fd8\u5206\u6790\u3002\n\n\u8003\u8651\u628a\u6240\u6709\u76f8\u540c\u989c\u8272\u7f29\u6210\u4e00\u4e2a\u70b9\u3002\n\u663e\u7136\u8981\u4fee\u6539\u7684\u53ea\u6709\u76f8\u540c\u989c\u8272\u533a\u95f4\u7684\u5934\u548c\u5c3e\u3002\n\n\u6bcf\u4e00\u6b21\u533a\u95f4\u64cd\u4f5c\u628a\u8fd9\u4e2a\u533a\u95f4\u7ed9\u5355\u72ec\u6293\u51fa\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u70b9\u5168\u90e8\u5220\u6389\uff0c\u518d\u63d2\u5165\u4fee\u6539\u540e\u7684\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u7684\u8282\u70b9\u3002\n\u6bcf\u6b21\u533a\u95f4\u5934\uff0c\u533a\u95f4\u5c3e\uff0c\u4ee5\u53ca\u65b0\u7684\u533a\u95f4\u5404\u4ea7\u751f\u4e00\u4e2a\u8282\u70b9\uff0c\u603b\u5171\u65b0\u4ea7\u751f\u4e0d\u8d85\u8fc7$3m$\u4e2a\u8282\u70b9\u3002\n\n\u4e00\u4e2a\u70b9\u4e4b\u591a\u518d\u5220\u9664\u548c\u63d2\u5165\u7684\u65f6\u5019\u4fee\u6539\u4e00\u6b21\uff0c\u6240\u4ee5\u81f3\u591a\u8fdb\u884c$2$\u6b21\u4fee\u6539\u3002\u6240\u4ee5\u603b\u5171\u4fee\u6539\u6b21\u6570\u4e0d\u8d85\u8fc7$O(n+m)$\n\n\u4e0a\u8ff0\u8bc1\u660e\u5c31\u63d0\u4f9b\u4e86\u65b9\u6cd5\u3002\u91c7\u7528$set$\u7ef4\u62a4\u533a\u95f4\u5373\u53ef\u3002\n\n$P.S:$\u4e00\u4e2a\u6280\u5de7\u662f\u5206\u522b\u7ef4\u62a4\u5168\u5c40\u7684$set$\u548c\u6bcf\u79cd\u989c\u8272\u7684$set$\uff0c\u4e24\u8fb9\u4e00\u8d77\u4fee\u6539\u4f1a\u6bd4\u8f83\u65b9\u4fbf\u3002\n### **\u4ee3\u7801**\n\u91c7\u7528\u6811\u5957\u6811\n\n\u5e38\u6570\u5de8\u5927\u3002\n```cpp\n#include<bits/stdc++.h>\n#define ins insert\n#define era erase\n#define Ub(x) upper_bound(Data(x))\n#define Lb(x) lower_bound(Data(x))\nconst int N = 4e5 + 10;\nint ri() {\n    char c = getchar(); int x = 0, f = 1; for(;c < '0' || c > '9'; c = getchar()) if(c == '-') f = -1;\n    for(;c >= '0' && c <= '9'; c = getchar()) x = (x << 1) + (x << 3) - '0' + c; return x * f;\n}\nint n, Mx, cnt, pre[N], a[N];\nstruct Data {\n    int l, r, col;\n    Data(int _l = 0, int _r = 0, int _col = 0) : l(_l), r(_r), col(_col) {}\n    bool operator < (const Data &a) const {return l < a.l;}\n};\nstd::set<Data>st[N], all;\nstd::set<Data>::iterator it;\nstd::set<int>nw;\nstd::set<int>::iterator it2;\nstd::map<int, int>M;\nstruct Val_Segment{\n    int s[N * 50], ls[N * 50], rs[N * 50], sz;\n    void Modify(int &p, int L, int R, int x, int v) {\n        s[p ? p : p = ++sz] += v;\n        if(L == R) return ; int m = L + R >> 1;\n        x <= m ? Modify(ls[p], L, m, x, v) : Modify(rs[p], m + 1, R, x, v);\n    }\n    int Query(int p, int L, int R, int ed) {\n        if(!p || ed == R) return s[p]; int m = L + R >> 1;\n        return ed <= m ? Query(ls[p], L, m, ed) : s[ls[p]] + Query(rs[p], m + 1, R, ed);\n    }\n}seg;\nstruct Pos_Segment {\n    int rt[N];\n    void Modify(int x, int l, int v) {\n        for(;x <= n; x += x&-x)\n            seg.Modify(rt[x], 0, Mx, l, v);\n    }\n    int Query(int x, int k) {\n        int r = 0;\n        for(;x; x -= x&-x)\n            r += seg.Query(rt[x], 0, Mx, k);\n        return r;\n    }\n    int Query(int l, int r, int k) {return Query(r, k) - Query(l - 1, k);}\n}Rt;\nvoid Up(int x, int v) {\n    Rt.Modify(x, pre[x], -1);\n    pre[x] = v;\n    Rt.Modify(x, pre[x], 1);\n}\nvoid Ins(int l, int r, int col) {\n    st[col].ins(Data(l, r)); all.ins(Data(l, r, col));\n}\nvoid Era(Data x) {\n    st[x.col].era(x); all.era(x);\n}\nvoid Split(int x) {\n    it = all.Ub(x); --it;\n    if(it->l == x) return ;\n    Data tmp = *it;\n    Era(tmp);\n    Ins(tmp.l, x - 1, tmp.col);\n    Ins(x, tmp.r, tmp.col);\n}\nvoid Modify(int l, int r, int col) {\n    Split(l);\n    if(r < n) Split(r + 1);\n    nw.clear(); nw.ins(col);\n    for(;1;) { //\u628a\u6240\u6709\u4ecb\u4e8el\uff0cr\u7684\u533a\u95f4\u5168\u90e8\u6293\u51fa\u6765\u3002 \n        it = all.Lb(l);\n        if(it == all.end() || it->l > r)\n            break;\n        Data tmp = *it; nw.ins(tmp.col);\n        if(tmp.l > l && pre[tmp.l] != tmp.l - 1) \n            Up(tmp.l, tmp.l - 1);\n        Era(tmp);\n    }\n    it = st[col].Lb(l); Up(l, (--it)->r);\n    Ins(l, r, col); \n    for(it2 = nw.begin();it2 != nw.end(); ++it2) { //\u6240\u6709\u53f3\u7aef\u70b9\u5f00\u5934\u7684\u90fd\u8981\u4fee\u6539\u3002 \n        it = st[*it2].Ub(r);\n        if(it == st[*it2].end())\n            continue;\n        int pos = it->l;\n        it = st[*it2].Lb(pos); \n        Up(pos, (--it)->r);\n    }\n}\nint main() {\n    n = ri(); int q = ri(); Mx = n + q;\n    for(int i = 1;i <= n; ++i) {\n        a[i] = ri();\n        if(!M[a[i]]) \n            st[M[a[i]] = ++cnt].insert(Data());\n        a[i] = M[a[i]];\n    }\n    for(int i = 1;i <= n; ++i) {\n        it = st[a[i]].end(); --it; pre[i] = it->l; \n        Rt.Modify(i, pre[i], 1);\n        Ins(i, i, a[i]);\n    }\n    for(;q--;) {\n        int op = ri(), l = ri(), r = ri();\n        if(op == 1) {\n            int x = ri();\n            if(!M[x])\n                st[M[x] = ++cnt].insert(Data());\n            x = M[x]; Modify(l, r, x);\n        }\n        else if(op == 2)\n            printf(\"%d\\n\", Rt.Query(l, r, l - 1));\n    }\n    return 0;\n}\n```\n",
        "postTime": 1543924307,
        "uid": 2218,
        "name": "2014\u5415\u6cfd\u9f99",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "\u989c\u8272\u6bb5\u5747\u644a\u6709\u4e24\u5c42\u542b\u4e49\uff0c\u90fd\u662f\u5efa\u7acb\u5728\u5b58\u5728\u533a\u95f4\u8d4b\u503c\uff08\u63a8\u5e73\uff09\u64cd\u4f5c\u7684\u57fa\u7840\u4e0a\u3002\n\n1. \u968f\u673a\u6570\u636e\uff1a\u4efb\u610f\u65f6\u523b\u7684\u989c\u8272\u6bb5\u4e2a\u6570\u671f\u671b $O(\\log_2n)$\uff1b\n2. \u975e\u968f\u673a\u6570\u636e\uff08\u672c\u9898\uff09\uff1a\u6bcf\u6b21\u63a8\u5e73\u65f6\u8bbf\u95ee\u7684\u989c\u8272\u6bb5\u4e2a\u6570\u4e3a\u5747\u644a $O(n)$\u3002\n\n\u8003\u8651\u672c\u9898\u6709\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f7f\u7528\u73c2\u6735\u8389\u6811\uff0c\u7136\u800c\u6211\u4eec\u53d1\u73b0\u6570\u636e\u4e0d\u968f\u673a\uff0c\u6240\u4ee5\u66b4\u529b\u4e0a\u73c2\u6735\u8389\u6811\u662f $O(n^2)$ \u7684\uff0c\u4e0d\u8981\u60f3\u7740\u7528\u8fd9\u79cd\u65b9\u6cd5\u8fc7\u53bb\u3002\n\n\u56e0\u4e3a\u8981\u6c42\u7684\u662f\u4e0d\u540c\u989c\u8272\u4e2a\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53ea\u7b97\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\uff0c\u8bbe $pre_x=\\max\\limits_{(y<x\\land a_y=a_x)\\lor y=0}y$\uff0c\u5373\u4e0a\u4e00\u6b21\u51fa\u73b0\u6216\u8005\u5b83\u5728\u6570\u7ec4\u91cc\u7b2c\u4e00\u6b21\u51fa\u73b0\uff0c\u5219\u4e3a $0$\u3002\n\n\u8fd9\u4e2a\u6570\u7ec4\u6709\u4ec0\u4e48\u7528\uff1f\u53d1\u73b0 $x$ \u5728\u533a\u95f4 $[l,r]$ \u7b2c\u4e00\u6b21\u51fa\u73b0\u5f53\u4e14\u4ec5\u5f53 $x\\in[l,r],pre_x\\in[0,l)$\uff0c\u4e8e\u662f\u5c31\u53d8\u6210\u4e86\u5178\u578b\u7684\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\uff0c\u53ef\u4ee5\u7528 CDQ \u5206\u6cbb\u89e3\u51b3\u3002\n\n\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u6570\u7ec4\uff1f\u56e0\u4e3a\u6bcf\u6b21\u63a8\u5e73\u64cd\u4f5c\u65f6\uff0c\u6bcf\u4e00\u4e2a\u88ab\u5220\u9664\u7684\u989c\u8272\u6bb5\u90fd\u4f1a\u6709 $O(1)$ \u6b21\u4fee\u6539\uff0c\u6240\u4ee5\u603b\u4fee\u6539\u6570\u662f $O(n)$ \u7684\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log_2^2n)$\uff0c\u5177\u4f53\u5b9e\u73b0\u65f6\u8981\u7528 `set` \u7ef4\u62a4\u6bcf\u79cd\u989c\u8272\u7684\u5f53\u524d\u5b58\u5728\u6bb5\uff0c\u4ee5\u4fbf\u5220\u9664\u6bb5\u65f6\u66f4\u6539\u540e\u7ee7\u5de6\u7aef\u70b9\u7684 $pre$ \u503c\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nusing ll=long long;\nint n,QT,a[N],qt,rq,pr[N],mp[N],mt;\nstruct Q{int l,r,d,p;}q[N*6],q2[N*6];\nstruct odt{\n    int l,r;mutable int d;\n    bool operator<(const odt &z)\n    const{return l<z.l;}\n};\nstruct rag{\n    int l,r;\n    bool operator<(const rag &z)\n    const{return r<z.r;}\n};\nvoid addp(int x,int d){q[++rq]={pr[x],x,d};}\nvoid cgpr(int x,int y){\n    if(pr[x]!=y)addp(x,-1),pr[x]=y,addp(x,1);\n}\nstruct RGdt:set<rag>{\n    void add(int l,int r){\n        auto it=lower_bound({0,r});\n        if(it!=end())cgpr(it->l,r);\n        if(it!=begin())--it,cgpr(l,it->r);\n        else cgpr(l,0);\n        insert({l,r});\n    }void del(int l,int r){\n        erase({l,r});\n        auto it=lower_bound({0,r});\n        if(it!=end()){\n            if(it!=begin()){\n                auto at=it;--at;\n                cgpr(it->l,at->r);\n            }else cgpr(it->l,0);\n        }\n    }\n}lt[N];\nstruct Odt:set<odt>{\n    set<odt>::iterator split(int r){\n        if(r>n)return end();\n        auto it=lower_bound({r});\n        if(it!=end()&&it->l==r)return it;\n        --it;int L=it->l,R=it->r,D=it->d;\n        lt[D].erase({L,R}),lt[D].insert({L,r-1});\n        lt[D].insert({r,R});\n        erase(it),insert({L,r-1,D});\n        auto res=insert({r,R,D}).first;\n        return res;\n    }\n}ADT;\nll ct[N],ans[N];\nvoid solve(int l,int r){\n    if(l>=r)return;\n    int i,x,y,md=l+r>>1;\n    solve(l,md),solve(md+1,r);\n    for(x=md+1,y=l;x<=r;++x){\n        while(y<=md&&q[y].l<=q[x].l){\n            if(!q[y].p)for(i=q[y].r;i<=n;i+=i&-i)ct[i]+=q[y].d;++y;\n        }if(q[x].p)for(i=q[x].r;i;i-=i&-i)ans[q[x].p]+=q[x].d*ct[i];\n    }\n    for(x=l;x<y;++x)\n        if(!q[x].p)for(i=q[x].r;i<=n;i+=i&-i)ct[i]-=q[x].d;\n    merge(q+l,q+md+1,q+md+1,q+r+1,q2+l,[&](Q x,Q y){\n        return x.l<y.l;\n    });for(i=l;i<=r;++i)q[i]=q2[i];\n}\nint main(){\n    ios::sync_with_stdio(false);\n    int i,j,A,l,r,d,qi;cin>>n>>QT;\n    for(i=1;i<=n;++i)cin>>a[i],mp[++mt]=a[i];\n    for(qi=1;qi<=QT;++qi){\n        cin>>q2[qi].p>>q2[qi].l>>q2[qi].r;\n        if(q2[qi].p==1){\n            cin>>q2[qi].d;\n            mp[++mt]=q2[qi].d;\n        }\n    }\n    sort(mp+1,mp+mt+1),unique(mp+1,mp+mt+1)-mp-1;\n    for(i=1;i<=n;++i)a[i]=lower_bound(mp+1,mp+mt+1,a[i])-mp;\n    for(qi=1;qi<=QT;++qi)\n        if(q2[qi].p==1)\n            q2[qi].d=lower_bound(mp+1,mp+mt+1,q2[qi].d)-mp;\n    for(i=1;i<=n;++i){\n        ADT.insert({i,i,a[i]});\n        if(lt[a[i]].size()){\n            auto it=lt[a[i]].end();--it;\n            pr[i]=it->r;\n        }lt[a[i]].insert({i,i});\n        addp(i,1);\n    }\n    for(qi=1;qi<=QT;++qi){\n        A=q2[qi].p,l=q2[qi].l,r=q2[qi].r,d=q2[qi].d;\n        if(A==1){\n            auto R=ADT.split(r+1),L=ADT.split(l);\n            auto it=L;lt[it->d].del(it->l,it->r);\n            for(++it;it!=R;++it)cgpr(it->l,it->l-1),lt[it->d].del(it->l,it->r);\n            ADT.erase(L,R);\n            ADT.insert({l,r,d});\n            lt[d].add(l,r);\n        }else{\n            ++qt,q[++rq]={l-1,r,1,qt};\n            q[++rq]={l-1,l-1,-1,qt};\n        }\n    }solve(1,rq);\n    for(i=1;i<=qt;++i)\n        printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1675899469,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u989c\u8272\u6bb5\u5747\u644a\u548c CDQ \u5206\u6cbb"
    },
    {
        "content": "[**\u4e0d\u77e5\u9053\u66f4\u597d\u8fd8\u662f\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c**](https://www.cnblogs.com/VCLS01/p/14823564.html)\n## \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\u3002\u5171\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n - `1 l r x`\uff0c\u5c06 $[l,r]$ \u533a\u95f4\u8d4b\u503c\u4e3a $x$\u3002\n - `2 l r`\uff0c\u6c42 $[l,r]$ \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6570\u3002\n\n**\u6570\u636e\u8303\u56f4\uff1a**$1\\le n,m\\le 10^5$\uff0c$a_i\\le 10^9$\u3002\n\n**\u65f6\u95f4\u8303\u56f4\uff1a**$1500\\operatorname{ms}$\u3002\n\n## Solution\n\n\u76f4\u63a5\u66b4\u529b\u662f $O(n^2)$ \u7684\uff0c~~\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\uff0c\u4e0d\u9700\u8981~~\u8003\u8651\u4f18\u5316\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u6c42\u51fa\u4e0a\u4e00\u4e2a\u4e0e\u8fd9\u4e2a\u6570\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u5b9a\u4e3a $pre$\uff0c\u6ca1\u6709\u5219\u4e3a $0$\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u8d4b\u503c\uff0c\u6211\u4eec\u53d1\u73b0\u5f53\u6211\u4eec\u4f1a\u4ee4 $\\forall i\\in(l,r],pre_i\\leftarrow i-1$\uff0c\u5bf9\u4e8e $i=l$ \u7279\u5224\u5373\u53ef\u3002\n\n\u540c\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u4fee\u6539\u4f4d\u4e8e $[l,r]$ \u4e2d\u7684\u5143\u7d20\u65f6\uff0c\u4e0e\u5b83\u76f8\u540c\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u7684 $pre$ \u4e5f\u4f1a\u53d8\uff1b\u540c\u65f6\u989c\u8272\u4e0e $x$ \u76f8\u540c\u7684\u4f4d\u7f6e $>r$ \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 $pre$ \u4e5f\u4f1a\u53d8\u3002\u7279\u5224\u5373\u53ef\u3002\n\n\u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002~~\u5927\u4f6c\u4eec\u90fd\u5199\u4e86\u6211\u5c31\u4e0d\u8bc1\u4e86\u3002~~\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 $\\sum_{i=l}^{r}[pre_i<l]$\uff0c\u4e09\u7ef4\u6570\u70b9\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log^2 n)$\u3002\n## Code\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<set>\nusing namespace std;\nconst int maxn=200010,maxq=1000010;\ntypedef pair<int,int> PII;\nstruct Data{\n\tint x,y,z,k,d,ans;\n\tinline Data(){}\n\tinline Data(int _x,int _y,int _z,int _k,int _d){x=_x;y=_y;z=_z;k=_k;d=_d;ans=0;}\n\tinline bool operator<(const Data &da)const{return x!=da.x?x<da.x:(y!=da.y?y<da.y:z<da.z);}\n}q[maxq],w[maxq/2];\nstruct Operation{\n\tint opt,l,r,x;\n}p[maxn];\nint pre[maxn],n,m,tot,a[maxn],b[maxn],cnt,ans[maxn];\ninline bool cmpy(const Data &d1,const Data &d2){return d1.y!=d2.y?d1.y<d2.y:d1.z<d2.z;}\nstruct Color{\n\tset<PII>col,v[maxn];\n\tinline void Split(int k){\n\t\tset<PII>::iterator it=col.lower_bound(make_pair(k+1,0));\n\t\tint r=it->first-1;--it;\n\t\tint l=it->first;\n\t\tif(k==r)return;\n\t\tint c=it->second;\n\t\tcol.erase(it);\n\t\tcol.insert(make_pair(l,c));col.insert(make_pair(k+1,c));\n\t\tv[c].erase(make_pair(l,r));\n\t\tv[c].insert(make_pair(l,k));v[c].insert(make_pair(k+1,r));\n\t}\n\tinline void Insert(int l,int r,int c,int t){\n\t\tSplit(l-1);Split(r);\n\t\tfor(set<PII>::iterator it=col.lower_bound(make_pair(l,0));it->first<=r;){\n\t\t\tint x=it->first,y=it->second;\n\t\t\t++it;int z=it->first-1;\n\t\t\tcol.erase(make_pair(x,y));\n\t\t\tv[y].erase(make_pair(x,z));\n\t\t\tif(x==l){\n\t\t\t\tint e=(--(v[c].upper_bound(make_pair(x,0))))->second;\n\t\t\t\tif(pre[x]!=e){\n\t\t\t\t\tq[++tot]=Data(t,x,pre[x],0,-1);\n\t\t\t\t\tpre[x]=e;\n\t\t\t\t\tq[++tot]=Data(t,x,pre[x],0,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(pre[x]!=x-1){\n\t\t\t\t\tq[++tot]=Data(t,x,pre[x],0,-1);\n\t\t\t\t\tpre[x]=x-1;\n\t\t\t\t\tq[++tot]=Data(t,x,pre[x],0,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tx=z+1;\n\t\t\tz=(v[y].lower_bound(make_pair(x,0)))->first;\n\t\t\tint e=(--v[y].lower_bound(make_pair(l,0)))->second;\n\t\t\tif(z>r&&z<=n&&pre[z]!=e){\n\t\t\t\tq[++tot]=Data(t,z,pre[z],0,-1);\n\t\t\t\tpre[z]=e;\n\t\t\t\tq[++tot]=Data(t,z,pre[z],0,1);\n\t\t\t}\n\t\t}\n\t\tset<PII>::iterator it=v[c].lower_bound(make_pair(r+1,0));\n\t\tint x=it->first;\n\t\tif(x<=n&&pre[x]!=r){\n\t\t\tq[++tot]=Data(t,x,pre[x],0,-1);\n\t\t\tpre[x]=r;\n\t\t\tq[++tot]=Data(t,x,pre[x],0,1);\n\t\t}\n\t\tv[c].insert(make_pair(l,r));\n\t\tcol.insert(make_pair(l,c));\n\t\tx=r+1;\n\t\tif(x<=n){\n\t\t\tit=col.lower_bound(make_pair(x,0));\n\t\t\tint y=it->second;\n\t\t\tint e=(--v[y].lower_bound(make_pair(x,0)))->second;\n\t\t\tif(pre[x]!=e){\n\t\t\t\tq[++tot]=Data(t,x,pre[x],0,-1);\n\t\t\t\tpre[x]=e;\n\t\t\t\tq[++tot]=Data(t,x,pre[x],0,1);\n\t\t\t}\n\t\t}\n\t}\n}color;\nstruct TreeArray{\n\t#define lowbit(x) (x&-x)\n\tint tr[maxn];\n\tinline void add(int x,int d){++x;while(x<maxn)tr[x]+=d,x+=lowbit(x);}\n\tinline int ask(int x){++x;int ans=0;while(x)ans+=tr[x],x-=lowbit(x);return ans;}\n\t#undef lowbit\n}BIT;\ninline void CDQ(int l,int r){\n\tif(l>=r)return;\n\tint mid=(l+r)>>1;\n\tCDQ(l,mid);CDQ(mid+1,r);\n\tint i=l,j=mid+1,k=0;\n\tbool flag=(l!=1||r!=tot);\n\twhile(i<=mid&&j<=r){\n\t\tif(q[i].y<=q[j].y){if(q[i].k==0)BIT.add(q[i].z,q[i].d);if(flag)w[k++]=q[i];++i;}\n\t\telse{if(q[j].k==1)q[j].ans+=BIT.ask(q[j].z);if(flag)w[k++]=q[j];++j;}\n\t}\n\twhile(i<=mid){if(q[i].k==0)BIT.add(q[i].z,q[i].d);if(flag)w[k++]=q[i];++i;}\n\twhile(j<=r){if(q[j].k==1)q[j].ans+=BIT.ask(q[j].z);if(flag)w[k++]=q[j];++j;}\n\tfor(i=l;i<=mid;++i)if(q[i].k==0)BIT.add(q[i].z,-q[i].d);\n\tif(flag)for(int i=0;i<k;++i)q[i+l]=w[i];\n}\nFILE *read=stdin,*write=stdout;\nint main(){\n\tfscanf(read,\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)fscanf(read,\"%d\",&a[i]),b[++cnt]=a[i];\n\tfor(int i=1;i<=m;++i){\n\t\tfscanf(read,\"%d%d%d\",&p[i].opt,&p[i].l,&p[i].r);\n\t\tif(p[i].opt==1)fscanf(read,\"%d\",&p[i].x),b[++cnt]=p[i].x;\n\t}\n\tsort(b+1,b+cnt+1);\n\tcnt=unique(b+1,b+cnt+1)-b-1;\n\tfor(int i=1;i<=n;++i)a[i]=lower_bound(b+1,b+cnt+1,a[i])-b;\n\tfor(int i=1;i<=m;++i)if(p[i].opt==1)p[i].x=lower_bound(b+1,b+cnt+1,p[i].x)-b;\n\tfor(int i=1;i<=cnt;++i)\n\t\tcolor.v[i].insert(make_pair(0,0));\n\tfor(int i=1;i<=n;++i){\n\t\tpre[i]=(--color.v[a[i]].end())->second;\n\t\tq[++tot]=Data(0,i,pre[i],0,1);\n\t\tcolor.v[a[i]].insert(make_pair(i,i));\n\t\tcolor.col.insert(make_pair(i,a[i]));\n\t}\n\tfor(int i=1;i<=cnt;++i)\n\t\tcolor.v[i].insert(make_pair(n+1,0));\n\tcolor.col.insert(make_pair(0,0));\n\tcolor.col.insert(make_pair(n+1,n+1));\n\tfor(int i=1;i<=m;++i){\n\t\tif(p[i].opt==1)\n\t\t\tcolor.Insert(p[i].l,p[i].r,p[i].x,i);\n\t\telse{\n\t\t\tq[++tot]=Data(i,p[i].r,p[i].l-1,1,1);\n\t\t\tq[++tot]=Data(i,p[i].l-1,p[i].l-1,1,-1);\n\t\t}\n\t}\n\tsort(q+1,q+tot+1);\n\tCDQ(1,tot);\n\tfor(int i=1;i<=tot;++i)\n\t\tif(q[i].k)ans[q[i].x]+=q[i].ans*q[i].d;\n\tfor(int i=1;i<=m;++i)\n\t\tif(p[i].opt==2)fprintf(write,\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1622200778,
        "uid": 375785,
        "name": "x7103",
        "ccfLevel": 9,
        "title": "P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b"
    },
    {
        "content": "\u770b\u5230\u533a\u95f4\u63a8\u5e73\uff0c\u8003\u8651 ODT\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u8981\u6c42\u533a\u95f4\u4e0d\u540c\u6570\u7684\u6570\u91cf\uff0c\u9664\u975e\u6570\u636e\u968f\u673a\uff08\u53ef\u4ee5\u65f6\u95f4\u6233 + \u66b4\u529b\u904d\u5386\u505a\u5230 1log\uff09\uff0c\u611f\u89c9\u4e0d\u592a\u597d\u505a\u4e86\u2026\u2026\n\n\u6ce8\u610f\u5230\u533a\u95f4\u51fa\u73b0\u4e0d\u540c\u6570\u7684\u6b21\u6570\u6709\u4e00\u4e2a\u7b49\u4ef7\u5f62\u5f0f\uff1a\n\n- $\\displaystyle\\sum_{i = l}^r [nxt_i > r]$\uff0c\u5176\u4e2d $nxt_i$ \u8868\u793a\u4e0b\u4e00\u4e2a\u4e0e $i$ \u76f8\u540c\u7684\u6570\uff0c\u4e0d\u5b58\u5728\u5219\u4e3a $n + 1$\u3002\n\n\u5047\u5982 $nxt_i$ \u7684\u4fee\u6539\u6b21\u6570\u8f83\u5c11\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u5bf9\u5e8f\u5217\u5206\u5757\u3001\u5728\u5757\u5185\u518d\u7ef4\u62a4\u4e00\u4e2a $O(\\sqrt{n})$ \u4fee\u6539\u3001$O(1)$ \u67e5\u8be2\u540e\u7f00\u548c\u7684\u503c\u57df\u5206\u5757\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u505a\u5230 $O((n + m + k) \\sqrt{n})$ \u4e86\uff0c\u5176\u4e2d $k$ \u8868\u793a\u4fee\u6539\u6b21\u6570\u3002\n\n\u6ce8\u610f\u5230\u6bcf\u6b21\u5728 ODT \u4e0a\u7684\u4fee\u6539\u53ea\u4f1a\u5f71\u54cd\u4e0b\u9762\u8fd9\u6837\u7684\u4f4d\u7f6e\uff1a\n\n- \u88ab\u5220\u6389\u7684\u533a\u95f4 $[l', r', x']$ \u7684 $r'$\u3002\n- \u53e6\u4e00\u4e2a\u533a\u95f4 $[l'', r'', x']$ \u7684 $r''$ \u6ee1\u8db3 $r'' < l'$ \u4e14\u6700\u5927\u3002\n- \u53e6\u4e00\u4e2a\u533a\u95f4 $[l'', r'', x]$ \u7684 $r''$ \u6ee1\u8db3 $r'' < l$ \u4e14\u6700\u5927\u3002\n\n\u4e8e\u662f\u4fee\u6539\u6b21\u6570\u662f $O(n + m)$ \u7684\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((n + m) \\sqrt{n})$\u3002\n\n\u4e3a\u4e86\u5361\u7a7a\u95f4\uff0c\u6211\u5c06\u5e8f\u5217\u5206\u5757\u5757\u957f\u8bbe\u4e3a $\\frac{\\sqrt{n}}{8}$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <set>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\ntypedef struct {\n\tint belong[100007];\n\tint lft[327];\n\tint rt[327];\n\tint suf1[327];\n\tint suf2[100007];\n\t\n\tinline void init(int n){\n\t\tint block = sqrt(n), m = (n - 1) / block + 1;\n\t\tfor (register int i = 1; i <= n; i++){\n\t\t\tbelong[i] = (i - 1) / block + 1;\n\t\t}\n\t\tfor (register int i = 1; i <= m; i++){\n\t\t\tlft[i] = block * (i - 1) + 1;\n\t\t\trt[i] = min(i * block, n);\n\t\t}\n\t}\n\t\n\tinline void del(int x){\n\t\tfor (register int i = 1; i <= belong[x]; i++){\n\t\t\tsuf1[i]--;\n\t\t}\n\t\tfor (register int i = lft[belong[x]]; i <= x; i++){\n\t\t\tsuf2[i]--;\n\t\t}\n\t}\n\t\n\tinline void add(int x){\n\t\tfor (register int i = 1; i <= belong[x]; i++){\n\t\t\tsuf1[i]++;\n\t\t}\n\t\tfor (register int i = lft[belong[x]]; i <= x; i++){\n\t\t\tsuf2[i]++;\n\t\t}\n\t}\n\t\n\tinline int get_sum(int x){\n\t\treturn suf1[belong[x] + 1] + suf2[x];\n\t}\n} Block;\n\ntypedef struct Node_tag {\n\tint l;\n\tint r;\n\tint val;\n\tNode_tag(int l_, int r_, int val_){\n\t\tl = l_;\n\t\tr = r_;\n\t\tval = val_;\n\t}\n} Node;\n\nint block;\nbool type = false;\nint belong[100007], lft[47], rt[47], a[100007], b[200007], nxt[100007], op[100007], l[100007], r[100007], x[100007], bucket[200007], val[200007];\nBlock blk[47];\nset<Node> s1, s2[200007];\n\nbool operator <(const Node a, const Node b){\n\treturn !type ? a.r < b.r : a.l < b.l;\n}\n\nbool operator ==(const Node a, const Node b){\n\treturn a.l == b.l && a.r == b.r && a.val == b.val;\n}\n\ninline set<Node>::iterator insert(Node x){\n\ts2[x.val].insert(x);\n\treturn s1.insert(x).first;\n}\n\ninline void modify(int x, int y){\n\tif (nxt[x] != 0) blk[belong[x]].del(nxt[x]);\n\tnxt[x] = y;\n\tblk[belong[x]].add(y);\n}\n\ninline void erase(Node x){\n\ts1.erase(x);\n\ts2[x.val].erase(x);\n}\n\ninline set<Node>::iterator split(int x){\n\tset<Node>::iterator it;\n\ttype = true;\n\tit = s1.lower_bound(Node(x, 0, 0));\n\ttype = false;\n\tif (it != s1.end() && it->l == x) return it;\n\tNode cur = *(--it);\n\tif (cur.r < x) return s1.end();\n\terase(cur);\n\tif (cur.l < x) insert(Node(cur.l, x - 1, cur.val));\n\treturn insert(Node(x, cur.r, cur.val));\n}\n\nint main(){\n\tint n, m, k, ni, y = 0;\n\tscanf(\"%d %d\", &n, &m);\n\tblock = sqrt(n) * 7.0;\n\tk = (n - 1) / block + 1;\n\tni = n + 1;\n\tfor (register int i = 1; i <= n; i++){\n\t\tbelong[i] = (i - 1) / block + 1;\n\t}\n\tfor (register int i = 1; i <= k; i++){\n\t\tlft[i] = block * (i - 1) + 1;\n\t\trt[i] = min(i * block, n);\n\t\tblk[i].init(ni);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tscanf(\"%d\", &a[i]);\n\t\tb[++y] = a[i];\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\tscanf(\"%d %d %d\", &op[i], &l[i], &r[i]);\n\t\tif (op[i] == 1){\n\t\t\tscanf(\"%d\", &x[i]);\n\t\t\tb[++y] = x[i];\n\t\t}\n\t}\n\tsort(b + 1, b + y + 1);\n\ty = unique(b + 1, b + y + 1) - b - 1;\n\tfor (register int i = 1; i <= n; i++){\n\t\ta[i] = lower_bound(b + 1, b + y + 1, a[i]) - b;\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\tif (op[i] == 1) x[i] = lower_bound(b + 1, b + y + 1, x[i]) - b;\n\t}\n\tfor (register int i = n; i >= 1; i--){\n\t\tset<Node>::iterator it;\n\t\tinsert(Node(i, i, a[i]));\n\t\tit = s2[a[i]].lower_bound(Node(0, i + 1, 0));\n\t\tmodify(i, it == s2[a[i]].end() ? ni : it->l);\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\tif (op[i] == 1){\n\t\t\tint cnt = 0;\n\t\t\tset<Node>::iterator it1, it2, it3;\n\t\t\tit1 = split(r[i] + 1);\n\t\t\tit2 = split(l[i]);\n\t\t\tfor (register set<Node>::iterator j = it2; j != it1; j++){\n\t\t\t\tcnt++;\n\t\t\t\tbucket[cnt] = j->r;\n\t\t\t\tval[cnt] = x[i];\n\t\t\t\tit3 = s2[j->val].lower_bound(*j);\n\t\t\t\tif (it3 != s2[j->val].begin()){\n\t\t\t\t\tcnt++;\n\t\t\t\t\tbucket[cnt] = (--it3)->r;\n\t\t\t\t\tval[cnt] = j->val;\n\t\t\t\t}\n\t\t\t\ts2[j->val].erase(*j);\n\t\t\t}\n\t\t\ts1.erase(it2, it1);\n\t\t\tinsert(Node(l[i], r[i], x[i]));\n\t\t\tit3 = s2[x[i]].lower_bound(Node(0, r[i], 0));\n\t\t\tif (it3 != s2[x[i]].begin()){\n\t\t\t\tcnt++;\n\t\t\t\tit3--;\n\t\t\t\tbucket[cnt] = it3->r;\n\t\t\t\tval[cnt] = x[i];\n\t\t\t}\n\t\t\tfor (register int j = 1; j <= cnt; j++){\n\t\t\t\tit3 = s2[val[j]].lower_bound(Node(0, bucket[j] + 1, 0));\n\t\t\t\tmodify(bucket[j], it3 == s2[val[j]].end() ? ni : max(it3->l, bucket[j] + 1));\n\t\t\t}\n\t\t} else {\n\t\t\tint ans = 0;\n\t\t\tif (belong[l[i]] == belong[r[i]]){\n\t\t\t\tfor (register int j = l[i]; j <= r[i]; j++){\n\t\t\t\t\tif (nxt[j] > r[i]) ans++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint ri = r[i] + 1;\n\t\t\t\tfor (register int j = l[i]; j <= rt[belong[l[i]]]; j++){\n\t\t\t\t\tif (nxt[j] > r[i]) ans++;\n\t\t\t\t}\n\t\t\t\tfor (register int j = belong[l[i]] + 1; j < belong[r[i]]; j++){\n\t\t\t\t\tans += blk[j].get_sum(ri);\n\t\t\t\t}\n\t\t\t\tfor (register int j = lft[belong[r[i]]]; j <= r[i]; j++){\n\t\t\t\t\tif (nxt[j] > r[i]) ans++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout << ans << endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1675949924,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "# \u9898\u610f\n\u7ef4\u62a4\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217 $a_i$\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\u3002\n\n1.\u5c06\u533a\u95f4 $[l,r]$ \u7684\u503c\u4fee\u6539\u4e3a $x$ \u3002\n\n2.\u8be2\u95ee\u533a\u95f4 $[l,r]$ \u51fa\u73b0\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u540c\u4e00\u4e2a\u6570\u51fa\u73b0\u591a\u6b21\u53ea\u7b97\u4e00\u4e2a\u3002\n\n# sol\n\n\u8fd9\u662f\u4e00\u7bc7\u7ebf\u6027\u7a7a\u95f4\u5206\u5757\u505a\u6cd5\uff0c\u4f46\u6548\u7387\u5f88\u9ad8\uff0c\u662f\u76ee\u524d\u7684[\u6700\u4f18\u89e3](https://www.luogu.com.cn/record/list?pid=P4690&orderBy=1&status=&page=1)\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u7ef4\u62a4\u4e00\u4e2a\u503c\uff0c\u8868\u793a\u4e0a\u4e00\u4e2a\u8be5\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\n\u56e0\u4e3a\u503c\u57df\u5f88\u5927\uff0c\u6240\u4ee5\u8981\u79bb\u6563\u5316\u3002\n\n\u90a3\u4e48\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\uff0c\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u4e2d\u503c\u5c0f\u4e8e\u5de6\u7aef\u70b9\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u8003\u8651\u5206\u5757\uff0c\u5757\u5185\u5b58\u6bcf\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u524d\u7f00\u548c\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u7b54\u6848\u4e86\u3002\n\n\u4f46\u56e0\u4e3a\u6709\u4fee\u6539\uff0c\u8fd9\u6837\u65f6\u95f4\u662f $O(n^2)$ \u7684\u3002\n\n\u8003\u8651\u5230\u4e00\u4e2a\u5757\u5185\u5b9e\u9645\u53ea\u6709 $O(\\sqrt{n})$ \u4e2a\u4e0d\u540c\u7684\u53d6\u503c\uff0c\u6240\u4ee5\u53ea\u7528\u7ef4\u62a4\u8fd9\u4e9b\u503c\u7684\u7b54\u6848\uff0c\u4e8e\u662f\u66b4\u529b\u4fee\u6539\u7684\u590d\u6742\u5ea6\u5c31\u53ea\u6709 $O(\\sqrt{n})$ \u4e86\u3002\n\n\u4f46\u8fd9\u6837\u7684\u8bdd\u8981\u4e48\u5bf9\u6bcf\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a $n$ \u7684\u6570\u7ec4\u5b9e\u73b0 $O(1)$ \u67e5\uff0c\u8981\u4e48\u6bcf\u6b21\u82b1\u8d39 $O(\\log{n})$ \u7684\u65f6\u95f4\u4e8c\u5206\u67e5\u3002\n\n\u8981\u4e48\u65f6\u95f4\u7206\u70b8\uff0c\u8981\u4e48\u7a7a\u95f4\u7206\u70b8\u3002\n\n\u90a3\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\n\u8003\u8651\u521a\u624d\u7684\u64cd\u4f5c\u5b9e\u9645\u4e0a\u53ea\u662f\u627e\u4e86\u4e00\u4e9b\u503c\u51fa\u6765\u5bf9\u503c\u57df\u505a\u79bb\u6563\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5757\u53d6\u503c\u7684\u4e0d\u540c\uff0c\u6240\u4ee5\u4e0d\u65b9\u4fbf\u67e5\u8be2\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u5757\u7684\u53d6\u503c\u76f8\u540c\uff0c\u8fd9\u6837\u5c31\u80fd\u7ebf\u6027\u7a7a\u95f4 $O(1)$ \u67e5\u8be2\u4e86\u3002\n\n\u4f46\u6709\u610f\u4e49\u7684\u53d6\u503c\u6709 $O(n)$ \u4e2a\uff0c\u8fd9\u6837\u5b50\u53c8\u56de\u53bb\u4e86\u3002\n\n\u8003\u8651\u6709\u610f\u4e49\u7684\u5b9e\u9645\u4e0a\u662f\u8be2\u95ee\u7684\u53d6\u503c\uff0c\u800c\u975e\u5757\u5185\u7684\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u8be2\u95ee\u5206\u5757\u3002\n\n\u6bcf $O(\\sqrt{n})$ \u4e2a\u8be2\u95ee\u4e3a\u4e00\u5757\uff0c\u6bcf $O(\\sqrt{n})$ \u4e2a\u8be2\u95ee\u5c31\u6362\u53d6\u503c\u66b4\u529b\u91cd\u6784\u3002\n\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n\\sqrt{n})$ \u7684\u4e86\u3002\n\n\u597d\u50cf\u7f3a\u70b9\u4ec0\u4e48\u3002\u3002\u3002\n\n\u4ee5\u4e0a\u90fd\u662f\u9ed8\u8ba4\u4e86\u4fee\u6539\u4e3a\u5355\u70b9\u4fee\uff0c\u5171 $O(n)$ \u6b21\uff0c\u5b9e\u9645\u4e0a\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u5bf9\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4\u8fdb\u884c $m$ \u6b21\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u6570\u7684\u503c\u603b\u5171\u7684\u6539\u53d8\u6b21\u6570\u4e3a $O(n+m)$ \u7ea7\u522b\u3002\n\n\u4e8e\u662f\u533a\u95f4\u8d4b\u503c\u5c31\u53d8\u6210\u4e86\u5355\u70b9\u4fee\u6539\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7528\u73c2\u6735\u8389\u6811\u6765\u7ef4\u62a4\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define iter set<ODT>::iterator\n#define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int qread()\n{\n    char c=getchar();int x=0;bool f=0;\n    for(;!isdigit(c);c=getchar())f^=!(c^45);\n    for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n    if(f)x=-x;return x;\n}\ninline void qw(register int x)\n{\n\tif(x>9)qw(x/10);\n\tputchar(x%10+'0');\n\treturn ;\n}\nint n,m,a[100010],s,cnt,ans[100010],cl,c[100010],st[500],ed[500],CL,ST[350],ED[350],C[100010],pos[500],tot,sum[500][1000],b[200010],pre[100010];\nstruct xw\n{\n\tint op,l,r,id;\n}q[100010];\nstruct ODT\n{\n\tint l,r,id;\n};\nbool operator <(const ODT x,const ODT y){return x.l<y.l;}\nbool operator >(const ODT x,const ODT y){return x.l>y.l;}\nset<ODT>odt,vis[200010];\ninline iter spilt(register int x)\n{\n\tif(x>n)return odt.end();\n\titer it=--odt.upper_bound((ODT){x,0,0});\n\tif(it->l==x)return it;\n\tint l=it->l,r=it->r,id=it->id;\n\todt.erase(it);\n\todt.insert((ODT){l,x-1,id});\n\treturn odt.insert((ODT){x,r,id}).first;\n}\ninline iter vspilt(register int col,register int x)\n{\n\tif(x>n)return vis[col].end();\n\titer it=--vis[col].upper_bound((ODT){x,0,0});\n\tif(it->l>x||it->r<x)return vis[col].end();\n\tif(it->l==x)return it;\n\tint l=it->l,r=it->r,id=it->id;\n\tvis[col].erase(it);\n\tvis[col].insert((ODT){l,x-1,id});\n\treturn vis[col].insert((ODT){x,r,id}).first;\n}\ninline void U(register int sc,register int x,register int y)\n{\n\tif(b[x]==b[y])return ;\n\tif(x<y)for(register int i=b[x];i<b[y];++i)--sum[sc][i];\n\telse for(register int i=b[y];i<b[x];++i)++sum[sc][i];\n\treturn ;\n}\ninline void f(register int x,register int an)\n{\n\tU(c[x],pre[x],an);\n\tpre[x]=an;\n\treturn ;\n}\ninline void ff(register int x,register int col)\n{\n\titer cx=vis[col].lower_bound((ODT){x,0,0});\n\tif(cx->l!=x&&cx!=vis[col].begin())--cx;\n\tif(cx->l<x&&cx->r>=x)\n\t{\n\t\tf(x,x-1);\n\t\treturn ;\n\t}\n\tint an=0;\n\t(cx==vis[col].begin())?((x<=cx->l)?an=0:an=cx->r):((x<=cx->l)?an=(--cx)->r:an=cx->r);\n\tU(c[x],pre[x],an);\n\tpre[x]=an;\n\treturn ;\n}\ninline void assign(register int l,register int r,register int op)\n{\n\titer itr=spilt(r+1),itl=spilt(l);\n\titer it,cx;\n\tint sl,sr,col;\n\tfor(;itl!=itr;)\n\t{\n\t\tit=itl;\n\t\t++itl;\n\t\tsl=it->l,sr=it->r,col=it->id;\n\t\t(sl!=l)?f(sl,sl-1):ff(sl,op);\n\t\tif(sl!=sr&&sr!=r)f(sr,sr-1);\n\t\tcx=vspilt(col,sr+1);\n\t\tcx=vspilt(col,sl);\n\t\tvis[col].erase(cx);\n\t\tcx=vis[col].lower_bound((ODT){sr,0,0});\n\t\tif(cx!=vis[col].end())ff(cx->l,col);\n\t\todt.erase(it);\n\t}\n\todt.insert((ODT){l,r,op});\n\tvis[op].insert((ODT){l,r,op});\n\tcx=vis[op].upper_bound((ODT){l+1,0,0});\n\tif(cx!=vis[op].end())f(cx->l,r);\n\tff(r+1,itr->id);\n\treturn ;\n}\ninline int solve(register int l,register int r)\n{\n\tint an=0;\n\tif(c[l]==c[r])for(register int i=l;i<=r;++i)an+=(pre[i]<l);\n\telse\n\t{\n\t\tfor(register int i=l;i<=ed[c[l]];++i)an+=(pre[i]<l);\n\t\tfor(register int i=c[l]+1;i<c[r];++i)an+=sum[i][b[l]-1];\n\t\tfor(register int i=st[c[r]];i<=r;++i)an+=(pre[i]<l);\n\t}\n\treturn an;\n}\nint main()\n{\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"1.out\",\"w\",stdout);\n\tn=qread();\n\tm=qread();\n\tcl=sqrt(n<<2)+1;\n\tCL=sqrt(m)*3+1;\n\ts=1;\n\tfor(register int i=1;i<=n;++i)b[++tot]=a[i]=qread(),c[i]=(i-1)/cl+1,ed[c[i]]=i;\n\tfor(register int i=n;i;--i)st[c[i]]=i;\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tC[i]=(i-1)/CL+1,ED[C[i]]=i;\n\t\tq[i].op=qread();\n\t\tq[i].l=qread();\n\t\tq[i].r=qread();\n\t\tif(q[i].op==1)b[++tot]=q[i].id=qread();\n\t\telse q[i].id=++cnt;\n\t}\n\tsort(b+1,b+1+tot);\n\ttot=unique(b+1,b+1+tot)-b-1;\n\tfor(register int i=1;i<=n;++i)a[i]=lower_bound(b+1,b+1+tot,a[i])-b;\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tif(a[i]!=a[s])\n\t\t{\n\t\t\todt.insert((ODT){s,i-1,a[s]});\n\t\t\tvis[a[s]].insert((ODT){s,i-1,a[s]});\n\t\t\ts=i;\n\t\t}\n\t}\n\todt.insert((ODT){s,n,a[s]});\n\tvis[a[s]].insert((ODT){s,n,a[s]});\n\tfor(register int i=m;i;--i)ST[C[i]]=i,(q[i].op==1)&&(q[i].id=lower_bound(b+1,b+1+tot,q[i].id)-b);\n\tmemset(b,0,sizeof(b));\n\tfor(register int i=1;i<=n;++i)\n\t{\n\t\tpre[i]=b[a[i]];\n\t\tb[a[i]]=i;\n\t}\n\tfor(register int i=1;i<=C[m];++i)\n\t{\n\t\ttot=0;\n\t\tfor(register int j=ST[i];j<=ED[i];++j)(q[j].op==2)&&(pos[++tot]=q[j].l);\n\t\tsort(pos+1,pos+1+tot);\n\t\ttot=unique(pos+1,pos+1+tot)-pos-1;\n\t\tpos[tot+1]=1e9;\n\t\ts=0;\n\t\tfor(register int j=0;j<=(n+m);++j)\n\t\t{\n\t\t\twhile(j>=pos[s])++s;\n\t\t\tb[j]=s;\n\t\t}\n\t\tfor(register int j=1;j<=c[n];++j)\n\t\t{\n\t\t\tfor(register int i=b[n+m];i;--i)sum[j][i]=0;\n\t\t\tfor(register int k=st[j];k<=ed[j];++k)++sum[j][b[pre[k]]];\n\t\t\tfor(register int k=1;k<=tot;++k)sum[j][k]+=sum[j][k-1];\n\t\t}\n\t\tfor(register int j=ST[i];j<=ED[i];++j)\n\t\t{\n\t\t\tif(q[j].op==1)assign(q[j].l,q[j].r,q[j].id);\n\t\t\telse ans[q[j].id]=solve(q[j].l,q[j].r);\n\t\t}\n\t}\n\tfor(register int i=1;i<=cnt;++i)qw(ans[i]),puts(\"\");\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1670074525,
        "uid": 416521,
        "name": "NATURAL6",
        "ccfLevel": 7,
        "title": "P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b \u9898\u89e3"
    },
    {
        "content": "\u7b97\u662f\u601d\u7ef4\u9898\uff1f\u628a\u6811\u5957\u6811\u5361\u4e86\u5dee\u8bc4\u3002\n\n\u521a\u63a5\u5230\u8fd9\u9053\u9898\u6709\u4e2a\u663e\u7136\u7684\u601d\u8def\uff1a\u76f4\u63a5\u5206\u5757\uff0c\u6574\u4fee\u6253 tag\uff0c\u6563\u4fee\u91cd\u6784\u3002\u4f46\u662f\u67e5\u8be2\u9700\u8981\u5757\u95f4\u505a\u6309\u4f4d\u6216\u64cd\u4f5c\uff0c\u9700\u8981\u7ef4\u62a4 bitset \u4e00\u7c7b\u7684\u7ed3\u6784\u505a\u6309\u4f4d\u6216\u8fd0\u7b97\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u4e0d\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u3002\n\n\u6240\u4ee5\u60f3\u60f3\u533a\u95f4\u989c\u8272\u6570\u6709\u6ca1\u6709\u5176\u4ed6\u65b9\u6cd5\u3002\n\n\u663e\u7136\u53e6\u4e00\u79cd\u7ef4\u62a4\u65b9\u6cd5\u662f\u6c42 pre \u503c\uff0c\u5373\u6c42\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u989c\u8272\u4e0a\u4e00\u6b21\u51fa\u73b0\u5728\u54ea\u91cc\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8ba4\u4e3a\u662f 0 \u4f4d\u7f6e\u3002\u90a3\u67e5\u8be2\u5c31\u663e\u7136\u53ef\u4ee5\u53d8\u4e3a\u67e5\u8be2\u533a\u95f4\u4e2d $pre_i<l$ \u7684\u6570\u91cf\uff0c\u662f\u4e00\u4e2a\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\u3002\n\n\u518d\u770b\u770b\u5982\u4f55\u4fee\u6539\uff1a\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u533a\u95f4\u5185\u6bcf\u4e2a\u4f4d\u7f6e\u7684 pre \u503c\u90fd\u4f1a\u53d1\u751f\u6539\u53d8\u3002\n\n\u7075\u9b42\u62f7\u95ee\uff1a\u771f\u7684\u9700\u8981\u6539\u8fd9\u4e48\u591a\u4f4d\u7f6e\u5417\uff1f\n\n\u7b54\u6848\u663e\u7136\u662f\u4e0d\u9700\u8981\u3002\u5982\u679c\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u8fde\u7eed\u7684\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\u7ef4\u62a4\u6210\u4e00\u4e2a\u6bb5\uff0c\u7c7b\u4f3c\u73c2\u6735\u8389\u6811\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u603b\u7684\u989c\u8272\u6bb5\u6570\u91cf\u5c06\u662f $O(n+m)$ \u91cf\u7ea7\u7684\u3002\u800c\u5c06\u4e00\u4e2a\u989c\u8272\u6bb5\u63a8\u5e73\u6210\u53e6\u4e00\u4e2a\u989c\u8272\uff0c\u9664\u4e86\u6bb5\u5934\u4f4d\u7f6e \uff0c\u4fee\u6539\u524d\u6bb5\u5934\u7684\u540e\u7ee7\u4f4d\u7f6e \uff0c\u4fee\u6539\u540e\u6bb5\u5934\u7684\u540e\u7ee7\u4f4d\u7f6e\u4e09\u4e2a\u70b9\u7684 pre \u4f1a\u53d1\u751f\u6539\u53d8\u5916\uff0c\u5176\u4f59\u4f4d\u7f6e\u7684 pre \u4ecd\u65e7\u662f $i-1$ \u3002\u6240\u4ee5\u603b\u4fee\u6539\u6570\u4e5f\u5728 $O(n+m)$ \u91cf\u7ea7\u3002\u7136\u540e\u6211\u4eec\u5206\u7c7b\u8ba8\u8bba\u8fd9\u51e0\u4e2a\u4fee\u6539\u600e\u4e48\u505a\u3002\n\n\u5177\u4f53\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u989c\u8272\u4e5f\u7ef4\u62a4\u4e00\u4e2a\u73c2\u6735\u8389\u6811\uff0c\u4f60\u5c31\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u6bcf\u4e00\u4e2a\u6bb5\u5934\u7684\u524d\u9a71\uff0c\u540e\u7ee7\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u6bb5\u5934\u7684 pre \uff0c\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4ed6\u4e0d\u5728\u4fee\u6539\u7684 $l$ \u4f4d\u7f6e\uff0c\u90a3\u4e48\u4ed6\u7684 pre \u4f1a\u53d8\u4e3a $i-1$\uff0c\u5426\u5219\u4e00\u6b21 lower_bound \u76f4\u63a5\u53bb\u6539\u540e\u989c\u8272\u91cc\u627e $l$ \u7684\u524d\u9a71\u4f4d\u7f6e\u5373\u53ef\uff1b\u5bf9\u4e8e\u4fee\u6539\u524d\u6bb5\u5934\u7684\u540e\u7ee7\u4f4d\u7f6e\uff0c\u4e5f\u53ea\u9700\u8981\u5728\u6539\u524d\u989c\u8272\u91cc\u627e\u6bb5\u5934\u7684\u540e\u7ee7\u4f4d\u7f6e\uff0c\u5c06\u540e\u7ee7\u7684 pre \u6539\u6210\u6bb5\u5934\u7684\u524d\u9a71\u4f4d\u7f6e\uff1b\u5bf9\u4e8e\u6539\u540e\u6bb5\u5934\u7684\u540e\u7ee7\uff0c\u663e\u7136\u8fd9\u4e2a\u540e\u7ee7\u4f4d\u7f6e\u7684 pre \u503c\u5e94\u8be5\u662f $r$ \u6240\u4ee5\u5728\u505a\u5b8c\u6240\u6709\u4fee\u6539\u540e\u5728\u6539\u540e\u989c\u8272\u91cc\u67e5 $r$ \u7684\u540e\u7ee7\u4f4d\u7f6e\uff0c\u5c06\u5176\u7684 pre \u6539\u6210 $r$ \u5373\u53ef\u3002\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u4e86\u5e26\u4fee\u4e8c\u7ef4\u6570\u70b9\uff0c\u4e5f\u5c31\u662f\u4e09\u4f4d\u504f\u5e8f\u95ee\u9898\u3002\u7531\u4e8e\u7a7a\u95f4\u5361\u7684\u8f83\u6b7b\uff0c\u8fd9\u91cc\u91c7\u7528\u4e86 cdq \u5206\u6cbb\u5b9e\u73b0\u3002\n\n\u5173\u4e8e\u5b9e\u73b0\uff0c\u5efa\u8bae\u5728\u989c\u8272\u6bb5\u91cc\u63d2\u5165 0 \u4f4d\u7f6e\u548c $n+1$\u4f4d\u7f6e\uff0c\u4f1a\u5c11\u5f88\u591a\u7279\u5224\u3002\u7136\u540e\u60f3\u6e05\u695a\u5728\u5199\uff0c\u6bcf\u5199\u4e00\u90e8\u5206\u90fd\u505a\u597d\u8c03\u8bd5\u3002\u5426\u5219\u5de8\u91cf\u7684\u7ec6\u8282\u4f60\u5f88\u96be\u8c03\u8fc7\u6765\uff0c\u8bb0\u5f97\u79bb\u6563\u5316\uff0c\u5f00\u4e0d\u4e0b 1e9 \u7684\u503c\u57df\u3002\n\n\u9632\u6284\u88ad\u53ea\u7ed9\u6838\u5fc3\u90e8\u5206\uff08\uff1f\n\n```\nint n,m,a[N],p[N],lst[N],ans[S];\nint qt;struct oper{int opt,a,b,c;} q[S],b[S];\nstruct node{int l,r;mutable int v;};\nbool operator<(const node &a,const node &b){return a.l<b.l;}\nset<node> s[N];\nnamespace uni{\n\tmap<int,int> mp;int tot;\n\tinline void add(int x){if(mp.count(x)==0) mp[x]=++tot,s[tot].insert(node{0,0,tot}),s[tot].insert(node{n+1,n+1,tot});}\n\tinline int ask(int x){return mp[x];}\n}\n#define It set<node>::iterator\ninline set<node>::iterator split(int op,int p){\n\tset<node>::iterator it=s[op].lower_bound(node{p,0,0});\n\tif(it!=s[op].end()&&it->l==p) return it;\n\t--it;\n\tif(it->r<p) return ++it;\n\tint l=it->l,r=it->r,v=it->v;\n\ts[op].erase(it);\n\ts[op].insert(node{l,p-1,v});\n\treturn s[op].insert(node{p,r,v}).first;\n}\ninline void change(int x,int y){\n\tif(x<1||x>n) return;\n\t++qt;q[qt]=oper{-1,qt,p[x],x};p[x]=y;\n\t++qt;q[qt]=oper{1,qt,p[x],x};\n}\ninline void assign(int l,int r,int v){\n\tIt itr=split(0,r+1),itl=split(0,l),IT;\n\tsplit(itl->v,l),split(itr->v,r+1);\n\tint ll,rr,vv,pre,pos;\n\tfor(It it=itl;it!=itr;++it){\n\t\tll=it->l,rr=it->r,vv=it->v;\n\t\tIT=s[vv].lower_bound(node{ll,0,0});\n\t\tIT--;pre=IT->r;\n\t\tIT++,IT++,pos=IT->l;\n\t\tchange(pos,pre);\n\t\tIT--;s[vv].erase(IT);\n\t\tif(ll==l){\n\t\t\tIT=s[v].lower_bound(node{ll,0,0});IT--;\n\t\t\tchange(ll,IT->r);\n\t\t}else change(ll,ll-1);\n\t}\n\ts[0].erase(itl,itr);\n\ts[0].insert(node{l,r,v});\n\titr=split(v,r+1),itl=split(v,l);\n\ts[v].erase(itl,itr);\n\ts[v].insert(node{l,r,v});\n\tIT=s[v].lower_bound(node{r+1,0,0});\n\tchange(IT->l,r);\n}\nint t[N],ta;\ninline void add(int x,int v){while(x<=n) t[x]+=v,x+=(x&-x);}\ninline int ask(int x){ta=0;while(x) ta+=t[x],x^=(x&-x);return ta;}\ninline bool cmpb(const oper &x,const oper &y){return x.b^y.b?x.b<y.b:x.opt>y.opt;}\nvoid cdq(int l,int r){\n\tif(l==r) return;\n\tint mid=(l+r)>>1;cdq(l,mid);\n\tfor(int i=l;i<=r;++i) b[i]=q[i];sort(q+l,q+r+1,cmpb);\n\tfor(int i=l;i<=r;++i){\n\t\tif(q[i].a<=mid&&q[i].opt^2){\n\t\t\tadd(q[i].c,q[i].opt);\n\t\t}else if(q[i].a>mid&&q[i].opt==2){\n\t\t\tans[q[i].a]+=ask(q[i].c)-ask(q[i].b-1);\n\t\t}\n\t}\n\tfor(int i=l;i<=r;++i) if(q[i].a<=mid&&q[i].opt^2) add(q[i].c,-q[i].opt);\n\tfor(int i=l;i<=r;++i) q[i]=b[i];cdq(mid+1,r);\n}\n```\n",
        "postTime": 1651641109,
        "uid": 376149,
        "name": "sunset1028",
        "ccfLevel": 0,
        "title": "P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b \u9898\u89e3"
    },
    {
        "content": "\u5148\u8003\u8651\u5355\u70b9\u4fee\u6539\u600e\u4e48\u505a\u3002\u4e00\u4e2a\u5957\u8def\u662f\uff0c\u6570\u533a\u95f4\u91cc\u9762\u6240\u6709\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u6570\uff0c\u5f62\u5f0f\u5316\u7684\u8868\u793a\u662f $i\\in[l,r],prv_i<l$\u3002\u90a3\u8fd9\u662f\u4e2a\u4e8c\u7ef4\u6570\u70b9\u4e86\uff0c\u8981\u662f\u5355\u70b9\u4fee\u6539\u5c31\u52a8\u6001\u4e8c\u7ef4\u6570\u70b9\u4e0a cdq\uff0c\u81f3\u4e8e\u5982\u4f55\u7ef4\u62a4 $prv$ \u90a3\u5c31\u5f88 trivial \u4e86\uff0c`set` \u4e71\u641e\u3002\n\n\u533a\u95f4\u4fee\u6539\u600e\u4e48\u505a\uff1f\u89c2\u5bdf $prv$ \u7684\u53d8\u5316\uff0c\u53d1\u73b0 $(l,r]$ \u5185\u7684\u5143\u7d20 $i$ \u90fd\u6709 $prv_i=i-1$\uff0c\u4f9d\u636e\u8fd9\u4e2a\u7279\u6b8a\u6027\u5f00\u59cb\u641e\u4e8b\u60c5\u3002\u90a3\u5bf9\u67d0\u4e2a\u533a\u95f4\uff0c\u6ee1\u8db3 $i\\in[l,r],i-1<l$ \u7684\u5143\u7d20\u4ec5\u53ef\u80fd\u662f $i=l$\uff0c\u90a3\u5c31\u5224\u4e00\u5224\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u5f88 trivial\u3002\u4e8e\u662f\u5c31\u662f\u8981\u5bf9 $l$ \u4eec\u5c55\u5f00\u7ef4\u62a4\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u533a\u95f4\u4fee\u6539\uff0c\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u539f\u672c\u7684 $l$ \u7684\u4fe1\u606f\u90fd\u8981\u5220\u9664\u3002\u600e\u4e48\u5feb\u901f\u5220\u9664\uff1f\u5176\u5b9e\u4e0d\u96be\u60f3\u5230\u66b4\u529b\u5220\u9664\u590d\u6742\u5ea6\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u6bcf\u6b21\u4fee\u6539\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a $l$\uff0c\u90a3\u5220\u9664\u7684\u6b21\u6570\u4e5f\u5fc5\u5b9a\u4e0d\u8d85\u8fc7\u4fee\u6539\u7684\u6b21\u6570\uff0c\u8fd9\u662f\u4e2a\u7b80\u5355\u7684\u52bf\u80fd\u5206\u6790\u3002\u540c\u65f6\u5728\u5220\u9664\u3001\u6dfb\u52a0\u7684\u65f6\u5019\uff0c\u8fd8\u8981\u5b9e\u65f6\u7ef4\u62a4\uff08\u539f\u672c\uff09\u4ee5\u5b83\u4e3a\u524d\u9a71\u7684\u540e\u9762\u7684\u5143\u7d20\uff0c\u4e0d\u96be\u53d1\u73b0\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u6700\u591a\u6709\u4e00\u4e2a\uff0c\u590d\u6742\u5ea6\u4e5f\u662f\u4e0d\u7528\u62c5\u5fc3\u7684\u3002\u90a3\u5bf9\u4efb\u610f\u4f4d\u7f6e\u627e\u524d\u9a71 / \u540e\u7ee7\u5c31\u5bf9\u6bcf\u4e2a\u503c\u7ef4\u62a4\u4f4d\u7f6e\u7684 `set`\uff0c\u4f46\u662f\u503c\u662f\u6279\u91cf\u6279\u91cf\u4fee\u6539\u7684\u600e\u4e48\u529e\u5462\u3002\u518d\u5f00\u4e2a `set` \u8bb0\u5f55\u76f8\u7b49\u6bb5\u4eec\uff0c\u7136\u540e\u628a\u533a\u95f4\u7684\u4ee3\u8868\u5143\uff08$l$\uff09\u6254\u8fdb\u4e4b\u524d\u7684\u90a3\u4e2a `set` \u5373\u53ef\u3002\n\n\u641e\u7740\u641e\u7740\u641e\u51fa\u4e00\u4e2a\u52a8\u6001\u4e8c\u4f4d\u6570\u70b9\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u6700\u540e\u5bf9\u7740\u8fd9\u4e2a\u5e8f\u5217 cdq \u4e00\u904d\u5373\u53ef\u3002\u590d\u6742\u5ea6\u4e8c\u6b21\u5bf9\u6570\u3002\u867d\u7136\u8fd9\u4e2a\u64cd\u4f5c\u5e8f\u5217\u5f02\u5e38\u7684\u957f\uff08\u53ef\u80fd $10n$ \u5de6\u53f3\u5427\uff09\uff0c\u4f46\u8fd8\u662f\u8dd1\u5f97\u5f88\u5feb\uff0c\u5927\u6982\u662f cdq \u548c BIT \u5e38\u6570\u5b9e\u5728\u592a\u5c0f\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u9898\u83ab\u540d\u5361\u7a7a\u95f4\uff0c\u7406\u8bba\u4e0a\u6211\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027~~\uff08\u53c8\u79f0\u7ebf\u6027\u7a7a\u95f4\uff09~~\u4f46\u8fd8\u662f\u8fc7\u4e0d\u53bb\u3002\u6211\u91c7\u53d6\u4e86\u4e00\u4e9b\u5361\u7a7a\u95f4\u624b\u6bb5\uff08\u4f46\u662f\u53ea\u6709\u6700\u540e\u4e00\u6b65\u8d77\u5230\u51b3\u5b9a\u6027\u4f5c\u7528\uff09\uff1a\u628a `int` \u80fd\u538b\u6210 `short` \u5c31\u538b\uff0c\u751a\u81f3\u53ef\u4ee5\u538b\u5230 `bool` / `signed char`\uff1b\u628a\u88c5 3 \u4e2a 1e6 \u7ea7\u522b\u7684 `int` \u7684 `pair<pair<int,int>,int>` \u7528\u4e00\u4e2a `long long` \u538b\u7f29\u8d77\u6765\u7136\u540e\u89e3\u538b\uff1bcdq \u7684\u65f6\u5019\u4e0d\u5728\u91cc\u9762\u5f00\u90e8\u5206\u64cd\u4f5c\u5e8f\u5217\u7684 `vector`\uff0c\u5f00\u5230\u5916\u9762\uff0c\u5e76\u4e14\u6362\u6210\u6570\u7ec4\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define X x()\n#define Y y()\n#define Z z()\n#define pb push_back\nconst int inf=999999;\nint lowbit(int x){return x&-x;}\nconst int N=100010,QU=100010;\nint n,qu;\nint a[N];\nstruct query{\n\tint tp,l,r,x;\n}qry[QU];\nvector<int> nums;\nvoid discrete(){\n\tsort(nums.begin(),nums.end());\n\tnums.resize(unique(nums.begin(),nums.end())-nums.begin());\n\tfor(int i=1;i<=n;i++)a[i]=lower_bound(nums.begin(),nums.end(),a[i])-nums.begin()+1;\n\tfor(int i=1;i<=qu;i++)qry[i].x=lower_bound(nums.begin(),nums.end(),qry[i].x)-nums.begin()+1;\n}\nset<int> st[N+QU];\nstruct query0{\n\tbool add;int x,y;signed char v;int id;\n\tfriend bool operator<(query0 z,query0 w){return z.x==w.x?(z.y<w.y):(z.x<w.x);}\n};\nvector<query0> qry0;\nstruct tup{\n\tunsigned long long zip;\n\ttup(int x,int y,int z){zip=(1ll*x<<40)+(1ll*y<<20)+z;}\n\tint x()const{return zip>>40;}\n\tint y()const{return zip>>20&((1<<20)-1);}\n\tint z()const{return zip&((1<<20)-1);}\n\tfriend bool operator<(tup x,tup y){return x.zip<y.zip;}\n};\nset<tup> rg;\nset<tup>::iterator in(int x){\n\tset<tup>::iterator fd=rg.upper_bound(tup(x,inf,0));\n\treturn --fd;\n}\nint ans[QU];\nint prv[N];\nint tor(int l){return l==0?l:in(l)->Y;}\nvoid delblk(int l,int r,int x){//updlist: st(pos), query0, rg, prv\n\tst[x].erase(l);\n\tqry0.pb(query0({1,l,prv[l],-1,0}));\n\tset<int>::iterator fd=st[x].upper_bound(l);\n\tif(fd!=st[x].end()){\n\t\tqry0.pb(query0({1,*fd,prv[*fd],-1,0}));\n\t\tset<int>::iterator fd0=fd--;\n\t\tqry0.pb(query0({1,*fd0,prv[*fd0]=tor(*fd),1,0}));\n\t}\n}\nvoid addblk(int l,int r,int x){//updlist: st(pos), query0, rg, prv\n\tst[x].insert(l);rg.insert(tup(l,r,x));\n\tset<int>::iterator fd=st[x].lower_bound(l);\n\tqry0.pb(query0({1,l,prv[l]=tor(*--fd),1,0}));\n\tfd++;fd++;\n\tif(fd!=st[x].end()){\n\t\tqry0.pb(query0({1,*fd,prv[*fd],-1,0}));\n\t\tqry0.pb(query0({1,*fd,prv[*fd]=r,1,0}));\n\t}\n}\nstruct bitree{\n\tint cnt[N];\n\tbitree(){memset(cnt,0,sizeof(cnt));}\n\tvoid add(int x,int v){\n\t\twhile(x<=n+1)cnt[x]+=v,x+=lowbit(x);\n\t}\n\tint Cnt(int x){\n\t\tint res=0;\n\t\twhile(x)res+=cnt[x],x-=lowbit(x);\n\t\treturn res;\n\t}\n}bit;\nquery0 v[10*N];int tail;\nvoid cdq(int l=0,int r=qry0.size()-1){\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tcdq(l,mid),cdq(mid+1,r);\n\ttail=0;\n\tfor(int i=l;i<=mid;i++)if(qry0[i].add==1)v[tail++]=qry0[i];\n\tfor(int i=mid+1;i<=r;i++)if(qry0[i].add==0)v[tail++]=qry0[i];\n\tstable_sort(v,v+tail);\n\tfor(int i=0;i<tail;i++){\n\t\tint add=v[i].add,x=v[i].y,v0=v[i].v,id=v[i].id;\n\t\tif(add)bit.add(x+1,v0);\n\t\telse ans[id]+=v0*bit.Cnt(x+1);\n\t}\n\tfor(int i=0;i<tail;i++){\n\t\tint add=v[i].add,x=v[i].y,v0=v[i].v;\n\t\tif(add)bit.add(x+1,-v0);\n\t}\n}\nint main(){\n\tcin>>n>>qu;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",a+i),nums.pb(a[i]);\n\tfor(int i=1;i<=qu;i++){\n\t\tscanf(\"%d%d%d\",&qry[i].tp,&qry[i].l,&qry[i].r);\n\t\tif(qry[i].tp==1)scanf(\"%d\",&qry[i].x),nums.pb(qry[i].x);\n\t}\n\tdiscrete();\n\tfor(int i=1;i<=nums.size();i++)st[i].insert(0);//\u5f88\u597d\u7684 trick\uff01 \n\tfor(int i=1;i<=n;i++){\n\t\tqry0.pb(query0({1,i,prv[i]=*--st[a[i]].end(),1,0}));\n\t\trg.insert(tup(i,i,a[i]));\n\t\tst[a[i]].insert(i);\n\t}\n\tint ask=0;\n\tfor(int i=1;i<=qu;i++){\n\t\tint tp=qry[i].tp,l=qry[i].l,r=qry[i].r,x=qry[i].x;\n\t\tif(tp==1){//updlist: st(pos), query0, rg, prv\n\t\t\tset<tup>::iterator pl=in(l),pr=in(r);\n\t\t\ttup PL=*pl,PR=*pr;\n\t\t\tvector<tup> del;\n\t\t\tfor(set<tup>::iterator j=pl;;j++){\n\t\t\t\tdelblk(j->X,j->Y,j->Z),del.pb(*j);\n\t\t\t\tif(j==pr)break;\n\t\t\t}\n\t\t\tfor(int j=0;j<del.size();j++)rg.erase(del[j]);\n\t\t\tif(l!=PL.X)addblk(PL.X,l-1,PL.Z);\n\t\t\taddblk(l,r,x);\n\t\t\tif(r!=PR.Y)addblk(r+1,PR.Y,PR.Z);\n\t\t}\n\t\telse{\n\t\t\task++;\n\t\t\ttup pl=*in(l);\n\t\t\tans[ask]=l!=pl.X;\n\t\t\tqry0.pb(query0({0,r,l-1,1,ask})),qry0.pb(query0({0,l-1,l-1,-1,ask}));\n\t\t}\n\t}\n\tcdq();\n\tfor(int i=1;i<=ask;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1626932425,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "p4690"
    },
    {
        "content": "\u533a\u95f4\u6570\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u662f\u4e2a\u5e38\u89c1\u7684\u5957\u8def\uff0c\u4e0d\u8bf4\u4e86\u3002\n\n\u8003\u8651\u8fd9\u4e2a\u533a\u95f4\u4fee\u6539\u600e\u4e48\u529e\u2014\u2014\u610f\u5473\u7740\u9700\u8981\u4fee\u6539\u4e00\u5806\u6570\u7684 $pre$\u3002\n\n\u5047\u8bbe\u5bf9\u4e8e\u4fee\u6539\u524d\uff0c\u6709\u4e00\u6bb5\u533a\u95f4 $[l',r'],l\\leq l'\\leq r'\\leq r$ \uff0c\u6ee1\u8db3\u8fd9\u4e00\u6bb5\u533a\u95f4\u4e2d\u7684\u6570\u90fd\u662f\u76f8\u540c\u7684\u3002\u90a3\u4e48\u8fdb\u884c\u4e86\u4fee\u6539\u8fc7\u540e\uff0c\u5bb9\u6613\u53d1\u73b0\u6539\u53d8 $pre$ \u53ea\u6709 $pre_{l'},pre_{r''}$ \uff0c\u8fd9\u91cc $pre_{r''}$ \u6ee1\u8db3\u4fee\u6539\u524d\uff0c$pre_{r''}=r'$ \u3002\n\n\u63a5\u7740\u8003\u8651\uff0c\u5982\u679c\u6700\u5f00\u59cb\u6574\u4e2a\u5e8f\u5217\u6709 $n$ \u4e2a\u533a\u95f4\uff0c\u663e\u800c\u6613\u89c1\u7684\uff0c\u5982\u679c\u4e00\u6b21\u4fee\u6539\u8986\u76d6\u5230\u4e86 $a$ \u4e2a\u5b8c\u6574\u7684\u533a\u95f4\u5e76\u4e14\u78b0\u5230\u4e86 $b\\leq 2$ \u4e2a\u4e0d\u5b8c\u6574\u7684\u533a\u95f4\uff0c\u90a3\u4e48\u66b4\u529b\u8fdb\u884c\u4fee\u6539\u7684\u8bdd\u662f $a+b$ \u6b21\u4fee\u6539\u7684\uff0c\u7136\u540e\u533a\u95f4\u6570\u5c31\u4f1a\u51cf\u53bb $a-1$ \u3002\n\n\u7531\u4e8e\u533a\u95f4\u6570\u6700\u591a\u51cf\u5230 $1$\uff0c\u53c8\u56e0\u4e3a $b\\leq 2$ \uff0c\u6240\u4ee5\u5176\u5b9e\u66b4\u529b\u4fee\u6539\u7684\u6b21\u6570\u662f $O(n+m)$ \u7ea7\u522b\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6700\u574f\u60c5\u51b5\u5927\u6982\u662f $n+2m$ \u6b21\u4fee\u6539\u3002\n\n\u6240\u4ee5\u62ff\u4e00\u4e2a set \u7ef4\u62a4\u4e00\u4e0b\u533a\u95f4\uff0c\u7136\u540e\u7ef4\u62a4 $pre$ \u7684\u8bdd\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O((n+m)\\log n$ \uff1f\u53ea\u6709 $10^5$ \u6240\u4ee5\u5e94\u8be5\u4e0d\u4f1a\u88ab\u5361\u5e38\u5427\uff1f\n\n----------\n\n\u5173\u4e8e\u5b9e\u73b0\uff1a\n\n- \u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff1a\u6700\u574f\u70b9\u5f97\u8dd1 $2.7s$ \u3002\uff08\u7a7a\u95f4 $\\log^2$\uff09\n- \u6811\u72b6\u6570\u7ec4 + \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff1a\u6700\u574f\u70b9 $1.7s$\uff0c\u8db3\u4ee5\u901a\u8fc7 loj \u6570\u636e\u3002\uff08\u7a7a\u95f4 $\\log ^2$\uff09\u3002\n\n- CDQ + \u5e73\u8861\u6811\uff1a\u5361\u4f4f\u4e86\u61d2\u5f97\u8c03\u3002\uff08\u7a7a\u95f4 $\\log$\uff09\u3002\n- CDQ + \u6811\u72b6\u6570\u7ec4\uff1a\u6700\u574f\u70b9 $0.9s$\uff0c\u8db3\u4ee5\u901a\u8fc7 luogu \u6570\u636e\u3002\uff08\u7a7a\u95f4 $\\log$\uff09\u3002\n\n\u5bb9\u6613\u53d1\u73b0 luogu \u7684\u7a7a\u95f4\u6709\u6bd2\uff0c\u751a\u81f3\u4e0d\u8db3\u4ee5\u5f00\u4e0b\u4e24\u4e2a `Node` \u6570\u7ec4\u641e CDQ\uff0c\u6240\u4ee5\u53ef\u4ee5\u5f00\u4e24\u4e2a `int` \u6570\u7ec4\u7ef4\u62a4\u7f16\u53f7\uff08\u5177\u4f53\u89c1\u4ee3\u7801\u5b9e\u73b0\uff09\n\n\u800c\u4e14\u4e3a\u4e86\u52a0\u901f\uff0c\u8fd9\u91cc\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\u3002\n\n----------\n\n\u5173\u4e8e\u4ee3\u7801\u3002\n\n\u6811\u72b6\u6570\u7ec4 + \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\uff1a[\u8be6\u89c1\u63d0\u4ea4\u8bb0\u5f55](https://loj.ac/s/1016373)\n\nCDQ + \u6811\u72b6\u6570\u7ec4\uff1a\n\n```cpp\nconst int N=1e5+5;\nconst int M=1e6+5;\n\nint n,m,_,cnt,a[N],id[M],ti[M],ans[N],h[N<<1];\nstruct Query {int tim,l,r,val,typ,op;} q[M];\n\nnamespace ChthollyTree { // {{{ ChthollyTree\n    #define ins insert\n\n    int pre[N],las[N<<1];\n    struct Node {\n        int l,r,val;\n        bool operator < (const Node &kls) const {return r<kls.l;}\n    };\n    std::set <Node> seq;\n    std::set <pii> sta[N<<1];\n\n    inline void update(int x,int now) {\n        q[++cnt]=(Query){cnt,x,-1,pre[x],0,-1},\n        q[++cnt]=(Query){cnt,x,-1,pre[x]=now,0,1};\n    }\n    inline void init() {\n        lep(i,1,n) {\n            a[i]=std::lower_bound(h+1,h+1+_,a[i])-h;\n            q[++cnt]=(Query){cnt,i,-1,pre[i]=las[a[i]],0,1},las[a[i]]=i;\n            seq.ins((Node){i,i,a[i]}),sta[a[i]].ins(mkp(i,i));\n        }\n        lep(i,1,_) sta[i].ins(mkp(0,0));\n    }\n    inline void insert(int l,int r,int val) {\n        std::set <pii>::iterator it2=sta[val].upper_bound(mkp(l,r)),it1=it2; --it2;\n        if(it1!=sta[val].end()) update(it1->fi,r); update(l,it2->se);\n        sta[val].ins(mkp(l,r)),seq.ins((Node){l,r,val});\n    }\n    inline void erase(int l,int r,int val,int _flag) {\n        std::set <pii>::iterator it2=sta[val].upper_bound(mkp(l,r)),it1=it2; --it2,--it2;\n        if(it1!=sta[val].end()) update(it1->fi,it2->se);\n        if(l!=_flag) update(l,l-1);\n        sta[val].erase(mkp(l,r)),seq.erase((Node){l,r,val});\n    }\n    inline void cut(int l,int r,int val,int pos) {\n        seq.erase((Node){l,r,val}),sta[val].erase(mkp(l,r));\n        seq.ins((Node){l,pos,val}),sta[val].ins(mkp(l,pos));\n        seq.ins((Node){pos+1,r,val}),sta[val].ins(mkp(pos+1,r)); \n    }\n    inline void split(int L,int R,int val) {\n        std::set <Node>::iterator it=seq.lower_bound((Node){L,L-1,0});\n\n        if(it->l<=L&&R<=it->r) {\n            int l=it->l,r=it->r,_val=it->val;\n            if(l<L) cut(l,r,_val,L-1);\n            if(R<r) cut(L,r,_val,R);\n            erase(L,R,_val,L);\n        } else while(it!=seq.end()&&it->l<=R) {\n            int l=it->l,r=it->r,_val=it->val; ++it;\n            if(L<=l&&r<=R) erase(l,r,_val,L);\n            else {\n                if(l<L&&L<=r&&r<=R) cut(l,r,_val,L-1),erase(L,r,_val,L);\n                if(L<=l&&l<=R&&R<r) cut(l,r,_val,R),erase(l,R,_val,L);\n            }\n        }\n        insert(L,R,val);\n    }\n} using namespace ChthollyTree; // }}}\n\n// {{{ cdq divide\n\n// {{{ BIT\n\nint res,c[N];\ninline int lowbit(int x) {return x&(-x);}\ninline void modify(int x,int y) {for(;x<=n;x+=lowbit(x)) c[x]+=y;}\ninline int query(int l,int r) {\n    --l,res=0;\n    while(r>l) res+=c[r],r-=lowbit(r);\n    while(l>r) res-=c[l],l-=lowbit(l);\n    return res;\n}\n\n// }}}\n\nvoid cdq(int l,int r) {\n    if(l==r) return ;\n    int mid=(l+r)>>1;\n    cdq(l,mid),cdq(mid+1,r);\n\n    int L=mid+1; lep(i,l,mid) {\n        while(L<=r&&q[id[L]].val<q[id[i]].val) {\n            if(q[id[L]].typ) ans[q[id[L]].typ]+=q[id[L]].op*query(q[id[L]].l,q[id[L]].r);\n            ++L;\n        }\n        if(!q[id[i]].typ) modify(q[id[i]].l,q[id[i]].op);\n    }\n    while(L<=r) {\n        if(q[id[L]].typ) ans[q[id[L]].typ]+=q[id[L]].op*query(q[id[L]].l,q[id[L]].r);\n        ++L;\n    }\n    lep(i,l,mid) if(!q[id[i]].typ) modify(q[id[i]].l,-q[id[i]].op);\n\n    int i=l,j=mid+1,t=l;\n    while(i<=mid&&j<=r) ti[t++]=(q[id[i]].val<q[id[j]].val)?id[i++]:id[j++];\n    while(i<=mid) ti[t++]=id[i++];\n    while(j<=r) ti[t++]=id[j++];\n    lep(i,l,r) id[i]=ti[i];\n}\n// }}}\n\nint query_cnt,_op[N],_l[N],_r[N],_x[N];\nint main() {\n    IN(n,m);\n    lep(i,1,n) IN(a[i]),h[++_]=a[i];\n    lep(i,1,m) {\n        IN(_op[i],_l[i],_r[i]);\n        if(_op[i]==1) h[++_]=_x[i]=int(IN);\n    }\n    \n    std::sort(h+1,h+1+_); int tmp=_; _=1;\n    lep(i,2,tmp) if(h[i]!=h[_]) h[++_]=h[i];\n\n    init();\n    lep(i,1,m) {\n        if(_op[i]==1) split(_l[i],_r[i],std::lower_bound(h+1,h+1+_,_x[i])-h);\n        if(_op[i]==2) q[++cnt]=(Query){cnt,_l[i],_r[i],_l[i]-1,++query_cnt,1};\n    }\n    \n    lep(i,1,cnt) id[i]=i;\n    cdq(1,cnt);\n    lep(i,1,query_cnt) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1608480287,
        "uid": 194220,
        "name": "Moonlights",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4690 \u3010[Ynoi2016]\u955c\u4e2d\u7684\u6606\u866b\u3011"
    },
    {
        "content": "### P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b\r\n\r\n\u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272\uff0c$n \\le 10^{5}$\uff0c\u503c\u57df $[ 1, 10^{9}] $\uff0c\u8981\u6c42\u7ebf\u6027\u7a7a\u95f4\u3002\r\n\r\n**sol**\r\n\r\n\u9996\u5148\u8003\u8651\u7ecf\u5178\u6570\u989c\u8272\u5957\u8def\uff0c\u8bbe $pre_{i}$ \u8868\u793a\u4e0a\u4e00\u4e2a\u4e0e $a_{i} $ \u76f8\u540c\u7684\u6570\u7684\u4f4d\u7f6e\u3002\r\n\r\n\u5bf9\u4e8e\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0\u6027\u8d28\uff1a$\\forall i \\in (l,r],pre_{i} \\gets i - 1$\uff0c\u5bf9\u4e8e $i = l$ \u6216\u533a\u95f4\u5916\u7684\u60c5\u51b5\u7279\u5224\u5373\u53ef\u3002\r\n\r\n\u8003\u8651\u4f7f\u7528 `ODT` \u7ef4\u62a4 $pre$ \u7684\u4fee\u6539\uff0c\u4e00\u4e2a `ODT` \u6570\u7ec4\u7ef4\u62a4\u989c\u8272\u4f4d\u7f6e\uff0c\u5747\u644a\u4fee\u6539\u6b21\u6570\u4e3a $\\mathcal O(n)$\uff08\u589e\u52a0\u8282\u70b9\u603b\u6570 $\\mathcal O(n)$\uff0c\u5220\u9664\u8282\u70b9\u603b\u6570 $\\mathcal O(n)$\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\r\n\r\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u5e26\u4fee\u6c42 $\\sum\\limits_{i=l}^{r}[pre_i<l]$ \u8003\u8651\u5230\u8981\u6c42\u7ebf\u6027\u7a7a\u95f4\uff0c\u6545\u4f7f\u7528\u4e09\u7ef4 `cdq`\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n)$\u3002\r\n\r\n\u8be6\u89c1\u4ee3\u7801\uff1a\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nnamespace Fread\r\n{\r\n\tconst int SIZE = 1 << 21;\r\n\tchar buf[SIZE], *S, *T;\r\n\tinline char getchar()\r\n\t{\r\n\t\tif (S == T)\r\n\t\t{\r\n\t\t\tT = (S = buf) + fread(buf, 1, SIZE, stdin);\r\n\t\t\tif (S == T)\r\n\t\t\t\treturn '\\n';\r\n\t\t}\r\n\t\treturn *S++;\r\n\t}\r\n}\r\n\r\nnamespace Fwrite\r\n{\r\n\tconst int SIZE = 1 << 21;\r\n\tchar buf[SIZE], *S = buf, *T = buf + SIZE;\r\n\tinline void flush()\r\n\t{\r\n\t\tfwrite(buf, 1, S - buf, stdout);\r\n\t\tS = buf;\r\n\t}\r\n\tinline void putchar(char c)\r\n\t{\r\n\t\t*S++ = c;\r\n\t\tif (S == T)\r\n\t\t\tflush();\r\n\t}\r\n\tstruct NTR\r\n\t{\r\n\t\t~NTR()\r\n\t\t{\r\n\t\t\tflush();\r\n\t\t}\r\n\t} ztr;\r\n}\r\n\r\n#ifdef ONLINE_JUDGE\r\n#define getchar Fread::getchar\r\n#define putchar Fwrite::putchar\r\n#endif\r\n\r\ninline int read()\r\n{\r\n\tint x = 0, f = 1;\r\n\tchar c = getchar();\r\n\twhile(c < '0' || c > '9')\r\n\t{\r\n\t\tif(c == '-') f = -1;\r\n\t\tc = getchar();\r\n\t}\r\n\twhile(c >= '0' && c <= '9')\r\n\t{\r\n\t\tx = (x << 3) + (x << 1) + c - 48;\r\n\t\tc = getchar();\r\n\t}\r\n\treturn x * f;\r\n}\r\n\r\ninline void write(int x)\r\n{\r\n\tif(x < 0) putchar('-'), x = -x;\r\n\tif(x > 9) write(x / 10);\r\n\tputchar(x % 10 + 48);\r\n}\r\n\r\nconst int _ = 2e5 + 10, M = 1e6 + 10;\r\n\r\nint n, m, tot, a[_], cnt, b[_], ans[_], d[_], pre[_];\r\n\r\nstruct Query\r\n{\r\n\tint opt, l, r, x;\r\n} q[_];\r\n\r\nstruct Node\r\n{\r\n\tint x, y, z, k, d, ans;\r\n\tinline bool operator < (const Node &t) const\r\n\t{\r\n\t\treturn x != t.x ? x < t.x : (y != t.y ? y < t.y : z < t.z);\r\n\t}\r\n} p[M], c[M >> 1];\r\n\r\n#define pii pair<int, int>\r\n#define pa set<pii>::iterator\r\n\r\nstruct Col\r\n{\r\n\tset<pii> cl, v[_];\r\n\tinline void split(int k)\r\n\t{\r\n\t\tpa it = cl.lower_bound({k + 1, 0});\r\n\t\tint r = it->first - 1;\r\n\t\t--it;\r\n\t\tint l = it->first;\r\n\t\tif(k == r) return;\r\n\t\tint c = it->second;\r\n\t\tcl.erase(it);\r\n\t\tcl.insert({l, c});\r\n\t\tcl.insert({k + 1, c});\r\n\t\tv[c].erase({l, r});\r\n\t\tv[c].insert({l, k});\r\n\t\tv[c].insert({k + 1, r});\r\n\t}\r\n\tinline void Insert(int l, int r, int c, int t)\r\n\t{\r\n\t\tsplit(l - 1), split(r);\r\n\t\tfor(pa it = cl.lower_bound({l, 0}); it-> first <= r;)\r\n\t\t{\r\n\t\t\tint x = it->first, y = it->second;\r\n\t\t\t++it;\r\n\t\t\tint z = it->first - 1;\r\n\t\t\tcl.erase({x, y});\r\n\t\t\tv[y].erase({x, z});\r\n\t\t\tif(x == l)\r\n\t\t\t{\r\n\t\t\t\tint e = (--(v[c].upper_bound({x, 0})))->second;\r\n\t\t\t\tif(pre[x] != e)\r\n\t\t\t\t{\r\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\r\n\t\t\t\t\tpre[x] = e;\r\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(pre[x] != x - 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\r\n\t\t\t\t\tpre[x] = x - 1;\r\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tx = z + 1;\r\n\t\t\tz = (v[y].lower_bound({x, 0}))->first;\r\n\t\t\tint e = (--v[y].lower_bound({l, 0}))->second;\r\n\t\t\tif(z > r && z <= n && pre[z] != e)\r\n\t\t\t{\r\n\t\t\t\tp[++tot] = {t, z, pre[z], 0, -1, 0};\r\n\t\t\t\tpre[z] = e;\r\n\t\t\t\tp[++tot] = {t, z, pre[z], 0, 1, 0};\r\n\t\t\t}\r\n\t\t}\r\n\t\tpa it = v[c].lower_bound({r + 1, 0});\r\n\t\tint x = it->first;\r\n\t\tif(x <= n && pre[x] != r)\r\n\t\t{\r\n\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\r\n\t\t\tpre[x] = r;\r\n\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\r\n\t\t}\r\n\t\tv[c].insert({l, r});\r\n\t\tcl.insert({l, c});\r\n\t\tx = r + 1;\r\n\t\tif(x <= n)\r\n\t\t{\r\n\t\t\tit = cl.lower_bound({x, 0});\r\n\t\t\tint y = it->second;\r\n\t\t\tint e = (--v[y].lower_bound({x, 0}))->second;\r\n\t\t\tif(pre[x] != e)\r\n\t\t\t{\r\n\t\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\r\n\t\t\t\tpre[x] = e;\r\n\t\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} col;\r\n\r\ninline void update(int x, int v)\r\n{\r\n\t++x;\r\n\twhile(x < _) d[x] += v, x += x & -x;\r\n}\r\n\r\ninline int query(int x)\r\n{\r\n\t++x;\r\n\tint res = 0;\r\n\twhile(x) res += d[x], x -= x & -x;\r\n\treturn res;\r\n}\r\n\r\nvoid solve(int l, int r)\r\n{\r\n\tif(l >= r) return;\r\n\tint mid = (l + r) >> 1;\r\n\tsolve(l, mid), solve(mid + 1, r);\r\n\tint i = l, j = mid + 1, k = 0;\r\n\tbool flg = (l != 1 || r != tot);\r\n\twhile(i <= mid && j <= r)\r\n\t\tif(p[i].y <= p[j].y)\r\n\t{\r\n\t\tif(p[i].k == 0) update(p[i].z, p[i].d);\r\n\t\tif(flg) c[k++] = p[i];\r\n\t\t++i;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif(p[j].k == 1) p[j].ans += query(p[j].z);\r\n\t\tif(flg) c[k++] = p[j];\r\n\t\t++j;\r\n\t}\r\n\twhile(i <= mid)\r\n\t{\r\n\t\tif(p[i].k == 0) update(p[i].z, p[i].d);\r\n\t\tif(flg) c[k++] = p[i];\r\n\t\t++i;\r\n\t}\r\n\twhile(j <= r)\r\n\t{\r\n\t\tif(p[j].k == 1) p[j].ans += query(p[j].z);\r\n\t\tif(flg) c[k++] = p[j];\r\n\t\t++j;\r\n\t}\r\n\tfor(int i = l; i <= mid; ++i) if(p[i].k == 0) update(p[i].z, -p[i].d);\r\n\tif(flg) for(int i = 0; i < k; ++i) p[i + l] = c[i];\r\n}\r\n\r\nsigned main()\r\n{\r\n\tn = cnt = read(), m = read();\r\n\tfor(int i = 1; i <= n; ++i) a[i] = b[i] = read();\r\n\tfor(int i = 1; i <= m; ++i)\r\n\t{\r\n\t\tq[i].opt = read(), q[i].l = read(), q[i].r = read();\r\n\t\tif(q[i].opt == 1) b[++cnt] = q[i].x = read();\r\n\t}\r\n\tsort(b + 1, b + cnt + 1);\r\n\tcnt = unique(b + 1, b + cnt + 1) - b - 1;\r\n\tfor(int i = 1; i <= n; ++i) a[i] = lower_bound(b + 1, b + cnt + 1, a[i]) - b;\r\n\tfor(int i = 1; i <= m; ++i) if(q[i].opt == 1) q[i].x = lower_bound(b + 1, b + cnt + 1, q[i].x) - b;\r\n\tfor(int i = 1; i <= cnt; ++i) col.v[i].insert({0, 0});\r\n\tfor(int i = 1; i <= n; ++i)\r\n\t{\r\n\t\tpre[i] = (--col.v[a[i]].end())->second;\r\n\t\tp[++tot] = {0, i, pre[i], 0, 1, 0};\r\n\t\tcol.v[a[i]].insert({i, i});\r\n\t\tcol.cl.insert({i, a[i]});\r\n\t}\r\n\tfor(int i = 1; i <= cnt; ++i) col.v[i].insert({n + 1, 0});\r\n\tcol.cl.insert({0, 0}), col.cl.insert({n + 1, n + 1});\r\n\tfor(int i = 1; i <= m; ++i)\r\n\t\tif(q[i].opt == 1) col.Insert(q[i].l, q[i].r, q[i].x, i);\r\n\telse p[++tot] = {i, q[i].r, q[i].l - 1, 1, 1, 0}, p[++tot] = {i, q[i].l - 1, q[i].l - 1, 1, -1, 0};\r\n\tsort(p + 1, p + tot + 1);\r\n\tsolve(1, tot);\r\n\tfor(int i = 1; i <= tot; ++i) if(p[i].k) ans[p[i].x] += p[i].ans * p[i].d;\r\n\tfor(int i = 1; i <= m; ++i) if(q[i].opt == 2) write(ans[i]), putchar('\\n');\r\n\treturn 0;\r\n}\r\n\r\n```\r\n",
        "postTime": 1677757845,
        "uid": 925577,
        "name": "ULSG_XBaiC",
        "ccfLevel": 0,
        "title": "P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b"
    },
    {
        "content": "\u795e\u4ed9\u9898\uff0corz lxl\u3002\n\n## \u4e0d\u5e26\u4fee\n\n\u5148\u8003\u8651\u4e0d\u5e26\u4fee\u600e\u4e48\u505a\uff0c\u5373 [P1972](/problem/P1972)\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4 $pre_i$ \u4ee3\u8868\u4e0e\u5b83\u989c\u8272\u76f8\u540c\u4e14\u4e0b\u6807\u5728\u5b83\u4e4b\u524d\u7684\uff0c\u4e0b\u6807\u6700\u5927\u7684\u70b9\u7684\u4e0b\u6807\u3002\uff08\u597d\u7ed5\u53e3\uff09\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u8be2\u95ee\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u79cd\u989c\u8272\uff0c\u53ea\u7edf\u8ba1\u5b83\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u7684\u6700\u5de6\u8fb9\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u67e5\u8be2\u6709\u591a\u5c11 $l \\leq i \\leq r$\uff0c\u6ee1\u8db3 $pre_i<l$\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f5c\u4e8c\u7ef4\u504f\u5e8f\u6765\u5f97\u5230\u7b54\u6848\u3002\n\n## \u5355\u70b9\u4fee\n\n\u6709\u4e86\u4e0d\u5e26\u4fee\u7684\u505a\u6cd5\uff0c\u5355\u70b9\u4fee\u6539\u7684\u505a\u6cd5\u5c31\u5f88\u663e\u7136\u4e86\u3002\u6ce8\u610f\u5230\u8fdb\u884c\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u5bf9 $pre$ \u6570\u7ec4\u7684\u5f71\u54cd\u662f $O(1)$ \u7684\u3002\u56e0\u6b64\u6211\u4eec\u628a\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u53d8\u6210\u4e00\u6b21\u5220\u9664\u548c\u4e00\u6b21\u63d2\u5165\uff0c\u8fd9\u6837\u5c31\u662f\u5728\u4e8c\u7ef4\u504f\u5e8f\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u65f6\u95f4\u7ef4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f5c\u4e09\u7ef4\u504f\u5e8f\u3002CDQ \u5206\u6cbb\u5373\u53ef\u3002\n\n## \u533a\u95f4\u4fee\n\n\u5148\u6254\u4e00\u4e2a\u7ed3\u8bba\uff1a\u8fdb\u884c\u6240\u6709\u533a\u95f4\u4fee\u6539\u540e\uff0c$pre$ \u6570\u7ec4\u7684\u5355\u70b9\u4fee\u6539\u6b21\u6570\u662f $O(n+m)$ \u7684\u3002\n\n\u51ed\u5565\uff1f\u6211\u4eec\u8bbe $\\{a_n\\}$ \u4e00\u4e2a\u503c\u57df\u76f8\u540c\u7684\u6781\u957f\u8fde\u7eed\u6bb5\u4e3a\u4e00\u4e2a\u300c\u8282\u70b9\u300d\u3002\u6ce8\u610f\u5230\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6574\u4f53\u8d4b\u4e0a\u4e00\u4e2a\u503c\uff0c\u90a3\u4e48\u53ea\u6709\u8282\u70b9\u4e2d\u7b2c\u4e00\u4e2a\u6570\u7684 $pre$ \u4f1a\u88ab\u4fee\u6539\u3002\n\n\u8003\u8651 ODT \u7684\u8fc7\u7a0b\uff0c\u6bcf\u6b21\u4fee\u6539\uff0c\u6211\u4eec\u5148\u5c06\u4e24\u7aef\u7684\u8282\u70b9\u5206\u88c2\uff0c\u7136\u540e\u6211\u4eec\u5c06\u4e2d\u95f4\u7684\u8282\u70b9\u5220\u6389\uff0c\u518d\u6362\u6210\u540c\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u5206\u88c2\u548c\u66f4\u6362\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u5220\u9664\u82e5\u5e72\u8282\u70b9\uff0c\u518d\u6dfb\u52a0\u81f3\u591a\u4e09\u4e2a\u8282\u70b9\u3002\u5bf9 $pre$ \u6570\u7ec4\u7684\u4fee\u6539\u6b21\u6570\u548c\u5220\u9664\u7684\u8282\u70b9\u4e2a\u6570\u540c\u9636\u3002\u800c\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u5220\u9664\u4e00\u6b21\uff0c\u6211\u4eec\u6dfb\u52a0\u7684\u8282\u70b9\u4e2a\u6570\u662f $O(m)$ \u7684\uff0c\u521d\u59cb\u7684\u8282\u70b9\u4e2a\u6570\u662f $O(n)$ \u7684\u3002\u56e0\u6b64\uff0c$pre$ \u6570\u7ec4\u7684\u5355\u70b9\u4fee\u6539\u6b21\u6570\u662f $O(n+m)$ \u7684\u3002\n\n\u65e2\u7136\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u627e\u5230 $pre$ \u6570\u7ec4\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u548c\u65f6\u95f4\uff0c\u7136\u540e\u6309\u7167\u5355\u70b9\u4fee\u6539\u7684\u65b9\u5f0f\u505a\u5c31\u597d\u4e86\uff01\n\n\u600e\u4e48\u627e\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u4e0a\u9762\u590d\u6742\u5ea6\u5206\u6790\u90a3\u4e2a\u8fc7\u7a0b\u3002\u6211\u4eec\u76f4\u63a5\u62ff\u4e2a ODT \u7ef4\u62a4\uff0c\u7136\u540e\u6bcf\u6b21\u4fee\u6539\u5c31\u53ef\u4ee5\u627e\u51fa\u82e5\u5e72\u53ef\u80fd\u88ab\u4fee\u6539\u7684\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u8282\u70b9\u6c42\u4fee\u6539\u540e\u7684 $pre$ \u5373\u53ef\u3002\u600e\u4e48\u6c42 $pre$\uff1f\u6211\u4eec\u5bf9\u6bcf\u79cd\u989c\u8272\u5f00\u4e2a ODT \u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nint n, m;\nmap<int, int> mp;\nint mcnt;\nstruct Node {\n    int x, y, t, v, id;\n} q[1500005];\nbool cmpByT(const Node &a, const Node &b) {\n    return a.t != b.t ? a.t < b.t : a.id < b.id;\n}\nbool cmpByX(const Node &a, const Node &b) {\n    return a.x != b.x ? a.x < b.x : a.id < b.id;\n}\nint qcnt;\nint pre[200005];\nstruct ODTNode {\n    int l, r, v;\n    bool operator<(const ODTNode &o) const {\n        return l < o.l;\n    }\n};\nstruct ODT {\n    typedef set<ODTNode>::iterator iter;\n    set<ODTNode> tr, col[200005];\n    iter Insert(int l, int r, int v) {\n        col[v].insert({ l, r, v });\n        return tr.insert({ l, r, v }).first;\n    }\n    void Delete(int l, int r, int v) {\n        col[v].erase({ l, r, v });\n        tr.erase({ l, r, v });\n    }\n    iter Split(int p) {\n        iter it = tr.lower_bound({ p, 0, 0 });\n        if (it != tr.end() && it->l == p) return it;\n        it--;\n        int l = it->l, r = it->r, v = it->v;\n        Delete(l, r, v);\n        Insert(l, p - 1, v);\n        return Insert(p, r, v);\n    }\n    int Pre(int p) {\n        iter it = --tr.upper_bound({ p, 0, 0 });\n        if (it->l < p) return p - 1;\n        else {\n            iter co = col[it->v].lower_bound({ p, 0, 0 });\n            if (co != col[it->v].begin()) return (--co)->r;\n            return 0;\n        }\n    }\n    void Assign(int l, int r, int v, int t) {\n        iter itr = Split(r + 1), itl = Split(l);\n        vector<int> ps;\n        for (iter it = itl; it != itr; it++) {\n            if (it != itl) ps.emplace_back(it->l);\n            iter nxt = col[it->v].upper_bound(*it);\n            if (nxt != col[it->v].end()) ps.emplace_back(nxt->l);\n            col[it->v].erase(*it);\n        }\n        tr.erase(itl, itr);\n        Insert(l, r, v);\n        ps.emplace_back(l);\n        iter nxt = col[v].upper_bound({ l, r, v });\n        if (nxt != col[v].end()) ps.emplace_back(nxt->l);\n        for (int i = 0; i < ps.size(); i++) {\n            q[++qcnt] = { ps[i], pre[ps[i]], t, -1, 0 };\n            pre[ps[i]] = Pre(ps[i]);\n            q[++qcnt] = { ps[i], pre[ps[i]], t, 1, 0 };\n        }\n    }\n} odt;\nstruct BIT {\n    int f[100005];\n    BIT() {\n        memset(f, 0, sizeof(f));\n    }\n    int lowbit(int x) { return x & -x; }\n    void Modify(int i, int x) {\n        for (; i <= 100001; i += lowbit(i)) f[i] += x;\n    }\n    int Query(int i) {\n        int res = 0;\n        for (; i; i -= lowbit(i)) res += f[i];\n        return res;\n    }\n} bit;\nint a[100005], las[200005];\nint ans[100005], acnt;\nvoid CDQ(int l, int r) {\n    if (l == r) return;\n    int mid = l + r >> 1;\n    CDQ(l, mid); CDQ(mid + 1, r);\n    int i = l, j = mid + 1;\n    while (j <= r) {\n        while (i <= mid && q[i].x <= q[j].x) {\n            if (!q[i].id) bit.Modify(q[i].y + 1, q[i].v);\n            i++;\n        }\n        if (q[j].id) ans[q[j].id] += bit.Query(q[j].y + 1) * q[j].v;\n        j++;\n    }\n    for (int k = l; k < i; k++) if (!q[k].id) bit.Modify(q[k].y + 1, -q[k].v);\n    inplace_merge(q + l, q + mid + 1, q + r + 1, cmpByX);\n}\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d\", a + i);\n        if (!mp[a[i]]) mp[a[i]] = ++mcnt;\n        a[i] = mp[a[i]];\n        pre[i] = las[a[i]];\n        las[a[i]] = i;\n        q[++qcnt] = { i, pre[i], 0, 1, 0 };\n        odt.Insert(i, i, a[i]);\n    }\n    for (int i = 1; i <= m; i++) {\n        int op;\n        scanf(\"%d\", &op);\n        if (op == 1) {\n            int l, r, v;\n            scanf(\"%d%d%d\", &l, &r, &v);\n            if (!mp[v]) mp[v] = ++mcnt;\n            v = mp[v];\n            odt.Assign(l, r, v, i);\n        }\n        else {\n            int l, r;\n            scanf(\"%d%d\", &l, &r);\n            q[++qcnt] = { r, l - 1, i, 1, ++acnt };\n            q[++qcnt] = { l - 1, l - 1, i, -1, acnt };\n        }\n    }\n    sort(q + 1, q + qcnt + 1, cmpByT);\n    CDQ(1, qcnt);\n    for (int i = 1; i <= acnt; i++) {\n        printf(\"%d\\n\", ans[i]);\n    }\n    return 0;\n}\n```\n\nODT \u7684\u5b9e\u73b0\u53c2\u8003\u4e86 Sol1 \u7684\u9898\u89e3\u3002",
        "postTime": 1675831122,
        "uid": 363415,
        "name": "251Sec",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b"
    },
    {
        "content": "\u795e\u9898\u4e00\u679a\uff0c\u5b66\u4e60\u5361\u7a7a\u95f4\u7684\u868c\u9898\u3002\n\n**Solution**\uff1a\n\n\u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272\uff0c\u968f\u673a\u7684\u8bdd\u4e00\u4e2a\u677f\u73c2\u6735\u8389\u6811\uff0c\u7a7a\u95f4\u5927\u70b9\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u4e4b\u7c7b\u7684\u6811\u5957\u6811\u5747\u53ef\uff0c\u4f46~~\u6bd2\u7624\u7684\u662f~~\u8fd9\u9898\u90fd\u4e0d\u7b26\u5408\u3002\u540e\u8005\u7684\u7a7a\u95f4\u6ca1\u6cd5\u4f18\u5316\uff0c\u6240\u4ee5\u8fd9\u9898\u53ea\u80fd\u8003\u8651\u6574\u73c2\u6735\u8389\u6811\u3002\n\n\u73c2\u6735\u8389\u6811\u5728\u53ea\u6709\u533a\u95f4\u8d4b\u503c\u7684\u9898\u91cc\u603b\u4fee\u6539\u6b21\u6570\u662f $O(n+m)$ \u7684\uff08\u5373\u4f7f\u6570\u636e\u4e0d\u968f\u673a\uff09\u3002\u8fd9\u4e5f\u662f\u5176\u4ed6\u9898\u89e3\u91cc\u4e3b\u8981\u8bc1\u660e\u7684\u4e00\u70b9\uff0c\u6709\u5f88\u591a\u79cd\u8bc1\u6cd5\uff08~~\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u201c\u611f\u6027\u7406\u89e3\u201d~~\uff09\uff0c\u8fd9\u91cc\u7528\u644a\u8fd8\u5206\u6790\u6765\u8bc1\u660e\uff1a\n\n\u6211\u4eec\u5148\u5c06\u989c\u8272\u5206\u6bb5\uff0c\u67d0\u4e00\u6bb5\u989c\u8272\u7684\u672a\u6765\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u88ab\u8986\u76d6\u6216\u5206\u88c2\u540e\u4e00\u90e8\u5206\u88ab\u8986\u76d6\u3002\u8fd9\u91cc\u4fee\u6539\u65f6\u88ab\u8986\u76d6\u7684\u989c\u8272\u6bb5\u6570\u4e4b\u548c\u662f\u6211\u4eec\u8981\u627e\u7684\u4fee\u6539\u6b21\u6570\uff0c\u53ef\u4ee5\u53d1\u73b0\u76f4\u63a5\u88ab\u8986\u76d6\u7684\u6bb5\u6570\u6700\u5927\u4e3a\u539f\u6765\u7684\u989c\u8272\u6bb5\u6570\u4e0e\u4fee\u6539\u5e26\u6765\u7684\u65b0\u989c\u8272\u6bb5\u6570\u4e4b\u548c\uff0c\u4e3a $O(n+m)$\uff0c\u4f46\u5206\u88c2\u540e\u4e00\u90e8\u5206\u88ab\u8986\u76d6\u4e0d\u4f1a\u51cf\u5c11\u989c\u8272\u6bb5\u6570\uff08\u751a\u81f3\u4f1a\u52a0\uff09\uff0c\u7531\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u6700\u591a\u5206\u88c2\u51fa\u4e24\u4e2a\u989c\u8272\u6bb5\uff0c\u6240\u4ee5\u8fd9\u91cc\u5206\u88c2\u51fa\u6765\u7684\u989c\u8272\u6bb5\u7684\u603b\u6570\u662f $O(m)$ \u7684\uff0c\u518d\u52a0\u5165\u4e0a\u8ff0\u5206\u6790\uff0c\u5f97\u51fa\u4fee\u6539\u6b21\u6570\u4e3a $O(n+m)$ \u7684\u3002\n\n\u7531\u4e8e\u4e0a\u8ff0\u7ed3\u8bba\u53ea\u6709\u5728\u53ea\u6709\u4e00\u4e2a\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u7684\u9898\u91cc\u6b63\u786e\uff0c\u6240\u4ee5\u8003\u8651\u7528\u53e6\u5916\u7684\u65b9\u5f0f\u6570\u989c\u8272\u3002\u4ecb\u7ecd\u4e00\u4e2a\u5b9e\u7528\u7684 `trick`\uff08\u5404\u79cd\u5730\u65b9\u90fd\u7528\u5f97\u5230\uff09\uff1a\u7ef4\u62a4\u4e00\u4e2a $lst_i$ \u8868\u793a\u4e0a\u4e00\u4e2a\u989c\u8272\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u627e $[l,r]$ \u91cc $lst_i<l$ \u7684\u4e2a\u6570\u3002\u56e0\u4e3a\u73c2\u6735\u8389\u6811\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e9b\u4fe1\u606f\uff0c\u6240\u4ee5\u52a0\u4e0a\u4e00\u4e2a $lst$ \u5143\u7d20\u8fd8\u662f\u53ef\u4ee5\u7528\u7684\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u627e\u5230\u67d0\u4e2a\u989c\u8272\u6bb5\u7684\u524d\u9a71\u548c\u540e\u7ee7\u6765\u66f4\u65b0\u5220\u6389\u8fd9\u4e2a\u989c\u8272\u6bb5\u540e\u7684 $lst$\uff0c\u6211\u4eec\u8981\u518d\u5bf9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a `set`\u3002\u6ce8\u610f\u6bcf\u4e2a\u989c\u8272\u7684 `set` \u8981\u548c\u73c2\u6735\u8389\u6811\u91cc\u7684\u989c\u8272\u6bb5\u4e00\u4e00\u5bf9\u5e94\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e9b\u64cd\u4f5c\uff1a\n\n- \u5728 $t$ \u65f6\u523b\u7b2c $x$ \u7684\u4f4d\u7f6e\u591a\u4e86 $delta(delta\\in \\{1,-1\\})$ \u4e2a\u524d\u9a71\u4e3a $y$ \u7684\u503c\u3002\n- \u5728 $t$ \u65f6\u523b\u67e5\u8be2 $[l,r]$ \u91cc\u524d\u9a71\u5c0f\u4e8e $y$ \u7684\u503c\u7684\u548c\u3002\n\n\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7528\u4e24\u4e2a\u524d\u7f00\u548c\u7684\u5dee\u6765\u51cf\u5c11\u4e00\u7ef4\uff0c\u7136\u540e\u5c31\u53ea\u6709 $t,x,y$ \u4e09\u7ef4\u4e86\uff0c\u76f4\u63a5\u4e0a\u4e00\u4e2a cdq \u5206\u6cbb\u8fd9\u9898\u5c31\u7ed3\u675f\u4e86\u3002\n\n**\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff08\u6211\u6302\u8fc7\u7684\uff09**\uff1a\n\n- \u522b\u89c9\u5f97\u8fd9\u9898\u5f88\u96be\u5199\uff0c\u8fd9\u9898\u771f\u7684\u5f88\u96be\u5199\uff08\u5ba2\u89c2\uff0c\u800c\u4e0d\u662f\u4e3b\u89c2\uff09\u3002\n- \u533a\u95f4\u8d4b\u503c\u65f6\u5220\u6389\u7684\u989c\u8272\u6bb5\u7684\u5de6\u7aef\u70b9\u7684\u524d\u9a71\u8981\u6539\uff0c\u5b83\u7684\u540e\u7ee7\u7684\u524d\u9a71\u4e5f\u8981\u6539\uff0c\u5206\u88c2\u65f6\u6700\u597d\u5148\u628a\u8fb9\u754c\u5904\u7406\u5e72\u51c0\uff0c\u4e0d\u7136\u540e\u9762\u4f1a\u5f88\u96be\u6253\u3002\n- \u53ef\u4ee5\u7528\u94fe\u8868\u7ef4\u62a4\u73c2\u6735\u8389\u6811\uff0c\u4e2a\u4eba\u611f\u89c9\u4f1a\u65b9\u4fbf\u4e00\u70b9\uff08\u867d\u7136\u6211\u4e5f\u5199\u7684 `set` \u7ef4\u62a4\uff09\uff0c\u56e0\u4e3a\u5220\u6389\u7684\u989c\u8272\u6bb5\u7684\u540e\u7ee7\u4e5f\u5728\u73c2\u6735\u8389\u6811\u91cc\uff0c\u8fd9\u65f6\u5019\u4e0d\u65b9\u4fbf\u5220\uff0c\u5f97\u4fdd\u5b58\u4e0b\u6765\u4e4b\u540e\u518d\u641e\uff0c\u94fe\u8868\u5c31\u4e0d\u9700\u8981\u5904\u7406\u8fd9\u4e9b\u4e86\u3002\n\n**\u7136\u540e\u5c31\u662f\u5361 cache \u7684\u5947\u5999 `trick` \u4e86**\uff1a\n\n- \u5176\u4ed6\u795e\u4ed9\u9898\u89e3\u91cc\u6709\u5199\u795e\u4ed9\u505a\u6cd5\uff0c\u4f46\u6211\u89c9\u5f97\u6709\u70b9\u590d\u6742\uff0c\u4e8e\u662f\u81ea\u521b\u4e86\u4e00\u6761\u9053\u8def\uff08\u5982\u6709\u96f7\u540c\uff0c\u7eaf\u5c5e\u5de7\u5408\uff09\u3002\n- \u52a0\u64cd\u4f5c\u7684\u65f6\u5019\u662f\u6309\u65f6\u95f4\u987a\u5e8f\uff0c\u6240\u4ee5 $tim$ \u5143\u7d20\u5e76\u4e0d\u5fc5\u8981\u3002\n- \u7b2c\u4e00\u4e2a\u70b9\u91cc\u7684 $tim$ \u8981\u7528\u4e8e\u6620\u5c04\u67e5\u8be2\u7684\u539f\u4e0b\u6807\uff0c\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u67e5\u8be2\u7684 $delta$ \u4e5f\u5c5e\u4e8e $\\{1,-1\\}$\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u641e\u6210 $\\{tim,-tim\\}$\uff0c\u67e5\u8be2\u65f6\u53d6\u4e2a\u7edd\u5bf9\u503c\u5c31\u884c\u4e86\uff0c\u5b9e\u6d4b\u6709\u6548\u3002\n- \u53d1\u73b0\u8fd8\u662f\u6302\u4e86\u51e0\u4e2a\u70b9\uff0c\u5343\u4e07\u4e0d\u8981\u53bb\u4f18\u5316\u5565\u5176\u4ed6\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5bf9\u6700\u591a\u7684\u4e0b\u624b\uff1a\u64cd\u4f5c\u3002\u5728 cdq \u5206\u6cbb\u65f6\u6211\u4eec\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u53bb\u8bb0\u5f55\u5f52\u5e76\u540e\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u8fd9\u73a9\u610f\u513f\u5728\u5168\u533a\u95f4\u91cc\u6ca1\u7528\uff0c\u6240\u4ee5\u7279\u5224\u4e00\u4e0b\u6700\u5927\u7684\u90a3\u4e00\u5c42\u5f52\u5e76\uff0c\u4e0d\u7528\u4e34\u65f6\u6570\u7ec4\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701 $\\frac{1}{4}$ \u7684\u7a7a\u95f4\uff0c**\u53ef\u4ee5\u901a\u8fc7**\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace IO{\n}\nusing IO::read;\nconst int N=100005;\nstruct opera {\n    int x,y,delta;bool op;\n};vector<opera> vec,vec2;\nstruct assign_count {\n    int op,l,r,x;\n}p[N];\nint n,m,a[N],flag[N<<1],top,ans[N],bit[N];\nvoid add(int x,int y) {\n    x++;\n    while(x<=n) bit[x]+=y,x+=(x&-x);\n}\nint ask(int x) {\n    int tot=0;\n    x++;\n    while(x) tot+=bit[x],x-=(x&-x);\n    return tot;\n}\nstruct Chtholly_Tree {\n    struct node {\n        int l,r,pre,col;\n        bool operator<(const node &p) const {\n            return l<p.l;\n        }\n    }LL,RR,tmp;set<node> odt,pos[N<<1];\n    int Pre;\n    vector<node> Tmp;\n    auto split(int x) {\n        auto it=--odt.upper_bound({x,x,0,0}),iit=pos[it->col].find(*it);\n        int l=it->l,r=it->r,pre=it->pre,col=it->col;\n        odt.erase(it);\n        pos[col].erase(iit);\n        if(l<x) odt.insert({l,x-1,pre,col}),pos[col].insert({l,x-1,pre,col});\n        odt.insert({x,r,l<x?x-1:pre,col}),pos[col].insert({x,r,l<x?x-1:pre,col});\n        return --odt.upper_bound({x,x,0,0});\n    }\n    void assign(int l,int r,int col) {\n        auto R=split(r+1),L=split(l);\n        for(auto it=L;it!=R;it++) {\n            auto iit=pos[it->col].find(*it),lst=iit,nxt=iit;\n            vec.push_back({it->l,iit->pre,-1,0});\n            ++nxt;\n            if(nxt!=pos[it->col].end()) {\n                tmp=*nxt;\n                if(iit==pos[it->col].begin()) tmp.pre=0;\n                else --lst,tmp.pre=lst->r;\n                vec.push_back({nxt->l,nxt->pre,-1,0});\n                Tmp.push_back(tmp);\n                pos[it->col].erase(nxt);\n                vec.push_back({tmp.l,tmp.pre,1,0});\n                pos[it->col].insert(tmp);\n            }\n            pos[it->col].erase(*it);\n            if(it!=L) \n                vec.push_back({it->l,it->l-1,1,0});\n        }\n        LL=*L,RR=*R;\n        for(const auto &lxl:Tmp) odt.erase(lxl),odt.insert(lxl);\n        odt.erase(odt.find(LL),odt.find(RR));\n        Tmp.clear();\n        auto nxt=pos[col].upper_bound({l,l,0,0});\n        Pre=0;\n        if(nxt!=pos[col].begin()) {\n            auto it=nxt;\n            it--;\n            Pre=it->r;\n        }\n        if(nxt!=pos[col].end()) {\n            vec.push_back({nxt->l,nxt->pre,-1,0});\n            tmp=*nxt;\n            tmp.pre=r;\n            vec.push_back({tmp.l,tmp.pre,1,0});\n            odt.erase(*nxt);\n            odt.insert(tmp);\n            pos[col].erase(nxt);\n            pos[col].insert(tmp);\n        }\n        odt.insert({l,r,Pre,col});\n        pos[col].insert({l,r,Pre,col});\n        vec.push_back({l,Pre,1,0});\n    }\n}ODT;\nvoid cdq(int l,int r) {\n    if(l==r) return ;\n    int mid=l+r>>1;\n    cdq(l,mid),cdq(mid+1,r);\n    int p1=l,p2=mid+1;\n    bool flag=(l==0&&r==vec.size()-1);\n    while(p1<=mid||p2<=r) {\n        if(p2>r||(p1<=mid&&vec[p1].x<=vec[p2].x)) {\n            if(!vec[p1].op) add(vec[p1].y,vec[p1].delta);\n            if(!flag) vec2.push_back(vec[p1]);p1++;\n        }else {\n            if(vec[p2].op) {\n                ans[abs(vec[p2].delta)]+=(abs(vec[p2].delta)/vec[p2].delta)*ask(vec[p2].y);\n            }\n            if(!flag) vec2.push_back(vec[p2]);p2++;\n        }\n    }\n    for(int i=l;i<=mid;i++) if(!vec[i].op) add(vec[i].y,-vec[i].delta);\n    if(!flag) for(int i=l;i<=r;i++) vec[i]=vec2[i-l];\n    vec2.clear(),vec2.shrink_to_fit();\n    return ; \n}\nint main() {\n    // freopen(\"P4690.in\",\"r\",stdin);\n    // freopen(\"P4690.out\",\"w\",stdout);\n    n=read(),m=read();\n    for(int i=1;i<=n;i++) a[i]=read(),flag[++top]=a[i];\n    for(int i=1;i<=m;i++) {\n        p[i].op=read();\n        if(p[i].op^2) p[i].l=read(),p[i].r=read(),flag[++top]=p[i].x=read();\n        else p[i].l=read(),p[i].r=read();\n    }\n    sort(flag+1,flag+top+1),top=unique(flag+1,flag+top+1)-flag-1;\n    for(int i=1;i<=n;i++) a[i]=lower_bound(flag+1,flag+top+1,a[i])-flag;\n    for(int i=1;i<=m;i++) if(p[i].op^2) p[i].x=lower_bound(flag+1,flag+top+1,p[i].x)-flag;\n    for(int i=1;i<=n;i++) {\n        if(ODT.pos[a[i]].empty()) ODT.odt.insert({i,i,0,a[i]}),ODT.pos[a[i]].insert({i,i,0,a[i]}),vec.push_back({i,0,1,0});\n        else {\n            vec.push_back({i,ODT.pos[a[i]].rbegin()->r,1,0});\n            ODT.odt.insert({i,i,ODT.pos[a[i]].rbegin()->r,a[i]});\n            ODT.pos[a[i]].insert({i,i,ODT.pos[a[i]].rbegin()->r,a[i]});\n        }\n    }\n    for(int i=1;i<=m;i++) {\n        if(p[i].op^2) ODT.assign(p[i].l,p[i].r,p[i].x);\n        else vec.push_back({p[i].r,p[i].l-1,i,1}),vec.push_back({p[i].l-1,p[i].l-1,-i,1});\n    }\n    cdq(0,vec.size()-1);\n    for(int i=1;i<=m;i++) if(p[i].op^1) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1675086974,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "P4690 \u9898\u89e3"
    },
    {
        "content": "### P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b\n\n\u533a\u95f4\u8d4b\u503c\u533a\u95f4\u6570\u989c\u8272\uff0c$n \\leq 10^5$\uff0c\u503c\u57df $[1,10^9]$\uff0c\u8981\u6c42\u7ebf\u6027\u7a7a\u95f4\u3002\n\n##### sol\n\n\u9996\u5148\u8003\u8651\u7ecf\u5178\u6570\u989c\u8272\u5957\u8def\uff0c\u8bbe $pre_i$ \u8868\u793a\u4e0a\u4e00\u4e2a\u4e0e $a_i$ \u76f8\u540c\u7684\u6570\u7684\u4f4d\u7f6e\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0c\u6211\u4eec\u53d1\u73b0\u6027\u8d28\uff1a$\\forall i\\in(l,r],pre_i \u2190i-1$\uff0c\u5bf9\u4e8e $i=l$ \u6216\u533a\u95f4\u5916\u7684\u60c5\u51b5\u7279\u5224\u5373\u53ef\u3002\n\n\u8003\u8651\u4f7f\u7528 `ODT` \u7ef4\u62a4 $pre$ \u7684\u4fee\u6539\uff0c\u4e00\u4e2a `ODT` \u7ef4\u62a4\u5e8f\u5217\uff0c\u4e00\u4e2a `ODT` \u6570\u7ec4\u7ef4\u62a4\u989c\u8272\u4f4d\u7f6e\uff0c\u5747\u644a\u4fee\u6539\u6b21\u6570\u4e3a $\\mathcal O(n)$\uff08\u589e\u52a0\u8282\u70b9\u603b\u6570 $\\mathcal O(n)$\uff0c\u5220\u9664\u8282\u70b9\u603b\u6570 $\\mathcal O(n)$\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$\u3002\n\n\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u5e26\u4fee\u6c42 $\\sum\\limits_{i=l}^{r}[pre_i<l]$\uff0c\u8003\u8651\u5230\u8981\u6c42\u7ebf\u6027\u7a7a\u95f4\uff0c\u6545\u4f7f\u7528\u4e09\u7ef4 `cdq`\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log^2 n)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log ^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n)$\u3002\n\n\u8be6\u89c1\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace Fread\n{\n\tconst int SIZE = 1 << 21;\n\tchar buf[SIZE], *S, *T;\n\tinline char getchar()\n\t{\n\t\tif (S == T)\n\t\t{\n\t\t\tT = (S = buf) + fread(buf, 1, SIZE, stdin);\n\t\t\tif (S == T)\n\t\t\t\treturn '\\n';\n\t\t}\n\t\treturn *S++;\n\t}\n}\n\nnamespace Fwrite\n{\n\tconst int SIZE = 1 << 21;\n\tchar buf[SIZE], *S = buf, *T = buf + SIZE;\n\tinline void flush()\n\t{\n\t\tfwrite(buf, 1, S - buf, stdout);\n\t\tS = buf;\n\t}\n\tinline void putchar(char c)\n\t{\n\t\t*S++ = c;\n\t\tif (S == T)\n\t\t\tflush();\n\t}\n\tstruct NTR\n\t{\n\t\t~NTR()\n\t\t{\n\t\t\tflush();\n\t\t}\n\t} ztr;\n}\n\n#ifdef ONLINE_JUDGE\n#define getchar Fread::getchar\n#define putchar Fwrite::putchar\n#endif\n\ninline int read()\n{\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile(c < '0' || c > '9')\n\t{\n\t\tif(c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile(c >= '0' && c <= '9')\n\t{\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline void write(int x)\n{\n\tif(x < 0) putchar('-'), x = -x;\n\tif(x > 9) write(x / 10);\n\tputchar(x % 10 + 48);\n}\n\nconst int _ = 2e5 + 10, M = 1e6 + 10;\n\nint n, m, tot, a[_], cnt, b[_], ans[_], d[_], pre[_];\n\nstruct Query\n{\n\tint opt, l, r, x;\n} q[_];\n\nstruct Node\n{\n\tint x, y, z, k, d, ans;\n\tinline bool operator < (const Node &t) const\n\t{\n\t\treturn x != t.x ? x < t.x : (y != t.y ? y < t.y : z < t.z);\n\t}\n} p[M], c[M >> 1];\n\n#define pii pair<int, int>\n#define pa set<pii>::iterator\n\nstruct Col\n{\n\tset<pii> cl, v[_];\n\tinline void split(int k)\n\t{\n\t\tpa it = cl.lower_bound({k + 1, 0});\n\t\tint r = it->first - 1;\n\t\t--it;\n\t\tint l = it->first;\n\t\tif(k == r) return;\n\t\tint c = it->second;\n\t\tcl.erase(it);\n\t\tcl.insert({l, c});\n\t\tcl.insert({k + 1, c});\n\t\tv[c].erase({l, r});\n\t\tv[c].insert({l, k});\n\t\tv[c].insert({k + 1, r});\n\t}\n\tinline void Insert(int l, int r, int c, int t)\n\t{\n\t\tsplit(l - 1), split(r);\n\t\tfor(pa it = cl.lower_bound({l, 0}); it-> first <= r;)\n\t\t{\n\t\t\tint x = it->first, y = it->second;\n\t\t\t++it;\n\t\t\tint z = it->first - 1;\n\t\t\tcl.erase({x, y});\n\t\t\tv[y].erase({x, z});\n\t\t\tif(x == l)\n\t\t\t{\n\t\t\t\tint e = (--(v[c].upper_bound({x, 0})))->second;\n\t\t\t\tif(pre[x] != e)\n\t\t\t\t{\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\n\t\t\t\t\tpre[x] = e;\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(pre[x] != x - 1)\n\t\t\t\t{\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\n\t\t\t\t\tpre[x] = x - 1;\n\t\t\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\n\t\t\t\t}\n\t\t\t}\n\t\t\tx = z + 1;\n\t\t\tz = (v[y].lower_bound({x, 0}))->first;\n\t\t\tint e = (--v[y].lower_bound({l, 0}))->second;\n\t\t\tif(z > r && z <= n && pre[z] != e)\n\t\t\t{\n\t\t\t\tp[++tot] = {t, z, pre[z], 0, -1, 0};\n\t\t\t\tpre[z] = e;\n\t\t\t\tp[++tot] = {t, z, pre[z], 0, 1, 0};\n\t\t\t}\n\t\t}\n\t\tpa it = v[c].lower_bound({r + 1, 0});\n\t\tint x = it->first;\n\t\tif(x <= n && pre[x] != r)\n\t\t{\n\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\n\t\t\tpre[x] = r;\n\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\n\t\t}\n\t\tv[c].insert({l, r});\n\t\tcl.insert({l, c});\n\t\tx = r + 1;\n\t\tif(x <= n)\n\t\t{\n\t\t\tit = cl.lower_bound({x, 0});\n\t\t\tint y = it->second;\n\t\t\tint e = (--v[y].lower_bound({x, 0}))->second;\n\t\t\tif(pre[x] != e)\n\t\t\t{\n\t\t\t\tp[++tot] = {t, x, pre[x], 0, -1, 0};\n\t\t\t\tpre[x] = e;\n\t\t\t\tp[++tot] = {t, x, pre[x], 0, 1, 0};\n\t\t\t}\n\t\t}\n\t}\n} col;\n\ninline void update(int x, int v)\n{\n\t++x;\n\twhile(x < _) d[x] += v, x += x & -x;\n}\n\ninline int query(int x)\n{\n\t++x;\n\tint res = 0;\n\twhile(x) res += d[x], x -= x & -x;\n\treturn res;\n}\n\nvoid solve(int l, int r)\n{\n\tif(l >= r) return;\n\tint mid = (l + r) >> 1;\n\tsolve(l, mid), solve(mid + 1, r);\n\tint i = l, j = mid + 1, k = 0;\n\tbool flg = (l != 1 || r != tot);\n\twhile(i <= mid && j <= r)\n\t\tif(p[i].y <= p[j].y)\n\t{\n\t\tif(p[i].k == 0) update(p[i].z, p[i].d);\n\t\tif(flg) c[k++] = p[i];\n\t\t++i;\n\t}\n\telse\n\t{\n\t\tif(p[j].k == 1) p[j].ans += query(p[j].z);\n\t\tif(flg) c[k++] = p[j];\n\t\t++j;\n\t}\n\twhile(i <= mid)\n\t{\n\t\tif(p[i].k == 0) update(p[i].z, p[i].d);\n\t\tif(flg) c[k++] = p[i];\n\t\t++i;\n\t}\n\twhile(j <= r)\n\t{\n\t\tif(p[j].k == 1) p[j].ans += query(p[j].z);\n\t\tif(flg) c[k++] = p[j];\n\t\t++j;\n\t}\n\tfor(int i = l; i <= mid; ++i) if(p[i].k == 0) update(p[i].z, -p[i].d);\n\tif(flg) for(int i = 0; i < k; ++i) p[i + l] = c[i];\n}\n\nsigned main()\n{\n\tn = cnt = read(), m = read();\n\tfor(int i = 1; i <= n; ++i) a[i] = b[i] = read();\n\tfor(int i = 1; i <= m; ++i)\n\t{\n\t\tq[i].opt = read(), q[i].l = read(), q[i].r = read();\n\t\tif(q[i].opt == 1) b[++cnt] = q[i].x = read();\n\t}\n\tsort(b + 1, b + cnt + 1);\n\tcnt = unique(b + 1, b + cnt + 1) - b - 1;\n\tfor(int i = 1; i <= n; ++i) a[i] = lower_bound(b + 1, b + cnt + 1, a[i]) - b;\n\tfor(int i = 1; i <= m; ++i) if(q[i].opt == 1) q[i].x = lower_bound(b + 1, b + cnt + 1, q[i].x) - b;\n\tfor(int i = 1; i <= cnt; ++i) col.v[i].insert({0, 0});\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tpre[i] = (--col.v[a[i]].end())->second;\n\t\tp[++tot] = {0, i, pre[i], 0, 1, 0};\n\t\tcol.v[a[i]].insert({i, i});\n\t\tcol.cl.insert({i, a[i]});\n\t}\n\tfor(int i = 1; i <= cnt; ++i) col.v[i].insert({n + 1, 0});\n\tcol.cl.insert({0, 0}), col.cl.insert({n + 1, n + 1});\n\tfor(int i = 1; i <= m; ++i)\n\t\tif(q[i].opt == 1) col.Insert(q[i].l, q[i].r, q[i].x, i);\n\telse p[++tot] = {i, q[i].r, q[i].l - 1, 1, 1, 0}, p[++tot] = {i, q[i].l - 1, q[i].l - 1, 1, -1, 0};\n\tsort(p + 1, p + tot + 1);\n\tsolve(1, tot);\n\tfor(int i = 1; i <= tot; ++i) if(p[i].k) ans[p[i].x] += p[i].ans * p[i].d;\n\tfor(int i = 1; i <= m; ++i) if(q[i].opt == 2) write(ans[i]), putchar('\\n');\n\treturn 0;\n}\n```\n\n",
        "postTime": 1654059239,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P4690 [Ynoi2016] \u955c\u4e2d\u7684\u6606\u866b"
    },
    {
        "content": "## \u9898\u610f:\n\n\u5b9e\u73b0**\u533a\u95f4\u8d4b\u503c**\uff0c\u533a\u95f4**\u6570\u989c\u8272**\n\n## \u5206\u6790\uff1a\n\u9996\u5148\u6211\u4eec\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u5de6\u4fa7\u7b2c\u4e00\u4e2a\u540c\u8272\u70b9\u7684\u4f4d\u7f6e\uff0c\u8bb0\u4e3a `prei`\uff0c\u6b64\u65f6\u533a\u95f4\u6570\u989c\u8272\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684  **\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898**\n\n\u901a\u8fc7\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u989c\u8272\u770b\u6210\u4e00\u4e2a\u70b9\u7684\u65b9\u5f0f\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e `pre` \u7684\u53d8\u5316\u91cf\u662f $O(n + m)$ \u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\u5355\u6b21\u64cd\u4f5c\u4ec5\u4ec5\u5f15\u8d77 $O(1)$ \u7684 `pre`  \u503c\u53d8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528 **cdq\u5206\u6cbb** \u6765\u89e3\u51b3\u52a8\u6001\u7684\u5355\u70b9\u52a0\u77e9\u5f62\u6c42\u548c\u95ee\u9898\n\n`pre` \u6570\u7ec4\u7684\u5177\u4f53\u53d8\u5316\u53ef\u4ee5\u4f7f\u7528 `set` \u6765\u8fdb\u884c\u5904\u7406\uff08\u8fd9\u4e2a\u7528 `set` \u7ef4\u62a4\u8fde\u7eed\u7684\u533a\u95f4\u7684\u6280\u5de7\u4e5f\u88ab\u79f0\u4e4b\u4e3a `old driver tree` )\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <map>\n#include <set>\n#define SNI set<nod>::iterator\n#define SDI set<data>::iterator\nusing namespace std;\nconst int N = 1e5 + 10;\nint n;\nint m;\nint pre[N];\nint npre[N];\nint a[N];\nint tp[N];\nint lf[N];\nint rt[N];\nint co[N];\nstruct modi {\n  int t;\n  int pos;\n  int pre;\n  int va;\n  friend bool operator<(modi a, modi b) { return a.pre < b.pre; }\n} md[10 * N];\nint tp1;\nstruct qry {\n  int t;\n  int l;\n  int r;\n  int ans;\n  friend bool operator<(qry a, qry b) { return a.l < b.l; }\n} qr[N];\nint tp2;\nint cnt;\ninline bool cmp(const qry& a, const qry& b) { return a.t < b.t; }\ninline void modify(int pos, int co)  // \u4fee\u6539\u51fd\u6570\n{\n  if (npre[pos] == co) return;\n  md[++tp1] = (modi){++cnt, pos, npre[pos], -1};\n  md[++tp1] = (modi){++cnt, pos, npre[pos] = co, 1};\n}\nnamespace prew {\nint lst[2 * N];\nmap<int, int> mp;  // \u63d0\u524d\u79bb\u6563\u5316\ninline void prew() {\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 1; i <= n; i++) scanf(\"%d\", &a[i]), mp[a[i]] = 1;\n  for (int i = 1; i <= m; i++) {\n    scanf(\"%d%d%d\", &tp[i], &lf[i], &rt[i]);\n    if (tp[i] == 1) scanf(\"%d\", &co[i]), mp[co[i]] = 1;\n  }\n  map<int, int>::iterator it, it1;\n  for (it = mp.begin(), it1 = it, ++it1; it1 != mp.end(); ++it, ++it1)\n    it1->second += it->second;\n  for (int i = 1; i <= n; i++) a[i] = mp[a[i]];\n  for (int i = 1; i <= n; i++)\n    if (tp[i] == 1) co[i] = mp[co[i]];\n  for (int i = 1; i <= n; i++) pre[i] = lst[a[i]], lst[a[i]] = i;\n  for (int i = 1; i <= n; i++) npre[i] = pre[i];\n}\n}  // namespace prew\nnamespace colist {\nstruct data {\n  int l;\n  int r;\n  int x;\n  friend bool operator<(data a, data b) { return a.r < b.r; }\n};\nset<data> s;\nstruct nod {\n  int l;\n  int r;\n  friend bool operator<(nod a, nod b) { return a.r < b.r; }\n};\nset<nod> c[2 * N];\nset<int> bd;\ninline void split(int mid) {  // \u5c06\u4e00\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\n  SDI it = s.lower_bound((data){0, mid, 0});\n  data p = *it;\n  if (mid == p.r) return;\n  s.erase(p);\n  s.insert((data){p.l, mid, p.x});\n  s.insert((data){mid + 1, p.r, p.x});\n  c[p.x].erase((nod){p.l, p.r});\n  c[p.x].insert((nod){p.l, mid});\n  c[p.x].insert((nod){mid + 1, p.r});\n}\ninline void del(set<data>::iterator it) {  // \u5220\u9664\u4e00\u4e2a\u8fed\u4ee3\u5668\n  bd.insert(it->l);\n  SNI it1, it2;\n  it1 = it2 = c[it->x].find((nod){it->l, it->r});\n  ++it2;\n  if (it2 != c[it->x].end()) bd.insert(it2->l);\n  c[it->x].erase(it1);\n  s.erase(it);\n}\ninline void ins(data p) {  // \u63d2\u5165\u4e00\u4e2a\u8282\u70b9\n  s.insert(p);\n  SNI it = c[p.x].insert((nod){p.l, p.r}).first;\n  ++it;\n  if (it != c[p.x].end()) {\n    bd.insert(it->l);\n  }\n}\ninline void stv(int l, int r, int x) {  // \u533a\u95f4\u8d4b\u503c\n  if (l != 1) split(l - 1);\n  split(r);\n  int p = l;  // split\u4e24\u4e0b\u4e4b\u540e\u5220\u6389\u6240\u6709\u533a\u95f4\n  while (p != r + 1) {\n    SDI it = s.lower_bound((data){0, p, 0});\n    p = it->r + 1;\n    del(it);\n  }\n  ins((data){l, r, x});  // \u626b\u4e00\u904dset\u5904\u7406\u6240\u6709\u53d8\u5316\u7684pre\u503c\n  for (set<int>::iterator it = bd.begin(); it != bd.end(); ++it) {\n    SDI it1 = s.lower_bound((data){0, *it, 0});\n    if (*it != it1->l)\n      modify(*it, *it - 1);\n    else {\n      SNI it2 = c[it1->x].lower_bound((nod){0, *it});\n      if (it2 != c[it1->x].begin())\n        --it2, modify(*it, it2->r);\n      else\n        modify(*it, 0);\n    }\n  }\n  bd.clear();\n}\ninline void ih() {\n  int nc = a[1];\n  int ccnt = 1;  // \u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u63d2\u5165\u5230set\u4e2d\n  for (int i = 2; i <= n; i++)\n    if (nc != a[i]) {\n      s.insert((data){i - ccnt, i - 1, nc}),\n          c[nc].insert((nod){i - ccnt, i - 1});\n      nc = a[i];\n      ccnt = 1;\n    } else {\n      ccnt++;\n    }\n  s.insert((data){n - ccnt + 1, n, a[n]}),\n      c[a[n]].insert((nod){n - ccnt + 1, n});\n}\n}  // namespace colist\nnamespace cdq {\nstruct treearray  // \u6811\u72b6\u6570\u7ec4\n{\n  int ta[N];\n  inline void c(int x, int t) {\n    for (; x <= n; x += x & (-x)) ta[x] += t;\n  }\n  inline void d(int x) {\n    for (; x <= n; x += x & (-x)) ta[x] = 0;\n  }\n  inline int q(int x) {\n    int r = 0;\n    for (; x; x -= x & (-x)) r += ta[x];\n    return r;\n  }\n  inline void clear() {\n    for (int i = 1; i <= n; i++) ta[i] = 0;\n  }\n} ta;\nint srt[N];\ninline bool cmp1(const int& a, const int& b) { return pre[a] < pre[b]; }\ninline void solve(int l1, int r1, int l2, int r2, int L, int R) {  // cdq\n  if (l1 == r1 || l2 == r2) return;\n  int mid = (L + R) / 2;\n  int mid1 = l1;\n  while (mid1 != r1 && md[mid1 + 1].t <= mid) mid1++;\n  int mid2 = l2;\n  while (mid2 != r2 && qr[mid2 + 1].t <= mid) mid2++;\n  solve(l1, mid1, l2, mid2, L, mid);\n  solve(mid1, r1, mid2, r2, mid, R);\n  if (l1 != mid1 && mid2 != r2) {\n    sort(md + l1 + 1, md + mid1 + 1);\n    sort(qr + mid2 + 1, qr + r2 + 1);\n    for (int i = mid2 + 1, j = l1 + 1; i <= r2; i++) {  // \u8003\u8651\u5de6\u4fa7\u5bf9\u53f3\u4fa7\u8d21\u732e\n      while (j <= mid1 && md[j].pre < qr[i].l) ta.c(md[j].pos, md[j].va), j++;\n      qr[i].ans += ta.q(qr[i].r) - ta.q(qr[i].l - 1);\n    }\n    for (int i = l1 + 1; i <= mid1; i++) ta.d(md[i].pos);\n  }\n}\ninline void mainsolve() {\n  colist::ih();\n  for (int i = 1; i <= m; i++)\n    if (tp[i] == 1)\n      colist::stv(lf[i], rt[i], co[i]);\n    else\n      qr[++tp2] = (qry){++cnt, lf[i], rt[i], 0};\n  sort(qr + 1, qr + tp2 + 1);\n  for (int i = 1; i <= n; i++) srt[i] = i;\n  sort(srt + 1, srt + n + 1, cmp1);\n  for (int i = 1, j = 1; i <= tp2; i++) {  // \u521d\u59cb\u5316\u4e00\u4e0b\u6bcf\u4e2a\u8be2\u95ee\u7684\u503c\n    while (j <= n && pre[srt[j]] < qr[i].l) ta.c(srt[j], 1), j++;\n    qr[i].ans += ta.q(qr[i].r) - ta.q(qr[i].l - 1);\n  }\n  ta.clear();\n  sort(qr + 1, qr + tp2 + 1, cmp);\n  solve(0, tp1, 0, tp2, 0, cnt);\n  sort(qr + 1, qr + tp2 + 1, cmp);\n  for (int i = 1; i <= tp2; i++) printf(\"%d\\n\", qr[i].ans);\n}\n}  // namespace cdq\nint main() {\n  prew::prew();\n  cdq::mainsolve();\n  return 0;\n}  // \u62dc\u62dc\u7a0b\u5e8f~\n```\n",
        "postTime": 1631614813,
        "uid": 380660,
        "name": "Liuboxuan090808",
        "ccfLevel": 0,
        "title": "P4690 \u9898\u89e3"
    },
    {
        "content": "[\u5728\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\u4e2d\u9605\u8bfb](https://macesuted.cn/article/lg4690/)\n\n---\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4690)\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ef4\u62a4\u4e00\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217 $a_i$\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\u3002\n\n1. \u5c06\u533a\u95f4 $[l,~r]$ \u7684\u503c\u4fee\u6539\u4e3a $x$\u3002\n2. \u8be2\u95ee\u533a\u95f4 $[l,~r]$ \u51fa\u73b0\u4e86\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u540c\u4e00\u4e2a\u6570\u51fa\u73b0\u591a\u6b21\u53ea\u7b97\u4e00\u4e2a\u3002\n\n$1 \\le n,~m \\le 10^5,~1 \\le a_i \\le 10^9$\n\n## \u5206\u6790\n\n\u533a\u95f4\u6570\u4e0d\u540c\u989c\u8272\u6570\u91cf\u95ee\u9898\u6211\u4eec\u5e38\u7528\u7684\u89e3\u51b3\u65b9\u6848\u662f\u8bb0 $pre_i$ \u7b49\u4e8e\u6700\u5927\u7684 $j$ \u6ee1\u8db3 $j < i$ \u4e14 $a_j = a_i$\uff0c\u6570\u533a\u95f4\u5185\u6ee1\u8db3 $pre_i < l$ \u7684\u6570\u91cf\u5373\u4e3a\u533a\u95f4\u5185\u7684\u989c\u8272\u6570\u91cf\u3002\n\n\u6b64\u9898\u7684\u96be\u70b9\u5728\u4e8e\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\uff0c\u7ecf\u5206\u6790\u4e0d\u96be\u53d1\u73b0\u5f53\u4e00\u4e2a\u533a\u95f4 $[l,~r]$ \u88ab\u4fee\u6539\u4e3a $x$ \u65f6 $\\forall i \\in (l,~r],~pre[i]=i-1$\uff0c\u6240\u4ee5\u5728\u6bcf\u6b21\u64cd\u4f5c\u540e\u6211\u4eec\u53ea\u9700\u8981\uff1a\n\n1. \u5c06 $pre_l$ \u4fee\u6539\u4e3a\u4e0a\u4e00\u4e2a $x$ \u533a\u95f4\u7684\u53f3\u7aef\u70b9\u3002\n2. \u5c06\u4e0b\u4e00\u4e2a $x$ \u533a\u95f4\u7684\u5de6\u7aef\u70b9\u7684 $pre$ \u6539\u4e3a $r$\u3002\n3. \u5c06 $(l,~r]$ \u533a\u95f4\u5185\u7684\u6240\u6709 $pre_i$ \u6539\u4e3a $i-1$\u3002\n\n\u8003\u8651 3 \u64cd\u4f5c\uff0c\u5982\u679c\u6211\u4eec\u5728\u6bcf\u6b21\u4fee\u6539\u65f6\u5c06\u6240\u6709 $pre_i \\neq i-1$ \u7684\u4f4d\u7f6e\u627e\u51fa\u5e76\u4fee\u6539\u4e3a $i-1$\uff0c\u5168\u5c40\u82b1\u5728 3 \u64cd\u4f5c\u4e0a\u7684\u4fee\u6539\u6b21\u6570\u4e3a $O(n+m)$\uff1a\u521d\u59cb\u65f6\u6bcf\u4e2a $pre_i$ \u53ef\u80fd\u90fd\u4e0d\u7b49\u4e8e $i-1$\uff0c\u800c\u540e\u9762\u7684 $m$ \u4e2a\u64cd\u4f5c\u4e2d\u6bcf\u4e2a\u64cd\u4f5c\u6700\u591a\u53ea\u4f1a\u8ba9\u4e24\u4e2a $pre_i$ \u4fee\u6539\u5f97\u4e0d\u7b49\u4e8e $i-1$\uff0c\u6240\u4ee5\u5168\u5c40\u51fa\u73b0\u8fc7 $pre_i$ \u4e0d\u7b49\u4e8e $i-1$ \u60c5\u51b5\u7684\u6b21\u6570\u4e3a $O(n+m)$\uff0c\u6240\u4ee5\u82b1\u5728 3 \u64cd\u4f5c\u4e0a\u7684\u4fee\u6539\u6b21\u6570\u4e5f\u5c31\u4e3a $O(n+m)$\u3002\n\n\u8003\u8651\u5982\u4f55\u5feb\u901f\u627e\u51fa $pre_i \\neq i-1$ \u7684\u4f4d\u7f6e\u3002\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f\u4e00\u4e2a\u8fde\u7eed\u989c\u8272\u6bb5\u7684\u5f00\u5934\u3002\u56e0\u6b64\u6211\u4eec\u5bf9\u539f\u5e8f\u5217\u5efa\u4e00\u9897 ODT\uff0c\u6bcf\u6b21\u4fee\u6539 $[l,~r]$ \u65f6\uff0c1 \u64cd\u4f5c\u548c 2 \u64cd\u4f5c\u76f4\u63a5\u5355\u70b9\u4fee\u6539\uff0c3 \u64cd\u4f5c\u627e\u5230 ODT \u4e0a\u88ab $[l,~r]$ \u5305\u542b\u7684\u6240\u6709\u8fde\u7eed\u989c\u8272\u6bb5\uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5220\u9664\u5e76\u628a\u5b83\u4eec\u7684\u5de6\u7aef\u70b9\u7684 $pre$ \u8bbe\u4e3a $i-1$ \u5373\u53ef\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6811\u5957\u6811\u5728\u7ebf\u7ef4\u62a4\u4fee\u6539\u64cd\u4f5c\u5e76 $O(\\log^2 n)$ \u89e3\u51b3\u67e5\u8be2\u64cd\u4f5c\u3002\n\n\u7136\u540e\u6211\u7ffb\u5f00\u9898\u89e3\u533a\u53d1\u73b0 [BFqwq](https://www.luogu.com.cn/user/120074) \u7684\u9898\u89e3\u4e5f\u4f7f\u7528\u4e86\u6811\u5957\u6811\uff0c\u4fbf\u975e\u5e38\u81ea\u4fe1\u5730\u5199\u5b8c\u4e86\u6811\u5957\u6811\u5e76\u4e14\u63d0\u4ea4\uff0c\u4e0d\u51fa\u6240\u6599\u600e\u4e48\u5361\u7a7a\u95f4\u90fd\u662f\u5168 MLE\u3002[\u5e16\u5b50](https://www.luogu.com.cn/discuss/show/341872)\uff08\u7136\u540e BF \u5c31\u5728\u535a\u5ba2\u7684\u524d\u9762\u52a0\u4e0a\u4e86\u201c\u9898\u89e3\u4e0d\u53ef\u901a\u8fc7\u6b64\u9898\uff0c\u4ec5\u4f9b\u53c2\u8003\u201d\u7684\u63d0\u793a\uff09\n\n\u8003\u8651\u4f7f\u7528\u590d\u6742\u5ea6\u4e0d\u53d8\u4f46\u7a7a\u95f4\u66f4\u5c0f\u7684\u505a\u6cd5\u3002\n\n\u6211\u4eec\u73b0\u5728\u662f\u5728\u4f7f\u7528\u6811\u5957\u6811\u5728\u7ebf\u89e3\u51b3\u5e26\u4fee\u6539\u4e8c\u7ef4\u6570\u70b9\u95ee\u9898\uff0c\u8003\u8651\u518d\u5f00\u4e00\u7ef4\u8868\u793a\u6570\u636e\u4fee\u6539\u7684\u65f6\u95f4\uff0c\u95ee\u9898\u5c31\u8f6c\u53d8\u4e3a\u9759\u6001\u4e09\u7ef4\u6570\u70b9\u95ee\u9898\uff0c\u79bb\u7ebf CDQ \u5206\u6cbb\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u65e7\u4e3a $O(m \\log^2 n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230 $O(n+m)$\u3002\n\n## \u4ee3\u7801\n\n[View on GitHub](https://github.com/Macesuted/Code/blob/main/Luogu/4690.cpp)\n",
        "postTime": 1629360639,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "LG4690"
    }
]