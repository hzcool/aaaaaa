[
    {
        "content": "\u5176\u5b9e\u611a\u8822\u7684$O(mlog^2m)$\u505a\u6cd5\u5e94\u8be5\u88ab\u53c9\u6389\u7684\u2026\u2026\n__________________\n\n# \u5173\u4e8espfa\n\n~~\u5b83\u6b7b\u4e86~~\n\n\u539f\u56e0\u662f\u8fd9\u9053\u9898\u4f60\u6700\u540e\u5efa\u51fa\u6765\u7684\u56fe\u5c31\u662fspfa\u6700\u6002\u7684\u7f51\u683c\u56fe\uff0c\u51fa\u9898\u4eba\u751a\u81f3\u53ea\u9700\u8981random\u6570\u636e,\u4f60\u5c31\u81ea\u52a8\u5b8c\u6210\u4e86\u5361spfa\u7684\u4efb\u52a1\u2026\u2026\n\n~~dijkstra\u4fdd\u5e73\u5b89~~\n\n_____________\n\n## \u672c\u9898\u9898\u89e3\n\n\u9996\u5148\u7b80\u5316\u4e00\u4e0b\u5e76\u4e0d\u660e\u786e\u7684\u9898\u610f\n\n\u7ed9\u51fa\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u8fb9\u4e0a\u6709\u8fb9\u6743\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5b57\u7b26\u4e32\n\n\u4e00\u6761\u6709\u5411\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u8fd9\u6761\u8def\u5f84\u4e0a\u6bcf\u4e2a\u8fb9\u7684\u8fb9\u6743\u4e4b\u548c+\u6309\u7167\u8def\u5f84\u7684\u987a\u5e8f\u5c06\u8fd9\u4e9b\u8fb9\u4e0a\u7684\u5b57\u7b26\u4e32\u6392\u6210\u4e00\u5217\uff0c\u76f8\u90bb\u4e24\u4e2a\u4e32\u7684lcp\u957f\u5ea6\u4e4b\u548c\u3002\n\n\u6c42\u8fd9\u79cd\u957f\u5ea6\u5b9a\u4e49\u4e0b\u76841\u53f7\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\n\n\u4fdd\u8bc1\u8fb9\u4e0a\u7684\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u53ef\u4ee5\u88ab\u4e00\u4e2a\u5b57\u5178\u6811\u6240\u8bc6\u522b\uff0c\u5b57\u5178\u6811\u7684\u5927\u5c0f\u4e0d\u4f1a\u5f88\u5927\n\n\u90a3\u4e48\u6211\u4eec\u4ed4\u7ec6\u770b\u4e00\u4e0b\u5e94\u8be5\u8fd8\u662f\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6240\u4ee5\u6700\u540e\u80af\u5b9a\u8fd8\u662f\u8dd1\u4e00\u904ddijkstra\u89e3\u51b3\u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u7684\u7cbe\u529b\u5e94\u8be5\u653e\u5728\u5982\u4f55\u5efa\u56fe\u4e0a\n\n\u4ed4\u7ec6\u770b\u4e00\u773c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u70b9\u5728\u6700\u77ed\u8def\u5f53\u4e2d\u5e76\u6ca1\u6709\u592a\u591a\u7528\u5904\uff0c\u8def\u5f84\u957f\u5ea6\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\u548c\u8fb9\u6709\u5173\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136~~(?\u6216\u8bb8\u5e76\u4e0d)~~\u7684\u66b4\u529b\u5efa\u56fe\u65b9\u5f0f\n\n _\u5c06\u4e00\u4e2a\u8fb9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u4e00\u4e2a\u662f\u5165\u70b9\u53e6\u4e00\u4e2a\u662f\u51fa\u70b9\uff0c\u4e2d\u95f4\u94fe\u63a5\u4e00\u6761\u4e3a\u8fd9\u6761\u8fb9\u6743\u503c\u7684\u6709\u5411\u8fb9\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u8fb9<a,b>,<c,d>\u6765\u8bb2\uff0c\u5982\u679cb=c\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u8fb9\u7684\u51fa\u70b9\u5411\u7b2c\u4e8c\u4e2a\u8fb9\u7684\u5165\u70b9\u8fde\u4e00\u6761\u6743\u503c\u7b49\u4e8e\u4e24\u4e2a\u8fb9\u4e0a\u5b57\u7b26\u4e32lcp\u7684\u957f\u5ea6\u7684\u6709\u5411\u8fb9\u3002_ \n\n _\u65b0\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9s\uff0c\u5bf9\u4e8e\u6240\u6709\u5f62\u5982<1,a>\u7684\u8fb9\uff0cs\u5411\u8fd9\u4e9b\u8fb9\u7684\u5165\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u6709\u5411\u8fb9_ \n\n _\u6700\u540e\u8f93\u51fa\u6700\u77ed\u8def\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9i\uff0c\u679a\u4e3e\u5f62\u5982<a,i>\u7684\u8fb9\uff0c\u5728\u8fd9\u4e9b\u8fb9\u7684\u51fa\u70b9\u7684dis\u503c\u4e2d\u627e\u6700\u5c0f\u503c\uff0c\u4f5c\u4e3a\u8fd9\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u8f93\u51fa_ \n\n\u597d\u4e86\u7ffb\u8bd1\u4e00\u4e0b\u4e0a\u8fb9\u7684\u9b3c\u8bdd\u5c31\u662f\u6211\u4eec\u628a\u8fb9\u770b\u505a\u70b9\u91cd\u65b0\u5efa\u4e00\u5f20\u56fe\u51fa\u6765\uff0c\u8fb9\u81ea\u5df1\u7684\u6743\u503c\u62c6\u6210\u4e24\u4e2a\u70b9\u4fdd\u5b58\u5728\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u4e2d\uff0c\u7136\u540e\u8fb9\u548c\u8fb9\u4e4b\u95f4\u8fde\u8fb9\u7684\u8fb9\u6743\u5c31\u662f\u8fb9\u4e0a\u5b57\u7b26\u4e32\u7684lcp\u957f\u5ea6\n\n\u9057\u61be\u7684\u662f\u4e0a\u8fb9\u7684\u5efa\u56fe\u65b9\u5f0f\u78b0\u5230\u4e0b\u9762\u8fd9\u5f20\u56fe\u4f1a\u76f4\u63a5\u7206\u70b8\u2026\u2026\n\n![](https://cdn.luogu.com.cn/upload/pic/26794.png)\n\n\n\u606d\u559c\u4f60\u8fde\u4e86$O(m^2)$\u6761\u8fb9\uff0c\u7136\u540e\u4f60\u70b8\u4e86\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5947\u6280\u6deb\u5de7\u7684\u4f18\u5316\u5efa\u56fe\u65f6\u95f4\u4e86\n\n\u5982\u679c\u4f60\u60f3\u4e86\u521a\u624d\u90a3\u4e2a\u66b4\u529b\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u8fde\u4e86\u4e00\u5806\u8fb9\u6743\u4e00\u6837\u7684\u8fb9\u2026\u2026\n\n\u56e0\u4e3a\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684lcp\u957f\u5ea6\u5c31\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u6811\u4e0a\u7684lca\u6df1\u5ea6\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f1a\u53d1\u73b0\u6240\u6709\u53ef\u80fd\u7684\u8fb9\u6743\u79cd\u7c7b\u53ea\u6709$O(m+k)$\u79cd\uff0c\u56e0\u6b64\u6309\u7167\u521a\u624d\u7684\u66b4\u529b\u6211\u4eec\u4e00\u5b9a\u4f1a\u8fde\u51fa\u5f88\u591a\u8fb9\u6743\u4e00\u6837\u7684\u8fb9\n\n\u6b64\u65f6\u6211\u4eec\u89c2\u5bdf\u4e86\u4e00\u4f1a\u8fd9\u4e2a\u56fe\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\n\n\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u5468\u56f4\u4e00\u5708\u7684\u8fb9\u62c9\u51fa\u6765\uff0c\u6309\u7167\u8fb9\u4e0a\u5b57\u7b26\u4e32\u5728\u5b57\u5178\u6811\u4e0a\u7684dfs\u5e8f\u6392\u4e00\u4e2a\u5e8f\uff0c\u6b64\u65f6\u6211\u4eec\u770b\u4e00\u770b\u4f1a\u6709\u4ec0\u4e48\u6709\u8da3\u7684\u73b0\u8c61\u53d1\u751f\u5462\uff1f\n\n\u7531\u4e8e\u6211\u4eec\u73b0\u5728\u6709\u4e86\u4e00\u5806\u6309\u7167\u5b57\u5178\u5e8f\u6392\u597d\u5e8f\u7684\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u6211\u4eec\u89c9\u5f97\u8fd9\u975e\u5e38\u50cf\u540e\u7f00\u6570\u7ec4\uff0c\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5\u7740\u6c42\u51fa\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684lcp\u957f\u5ea6\uff0c\u6216\u8005\u8bf4\u5b57\u5178\u6811\u4e0a\u7684lca\u6df1\u5ea6\uff0c\u6216\u8005\u8bf4\u6c42\u51fa\u8fd9\u4e9b\u6392\u597d\u5e8f\u5b57\u7b26\u4e32\u7684height\u6570\u7ec4\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u5e76\u4e0d\u60ca\u5947\u7684\u53d1\u73b0\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684lcp\u957f\u5ea6\u5c31\u662fheight\u6570\u7ec4\u7684\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u533a\u95f4\u7aef\u70b9\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5c31\u50cf\u540e\u7f00\u6570\u7ec4\u4e00\u6837\u7684\u6027\u8d28\n\n\u5982\u679c\u4f60\u5bf9\u540e\u7f00\u6570\u7ec4\u90a3\u4e00\u5957\u8db3\u591f\u719f\u7ec3\u7684\u8bdd\u4f60\u4f1a\u975e\u5e38\u719f\u7ec3\u7684\u4f7f\u7528\u5355\u8c03\u6808\u6c42\u51fa\u6bcf\u4e00\u4e2a$h_{i}$\u6240\"\u7ba1\u8f96\"(\u4e5f\u5c31\u662f\u5b83\u662f\u533a\u95f4\u6700\u5c0f\u503c)\u7684\u8303\u56f4\uff0c\u7136\u540e\u66f4\u52a0\u719f\u7ec3\u7684\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5b8c\u6210\u533a\u95f4\u94fe\u63a5\u4e00\u6761\u6743\u503c\u4e00\u6837\u7684\u8fb9\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u4ee5$O(mlog^2m)$\u7684\u590d\u6742\u5ea6\u505a\u5b8c\u8fd9\u9053\u9898\n\n\u4f46\u662f\u554a\uff0c\u8ba9\u6211\u4eec\u63a5\u7740\u60f3\u60f3\uff0c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u8fd8\u6709\u4f18\u5316\u7a7a\u95f4\u5417\uff1f\n\n\u5f53\u7136\u6709\uff0c\u7b54\u6848\u662f\n\n\n### \u524d\u7f00\u548c/\u540e\u7f00\u548c\u4f18\u5316\u5efa\u56fe\n\n\u6211\u4eec\u4f9d\u7136\u662f\u628a\u6bcf\u4e2a\u70b9\u5468\u56f4\u4e00\u5708\u7684\u8fb9\u5168\u90e8\u62c9\u51fa\u53bb\u6309\u7167dfs\u5e8f\u6392\u5e8f\uff0c\u4f9d\u7136\u5904\u7406\u51faheight\u6570\u7ec4,\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u518d\u4f7f\u7528\u5355\u8c03\u6808\uff0c\u800c\u662f\u8003\u8651\u8fd9\u6837\u4e00\u79cd\u5947\u6280\u6deb\u5de7\n\n\u5bf9\u4e8e\u67d0\u4e00\u4e2a$h_{i}$\u6765\u8bb2\uff0c\u5728i\u5de6\u4fa7\u7684\u5165\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e0d\u8d85\u8fc7$h_{i}$\u4ee3\u4ef7\u5230\u8fbei\u53f3\u4fa7\u51fa\u70b9\uff0c\u540c\u7406i\u53f3\u4fa7\u7684\u5165\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e0d\u8d85\u8fc7$h_{i}$\u7684\u4ee3\u4ef7\u5230\u8fbei\u53f3\u4fa7\u7684\u51fa\u70b9\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba9i\u5de6\u4fa7\u70b9\u5411i\u53f3\u4fa7\u70b9\u8fde\u4e00\u5806\u8fb9\uff0ci\u53f3\u4fa7\u70b9\u5411i\u5de6\u4fa7\u70b9\u8fde\u4e00\u5806\u8fb9\uff0c\u5f53\u7136\uff0c\u8fb9\u6743\u90fd\u662f$h_{i}$\n\n\u6b64\u65f6\u5e76\u6ca1\u6709\u4efb\u4f55\u4f18\u5316\uff0c\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u53ea\u9700\u8981\u8ba9i\u5de6\u4fa7\u70b9\u5411\u53f3\u4fa7\u70b9\u8fde\u8fb9\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u4e00\u79cd\u5947\u6280\u6deb\u5de7\uff0c\u6211\u4eec\u50cf\u8fd9\u6837\u8fde\u8fb9\u5373\u53ef\uff0c\u5176\u4e2d\u4e0a\u8fb9\u7684\u70b9\u662f\u5165\u70b9\uff0c\u5e95\u4e0b\u7684\u70b9\u662f\u51fa\u70b9\n\n![](https://cdn.luogu.com.cn/upload/pic/26802.png)\n\n\u5f88\u663e\u7136\u6211\u4eec\u4f7f\u7528\u4e86\u5f88\u5c11\u7684\u8fb9\u5c31\u5b8c\u6210\u4e86\u8fde\u8fb9\u5de5\u4f5c\n\n\u4f46\u662f\u7528\u8fd9\u4e2a\u6280\u5de7\u6211\u4eec\u5e76\u65e0\u6cd5\u540c\u65f6\u652f\u6301\u4ece\u5de6\u5411\u53f3\u8fde\u548c\u4ece\u5de6\u5411\u53f3\u8fde\n\n\u4ed4\u7ec6\u60f3\u60f3\u771f\u7684\u4e0d\u884c\u5417\u2026\u2026\uff1f\n\n#### \u5176\u5b9e\u662f\u53ef\u4ee5\u7684\n\n\u6211\u4eec\u5c06\u4e00\u6761\u8fb9\u62c6\u62102\u4e2a\u5165\u70b9\u548c\u4e24\u4e2a\u51fa\u70b9\uff0c\u7136\u540e\u8fde\u6210\u8fd9\u6837\u7684\u5f62\u72b6\n\n![](https://cdn.luogu.com.cn/upload/pic/26806.png)\n\n\u7136\u540e\u7b2c\u4e00\u5bf9\u51fa\u5165\u70b9\u5904\u7406\u4ece\u5de6\u5411\u53f3\u8fde\u7684\u60c5\u51b5\uff0c\u7b2c\u4e8c\u5bf9\u51fa\u5165\u70b9\u5904\u7406\u4ece\u53f3\u5411\u5de6\u7684\u60c5\u51b5\n\u5373\u53ef\n\n\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u8fde\u54111\u53f7\u70b9\u7684\u6240\u6709\u51fa\u8fb9\u8dd1\u4e00\u8fb9dijkstra\uff0c\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2ai\uff0cfor\u4e00\u904d\u6240\u6709\u6307\u5411i\u7684\u51fa\u8fb9\u6c42\u6700\u77ed\u8def\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u641e\u5b9a\u8fd9\u9053\u9898\u4e86\n\n\u5907\u6ce8\uff1a\u5efa\u56fe\u4f1a\u975e\u5e38\u6076\u5fc3\u2026\u2026\u81ea\u5df1\u6162\u6162\u753b\u56fe\u5efa\u5427\u2026\u2026\u4e00\u4e0d\u5c0f\u5fc3\u5c31\u5199\u4e86100\u884c\u2026\u2026\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\nint dfn[20010];int dep[20010];int n;int m;int k;int T;typedef long long ll;\nnamespace Tree\n{\n    const int N=2*1e4+10;\n    struct data{int v;int val;friend bool operator <(data a,data b){return a.val<b.val;}};\n    int fa[N][18];int df;vector <data> v[N];\n    inline void add(int u,int V,int w){v[u].push_back((data){V,w});}\n    inline void dfs(int u)//dfs\n    {\n        for(int i=0;fa[u][i];i++)fa[u][i+1]=fa[fa[u][i]][i];\n        dfn[u]=++df;vector <data> :: iterator it;\n        for(it=v[u].begin();it!=v[u].end();++it)dep[it->v]=dep[u]+1,fa[it->v][0]=u,dfs(it->v);\n    }\n    inline void pre(){for(int i=1;i<=k;i++)sort(v[i].begin(),v[i].end());dfs(1);}\n    inline int lca(int u,int v)//\u500d\u589elca \n    {\n        if(dep[u]<dep[v])swap(u,v);\n        for(int d=dep[u]-dep[v],i=0;d;d>>=1,i++)if(d&1)u=fa[u][i];if(u==v)return u;\n        for(int i=17;i>=0;i--)if(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];return fa[u][0];\n    }\n    inline void clear()\n    {\n        for(int i=1;i<=k;i++)v[i].clear();\n        for(int i=1;i<=k;i++)for(int j=0;j<18;j++)fa[i][j]=0;df=0;\n    }\n}\nnamespace Grph\n{\n    const int N=5*1e4+10;const int V=4*N;const int E=20*N;\n\tint tp[V];int ctt;vector <int> eif[N];vector <int> eof[N];vector <int> eib[N];vector <int> eob[N];\n\tvector <int> tr;int v[E];int x[E];int ct;int al[V];int val[E];int s;\n\tinline bool cmp(int a,int b){return dfn[tp[a]]<dfn[tp[b]];}\n\tinline void add(int u,int V,int w){v[++ct]=V;x[ct]=al[u];al[u]=ct;val[ct]=w;}\n\tinline void ins(int u,int V,int w,int d)//\u63d2\u5165\u4e00\u4e2a\u8fb9 \n\t{\n\t\tif(u==1)add(s,ctt+1,0),add(s,ctt+3,0);for(int i=1;i<=4;i++)tp[ctt+i]=d;//\u62c6\u62104\u6761\u8fb9 \n\t\tadd(ctt+1,ctt+2,w);add(ctt+1,ctt+4,w);add(ctt+3,ctt+4,w);add(ctt+3,ctt+2,w);\n\t\teof[u].push_back(++ctt);eif[V].push_back(++ctt);eob[u].push_back(++ctt);eib[V].push_back(++ctt);\n\t}\n\tinline void build()\n\t{\n\t\tfor(int u=1;u<=n;u++)\n\t\t{\n\t\t\tsort(eof[u].begin(),eof[u].end(),cmp);sort(eif[u].begin(),eif[u].end(),cmp);\n\t\t\tsort(eob[u].begin(),eob[u].end(),cmp);sort(eib[u].begin(),eib[u].end(),cmp);\n\t\t\tfor(int i=0;i<(int)eof[u].size()-1;i++)add(eof[u][i],eof[u][i+1],0);//\u5c06\u957f\u94fe\u8fde\u51fa\u6765 \n\t\t\tfor(int i=0;i<(int)eif[u].size()-1;i++)add(eif[u][i],eif[u][i+1],0);\n\t\t\tfor(int i=0;i<(int)eob[u].size()-1;i++)add(eob[u][i+1],eob[u][i],0);\n\t\t\tfor(int i=0;i<(int)eib[u].size()-1;i++)add(eib[u][i+1],eib[u][i],0);\n\t\t\ttr.resize(eof[u].size()+eif[u].size());\n\t\t\tmerge(eif[u].begin(),eif[u].end(),eof[u].begin(),eof[u].end(),tr.begin(),cmp);\n\t\t\tfor(int t=0,i=0,j=0;t<(int)tr.size()-1;t++)//\u7136\u540e\u4e24\u4e24\u6c42lca\u8fde\u8fb9 \n\t\t\t{\n\t\t\t\tif(tr[t]&1)j++;else i++;int w=dep[Tree::lca(tp[tr[t]],tp[tr[t+1]])];\n\t\t\t\tif(i!=0&&j!=(int)eof[u].size())add(eif[u][i-1],eof[u][j],w);\n\t\t\t\tif(i!=(int)eib[u].size()&&j!=0)add(eib[u][i],eob[u][j-1],w);\n\t\t\t}\t\n\t\t}\n\t}\n\tstruct data{int u;ll d;friend bool operator <(data a,data b){return a.d>b.d;}};\n\tll d[V];bool book[V];priority_queue <data> pq;\n\tinline void solve()//\u8dd1dijkstra \n\t{\n\t\tfor(int i=1;i<=ctt;i++)d[i]=(1LL<<40);d[s]=0;\n\t\tfor(pq.push((data){s,0});!pq.empty();)\n\t\t{\n\t\t\tdata nw=pq.top();pq.pop();if(book[nw.u])continue;book[nw.u]=true;\n\t\t\tfor(int i=al[nw.u];i;i=x[i])\n\t\t\t\tif(!book[v[i]]&&d[v[i]]>nw.d+val[i])d[v[i]]=nw.d+val[i],pq.push((data){v[i],d[v[i]]});\n\t\t}\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tll ret=(1LL<<40);for(int j=0;j<(int)eif[i].size();j++)ret=min(ret,d[eif[i][j]]);\n\t\t\tfor(int j=0;j<(int)eib[i].size();j++)ret=min(ret,d[eib[i][j]]);printf(\"%lld\\n\",ret);\n\t\t}\n\t}\n\tinline void clear()\n\t{\n\t\tfor(int i=1;i<=n;i++)eif[i].clear();\n\t\tfor(int i=1;i<=n;i++)eof[i].clear();\n\t\tfor(int i=1;i<=n;i++)eib[i].clear();\n\t\tfor(int i=1;i<=n;i++)eob[i].clear();\n\t\tfor(int i=1;i<=ctt+1;i++)al[i]=0;\n\t\tfor(int i=1;i<=ctt+1;i++)book[i]=false;ct=0;ctt=0;\n\t}\n}\ninline void solve()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);Grph::s=4*m+1;\n    for(int i=1,u,v,w,d;i<=m;i++)scanf(\"%d%d%d%d\",&u,&v,&w,&d),Grph::ins(u,v,w,d);\n    for(int i=1,u,v,w;i<k;i++)scanf(\"%d%d%d\",&u,&v,&w),Tree::add(u,v,w);\n    Tree::pre();Grph::build();Grph::solve();\n}\ninline void clear(){Tree::clear();Grph::clear();}\nint main(){scanf(\"%d\",&T);for(int z=1;z<=T;z++)solve(),clear();return 0;}//\u62dc\u62dc\u7a0b\u5e8f~ \n```\n\n\n\n\n\n\n\n",
        "postTime": 1533455846,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3783 \u3010[SDOI2017]\u5929\u624d\u9ed1\u5ba2\u3011"
    },
    {
        "content": "\u5148\u626f\u70b9\u9898\u5916\u8bdd\u3002\u6700\u77ed\u8def\u6709\u4e00\u4e2a\u6027\u8d28\u662f\u8bf4\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u5f88\u591a\u6761\u8fb9\u7b49\u4ef7\u4e8e\u8fde\u6700\u77ed\u7684\u90a3\u6761\u8fb9\uff0c\u6216\u8005\u8bf4\u6700\u77ed\u8def\u4f1a\u81ea\u52a8\u7ed9\u91cd\u8fb9\u53d6$\\min$\u3002\n\n\u5982\u679c\u6211\u4eec\u5efa\u56fe\u7684\u65f6\u5019\u5e94\u8be5\u8fde\u8fb9$a\\stackrel{w}{\\longrightarrow}b$\uff0c\u5b9e\u9645\u4e0a\u53ea\u8981\u4fdd\u8bc1\u6709\u4e00\u6761$a\\stackrel{w}{\\longrightarrow}b$\uff0c\u5e76\u4e14\u5176\u5b83\u6240\u6709$a\\stackrel{w^\\prime}{\\longrightarrow}b$\u90fd\u6ee1\u8db3$w^\\prime\\geq w$\u5373\u53ef\u3002\u5f53\u7136\u8fd9\u4e2a\u7bad\u5934\u8bb0\u53f7\u8868\u793a\u4e00\u6761\u6709\u5411\u8fb9\u7684\u8d77\u70b9\u3001\u7ec8\u70b9\u548c\u8fb9\u6743(\u597d\u50cf\u5e76\u4e0d\u6807\u51c6?\u4f46\u662f\u5f88\u5f62\u8c61)\u3002\n\n\u770b\u5230\u8fd9\u4e2a\u9898\uff0c\u9996\u5148\u6211\u4eec\u6709\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u90a3\u5c31\u662flcp\u5c31\u662flca\u6df1\u5ea6(\u6839\u6df1\u5ea6\u4e3a0)\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u6761\u8fb9\u505a\u4e00\u4e2a\u62c6\u70b9\uff0c\u6211\u4eec\u628a\u4e00\u6761\u8fb9\u6743\u4e3a$w$\u7684\u8fb9$i$\u4e2d\u95f4\u52a0\u4e0a\u4e00\u4e2a\u5165\u70b9\u4e00\u4e2a\u51fa\u70b9\uff0c\u8bb0\u4e3a$in_i,out_i$\uff0c\u5e76\u8fde\u8fb9$in_i\\stackrel{w}{\\longrightarrow}out_i$\u3002\n\n\u7136\u540e\u8003\u8651\u539f\u56fe\u4e2d\u7684\u70b9\u4ec5\u4ec5\u8868\u793a\u8fb9\u7684\u8fde\u901a\u6027\uff0c\u6240\u4ee5\u4e00\u4e2a\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\u53bb\u6389\u539f\u56fe\u4e2d\u7684\u70b9\uff0c\u800c\u5bf9\u6bcf\u4e2a\u70b9\u628a\u5b83\u5468\u56f4\u6240\u6709\u7684\u8fb9\u90fd\u8fde\u4e00\u8fde\u3002\u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fde\u5411\u70b9$u$\u7684\u8fb9\uff0c\u628a\u5b83\u7684\u51fa\u70b9\u5411\u6bcf\u6761\u4ece$u$\u53d1\u51fa\u7684\u8fb9\u7684\u5165\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u662flca\u6df1\u5ea6\u3002\n\n\u5982\u679c\u9047\u5230\u4e00\u4e2a\u70b9\u5468\u56f4\u6709\u5f88\u591a\u8fb9\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8fb9\u6570\u5c31\u662f$O(n^2)$\uff0c\u4f1a\u7206\u70b8\u3002\n\n\u56e0\u4e3a\u6700\u77ed\u8def\u662f\u5bf9\u91cd\u8fb9\u53d6$\\min$\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u80fd\u4e0d\u80fd\u628alca\u6df1\u5ea6\u4e5f\u641e\u6210\u4e00\u4e2a$\\min$\u7684\u5f62\u5f0f(**\u6838\u5fc3\u601d\u60f3**)\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u6700\u77ed\u8def\u7684\u53d6$\\min$\u6765\u5904\u7406lca\u6df1\u5ea6\u4e86\u3002\n\n\u5bb9\u6613\u60f3\u5230\u4f7f\u7528dfs\u5e8flca\u3002dfs\u5e8flca\u7684\u7ed3\u8bba\u662f\uff0c\u5982\u679c\u6211\u4eec\u8bb0\u5f55\u4e00\u68f5\u6811\u7684\u6b27\u62c9\u5e8f(\u6bcf\u7ecf\u8fc7\u4e00\u6b21\u90fd\u8bb0\u5f55\u4e00\u6b21)\uff0c\u90a3\u4e48\u4e24\u4e2a\u70b9\u7684lca\u5c31\u662f\u5b83\u4eec\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u4f4d\u7f6e\u4e4b\u95f4\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u3002\n\n\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8bbe$d_i$\u8868\u793adfn\u4e2d\u7b2c$i$\u4e2a\u4f4d\u7f6e\u4e0a\u90a3\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c$id_u$\u8868\u793a\u70b9$u$\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u5c31\u6709\n\n$$\n\\mathrm{dep}(\\mathrm{lca}(u,v))=\\min_{i=id_u}^{id_v}d_i\n$$\n\n\u7136\u540e\u5462?\u8003\u8651\u4e00\u4e2a$d_i$\u4ec0\u4e48\u65f6\u5019\u4f1a\u53c2\u4e0e\u8fd9\u4e2a\u53d6$\\min$\u7684\u8fc7\u7a0b\uff0c\u5e94\u8be5\u662f\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\uff0c\u4e00\u4e2a\u70b9\u5728\u5b83\u524d\u9762\uff0c\u4e00\u4e2a\u70b9\u5728\u5b83\u540e\u9762\u7684\u65f6\u5019\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u70b9\u7684\u8d21\u732e\u5c31\u76f8\u5f53\u4e8e**\u7ed9\u5b83\u5bf9\u5e94\u7684\u524d\u7f00\u8fde\u5230\u540e\u7f00\uff0c\u540e\u7f00\u8fde\u5230\u524d\u7f00\uff0c\u8fb9\u6743\u662f\u5b83\u7684\u6df1\u5ea6**\u3002!!!\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u505a\u6cd5\u4e86!\n\n\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u4e0d\u8fc7\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u524d\u540e\u7f00\u548c\u4f18\u5316\u5efa\u56fe\u3002\n\n\u524d\u540e\u7f00\u548c\u4f18\u5316\u5efa\u56fe\u662f\u4ec0\u4e48?\u4ee5\u524d\u7f00\u548c\u4e3a\u4f8b\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u6392\u70b9\u8868\u793a\u524d\u7f00\u548c\uff0c\u524d\u7f00\u548c\u90a3\u4e00\u6392\u4e2d\u7684\u70b9$i$\u8fde\u5411\u70b9$i-1$\u548c\u539f\u5e8f\u5217\u4e2d\u7684\u7b2c$i$\u4e2a\u70b9\uff0c\u8fd9\u6837\u5b83\u5b9e\u9645\u4e0a\u8fde\u5230\u4e86\u539f\u5e8f\u5217\u4e2d\u7684\u524d$i$\u4e2a\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u7ed3\u6784\u652f\u6301\u4e00\u4e2a\u70b9\u5411\u4e00\u4e2a\u524d\u7f00\u8fde\u8fb9\u3002\u524d\u7f00\u5411\u70b9\u8fde\u8fb9\uff0c\u70b9\u5411\u540e\u7f00\u8fde\u8fb9\uff0c\u540e\u7f00\u5411\u70b9\u8fde\u8fb9\u662f\u540c\u6837\u7684\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u9898\uff0c\u6211\u4eec\u9700\u8981\u5efa\u56db\u6392\u70b9\uff0c\u5206\u522b\u8868\u793a\u524d\u7f00\u5165\u70b9\uff0c\u524d\u7f00\u51fa\u70b9\uff0c\u540e\u7f00\u5165\u70b9\uff0c\u540e\u7f00\u51fa\u70b9\u3002\n\n\u8fd9\u91cc\u9700\u8981\u5efa\u7acb\u865a\u6811\uff0c\u5728\u865a\u6811\u4e0a\u6c42\u6b27\u62c9\u5e8f\uff0c\u8fd9\u4e00\u6b65\u6ca1\u6709\u96be\u5199\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u7b80\u5316\uff0c\u5177\u4f53\u53ef\u4ee5\u89c1\u522b\u7684\u9898\u89e3\u3002\u53cd\u6b63\u6211\u6ca1\u60f3\u7740\u7b80\u5316\uff08\n\n\u590d\u6742\u5ea6\u662f$O((n+m)\\log n)$\u3002\n\n\u4ee3\u7801\u786e\u5b9e\u5f88\u96be\u5199!\u9700\u8981\u4e00\u5b9a\u7684\u5c01\u88c5\u6280\u5de7\u624d\u80fd\u8ba9\u4ee3\u7801\u53ef\u8bfb\uff0c\u8fd9\u91cc\u6211\u8003\u8651\u4e86\u597d\u4e45\uff0c\u5199\u4e86200+lines\uff0c\u8fd8\u662f\u4e0d\u53ef\u8bfb......\n\n\u8fd9\u9898\u8fd8\u6709\u4e00\u4e9b\u522b\u7684\u505a\u6cd5\u3002\u7f51\u4e0a\u8bf4\u7684\u5e26$\\log$\u751a\u81f3$\\log^2$\u7684\u6811\u5256\u548c\u6811\u4e0a\u500d\u589e\u505a\u6cd5\u6211\u5b9e\u5728\u662f\u6ca1\u60f3\u660e\u767d\uff0c\u5e0c\u671b\u795e\u4ed9\u4eec\u53ef\u4ee5\u6559\u6559\u6211/se\n\n\u6e29\u99a8\u63d0\u793a : \u591a\u6d4b\u4e0d\u6e05\u7a7a\uff0c\u7206\u96f6\u4e24\u884c\u6cea!\n\ncode:\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<vector>\n#include<algorithm>\n#include<queue>\nusing std::priority_queue;\nusing std::sort;\nusing std::vector;\n\ninline void swap(int &x,int &y){ x^=y^=x^=y; }\ninline long long min(long long x,long long y){ return x<y?x:y; }\n\nnamespace Tree\n{\n\nstruct Graph\n{\n\tstruct Edge\n\t{\n\t\tint v,next;\n\t}e[100002];\n\tint ecnt,h[20002];\n\tinline void add_edge(int u,int v)\n\t{\n\t\te[++ecnt]={v,h[u]};\n\t\th[u]=ecnt;\n\t\te[++ecnt]={u,h[v]};\n\t\th[v]=ecnt;\n\t}\n\tinline void clear()\n\t{\n\t\tecnt=0;\n\t\tmemset(h,0,sizeof(h));\n\t}\n}G,T;\n\nint f[20][40002],id[20002],cnt,dep[20002],lg[40002];\n\ninline void cleartree()\n{\n\tG.clear(),T.clear();\n\tcnt=0;\n}\n\nvoid predfs(int u,int _fa)\n{\n\tf[0][++cnt]=u,id[u]=cnt;\n\tdep[u]=dep[_fa]+1;\n\tfor(int i=G.h[u];i;i=G.e[i].next)\n\t\tif(G.e[i].v!=_fa)\n\t\t\tpredfs(G.e[i].v,u),f[0][++cnt]=u;\n}\n\ninline void st_init()\n{\n\tfor(int k=1;k<=20;k++)\n\t\tfor(int i=1;i<=cnt-(1<<k)+1;i++)\n\t\t\tf[k][i]=(dep[f[k-1][i]]<dep[f[k-1][i+(1<<(k-1))]]?f[k-1][i]:f[k-1][i+(1<<(k-1))]);\n\tfor(int i=2;i<=cnt;i++)\n\t\tlg[i]=lg[i>>1]+1;\n}\n\ninline int lca(int u,int v)\n{\n\tu=id[u],v=id[v];\n\tif(u>v) swap(u,v);\n\tint l=lg[v-u+1];\n\treturn dep[f[l][u]]<dep[f[l][v-(1<<l)+1]]?f[l][u]:f[l][v-(1<<l)+1];\n}\n\nint s[20002],top;\ninline void clear(int u){ T.h[u]=0; }\ninline void insert(int u)\n{\n\tint l=lca(u,s[top]);\n\tif(l!=s[top])\n\t{\n\t\twhile(id[l]<id[s[top-1]]) T.add_edge(s[top-1],s[top]),top--;\n\t\tif(id[l]!=id[s[top-1]]) clear(l),T.add_edge(l,s[top]),s[top]=l;\n\t\telse T.add_edge(l,s[top]),top--;\n\t}\n\tclear(u),s[++top]=u;\n}\n\ninline bool cmp(int u,int v){ return id[u]<id[v]; }\ninline void build(int n,int *a)\n{\n\tsort(a+1,a+n+1,cmp);\n\tT.ecnt=0,clear(1),s[top=1]=1;\n\tfor(int i=1;i<=n;i++)\n\t\tif(a[i]!=1&&a[i]!=a[i-1]) insert(a[i]);\n\tfor(int i=1;i<top;i++) T.add_edge(s[i],s[i+1]);\n}\n\ninline void get_dfn(int u,int _fa,int *dfn,int *id,int &cnt)\n{\n\tdfn[++cnt]=dep[u],id[u]=cnt;\n\tfor(int i=T.h[u];i;i=T.e[i].next)\n\t\tif(T.e[i].v!=_fa)\n\t\t\tget_dfn(T.e[i].v,u,dfn,id,cnt),dfn[++cnt]=dep[u];\n}\n\n}\n\nint ncnt;\ninline int new_node(){ return ++ncnt; }\n\nint n,m,k;\nint nodein[50002],nodeout[50002],prein[40002],sufin[40002],preout[40002],sufout[40002];\nstruct Pair{ int u,id; };\nvector<Pair> in[50002],out[50002];\n\nnamespace Dij\n{\n\nstruct Edge\n{\n\tint v,w,next;\n}e[20000002];\n\nint ecnt,h[2000002];\ninline void add_edge(int u,int v,int w)\n{\n\te[++ecnt]={v,w,h[u]};\n\th[u]=ecnt;\n}\n\ninline void clear()\n{\n\tecnt=0;\n\tmemset(h,0,sizeof(h));\n}\n\nstruct DijNode\n{\n\tint u;long long dis;\n};\ninline bool operator < (DijNode x,DijNode y){ return x.dis>y.dis; }\n\nlong long dis[2000002];\nbool vis[2000002];\n\ninline void Dij()\n{\n\tpriority_queue<DijNode> q;\n\t//while(!q.empty()) q.pop();\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=0;i<out[1].size();i++)\n\t\tdis[out[1][i].u]=0,q.push({out[1][i].u,0});\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().u;q.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=h[u];i;i=e[i].next)\n\t\t\tif(dis[u]+e[i].w<dis[e[i].v])\n\t\t\t\tdis[e[i].v]=dis[u]+e[i].w,q.push({e[i].v,dis[e[i].v]});\n\t}\n}\n\n}\n\nusing Dij::add_edge;\n\ninline void build_graph()\n{\n\tstatic int temp[100002],dfn[40002],id[100002];\n\tfor(int u=1;u<=n;u++)\n\t{\n\t\tint tcnt=0;\n\t\tfor(int i=0;i<in[u].size();i++)\n\t\t\ttemp[++tcnt]=in[u][i].id;\n\t\tfor(int i=0;i<out[u].size();i++)\n\t\t\ttemp[++tcnt]=out[u][i].id;\n\t\tTree::build(tcnt,temp);\n\t\tint cnt=0;\n\t\tTree::get_dfn(1,0,dfn,id,cnt);\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t\tprein[i]=new_node(),sufin[i]=new_node(),preout[i]=new_node(),sufout[i]=new_node();\n\t\tfor(int i=2;i<=cnt;i++)\n\t\t\tadd_edge(prein[i],prein[i-1],0),\n\t\t\tadd_edge(preout[i-1],preout[i],0);\n\t\tfor(int i=1;i<=cnt-1;i++)\n\t\t\tadd_edge(sufin[i],sufin[i+1],0),\n\t\t\tadd_edge(sufout[i+1],sufout[i],0);\n\t\tfor(int i=0;i<in[u].size();i++)\n\t\t\tadd_edge(in[u][i].u,preout[id[in[u][i].id]],0),\n\t\t\tadd_edge(in[u][i].u,sufout[id[in[u][i].id]],0);\n\t\tfor(int i=0;i<out[u].size();i++)\n\t\t\tadd_edge(prein[id[out[u][i].id]],out[u][i].u,0),\n\t\t\tadd_edge(sufin[id[out[u][i].id]],out[u][i].u,0);\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t\tadd_edge(preout[i],sufin[i],dfn[i]),add_edge(sufout[i],prein[i],dfn[i]);\n\t}\n}\n\nint main()\n{\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--)\n\t{\n\t\tscanf(\"%d%d%d\",&n,&m,&k);\n\t\tfor(int i=1,u,v,w,id;i<=m;i++)\n\t\t\tscanf(\"%d%d%d%d\",&u,&v,&w,&id),\n\t\t\tnodein[i]=new_node(),nodeout[i]=new_node(),add_edge(nodein[i],nodeout[i],w),\n\t\t\tin[v].push_back({nodeout[i],id}),out[u].push_back({nodein[i],id});\n\t\tfor(int i=1,u,v,w;i<k;i++)\n\t\t\tscanf(\"%d%d%d\",&u,&v,&w),Tree::G.add_edge(u,v);\n\t\tTree::dep[0]=-1,Tree::predfs(1,0),Tree::st_init();\n\t\tbuild_graph();\n\t\tDij::Dij();\n\t\tfor(int i=2;i<=n;i++)\n\t\t{\n\t\t\tlong long ans=0x7fffffffffffffff;\n\t\t\tfor(int j=0;j<in[i].size();j++)\n\t\t\t\tans=min(ans,Dij::dis[in[i][j].u]);\n\t\t\tprintf(\"%lld\\n\",ans);\n\t\t}\n\t\tDij::clear();\n\t\tTree::cleartree();\n\t\tncnt=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tin[i].clear(),out[i].clear();\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1617460723,
        "uid": 152213,
        "name": "\u534e\u5c71\u62a1\u5251",
        "ccfLevel": 9,
        "title": "P3783 [SDOI2017]\u5929\u624d\u9ed1\u5ba2 \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u4e00\u9053\u7801\u91cf\u76f4\u903c**\u732a\u56fd\u6740**\u7684**\u56fe\u8bba+\u6570\u636e\u7ed3\u6784**\u9898\u3002~~\u6211\u732a\u56fd\u6740\u4e5f\u5c31\u4e00\u767e\u6765\u884c~~\n\n\u9996\u5148\u6211\u4eec\u8981\u770b\u61c2\u9b3c\u755c\u7684\u9898\u610f\uff0c\u53d1\u73b0\u5176\u5b9e\u5c31\u662f\u5728\u4e00\u4e2a\u5e26\u6743\u6709\u5411\u56fe\u4e0a\uff0c\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u4fe1\u606f\u3002\u8ba9\u4f60\u627e\u4e00\u4e2a\u70b9\u51fa\u53d1\u5230\u5176\u5b83\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002~~\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u624b\u901f\u7801\u5b8c**Dijkstra**~~\n\n\u7136\u800c\u8fd9\u9898\u4e2d\u9664\u4e86\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u548c\u8fd8\u8981\u52a0\u4e0a\u53bb\u7684\u5c31\u662f\u4e00\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u7684**LCP**\uff0c\u8fd8\u6709\u4e00\u70b9\u5c31\u662f\u6240\u6709\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u4e00\u68f5**\u5b57\u5178\u6811**\u4e0a\u7684\u8def\u5f84\u3002\n\n\u95ee\u9898\u6709\u70b9\u590d\u6742\u554a\uff0c\u90a3\u6211\u4eec\u6162\u6162\u5206\u6790\u3002\n\n------\n\n### \u5316\u8fb9\u4e3a\u70b9\n\n\u8003\u8651\u5230\u5982\u679c\u6211\u4eec\u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u8fc7\u6765\u7684\u72b6\u6001\u5c31\u4f1a\u4e0d\u53ef\u907f\u514d\u7684\u6269\u51fa$O(n^2)$\u6761\u8fb9\uff0c\u76f4\u63a5GG\n\n\u4ed4\u7ec6\u4e00\u60f3\u8fd9\u9053\u9898\u6700\u96be\u7684\u90e8\u5206\u5728\u54ea\uff1f\u5176\u5b9e\u8fd8\u662f\u6c42LCP\u90e8\u5206\uff0c\u6240\u4ee5\u663e\u7136\u8fb9\u7684\u91cd\u8981\u6027\u6bd4\u70b9\u5927\uff0c\u56e0\u6b64\u6211\u4eec**\u5316\u8fb9\u4e3a\u70b9**\n\n\u5177\u4f53\u7684\u8bf4\uff0c\u6211\u4eec\u628a\u539f\u5148\u7684\u6bcf\u6761\u8fb9\u62c6\u6210\u4e00\u4e2a**\u5165\u70b9**\u4e00\u4e2a**\u51fa\u70b9**\uff0c\u5728\u8fd9\u4e24\u70b9\u4e4b\u95f4\u8fde\u8fb9\u8868\u793a\u539f\u6765\u7684\u8fb9\u6743\u3002\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u5728\u8fd9\u4e9b\u8fb9\u5316\u4e3a\u7684\u70b9\u76f4\u63a5\u8fde\u63a5\u8fb9\u6743\u4e3a\u4e24\u5b57\u7b26\u4e32LCP\u7684\u8fb9\u5373\u53ef\uff08\u4ece\u4e00\u4e2a\u51fa\u70b9\u8fde\u81f3\u4e00\u4e2a\u5165\u70b9\uff09\n\n------\n\n### \u6784\u5efa\u865a\u6811\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u8981\u627e\u5230\u539f\u6765\u6bcf\u4e2a\u70b9\uff0c\u5c06\u6240\u6709\u4e0e\u5176\u76f8\u8fde\u8fb9\u6240\u9700\u8981\u7684\u8282\u70b9\uff08**\u4e0d\u7ba1\u662f\u8fdb\u5165\u8fd8\u662f\u51fa\u53bb**\uff09\u4e4b\u95f4\u7684\u8fb9\u4e92\u76f8\u8fde\u63a5\u3002\n\n\u4e4d\u4e00\u770b\u8fd9\u6837\u7684\u70b9\u6570\u591a\u7684\u7206\u70b8\uff0c\u4f46\u662f\u4ed4\u7ec6\u4e00\u60f3\uff0c\u603b\u70b9\u6570\u518d\u600e\u4e48\u591a\u4e5f\u4e0d\u4f1a\u8d85\u8fc7$2m$\u554a\uff01\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u8fd9\u4e9b\u70b9\u6784\u9020\u4e00\u9897**\u865a\u6811**\uff08\u4e0d\u4f1a\u865a\u6811\u7684\u5de6\u8f6c[Luogu P2495 [SDOI2011]\u6d88\u8017\u6218](https://www.luogu.org/problemnew/show/P2495)\uff09\n\n\u6b64\u65f6\u865a\u6811\u4e0a\u7684\u70b9\u5c31\u662f\u5b83\u5b50\u6811\u5185\u7684\u70b9\uff08\u5305\u62ec\u4ed6\u672c\u8eab\uff09\u4e4b\u95f4\u7684**LCA**\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5728\u8fd9\u4e9b\u70b9\u5bf9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u8fd9\u4e2a\u70b9\u7684$dep-1$\uff08\u51cf\u4e0d\u51cf$1$\u6839\u636e\u4e2a\u4eba\u5199\u6cd5\u4e0d\u540c\uff09\n\n------\n\n### \u4f18\u5316\u5efa\u8fb9\n\n\u50cf\u524d\u9762\u8bf4\u7684\u90a3\u6837\uff0c\u76f4\u63a5\u4e24\u4e24\u66b4\u529b\u8fde\u8fb9\u8fb9\u6570\u8fd8\u662f\u5e73\u65b9\u7ea7\u522b\u7684\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e9b\u70b9\u90fd\u8981\u7ecf\u8fc7LCA\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4ee5LCA\u4e3a\u4e2d\u8f6c\u70b9\u5efa**\u865a\u70b9**\u8fde\u8fb9\u3002\uff08\u4e0d\u4f1a\u5efa\u865a\u70b9\u7684\u5de6\u8f6c[Luogu P1983 \u8f66\u7ad9\u5206\u7ea7](https://www.luogu.org/problemnew/show/P1983)\uff09\n\n\u7136\u540e\u6bcf\u6b21\u8fde\u8fb9\u7684\u8fb9\u6570\u662f$O(n)$\u7684\uff0c\u4f46\u662f\u6709\u7531\u4e8e\u6709\u591a\u4e2a\u70b9\uff0c\u6240\u4ee5\u603b\u7684\u8fb9\u6570\u8fd8\u662f$O(n^2)$\u3002~~\u4f18\u5316\u4e86\u534a\u5929\u5374\u597d\u4f3c\u653e\u5c41~~\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8fde\u7684\u8fb9\u76f8\u5f53\u4e8e\u662f\u4ece\u67d0\u4e2a**\u5b50\u6811**\u8fde\u5230\u67d0\u4e2a\u70b9\uff0c\u518d\u4ece\u8fd9\u4e2a\u70b9\u8fde\u5230\u67d0\u4e2a**\u5b50\u6811**\u4e2d\n\n\u5b50\u6811\u7684\u4e00\u4e2a\u7ecf\u5178\u6027\u8d28\uff0c\u76f8\u4fe1\u6211\u4e0d\u8bf4\u5927\u5bb6\u90fd\u77e5\u9053\uff1a**DFS\u5e8f**\u8fde\u7eed\u3002\n\n\u6240\u4ee5\u95ee\u9898\u53d8\u6210\u533a\u95f4\u5411\u70b9\uff0c\u70b9\u5411\u533a\u95f4\u8fde\u8fb9\u3002\u8fd9\u4e2a\u7531\u4e8e\u6211\u6bd4\u8f83\u83dc\uff08\u4e0d\u4f1a**\u524d\u540e\u7f00\u4f18\u5316\u5efa\u56fe**\uff09\uff0c\u540c\u65f6\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\u4e0d\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u7ecf\u5178\u7684**\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe**\uff08\u4e0d\u4f1a\u7684\u5de6\u8f6c[Luogu P3588 [POI2015]PUS](https://www.luogu.org/problemnew/show/P3588)\uff09\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u4e00\u68f5\u51fa\u7ebf\u6bb5\u6811\u548c\u4e00\u68f5\u5165\u7ebf\u6bb5\u6811\u5373\u53ef\n\n------\n\n### \u603b\u7ed3&&CODE\n\n\u6700\u540e\u95ee\u9898\u56de\u5f52\u5230\u6700\u77ed\u8def\u95ee\u9898\uff0c\u90a3\u4e48\u8fd9\u9898\u5c31\u88ab\u6211\u4eec~~\u8f7b\u677e~~\u8270\u96be\u7684\u5207\u6389\u4e86\u3002\n\n\u8003\u8651\u590d\u6742\u5ea6\uff0c\u7531\u4e8e\u6709\u7ebf\u6bb5\u6811\u7684\u5b58\u5728\u603b\u8fb9\u6570\u662f$O(n\\log n)$\u7684\uff08\u8ba4\u4e3a$n,m$\u540c\u9636\uff09\n\n\u7b97\u4e0aDijkstra\u7684\u4e00\u4e2a$\\log$\u590d\u6742\u5ea6\u4e3a$O(n\\log^2n)$\n\n\u5343\u4e07\u6ce8\u610f\u7801\u7684\u65f6\u5019\u8981\u6ce8\u610f\u81ea\u5df1\u5728\u5e72\u4ec0\u4e48\uff0c\u4e0d\u8981\u4e0d\u5c0f\u5fc3\u628a\u81ea\u5df1\u7801\u6655\u4e86\u3002\n\n\u9644\u4e0a200+\u7684CODE\n\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<cctype>\n#include<queue>\n#include<vector>\n#include<cstring>\n#include<algorithm>\n#define RI register int\n#define pb push_back\n#define Ms(f,x) memset(f,x,sizeof(f))\n#define Tp template <typename T>\nusing namespace std;\ntypedef long long LL;\nconst int N=50005,K=20005;\nint t,n,m,k,dep[K],dfn[K],rv[2][K],tot;\nclass FileInputOutput\n{\n\tprivate:\n\t\t#define S 1<<21\n\t\t#define tc() (A==B&&(B=(A=Fin)+fread(Fin,1,S,stdin),A==B)?EOF:*A++)\n\t\t#define pc(ch) (Ftop<S?Fout[Ftop++]=ch:(fwrite(Fout,1,S,stdout),Fout[(Ftop=0)++]=ch))\n\t\tchar Fin[S],Fout[S],*A,*B; int Ftop,pt[25];\n\tpublic:\n\t\tTp inline void read(T &x)\n\t\t{\n\t\t\tx=0; char ch; while (!isdigit(ch=tc()));\n\t\t\twhile (x=(x<<3)+(x<<1)+(ch&15),isdigit(ch=tc()));\n\t\t}\n\t\tTp inline void write(T x)\n\t\t{\n\t\t\tif (!x) return (void)(pc('0'),pc('\\n')); RI ptop=0;\n\t\t\twhile (x) pt[++ptop]=x%10,x/=10; while (ptop) pc(pt[ptop--]+48); pc('\\n');\n\t\t}\n\t\tinline void Fend(void)\n\t\t{\n\t\t\tfwrite(Fout,1,Ftop,stdout);\n\t\t}\n\t\t#undef S\n\t\t#undef tc\n\t\t#undef pc\n}F;\ninline bool cmp(int x,int y)\n{\n\treturn dfn[x]<dfn[y];\n}\nclass LCA_Solver\n{\n\tprivate:\n\t\t#define P 15\n\t\tstruct edge\n\t\t{\n\t\t\tint to,nxt;\n\t\t}e[K]; int head[K],cnt,idx,anc[K][P],x,y,z;\n\t\tinline void add(int x,int y)\n\t\t{\n\t\t\te[++cnt]=(edge){y,head[x]}; head[x]=cnt;\n\t\t}\n\t\tinline void reset(int now)\n\t\t{\n\t\t\tfor (RI i=0;i<P-1;++i) anc[now][i+1]=anc[anc[now][i]][i];\n\t\t}\n\t\t#define to e[i].to\n\t\tinline void DFS(int now,int fa)\n\t\t{\n\t\t\tdep[now]=dep[fa]+1; reset(now); dfn[now]=++idx;\n\t\t\tfor (RI i=head[now];i;i=e[i].nxt) anc[to][0]=now,DFS(to,now);\n\t\t}\n\t\t#undef to\n\t\tinline void swap(int &x,int &y)\n\t\t{\n\t\t\tint t=x; x=y; y=t;\n\t\t}\n\tpublic:\n\t\tinline void init(void)\n\t\t{\n\t\t\tcnt=idx=0; Ms(head,0); for (RI i=1;i<k;++i)\n\t\t\tF.read(x),F.read(y),F.read(z),add(x,y); DFS(1,0);\n\t\t}\n\t\tinline int query(int x,int y)\n\t\t{\n\t\t\tRI i; if (dep[x]<dep[y]) swap(x,y); for (i=P-1;~i;--i)\n\t\t\tif (dep[anc[x][i]]>=dep[y]) x=anc[x][i]; if (x==y) return x;\n\t\t\tfor (i=P-1;~i;--i) if (anc[x][i]!=anc[y][i])\n\t\t\tx=anc[x][i],y=anc[y][i]; return anc[x][0];\n\t\t}\n}L;\nclass Graph_Solver\n{\n\tprivate:\n\t\t#define NS 1000005\n\t\t#define MS 4000005\n\t\tstruct edge\n\t\t{\n\t\t\tint to,nxt,v;\n\t\t}e[MS]; int head[NS],cnt,pos[NS],st,a,b,d,pcnt,p[N<<1]; bool vis[NS]; LL dis[NS],c;\n\t\tint num[2][K<<2],stack[K],top,father[K],size[K],ndfn[K];;\n\t\tstruct data\n\t\t{\n\t\t\tLL val; int id;\n\t\t\tinline data(LL Val=0,int Id=0) { val=Val; id=Id; }\n\t\t\tinline friend bool operator <(data A,data B)\n\t\t\t{\n\t\t\t\treturn A.val>B.val;\n\t\t\t}\n\t\t}; priority_queue <data> small; vector <int> v[N][2];\n\t\tinline void add(int x,int y,int z)\n\t\t{\n\t\t\te[++cnt]=(edge){y,head[x],z}; head[x]=cnt;\n\t\t}\n\t\tinline void build(int opt,int now,int l,int r)\n\t\t{\n\t\t\tnum[opt][now]=++tot; if (l==r) return (void)(rv[opt][p[l]]=tot);\n\t\t\tint mid=l+r>>1; build(opt,now<<1,l,mid); build(opt,now<<1|1,mid+1,r);\n\t\t\tif (!opt) add(num[opt][now<<1],num[opt][now],0),add(num[opt][now<<1|1],num[opt][now],0);\n\t\t\telse add(num[opt][now],num[opt][now<<1],0),add(num[opt][now],num[opt][now<<1|1],0);\n\t\t}\n\t\t#define O beg,end,id,val\n\t\tinline void link(int opt,int now,int l,int r,int beg,int end,int id,int val)\n\t\t{\n\t\t\tif (l>=beg&&r<=end) { if (!opt) add(num[opt][now],id,val); else add(id,num[opt][now],val); return; }\n\t\t\tint mid=l+r>>1; if (beg<=mid) link(opt,now<<1,l,mid,O); if (end>mid) link(opt,now<<1|1,mid+1,r,O);\n\t\t}\n\t\t#undef O\n\t\tinline void VT_build(void)\n\t\t{\n\t\t\tRI i; father[stack[top=1]=p[1]]=0;\n\t\t\tint t=pcnt; for (i=2;i<=t;++i)\n\t\t\t{\n\t\t\t\tint fa=L.query(stack[top],p[i]);\n\t\t\t\twhile (top&&dep[stack[top]]>dep[fa])\n\t\t\t\t{\n\t\t\t\t\tif (top==1||dep[stack[top-1]]<=dep[fa])\n\t\t\t\t\tfather[stack[top]]=fa; --top;\n\t\t\t\t}\n\t\t\t\tif (fa!=stack[top]) father[fa]=stack[top],stack[++top]=fa,p[++pcnt]=fa;\n\t\t\t\tstack[++top]=p[i]; father[p[i]]=fa;\n\t\t\t}\n\t\t\tsort(p+1,p+pcnt+1,cmp); for (i=1;i<=pcnt;++i) size[p[i]]=1;\n\t\t\tfor (i=pcnt;i;--i) size[father[p[i]]]+=size[p[i]],ndfn[p[i]]=i;\n\t\t\tfor (build(0,1,1,pcnt),build(1,1,1,pcnt),i=1;i<=pcnt;++i)\n\t\t\t{\n\t\t\t\tint now=p[i]; ++tot; link(0,1,1,pcnt,i,i,tot,dep[now]-1);\n\t\t\t\tlink(1,1,1,pcnt,i,i+size[now]-1,tot,0);\tint fa=father[now]; if (!fa) continue;\n\t\t\t\t++tot; link(0,1,1,pcnt,i,i+size[now]-1,tot,dep[fa]-1);\n\t\t\t\tif (ndfn[fa]<=i-1) link(1,1,1,pcnt,ndfn[fa],i-1,tot,0);\n\t\t\t\tif (i+size[now]<=ndfn[fa]+size[fa]-1) link(1,1,1,pcnt,i+size[now],ndfn[fa]+size[fa]-1,tot,0);\n\t\t\t}\n\t\t}\n\t\tTp inline void miner(T &x,T y)\n\t\t{\n\t\t\tif (y<x) x=y;\n\t\t}\n\tpublic:\n\t\tinline void init(void)\n\t\t{\n\t\t\tRI i; for (i=1;i<=n;++i) v[i][0].clear(),v[i][1].clear();\n\t\t\tfor (cnt=tot=0,Ms(head,0),i=1;i<=m;++i)\n\t\t\t{\n\t\t\t\tF.read(a); F.read(b); F.read(c); F.read(d);\n\t\t\t\tpos[tot+1]=d; pos[tot+2]=d; v[a][1].pb(tot+1); v[b][0].pb(tot+2);\n\t\t\t\tadd(tot+1,tot+2,c); tot+=2;\n\t\t\t}\n\t\t\tpos[st=++tot]=1; v[1][0].pb(st);\n\t\t}\n\t\tinline void build(void)\n\t\t{\n\t\t\tRI j,k; int lim; for (RI i=1;i<=n;++i)\n\t\t\t{\n\t\t\t\tfor (pcnt=k=0;k<2;++k)\n\t\t\t\tfor (lim=v[i][k].size(),j=0;j<lim;++j)\n\t\t\t\tp[++pcnt]=pos[v[i][k][j]];\n\t\t\t\tsort(p+1,p+pcnt+1); pcnt=unique(p+1,p+pcnt+1)-p-1;\n\t\t\t\tsort(p+1,p+pcnt+1,cmp); VT_build();\n\t\t\t\tfor (k=0;k<2;++k) for (lim=v[i][k].size(),j=0;j<lim;++j)\n\t\t\t\t{\n\t\t\t\t\tint t=v[i][k][j]; if (!k) add(t,rv[k][pos[t]],0); else add(rv[k][pos[t]],t,0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t#define to e[i].to\n\t\tinline void Dijkstra(void)\n\t\t{\n\t\t\tMs(dis,63); Ms(vis,0); small.push(data(dis[st]=0,st));\n\t\t\twhile (!small.empty())\n\t\t\t{\n\t\t\t\tint now=small.top().id; small.pop();\n\t\t\t\tif (vis[now]) continue; vis[now]=1;\n\t\t\t\tfor (RI i=head[now];i;i=e[i].nxt)\n\t\t\t\tif (dis[to]>dis[now]+e[i].v)\n\t\t\t\tsmall.push(data(dis[to]=dis[now]+e[i].v,to));\n\t\t\t}\n\t\t}\n\t\t#undef to\n\t\tinline void print(void)\n\t\t{\n\t\t\tfor (RI i=2;i<=n;++i)\n\t\t\t{\n\t\t\t\tint lim=v[i][0].size(); LL ans=1e18;\n\t\t\t\tfor (RI j=0;j<lim;++j) miner(ans,dis[v[i][0][j]]);\n\t\t\t\tF.write(ans);\n\t\t\t}\n\t\t}\n}G;\nint main()\n{\n\t//freopen(\"CODE.in\",\"r\",stdin); freopen(\"CODE.out\",\"w\",stdout);\n\tfor (F.read(t);t;--t)\n\t{\n\t\tF.read(n); F.read(m); F.read(k); G.init();\n\t\tL.init(); G.build(); G.Dijkstra(); G.print();\n\t}\n\treturn F.Fend(),0;\n}\n```\n\n",
        "postTime": 1546240815,
        "uid": 41698,
        "name": "hl666",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3783 \u3010[SDOI2017]\u5929\u624d\u9ed1\u5ba2\u3011"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P3783)\n\n\u795e\u4ed9\u9898\u4e00\u9053\u3002\n\n\u9996\u5148\u6ce8\u610f\u5230\u8fd9\u91cc\u7684\u8d21\u732e\u6d89\u53ca\u5230\u8fb9\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u53ea\u4e0e\u76f8\u90bb\u7684\u8fb9\u662f\u4ec0\u4e48\u6709\u5173\uff0c\u56e0\u6b64\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u505a\u6cd5\u2014\u2014\u8fb9\u8f6c\u70b9\uff0c\u70b9\u8f6c\u8fb9\uff0c\u5177\u4f53\u6765\u8bf4\u5bf9\u4e8e\u6bcf\u6761\u8fb9 $e$\uff0c\u6211\u4eec\u5c06\u5176\u62c6\u6210\u4e24\u4e2a\u70b9 $in_e,out_e$\uff0c\u5e76\u8fde\u8fb9 $in_e\\to out_e$\uff0c\u6743\u503c\u4e3a $c_e$\uff0c\u540c\u65f6\u5bf9\u4e8e\u6240\u6709 $b_i=a_j$ \u7684\u8fb9 $i,j$\uff0c\u8fde\u8fb9 $out_i\\to in_j$\uff0c\u6743\u503c\u4e3a $dep[\\text{LCA}(d_i,d_j)]$\uff0c\u4ee5\u53ca\u5bf9\u4e8e\u6240\u6709 $a_i=1$ \u7684\u8fb9\u8fde $S\\to in_i$\uff0c\u6743\u503c\u4e3a $0$ \u7684\u8fb9\uff0c\u8dd1\u6700\u77ed\u8def\uff0c\u6700\u540e $ans_i=\\min\\limits_{b_e=i}dis_{out_e}$\u3002\u6b63\u786e\u6027\u663e\u7136\u3002\n\n\u7136\u800c\u8be5\u505a\u6cd5\u6548\u7387\u4f4e\u4e0b\uff0c\u8fb9\u6570\u6700\u9ad8\u53ef\u8fbe\u5230 $\\mathcal O(m^2)$\uff0c\u4e00\u8138\u8fc7\u4e0d\u53bb\u7684\u4e9a\u5b50\u3002\u4e8e\u662f\u53c8\u5230\u4e86\u4f18\u5316\u5efa\u56fe\u7684\u65f6\u95f4\u4e86\uff0c\u4e00\u4e2a observation \u662f\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$ \u800c\u8a00\uff0c\u6211\u4eec\u5728 $b_i=a_j=u$ \u7684\u8fb9 $i,j$ \u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fd9\u4e9b\u8fb9**\u8fb9\u6743\u7684\u79cd\u7c7b\u662f\u4e0d\u4f1a\u592a\u591a\u7684**\uff0c\u56e0\u4e3a\u5047\u8bbe $S=\\{d_i|b_i=u\\lor a_i=u\\}$\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8fb9\u6743\u80af\u5b9a\u53ea\u80fd**\u662f $S$ \u5f53\u4e2d\u67d0\u4e24\u4e2a\u70b9\u7684 $\\text{LCA}$ \u7684\u6df1\u5ea6**\uff0c\u6839\u636e\u865a\u6811\u90a3\u4e00\u5957\u7406\u8bba\uff0c$S$ \u5f53\u4e2d\u4efb\u610f\u4e24\u70b9\u7684 $\\text{LCA}$ \u603b\u5171\u53ea\u6709 $\\mathcal O(|S|)$ \u79cd\u53ef\u80fd\u3002\u800c\u5bf9\u4e8e\u6240\u6709\u70b9 $u$\uff0c\u5b83\u4eec\u5bf9\u5e94 $|S|$ \u7684\u603b\u548c\u4e3a $\\mathcal O(m)$ \u7ea7\u522b\uff0c\u8fd9\u4e2a\u662f\u5728\u6211\u4eec\u80fd\u63a5\u53d7\u7684\u8303\u56f4\u5185\u7684\u3002\u56e0\u6b64\u8003\u8651\u4ece\u8fd9\u4e2a\u6027\u8d28\u5165\u624b\u4f18\u5316\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5c06 $S$ \u5f53\u4e2d\u7684\u70b9\u6309 `DFS` \u5e8f\u6392\u4e2a\u5e8f\uff0c\u90a3\u4e48\u6839\u636e\u865a\u6811\u4e2d\u4e00\u4e2a\u5b9a\u7406\uff1a\u5bf9\u4e8e\u5f85\u5efa\u7acb\u865a\u6811\u7684 $m$ \u4e2a\u70b9 $a_1,a_2,\\cdots,a_m$\uff0c\u5047\u8bbe\u5c06\u5176\u6309\u7167 `DFS` \u5e8f\u6392\u5e8f\u5f97\u5230 $b_1,b_2,\\cdots,b_m$\uff0c\u90a3\u4e48\u8bb0 $h_i=dep[\\text{LCA}(a_i,a_{i+1})]$\uff0c\u6709 $dep[\\text{LCA}(b_l,b_r)]=\\min\\limits_{i=l}^{r-1}h_i$\uff08\u548c SA \u6709\u70b9\u50cf\uff09\uff0c\u56e0\u6b64\u8003\u8651\u6309\u7167\u5957\u8def\u6c42\u51fa $h_i$\uff0c\u90a3\u4e48\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\n\n- \u6709\u4e00\u6392 $t$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e24\u79cd\u7c7b\u578b $0/1$\uff0c\u6bcf\u4e24\u4e2a\u70b9\u4e2d\u95f4\u5199\u6709\u4e00\u4e2a\u6570 $h_i$\uff0c\u6211\u4eec\u8981\u4ece\u6240\u6709 $0$ \u70b9\u5411 $1$ \u70b9\u8fde\u8fb9\uff0c\u6743\u503c\u4e3a\u5b83\u4eec\u4e4b\u95f4\u6570\u7684\u6700\u5c0f\u503c\u3002\n\n\u8fd9\u4e2a\u6709\u4e00\u4e2a\u663e\u7136\u7684\u505a\u6cd5\u2014\u2014\u5bf9\u4e8e\u67d0\u4e2a $h_x$\uff0c\u6ee1\u8db3 $\\min\\limits_{i=l}^{r-1}h_i=h_x$ \u7684 $l,r$ \u80af\u5b9a\u5206\u522b\u5728\u4e00\u6bb5\u533a\u95f4\u5185\uff0c\u5355\u8c03\u6808\u6c42\u51fa\u5bf9\u5e94\u7684\u533a\u95f4\uff0c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u5373\u53ef\uff0c\u4f46\u662f\u8fd9\u4e2a\u505a\u6cd5\u591a\u4e00\u4e2a $\\log$\uff0c\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u901a\u8fc7\uff0c\u800c\u4e14\u5b9e\u73b0\u8d77\u6765\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8003\u8651\u66f4\u7b80\u4fbf\u505a\u6cd5\u3002\u8003\u8651\u6700\u77ed\u8def\u7684\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f**\u5bf9\u4e8e\u4e24\u70b9\u95f4\u5982\u679c\u6709\u591a\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u663e\u7136\u53ea\u6709\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u662f\u6709\u7528\u7684\uff0c\u5176\u4ed6\u8fb9\u53ef\u8fde\u53ef\u4e0d\u8fde\u2014\u2014\u8fde\u4e86\u4e5f\u4e0d\u5f71\u54cd\u4f60\u6700\u77ed\u8def\u7684\u5927\u5c0f**\u3002\u56e0\u6b64\u8003\u8651\u5bf9\u4e8e\u67d0\u4e2a $h_i$\uff0c\u6211\u4eec\u4e0d\u7ef4\u62a4\u4ec0\u4e48\u5355\u8c03\u6808\uff0c\u76f4\u63a5\u4ece $[1,i]$ \u4e2d\u7684 $0$ \u70b9\u5411 $[i+1,t]$ \u4e2d\u7684 $1$ \u70b9\u8fde\u8fb9\uff0c$[i+1,t]$ \u4e2d\u7684 $0$ \u6743\u70b9\u5411 $[1,i]$ \u4e2d\u7684 $1$ \u70b9\u8fde\u8fb9\uff0c\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u67d0\u4e2a $l,r$\uff0c\u53ea\u6709 $[l,r)$ \u4e2d $h$ \u7684\u6700\u5c0f\u503c\uff08\u8bbe\u4e3a $h_x$\uff09\u662f\u6709\u7528\u7684\uff0c\u5176\u4ed6\u8fb9\u8fde\u4e0a\u4e5f\u6ca1\u4e8b\uff0c\u800c\u663e\u7136\u5728\u8003\u8651 $x$ \u7684\u8d21\u732e\u65f6\uff0c\u5df2\u7ecf\u8fde\u4e86  $l,r$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u56e0\u6b64\u6700\u77ed\u8def\u8dd1\u51fa\u6765\u4f9d\u7136\u662f\u5bf9\u7684\u3002\u8003\u8651\u4f18\u5316\uff0c\u6ce8\u610f\u5230\u6bcf\u6b21\u90fd\u662f\u67d0\u4e2a\u524d\u7f00\u5411\u540e\u7f00\uff0c\u6216\u8005\u540e\u7f00\u5411\u524d\u7f00\u8fde\u8fb9\uff0c\u56e0\u6b64\u8003\u8651\u524d\u540e\u7f00\u4f18\u5316\u5efa\u56fe\uff0c\u5177\u4f53\u6765\u8bf4\u5efa\u7acb\u56db\u6392\u70b9\u2014\u2014\u524d\u7f00 `in`\uff0c\u524d\u7f00 `out`\uff0c\u540e\u7f00 `in`\uff0c\u540e\u7f00 `out`\uff0c\u7136\u540e\u968f\u4fbf\u778e\u8fde\u8fde\u5373\u53ef\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(Tm\\log m)$\uff0c\u7136\u9e45\u5e38\u6570\u975e\u5e38\u5927\uff0c\u76f4\u63a5\u4e0a\u5929\u2026\u2026\n\n\u4ee3\u7801\uff08\u4f3c\u4e4e\u9898\u89e3\u533a\u4e2d\u6709\u4eba\u8bf4\u6b64\u9898\u4ee3\u7801\u96be\u5ea6\u5f88\u5927\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u8fd8\u597d\u7f62\uff0c\u4e3b\u8981\u539f\u56e0\u53ef\u80fd\u662f\u6709\u7684\u4eba\u628a\u865a\u6811\u5efa\u4e86\u51fa\u6765\uff0c\u589e\u52a0\u4e86\u4ee3\u7801\u96be\u5ea6\uff0c\u5b9e\u9645\u4e0a\u4e0d\u7528\u5efa\u51fa\u6765\uff0c\u53ea\u7528\u5c06\u5b83\u4eec\u7684 DFS \u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u4e2a\u5e8f\u5373\u53ef\uff09\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u633a\u6e05\u695a\u7684\uff0c\u633a\u6709\u53c2\u8003\u610f\u4e49\u7684\uff0c\u8fd9\u5927\u6982\u4e5f\u662f\u6211\u53d1\u8fd9\u7bc7\u9898\u89e3\u7684\u539f\u56e0\u5427\uff1a\n\n```cpp\nconst int MAXN=5e4;\nconst int MAXK=2e4;\nconst int LOG_N=16;\nconst int MAXV=6e5+1;\nconst int MAXE=1e7;\nint n,m,k,S=6e5+1,ncnt;\nint hd[MAXV+5],to[MAXE+5],nxt[MAXE+5],val[MAXE+5],ec=0;\nvoid adde(int u,int v,int w){to[++ec]=v;val[ec]=w;nxt[ec]=hd[u];hd[u]=ec;}\nstruct edge{int a,b,c,d;} e[MAXN+5];\nvector<int> in[MAXN+5],out[MAXN+5],g[MAXK+5];\nint dfn[MAXK+5],fa[MAXK+5][LOG_N+2],dep[MAXK+5],tim=0;\nvoid dfs(int x=1,int f=0){\n\tdfn[x]=++tim;fa[x][0]=f;\n\tfor(int y:g[x]) dep[y]=dep[x]+1,dfs(y,x);\n}\nint getlca(int x,int y){\n\tif(dep[x]<dep[y]) x^=y^=x^=y;\n\tfor(int i=LOG_N;~i;i--) if(dep[x]-(1<<i)>=dep[y]) x=fa[x][i];\n\tif(x==y) return x;\n\tfor(int i=LOG_N;~i;i--) if(fa[x][i]^fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nbool cmp(pii x,pii y){return dfn[x.fi]<dfn[y.fi];}\nll dis[MAXV+5],ans[MAXN+5];\nvoid clear(){\n\tS=6e5+1;ncnt=0;memset(hd,0,sizeof(hd));ec=0;\n\tmemset(dfn,0,sizeof(dfn));memset(fa,0,sizeof(fa));\n\tmemset(dep,0,sizeof(dep));tim=0;\n\tmemset(dis,63,sizeof(dis));memset(ans,63,sizeof(ans));\n\tfor(int i=1;i<=MAXN;i++) in[i].clear(),out[i].clear();\n\tfor(int i=1;i<=MAXK;i++) g[i].clear();\n}\nvoid solve(){\n\tscanf(\"%d%d%d\",&n,&m,&k);clear();ncnt=m<<1;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d%d\",&e[i].a,&e[i].b,&e[i].c,&e[i].d);\n\t\tout[e[i].a].pb(i);in[e[i].b].pb(i);\n\t}\n\tfor(int i=1,u,v;i<k;i++) scanf(\"%d%d%*d\",&u,&v),g[u].pb(v);dfs(1,0);\n\tfor(int i=1;i<=LOG_N;i++) for(int j=1;j<=k;j++) fa[j][i]=fa[fa[j][i-1]][i-1];\n\tfor(int i=1;i<=m;i++) adde(i,i+m,e[i].c);\n\tfor(int i=1;i<=m;i++) if(e[i].a==1) adde(S,i,0);\n\tfor(int i=1;i<=n;i++){\n\t\tvector<pii> ed;\n\t\tfor(int x:in[i]) ed.pb(mp(e[x].d,x+m));\n\t\tfor(int x:out[i]) ed.pb(mp(e[x].d,x));\n\t\tsort(ed.begin(),ed.end(),cmp);\n\t\tvector<int> h(ed.size(),0);\n\t\tvector<int> pre_in(ed.size(),0),pre_out(ed.size(),0);\n\t\tvector<int> suf_in(ed.size(),0),suf_out(ed.size(),0);\n\t\tfor(int j=0;j+1<ed.size();j++) h[j]=dep[getlca(ed[j].fi,ed[j+1].fi)];\n\t\tfor(int j=0;j<ed.size();j++) pre_in[j]=++ncnt;\n\t\tfor(int j=0;j<ed.size();j++) pre_out[j]=++ncnt;\n\t\tfor(int j=0;j<ed.size();j++) suf_in[j]=++ncnt;\n\t\tfor(int j=0;j<ed.size();j++) suf_out[j]=++ncnt;\n\t\tfor(int j=0;j+1<ed.size();j++) adde(pre_in[j+1],pre_in[j],0);\n\t\tfor(int j=0;j+1<ed.size();j++) adde(pre_out[j],pre_out[j+1],0);\n\t\tfor(int j=0;j+1<ed.size();j++) adde(suf_in[j],suf_in[j+1],0);\n\t\tfor(int j=0;j+1<ed.size();j++) adde(suf_out[j+1],suf_out[j],0);\n\t\tfor(int j=0;j<ed.size();j++){\n\t\t\tif(ed[j].se<=m) adde(suf_in[j],ed[j].se,0),adde(pre_in[j],ed[j].se,0);\n\t\t\telse adde(ed[j].se,suf_out[j],0),adde(ed[j].se,pre_out[j],0);\n\t\t}\n\t\tfor(int j=0;j+1<ed.size();j++){\n\t\t\tadde(suf_out[j+1],pre_in[j],h[j]);\n\t\t\tadde(pre_out[j],suf_in[j+1],h[j]);\n\t\t}\n\t} memset(dis,63,sizeof(dis));memset(ans,63,sizeof(ans));\n\tpriority_queue<pii,vector<pii>,greater<pii> > q;\n\tq.push(mp(dis[S]=0,S));\n\twhile(!q.empty()){\n\t\tpii p=q.top();q.pop();\n\t\tint sum=p.fi,x=p.se;\n\t\tif(dis[x]<sum) continue;\n\t\tfor(int e=hd[x];e;e=nxt[e]){\n\t\t\tint y=to[e],z=val[e];\n\t\t\tif(dis[y]>dis[x]+z) q.push(mp(dis[y]=dis[x]+z,y));\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++) chkmin(ans[e[i].b],dis[i+m]);\n\tfor(int i=2;i<=n;i++) printf(\"%lld\\n\",ans[i]);\n}\nint main(){int qu;scanf(\"%d\",&qu);while(qu--) solve();return 0;}\n```\n\n",
        "postTime": 1625217974,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3783 [SDOI2017]\u5929\u624d\u9ed1\u5ba2"
    },
    {
        "content": "\u9996\u5148\u5b57\u5178\u6811\u4e0a\u7684\u8fb9\u6743\u662f\u6ca1\u6709\u7528\u7684 \u5bf9\u4e8e\u4e24\u4e2a\u70b9\u7684$lcp$\u5176\u5b9e\u5c31\u662f\u5728\u5b57\u5178\u6811\u4e0a\u7684$lca$\n\n\u4f46\u662f\u4e0d\u80fd\u6bcf\u6b21\u90fd\u6c42$lca$ \u8fd9\u6837\u663e\u7136\u4f1a\u8d85\u65f6\n\n\u672c\u9898\u4e2d\u7684\u70b9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u7528 \u53ef\u4ee5\u628a\u6240\u6709\u8fb9\u5728\u65b0\u56fe\u4e2d\u770b\u505a\u70b9 \u5e76\u4e14\u8fde\u8fb9\n\n\u7136\u540e\u9700\u8981\u8003\u8651\u4f18\u5316\u5efa\u8fb9\n\n\u628a\u5728\u539f\u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u627e\u51fa\u6765 \u7528\u4ed6\u4eec\u5728\u5b57\u5178\u6811\u4e0a\u7684\u70b9\u6784\u5efa\u4e00\u68f5\u865a\u6811\n\n\u6b64\u65f6\u865a\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\u5c31\u662f\u5b83\u4e24\u4e24\u5b50\u6811\u5185\u7684\u70b9\u7684$lca$ \u6216\u8fd9\u4e2a\u70b9\u548c\u5b50\u6811\u5185\u67d0\u4e2a\u70b9\u7684$lca$\n\n\u4f46\u662f\u5728\u5b50\u6811\u5185\u76f4\u63a5\u8fde\u8fb9 \u8fb9\u6570\u4ecd\u7136\u5f88\u5927\n\n\u89c2\u5bdf\u5230\u5b50\u6811\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4 \u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\u8868\u793a\u4e00\u4e2a\u533a\u95f4 \u7136\u540e\u518d\u8fd9\u4e2a\u70b9\u4e0a\u8fde\u8fb9\n\n\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811 \u5206\u522b\u7ba1\u7406\u5165\u8fb9\u548c\u51fa\u8fb9 \u7ba1\u7406\u7684\u4e0b\u6807\u662f\u865a\u6811\u5185\u7684$dfn$\n\n\u5165\u8fb9\u8282\u70b9\u5411\u5165\u7ebf\u6bb5\u6811\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9 \u8fb9\u6743\u5373\u4e3a\u539f\u56fe\u4e0a\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\n\n\u51fa\u7ebf\u6bb5\u6811\u53f6\u5b50\u8282\u70b9\u5411\u5bf9\u5e94\u51fa\u8fb9\u8282\u70b9\u8fde\u8fb9 \u8fb9\u6743\u4e3a0\n\n\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u5185 \u5165\u7ebf\u6bb5\u6811\u7684\u5b50\u8282\u70b9\u5411\u7236\u8282\u70b9\u8fde\u8fb9 \u51fa\u7ebf\u6bb5\u6811\u76f8\u53cd\n\n\n\u679a\u4e3e\u4f5c\u4e3a$lca$\u7684\u70b9\n\n\u4e24\u4e24\u5b50\u6811\u5185\u8fde\u8fb9\u65f6\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u5411\u53e6\u4e24\u6bb5\u533a\u95f4\uff08\u53ef\u80fd\u4e3a\u4e00\u6bb5\uff09\u8fde\u8fb9\n\n\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u8f85\u52a9\u8282\u70b9 \u628a\u5165\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u90fd\u8fde\u5230\u8fd9\u4e2a\u70b9 \u518d\u8fde\u5230\u51fa\u7ebf\u6bb5\u6811\u7684\u53e6\u5916\u4e24\u4e2a\u533a\u95f4\n\n\u5165\u7ebf\u6bb5\u6811\u8fde\u7684\u8fb9\u8fb9\u6743\u4e3a\u5f53\u524d\u679a\u4e3e\u7684\u70b9\u7684\u6df1\u5ea6\n\n\u8fd9\u4e2a\u70b9\u4e5f\u8981\u548c\u5b50\u6811\u5185\u8fde\u8fb9\n\n\n\u65b0\u56fe\u5c31\u5efa\u7acb\u5b8c\u6210\u4e86\n\n\u4f46\u662f\u8fd9\u6837\u65e0\u6cd5\u5f97\u5230\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\n\n\u53ef\u4ee5\u5148\u5efa\u7acb\u4e00\u4e2a\u8d77\u70b9 \u5f53\u505a1\u8282\u70b9\u7684\u5165\u8fb9 \u8fb9\u6743\u4e3a0\n\n\u7136\u540e\u5728\u4e2d\u95f4\u865a\u6811\u5904\u7406\u8fc7\u7a0b\u4e2d \u6bcf\u4e2a\u539f\u56fe\u4e0a\u7684\u70b9\u65b0\u5f00\u4e00\u4e2a\u8282\u70b9 \u628a\u6bcf\u4e2a\u5165\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u8fde\u5230\u8fd9\u4e2a\u70b9 \u8fb9\u6743\u4e3a0\n\n\n\u63a5\u4e0b\u6765\u53ea\u8981\u8dd1\u4e00\u904d$Dijkstra$\u5373\u53ef\n\n$O(n*log^2n)$\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 50010\n#define M 20010\n#define K 1000010\ninline void rd(int &x){\n    char c;x=0;\n    while (c=getchar(),c<48);\n    do x=(x<<1)+(x<<3)+(c^48);\n    while (c=getchar(),c>=48);\n}\ninline void pt(long long x){\n    if (!x) putchar('0');\n    else{\n        static int s[20],t;\n        for (t=0;x;x/=10) s[t++]=x%10;\n        while (t) putchar(s[--t]^48);\n    }\n    putchar('\\n'); \n}\nstruct edge{\n    int nxt,t,s;\n}e[K<<2];\nint head[K],edge_cnt;\ninline void add_edge(int x,int y,int z){\n    e[edge_cnt]=(edge){head[x],y,z};\n    head[x]=edge_cnt++;\n}\nstruct INOUTEdge{\n    int nxt,x;\n}w[N<<2];\nint G1[N],G2[N],G_cnt;\ninline void add_G(int *G,int x,int y){\n    w[G_cnt]=(INOUTEdge){G[x],y};\n    G[x]=G_cnt++;\n}\nint val[N],Tid[N],poiID[N];\nstruct Trie_Tree{\n    struct Edge{\n        int nxt,t;\n    }E[M];\n    int Head[M],Edge_cnt,fa[M],dep[M],siz[M],son[M],top[M],dfs_cnt,dfn[N],ed[N];\n    inline void Add_edge(int x,int y){\n        E[Edge_cnt]=(Edge){Head[x],y};\n        Head[x]=Edge_cnt++;\n    }\n    void clear(){\n        memset(Head,-1,sizeof(Head));\n        dfs_cnt=Edge_cnt=0;\n    }\n    void dfs(int x,int f){\n        fa[x]=f;\n        dep[x]=dep[f]+1;\n        siz[x]=1;\n        son[x]=0;\n        int i;\n        for (i=Head[x];~i;i=E[i].nxt){\n            int to=E[i].t;\n            if (to==f) continue;\n            dfs(to,x);\n            siz[x]+=siz[to];\n            if (siz[to]>siz[son[x]]) son[x]=to;\n        }\n    }\n    void dfs1(int x,int tp){\n        dfn[x]=++dfs_cnt;\n        top[x]=tp;\n        if (son[x]) dfs1(son[x],tp);\n        int i;\n        for (i=Head[x];~i;i=E[i].nxt){\n            int to=E[i].t;\n            if (to==fa[x] || to==son[x]) continue;\n            dfs1(to,to);\n        }\n        ed[x]=dfs_cnt;\n    }\n    int LCA(int x,int y){\n        while (top[x]!=top[y]){\n            if (dep[top[x]]<dep[top[y]]) y=fa[top[y]];\n            else x=fa[top[x]];\n        }\n        return dep[x]<dep[y]?x:y;\n    }\n    void init(){\n        dfs(1,0);\n        dfs1(1,1);\n    }\n}Trie;\nint vcnt,a[N<<1],h,vid1[N<<1],vid2[N<<1],vdfn[N<<1],ved[N<<1],vfa[N<<1],tmp[N<<1];\nstruct Virtual_Tree{\n    #define Lc p<<1\n    #define Rc p<<1|1\n    struct Segment_Tree_out{//\u51fa\u7ebf\u6bb5\u6811\n        int g[N<<3];\n        void build(int l,int r,int p){\n            g[p]=++vcnt;\n            if (l==r){\n                vid1[l]=g[p];\n                return;\n            }\n            int mid=(l+r)>>1;\n            build(l,mid,Lc);\n            build(mid+1,r,Rc);\n            add_edge(g[p],g[Lc],0);\n            add_edge(g[p],g[Rc],0);\n        }\n        void add(int l,int r,int p,int pl,int pr,int x,int a){\n            if (l==pl && r==pr){\n                add_edge(x,g[p],a);\n                return;\n            }\n            int mid=(l+r)>>1;\n            if (pr<=mid) add(l,mid,Lc,pl,pr,x,a);\n            else if (pl>mid) add(mid+1,r,Rc,pl,pr,x,a);\n            else add(l,mid,Lc,pl,mid,x,a),add(mid+1,r,Rc,mid+1,pr,x,a);\n        }\n    }T1;\n    struct Segment_Tree_in{//\u5165\u7ebf\u6bb5\u6811\n        int g[N<<3];\n        void build(int l,int r,int p){\n            g[p]=++vcnt;\n            if (l==r){\n                vid2[l]=g[p];\n                return;\n            }\n            int mid=(l+r)>>1;\n            build(l,mid,Lc);\n            build(mid+1,r,Rc);\n            add_edge(g[Lc],g[p],0);\n            add_edge(g[Rc],g[p],0);\n        }\n        void add(int l,int r,int p,int pl,int pr,int x,int a){\n            if (l==pl && r==pr){\n                add_edge(g[p],x,a);\n                return;\n            }\n            int mid=(l+r)>>1;\n            if (pr<=mid) add(l,mid,Lc,pl,pr,x,a);\n            else if (pl>mid) add(mid+1,r,Rc,pl,pr,x,a);\n            else add(l,mid,Lc,pl,mid,x,a),add(mid+1,r,Rc,mid+1,pr,x,a);\n        }\n    }T2;\n    static bool cmp(int x,int y){\n        return Trie.dfn[x]<Trie.dfn[y];\n    }\n    inline bool contain(int x,int y){\n        return Trie.dfn[x]>=Trie.dfn[y] && Trie.dfn[x]<=Trie.ed[y];\n    }\n    void vbuild(){\n        int i;\n        sort(a+1,a+1+h,cmp);\n        for (i=1;i<h;i++) a[h+i]=Trie.LCA(a[i],a[i+1]);\n        sort(a+1,a+h*2,cmp);\n        h=unique(a+1,a+h*2)-a-1;\n        int h1=0;\n        for (i=1;i<=h;i++){\n            vdfn[a[i]]=i;\n            while (h1 && !contain(a[i],tmp[h1])) ved[tmp[h1--]]=i-1;\n            vfa[a[i]]=tmp[h1];\n            tmp[++h1]=a[i];\n        }\n        while (h1) ved[tmp[h1--]]=h;\n    }\n    void solve(int x){\n        int i;\n        h=0;\n        for (i=G1[x];~i;i=w[i].nxt) a[++h]=Tid[w[i].x];\n        for (i=G2[x];~i;i=w[i].nxt) a[++h]=Tid[w[i].x];\n        vbuild();\n        T1.build(1,h,1);\n        T2.build(1,h,1);\n        for (i=G1[x];~i;i=w[i].nxt) add_edge(vid1[vdfn[Tid[w[i].x]]],w[i].x,0);\n        for (i=G2[x];~i;i=w[i].nxt) add_edge(w[i].x,vid2[vdfn[Tid[w[i].x]]],val[w[i].x]);\n        for (i=2;i<=h;i++){\n            int p=++vcnt;\n            int x1=a[i],y1=vfa[a[i]];\n            T2.add(1,h,1,vdfn[x1],ved[x1],p,Trie.dep[y1]);\n            T1.add(1,h,1,vdfn[y1],vdfn[x1]-1,p,0);\n            if (ved[x1]<ved[y1]) T1.add(1,h,1,ved[x1]+1,ved[y1],p,0);\n        }\n        poiID[x]=++vcnt;\n        for (i=1;i<=h;i++){\n            int x1=a[i];\n            T1.add(1,h,1,vdfn[x1],ved[x1],vid2[vdfn[x1]],Trie.dep[x1]);\n            add_edge(vid2[vdfn[x1]],poiID[x],0);\n        }\n    }\n}vTree;\nstruct node{\n    int x;\n    long long d;\n    bool operator <(const node &_)const{\n        return d<_.d;\n    }\n};\nstruct heap{\n    #define swap(x,y) (tt=x,x=y,y=tt)\n    node A[K],tt;\n    int Top;\n    void push(node x){\n        A[++Top]=x;\n        int i=Top;\n        while (i>1){\n            int j=i>>1;\n            if (A[i]<A[j]) swap(A[i],A[j]),i=j;\n            else break;\n        }\n    }\n    void pop(){\n        A[1]=A[Top--];\n        int i=1;\n        while ((i<<1)<=Top){\n            int j=i<<1;\n            if (j<Top && A[j+1]<A[j]) j++;\n            if (A[j]<A[i]) swap(A[i],A[j]),i=j;\n            else break;\n        }\n    }\n}Q;\nlong long dis[K];\nbool vis[K];\nvoid Dijkstra(int st){\n    memset(dis,63,sizeof(dis));\n    memset(vis,0,sizeof(vis));\n    int i;\n    Q.push((node){st,0});\n    dis[st]=0;\n    while (Q.Top){\n        int x=Q.A[1].x;\n        long long z=Q.A[1].d;\n        Q.pop();\n        if (vis[x]) continue;\n        vis[x]=1;\n        for (i=head[x];~i;i=e[i].nxt){\n            int to=e[i].t,Val=e[i].s;\n            if (dis[to]>z+Val){\n                dis[to]=z+Val;\n                Q.push((node){to,dis[to]});\n            }\n        }\n    }\n}\nvoid Clear(){\n    memset(head,-1,sizeof(head));\n    memset(G1,-1,sizeof(G1));\n    memset(G2,-1,sizeof(G2));\n    edge_cnt=G_cnt=0;\n    Trie.clear();\n}\nint main(){\n    int Case;\n    rd(Case);\n    Trie.dep[0]=-1;\n    while (Case--){\n        Clear();\n        int n,m,k,i;\n        rd(n),rd(m),rd(k);\n        for (i=1;i<=m;i++){\n            int x,y;\n            rd(x),rd(y),rd(val[i]),rd(Tid[i]);\n            add_G(G1,x,i);//\u51fa\u8fb9 \n            add_G(G2,y,i);//\u5165\u8fb9 \n        }\n        for (i=1;i<k;i++){\n            int x,y,z;\n            rd(x),rd(y),rd(z);\n            Trie.Add_edge(x,y);\n        }\n        Trie.init();\n        m++;\n        val[m]=0;\n        Tid[m]=1;\n        add_G(G2,1,m);//\u53e6\u9020\u4e00\u4e2a\u8d77\u70b9\n        vcnt=m;\n        for (i=1;i<=n;i++) vTree.solve(i);\n        Dijkstra(m);\n        for (i=2;i<=n;i++) pt(dis[poiID[i]]);\n    }\n    return 0;\n}\n```",
        "postTime": 1510222145,
        "uid": 13417,
        "name": "CalvinJin",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3783 \u3010[SDOI2017]\u5929\u624d\u9ed1\u5ba2\u3011"
    },
    {
        "content": "\u524d\u6392\u63d0\u9192\uff1a\u591a\u6d4b\u4e0d\u6e05\u7a7a\u7684\u4f60\u518d\u5f3a\u5927\uff0c\u8003\u573a\u4e0a\u4e5f\u662f\u5047\u7684\uff01\n\n\u9898\u610f\u6709\u4e9b\u590d\u6742\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u3002\u3002\u3002\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe $G$ \u548c\u4e00\u68f5\u6811 $T$\uff0c\u56fe\u4e0a\u6bcf\u6761\u8fb9\u6709\u4e00\u4e2a\u8fb9\u6743 $w$ \u548c\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9 $u$\uff0c\u7ecf\u8fc7\u4e00\u6761\u8fb9 $a$ \u540e\u518d\u7ecf\u8fc7\u4e00\u6761\u8fb9 $b$ \u7684\u4ee3\u4ef7\u4e3a $b.w+LCA(a.u,b.u)$\uff0c\u6c42 $1$ \u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u3002\u7ecf\u8fc7\u7b2c\u4e00\u6761\u8fb9\u7684\u4ee3\u4ef7\u4ec5\u4e3a $a.w$\u3002\n\n\u9996\u5148\u5bb9\u6613\u53d1\u73b0\u4fe1\u606f\u90fd\u662f\u7ed9\u5728\u8fb9\u4e0a\u7684\uff0c\u751a\u81f3\u9700\u8981\u8ba1\u7b97\u8fb9\u5bf9\u8fb9\u7684\u4fe1\u606f\u3002\u6240\u4ee5\u5728\u70b9\u4e0a\u8dd1\u6700\u77ed\u8def\u662f\u6ca1\u6709\u524d\u9014\u7684\uff0c\u8981\u628a\u8fb9\u5efa\u6210\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u5bf9\u8fd9\u4e9b\u70b9\u8dd1\u6700\u77ed\u8def\u3002\n\n\u518d\u8f6c\u5316\u6210\u539f\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u5f88\u7b80\u5355\uff0c\u628a\u6700\u77ed\u8def\u585e\u5230\u51fa\u70b9\u4e0a\u53bb\u5c31\u884c\u4e86\u3002\n\n\u679a\u4e3e\u4e2d\u8f6c\u70b9\uff0c\u6211\u4eec\u8981\u5c06\u5165\u8fb9\u5bf9\u5e94\u7684\u70b9\u8fde\u63a5\u5230\u51fa\u8fb9\u4e0a\u9762\u53bb\u3002\n\n\u6211\u4eec\u5c06\u5165\u8fb9\u548c\u51fa\u8fb9\u5728 $T$ \u4e0a\u7684\u70b9\u62c9\u51fa\u6765\u5efa\u4e00\u9897\u865a\u6811\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u5f00\u4e24\u4e2a\u5728\u9700\u8981\u8dd1\u6700\u77ed\u8def\u7684\u56fe\u4e0a\u7684\u8282\u70b9 $q$ \u548c $p$\u3002\u5b50\u6811\u5185\u7684\u5165\u8fb9\u8fde\u63a5 $q$\uff0c$p$ \u8fde\u63a5\u5b50\u6811\u5185\u7684\u51fa\u8fb9\u3002\n\n\u7136\u540e\u4ece\u4e00\u6761\u8fb9\u56de\u6eaf\u7684\u65f6\u5019\uff0c\u4ee4 $q$ \u8fde\u63a5 $p$ \u5373\u53ef\uff0c\u8fb9\u6743\u4e3a\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\u3002\u8981\u5408\u5e76 $q$ \u548c $p$ \u4e5f\u5f88\u7b80\u5355\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\u590d\u6742\u5ea6 $O(\\sum m\\log n)$\u3002\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#include<cctype>\ntypedef long long ll;\nconst int M=2e5+5;\nint T,n,m,k,ege,dfc,h[M],f[M],d[M],dfn[M],siz[M],son[M],top[M];ll ans[M];\nint tp,stk[M];int q[M],p[M];int len,t[M];int V[M];\nstruct Graph{\n\tint G,tot,ege,h[M*10],zkw[M*10<<2];ll d[M*10],ans[M*10];bool vis[M*10];\n\tstruct Edge{\n\t\tint v,w,nx;\n\t}e[M*30];\n\tinline int nnd(){\n\t\t++tot;h[tot]=d[tot]=ans[tot]=vis[tot]=0;return tot;\n\t}\n\tinline void Add(const int&u,const int&v,const int&w){\n\t\te[++ege]=(Edge){v,w,h[u]};h[u]=ege;\n\t}\n\tinline void Mdf(int u,const ll&V){\n\t\tfor(d[u]=V,u+=G;u>>=1;zkw[u]=zkw[u<<1|(d[zkw[u<<1|1]]<d[zkw[u<<1]])]);\n\t}\n\tinline void Dijkstra(){\n\t\tfor(G=1;G<=tot+1;G<<=1);for(int i=0;i<=tot;++i)d[zkw[i+G]=i]=1e18,vis[i]=false;\n\t\tfor(int u=G-1;u;--u)zkw[u]=zkw[u<<1|(d[zkw[u<<1|1]]<d[zkw[u<<1]])];Mdf(m+1,0);\n\t\twhile(zkw[1]){\n\t\t\tconst int u=zkw[1];ans[u]=d[u];Mdf(u,2e18);vis[u]=true;\n\t\t\tfor(int v,&E=h[u];E;E=e[E].nx)if(v=e[E].v,!vis[v]&&ans[u]+e[E].w<d[v])Mdf(v,ans[u]+e[E].w);\n\t\t}\n\t\tfor(int i=1;i<=tot;++i)h[i]=0;for(int i=1;i<=tot+G;++i)zkw[i]=0;\n\t\tfor(int i=1;i<=m;++i)if(ans[i]<::ans[V[i]])::ans[V[i]]=ans[i];\n\t\ttot=ege=0;\n\t}\n}G;\nstruct Edge{\n\tint v,nx;\n}e[M];\nstruct edge{\n\tint w,u,id;\n};std::vector<edge>in[M],out[M];\ninline void Add(const int&u,const int&v){\n\te[++ege]=(Edge){v,h[u]};h[u]=ege;\n}\ninline void DFS1(const int&u){\n\td[u]=d[f[u]]+1;siz[u]=1;\n\tfor(int v,E=h[u];E;E=e[E].nx)if((v=e[E].v)^f[u])f[v]=u,DFS1(v),siz[v]>siz[son[u]]&&(son[u]=v),siz[u]+=siz[v];\n}\ninline void DFS2(const int&u,const int&tp){\n\ttop[u]=tp;dfn[u]=++dfc;if(!son[u])return;DFS2(son[u],tp);\n\tfor(int E=h[u];E;E=e[E].nx)if(e[E].v^f[u]&&e[E].v^son[u])DFS2(e[E].v,e[E].v);\n}\ninline int LCA(int u,int v){\n\twhile(top[u]^top[v])d[top[u]]>d[top[v]]?u=f[top[u]]:v=f[top[v]];return d[u]>d[v]?v:u;\n}\ninline void Insert(const int&u){\n\tif(!tp)return void(stk[tp=1]=u);\n\tconst int&v=LCA(u,stk[tp]);while(tp>1&&d[v]<d[stk[tp-1]])Add(stk[tp-1],stk[tp]),--tp;\n\tif(stk[tp]^v)Add(v,stk[tp--]);if(v^stk[tp])stk[++tp]=v;if(u^stk[tp])stk[++tp]=u;\n}\ninline void Solve(const int&u){\n\tif(q[u]&&p[u])G.Add(q[u],p[u],d[u]);\n\tfor(int v,&E=h[u];E;E=e[E].nx){\n\t\tSolve(v=e[E].v);if(q[u]&&p[v])G.Add(q[u],p[v],d[u]);if(q[v]&&p[u])G.Add(q[v],p[u],d[u]);\n\t\tif(q[v])q[u]?G.Add(q[u],G.nnd(),0),G.Add(q[v],q[u]=G.tot,0),0:q[u]=q[v];\n\t\tif(p[v])p[u]?G.Add(G.nnd(),p[u],0),G.Add(p[u]=G.tot,p[v],0),0:p[u]=p[v];\n\t\tq[v]=p[v]=0;\n\t}\n}\ninline void work(const int&u){\n\tfor(edge&E:in[u])t[++len]=E.u;for(edge&E:out[u])t[++len]=E.u;\n\tstd::sort(t+1,t+len+1,[](const int&a,const int&b){return dfn[a]<dfn[b];});len=std::unique(t+1,t+len+1)-t-1;\n\tfor(edge&E:in[u])!q[E.u]&&(q[E.u]=G.nnd()),G.Add(E.id,q[E.u],0);\n\tfor(edge&E:out[u])!p[E.u]&&(p[E.u]=G.nnd()),G.Add(p[E.u],E.id,E.w);\n\tfor(int i=1;i<=len;++i)Insert(t[i]);while(tp>1)Add(stk[tp-1],stk[tp]),--tp;\n\tSolve(stk[tp]);q[stk[tp]]=p[stk[tp]]=0;len=tp=0;\n}\ninline int read(){\n\tint n(0);char s;while(!isdigit(s=getchar()));while(n=n*10+(s&15),isdigit(s=getchar()));return n;\n}\nsigned main(){\n\tT=read();d[0]=-1;\n\twhile(T--){\n\t\tn=read();m=read();k=read();G.tot=m;\n\t\tfor(int i=1;i<=n;++i)ans[i]=1e18;\n\t\tfor(int u,v,t,p,i=1;i<=m;++i){\n\t\t\tu=read();v=read();t=read();p=read();V[i]=v;\n\t\t\tin[v].push_back((edge){t,p,i});out[u].push_back((edge){t,p,i});\n\t\t}\n\t\tfor(int u,v,i=1;i<k;++i)u=read(),v=read(),read(),Add(u,v);DFS1(1);DFS2(1,1);for(int i=1;i<=k;++i)h[i]=0;\n\t\tG.nnd();for(edge&E:out[1])G.Add(G.tot,E.id,E.w);\n\t\tfor(int u=1;u<=n;++u)if(!in[u].empty()&&!out[u].empty())work(u);\n\t\tG.Dijkstra();for(int i=2;i<=n;++i)printf(\"%lld\\n\",ans[i]);\n\t\tfor(int i=1;i<=k;++i)h[i]=f[i]=d[i]=dfn[i]=siz[i]=son[i]=top[i]=0;\n\t\tfor(int i=1;i<=n;++i)ans[i]=0,std::vector<edge>().swap(in[i]),std::vector<edge>().swap(out[i]);\n\t\tfor(int i=1;i<=m;++i)V[i]=0;dfc=ege=0;\n\t}\n}\n```",
        "postTime": 1655380539,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6700\u77ed\u8def \u865a\u6811\u4e0aDP\u4f18\u5316\u5efa\u56fe+Dijkstra P3783\u9898\u89e3"
    }
]