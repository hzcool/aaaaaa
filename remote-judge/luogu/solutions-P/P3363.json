[
    {
        "content": "\u9898\u610f\u5927\u6982\u662f\u7ed9\u5b9a\u4e00\u68f5\u6811\u4ee5\u53ca $m$ \u6761\u8def\u5f84\uff0c\u7b2c $i$ \u6761\u8def\u5f84\u7684\u6743\u91cd\u4e3a $w_i$\uff1b\u8981\u6c42\u9009\u51fa\u6765\u4e00\u4e9b\u8def\u5f84\u4f7f\u5f97\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u88ab\u8986\u76d6\u4e86\u81f3\u5c11 $k$ \u6b21\uff0c\u4e14\u4f7f\u5f97\u8fd9\u4e9b\u8def\u5f84\u7684\u6743\u91cd\u6781\u5dee\u6700\u5c0f\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6700\u5c0f\u5316\u6781\u5dee\u7684\u9898\u6709\u4e00\u4e2a\u5dee\u4e0d\u591a\u7684\u5957\u8def\uff0c\u5c31\u662f\u5c06\u8def\u5f84\u6309\u7167\u6743\u91cd\u6392\u5e8f\u4e4b\u540e 2pointers\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7ed9\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9\u90fd\u7ef4\u62a4\u4e00\u4e2a\u503c\u8868\u793a\u5b83\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff1b\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8def\u5f84\u5c31\u628a\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u8986\u76d6\u6b21\u6570\u90fd\u52a0\u4e00\uff0c\u5220\u6389\u4e00\u6761\u8def\u5f84\u5c31\u628a\u8fd9\u4e9b\u70b9\u90fd\u51cf\u4e00\u3002\u5b58\u5728\u4e00\u4e2a\u70b9\u88ab\u8986\u76d6\u4e86\u81f3\u5c11 $k$ \u6b21\u5c31\u76f8\u5f53\u4e8e\u6240\u6709\u70b9\u7684\u6743\u503c\u4e2d\u7684\u6700\u5927\u503c $\\ge k$\u3002\n\n\u7528\u6811\u5256\u7ef4\u62a4\u94fe\u4e0a\u52a0\u548c\u5168\u5c40\u6700\u5927\u503c\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+m\\log^2n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline int read(){\n    int x=0,f=1;char c=getchar();\n    for(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n    for(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n    return x*f;\n}\n\nconst int MN=2e5+5;\nint n,m,k;\nvector<int>G[MN];\npair<int,pair<int,int> >tr[MN];\n\nint fa[MN],top[MN],hson[MN],dfn[MN],sz[MN],dep[MN];\n\nint dfs1(int u,int de){\n    sz[u]=1,dep[u]=de;\n    for(int v:G[u]){\n        if(v==fa[u])continue;\n        fa[v]=u,sz[u]+=dfs1(v,de+1);\n        if(sz[v]>sz[hson[u]])hson[u]=v;\n    }\n    return sz[u];\n}\n\nint tot=0;\nvoid dfs2(int u,int tp){\n    top[u]=tp,dfn[u]=++tot;\n    if(hson[u])dfs2(hson[u],tp);\n    for(int v:G[u]){\n        if(v!=fa[u]&&v!=hson[u])dfs2(v,v);\n    }\n}\n\n#define lson(o) (o<<1)\n#define rson(o) (o<<1|1)\n\nstruct SegTree{\n    int d[MN<<2],plz[MN<<2];\n    \n    inline void pushup(int o){\n        d[o]=max(d[lson(o)],d[rson(o)]);\n    }\n    \n    inline void clear(){\n        memset(d,0,sizeof(d));\n        memset(plz,0,sizeof(plz));\n    }\n    \n    inline void pushdown(int ql,int qr,int o){\n        if(plz[o]){\n            d[lson(o)]+=plz[o],d[rson(o)]+=plz[o];\n            plz[lson(o)]+=plz[o],plz[rson(o)]+=plz[o];\n            plz[o]=0;\n        }\n    }\n    \n    inline void modify(int l,int r,int k,int ql,int qr,int o){\n        if(l<=ql&&qr<=r){d[o]+=k,plz[o]+=k;return;}\n        int mid=(ql+qr)>>1;pushdown(ql,qr,o);\n        if(l<=mid)modify(l,r,k,ql,mid,lson(o));\n        if(r>mid)modify(l,r,k,mid+1,qr,rson(o));\n        pushup(o);\n    }\n    \n    inline int query(){\n        return d[1];\n    }\n}tree;\n\nbool chk(){\n    return tree.query()>=k;\n}\n\nvoid add(int u,int v,int w){\n    while(top[u]!=top[v]){\n        if(dep[top[u]]<dep[top[v]])swap(u,v);\n        tree.modify(dfn[top[u]],dfn[u],w,1,n,1);\n        u=fa[top[u]];\n    }\n    if(dep[u]>dep[v])swap(u,v);\n    tree.modify(dfn[u],dfn[v],w,1,n,1);\n}\n\nint dis(int u,int v){\n\tint res=0;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tres+=dfn[u]-dfn[top[u]]+1;\n\t\tu=fa[top[u]];\n\t}\n\tif(dep[u]>dep[v])swap(u,v);\n\treturn res+dfn[v]-dfn[u]+1;\n}\n\nconst int INF=2e9;\n\n#define fi first\n#define se second\n#define OK puts(\"OK\")\n\nsigned main(void){\n\t\n#ifndef ONLINE_JUDGE\n\tfreopen(\"in.in\",\"r\",stdin);\n#endif\t\t\n    \n    n=read(),m=read(),k=read();\n    for(int i=1;i<=n-1;i++){\n        int u=read(),v=read();\n        G[u].push_back(v),G[v].push_back(u);\n    }\n    \n    dfs1(1,1),dfs2(1,1),tree.clear(); \n    for(int i=1;i<=m;i++)tr[i].se.fi=read(),tr[i].se.se=read(),tr[i].fi=dis(tr[i].se.fi,tr[i].se.se);\n    \n    sort(tr+1,tr+m+1);\n    \n    int r=0,ans=INF;\n    for(int l=1;l<=m;l++){\n        while(!chk()){\n        \tr++;if(r>m){cout<<ans<<endl;return 0;}\n\t\t\tadd(tr[r].se.fi,tr[r].se.se,1);\n        }\n        if(!chk())break;\n        ans=min(ans,tr[r].fi-tr[l].fi);add(tr[l].se.fi,tr[l].se.se,-1);\n    }\n    \n    cout<<((ans==INF)?-1:ans)<<endl;\n\n    return 0;\n}\n```",
        "postTime": 1642424496,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "\u542c\u8bf4\u5154\u961f\u5728\u76f4\u64ad\u5ba1\u9898\u89e3/qq"
    },
    {
        "content": "## P3363 \u9898\u89e3\n~~\u4e3a\u5565\u5176\u4ed6\u4eba\u90fd\u7528\u7684ZKW\uff1f\u8fd9\u4e2a\u4e0d\u662f\u4e0d\u9700\u8981\u5361\u5e38\u5417~~\n\n### \u9898\u610f\uff1a\n\n\u5b9a\u4e49\u6811\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u7684\u6743\u4e3a\u5176\u5305\u542b\u7684\u70b9\u6570\uff0c\n\n\u4ece\u7ed9\u5b9a\u7684 $m$ \u6761\u8def\u5f84\u4e2d\u9009\u51fa\u7ecf\u8fc7\u540c\u4e00\u70b9\u7684 $k$ \u6761\uff0c\n\n\u6c42\u51fa\u8fd9 $k$ \u6761\u8def\u5f84\u7684\u6700\u5c0f\u6781\u5dee\u3002\n\n### \u89e3\u6790\uff1a\n\n\u5982\u679c\u66b4\u529b\u7684\u786e\u5b9a $k$ \u6761\u8def\u5f84\u7684\u9009\u53d6\u65b9\u6848\u592a\u8fc7\u7b28\u91cd\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u8f6c\u5316\u9898\u610f\u5e76\u627e\u5230\u4e00\u4e2a\u66f4\u4f18\u7684\u529e\u6cd5\u3002\n\n\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u53ea\u9700\u8981\u786e\u5b9a\u8fd9 $k$ \u6761\u8def\u5f84\u4e2d\u6743\u6700\u5927\u7684\u4ee5\u53ca\u6700\u5c0f\u7684\u4e24\u6761\uff0c\u518d\u5224\u65ad\u6240\u6709\u6743\u503c\u5904\u4e8e\u8fd9\u4e24\u6761\u7684\u6743\u4e4b\u95f4\u7684\u8def\u5f84\u662f\u5426\u7ecf\u8fc7\u4e86\u67d0\u4e00\u4e2a\u70b9\u8d85\u8fc7 $k$ \u6b21\uff0c\u56e0\u4e3a\u786e\u5b9a\u4e86\u6743\u6700\u5927\u7684\u4ee5\u53ca\u6700\u5c0f\uff0c\u5c31\u7b49\u4ef7\u4e8e\u786e\u5b9a\u4e86\u6781\u5dee\u7684\u5927\u5c0f\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u8def\u5f84\u7684\u6743\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u5347\u5e8f\uff0c\u5e76\u679a\u4e3e\u4e24\u4e2a\u7aef\u70b9 $(l,r)$ ,\u6b64\u65f6\u7f16\u53f7\u5c5e\u4e8e $(l,r)$ \u4e4b\u95f4\u7684\u8def\u5f84\u90fd\u53ef\u4ee5\u8fdb\u884c\u4e0d\u4ed8\u4efb\u4f55\u4ee3\u4ef7\u5730\u9009\u62e9\uff0c\u4e8e\u662f\u6211\u4eec\u7528\u6811\u5256\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8def\u5f84\u7684\u8986\u76d6\u6b21\u6570\u4ee5\u53ca\u8986\u76d6\u6b21\u6570\u7684\u6700\u503c\uff0c\u5373\u53ef\u5728 $O(n^2log^2n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u662f\u4f1a\u7206\uff0c\u800c\u4e14\u76f4\u89c9\u544a\u8bc9\u6211\u4eec\uff0c\u4e0d\u5fc5\u8981\u4e14\u7e41\u7410\u7684\u679a\u4e3e $(l,r)$ \u662f\u6709\u4f18\u5316\u7a7a\u95f4\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u89c2\u5bdf\u4e0e\u601d\u8003\uff1a\n\n\u7b26\u5408\"\u7ecf\u8fc7\u4e86\u67d0\u4e00\u4e2a\u70b9\u8d85\u8fc7 $k$ \u6b21\"\u7684\u7f16\u53f7\u533a\u95f4 $(l,r)$ \u662f\u5177\u6709**\u5355\u8c03\u6027**\u7684\u3002\n\n\u5373\uff0c\u968f\u7740\u533a\u95f4\u7684\u6269\u5c55\uff0c\u8986\u76d6\u6b21\u6570\u6700\u591a\u7684\u70b9\u7684\u8986\u76d6\u6b21\u6570\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u800c\u539f\u5148\u7684\u9650\u5236\u6761\u4ef6\u4e5f**\u4e0d\u4f1a**\u56e0\u4e3a\u533a\u95f4\u7684\u6269\u5c55\u800c\u4ece\"\u6ee1\u8db3\"\u53d8\u6210\"\u4e0d\u6ee1\u8db3\"\u3002\n\n\u65e2\u7136\u6709\u4e86\u533a\u95f4\u7684\u5355\u8c03\u6027\uff0c\u90a3\u4e00\u4e2a\u5e38\u7528\u7684\u5957\u8def\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\uff1a\u53cc\u6307\u9488\uff01\n\n\u6211\u4eec\u8ba1\u4e24\u4e2a\u6307\u9488 $l,r$ \uff0c\u4ee3\u8868\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u4e3a $l$ \u65f6\uff0c\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u6700\u8fd1\u53f3\u7aef\u70b9\u4e3a $r$ ,\u90a3\u4e48\u968f\u7740 $l$ \u7684\u53f3\u79fb\uff0c $r$ \u4e5f\u4f1a\u4e00\u6b65\u6b65\u53f3\u79fb\uff0c\u800c\u975e\u5de6\u79fb\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u4fbf\u7edf\u8ba1\u7b54\u6848\u4e86\u3002\n\n\u56e0\u4e3a\u6307\u9488 $l,r$ \u6700\u591a\u79fb\u52a8 $O(n)$ \u6b21\uff0c\u800c\u6bcf\u4e00\u6b21\u79fb\u52a8\u4e5f\u4ee3\u8868\u7740\u4e00\u6b21\u6811\u5256\u7ebf\u6bb5\u6811\u7684\u8c03\u7528\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u5c31\u662f $O(nlog^2n)$ \u7684\u3002\n\n**CODE\uff1a**\n\n```\nconst int N(1e5+10);\n\nint cnt;\nint tot;\nint n,m,k;\n\nint f[N];\nint id[N];\nint rk[N];\nint dep[N];\nint top[N];\nint son[N];\nint siz[N];\nint head[N];\n\nstruct Edge{int to,nxt;}e[N<<1];\nstruct Nd{int u,v,w;}qr[N<<1];\n\ninline bool cmp(Nd u,Nd v){return u.w<v.w;}\n\ninline void add(int u,int v){\n\te[++cnt].to=v,e[cnt].nxt=head[u],head[u]=cnt;\n}\n\ninline void dfs1(int u,int fa){\n\tdep[u]=dep[f[u]=fa]+(siz[u]=1);\n\tedg(i,v,u)if(v^fa){\n\t\tdfs1(v,u),siz[u]+=siz[v];\n\t\tif(siz[son[u]]<siz[v])son[u]=v;\n\t}\n}\n\ninline void dfs2(int u,int tp){\n\ttop[u]=tp,rk[id[u]=(++tot)]=u;\n\tif(!son[u]){return;} dfs2(son[u],tp);\n\tedg(i,v,u)if(v^f[u]&&v^son[u])dfs2(v,v);\n}\n\nstruct Tree{\n\tint l,r;\n\tint lzy,val;\n}t[N<<3];\n\n#define mid ((l+r)>>1)\n#define lsn p<<1,l,mid\n#define rsn p<<1|1,mid+1,r\n\ninline void cover(int p,int v){t[p].val+=v,t[p].lzy+=v;}\n\ninline void push_down(int p){\n\tif(!t[p].lzy)return;\n\trep(P,p<<1,p<<1|1)cover(P,t[p].lzy);\n\tt[p].lzy=0;\n}\n\ninline void build(int p,int l,int r){\n\tt[p].l=l,t[p].r=r;\n\tif(l^r)build(lsn),build(rsn);\n}\n\ninline void upd(int p,int l,int r,int ql,int qr,int vl){\n\tif(ql<=l&&qr>=r)return cover(p,vl);\n\tpush_down(p);\n\tif(ql<=mid)upd(lsn,ql,qr,vl);\n\tif(qr>mid) upd(rsn,ql,qr,vl);\n\tt[p].val=max(t[p<<1].val,t[p<<1|1].val);\n}\n\ninline int qry(int p,int l,int r,int ql,int qr){\n\tif(ql<=l&&qr>=r)return t[p].val;\n\tpush_down(p); int res=0;\n\tif(ql<=mid)ckmax(res,qry(lsn,ql,qr));\n\tif(qr>mid) ckmax(res,qry(rsn,ql,qr));\n\treturn res;\n}\n\ninline int lca(int u,int v){\n\twhile(top[u]^top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]\n\t\t){swap(u,v);} u=f[top[u]];\n\t} if(dep[u]<dep[v]){swap(u,v);} return v;\n}\n\ninline void utree(int u,int v,int w){\n\twhile(top[u]^top[v]){\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\tupd(1,1,n,id[top[u]],id[u],w),u=f[top[u]];\n\t} if(dep[u]<dep[v])swap(u,v);\n\tupd(1,1,n,id[v],id[u],w);\n}\n\nint main(){\n\tn=read(),m=read(),k=read();\n\trep(i,2,n){\n\t\tint u=read(),v=read();\n\t\tadd(u,v),add(v,u);\n\t} dfs1(1,0),dfs2(1,1),build(1,1,n);\n\trep(i,1,m){\n\t\tint s=read(),t=read();\n\t\tint w=dep[s]+dep[t]-(dep[lca(s,t)]<<1)+1;\n\t\tqr[i].u=s,qr[i].v=t,qr[i].w=w;\n\t}\n\tsort(qr+1,qr+m+1,cmp);\n\tint ans=1e9;\n\tfor(int l=1,r=0;l<=m;){\n\t\twhile(r<m){\n\t\t\tint mx=qry(1,1,n,1,n);\n\t\t\tif(mx>=k)break;\n\t\t\tint u=qr[++r].u,v=qr[r].v;\n\t\t\tutree(u,v,1);\n\t\t} int mx=qry(1,1,n,1,n);\n\t\tif(mx<k)break;\n\t\tckmin(ans,qr[r].w-qr[l].w);\n\t\tutree(qr[l].u,qr[l].v,-1),l++;\n\t} cout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1629983584,
        "uid": 100091,
        "name": "GaryH",
        "ccfLevel": 6,
        "title": "P3363 \u9898\u89e3"
    },
    {
        "content": "\u5f00\u4e86O2\u540e\u7ec8\u4e8e\u62ff\u5230rank1(\u611f\u53f9\u6709\u6bd2\u7684\u540c\u65f6orz \u4e00UNowen\u4e00)\u3002\n\n\u5982\u9898\u89e3\u6240\u8bf4\uff0c\u8fd9\u9898\u5c31\u662f\u201c\u533a\u95f4\u201d\u7684\u6811\u4e0a\u7248\u3002\u76f8\u4fe1\u505a\u4e86\u201c\u533a\u95f4\u201d\u540e\u7684\u4eba\u90fd\u4f1a\u505a\u8fd9\u9898\u3002\n\n\u4f18\u5316(\u5361\u5e38):\n\n1 zkw\n2 \u5bf9\u6bcf\u4e2a\u94fe\u5f00\u4e00\u4e2azkw,\u4e0d\u8981\u7528vector,\u7528int \\*a\uff0c\u5f00\u65f6a = new int[n];\n\n\u518d\u5f00\u4e00\u4e2a\u5927zkw\u7ef4\u62a4\u6240\u6709\u94fe\u6700\u5927\u503c\u7684\u6700\u5927\u503c\n\n3 (\u77ed\u5c0f\u7684\u5730\u65b9)\u7528define\u4ee3\u66ffinline\n\n\n```cpp\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define chmin(x,y) if (x>y) x=y;\n#define MAX(x,y) (x>y?x:y) \n#define F(x) (x>>1) \n#define S(x) (x^1) \n#define D(x) (x&1) \n\nint n,m,k,i,x,y;\nint f,sz,deep,son,top;\nint delta;\n#define max_n (50005)\n#define max_m (10005)\n\nstruct ZKW\n{\n    int max[max_n*3]; int d,n;\n    inline void init()\n    {\n        for (d=1;d<n;d<<=1);d-=1;\n    }\n    void change(int l,int w)\n    {\n        l+=d;max[l]=w;\n        while (F(l))\n        {\n            max[F(l)]=MAX(max[l],max[S(l)]);l=F(l);\n        }\n    }\n};\nZKW z;\n\nstruct edge\n{\n    int to,next;\n};\nedge l[max_n*2];int e;\nstruct node\n{\n    int head,f,son,sz,deep,top;\n    int w;\n    int d,n;//n\u5148\u5b58\u6811\u94fe\u957f\u5ea6\uff0c\u540e\u5b58\u6240\u5728\u603bZKW\u7684\u7f16\u53f7 \n    int *a,*max;//\u4f5c\u52a8\u6001\u6570\u7ec4\n    inline void init()\n    {\n        for (d=1;d<n;d<<=1);d-=1;\n        n=(d<<1)+5;\n        a = new int[n];   memset(&a[1],0,(n-1)<<2);\n        max = new int[n]; memset(&max[1],0,(n-1)<<2);\n    }\n   #define A(x) {a[x]+=delta;max[x]+=delta;}\n    void add(int l,int r)//\u7ed9[l,r]+delta\n    {\n        l+=d;r+=d;\n        A(l);\n        if (l!=r)\n        {\n            A(r);\n            while (S(l)!=r)\n            {\n                if (!D(l)) A(S(l));\n                if (D(r)) A(S(r));\n                max[F(l)]=MAX(max[l],max[S(l)])+a[F(l)];l=F(l);\n                max[F(r)]=MAX(max[r],max[S(r)])+a[F(r)];r=F(r);\n            }\n        }\n        while (F(l))\n        {\n            max[F(l)]=MAX(max[l],max[S(l)])+a[F(l)];l=F(l);\n        }\n        z.change(n,max[1]);\n    }\n    void add_1(int l)\n    {\n        l+=d;\n        A(l);\n        while (F(l))\n        {\n            if (D(l)) A(S(l));\n            max[F(l)]=MAX(max[l],max[S(l)])+a[F(l)];l=F(l);\n        }\n        z.change(n,max[1]);\n    }\n};\nnode T[max_n];\n\n#define add_e(x,y) l[++e].to=y;l[e].next=T[x].head;T[x].head=e;\n\nint q[max_n],head,tail;\nvoid bfs1()\n{\n    q[1]=tail=1;\n    for (head=1;head<=tail;++head)\n    {\n        x=q[head];T[x].sz=1;\n        f=T[x].f;deep=T[x].deep+1;\n        for (i=T[x].head;i;i=l[i].next)\n        if ((y=l[i].to)!=f)\n        {\n            T[y].f=x;\n            T[y].deep=deep;\n            q[++tail]=y;\n        }\n    }\n    for (;tail;--tail)\n    {\n        x=q[tail];f=T[x].f;sz=T[x].sz;\n        T[f].sz+=sz;\n        if (sz>=T[T[f].son].sz) T[f].son=x;\n    }\n}\nvoid bfs2()\n{\n    tail=q[1]=T[1].top=T[1].w=1;\n    while (tail)\n    {\n        x=q[tail--];\n        top=T[x].top;\n        ++T[top].n;\n        \n        son=T[x].son;\n     if (son)\n     {\n        f=T[x].f;\n        for (i=T[x].head;i;i=l[i].next)\n        if ((y=l[i].to)!=f)\n        if (y!=son) { q[++tail]=y;T[y].top=y;T[y].w=1; }\n        \n        q[++tail]=son;T[son].top=top;T[son].w=T[x].w+1;\n     }\n    }\n    \n    for (i=1;i<=n;++i)\n    if (T[i].n)\n    {\n        T[i].init();\n        T[i].n=++z.n;\n    }\n    z.init();\n}\n\nint f1,f2,d1,d2;\nint lca(int x1,int x2)\n{\n    f1=T[x1].top;d1=T[f1].deep;\n    f2=T[x2].top;d2=T[f2].deep;\n    while (f1!=f2)\n    if (d1>d2)\n    {\n        x1=T[f1].f;f1=T[x1].top;d1=T[f1].deep;\n    }\n    else\n    {\n        x2=T[f2].f;f2=T[x2].top;d2=T[f2].deep;\n    }\n    if (T[x1].deep<T[x2].deep) return x1;\n    else return x2;  \n}\nvoid lca_add(int x1,int x2)\n{\n    f1=T[x1].top;d1=T[f1].deep;\n    f2=T[x2].top;d2=T[f2].deep;\n    while (f1!=f2)\n    if (d1>d2)\n    {\n        T[f1].add_1(T[x1].w);\n        x1=T[f1].f;f1=T[x1].top;d1=T[f1].deep;\n    }\n    else\n    {\n        T[f2].add_1(T[x2].w);\n        x2=T[f2].f;f2=T[x2].top;d2=T[f2].deep;\n    }\n    if (T[x1].w<T[x2].w) T[f1].add(T[x1].w,T[x2].w);\n    else T[f1].add(T[x2].w,T[x1].w);\n}\n\nstruct path\n{\n    int x,y,len;\n};\npath p[max_m];\nbool len_xiao(const path &x,const path &y)\n{\n    return x.len<y.len;\n}\n\n#define _top 10000000\nchar ch[_top];int _i;\nvoid read(int &x)\n{\n    while (ch[_i]<48) ++_i;\n    for (x=ch[_i]-48;ch[++_i]>=48;) \n     x=(x<<1)+(x<<3)+ch[_i]-48;\n}\n\nint main()\n{ //freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n   fread(ch,1,_top,stdin);\n    read(n);read(m);read(k);\n    for (i=1;i<=n;++i) T[i].head=T[i].son=T[i].n=0;\n    for (i=1;i<n;++i)\n    {\n        read(x);read(y);\n        add_e(x,y);add_e(y,x);\n    }\n    \n    bfs1();\n    bfs2();    \n    \n    for (i=1;i<=m;++i)\n    {\n        read(x);read(y);\n        f=lca(x,y);\n        p[i].x=x;p[i].y=y;p[i].len=T[x].deep+T[y].deep-(T[f].deep<<1);\n    }\n    sort(p+1,p+m+1,len_xiao);\n    \n    int l=0,r=1,ans=1<<30;\n    delta=1;\n    lca_add(p[1].x,p[1].y);\n    while (r<m)\n    {\n        delta=1;\n      while (z.max[1]<k&&r<m) \n      {\n          ++r;lca_add(p[r].x,p[r].y);\n      }\n      if (z.max[1]<k) break;\n       delta=-1;\n      while (z.max[1]>=k) \n      {\n        ++l;lca_add(p[l].x,p[l].y);\n      }\n      chmin(ans,p[r].len-p[l].len);\n    }\n    \n    if (ans==1<<30) printf(\"%d\",-1);\n    else printf(\"%d\",ans);\n}\n```",
        "postTime": 1478784555,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3363 \u3010Cool loves jiaoyi\u3011"
    },
    {
        "content": "QAQ\u4e00\u5f00\u59cb\u770b\u9519\u9898\u4e86\uff0c\u4ee5\u4e3a\u8981\u90fd\u6709\u7684\u4ea4\u6613\u5bf9\u8c61\u662fK\uff0c\u9a6c\u4e0alca+\u500d\u589e\uff0c\u540e\u6765\u4e00\u60f3\uff0c\u90a3\u4ed6\u8981\u4ea4\u6613\u51e0\u573a\u5462\uff1f\u56de\u53bb\u4ed4\u7ec6\u5ba1\u9898\uff0cWTF\uff01\uff01\uff01\u90fd\u6709\u7684\u4ea4\u6613\u5bf9\u8c61\u6ca1\u6709\u7ed9\u51fa\uff01\uff01\uff01\u4e00\u770b\u6807\u7b7e\uff1azkw\u7ebf\u6bb5\u6811\uff01\uff01\uff01100+\u884c\u4ee3\u7801\u767d\u5199\u4e86\uff1f\u4e3a\u4e86\u849f\u84bb\u7684\u5c0a\u4e25\uff08\u5176\u5b9e\u662f\u61d2\uff09\uff0c\u4e0d\u6002\uff01\u4e8e\u662f\u5f00\u59cb\u4e71\u641e\u3002\u3002\u3002\u3002\u3002\n\n------------------------------------------------------------------\u4ee5\u4e0a\u4e3a\u9898\u5916\u8bdd--------------------------------------------------------------\n\nlca\u500d\u589e+\u66b4\u529b\u4e71\u641e\u3002\u3002\u3002\n\n\u5148\u7528lca\u548c\u500d\u589e\u5904\u7406\u51fa\u6bcf\u6b21\u4ea4\u6613\u7684\u8282\u70b9\u603b\u6570\uff0c\u5373\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff1b\n\n\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u90fd\u8981\u4ea4\u6613\u7684\u795e\u79d8\u5bf9\u8c61x\uff0c\u90a3\u5982\u4f55\u9a8c\u8bc1\u6bcf\u6b21\u4ea4\u6613\uff08\u8bbe\u4e3as->e\uff09\u662f\u5426\u5305\u542bx\u5462\uff1f\n\n\u5206\u7c7b\u8ba8\u8bba\u5305\u542b\u7684\u60c5\u51b5\uff1a\n\n1\uff0ce==x || s==x\uff1b\n2\uff0c\u4e00\u70b9\u5728x\u7684\u5b50\u6811\u4e0a\uff0c\u53e6\u4e00\u70b9\u4e0d\u5728\uff1b\n\n3\uff0c\u4e24\u70b9\u5747\u5728x\u7684\u5b50\u6811\u4e0a && lca[e,s]==x\uff1b\n\n\u6ee1\u8db3\u6761\u4ef61 || \u6761\u4ef62 || \u6761\u4ef63\uff0c\u5219\u6b64\u4ea4\u6613\u5305\u542bx\u3002\nlca\u5df2\u7ecf\u6c42\u51fa\uff0c\u6545\u5224\u65ad\u6761\u4ef61\u548c3\u90fd\u5f88\u7b80\u5355\u3002\u5bf9\u4e8e\u6761\u4ef62\uff0c\u6211\u4eec\u5c06x\u7684\u5b50\u6811\u67d3\u8272\u5373\u53ef\u3002\n\n\u6c42\u51fa\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u4ea4\u6613\uff0c\u7528\u5176\u4e2d\u6700\u5927\u8282\u70b9\u6570\u51cf\u53bb\u6700\u5c0f\u8282\u70b9\u6570\u5373\u662f\u7b54\u6848\u3002\n\n\u597d\uff0c\u90a3\u5982\u4f55\u627e\u51fax\u5462\uff1f\n\n\u8003\u8651\u67d0\u70b9\u7684\u4ea4\u6613\u6570\uff0c\u5373\u88ab\u8def\u5f84\u8986\u76d6\u7684\u6b21\u6570>=k\u65f6\uff0c\u8be5\u70b9\u53ef\u80fd\u662f\u90a3\u795e\u79d8\u5bf9\u8c61\uff0c\u90a3\u4e48\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u7edf\u8ba1\u5b83\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u66b4\u529b\uff1f\uff08n\\*m\u592a\u6162\uff09\u6811\u94fe\u5256\u5206\uff1f\uff08m\\*logn\u6216n\\*logm\uff09\u592a\u590d\u6742\u96be\u8c03\uff0c\u6211\u91c7\u7528\u7684\u662f\u5dee\u5206\u6570\u7ec4sum\uff0csum[e]++\uff0csum[s]++\uff0csum[lca(s,e)]-=2\uff1b\u4f46\u662flca(s,e)\u8fd9\u4e2a\u70b9\u4f1a\u5c11\u8ba1\u4e00\u6b21\uff0c\u7528\u6570\u7ec4f\u7edf\u8ba1\uff0csum[i]+sum[son[j]]\uff08son[j]\u662fi\u7684\u5b50\u8282\u70b9\uff09\u518d\u52a0\u4e0af[i]\u5c31\u662f\u8282\u70b9i\u88ab\u8986\u76d6\u6b21\u6570\uff0c>=k\u5219\u52a0\u5165s\u6570\u7ec4\uff0c\u6700\u540e\u66b4\u529b\u7edf\u8ba1\u7b54\u6848\u3002\u636e\u6d4b\u8bd5\u6700\u5927\u7684\u6d4b\u8bd5\u70b9\u6709\u8fd15000\u4e2a\u70b9\u7b26\u5408\u6761\u4ef6\uff0c\u590d\u6742\u5ea6\uff085000\\*m\uff09\uff0c85\u5206T3\u4e2a\u70b9\uff08\u63a8\u6d4bm\u5e94\u572810\u4e07\u5de6\u53f3\uff09\u80bf\u529e\u3002\u5f00\u59cb\u4e71\u641e\uff0c\u5224\u65ad\u6700\u540e\u8ba1\u7b97\u6b21\u6570>30000000\u5c31break\u8f93\u51fa\u7b54\u6848\uff0c\u5982\u6b64\u6c34\u8fc7\u7b2c14,16,17\u70b9\u3002\u3002\u3002\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=400001,lst=20;//\u4e0d\u77e5\u9053\u6570\u636e\u8303\u56f4\u8bf6 \nint n,m,k,ans=2100000000;\nint hd[N],nxt[N<<1],to[N<<1],cnt=0;//\u5b58\u56fe \nint dep[N],fo[N][lst+1];//dep[i]\u8868\u793ai\u7684\u6df1\u5ea6\uff0cfo[i][j]\u8868\u793ai\u7684\u7b2c2^j\u4e2a\u7956\u5148 \nint f[N],dis[N],sum[N];//f[i]\u8868\u793ai\u662f\u5426\u88ab\u67d3\u8272\uff0cdis[i]\u5373\u662fi\u5230\u6839\u7684\u94fe\u4e0a\u7684\u8282\u70b9\u6570\uff0csum[i]\u662f\u5dee\u5206\u6570\u7ec4\uff0c\u7edf\u8ba1i\u7684\u4ea4\u6613\u6b21\u6570 \nstruct jiaoyi//\u6bcf\u6b21\u4ea4\u6613 \n{\n    int s,e,dis,lca;\n}p[N];\nint s[N],tot=0;//\u53ef\u9009\u7684\u70b9 \nint q[N],l;//\u53ef\u9009\u7684\u4ea4\u6613 \ninline void Swap(int &x,int &y){int t=x;x=y,y=t;}\ninline int cmp(jiaoyi x,jiaoyi y){return x.dis<y.dis;}\n/*\u8bfb\u4f18*/inline int rd(void){int res=0;char c=getchar();while(c>'9' || c<'0') c=getchar();while(c<='9' && c>='0') res=res*10+c-'0',c=getchar();return res;}\ninline void init(int x,int y)//\u5b58\u56fe \n{\n    cnt++;\n    nxt[cnt]=hd[x];\n    hd[x]=cnt;\n    to[cnt]=y;\n}\ninline void dfs(int x)//\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u7236\u8282\u70b9\uff0c\u6df1\u5ea6 \n{\n    dep[x]=dep[fo[x][0]]+1;\n    for(int i=hd[x];i!=0;i=nxt[i])\n    {\n        int u=to[i];\n        if(u==fo[x][0]) continue;\n        fo[u][0]=x;\n        dis[u]=dis[x]+1;\n        dfs(u);\n    }\n}\ninline void mark(int x)//\u67d3\u8272 \n{\n    f[x]=1;\n    for(int i=hd[x];i!=0;i=nxt[i])\n    {\n        int u=to[i];\n        if(u==fo[x][0]) continue;\n        mark(u);\n    }\n}\ninline void clean(int x)//\u6ce8\u610f\u8981\u6e05\u7a7a\uff0cmemset\u4f1a\u6162 \n{\n    f[x]=0;\n    for(int i=hd[x];i!=0;i=nxt[i])\n    {\n        int u=to[i];\n        if(u==fo[x][0]) continue;\n        clean(u);\n    }\n}\ninline int LCA(int x,int y)\n{\n    if(dep[x]<dep[y]) Swap(x,y);\n    for(int i=lst;i>=0;i--)\n    {\n        if(dep[fo[x][i]]>=dep[y]) x=fo[x][i];\n        if(dep[x]==dep[y]) break;\n    }\n    if(x==y) return x;\n    for(int i=lst;i>=0;i--)\n    {\n        if(fo[x][i]!=fo[y][i])\n        {\n            x=fo[x][i];\n            y=fo[y][i];\n        }\n    }\n    return x=fo[x][0];\n}\ninline void get(int x)//\u6bcf\u4e2a\u70b9\u7684\u4ea4\u6613\u6b21\u6570 \n{\n    for(int i=hd[x];i!=0;i=nxt[i])\n    {\n        int u=to[i];\n        if(u==fo[x][0]) continue;\n        get(u);\n        sum[x]+=sum[u];\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);\n    for(int i=1;i<n;i++)\n    {\n        int x,y;\n        x=rd();\n        y=rd();\n        init(x,y);\n        init(y,x);\n    }\n    dis[1]=1;\n    dfs(1);\n    for(int j=1;j<=lst;j++)//\u500d\u589e\u5904\u7406\u7956\u5148 \n    {\n        for(int i=1;i<=n;i++)\n        {\n            fo[i][j]=fo[fo[i][j-1]][j-1];\n        }\n    }\n    for(int i=1;i<=m;i++)\n    {\n        p[i].e=rd();\n        p[i].s=rd();\n        int lca=LCA(p[i].s,p[i].e);\n        int Dis=dis[p[i].e]+dis[p[i].s]-2*dis[lca]+1;\n        p[i].dis=Dis;\n        p[i].lca=lca;\n        sum[p[i].s]++;//\u5dee\u5206 \n        sum[p[i].e]++;\n        sum[lca]-=2; \n        f[lca]++; \n    }\n    sort(p+1,p+1+m,cmp);\n    get(1);\n    for(int i=1;i<=n;i++)\n    {\n        sum[i]+=f[i];//\u52a0\u4e0alca\u88ab\u591a\u51cf\u7684 \n        if(sum[i]>=k) s[++tot]=i;\n    }\n    if(tot==0)//\u5176\u5b9e\u6570\u636e\u90fd\u6709\u89e3\u3002\u3002\u3002\u3002\u3002\u3002 \n    {\n        printf(\"-1\");\n        return 0;\n    }\n    memset(f,0,sizeof(f));\n    sort(s+1,s+1+tot);\n    for(int i=tot;i>=1;i--)\n    {\n        mark(s[i]);\n        l=0;\n        if((tot-i)*m>30000000) break;//\u9632\u6b62\u8d85\u65f6 \n        for(int j=1;j<=m;j++)\n        {\n            if(f[p[j].e]+f[p[j].s]==1 || p[j].e==s[i] || p[j].s==s[i] || p[j].lca==s[i])\n            {\n                q[++l]=p[j].dis;\n                if(l>=k)\n                {\n                    if(q[l]-q[l-k+1]<ans) ans=q[l]-q[l-k+1];//\u56e0\u4e3a\u6392\u8fc7\u5e8f\uff0c\u6700\u5c0f\u5316\u8fd9 k \u573a\u4ea4\u6613\u4e2d\u4ee3\u4ef7\u4e4b\u5dee\u7684\u6700\u5927\u503c\u5c31\u662f\u7b2cl-k+1\u573a\u4e0e\u7b2cl\u573a\u4e4b\u5dee \n                }\n            }\n        }\n        clean(s[i]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n//\u5982\u679c\u90a3\u4f4ddalao\u6709\u975e\u4e71\u641e\u7684\u4f18\u5316\uff0c\u6b22\u8fce\u4e0e\u6211\u4ea4\u6d41*\u3002*\u3002*\u3002*\n```",
        "postTime": 1504500934,
        "uid": 24337,
        "name": "zhangchengkai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3363 \u3010Cool loves jiaoyi\u3011"
    }
]