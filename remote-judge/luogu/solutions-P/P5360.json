[
    {
        "content": "\u8fd9\u9898\u5728\u573a\u4e0a\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u8fc7\u611f\u89c9\u975e\u5e38\u8499\u853d\u8fd9\u9898\u4e0d\u662f\u9001\u5206\u5417\uff08\u9003\uff09\n\n\u542cClaris\u8bf4\u539f\u672c\u8fd9\u4e2a\u9898\u6253\u7b97\u662f\u6865\u8ba1\u6570\u7136\u540e\u8981\u7c7b\u4f3c\u865a\u4ed9\u4eba\u638c\uff08\u745f\u745f\u53d1\u6296\uff09\n\n\u603b\u4e4b\u8003\u8651\u6bcf\u6b21\u90fd\u662f\u5408\u5e76\u4e00\u4e2a\u524d\u7f00\u548c\u540e\u7f00\uff0c\u8003\u8651\u7c7b\u4f3c\u4e8eLCT\u7ef4\u62a4MST\u7684\u505a\u6cd5\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u5f62\u6210\u73af\u4e86\u7684\u8bdd\u5c31\u628a\u73af\u4e0a\u6700\u5927\u8fb9\u5220\u6389\u3002\u7136\u540e\u6ce8\u610f\u4f60\u6bcf\u6b21\u53ea\u4f1a\u52a0\u5f62\u5982$(m,i)-(1,i)$\uff08\u65b9\u4fbf\u8d77\u89c1\u5217\u5728\u524d\uff09\u7684\u8fb9\uff0c\u56e0\u6b64\u4ee5\u524d\u7f00\u4e3a\u4f8b\uff0c\u53ea\u6709\u90a3\u4e9b\u662f\u7b2c\u4e00\u5217\u70b9\u67d0\u4e24\u70b9\u5728\u8fd9\u4e2a\u524d\u7f00\u6c42\u51fa\u7684MST\u4e0a\u7684\u73af\u7684\u6743\u503c\u6700\u5927\u8fb9\u53ef\u80fd\u88ab\u5220\u6389\uff0c\u53cd\u8fc7\u6765\u5c31\u662f\u5176\u4f59\u4e00\u5b9a\u4f1a\u88ab\u52a0\u5165\u3002\u56e0\u6b64\u53ea\u628a\u8fd9\u4e9b\u53ef\u80fd\u88ab\u5220\u6389\u7684\u8fb9\u548c\u65b0\u52a0\u7684$(m,i)-(1,i)$\u8fb9\u62ff\u51fa\u6765\u505akruskal\u5373\u53ef\u3002\n\n\u7136\u540e\u89c2\u5bdf\u5230\u770b\u4e24\u4e24\u70b9MST\u73af\u4e0a\u6700\u5927\u8fb9\u6709\u54ea\u4e9b\uff08\u4e5f\u5c31\u662f\u770b\u4e24\u4e24\u70b9\u4f55\u65f6\u8054\u901a\uff09\u672c\u8d28\u4e0a\u5c31\u662f\u5bf9\u7740kruskal\u91cd\u6784\u6811\u6c42\u865a\u6811\uff0c\u628a\u865a\u6811\u5bf9\u5e94\u7684\u70b9\uff08\u8fb9\uff09\u62ff\u51fa\u6765\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u600e\u4e48\u7ef4\u62a4\uff0c\u4ee5\u524d\u7f00$i$\u4e3a\u4f8b\uff0c\u4f60\u53ea\u9700\u8981\u7ef4\u62a4\u6240\u6709\u5f62\u5982$(1,j),(i,j)$\u8fd9\u4e9b\u70b9\u4e24\u4e24MST\u73af\u4e0a\u6700\u5927\u8fb9\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u52a0\u5165\u7b2ci+1\u5217\u7684\u70b9\u4e86\u3002\n\n\u7531\u4e8e\u573a\u4e0a\u6bd4\u8f83\u8822\uff0c\u6240\u4ee5\u6211\u771f\u7684\u628akruskal\u91cd\u6784\u6811\u5199\u4e86\u51fa\u6765\u7136\u540e\u5199\u4e86\u4e2aLCA\u7136\u540e\u5199\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u865a\u6811\u7684\u4e1c\u897f\u6c42\u90a3\u4e9b\u8fb9\uff08\u6454\uff09\n\n\u5b9e\u73b0\u826f\u597d\u53ef\u4ee5\u505a\u5230$O((nm+nq)\\alpha(n))$\uff08\u6392\u5e8f\u7528\u677e\u5f0f\u57fa\u6392\uff0c\u865a\u6811\u7a0d\u5fae\u5199\u597d\u4e00\u70b9\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u4ee3\u66ff\uff09\uff0c\u4f46\u662f\u573a\u4e0a\u592a\u61d2\u4e86\u6240\u4ee5\u76f4\u63a5\u5199\u4e86$O((nm+nq)\\log n)$\n\u573a\u540e\u91cd\u65b0\u5199\u7684\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define Rep(i,v) rep(i,0,(int)v.size()-1)\n#define lint long long\n#define ull unsigned lint\n#define pb push_back\n#define mp make_pair\n#define fir first\n#define sec second\n#define gc getchar()\n#define debug(x) cerr<<#x<<\"=\"<<x\n#define sp <<\" \"\n#define ln <<endl\nusing namespace std;\ninline int inn()\n{\n\tint x,ch;while((ch=gc)<'0'||ch>'9');\n\tx=ch^'0';while((ch=gc)>='0'&&ch<='9')\n\t\tx=(x<<1)+(x<<3)+(ch^'0');return x;\n}\nconst int N=110,M=10010,T=1100000,LOG=12;\nnamespace RND_space{\n\tunsigned int SA,SB,SC,t;int lim;inline int _init() { return scanf(\"%u%u%u%d\",&SA,&SB,&SC,&lim),0; }\n\tinline int rnd() { return SA^=SA<<16,SA^=SA>>5,SA^=SA<<1,t=SA,SA=SB,SB=SC,SC^=t^SA,int(SC%lim+1); }\n}using RND_space::rnd;\nint r[M][N],d[M][N],P[M][N];lint ps[M],ss[M];\nstruct E{\n\tint w,x,y;\n\tE(int _w=0,int _x=0,int _y=0) { w=_w,x=_x,y=_y; }\n\tinline bool operator<(const E &e)const { return w<e.w; }\n};vector<E> pre[M],suf[M],cur;vector<int> g[T];\nint up[T][LOG],Log[N<<2],in[T],fa[T],dpt[T],dfc,val[T],lst[N<<1];\ninline int _init_Log(int n) { rep(i,2,n) Log[i]=Log[i>>1]+1;return 0; }\nint dfs(int x)\n{\n\tin[x]=++dfc,memset(up[x]+1,0,sizeof(int)*(LOG-1));int y;\n\tfor(int i=1;i<=Log[dpt[x]];i++) up[x][i]=up[up[x][i-1]][i-1];\n\tRep(i,g[x]) y=g[x][i],dpt[y]=dpt[x]+1,up[y][0]=x,dfs(y);return 0;\n}\ninline int incmp(int x,int y) { return in[x]<in[y]; }\ninline int getLCA(int x,int y)\n{\n\tif(dpt[x]<dpt[y]) swap(x,y);\n\tfor(int i=Log[dpt[x]];i>=0;i--)\n\t\tif(dpt[up[x][i]]>=dpt[y]) x=up[x][i];\n\tif(x==y) return x;\n\tfor(int i=Log[dpt[x]];i>=0;i--)\n\t\tif(up[x][i]^up[y][i]) x=up[x][i],y=up[y][i];\n\treturn up[x][0];\n}\ninline int clrfa(vector<E> &v)\n{\n\tint mx=0,x,y;\n\tRep(i,v)\n\t\tx=v[i].x,fa[x]=x,vector<int>().swap(g[x]),mx=max(mx,x),\n\t\ty=v[i].y,fa[y]=y,vector<int>().swap(g[y]),mx=max(mx,y);\n\treturn mx;\n}\ninline int findf(int x) { return x==fa[x]?x:fa[x]=findf(fa[x]); }\ninline lint ins(int n,int *P,int *X,int *Y,int *d,int *r,vector<E> &ans)\n{\n\tlint res=0;Rep(i,cur) res-=cur[i].w;\n\trep(i,1,n) cur.pb(E(r[i],X[i],Y[i]));\n\trep(i,1,n-1) cur.pb(E(d[i],Y[i],Y[i+1]));\n\tsort(cur.begin(),cur.end());int nc=clrfa(cur);\n\tRep(i,cur)\n\t{\n\t\tint x=findf(cur[i].x),y=findf(cur[i].y),w=cur[i].w;if(x==y) continue;\n\t\tfa[x]=fa[y]=++nc,fa[nc]=nc,vector<int>().swap(g[nc]),g[nc].pb(x),g[nc].pb(y),val[nc]=w,res+=w;\n\t}\n\tdfc=0,up[nc][0]=0,dpt[nc]=0,dfs(nc);\n\tint lc=0;rep(i,1,n) lst[++lc]=P[i];\n\tsort(lst+1,lst+lc+1,incmp),ans.clear();\n\trep(i,1,lc-1) ans.pb(E(getLCA(lst[i],lst[i+1])[val],lst[i],lst[i+1]));\n\t\n\trep(i,1,n) lst[++lc]=Y[i];\n\tsort(lst+1,lst+lc+1,incmp),vector<E>().swap(cur);\n\trep(i,1,lc-1) cur.pb(E(getLCA(lst[i],lst[i+1])[val],lst[i],lst[i+1]));\n\treturn res;\n}\ninline lint solve(vector<E> &pre,vector<E> &suf,int n,int m)\n{\n\tcur=pre;Rep(i,suf) cur.pb(suf[i]);\n\tlint res=0;Rep(i,cur) res-=cur[i].w;\n\trep(i,1,n) cur.pb(E(r[m][i],P[m][i],P[1][i]));\n\tclrfa(cur),sort(cur.begin(),cur.end());\n\tRep(i,cur)\n\t{\n\t\tint x=findf(cur[i].x),y=findf(cur[i].y);\n\t\tif(x^y) fa[x]=y,res+=cur[i].w;\n\t}\n\treturn res;\n}\nint main()\n{\n\tint n=inn(),m=inn(),cnt=0;\n\tRND_space::_init(),_init_Log(n<<2);\n\trep(i,1,n) rep(j,1,m) r[j][i]=rnd();\n\trep(i,1,n-1) rep(j,1,m) d[j][i]=rnd();\n\trep(i,1,m) rep(j,1,n) P[i][j]=++cnt;\n\t\n\trep(i,1,n-1) cur.pb(E(d[1][i],P[1][i],P[1][i+1]));\n\tRep(i,cur) ps[1]+=cur[i].w;pre[1]=cur;\n\trep(i,2,m) ps[i]=ps[i-1]+ins(n,P[1],P[i-1],P[i],d[i],r[i-1],pre[i]);\n\t\n\tcur.clear();rep(i,1,n-1) cur.pb(E(d[m][i],P[m][i],P[m][i+1]));\n\tRep(i,cur) ss[m]+=cur[i].w;suf[m]=cur;\n\tfor(int i=m-1;i;i--) ss[i]=ss[i+1]+ins(n,P[m],P[i+1],P[i],d[i],r[i],suf[i]);\n\tfor(int q=inn(),l,r;q;q--)\n\t\tl=inn()-1,r=inn()+1,printf(\"%lld\\n\",ps[l]+ss[r]+solve(pre[l],suf[r],n,m));\n\treturn 0;\n}\n```",
        "postTime": 1557370064,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5360 \u3010[SDOI2019]\u4e16\u754c\u5730\u56fe\u3011"
    },
    {
        "content": "[P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe](https://www.luogu.com.cn/problem/P5360)\n\n**# \u5fc3\u8def\u5386\u7a0b**\n\n \u4e00\u4e2a naive \u7684\u60f3\u6cd5\u662f\u5bf9\u539f\u56fe\u6c42\u4e00\u4e2a\u524d\u7f00\u6700\u5c0f\u751f\u6210\u6811 $pre_i$ \u548c\u4e00\u4e2a\u540e\u7f00\u6700\u5c0f\u751f\u6210\u6811 $suf_i$\uff0c\u7136\u540e\u5408\u5e76\u5b83\u4eec\u3002\u8fd9\u5e76\u4e0d\u96be\u60f3\u5230\uff0c\u5173\u952e\u5728\u4e8e\u600e\u4e48\u5b9e\u73b0\u5408\u5e76\u64cd\u4f5c\u3002\n\n\u6211\u6700\u521d\u7684\u60f3\u6cd5\u662f\u5c06 $n=1$ \u7684\u89e3\u6cd5\u8fdb\u884c\u63a8\u5e7f\uff0c\u7528 LCT \u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4ece\u5de6\u5230\u53f3\u505a\u4e00\u904d\uff0c\u518d\u4ece\u53f3\u5230\u5de6\u505a\u4e00\u904d\uff0c\u53ea\u628a\u6c42\u5f97\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u503c\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u901a\u8fc7 $\\min\\{(i,m)- (i,1)\\}$ \u7684\u8fb9\u628a\u4e24\u90e8\u5206\u5408\u5e76\u8d77\u6765\u3002\u540e\u6765\u5728\u540c\u6821\u5de8\u4f6c  $\\textcolor{black}{Y}\\textcolor{red}{outh518} $ \u7684\u63d0\u9192\u4e0b\u53d1\u73b0\u8fd9\u6837\u505a\u662f\u5047\u7684\uff0c\u56e0\u4e3a\u628a\u8fde\u63a5\u4e24\u7aef\u7684\u8fb9\u52a0\u5165\u53ef\u80fd\u4f1a\u66ff\u6362\u6389\u539f\u6765\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4fdd\u5b58 $pre_i$ \u548c $suf_i$ \u7684\u6811\u5f62\u3002\n\n\u90a3\u2026\u2026\u53ef\u6301\u4e45\u5316 LCT \uff1f\u4f46\u636e\u6211\u6240\u77e5 LCT \u597d\u50cf\u4e0d\u80fd\u53ef\u6301\u4e45\u5316\u3002\u4e8e\u662f\u6211\u6253\u5f00\u4e86\u9898\u89e3\u3002\n\n**# \u6b63\u89e3**\n\n\u8003\u8651 LCT \u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fc7\u7a0b\uff0c\u8bbe $[1,i-1]$ \u7684 MST \u4e0a $u,v$ \u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u4e3a $l$ \uff0c\u5f53\u52a0\u5165\u4e00\u6761\u8fb9 $(u,v,w)$ \u65f6\uff0c\u5f53\u4e14\u4ec5\u5f53 $w<l$ \u65f6\uff0c\u6211\u4eec\u4f1a\u65ad\u6389 $l$ \uff0c\u8fde\u4e0a $(u,v,w )$ \u3002\u5408\u5e76 $[1,i-1]$ \u548c $i$ \u65f6\uff0c\u53ea\u6709 $i-1$ \u8fd9\u4e00\u5217\u7684\u70b9\u6240\u6d89\u53ca\u5230\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\uff1b\u5408\u5e76 $pre $ \u548c $suf$ \u65f6\uff0c\u53ea\u6709\u6700\u5de6\u7aef\u4e00\u5217\u7684\u70b9\u6240\u6d89\u53ca\u5230\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u6211\u4eec\u628a\u8fd9\u4e24\u5217\u7684\u70b9\u79f0\u4e3a**\u5173\u952e\u70b9**\u3002\n\n\u8003\u8651\u5982\u4f55\u5f97\u5230 $pre$\uff08$suf$ \u540c\u7406\uff09\u3002\u6211\u4eec\u6539\u53d8 $pre$ \u7684\u5b9a\u4e49\uff1a\u8bbe $pre_i$ \u8868\u793a\u7ecf\u5ea6\u5728 $[1,i]$ \u7684\u70b9\u7684 MST \u4e2d\uff0c\u4e4b\u540e\u53ef\u80fd\u88ab\u5220\u7684\u8fb9\u96c6\u3002\u5219 $[1,i-1]$ \u7684 MST \u4e0a\u4e0d\u5728 $pre$ \u4e2d\u7684\u8fb9\u4e00\u5b9a\u4e5f\u5728 $[1,i]$ \u7684 MST \u4e0a\u3002\u5982\u679c $pre$ \u6d89\u53ca\u7684\u70b9\u90fd\u4e3a\u5173\u952e\u70b9\uff0c\u6211\u4eec\u53ea\u8981\u628a $pre_{i\u22121}$ \u548c\u65b0\u52a0\u5165\u7684\u8fb9\u4e00\u8d77\u62ff\u51fa\u6765\u8dd1 kruscal\uff0c\u6240\u5f97\u7ed3\u679c\u52a0\u4e0a\u80af\u5b9a\u4e0d\u4f1a\u88ab\u5220\u7684\u8fb9\uff0c\u5c31\u662f $[1,i]$ \u7684 MST\u3002 \u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5355\u6b21\u5408\u5e76\u7684\u590d\u6742\u5ea6\u5c31\u5728 $O(n\\log n)$ \u7ea7\u522b\u4e86\u3002\n\n\u4f46\u4e8b\u5b9e\u4e0a $pre$ \u6d89\u53ca\u7684\u70b9\u5e76\u4e0d\u90fd\u4e3a\u5173\u952e\u70b9\u3002\u8003\u8651 $pre$ \u7684\u5b9a\u4e49\uff0c**\u4e4b\u540e\u53ef\u80fd\u88ab\u5220\u7684\u8fb9\u96c6**\uff0c\u8fd9\u4e9b\u8fb9\u4e00\u5b9a\u90fd\u5728\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u3002\u90a3\u4e48\u6211\u4eec\u5bf9\u5173\u952e\u70b9\u5efa MST \u7684\u865a\u6811\uff0c\u8fb9\u6743\u4e3a\u539f\u6765\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u95f4\u4e24\u70b9\u8fb9\u6743\u7684\u6700\u5927\u503c \u3002\u6211\u4eec\u518d\u6b21\u6539\u53d8 $pre$ \u7684\u5b9a\u4e49\uff0c$pre$ \u5b58\u865a\u6811\u4e0a\u4e4b\u540e\u53ef\u80fd\u88ab\u5220\u7684\u8fb9\u96c6\uff0c\u8fd9\u6837 $pre$ \u6d89\u53ca\u7684\u70b9\u5c31\u90fd\u4e3a\u5173\u952e\u70b9\u4e86\u3002\n\n\u611f\u89c9\u8fd9\u9898\u4e0d\u662f\u5f88\u96be\u60f3\uff0c\u4f46\u5f88\u96be\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u865a\u6811\u7684\u601d\u60f3\u8fd8\u662f\u5f88\u5de7\u5999\u7684\u3002\n\n\u4ee3\u7801\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53c2\u8003\u4e86\u9898\u89e3\uff0c\u4f46\u662f\u52a0\u4e86\u4e00\u4e9b\u6ce8\u91ca\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nnamespace FGF\n{\n\tint n,m,Q;\n\tconst int N=1e4+5,M=105;\n\tunsigned int SA, SB, SC;\n\tint lim;\n\tstruct edg{\n\t\tint to,nxt,w;\n\t}e[N<<1];\n\tint head[N],cnt,is[N],a[N][M],b[N][M],fa[N];\n\tll ans;\n\tinline int getweight() \n\t{\n\t\tSA ^= SA << 16;\n\t\tSA ^= SA >> 5;\n\t\tSA ^= SA << 1;\n\t\tll t = SA;\n\t\tSA = SB;\n\t\tSB = SC;\n\t\tSC ^= t ^ SA;\n\t\treturn SC % lim + 1;\n\t}\n\tstruct EDG{\n\t\tint u,v,w;\n\t};\n\tbool operator< (EDG x,EDG y){return x.w<y.w;}\n\tvector<EDG> g;\n\tstruct MST{\n\t\tvector<EDG> E;\n\t\tint tot;ll sum;\n\t\tMST(){};\n\t\tMST(int *a)\n\t\t{\n\t\t\ttot=n,sum=0;\n\t\t\tfor(int i=1;i<n;i++)\n\t\t\t\tE.push_back({i,i+1,a[i]});\n\t\t}\n\t\tll query()\n\t\t{\n\t\t\tll ans=sum;\n\t\t\tfor(auto v:E)ans+=v.w;\n\t\t\treturn ans;\n\t\t}\n\t}pre[N],suf[N];\n\tint find(int x)\n\t{\n\t\treturn x==fa[x]? x:fa[x]=find(fa[x]);\n\t}\n\tvoid add(int u,int v,int w)\n\t{\n\t\tcnt++;\n\t\te[cnt].to=v;\n\t\te[cnt].nxt=head[u];\n\t\thead[u]=cnt;\n\t\te[cnt].w=w;\n\t}\n\tvoid link(EDG x){add(x.u,x.v,x.w),add(x.v,x.u,x.w),ans+=x.w;} \n\tbool dfs1(int u,int f)\n\t{\n\t\tint s=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t\tif(e[i].to!=f)s+=dfs1(e[i].to,u);\n\t\tis[u]|=(s>=2);\n\t\treturn s+is[u];\n\t}\n\tvoid dfs2(int u,int f,int lst,int val)\n\t{\n\t\tif(is[u])\n\t\t{\n\t\t\tif(lst)g.push_back({is[u],lst,val});//\u628a\u865a\u6811\u4e0a\u7684\u8fb9\u5b58\u4e0b\u6765\n\t\t\tlst=is[u],ans-=val,val=0;\n\t\t}\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t\tif(e[i].to!=f)dfs2(e[i].to,u,lst,max(val,e[i].w));\n\t}\n\tMST merge(MST a,MST b,int *c)\n\t{\n\t\tint tot=a.tot+b.tot;\n\t\tg.clear();\n\t\tfor(auto v:a.E)g.push_back(v);\n\t\tfor(auto v:b.E)g.push_back({a.tot+v.u,a.tot+v.v,v.w});\n\t\tfor(int i=1;i<=n;i++)g.push_back({a.tot-n+i,a.tot+i,c[i]});\n\t\tsort(g.begin(),g.end());\n\t\tfor(int i=1;i<=tot;i++)\n\t\t\tfa[i]=i,is[i]=(i>tot-n||i<=n),head[i]=0;//\u628a\u5173\u952e\u70b9\u6807\u8d77\u6765\n\t\tcnt=ans=0; \n\t\tfor(auto v:g)\n\t\t\tif(find(v.u)!=find(v.v))link(v),fa[find(v.u)]=find(v.v);\n\t\tdfs1(1,0);cnt=0;\n\t\tfor(int i=1;i<=tot;i++)\n\t\t\tif(is[i])is[i]=++cnt;//\u7ed9\u70b9\u91cd\u6807\u53f7\n\t\tg.clear();\n\t\tdfs2(1,0,0,0);\n\t\tMST res;res.tot=cnt,res.sum=a.sum+b.sum+ans,res.E=g;\n\t\treturn res; \n\t}\n\tvoid work()\n\t{\n\t\tscanf(\"%d%d%u%u%u%d\",&n,&m,&SA,&SB,&SC,&lim);\n\t\tint i,j,l,r;\n\t\tfor(i=1;i<=n;i++)\n\t\t\tfor(j=1;j<=m;j++)\n\t\t\t\ta[j][i]=getweight();\n\t\tfor(i=1;i<n;i++)\n\t\t\tfor(j=1;j<=m;j++)\n\t\t\t\tb[j][i]=getweight();\n\t\tpre[1]=MST(b[1]),suf[m]=MST(b[m]);\n\t\tfor(int i=2;i<m;i++)\n\t\t\tpre[i]=merge(pre[i-1],MST(b[i]),a[i-1]);\n\t\tfor(int i=m-1;i>1;i--)\n\t\t\tsuf[i]=merge(MST(b[i]),suf[i+1],a[i]);\n\t\tscanf(\"%d\",&Q);\n\t\twhile(Q--)\n\t\t{\n\t\t\tscanf(\"%d%d\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",merge(suf[r+1],pre[l-1],a[m]).query());\n\t\t}\n\t}\n}\nint main()\n{\n\tFGF::work();\n\treturn 0;\n}\n```",
        "postTime": 1610175463,
        "uid": 224403,
        "name": "\u6728xx\u6728\u5927",
        "ccfLevel": 9,
        "title": "P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe"
    },
    {
        "content": "### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P5360)\n\n### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10889109.html) \n\n\u6bcf\u6b21\u67e5\u8be2\u7684\u5b9e\u9645\u5c31\u662f\u5c06\u5730\u56fe\u7684\u4e00\u4e2a\u524d\u7f00\u548c\u4e00\u4e2a\u540e\u7f00\u5408\u5e76\u540e\u7684\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\n\n\u6211\u4eec\u8981\u9884\u5904\u7406\u6bcf\u4e2a\u524d\u7f00\u548c\u540e\u7f00\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u5b9e\u9645\u6c42\u524d\u7f00\u548c\uff08\u540e\u7f00\u548c\uff09\u7684\u8fc7\u7a0b\u73c2\u4ee5\u7406\u89e3\u4e3a\u4e0a\u4e00\u4e2a\u524d\u7f00\u548c\u8fd9\u4e00\u5217\u7684\u6700\u5c0f\u751f\u6210\u6811\u8fdb\u884c\u5408\u5e76\uff0c\u5b9e\u9645\u6700\u540e\u524d\u7f00\u548c\u540e\u7f00\u5408\u5e76\u4e5f\u662f\u8fd9\u6837\n\n\u5982\u679c\u66b4\u529b\u8fdb\u884c\u5408\u5e76\u7684\u8bdd\uff0c\u6bcf\u6b21\u8fb9\u6570\u662fnm\u7ea7\u522b\u7684\uff0c\u660e\u663e\u4f1aTLE\u548cMLE\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u5b9e\u9645\u6bcf\u6b21\u5408\u5e76\u4e3b\u8981\u548c\u6700\u5de6\u3001\u6700\u53f3\u4e24\u5217\uff08\u79f0\u8fd9\u4e9b\u70b9\u4e3a\u5173\u952e\u70b9\uff09\u6709\u5173\uff0c\u6bcf\u6b21\u5408\u5e76\uff0c\u539f\u6765\u6700\u5c0f\u751f\u6811\u4e2d\u6709\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u8fb9\u8981\u5220\u6389\u4f7f\u5f97\u5408\u5e76\u540e\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u73c2\u80fd\u5220\u6389\u7684\u8fb9\u4e00\u5b9a\u5728\u4e24\u4e2a\u5173\u952e\u70b9\u5728\u539f\u6765\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u95f4\u7684\u94fe\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u5173\u952e\u70b9\u5efa\u6700\u5c0f\u751f\u6210\u6811\u7684\u865a\u6811\uff0c\u8fb9\u6743\u4e3a\u539f\u6765\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u95f4\u4e24\u70b9\u8fb9\u6743\u7684\u6700\u5927\u503c\uff0c\u5176\u4ed6\u7684\u8fb9\u6743\u7d2f\u52a0\u6210\u548c\u5373\u53ef\uff08\u56e0\u4e3a\u5176\u4ed6\u7684\u8fb9\u4e0d\u73c2\u80fd\u5220\u6389\uff09\uff0c\u8fd9\u65f6\u4e24\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6570\u7684\u6570\u91cf\u7ea7\u90fd\u662fn*\u5e38\u6570\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529bkruscal\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u5927\u6982\u4e3a$O(n*(m+q)\\log n)$\n\n```cpp\n#include <bits/stdc++.h>\n#define N 10005 \n#define ll long long\nusing namespace std;\ninline int read()\n{\n    register int x=0,f=1;register char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n    return x*f;\n}\ninline void write(register ll x)\n{\n    if(!x)putchar('0');if(x<0)x=-x,putchar('-');\n    static int sta[20];register int tot=0;\n    while(x)sta[tot++]=x%10,x/=10;\n    while(tot)putchar(sta[--tot]+48);\n}\ninline int Max(register int a,register int b)\n{\n    return a>b?a:b;\n}\nint n,m,q,foo[N][105],bar[N][105];\nunsigned int SA,SB,SC;\nint lim;\ninline int rng()\n{\n    SA^=SA<<16;SA^=SA>>5;SA^=SA<<1;\n    unsigned int t=SA;SA=SB;SB=SC;SC^=t^SA;\n    return SC%lim+1;\n}\nstruct edge{\n    int u,v,w;\n    bool operator < (const edge &b)const{return w<b.w;}\n};\nstruct MST{\n    int tot;\n    ll sum;\n    vector <edge> E;\n    MST(){}\n    MST(register int *c)\n    {\n        tot=n,sum=0;\n        for(register int i=1;i<n;++i)\n            E.push_back((edge){i,i+1,c[i]});\n    }\n    inline ll query()\n    {\n        ll res=sum;\n        for(register int i=0;i<E.size();++i)\n            res+=E[i].w;\n        return res;\n    }\n}pre[N],suf[N];\nint tot,fa[N],mrk[N],to[N],nxt[N],ww[N],head[N],cnt;\nvector <edge> E;\nll ans;\ninline int find(register int x)\n{\n    return x==fa[x]?x:fa[x]=find(fa[x]);\n}\ninline void link(register edge x)\n{\n    to[++cnt]=x.v,nxt[cnt]=head[x.u],ww[cnt]=x.w,head[x.u]=cnt;\n    to[++cnt]=x.u,nxt[cnt]=head[x.v],ww[cnt]=x.w,head[x.v]=cnt;\n    ans+=x.w;\n}\ninline bool dfs1(register int u,register int f)\n{\n    int s=0;\n    for(register int e=head[u];e;e=nxt[e])\n        if(to[e]!=f)\n            s+=dfs1(to[e],u);\n    mrk[u]|=(s>=2);\n    s+=mrk[u];\n    return s;\t\n}\ninline void dfs2(register int u,register int f,register int lst,register int val)\n{\n    if(mrk[u])\n    {\n        if(lst)\n            E.push_back((edge){mrk[u],lst,val});\n        lst=mrk[u];\n        ans-=val;\n        val=0;\n    }\n    for(register int e=head[u];e;e=nxt[e])\n        if(to[e]!=f)\n            dfs2(to[e],u,lst,Max(val,ww[e]));\n}\ninline MST merge(register MST a,register MST b,register int *c)\n{\n    tot=a.tot+b.tot;\n    E.clear();\n    for(register int i=0;i<a.E.size();++i)\n        E.push_back(a.E[i]);\n    for(register int i=0;i<b.E.size();++i)\n        E.push_back((edge){b.E[i].u+a.tot,b.E[i].v+a.tot,b.E[i].w});\n    for(register int i=1;i<=n;++i)\n        E.push_back((edge){a.tot-n+i,a.tot+i,c[i]});\n    sort(E.begin(),E.end());\n    for(register int i=1;i<=tot;++i)\n        fa[i]=i,mrk[i]=(i<=n||i>tot-n),head[i]=0;\n    cnt=ans=0;\n    for(register int i=0;i<E.size();++i)\n    {\n        edge x=E[i];\n        if(find(x.u)!=find(x.v))\n            link(x),fa[find(x.u)]=find(x.v);\n    }\n    dfs1(1,0);\n    cnt=0;\n    for(register int i=1;i<=tot;++i)\n        if(mrk[i])\n            mrk[i]=++cnt;\n    E.clear();\n    dfs2(1,0,0,0);\n    MST res;\n    res.tot=cnt;\n    res.sum=a.sum+b.sum+ans;\n    res.E=E;\n    return res;\n}\nint main()\n{\n    n=read(),m=read();\n    scanf(\"%u%u%u\",&SA,&SB,&SC);\n    lim=read();\n    for(register int i=1;i<=n;++i)\n        for(register int j=1;j<=m;++j)\n            foo[j][i]=rng();\n    for(register int i=1;i<n;++i)\n        for(register int j=1;j<=m;++j)\n            bar[j][i]=rng();\n    pre[1]=MST(bar[1]),suf[m]=MST(bar[m]);\n    for(register int i=2;i<m;++i)\n        pre[i]=merge(pre[i-1],MST(bar[i]),foo[i-1]);\n    for(register int i=m-1;i>1;--i)\n        suf[i]=merge(MST(bar[i]),suf[i+1],foo[i]);\n    q=read();\n    while(q--)\n    {\n        int l=read(),r=read();\n        write(merge(suf[r+1],pre[l-1],foo[m]).query()),puts(\"\");\n    }\n    return 0;\n}\n```",
        "postTime": 1558410633,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5360 \u3010[SDOI2019]\u4e16\u754c\u5730\u56fe\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a\u7f51\u683c\u56fe\uff0c\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u76f8\u8fde\uff0c\u6bcf\u6b21\u8be2\u95ee\u6316\u6389\u4e00\u4e2a\u6a2a\u5750\u6807\u533a\u95f4\u4e4b\u540e\u5176\u4f59\u90e8\u5206\u7684mst\u3002\n\n\u5148%\u4e00\u4e0b\u73b0\u573a\u5207\u6389\u8fd9\u9898\u7684ckw\u961f\u957f\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u53ef\u4ee5\u770b\u4f5c\u628a\u4e00\u4e2a\u524d\u7f00\u548c\u4e00\u4e2a\u540e\u7f00\u62fc\u8d77\u6765\u505amst\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u524d\u7f00\u548c\u540e\u7f00\u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u518d\u60f3\u529e\u6cd5\u628a\u4e24\u68f5mst\u62fc\u6210\u4e00\u68f5\u3002\n\n\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u7528lct\u7ef4\u62a4\u52a8\u6001mst\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u8be2\u95ee\u7684\u524d\u7f00\u548c\u540e\u7f00\u7684mst\uff0c\u73b0\u5728\u5728\u4e2d\u95f4\u52a0\u4e00\u5806\u8fb9\uff0c\u5982\u679c\u4e4b\u524d\u6ca1\u8fde\u901a\u5c31\u76f4\u63a5\u8fde\u4e0a\uff0c\u5426\u5219\u8e22\u6389\u73af\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u3002\n\n\u53ea\u53ef\u60dc\u6bcf\u6b21\u8be2\u95ee\u62ce\u51fa\u4e00\u4e2a\u524d\u7f00\u548c\u540e\u7f00\u7684mst\u53ef\u80fd\u9700\u8981\u53ef\u6301\u4e45\u5316lct\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u8fd9\u4e2a\u4e1c\u897f\u4f46\u6211\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\u6ca1\u4eba\u4f1a\u3002\n\n\u6216\u8005\u7528\u6811\u72b6\u6570\u7ec4\u5957lct\uff0c\u6bcf\u6b21\u628alog\u4e2a\u533a\u95f4\u7684lct\u62fc\u8d77\u6765\uff0c\u521a\u521a\u60f3\u4e86\u60f3\u8fd9\u786e\u5b9e\u53ef\u4ee5\uff0c\u4f46\u662f\u2026\u20262\u4e2alog+\u5de8\u5927\u7684\u5e38\u6570\uff0c\u4e0dt\u624d\u602a\u597d\u5427\u3002\n\n\u90a3\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u8003\u67e5\u4e00\u4e0b\u7528lct\u7ef4\u62a4\u52a8\u6001mst\u7684\u8fc7\u7a0b\u3002\n\n\u628a\u5de6\u53f3\u4e24\u68f5mst\u62fc\u8d77\u6765\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u54ea\u4e9b\u8fb9\u53ef\u80fd\u88ab\u8e22\u6389\u5462\uff1f\n\n\u7531\u4e8e\u6bcf\u6b21\u52a0\u8fb9\u90fd\u53ea\u6d89\u53ca\u6700\u8fb9\u7f18\u7684\u4e00\u6392\u70b9\uff0c\u6700\u7ec8\u88ab\u8e22\u6389\u7684\u8fb9\u5f53\u7136\u4e5f\u53ea\u4f1a\u662f\u539fmst\u4e0a\u8fde\u63a5\u6700\u8fb9\u7f18\u4e00\u6392\u70b9\u7684\u8fb9\u3002\n\n\u66f4\u76f4\u89c2\u7684\u8bf4\u6cd5\u662f\uff1a\u5efa\u51fakruskal\u91cd\u6784\u6811\uff08\u53f6\u5b50\u8282\u70b9\u662f\u539f\u5148\u7684\u70b9\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u8fb9\u8fde\u63a5\u4e24\u4e2a\u8fde\u901a\u5757\u65f6\u5c31\u65b0\u5efa\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\u7684father\uff09\uff0c\u5219\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6240\u6709\u8fb9\u7f18\u7684\u70b9\u7684\u865a\u6811\u4e0a\u6d89\u53ca\u5230\u7684\u8fb9\u3002\n\n\u4e5f\u5c31\u662f\u5bf9\u6240\u6709\u7684\u5173\u952e\u70b9\u4e24\u4e24\u6c42\u4e00\u4e0blca(lca\u4e00\u5b9a\u662f\u65b0\u5efa\u8282\u70b9\uff0c\u522b\u5fd8\u4e86\u6bcf\u4e2a\u65b0\u5efa\u8282\u70b9\u4ee3\u8868\u4e00\u6761\u8fb9)\uff0c\u6240\u6709\u7684lca\u4ee3\u8868\u7684\u8fb9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u5173\u952e\u8fb9\u3002\n\n\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6bcf\u4e2a\u524d\u7f00\u548c\u540e\u7f00\u7684\u8fd9\u4e9b\u5173\u952e\u8fb9\u90fd\u662f\u54ea\u4e9b\uff0c\u5c31\u53ef\u4ee5\u6bcf\u6b21\u5408\u5e76\u65f6\uff0c\u62ce\u51fa\u4e24\u4fa7\u7684\u5173\u952e\u8fb9\u4ee5\u53ca\u4e2d\u95f4\u7684\u8fb9\u6765\u8dd1\u4e00\u6b21kruskal\u3002\n\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\uff1a\u6bcf\u4e2a\u524d\u7f00\u548c\u540e\u7f00\u7684\u5173\u952e\u8fb9\u600e\u4e48\u7ef4\u62a4\uff1f\n\n\u4ee5\u524d\u7f00\u4e3a\u4f8b\uff0c\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u524d\u7f00\u90fd\u7ef4\u62a4\u51fa\u6700\u5de6\u4e00\u6392\u70b9\u7684\u5173\u952e\u8fb9\u3002\n\n\u4ece\u5de6\u5230\u53f3\u626b\u8fc7\u53bb\uff0c\u6bcf\u6b21\u52a0\u4e00\u5217\u7684\u8fc7\u7a0b\u5176\u5b9e\u672c\u8d28\u4e0a\u548c\u521a\u624d\u7684\u67e5\u8be2\u7b54\u6848\u662f\u4e00\u6837\u7684\uff0c\u8fd8\u662f\u5408\u5e76\u5de6\u53f3\u4e24\u6bb5\u7684mst\u3002\n\n\u56e0\u6b64\u6211\u4eec\u4e5f\u8981\u987a\u4fbf\u7ef4\u62a4\u51fa\u6700\u53f3\u4fa7\u4e00\u6392\u70b9\u7684\u5173\u952e\u8fb9\u3002\n\n\u5de6\u53f3\u4e24\u6392\u70b9\u51712n\u4e2a\uff0c\u6211\u4eec\u8981\u4e00\u8d77\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u96c6\u7684\u5173\u952e\u8fb9\uff0c\u4e00\u5171\u67092n-1\u6761\u3002\n\n\u6bcf\u6b21\u52a0\u5165\u4e00\u6392\u70b9\uff0c\u628a\u4e4b\u524d\u7684\u5173\u952e\u8fb9\u62ff\u51fa\u6765\uff0c\u518d\u52a0\u4e0a\u65b0\u52a0\u5165\u76842n-1\u6761\u8fb9\u4e00\u8d77\u8dd1kruskal\uff0c\u7136\u540e\u518d\u63d0\u53d6\u51fa\u65b0\u7684\u5173\u952e\u8fb9\u3002\n\n\u63d0\u53d6\u65b0\u7684\u5173\u952e\u8fb9\u7684\u8fc7\u7a0b\u5f53\u7136\u53ef\u4ee5\u663e\u5f0f\u5730\u5efa\u51fakruskal\u91cd\u6784\u6811\uff0c\u5f53\u7136\u66f4\u7b80\u5355\u7684\u529e\u6cd5\u662f\u76f4\u63a5\u5728\u5e76\u67e5\u96c6\u5408\u5e76\u65f6\u5c31\u7ef4\u62a4\u51fa\u6765\uff0c\u8c03\u6574\u4e00\u4e0bmerge\u65f6\u7684\u5408\u5e76\u987a\u5e8f\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6O(nmlogn)\uff0c\u8fd9\u4e2alog\u6765\u81ea\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u636e\u8bf4\u5b9e\u73b0\u5f97\u597d\u53ef\u4ee5\u628alog\u53bb\u6389\u3002\n\n\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6ce5\u840c\u7684\u4ee3\u7801\u90fd\u8fa3\u4e48\u77ed\u554a\u2026\u2026\u732e\u4e0a\u62115k\u7684\u957f\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define gc getchar()\n#define pc putchar\n#define li long long\ninline li read(){\n\tli x = 0,y = 0,c = gc;\n\twhile(!isdigit(c)) y = c,c = gc;\n\twhile(isdigit(c)) x = (x << 1) + (x << 3) + (c ^ '0'),c = gc;\n\treturn y == '-' ? -x : x;\n}\ninline void print(li q){\n\tif(q < 0) pc('-'),q = -q;\n\tif(q >= 10) print(q / 10);\n\tpc(q % 10 + '0');\n}\nint n,m,mo,q;\nunsigned int sa,sb,sc;\nint nxt(){\n    sa ^= sa << 16;\n    sa ^= sa >> 5;\n    sa ^= sa << 1;\n    unsigned int t = sa;\n    sa = sb;\n    sb = sc;\n    sc ^= t ^ sa;\n    return sc % mo + 1;\n}\nstruct edge{\n\tint u,v;\n\tli w;\n\tedge(int _u = 0,int _v = 0,li _w = 0){u = _u;v = _v;w = _w;}\n}e1[10010][110],e2[10010][110],e3[10010][110],e4[10010][110],nw[1010],tmp[1010];\ninline bool operator < (edge q,edge w){\n\treturn q.w < w.w;\n}\nint f[1000010],bh[110][10010],cnt;\ninline int getf(int q){\n\treturn f[q] == q ? q : f[q] = getf(f[q]);\n}\nint tp1,tp2;\ninline void mg(int u,int v){\n\tif(getf(u) % m == tp1) f[getf(v)] = getf(u);\n\telse if(getf(v) % m == tp1) f[getf(u)] = getf(v);\n\telse if(getf(u) % m == tp2) f[getf(v)] = getf(u);\n\telse f[getf(u)] = getf(v);\n}\nli an1[10010],an2[10010],an3[10010],an4[10010];\nint main(){\n\tint i,j,u,v,w,tt1,tt2;\n\tn = read();m = read();sa = read();sb = read();sc = read();mo = read();\n\tfor(i = 1;i <= n;++i) for(j = 1;j <= m;++j) bh[i][j] = (i - 1) * m + j;\n\tfor(i = 1;i <= n;++i) for(j = 1;j <= m;++j){\n\t\tw = nxt();\n\t\tif(j < m) e1[j][i] = edge(bh[i][j],bh[i][j + 1],w);\n\t\telse e1[j][i] = edge(bh[i][j],bh[i][1],w);\n\t}\n\tfor(i = 1;i < n;++i) for(j = 1;j <= m;++j){\n\t\tw = nxt();\n\t\te2[j][i] = edge(bh[i][j],bh[i + 1][j],w);\n\t}\n\tfor(i = 1;i <= m;++i) sort(e1[i] + 1,e1[i] + n + 1),sort(e2[i] + 1,e2[i] + n);\n\t\n\tfor(i = 1;i < n;++i) e3[1][i] = e2[1][i];\n\tcnt = tt1 = tt2 = 0;tp1 = 1;tp2 = 2;\n\tfor(i = 1;i <= n;++i) f[bh[i][1]] = bh[i][1],f[bh[i][2]] = bh[i][2];\n\tfor(i = 1;i < n;++i) nw[++cnt] = e2[1][i];\n\tfor(i = 1;i < n;++i) nw[++cnt] = e2[2][i];\n\tfor(i = 1;i <= n;++i) nw[++cnt] = e1[1][i];\n\tsort(nw + 1,nw + cnt + 1);\n\tfor(i = 1;i <= cnt;++i) if(getf(nw[i].u) != getf(nw[i].v)){\n\t\ttmp[++tt1] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\tif(getf(nw[i].u) % m == 1 && getf(nw[i].v) % m == 1) e3[2][++tt2] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\telse an1[2] += nw[i].w;\n\t\tmg(nw[i].u,nw[i].v);\n\t}\n\tfor(j = 3;j <= m;++j){\n\t\tan1[j] = an3[j] = an3[j - 1];\n\t\tcnt = tt1 = tt2 = 0;tp1 = 1;tp2 = j;\n\t\tfor(i = 1;i <= n;++i) f[bh[i][1]] = bh[i][1],f[bh[i][j]] = bh[i][j],f[bh[i][j - 1]] = bh[i][j - 1];\n\t\tfor(i = 1;i < 2 * n;++i) nw[++cnt] = tmp[i];\n\t\tfor(i = 1;i < n;++i) nw[++cnt] = e2[j][i];\n\t\tfor(i = 1;i <= n;++i) nw[++cnt] = e1[j - 1][i];\n\t\tsort(nw + 1,nw + cnt + 1);\n\t\tfor(i = 1;i <= cnt;++i) if(getf(nw[i].u) != getf(nw[i].v)){\n\t\t\tif(getf(nw[i].u) % m != j - 1 && getf(nw[i].v) % m != j - 1) tmp[++tt1] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\t\telse an3[j] += nw[i].w;\n\t\t\tif(getf(nw[i].u) % m == 1 && getf(nw[i].v) % m == 1) e3[j][++tt2] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\t\telse an1[j] += nw[i].w;\n\t\t\tmg(nw[i].u,nw[i].v);\n\t\t}\n\t}\n\t\n\tfor(i = 1;i < n;++i) e4[m][i] = e2[m][i];\n\tcnt = tt1 = tt2 = 0;tp1 = 0;tp2 = m - 1;\n\tfor(i = 1;i <= n;++i) f[bh[i][m]] = bh[i][m],f[bh[i][m - 1]] = bh[i][m - 1];\n\tfor(i = 1;i < n;++i) nw[++cnt] = e2[m][i];\n\tfor(i = 1;i < n;++i) nw[++cnt] = e2[m - 1][i];\n\tfor(i = 1;i <= n;++i) nw[++cnt] = e1[m - 1][i];\n\tsort(nw + 1,nw + cnt + 1);\n\tfor(i = 1;i <= cnt;++i) if(getf(nw[i].u) != getf(nw[i].v)){\n\t\ttmp[++tt1] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\tif(getf(nw[i].u) % m == 0 && getf(nw[i].v) % m == 0) e4[m - 1][++tt2] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\telse an2[m - 1] += nw[i].w;\n\t\tmg(nw[i].u,nw[i].v);\n\t}\n\tfor(j = m - 2;j;--j){\n\t\tan2[j] = an4[j] = an4[j + 1];\n\t\tcnt = tt1 = tt2 = 0;tp1 = 0;tp2 = j;\n\t\tfor(i = 1;i <= n;++i) f[bh[i][m]] = bh[i][m],f[bh[i][j]] = bh[i][j],f[bh[i][j + 1]] = bh[i][j + 1];\n\t\tfor(i = 1;i < 2 * n;++i) nw[++cnt] = tmp[i];\n\t\tfor(i = 1;i < n;++i) nw[++cnt] = e2[j][i];\n\t\tfor(i = 1;i <= n;++i) nw[++cnt] = e1[j][i];\n\t\tsort(nw + 1,nw + cnt + 1);\n\t\tfor(i = 1;i <= cnt;++i) if(getf(nw[i].u) != getf(nw[i].v)){\n\t\t\tif(getf(nw[i].u) % m != j + 1 && getf(nw[i].v) % m != j + 1) tmp[++tt1] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\t\telse an4[j] += nw[i].w;\n\t\t\tif(getf(nw[i].u) % m == 0 && getf(nw[i].v) % m == 0) e4[j][++tt2] = edge(getf(nw[i].u),getf(nw[i].v),nw[i].w);\n\t\t\telse an2[j] += nw[i].w;\n\t\t\tmg(nw[i].u,nw[i].v);\n\t\t}\t\n\t}\n\t\n\tq = read();\n\tfor(i = 1;i <= q;++i){\n\t\tu = read();v = read();cnt = 0;\n\t\tfor(j = 1;j <= n;++j) f[bh[j][1]] = bh[j][1],f[bh[j][m]] = bh[j][m];\n\t\tfor(j = 1;j < n;++j) nw[++cnt] = e3[u - 1][j];\n\t\tfor(j = 1;j < n;++j) nw[++cnt] = e4[v + 1][j];\n\t\tfor(j = 1;j <= n;++j) nw[++cnt] = e1[m][j];\n\t\tsort(nw + 1,nw + cnt + 1);\n\t\tli as = an1[u - 1] + an2[v + 1];\n\t\tfor(j = 1;j <= cnt;++j) if(getf(nw[j].u) != getf(nw[j].v)){\n\t\t\tmg(nw[j].u,nw[j].v);\n\t\t\tas += nw[j].w;\n\t\t}\n\t\tprint(as);pc('\\n');\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1557371241,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5360 \u3010[SDOI2019]\u4e16\u754c\u5730\u56fe\u3011"
    },
    {
        "content": "[\u6d1b\u8c37\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5360)\n\n\u597d\u9898\u3002\n\n\u9996\u5148\u770b\u5230\u62a0\u6389\u4e00\u4e2a\u533a\u95f4\u7684\u9650\u5236\uff0c\u6211\u4eec\u5f88\u81ea\u7136\u5730\u60f3\u5230\u5bf9\u524d\u540e\u7f00\u8dd1\u4e00\u904d MST \u540e\u628a\u5de6\u53f3\u4e24\u534a\u7684\u4fe1\u606f\u5408\u5e76\u8d77\u6765\u7684\u60f3\u6cd5\uff0c\u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\u600e\u6837\u7ef4\u62a4\u524d\u540e\u7f00\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u76f4\u63a5\u505a\u590d\u6742\u5ea6 $nm^2\\log n$\u200b\uff0c\u663e\u7136\u65e0\u6cd5\u901a\u8fc7\uff0c\u4e4d\u4e00\u773c\u8c8c\u4f3c\u4e5f\u9700\u8981\u53ef\u6301\u4e45\u5316 LCT / \u6811\u72b6\u6570\u7ec4\u5957 LCT \u7b49\u5947\u5947\u602a\u602a\u7684\u6570\u636e\u7ed3\u6784\u624d\u80fd\u4f18\u5316\uff0c\u770b\u4e0a\u53bb\u5f02\u5e38\u68d8\u624b\u3002\u4f46\u662f\u522b\u5fd8\u4e86\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u7528\u5230\u201c\u56fe\u662f\u4e00\u5f20\u7f51\u683c\u56fe\u201d\u7684\u6027\u8d28\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u8fd9\u9898\u5217\u6570 $m$\u200b \u5f88\u591a\u4f46\u884c\u6570 $n$\u200b \u5f88\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u80af\u5b9a\u5c3d\u91cf\u5c06\u590d\u6742\u5ea6\u503e\u5411\u4e8e $n$\u200b\u3002\u53ef\u4ee5\u53d1\u73b0\u5f53\u6211\u4eec\u65b0\u589e\u6269\u5c55\u4e00\u5217 $i$\u200b \u65f6\uff0c\u6211\u4eec\u65b0\u589e\u7684\u8fb9\u53ea\u4f1a\u8fde\u5728 $\\mathcal O(n)$\u200b \u4e2a\u70b9\u4e4b\u95f4\uff0c\u5373\u6240\u6709\u5f62\u5982 $(j,i-1),1\\le j\\le m$\u200b \u7684\u70b9\u3002\u6309\u7167 LCT \u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\u7684\u90a3\u5957\u7406\u8bba\uff0c\u5f53\u6211\u4eec\u65b0\u52a0\u5165\u4e00\u6761\u8fb9 $E=(u,v,w)$\u200b \u65f6\uff0c\u6700\u5c0f\u751f\u6210\u6811\u7684\u53d8\u5316\u53ef\u4ee5\u8868\u73b0\u4e3a\uff0c\u53d6\u51fa $u,v$\u200b \u8def\u5f84\u4e0a\u6743\u503c\u6700\u5927\u7684\u8fb9 $E_0$\u200b\uff0c\u5982\u679c $E_0$ \u7684\u6743\u503c $>w$ \u5219\u5220\u9664 $E_0$ \u52a0\u5165 $E$\uff0c\u5426\u5219\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u5e72\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6211\u4eec\u8fd9\u4e00\u8f6e\u6269\u5c55\u4e2d\uff0c\u53ea\u6709\u8fd9 $n$ \u4e2a\u5173\u952e\u70b9\u4e24\u4e24\u8def\u5f84\u4e0a\u6743\u503c\u6700\u5927\u7684\u8fb9\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e00\u8f6e\u6269\u5c55\u4e2d\u88ab\u5220\u9664\uff0c\u800c\u8fd9\u6837\u7684\u8fb9\u6700\u591a\u53ea\u6709 $\\mathcal O(n)$ \u4e2a\uff0c\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5bf9 $n$ \u4e2a\u5173\u952e\u70b9\u5efa\u865a\u6811\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u8fb9\u90fd\u80af\u5b9a\u865a\u6811\u4e0a\u67d0\u6761\u94fe\u4e0a\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u800c\u865a\u6811\u4e0a\u8fb9\u6570\u6700\u5927\u4e3a $2n-2$\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4e0d\u8bb0\u5f55\u6574\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\uff0c\u800c\u53ea\u8bb0\u5f55\u8fd9\u4e9b\u201c\u5173\u952e\u8fb9\u201d\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u5bf9\u4e8e\u5269\u4f59\u7684\u5728 MST \u4e0a\u7684\u8fb9\uff0c\u65e0\u8bba\u6211\u4eec\u600e\u4e48\u6269\u5c55\uff0c\u5b83\u4eec\u80af\u5b9a\u90fd\u4f1a\u5728 MST \u4e0a\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u7528\u5355\u7eaf\u5730\u8bb0\u5f55\u4e00\u4e0b\u5b83\u4eec\u7684\u8fb9\u6743\u4e4b\u548c\u5373\u53ef\u3002\u76f4\u63a5\u8bb0\u5f55\u8fd9\u4e9b\u8fb9\u5728\u539f\u56fe\u4e2d\u7684\u7f16\u53f7\u5219\u4f1a\u5bfc\u81f4 kruskal \u7684\u7ed3\u679c\u51fa\u9519\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u8bb0\u5f55\u8fd9\u4e9b\u8fb9\u5728\u539f\u56fe\u4e0a\u7684\u7f16\u53f7\uff0c\u6539\u8fdb\u65b9\u6cd5\u662f\uff0c\u6211\u4eec\u627e\u51fa $(1,1),(2,1),(3,1),\\cdots,(n,1),(1,i-1),(2,i-1),\\cdots,(n,i-1)$ \u8fd9\u4e9b\u70b9\u5728 $1\\sim i-1$ \u4e0a\u7684\u865a\u6811\uff0c\u7136\u540e\u5bf9\u865a\u6811\u4e0a $\\mathcal O(n)$ \u4e2a\u70b9\u91cd\u6807\u53f7\u5e76\u5bf9\u865a\u6811\u4e0a\u6bcf\u6761\u94fe\u6c42\u51fa\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u8fd9\u6837\u65b0\u589e\u4e00\u5217\u65f6\uff0c\u6211\u4eec\u5c06\u65b0\u589e\u7684\u8fb9\u4e0e\u539f\u6765 $\\mathcal O(n)$ \u6761\u8fb9\u653e\u5728\u4e00\u8d77\u8dd1 kruskal\uff0c\u5efa\u51fa\u8fd9 $9n$ \u4e2a\u70b9\u7684\u6700\u5c0f\u751f\u6210\u6811\u540e\u518d\u5efa\u51fa\u4ee5 $(1,1),(2,1),\\cdots,(n,1),(1,i),(2,i),\\cdots,(n,i)$ \u4e3a\u5173\u952e\u70b9\u7684\u865a\u6811\uff0c\u6c42\u51fa\u6bcf\u6761\u94fe\u4e0a\u6743\u503c\u6700\u5927\u7684\u8fb9\u4f5c\u4e3a\u65b0\u7684\u5173\u952e\u8fb9\u96c6\u5408\u5373\u53ef\u5b9e\u73b0\u5408\u5e76\u4e24\u68f5 MST \u7684\u8fc7\u7a0b\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $n(m+q)\\log n$\u200b\uff0c\u90e8\u5206\u4e0d\u6e05\u695a\u7684\u5730\u65b9\u53ef\u901a\u8fc7\u9605\u8bfb\u4ee3\u7801\u7406\u89e3\u3002\n\n```cpp\nconst int MAXN = 100;\nconst int MAXM = 1e4;\nconst int MAXC = MAXN << 4;\nint n, m, hor[MAXN + 5][MAXM + 5], vert[MAXN + 5][MAXM + 5];\nu32 SA, SB, SC; int lim;\nint getweight() {\n\tSA ^= SA << 16; SA ^= SA >> 5; SA ^= SA << 1;\n\tunsigned int t = SA;\n\tSA = SB; SB = SC; SC ^= t ^ SA;\n\treturn SC % lim + 1;\n}\nstruct edge {\n\tint u, v, w;\n\tedge(int _u = 0, int _v = 0, int _w = 0): u(_u), v(_v), w(_w) {}\n\tbool operator < (const edge &rhs) {return w < rhs.w;}\n};\nstruct dsu {\n\tint f[MAXC + 5];\n\tvoid init() {memset(f, 0, sizeof(f));}\n\tint find(int x) {return (!f[x]) ? x : f[x] = find(f[x]);}\n\tbool merge(int x, int y) {x = find(x); y = find(y); return (x == y) ? 0 : (f[x] = y, 1);}\n} F;\nstruct graph {\n\tint hd[MAXC + 5], nxt[MAXC * 2 + 5], to[MAXC * 2 + 5], val[MAXC * 2 + 5], ec = 0;\n\tvoid init() {memset(hd, 0, sizeof(hd)); ec = 0;}\n\tvoid adde(int u, int v, int w) {\n\t\tto[++ec] = v; val[ec] = w; nxt[ec] = hd[u]; hd[u] = ec;\n\t\tto[++ec] = u; val[ec] = w; nxt[ec] = hd[v]; hd[v] = ec;\n\t}\n} G;\nbool is[MAXC + 5], ont[MAXC + 5];\nstruct MST {\n\tvector<edge> E; int tot;\n\tll static_sum; // sum of static edges\n\tvoid init(vector<int> w) {\n\t\ttot = n;\n\t\tfor (int i = 0; i < w.size(); i++)\n\t\t\tE.pb(edge(i + 1, i + 2, w[i]));\n\t}\n\tll query() {\n\t\tll sum = static_sum;\n\t\tfor (int i = 0; i < E.size(); i++) sum += E[i].w;\n\t\treturn sum;\n\t}\n} pre[MAXM + 5], suf[MAXM + 5];\nint fa[MAXC + 5], faw[MAXC + 5];\nvoid dfs_init(int x, int f) {\n\tfa[x] = f;\n\tfor (int e = G.hd[x]; e; e = G.nxt[e]) {\n\t\tint y = G.to[e], z = G.val[e]; if (y == f) continue;\n\t\tfaw[y] = z; dfs_init(y, x);\n\t}\n}\nint id[MAXC + 5], idcnt = 0;\nvector<pii> te;\nint dfs_build(int x, int f) {\n\tint V = 0, two = 0; ont[x] = is[x];\n\tfor (int e = G.hd[x]; e; e = G.nxt[e]) {\n\t\tint y = G.to[e]; if (y == f) continue;\n\t\tint z = dfs_build(y, x);\n\t\tif (z) {\n\t\t\tif (V) two = 1, te.pb(mp(x, z));\n\t\t\telse V = z;\n\t\t}\n\t}\n\tif (!V) return (is[x]) ? x : 0;\n\telse {\n\t\tont[x] = 1;\n\t\tif (two) return is[x] = 1, te.pb(mp(x, V)), x;\n\t\telse {\n\t\t\tif (is[x]) return te.pb(mp(x, V)), x;\n\t\t\telse return V;\n\t\t}\n\t}\n}\nint qrymx(int u, int v) {\n\tint mx = 0;\n\twhile (v ^ u) chkmax(mx, faw[v]), v = fa[v];\n\treturn mx;\n}\nMST merge(MST &a, MST &b, vector<int> w) {\n\tvector<edge> ve;\n\tMST c; c.tot = a.tot + b.tot;\n\tfor (int i = 0; i < a.E.size(); i++) ve.pb(a.E[i]);\n\tfor (int i = 0; i < b.E.size(); i++) ve.pb(edge(b.E[i].u + a.tot, b.E[i].v + a.tot, b.E[i].w));\n\tfor (int i = 1; i <= n; i++) ve.pb(edge(a.tot - n + i, a.tot + i, w[i - 1]));\n\tF.init(); G.init(); ll esum = 0; sort(ve.begin(), ve.end());\n\tfor (int i = 0; i < ve.size(); i++) if (F.merge(ve[i].u, ve[i].v))\n\t\tG.adde(ve[i].u, ve[i].v, ve[i].w), esum += ve[i].w;\n\tmemset(is, 0, sizeof(is)); memset(ont, 0, sizeof(ont));\n\tfor (int i = 1; i <= c.tot; i++) is[i] = (i <= n || i > c.tot - n);\n\tdfs_init(1, 0); te.clear(); dfs_build(1, 0);\n\tidcnt = 0; for (int i = 1; i <= c.tot; i++) if (ont[i]) id[i] = ++idcnt;\n\tfor (pii p : te) c.E.pb(edge(id[p.fi], id[p.se], qrymx(p.fi, p.se)));\n\tfor (int i = 0; i < c.E.size(); i++) esum -= c.E[i].w;\n\tc.static_sum = a.static_sum + b.static_sum + esum;\n\tc.tot = idcnt;\n\treturn c;\n}\nint main() {\n\tscanf(\"%d%d%u%u%u%d\", &n, &m, &SA, &SB, &SC, &lim);\n\tfor (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++) hor[i][j] = getweight();\n\tfor (int i = 1; i < n; i++) for (int j = 1; j <= m; j++) vert[i][j] = getweight();\n//\tprintf(\"hor:\\n\");\n//\tfor (int i = 1; i <= n; i++) for (int j = 1; j <= m; j++)\n//\t\tprintf(\"%d%c\", hor[i][j], \" \\n\"[j == m]);\n//\tprintf(\"vert:\\n\");\n//\tfor (int i = 1; i < n; i++) for (int j = 1; j <= m; j++)\n//\t\tprintf(\"%d%c\", vert[i][j], \" \\n\"[j == m]);\n\tfor (int j = 1; j <= m; j++) {\n\t\tvector<int> vec;\n\t\tfor (int i = 1; i < n; i++) vec.pb(vert[i][j]);\n\t\tpre[j].init(vec); suf[j].init(vec);\n\t}\n\tfor (int i = 2; i <= m; i++) {\n\t\tvector<int> vec;\n\t\tfor (int j = 1; j <= n; j++) vec.pb(hor[j][i - 1]);\n\t\tpre[i] = merge(pre[i - 1], pre[i], vec);\n\t}\n\tfor (int i = m - 1; i; i--) {\n\t\tvector<int> vec;\n\t\tfor (int j = 1; j <= n; j++) vec.pb(hor[j][i]);\n\t\tsuf[i] = merge(suf[i], suf[i + 1], vec);\n\t}\n//\tprintf(\"pre:\\n\");\n//\tfor (int i = 1; i <= m; i++) {\n//\t\tprintf(\"[1, %d]:\\n\", i);\n//\t\tfor (int j = 0; j < pre[i].E.size(); j++)\n//\t\t\tprintf(\"%d %d %d\\n\", pre[i].E[j].u, pre[i].E[j].v, pre[i].E[j].w);\n//\t\tprintf(\"weight of MST: %lld\\n\", pre[i].query());\n//\t}\n\tint qu; scanf(\"%d\", &qu);\n\twhile (qu--) {\n\t\tint l, r; scanf(\"%d%d\", &l, &r); vector<int> vec;\n\t\tfor (int j = 1; j <= n; j++) vec.pb(hor[j][m]);\n\t\tprintf(\"%lld\\n\", merge(suf[r + 1], pre[l - 1], vec).query());\n\t}\n\treturn 0;\n}\n/*\n6 5 998244353 1004535809 1000000007 5\n6\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n*/\n```\n\n",
        "postTime": 1643433587,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe"
    },
    {
        "content": "### \u9898\u610f\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\n\n[P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe](https://www.luogu.com.cn/problem/P5360)\n\n### \u505a\u6cd5\u5206\u6790\n\n\u9996\u5148\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u548c\u5e73\u7684\u56fd\u5bb6\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\uff0c\u7136\u800c\u76f4\u63a5\u6c42\u5fc5\u7136\u4f1a\u7206\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8\u751f\u6210\u8fd9\u68f5\u6811\u7684\u6240\u6709\u70b9\u548c\u8fb9\u53ef\u4ee5\u63cf\u8ff0\u6210\u4e00\u6bb5\u7ecf\u5ea6\u524d\u7f00\u533a\u95f4\u548c\u4e00\u6bb5\u540e\u7f00\u533a\u95f4\u62fc\u8d77\u6765\u7684\u533a\u95f4\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u80cc\u9762\u7684\u90a3\u4e9b\u8fb9\u62fc\u8d77\u6765\u4e24\u68f5\u751f\u6210\u6811\uff0c\u56e0\u4e3a\u4fdd\u8bc1 $1<l\\leq r<m$ \u6240\u4ee5\u7b2c\u4e00\u5217\u548c\u6700\u540e\u4e00\u5217\u4e00\u5b9a\u662f\u548c\u5e73\u7684\uff0c\u90a3\u80cc\u9762\u7684\u90a3\u4e9b\u8fb9\u4e5f\u4e00\u5b9a\u53ef\u8d70\uff0c\u6545\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u7b54\u6848\u3002\n\n\u5176\u5b9e\u5982\u679c\u7b2c\u4e00\u5217\u6216\u8005\u6700\u540e\u4e00\u5217\u4e5f\u53d1\u751f\u6218\u4e71\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u76f4\u63a5\u53d6\u524d\u7f00\u540e\u7f00\u4e4b\u4e00\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6240\u4ee5\u6211\u4eec\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e2a\u7ecf\u5ea6\u524d\u7f00\u548c\u540e\u7f00\u533a\u95f4\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u5728\u67e5\u8be2\u65f6\u5408\u5e76\u4e24\u68f5\u6700\u5c0f\u751f\u6210\u6811\u3002\u8fd9\u6837\u663e\u7136\u5b58\u4e0d\u4e0b\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n### \u4f18\u5316\n\n\u8003\u8651\u6211\u4eec\u5982\u4f55\u5408\u5e76\u4e24\u68f5\u6700\u5c0f\u751f\u6210\u6811\uff1a\n\n\u4ece\u5c0f\u5230\u5927\u904d\u5386\u6bcf\u4e00\u6761\u5728\u4e24\u68f5\u6811\u4e4b\u95f4\u7684\u8fb9\uff0c\u5e76\u5224\u65ad\u8fb9\u4e24\u7aef\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u5185\u3002\u82e5\u5426\uff0c\u5219\u8fde\u4e0a\u8fd9\u6761\u8fb9\u5e76\u5408\u5e76\u96c6\u5408\uff1b\u82e5\u662f\uff0c\u5219\u5224\u65ad\u8fd9\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u7684\u8fb9\u6743\u662f\u5426\u5927\u4e8e\u5f53\u524d\u8fb9\uff0c\u82e5\u662f\u5219\u65ad\u6389\u6700\u5927\u8fb9\u6743\u8fb9\u5e76\u8fde\u63a5\u5f53\u524d\u8fb9\uff0c\u5426\u5219\u4e0d\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u901a\u8fc7\u8fd9\u79cd\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709\u90e8\u5206\u70b9\u548c\u8fb9\u53ef\u80fd\u5bf9\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\u4ea7\u751f\u8d21\u732e\u3002\u8fb9\u7684\u8d21\u732e\u6307\u8fb9\u88ab\u65ad\u6389\uff0c\u70b9\u7684\u8d21\u732e\u6307\u5176\u6210\u4e3a\u65b0\u8fb9\u7684\u7aef\u70b9\u3002\n\n\u56e0\u4e3a\u7f51\u683c\u56fe\u7684\u7279\u6b8a\u6027\uff0c\u6211\u4eec\u4ee5\u524d\u7f00\u4e3a\u4f8b\uff0c\u5f53\u6211\u4eec\u7531 $i-1$ \u8fd9\u4e2a\u524d\u7f00\u8003\u8651\u5230 $i$ \u65f6\uff0c\u5b9e\u9645\u4e0a\u662f\u5728\u5408\u5e76\u539f\u6765\u7684\u751f\u6210\u6811\u548c\u7b2c $i$ \u5217\u8fd9\u4e2a\u94fe\u72b6\u7684\u751f\u6210\u6811\u3002\n\n\u90a3\u6211\u4eec\u53d1\u73b0\uff0c\u53ef\u80fd\u6210\u4e3a\u65b0\u8fb9\u7aef\u70b9\u7684\u70b9\u53ea\u6709\u7ecf\u5ea6\u4e3a $i-1$ \u7684\u70b9\u548c\u7ecf\u5ea6\u4e3a $i$ \u7684\u70b9\uff0c\u6709\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u8fb9\u53ea\u6709\u7ecf\u5ea6\u4e3a $i,i-1$ \u7684\u8fd9\u4e9b\u70b9\u76f8\u4e92\u7684\u6811\u4e0a\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u3002\n\n\u8fd9\u8ba9\u6211\u4eec\u60f3\u5230\u865a\u6811\uff0c\u5373\u6211\u4eec\u53ea\u4fdd\u7559\u521a\u624d\u63d0\u5230\u7684\u201c\u6709\u53ef\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u70b9\u201d\u6765\u6784\u5efa\u865a\u6811\uff0c\u800c\u8fb9\u6743\u5c31\u53d6\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u8fb9\u7684\u8fb9\u6743\uff0c\u8fd9\u6837\u505a\u5c31\u53ef\u4ee5\u65f6\u523b\u4fdd\u8bc1\u6811\u7684\u5927\u5c0f\u662f $O(n)$ \u7684\u3002\n\n### \u7ec6\u8282\u5904\u7406\n\n\u6839\u636e\u521a\u624d\u7684\u63a8\u5bfc\uff0c\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u53ea\u9700\u8981\u50a8\u5b58\u6bcf\u4e2a\u524d\u7f00\u548c\u6bcf\u4e2a\u540e\u7f00\u533a\u95f4\u7684\u865a\u6811\u548c\u9664\u865a\u6811\u8fb9\u4ee5\u5916\u7684\u751f\u6210\u6811\u8fb9\u8fb9\u6743\u548c\u5373\u53ef\u65b9\u4fbf\u5730\u7ef4\u62a4\u7b54\u6848\u3002\n\n\u5e76\u4e14\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u9700\u8981\u5408\u5e76\u524d\u540e\u7f00\uff0c\u6240\u4ee5\u524d\u7f00\u533a\u95f4\u7684\u7b2c\u4e00\u5217\u7684\u70b9\u548c\u540e\u7f00\u533a\u95f4\u7684\u6700\u540e\u4e00\u5217\u7684\u70b9\u540c\u6837\u662f\u5173\u952e\u70b9\u3002\u8fd9\u6837\u6781\u9650\u6570\u636e\u4e0b\u865a\u6811\u70b9\u6700\u591a\u662f $400$ \u5de6\u53f3\uff0c\u90a3\u4e48\u6bcf\u6b21\u5408\u5e76\u6216\u8005\u6c42\u89e3\u65f6\u66b4\u529b\u8dd1 Kruskal \u751f\u6210\u6811\u5373\u53ef\u3002\n\n**\u5173\u4e8e\u865a\u6811**\uff1a\u4e0d\u8981\u7528\u5e38\u89c4\u5355\u8c03\u6808\u7684\u65b9\u5f0f\u5efa\u865a\u6811\uff0c\u56e0\u4e3a\u6bcf\u6b21\u6574\u68f5\u6811\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u90a3\u6837\u6bcf\u6b21\u90fd\u8981\u5904\u7406\u500d\u589e\u6570\u7ec4\uff0c\u6c42\u89e3\u65f6\u4e5f\u5e26 $\\log$ \u4f1a\u4f7f\u5e38\u6570\u975e\u5e38\u5927\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u6574\u6811\u5927\u5c0f\u548c\u5173\u952e\u70b9\u6570\u5dee\u4e0d\u591a\u5927\u7684\u60c5\u51b5\u76f4\u63a5\u5bf9\u6574\u68f5\u6811 DFS \u4e24\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u7b2c\u4e00\u6b21\u5904\u7406\u51fa\u6240\u6709\u9700\u8981\u52a0\u8fdb\u53bb\u7684\u70b9\uff0c\u7b2c\u4e8c\u6b21\u8fde\u8fb9\u5efa\u6811\u3002\u6ce8\u610f\u70b9\u5728\u865a\u6811\u4e0a\u5f53\u4e14\u4ec5\u5f53\u5f53\u524d\u70b9\u662f\u5173\u952e\u70b9\u6216\u5f53\u524d\u70b9\u81f3\u5c11\u4e24\u68f5\u5b50\u6811\u4e2d\u6709\u5173\u952e\u70b9\u3002\n\n### \u8d34\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n#define lint long long\n#define uint unsigned int\nusing namespace std;\ninline int read(){\n\tchar c;int f=1,res=0;\n\twhile(c=getchar(),!isdigit(c))if(c=='-')f*=-1;\n\twhile(isdigit(c))res=res*10+c-'0',c=getchar();\n\treturn res*f;\n}\nconst int N=105,M=1e4+5,P=N*M;\nuint SA,SB,SC;int lim;\ninline int gw(){\n    SA^=SA<<16;SA^=SA>>5;\n    SA^=SA<<1;uint t=SA;\n    SA=SB;SB=SC;SC^=t^SA;\n    return SC%lim+1;\n}\nint n,m;\ninline int trn(int x,int y)\n\t{return (x-1)*m+y;}\ninline int gx(int id)\n\t{return (id-1)/m+1;}\ninline int gy(int id)\n\t{return (id-1)%m+1;}\nstruct edge{int u,v,w;};\ninline bool cmp(edge x,edge y)\n\t{return x.w<y.w;}\nvector<edge> edg[P];\ninline void lnk(int u,int v,int w){\n\tedg[u].push_back({u,v,w});\n\tedg[v].push_back({v,u,w});\n}\nedge e0[N][M],e1[N][M];\ninline void gen(){\n\tn=read();m=read();\n    scanf(\"%u%u%u%d\",&SA,&SB,&SC,&lim);\n    for(int i=1;i<=n;++i)\n        for(int j=1;j<=m;++j){\n        \tif(j<m)\n                e0[i][j]={trn(i,j),trn(i,j+1),gw()};\n            else\n                e0[i][j]={trn(i,j),trn(i,1),gw()};\n        }\n    for(int i=1;i<n;i++)\n        for(int j=1;j<=m;j++)\n            e1[i][j]={trn(i,j),trn(i+1,j),gw()};\n}\nstruct tree{\n\tvector<int> ps;\n\tvector<edge> es;\n\tlint sum;\n\tinline void build(int j){\n\t\tfor(int i=1;i<=n;++i){\n\t\t\tps.push_back(trn(i,j));\n\t\t\tif(i==n)continue;\n\t\t\tes.push_back(e1[i][j]);\n\t\t}\n\t}\n\tinline void merge(tree &x){\n\t\tsum+=x.sum;\n\t\tfor(edge e:x.es)es.push_back(e);\n\t\tfor(int u:x.ps)ps.push_back(u);\n\t}\n\tinline lint query(){\n\t\tlint res=sum;\n\t\tfor(edge e:es)res+=e.w;\n\t\treturn res;\n\t}\n}pre[M],suf[M];\ninline bool ex(vector<int> &a,int v){\n\tauto it=lower_bound(a.begin(),a.end(),v);\n\treturn it!=a.end()&&*it==v;\n}\ninline tree merge(int j,tree &x,tree &y){\n\ttree z=x;z.merge(y);\n\tfor(int i=1;i<=n;++i)\n\t\tz.es.push_back(e0[i][j]);\n\treturn z;\n}\nint fa[P];\nint find(int x){\n\tif(x==fa[x])return x;\n\treturn fa[x]=find(fa[x]);\n}\nvector<edge> gra[P];\ninline void init(tree &x)\n\t{for(int u:x.ps)gra[u].resize(0),fa[u]=u;}\ninline lint Kru(tree &x){\n\tlint sum=0;\n\tsort(x.es.begin(),x.es.end(),cmp);\n\tvector<edge> res;\n\tfor(edge e:x.es){\n\t\tint u=find(e.u),v=find(e.v);\n\t\tif(u==v)continue;sum+=e.w;\n\t\tfa[u]=v;res.push_back(e);\n\t\tgra[e.u].push_back({e.u,e.v,e.w});\n\t\tgra[e.v].push_back({e.v,e.u,e.w});\n\t}x.es=res;return sum;\n}\nbitset<P> flg;\ninline int mk(tree &x){\n\tint mn=1e9,mx=0,res;\n\tfor(int u:x.ps){\n\t\tmn=min(mn,gy(u));\n\t\tmx=max(mx,gy(u));\n\t}\n\tfor(int u:x.ps){\n\t\tif(gy(u)==mn||gy(u)==mx)\n\t\t\tflg[u]=1,res=u;\n\t\telse flg[u]=0;\n\t}return res;\n}\nint DFS0(int u,int fa){\n\tint cnt=0;\n\tfor(edge e:gra[u])\n\t\tif(e.v!=fa)cnt+=DFS0(e.v,u);\n\tif(cnt>1)flg[u]=1;\n\treturn (int)(flg[u]||cnt);\n}\nvoid DFS1(int u,int fa,int lst,int mx,tree &x){\n\tif(flg[u]){\n\t\tif(lst)\n\t\t\tx.es.push_back({u,lst,mx}),x.sum-=mx;\n\t\tlst=u;mx=0;x.ps.push_back(u);\n\t}\n\tfor(edge e:gra[u]){\n\t\tif(e.v==fa)continue;\n\t\tDFS1(e.v,u,lst,max(mx,e.w),x);\n\t}\n}\ninline void upd(tree &x,bool tp){ \n\tinit(x);lint sum=Kru(x);\n\tif(!tp)return;\n\tx.sum+=sum;int rt=mk(x);\n\tx.es.resize(0);x.ps.resize(0);\n\tDFS0(rt,0);DFS1(rt,0,0,0,x);\n}\ninline void calc(){\n\tpre[1].build(1);\n\tfor(int i=2;i<=m;++i){\n\t\tpre[i].build(i);\n\t\tpre[i]=merge(i-1,pre[i-1],pre[i]);\n\t\tupd(pre[i],true);\n\t}\n\tsuf[m].build(m);\n\tfor(int i=m-1;i>=1;--i){\n\t\tsuf[i].build(i);\n\t\tsuf[i]=merge(i,suf[i+1],suf[i]);\n\t\tupd(suf[i],true);\n\t}\n}\ninline lint solve(int l,int r){\n\ttree res=merge(m,pre[l-1],suf[r+1]);\n\tupd(res,false);return res.query();\n}\nint main(){\n\tgen();calc();\n\tint q=read();\n\twhile(q--){\n\t\tint l=read(),r=read();\n\t\tprintf(\"%lld\\n\",solve(l,r));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1638271061,
        "uid": 206258,
        "name": "SDNetFriend",
        "ccfLevel": 7,
        "title": "P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe \u9898\u89e3"
    },
    {
        "content": "# [LG-P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe](https://www.luogu.com.cn/problem/P5360) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=LG-P5360-Solution)\n\n### Solution\n\n\u5177\u4f53\u505a\u6cd5\u9898\u89e3\u533a\u91cc\u5df2\u7ecf\u5f88\u8be6\u5c3d\u4e86\uff0c\u57fa\u672c\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u8fd9\u91cc\u4e3b\u8981\u7b80\u5355\u63d0\u4e00\u4e0b\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u3002\n\n\u9996\u5148\u8003\u8651\u4e00\u4e0b\u672c\u9898\u7684\u5927\u81f4\u601d\u8def\uff0c\u6784\u5efa\u524d\u7f00 MST \u548c\u540e\u7f00 MST \u6bcf\u6b21\u8be2\u95ee\u5408\u6210\u5373\u53ef\u3002\u5408\u6210\u65f6\u901a\u8fc7\u5c06\u4e24\u4e2a MST \u6240\u6709\u8fb9\u5408\u6210\u4e3a\u65b0\u7684 MST \u7136\u540e\u901a\u8fc7\u865a\u6811\u7684\u601d\u60f3\u53ea\u4fdd\u7559\u5173\u952e\u70b9\uff0c\u5c06\u6811\u7b80\u5316\u4ee5\u4fdd\u8bc1\u70b9\u6570\u7ea7\u522b\u3002\n\n1. \u70b9\u7684\u91cd\u6807\u53f7\n\n\u8fd9\u662f\u6211\u7b2c\u4e00\u4e2a\u5361\u4f4f\u7684\u70b9\uff0c\u6700\u5f00\u59cb\u7684\u601d\u8def\u5c31\u662f\u6734\u7d20\u5730\u5f00\u4e00\u5806 `unordered_map` \u7136\u540e\u624b\u5199 `pair < int, int >` \u7684\u54c8\u5e0c\u5efa\u51fa\u6765\u4e00\u5806\u6620\u5c04\uff0c\u5c06\u5750\u6807\u6620\u5c04\u4e3a\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u5efa MST \u6216\u8005\u865a\u6811\u7684\u65f6\u5019\u90fd\u91cd\u641e\u4e00\u904d\uff0c\u5199\u4e86\u4e00\u4f1a\u53d1\u73b0\u8fd9\u4e1c\u897f\u5e38\u6570\u4f3c\u4e4e\u6709\u4e9b\u7206\u70b8\uff0c\u4e14\u7ec6\u8282\u5de8\u591a\uff0c\u7ffb\u4e86\u4e00\u4e0b\u9898\u89e3\u533a\u7406\u89e3\u4e86\u4e00\u4f1a\u624d\u660e\u767d\u8fd9\u4e2a\u91cd\u6807\u53f7\u70b9\u7684\u601d\u8def\uff1a\n\n\u6211\u4eec\u8fd8\u662f\u56de\u5230\u5408\u6210 MST \u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u5982\u5bf9\u4e8e $ [1, i - 1] \\to [1, i] $ \u7684\u8fc7\u7a0b\uff0c\u5173\u952e\u70b9\u7684\u7eb5\u5750\u6807\u4ece $ 1 $ \u548c $ i - 1 $ \u53d8\u4e3a $ 1 $ \u548c $ i $\uff0c\u8fde\u7ed3\u7684\u6240\u6709\u8fb9\u4e3a $ i - 1\\ \\to i $\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5bb9\u6613\u7406\u89e3\u5927\u591a\u6570\u9898\u89e3\u7684\u6620\u5c04\u65b9\u5f0f\u4e86\uff0c\u4f7f\u6240\u6709 MST \u6ee1\u8db3\u524d $ n $ \u4e2a\u662f\u7b2c $ 1 $ \u5217\uff0c\u540e $ n $ \u4e2a\u662f\u6700\u540e $ 1 $ \u5217\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5728\u4e00\u822c\u7684\u5b9e\u73b0\u4e2d\u662f\u81ea\u7136\u7684\u3002\u5408\u6210 $ A $ \u548c $ B $ \u4e24\u4e2a MST \u7684\u65f6\u5019\uff0c\u76f4\u63a5\u6309\u5e8f\u5c06 $ B $ \u7684\u70b9\u63a5\u5230 $ A $ \u4e4b\u540e\uff0c\u7136\u540e\u5bf9 $ A $ \u7684\u540e $ n $ \u4e2a\u5206\u522b\u4e0e $ B $ \u7684\u524d $ n $ \u4e2a\u8fde\u7ed3\uff0c\u5e76\u5c06 $ A $ \u7684\u524d $ n $ \u548c $ B $ \u7684\u540e $ n $ \u4f5c\u4e3a\u5173\u952e\u70b9\uff0c\u8fd9\u6837\u5373\u53ef\u4f18\u7f8e\u5730\u89e3\u51b3\u70b9\u7684\u91cd\u6807\u53f7\u3002\n\n2. \u5173\u952e\u70b9\u7684\u9009\u53d6\n\n\u5bf9\u4e8e\u4e0a\u8ff0\u70b9\u7684\u91cd\u6807\u53f7\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e $ 1 $ \u5217\u7684\u94a6\u5b9a\u9009\u62e9\u7684\u539f\u56e0\uff0c\u4e2a\u4eba\u7406\u89e3\u5c31\u662f\u5bf9\u4e8e\u7ef4\u62a4\u524d\u540e\u7f00\u7684\u65f6\u5019\uff0c\u94a6\u5b9a $ 1 $ \u5217\u4e3a\u5173\u952e\u70b9\u663e\u7136\u662f\u975e\u5fc5\u8981\u7684\uff0c\u4f46\u7ef4\u62a4\u540e\u5c31\u53ef\u4ee5\u540c\u65f6\u9002\u914d\u5408\u5e76\u524d\u540e\u7f00\uff0c\u5e94\u8be5\u5c5e\u4e8e\u662f\u5199\u6cd5\u7684\u4f18\u5316\u3002\n\n3. \u865a\u6811\u7684\u6784\u5efa\n\n\u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\u672c\u6765\u662f\u51c6\u5907\u76f4\u63a5\u5199\u4e24\u6b21\u6309 dfn \u6392\u5e8f\u7684\u6734\u7d20\u5efa\u865a\u6811\u7684\uff0c\u540e\u6765\u770b\u5230\u9898\u89e3\u533a\u7528\u7684\u90fd\u662f\u4e24\u6b21 dfs\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u662f\u53ef\u4ee5\u51cf\u5c11\u4e0d\u5c11\u5e38\u6570\u7684\uff0c\u56e0\u4e3a\u6bcf\u6b21\u7684\u6811\u7684\u5f62\u6001\u90fd\u5b8c\u5168\u4e0d\u540c\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u91cd\u6784\u6811\u5256\u6216\u8005\u500d\u589e\uff0c\u4e8e\u662f\u5c31\u4e0d\u5982 $ O(n) $ \u7684\u4e24\u6b21 dfs \u4e86\u3002\n\n4. \u524d\u540e\u7f00\u7684\u5408\u5e76\n\n\u8fd9\u91cc\u6ce8\u610f\u9700\u8981\u7528\u540e\u7f00\u5728\u524d\u524d\u7f00\u5728\u540e\u8fdb\u884c\u5408\u6210\uff0c\u56e0\u4e3a\u6309\u7167\u6211\u7684\u5199\u6cd5\u5408\u5e76\u662f\u6709\u5e8f\u7684\uff0c\u5373\u662f\u5bf9 $ A $ \u7684\u540e $ n $ \u4e0e $ B $ \u7684\u524d $ n $\uff0c\u5982\u679c\u524d\u7f00\u5728\u524d\u540e\u7f00\u5728\u540e\u8fde\u8fb9\u5c31\u4f1a\u53cd\u4e86\u3002\n\n5. \u8d44\u6e90\u7684\u56de\u6536\n\n\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e `500MiB` \u7684\u9650\u5236\u6309\u7167\u6211\u7684\u5199\u6cd5\u6700\u591a\u5f00 $ 2 \\times 10^7 $ \u6761\u8fb9\uff0c\u8fd9\u662f\u4e0d\u591f\u7528\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5b9e\u73b0\u5bf9\u8fb9\u7684\u590d\u7528\uff0c\u5bf9\u5e94\u7740\u4ee3\u7801\u4e2d\u7684\uff1a\n\n```cpp\nvoid* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n```\n\n\u6539\u4e3a\uff1a\n\n```cpp\nvoid* Edge::operator new(size_t){static Edge* P = ed; if(P - ed > 20100000)P = ed; return P++;}\n```\n\n\u6ce8\u610f\u8fd9\u91cc\u65e0\u9700\u6e05\u7a7a\u8fb9\u7684\u5185\u5b58\u6c60\u662f\u56e0\u4e3a\u6bcf\u6b21\u6211\u8c03\u7528 `new` \u7684\u65f6\u5019\u90fd\u5bf9\u5176\u8fdb\u884c\u4e86\u521d\u59cb\u5316\u5217\u8868\u7684\u521d\u59cb\u5316\u3002\n\n\u4ee3\u7801\u5927\u540c\u5c0f\u5f02\u3002\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; if(P - ed > 20100000)P = ed; return P++;}\n#define ROPNEW_NODE void* Node::operator new(size_t){static Node* P = nd; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, M, Q;\nunsigned int SA, SB, SC;\nint lim;\nstruct edge{int s, t; int val;};\nint nxtR[110][11000], nxtL[110][11000];\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    int val;\n    OPNEW;\n}ed[21000000];\nROPNEW;\n\nclass VirtualTree{\nprivate:\n    Edge* head[1100];\npublic:\n    bitset < 1100 > isKey;\n    bitset < 1100 > invt;\n    basic_string < edge > edgs;\n    void Clear(void){memset(head, 0, sizeof head);  isKey.reset(); invt.reset(); edgs.clear();}\n    VirtualTree(void){Clear();}\n    void AddEdge(int s, int t, int val){\n        head[s] = new Edge{head[s], t, val};\n        head[t] = new Edge{head[t], s, val};\n    }\n    bool dfs_pre(int p = 1, int fa = 0){\n        int cnt(0);\n        for(auto i = head[p]; i; i = i->nxt)\n            if(SON != fa)cnt += dfs_pre(SON, p);\n        invt[p] = isKey[p] | (cnt >= 2);\n        return invt[p] | bool(cnt);\n    }\n    void dfs_link(int p = 1, int lst = 0, int mxv = 0, int fa = 0){\n        if(invt[p]){\n            if(lst)edgs += edge{lst, p, mxv};\n            lst = p, mxv = 0;\n        }\n        for(auto i = head[p]; i; i = i->nxt)\n            if(SON != fa)dfs_link(SON, lst, max(mxv, i->val), p);\n    }\n}vt;\n\nclass MST{\nprivate:\npublic:\n    int tot;\n    ll sum;\n    basic_string < edge > edgs;\n    void Clear(void){edgs.clear(); sum = 0; tot = 0;}\n    MST(void){Clear();}\n    ll Query(void){ll ret(sum); for(auto edg : edgs)ret += edg.val; return ret;}\n}pre[11000], suf[11000];\n\nclass UnionFind{\nprivate:\n    int fa[1100];\npublic:\n    void Clear(void){for(int i = 0; i <= 1010; ++i)fa[i] = i;}\n    UnionFind(void){Clear();}\n    int Find(int x){return x == fa[x] ? x : fa[x] = Find(fa[x]);}\n    void Union(int s, int t){if(Find(s) != Find(t))fa[Find(s)] = Find(t);}\n}uf;\n\nint main(){\n    N = read(), M = read();\n    auto GetWeight = [](void)->int{SA ^= SA << 16; SA ^= SA >> 5; SA ^= SA << 1; unsigned int t = SA;SA = SB;SB = SC;SC ^= t ^ SA;return SC % lim + 1;};\n    auto Gen = [GetWeight](void)->void{\n        scanf(\"%u%u%u%d\", &SA, &SB, &SC, &lim);\n        for(int i = 1; i <= N; ++i)for(int j = 1; j <= M; ++j)nxtR[i][j] = GetWeight();\n        for(int i = 1; i < N; ++i)for(int j = 1; j <= M; ++j)nxtL[i][j] = GetWeight();\n    }; Gen();\n    auto MergeMST = [](const MST &A, const MST &B, int idx)->auto{\n        unordered_map < int, int > mp;\n        ll cur(0);\n        MST ret;\n        ret.edgs += A.edgs;\n        for(auto edg : B.edgs)ret.edgs += edge{edg.s + A.tot, edg.t + A.tot, edg.val};\n        for(int i = 1; i <= N; ++i)ret.edgs += edge{A.tot - N + i, A.tot + i, nxtR[i][idx]};\n        sort(ret.edgs.begin(), ret.edgs.end(), [](const edge &a, const edge &b)->bool{return a.val < b.val;});\n        uf.Clear(), vt.Clear();\n        for(int i = 1; i <= N; ++i)vt.isKey[i] = vt.isKey[A.tot + B.tot - i + 1] = true;\n        for(auto edg : ret.edgs)\n            if(uf.Find(edg.s) != uf.Find(edg.t))vt.AddEdge(edg.s, edg.t, edg.val), uf.Union(edg.s, edg.t), cur += edg.val;\n        vt.dfs_pre(), vt.dfs_link();\n        ret.edgs = vt.edgs; ret.tot = 0;\n        for(int i = 1; i <= A.tot + B.tot; ++i)if(vt.invt[i])mp[i] = ++ret.tot;\n        for(auto &edg : ret.edgs)edg.s = mp[edg.s], edg.t = mp[edg.t], cur -= edg.val;\n        ret.sum = A.sum + B.sum + cur;\n        return ret;\n    };\n    for(int j = 1; j <= M; ++j)for(int i = 1; i < N; ++i)\n        pre[j].edgs += edge{i, i + 1, nxtL[i][j]}, suf[j].edgs += edge{i, i + 1, nxtL[i][j]}, suf[j].tot = pre[j].tot = N;\n    for(int j = 2; j < M; ++j)pre[j] = MergeMST(pre[j - 1], pre[j], j - 1);\n    for(int j = M - 1; j > 1; --j)suf[j] = MergeMST(suf[j], suf[j + 1], j);\n    Q = read();\n    while(Q--){\n        int l = read(), r = read();\n        printf(\"%lld\\n\", MergeMST(suf[r + 1], pre[l - 1], M).Query());\n    }\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2023_03_20 \u521d\u7a3f",
        "postTime": 1679299426,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "LG-P5360 [SDOI2019]\u4e16\u754c\u5730\u56fe \u9898\u89e3"
    }
]