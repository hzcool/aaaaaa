[
    {
        "content": "updated\uff1a\u8fd9\u4efd\u4ee3\u7801\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u4e86\n\n\u5efa\u8bae\u4f7f\u7528 FHQTreap \u6216 LeafyTree \u7b49\u53ef\u4ee5\u5206\u88c2\u3001\u5408\u5e76\u7684\u5e73\u8861\u6811\u6765\u5b9e\u73b0\u3002  \n\u672c\u505a\u6cd5\u7528\u7684\u662f FHQTreap\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\u7684\u505a\u6cd5   \n\u4f17\u6240\u5468\u77e5\uff0c\u5982\u679c\u6ca1\u6709\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\uff0cODT\u4f1a\u88ab\u5361\u98de\uff0c\u4e0d\u8fc7\u8fd9\u9898\u53ef\u4ee5\u7528\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\u6765\u5b9e\u73b0\u3002  \n\n\u5bf9\u4e8e $1,2,3,6$ \u64cd\u4f5c\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u8fc7\u591a\u89e3\u91ca\uff0c\u505a\u8fc7 [\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u6587\u827a\u5e73\u8861\u6811](https://www.luogu.org/problem/P5055) \u7684\u8bdd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5199\u51fa\u6765\u3002  \n\n\u5bf9\u4e8e $5$ \u64cd\u4f5c\uff0c\u6211\u4eec\u94a6\u5b9a $l_1<l_2$\uff0c\u7136\u540e\u66b4\u529b\u628a\u5e8f\u5217\u5206\u6210 $5$ \u6bb5\uff0c\u628a\u7b2c $2$ \u6bb5\u548c\u7b2c $4$ \u6bb5\u4ea4\u6362\u4f4d\u7f6e\u540e\u518d\u5408\u5e76\u5373\u53ef\u3002  \n\n\u6700\u540e\u662f $4$ \u64cd\u4f5c\uff0c\u8fd8\u662f\u5206\u6210 $5$ \u4e2a\u533a\u95f4\uff0c\u8981\u88ab\u8986\u76d6\u6389\u7684\u533a\u95f4\u5c31\u6254\u6389\uff0c\u7136\u540e\u4ece\u53e6\u5916\u4e00\u4e2a\u533a\u95f4\u7684\u6839\u8282\u70b9\u76f4\u63a5\u590d\u5236\u4e00\u4efd\uff0c\u518d\u5408\u5e76\u56de\u53bb\u5c31\u597d\u4e86\u3002\n\n\u8fd9\u9898\u9700\u8981\u53ef\u6301\u4e45\u5316\u7684\u539f\u56e0\uff0c\u5c31\u662f $4$ \u64cd\u4f5c\u8981\u590d\u5236\u8282\u70b9\u3002\n\n\u7531\u4e8e\u6b64\u9898\u7684 $n,m$ \u8fbe\u5230\u4e86 $3\\times10^5$\uff0c\u6240\u4ee5\u9700\u8981\u5b9a\u671f\u91cd\u6784\uff0c\u4ee5\u8282\u7701\u7a7a\u95f4\u3002  \n\u6570\u7ec4\u6700\u5927\u53ea\u80fd\u5f00\u5230 $4\\times10^6$\uff0c\u6240\u4ee5\u53ea\u8981\u53d1\u73b0\u8282\u70b9\u6570\u591a\u4e8e $3.6\\times10^6$ \u5c31\u7ebf\u6027\u91cd\u6784\u4e00\u6ce2\u3002\n\n\u7ec6\u8282\u975e\u5e38\u591a\uff0c\u5f88\u4e0d\u597d\u5199\u3002  \n\u4ee3\u7801\u5982\u4e0b\uff1a  \n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<ctime>\n#define N 4000003\n#define ls son[u][0]\n#define rs son[u][1]\n#define reg register\n#define ll long long\n#define p 1000000007\n#define mid ((l+r)>>1)\nusing namespace std;\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n\tif(x>9) print(x/10);\n\tputchar(x%10+'0');\n}\n\ninline int add(int x,int y){\n    return x+y>=p?x+y-p:x+y;\n}\n\nint a[N],son[N][2],size[N];\nint sum[N],taga[N],tagc[N],b[300003];\nbool rev[N];\nint n,q,rt,cnt,tp;\n\ninline int neww(int x){\n    int u = ++cnt;\n\tsize[u] = 1;\n    a[u] = sum[u] = x;\n    tagc[u] = -1;\n    ls = rs = taga[u] = rev[u] = 0;\n    return cnt;\n}\n\ninline int copy(int u){\n    int v = ++cnt;\n    a[v] = a[u],sum[v] = sum[u];\n    son[v][0] = ls,son[v][1] = rs;\n    rev[v] = rev[u];\n    size[v] = size[u];\n    taga[v] = taga[u];\n    tagc[v] = tagc[u];\n    return v;\n}\n\ninline void pushup(int u){\n    size[u] = size[ls]+size[rs]+1;\n    sum[u] = add(add(sum[ls],sum[rs]),a[u]);\n}\n\ninline void pushr(int u){\n    swap(ls,rs);\n    rev[u] ^= 1;\n}\n\ninline void pusha(int u,int k){\n    a[u] = add(a[u],k);\n    taga[u] = add(taga[u],k);\n    sum[u] = (sum[u]+(ll)size[u]*k)%p;\n}\n\ninline void pushc(int u,int k){\n    taga[u] = 0;\n    tagc[u] = a[u] = k;\n    sum[u] = (ll)size[u]*k%p;\n}\n\ninline void pushdown(int u){\n    if(tagc[u]!=-1||taga[u]||rev[u]){\n        if(ls) ls = copy(ls);\n        if(rs) rs = copy(rs);\n    }\n    if(tagc[u]!=-1){\n        if(ls) pushc(ls,tagc[u]);\n        if(rs) pushc(rs,tagc[u]);\n        tagc[u] = -1;\n    }\n    if(taga[u]){\n        if(ls) pusha(ls,taga[u]);\n        if(rs) pusha(rs,taga[u]);\n        taga[u] = 0;\n    }\n    if(!rev[u]) return;\n    if(ls) pushr(ls);\n    if(rs) pushr(rs);\n    rev[u] = 0;\n}\n\nint merge(int u,int v){\n    if(!u||!v) return u|v;\n    if(rand()%(size[u]+size[v])<size[u]){\n        pushdown(u),u = copy(u);\n        son[u][1] = merge(son[u][1],v);\n        pushup(u);\n        return u;\n    }else{\n        pushdown(v),v = copy(v);\n        son[v][0] = merge(u,son[v][0]);\n        pushup(v);\n        return v;\n    }\n}\n\nint merge1(int u,int v){\n    if(!u||!v) return u|v;\n    if(rand()%(size[u]+size[v])<size[u]){\n        son[u][1] = merge1(son[u][1],v);\n        pushup(u);\n        return u;\n    }else{\n        son[v][0] = merge1(u,son[v][0]);\n        pushup(v);\n        return v;\n    }\n}\n\nvoid split(int cur,int k,int &u,int &v){\n    if(!cur){\n        u = v = 0;\n        return;\n    }\n    pushdown(cur);\n    if(size[son[cur][0]]<k){\n        u = copy(cur);\n        split(son[u][1],k-size[son[u][0]]-1,son[u][1],v);\n        pushup(u);\n    }else{\n        v = copy(cur);\n        split(son[v][0],k,u,son[v][0]);\n        pushup(v);\n    }\n}\n\ninline void reverse(int l,int r){\n    int x,y,z;\n    split(rt,l-1,x,y);\n    split(y,r-l+1,y,z);\n    y = copy(y);\n    pushr(y);\n    rt = merge(merge(x,y),z);\n}\n\ninline void change(int l,int r,int k){\n    int x,y,z;\n    split(rt,l-1,x,y);\n    split(y,r-l+1,y,z);\n    y = copy(y);\n    pushc(y,k);\n    rt = merge(merge(x,y),z);\n}\n\ninline void modify(int l,int r,int k){\n    int x,y,z;\n    split(rt,l-1,x,y);\n    split(y,r-l+1,y,z);\n    y = copy(y);\n    pusha(y,k);\n    rt = merge(merge(x,y),z);\n}\n\ninline void swap(int l1,int r1,int l2,int r2){\n    int v,w,x,y,z;\n    if(l1>l2){\n        swap(l1,l2);\n        swap(r1,r2);\n    }\n    split(rt,l1-1,v,w);\n    split(w,r1-l1+1,w,x);\n    split(x,l2-r1-1,x,y);\n    split(y,r2-l2+1,y,z);\n    rt = merge(merge(merge(merge(v,y),x),w),z);\n}\n\ninline void paste(int l1,int r1,int l2,int r2){\n    bool flag = false;\n    int v,w,x,y,z;\n    if(l1>l2){\n        swap(l1,l2);\n        swap(r1,r2);\n        flag = true;\n    }\n    split(rt,l1-1,v,w);\n    split(w,r1-l1+1,w,x);\n    split(x,l2-r1-1,x,y);\n    split(y,r2-l2+1,y,z);\n    if(flag) w = copy(y);\n    else y = copy(w);\n    rt = merge(merge(merge(merge(v,w),x),y),z);\n}\n\ninline int query(int l,int r){\n    int x,y,z,res;\n    split(rt,l-1,x,y);\n    split(y,r-l+1,y,z);\n    res = sum[y];\n    rt = merge(merge(x,y),z);\n    return res;\n}\n\nvoid dfs(int u){\n    pushdown(u);\n    if(ls) dfs(ls);\n    b[++tp] = a[u];\n    if(rs) dfs(rs);\n}\n\nint build(int l,int r){\n\tif(l>r) return 0;\n\tint u = neww(b[mid]);\t\n\tls = build(l,mid-1);\n\trs = build(mid+1,r);\n\tpushup(u);\n\treturn u;\n}\n\nint main(){\n    srand(time(0));\n    int op,l1,r1,l2,r2,k;\n    read(n),read(q);\n    for(reg int i=1;i<=n;++i) read(b[i]);\n    rt = build(1,n);\n    while(q--){\n        read(op),read(l1),read(r1);\n        if(op==1){\n        \tprint(query(l1,r1));\n        \tputchar('\\n');\n\t\t}else if(op==2){\n            read(k);\n            change(l1,r1,k);\n        }else if(op==3){\n            read(k);\n            modify(l1,r1,k);\n        }else if(op==4){\n            read(l2),read(r2);\n            paste(l1,r1,l2,r2);\n        }else if(op==5){\n            read(l2),read(r2);\n            swap(l1,r1,l2,r2);\n        }else reverse(l1,r1);\n        if(cnt>3600000){\n        \ttp = 0;\n        \tdfs(rt);\n        \trt = cnt = 0;\n        \trt = build(1,n);\n\t\t}\n    }\n    tp = 0;\n    dfs(rt);\n    for(reg int i=1;i<=n;++i) print(b[i]),putchar(' ');\n    return 0;\n}\n```",
        "postTime": 1570772001,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "\u6628\u5929\u665a\u4e0a\u5b66\u7684\u73c2\u6735\u8389\u6811\uff0c\u4eca\u5929\u6765\u6572\u4e00\u6572$Q\\mu Q$\uff08\u600e\u4e48\u8bf4\u8fd9\u4e5f\u662f\u4e00\u9053\u73c2\u6735\u8389\u6811\u6a21\u677f\u9898\u4e86\uff09\n\n\u5b9e\u9645\u4e0a\u73c2\u6735\u8389\u6811\u662f\u4e00\u4e2a\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u5176\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u4fdd\u8bc1\u5e76\u4e14\u5f88\u5bb9\u6613\u88ab\u5361\uff0c\u4f46\u662f\u4eba\u5bb6\u5728\u968f\u673a\u60c5\u51b5\u4e0b\u8dd1\u5f97\u5feb\u554a$Q\\omega Q$\uff0c\u800c\u4e14\u80fd\u505a\u5f88\u591a\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u5f88\u96be\u7ef4\u62a4\u7684\u4e1c\u897f\u3002\n\n\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u5b66\u8fc7$set$\uff0c\u5efa\u8bae\u5148\u5b66\u4e60$set$\u7684\u7528\u6cd5\u540e\u7ee7\u7eed\u98df\u7528\u3002\n\n## \u4ec0\u4e48\u662f\u73c2\u6735\u8389\u6811\n\u73c2\u6735\u8389\u6811\uff08\u6211\u8c8c\u4f3c\u6ca1\u6709\u770b\u51fa\u6765\u5b83\u8ddf\u6811\u6709\u4ec0\u4e48\u5173\u7cfb$QnQ$\uff09\u662f\u4e00\u79cd\u5229\u7528$set$\u6765\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7b3c\u7edf\u5730\u8bb2\uff0c\u73c2\u6735\u8389\u6811\u5c31\u662f**\u5c06\u539f\u5e8f\u5217\u5206\u6210\u4e86\u82e5\u5e72\u5757\uff0c\u6bcf\u4e00\u5757\u4e2d\u7684\u6570\u90fd\u76f8\u540c\uff0c\u7528\u4e09\u5143\u7ec4($l,r,sum)$\u8868\u793a**\uff0c\u4f8b\u5982\u539f\u5e8f\u5217\u662f$2,3,3,3,2,1$\uff0c\u5219\u5b83\u5728\u73c2\u6735\u8389\u6811\u4e2d\u7684\u7ed3\u70b9\u53ef\u80fd\u662f$(1,1,2),(2,4,3),(5,5,2),(6,6,1)$\u3002$(2,4,3)$\u5373\u8868\u793a$[2,4]$\u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u90fd\u662f$3$\u3002\u6211\u4eec\u4ee5\u5de6\u7aef\u70b9$l$\u4e3a\u5173\u952e\u5b57\uff0c\u653e\u5230$set$\u91cc\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u53ef\u89c1\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\u5f88\u5bb9\u6613\u88ab\u5361\uff0c\u4f46\u80fd\u7528\u73c2\u6735\u8389\u6811\u505a\u7684\u9898\u76ee\u57fa\u672c\u6709\u4e0b\u5217\u4e24\u9879\u6761\u4ef6\uff1a\n\n1. \u6570\u636e\u968f\u673a\uff0c\u51fa\u9898\u4eba\u4e0d\u4f1a\u6076\u610f\u5361\u4f60\n2. \u6709\u63a8\u5e73\u64cd\u4f5c\uff0c\u5373\u5c06$[l,r]$\u4e2d\u7684\u6240\u6709\u6570\u8d4b\u503c\u4e3a$val$\u8fd9\u6837\u7684\u64cd\u4f5c\n\n\u6709\u4e86\u63a8\u5e73\u64cd\u4f5c\uff0c\u6211\u4eec\u624d\u80fd\u4fdd\u8bc1\u73c2\u6735\u8389\u6811\u4e2d\u7684\u8282\u70b9\u4e2a\u6570\u4e0d\u4f1a\u592a\u591a\u3002\n```cpp\nstruct node\n{\n\tint l,r;mutable ll sum;\n\tbool operator <(const node&x) const {return l<x.l;}\n} a[N],b[N];\nset<node>S;\n```\n\u8fd9\u4e2a$mutable$\u662f\u4ec0\u4e48\u5462\uff1f\u4e00\u822c\u7684$set$\u662f\u4e0d\u5141\u8bb8\u4fee\u6539\u5185\u90e8\u5143\u7d20\u7684\uff0c\u4f46\u5982\u679c\u6211\u4eec\u52a0\u4e0a\u4e86$mutable$\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u5230\u5b9e\u65f6\u4fee\u6539\u8fd9\u4e2a$sum$\u7684\u6570\u503c\u3002\n\n## \u5982\u4f55\u5b9e\u73b0\u73c2\u6735\u8389\u6811\n\n### $Part1\\quad split$\u64cd\u4f5c\n\u5728\u4fee\u6539\u548c\u67e5\u8be2\u7684\u65f6\u5019\u96be\u9053\u8981\u50cf\u5206\u5757\u5206\u4e24\u79cd\u60c5\u51b5\u6574\u5757\u548c\u8fb9\u89d2\u90a3\u6837\u505a\u5417\uff1f\u597d\u9ebb\u70e6\u554a$QrQ$\u3002\n\n$Split$\u64cd\u4f5c\u662f\u73c2\u6735\u8389\u6811\u7684\u91cd\u70b9\u90e8\u5206\uff0c\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u5c06\u6211\u4eec\u8981\u8be2\u95ee\u7684\u533a\u95f4$[l,r]$\u7ed9\u72ec\u7acb\u51fa\u6765\u3002\n\n**\u7ed9\u5b9a$l,r$,\u5c06$l$\u548c$r$\u5206\u522b\u62c6\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u5f00\u5934\u548c\u7ed3\u5c3e**\n\n\u8fd8\u662f\u4ee5$2,3,3,3,2,1$\u4e3a\u4f8b\uff0c\u6211\u4eec\u5982\u679c\u8981\u67e5\u8be2$[3,5]$\u8fd9\u4e00\u4e2a\u533a\u95f4\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u73c2\u6735\u8389\u6811\u91cc\u6709\u8fd9\u6837\u4e24\u4e2a\u8282\u70b9$(2,4,3),(5,5,2)$\uff0c\u5305\u542b\u4e86$[3,5]$\u8fd9\u4e2a\u533a\u95f4\uff0c\u4f46\u662f\u591a\u51fa\u6765\u4e00\u4e2a$2$\u4ee4\u4eba\u5f88\u4e0d\u723d\uff0c\u90a3\u4e48\u6211\u4eec\u628a$(2,4,3)$\u5206\u6210$(2,2,3)$\u548c$(3,4,3)$\uff0c\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u5bf9$(3,4,3),(5,5,2)$\u8fd9\u4e24\u4e2a\u8282\u70b9\u64cd\u4f5c\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd9\u6837\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002\n\n\u90a3\u5177\u4f53\u600e\u4e48\u64cd\u4f5c\u5462\uff1f\uff08\u6ce8\uff1a\u6211\u7684$split$\u4e0e\u7f51\u4e0a\u5176\u4ed6\u7684\u5199\u6cd5\u4e0d\u592a\u4e00\u6837\uff09\n\n\u7531\u4e8e\u6211\u4eec\u7684\u8282\u70b9\u4ee5\u5de6\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u5b58\u5728$set$\u91cc\uff08\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e0b\u9762\u6240\u6709\u7684$set$\u90fd\u7528$S$\u8868\u793a\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u5f88\u5feb\u627e\u5230\u4efb\u610f\u70b9$x$\u6240\u5728\u7684\u5757\uff0c\u5373$--S.upper\\_bound(\\{x,x,0\\})$\u3002\u4e0b\u9762\u7528$p$\u6765\u8868\u793a\u5b9a\u4f4d\u5230\u7684\u96c6\u5408\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u505a\u4e24\u6b65\uff1a\u62c6$l$\uff0c\u548c\u62c6$r$\u3002\n\n\u5148\u8bf4\u62c6$l$\u3002\u5982\u679c$p.l\u2260l$\uff0c\u5373$l$\u4e0d\u662f\u4efb\u4f55\u4e00\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u628a\u5b83\u62c6\u5f00\uff0c\u62c6\u6210$\\{p.l,l-1,p.sum\\}$\u548c$\\{l,p.r,p.sum\\}$\u3002\u8fd9\u6837$l$\u5c31\u6210\u4e3a\u4e86\u540e\u9762\u4e00\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\n\n\u518d\u8bf4\u62c6$r$\u3002\u5982\u679c$p.r\u2260r$\uff0c\u5373$r$\u4e0d\u662f\u4efb\u4f55\u4e00\u5757\u7684\u7ed3\u675f\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u628a\u5b83\u62c6\u6210$\\{p.l,r,p.sum\\}$\u548c$\\{r+1,p.r,p.sum\\}$\u3002\u8fd9\u6837\uff0c$r$\u5c31\u6210\u4e86\u524d\u9762\u4e00\u5757\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002\n\n```cpp\nvoid split(int l,int r)\n{\n\tset<node>::iterator it=--S.upper_bound({l,l,0});\n\tif ((*it).l!=l) \n\t{\n\t\tnode p=*it;\n\t\tS.erase(it);S.insert({p.l,l-1,p.sum});S.insert({l,p.r,p.sum});\n\t}\n\tit=--S.upper_bound({r,r,0});\n\tif ((*it).r!=r)\n\t{\n\t\tnode p=*it;\n\t\tS.erase(it);S.insert({p.l,r,p.sum});S.insert({r+1,p.r,p.sum});\n\t}\n}\n```\n\n\u62c6\u5b8c\u4e86\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u5f88\u597d\u505a\u4e86\uff01\u90fd\u53ea\u8981\u66b4\u529b\u627e\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u5230\u6570\u636e\u968f\u673a\uff0c\u5e76\u4e14\u6709\u63a8\u5e73\u64cd\u4f5c\uff0c\u6240\u4ee5\u66b4\u529b\u627e\u7684\u603b\u6b21\u6570\u4e0d\u4f1a\u592a\u591a\u3002\n\n### $Part2\\quad assign$\u64cd\u4f5c\n\n$assign$\u5c31\u662f\u4f20\u8bf4\u4e2d\u4fdd\u6301\u73c2\u6735\u8389\u6811\u590d\u6742\u5ea6\u7384\u5b66\u6b63\u786e\u7684\u63a8\u5e73\u64cd\u4f5c\u3002\n\n**\u7ed9\u5b9a$l,r,val$\uff0c\u5c06$[l,r]$\u5185\u7684\u6240\u6709\u6570\u90fd\u4fee\u6539\u4e3a$val$**\n\n\u9996\u5148\u65b9\u4fbf\u64cd\u4f5c\uff0c\u6211\u4eec$split(l,r)$\u4e00\u6ce2\u3002\u7136\u540e\u6211\u4eec\u627e\u5230$l$\u548c$r$\u6240\u5728\u7684\u5757\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff08\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7528$S.erase(it1,it2)$\u5b8c\u6210\uff09\uff0c\u7136\u540e\u5c06$\\{l,r,val\\}$\u76f4\u63a5\u63d2\u5165\u5373\u53ef\u3002\u6ce8\u610f\uff0c$erase$\u7684\u53c2\u6570\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6211\u4eec\u9700\u8981\u4f7f\u7528$upper\\_bound$\u6765\u5b9a\u4f4d\n```cpp\nvoid assign(int l,int r,int val)\n{\n\tsplit(l,r);\n\tS.erase(S.lower_bound({l,l,0}),S.upper_bound({r,r,0}));\n\tS.insert({l,r,val});\n}\n```\n\n\n\u6700\u91cd\u8981\u7684\u4e24\u4e2a\u90e8\u5206\u8bb2\u5b8c\u4e86\uff01\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u4e71\u641e\u4e86\uff01\n### $Part3\\quad query$\u64cd\u4f5c\n**\u7ed9\u5b9a$l,r$,\u6c42\u51fa$[l,r]$\u7684\u548c**\n\n\u5148$split(l,r)$\u4e00\u6ce2\uff0c\u7136\u540e\u4ece$l$\u6240\u5728\u5757\u66b4\u529b\u8df3\u5230$r$\u6240\u5728\u5757\uff0c\u52a0\u4e0a\u4e2d\u95f4\u7684\u6570\u7684\u548c\u5c31\u884c\u4e86\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9$(l,r,sum)$\uff0c\u5b83\u6bcf\u4e2a\u6570\u90fd\u662f$sum$\uff0c\u4e00\u5171\u6709$r-l+1$\u4e2a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8282\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f$sum\u00d7(r-l+1)$\n\n```cpp\nint query(int l,int r)\n{\n\tll ans=0;split(l,r);\n\tset<node>::iterator it=S.lower_bound({l,l,0});\n\tfor (;it!=S.end()&&(*it).r<=r;++it) ans=(ans+(*it).sum*((*it).r-(*it).l+1))%mo;\n\treturn ans;\n}\n```\n\n### $Part4\\quad add$\u64cd\u4f5c\n**\u7ed9\u5b9a$l,r,val$,\u5c06$[l,r]$\u7684\u6bcf\u4e2a\u6570\u90fd\u52a0\u4e0a$val$**\n\n\u663e\u7136\uff0c\u76f8\u540c\u7684\u6570\u540c\u65f6\u52a0\u4e0a\u4e00\u4e2a\u6570\u540e\uff0c\u5b83\u4eec\u4ecd\u7136\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u5728$split(l,r)$\u540e\uff0c\u6309\u7167$query$\u7684\u65b9\u6cd5\u66b4\u529b\u8df3\u5757\uff0c\u8df3\u5230\u7684\u5757$sum$\u52a0\u4e0a$val$\u5373\u53ef\uff08\u518d\u6b21\u63d0\u9192\u522b\u5fd8\u4e86\u5728\u5b9a\u4e49\u7684\u65f6\u5019$sum$\u524d\u52a0\u4e0a$mutable$\uff09\u3002\n```cpp\nvoid add(int l,int r,int val)\n{\n\tsplit(l,r);\n\tset<node>::iterator it=S.lower_bound({l,l,0});\n\tfor (;it!=S.end()&&(*it).r<=r;++it) (*it).sum=((*it).sum+val)%mo;\n}\n```\n\n\u4ee5\u4e0a\u662f\u73c2\u6735\u8389\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u63a5\u4e0b\u6765\u662f\u672c\u9898\u7684\u6bd2\u7624\u65b0\u64cd\u4f5c\n\n### $Part5\\quad reverse$\u64cd\u4f5c\n**\u7ed9\u5b9a$l,r$\uff0c\u5c06\u533a\u95f4$[l,r]$\u7ffb\u8f6c**\n\n\u7b2c\u4e00\u6b65\u5f53\u7136\u662f$split$\u4e00\u6ce2\uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u64cd\u4f5c\u3002\n\n\u968f\u4fbf\u627e\u6765\u4e2a\u5e8f\u5217\uff0c\u6bd4\u5982$2,2,4,5,5,5,5,5,4,4,5,5$\uff0c\u5176\u5728\u73c2\u6735\u8389\u6811\u4e0a\u7684\u8282\u70b9\u4e3a$(1,2,2)(3,3,4)(4,8,5)(9,10,4)(11,12,5)$\u3002\n\n\u628a\u5b83\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u53d8\u6210$5,5,4,4,5,5,5,5,5,4,2,2$\uff0c\u5176\u5728\u73c2\u6735\u8389\u6811\u4e0a\u7684\u8282\u70b9\u4e3a$(1,2,5)(3,4,4)(5,9,5)(10,10,4)(11,12,2)$\u3002\u4f60\u53d1\u73b0\u89c4\u5f8b\u4e86\u5417\uff1f\n\n\u6211\u4eec\u968f\u4fbf\u53d6\u4e24\u4e2a\u5bf9\u5e94\u7684\u6bb5\uff0c$(1,2,2)$\u53d8\u6210\u4e86$(11,12,2)$\uff0c$(4,8,5)$\u53d8\u6210\u4e86$(5,9,5)\u2026\u2026$\u53d1\u73b0$1+12=2+11=13$\uff0c$4+9=8+5=13$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ffb\u8f6c\u4e4b\u524d\u7684$l$\u53d8\u6210\u4e86\u7ffb\u8f6c\u4e4b\u540e\u7684$r$\uff0c\u4e14\u5b83\u4eec\u7684\u548c\u4e3a\u5e8f\u5217\u7684\u957f\u5ea6$+1$\uff0c\u540c\u6837\u7684\uff0c\u7ffb\u8f6c\u4e4b\u524d\u7684$r$\u53d8\u6210\u4e86\u7ffb\u8f6c\u4e4b\u540e\u7684$l$\uff0c\u4e14\u5b83\u4eec\u7684\u548c\u540c\u6837\u7b49\u4e8e\u5e8f\u5217\u7684\u957f\u5ea6$+1$\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e00\u6bb5\u53d6\u51fa\u6765\u5e76\u5220\u6389\uff0c\u7136\u540e\u6539\u4e00\u4e0b$l$\u548c$r$\u7684\u503c\u518d\u63d2\u56de$S$\u5373\u53ef\u3002\n\n```cpp\nvoid reverse(int l,int r)\n{\n\tsplit(l,r);\n\tset<node>::iterator it=S.lower_bound({l,l,0});\n\tint len=0;\n\tfor (;it!=S.end()&&(*it).r<=r;++it) a[++len]=*it;\n\tS.erase(S.lower_bound({l,l,0}),S.upper_bound({r,r,0}));\n\tfor (int i=len;i;--i) S.insert({l+r-a[i].r,l+r-a[i].l,a[i].sum});\n}\n```\n\n### $Part6\\quad copy$\u64cd\u4f5c\n**\u7ed9\u5b9a\u957f\u5ea6\u76f8\u7b49\u7684\u4e24\u4e2a\u533a\u95f4$[l_1,r_1],[l_2,r_2]$\uff0c\u5c06$[l_1,r_1]$\u533a\u95f4\u7684\u4fe1\u606f\u590d\u5236\u5230$[l_2,r_2]$\u4e0a**\n\n\u540c\u6837\u7684\u9053\u7406\uff0c\u5148$split(l_1,r_1),split(l_2,r_2)$\u3002\n\n\u590d\u5236\u64cd\u4f5c\uff1f\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u60f3\u8c61\u6210\u5148\u628a$[l_2,r_2]$\u7684\u4fe1\u606f\u5220\u6389\uff0c\u518d\u628a$[l_1,r_1]$\u7684\u4fe1\u606f\u653e\u5230\u4e0a\u9762\u53bb\uff1f\n\n\u663e\u7136\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u53ea\u8981\u628a\u67d0\u4e2a$\u2208[l_1,r_1]$\u7684\u8282\u70b9$(l,r,val)$\u7684$l$\u548c$r$\u6539\u4e00\u4e0b\u518d\u63d2\u5165\u5373\u53ef\u3002\u6539\u6210\u4ec0\u4e48\u5462\uff1f\n\n\u8003\u8651\u76f8\u5bf9\u4f4d\u7f6e\u3002\u5047\u8bbe$x$\u590d\u5236\u5230\u4e86$y$\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u663e\u7136$x$\u76f8\u5bf9$l_1$\u7684\u4f4d\u7f6e\u4e0e$y$\u76f8\u5bf9$l_2$\u7684\u4f4d\u7f6e\u76f8\u540c\uff0c\u5373$x-l_1=y-l_2$\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5f97\u51fa\uff0c$(l,r,val)$\u590d\u5236\u4e4b\u540e\u53d8\u6210\u4e86$(l_2+l-l_1,l_2+r-l_1,val)$\u3002\n\n```cpp\nvoid copy(int l1,int r1,int l2,int r2)\n{\n\tsplit(l1,r1);split(l2,r2);\n\tS.erase(S.lower_bound({l2,l2,0}),S.upper_bound({r2,r2,0}));\n\tset<node>::iterator it=S.lower_bound({l1,l1,0});\n\tfor (;it!=S.end()&&(*it).r<=r1;++it) S.insert({l2+(*it).l-l1,l2+(*it).r-l1,(*it).sum});\n}\n```\n### $Part7\\quad swap$\u64cd\u4f5c\n**\u7ed9\u5b9a\u957f\u5ea6\u76f8\u7b49\u7684\u4e24\u4e2a\u533a\u95f4$[l_1,r_1],[l_2,r_2]$\uff0c\u5c06$[l_1,r_1]$\u533a\u95f4\u7684\u4fe1\u606f\u4e0e$[l_2,r_2]$\u533a\u95f4\u7684\u4fe1\u606f\u4ea4\u6362**\n\n\u5982\u679c\u6362\u4e00\u4e0b\u63cf\u8ff0\u65b9\u5f0f\u7684\u8bdd\uff1a\n\n**\u7ed9\u5b9a\u957f\u5ea6\u76f8\u7b49\u7684\u4e24\u4e2a\u533a\u95f4$[l_1,r_1],[l_2,r_2]$\uff0c\u5c06\u539f$[l_1,r_1]$\u533a\u95f4\u7684\u4fe1\u606f\u590d\u5236\u5230$[l_2,r_2]$\u4e0a\uff0c\u5c06\u539f$[l_2,r_2]$\u7684\u4fe1\u606f\u590d\u5236\u5230$[l_1,r_1]$\u4e0a**\n\n\u662f\u4e0d\u662f\u660e\u6717\u4e86\u5f88\u591a\u5462\uff1f\u5b9e\u9645\u4e0a\u8003\u8651\u6211\u4eec\u4ee5\u524d$swap$\u7684\u8fc7\u7a0b\uff0c\u4ea4\u6362\u672c\u8d28\u4e0a\u5c31\u662f\u51e0\u4e2a\u590d\u5236\u7684\u7ed3\u5408\u3002\n\n\u8003\u8651\u6211\u4eec\u4ee5\u524d$swap$\u662f\u600e\u4e48\u505a\u7684\uff1a$t=a,a=b,b=t$\u3002\u6211\u4eec\u627e\u6765\u4e86\u7b2c\u4e09\u4e2a\u503c$t$\u6765\u505a\u4e2d\u4ecb\u3002\u8fd9\u91cc\u4e5f\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u4e00\u4e2a\u6570\u7ec4\u6765\u505a\u4e2d\u4ecb\uff0c\u5c06$[l_1,r_1]$\u7684\u4fe1\u606f\u5148\u4fdd\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u505a\u4e24\u904d\u590d\u5236\u3002\n\n\u5f53\u7136\u4f60\u8fd8\u53ef\u4ee5\u8fd9\u6837\u505a\u4ea4\u6362\uff1a$t_1=a,t_2=b,a=t_2,b=t_1$\u3002\u8fd9\u6837\u4e5f\u80fd\u5b8c\u6210\u4ea4\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u4e24\u4e2a\u6570\u7ec4\u5206\u522b\u5b58$[l_1,r_1]$\u548c$[l_2,r_2]$\uff0c\u7136\u540e\u5206\u522b\u63d2\u5165\u5373\u53ef\u3002\u6211\u7528\u7684\u662f\u8fd9\u4e00\u79cd\u65b9\u6cd5\uff0c\u6bd4\u8f83\u6e05\u6670\u3002\n\n```cpp\nvoid swap(int l1,int r1,int l2,int r2)\n{\n\tsplit(l1,r1);split(l2,r2);\n\tset<node>::iterator it=S.lower_bound({l1,l1,0});\n\tint len1=0,len2=0;\n\tfor (;it!=S.end()&&(*it).r<=r1;++it) a[++len1]=*it;\n\tit=S.lower_bound({l2,l2,0});\n\tfor (;it!=S.end()&&(*it).r<=r2;++it) b[++len2]=*it;\n\tS.erase(S.lower_bound({l1,l1,0}),S.upper_bound({r1,r1,0}));\n\tS.erase(S.lower_bound({l2,l2,0}),S.upper_bound({r2,r2,0}));\n\tfor (int i=1;i<=len1;i++) S.insert({l2+a[i].l-l1,l2+a[i].r-l1,a[i].sum});\n\tfor (int i=1;i<=len2;i++) S.insert({l1+b[i].l-l2,l1+b[i].r-l2,b[i].sum});\n}\n```\n\n### $Part8\\quad write$\u64cd\u4f5c\n**\u8f93\u51fa\u539f\u5e8f\u5217**\n\n\u8fd9\u4e2a\u6211\u5c31\u4e0d\u7528\u8bf4\u4e86\u5427$\u2026\u2026set$\u57fa\u672c\u64cd\u4f5c\u3002\n\n\u7136\u540e\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u88ab\u6211\u4eec\u505a\u5b8c\u5566\uff01\u6492\u82b1\uff01\n\n\u6700\u540e\u819c\u4e00\u819c\u7528$treap$ $AC$\u672c\u9898\u5e76\u4e14\u7206\u8e29\u7b2c\u4e8c\u540d\u7684$sooke$\u5de8\u4f6c\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int mo=1e9+7,N=500000;\n\nint n,Q;\n\nvoid read(int &x)\n{\n\tx=0;char s=getchar();\n\twhile (!isdigit(s)) s=getchar();\n\twhile (isdigit(s)) {x=(x<<1)+(x<<3)+s-'0';s=getchar();}\n}\n\nstruct node\n{\n\tint l,r;mutable ll sum;\n\tbool operator <(const node&x) const {return l<x.l;}\n} a[N],b[N];\nset<node>S;\n\nvoid split(int l,int r)\n{\n\tset<node>::iterator it=--S.upper_bound({l,l,0});\n\tif ((*it).l!=l) \n\t{\n\t\tnode p=*it;\n\t\tS.erase(it);S.insert({p.l,l-1,p.sum});S.insert({l,p.r,p.sum});\n\t}\n\tit=--S.upper_bound({r,r,0});\n\tif ((*it).r!=r)\n\t{\n\t\tnode p=*it;\n\t\tS.erase(it);S.insert({p.l,r,p.sum});S.insert({r+1,p.r,p.sum});\n\t}\n}\n\nint query(int l,int r)\n{\n\tll ans=0;split(l,r);\n\tset<node>::iterator it=S.lower_bound({l,l,0});\n\tfor (;it!=S.end()&&(*it).r<=r;++it) ans=(ans+(*it).sum*((*it).r-(*it).l+1))%mo;\n\treturn ans;\n}\n\nvoid assign(int l,int r,int val)\n{\n\tsplit(l,r);\n\tS.erase(S.lower_bound({l,l,0}),S.upper_bound({r,r,0}));\n\tS.insert({l,r,val});\n}\n\nvoid add(int l,int r,int val)\n{\n\tsplit(l,r);\n\tset<node>::iterator it=S.lower_bound({l,l,0});\n\tfor (;it!=S.end()&&(*it).r<=r;++it) (*it).sum=((*it).sum+val)%mo;\n}\n\nvoid copy(int l1,int r1,int l2,int r2)\n{\n\tsplit(l1,r1);split(l2,r2);\n\tS.erase(S.lower_bound({l2,l2,0}),S.upper_bound({r2,r2,0}));\n\tset<node>::iterator it=S.lower_bound({l1,l1,0});\n\tfor (;it!=S.end()&&(*it).r<=r1;++it) S.insert({l2+(*it).l-l1,l2+(*it).r-l1,(*it).sum});\n}\n\nvoid swap(int l1,int r1,int l2,int r2)\n{\n\tsplit(l1,r1);split(l2,r2);\n\tset<node>::iterator it=S.lower_bound({l1,l1,0});\n\tint len1=0,len2=0;\n\tfor (;it!=S.end()&&(*it).r<=r1;++it) a[++len1]=*it;\n\tit=S.lower_bound({l2,l2,0});\n\tfor (;it!=S.end()&&(*it).r<=r2;++it) b[++len2]=*it;\n\tS.erase(S.lower_bound({l1,l1,0}),S.upper_bound({r1,r1,0}));\n\tS.erase(S.lower_bound({l2,l2,0}),S.upper_bound({r2,r2,0}));\n\tfor (int i=1;i<=len1;i++) S.insert({l2+a[i].l-l1,l2+a[i].r-l1,a[i].sum});\n\tfor (int i=1;i<=len2;i++) S.insert({l1+b[i].l-l2,l1+b[i].r-l2,b[i].sum});\n}\n\nvoid reverse(int l,int r)\n{\n\tsplit(l,r);\n\tset<node>::iterator it=S.lower_bound({l,l,0});\n\tint len=0;\n\tfor (;it!=S.end()&&(*it).r<=r;++it) a[++len]=*it;\n\tS.erase(S.lower_bound({l,l,0}),S.upper_bound({r,r,0}));\n\tfor (int i=len;i;--i) S.insert({l+r-a[i].r,l+r-a[i].l,a[i].sum});\n}\n\nvoid write()\n{\n\tset<node>::iterator it=S.begin();\n\tfor (;it!=S.end();++it)\n\t\tfor (int i=(*it).l;i<=(*it).r;i++)\n\t\t\tprintf(\"%d \",(*it).sum);\n}\n\nint main()\n{\n\tread(n);read(Q);\n\tfor (int i=1;i<=n;i++) {int x;read(x);S.insert({i,i,x});}\n\twhile (Q--)\n\t{\n\t\tint opt,l,r,l1,r1,l2,r2,val;\n\t\tread(opt);\n\t\tif (opt==1) {read(l);read(r);printf(\"%d\\n\",query(l,r));}\n\t\tif (opt==2) {read(l);read(r);read(val);assign(l,r,val);}\n\t\tif (opt==3) {read(l);read(r);read(val);add(l,r,val);}\n\t\tif (opt==4) {read(l1);read(r1);read(l2);read(r2);copy(l1,r1,l2,r2);}\n\t\tif (opt==5) {read(l1);read(r1);read(l2);read(r2);swap(l1,r1,l2,r2);}\n\t\tif (opt==6) {read(l);read(r);reverse(l,r);}\n\t}\n\twrite();\n}\n```",
        "postTime": 1557468990,
        "uid": 29575,
        "name": "Holy_Push",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "### \u6765\u770b\u770b\u8fd9\u9053~~\u628a\u6211\u8c03\u51fa\u5fc3\u75c5\u7684\u6bd2\u7624~~\u9898\n\n\u5bf9\u4e8e\u603b\u5171\u516d\u79cd\u64cd\u4f5c\uff0c\u524d\u4e09\u79cd\u4e3a\u73c2\u6735\u8389\u6811\u7684\u6b63\u5e38\u64cd\u4f5c\uff0c\u5373\u533a\u95f4\u52a0\u6cd5\uff0c\n\n\u533a\u95f4\u6c42\u548c\uff0c\u533a\u95f4\u63a8\u5e73\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e09\u79cd\uff0c\u628a\u677f\u5b50\u5957\u4e0a\u53bb\u5c31\u597d\u5566\uff08\u6216\u8005\u5982\u679c\u4f60\u8fd8\u4e0d\u9020\u4ec0\u4e48\u662f\u73c2\u6735\u8389\u6811\uff0c\u8bf7\n\n\u5148\u51fa\u95e8\u5de6\u8f6c\u81f3  [**\u4e2d\u56fd\u73c2\u5b66\u9662**](https://www.chtholly.ac.cn/)\u518d\u51fa\u95e8\u53f3\u8f6c\u81f3[**\u73c2\u6735\u8389\u6811\u5165\u95e8**](https://www.mina.moe/archives/9695)\uff09\u5b66\u4e60\u4e00\u4e0b\n\n\u597d\u4e86\uff0c\u8fdb\u5165\u6b63\u9898\uff1a\n\n\u524d\u9762\u4e5f\u8bf4\u4e86\uff0c\u4e09\u4e2a\u57fa\u672c\u64cd\u4f5c\uff0c\u4e0d\u5fc5\u591a\u8bf4\u3002\n\n\u4e0b\u9762\u770b\u53e6\u5916\u4e09\u4e2a\uff1a\n\n### $operator$ 4 $copy$\n\n\u628a\u4e00\u6bb5\u533a\u95f4\u590d\u5236\u5230\u53e6\u4e00\u6bb5\u533a\u95f4\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u4e00\u904d\uff0c\u628a\u53e6\u4e00\u6bb5\u533a\u95f4\u5220\n\n\u6389\uff0c\u518d\u91cd\u65b0\u5b89\u4e0a\u53bb\u3002\n\n```cpp\ninline void copy(int l1,int r1,int l2,int r2) {\n    IT itr1 = split(r1 + 1),itl1 = split(l1);\n    int len = 0;//\u590d\u5236\u533a\u95f4\n    for(IT it = itl1;it != itr1;++ it) {\n        A[++len].l = it->l;\n        A[len].r = it->r;\n        A[len].v = it->v;\n    }\n    IT itr2 = split(r2 + 1),itl2 = split(l2);\n    s.erase(itl2, itr2);\n    for(R int i = 1;i <= len;++ i)//\u91cd\u65b0\u5b89\u4e0a\u53bb\n        s.insert(node(A[i].l - l1 + l2, A[i].r - l1 + l2, A[i].v));\n}\n```\n\n### $operator$ 5 $change$\n\n\u53ef\u4ee5\u8bf4\u662f\u6211\u89c1\u8fc7\u7684\u6700\u6bd2\u7684\u73c2\u6735\u8389\u6811\u64cd\u4f5c\u4e86\n\n\u5047\u5982\u8bf4\u662f\u4e24\u4e2a\u6570\u4ea4\u6362\uff0c\u5f88\u7b80\u5355\u5427\uff0c$c=a$\uff0c$d = b$\uff0c$a=d$\uff0c$b = c$\n\n\u90a3\u533a\u95f4\u7684\u8bdd\uff0c\u4e5f\u7c7b\u6bd4\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u5148\u590d\u5236\u4e24\u7aef\u533a\u95f4\uff0c\u5c06\u4e24\u6bb5\u533a\u95f4\u5220\u53bb\uff0c\u518d\u91cd\u65b0\n\n\u8d4b\u503c\uff0c\u5176\u5b9e\u548c$copy$\u5927\u540c\u5c0f\u5f02\uff0c\u4f46\u8fd8\u662f\u6709\u4e0d\u5c11\u7ec6\u8282\u7684\n\n\u5927\u6982\u8fd9\u662f\u8fd9\u9053\u9898\u7684\u6700\u5927\u4ef7\u503c\u4e86\uff0c\u53ef\u4ee5\u7c7b\u6bd4\u4e0a\u9762\u7684\u4ee3\u7801\u5199\u51fa\u6765\n\n### $operator$ 6 $reverse$\n\n\u76f8\u5bf9\u4e8e\u64cd\u4f5c5\uff0c\u5b83\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u53ef\u4ee5\u5148\u590d\u5236\u4e00\u904d\uff0c\u5220\u6389\u539f\u533a\u95f4\u540e\u518d\u53cd\u7740\n\n\u8d4b\u56de\u53bb\u5c31\u597d\u5566\n\n```cpp\ninline void reverse(int l,int r) {\n    if(l > r) swap(l, r);\n    IT itr = split(r + 1),itl = split(l);\n    int len = 0;\n    for(IT it = itl;it != itr;++ it) {\n        A[++len].l = it->l;\n        A[len].r = it->r;\n        A[len].v = it->v;\n    }\n    s.erase(itl,itr);\n    for(R int i = 1;i <= len;++ i)\n        s.insert(node(r - A[i].r + l, r - A[i].l + l, A[i].v));\n}\n```\n\n**\u6ce8\u610f\u672c\u9898\u8981\u5f00$longlong$\u5426\u8005\u4f60\u5c31\u4f1a\u539f\u5730\u7206\u70b8**\n\n**\u5bf9\u4e8e\u8fed\u4ee3\u5668$itl,itr,it$\u4e00\u5b9a\u8981\u641e\u6e05\u695a\u5b83\u4ec0\u4e48\u53d8\u5316\uff0c\u56e0\u4e3a\u53d8\u4e86\u4e4b\u540e\u5b83\u5c31\u7b97\u5e9f**\n\n**\u4e86\uff0c\u8fd9\u65f6\u4f60\u9700\u8981\u91cd\u65b0$split$\uff0c\u8fd9\u662f\u6211\u5438\u53d6\u4e86\u6211\u540c\u684c\u7684\u60e8\u75db\u6559\u8bad\u540e\u5f97\u77e5\u7684**\n\n\u5927\u4f53\u5c31\u5b8c\u4e86\uff0c\u518d\u8bf4\u4e9b\u522b\u7684:\n\n\u4e00\u822c\u770b\u5230\u4e86\u533a\u95f4\u63a8\u5e73\uff08\u4e5f\u5c31\u662f\u533a\u95f4\u5168\u8986\u76d6\uff09\u6211\u4eec\u662f\u53ef\u4ee5\u8003\u8651\u73c2\u6735\u8389\u6811\u7684\n\n\u901a\u5e38\u5979\u4f1a\u6709\u5176\u4ed6\u9700\u8981\u4f60\u52a8\u52a8\u8111\u5b50\u7684\u64cd\u4f5c\uff08~~\u6bd4\u5982\u521a\u521a\u90a3\u4e2a\u6bd2\u7624~~\uff09\u4e00\u822c\u5979\u4f1a\n\n\u548cvector\u7ed3\u5408~~\u56e0\u4e3avector\u5565\u90fd\u80fd\u5e72~~\uff0c\u5e94\u8be5\u53ef\u4ee5\u5728\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\u4e2d\u770b\u5230\uff0c\n\n\u5f53\u7136\u6211\u8fd9\u8fb9\u6ca1\u7528\u800c\u5df2\u3002\n\n\u6709\u4eba\u603b\u662f\u8d28\u7591\u73c2\u6735\u8389\u6811\u7684\u590d\u6742\u5ea6\uff0c\u6211\u53ea\u80fd\u8bf4\uff0c\u60f3\u5361\u73c2\u6735\u8389\u6811\u5176\u5b9e\u5f88\u7b80\u5355\n\n\u53ea\u8981\u4f60\u7a0d\u7a0d\u7528\u70b9\u5fc3\u51fa\u7ec4\u6570\u636e\uff0c\u5979\u5c31\u53ef\u4ee5\u9000\u5316\u6210$O(n^{2})$\uff0c\u4f46\u662f\u5728\u968f\u673a\u6570\u636e\n\n\u4e0b\uff0c\u6211\u6562\u4fdd\u8bc1\uff0c**\u5979\u80fd\u78be\u7206\u5176\u4ed6\u4e00\u5207\u6570\u636e\u7ed3\u6784**\uff0c\u800c\u4e14\u5979\u53ef\u4ee5\u8d44\u74f7\u8bb8\u591a\u5176\n\n\u5b83\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0d\u4e86\u7684\u4e1c\u897f\uff0c\u5237\u9898\u591a\u4e86\u5c31\u77e5\u9053\u4e86\u3002\n\n\u56e0\u6b64\u5979\u6709\u5229\u6709\u5f0a\uff0c\u770b\u7740\u7528\u5c31\u597d\u4e86\n\n\u6700\u540e\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801,\u5e86\u795d\u6211\u8fc7\u4e86\u8fd9\u9053\u5927\u6bd2\u7624\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\n#define R register\n#define IT set<node>::iterator\n\nusing namespace std;\ntypedef long long LL;\nconst int p = 1e9+7;\nconst int N = 5e5+5;\nint n,m;\nstruct node {\n\tint l,r;\n\tmutable LL v;\n\tnode(int _l = 0,int _r = -1,int _v = 0) : l(_l),r(_r),v(_v) {}\n\tbool operator < (const node &o) const {\n\t\treturn l < o.l;\n\t}\n}A[N],B[N];\n\nset<node> s;\n\nIT split(int pos) {\n\tIT it = s.lower_bound(node(pos));\n\tif(it != s.end() && it->l == pos) return it;\n\t-- it;\n\tint l = it->l,r = it->r;\n\tLL v = it->v;\n\ts.erase(it);\n\ts.insert(node(l, pos - 1, v));\n\treturn s.insert(node(pos, r, v)).first;\n}\n\ninline void assign(int l,int r,LL v) {\n\tIT itr = split(r + 1),itl = split(l);\n\ts.erase(itl, itr);\n\ts.insert(node(l, r, v));\n}\n\ninline void add(int l,int r,LL v) {\n\tIT itr = split(r + 1),itl = split(l);\n\tfor(;itl != itr;++ itl) (itl->v += v) %= p;\n}\n\ninline void copy(int l1,int r1,int l2,int r2) {\n    IT itr1 = split(r1 + 1),itl1 = split(l1);\n    int len = 0;\n    for(IT it = itl1;it != itr1;++ it) {\n        A[++len].l = it->l;\n        A[len].r = it->r;\n        A[len].v = it->v;\n    }\n    IT itr2 = split(r2 + 1),itl2 = split(l2);\n    s.erase(itl2, itr2);\n    for(R int i = 1;i <= len;++ i)\n        s.insert(node(A[i].l - l1 + l2, A[i].r - l1 + l2, A[i].v));\n}\n\ninline void change(int l1,int r1,int l2,int r2) {\n\tif(l1 > l2) { swap(l1, l2);swap(r1, r2); }\n\tint len1 = 0,len2 = 0;\n\tIT itr1 = split(r1 + 1),itl1 = split(l1);\n\tfor(IT it = itl1;it != itr1;++ it) {\n\t\tA[++len1].l = it->l;\n\t\tA[len1].r = it->r;\n\t\tA[len1].v = it->v;\n\t}\n\ts.erase(itl1,itr1);\n\tIT itr2 = split(r2 + 1),itl2 = split(l2);\n\tfor(IT it = itl2;it != itr2;++ it) {\n\t\tB[++len2].l = it->l;\n\t\tB[len2].r = it->r;\n\t\tB[len2].v = it->v;\n\t}\n\ts.erase(itl2,itr2);\n\tfor(R int i = 1;i <= len2;++ i) s.insert(node(l1 + B[i].l - l2, l1 + B[i].r - l2, B[i].v));\n\tfor(R int i = 1;i <= len1;++ i) s.insert(node(l2 + A[i].l - l1, l2 + A[i].r - l1, A[i].v));\n}\n\ninline void reverse(int l,int r) {\n    if(l > r) swap(l, r);\n    IT itr = split(r + 1),itl = split(l);\n    int len = 0;\n    for(IT it = itl;it != itr;++ it) {\n        A[++len].l = it->l;\n        A[len].r = it->r;\n        A[len].v = it->v;\n    }\n    s.erase(itl,itr);\n    for(R int i = 1;i <= len;++ i)\n        s.insert(node(r - A[i].r + l, r - A[i].l + l, A[i].v));\n}\n\ninline LL query(int l,int r) {\n    IT itr = split(r + 1),itl = split(l);\n    LL res = 0;\n    for(;itl != itr;++ itl)\n        (res += (LL)(itl->r - itl->l + 1) * itl->v) %= p;\n    return res;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(R int i = 1;i <= n;++ i) {\n\t\tLL x; scanf(\"%lld\",&x);\n\t\ts.insert(node(i,i,x));\n\t}\n\ts.insert(node(n + 1,n + 1,(LL)0));\n\tfor(R int i = 1,op,l,r,x,y;i <= m;++ i) {\n\t\tscanf(\"%d%d%d\",&op,&l,&r);\n\t\tLL v;\n\t\tif(op == 1) printf(\"%lld\\n\",query(l,r));\n\t\tif(op == 2) scanf(\"%lld\",&v),assign(l,r,v);\n\t\tif(op == 3) scanf(\"%lld\",&v),add(l,r,v);\n\t\tif(op == 4) scanf(\"%d%d\",&x,&y),copy(l,r,x,y);\n\t\tif(op == 5) scanf(\"%d%d\",&x,&y),change(l,r,x,y);\n\t\tif(op == 6) reverse(l,r);\n\t}\n\tfor(IT it = s.begin();it != s.end() && it->r <= n;++ it)\n    \tfor(R int i = it->l;i <= it->r;++ i)\n\t\t\tprintf(\"%lld \",it->v);\n\treturn 0;\n}\n```\n",
        "postTime": 1568965286,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "## ODT\n\n\u8fd9\u9053\u9898\u76ee\u592a\u6bd2\u7624\u5566\uff0c\u7ecf\u8fc7\u4e86\u65e0\u6570\u904d\u7684TLE\u3001WA\uff0c\u548cRE(TAT)\uff0c\u6211\u7ec8\u4e8e\u4e86\u89e3\u4e86\u73c2\u6735\u8389\u6811\u7684\u5f3a\uff08R\uff09\u5927\uff08E\uff09,\u6211\u4f1a\u8be6\u7ec6\u7684\u4ecb\u7ecd\u5173\u4e8eTLE\uff0cWA\u548cRE\u7684\u539f\u56e0\u3002\n\n\u9996\u5148\u6211\u4eec\u770b\u5230\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u548c\u4fdd\u8bc1\u6570\u636e\u968f\u673a\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u76f4\u89c9\u80af\u5b9a\u662f\u5e78\u798f\u7684\u73c2\u6735\u8389\u6811\u5566\uff0c\u867d\u7136\u5728\u523b\u610f\u6784\u9020\u7684\u6570\u636e\u4e0b\u5979\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u9519\u8bef\u7684\uff0c\u4f46\u662f\u5728\u968f\u673a\u6570\u636e\u4e0b\u5979\u7684\u8868\u73b0\u5341\u5206\u4f18\u79c0\uff0c\u751a\u81f3\u53ef\u4ee5\u78be\u538b\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u3002\n\n1.\u9996\u5148\u662fsplit\u64cd\u4f5c\uff0c\u8fd9\u662fODT\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u5b8c\u6574\u7684\u533a\u95f4\u62c6\u5206\u5f00\u6765\u3002\u4f46\u5e94\u6ce8\u610f\u7684\u662f\uff0c\n\n```cpp\nif(it!=s.end()&&it->l==pos)return it;\n```\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728n\u7684\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u6570\u9632\u6b62\u51fa\u9505\uff0c\n```cpp\ns.insert((node){n+1,n+1,(LL)0});\n```\n2.\u533a\u95f4\u52a0\u3001\u6c42\u548c\u3001\u63a8\u5e73\uff0c\u8fd9\u4e9b\u90fd\u662fODT\u6a21\u677f\u4e0a\u7684\u64cd\u4f5c\uff0c\u6ce8\u610f\u4e00\u4e0b\u53ca\u65f6\u53d6\u6a21\u5c31\u73c2\u4ee5\u4e86\u3002\n\n3.\u8ba9\u6211\u4eec\u6765\u770b\u770b\u65b0\u7684\u64cd\u4f5c\uff1a\u533a\u95f4\u590d\u5236\uff1a\u6839\u636ezh_dou\u5927\u4f6c\u7684\u8bb2\u89e3\uff0c\u6211\u4eec\u77e5\u9053\u8fc7\u671f\u7684\u8fed\u4ee3\u5668\u662f\u4e0d\u80fd\u4f7f\u7528\u7684\uff0c\u5426\u5219\u76f4\u63a5\u539f\u5730\u8d77\u98de\u3002\u6240\u4ee5\u6211\u4eec\u7684\u505a\u6cd5\u5c31\u662f\u5c06\u6211\u4eec\u9700\u8981\u590d\u5236\u7684\u533a\u95f4\u5148\u5b58\u8d77\u6765\uff0c\u7136\u540e\u518d\u5220\u9664\u4e86\u5bf9\u5e94\u7684\u533a\u95f4\u540e\u518d\u5c06\u533a\u95f4\u590d\u5236\u8fc7\u53bb\u3002\n```cpp\nvoid fuzhi(int l1,int r1,int l2,int r2)\n{\n\tIT it1r=split(r1+1),it1l=split(l1);\n\tint len=0;\n\tfor(IT it=it1l;it!=it1r;++it)\n\t{\n\t\ta[++len].l=it->l;\n\t\ta[len].r=it->r;\n\t\ta[len].val=it->val;\n\t}\n\tIT it2r=split(r2+1),it2l=split(l2);\n\ts.erase(it2l,it2r);\n\tfor(int i=1;i<=len;++i)\n\t{\n\t\ts.insert(node(a[i].l - l1 + l2,a[i].r - l1 + l2,a[i].val));\n\t}\n}\n```\n4.\u65b0\u64cd\u4f5c\uff1a\u533a\u95f4\u7ffb\u8f6c\uff1a\u8fd8\u662f\u6839\u636e\u8fed\u4ee3\u5668\u7684\u4e00\u5957\u7406\u8bba\uff0c\u6211\u4eec\u5e94\u8be5\u5148\u5b58\u8d77\u6765\u5728\u8fdb\u884c\u64cd\u4f5c\uff1a\n\n```cpp\nvoid fanzhuan(int l,int r)\n{\n\tif(l>r)swap(l,r);\n\tIT it2=split(r+1),it1=split(l);\n\tint len=0;\n\tfor(IT it=it1;it!=it2;++it)\n\t{\n\t\ta[++len].l=it->l;\n\t\ta[len].r=it->r;\n\t\ta[len].val=it->val;\n\t}\n\ts.erase(it1,it2);\n\tfor(int i=1;i<=len;++i)\n\t{\n\t\ts.insert(node(r-a[i].r+l, r-a[i].l+l, a[i].val));\n\t}\n}\n```\n5.~~\u6bd2\u7624~~\u4ea4\u6362\u64cd\u4f5c\uff1a\u8fd9\u53ef\u80fd\u662f\u6700\u6bd2\u7624\u7684\u4e00\u79cd\u64cd\u4f5c\u4e86\uff0cRE\u5230\u6211\u76f4\u63a5\u81ea\u95ed\u3002\u6211\u4eec\u53ef\u4ee5\u60f3\u50cf\u4e00\u4e0b\u6211\u4eec\u4ea4\u6362\u4e24\u4e2a\u6570\u7684\u60c5\u666f\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u533a\u95f4\u7684\u4ea4\u6362\uff0c\u4e3a\u4e86 ~~\u597d\u8c03bug~~ \u7b80\u6d01\u660e\u4e86\uff0c\u6211\u7528\u4e86\u4e24\u4e2a\u6570\u7ec4\u6765\u5b8c\u6210\uff1a\n```cpp\nvoid my_swap(int l1,int r1,int l2,int r2)\n{\n\tif(l1>l2){swap(l1,l2);swap(r1,r2);}\n\tint len1=0,len2=0;\n\tIT it1r=split(r1+1),it1l=split(l1);\n\tfor(IT it=it1l;it!=it1r;++it)\n\t{\n\t\ta[++len1].l=it->l;\n\t\ta[len1].r=it->r;\n\t\ta[len1].val=it->val;\n\t}\n\tIT it2r=split(r2+1),it2l=split(l2);\n\tfor(IT it=it2l;it!=it2r;++it)\n\t{\n\t\tb[++len2].l=it->l;\n\t\tb[len2].r=it->r;\n\t\tb[len2].val=it->val;\n\t}\n\tit1r=split(r1+1),it1l=split(l1);\n\ts.erase(it1l,it1r);\n\tit2r=split(r2+1),it2l=split(l2);\n\ts.erase(it2l,it2r);\n\tfor(int i=1;i<=len2;++i)s.insert(node(b[i].l - l2 + l1,b[i].r - l2 + l1,b[i].val));\n\tfor(int i=1;i<=len1;++i)s.insert(node(a[i].l - l1 + l2,a[i].r - l1 + l2,a[i].val));\n}\n```\n\u7136\u540e\u6bcf\u4e2a\u6570\u90fd\u8981\u8f93\u51fa\u7684\u8bdd\u53ea\u7528\u904d\u5386\u4e00\u904dset\u5c31\u73c2\u4ee5\u5566~\uff08\u5f53\u7136\u4f60\u4e5f\u73c2\u4ee5\u7528\u6765\u4e2d\u95f4\u8c03\u8bd5\u7528\uff09\u3002\n\n```cpp\nvoid pr()\n{\n\tfor(IT it=s.begin();it!=s.end()&&it->r<=n;++it)\n\t{\n\t\tfor(int i=it->l;i<=it->r;++i)printf(\"%lld \",it->val);\n\t}\n}\n```\n\n\n\u6700\u540e\u8bf4\u51e0\u70b9\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u60c5\n\n1.\u8fc7\u671f\u7684\u8fed\u4ee3\u5668\u5343\u4e07\u4e0d\u8981\u4f7f\u7528\uff0c\u5426\u5219\u81ea\u5df1\u600e\u4e48RE\u7684\u90fd\u4e0d\u77e5\u9053\uff0c\u5177\u4f53\u7684\u64cd\u4f5c\u5c31\u5e94\u8be5\u662f\u5728\u6bcf\u6b21\u4f7f\u7528\u8fed\u4ee3\u5668\u524d\u5c31\u5e94\u8be5split\u4e00\u4e0b\uff0c\u9632\u6b62\u51fa\u9505\u3002\n\n2.\u904d\u5386\u7684\u65f6\u5019\u6700\u597d\u518d\u5f00\u4e00\u4e2a\u8fed\u4ee3\u5668\u5343\u4e07\u4e0d\u8981\u8fd9\u6837\u5199\uff1a\n\n```cpp\ns.erase(it1,it2);\nfor(;it1!=it2;++it1)\n{\n\ts.insert(node(XXX,XXX,XXX));\n}\n```\n\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u6211\u77e5\u9053(TAT).\n\n3.\u8981\u5f00long long\uff0c\u5e76\u4e14\u8fd8\u9700\u8981\u53ca\u65f6\u53d6\u6a21\u3002\n\n4.\u51fd\u6570\u4f20\u53c2\u4e0d\u8981\u4f20\u9519\u3002\n\n5.\u6700\u597d\u5728n+1\u7684\u4f4d\u7f6e\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u6570(\u73c2\u4ee5\u662f0\u3001233\u6216\u8005666\uff0c\u968f\u4f60\u7684\u5fc3\u610f\u5566)\u3002\n\n6.\u9700\u8981\u5f00O2\uff0c\u5426\u5219\u5c31\u6b7b\u6389\u4e86QAQ\n\n\u6700\u540e\u732e\u4e0a\u6211\u7684\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<set>\n#define LL long long\n#define IT set<node>::iterator\nusing namespace std;\nint n,q,opt,l1,r1,l2,r2,l,r;\nLL val,x;\nconst int mod=1e9+7,N=500010;\ninline int read()\n{\n\tregister int x=0,y=1;register char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')y=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*y;\n}\nstruct node\n{\n\tint l,r;\n\tmutable long long val;\n\tnode(int L=0,int R=-1,int V=0):l(L),r(R),val(V){}\n\tfriend bool operator <(const node &a,const node &b){return a.l<b.l;} \n//\tint len(){return r-l+1;}\n};\nnode a[N],b[N];\nset<node>s;\nIT split(int pos)\n{\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos)return it;\n\tit--;\n\tint ll=it->l,lr=it->r;\n\tLL lv=it->val;\n\ts.erase(it);\n\ts.insert(node(ll,pos-1,lv));\n\treturn s.insert(node(pos,lr,lv)).first;\n}\nLL ask(int l,int r)\n{\n\tIT it2=split(r+1),it1=split(l);\n\tLL ans=0;\n\tfor(IT it=it1;it!=it2;++it)\n\t\t(ans+=(LL)(it->r - it->l + 1)*it->val)%=mod;\n\treturn ans;\n}\nvoid add(int l,int r,LL val)\n{\n\tIT it2=split(r+1),it1=split(l);\n\tfor(IT it=it1;it!=it2;++it)(it->val+=val)%=mod;\n}\nvoid tuiping(int l,int r,LL val)\n{\n\tIT it2=split(r+1),it1=split(l);\n\ts.erase(it1,it2);\n\ts.insert(node(l,r,val));\n}\nvoid fuzhi(int l1,int r1,int l2,int r2)\n{\n\tIT it1r=split(r1+1),it1l=split(l1);\n\tint len=0;\n\tfor(IT it=it1l;it!=it1r;++it)\n\t{\n\t\ta[++len].l=it->l;\n\t\ta[len].r=it->r;\n\t\ta[len].val=it->val;\n\t}\n\tIT it2r=split(r2+1),it2l=split(l2);\n\ts.erase(it2l,it2r);\n\tfor(int i=1;i<=len;++i)\n\t{\n\t\ts.insert(node(a[i].l - l1 + l2,a[i].r - l1 + l2,a[i].val));\n\t}\n}\nvoid pr()\n{\n\tfor(IT it=s.begin();it!=s.end()&&it->r<=n;++it)\n\t{\n\t\tfor(int i=it->l;i<=it->r;++i)printf(\"%lld \",it->val);\n\t}\n}\nvoid my_swap(int l1,int r1,int l2,int r2)\n{\n\tif(l1>l2){swap(l1,l2);swap(r1,r2);}\n\tint len1=0,len2=0;\n\tIT it1r=split(r1+1),it1l=split(l1);\n\tfor(IT it=it1l;it!=it1r;++it)\n\t{\n\t\ta[++len1].l=it->l;\n\t\ta[len1].r=it->r;\n\t\ta[len1].val=it->val;\n\t}\n\tIT it2r=split(r2+1),it2l=split(l2);\n\tfor(IT it=it2l;it!=it2r;++it)\n\t{\n\t\tb[++len2].l=it->l;\n\t\tb[len2].r=it->r;\n\t\tb[len2].val=it->val;\n\t}\n\tit1r=split(r1+1),it1l=split(l1);\n\ts.erase(it1l,it1r);\n\tit2r=split(r2+1),it2l=split(l2);\n\ts.erase(it2l,it2r);\n\tfor(int i=1;i<=len2;++i)s.insert(node(b[i].l - l2 + l1,b[i].r - l2 + l1,b[i].val));\n\tfor(int i=1;i<=len1;++i)s.insert(node(a[i].l - l1 + l2,a[i].r - l1 + l2,a[i].val));\n}\t\nvoid fanzhuan(int l,int r)\n{\n\tif(l>r)swap(l,r);\n\tIT it2=split(r+1),it1=split(l);\n\tint len=0;\n\tfor(IT it=it1;it!=it2;++it)\n\t{\n\t\ta[++len].l=it->l;\n\t\ta[len].r=it->r;\n\t\ta[len].val=it->val;\n\t}\n\ts.erase(it1,it2);\n\tfor(int i=1;i<=len;++i)\n\t{\n\t\ts.insert(node(r-a[i].r+l, r-a[i].l+l, a[i].val));\n\t}\n}\nint main()\n{\n\tn=read(),q=read();\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%lld\",&x);\n\t\ts.insert(node(i,i,x));\n\t}\n\ts.insert((node){n+1,n+1,(LL)0});\n\twhile(q--)\n\t{\n\t\topt=read();\n\t\tif(opt==1)\n\t\t{\n\t\t\tl=read();r=read();\n\t\t\tprintf(\"%lld\\n\",ask(l,r));\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tl=read();r=read();scanf(\"%lld\",&val);\n\t\t\ttuiping(l,r,val);\n\t\t}\n\t\tif(opt==3)\n\t\t{\n\t\t\tl=read();r=read();scanf(\"%lld\",&val);\n\t\t\tadd(l,r,val);\n\t\t}\n\t\tif(opt==4)\n\t\t{\n\t\t\tl1=read();r1=read();l2=read();r2=read();\n\t\t\tfuzhi(l1,r1,l2,r2);\n\t\t}\n\t\tif(opt==5)\n\t\t{\n\t\t\tl1=read();r1=read();l2=read();r2=read();\n\t\t\tmy_swap(l1,r1,l2,r2);\n\t\t}\n\t\tif(opt==6)\n\t\t{\n\t\t\tl=read();r=read();\n\t\t\tfanzhuan(l,r);\n\t\t}\n\t}\n\tpr();\n\treturn 0;\n}\n```\n",
        "postTime": 1568936638,
        "uid": 153843,
        "name": "wljss",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "## P5350 \u5e8f\u5217\n\n### \u9898\u610f\n\n\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u652f\u6301\u533a\u95f4\u6c42\u548c\u3001\u8d4b\u503c\u3001\u52a0\u503c\u3001\u590d\u5236\u3001\u4ea4\u6362\u3001\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5176\u4e2d\u4ea4\u6362\u548c\u590d\u5236\u64cd\u4f5c\u4fdd\u8bc1\u4e24\u6bb5\u533a\u95f4\u957f\u5ea6\u76f8\u7b49\u4e14\u4e0d\u4ea4\u3002\u7b54\u6848\u5bf9 $1e9+7$ \u53d6\u6a21\u3002\n\n### \u601d\u8def\n\n\u5bf9\u4e8e\u533a\u95f4\u6c42\u548c\u3001\u8d4b\u503c\u3001\u52a0\u503c\u3001\u4ea4\u6362\u3001\u7ffb\u8f6c\u64cd\u4f5c\u6211\u4eec\u90fd\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u4f7f\u7528\u5e73\u8861\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\u6240\u4ee5\u73b0\u5728\u7684\u96be\u70b9\u5c31\u5728\u4e8e\u590d\u5236\u64cd\u4f5c\uff1a\u5982\u4f55\u590d\u5236\u4e00\u6bb5\u533a\u95f4\uff1f\n\n\u5982\u679c\u6211\u4eec\u66b4\u529b\u590d\u5236\u7684\u8bdd\uff0c\u6bcf\u6b21\u6211\u4eec\u4e0d\u5f97\u4e0d\u5c06\u88ab\u590d\u5236\u7684\u5b50\u6811\u626b\u4e00\u904d\u8fdb\u884c\u590d\u5236\uff0c\u8fd9\u662f\u80af\u5b9a\u4e0d\u884c\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4f7f\u7528**\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811**\u3002\u5176\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u6bcf\u6b21\u4fee\u6539\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u65f6\uff0c\u5c06\u8be5\u8282\u70b9\u590d\u5236\u4e00\u904d\u3002\u8fd9\u6837\u6211\u4eec\u5728\u8fdb\u884c\u590d\u5236\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u590d\u5236\u51fa\u6765\u4e00\u4e2a\u65b0\u7684\u6811\u800c\u4e0d\u4f1a\u5bf9\u539f\u6811\u6709\u5f71\u54cd\uff0c\u800c\u4e14\u56e0\u4e3a\u4e0d\u662f\u6bcf\u6b21\u90fd\u904d\u5386\u5b50\u6811\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u8981\u4e22\u5f03\u4e4b\u524d\u7684\u8282\u70b9\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u7565\u5fae\u6709\u4e9b\u5927\u3002\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c~~\u5783\u573e\u56de\u6536~~\u5b9a\u671f\u91cd\u6784\u4f7f\u5f97\u7a7a\u95f4\u88ab\u5408\u7406\u91cd\u590d\u5229\u7528\u3002\n\n\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\u3002\u6211\u4f7f\u7528\u4e86 FHQ treap \u8fdb\u884c\u5b9e\u73b0\uff0c\u56e0\u4e3a\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u4e9b\u64cd\u4f5c FHQ \u4f1a\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u4e0d\u5361 ODT \u4f46\u5361\u590d\u6742\u5ea6\u4fdd\u8bc1\u7684\u5199\u6cd5\u3002\n\n### \u7ec6\u8282\u548c\u6211\u72af\u8fc7\u7684\u9519\u8bef\n\n* \u8fd9\u662f\u4e2a\u5b9a\u957f\u7684\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u91cd\u6784\u7684\u65f6\u5019\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u6784\u5efa\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u7ebf\u6027\u6784\u5efa\uff0c~~\u5426\u8005\u4f1a\u88ab\u5361\u5e38~~\u3002\n\n* **\u6bcf\u6b21\u66f4\u6539\u8282\u70b9\u4fe1\u606f\u65f6\u90fd\u8981\u8fdb\u884c\u590d\u5236**\uff0c`pushdown`,`merge`,`split` \u51fd\u6570\u548c\u4fee\u6539\u64cd\u4f5c\u91cc\u90fd\u8981\u590d\u5236\u3002\n\n* \u6ce8\u610f `pushdown` \u548c `clone` \u7684\u524d\u540e\u987a\u5e8f\u3002\u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5c06\u539f\u8282\u70b9\u8fdb\u884c\u4e0b\u4f20\u6807\u8bb0\u4ee5\u514d\u5efa\u51fa\u65e0\u7528\u8282\u70b9\u589e\u5927\u5e38\u6570\u3002\n\n* \u6ce8\u610f\u4f20\u53c2\u65f6\u7528\u7684\u662f\u54ea\u4e2a\u8282\u70b9\u7684\u53c2\u6570\u3002\u6211\u66fe\u5728 `split` \u64cd\u4f5c\u4e2d\u4e0b\u4f20\u539f\u8282\u70b9\u7684\u513f\u5b50\uff0c\u5b9e\u9645\u4e0a\u662f\u590d\u5236\u540e\u7684\u8282\u70b9\u7684\u513f\u5b50\u3002\n\n* FHQ \u5728\u65b0\u5efa\u8282\u70b9\u540e\u7684 `rand` \u503c\u5360\u7a7a\u95f4\uff0c\u6211\u4eec\u7528\u4e00\u6bb5\u8bdd\u5728 `merge` \u7684\u65f6\u5019\u73b0\u573a\u968f\u673a\uff0c\u5373\uff1a\n\n  `rd(0,(e[a].siz+e[b].siz)-1)<e[a].siz`\n\n  \u53ef\u4ee5\u7701\u4e0b\u4e00\u70b9\u7a7a\u95f4\u3002\n\n* \u590d\u5236\u548c\u4ea4\u6362\u7684\u65f6\u5019\u8bb0\u4f4f\uff0c\u7ed9\u51fa\u7684\u533a\u95f4\u7aef\u70b9\u4f4d\u7f6e\u53ef\u4e0d\u4fdd\u8bc1\u5347\u5e8f\u7684\u3002\n\n* \u91cd\u6784\u4e4b\u540e\u518d\u6e05\u7a7a\u8282\u70b9\u6570\uff0c\u56e0\u4e3a\u5728\u904d\u5386\u641c\u7d22\u6811\u7684\u65f6\u5019\u4f1a `pushdown` \u800c\u65b0\u52a0\u8282\u70b9\u3002\n\n### \u4ee3\u7801\n\n\u6b64\u9898\u5386\u7ecf\u4e09\u5929\u65f6\u95f4\u624d\u505a\u51fa\u6765\uff0c\u6240\u4ee5\u4ee3\u7801\u53ef\u80fd\u6709\u4e9b\u6211\u6ca1\u770b\u51fa\u6765\u7684\u5947\u602a\u7684\u4e1c\u897f\uff0c\u9b3c\u77e5\u9053\u6211\u8c03\u8bd5\u7684\u65f6\u5019\u5e72\u4e86\u4ec0\u4e48\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#include<cstring>\n#include<cmath>\n#include<chrono>\n#include<random>\nusing namespace std;\ninline int read(){\n\tint w=0,x=0;char c=getchar();\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\n\twhile(isdigit(c))x=x*10+(c^48),c=getchar();\n\treturn w?-x:x;\n}\nchar buf[1 << 21], a[20]; int p, p2 = -1;\ninline void flush() {\n\tfwrite(buf, 1, p2 + 1, stdout);\n\tp2 = -1;\n}\ninline void print(int x) {\n\tif (p2 > 1 << 20) flush();\n\tif (x < 0) buf[++p2] = 45, x = -x;\n\tdo a[++p] = x % 10 + 48;while (x /= 10);\n\tdo buf[++p2] = a[p];while (--p);\n} \nnamespace star\n{\n\tconst int maxn=3e5+10,maxm=4e6+10,mod=1e9+7;\n\tmt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count());\n\tint rd(int l,int r){return std::uniform_int_distribution<int>(l,r)(rnd);}\n\tint n,m,a[maxn];\n\tstruct FHQ{\n\t\t#define ls e[ro].son[0]\n\t\t#define rs e[ro].son[1]\n\t\tstruct node{\n\t\t\tint son[2],siz,tag,add,val,sum;\n\t\t\tbool rev;\n\t\t}e[maxm];\n\t\tint tot,rt;\n\t\tFHQ():e(),tot(0),rt(0){}\n\t\tinline void clone(int &x){e[++tot]=e[x],x=tot;}\n\t\tinline int newnode(int a){return e[++tot]=(node){{0,0},1,-1,0,a,a,false},tot;}\n\t\tinline void pushup(int ro){e[ro].siz=e[ls].siz+e[rs].siz+1,e[ro].sum=(1ll*e[ls].sum+e[rs].sum+e[ro].val)%mod;}\n\t\tvoid rev(int ro){if(ro)e[ro].rev^=1,swap(ls,rs);}\n\t\tvoid add(int ro,int v){if(ro)e[ro].val=(e[ro].val+v)%mod,e[ro].sum=(e[ro].sum+1ll*e[ro].siz*v)%mod,e[ro].add=(e[ro].add+v)%mod;}\n\t\tvoid assign(int ro,int v){if(ro)e[ro].val=v,e[ro].sum=1ll*e[ro].siz*v%mod,e[ro].add=0,e[ro].tag=v;}\n\t\tinline void pushdown(int ro){\n\t\t\tif(!e[ro].rev and e[ro].tag==-1 and !e[ro].add) return;\n\t\t\tif(ls) clone(ls);if(rs) clone(rs);\n\t\t\tif(e[ro].rev) rev(ls),rev(rs),e[ro].rev=false;\n\t\t\tif(e[ro].tag!=-1) assign(ls,e[ro].tag),assign(rs,e[ro].tag),e[ro].tag=-1;\n\t\t\tif(e[ro].add) add(ls,e[ro].add),add(rs,e[ro].add),e[ro].add=0;\n\t\t}\n\t\tint build(int l=1,int r=n){\n\t\t\tif(l>r)return 0;\n\t\t\tint mid=(l+r)>>1;\n\t\t\tint ro=newnode(a[mid]);\n\t\t\tls=build(l,mid-1),rs=build(mid+1,r);\n\t\t\tpushup(ro);\n\t\t\treturn ro;\n\t\t}\n\t\tint merge(int a,int b){\n\t\t\tif(!a or !b)return a|b;\n\t\t\tif(rd(0,(e[a].siz+e[b].siz)-1)<e[a].siz){\n\t\t\t\tclone(a),pushdown(a);\n\t\t\t\te[a].son[1]=merge(e[a].son[1],b);\n\t\t\t\tpushup(a);return a;\n\t\t\t}else{\n\t\t\t\tclone(b),pushdown(b);\n\t\t\t\te[b].son[0]=merge(a,e[b].son[0]);\n\t\t\t\tpushup(b);return b;\n\t\t\t}\n\t\t}\n\t\tvoid split(int ro,int k,int &a,int &b){\n\t\t\tif(!ro) return a=b=0,void();\n\t\t\tif(e[ls].siz<k) a=ro,clone(a),pushdown(a),split(e[a].son[1],k-e[e[a].son[0]].siz-1,e[a].son[1],b),pushup(a);\n\t\t\telse b=ro,clone(b),pushdown(b),split(e[b].son[0],k,a,e[b].son[0]),pushup(b);\n\t\t}\n\t\tinline void copy(){\n\t\t\tint l1=read(),r1=read(),l2=read(),r2=read(),a,b,c,d,e;int bk=1;\n\t\t\tif(r1>r2)swap(l1,l2),swap(r1,r2),bk=0;\n\t\t\tsplit(rt,r2,d,e);split(d,l2-1,c,d);split(c,r1,b,c);split(b,l1-1,a,b);\n\t\t\tif(bk) rt=merge(a,merge(b,merge(c,merge(b,e))));\n\t\t\telse rt=merge(a,merge(d,merge(c,merge(d,e))));\n\t\t}\n\t\tinline void Swap(){\n\t\t\tint l1=read(),r1=read(),l2=read(),r2=read(),a,b,c,d,e;\n\t\t\tif(r1>r2)swap(l1,l2),swap(r1,r2);\n\t\t\tsplit(rt,r2,d,e);split(d,l2-1,c,d);split(c,r1,b,c);split(b,l1-1,a,b);\n\t\t\trt=merge(a,merge(d,merge(c,merge(b,e))));\n\t\t}\n\t\tinline void push(int ro){\n\t\t\tif(!ro)return;\n\t\t\tpushdown(ro);\n\t\t\tpush(ls),a[++n]=e[ro].val,push(rs);\n\t\t}\n\t\t#undef ls\n\t\t#undef rs\n\t}S;\n\tinline void work(){\n\t\tn=read(),m=read();\n\t\tfor(int i=1;i<=n;i++) a[i]=read();\n\t\tS.rt=S.build();\n\t\twhile(m--){\n\t\t\tswitch(read()){\n\t\t\t\tcase 1:{\n\t\t\t\t\tint l=read(),r=read(),a,b,c;\n\t\t\t\t\tS.split(S.rt,r,b,c);S.split(b,l-1,a,b);\n\t\t\t\t\tprintf(\"%d\\n\",S.e[b].sum);\n\t\t\t\t\tS.rt=S.merge(a,S.merge(b,c));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 2:{\n\t\t\t\t\tint l=read(),r=read(),a,b,c;\n\t\t\t\t\tS.split(S.rt,r,b,c);S.split(b,l-1,a,b);\n\t\t\t\t\tS.clone(b);\n\t\t\t\t\tS.assign(b,read());\n\t\t\t\t\tS.rt=S.merge(a,S.merge(b,c));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3:{\n\t\t\t\t\tint l=read(),r=read(),a,b,c;\n\t\t\t\t\tS.split(S.rt,r,b,c);S.split(b,l-1,a,b);\n\t\t\t\t\tS.clone(b);\n\t\t\t\t\tS.add(b,read());\n\t\t\t\t\tS.rt=S.merge(a,S.merge(b,c));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 4:S.copy();break;\n\t\t\t\tcase 5:S.Swap();break;\n\t\t\t\tcase 6:{\n\t\t\t\t\tint l=read(),r=read(),a,b,c;\n\t\t\t\t\tS.split(S.rt,r,b,c);S.split(b,l-1,a,b);\n\t\t\t\t\tS.clone(b);\n\t\t\t\t\tS.rev(b);\n\t\t\t\t\tS.rt=S.merge(a,S.merge(b,c));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(S.tot>3600000) n=0,\n\t\t\tS.push(S.rt),S.rt=S.tot=0,\n\t\t\tS.rt=S.build();\n\t\t}\n\t\tn=0,S.push(S.rt);\n\t\tfor(int i=1;i<=n;i++) printf(\"%d \",a[i]);\n\t}\n}\nsigned main(){\n\tstar::work();\n\tflush();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1610328628,
        "uid": 280015,
        "name": "Star_Cried",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "\u6570\u636e\u968f\u673a+\u533a\u95f4\u8986\u76d6\uff0c\u4e0a\u5e78\u798f\u7684\u73c2\u6735\u8389\u6811\u5373\u53ef\u3002\u53cd\u6b63\u4e5f\u5c316\u4e2a\u64cd\u4f5c\u3002\u4e0d\u5361\u5e38\u6570\u7684\u3002\n\n\u5176\u4ed6\u64cd\u4f5c\u76f4\u63a5\u66b4\u529b\u5373\u53ef\u3002\n\n\u671f\u671b\u590d\u6742\u5ea6$O(m\\log n)$\u3002\n\n\u6ce8\u610f\uff0c\u64cd\u4f5c\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4fdd\u8bc1\u73c2\u6735\u8389\u6811\u5185\u7684\u6570\u636e\u8fde\u7eed\uff0c\u5426\u5219\u4f1a\u51fa\u4e00\u4e9b\u9505\uff08\u6bd4\u5982\u83ab\u540d\u5176\u5999\u5c11\u51e0\u4e2a\u6570\u636e\uff09\uff0c~~set\u7684\u6307\u9488\u771f\u7384\u5b66~~\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<set>\n#include<vector>\nconst int md=1e9+7;\ntypedef long long LL;\ninline void upd(int&a){a+=a>>31&md;}\ninline int readint(){\n    int c=getchar(),d=0;\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);c=getchar())d=d*10+(c^'0');\n    return d;\n}\nint n,m;\nnamespace odt{\n    struct node{\n        int l,r;mutable int val;\n        inline bool operator<(const node&rhs)const{return l<rhs.l;}\n    };\n    std::set<node>s;\n    inline void out(){\n        for(node i:s)\n        for(int j=i.l;j<=i.r;++j)printf(\"%d \",i.val);\n        putchar('\\n');\n    }\n    typedef std::set<node>::iterator iter;\n    inline void insert(int l,int r=0,int v=0){s.insert((node){l,r,v});}\n    inline iter split(int pos){\n        iter it=s.lower_bound((node){pos});\n        if(it!=s.end()&&it->l==pos)return it;\n        --it;\n        const int l=it->l,r=it->r,v=it->val;\n        s.erase(it),s.insert((node){l,pos-1,v});\n        return s.insert((node){pos,r,v}).first;\n    }\n    inline int sum(int l,int r){\n        int ret=0;\n        for(iter R=split(r+1),L=split(l);L!=R;++L)\n        ret=(ret+(L->r-L->l+1LL)*L->val)%md;\n        return ret;\n    }\n    inline void assign(int l,int r,int val){iter R=split(r+1),L=split(l);s.erase(L,R),s.insert((node){l,r,val});}\n    inline void add(int l,int r,int v){for(iter R=split(r+1),L=split(l);L!=R;++L)upd(L->val+=v);}\n    inline void clone(int l1,int r1,int l2,int r2){\n        static std::vector<node>vec;\n        vec.clear();\n        for(iter R=split(r1+1),L=split(l1);L!=R;++L)\n        vec.push_back(*L);\n        iter R=split(r2+1),L=split(l2);\n        s.erase(L,R);\n        for(node i:vec)s.insert((node){i.l-l1+l2,i.r-l1+l2,i.val});\n    }\n    inline void swap(int l1,int r1,int l2,int r2){\n        if(l1>l2)l1^=l2^=l1^=l2,r1^=r2^=r1^=r2;\n        static std::vector<node>v1,v2;\n        v1.clear(),v2.clear();\n        for(iter R=split(r1+1),L=split(l1);L!=R;++L)\n        v1.push_back(*L);\n        for(iter R=split(r2+1),L=split(l2);L!=R;++L)\n        v2.push_back(*L);\n        iter R=split(r1+1),L=split(l1);\n        s.erase(L,R);\n        R=split(r2+1),L=split(l2);\n        s.erase(L,R);\n        for(node i:v1)\n        insert(i.l-l1+l2,i.r-l1+l2,i.val);\n        for(node i:v2)\n        insert(i.l-l2+l1,i.r-l2+l1,i.val);\n    }\n    inline void reverse(int l,int r){\n        static std::vector<node>vec;\n        vec.clear();\n        for(iter R=split(r+1),L=split(l);L!=R;++L)\n        vec.push_back(*L);\n        iter R=split(r+1),L=split(l);\n        s.erase(L,R);\n        for(node i:vec)s.insert((node){r-i.r+l,r-i.l+l,i.val});\n    }\n}\nint main(){\n    n=readint(),m=readint();\n    for(int i=1;i<=n;++i)odt::insert(i,i,readint());\n    odt::insert(n+1);\n    while(m--)\n    switch(readint()){\n        case 1:{\n            int l=readint(),r=readint();\n            printf(\"%d\\n\",odt::sum(l,r));\n            break;\n        }\n        case 2:{\n            int l=readint(),r=readint(),v=readint();\n            odt::assign(l,r,v);\n            break;\n        }\n        case 3:{\n            int l=readint(),r=readint(),v=readint();\n            odt::add(l,r,v-md);\n            break;\n        }\n        case 4:{\n            int l1=readint(),r1=readint(),l2=readint(),r2=readint();\n            odt::clone(l1,r1,l2,r2); \n            break;\n        }\n        case 5:{\n            int l1=readint(),r1=readint(),l2=readint(),r2=readint();\n            odt::swap(l1,r1,l2,r2); \n            break;\n        }\n        case 6:{\n            int l=readint(),r=readint();\n            odt::reverse(l,r);\n            break;\n        }\n    }\n    odt::out();\n    return 0;\n}\n\n```",
        "postTime": 1557062241,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "## \u5206\u6790\n\u64cd\u4f5c\u4e00\u3001\u4e8c\u3001\u4e09\u4e3a\u73c2\u6735\u8389\u6811\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u56db\u3001\u4e94\u3001\u516d\u7a0d\u4f5c\u8f6c\u5316\u5373\u53ef\n\n\u4e0d\u4f1a\u73c2\u6735\u8389\u6811\u8bf7\u79fb\u6b65\u81f3[\u8fd9\u91cc](https://www.cnblogs.com/liuchanglc/p/13324921.html)\n### \u6c42\u548c\u64cd\u4f5c\n\u628a\u6bcf\u4e00\u6bb5\u533a\u95f4\u5206\u522b\u53d6\u51fa\uff0c\u66b4\u529b\u76f8\u52a0\n``` cpp\nll qh(ll l,ll r){\n    it2=Split(r+1),it1=Split(l);\n    ll ans=0;\n    for(it=it1;it!=it2;it++){\n        ans=(ans+(it->r-it->l+1)*it->val)%mod;\n    }\n    return ans;\n}\n```\n### \u8d4b\u503c\u64cd\u4f5c\n\u76f4\u63a5\u8c03\u7528$Assign$\u51fd\u6570\u5c06\u5176\u63a8\u5e73\u5373\u53ef\n``` cpp\nvoid Assign(ll l,ll r,ll val){\n    it2=Split(r+1),it1=Split(l);\n    s.erase(it1,it2);\n    s.insert(asd(l,r,val));\n}\n```\n### \u4fee\u6539\u64cd\u4f5c\n\u628a\u6bcf\u4e00\u6bb5\u533a\u95f4\u5206\u522b\u53d6\u51fa\uff0c\u66b4\u529b\u4fee\u6539\n``` cpp\nvoid ad(ll l,ll r,ll val){\n    it2=Split(r+1),it1=Split(l);\n    for(it=it1;it!=it2;it++){\n        it->val+=val;\n        it->val%=mod;\n    }\n}\n```\n### \u590d\u5236\u64cd\u4f5c\n\u5c06\u533a\u95f4$[l1,r1]$\u4e2d\u7684\u5143\u7d20\u53d6\u51fa\u8bb0\u5f55\u4e00\u4e0b\uff0c\u52a0\u5165\u5230\u533a\u95f4$[l2,r2]$\u4e2d\u5373\u53ef\n``` cpp\nvoid fz(ll l1,ll r1,ll l2,ll r2){\n    it2=Split(r1+1),it1=Split(l1);\n    for(tot=0,it=it1;it!=it2;it++){\n        a[++tot]=l2+it->l-l1,b[tot]=l2+it->r-l1,c[tot]=it->val;\n    }\n    for(ll i=1;i<=tot;++i){\n\tAssign(a[i],b[i],c[i]);\n    }\n}\n```\n### \u4ea4\u6362\u64cd\u4f5c\n\u5957\u7528\u590d\u5236\u64cd\u4f5c\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u533a\u95f4$[l1,r1]$\u590d\u5236\u5230\u533a\u95f4$[n+1,n+r1-l1+1]$\u4e2d\n\n\u518d\u5c06\u533a\u95f4$[l2,r2]$\u590d\u5236\u5230\u533a\u95f4$[l1,r1]$\u4e2d\n\n\u6700\u540e\u518d\u628a\u533a\u95f4$[n+1,n+r1-l1+1]$\u590d\u5236\u5230\u533a\u95f4$[l2,r2]$\u4e2d\n\n``` cpp\nvoid jh(ll l1,ll r1,ll l2,ll r2) {\n\tfz(l1,r1,n+1,n+r1-l1+1);\n\tfz(l2,r2,l1,r1);\n\tfz(n+1,n+r1-l1+1,l2,r2);\n}\n```\n### \u7ffb\u8f6c\u64cd\u4f5c\n\u628a\u533a\u95f4\u4e2d\u7684\u6570\u53d6\u51fa\uff0c\u518d\u5012\u5e8f\u52a0\u5165\n``` cpp\nvector<asd> g;\nvoid xz(ll l,ll r){\n    g.clear();\n    it2=Split(r+1),it1=Split(l);\n    aa=r;\n    for(it=it1;it!=it2;it++){\n        ll l=it->l,r=it->r,val=it->val;\n        g.push_back(asd(l,r,val));\n    }\n    s.erase(it1,it2);\n    for(ll i=0;i<g.size();i++){\n        s.insert(asd(aa-(g[i].r-g[i].l),aa,g[i].val));\n        aa-=(g[i].r-g[i].l+1);\n    }\n}\n```\n## \u5b8c\u6574\u4ee3\u7801\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=1e6+5;\nconst ll mod=1e9+7;\nll a[maxn],b[maxn],c[maxn];\nstruct asd{\n    ll l,r;\n    mutable ll val;\n    bool operator < (const asd& A) const{\n        return l<A.l;\n    }\n    asd(ll aa,ll bb,ll cc){\n        l=aa,r=bb,val=cc;\n    }\n    asd(ll aa){\n        l=aa;\n    }\n};\n#define sit set<asd>::iterator\nset<asd> s;\nll aa,bb,cc,dd,ee,n,m;\nsit it,it1,it2;\nsit Split(ll wz){\n    it=s.lower_bound(asd(wz));\n    if(it!=s.end() && it->l==wz) return it;\n    it--;\n    ll l=it->l,r=it->r,val=it->val;\n    s.erase(it);\n    s.insert(asd(l,wz-1,val));\n    return s.insert(asd(wz,r,val)).first;\n}\nll qh(ll l,ll r){\n    it2=Split(r+1),it1=Split(l);\n    ll ans=0;\n    for(it=it1;it!=it2;it++){\n        ans=(ans+(it->r-it->l+1)*it->val)%mod;\n    }\n    return ans;\n}\nvoid Assign(ll l,ll r,ll val){\n    it2=Split(r+1),it1=Split(l);\n    s.erase(it1,it2);\n    s.insert(asd(l,r,val));\n}\nvoid ad(ll l,ll r,ll val){\n    it2=Split(r+1),it1=Split(l);\n    for(it=it1;it!=it2;it++){\n        it->val+=val;\n        it->val%=mod;\n    }\n}\nvector<asd> g;\nvoid xz(ll l,ll r){\n    g.clear();\n    it2=Split(r+1),it1=Split(l);\n    aa=r;\n    for(it=it1;it!=it2;it++){\n        ll l=it->l,r=it->r,val=it->val;\n        g.push_back(asd(l,r,val));\n    }\n    s.erase(it1,it2);\n    for(ll i=0;i<g.size();i++){\n        s.insert(asd(aa-(g[i].r-g[i].l),aa,g[i].val));\n        aa-=(g[i].r-g[i].l+1);\n    }\n}\nint tot;\nvoid fz(ll l1,ll r1,ll l2,ll r2){\n    it2=Split(r1+1),it1=Split(l1);\n    for(tot=0,it=it1;it!=it2;it++){\n        a[++tot]=l2+it->l-l1,b[tot]=l2+it->r-l1,c[tot]=it->val;\n    }\n    for(ll i=1;i<=tot;++i){\n\t\tAssign(a[i],b[i],c[i]);\n    }\n}\nvoid jh(ll l1,ll r1,ll l2,ll r2) {\n\tfz(l1,r1,n+1,n+r1-l1+1);\n\tfz(l2,r2,l1,r1);\n\tfz(n+1,n+r1-l1+1,l2,r2);\n}\nint main(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(ll i=1;i<=n;i++){\n        scanf(\"%lld\",&aa);\n        s.insert(asd(i,i,aa));\n    }\n    s.insert(asd(n+1,n+1,0));\n    for(ll i=1;i<=m;i++){\n        scanf(\"%lld\",&aa);\n        if(aa==1){\n            scanf(\"%lld%lld\",&bb,&cc);\n            printf(\"%lld\\n\",qh(bb,cc));\n        } else if(aa==2){\n            scanf(\"%lld%lld%lld\",&bb,&cc,&dd);\n            Assign(bb,cc,dd);\n        } else if(aa==3){\n            scanf(\"%lld%lld%lld\",&bb,&cc,&dd);\n            ad(bb,cc,dd);\n        } else if(aa==4){\n            scanf(\"%lld%lld%lld%lld\",&bb,&cc,&dd,&ee);\n            fz(bb,cc,dd,ee);\n        } else if(aa==5){\n            scanf(\"%lld%lld%lld%lld\",&bb,&cc,&dd,&ee);\n            jh(bb,cc,dd,ee);\n        } else {\n            scanf(\"%lld%lld\",&bb,&cc);\n            xz(bb,cc);\n        }\n\n    }\n    it2=Split(n+1),it1=Split(1);\n    for(it=it1;it!=it2;it++){\n        for(ll i=it->l;i<=it->r;i++)printf(\"%lld \",it->val%mod);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1594990845,
        "uid": 316322,
        "name": "hzoi_liuchang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "\u8fd9\u9898\u53ea\u6709\u5728\u6570\u636e\u968f\u673a\u7684\u60c5\u51b5\u4e0b4\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u624d\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u6570\u636e\u968f\u673a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5e73\u8861\u6811\u7ef4\u62a4\u76f8\u540c\u503c\u57df\u8fde\u7eed\u6bb5\uff0c\u7136\u540e\u91cd\u70b9\u5c31\u662f\u62c6\u533a\u95f4\uff0c\u6211\u4eec\u8003\u8651\u628a\u5728\u627e\u8282\u70b9\u65f6\u628a\u4e00\u4e2a\u8fde\u7eed\u6bb5\u62c6\u62103\u6bb5x\u3001y\u3001z\uff0c\u628az\u4f5c\u4e3ay\u7684\u540e\u7ee7\uff0cy\u4f5c\u4e3ax\u7684\u540e\u7ee7\uff0c\u518d\u8fd4\u56dey\u5373\u53ef\uff0c\u5176\u4ed6\u601d\u8def\u90fd\u975e\u5e38\u7b80\u5355\uff0c\u4e3b\u8981\u8003\u5bdf\u4ee3\u7801\u80fd\u529b\u3002\n\n```cpp\n#define poi(x) (rs(fa(x)) == (x))\n#define reverse(x) (swap(ls(x), rs(x)), t[x].filp ^= 1)\nconst int p = 1e9 + 7;\nstack<int> st;\nint rt, cnt, a[300005], len[300005];\nstruct node {\n\tint fa, child[2], tot, sum, w, size, len;\n\tbool filp, tag;\n} t[3000005];\ninl void upd(int x) {\n\tt[x].tot = ((t[ls(x)].tot + t[rs(x)].tot) % p + (1ll * t[x].w * t[x].len)) % p;\n\tt[x].size = t[ls(x)].size + t[rs(x)].size + t[x].len;\n}\ninl int newn(int w, int len) {\n\tre x;\n\tif (!st.empty())\n\t\tx = st.top(), st.pop();\n\telse\n\t\tx = ++cnt;\n\tt[x].size = t[x].tot = fa(x) = ls(x) = rs(x) = t[x].filp = t[x].sum = 0;\n\tt[x].w = w, t[x].len = len, upd(x);\n\treturn x;\n}\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = son(x, fs ^ 1);\n\tif (gf) son(gf, gfs) = x;\n\tson(f, fs) = s, son(x, fs ^ 1) = f;\n\tif (s) fa(s) = f;\n\tfa(f) = x, fa(x) = gf, upd(f);\n}\ninl void sum(int x, int w) { t[x].tot = (t[x].tot + 1ll * w * t[x].size) % p, t[x].w = (t[x].w + w) % p, t[x].sum = (t[x].sum + w) % p; }\ninl void pushdown(int x) {\n\tif (t[x].sum) {\n\t\tif (ls(x)) sum(ls(x), t[x].sum);\n\t\tif (rs(x)) sum(rs(x), t[x].sum);\n\t\tt[x].sum = 0;\n\t}\n\tif (t[x].filp) {\n\t\tif (ls(x)) reverse(ls(x));\n\t\tif (rs(x)) reverse(rs(x));\n\t\tt[x].filp = 0;\n\t}\n}\ninl void push(int x) {\n\tif (fa(x)) push(fa(x));\n\tpushdown(x);\n}\ninl void splay(int x, int to = 0) {\n\tpush(x);\n\twhile (fa(x) != to) {\n\t\tif (fa(fa(x)) != to) poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tif (!to) rt = x;\n\tupd(x);\n}\ninl int split(int x, int k) {\n\tre y = newn(t[x].w, t[x].len - k);\n\tt[x].len = k;\n\tif (!rs(x))fa(rs(x) = y) = x;\n\telse {\n\t\tpushdown(x);\n\t\tre o = rs(x); pushdown(o);\n\t\twhile (ls(o))pushdown(o = ls(o));\n\t\tfa(ls(o) = y) = o;\n\t\twhile (o != x) upd(o), o = fa(o);\n\t}\n\tsplay(y);\n\treturn y;\n}\ninl void find(int k) {\n\tre x = rt;\n\twhile (x) {\n\t\tpushdown(x);\n\t\tif (t[ls(x)].size >= k) x = ls(x);\n\t\telse {\n\t\t\tk -= t[ls(x)].size;\n\t\t\tif (t[x].len >= k) {\n\t\t\t\tif (k != t[x].len)split(x, k);\n\t\t\t\tif (k != 1)x = split(x, k - 1);\n\t\t\t\treturn splay(x);\n\t\t\t}\n\t\t\telse k -= t[x].len, x = rs(x);\n\t\t}\n\t}\n}\ninl int nxt(int k, bool f) {\n\tfind(k);\n\tre x = rt;\n\tx = son(x, f);\n\twhile (son(x, f ^ 1))pushdown(x), x = son(x, f ^ 1);\n\treturn x;\n}\ninl void build(int &k, int l, int r) {\n\tif (l > r) return;\n\tre mid = l + r >> 1;\n\tk = newn(a[mid], len[mid]);\n\tif (a[mid] == inf)t[k].tag = 1, t[k].w = 0, upd(k);\n\tbuild(ls(k), l, mid - 1), build(rs(k), mid + 1, r);\n\tif (ls(k))fa(ls(k)) = k; if (rs(k)) fa(rs(k)) = k;\n\tupd(k);\n}\nint num;\ninl void travel(int x) {\n\tpushdown(x);\n\tif (ls(x)) travel(ls(x));\n\ta[++num] = t[x].w, len[num] = t[x].len;\n\tif (rs(x)) travel(rs(x));\n}\ninl void erase(int x) {\n\tif (ls(x)) erase(ls(x));\n\tst.push(x);\n\tif (rs(x)) erase(rs(x));\n}\ninl void change(int x, int w) {\n\tif (w == 1) {\n\t\tt[x].w = w, upd(x);\n\t\treturn;\n\t}\n\terase(x);\n\tre k = fa(x);\n\tls(k) = fa(x) = 0;\n\tfa(ls(k) = newn(w, t[x].size)) = k;\n\tsplay(ls(k));\n}\ninl void print(int x) {\n\tpushdown(x);\n\tif (ls(x))print(ls(x));\n\tif (!t[x].tag)for (re i = 1; i <= t[x].len; i++)writesp(t[x].w);\n\tif (rs(x))print(rs(x));\n}\ninl int cut(int a, int b) {\n\tre l, r;\n\tfind(a), l = rt, find(b + 2), r = rt;\n\tsplay(l), splay(r, l);\n\treturn ls(r);\n}\nsigned main() {\n\tre n = read<int>(), m = read<int>(), l, r, op, l1, r1, w, tmp1, tmp2, f;\n\ta[++num] = inf, len[num] = 1;\n\tfor (re i = 1; i <= n; i++) a[++num] = read<int>() % p, len[num] = 1;\n\ta[++num] = inf, len[num] = 1;\n\tbuild(rt, 1, num);\n\twhile (m--) {\n\t\top = read<int>(), l = read<int>(), r = read<int>();\n\t\tswitch (op) {\n\t\tcase 1: {\n\t\t\twriteln(t[cut(l, r)].tot);\n\t\t\tbreak;\n\t\t}\n\t\tcase 2: {\n\t\t\tw = read<int>() % p;\n\t\t\tchange(cut(l, r), w);\n\t\t\tbreak;\n\t\t}\n\t\tcase 3: {\n\t\t\tw = read<int>() % p;\n\t\t\tsum(cut(l, r), w);\n\t\t\tbreak;\n\t\t}\n\t\tcase 4: {\n\t\t\tl1 = read<int>(), r1 = read<int>();\n\t\t\tnum = 0, travel(cut(l, r));\n\t\t\tbuild(tmp1, 1, num);\n\t\t\terase(tmp2 = cut(l1, r1));\n\t\t\tls(fa(tmp2)) = 0, f = fa(tmp2), fa(tmp2) = 0;\n\t\t\tfa(ls(f) = tmp1) = f;\n\t\t\tsplay(ls(f));\n\t\t\tbreak;\n\t\t}\n\t\tcase 5: {\n\t\t\tl1 = read<int>(), r1 = read<int>();\n\t\t\tnum = 0, travel(cut(l, r));\n\t\t\tbuild(tmp1, 1, num);\n\t\t\ttmp2 = cut(l1, r1);\n\t\t\tls(fa(tmp2)) = 0, f = fa(tmp2), fa(tmp2) = 0;\n\t\t\tfa(ls(f) = tmp1) = f;\n\t\t\tsplay(ls(f));\n\t\t\tf = cut(l, r);\n\t\t\tls(fa(f)) = tmp2, fa(tmp2) = fa(f), fa(f) = 0;\n\t\t\terase(f);\n\t\t\tbreak;\n\t\t}\n\t\tcase 6: {\n\t\t\tf = cut(l, r);\n\t\t\treverse(f);\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t}\n\tprint(rt);\n}\n```\n\n",
        "postTime": 1569312006,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P5350 \u5e8f\u5217"
    },
    {
        "content": "## \u524d\u7f6e\u77e5\u8bc6\uff1aODT\n\n\u975e\u5e38\u66b4\u529b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u5de6\u8f6c[CF896C](https://www.luogu.org/problemnew/show/CF896C)\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5982\u4ea4\u6362\uff0c\u590d\u5236\uff0c\u53cd\u8f6c\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u90a3\u4e00\u6bb5\u7684\u70b9\u5168\u90e8\u653e\u5165\u4e00\u4e2avector\u4e2d\u50a8\u5b58\uff0c\u5e76\u4fee\u6539\u5de6\u53f3\u7684\u8fb9\u754c\u4fe1\u606f\uff0c\u7136\u540e\u66b4\u529b\u63d2\u5165\u3002\n\n\u5176\u4ed6\u64cd\u4f5c\u548c\u677f\u5b50\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\n\n\u8fd9\u91cc\u63d0\u9192\u4e00\u4e0b\u5927\u5bb6\uff0c\u4f60\u4ee5\u4e3asplit\u51fa\u6765\u5f97\u8fed\u4ee3\u5668\u5c31\u662f\u6700\u540e\u7684\u7ed3\u679c\u4e86\uff0c\u5176\u5b9e\u5728\u8fdb\u884c\u5176\u4ed6split\u64cd\u4f5c\u65f6\u53ef\u80fd\u5df2\u7ecf\u6539\u53d8\u4e86\uff01\u6240\u4ee5\u6700\u540e\u7528\u518d\u7528lower_bound\u5b9a\u4f4d\u4e00\u4e0b\u3002\n\n\u53ef\u80fd\u9700\u8981\u4e00\u70b9\u5e38\u6570\u4f18\u5316\uff0c\u4e0d\u8fc7\u57fa\u672c\u4e0a\u5f00\u4e86O2\u662f\u80fd\u8fc7\u7684\u3002\n\n```cpp#include<bits/stdc++.h>\n#define res register int \nusing namespace std;\n#define IT register set<node>::iterator\nconst int N=300010,p=1e9+7;\nint n,m;\nstruct node{\n    int l,r;\n    mutable int v;\n    node(int l,int r=-1,int v=0):l(l),r(r),v(v){}\n};\nbool operator<(const node &a,const node &b){\n    return a.l<b.l;\n}\nset<node>s;\ninline set<node>::iterator split(int pos){\n    IT it=s.lower_bound(node(pos));\n    if(it!=s.end()&&it->l==pos)return it;\n    --it;\n    int l=it->l,r=it->r;\n    int v=it->v;\n    s.erase(it);\n    s.insert(node(l,pos-1,v));\n    return s.insert(node(pos,r,v)).first;\n}\ninline void add(res l,res r,res val){\n    IT itl=split(l),itr=split(r+1);\n    itl=s.lower_bound(node(l));\n    itr=s.lower_bound(node(r+1));\n    for(;itl!=itr;++itl)itl->v=(itl->v+val)%p;\n}\ninline void assign_val(res l,res r,res val){\n    IT itl=split(l),itr=split(r+1);\n    itl=s.lower_bound(node(l));\n    itr=s.lower_bound(node(r+1));\n    s.erase(itl,itr);\n    s.insert(node(l,r,val));\n}\ninline int sum(res l,res r){\n    IT itl=split(l),itr=split(r+1);\n    itl=s.lower_bound(node(l));\n    itr=s.lower_bound(node(r+1));\n    int ret=0;\n    for(IT it=itl;it!=itr;it++){\n        ret=(ret+1ll*(it->r-it->l+1)*it->v%p)%p;\n    }\n    return ret;\n}\nvector<node>q;\ninline void copy(int a,int b,int c,int d){\n    IT ita=split(a),itb=split(b+1),itc=split(c),itd=split(d+1);\n    ita=s.lower_bound(node(a));\n    itb=s.lower_bound(node(b+1));\n    itc=s.lower_bound(node(c));\n    itd=s.lower_bound(node(d+1));\n    q.clear();\n    for(IT it=ita;it!=itb;++it){\n        node ls=*it;\n        ls.l+=c-a;\n        ls.r+=c-a;\n        q.push_back(ls);\n    }\n    s.erase(itc,itd);\n    for(vector<node>::iterator it=q.begin();it!=q.end();++it){\n        s.insert(*it);\n    }\n}\nvoid print(){\n    for(IT it=s.begin();it!=s.end();++it){\n        if(it->l==n+1)break;\n        for(int i=1;i<=it->r-it->l+1;++i){\n            printf(\"%d \",it->v);\n        }\n    }\n    puts(\"\");\n}\ninline void swap(res a,res b,res c,res d){\n    IT itd=split(d+1),itc=split(c),itb=split(b+1),ita=split(a);\n    ita=s.lower_bound(node(a));\n    itb=s.lower_bound(node(b+1));\n    itc=s.lower_bound(node(c));\n    itd=s.lower_bound(node(d+1));\n    q.clear();\n    for(IT it=ita;it!=itb;++it){\n        node ls=*it;\n        ls.l+=c-a;\n        ls.r+=c-a;\n        q.push_back(ls);\n    }\n    for(IT it=itc;it!=itd;++it){\n        node ls=*it;\n        ls.l-=c-a;\n        ls.r-=c-a;\n        q.push_back(ls);\n    }\n    s.erase(itc,itd);\n    ita=s.lower_bound(node(a));\n    itb=s.lower_bound(node(b+1));\n    s.erase(ita,itb);\n    for(vector<node>::iterator it=q.begin();it!=q.end();++it){\n        s.insert(*it);\n    }\n}\ninline void reverse(res l,res r){\n    IT itl=split(l),itr=split(r+1);\n    itl=s.lower_bound(node(l));\n    itr=s.lower_bound(node(r+1));\n    q.clear();\n    for(IT it=itl;it!=itr;it++){\n        q.push_back(*it);\n    }\n    s.erase(itl,itr);\n    for(res i=q.size()-1,now=0;~i;--i){\n        res sz=q[i].r-q[i].l+1;\n        q[i].l=l+now;\n        q[i].r=l+now+sz-1;\n        now+=sz;\n        s.insert(q[i]);\n    }\n}\ninline int read(){\n    res ret=0;\n    char c=getchar();\n    for(;!isdigit(c);c=getchar());\n    for(;isdigit(c);ret=ret*10+c-'0',c=getchar());\n    return ret;\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;++i){\n        s.insert(node(i,i,read()));\n    }\n    s.insert(node(n+1,n+1,0));\n    while(m--){\n        res op=read(),x,y,z,a,b,c,d;\n        if(op==1){\n        \tx=read(),y=read();\n            printf(\"%d\\n\",sum(x,y));\n        }else if(op==2){\n            x=read(),y=read(),z=read();\n            assign_val(x,y,z);\n        }else if(op==3){\n            x=read(),y=read(),z=read();\n            add(x,y,z);\n        }else if(op==4){\n            a=read(),b=read(),c=read(),d=read();\n            copy(a,b,c,d);\n        }else if(op==5){\n            a=read(),b=read(),c=read(),d=read();\n            swap(a,b,c,d);\n        }else{\n            x=read(),y=read();\n            reverse(x,y);\n        }\n    }\n    print();\n    return 0;\n}\n```",
        "postTime": 1557027373,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    },
    {
        "content": "\u770b\u89c1\u4e00\u5806\u4eba\u5728\u55b7swap\u6bd2\u7624\uff0c\u5176\u5b9eswap\u5f88\u597d\u5199\u554a\u3002\n\n\u9996\u5148\uff0c\u5148\u5728\u8f93\u5165\u540e\u9762\u52a0\u4e0a\u8fd9\u4e48\u4e00\u53e5\u8bdd\uff1a\n\n```cpp\ns.insert(node(n+1,n+n+5,0));\n    \n```\n\u5728\u8fd9\u4e2a\u5e8f\u5217\u540e\u52a0\u4e00\u4e2a\u957f\u4e3an\u7684\u7a7a\u5e8f\u5217\u3002\n\n\u7136\u540e\u4fdd\u8bc1\u60a8\u7684Copy\u662f\u5bf9\u7684\n\nCopy\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n```cpp\nvoid Copy(int l1,int r1,int l2,int r2) {\n\tIT itr=Split(r1+1),itl=Split(l1);\n\tfor(tot=0;itl!=itr;++itl)\n\t\ta[++tot]=l2+itl->l-l1,b[tot]=l2+itl->r-l1,c[tot]=itl->val;\n\tfor(int i=1;i<=tot;++i)\n\t\tAssign(a[i],b[i],c[i]);\n}\n```\n\n\u5927\u6982\u5c31\u662f\u5b58\u4e00\u4e0bCopy\u8fc7\u53bb\u5bf9\u5e94\u7684\u533a\u95f4\u662f\u4ec0\u4e48\uff0c\u7136\u540eAssign\u8fc7\u53bb\u5c31\u597d\u4e86\u3002\u5c11\u5bf9\u6307\u9488\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6307\u9488\u592a\u7384\u5b66\u4e86qwq\n\n\u63a5\u7740Swap\uff0c\u770b\u770b\u4ee3\u7801\u5c31\u80fd\u61c2\u2026\u2026\n\n```cpp\nvoid Swap(int l1,int r1,int l2,int r2) {\n\tCopy(l1,r1,n+1,n+r1-l1+1);\n\tCopy(l2,r2,l1,r1);\n\tCopy(n+1,n+r1-l1+1,l2,r2);\n}\n```\n\n\u771f\u7684\u4e00\u70b9\u90fd\u4e0d\u6bd2\u7624\uff01\uff01\uff01\n\n\u53ea\u8981\u60a8\u80fd\u7406\u89e3swap\u6574\u6570\u65f6\u7684\u5185\u90e8\u64cd\u4f5c\uff1a\n\n```cpp\nvoid swap(int &a,int &b) {\n    int tmp;\n    tmp=a;\n    a=b;\n    b=tmp;\n}\n```\n\n\n\n\u7136\u540e\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6c42\u548c\uff0c\u533a\u95f4\u63a8\u5e73\u90fd\u4e0d\u8bb2\u4e86\u3002\n\n\u533a\u95f4\u7ffb\u8f6c\n\n\u5148\u770b\u4ee3\u7801\uff0c\u770b\u61c2\u4e86\u5c31\u4e0d\u7528\u770b\u8bf4\u660e\u4e86\u3002\n\n```cpp\nvoid Reverse(int l,int r) {\n\tIT itr=Split(r+1),itl=Split(l);\n\tvector<node>vec;\n\tfor(IT it=itl;it!=itr;++it)\n\t\tvec.push_back(node(it->l,it->r,it->val));\n\ts.erase(itl,itr);\n\tint t=l;\n\tfor(int i=vec.size()-1;i>=0;--i)\n\t\ts.insert(node(t,t+vec[i].r-vec[i].l,vec[i].val)),t+=vec[i].r-vec[i].l+1;\n}\n```\n\n\u8bf4\u660e\uff1a\u5c31\u662f\u5148\u628a\u8282\u70b9\u5b58\u8d77\u6765\uff0c\u628a\u533a\u95f4\u5220\u6389\uff0c\u7136\u540e\u628a\u8282\u70b9\u5012\u7740\u63d2\u56de\u53bb\u3002\n\n\u5176\u5b9e\u6211\u611f\u89c9ODT\u7684\u64cd\u4f5c\u90fd\u5f88\u597d\u61c2\uff0c\u56e0\u4e3a\u5168\u662f\u66b4\u529b\u2026\u2026\n\n\u7136\u540e\u5173\u4e8e\u8f93\u51fa\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u5b58\u7684\u662f\u533a\u95f4\uff0c\u6240\u4ee5\u8981\u8003\u8651\u5982\u4f55\u8f93\u51fa\u533a\u95f4\u957f\u5ea6\u904d\u3002\u7136\u540e\u778e\u641e\u641e\u51fa\u6765\u4e86\u4e00\u4e2a\u4e1c\u897f\u2026\u2026\n\n```cpp\nvoid Print(){\n\tIT it=s.begin();\n\tint print=0;\n\twhile(print<n) {\n\t\tfor(int i=it->l;i<=it->r;++i)\n\t\t{\n\t\t\tprintf(\"%lld \",it->val);\n\t\t\t++print;\n\t\t\tif(print==n)return (void)puts(\"\");\n\t\t}\n\t\t++it;\n\t}\n}\n```\n\n\u5b8c\u6574\u7248\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int mod=1000000007;\nconst int N=300005;\nint n,m;\nstruct node {\n\tint l,r;\n\tmutable int val;\n\tnode(int L,int R=-1,int V=0):l(L),r(R),val(V){}\n\tbool operator < (const node &rhs)const{return l<rhs.l;}\n};\nset<node>s;\n#define IT set<node>::iterator\nvoid Print(){\n\tIT it=s.begin();\n\tint print=0;\n\twhile(print<n) {\n\t\tfor(int i=it->l;i<=it->r;++i)\n\t\t{\n\t\t\tprintf(\"%lld \",it->val);\n\t\t\t++print;\n\t\t\tif(print==n)return (void)puts(\"\");\n\t\t}\n\t\t++it;\n\t}\n}\nIT Split(int pos){\n\tIT it=s.lower_bound(node(pos));\n\tif(it!=s.end()&&it->l==pos)return it;\n\t--it;\n\tint ll=it->l,rr=it->r,v=it->val;\n\ts.erase(it);\n\ts.insert(node(ll,pos-1,v));\n\treturn s.insert(node(pos,rr,v)).first;\n}\nint Sum(int l,int r){\n\tint res=0;\n\tIT itr=Split(r+1),itl=Split(l);\n\tfor(;itl!=itr;++itl)\n\t\tres=(res+(itl->r-itl->l+1)*itl->val)%mod;\n\treturn (int)res;\n}\nvoid Assign(int l,int r,int val) {\n\tIT itr=Split(r+1),itl=Split(l);\n\ts.erase(itl,itr);\n\ts.insert(node(l,r,val));\n}\nvoid Add(int l,int r,int val) {\n\tIT itr=Split(r+1),itl=Split(l);\n\tfor(;itl!=itr;++itl)\n\t\titl->val=(itl->val+val)%mod;\n}\nint a[N],b[N],c[N],tot;\nvoid Copy(int l1,int r1,int l2,int r2) {\n\tIT itr=Split(r1+1),itl=Split(l1);\n\tfor(tot=0;itl!=itr;++itl)\n\t\ta[++tot]=l2+itl->l-l1,b[tot]=l2+itl->r-l1,c[tot]=itl->val;\n\tfor(int i=1;i<=tot;++i)\n\t\tAssign(a[i],b[i],c[i]);\n}\nvoid Swap(int l1,int r1,int l2,int r2) {\n\tCopy(l1,r1,n+1,n+r1-l1+1);\n\tCopy(l2,r2,l1,r1);\n\tCopy(n+1,n+r1-l1+1,l2,r2);\n}\nvoid Reverse(int l,int r) {\n\tIT itr=Split(r+1),itl=Split(l);\n\tvector<node>vec;\n\tfor(IT it=itl;it!=itr;++it)\n\t\tvec.push_back(node(it->l,it->r,it->val));\n\ts.erase(itl,itr);\n\tint t=l;\n\tfor(int i=vec.size()-1;i>=0;--i)\n\t\ts.insert(node(t,t+vec[i].r-vec[i].l,vec[i].val)),t+=vec[i].r-vec[i].l+1;\n}\nsigned main() {\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1,x;i<=n;++i)\n\t\tscanf(\"%d\",&x),s.insert(node(i,i,x));\n\ts.insert(node(n+1,n+n+5,0));\n\twhile(m--) {\n\t\tint opt;\n\t\tscanf(\"%lld\",&opt);\n\t\tif(opt==1) {\n\t\t\tint l,r;\n\t\t\tscanf(\"%lld%lld\",&l,&r);\n\t\t\tprintf(\"%d\\n\",Sum(l,r));\n\t\t\t//Print();\n\t\t}\n\t\tif(opt==2) {\n\t\t\tint l,r,val;\n\t\t\tscanf(\"%lld%lld%lld\",&l,&r,&val);\n\t\t\tAssign(l,r,val);\n\t\t\t//Print();\n\t\t}\n\t\tif(opt==3) {\n\t\t\tint l,r,val;\n\t\t\tscanf(\"%lld%lld%lld\",&l,&r,&val);\n\t\t\tAdd(l,r,val);\n\t\t\t//Print();\n\t\t}\n\t\tif(opt==4) {\n\t\t\tint l1,r1,l2,r2;\n\t\t\tscanf(\"%lld%lld%lld%lld\",&l1,&r1,&l2,&r2);\n\t\t\tCopy(l1,r1,l2,r2);\n\t\t\t//Print();\n\t\t\t}\n\t\tif(opt==5) {\n\t\t\tint l1,r1,l2,r2;\n\t\t\tscanf(\"%lld%lld%lld%lld\",&l1,&r1,&l2,&r2);\n\t\t\tSwap(l1,r1,l2,r2);\n\t\t\t//Print();\n\t\t}\n\t\tif(opt==6) {\n\t\t\tint l,r;\n\t\t\tscanf(\"%lld%lld\",&l,&r);\n\t\t\tReverse(l,r);\n\t\t\t//Print();\n\t\t}\n\t}\n\tPrint();\n\treturn 0;\n}\n```",
        "postTime": 1582813018,
        "uid": 123384,
        "name": "tommy0221",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5350 \u3010\u5e8f\u5217\u3011"
    }
]