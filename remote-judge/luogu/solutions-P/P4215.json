[
    {
        "content": "### \u9898\u610f\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217,\u6709$m$\u4e2a\u533a\u95f4,\u8fdb\u884c$Q$\u6b21\u5355\u70b9\u4fee\u6539,\u6bcf\u6b21\u4fee\u6539\u7ed9\u51fa\u4e00\u4e2a$x$,\u8ba9\u5e8f\u5217\u7684\u7b2cx\u4e2a\u6570\u51cf\u4e00,\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539,\u90fd\u9700\u8981\u8f93\u51fa,\u5f53\u524d\u4fee\u6539\u540e\u5728\u7ed9\u5b9a\u7684m\u4e2a\u533a\u95f4\u4e2d\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u7684\u533a\u95f4\u548c\u4e3a0,\u9898\u76ee\u5f3a\u5236\u5728\u7ebf\u3002\n\n\n------------\n\u8fd9\u9898\u7684\u89e3\u6cd5\u5176\u5b9e\u6709\u5f88\u591a\u79cd,\u5927\u90e8\u5206\u90fd\u7528\u5230\u4e86\u7ebf\u6bb5\u6811,\u505a\u6cd5\u591a\u79cd\u591a\u6837\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u5728\u7f51\u7edc\u4e0a\u641c\u4e00\u641c\u3002\n\n\u8fd9\u91cc\u8bb2\u7684\u662f\u7ebf\u6bb5\u6811\u52a0\u94fe\u8868\u7684\u505a\u6cd5!\n\n\n------------\n### \u63a8\u5bfc\u8fc7\u7a0b\n\u4e0b\u9762\u662f\u63a8\u5bfc\u8fc7\u7a0b(\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u6709\u95ee\u9898\u7684\u601d\u8def),\u6ca1\u6709\u5174\u8da3\u7684\u8bf7\u76f4\u63a5\u8df3\u5230\u4e0b\u9762\u6b63\u89e3\u90e8\u5206\n\n\u89c2\u5bdf\u4e00\u4e0b\u6570\u636e\u8303\u56f4\u662f$1e5$,\u53ea\u80fd\u5728$O(nlog(n))$\u4ee5\u5185\u505a,\u8fd9\u9898\u7ed9\u4eba\u4e00\u79cd\u50cf\u662f\u5355\u70b9\u4fee\u6539,\u533a\u95f4\u67e5\u8be2\u7684\u611f\u89c9,\u90a3\u4e48\u5c31\u8003\u8651\u4e00\u4e0b\u7ebf\u6bb5\u6811(~~\u8ddf\u7740\u611f\u89c9\u8d70\uff0c\u6ca1\u6bdb\u75c5~~)\n\n\u8003\u8651\u4e00\u4e0b\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u4ee5\u53ca\u533a\u95f4\u7684happy\u503c(\u5373\u9898\u76ee\u8981\u6c42\u7684\u5168\u96f6\u533a\u95f4\u4e2a\u6570),\u8282\u70b9\u50a8\u5b58\u4e86\u4ee5\u4e0b\u7684\u4fe1\u606f\n```cpp\nboy[N];//\u521a\u597d\u5904\u5728\u8be5\u533a\u95f4\u7684\u718a\u5b69\u5b50\u4e2a\u6570,\u4e0d\u4e0b\u4f20\uff0c\u4e0d\u4e0a\u4f20\nleft[N];//\u5f53\u524d\u533a\u95f4\u5269\u4e0b\u7684\u6c14\u7403\u4e2a\u6570\nhappy[N];//\u5f53\u524d\u533a\u95f4\u4e2d\u5df2\u7ecfhappy\u7684\u4eba\u7684\u4e2a\u6570\n```\n\u5c06\u6240\u6709\u7684\u718a\u5b69\u5b50\u7684\u533a\u95f4\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\u4e2d,\u627e\u5230\u8868\u793a\u5176\u6240\u5728\u533a\u95f4\u7684\u8282\u70b9,$boy$++;\n\n\u6bcf\u6b21\u4fee\u6539\u540e\u8fdb\u884cupdate\uff0c\u7236\u4eb2\u8282\u70b9\u7684happy\u503c\u7b49\u4e8e\u5de6\u53f3\u513f\u5b50\u7684happy\u7684\u548c,\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684left\u4e3a0\uff0c\u5f53\u524d\u8282\u70b9\u7684happy\u503c\u518d\u52a0\u4e0a\u4e86\u5f53\u524d\u8282\u70b9\u7684boy\u6570,\u4e0d\u65ad\u5c06\u4fe1\u606f\u4e0a\u4f20,\u5230\u8fbe\u6839\u8282\u70b9,\u5b8c\u6210\u4fee\u6539\u64cd\u4f5c,\u7b54\u6848\u4e3a\u6839\u8282\u70b9\u7684happy\u503c\u3002\n##### \u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<cstdio>\n#include<iostream>\n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint Q;\nint n,m;\nint a[N];\n\nstruct Seg\n{\n    int boy[N];\n    int left[N];\n    int happy[N];\n    int l[N],r[N];\n    \n    void PushUp(int rt)\n    {\n        left[rt]=left[rt<<1]+left[rt<<1|1];\n        happy[rt]=happy[rt<<1]+happy[rt<<1|1];\n        if(!left[rt]) happy[rt]+=boy[rt];\n    }\n    \n    void build(int rt,int ll,int rr)\n    {\n        l[rt]=ll;r[rt]=rr;\n        if(ll==rr)\n        {\n            left[rt]=a[ll];\n            return;\n        }\n        int mid=(ll+rr)>>1;\n        build(rt<<1,ll,mid);\n        build(rt<<1|1,mid+1,rr);\n        PushUp(rt);\n    }\n    \n    void addkid(int rt,int ll,int rr)\n    {\n        if(l[rt]==ll&&r[rt]==rr)\n        {\n            if(left[rt]==0) happy[rt]=boy[rt]+1;\n            boy[rt]++;return;\n        }\n        int mid=(l[rt]+r[rt])>>1;\n        if(rr<=mid) addkid(rt<<1,ll,rr);\n        else if(ll>mid) addkid(rt<<1|1,ll,rr);\n        else addkid(rt<<1,ll,mid),addkid(rt<<1|1,mid+1,rr);\n        PushUp(rt);\n    }\n    \n    void update(int rt,int x)\n    {\n        if(l[rt]==r[rt])\n        {\n            left[rt]--;\n            if(!left[rt]) happy[rt]=boy[rt];\n            return;\n        }\n        int mid=(l[rt]+r[rt])>>1;\n        if(x<=mid) update(rt<<1,x);\n        else update(rt<<1|1,x);\n        PushUp(rt);\n    }\n}Tree;\n\nint lastans;\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    scanf(\"%d\",&a[i]);\n    Tree.build(1,1,n);\n    for(int i=1,a,b;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        Tree.addkid(1,a,b);\n    }\n    scanf(\"%d\",&Q);\n    for(int i=1,x;i<=Q;i++)\n    {\n        scanf(\"%d\",&x);\n        x=(x+lastans-1)%n+1;\n        Tree.update(1,x);\n        lastans=Tree.happy[1];\n        printf(\"%d\\n\",lastans);\n    }\n    return 0;\n}\n\n```\n\u63d0\u4ea4\u4e00\u6ce2,$0$\u5206!!!\n\n\u5982\u679c\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u4e0a\u9762\u7684\u601d\u8def\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898,\u56e0\u4e3a\u7ebf\u6bb5\u6811\u662f\u628a\u4e00\u4e2a\u5927\u533a\u95f4\u5206\u6210\u4e24\u4e2a\u957f\u5ea6\u4e0d\u5dee\u8d85\u8fc7$1$\u7684\u5c0f\u533a\u95f4,\u6240\u4ee5\u53ea\u7528\u4e00\u4e2a\u8282\u70b9\u662f\u4e0d\u80fd\u8868\u793a\u6709\u4e9b\u718a\u5b69\u5b50\u7684\u533a\u95f4\u503c\u7684\u3002\u600e\u4e48\u529e\uff1f\n\n\u80fd\u4e0d\u80fd\u5728\u5efa\u6811\u7684\u65f6\u5019\u52a8\u52a8\u624b\u811a\uff1f\u5148\u5c06\u718a\u5b69\u5b50\u7684\u533a\u95f4\u50a8\u5b58\u4e0b\u6765,\u518d\u8fdb\u884c\u5efa\u6811,\u5efa\u6811\u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u533a\u95f4\u957f\u5ea6\u5305\u542b\u4e86\u718a\u5b69\u5b50\u7684\u533a\u95f4,\u800c\u6309\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u5efa\u7acb\u7684\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u53c8\u4e0d\u80fd\u5b8c\u5168\u5305\u542b\u718a\u5b69\u5b50\u533a\u95f4\uff0c\u5c31\u4e0d\u6309\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\u53bb\u5efa\uff0c\u800c\u662f\u5c06\u5f53\u524d\u533a\u95f4\u7684\u513f\u5b50\u8282\u70b9\u533a\u95f4\u8303\u56f4\u8bbe\u7f6e\u6210,\u718a\u5b69\u5b50\u7684\u533a\u95f4\uff0c\u4e0d\u5305\u542b\u718a\u5b69\u5b50\u7684\u533a\u95f4\u3002\n\n\u4f46\u662f\u518d\u4ed4\u7ec6\u60f3\u60f3,\u4e0a\u9762\u7684\u601d\u8def\u8fd8\u662f\u4e0d\u884c,\u5148\u4e0d\u8bf4\u5efa\u6811\u7684\u96be\u5ea6,\u4e00\u7ec4\u6240\u6709\u718a\u5b69\u5b50\u7684\u533a\u95f4\u503c\u53f3\u7aef\u70b9\u7b49\u4e8en\uff0c\u5de6\u7aef\u70b9\u4ece1\u5230n,\u5c31\u53ef\u4ee5\u628a\u8fd9\u6837\u7684\u65b9\u6cd5\u5361\u6210$O(nm)$,\u6240\u4ee5\u53ea\u80fd\u53e6\u60f3\u529e\u6cd5\n\n\u521a\u5f00\u59cb\u7684\u601d\u8def\u7f3a\u9677\u5728\u4e8e\u65e0\u6cd5\u7528\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u67d0\u4e9b\u718a\u5b69\u5b50\u7684\u533a\u95f4\u503c,\u65e2\u7136\u4e0d\u80fd\u7528\u4e00\u4e2a\u8282\u70b9\u8868\u793a\uff0c\u90a3\u5c31\u5c1d\u8bd5\u4e00\u4e0b\u7528\u591a\u4e2a\u8282\u70b9\u6765\u8868\u793a\uff0c\u4e0b\u9762\u8fdb\u5165\u6b63\u89e3\u90e8\u5206\u3002\n\n\n------------\n### \u6b63\u89e3\n\n\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811,\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7ef4\u62a4\u7684\u662f\u5f53\u524d\u8282\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u88ab\u54ea\u4e9b\u533a\u95f4\u8986\u76d6\u4ee5\u53ca\u5f53\u524d\u533a\u95f4\u7684\u533a\u95f4\u548c,\u8282\u70b9\u50a8\u5b58\u4e86\u4ee5\u4e0b\u4fe1\u606f\n```cpp\nleft[N*4];//\u5f53\u524d\u8282\u70b9\u8fd8\u6709\u591a\u5c11\u4e2a\u6c14\u7403 \nvector<int>list[N*4];//\u5305\u542b\u5f53\u524d\u533a\u95f4\u7684\u718a\u5b69\u5b50\u7684id\uff0c\u4e0d\u9700\u8981\u4e0b\u4f20\n```\n\u5173\u4e8e\u718a\u5b69\u5b50\uff0c\u5b9a\u4e49\u4ee5\u4e0b\u4fe1\u606f\n```cpp\nneed[N];//id\u4e3ai\u7684\u718a\u5b69\u5b50\u8981\u8ba1\u5165\u7b54\u6848\u8fd8\u9700\u8981\u591a\u5c11\u533a\u95f4\u7684\u533a\u95f4\u548c\u53d8\u4e3a0\n```\n##### \u521d\u59cb\u5316\n\u8bfb\u5165\u5e8f\u5217\u540e\u5148\u6309\u7ebf\u6bb5\u6811\u7684\u65b9\u5f0f\u5efa\u6811,\u6bcf\u8bfb\u5165\u4e00\u4e2a\u718a\u5b69\u5b50\u7684\u533a\u95f4,\u7ed9\u4e88\u5176\u4e00\u4e2a$id$,\u5c06\u8be5\u718a\u5b69\u5b50\u533a\u95f4\u52a0\u5165\u5230\u7ebf\u6bb5\u6811\u4e2d,\u50cf\u666e\u901a\u7684\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u64cd\u4f5c\u6253$lazy$\u6807\u8bb0\u4e00\u6837\u5c06\u5f53\u524d\u718a\u5b69\u5b50\u533a\u95f4\u5206\u6210\u51e0\u4e2a\u5c0f\u6bb5,\u4f7f\u5f97\u6bcf\u4e2a\u5c0f\u6bb5\u90fd\u80fd\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u8868\u793a\u51fa\u6765\uff0c\u627e\u5230\u5b8c\u5168\u7b26\u5408\u7684\u533a\u95f4,\u5411\u8868\u793a\u5f53\u524d\u533a\u95f4\u7684\u8282\u70b9\u7684list\u503c\u52a0\u5165\u718a\u5b69\u5b50\u7684$id$,\u5f53\u524d\u718a\u5b69\u5b50\u7684$need$\u52a0$1$,\u8868\u793a\u718a\u5b69\u5b50\u88ab\u5206\u6210\u7684\u533a\u95f4\u5757\u6570\u589e\u591a\u3002\n##### \u64cd\u4f5c/\u8be2\u95ee\n\n\u5148\u6309\u666e\u901a\u7ebf\u6bb5\u6811\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u4e0a\u4f20\u65f6\u5982\u679c\u53d1\u73b0\u5f53\u524d\u533a\u95f4\u548c\u4e3a0\uff0c\u5c31\u5bf9list\u961f\u5217\u4e2d\u7684id\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c,$need[i]$--,\u8868\u793aid\u4e3ai\u7684\u718a\u5b69\u5b50\u7684\u975e$0$\u533a\u95f4\u4e2a\u6570\u51cf\u5c11\u4e86\u4e00\u4e2a,\u5982\u679c\u5728\u51cf\u5c11\u540e\u975e$0$\u533a\u95f4\u4e2a\u6570\u53d8\u4e3a$0$,\u5c06\u5176\u8ba1\u5165\u7b54\u6848,$ans$++\u3002\n\u5355\u70b9\u4fee\u6539\u540e\u76f4\u63a5\u8f93\u51faans\n##### \u590d\u6742\u5ea6\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u6027\u8d28,\u4efb\u4f55\u718a\u5b69\u5b50\u533a\u95f4\u6700\u591a\u88ab\u5206\u6210$logn$\u4e2a\u5c0f\u533a\u95f4,\u7ebf\u6bb5\u6811\u4e0alist\u50a8\u5b58\u7684\u4fe1\u606f\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7$mlogn$\u4e2a,\u7a7a\u95f4\u4e0d\u4f1a\u7206\u70b8,\u6bcf\u4e2a\u5c0f\u533a\u95f4\u6700\u591a\u88ab\u66f4\u65b0\u4e00\u6b21\uff0c\u66f4\u65b0\u4e00\u4e2a\u718a\u5b69\u5b50\u7684\u533a\u95f4\u6b21\u6570\u6700\u591a\u4e0d\u8d85\u8fc7$logn$\u6b21,\u6240\u4ee5\u603b\u5171\u66f4\u65b0\u6b21\u6570\u4e0d\u8d85\u8fc7$mlogn$\u6b21,\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5728$O(nlogn)$\u5de6\u53f3\n##### \u4ee3\u7801\n```cpp\n#include<vector>\n#include<cstdio>\n#include<iostream>\n\n#define ls rt<<1//\u5de6\u513f\u5b50 \n#define rs rt<<1|1//\u53f3\u513f\u5b50 \n\nusing namespace std;\n\nconst int N=1e5+10;\n\nint Q;\nint n,m;\nint a[N];\nint need[N];id\u4e3ai\u7684\u718a\u5b69\u5b50\u8981\u8ba1\u5165\u7b54\u6848\u8fd8\u9700\u8981\u591a\u5c11\u533a\u95f4\u7684\u533a\u95f4\u548c\u53d8\u4e3a0\n\nstruct Seg\n{\n\tint ans;//\u5f53\u524d\u7b54\u6848,\u5728\u8fd9\u91cc\u5b9a\u4e49\u5728\u7ed3\u6784\u4f53\u4e2d\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf \n\tint left[N*4];//\u5f53\u524d\u533a\u95f4\u533a\u95f4\u548c \n\tvector<int>list[N*4];//\u5305\u542b\u5f53\u524d\u533a\u95f4\u7684\u718a\u5b69\u5b50\u7684id\t\n\tvector<int>::iterator it;//vector\u7684\u8fed\u4ee3\u5668,\u7528\u4e8e\u904d\u5386list \n\t\n\tvoid build(int rt,int ll,int rr)//\u5efa\u6811 \n\t{\n\t\tif(ll==rr)\n\t\t{\n\t\t\tleft[rt]=a[ll];\n\t\t\treturn;\n\t\t}\n\t\tint mid=(ll+rr)>>1;\n\t\tbuild(ls,ll,mid);\n\t\tbuild(rs,mid+1,rr);\n\t\tleft[rt]=left[ls]+left[rs];//\u4e0a\u4f20\u533a\u95f4\u548c \n\t}\n\t\n\tvoid addkid(int rt,int l,int r,int ll,int rr,int id)//\u5411\u7ebf\u6bb5\u6811\u4e0a\u52a0\u5165\u718a\u5b69\u5b50\u7684\u4fe1\u606f \n\t{\n\t\tif(l==ll&&r==rr)//\u718a\u5b69\u5b50\u5b8c\u5168\u5305\u542b\u4e86\u8be5\u533a\u95f4 \n\t\t{\n\t\t\tlist[rt].push_back(id);//\u5c06\u8fd9\u4e2a\u718a\u5b69\u5b50\u7684id\u52a0\u5165\u5230\u5f53\u524d\u8282\u70b9\u7684\u961f\u5217\u4e2d \n\t\t\tneed[id]++;return;//\u5f53\u524d\u718a\u5b69\u5b50\u88ab\u5206\u6210\u7684\u533a\u95f4\u6570\u91cf\u52a0\u4e00\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(rr<=mid) addkid(ls,l,mid,ll,rr,id);\n\t\telse if(ll>mid) addkid(rs,mid+1,r,ll,rr,id);\n\t\telse addkid(ls,l,mid,ll,mid,id),addkid(rs,mid+1,r,mid+1,rr,id);\n\t}\n\t\n\tvoid update(int rt)//\u66f4\u65b0 \n\t{\n\t\tfor(it=list[rt].begin();it!=list[rt].end();it++)//vector\u904d\u5386,\u4e0d\u61c2\u7684\u53ef\u4ee5\u641c\u4e00\u4e0b \n\t\t{\n\t\t\tneed[*it]--;//\u718a\u5b69\u5b50\u5757\u6570\u51cf\u4e00 \n\t\t\tif(!need[*it]) ans++;//\u718a\u5b69\u5b50\u5df2\u7ecf\u6ca1\u6709\u88ab\u5206\u5f00\u7684\u533a\u95f4\u4e86,\n\t\t\t//\u6362\u53e5\u8bdd\u8bf4\u5f53\u524d\u718a\u5b69\u5b50\u6307\u5b9a\u7684\u533a\u95f4\u4e2d\u5df2\u7ecf\u6ca1\u6709\u6c14\u7403\u4e86,\u6240\u4ee5\u8981\u8ba1\u5165\u7b54\u6848 \n\t\t}\n\t}\n\t\n\tvoid change(int rt,int l,int r,int x)//\u4fee\u6539\u64cd\u4f5c \n\t{\n\t\tleft[rt]--;//\u56e0\u4e3a\u662f\u5355\u70b9\u4fee\u6539,\u6240\u4ee5\u6bcf\u6b21\u76f4\u63a5\u51cf\u4e00,\u6ca1\u5fc5\u8981\u4e0a\u4f20\n\t\tif(!left[rt]) update(rt);//\u5f53\u524d\u533a\u95f4\u5df2\u7ecf\u6ca1\u6709\u6c14\u7403\u4e86,\u5bf9\u5305\u542b\u5f53\u524d\u533a\u95f4\u7684\u718a\u5b69\u5b50\u8fdb\u884c\u66f4\u65b0 \n\t\tif(l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) change(ls,l,mid,x);\n\t\telse change(rs,mid+1,r,x);\n\t}\n}Tree;\n\nint lastans;//\u4e0a\u4e00\u6b21\u7684\u7b54\u6848 \n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\tscanf(\"%d\",&a[i]);\n\tTree.build(1,1,n);\n\tfor(int i=1,a,b;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tTree.addkid(1,1,n,a,b,i);\n\t}\n\tscanf(\"%d\",&Q);\n\tfor(int i=1,x;i<=Q;i++)\n\t{\n\t\tscanf(\"%d\",&x);\n\t\tx=(x+lastans-1)%n+1;//\u6309\u9898\u76ee\u8981\u6c42\u89e3\u5bc6x \n\t\tTree.change(1,1,n,x);\n\t\tlastans=Tree.ans;//\u628alastans\u66f4\u65b0 \n\t\tprintf(\"%d\\n\",lastans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1538229177,
        "uid": 129574,
        "name": "TIMEONLY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    },
    {
        "content": "**\u9898\u610f\uff1a**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $N$ \u7684\u5e8f\u5217\u548c $M$ \u4e2a\u533a\u95f4\uff0c\u8fdb\u884c $Q$ \u6b21\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u540e\u8be2\u95ee $M$ \u4e2a\u533a\u95f4\u4e2d\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u5185\u7684\u6570\u5168\u4e3a $0$ \u3002\n\n**\u8f6c\u5316\uff1a**\n\n\u9898\u4e2d\u4fdd\u8bc1\u4e86\u6240\u6709\u6570\u975e\u8d1f\uff0c\u6240\u4ee5\u53ea\u8981\u4e00\u4e2a\u533a\u95f4\u7684\u548c\u4e3a $0$ \uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u6570\u5c31\u5168\u4e3a $0$ \u3002\n\n\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u548c\u4e0e\u5355\u70b9\u4fee\u6539\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62c6\u6210\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e9b\u8282\u70b9\uff0c\u5982\u679c\u62c6\u6210\u4e86 $s$ \u4e2a\u8282\u70b9\uff0c\u6bcf\u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u53d8\u4e3a $0$ \u65f6\uff0c\u5c06 $s$ \u51cf $1$ \uff0c\u5f53 $s$ \u53d8\u4e3a $0$ \u65f6\uff0c\u8f93\u51fa\u7684\u7b54\u6848\u5c31\u5e94\u8be5\u52a0 $1$ \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((m+q)logn+n)$ \u3002\n\n**\u5b9e\u73b0\uff1a**\n\n\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u4f7f\u7528\u4e00\u4e2a $vector$ \u6570\u7ec4\u6765\u4fdd\u5b58\u6709\u54ea\u4e9b\u533a\u95f4\u5728\u62c6\u5f00\u540e\u7684\u8282\u70b9\u4e2d\u5305\u542b\u4e86\u8fd9\u4e2a\u8282\u70b9\uff0c\u5728\u5355\u70b9\u4fee\u6539\u64cd\u4f5c\u65f6\uff0c\u82e5\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u53d8\u4e3a $0$ \u65f6\uff0c\u5c31\u5c06\u4fdd\u5b58\u7684\u6240\u6709\u533a\u95f4\u7684 $s$ (\u8be5\u533a\u95f4\u62c6\u6210\u7684\u8282\u70b9\u6570)\u51cf $1$ \uff0c\u540c\u65f6\u66f4\u65b0\u503c\u4e3a $0$ \u7684 $s$ \u7684\u6570\u91cf(\u5373\u8981\u8f93\u51fa\u7684\u7b54\u6848)\u3002\n\n$code:$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rint register int\n#define N 100005\nstruct node1{\n\tint val;\n\tvector<int>vp;\n}t[N<<2];\nstruct node2{\n\tint l,r,s;\n}k[N];\nint n,m,q,a[N],op,x,ans;\nvoid build(int p,int l,int r){\n\tif(l==r){\n\t\tt[p].val=a[l];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(p<<1,l,mid);\n\tbuild((p<<1)+1,mid+1,r);\n\tt[p].val=t[p<<1].val+t[(p<<1)+1].val;\n}\nvoid update(int p,int x,int v,int l,int r){\n\tif(l==r){\n\t\tt[p].val+=v;\n\t\tif(t[p].val==0){\n\t\t\tfor(int i=0;i<t[p].vp.size();i++){\n\t\t\t\tk[t[p].vp[i]].s--;\n\t\t\t\tif(k[t[p].vp[i]].s==0)ans++;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)update(p<<1,x,v,l,mid);\n\telse update((p<<1)+1,x,v,mid+1,r);\n\tt[p].val=t[p<<1].val+t[(p<<1)+1].val;\n\tif(t[p].val==0){\n\t\tfor(int i=0;i<t[p].vp.size();i++){\n\t\t\tk[t[p].vp[i]].s--;\n\t\t\tif(k[t[p].vp[i]].s==0)ans++;\n\t\t}\n\t}\n}\nvoid split(int p,int x,int y,int l,int r,int i){\n\tif(x<=l&&y>=r){\n\t\tt[p].vp.push_back(i);\n\t\tk[i].s++;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(x<=mid)split(p<<1,x,y,l,mid,i);\n\tif(y>mid)split((p<<1)+1,x,y,mid+1,r,i);\n}\nvoid init(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(rint i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tfor(rint i=1;i<=m;i++)\n\t\tscanf(\"%d%d\",&k[i].l,&k[i].r);\n\tscanf(\"%d\",&q);\n\tbuild(1,1,n);\n\tfor(rint i=1;i<=m;i++)\n\t\tsplit(1,k[i].l,k[i].r,1,n,i);\n}\nint main(){\n\tinit();\n\twhile(q--){\n\t\tscanf(\"%d%\",&x);\n\t\tx=(x+ans-1)%n+1;\n\t\tupdate(1,x,-1,1,n);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n    return 0;\n}\n```\n",
        "postTime": 1579507686,
        "uid": 101800,
        "name": "Forever_Pursuit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    },
    {
        "content": "[\u63a8\u9500\u4e00\u6ce2\u4e2a\u4eba\u535a\u5ba2](https://www.cnblogs.com/Hs-black/p/12231440.html)\n\n\u6765\u4e00\u53d1\u65e0\u8111\u7684\u4e3b\u5e2d\u6811\u89e3\u6cd5\u2467\n\n## \u524d\u7f6e\u829d\u58eb: \u4e3b\u5e2d\u6811\n\n\u4e3b\u5e2d\u6811\u4ea6\u79f0\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811, \u5b83\u53ef\u4ee5\u8f7b\u677e\u7684\u89e3\u51b3\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898, \u5982\u533a\u95f4\u7b2ck\u5927, \u533a\u95f4\u4e0d\u540c\u989c\u8272\u4e2a\u6570\u7b49\u95ee\u9898, \u4e0d\u4f1a\u7684\u540c\u5b66\u53ef\u4ee5\u6a21\u677f\u533a\u81ea\u884c\u5b66\u4e60\u4e00\u4e0b\n\n\u56de\u5230\u672c\u9898:\n\n\u5229\u7528\u4e3b\u5e2d\u6811, \u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u7684\u6c42\u51fa\u533a\u95f4[L, R]\u5b8c\u5168\u8986\u76d6\u7684\"\u718a\u5b69\u5b50\u533a\u95f4\"\u4e2a\u6570, \u5177\u4f53\u6765\u8bf4, \u5bf9\u4e8e\u6bcf\u4e2a\"\u718a\u5b69\u5b50\u533a\u95f4\"[l, r], \u4ee5\u5de6\u7aef\u70b9l \u4e3a\u4e0b\u6807, \u53f3\u7aef\u70b9r\u4e3a\u6743\u503c, \u5efa\u7acb\u4e3b\u5e2d\u6811. \u67e5\u8be2\u533a\u95f4[L, R]\u65f6, \u53ea\u9700\u62ffR\u5904\u7684\u7ebf\u6bb5\u6811\u51cf\u53bbL-1\u5904\u7684\u7ebf\u6bb5\u6811\u6c42\u51fa[L, R]\u7684\u533a\u95f4\u548c\u5373\u53ef\n\n\u5b9a\u4e49\u5408\u5e76\u4e24\u4e2a\u533a\u95f4$[l_1, r_1], [l_2, r_2]$\u65b0\u4ea7\u51fa\u7684\u7b54\u6848\u4e2a\u6570\u4e3a:\n\n\u533a\u95f4$[l_1, r_2]$\u5305\u542b\u7684\u718a\u5b69\u5b50\u533a\u95f4\u51cf\u53bb$[l_1, r_1]$\u7684\u533a\u95f4\u4e2a\u6570\u518d\u51cf\u53bb $[l_2, r_2]$\u5305\u542b\u7684\u533a\u95f4\u4e2a\u6570\n\n\u90a3\u4e48\u672c\u9898\u4e2d\u6bcf\u6b21\u6d88\u6389\u4e00\u4e2a\u6c14\u7403, \u5982\u679c\u6d88\u6389\u6c14\u7403\u4ee5\u540e\u6b64\u5904\u6c14\u7403\u4e2a\u6570\u4e0d\u4e3a\u96f6, \u663e\u7136\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd, \u5426\u5219\u5c06\u8d77\u5230\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u4e2a\u533a\u95f4\u7684\u4f5c\u7528\n\n \u5982\u4e0b\u56fe, \u8f74\u4e0a\u662f\u4f4d\u7f6e, \u4e0b\u9762\u662f\u6c14\u7403\u4e2a\u6570 \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cl0xl5bc.png)\n\n\u5047\u5982\u672c\u6b21\u5c066\u5904\u7684\u6c14\u7403????\u70b9\u7206, \u591a\u51fa\u7684\u7b54\u6848\u53ef\u4ee5\u8fd9\u6837\u7b97, \u5148\u5c06\u533a\u95f4[4, 5] \u548c [6, 6]\u5408\u5e76, \u5728\u5c06[4, 6]\u548c[7, 10]\u5408\u5e76, \u6ce8\u610f\u8981\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n\nusing namespace std;\nconst int N = 500500;\n\ntemplate <typename T>\nvoid read(T &x) {\n    x = 0; bool f = 0;\n    char c = getchar();\n    for (;!isdigit(c);c=getchar()) if (c=='-') f=1;\n    for (;isdigit(c);c=getchar()) x=x*10+(c^48);\n    if (f) x=-x;\n}\n\nint box[N], cnt, n, m;\nvector<int> v[N];\n\nint lastans = 0;\n\nint ls[N*4], rs[N*4], T[N*4], sum[N*4];\nint update(int pre, int l, int r, int x) {\n    int rt = ++cnt;\n    sum[rt] = sum[pre] + 1;\n    ls[rt] = ls[pre], rs[rt] = rs[pre];\n    int mid = (l + r) >> 1;\n    if (l < r) {\n        if (x <= mid) ls[rt] = update(ls[pre], l, mid, x);\n        else rs[rt] = update(rs[pre], mid + 1, r, x);\n    }\n    return rt;\n}\n\nint ql, qr;\nint query(int pre, int now, int l, int r) {\n    if (l >= ql && r <= qr) return sum[now] - sum[pre];\n    int mid = (l + r) >> 1;\n    int res = 0;\n    if (ql <= mid) res += query(ls[pre], ls[now], l, mid);\n    if (qr > mid) res += query(rs[pre], rs[now], mid + 1, r);\n    return res;\n}\n\nvoid merge(int l1, int r1, int l2, int r2) {\n    ql = l1, qr = r1;\n    lastans -= query(T[l1-1], T[r1], 1, n);\n    ql = l2, qr = r2;\n    lastans -= query(T[l2-1], T[r2], 1, n);\n    ql = l1, qr = r2;\n    lastans += query(T[l1-1], T[r2], 1, n);\n}\n\nint f[N], L[N], R[N];\n\nint find(int x) {\n    return f[x] == x ? x : f[x] = find(f[x]);\n}\nint main() {\n    read(n), read(m);\n    for (int i = 1;i <= n; i++) read(box[i]), L[i] = R[i] = f[i] = i;\n    for (int i = 1;i <= m; i++) {\n        int l, r; read(l), read(r);\n        v[l].push_back(r);\n    } cnt = T[0] = 1;\n    for (int i = 1;i <= n; i++) {\n        T[i] = T[i-1];\n        for (int j = 0;j < v[i].size(); j++)\n            T[i] = update(T[i], 1, n, v[i][j]);\n    }\n    int k; read(k);\n    for (int i = 1;i <= k; i++) {\n        int a; read(a); a = (a + lastans - 1) % n + 1;\n        box[a]--;\n        if (!box[a]) {\n        \tql = a, qr = a;\n        \tlastans += query(T[a-1], T[a], 1, n);\n            if (a != 1 && !box[a-1]) {\n                int fx = find(a-1); f[a] = fx; \n                merge(L[fx], R[fx], a, a); R[fx] = a;\n            }\n            if (a != n && !box[a+1]) {\n                int fx = find(a+1), fy = find(a);\n                merge(L[fy], R[fy], L[fx], R[fx]);\n                f[fy] = fx, L[fx] = L[fy];\n            }\n        }\n        printf (\"%d\\n\", lastans);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1579786362,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\uff1a[QwQ](https://www.cnblogs.com/GoldenPotato/p/9787833.html)\n\n\n------------\n## Solution\n\n\n\u8fd9\u9898\u5341\u5206\u6709\u610f\u601d\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u60f3\u60f3\u79bb\u7ebf\u505a\u6cd5\uff0c\u56e0\u4e3a\u5728\u7ebf\u505a\u6cd5\u53ef\u4ee5\u4ece\u79bb\u7ebf\u505a\u6cd5\u63a8\u51fa\u3002~~\uff08\u867d\u7136\u8fd9\u9898\u63a8\u4e0d\u51fa\uff09~~\n\n\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u4e00\u70b9\uff0c\u4e00\u4e2a\u718a\u5b69\u5b50\u5f00\u5fc3\u7684\u65f6\u95f4\u662f\u6ee1\u8db3\u4e8c\u5206\u7684\u8981\u6c42\u7684\uff08\u5982\u679c\u4ed6\u67d0\u4e2a\u65f6\u523b\u5f00\u5fc3\u4e86\uff0c\u90a3\u4e4b\u540e\u7684\u65f6\u523b\u90fd\u4f1a\u4fdd\u6301\u5f00\u5fc3\uff09\u3002\n\n\u5bf9\u4e8e\u5224\u65ad\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u4e3a\u51680\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u4ee5\u4e00\u4e2alog\u7684\u4ee3\u4ef7\u6765\u5224\u65ad\u3002\n\n\u5f97\u5230\u6bcf\u4e2a\u718a\u5b69\u5b50\u5f00\u5fc3\u7684\u65f6\u523b\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u89e3\u51b3\u95ee\u9898\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(m*log^2)$ \n\n.\n \n\n\u5f88\u53ef\u60dc\uff0c\u8fd9\u9898\u5f3a\u5236\u5728\u7ebf\u3002\n\n\u5f88\u53ef\u60dc*2\uff0c~~\u521a\u521a\u7684\u505a\u6cd5\u8ddf\u6b63\u89e3\u4e00\u70b9\u5173\u7cfb\u90fd\u6ca1\u6709~~\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u95ee\u9898\u662f\u600e\u4e48\u5224\u65ad\u4e00\u4e2a\u718a\u5b69\u5b50\u5728\u67d0\u4e2a\u64cd\u4f5c\u540e\u662f\u5426\u5f00\u5fc3\u5462\uff1f\n\n\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5feb\u901f\u5730\u5224\u65ad\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u4e2a\u76f4\u63a5\u7684\u533a\u95f4\uff08\u5373\u8fd9\u4e2a\u533a\u95f4\u53ef\u4ee5\u7528\u4e00\u4e2a\u8282\u70b9\u8868\u793a\uff09\u662f\u5426\u5168\u4e3a0\uff0c\u95ee\u9898\u662f\u6211\u4eec\u4e0d\u80fd\u5f88\u5feb\u5730\u5224\u65ad\u4e00\u4e2a\u975e\u76f4\u63a5\u7684\u533a\u95f4\u662f\u5426\u5168\u4e3a0\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651**\u628a\u718a\u5b69\u5b50\u201c\u62c6\u5f00\u201d**\u3002\n\n\u56e0\u4e3a**\u4e00\u4e2a\u718a\u5b69\u5b50\u7684\u533a\u95f4\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u7684\u51e0\u4e2a\u76f4\u63a5\u533a\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e9b\u76f4\u63a5\u533a\u95f4\u4e0a\u6253\u4e0a\u6807\u8bb0\uff0c\u8bb0\u5f55\u8fd9\u4e2a\u533a\u95f4\u88ab\u54ea\u51e0\u4e2a\u718a\u5b69\u5b50\u76f4\u63a5\u5305\u542b**\u3002\n\n\u6211\u4eec**\u518d\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u718a\u5b69\u5b50\u88ab\u62c6\u6210\u4e86\u51e0\u4e2a\u533a\u95f4**\u3002\n\n**\u4e00\u4e2a\u533a\u95f4\u5168\u90e8\u53d8\u4e3a0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u628a\u5b83\u5bf9\u5e94\u7684\u718a\u5b69\u5b50\u7684\u8bb0\u5f55\u503c-1\uff0c\u5f53\u4e00\u4e2a\u718a\u5b69\u5b50\u8bb0\u5f55\u503c\u4e3a0\u7684\u65f6\u5019\uff0c\u5c31\u4ee3\u8868\u7740\u8fd9\u4e2a\u718a\u5b69\u5b50\u7684\u533a\u95f4\u88ab\u5f7b\u5e95\u5e72\u6389\u4e86**\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(mlogn+qlogn)$\n\n.\n \n\n\u5c31\u9171\uff0c\u8fd9\u9898\u5c31\u88ab\u6211\u4eec\u5207\u6389\u5566\u03c6(>\u03c9<*) \n\n\n------------\n## Code\n```cpp\n//Luogu P4215 \u8e29\u6c14\u7403\n//Oct,14th,2018\n//\u6709\u610f\u601d\u7684\u7ebf\u6bb5\u6811\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000+100;\nint ans,tot[N];\nstruct SegmentTree\n{\n\t#define lson (now<<1)\n\t#define rson (now<<1|1)\n\t#define mid ((now_l+now_r)/2)\n\tvector <int> son[N<<2];\n\tint IsClear[N<<2],cnt[N];\n\tinline void update(int now)\n\t{\n\t\tIsClear[now]=IsClear[lson]&IsClear[rson];\n\t}\n\tvoid Mark(int L,int R,int x,int now,int now_l,int now_r)\n\t{\n\t\tif(now_l>=L and now_r<=R)\n\t\t{\n\t\t\ttot[x]++;\n\t\t\tson[now].push_back(x);\n\t\t\treturn;\n\t\t}\n\t\tif(L<=mid) Mark(L,R,x,lson,now_l,mid);\n\t\tif(R>mid) Mark(L,R,x,rson,mid+1,now_r);\n\t}\n\tvoid Sub(int x,int now,int now_l,int now_r)\n\t{\n\t\tif(now_l==now_r)\n\t\t{\n\t\t\tcnt[x]--;\n\t\t\tif(cnt[x]==0)\n\t\t\t\tIsClear[now]=true;\n\t\t}\n\t\tif(now_l!=now_r)\n\t\t{\n\t\t\tif(x<=mid) Sub(x,lson,now_l,mid);\n\t\t\telse Sub(x,rson,mid+1,now_r);\n\t\t\tupdate(now);\n\t\t}\n\t\tif(IsClear[now]==true)\n\t\t\tfor(int i=0;i<int(son[now].size());i++)\n\t\t\t{\n\t\t\t\ttot[son[now][i]]--;\n\t\t\t\tif(tot[son[now][i]]==0)\n\t\t\t\t\tans++;\n\t\t\t}\n\t}\n\t#undef lson\n\t#undef rson\n\t#undef mid\n}sgt;\nint n,m,q;\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t\tsgt.cnt[i]=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint L=read(),R=read();\n\t\tsgt.Mark(L,R,i,1,1,n);\n\t}\n\t\n\tint q=read(),lans=0;\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint x=read();\n\t\tx=(x+lans-1)%n+1;\n\t\tsgt.Sub(x,1,1,n);\n\t\tlans=ans;\n\t\tprintf(\"%d\\n\",lans);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1539521105,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    },
    {
        "content": "# \u3010\u9898\u89e3\u3011 P4215 \u8e29\u6c14\u7403\n\n\u4e00\u9053\u53e6\u7c7b\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u5728 [\u00b6\u51c9\u7b19](https://www.luogu.com.cn/user/375110)  \u5927\u4f6c\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u624d\u5199\u5bf9\u4e86\u8fd9\u9053\u9898  ~~\uff08\u8fd8\u662f\u6211\u592a\u83dc\u4e86\uff09\uff08\u5199\u4e86\u534a\u5929\u7684push_down\u5199\u4e0d\u51fa\u6765\uff0c\u7ed3\u679c\u4e0d\u7528push_down~~\n\n### \u9898\u610f\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u7ed9\u5b9a $m$ \u4e2a\u5b50\u533a\u95f4\uff0c\u5e76\u6709 $q$ \u6b21\u5355\u70b9\u4fee\u6539\uff0c\u6bcf\u6b21\u4fee\u6539\u5c06\u5e8f\u5217\u4e2d\u7684\u4e00\u9879\u51cf $1$ \u3002\u5bf9\u6bcf\u6b21\u4fee\u6539\uff0c\u8f93\u51fa\u5728\u7ed9\u5b9a\u7684 $m$ \u4e2a\u5b50\u533a\u95f4\uff08\u718a\u5b69\u5b50\u6307\u5b9a\u7684\u533a\u95f4\uff09\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u7684\u533a\u95f4\u548c\u4e3a $0$ \uff0c\u5f3a\u5236\u5728\u7ebf\u3002\n\n### \u89e3\u6cd5\n\n~~\uff08\u5f3a\u5236\u5728\u7ebf\u76f4\u63a5\u5e72\u6389\u4e00\u5207\u79bb\u7ebf\u505a\u6cd5~~\n\n\u5982\u679c\u6309\u7167\u5e38\u89c4\u7684\u601d\u8def\uff0c\u5355\u70b9\u4fee\u6539\u540e\u67e5\u8be2\u533a\u95f4\u548c\uff0c\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u5b50\u533a\u95f4\uff0c\u590d\u6742\u5ea6 $O(mq \\log n)$ \uff0c \u76f4\u63a5\u7206\u70b8\u3002\n\n\u90a3\u4e48\u600e\u4e48\u7ef4\u62a4\u6bcf\u4e2a\u5b50\u533a\u95f4\u5462\uff1f\n\n\u5982\u679c\u8003\u8651\u7ef4\u62a4\u5b50\u533a\u95f4\uff0c\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n\n1. \u7edf\u8ba1\u7b54\u6848\u65f6\u600e\u6837\u907f\u514d\u904d\u5386\u6240\u6709\u5b50\u533a\u95f4\n2. \u5982\u679c\u4e00\u4e2a\u533a\u95f4\u88ab\u591a\u4e2a\u5b50\u533a\u95f4\u8986\u76d6\uff0c\u600e\u6837\u5904\u7406\n\n\u5bf9\u4e8e $1$ \uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u6bcf\u4e00\u4e2a\u5b50\u533a\u95f4\u62c6\u6210\u82e5\u5e72\u7ebf\u6bb5\u6811\n\u4e0a\u7684\u533a\u95f4\uff0c\u5177\u4f53\u5c31\u662f\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a \n```vector``` \u6570\u7ec4\u8bb0\u5f55\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u88ab\u54ea\u4e9b\u5b50\u533a\u95f4\u8986\u76d6\uff0c\u5e76\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4e0a\u6253\u6807\u8bb0\uff1b\u800c\u5bf9\u4e8e $2$ \uff0c\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6570\u7ec4 $cnt$ \u8868\u793a\u6bcf\u4e00\u4e2a\u5b50\u533a\u95f4\u88ab\u62c6\u6210\u4e86\u51e0\u4e2a\u533a\u95f4\uff0c\u5f53\u4e00\u4e2a\u5b50\u533a\u95f4\u7684 $cnt$ \u4e3a $0$ \u65f6\uff0c\u8bf4\u660e\u8fd9\u4e2a\u5b50\u533a\u95f4\u5206\u6563\u7684\u51e0\u4e2a\u533a\u95f4\u90fd\u5df2\u7ecf\u4fee\u6539\uff0c\u8fd9\u65f6\u7b54\u6848\u5c31\u53ef\u4ee5\u66f4\u65b0\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O((m +q) \\log n )$ \u3002\n\n### Code\uff1a\n\n```cpp\n#include <bits/stdc++.h> \nusing namespace std;\n#define int long long\n#define ri register int\nconst int N = 1e5 + 10;\ninline int read() {\n\tri x = 0, f = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)) {\n\t\tif (ch == '-') f = -1;\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch)) {\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn f * x;\n}\nstruct SegmentTree {\n\tint v;\n\tvector<int> ch; // \u6807\u8bb0\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u90fd\u88abid\u4e3a\u51e0\u7684\u718a\u5b69\u5b50\uff08\u5b50\u533a\u95f4\uff09\u6807\u8bb0\n} t[N << 2];\nint a[N], ans, cnt[N];// cnt \u8868\u793a\u6bcf\u4e2a\u718a\u5b69\u5b50\u5206\u6563\u5230\u7ebf\u6bb5\u6811\u4e0a\u7684\u5b50\u533a\u95f4\u4e2a\u6570\nint n, m, q;\n#define ls u << 1\n#define rs u << 1 | 1\ninline void push_up(int u) { t[u].v = t[ls].v + t[rs].v; }\nvoid build(int u, int l, int r) {\n\tif (l == r) return t[u].v = a[l], void();\n\tint mid = (l + r) >> 1;\n\tbuild(ls, l, mid);\n\tbuild(rs, mid + 1, r);\n\tpush_up(u);\n}\nvoid add_child(int u, int l, int r, int ql, int qr, int id) { //\u7ebf\u6bb5\u6811\u4e0a\u6807\u8bb0\u718a\u5b69\u5b50\uff08\u5b50\u533a\u95f4\uff09\n\tif (ql <= l && r <= qr) {\n\t\tcnt[id]++;\n\t\tt[u].ch.push_back(id);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (ql <= mid) add_child(ls, l, mid, ql, qr, id);\n\tif (qr > mid) add_child(rs, mid + 1, r, ql, qr, id);\n}\ninline void update(int u) {\n\tfor (ri i = 0; i < t[u].ch.size(); i++) { // \u66f4\u65b0\u6811\u4e0a\u8282\u70b9\u7684\u6bcf\u4e2a\u5b50\u533a\u95f4\n\t\tcnt[t[u].ch[i]]--;\n\t\tif (!cnt[t[u].ch[i]]) ans++; // \u53ea\u8981\u5b50\u533a\u95f4\u5206\u6563\u7684\u6bcf\u4e00\u4e2a\u533a\u95f4\u90fd\u88ab\u66f4\u65b0\uff0c \u5c31\u8bf4\u660e\u8fd9\u4e2a\u533a\u95f4\u548c\u4e3a0\u4e86\uff0c\u66f4\u65b0\u7b54\u6848\n\t}\n}\nvoid change(int u, int l, int r, int pos, int k) {\n\tt[u].v += k;\n\tif (!t[u].v) update(u);\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) change(ls, l, mid, pos, k);\n\telse change(rs, mid + 1, r, pos, k);\n} \nsigned main() {\n\tn = read(), m = read();\n\tfor (ri i = 1; i <= n; i++) a[i] = read();\n\tbuild(1, 1, n);\n\tfor (ri i = 1; i <= m; i++) {\n\t\tint L = read(), R = read();\n\t\tadd_child(1, 1, n, L, R, i);\n\t}\n\tq = read();\n\twhile (q--) {\n\t\tint x = read();\n\t\tchange(1, 1, n, (x + ans - 1) % n + 1, -1);\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1623816834,
        "uid": 375030,
        "name": "CG__HeavenHealer",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011 P4215 \u8e29\u6c14\u7403"
    },
    {
        "content": "### \u9898\u76ee\u610f\u4e49\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3an\u7684\u6570\u5217,\u5e76\u6307\u5b9aq\u4e2a\u533a\u95f4.\u6bcf\u6b21\u8ba9\u6570\u5217\u4e2d\u4efb\u610f\u4e00\u4e2a\u6570-1,\u8f93\u51fa\u548c\u4e3a0\u7684\u533a\u95f4\u6570\u3002\n\n\u65e2\u7136\u662f\u6c42\u533a\u95f4\u548c,\u90a3\u81ea\u7136\u6709\u4e24\u79cd\u505a\u6cd5:\u7ebf\u6bb5\u6811\u548c\u524d\u7f00\u548c\n\n### \u9898\u76ee\u63a8\u5bfc\n\u9996\u5148,\u5199\u4e00\u4e2a\u7ebf\u6bb5\u6811\n```cpp\nclass SEGMENT_TREE{\n    private:\n        struct point{\n            long long h;\n            point *l,*r;\n            int from,to;\n        }*head;\n        inline void NEW(point *p){\n            if(p->from!=p->to){\n                p->l=new point;\n                p->r=new point;\n                p->l->from=p->from;\n                p->l->to=(p->from+p->to)/2;\n                p->r->from=p->l->to+1;\n                p->r->to=p->to;\n                NEW(p->l);\n                NEW(p->r);\n                p->h=p->l->h+p->r->h;\n            }\n            else p->h=read();//ps\uff1a\u5199\u4e86\u5feb\u8bfb\n        }\n        inline void DELETE(point *p){\n            if(p->from!=p->to){\n                DELETE(p->l);\n                DELETE(p->r);\n            }\n            delete p;\n        }\n        inline void PLUS(point *p,const int&num){\n            p->h--;\n            if(p->from!=p->to){\n                if(num<=p->l->to)PLUS(p->l,num);\n                else PLUS(p->r,num);\n            }\n        }\n        inline bool SUM(point *p,const int&l,const int&r){\n            if(p->from==p->to) return p->h==0;\n            if(r<=p->l->to) return SUM(p->l,l,r);\n            if(l>=p->r->from) return SUM(p->r,l,r);\n            return SUM(p->l,l,p->l->to)&&SUM(p->r,p->r->from,r);\n        }\n    public:\n        SEGMENT_TREE(const int &length){\n            head=new point;\n            head->from=1;\n            head->to=length;\n            NEW(head);//\u5efa\u7acb\u5e76\u8bbe\u7f6e\u521d\u59cb\u503c\n        }\n        ~SEGMENT_TREE(){DELETE(head);}//\u5185\u5b58\u91ca\u653e\n        inline void in(const int&num){PLUS(head,num);}//\u4efb\u610f\u6570-1\n        inline bool out(const int&l,const int&r){//\u8f93\u51fa\u533a\u95f4\u548c\u662f\u5426\u4e3a0\n        \treturn SUM(head,l,r);\n        }\n};\n```\n\u7136\u540e\u50cf\u4e00\u822c\u65b9\u5f0f\u4e00\u6837\u81ea\u51cf\u7136\u540e\u8ba1\u7b97\n```cpp\nint l[100000],r[100000],ans=0;\nint main(){\n    const int n=read();\n    const int m=read();\n    SEGMENT_TREE tree(n);\n    for(register int i=0;i<m;i++){\n        l[i]=read();\n        r[i]=read();\n    }\n    const int q=read();\n    for(register int i=0,x;i<q;i++){\n        x=(read()+ans-1)%n+1;\n        tree.in(x);\n        for(register int j=0;j<m;j++){\n            if(l[j]<=x&&x<=r[j]) ans+=tree.out(l[j],r[j]);\n        }\n        if(ans==0) putchar('0');\n        else write(ans);//ps\uff1a\u5199\u4e86\u5feb\u5199\n        putchar('\\n');\n    }\n    return 0;\n} \n```\n\u63d0\u4ea4\u4e86\u4e4b\u540e,\u53ea\u670940,10\u4e2a\u6d4b\u8bd5\u70b96\u4e2aTLE\n\n\n------------\n\n\u4e4b\u524d\u6bcf\u4e00\u6b21\u90fd\u8981\u770bm\u4e2a\u533a\u95f4,\u4e8e\u662f\n- \u5efa\u6811\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^2)\n- \u4fee\u6539\u4e00\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(mlogn)\n- \u6240\u6709\u4fee\u6539\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(qmlogn)\n\n\u540e\u6765,\u60f3\u5230\u4e86\u63d0\u524d\u6807\u8bb0\u5404\u4e2a\u533a\u95f4\u5728\u7ebf\u6bb5\u6811\u4e0a\u5305\u542b\u7684\u70b9(\u6b64\u5904\u7528\u94fe\u8868),\u66f4\u65b0\u70b9\u65f6\u4f9d\u6807\u8bb0\u76f4\u63a5\u4fee\u6539\u533a\u95f4\u548c\u5e76\u5224\u65ad\n\n\u7531\u4e8e\u6bcf\u6b21\u53ea\u4fee\u8be5\u4e00\u4e2a\u6570,\u4e0d\u53ef\u80fd\u51fa\u73b0\u5c0f\u533a\u95f4\u672a\u88ab\u4fee\u6539\u7684\u60c5\u51b5\n\n\u4fee\u6539\u4e00\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3aO(logn),\u53ea\u5728\u521d\u59cb\u5316\u65f6\u628a\u5b58\u5165\u533a\u95f4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7531O(m)\u53d8\u4e3aO(mlogn)\n```cpp\nclass SEGMENT_TREE{\n    private:\n    \tint *h;\n    \tstruct list{\n    \t\tlist *next;\n    \t\tint id;\n        };\n        struct point{\n            long long h;\n            point *l,*r;\n            int from,to;\n            list *head,*tail;\n        }*head;\n        /*****************\u521d\u59cb\u5316******************/\n        inline void NEW(point *p){\n        \tp->head=new list;\n        \tp->tail=p->head;\n            if(p->from!=p->to){\n                p->l=new point;\n                p->r=new point;\n                p->l->from=p->from;\n                p->l->to=(p->from+p->to)/2;\n                p->r->from=p->l->to+1;\n                p->r->to=p->to;\n                NEW(p->l);\n                NEW(p->r);\n                p->h=p->l->h+p->r->h;\n            }\n            else p->h=read();\n        }\n        inline void LINE(point *p,const int&l,const int&r,const int&id){//\u94fe\u8868\u6807\u8bb0\u533a\u95f4\u70b9(\u9012\u5f52)\n        \tif(p->from==l&&p->to==r){\n        \t\th[id]+=p->h;\n        \t\tp->tail->id=id;\n        \t\tp->tail->next=new list;\n        \t\tp->tail=p->tail->next;\n            }\n            else if(r<=p->l->to) LINE(p->l,l,r,id);\n            else if(l>=p->r->from) LINE(p->r,l,r,id);\n            else{\n                LINE(p->l,l,p->l->to,id);\n                LINE(p->r,p->r->from,r,id);\n            }\n        }\n        inline void DEL(list *head,list *tail){\n            if(head!=tail) DEL(head->next,tail);\n            delete head;\n        }\n        inline void DELETE(point *p){\n        \tDEL(p->head,p->tail);\n            if(p->from!=p->to){\n                DELETE(p->l);\n                DELETE(p->r);\n            }\n            delete p;\n        }\n        /*+++++++++++++++++++++++++++++++++++++*/ \n        inline void PLUS(point *p,const int&num){\n        \tp->h--; \n            for(list *l=p->head;l!=p->tail;l=l->next){//\u66f4\u65b0\u533a\u95f4\u548c\n            \th[l->id]--;\n            \tif(h[l->id]==0) ans++;\n            }\n            if(p->from!=p->to){\n                if(num<=p->l->to) PLUS(p->l,num);\n                else PLUS(p->r,num);\n            }\n        }\n    public:\n        SEGMENT_TREE(const int &length,const int&size){\n            head=new point;\n            head->from=1;\n            head->to=length;\n            NEW(head);\n            h=new int[size];\n            memset(h,0,sizeof(h));\n            for(register int i=0,l,r;i<size;i++){//\u5f55\u5165\u5404\u4e2a\u533a\u95f4\u5e76\u6807\u8bb0\n            \tl=read();\n            \tr=read();\n            \tLINE(head,l,r,i);\n            }\n        }\n        ~SEGMENT_TREE(){DELETE(head);}\n        inline void in(const int&num){PLUS(head,num);}\n};\nint main(){\n    const int n=read();\n    const int m=read();\n    SEGMENT_TREE tree(n,m);\n    const int q=read();\n    for(register int i=0,x;i<q;i++){\n        x=(read()+ans-1)%n+1;\n        tree.in(x);\n        if(ans==0) putchar('0');\n        else write(ans);\n        putchar('\\n');\n    }\n    return 0;\n} \n```\n\u63d0\u4ea4\u4e4b\u540e,40\u5206\u53d8\u4e3a70\u5206\n\n\n------------\n\n\u8fd9\u65f6,\u533a\u95f4\u548c\u7684\u66f4\u65b0\u4f9d\u65e7\u590d\u6742\n- \u4e0d\u8bba\u662f40\u5206\u8fd8\u662f70\u5206\u7684\u4ee3\u7801,\u6bcf\u4e00\u6b21\u4fee\u6539\u7ebf\u6bb5\u6811\u90fd\u8981\u4fee\u6539\u6240\u6709\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u548c\n- \u6beb\u65e0\u7591\u95ee,\u6307\u9488\u94fe\u8868\u901f\u5ea6\u4e00\u822c\n- \u6211\u4eec\u53ef\u4ee5\u6539\u4e3a\u5b58\u533a\u95f4\u4e2d\u975e0\u7684\u6807\u8bb0\u70b9\u6570,\u6807\u8bb0\u70b9\u4e3a0\u65f6\u518d\u53bb\u4fee\u6539\n\nAC\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read(){\n    register char c=getchar();\n    register short w=1;\n    while('0'>c||c>'9'){\n        if(c=='-') w=-1; \n        c=getchar();\n    }\n    register int a=0;\n    while('0'<=c&&c<='9'){\n        a=a*10+c-'0';\n        c=getchar();\n    }\n    return a*w;\n}\ninline void write(const int &num){\n    if(num==0) return;\n    write(num/10);\n    putchar(num%10+'0');\n}\nint ans=0;\nclass SEGMENT_TREE{\n    private:\n    \tint *h;\n    \tstruct list{\n    \t\tlist *next;\n    \t\tint id;\n        };\n        struct point{\n            long long h;\n            point *l,*r;\n            int from,to;\n            list *head,*tail;\n        }*head;\n        /*****************\u521d\u59cb\u5316******************/\n        inline void NEW(point *p){\n        \tp->head=new list;\n        \tp->tail=p->head;\n            if(p->from!=p->to){\n                p->l=new point;\n                p->r=new point;\n                p->l->from=p->from;\n                p->l->to=(p->from+p->to)/2;\n                p->r->from=p->l->to+1;\n                p->r->to=p->to;\n                NEW(p->l);\n                NEW(p->r);\n                p->h=p->l->h+p->r->h;\n            }\n            else p->h=read();\n        }\n       \tinline int LINE(point *p,const int&l,const int&r,const int&id){//\u5b58\u533a\u95f4\u4e2d\u975e0\u7684\u6807\u8bb0\u70b9\u6570(\u9012\u5f52)\n        \tif(p->from==l&&p->to==r){\n        \t\tp->tail->id=id;\n        \t\tp->tail->next=new list;\n        \t\tp->tail=p->tail->next;\n        \t\treturn 1;\n            }\n            if(r<=p->l->to) return LINE(p->l,l,r,id);\n            if(l>=p->r->from) return LINE(p->r,l,r,id);\n            return LINE(p->l,l,p->l->to,id)+LINE(p->r,p->r->from,r,id);\n        }\n        inline void DEL(list *head,list *tail){\n            if(head!=tail) DEL(head->next,tail);\n            delete head;\n        }\n        inline void DELETE(point *p){\n        \tDEL(p->head,p->tail);\n            if(p->from!=p->to){\n                DELETE(p->l);\n                DELETE(p->r);\n            }\n            delete p;\n        }\n    public:\n        SEGMENT_TREE(const int &length,const int&size){\n            head=new point;\n            head->from=1;\n            head->to=length;\n            NEW(head);\n            h=new int[size];\n            memset(h,0,sizeof(h));\n            for(register int i=0,l,r;i<size;i++){\n            \tl=read();\n            \tr=read();\n            \th[i]=LINE(head,l,r,i);\n            }\n        }\n        ~SEGMENT_TREE(){DELETE(head);}\n        inline void in(const int&num){\n        \tfor(point *p=head;;){\n        \t\tp->h--;\n        \t\tif(p->h==0){//\u66f4\u65b0\u6807\u8bb0\u70b9\u6570\n        \t\t\tfor(list *l=p->head;l!=p->tail;l=l->next){\n            \t\t\th[l->id]--;\n            \t\t\tif(h[l->id]==0) ans++;\n                    }\n                }\n            \tif(p->from==p->to) break;\n                if(num<=p->l->to) p=p->l;\n                else p=p->r;\n            }\n        }\n        \n};\nint main(){\n    //freopen(\"in.txt\",\"r\",stdin);\n    //freopen(\"out.txt\",\"w\",stdout);\n    const int n=read();\n    const int m=read();\n    SEGMENT_TREE tree(n,m);\n    const int q=read();\n    for(register int i=0,x;i<q;i++){\n        x=(read()+ans-1)%n+1;\n        tree.in(x);\n        if(ans==0) putchar('0');\n        else write(ans);\n        putchar('\\n');\n    }\n    return 0;\n} \n```",
        "postTime": 1553683624,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u80fd\u5411\u53f3\u8dd1\u7684\u6700\u8fdc\u8ddd\u79bb\uff0c\u8fd9\u4e2a\u5f88\u663e\u7136\u80fd\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u7136\u540e\u8003\u8651\u6bcf\u4e2a\u70b9\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u6839\u636e\u5de6\u53f3\u4e24\u70b9\u7684\u5173\u7cfb\u5408\u5e76\u7ebf\u6bb5\u6811\u3002\n\n\u90a3\u4e48\u5728\u8bb0\u5f55\u7684\u6700\u8fdc\u8ddd\u79bb\u5de6\u8fb9\u7684\u70b9\u4e00\u5b9a\u90fd\u662f\u5df2\u7ecf\u53ef\u4ee5\u52a0\u5165\u7b54\u6848\u7684\u70b9\uff0c\u5220\u53bb\u5373\u53ef\u3002\n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\n#define rep(i,x,y) for(register int i = x;i <= y; ++ i)\n#define repd(i,x,y) for(register int i = x;i >= y; -- i)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntemplate<typename T>inline bool chkmin(T&x,T y) { return x > y ? x = y,1 : 0; }\ntemplate<typename T>inline bool chkmax(T&x,T y) { return x < y ? x = y,1 : 0; }\ninline char gc()\n{\n\tstatic char buf[1 << 16],*S,*T;\n\tif(S == T) { T = (S = buf) + fread(buf,1,1<<16,stdin); if(S == T) return EOF; }\n\treturn *S ++ ;\n}\ntemplate<typename T>inline void read(T&x)\n{\n\tchar c;int sign = 1;x = 0;\n\tdo { c = gc(); if(c == '-') sign = -1; }while(!isdigit(c));\n\tdo { x = x * 10 + c - '0'; c = gc();\t }while(isdigit(c));\n\tx *= sign;\n}\n\nconst int N = 1e5 + 50,M = 4e6 + 60;\nint n,m,b[N],ans,cnt;\nint rt[N],t[N],ls[M],rs[M],sz[M],w[M];\n\nvoid insert(int&x,int l,int r,int pos)\n{\n\tif(!x) x = ++ cnt; ++ sz[x] ;\n\tif(l == r) return ;\n\tint mid = l + r >> 1;\n\tif(pos <= mid) insert(ls[x],l,mid,pos);\n\telse insert(rs[x],mid+1,r,pos);\n}\n\nvoid merge(int&x,int&y)\n{\n\tif(!x && !y) return;\n\tif(!x) { x = y;return; }\n\tif(!y) { y = x;return; }\n\tsz[x] += sz[y];\n\tmerge(ls[x],ls[y]);\n\tmerge(rs[x],rs[y]);\n\ty = x; \n}\n\nint get_fa(int x) {\n\treturn rt[x] == x ? x : rt[x] = get_fa(rt[x]);\n\t}\n\ninline void Merge(int x,int y)\n{\n\ty = get_fa(y); x = get_fa(x);\n\tchkmax(t[x],t[y]);\n\tmerge(rt[x],rt[y]);\n}\n\nvoid update(int&x,int l,int r,int k)\n{\n\tif(l > k || !sz[x] || !x) return;\n\tif(r <= k) \n\t{\n\t\tans += sz[x];\n\t\tsz[x] = 0;\n\t\tif(x > n) x = 0;\n\t\treturn ;\n\t}\n\tint mid = l + r >> 1;\n\tupdate(ls[x],l,mid,k);\n\tupdate(rs[x],mid+1,r,k);\n\tsz[x] = sz[ls[x]] + sz[rs[x]];\n\tif(sz[x] == 0 && x > n) x = 0;\n}\n\nint main()\n{\n//\tfreopen(\"4631.in\",\"r\",stdin);\n//\tfreopen(\"4631.out\",\"w\",stdout);\n\t\n//\tfreopen(\"1.in\",\"r\",stdin);\n//\tfreopen(\"22.out\",\"w\",stdout);\n\n\tread(n); read(m);\n\trep(i,1,n) read(b[i]);\n\trep(i,1,n) rt[i] = ++ cnt;\n\trep(i,1,m)\n\t{\n\t\tint l,r;\n\t\tread(l); read(r);\n\t\tinsert(rt[l],1,n,r);\n\t}\n\t\n\tint q;\n\trep(i,1,n) t[i] = i;\n\tread(q);b[0] = 1;b[n+1] = 1;\n\trep(i,1,q)\n\t{\n\t\tint x;\n\t\tread(x);\n\t\tx = (x + ans - 1) % n + 1;\n\t\t-- b[x];\n\t\tif(b[x]) \n\t\t{\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t\tcontinue;\n\t\t}\n\t\tif(!b[x-1]) Merge(x,x-1);\n\t\tif(!b[x+1]) Merge(x,x+1);\n\t\tupdate(rt[x],1,n,t[x]);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n[\u535a\u5ba2](http://tgotp.science/2046-2/)",
        "postTime": 1538141566,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    },
    {
        "content": "# P4215 \u8e29\u6c14\u7403\n\n## [LINK](https://www.luogu.com.cn/problem/P4215)\n\n## \u6765\u4e00\u53d1\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u9898\u89e3\n\n## \u9898\u76ee\u63cf\u8ff0\uff1a\n\n```\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\u548c\u4e00\u4e9b\u533a\u95f4\uff0c\u6bcf\u6b21\u5355\u70b9\u51cf\u53bb1\uff0c\u95ee\u6bcf\u4e00\u6b65\u51cf\u53bb\u540e\u6709\u591a\u5c11\u533a\u95f4\u7684\u548c\u4e3a0\n```\n\n## \u5206\u6790\uff1a\n\n\u770b\u5230\u591a\u4e2a\u533a\u95f4\u8fdb\u884c\u67e5\u8be2\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u533a\u95f4\u8fdb\u884c\u7ef4\u62a4\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684\u4e24\u4e2a\u7aef\u70b9 $l,r$ \u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u533a\u95f4\uff0c\u628a\u5de6\u7aef\u70b9\u5f53\u505a\u4e0b\u6807\uff0c\u5728\u53f3\u7aef\u70b9\u7684\u7ebf\u6bb5\u6811\u7684\u5bf9\u5e94\u7684\u4f4d\u7f6e\u52a0\u4e00\u3002\u8fd9\u6837\u6211\u4eec\u7684\u533a\u95f4\u5c31\u7ef4\u62a4\u597d\u4e86\u3002\n\n\u8003\u8651\u6211\u4eec\u600e\u4e48\u8fdb\u884c\u7edf\u8ba1\u7b54\u6848\uff0c\u4e5f\u5c31\u662f\u4fee\u6539\uff0c\u5f53\u6211\u4eec\u4fee\u6539\u65f6\uff0c\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u51cf\u4e3a $0$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u624d\u4f1a\u8003\u8651\u5bf9\u4e8e\u7b54\u6848\u7684\u5f71\u54cd\uff0c\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u5bf9\u5e94\u7684\u4e00\u4e2a\u8282\u70b9 $\\text{X}$ \uff0c\u5b83\u7684\u8282\u70b9\u53d8\u4e3a\u4e86\u7a7a\uff0c\u90a3\u8bf4\u660e\u6240\u6709\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u9700\u8981\u8fdb\u884c\u5408\u5e76\u4e86\u3002\n\n\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u533a\u95f4\u4e3a $[l, r]$ \uff0c\u5f53\u6211\u4eec\u7684 $r$ \u8282\u70b9\u5df2\u7ecf\u4e3a $0$ \uff0c\u90a3\u4e48\u6211\u4eec\u7684\u533a\u95f4\u662f\u4e0d\u662f\u5c31\u53d8\u6210\u4e86 $[l, r - 1]$ \uff0c\u8003\u8651\u5bf9\u4e8e\u8fd9\u4e2a\u70b9\u524d\u9762\u6ca1\u6709\u5408\u5e76\u7684\u70b9\u5bf9\u5e94\u7684\u4e24\u4e2a\u7ebf\u6bb5\u6811\u8fdb\u884c\u5408\u5e76\uff0c\u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0c**\u9700\u8981\u628a\u6240\u6709\u5927\u4e8e\u6211\u9700\u8981\u5408\u5e76\u7684\u76ee\u6807\u8282\u70b9\u7684\u503c\u7684\u70b9\u5168\u90e8\u5220\u53bb**\uff0c\u5e76\u7edf\u8ba1\u5230\u7b54\u6848\u4e2d\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5b58\u5728\u5de6\u7aef\u70b9\u6bd4\u53f3\u7aef\u70b9\u5927\u7684\u533a\u95f4\uff0c**\u7136\u800c\u5bf9\u4e8e\u627e\u5230\u524d\u9762\u6ca1\u6709\u5408\u5e76\u7684\u70b9\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef**\u3002\n\n```c++\nstruct tree\n{\n    int ls, rs;\n    int sum;\n}T[N];\n\nil void push_up(int p) {T[p].sum = T[T[p].ls].sum + T[T[p].rs].sum;}\nil int get(int x) {return fa[x] == x ? x : fa[x] =  get(fa[x]);}\nil void add(int p, int l, int r, int val)\n{\n    if(l == r)\n    {\n        T[p].sum++;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    if(val <= mid) \n    {\n        if(!T[p].ls) T[p].ls = ++cnt;\n        add(T[p].ls, l, mid, val);\n    }\n    if(val > mid)\n    {\n        if(!T[p].rs) T[p].rs = ++cnt;\n        add(T[p].rs, mid + 1, r, val);\n    }\n    push_up(p);\n    return ;\n}\nil void del(int p, int l, int r, int val)\n{\n    if(l == r)\n    {\n        las += T[p].sum;//\u7edf\u8ba1\u7b54\u6848\n        T[p].sum = 0;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    if(val <= mid)\n    {\n        if(T[T[p].ls].sum) del(T[p].ls, l, mid, val);\n    }\n    if(T[T[p].rs].sum) del(T[p].rs, mid + 1, r, val);\n    push_up(p);\n    return ;\n}\nil void merge(int x, int y, int l, int r)\n{\n    if(l == r)\n    {\n        T[x].sum += T[y].sum;\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    if(T[x].ls) {if(T[T[y].ls].sum) merge(T[x].ls, T[y].ls, l, mid);}\n    else T[x].ls = T[y].ls, T[T[x].ls].sum = T[T[y].ls].sum;\n    if(T[x].rs) {if(T[T[y].rs].sum) merge(T[x].rs, T[y].rs, mid + 1, r);}\n    else T[x].rs = T[y].rs, T[T[x].rs].sum = T[T[y].rs].sum;\n    push_up(x);\n    return ;\n}//\u7ebf\u6bb5\u6811\u5408\u5e76\n\nsigned main()\n{\n    n = re(), m = re();\n    for(int i = 1; i <= n; ++i) c[i] = re();\n    for_1(i, n) fa[i] = i;\n    for_1(i, n) rt[i] = ++cnt;\n    for_1(i, m)\n    {\n        int x = re(), y = re();\n        add(rt[y], 1, n, x);\n    }\n    q = re();\n    for_1(i, q)\n    {\n        int x = re();\n        x = (x + las - 1) % n + 1;\n        c[x]--;\n        if(c[x] == 0)\n        {\n            fa[x] = x - 1;\n            int k = get(x);//\u5e76\u67e5\u96c6\u627e\u5230\u5de6\u8fb9\u53ef\u4ee5\u8fdb\u884c\u5408\u5e76\u7684\u70b9\n            del(rt[x], 1, n, k + 1);//\u5220\u53bb\u5927\u4e8e\u7684\u70b9\uff0c\u5728del\u4e2d\u7edf\u8ba1\u4e86\u7b54\u6848\n            merge(rt[k], rt[x], 1, n);\n        }\n        cout<<las<<endl;\n    }\n}\n```\n\u5b8c\u7ed3\u6492\u82b1\u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f",
        "postTime": 1631631294,
        "uid": 333580,
        "name": "Zwaire",
        "ccfLevel": 6,
        "title": "P4215"
    },
    {
        "content": "~~\u601d\u8def\u987a\u7545\uff0c\u5f88\u8212\u670d~~\n\n### 1.\u66b4\u529b\uff1a\n\n\u9884\u5904\u7406\u718a\u5b69\u5b50\u6240\u7ba1\u533a\u95f4\u7684\u548c\uff0c\u6bcf\u6b21\u4fee\u6539\u540e\u904d\u5386\u4e00\u904d\u6240\u6709\u718a\u5b69\u5b50\uff0c**\u4fee\u6539\u533a\u95f4\u548c**\u5e76**\u770b\u770b\u533a\u95f4\u548c\u662f\u5426\u4e3a0**\uff0c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $ O(N^2) $\n\n\n### 2.\u6b63\u89e3\uff1a\n\n\u6bcf\u6b21\u904d\u5386\u4e00\u904d\u718a\u5b69\u5b50\u592a\u8d39\u65f6\u95f4\uff0c\u8003\u8651\u5bf9\u6240\u7ba1\u533a\u95f4\u5206\u7ec4\uff0c\u6bcf\u6b21\u4fee\u6539\u5148\u770b\u6240\u5728\u7684\u7ec4\uff0c\u7136\u540e\u518d\u66f4\u65b0\u718a\u5b69\u5b50\u3002\n\n\u6240\u4ee5\u6211\u4eec\u796d\u51fa\u4e86\u4e3b\u89d2\uff1a**\u7ebf\u6bb5\u6811**\u3002\n\n\u5148\u628a\u76d2\u5b50\u4eec\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u718a\u5b69\u5b50\u6240\u7ba1\u533a\u95f4\u53ef\u4ee5\u7528$logN$\u7ea7\u522b\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6570\u66f4\u65b0\u3002\n\n\u6240\u4ee5\uff0c\u5f53\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u503c\u4e3a0\uff08\u5373\u6ca1\u6709\u6c14\u7403\u65f6\uff09\uff0c\u6211\u4eec\u66f4\u65b0\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u718a\u5b69\u5b50\u4eec\uff0c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n\u663e\u7136\uff0c\u56e0\u4e3a \u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4ece\u5176\u4ed6\u6570\u53d8\u4e3a0\u7684\u60c5\u51b5\u53ea\u4f1a\u51fa\u73b01\u6b21 \uff0c\u66f4\u65b0\u7684\u6b21\u6570\u5c31\u662f$N log N$\u7ea7\u522b\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $ O(N log N) $\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100005;\nint n,m,q,a[N],ans[N<<2],sum[N];\nvector<int> ovo[N<<2];\nint ls(int x){\n\treturn x<<1;\n}\nint rs(int x){\n\treturn x<<1|1;\n}\nvoid push_up(int p){\n\tans[p]=ans[ls(p)]+ans[rs(p)];\n}\nvoid build(int l,int r,int p){\n\tif(l==r){\n\t\tans[p]=a[l];\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(l,mid,ls(p));\n\tbuild(mid+1,r,rs(p));\n\tpush_up(p);\n}\nvoid query(int nl,int nr,int l,int r,int p,int k){\n\tif(nl<=l&&r<=nr){\n\t\tsum[k]++;\n\t\tovo[p].push_back(k);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(nl<=mid){\n\t\tquery(nl,nr,l,mid,ls(p),k);\n\t}\n\tif(mid+1<=nr){\n\t\tquery(nl,nr,mid+1,r,rs(p),k);\n\t}\n}\nint update(int nn,int l,int r,int p){\n\tint re=0;\n\tif(l==r){\n\t\tans[p]--;\n\t\tif(ans[p]==0){\n\t\t\tint len=ovo[p].size();\n\t\t\tfor(int i=0;i<len;i++){\n\t\t\t\tsum[ovo[p][i]]--;\n\t\t\t\tif(sum[ovo[p][i]]==0){\n\t\t\t\t\tre++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn re;\n\t}\n\tint mid=(l+r)>>1;\n\tif(nn<=mid){\n\t\tre=update(nn,l,mid,ls(p));\n\t}\n\tif(mid+1<=nn){\n\t\tre=update(nn,mid+1,r,rs(p));\n\t}\n\tpush_up(p);\n\tif(ans[p]==0){\n\t\tint len=ovo[p].size();\n\t\tfor(int i=0;i<len;i++){\n\t\t\tsum[ovo[p][i]]--;\n\t\t\tif(sum[ovo[p][i]]==0){\n\t\t\t\tre++;\n\t\t\t}\n\t\t}\n\t}\n\treturn re;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tbuild(1,n,1);\n\tfor(int i=1;i<=m;i++){\n\t\tint l,r;\n\t\tscanf(\"%d%d\",&l,&r);\n\t\tquery(l,r,1,n,1,i);\n\t}\n\tscanf(\"%d\",&q);\n\tint x,Lastans=0;\n\tfor(int i=1;i<=q;i++){\n\t\tint sc;\n\t\tscanf(\"%d\",&sc);\n\t\tx=(sc+Lastans-1)%n+1;\n\t\tLastans+=update(x,1,n,1);\n\t\tprintf(\"%d\\n\",Lastans);\n\t}\n}\n```\n",
        "postTime": 1583474102,
        "uid": 104319,
        "name": "Why_not_use_longlong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4215 \u3010\u8e29\u6c14\u7403\u3011"
    }
]