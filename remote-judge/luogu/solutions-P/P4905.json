[
    {
        "content": "\u503c\u6b64\u6240\u6709\u9648\u65e7\u7684\u4e71\u641e\u88ab\u7c89\u5154\u6b63\u4e49\u88c1\u51b3\u4e4b\u9645\u8d81\u673a\u6295\u7a3f\u4e00\u4e2a\u5d2d\u65b0\u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u6ce8\u610f\u5230 $N\\le 233$\uff0c\u8fd9\u4e48\u5c0f\u7684\u8303\u56f4\u53ef\u4ee5\u76f4\u63a5\u628a\u9898\u76ee\u4e2d\u8bf4\u7684\u7f51\u683c\u56fe $O(N^2\\log N)$ \u5efa\u51fa\u6765\u3002\n\n\u9898\u76ee\u4e2d\u8ba9\u6211\u4eec\u6c42\u7528 $1\\times 2$ \u77e9\u5f62\u8986\u76d6\u6240\u6709\u975e\u7a7a\u77e9\u5f62\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u7f51\u683c\u56fe\u7684\u6700\u5c0f\u70b9\u8986\u76d6\u3002\n\n\u800c\u7f51\u683c\u56fe\u53c8\u4e00\u5b9a\u662f\u4e8c\u5206\u56fe\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u6210\u4e3a\u4e86\u6211\u4eec\u719f\u77e5\u7684\u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\uff0c\u4e5f\u5c31\u7b49\u4e8e\u70b9\u6570\u51cf\u53bb\u6700\u5927\u5339\u914d\u3002\n\n\u4e8e\u662f\u6c42\u51fa\u6700\u5927\u5339\u914d\u5373\u53ef\u3002\u8fd9\u91cc\u7528\u4e86 Dinic \u7b97\u6cd5\u3002\n\n\u590d\u6742\u5ea6\u7c97\u7565\u8ba1\u7b97\u597d\u50cf\u662f $O(N^3)$\uff1f\u5b9e\u9645\u4e0a\u5e94\u8be5\u8fdc\u8fdc\u8dd1\u4e0d\u6ee1\u7684\u5427\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\nconst int INF=9999999;\nconst int MAXN=300*300;\nint n,s;\nint a[300][300];\nint gcd(int x,int y)\n{\n\tif(!y)return x;\n\treturn gcd(y,x%y);\n}\nint cnt=1;\nstruct Edge\n{\n\tlong long nxt,to,flow;\n}e[MAXN<<1];\nint head[MAXN];\nvoid addEdge(int u,int v,int f)\n{\n\tcnt++;\n\te[cnt].nxt=head[u];\n\te[cnt].to=v;\n\te[cnt].flow=f;\n\thead[u]=cnt;\n}\nlong long dis[MAXN],vis[MAXN];\nlong long flo[MAXN],pre[MAXN];\nbool bfs(int n,int s,int t)\n{\n\tqueue<int> Q;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdis[i]=INF;\n\t\tvis[i]=0;\n\t}\n\tQ.push(s);\n\tdis[s]=0;\n\tvis[s]=1;\n\tflo[s]=INF;\n\twhile(!Q.empty())\n\t{\n\t\tint u=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt)\n\t\t{\n\t\t\tif(!e[i].flow)continue;\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v])continue;\n\t\t\tif(dis[v]>dis[u]+1)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+1;\n\t\t\t\tflo[v]=min(flo[u],e[i].flow);\n\t\t\t\tpre[v]=i;\n\t\t\t\tQ.push(v);\n\t\t\t\tvis[v]=1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[t]!=INF;\n}\nint cur[MAXN];\nlong long dfs(int u,int t,long long d)\n{\n\tif(u==t||d==0)return d;\n\tlong long res=0;\n\tlong long f;\n\tfor(int i=cur[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tcur[u]=i;\n\t\tif(dis[u]+1==dis[v]&&(f=dfs(v,t,min(d,e[i].flow)))>0)\n\t\t{\n\t\t\te[i].flow-=f;\n\t\t\te[i^1].flow+=f;\n\t\t\tres+=f;\n\t\t\td-=f;\n\t\t\tif(d==0)break;\n\t\t}\n\t}\n\treturn res;\n}\nlong long maxflow;\nvoid MaxFlow(int n,int s,int t)\n{\n\twhile(bfs(n,s,t))\n\t{\n\t\tfor(int i=1;i<=n;i++)cur[i]=head[i];\n\t\tmaxflow+=dfs(s,t,INF);\n\t}\n}\nint num(int x,int y)\n{\n\treturn (x-1)*n+y;\n}\nint main()\n{\n\tcin>>n;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tfor(int j=2;j<=n;j++)\n\t\t{\n\t\t\tif(gcd(i,j)!=1)\n\t\t\t{\n\t\t\t\ta[i][j]=1;\n\t\t\t\ts++;\n\t\t\t\tbool d=(i%2==j%2);\n\t\t\t\tif(d)\n\t\t\t\t{\n\t\t\t\t\taddEdge(n*n+2,num(i,j),0);\n\t\t\t\t\taddEdge(num(i,j),n*n+2,1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\taddEdge(n*n+1,num(i,j),1);\n\t\t\t\t\taddEdge(num(i,j),n*n+1,0);\n\t\t\t\t}\n\t\t\t\tif(a[i-1][j])\n\t\t\t\t{\n\t\t\t\t\taddEdge(num(i-1,j),num(i,j),d);\n\t\t\t\t\taddEdge(num(i,j),num(i-1,j),!d);\n\t\t\t\t}\n\t\t\t\tif(a[i][j-1])\n\t\t\t\t{\n\t\t\t\t\taddEdge(num(i,j-1),num(i,j),d);\n\t\t\t\t\taddEdge(num(i,j),num(i,j-1),!d);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tMaxFlow(n*n+2,n*n+1,n*n+2);\n\tcout<<s-maxflow<<endl;\n}\n\n```\n",
        "postTime": 1642421898,
        "uid": 252551,
        "name": "Xqbk",
        "ccfLevel": 4,
        "title": "P4905 \u9898\u89e3"
    },
    {
        "content": "* **\u3010\u9898\u76ee\u94fe\u63a5\u3011**\n\n[Link:P4905](https://www.luogu.com.cn/problem/P4905)\n\n* **\u3010\u89e3\u9898\u601d\u8def\u3011**\n\n\u672c\u9898\u601d\u8def\u6765\u81ea\u67d0\u9898\u89e3\u4e0b\u7684\u4e00\u4e2a\u8bc4\u8bba\u3002\n\n> \u53ef\u4ee5\u5148\u8ba1\u7b97\u6700\u591a\u80fd\u6709\u591a\u5c11\u6b21\u62cd\u7167\u53ef\u4ee5\u76f4\u63a5\u62cd\u6389 $2$ \u4e2a\u7b54\u6848\uff08\u4e00\u4e2a\u7b54\u6848\u4e0d\u80fd\u91cd\u590d\u62cd\uff09\uff0c\u7136\u540e\u52a0\u4e0a\u5269\u4e0b\u7684\u7b54\u6848\u6570\u5373\u53ef\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u8981\u600e\u4e48\u8ba1\u7b97\u6700\u591a\u80fd\u6709\u591a\u5c11\u6b21\u62cd\u7167\u53ef\u4ee5\u76f4\u63a5\u62cd\u6389 $2$ \u4e2a\u7b54\u6848\uff1f\n\n\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\uff0c$n\\leq233$\u3002\u8003\u8651\u4e71\u641e\u3002\n\n\u9996\u5148\uff0c\u95ee\u9898\u663e\u7136\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u4e00\u4e2a $1$ \u7684\u56db\u8fde\u901a\u5757\u5185\u6700\u591a\u80fd\u585e\u4e0b\u591a\u5c11\u4e2a $1\\times 2$ \u7684\u65b9\u5757\uff0c\u5176\u4e2d\u65b9\u5757\u53ef\u4ee5\u4efb\u610f\u65cb\u8f6c\u3002\n\n\u7136\u540e\u6211\u4eec\u76f4\u63a5\u6253\u51fa\u4e00\u4e2a $233\\times233$ \u7684\u8868\uff0c\u5982\u679c\u4e3a $1$ \u5c31\u4ee3\u8868\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u7b54\u6848\u3002\u4e3a\u4e86\u65b9\u4fbf\u89c2\u5bdf\uff0c\u6211\u4eec\u628a $1$ \u66ff\u6362\u4e3a`@`\uff0c$0$ \u66ff\u6362\u4e3a\u7a7a\u683c\u3002\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint gcd(int a,int b)\n{\n\treturn b?gcd(b,a%b):a;\n}\n\nint main(int argc,char* argv[],char* envp[])\n{\n\tfor(int i=1;i<=233;i++)\n\t{\n\t\tfor(int j=1;j<=233;j++)\n\t\t\tcout<<(gcd(i,j)!=1?'@':' ');\n\t\tcout<<'\\n';\n\t}\n\treturn 0;\n}\n\n```\n\n\u7136\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8868\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8868\u91cc`@`\u7684\u8fde\u901a\u5757\u5927\u5c0f\u90fd\u6bd4\u8f83\u5c0f\uff0c\u5e76\u4e14\u5947\u5f62\u602a\u72b6\u7684\u3002\u7136\u540e\uff0c\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u7206\u641c\u53ef\u4ee5\u585e\u591a\u5c11\u4e2a\u65b9\u5757\u3002\u4e8e\u662f\u8fd9\u9898\u4fbf\u505a\u5b8c\u4e86\u3002\n\n* **\u3010\u4ee3\u7801\u5b9e\u73b0\u3011**\n\n```cpp\n//\u672c\u4ee3\u7801\u9700\u8981O2\u3002\n#include <unordered_set>\n#include <iostream>\n#include <vector>\n#include <array>\n\nusing namespace std;\n\nint gcd(int a,int b)\n{\n\treturn b?gcd(b,a%b):a;\n}\n\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n\t_GLIBCXX_BEGIN_NAMESPACE_VERSION\n\ttemplate<>\n\tstruct hash<pair<int,int>>\n\t{\n\t\tsize_t operator()(const pair<int,int>& tmp)const\n\t\t{\n\t\t\treturn tmp.first+tmp.second;\n\t\t}\n\t};\n}\narray<array<char,300>,300> coprime;\nunordered_set<pair<int,int>> finder;\n\nvoid DFS_add(int i,int j)\n{\n\treturn (void)(coprime[i][j]==1&&(coprime[i][j]=2,finder.emplace(i,j),DFS_add(i+1,j),DFS_add(i-1,j),DFS_add(i,j+1),DFS_add(i,j-1),true));\n}\n\nint DFS_put(int i,int j)\n{\n\tvector<pair<int,int>> valid_pairs;\n\tvalid_pairs.reserve(10);\n\tint result=0;\n\tfinder.erase(finder.find(make_pair(i,j)));\n\tif(finder.find(make_pair(i,j+1))!=finder.end())\n\t{\n\t\tfinder.erase(finder.find(make_pair(i,j+1)));\n\t\tresult=1;\n\t\tfor(const auto& tmp:finder)\n\t\t\tvalid_pairs.push_back(tmp);\n\t\tfor(const auto& tmp:valid_pairs)\n\t\t\tresult=max(result,1+DFS_put(tmp.first,tmp.second));\n\t\tfinder.emplace(i,j+1);\n\t}\n\tvalid_pairs.clear();\n\tvalid_pairs.reserve(10);\n\tif(finder.find(make_pair(i+1,j))!=finder.end())\n\t{\n\t\tfinder.erase(finder.find(make_pair(i+1,j)));\n\t\tresult=1;\n\t\tfor(const auto& tmp:finder)\n\t\t\tvalid_pairs.push_back(tmp);\n\t\tfor(const auto& tmp:valid_pairs)\n\t\t\tresult=max(result,1+DFS_put(tmp.first,tmp.second));\n\t\tfinder.emplace(i+1,j);\n\t}\n\tfinder.emplace(i,j);\n\treturn result;\n}\n\nint DFS_count(int i,int j)\n{\n\tfinder.clear();\n\tDFS_add(i,j);\n\tint result=0;\n\tvector<pair<int,int>> valid_pairs;\n\tfor(const auto& tmp:finder)\n\t\tvalid_pairs.push_back(tmp);\n\tfor(const auto& tmp:valid_pairs)\n\t\tresult=max(DFS_put(tmp.first,tmp.second),result);\n\treturn result;\n}\n\nint DFS_clear(int i,int j)\n{\n\treturn coprime[i][j]?(coprime[i][j]=0,1+DFS_clear(i,j+1)+DFS_clear(i+1,j)+DFS_clear(i-1,j)+DFS_clear(i,j-1)):0;\n}\n\nint main(int argc,char* argv[],char* envp[])\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tint cnt;\n\tcin>>cnt;\n\tfor(int i=1;i<=cnt;i++)\n\t\tfor(int j=1;j<=cnt;j++)\n\t\t\tcoprime[i][j]=gcd(i,j)!=1; \n\tint ans=0,tmp;\n\tfor(int i=1;i<=cnt;i++)\t\n\t\tfor(int j=1;j<=cnt;j++)\n\t\t\tif(coprime[i][j]==1)\n\t\t\t\ttmp=DFS_count(i,j),ans+=DFS_clear(i,j)-tmp;\n\tcout<<ans;\n\treturn 0;\n}\n//\u4f60\u53ef\u4ee5\u7528\u6211\u7684\u4ee3\u7801\u6253\u8868\uff0c\u6211\u4e0d\u62e6\u7740\u4f60\u3002\u6211\u5df2\u7ecf\u7528\u8fd9\u4e2a\u4ee3\u7801\u6253\u8fc7\u8868\u4e86\u3002\n\n```",
        "postTime": 1642428184,
        "uid": 372983,
        "name": "Antarctic_Cube",
        "ccfLevel": 6,
        "title": "Solution:P4905(\u62a5\u7eb8)"
    }
]