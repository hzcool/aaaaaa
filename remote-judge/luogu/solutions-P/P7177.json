[
    {
        "content": "\u672c\u9898\u7b2c\u4e00\u7bc7\u9898\u89e3\uff01\n\n## \u601d\u8def\n\n\u5f88\u660e\u663e\uff0c\u5982\u679c\u6700\u521d\u6dfb\u52a0\u7684\u6db2\u4f53\u8d8a\u591a\uff0c\u8682\u8681\u4eec\u5f97\u5230\u7684\u6db2\u4f53\u4e5f\u4f1a\u8d8a\u591a\uff0c\u6240\u4ee5\u53ef\u4ee5 **\u4e8c\u5206\u7b54\u6848** \u3002\n\n\u6a21\u62df\u5012\u6db2\u4f53\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7528 dfs \u89e3\u51b3\uff0c\u5b58\u50a8\u8fb9\u7684\u65f6\u5019\u53ea\u9700\u8981\u591a\u6dfb\u52a0\u662f\u4e0d\u662f\u8d85\u7ea7\u7ba1\u9053\u548c\u901a\u8fc7\u6db2\u4f53\u7684\u767e\u5206\u6bd4\u8fd9\u4e24\u4e2a\u4fe1\u606f\u5c31\u884c\u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Maxn=1000;\n\ninline int read()\n{\n    char ch=getchar();\n    int f=1,x=0;\n    while(ch>'9' || ch<'0')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nstruct Node\n{\n    int to,nxt,opt;\n    double w;\n} Edge[Maxn*2+5];\nint tot,Head[Maxn+5];\n\ninline void Addedge(int x,int y,int z,int opt)\n{\n    Edge[++tot]=(Node){y,Head[x],opt,z/100.0};\n    Head[x]=tot;\n}\n\nint n;\ndouble val[Maxn+5],k[Maxn+5];\n// val: \u6bcf\u4e2a\u70b9\u7684\u6d41\u91cf\n\ninline void dfs(int x,int f)\n{\n    for(register int i=Head[x];i;i=Edge[i].nxt)\n    {\n        int y=Edge[i].to; double res=0;\n        if(y==f) continue;\n        res=val[x]*Edge[i].w;\n        if(Edge[i].opt) res*=res;\n        val[y]+=res;\n        dfs(y,x);\n    }\n}\ninline int Check(double mid) // \u4e8c\u5206\u7684\u5224\u65ad\n{\n    for(register int i=1;i<=n;++i)\n        val[i]=0;\n    val[1]=mid,dfs(1,0);\n    for(register int i=1;i<=n;++i)\n        if(val[i]<k[i]) return 0;\n    return 1;\n}\n\nint main()\n{\n    n=read();\n    for(register int i=1;i<n;++i)\n    {\n        int a=read(),b=read(),c=read(),d=read();\n        Addedge(a,b,c,d),Addedge(b,a,c,d);\n    }\n    for(register int i=1;i<=n;++i)\n        k[i]=read()*1.0;\n    double l=0,r=1e9;\n    for(register int i=1;i<=50;++i)\n    {\n        double mid=(l+r)/2;\n        if(Check(mid)) r=mid;\n        else l=mid;\n    }\n    printf(\"%.5lf\",l);\n    return 0;\n}\n```",
        "postTime": 1611407212,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7177 \u3010[COCI2014-2015#4]MRAVI\u3011"
    },
    {
        "content": "\u770b\u5230\u4ec5\u6709\u7684\u9898\u89e3\u7adf\u7136\u662f\u4e8c\u5206\uff1f\uff1f\uff01\u4e0d\u5f97\u4e0d\u63d0\u4ea4\u4e00\u4e2a\u9012\u63a8\u7684\u9898\u89e3\u4e86\u3002\n\n\u601d\u8def\u5982\u4e0b\uff1a\n\n\u7f16\u5199\u4e00\u4e2a\u51fd\u6570 $\\operatorname{solve}$ \uff0c\u5176\u4e2d $\\operatorname{solve}(i)$ \u8fd4\u56de\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u65f6\uff0c\u7b2c $i$ \u4e2a\u8282\u70b9\u6700\u5c11\u8981\u6709\u591a\u5c11\u6db2\u4f53\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 $i$ \uff0c\u5982\u679c\u5b83\u662f\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u9700\u8981\u7684\u6db2\u4f53\u6570\uff0c\u5373 $\\operatorname{solve}(i) \\gets k_i$\u3002\n\n\u5982\u679c\u5b83\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5219\u904d\u5386\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $i$ \u7684\u53f6\u5b50\u8282\u70b9 $v$\uff0c\u9012\u63a8\u51fa\u5f53\u524d\u8282\u70b9\u6700\u5c11\u7684\u6db2\u4f53\u91cf\u4ee5\u6ee1\u8db3 $\\operatorname{solve}(v)$ \u7684\u503c\u3002\u6240\u6709\u53d6\u5f97\u7684\u503c\u4e2d\u6700\u5927\u7684\u503c\u5c31\u662f\u5f53\u524d\u8282\u70b9\u9700\u8981\u7684\u6db2\u4f53\u91cf\uff08\u56e0\u4e3a\u5b83\u53ea\u662f\u7ed9\u4e86\u4e00\u4e2a\u6700\u4f4e\u9650\u5236\uff0c\u800c\u6700\u540e\u5206\u914d\u7ed9\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u6db2\u4f53\u91cf\u53ef\u4ee5\u65e0\u9650\u5927\uff09\u3002\u7531\u4e8e\u6570\u5b66\u516c\u5f0f\u8fc7\u4e8e\u590d\u6742\uff0c\u6b64\u5904\u6682\u4e0d\u5c55\u793a\u3002\n\n\u6700\u540e\u4ece $1$ \u8fd9\u4e2a\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386\u5c31\u884c\u3002\n\n\u8bf4\u53e5\u95f2\u8bdd\uff1a\u8bb0\u5f97\u5f00 double\uff01\n\n\u4e8e\u662f\u6709\u4e86\u4e0b\u9762\u7684 AC \u4ee3\u7801\uff08\u4e0d\u8981\u6284\uff01\uff09\n```cpp\n#include<bits/stdc++.h>\n#define mset(a,x) memset(a,x,sizeof(a))\nusing namespace std;\nconst int err=-120712^7869^12174,uerr=0x3f3f3f3f,eps=1e-9,N=1009;\nint n,cnt,head[N],need[N];\nstruct edge{\n\tint u,v,p,nxt;bool s;\n}e[N];\nvoid addedge(int u,int v,int p,int s){\n\te[cnt].u=u,e[cnt].v=v,e[cnt].p=p,e[cnt].s=s,e[cnt].nxt=head[u],head[u]=cnt++; \n}\ndouble dfs(int cur){\n\tif(~need[cur]){//\u7b49\u4ef7\u4e8eneed[cur]==-1\n//\tprintf(\"%d->%.4lf\\n\",cur,need[cur]*1.0);\n\t\treturn need[cur];\n\t}\n\tdouble ret=0;\n\tfor(int i=head[cur];~i;i=e[i].nxt){\n\t\tdouble tmp=dfs(e[i].v);\n\t\tif(e[i].s) tmp=sqrt(tmp);//\u5982\u679c\u662f\u8d85\u7ea7\u7ba1\u9053\u9012\u63a8\u9700\u8981\u53d6\u5e73\u65b9\u6839\uff0c\u56e0\u4e3a\u539f\u6765\u53d6\u4e86\u5e73\u65b9\n\t\ttmp=tmp/e[i].p*100;\n\t\tret=max(ret,tmp);\n\t}\n//\tprintf(\"%d->%.4lf\\n\",cur,ret);\n\treturn ret;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tmset(head,-1);\n\tfor(int i=1,u,v,w,p;i<n;++i){\n\t\tscanf(\"%d %d %d %d\",&u,&v,&w,&p);\n\t\taddedge(u,v,w,p);\n\t}\n\tfor(int i=1;i<=n;++i) scanf(\"%d\",need+i);\n\tprintf(\"%.4lf\",dfs(1));\n\treturn 0;}\n```",
        "postTime": 1629512885,
        "uid": 224222,
        "name": "fz20181223",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P7177 [COCI2014-2015#4]MRAVI"
    },
    {
        "content": "## \u601d\u8def\u8bb2\u89e3\n\n\u5f88\u660e\u663e\u5982\u679c $L$ \u80fd\u6ee1\u8db3\u8981\u6c42\u90a3\u4e48 $L+1$ \u4e5f\u4e00\u5b9a\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u7b26\u5408\u5355\u8c03\u6027\uff0c\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u7684\u65b9\u5f0f\u53bb\u505a\u3002\n\n\u4e0a\u754c\u662f $1000000000$\uff0c\u4e0b\u754c\u662f $0$\uff0c\u672c\u9898\u5c5e\u4e8e\u5b9e\u6570\u4e8c\u5206\uff0c\u5f53\u7136\u672c\u9898\u6700\u91cd\u8981\u8fd8\u662f\u8981\u641e\u61c2 `check()` \u51fd\u6570\u91cc `dfs()` \u7684\u5199\u6cd5\u3002\n\n\u4ece\u6839\u8282\u70b9 $1$ \u5f00\u59cb\u904d\u5386\uff0c\u6bcf\u6b21\u513f\u5b50\u53ef\u4ee5\u83b7\u5f97\u7684\u5c31\u662f `(t == 0 ? a[v.to] = a[u] * v.cost / 100 : a[v.to] = (a[u] * v.cost / 100) * (a[u] * v.cost / 100))`\uff0c\u5176\u4e2d $v.to$ \u662f $u$ \u7684\u513f\u5b50\u7ed3\u70b9\u7f16\u53f7\u3002\n\n## \u4ee3\u7801\u90e8\u5206\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct edge {\n    int to, cost, op;\n};\n\nconst int N = 1e3 + 10;\nvector<edge> G[N];\nint k[N], n;\ndouble a[N];\nconst double eps = 1e-6;\n\nvoid dfs(int u, int fa) {\n    for (auto v : G[u]) {\n        if (v.to != fa) {\n            if (v.op == 0) {\n                a[v.to] = a[u] * v.cost / 100;\n            } else {\n                a[v.to] = (a[u] * v.cost / 100) * (a[u] * v.cost / 100);\n            }\n            dfs(v.to, u);\n        }\n    }\n}\n\nbool check(double L) {\n    memset(a, 0, sizeof(a));\n    a[1] = L;\n    dfs(1, -1);\n    for (int i = 1; i <= n; i++) {\n        if (a[i] < k[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0);\n    cin >> n;\n    for (int i = 1; i <= n - 1; i++) {\n        int a, b, x, t;\n        cin >> a >> b >> x >> t;\n        G[a].push_back(edge{b, x, t});\n        G[b].push_back(edge{a, x, t});\n    }\n    for (int i = 1; i <= n; i++) {\n        cin >> k[i];\n    }\n    double l = 0, r = 2e9 + 10;\n    while (r - l > eps) {\n        double mid = (l + r) / 2;\n        if (check(mid)) {\n            r = mid;\n        } else {\n            l = mid;\n        }\n    }\n    printf(\"%.4f\\n\", r);\n    return 0;\n}\n```",
        "postTime": 1677987794,
        "uid": 482998,
        "name": "jeffstart",
        "ccfLevel": 0,
        "title": "P7177 [COCI2014-2015#4] MRAVI \u9898\u89e3"
    },
    {
        "content": "# 1.\u9898\u610f\u5206\u6790\n\n\u770b\u5230\u4f53\u9762\u7684\u65f6\u5019\uff0c\u4e0b\u610f\u8bc6\u738b\u7f51\u7edc\u6d41\u53bb\u60f3\u4e86\u3002\u4f46\u662f\u6211\u4eec\u56de\u8fc7\u5934\u6765\u770b\uff0c\u8fd9\u5f88\u660e\u663e\u5c31\u662f \u641c\u7d22 + \u4e8c\u5206\u4e86\u3002\n\n### \u904d\u5386\uff1a\n\n\u5f88\u660e\u663e\uff0c\u5bf9\u4e8e\u6240\u6709\u6570\u636e\u90fd\u6709 $n \\le 10^3$ \u800c\u4e14\u5bf9\u4e8e\u6240\u6709\u7684\u53f6\u8282\u70b9\u6211\u4eec\u90fd\u9700\u8981\u904d\u5386\u5230\uff0c\u6545\u4e0d\u5b58\u5728\u526a\u679d\u60c5\u51b5\uff0c\u8001\u8001\u5b9e\u5b9e\u7684\u641c\u7d22\u5427\uff0c\u641c\u7d22\u65b9\u5f0f\u5c31\u662f\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\u76f4\u5230\u53f6\u8282\u70b9\uff0c\u6bcf\u6b21\u5904\u7406\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\u7684\u540c\u65f6\u5904\u7406\u5f80\u4e0b\u65b9\u8282\u70b9\u6d41\u5165\u7684\u6d41\u91cf\u3002\n\n\u7ec6\u8282\u8bf7\u770b\u4ee3\u7801\u3002\n\n\u5bf9\u4e8e\u641c\u7d22\u65b9\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 dfs \u6216\u8005 bfs \u90fd\u662f\u53ef\u4ee5\u7684\u3002\n\n### \u4e8c\u5206\uff1a\n\n\u540c\u65f6\uff0c\u6839\u636e\u9898\u610f\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u5f53 $1$ \u8282\u70b9\uff08\u5373\u6839\u8282\u70b9\uff09\u7684\u503c\u8d8a\u5927\u7684\u65f6\u5019\uff0c\u4e0b\u9762\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\u4e5f\u4f1a\u53d8\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u9009\u62e9\u4f7f\u7528\u4e8c\u5206\u6765\u5bfb\u627e\u7b54\u6848\u3002\n\n\u4e0d\u8fc7\uff0c\u56e0\u4e3a\u7b54\u6848\u662f\u4e00\u4e2a\u6d6e\u70b9\u578b\u7684\u6570\u636e\uff0c\u6240\u4ee5\u4e8c\u5206\u7b54\u6848\u7684\u65f6\u5019\u8981\u6ce8\u610f\u63a7\u5236\u7cbe\u5ea6\u3002\u5982\u4e0b\uff0c\u5b9a\u4e49 $ctrl=1e-8$ \u5c31\u662f\u4e3a\u4e86\u63a7\u5236\u7cbe\u5ea6\u4e8c\u8bbe\u7f6e\u7684\u3002\n```cpp\n\tdouble l=0,r=1e9,ctrl=1e-8;\n\twhile(l+ctrl<r) //\u4e8c\u5206\n\t{\n\t\tdouble mid=(l+r)/2.0;\n\t\tif(dfs(1,mid))r=mid;\n\t\telse l=mid;\n\t}\n```\n\n\n\n# 2.\u4ee3\u7801\n\n## dfs\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nstruct edge\n{\n\tdouble to,next,w;\n\tdouble t;\n}l[1000005];\ndouble a[1000006];\nint head[1000005],cnt=0;\nbool dfs(int now,double res) //\u641c\u7d22\n{\n\tif(!head[now])\n\t{\n\t\tif(res>=a[now])\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse return false;\n\t}\n\tfor(int i=head[now];i;i=l[i].next)\n\t{\n\t\tdouble fl=res*l[i].w;\n\t\tif(l[i].t)\n\t\t{\n\t\t\tif(!dfs(l[i].to,fl*fl))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(!dfs(l[i].to,fl))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;;\n}\nvoid add(int from,int to,double w,double t) //\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\n{\n\tcnt++;\n\tl[cnt].to=to;\n\tl[cnt].t=t;\n\tl[cnt].w=w/100.0; //\u5148\u884c\u5904\u7406\u6bcf\u6bb5\u6c34\u7ba1\u80fd\u8fd0\u9001\u7684\u767e\u5206\u6bd4\n\tl[cnt].next=head[from];\n\thead[from]=cnt;\n}\ndouble n;\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tdouble a,b,c,t;\n\t\tcin>>a>>b>>c>>t;\n\t\tadd(a,b,c,t);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tdouble l=0,r=1e9,ctrl=1e-8;\n\twhile(l+ctrl<r) //\u4e8c\u5206\n\t{\n\t\tdouble mid=(l+r)/2.0;\n\t\tif(dfs(1,mid))r=mid;\n\t\telse l=mid;\n\t}\n\tprintf(\"%.5lf\",l);\n\treturn 0;\n}\n```\n\n## bfs\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\n#include<queue>\nusing namespace std;\nstruct edge\n{\n\tint to,next;\n\tdouble w;\n\tdouble t;\n}l[1000005];\ndouble a[1000006];\nint head[1000005],cnt=0;\nbool bfs(double mid) \n{\n\tqueue<int>q;\n\tqueue<double>val;\n\tq.push(1);\n\tval.push(mid);\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tdouble res=val.front();\n\t\tval.pop();\n\t\tq.pop();\n\t\tif(a[now]>res)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tfor(int i=head[now];i;i=l[i].next)\n\t\t{\n\t\t\t\n\t\t\tdouble tmp=res*l[i].w;\n\t\t\tif(l[i].t==1)tmp=pow(tmp,2);\n\t\t\tval.push(tmp);\n\t\t\tq.push(l[i].to);\n\t\t}\n\t}\n\treturn true;\n}\nvoid add(int from,int to,double w,double t)\n{\n\tcnt++;\n\tl[cnt].to=to;\n\tl[cnt].t=t;\n\tl[cnt].w=w/100.0;\n\tl[cnt].next=head[from];\n\thead[from]=cnt;\n}\ndouble n;\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tdouble a,b,c,t;\n\t\tcin>>a>>b>>c>>t;\n\t\tadd(a,b,c,t);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tdouble l=0,r=1e9,ctrl=1e-8;\n\twhile(l+ctrl<r)\n\t{\n\t\tdouble mid=(l+r)/2.0;\n\t\tif(bfs(mid))r=mid;\n\t\telse l=mid;\n\t}\n\tprintf(\"%.5lf\",l);\n\treturn 0;\n}\n```\n\n# 3. \u6ce8\u610f\u7ec6\u8282&\u5c0f\u5c0f\u7684emo\n\n\u6700\u540e\u7684\u8f93\u51fa\u8981\u7528`printf(\"%.5lf\",l);`\uff0c\u56e0\u4e3a`cout` \u76f4\u63a5\u8f93\u51fa\u7684\u7cbe\u5ea6\u4e0d\u591f\uff0c\u5bfc\u81f4\u6211\u88ab\u5361\u4e86\u597d\u4e45 :(\u3002",
        "postTime": 1659955053,
        "uid": 567632,
        "name": "\u671b\u6708\u91ceQwQ",
        "ccfLevel": 4,
        "title": "P7177 [COCI2014-2015#4] MRAVI"
    }
]