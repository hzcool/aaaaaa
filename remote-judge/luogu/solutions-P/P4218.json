[
    {
        "content": "### \u4e00\u4e36\u524d\u8a00\uff1a\n\u8fd9\u9053\u9898\u771f\u7684\u597d\u5de7\u554a\uff0c\u662f\u4e00\u9053\u5f88\u597d\u7684\u8bad\u7ec3\u540e\u7f00\u81ea\u52a8\u673a\u4e0e\u70b9\u5206\u6cbb ~~(\u4e0e\u8ba9\u81ea\u5df1\u81ea\u95ed)~~ \u7684\u9898\n\n### \u4e8c\u4e36\u601d\u8def\uff1a\n\u5047\u8bbe\u5339\u914d\u4e32\u4e3a$S$\n\n~~\u663e\u7136\uff0c\u5bf9\u5339\u914d\u4e32$S$\u5efa\u540e\u7f00\u81ea\u52a8\u673a~~\n\n\u7136\u540e\u6709\u4e00\u4e2a\u5341\u5206\u7b80\u5355\u7684\u66b4\u529b\u601d\u8def\uff0c\u6211\u4eec\u679a\u4e3e\u6811\u4e0a\u7684\u8d77\u59cb\u70b9$x$\uff0c\u7136\u540e\u4ece$x$\u5f00\u59cb\u76f4\u63a5dfs\uff0c\u5728dfs\u7684\u540c\u65f6\u5728SAM\u7684DAG\u4e0a\u8dd1\u5339\u914d\uff08\u5982\u679c\u627e\u4e0d\u5230\u8f6c\u79fb\u76f4\u63a5return\uff09\u5c31\u597d\u4e86\u3002\n\n\u5047\u8bbe\u5230\u4e86\u540e\u7f00\u81ea\u52a8\u673a\u7684$y$\u53f7\u8282\u70b9\uff0c$ans+=size[y]$\u5c31\u597d\u4e86($size$\u662fSAM\u70b9\u4e0a\u7684$right$\u96c6\u5408\u5927\u5c0f)\n\n\u5bf9\u4e8e\u5b66\u8fc7\u540e\u7f00\u81ea\u52a8\u673a ~~\uff08\u5982\u679c\u4f60\u6ca1\u5b66\u8fc7\u6765\u505a\u8fd9\u9053\u9898\u5e72\u561b\uff09~~ \u7684\u5404\u4f4d\u6765\u8bf4\uff0c\u76f8\u4fe1\u8fd8\u662f\u5341\u5206\u7b80\u5355\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$\n\n\u63a5\u7740\uff0c\u6211\u4eec\u5f00\u59cb\u8003\u8651\u6b63\u89e3\u3002\n\n\u770b\u5230\u6211\u4eec\u8981\u5904\u7406\u6811\u4e0a\u7684\u6240\u6709\u8def\u5f84\uff0c\u6211\u4eec\u4e0d\u7531\u81ea\u4e3b\u5730\u4f1a\u60f3\u5230\u70b9\u5206\u6cbb\u3002\u5047\u8bbe\u5f53\u524d\u5206\u6cbb\u4e2d\u5fc3\u662f$x$\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u5904\u7406\uff1f\n\n\u76f4\u63a5\u7b97$\\sum_{a} \\sum_{b}[a$ \u5230 $x$\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5728$S$\u51fa\u73b0\u7684\u6b21\u6570$]\\times[x$\u5230$b$\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u5728$S$\u51fa\u73b0\u7684\u6b21\u6570$]$ \uff1f\n\n\u8fd9\u6837\u663e\u7136\u4e0d\u5bf9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u8bf4\u524d\u9762\u51fa\u73b0\u5728$S$\uff0c\u540e\u9762\u4e5f\u51fa\u73b0\u5728$S$\uff0c\u5b83\u4eec\u62fc\u8d77\u6765\u5c31\u4e00\u5b9a\u51fa\u73b0\u5728$S$\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u5728$S$\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e0d\u4e00\u5b9a\u76f8\u540c\n\n**\u518d\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\uff1a**\n\n$\\sum_{p}\\sum_{a}\\sum_{b} [a$ \u5230 $x$\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\u5728$S$\u4e14\u672b\u5c3e\u4e3a$p] \\times [x$\u5230$b$\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\u5728$S$\u4e14\u8d77\u70b9\u662f$p]$\n\n(\u8bf7\u770b\u6e05\u695a\u4e0a\u9762\u90a3\u4e2a\u548c\u5f0fqwq)\n\n\u90a3\u6211\u4eec\u53ea\u7528\u679a\u4e3e$p$\uff0c\u7136\u540e\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a$a,b$\u6ee1\u8db3$[a$\u5230$x$\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\u5728$S$\u4e14\u672b\u5c3e\u4e3a$p]$\u4e0e$[x$\u5230$b$\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\u5728$S$\u4e14\u8d77\u70b9\u662f$p]$\u5c31\u884c\u4e86\n\n\u663e\u7136\u4e24\u4e2a\u7edf\u8ba1\u662f\u5bf9\u79f0\u7684\uff08\u628a$S$\u5012\u8fc7\u6765\u540e\u8005\u5c31\u53d8\u6210\u4e86\u524d\u8005\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u8003\u8651\u5bf9\u7b2c\u4e00\u79cd\u60c5\u51b5\u8fdb\u884c\u7edf\u8ba1\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0b\u9762\u5047\u8bbe$T$\u4e3a\u662f$a$\u5230$x$\u5f62\u6210\u7684\u5b57\u7b26\u4e32\uff0c$pos[p]$\u4e3a$S[1,p]$\u5728SAM\u5bf9\u5e94\u7684\u8282\u70b9\n\n\u5982\u679c\u4e00\u4e2a$T$\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48\u5e94\u8be5\u6ee1\u8db3:\n \n$\\quad$1.$T$\u51fa\u73b0\u5728$S$\u4e2d\n\n$\\quad$2.$T$\u5728SAM\u4e0a\u5bf9\u5e94\u7684\u70b9\u7684$right$\u96c6\u5408\u5305\u542b$p$\uff08\u65e2\u7136\u5b83\u51fa\u73b0\u5728$S$\u4e2d\u90a3\u5b83\u80af\u5b9a\u80fd\u5bf9\u5e94SAM\u4e0a\u4e00\u4e2a\u70b9\uff09\n\n\u90a3\u6211\u4eec\u53ea\u9700\u8981\u6574\u4e00\u4e2a$num$\u6570\u7ec4\uff0c\u5e76\u5728$dfs$\u4e2d\u9014\u968f\u65f6\u5728\u627e\u51fa$T$\u5728SAM\u4e0a\u7684\u5bf9\u5e94\u7684\u8282\u70b9$v$\uff0c\u5e76$num[v]++$\u5c31\u597d\u4e86\uff08\u5982\u679c\u6ca1\u6709\u76f4\u63a5return\u5c31\u597d\u4e86\uff09\n\n\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5982\u679c\u6211\u662f\u5728\u5f80$T$\u540e\u9762\u52a0\u5b57\u7b26\uff0c\u6211\u76f4\u63a5\u5728SAM\u7684DAG\u4e0a\u8f6c\u79fb\u5c31\u597d\u4e86\uff0c\u95ee\u9898\u5728\u4e8e\u73b0\u5728\u6211\u662f\u5728\u5f80$T$\u524d\u9762\u52a0\u5b57\u7b26\uff0c\u6211\u8be5\u600e\u4e48\u8f6c\u79fb\u5462\uff1f\n\n\u8fd9\u4e2a\u4e1c\u897f\u6d89\u53ca\u5230$Parent Tree$\u6c42\u513f\u5b50\u7684\u95ee\u9898\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u8bb2\uff08\u5f53\u7136\u4f60\u5982\u679c\u4f1a\u4e86\u53ef\u4ee5\u7565\u8fc7\uff09\n\n\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5728$T$\u524d\u9762\u52a0\u5b57\u7b26\u662f\u5982\u4f55\u8f6c\u79fb\u7684\uff0c\u5e76\u7edf\u8ba1\u51fa\u4e86$num$\u6570\u7ec4\uff0c\u7136\u540e\u6211\u4eec\u600e\u4e48\u6c42\u7b54\u6848\u5462\uff1f\n\n\u76f4\u63a5\u679a\u4e3e$pos[p]$\u7684\u6240\u6709\u7956\u5148\u7684$num$\u52a0\u8d77\u6765\uff1f\u663e\u7136TLE\n\n\u5176\u5b9e\u53ea\u8981\u81f3\u4e0a\u800c\u4e0b$num[x]+=num[fa[x]]$\uff0c\u7136\u540e$num[pos[p]]$\u5c31\u662f\u7b54\u6848\u4e86\n\n\u73b0\u5728\u6211\u4eec\u56de\u5230\u4e0a\u9762\u7684\u90a3\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5f80$T$\u524d\u9762\u52a0\u5b57\u7b26\u5728SAM\u5bf9\u5e94\u7684\u70b9\u7684\u53d8\u5316\u60c5\u51b5\u3002\u5047\u8bbe\u73b0\u5728$T$\u5bf9\u5e94SAM\u4e0a\u7684\u70b9$v$\uff0c\u5e76\u5728$T$\u7684\u524d\u9762\u52a0\u4e00\u4e2a\u5b57\u7b26$c$\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff08\u5047\u8bbe$R[v]$\u8868\u793a$v$\u8282\u70b9\u7684\u4efb\u610f\u4e00\u4e2a$right$\uff09\uff1a\n\n1. $|T|<len[v]$\uff0c\u76f4\u63a5\u770b\u63a5\u5224\u65ad$[c==S[R[v]-|T|]]$\uff0c\u82e5\u4e3a\u771f$T$\u4ecd\u7136\u5bf9\u5e94$v$\uff0c\u5426\u5219$T$\u5c06\u4e0d\u518d\u51fa\u73b0\u5728$S$\u4e2d\n\n2. $|T|==len[v]$\uff0c\u770b\u6709\u6ca1\u6709\u4e00\u4e2a\u70b9$x$\u6ee1\u8db3$fa[x]=v$\uff0c\u4e14$S[R[x]-len[v]]==c$\uff0c\u82e5\u6709\u5219$T$\u5bf9\u5e94$x$\uff0c\u5426\u5219$T$\u5c06\u4e0d\u518d\u51fa\u73b0\u5728$S$\u4e2d\n\n\u8fd9\u6837\u5173\u4e8e$ParentTree$\u7684\u513f\u5b50\u7684\u5b9a\u4e49\u4e5f\u547c\u4e4b\u6b32\u51fa\u4e86\uff1a\n\n$son[x][p]$\u8868\u793a\u5728$p+S[R[x]-len[x]+1,R[x]]$\u5728$S$\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\uff08\u8fd9\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5728build\u65f6\u6c42\u51fa\uff09\n\n\u90a3\u4e48\u4e0a\u9762\u7684\u7b2c\u4e8c\u6761\u4e5f\u53ef\u4ee5\u6539\u5199\u6210:\n\n\u82e5$son[v][c]$\u5b58\u5728\uff0c\u5219$T$\u5bf9\u5e94$son[v][c]$\uff0c\u5426\u5219$T$\u5c06\u4e0d\u518d\u51fa\u73b0\u5728$S$\u4e2d\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlogn+nm)$\n\n\u7b49\u7b49\uff0c\u6211\u4eec\u6574\u4e86\u90a3\u4e48\u4e45\uff0c\u641e\u51fa\u6765\u90a3\u4e48\u591a\u4e1c\u897f\uff0c\u590d\u6742\u5ea6\u8fd8\u53d8\u52a3\u4e86\uff1f\uff1f~~\uff08\u4e0d\u505a\u4e86\u4e0b\u4e00\u9053\uff09~~\n\n\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u7f3a\u70b9\u5728\u54ea\u513f\uff1f\u5176\u5b9e\u7f3a\u70b9\u5c31\u5728\u4e8e\uff0c\u4e0d\u7ba1\u6211\u4eec\u73b0\u5728\u5904\u7406\u7684\u5206\u6cbb\u5b50\u6811\u591a\u4e48\u7684\u5c0f\uff0c\u6211\u4eec\u90fd\u9700\u8981\u628a\u6574\u4e2a$m$\u904d\u5386\u4e00\u904d\uff0c\u8fd9\u6837\u662f\u5f88\u4e0d\u5212\u7b97\u7684\u3002\n\n\u90a3\u548b\u529e\u5462\uff1f\u7b49\u7b49\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u8fd8\u6709\u4e00\u4e2a$O(n^2)$\u7684\u505a\u6cd5\uff0c\u90a3\u6211\u4eec\u5bf9\u5c0f\u7684\u5206\u6cbb\u5b50\u6811\u76f4\u63a5\u8fdb\u884c$O(n^2)$\u7684\u505a\u6cd5\u4e0d\u5c31\u597d\u4e86\n\n\u81ea\u7136\u8003\u8651\u5206\u5757\uff0c\u5bf9\u4e8e\u5c0f\u4e8e\u7b49\u4e8e$sqrt(n)$\u7684\u5206\u6cbb\u5b50\u6811\u76f4\u63a5\u66b4\u529b$n^2$\uff0c\u800c\u5bf9\u5927\u7684\u5206\u6cbb\u5b50\u6811\u8fdb\u884c~~\u521a\u521a\u6211\u4eec\u795e\u5947\u7684\u64cd\u4f5c~~\n\n\u8fd8\u6709\u4e2a\u5c0f\u95ee\u9898 **\uff08\u51e0\u4e4e\u662f\u6240\u6709\u70b9\u5206\u6cbb\u90fd\u8bb0\u5f97\u8981\u8003\u8651\u7684\u95ee\u9898\uff09**\uff0c$a$\u548c$b$\u53ef\u80fd\u6765\u81ea\u540c\u4e00\u4e2a\u5b50\u6811\uff0c\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u5bb9\u65a5\u51cf\u6389\u5c31\u597d\u4e86\u3002\n\n\u76f8\u4fe1\u4f60\u73b0\u5728\u51e0\u4e4e\u662f\u4e00\u5b9a\u4e00\u8138\u61f5\u903c\u7684 ~~\uff08\u5982\u679c\u4e0d\u662f\u90a3\u8bf4\u660e\u4f60\u592a\u5f3a\u4e86%%%\uff09~~\uff0c\u6240\u4ee5\u6211\u4eec\u63a5\u4e0b\u6765\u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u4e00\u4e0b\u5427\u3002\n\n### \u4e09\u4e36\u4ee3\u7801\n```cpp\n//BadWaper gg\n#include<bits/stdc++.h> \n#define inf 1e9\n#define eps 1e-6\n#define N 100010\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline ll read()\n{\n\tchar ch=getchar();\n\tll s=0,w=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\nll n,m;\nstruct edge\n{\n\tll next,to;\n}e[N<<1];\nll head[N],cnt,vis[N];\nll pos1[N],pos2[N];\nll a[N],s[N];\nchar s1[N],s2[N];\nll size[N],C[N],p[N],ans;\nll minn=inf,rt,block;\nstruct SAM\n{\n\tll len[N],ch[N][26],fa[N];\n\tll tot,son[N][26],R[N],size[N],num[N],last;\n\tll p[N],c[N];\n\tll s[N];\n\tSAM(){tot=last=1;}\n\tinline void insert(ll x)\n\t{\n\t\tll nowp=++tot,p=last;len[nowp]=len[p]+1;size[nowp]=1;R[nowp]=len[nowp];\n\t\twhile(p&&!ch[p][x])ch[p][x]=nowp,p=fa[p];\n\t\tif(!p)fa[nowp]=1;\n\t\telse \n\t\t{\n\t\t\tll q=ch[p][x];\n\t\t\tif(len[q]==len[p]+1)fa[nowp]=q;\n\t\t\telse\n\t\t\t{\n\t\t\t\tll nowq=++tot;len[nowq]=len[p]+1;\n\t\t\t\tfa[nowq]=fa[q];fa[q]=nowq,fa[nowp]=nowq;\n\t\t\t\tfor(register ll i=0;i<26;i++)ch[nowq][i]=ch[q][i];\n\t\t\t\twhile(p&&ch[p][x]==q)ch[p][x]=nowq,p=fa[p];\n\t\t\t}\n\t\t}\n\t\tlast=nowp;\n\t}//\u5efaSAM\n\tinline void build()\n\t{\n\t\tfor(register ll i=1;i<=tot;i++)c[len[i]]++;\n\t\tfor(register ll i=1;i<=m;i++)c[i]+=c[i-1];\n\t\tfor(register ll i=1;i<=tot;i++)p[c[len[i]]--]=i;//\u57fa\u6392\n\t\tfor(register ll i=tot;i>=2;i--)\n\t\t{\n\t\t\tll x=p[i];\n\t\t\tsize[fa[x]]+=size[x];R[fa[x]]=R[x];//R\u662fright\u96c6\u5408\u5185\u4efb\u610f\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f60\u7231\u548b\u641e\u548b\u641e\u5566qwq\n\t\t\tson[fa[x]][s[R[x]-len[fa[x]]]]=x;//\u6c42son\n\t\t}\n\t}\n\tinline void clear(){for(register ll i=1;i<=tot;i++)num[i]=0;}\n\tinline void calc(ll now,ll father,ll p,ll L)\n\t{\n\t\tif(len[p]==L)p=son[p][a[now]];//\u60c5\u51b52\n\t\telse if(s[R[p]-L]!=a[now])p=0;//\u60c5\u51b51\n\t\tif(!p)return ;//T\u4e0d\u5728S\u76f4\u63a5return\n                num[p]++;\n\t\tfor(register ll i=head[now];i;i=e[i].next)\n\t\t{\n\t\t\tif(e[i].to==father||vis[e[i].to])continue;\n\t\t\tcalc(e[i].to,now,p,L+1);\n\t\t}\n\t}\n\tinline void pushdown()\n\t{\n\t\tfor(register ll i=2;i<=tot;i++)//\u81ea\u4e0a\u800c\u4e0b\n\t\t{\n\t\t\tll x=p[i];\n\t\t\tnum[x]+=num[fa[x]];\n\t\t}\n\t}\n}S1,S2;\ninline void add_edge(ll from,ll to){e[++cnt]=(edge){head[from],to};head[from]=cnt;}\nvoid getroot(ll now,ll Ns,ll father)\n{\n\tsize[now]=1;ll maxn=-inf;\n\tfor(register ll i=head[now];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==father||vis[e[i].to])continue;\n\t\tgetroot(e[i].to,Ns,now);size[now]+=size[e[i].to];\n\t\tmaxn=max(maxn,size[e[i].to]);\n\t}\n\tmaxn=max(maxn,Ns-size[now]);\n\tif(maxn<minn)minn=maxn,rt=now;\n}//\u70b9\u5206\u6cbb\u6c42\u6839\nvoid dfs1(ll now,ll father)\n{\n\tp[++p[0]]=now;\n\tfor(register ll i=head[now];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==father||vis[e[i].to])continue;\n\t\tdfs1(e[i].to,now);\n\t}\n}//n^2\u66b4\u529b\nvoid dfs2(ll now,ll father,ll x)\n{\n\tx=S1.ch[x][a[now]];if(!x)return ;\n\tans+=S1.size[x];\n\tfor(register ll i=head[now];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==father||vis[e[i].to])continue;\n\t\tdfs2(e[i].to,now,x);\n\t}\n}//n^2\u66b4\u529b\nvoid calc(ll x,ll father,ll f)\n{\n\tS1.clear(),S2.clear();\n\tif(father)\n\t{\n\t\tS1.calc(x,0,S1.son[1][a[father]],1);\n\t\tS2.calc(x,0,S2.son[1][a[father]],1);\n\t}\n\telse {S1.calc(x,0,1,0);S2.calc(x,0,1,0);}\n\tS1.pushdown();S2.pushdown();\n\tfor(register ll i=1;i<=m;i++)\n\t{\n\t\tans+=f*S1.num[pos1[i]]*S2.num[pos2[m-i+1]];\n\t}//\u7edf\u8ba1\u7b54\u6848\uff0c\u6ce8\u610f\u56e0\u4e3a\u4e32\u53cd\u8fc7\u6765\u4e86\u6240\u4ee5\u540e\u9762\u662fm-i+1\n}\nvoid DFS(ll now,ll father)\n{\n\tC[now]=1;\n\tfor(register ll i=head[now];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==father||vis[e[i].to])continue;\n\t\tDFS(e[i].to,now);C[now]+=C[e[i].to];\n\t}\n}//\u6c42\u5206\u6cbb\u5b50\u6811\u5927\u5c0f\nvoid dfs(ll now,ll Ns)\n{\n\tif(Ns<=block)\n\t{\n\t\tp[0]=0;dfs1(now,0);\n\t\tfor(register ll i=1;i<=p[0];i++)dfs2(p[i],0,1);\n\t\treturn ;\n\t}//n^2\u66b4\u529b\n\tvis[now]=1;calc(now,0,1);DFS(now,0);\n\tfor(register ll i=head[now];i;i=e[i].next)\n\t{\n\t\tif(vis[e[i].to])continue;\n\t\tcalc(e[i].to,now,-1);//\u5bb9\u65a5\uff0c\u628a\u540c\u4e00\u5b50\u6811\u7684\u7b54\u6848\u5bb9\u65a5\u6389\n                minn=inf,rt=0;\n\t\tgetroot(e[i].to,C[e[i].to],0);dfs(rt,C[e[i].to]);\n\t}\n}\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(),m=read();block=sqrt(n);\n\tfor(register ll i=1;i<n;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tadd_edge(x,y);add_edge(y,x);\n\t}\n\tscanf(\"%s\",s1+1);\n\tfor(register ll i=1;i<=n;i++)a[i]=s1[i]-'a';\n\tscanf(\"%s\",s2+1);\n\tfor(register ll i=1;i<=m;i++)s[i]=s2[i]-'a';\n\tfor(register ll i=1;i<=m;i++)S1.insert(s[i]),pos1[i]=S1.last,S1.s[i]=s[i];\n\treverse(s+1,s+m+1);//\u628a\u4e32\u7ffb\u8f6c\u4e4b\u540e\u7b2c\u4e8c\u4e2a\u7edf\u8ba1\u4e0e\u7b2c\u4e00\u4e2a\u7edf\u8ba1\u7c7b\u4f3c\n\tfor(register ll i=1;i<=m;i++)S2.insert(s[i]),pos2[i]=S2.last,S2.s[i]=s[i];\n\tS1.build();S2.build();\n\tgetroot(1,n,0);dfs(rt,n);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n\n```\n\n### \u56db\u4e36\u540e\u8bb0\n\u6211\u4eec\u505a\u4e00\u9053\u9898\u4e0d\u4ec5\u4ec5\u662f\u8981\u641e\u61c2\u8fd9\u9053\u9898\u600e\u4e48\u505a\uff0c\u66f4\u8981\u5b66\u4f1a\u4ece\u8fd9\u9053\u9898\u4e0a\u53cd\u601d\u4e0e\u603b\u7ed3\u3002\n\n\u5728\u5e73\u65f6\u7684SAM\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u51e0\u4e4e\u53ea\u7528\u8fc7\u5728\u5b57\u7b26\u4e32\u540e\u52a0\u5b57\u7b26\uff08\u8dd1DAG\uff09\uff0c\u6216\u8005\u662f\u5728\u5b57\u7b26\u4e32\u524d\u5220\u5b57\u7b26\uff08\u8df3ParentTree\uff09\uff0c\u4f46\u8fd9\u9053\u9898\u7279\u6b8a\u4e4b\u5904\u5c31\u5728\u4e8e\u6211\u4eec\u662f\u5728\u5b57\u7b26\u4e32\u524d\u52a0\u5165\u5b57\u7b26\uff0c\u5e76\u7531\u6b64\u5b9a\u4e49\u51fa\u4e86ParentTree\u4e0a\u513f\u5b50\u7684\u5b9a\u4e49\u3002\uff08\u5982\u679c\u662f\u5728\u5b57\u7b26\u4e32\u540e\u9762\u5220\u5b57\u7b26\u8be5\u600e\u4e48\u505a\u5462qwq\uff09\n\n\u8fd9\u662f\u6211\u4ece\u8fd9\u9053\u9898\u6536\u83b7\u5230\u7684\u4e1c\u897f\uff0c\u5f53\u7136\u6bcf\u4e2a\u4eba\u6536\u83b7\u5230\u7684\u4e1c\u897f\u591a\u534a\u90fd\u4e0d\u4e00\u6837\uff0c\u5e0c\u671b\u4f60\u4e5f\u80fd\u4ece\u6211\u7684\u9898\u89e3\u548c\u8fd9\u9053\u9898\u4e0a\u6709\u4e00\u5b9a\u6536\u83b7\u3002\n\n**\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u7bc7\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u90a3\u4f60\u53ef\u4ee5\u70b9\u4e2a\u8d5e\u652f\u6301\u6211\u4e00\u4e0bqwq\u3002\u5982\u679c\u4f60\u5bf9\u9898\u89e3\u6709\u4efb\u4f55\u95ee\u9898/\u8ba4\u4e3a\u6211\u7684\u9898\u89e3\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u79c1\u4fe1/\u5728\u8bc4\u8bba\u533a\u53d1\u51fa\u6765\uff0c\u5f53\u7136\u5982\u679c\u4f60\u5bf9\u6211\u7684\u9898\u89e3\u6709\u4efb\u4f55\u610f\u89c1/\u5efa\u8bae\u4e5f\u6b22\u8fce\u6307\u51fa\u3002\u6211\u4f1a\u5c3d\u6211\u5168\u529b\u628a\u6211\u9898\u89e3\u5199\u5230\u6700\u597d\u7684qwq**\n\n~~\u8fd9\u7bc7\u9898\u89e3\u5927\u90e8\u5206\u6211\u8ba4\u4e3a\u4eba\u4eba\u7686\u77e5\u7684\u4e1c\u897f\u6211\u5c31\u6ca1\u5b9a\u4e49\u4e86\uff0c\u5f80\u8c05\u89e3qwq~~\n",
        "postTime": 1590587762,
        "uid": 72419,
        "name": "WAPER4EVER",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4218 \u3010[CTSC2010]\u73e0\u5b9d\u5546\u3011"
    },
    {
        "content": "### $SAM$+\u70b9\u5206\u6cbb+\u6839\u53f7\u5206\u6cbb\n\n\u53c8\u88ab$SAM$\u795e\u4ed9\u9898\u6559\u80b2\u4e86\u4e00\u987f\u3002\u3002\u3002\n\n\u5b57\u7b26\u4e32\u4e0a\u6811\u4e86\uff0c\u770b\u8d77\u6765\u5f88\u4e0d\u53ef\u505a\u7684\u6837\u5b50\u3002\u7531\u4e8e\u672c\u9898\u9700\u8981\u7ef4\u62a4\u7684\u662f\u6240\u6709\u94fe\u7684\u4fe1\u606f\uff0c\u5bb9\u6613\u60f3\u5230\u70b9\u5206\u6cbb\u3002\n\n\u65e2\u7136\u8981\u4f7f\u7528\u70b9\u5206\u6cbb\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u9762\u4e34\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u548c\u4e24\u6761\u94fe\u5408\u5e76\u7684\u96be\u9898\u3002\n\n\u6bd4\u5982\u5f53\u524d\u8fde\u901a\u5757\u7684\u91cd\u5fc3\u4e3a$x$\uff0c\u8981\u7edf\u8ba1\u4fe1\u606f\u5e76\u5408\u5e76$u \\rightarrow x \\rightarrow v$\uff0c\u5982\u4f55\u64cd\u4f5c\u5462\uff1f\n\n\u6211\u4eec\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u5fc5\u7136\u9700\u8981\u628a\u4fe1\u606f\u96c6\u4e2d\u5728\u5408\u5e76\u70b9\u5904\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u94fe$u \\rightarrow x$\u5bf9\u5e94\u6a21\u5f0f\u4e32$T$\u7684\u533a\u95f4$[l,i]$\uff0c\u800c\u94fe$x \\rightarrow v$\u5bf9\u5e94\u6a21\u5f0f\u4e32$T$\u7684\u533a\u95f4$[i,r]$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728$i$\u5904\u7edf\u8ba1\u8d21\u732e\u3002\n\n\u8003\u8651$SAM$\u4e0a\u53ea\u6709\u540e\u7f00\u4f1a\u62e5\u6709\u4e00\u4e2a\u6307\u5b9a\u7684\u8282\u70b9\uff0c\u6211\u4eec\u5148\u8003\u8651$u \\rightarrow x$\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u5c06\u4f5c\u4e3a$[l,i]$\u51fa\u73b0\uff0c\u800c\u8282\u70b9$x$\u5c06\u4f5c\u4e3a$i$\u4f4d\u7f6e\u3002\n\n\u53d1\u73b0\u6211\u4eec\u904d\u5386\u5b50\u6811\u65f6\uff0c\u4e0d\u662f\u6211\u4eec\u4e60\u60ef\u7684\u5411\u540e\u63d2\u5165\u5b57\u7b26\uff0c\u800c\u662f\u5411\u524d\u63d2\u5165\u5b57\u7b26\u3002\n\n\u4f46\u662f\u8fd9\u4ec5\u4ec5\u662f\u67e5\u627e\u800c\u5df2\uff0c\u5f3a\u5927\u7684$SAM$\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8003\u8651\u539f\u4e32\u4e00\u5b9a\u662f\u65b0\u4e32\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u5bf9\u5e94\u4e8e$parent$\u6811\u4e0a\uff0c\u539f\u4e32\u6240\u5728\u4f4d\u7f6e$p$\u4e0e\u65b0\u4e32\u6240\u5728\u4f4d\u7f6e\u76f8\u540c\u6216\u662f\u5b83\u7684\u7236\u4eb2\u3002\u5f53\u957f\u5ea6\u5c0f\u4e8e$len_p$\u65f6\uff0c\u8981\u4e48\u5931\u914d\uff08\u53ea\u8981\u8bb0\u5f55$p$\u7684\u4efb\u610f\u4e00\u4e2a\u540e\u7f00\u4f4d\u7f6e\u5373\u53ef\uff09\uff0c\u8981\u4e48\u957f\u5ea6$+1$\uff1b\u800c\u957f\u5ea6\u5927\u4e8e$len_p$\u65f6\uff0c\u5b83\u53ef\u80fd\u5931\u914d\uff0c\u4e5f\u53ef\u80fd\u5230\u8fbe\u5b83\u7684\u5176\u4e2d\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\u3002\u6211\u4eec\u9700\u8981\u5efa\u7acb\u4e00\u79cd\u5168\u65b0\u7684\u8f6c\u79fb\u8fb9\uff0c\u8868\u793a\u4e00\u4e2a\u8282\u70b9\u5230\u8fbe\u6700\u5927\u957f\u5ea6\u4e4b\u540e\u52a0\u5165\u5b57\u7b26$c$\u4f1a\u5230\u8fbe\u54ea\u4e2a\u513f\u5b50\uff0c\u53ef\u4ee5\u5728\u5efa$SAM$\u65f6\u9884\u5904\u7406\uff08\u4e0d\u660e\u767d\u53ef\u4ee5\u770b\u4ee3\u7801\uff0c\u5f88\u5bb9\u6613\u7406\u89e3\uff09\u3002\n\n\u800c\u94fe$x \\rightarrow v$\u53ea\u662f$S$\u7684\u53cd\u4e32$S^r$\u4e0a\u540c\u6837\u7684\u64cd\u4f5c\u800c\u5df2\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u5408\u5e76\u7b54\u6848\u4e86\u3002\n\n\u5bf9\u4e8e$i$\u4f4d\u7f6e\uff0c\u6211\u4eec\u4f1a\u5728$S$\u7684$SAM$\u4e0a\u8bb0\u5f55\u5176\u540e\u7f00\uff0c\u5728$S^r$\u7684$SAM$\u4e0a\u8bb0\u5f55\u5176\u524d\u7f00\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u8981\u662f$i$\u7684\u524d\u7f00\u3001\u540e\u7f00\u90fd\u53ef\u4ee5\u8bb0\u5f55\u5165\u7b54\u6848\uff0c\u4e5f\u5c31\u662f$i$\u6240\u5728\u7684\u8282\u70b9\u4ee5\u53ca\u5176$parent$\u6811\u4e0a\u7684\u7956\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u6700\u540e\u4e00\u6b21\u5904\u7406\u7edf\u8ba1\u7b54\u6848\uff0c\u4e00\u6b21\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m+size)$\u3002\n\n\u4f46\u662f\u70b9\u5206\u6cbb\u9700\u8981\u6709\u53bb\u91cd\uff0c\u76f4\u63a5\u53bb\u91cd\u4e00\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f$O(m+size)$\u3002\n\n\u6211\u4eec\u4e00\u5206\u6790\u590d\u6742\u5ea6$O(n \\log n + nm)$\uff0c\u767d\u5e72\u4e86\uff1f\uff1f\uff1f\n\n**\u6839\u53f7\u5206\u6cbb**\u5c31\u51fa\u573a\u4e86\u3002\n\n\u9664\u4e86$O(m+size)$\u7684\u7edf\u8ba1\u7b97\u6cd5\uff0c\u6211\u4eec\u663e\u7136\u8fd8\u6709$O(size^2)$\u7684\u66b4\u529b\u3002\n\n\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c$B=\\sqrt n$\uff0c\u4f7f\u5f97\u5728$\\le B$\u65f6\u8dd1\u66b4\u529b\uff0c$>B$\u65f6\u8dd1$O(m+size)$\u7684\u7b97\u6cd5\u3002\n\n\u7531\u4e8e\u70b9\u5206\u6cbb\u4e00\u5c42\u5b50\u8282\u70b9\u5fc5\u7136\u6bd4\u4e0a\u4e00\u6b21\u81f3\u5c11\u51cf\u534a\uff0c\u90a3\u4e48\u6211\u4eec\u8ba1\u7b97\u4e00\u4e0b\uff0c\u7b2c$k$\u5c42\u7684\u5b50\u6811\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7$\\frac{n}{2^k}$\uff0c\u5728\u672c\u9898\u6570\u636e\u8303\u56f4\u4e2d\u7b2c$8$\u5c42\u7684\u6570\u636e\u5df2\u7ecf\u5c0f\u4e8e$\\sqrt n$\u4e86\uff0c\u8fd9\u65f6\u5019\u5b50\u6811\u4e2a\u6570\u4e0a\u9650\u5927\u7ea6\u662f$2^8=256$\uff0c\u53ef\u4ee5\u8fd1\u4f3c\u770b\u6210$\\sqrt n$\u4e86\u3002\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e3a$O(n \\sqrt n)$\u3002\n\n\u5bf9\u4e8e\u5927\u5b50\u6811\uff0c\u53ef\u4ee5\u628a\u5c0f\u5b50\u6811\u770b\u6210\u5b83\u4eec\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5927\u5b50\u6811\u4e2a\u6570\u4e0e\u5c0f\u5b50\u6811\u4e2a\u6570\u540c\u9636\uff0c\u8fd9\u4e00\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(m \\sqrt n)$\u3002\n\n\u73b0\u5728\u6211\u4eec\u7684\u53bb\u91cd\u4ecd\u7136\u5b58\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u95ee\u9898\u3002\n\n\u6211\u4eec\u9700\u8981\u89c2\u5bdf\u91cd\u590d\u7684\u662f\u54ea\u4e00\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u8bf4\u539f\u6765\u7684$u \\rightarrow x \\rightarrow v$\u7684$u,v$\u5728\u540c\u4e00\u5b50\u6811\u4e2d\u3002\n\n\u540c\u6837\u8fdb\u884c\u6839\u53f7\u5206\u6cbb\uff0c\u5bf9\u4e8e\u5927\u5b50\u6811\u4ecd\u7136\u6267\u884c$O(m+size)$\u7b97\u6cd5\u3002\u800c\u5c0f\u5b50\u6811\u53ef\u4ee5$O(size)$\u679a\u4e3e\u5b50\u6811\u4e2d\u4e00\u4e2a\u70b9\uff0c\u8bb0\u5f55\u5176\u5230\u8fbe\u5f53\u524d\u70b9\u5206\u5230\u7684\u91cd\u5fc3\u8282\u70b9\u7684\u8def\u5f84\uff0c\u7136\u540e\u8fd4\u56de\u540c\u4e00\u5b50\u6811\u4e2d\u8fdb\u884c\u66b4\u529b\u7edf\u8ba1\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(size^2)$\u3002\n\n\u8fdb\u884c\u5e73\u8861\u540e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n \\sqrt n)$\uff0c\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u6b64\u9898\u3002\n\n$Code:$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#define ll long long\n#define N 50005\nusing namespace std;\nconst int INF=1000000007;\nchar s[N],t[N];\nint n,m,x,y,block,rc[N],c[N];\nll ans=0;\nstruct edge\n{\n    int nxt,v;\n    edge (int Nxt=0,int V=0)\n    {\n        nxt=Nxt,v=V;\n    }\n}e[N << 1];\nint tot,fr[N];\nint lsz,rt,rtsz,sz[N],f[N],q[N];\nbool vis[N];\nvoid add(int x,int y)\n{\n    ++tot;\n    e[tot]=edge(fr[x],y),fr[x]=tot;\n}\nstruct SAM\n{\n    int cnt=1,lst=1,tr[N << 1][26],pre[N << 1],len[N << 1],R[N << 1];\n    int g[N << 1],a[N << 1],loc[N],ct[N << 1],son[N << 1][26];\n    char t[N];\n    void ins(int c,int I)\n    {\n        int p=lst,np=++cnt;\n        loc[I]=lst=np,len[np]=len[p]+1,R[np]=I,++ct[np];\n        for (;p && !tr[p][c];p=pre[p])\n            tr[p][c]=np;\n        if (!p)\n            pre[np]=1; else\n            {\n                int q=tr[p][c];\n                if (len[p]+1==len[q])\n                    pre[np]=q; else\n                    {\n                        int g=++cnt;\n                        memcpy(tr[g],tr[q],sizeof(tr[q]));\n                        len[g]=len[p]+1,pre[g]=pre[q],R[g]=R[q];\n                        for (;p && tr[p][c]==q;p=pre[p])\n                            tr[p][c]=g;\n                        pre[q]=pre[np]=g;\n                    }\n            }\n    }\n    void build()\n    {\n        for (int i=1;i<=m;++i)\n            ins(t[i]-'a',i);\n        memset(c,0,(m+1)*sizeof(int));\n        for (int i=1;i<=cnt;++i)\n            ++c[len[i]];\n        for (int i=1;i<=m;++i)\n            c[i]+=c[i-1];\n        for (int i=1;i<=cnt;++i)\n            a[c[len[i]]--]=i;\n        for (int i=cnt;i>=2;--i)\n        {\n            int u=a[i];\n            ct[pre[u]]+=ct[u];\n            if (pre[u]!=1)\n                son[pre[u]][t[R[u]-len[pre[u]]]-'a']=u;\n        }\n    }\n    int nxt(int u,int L,char c)\n    {\n        if (len[u]>=L)\n            return (t[R[u]-L+1]==c)?u:0;\n        return son[u][c-'a'];\n    }\n    void clear()\n    {\n        memset(g,0,(cnt+1)*sizeof(int));\n    }\n    void dfs(int u,int F,int Len,int st)\n    {\n        if (!st)\n            return;\n        ++g[st];\n        for (int i=fr[u];i;i=e[i].nxt)\n        {\n            int v=e[i].v;\n            if (v==F || vis[v])\n                continue;\n            dfs(v,u,Len+1,nxt(st,Len+1,s[v]));\n        }\n    }\n    void calc()\n    {\n        for (int i=2;i<=cnt;++i)\n            g[a[i]]+=g[pre[a[i]]];\n    }\n}s1,s2;\nvoid findrt(int u,int F,int rn)\n{\n    int mx=-1;\n    sz[u]=1;\n    for (int i=fr[u];i;i=e[i].nxt)\n    {\n        int v=e[i].v;\n        if (v==F || vis[v])\n            continue;\n        findrt(v,u,rn);\n        sz[u]+=sz[v],mx=max(mx,sz[v]);\n    }\n    mx=max(mx,rn-sz[u]);\n    if (mx<rtsz)\n        rtsz=mx,rt=u;\n}\nvoid getrt(int u,int rn)\n{\n    rtsz=INF,findrt(u,0,rn);\n}\nvoid dfs1(int u,int F)\n{\n    q[++q[0]]=u;\n    for (int i=fr[u];i;i=e[i].nxt)\n    {\n        int v=e[i].v;\n        if (v==F || vis[v])\n            continue;\n        f[v]=u;\n        dfs1(v,u);\n    }\n}\nvoid dfs2(int u,int F,int st,int t)\n{\n    if (!st)\n        return;\n    ans+=t*s1.ct[st];\n    for (int i=fr[u];i;i=e[i].nxt)\n    {\n        int v=e[i].v;\n        if (v==F || vis[v])\n            continue;\n        dfs2(v,u,s1.tr[st][rc[v]],t);\n    }\n}\nvoid calc(int u,int c,int t)\n{\n    s1.clear(),s2.clear();\n    if (t==1)\n    {\n        s1.dfs(u,0,1,s1.tr[1][rc[u]]);\n        s2.dfs(u,0,1,s2.tr[1][rc[u]]);\n    } else\n    {\n        s1.dfs(u,0,2,s1.nxt(s1.tr[1][c],2,s[u]));\n        s2.dfs(u,0,2,s2.nxt(s2.tr[1][c],2,s[u]));\n    }\n    s1.calc(),s2.calc();\n    for (int i=1;i<=m;++i)\n        ans+=(ll)t*s1.g[s1.loc[i]]*s2.g[s2.loc[m-i+1]];\n}\nvoid calc2(int u,int rt)\n{\n    q[0]=0,f[u]=rt,dfs1(u,0);\n    for (int i=1;i<=q[0];++i)\n    {\n        int t=q[i],st=1;\n        while (t!=rt)\n            st=s1.tr[st][rc[t]],t=f[t];\n        st=s1.tr[st][rc[t]],st=s1.tr[st][rc[u]];\n        dfs2(u,0,st,-1);\n    }\n}\nvoid solve(int u)\n{\n    if (lsz<=block)\n    {\n        q[0]=0,dfs1(u,0);\n        for (int i=1;i<=q[0];++i)\n            dfs2(q[i],0,s1.tr[1][rc[q[i]]],1);\n        return;\n    }\n    int tsz=lsz;\n    vis[u]=true;\n    calc(u,1,1);\n    for (int i=fr[u];i;i=e[i].nxt)\n    {\n        int v=e[i].v;\n        if (vis[v])\n            continue;\n        int ts=(sz[u]<sz[v])?tsz-sz[u]:sz[v];\n        if (ts>block)\n            calc(v,rc[u],-1); else\n            calc2(v,u);\n    }\n    for (int i=fr[u];i;i=e[i].nxt)\n    {\n        int v=e[i].v;\n        if (vis[v])\n            continue;\n        lsz=(sz[u]<sz[v])?tsz-sz[u]:sz[v];\n        getrt(v,lsz);\n        solve(rt);\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<n;++i)\n    {\n        scanf(\"%d%d\",&x,&y);\n        add(x,y),add(y,x);\n    }\n    scanf(\"%s%s\",s+1,t+1);\n    for (int i=1;i<=n;++i)\n        rc[i]=s[i]-'a';\n    block=(int)sqrt(n);\n    for (int i=1;i<=m;++i)\n        s1.t[i]=t[i],s2.t[i]=t[m-i+1];\n    s1.build(),s2.build();\n    lsz=n,getrt(1,n);\n    solve(rt);\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1608035817,
        "uid": 10341,
        "name": "GK0328",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4218 \u3010[CTSC2010]\u73e0\u5b9d\u5546\u3011"
    },
    {
        "content": "\u9996\u5148\u5bf9\u7279\u5f81\u5b57\u7b26\u4e32\u5efa $SAM$\uff0c\u6765\u5b9e\u73b0\u5bf9\u5b50\u4e32\u7684\u5339\u914d\u3002\n\n\u6709\u4e00\u4e2a $O(n^2)$ \u7684\u66b4\u529b\uff0c\u5206\u522b\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6839\u8fdb\u884c $dfs$\uff0c\u904d\u5386\u6811\u65f6\u8bb0\u5f55\u5f53\u524d\u5b57\u7b26\u4e32\u5728 $SAM$ \u4e0a\u5339\u914d\u5230\u7684\u8282\u70b9\u5373\u53ef\u3002\n\n\u8003\u8651\u7528\u70b9\u5206\u6cbb\u6765\u89e3\u51b3\u672c\u9898\u8fd9\u6837\u7684\u6811\u4e0a\u8def\u5f84\u7edf\u8ba1\u95ee\u9898\u3002\u5bf9\u4e8e\u5f53\u524d\u7684\u5206\u6cbb\u91cd\u5fc3 $x$\uff0c\u7edf\u8ba1\u8fde\u901a\u5757\u4e2d\u7ecf\u8fc7 $x$ \u7684\u8def\u5f84\u7684\u8d21\u732e\u3002\u7ecf\u8fc7 $x$ \u7684\u8def\u5f84\u62c6\u5206\u4e3a $x$ \u5b50\u6811\u5185\u4e00\u4e2a\u70b9\u5230 $x$ \u7684\u8def\u5f84\u548c $x$ \u5230 $x$ \u5b50\u6811\u5185\u4e00\u4e2a\u70b9\u7684\u8def\u5f84\u3002\u56e0\u4e3a $SAM$ \u53ef\u4ee5\u7528 $endpos$ \u7edf\u8ba1\u4ee5 $x$ \u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u7ed3\u675f\u7684\u5b50\u4e32\uff0c\u6240\u4ee5\u5bf9\u7279\u5f81\u5b57\u7b26\u4e32\u7684\u53cd\u4e32\u4e5f\u5efa\u51fa $SAM$\uff0c\u628a\u7b2c\u4e8c\u79cd\u8def\u5f84\u4e5f\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u8def\u5f84\u6765\u4fbf\u4e8e\u7edf\u8ba1\u3002\n\n\u4ece $x$ \u51fa\u53d1 $dfs$ \u7edf\u8ba1\u8def\u5f84\u65f6\uff0c\u5230\u8fbe\u4e00\u4e2a\u8282\u70b9\u540e\u8981\u5f80\u5f53\u524d\u5b57\u7b26\u4e32\u524d\u7aef\u52a0\u5165\u8be5\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\uff0c\u76f4\u63a5\u7528 $SAM$ \u662f\u65e0\u6cd5\u5904\u7406\u5339\u914d\u7684\u3002\u53d1\u73b0\u5728 $SAM$ \u5bf9\u5e94\u7684 $Parent$ \u6811\u4e0a\uff0c\u4e00\u4e2a\u70b9\u5230\u5176\u513f\u5b50\u8282\u70b9\uff0c\u5c31\u662f\u5728\u5176\u5bf9\u5e94\u7684\u5b50\u4e32\u524d\u7aef\u52a0\u5165\u5b57\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u5904\u7406\u51fa $Parent$ \u6811\u4e0a\u6bcf\u4e2a\u70b9\u52a0\u5165\u5b57\u7b26\u540e\u5bf9\u5e94\u7684\u513f\u5b50\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 $Parent$ \u6811\u6765\u5b9e\u73b0\u524d\u7aef\u52a0\u5165\u5b57\u7b26\u6765\u5339\u914d\u4e86\u3002\u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u5efa\u51fa\u4e86\u540e\u7f00\u6811\u3002\n\n\u4e24\u6761\u8def\u5f84\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8981\u4fdd\u8bc1\u662f\u5728\u7279\u5f81\u5b57\u7b26\u4e32\u4e0a\u662f\u76f8\u90bb\u7684\uff0c\u56e0\u6b64\u5728 $Parent$ \u6811\u4e0a\u6253\u6807\u8bb0\uff0c\u7edf\u8ba1\u65f6\u904d\u5386\u6574\u68f5 $Parent$ \u6811\u6765\u4f7f\u6807\u8bb0\u4e0b\u653e\u5230\u513f\u5b50\uff0c\u5bf9\u4e8e\u7279\u5f81\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u4e24\u79cd\u8def\u5f84\u7684\u65b9\u6848\u76f8\u4e58\u6765\u8d21\u732e\u7b54\u6848\u3002\n\n\u76f4\u63a5\u70b9\u5206\u6cbb\u7684\u590d\u6742\u5ea6\u662f $O(n \\log n + nm)$ \u7684\uff0c\u4ecd\u7136\u65e0\u6cd5\u63a5\u53d7\uff0c\u8003\u8651\u7ed3\u5408 $O(n^2)$ \u7684\u66b4\u529b\u8fdb\u884c\u6839\u53f7\u5206\u6cbb\u3002\u70b9\u5206\u6cbb\u65f6\uff0c\u8fde\u901a\u5757\u5927\u5c0f $\\leqslant \\sqrt n$  \u65f6\u91c7\u53d6 $O(n^2)$ \u66b4\u529b\uff0c\u5927\u5c0f $> \\sqrt n$ \u65f6\u91c7\u53d6\u7edf\u8ba1\u8def\u5f84\u8d21\u732e\u3002\n\n\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u6765\u8fdb\u884c\u590d\u6742\u5ea6\u5206\u6790\u3002\u8fde\u901a\u5757\u5927\u5c0f $\\leqslant \\sqrt n$  \u7684\u60c5\u51b5\u590d\u6742\u5ea6\u4e3a $O(n \\sqrt n)$\u3002\u8003\u8651\u70b9\u5206\u6cbb\u8fdb\u884c\u5230\u7b2c $k$ \u5c42\u65f6\uff0c\u6700\u5927\u7684\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $\\frac{n}{2^k}$\uff0c\u8fde\u901a\u5757\u4e2a\u6570\u4e3a $2^k$\uff0c\u82e5\u9650\u5236\u8fde\u901a\u5757\u5927\u5c0f\u6700\u5c0f\u4e3a $\\sqrt n$\uff0c\u8fde\u901a\u5757\u4e2a\u6570\u7684\u7ea7\u522b\u5c31\u4e3a $\\sqrt n$ \u4e86\uff0c\u6240\u4ee5\u8fde\u901a\u5757\u5927\u5c0f $> \\sqrt n$  \u7684\u60c5\u51b5\u590d\u6742\u5ea6\u4e3a $O(m \\sqrt n)$\u3002\u5f97\u603b\u590d\u6742\u5ea6\u4e3a $O((n+m) \\sqrt n)$\u3002\n\n\u6ce8\u610f\u7edf\u8ba1\u8def\u5f84\u8d21\u732e\u65f6\u8fd8\u9700\u5bb9\u65a5\uff0c\u51cf\u53bb\u4e24\u6761\u8def\u5f84\u6765\u81ea\u540c\u4e00\u4e2a\u5b50\u6811\u7684\u60c5\u51b5\u3002\u5bb9\u65a5\u65f6\u4e5f\u9700\u8981\u5bf9\u6bcf\u4e2a\u513f\u5b50\u8fdb\u884c\u6839\u53f7\u5206\u6cbb\u6765\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100010\nusing namespace std;\ntypedef long long ll;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,S,root,tot,goal,rt;\nll ans;\nint siz[maxn],ma[maxn];\nbool vis[maxn];\nchar c[maxn],s[maxn];\nstruct edge\n{\n    int to,nxt;\n}e[maxn];\nint head[maxn],edge_cnt;\nvoid add(int from,int to)\n{\n    e[++edge_cnt]=(edge){to,head[from]};\n    head[from]=edge_cnt;\n}\nstruct SAM\n{\n    int tot=1,root=1,las=1;\n    int fa[maxn],ch[maxn][30],son[maxn][30],len[maxn],siz[maxn],pos[maxn],bel[maxn];\n    ll tag[maxn];\n    char s[maxn];\n    vector<int> ve[maxn];\n    void insert(int c,int id)\n    {\n        int p=las,np=las=++tot;\n        len[np]=len[p]+1,siz[np]=1,pos[np]=id,bel[id]=np;\n        while(p&&!ch[p][c]) ch[p][c]=np,p=fa[p];\n        if(!p) fa[np]=root;\n        else\n        {\n            int q=ch[p][c];\n            if(len[q]==len[p]+1) fa[np]=q;\n            else\n            {\n                int nq=++tot;\n                memcpy(ch[nq],ch[q],sizeof(ch[q]));\n                len[nq]=len[p]+1,fa[nq]=fa[q],fa[q]=fa[np]=nq;\n                while(ch[p][c]==q) ch[p][c]=nq,p=fa[p];\n            }\n        }\n    }\n    void dfs(int x)\n    {\n        for(int i=0;i<ve[x].size();++i)\n        {\n            int y=ve[x][i];\n            dfs(y),siz[x]+=siz[y];\n            pos[x]=pos[y],son[x][s[pos[y]-len[x]]]=y;\n        }\n    }\n    void build()\n    {\n        for(int i=1;i<=m;++i) insert(s[i],i);\n        for(int i=2;i<=tot;++i) ve[fa[i]].push_back(i);\n        dfs(root);\n    }\n    void match(int x,int fa,int p,int lenth)\n    {\n        if(lenth==len[p]) p=son[p][c[x]];\n        else if(s[pos[p]-lenth]!=c[x]) p=0;\n        if(!p) return;\n        tag[p]++;\n        for(int i=head[x];i;i=e[i].nxt)\n        {\n            int y=e[i].to;\n            if(vis[y]||y==fa) continue;\n            match(y,x,p,lenth+1);\n        }\n    }\n    void update(int x)\n    {\n        for(int i=0;i<ve[x].size();++i)\n            tag[ve[x][i]]+=tag[x],update(ve[x][i]);\n    }\n    void clear()\n    {\n        for(int i=1;i<=tot;++i) tag[i]=0;\n    }\n}A,B;\nvoid dfs_root(int x,int fa)\n{\n    siz[x]=1,ma[x]=0;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]||y==fa) continue;\n        dfs_root(y,x),siz[x]+=siz[y];\n        ma[x]=max(ma[x],siz[y]);\n    }\n    ma[x]=max(ma[x],tot-siz[x]);\n    if(ma[x]<ma[root]) root=x;\n}\nvoid dfs_get(int x,int fa,int p,int type)\n{\n    p=A.ch[p][c[x]];\n    if(!p) return;\n    ans+=A.siz[p]*type;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]||y==fa) continue;\n        dfs_get(y,x,p,type);\n    }\n}\nvoid dfs_del(int x,int fa,int p)\n{\n\tif(x!=goal) p=A.ch[p][c[x]];\n    else\n    {\n        p=A.ch[p][c[x]],p=A.ch[p][c[rt]];\n        if(p) dfs_get(x,0,p,-1);\n        return;\n    }\n    if(!p) return;\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]||y==fa) continue;\n        dfs_del(y,x,p);\n    }\n}\nvoid dfs_find(int x,int fa,int type)\n{\n\tif(type) dfs_get(x,0,1,1);\n\telse dfs_del(x,0,1);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]||y==fa) continue;\n        dfs_find(y,x,type);\n    }\n}\nvoid calc(int x,int fa)\n{\n    A.clear(),B.clear();\n    if(!fa) A.match(x,fa,1,0),B.match(x,fa,1,0);\n    else A.match(x,fa,A.ch[1][c[fa]],1),B.match(x,fa,B.ch[1][c[fa]],1);\n    A.update(1),B.update(1);\n    for(int i=1;i<=m;++i)\n\t{\n\t\tif(!fa) ans+=A.tag[A.bel[i]]*B.tag[B.bel[m-i+1]];\n\t\telse ans-=A.tag[A.bel[i]]*B.tag[B.bel[m-i+1]];\n\t}\n}\nvoid solve(int x)\n{\n    if(tot<=S)\n    {\n        dfs_find(x,0,1);\n        return;\n    }\n    int now=tot;\n    vis[x]=true,calc(x,0);\n    for(int i=head[x];i;i=e[i].nxt)\n    {\n        int y=e[i].to;\n        if(vis[y]) continue;\n        root=0,tot=siz[y];\n        if(siz[y]>siz[x]) tot=now-siz[x];\n\t\tif(tot<=S) rt=x,goal=y,dfs_find(y,x,0);\n\t\telse calc(y,x);\n        dfs_root(y,x),solve(root);\n    }\n} \nint main()\n{\n    read(n),read(m),S=sqrt(n);\n    for(int i=1;i<n;++i)\n    {\n        int x,y;\n        read(x),read(y);\n        add(x,y),add(y,x);\n    }\n    scanf(\"%s%s\",c+1,s+1);\n    for(int i=1;i<=n;++i) c[i]-='a';\n    for(int i=1;i<=m;++i) s[i]-='a',A.s[i]=s[i],B.s[m-i+1]=s[i];\n    A.build(),B.build(),tot=ma[0]=n,dfs_root(1,0),solve(root);\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1596340566,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4218 \u3010[CTSC2010]\u73e0\u5b9d\u5546\u3011"
    },
    {
        "content": "## Description\n\n\u7ed9\u51fa\u4e00\u68f5\u5305\u542b $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u6709\u4e00\u4e2a\u5b57\u7b26\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $m$ \u7684\u6587\u672c\u4e32\u3002\n\n\u6c42\u6811\u4e0a\u6240\u6709\u8def\u5f84\uff0c\u7ecf\u8fc7\u7684\u6240\u6709\u5b57\u7b26\u6309\u987a\u5e8f\u8fde\u63a5\u5f62\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5728\u6587\u672c\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leq n, m \\leq 5 \\times 10^4$\uff0c\u7ed9\u51fa\u7684\u5b57\u7b26\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002  \n\u65f6\u7a7a\u9650\u5236\uff1a$8000 \\ \\mathrm{ms} / 500 \\ \\mathrm{MiB}$\u3002\n\n## Solution\n\n\u8fd0\u7528\u70b9\u5206\u6cbb\u7edf\u8ba1\u8def\u5f84\u7b54\u6848\u3002\u5bf9\u4e8e\u5f53\u524d\u5927\u5c0f\u4e3a $\\mathbf{size}$ \u7684\u5206\u6cbb\u5757\uff0c\u6709\u4e24\u79cd\u5185\u6838\u4e0d\u540c\u7684\u7b97\u6cd5\u3002\n\n### \u7b97\u6cd5\u4e00\uff1a$\\mathcal{O}(\\mathbf{size}^2)$\n\n\u5c06\u539f\u4e32\u7684 SAM \u5efa\u51fa\u3002\n\n\u76f4\u63a5\u8ba1\u7b97\u5f53\u524d\u5206\u6cbb\u5757\u7684\u6240\u6709\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u679a\u4e3e\u5f53\u524d\u5206\u6cbb\u5757\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8ba1\u7b97\u4ee5\u5f53\u524d\u70b9\u4e3a\u8d77\u70b9\u7684\u6240\u6709\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\n\n\u53ef\u4ee5\u4ece\u8be5\u8d77\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u7ef4\u62a4\u8d77\u70b9\u5230\u5f53\u524d\u70b9\u6240\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u5728 SAM \u4e0a\u7684\u72b6\u6001\uff0c\u5219\u5f53\u524d\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5373\u4e3a\u8be5\u72b6\u6001\u6240\u5bf9\u5e94\u7684 $\\mathrm{endpos}$ \u96c6\u5408\u5927\u5c0f\u3002\n\n### \u7b97\u6cd5\u4e8c\uff1a$\\mathcal{O}(\\mathbf{size} + m)$\n\n\u5c06\u539f\u4e32\u3001\u53cd\u4e32\u7684 SAM \u5efa\u51fa\u3002\n\n\u8003\u8651\u8ba1\u7b97\u8de8\u8d8a\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3 $u$ \u7684\u6240\u6709\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c\u5176\u4ed6\u60c5\u51b5\u9012\u5f52\u6c42\u89e3\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8de8\u8d8a\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3 $u$ \u7684\u8def\u5f84 $x \\to u \\to y$\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u5176\u62c6\u6210 $x \\to u$ \u7684\u524d\u7f00\u6bb5\u4e0e $u \\to y$ \u7684\u540e\u7f00\u6bb5\u3002\n\n\u8003\u8651\u8ba1\u7b97\u51fa\u4e24\u4e2a\u6570\u7ec4 $\\mathrm{le}(i), \\mathrm{rg}(i)$ \u5206\u522b\u8868\u793a\uff0c\u5728\u6a21\u5f0f\u4e32\u4e2d\u4ee5\u4f4d\u7f6e $i$ \u4e3a\u7ed3\u5c3e\u7684\u524d\u7f00\u6bb5\u4e2a\u6570\u3001\u4ee5\u4f4d\u7f6e $i$ \u4e3a\u5f00\u5934\u7684\u540e\u7f00\u6bb5\u4e2a\u6570\u3002\u5219\u8de8\u8d8a\u5f53\u524d\u5206\u6cbb\u91cd\u5fc3\u7684\u6240\u6709\u8def\u5f84\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5373\u4e3a $\\sum_{i = 1}^m \\mathrm{le}(i) \\cdot \\mathrm{rg}(i)$\u3002\n\n\u4f46\u7531\u4e8e\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u989d\u5916\u8ba1\u7b97\u5230\u6765\u81ea\u540c\u4e00\u9897\u5b50\u6811\u7684\u524d\u7f00\u4e32\u3001\u540e\u7f00\u4e32\u7ec4\u5408\u7684\u8d21\u732e\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u5bf9\u6240\u6709\u7684\u5b50\u5206\u6cbb\u5757\u8fdb\u884c\u76f8\u4f3c\u7684\u7edf\u8ba1\uff0c\u51cf\u53bb\u9519\u8bef\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u53ef\u4ee5\u4ece\u5206\u6cbb\u91cd\u5fc3\u5f00\u59cb\u641c\u7d22\uff0c\u7ef4\u62a4\u5f53\u524d\u70b9\u5230\u5206\u6cbb\u91cd\u5fc3\u6240\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u5728\u6b63\u4e32\u3001\u53cd\u4e32 SAM \u4e0a\u7684\u72b6\u6001\uff0c\u5219\u5728\u6b63\u4e32 SAM \u91cc\u7684\u72b6\u6001\u6240\u5bf9\u5e94 $\\mathrm{endpos}$ \u96c6\u5408\u91cc\u7684 $\\mathrm{le}(i)$\uff0c\u53cd\u4e32 SAM \u91cc\u7684\u72b6\u6001\u6240\u5bf9\u5e94 $\\mathrm{endpos}$ \u96c6\u5408\u91cc\u7684 $\\mathrm{rg}(i)$ \u90fd\u8981\u52a0\u4e00\u3002\u5728\u5bf9\u5e94\u72b6\u6001\u4e0a\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0\uff0c\u6700\u540e\u81ea\u4e0a\u800c\u4e0b\u4f20\u9012\u4e00\u904d\u5373\u53ef\u3002\n\n> \u5728\u7ef4\u62a4\u5f53\u524d\u70b9\u5230\u5206\u6cbb\u91cd\u5fc3\u6240\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u5728 SAM \u4e0a\u7684\u72b6\u6001\u65f6\uff0c\u6d89\u53ca\u5230\u5728\u4e00\u4e2a\u72b6\u6001\u7684\u5f00\u5934\u63d2\u5165\u5b57\u7b26\uff0cSAM \u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002\u5177\u4f53\u5730\uff0c\u5728\u52a0\u5b57\u7b26\u4e4b\u524d\uff1a\n>\n> - \u82e5\u5f53\u524d\u4e32\u7684\u957f\u5ea6\u7b49\u4e8e\u5f53\u524d\u72b6\u6001\u7684 $\\mathrm{maxl}$\uff0c\u5219\u76f8\u5f53\u4e8e\u8981\u5728 parent \u6811\u4e0a\u5411\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\u8d70\u3002\u5728\u5efa parent \u6811\u7684\u65f6\u5019\uff0c\u9884\u5904\u7406\u6bcf\u4e00\u4e2a\u72b6\u6001\u524d\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u80fd\u8d70\u5230\u54ea\u4e2a\u513f\u5b50\u5373\u53ef\u3002\n> - \u82e5\u5f53\u524d\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8e\u5f53\u524d\u72b6\u6001\u7684 $\\mathrm{maxl}$\uff0c\u5219\u76f8\u5f53\u4e8e\u8981\u8003\u8651\u5f53\u524d\u72b6\u6001\u662f\u5426\u53ef\u4ee5\u5bb9\u7eb3\u65b0\u4e32\uff0c\u53ea\u9700\u5224\u65ad\u65b0\u52a0\u7684\u5b57\u7b26\u662f\u5426\u4e0e\u539f\u4e32\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u5339\u914d\u5373\u53ef\u3002\n\n### \u7b97\u6cd5\u4e00 & \u4e8c\n\n\u5728\u4e0b\u6587\u7684\u63a2\u8ba8\u4e2d\uff0c\u89c6 $n, m$ \u540c\u9636\u3002\n\n\u6ce8\u610f\u5230\u7b97\u6cd5\u4e00\u5728 $\\mathbf{size}$ \u8f83\u5c0f\u65f6\u8868\u73b0\u8f83\u597d\uff0c\u7b97\u6cd5\u4e8c\u5728 $\\mathbf{size}$ \u8f83\u5927\u65f6\u8868\u73b0\u8f83\u597d\u3002\u4e0d\u59a8\u5c06\u4e24\u79cd\u7b97\u6cd5\u76f8\u7ed3\u5408\u3002\n\n\u9488\u5bf9\u5f53\u524d\u5206\u6cbb\u5757\u7684\u5927\u5c0f $\\mathbf{size}$ \u8fdb\u884c\u5e73\u8861\u89c4\u5212\u3002\u53d6\u9608\u503c $B$\uff0c\u5f53 $\\mathbf{size} \\leq B$ \u65f6\u4f7f\u7528\u7b97\u6cd5\u4e00\uff0c$\\mathbf{size} > B$ \u65f6\u4f7f\u7528\u7b97\u6cd5\u4e8c\u3002\n\n\u6ce8\u610f\u5230\u5728\u70b9\u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u8981\u5728\u70b9\u5206\u6811\u4e0a\u904d\u5386 $\\mathcal{O}(\\frac{n}{B})$ \u4e2a\u8282\u70b9\uff0c\u5373\u53ef\u4fdd\u8bc1\u5206\u6cbb\u51fa\u7684\u6700\u5927\u5b50\u6811\u5927\u5c0f\u4e3a $\\mathcal{O}(B)$ \u7684\uff0c\u5e76\u4e14\u8fd9\u4e9b\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570\u4e5f\u4e3a $\\mathcal{O}(\\frac{n}{B})$ \u7684\u3002\u56e0\u6b64\uff1a\n\n- \u7b97\u6cd5\u4e00\u5f00\u9500\uff1a$\\mathcal{O}(B^2) \\cdot \\mathcal{O}(\\frac{n}{B}) = \\mathcal{O}(nB)$\u3002\n- \u7b97\u6cd5\u4e8c\u5f00\u9500\uff1a$\\mathcal{O}(n) \\cdot \\mathcal{O}(\\frac{n}{B}) + \\mathcal{O}(n \\log \\frac{n}{B}) = \\mathcal{O}(\\frac{n^2}{B})$\u3002\n\n\u53d6 $B = \\sqrt{n}$\uff0c\u53ef\u4ee5\u53d6\u5f97\u7406\u8bba\u6700\u4f18\u590d\u6742\u5ea6 $\\mathcal{O}(n \\sqrt{n})$\u3002\u53d6\u5f97\u6700\u4f18\u8fd0\u884c\u6548\u7387\uff0c\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u5fae\u8c03\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u6ee1\u8db3 $\\mathbf{size} > B$ \u7684\u5206\u6cbb\u5757\u8fd0\u7528\u4e86\u7b97\u6cd5\u4e8c\u540e\uff0c\u8981\u5bf9\u6ee1\u8db3 $\\mathbf{size}' \\leq B$ \u7684\u5b50\u5206\u6cbb\u5757\u8fdb\u884c\u7c7b\u7b97\u6cd5\u4e00\u7684\u5bb9\u65a5\u3002\u5426\u5219\u4f1a\u88ab\u83ca\u82b1\u56fe\u5361\u6389\u3002\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n\nusing std::vector;\n\ntemplate <class T>\ninline void read(T &x) {\n\tstatic char s;\n\twhile (s = getchar(), s < '0' || s > '9');\n\tx = s - '0';\n\twhile (s = getchar(), s >= '0' && s <= '9') x = x * 10 + s - '0';\n}\n\nconst int N = 50100;\n\nint n, m, Bn;\n\nint tot, head[N], ver[N * 2], Next[N * 2];\nvoid add_edge(int u, int v) {\n\tver[++ tot] = v;    Next[tot] = head[u];    head[u] = tot;\n}\n\nchar a[N], tex[N];\n\nint A_sz, A_rt;\nint sz[N], mp[N];\nbool ban[N];\n\nint temp_sz[N];\nint Get_sz(int u, int fu) {\n\tint cnt = 1;\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (v == fu || ban[v]) continue;\n\t\tcnt += Get_sz(v, u);\n\t}\n\treturn cnt;\n}\n\nvoid Get_rt(int u, int fu) {\n\tsz[u] = 1, mp[u] = 0;\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (v == fu || ban[v]) continue;\n\t\tGet_rt(v, u);\n\t\tsz[u] += sz[v];\n\t\tif (sz[v] > mp[u]) mp[u] = sz[v];\n\t}\n\n\tif (A_sz - sz[u] > mp[u]) mp[u] = A_sz - sz[u];\n\tif (A_rt == 0 || mp[u] < mp[A_rt]) A_rt = u;\n}\n\nstruct SAM {\n\tstatic const int SIZE = N * 2;\n\n\tint strL, s[N];\n\n\tint cT = 1, Last = 1;\n\tstruct node {\n\t\tint trans[26];\n\t\tint link, maxl;\n\t} t[SIZE];\n\n\tint pos[SIZE], cnt[SIZE];\n\n\tvector<int> go[SIZE];\n\tint net[SIZE][26];\n\n\tint extend(int c) {\n\t\tint p = Last,\n\t\t\tnp = Last = ++ cT;\n\n\t\ts[pos[np] = ++ strL] = c;\n\t\tcnt[np] ++;\n\n\t\tt[np].maxl = t[p].maxl + 1;\n\n\t\tfor (; p && t[p].trans[c] == 0; p = t[p].link) t[p].trans[c] = np;\n\n\t\tif (!p) {\n\t\t\tt[np].link = 1;\n\t\t} else {\n\t\t\tint q = t[p].trans[c];\n\n\t\t\tif (t[q].maxl == t[p].maxl + 1) {\n\t\t\t\tt[np].link = q;\n\t\t\t} else {\n\t\t\t\tint nq = ++ cT;\n\n\t\t\t\tt[nq] = t[q], t[nq].maxl = t[p].maxl + 1, pos[nq] = pos[q];\n\t\t\t\tt[np].link = t[q].link = nq;\n\t\t\t\tfor (; p && t[p].trans[c] == q; p = t[p].link) t[p].trans[c] = nq;\n\t\t\t}\n\t\t}\n\n\t\treturn np;\n\t}\n\n\tvoid scout(int u) {\n\t\tfor (int v : go[u]) {\n\t\t\tnet[u][s[pos[v] - t[u].maxl]] = v;\n\t\t\tscout(v);\n\t\t\tcnt[u] += cnt[v];\n\t\t}\n\t}\n\n\tvoid build() {\n\t\tfor (int u = 2; u <= cT; u ++) go[t[u].link].push_back(u);\n\t\tscout(1);\n\t}\n\n\tint tag[SIZE];\n\n\tvoid remake() {\n\t\tfor (int i = 1; i <= cT; i ++) tag[i] = 0;\n\t}\n\n\tvoid mark(int u, int fu, int p, int curL) {\n\t\tif (curL == t[p].maxl) p = net[p][a[u] - 'a'];\n\t\telse if (s[pos[p] - curL] != a[u] - 'a') p = 0;\n\n\t\tif (p == 0) return;\n\n\t\ttag[p] ++;\n\n\t\tfor (int i = head[u]; i; i = Next[i]) {\n\t\t\tint v = ver[i];\n\t\t\tif (v == fu || ban[v]) continue;\n\t\t\tmark(v, u, p, curL + 1);\n\t\t}\n\t}\n\n\tvoid spread(int u) {\n\t\ttag[u] += tag[t[u].link];\n\t\tfor (int v : go[u]) spread(v);\n\t}\n} A, B;\n\nint posA[N], posB[N];\n\nlong long ans;\n\nvoid path_calc(int u, int fu, int p, int opt) {\n\tp = A.t[p].trans[a[u] - 'a'];\n\tif (p == 0) return;\n\n\tans += opt * A.cnt[p];\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (v == fu || ban[v]) continue;\n\t\tpath_calc(v, u, p, opt);\n\t}\n}\n\nvoid work_sm(int u, int fu) {\n\tpath_calc(u, 0, 1, 1);\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (v == fu || ban[v]) continue;\n\t\twork_sm(v, u);\n\t}\n}\n\nvoid work_bg(int u, int fu, int opt) {\n\tA.remake(), B.remake();\n\n\tif (fu == 0)\n\t\tA.mark(u, 0, 1, 0),\n\t\tB.mark(u, 0, 1, 0);\n\telse\n\t\tA.mark(u, fu, A.t[1].trans[a[fu] - 'a'], 1),\n\t\tB.mark(u, fu, B.t[1].trans[a[fu] - 'a'], 1);\n\n\tA.spread(1), B.spread(1);\n\n\tfor (int i = 1; i <= m; i ++) ans += 1ll * opt * A.tag[posA[i]] * B.tag[posB[i]];\n}\n\nint A_son;\nvoid plus_bg(int u, int fu, int p, int curL) {\n\tif (curL == A.t[p].maxl) p = A.net[p][a[u] - 'a'];\n\telse if (tex[A.pos[p] - curL] != a[u]) p = 0;\n\n\tif (p == 0) return;\n\n\tpath_calc(A_son, A_rt, p, -1);\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (v == fu || ban[v]) continue;\n\t\tplus_bg(v, u, p, curL + 1);\n\t}\n}\n\nvoid solve(int u) {\n\tif (A_sz <= Bn) {\n\t\twork_sm(u, 0);\n\n\t\tban[u] = 1;\n\t\treturn;\n\t} else {\n\t\twork_bg(u, 0, 1);\n\n\t\tfor (int i = head[u]; i; i = Next[i]) {\n\t\t\tint v = ver[i];\n\t\t\tif (ban[v]) continue;\n\n\t\t\ttemp_sz[v] = Get_sz(v, u);\n\n\t\t\tif (temp_sz[v] <= Bn) {\n\t\t\t\tA_son = v;\n\t\t\t\tplus_bg(v, u, A.t[1].trans[a[u] - 'a'], 1);\n\t\t\t} else {\n\t\t\t\twork_bg(v, u, -1);\n\t\t\t}\n\t\t}\n\n\t\tban[u] = 1;\n\t}\n\n\tfor (int i = head[u]; i; i = Next[i]) {\n\t\tint v = ver[i];\n\t\tif (ban[v]) continue;\n\n\t\tA_sz = temp_sz[v], A_rt = 0;\n\t\tGet_rt(v, 0), solve(A_rt);\n\t}\n}\n\nint main() {\n\tread(n), read(m), Bn = 1200;\n\n\tfor (int i = 1, u, v; i < n; i ++) {\n\t\tread(u), read(v);\n\t\tadd_edge(u, v), add_edge(v, u);\n\t}\n\n\tscanf(\"%s\", a + 1);\n\tscanf(\"%s\", tex + 1);\n\n\tfor (int i = 1; i <= m; i ++) posA[i] = A.extend(tex[i] - 'a');\n\tA.build();\n\n\tfor (int i = m; i >= 1; i --) posB[i] = B.extend(tex[i] - 'a');\n\tB.build();\n\n\tA_sz = n, A_rt = 0;\n\tGet_rt(1, 0), solve(A_rt);\n\n\tprintf(\"%lld\\n\", ans);\n\n\treturn 0;\n}\n```",
        "postTime": 1651033063,
        "uid": 129578,
        "name": "Calculatelove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4218\u3010[CTSC2010] \u73e0\u5b9d\u5546\u3011"
    },
    {
        "content": "\u5047\u5982\u4f60\u5bf9\u540e\u7f00\u6811\u5f88\u719f\u6089\u7684\u8bdd\u8fd9\u9898\u57fa\u672c\u4e0a\u5c31\u80fd\u79d2\u4e86\uff0c\u5426\u5219\u2026\u2026\u53ef\u80fd\u9700\u8981\u7a0d\u5fae\u7406\u89e3+\u5199\u4e0a\u51e0\u4e2a\u5c0f\u65f6\u2026\u2026~~\u56e0\u4e3a\u540e\u7f00\u6811\u8fd9\u73a9\u610f\u592a\u81ea\u95ed\u4e86\u2026\u2026~~\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u8def\u5f84\u7684\u7edf\u8ba1\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u70b9\u5206\u6cbb\uff0c\u7136\u540e\u65e2\u7136\u662f\u70b9\u5206\u6cbb\uff0c\u8bbe\u91cd\u5fc3\u4e3a$x$\uff0c\u6211\u4eec\u5c31\u8981\u8003\u8651\u5f62\u5982$u->x->v$\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u770b\u4e0a\u53bb\u76f8\u5f53\u7684\u4e0d\u53ef\u505a\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1$u->x$\u8fd9\u4e2a\u4e32\u5728$s$\u4e2d\u7684\u51fa\u73b0\u4f4d\u7f6e\u6b63\u597d\u63a5\u5728$x->v$\u4e4b\u524d\uff0c\u5f88\u96be\u7528SAM\u5904\u7406\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8f6c\u5316\u4e00\u4e0b\uff0c\u5bf9\u4e8e$s$\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e$i$\uff0c\u6211\u4eec\u8981\u6c42\u51fa$begin[i]$\u4e3a\u5728\u6811\u4e0a\u6709\u591a\u5c11$x->v$\u7684\u4e32\u6ee1\u8db3\u8fd9\u4e2a\u4e32\u662f$i$**\u540e\u7f00\u7684\u524d\u7f00**\uff0c$end[i]$\u4e3a\u5728\u6811\u4e0a\u6709\u591a\u5c11$u->x$\u7684\u4e32\u6ee1\u8db3\u8fd9\u4e2a\u4e32\u662f$i$**\u524d\u7f00\u7684\u540e\u7f00**\uff0c\u663e\u7136\u7b54\u6848\u5c31\u662f$\\sum_ibegin[i]*end[i]$\uff0c\u7136\u540e\u6211\u4eec\u8fd8\u8981\u51cf\u53bbu\u548cv\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u91cc\u7684\u60c5\u51b5\u3002\n\n\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651$begin[i]$\u56e0\u4e3a$end[i]$\u5c31\u662f\u628a\u4e32\u5012\u8fc7\u6765\u7684$begin[i]$\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u4e1c\u897f\u6700\u76f4\u89c2\u7684\u5904\u7406\u65b9\u5f0f\u5c31\u662f\u4ece$x$\u5f00\u59cb\u7ef4\u62a4\u4e00\u4e2aSAM\u4e0a\u7684\u6307\u9488$cur$\u4e0d\u65ad\u5730\u8d70\uff0c\u7136\u800c\u6211\u4eec\u8981\u5bf9\u6240\u6709\u53ef\u884c\u7684\u5de6\u7aef\u70b9\u8fdb\u884c\u7edf\u8ba1\uff0c\u90a3\u4e48\u65e2\u7136\u662f\u5de6\u7aef\u70b9\u6211\u4eec\u4e0d\u59a8**\u5bf9\u6bcf\u4e2a\u540e\u7f00\u7edf\u8ba1\u6709\u591a\u5c11\u4e32\u5f53\u8fc7\u4ed6\u7684\u524d\u7f00**\uff0c\u8fd9\u548b\u505a\uff1f\n\n\u7136\u540e\u6709\u4e2a\u4e1c\u897f\u53eb\u505a\u540e\u7f00\u6811\uff0c\u5c31\u662f\u628a\u4e00\u4e2a\u4e32\u7684\u6240\u6709\u540e\u7f00\u66b4\u529b\u63d2\u5230trie\u91cc\uff0c\u54a6\uff0c\u65e2\u7136\u5b83\u662f\u4e2aTrie\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u540e\u7f00\u6811\u4e0a\u4ece\u4e0a\u5230\u4e0b\u8d70\u4e0d\u5c31\u884c\u4e86\uff1f\u6211\u4eec\u6bcf\u8d70\u5230\u4e00\u4e2a\u70b9\u5c31\u6253\u4e2a\u6807\u8bb0\uff0c\u6700\u540e\u518d\u5bf9\u540e\u7f00\u6811dfs\u63a8\u4e00\u904d\u6807\u8bb0\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u540e\u7f00\u770b\u4ed6\u540e\u7f00\u6811\u4e0a\u5bf9\u5e94\u8282\u70b9\u6709\u51e0\u4e2a\u6807\u8bb0\u5c31\u884c\u4e86\u3002\n\n\u663e\u7136\u54b1\u4eec\u4e0d\u80fd\u66b4\u529b\u5efatrie\u7684\u540e\u7f00\u6811\uff0c\u6709\u4e2a\u5e7f\u4e3a\u4eba\u77e5\u7684\u7ed3\u8bba\u662f\u540e\u7f00\u6811\u7b49\u4ef7\u4e8e\u53cd\u4e32\u7684parent\u6811\uff0c\u56e0\u4e3aparent\u6811\u7684\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u662f\u6709\u76f8\u540c\u540e\u7f00\u7684\u5b50\u4e32\u6216\u8005\u524d\u7f00\uff0c\u540e\u7f00\u6811\u7684\u7956\u5148\u540e\u4ee3\u5173\u7cfb\u662f\u6709\u76f8\u540c\u524d\u7f00\u7684\u5b50\u4e32\u6216\u8005\u540e\u7f00\uff0c\u8fd9\u4e0d\u6b63\u597d\u53cd\u8fc7\u6765\uff1f\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\u6bcf\u6761\u8fb9\u90fd\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5b50\u4e32\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u8fb9\u8868\u793a\u7684\u4e32\u4e00\u8fde\u63a5\u5c31\u6210\u4e86\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u540e\u7f00\u6216\u5b50\u4e32\u3002\u6211\u4eec\u8003\u8651\u5982\u4f55\u7528parent\u6811\u5b8c\u6210\u5230\u540e\u7f00\u6811\u7684\u8f6c\u5316\uff0c\u5bf9\u53cd\u4e32\u7684parent\u6811\u968f\u4fbf\u627e\u4e2aright\uff0c\u663e\u7136\u4e00\u6761$(u,v)$\u7684\u8fb9\u5728**\u53cd\u4e32**\u4e0a\u5bf9\u5e94\u7684\u5b50\u4e32\u957f\u5ea6\u4e3a$len[v]-len[u]$\uff0c\u5b83\u5bf9\u5e94\u7684\u533a\u95f4\u53f3\u7aef\u70b9\u662f$right[v]-len[u]$\uff0c\u6ce8\u610f\u5b9e\u9645\u7684\u540e\u7f00\u6811\u4e0a\u8fd8\u8981\u53cd\u8fc7\u6765\uff0c\u7136\u540e\u6211\u4eec\u4e3a\u4e86\u80fd\u591f\u5b8c\u7f8e\u7684\u5728\u540e\u7f00\u6811\u4e0a\u4ece\u4e0a\u5230\u4e0b\u8d70\uff0c\u9700\u8981\u628a\u8fd9\u4e2a\u91cd\u6784\u6210\u4e00\u68f5Trie\uff0c\u4f46\u8fd9\u68f5Trie\u53ea\u5bf9\u5e94\u8fb9\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u5728\u4e0d\u65ad\u6dfb\u52a0\u5b57\u7b26\u7684\u65f6\u5019\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\u5728\u8fb9\u5bf9\u5e94\u7684\u4e32\u4e0a\u79fb\u52a8\uff0c\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u8df3\u70b9\uff0c\u5e76\u4e14\u6bcf\u6b21\u90fd\u8981\u5728\u4e0a\u9762\u6253\u6807\u8bb0\u3002\n\n\uff08\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u4e00\u8138\u61f5\u903c\u7684\u8bdd\u2026\u2026\u5176\u5b9e\u753b\u68f5\u540e\u7f00\u6811\u5c31\u90fd\u660e\u767d\u4e86\u2026\u2026\n\n~~\uff08\u53e6\u5916\u53e6\u4e00\u7bc7\u9898\u89e3\u7684\u672c\u8d28\u5176\u5b9e\u5c31\u662f\u5efa\u4e86\u4e2a\u540e\u7f00\u6811\u2026\u2026~~\n\n\u7136\u540e\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u6837\u5355\u6b21\u590d\u6742\u5ea6\u662f$O(size+m)$\u7684\uff0c\u5e76\u4e0d\u662f\u6b63\u786e\u7684\u70b9\u5206\u6cbb\u7684\u5747\u644a\u590d\u6742\u5ea6\uff0c\u603b\u4f53\u4e0a\u662f$O(nm+nlogn)$\u7684\u2026\u2026\n\n\u5176\u5b9e\u8fd9\u4e2a\u6839\u53f7\u5206\u6cbb\u4e00\u4e0b\u5c31\u884c\u4e86\u2026\u2026\n\n\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684$O(n^2)$\u66b4\u529b\u662f\u5bf9s\u5efa\u4e2aSAM\u7136\u540e\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\u66b4\u529b\u8dd1SAM\u5339\u914d\uff0c\u7136\u540e\u5f53$size<=\\sqrt n$\u7684\u65f6\u5019\u76f4\u63a5\u7528\u8fd9\u4e2a\u66b4\u529b\uff0c$size>\\sqrt m$\u7684\u65f6\u5019\u7528\u540e\u7f00\u6811$O(m)$\u505a\uff0c\u590d\u6742\u5ea6\u662f$O((n+m)\\sqrt n)$\u7684\uff0c\u5bf9\uff0c\u4e0d\u5e26log\u3002\n\n\u8fd9\u4e2a\u590d\u6742\u5ea6\u53ef\u4ee5\u7c7b\u6bd4\u94fe\u4e0a\u7684\u8bc1\u660e\uff0c\u5206\u6cbb\u7684\u65f6\u5019\u4f1a\u5206\u6210$O(n)$\u4e2a\u533a\u95f4\uff0c\u6362\u53e5\u8bdd\u8bf4\u662f2*\u5206\u6cbb\u6811\u4e0a\u7684\u53f6\u5b50\u4e2a\u6570\u5373n\uff0c\u5f53$size<=\\sqrt n$\u65f6\u53ef\u4ee5\u76f4\u63a5$O(size^2)$\u66b4\u529b\uff0c\u663e\u7136\u66b4\u529b\u590d\u6742\u5ea6\u662f$O(n\\sqrt n)$\u7684\uff0c\u7136\u540e\u8003\u8651\u4f7f\u7528\u540e\u7f00\u6811\u7684$size>\\sqrt n$\u7684\u533a\u95f4\uff0c\u663e\u7136\u5206\u6cbb\u6811\u4e0a\u7684\u53f6\u5b50\u5927\u5c0f\u81f3\u5c11\u662f$\\sqrt n$\u7684\u6240\u4ee5\u6709$O(\\sqrt n)$\u4e2a\u8fd9\u6837\u7684\u533a\u95f4\uff0c\u6240\u4ee5\uff0c\u4f7f\u7528\u540e\u7f00\u6811\u7684\u590d\u6742\u5ea6\u662f$O(m\\sqrt n+nlogn)$\uff0c\u603b\u590d\u6742\u5ea6\u5c31\u662f$O((n+m)\\sqrt n)$\u3002\n\n~~\u6211\u597d\u50cf\u5757\u5927\u5c0f\u8bbe\u7684$\\sqrt m$\u554a\u2026\u2026\u7b97\u4e86\u4e0d\u7ba1\u4e86~~\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#define ll long long\nusing namespace std;\nnamespace ywy {\n\tinline int get() {\n\t    int n = 0;\n\t    char c;\n\t    while ((c = getchar()) || 23333)\n\t        if (c >= '0' && c <= '9')\n\t            break;\n\t    n = c - '0';\n\t    while ((c = getchar()) || 23333) {\n\t        if (c >= '0' && c <= '9')\n\t            n = n * 10 + c - '0';\n\t        else\n\t            return (n);\n\t    }\n\t}\n\tint blo;\n\ttypedef struct _b {\n\t    int dest;\n\t    int nxt;\n\t} bian;\n\tbian memchi[2000001];\n\tint gn = 1;\n\ttypedef struct _SAM {\n\t    int sam[200001][26], len[200001], fa[200001], size[200001], gsam;\n\t    _SAM() { gsam = 2; }\n\t    int heads[200001];\n\t    inline int zhuanyi(int p, int x) {\n\t        int me = gsam;\n\t        gsam++;\n\t        len[me] = len[p] + 1;\n\t        size[me] = 1;\n\t        while (p && !sam[p][x]) sam[p][x] = me, p = fa[p];\n\t        if (!p) {\n\t            fa[me] = 1;\n\t            return (me);\n\t        }\n\t        int q = sam[p][x];\n\t        if (len[q] == len[p] + 1) {\n\t            fa[me] = q;\n\t            return (me);\n\t        }\n\t        int nq = gsam;\n\t        gsam++;\n\t        len[nq] = len[p] + 1;\n\t        fa[nq] = fa[q];\n\t        fa[q] = fa[me] = nq;\n\t        for (register int i = 0; i < 26; i++) sam[nq][i] = sam[q][i];\n\t        while (p && sam[p][x] == q) sam[p][x] = nq, p = fa[p];\n\t        return (me);\n\t    }\n\t    int pos[100001];\n\t    int tag[200001], right[200001], trie[200001][26];\n\t    char str[200001];\n\t    inline void build(int n) {\n\t        int p = 1;\n\t        for (register int i = 1; i <= n; i++) p = zhuanyi(p, str[i] - 'a'), right[p] = i, pos[i] = p;\n\t        for (register int i = 2; i < gsam; i++) {\n\t            memchi[gn].dest = i;\n\t            memchi[gn].nxt = heads[fa[i]];\n\t            heads[fa[i]] = gn;\n\t            gn++;\n\t        }\n\t    }\n\t    inline void clear() {\n\t        for (register int i = 1; i < gsam; i++) tag[i] = 0;\n\t    }\n\t    void dfs(int pt) {\n\t        for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t            dfs(memchi[i].dest);\n\t            size[pt] += size[memchi[i].dest];\n\t            right[pt] = max(right[pt], right[memchi[i].dest]);\n\t            trie[pt][str[right[memchi[i].dest] - len[pt]] - 'a'] = memchi[i].dest;\n\t        }\n\t    }\n\t    void efs(int pt) {\n\t        for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t            tag[memchi[i].dest] += tag[pt];\n\t            efs(memchi[i].dest);\n\t        }\n\t    }\n\t} SAM;\n\tSAM zheng, fan;\n\tint heads[100001];\n\tinline void add(int s, int t) {\n\t    memchi[gn].dest = t;\n\t    memchi[gn].nxt = heads[s];\n\t    heads[s] = gn;\n\t    gn++;\n\t}\n\tint tot, zx, size[100001];\n\tunsigned char bv[100001];\n\tint xl[100001], ptr;\n\tint fun[100001];\n\tvoid afs(int pt, int baba) {\n\t    tot++;\n\t    xl[ptr] = pt;\n\t    ptr++;\n\t    fun[pt] = baba;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        afs(memchi[i].dest, pt);\n\t    }\n\t}\n\tvoid bfs(int pt, int baba) {\n\t    size[pt] = 1;\n\t    int mx = 0;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        bfs(memchi[i].dest, pt);\n\t        mx = max(mx, size[memchi[i].dest]);\n\t        size[pt] += size[memchi[i].dest];\n\t    }\n\t    if (max(mx, tot - size[pt]) <= tot / 2)\n\t        zx = pt;\n\t}\n\tll ans = 0;\n\tchar str[100001], strrev[100001], chs[100001];\n\tint m;\n\tvoid cfs(int pt, int baba, int p) {  //\u66b4\u529b\n\t    p = zheng.sam[p][chs[pt] - 'a'];\n\t    if (!p)\n\t        return;\n\t    ans += zheng.size[p];\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        cfs(memchi[i].dest, pt, p);\n\t    }\n\t}\n\tvoid kaitou(int pt, int baba, int pos, int p) {  // p\u662f\u8fd8\u672a\u5230\u8fbe\u7684\u70b9\n\t    if (!p)\n\t        return;\n\t    if (strrev[fan.right[p] - fan.len[fan.fa[p]] - pos] != chs[pt])\n\t        return;\n\t    pos++;\n\t    fan.tag[p]++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        if (pos == fan.len[p] - fan.len[fan.fa[p]])\n\t            kaitou(memchi[i].dest, pt, 0, fan.trie[p][chs[memchi[i].dest] - 'a']);\n\t        else\n\t            kaitou(memchi[i].dest, pt, pos, p);\n\t    }\n\t}\n\tvoid jiewei(int pt, int baba, int pos, int p) {\n\t    if (!p)\n\t        return;\n\t    if (str[zheng.right[p] - zheng.len[zheng.fa[p]] - pos] != chs[pt])\n\t        return;\n\t    pos++;\n\t    zheng.tag[p]++;\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        if (pos == zheng.len[p] - zheng.len[zheng.fa[p]])\n\t            jiewei(memchi[i].dest, pt, 0, zheng.trie[p][chs[memchi[i].dest] - 'a']);\n\t        else\n\t            jiewei(memchi[i].dest, pt, pos, p);\n\t    }\n\t}\n\tint pam[100001];\n\tvoid ffs(int pt, int baba, int p) {\n\t    p = zheng.sam[p][chs[pt] - 'a'];\n\t    if (!p)\n\t        return;\n\t    ans -= zheng.size[p];\n\t    for (register int i = heads[pt]; i; i = memchi[i].nxt) {\n\t        if (memchi[i].dest == baba || bv[memchi[i].dest])\n\t            continue;\n\t        ffs(memchi[i].dest, pt, p);\n\t    }\n\t}\n\tvoid digui(int pt, int baba) {\n\t    tot = 0;\n\t    ptr = 1;\n\t    afs(pt, 0);\n\t    if (tot <= blo) {\n\t        if (baba) {\n\t            for (register int i = 1; i < ptr; i++) {\n\t                int me = xl[i];\n\t                int cur = 1;\n\t                while (me) {\n\t                    cur = zheng.sam[cur][chs[me] - 'a'];\n\t                    me = fun[me];\n\t                }\n\t                pam[xl[i]] = zheng.sam[cur][chs[baba] - 'a'];\n\t                ffs(pt, 0, pam[xl[i]]);\n\t            }\n\t        }\n\t        for (register int i = 1; i < ptr; i++) cfs(xl[i], 0, 1);\n\t        return;\n\t    }\n\t    int fdd = fan.trie[1][chs[baba] - 'a'];\n\t    if (fdd) {\n\t        int pos = 1;\n\t        if (fan.len[fdd] == 1) {\n\t            fdd = fan.trie[fdd][chs[pt] - 'a'];\n\t            pos = 0;\n\t        }\n\t        kaitou(pt, 0, pos, fdd);\n\t    }\n\t    fdd = zheng.trie[1][chs[baba] - 'a'];\n\t    if (fdd) {\n\t        int pos = 1;\n\t        if (zheng.len[fdd] == 1) {\n\t            fdd = zheng.trie[fdd][chs[pt] - 'a'];\n\t            pos = 0;\n\t        }\n\t        jiewei(pt, 0, pos, fdd);\n\t    }\n\t    zheng.efs(1);\n\t    fan.efs(1);\n\t    for (register int i = 1; i <= m; i++) {\n\t        ll begin = zheng.tag[zheng.pos[i]], end = fan.tag[fan.pos[m - i + 1]];\n\t        ans -= begin * end;\n\t    }\n\t    zheng.clear();\n\t    fan.clear();\n\t    bfs(pt, 0);\n\t    int me = zx;\n\t    kaitou(me, 0, 0, fan.trie[1][chs[me] - 'a']);\n\t    jiewei(me, 0, 0, zheng.trie[1][chs[me] - 'a']);\n\t    zheng.efs(1);\n\t    fan.efs(1);\n\t    for (register int i = 1; i <= m; i++) {\n\t        ll begin = zheng.tag[zheng.pos[i]], end = fan.tag[fan.pos[m - i + 1]];\n\t        ans += begin * end;\n\t    }\n\t    zheng.clear();\n\t    fan.clear();\n\t    bv[me] = 1;\n\t    for (register int i = heads[me]; i; i = memchi[i].nxt) {\n\t        if (bv[memchi[i].dest])\n\t            continue;\n\t        digui(memchi[i].dest, me);\n\t    }\n\t}\n\tvoid ywymain() {\n\t    int n = get();\n\t    m = get();\n\t    blo = sqrt(m);\n\t    for (register int i = 1; i < n; i++) {\n\t        int s = get(), t = get();\n\t        add(s, t);\n\t        add(t, s);\n\t    }\n\t    scanf(\"%s\", chs + 1);\n\t    scanf(\"%s\", str + 1);\n\t    memcpy(strrev, str, sizeof(str));\n\t    reverse(strrev + 1, strrev + 1 + m);\n\t    for (register int i = 1; i <= m; i++) zheng.str[i] = str[i], fan.str[i] = strrev[i];\n\t    zheng.build(m);\n\t    fan.build(m);\n\t    zheng.dfs(1);\n\t    fan.dfs(1);\n\t    digui(1, 0);\n\t    cout << ans << endl;\n\t}\n}\nint main() {\n    ywy::ywymain();\n    return (0);\n}\n```",
        "postTime": 1554817789,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4218 \u3010[CTSC2010]\u73e0\u5b9d\u5546\u3011"
    },
    {
        "content": "~~\u5148\u6765\u4e00\u53d1\u5e7f\u544a\uff1a~~[https://www.cnblogs.com/hbyer/p/10456260.html](https://www.cnblogs.com/hbyer/p/10456260.html)\n\n\u70b9\u5206\u6cbb+\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u5148\u8003\u8651\u66b4\u529b\uff0c\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684$O(n^2)$\u7684\u66b4\u529b\uff1a\n\n- \u679a\u4e3e\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c$dfs$\u53e6\u4e00\u4e2a\u70b9\uff0c$dfs$\u7684\u540c\u65f6\u5728\u7279\u5f81\u5b57\u7b26\u4e32$S$\u7684$SAM$\u4e0a\u8dd1\uff0c\u987a\u4fbf\u7edf\u8ba1\u7b54\u6848\u5c31\u597d\u4e86\u3002\n- \u8fd9\u4e2a\u5728$SAM$\u4e0a\u8dd1\u5b9e\u9645\u4e0a\u5c31\u76f8\u5f53\u4e8e\u6bcf\u6b21\u5728\u4e00\u4e2a\u5df2\u7ecf\u5339\u914d\u4e86\u7684\u4e32\u540e\u9762\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u76f4\u63a5\u6cbf\u7740$SAM$\u7684\u8f6c\u6362\u8fb9\u8d70\u5c31\u597d\u4e86\u3002\n\n\u6362\u4e2a\u89d2\u5ea6\u601d\u8003\uff0c\u8fd8\u6709\u53e6\u4e00\u79cd\u66b4\u529b\uff1a\n\n- \u679a\u4e3e\u4e00\u4e2a\u70b9$x$\uff0c\u7edf\u8ba1\u51fa\u6bcf\u6761\u4ee5\u8fd9\u4e2a\u70b9\u4e3a$lca$\u7684\u8def\u5f84\u7684\u4ee3\u4ef7\u3002\n- \u8003\u8651\u8fd9\u4e2a\u770b\u8d77\u6765\u9ad8\u7ea7\u4e00\u70b9\u7684\u66b4\u529b\u600e\u4e48\u505a\uff0c\n- \u5bf9\u4e8e\u70b9$x$\uff0c\u8def\u5f84\u80af\u5b9a\u662f$a\\to x \\to b$\u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u4ed6\u62c6\u6210\u4e24\u6bb5$a\\to x$\u548c$x \\to b$\uff0c\u6ce8\u610f\u5230\u5982\u679c\u6211\u4eec\u628a\u7279\u5f81\u5b57\u7b26\u4e32\u53cd\u8fc7\u6765\uff0c\u90a3\u4e48\u8fd9\u4e24\u79cd\u5176\u5b9e\u5c31\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u8003\u8651$a \\to x$\u600e\u4e48\u7edf\u8ba1\uff0c\u7136\u540e\u5728\u7ffb\u8f6c\u8fc7\u7684$S$\u4e0a\u518d\u505a\u4e00\u904d\u5c31\u597d\u4e86\u3002\n- \u90a3\u4e48\u6211\u4eec\u5c31\u662f\u8981\u7edf\u8ba1\u51fa\u5bf9\u4e8e\u81ea\u52a8\u673a\u4e0a\u7684\u70b9$i$\uff0c\u6709\u591a\u5c11\u4ee5$x$\u7ed3\u5c3e\u7684\u8def\u5f84\u5b57\u7b26\u4e32\u5728\u8fd9\u4e2a\u70b9\u3002\n- \u90a3\u4e48\u95ee\u9898\u5c31\u76f8\u5f53\u4e8e\u5f53\u524d\u5df2\u7ecf\u5339\u914d\u4e86\u4e00\u4e2a\u4e32\uff0c\u8981\u5728\u8fd9\u4e2a\u4e32\u524d\u9762\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u6cbf\u7740$parent$\u6811\u8df3\u5c31\u597d\u4e86\u3002\n- \u6700\u540e\u7b54\u6848\u5c31\u662f\u5bf9\u4e8e\u5b57\u7b26\u4e32\u4e0a\u6bcf\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u70b9\u5f00\u59cb\u548c\u8fd9\u4e2a\u70b9\u7ed3\u675f\u7684\u65b9\u6848\u4e4b\u79ef \u7684\u548c\u3002\n\n\u6ce8\u610f\u5230\u7b2c\u4e8c\u79cd\u66b4\u529b\u53ef\u4ee5\u7528\u70b9\u5206\u6cbb\u4f18\u5316\uff0c\u90a3\u4e48\u7b2c\u4e8c\u79cd\u66b4\u529b\u7684\u590d\u6742\u5ea6\u5c31\u662f$O(n\\log n+nm)$\u3002\n\n\u8003\u8651\u5982\u4f55\u628a\u540e\u9762\u4e00\u9879\u4f18\u5316\u4e00\u4e0b\uff0c\u6ce8\u610f\u5230\u7b2c\u4e00\u79cd\u65b9\u6848\u662f\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u626b\u4e00\u904d\u81ea\u52a8\u673a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728\u70b9\u5206\u6cbb\u7684\u65f6\u5019\u8bbe\u4e00\u4e2a\u9600\u503c$B$\uff0c\u82e5$size>B$\u5c31\u7528\u7b2c\u4e8c\u79cd\uff0c\u5426\u5219\u7528\u7b2c\u4e00\u79cd\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5f53$B=\\sqrt{n}$\u7684\u65f6\u5019\u590d\u6742\u5ea6\u6700\u4f18\uff0c\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((n+m)\\sqrt{n})$\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long \n\nvoid read(int &x) {\n    x=0;int f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-f;\n    for(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';x*=f;\n}\n \nvoid print(ll x) {\n    if(x<0) putchar('-'),x=-x;\n    if(!x) return ;print(x/10),putchar(x%10+48);\n}\nvoid write(ll x) {if(!x) putchar('0');else print(x);putchar('\\n');}\n\nconst int maxn = 2e5+10;\nconst int inf = 1e9;\n\nll ans;\nchar s[maxn];\nint n,m,rt,siz,B,top;\nint head[maxn],tot,a[maxn];\nint vis[maxn],f[maxn],sz[maxn],tmp[maxn],t[maxn];\nstruct edge{int to,nxt;}e[maxn<<1];\n\nvoid ins(int u,int v) {e[++tot]=(edge){v,head[u]},head[u]=tot;}\n\nstruct Suffix_Automaton {\n\tint cnt,qs,lstp;\n\tint par[maxn],tr[maxn][26],ml[maxn],pos[maxn],sz[maxn];\n\tint t[maxn],r[maxn],son[maxn][26],str[maxn],tag[maxn],rev[maxn];\n\n\tvoid append(int x,int v) {\n\t\tint p=lstp,np=++cnt;pos[np]=v,sz[np]=1,ml[np]=ml[p]+1,rev[v]=np;lstp=np;\n\t\tfor(;p&&tr[p][x]==0;p=par[p]) tr[p][x]=np;\n\t\tif(!p) return par[np]=qs,void();\n\t\tint q=tr[p][x];\n\t\tif(ml[p]+1<ml[q]) {\n\t\t\tint nq=++cnt;ml[nq]=ml[p]+1;\n\t\t\tmemcpy(tr[nq],tr[q],sizeof tr[nq]);\n\t\t\tpar[nq]=par[q],par[q]=par[np]=nq;\n\t\t\tfor(;p&&tr[p][x]==q;p=par[p]) tr[p][x]=nq;\n\t\t} else par[np]=q;\n\t}\n\n\tvoid prepare(char *ss) {\n\t\tlstp=qs=cnt=1;\n\t\tfor(int i=1;i<=m;i++) append(str[i]=ss[i]-'a',i);\n\n\t\tfor(int i=1;i<=cnt;i++) t[ml[i]]++;\n\t\tfor(int i=1;i<=m;i++) t[i]+=t[i-1];\n\t\tfor(int i=1;i<=cnt;i++) r[t[ml[i]]--]=i;\n\n\t\tfor(int i=cnt;i;i--) {\n\t\t\tint p=r[i];\n\t\t\tsz[par[p]]+=sz[p];\n\t\t\tif(!pos[par[p]]) pos[par[p]]=pos[p];\n\t\t\tson[par[p]][str[pos[p]-ml[par[p]]]]=p;\n\t\t}\n\t}\n\n\tvoid mark(int x,int fa,int now,int len) {\n\t\tif(len==ml[now]) now=son[now][a[x]];\n\t\telse if(str[pos[now]-len]!=a[x]) now=0;\n\t\tif(!now) return ;len++;tag[now]++;\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t\tif(e[i].to!=fa&&!vis[e[i].to]) mark(e[i].to,x,now,len);\n\t}\n\n\tvoid push() {for(int i=1;i<=cnt;i++) tag[r[i]]+=tag[par[r[i]]];}\n}sam1,sam2;\n\nvoid get_rt(int x,int fa) {\n\tsz[x]=1,f[x]=0;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tif(e[i].to!=fa&&!vis[e[i].to]) \n\t\t\tget_rt(e[i].to,x),sz[x]+=sz[e[i].to],f[x]=max(f[x],sz[e[i].to]);\n\tf[x]=max(f[x],siz-sz[x]);\n\tif(f[x]<f[rt]) rt=x;\n}\n\nvoid get_node(int x,int fa) {\n\tt[++top]=x;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tif(e[i].to!=fa&&!vis[e[i].to]) get_node(e[i].to,x);\n}\n\nvoid dfs(int x,int fa,int now) {\n\tnow=sam1.tr[now][a[x]];\n\tif(!now) return ;\n\tans+=sam1.sz[now];\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tif(e[i].to!=fa&&!vis[e[i].to]) dfs(e[i].to,x,now);\n}\n\nvoid work(int x,int fa,int op) {\n\tmemset(sam1.tag,0,(sam1.cnt+2)*4);\n\tmemset(sam2.tag,0,(sam2.cnt+2)*4);\n\tif(fa) sam1.mark(x,fa,sam1.tr[1][a[fa]],1),sam2.mark(x,fa,sam2.tr[1][a[fa]],1);\n\telse sam1.mark(x,fa,1,0),sam2.mark(x,fa,1,0);\n\tsam1.push(),sam2.push();\n\tfor(int i=1;i<=m;i++) ans+=1ll*op*sam1.tag[sam1.rev[i]]*sam2.tag[sam2.rev[m-i+1]];\n}\n\nvoid solve(int x) {\n\tget_rt(x,0);siz=sz[x];\n\tif(siz<=B) {\n\t\ttop=0,get_node(x,0);\n\t\tfor(int i=1;i<=top;i++) dfs(t[i],0,sam1.qs);\n\t\tfor(int i=1;i<=top;i++) vis[t[i]]=0;\n\t\treturn ;\n\t}\n\tfor(int i=head[x];i;i=e[i].nxt) tmp[e[i].to]=sz[e[i].to];\n\twork(x,0,1);\n\tfor(int i=head[x];i;i=e[i].nxt) if(!vis[e[i].to]) work(e[i].to,x,-1);\n\tvis[x]=1;\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t\tif(!vis[e[i].to]) siz=tmp[e[i].to],rt=0,get_rt(e[i].to,x),solve(rt);\n}\n\nint main() {\n\tread(n),read(m);B=sqrt(n);\n\tfor(int i=1,x,y;i<n;i++) read(x),read(y),ins(x,y),ins(y,x);\n\tscanf(\"%s\",s+1);\n\tfor(int i=1;i<=n;i++) a[i]=s[i]-'a';\n\tscanf(\"%s\",s+1);\n\tsam1.prepare(s);\n\treverse(s+1,s+m+1);\n\tsam2.prepare(s);\n\tsiz=n,f[0]=inf,get_rt(1,0),solve(rt);write(ans);\n\treturn 0;\n}\n```",
        "postTime": 1551694637,
        "uid": 50777,
        "name": "Hyscere",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4218 \u3010[CTSC2010]\u73e0\u5b9d\u5546\u3011"
    }
]