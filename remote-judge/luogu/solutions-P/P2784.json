[
    {
        "content": "##### \u8c01\u8bf4\u4e0d\u80fd\u7528Dijkstra\u4e86\uff1f\n####  \u5806\u4f18\u5316dijA\u4e86 ~~\uff08\u7b2c2\u4e2a\u70b9960ms\u3002\u3002\u3002\uff09~~ \n\u4e0a\u4ee3\u7801\uff1a _\uff08\u5751\u70b9\u633a\u591a\uff09_ \n```\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<vector>\nusing namespace std;\ntypedef pair<double,int> kk;//\u6ce8\u610f\u5c0f\u6570*1\nconst int N=5005,M=2000000;\nint n,m,s,t;\nint head[N],tot;\ndouble d[N];//\u6ce8\u610f\u5c0f\u6570*2\nbool v[N];\nstruct edge{\n\tint nxt,ver;\n\tdouble w;//*3\n}e[M*2];\nvoid add(int x,int y,double z){\n\te[++tot].ver=y,e[tot].w=z,e[tot].nxt=head[x],head[x]=tot;\n}\n//\u90bb\u63a5\u8868\u5b58\u56fe\uff08\u6ca1\u5565\u8bf4\u7684\u5427\uff09\nvoid dij(int st){\n\tfor(int i=1;i<=n;i++) d[i]=-1;//\u90fd\u8d4b\u503c\u6210-1\uff08\u672a\u5230\u8fbe\uff09\n\tpriority_queue<kk>q;//\u5927\u6839\u5806\n\td[st]=1;q.push(make_pair(1,st));\n\twhile(q.size()){\n\t\tint x=q.top().second;q.pop();\n\t\tif(v[x]) continue;v[x]=1;\n\t\tfor(int i=head[x];i;i=e[i].nxt){\n\t\t\tint y=e[i].ver;\n\t\t\tif(d[x]*e[i].w>d[y]){\n\t\t\t\td[y]=d[x]*e[i].w;//\u6ce8\u610f\u9898\u76ee\u8981\u6c42\uff08\u4e58\u6cd5\uff09\n\t\t\t\tq.push(make_pair(d[y],y));\n\t\t\t}\n\t\t}\n\t}\n}\nint main ()\n{\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tdouble z;//\u6ce8\u610f\u5c0f\u6570*4...\n\t\tscanf(\"%d%d%lf\",&x,&y,&z);\n\t\tadd(x,y,z);//\u56fe\u5b58\u8d77\u6765\uff01\uff01\n\t}\n\tdij(s);\n\tif(d[t]!=-1) printf(\"%.4lf\",d[t]);//-1\u8bf4\u660e\u4e0d\u8fde\u901a\n\telse printf(\"orz\");\n}\n```",
        "postTime": 1524739660,
        "uid": 61309,
        "name": "XiaoX",
        "ccfLevel": 0,
        "title": "P2784 \u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210"
    },
    {
        "content": "\u6700\u957f\u8def\u6a21\u677f\n\nSPFA\u7b97\u6cd5\u6c42\u6700\u957f\u8def\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u53ea\u8981\u628aSPFA\u6700\u77ed\u8def\u6a21\u677f\u91cc\u7684\u5927\u4e8e\u53f7\u6539\u6210\u5c0f\u4e8e\u53f7\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019\u628adis\u6539\u4e3a\u6781\u5c0f\u503c\u5c31ok\u4e86\u3002\n\n\u8fd9\u4e2a\u9898\u8981\u6ce8\u610f\u7684\u8fd8\u6709\u8d77\u70b9\u4e00\u5f00\u59cb\u8ddd\u79bb\u662f1\uff0c\u5982\u679c\u662f0\u7684\u8bdd\u540e\u9762\u600e\u4e48\u4e58\u90fd\u662f0.\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<queue>\n#include<cstdio>\nusing namespace std;\nstruct Node\n{\n    int head;\n    double dis;\n    bool vis;\n}node[5005];\nstruct Edge\n{\n    int to,next;\n    double len;\n}edge[2000005];\nint cnt,n,m,s,t;\nvoid addEdge(int u,int v,double w)\n{\n    edge[++cnt].to=v;\n    edge[cnt].len=w;\n    edge[cnt].next=node[u].head;\n    node[u].head=cnt;\n}\nvoid SPFA()\n{\n    queue<int>q;\n    for(int i=1;i<=n;i++)\n    {\n        node[i].dis=-0x3f3f3f3f;\n        node[i].vis=0;\n    }\n    node[s].dis=1;\n    node[s].vis=1;\n    //\u521d\u59cb\u5316\u8981\u6ce8\u610f\n    q.push(s);\n    while(q.size())\n    {\n        int u=q.front();\n        q.pop();\n        node[u].vis=0;\n        for(int e=node[u].head;e;e=edge[e].next)\n        {\n            int v=edge[e].to;\n            if(node[v].dis<node[u].dis*edge[e].len)\n            {\n                //\u6ce8\u610f\u662f\u6c42\u6700\u957f\u8def\uff0c\u6240\u4ee5\u662f\u5c0f\u4e8e\u53f7\n                node[v].dis=node[u].dis*edge[e].len;\n                //\u6ce8\u610f\u8fd9\u91cc\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0d\u662f\u52a0\u800c\u662f\u4e58\n                if(!node[v].vis)\n                {\n                    q.push(v);\n                    node[v].vis=1;\n                }\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        double w;\n        scanf(\"%d%d%lf\",&u,&v,&w);\n        addEdge(u,v,w);\n    }\n    SPFA();\n    if(node[t].dis<=-0x3f3f3f3f)\n        puts(\"orz\");\n    else \n        printf(\"%.4lf\\n\",node[t].dis);\n    //\u6ca1\u66f4\u65b0\u5230\u5c31\u8bf4\u660e\u6ca1\u8def\uff0corz\n    return 0;\n}\n```",
        "postTime": 1586228140,
        "uid": 203102,
        "name": "Diamiko",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2784 \u3010\u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210\u3011"
    },
    {
        "content": "\u6d6e\u70b9\u6570\u7248\u5355\u6e90\u6700\u957f\u8def\uff0c\u5f88\u5bb9\u6613\u60f3\u5230spfa\u3002\u628a\u6a21\u677f\u6539\u4e00\u6539\u5373\u53ef\u3002\n\n```\n#include<bits/stdc++.h>\n#define db double\nusing namespace std;\nqueue<int>que;int sta,end,fir[5005];bool vis[5005];db dis[5005];struct STR{db val;int next,to;}edge[2000005];\nvoid add(int u,int v,db val,int pos){\n\tedge[pos].next=fir[u];fir[u]=pos;edge[pos].val=val;edge[pos].to=v;\n}\nvoid spfa(){\n\tvis[sta]=dis[sta]=1;que.push(sta);\n\twhile(!que.empty()){\n\t\tint fr=que.front();\n\t\tfor(int i=fir[fr];i;i=edge[i].next)\n\t\t\tif(dis[edge[i].to]<edge[i].val*dis[fr]){\n\t\t\t\tdis[edge[i].to]=edge[i].val*dis[fr];\n\t\t\t\tif(!vis[edge[i].to]){\n\t\t\t\t\tvis[edge[i].to]=1;que.push(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\tvis[fr]=0;que.pop();\n\t}\n}\nint main(){\n\tint n,m;scanf(\"%d%d%d%d\",&n,&m,&sta,&end);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;db turn;scanf(\"%d%d%lf\",&u,&v,&turn);add(u,v,turn,i);\n\t}\n\tspfa();dis[end]?printf(\"%.4lf\",dis[end]):printf(\"orz\");\n\treturn 0;\n}\n```\n",
        "postTime": 1591359790,
        "uid": 313892,
        "name": "sukimo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2784 \u3010\u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210\u3011"
    },
    {
        "content": "# \u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684~~\u88f8~~\u597d\u9898\u3002\n\n## \u5c0f\u5b66\u751f\u79d2\u61c2\u7cfb\u5217\u3002\n\n[\u6b22\u8fce\u8fdb\u5165 blog \u67e5\u770b\u4f60\u7684\u5c0f\u5b66\u751f\u79d2\u61c2\u7cfb\u5217\u90fd\u66f4\u65b0\u4e86\u5565\u3002](https://www.luogu.com.cn/blog/Liya2304238405/#type=%E9%A2%98%E8%A7%A3)\n\n\u672c\u9898\u662f\u6700\u957f\u8def\u88f8\u9898\uff0c\u4f46\u6211\u5728\u8bb2\u7b97\u6cd5\u65f6\u4f1a\u6309\u6700\u77ed\u8def\u8bb2\u3002\u4e0d\u8fc7\u5927\u5bb6\u6700\u559c\u6b22\u7684~~\u53ef\u4ee5\u76f4\u63a5\u63d0\u4ea4 AC \u7684~~\u4ee3\u7801\u662f\u672c\u9898\u7684\u6700\u957f\u8def\u3002\u8bdd\u4e0d\u591a\u8bf4\u63a5\u4e0b\u6765\u4e0a\u83dc\u3002\n\n# \u83dc\u5355 menu\n \n1. \u8349\u8349\u8bb2\u4e0b\u6211\u63a8\u8350\u7684\u5b58\u56fe\u65b9\u6848\uff1a\u56fe\u7684\u8fb9\u96c6\u6570\u7ec4\u5b58\u50a8\uff1b\n\n2. \u672c\u9898\u601d\u8def\uff1b\n\n2. Bellman-Ford \u7b97\u6cd5\uff1b\n\n3. Bellman \u7b97\u6cd5\u7684\u961f\u5217\u4f18\u5316\uff1a Shortest Path Faster Algorithm \uff0c\u5373 SPFA\uff08\u770b\u89c1\u5168\u79f0\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u7b97\u6cd5\uff09\uff1b\n\n4. Dijkstra \u7b97\u6cd5\u3002\n\n\n\n# \u8fb9\u96c6\u6570\u7ec4\n\n\u6b64\u5b58\u50a8\u65b9\u5f0f\u4f7f\u7528\u4e24\u4e2a\u6570\u7ec4\uff1a\u4e00\u4e2a\u4e00\u7ef4\u7684\u8fb9\u6570\u7ec4\uff0c\u4e00\u4e2a\u4e8c\u7ef4\u7684\u70b9\u6570\u7ec4\u3002\n\n\u91c7\u7528\u6b64\u65b9\u6cd5\u7684\u4f18\u52bf\u662f\u5bb9\u6613\u5bf9\u8fb9\u8fdb\u884c\u64cd\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u65b9\u4fbf\u5730\u4e3a\u8fb9\u6dfb\u52a0\u4fe1\u606f\uff08\u6d41\u91cf\u3001\u8d39\u7528\u3001\u6743\u503c\u3001\u6821\u8349\u559c\u6b22\u4f60\u7684\u7a0b\u5ea6\uff09\u3002\n\n\u5728\u8fb9\u6570\u7ec4\u4e2d\u5b58\u50a8\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\uff0c\u70b9\u6570\u7ec4\u4e2d\u5b58\u50a8\u4e00\u4e2a\u70b9\u8fde\u63a5\u7684\u6240\u6709\u8fb9\u7684\u4fe1\u606f\u3002\u5728\u8bfb\u5165\u6570\u636e\u65f6\uff0c\u540c\u4e00\u6b21\u5faa\u73af\u4e2d\u5148\u5b58\u8fb9\uff0c\u7136\u540e\u5c06\u8be5\u8fb9\u5728\u8fb9\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4fdd\u5b58\u5230\u70b9\u6570\u7ec4\u4e2d\u3002\n\n```cpp\nstruct edge {\n\tint from, to;\n\tdouble w;\n\tedge(int x, int y, double z) { from = x; to = y; w = z; }\n};\nvector <edge> e;\nvector <int> G[MAXN];\n  \nint main() {\n\tcin >> n >> m >> s >> t;\n\tint a, b;double c;\n\tfor (int i = 0; i < m; i++) {\n\t\tcin >> a >> b >> c;\n\t\te.push_back(edge(a, b, c));\n\t\tG[a].push_back(e.size() - 1);\n\t}\t\n}\n```\n\n\u53e6\u5916\uff0c\u5e38\u89c1\u7684\u56fe\u7684\u5b58\u50a8\u65b9\u5f0f\u8fd8\u6709\u90bb\u63a5\u77e9\u9635\uff0c\u90bb\u63a5\u8868\uff0c\u94fe\u5f0f\u524d\u5411\u661f\u3002\n\n# \u672c\u9898\u601d\u8def\n\n\u6709\u5411\u56fe\uff0c\u8981\u6c42\u76ee\u6807\u6700\u5927 \uff1f\u6700\u957f\u8def\u3002\n\n\u6ca1\u6709\u8d1f\u6743 \uff1f\u53ef\u4ee5\u7528 Dijkstra \u3002\n\n\u6570\u636e\u8303\u56f4\u8d85\u8fc7 1000 \uff1f\u4e0d\u53ef\u4ee5\u7528 Floyd \u3002\n\n\u800c\u4e14\u5f88\u663e\u7136\u9700\u8981\u628a\u6700\u77ed\u8def\u6a21\u677f\u4e2d\u7684\u52a0\u6539\u4e58\uff0c min \u6539 max \uff0c\u521d\u59cb\u5316\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a1\uff0c\u5176\u4ed6\u957f\u5ea6\u4e3a-1\u3002\n\n\n\n------------\n\n# Bellman-Ford \u7b97\u6cd5\u6c42\u6700\u77ed\u8def\n\n\nBellman-Ford \u7b97\u6cd5\u662f\u4e00\u79cd\u57fa\u4e8e\u677e\u5f1b\uff08 relax \uff09\u64cd\u4f5c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u652f\u6301\u8d1f\u6743\u3002\u80fd\u627e\u5230\u67d0\u4e2a\u7ed3\u70b9\uff08\u8d77\u70b9\uff09\u51fa\u53d1\u5230\u6240\u6709\u7ed3\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6216\u8005\u62a5\u544a\u67d0\u4e9b\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u3002\n\n## relax \uff08\u677e\u5f1b\uff09\u64cd\u4f5c\n\n\u8bbe\u8d77\u70b9\u4e3a $S$ \uff0c\u5b9a\u4e49 $dist[u]$ \u4e3a $S$ \u5230 $u$ \u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\n\n$relax(u,v)$ \u64cd\u4f5c\u5c31\u662f\u6307$dist[v]=min(dist[v],dist[u]+len(u,v))$  \u3002\n\n\u5176\u4e2d $len(u,v)$ \u662f\u6307\u8fb9 $(u,v)$ \u7684\u6743\u503c\uff08\u6216\u8005\u8bf4\u957f\u5ea6\uff09\u3002\n\n\u4e3a\u4ec0\u4e48 $relax$ \u53ef\u4ee5\u62ff\u6765\u6c42\u6700\u77ed\u8def\uff1f\n\n\u7b54\u6848\u8574\u542b\u5728\u5404\u4f4d\u80ce\u6559\u65f6\u90fd\u5b66\u8fc7\u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u4e2d\uff1a\u4e24\u8fb9\u4e4b\u548c\u5927\u4e8e\u7b2c\u4e09\u8fb9\uff0c\u5373 $dist[v]\\le dist[u]+len(u,v)$\u3002\n\n## \u5b9e\u73b0\n\n\u6709\u4e86\u4e0a\u9762\u7684\u829d\u58eb\uff0c Bellman \u7b97\u6cd5\u53ef\u4ee5\u8868\u793a\u5982\u4e0b\uff1a\n\n```\nwhile (1) {\n\trelax\u6240\u6709\u7684m\u6761\u8fb9;\n\tif (\u6ca1\u6709\u4e00\u6761\u8fb9\u53ef\u4ee5\u6267\u884crelax\u64cd\u4f5c)break;\n}\n```\n\n\u53ef\u4ee5\u6267\u884c $relax$ \u64cd\u4f5c\u5c31\u662f\u6307\u7528 $dist[u]+len(u,v)$ \u66f4\u65b0\u4e86$dist[v]$\u3002\n\n\u5982\u679c\u56fe\u4e2d\u6709 $S$ \u80fd\u5230\u8fbe\u7684\u8d1f\u73af\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u65e0\u9650\u5faa\u73af\uff0c\u5e94\u8be5\u5728\u5408\u9002\u7684\u65f6\u95f4\u9000\u51fa\u5e76\u62a5\u544a\u6ca1\u6709\u67d0\u4e9b\u6700\u77ed\u8def\uff0c\u8fd9\u4e2a\u5408\u9002\u7684\u65f6\u95f4\u7a0d\u540e\u4f1a\u8bb2\u3002\n\n\u8003\u8651\u6700\u77ed\u8def\u5b58\u5728\u7684\u60c5\u51b5\u3002\n\n\u7531\u4e8e\u4e00\u6b21\u677e\u5f1b\u64cd\u4f5c\u4f1a\u4f7f\u6700\u77ed\u8def\u7684\u8fb9\u6570\u81f3\u5c11 $+1$\uff0c\u800c\u6700\u77ed\u8def\u7684\u8fb9\u6570\u6700\u591a\u4e3a $n-1$ \u3002\u6240\u4ee5\u6700\u591a\u6267\u884c $n-1$ \u6b21\u677e\u5f1b\u64cd\u4f5c\uff0c\u5373\u6700\u591a\u5faa\u73af $n-1$ \u6b21\u3002\u5982\u679c\u80fd\u6267\u884c\u7b2c $n$ \u6b21\u5faa\u73af\u5219\u5e94\u8be5\u9000\u51fa\u5e76\u62a5\u544a\u5b58\u5728\u8d1f\u73af\u3002\n\n\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm)$ \u3002\n\n## \u4f2a\u4ee3\u7801\n\n\u63a5\u4e0b\u6765\u7684\u961f\u5217\u4f18\u5316\u7248\u4f1a\u7ed9\u5168 C++ \u4ee3\u7801\u3002\n\n```cpp\nvoid Bellman() {\n\trelax(u, v) {\n\t\tdist[v] = min(dist[v], dist[u] + edge_len(u, v));\n\t}\n\tfor (i = 1; i <= n; i++) {\n\t\tdist[i] = edge_len(S, i);\n\t}\n\tfor (i = 1; i < n; i++) {\n\t\tfor each edge(u, v) {\n\t\t\trelax(u, v);\n\t\t}\n\t}\n}\n```\n\n\n\n------------\n\n# SPFA\n\n\n\nSPFA \u662f Bellman \u7684\u961f\u5217\u4f18\u5316\u7248\u3002\n\n## \u5b9e\u73b0\n\n\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u90a3\u4e48\u591a\u65e0\u7528\u7684\u677e\u5f1b\u64cd\u4f5c\u3002\n\n\u5f88\u663e\u7136\uff0c\u53ea\u6709\u4e0a\u4e00\u6b21\u88ab\u677e\u5f1b\u7684\u7ed3\u70b9\u6240\u8fde\u63a5\u7684\u8fb9\uff0c\u624d\u6709\u53ef\u80fd\u5f15\u8d77\u4e0b\u4e00\u6b21\u7684\u677e\u5f1b\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u7528\u961f\u5217\u6765\u7ef4\u62a4\u201c\u54ea\u4e9b\u7ed3\u70b9\u53ef\u80fd\u4f1a\u5f15\u8d77\u677e\u5f1b\u64cd\u4f5c\u201d\uff0c\u5c31\u80fd\u53ea\u8bbf\u95ee\u5fc5\u8981\u7684\u8fb9\u4e86\u3002\n\n## SPFA\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\n\n```\nq = new queue();\nq.push(S);\nin_queue[S] = true;\nwhile (!q.empty()) {\n  u = q.pop();\n  in_queue[u] = false;\n  for each edge(u, v) {\n    if (relax(u, v) && !in_queue[v]) {\n      q.push(v);\n      in_queue[v] = true;\n    }\n  }\n}\n```\n\n## \u672c\u9898\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 5010;\nint n, m, s, t;\nstruct edge {\n\tint from, to;\n\tdouble w;\n\tedge(int x, int y, double z) { from = x; to = y; w = z; }\n};\nvector <edge> e;\nvector <int> G[MAXN];\nqueue <int> q;\nbool in_queue[MAXN];\ndouble dist[MAXN];\nvoid SPFA() {\n\tfor (int i = 1; i <= n; i++)dist[i] = -1;\n\tdist[s] = 1.00;\n\tq.push(s);\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tin_queue[u] = 0;\n\t\tfor (int i = 0; i < G[u].size(); i++) {\n\t\t\tint v = e[G[u][i]].to;\n\t\t\tif (dist[v] < dist[u] * e[G[u][i]].w) {\n\t\t\t\tdist[v] = dist[u] * e[G[u][i]].w;\n\t\t\t\tif (!in_queue[v]) { q.push(v); in_queue[v] = 1; }\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(0);//\u4e3a\u8f93\u5165\u8f93\u51fa\u52a0\u901f\n\tcin >> n >> m >> s >> t;\n\tint a, b;double c;\n\tfor (int i = 0; i < m; i++) {\n\t\tcin >> a >> b >> c;\n\t\te.push_back(edge(a, b, c));\n\t\tG[a].push_back(e.size() - 1);\n\t}\n\tSPFA();\n\tif (dist[t] < 0.00001)cout << \"orz\";\n\telse cout << fixed << setprecision(4) << dist[t];\n}\n\n\n\n\n```\n\n\nBellman \u7b97\u6cd5\u7684\u5176\u5b83\u4f18\u5316\u5f62\u5f0f \uff1a[\u77e5\u4e4e](https://www.zhihu.com/question/292283275/answer/484871888)\n\n\n------------\n\n# Dijkstra \u7b97\u6cd5\u6c42\u6700\u77ed\u8def\n\n\n\n\u53ea\u9002\u7528\u4e8e\u975e\u8d1f\u6743\u56fe\uff0c\u4f46\u590d\u6742\u5ea6\u53ef\u4ee5\u4f18\u5316\u5230\u5f88\u4f4e\u3002\n\n## \u5b9e\u73b0\n\n\u5c06\u6240\u6709\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408\uff1a\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u7684\u70b9\u96c6 $A$ \uff0c\u672a\u786e\u5b9a\u6700\u77ed\u8def\u7684\u70b9\u96c6 $B$ \u3002\n \n\u7531\u4e8e\u8d77\u70b9 $S$ \u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a 0 \uff0c\u56e0\u6b64\u4e00\u5f00\u59cb $A$ \u91cc\u53ea\u6709   $S$ \u3002\n\n\u7136\u540e\u6267\u884c\u4ee5\u4e0b\u5faa\u73af\uff1a\n\n1. \u5bf9\u521a\u521a\u88ab\u52a0\u5165\u7b2c\u4e00\u4e2a\u96c6\u5408\u7684\u7ed3\u70b9\u7684\u6240\u6709 **\u51fa\u8fb9** \u6267\u884c\u677e\u5f1b\u64cd\u4f5c\uff1b\n\n2. \u4ece $B$ \u4e2d\u9009\u4e00\u4e2a\u70b9\uff0c\u8be5\u70b9\u5230 $A$ \u4e2d\u4e00\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u662f $B$ \u4e2d\u6700\u5c0f\u7684\uff0c\u5c06\u8be5\u70b9\u4ece $B$ \u79fb\u81f3 $A$ \uff1b\n\n3. \u68c0\u67e5 $B$ \u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u7a7a\u5219\u7b97\u6cd5\u7ed3\u675f\u3002\n\n## \u590d\u6742\u5ea6\n\n\u666e\u901a\u505a\u6cd5\u662f $n^2$ \u3002\n\n\u4f18\u5148\u961f\u5217\u4f18\u5316 $mlogm$ \u3002\n\n\u6590\u6ce2\u90a3\u5951\u5806\u4f18\u5316 $nlogn+m$ \u3002\n\nZKW\u7ebf\u6bb5\u6811\u4f18\u5316 $mlogn+n$ \u3002\n\n## \u4ee3\u7801\n\n\u4ee3\u7801\u6211\u8d34\u4e00\u4e2a\u4e4b\u524d\u505a\u7684\u6a21\u677f\u9898\uff0c\u91c7\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u3002\n\n[\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u5f31\u5316\u7248\uff09](https://www.luogu.com.cn/problem/P3371)\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,s;\nstruct edge{\n\tint from,to,w;\n\tedge(int a,int b,int c){\n\t\tfrom=a;to=b;w=c;\n\t}\n};\nstruct node{\n\tint u,d;\n\tbool operator < (node b)const{\n\t\treturn this->d > b.d;\n\t}\n\t\n};\nvector <edge> e;\nvector <int> G[100004];\nbool vis[100004];\nint d[100004];\nvoid Dij(int x){\n\tfor(int i=1;i<=n;i++)d[i]=1e9;\n\td[x]=0;\n\tpriority_queue <node> q;\n\tq.push((node){x,0});\n\twhile(!q.empty()){\n\t\tint now=q.top().u;q.pop();\n\t\tif(vis[now])continue;\n\t\tvis[now]=1;\n\t\tfor(int i=0;i<G[now].size();i++){\n\t\t\tedge ed = e[G[now][i]];\n\t\t\tif(d[ed.to]>d[ed.from]+ed.w){\n\t\t\t\td[ed.to]=d[ed.from]+ed.w;\n\t\t\t\tq.push((node){ed.to,d[ed.to]});\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tios::sync_with_stdio(0);\n\tcin>>n>>m>>s;\n\tint a,b,c;\n\tfor(int i=0;i<m;i++){\n\t\tcin>>a>>b>>c;\n\t\te.push_back(edge(a,b,c));\n\t\tG[a].push_back(e.size()-1);\n\t}\n\tDij(s);\n\tfor(int i=1;i<=n;i++){\n\t\tif(d[i]==1e9)cout<<2147483647<<\" \";\n\t\telse cout<<d[i]<<\" \";\n\t}\n}\n\n\n\n```\n\n\n\u8f9b\u82e6\u4e00\u4e0b\u5348\uff0c\u7559\u4e2a\u8d5e\u518d\u8d70\u5457~",
        "postTime": 1626425189,
        "uid": 332549,
        "name": "\u5e7d\u7075\u7279\u5de5",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P2784  \u5316\u5b661\uff08\u6700\u77ed\u8def\uff09"
    },
    {
        "content": "\u4e0d\u77e5\u4e3a\u4f55\uff0c\u8fd9\u9898\u7528dijstra\u505a\u6700\u540e\u7684\u4e00\u4e2a\u70b9\u8d85\u65f6\u4e86\uff0c\u65e0\u5948\u4e4b\u4e0b\u53ea\u80fd\u7528spfa\u8fd9\u4e2a\u4e0d\u7a33\u5b9a\u7684\u7b97\u6cd52333\n\n```cpp\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m,s,e;\nint a[2000010],b[2000010];\ndouble c[2000010];\nint first[5010],next[2000010];\ndouble dis[5010];\nbool visited[5010];\nint q[10010];\nvoid dijstra(){                                            \u4f1a\u8d85\u65f6\u7684dijstra\u2026\u2026\n    memset(dis,0,sizeof(dis));\n    memset(visited,false,sizeof(visited));\n    int u,k,i,j;\n    dis[s]=1;                                            \u5c06\u521d\u59cb\u70b9\u7684\u8ddd\u79bb\u6807\u8bb0\u4e3a1\n    for(i=1;i<=n;i++){\n        u=0;\n        for(j=1;j<=n;j++){\n            if(!visited[j]&&dis[j]>dis[u]){\n                u=j;\n            }\n        }                                            \u627e\u5230dis\u6700\u5927\u7684\u84dd\u70b9\n        visited[u]=true;                                \u5e76\u5c06\u5176\u6807\u8bb0\u4e3a\u767d\u70b9\n        k=first[u];\n        while(k!=-1){\n            if(!visited[b[k]]&&dis[b[k]]<dis[u]*c[k]){            \u904d\u5386\u4e0e\u767d\u70b9u\u6709\u8fb9\u76f8\u8fde\u7684\u6240\u6709\u84dd\u70b9\n                dis[b[k]]=dis[u]*c[k];                    \u66f4\u65b0dis\n            }\n            k=next[k];\n        }\n    }\n}\nvoid spfa(){\n    int fir=0,las=0,u,k;\n    memset(dis,0,sizeof(dis));\n    memset(visited,false,sizeof(visited));\n    visited[s]=true;\n    dis[s]=1;                                        \u5c06\u521d\u59cb\u70b9\u7684dis\u6807\u8bb0\u4e3a1\n    q[0]=s;                                        \u5c06\u521d\u59cb\u70b9\u653e\u8fdb\u961f\u5217\n    while(fir<=las){                                \u961f\u5217\u5185\u5143\u7d20\u6570\u91cf>=1\n        u=q[fir];                                    \u53d6\u51fa\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u70b9u\n        k=first[u];\n        while(k!=-1){                                \u904d\u5386\u4e0eu\u76f8\u90bb\u7684\u6240\u6709\u70b9\n            if(dis[b[k]]<dis[u]*c[k]){\n                dis[b[k]]=dis[u]*c[k];                \u66f4\u65b0dis\n                if(!visited[b[k]]){\n                    visited[b[k]]=true;                \u5982\u679c\u8be5\u70b9\u7684dis\u88ab\u66f4\u65b0\u4e14\u8be5\u70b9\u4e0d\u5728\u961f\u5217\u5185\n                    q[(++las)%n]=b[k];                \u5c31\u5c06\u8be5\u70b9\u653e\u8fdb\u961f\u5217\n                }\n            }\n            k=next[k];\n        }\n        fir++;                                    \u5934\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u70b9\n        visited[u]=false;                            \u5c06\u70b9u\u6807\u8bb0\u4e3a\u672a\u8fdb\u5165\u961f\u5217\n    }\n}\nint main(){\n    memset(first,-1,sizeof(first));\n    int i;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&e);\n    for(i=1;i<=m;i++){\n        scanf(\"%d%d%lf\",&a[i],&b[i],&c[i]);\n        next[i]=first[a[i]];                                        \u94fe\u5f0f\u524d\u5411\u661f\u8bb0\u5f55\u56fe\n        first[a[i]]=i;\n    }\n    spfa();\n    if(dis[e]){\n        printf(\"%.4lf\\n\",dis[e]);\n    }else{\n        printf(\"orz\\n\");\n    }\n}\n```",
        "postTime": 1471511920,
        "uid": 21903,
        "name": "vegetabird",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2784 \u3010\u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210\u3011"
    },
    {
        "content": "Bfs\u641c\u7d22\uff0c\u5355\u9879\u8fb9\uff0c\u6ce8\u610f\u4e00\u4e0b\u4ee3\u7801\u4e2d\u6807\u6ce8\u7684\u4e24\u4e2a\u526a\u679d\u3002\n\n\nPS\uff1a\u611f\u8c22\u697c\u4e0b\u8ba9\u6211\u5b66\u4e60\u4e86double\u7684\u8bfb\u5165\u4f18\u5316~~~\n\n\n\n\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,en,s,t,x,y,head[5010];\ndouble z,ans[5010];bool vis[5010];\nstruct Node\n{\n    int to,next;\n    double val;\n}e[2000010];\nqueue<int>q;\ninline int get_num()\n{\n    int now=0;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9'){\n        now=(now<<1)+(now<<3)+ch-'0';\n        ch=getchar();\n    }\n    return now;\n}\ninline double get_double(){\n    double now=0,w=1;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9'){\n        now=now*10+ch-'0';\n        ch=getchar();\n    }\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9'){\n        now=now*10+ch-'0';\n        w=w*0.1;\n        ch=getchar();\n    }\n    return now*w;\n}\ninline void add(int u,int v,double z)\n{\n    e[++en].to=v;\n    e[en].val=z;\n    e[en].next=head[u];\n    head[u]=en;\n}\nvoid bfs()\n{\n    q.push(s);ans[s]=1;vis[s]=1;//\u5165\u961f\u6253\u6807\u8bb0\n    while(q.size()){\n        int now=q.front();q.pop();vis[now]=0;//\u51fa\u961f\u6e05\u6807\u8bb0\n        for(int i=head[now];i;i=e[i].next){\n            if(ans[e[i].to]<ans[now]*e[i].val){//\u66f4\u65b0\u7b54\u6848\n                if(vis[e[i].to]==0){//\u5224\u65ad\u5143\u7d20\u662f\u5426\u5728\u961f\u4e2d\n                    q.push(e[i].to);\n                    vis[e[i].to]=1;//\u5165\u961f\u6253\u6807\u8bb0\n                }\n                ans[e[i].to]=ans[now]*e[i].val;\n            }\n        }\n    }\n}\nint main()\n{\n    n=get_num();m=get_num();s=get_num();t=get_num();//\u8bfb\u5165\u4f18\u5316\n    for(int i=1;i<=m;i++){\n        x=get_num();y=get_num();z=get_double();\n        add(x,y,z);\n    }\n    bfs();\n    if(ans[t]==0)puts(\"orz\");\n    else printf(\"%.4lf\",ans[t]);//\u6ce8\u610f\u4fdd\u75594\u4f4d\u5c0f\u6570\uff08\u9898\u76ee\u4e2d\u8bf4\u56db\u820d\u4e94\u5165\uff09\n    return 0;\n}\n```",
        "postTime": 1507461655,
        "uid": 19182,
        "name": "Johnson_sky",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2784 \u3010\u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u53d8\u5f0f\u7684Dijkstra\uff0c\u6c42\u6700\u957f\u8def\uff0c\u53ea\u9700\u8981\u4fee\u6539\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u677e\u5f1b\u6761\u4ef6\u5c31\u53ef\u4ee5\u4e86\uff0c\u5e76\u4e0d\u96be\u3002\n\n\u4f46\u662f\u4ece\u6570\u636e\u8303\u56f4\u6765\u770b\u90bb\u63a5\u77e9\u9635\u5f0f\u4e07\u4e07\u4e0d\u884c\u7684\uff0c\u4f1a\u7206\u5185\u5b58\uff0c\u6211\u7684\u540c\u5b66\u624b\u5de5\u4e8c\u5206\uff0c\u53d1\u73b0\u90bb\u63a5\u77e9\u9635\u6700\u591a80\u5206\u3002\n\n\u5c0f\u4f19\u4f34\u4eec\u8fd8\u662f\u5199\u90bb\u63a5\u8868\u5427\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u3002\n\nps\uff1a\u6d1b\u8c37\u7684cpp\u9898\u89e3\u63d0\u4ea4\u540e\u600e\u4e48\u90fd\u4e0d\u5e26\u7f29\u8fdb\u7684\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\n\n```cpp\n\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <cstdio>\nusing namespace std;\nconst int maxn=5005;\ntypedef pair<int,double> pp;\nint n,m,s,t;\nvector<pp>G[maxn];\ndouble d[maxn];\n\nvoid solve(){\n    bool f[maxn];\n    memset(f,false,sizeof(f));\n    for(int i=1;i<=n;i++)\n        d[i]=0;\n    d[s]=1;\n    for(int i=1;i<=n;i++){\n        int flag=-1;\n        double minn=-2;\n        for(int i=1;i<=n;i++)\n            if(!f[i])\n                if(flag==-1 || d[i]>minn)\n                    flag=i,minn=d[i];\n        f[flag]=true;\n        for(int i=0;i<G[flag].size();i++){\n            d[G[flag][i].first]=max(d[G[flag][i].first],d[flag]*G[flag][i].second);\n        }\n    }\n    if(d[t]==0) printf(\"orz\");\n    else printf(\"%.4lf\\n\",d[t]);\n    \n    return;\n}\n\nint main(){\n    //freopen(\"1.txt\",\"r\",stdin);\n    //freopen(\"2.txt\",\"w\",stdout);\n    std::ios::sync_with_stdio(false);\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++){\n        int u,v;double w;\n        scanf(\"%d%d%lf\",&u,&v,&w);\n        pp s(v,w);\n        G[u].push_back(s);\n    }\n    solve();\n\n    return 0;\n}\n\n```",
        "postTime": 1468852793,
        "uid": 8874,
        "name": "Kwork",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2784 \u3010\u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210\u3011"
    },
    {
        "content": "\u5148\u6765\u89e3\u91ca\u4e00\u4e0b\u697c\u4e0b\u7684 dj\u4e3a\u4f55\u4e0d\u884c\n\n\u9996\u5148 \u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4 \u8fb9m\u6700\u591a 2000000 \u4e2a \u800c \u70b9n\u6700\u591a\u624d 5000 \u4e2a\n\ndj\u7528\u7684\u662f\u8fb9\u66f4\u65b0 \u800c spfa\u7528\u7684\u662f\u70b9\u66f4\u65b0\n\n\u53ef\u89c1\u8fd9\u4e2a\u9898\u5f88\u5bb9\u6613\u5361dj\n\n\u51b5\u4e14\u697c\u4e0b\u8fd8\u6ca1\u5199\u5806\u4f18\u5316\n\n\n2000000 \u8fd9\u4e2a\u6570\u6709\u70b9\u5927\u6240\u4ee5\u7528\u7684\u52a8\u6001\u90bb\u63a5\u8868 \u7a0d\u591a\u7528\u4e00\u4e9b\u65f6\u95f4\u6362\u7a7a\u95f4\uff08\u65f6\u95f4\u6ca1\u591a\u5c11\u5dee\u522b \u7a7a\u95f4\u5012\u662f\u5dee\u4e86\u4e0d\u5c11\n\n\u9759\u6001\u5c0f\u6570\u636e\u4e5f\u8981\u5360\u90a3\u4e48\u5927\u5185\u5b58\u5b9e\u5728\u611f\u89c9\u592a\u6d6a\u8d39\n\n\u611f\u89c92000000\u5c31\u662f\u6765\u5413\u5413\u4f60\uff0c\u6240\u4ee5\u5f00\u9759\u6001\u90bb\u63a5\u8868\u4e07\u4e00\u7206\u70b8\u4e86\u4e00\u5206\u4e5f\u5f97\u4e0d\u4e86\uff0c\u591a\u6028\uff01\uff08\u5e94\u8be5\u6ca1\u6709\u9898\u90a3\u4e48 keng23333\n\n###\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<vector>\nusing namespace std;\nconst int N=5001;\nint n,m,u,v,t1,t2;\ndouble t3;\ndouble dist[N];\nbool in[N];\nstruct node{\n    int to;\n    double data;\n};\nvector<node> e[N];\ninline double getdouble(){\n    double data=0,w=1;char ch=0;\n    while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n    if(ch=='-') w=-w;\n    while(ch!='.'&&ch>='0'&&ch<='9') data=data*10+ch-'0',ch=getchar();\n    if(ch=='.'){\n    ch=getchar();\n    while(ch>='0'&&ch<='9') w*=0.1,data=data*10+ch-'0',ch=getchar();    \n    }\n    return data*w;    \n}\ninline int getint(){\n    int data=0,w=1;char ch=0;\n    while(ch!='-'&&(ch<'0'||ch>'9')) ch=getchar();\n    if(ch=='-') w=-w,ch=getchar();\n    while(ch>='0'&&ch<='9') data=data*10+ch-'0',ch=getchar();\n    return data*w;\n}\ninline void add(int x,int y,double z){\n    node t;\n    t.to=y;t.data=z;\n    e[x].push_back(t);\n}\nvoid spfa(int x){\n    queue<int> q;\n    dist[x]=1.0;\n    q.push(x);\n    in[x]=1;\n    while(!q.empty()){\n        int now=q.front();\n        q.pop();\n        in[now]=0;\n        for(int i=0;i<e[now].size();i++){\n            if(dist[e[now][i].to]<dist[now]*e[now][i].data&&dist[now]!=-1){\n                dist[e[now][i].to]=dist[now]*e[now][i].data;\n                if(!in[e[now][i].to]){\n                    q.push(e[now][i].to);\n                    in[e[now][i].to]=1;\n                }\n            }\n        }\n    }\n}\nint main(){\n    n=getint();m=getint();u=getint();v=getint();\n    fill(dist,dist+N,-1);\n    for(int i=1;i<=m;i++){\n        t1=getint();t2=getint();t3=getdouble();\n        add(t1,t2,t3);\n    }\n    spfa(u);\n    if(dist[v]==-1){\n        printf(\"orz\");\n    }\n    else printf(\"%.4lf\",dist[v]);\n}\n//\u8f93\u51faorz\u6bd4\u8f93\u51fa-1\u597d\u73a9\u591a\u4e86\n\n```",
        "postTime": 1506167725,
        "uid": 27495,
        "name": "bymlg001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2784 \u3010\u5316\u5b661\uff08chem1\uff09- \u5316\u5b66\u5408\u6210\u3011"
    }
]