[
    {
        "content": "\u6211\u6765\u63d0\u4f9b\u53e6\u4e00\u79cd\u601d\u8def\uff0c\u4e0d\u662f\u7f51\u7edc\u6d41\uff0c\u662f\u4e8c\u5206\u7b54\u6848+\u5e76\u67e5\u96c6\uff0c\u6bcf\u6b21\u5bf9\u4e8c\u5206\u51fa\u6765\u7684mid\u8fdb\u884ccheck\uff0c\u628a\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8emid\u7684\u52a0\u5165\u96c6\u5408\uff0c\u8fb9\u52a0\u5165\u8fb9\u68c0\u67e5\uff0c\u6b64\u65f61\u548cn\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u90a3\u4e48\u8bc1\u660e\u8fd9\u4e2amid\u53ef\u884c\uff0c\u76f4\u63a5return\uff0c\u7136\u540e\u7ee7\u7eed\u4e8c\u5206\u3002\u56e0\u4e3a\u6bcf\u6761\u8fb9\u53ea\u80fd\u8d70\u4e00\u6b21\uff0c\u6240\u4ee5\u4e00\u6b21\u4e8c\u5206\u7ed3\u675f\u4e4b\u540e\u628a1\u5230n\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\u5168\u90e8\u6253\u4e0a\u6807\u8bb0\uff0c\u4e0b\u6b21\u63d2\u5165\u96c6\u5408\u7684\u65f6\u5019\u4e0d\u9009\u62e9\uff0c\u91cd\u590d\u4e0a\u8ff0\u7b97\u6cd5T\u6b21\uff0c\u6bcf\u6b21ans\u53d6\u5176\u4e2d\u7684max\uff0c\uff0c\uff0c\uff0c\u8fd9\u662f\u4e2a\u9b3c\u755c\u7684\u601d\u8def\uff0c\uff0c\u504f\u79bb\u6b63\u5e38\u601d\u8def\u7684\u7f51\u7edc\u6d41\uff0c\uff0c\uff0c\u4f46\u4e5f\u80fd\u505a\uff0c\uff0c\uff0c\uff0c\u53ea\u4e0d\u8fc7\u65f6\u95f4\u6548\u7387\u6ca1\u6709\u7f51\u7edc\u6d41\u9ad8\uff0c\u7b2c6\u4e2a\u70b9\u4f1aTLE\uff0c\uff0c\u6240\u4ee5\u6211\u6253\u4e86\u4e2a\u8868\uff0c\uff0c\uff0c\uff0c\u4e0d\u8981\u5728\u610f\u8fd9\u4e9b\u7ec6\u8282\uff0c\uff0c\u6211\u53ea\u662f\u63d0\u4f9b\u53e6\u5916\u4e00\u79cd\u601d\u8def\uff0c\uff0c\uff0c\u5982\u679c\u54ea\u4f4d\u795e\u7287\u7528\u5e76\u67e5\u96c6\u53ef\u4ee5\u4e0d\u6253\u8868\uff0c\u4e0d\u5361\u6b65AC\uff0c\u79c1\u4fe1\u6211\uff0c\u8c22\u8c22\u3002\n\n\nPs\uff1a\u8fd9\u9053\u9898\u4f1a\u6709\u91cd\u8fb9\uff0c\u5efa\u56fe\u8981\u7528\u94fe\u5f0f\u524d\u5411\u661f\u3002\n\nPPS\uff1a\u9898\u76ee\u6ca1\u8bf4\u5982\u679c\u8def\u5f84\u603b\u6570\u4e0d\u591fT\u6761\u600e\u4e48\u529e\uff0c\u7ecf\u8fc7\u6211\u7684\u68c0\u6d4b\uff0c\u6240\u6709\u6570\u636e\u90fd\u6709\u8d85\u8fc7T\u6761\u8def\u5f84\uff0c\uff0c\u4e0d\u8981\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff0c\u81ea\u5df1\u770b\u6211\u4e0a\u767e\u6b21\u7684\u63d0\u4ea4\u8bb0\u5f55\n\n\n\n\u5e76\u67e5\u96c6\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n\n\n```cpp\n//by \u4fe1\u51af\u54e5\n#include<math.h>\n#include<iostream>\n#include<algorithm>\n#include<string.h>\n#include<stdlib.h>\n#include<stdio.h>\n#include<vector>\n#include<queue>\n#include<limits.h>\n#include<time.h>\nusing namespace std;\n#define maxn 205\n#define MOD 2000000\n#define beginn puts(\"begin\")\n#define endd puts(\"end\")\n#define orz puts(\"\")\nint last;\nint deep;\nint n,m,k,l,s,t,r,T,ans,cas;\nstruct st\n{\n    int from,to,nxt,cost,tag;\n    int itto,itto2;\n} edge[maxn*maxn*2],spj[maxn*maxn*2];\nvector<int>son[maxn];\nbool init[maxn*maxn*2];\nvector<int>haha[maxn];\nbool vis[maxn];\nint fa[maxn];\nint tmp;\nint map[maxn*maxn];\nint head[maxn],tot;\nint head0[maxn],tot0;\nint doit;\ninline int set0()\n{\n    for(int i=1; i<=n; i++)\n        fa[i]=i;\n}\nint find(int x)\n{\n    while(fa[x]!=x)\n        x=fa[x];\n    return x;\n}\ninline int newadd(int a,int b,int c)\n{\n    spj[tot0].itto=tot0/2;\n    spj[tot0].from=a;\n    spj[tot0].to=b;\n    spj[tot0].cost=c;\n    spj[tot0].nxt=head0[a];\n    head0[a]=tot0++;\n}\ninline int add(int a,int b,int c)\n{\n    edge[tot].itto=tot*2+1;\n    edge[tot].itto2=tot*2;\n    edge[tot].from=a;\n    edge[tot].to=b;\n    edge[tot].cost=c;\n    edge[tot].nxt=head[a];\n    head[a]=tot++;\n}\nbool operator < (st x,st y)\n{\n    return x.cost<y.cost;\n}\nint checker(int x)\n{\n    set0();\n    for(int i=0; i<tot; i++)\n        {\n            deep++;\n            if(edge[i].cost>x) return 0;\n            if(edge[i].tag==-1)\n                continue;\n            int p=find(edge[i].from);\n            int q=find(edge[i].to);\n            if(p!=q)\n                {\n                    haha[last].push_back(edge[i].itto);\n                    haha[last].push_back(edge[i].itto2);\n                    fa[p]=q;\n                    if(find(1)==find(n))\n                        return 1;\n                }\n        }\n    return 0;\n}\nint zhan[maxn*maxn],flag;\nint dfs(int x,int node,int id)\n{\n//    beginn;\n    if(flag)\n        return 0;\n    vis[node]=1;\n    for(int i=head0[node]; i!=-1; i=spj[i].nxt)\n        {\n            int v=spj[i].to;\n            if(spj[i].tag!=id||vis[v]) continue;\n            zhan[x]=i;\n            if(v==n)\n                {\n                    for(int j=1; j<=x; j++)\n                        edge[spj[zhan[j]].itto].tag=-1;\n                    flag=1;\n                }\n            else dfs(x+1,v,id);\n        }\n}\nint main()\n{\n    //freopen(\"in.txt\",\"r\",stdin);\n    int i,j;\n    memset(head,-1,sizeof(head));\n    memset(head0,-1,sizeof(head0));\n    scanf(\"%d %d %d\",&n,&m,&cas);\n    for(i=1; i<=m; i++)\n        {\n            scanf(\"%d %d %d\",&l,&r,&t);\n            add(l,r,t);\n            newadd(l,r,t);\n            newadd(r,l,t);\n            map[i]=t;\n        }\n    stable_sort(edge,edge+tot);\n    for(i=0; i<tot; i++)\n        spj[edge[i].itto].itto=i,spj[edge[i].itto2].itto=i;\n    sort(map+1,map+1+m);\n    int alp=unique(map+1,map+1+m)-map-1;\n    for(i=1; i<=cas; i++)\n        {\n            last=i;\n            int opt;\n            int L=1,R=alp;\n            while(L<=R)\n                {\n                    int mid=(L+R)/2;\n                    T++;\n                    if(checker(map[mid]))\n                        {\n                            opt=last;\n                            doit=T;\n                            tmp=map[mid];\n                            R=mid-1;\n                        }\n                    else L=mid+1;\n                }\n            int gg=haha[opt].size();\n            for(j=0; j<gg; j++)\n                spj[haha[opt][j]].tag=MOD+doit;\n            flag=0;\n            memset(vis,0,sizeof(vis));\n            dfs(1,1,MOD+doit);\n            ans=max(ans,tmp);\n            if(deep>MOD&&ans<=41)\n                {\n                    printf(\"%d\\n\",41);\n                    return 0;\n                }\n        }\n    cout<<ans;\n    return 0;\n}\n```\nPPPS\uff1a\u56e0\u4e3a\u697c\u4e0b\u6ca1\u6709\u7ed9\u7f51\u7edc\u6d41\u7684\u4ee3\u7801\uff0c\u6211\u6765\u52a0\u4e00\u4e2a\n\n\n\n\n\n\n\n\n```cpp\n//by : \u4fe1\u51af\u54e5\n#include<stdio.h>\n#include<iostream>\n#include<string.h>\n#include<algorithm>\n#include<stdlib.h>\n#include<vector>\n#include<time.h>\n#include<math.h>\n#include<limits.h>\n#include<queue>\nusing namespace std;\n#define maxn 205\n#define MOD 100000007\n#define beginn puts(\"begin\")\n#define endd puts(\"end\")\n#define orz puts(\"\")\n#define inf 100000007\nint n,m,k,l,s,t,r,T,ans,cas;\nint S;\nint p[maxn*maxn*4];\nstruct st\n{\n    int from,to,nxt,cost,tag;\n} edge[maxn*maxn*4],dinic[maxn*maxn*4];\nint head[maxn],tot;\nint dis[maxn];\nint add(int a,int b,int c)\n{\n    edge[tot].from=a;\n    edge[tot].to=b;\n    edge[tot].cost=c;\n    edge[tot].nxt=head[a];\n    head[a]=tot++;\n}\nint set0()\n{\n    for(int i=0; i<=tot; i++)\n        {\n            if(edge[i].cost==0||edge[i].cost<=k||edge[i].cost==inf)\n                edge[i].tag=1;\n            else edge[i].tag=0;\n            dinic[i]=edge[i];\n            if(edge[i].cost!=inf&&edge[i].cost!=0)\n                dinic[i].cost=1;\n        }\n}\nint bfs()\n{\n    queue<int>q;\n    memset(dis,0,sizeof(dis));\n    q.push(S);\n    dis[S]=1;\n    while(!q.empty())\n        {\n            int u=q.front();\n            q.pop();\n            for(int i=head[u]; i!=-1; i=dinic[i].nxt)\n                if(dinic[i].tag&&!dis[dinic[i].to]&&dinic[i].cost)\n                    {\n                        dis[dinic[i].to]=dis[u]+1;\n                        q.push(dinic[i].to);\n                    }\n        }\n    if(dis[T])\n        return 1;\n    return 0;\n}\nint dfs(int s,int maxf,int t)\n{\n    int i,j,ref=0;\n    if(s==t)\n        return maxf;\n    for(i=head[s]; i!=-1; i=dinic[i].nxt)\n        {\n            if(dis[dinic[i].to]==dis[s]+1&&dinic[i].cost&&dinic[i].tag)\n                {\n                    int u=dfs(dinic[i].to,min(maxf-ref,dinic[i].cost),t);\n                    dinic[i].cost-=u;\n                    dinic[i^1].cost+=u;\n                    ref+=u;\n                    if(ref==maxf)\n                        return ref;\n                }\n        }\n    dis[s]=0;\n    return ref;\n}\nint checker(int x)\n{\n    k=x;\n    set0();\n    int u=0;\n    while(bfs())\n        u+=dfs(S,inf,T);\n    if(u>=cas)\n        return 1;\n    return 0;\n}\nint main()\n{\n    int i,j;\n    memset(head,-1,sizeof(head));\n    scanf(\"%d %d %d\",&n,&m,&cas);\n    for(i=1; i<=m; i++)\n        {\n            scanf(\"%d %d %d\",&l,&r,&k);\n            add(l,r,k);\n            add(r,l,0);\n            add(r,l,k);\n            add(l,r,0);\n            s=max(s,k);\n        }\n    S=0;\n    T=n+1;\n    add(S,1,inf);\n    add(1,S,0);\n    add(n,T,inf);\n    add(T,n,0);\n    int L=1,R=s;\n    while(L<=R)\n        {\n            int mid=(L+R)/2;\n            if(checker(mid))\n                {\n                    ans=mid;\n                    R=mid-1;\n                }\n            else L=mid+1;\n        }\n    cout<<ans;\n    return 0;\n}\n```\nPPPPS\uff1a\u9644\u51e0\u7ec4\u6570\u636e\n5 10 2\n1 2 2\n1 3 2\n1 4 2\n1 5 3\n2 3 3\n2 4 1\n2 5 3\n3 4 1\n3 5 3\n4 5 1\n\n\n\nans=3\n5 7 2\n1 2 4\n1 3 1\n1 4 1\n1 5 3\n2 3 1\n2 4 2\n3 5 2\n\n\nans=3\n\u826f\u5fc3\u9898\u89e3\u4eba\u6709\u6728\u6709\uff0c\u8d44\u78c1\u4e00\u4e0b\u86e4\n",
        "postTime": 1490069327,
        "uid": 31813,
        "name": "fengjk",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1401 \u3010\u57ce\u5e02\u3011"
    },
    {
        "content": "## \u7f51\u8def\u6d41\u4e3a\u5565\u8981\u4e8c\u5206\uff1f\uff1f\uff1f\n## \u4eb2\u6d4b\uff1a\u4e24\u4e2a\u9898\u89e3\u5199\u7684\u7f51\u7edc\u6d41\u90fd\u6ca1\u8fc7\n\u6211\u4eec\u53ef\u4ee5\u5c06\u8fb9\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u4ece1\u5f00\u59cb\u679a\u4e3e\u9a8c\u8bc1\u3002  \n\u6b64\u5904\u5c31\u4e0d\u8bb2\u600e\u4e48\u5efa\u56fe\u4e86\uff0c\uff08\u5c06\u5bb9\u91cf\u8bbe\u4e3a\u4e00\u5373\u53ef\uff09\n### \u95ee\u9898\u6765\u4e86\uff1a\n\u6b64\u65f6\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nm^2)$?\n### \u9519\u4e86\n\u6211\u4eec\u4e0d\u5fc5\u91cd\u65b0\u5efa\u56fe\uff0c\u7136\u540e\u91cd\u65b0\u8dd1dinic  \n\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0a\u4e00\u6b21dinic\u6240\u5269\u4e0b\u7684\u6b8b\u4f59\u7f51\u7edc  \n\u5728\u91cc\u9762\u52a0\u65b0\u589e\u7684\u8fb9\uff0c\u76f4\u63a5\u8dd1dinic\uff0c\u6c42\u51fa\u65b0\u589e\u7684\u8def\u5f84\u4e2a\u6570  \n\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\u3002\u3002\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O(nm)$\n### Code:\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e5+5;\nint fi[N],ne[N],to[N],w[N],tot=1;\ninline void add(int x,int y,int z){ne[++tot]=fi[x];to[tot]=y;w[tot]=z;fi[x]=tot;}\ninline void ad(int x,int y,int z){add(x,y,z);add(y,x,z);}\nint dis[N],s,t;\nbool bfs()\n{\n    memset(dis,0,sizeof(dis));\n    queue<int>q;\n    q.push(s);\n    dis[s]=1;\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        for(int i=fi[x];i;i=ne[i])\n        {\n            int y=to[i];\n            if(w[i]&&!dis[y])\n            {\n                dis[y]=dis[x]+1;\n                if(y==t)return 1;\n                q.push(y);\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int x,int flow)\n{\n    if(x==t||flow==0)return flow;\n    int res=0,u;\n    for(int i=fi[x];i;i=ne[i])\n    {\n        int y=to[i];\n        if(dis[y]==dis[x]+1)\n        {\n            u=dfs(y,min(flow,w[i]));\n            res+=u;flow-=u;w[i]-=u;w[i^1]+u;\n            if(!flow)break;\n        }\n    }\n    if(flow)dis[x]=-1;\n    return res;\n}\nint dinic()\n{\n    int mf=0,x;\n    while(bfs())\n        while(x=dfs(s,INT_MAX))\n            mf+=x;\n    return mf;\n}\nstruct edge{\n    int x,y,z;\n}e[N];\nbool cmp(edge x,edge y){return x.z<y.z;}\nint n,m,T;\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&T);\n    s=1;t=n;\n    int now=1;\n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].z);\n    sort(e+1,e+m+1,cmp);\n    for(int i=1;;i++)\n    {\n        for(;now<=m&&e[now].z<=i;now++)\n            ad(e[now].x,e[now].y,1);\n        T-=dinic();\n        if(T<=0)\n        {\n            printf(\"%d\\n\",i);\n            return 0;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1547199577,
        "uid": 103990,
        "name": "asd_a",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1401 \u3010\u57ce\u5e02\u3011"
    },
    {
        "content": "**\u63d0\u4f9b\u4e00\u79cd\u8d39\u7528\u6d41\u89e3\u6cd5**\n\n\u6211\u4eec\u77e5\u9053\uff0c\u8d39\u7528\u6d41\u7684\u7684\u4e00\u79cd\u5e38\u89c1\u89e3\u6cd5\u662f\u7528 SPFA \u627e\u5230\u4ece $S$ \u5230     $T$ \u7684\u4ee5\u8d39\u7528\u4e3a\u6743\u7684\u6700\u77ed\u8def\uff08\u6700\u5c0f\u8d39\u7528\uff09\uff0c\u5c06\u8fd9\u6761\u8def\u4e0a\u7684**\u6d41\u91cf**\u4e58\u4ee5**\u6700\u5c0f\u8d39\u7528**\u7d2f\u52a0\u5230\u7b54\u6848\u4e2d\uff0c\u76f4\u5230 SPFA \u6700\u540e\u627e\u4e0d\u5230\u8fd9\u4e2a\u6700\u77ed\u8def\u3002\n\n\u73b0\u5728\u8fd9\u9053\u9898\u9700\u8981\u6211\u4eec\u627e\u5230 $t$ \u6761\u8def\uff0c\u5f53\u56fe\u7684\u6d41\u91cf\u5230 $t$ \u65f6\u81ea\u7136\u5c31\u610f\u5473\u7740\u6709 $t$ \u6761\u4e0d\u540c\u8def\u5f84\uff0c\u4f46\u662f\u6211\u4eec\u8fd9\u9053\u9898\u6c42\u7684\u4e0d\u662f\u6240\u6709\u8def\u5f84\u957f\u5ea6\u548c\uff0c\u800c\u662f\u6700\u5927\u7684\u4e00\u6761\u8def\u7684\u957f\u5ea6\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u9b54\u6539\u8ba1\u7b97\u8d39\u7528\u7684\u65b9\u6cd5\uff1a\u5728 SPFA \u65f6\uff0c\u6211\u4eec\u5c06      $d[i]$ \u5b9a\u4e49\u4e3a $S$ \u5230 $i$ \u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\u6743\u3002\u8fd9\u6837\u5f53         $d[v]>\\max(d[u],\\ E_{u,v})$ \u65f6\u4ee4 $d[v]=\\max(d[u],\\ E_{u,v})$ \n\n\u540c\u6837\u6bcf\u6b21 SPFA \u5b8c\u4e4b\u540e\uff0c\u628a\u603b\u8d39\u7528\u66f4\u65b0\u4e3a\u8fd9\u4e00\u6b21\u7684\u8d39\u7528\uff0c\u5373        $ansf=\\max(ansf,d[n])$\uff0c\u5f53\u6d41\u91cf\u7d2f\u8ba1\u8d85\u8fc7 $t$ \u65f6\uff0c\u505c\u6b62\u8d39\u7528\u6d41\uff0c\u8f93\u51fa\u603b\u8d39\u7528\uff08\u7b54\u6848\uff09\u3002\n\n\u5176\u4ed6\u7684\u90e8\u5206\u5c31\u662f\u677f\u5b50\u4e86\uff0c\u6ce8\u610f\u5efa\u56fe\u7684\u65f6\u5019\u8981\u5c06\u4e24\u4e2a\u65b9\u5411\u7684\u8fb9\u548c\u4ed6\u4eec\u7684\u53cd\u5411\u8fb9\u90fd\u5efa\u4e0a\u3002\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<map>\n#include<cstdio>\nusing namespace std;\nstruct bian{\n\tlong long z,v,next,f;\n};\nbian t[1000000];\nint ha=1;\n//\u50a8\u5b58\u8fb9\u7684\u6570\u636e\u7ed3\u6784 \uff0cf = \u8fd9\u6761\u8fb9\u7684\u8d39\u7528 \nstruct dian{\n\tlong long l,fi,si,la,o,pr,zh,in;\n};\ndian h[100000];\n//\u50a8\u5b58\u70b9\u7684\u6570\u636e\u7ed3\u6784\uff0c fi = \u8fd9\u4e2a\u70b9\u7684\u7b2c\u4e00\u6761\u8fb9\u7684\u4f4d\u7f6e\uff0cla\u662f\u6700\u540e\u4e00\u6761 \n//si\u662f\u6307\u8fb9\u7684\u6570\u91cf\uff0cl\u662f\u6307\u8fd9\u4e2a\u70b9\u5230\u539f\u70b9\u7684\u8ddd\u79bb \nint l[1000000],he=0,w=0;\n//\u5e7f\u641c\u7528\u7684\u961f\u5217 \nint n,m,qi,zo;//\u70b9\u6570\u3001\u8fb9\u6570\u3001\u6e90\u70b9\u3001\u6c47\u70b9 \nlong long ans,ansf;\nint gua(int,int);\nint dfs(int);\nint zdf(void);\n\nint un=0; \nint wuxi=999999999;\n\nint moge(int a1,int a2,int a3,int a4){\n\tint o=h[a1].la;\n\th[a1].la=++ha;\n\tif(h[a1].si==0){\n\t\th[a1].fi=h[a1].la;\n\t}\n\th[a1].si++;\n\tt[h[a1].la].v=a2;\n\tt[h[a1].la].z=a3;\n\tt[h[a1].la].next=0;\n\tt[h[a1].la].f=a4;\n\tt[o].next=h[a1].la;\n\treturn 0;\n}\nint add(int a1,int a2,int a3,int a4){\n    moge(a1,a2,a3,a4);\n    moge(a2,a1,0,-a4);\n    return 0;\n}\nint spfa(){\n\tw=he=0;un++;\n\tfor(int i=1;i<=n;i++)h[i].l=h[i].o=wuxi;\n\tl[w++]=qi;h[qi].in=un;h[zo].pr=-1;h[qi].l=0;\n\twhile(w>he){\n\t\tint q=l[he++];h[q].in=0;\n\t\tfor(int u=h[q].fi;u;u=t[u].next){\n\t\t\tif(t[u].z!=0&&max(h[q].l,t[u].f)<h[t[u].v].l){\n\t\t\t\th[t[u].v].l=max(h[q].l,t[u].f);\n\t\t\t\th[t[u].v].o=min(h[q].o,t[u].z);\n\t\t\t\th[t[u].v].pr=q;\n\t\t\t\th[t[u].v].zh=u;\n\t\t\t\tif(h[t[u].v].in!=un){\n\t\t\t\t\th[t[u].v].in=un;\n\t\t\t\t\tl[w++]=t[u].v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn h[zo].pr!=-1;\n}\n\nint oks=0;\n\nint suan(){\n\twhile(spfa()){\n\t\tans+=h[zo].o;\n\t\tansf=max(ansf,h[zo].l);\n\t\tif(ans>=oks)return 0;\n\t\tint uq=zo;\n\t\twhile(uq!=qi){\n\t\t\tt[h[uq].zh].z-=h[zo].o;\n\t\t\tt[h[uq].zh^1].z+=h[zo].o;\n\t\t\tuq=h[uq].pr;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main(){\n\tcin>>n>>m>>oks;\n\tqi=1;zo=n;\n\tfor(int i=0;i<m;i++){\n\t\tint a1,a2,a4;//\u4ecea1\u5230a2\u6709\u4e00\u6761\u8d39\u7528\u4e3aa4\u7684\u8fb9 \n\t\tcin>>a1>>a2>>a4;\n\t\tadd(a1,a2,1,a4);\n\t\tadd(a2,a1,1,a4);\n\t}\n\tsuan();\n\tcout<<ansf;\n\treturn 0; \n}\n```\n\uff08\u76f4\u63a5\u7528\u6a21\u677f\u6539\u4e86\u51e0\u4e2a\u6570ctrl cv\u8fc7\u6765\u7684\uff0c\u7801\u98ce\u5f88\u4e11\u671b\u89c1\u8c05\uff09",
        "postTime": 1625647136,
        "uid": 211538,
        "name": "Math_rad_round",
        "ccfLevel": 7,
        "title": "P1401 \u57ce\u5e02 \u9898\u89e3"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u79cd\u7f51\u7edc\u6d41\u505a\u6cd5\n\n\u4f7f\u5f97\u6700\u957f\u7684\u8fb9\u7684\u957f\u5ea6\u6700\u5c0f\uff0c\u8003\u8651\u7528\u4e8c\u5206\u7b54\u6848\uff0c\u90a3\u4e48\u5173\u952e\u5c31\u662f\u600e\u4e48check\n\n\u90a3\u4e48\u9898\u76ee\u5c31\u8f6c\u5316\u6210\u4e86\u600e\u4e48\u6c42\u51fa\u4e00\u5f20\u56fe\u662f\u5426\u53ef\u4ee5\u6709t\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u5f84\n\n\u9898\u76ee\u7684\u5173\u952e\u5728\u4e8e\u8fb9\u4e0d\u80fd\u91cd\u590d\u7528\uff0c\u53ef\u4ee5\u8003\u8651\u7f51\u7edc\u6d41\uff0c\u5c06\u6240\u6709\u7684\u8fb9\u6743\u503c\u90fd\u8bbe\u4e3a1,\u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u56e0\u4e3a\u8fd9\u6837\u540c\u4e00\u6761\u8fb9\u662f\u4e0d\u80fd\u591f\u91cd\u590d\u4f7f\u7528\u7684\u3002\n\n\u5408\u6cd5\u7684\u60c5\u51b5\u5c31\u662f\u6700\u5927\u6d41\u6bd4t\u8981\u5927\uff0c\u90a3\u4e48\u5c31\u5b58\u5728t\u6761\u8def\u5f84\n\n\u5bf9\u4e8e\u4e8c\u5206\u5bf9\u6700\u5927\u6d41\u7684\u9650\u5236\uff0c\u5c31\u662f\u8fb9\u6743\u503c\u5927\u4e8emid\u7684\u8fb9\u65e0\u6cd5\u901a\u8fc7\uff0c\u90a3\u4e48\u6211\u4eec\u5728dinic\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u6743\u503c\u5927\u4e8emid\u5c31\u76f4\u63a5\u5ffd\u89c6\u6389\u5c31\u53ef\u4ee5\u4e86\n\n\u7f51\u7edc\u6d41\u7684\u590d\u6742\u5ea6\u662fO(nm)\uff0c\u603b\u590d\u6742\u5ea6O(nmlog\u6743\u503c)\n\n~~\u4f46\u662f\u8dd1\u5f97\u633a\u5feb\u54c8\u54c8\u54c8~~\n\n\u6700\u540e\u6ce8\u610f\u662f\u65e0\u5411\u8fb9\n```\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define il inline\n#define rg register\n#define ll long long\n#define ld long double\n#define N 300010\n#define inf 2000000000\nusing namespace std;\nint n,m,em,cnt=1,s,t;\nint u,v,c,le,ri,ans;\nint fl[N],cur[N],hd[N],de[N];\nstruct Edge{\n\tint nt,to,w,c;\n}edge[N];\nil void re(rg int &x);\nil void link(rg int fm,rg int to,rg int w,rg int c);\nint check(rg int lim);\nint dinic(rg int lim);\nint bfs(rg int lim);\nint dfs(rg int i,rg int flow,rg int lim);\nint main(){\n\tfreopen(\"s.in\",\"r\",stdin);\n\tre(n),re(m),re(em),s=1,t=n;\n\tfor(rg int i=1;i<=m;++i){\n\t\tre(u),re(v),re(c);\n\t\tlink(u,v,1,c),link(v,u,1,c);\n\t\tri=max(ri,c);\n\t}\n\twhile(le<=ri){\n\t\trg int mid=((le+ri)>>1);\n\t\tif(check(mid))ans=mid,ri=mid-1;\n\t\telse le=mid+1;\n\t}\n\tprintf(\"%d\",ans);\n    return 0;\n}\nint bfs(rg int lim){\n    memset(de,0,sizeof(de));\n    queue<int>Q;\n    while(!Q.empty())Q.pop();\n    de[s]=1,Q.push(s);\n    do{\n        rg int i=Q.front();\n        Q.pop();\n        for(rg int k=hd[i];k;k=edge[k].nt){\n            rg int qw=edge[k].to;\n            if((!de[qw])&&edge[k].w>0&&edge[k].c<=lim){\n                de[qw]=de[i]+1;\n                Q.push(qw);\n                if(qw==t)return 1;\n            }\n        }\n    }while(!Q.empty());\n    return 0;\n}\nint dfs(rg int i,rg int flow,rg int lim){\n    if(i==t)return flow;\n    for(rg int &k=cur[i];k;k=edge[k].nt){\n        rg int qw=edge[k].to;\n        if(de[qw]==de[i]+1&&edge[k].w>0&&edge[k].c<=lim){\n            rg int di=dfs(qw,min(edge[k].w,flow),lim);\n            if(di>0){\n                edge[k].w-=di,edge[k^1].w+=di;\n                return di;\n            }\n        }\n    }\n    return 0;\n}\nint dinic(rg int lim){\n\trg int ans=0;\n\twhile(bfs(lim)){\n\t\tfor(rg int i=1;i<=t;++i)\n\t\t\tcur[i]=hd[i];\n\t\twhile(int d=dfs(s,inf,lim))\n\t\t\tans+=d;\n\t}\n\treturn ans;\n}\nint check(rg int lim){\n\tfor(rg int i=1;i<=cnt;++i)\n\t\tedge[i].w=fl[i];\n\tif(dinic(lim)>=em)return 1;\n\treturn 0;\n}\nil void re(rg int &x){\n    rg int res=0;rg int w=1;char c=getchar();\n    while((c<'0'||c>'9')&&c!='-')c=getchar();\n    if(c=='-')w=-1,c=getchar();\n    while(c>='0'&&c<='9')res=(res<<3)+(res<<1)+c-'0',c=getchar();\n    x=w*res;\n}\nil void link(rg int fm,rg int to,rg int w,rg int c){\n\tedge[++cnt].nt=hd[fm];\n\tedge[cnt].to=to,edge[cnt].w=w;\n\tedge[cnt].c=c,fl[cnt]=w;\n\thd[fm]=cnt;\n}\n\n```",
        "postTime": 1526117292,
        "uid": 66915,
        "name": "Tyher",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1401 \u3010\u57ce\u5e02\u3011"
    },
    {
        "content": "\u6700\u957f\u7684\u8def\u7684\u957f\u5ea6\u6700\u5c0f\uff0c\u8003\u8651\u4e8c\u5206\u3002\u4e8c\u5206\u7b54\u6848 $Mid$\uff0c\u5bf9\u4e8e\u957f\u5ea6\u5c0f\u4e8e $Mid$ \u7684\u8fb9 $x\\longleftrightarrow y$\uff0c\u5728\u65b0\u56fe\u4e2d\u8fde\u8fb9 $x\\xleftrightarrow{cap=1}y$\uff0c\u6700\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u82e5\u6700\u5927\u6d41\u5927\u4e8e\u7b49\u4e8e $T$ \u5219\u8868\u660e\u7b54\u6848\u5c0f\u4e8e\u7b49\u4e8e $Mid$ \u5426\u5219\u8868\u793a\u7b54\u6848\u5927\u4e8e $Mid$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=444, INF=1e9, M=4e4+11;\nstruct Edge{int u, v, flow, cap;};\nstruct Dinic{\n  vector<int> E[N]; vector<Edge> edge;\n  int dist[N], vis[N], c[N], s, t, tt;\n\n  void init(int sum){\n    edge.clear(), s=t=tt=0;\n    for(int i=1; i<=sum; i++)\n      dist[i]=vis[i]=c[i]=0, E[i].clear();\n  }\n\n  void link(int u, int v, int cap){\n    E[u].push_back(int(edge.size())), edge.push_back({u, v, 0, cap});\n    E[v].push_back(int(edge.size())), edge.push_back({v, u, 0, 0});\n  }\n\n  bool BFS(){\n    for(int i=1; i<=tt; i++) dist[i]=INF, vis[i]=c[i]=0;\n    queue<int> q; q.push(s), dist[s]=0, vis[s]=1;\n    while(!q.empty()){\n      int u=q.front(); q.pop();\n      for(int i:E[u]){\n        Edge e=edge[i];\n        if(e.cap>e.flow&&!vis[e.v])\n          vis[e.v]=1, dist[e.v]=dist[e.u]+1, q.push(e.v);\n      }\n    }\n    return vis[t];\n  }\n\n  int dfs(int u, int a){\n    if(u==t||a==0)return a;\n    int tot=0, f=0;\n    for(int &i=c[u]; i<int(E[u].size()); i++){\n      Edge e=edge[E[u][i]];\n      if(dist[e.v]==dist[e.u]+1&&(f=dfs(e.v, min(e.cap-e.flow, a)))>0){\n        edge[E[u][i]].flow+=f, edge[E[u][i]^1].flow-=f, tot+=f, a-=f;\n        if(!a)break;\n      }\n    }\n    return tot;\n  }\n\n  int solve(int S, int T, int Total){\n    s=S, t=T, tt=Total; int ans=0;\n    while(BFS()) ans+=dfs(s, INF);\n    return ans;\n  }\n}g;\n\nint n, m, T, X[M], Y[M], Z[M];\n\nbool check(int Mid){\n  g.init(n);\n  for(int i=1; i<=m; i++) if(Z[i]<=Mid)\n    g.link(X[i], Y[i], 1), g.link(Y[i], X[i], 1);\n  return g.solve(1, n, n+1)>=T;\n}\n\nint BinarySearch(){\n  int l=1, r=1000001, ans=-1;\n  while(l<=r){\n    int Mid=l+r>>1;\n    if(check(Mid)) r=Mid-1, ans=Mid;\n    else l=Mid+1;\n  }\n  return ans;\n}\nint main(){\n  cin>>n>>m>>T;\n  for(int i=1; i<=m; i++)\n    cin>>X[i]>>Y[i]>>Z[i];\n  cout<<BinarySearch()<<'\\n';\n  return 0;\n}\n```\n",
        "postTime": 1683900438,
        "uid": 740607,
        "name": "__ODT__",
        "ccfLevel": 0,
        "title": "P1674"
    },
    {
        "content": "\u66f4\u6539\uff1a\u5220\u9664\u4e86\u6807\u70b9\u548c\u516c\u5f0f\u7684\u7a7a\u683c\u3002\n\n\u9898\u610f\uff1a\u627e\u5230 $T$ \u6761 $1\\sim n$ \u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u6743\u503c\u6700\u5927\u503c\u6700\u5c0f\uff0c\u5e76\u4e14\u4e00\u6761\u8fb9\u4e00\u4e2a\u65b9\u5411\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\u3002\n\n\u6211\u4eec\u770b\u5230\u6700\u5927\u503c\u6700\u5c0f\uff0c\u9996\u5148\u8003\u8651\u4e8c\u5206\u3002\n\n\u8fb9\u6709\u5bb9\u91cf\u9650\u5236\uff0c\u6211\u4eec\u8003\u8651\u6700\u5927\u6d41\u3002\n\n\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u6570 $w$\uff0c \u628a\u6240\u6709\u4e0d\u5927\u4e8e $w$ \u7684\u8fb9\u90fd\u52a0\u5165\u7f51\u7edc\uff0c\u5bb9\u91cf\u4e3a $1$\uff0c\u5efa\u53cc\u5411\u8fb9\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u6761\u8fb9\u4e00\u4e2a\u65b9\u5411\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\u7684\u9650\u5236\u3002\n\n\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9 $s$\uff0c$s$ \u5411 $1$ \u5efa\u4e00\u6761\u5bb9\u91cf\u4e3a $T$ \u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u4e00\u4e2a\u4ece $s\\sim n$ \u7684\u6700\u5927\u6d41\u3002\n\n\u82e5\u6700\u5927\u6d41\u4e3a $T$\uff0c\u610f\u5473\u7740\u80fd\u627e\u5230 $T$ \u6761\u8def\u5f84\uff0c\u5b83\u4eec\u8def\u5f84\u6743\u503c\u6700\u5927\u503c\u4e0d\u5927\u4e8e $w$\u3002\n\n\u6700\u540e\u8f93\u51fa $w$ \u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=505,M=1e5+10,inf=2e9;\nstruct flow {\n\tint tot=1,head[N],nxt[M],ver[M],limit[M];\n\tvoid add(int u,int v,int w) {\n\t\tnxt[++tot]=head[u],head[u]=tot,ver[tot]=v,limit[tot]=w;\n\t\tnxt[++tot]=head[v],head[v]=tot,ver[tot]=u,limit[tot]=w;\n\t}\n\tint T,dis[N],cur[N];\n\tint dfs(int id,int res) {\n\t\tif(id==T) return res;\n\t\tint flow=0;\n\t\tfor(int i=cur[id]; i&&res; i=nxt[i]) {\n\t\t\tcur[id]=i;\n\t\t\tint c=min(res,(int)limit[i]),it=ver[i];\n\t\t\tif(dis[id]+1==dis[it]&&c) {\n\t\t\t\tint k=dfs(it,c);\n\t\t\t\tflow+=k,res-=k,limit[i]-=k,limit[i^1]+=k;\n\t\t\t}\n\t\t}\n\t\treturn flow;\n\t}\n\tint maxflow(int s,int t) {\n\t\tT=t;\n\t\tint flow=0;\n\t\twhile(1) {\n\t\t\tqueue<int> q;\n\t\t\tmemcpy(cur,head,sizeof(head));\n\t\t\tmemset(dis,-1,sizeof(dis));\n\t\t\tq.push(s),dis[s]=0;\n\t\t\twhile(!q.empty()) {\n\t\t\t\tint t=q.front();\n\t\t\t\tq.pop();\n\t\t\t\tfor(int i=head[t]; i; i=nxt[i])\n\t\t\t\t\tif(dis[ver[i]]==-1&&limit[i])\n\t\t\t\t\t\tdis[ver[i]]=dis[t]+1,q.push(ver[i]);\n\t\t\t}\n\t\t\tif(dis[t]==-1) return flow;\n\t\t\tflow+=dfs(s,inf);\n\t\t}\n\t}\n\tvoid clear() {\n\t\ttot=1; memset(head,0,sizeof head);\n\t}\n} g;\nint n,m,k;\nstruct edge {\n\tint x,y,z;\n} e[M];\nbool valid(int w) {\n\tg.clear(); \n\tfor(int i=1; i<=m; i++) {\n\t\tif(e[i].z<=w) g.add(e[i].x,e[i].y,1);\n\t}\n\tint s=n+1; g.add(s,1,k);\n\tif(g.maxflow(s,n)>=k) return true;\n\treturn false;\n}\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&k);\n\tfor(int i=1; i<=m; i++) {\n\t\tscanf(\"%d%d%d\",&e[i].x,&e[i].y,&e[i].z);\n\t}\n\tint l=1,r=inf,ans=inf;\n\tfor(; l<=r; ) {\n\t\tint mid=1ll*(l+r)/2;\n\t\tif(valid(mid)) r=mid-1,ans=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1683706859,
        "uid": 253936,
        "name": "gaosichensb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1674"
    },
    {
        "content": "**\u524d\u8a00**\n\n------------\n\n\u672c\u9898\u4f7f\u7528\u8d39\u7528\u6d41\u3002\n\n**\u601d\u8def**\n\n------------\n\n\u6700\u957f\u7684\u8def\u6700\u5c0f\uff0c\u8981\u8d70\u51fa\u81f3\u5c11 $t$ \u6761\u8def\u3002\u8003\u8651\u4f7f\u7528\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\u5c06\u4e00\u6761\u8def\u7ebf\u89c6\u4f5c\u4e00\u6761\u6d41\uff0c\u800c\u7ecf\u8fc7\u8fb9\u7684\u957f\u5ea6\u89c6\u4f5c\u8d39\u7528\uff0c\u8d39\u7528\u662f\u53d6\u6700\u5927\u503c\u800c\u4e0d\u662f\u76f8\u52a0\n\n\u4f46\u662f\u5f97\u5230\u6700\u5927\u6d41\u65f6\u7684\u8d39\u7528\u53ef\u80fd\u5c31\u4e0d\u662f\u6700\u5c0f\u7b54\u6848\u4e86\uff0c\u6240\u4ee5\u5728\u8dd1\u8d39\u7528\u6d41\u7684\u9014\u4e2d\u6ee1\u8db3\u6761\u4ef6\u76f4\u63a5\u9000\u51fa\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u672c\u9898\u5bf9\u8d39\u7528\u6d41\u7684\u7406\u89e3\u6709\u4e9b\u8003\u5bdf\uff0c\u603b\u4f53\u6765\u8bb2\u672c\u9898\u5c31\u662f\u8d39\u7528\u6d41\u53d8\u5f0f\u3002\u82e5\u662f\u7528\u7f51\u7edc\u6d41\u6216\u4e8c\u5206\u7684\u65b9\u6cd5\u6bd4\u8d39\u7528\u6d41\u9ebb\u70e6\u4e86\u4e0d\u5c11\u3002\n\n**code**\n\n------------\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=1e9;\nconst int MAXN=2e5+5,N=2e4+5;\nbool vis[N];\nint n,m,s,t,x,y,z,f,dis[N],pre[N],last[N],flow[N],maxflow,mincost;\nstruct node {\n\tint to,next,flow,dis;\n}edge[MAXN];\nint head[N],cnt; \nqueue<int> q;\nvoid add(int from,int to,int flow,int dis) {\n\tedge[++cnt].next=head[from];\n\tedge[cnt].to=to;\n\tedge[cnt].flow=flow;\n\tedge[cnt].dis=dis;\n\thead[from]=cnt;\n}\nbool spfa(int s,int t) {\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(flow,0x7f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(s);vis[s]=1;dis[s]=0;pre[t]=-1;\n\twhile(!q.empty()) {\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tvis[now]=0;\n\t\tfor(int i=head[now];~i;i=edge[i].next) {\n\t\t\tif(edge[i].flow>0&&dis[edge[i].to]>max(dis[now],edge[i].dis)) {\n\t\t\t\tdis[edge[i].to]=max(dis[now],edge[i].dis);\n\t\t\t\tpre[edge[i].to]=now;\n\t\t\t\tlast[edge[i].to]=i;\n\t\t\t\tflow[edge[i].to]=min(flow[now],edge[i].flow);\n\t\t\t\tif(!vis[edge[i].to]) {\n\t\t\t\t\tvis[edge[i].to]=1;\n\t\t\t\t\tq.push(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ~pre[t];\n}\nint pos;\nvoid MCMF() {\n\twhile(spfa(s,t)) {\n\t\tint now=t;\n\t\tmaxflow+=flow[t];\n\t\tmincost=max(mincost,dis[t]);\n\t\tif(maxflow>=pos) return;\n\t\twhile(now!=s) {\n\t\t\tedge[last[now]].flow-=flow[t];\n\t\t\tedge[last[now]^1].flow+=flow[t];\n\t\t\tnow=pre[now];\n\t\t}\n\t}\n}\nvoid addt(int from,int to,int flow,int dis) {\n\tadd(from,to,flow,dis);\n\tadd(to,from,0,-dis);\n}\nint u,v,w,c;\nint main() {\n\tmemset(head,-1,sizeof(head));cnt=-1;\n\tscanf(\"%d %d %d\",&n,&m,&pos);\n\ts=1,t=n;\n\tfor(int i=1;i<=m;++i) {\n\t\tscanf(\"%d %d %d\",&u,&v,&w);\n\t\taddt(u,v,1,w);\n\t\taddt(v,u,1,w);\n\t}\n\tMCMF();\n\tprintf(\"%d\",mincost);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1643077813,
        "uid": 271260,
        "name": "PosVII",
        "ccfLevel": 7,
        "title": "P1401 \u57ce\u5e02 \u9898\u89e3"
    },
    {
        "content": "# \u9898\u610f\n$n$\u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u51fa $t$ \u6761\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u4e2d\u6700\u957f\u7684\u8fb9\u6700\u5c0f\u3002\n# \u9898\u89e3\n\u770b\u5230\u6700\u5927\u7684\u6700\u5c0f\u5e94\u8be5\u80fd\u9a6c\u4e0a\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5dee\u7684\u5c31\u662f\u4e00\u4e2a check \u51fd\u6570\u4e86\u3002\n\n### \u4e0d\u6b63\u786e\u66b4\u529b\n\u4ece\u70b9 $1$ \u51fa\u53d1\u904d\u5386\uff0c\u5c06\u904d\u5386\u7684\u8fb9\u53ca\u5176\u53cd\u8fb9\u6253\u4e0a\u6807\u8bb0\uff0c\u76f4\u81f3\u6709 $t$ \u6761\u8def\u5f84\u4e3a\u6b62\u3002\n\n\u8fd9\u4e48\u4e00\u770b\u611f\u89c9\u4eff\u4f5b\u8fd8\u53ef\u4ee5\uff0c\u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u6837\u505a\u4e0d\u4ec5\u590d\u6742\u5ea6\u4e0d\u4f18\uff0c\u53cd\u800c\u5f97\u5230\u7684\u7b54\u6848\u8fd8\u5e76\u4e0d\u6b63\u786e\u3002\n\n\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w1bgcm7v.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u53ef\u80fd\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u4e0a\u9762\u90a3\u6761\u8def\u5f84\u4e0e $n$ \u8fde\u63a5\u7684\u90a3\u6761\u8fb9\uff0c\u5df2\u7ecf\u88ab\u6253\u4e0a\u6807\u8bb0\u4e86\u3002\u800c\u7b2c\u4e8c\u6761\u8def\u5f84\u5176\u5b9e\u53ef\u4ee5\u8d70\u4e0b\u9762\u5230\u8fbe $n$\u7684\uff0c\u4f46\u662f\u5374\u628a\u4e0a\u9762\u7684\u90a3\u6761\u5360\u4e86\uff0c\u5c31\u53ea\u80fd\u8dd1\u51fa $1$ \u6761\u8def\u5f84\uff0c\u4f46\u5176\u5b9e\u662f $2$ \u6761\u7684\u3002\u8fd9\u79cd\u60c5\u51b5\u6839\u636e\u4f60\u5b58\u8fb9\u7684\u987a\u5e8f\u662f\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u3002\n\n\u6240\u4ee5\u8fd9\u6837\u7684\u66b4\u529b\u4e0d\u884c\u3002\n\n### \u5e76\u67e5\u96c6\n\n\u4f7f\u7528\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\u4e5f\u633a\u5999\u7684\uff0c\u8fd9\u662f\u5176\u5b83\u9898\u89e3\u7684\u601d\u8def\uff0c\u6211\u6ca1\u6709\u6253\u8fc7\uff0c\u4f46\u662f\u636e\u4ed6\u8bf4\u6709\u4e00\u4e2a\u70b9\u5361\u4e0d\u8fc7\uff0c\u4e0d\u77e5\u9053\u52a0\u4e86\u6309\u79e9\u5408\u5e76\u548c\u7f16\u8bd1\u4f18\u5316\u4e4b\u540e\u80fd\u4e0d\u80fd\u5361\u8fc7\u3002\n\n### \u7f51\u7edc\u6d41\n\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u8003\u4e86\u4e00\u4e2a\u6700\u5927\u6d41\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u9053\u9898\u80fd\u7528\u7f51\u7edc\u6d41\u6765\u505a\u5462\uff1f\n\n\u5176\u5b9e\u4e00\u6761\u8def\u5f84\u5c31\u53ef\u4ee5\u770b\u505a\u662f\u4ece\u6e90\u70b9\u6d41\u51fa\u53bb\u7684\u4e00\u4e2a\u5355\u4f4d\u6d41\u91cf\uff0c\u56e0\u4e3a\u6b8b\u91cf\u7f51\u7edc\u662f\u4e00\u4e2a DAG \u56fe\uff0c\u6240\u4ee5\u6ee1\u8db3\u4e86\u4e00\u6761\u8fb9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u4e2a\u65b9\u5411\u7684\u9650\u5236\u6761\u4ef6\u3002\n\n\u800c\u6211\u4eec\u5c06\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a $1$ \uff0c\u5219\u76f8\u5f53\u4e8e\u9650\u5236\u4e86\u4e00\u6761\u8fb9\u53ea\u80fd\u88ab\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u3002\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u76f8\u5f53\u4e8e\u662f\u6709 $t$ \u5217\u706b\u8f66\u4ece\u6e90\u70b9\u51fa\u53d1\uff0c\u5411\u6c47\u70b9\u5f00\u53bb\uff0c\u56e0\u4e3a\u706b\u8f66\u5f88\u957f\uff0c\u5b83\u5230\u8fbe\u4e86\u6c47\u70b9\u4e4b\u540e\uff0c\u5c3e\u5df4\u8fd8\u6ca1\u6709\u79bb\u5f00\u6e90\u70b9\uff0c\u800c\u6bcf\u6761\u8fb9\u53ea\u6709\u4e00\u6761\u8f68\u9053\uff0c\u4e8e\u662f\u6bcf\u5217\u706b\u8f66\u90fd\u628a\u5b83\u7ecf\u8fc7\u7684\u8fb9\u4e0a\u7684\u8f68\u9053\u90fd\u5360\u4e86\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u6709\u4e24\u5217\u706b\u8f66\u540c\u65f6\u5728\u4e00\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u8bdd\uff0c\u6bcf\u6761\u8fb9\u662f\u4e0d\u4f1a\u88ab\u91cd\u590d\u7ecf\u8fc7\u7684\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<ctype.h>\n#include<cstring>\n#include<iostream>\n#include<queue>\n\nconst int N = 205, M = 4e4 + 5;\n\nint head[N], nex[M << 1], to[M << 1], w[M << 1], edge[M << 1], n, m, siz = 1, t, ans;\n\nlong long L = 0, R = 1e9 + 7, mid;\n\ninline void add(int u, int v, int W) {\n\tnex[++siz] = head[u]; w[siz] = W;\n\tto[siz] = v; head[u] = siz;\n\tnex[++siz] = head[v]; w[siz] = W;\n\tto[siz] = u; head[v] = siz;\n}\n\nint d[N], now[N]; std:: queue < int > q;\n\nbool bfs(int s) {\n\tmemset(d, 0, sizeof(d));\n\twhile(!q.empty()) q.pop();\n\tq.push(s); d[s] = 1; now[s] = head[s];\n\twhile(!q.empty()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor(int i = head[x]; i; i = nex[i])\n\t\t\tif(edge[i] && !d[to[i]] && w[i] <= mid) {\n\t\t\t\tq.push(to[i]);\n\t\t\t\tnow[to[i]] = head[to[i]];\n\t\t\t\td[to[i]] = d[x] + 1;\n\t\t\t\tif(to[i] == n) return true;\n\t\t\t}\n\t}\n\treturn false;\n}\n\nint dinic(int x, int flow) {\n\tif(x == n) return flow;\n\tint res = flow, k, i;\n\tfor(i = now[x]; i && res; i = nex[i])\n\t\tif(edge[i] && d[to[i]] == d[x] + 1 && w[i] <= mid) {\n\t\t\tk = dinic(to[i], std::min(res, edge[i]));\n\t\t\tif(!k) d[to[i]] = 0;\n\t\t\tedge[i] -= k; edge[i ^ 1] += k;\n\t\t\tres -= k;\n\t\t}\n\tnow[x] = i;\n\treturn flow - res;\n}\n\ninline int read() {\n\tint x = 0, f = 1, c = getchar();\n\tfor(; !isdigit(c); c = getchar())\n\t\tif(c == '-')\n\t\t\tf = -1;\n\tfor(; isdigit(c); c = getchar())\n\t\tx = x * 10 + c - 48;\n\treturn x * f;\n}\n\nint main() {\n\tn = read(), m = read(), t = read();\n\tfor(int i = 1; i <= m; i++) {\n\t\tint u = read(), v = read(), W = read();\n\t\tadd(u, v, W);\n\t}\n\twhile(L <= R) {\n\t\tfor(int i = 1; i <= siz; i++) edge[i] = 1;\n\t\tmid = (L + R) >> 1;\n\t\tint flow = 0, maxflow = 0;\n\t\twhile(bfs(1))\n\t\t\twhile(flow = dinic(1, 0x3f3f3f3f)) maxflow += flow;\n\t\tif(maxflow >= t)\n\t\t\tR = mid - 1, ans = mid;\n\t\telse \n\t\t\tL = mid + 1;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}```",
        "postTime": 1623418844,
        "uid": 385145,
        "name": "\u795e\u7737\u4e4b\u6a31\u82b1",
        "ccfLevel": 4,
        "title": "P1401 \u57ce\u5e02"
    },
    {
        "content": "#### \u5176\u5b9e\u6bd4\u8f83\u660e\u663e\u7684\u7f51\u7edc\u6d41\uff08\u6700\u5927\u6d41\uff09\n\n\u4e0d\u4f1a\u7f51\u7edc\u6d41\u7684\u7ae5\u978b\u53ef\u4ee5\u7ed5\u5f00\u672c\u6587\u2026\u2026\n\n#### \u5efa\u56fe\n\n\u672c\u9898\u7f51\u7edc\u6d41\u7684\u5efa\u56fe\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6309\u7167\u9898\u76ee\u7684\u8bf4\u6cd5\u6765\u5efa\u56fe\u5c31\u597d\u4e86\uff0c\u5f53\u7136\u4e86\uff0c\u6211\u4eec\u8fd9\u91cc\u8d85\u7ea7\u6e90\u70b9$S$\u8bbe\u7f6e\u4e3a$1$\uff0c\u8d85\u7ea7\u6e90\u70b9$T$\u8bbe\u7f6e\u4e3a$n$\u3002\n#### \u6c42\u7ecf\u8fc7\u7684\u8fd9\u4e9b\u9053\u8def\u4e2d\u6700\u957f\u7684\u8def\u7684\u6700\u5c0f\u957f\u5ea6$?$\n\n\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\uff1a\n- \u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u4fdd\u969c\u5728\u8dd1$Dinic$\u65f6\uff0c\u9650\u5236\u8dd1\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u9a6c\u4e0a\u5c31\u8dd1\u6700\u7ec8\u56fe\n- \u65e2\u7136\u4e0d\u80fd\u9a6c\u4e0a\u8dd1\u6700\u7ec8\u56fe\uff0c\u800c\u4e14\u6211\u4eec\u8981\u6c42\u9053\u8def\u4e2d\u6700\u957f\u7684\u8def\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u591f\u901a\u8fc7\u679a\u4e3e\u6700\u957f\u7684\u8def\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u7136\u540e\u5c06\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u679a\u4e3e\u53d8\u91cf\u7684\u8def\u5168\u90e8\u52a0\u8fb9\u5462\uff1f\n- \u7136\u540e\u5462\uff1f\u7136\u540e\u6211\u4eec\u8dd1$Dinic$\uff0c\u5982\u679c\u5728\u56fe\uff08\u5e94\u8be5\u8bf4\u662f\u6b8b\u7559\u7f51\u7edc\uff09\u4e2d\uff0c\u4ea7\u751f\u4e86$K$\u6761$S-T$\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u5373\u53ef\u8f93\u51fa\u7b54\u6848\u2026\u2026\n\n#### \u5177\u4f53\u6b65\u9aa4\n\u7b2c\u4e00\u6b65\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u8fb9\uff0c\u6309\u7167\u957f\u5ea6\u6392\u5e8f\u3002\n\n\u7b2c\u4e8c\u6b65\uff0c\u6211\u4eec\u679a\u4e3e\u7b54\u6848\u3002\n\n\u679a\u4e3e\u7b54\u6848\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n1. \u6bcf\u6b21\u5c06\u3010\u957f\u5ea6$==$\u5f53\u524d\u679a\u4e3e\u7684\u7b54\u6848\u3011\u7684\u8fb9\u52a0\u5165\u5230\u6b8b\u7559\u7f51\u7edc\u4e4b\u4e2d\n2. \u8dd1$Dinic$,\u7136\u540e\u7528$K$\u51cf\u53bb\u6bcf\u6b21\u8dd1\u51fa\u7684\u6700\u5927\u6d41\n3. \u5f53$K<=0$\u65f6\uff0c\u90a3\u4e48\u8bf4\u660e\u5728\u5f53\u524d\u7b54\u6848\u5df2\u7ecf\u53ef\u4ee5\u8dd1\u51fa\u4e86$K$\u6761$S-T$\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u6b64\u65f6\u8f93\u51fa\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\n\n#### \u53c2\u8003\u7a0b\u5e8f\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<string>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<map>\n#include<stack>\nusing namespace std;\n\nconst int maxn=40000+10;\nconst int maxm=100000+10;\nconst int inf=100000000+10;\n\nstruct edge\n{\n\tint obj,cap;\n\tedge *Next,*rev;\n}Edge[maxm<<1];\n\nedge *head[maxm<<1];\nedge *nhead[maxm<<1];\n\nint cur=0;\nint level[maxn];\nint que[maxn];\nint n,m,k,s,t;\n\nstruct edgege\n{\n\tint x,y,z;\n}E[maxm<<1];//x\uff0cy\u4e3a\u8fb9\u7684\u4e24\u7aef\uff0cz\u4e3a\u957f\u5ea6\n\nvoid Add_edge(int x,int y,int z)//\u52a0\u8fb9\n{\n\tcur++;\n\tEdge[cur].obj=y;\n\tEdge[cur].cap=z;\n\tEdge[cur].Next=head[x];\n\tEdge[cur].rev=&Edge[cur+1];\n\thead[x]=Edge+cur;\n\t\n\tcur++;\n\tEdge[cur].obj=x;\n\tEdge[cur].cap=z;//\u6ce8\u610f\u8fd9\u91cc\u662f\u53cc\u5411\u8fb9\n\tEdge[cur].Next=head[y];\n\tEdge[cur].rev=&Edge[cur-1];\n\thead[y]=Edge+cur; \n}\nint BFS()//\u8dd1\u56fe\uff08\u4e0d\u89e3\u91ca\uff09\n{\n    for(int i=1; i<=t; i++)\n    {\n        nhead[i]=head[i];\n        level[i]=0;\n    }  \n    level[s]=1;\n    que[1]=s;\n    int he=0,ta=1;\n    while(he<ta)\n    {\n        int node=que[++he];\n        for(edge *p=head[node];p;p=p->Next)\n            if(p->cap&&(!level[p->obj]))\n            {\n                level[p->obj]=level[node]+1;\n                que[++ta]=p->obj;\n            }\n    }\n    return level[t];\n}\nint DFS(int node,int flow)//\u8dd1\u56fe\uff08\u4e0d\u89e3\u91ca\uff09\n{\n\tif(node==t||!flow)return flow;\n\tint ret=0;\n\tfor(edge *&p=nhead[node];p;p=p->Next)\n\t\tif(p->cap&&level[p->obj]==level[node]+1)\n\t\t{\n\t\t\tint to=p->obj;\n\t\t\tint f=DFS(to,min(flow,p->cap));\n\t\t\tflow-=f;\n\t\t\tret+=f;\n\t\t\tp->cap-=f;\n\t\t\tp->rev->cap+=f;\n\t\t\tif(!flow)break;\n\t\t}\n\tif(flow)level[node]=-1;\n\treturn ret;\n}\nint Dinic()//\u8dd1\u56fe\uff08\u4e0d\u89e3\u91ca\uff09\n{\n\tint flow=0;\n\twhile(BFS())flow+=DFS(s,inf);\t\n\treturn flow;\n}\nbool cmp(edgege x,edgege y)//\u5feb\u6392\u7684\n{\n\treturn x.z<y.z;\n}\nint main()\n{\n   scanf(\"%d%d%d\",&n,&m,&k);\n\ts=1,t=n;//\u8d85\u7ea7\u6e90\u70b9\u5efa\u7acb\n\tfor(int i=1;i<=t;i++)head[i]=NULL;//\u5f27\u7684\u521d\u59cb\u5316\uff08\u53ea\u662f\u52a0\u5febDinic\u8dd1\u56fe\uff09\n\tfor(int i=1;i<=m;i++)\n\t    scanf(\"%d%d%d\",&E[i].x,&E[i].y,&E[i].z);\n\tsort(E+1,E+1+m,cmp);//\u5feb\u6392\n\tint j=1;\n\tfor(int i=1;;i++)//\u679a\u4e3e\u7b54\u6848\n\t{\n\t\tfor(;j<=m&&E[j].z<=i;j++)\n\t\t\tAdd_edge(E[j].x,E[j].y,1);//\u52a0\u8fb9\n\t\tk-=Dinic();\n\t\tif(k<=0)//\u5df2\u7ecf\u627e\u5230\u4e86k\u79cd\u4e0d\u540c\u8def\u5f84\n\t\t{\n\t\t\tprintf(\"%d\\n\",i);\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n}\n\n```\n",
        "postTime": 1600063359,
        "uid": 51800,
        "name": "\u5929\u5357\u5730\u5317",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1401 \u3010\u57ce\u5e02\u3011"
    }
]