[
    {
        "content": "Johnson \u548c Floyd \u4e00\u6837\uff0c\u662f\u4e00\u79cd\u80fd\u6c42\u51fa\u65e0\u8d1f\u73af\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\u8be5\u7b97\u6cd5\u5728 1977 \u5e74\u7531 Donald B. Johnson \u63d0\u51fa\u3002\r\n\r\n## 1 \u7b97\u6cd5\u6982\u8ff0\r\n\r\n\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u8d77\u70b9\uff0c\u8dd1 $n$ \u6b21 Bellman-Ford \u7b97\u6cd5\u89e3\u51b3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2m)$ \u7684\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 Floyd \u7b97\u6cd5\u89e3\u51b3\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3)$ \u3002\r\n\r\n\u6ce8\u610f\u5230\u5806\u4f18\u5316\u7684 Dijkstra \u7b97\u6cd5\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4 Bellman-Ford \u66f4\u4f18\uff0c\u5982\u679c\u679a\u4e3e\u8d77\u70b9\uff0c\u8dd1 $n$ \u6b21 Dijkstra \u7b97\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5728 $O(nm\\log m)$ \uff08\u672c\u6587\u4e2d\u7684 Dijkstra \u91c7\u7528 `priority_queue` \u5b9e\u73b0\uff0c\u4e0b\u540c\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u672c\u95ee\u9898\uff0c\u6bd4\u4e0a\u8ff0\u8dd1 $n$ \u6b21 Bellman-Ford \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f18\u79c0\uff0c\u5728\u7a00\u758f\u56fe\u4e0a\u4e5f\u6bd4 Floyd \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u52a0\u4f18\u79c0\u3002\r\n\r\n\u4f46 Dijkstra \u7b97\u6cd5\u4e0d\u80fd\u6b63\u786e\u6c42\u89e3\u5e26\u8d1f\u6743\u8fb9\u7684\u6700\u77ed\u8def\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u539f\u56fe\u4e0a\u7684\u8fb9\u8fdb\u884c\u9884\u5904\u7406\uff0c\u786e\u4fdd\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u5747\u975e\u8d1f\u3002\r\n\r\n\u4e00\u79cd\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u7ed9\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u540c\u65f6\u52a0\u4e0a\u4e00\u4e2a\u6b63\u6570 $x$ \uff0c\u4ece\u800c\u8ba9\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u5747\u975e\u8d1f\u3002\u5982\u679c\u65b0\u56fe\u4e0a\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u4e86 $k$ \u6761\u8fb9\uff0c\u5219\u5c06\u6700\u77ed\u8def\u51cf\u53bb $kx$ \u5373\u53ef\u5f97\u5230\u5b9e\u9645\u6700\u77ed\u8def\u3002\r\n\r\n\u4f46\u8fd9\u6837\u7684\u65b9\u6cd5\u662f\u9519\u8bef\u7684\u3002\u8003\u8651\u4e0b\u56fe\uff1a\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/d4cvwbqn.png)\r\n\r\n$1 \\to 2$ \u7684\u6700\u77ed\u8def\u4e3a $1 \\to 5 \\to 3 \\to 2$\uff0c\u957f\u5ea6\u4e3a $-2$\u3002\r\n\r\n\u4f46\u5047\u5982\u6211\u4eec\u628a\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u52a0\u4e0a $5$ \u5462\uff1f\r\n\r\n![](https://cdn.luogu.com.cn/upload/image_hosting/ahz1uv1u.png)\r\n\r\n\u65b0\u56fe\u4e0a $1 \\to 2$ \u7684\u6700\u77ed\u8def\u4e3a $1 \\to 4 \\to 2$ \uff0c\u5df2\u7ecf\u4e0d\u662f\u5b9e\u9645\u7684\u6700\u77ed\u8def\u4e86\u3002\r\n\r\nJohnson \u7b97\u6cd5\u5219\u901a\u8fc7\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u6765\u7ed9\u6bcf\u6761\u8fb9\u91cd\u65b0\u6807\u6ce8\u8fb9\u6743\u3002\r\n\r\n\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff08\u5728\u8fd9\u91cc\u6211\u4eec\u5c31\u8bbe\u5b83\u7684\u7f16\u53f7\u4e3a $0$ \uff09\u3002\u4ece\u8fd9\u4e2a\u70b9\u5411\u5176\u4ed6\u6240\u6709\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u3002\r\n\r\n\u63a5\u4e0b\u6765\u7528 Bellman-Ford \u7b97\u6cd5\u6c42\u51fa\u4ece $0$ \u53f7\u70b9\u5230\u5176\u4ed6\u6240\u6709\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8bb0\u4e3a $h_i$ \u3002\r\n\r\n\u5047\u5982\u5b58\u5728\u4e00\u6761\u4ece $u$ \u70b9\u5230 $v$ \u70b9\uff0c\u8fb9\u6743\u4e3a $w$ \u7684\u8fb9\uff0c\u5219\u6211\u4eec\u5c06\u8be5\u8fb9\u7684\u8fb9\u6743\u91cd\u65b0\u8bbe\u7f6e\u4e3a $w+h_u-h_v$ \u3002\r\n\r\n\u63a5\u4e0b\u6765\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\uff0c\u8dd1 $n$ \u8f6e Dijkstra \u7b97\u6cd5\u5373\u53ef\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u8def\u4e86\u3002\r\n\r\n\u5bb9\u6613\u770b\u51fa\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(nm\\log m)$ \u3002\r\n\r\nQ\uff1a\u90a3\u8fd9\u4e48\u8bf4\uff0cDijkstra \u4e5f\u53ef\u4ee5\u6c42\u51fa\u8d1f\u6743\u56fe\uff08\u65e0\u8d1f\u73af\uff09\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e86\uff1f  \r\nA\uff1a\u6ca1\u9519\u3002\u4f46\u662f\u9884\u5904\u7406\u8981\u8dd1\u4e00\u904d Bellman-Ford\uff0c\u8fd8\u4e0d\u5982\u76f4\u63a5\u7528 Bellman-Ford \u5462\u3002\r\n\r\n## 2 \u6b63\u786e\u6027\u8bc1\u660e\r\n\r\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u91cd\u65b0\u6807\u6ce8\u8fb9\u6743\u7684\u65b9\u5f0f\u662f\u6b63\u786e\u7684\u5462\uff1f\r\n\r\n\u5728\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8ba8\u8bba\u4e00\u4e2a\u7269\u7406\u6982\u5ff5\u2014\u2014\u52bf\u80fd\u3002\r\n\r\n\u8bf8\u5982\u91cd\u529b\u52bf\u80fd\uff0c\u7535\u52bf\u80fd\u8fd9\u6837\u7684\u52bf\u80fd\u90fd\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u52bf\u80fd\u7684\u53d8\u5316\u91cf\u53ea\u548c\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\u6709\u5173\uff0c\u800c\u4e0e\u8d77\u70b9\u5230\u7ec8\u70b9\u6240\u8d70\u7684\u8def\u5f84\u65e0\u5173\u3002\r\n\r\n\u52bf\u80fd\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u52bf\u80fd\u7684\u7edd\u5bf9\u503c\u5f80\u5f80\u53d6\u51b3\u4e8e\u8bbe\u7f6e\u7684\u96f6\u52bf\u80fd\u70b9\uff0c\u4f46\u65e0\u8bba\u5c06\u96f6\u52bf\u80fd\u70b9\u8bbe\u7f6e\u5728\u54ea\u91cc\uff0c\u4e24\u70b9\u95f4\u52bf\u80fd\u7684\u5dee\u503c\u662f\u4e00\u5b9a\u7684\u3002\r\n\r\n\u63a5\u4e0b\u6765\u56de\u5230\u6b63\u9898\u3002\r\n\r\n\u5728\u91cd\u65b0\u6807\u8bb0\u540e\u7684\u56fe\u4e0a\uff0c\u4ece $s$ \u70b9\u5230 $t$ \u70b9\u7684\u4e00\u6761\u8def\u5f84 $s \\to p_1 \\to p_2 \\to \\dots \\to p_k \\to t$ \u7684\u957f\u5ea6\u8868\u8fbe\u5f0f\u5982\u4e0b\uff1a\r\n\r\n$(w(s,p_1)+h_s-h_{p_1})+(w(p_1,p_2)+h_{p_1}-h_{p_2})+ \\dots +(w(p_k,t)+h_{p_k}-h_t)$\r\n\r\n\u5316\u7b80\u540e\u5f97\u5230\uff1a\r\n\r\n$w(s,p_1)+w(p_1,p_2)+ \\dots +w(p_k,t)+h_s-h_t$ \r\n\r\n\u65e0\u8bba\u6211\u4eec\u4ece $s$ \u5230 $t$ \u8d70\u7684\u662f\u54ea\u4e00\u6761\u8def\u5f84\uff0c $h_s-h_t$ \u7684\u503c\u662f\u4e0d\u53d8\u7684\uff0c\u8fd9\u6b63\u4e0e\u52bf\u80fd\u7684\u6027\u8d28\u76f8\u543b\u5408\uff01\r\n\r\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u628a $h_i$ \u79f0\u4e3a $i$ \u70b9\u7684\u52bf\u80fd\u3002\r\n\r\n\u4e0a\u9762\u7684\u65b0\u56fe\u4e2d $s \\to t$ \u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u8868\u8fbe\u5f0f\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u524d\u9762\u7684\u8fb9\u6743\u548c\u4e3a\u539f\u56fe\u4e2d $s \\to t$ \u7684\u6700\u77ed\u8def\uff0c\u540e\u9762\u5219\u662f\u4e24\u70b9\u95f4\u7684\u52bf\u80fd\u5dee\u3002\u56e0\u4e3a\u4e24\u70b9\u95f4\u52bf\u80fd\u7684\u5dee\u4e3a\u5b9a\u503c\uff0c\u56e0\u6b64\u539f\u56fe\u4e0a $s \\to t$ \u7684\u6700\u77ed\u8def\u4e0e\u65b0\u56fe\u4e0a $s \\to t$ \u7684\u6700\u77ed\u8def\u76f8\u5bf9\u5e94\u3002\r\n\r\n\u5230\u8fd9\u91cc\u6211\u4eec\u7684\u6b63\u786e\u6027\u8bc1\u660e\u5df2\u7ecf\u89e3\u51b3\u4e86\u4e00\u534a\u2014\u2014\u6211\u4eec\u8bc1\u660e\u4e86\u91cd\u65b0\u6807\u6ce8\u8fb9\u6743\u540e\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u4ecd\u7136\u662f\u539f\u6765\u7684\u6700\u77ed\u8def\u5f84\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8bc1\u660e\u65b0\u56fe\u4e2d\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u975e\u8d1f\uff0c\u56e0\u4e3a\u5728\u975e\u8d1f\u6743\u56fe\u4e0a\uff0cDijkstra \u7b97\u6cd5\u80fd\u591f\u4fdd\u8bc1\u5f97\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002\r\n\r\n\u6839\u636e\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u65b0\u56fe\u4e0a\u4efb\u610f\u4e00\u8fb9 $(u,v)$ \u4e0a\u4e24\u70b9\u6ee1\u8db3\uff1a $h_v \\leq h_u + w(u,v)$ \u3002\u8fd9\u6761\u8fb9\u91cd\u65b0\u6807\u8bb0\u540e\u7684\u8fb9\u6743\u4e3a $w'(u,v)=w(u,v)+h_u-h_v \\geq 0$ \u3002\u8fd9\u6837\u6211\u4eec\u8bc1\u660e\u4e86\u65b0\u56fe\u4e0a\u7684\u8fb9\u6743\u5747\u975e\u8d1f\u3002\r\n\r\n\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u8bc1\u660e\u4e86 Johnson \u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002\r\n\r\n## 3 \u53c2\u8003\u4ee3\u7801\r\n\r\n\uff08\u88ab\u5404\u4f4d D \u60e8\u4e86\uff0c\u6240\u4ee5\u628a\u4ee3\u7801\u6254\u5230 clang-format \u91cc\u683c\u5f0f\u5316\u4e86\u4e0b /wq\uff09\r\n\r\n```cpp\r\n#include <cstring>\r\n#include <iostream>\r\n#include <queue>\r\n#define INF 1e9\r\nusing namespace std;\r\nstruct edge {\r\n  int v, w, next;\r\n} e[10005];\r\nstruct node {\r\n  int dis, id;\r\n  bool operator<(const node& a) const { return dis > a.dis; }\r\n  node(int d, int x) { dis = d, id = x; }\r\n};\r\nint head[5005], vis[5005], t[5005];\r\nint cnt, n, m;\r\nlong long h[5005], dis[5005];\r\nvoid addedge(int u, int v, int w) {\r\n  e[++cnt].v = v;\r\n  e[cnt].w = w;\r\n  e[cnt].next = head[u];\r\n  head[u] = cnt;\r\n}\r\nbool spfa(int s) {\r\n  queue<int> q;\r\n  memset(h, 63, sizeof(h));\r\n  h[s] = 0, vis[s] = 1;\r\n  q.push(s);\r\n  while (!q.empty()) {\r\n    int u = q.front();\r\n    q.pop();\r\n    vis[u] = 0;\r\n    for (int i = head[u]; i; i = e[i].next) {\r\n      int v = e[i].v;\r\n      if (h[v] > h[u] + e[i].w) {\r\n        h[v] = h[u] + e[i].w;\r\n        if (!vis[v]) {\r\n          vis[v] = 1;\r\n          q.push(v);\r\n          t[v]++;\r\n          if (t[v] == n + 1) return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\nvoid dijkstra(int s) {\r\n  priority_queue<node> q;\r\n  for (int i = 1; i <= n; i++) dis[i] = INF;\r\n  memset(vis, 0, sizeof(vis));\r\n  dis[s] = 0;\r\n  q.push(node(0, s));\r\n  while (!q.empty()) {\r\n    int u = q.top().id;\r\n    q.pop();\r\n    if (vis[u]) continue;\r\n    vis[u] = 1;\r\n    for (int i = head[u]; i; i = e[i].next) {\r\n      int v = e[i].v;\r\n      if (dis[v] > dis[u] + e[i].w) {\r\n        dis[v] = dis[u] + e[i].w;\r\n        if (!vis[v]) q.push(node(dis[v], v));\r\n      }\r\n    }\r\n  }\r\n  return;\r\n}\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin >> n >> m;\r\n  for (int i = 1; i <= m; i++) {\r\n    int u, v, w;\r\n    cin >> u >> v >> w;\r\n    addedge(u, v, w);\r\n  }\r\n  for (int i = 1; i <= n; i++) addedge(0, i, 0);\r\n  if (!spfa(0)) {\r\n    cout << -1 << endl;\r\n    return 0;\r\n  }\r\n  for (int u = 1; u <= n; u++)\r\n    for (int i = head[u]; i; i = e[i].next) e[i].w += h[u] - h[e[i].v];\r\n  for (int i = 1; i <= n; i++) {\r\n    dijkstra(i);\r\n    long long ans = 0;\r\n    for (int j = 1; j <= n; j++) {\r\n      if (dis[j] == INF)\r\n        ans += j * INF;\r\n      else\r\n        ans += j * (dis[j] + h[j] - h[i]);\r\n    }\r\n    cout << ans << endl;\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\r\n## 4 \u5e94\u7528\r\n\r\n\u867d\u7136\u7b97\u6cd5\u540d\u544a\u8bc9\u6211\u4eec\u5b83\u53ef\u4ee5\u7528\u4e8e\u6c42\u89e3\u5168\u6e90\u6700\u77ed\u8def\uff0c\u4f46\u662f\u5b9e\u9645\u573a\u666f\u4e2d\u9700\u8981\u6c42\u89e3\u5168\u6e90\u6700\u77ed\u8def\u7684\u573a\u5408\u5e76\u4e0d\u592a\u591a\u3002\r\n\r\n\u5728\u8d39\u7528\u6d41\u95ee\u9898\u4e2d\uff0c\u5b58\u5728\u601d\u60f3\u7c7b\u4f3c\u7684 [Primal-Dual \u539f\u59cb\u5bf9\u5076\u7b97\u6cd5](https://oi-wiki.org/graph/flow/min-cost/#primal-dual)\u3002\u5b83\u901a\u8fc7\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5c06\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u8f6c\u4e3a\u975e\u8d1f\u503c\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7f\u7528 Dijkstra \u7b97\u6cd5\u6c42\u51fa\u6b8b\u91cf\u7f51\u7edc\u4e0a\u7684\u6700\u77ed\u589e\u5e7f\u8def\u3002\r\n\r\n## Reference\r\n\r\n- [Johnson's algorithm - Wikipedia](https://en.wikipedia.org/wiki/Johnson%27s_algorithm)\r\n- \u300a\u7b97\u6cd5\u5bfc\u8bba\uff08\u4e2d\u8bd1\u672c\uff0c\u7b2c 3 \u7248\uff09\u300b\uff0c25.3 \u7528\u4e8e\u7a00\u758f\u56fe\u7684 Johnson \u7b97\u6cd5\uff0c409-411 \u9875",
        "postTime": 1572261345,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "[\u6d1b\u8c37\u65e5\u62a5#242]Johnson \u5168\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "## P5905 Johnson \u5168\u6e90\u6700\u77ed\u8def\n\n---\n\n\u6709\u4e00\u7bc7\u6d1b\u8c37\u65e5\u62a5\u8bb2\u7684\u662f\u8fd9\u4e2a\uff0c\u5199\u5f97\u5f88\u4e0d\u9519\uff1a[Johnson \u5168\u6e90\u6700\u77ed\u8def By Studing Father](https://studyingfather.blog.luogu.org/johnson-algorithm)\n\n\u5148\u6765\u770b\u5168\u6e90\u6700\u77ed\u8def\u7684\u51e0\u4e2a\u57fa\u672c\u60f3\u6cd5\uff1a\n\n1. Floyd\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3)$\uff0c\u80fd\u591f\u89e3\u51b3\u8d1f\u6743\u8fb9\uff0c\u4e0d\u80fd\u89e3\u51b3\u8d1f\u73af\uff0c\u7f3a\u70b9\u5c31\u662f\u5f88\u6162\uff0c\u867d\u7136\u5e38\u6570\u5f88\u5c0f\u4f46\u662f\u8fd9\u9053\u9898\u5f53\u7136\u662f\u8fc7\u4e0d\u4e86\u7684\uff1b\n\n2. Dijkstra\uff1a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a\u4e00\u6b21 Dijkstra\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nm\\log n)$\uff0c\u65f6\u95f4\u4e0a\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f Dijkstra \u53ea\u80fd\u89e3\u51b3\u975e\u8d1f\u6743\u8fb9\uff0c\u4e00\u65e6\u51fa\u73b0\u8d1f\u6743\u8fb9\u5c31\u5f97\u53e6\u60f3\u529e\u6cd5\uff1b\n\n3. BellmanFord\uff1a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a\u4e00\u6b21 BellmanFord\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2m)$\uff0c\u80fd\u641e\u5b9a\u6240\u6709\u6743\u503c\u60c5\u51b5\uff0c\u4f46\u662f\u592a\u6162\u3002\u81f3\u4e8e\u961f\u5217\u7248\u672c\uff08SPFA\uff09\uff0c\u5df2\u7ecf\u88ab\u6211\u5361\u5230\u672c\u673a 200s \u5de6\u53f3\uff08\u6709\u4ec0\u4e48 SPFA \u4f18\u5316\u53ef\u4ee5\u4ea4\uff0c\u8fc7\u4e86\u6211\u5c31\u7ee7\u7eed\u5361\uff09\u3002\n\n\u9996\u5148\u6765\u89e3\u51b3\u8d1f\u73af\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u8dd1\u4e00\u904d BellmanFord \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u770b\u4e00\u904d\u4e0a\u9762\u7684\u51e0\u4e2a\u7b97\u6cd5\uff0c\u4f3c\u4e4e\u53ea\u6709 Dijkstra \u6709\u5e0c\u671b\u4e86\u3002\u800c Johnson \u5168\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\u5c31\u662f\u6539\u9020\u8fd9\u5f20\u56fe\u7684\u8fb9\u6743\uff0c\u4f7f\u5f97\u5b83\u7b49\u6548\u6210\u4e00\u5f20\u975e\u8d1f\u6743\u56fe\u7684\u65b9\u6848\u3002\n\n\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u9876\u70b9 $u$\uff0c\u53d6\u67d0\u4e2a\u503c $d_u$\uff0c\u7136\u540e\u5229\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u5c06\u4e00\u6761\u8fb9 $(u,v,w)$ \u6539\u9020\u6210 $(u,v,w-d_u+d_v)$\uff0c\u8fd9\u6837\u4e00\u6761\u8def\u5f84 $(p_1,p_2,...,p_k)$ \u4e2d\uff0c\u65b0\u56fe\u4e0a $d_{p_2},...,d_{p_{k-1}}$ \u8fd9\u4e9b\u503c\u90fd\u4f1a\u5728\u8fb9\u6743\u76f8\u52a0\u7684\u8fc7\u7a0b\u4e2d\u62b5\u6d88\u6389\uff0c\u5047\u8bbe\u539f\u56fe\u4e2d\u8fd9\u6761\u8def\u5f84\u957f\u4e3a $W$\uff0c\u90a3\u4e48\u65b0\u56fe\u4e2d\u7684\u957f\u5ea6\u5c31\u662f $W-d_{p_1}+d_{p_k}$\u3002\u5bf9\u4e8e\u786e\u5b9a\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c$d_{p_k}-d_{p_1}$ \u53ea\u662f\u4e00\u4e2a\u5e38\u6570\u504f\u79fb\u91cf\uff0c\u4e0d\u4f1a\u5f71\u54cd\u6700\u77ed\u8def\u7684\u8def\u7ebf\u3002\n\n\u4e0b\u9762\u6211\u4eec\u8981\u4f7f\u5f97 $w-d_u+d_v$ \u662f\u4e00\u4e2a\u975e\u8d1f\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528 Dijkstra \u4e86\uff0c\u8fd9\u4e0d\u96be\u5b9e\u73b0\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u7684\u5f62\u5f0f\u3002\n\n\u5efa\u7acb\u8d85\u7ea7\u6e90\u70b9 $n+1$\uff0c\u4ece\u5b83\u5411\u539f\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u5efa\u4e00\u6761 $0$ \u6743\u8fb9\uff0c\u5148\u4ece\u5b83\u4e3a\u6e90\u70b9\u7528 BellmanFord \u8dd1\u6700\u77ed\u8def\uff0c\u76f4\u63a5\u4ee4 $d_u$ \u7b49\u4e8e\u8fd9\u4e2a\u6700\u77ed\u8def\u5373\u53ef\uff0c\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u81ea\u7136\u6ee1\u8db3\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff08BellmanFord \u91c7\u7528\u961f\u5217\u7248\u672c\uff0c\u56e0\u4e3a\u662f\u51e0\u4e2a\u6a21\u677f\u62fc\u51d1\u7684\uff0c\u6240\u4ee5\u663e\u5f97\u6709\u4e9b\u5197\u957f\uff09\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int MAXN=3010,INF=1000000000;\npriority_queue < pair<int,int> > q;\nqueue <int> qu;\nint n,m,tot,tot2,x,y,z,d[MAXN][MAXN],vis[MAXN];\nint hd[MAXN],ver[3*MAXN],nx[3*MAXN],edge[3*MAXN];\nint dis[MAXN],hd2[MAXN],ver2[6*MAXN],nx2[6*MAXN],edge2[6*MAXN],vis2[MAXN],tim[MAXN];\nstruct Edge {\n\tEdge () {u=v=w=0;}\n\tEdge (int a,int b,int c) {u=a,v=b,w=c;}\n\tint u,v,w;\n}e[3*MAXN];\nvoid add_edge (int x,int y,int z) {\n\tver[++tot]=y;\n\tedge[tot]=z,nx[tot]=hd[x];\n\thd[x]=tot;\n\treturn;\n}\nvoid add_edge1 (int x,int y,int z) {\n\tver2[++tot2]=y;\n\tedge2[tot2]=z,nx2[tot2]=hd2[x];\n\thd2[x]=tot2;\n\treturn;\n}\nbool spfa (int s) {\n\tdis[s]=0,vis2[s]=1;\n\tqu.push(s);\n\twhile (!qu.empty()) {\n\t\tint a=qu.front();\n\t\tqu.pop();\n\t\tvis2[a]=0;\n\t\tif (++tim[a]>n-1) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (int i=hd2[a];i;i=nx2[i]) {\n\t\t\tif (dis[ver2[i]]>dis[a]+edge2[i]) {\n\t\t\t\tdis[ver2[i]]=dis[a]+edge2[i];\n\t\t\t\tif (!vis2[ver2[i]]) {\n\t\t\t\t\tvis2[ver2[i]]=1;\n\t\t\t\t\tqu.push(ver2[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nvoid dijkstra (int s) {\n\tmemset(vis,0,sizeof(vis));\n\td[s][s]=0;\n\tq.push(make_pair(0,s));\n\twhile (!q.empty()) {\n\t\tpair <int,int> a=q.top();\n\t\tq.pop();\n\t\tif (vis[a.second]) {continue;}\n\t\tvis[a.second]=1;\n\t\tfor (int i=hd[a.second];i;i=nx[i]) {\n\t\t\tif (d[s][ver[i]]>d[s][a.second]+edge[i]) {\n\t\t\t\td[s][ver[i]]=d[s][a.second]+edge[i];\n\t\t\t\tq.push(make_pair(-d[s][ver[i]],ver[i]));\n\t\t\t}\n\t\t}\n\t}\n}\nint main () {\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(d,0x3f,sizeof(d));\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=m;i++) {\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd_edge1(x,y,z);\n\t\tif (z>500000||z<-500000) {printf(\"err\\n\");return 0;}\n\t\te[i]=Edge(x,y,z);\n\t}\n\tfor (int i=1;i<=n;i++) {\n\t\tadd_edge1(n+1,i,0);\n\t}\n\tif (!spfa(n+1)) {\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}\n\tfor (int i=1;i<=m;i++) {\n\t\tadd_edge(e[i].u,e[i].v,e[i].w+dis[e[i].u]-dis[e[i].v]);\n\t}\n\tfor (int i=1;i<=n;i++) {\n\t\tdijkstra(i);\n\t}\n\tfor (int i=1;i<=n;i++) {\n\t\tll ans=0;\n\t\tfor (int j=1;j<=n;j++) {\n\t\t\tif (d[i][j]==0x3f3f3f3f) {ans+=1ll*INF*j;}\n\t\t\telse {ans+=1ll*(d[i][j]-dis[i]+dis[j])*j;}\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1578494400,
        "uid": 113546,
        "name": "ix35",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5905 \u3010\u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://www.luogu.com.cn/blog/Sham-Devour/solution-p5905)\n\n[\u524d\u7f6e\u829d\u58eb\uff1a\u6700\u77ed\u8def](https://oi-wiki.org//graph/shortest-path/)\n\n### Description\n\n> \u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u7ed3\u70b9\u548c $m$ \u6761\u8fb9\u7684 **\u6709\u5411\u56fe**\u3002\u82e5\u56fe\u4e2d\u6709\u8d1f\u73af\uff0c\u76f4\u63a5\u8f93\u51fa `-1`\u3002\u5426\u5219\u5b9a\u4e49 $dis_{i,j}$ \u4e3a\u7ed3\u70b9 $i$ \u5230\u7ed3\u70b9 $j$ \u7684\u6700\u77ed\u8def\uff0c\u6c42\u51fa\uff1a\n\n> $$\\sum\\limits_{i=1}^{n} j\\times dis_{i,j}$$\n\n> \u5176\u4e2d\uff0c\u82e5\u7ed3\u70b9 $i$ \u4e0d\u80fd\u5230\u8fbe\u7ed3\u70b9 $j$\uff0c\u5219 $dis_{i,j}=10^9$\uff1b\u82e5 $i=j$\uff0c\u5219 $dis_{i,j}=0$\u3002\n\n### Solution\n\nJohnson \u5168\u6e90\u6700\u77ed\u8def\u6a21\u677f\u9898\u3002\n\n- \u5efa\u7acb\u4e00\u4e2a\u865a\u70b9 $0$ \u53f7\u7ed3\u70b9\u3002\n\n- \u4ece $0$ \u53f7\u7ed3\u70b9\u5411 $i(i\\in[1,n])$ \u8fde\u63a5\u4e00\u6761\u6743\u503c\u4e3a $0$ \u7684\u6709\u5411\u8fb9\u3002\n\n- \u4f7f\u7528 spfa \u7b97\u6cd5\u6c42\u51fa\u4ece $0$ \u53f7\u7ed3\u70b9\u5230 $i(i\\in[1,n])$ \u7684\u6700\u77ed\u8def $dis_i$\u3002\n\n- \u7531\u4e8e dijkstra \u4e0d\u80fd\u6c42\u8d1f\u6743\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u5c06\u8fde\u63a5 $u,v$ \u7684\u8fb9\u6743 $w$ \u66f4\u65b0\u4e3a $w+dis_u-dis_v$\u3002\n\n- \u63a5\u4e0b\u6765\u5bf9 $i(i\\in[1,n])$ \u53f7\u70b9\u8fdb\u884c dijkstra\uff0c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\n\n**\u6ce8\u610f\uff1a**\n\n- \u8bb0\u5f97\u5f00 long long\u3002\n\n- \u5224\u8d1f\u73af\u65f6\u7531\u4e8e\u589e\u52a0\u4e86 $0$ \u53f7\u70b9\uff0c\u6240\u4ee5\u5f53\u67d0\u4e2a\u7ed3\u70b9\u5165\u961f\u6b21\u6570 $>n$ \u65f6\u624d\u8bf4\u660e\u6709\u8d1f\u73af\u3002\n\n### Problem Solving!\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <queue>\n#include <cstring>\n\ntypedef long long ll;\n\nconst int inf = 0x3f3f3f3f;\n\nusing namespace std;\n\nint n, m, cnt, elast[3005], dis[3005], d[3005], num[3005];\nbool vis[3005];\n\nstruct edge {\n\tint to, len, next;\n} e[9005];\n\nqueue<int> q;\n\nvoid add (int u, int v, int w) {\n\te[++cnt].to = v;\n\te[cnt].len = w;\n\te[cnt].next = elast[u];\n\telast[u] = cnt;\n}\n\nbool spfa (int x) {\n\tdis[x] = 0;\n\tq.push(x);\n\tvis[x] = true;\n\tnum[x]++;\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tvis[u] = false;\n\t\tfor (int i = elast[u]; i != 0; i = e[i].next)\n\t\t\tif (dis[e[i].to] > dis[u] + e[i].len) {\n\t\t\t\tdis[e[i].to] = dis[u] + e[i].len;\n\t\t\t\tif (!vis[e[i].to]) {\n\t\t\t\t\tq.push(e[i].to);\n\t\t\t\t\tvis[e[i].to] = true;\n\t\t\t\t\tnum[e[i].to]++;\n\t\t\t\t\tif (num[e[i].to] == n + 1)\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn true;\n}\n\nstruct ybmq {\n\tint dis, id;\n} bjhz[3005];\n\nbool operator < (ybmq x, ybmq y) {\n\treturn x.dis > y.dis;\n}\n\nvoid dijkstra (int x) {\n\tpriority_queue<ybmq> pq;\n\td[x] = 0;\n\tybmq u;\n\tu.dis = 0;\n\tu.id = x;\n\tpq.push(u);\n\twhile (!pq.empty()) {\n\t\tybmq u = pq.top();\n\t\tpq.pop();\n\t\tif (vis[u.id])\n\t\t\tcontinue;\n\t\tvis[u.id] = true;\n\t\tfor (int i = elast[u.id]; i != 0; i = e[i].next)\n\t\t\tif (d[e[i].to] > d[u.id] + e[i].len) {\n\t\t\t\td[e[i].to] = d[u.id] + e[i].len;\n\t\t\t\tybmq v;\n\t\t\t\tv.dis = d[e[i].to];\n\t\t\t\tv.id = e[i].to;\n\t\t\t\tpq.push(v);\n\t\t\t}\n\t}\n}\n\nint main () {\n\tmemset(dis, inf, sizeof(dis));\n\tscanf(\"%d %d\", &n, &m);\n\tfor (int i = 1; i <= m; i++) {\n\t\tint u, v, w;\n\t\tscanf(\"%d %d %d\", &u, &v, &w);\n\t\tadd(u, v, w);\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tadd(n + 1, i, 0);\n\tbool flag = spfa(n + 1);\n\tif (!flag) {\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = elast[i]; j != 0; j = e[j].next)\n\t\t\te[j].len += dis[i] - dis[e[j].to];\n\tfor (int i = 1; i <= n; i++) {\n\t\tmemset(d, inf, sizeof(d));\n\t\tmemset(vis, false, sizeof(vis));\n\t\tdijkstra(i);\n\t\tll ans = 0;\n\t\tfor (int j = 1; j <= n; j++) {\n\t\t\tif (d[j] == inf)\n\t\t\t\tans += 1ll * 1e9 * j;\n\t\t\telse\n\t\t\t\tans += 1ll * (d[j] - dis[i] + dis[j]) * j;\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1604030973,
        "uid": 365542,
        "name": "SDqwq",
        "ccfLevel": 7,
        "title": "P5905 \u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def"
    },
    {
        "content": "- **2020/06/10 Upd\uff1a\u6839\u636e\u8bc4\u8bba\u505a\u4e86\u4e00\u4e9b\u5c0f\u4fee\u6539\u3002**\n- **2020/11/05 Upd\uff1a\u88abhack\u4e86\uff0c\u66f4\u6539\u4e86\u4ee3\u7801\u5e76\u4fee\u4e86\u4e00\u70b9\u5c0f\u9505**\n\n\u4f8b\u9898\uff1a[P5905 \u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def](https://www.luogu.com.cn/problem/P5905)\n\n\u9996\u5148\u8003\u8651\u6c42\u5168\u6e90\u6700\u77ed\u8def\u7684\u51e0\u79cd\u65b9\u6cd5\uff1a\n\n- Floyd\uff1a\u65f6\u95f4\u590d\u6742\u5ea6$O(n^3)$\uff0c\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\uff0c\u4f46\u4e0d\u80fd\u5904\u7406\u8d1f\u73af\uff0c\u800c\u4e14\u901f\u5ea6\u5f88\u6162\u3002\n- Bellman-Ford\uff1a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a\u4e00\u6b21Bellman-Ford\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2m)$\uff0c\u53ef\u4ee5\u5904\u7406\u8d1f\u6743\u8fb9\uff0c\u53ef\u4ee5\u5904\u7406\u8d1f\u73af\uff0c\u4f46\u597d\u50cf\u6bd4Floyd\u8fd8\u6162\uff1f\n- dijkstra\uff1a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a\u4e00\u6b21dijkstra\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nmlogm)$\uff0c\u4e0d\u80fd\u5904\u7406\u8d1f\u6743\u8fb9\uff0c\u4f46\u6bd4\u524d\u9762\u4e24\u4e2a\u5feb\u591a\u4e86\u3002\n\n\u597d\u50cf\u2026\u2026\u53ea\u6709dijkstra\u8fd8\u6709\u5e0c\u671b\uff1f\u4f46\u8d1f\u6743\u8fb9\u5904\u7406\u4e0d\u4e86\u771f\u662f\u5f88\u68d8\u624b\u554a\u3002\n\n\u4e00\u79cd\u65b9\u6cd5\u662f\u8ba9\u6bcf\u6761\u8fb9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u6570$x$\u4f7f\u5f97\u8fb9\u6743\u4e3a\u6b63\uff0c\u4f46\u8003\u8651\u4e0b\u56fe\uff1a  \n![](https://i.loli.net/2020/05/09/TxFjbA3oypn7Vmi.png)  \n$1$\u5230$2$\u7684\u6700\u77ed\u8def\u5e94\u4e3a\uff1a$1 -> 3 -> 4 -> 2$\uff0c\u957f\u5ea6\u4e3a$-1$\u3002\u5982\u679c\u6211\u4eec\u628a\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u52a0\u4e0a$5$\uff1a  \n![](https://i.loli.net/2020/05/09/X9TGEagWif8q6CU.png)  \n\u6b64\u65f6\u7684\u6700\u77ed\u8def\u662f\uff1a$1 -> 5 -> 2$\uff0c\u5c31\u4e0d\u662f\u5b9e\u9645\u7684\u6700\u77ed\u8def\u4e86\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u884c\u4e0d\u901a\n\n**\u6ce8\uff1a\u56e0\u4e3a\u4e24\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u8fb9\u6570\u4e0d\u4e00\u6837\uff0c\u52a0\u7684\u503c\u4e5f\u4e0d\u540c\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u8fd9\u79cd\u9519\u8bef\u3002**\n\n\u63a5\u4e0b\u6765\uff0c\u5c31\u8be5 Johnson \u767b\u573a\u5566\uff01Johnson \u5176\u5b9e\u5c31\u662f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u6807\u8bb0\u8fb9\u6743\u5566\u3002\n\n\u9996\u5148\u6765\u770b\u770b\u5b9e\u73b0\u65b9\u6cd5\uff1a\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u7ed3\u70b9\uff08\u4e0d\u59a8\u8bbe\u4ed6\u7684\u7f16\u53f7\u4e3a0\uff09\uff0c\u7531\u4ed6\u5411\u5176\u4ed6\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$0$\u7684\u8fb9\uff0c\u7136\u540e\u6c420\u53f7\u8282\u70b9\u4e3a\u6e90\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0c\u5b58\u5230\u4e00\u4e2a$h$\u6570\u7ec4\u4e2d\u3002\u7136\u540e\uff0c\u8ba9\u6bcf\u6761\u8fb9\u7684\u6743\u503c$w$\u53d8\u4e3a$w+h_u-h_v$\uff0c\u8fd9\u91cc$u$\u548c$v$\u5206\u522b\u4e3a\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u7136\u540e\u518d\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a dijkstra \u5c31OK\u4e86\u3002\n\nQ\uff1a\u90a3\u8fd9\u4e48\u8bf4\uff0cDijkstra \u4e5f\u53ef\u4ee5\u6c42\u51fa\u8d1f\u6743\u56fe\uff08\u65e0\u8d1f\u73af\uff09\u7684\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e86\uff1f  \nA\uff1a\u6ca1\u9519\u3002\u4f46\u662f\u9884\u5904\u7406\u8981\u8dd1\u4e00\u904d Bellman-Ford\uff0c\u8fd8\u4e0d\u5982\u76f4\u63a5\u7528 Bellman-Ford \u5462\u3002\n\n\u5982\u4f55\u8bc1\u660e\u8fd9\u662f\u6b63\u786e\u7684\u5462\uff1f\n\n\u9996\u5148\uff0c\u4ece$s$\u5230$t$\u7684\u8def\u5f84\u4e2d\u968f\u4fbf\u53d6\u51fa\u4e00\u6761\uff1a\n$$s -> p_1 -> p_2 -> \\cdots -> p_k -> t$$\n\u5219\u8fd9\u6761\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\uff1a\n$$(w_{s,p_1}+h_s-h_{p_1})+(w_{p_1,p_2}+h_{p_1}-h_{p_2})+\\dots+(w_{p_k,t}+h_{p_k}-h_t)$$\n\u7b80\u5316\u540e\u5f97\u5230\uff1a\n$$w_{s,p_1}+w_{p_1,p_2}+\\cdots+w_{p_k,t}+h_s-h_t$$\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u7ba1\u8d70\u54ea\u6761\u8def\u5f84\uff0c\u6700\u540e\u90fd\u662f$+h_s-h_t$\uff0c\u800c$h_s$\u548c$h_t$\u53c8\u662f\u4e0d\u53d8\u7684\uff0c\u6240\u4ee5\u6700\u7ec8\u5f97\u5230\u7684\u6700\u77ed\u8def\u5f84\u8fd8\u662f\u539f\u6765\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n\u5230\u8fd9\u91cc\u5df2\u7ecf\u8bc1\u660e\u4e00\u534a\u4e86\uff0c\u63a5\u4e0b\u6765\u8981\u8bc1\u660e\u5f97\u5230\u7684\u8fb9\u6743\u975e\u8d1f\uff0c\u5fc5\u987b\u8981\u65e0\u8d1f\u6743\u8fb9\u624d\u80fd\u4f7f dijkstra \u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u6b63\u786e\u3002\u6839\u636e\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff08\u5c31\u662f\u90a3\u4e2a\u4e09\u89d2\u5f62\u91cc\u4efb\u610f\u4e24\u6761\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8e\u53e6\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\uff09\uff0c\u65b0\u56fe\u4e0a\u7684\u4efb\u610f\u4e00\u6761\u8fb9$(u,v)$\u4e0a\u7684\u4e24\u70b9\u6ee1\u8db3\uff1a$h_v \\le w_{u,v}+h_u$\uff0c\u5219\u65b0\u8fb9\u7684\u8fb9\u6743$w_{u,v}+h_u-h_v \\ge 0$\u3002\u6240\u4ee5\u65b0\u56fe\u7684\u8fb9\u6743\u975e\u8d1f\u3002\n\n\u6b63\u786e\u6027\u8bc1\u660e\u5c31\u662f\u8fd9\u4e2a\u4e9a\u5b50\u3002\n\n**\u4ee3\u7801\u5b9e\u73b0\uff08\u6ce8\u610f\u5904\u7406\u7cbe\u5ea6\u95ee\u9898\uff0c\u8be5\u5f00ll\u7684\u65f6\u5019\u5f00ll\uff09\uff1a**\n```cpp\n#include<cstdio>\n#include<queue>\n#define MAXN 5005\n#define MAXM 10005\n#define INF 1e9\nusing namespace std;\nint n,m;\nint vis[MAXN];\nlong long h[MAXN],dis[MAXN];\nbool f[MAXN];\nstruct graph\n{\n\tint tot;\n\tint hd[MAXN];\n\tint nxt[MAXM],to[MAXM],dt[MAXM];\n\tvoid add(int x,int y,int w)\n\t{\n\t\ttot++;\n\t\tnxt[tot]=hd[x];\n\t\thd[x]=tot;\n\t\tto[tot]=y;\n\t\tdt[tot]=w;\n\t\treturn ;\n\t}\n}g;//\u94fe\u5f0f\u524d\u5411\u661f\nbool SPFA(int s)//\u8fd9\u91cc\u7528\u4e86Bellman-Ford\u7684\u961f\u5217\u4f18\u5316\n{\n\tqueue<int>q;\n\tfor(int i=1;i<=n;++i) h[i]=INF,f[i]=false;\n\th[s]=0;\n\tf[s]=true;\n\tq.push(s);\n\twhile(!q.empty())\n\t{\n\t\tint xx=q.front();\n\t\tq.pop();\n\t\tf[xx]=false;\n\t\tfor(int i=g.hd[xx];i;i=g.nxt[i])\n\t\t\tif(h[g.to[i]]>h[xx]+g.dt[i])\n\t\t\t{\n\t\t\t\th[g.to[i]]=h[xx]+g.dt[i];\n\t\t\t\tif(!f[g.to[i]])\n\t\t\t\t{\n\t\t\t\t\tif(++vis[g.to[i]]>=n+1) return false;//\u6ce8\u610f\u5728\u6709\u91cd\u8fb9\u7684\u60c5\u51b5\u4e0b\u8981\u8bb0\u5f55\u5165\u961f\u6b21\u6570\u800c\u4e0d\u662f\u677e\u5f1b\u6b21\u6570\uff0c\u4ee5\u53ca\u56e0\u4e3a\u65b0\u52a0\u5165\u4e86\u4e00\u4e2a0\u70b9\uff0c\u6240\u4ee5\u6b21\u6570\u5e94\u8be5\u5224n+1\u800c\u4e0d\u662fn\u3002\n\t\t\t\t\tf[g.to[i]]=true,q.push(g.to[i]);\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn true;\n}\nvoid dijkstra(int s)\n{\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > q;\n\tfor(int i=1;i<=n;i++) dis[i]=INF,f[i]=false;\n\tq.push(make_pair(0,s));\n\tdis[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tint xx=q.top().second;\n\t\tq.pop();\n\t\tif(!f[xx])\n\t\t{\n\t\t\tf[xx]=true;\n\t\t\tfor(int i=g.hd[xx];i;i=g.nxt[i])\n\t\t\t\tif(dis[g.to[i]]>dis[xx]+g.dt[i])\n\t\t\t\t{\n\t\t\t\t\tdis[g.to[i]]=dis[xx]+g.dt[i];\n\t\t\t\t\tif(!f[g.to[i]])\n\t\t\t\t\t\tq.push(make_pair(dis[g.to[i]],g.to[i]));\n\t\t\t\t}\n\t\t}\n\t}\n\treturn ;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tg.add(u,v,w);\n\t}\n\tfor(int i=1;i<=n;i++) g.add(0,i,0);//\u5efa\u865a\u62df\u8282\u70b90\u5e76\u4e14\u5f80\u5176\u4ed6\u7684\u70b9\u90fd\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u8fb9\n\tif(!SPFA(0))//\u6c42h\u7684\u540c\u65f6\u4e5f\u5224\u4e86\u8d1f\u73af\n\t{\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\tfor(int u=1;u<=n;u++)\n\t\tfor(int i=g.hd[u];i;i=g.nxt[i])\n\t\t\tg.dt[i]+=h[u]-h[g.to[i]];//\u6c42\u65b0\u8fb9\u7684\u8fb9\u6743\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdijkstra(i);//\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a\u4e00\u904ddijkstra\n\t\tlong long ans=0;\n\t\tfor(int j=1;j<=n;j++)//\u8bb0\u5f55\u7b54\u6848\n\t\t\tif(dis[j]==INF) ans+=1ll*j*INF;\n\t\t\telse ans+=1ll*j*(dis[j]+(h[j]-h[i]));\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\u6700\u540e[\u5b89\u5229\u4e00\u53d1\u535a\u5ba2](https://www.luogu.com.cn/blog/195331/)",
        "postTime": 1589031513,
        "uid": 195331,
        "name": "Mine_King",
        "ccfLevel": 7,
        "title": "Johnson\u5168\u6e90\u6700\u77ed\u8def"
    },
    {
        "content": "\u4e0e\u5176\u8bf4 $Johnson$ \u7b97\u6cd5\u662f\u4e00\u4e2a\u5168\u6e90\u6700\u77ed\u8def\u7b97\u6cd5,  \n\u4e0d\u5982\u8bf4\u5b83\u662f\u5728\u6c42\u6700\u77ed\u8def\u65f6\u5c06\u8d1f\u6743\u56fe\u8f6c\u5316\u4e3a\u6b63\u6743\u56fe\u7684\u7b97\u6cd5\u3002\n\n### \u4e00\u3001\u95ee\u9898\u5bfc\u5165\n\n\u5728\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019,\u6211\u4eec\u7ecf\u5e38\u4f1a\u9047\u5230\u8d1f\u6743\u8fb9\n\n\u9996\u9009\u7684\u65b9\u5f0f\u80af\u5b9a\u662f $Floyd$ $(\\Theta(n^3)\\text{ \u5168\u6e90 })$  \n\u4ee5\u53ca $Bellman\\text{-}Ford$ $(\\Theta(nm)\\text{ \u5355\u6e90 })$,\u4e8c\u8005\u5404\u6709\u4f18\u7f3a\u70b9: \n\n1. $Floyd$ \u9002\u7528\u4e8e\u5168\u6e90,\u7528\u4e8e\u5355\u6e90\u592a\u8fc7\u6d6a\u8d39,\u53ef\u7528\u4e8e\u8d1f\u6743\u8fb9\u4f46\u65e0\u6cd5\u7528\u4e8e\u8d1f\u73af,  \n\t\u800c\u4e14\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe,\u5bf9\u4e8e\u7a00\u758f\u56fe\u5176\u65f6\u95f4\u4e0d\u6562\u606d\u7ef4\u3002\n\n\n2. $Bellman\\text{-}Ford$ \u9002\u7528\u4e8e\u5355\u6e90,\u7528\u4e8e\u5168\u6e90\u5219 $\\Theta(n^2m)$ \u7684\u590d\u6742\u5ea6\u6bd4 $Floyd$ \u66f4\u9ad8,  \n\t\u867d\u53ef\u4ee5\u89e3\u51b3\u8d1f\u73af,\u4f46\u4e0d\u8bba\u600e\u4e48\u4f18\u5316\u603b\u4f1a\u88ab\u6784\u9020\u5361\u5230\u6700\u574f\u590d\u6742\u5ea6\u3002\n     \n    \n  \u800c\u80fd\u83b7\u5f97\u8f83\u4f18\u4e14\u7a33\u5b9a\u7684\u590d\u6742\u5ea6\u7684,\u53ea\u6709 $Dijkstra$ \u4e86,\u5176\u5728\u7a20\u5bc6\u56fe\u4e0a\u590d\u6742\u5ea6\u4e3a $\\Theta(n^2)$,  \n\u7a00\u758f\u56fe\u4e0a\u901a\u8fc7\u5806\u4f18\u5316\u53ef\u4ee5\u4f18\u5316\u5230 $\\Theta(nm\\log_2m)$ ,\u4f46\u5176\u53ea\u80fd\u5e94\u7528\u4e8e\u6b63\u6743\u56fe\u3002\n\n\n\u5bf9\u4e8e \u7a00\u758f\u56fe+\u8d1f\u6743+\u591a\u6b21\u6c42\u89e3 \u7684\u7ec4\u5408,\u5c31\u8981\u901a\u8fc7 $Johnson$ \u7b97\u6cd5\u6539\u9020\u5168\u56fe\u4e86\u3002\n\n### \u4e8c\u3001\u7b97\u6cd5\u6982\u8ff0\n\n\u8fd9\u91cc\u7565\u8fc7\u8bc1\u660e\u548c\u90e8\u5206\u8fc7\u7a0b,\u53ef\u4ee5\u53bb\u770b\u53e6\u5916\u51e0\u4f4d $dalao$ \u7684\u9898\u89e3\n\n\u9996\u5148,\u8981\u4fdd\u8bc1\u6ca1\u6709\u8d1f\u73af(\u901a\u8fc7\u4e00\u8f6e $Bellman\\text{-}Ford$ ),\u65e2\u7136\u6ca1\u6709\u8d1f\u73af,  \n\u90a3\u4e48\u53bb\u6389\u6b63\u6743\u8fb9\u5b83\u5c31\u4f1a\u53d8\u6210\u4e00\u4e2a \u6709\u5411\u65e0\u73af\u56fe$(DAG)$\u3002\n\n\u65e2\u7136\u662f $DAG$\uff0c\u90a3\u5176\u5728\u6c42\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u4e2d\u5fc5\u6709\u4e00\u5b9a\u7684\u5c42\u6b21\u6027,  \n\u4e0d\u96be\u53d1\u73b0\u52a0\u5165\u6b63\u6743\u8fb9\u540e\u4e5f\u662f\u5982\u6b64\n\n\u4e8e\u662f\u5f15\u5165\u4e00\u4e2a\u6982\u5ff5\uff1a\u52bf\u3002\u65b0\u589e\u4e00\u4e2a $0$ \u53f7\u8282\u70b9\uff0c\u4ece\u8fd9\u4e2a\u70b9\u5411\u6240\u6709\u70b9\u8fde\u4e0a\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9,  \n\u7528 $Bellman\\text{-}Ford$ \u6240\u6c42\u51fa\u7684 $0$ \u53f7\u70b9\u5230\u70b9 $p$ \u7684\u6700\u77ed\u8def\u5c31\u662f\u8be5\u70b9\u7684\u52bf\n\n\u6211\u4eec\u53ef\u4ee5\u660e\u663e\u53d1\u73b0\u52bf\u5b8c\u597d\u5730\u4fdd\u7559\u4e86\u8fd9\u79cd\u5c42\u6b21\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sx6582kk.png?x-oss-process=image/resize,m_lfit,h_680,w_900)\n\n\u5982\u56fe,\u6807\u7ea2\u7684\u4e3a\u8d1f\u6743\u8fb9,\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u70b9\u7684\u52bf\u6ee1\u8db3\u62d3\u8865\u5173\u7cfb\n\n\u4e8e\u662f,\u6211\u4eec\u5c06\u8fb9\u52a0\u4e0a\u5176\u5165\u70b9\u548c\u51fa\u70b9\u7684\u52bf\u7684\u5dee,\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u6b63\u6743\u56fe,\u56fe\u4e0a\u7684\u6700\u77ed\u8def\u548c\u539f\u6765\u8def\u5f84\u76f8\u540c\n\n\u7b97\u51fa\u6700\u77ed\u8def\u4e4b\u540e\u518d\u5c06\u957f\u5ea6\u51cf\u53bb\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u52bf\u7684\u5dee,\u5c31\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u6700\u77ed\u8def\u957f\u5ea6\n\n\u4e8e\u662f\u4e0d\u96be\u5f97\u5230\u8f6c\u5316\u548c\u6c42\u6700\u77ed\u8def\u957f\u5ea6\u7684\u4ee3\u7801\uff1a\n```cpp\n//\u7565\u53bb\u624b\u5199\u7684\u6a21\u677f\uff0c\u5934\u6587\u4ef6\nint dis[3010][3010],value[6010],h[3010];\nint head[3010],to[6010],next[6010];\nint n,m;\nbool isuse[3010];\nstruct point{\n\tint id,length;\n\tinline bool operator <(point p){\n\t\treturn length<p.length;}\n}p,q;//Dij\u7684\u952e\u503c\nHEAP<point,6010> heap;//\u624b\u5199\u5806,\u7565\u53bb\u5b9e\u73b0\ninline bool spfa(int id){//\u6df1\u641cBellman-Ford\u5224\u8d1f\u73af\u5e76\u6c42\u52bf\n\tif(isuse[id]) return 1;\n\tisuse[id]=1;\n\tfor(int i=head[id];i!=0;i=next[i])\n\t\tif(h[to[i]]>h[id]+value[i]){\n\t\t\th[to[i]]=h[id]+value[i];\n\t\t\tif(spfa(to[i])) return 1;\n\t\t}\n\treturn isuse[id]=0;\n}\nint main(){\n\tcin>>n>>m;//cin,cout\u5b9e\u5747\u4e3a\u624b\u5199\u5feb\u8bfb\u5feb\u5199,\u6b64\u5904\u7565\u53bb\u5b9e\u73b0\n\tfor(int from;m>0;m--){\n\t\tcin>>from>>to[m]>>value[m];\n\t\tnext[m]=head[from];\n\t\thead[from]=m;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(spfa(i)) return cout<<-1,0;//\u6c42\u52bf\n\tfor(int id=1;id<=n;id++)\n\t\tfor(int i=head[id];i!=0;i=next[i])\n\t\t\tvalue[i]=value[i]+h[id]-h[to[i]];//\u7ed9\u8fb9\u52a0\u4e0a\u52bf\u5dee \n\tmemset(dis,0x7f,sizeof(dis));\n\tlong long ans;\n\tfor(int begin=1;begin<=n;begin++){\n\t\tp.id=begin,p.length=dis[begin][begin]=0;\n\t\theap.push(p),ans=0;\n\t\twhile(!heap.empty()){//Dij\u6c42\u6700\u77ed\u8def \n\t\t\tp=heap.top(),heap.pop();\n\t\t\tif(dis[begin][p.id]<p.length) continue;\n\t\t\tfor(int i=head[p.id];i!=0;i=next[i])\n\t\t\t\tif(dis[begin][to[i]]>p.length+value[i]){\n\t\t\t\t\tq.length=dis[begin][q.id=to[i]]=p.length+value[i];\n\t\t\t\t\theap.push(q);\n\t\t\t\t}\n\t\t}\n\t\tfor(long long i=1;i<=n;i++) //\u51cf\u53bb\u603b\u7684\u52bf\u5dee\u5e76\u7edf\u8ba1 \n\t\t\tans+=i*(dis[begin][i]==0x7f7f7f7f? 1e9:dis[begin][i]+h[i]-h[begin]);\n\t\tcout<<ans<<'\\n';\n\t}\n    return 0;\n}\n```\n\n### \u4e09\u3001\u5e94\u7528\u4e3e\u4f8b\n\n\u8fd9\u4e2a\u7b97\u6cd5\u6709\u4ec0\u4e48\u7528\u5462? \u7528\u5b83\u8dd1\u5355\u6e90\u8fd8\u4e0d\u5982 $Bellman\\text{-}Ford$\n\n\u4f46\u8fd9\u4e00\u7b97\u6cd5\u5728**\u7f51\u7edc\u6d41**\u4e0a,\u6709\u6781\u4e3a\u91cd\u8981\u7684\u4f5c\u7528\n\n\u6c42\u89e3\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5c31\u662f\u4e0d\u65ad\u6c42\u89e3\u6700\u77ed\u8def,\u7136\u540e\u901a\u8fc7\u6700\u77ed\u8def\u589e\u5e7f\u7684\u8fc7\u7a0b\n\n\u7531\u4e8e\u8d70\u53cd\u5411\u8fb9\u8d39\u7528\u8981\u53d6\u8d1f,\u65e0\u6cd5\u4f7f\u7528 $Dijksta$ \u589e\u5e7f,\u53ea\u80fd\u901a\u8fc7 $Bellman\\text{-}Ford$\n\n\u800c\u6709\u4e86 $Johnson$ \u7b97\u6cd5\u4ee5\u540e,\u5c31\u53ef\u4ee5\u5148\u505a\u4e00\u8f6e $Bellman\\text{-}Ford$,\n\n\u7136\u540e\u4e0d\u65ad\u901a\u8fc7 $Dijksta$ \u589e\u5e7f\uff0c\u8fd0\u884c\u66f4\u7a33\u5b9a,\u6548\u7387\u66f4\u9ad8\n\n(\u5feb\u6b7b\u4e86\u7684 $SPFA$ \u80fd\u5c11\u7528\u4e00\u70b9\u662f\u4e00\u70b9)\n\n\u8d39\u7528\u6d41\u6a21\u677f\u662f$\\color{blue}\\text{\u84dd}$\u7684\uff0c$Johnson$ \u6a21\u677f\u662f$\\color{green}\\text{\u7eff}$\u7684,\u8d39\u7528\u6d41\u9898\u76ee$\\color{purple}\\text{\u7d2b}$\u9898\u8d77\u6b65\uff0c\n\n$1\\color{blue}\\text{\u84dd}$ $+1\\color{green}\\text{\u7eff}$ $=n\\color{purple}\\text{\u7d2b}$\uff0c\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462",
        "postTime": 1579334933,
        "uid": 104726,
        "name": "wangrx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5905 \u3010\u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "\u65b0\u624b\u521a\u63a5\u89e6\u5173\u4e8e\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u7136\u800c\u4eca\u5929\u5374\u63a5\u89e6\u4e86\u4e00\u9053Johnson\u5168\u6e90\u6700\u77ed\u8def\u7684\u95ee\u9898\uff0c\u4e8e\u662f\u5c31\u4eceBellman-Ford \u7b97\u6cd5\u5f00\u59cb\u5b66\u4e60\uff0c\u6700\u540e\u7ec8\u4e8e\u5bf9\u4e8eJohnson\u6709\u4e86\u4e00\u70b9\u81ea\u5df1\u7684\u9886\u609f\uff0c\u4e8e\u662f\u5728\u6b64\u53d1\u8868\u9898\u89e3\u7559\u5ff5\uff0c\u8fd8\u671b\u5404\u4f4d\u5de8\u4f6c\u53ca\u5927\u795e\u6307\u70b9\u6279\u8bc4\u3002\n\n#### \u4e00\u3001\u8d1f\u73af\u95ee\u9898\n\u521a\u5f00\u59cb\u51c6\u5907\u7528spfa\u76f4\u63a5\u5224\u65ad\u8d1f\u73af\uff0c\u53d1\u73b0\u8fde\u7b2c\u4e8c\u4e2a\u6837\u4f8b\u90fd\u6ca1\u8fc7\u53bb\uff08\u539f\u56e0\uff0cspfa\u4e0d\u80fd\u76f4\u63a5\u5224\u65ad\u975e\u8fde\u901a\u56fe\u7684\u8d1f\u73af\uff0c\u4e8e\u662f\u6211\u5c31\u5efa\u4e2a\u865a\u62df\u70b9\uff0c\u4e0e\u6bcf\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u8fb9\u5c31\u53ef\u4ee5\u5224\u65ad\u4e86\uff09\u3002\u6700\u540e\u7531\u4e8e\u9700\u8981Bellman-Ford \u7b97\u6cd5\u6c42h[]\uff0c\u6240\u4ee5\u8fd8\u662f\u91c7\u7528\u7684Bellman-Ford \u7b97\u6cd5\u8fdb\u884c\u8d1f\u73af\u7684\u5224\u65ad\u3002\n\n#### \u4e8c\u3001\u5168\u6e90\u6700\u77ed\u8def\u7684\u89e3\u51b3\uff1a\n\n\u2460Floyd\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^3\uff09\uff0c\u80fd\u591f\u89e3\u51b3\u8d1f\u6743\u8fb9\uff0c\u4e0d\u80fd\u89e3\u51b3\u8d1f\u73af\uff0c\u7f3a\u70b9\u5c31\u662f\u5f88\u6162\u3002\n\n\u2461Dijkstra\uff1a\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u6e90\u70b9\u505a\u4e00\u6b21 Dijkstra\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nmlogn)\uff0c\u65f6\u95f4\u4e0a\u53ef\u4ee5\u8fc7\uff0c\u4f46\u662f Dijkstra \u53ea\u80fd\u89e3\u51b3\u975e\u8d1f\u6743\u8fb9\uff0c\u4e00\u65e6\u51fa\u73b0\u8d1f\u6743\u8fb9\u5c31\u5f97\u53e6\u60f3\u529e\u6cd5\uff1b\n\n\u4e24\u4e2a\u597d\u50cf\u90fd\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff1a\u5f00\u59cb\u5b66\u4e60Johnson \u7b97\u6cd5\n\n\u2462Johnson \u7b97\u6cd5\uff1a\u662f\u7528\u6765\u89e3\u51b3\u5728\u6709\u8d1f\u6743\u91cd\u8fb9\u56fe\u91cc\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u7684\uff0c\u5b83\u4e3b\u8981\u4e86\u7ed3\u5408 Dijkstra \u7b97\u6cd5\u548c Bellman-Ford \u7b97\u6cd5\u3002\u540c\u65f6 Johnson \u7b97\u6cd5\u5728\u7a00\u758f\u56fe\u91cc\u590d\u6742\u5ea6\u662f O(n^2log(n))\uff0c\u6570\u636e\u53ef\u4ee5\u8fc7\u3002\nJohnson \u7b97\u6cd5\u7684\u8bc1\u660e\uff1a\uff08\u7531\u4e8e\u63a8\u5bfc\u5c0f\u767d\u770b\u4e0d\u61c2\uff0c\u5c31\u7528\u7b2c\u4e00\u4e2a\u6837\u4f8b\u7684\u6570\u636e\u6765\u8bc1\u660e\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fw57sg1k.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u70b9\u8dd1\u4e00\u904dDijkstra\u7b97\u6cd5\u7b97\u51fa\uff1a\ndis[1][1] = 0;dis[1][2] = 4;dis[1][3] = 11;dis[1][4] = 10;dis[1][5] = 13;\n\u4e0e\u6b63\u786e\u7b54\u6848\u4e0d\u4e00\u81f4\uff0c\u56e0\u4e3a\u5b58\u5728\u8d1f\u6743\u503c\uff0c\u6240\u4ee5\u662f\u4e0d\u80fd\u4f7f\u7528 Dijkstra \u53bb\u6c42\u6700\u77ed\u8def\u5f84\u7684\u3002\n\n\u800cJohnson \u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u7ed9\u6bcf\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e00\u4e2a\u503c\uff0c\u7528\u8fd9\u4e9b\u8282\u70b9\u7684\u503c\u53bb\u505a reweight\uff0c\u516c\u5f0f\u5982\u4e0b\uff1a\n\nw[u, v] = w[u, v] +h[u] - h[v]\n\nh[x] \u5c31\u662f\u8282\u70b9 X \u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u901a\u8fc7 Bellman-Ford \u6c42\u51fa\u6765\u7684\u3002\n\n\u73b0\u5728\u6765\u8bf4\u8bf4\u600e\u4e48\u6c42\u8fd9\u4e2a h[x]\u3002\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u865a\u62df\u7684\u8282\u70b9\u8fd9\u4e2a\u865a\u62df\u8282\u70b9\u6307\u5411\u6240\u6709\u7684\u8282\u70b9\uff0c\u800c\u6307\u5411\u6240\u6709\u8282\u70b9\u7684\u8fb9\u6743\u91cd\u4e3a 0\u3002\u5982\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/jgut8bbe.png)\n\nh[x] \u5c31\u662f\u7528 Bellman-ford \u53bb\u6c42\u8fd9\u4e2a\u865a\u62df\u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\u4e00\u904dBellman-ford\u6c42\u51fah[0] = 0,h[1] = 0,h[2] = -5,h[3] = 0,h[4] = -3,h[5] = 0.\n\n\u6709\u4e86\u8fd9\u4e9b h[x] \u503c\u540e\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c reweight \u64cd\u4f5c\u4e86\uff0c\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884cw[u, v] = w[u, v] +h[u] - h[v]\u5f97\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2fgy0nns.png)\n\n\u6b64\u65f6\u7528Dijkstra\u7b97\u6cd5\u8dd1\u4e00\u904d\u7b97\u51fadis[1][1] = 0;dis[1][2] = 9;dis[1][3] = 11;dis[1][4] = 11;dis[1][5] = 11; \n\n\u7531\u4e8e\u4e4b\u524d\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c reweight \u64cd\u4f5c\u4e86\uff0c\u6700\u7ec8\u7684\u8def\u5f84\u5e94\u8be5\u8981\u51cf\u53bb\u5f00\u59cb\u8282\u70b9\u7684 h \u503c\uff0c\u518d\u52a0\u4e0a\u7ed3\u675f\u8282\u70b9\u7684 h \u503c\u3002\n\n\u4ee5dis[1][4]\u4e3a\u4f8b\uff1a\ndis[1][4] = (w(1,2)+h[1]-h[2])+(w(2,3)+h[2]-h[3])+(w(3,4)+h[3]-h[4]) =w(1,2)+w(2,3)+w(3,4)+h[1]-h[4]\n\n\u6240\u4ee5\u6b63\u786e\u7684dis[1][4] = w(1,2)+w(2,3)+w(3,4) = dis[1][4] (\u91cd\u65b0reweight\u4e4b\u540e\u8dd1\u51fa\u6765\u7684\u7ed3\u679c)+h[4]-h[1] = 8;\n\n\u540c\u7406\uff1a\u53ef\u4ee5\u5f97\u5230dis[1][1] = 0;dis[1][2] = 4;dis[1][3] = 11;dis[1][4] = 8;dis[1][5] = 11;\n\n\u6570\u636e\u8bc1\u660e\u5b8c\u6bd5\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff08\u6211\u91c7\u7528\u7684\u662fvector\u6765\u5b58\u50a8\u90bb\u63a5\u8868\uff09\n```c\n#include<iostream>\n#include<cstring>\n#include<string>\n#include<math.h>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<algorithm>\n#include<stdio.h>\nusing namespace std;\n#define inf 1000000000\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nint N,M;\nstruct edge{\n\tint v;//\u9876\u70b9\u548c\u8fb9\u7684\u6743\u503c\n\tll w;\n};\nedge make_edge(int _v,int _w){\n\tedge cur;cur.v = _v;cur.w = _w;\n\treturn cur;\n}\nstruct node {\n\tll dis;\n\tint v;\n\tfriend bool operator < (node A,node B){\n\t\treturn A.dis>B.dis;//\u91cd\u8f7d\u5c0f\u4e8e\u53f7\uff0c\u9ed8\u8ba4\u4e3a\u5927\u9876\u5806 \n\t}\n};\nnode make_node(ll _dis,int _v){\n\tnode cur;cur.dis = _dis;cur.v = _v;\n\treturn cur;\n}\nvector<edge> g[100005];\nll dis[3005][3005]; //dis[i][j]\u8868\u793a\u7b2ci\u4e2a\u70b9\u5230\u7b2cj\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \nll d[3005]; //\u5b58\u653e\u865a\u62df\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb \nint vis[100005];\npriority_queue<node>q; //\u4f18\u5148\u961f\u5217\u6765\u5b58\u653e\u9876\u70b9\u548c\u6539\u9876\u70b9\u8ddd\u6e90\u70b9\u7684\u8ddd\u79bb \n\nbool Dellman_Ford(int s){\n\tint i,j,k;\n\tfor(i = 1;i<=N;i++){\n\t\tint flag = 0;\n\t\tfor(j = 1;j<=N;j++){\n\t\t\tfor(k = 0;k<g[j].size();k++){\n\t\t\t\tif(d[g[j][k].v]>d[j]+g[j][k].w){\n\t\t\t\t\tflag = 1;\n\t\t\t\t\td[g[j][k].v] = d[j]+g[j][k].w;\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag == 0)\n\t\t\treturn true;\n\t}\n\t//\u8fdb\u884c\u8d1f\u73af\u7684\u9a8c\u8bc1 \n\tfor(j = 1;j<=N;j++){\n\t\tfor(k = 0;k<g[j].size();k++){\n\t\t\tif(d[g[j][k].v]>d[j]+g[j][k].w){\n\t\t\t\treturn false;\t\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nvoid dijkstra(int s){\n\tint now;//\u7528\u4e8e\u5b58\u653e\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u5f53\u524d\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9 \n\tmemset(vis,0,sizeof(vis));\n\tdis[s][s] = 0;\n\tq.push(make_node(dis[s][s],s));\n\twhile(!q.empty()){\n\t\tnow = q.top().v;q.pop(); //\u53d6\u51fa\u961f\u5217\u4e2d\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9 \n\t\tif(vis[now] == 1)continue;//\u5982\u679c\u8be5\u70b9\u8bbf\u95ee\u8fc7\u5219continue \n\t\tvis[now] = 1;\n\t\tfor(int  i = 0;i<g[now].size();i++){\n\t\t\tint v = g[now][i].v; //\u4e0enow\u76f8\u90bb\u7684\u70b9 \n\t\t\tint w = g[now][i].w; //\u8fb9\u6743 \n\t\t\tif(dis[s][v]>dis[s][now]+w){\n\t\t\t\tdis[s][v] = dis[s][now]+w;\n\t\t\t\tq.push(make_node(dis[s][v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main(){\n\tint i,j,k;\n\tint a,b;\n\tll c;\n\tcin>>N>>M;\n\tfor(i = 1;i<=N;i++){\n\t\tfor(j = 1;j<=N;j++){\n\t\t\tdis[i][j] = inf;\n\t\t}\n\t}\n\tfor(i = 1;i<=N;i++){\n\t\tdis[i][i] = 0;\n\t}\n\tfor(i = 1;i<=M;i++){\n\t\tscanf(\"%d %d %lld\",&a,&b,&c);\n\t\tg[a].push_back(make_edge(b,c));\n\t}\n\tif(!Dellman_Ford(0)){\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}\n\t\n\t//\u66f4\u65b0\u6743\u503c\n\tfor(i = 1;i<=N;i++){\n\t\tfor(j = 0;j<g[i].size();j++){\n\t\t\tg[i][j].w = g[i][j].w + d[i]-d[g[i][j].v];\n\t\t}\n\t}\n\tfor(i = 1;i<=N;i++){\n\t\tdijkstra(i);\n\t}\n\t\n\t//\u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb \n\tfor(i =1;i<=N;i++){\n\t\tfor(j = 1;j<=N;j++){\n\t\t\tif(dis[i][j] == inf)//\u5c06\u7b2ci\u884c\u8981\u8f93\u51fa\u7684\u6570\u5b58\u5728dis[i][0]\u4e2d \n\t\t\t\tdis[i][0] +=j*dis[i][j];\n\t\t\telse{\n\t\t\t\tdis[i][j] = dis[i][j]+d[j]-d[i];\n\t\t\t\tdis[i][0]+=j*dis[i][j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i = 1;i<=N;i++){\n\t\t\tprintf(\"%lld\\n\",dis[i][0]);\n\t}\n\treturn 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1584540011,
        "uid": 320900,
        "name": "ACMlearning",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5905 \u3010\u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "[$\\color{blue}{\\text {pwp }~{\\to\\textbf{My blog}\\gets}}~\\text{qwq}$](https://www.luogu.com.cn/blog/390770/blogcenter)\n\n\u4ee5\u6b64\u7eaa\u5ff5\u6211\u5b66\u4f1a\u8be5\u7b97\u6cd5\u3002\n\n**update 2021-7-7:** \u66f4\u65b0\u590d\u6742\u5ea6\u3002\n\n# Johnson \u5168\u6e90\u6700\u77ed\u8def\n\nJohnson \u5168\u6e90\u6700\u77ed\u8def\u53ef\u4ee5\u7528\u6765\u6c42\u6709\u8d1f\u6743\u7684\u56fe\u7684\u5168\u6e90\u6700\u77ed\u8def\u3002\n\n## \u6b65\u9aa4\n\n1.  \u65b0\u5efa\u4e00\u4e2a\u865a\u62df $0$ \u53f7\u8282\u70b9\u3002\n\n2. \u5728\u8282\u70b9 $0$ \u81f3\u8282\u70b9 $i(i \\in [1,n])$ \u4e2d\u63d2\u5165\u4e00\u6761\u6743\u503c\u4e3a $0$ \u7684\u6709\u5411\u8fb9\u3002\n\n3. \u4f7f\u7528 Bellman-ford \u7b97\u6cd5\uff08SPFA \u4e5f\u53ef\uff09\u8ba1\u7b97\u8282\u70b9 $0$ \u5230\u5176\u5b83\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff08\u987a\u4fbf\u5224\u65ad\u8d1f\u73af\uff09\uff0c\u8bb0\u4e3a $H_i$\u3002\n\n4. \u5c06\u539f\u56fe\u6bcf\u6761\u8fb9\u7684\u6743\u503c $w_{u,v}$ \u6539\u4e3a $w_{u,v}+H_u-H_v$\u3002\n\n5. \u8dd1 $n$ \u8f6e Dijkstra \u7b97\u6cd5\uff0c\u6c42\u51fa\u5168\u6e90\u6700\u77ed\u8def\u3002\n\n\u590d\u6742\u5ea6\uff1a$O(1)+O(n)+O(nm)+O(m)+n*O((n+m)\\log n)=O(nm\\log n)$\n\n## \u8bc1\u660e\n\n### \u5982\u4f55\u8bc1\u660e $w_{u,v}+H_u-H_v \\geq 0$\uff1f\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u8fb9 $(u,v)$ \u6ee1\u8db3 $H_v \\leq w_{u,v}+H_u$\uff0c\u5426\u5219\u5c31\u53ef\u4ee5\u7528 $w_{u,v}+H_u$ \u53bb\u66f4\u65b0 $H_v$ \u7684\u7b54\u6848\u3002\n\n\u5bf9\u4e0a\u4e0d\u7b49\u5f0f\u7a0d\u52a0\u53d8\u5f62\u5373\u53ef\u8bc1\u660e\u3002\n\n### \u5982\u4f55\u8bc1\u660e\u6539\u53d8\u6743\u503c\u540e\u4e0d\u6539\u53d8\u6700\u77ed\u8def\uff1f\n\n\u8bbe $s$ \u5230 $t$ \u7684\u4e00\u6761\u8def\u5f84 $s \\to n_1 \\to n_2 \\to ... \\to t$\uff0c\u6539\u53d8\u6743\u503c\u540e\u7684\u8def\u5f84\u957f\u5ea6\u4e3a $(w_{s,n_1}+H_s-H_{n_1})+(w_{n_1,n_2}+H_{n_1}-H_{n_2})+...+(w_{n_k,t}+H_{n_k}-H_t)=w_{s,n_1}+w_{n_1,n_2}+...+w_{n_k,t}+H_s-H_t$\u3002\n\n\u6240\u4ee5\u4e0d\u7ba1\u662f\u54ea\u6761\u8def\u5f84\uff0c\u6700\u540e\u52a0\u4e0a\u7684\u603b\u662f $H_s-H_t$\uff0c\u4e0d\u5f71\u54cd\u6700\u77ed\u8def\u3002\n\n\u56e0\u6b64 Johnson \u5168\u6e90\u6700\u77ed\u8def\u662f\u6b63\u786e\u7684\u3002\n\n## \u4ee3\u7801\n\n```cpp\n//P5905\n#include <cstring>\n#include <utility>\n#include <cstdio>\n#include <queue>\nusing namespace std;\nconst int N=10000,INF=1e9;\n\nint Head[N],Edge[N],Leng[N],Next[N],tot;\nlong long H[N],C[N],Dis[N];\nbool V[N];\nint n,m; \ninline void addedge(int u,int v,int w){ Edge[++tot]=v,Leng[tot]=w,Next[tot]=Head[u],Head[u]=tot; }\n\ninline bool spfa(int s){\n\tqueue<int> q;\n\tmemset(H,0x3f,sizeof(H));\n\tmemset(V,false,sizeof(V));\n\tH[s]=0,V[s]=true,q.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop(); V[x]=false;\n\t\tfor(int i=Head[x]; i; i=Next[i]){\n\t\t\tint y=Edge[i],z=Leng[i];\n\t\t\tif(H[y]>H[x]+z){\n\t\t\t\tH[y]=H[x]+z;\n\t\t\t\tif(!V[y]){\n\t\t\t\t\tV[y]=true,q.push(y),++C[y];\n\t\t\t\t\tif(C[y]>n) return false;\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ninline void dijkstra(int s){\n\tpriority_queue<pair<int,int> > q;\n\tfor(int i=1; i<=n; ++i) Dis[i]=INF;\n\tmemset(V,false,sizeof(V));\n\tDis[s]=0,q.push(make_pair(0,s));\n\twhile(!q.empty()){\n\t\tint x=q.top().second; q.pop();\n\t\tif(V[x]) continue;\n\t\tV[x]=true;\n\t\tfor(int i=Head[x]; i; i=Next[i]){\n\t\t\tint y=Edge[i],z=Leng[i];\n\t\t\tif(Dis[y]>Dis[x]+z){\n\t\t\t\tDis[y]=Dis[x]+z;\n\t\t\t\tif(!V[y]) q.push(make_pair(-Dis[y],y));\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=m; ++i){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\taddedge(x,y,z);\n\t}\n\t\n\tfor(int i=1; i<=n; ++i) addedge(0,i,0);\n\tif(!spfa(0)) return puts(\"-1\")&0;\n\t\n\tfor(int i=1; i<=n; ++i)\n\t\tfor(int j=Head[i]; j; j=Next[j])\n\t\t\tLeng[j]=Leng[j]+H[i]-H[Edge[j]];\n\tfor(int i=1; i<=n; ++i){\n\t\tdijkstra(i);\n\t\tlong long ans=0;\n\t\tfor(int j=1; j<=n; ++j)\n\t\t\tans+=j*(Dis[j]==INF ? INF : Dis[j]-H[i]+H[j]);\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1624546668,
        "uid": 390770,
        "name": "AiRC0S",
        "ccfLevel": 0,
        "title": "P5905 \u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def"
    },
    {
        "content": "\u670b\u53cb\u4eec\u597d\u554a\uff01\n\n[\u9898\u76ee\u4f20\u9001\u95e8 P5905 \u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def](https://www.luogu.com.cn/problem/P5905)\n\n\u9898\u76ee\u4e0d\u7528\u518d\u505a\u8fc7\u591a\u7684\u63cf\u8ff0\uff0c\u6211\u4eec\u76f4\u5954\u4e3b\u9898\u3002\n\n\u5f88\u660e\u663e\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u95ee\u9898\uff0c\u6211\u4eec\u8111\u6d77\u91cc\u6d6e\u73b0\u51fa\u4e86$Floyd$\u3001$Spfa$\u548c$Dijkstra$\u3002\u518d\u6765\u770b\u770b\u6570\u636e\u8303\u56f4$n\u22641000$\uff0c$m\u22646000$\u3002$Floyd$ $O(n^3)$\u5c31\u53ef\u4ee5\u6392\u9664\u4e86\u3002\n\n\u9898\u76ee\u544a\u8bc9\u6211\u4eec\uff1a\n\n**1. \u8fb9\u6743\u53ef\u80fd\u4e3a\u8d1f\uff0c\u4e14\u56fe\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\uff1b**\n\n**2. \u90e8\u5206\u6570\u636e\u5361$n$\u8f6e$Spfa$\u7b97\u6cd5\u3002**\n\n\u6240\u4ee5\u53ea\u80fd\u5148\u7528$Spfa$\u6765\u5224\u65ad\u8d1f\u73af\uff0c\u518d\u7528$Dijkstra+$\u5806\u4f18\u5316\u6765\u6c42\u6700\u77ed\u8def\u3002\n\n\u6e29\u99a8\u63d0\u793a\uff1a\u540c\u5b66\u4eec\u53ef\u4ee5\u5148\u53bb\u770b\u4e00\u4e0b\u8fd9\u4e24\u9053\u6a21\u677f\u9898\uff1a\n\n[P3385 \u3010\u6a21\u677f\u3011\u8d1f\u73af](https://www.luogu.com.cn/problem/P3385)\n\n[P4779 \u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09](https://www.luogu.com.cn/problem/P4779)\n\n\u8fd9\u91cc\u6709\u4e9b\u7ec6\u8282\u8981\u6ce8\u610f\u4e00\u4e0b\uff08\u5212\u91cd\u70b9\u5566\uff09\u3002\u4f17\u6240\u5468\u77e5\uff0c$Dijkstra$\u662f\u4e0d\u80fd\u5904\u7406\u8d1f\u8fb9\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u628a\u6bcf\u6761\u8fb9\u53d8\u6210\u975e\u8d1f\u503c\u3002\u4f46\u6211\u4eec\u4e0d\u80fd\u6bcf\u6761\u8fb9\u540c\u65f6\u52a0\u540c\u4e00\u4e2a\u6570\uff0c\u8fd9\u6837\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u6700\u5999\u7684\u5730\u65b9\u4e86\u3002\u5f53\u6211\u4eec\u8dd1$Spfa$\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8bbe\u4e00\u4e2a\u865a\u62df\u70b9$0$\uff0c\u8fd9\u4e2a\u70b9\u8fde\u4e0a\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8fb9\u6743\u4e3a$0$\u3002\u7136\u540e\u6211\u4eec\u4ee5\u8fd9\u4e2a\u70b9\u4f4d\u6e90\u70b9\uff0c\u8dd1\u4e00\u4e2a$Spfa$\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c\u7528$h$\u6570\u7ec4\u8bb0\u5f55\uff0c\u5373$0$\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002\u63a5\u7740\uff0c\u5bf9\u4e8e\u4e00\u6761\u8fb9$u,v,w_{u,v}$\u3002\u7531\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f$h_u+w_{u,v}\u2265h_v$\u5f97\uff0c$w_{u,v}+h_u-h_v\u22650$\u3002\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743$w_{u,v}$\u52a0\u4e0a$(h_u-h_v)$\u5373\u53ef\u6ee1\u8db3\u975e\u8d1f\u3002\u6700\u7ec8\u6c42\u51fa\u6765\u7684\u6700\u77ed\u8def$d_{s,t}$\u51cf\u53bb$(h_s-h_t)$\u5373\u53ef\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff08AC code\uff09\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=1e9;\nint n,m,t;\nint head[3010],vis[3010],cnt[3010],h[3010],d[3010];\nstruct edge\n{\n\tint to,next,val;\n}e[100010];\nvoid addedge(int u,int v,int w)\n{\n\te[++t].to=v;\n\te[t].next=head[u];\n\te[t].val=w;\n\thead[u]=t;\n}\nbool spfa(int s)//\u672c\u9898\u4e2ds\u4e3a0\n{\n\tqueue<int> q;\n\tmemset(vis,0,sizeof(vis));//\u521d\u59cb\u5316\n\tfor (int i=1;i<=n;i++)\n\t\th[i]=inf;\n\th[s]=0;\n\tvis[s]=1;\n\tq.push(s);\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor (int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].to,w=e[i].val;\n\t\t\tif (h[v]>h[u]+w)\n\t\t\t{\n\t\t\t\th[v]=h[u]+w;\n\t\t\t\tif (!vis[v])\n\t\t\t\t{\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tcnt[v]++;\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tif (cnt[v]==n+1)//\u5f53\u4e00\u4e2a\u70b9\u88ab\u626b\u8fc7\u8d85\u8fc7n\u6b21\u65f6\uff0c\u8bf4\u660e\u5b58\u5728\u8d1f\u73af\n\t\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nvoid dijkstra(int s)\n{\n\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;\n\tmemset(vis,0,sizeof(vis));//\u91cd\u7f6e\n\tfor (int i=1;i<=n;i++)\n\t\td[i]=inf;\n\td[s]=0;\n\tq.push(make_pair(0,s));\n\twhile (!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif (vis[u])\n\t\t\tcontinue;\n\t\tvis[u]=1;\n\t\tfor (int i=head[u];i;i=e[i].next)\n\t\t{\n\t\t\tint v=e[i].to,w=e[i].val;\n\t\t\tif (d[v]>d[u]+w)\n\t\t\t{\n\t\t\t\td[v]=d[u]+w;\n\t\t\t\tq.push(make_pair(d[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w; \n\t\taddedge(u,v,w);//\u5355\u5411\u5efa\u8fb9\n\t}\n\tfor (int i=1;i<=n;i++)\n\t\taddedge(0,i,0);//\u4ee50\u4e3a\u8d77\u70b9\uff0c\u5176\u4f59\u6bcf\u4e2a\u70b9\u4e3a\u7ec8\u70b9\u5efa\u8fb9\n\tif (!spfa(0))//\u82e5\u5b58\u5728\u8d1f\u73af\n\t{\n\t\tcout<<-1<<endl;\n\t\treturn 0;\n\t}\n\tfor (int u=1;u<=n;u++)\n\t\tfor (int i=head[u];i;i=e[i].next)//\u5c06\u6bcf\u6761\u8fb9\u53d8\u4e3a\u975e\u8d1f\u503c\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\te[i].val+=h[u]-h[v];\n\t\t}\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tdijkstra(i);//\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\u6c42\u6700\u77ed\u8def\n\t\tlong long ans=0;\n\t\tfor (int j=1;j<=n;j++)\n\t\t\tif (d[j]==inf)\n\t\t\t\tans+=1ll*j*inf;//\u5982\u9898\u76ee\u63cf\u8ff0\u7684\u6700\u5927\u503c1e9\n\t\t\telse\n\t\t\t\tans+=1ll*j*(d[j]+h[j]-h[i]);\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}//\u2740\u2740\u5b8c\u7ed3\u6492\u82b1\u2740\u2740\n```\n\u8fd9\u9053\u9898\u7684\u9898\u89e3\u5c31\u5230\u8fd9\u4e86\uff0c\u8c22\u8c22\u670b\u53cb\u4eec\uff01",
        "postTime": 1606720447,
        "uid": 53022,
        "name": "\u94f6\u6749\u6c34\u6749\u79c3\u6749",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5905 \u3010\u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\n\u8c01\u8bf4SPFA\u6b7b\u4e86\uff1f\u8c01\u8bf4SPFA\u4e00\u5b9a\u4f1a\u88ab\u5361\u6b7b\uff1f\u8c01\u8bf4Johnson\u662fDIJ\u7684\u821e\u53f0\uff1f\u4eca\u5929\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\u4e3aSPFA\u6b63\u540d\uff0c**\u4ed6\uff0c\u8fd8\u6d3b\u7740**\u3002\u8fd9\u662f\u672c\u9898\u8fc4\u4eca\u552f\u4e00\u7684\u4e00\u7bc7SPFA\u7684\u9898\u89e3\uff0c\u5e0c\u671b\u80fd\u8ba9\u8bfb\u8005\u670b\u53cb\u4eec\u6ee1\u610f\u3002\n\n# \u6700\u77ed\u8def\u95ee\u9898\n\n\u5e38\u89c1\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u6709SPFA\uff0cDijkstra\uff0cFloyd,Bellman-Ford\u7b49\u7b97\u6cd5\u3002\u5982\u679c\u8ba9\u8fd9\u4e9b\u7b97\u6cd5\u540c\u65f6\u8dd1\u5168\u6e90\u6700\u77ed\u8def\u95ee\u9898\uff0c\u90a3\u4ed6\u4eec\u7684\u590d\u6742\u5ea6\u5982\u4e0b\uff1a\n\nDijkstra\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\u00d7(E + VlogV))$\n\nFloyd\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^3)$\n\nSPFA\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\u00d7k\u00d7m)$\uff08\u7384\u5b66\u5f85\u5b9a\uff09\n\nBellman-Ford\uff1a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(VE)$\n\n\u663e\u7136\uff0cn\u904dfloyd\u6216\u8005n\u904dSPFA\u8c8c\u4f3c\u8981\u6bd4Floyd\u66f4\u4f18\u3002\u7136\u800c\uff0cSPFA\u5bb9\u6613\u88ab\u5361\u6210doge\uff0cDijkstra\u5219\u65e0\u6cd5\u5728\u6709\u8d1f\u73af\u597d\u597d\u8868\u73b0\u3002**\u600e\u4e48\u529e\u5462\uff1f\u4f18\u5316\uff01**\n\n# Johnson\u548c\u4ed6\u7684Re-weight\n\n\u5728 1977 \u5e74\uff0c[Donald B. Johnson](http://en.wikipedia.org/wiki/Johnson's_algorithm) \u63d0\u51fa\u4e86\u5bf9\u6240\u6709\u8fb9\u7684\u6743\u503c\u8fdb\u884c \"re-weight\" \u7684\u7b97\u6cd5\uff0c\u4f7f\u5f97\u8fb9\u7684\u6743\u503c\u975e\u8d1f\uff0c\u8fdb\u800c\u53ef\u4ee5\u4f7f\u7528Dijkstra\u7b97\u6cd5\u6765\u5904\u7406\u6b64\u95ee\u9898\u3002\n\n\u663e\u7136\uff0c\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5730\u5bf9\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u52a0\u4e0a\u4e00\u4e2a\u8f83\u5927\u7684\u6b63\u6570\uff0c\u4f7f\u5176\u975e\u8d1f\u3002\n\n\u65b0\u589e\u4e00\u4e2a\u6e90\u9876\u70b9s\uff0c\u5e76\u4f7f\u5176\u4e0e\u6240\u6709\u9876\u70b9\u8fde\u901a\uff0c\u65b0\u8fb9\u8d4b\u6743\u503c\u4e3a0\uff0c\u4f7f\u7528 Bellman-Ford \u7b97\u6cd5\u8ba1\u7b97\u65b0\u7684\u9876\u70b9\u5230\u6240\u6709\u5176\u5b83\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6839\u636e\u516c\u5f0f\uff1a\n\n```cpp\nw(u, v) = w(u, v) + (h[u] - h[v]).\n```\n\n\u8fdb\u884c\u8fb9\u6743\u66f4\u65b0\u4f7f\u5176\u975e\u8d1f\u3002\n\n\u8be5\u7b97\u6cd5\u590d\u6742\u5ea6\uff1a$O(V^2logV + V\u00d7E)$\n\n**\u4ec5\u6b64\u800c\u5df2\u5417\uff1f**\n\n# \u5168\u65b0\u7684\u5347\u7ea7\n\n\u968f\u7740\u65f6\u4ee3\u7684\u53d8\u8fc1\uff0cBellman\u2014\u2014Ford\u7b97\u6cd5\u5df2\u7ecf\u88ab\u66f4\u4f18\u7684SPFA\u7b97\u6cd5\u53d6\u4ee3\uff0c\u800cSPFA\u5728\u968f\u673a\u6570\u636e\u4e0b\u7684\u8868\u73b0\u4e5f\u8fdc\u80dc\u4e8edijkstra\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u8981\u5bfb\u6c42\u53d8\u9769\uff0c**\u5168\u65b0\u7684\u53ccSPFA\u2014\u2014Johnson\u7b97\u6cd5\u51fa\u4e16\u4e86\uff01**\n\n\u6bd2\u7624\u7684\u51fa\u9898\u4eba\u663e\u7136\u4e0d\u60f3\u770b\u5230SPFA\u8fd9\u4e2a\u7b80\u5355\u660e\u4e86\u4f46\u6709\u4e9b\u7384\u5b66\u7684\u7b97\u6cd5\u751f\u5b58\u4e0b\u53bb\u3002\u4e8e\u662f\u796d\u51fa\u4e86\u7a20\u5bc6\u56fe\u5927\u53d1\u3002\u6211\u4eecSPFA\u515a\u4e5f\u76f8\u5e94\u7684\u63a8\u51fa\u4e86**\u5806\u4f18\u5316SPFA**\u6765\u4e0e\u5806\u4f18\u5316Dij\u5206\u5ead\u6297\u793c\u3002\n\n\u4ee3\u7801\u548c\u666e\u901aSPFA\u76f8\u4f3c\uff0c\u53ea\u662f\u5c06queue\u6539\u4e3apriority_queue\n\n\u4ee3\u7801\uff1a[\u3010\u6a21\u677f\u3011\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff08\u6807\u51c6\u7248\uff09](https://www.luogu.com.cn/problem/P4779)\n\n```cpp\ninline void SPFA(int x)\n{\n\tpriority_queue <point>q;\n\tfor(fint i=1;i<=n;i++)\n\tdis[i]=inf;\n\tmemset(vis,0,sizeof(vis));\n\tdis[x]=0,vis[x]=1;\n\tq.push((point){x,0});\n\twhile(!q.empty())\n\t{\n\t\tpoint hea=q.top();\n\t\tq.pop();\n\t\tvis[hea.now]=0;\n\t\tfor(fint i=head[hea.now];i;i=e[i].nxt)\n\t\tif(dis[e[i].to]>dis[hea.now]+e[i].val)\n\t\t{\n\t\t\tdis[e[i].to]=dis[hea.now]+e[i].val;\n\t\t\tif(!vis[e[i].to])\n\t\t\tvis[e[i].to]=1,q.push((point){e[i].to,dis[e[i].to]});\n\t\t}\n\t}\n\treturn ;\n}\n```\n\n\u901f\u5ea6\u679c\u7136\u78be\u538bDij\n\n\u90a3\u4e48\u9762\u5bf9\u53ea\u670968\u5206\u7684\u666e\u901a\u53ccSPFA\uff0c\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u5c06\u5176\u53d8\u6210100\u5206\u5462\uff1f\n\n**\u7b54\u6848\u662f\u80af\u5b9a\u7684**\n\n\u6211\u4eec\u7528SPFA_pre()\u9884\u5904\u7406\u5e76\u5224\u73af\uff0c\u7136\u540e\u591a\u6e90\u8dd1SPFA()\u6839\u636eJohnson\u7b97\u6cd5\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\nJohnson\u7684re\u2014weight\u7b97\u6cd5\n\n```cpp\nfor(fint i=1;i<=m;i++)\n\tx=read(),y=read(),z=read(),adds(x,y,z);\n\tfor(fint i=1;i<=n;i++)\n\tadds(0,i,0);\n\tif(SPFA_pre())\n\t{\n\t\tcout<<-1;\n\t\treturn 0;\n\t}\n\tfor(fint i=1;i<=n;i++)\n\tfor(fint j=head[i];j;j=e[j].nxt)\n\te[j].val+=d[i]-d[e[j].to];\n\tfor(fint i=1;i<=n;i++)\n\t{\n\t\tSPFA(i);\n\t\tint ans=0;\n\t\tfor(fint j=1;j<=n;j++)\n\t\tif(dis[j]!=inf)\n\t\tans+=j*(dis[j]+(d[j]-d[i]));\n\t\telse\n\t\tans+=j*inf;\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n```\n\n\u9884\u5904\u7406+\u5224\u73af\u7684\u7b2c\u4e00\u4e2aSPFA\n\n```cpp\ninline int SPFA_pre()\n{\n\tqueue <int>q;\n\tfor(fint i=0;i<=n;i++)\n\td[i]=inf;\n\tmemset(vis,0,sizeof(vis));\n\tmemset(vis_tim,0,sizeof(vis_tim));\n\td[0]=0,vis[0]=1;\n\tq.push(0);\n\twhile(!q.empty())\n\t{\n\t\tint hea=q.front();\n\t\tq.pop();\n\t\tvis[hea]=0;\n\t\tfor(fint i=head[hea];i;i=e[i].nxt)\n\t\tif(d[e[i].to]>d[hea]+e[i].val)\n\t\t{\n\t\t\td[e[i].to]=d[hea]+e[i].val;\n\t\t\tif(!vis[e[i].to])\n\t\t\t{\n\t\t\t\tvis[e[i].to]=1,q.push(e[i].to);\n\t\t\t\tvis_tim[e[i].to]++;\n\t\t\t\tif(vis_tim[e[i].to]>n)\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\u5806\u4f18\u5316\u8dd1\u6700\u77ed\u8def\u7684\u7b2c\u4e8c\u4e2aSPFA\n\n```cpp\ninline void SPFA(int x)\n{\n\tpriority_queue <point>q;\n\tfor(fint i=1;i<=n;i++)\n\tdis[i]=inf;\n\tmemset(vis,0,sizeof(vis));\n\tdis[x]=0,vis[x]=1;\n\tq.push((point){x,0});\n\twhile(!q.empty())\n\t{\n\t\tpoint hea=q.top();\n\t\tq.pop();\n\t\tvis[hea.now]=0;\n\t\tfor(fint i=head[hea.now];i;i=e[i].nxt)\n\t\tif(dis[e[i].to]>dis[hea.now]+e[i].val)\n\t\t{\n\t\t\tdis[e[i].to]=dis[hea.now]+e[i].val;\n\t\t\tif(!vis[e[i].to])\n\t\t\tvis[e[i].to]=1,q.push((point){e[i].to,dis[e[i].to]});\n\t\t}\n\t}\n\treturn ;\n}\n```\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u7528\u8fd9\u4e2a\u5944\u5944\u4e00\u606f\u7684SPFA\u7b97\u6cd5\u521b\u9020\u4e86\u5947\u8ff9\uff01\uff01\uff01\n\n[\u5b8c\u6574\u4ee3\u7801](https://www.luogu.com.cn/paste/xnsruisq)\n\n\u795d\u5927\u5bb6AC\u6109\u5feb\uff0c\u8c22\u8c22\u5927\u5bb6\uff01",
        "postTime": 1598362207,
        "uid": 244059,
        "name": "king_xbz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5905 \u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def"
    },
    {
        "content": "\u57fa\u5efa\u7b2c\u5341\u7bc7\n\nJohnson \u5168\u6e90\u6700\u77ed\u8def\u89e3\u51b3\u7684\u662f\u5e26\u8d1f\u8fb9\u6743\u7684\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u3002\n\n\u7531\u4e8e$Dijkstra$\u4e0d\u80fd\u89e3\u51b3\u8d1f\u8fb9\u6743\uff0c\n- \u6211\u4eec\u8003\u8651\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9$S$\uff0c\u6bcf\u4e2a\u70b9\u5411\u5b83\u8fde\u4e00\u6761\u6743\u503c\u4e3a0\u7684\u8fb9\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u70b9\u8dd1\u4e00\u6b21$SPFA$\u5224\u8d1f\u73af\n\n- \u5728\u6ca1\u6709\u8d1f\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e$dij$\u4e0d\u80fd\u5904\u7406\u8d1f\u8fb9\u6743\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u7684\u6743\u503c$w[u,v]$\u53d8\u6210$w(u,v)+d(u)-d(v)$\uff0c\u627e\u5230\u5408\u9002\u7684$d(u)$\u548c$d(v)$\u4ee4$w(u,v)+d(u)-d(v)>=0$\u3002\u8fd9\u6837\u5c31\u4e0d\u5b58\u5728\u4e86\u8d1f\u8fb9\u6743\uff0c\u518d\u5728\u6bcf\u4e00\u4e2a\u70b9\u8dd1\u4e00\u904d$Dij$\u3002\n\n- $d(u)$\u548c$d(v)$\u53ef\u4ee5\u8bbe\u4e3a$S$\u5230$u$\u548c$v$\u7684\u6700\u77ed\u8def\u3002\u5f53\u56fe\u4e2d\u5b58\u5728\u8d1f\u8fb9\u6743\u65f6$d(u),d(v)$\u53ef\u80fd\u5c0f\u4e8e0.\u4f46\u662f$d(u)-d(v)>=0$\u4e14$d(u)-d(v)>=|w(u,v)|$\u3002\u6240\u4ee5\u8fd9\u6837\u4e0b\u6765\u6574\u4e2a\u56fe\u5c31\u662f\u4e00\u4e2a\u6b63\u5168\u56fe\u4e86\u3002\n\n- \u7edf\u8ba1\u7684\u65f6\u5019\u628a\u5b83\u52a0\u4e0a\u5c31\u884c\u3002\n\n[P5905](https://www.luogu.com.cn/problem/P5905)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint read(){\n\tint x=0;bool f=0;char ch=getchar();\n\twhile(!isdigit(ch))f|=ch=='-',ch=getchar();\n\twhile(isdigit(ch))x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\n\nvoid write(int x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>9)write(x/10);\n\tputchar(48+x%10);\n}\n\nvoid writeln(int x){write(x);putchar('\\n');}\nvoid writebl(int x){write(x);putchar(' ');}\n\n#define I inline\n#define R register\n\nconst int maxn = 3e3+5; \nconst int maxm = maxn*6;\n#define inf 1000000000\n\nstruct Johnson{\n\tstruct edge{int v,w,next;}e[maxm];\t\n\tint head[maxn],vis[maxn],dis[maxn],tot,h[maxn];\t\n\tvoid add(int u,int v,int w){e[++tot]=(edge){v,w,head[u]};head[u]=tot;}\n\tstruct node{\n\t\tint dis;int pos;\n\t\tbool operator < (const node &x)const{return x.dis<dis;}\n\t};\t\n\tpriority_queue<node> q;\t\n\tI void dijkstra(int s){\n\t\tmemset(dis,0x3f,sizeof(dis));memset(vis,0,sizeof(vis));\n\t\tdis[s] = 0;\n\t\tq.push((node){0,s});\n\t\twhile(!q.empty()){\n\t\t\tnode tmp = q.top();q.pop();\n\t\t\tint x = tmp.pos,d = tmp.dis;\n\t\t\tif(vis[x])continue;vis[x] = 1;\n\t\t\tfor(int i = head[x];i;i = e[i].next){\n\t\t\t\tint v = e[i].v;\n\t\t\t\tif(dis[v] > dis[x] + e[i].w){\n\t\t\t\t\tdis[v] = dis[x] + e[i].w;\n\t\t\t\t\tif(!vis[v])q.push((node){dis[v],v});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint tim[maxn];\n\tI bool spfa(int s,int n){\n\t\tqueue<int> q;\n\t\tmemset(h,0x3f,sizeof(h));memset(vis,0,sizeof(vis));\n\t\th[s]=0;vis[s]=1;q.push(s);\n\t\twhile(!q.empty()){\n\t\t\tint u=q.front();q.pop();vis[u]=0;\n\t\t\tif(++tim[u]>n-1)return 0;\n\t\t\tfor(R int i=head[u];i;i=e[i].next){\n\t\t\t\tint v=e[i].v;\n\t\t\t\tif(h[v]>h[u]+e[i].w){\n\t\t\t\t\th[v]=h[u]+e[i].w;\n\t\t\t\t\tif(!vis[v])q.push(v),vis[v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n}J;\nint n,m;\nsigned main(){\n\tn=read(),m=read();\n\tfor(R int i=1,u,v,w;i<=m;++i){\n\t\tu=read(),v=read(),w=read();\n\t\tJ.add(u,v,w);\n\t}\n\tfor(R int i=1;i<=n;++i)J.add(0,i,0);\n\tif(!J.spfa(0,n)){puts(\"-1\");return 0;}\n\tfor(R int u=1;u<=n;++u)\n\t\tfor(R int i=J.head[u];i;i=J.e[i].next){\n\t\t\tint v=J.e[i].v;\n\t\t\tJ.e[i].w+=J.h[u]-J.h[v];\n\t\t}\n\tfor(R int i=1;i<=n;++i){\n\t\tJ.dijkstra(i);\n\t\tlong long ans=0;\n\t\tfor(R int j=1;j<=n;++j){\n\t\t\tif(J.dis[j]==J.dis[n+1])ans+=j*inf;\n\t\t\telse ans+=j*(J.dis[j]+J.h[j]-J.h[i]);\n\t\t}\n\t\twriteln(ans);\n\t}\n}\n\n```\n",
        "postTime": 1583200657,
        "uid": 87031,
        "name": "Immortal_Bird",
        "ccfLevel": 0,
        "title": "Johnson \u5168\u6e90\u6700\u77ed\u8def\u5c0f\u7ed3"
    },
    {
        "content": "\u5bf9\u539f\u6765\u7684\u9898\u89e3\u505a\u4e00\u4e2a\u4fee\u6b63\uff0c\u539f\u6765\u8fc7\u4e86\u8fd9\u6b21\u4e5f\u6c42\u7ba1\u7406\u5927\u5927\u7ed9\u8fc7\u554aqwq\n\n2020.8.7\uff1a\u539f\u6765\u7684\u4ee3\u7801\u88ab\u65b0\u589e\u7684\u6570\u636ehack\u4e86\uff0c\u611f\u8c22@Oak_limy\u5927\u4f6c\u7684\u63d0\u9192\uff0c\u73b0\u5728\u4ee3\u7801\u662f**\u662f\u53ef\u4ee5AC\u7684\u3002**\n\nJohnson \u548c Floyd \u4e00\u6837\uff0c\u662f\u4e00\u79cd\u80fd\u6c42\u51fa\u65e0\u8d1f\u73af\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\u3002\n\n\u5bf9\u4e8e\u6b64\u9898\u6765\u8bf4\uff0cfolyd\u590d\u6742\u5ea6\u80af\u5b9a\u4f1a\u70b8\uff0cSPFA\u4e5f\u5df2\u7ecf\u88ab\u5361\u6b7b\u4e86\uff0c\u90a3\u4e48\u53ef\u8651dijkstra\u5427\uff0c\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6bd2\u7624\u7684\u51fa\u9898\u4eba\u8bbe\u7f6e\u4e86\u8d1f\u6743\uff0c\u90a3\u4e48\u6211\u4eec\u65b0\u7b97\u6cd5\u7684\u601d\u8def\u5176\u5b9e\u5c31\u662f\u628a\u8d1f\u6743\u53d8\u4e3a\u6b63\u6743\uff0c\u90a3\u4e48\u67ff\u5b50\u5176\u4ed6\u51e0\u4f4d\u5927\u4f6c\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u53ea\u6765\u8bb2\u4e00\u4e0b\u8bc1\u660e\u5427\n\n\u4f17\u6240\u5468\u77e5:\n   \n   \u5047\u8bbe\u6211\u4eec\u8981\u66f4\u6539\u7684\u8fb9\u7684\u7f16\u53f7\u4e3ai,0\u53f7\u70b9\uff08\u8d85\u7ea7\u8282\u70b9\uff09\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u4e3af[1],f[2],f[3],f[4].........f[n-1],f[n];\n   \n\u90a3\u4e48i\u53f7\u8fb9\u7ecf\u8fc7\u67ff\u5b50\u53d8\u5316\u4f1a\u53d8\u6210edge[i].val=edge[i].val+f[\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9]-f[\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9]\n\n\u90a3\u4e48\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u4ecex->y\u7684\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u539f\u5f0f\u548c\u7ecf\u8fc7\u5904\u7406\u540e\u7684\u67ff\u5b50\u505a\u4e00\u4e2a\u6bd4\u8f83\n \n**\u539f\u5f0f**\uff1aval[x,p1]+val[p1,p2]+val[p2,p3]+val[p3,p4]+.....val[pt-1\uff0ct]\n\n**\u53d8\u5316\u540e\u7684\u67ff\u5b50**:(val[x,p1]+f[x]-val[p1])+(val[p1,p2]+f[p1]-f[p2])+(val[p2,p3]+f[p2]-f[p3])+(val[pt-1,t]+f[pt-1]-p[t];\n\n\u8fd9\u4e2a\u662f\u663e\u800c\u6613\u89c1\u7684\u5bf9\u5427\uff0c\u90a3\u4e48\u6211\u4eec\u5bf9\u67ff\u5b50\u8fdb\u884c\u5316\u7b80\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u67ff\u5b50\n\nval[x,p1]+val[p1,p2]+val[p2,p3]+val[p3,p4]+val[pt-1,t]+f[s]-f[t]\n\n \u90a3\u4e48\u6211\u4eec\u628a\u4e24\u4e2a\u67ff\u5b50\u505a\u4e00\u4e2a\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u53d1\u73b0\u65b0\u7684\u67ff\u5b50\u6bd4\u539f\u6765\u7684\u67ff\u5b50\u53ea\u662f\u591a\u4e86\u4e00\u4e2a+f[s]-f[t]\uff0c\u90a3\u4e48\u8fd9\u4e2a\u53ea\u662f\u4e00\u4e2a\u5e38\u91cf\u504f\u79fb\uff0c\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u5bf9\u5427\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8bc1\u660e\u4e86\u4ed6\u7684\u6b63\u786e\u6027\n\n------------\n\u6211\u4eec\u518d\u6765\u5eb7\u5eb7**\u8bc1\u660e2**\n\n\u6211\u4eec\u5982\u679c\u8981\u8bc1\u660e\u8fb9\u6743\u4e0d\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5176\u5b9e\u9700\u8981\u8bc1\u660e\u7684\u5c31\u662fval[x,y]+f[x]-f[y]>=0\n\n\u8f6c\u5316\u4e00\u4e0b\u53ef\u4ee5\u5f97\u5230val[x,y]+f[x]>=f[y],\u8fd9\u4e5f\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6839\u636e\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u53ef\u4ee5\u8f7b\u677e\u8bc1\u660e\uff0c\u9700\u8981\u660e\u767d\u7684\u4e00\u70b9\u662f0\u5230\u8fbe\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u662f<=0\u7684\uff0c\u90a3\u4e48\u5e76\u4e14f[y]<=f[x]\u753b\u5f20\u56fe\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b\u5c31\u597d\u5566\uff01\uff01\uff01\n\n------------\n\n\u7ec8\u4e8e\u8bb2\u5b8c\u4e86\uff0c\u6253\u8fd9\u4e48\u591a\u5b57\u597d\u7d2f\u554a\uff08\u611f\u8c22\u5404\u4f4d\u795e\u4ed9\u53ef\u4ee5\u8ba4\u771f\u8bfb\u5b8c\u6211\u7684\u9898\u89e3\uff09\uff0c\u90a3\u4e48\u4e0a\u798f\u5229\u4ee3\u7801\u5427\uff01\uff01\uff01\uff01\n\n------------\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <set>\n#include <map>\n#include <stdlib.h>\n#include <queue>\n#include <stack>\n#define ri register int\n#define inf 1e9\n\nstruct Node{\n\tint to,next,val;\n}edge[60005];\nint head[5005],cnt=1;\nint in[5005];\nint dis[5005];\nbool vis[5005];\nint n,m;\nint dist[5005];\n\ninline void add(int u,int v,int w){\n\tedge[cnt].to=v;\n\tedge[cnt].next=head[u];\n\tedge[cnt].val=w;\n\thead[u]=cnt++;\n} \n\ninline bool spfa(){\n\tmemset(dis,0x3f,sizeof(dis));\n\tdis[0]=0;\n\tvis[0]=true;\n\tstd::queue<int>q;\n\tq.push(0);\n\twhile(q.size()){\n\t\tint p=q.front();\n\t\tq.pop();\n\t\tvis[p]=false;\n\t\tfor(ri i=head[p];i;i=edge[i].next){\n\t\t\tint v=edge[i].to;\n\t\t\tif(dis[v]>dis[p]+edge[i].val){\n\t\t\t\tdis[v]=dis[p]+edge[i].val;\n\t\t\t\tif(!vis[v])vis[v]=true,q.push(v),in[v]++;\n\t\t\t\tif(in[v]>=n+1)return true;\n\t\t\t}\n\t\t}\n\t} \n\treturn false;\n}\nstruct node{\n\tint pos,dis;\n\tbool operator<(const node &x)const{\n\t\treturn x.dis<dis;\n\t}\n};\n\ninline void dijkstra(int k){\n\tstd::priority_queue<node>q;\n\tlong long ans=0;\n\tq.push((node){k,0});\n\tfor(ri i=1;i<=n;i++){\n\t\tvis[i]=false;\n\t\tdist[i]=inf;\n\t} \n\tdist[k]=0;\n\twhile(q.size()){\n\t\tint p=q.top().pos;\n\t\tq.pop(); \n\t\tif(vis[p])continue;\n\t\tvis[p]=true;\n\t\tfor(ri i=head[p];i;i=edge[i].next){\n\t\t\tint v=edge[i].to;\n\t\t\tif(dist[v]>dist[p]+edge[i].val){\n\t\t\t\tdist[v]=dist[p]+edge[i].val;\n\t\t\t\tif(!vis[v])q.push((node){v,dist[v]});\n\t\t\t}\n\t\t}\n\t}\n\tfor(ri i=1;i<=n;i++){\n\t\tif(dist[i]==inf){\n\t\t\tans+=i*inf;\n\t\t\tcontinue;\n\t\t}\n\t\tans=ans+(1ll*i*(dist[i]+dis[i]-dis[k]));\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(ri i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t}\n\tfor(ri i=1;i<=n;i++){\n\t\tadd(0,i,0);\n\t}\n\tif(spfa()){\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\tfor(ri i=1;i<=n;i++){//\u6bcf\u4e00\u4e2a\u8d77\u70b9 \n\t\tfor(ri j=head[i];j;j=edge[j].next){//\u6bcf\u4e00\u6761\u8fb9 \n\t\t\tedge[j].val=edge[j].val+dis[i]-dis[edge[j].to];\n\t\t}\n\t}\n\tfor(ri i=1;i<=n;i++){\n\t\tdijkstra(i);\n\t}\n\treturn 0;\n} \n```\n\n\n------------\n**\u6700\u540e\u518d\u628a\u8f6c\u6362\u7684\u6838\u5fc3\u4ee3\u7801\u5c55\u793a\u4e00\u4e0b\uff1a**\n\n\n------------\n```cpp\nfor(ri i=1;i<=n;i++){\n\t\tfor(ri j=head[i];j;j=edge[j].next){\n\t\t\tedge[j].val=edge[j].val+dis[i]-dis[edge[j].to];\n\t\t}\n\t}\n```\n\n\n------------\n\u6572\u4e00\u7bc7\u9898\u89e3\u4e0d\u5bb9\u6613\uff0c\u9ebb\u70e6\u7ba1\u7406\u5458\u7ed9\u8fc7\u5427,\u8c22\u8c22\u5566\u3002\n\n\u5982\u679c\u6211\u54ea\u91cc\u5199\u9519\u4e86\uff0c\u8bf7\u5404\u4f4d\u795e\u4ed9\u6307\u51fa\uff0c\u6211\u4e00\u5b9a\u4f1a\u53ca\u65f6\u6539\u6b63\uff01\uff01\n\n\n",
        "postTime": 1585189803,
        "uid": 174897,
        "name": "zjrdmd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5905 \u3010\u3010\u6a21\u677f\u3011Johnson \u5168\u6e90\u6700\u77ed\u8def\u3011"
    },
    {
        "content": "~~\u5076\u5c14\u770b\u5230\u8fd9\u4e2a\u9898\u76ee\uff0c\u76f4\u63a5\u5207\u4e86~~  \n### \u8fdb\u5165\u6b63\u9898  \n1.\u5206\u6790    \n\u4f17\u6240\u5468\u77e5\uff0c$Dijkstra$\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(mlogn)$\u7684   \n\u5728\u672c\u9898\u7684\u7a00\u758f\u56fe\u4e0b\uff0c\u6bd4$Floyd$\u8981\u4f18   \n\u4f46\u662f$Dijkstra$\u53ea\u80fd\u5904\u7406\u8fb9\u6743\u4e3a\u6b63\u7684\u6700\u77ed\u8def  \n\u6240\u4ee5\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u8ba9\u8fb9\u6743\u53d8\u6210\u6b63\u7684   \n\n2.\u5b9e(kou)\u9a8c(hu)    \n\u505a\u6cd51\uff1a\u5c06\u6bcf\u4e2a\u8fb9\u6743\u76f4\u63a5\u8d4b\u4e3a\u6b63\uff0c\u6700\u540e\u518d\u51cf\u53bb\u7ecf\u8fc7\u7684\u8fb9   \n\u8d34\u4ee3\u7801\uff08\u65e0\u4e3b\u7a0b\uff09\uff1a   \n```cpp\n#include<bits/stdc++.h>\n#define NR 100001\n#define MR 200001\nusing namespace std;\nstruct Edge{\n\tint to,next,w;\n}g[MR];\nint dis[MR];\nint fte[NR];\nstruct Node{\n\tint x,dis;\n\tbool operator < (const Node &A) const {\n\t\treturn dis > A.dis;\n\t}\n};\nint n,m,s;\nint tot;\nvoid add(int x,int y,int w){\n\tg[++tot]=(Edge){y,fte[x],w};\n\tfte[x]=tot;\n}\nbool flag[MR];\nint cnt[NR];\nvoid dijkstra(int x){\n\tmemset(dis,999999,sizeof(dis));\n\tdis[x]=0;\n\tpriority_queue<Node>q;\n\tq.push((Node){x,0});\n \tcnt[x]=0;\n\twhile(!q.empty()){\n\t\tint AK=q.top().x;\n\t\tq.pop();\n\t\tif(flag[AK])continue;\n\t\tflag[AK]=true;\n\t\tfor(int i=fte[AK];i;i=g[i].next){\n\t\t\tint y=g[i].to;\n\t\t\tif(flag[y])continue;\n\t\t\tif(dis[y]<=dis[AK]+g[i].w)continue;\n\t\t\tdis[y]=dis[AK]+g[i].w;\n        cnt[y]=cnt[x]+1;\n\t\t\tq.push((Node){y,dis[y]});\n\t\t}\n\t}\n}\n```\n~~\u90fd\u8bf4\u4e86\u662f\u53e3\u80e1\uff0c\u4f60\u8fd8\u4fe1\uff1f\uff1f\uff1f~~   \n\u8fd9\u4e2a\u7b97\u6cd5\u6709\u4e2a\u6f0f\u6d1e\uff1a\u539f\u6765\u8fb9\u6743\u6ee1\u8db3\u7684\u4e0d\u7b49\u5f0f\uff0c\u5728\u52a0\u4e0a\u4e00\u4e2a\u503c\u540e\u53ef\u80fd\u4e0d\u7b49\u53f7\u4f1a\u53d8\u53f7\u3002   \n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u4e2a\u529e\u6cd5\u8ba9\u6240\u6709\u8fb9\u6743\u53d8\u6210\u6b63\u6570\u3002   \n3.\u6982\u5ff5\u5f15\u5165     \n\u5f15\u5165\u4e00\u4e2a\u7269\u7406\u6982\u5ff5\uff1a\u52bf\u80fd   \n\u6587\u5316\u8bfe\u6bd4\u8f83\u597d\u7684\u540c\u5b66\u5e94\u8be5\u77e5\u9053\uff0c\u52bf\u80fd\u53ea\u4e0e\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u4f4d\u7f6e\u6709\u5173\uff1b\u4e0e\u8d70\u8fc7\u7684\u8def\u7a0b\u65e0\u5173\u3002     \n\u6240\u4ee5\u4e24\u70b9\u95f4\u52bf\u80fd\u7684\u5dee\u503c\u662f\u4e0d\u53d8\u7684\u3002     \n\u5c06u,v\u4e24\u70b9\u7684\u8fb9\u6743\u7528\u52bf\u80fd\u8868\u793a\uff1a   \n$w(u,v)+h_u-h_v$       \n\u5c06\u4e00\u6761\u8def\u5f84\u8868\u793a\u51fa\u6765:   \n$v_1->v_2->v_3.......->v_n$    \n\u5b83\u7684\u8ddd\u79bb\u4e3a\uff1a   \n$w(v_1,v_2)+w(v_2,v_3)+...+w(v_(n-1),v_n)+h_1-h_2.....+h_(n-1)+h_n$   \n\u5316\u7b80\u5f97$w(v_1,v_2)+w(v_2,v_3)+...+w(v_(n-1),v_n)+h_1-h_n$  \n\u8fd9\u5c31\u662f\u4ece$v_1$\u5230$v_n$\u7684\u52bf\u80fd\u5dee   \n\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u601d\u8def    \n4.$Johnson$\u5168\u6e90\u6700\u77ed\u8def    \n\u6709\u4e86\u524d\u9762\u7684\u7406\u8bba\u57fa\u7840\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u6240\u6709\u70b9\u5173\u4e8e\u52bf\u80fd\u539f\u70b9\u7684\u52bf\u80fd\u5dee   \n\u518d\u5229\u7528\u52bf\u80fd\u5dee\u628a\u8fb9\u6743\u8f6c\u6210\u6b63\u7684   \n\u8fd9\u5c31\u662f$Johnson$\u5168\u6e90\u6700\u77ed\u8def\u7684\u7cbe\u9ad3    \n\u7b80\u5355\u4ecb\u7ecd\u4e0b\u7b97\u6cd5\u6d41\u7a0b:      \n*    \u5efa\u7acb\u865a\u62df\u539f\u70b9\uff0c$SPFA$\u8dd1\u51fa\u6240\u6709\u70b9\u7684\u52bf\u80fd\n*    \u5229\u7528\u6bcf\u4e2a\u70b9\u7684\u52bf\u80fd\u5c06\u6240\u6709\u8fb9\u6743\u8f6c\u6210\u6b63\u6570\n*    $Dijkstra$\u8dd1\u4e24\u70b9\u95f4\u52bf\u80fd\u5dee    \n*    \u5c06\u52bf\u80fd\u5dee\u8f6c\u5316\u4e3a\u4e24\u70b9\u95f4\u6700\u77ed\u8def    \n*    $Then?$   \n*    $AC$\u672c\u9898   \n\u4ee5\u4e0b\u662f\u53c2\u8003\u4ee3\u7801\uff1a   \n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int NR=3e3+10;\nconst int MR=6e3+10;\nstruct edge{\n\tint to,next,val;\n}g[MR<<1];\nint fte[NR];\nint tot;\nvoid add(int x,int y,int z){\n\tg[++tot]=(edge){y,fte[x],z};\n\tfte[x]=tot;\n}\nint cnt[NR];\nbool panduan[NR];\nqueue<int>q;\nint dist[NR];\nint n,m;\nbool SPFA(int s){\n\tmemset(dist,999999,sizeof(dist));\n\tdist[s]=0;\n\tq.push(s);\n\tpanduan[s]=true;\n\tcnt[s]++;\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tpanduan[x]=false;\n\t\tfor(int i=fte[x];i;i=g[i].next){\n\t\t\tint y=g[i].to;\n\t\t\tif(dist[y]<=dist[x]+g[i].val)continue;\n\t\t\tdist[y]=dist[x]+g[i].val;\n\t\t\tif(panduan[y])continue;\n\t\t\tq.push(y);\n\t\t\tpanduan[y]=true;\n\t\t\tcnt[y]++;\n\t\t\tif(cnt[y]==n+1){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\t\n\treturn true;\n}\nstruct node{\n\tint id;\n\tint dis;\n\tbool operator <(const node &T)const{\n\t\treturn dis>T.dis;\n\t}\n};\nint dis[NR];\npriority_queue<node>pq;\nvoid dijkstra(int s){\n\tmemset(panduan,false,sizeof(panduan));\n\tfor(int i=1;i<=n;i++)dis[i]=1e9;\n\tdis[s]=0;\n\tpq.push((node){s,0});\n\twhile(!pq.empty()){\n\t\tint x=pq.top().id;\n\t\tpq.pop();\n\t\tif(panduan[x])continue;\n\t\tpanduan[x]=true;\n\t\tfor(int i=fte[x];i;i=g[i].next){\n\t\t\tint y=g[i].to;\n\t\t\tif(dis[y]<=dis[x]+g[i].val)continue;\n\t\t\tdis[y]=dis[x]+g[i].val;\n\t\t\tif(panduan[y])continue;\n\t\t\tpq.push((node){y,dis[y]});\n\t\t}\n\t}\n}\nsigned main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout); \n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t}\n\tfor(int i=1;i<=n;i++)add(0,i,0);\n\tif(!SPFA(0)){\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=fte[i];j;j=g[j].next)\n\t\t\tg[j].val=g[j].val+dist[i]-dist[g[j].to];\n\tfor(int i=1;i<=n;i++){\n\t\tlong long ans=0;\n\t\tdijkstra(i);\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(dis[j]!=1e9)ans+=1ll*j*(dis[j]+dist[j]-dist[i]);\n\t\t\telse ans+=1e9*j;\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1596012352,
        "uid": 117771,
        "name": "intel_core",
        "ccfLevel": 7,
        "title": "P5905\u9898\u89e3"
    }
]