[
    {
        "content": "\u6bcf\u9898\u611f\u609f\uff1a\n\n\u6211\u4e00\u5b9a\u8981\u5199\u8fd9\u7bc7\u9898\u89e3\uff0c \u771f\u7684\u592a\u4ee4\u4eba\u667a\u7184\u4e86\uff01\u6211\u4ea4\u4e867\u904d\u90fd\u4e0d\u8fc7\u539f\u56e0\u7adf\u662fdouble\u7684\u95ee\u9898\u3002\u4e00\u5b9a\u8981\u5199\u7bc7\u9898\u89e3\u6765\u5e2e\u52a9\u548c\u6211\u4e00\u6837\u53ef\u601c\u7684\u5b69\u5b50\uff01\n\n\u6b63\u6587\uff1a\n[\u9898\u76ee](https://www.luogu.org/problem/P2872)\n\n\u9996\u5148\u4e00\u8d77\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u610f\u601d\uff0c \u6839\u636e\u6700\u540e\u4e00\u53e5\u8bdd\u4f7f\u6240\u6709\u519c\u573a\u8054\u901a\uff0c \u6c42\u6700\u5c0f\u548c\u7684\u503c\uff0c \u90a3\u4e48\u6211\u4eec\u4f1a\u5f88\u5bb9\u6613\u7684\u8054\u60f3\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c \u662f\u7684\uff0c \u6b63\u89e3\u4e4b\u4e00\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\uff08\u7136\u800c\u6211\u4e5f\u53ea\u4f1a\u8fd9\u4e00\u4e2a\uff09\u3002\n\n\u4f46\u662f\u73b0\u5728\u6709\u51e0\u4e2a\u95ee\u9898\n\n1.\u6211\u4eec\u53ea\u77e5\u9053\u70b9\u7684\u5750\u6807\u5e76\u4e0d\u77e5\u9053\u5404\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n\n\u89e3\u51b3\u529e\u6cd5\uff1a\u5faa\u73af\u5d4c\u5957\u679a\u4e3e\u6c42\u51fa\u5404\u4e2a\u70b9\u4e0e\u5176\u540e\u70b9\u7684\u8ddd\u79bb\u3002 \u4e3a\u4ec0\u4e48\u662f\u5176\u540e\u70b9\uff0c \u5c31\u662f\u6bd4\u4ed6\u7f16\u53f7\u5927\u7684\u70b9\uff0c \u56e0\u4e3a\u662f\u53cc\u5411\u8fb9\uff0c\u4f8b\u5982\u4ecei\u5230j\u4f1a\u5b58\u4e00\u904d\u90a3\u4e48j\u4ecei\u4e5f\u4f1a\u518d\u5b58\u4e00\u8fb9\uff0c \u65e0\u5f62\u4e4b\u95f4\uff0c \u5c31\u4f1a\u53d8\u5f97\u66f4\u590d\u6742\n\n\u90a3\u4e48\u600e\u6837\u5199\uff1f\n\n```cpp\nfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = i + 1; j <= n; j++) {\n\t\t\tdouble z = juli(i, j);\n\t\t\tadd(i, j, z);\n\t\t}\n\t}\n```\n\u8fd9\u6837\u5c31\u4f1a\u4fdd\u8bc1\u53ea\u52a0\u4e00\u6b21\u8fb9\u5566\uff01\u662f\u4e0d\u662f\u604d\u7136\u5927\u609f\uff01\n\n2.\u600e\u6837\u5904\u7406\u5df2\u77e5\u8fb9\n\n\u89e3\u51b3\u529e\u6cd5\uff1a\u5728\u679a\u4e3e\u5b8c\u6240\u6709\u7684\u8fb9\u7684\u8ddd\u79bb\u4e4b\u540e\uff0c \u5728\u8bfb\u5165\u5df2\u77e5\u8fb9\uff0c \u8fd9\u65f6\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u76f4\u63a5\u5b58\u4e3a\u96f6\u5373\u53ef\uff0c \u8868\u793a\u4ecei\u5230j\u7684\u82b1\u8d39\u4e3a\u96f6\u3002\n\n```cpp\nfor(int i = 1; i <= m; i++) {\n\t\tint x = read(), y = read();\n\t\tadd(x, y, 0.0);\n}\n```\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c \u5173\u4e8eadd\u51fd\u6570\u4e2d\uff0c **\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662fdouble\u7c7b\u578b\u7684\uff01**\n\n3.\u5173\u4e8e\u8ddd\u79bb\u516c\u5f0f\uff1a\uff08\u4f60\u4eec\u7684\u697c\u4e3b\u592a\u5dee\u52b2\u4e86\uff0c \u4e13\u95e8\u53bb\u67e5\u7684\u8fd9\u4e2a\u548b\u5199 \uff0c \u7b11\uff09\n\n$\\sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2} $\n\n\u4f46\u662f\u5fc5\u987b\u8981\u63a7\u5236\u7cbe\u5ea6\n\n\u5426\u5219#2 #8 #9 #10\u4f1a\u6302\u6389\uff01\n\n\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\u6211\u5c31\u662f\u77e5\u9053\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/h8cjsnbo.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6240\u4ee5\u4f60\u8981\u6539\u6210\u8fd9\u4e2a\u4e9a\u5b50\uff1a\n```cpp\ndouble juli(int x, int y) {\n\treturn (double)(sqrt((double)(E[x].x - E[y].x) * (E[x].x - E[y].x) + (double)(E[x].y - E[y].y) * (E[x].y - E[y].y)));\n}\n```\n\u6240\u4ee5\uff0c \u76f8\u5e94\u7684\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lrd2mjfd.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u597d\u5566\uff0c \u4ee5\u4e0a\u662f\u4fbf\u662f\u697c\u4e3b\u505a\u8fd9\u9053\u9898\u89c9\u5f97\u53ef\u4ee5\u7ed9\u5927\u5bb6\u5206\u4eab\u501f\u9274\u7684\u5730\u65b9\u5566\uff01\n\nThe Last:\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int N = 5000100;\nint n, m, cnt, fa[N], sum;\ndouble ans;\nstruct Node {\n\tint x, y;\n}E[N];\nstruct node {\n\tint from, to;\n\tdouble w;\n}e[N];\nint read() {\n\tint s = 0, w = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)) {if(ch == '-') w = -1;ch = getchar();}\n\twhile(isdigit(ch)) {s = s * 10 + ch - '0';ch = getchar();}\n\treturn s * w;\n}\nvoid add(int x, int y, double z) {\n\te[++cnt].from =x;\n\te[cnt].to = y;\n\te[cnt].w = z;\n}\ndouble jl(int x, int y) {\n\treturn (double)(sqrt((double)(E[x].x - E[y].x) * (E[x].x - E[y].x) + (double)(E[x].y - E[y].y) * (E[x].y - E[y].y)));\n}\nbool cmp(node x, node y) {\n\tif(x.w == y.w) return x.from < y.from;\n\treturn x.w < y.w;\n}\nint find(int x) {\n\treturn x == fa[x] ? x : fa[x] = find(fa[x]);\n}\nint main() {\n\tn = read(), m = read();\n\tfor(int i = 1; i <= n; i++) \n\t\tE[i].x = read(), E[i].y = read();\n\tfor(int i = 1; i <= n; i++) fa[i] = i;\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = i + 1; j <= n; j++) {\n\t\t\tdouble z = jl(i, j);\n\t\t\tadd(i, j, z);\n\t\t}\n\t}\n\tfor(int i = 1; i <= m; i++) {\n\t\tint x = read(), y = read();\n\t\tadd(x, y, 0.0);\n\t}\n\tsort(e + 1, e + 1 + cnt, cmp);\n\tfor(int i = 1; i <= cnt; i++) {\n\t\tint fx = find(e[i].from), fy = find(e[i].to);\n\t\tif(fx != fy) {\n\t\t\tfa[fx] = fy;\n\t\t\tsum++;\n\t\t\tans += e[i].w;\n\t\t}\n\t\tif(sum == n - 1) break;\n\t}\n\tprintf(\"%.2lf\\n\", ans);\n\treturn 0;\n}\n```\nps\uff1a\u4f60\u4eec\u7684\u697c\u4e3b\u592achao\u4e86\uff0c\u628a\u56fe\u5e8a\u91cc\u7684\u56fe\u7247\u5220\u4e86\uff0c \u5bfc\u81f4\u9898\u89e3\u7684\u56fe\u7247\u6ca1\u4e86\uff0c \u5351\u5fae...\u53ea\u80fd\u91cd\u65b0\u5f04\u91cd\u65b0\u63d0\u4ea4...\uff08\u59d4\u5c48\n\n\u8c22\u8c22\u6536\u770b\uff0c \u795d\u8eab\u4f53\u5065\u5eb7\uff01\n\n\n\n\n",
        "postTime": 1569743257,
        "uid": 147646,
        "name": "lzpclxf",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "## kruskal\u7b97\u6cd5AC\n#### \u8fd9\u9053\u9898\u6211A\u4e86n\u904d\u624d\u8fc7\uff0c\u4e3a\u6b64\uff0c\u6211\u7279\u5730\u5199\u4e00\u7bc7\u9898\u89e3\u8ba9\u5927\u5bb6\u5c11\u8d70\u4e9b\u5f2f\u8def\n### \u5404\u79cd\u9519\u8bef\n1. \u5bf9\u4e8e\u9519#2\uff0c#8\uff0c#9\uff0c#10 \u4ee5\u53ca\u8f93\u51fanan(not a number)\u7684\uff0c\u770b\u4e00\u4e0b\u5173\u4e8e\u6240\u6709\u957f\u5ea6\u7684\u6570\u503c\u662f\u5426\u90fd\u7528double\u88c5\u4e86\n2. \u6ce8\u610f\u4e00\u4e0b\u6700\u540e\u7ed3\u679c\u662f\u4e0d\u662f\u4e24\u4f4d\u5c0f\u6570\uff0c\u4ee5\u53ca\u7b54\u6848\u662f\u4e0d\u662f\u5f00\u7684double\n3. kruskal\u7b97\u6cd5\u6bd4prim\u7b97\u6cd5\u4e0d\u7ba1\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0a\u90fd\u4f1a\u6709\u6240\u589e\u52a0\uff0c\u6240\u4ee5\u4e0d\u8981\u52a0\u4e00\u4e9b\u6ca1\u6709\u7528\u7684\u6b65\u9aa4\u6765\u589e\u52a0\u65f6\u95f4~~\u6211\u4e5f\u4e0d\u77e5\u5230\u6211\u5e72\u4e86\u5565~~\n### \u7b97\u6cd5\u601d\u8def\n\u8fd9\u9053\u9898\u548c[P2504 \u806a\u660e\u7684\u7334\u5b50](https://www.luogu.org/problemnew/show/P2504)\u6bd4\u8f83\u50cf\uff0c\u505a\u6cd5\u57fa\u672c\u4e0a\u4e5f\u5dee\u4e0d\u4e86\u591a\u5c11\uff0c\u5927\u5bb6\u53ef\u4ee5\u770b\u770b\n\n##### \u8fd9\u9053\u9898\u53ef\u4ee5\u5148\u8bb0\u5f55\u8ddd\u79bb\u7684\u5e73\u65b9\uff0c\u52a0\u548c\u7684\u65f6\u5019\u5728\u5f00\u6839\uff0c\u53ef\u4ee5\u8282\u7ea6\u65f6\u95f4\u7a7a\u95f4\n1. \u5148\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u8bb0\u5f55\u5750\u6807\n2. \u5bf9\u6bcf\u4e24\u4e2a\u70b9\u90fd\u8fdb\u884c\u8ddd\u79bb\u8fd0\u7b97(\u5176\u5b9e\u53ea\u7528\u8fd0\u7b97\u4e00\u6b21\u5c31\u591f\u4e86\uff0c\u4e0d\u7ba1A\u5230B\u8fd8\u662fB\u5230A\u90fd\u662f\u4e00\u6837\u957f)\n3. \u628a\u5df2\u7ecf\u5efa\u597d\u7684\u8def\u7684\u4ef7\u503c\u6539\u62100\n4. \u8fdb\u884ckruskal\u8fd0\u7b97(\u5148\u6309\u4ef7\u503c\u6392\u5e8f\uff0c\u7136\u540e\u5e76\u67e5\u96c6\u5c06\u6240\u6709\u70b9\u8fde\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u8f93\u51fa\u8fde\u8d77\u6765\u6240\u7528\u7684\u4ef7\u503c\u548c)\n5. \u8f93\u51fa\n### AC\u4ee3\u7801\uff0c\u9644\u8be6\u89e3\n[AC\u8be6\u60c5](https://www.luogu.org/recordnew/show/17411911)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,q=0;\ndouble ans=0;\nint f[10001],d[10001][10001],l[10001][10001];\nstruct point{\nint x,y;\n} h[10001];\nstruct edge{\nint s,e;\ndouble w;\n} g[1001000];\nint cmd(edge a,edge b){return a.w<b.w;}\nint find(int s){if(f[s]==s||f[s]==0)return f[s]=s;\n    else return f[s]=find(f[s]);}\nint k(){//kruskal \n    int cnt=0;//\u8bb0\u5f55\u8fde\u63a5\u8fb9\u7684\u6761\u6570 \n    for(int i=1;i<=q;i++){//\u5bf9\u4e8e\u8fb9\u4f9d\u6b21\u67e5\u627e \n        int x=find(g[i].s);//\u627e\u6839\u8282\u70b9 \n        int y=find(g[i].e);\n        if(x!=y){//\u5982\u679c\u4e24\u4e2a\u6839\u8282\u70b9\u4e0d\u4e00\u6837\uff0c\u5c31\u8bf4\u660e\u4e24\u70b9\u4e4b\u95f4\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u4fee\u8def\uff0c\u8ba9\u4e24\u70b9\u8054\u901a \n            f[x]=y;\n            ans+=sqrt(g[i].w);//\u8def\u7684\u8ddd\u79bb\u52a0\u4e0a\uff0c\u8fd9\u91cc\u5f00\u6839\uff0c\u8282\u7ea6\u65f6\u95f4\u7a7a\u95f4 \n            if(++cnt>=n-1)return ans;//return\u5565\u90fd\u4e00\u6837\uff0c\u6ca1\u7528\u4e0a(\u5982\u679c\u60f3\u7528\u53ef\u4ee5\u6700\u540e\u8f93\u51fa\u8fd9\u4e2a\u51fd\u6570\u503c)\n        }\n    }\n}\nint main(){\n    cin>>n>>m;//\u8f93\u5165 \n    for(int i=1;i<=n;i++){//\u4e24\u91cd\u5faa\u73af\u6c42\u6bcf\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb \n        cin>>h[i].x>>h[i].y;//\u6bcf\u4e2a\u70b9\u5750\u6807\u8f93\u5165 \n        for(int j=1;j<i;j++){ \n            double u=(h[i].x-h[j].x+0.0)*(h[i].x-h[j].x+0.0)+(h[i].y-h[j].y+0.0)*(h[i].y-h[j].y+0.0);\n            //\u8fd9\u91cc\u8bb0\u5f97\u5f00double\uff0c\u8981\u4e0d\u7136W\u56db\u4e2a\u70b9(\u4e3a\u5565\u53ea\u95194\u4e2a)\uff0c\u6c42\u51fa\u8ddd\u79bb\u7684\u5e73\u65b9 \n            g[++q]=(edge){i,j,u};//\u8bb0\u5f55\u8d77\u70b9\u7ec8\u70b9\u8ddd\u79bb \n            l[i][j]=q;//\u8bb0\u5f55\u4e24\u70b9\u4e4b\u95f4\u662f\u7b2c\u51e0\u53f7\u8fb9 \n        }\n    }\n    for(int i=1;i<=m;i++){\n        int Q,W;\n        cin>>Q>>W;//\u8f93\u5165\u5df2\u7ecf\u4fee\u597d\u7684\u8def \n        g[l[Q][W]].w=0.0;//L\u6570\u7ec4\u662f\u6c42\u4e24\u70b9\u4e4b\u95f4\u662f\u7b2c\u51e0\u6761\u8def \n        g[l[W][Q]].w=0.0;//\u5df2\u7ecf\u4fee\u597d\u4e86\uff0c\u6240\u4ee5\u8fde\u63a5\u4e0d\u7528\u518d\u4fee \n    }\n    sort(g+1,g+1+q,cmd);//\u6392\u5e8f\uff0c\u4ef7\u503c\u5c0f\u7684\u5728\u524d\u9762\n    k();//kruskal \n    printf(\"%.2lf\",ans);//\u8f93\u51fa\u4e24\u4f4d\u5c0f\u6570 \n    return 0;\n}\n```\n\u611f\u8c22\u5927\u5bb6\u80fd\u770b\u6211\u7684\u9898\u89e3!~",
        "postTime": 1553093427,
        "uid": 125071,
        "name": "Blue_wonders",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "# \u9053\u8def\u5efa\u8bbe\n\u627e\u5230\u9898\u76ee\u5462\uff0c\u53ef\u4ee5\u4ece\u9898\u76ee\u4e0a\u770b\u51fa\uff1a\u4e3a\u4e86\u4f7f\u5f97\u6240\u6709\u519c\u573a\u8fde\u901a\uff0c\u8fd9\u662f\u4e00\u9898\u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f\u9898\u76ee\u3002\n\u4f46\u662f\uff0c\u5728\u4e00\u5f00\u59cb\uff0c\u6709\u4e00\u4e9b\u8fb9\u5c31\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5c06\u5b83\u7684\u6743\u503c\u8d4b\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\n##### \u8d34\u4ee3\u7801\uff0c\u5566\u5566\u5566\n```\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <cmath>\n#include <iostream>\nusing namespace std;\n\nconst int Maxn=100001;\n\nint n,m;\nint xx[Maxn],yy[Maxn],f[Maxn],A,B;\n\nstruct node //\u7ed3\u6784\u4f53\u6751\u5b58\u50a8\u8fb9\n{\n\tint x;\n\tint y;\n\tdouble val;\t\n}a[Maxn];\n\nbool cmp(node a,node b)//\u6392\u5e8f\uff0c\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\uff0c\u8d2a\u5fc3\u601d\u60f3\n{\n\tif(a.val==b.val)\n\t\treturn a.x<b.x;\n\treturn a.val<b.val;\t\n}\n\nint findr(int x)//\u5e76\u67e5\u96c6\n{\n\tif(f[x]==x) return f[x];\n\treturn f[x]=findr(f[x]);\t\n}\n\nvoid merge(int x,int y)//\u5408\u5e76\n{\n\tf[findr(x)]=findr(y);\t\n}\n\nint main()\n{\t\n\tint cnt=0;\n\tcin>>n>>m;\n\tfor(int i=1; i<=n; i++)\n\t\tcin>>xx[i]>>yy[i];\n\tfor(int i=1; i<=n; i++)//\u521d\u59cb\u5316\uff0c\u522b\u5fd8\u4e86\n\t\tf[i]=i;\n\tfor(int i=1; i<=n; i++)//\u679a\u4e3e\u4e24\u4e24\u4e2a\u70b9\uff0c\u5b58\u50a8\u8fdb\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u7528\u516c\u5f0f\u7b97\u6743\u503c\n\t\tfor(int j=i+1; j<=n; j++) {\n\t\t\ta[++cnt].x=i;\n\t\t\ta[cnt].y=j;\n\t\t\ta[cnt].val=(double)sqrt((double)(xx[i]-xx[j])*(xx[i]-xx[j])+(double)(yy[i]-yy[j])*(yy[i]-yy[j]));\n\t\t}\n\tfor(int i=1; i<=m; i++) {//\u539f\u6709\u7684\u8fb9\u5c31\u628a\u6743\u503c\u8d4b\u4e3a0\uff0c\u5c31\u53ef\u4ee5\u4e86\n\t\tcin>>A>>B;\n\t\ta[++cnt].x=A;\n\t\ta[cnt].y=B;\n\t\ta[cnt].val=0.0;\n\t}\n\tint top=0;\n\tdouble ans=0.0;\n\tsort(a+1,a+cnt+1,cmp);\n\tfor(int i=1; i<=cnt; i++) {//\u6a21\u677f\uff0c\u6700\u5c0f\u751f\u6210\u6811\n\t\tif(findr(a[++top].x)!=findr(a[top].y)) {\n\t\t\tans+=a[top].val;\n\t\t\tmerge(a[top].x,a[top].y);\n\t\t}\n\t}\n\tprintf(\"%.2lf\",ans);//\u8f93\u51fa\n\treturn 0;\n}\n```\n",
        "postTime": 1523457916,
        "uid": 26800,
        "name": "Sshenyyyu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u770b\u4e86\u697c\u4e0b\u4e24\u4f4ddalao\u7684kruskal\u7684\u65b9\u6cd5\uff0c\u53ea\u4f1a\u7528prim\u7684\u672c\u849f\u84bb\u745f\u745f\u53d1\u6296\u3002\n\n\u5177\u4f53\u8bf4\u6765\uff0c\u7528prim\u5bf9\u4e8e\u8fd9\u4e2a\u9898\u6765\u8bf4\u52a3\u52bf\u4e0d\u5927\uff0c\u800c\u4e14\u6bd4\u8f83\u9002\u5408\u8111\u5b50\u8f6c\u7684\u6162\u7684\u4eba\uff0c\u5c31\u662f\u6709\u51e0\u6b65\u6bd4\u8f83\u5de7\u5999\u3002\n\n\u4ee3\u7801\u91cc\u4ed4\u7ec6\u89e3\u91ca\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nint x[1000001],y[1000001],b[1001],lj[10001],n,m,k,sum,h,l;\ndouble a[1001][1001],d[10001],tot;\ndouble js(int x1,int x2,int y1,int y2)\n{\n    return sqrt(pow(double(x1-x2),2)+pow(double(y1-y2),2));//\u8fd9\u4e2a\u5730\u65b9\u5fc5\u987b\u5f3a\u5236double\uff0c\u4e5f\u53ef\u4ee5\u6709\u5176\u4ed6\u5199\u6cd5\uff0c\u8981\u4e0d\u6709\u56db\u4e2a\u70b9\u4f1a\u8f93\u51fa-nan\n}\n//\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    cin>>x[i]>>y[i];\n    for(int i=1;i<=n-1;i++)\n     for(int j=i+1;j<=n;j++)\n     {\n         a[i][j]=a[j][i]=js(x[i],x[j],y[i],y[j]);//\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7531\u4e8e\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u51cf\u5c11\u5faa\u73af\u6b21\u6570\u3002\n     }\n    for(int i=1;i<=m;i++)\n    {\n        cin>>h>>l;\n        a[h][l]=a[l][h]=0;//\u8fd9\u4e2a\u5730\u65b9\u5173\u952e\uff0c\u5982\u679c\u4e24\u57ce\u5e02\u4e4b\u95f4\u6709\u8def\uff0c\u90a3\u4e48\u5c31\u628a\u8fd9\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u8fb9\u7684\u6743\u503c\u6e05\u96f6\u3002\n    }\n    memset(d,0x7f,sizeof(d));\n    for(int i=1;i<=n;i++)//\u5f80\u4e0b\u662f\u4e00\u4e2aprim\u7684\u6a21\u677f\uff0cdalao\u53ef\u4ee5\u7565\u8fc7\u3002\n    {\n        d[i]=a[1][i];\n    }\n    d[1]=0;\n    b[1]=1;\n    for(int i=1;i<=n-1;i++)\n    {\n        k=0;\n        for(int j=1;j<=n;j++)\n        if(!b[j]&&d[j]<d[k])\n        k=j;\n        b[k]=1;\n        for(int j=1;j<=n;j++)\n        if(!b[j]&&a[j][k]<d[j])\n        d[j]=a[j][k];\n    }\n    for(int i=1;i<=n;i++)\n    {\n        tot+=d[i];\n    }\n    printf(\"%.2lf\",tot);//\u9898\u76ee\u4e2d\u6ca1\u5199\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u4fdd\u7559\u4e24\u4f4d\u3002\n}\n```",
        "postTime": 1503733788,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7528\u6a21\u677f\u7a0d\u52a0\u6539\u52a8\u5c31\u53ef\u4ee5AC\n\n\u5927\u81f4\u601d\u8def\u662f\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u5c06\u8fb9\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\uff0c\u6bcf\u6b21\u8be2\u95ee\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\n\n\u5982\u679c\u8fd9\u4e24\u6761\u8fb9\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5c31\u628a\u4ed6\u4eec\u5408\u5e76\uff0cans+=\u8fb9\u7684\u957f\u5ea6\u3002\n\n\u6700\u540e\u7528%.2Lf\u8f93\u51fa\u5373\u53ef\u3002\n\n\u6ce8\u610f\u4e00\u70b9\uff1a\u5df2\u6709\u7684\u9053\u8def\u4e0d\u7528\u518d\u5efa\uff0c\u6240\u4ee5\u8fb9\u6743\u662f\u96f6\u3002\n\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff1a\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long x[1005],y[1005],pre[1005],tar=1;\nlong double ans=0;\nbool have[1005][1005];//\u8fd9\u6761\u8def\u662f\u4e0d\u662f\u5df2\u6709\u9053\u8def\nstruct nod\n{\n    int X,Y;\n    long double w;//64\u4f4d\u6d6e\u70b9\u7c7b\u578b\u9632\u70b8\n}q[1000005];\nbool cmp(nod i,nod j)\n{\n    return i.w<j.w;\n}\nlong double cal(long long i,long long j) //d((x1,y1),(x2,y2))=sqrt((x1-x2)^2+(y1-y2)^2)\n{                                        //\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1\u521d\u4e2d\u6570\u5b66 <\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb+\u52fe\u80a1\u5b9a\u7406>\n    long long X=x[i]-x[j],Y=y[i]-y[j];\n    return (long double)sqrt((long double)X*X+Y*Y);\n}\n//\u5e76\u67e5\u96c6\u7b97\u6cd5\uff0cdalao\u4e0d\u7528\u770b\nint find(int i)//\u627e\u7238\u7238\n{\n    if(pre[i]==i)    return i;\n    return pre[i]=find(pre[i]);\n}\nvoid join(int a,int b)//\u5408\u5e76\n{\n    if(find(a)==find(b))\n        return;\n    pre[find(a)]=b;\n}\n//\u5e76\u67e5\u96c6\u7b97\u6cd5\uff0cdalao\u4e0d\u7528\u770b\nint main()\n{\n    memset(have,0,sizeof(have));\n    long long n,m,a,b;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n        cin>>x[i]>>y[i],pre[i]=i;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>a>>b;\n        have[a][b]=have[b][a]=1;\n        q[tar++]=(nod){a,b,0};//\u5b58\u50a8\u5df2\u77e5\u9053\u8def\n    }\n    for(int i=1;i<=n;i++)\n        for(int j=i+1;j<=n;j++)\n            if(have[i][j]==0)//\u5982\u679c\u4e0d\u662f\u5df2\u77e5\u9053\u8def\n                q[tar++]=(nod){i,j,cal(i,j)};//\u5b58\u50a8\u65b0\u5efa\u7684\u9053\u8def\n    tar--;\n    sort(q+1,q+tar+1,cmp);\n    //\u6807\u51c6\u5e76\u67e5\u96c6\n    for(int i=1;i<=tar;i++)\n        if(find(q[i].X)!=find(q[i].Y))//\u5982\u679c\u8fd9\u4e24\u6761\u8fb9\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\n        {\n            join(q[i].X,q[i].Y);//\u628a\u4ed6\u4eec\u5408\u5e76\n            ans+=q[i].w;//\u52a0\u4e0a\u8fd9\u6761\u8fb9\n        }\n    printf(\"%.2Lf\",ans);//\u4fdd\u7559\u4e24\u4f4d\u8f93\u51fa\n    return 0;\n}\n```\n\u8fd8\u6709\u4e00\u79cd\u4f18\u5316\u7b97\u6cd5\uff1a\n\u8bfb\u5165\u5df2\u77e5\u9053\u8def\u7684\u540c\u65f6\uff0c\u56e0\u4e3a\u8fb9\u6743\u4e3a\u96f6\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5408\u5e76\uff0c\u4e0d\u7528\u8fdb\u884c\u5b58\u50a8\u3002\n\n```cpp\nfor(int i=1;i<=m;i++)\n{\n    cin>>a>>b;\n    have[a][b]=have[b][a]=1;\n    if(find(a)!=find(b))\n        join(a,b);\n}\n```",
        "postTime": 1508034139,
        "uid": 41262,
        "name": "SSHhh",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "# \u9053\u8def\u5efa\u8bbe\n\n _Tips:\u535a\u5ba2\u5185\u98df\u7528\u6548\u679c\u66f4\u4f73 [\u4f20\u9001\u95e8](https://dgsyrc.github.io/2019/08/16/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3%20P2872%20%E3%80%90[USACO07DEC]%E9%81%93%E8%B7%AF%E5%BB%BA%E8%AE%BEBuilding%20Roads%E3%80%91/)_ \n\n####  \u9898\u610f\uff1a\n\n\u7ed9\u4f60$n$\u4e2a\u519c\u573a\u7684\u5750\u6807\uff0c\u7ed9\u51fa$m$\u6761\u5df2\u7ecf\u5b58\u5728\u7684\u8def\uff08\u8fde\u63a5\u519c\u573a$i$\u4e0e\u519c\u573a$j$\uff09\uff0c\u6c42\u6700\u5c11\u8981\u4fee\u5efa\u591a\u957f\u7684\u8def\u624d\u80fd\u628a\u6240\u6709\u519c\u573a\u8fde\u63a5\u8d77\u6765\u3002\n\n#### ~~\u4e0a\u9762\u7684\u592a\u5570\u55e6\u4e86\uff0c\u518d\u7b80\u5316\u4e00\u4e0b\uff1a~~\n\n\u7ed9\u4f60$n$\u4e2a\u8282\u70b9\uff0c\u7ed9\u51fa$m$\u6761\u6743\u503c\u4e3a0\u7684\u8fb9\uff0c\u6bcf\u4e2a\u8282\u70b9\u5f7c\u6b64\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u8fb9\u6743\u503c\u4e3a\u4e24\u70b9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u6c42\u8be5\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\u3002\n\n\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f\uff1a$dis=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$\n\n------------------\n\n \u8fd9\u9053\u9898\u6211\u662f\u7528$Prim$\u505a\u7684\uff0c\u611f\u89c9$Prim$\u66f4\u597d\u4e9b\uff0c1000\u4e2a\u70b9100\u6761\u8fb9\u7b97\u7a00\u758f\u56fe\u5427\n\n\u4e00\u5b9a\u8981\u6ce8\u610f\u5728\u8ba1\u7b97\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u65f6\u8981\u5728$sqrt()$\u91cc\u52a0double\uff0c\u4e0d\u7136\u5c31\u4f1a\u5361\u7cbe\u5ea6WA2\u4e2a\u70b9 ~~\uff08\u522b\u95ee\u6211\u600e\u4e48\u77e5\u9053\u7684\uff09~~\n\n-----------------\n### \u4ee3\u7801\u89e3\u6790\uff1a\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<cmath>\n#define INF 20000000 //\u9898\u4e2d\u7ed9\u51fa\u7684\u6ca1\u6709\u90a3\u4e48\u5927\uff0c\u4f46\u662f\u5f00\u5927\u70b9\u4e0d\u4f1a\u9519\nusing namespace std;\n\nstruct edge\n{\n\tdouble w;//\u8fb9\u6743\n\tint v;//\u7ec8\u70b9\n};\n\nvector<edge> G[1010];//\u52a8\u6001\u6570\u7ec4\u5b58\u8fb9\n\nint n,m,zb[1010][3],head;\nbool pd[1010][1010],vis[1010];\ndouble ans=0,f[1010];\n\ndouble dis(int xa,int ya,int xb,int yb)//\u6c42\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\n{\n\treturn sqrt((double)(xa-xb)*(xa-xb)+(double)(ya-yb)*(ya-yb));//\u6ce8\u610f\u6b64\u5904\u7684\u4e24\u4e2adouble\uff0c\u88ab\u5361WA\u4e86\u4e24\u6b21\n}\n\n\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int a=1;a<=n;a++)\n\t{\n\t\tscanf(\"%d%d\",&zb[a][1],&zb[a][2]);//\u8bfb\u5165\u5750\u6807\n\t}\n\tfor(int a=1;a<=m;a++)//\u6807\u8bb00\u6743\u8fb9\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tpd[x][y]=true;\n\t\tpd[y][x]=true;\n\t}\n\tfor(int a=1;a<=n;a++)\n\t{\n\t\tfor(int b=1;b<=n;b++)\n\t\t{\n\t\t\tif(a==b)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tedge cmp;\n\t\t\t\tcmp.v=b;\n\t\t\t\tif(pd[a][b]==true)//\u5982\u679c\u88ab\u6807\u8bb0\u8fb9\u6743\u4e3a0\n\t\t\t\t{\n\t\t\t\t\tcmp.w=0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcmp.w=dis(zb[a][1],zb[a][2],zb[b][1],zb[b][2]);\n\t\t\t\t}\n\t\t\t\tG[a].push_back(cmp);//\u5b58\u8fb9\n\t\t\t}\n\t\t}\n\t}\n\tfor(int a=1;a<=n;a++)//\u521d\u59cb\u5316\uff0c\u8d4b\u6781\u503c\n\t{\n\t\tf[a]=INF;\n\t}\n   //\u4e0b\u65b9\u4e3aPrim\u90e8\u5206\n\tfor(int a=0;a<G[1].size();a++)//\u9884\u5904\u7406\n\t{\n\t\tint v=G[1][a].v;\n\t\tdouble w=G[1][a].w;\n\t\tf[v]=min(f[v],w);\n\t}\n\tvis[1]=true;//\u6807\u8bb0\u8be5\u8282\u70b9\u5df2\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\n\tfor(int i=1;i<=n-1;i++)//n\u4e2a\u8282\u70b9\uff0c\u5f53\u7136n-1\u6761\u8fb9\n\t{\n\t\tint V;\n\t\tdouble W=INF;//\u8d4b\u6781\u503c\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(vis[j])\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(f[j]<W)\n\t\t\t{\n\t\t\t\tW=f[j];\n\t\t\t\tV=j;\n\t\t\t}\n\t\t}\n\t\tans=ans+W;//\u7edf\u8ba1\u6700\u5c0f\u751f\u6210\u6811\u5927\u5c0f\n\t\tvis[V]=true;//\u6807\u8bb0\u8be5\u8282\u70b9\u5df2\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\n\t\tfor(int a=0;a<G[V].size();a++)\n\t\t{\n\t\t\tint v=G[V][a].v;\n\t\t\tdouble w=G[V][a].w;\n\t\t\tf[v]=min(f[v],w);\n\t\t}\n\t}\n\tprintf(\"%.2lf\\n\",ans);//\u8f93\u51fa\n\treturn 0;//\u597d\u4e60\u60ef\n}\n```\n",
        "postTime": 1565942693,
        "uid": 89910,
        "name": "C_Cong",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2872 \u3010\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u6bd4\u8f83\u6a21\u677f\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u989d\u849f\u84bb[\u8c03\u8bd5](https://www.luogu.org/recordnew/lists?uid=80049&pid=2872&status=&sort=undefined)\u4e86\u5f88\u4e45\u2026\u2026QAQ\n\n> \u7f16\u7a0b\u4e94\u5206\u949f\uff0c\u8c03\u8bd5\u4e24\u5c0f\u65f6\n\n\n\n------------\n\n### \u601d\u8def$1$\uff1a$Prim+$\u5806\u4f18\u5316$+$\u90bb\u63a5\u77e9\u9635\u5efa\u56fe\n\n$1)$\u8fd9\u9053\u9898\u76ee\u6bd4\u8f83\u5c11\u9898\u89e3\u4ecb\u7ecd$Prim$\u554a\u3002\uff08~~\u4e0d\u4f1aPrim\u7684\u51fa\u95e8\u53f3\u8f6c\u767e\u5ea6\u7b49\u4f60\uff09~~\u770b\u770b\u5176\u4ed6\u9898\u89e3\u5427\u3002\n\n$2)$\u6211\u4eec\u4e3a\u4e86\u53d8\u5f97\u66f4\u4f18\u79c0\uff0c\u91c7\u7528\u5806\u4f18\u5316\uff0c\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002\u6548\u7387\u63d0\u5347\u662f\u5f88\u53ef\u89c2\u7684\uff08$STL$\u7684\u5e38\u6570\u5f71\u54cd\u770b$rp$\u4e86\uff09\u3002\n\n$3)$\u5bf9\u4e8e\u5df2\u7ecf\u4fee\u597d\u7684\u8def\uff0c\u6743\u503c\u6539\u4e3a$0$\u5c31\u884c\uff0c\u6b64\u65f6\u90bb\u63a5\u77e9\u9635\u5c31\u65b9\u4fbf$O(1)$\u4fee\u6539\u3002\u6ce8\u610f\u65e0\u8fb9\u6743\u503c\u4e3a$-1$\u3002\n\n$4)$\u8ba1\u7b97\u8ddd\u79bb\u8bf7\u53c2\u8003\u3010\u767e\u5ea6\u3011\u6216\u3010\u521d\u4e2d\u6570\u5b66\u3011\u3002\n\n$5)$\u5efa\u56fe\u7684\u65f6\u5019\u70b9\u4e4b\u95f4\u4e24\u4e24\u5efa\u8fb9\u3002\n\n------------\n\u6613\u9519\u70b9\uff08\u5bb3\u6211\u8c03\u8bd5\u5f88\u4e45\u7684\u70b9\uff09\uff1a\n\n$1)$\u4e24\u70b9\u8ddd\u79bb\u516c\u5f0f\uff0c\u5728\u5e73\u65b9\u7684\u65f6\u5019\u8981\u5f3a\u8f6c`double`\n\n\u5982\uff1a`sqrt((double)(x-a.x)*(double)(x-a.x)+(double)(y-a.y)*(double)(y-a.y))`\n\n$2)$\u5728\u5efa\u7acb\u5806\u7684\u65f6\u5019\uff0c\u7528\u4e86$STL$\uff0c\u4e0d\u8fc7\u6ce8\u610f\u8981\u4e48\u81ea\u5df1\u91cd\u8f7d\u5806\uff0c\u8981\u4e48`greater<pair<double,int> >`\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u4e24\u4e2a\u53d8\u91cf\u6807\u8bc6\u7684\u987a\u5e8f\u3002\u56e0\u4e3a\u5806\u9ed8\u8ba4\u662f\u4f18\u5148\u6bd4\u8f83`first`\u7684\u3002\u5982\uff1a\n\n\u9519\u8bef\u7684\uff1a\n```cpp\n\ntypedef pair<int,double> pid;\npriority_queue <pid,vector<pid>,greater<pid> > q;\n\n```\n\n\n\u6b63\u786e\u7684\uff1a\n```cpp\n\ntypedef pair<double,int> pdi;\npriority_queue <pdi,vector<pdi>,greater<pdi> > q;\n\n```\n\n$3)$\u521d\u59cb\u5316$\\infty$\u7684\u65f6\u5019\u522b\u5fd8\u4e86\u662f`double`\u7c7b\u578b\u3002\n\n\n------------\n\n\u5269\u4e0b\u90fd\u662f\u7ec6\u8282\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<vector>\n#include<cmath>\n#include<queue>\n#include<climits> //\u51b7\u95e8\u7684\u5934\u6587\u4ef6\nusing namespace std;\n\ntypedef pair<int,double> pid;\nconst double INF=double(INT_MAX*1.0);//\u8981\u8bb0\u5f97\u662fdouble\u7684\nconst int MAXN=10005;\nint n,m;\ndouble ans;\nstruct point\n{\n    int x,y;\n    double operator+(const point& a)const\n    {\n        return sqrt((double)(x-a.x)*(double)(x-a.x)+(double)(y-a.y)*(double)(y-a.y));//\u8ba1\u7b97\u4e24\u70b9\u8ddd\u79bb\u516c\u5f0f\uff0c\u6211\u7528\u8fd0\u7b97\u7b26\uff0c\u4e0d\u7528\u51fd\u6570\n    }\n}a[MAXN];\ndouble edge[MAXN][MAXN];\nbool visit[MAXN],done[MAXN][MAXN];//done[][]\u662f\u7528\u6765\u8bb0\u5f55\u662f\u5426\u4fee\u4e86\u8fd9\u6761\u8def\ndouble dis[MAXN];\n\nvoid build(void)\n{\n\tfor(int i=1;i<=n;i++)\n\t for(int j=i+1;j<=n;j++)\n\t  if(!done[i][j])//\u6ca1\u4fee\n\t   edge[j][i]=edge[i][j]=a[i]+a[j];//\u65e0\u5411\u8fb9\n}\n\nvoid input(void)\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n     for(int j=1;j<=n;j++)\n      edge[i][j]=-1.0;//\u8981\u8bb0\u5f97\u6ca1\u8fb9\u5c31\u662f-1\n    for(int i=1;i<=n;i++)\n     cin>>a[i].x>>a[i].y;\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;\n        cin>>u>>v;\n        done[v][u]=done[u][v]=true;\n        edge[u][v]=edge[v][u]=0;//\u4fee\u4e86\u8def\u5c31\u662f\u8fb9\u4e3a0\n    }\n    build();\n}\n\nvoid prim(void)\n{\n    for(int i=1;i<=n;i++)\n     dis[i]=INF;//\u522b\u624b\u6b8b\u7528memset\uff0c\u4f60\u61c2\u5f97\n    typedef pair<double,int> pdi;//\u4e0a\u6587\u8bf4\u8fc7\u6ce8\u610f\u4e8b\u9879\n    priority_queue <pdi,vector<pdi>,greater<pdi> > q;\n    q.push(pdi(0,1));\n    dis[1]=0;\n    int stop=0;//\u8bb0\u5f55\u52a0\u5165\u4e86\u51e0\u6761\u8fb9\n    while(!q.empty() && stop<n)//\u6a21\u677f\u5806\u4f18\u5316Prim\n    {\n\t\tconst double distance=q.top().first;\n        const int u=q.top().second;\n        q.pop();\n        if(visit[u])\n         continue;\n        visit[u]=true;\n\t\tans+=distance;\n        stop++;\n        for(int v=1;v<=n;v++)\n         if(edge[u][v]!=-1.0 && dis[v]>edge[u][v])\n         {\n         \tdis[v]=edge[u][v];\n         \tq.push(pdi(dis[v],v));\n\t\t }\n    }\n}\n\nint main()\n{\n    input();\n    build();\n    prim();\n    printf(\"%.2f\",ans);\n    return 0;\n} \n```\n\n------------\n\n\n### \u601d\u8def2\uff1a$Kruskal+$\u8def\u5f84\u538b\u7f29\n\n\u5f88\u591a\u9898\u89e3\u90fd\u6709\u8bf4\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\u53ea\u8bf4\u4e00\u4e2a\u5751\u70b9\uff1a\n\n> $edge$**\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u7684\u8db3\u591f\u5927\uff01**\u5efa\u8bae$10^6$\u3002\n\n\u8fd9\u5c31\u662f\u6211WA\u4e86\u7684\u539f\u56e0\uff0c\u5947\u602a\u4e0d\u662fRE\u3002\n\n\u5176\u4ed6\u7684\u6309\u7167\u6a21\u677f\u6765\u4e5f\u5dee\u4e0d\u591a\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cmath>\nusing namespace std;\n\nconst int MAXN=1010;\nint n,m;\nstruct point\n{\n\tint x,y;\n\tdouble operator+(const point& a)const\n\t{\n\t\treturn double(sqrt(double(x-a.x)*double(x-a.x)+double(y-a.y)*double(y-a.y)));\n\t}\n}a[MAXN];\nstruct node\n{\n\tint from,to;\n\tdouble v;\n\tbool operator<(const node& a)const\n\t{\n\t\treturn (v!=a.v)?(v<a.v):(from<a.from);\n\t}\n}edge[MAXN*MAXN];\nint f[MAXN];\ndouble ans;\nint cnt;\nbool done[MAXN][MAXN];\n\nvoid build(void)\n{\n\tfor(int i=1;i<=n;i++)\n\t for(int j=i+1;j<=n;j++)\n\t  if(!done[i][j])\n\t   edge[++cnt]=(node){i,j,a[i]+a[j]};\n}\n\nvoid input(void)\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t cin>>a[i].x>>a[i].y;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tdone[x][y]=done[y][x]=true;\n\t\tedge[++cnt]=(node){x,y,0};\n\t}\n\tbuild();\n}\n\nint find(const int& x)\n{\n\treturn f[x]==x?x:f[x]=find(f[x]);\n}\n\nvoid kruskal(void)\n{\n\tint stop=0;\n\tfor(int i=1;i<=n;i++)\n\t f[i]=i;\n\tsort(edge+1,edge+1+cnt);\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tconst int u=find(edge[i].from);\n\t\tconst int v=find(edge[i].to);\n\t\tif(u==v)\n\t\t continue;\n\t\tans+=edge[i].v;\n\t\tf[u]=v;\n\t\tstop++;\n\t\tif(stop==n-1)\n\t\t return;\n\t} \n}\n\nint main()\n{\n\tinput();\n\tkruskal();\n\tprintf(\"%.2f\",ans);\n\treturn 0;\n}\n```\n\n\n------------\n### \u6bd4\u8f83\u4e24\u79cd\u7b97\u6cd5\n\n#### \u65f6\u95f4\u4e0a\uff1a\n\n$Prim$ \u9002\u5408\u7a20\u5bc6\u56fe\uff0c\u590d\u6742\u5ea6\u4e3a $O(n^2)$\uff0c\u56e0\u6b64\u901a\u5e38\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u50a8\u5b58\uff1b\u4f46\u662f\u5806\u4f18\u5316\u4e3a $O(nlogn)$ \u3002\n\n\u7a20\u5bc6\u56fe$Prim$ \u4f18\u4e8e $Kruskal$ \uff0c\u7a00\u758f\u56fe $Kruskal$ \u4f18\u4e8e $Prim$ \u3002\n\n#### \u7a7a\u95f4\u4e0a\uff1a\n\n$Prim$ \u9002\u5408\u70b9\u5c11\u8fb9\u591a\uff0c $Kruskal$ \u9002\u5408\u8fb9\u591a\u70b9\u5c11\u3002\n\n> \u6ce8\u610f\uff1a\u5806\u4f18\u5316\u7684$Prim$\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\uff0c\u7a7a\u95f4\u8981\u6c42\u66f4\u9ad8\u3002\n\n\u770b\u5230\u4e0b\u56fe\u4e24\u79cd\u65b9\u6cd5\u6bd4\u8f83\uff1a\n\n\u660e\u663e\u5806\u4f18\u5316\u7684$Prim(233ms)$\u6bd4$Kruskal(513ms)$\u5feb\uff0c\u65f6\u95f4\u53ea\u6709\u5b83\u7684\u4e00\u534a\uff0c\u4f46$Prim(91.16MB)$\u6d88\u8017\u7684\u5185\u5b58\u6bd4\u662f$Kruskal(9.26MB)$\u7684\u5c06\u8fd1$10$\u500d\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/53479.png)\n\u597d\u50cf\u7528\u8fd9\u4e48\u591a\u5185\u5b58\u6362\u6765\u7684\u65f6\u95f4\u6709\u70b9\u5f97\u4e0d\u507f\u5931\u3002\n\n\u6b63\u662f\u56e0\u4e3a\u5982\u6b64\uff0c\u6709\u65f6\u5927\u5bb6\u8981\u614e\u91cd\u9009\u62e9\u4e24\u79cd\u7b97\u6cd5\uff0c\u751a\u81f3\u666e\u901a$Prim$\u548c\u5806\u4f18\u5316\u7684\u65f6\u95f4\u76f8\u5dee\u65e0\u51e0\u3002\n\n\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b$Kruskal$\u6bd4\u8f83\u4f18\u79c0\uff0c\u80fd\u80dc\u4efb\u7edd\u5927\u591a\u6570\u9898\u76ee\u7684\u3002\n\n\u9644\u4e0a\u4e24\u6b21\u8bc4\u6d4b\u8bb0\u5f55\u8be6\u60c5\uff1a\n\n[\u5806\u4f18\u5316\u7684$Prim$](https://www.luogu.org/recordnew/show/17033651)\n\n[$Kruskal$](https://www.luogu.org/recordnew/show/17031989)",
        "postTime": 1552116140,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "# P2872\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P2872)\n\n## \u9996\u5148\n\n\u9898\u76ee\u6982\u62ec\uff1a\u9898\u76ee\u8ba9\u7740\u6c42\u4f7f\u6240\u6709\u7267\u573a\u90fd\u8054\u901a.\u9700\u8981\u4fee\u5efa\u591a\u957f\u7684\u8def.\n\n\u663e\u7136\u8fd9\u662f\u4e00\u9053\u6700\u5c0f\u751f\u6210\u6811\u677f\u5b50\u9898\uff08\u63a8\u8350\u521d\u5b66\u8005\u505a\uff09.\n\n## \u90a3\u6211\u5c31\u8bf4\u4e00\u4e0bkruskal\u5427.\n\nKruskal\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u6765\u67e5\u627e\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u7531Joseph Kruskal\u57281956\u5e74\u53d1\u8868\u3002\n\n\u7528\u6765\u89e3\u51b3\u540c\u6837\u95ee\u9898\u7684\u8fd8\u6709Prim\u7b97\u6cd5\u548cBoruvka\u7b97\u6cd5\u7b49\u3002\u4e09\u79cd\u7b97\u6cd5\u90fd\u662f\u8d2a\u5fc3\u7b97\u6cd5\u7684\u5e94\u7528\u3002\n\n\u548cBoruvka\u7b97\u6cd5\u4e0d\u540c\u7684\u5730\u65b9\u662f\uff0cKruskal\u7b97\u6cd5\u5728\u56fe\u4e2d\u5b58\u5728\u76f8\u540c\u6743\u503c\u7684\u8fb9\u65f6\u4e5f\u6709\u6548\u3002------- \u6765\u81ea\u4e8e\u767e\u5ea6\u767e\u79d1\n\n### \u4e00\u3001\u57fa\u672c\u601d\u8def\nkruskal\u5229\u7528\u4e86\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5148\u628a\u6bcf\u4e00\u6761\u8fb9\u6309\u7167\u8fb9\u6743\u6392\u4e00\u4e0b\u5e8f\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9.\n\n\u8dd1kruskal\u7684\u65f6\u5019\u5148\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u4e0d\u662f\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u8fb9\uff0c\u5982\u679c\u5728\u90a3\u5c31\u8bf4\u660e\u4e0d\u7528\u518d\u53bb\u8fde\u8fb9\u4e86.\n\n\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u8bb0\u5f55\u8fb9\u6743\uff0c\u5728\u641e\u4e00\u4e2a\u8bb0\u5f55\u52a0\u7684\u8fb9\u6570\u7684\u8ba1\u6570\u5668.\n\n\u5927\u5bb6\u90fd\u77e5\u9053\u4e00\u5f20\u56fe\u5982\u679c\u6709$n$\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u6700\u5c11$n-1$\u6761\u8fb9\u5c31\u53ef\u4ee5\u5427\u8fd9\u5f20\u56fe\u641e\u8054\u901a\u4e86.\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7b49\u5230\u8ba1\u6570\u5668\u7684\u8ba1\u6570\u8bb0\u5230$n-1$ \u7684\u65f6\u5019\u505c\u6b62\u6267\u884c\uff08\u5df2\u7ecf\u5f97\u5230\u6b63\u89e3\uff09.\n\n\u7136\u540e\u56e0\u4e3a\u8fd9$n-1$\u6761\u8fb9\u628a\u56fe\u8fde\u6210\u4e00\u8d77,\u90a3\u4e48\u663e\u7136$n - m$\u6761\u8fb9\u5c31\u53ef\u4ee5\u628a\u56fe\u5206\u6210m\u4e2a\u90e8\u5206\uff08\u5f88\u597d\u60f3\u9e2d\uff09.\u4f8b\u9898\uff1a[P1195](https://www.luogu.org/problem/P1195)\n\n### \u4e8c\u3001\u4ee3\u7801\n```cpp\nfor (int i = 1; i <= cnt; i++) {\n\t\tif (father(edge[i].x) != father(edge[i].y)) {//\u5224\u65ad\u662f\u4e0d\u662f\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\n\t\t\tf++;\n\t\t\tunionn(edge[i].x, edge[i].y);//\u5408\u5e76\n\t\t\tans += edge[i].dis;//\u8bb0\u5f55\u603b\u6743\u503c\n\t\t}\n\t\tif (f == m) break;//\u5982\u679c\u505a\u5b8c\u4e86\uff0c\u90a3\u5c31\u505c\u4e0b\u554a.\n\t}\n```\n\n#### \u6b64\u9898\u4ee3\u7801\u53ca\u601d\u8def\uff1a\n\u56e0\u4e3a\u6709\u4e00\u4e9b\u8fb9\u662f\u4e00\u5f00\u59cb\u5c31\u6709\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5427\u4e00\u5f00\u59cb\u5c31\u6709\u7684\u90a3\u4e9b\u8fb9\u90fd\u8d4b\u503c\u62100\uff0c\u7136\u540e\u7ee7\u7eed\u8dd1kruskal\u5c31\u597d\u4e86.\n\n\u56e0\u4e3a\u7ed9\u51fa\u7684\u662f\u5750\u6807\uff0c\u90a3\u5c31\u5148\u628a\u5750\u6807\u90fd\u5b58\u8d77\u6765\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u5750\u6807\u4f9d\u7167\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u4e24\u4e24\u5efa\u8fb9.\n\n\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f\uff1a$\\sqrt{((x_{1}-x_{2})*(x_{1}-x_{2}) + (y_{1}-y_{2}) * (y_{1}-y_{2}))}$\n\n```cpp\n#include <bits/stdc++.h>\n\n#define N 1000010\n#define M 2010\n\nusing namespace std;\nint fath[M], n, m; bool b[M];\ndouble px[M], py[M];\nstruct node {//\u7ed3\u6784\u4f53\u5b58\u8fb9.\n\tint x, y;\n\tdouble dis;\n}edge[N << 2];\n\nint read() {\n    int s = 0, f = 0; char ch = getchar();\n    while (!isdigit(ch)) f |= (ch == '-'), ch = getchar();\n    while (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n    return f ? -s : s;\n}\n\nint father(int x) {\n\tif (x != fath[x]) fath[x] = father(fath[x]);//\u6c42\u662f\u4e0d\u662f\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\n\treturn fath[x];\n}\n\nvoid unionn(int x, int y) {\n\tint fx = father(x), fy = father(y);//\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\n\tfath[x] = fath[y];\n}\n\nbool cmp(node p, node q) {\n\treturn p.dis < q.dis;//sort\u7528\u54c1\n}\n\nint main() {\n\tn = read(), m = read();\n\tint z = n + m;//\u539f\u672c\u5c31\u6709\u7684\n\tfor (int i = 1; i <= z; i++) fath[i] = i;\n\tint cnt = 0;\n\tfor (int i = 1, x, y; i <= n; i++) {\n\t\tx = read(), y = read();\n\t\tpx[i] = x, py[i] = y;//\u56e0\u4e3a\u7ed9\u51fa\u7684\u662f\u5750\u6807\uff0c\u5148\u628a\u5750\u6807\u5b58\u8d77\u6765.\n\t}\n\tfor (int i = 1; i <= n; i++) fath[i] = 1;\n\tfor (int i = n + 1, x, y; i <= n + m; i++) {\n\t\tx = read(), y = read();\n\t\tpx[i] = x, py[i] = y;\n\t}\n\tfor (int i = 1; i <= n + m; i++) {\n\t\tfor (int j = i + 1; j <= n + m; j++) {//\u5f00\u59cb\u5b58\u8fb9\n\t\t\tcnt++;\n\t\t\tedge[cnt].x = i;\n\t\t\tedge[cnt].y = j;\n\t\t\tedge[cnt].dis = sqrt((px[i] - px[j]) * (px[i] - px[j]) + (py[i] - py[j]) * (py[i] - py[j]));\n\t\t}\n\t}\n\tsort(edge + 1, edge + cnt + 1, cmp);//\u7ed9\u8fb9\u6392\u4e00\u4e0b\u5e8f\n\tint f = 0;\n\tdouble ans = 0;\n\tfor (int i = 1; i <= cnt; i++) {//kruskal\n\t\tif (father(edge[i].x) != father(edge[i].y)) {\n\t\t\tf++;\n\t\t\tunionn(edge[i].x, edge[i].y);\n\t\t\tans += edge[i].dis;\n\t\t}\n\t\tif (f == m) break;\n\t}\n\tprintf(\"%.2lf\", ans);\n}\n```",
        "postTime": 1569675578,
        "uid": 188155,
        "name": "K2sen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "# P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011\n\n\n\n### \u9898\u76ee\u63cf\u8ff0\n\n$Farmer John had just acquired several new farms!$ \n$He wants to connect the farms with roads$ \n$so that he can travel from any farm to any other farm via a sequence of roads;$\n$roads already connect some of the farms.$\n\n$Each of the N (1 \u2264 N \u2264 1,000) farms (conveniently numbered 1..N)$\n$is represented by a position (Xi, Yi) on the plane (0 \u2264 Xi \u2264 1,000,000; 0 \u2264 Yi \u2264 1,000,000).$ \n$Given the preexisting M roads (1 \u2264 M \u2264 1,000) as pairs of connected farms,$\n$help Farmer John determine the smallest length of additional roads he must build to connect all his farms.$\n\n$Farmer John$\u6700\u8fd1\u5f97\u5230\u4e86\u4e00\u4e9b\u65b0\u7684\u519c\u573a\uff0c\u4ed6\u60f3\u65b0\u4fee\u4e00\u4e9b\u9053\u8def\u4f7f\u5f97\u4ed6\u7684\u6240\u6709\u519c\u573a\u53ef\u4ee5\u7ecf\u8fc7\u539f\u6709\u7684\u6216\u662f\u65b0\u4fee\u7684\u9053\u8def\u4e92\u8fbe\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u4efb\u4e00\u4e2a\u519c\u573a\u90fd\u53ef\u4ee5\u7ecf\u8fc7\u4e00\u4e9b\u9996\u5c3e\u76f8\u8fde\u9053\u8def\u5230\u8fbe\u5269\u4e0b\u7684\u6240\u6709\u519c\u573a\uff09\u3002\u6709\u4e9b\u519c\u573a\u4e4b\u95f4\u539f\u672c\u5c31\u6709\u9053\u8def\u76f8\u8fde\u3002 \u6240\u6709$N(1 <= N <= 1,000)$\u4e2a\u519c\u573a\uff08\u7528$1..N$\u987a\u6b21\u7f16\u53f7\uff09\u5728\u5730\u56fe\u4e0a\u90fd\u8868\u793a\u4e3a\u5750\u6807\u4e3a$(X_i, Y_i)$\u7684\u70b9(0 <= X_i <= 1,000,000\uff1b0 <= Y_i <= 1,000,000)\uff0c\u4e24\u4e2a\u519c\u573a\u95f4\u9053\u8def\u7684\u957f\u5ea6\u81ea\u7136\u5c31\u662f\u4ee3\u8868\u5b83\u4eec\u7684\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u73b0\u5728$Farmer John$\u4e5f\u544a\u8bc9\u4e86\u4f60\u519c\u573a\u95f4\u539f\u6709\u7684$M(1 <= M <= 1,000)$\u6761\u8def\u5206\u522b\u8fde\u63a5\u4e86\u54ea\u4e24\u4e2a\u519c\u573a\uff0c\u4ed6\u5e0c\u671b\u4f60\u8ba1\u7b97\u4e00\u4e0b\uff0c\u4e3a\u4e86\u4f7f\u5f97\u6240\u6709\u519c\u573a\u8fde\u901a\uff0c\u4ed6\u6240\u9700\u5efa\u9020\u9053\u8def\u7684\u6700\u5c0f\u603b\u957f\u662f\u591a\u5c11\u3002\n\n### \u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n##### \u8f93\u5165\u683c\u5f0f\uff1a\n* $Line 1: Two space-separated integers: N and M$\n\n* $Lines 2..N+1: Two space-separated integers: Xi and Yi$\n\n* $Lines N+2..N+M+2: Two space-separated integers:$ \n  $i and j, indicating that there is already a road connecting the farm i and farm j.$\n\n\u7b2c$1$\u884c: $2$\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff1a$N$ \u548c $M$\n\n\u7b2c$2..N+1$\u884c: \u7b2c$i+1$\u884c\u4e3a$2$\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff1a$X_i$\u3001$Y_i$\n\n\u7b2c$N+2..N+M+2$\u884c: \u6bcf\u884c\u7528$2$\u4e2a\u4ee5\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570$i$\u3001$j$\u63cf\u8ff0\u4e86\u4e00\u6761\u5df2\u6709\u7684\u9053\u8def\uff0c \u8fd9\u6761\u9053\u8def\u8fde\u63a5\u4e86\u519c\u573a$i$\u548c\u519c\u573a$j$\n\n##### \u8f93\u51fa\u683c\u5f0f\uff1a\n* $Line 1: Smallest length of additional roads required to connect all farms,$\n  $printed without rounding to two decimal places.$\n  $Be sure to calculate distances as 64-bit floating point numbers.$\n\n\u8f93\u51fa\u4f7f\u6240\u6709\u519c\u573a\u8fde\u901a\u6240\u9700\u5efa\u8bbe\u9053\u8def\u7684\u6700\u5c0f\u603b\u957f\uff0c\u4fdd\u7559$2$\u4f4d\u5c0f\u6570\uff0c\u4e0d\u5fc5\u505a \u4efb\u4f55\u989d\u5916\u7684\u53d6\u6574\u64cd\u4f5c\u3002\u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\uff0c\u8ba1\u7b97\u519c\u573a\u95f4\u8ddd\u79bb\u53ca\u7b54\u6848\u65f6 \u8bf7\u4f7f\u7528$64$\u4f4d\u5b9e\u578b\u53d8\u91cf\n\n### \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n##### \u8f93\u5165\u6837\u4f8b#1\uff1a\n$4$ $1$\n\n$1$ $1$\n\n$3$ $1$\n\n$2$ $3$\n\n$4$ $3$\n\n$1$ $4$\n##### \u8f93\u51fa\u6837\u4f8b#1\uff1a\n$4.00$\n### \u8bf4\u660e\n\n##### \u9898\u76ee\u7b80\u8ff0\uff1a\u7ed9\u51fan\u4e2a\u70b9\u7684\u5750\u6807,\u5176\u4e2d\u4e00\u4e9b\u70b9\u5df2\u7ecf\u8fde\u901a,\u73b0\u5728\u8981\u628a\u6240\u6709\u70b9\u8fde\u901a,\u6c42\u4fee\u8def\u7684\u6700\u5c0f\u957f\u5ea6.\n\n\u611f\u8c22@\u777f\u5c7f\u9752\u886b\u4e36 \u63d0\u4f9b\u7ffb\u8bd1\n\n\n\n\u5149\u9634\u4f3c\u7bad\uff0c\u65e5\u6708\u5982\u68ad\u3002\n\n\u65f6\u95f4\u6d41\u901d\uff0c\u5c0f\u83dc\u9e21\u53c8\u53ef\u4ee5\u548c\u5927\u5bb6\u89c1\u9762\u4e86\u3002\n\n\u8fd9\u6b21\uff0c\u6211\u6765\u8bb2\u4e00\u9053\u6bd4\u8f83\u96be\u7684\u9898(\u8fd9\u53ea\u662f\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5bf9\u4e8e$daolao$\u6765\u8bf4\u662f\u6c34\u9898\u3002)\n\n\u5148\u770b\u9898\u76ee\uff1a\n\n\u8bb2\u7684\u662f\u5c06\u6240\u6709\u70b9\u8fde\u901a\uff0c\u8981\u6c42\u82b1\u8d39\u6700\u5c0f\u3002\n\n\u4e00\u770b\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898\uff0c\u53ea\u662f\u6709\u4e9b\u8def\u5df2\u7ecf\u8fde\u901a\u4e86\u3002\n\n\u4e09\u4e0b\u4e94\u9664\u4e8c\uff0c\u5e72\u8106\u5229\u843d\uff0c\u5148\u6253\u51fa\u6a21\u677f\u518d\u6839\u636e\u9898\u76ee\u9700\u8981\u8fdb\u884c\u4fee\u6539\u3002\n\n## \u76f4\u63a5\u8bb2$AC$\u601d\u8def\uff1a\n\n### 1.\u5148\u5c06\u5df2\u6709\u7684\u8def\u8fde\u901a\u8d77\u6765\n\n### 2.\u6ce8\u610f\u5efa\u8fb9\u65f6\u7528\u52fe\u80a1\u5b9a\u7406\uff0c\u5f3a\u5236\u8f6c\u5316$double$\u7c7b\u578b\u3002\n\n### 3.\u5c06\u6240\u6709\u70b9\u8fde\u901a\uff0c\u8981\u52a0\u4e0a\u8fb9\u7684\u503c\uff0c\u6700\u540e\u4fdd\u7559$2$\u4f4d\u8f93\u51fa\u3002\n\n\n\n\n\n\u4e0a$AC$\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>//\u8c03\u7528     scanf\u548cprintf      \u7684\u5e93\n#include<cmath>//\u8c03\u7528     sqrt      \u7684\u5e93\n#include<algorithm>//\u8c03\u7528     sort      \u7684\u5e93\n#include<cstdlib>//\u8c03\u7528     exit      \u7684\u5e93\nusing namespace std;\nconst int mx=1007;//\u5b9a\u4e49mx\u5e38\u91cf\nint n,m,len=0;\nint f[mx];\ndouble ans;//\u8f93\u51fa\u5b9e\u6570\u578b\nstruct noda{int x,y,b;}a[mx];//\u70b9\u7684\u7ed3\u6784\u4f53\nstruct nodb{noda b,e;double v;}e[mx*mx];//\u8fb9\u7684\u7ed3\u6784\u4f53\nbool cmp(nodb a,nodb b) { return a.v<b.v; }//\u6392\u5e8f\u6761\u4ef6\nint init()//\u521d\u59cb\u5316\n{\n    for(int i=1;i<=n;i++)f[i]=i;//\u4e00\u5f00\u59cb\u7684\u8001\u5927\u662f\u81ea\u5df1\n}\nint find(int x)//\u5e76\u67e5\u96c6\n{\n    if(f[x]==x)return x;\n    else return f[x]=find(f[x]);\n}\nvoid ins()//\u5efa\u8fb9\uff0c\u6784\u56fe\n{\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n        \tif(i!=j)\n        \t{\n        \t\tlen++;\n            \te[len].b=a[i],e[len].e=a[j];\n\t\t\t\te[len].v=sqrt((double)(a[i].x-a[j].x)*(double)(a[i].x-a[j].x)+(double)(a[i].y-a[j].y)*(double)(a[i].y-a[j].y));\n                //\u6ce8\u610f\u52fe\u80a1\u5b9a\u7406\uff0c\u5f3a\u5236\u8f6c\u5316$double$\u7c7b\u578b\n        \t}\n\t\t}\n    }\n}\nvoid kruskal()\n{\n    sort(e+1,e+len+1,cmp);//\u6392\u5e8f\n    //\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u53d6\u6700\u5c0f\u8fb9\n    for(int i=1;i<=len;i++)\n    {\n        int tx=find(e[i].b.b);\n\t\tint ty=find(e[i].e.b);\n        //\u627e\u5404\u81ea\u7684\u8001\u5927\n        if(tx!=ty)ans+=e[i].v,f[tx]=ty;\n        //\u8fde\u901a\uff0c\u5e76\u52a0\u4e0a\u8fb9\u7684\u503c\n    }\n    printf(\"%.2lf\",ans);//\u8f93\u51fa\uff0c\u4fdd\u75592\u4f4d\u5c0f\u6570\n    exit(0);//\u76f4\u63a5\u7ed3\u675f\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d%d\",&a[i].x,&a[i].y),a[i].b=i;\n    //\u8f93\u5165\n    init();//\u521d\u59cb\u5316\n    int x,y;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        int tx=find(x);\n\t\tint ty=find(y);\n        f[tx]=ty;\n    }\n    //\u8fde\u901a\u5df2\u6709\u7684\u8fb9\n    ins();//\u5efa\u8fb9\uff0c\u6784\u56fe\n    kruskal();//\u5efa\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\n    return 0;\n}\n```",
        "postTime": 1522764219,
        "uid": 54816,
        "name": "lijiahao2017",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5f88\u5751\n\n---\n\n\u601d\u8def\uff1a\u5148\u8bfb\u5165\u6240\u6709\u7684\u70b9\uff0c\u9884\u5904\u7406\u51fa\u6240\u6709\u7684\u8fb9\u6743\u3002\u518d\u8bfb\u5165\u5df2\u6709\u7684\u8fb9\uff0c\u76f4\u63a5\u5bf9\u5e76\u67e5\u96c6\u8fdb\u884c\u5408\u5e76\uff0c\u6700\u540e\u8dd1\u4e00\u904d$Kruskal$\u5c31\u884c\u4e86\u3002\n\n---\n\n\u4f46\u662f\uff0c\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u5199\u51fa\u4e86\u4e00\u4efd\u5929\u7136\u4e09\u8272\u65d7\u7684\u4ee3\u7801_hua|ji_[\u4f20\u9001\u95e8](https://www.luogu.org/record/show?rid=6096415)\n\n\u8fd9\u662f\u90a3\u4efd\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define maxn 1007\nstruct node{\n    int x,y,b;\n}a[maxn];\nstruct bian{\n    node b,e;\n    double v;\n}e[maxn*maxn];\nint n,m,f[maxn],c,k,top;\ndouble ans;\nbool cmp(bian a,bian b)\n{\n    return a.v<b.v;\n}\ninline void distance()\n{\n    for(register int i=1;i<=n;i++)\n        for(register int j=i+1;j<=n;j++)\n            e[++top].b=a[i],e[top].e=a[j],e[top].v=sqrt((a[i].x-a[j].x)*(a[i].x-a[j].x)+(a[i].y-a[j].y)*(a[i].y-a[j].y));\n}\nint find(int x)\n{\n    return (f[x]==x) ? x : find(f[x]);\n}\ninline void build()\n{\n    for(register int i=1;i<=n;++i) f[i]=i;\n}\ninline void Init()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=n;++i) scanf(\"%d%d\",&a[i].x,&a[i].y),a[i].b=i;\n}\ninline void Work()\n{\n    build();\n    for(register int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&c,&k);\n        int q=find(c),w=find(k);\n        f[w]=q;\n    }\n    distance();\n    sort(e+1,e+top+1,cmp);\n    for(register int i=1;i<=top;i++)\n    {\n        int q=find(e[i].b.b),w=find(e[i].e.b);\n        if(q!=w)\n        {\n            ans+=e[i].v;\n            f[q]=w;\n        }\n    }\n    printf(\"%.2lf\\n\",ans);\n}\nint main()\n{\n    Init();\n    Work();\n    return 0;\n}\n```\n\n---\n\n\u8fc7\u4e86\u4e00min\uff0c\u6211\u610f\u8bc6\u5230\uff0c\u662f\u4e0d\u662f\u6c42\u8ddd\u79bb\u9519\u4e86\uff0c\u7136\u540e\u5728$distance()$\u7684$sqrt$\u4e2d\u52a0\u4e86\u4e00\u4e2a\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5c31A\u6389\u4e86\u3002\n\ncode\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n#define maxn 1007\nstruct node{\n    int x,y,b;\n}a[maxn];\nstruct bian{\n    node b,e;\n    double v;\n}e[maxn*maxn];\nint n,m,f[maxn],c,k,top;\ndouble ans;\nbool cmp(bian a,bian b)\n{\n    return a.v<b.v;\n}\ninline void distance()\n{\n    for(register int i=1;i<=n;i++)\n        for(register int j=i+1;j<=n;j++)\n            e[++top].b=a[i],e[top].e=a[j],e[top].v=sqrt((double)(a[i].x-a[j].x)*(double)(a[i].x-a[j].x)+(double)(a[i].y-a[j].y)*(double)(a[i].y-a[j].y));\n}\nint find(int x)\n{\n    return (f[x]==x) ? x : find(f[x]);\n}\ninline void build()\n{\n    for(register int i=1;i<=n;++i) f[i]=i;\n}\ninline void Init()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(register int i=1;i<=n;++i) scanf(\"%d%d\",&a[i].x,&a[i].y),a[i].b=i;\n}\ninline void Work()\n{\n    build();\n    for(register int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&c,&k);\n        int q=find(c),w=find(k);\n        f[w]=q;\n    }\n    distance();\n    sort(e+1,e+top+1,cmp);\n    for(register int i=1;i<=top;i++)\n    {\n        int q=find(e[i].b.b),w=find(e[i].e.b);\n        if(q!=w)\n        {\n            ans+=e[i].v;\n            f[q]=w;\n        }\n    }\n    printf(\"%.2lf\\n\",ans);\n}\nint main()\n{\n    Init();\n    Work();\n    return 0;\n}\n```",
        "postTime": 1520514231,
        "uid": 28910,
        "name": "\u89c8\u904d\u5343\u79cb",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "# \u56fe\u8bba \u00b7 \u6700\u5c0f\u751f\u6210\u6811\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u672c\u9898\u662f **\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09** \u7684\u6a21\u677f\u9898\uff0c\u4e3b\u8981\u8003\u5bdf\u5bf9\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u7684\u719f\u6089\u7a0b\u5ea6\u3002\n\n\u6700\u5c0f\u751f\u6210\u6811\u6709\u4e24\u79cd\u57fa\u672c\u7684\u7b97\u6cd5\uff0c\u5206\u522b\u662f **\u514b\u9c81\u65af\u5361\u5c14\uff08Kruskal\uff09** \u7b97\u6cd5\u548c **\u666e\u91cc\u59c6(Prim)** \u7b97\u6cd5\u3002\u76f8\u5bf9\u800c\u8a00\uff0c\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u7684\u9002\u7528\u9762\u8f83\u666e\u91cc\u59c6\u66f4\u5e7f\uff0c\u672c\u9898\u89e3\u4ecb\u7ecd\u7684\u7b97\u6cd5\u4e5f\u662f\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u3002\n\n### \u57fa\u672c\u601d\u8def\n\nMST\u6a21\u677f\u9898\u3002\n\n### \u6b65\u9aa4\u8be6\u89e3\n\n\u7528\u7ed3\u6784\u4f53\u5b58\u8fb9\uff0c\u65b9\u4fbf\u6392\u5e8f\u3002\n\n```cpp\nstruct Edge\n{\n\tint u,v;\n\tdouble w;\n} e[1000005];\n```\n\n**\u5e76\u67e5\u96c6** \u6a21\u677f\uff08~~\u4e0d\u77e5\u9053\u7684\u6eda\u56de\u53bb\u5b66\u5e76\u67e5\u96c6~~\uff09\n\n```cpp\nint Find(int x)\n{\n\tif(x==pre[x]) return x;\n\treturn pre[x]=Find(pre[x]);\n}\n```\n\n\u7b97\u8ddd\u79bb\uff08\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff09\n\n```cpp\nfor(int i=1; i<n; i++)\n\tfor(int j=i+1; j<=n; j++) e[++l].u=i,e[l].v=j,e[l].w=(double)sqrt((double)(x[i]-x[j])*(x[i]-x[j])+(double)(y[i]-y[j])*(y[i]-y[j]));\n```\n\u5bf9\u4e8e\u5df2\u6709\u7684\u9053\u8def\uff0c\u5efa\u9020\u82b1\u8d39\u4e3a0\n\n```cpp\ne[++l].u=u,e[l].v=v,e[l].w=0.0;\n```\n\n\u6309\u82b1\u8d39\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n```cpp\nsort(e+1,e+l+1,cmp);\n```\n\n\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\n\n```cpp\nfor(int i=1; i<=l; i++)\n{\n\tif(sum==n-1) break;\n\tint a=Find(e[i].u),b=Find(e[i].v);\n\tif(a==b) continue;\n\tsum++,ans+=e[i].w;\n\tpre[a]=Find(pre[b]);\n}\n```\n\n## \u6807\u7a0b\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,pre[1005],x[1005],y[1005],sum,l;\ndouble ans;\nstruct Edge\n{\n\tint u,v;\n\tdouble w;\n} e[1000005];\nbool cmp(Edge a,Edge b)\n{\n\treturn a.w<b.w;\n}\nint Find(int x)\n{\n\tif(x==pre[x]) return x;\n\treturn pre[x]=Find(pre[x]);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=n; i++) scanf(\"%d%d\",&x[i],&y[i]),pre[i]=i;\n\tfor(int i=1; i<n; i++)\n\t\tfor(int j=i+1; j<=n; j++) e[++l].u=i,e[l].v=j,e[l].w=(double)sqrt((double)(x[i]-x[j])*(x[i]-x[j])+(double)(y[i]-y[j])*(y[i]-y[j]));\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\te[++l].u=u,e[l].v=v,e[l].w=0.0;\n\t}\n\tsort(e+1,e+l+1,cmp);\n\tfor(int i=1; i<=l; i++)\n\t{\n\t\tif(sum==n-1) break;\n\t\tint a=Find(e[i].u),b=Find(e[i].v);\n\t\tif(a==b) continue;\n\t\tsum++,ans+=e[i].w;\n\t\tpre[a]=Find(pre[b]);\n\t}\n\tprintf(\"%.2lf\",ans);\n\treturn 0;\n}\n```\n\n## \u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\n\n\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u539f\u56fe\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u5305\u542b\u539f\u56fe\u4e2d\u7684\u6240\u6709n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u6709\u4fdd\u6301\u56fe\u8fde\u901a\u7684\u6700\u5c11\u7684\u8fb9\u3002\n\n\u6700\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u7528kruskal\uff08\u514b\u9c81\u65af\u5361\u5c14\uff09\u7b97\u6cd5\u6216prim\uff08\u666e\u91cc\u59c6\uff09\u7b97\u6cd5\u6c42\u51fa\u3002\n\n## \u514b\u9c81\u65af\u5361\u5c14\uff08Kruskal\uff09\u7b97\u6cd5 \u00b7 \u57fa\u672c\u601d\u8def\n\n\u5148\u6784\u9020\u4e00\u4e2a\u53ea\u542b n \u4e2a\u9876\u70b9\u3001\u800c\u8fb9\u96c6\u4e3a\u7a7a\u7684\u5b50\u56fe\uff0c\u628a\u5b50\u56fe\u4e2d\u5404\u4e2a\u9876\u70b9\u770b\u6210\u5404\u68f5\u6811\u4e0a\u7684\u6839\u7ed3\u70b9\uff0c\u4e4b\u540e\uff0c\u4ece\u7f51\u7684\u8fb9\u96c6 E \u4e2d\u9009\u53d6\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u82e5\u8be5\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5206\u5c5e\u4e0d\u540c\u7684\u6811\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5b50\u56fe\uff0c\u5373\u628a\u4e24\u68f5\u6811\u5408\u6210\u4e00\u68f5\u6811\uff0c\u53cd\u4e4b\uff0c\u82e5\u8be5\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5df2\u843d\u5728\u540c\u4e00\u68f5\u6811\u4e0a\uff0c\u5219\u4e0d\u53ef\u53d6\uff0c\u800c\u5e94\u8be5\u53d6\u4e0b\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u518d\u8bd5\u4e4b\u3002\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u68ee\u6797\u4e2d\u53ea\u6709\u4e00\u68f5\u6811\uff0c\u4e5f\u5373\u5b50\u56fe\u4e2d\u542b\u6709 n-1 \u6761\u8fb9\u4e3a\u6b62\u3002\n\n------------\n\n\u6211\u662f[\u6ca1\u6709\u8f93\u5165](https://www.luogu.org/space/show?uid=154344)\uff0c\u6211\u4eec\u4e0b\u6b21\u518d\u89c1\uff01",
        "postTime": 1568533560,
        "uid": 154344,
        "name": "\u6ca1\u6709\u8f93\u5165",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5c31\u662f\u514b\u9c81\u65af\u5361\u5c14\n\n\u539f\u6765\u8fde\u597d\u7684\u70b9\u9884\u5904\u7406\u4e00\u4e0b\u5c31\u884c\n\n\u771f\u7684\u597d\u6c34QwQ\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\nuses math;\nvar f:array[1..1000] of longint;\n    x,y:array[1..1000] of longint;\n    a,b:array[1..999000] of longint;\n    v:array[1..999000] of double;\n    n,i,j,k,m,c,d,cc,dd,tot:longint; sum:double;\nfunction find(x:longint):longint;//\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\n    begin\n        if f[x]=x then exit(x)\n            else f[x]:=find(f[x]);\n        exit(f[x]);\n    end;\n    procedure sort(l,r:longint);//\u6309\u8fb9\u6392\u5e8f\n        var i,j,y:longint;    x,wjn:double;\n        begin\n        i:=l;\n        j:=r;\n        x:=v[(l+r) div 2];\n        repeat\n            while v[i]<x do inc(i);\n            while x<v[j] do dec(j);\n            if not(i>j) then\n                begin\n                    y:=a[i];a[i]:=a[j];a[j]:=y;\n                    y:=b[i];b[i]:=b[j];b[j]:=y;\n                    wjn:=v[i];v[i]:=v[j];v[j]:=wjn;\n                    inc(i);\n                    j:=j-1;\n                end;\n        until i>j;\n        if l<j then sort(l,j);\n        if i<r then sort(i,r);\n      end;\n    begin\n        readln(n,m);\n        for i:=1 to n do\n            readln(x[i],y[i]);\n                for i:=1 to n do f[i]:=i;\n        for i:=1 to n do\n        for j:=1 to n do\n            if (i<>j) then\n                begin\n                    inc(tot);\n                    a[tot]:=i;\n                    b[tot]:=j;\n                    v[tot]:=sqrt(double((x[i]-x[j]))**2+double((y[i]-y[j]))**2);\n                                                    //\u7b97\u51fa\u5404\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\n                end;\n        for i:=1 to m do//\u539f\u6765\u5c31\u8fde\u63a5\u7684\u5c31\u653e\u5728\u540c\u4e00\u4e2a\u96c6\u5408\n            begin\n                readln(c,d);\n                cc:=find(c);dd:=find(d);\n                if cc<>dd then\n                    begin\n                        f[cc]:=dd;\n                        inc(k);\n                    end;\n            end;\n        sort(1,tot);//\u6392\u5e8f\n        for i:=1 to tot do//\u88f8\u7684\u514b\u9c81\u65af\u5361\u5c14\n            begin\n                cc:=find(a[i]);dd:=find(b[i]);\n                if cc<>dd then\n                    begin\n                        f[cc]:=dd;\n                        sum:=sum+v[i];\n                        inc(k);\n                    end;\n                if k=n-1 then break;\n            end;\n        writeln(sum:0:2);\n    end.\n\n```",
        "postTime": 1479024053,
        "uid": 6018,
        "name": "\u732a\u732a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "### [$My\\ blog$](https://blog.csdn.net/kkkksc03)\n\n## description:\n\n\u5728\u4e00\u4e2a\u51c6\u5907\u8fde\u8fb9\u7684\u56fe\u4e2d\u5df2\u7ecf\u8fde\u597d\u4e00\u4e9b\u8fb9\uff0c\u95ee\u4f7f\u56fe\u8054\u901a\u6240\u9700\u7684\u6700\u5c0f\u4ef7\u503c\u3002\n\n## solution\uff1a\n\n\u8fd9\u9053\u9898\u548c\u6b63\u5e38\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u5df2\u7ecf\u7ed9\u51fa\u4e86\u4e00\u4e9b\u8fb9\u4e86\u3002\n\n\u4f46\u662f\u5982\u679c\u76f4\u63a5\u628a\u4e24\u4e2a\u70b9\u8fde\u8d77\u6765\u4e0d\u600e\u4e48\u65b9\u4fbf\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\n\u7a81\u7136\u53d1\u73b0\u4e86\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\uff1a\n\n**\u628a\u5df2\u7ecf\u7ed9\u51fa\u7684\u8fb9\u6743\u503c\u7b97\u505a0\u5c31\u884c\u4e86**\n\n~~\u6da8\u59ff\u52bf\u4e86~~\n\n\u4e2a\u4eba\u8ba4\u4e3a\u4ee3\u7801\u5199\u7684\u4e0d\u7b97\u592a\u4e71\uff08\u867d\u7136\u6211\u662f\u5927\u62ec\u53f7\u6362\u884c\u7684\uff0c\u503c\u5f97\u4e00\u770b\uff09\n\n## code:\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nstruct ben\n{\n\tint x,y;\n\tdouble val;\n}a[1000005];\nint cmp(const ben &a,const ben &b)\n{\n\treturn a.val<b.val;\n}\nint fa[5005];\nint find(int x)\n{\n\tif(fa[x]!=x)return fa[x]=find(fa[x]);\n\treturn fa[x];\n}\ndouble sqr(double ww)\n{\n\treturn ww*ww;\n}\ndouble x[1005],y[1005];\ndouble d(int i,int j)\n{\n\treturn sqrt(sqr(x[i]-x[j])+sqr(y[i]-y[j]));\n}\nint main()\n{\n\tint n,m,cnt=0;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%lf%lf\",&x[i],&y[i]);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t{\n\t\t\tdouble tmp=d(i,j);\n\t\t\ta[++cnt].x=i;\n\t\t\ta[cnt].y=j;\n\t\t\ta[cnt].val=tmp;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\ta[++cnt].x=x;\n\t\ta[cnt].y=y;\n\t\ta[cnt].val=0;\n\t}\n\tsort(a+1,a+cnt+1,cmp);\n\tdouble ans=0;\n\tint k=0;\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tint x=find(a[i].x);\n\t\tint y=find(a[i].y);\n\t\tif(x!=y)\n\t\t{\n\t\t\tfa[y]=x;\n\t\t\tans+=a[i].val;\n\t\t\tk++;\n\t\t}\n\t\tif(k==n-1)break;\n\t}\n\tprintf(\"%.2lf\\n\",ans);\n\treturn 0;\n} \n```",
        "postTime": 1571659110,
        "uid": 45475,
        "name": "ShineEternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "## \u3010\u601d\u8def\u3011\n\u6700\u5c0f\u751f\u6210\u6811 + \u5e76\u67e5\u96c6     \n\u5728\u8f6c\u6362\u4e3adouble\u7c7b\u578b\u4e0a\u9762\u82b1\u4e86\u597d\u4e45\u7684\u65f6\u95f4    \n\u4e00\u53ea\u5ffd\u7565\u4e86\u8fd9\u4e2a\u5c0f\u4e1c\u897f     \n \n\u5148\u8bfb\u5165\u6570\u636e     \n\u5c06\u5df2\u7ecf\u8fde\u63a5\u8d77\u6765\u7684\u70b9\u90fd\u5408\u5e76\u8d77\u6765    \n\u5982\u679c\u8fd9\u4e9b\u5c31\u591f\u7528\u4e86    \n\u90a3\u5c31\u8f93\u51fa0    \n\u4e0d\u7136\u5148\u9884\u5904\u7406\u51fa\u6240\u6709\u7684    \n\u6ca1\u6709\u88ab\u8fde\u63a5\u8d77\u6765\u7684\u8fb9   \n\u4e00\u5171\u5c311000*1000\u4e2a   \n\u8fd8\u53ef\u4ee5\u7a0d\u52a0\u4f18\u5316\u6bd4\u5982\u5728\u6ca1\u4e3e\u7684\u65f6\u5019\uff08\u8be6\u89c1\u4ee3\u7801\uff09     \n\u7136\u540e\u5c31\u6210\u4e861\u20141000\u7d2f\u52a0\u8d77\u6765\u90a3\u4e48\u5c31\u662f\u8ddf\u5c11\u4e86\u54e6     \n\u5c06\u4e24\u4e2a\u70b9\u548c\u4ed6\u4fe9\u7b97\u51fa\u6765\u7684\u8ddd\u79bb\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u8d77\u6765    \n\u6392\u4e00\u4e2a\u5e8f    \n\u7136\u540e\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u8dd1\u514b\u9c81\u65af\u5361\u5c14\u5c31\u597d\u4e86    \n\n### \u6ce8\u610f\uff1a   \n\u4e00\u5b9a\u8981\u5728\u6c42\u8ddd\u79bb\u7684\u65f6\u5019\u5c06int\u8f6c\u6362\u4e3adouble    \n\u53ef\u4ee5\u7528\u4e58\u4ee5\u4e00\u4e2a1.0\u6765\u89e3\u51b3       \n\n## \u3010\u5b8c\u6574\u4ee3\u7801\u3011\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm> \n\nusing namespace std;\nconst int Max = 1005;\nint x[Max],y[Max];\nstruct node\n{\n\tint i,j;\n\tdouble v;\n}a[Max * Max]; \nint father[Max * Max];\n\ndouble work(int i,int j)\n{\n\tdouble aa = (x[i] - x[j] * 1.0) * (x[i] - x[j] * 1.0);\n\tdouble bb = (y[i] - y[j] * 1.0) * (y[i] - y[j] * 1.0);//\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 \n\treturn sqrt(aa + bb);\n}\n\nbool cmp(const node x,const node y)\n{\n\treturn x.v < y.v;\n}\n\nint find(int x)\n{\n\tif(father[x] != x)father[x] = find(father[x]);\n\treturn father[x];\n}\n\nvoid hebing(int x,int y)\n{\n\tx = find(x);\n\ty = find(y);\n\tfather[x] = y;\n}\n\nint main()\n{\n\tint n,m;\n\tcin >> n >> m;\n\tfor(register int i = 1;i <= n;++ i)\n\t\tfather[i] = i;\n\tfor(register int i = 1;i <= n;++ i)\n\t\tcin >> x[i] >> y[i];\n\tint qwq,awa;\n\tint js = 0;\n\tfor(register int i = 1;i <= m;++ i)\n\t{\n\t\tcin >> qwq >> awa;\n\t\tif(find(qwq) != find(awa))\n\t\t\thebing(qwq,awa),js ++;\n\t\tif(js == n - 1)break;\n\t}\n\tint jj = 0;\n\tfor(register int i = 1;i <= n;++ i)\n\t\tfor(register int j = i + 1;j <= n;++ j)//\u907f\u514d\u91cd\u590d\u4fdd\u8bc1\u51fa\u73b0\u4e861,2\u4e4b\u540e\u4e0d\u4f1a\u518d\u51fa\u73b02,1,\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f \n\t\t\ta[++ jj].i = i,a[jj].j = j,a[jj].v = work(i,j);\n\tsort(a + 1,a + 1 + jj,cmp);\n\tdouble ans = 0;\n\tfor(register int i = 1;i <= jj;++ i)\n\t{\n\t\tif(find(a[i].i) != find(a[i].j))\n\t\t\thebing(a[i].j,a[i].i),js ++,ans += a[i].v;\n\t\tif(js == n - 1)break;\n\t}\n\tprintf(\"%.2lf\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1571052695,
        "uid": 186489,
        "name": "EarthGiao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "NOIP2018\u540e\u9000\u5751\u7684\u672c\u849f\u84bb\uff0c\u653e\u5bd2\u5047\u56de\u6765\u5237\u6c34\u9898\u627e\u81ea\u4fe1\n\n\u901a\u8bfb\u9898\u76ee\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u9ebb\u70e6\u7684\u662fFJ\u81ea\u505a\u806a\u660e\u5730\u4fee\u4e86\u51e0\u6761\u8def\u3002\n\n\u6240\u4ee5\uff0c\u628a\u90a3\u4e24\u4e2a\u70b9\u770b\u505a\u4e00\u4e2a\u6574\u4f53\uff08\u7f29\u70b9\uff09\u4e0d\u5c31\u884c\u4e86\u5417\n\n\u4e8e\u662f\uff0c\u672c\u849f\u84bb\u76f4\u63a5\u5f00\u59cb\u4e86Tarjan\u7f29\u70b9\uff0c\n\n\u5f53\u65f6\u95f4\u6233\u5728\u6307\u5c16\u4e0a\u6d41\u6dcc\u65f6\uff0c\u6211\u84e6\u7136\u56de\u9996\n\n\u4e0d\u5bf9\u554a\uff0c\u4e00\u9053\u9ec4\u9898\u600e\u4e48\u53ef\u80fd\u8fd9\u4e48\u9ebb\u70e6\u3002\n\n\u63a5\u7740\u68c0\u67e5\u4e86\u4e00\u4e0b\u601d\u8def\u540e\u53d1\u73b0\uff0c\u7f29\u70b9\u2026\u2026\u76f8\u5f53\u4e8e\u628a\u8fb9\u6743\u8d4b\u4e3a0\n\n\u8fd9\u4e2a\u64cd\u4f5c\u600e\u4e48\u8bf4\u4e5f\u7b97\u5de7\u5999\u5427\n\n\u4e8e\u662f\uff0c\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#define db double//\u4e00\u5806double\u61d2\u5f97\u5199 \nusing namespace std;\nconst int maxm=5e5+1001;//1000\u4e2a\u70b9\u53ef\u4ee5\u8fde\u51fa(1000)*(999)/2\u6761\u8fb9 \nconst int maxn=1001;\nint n,m,tot,fat[maxn];\ndb x[maxn],y[maxn],ans;\nstruct node\n{\n\tint next;\n\tint to;\n\tdb dis;\n}edge[maxm];\nbool cmp(node x,node y)\n{\n\treturn x.dis<y.dis;\n}\ninline db dist(db x1,db x2,db y1,db y2)\n{//\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u516c\u5f0f\uff0c\u624d\u5f03\u5751\u4e24\u4e2a\u6708\u7684\u6211\u4e00\u5f00\u59cb\u7adf\u7136\u628aABS\u8bb0\u6210\u4e86\u5f00\u5e73\u65b9 \n\treturn sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)); \n}\ninline void addedge(int from,int to,db dis)\n{\n\tedge[++tot].next=from;\n\tedge[tot].to=to;\n\tedge[tot].dis=dis;\n}\nint find(int x)//\u5e76\u67e5\u96c6 \n{\n\tif(fat[x]==x) return x;\n\tfat[x]=find(fat[x]);\n\treturn fat[x];\n}\nvoid kruskal()//kruskal\u6700\u5c0f\u751f\u6210\u6811\u6a21\u677f\n{\n\tint f1,f2,k=0;\n\tfor(int i=1;i<=n;i++) fat[i]=i;\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\tf1=find(edge[i].next);\n\t\tf2=find(edge[i].to);\n\t\tif(f1!=f2)\n\t\t{\n\t\t\tfat[f1]=f2;\n\t\t\tans+=edge[i].dis;\n\t\t\tk++;\n\t\t\tif(k==n-1) break;\n\t\t}\n\t}\n}\nint main()\n{\n\tint xx,yy;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%lf%lf\",&x[i],&y[i]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&xx,&yy);\n\t\taddedge(xx,yy,0);//\u6bd4\u8f83\u5de7\u5999\u7684\u64cd\u4f5c \n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<i;j++)\n\t\t\taddedge(i,j,dist(x[i],x[j],y[i],y[j]));\n\tsort(edge+1,edge+tot+1,cmp);\n\tkruskal();\n\tprintf(\"%.2f\\n\",ans);//\u6ce8\u610f\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 \n\treturn 0;\n}\n```\n\u505a\u8fc7\u4e00\u9053\u64cd\u4f5c\u66f4\u52a0\u5de7\u5999\u7684\u9898\uff0c\u53eb\u65b0\u7684\u5f00\u59cb\n\nhttp://ybt.ssoier.cn:8088/problem_show.php?pid=1488\n\n\u60f3\u953b\u70bc\u8111\u6d1e\u7684\u540c\u5b66\u53ef\u4ee5\u505a\u4e00\u505a",
        "postTime": 1548571850,
        "uid": 38481,
        "name": "doyo",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "##### ~~\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u591a\u6076\u610f\u8bc4\u5206\u554aqwq\uff0c\u8fd9\u9898\u660e\u660e\u5f88\u6c34\u7684\u8bf4~~\n\n### \u597d\u90a3\u4e48\u6211\u4eec\u9996\u5148\u6765\u770b\u4e00\u4e0b\u9898\u610f\uff0c\u9898\u76ee\u8ba9\u6211\u4eec\u5148\u627e\u4e00\u8fb9\u628a\u9700\u8981\u5efa\u7684\u4e00\u7b49\u516c\u8def\u5148\u5efa\u51fa\u6765~~\uff08\u7b49\u7ea7\u9ad8\u5c31\u662f\u53ef\u4ee5\u4e3a\u6240\u6b32\u4e3a~~\uff0c\u7136\u540e\u518d\u628a\u5269\u4f59\u9700\u8981\u5efa\u7684\u4e8c\u7b49\u516c\u8def\u5efa\u51fa\u6765\n\n#### \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u91cc\u9762\u5f00\u4e24\u4e2adis\u503c\uff0c\u5206\u522b\u4ee3\u8868\u4e00\u7b49\u548c\u4e8c\u7b49\uff0c\u624b\u6253\u4e24\u4e2acmp\uff0c\u6392\u5e8f\u4e4b\u540e\u75af\u72c2\u627e\u5c31\u597d\u4e86qwq\n\n#### \u4f46\u662f\u6ce8\u610f\uff0c\u7531\u4e8e\u9898\u76ee\u8ba9\u6211\u4eec\u8f93\u51fa\u7684\u662f\u65b9\u6848\u548c\u6700\u5927\u503c\uff0c\u800c\u4e0d\u662f\u4ef7\u94b1\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8dd1kruskal\u7684\u65f6\u5019\u8981\u6ce8\u610f\u628a\u6bcf\u4e00\u6b65\u7684\u8fc7\u7a0b\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58\u4e0b\u6765\uff0c\u8fd9\u6837\u6700\u540e\u518d\u7b5b\u4e00\u904d\u5c31\u80fd\u76f4\u63a5\u8f93\u51fa\u5566qwq\n\n##### \u5269\u4e0b\u7684\u4e00\u4e9b\u8fc7\u7a0b\u653e\u5728\u4ee3\u7801\u91cc\u4e86qwq\n\n### \u53e6\u5916\uff0c\u6837\u4f8b\u662f\u9519\u7684qwq\u56e0\u4e3a\u5e8f\u53f7\u56db\u5efa\u7684\u5e94\u8be5\u662f\u4e8c\u7b49\u516c\u8def@lin_toto@chen_zhe\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n\nusing namespace std;\n\nstruct Edge1{\n\tint x,y,dis1,dis2,num;//dis1\u8868\u793a\u4e00\u7b49\uff0cdis2\u8868\u793a\u4e8c\u7b49\n}a1[100001];\n\nint father[100001],k,m,n,maxx=0,k1=0,f[100001][2],m1=0; //f[1]\u8868\u793a\u5efa\u4e00\u7b49\u516c\u8def\u7684\u5e8f\u53f7f[0]\u8868\u793a\u4e8c\u7b49\u7684\u5e8f\u53f7\uff0c\u7ed3\u6784\u4f53\u7684num\u5373\u53ef\u4ee5\u8868\u793a\n\nbool cmp1(Edge1 x,Edge1 y){return x.dis1<y.dis1;}//\u4e00\u7b49\u6392\u5e8f\n\nbool cmp2(Edge1 x,Edge1 y){return x.dis2<y.dis2;}//\u4e8c\u7b49\u6392\u5e8f\n\nint find(int x)//\u627e\u7239\n{\n\tif(father[x]!=x) father[x]=find(father[x]);\n\treturn father[x];\n}\n\nvoid unionn(int x,int y)//\u54b1\u4fe9\u5408\u8d77\u6765\u4e86qwq\uff01\uff01\n{\n\tx=find(x),y=find(y);\n\tfather[x]=y;\n}\n\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&k,&m);\n\tm--;//\u5148\u51cf\u4e00\u597d\u8ba1\u7b97\uff08\u5176\u5b9e\u662f\u6211\u5bb9\u6613\u5fd8\n\tfor(int i=1; i<=n; i++) father[i]=i;//\u521d\u59cb\u5316\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tint x,y,c1,c2;\n\t\tscanf(\"%d%d%d%d\",&x,&y,&c1,&c2);\n\t\ta1[i].x=x; \n\t\ta1[i].y=y;\n\t\ta1[i].dis1=c1;a1[i].dis2=c2;\n\t\ta1[i].num=i;//\u4e00\u5b9a\u628a\u5e8f\u53f7\u5b58\u4e0a\n\t}\n\tsort(a1+1,a1+m+1,cmp1);//\u4e00\u7b49\u5148\u6765\n\tfor(int i=1; i<=m; i++)//\u6807\u51c6\u6700\u5c0f\u751f\u6210\u6811\n\t{\n\t\tif(find(a1[i].x)!=find(a1[i].y))\n\t\t{\n\t\t\tunionn(a1[i].x,a1[i].y);\n\t\t\tk1++;\n\t\t\tf[a1[i].num][1]=1; //\u4fdd\u5b58\u6b64\u65f6\u4f60\u9009\u62e9\u7684\u8fb9\u5e8f\u53f7\n\t\t}\n\t\tif(k1==k)//\u884c\u5566\u4f60\u5efa\u7684\u5dee\u4e0d\u591a\u4e86\u8be5\u5efa\u70b9\u4fbf\u5b9c\u7684\u4e86\n\t\t{\n\t\t\tmaxx=a1[i].dis1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tk1=0;\n\tsort(a1+1,a1+m+1,cmp2);\n\tfor(int i=1; i<=m; i++)//\u4e8c\u7b49\u518d\u8dd1\u4e00\u904d\u6700\u5c0f\u751f\u6210\u6811\n\t{\n\t\tif(find(a1[i].x)!=find(a1[i].y))\n\t\t{\n\t\t\tunionn(a1[i].x,a1[i].y);\n\t\t\tk1++;\n\t\t\tf[a1[i].num][0]=1;\n\t\t}\n\t\tif(k1==n-k-1)\n\t\t{\n\t\t\tmaxx=max(maxx,a1[i].dis2);\n\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",maxx);\n\tfor(int i=1; i<=m; i++) //\u627e\u5e8f\u53f7\u5566\n\t\tif(f[i][1]!=0) printf(\"%d 1\\n\",i);\n\t\telse if(f[i][0]!=0) printf(\"%d 2\\n\",i);\n}\t\t\t\t\n```",
        "postTime": 1540609921,
        "uid": 142007,
        "name": "\u857e\u59c6\u9171QvQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u771f\u7684\u662f\u4ee4\u4eba\u7a92\u606f\uff0cKruskal\u8c03\u4e86\u8d3c\u4e45\u4e00\u76f4RE\uff0c\u6700\u540e\u53d1\u73b0\u6570\u7ec4\u5927\u5c0f\u7a0d\u5fae\u5c11\u4e86\u90a3\u4e48\u4e00\u70b9\u70b9\u3002\uff08\u4e5f\u5c3110\u500d\u5427\u3002\u3002\uff09\n\n\u8a00\u5f52\u6b63\u4f20\uff0c\u6839\u636e\u672c\u4eba\u7684\u5206\u6790\uff08\u4ee5\u53ca\u7b97\u6cd5\u6807\u7b7e\u7684\u63d0\u793a\uff09\uff0c\u8fd9\u662f\u4e00\u9053\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u9898\u76ee\uff0c**\u5f53\u7136\u8981\u6ce8\u610f\u5df2\u7ecf\u6709\u4e00\u4e9b\u8def\u88ab\u5efa\u6210\u4e86\uff0c\u56e0\u6b64\u4ed6\u4eec\u76f4\u63a5\u68070\u5373\u53ef\u3002**\n\n\u4e0b\u9762\u662f\u8fd9\u9053\u9898\u7528\u5230\u4e86\u7684\u6240\u6709\uff08\u5168\u5c40\uff09\u53d8\u91cf\u3002\n\nmaxn, n, m\u5c31\u4e0d\u89e3\u91ca\u4e86\u3002\n\nx[]\u548cy[]\u662f\u7528\u6765\u50a8\u5b58\u519c\u573a\u7684\u5750\u6807\u7684\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4e8c\u7ef4\u6570\u7ec4\u5199\uff0c\u53ea\u662f\u6211\u61d2\u5f97\u6572\u90a3\u4e48\u591a\u5b57\uff08\u8bf4\u8d77\u6765\u5dee\u522b\u4e5f\u4e0d\u5927\uff09\u3002\n\nf\u662f\u5e76\u67e5\u96c6\u4e2d\u50a8\u5b58\u7956\u5148\u7684\u6570\u7ec4\u3002\n\n\u5982\u679c\u6709\u4e0d\u4e86\u89e3\u7684\u5e76\u67e5\u96c6\u7684\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e00\u7247\u8bb2\u89e3\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u5341\u5206\u901a\u4fd7\u6613\u61c2\u3002 [\u4f20\u9001\u95e8](https://www.luogu.org/blog/aaronlee/bing-zha-ji)\n\nf1\u548cf2\u662f\u540e\u9762\u6682\u65f6\u50a8\u5b58\u6709\u9053\u8def\u8fde\u63a5\u7684\u519c\u573a\u7684\u53d8\u91cf\u3002\n\ntop\u662fKruskal\u4e3b\u4f53\u4e2d\u8bb0\u5f55\u6700\u9876\u5c42\u7684\u3002\n\ncnt\u662f\u8bb0\u5f55\u957f\u5ea6\u7684\u3002\n\nans\u6211\u89c9\u5f97\u4e5f\u662f\u5e9f\u8bdd\uff08\u8036\uff0c\u76ae\u8fd9\u4e00\u4e0b\u6211\u5f88\u5f00\u5fc3\uff09\u3002\n\n```cpp\nconst int maxn = 1000001;\n\nint n, m;\nint x[maxn], y[maxn], f[maxn], f1, f2;\nint top = 0, cnt = 0;\ndouble ans = 0;\n```\n\n\u63a5\u4e0b\u6765\u662f\u50a8\u5b58\u4e24\u70b9\u8ddd\u79bb\u7684\u7ed3\u6784\u4f53\uff0c\u4ee5\u53ca\u7ed3\u6784\u4f53\u6392\u5e8f\u3002\n```cpp\nstruct node {\n    int x, y;\n    double val; \n}dis[maxn];\n\nbool cmp(node a, node b) {\n    if(a.val == b.val)\n        return a.x < b.x;\n    return a.val < b.val;  \n}\n```\n\n\u4ee5\u53ca\u5e76\u67e5\u96c6\u6a21\u677f\uff08\u5176\u4e2dfind\u51fd\u6570\u4f7f\u7528\u4e86\u8def\u5f84\u538b\u7f29\uff09\n\n```cpp\nint find(int x) {  \n    int r = x;  \n    while(r != f[r]) r = f[r];  \n    int i = x, j;  \n    while(f[i] != r) {  \n        j = f[i];  \n        f[i] = r;  \n        i = j;  \n    }  \n    return r;  \n}  \n\nvoid merge(int x, int y) {\n\tx = find(x);\n\ty = find(y);\n\tif(x != y) f[y] = x;\n}\n```\n\n\u5076\u5bf9\u4e86\u8fd8\u6709\u6700\u6ca1\u7528\u7684\u51fd\u6570dt\uff0c\u7528\u4e8e\u6c42\u4e24\u70b9\u8ddd\u79bb\u3002\n```cpp\ndouble dt(int x1,int x2,int y1,int y2) {\n    return sqrt(pow(double(x1 - x2), 2) + pow(double(y1 - y2), 2));\n}\n```\n\n\u63a5\u4e0b\u6765\u679c\u65ad\u5f00\u59cb\u4e3b\u51fd\u6570part\u3002\n\n\u8bfb\u5165\u6570\u636e\uff0c\u522b\u5fd8\u4e86\u521d\u59cb\u5316\u5e76\u67e5\u96c6\u3002\n\n```cpp\ncin >> n >> m;\nfor(int i = 1; i <= n; i++) cin >> x[i] >> y[i];\nfor(int i = 1; i <= n; i++) f[i] = i;\nfor(int i = 1; i <= n; i++)\n    for(int j = i + 1; j <= n; j++) {\n        dis[++cnt].x = i;\n        dis[cnt].y = j;\n        dis[cnt].val = dt(x[i], x[j], y[i], y[j]);\n    }\nfor(int i = 1; i <= m; i++) {\n    cin >> f1 >> f2;\n    dis[++cnt].x = f1;\n    dis[cnt].y = f2;\n    dis[cnt].val = 0;\n}\n```\n\n\u7136\u540e\u7ed9dis\u6392\u4e2a\u5e8f\u3002\n\n```cpp\nsort(dis + 1, dis + cnt + 1, cmp);\n```\n\n\u6700\u91cd\u8981\u7684\u90e8\u5206\uff1aKruskal\u6a21\u677f\n\n _Kruskal\u7b97\u6cd5\u5c06\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\u89c6\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u9996\u5148\u5c06\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u63a5\u7740\u6309\u987a\u5e8f\u9009\u62e9\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u5c06\u5b83\u4eec\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\uff0c\u540c\u65f6\u5c06\u8fd9\u6761\u8fb9\u52a0\u5165E\u2019\u3002\u76f4\u5230\u6240\u6709\u7684\u9876\u70b9\u90fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\u65f6\uff0cE\u2019\u5c31\u662f\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u3002_\n \n                         --\u6458\u6284\u81ea\u300aACM\u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u77e5\u8bc6\u4e0e\u5165\u95e8\u300b\n\n```cpp\nfor(int i = 1; i <= cnt; i++) {\n    if(find(dis[++top].x) != find(dis[top].y)) {\n        ans += dis[top].val;\n        merge(dis[top].x, dis[top].y);\n    }\n}\n```\n\n\u6700\u540e\uff0c\u6109\u5feb\u7684\u8f93\u51fa\u7ed3\u679c\u5c31\u597d\u4e86\uff0c\u522b\u5fd8\u4e86\u8981\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002",
        "postTime": 1523634788,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709C++\u7684\u9898\u89e3\u4fbf\u987a\u624b\u53d1\u4e00\u53d1\u3002\n\n\nKruskal\u4e0d\u7528\u5f88\u89e3\u91ca\uff0c\u5c31\u662f\u88f8\u7684\uff0c\u4f30\u8ba1\u5f88\u591a\u4eba\u5361\u5728\u4e00\u4e2a\u70b9\u5c31\u662f\u540e\u97624\u4e2a\n\n\n\u5176\u539f\u56e0\u662f\u7206\u4e86\u6570\u636e\u7c7b\u578b\uff0c\u5728\u6c42\u957f\u5ea6\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u628ax\u4e4b\u5dee\uff0cy\u4e4b\u5dee\u7684\u5e73\u65b9\u9879\u5f3a\u884c\u8f6c\u5316\u6210double \u5426\u5219\u4f1a\u70b8\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int MAXN = 1001;\nint n,m,Father[MAXN],x[MAXN],y[MAXN],Data_Size;\ndouble Ans=0;\ndouble Tmp;\nstruct Node{\n    int u,v;double Dis;\n    bool operator < (Node a) const {return Dis<a.Dis;}\n}Data[MAXN*MAXN];//\u8bb0\u5f55\u8fb9\uff0c\u8fb9\u6570\u6700\u591a\u4e0d\u8d85\u8fc7n^2\nint Find(int t){\n    return t==Father[t]?t:Father[t]=Find(Father[t]);\n```\n}//\u5e76\u67e5\u96c6\n\ndouble length(int a,int b){\n\n    return sqrt((double)(x[a]-x[b])\\*(x[a]-x[b])+(double)(y[a]-y[b])\\*(y[a]-y[b]));\n\n}//\u6c42\u957f\u5ea6\uff0c\u4e00\u5b9a\u8981\u52a0double\n\n\n```cpp\nvoid Ins(int u,int v,double Dis){\n    Data[++Data_Size].u=u;\n    Data[Data_Size].v=v;\n    Data[Data_Size].Dis=Dis;\n```\n}//\u5c06\u6570\u636e\u6dfb\u52a0\u5230\u7ed3\u6784\u4f53\u4e2d\n\n    \n    \n```cpp\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d%d\",&x[i],&y[i]);\n        for(int j=1;j<i;j++)\n            Ins(i,j,length(i,j));\n    }\n    sort(1+Data,1+Data_Size+Data);\n    for(int i=1;i<=n;i++) Father[i]=i;\n    for(int i=1,u,v;i<=m;i++){\n        scanf(\"%d%d\",&u,&v);\n        u=Find(u);v=Find(v);Father[u]=v;\n    }\n    for(int i=1;i<=Data_Size;i++){//kruskal\n        int u=Find(Data[i].u),v=Find(Data[i].v);\n        if(u!=v){\n            Father[u]=v;\n            Ans+=Data[i].Dis;\n        }\n    }\n    printf(\"%.2lf\",Ans);\n    return 0;\n}\n```",
        "postTime": 1484547241,
        "uid": 20116,
        "name": "never_see",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2872 \u3010[USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads\u3011"
    },
    {
        "content": "\u6700\u8fd1\u5728\u5237\u5404\u79cd\u57fa\u7840\u56fe\u8bba&&dp\n# \u8fd9\u662f\u4e00\u9053\u7c7b\u4f3c\u4e8e\u6a21\u677f\u7684\u6700\u5c0f\u751f\u6210\u6811\n\u6211\u6bd4\u8f83\u559c\u6b22\u7528Kruskal\u4f5c\u56fe\u8bba\uff0c\u56e0\u4e3a~~\u4ee3\u7801\u77ed~~\n\n\u597d\u5427\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u539f\u56e0\uff1a\n\n1.Prim\u4e0d\u52a0\u4f18\u5316\u590d\u6742\u5ea6O(n*n),\u800cKruskal\u662f(mlogm),\u76f8\u6bd4\u8f83\u5728\u7a00\u758f\u56fe\u4e2dKruskal\u5f88\u5360\u4f18\u52bf\uff0cPrim\u5219\u5728\u7c7b\u4f3c\u5b8c\u5168\u56fe\u4e2d\u6bd4\u8f83\u597d\uff0c\u4f46\u5728\u5b8c\u5168\u56fe\u4e2d\uff0cKruskal\u6700\u591a\u4e5f\u53ea\u6162\u5341\u51e0\u500d\u3002\n\n2.Prim\u7531\u4e8e\u662f\u7c7b\u4f3c\u4e8eDijkstra\uff0c\u6240\u4ee5\u4e0d\u80fd\u591f\u5904\u7406\u6700\u957f\u8def\uff0c\u800cKruskal\u53ef\u4ee5\u3002\u5982\u4e0b\u9898\uff0cKruskal\u5c31\u65e0\u6cd5\u5b8c\u6210![](https://cdn.luogu.com.cn/upload/pic/71414.png )![](https://cdn.luogu.com.cn/upload/pic/71415.png )\n\n\u5728\u8fd9\u9898\u4e2d\uff0c\u6211\u4eec\u7b80\u5355\u5730\u7528\u6700\u957f\u751f\u6210\u6811\u89e3\u51b3\n\n\u518d\u51cf\u53bb\u603b\u8fb9\u957f\u5c31\u662f\u7b54\u6848\n\n## \u6240\u4ee5\u8fd9\u9898\u5c31\u7528Kruskal\u5427\n\n\u5907\u6ce8\uff1a\u8fd9\u9898\u4e00\u5f00\u59cb\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u9519\u4e86![](https://cdn.luogu.com.cn/upload/pic/71417.png)\n\u76f4\u5230\u770b\u5230\u5b831. ![](https://cdn.luogu.com.cn/upload/pic/71418.png )\nQAQ\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct road\n{\n\tlong long x,y;\n\tlong double val;\n}a[1000009];\nlong long px[1009],py[1009];\nbool used[1009][1009];\nbool cmp(road x,road y)\n{\n\treturn x.val<y.val;\n}\nint f[1009];\nint find(int x)\n{\n\tif(x==f[x])return x;\n\treturn f[x]=find(f[x]);\n}\nint main()\n{\n\tint n,m,b=0;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%lld%lld\",&px[i],&py[i]);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tlong long xx,yy;\n\t\tscanf(\"%lld%lld\",&xx,&yy);\n\t\tused[xx][yy]=1;\n\t\tused[yy][xx]=1;\n\t\ta[++b].x=xx;\n\t\ta[b].y=yy;\n\t\ta[b].val=0;\n\t\ta[++b].x=yy;\n\t\ta[b].y=xx;\n\t\ta[b].val=0;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(used[i][j])continue;\n\t\t\ta[++b].x=i;\n\t\t\ta[b].y=j;\n\t\t\ta[b].val=1*sqrt((px[i]-px[j])*(px[i]-px[j])+(py[i]-py[j])*(py[i]-py[j]));\n\t\t}\n\t\tf[i]=i;\n\t}\n\tsort(a+1,a+b+1,cmp);\n\tdouble ans=0;\n\tfor(int i=1;i<=b;i++)\n\t{\n\t\tif(find(a[i].x)!=find(a[i].y))\n\t\t{\n\t\t\tf[find(a[i].x)]=find(a[i].y);\n\t\t\tans+=a[i].val;\n\t\t}\n\t}\n\tprintf(\"%.2lf\",ans);\n\treturn 0;\n}\n```\n//\u4e3a\u9632\u6b62\u6284\u88ad\uff0c\u6539\u4e86\u4e00\u4e0b\u4ee3\u7801\uff0c\u51fa\u7cbe\u5ea6\u95ee\u9898\u4e0d\u602a\u6211",
        "postTime": 1565578819,
        "uid": 141379,
        "name": "\u73af\u65e5\u52a0\u901f\u5668",
        "ccfLevel": 6,
        "title": "P2872 [USACO07DEC]\u9053\u8def\u5efa\u8bbeBuilding Roads \u9898\u89e3"
    }
]