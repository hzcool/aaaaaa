[
    {
        "content": "\u672c\u9898\u6211\u4eec\u4e0d\u59a8\u628a\u6bcf\u4e2a\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u770b\u505a\u56db\u4e2a\u70b9\u3002\u90a3\u6837\u8fd9\u56fe\u5c31\u6709$4 \\times s$ \u4e2a\u70b9\u3002\n\n\n\u6839\u636e\u9898\u76ee\u63cf\u8ff0\uff0c\u6211\u4eec\u53c8\u77e5\u9053\uff1a\u6bcf\u4e00\u4e2a\u673a\u573a\u90fd\u4e0e\u53e6\u5916\u6bcf\u4e00\u4e2a\u673a\u573a\u4e92\u901a\uff0c\u5dee\u522b\u53ea\u662f\u5728\u662f\u5426\u662f\u540c\u4e00\u4e2a\u57ce\u5e02\uff1a\n\n\n\u5982\u679c\u662f\uff0c\u90a3\u4e48\u53ea\u80fd\u8d70\u9ad8\u901f\u94c1\u8def\uff1b\n\n\n\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u53ea\u80fd\u8d70\u822a\u9053\u3002\u7528\u4e00\u4e2a\u5224\u65ad\u6765\u8ba1\u7b97\u8fd9\u6761\u8def\u7684\u82b1\u8d39\u5373\u53ef\u3002\n\n\n\u6700\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u7b54\u6848\u4e3a\u5230\u8fbe\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u7684\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\nstruct data {\n    int x,y; //(x,y)\n    int city; // \u6240\u5728\u57ce\u5e02\n};\n\nconst int maxn=100;\nint s,t,A,B;\nint T[maxn+1];\ndouble dis[maxn<<2|1];\ndata a[maxn<<2|1];\n\nint pingfang(int x) { return x*x; }\n\n//\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f \ndouble juli(int x1, int y1, int x2, int y2) { return sqrt(pingfang(x1-y1)+pingfang(x2-y2)); }\n\n//\u6c42\u77e9\u5f62\u7684\u7b2c\u56db\u4e2a\u70b9\u7684\u51fd\u6570 \nvoid get_4th(int x1, int y1, int x2, int y2, int x3, int y3, int i) {\n    //\u5df2\u77e5A(x1,y1),B(x2,y2),C(x3,y3)\uff0c\u6c42D(x4,y4) \n    //ab\u8868\u793aAB^2,ac\u8868\u793aAC^2,BC\u8868\u793aBC^2 \n    int ab=pingfang(x1-x2)+pingfang(y1-y2),\n        ac=pingfang(x1-x3)+pingfang(y1-y3),\n        bc=pingfang(x2-x3)+pingfang(y2-y3);\n    int x4,y4;\n    //\u7528\u52fe\u80a1\u5b9a\u7406\u7684\u9006\u5b9a\u7406\uff0c\u5224\u65ad\u8c01\u662f\u76f4\u89d2\u8fb9 \n    //\u518d\u6839\u636e\u77e9\u5f62\u5bf9\u8fb9\u5e73\u884c\u7684\u6027\u8d28\uff0c\u7b97\u51fa\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807 \n    if (ab+ac==bc) x4=x2+x3-x1, y4=y2+y3-y1;\n    if (ab+bc==ac) x4=x1+x3-x2, y4=y1+y3-y2;\n    if (ac+bc==ab) x4=x1+x2-x3, y4=y1+y2-y3;\n    a[i+3].x=x4;\n    a[i+3].y=y4;\n}\n\n//\u521d\u59cb\u5316\u51fd\u6570\u5982\u9898\u610f\u6240\u8ff0 \nvoid init() {\n    memset(a,0,sizeof(a));\n    scanf(\"%d%d%d%d\",&s,&t,&A,&B);\n    //\u5bf9\u6bcf\u4e2a\u57ce\u5e02\u7684\u673a\u573a\u8fdb\u884c\u5904\u7406 \n    for (int i=1; i<=4*s; i+=4) {\n        scanf(\"%d%d%d%d%d%d%d\",&a[i].x,&a[i].y,&a[i+1].x,&a[i+1].y,&a[i+2].x,&a[i+2].y,&T[i/4+1]);\n        a[i].city=a[i+1].city=a[i+2].city=a[i+3].city=i/4+1;\n        //\u8c03\u7528\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\u5750\u6807\u7684\u51fd\u6570 \n        get_4th(a[i].x,a[i].y,a[i+1].x,a[i+1].y,a[i+2].x,a[i+2].y,i);\n    }\n}\n\n//\u6700\u77ed\u8defspfa \nvoid spfa() {\n    //\u961f\u5185\u6709\u6ca1\u6709\u8be5\u5143\u7d20\uff08\u7528\u4e8e\u52a0\u901f\uff09 \n    bool mark[maxn<<2|1];\n    queue <int> q;\n    for (int i=1; i<=4*s; i++) dis[i]=99999999.99999;\n    //\u53ef\u4ee5\u4ece\u51fa\u53d1\u5730\u4efb\u610f\u4e00\u4e2a\u673a\u573a\u51fa\u53d1\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u90fd\u5165\u961f\uff0c\u5e76\u4e14\u82b1\u8d39\u5747\u4e3a0 \n    for (int i=A*4-3;i<=A*4;i++)\n        dis[i]=0, q.push(i), mark[i]=true;\n    \n    //bfs\n    while (!q.empty()) {\n        int x=q.front(); q.pop(); mark[x]=false;\n        //\u8fd9\u4e2a\u673a\u573a\u4e0e\u5176\u4f59\u6240\u6709\u673a\u573a\u90fd\u6709\u901a\u8def \n        for (int i=1; i<=4*s; i++) {\n            if (i==x) continue;\n            //\u82b1\u8d39\u5148\u8d4b\u503c\u4e3a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb \n            double cost=juli(a[x].x,a[i].x,a[x].y,a[i].y);\n            //\u5982\u679c\u4e24\u673a\u573a\u5728\u540c\u4e00\u57ce\u5e02\uff0c\u5219\u8d70\u8be5\u57ce\u5e02\u7684\u9ad8\u901f\u94c1\u8def \n            if (a[i].city==a[x].city) cost*=T[a[i].city];\n            //\u5426\u5219\u5750\u98de\u673a \n            else cost*=t;\n            //\u5982\u679c\u82b1\u8d39\u66f4\u5c11\u5219\u66f4\u65b0 \n            if (dis[x]+cost<dis[i]) {\n                dis[i]=dis[x]+cost;\n                if (!mark[i])\n                    mark[i]=true, q.push(i);\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\",&n);\n    \n    //\u6709\u591a\u7ec4\u6570\u636e \n    while (n--) {\n        init();\n        spfa();\n        //\u7b54\u6848\u662f\u5230\u8fbe\u5730\u56db\u4e2a\u673a\u573a\u4e2d\u82b1\u8d39\u6700\u5c11\u7684\u90a3\u4e2a\n        //\u7528\u201c\u6253\u64c2\u53f0\u201d\u7684\u65b9\u6cd5\u6c42\u51fa\u6700\u5c0f\u503c \n        double ans=dis[B*4];\n        for (int i=B*4-3; i<B*4; i++)\n            if (dis[i]<ans) ans=dis[i];\n        printf(\"%.1lf\",ans);\n    }\n}\n```",
        "postTime": 1516965275,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u5efa\u597d\u56fe\u4ee5\u540eFloyd\uff0c\u7136\u540e\u66b4\u529b\u679a\u4e3e\u548cA\u3001B\u57ce\u5e02\u76f8\u5173\u7684\u70b9\u5373\u53ef\u3002\n\n\u7f16\u7801\u5341\u5206\u949f\uff0c\u8c03\u8bd5\u4e24\u5c0f\u65f6\uff0c\u7ed3\u679c\u53d1\u73b0\u5c45\u7136\u662f\u4e0d\u5c0f\u5fc3\u5199\u9519\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f\u7684\u9505\u3002\n\n## \u5efa\u56fe\u90e8\u5206\uff1a\n\n```cpp\nvoid construct_graph()\n{\n\tmemset(costs, 0x3f, sizeof(costs));\n\tfor (int i = 0; i<points.size(); i++)\n\t{\n\t\tfor (int j = 0; j<points.size(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpoint p1 = points[i], p2 = points[j];\n\t\t\tdouble distance = p1.distance(p2), w = 0.0;\n\t\t\tif (p1.city_id == p2.city_id)\n\t\t\t{\n\t\t\t\tw = distance * p1.t;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tw = distance * double(t);\n\t\t\t}\n\n\t\t\tcosts[i][j] = costs[j][i] = w;\n\t\t}\n\t}\n}\n```\n## \u6c42\u89e3\u90e8\u5206\n\n```cpp\nvoid work_out(void)\n{\n\tcin >> s >> t >> A >> B;\n\tfor (int i = 1; i <= s; i++)\n\t{\n\t\tint x1, y1, x2, y2, x3, y3, T;\n\t\tcin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> T;\n\t\tpoint p1(x1, y1, i, T), p2(x2, y2, i, T), p3(x3, y3, i, T), p4;\n\t\tp4 = get_squre_4th_point(p1, p2, p3);\n\t\tpoints.push_back(p1);\n\t\tpoints.push_back(p2);\n\t\tpoints.push_back(p3);\n\t\tpoints.push_back(p4);\n\t}\n\n\tconstruct_graph();\n\t\n\tfor (int k = 0; k<points.size(); k++)\n\t{\n\t\tfor (int i = 0; i<points.size(); i++)\n\t\t{\n\t\t\tfor (int j = 0; j<points.size(); j++)\n\t\t\t{\n\t\t\t\tcosts[i][j] = min(costs[i][j], costs[i][k] + costs[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\n\tdouble min_val = 0x7fffffff;\n\n\tfor (int i = 0; i<points.size(); i++)\n\t{\n\t\tfor (int j = 0; j<points.size(); j++)\n\t\t{\n\t\t\tif (points[i].city_id == A && points[j].city_id == B)\n\t\t\t{\n\t\t\t\tmin_val = min(min_val, costs[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << std::fixed << std::setprecision(1) << min_val << endl;\n}\n```\n",
        "postTime": 1533916933,
        "uid": 119654,
        "name": "xkzxkzxkz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "### ~~\u53e3\u80e1\u4e94\u5206\u949f\uff0c\u4ee3\u7801\u4e24\u5c0f\u65f6\uff01~~\n\n\u8fd9\u4e2a\u9898\u554a\uff0c\u771f\u662f\u597d\u5199\uff0c\u4e5f\u4e0d\u597d\u5199\u3002\n\n\u597d\u5199\u5462\uff0c\u5728\u4e8e\u5efa\u4e2a\u56fe\uff0c\u518d\u8dd1\u4e00\u904d$Floyd$\uff0c\u6bd4\u8f83\u6700\u5c0f\u503c\uff0c\u5c31\u6ca1\u4e86\n\n\u4e0d\u597d\u5199\u5462\uff0c\u5c31\u5728\u4e8e\uff1a\n\n1.\u6bcf\u4e2a\u77e9\u5f62\u53ea\u7ed9\u4e863\u4e2a\u70b9.....\n\n2.\u4ee3\u7801\u957f\uff08\u53ef\u80fd\u4e0d\u662f\uff09\uff0c\u76f8\u8fd1\u7684\u53d8\u91cf\u591a\uff08\u8fd9\u662f\u6211\uff09\u7b49\u7b49\n\n\u6765\u4e00\u6b65\u4e00\u6b65\u5206\u6790\u5427\u3002\u3002\u3002\n\n### $0.$\u9898\u610f:\n\n~~\uff08\u7565\uff09~~\n\n### $1.$\u5efa\u56fe\n\n#### $(1).$\u627e\u5230\u77e9\u5f62\u7684\u53e6\u5916$1$\u4e2a\u70b9\n\n\u8fd9\u4e2a\u4e1c\u897f\u548b\u627e\u5462\uff1f\u7528\u4ebf\u70b9\u521d\u4e2d\u51e0\u4f55\u77e5\u8bc6\u77e5\u9053\u77e9\u5f62\u662f\u5e73\u884c\u56db\u8fb9\u5f62\uff0c\u800c\u5e73\u884c\u56db\u8fb9\u5f62\u662f\u5bf9\u89d2\u7ebf\u4e92\u76f8\u5e73\u5206\u7684\u3002\n\n\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ohht6xr0.png)\n\n\u5176\u4e2d\uff0c\u70b9$A,B,C$\u4e3a\u8f93\u5165\u7684\u70b9\uff0c$D$\u662f\u6240\u6c42\u7684\u70b9\uff0c\u5bf9\u89d2\u7ebf\u4ea4\u70b9\u4e3a$P$\n\n\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c$BC$\u662f\u4e00\u6761\u5bf9\u89d2\u7ebf\uff0c$AD$\u662f\u53e6\u4e00\u6761\u3002\u6839\u636e\u4e2d\u70b9\u516c\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\n\n $$\\begin{cases}x_P=\\dfrac{x_B+x_C}{2}\\\\x_P=\\dfrac{x_A+x_D}{2}\\end{cases}$$\n$$\\begin{cases}y_P=\\dfrac{y_B+y_C}{2}\\\\y_P=\\dfrac{y_A+y_D}{2}\\end{cases}$$\n\n\u6240\u4ee5\u53ef\u5f97\n$$\\begin{cases}x_D=x_B+x_C-x_A\\\\y_D=y_B+y_C-y_A\\end{cases}$$\n\n\u4e8e\u662f\uff0c \u6211\u4eec\u518d\u7528\u52fe\u80a1\u5b9a\u7406\u5224\u65ad\u4e00\u4e0b\u54ea\u4e24\u4e2a\u70b9\u6784\u6210\u5bf9\u89d2\u7ebf\uff0c\u7136\u540e\u5c31\u80fd\u6c42\u51fa\u8fd9\u4e2a\u70b9\u5566\uff01\n\n#### $(2).$\u5efa\u56fe\n\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u9898\u76ee\u7ed9\u4e86\u4e24\u79cd\u8def\u7ebf\uff0c\u4e00\u79cd\u662f\u57ce\u5e02\u4e4b\u95f4\u7684\u822a\u7a7a\u8def\u7ebf\uff0c\u4e00\u79cd\u662f\u57ce\u5e02\u5185\u90e8\u7684\u516c\u8def\u3002\n\n\u6240\u4ee5\u5efa\u56fe\u7684\u4e3b\u8981\u95ee\u9898\u5c31\u5728\u4e8e\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u5728\u540c\u4e00\u57ce\u5e02\u5185\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\uff0c\u8981\u9760\u4f60\u6807\u70b9\u7684\u65b9\u5f0f\u786e\u5b9a\uff0c\u6b64\u5904\u5c31\u4e3e\u672c\u4eba\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u3002\n\n\u6211\u7684\u60f3\u6cd5\u662f\u7b2c$1$\u4e2a\u57ce\u5e02\u6807\u53f7$1,2,3,4$,\u7b2c$2$\u4e2a\u57ce\u5e02\u6807\u53f7$5,6,7,8$,\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u90a3\u4e48\u8fd9\u4e9b\u70b9\u7684\u6807\u53f7\u4e0e\u5bf9\u5e94\u7684\u57ce\u5e02\u53f7\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\n\n\u7ecf\u8fc7\u7814\u7a76\u53d1\u73b0\uff0c\u82e5\u70b9\u7684\u7f16\u53f7\u4e3a$i$,\u5219\u5b83\u5bf9\u5e94\u7684\u57ce\u5e02\u7f16\u53f7\u5373\u4e3a$(i-1)/4$\uff08\u4e0b\u53d6\u6574\uff09\n\n\u4e8e\u662f\u8fd9\u6837\u5c31\u884c\u4e86\u3002\n\n### $2.$\u6700\u77ed\u8def\n\n$emmm$\uff0c\u4e00\u770b\u6570\u636e\u8303\u56f4\uff0c$s \\leq 100$\n\n\u6240\u4ee5\u6700\u591a\u53ea\u6709$400$\u4e2a\u70b9\uff0c$O(n^3)$\u90fd\u80fd\u8fc7\u3002\n\n\u90a3\u4e48$O(n^3)$\u7684\u6700\u77ed\u8def\u662f\u5565\uff1f$Floyd$\u554a~\n\n\u8dd1\u4e00\u904d$Floyd$\uff0c\u7136\u540e\u6c42\u4e00\u4e0b$A$\u7684\u6bcf\u4e2a\u673a\u573a\u5230$B$\u7684\u6bcf\u4e2a\u673a\u573a\u7684\u6700\u5c0f\u503c\u5c31\u8fc7\u4e86~\n\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define f(i,a,b) for(int i=a;i<=b;i++)\nconst ll inf=0x7f7f7f7f;\nll s,A,B,TTT;\ndouble ans=inf,t,dis[410][410];\ndouble x[410],y[410],T[110];\ndouble diss(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}\ndouble ds(double x1,double y1,double x2,double y2){return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);}\nint main() {\n    scanf(\"%lld\",&TTT);\n    while(TTT--){\n        memset(dis,0,sizeof(dis)),ans=inf;\n        scanf(\"%lld%lf%lld%lld\",&s,&t,&A,&B);\n        f(i,1,s){\n            scanf(\"%lf%lf%lf%lf%lf%lf%lf\",&x[(i-1)*4+1],&y[(i-1)*4+1],&x[(i-1)*4+2],&y[(i-1)*4+2],&x[(i-1)*4+3],&y[(i-1)*4+3],&T[i]);\n            double dab=ds(x[(i-1)*4+1],y[(i-1)*4+1],x[(i-1)*4+2],y[(i-1)*4+2]);\n            double dac=ds(x[(i-1)*4+1],y[(i-1)*4+1],x[(i-1)*4+3],y[(i-1)*4+3]);\n            double dbc=ds(x[(i-1)*4+2],y[(i-1)*4+2],x[(i-1)*4+3],y[(i-1)*4+3]);\n            if(dab+dac==dbc)x[i*4]=x[(i-1)*4+2]+x[(i-1)*4+3]-x[(i-1)*4+1],y[i*4]=y[(i-1)*4+2]+y[(i-1)*4+3]-y[(i-1)*4+1];else\n            if(dab+dbc==dac)x[i*4]=x[(i-1)*4+1]+x[(i-1)*4+3]-x[(i-1)*4+2],y[i*4]=y[(i-1)*4+1]+y[(i-1)*4+3]-y[(i-1)*4+2];else\n            if(dbc+dac==dab)x[i*4]=x[(i-1)*4+2]+x[(i-1)*4+1]-x[(i-1)*4+3],y[i*4]=y[(i-1)*4+2]+y[(i-1)*4+1]-y[(i-1)*4+3];\n        }\n        f(i,1,s*4)f(j,1,s*4)if(i!=j){\n                if((i-1)/4!=(j-1)/4)dis[i][j]=t*diss(x[i],y[i],x[j],y[j]);\n                else dis[i][j]=T[(i-1)/4+1]*diss(x[i],y[i],x[j],y[j]);\n            }\n        f(k,1,s*4)f(i,1,s*4)f(j,1,s*4)dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n        f(i,1,4)f(j,1,4)ans=min(ans,dis[(A-1)*4+i][(B-1)*4+j]);\n        printf(\"%.1lf\\n\",ans);\n    }\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1596181607,
        "uid": 90706,
        "name": "_jimmywang_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problem/P1027)\n\n\u8427\u8427\u6c5f\u4e0a\u837b\u82b1\u79cb\uff0c\u505a\u5f04\u8bb8\u591a\u6101\u3002\n\n\u534a\u7aff\u843d\u65e5DEBUG\uff0c\u4e24\u884c\u65b0\u96c1\uff0c\u4e00\u53f6\u6241\u821f\u3002\n\n\u60dc\u5206\u957f\u6015\u541bWA\uff0c\u76f4\u5f85\u5168A\u9189\u65f6\u4f11\u3002\n\n\u4eca\u5bb5\u773c\u5e95\uff0c\u660e\u671d\u5fc3\u4e0a\uff0c\u540e\u65e5\u7709\u5934\u3002\u4e24\u884c\u6cea\uff01\n\n\u51fa\u81ea\u5b8b\u4ee3\u8d3a\u94f8\u7684\u300a\u773c\u513f\u5a9a\u00b7\u8427\u8427\u6c5f\u4e0a\u837b\u82b1\u79cb\u300b\n\n\u53ef\u8c13\u7a0b\u5e8f20\u5206\u949f\uff0cDEBUG 2\u5c0f\u65f6\u554a\uff01\uff01\uff08\u75db\u54ed\uff09\n\n\u624e\u773c\u4e00\u770b\uff0c\u8fd9\u4e0d\u5c31\u662f\u6700\u77ed\u8def\u5417\uff1f\u800c\u4e14\u624d100\u4e2a\u70b9\n\n\uff08\u5fc3\u91cc\u60f3\u8fd9\u9898\u76ee\u4e5f\u80fd\u662f\u84dd\u9898\uff1f\uff09\n\n\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u9898\u76ee\uff0c\u53ea\u6709\u6211\u4eec\u5efa\u597d\u56fe\uff0c\u4e00\u5207\u5927\u4e8b\u641e\u5b9a\uff01\n\n\u5efa\u56fe\u4e5f\u4e0d\u96be\u60f3\u5230\u6211\u4eec\u53ef\u4ee5\u628as\u4e2a\u70b9\u6269\u5c55\u5230s*4\n\n\u8fd9\u6837\u7b2c\u4e00\u4e2a\u57ce\u5e02\u5c31\u662f[1,4],\u7b2c\u4e8c\u4e2a\u57ce\u5e02\u5c31\u662f[2,5];\u4ee5\u6b64\u7c7b\u63a8\n\n\u6bd2\u7624\u7684\u9898\u76ee\u7adf\u7136\u53ea\u544a\u8bc9\u4f60\u4e09\u4e2a\u70b9\uff0c\u8fd8\u6709\u6211\u4eec\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\uff0c\u6570\u5b66\u849f\u84bb\u7684\u6211\u745f\u745f\u53d1\u6296!\u8d76\u7d27\u767e\u5ea6\u4e86\u4e00\u4e0b\u5728\u76f4\u89d2\u7cfb\u4e2d\u5bf9\u89d2\u7ebf\u4e0a\u70b9\u7684\u6a2a\u7eb5\u5750\u6807\u548c\u76f8\u7b49\u6211\u4eec\u53ea\u6709\u5224\u65ad\u51fa\u76f4\u89d2\u5c31\u4e07\u4e8b\u5927\u5409\u4e86\uff01\uff01\n\n\n\u53ef\u60dc\uff0c\u60f3\u8981A\u6389\u8fd8\u8981\u5f88\u591a\u5fae\u64cd\uff0c\u5728\u4ee3\u7801\u4e2d\u4e00\u4e00\u5c55\u793a\uff01\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#define maxn 200002\n#define I return\n#define LIKE 0\n#define luogu ;\nusing namespace std;\nstruct tnode{\n    int x,y;\n    int city;//x\u4ee3\u8868\u57ce\u5e02\u6a2a\u5750\u6807\uff0cy\u4ee3\u8868\u7eb5\u5750\u6807\uff0ccity\u4ee3\u8868\u5b83\u6240\u5c5e\u7684\u57ce\u5e02 \n}edge[maxn];\nint s,t,A,B;\ndouble f[20002];//\u5b58\u706b\u8f66\u8d39\u7528\uff08\u6ce8\u610f\u5b58\u7684\u662f\u57ce\u5e02\u91cc\u7684\uff09 \ndouble fll[1001][1001];//\u7b49\u4f1a\u513f\u5efa\u56fe \ndouble fac(int x) { \n    return x*x; \n}\ndouble distan(int x1, int y1, int x2, int y2) { \n       return 1.0*sqrt(1.0*fac(x1-x2)+1.0*fac(y1-y2)); \n}\nvoid universe(int x1,int y1,int x2,int y2,int x3,int y3,int i) {\n    int ab=fac(x1-x2)+fac(y1-y2);\n    int bc=fac(x2-x3)+fac(y2-y3);\n\tint ac=fac(x1-x3)+fac(y1-y3);\n    int x4,y4; //\u6c42\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5148\u5224\u65ad\u51fa\u76f4\u89d2\uff0c\u7136\u540e\u5c31\u597d\u529e\u4e86 \n    if (ab+ac==bc) x4=x2+x3-x1, y4=y2+y3-y1;\n    if (ab+bc==ac) x4=x1+x3-x2, y4=y1+y3-y2;\n    if (bc+ac==ab) x4=x1+x2-x3, y4=y1+y2-y3;\n    edge[i+3].x=x4;//\u5b58\u5165\u7b2c\u56db\u4e2a\u70b9\u91cc \n    edge[i+3].y=y4;\n}\ndouble mon(tnode x1,tnode x2){//\u8bfb\u5165\u8bd5\u5148\u5df2\u7ecf\u51c6\u5907\u597d\u5fae\u64cd\uff0c\u6240\u4ee5\u8c03\u7528\u5f88\u7b80\u5355 \n\tdouble juli=distan(x1.x,x1.y,x2.x,x2.y);\n\tif(x1.city==x2.city) return 1.0*juli*f[x1.city];\n\treturn 1.0*juli*t;\n}\nint main() {\n    int n;\n\tdouble ans=29292992.0;\n    scanf(\"%d\",&n);\n    while(n--){\n    \tmemset(fll,98,sizeof(fll));//\u6ce8\u610f\u4e00\u5b9a\u662f98,(\u597d\u50cf\u6ca1\u6709\u4e5f\u6ca1\u95ee\u9898\uff09 \n        memset(edge,0,sizeof(edge));\n        scanf(\"%d%d%d%d\",&s,&t,&A,&B);\n        for (int i=1; i<=4*s; i=i+4) {//\u8bfb\u5165\u5fae\u64cd\uff0c\u6269\u5c55\u70b9\u540e\uff0ccity\u5b58\u50a8\u539f\u6765\u7684\u70b9 \n            scanf(\"%d%d%d%d%d%d%lf\",&edge[i].x,&edge[i].y,&edge[i+1].x,&edge[i+1].y,&edge[i+2].x,&edge[i+2].y,&f[i/4+1]);\n            edge[i].city=edge[i+1].city=edge[i+2].city=edge[i+3].city=i/4+1;\n            universe(edge[i].x,edge[i].y,edge[i+1].x,edge[i+1].y,edge[i+2].x,edge[i+2].y,i);\n        }\n        for(int i=1;i<=s*4;i++)//\u5efa\u56fe\u521d\u59cb\u5316 \n           for(int j=1;j<=s*4;j++)\n           \t    fll[i][j]=1.0*mon(edge[i],edge[j]);\n        for(int k=1;k<=s*4;k++)//\u6807\u51c6\u5f17\u6d1b\u4f0a\u5fb7 \n           for(int i=1;i<=s*4;i++)\n              if(i!=k)\n              for(int j=1;j<=s*4;j++)\n                 if(i!=j&&j!=k){\n                 \tif(fll[i][j]>fll[i][k]+fll[k][j])\n                 \t   fll[i][j]=fll[i][k]+fll[k][j];\n\t\t\t\t}\n\t\t\t\t//\u5728\u8d77\u70b9\u548c\u7ec8\u70b9\u56db\u4e2a\u70b9\u4e2d\u5bfb\u627e\u6700\u5c0f\u503c \n\t\tfor(int i=A*4-3;i<=A*4;i++)\n\t\t   for(int j=B*4-3;j<=B*4;j++){\n\t\t   \t  if(fll[i][j]<ans) ans=fll[i][j];\n\t\t   }\n\t\tprintf(\"%.1lf\",ans);\n    }\n    I LIKE luogu\n}\n```\n\n\n",
        "postTime": 1569138234,
        "uid": 175045,
        "name": "ywjzxx",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "$2020.6.14\\;\\;update$\n\n\u8865\u4e86\u4e00\u4e0b$L_{A^{T_{E^X}}}$\u7684\u9505\n\n[\u70b9\u51fb\u8fd9\u91cc](https://www.luogu.org/problem/P1027)\u4f20\u9001\u5230\u9898\u76ee\n\n~~\u9996\u5148\uff0c\u8ba9\u6211\u9a82\u4e00\u53e5\u90a3\u6ca1\u4e8b\u627e\u4e8b\u7684Car~~\n~~\u8fd8\u53d6\u4e00\u4e2a\u90a3\u4e48\u5947\u602a\u7684\u540d\u5b57~~\n\u770b\u5230\u8fd9\u4e2a\u9898\uff0c~~\u6055\u6211\u76f4\u8a00~~\uff0c\u6211\u4eec\u660e\u663e\u53ef\u4ee5\u770b\u51fa\u8fd9\u662f\u4e00\u9053\u56fe\u7684\u6700\u77ed\u8def\u95ee\u9898\u3002\u7531\u4e8e\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff08$s$\u53ea\u6709100\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u6211\u4eec\u9009\u53d6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^3)$\u7684$Floyd$~~\u4e3b\u8981\u662f\u597d\u5199~~\u3002\n\n\u76f8\u4fe1\u5927\u5bb6\u90fd\u60f3\u5f97\u5230\u8fd9\u4e9b\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u6700\u5927\u7684\u96be\u70b9\u5728**\u9884\u5904\u7406**~~\u6240\u4ee5\u6211\u521a\u624d\u8bf4\u4e86\u4e00\u5927\u5806\u5e9f\u8bdd~~\uff0c\u9488\u5bf9\u4ed6\u7ed9\u51fa\u7684\u6bcf\u4e2a\u57ce\u5e02\uff0c\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5904\u7406\u5462?\n\n\u9996\u5148\u662f\u8bfb\u5165\n```cpp\n\tint a,b;\n\tscanf(\"%d%d%d%d\",&n,&tf,&a,&b);\n\tfor(int i=1;i<=4*n;i++)\n\t  for(int j=1;j<=4*n;j++)\n\t\t    e[i][j]=inf;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=6;j++)\n\t\t\t  scanf(\"%d\",wz[i]+j);\n\t\t\tfor(int j=1;j<=5;j+=2)\n\t\t\t{\n\t\t\t\twz[i][7]+=wz[i][j];\n\t\t\t\twz[i][8]+=wz[i][j+1];\n\t\t\t}\n\tscanf(\"%d\",wz[i]+9);\n```\n\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2a$wz[][]$\u6570\u7ec4\uff0c$wz[i][j](j=1,3,5,7)$\u8868\u793a\u7b2ci\u5ea7\u57ce\u5e02\u7684\u56db\u4e2a\u70b9\u7684\u6a2a\u5750\u6807\uff0c$wz[i][j](j=2,4,6,8)$\u8868\u793a\u7b2ci\u5ea7\u57ce\u5e02\u7684\u56db\u4e2a\u70b9\u7684\u7eb5\u5750\u6807\uff0c\u800c$j=9$\u5219\u662f\u8def\u8d39\u3002\n\n\u5176\u4e2d$wz[i][7]$\u4e0e$wz[i][8]$\u662f\u8981\u53bb\u8ba1\u7b97\u7684\u3002\n\u800c\u600e\u4e48\u7b97\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u516c\u5f0f$x_d=x_a+x_b-x_c$ ($y$\u7c7b\u4f3c)\uff08\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5df2\u77e5\u7684\u4e09\u70b9\u80af\u5b9a\u662f\u4e00\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u800c\uff08$x_a$\uff0c$y_a$\uff09\u662fTA\u7684\u76f4\u89d2\u9876\u70b9\uff0c\uff08$x_d$\uff0c$y_d$\uff09\u4fbf\u662fTA\u6240\u5bf9\u7684\u70b9\u3002\u516c\u5f0f\u8bc1\u660e\u7559\u7ed9\u8bfb\u8005\u53bb\u601d\u8003\u3002\u63d0\u793a\uff1a\u5229\u7528\u4e24\u5bf9\u89d2\u7ebf\u4ea4\u70b9\u662f\u4e2d\u70b9\uff0c\u7136\u540e\u4f7f\u7528\u4e2d\u70b9\u5750\u6807\u516c\u5f0f\u3002\uff09\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053\u8c01\u662f\u76f4\u89d2\u9876\u70b9\uff0c\u8fd9\u91cc\u5f88\u660e\u663e\u53ef\u4ee5\u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u89e3\u3002\uff08\u5f53\u7136\u8fd8\u53ef\u4ee5\u4f7f\u7528\u659c\u7387\u4e58\u79ef\u7b49\u4e8e-1\uff0c\u4f46\u4f5c\u8005\u8840\u4e0e\u6cea\u7684\u6559\u8bad\u8fd8\u662f\u5efa\u8bae\u4f60\u4e0d\u8981\u5c1d\u8bd5\u3002~~\u4e5f\u53ef\u80fd\u662f\u6211\u592a\u83dc\u4e86~~\uff09\n\n\u8ba1\u7b97\u4ee3\u7801\n\n```cpp\ndouble tp[3];\nint tp2=inf,tp3;\ntp[0]=dist1(wz[i][4],wz[i][6],wz[i][3],wz[i][5]);\ntp[1]=dist1(wz[i][2],wz[i][6],wz[i][1],wz[i][5]);\ntp[2]=dist1(wz[i][2],wz[i][4],wz[i][1],wz[i][3]);\nif(tp[0]+tp[1]==tp[2]){//\u6211\u5728\u4e4b\u524d\u628awz[i][7]\u5904\u7406\u6210wz[i][1,3,5]\u7684\u548c\uff0c\n//\u8fd9\u91cc\u76f4\u63a5\u51cf\u4e24\u500d\u6a2a\u7eb5\u5750\u6807\n\twz[i][7]-=2*wz[i][5];wz[i][8]-=2*wz[i][6];\n}\nelse if(tp[1]+tp[2]==tp[0]){\n\twz[i][7]-=2*wz[i][1];wz[i][8]-=2*wz[i][2];\n}\nelse if(tp[0]+tp[2]==tp[1]){\n\twz[i][7]-=2*wz[i][3];wz[i][8]-=2*wz[i][4];\n}\n}\n```\n\u8fd9\u662f$dist1$\u51fd\u6570\n\n```cpp\ndouble dist(int a,int b,int c,int d){\n\treturn sqrt((a-b)*(a-b)*1.0+1.0*(c-d)*(c-d));\n}\n```\n\u7136\u540e\u679a\u4e3e\u6784\u9020\u67d0\u57ce\u5e02\u4e4b\u95f4\u98de\u673a\u573a\u7684\u8fb9\u3002\uff08\u8fd9\u91cc\u6211\u628a\u57ce\u5e02\u91cc\u7684\u6bcf\u4e2a\u9876\u70b9\u5f53\u4e00\u4e2a\u70b9\uff09\n\n```cpp\nfor(int i=1;i<=n;i++)\n{\n\tfor(int j=1;j<=4;j++)\n\t  for(int k=j;k<=4;k++)\n\t\t{\n\t\t\tint u=(i-1)*4+j,v=(i-1)*4+k;//\u8bb0\u5f97\u51cf\u4e00\n\t\t\tdouble dis=dist(wz[i][j*2-1],wz[i][k*2-1],wz[i][j*2],wz[i][k*2]);\n\t\t\te[u][v]=e[v][u]=dis*wz[i][9];\n\t\t}\n}\n```\n$dist$\u51fd\u6570\uff08\u4e0e$dist1$\u7684\u552f\u4e00\u533a\u522b\u5c31\u662f\u5f00\u4e86\u6839\u53f7\uff09\n\n```cpp\ndouble dist(int a,int b,int c,int d){\n\treturn sqrt((a-b)*(a-b)*1.0+1.0*(c-d)*(c-d));\n}\n```\n\u63a5\u4e0b\u6765\u4fbf\u662f\u57ce\u5e02\u95f4\u6700\u77ed\u8ddd\u79bb\u7684\u4ee3\u7801\n\n```cpp\nfor(int i=1;i<=n;i++)\n  for(int j=1;j<=n;j++)\n    if(i!=j){//\u5173\u952e\uff01\uff01\uff01\u4f5c\u8005\u8c03\u4e86\u4e00\u5c0f\u65f6(\u252c\uff3f\u252c)\n  \tfor(int k=1;k<=4;k++)\n  \t  for(int l=1;l<=4;l++)\n  \t    {\n  \t    \tint u=(i-1)*4+k,v=(j-1)*4+l;\n\t\tdouble dis=dist(wz[i][k*2-1],wz[j][l*2-1],wz[i][k*2],wz[j][l*2]);\n\t\te[u][v]=dis*tf;\n\t    }\n      }\n```\n\u7136\u540e\u4fbf\u662f\u6211\u4eec\u671f\u5f85\u5df2\u4e45\u7684$Floyd$\n\n```cpp\nfor(int k=1;k<=n*4;k++)\n  for(int i=1;i<=n*k;i++)\n    for(int j=1;j<=n*4;j++)\n      if(e[i][j]>e[i][k]+e[k][j])\n          e[i][j]=e[i][k]+e[k][j];\n```\n\u6700\u540e\u679a\u4e3e\u8d77\u70b9\u7ec8\u70b9\uff0c\u627e\u5230\u6700\u77ed\u8def\n\n```cpp\ndouble ans=inf;\nfor(int i=(a-1)*4+1;i<=a*4;i++)\n  for(int j=(b-1)*4+1;j<=b*4;j++)\n    ans=min(ans,e[i][j]);\nprintf(\"%.1lf\",ans);\n```\n\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\n\n~~\u5bb3\u6211\u8c03\u4e86\u534a\u5929\uff0c\u4e07\u6076\u7684Car~~\n\n\u6700\u540e\u7ed9\u51fa\u5b8c\u6574\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100005,maxm=500005,inf=0x3f3f3f3f;\ndouble e[1005][1005];\nint wz[1005][11];\nint n,tf;\ndouble dist(int a,int b,int c,int d){\n\treturn sqrt((a-b)*(a-b)*1.0+1.0*(c-d)*(c-d));\n}\ndouble dist1(int a,int b,int c,int d){\n\treturn (a-b)*(a-b)*1.0+1.0*(c-d)*(c-d);\n}\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d%d%d\",&n,&tf,&a,&b);\n\t\tfor(int i=1;i<=4*n;i++)\n\t\t  for(int j=1;j<=4*n;j++)\n\t\t    e[i][j]=inf;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=6;j++)\n\t\t\t  scanf(\"%d\",wz[i]+j);\n\t\t\tfor(int j=1;j<=5;j+=2)\n\t\t\t{\n\t\t\t\twz[i][7]+=wz[i][j];\n\t\t\t\twz[i][8]+=wz[i][j+1];\n\t\t\t}\n\t\t\tscanf(\"%d\",wz[i]+9);\n\t\t\tdouble tp[3];\n\t\t\tint tp2=inf,tp3;\n\t\t\ttp[0]=dist1(wz[i][4],wz[i][6],wz[i][3],wz[i][5]);\n\t\t\ttp[1]=dist1(wz[i][2],wz[i][6],wz[i][1],wz[i][5]);\n\t\t\ttp[2]=dist1(wz[i][2],wz[i][4],wz[i][1],wz[i][3]);\n\t\t\tif(tp[0]+tp[1]==tp[2]){\n\t\t\t\twz[i][7]-=2*wz[i][5];wz[i][8]-=2*wz[i][6];\n\t\t\t}\n\t\t\telse if(tp[1]+tp[2]==tp[0]){\n\t\t\t\twz[i][7]-=2*wz[i][1];wz[i][8]-=2*wz[i][2];\n\t\t\t}\n\t\t\telse if(tp[0]+tp[2]==tp[1]){\n\t\t\t\twz[i][7]-=2*wz[i][3];wz[i][8]-=2*wz[i][4];\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=4;j++)\n\t\t\t  for(int k=j;k<=4;k++)\n\t\t\t\t{\n\t\t\t\t\tint u=(i-1)*4+j,v=(i-1)*4+k;\n\t\t\t\t\tdouble dis=dist(wz[i][j*2-1],wz[i][k*2-1],wz[i][j*2],wz[i][k*2]);\n\t\t\t\t\te[u][v]=e[v][u]=dis*wz[i][9];\n\t\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t  for(int j=1;j<=n;j++)\n\t\t    if(i!=j){\n\t\t  \tfor(int k=1;k<=4;k++)\n\t\t  \t  for(int l=1;l<=4;l++)\n\t\t  \t    {\n\t\t  \t    \tint u=(i-1)*4+k,v=(j-1)*4+l;\n\t\t\t\t\tdouble dis=dist(wz[i][k*2-1],wz[j][l*2-1],wz[i][k*2],wz[j][l*2]);\n\t\t\t\t\te[u][v]=dis*tf;\n\t\t\t\t  }\n\t\t  }\n\t\tfor(int k=1;k<=n*4;k++)\n\t\t  for(int i=1;i<=n*k;i++)\n\t\t    for(int j=1;j<=n*4;j++)\n\t\t      if(e[i][j]>e[i][k]+e[k][j])\n\t\t          e[i][j]=e[i][k]+e[k][j];\n\t\tdouble ans=inf;\n\t\tfor(int i=(a-1)*4+1;i<=a*4;i++)\n\t\t  for(int j=(b-1)*4+1;j<=b*4;j++)\n\t\t    ans=min(ans,e[i][j]);\n\t\tprintf(\"%.1lf\",ans);\n\t}\n\treturn 0;\n}\n```\n\n~~\u7a9d\u5f53\u5e74\u7684\u9a6c\u8702\u662f\u4e0d\u662f\u6709\u70b9\u6bd2\u7624~~\n",
        "postTime": 1575020891,
        "uid": 199750,
        "name": "\u8bd5\u8bd5\u4e8b\u5b9e\u4e0a\u5417",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4ee3\u7801\u53ef\u771f\u7684\u4e0d\u7b80\u5355\u3002\u3002\n\n## \u9898\u76ee\u94fe\u63a5\uff1a\nhttps://www.luogu.org/problem/P1027\n\n## \u5206\u6790\uff1a\n\n**\u6ce8\uff1a\u8fd9\u91cc\u9762\u7684\u70b9\u6307\u673a\u573a\u800c\u975e\u57ce\u5e02**\n\n\u8fd9\u9053\u9898\u4e4d\u4e00\u770b\u9898\u76ee\u63cf\u8ff0\u4e0d\u96be\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u95ee\u9898\uff0c\u4e0d\u8fc7\u5c31\u662f\u8d77\u70b9\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u7ec8\u70b9\u4e5f\u6709\u591a\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u8dd1\u4e2aFloyd\u5c31\u884c\u3002\n\n- \u4f46\u56e0\u4e3a\u6211\u6015$O(n^3)$\u8dd1\u4e0d\u8d77\uff0c\u6240\u4ee5\u6362\u6210\u4e86$n$\u904d$dijkstra$(\u8fd9\u91ccn\u261e\u70b9\u6570)\n\n\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O(n^2log_n)$\n\n- (dij\u7528\u4e86\u5806\u4f18\u5316\n\n### \u7136\u540e\u6211\u4eec\u6765\u5230\u6837\u4f8b\uff0c\u53d1\u73b0\u8fd8\u6709\u6bd2\u7624\u7684\u9884\u5904\u7406\u3002\n\n\u6837\u4f8b\u65e0\u826f\u7684\u7ed9\u4e86\u77e9\u5f62\u7684\u4e09\u4e2a\u70b9\uff0c\u8bf4\u660e\u7b2c\u56db\u4e2a\u70b9\u53ef\u4ee5\u6839\u636e\u524d\u4e09\u4e2a\u6c42\u51fa\u3002\n\n- \u4e8e\u662f\u6211\u4eec\u8003\u8651\u5230\u8fd0\u7528\u77e9\u5f62\u5bf9\u89d2\u7ebf\u7684\u4e00\u4e9b\u6027\u8d28\u3002\n\n- \u9996\u5148\u627e\u51fa\u8ddd\u79bb\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\uff08\u4e09\u4e2a\u70b9\u4e2d\uff09\n\n- \u7136\u540e\u8fde\u7ebf\u53d6\u4e2d\u70b9\uff08\u5f53\u7136\u7f16\u7a0b\u4e2d\u4e0d\u7528\u8fde\u7ebf\u90a3\u4e00\u6b65\u64cd\u4f5c\uff09\n\n- \u518d\u5c06\u53e6\u5916\u7684\u7b2c3\u4e2a\u70b9\uff08\u4e0d\u5728\u8fde\u7ebf\u7684\u4e24\u7aef\uff09\u5411\u4e2d\u70b9\u8fde\u7ebf\uff0c\u5ef6\u957f\u5373\u53ef\n\n```cpp\nvoid find(double a,double b,double c,double d,double e,double f)//\u8bfb\u5165\u4e09\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u8dd1\u5b8c\u51fd\u6570\u5c31\u628a\u7b2c\u56db\u4e2a\u70b9\u7684\u503c\u8d4b\u5b8c\u4e86\n{\n\tcnt++;\n\tdis[1].num=sqrt(Sqr(a-c)+Sqr(b-d)); \n\tdis[1].id=1;\n\tdis[2].num=sqrt(Sqr(e-c)+Sqr(f-d)); \n\tdis[2].id=2;\n\tdis[3].num=sqrt(Sqr(a-e)+Sqr(b-f));\n\tdis[3].id=3;\n\tsort(dis+1,dis+4,cmp);\n\tif(dis[1].id==1)\n\t{\n\t\tdouble x=min(a,c)+Abs(a-c)/2;\n\t\tdouble y=min(b,d)+Abs(b-d)/2;\n\t\tdouble xn=x+x-e;\n\t\tdouble yn=y+y-f;\n\t\tp[cnt].x=xn;\n\t\tp[cnt].y=yn;\n\t}\n\tif(dis[1].id==2)\n\t{\n\t\tdouble x=min(c,e)+Abs(e-c)/2;\n\t\tdouble y=min(f,d)+Abs(f-d)/2;\n\t\tdouble xn=x+x-a;\n\t\tdouble yn=y+y-b;\n\t\tp[cnt].x=xn;\n\t\tp[cnt].y=yn;\n\t}\n\tif(dis[1].id==3)\n\t{\n\t\tdouble x=min(a,e)+Abs(a-e)/2;\n\t\tdouble y=min(b,f)+Abs(b-f)/2;\n\t\tdouble xn=x+x-c;\n\t\tdouble yn=y+y-d;\n\t\tp[cnt].x=xn;\n\t\tp[cnt].y=yn;\n\t}\n}\n```\n\n\u8fd9\u6837\uff0c\u5c31\u5904\u7406\u5b8c\u4e86\uff0c\u6700\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u5176\u5b9e\u4efb\u610f\u4e24\u70b9\u90fd\u6709\u8fde\u63a5\uff08\u8981\u4e0d\u822a\u7ebf\u8981\u4e0d\u94c1\u8def\uff09\uff0c\u6240\u4ee5\u5904\u7406\u51fa\u8ddd\u79bb\uff0c\u5728\u5224\u65ad\u662f\u5426\u5728\u4e00\u4e2a\u57ce\u5e02\uff0c\u5c31\u53ef\u4ee5\u627e\u5230\u6bcf\u6761\u8def\u7684\u4ef7\u503c\u3002\n\n- \u8dd1dij\u5373\u53ef\n\n\n- \u522b\u5fd8\u4e86\u7ed9\u70b9\u6240\u5728\u7684\u57ce\u5e02\u6253\u6807\u8bb0\uff0c\u8fd9\u6837\u6700\u540e\u65b9\u4fbf\u627eA\u548cB\n\n**\u8fd9\u91cc\u5f15\u7533\u51fa\u4e86\u4e00\u4e2a\u60e8\u75db\u7684\u6559\u8bad\uff1a\u7ed3\u6784\u4f53\u7684\u5b58\u50a8\u65b9\u5f0f\u8981\u60f3\u597d**\n\n\u521a\u5f00\u59cb\u6211\u662f\u4ee5\u4e00\u4e2a\u57ce\u5e02\u4e3a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u7136\u540e\u5c31\u7279\u522b\u96be\u5199\uff0c\u6700\u540e\u53ea\u597d\u91cd\u6784\u4ee3\u7801\n\n## $code:$\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<map>\n#include<cstring>\n#include<queue> \n#include<algorithm>\nusing namespace std;\n#define pa pair<double,int>\nint vis[4005];\npriority_queue<pa,vector<pa>,greater<pa> > q;\nstruct point\n{\n\tdouble x,y,T;\n\tint id;\n}p[4005];\nstruct D\n{\n\tdouble id;\n\tdouble num;\n}dis[4];\ndouble Sqr(int x)\n{\n\treturn x*x;\n}\ndouble cmp(const D &a,const D &b)\n{\n\treturn a.num>b.num;\n}\ndouble Abs(double x)\n{\n\tif(x<0)return -x;\n\treturn x;\n}\nint cnt=0;\nvoid find(double a,double b,double c,double d,double e,double f)\n{\n\tcnt++;\n\tdis[1].num=sqrt(Sqr(a-c)+Sqr(b-d)); \n\tdis[1].id=1;\n\tdis[2].num=sqrt(Sqr(e-c)+Sqr(f-d)); \n\tdis[2].id=2;\n\tdis[3].num=sqrt(Sqr(a-e)+Sqr(b-f));\n\tdis[3].id=3;\n\tsort(dis+1,dis+4,cmp);\n\tif(dis[1].id==1)\n\t{\n\t\tdouble x=min(a,c)+Abs(a-c)/2;\n\t\tdouble y=min(b,d)+Abs(b-d)/2;\n\t\tdouble xn=x+x-e;\n\t\tdouble yn=y+y-f;\n\t\tp[cnt].x=xn;\n\t\tp[cnt].y=yn;\n\t}\n\tif(dis[1].id==2)\n\t{\n\t\tdouble x=min(c,e)+Abs(e-c)/2;\n\t\tdouble y=min(f,d)+Abs(f-d)/2;\n\t\tdouble xn=x+x-a;\n\t\tdouble yn=y+y-b;\n\t\tp[cnt].x=xn;\n\t\tp[cnt].y=yn;\n\t}\n\tif(dis[1].id==3)\n\t{\n\t\tdouble x=min(a,e)+Abs(a-e)/2;\n\t\tdouble y=min(b,f)+Abs(b-f)/2;\n\t\tdouble xn=x+x-c;\n\t\tdouble yn=y+y-d;\n\t\tp[cnt].x=xn;\n\t\tp[cnt].y=yn;\n\t}\n}\ndouble d[405][405],dist[405][405];\nvoid dijkstra(int s)\n{\n\tmemset(vis,0,sizeof(vis));\n\td[s][s]=0;\n    q.push(make_pair(0,s));\n    while(!q.empty())\n    {\n        int x=q.top().second;\n        q.pop();\n        if(vis[x]==1)\n        continue;\n        vis[x]=1;\n        for(int i=1;i<=cnt;i++)\n        {\n            if(d[s][x]+dist[x][i]<d[s][i])\n            {\n                d[s][i]=d[s][x]+dist[x][i];\n                q.push(make_pair(d[s][i],i));\n            }\n        }\n    }\n}\nint main()\n{\n\tdouble t;\n\tint N,A,B,s;\n\tscanf(\"%d\",&N);\n\twhile(N--)\n\t{\n\t\tcnt=0;\n\t\tscanf(\"%d%lf%d%d\",&s,&t,&A,&B);\n\t\tint city=0;\n\t\tfor(int i=1;i<=s;i++)\n\t\t{\n\t\t\tcity++;\n\t\t\tfor(int j=1;j<=3;j++)\n\t\t\t{\n\t\t\t\tcnt++;\n\t\t\t\tscanf(\"%lf%lf\",&p[cnt].x,&p[cnt].y);\n\t\t\t\tp[cnt].id=city;\n\t\t\t}\n\t\t\tscanf(\"%lf\",&p[cnt].T);\n\t\t\tp[cnt-2].T=p[cnt].T;\n\t\t\tp[cnt-1].T=p[cnt].T;\n\t\t\tp[cnt+1].T=p[cnt].T;\n\t\t\t//printf(\"%lf %lf\\n\",p[cnt-j+1].x,p[cnt-j+1].y);\n\t\t\tfind(p[cnt-2].x,p[cnt-2].y,p[cnt-1].x,p[cnt-1].y,p[cnt].x,p[cnt].y);\n\t\t\tp[cnt].id=city;\n\t\t\t//printf(\"i=%lf %lf\\n\",p[cnt].x,p[cnt].y);\n\t\t}\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=cnt;j++)\n\t\t\t{\n\t\t\t\tdouble tmp=sqrt(Sqr(p[i].x-p[j].x)+Sqr(p[i].y-p[j].y));\n\t\t\t\tif(p[i].id==p[j].id)\n\t\t\t\t{\n\t\t\t\t\tdist[i][j]=tmp*p[i].T;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdist[i][j]=tmp*t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=cnt;j++)\n\t\t\t{\n\t\t\t\td[i][j]=2147483640;\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t{\n\t\t\tdijkstra(i);\n\t\t}\n\t\tdouble ans=2147483640;\n\t\tfor(int i=1;i<=cnt;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=cnt;j++)\n\t\t\t{\n\t\t\t\tif(p[i].id==A&&p[j].id==B)\n\t\t\t\t{\n\t\t\t\t\tif(d[i][j]<ans)\n\t\t\t\t\t{\n\t\t\t\t\t\tans=d[i][j];\n\t\t\t\t\t}\n\t\t\t\t\t//ans=min(ans,d[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%.1lf\\n\",ans);\n\t}\t\t\n\treturn 0;\n}\n```\n\n\n",
        "postTime": 1566862948,
        "uid": 45475,
        "name": "ShineEternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u672c\u9898\u5c31\u662f\u6700\u77ed\u8def\u95ee\u9898\uff0c\u53ea\u662f\u5efa\u56fe\u975e\u5e38\u9ebb\u70e6\u3002\n\n\u9996\u5148\uff0c\u5224\u65ad\u4e00\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\u54ea\u4e2a\u662f\u76f4\u89d2\u6211\u7528\u7684\u5411\u91cf\u70b9\u4e58\u65b9\u6cd5\uff08\u611f\u89c9\u6bd4\u8f83\u900f\u5f7b\uff09\n\n\u7136\u540e\u6211\u5b58\u50a8\u70b9\u7684\u65f6\u5019\u5b58\u50a8\u4e86\u4ed6\u6240\u5c5e\u7684\u57ce\u5e02\uff0c\u8f93\u5165\u7684\u65f6\u5019\u5148\u628a\u9ad8\u94c1\u5efa\u597d\uff0c\u7136\u540e\u8dd12\u91cdfor\u5faa\u73af\u5efa\u822a\u9053\u3002\n\n\u6700\u540eA\u57ce\u5e02\u76844\u4e2a\u57ce\u5e02\u90fd\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u7136\u540eB\u57ce\u5e02\u76844\u4e2a\u57ce\u5e02\u90fd\u66f4\u65b0\u4e00\u904d\u5373\u53ef\u3002\n\n\u4ee3\u7801\u96be\u5ea6\u8f83\u5927\uff0c\u6ce8\u610fdouble\u7c7b\u578b\u7684dis\u4e0d\u80fd\u7528memset\u6210`0x3f`\u6765\u521d\u59cb\u5316\uff0c\u4e3a\u5565\u4e0d\u6253for\u5faa\u73af\u3002\u3002\u3002\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<queue>\n#include<cstring>\n#include<cmath>\n\n#define eps 0.000001\n\nusing namespace std;\n\nstruct Vector\n{\n\tdouble x,y;\n\tVector(int x=0,int y=0):x(x),y(y){}\n\tfriend Vector operator+(const Vector&a,const Vector&b){return Vector(a.x+b.x,a.y+b.y);}\n\tfriend Vector operator-(const Vector&a,const Vector&b){return Vector(a.x-b.x,a.y-b.y);}\n\tfriend double operator*(const Vector&a,const Vector&b){return (a.x*b.x+a.y*b.y);}\n\tfriend double operator^(const Vector&a,const Vector&b){return (a.x*b.y-a.y*b.x);}\n\tfriend istream& operator>>(istream& in,Vector a){in>>a.x>>a.y;return in;}\n\tdouble mod(){return sqrt(x*x+y*y);}\n};\n\nstruct Dijkstra\n{\n\tstruct edge\n\t{\n\t\tint v,ne;\n\t\tdouble w;\n\t}a[200010];\n\t\n\tVector pos[100010];\n\tdouble dis[100010];\n\tint h[100010],n,s,tmp,city[100010],tmp2;\n\tbool v[100010];\n\t\n\tvoid debug()\n\t{\n//\t\tprintf(\"%d\\n\",n);\n//\t\tfor(int i=1;i<=n;i++)\n//\t\t{\n//\t\t\tprintf(\"i=%d city=%d h=%d dis=%f (%f,%f)\\n\",i,city[i],h[i],dis[i],pos[i].x,pos[i].y); \n//\t\t}\n//\t\tfor(int x=1;x<=n;x++)\n//\t\tfor(int i=h[x];i!=0;i=a[i].ne)\n//\t\t{\n//\t\t\tprintf(\"[%d(%d)] %d [%d(%d)] %d %f\\n\",x,city[x],i,a[i].v,city[a[i].v],a[i].ne,a[i].w);\n//\t\t}\n\t}\n\t\n\tvoid addedge(int u,int v,int w)//w\u662f\u6bcf\u516c\u91cc\u4ef7\u683c \n\t{\n//\t\tprintf(\"add %d(%d) %d(%d) %d\\n\",u,city[u],v,city[v],w); \n\t\ta[++tmp]=(edge){v,h[u],(pos[u]-pos[v]).mod()*w};\n\t\th[u]=tmp;\n\t\ta[++tmp]=(edge){u,h[v],(pos[u]-pos[v]).mod()*w};\n\t\th[v]=tmp;\n\t}\n\t\n\tint addpoint(Vector p,int c)\n\t{\n\t\tcity[++tmp2]=c;\n\t\tpos[tmp2]=p;\n\t\treturn tmp2;\n\t}\n\t\n\tvoid clear()\n\t{\n\t\tmemset(a,0,sizeof(a));\n\t\tmemset(h,0,sizeof(h));\n\t\tmemset(dis,0,sizeof(dis));\n\t\tmemset(v,0,sizeof(v));\n\t\tmemset(city,0,sizeof(city));\n\t\tn=s=tmp=tmp2=0;\n\t}\n\t\n\tvoid dijkstra()\n\t{\n\t\tmemset(v,0,sizeof(v));\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tdis[i]=999999999.0;\n\t\tdis[s]=0;\n\t\tpriority_queue<pair<double,int>,vector<pair<double,int> >,greater<pair<double,int> > >q;\n\t\tq.push(make_pair(0.0,s));\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint x=q.top().second;\n\t\t\tq.pop();\n\t\t\tif(v[x])continue;\n\t\t\tv[x]=1;\n\t\t\tfor(int i=h[x];i!=0;i=a[i].ne)\n\t\t\t{\n//\t\t\t\tprintf(\"%d %f %f %f\\n\",x,dis[x],a[i].w,dis[a[i].v]);\n\t\t\t\tif(dis[x]+a[i].w<dis[a[i].v])\n\t\t\t\t{\n\t\t\t\t\tdis[a[i].v]=dis[x]+a[i].w;\n\t\t\t\t\tq.push(make_pair(dis[a[i].v],a[i].v));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}solution;\n\nint S,T,A,B;\n\nvoid work(int city,Vector p1,Vector p2,Vector p3,int T)\n{\n\tif(fabs((p1-p2)*(p2-p3))<=eps)swap(p1,p2);\n\telse if(fabs((p1-p3)*(p2-p3))<=eps)swap(p1,p3);\n\tVector p4=p2+p3-p1;\n\tint f1=solution.addpoint(p1,city);\n\tint f2=solution.addpoint(p2,city);\n\tint f3=solution.addpoint(p3,city);\n\tint f4=solution.addpoint(p4,city);\n\tsolution.addedge(f1,f2,T);\n\tsolution.addedge(f1,f3,T);\n\tsolution.addedge(f1,f4,T);\n\tsolution.addedge(f2,f3,T);\n\tsolution.addedge(f2,f4,T);\n\tsolution.addedge(f3,f4,T);\n}\n\nint main()\n{\n\tint t;\n\tcin>>t;\n\twhile(t--)\n\t{\n\t\tdouble ans=999999999;\n\t\tsolution.clear();\n\t\tcin>>S>>T>>A>>B;\n\t\tVector p1,p2,p3;\n\t\tfor(int Te,i=1;i<=S;i++)\n\t\t{\n\t\t\tscanf(\"%lf%lf%lf%lf%lf%lf%d\",&p1.x,&p1.y,&p2.x,&p2.y,&p3.x,&p3.y,&Te);\n//\t\t\tprintf(\"(%f,%f)(%f,%f)(%f,%f)%d\\n\",p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,Te); \n\t\t\twork(i,p1,p2,p3,Te);\n\t\t}\n\t\tfor(int i=1;i<=4*S;i++)\n\t\t\tfor(int j=i+1;j<=4*S;j++)\n\t\t\t\tif(solution.city[i]!=solution.city[j])\n\t\t\t\t\tsolution.addedge(i,j,T);\n\t\tsolution.n=4*S;\n\t\tsolution.debug();\n\t\tfor(int i=1;i<=4*S;i++)\n\t\t{\n\t\t\tif(solution.city[i]==A)\n\t\t\t{\n\t\t\t\tsolution.s=i;\n\t\t\t\tsolution.dijkstra();\n\t\t\t\tfor(int j=1;j<=4*S;j++)\n\t\t\t\t{\n\t\t\t\t\tif(solution.city[j]==B)\n\t\t\t\t\t{\n//\t\t\t\t\t\tprintf(\"found %f\\n\",solution.dis[j]);\n\t\t\t\t\t\tans=min(ans,solution.dis[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n//\t\t\t\tsolution.debug();\n\t\t\t}\n\t\t}\n\t\tprintf(\"%.1f\\n\",ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1532416254,
        "uid": 13091,
        "name": "ghj1222",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "# \u6709\u6bd2\n\u597d\u5728\u6570\u636e\u6c34\uff0cFloyed $O(Tn^3)$\u6c34\u8fc7\u53bb\u4e86\uff1f\n\n\u540c\u5b66\u7528\u4e86Dij\u53ea\u6bd4\u6211\u5feb1ms\u3002\u3002\u3002\n\n~~\uff08\u540c\u5b66\u5e2e\u6211\u6539\u4e86\u9505\uff0c\u6211\u8111\u5b50\u4e00\u70ed\u6b20\u4e86\u4ed66\u4e2aMcFlurry\uff09~~\n\n\u77e9\u5f62\u4e2d\u7b2c\u56db\u70b9\u63a8\u7406\uff1a\n\n\u5148\u6c42\u51fa\u6bcf\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6839\u636e\u52fe\u80a1\u5b9a\u7406\uff0c\u6700\u957f\u8fb9\u4e00\u5b9a\u662f\u5bf9\u89d2\u7ebf\uff0c\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u5f0f\u5b50\u6c42\u51fa\u7b2c\u56db\u70b9\uff1a\n```\nda=gd(x[i][1],y[i][1],x[i][2],y[i][2])\ndb=gd(x[i][1],y[i][1],x[i][3],y[i][3])\ndc=gd(x[i][2],y[i][2],x[i][3],y[i][3])\nif(da>db&&da>dc)\n\tx[i][4]=x[i][1]+x[i][2]-x[i][3],\n\ty[i][4]=y[i][1]+y[i][2]-y[i][3];\nif(db>da&&db>dc)\n\tx[i][4]=x[i][1]+x[i][3]-x[i][2],\n\ty[i][4]=y[i][1]+y[i][3]-y[i][2];\nif(dc>da&&dc>db)\n\tx[i][4]=x[i][2]+x[i][3]-x[i][1],\n\ty[i][4]=y[i][2]+y[i][3]-y[i][1];\n```  \n\u81ea\u5df1\u624b\u52a8\u9a8c\u8bc1\n## \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<string>\n\nusing namespace std;\nint n,s,tt,a,b;\ndouble x[101][5],dis[601][601],y[101][5],t[101];\ndouble gd(double xa,double ya,double xb,double yb)\n{\n\treturn sqrt((xa-xb)*(xa-xb)+(ya-yb)*(ya-yb));\n}\nint id(int i,int j)\n{\n\treturn (i-1)*4+j;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int T=1;T<=n;T++)\n\t{\n\t\tdouble ans=2147483647;\n\t\tfor(int i=1;i<=101;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=101;j++)\n\t\t\t{\n\t\t\t\tdis[i][j]=2147483647;\n\t\t\t}\n\t\t}\n\t\tscanf(\"%d%d%d%d\",&s,&tt,&a,&b);\n\t\tfor(int i=1;i<=s;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=3;j++)\n\t\t\t{\n\t\t\t\tscanf(\"%lf\",&x[i][j]);\n\t\t\t\tscanf(\"%lf\",&y[i][j]);\n\t\t\t}\t\n\t\t\tdouble da=gd(x[i][1],y[i][1],x[i][2],y[i][2]);\n\t\t\tdouble db=gd(x[i][1],y[i][1],x[i][3],y[i][3]);\n\t\t\tdouble dc=gd(x[i][2],y[i][2],x[i][3],y[i][3]);\n\t\t\tdouble maxn=0;\n\t\t\tif(da>db&&da>dc)\n\t\t\t\tx[i][4]=x[i][1]+x[i][2]-x[i][3],\n\t\t\t\ty[i][4]=y[i][1]+y[i][2]-y[i][3];\n\t\t\tif(db>da&&db>dc)\n\t\t\t\tx[i][4]=x[i][1]+x[i][3]-x[i][2],\n\t\t\t\ty[i][4]=y[i][1]+y[i][3]-y[i][2];\n\t\t\tif(dc>da&&dc>db)\n\t\t\t\tx[i][4]=x[i][2]+x[i][3]-x[i][1],\n\t\t\t\ty[i][4]=y[i][2]+y[i][3]-y[i][1];\n\t\t\tscanf(\"%lf\",&t[i]);\n\t\t}\n\t/*\tfor(int i=1;i<=s;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=4;j++)\n\t\t\t{\n\t\t\t\tprintf(\"%d,%d:(%.0lf,%.0lf)\",i,j,x[i][j],y[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}*/\n\t\tfor(int i=1;i<=s;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=4;j++)\n\t\t\t{\n\t\t\t\tfor(int k=1;k<=4;k++)\n\t\t\t\t{\n\t\t\t\t\tif(j==k)continue;\n\t\t\t\t\tdouble d=gd(x[i][j],y[i][j],x[i][k],y[i][k]);\n\t\t\t\t\tdis[id(i,j)][id(i,k)]=d*t[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=s;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=4;j++)\n\t\t\t{\n\t\t\t\tfor(int k=1;k<=s;k++)\n\t\t\t\t{\n\t\t\t\t\tif(i==k)continue;\n\t\t\t\t\tfor(int l=1;l<=4;l++)\n\t\t\t\t\t{\n\t\t\t\t\t\tdouble d=gd(x[i][j],y[i][j],x[k][l],y[k][l]);\n\t\t\t\t\t\tdis[id(i,j)][id(k,l)]=d*tt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=s*4;i++)dis[i][i]=0;\n\t\tfor(int k=1;k<=s*4;k++)\n\t\t{\n\t\t\tfor(int i=1;i<=s*4;i++)\n\t\t\t{\n\t\t\t\tfor(int j=1;j<=s*4;j++)\n\t\t\t\t{\n\t\t\t\t\tdis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t/*\tfor(int i=1;i<=4*s;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=4*s;j++)\n\t\t\t{\n\t\t\t\tprintf(\"%d~%d:%.1lf\\n\",i,j,dis[i][j]);\n\t\t\t}\n\t\t}*/\n\t\tfor(int i=4*(a-1)+1;i<=4*a;i++)\n\t\t{\n\t\t\tfor(int j=4*(b-1)+1;j<=4*b;j++)\n\t\t\t{\n\t\t\t\tans=min(ans,dis[i][j]);\n\t\t\t}\n\t\t}\n\t\tprintf(\"%.1lf\\n\",ans);\n\t}\n}\n```",
        "postTime": 1572528773,
        "uid": 93292,
        "name": "\u79bb\u5b50\u952eIonic_Bond",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "~~[\u535a\u5ba2\u5e7f\u544a\uff0c\u4e8e\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://www.cnblogs.com/wondering-world/p/12667308.html)\n\n![\u9898\u76ee\u793a\u610f\u56fe](https://www.cnblogs.com/wondering-world/p/12667308.html)\n\n\u9898\u76ee\u4e2d\u8ba9\u6211\u4eec\u6c42\u51fa\u4ece\u57ce\u5e02A\u5230\u57ce\u5e02B\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u9053\u6700\u77ed\u8def\u7684\u95ee\u9898\uff0c\u5c06\u6700\u5c0f\u82b1\u8d39\u770b\u4f5c\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\uff0c\u7528SPFA\uff08Floyd\uff09\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u7136\u800c\uff0c\u6bcf\u4e2a\u57ce\u5e02\u67094\u4e2a\u673a\u573a\uff0c\u53bb\u6bcf\u4e2a\u673a\u573a\u7684\u82b1\u8d39\u90fd\u4e0d\u4e00\u6837\u3002\u56e0\u6b64\uff0c\u8003\u8651\u5c06\u4e00\u4e2a\u57ce\u5e02\u62c6\u5206\u62104\u4e2a\u70b9\uff0c\u5728\u5b58\u70b9\u7684\u65f6\u5019\u50a8\u5b58\u4e0b\u57ce\u5e02\u7f16\u53f7\uff08\u7c7b\u4f3c\u5f3a\u8054\u901a\u7f16\u53f7\uff09\uff0c\u8fdb\u884c\u7279\u5224\u5c31\u597d\u4e86\u3002\n\n\u5982\u679c\u662f\u540c\u4e00\u4e2a\u57ce\u5e02\u7684\uff0c\u8fb9\u957f\u4ee5\u4e3a\u94c1\u8def\u7968\u4ef7 * dis, \u4e0d\u540c\u57ce\u5e02\u5219\u4e3a plane * dis\u3002\n\n\u7b54\u6848\u5373\u4e3a\u7ec8\u70b9\u56db\u4e2a\u673a\u573a\u4e2d\u6700\u5c0f\u7684\u3002\n\n~~\uff08\u52fe\u80a1\u5b9a\u7406\u597d\u8bc4\uff01\uff09~~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 401\n#define isdigit(c) ((c)>='0'&&(c)<='9')\n#define min(a,b) ((a)>(b)?(b):(a))\n/*\u6bd4 STL \u5feb\uff1f*/ \n \ninline int read(){\n    int x = 0, s = 1;\n    char c = getchar();\n    while(!isdigit(c)){\n        if(c == '-') s = -1;\n        c = getchar();\n    }\n    while(isdigit(c)){\n        x = (x << 1) + (x << 3) + (c ^ '0');\n        c = getchar();\n    }\n    return x * s;\n}\n\nstruct node{//\u5b58\u6bcf\u4e2a\u673a\u573a\u7684\u4fe1\u606f \n    int x, y;\n    int city, price;\n} t[N << 2];\ndouble d[N << 2];\nint n, pla_pri, s, ht;\n\ninline int square(int x){\n    return x * x;\n}\n\ninline int dis(int a, int b){//\u6682\u65f6\u5148\u4e0d\u5f00\u6839\u53f7\uff0c\u4f7f\u7528\u8d77\u6765\u65b9\u4fbf\u4e00\u4e9b \n    return square(t[a].x - t[b].x) + square(t[a].y - t[b].y); //\u7f16\u53f7\u673a\u573a\u7684\u8ddd\u79bb \n}\n\ninline void get4(int n1,int n2,int n3){\n    int x4, y4;\n    int x1 = t[n1].x, y1 = t[n1].y, x2 = t[n2].x, y2 = t[n2].y, x3 = t[n3].x, y3 = t[n3].y;\n    int ab = dis(n1, n2);\n    int ac = dis(n1, n3);\n    int bc = dis(n2, n3);\n    if(ab == ac + bc) x4 = x1 + x2 - x3, y4 = y1 + y2 - y3;//\u52fe\u80a1\u5b9a\u7406\uff0c\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9 \n    else if(ac == ab + bc) x4 = x1 + x3 - x2, y4 = y1 + y3 - y2;\n    else if(bc == ac + ab) x4 = x2 + x3 - x1, y4 = y2 + y3 - y1;\n    t[n3+1].x = x4, t[n3+1].y = y4;\n/*    printf(\"x1:%d y1: %d x2: %d y2: %d x3: %d y3: %d x4: %d y4: %d\\n\", x1,y1,x2,y2,x3,y3,x4,y4);\n    \u5206\u6bb5\u68c0\u67e5\u7a0b\u5e8f\u53ef\u4ee5\u9632\u6b62\u5199\u5b8c\u4e4b\u540e Debug \u4e24\u5c0f\u65f6 */\n    return ;\n}\n\nvoid init(){\n    int cac_city = 0;\n    for(int i = 1;i <= (n << 2); i += 4){\n        t[i].x = read(), t[i].y = read();\n        t[i+1].x = read(), t[i+1].y = read();\n        t[i+2].x = read(), t[i+2].y = read();\n        t[i].price = t[i+1].price = t[i+2].price = t[i+3].price = read();//\u628a\u4ef7\u683c\u8bb0\u5f55\u4e0b\u6765 \n        t[i].city = t[i+1].city = t[i+2].city = t[i+3].city = ++cac_city;//\u57ce\u5e02\u8bb0\u5f55\u4e0b\u6765 \n        get4(i, i+1, i+2);//\u5bfb\u627e\u7b2c\u56db\u4e2a\u70b9 \n    }\n    return ;\n}\n\nqueue <int> q; \nbool vis[N << 2];\n\nvoid spfa(){\n    /*\u65f6\u523b\u4e0d\u5fd8 n \u662f4\u500d\uff01\uff01\u4e0d\u7136\u7384\u5b66\u9519\u8bef\uff01\uff01*/ \n    for(int i = 1;i <= (n << 2); i++)\n        d[i] = 99999999.99;\n    for(int i = 4 * (s - 1) + 1;i <= 4 * (s - 1) + 4; i++){//\u90fd\u80fd\u4f5c\u4e3a\u8d77\u70b9\uff0c\u6240\u4ee54\u4e2a\u70b9\u5168\u90e8\u63a8\u8fdb\u53bb \n        vis[i] = 1;\n        q.push(i);\n        d[i] = 0;\n    }\n    while(!q.empty()){//SPFA \n        int now = q.front();q.pop();\n        vis[now] = 0;\n        for(int i = 1;i <= (n << 2); i++){//\u53cd\u6b63\u5168\u90e8\u6709\u8fde\u8fb9\uff0c\u76f4\u63a5 for \u5faa\u73af\u4e0d\u9999\u5417 \n            if(i == now)continue;\n            double cost;\n            if(t[i].city == t[now].city){//\u5982\u679c\u5728\u540c\u4e00\u4e2a\u57ce\u5e02 \n                cost = t[i].price * (double)sqrt((double)dis(i, now));\n            }\n            else cost = pla_pri * (double)sqrt((double)dis(i, now));//\u8fde\u8fb9\u7684\u4ef7\u503c\uff08\u8ddd\u79bb\uff09 \n            if(d[i] > d[now] + cost){\n                d[i] = d[now] + cost;\n                if(!vis[i]){\n                    vis[i] = 1;\n                    q.push(i);\n                }\n            }\n        }\n    }\n    return ;\n}\n\nint main(){\n//    freopen(\"hh.txt\", \"r\", stdin);\n    int T = read();\n    while(T--){\n        n = read(), pla_pri = read(), s = read(), ht = read();\n        if(s == ht){  //\u8fd9\u91cc\u7528SPFA\u53ef\u4ee5\u4e0d\u7279\u5224\uff0c\u4f46\u662f\u5982\u679c\u7528Floyd\u5c31\u8981\u7279\u5224\u4e86 \uff08\u521d\u59cb\u5316\u6210\u4e86\u6781\u5927\u503c\uff09 \n            puts(\"0.0\");\n            continue;\n        }\n        init();\n        spfa();\n        double ans = ~0u >> 1;\n        for(int i = 4 * (ht - 1) + 1;i <= 4 * (ht - 1) + 1 + 3; i++)\n            ans = min(d[i], ans);//\u7b54\u6848\u4e3a\u7ec8\u70b9\u56db\u4e2a\u673a\u573a\u91cc\u9762\u6700\u5c0f\u7684 \n        printf(\"%.1lf\\n\", ans);\n    }\n    return 0;\n}\n\n```\n",
        "postTime": 1586418018,
        "uid": 234224,
        "name": "\u9752\u9e1f_Blue_Bird",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73~](https://tle666.github.io/2019/03/02/[NOIP2011%E6%8F%90%E9%AB%98]%20Car%E7%9A%84%E6%97%85%E8%A1%8C%E8%B7%AF%E7%BA%BF/)\n\n# **Description**\n\n\u7ed9\u4f60$n$\u4e2a\u77e9\u5f62\uff0c\u6bcf\u4e2a\u77e9\u5f62\u81ea\u5df1\u7684\u56db\u4e2a\u9876\u70b9\u4e24\u4e24\u76f8\u540c\uff0c\u5e76\u4e14\u7ecf\u8fc7\u7684\u8d39\u7528\u4e3a\u957f\u5ea6\u4e58$t$\uff1b\u800c\u6240\u6709\u77e9\u5f62\u4e4b\u95f4\u8def\u7a0b\u7684\u8d39\u7528\u4e3a\u957f\u5ea6\u4e58$T$\uff08\u4e0d\u5305\u62ec\u540c\u4e00\u77e9\u5f62\u5185\u4e24\u70b9\u7684\u8fb9\uff09\u3002\n\n\u6c42$A$\u70b9\u5230$B$\u70b9\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u5bf9\u4e8e$100$%\u7684\u6570\u636e\uff0c\u6570\u636e\u7ec4\u6570$\\leq10$\uff0c\u77e9\u5f62\u4e2a\u6570$\\leq100$\u3002\n\n[\u9898\u76ee\u94fe\u63a5\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P1027)\n\n# **Solution**\n\n~~\u6253\u6b7b\u6211\u4e5f\u4e0d\u544a\u8bc9\u4f60\u6211Floyd\u6a21\u677f\u6253\u9519\u4e86~~\n\n\u901a\u8fc7$floyd$\u5904\u7406\u51fa\u4efb\u610f\u4e24\u70b9\uff08\u6ce8\u610f\u4e0d\u662f\u77e9\u5f62\uff09\u4e4b\u95f4\u7684\u6700\u5c0f\u8d39\u7528\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u9053\u9898\u7ec6\u8282\u8fd8\u662f\u4e0d\u5c11\u7684\u2014\u2014\n\n- \u53ea\u7ed9\u4f60\u77e9\u5f62\u7684\u4e09\u4e2a\u9876\u70b9\n\n    \u5148\u901a\u8fc7\u52fe\u80a1\u5b9a\u7406\u9006\u5b9a\u7406\u6765\u6c42\u51fa\u54ea\u4e2a\u662f\u76f4\u89d2\uff0c\u7136\u540e\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\u5c31\u51fa\u6765\u4e86\u3002\n\n- \u77e9\u5f62\u53ef\u4ee5\u662f\u6b6a\u7684\uff0c\u5373\u5b83\u7684\u8fb9\u4e0d\u4e00\u5b9a\u5e73\u884c\u4e8e\u5750\u6807\u8f74\u3002\n- \u591a\u7ec4\u6570\u636e\u6ce8\u610f\u521d\u59cb\u5316\u3002\n- \u98de\u673a\u548c\u6c7d\u8f66\u8d39\u7528\u4e0d\u4e00\u6837\uff0c\u9700\u8981\u5206\u522b\u8ba1\u7b97\u3002\n- \u6700\u540e\u53ea\u8f93\u51fa1\u4f4d\u5c0f\u6570\n\n$Hint$\uff1a\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f $dis\\ =\\ \\sqrt{(x_1 - x_2) ^ 2 + (y_1 - y_2) ^ 2}$\n\n# **Code**\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define MAXN 110\nint _, S, t, A, B, tot;\ndouble w[MAXN][MAXN], ans; // w \u662f\u4e24\u70b9\u95f4\u7684\u6700\u5c0f\u8d39\u7528\ninline double sq(int x) { return (double)x * x;}\nstruct point {\n    int id, t, x, y; // id \u57ce\u5e02\u7f16\u53f7\uff0ct \u5217\u8f66\u8d39\u7528\n    inline void INIT(int _id, int _t, int _x, int _y) {\n        id = _id, t = _t, x = _x, y = _y;\n    } // \u8d4b\u503c\u51fd\u6570\uff08\u66f4\u7b80\u5355\u7684\u5fd8\u4e86\u600e\u4e48\u5199\u4e86 QwQ\n    inline double dis(point &a) {\n        return sqrt(sq(x - a.x) + sq(y - a.y));\n    } // \u4e24\u70b9\u95f4\u8ddd\u79bb\n    inline void rct(point &a, point &b, point &c) {\n        id = a.id, t = a.t;\n        int P = sq(a.x - b.x) + sq(a.y - b.y),\n            Q = sq(b.x - c.x) + sq(b.y - c.y),\n            R = sq(c.x - a.x) + sq(c.y - a.y);\n        if(P + Q == R)\n            x = a.x + c.x - b.x,\n            y = a.y + c.y - b.y;\n        else if(P + R == Q)\n            x = b.x + c.x - a.x,\n            y = b.y + c.y - a.y;\n        else\n            x = a.x + b.x - c.x,\n            y = a.y + b.y - c.y;\n    } // \u5904\u7406\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\n} p[MAXN];\ninline void prework() {\n    static point P, Q;\n    static double c, d;\n    memset(w, 0x3f, sizeof(w));\n    for(int i = 1; i <= tot; i++)\n        for(int j = 1; j <= tot; j++) {\n            if(i == j) continue ;\n            P = p[i], Q = p[j],\n            d = P.dis(Q), c = 0.0;\n            if(P.id == Q.id)\n                c = d * P.t;\n            else c = d * (double)t;\n            w[i][j] = w[j][i] = c;\n        }\n} // \u5904\u7406\u8ddd\u79bb\uff0c\u6ce8\u610f\u521d\u59cb\u5316\nint main() {\n    int x1, y1, x2, y2, x3, y3, _t;\n    point p1, p2, p3, p4;\n    scanf(\"%d\", &_);\n    while(_--) { // \u591a\u7ec4\u6570\u636e\n        scanf(\"%d%d%d%d\", &S, &t, &A, &B);\n        tot = 0;\n        for(int i = 1; i <= S; i++) {\n            scanf(\"%d%d%d%d%d%d%d\",\n            &x1, &y1, &x2, &y2, &x3, &y3, &_t);\n            p1.INIT(i, _t, x1, y1), p2.INIT(i, _t, x2, y2),\n            p3.INIT(i, _t, x3, y3), p4.rct(p1, p2, p3);\n            p[++tot] = p1, p[++tot] = p2,\n            p[++tot] = p3, p[++tot] = p4;\n        } prework();\n        for(int k = 1; k <= tot; k++) // \u4e00\u5f00\u59cb\u628a k \u5957\u5230\u6700\u91cc\u9762\u4e86\u3002\u3002\n            for(int i = 1; i <= tot; i++)\n                for(int j = 1; j <= tot; j++)\n                    w[i][j] = min(w[i][j], w[i][k] + w[k][j]);\n        ans = 0x7f7f7f7f;\n        for(int i = 1; i <= tot; i++)\n            for(int j = 1; j <= tot; j++)\n                if(p[i].id == A && p[j].id == B)\n                    ans = min(ans, w[i][j]);\n        printf(\"%.1lf\\n\", ans); // \u53ea\u4fdd\u75591\u4f4d\uff01\n    }\n    return 0;\n}\n/*\n1\n3 10 1 3\n1 1 1 3 3 1 30\n2 5 7 4 5 2 1\n8 6 8 8 11 6 3\n\n*/\n```\n\n",
        "postTime": 1551538536,
        "uid": 54628,
        "name": "eros1on",
        "ccfLevel": 0,
        "title": "[NOIP2011\u63d0\u9ad8] Car\u7684\u65c5\u884c\u8def\u7ebf"
    },
    {
        "content": "SPFA+\u6570\u8bba~\n\n\u5e94\u8be5\u662f\u6700\u7b80\u77ed\u6e05\u6670\u7684\u4ee3\u7801\u4e86\uff0c\u5224\u65ad\u7b2c\u56db\u4e2a\u70b9\u7528\u4e86\u6c42\u659c\u8fb9\u5bf9\u5e94\u70b9\u7684\u65b9\u6cd5\uff0c\u7c7b\u4f3c\u5411\u91cf~\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<cmath>\n#include<queue>\nusing namespace std;\nint n,s,t,A,B,fi[401],w[340001],ne[340001],cnt,x[5][401],y[5][401],val;\ndouble v[340001],dis[401],minn;\nbool b[401];\nqueue<int> q;\nvoid add(int u,int vv,double val1)\n{\n    w[++cnt]=vv;v[cnt]=val1;ne[cnt]=fi[u];fi[u]=cnt;\n}\ndouble cal(double x1,double y1,double x2,double y2)\n{\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\ndouble cal2(int x1,int y1,int x2,int y2)\n{\n    return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n}\nvoid getn(int u)\n{\n    double k[4]={0,cal2(x[1][u],y[1][u],x[2][u],y[2][u]),\n                   cal2(x[2][u],y[2][u],x[3][u],y[3][u]),\n                   cal2(x[3][u],y[3][u],x[1][u],y[1][u])},tot=k[1]+k[2]+k[3];\n    int fre,num[3]={0};\n    for(int i=1;i<=3;i++)\n      if(k[i]*2==tot) fre=(i==1 ? 3:i-1);\n      else num[++num[0]]=(i==1 ? 3:i-1);\n    x[4][u]=x[num[1]][u]+x[num[2]][u]-x[fre][u];\n    y[4][u]=y[num[1]][u]+y[num[2]][u]-y[fre][u];\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    while(n--)\n    {\n        scanf(\"%d%d%d%d\",&s,&t,&A,&B);minn=999999999;\n        memset(fi,0,sizeof(fi));cnt=0;\n        for(int k=1;k<=s;k++)\n        {\n            scanf(\"%d%d%d%d%d%d%d\",&x[1][k],&y[1][k],&x[2][k],&y[2][k],&x[3][k],&y[3][k],&val);\n            getn(k);\n            for(int i=1;i<=3;i++)\n              for(int j=i+1;j<=4;j++)\n              {\n                  double kkz=cal(x[i][k],y[i][k],x[j][k],y[j][k])*(double)val;\n                  add(4*k+i-4,4*k+j-4,kkz);add(4*k+j-4,4*k+i-4,kkz);\n              }\n        }\n        for(int k1=1;k1<s;k1++)\n          for(int k2=k1+1;k2<=s;k2++)\n            for(int i=1;i<=4;i++)\n                for(int j=1;j<=4;j++)\n                {\n                    double kkz=cal(x[i][k1],y[i][k1],x[j][k2],y[j][k2])*(double)t;\n                    add(4*k1-4+i,4*k2-4+j,kkz);add(4*k2-4+j,4*k1-4+i,kkz);\n              }\n        for(int i=1;i<=4;i++)\n        {\n            memset(dis,127,sizeof(dis));\n            q.push(A*4-4+i);b[A*4-4+i]=1;dis[A*4-4+i]=0;\n            while(!q.empty())\n            {\n                int k=q.front();q.pop();b[k]=0;\n                for(int j=fi[k];j;j=ne[j])\n                  if(dis[w[j]]>dis[k]+v[j])\n                  {\n                    dis[w[j]]=dis[k]+v[j];\n                    if(!b[w[j]])\n                    {\n                        b[w[j]]=1;q.push(w[j]);\n                    }\n                  }\n            }\n            for(int j=1;j<=4;j++)\n              if(dis[B*4-4+j]<minn) minn=dis[B*4-4+j];\n        }\n        printf(\"%.1lf\\n\",minn);\n    }\n    return 0;\n}\n```",
        "postTime": 1477564439,
        "uid": 16334,
        "name": "licone",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u6bd2\u7624\u5440\uff0c\u5efa\u56fe\u641e\u4e86\u534a\u5c0f\u65f6~~(\u83dc\u662f\u539f\u7f6a)~~\n\n- \u601d\u8def\uff1a**\u628an\u4e2a\u57ce\u5e02\u76844\u4e2a\u70b9\u6bcf\u4e2a\u90fd\u5355\u72ec\u4f5c\u4e3a\u4e00\u4e2a\u70b9\uff0c\u786e\u5b9a\u597d\u6240\u6709\u70b9\u7684\u5750\u6807\u540e\u9010\u4e00\u8fdb\u884c\u5efa\u56fe\u3002** \u4e4b\u540e\u75284\u4e2adij\u8ba1\u7b97a\u76844\u4e2a\u70b9\u5230b\u7684\u56db\u4e2a\u70b9\u7684\u8d39\u7528\uff0c\u53d6\u6700\u5c0f\u503c\u4f5c\u4e3a\u7b54\u6848\u3002\n\n- \u603b\u7ed3\uff1a\u9898\u76ee\u4e0d\u96be\uff0c\u5c31\u662f\u4ee3\u7801\u6709\u70b9big\u3002\n\n- **\u786e\u5b9a\u6bcf\u4e2a\u70b9\u7684\u5750\u6807**\n```cpp\n        int cnt=0;\n        for(int i=1;i<=n;i++)\n        {\n            cin >> node[++cnt].x >> node[cnt].y;\n            cin >> node[++cnt].x >> node[cnt].y;\n            cin >> node[++cnt].x >> node[cnt].y;\n            cin >> roadprie[i];\n            if((node[cnt].x-node[cnt-2].x)*(node[cnt-1].x-node[cnt-2].x)+(node[cnt].y-node[cnt-2].y)*(node[cnt-1].y-node[cnt-2].y)==0)\n            {\n                int x=node[cnt].x-node[cnt-2].x+node[cnt-1].x;\n                int y=node[cnt].y-node[cnt-2].y+node[cnt-1].y;\n                node[++cnt].x=x;\n                node[cnt].y=y;\n            }\n            else if((node[cnt].x-node[cnt-1].x)*(node[cnt-2].x-node[cnt-1].x)+(node[cnt].y-node[cnt-1].y)*(node[cnt-2].y-node[cnt-1].y)==0)\n            {\n                int x=node[cnt].x-node[cnt-1].x+node[cnt-2].x;\n                int y=node[cnt].y-node[cnt-1].y+node[cnt-2].y;\n                node[++cnt].x=x;\n                node[cnt].y=y;\n            }\n            else if((node[cnt-1].x-node[cnt].x)*(node[cnt-2].x-node[cnt].x)+(node[cnt-1].y-node[cnt].y)*(node[cnt-2].y-node[cnt].y)==0)\n            {\n                int x=node[cnt-1].x-node[cnt].x+node[cnt-2].x;\n                int y=node[cnt-1].y-node[cnt].y+node[cnt-2].y;\n                node[++cnt].x=x;\n                node[cnt].y=y;\n            }\n```\n\n- \u5bf9\u6bcf\u4e00\u5bf9\u70b9\u8fdb\u884c\u5efa\u56fe\n```cpp\n        vector<_edge>save[405];\n        for(int i=1;i<=cnt;i++)\n        {\n            for(int j=1;j<=cnt;j++)\n            {\n                if(i==j)\n                    continue;\n                if((i-1)/4==(j-1)/4)\n                {\n                    int f=i;\n                    int t=j;\n                    double c=dis(node[i].x,node[i].y,node[j].x,node[j].y)*roadprie[(i-1)/4+1];\n                    save[f].push_back(_edge{f,t,c});\n                }\n                else\n                {\n                    int f=i;\n                    int t=j;\n                    double c=dis(node[i].x,node[i].y,node[j].x,node[j].y)*flyprice;\n                    save[f].push_back(_edge{f,t,c});\n                }\n            }\n        }\n```\n\n- dij\u6c42\u7b54\u6848\n```cpp\n        double re=inf;\n        for(int k=1;k<=4;k++)\n        {\n            double ans=inf;\n            for(int i=1;i<=cnt;i++)\n            {\n                vis[i]=0;\n                len[i]=inf;\n            }\n            len[(a-1)*4+k]=0;\n            priority_queue<pair<double,int>,vector<pair<double,int> >,greater<pair<double,int> > > que;\n            que.push(make_pair(0,(a-1)*4+k));\n            while(que.size())\n            {\n                int v=que.top().second;\n                double l=que.top().first;\n                que.pop();\n                if(vis[v])\n                    continue;\n                vis[v]++;\n                len[v]=l;\n                for(int i=0;i<(int)save[v].size();i++)\n                {\n                    _edge e=save[v][i];\n                    if(len[e.to]>len[v]+e.cost)\n                    {\n                        len[e.to]=len[v]+e.cost;\n                        que.push(make_pair(len[e.to],e.to));\n                    }\n                }\n            }\n            for(int i=1;i<=4;i++)\n                ans=min(ans,len[(b-1)*4+i]);\n            re=min(re,ans);\n        }\n        printf(\"%.1f\\n\",re);\n```\n\n## \u5b8c\u6574\u7248\u4ee3\u7801\n```cpp\n/*\n * @Description: \n * @Autor: Kadia\n * @Date: 2020-07-18 19:58:38\n * @LastEditors: Kadia\n * @Connect: vx:ccz1354 qq:544692713\n * @LastEditTime: 2020-07-18 21:23:21\n */ \n#include <bits/stdc++.h>\n#define inf 0x3f3f3f3f\nusing namespace std;\nstruct _node\n{\n    double x;\n    double y;\n}node[405];\nstruct _edge\n{\n    int from;\n    int to;\n    double cost;\n};\nint vis[405];\ndouble len[405];\nint roadprie[105];\ndouble dis(double x1, double y1,double x2, double y2)\n{\n    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));\n}\nint main()\n{\n    int t;\n    cin >> t;\n    int n,flyprice,a,b;\n    while(t--)\n    {\n        cin >> n >> flyprice >> a >> b;\n        int cnt=0;\n        for(int i=1;i<=n;i++)\n        {\n            cin >> node[++cnt].x >> node[cnt].y;\n            cin >> node[++cnt].x >> node[cnt].y;\n            cin >> node[++cnt].x >> node[cnt].y;\n            cin >> roadprie[i];\n            if((node[cnt].x-node[cnt-2].x)*(node[cnt-1].x-node[cnt-2].x)+(node[cnt].y-node[cnt-2].y)*(node[cnt-1].y-node[cnt-2].y)==0)\n            {\n                int x=node[cnt].x-node[cnt-2].x+node[cnt-1].x;\n                int y=node[cnt].y-node[cnt-2].y+node[cnt-1].y;\n                node[++cnt].x=x;\n                node[cnt].y=y;\n            }\n            else if((node[cnt].x-node[cnt-1].x)*(node[cnt-2].x-node[cnt-1].x)+(node[cnt].y-node[cnt-1].y)*(node[cnt-2].y-node[cnt-1].y)==0)\n            {\n                int x=node[cnt].x-node[cnt-1].x+node[cnt-2].x;\n                int y=node[cnt].y-node[cnt-1].y+node[cnt-2].y;\n                node[++cnt].x=x;\n                node[cnt].y=y;\n            }\n            else if((node[cnt-1].x-node[cnt].x)*(node[cnt-2].x-node[cnt].x)+(node[cnt-1].y-node[cnt].y)*(node[cnt-2].y-node[cnt].y)==0)\n            {\n                int x=node[cnt-1].x-node[cnt].x+node[cnt-2].x;\n                int y=node[cnt-1].y-node[cnt].y+node[cnt-2].y;\n                node[++cnt].x=x;\n                node[cnt].y=y;\n            }\n        }\n        vector<_edge>save[405];\n        for(int i=1;i<=cnt;i++)\n        {\n            for(int j=1;j<=cnt;j++)\n            {\n                if(i==j)\n                    continue;\n                if((i-1)/4==(j-1)/4)\n                {\n                    int f=i;\n                    int t=j;\n                    double c=dis(node[i].x,node[i].y,node[j].x,node[j].y)*roadprie[(i-1)/4+1];\n                    save[f].push_back(_edge{f,t,c});\n                }\n                else\n                {\n                    int f=i;\n                    int t=j;\n                    double c=dis(node[i].x,node[i].y,node[j].x,node[j].y)*flyprice;\n                    save[f].push_back(_edge{f,t,c});\n                }\n            }\n        }\n        double re=inf;\n        for(int k=1;k<=4;k++)\n        {\n            double ans=inf;\n            for(int i=1;i<=cnt;i++)\n            {\n                vis[i]=0;\n                len[i]=inf;\n            }\n            len[(a-1)*4+k]=0;\n            priority_queue<pair<double,int>,vector<pair<double,int> >,greater<pair<double,int> > > que;\n            que.push(make_pair(0,(a-1)*4+k));\n            while(que.size())\n            {\n                int v=que.top().second;\n                double l=que.top().first;\n                que.pop();\n                if(vis[v])\n                    continue;\n                vis[v]++;\n                len[v]=l;\n                for(int i=0;i<(int)save[v].size();i++)\n                {\n                    _edge e=save[v][i];\n                    if(len[e.to]>len[v]+e.cost)\n                    {\n                        len[e.to]=len[v]+e.cost;\n                        que.push(make_pair(len[e.to],e.to));\n                    }\n                }\n            }\n            for(int i=1;i<=4;i++)\n                ans=min(ans,len[(b-1)*4+i]);\n            re=min(re,ans);\n        }\n        printf(\"%.1f\\n\",re);\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1595079117,
        "uid": 309328,
        "name": "KadiaNEFU",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "## \u601d\u8def\n\u9996\u5148\u770b\u9898\uff0c\u5e94\u8be5\u662f\u4e2a\u6700\u77ed\u8def\u9898\u3002\u53ea\u8981\u628a\u6240\u6709\u98de\u673a\u573a\u4e4b\u95f4\u5efa\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\uff0c\u8fd8\u8981\u5904\u7406\u8fd9\u6837\u4e00\u4e9b\u95ee\u9898\n\n1.\u7b2c\u56db\u4e2a\u70b9\u7684\u4f4d\u7f6e\u3002\u9898\u4e2d\u7ed9\u4e86\u4e09\u4e2a\u70b9\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7b97\u51fa\u4e09\u8fb9\u7684\u957f\u5ea6\uff0c\u5176\u4e2d\u6700\u957f\u7684\u90a3\u4e00\u6761\u8fb9\u4e00\u5b9a\u662f\u5bf9\u89d2\u7ebf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba1\u7b97\u7b2c\u56db\u4e2a\u9876\u70b9\u7684\u5750\u6807\u4e86\n\n2.\u5efa\u8fb9\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e24\u4e2a\u98de\u673a\u573a\u662f\u4e00\u4e2a\u57ce\u5e02\u7684\uff0c\u90a3\u4e48\u8fb9\u7684\u957f\u5ea6\uff08\u8d39\u7528\uff09\u662f\u8fd9\u4e2a\u57ce\u5e02\u9ad8\u94c1\u8d39\u7528\u4e58\u4e0a\u5b9e\u9645\u957f\u5ea6\uff1b\u5426\u5219\u662f\u98de\u673a\u8d39\u4e58\u5b9e\u9645\u957f\u5ea6\n\n3.\u8fd9\u9053\u9898\u53ef\u4ee5\u4eceA\u7684\u4efb\u610f\u673a\u573a\u51fa\u53d1\uff0c\u5230\u4efb\u610f\u4e00\u4e2aB\u7684\u673a\u573a\u5c31\u7ec8\u6b62\u3002\u90a3\u4e48\u600e\u4e48\u53d8\u6210\u5355\u6e90\u6700\u77ed\u8def\u5f84\u5462\uff1f\u90a3\u4e48\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u521d\u59cb\u57ce\u5e02\u7684\u56db\u4e2a\u70b9\u53d8\u6210\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f\u5c06\u4ed6\u4eec\u4e4b\u95f4\u7684\u957f\u5ea6\u90fd\u53d8\u62100\uff0c\u518d\u8dd1\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u4e86\n\n## AC\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nconst int maxn=105;\nusing namespace std;\n \nint s,t,a,b;\nstruct City\n{\n    int x[4],y[4];\n    int T;\n}C[maxn];\nint tot,to[maxn*maxn],nxt[maxn*maxn],head[maxn];\ndouble d[maxn*maxn],ans[maxn*4];\nbool vis[maxn*4];\npriority_queue< pair<double,int> > q;\n \nvoid Get0(int p)\n{\n    City &q=C[p];\n    double l1=sqrt(((q.x[1])-(q.x[2]))*((q.x[1])-(q.x[2]))+((q.y[1])-(q.y[2]))*((q.y[1])-(q.y[2])));\n    double l2=sqrt(((q.x[1])-(q.x[3]))*((q.x[1])-(q.x[3]))+((q.y[1])-(q.y[3]))*((q.y[1])-(q.y[3])));\n    double l3=sqrt(((q.x[2])-(q.x[3]))*((q.x[2])-(q.x[3]))+((q.y[2])-(q.y[3]))*((q.y[2])-(q.y[3])));\n    double maxl=max(l1,max(l2,l3));\n    if(maxl==l1) q.x[0]=q.x[1]+q.x[2]-q.x[3],q.y[0]=q.y[1]+q.y[2]-q.y[3];\n    if(maxl==l2) q.x[0]=q.x[1]+q.x[3]-q.x[2],q.y[0]=q.y[1]+q.y[3]-q.y[2];\n    if(maxl==l3) q.x[0]=q.x[2]+q.x[3]-q.x[1],q.y[0]=q.y[2]+q.y[3]-q.y[1];\n}\n \nvoid Add(int u,int v,double len)\n{\n    to[++tot]=v;nxt[tot]=head[u];head[u]=tot;d[tot]=len;\n    to[++tot]=u;nxt[tot]=head[v];head[v]=tot;d[tot]=len;\n}\n \nvoid Dijkstra()\n{\n    for(int i=0;i<4*s;i++) ans[i]=99999999;\n    ans[4*a]=0;ans[4*a+1]=0;ans[4*a+2]=0;ans[4*a+3]=0;\n    memset(vis,0,sizeof(vis));\n    q.push(make_pair(0,4*a));\n    q.push(make_pair(0,4*a+1));\n    q.push(make_pair(0,4*a+2));\n    q.push(make_pair(0,4*a+3));\n    while(!q.empty())\n    {\n        int u=q.top().second;q.pop();\n        if(vis[u]) continue;\n        vis[u]=true;\n        for(int i=head[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            if(ans[u]+d[i]<ans[v])\n            {\n                ans[v]=ans[u]+d[i];\n                q.push(make_pair(-ans[v],v));\n            }\n        }\n    }\n}\n \nvoid work()\n{\n    scanf(\"%d%d%d%d\",&s,&t,&a,&b);--a,--b;\n    for(int i=0;i<s;i++)\n    {\n        City &q=C[i];\n        scanf(\"%d%d%d%d%d%d%d\",&q.x[1],&q.y[1],&q.x[2],&q.y[2],&q.x[3],&q.y[3],&q.T);\n    }\n    for(int i=0;i<s;i++) Get0(i);\n    double len;\n    for(int i=0,no1,no2,air1,air2;i<4*s;i++)\n    {\n        for(int j=0;j<4*s;j++)\n        {\n            no1=i/4;no2=j/4;air1=i%4;air2=j%4;\n            len=sqrt((C[no1].x[air1]-C[no2].x[air2])*(C[no1].x[air1]-C[no2].x[air2])+(C[no1].y[air1]-C[no2].y[air2])*(C[no1].y[air1]-C[no2].y[air2]));\n            if(no1==no2 && no1==a) len*=0;\n            else if(no1==no2) len*=C[no1].T;\n            else len*=t;\n            Add(i,j,len);\n        }\n    }\n    Dijkstra();\n    printf(\"%.1f\\n\",min(ans[b*4],min(ans[b*4+1],min(ans[b*4+2],ans[b*4+3]))));\n}\n \nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++) work();\n    return 0;\n}\n```\n\u7b2c2\u6b21\u5199\u9898\u89e3\uff0c\u6c42\u901a\u8fc7QWQ",
        "postTime": 1585838026,
        "uid": 241644,
        "name": "\u6211\u7684\u4e16\u754c\u4e07\u5c81",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\n\n\u7528Airport\u7ed3\u6784\u4f53\u5b58\u50a8\u673a\u573a\u7684x,y\u5750\u6807\uff0c\u7528`airports_`\u6570\u7ec4\u5b58\u50a8\u6240\u6709\u673a\u573a\u3002\u987a\u5e8f\u4e3a\u5148\u5b58\u50a8\u7b2c0\u4e2a\u57ce\u5e02\u76844\u4e2a\u673a\u573a\uff0c\u7136\u540e\u7b2c1\u4e2a\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u3002\u3002\u3002\u6700\u540e\u4e00\u4e2a\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u3002\u6240\u4ee5`airports_[i]`\u673a\u573a\u6240\u5728\u7684\u57ce\u5e02\u7f16\u53f7\u4e3a`i / 4`\u3002\u800c`\u7b2ci\u4e2a\u57ce\u5e02\u7684\u7b2cj\u4e2a\u673a\u573a`\uff0c\u5728`airports_`\u4e2d\u7684\u7f16\u53f7\u5219\u4e3a`i * 4 +\uff4a`\u3002\u8fd9\u4e24\u4e2a\u6362\u7b97\u5b9a\u4e49\u6210\u4e86\u5b8f\u3002\n\n\u8f93\u5165\u65f6\u901a\u8fc7\u6bcf\u4e2a\u57ce\u5e02\u7684\u524d\u4e09\u4e2a\u673a\u573a\u5750\u6807\u8ba1\u7b97\u6700\u540e\u4e00\u4e2a\u673a\u573a\u5750\u6807\u3002\n\n\u7528dijkstra\u8ba1\u7b97\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u6ce8\u610f\uff1a\n\n* dijkstra\u7b97\u6cd5\u53ea\u6709\u4e00\u4e2a\u6e90\uff0c\u800c\u5728\u8fd9\u91cc\u8d77\u70b9\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u5747\u53ef\u4f5c\u4e3a\u8d77\u70b9\uff0c\u6545\u5c06\u8fd94\u4e2a\u673a\u573a\u4e0e\u6e90\u7684\u8ddd\u79bb\u8bbe\u4e3a0\u3002\n\n* \u53ea\u8981\u6536\u5f55\u7684\u673a\u573a\u6240\u5728\u57ce\u5e02\u4e3a\u7ec8\u70b9\u57ce\u5e02\uff0c\u5219\u8fbe\u5230\u76ee\u7684\u5730\u3002\n\n* \u6574\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u5b58\u50a8\u5177\u4f53\u7684\u56fe\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u6536\u5f55\u7684\u673a\u573a\u6765\u8bb2\uff0c\u4efb\u4f55\u5176\u4ed6\u672a\u6536\u5f55\u7684\u673a\u573a\u5747\u4e3a\u90bb\u63a5\u70b9\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u76f4\u7ebf\u8ddd\u79bb\uff0c\u6b64\u65f6\u82e5\u5b83\u4eec\u5728\u540c\u4e00\u57ce\u5e02\uff0c\u5219\u5b83\u4eec\u4e4b\u95f4\u7684\u8d39\u7528\u4e3a\u76f4\u7ebf\u8ddd\u79bb\u4e58\u4ee5\u8be5\u57ce\u5e02\u7684\u94c1\u8def\u8d39\uff0c\u5426\u5219\u8d39\u7528\u4e3a\u76f4\u7ebf\u8ddd\u79bb\u4e58\u4ee5\u822a\u7ebf\u8d39\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <math.h>\nusing namespace std;\n\n#define N_AIRPORTS_PER_CITY 4 //\u6bcf\u4e2a\u57ce\u5e02\u7684\u673a\u573a\u6570\n#define GET_CITY_INDEX(airport_idx) ((airport_idx) / N_AIRPORTS_PER_CITY) //\u5f97\u5230\u4e00\u4e2a\u673a\u573a\u6240\u5c5e\u7684\u57ce\u5e02\u7f16\u53f7\n#define GET_AIRPORT_INDEX(city_idx, i) ((city_idx) * N_AIRPORTS_PER_CITY + (i)) //\u5f97\u5230\u4e00\u4e2a\u57ce\u5e02\u7b2ci\u4e2a\u673a\u573a\u7684\u7f16\u53f7\n#define NO_VALUE -1\n\nclass CarRoute {\npublic:\n    CarRoute() {}\n    ~CarRoute() {}\n\n    void solve(); //\u4e3b\u51fd\u6570\n\nprivate:\n    struct Airport {\n        //\u673a\u573a\u7684\u5750\u6807\n        int x; \n        int y;\n    };\n\n    int square(int x) { return x * x; }\n\n    /* \u8fd4\u56de\u4e24\u4e2a\u673a\u573a\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb */\n    float getAirportDist(Airport& a, Airport& b);\n\n    /* \u7528dijkstra\u6c42\u6700\u77ed\u8def */\n    float dijkstra(int src_city, int des_city);\n\n    int nAirports_; //\u603b\u673a\u573a\u6570\u91cf\n    Airport *airports_; //\u673a\u573a\u6570\u7ec4\uff0c\u4f9d\u6b21\u5b58\u50a8\u7b2c0\u4e2a\uff0c\u7b2c1\u4e2a\u3002\u3002\u3002\u57ce\u5e02\u76844\u4e2a\u673a\u573a\n\n    int cost_air_; //\u822a\u7ebf\u5355\u4f4d\u91cc\u7a0b\u7684\u4ef7\u683c\n    int *cost_train_; //cost_train_[i]\u4e3a\u7b2ci\u4e2a\u57ce\u5e02\u4e2d\u9ad8\u901f\u94c1\u8def\u7684\u5355\u4f4d\u91cc\u7a0b\u4ef7\u683c\n};\n\nvoid CarRoute::solve() {\n    int nCities, src_city, des_city; //\u57ce\u5e02\u6570\uff0c\u8d77\u70b9\uff0c\u7ec8\u70b9\n    scanf(\"%d %d %d %d\", &nCities, &cost_air_, &src_city, &des_city);\n    src_city--; //\u6539\u4e3a\u4ece0\u5f00\u59cb\u7f16\u53f7\n    des_city--;\n    nAirports_ = nCities * N_AIRPORTS_PER_CITY;\n    airports_ = new Airport[nAirports_];\n    cost_train_ = new int[nCities];\n    for (int i = 0; i < nCities; i++) {\n        int ax, ay, bx, by, cx, cy, dx, dy;\n        //\u8f93\u5165\u6bcf\u4e2a\u57ce\u5e02\u524d\u4e09\u4e2a\u673a\u573a\n        scanf(\"%d %d %d %d %d %d %d\", &ax, &ay, &bx, &by, &cx, &cy, cost_train_ + i);\n        airports_[GET_AIRPORT_INDEX(i, 0)].x = ax;\n        airports_[GET_AIRPORT_INDEX(i, 0)].y = ay;\n        airports_[GET_AIRPORT_INDEX(i, 1)].x = bx;\n        airports_[GET_AIRPORT_INDEX(i, 1)].y = by;\n        airports_[GET_AIRPORT_INDEX(i, 2)].x = cx;\n        airports_[GET_AIRPORT_INDEX(i, 2)].y = cy;\n        int abSquare = square(ax - bx) + square(ay - by);\n        int acSquare = square(ax - cx) + square(ay - cy);\n        int bcSquare = square(bx - cx) + square(by - cy);\n        if (abSquare == acSquare + bcSquare) { //c\u4e3a\u76f4\u89d2\u9876\u70b9\n            dx = ax + bx - cx;\n            dy = ay + by - cy;\n        }\n        else if (acSquare == abSquare + bcSquare) { //b\u4e3a\u76f4\u89d2\u9876\u70b9\n            dx = ax + cx - bx;\n            dy = ay + cy - by;\n        }\n        else { //a\u4e3a\u76f4\u89d2\u9876\u70b9\n            dx = bx + cx - ax;\n            dy = by + cy - ay;\n        }\n        //\u6700\u540e\u4e00\u4e2a\u673a\u573a\u7684\u5750\u6807\u5df2\u786e\u5b9a\n        airports_[GET_AIRPORT_INDEX(i, 3)].x = dx;\n        airports_[GET_AIRPORT_INDEX(i, 3)].y = dy;\n    }\n    float minCost = dijkstra(src_city, des_city); //\u8ba1\u7b97\u6700\u77ed\u8def\n    printf(\"%.1f\\n\", minCost);\n    free(airports_);\n    free(cost_train_);\n}\n\nfloat CarRoute::getAirportDist(Airport & a, Airport & b) {\n    return sqrt(square(a.x - b.x) + square(a.y - b.y));\n}\n\nfloat CarRoute::dijkstra(int src_city, int des_city) {\n    float *cost = new float[nAirports_]; //cost[i]\u8868\u793a\u4ece\u8d77\u70b9\u5230\u7b2ci\u4e2a\u673a\u573a\u7684\u5f53\u524d\u6700\u5c0f\u8d39\u7528\n    bool *collected = new bool[nAirports_];\n    fill(cost, cost + nAirports_, NO_VALUE);\n    fill(collected, collected + nAirports_, false);\n    for (int i = 0; i < 4; i++) //\u5c06\u8d77\u70b9\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u7684cost\u8bbe\u4e3a0\n        cost[GET_AIRPORT_INDEX(src_city, i)] = 0;\n    while (true) {\n        int minV = NO_VALUE;\n        float minCost = NO_VALUE;\n        //\u5728\u672a\u6536\u5f55\u673a\u573a\u4e2d\u627e\u5230cost\u6700\u5c0f\u7684\n        for (int i = 0; i < nAirports_; i++)\n            if (!collected[i] && cost[i] != NO_VALUE && (cost[i] < minCost || minCost == NO_VALUE)) {\n                minV = i;\n                minCost = cost[i];\n            }\n        int minCity = GET_CITY_INDEX(minV); //minCity\u4e3a\u6700\u5c0fcost\u673a\u573aminV\u6240\u5728\u57ce\u5e02\n        if (minCity == des_city) { //\u82e5\u4e0e\u7ec8\u70b9\u5728\u540c\u4e00\u57ce\u5e02\n            free(cost);\n            free(collected);\n            return minCost;\n        }\n        if (minV == NO_VALUE) break;\n        collected[minV] = true; //\u6536\u5f55minV\n        for (int i = 0; i < nAirports_; i++) \n            if (!collected[i]) {\n                float dist = getAirportDist(airports_[minV], airports_[i]); //dist\u4e3aminV\u5230i\u7684\u76f4\u7ebf\u8ddd\u79bb\n                //\u82e5minV\u4e0ei\u5728\u540c\u4e00\u57ce\u5e02\u4e2d\uff0c\u5219\u4eceminV\u5230i\u7684\u8d39\u7528\u4e3adist\u4e58\u4ee5\u8be5\u57ce\u5e02\u7684\u94c1\u8def\u8d39\u7528\uff0c\u5426\u5219\u4e3adist\u4e58\u4ee5\u822a\u7ebf\u8d39\u7528\n                float cost_tmp = GET_CITY_INDEX(i) == minCity ? dist * cost_train_[minCity] : dist * cost_air_;\n                if (minCost + cost_tmp < cost[i] || cost[i] == NO_VALUE) { //\u82e5\u901a\u8fc7minV\u4f7fcost[i]\u53d8\u5c0f\n                    cost[i] = minCost + cost_tmp; //\u66f4\u65b0\n                }\n            }\n    } //while\n    free(cost);\n    free(collected);\n    return NO_VALUE;\n}\n\n\nint main() {\n    CarRoute carRoute;\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; i++) {\n        carRoute.solve();\n    }\n    return 0;\n}\n```\n",
        "postTime": 1552726135,
        "uid": 194439,
        "name": "rediserver",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u771f\u662f\u4e00\u9053\u7edd\u5999~~\u6bd2\u7624\u81f3\u6781~~\u7684\u9898\u76ee\n\n\u672c\u4eba\u8c03\u4e86\u5c06\u8fd1\u4e24\u4e2a\u5c0f\u65f6\u624d\u8c03\u51fa\u6765\n\n\u521a\u5f00\u59cb\u4e00\u770b\uff0c\u4e0d\u5c31\u662f\u4e2a\u6700\u77ed\u8def\u561b\uff0c\u600e\u4e48\u6807\u6210\u84dd\u9898\u4e86\u5462\uff1f\n\n\u7136\u540e\u8d8a\u5199\u4ee3\u7801\u8d8a\u611f\u5230\u8fd9\u9898\u7684\u6bd2\u7624\u3002\u3002\u3002\n\n\u5176\u5b9e\u8fd9\u9898\u4e3b\u8981\u662f\u6784\u56fe\u90e8\u5206\u5341\u5206\u8270\u96be\uff0c\u6784\u56fe\u5b8c\u540e\u4e00\u4e2a\u6700\u77ed\u8def\u5c31\u641e\u5b9a\u4e86\uff08\u6211\u7528\u7684Floyd\uff0c\u6ce8\u610f\u4e0d\u80fd\u7528Dijkstra\u6216Bellman\u2014Ford\uff0c\u4f1aT\uff0c\u5f53\u7136\u6709\u4f18\u5316\u795e\u7287\u80fd\u4f18\u5316\u51fa\u6765\u4e5f\u884c\uff09\n\n\u9996\u5148\uff0c\u6211\u7528\u52fe\u80a1\u5b9a\u7406\u53ca\u4e00\u8f74\u5bf9\u79f0\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\n\n\u7136\u540e\uff0c\u5bf9\u5404\u4e2a\u70b9\u8fdb\u884c\u8fde\u8fb9\n\n\u6700\u540e\u4e00\u4e2aFloyd\u5c31\u641e\u5b9a\u4e86\n\n\u4e0d\u61c2Floyd\u7684\u5c0f\u4f19\u4f34\u4eec\u6233\u8fd9\u91cc>Here<\n\n\u542c\u8d77\u6765\u7b80\u5355\uff0c\u8c03\u8d77\u6765\u5c31\u6000\u7591\u4eba\u751f\u4e86\n\n\u5177\u4f53\u770b\u4ee3\u7801\u5427\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u65e2\u7528cin\u53c8\u7528scanf\uff0c\u90a3\u662f\u672c\u849f\u84bb\u592a\u5f31\u4e86\u4e0d\u4f1a\u6d6e\u70b9\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n\nemm........\n```\n\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <stack>\n#include <queue>\n#include <map>\n#include <cstring>\n\n#define FOR(i, a, b) for(int i = a; i <= b; i++)\n#define _FOR(i, a, b) for(int i = a; i >= b; i--)\n//\u7801\u98ce\u6e05\u5947\n\nusing namespace std;\nconst double X = 0.0000001;\nint n, s, a, b, size;\ndouble edge[401][401], f[401][401], train[101];\ndouble t, ans = 100000.0;\n//n,s,t,a,b\u5982\u9898\u610f\u601d\uff0csize\u662f\u673a\u573a\u4e2a\u6570\uff0ctrain\u662f\u94c1\u8def\u4ef7\u683c\uff0cf\u662fFloyd\u6570\u7ec4\uff0cedge\u662f\u8054\u51fa\u6765\u7684\u8fb9\n\nstruct airport\n{\n    int x, y;\n}c[401];\n//\u4ee3\u8868\u6bcf\u4e2a\u673a\u573a\u7684\u6a2a\u5750\u6807\uff0c\u7eb5\u5750\u6807\n\ndouble dis(int x1, int y1, int x2, int y2)\n{\n    return sqrt(abs(x1 - x2) * abs(x1 - x2) + abs(y1 - y2) * abs(y1 - y2));\n}\n//\u8ddd\u79bb\u51fd\u6570\n\nvoid init()\n{\n    cin >> s >> t >> a >> b;\n    FOR(i, 1, s)\n    {\n        size++;\n        scanf(\"%d%d\", &c[size].x, &c[size].y);\n        size++;\n        scanf(\"%d%d\", &c[size].x, &c[size].y);\n        size++;\n        scanf(\"%d%d\", &c[size].x, &c[size].y);\n        cin >> train[i];\n        double e1 = dis(c[size].x, c[size].y, c[size - 1].x, c[size - 1].y);\n        double e2 = dis(c[size].x, c[size].y, c[size - 2].x, c[size - 2].y);\n        double e3 = dis(c[size - 1].x, c[size - 1].y, c[size - 2].x, c[size - 2].y);\n        size++;\n        if(e3 * e3 - e1 * e1 - e2 * e2 <= X && e3 * e3 - e1 * e1 - e2 * e2 >= -1 * X)\n            c[size].x = c[size - 2].x + c[size - 3].x - c[size - 1].x, c[size].y = c[size - 2].y + c[size - 3].y - c[size - 1].y;\n        else if(e2 * e2 - e1 * e1 - e3 * e3 <= X && e2 * e2 - e1 * e1 - e3 * e3 >= -1 * X)\n            c[size].x = c[size - 1].x + c[size - 3].x - c[size - 2].x, c[size].y = c[size - 1].y + c[size - 3].y - c[size - 2].y;\n        else \n            c[size].x = c[size - 1].x + c[size - 2].x - c[size - 3].x, c[size].y = c[size - 1].y + c[size - 2].y - c[size - 3].y;\n     //\u5224\u65ad\u90a3\u6761\u8fb9\u662f\u659c\u8fb9\u53ca\u6c42\u5750\u6807\uff0c\u5177\u4f53\u516c\u5f0f\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u63a8\u4e00\u4e0b\n     //\u63d0\u793a\uff1a\u4e0d\u662f\u659c\u8fb9\u7aef\u70b9\u7684\u70b9\u4e0e\u8981\u6c42\u7684\u70b9\u5173\u4e8e\u957f\u65b9\u5f62\u4e2d\u5fc3\u5bf9\u79f0\n\n    }\n}\n//\u8bfb\u5165\n\nvoid build()\n{\n    for(int i = 1;i <= size;i += 4)\n       FOR(j, i, i + 3)\n           FOR(k, j + 1, i + 3)\n           {\n                edge[j][k] = dis(c[j].x, c[j].y, c[k].x, c[k].y) * train[(i / 4) + (i % 4 != 0)];\n                edge[k][j] = edge[j][k];\n           }\n     //\u4e00\u4e2a\u57ce\u5e02\u91cc\u7684   \n\n    FOR(i, 1, size)\n        FOR(j, ((i - i % 4) + (i % 4 != 0) * 4 + 1), size)\n        {\n            edge[i][j] = dis(c[i].x, c[i].y, c[j].x, c[j].y) * t;\n            edge[j][i] = edge[i][j];\n        }\n\n      //\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\n}\n//\u5efa\u8fb9\n\nvoid work()\n{\n    init();\n    build();\n    FOR(i, 0, 400)\n        FOR(j, 0, 400)\n            f[i][j] = 10000.0;\n    FOR(i, 1, size)\n        FOR(j, 1, size)\n            if(i == j) f[i][j] = 0;\n    FOR(i, 1, size)\n        FOR(j, 1, size)\n            if(edge[i][j]) f[i][j] = edge[i][j];\n    FOR(k, 1, size)\n        FOR(i, 1, size)\n            FOR(j, 1, size)\n                f[i][j] = min(f[i][j], f[i][k] + f[k][j]);\n    //Floyd\u4e0d\u89e3\u91ca  \n\n    FOR(i, 4 * a - 3, 4 * a)\n        FOR(j, 4 * b - 3, 4 * b)\n                ans = min(ans, f[i][j]);\n    printf(\"%.1f\", ans);\n    //\u6c42\u7b54\u6848\n}\nint main()\n{\n    scanf(\"%d\", &n);\n    while(n--)\n        work();\n\n    //\u7f8e\u4e3d\u7684\u4e3b\u51fd\u6570\n    return 0;\n}\n```",
        "postTime": 1546301464,
        "uid": 89354,
        "name": "Disillusionment",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "# Ads\n\n\u4e2a\u4eba\u535a\u5ba2\u540c\u6b65\uff1a\n\n[wordpress](https://oldblog.cinema000.xyz)\n\n[hexo](https://blog.cinema000.xyz)\n\n\u6350\u52a9\u6211\u8bf7\u70b9\u51fbwordpress\u7248\uff08\u5df2\u52a0\u5165Google Adsense\uff09\n\n# \u5206\u6790\n\n\u6ca1\u6709\u5199Dijkstra\u7684\uff0c\u5c31\u8bbe\u7f6e\u8d85\u7ea7\u6e90\u548c\u8d85\u7ea7\u6c47\uff0c\u7136\u540e\u5efa\u56fe\u8dd1\u4e00\u4e2aDijkstra\u3002\n\n```\n#include<cstdio>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<algorithm>\nconst double INF = 0x3f3f3f3f + 0.0;\nconst int MAXN = 100 * 4 + 600;\nstruct Edge{\n    int v;double d;\n    Edge(){}\n    Edge(int v,double d){this -> v = v;this -> d = d;}\n};\nstruct Pair{\n    double d;int u;\n    Pair(){}\n    Pair(double d,int u){this -> d = d;this -> u = u;}\n    bool operator < (const Pair &rhs) const{return d > rhs.d;}\n};\nclass Dijkstra{\npublic:\n    std::vector<Edge> G[MAXN];bool hash[MAXN];int pi[MAXN];double dis[MAXN];\n    inline void addEdge(int u,int v,double d){G[u].push_back(Edge(v,d));}\n    void dijkstra(int s){\n        std::fill(hash,hash + MAXN,false);std::fill(dis,dis + MAXN,INF);\n        std::priority_queue<Pair> Q;Q.push(Pair(0,s));dis[s] = 0;\n        while(Q.size()){\n            int u = Q.top().u;Q.pop();\n            if(hash[u]) continue;\n            hash[u] = true;\n            for(int i = 0;i < G[u].size();i++){\n                Edge &e = G[u][i];\n                if(dis[e.v] > dis[u] + e.d){\n                    dis[e.v] = dis[u] + e.d;\n                    pi[e.v] = G[u][i].v;\n                    Q.push(Pair(dis[e.v],e.v));\n                }\n            }\n        }\n    }\n};\nstruct City{\n    int id,tr;\n    double X[5],Y[5];\n    City(){}\n    City(double x1,double y1,double x2,double y2,double x3,double y3,double x4,double y4,int tr,int id){\n        X[1] = x1,Y[1] = y1;X[2] = x2,Y[2] = y2;X[3] = x3,Y[3] = y3;X[4] = x4,Y[4] = y4;this -> tr = tr;this -> id = id;\n    }\n};City C[MAXN];\ninline double getX(double midX,int x){return 2 * midX - x;}\ninline double getY(double midY,int y){return 2 * midY - y;}\ninline double getDis(double x1,double y1,double x2,double y2){return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);}\nint main(){\n    int T,s,t,a,b,SS = 666,TT = 777,x1,x2,x3,y1,y2,y3,tr;scanf(\"%d\",&T);\n    double d1,d2,d3,max,x4,y4;\n    while(T--){\n        Dijkstra di;\n        scanf(\"%d %d %d %d\",&s,&t,&a,&b);\n        for(int i = 1;i <= s;i++){\n            scanf(\"%d %d %d %d %d %d %d\",&x1,&y1,&x2,&y2,&x3,&y3,&tr);\n            d1 = getDis(x1,y1,x2,y2);d2 = getDis(x2,y2,x3,y3);d3 = getDis(x1,y1,x3,y3);\n            max = std::max(std::max(d1,d2),d3);\n            if(d1 == max) x4 = getX((double)(x1 + x2) / 2,(double)x3),y4 = getY((double)(y1 + y2) / 2,(double)y3);\n            else if(d2 == max) x4 = getX((double)(x2 + x3) / 2,(double)x1),y4 = getY((double)(y2 + y3) / 2,(double)y1);\n            else x4 = getX((double)(x1 + x3) / 2,(double)x2),y4 = getY((double)(y1 + y3) / 2,(double)y2);\n            C[i] = City((double)x1,(double)y1,(double)x2,(double)y2,(double)x3,(double)y3,x4,y4,tr,i);\n        }\n        for(int i = 1;i <= s;i++) for(int k1 = 1;k1 <= 4;k1++) for(int j = 1;j <= s;j++) for(int k2 = 1;k2 <= 4;k2++){\n            if(i == j && k1 < k2)\n                di.addEdge((i - 1) * 4 + k1,(j - 1) * 4 + k2,C[i].tr * sqrt(getDis(C[i].X[k1],C[i].Y[k1],C[j].X[k2],C[j].Y[k2]))),\n                di.addEdge((j - 1) * 4 + k2,(i - 1) * 4 + k1,C[i].tr * sqrt(getDis(C[i].X[k1],C[i].Y[k1],C[j].X[k2],C[j].Y[k2])));\n            if(i != j)\n                di.addEdge((i - 1) * 4 + k1,(j - 1) * 4 + k2,t * sqrt(getDis(C[i].X[k1],C[i].Y[k1],C[j].X[k2],C[j].Y[k2]))),\n                di.addEdge((j - 1) * 4 + k2,(i - 1) * 4 + k1,t * sqrt(getDis(C[i].X[k1],C[i].Y[k1],C[j].X[k2],C[j].Y[k2])));        \n        }\n        for(int i = 1;i <= 4;i++) di.addEdge(SS,(a - 1) * 4 + i,0),di.addEdge((b - 1) * 4 + i,TT,0);\n        di.dijkstra(SS);\n        printf(\"%.1lf\\n\",di.dis[TT]);\n    }\n\n    return 0;\n}\n```",
        "postTime": 1539864902,
        "uid": 77211,
        "name": "i9_7980XE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "###\u8fd9\u9053\u9898\u5176\u5b9e\u7565\u7b97spfa\u7684\u88f8\u9898\uff0c\u4e3b\u8981\u5c31\u662f\u521d\u59cb\u5316\u8981\u9ebb\u70e6\u4e00\u4e9b\u3002\n\n\u4f5c\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u5f53\u7136\u4e0d\u4f1a\u5927\u4f6c\u4eec\u7684\u4ec0\u4e48\u9ad8\u7aef\u516c\u5f0f\uff0c\u5bf9\u4e8e\u7b2c\u56db\u4e2a\u70b9\u6211\u7528\u4e24\u6b21\u4e2d\u70b9\u5750\u6807\u66b4\u529b\u6c42\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u77e9\u5f62\u7684\u4e2d\u5fc3\u4e00\u5b9a\u5728\u5bf9\u89d2\u7ebf\u4e2d\u70b9\u4e0a\uff08\u8be6\u89e3\u89c1\u521d\u4e2d\u6570\u5b66\u4e66\u7684\u6211\u4e5f\u4e0d\u77e5\u9053\u662f\u54ea\u518c233333\uff09\n\n\u65e2\u7136\u77e5\u9053\u4e09\u4e2a\u70b9\uff0c\u90a3\u4e48\u5fc5\u5b9a\u77e5\u9053\u67d0\u6761\u5bf9\u89d2\u7ebf\u7684\u4e24\u70b9\uff08\u8fd9\u91cc\u6211\u662f\u66b4\u529b\u627e\u6700\u957f\u8fb9\uff0c\u542c\u8bf4\u5927\u4f6c\u4eec\u6709\u5404\u79cd\u4ec0\u4e48\u5411\u91cf\u554a\uff0c\u4ec0\u4e48\u4f59\u5f26\u5b9a\u7406\u627e\u76f4\u89d2\u554a\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u600e\u4e48\u6253\u7b80\u77ed\uff0c\u8fd9\u4e5f\u662f\u6211\u849f\u84bb\u7684\u5730\u65b9\u5427\uff09\uff0c\u6211\u4eec\u7528\u7b2c\u4e00\u6b21\u4e2d\u70b9\u5750\u6807\u516c\u5f0f\u6c42\u51fa\u5176\u4e2d\u5fc3\u5750\u6807\uff1b\n\n\u7136\u540e\u518d\u7528\u5269\u4e0b\u7684\u90a3\u4e2a\u70b9\u518d\u6765\u4e00\u6b21\u5750\u6807\u516c\u5f0f\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\u5373\u53ef\u3002\n\n\nTips:\u8fb9\u6743=\u8def\u00d7\u8d39\u7528\n\n#\u597d\u5427\u8fd9\u91cc\u624d\u662f\u91cd\u70b9\n\n\nspfa\u6c42\u7684\u662f\u5355\u6e90\u6700\u77ed\u8def\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u57ce\u5e02A\uff08\u56db\u4e2a\u673a\u573a\uff09\u5230\u57ce\u5e02B\uff08\u56db\u4e2a\u673a\u573a\uff09\u7684\u6700\u77ed\u8def\u3002\n\n###\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u4e2a\u865a\u70b9\uff0c\u4f7f\u8be5\u70b9\u5230A\u57ce\u5e02\u7684\u56db\u4e2a\u673a\u573a\u8fb9\u6743\u90fd\u4e3a0\uff0c\u8fd9\u6837\u6211\u4eec\u7684\u7b54\u6848\u5c31\u662f\u8be5\u865a\u70b9\u5230B\u57ce\u5e02\u56db\u4e2a\u673a\u573a\u7684\u6700\u5c0f\u503c\u3002\n\n\u5728\u4ee3\u7801\u4e2d\u6211\u6ca1\u6709\u5efa\u8fd9\u4e2a\u865a\u70b9\u8fde\u8fb9\uff08\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\uff09\n\n\n\u6211\u4eec\u66f4\u65b0\u56db\u4e2a\u8d77\u70b9\u7684dist[i]\u4e3a0\u662f\u7b49\u6548\u7684\u3002\n\n\n#\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ndouble N;\ndouble A,B,s,t;\ndouble ans;\ndouble x[500],y[500];\ndouble dist[500];\nint num;\nbool inq[500];\nqueue<int>q;\nstruct node{\n    int v,next;\n    double w;\n}a[20000];\ndouble head[111];\nint e;\ninline void insert(int u,int v,double w){\n    a[++e].v=v;\n    a[e].w=w;\n    a[e].next=head[u];\n    head[u]=e;\n}\ndouble distant(double nx,double ny,double mx,double my){\n    return sqrt((nx-mx)*(nx-mx)+(ny-my)*(ny-my));\n}\ndouble T[111];\ndouble X1,X2,X3,X4,Y1,Y2,Y3,Y4;\nvoid work(){\n    double nx,ny,mx,my,qx,qy;\n    double l1=distant(X1,Y1,X2,Y2);\n    double l2=distant(X1,Y1,X3,Y3);\n    double l3=distant(X2,Y2,X3,Y3);\n    double l=max(l1,max(l2,l3));\n    if(l1 == l)nx=X1,ny=Y1,mx=X2,my=Y2,qx=X3,qy=Y3;\n    if(l2 == l)nx=X1,ny=Y1,mx=X3,my=Y3,qx=X2,qy=Y2;\n    if(l3 == l)nx=X2,ny=Y2,mx=X3,my=Y3,qx=X1,qy=Y1;\n    double midx=(nx+mx)/2,midy=(ny+my)/2;\n    X4=2*midx-qx;Y4=2*midy-qy;\n}\ninline void spfa(){\n    while(!q.empty()){\n        int u=q.front();q.pop();inq[u]=false;\n        for(int i=head[u];i;i=a[i].next){\n            int v=a[i].v;\n            if(dist[u]+a[i].w<dist[v]){\n                dist[v]=dist[u]+a[i].w;\n                if(!inq[v]){\n                    q.push(v);\n                    inq[v]=true;\n                }\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%lf\",&N);\n    while(N--){\n        e=0;\n        ans=1e9+7;\n        memset(a,0,sizeof(a));\n        memset(head,0,sizeof(head));\n        memset(T,0,sizeof(T));\n        memset(x,0,sizeof(x));\n        memset(y,0,sizeof(y));\n        memset(inq,0,sizeof(inq));\n        scanf(\"%lf%lf%lf%lf\",&s,&t,&A,&B);\n        for(int i=1;i<=s;i++){\n            scanf(\"%lf%lf%lf%lf%lf%lf%lf\",&X1,&Y1,&X2,&Y2,&X3,&Y3,&T[i]);\n            work();\n            x[++num]=X1,y[num]=Y1;\n            x[++num]=X2,y[num]=Y2;\n            x[++num]=X3,y[num]=Y3;\n            x[++num]=X4,y[num]=Y4;\n        }\n        for(int i=1;i<=num;i++)dist[i]=1e9+7;\n        for(int i=1;i<=num;i++)\n        for(int j=1;j<=num;j++){\n            if(i == j)continue;\n            int city1=(i-1)/4+1,city2=(j-1)/4+1;\n            if(city1 == city2){\n                double w=distant(x[i],y[i],x[j],y[j])*T[city1];\n                insert(i,j,w);\n                insert(j,i,w);\n            }\n            else{\n                double w=distant(x[i],y[i],x[j],y[j])*t;\n                insert(i,j,w);\n                insert(j,i,w);\n            }\n        }\n        for(int i=(A-1)*4+1;i<=4*A;i++){\n            q.push(i);\n            inq[i]=true;\n            dist[i]=0;\n        }\n        spfa();\n        for(int i=(B-1)*4+1;i<=4*B;i++)ans=min(dist[i],ans);\n        printf(\"%.1lf\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1508915774,
        "uid": 55644,
        "name": "shadow__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "/\\*\n\u8fd9\u9053\u9898\u5176\u5b9e\u6ca1\u6709\u591a\u96be\n\n\u53ea\u662f\u7ec6\u8282\u6bd4\u8f83\u591a\n\n\u5177\u4f53\u770b\u4ee3\u7801\u89e3\u91ca\n\n\\*/\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<iostream>\nusing namespace std;\nconst double INF=0x7fffffff;\nint T;\nint s,t,A,B;\nint xa,xb,xc,ya,yb,yc,xd,yd;//\u6bcf\u4e2a\u57ce\u5e02\u56db\u4e2a\u9876\u70b9\u7684\u5750\u6807 \nint p,cnt;\nint x[410]={0},y[410]={0},cost[110]={0};//x[],y[] \u5206\u522b\u5b58\u50a8\u4ee5 4 \u4e3a\u5468\u671f\u7684\u6a2a\u7eb5\u5750\u6807 \ndouble dis[410][410];//dis[i][j]: \u7b2c i \u53f7\u70b9\u4e0e\u7b2c j \u53f7\u70b9\u7684\u8ddd\u79bb \ndouble ans=INF;\nvoid lab(int xa,int ya,int xb,int yb,int xc,int yc)//\u6839\u636e\u4e00\u4e2a\u57ce\u5e02\u4e09\u4e2a\u9876\u70b9\u7684\u5750\u6807\u6c42\u7b2c\u56db\u4e2a\u9876\u70b9\u7684\u5750\u6807 \n```\n{//\u5f88\u5bb9\u6613\u80fd\u591f\u63a8\u51fa\u7b2c\u56db\u4e2a\u9876\u70b9\u7684\u5750\u6807\u5c31\u7b49\u4e8e\u4e0e\u5176\u76f8\u90bb\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u5750\u6807\u76f8\u52a0\u518d\u51cf\u53bb\u5176\u5bf9\u89d2\u9876\u70b9\u7684\u5750\u6807\uff0c\u518d\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u5df2\u77e5\u7684\u4e09\u4e2a\u70b9\u4e24\u4e24\u95f4\u7684\u8ddd\u79bb\uff0c\u4ee5\u6b64\u6765\u5224\u65ad\u8c01\u662f\u76f4\u89d2\u8fb9\u8c01\u662f\u659c\u8fb9\n\n\n```cpp\n    double ab=(xa-xb)*(xa-xb)+(ya-yb)*(ya-yb);\n    double ac=(xa-xc)*(xa-xc)+(ya-yc)*(ya-yc);\n    double bc=(xb-xc)*(xb-xc)+(yb-yc)*(yb-yc);\n    if(ab+ac==bc){xd=xb+xc-xa;yd=yb+yc-ya;return;}//A \u4e3a\u76f4\u89d2\u9876\u70b9 \n    if(ab+bc==ac){xd=xa+xc-xb;yd=ya+yc-yb;return;}//B \u4e3a\u76f4\u89d2\u9876\u70b9 \n    if(ac+bc==ab){xd=xa+xb-xc;yd=ya+yb-yc;return;}//C \u4e3a\u76f4\u89d2\u9876\u70b9 \n}\nvoid dist()//\u5148\u5904\u7406\u4e00\u4e2a\u57ce\u5e02\u5185\u4e24\u4e24\u9876\u70b9\u7684\u8ddd\u79bb \n{\n    for(int i=cnt+1;i<=cnt+4;i++) dis[i][i]=0;//\u81ea\u5df1\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a 0 \n    dis[cnt+1][cnt+2]=dis[cnt+2][cnt+1]=sqrt((xa-xb)*(xa-xb)+(ya-yb)*(ya-yb));//\u7b2c ((cnt-1)/4+1) \u4e2a\u57ce\u5e02\u5185\u7b2c 1 \u4e2a\u70b9\u5230\u7b2c 2 \u4e2a\u70b9\u7684\u8ddd\u79bb \n    dis[cnt+1][cnt+3]=dis[cnt+3][cnt+1]=sqrt((xa-xc)*(xa-xc)+(ya-yc)*(ya-yc));//\u7b2c ((cnt-1)/4+1) \u4e2a\u57ce\u5e02\u5185\u7b2c 1 \u4e2a\u70b9\u5230\u7b2c 3 \u4e2a\u70b9\u7684\u8ddd\u79bb \n    dis[cnt+1][cnt+4]=dis[cnt+4][cnt+1]=sqrt((xa-xd)*(xa-xd)+(ya-yd)*(ya-yd));//\u7b2c ((cnt-1)/4+1) \u4e2a\u57ce\u5e02\u5185\u7b2c 1 \u4e2a\u70b9\u5230\u7b2c 4 \u4e2a\u70b9\u7684\u8ddd\u79bb \n    dis[cnt+2][cnt+3]=dis[cnt+3][cnt+2]=sqrt((xb-xc)*(xb-xc)+(yb-yc)*(yb-yc));//\u7b2c ((cnt-1)/4+1) \u4e2a\u57ce\u5e02\u5185\u7b2c 2 \u4e2a\u70b9\u5230\u7b2c 3 \u4e2a\u70b9\u7684\u8ddd\u79bb \n    dis[cnt+2][cnt+4]=dis[cnt+4][cnt+2]=sqrt((xb-xd)*(xb-xd)+(yb-yd)*(yb-yd));//\u7b2c ((cnt-1)/4+1) \u4e2a\u57ce\u5e02\u5185\u7b2c 2 \u4e2a\u70b9\u5230\u7b2c 4 \u4e2a\u70b9\u7684\u8ddd\u79bb \n    dis[cnt+3][cnt+4]=dis[cnt+4][cnt+3]=sqrt((xc-xd)*(xc-xd)+(yc-yd)*(yc-yd));//\u7b2c ((cnt-1)/4+1) \u4e2a\u57ce\u5e02\u5185\u7b2c 3 \u4e2a\u70b9\u5230\u7b2c 4 \u4e2a\u70b9\u7684\u8ddd\u79bb \n}\nvoid wdis()//\u5904\u7406\u7b2c i \u4e2a\u70b9\u5230\u7b2c j \u4e2a\u70b9\u7684\u8d39\u7528 \n{\n    for(int i=1;i<=s*4;i++)\n```\n{//\u56e0\u4e3a\u662f\u70b9\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u5faa\u73af\u8303\u56f4\u7684\u6700\u5927\u503c\u662f s\\*4\n\n```cpp\n        for(int j=1;j<=s*4;j++)\n        {\n            if((i-1)/4==(j-1)/4) dis[i][j]*=cost[(i-1)/4+1];//\u5982\u679c\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u57ce\u5e02\u5185\uff0c\u5219\u7528\u4e24\u70b9\u95f4\u8ddd\u79bb\u4e58\u4ee5\u8fd9\u4e2a\u57ce\u5e02\u9ad8\u901f\u94c1\u8def\u5355\u4f4d\u91cc\u7a0b\u7684\u4ef7\u683c cost[(i-1)/4+1] \n            else dis[i][j]=sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]))*t;//\u5982\u679c\u4e0d\u5728\u540c\u4e00\u4e2a\u57ce\u5e02\u5185\uff0c\u5219\u7528\u4e24\u70b9\u95f4\u8ddd\u79bb\u4e58\u4ee5\u822a\u7ebf\u5355\u4f4d\u91cc\u7a0b\u7684\u4ef7\u683c t \n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\",&T);//\u6570\u636e\u7ec4\u6570 \n    while(T--)\n    {\n        scanf(\"%d%d%d%d\",&s,&t,&A,&B);\n        if(A==B){printf(\"0.0\\n\");continue;}//\u5982\u679c\u8d77\u70b9\u548c\u7ec8\u70b9\u5728\u540c\u4e00\u4e2a\u57ce\u5e02\u5219\u4e0d\u7528\u82b1\u94b1 \n        cnt=0;\n        for(int i=1;i<=s*4;i++) for(int j=1;j<=s*4;j++) dis[i][j]=INF;\n        for(int i=1;i<=s;i++)\n        {\n            scanf(\"%d%d%d%d%d%d%d\",&xa,&ya,&xb,&yb,&xc,&yc,&p);\n            cost[i]=p;\n            lab(xa,ya,xb,yb,xc,yc);\n            dist();\n            x[++cnt]=xa;y[cnt]=ya;//\u5b58\u5750\u6807 \n            x[++cnt]=xb;y[cnt]=yb;\n            x[++cnt]=xc;y[cnt]=yc;\n            x[++cnt]=xd;y[cnt]=yd;\n        }\n        wdis();\n        for(int k=1;k<=s*4;k++)//\u5f17\u6d1b\u4f0a\u5fb7\u6c42\u6700\u77ed\u8def \n        {\n            for(int i=1;i<=s*4;i++)\n            {\n                for(int j=1;j<=s*4;j++)\n                {\n                    dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);\n                }\n            }\n        }\n        for(int i=1;i<=4;i++)//ans \u8bb0\u4e0b A \u57ce\u5e02\u56db\u4e2a\u9876\u70b9\u5230 B \u57ce\u5e02\u56db\u4e2a\u9876\u70b9\u4e2d\u7684\u6700\u77ed\u8ddd\u79bb \n        {\n            for(int j=1;j<=4;j++)\n            {\n                ans=min(ans,dis[(A-1)*4+i][(B-1)*4+j]);\n            }\n        }\n        printf(\"%.1lf\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1506082535,
        "uid": 43003,
        "name": "MenaS",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<vector>\n#include<cstdio>\n#include<stack>\n#include<queue>\n#include<cmath>\n#include<map>\n#include<set>\nusing namespace std;\nconst int N=512,M=0x7fffffff;\nstruct node{\n    int x,y;\n}ap[N];//\u673a\u573a\u5750\u6807\u3002 \nint n,air,sx,tx,cost[N];//\u57ce\u5e02\u6570\u91cf\uff0c\u822a\u7ebf\u82b1\u8d39\uff0c\u8d77\u59cb\u57ce\uff0c\u7ec8\u70b9\u57ce\uff0c\u5404\u57ce\u516c\u8def\u82b1\u8d39\u3002 \ndouble f[N][N],res=1e7;//Floyd\u4f7f\u7528\u7684\u8d39\u7528\u6570\u7ec4\uff0c\u7b54\u6848\u3002 \ndouble dist(int x,int y){\n    return sqrt((double)((ap[x].x-ap[y].x)*(ap[x].x-ap[y].x)+(ap[x].y-ap[y].y)*(ap[x].y-ap[y].y)));\n}//\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u3002 \nint main(){\n    int T;cin>>T;\n    while(T--){\n        memset(f,0x3f,sizeof f);\n        cin>>n>>air>>sx>>tx;sx--;tx--;\n        for(int i=0;i<n;i++){\n            int x1,y1,x2,y2,x3,y3,x4,y4,c;\n            cin>>x1>>y1>>x2>>y2>>x3>>y3>>c;\n            //\u4e0b\u9762\u4e09\u4e2aif\u548celse\u5206\u522b\u5bf9\u5e94\u7b2c\u56db\u4e2a\u70b9\u201c\u5bf9\u9762\u201d\u7684\u70b9\u4e3a1,2,3,\u7684\u60c5\u51b5\u3002\u5224\u65ad\u201c\u5bf9\u9762\u201d\u70b9\u548c\u8ba1\u7b97\u7b2c\u56db\u70b9\u5750\u6807\u7686\u4f7f\u7528\u5411\u91cf\u3002 \n            if((x2-x1)*(y2-y1)+(x3-x1)*(y3-y1)==0)\n                x4=x2+x3-x1,y4=y2+y3-y1;\n            else if((x3-x2)*(y3-y2)+(x1-x2)*(y1-y2)==0)\n                x4=x1+x3-x2,y4=y1+y3-y2;\n            else\n                x4=x1+x2-x3,y4=y1+y2-y3;\n            cost[i]=c;ap[4*i]=(node){x1,y1};ap[4*i+1]=(node){x2,y2};ap[4*i+2]=(node){x3,y3};ap[4*i+3]=(node){x4,y4};\n        }\n        \n        for(int i=0;i<n*4;i++)\n            for(int j=0;j<n*4;j++)\n                f[i][j]=dist(i,j)*((i/4)==(j/4)?cost[i/4]:air);//\u521d\u59cb\u5316f\u6570\u7ec4\uff0ci/4==j/4\u4ee3\u8868i\u4e0ej\u5904\u4e8e\u540c\u4e00\u4e2a\u57ce\u5e02\uff0c\u8d39\u7528\u5355\u4ef7\u4e3acost[i/4](\u663e\u7136\u7b49\u4ef7\u4e8ecost[j/4])\uff1b\n                                                                //\u5426\u5219\u4e0d\u5728\u540c\u4e00\u57ce\u5e02\uff0c\u8d39\u7528\u5355\u4ef7\u4e3a\u822a\u7ebf\u82b1\u8d39\u3002 \n        \n        for(int k=0;k<n*4;k++)\n            for(int i=0;i<n*4;i++)\n                for(int j=0;j<n*4;j++)\n                    f[i][j]=min(f[i][j],f[i][k]+f[k][j]);//Floyd.\n        \n        for(int i=0;i<4;i++)\n            for(int j=0;j<4;j++)\n                res=min(f[sx*4+i][tx*4+j],res);//\u6700\u7ec8\u7b54\u6848\u662f\u4ece\u8d77\u59cb\u57ce\u56db\u4e2a\u673a\u573a\u4e2d\u4efb\u610f\u4e00\u4e2a\u5230\u7ec8\u70b9\u57ce\u56db\u4e2a\u673a\u573a\u4e2d\u4efb\u610f\u4e00\u4e2a\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \n        \n        printf(\"%.1lf\\n\",res);\n    }\n    return 0;\n}\n```",
        "postTime": 1502546648,
        "uid": 10832,
        "name": "Darkins",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "## \u5411\u91cf\u6c42\u7b2c\u56db\u70b9+SPFA\n\n- \u6c42\u7b2c\u56db\u70b9\u7684\u65b9\u5f0f\u597d\u50cf\u6709\u70b9\u9ebb\u70e6= =\n\n\u5148\u7528\u5411\u91cf\u6c42\u51fa\u4e09\u4e2a\u70b9\u4e2d\u7684\u76f4\u89d2\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u786e\u5b9a\u4f4d\u7f6e\u540e\u7684\u5df2\u77e5\u4e09\u70b9\u5750\u6807\u8ba1\u7b97\u7b2c\u56db\u70b9\u3002\n\n- \u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5b58\u8fb9\u5566\n\n\u6bcf\u4e2a\u673a\u573a\u5360\u4e00\u4e2a\u70b9\u3002\n\n\u76f4\u63a5\u66b4\u529b\u5faa\u73af\u628a\u706b\u8f66\u548c\u98de\u673a\u7684\u8fb9\u4e00\u5757\u5b58\u4e86...\n\n\u8fd8\u6709\u6ce8\u610f\u662f\u65e0\u5411\u8fb9\uff0c\u53ef\u80fd\u53ea\u6709\u6211\u4f1a\u72af\u8fd9\u4e48sb\u7684\u9519\u8bef= =\n\n- \u4ece\u8d77\u70b9\u57ce\u5e02\u76844\u4e2a\u673a\u573a\u5206\u522bSPFA\uff0c\u51714\u6b21\u3002\n\n\n- \u9ed8\u9ed8\u9644\u4e0a\u4ee3\u7801\u2193\n\n \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\n#include<vector>\nusing namespace std;\n#define INF 1000000000.0\nint tt,s,t,a,b;\nint prize[170];\ndouble d[20000];\nstruct cc\n{\n    int x,y,p;\n}city[170][5];\nstruct vec\n{\n    int x,y;\n    int p,q; \n};\nstruct node\n{\n    int v;\n    double w;\n};\nvector<node> edge[20000];\nint count(int k)//\u6c42\u7b2c\u56db\u70b9 \n{\n    int c=0;vec v[5];\n    for(int i=1;i<3;i++)\n    {\n        for(int j=i+1;j<=3;j++)\n        {\n            c++;\n            v[c].x=city[k][i].x-city[k][j].x;\n            v[c].y=city[k][i].y-city[k][j].y;\n            v[c].p=i;\n            v[c].q=j;\n        }\n    } \n    bool sol=0;\n    for(int i=1;i<c;i++)\n    {\n        for(int j=i+1;j<=c;j++)\n        {\n            if((v[i].x*v[j].x)+(v[i].y*v[j].y) == 0)\n            {\n                int wei[5]={0},zu=0;\n                wei[v[i].p]++;wei[v[i].q]++;\n                wei[v[j].p]++;wei[v[j].q]++;\n                int oth[2]={0},cc=0;\n                for(int w=1;w<=3;w++){\n                    if(wei[w] == 2)\n                        zu=w;\n                    else\n                        oth[++cc]=w;\n                }\n                if(city[k][oth[1]].x  > city[k][oth[2]].x ||(city[k][oth[1]].x  == city[k][oth[2]].x && city[k][oth[1]].y  > city[k][oth[2]].y ))\n                {\n                    int temp=oth[2];\n                    oth[2]=oth[1];\n                    oth[1]=temp;\n                }\n                \n                city[k][4].x=city[k][oth[1]].x+city[k][oth[2]].x-city[k][zu].x;\n                city[k][4].y=city[k][oth[1]].y+city[k][oth[2]].y-city[k][zu].y;\n                sol=1;\n                break;\n            }\n        }\n        if(sol==1)break;\n    }\n}\n\ndouble countdis(int i,int n1,int j,int n2)\n{\n    return sqrt((city[i][n1].x-city[j][n2].x)*(city[i][n1].x-city[j][n2].x)\n               +(city[i][n1].y-city[j][n2].y)*(city[i][n1].y-city[j][n2].y));\n}\nvoid SPFA(int a)\n{\n    for(int i=0;i<=4*s+1;i++)\n    {\n        d[i]=INF;\n    }\n    queue<int>q;\n    q.push(a);\n    d[a]=0.0;\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        for(int i=0;i<edge[x].size();i++)\n        {\n            int v=edge[x][i].v;\n            double w=edge[x][i].w;\n            if(d[x]+w < d[v])\n            {\n                d[v]=d[x]+w;\n                q.push(v);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\",&tt);\n    while(tt--)\n    {\n    scanf(\"%d%d%d%d\",&s,&t,&a,&b);\n    for(int i=1;i<=s;i++)\n    {\n        for(int j=1;j<=3;j++)\n        {\n            int x,y;scanf(\"%d%d\",&x,&y);\n            city[i][j].x=x;\n            city[i][j].y=y;\n        }\n        count(i);\n        scanf(\"%d\",&prize[i]);\n    }\n    \n    for(int i=1;i<=s;i++)\n    {\n        for(int k1=1;k1<=4;k1++)\n        {\n            for(int j=1;j<=s;j++)\n            {\n                for(int k2=1;k2<=4;k2++)\n                {\n                    if(i == j && k1 < k2)\n                    {\n                        node p;\n                        p.v=(j-1)*4+k2;\n                        p.w=countdis(i,k1,j,k2)*prize[i];\n                        edge[(i-1)*4+k1].push_back(p);\n                        node q;\n                        q.v=(i-1)*4+k1;\n                        q.w=p.w;\n                        edge[(j-1)*4+k2].push_back(q);\n                    }\n                    if(i != j)\n                    {\n                        node p;\n                        p.v=(j-1)*4+k2;\n                        p.w=countdis(i,k1,j,k2)*t;\n                        edge[(i-1)*4+k1].push_back(p);\n                        node q;\n                        q.v=(i-1)*4+k1;\n                        q.w=p.w;\n                        edge[(j-1)*4+k2].push_back(q);\n                    }\n                }\n            }\n        }\n    }\n    double ans=1000000000.0;\n    for(int i=1;i<=4;i++)\n    {\n        SPFA((a-1)*4+i);\n        for(int j=1;j<=4;j++)\n        {\n            ans=min(ans,d[(b-1)*4+j]);\n        }\n    }\n    printf(\"%.1lf\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1501903951,
        "uid": 9098,
        "name": "XYloto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u4e0d\u96be\uff0c\u4e4b\u6240\u4ee5\u96be\u5ea6\u662f\u63d0\u9ad8+/\u7701\u9009-\u4e3b\u8981\u662f\u56e0\u4e3a\u8fd9\u9053\u9898\u6bd4\u8f83\u70e6\u3002\n\n\u9996\u5148\u901a\u8fc73\u4e2a\u70b9\u6c42\u51fa\u7b2c4\u4e2a\u70b9\u7684\u4f4d\u7f6e\u3002\uff08\u6211\u6bd4\u8f83\u5f31\uff0c\u91c7\u7528\u7684\u662f\u901a\u8fc7\u659c\u7387\u4e4b\u79ef\u4e3a-1\u679a\u4e3e\u51fa\u4e09\u4e2a\u70b9\u4e2d\u54ea\u4e2a\u70b9\u662f\u76f4\u89d2\u9876\u70b9\uff0c\u7136\u540e\u6c42\u51fa\u7b2c4\u4e2a\u70b9\uff0c\u8be6\u89c1\u4ee3\u7801\uff09\n\n\u7136\u540e\u4e00\u4e2a\u57ce\u5e02\u5185\u56db\u4e2a\u706b\u8f66\u7ad9\u4e24\u4e24\u8fde\u8fb9\uff0c\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u4e2d\u6bcf\u4e2a\u706b\u8f66\u7ad9\u90fd\u76f8\u4e92\u8fde\u8fb9\uff0c\u6700\u540e\u679a\u4e3e\u8d77\u70b9\u57ce\u5e02\u7684\u706b\u8f66\u7ad9\uff0cspfa\u6c42\u51fa\u8be5\u706b\u8f66\u7ad9\u5230\u5176\u4ed6\u57ce\u5e02\u5404\u4e2a\u706b\u8f66\u7ad9\u7684\u8ddd\u79bb\uff0c\u4ece\u4e2d\u53d6\u6700\u5c0f\u7684\u5373\u53ef\u3002\uff08\u4ee3\u7801\u4e2d\u5c06\u6bcf\u4e2a\u57ce\u5e02\u76844\u4e2a\u706b\u8f66\u7ad9\u88c2\u62104\u4e2a\u70b9\u4ee5\u65b9\u4fbf\u5904\u7406\uff09\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint t,n,st,ed,hd,tl,cnt,x[105][5],y[105][5],vet[200005],Next[200005],head[200005],q[1000005],w[1005];\nbool vis[1005];\ndouble dis[1005],value[200005],ans;\ndouble calc(int x1,int y1,int x2,int y2)\n{\n    return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n}\nvoid add(int a,int b,double c)\n{\n    vet[++cnt]=b;\n    value[cnt]=c;\n    Next[cnt]=head[a];\n    head[a]=cnt;\n}\nvoid spfa(int st)\n{\n    hd=tl=1;\n    for (int i=1; i<=n*4; i++)\n    {\n        dis[i]=1e9;\n        vis[i]=false;\n    }\n    dis[st]=0;\n    q[1]=st;\n    vis[st]=true;\n    while (hd<=tl)\n    {\n        int u=q[hd];\n        for (int i=head[u]; i; i=Next[i])\n        {\n            int v=vet[i];\n            if (dis[v]>dis[u]+value[i])\n            {\n                dis[v]=dis[u]+value[i];\n                if (!vis[v])\n                {\n                    vis[v]=true;\n                    q[++tl]=v;\n                }\n            }\n        }\n        hd++;\n        vis[u]=false;\n    }\n}\nint main()\n{\n    int cas;\n    scanf(\"%d\",&cas);\n    while (cas--)\n    {\n        memset(head,0,sizeof(head));\n    scanf(\"%d%d%d%d\",&n,&t,&st,&ed);\n    for (int i=1; i<=n; i++)\n    {\n        scanf(\"%d%d%d%d%d%d%d\",&x[i][1],&y[i][1],&x[i][2],&y[i][2],&x[i][3],&y[i][3],&w[i]);\n        if ((y[i][1]-y[i][2])*(y[i][3]-y[i][2])==(x[i][2]-x[i][1])*(x[i][3]-x[i][2]))\n        {\n            x[i][4]=(x[i][1]+x[i][3]-x[i][2]);\n            y[i][4]=(y[i][1]+y[i][3]-y[i][2]);\n        }\n        if ((y[i][2]-y[i][1])*(y[i][3]-y[i][1])==(x[i][2]-x[i][1])*(x[i][1]-x[i][3]))\n        {\n            x[i][4]=(x[i][2]+x[i][3]-x[i][1]);\n            y[i][4]=(y[i][2]+y[i][3]-y[i][1]);\n        }\n        if ((y[i][1]-y[i][3])*(y[i][2]-y[i][3])==(x[i][1]-x[i][3])*(x[i][3]-x[i][2]))\n        {\n            x[i][4]=(x[i][1]+x[i][2]-x[i][3]);\n            y[i][4]=(y[i][1]+y[i][2]-y[i][3]);\n        }\n    }\n    for (int i=1; i<=n; i++)\n        for (int j=1; j<=4; j++)\n            for (int k=j+1; k<=4; k++)\n            {\n                add((i-1)*4+j,(i-1)*4+k,w[i]*calc(x[i][j],y[i][j],x[i][k],y[i][k]));\n                add((i-1)*4+k,(i-1)*4+j,w[i]*calc(x[i][j],y[i][j],x[i][k],y[i][k]));\n            }\n    for (int i=1; i<=n; i++)\n        for (int j=1; j<=4; j++)\n            for (int p=i+1; p<=n; p++)\n                for (int q=1; q<=4; q++)\n                {\n                    add((i-1)*4+j,(p-1)*4+q,t*calc(x[i][j],y[i][j],x[p][q],y[p][q]));\n                    add((p-1)*4+q,(i-1)*4+j,t*calc(x[i][j],y[i][j],x[p][q],y[p][q]));\n                }\n    ans=1e9;\n    for (int i=1; i<=4; i++)\n    {\n        spfa(4*(st-1)+i);\n        for (int j=1; j<=4; j++)\n            ans=min(ans,dis[4*(ed-1)+j]);\n    }\n    printf(\"%.1lf\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1496493054,
        "uid": 31172,
        "name": "heheabc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\u4e3b\u8981\u662f\u96be\u5728\u6570\u636e\u5904\u7406\u4e0a,\u4e4b\u540e\u7528Floyd\u5904\u7406\u4fbf\u597d\n\n\n\u6c42\u672a\u77e5\u98de\u673a\u573a\u7684\u5750\u6807\n\n\n\u7531\u4e8e\u6bcf\u4e2a\u57ce\u5e02\u90fd\u662f\u77e9\u5f62\uff0c\u6240\u4ee5\u6bcf\u4e2a\u57ce\u5e02\u4e2d\u5df2\u77e5\u7684\u4e09\u4e2a\u98de\u673a\u573a\u5fc5\u6784\u6210\u4e00\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u800c\u672a\u77e5\u7684\u98de\u673a\u573a\u5fc5\u5728\u8fd9\u4e2a\u4e09\u89d2\u5f62\u7684\u76f4\u89d2\u9876\u70b9\u7684\u5bf9\u70b9\u5904\u3002\n\n\n\u6c42\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u76f4\u89d2\u9876\u70b9\u53ef\u4ee5\u6c42\u659c\u8fb9\uff0c\u659c\u8fb9\u4e24\u9876\u70b9\u5916\u7684\u90a3\u4e2a\u70b9\u4fbf\u662f\u76f4\u89d2\u9876\u70b9\u3002\n\n\n\u800c\u5728\u5e73\u884c\u56db\u8fb9\u5f62\u4e2d\uff0c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u6a2a\uff08\u6216\u7eb5\uff09\u5750\u6807\u7684\u5dee\u503c\u7b49\u4e8e\u5176\u5bf9\u8fb9\u4e24\u4e2a\u9876\u70b9\u7684\u6a2a\uff08\u6216\u7eb5\uff09\u5750\u6807\u7684\u5dee\u503c\u3002\u5728\u6c42\u5f97\u76f4\u89d2\u9876\u70b9\u540e\uff0c\u53ef\u4ee5\u4f9d\u6b64\u6c42\u5f97\u672a\u77e5\u98de\u673a\u573a\u7684\u5750\u6807\u3002\n\n\n\u8ba1\u7b97\u82b1\u8d39\n\n\n\u98de\u673a\u573a\u7f16\u53f7\u5982\u4e0b\uff1a\n\n\nCity1\uff1a1 2 3 4\n\n\nCity2: 5 6 7 8\n\n\n\u2026\u2026 \u7531\u89c2\u5bdf\u53ef\u77e5\uff0c\u98de\u673a\u573a\u7f16\u53f7\uff08t\uff09\u4e0e\u57ce\u5e02\u7f16\u53f7\uff08n\uff09\u7684\u5173\u7cfb\u4e3an=((t-1) div 4) +1.\n\n\nFloyd\u5904\u7406\n\n\nFloyd\u90fd\u4f1a\u5427\u00b7\u00b7\u00b7\n\n\n\u7528\u5b8cFloyd\u540e\uff0c\u628a\u76ee\u7684\u57ce\u5e02\u4e0e\u8d77\u59cb\u57ce\u5e02\u76844+4\u4e2a\u98de\u673a\u573a\u90fd\u626b\u4e00\u904d\uff0c\u53d6\u6700\u5c0f\u503c\u3002\n\n\n\u7b54\u6848\u8f93\u51fa\n\n\n\u8fd9\u4e2a\u88ab\u5751\u4e86\uff0c\u6837\u4f8b\u4fdd\u75592\u4f4d\u5c0f\u6570\uff0c\u4f46\u5b9e\u9645\u6570\u636e\u53ea\u4fdd\u75591\u4f4d\u3002\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\nprogram Cars_traval_routine;\nvar dis:array[1..110,1..110] of double;//\u987e\u540d\u601d\u4e49\uff0c\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\n    x,y,tt:array[1..110] of longint;//\u7528x y\u6570\u7ec4\u6765\u8bb0\u5f55\u5404\u70b9\u7684\u5750\u6807,tt\u5b58\u50a8\u5404\u57ce\u5e02\u516c\u8def\u7684\u82b1\u8d39\n    n,xx,s,t,a,b,i,j,k:longint;\n    ans:double;\nprocedure ce(t1,t2:longint);//\u8ba1\u7b97\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u82b1\u8d39\n  begin\n    dis[t1,t2]:=sqrt(sqr(x[t1]-x[t2])+sqr(y[t1]-y[t2]));\n    if ((t1-1) div 4)=((t2-1) div 4) then\n      dis[t1,t2]:=dis[t1,t2]*tt[((t1-1) div 4)+1]\n    else dis[t1,t2]:=dis[t1,t2]*t;\n    dis[t2,t1]:=dis[t1,t2];\n  end;\nfunction ver(t1,t2,t3:longint):longint;//\u627e\u4e00\u4e2a\u57ce\u5e02\u4e2d\u5df2\u77e5\u4e09\u4e2a\u70b9\u7684\u9876\u70b9\n  begin\n    if (dis[t1,t2]>dis[t2,t3]) and (dis[t1,t2]>dis[t3,t1]) then ver:=t3;\n    if (dis[t2,t3]>dis[t1,t2]) and (dis[t2,t3]>dis[t3,t1]) then ver:=t1;\n    if (dis[t3,t1]>dis[t2,t3]) and (dis[t3,t1]>dis[t1,t2]) then ver:=t2;\n  end;\nprocedure fpl(t1,t2,t3:longint);//\u8ba1\u7b97\u7b2c\u56db\u4e2a\u70b9\u7684\u4f4d\u7f6e  t1,t2,t3\u4e3a\u5176\u4ed6\u4e09\u4e2a\u70b9\u7684\u987a\u5e8f\n  begin                \n    ce(t1,t2);\n    ce(t2,t3);\n    ce(t3,t1);\n      if ver(t1,t2,t3)=t1 then begin\n           x[t3+1]:=x[t3]+x[t2]-x[t1];\n           y[t3+1]:=y[t3]+y[t2]-y[t1];\n         end;\n      if ver(t1,t2,t3)=t2 then begin\n           x[t3+1]:=x[t3]+x[t1]-x[t2];\n           y[t3+1]:=y[t3]+y[t1]-y[t2];\n         end;\n      if ver(t1,t2,t3)=t3 then begin\n           x[t3+1]:=x[t1]+x[t2]-x[t3];\n           y[t3+1]:=y[t1]+y[t2]-y[t3];\n         end;\n    end;\nbegin\n  readln(n);\n  xx:=0;\n  repeat\n    inc(xx);//\u8ba1\u7b97\u5df2\u5904\u7406\u4e86\u591a\u5c11\u7ec4\u6570\u636e\n    ans:=maxlongint;\n    fillchar(dis,sizeof(dis),0);//\u521d\u59cb\u5316dis\u6570\u7ec4\n    readln(s,t,a,b);\n    for i:=1 to s do begin\n      readln(x[4*i-3],y[4*i-3],x[4*i-2],y[4*i-2],x[4*i-1],y[4*i-1],tt[i]);\n      fpl(4*i-3,4*i-2,4*i-1);\n    end;\n    for i:=1 to 4*s do //\u7ed8\u5236\u5730\u56fe\n      for j:=1 to 4*s do\n        ce(i,j);\n    for k:=1 to 4*s do //floyd\u5904\u7406\n      for i:=1 to 4*s do\n        for j:=1 to 4*s do\n          if dis[i,k]+dis[k,j]<dis[i,j] then\n            dis[i,j]:=dis[i,k]+dis[k,j];\n    for i:=4*a-3 to 4*a do //\u53d6\u6700\u5c0f\u503c\n      for j:=4*b-3 to 4*b do\n        if dis[i,j]<ans then\n          ans:=dis[i,j];\n    writeln(ans:0:1);\n  until xx=n;\nend.              //\u7ed3\u675f\n```",
        "postTime": 1484483888,
        "uid": 33318,
        "name": "cpp\u5b66\u8005s",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "Floyd\u2026\u2026\u697c\u4e0b\u7684\u697c\u4e0b\u90fd\u8bf4\u5f97\u975e\u5e38\u6e05\u695a\u4e86\u2026\u2026\n\n\u5c31\u662f\u5efa\u56fe\u6709\u70b9\u9ebb\u70e6\n\n```cpp\n\n#include<set>\n#include<map>\n#include<list>\n#include<queue>\n#include<stack>\n#include<string>\n#include<math.h>\n#include<time.h>\n#include<vector>\n#include<bitset>\n#include<memory>\n#include<utility>\n#include<stdio.h>\n#include<sstream>\n#include<iostream>\n#include<stdlib.h>\n#include<string.h>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nint x[801],y[801];\nint ti[501];\nint n,s,tt,a,b;\ndouble d[501][501];\nvoid doit(int t1,int t2)\n{\n    d[t1][t2]=sqrt((x[t1]-x[t2])*(x[t1]-x[t2])+(y[t1]-y[t2])*(y[t1]-y[t2]));\n    if (((t1-1)/4)==((t2-1)/4))\n    {\n        d[t1][t2]=d[t1][t2]*ti[(t1-1)/4+1];\n    }else\n        d[t1][t2]=d[t1][t2]*tt;\n    d[t2][t1]=d[t1][t2];\n    return;\n}\nint find(int t1,int t2,int t3)//\u627e\u76f4\u89d2\u4e09\u89d2\u5f62\u659c\u8fb9\n{\n    if ((d[t1][t2]>d[t2][t3])&&(d[t1][t2]>d[t3][t1])) return t3;\n    if ((d[t2][t3]>d[t1][t2])&&(d[t2][t3]>d[t3][t1])) return t1;\n    if ((d[t3][t1]>d[t2][t3])&&(d[t3][t1]>d[t1][t2])) return t2;\n}\nvoid doit2(int t1,int t2,int t3)//\u6c42\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\uff08\u6570\u5b66\u65b9\u6cd5\uff09\n{\n    doit(t1,t2);\n    doit(t2,t3);\n    doit(t3,t1);\n    int haha=find(t1,t2,t3);\n    if (haha==t1)\n    {\n        x[t3+1]=x[t3]+x[t2]-x[t1];  \n        y[t3+1]=y[t3]+y[t2]-y[t1];  \n    }\n    if (haha==t2)\n    {\n        x[t3+1]=x[t3]+x[t1]-x[t2];  \n        y[t3+1]=y[t3]+y[t1]-y[t2];   \n    }\n    if (haha==t3)\n    {\n        x[t3+1]=x[t1]+x[t2]-x[t3];  \n        y[t3+1]=y[t1]+y[t2]-y[t3];  \n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for (;n>0;n--)\n    {\n        scanf(\"%d %d %d %d\",&s,&tt,&a,&b);\n        //S\u57ce\u5e02\u6570\uff0ct\u98de\u673a\u5355\u4ef7\uff0cA\uff0cB\u5e8f\u53f7\n        int i,j,k;\n        for (i=1;i<=401;i++)\n            for (j=1;j<=401;j++)\n            d[i][j]=100000000;\n        for (i=1;i<=s;i++)\n        {\n            scanf(\"%d %d %d %d %d %d %d\",\n            &x[4*i-3],&y[4*i-3],&x[4*i-2],\n            &y[4*i-2],&x[4*i-1],&y[4*i-1],\n            &ti[i]);\n            doit2(4*i-3,4*i-2,4*i-1);\n        }\n        for (i=1;i<=4*s;i++)\n            for (j=1;j<=4*s;j++)\n            doit(i,j);\n        for (k=1;k<=4*s;k++) \n            for (i=1;i<=4*s;i++)\n                for (j=1;j<=4*s;j++) \n                    if (d[k][j]+d[i][k]<d[i][j])\n                    {\n                        d[i][j]=d[k][j]+d[i][k];\n                    }\n        double ans=200000000.0;\n        for (i=4*a-3;i<=4*a;i++)\n            for (j=4*b-3;j<=4*b;j++)\n            if (d[i][j]<ans) ans=d[i][j];\n        printf(\"%.1lf\\n\",ans);\n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1455806180,
        "uid": 2674,
        "name": "\u300cQQ\u7ea2\u5305\u300d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u76ee\u4e3b\u8981\u662f\u96be\u5728\u6570\u636e\u5904\u7406\u4e0a,\u4e4b\u540e\u7528Floyd\u5904\u7406\u4fbf\u597d\n\n\n# \u6c42\u672a\u77e5\u98de\u673a\u573a\u7684\u5750\u6807\n\n\u7531\u4e8e\u6bcf\u4e2a\u57ce\u5e02\u90fd\u662f\u77e9\u5f62\uff0c\u6240\u4ee5\u6bcf\u4e2a\u57ce\u5e02\u4e2d\u5df2\u77e5\u7684\u4e09\u4e2a\u98de\u673a\u573a\u5fc5\u6784\u6210\u4e00\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u800c\u672a\u77e5\u7684\u98de\u673a\u573a\u5fc5\u5728\u8fd9\u4e2a\u4e09\u89d2\u5f62\u7684\u76f4\u89d2\u9876\u70b9\u7684\u5bf9\u70b9\u5904\u3002\n\n\u6c42\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u76f4\u89d2\u9876\u70b9\u53ef\u4ee5\u6c42\u659c\u8fb9\uff0c\u659c\u8fb9\u4e24\u9876\u70b9\u5916\u7684\u90a3\u4e2a\u70b9\u4fbf\u662f\u76f4\u89d2\u9876\u70b9\u3002\n\n\u800c\u5728\u5e73\u884c\u56db\u8fb9\u5f62\u4e2d\uff0c\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u6a2a\uff08\u6216\u7eb5\uff09\u5750\u6807\u7684\u5dee\u503c\u7b49\u4e8e\u5176\u5bf9\u8fb9\u4e24\u4e2a\u9876\u70b9\u7684\u6a2a\uff08\u6216\u7eb5\uff09\u5750\u6807\u7684\u5dee\u503c\u3002\u5728\u6c42\u5f97\u76f4\u89d2\u9876\u70b9\u540e\uff0c\u53ef\u4ee5\u4f9d\u6b64\u6c42\u5f97\u672a\u77e5\u98de\u673a\u573a\u7684\u5750\u6807\u3002\n\n\n# \u8ba1\u7b97\u82b1\u8d39\n\n\u98de\u673a\u573a\u7f16\u53f7\u5982\u4e0b\uff1a\n\nCity1\uff1a1 2 3 4\n\nCity2: 5 6 7 8\n\n\u2026\u2026\n\u7531\u89c2\u5bdf\u53ef\u77e5\uff0c\u98de\u673a\u573a\u7f16\u53f7\uff08t\uff09\u4e0e\u57ce\u5e02\u7f16\u53f7\uff08n\uff09\u7684\u5173\u7cfb\u4e3an=((t-1) div 4) +1.\n\n\n# Floyd\u5904\u7406\n\nFloyd\u90fd\u4f1a\u5427\u00b7\u00b7\u00b7\n\n\u7528\u5b8cFloyd\u540e\uff0c\u628a\u76ee\u7684\u57ce\u5e02\u4e0e\u8d77\u59cb\u57ce\u5e02\u76844+4\u4e2a\u98de\u673a\u573a\u90fd\u626b\u4e00\u904d\uff0c\u53d6\u6700\u5c0f\u503c\u3002\n\n    \n# \u7b54\u6848\u8f93\u51fa\n\n\u8fd9\u4e2a\u88ab\u5751\u4e86\uff0c\u6837\u4f8b\u4fdd\u75592\u4f4d\u5c0f\u6570\uff0c\u4f46\u5b9e\u9645\u6570\u636e\u53ea\u4fdd\u75591\u4f4d\u3002\n\n\n```delphi\n\nprogram Cars_traval_routine;\nvar dis:array[1..110,1..110] of double;//\u987e\u540d\u601d\u4e49\uff0c\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\n    x,y,tt:array[1..110] of longint;//\u7528x y\u6570\u7ec4\u6765\u8bb0\u5f55\u5404\u70b9\u7684\u5750\u6807,tt\u5b58\u50a8\u5404\u57ce\u5e02\u516c\u8def\u7684\u82b1\u8d39\n    n,xx,s,t,a,b,i,j,k:longint;\n    ans:double;\n\nprocedure ce(t1,t2:longint);//\u8ba1\u7b97\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u82b1\u8d39\n  begin\n    dis[t1,t2]:=sqrt(sqr(x[t1]-x[t2])+sqr(y[t1]-y[t2]));\n    if ((t1-1) div 4)=((t2-1) div 4) then\n      dis[t1,t2]:=dis[t1,t2]*tt[((t1-1) div 4)+1]\n    else dis[t1,t2]:=dis[t1,t2]*t;\n    dis[t2,t1]:=dis[t1,t2];\n  end;\n\nfunction ver(t1,t2,t3:longint):longint;//\u627e\u4e00\u4e2a\u57ce\u5e02\u4e2d\u5df2\u77e5\u4e09\u4e2a\u70b9\u7684\u9876\u70b9\n  begin\n    if (dis[t1,t2]>dis[t2,t3]) and (dis[t1,t2]>dis[t3,t1]) then ver:=t3;\n    if (dis[t2,t3]>dis[t1,t2]) and (dis[t2,t3]>dis[t3,t1]) then ver:=t1;\n    if (dis[t3,t1]>dis[t2,t3]) and (dis[t3,t1]>dis[t1,t2]) then ver:=t2;\n  end;\n\nprocedure fpl(t1,t2,t3:longint);//\u8ba1\u7b97\u7b2c\u56db\u4e2a\u70b9\u7684\u4f4d\u7f6e  t1,t2,t3\u4e3a\u5176\u4ed6\u4e09\u4e2a\u70b9\u7684\u987a\u5e8f\n  begin                \n    ce(t1,t2);\n    ce(t2,t3);\n    ce(t3,t1);\n      if ver(t1,t2,t3)=t1 then begin\n           x[t3+1]:=x[t3]+x[t2]-x[t1];\n           y[t3+1]:=y[t3]+y[t2]-y[t1];\n         end;\n      if ver(t1,t2,t3)=t2 then begin\n           x[t3+1]:=x[t3]+x[t1]-x[t2];\n           y[t3+1]:=y[t3]+y[t1]-y[t2];\n         end;\n      if ver(t1,t2,t3)=t3 then begin\n           x[t3+1]:=x[t1]+x[t2]-x[t3];\n           y[t3+1]:=y[t1]+y[t2]-y[t3];\n         end;\n    end;\n\nbegin\n  readln(n);\n  xx:=0;\n  repeat\n    inc(xx);//\u8ba1\u7b97\u5df2\u5904\u7406\u4e86\u591a\u5c11\u7ec4\u6570\u636e\n    ans:=maxlongint;\n    fillchar(dis,sizeof(dis),0);//\u521d\u59cb\u5316dis\u6570\u7ec4\n    readln(s,t,a,b);\n\n    for i:=1 to s do begin\n      readln(x[4*i-3],y[4*i-3],x[4*i-2],y[4*i-2],x[4*i-1],y[4*i-1],tt[i]);\n      fpl(4*i-3,4*i-2,4*i-1);\n    end;\n\n    for i:=1 to 4*s do //\u7ed8\u5236\u5730\u56fe\n      for j:=1 to 4*s do\n        ce(i,j);\n\n    for k:=1 to 4*s do //floyd\u5904\u7406\n      for i:=1 to 4*s do\n        for j:=1 to 4*s do\n          if dis[i,k]+dis[k,j]<dis[i,j] then\n            dis[i,j]:=dis[i,k]+dis[k,j];\n\n    for i:=4*a-3 to 4*a do //\u53d6\u6700\u5c0f\u503c\n      for j:=4*b-3 to 4*b do\n        if dis[i,j]<ans then\n          ans:=dis[i,j];\n\n    writeln(ans:0:1);\n  until xx=n;\nend.              \n\n```",
        "postTime": 1385030465,
        "uid": 937,
        "name": "CYSoulDown",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u4efb\u610f\u70b9\u76f8\u8fde\u8dd1spfa\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u8fd9\u91cc\u6ca1\u6709\u76f4\u63a5\u5efa\u56fe\uff0c\u6211\u6bcf\u6b21\u76f4\u63a5\u5c06spfa\u4e2d\u73b0\u5728\u6240\u8981\u63a2\u7d22\u7684\u70b9\u904d\u5386\uff0c\u56e0\u4e3a\u662f\u8981\u548c\u6240\u6709\u70b9\u76f8\u8fde\u3002\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u6bd4\u8f83\u5751\u7684\u5730\u65b9\u662f\uff0c\u7ed9\u5b9a\u7684\u4e09\u4e2a\u70b9\uff0c**\u4e0d\u4e00\u5b9a\u662f\u5e73\u884c\u7684\u6b63\u7740\u7684**\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6ca1\u529e\u6cd5\u901a\u8fc7\u679a\u4e3e3\u4e2a\u70b9\u7684\u4f4d\u7f6e\u6c42\u51fa\u6765\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\uff08\u8840\u7684\u6559\u8bad\uff09\u3002\u6240\u6709\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u6570\u5b66\u65b9\u6cd5\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\u3002\n\nCode:\n\n```cpp\n\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <queue>\n\nusing namespace std;\n\npair<int, int> f[5001];\n\nint ended[10001], n, m, start;\nint es;\ndouble dis[10001];\n\ndouble jl(double x1, double y1, double x2, double y2)\n{\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\nint getcity(int x)\n{\n    return x / 4 + 1 - !(x % 4);\n}\n\ndouble spfa(int s, int e)\n{\n    queue<int> q;\n    q.push(s);\n    for(int i = 1; i <= 4 * n; i ++ )\n    {\n        dis[i] = 9999.99;\n    }\n    dis[s] = 0;\n    while(!q.empty())\n    {\n        int t = q.front();\n        q.pop();\n        for(int i = 1; i <= 4 * n; i ++)\n        {\n            int f1 = getcity(t);\n            int f2 = getcity(i);\n            double v = 0;\n            if(f1 == f2)\n            {\n                v = ended[f1] * jl(f[t].first, f[t].second, f[i].first, f[i].second);\n            }\n            else\n            {\n                v = m * jl(f[t].first, f[t].second, f[i].first, f[i].second);\n            }\n            if(dis[t] + v < dis[i])\n            {\n                dis[i] = dis[t] + v;\n                q.push(i);\n            }\n        }\n    }\n    double res = 214444.44;\n    for(int i = (e - 1) * 4 + 1; i <= e *  4; i ++ )\n    {\n        res = min(res , dis[i]);\n    }\n    return res;\n}\n\n\npair<int, int> get4(int x1, int y1, int x2, int y2, int x3, int y3)\n{\n    int ab = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    int ac = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);\n    int bc = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);\n    int x4,y4;\n    if (ab + ac == bc)\n        x4 = x2 + x3 - x1, y4 = y2 + y3 - y1;\n    if (ab + bc == ac)\n        x4 = x1 + x3 - x2, y4 = y1 + y3 - y2;\n    if (ac + bc == ab)\n        x4 = x1 + x2 - x3, y4 = y1 + y2 - y3;\n    return make_pair(x4, y4);\n}\n\nint we(int x, int y)\n{\n    return (x - 1) * 4 + y;\n}\n\n\nint main()\n{\n    int t;\n    scanf(\"%d\", &t);\n    while( t -- )\n    {\n        scanf(\"%d%d%d%d\", &n, &m, &start, &es);\n        for(int i = 1; i <= n; i ++ )\n        {\n            for(int j = 1; j <= 3; j ++ )\n            {\n                scanf(\"%d%d\", &f[we(i, j)].first, &f[we(i, j)].second);\n            }\n            f[we(i, 4)] = get4(f[we(i, 1)].first, f[we(i, 1)].second, f[we(i, 2)].first, f[we(i, 2)].second, f[we(i, 3)].first, f[we(i, 3)].second);\n            scanf(\"%d\", &ended[i]);\n        }\n        double res = 99999.99;\n        for(int i = (start - 1) * 4 + 1; i <= (start - 1) * 4 + 4; i ++ )\n        {\n            res = min(res, spfa(i, es));\n        }\n        printf(\"%.1f \\n\", res);\n    }\n\n}\n```",
        "postTime": 1596366279,
        "uid": 99640,
        "name": "smallfang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5c31\u662f\u4f20\u8bf4\u4e2d\u7684~~\u7801\u519c\u9898~~ \u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\n\n\u8fd9\u9898\u8c03\u4e86\u4e00\u4e0b\u5348...\n\n\u5c31\u662f\u8ba1\u7b97\u51e0\u4f55\uff0c \u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\uff0c \u7136\u540e\u8dd1$spfa$\u6216\u8005\u5176\u4ed6\u6700\u77ed\u8def\u3002\n\n\u6ca1\u5b66\u8fc7\u8ba1\u7b97\u51e0\u4f55\uff0c \u91cc\u9762\u7684\u7ed3\u6784\u4f53\u90fd\u662f\u6211\u80e1\u8bcc\u7684\uff0c \u662f~~\u7eaf\u6b63~~\u4e71\u641e\u7684\u8ba1\u7b97\u51e0\u4f55\u6a21\u677f\u3002\n\n\u81f3\u4e8e\u6c42\u7b2c\u56db\u4e2a\u70b9\uff0c \u5c31\u5148\u7528\u5411\u91cf\u627e\u76f4\u89d2\uff0c \u518d\u7528$x$\u7684\u548c\u76f8\u7b49\u6c42\u51fa\u7b2c\u56db\u4e2a\u70b9\u5c31\u884c\u4e86\u3002\n\n~~\u7801\u98ce\u8be1\u5f02\u3002~~\n\n\n```cpp\n//RoRoyyy\n#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <climits>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int N = 30005;\nconst double eps = 1e-5;\nint T;\nint id = 0;\nint vis[N];\ndouble dis[N];\nstruct point {\n    double x, y;\n    void init(double a, double b) {\n        x = a, y = b;\n    } \n    void print() {\n        cout << x << \" \" << y << \" \";\n    }\n};\nstruct air {\n    point a[5];\n    int id[5];\n}AIR[N];\ndouble operator + (const point &a, const point &b) {\n    double x = a.x - b.x, y = a.y - b.y;\n    return sqrt(x * x + y * y);\n}\nstruct Vector {\n    double x, y;\n};\ndouble operator * (const Vector &a, const Vector &b) {\n    double ans;\n    ans = a.x * b.x + a.y * b.y;\n    return ans;\n}\nVector operator - (const point &a, const point &b) {\n    Vector ans;\n    ans.x = a.x - b.x;\n    ans.y = a.y - b.y;\n    return ans;\n}\nbool isright(Vector a, Vector b) {\n    return fabs(a * b) <= eps;\n}\npoint calc(point a, point b, point c) {\n    point res;\n    if(isright(b - a, c - a)) \n        {res.init(b.x + c.x - a.x, b.y + c.y - a.y); return res;}//a\u662f\u76f4\u89d2\n    else if(isright(a - b, c - b)) \n        {res.init(a.x + c.x - b.x, a.y + c.y - b.y); return res;}//b\u662f\n    else \n        {res.init(a.x + b.x - c.x, a.y + b.y - c.y); return res;}//c\u662f\n}\nint u[N], v[N], first[N], nxt[N], tot;\ndouble w[N];\nvoid add(int x, int y, double z) {\n    u[++tot] = x, v[tot] = y, w[tot] = z;\n    nxt[tot] = first[x];\n    first[x] = tot;\n}\nvoid calc_(int x, int y, int val) {\n    air &a = AIR[x], &b = AIR[y];\n    for(int i = 1; i <= 4; i++) {\n        for(int j = 1; j <= 4; j++) {\n            add(a.id[i], b.id[j], (a.a[i] + b.a[j]) * val);\n           // cout << a.a[i] + b.a[j] << \" \" << (a.a[i] + b.a[j]) * val << endl;\n        }\n    }\n}\nvoid spfa(int s) {\n    queue<int>q;\n    memset(vis, 0, sizeof(vis));\n    for(int i = 1; i <= N; i++)  dis[i] = 0x3f3f3f3f;\n    q.push(s);\n    vis[s] = 1;\n    dis[s] = 0;\n    while(q.size()) {\n        int now = q.front();\n        q.pop();\n        vis[now] = 0;\n        for(int i = first[now]; i; i = nxt[i]) {\n            int to = v[i];\n            if(dis[to] > dis[now] + w[i]) {\n                dis[to] = dis[now] + w[i];\n                if(!vis[to]) q.push(to), vis[to] = 1;\n            }\n        }\n    }\n    return ;\n}\nint main() {\n    scanf(\"%d\", &T);\n    while(T--) {\n        int n, val, st, en;\n        scanf(\"%d%d%d%d\", &n, &val, &st, &en);\n        for(int i = 1; i <= n; i++) {\n            double x, y, ti;\n            point p[5];\n            scanf(\"%lf%lf\", &x, &y); p[1].init(x, y);\n            scanf(\"%lf%lf\", &x, &y); p[2].init(x, y);\n            scanf(\"%lf%lf\", &x, &y); p[3].init(x, y);\n            scanf(\"%lf\", &ti);\n            p[4] = calc(p[1], p[2], p[3]); \n            for(int j = 1; j <= 4; j++) AIR[i].a[j] = p[j];\n            for(int j = 1; j <= 4; j++) AIR[i].id[j] = id + j;\n            for(int j = 1; j <= 4; j++) {\n                for(int z = j; z <= 4; z++) {\n                    if(j == z) continue;\n                    add(id + j, id + z, (p[j] + p[z]) * ti);\n                    add(id + z, id + j, (p[j] + p[z]) * ti);\n                }\n            }\n            id += 4;\n        }\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                if(i == j) continue;\n                calc_(i, j, val);\n            }\n        }\n        double ans = INT_MAX;\n        for(int i = 1; i <= 4; i++) {\n            spfa(AIR[st].id[i]);\n            for(int j = 1; j <= 4; j++) {\n                ans = min(ans, dis[AIR[en].id[j]]);\n            }\n        }\n        printf(\"%.1f\\n\", ans);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1572162878,
        "uid": 111617,
        "name": "RoRoyyy",
        "ccfLevel": 0,
        "title": "P1027"
    },
    {
        "content": "\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4ee3\u7801\u5b9e\u73b0\u5f88\u590d\u6742\n\n\uff08\u5b58\u56fe\u6211\u5c31\u5b58\u4e86\u534a\u4e0a\u5348\uff09\n\n\u6838\u5fc3\u601d\u60f3\uff1adijkstra   ~~Dijkstra\u90fd\u4e0d\u4f1a\u8fd8\u4e0d\u8d76\u5feb\u53bb\u5b66~~\n\n\u5eb7\u5eb7\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct poi{\n\tint x,y,city;//x:\u6a2a\u5750\u6807 y:\u7eb5\u5750\u6807 city:\u6b64\u673a\u573a\u6240\u5728\u57ce\u5e02 \n}point[404];//\u5b58\u70b9 \n\nstruct edge{\n\tint v,next;//v:\u6b64\u8fb9\u901a\u5411\u7684\u70b9 next:\u4e0a\u4e00\u6761\u4e0e\u6b64\u8fb9\u51fa\u53d1\u70b9\u76f8\u540c\u7684\u8fb9 \u7684\u7f16\u53f7 \n\tdouble w;//\u901a\u8fc7\u6b64\u8fb9\u7684\u82b1\u8d39 \n}e[100000];//\u5b58\u8fb9 \n\nint s,t,a,b,n,T,start[4],ed[4];//start[]:\u51fa\u53d1\u57ce\u5e02\u56db\u673a\u573a\u7684\u7f16\u53f7 end[]:\u7ec8\u70b9\u57ce\u5e02\u56db\u673a\u573a\u7684\u7f16\u53f7 \nint k=1,head[404];//\u90bb\u63a5\u94fe\u8868 \nint book[404];//\u5224\u65ad\u662f\u5426\u5df2\u627e\u5230\u6b64\u70b9\u7684\u6700\u5c0f\u82b1\u8d39 \nint wy[3][3]={{0,1,2},{0,2,1},{1,2,0}};//\u5bfb\u627e\u6b63\u65b9\u5f62\u7684\u7b2c\u56db\u4e2a\u70b9\u65f6\u8981\u7528 \ndouble dis[404],ans;//dis[i]\u8868\u793a\u4ece\u51fa\u53d1\u673a\u573a\u5230\u7f16\u53f7\u4e3ai\u7684\u673a\u573a\u7684\u6700\u5c0f\u82b1\u8d39 \n\nint distan(poi a,poi b)//\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u7684  \u5e73\u65b9 \n{\n\treturn (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y); \n}\n\nvoid add(int u,int v,double w)//\u90bb\u63a5\u94fe\u8868\u5b58\u56fe \n{\n\te[k].next=head[u];\n\te[k].v=v;\n\te[k].w=w;\n\thead[u]=k++;\n}\n\nvoid Dijkstra(int x)\n{\n\ttypedef pair<int,int> pii;//pair\u7c7b\u578b \u76f8\u5f53\u4e8e\u7b80\u5316\u7248struct \u53ea\u80fd\u5b58\u4e24\u4e2a\u6570\u636e  \u5728\u4f18\u5148\u961f\u5217\u4e2d\u4ee5\u7b2c\u4e00\u4e2a\u6570\u636e\u5927\u5c0f\u6392\u5217 \n\t\t\t\t\t\t\t//\u53ef\u7528struct\u4ee3\u66ff\uff08\u8981\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff09 \n\tmemset(book,0,sizeof(book));\n\tfor(int i=1;i<=4*s;i++) dis[i]=0x3f3f3f3f;//\u8d4b\u6781\u5927\u503c\u627e\u6700\u5c0f\u503c \n\tpriority_queue<pii,vector<pii>,greater<pii> > q;//\u4f18\u5148\u961f\u5217  \u5148\u8ba9\u8ddd\u79bb\u51fa\u53d1\u70b9\u5c0f\u7684\u70b9\u51fa\u961f \n\tdis[x]=0;\n\tq.push(make_pair(dis[x],x));//\u6784\u9020pair\u7c7b\u578b \n\twhile(!q.empty())\n\t{\n\t\tint t=q.top().second;\n\t\tq.pop();\n\t\tif(book[t]) continue;//\u5982\u5df2\u6c42\u51fa\u6700\u5c0f\u503c \u5219\u8df3\u8fc7 \n\t\tbook[t]=true;\n\t\tfor(int i=head[t];i;i=e[i].next)\n\t\t{\n\t\t\tint j=e[i].v;\n\t\t\tif(dis[j]>dis[t]+e[i].w)\n\t\t\t{\n\t\t\t\tdis[j]=dis[t]+e[i].w;\n\t\t\t\tq.push(make_pair(dis[j],j));\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<4;i++)\n\t{\n\t\tans=min(ans,dis[ed[i]]);//\u5728\u7ec8\u70b9\u57ce\u5e02\u7684\u56db\u4e2a\u70b9\u4e2d\u627e\u6700\u5c0f\u82b1\u8d39 \n\t}\n}\n\nint main()\n{\n\tfreopen(\"P1027.in\",\"r\",stdin);\n\tscanf(\"%d\",&n);\n\twhile(n--)\n\t{\n\t\tscanf(\"%d%d%d%d\",&s,&t,&a,&b);\n\t\tfor(int i=1;i<=4*s;i+=4)//s\u4e2a\u57ce\u5e02\u5171\u67094s\u4e2a\u70b9 i+=4\u4fdd\u8bc1\u5faa\u73af4\u6b21 \n\t\t{\n\t\t\tscanf(\"%d%d%d%d%d%d%d\",&point[i].x,&point[i].y,&point[i+1].x,&point[i+1].y,&point[i+2].x,&point[i+2].y,&T);\n\t\t\tfor(int j=0;j<3;j++)\n\t\t\t{\n\t\t\t\tif(distan(point[i+wy[j][0]],point[i+wy[j][2]])  +  distan(point[i+wy[j][1]],point[i+wy[j][2]])  ==  distan(point[i+wy[j][0]],point[i+wy[j][1]]))\n\t\t\t\t{//\u52fe\u80a1\u5b9a\u7406 \u5982\u6ee1\u8db3\u5219\u662f\u6b63\u65b9\u5f62 \n\t\t\t\t\tpoint[i+3].x  =  point[i+wy[j][0]].x  +  point[i+wy[j][1]].x  -  point[i+wy[j][2]].x;\n\t\t\t\t\tpoint[i+3].y  =  point[i+wy[j][0]].y  +  point[i+wy[j][1]].y  -  point[i+wy[j][2]].y;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpoint[i].city=point[i+1].city=point[i+2].city=point[i+3].city=i/4+1;//\u5b58\u50a8\u6240\u5728\u57ce\u5e02  i/4+1\u662f\u57ce\u5e02\u7f16\u53f7 \n\t\t\t//\u5b58\u540c\u57ce\u7684\u94c1\u8def\u8def\u7ebf \n\t\t\tadd(i,i+1,sqrt(distan(point[i],point[i+1]))*(T*1.0));\n\t\t\tadd(i,i+2,sqrt(distan(point[i],point[i+2]))*(T*1.0));\n\t\t\tadd(i,i+3,sqrt(distan(point[i],point[i+3]))*(T*1.0));\n\t\t\tadd(i+1,i+2,sqrt(distan(point[i+1],point[i+2]))*(T*1.0));\n\t\t\tadd(i+1,i+3,sqrt(distan(point[i+1],point[i+3]))*(T*1.0));\n\t\t\tadd(i+2,i+3,sqrt(distan(point[i+2],point[i+3]))*(T*1.0));\n\t\t\t//\u6b63\u5411\u5b58 \n\t\t\tadd(i+1,i,sqrt(distan(point[i],point[i+1]))*(T*1.0));\n\t\t\tadd(i+2,i,sqrt(distan(point[i],point[i+2]))*(T*1.0));\n\t\t\tadd(i+3,i,sqrt(distan(point[i],point[i+3]))*(T*1.0));\n\t\t\tadd(i+2,i+1,sqrt(distan(point[i+1],point[i+2]))*(T*1.0));\n\t\t\tadd(i+3,i+1,sqrt(distan(point[i+1],point[i+3]))*(T*1.0));\n\t\t\tadd(i+3,i+2,sqrt(distan(point[i+2],point[i+3]))*(T*1.0));\n\t\t\t//\u53cd\u5411\u5b58 \n\t\t}\n\t\tint l=0,r=0;\n\t\tfor(int i=1;i<=4*s;i++)//\u5b58\u4e0d\u540c\u57ce\u5e02\u7684\u822a\u7ebf \n\t\t{\n\t\t\tfor(int j=1;j<4*s;j++)\n\t\t\t{\n\t\t\t\tif(point[i].city!=point[j].city)//\u5982\u540c\u57ce\u5219\u8df3\u8fc7\uff08\u540c\u57ce\u65e0\u822a\u7ebf\uff09 \n\t\t\t\t{\n\t\t\t\t\tadd(i,j,sqrt(distan(point[i],point[j]))*(t*1.0));\n\t\t\t\t\tadd(j,i,sqrt(distan(point[i],point[j]))*(t*1.0));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(point[i].city==a)//\u5b58\u50a8\u51fa\u53d1\u57ce\u5e02\u7684\u56db\u70b9 \n\t\t\t\tstart[l++]=i;\n\t\t\tif(point[i].city==b)//\u5b58\u50a8\u7ec8\u70b9\u57ce\u5e02\u7684\u56db\u70b9 \n\t\t\t\ted[r++]=i;\n\t\t}\n\t\tans=0x3f3f3f3f;\n\t\tfor(int i=0;i<4;i++)\n\t\t\tDijkstra(start[i]);//\u679a\u4e3e\u5206\u522b\u4ece\u51fa\u53d1\u57ce\u5e02\u56db\u70b9\u51fa\u53d1\u7684\u6700\u5c0f\u8def\u5f84 \n\t\tprintf(\"%.1lf\",ans);\n\t\tmemset(start,0,sizeof(start));\n\t\tmemset(ed,0,sizeof(ed));//\u6570\u7ec4\u6e050 \n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570004229,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "## [\u9898\u9762](https://www.luogu.org/problemnew/show/P1027)\n\n* **\u5b89\u5229\u4e00\u53d1[Blog](https://www.17shou.vip/)\uff0c\u4e0d\u70b9\u8fdb\u6765\u770b\u4e0b\u5417\uff1f\uff1f**\n* \u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u5f88\u5f88\u5f88\u5f88\u6076\u5fc3\u4e86\u30fd(#`\u0414\u00b4)\uff89\uff0c\u6076\u5fc3\u7684\u662f\u5efa\u56fe\u3002~~\u672c\u6765\u60f3\u6284\u7684\u9898\u89e3\u7684\uff0c~~\u4f46\u662f\u9898\u89e3\u91cc\u9762$Floyd$\u7684\u9898\u89e3\u4e0d\u662f\u7279\u522b\u8be6\u7ec6\uff0c~~\u5173\u952e\u662f\u4e0d\u7b26\u5408\u6211\u7684\u7801\u98ce\uff01\uff01~~\u6240\u4ee5\u8fd8\u662f\u81ea\u5df1\u6572\u4e86\u4e2a\u200b\uff08\u5f88\u4e11\u7684\uff09$Floyd$\u3002\u96be\u5ea6\u5e94\u8be5\u662f\u7eff\u9898\u5427\uff0c\u6211\u89c9\u5f97\uff0c~~\u4f46\u662f\u84dd\u9898\u4e5f\u4e0d\u662f\u7279\u522b\u5938\u5f20\uff08\u9003~~\n* \u8be5\u9898\u8fd8\u6709\u4e00\u4e2a\u96be\u70b9\u5c31\u662f\u627e\u4e00\u4e2a\u57ce\u5e02\u4e2d\u7684\u7b2c4\u4e2a\u70b9\uff0c\u7528\u52fe\u80a1\u5b9a\u7406\u5224\u65ad\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u76f4\u89d2\uff0c\u4ece\u800c\u5224\u65ad\u7b2c4\u4e2a\u70b9\u3002\uff08\u9898\u76ee\u4e2d\u8bf4\u4e864\u4e2a\u98de\u673a\u573a\u56f4\u6210\u77e9\u5f62\u54e6~~\uff09\n* \u6700\u540e\u8bf4\u4e00\u4e2a\u505a\u9898\u6280\u5de7\uff1a\u78b0\u5230\u7e41\u7410\u7684\u9898\u76ee\u8981\u591a\u5c01\u88c5\u97e9\u7855\uff0c\u4e0d\u7136\u4f1a\u628a\u81ea\u5df1\u5f04\u6655\u7684\uff0c\u4e5f\u4e0d\u597d$Debug$~~\n* Code\uff1a\u5f88\u591a\u7ec6\u8282\u5728\u4ee3\u7801\u4e2d\u54e6~\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#define INF 999999999\nusing namespace std;\nstruct Point{\n\tint x,y;\n}p[105];//\u5404\u4e2a\u98de\u673a\u573a\u7684\u5750\u6807\nint T,t,s,n,A,B,cnt;//\u5b9a\u4e49\uff1a\u98de\u673a\u8d39\u7528\u3001\u94c1\u8def\u8d39\u7528\u3001\u57ce\u5e02\u4e2a\u6570s\u3001n\u7ec4\u6570\u636e\u3001A\u51fa\u53d1\u70b9\u3001B\u76ee\u7684\u5730\u3001\u98de\u673a\u573a\u4e2a\u6570\nint textx[5],texty[5];//\u4e34\u65f6\u6570\u7ec4\ndouble g[1005][1005],ans;//\u90bb\u63a5\u6570\u7ec4\u50a8\u5b58\u56fe\u3001ans\u7b54\u6848\nvoid Init(){//\u7a0b\u5e8f\u521d\u59cb\u5316\n\tmemset(p,0,sizeof(p));\n\tfor (int i=1;i<=1000;i++)\n\t\tfor (int j=1;j<=1000;j++)\n\t\t\tif (i!=j) g[i][j]=INF;\n\t\t\telse g[i][j]=0;\n\tcnt=0;\n\tt=0;\n\tans=INF;\n\treturn;\n}\nvoid Get(){//\u5229\u7528\u52fe\u80a1\u5b9a\u7406\uff0c\u8ba1\u7b97\u7b2c4\u4e2a\u70b9\n    int ab=(textx[1]-textx[2])*(textx[1]-textx[2])+(texty[1]-texty[2])*(texty[1]-texty[2]);\n    int ac=(textx[1]-textx[3])*(textx[1]-textx[3])+(texty[1]-texty[3])*(texty[1]-texty[3]);\n    int bc=(textx[2]-textx[3])*(textx[2]-textx[3])+(texty[2]-texty[3])*(texty[2]-texty[3]);\n    if (ab+ac==bc) textx[4]=textx[2]+textx[3]-textx[1],texty[4]=texty[2]+texty[3]-texty[1];\n    if (ab+bc==ac) textx[4]=textx[1]+textx[3]-textx[2],texty[4]=texty[1]+texty[3]-texty[2];\n    if (ac+bc==ab) textx[4]=textx[1]+textx[2]-textx[3],texty[4]=texty[1]+texty[2]-texty[3];\n    return;\n}\nvoid addEdge(int a,int b,int x[],int y[]){//\u6dfb\u52a0\u94c1\u8def\u7ebf\n\tint ta=a+cnt;\n\tint tb=b+cnt;\n\tp[ta].x=x[a];\n\tp[ta].y=y[a];\n\tp[tb].x=x[b];\n\tp[tb].y=y[b];\n\tif (g[ta][tb]!=INF) return;//\u5982\u679c\u7b97\u8fc7\u5c31\u4e0d\u7b97\u4e86\n\tg[ta][tb]=sqrt((x[a]-x[b])*(x[a]-x[b])+(y[a]-y[b])*(y[a]-y[b]))*t;\n\tg[tb][ta]=g[ta][tb];\n\treturn;\n}\nvoid addFlight(int a,int b){\n\tif (g[a][b]!=INF) return;//\u5982\u679c\u4ee5\u524d\u7b97\u8fc7\uff08\u5305\u62ec\u94c1\u8def\u7ebf\uff09\uff0c\u5c31\u4e0d\u7b97\u4e86\uff0c\u4fdd\u8bc1\u98de\u673a\u7ebf\u4e0d\u4f1a\u7b97\u5230\u94c1\u8def\u7ebf\u53bb\n\tg[a][b]=sqrt((p[a].x-p[b].x)*(p[a].x-p[b].x)+(p[a].y-p[b].y)*(p[a].y-p[b].y))*T;\n\tg[b][a]=g[a][b];\n\treturn;\n}\nvoid Floyd(){//\u6700\u77ed\u8def\u8ba1\u7b97\n\tfor (int k=1;k<=cnt;k++)\n\t\tfor (int i=1;i<=cnt;i++)\n\t\t\tfor (int j=1;j<=cnt;j++)\n\t\t\t\t\tg[i][j]=min(g[i][j],g[i][k]+g[k][j]);\n\treturn;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tInit();\n\t\tscanf(\"%d%d%d%d\",&s,&T,&A,&B);\n\t\tfor (int i=1;i<=s;i++){\n\t\t\tscanf(\"%d%d%d%d%d%d%d\",&textx[1],&texty[1],&textx[2],&texty[2],&textx[3],&texty[3],&t);\n\t\t\tGet();\n\t\t\tfor (int j=1;j<=4;j++)\n\t\t\t\tfor (int k=1;k<=4;k++)\n\t\t\t\t\tif (j!=k) addEdge(j,k,textx,texty);\n\t\t\tcnt+=4;\n\t\t}\n\t\tfor (int i=1;i<=cnt;i++)\n\t\t\tfor (int j=1;j<=cnt;j++)\n\t\t\t\taddFlight(i,j);\n\t\tFloyd();\n\t\tfor (int i=A*4-3;i<=A*4;i++)\n\t\t\tfor (int j=B*4-3;j<=B*4;j++)\n\t\t\t\tans=min(ans,g[i][j]);//\u679a\u4e3e\u6700\u77ed\u8d39\u7528\n\t\tprintf(\"%.1lf\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n* PS\uff1a\u4ee3\u7801\u5199\u592a\u4e11\u4e86QAQ\uff0c\u53d1\u73b0\u6709\u95ee\u9898\u8bf7\u79c1\u4fe1\u6211~~",
        "postTime": 1549511986,
        "uid": 60356,
        "name": "Snowflake_Pink",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1027 \u3010Car\u7684\u65c5\u884c\u8def\u7ebf\u3011"
    },
    {
        "content": "\u55ef\u8fd9\u9053\u9898......\n\n\u662f\u4e2a\u6700\u77ed\u8def\u7684\u677f\u5b50\uff08~~\u5e76\u4e0d~~\uff09\n\n\u770b\u6837\u5b50SPFA,dij\u548cfloyd\u90fd\u80fd\u8fc7\uff0c\u6211\u5199\u7684spfa\n\n\u7136\u800c\u8fd9\u9053\u9898\u91cd\u70b9\u662f\u5efa\u56fe\u3002\n\n\u5728\u8bfb\u5165s,t,a,b\u540e\uff1a\n\n\u00b7\u8bfb\u5165\u6bcf\u4e2a\u77e9\u5f623\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u7b2c\u56db\u4e2a\u70b9\u7684\u5750\u6807\u3002\n\u8fd9\u56db\u4e2a\u70b9\u6807\u53f7\u4e3ai*4,i*4+1,i*4+2,i*4+3;\n\n\u00b7\u5c06\u8fd9\u56db\u4e2a\u70b9\u7684city\uff08\u6240\u5c5e\u77e9\u5f62\u7f16\u53f7\uff09\u90fd\u8bbe\u7f6e\u4e3ai\u3002\n\n\u00b7\u5f00\u59cbspfa:\n\n\u00b7\u4e00\u5f00\u59cb\u5c06a*4-3,a*4-2,a*4-1,a*4\u8fd9\u56db\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9\u5168\u90e8push\u5165queue\u4e2d\u3002\n\n\u00b7\u6ce8\u610fmemset\u8ddd\u79bb\u6570\u7ec4d\u65f6\uff0c\u7531\u4e8ed\u7684\u7c7b\u578b\u662fdouble\uff0c\u6240\u4ee5\u4f1a\u51fa\u4e00\u4e9b\u5f88\u795e\u5947\u7684\u9505......\n\n\u00b7\u7136\u540espfa\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2aui\uff0c\u679a\u4e3e\u4ece1\u5230s*4\u7684\u6240\u6709\u70b9\uff08\u7701\u53bb\u5efa\u56fe\uff0c\u53cd\u6b63\u6570\u636e\u5c0f\uff09\uff0c\u7136\u540e\u68c0\u9a8c\uff1a\n\n\u5982\u679c\u4e24\u4e2a\u70b9ui,vi\u5728\u540c\u4e00\u4e2a\u77e9\u5f62\u4e2d\uff08ui.city==vi.city\uff09\uff0c\u90a3\u4e48\u4e24\u70b9\u4e4b\u95f4\u7684\u82b1\u8d39\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u5e73\u9762\u8ddd\u79bb\u00d7T[i];\n\n\u5982\u679c\u4e0d\u5728\uff0c\u90a3\u4e48\u5c31\u5750\u98de\u673a\uff1a\u4e24\u70b9\u4e4b\u95f4\u7684\u5e73\u9762\u8ddd\u79bb\u00d7\u5168\u5c40t\u3002\n\n\u8fd9\u6837\u5b50\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\n\n\u6700\u540e\u68c0\u67e5d[b*4-3],d[b*4-2],d[b*4-1],d[b*4]\u56db\u4e2a\u70b9\uff08\u76ee\u6807\u77e9\u5f62b\u7684\u56db\u4e2a\u70b9\uff09\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5373\u4e3a\u7b54\u6848\u3002",
        "postTime": 1535457198,
        "uid": 57651,
        "name": "soul_M",
        "ccfLevel": 0,
        "title": "P1027 Car\u7684\u65c5\u884c\u8def\u7ebf"
    }
]