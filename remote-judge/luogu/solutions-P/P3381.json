[
    {
        "content": "\u5b89\u5229\u4e2a\u4ebablog\uff1ahttp://blog.csdn.net/A_Comme_Amour/article/details/79356220\n\n\u5b66\u4e00\u4e2a\u65b0\u7b97\u6cd5\uff0c\u603b\u8981\u7ffb\u591a\u800c\u6742\u7684blog\uff0c\u6536\u83b7\u4e0d\u591a\u3002\u6240\u4ee5\u6211\u5c31\u81f4\u529b\u4e8e\u628a\u5b66\u4e60\u7b14\u8bb0\u603b\u7ed3\uff0c\u5e0c\u671b\u4e00\u904d\u770b\u61c2\u3002\n[\u7b80\u5355\u5165\u95e8](http://blog.csdn.net/wzw1376124061/article/details/55001639) \uff08\u4f46\u662f\u4e0d\u5168\uff09\n\n#\u4e00\u3001\u4ece\u6982\u5ff5\u5165\u624b\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------\n[\u7f51\u7edc\u6d41](https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%B5%81/2987528?fr=aladdin#4)\u7528\u4e8e\u89e3\u51b3\u6d41\u91cf\u95ee\u9898\n\n**\u7f51\u7edc\u6d41**:\u6240\u6709\u5f27\u4e0a\u6d41\u91cf\u7684\u96c6\u5408f={f(u,v)},\u79f0\u4e3a\u8be5\u5bb9\u91cf\u7f51\u7edc\u7684\u4e00\u4e2a\u7f51\u7edc\u6d41.\n\n - \u5b9a\u4e49\uff1a\u5e26\u6743\u7684\u6709\u5411\u56feG=(V,E)\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5219\u79f0\u4e3a\u7f51\u7edc\u6d41\u56fe(flow network)\uff1a\n1. \u4ec5\u6709\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9s\uff0c\u79f0s\u4e3a\u6e90\u70b9\n2. \u4ec5\u6709\u4e00\u4e2a\u51fa\u5ea6\u4e3a0\u7684\u9876\u70b9t\uff0c\u79f0t\u4e3a\u6c47\u70b9\n3. \u6bcf\u6761\u8fb9\u7684\u6743\u503c\u90fd\u4e3a\u975e\u8d1f\u6570\uff0c\u79f0\u4e3a\u8be5\u8fb9\u7684\u5bb9\u91cf\uff0c\u8bb0\u4f5cc(i,j)\u3002\n\n \u5f27\u7684\u6d41\u91cf:\u901a\u8fc7\u5bb9\u91cf\u7f51\u7edcG\u4e2d\u6bcf\u6761\u5f27< u,v>,\u4e0a\u7684\u5b9e\u9645\u6d41\u91cf(\u7b80\u79f0\u6d41\u91cf),\u8bb0\u4e3af(u,v);\n\n##\u6027\u8d28\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\uff0c\u8bbef(u,v)\u5b9e\u9645\u6d41\u91cf\uff0c\u5219\u6574\u4e2a\u56feG\u7684\u6d41\u7f51\u7edc\u6ee1\u8db33\u4e2a\u6027\u8d28\uff1a\n\n1. \u5bb9\u91cf\u9650\u5236\uff1a\u5bf9\u4efb\u610fu,v\u2208V\uff0cf(u,v)\u2264c(u,v)\u3002\n2. \u53cd\u5bf9\u79f0\u6027\uff1a\u5bf9\u4efb\u610fu,v\u2208V\uff0cf(u,v) = -f(v,u)\u3002\u4eceu\u5230v\u7684\u6d41\u91cf\u4e00\u5b9a\u662f\u4ecev\u5230u\u7684\u6d41\u91cf\u7684\u76f8\u53cd\u503c\u3002\n3. \u6d41\u5b88\u6052\u6027\uff1a\u5bf9\u4efb\u610fu\uff0c\u82e5u\u4e0d\u4e3aS\u6216T\uff0c\u4e00\u5b9a\u6709\u2211f(u,v)=0\uff0c(u,v)\u2208E\u3002\u5373u\u5230\u76f8\u90bb\u8282\u70b9\u7684\u6d41\u91cf\u4e4b\u548c\u4e3a0\uff0c\u56e0\u4e3a\u6d41\u5165u\u7684\u6d41\u91cf\u548cu\u70b9\u6d41\u51fa\u7684\u6d41\u91cf\u76f8\u7b49\uff0cu\u70b9\u672c\u8eab\u4e0d\u4f1a\"\u5236\u9020\"\u548c\"\u6d88\u8017\"\u6d41\u91cf\u3002\n\n**\u53ef\u884c\u6d41**:\u5728\u5bb9\u91cf\u7f51\u7edcG\u4e2d\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u7f51\u7edc\u6d41f,\u79f0\u4e3a\u53ef\u884c\u6d41.\n\n    a.\u5f27\u6d41\u91cf\u9650\u5236\u6761\u4ef6:   0<=f(u,v)<=c(u,v);\n\n    b:\u5e73\u8861\u6761\u4ef6:\u5373\u6d41\u5165\u4e00\u4e2a\u70b9\u7684\u6d41\u91cf\u8981\u7b49\u4e8e\u6d41\u51fa\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf,(\u6e90\u70b9\u548c\u6c47\u70b9\u9664\u5916).\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223130126866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u4e0a\u56fe\u4e2d\u7684\u53ef\u884c\u6d41\u5373\u4e3a\uff082+1+2=\uff09**5**\n\n**\u96f6\u6d41** \u82e5\u7f51\u7edc\u6d41\u4e0a\u6bcf\u6761\u5f27\u4e0a\u7684\u6d41\u91cf\u90fd\u4e3a0,\u5219\u8be5\u7f51\u7edc\u6d41\u79f0\u4e3a\u96f6\u6d41.\n**\u4f2a\u6d41**:\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u6d41\u53ea\u6ee1\u8db3\u5f27\u6d41\u91cf\u9650\u5236\u6761\u4ef6,\u4e0d\u6ee1\u8db3\u5e73\u8861\u6761\u4ef6,\u5219\u8fd9\u79cd\u7f51\u7edc\u6d41\u4e3a\u4f2a\u6d41,\u6216\u79f0\u4e3a\u5bb9\u91cf\u53ef\u884c\u6d41.(\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u6709\u7528)\n######\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406:\n\u5728\u5bb9\u91cf\u7f51\u7edc\u4e2d,\u6ee1\u8db3\u5f27\u6d41\u91cf\u9650\u5236\u6761\u4ef6,\u4e14\u6ee1\u8db3\u5e73\u8861\u6761\u4ef6\u5e76\u4e14\u5177\u6709\u6700\u5927\u6d41\u91cf\u7684\u53ef\u884c\u6d41,\u79f0\u4e3a\u7f51\u7edc\u6700\u5927\u6d41,\u7b80\u79f0\u6700\u5927\u6d41.\n\n##\u6700\u5927\u6d41\n\n\u5bf9\u4e8e\u7f51\u7edc\u6d41\u56feG\uff0c\u6d41\u91cf\u6700\u5927\u7684\u53ef\u884c\u6d41f\uff0c\u79f0\u4e3a\u6700\u5927\u6d41\n\n#####**\u5f27**\u7684\u7c7b\u578b:\n\n1. a.\u9971\u548c\u5f27:\u5373f(u,v)=c(u,v);\n2. b.\u975e\u9971\u548c\u5f27:\u5373f(u,v) < c(u,v)\uff1b\n3. c.\u96f6\u6d41\u5f27:\u5373f(u,v)=0;\n4. d.\u975e\u96f6\u6d41\u5f27:\u5373f(u,v)>0.\n\n\u6700\u5927\u6d41\u6700\u5c0f\uff0c\u53ef\u884c\u6d41\u4e3a\u6700\u5927\u6d41\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0d\u5b58\u5728\u65b0\u7684\u589e\u5e7f\u8def\u5f84\u3002\n#####**\u94fe**:\n\u5728\u5bb9\u91cf\u7f51\u7edc\u4e2d,\u79f0\u9876\u70b9\u5e8f\u5217(u1,u2,u3,u4,..,un,v)\u4e3a\u4e00\u6761\u94fe\u8981\u6c42\u76f8\u90bb\u7684\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u5f27.\n\n*\u8bbeP\u662fG\u4e2d\u4e00\u6761\u4eceVs\u5230Vt\u7684\u94fe,\u7ea6\u5b9a\u4eceVs\u6307\u5411Vt\u7684\u65b9\u5411\u4e3a\u6b63\u65b9\u5411.**\u5728\u94fe\u4e2d\u5e76\u4e0d\u8981\u6c42\u6240\u6709\u7684\u5f27\u7684\u65b9\u5411\u90fd\u4e0e\u94fe\u7684\u65b9\u5411\u76f8\u540c**.*\n\n#####\u5272\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223131027841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n**\u65e0\u5411\u56fe\u7684\u5272\u96c6(Cut Set)**:C[A,B]\u662f\u5c06\u56feG\u5206\u4e3aA\u548cB\u4e24\u4e2a\u70b9\u96c6 A\u548cB\u4e4b\u95f4\u7684\u8fb9\u7684\u5168\u96c6\n**\u7f51\u7edc\u7684\u5272\u96c6**:C[S,T]\u662f\u5c06\u7f51\u7edcG\u5206\u4e3as\u548ct\u4e24\u90e8\u5206\u70b9\u96c6 S\u5c5e\u4e8es\u4e14T\u5c5e\u4e8et \u4eceS\u5230T\u7684\u8fb9\u7684\u5168\u96c6\n**\u5e26\u6743\u56fe\u7684\u5272(Cut)**\uff1a\u5c31\u662f\u5272\u96c6\u4e2d\u8fb9\u6216\u8005\u6709\u5411\u8fb9\u7684\u6743\u548c\n\n> \u901a\u4fd7\u7684\u7406\u89e3\u4e00\u4e0b: \u5272\u96c6\u597d\u6bd4\u662f\u4e00\u4e2a\u6050\u6016\u5206\u5b50 \u628a\u4f60\u5bb6\u548c\u81ea\u6765\u6c34\u5382\u4e4b\u95f4\u7684\u6c34\u7ba1\u7f51\u7edc\u780d\u65ad\u4e86\u4e00\u4e9b \u7136\u540e\u81ea\u6765\u6c34\u5382\u65e0\u8bba\u600e\u4e48\u653e\u6c34 \u6c34\u90fd\u53ea\u80fd\u4ece\u6c34\u7ba1\u65ad\u53e3\u54d7\u54d7\u6d41\u8d70\u4e86\n> \u4f60\u5bb6\u5c31\u505c\u6c34\u4e86 \u5272\u7684\u5927\u5c0f\u5e94\u8be5\u662f\u6050\u6016\u5206\u5b50\u5e94\u8be5\u5173\u5fc3\u7684\u4e8b \u6bd5\u7adf\u7ec6\u7ba1\u5b50\u597d\u5272\u4e00\u4e9b \u800c\u6700\u5c0f\u5272\u82b1\u7684\u529b\u6c14\u6700\u5c0f\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223130728835?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n##\u589e\u5e7f\u8def:\n\n\u5982\u679c\u4e00\u4e2a\u53ef\u884c\u6d41\u4e0d\u662f\u6700\u5927\u6d41\uff0c\u90a3\u4e48\u5f53\u524d\u7f51\u7edc\u4e2d\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u589e\u5e7f\u8def\n\u4ec0\u4e48\u662f\u589e\u5e7f\u8def\uff1f\n\u9884\u5907\uff1a\n\n\ta.\u524d\u5411\u5f27:(\u65b9\u5411\u4e0e\u94fe\u7684\u6b63\u65b9\u5411\u4e00\u81f4\u7684\u5f27),\u5176\u96c6\u5408\u8bb0\u4e3aP+,\n\tb.\u540e\u5411\u5f27:(\u65b9\u5411\u4e0e\u94fe\u7684\u6b63\u65b9\u5411\u76f8\u53cd\u7684\u5f27),\u5176\u96c6\u5408\u8bb0\u4e3aP-.\n\n\u8bbef\u662f\u4e00\u4e2a\u5bb9\u91cf\u7f51\u7edcG\u4e2d\u7684\u4e00\u4e2a\u53ef\u884c\u6d41,P\u662f\u4eceVs\u5230Vt \u7684\u4e00\u6761\u94fe,\u82e5P\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:\n\n\ta.P\u4e2d\u6240\u6709\u524d\u5411\u5f27\u90fd\u662f\u975e\u9971\u548c\u5f27,\n\n\tb.P\u4e2d\u6240\u6709\u540e\u5411\u5f27\u90fd\u662f\u975e\u96f6\u5f27.\n\n\u5219\u79f0P\u4e3a\u5173\u4e8e\u53ef\u884c\u6d41f \u7684\u4e00\u6761**\u589e\u5e7f\u8def**.\n\n\u6cbf\u8fd9\u589e\u5e7f\u8def\u6539\u8fdb\u53ef\u884c\u6d41\u7684\u64cd\u4f5c\u79f0\u4e3a**\u589e\u5e7f**.\n\n\u53ea\u770b\u6587\u5b57\u770b\u4e0d\u61c2\uff0c\u7ed3\u5408\u51e0\u5f20\u56fe\uff1a\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/2018022313392993?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223133937990?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n###\u6b8b\u7559\u5bb9\u91cf\n\u7ed9\u5b9a\u5bb9\u91cf\u7f51\u7edcG(V,E),\u53ca\u53ef\u884c\u6d41f,\u5f27< u,v>\u4e0a\u7684\u6b8b\u7559\u5bb9\u91cf\u8bb0\u4e3acl(u,v)=c(u,v)-f(u,v).\u6bcf\u6761\u5f27\u4e0a\u7684\u6b8b\u7559\u5bb9\u91cf\u8868\u793a\u8fd9\u6761\u5f27\u4e0a\u53ef\u4ee5\u589e\u52a0\u7684\u6d41\u91cf.\u56e0\u4e3a\u4ece\u9876\u70b9u\u5230\u9876\u70b9v\u7684\u6d41\u91cf\u51cf\u5c11,\u7b49\u6548\u4e0e\u4ece\u9876\u70b9v\u5230\u9876\u70b9u\u7684\u6d41\u91cf\u589e\u52a0,\u6240\u4ee5\u6bcf\u6761\u5f27< u,v>\u4e0a\u8fd8\u6709\u4e00\u4e2a\u53cd\u65b9\u5411\u7684\u6b8b\u7559\u5bb9\u91cfcl(v,u)=-f(u,v).\n\n###\u6b8b\u4f59\u7f51\u7edc (Residual Network) \n\uf097\u5728\u4e00\u4e2a\u7f51\u7edc\u6d41\u56fe\u4e0a\uff0c\u627e\u5230\u4e00\u6761\u6e90\u5230\u6c47\u7684\u8def\u5f84\uff08\u5373\u627e\u5230\u4e86\u4e00\u4e2a\u6d41\u91cf\uff09\u540e\uff0c\u5bf9\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\uff0c\u5176\u5bb9\u91cf\u90fd\u51cf\u53bb\u6b64\u6b21\u627e\u5230\u7684\u91cf\uff0c\u5bf9\u8def\u5f84\u4e0a\u6240\u6709\u7684\u8fb9\uff0c\u90fd\u6dfb\u52a0\u4e00\u6761\u53cd\u5411\u8fb9\uff0c\u5176\u5bb9\u91cf\u4e5f\u7b49\u4e8e\u6b64\u6b21\u627e\u5230\u7684\u6d41\u91cf\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u65b0\u56fe\uff0c\u5c31\u79f0\u4e3a\u539f\u56fe\u7684\u201c\u6b8b\u4f59\u7f51\u7edc\u201d \n\n##\u8d39\u7528\u6d41\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223134310493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n###\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n\u4e0b\u9762\u4ecb\u7ecd\u7f51\u7edc\u6d41\u7406\u8bba\u4e2d\u4e00\u4e2a\u6700\u4e3a\u91cd\u8981\u7684\u5b9a\u7406\n\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406(Maximum Flow, Minimum Cut Theorem):\n**\u7f51\u7edc\u7684\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272**\n\n> \u5177\u4f53\u7684\u8bc1\u660e\u5206\u4e09\u90e8\u5206\n> 1.\u4efb\u610f\u4e00\u4e2a\u6d41\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u4efb\u610f\u4e00\u4e2a\u5272 \u8fd9\u4e2a\u5f88\u597d\u7406\u89e3 \u81ea\u6765\u6c34\u516c\u53f8\u968f\u4fbf\u7ed9\u4f60\u5bb6\u901a\u70b9\u6c34 \u6784\u6210\u4e00\u4e2a\u6d41 \u6050\u6016\u5206\u5b50\u968f\u4fbf\u780d\u51e0\u5200 \u780d\u51fa\u4e00\u4e2a\u5272 \u7531\u4e8e\u5bb9\u91cf\u9650\u5236 \u6bcf\u4e00\u6839\u7684\u88ab\u780d\u7684\u6c34\u7ba1\u5b50\u6d41\u51fa\u7684\u6c34\u6d41\u91cf\u90fd\u5c0f\u4e8e\u7ba1\u5b50\u7684\u5bb9\u91cf \u6bcf\u4e00\u6839\u88ab\u780d\u7684\u6c34\u7ba1\u7684\u6c34\u672c\u6765\u90fd\u8981\u5230\u4f60\u5bb6\u7684 \u73b0\u5728\u6d41\u5230\u5916\u9762 \u52a0\u8d77\u6765\u5f97\u5230\u7684\u6d41\u91cf\u8fd8\u662f\u7b49\u4e8e\u539f\u6765\u7684\u6d41\n> \u7ba1\u5b50\u7684\u5bb9\u91cf\u52a0\u8d77\u6765\u5c31\u662f\u5272 \u6240\u4ee5\u6d41\u5c0f\u4e8e\u7b49\u4e8e\u5272 \u7531\u4e8e\u4e0a\u9762\u7684\u6d41\u548c\u5272\u90fd\u662f\u4efb\u610f\u6784\u9020\u7684 \u6240\u4ee5\u4efb\u610f\u4e00\u4e2a\u6d41\u5c0f\u4e8e\u4efb\u610f\u4e00\u4e2a\u5272\n> 2.\u6784\u9020\u51fa\u4e00\u4e2a\u6d41\u7b49\u4e8e\u4e00\u4e2a\u5272 \u5f53\u8fbe\u5230\u6700\u5927\u6d41\u65f6 \u6839\u636e\u589e\u5e7f\u8def\u5b9a\u7406 \u6b8b\u7559\u7f51\u7edc\u4e2ds\u5230t\u5df2\u7ecf\u6ca1\u6709\u901a\u8def\u4e86 \u5426\u5219\u8fd8\u80fd\u7ee7\u7eed\u589e\u5e7f \u6211\u4eec\u628as\u80fd\u5230\u7684\u7684\u70b9\u96c6\u8bbe\u4e3aS \u4e0d\u80fd\u5230\u7684\u70b9\u96c6\u4e3aT \u6784\u9020\u51fa\u4e00\u4e2a\u5272\u96c6C[S,T] S\u5230T\u7684\u8fb9\u5fc5\u7136\u6ee1\u6d41 \u5426\u5219\u5c31\u80fd\u7ee7\u7eed\u589e\u5e7f \u8fd9\u4e9b\u6ee1\u6d41\u8fb9\u7684\u6d41\u91cf\u548c\u5c31\u662f\u5f53\u524d\u7684\u6d41\u5373\u6700\u5927\u6d41\n> \u628a\u8fd9\u4e9b\u6ee1\u6d41\u8fb9\u4f5c\u4e3a\u5272 \u5c31\u6784\u9020\u51fa\u4e86\u4e00\u4e2a\u548c\u6700\u5927\u6d41\u76f8\u7b49\u7684\u5272\n> 3.\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272 \u8bbe\u76f8\u7b49\u7684\u6d41\u548c\u5272\u5206\u522b\u4e3aFm\u548cCm \u5219\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u6d41\u5c0f\u4e8e\u7b49\u4e8e\u4efb\u610f\u4e00\u4e2a\u5272 \u4efb\u610fF\u2264Fm=Cm\u2264\u4efb\u610fC \u5b9a\u7406\u8bf4\u660e\u5b8c\u6210\uff0c\u8bc1\u660e\u5982\u4e0b\uff1a  \u5bf9\u4e8e\u4e00\u4e2a\u7f51\u7edc\u6d41\u56feG=(V,E)\uff0c\u5176\u4e2d\u6709\u6e90\u70b9s\u548c\u6c47\u70b9t\uff0c\u90a3\u4e48\u4e0b\u9762\u4e09\u4e2a\u6761\u4ef6\u662f\u7b49\u4ef7\u7684\uff1a\n> 1. \u6d41f\u662f\u56feG\u7684\u6700\u5927\u6d41\n> 2. \u6b8b\u7559\u7f51\u7edcGf\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\n> 3. \u5bf9\u4e8eG\u7684\u67d0\u4e00\u4e2a\u5272(S,T)\uff0c\u6b64\u65f6f = C(S,T) \u9996\u5148\u8bc1\u660e1 => 2\uff1a\n> \n> \u6211\u4eec\u5229\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u6d41f\u662f\u56feG\u7684\u6700\u5927\u6d41\uff0c\u4f46\u662f\u6b8b\u7559\u7f51\u7edc\u4e2d\u8fd8\u5b58\u5728\u6709\u589e\u5e7f\u8defp\uff0c\u5176\u6d41\u91cf\u4e3afp\u3002\u5219\u6211\u4eec\u6709\u6d41f'=f+fp>f\u3002\u8fd9\u4e0ef\u662f\u6700\u5927\u6d41\u4ea7\u751f\u77db\u76fe\u3002\n> \u63a5\u7740\u8bc1\u660e2 => 3\uff1a\n> \n> \u5047\u8bbe\u6b8b\u7559\u7f51\u7edcGf\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u5728\u6b8b\u7559\u7f51\u7edcGf\u4e2d\u4e0d\u5b58\u5728\u8def\u5f84\u4eces\u5230\u8fbet\u3002\u6211\u4eec\u5b9a\u4e49S\u96c6\u5408\u4e3a\uff1a\u5f53\u524d\u6b8b\u7559\u7f51\u7edc\u4e2ds\u80fd\u591f\u5230\u8fbe\u7684\u70b9\u3002\u540c\u65f6\u5b9a\u4e49T=V-S\u3002\n> \u6b64\u65f6(S,T)\u6784\u6210\u4e00\u4e2a\u5272(S,T)\u3002\u4e14\u5bf9\u4e8e\u4efb\u610f\u7684u\u2208S,v\u2208T\uff0c\u6709f(u,v)=c(u,v)\u3002\u82e5f(u,v) < c(u,v)\uff0c\u5219\u6709Gf(u,v) > 0\uff0cs\u53ef\u4ee5\u5230\u8fbev\uff0c\u4e0ev\u5c5e\u4e8eT\u77db\u76fe\u3002\n> \u56e0\u6b64\u6709f(S,T)=\u03a3f(u,v)=\u03a3c(u,v)=C(S,T)\u3002 \u6700\u540e\u8bc1\u660e3 => 1\uff1a\n> \n> \u7531\u4e8ef\u7684\u4e0a\u754c\u4e3a\u6700\u5c0f\u5272\uff0c\u5f53f\u5230\u8fbe\u5272\u7684\u5bb9\u91cf\u65f6\uff0c\u663e\u7136\u5c31\u5df2\u7ecf\u5230\u8fbe\u6700\u5927\u503c\uff0c\u56e0\u6b64f\u4e3a\u6700\u5927\u6d41\u3002 \u8fd9\u6837\u5c31\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u6240\u6c42\u5f97\u7684\u4e00\u5b9a\u662f\u6700\u5927\u6d41\u3002\n\n[\u8fd9\u7bc7\u6587\u7ae0](http://blog.csdn.net/mystery_guest/article/details/51910913)\u5bf9\u7406\u89e3\u6982\u5ff5\u4e5f\u662f\u4e0d\u9519\u7684\u3002\n\n\u597d\u4e86\u6982\u5ff5\u5c31\u8bb2\u5230\u8fd9\u91cc\uff0c\u4e0b\u9762\u770b\u4e00\u770b\u5177\u4f53\u7684\u7b97\u6cd5\n\n\n#\u4e8c\u3001\u7f51\u7edc\u6d41\u5e38\u7528\u7b97\u6cd5\n\n-------------------------------------------------\n##\u4e00\u3001\u6700\u5927\u6d41\u7b97\u6cd5\n\u4e0b\u9762\u662f\u6240\u6709\u6700\u5927\u6d41\u7b97\u6cd5\u7684**\u7cbe\u534e\u90e8\u5206**\uff1a\u5f15\u5165\u53cd\u5411\u8fb9\n\u4e3a\u4ec0\u4e48\u8981\u6709\u53cd\u5411\u8fb9\u5462\uff1f\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://images.cnitblog.com/blog/367486/201301/27153225-62572f69bbbe4ca79c84dcd8201b47ef.jpg)\n\u6211\u4eec\u7b2c\u4e00\u6b21\u627e\u5230\u4e861-2-3-4\u8fd9\u6761\u589e\u5e7f\u8def\uff0c\u8fd9\u6761\u8def\u4e0a\u7684delta\u503c\u663e\u7136\u662f1\u3002\u4e8e\u662f\u6211\u4eec\u4fee\u6539\u540e\u5f97\u5230\u4e86\u4e0b\u9762\u8fd9\u4e2a\u6d41\u3002\uff08\u56fe\u4e2d\u7684\u6570\u5b57\u662f\u5bb9\u91cf\uff09\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://images.cnitblog.com/blog/367486/201301/27153304-8226aeae0e4a4adaae19da3b691e7d6a.jpg)\n\u8fd9\u65f6\u5019(1,2)\u548c(3,4)\u8fb9\u4e0a\u7684\u6d41\u91cf\u90fd\u7b49\u4e8e\u5bb9\u91cf\u4e86\uff0c\u6211\u4eec\u518d\u4e5f\u627e\u4e0d\u5230\u5176\u4ed6\u7684\u589e\u5e7f\u8def\u4e86\uff0c\u5f53\u524d\u7684\u6d41\u91cf\u662f1\u3002\n\n\u4f46\u8fd9\u4e2a\u7b54\u6848\u660e\u663e\u4e0d\u662f\u6700\u5927\u6d41\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u8d701-2-4\u548c1-3-4\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f97\u5230\u6d41\u91cf\u4e3a2\u7684\u6d41\u3002\n\n\u90a3\u4e48\u6211\u4eec\u521a\u521a\u7684\u7b97\u6cd5\u95ee\u9898\u5728\u54ea\u91cc\u5462\uff1f\u95ee\u9898\u5c31\u5728\u4e8e\u6211\u4eec\u6ca1\u6709\u7ed9\u7a0b\u5e8f\u4e00\u4e2a\u201d\u540e\u6094\u201d\u7684\u673a\u4f1a\uff0c\u5e94\u8be5\u6709\u4e00\u4e2a\u4e0d\u8d70(2-3-4)\u800c\u6539\u8d70(2-4)\u7684\u673a\u5236\u3002\u90a3\u4e48\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u56de\u6eaf\u641c\u7d22\u5417\uff1f\u90a3\u4e48\u6211\u4eec\u7684\u6548\u7387\u5c31\u4e0a\u5347\u5230\u6307\u6570\u7ea7\u4e86\u3002\n\n\u800c\u8fd9\u4e2a\u7b97\u6cd5\u795e\u5947\u7684\u5229\u7528\u4e86\u4e00\u4e2a\u53eb\u505a\u53cd\u5411\u8fb9\u7684\u6982\u5ff5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5373\u6bcf\u6761\u8fb9(I,j)\u90fd\u6709\u4e00\u6761\u53cd\u5411\u8fb9(j,i)\uff0c\u53cd\u5411\u8fb9\u4e5f\u540c\u6837\u6709\u5b83\u7684\u5bb9\u91cf\u3002\n\n\u6211\u4eec\u76f4\u63a5\u6765\u770b\u5b83\u662f\u5982\u4f55\u89e3\u51b3\u7684\uff1a\n\n\u5728\u7b2c\u4e00\u6b21\u627e\u5230\u589e\u5e7f\u8def\u4e4b\u540e\uff0c\u5728\u628a\u8def\u4e0a\u6bcf\u4e00\u6bb5\u7684\u5bb9\u91cf\u51cf\u5c11delta\u7684\u540c\u65f6\uff0c\u4e5f\u628a\u6bcf\u4e00\u6bb5\u4e0a\u7684\u53cd\u65b9\u5411\u7684\u5bb9\u91cf\u589e\u52a0delta\u3002\u5373\u5728Dec(c[x,y],delta)\u7684\u540c\u65f6\uff0cinc(c[y,x],delta)\n\n\u6211\u4eec\u6765\u770b\u521a\u624d\u7684\u4f8b\u5b50\uff0c\u5728\u627e\u52301-2-3-4\u8fd9\u6761\u589e\u5e7f\u8def\u4e4b\u540e\uff0c\u628a\u5bb9\u91cf\u4fee\u6539\u6210\u5982\u4e0b\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://images.cnitblog.com/blog/367486/201301/27153333-d7ce9ddf0ef341f6afde35bbac093526.jpg)\n\n\u8fd9\u65f6\u518d\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u627e\u52301-3-2-4\u8fd9\u6761\u53ef\u589e\u5e7f\u91cf\uff0c\u5373delta\u503c\u4e3a1\u7684\u53ef\u589e\u5e7f\u8def\u3002\u5c06\u8fd9\u6761\u8def\u589e\u5e7f\u4e4b\u540e\uff0c\u5f97\u5230\u4e86\u6700\u5927\u6d412\u3002\n\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://images.cnitblog.com/blog/367486/201301/27153353-d3ede6ceafed452fb72fb6271eaa785b.jpg)\n \n\u90a3\u4e48\uff0c\u8fd9\u4e48\u505a\u4e3a\u4ec0\u4e48\u4f1a\u662f\u5bf9\u7684\u5462\uff1f\u6211\u6765\u901a\u4fd7\u7684\u89e3\u91ca\u4e00\u4e0b\u5427\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u6211\u4eec\u7b2c\u4e8c\u6b21\u7684\u589e\u5e7f\u8def\u8d703-2\u8fd9\u6761\u53cd\u5411\u8fb9\u7684\u65f6\u5019\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a2-3\u8fd9\u6761\u6b63\u5411\u8fb9\u5df2\u7ecf\u662f\u7528\u4e86\u7684\u6d41\u91cf\u7ed9\u201d\u9000\u201d\u4e86\u56de\u53bb\uff0c\u4e0d\u8d702-3\u8fd9\u6761\u8def\uff0c\u800c\u6539\u8d70\u4ece2\u70b9\u51fa\u53d1\u7684\u5176\u4ed6\u7684\u8def\u4e5f\u5c31\u662f2-4\u3002\uff08\u6709\u4eba\u95ee\u5982\u679c\u8fd9\u91cc\u6ca1\u67092-4\u600e\u4e48\u529e\uff0c\u8fd9\u65f6\u5047\u5982\u6ca1\u67092-4\u8fd9\u6761\u8def\u7684\u8bdd\uff0c\u6700\u7ec8\u8fd9\u6761\u589e\u5e7f\u8def\u4e5f\u4e0d\u4f1a\u5b58\u5728\uff0c\u56e0\u4e3a\u4ed6\u6839\u672c\u4e0d\u80fd\u8d70\u5230\u6c47\u70b9\uff09\u540c\u65f6\u672c\u6765\u57283-4\u4e0a\u7684\u6d41\u91cf\u75311-3-4\u8fd9\u6761\u8def\u6765\u201d\u63a5\u7ba1\u201d\u3002\u800c\u6700\u7ec82-3\u8fd9\u6761\u8def\u6b63\u5411\u6d41\u91cf1\uff0c\u53cd\u5411\u6d41\u91cf1\uff0c\u7b49\u4e8e\u6ca1\u6709\u6d41\u91cf\u3002\n\n#####\u8fd9\u5c31\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u7cbe\u534e\u90e8\u5206\uff0c\u5229\u7528\u53cd\u5411\u8fb9\uff0c\u4f7f\u7a0b\u5e8f\u6709\u4e86\u4e00\u4e2a\u540e\u6094\u548c\u6539\u6b63\u7684\u673a\u4f1a\n\n###\uff081\uff09Edmonds-Karp\u7b97\u6cd5\n####\u539f\u7406\n\n\uf097\u6c42\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u4e0d\u65ad\u627e\u5230\u4e00\u6761\u6e90\u5230\u6c47\u7684\u8def\u5f84\uff0c\u82e5\u6709\uff0c\u627e\u51fa\u589e\u5e7f\u8def\u5f84\u4e0a\u6bcf\u4e00\u6bb5[\u5bb9\u91cf-\u6d41\u91cf]\u7684\u6700\u5c0f\u503cdelta\uff0c\u7136\u540e\u6784\u5efa\u6b8b\u4f59\u7f51\u7edc\uff0c\u518d\u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u5bfb\u627e\u65b0\u7684\u8def\u5f84\uff0c\u4f7f\u603b\u6d41\u91cf\u589e\u52a0\u3002\u7136\u540e\u5f62\u6210\u65b0\u7684\u6b8b\u4f59\u7f51\u7edc\uff0c\u518d\u5bfb\u627e\u65b0\u8def\u5f84\u2026..\u76f4\u5230\u67d0\u4e2a\u6b8b\u4f59\u7f51\u7edc\u4e0a\u627e\u4e0d\u5230\u4ece\u6e90\u5230\u6c47\u7684\u8def\u5f84\u4e3a\u6b62\uff0c\u6700\u5927\u6d41\u5c31\u7b97\u51fa\u6765\u4e86\u3002 \n\n\u5148\u4eceFord-Fulkerson\u7b97\u6cd5\u770b\u8d77\uff1f\n\n\u73b0\u5728\u5047\u8bbe\u6bcf\u6761\u8fb9\u7684\u5bb9\u91cf\u90fd\u662f\u6574\u6570\u3002\u8fd9\u4e2a\u7b97\u6cd5\u6bcf\u6b21\u90fd\u80fd\u5c06\u6d41\u81f3\u5c11\u589e\u52a01\u3002\u7531\u4e8e\u6574\u4e2a\u7f51\u7edc\u7684\u6d41\u91cf\u6700\u591a\u4e0d\u8d85\u8fc7\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u7684\u5bb9 \n\u91cf\u548cC\uff0c\u4ece\u800c\u7b97\u6cd5\u4f1a\u7ed3\u675f \u3002\n\u8fd9\u4e2a\u7b97\u6cd5\u5b9e\u73b0\u5f88\u7b80\u5355\u4f46\u662f\u6ce8\u610f\u5230\u5728\u56fe\u4e2dC\u53ef\u80fd\u5f88\u5927\u5f88\u5927\n \u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u5f20\u56fe \n\n\u5982\u679c\u8fd0\u6c14\u4e0d\u597d\u8fd9\u79cd\u56fe\u4f1a\u8ba9\u4f60\u7684\u7a0b\u5e8f\u6267\u884c200\u6b21dfs\uff0c\u867d\u7136\u5b9e\u9645\u4e0a\u6700\u5c11\u53ea\u89812\u6b21\u6211\u4eec\u5c31\u80fd\u5f97\u5230\u6700\u5927\u6d41\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223142750611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u5982\u4f55\u907f\u514d\u4e0a\u8ff0\u7684\u60c5\u51b5\u53d1\u751f\uff1f \n\n\u5728\u6bcf\u6b21\u589e\u5e7f\u7684\u65f6\u5019\uff0c\u9009\u62e9\u4ece\u6e90\u5230\u6c47\u7684\u5177\u6709\u6700\u5c11\u8fb9\u6570\u7684\u589e\u5e7f\u8def\u5f84,\u4e5f\u5c31\u662f\u8bf4\uff01**\u4e0d\u662f\u901a\u8fc7dfs\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u800c\u662f\u901a\u8fc7bfs\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u3002** \n\u8fd9\u5c31\u662f*Edmonds-Karp \u6700\u77ed\u589e\u5e7f\u8def\u7b97\u6cd5* \n\u5df2\u7ecf\u8bc1\u660e\u8fd9\u79cd\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u4e0a\u9650\u4e3a**nm2**  (n\u662f\u70b9\u6570\uff0cm\u662f\u8fb9\u6570\uff09\n\n\n####\u4ee3\u7801\n\n\u677f\u5b50\u9898 \uff1a[codevs1933](http://codevs.cn/problem/1993/) [poj1273](http://poj.org/problem?id=1273)\n\n```\n//codevs 1993\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int INF=0x7ffffff;\n\nqueue <int> q;\nint n,m,x,y,s,t,g[201][201],pre[201],flow[201],maxflow; \n//g\u90bb\u63a5\u77e9\u9635\u5b58\u56fe\uff0cpre\u589e\u5e7f\u8def\u5f84\u4e2d\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\uff0cflow\u6e90\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf \n\ninline int bfs(int s,int t)\n{\n\twhile (!q.empty()) q.pop();\n    for (int i=1; i<=n; i++) pre[i]=-1;\n    pre[s]=0;\n    q.push(s);\n    flow[s]=INF;\n    while (!q.empty())\n\t{\n        int x=q.front();\n        q.pop();\n\t\tif (x==t) break;\n\t\tfor (int i=1; i<=n; i++)\n          //EK\u4e00\u6b21\u53ea\u627e\u4e00\u4e2a\u589e\u5e7f\u8def \n\t\t  if (g[x][i]>0 && pre[i]==-1)\n\t\t  {\n\t\t\tpre[i]=x;\n\t\t\tflow[i]=min(flow[x],g[x][i]);\n\t\t\tq.push(i);\n          }\n\t}\n\tif (pre[t]==-1) return -1;\n\telse return flow[t];\n}\n\n//increase\u4e3a\u589e\u5e7f\u7684\u6d41\u91cf \nvoid EK(int s,int t)\n{\n\tint increase=0;\n\twhile ((increase=bfs(s,t))!=-1)//\u8fd9\u91cc\u7684\u62ec\u53f7\u52a0\u9519\u4e86\uff01Tle \n\t{//\u8fed\u4ee3 \n\t\tint k=t;\n\t\twhile (k!=s)\n\t\t{\n\t\t\tint last=pre[k];//\u4ece\u540e\u5f80\u524d\u627e\u8def\u5f84\n\t\t\tg[last][k]-=increase;\n\t\t\tg[k][last]+=increase;\n\t\t\tk=last;\n\t\t}\n\t\tmaxflow+=increase;\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d%d\",&m,&n);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tg[x][y]+=z;//\u6b64\u5904\u4e0d\u53ef\u76f4\u63a5\u8f93\u5165\uff0c\u8981+= \n\t}\n\tEK(1,n);\n\tprintf(\"%d\",maxflow);\n\treturn 0;\n}\n```\n\n\n###\uff082\uff09 Dinic\u7b97\u6cd5\n\n\u524d\u9762\u7684\u7f51\u7edc\u6d41\u7b97\u6cd5\uff0c\u6bcf\u8fdb\u884c\u4e00\u6b21\u589e\u5e7f\uff0c\u90fd\u8981\u505a \u4e00\u904dBFS\uff0c\u5341\u5206\u6d6a\u8d39\u3002\u80fd\u5426\u5c11\u505a\u51e0\u6b21BFS? \n\u8fd9\u5c31\u662fDinic\u7b97\u6cd5\u8981\u89e3\u51b3\u7684\u95ee\u9898 \n####\u539f\u7406\ndinic\u7b97\u6cd5\u5728EK\u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u5206\u5c42\u56fe\u7684\u6982\u5ff5\uff0c\u6839\u636e\u4eces\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u4e0d\u540c\uff0c\u628a\u6574\u4e2a\u56fe\u5206\u5c42\u3002\u5bfb\u627e\u7684\u589e\u5e7f\u8def\u8981\u6c42\u6ee1\u8db3\u6240\u6709\u7684\u70b9\u5206\u522b\u5c5e\u4e8e\u4e0d\u540c\u7684\u5c42\uff0c\u4e14\u82e5\u589e\u5e7f\u8def\u4e3as,P1,P2\u2026Pk,t\uff0c\u70b9v\u5728\u5206\u5c42\u56fe\u4e2d\u7684\u6240\u5c5e\u7684\u5c42\u8bb0\u4e3adeepv\uff0c\u90a3\u4e48\u5e94\u6ee1\u8db3deeppi=deeppi\u22121+1\n\n\uf097Edmonds-Karp\u7684\u63d0\u9ad8\u4f59\u5730\uff1a\u9700\u8981\u591a\u6b21\u4eces\u5230t\u8c03\u7528BFS\uff0c\u53ef\u4ee5\u8bbe\u6cd5\u51cf\u5c11\u8c03\u7528\u6b21\u6570\u3002 \u4ea6\u5373\uff1a\u4f7f\u7528\u4e00\u79cd\u4ee3\u4ef7\u8f83\u5c0f\u7684\u9ad8\u6548\u589e\u5e7f\u65b9\u6cd5\u3002\u8003\u8651\uff1a\u5728\u4e00\u6b21\u589e\u5e7f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bfb\u627e\u591a\u6761\u589e\u5e7f\u8def\u5f84\u3002 \n\uf097DFS \n####\u7b97\u6cd5\u6d41\u7a0b\n- \u5148\u5229\u7528BFS\u5bf9\u6b8b\u4f59\u7f51\u7edc\u5206\u5c42\n\u4e00\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u5c31\u662f\u6e90\u70b9\u5230\u5b83\u6700\u5c11\u8981\u7ecf\u8fc7\u7684\u8fb9\u6570\u3002 \n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223171705465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n-    \u5229\u7528BFS\u5bf9\u6b8b\u4f59\u7f51\u7edc\u5206\u5c42\uff0c\u5206\u5b8c\u5c42\u540e\uff0c\u5229\u7528DFS\u4ece\u524d\u4e00\u5c42\u5411\u540e\u4e00\u5c42\u53cd\u590d\u5bfb\u627e\u589e\u5e7f\u8def\u3002 \n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180223171738230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9Db21tZV9BbW91cg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n - \u5206\u5b8c\u5c42\u540e\uff0c\u4ece\u6e90\u70b9\u5f00\u59cb\uff0c\u7528DFS\u4ece\u524d\u4e00\u5c42\u5411\u540e\u4e00\u5c42\u53cd\u590d\u5bfb\u627e\u589e\u5e7f\u8def(\u5373\u8981\u6c42DFS\u7684\u6bcf\u4e00\u6b65\u90fd\u5fc5\u987b\u8981\u8d70\u5230\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff09\u3002 \n \u56e0\u6b64\uff0c\u524d\u9762\u5728\u5206\u5c42\u65f6\uff0c\u53ea\u8981\u8fdb\u884c\u5230\u6c47\u70b9\u7684\u5c42\u6b21\u6570\u88ab\u7b97\u51fa\u5373\u53ef\u505c\u6b62\uff0c\u56e0\u4e3a\u6309\u7167\u8be5DFS\u7684\u89c4\u5219\uff0c\u548c\u6c47\u70b9\u540c\u5c42\u6216\u66f4\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u662f\u4e0d\u53ef\u80fd\u8d70\u5230\u6c47\u70b9\u7684\u3002 \n -  DFS\u8fc7\u7a0b\u4e2d\uff0c\u8981\u662f\u78b0\u5230\u4e86\u6c47\u70b9\uff0c\u5219\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u5f84\u3002\u6b64\u65f6\u8981\u589e\u52a0\u603b\u6d41\u91cf\u7684\u503c\uff0c\u6d88\u51cf\u8def\u5f84\u4e0a\u5404\u8fb9\u7684\u5bb9\u91cf\uff0c\u5e76\u6dfb\u52a0\u53cd\u5411\u8fb9\uff0c\u5373\u6240\u8c13\u7684\u8fdb\u884c\u589e\u5e7f\u3002 \n\n - DFS\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def\u5f84\u540e\uff0c\u5e76\u4e0d\u7acb\u5373\u7ed3\u675f\uff0c\u800c\u662f\u56de\u6eaf\u540e\u7ee7\u7eedDFS\u5bfb\u627e\u4e0b\u4e00\u4e2a\u589e\u5e7f\u8def\u5f84\u3002 \n\u56de\u6eaf\u5230\u54ea\u4e2a\u8282\u70b9\u5462\uff1f \n\u56de\u6eaf\u5230\u7684\u8282\u70b9u\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \n1.  DFS\u641c\u7d22\u6811\u7684\u6811\u8fb9(u,v)\u4e0a\u7684\u5bb9\u91cf\u5df2\u7ecf\u53d8\u62100\u3002\u5373\u521a\u521a\u627e\u5230\u7684\u589e\u5e7f\u8def\u5f84\u4e0a\u6240\u589e\u52a0\u7684\u6d41\u91cf\uff0c\u7b49\u4e8e(u,v)\u672c\u6b21\u589e\u5e7f\u524d\u7684\u5bb9\u91cf\u3002(DFS\u7684\u8fc7\u7a0b\u4e2d\uff0c\u662f\u4eceu\u8d70\u5230\u66f4\u4e0b\u5c42\u7684v\u7684) \n2. u\u662f\u6ee1\u8db3\u6761\u4ef6 1)\u7684\u6700\u4e0a\u5c42\u7684\u8282\u70b9\u5982\u679c\u56de\u6eaf\u5230\u6e90\u70b9\u800c\u4e14\u65e0\u6cd5\u7ee7\u7eed\u5f80\u4e0b\u8d70\u4e86\uff0cDFS\u7ed3\u675f\u3002 \n**\u56e0\u6b64\uff0c\u4e00\u6b21DFS\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\u591a\u6761\u589e\u5e7f\u8def\u5f84\u3002** \n - DFS\u7ed3\u675f\u540e\uff0c\u5bf9\u6b8b\u4f59\u7f51\u7edc\u518d\u6b21\u8fdb\u884c\u5206\u5c42\uff0c\u7136\u540e\u518d\u8fdb\u884cDFS\u5f53\u6b8b\u4f59\u7f51\u7edc\u7684\u5206\u5c42\u64cd\u4f5c\u65e0\u6cd5\u7b97\u51fa\u6c47\u70b9\u7684\u5c42\u6b21\uff08\u5373BFS\u5230\u8fbe\u4e0d\u4e86\u6c47\u70b9\uff09\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\uff0c\u6700\u5927\u6d41\u6c42\u51fa\u3002 \n\n#####ps\u8981\u6c42\u51fa\u6700\u5927\u6d41\u4e2d\u6bcf\u6761\u8fb9\u7684\u6d41\u91cf\uff0c\u600e\u4e48\u529e\uff1f \n\u5c06\u539f\u56fe\u5907\u4efd\uff0c\u539f\u56fe\u4e0a\u7684\u8fb9\u7684\u5bb9\u91cf\u51cf\u53bb\u505a\u5b8c\u6700\u5927\u6d41\u7684\u6b8b\u4f59\u7f51\u7edc\u4e0a\u7684\u8fb9\u7684\u5269\u4f59\u5bb9\u91cf\uff0c\u5c31\u662f\u8fb9\u7684\u6d41\u91cf\u3002 \n####\u65f6\u95f4\u590d\u6742\u5ea6\n\n\t\u5728\u666e\u901a\u60c5\u51b5\u4e0b\uff0c DINIC\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(V2E) \n\t\u5728\u4e8c\u5206\u56fe\u4e2d\uff0c DINIC\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(\u221aVE)\n\n####\u4f18\u5316\n\u2022 \u591a\u8def\u589e\u5e7f \n\u6bcf\u6b21\u4e0d\u662f\u5bfb\u627e\u4e00\u6761\u589e\u5e7f\u8def\uff0c\u800c\u662f\u5728DFS\u4e2d\uff0c\u53ea\u8981\u53ef\u4ee5\u5c31\u9012\u5f52\u589e\u5e7f\u4e0b\u53bb\uff0c\u5b9e\u9645\u4e0a\u5f62\u6210\u4e86\u4e00\u5f20\u589e\u5e7f\u7f51\u3002 \n\u2022 \u5f53\u524d\u5f27\u4f18\u5316 \n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u90fd\u8bb0\u5f55\u4e0a\u4e00\u6b21\u68c0\u67e5\u5230\u54ea\u4e00\u6761\u8fb9\u3002\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u589e\u5e7f\u4e00\u5b9a\u662f\u5f7b\u5e95\u589e\u5e7f\uff08\u5373\u8fd9\u6761\u5df2\u7ecf\u88ab\u589e\u5e7f\u8fc7\u7684\u8fb9\u5df2\u7ecf\u53d1\u6325\u51fa\u4e86\u5b83\u5168\u90e8\u7684\u6f5c\u529b\uff0c\u4e0d\u53ef\u80fd\u518d\u88ab\u589e\u5e7f\u4e86\uff09\uff0c\u4e0b\u4e00\u6b21\u5c31\u4e0d\u5fc5\u518d\u68c0\u67e5\u5b83\uff0c\u800c\u76f4\u63a5\u770b\u7b2c\u4e00\u4e2a\u672a\u88ab\u68c0\u67e5\u7684\u8fb9\u3002\n\n\u4f18\u5316\u4e4b\u540e\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u6ca1\u6709\u6539\u53d8\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u80fd\u5feb\u4e0d\u5c11\u3002\n\u5b9e\u9645\u5199\u4ee3\u7801\u7684\u65f6\u5019\u8981\u6ce8\u610f\uff0chead\u6570\u7ec4\u521d\u59cb\u503c\u4e3a-1\uff0c\u5b58\u50a8\u65f6\u4ece0\u5f00\u59cb\u5b58\u50a8\uff0c\u8fd9\u6837\u5728\u540e\u9762\u5199\u53cd\u5411\u5f27\u7684\u65f6\u5019\u6bd4\u8f83\u65b9\u4fbf\uff0c\u76f4\u63a5\u5f02\u6216\u5373\u53ef\u3002\n\u5173\u4e8e\u590d\u5236head\u7684\u6570\u7ec4cur\uff1b\u76ee\u7684\u662f\u4e3a\u4e86\u5f53\u524d\u5f27\u4f18\u5316\u3002\u5df2\u7ecf\u589e\u5e7f\u7684\u8fb9\u5c31\u4e0d\u9700\u8981\u518d\u8d70\u4e86.\n\n####\u4ee3\u7801\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int inf=1e9;\n\nint n,m,x,y,z,maxflow,deep[500];//deep\u6df1\u5ea6 \nstruct Edge{\n\tint next,to,dis;\n}edge[500];\nint num_edge=-1,head[500],cur[500];//cur\u7528\u4e8e\u590d\u5236head \nqueue <int> q;\n\nvoid add_edge(int from,int to,int dis,bool flag)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\tif (flag) edge[num_edge].dis=dis;//\u53cd\u56fe\u7684\u8fb9\u6743\u4e3a 0\n\thead[from]=num_edge;\n}\n\n//bfs\u7528\u6765\u5206\u5c42 \nbool bfs(int s,int t)\n{\n\tmemset(deep,0x7f,sizeof(deep));\n\twhile (!q.empty()) q.pop();\n\tfor (int i=1; i<=n; i++) cur[i]=head[i];\n\tdeep[s]=0;\n\tq.push(s);\n\t\n \twhile (!q.empty())\n\t{\n\t\tint now=q.front(); q.pop();\n \t\tfor (int i=head[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tif (deep[edge[i].to]>inf && edge[i].dis)//dis\u5728\u6b64\u5904\u7528\u6765\u505a\u6807\u8bb0 \u662f\u6b63\u56fe\u8fd8\u662f\u8fd4\u56fe \n\t\t\t{\n\t\t\t\tdeep[edge[i].to]=deep[now]+1;\n\t\t\t\tq.push(edge[i].to);\n\t\t\t}\n\t\t}\n\t}\n\tif (deep[t]<inf) return true;\n\telse return false;\n}\n\n//dfs\u627e\u589e\u52a0\u7684\u6d41\u7684\u91cf \nint dfs(int now,int t,int limit)//limit\u4e3a\u6e90\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743 \n{\n\tif (!limit || now==t) return limit;\n\t\n\tint flow=0,f;\n\tfor (int i=cur[now]; i!=-1; i=edge[i].next)\n\t{\n\t\tcur[now]=i;\n\t\tif (deep[edge[i].to]==deep[now]+1 && (f=dfs(edge[i].to,t,min(limit,edge[i].dis))))\n\t\t{\n\t\t\tflow+=f;\n\t\t\tlimit-=f;\n\t\t\tedge[i].dis-=f;\n\t\t\tedge[i^1].dis+=f;\n\t\t\tif (!limit) break;\n\t\t}\n\t}\n\treturn flow;\n}\n\nvoid Dinic(int s,int t)\n{\n\twhile (bfs(s,t))\n\t\tmaxflow+=dfs(s,t,inf);\n}\n\nint main()\n{\n//\tfor (int i=0; i<=500; i++) edge[i].next=-1;\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&m,&n);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd_edge(x,y,z,1); add_edge(y,x,z,0);\n\t}\n\tDinic(1,n);\n \tprintf(\"%d\",maxflow);\n\treturn 0;\n}\n```\n\n###\uff083\uff09 ISAP\u7b97\u6cd5\n####\u539f\u7406\nISAP\uff08Improved Shortest Augmenting Path\uff09(%ISA)\u4e5f\u662f\u57fa\u4e8e\u5206\u5c42\u601d\u60f3\u7684\u6700\u5927\u6d41\u7b97\u6cd5\u3002\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u7701\u53bb\u4e86Dinic\u6bcf\u6b21\u589e\u5e7f\u540e\u9700\u8981\u91cd\u65b0\u6784\u5efa\u5206\u5c42\u56fe\u7684\u9ebb\u70e6\uff0c\u800c\u662f\u5728\u6bcf\u6b21\u589e\u5e7f\u5b8c\u6210\u540e\u81ea\u52a8\u66f4\u65b0\u6bcf\u4e2a\u70b9\u7684\u300e\u6807\u53f7\u300f\uff08\u4e5f\u5c31\u662f\u6240\u5728\u7684\u5c42\uff09\n\n\u6700\u77ed\u589e\u5e7f\u8def\u7b97\u6cd5\u662f\u4e00\u79cd\u8fd0\u7528\u8ddd\u79bb\u6807\u53f7\u4f7f\u5bfb\u627e\u589e\u5e7f\u8def\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u964d\u7684\u7b97\u6cd5\u3002\u6240\u8c13\u7684\u8ddd\u79bb\u6807\u53f7\u5c31\u662f\u67d0\u4e2a\u70b9\u5230\u6c47\u70b9\u7684\u6700\u5c11\u7684\u5f27\u7684\u6570\u91cf(\u5373\u5f53\u8fb9\u6743\u4e3a1\u65f6\u67d0\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6). \u8bbe\u70b9i\u7684\u6807\u53f7\u4e3ad[i], \u90a3\u4e48\u5982\u679c\u5c06\u6ee1\u8db3d[i] = d[j] + 1, \u4e14\u589e\u5e7f\u65f6\u53ea\u8d70\u5141\u8bb8\u5f27, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fbe\u5230\u201d\u600e\u4e48\u8d70\u90fd\u662f\u6700\u77ed\u8def\u201d\u7684\u6548\u679c. \u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u6807\u53f7\u53ef\u4ee5\u5728\u4e00\u5f00\u59cb\u7528\u4e00\u6b21\u4ece\u6c47\u70b9\u6cbf\u6240\u6709\u53cd\u5411\u7684BFS\u6c42\u51fa.\n\n####\u7b97\u6cd5\u6d41\u7a0b\n\n1. \u5b9a\u4e49\u8282\u70b9\u7684\u6807\u53f7\u4e3a\u5230\u6c47\u70b9\u7684\u6700\u77ed\u8ddd\u79bb;\n2. \u6bcf\u6b21\u6cbf\u53ef\u884c\u8fb9\u8fdb\u884c\u589e\u5e7f, \u53ef\u884c\u8fb9\u5373: \u5047\u8bbe\u6709\u4e24\u4e2a\u70b9 i, j \u82e5 d[i] = 3, d[j] = 4, \u5219d[j] = d[i] + 1, \u4e5f\u5c31\u662f\u4ece j \u5230 i \u6709\u4e00\u6761\u8fb9.\n3.  \u627e\u5230\u589e\u5e7f\u8def\u540e\uff0c\u5c06\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u6d41\u91cf\u66f4\u65b0.\n4. \u904d\u5386\u5b8c\u5f53\u524d\u7ed3\u70b9\u7684\u53ef\u884c\u8fb9\u540e\u66f4\u65b0\u5f53\u524d\u7ed3\u70b9\u7684\u6807\u53f7\u4e3a d[now] = min( d[next] , add_flow(now,next) > 0)+1\uff0c\u4f7f\u4e0b\u6b21\u518d\u641c\u7684\u65f6\u5019\u6709\u8def\u53ef\u8d70\u3002\n5. \u56fe\u4e2d\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u540e\u5373\u9000\u51fa\u7a0b\u5e8f\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6d41\u91cf\u503c\u5c31\u662f\u6700\u5927\u6d41\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f, \u6807\u53f7\u7684\u66f4\u65b0\u8fc7\u7a0b\u9996\u5148\u6211\u4eec\u8981\u7406\u89e3\u66f4\u65b0\u6807\u53f7\u7684\u76ee\u7684\u3002\u6807\u53f7\u5982\u679c\u9700\u8981\u66f4\u65b0\uff0c\u8bf4\u660e\u5728\u5f53\u524d\u7684\u6807\u53f7\u4e0b\u5df2\u7ecf\u6ca1\u6709\u589e\u5e7f\u8def\u53ef\u4ee5\u7ee7\u7eed\u8d70\uff0c\u8fd9\u65f6\u66f4\u65b0\u6807\u53f7\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u6709\u7ee7\u7eed\u5411\u4e0b\u8d70\u7684\u53ef\u80fd\uff0c\u5e76\u4e14\u6bcf\u6b21\u627e\u7684\u90fd\u662f\u80fd\u8d70\u5230\u7684\u70b9\u4e2d\u6807\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\uff0c\u8fd9\u6837\u4e5f\u4f7f\u5f97\u6bcf\u6b21\u641c\u7d22\u957f\u5ea6\u6700\u5c0f.\n\n####GAP \u4f18\u5316\n\u7531\u4e8e\u53ef\u884c\u8fb9\u5b9a\u4e49\u4e3a\uff1a(now,next) | h[now] = h[next]+1\uff0c\u6240\u4ee5\u82e5\u6807\u53f7\u51fa\u73b0\u201c\u65ad\u5c42\u201d\u5373\u6709\u7684\u6807\u53f7\u5bf9\u5e94\u7684\u9876\u70b9\u4e2a\u6570\u4e3a0\uff0c\u5219\u8bf4\u660e\u5269\u4f59\u56fe\u4e2d\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\uff0c\u6b64\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\uff0c\u964d\u4f4e\u4e86\u65e0\u6548\u641c\u7d22\u3002\u4e3e\u4e2a\u6817\u5b50\uff1a\u82e5\u7ed3\u70b9\u6807\u53f7\u4e3a3\u7684\u7ed3\u70b9\u4e2a\u6570\u4e3a0\uff0c\u800c\u6807\u53f7\u4e3a4\u7684\u7ed3\u70b9\u548c\u6807\u53f7\u4e3a2\u7684\u7ed3\u70b9\u90fd\u5927\u4e8e 0,\u90a3\u4e48\u5728\u641c\u7d22\u81f3\u4efb\u610f\u4e00\u4e2a\u6807\u53f7\u4e3a4\u7684\u7ed3\u70b9\u65f6\uff0c\u4fbf\u65e0\u6cd5\u518d\u7ee7\u7eed\u5f80\u4e0b\u641c\u7d22\uff0c\u8bf4\u660e\u56fe\u4e2d\u5c31\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4ee5\u5c06 h[1]=n   \u5f62\u5f0f\u6765\u53d8\u76f8\u5730\u76f4\u63a5\u7ed3\u675f\u641c\u7d22\n####\u65f6\u95f4\u590d\u6742\u5ea6\n\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u548cdinic\u76f8\u540c\uff0c\u4f46\u662f\u975e\u4e8c\u5206\u56fe\u7684\u60c5\u51b5\u4e0bisap\u66f4\u5177\u4f18\u52bf\u3002\n\n####\u4ee3\u7801\n\n\u5f53\u4ee3\u7801\u4e0d\u80fd\u7406\u89e3\u65f6\uff0c\u5c31\u5f00\u542fDeBug\u81ea\u5df1\u624b\u63a8\u4e00\u904d\uff0c\u6709\u5229\u4e8e\u7406\u89e3\u7684\u66f4\u6df1\u523b\uff0c\u4e5f\u6709\u5229\u4e8e\u8bb0\u5fc6\u6a21\u677f\uff08\u53e3\u80e1\n\n```\n//codevs\u4e0a\u8fd8\u662fWA\u4e00\u4e2a\u70b9 \n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int inf=1e9;\n\nqueue <int> q;\nint m,n,x,y,z,maxflow,head[5000],num_edge=-1;\nint cur[5000],deep[5000],last[5000],num[5000];\n//cur\u5f53\u524d\u5f27\u4f18\u5316\uff1b last\u8be5\u70b9\u7684\u4e0a\u4e00\u6761\u8fb9\uff1b num\u6876 \u7528\u6765GAP\u4f18\u5316 \nstruct Edge{\n\tint next,to,dis;\n}edge[500];\n\nvoid add_edge(int from,int to,int dis,bool flag)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\tedge[num_edge].dis=dis;\n\thead[from]=num_edge;\n}\n\n//bfs\u4ec5\u7528\u4e8e\u66f4\u65b0deep \nvoid bfs(int t)\n{\n\twhile (!q.empty()) q.pop();\n\tfor (int i=0; i<=m; i++) cur[i]=head[i];\n\tfor (int i=1; i<=n; i++) deep[i]=n;\n\tdeep[t]=0;\n\tq.push(t);\n\t\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front(); q.pop();\n\t\tfor (int i=head[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tif (deep[edge[i].to]==n && edge[i^1].dis)//i^1\u662f\u4e3a\u4e86\u627e\u53cd\u8fb9 \n\t\t\t{\n\t\t\t\tdeep[edge[i].to]=deep[now]+1;\n\t\t\t\tq.push(edge[i].to);\n\t\t\t}\n\t\t}\n\t}\n}\n\nint add_flow(int s,int t)\n{\n\tint ans=inf,now=t;\n\twhile (now!=s)\n\t{\n\t\tans=min(ans,edge[last[now]].dis);\n\t\tnow=edge[last[now]^1].to;\n\t}\n\tnow=t;\n\twhile (now!=s)\n\t{\n\t\tedge[last[now]].dis-=ans;\n\t\tedge[last[now]^1].dis+=ans;\n\t\tnow=edge[last[now]^1].to;\n\t}\n\treturn ans;\n}\n\nvoid isap(int s,int t)\n{\n\tint now=s;\n\tbfs(t);//\u641c\u51fa\u4e00\u6761\u589e\u5e7f\u8def\n\tfor (int i=1; i<=n; i++) num[deep[i]]++;\n\t\n\twhile (deep[s]<n)\n\t{\n\t\tif (now==t)\n\t\t{//\u5982\u679c\u5230\u8fbe\u6c47\u70b9\u5c31\u76f4\u63a5\u589e\u5e7f\uff0c\u91cd\u65b0\u56de\u5230\u6e90\u70b9\u8fdb\u884c\u4e0b\u4e00\u8f6e\u589e\u5e7f \n\t\t\tmaxflow+=add_flow(s,t);\n\t\t\tnow=s;//\u56de\u5230\u6e90\u70b9 \n\t\t}\n\t\t\n\t\tbool has_find=0;\n\t\tfor (int i=cur[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tif (deep[now]==deep[edge[i].to]+1 && edge[i].dis)//\u627e\u5230\u4e00\u6761\u589e\u5e7f\u8def \n\t\t\t{\n\t\t\t\thas_find=true;\n\t\t\t\tcur[now]=i;//\u5f53\u524d\u5f27\u4f18\u5316\n\t\t\t\tnow=edge[i].to;\n\t\t\t\tlast[edge[i].to]=i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!has_find)//\u6ca1\u6709\u627e\u5230\u51fa\u8fb9\uff0c\u91cd\u65b0\u7f16\u53f7 \n\t\t{\n\t\t\tint minn=n-1;\n\t\t\tfor (int i=head[now]; i!=-1; i=edge[i].next)//\u56de\u5934\u627e\u8def\u5f84 \n\t\t\t\tif (edge[i].dis)\n\t\t\t\t\tminn=min(minn,deep[edge[i].to]);\n\t\t\tif ((--num[deep[now]])==0) break;//GAP\u4f18\u5316 \u51fa\u73b0\u4e86\u65ad\u5c42 \n\t\t\tnum[deep[now]=minn+1]++;\n\t\t\tcur[now]=head[now];\n\t\t\tif (now!=s)\n\t\t\t\tnow=edge[last[now]^1].to;\n\t\t}\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d\",&m,&n);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd_edge(x,y,z,1); add_edge(y,x,z,0); \n\t}\n\tisap(1,n);\n\tprintf(\"%d\",maxflow);\n\treturn 0;\n\t\n}\n```\n\n\u5bf9\u4e8eEK\u7b97\u6cd5\u4e0eISAP\u7b97\u6cd5\u7684\u533a\u522b\uff1a\n     EK\u7b97\u6cd5\u6bcf\u6b21\u90fd\u8981\u91cd\u65b0\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u5bfb\u627e\u8fc7\u7a0b\u53ea\u53d7\u6b8b\u4f59\u7f51\u7edc\u7684\u5f71\u54cd\uff0c\u5982\u679c\u6539\u53d8\u6b8b\u4f59\u7f51\u7edc\uff0c\u5219\u589e\u5e7f\u8def\u7684\u5bfb\u627e\u4e5f\u4f1a\u968f\u4e4b\u6539\u53d8\uff1bSAP\u7b97\u6cd5\u9884\u5904\u7406\u51fa\u4e86\u589e\u5e7f\u8def\u7684\u5bfb\u627e\u5927\u81f4\u8def\u5f84\uff0c\u82e5\u4e2d\u9014\u6539\u53d8\u6b8b\u4f59\u7f51\u7edc\uff0c\u5219\u6b64\u7b97\u6cd5\u5c06\u91cd\u65b0\u8fdb\u884c\u3002EK\u5904\u7406\u5728\u8fd0\u7b97\u8fc7\u7a0b\u4e2d\u9700\u8981\u4e0d\u65ad\u52a0\u8fb9\u7684\u6700\u5927\u6d41\u6bd4SAP\u66f4\u6709\u4f18\u52bf\u3002\n\n##\u4e8c\u3001\u8d39\u7528\u6d41\u7b97\u6cd5\n\u73b0\u5728\u6211\u4eec\u60f3\u8c61\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u6d41\u91cf\u7f51\u7edc\uff0c\u73b0\u5728\u6bcf\u4e2a\u8fb9\u9664\u4e86\u6d41\u91cf\uff0c\u73b0\u5728\u8fd8\u6709\u4e00\u4e2a\u5355\u4f4d\u8d39\u7528\uff0c\u8fd9\u6761\u8fb9\u7684**\u8d39\u7528**\u76f8\u5f53\u4e8e**\u5b83\u7684\u5355\u4f4d\u8d39\u7528\u4e58\u4e0a\u5b83\u7684\u6d41\u91cf**\uff0c\u6211\u4eec\u8981\u4fdd\u6301\u6700\u5927\u6d41\u7684\u540c\u65f6\uff0c\u8fd8\u8981\u4fdd\u6301\u8fb9\u6743\u6700\u5c0f\uff0c\u8fd9\u5c31\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u95ee\u9898\u3002\n\u56e0\u4e3a\u5728\u4e00\u4e2a\u7f51\u7edc\u6d41\u56fe\u4e2d\uff0c\u6700\u5927\u6d41\u91cf\u53ea\u6709\u4e00\u4e2a\uff0c\u4f46\u662f\u201c\u6d41\u6cd5\u201d\u6709\u5f88\u591a\u79cd\uff0c\u6bcf\u79cd\u4e0d\u540c\u7684\u6d41\u6cd5\u6240\u7ecf\u8fc7\u7684\u8fb9\u4e0d\u540c\u56e0\u6b64\u8d39\u7528\u4e5f\u5c31\u4e0d\u540c\uff0c\u6240\u4ee5\u9700\u8981\u7528\u5230\u6700\u77ed\u8def\u7b97\u6cd5\u3002\n\u603b\u589e\u5e7f\u7684\u8d39\u7528\u5c31\u662f**\u6700\u77ed\u8def*\u603b\u6d41\u91cf**\n###\uff081\uff09SFPA\n\u5c31\u662f\u628aDinic\u4e2d\u7684bfs\u6539\u6210spfa,\u518d\u6c42\u6700\u5927\u6d41\u7684\u8fc7\u7a0b\u4e2d\u6700\u5c0f\u8d39\u7528\u6d41\u4e5f\u5c31\u6c42\u51fa\u6765\u4e86\u3002\n\u6709\u8bb8\u591a\u521d\u59cb\u5316\u7684\u5730\u65b9\u5bb9\u6613\u6f0f\u6613\u9519\uff1b\nflow\u548cdis\u5bb9\u6613\u6df7\u6613\u9519\uff1b\n[\u6a21\u677f\u9898 luoguP3381](https://www.luogu.org/problemnew/show/P3381)\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn=100010;\n\nbool vis[maxn];\nint n,m,s,t,x,y,z,f,dis[maxn],pre[maxn],last[maxn],flow[maxn],maxflow,mincost;\n//dis\u6700\u5c0f\u82b1\u8d39;pre\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\uff1blast\u6bcf\u4e2a\u70b9\u7684\u6240\u8fde\u7684\u524d\u4e00\u6761\u8fb9\uff1bflow\u6e90\u70b9\u5230\u6b64\u5904\u7684\u6d41\u91cf \nstruct Edge{\n\tint to,next,flow,dis;//flow\u6d41\u91cf dis\u82b1\u8d39 \n}edge[maxn];\nint head[maxn],num_edge; \nqueue <int> q;\n\nvoid add_edge(int from,int to,int flow,int dis)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\tedge[num_edge].flow=flow;\n\tedge[num_edge].dis=dis;\n\thead[from]=num_edge;\n}\n\nbool spfa(int s,int t)\n{\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(flow,0x7f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(s); vis[s]=1; dis[s]=0; pre[t]=-1;\n\t\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tvis[now]=0;\n\t\tfor (int i=head[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tif (edge[i].flow>0 && dis[edge[i].to]>dis[now]+edge[i].dis)//\u6b63\u8fb9 \n\t\t\t{\n\t\t\t\tdis[edge[i].to]=dis[now]+edge[i].dis;\n\t\t\t\tpre[edge[i].to]=now;\n\t\t\t\tlast[edge[i].to]=i;\n\t\t\t\tflow[edge[i].to]=min(flow[now],edge[i].flow);//\n\t\t\t\tif (!vis[edge[i].to])\n\t\t\t\t{\n\t\t\t\t\tvis[edge[i].to]=1;\n\t\t\t\t\tq.push(edge[i].to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn pre[t]!=-1;\n}\n\nvoid MCMF()\n{\n\twhile (spfa(s,t))\n\t{\n\t\tint now=t;\n\t\tmaxflow+=flow[t];\n\t\tmincost+=flow[t]*dis[t];\n\t\twhile (now!=s)\n\t\t{//\u4ece\u6e90\u70b9\u4e00\u76f4\u56de\u6eaf\u5230\u6c47\u70b9 \n\t\t\tedge[last[now]].flow-=flow[t];//flow\u548cdis\u5bb9\u6613\u641e\u6df7 \n\t\t\tedge[last[now]^1].flow+=flow[t];\n\t\t\tnow=pre[now];\n\t\t}\n\t}\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head)); num_edge=-1;//\u521d\u59cb\u5316 \n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&x,&y,&z,&f);\n\t\tadd_edge(x,y,z,f); add_edge(y,x,0,-f);\n\t\t//\u53cd\u8fb9\u7684\u6d41\u91cf\u4e3a0\uff0c\u82b1\u8d39\u662f\u76f8\u53cd\u6570 \n\t}\n\tMCMF();\n\tprintf(\"%d %d\",maxflow,mincost);\n\treturn 0;\n}\n```\n\n###\uff082\uff09Dijstra\n\n\n",
        "postTime": 1519477515,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u4e0d\u70b9\u4e2a\u8d5e\u5462\uff08\u96fe\uff09\n\n\u5982\u679c\u60a8\u8fde\u7f51\u7edc\u6700\u5927\u6d41\u90fd\u4e0d\u4f1a\u5199\u90a3\u4e48\u8bf7\u51fa\u95e8\u5de6\u8f6cP3376\n\n-----\n\n\u8d39\u7528\u6d41\u677f\u5b50\u9898\uff0c\u6ca1\u4ec0\u4e48\u9898\u610f\u89e3\u91ca\n\n## \u4f55\u4e3a\u8d39\u7528\u6d41\uff1f\n\n\u8d39\u7528\u6d41\u5c31\u662f\u7f51\u7edc\u6d41\u7684\u4e00\u79cd\n\n\u90a3\u7f51\u7edc\u6d41\u53c8\u662f\u5565\uff1f\n\n~~\u4e0d\u77e5\u9053~~\n\n`\u7f51\u7edc\u6d41(network-flows)\u662f\u4e00\u79cd\u7c7b\u6bd4\u6c34\u6d41\u7684\u89e3\u51b3\u95ee\u9898\u65b9\u6cd5\uff0c\u4e0e\u7ebf\u6027\u89c4\u5212\u5bc6\u5207\u76f8\u5173\u3002\u7f51\u7edc\u6d41\u7684\u7406\u8bba\u548c\u5e94\u7528\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u51fa\u73b0\u4e86\u5177\u6709\u589e\u76ca\u7684\u6d41\u3001\u591a\u7ec8\u7aef\u6d41\u3001\u591a\u5546\u54c1\u6d41\u4ee5\u53ca\u7f51\u7edc\u6d41\u7684\u5206\u89e3\u4e0e\u5408\u6210\u7b49\u65b0\u8bfe\u9898\u3002\u7f51\u7edc\u6d41\u7684\u5e94\u7528\u5df2\u904d\u53ca\u901a\u8baf\u3001\u8fd0\u8f93\u3001\u7535\u529b\u3001\u5de5\u7a0b\u89c4\u5212\u3001\u4efb\u52a1\u5206\u6d3e\u3001\u8bbe\u5907\u66f4\u65b0\u4ee5\u53ca\u8ba1\u7b97\u673a\u8f85\u52a9\u8bbe\u8ba1\u7b49\u4f17\u591a\u9886\u57df\u3002`\n\n\u4ec0\u4e48\u9b3c\u4e1c\u897f\uff0c\u767e\u5ea6\u767e\u79d1\u4e0d\u53ef\u4fe1\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u7f51\u7edc\u6d41\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u4f9b\u6c34\u7cfb\u7edf\uff08\u96fe\uff09\uff0c\u6709\u4e2a\u81ea\u6765\u6c34\u516c\u53f8\uff0c\u4ee5\u53ca\u82e5\u5e72\u6c34\u7ba1\u3001\u50a8\u6c34\u5854\uff0c\u8fd8\u6709\u4f60\u5bb6\n\n\u4f60\u6bcf\u5929\u90fd\u8981\u7528\u6c34\uff0c\u6c34\u5c31\u5f97\u4ece\u81ea\u6765\u6c34\u5382\u6d41\u8fc7\u6765\uff0c\u4f46\u662f\u6c34\u7ba1\u76f4\u5f84\u6709\u9650\uff0c\u80fd\u6d41\u8fc7\u6c34\u7684\u591a\u5c11\u662f\u4e00\u5b9a\u7684 ~~\uff08\u5982\u679c\u6709\u8c01\u89c9\u5f97\u53ea\u8981\u65f6\u95f4\u591f\u5c31\u53ef\u4ee5\u6d41\u5f88\u591a\u90a3\u6211\u5c31\u62ff\u7740\u5200\u5b50\u51b2\u4e0a\u53bb\u4e86\uff09~~\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u63a5\u6536\u5230\u7684\u6c34\u91cf\u5c31\u79f0\u4e3a\u7f51\u7edc\u6700\u5927\u6d41\n\n\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u5927\u81f4\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w6bvwjn4.png)\n\n\u8fd9\u5c31\u5f88\u597d\u7406\u89e3\u4e86\n\n\u4f46\u662f\uff0c\u5f53\u4f60\u6ee1\u6000\u96c4\u5fc3\u58ee\u5fd7\u60f3\u8981AC [P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41](https://www.luogu.com.cn/problem/P3376)\u7684\u65f6\u5019\uff0c\u5374\u53d1\u73b0\u81ea\u6765\u6c34\u5382\u8981\u6536\u8d39\u4e86\n\n\uff08\u81ea\u6765\u6c34\u5382\uff1a\u6211\u4eec\u6bcf\u5929\u8f9b\u8f9b\u82e6\u82e6\u7ed9\u9ad8\u901f\u884c\u9a76\u7684\u6c34\u7ba1\u6362\u6c34\uff0c\u4ed8\u70b9\u6c34\u8d39\u4e0d\u662f\u5f88\u6b63\u5e38\u5417\uff1f\uff09\n\n\u4e8e\u662f\u4ed6\u5c31\u8981\u6536\u8d39\u4e86\uff0c\u6bcf\u6d41\u8fc7\u53bb\u4e00\u5355\u4f4d\u7684\u6c34\uff0c\u5c31\u8981\u6536\u8d39$f_i$\u5143\n\n\u8fd9\u5c31\u4ece\u6700\u5927\u6d41\u53d8\u6210\u4e86\u8d39\u7528\u6d41\n\n## \u8d39\u7528\u6d41\u600e\u4e48\u505a\uff1f\n\n\u8d39\u7528\u6d41\u5168\u540d\u53eb\u505a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n\n\u6240\u4ee5\u5982\u679c\u518d\u7528BFS\u53bb\u627e\u589e\u5e7f\u8def\u2026\u2026\n\n23333\n\n\u6211\u4eec\u6362\u4e2a\u89d2\u5ea6\u53bb\u60f3\n\nBFS\u4e0d\u884c\u4e0d\u5c31\u662f\u56e0\u4e3a\u5b83\u53ea\u80fd\u627e\u589e\u5e7f\u8def\u800c\u4e0d\u662f\u82b1\u8d39\u6700\u5c0f\u7684\u589e\u5e7f\u8def\u5417\uff1f\n\n\u90a3\u4e48\u82b1\u8d39\u6700\u5c0f\u7684\u589e\u5e7f\u8def\u600e\u4e48\u627e\u5462\uff1f\n\n\u6211\u4eec\u53ea\u9700\u8981\u5728BFS\u4e0a\u52a8\u70b9\u624b\u811a\u2026\u2026\n\n\u5c31\u53ef\u4ee5\u628a\u5b83\u6539\u9020\u6210\u2026\u2026\n\n![](https://cdn.luogu.com.cn/upload/pic/26431.png)\n\n\u5bf9\uff0c\u4f60\u6ca1\u770b\u9519\uff0c\u5c31\u662fSPFA\n\n~~\u56e0\u4e3aNOI2019\u6ca1\u6709\u5361SPFA\u6240\u4ee5\u4ed6\u53c8\u590d\u6d3b\u4e86~~\n\nWhy SPFA?\n\n\u4f17\u6240\u5468\u77e5\uff0c\u5355\u6e90\u6700\u77ed\u8def\u662f\u5728\u4fdd\u8bc1\u56fe\u8054\u901a\u7684\u60c5\u51b5\u4e0b\u6c42\u51fa\u7684\n\n\u90a3\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\n\n\u56fe\u8054\u901a\u5c31\u610f\u5473\u7740\u6709\u589e\u5e7f\u8def\n\nDijkstra\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u9009\u6211\uff1f\uff1f\uff1f\n\n\u4f17\u6240\u5468\u77e5\uff0cdij\u4e0d\u80fd\u5904\u7406\u8d1f\u8fb9\u6743\u2026\u2026\n\n\u7136\u800c\u8fd9\u9898\u6bd2\u7624\u6570\u636e\u91cc\u4f3c\u4e4e\u6709\u8d1f\u7684\u2026\u2026\n\n\u867d\u7136\u5904\u7406\u4e00\u4e0b\u53ef\u4ee5AC\uff0c\u4f46SPFA\u5b83\u4e0d\u9999\u5417\uff1f\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <queue>\n#include <cstring>\nusing namespace std;\nconst int MAXN = 5001;\nconst int MAXM = 50001;\nint n, m, s, t, edge_sum = 1;\nint maxflow, mincost;\nint dis[MAXN], head[MAXN], incf[MAXN], pre[MAXN];//dis\u8868\u793a\u6700\u77ed\u8def\uff0cincf\u8868\u793a\u5f53\u524d\u589e\u5e7f\u8def\u4e0a\u6700\u5c0f\u6d41\u91cf\uff0cpre\u8868\u793a\u524d\u9a71\nbool vis[MAXN];\nstruct Edge {\n\tint next, to, dis, flow;\n}edge[MAXM << 1];\ninline void addedge(int from, int to, int flow, int dis) {\n\tedge[++edge_sum].next = head[from];\n\tedge[edge_sum].to = to;\n\tedge[edge_sum].dis = dis;\n\tedge[edge_sum].flow = flow;\n\thead[from] = edge_sum;\n}\ninline bool spfa() {//\u5173\u4e8eSPFA\uff0c\u4ed6\u8bc8\u5c38\u4e86\n\tqueue <int> q;\n\tmemset(dis, 0x3f, sizeof(dis));\n\tmemset(vis, 0, sizeof(vis));\n\tq.push(s);\n\tdis[s] = 0;\n\tvis[s] = 1;\n\tincf[s] = 1 << 30;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tvis[u] = 0;\n\t\tq.pop();\n\t\tfor(register int i = head[u]; i; i = edge[i].next) {\n\t\t\tif(!edge[i].flow) continue;//\u6ca1\u6709\u5269\u4f59\u6d41\u91cf\n\t\t\tint v = edge[i].to;\n\t\t\tif(dis[v] > dis[u] + edge[i].dis) {\n\t\t\t\tdis[v] = dis[u] + edge[i].dis;\n\t\t\t\tincf[v] = min(incf[u], edge[i].flow);//\u66f4\u65b0incf\n\t\t\t\tpre[v] = i;\n\t\t\t\tif(!vis[v]) vis[v] = 1, q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\tif(dis[t] == 1061109567) return 0;\n\treturn 1;\n}\ninline void MCMF() {\n\twhile(spfa()) {//\u5982\u679c\u6709\u589e\u5e7f\u8def\n\t\tint x = t;\n\t\tmaxflow += incf[t];\n\t\tmincost += dis[t] * incf[t];\n\t\tint i;\n\t\twhile(x != s) {//\u904d\u5386\u8fd9\u6761\u589e\u5e7f\u8def\uff0c\u6b63\u5411\u8fb9\u51cf\u6d41\u53cd\u5411\u8fb9\u52a0\u6d41\n\t\t\ti = pre[x];\n\t\t\tedge[i].flow -= incf[t];\n\t\t\tedge[i^1].flow += incf[t];\n\t\t\tx = edge[i^1].to;\n\t\t}\n\t}\n}\nsigned main() {\n\tscanf(\"%d%d%d%d\", &n,&m,&s,&t);\n\tfor(register int u,v,w,x,i = 1; i <= m; ++i) {\n\t\tscanf(\"%d%d%d%d\",&u,&v,&w,&x);\n\t\taddedge(u,v,w,x);\n\t\taddedge(v,u,0,-x);//\u53cd\u5411\u8fb9\u8d39\u7528\u4e3a-f[i]\n\t}\n\tMCMF();//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\n\tprintf(\"%d %d\\n\",maxflow,mincost);\n\treturn 0;\n}\n```\n\nAccpeted!",
        "postTime": 1575902315,
        "uid": 149815,
        "name": "Isprime",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "upd:\n\n\u611f\u8c22 @kfhkx\n\n-----------------\n\n\n![](https://s2.ax1x.com/2019/04/27/EK4Lj0.png)\n\n> ## \u524d\u8a00\uff1a\u4f17\u6240\u5468\u77e5:**spfa\u4ed6\u6b7b\u4e86**\n~~\u6ed1\u7a3d~~\n\n--------------------------------------------------\n\ndijkstra\u540c\u6837\u4e3a\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u8dd1\u8d39\u7528\u6d41qwq\n\n\u597d\u50cf\u662f\u56e0\u4e3a\u6709\u8d1f\u6743\u8fb9\u7684\u7f18\u6545\n\n\u4f46\u662f\u5982\u679c\u6211\u4eec\u5982\u679c\u4f7f\u7528\u67d0\u79cd\u7384\u5b66\u7684\u5c06\u8fb9\u6743\u90fd\u62c9\u56de\u5230\u6b63\u6570\u7684\u8bdd\n\n\u5c31\u53ef\u4ee5\u8dd1\u4e86dijkstra\uff0c\u5f00\u5fc3qwq\n\n----------------------------------------------------\n\n\u5982\u679c\u6211\u4eec\u6bcf\u6761\u8fb9\u66b4\u529b\u52a0\u4e0a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u5f55\u6240\u7ecf\u8fc7\u7684\u8fb9\u6570\uff0c\u8fd8\u8981\u4fdd\u8bc1\u4e0d\u6ea2\u51fa\uff0c\u5341\u5206\u7684\u6bd2\u7624\n\n> ~~\u5c3b~~\u8003\u8651\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u52bf\uff08ps\uff1a\u4e0d\u662f\u4ec0\u4e48\u7269\u7406\u5b66\u7b97\u6cd5![](https://s1.ax2x.com/2018/08/05/550OVH.png)\uff0c\u5c31\u662f\u4e3a\u4e86\u7ed9\u4ed6\u8d77\u4e2a\u540d\u5b57\uff09\n\n\u7136\u540e\u5c06\u6211\u4eec\u7684\u6700\u77ed\u8def\u8f6c\u79fb$dis_v=dis_u+w$\u6539\u4e3a$dis_v=dis_u+w+h_u-h_v$($h_i$\u662f\u52bf)\uff0c\u4fdd\u8bc1$w+h_u-h_v>=0$\n\n\u7136\u540e\u6211\u4eec\u89c2\u5bdf\u4ed6\u5bf9\u6700\u77ed\u8def\u6709\u4ec0\u4e48\u5f71\u54cd\n\n\u6bd4\u5982\u8bf4\u6211\u4eec\u73b0\u5728\u6709\u4e00\u6761$p_1-p_2-p_3.....p_n$\u7684\u8fd9\u4e48\u4e00\u6761\u8def\u5f84\n\n\u5176\u8def\u5f84\u957f\u5ea6\u5219\u4e3a$(w_1+w_2+w_3...+w_{n-1})+(h_1-h_2)+(h_2-h_3)+(h_3-h_4)+......(h_{n-1}-h_n)$\n\n\u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u73a9\u610f$\\to ~ (h_1-h_2)+(h_2-h_3)+(h_3-h_4)+......(h_{n-1}-h_n)=h_1-h_n$\u3002\u5982\u6b64\u8fd9\u6837\uff0c\u6211\u4eec\u5728\u7b97\u51fa\u52a0\u52bf\u4ee5\u540e\u7684\uff08\u65e0\u8bba\u8def\u7ebf\u662f\u4ec0\u4e48\u6837\u7684\uff09\u6700\u77ed\u8def\u540e\uff0c\u5728\u51cf\u53bb$h_{begin}-h_{end}$\u5c31\u53ef\u4ee5\u4e86\n\n---------------------------------------------------------\n\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff0c\u5982\u4f55\u786e\u5b9a\u4e00\u4e2a$h_i$.\n\n\u6211\u4eec\u5148\u8003\u8651\u53d8\u5f62\u4e00\u4e0b$w+h_u-h_v>=0~~\\to~~h_u+w>=h_v$\n\n$wow$\uff0c\u597d\u50cf\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u5440\uff08\u5728\u6700\u77ed\u8def\u4e2d\u5bf9\u4e8e\u4e00\u6761\u4ece$u$\u5230$v$\u7684\u6709\u5411\u8fb9\uff0c\u603b\u6709$dis_u+w>=dix_v$\uff09\u3002\n\n\u662f\u4e0d\u662f\u53ef\u4ee5\u8003\u8651\u5c06\u4e0a\u4e00\u6b21\u7684$dis$\u5f53\u505a$h_i$(\u6bcf\u6b21$h_i+=dis_i$)\u5462\uff1f\n\n\u662f\u53ef\u4ee5\u7684\uff0c\u4e3a\u4ec0\u4e48\uff1f\n>\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u6761$u\\to v$\u7684\u6709\u5411\u8fb9\n- \u5047\u8bbe\u4ed6\u662f\u4e00\u6761\u6743\u503c\u662f\u6b63\u7684\uff08\u4e0d\u52a0\u52bf\uff09,\u90a3\u4e48\u80af\u5b9a\u6ee1\u8db3$dis_u+w>=dis_v$\u4e0d\u662f\u7684\u8bdd\u5c31\u662f\u6700\u77ed\u8def\u6c42\u9519\u4e86\u3002$\\therefore w+h_u-h_v>=0$\n- \u5982\u679c\u662f\u4e00\u6761\u6743\u503c\u662f\u8d1f\u7684\u8bdd\uff0c\u6211\u4eec\u7684$h_i$\u662f\u7d2f\u52a0\u7684$dis_i$\u7684\u3002\u7136\u540e\u5fc5\u5b9a\u5b58\u5728\u67d0\u4e00\u6b21\u589e\u5e7f\uff0c\u4f7f\u7684$v \\to u$\u7684\u8fb9\u53d8\u5230\u4e86$u \\to v$\n\u7136\u540e\u8fd9\u6b21\u589e\u5e7f\uff08\u5c31\u662f\u5c06$v \\to u$\u7684\u8fb9\u53cd\u5411\u7684\u589e\u5e7f\uff09\uff0c\u80af\u5b9a\u6ee1\u8db3$dis_v+w==dis_u(w>=0)~~~\\to~~dis_v=dis_u-w$\n\u7136\u540e\u8fd9\u65f6\u7684$dis_u,dis_v$\u5df2\u7ecf\u88ab\u6211\u4eec\u7d2f\u52a0\u5230\u4e86$h_u,h_v$\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u7ee7\u7eed\u53d8\u5f62$dis_u-w-dis_v==0 ~~~\\to~~ h_u-h_v-w>=0$\n\u7136\u540e$-w$\u662f$u\\to v$\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u3002\u6240\u4ee5\u8fd9\u6b21\u5e76\u4e0d\u4f1a\u6210\u4e3a\u8d1f\u6570\n\n## $\\mathcal{So}$\n\u6211\u4eec\u8fd9\u6837\u7684\u8bdd\u5c31\u80fd\u8dd1dijkstra\u4e86\u3002\u5f00\u5fc3$qwq$\n\n\u800c\u4e14\u66f4\u5feb\uff0c\u66f4\u7a33\u5b9a\uff0c~~\u4e5f\u4e0d\u5bb9\u6613\u731d\u6b7b~~\n\n\n--------------------\n\u2193\u53ca\u5176\u4e11\u964b\u7684\u6838\u5fc3\u4ee3\u7801\n```cpp\n\nbool dijkstra(int begin,int end)\n{\n\tlen=0;//\u4f7f\u7528\u7684\u662f\u624b\u5199\u5806\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u8981\u6bcf\u6b21\u6e05\u96f6\u3002\u53ef\u4ee5\u5ffd\u7565\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tdis[i]=0x7fffffff;\n\t\tflow[i]=0x7fffffff;\n\t\tfrom[i]=L[i]=vis[i]=0;\n\t}\n\tdis[begin]=0;\n\tData pas;//Data \u6709\u4e24\u4e2a\u6210\u5458\u53d8\u91cf\uff0c\u4e00\u4e2a\u662fp\u8868\u793a\u70b9\uff0cd\u8868\u793a\u6700\u77ed\u8def\n\tpas.p=begin;pas.d=0;\n\tpush(pas);//\u538b\u5165\n\twhile(len)//\u624b\u5199\u5806\u602a\u6211\u55bd\n\t{\n\t\tpas=top();pop();\n\t\twhile(vis[pas.p]&&len>=1)\n\t\t{\n\t\t\tpas=top();\n\t\t\tpop();\n\t\t}\n\t\tif(vis[pas.p]&&!len)\tbreak;//\u60f3\u600e\u4e48\u51fa\u5806\u5c31\u8fd9\u4e48\u51fa\u5806\n\t\tvis[pas.p]=true;\n\t\tdis[pas.p]=pas.d;//\u4fdd\u5b58\u6570\u636e\uff0c\u597d\u50cf\u4e5f\u4e0d\u7528qwq\n\t\tfor(int i=head[pas.p];i!=-1;i=line[i].nxt)//\u904d\u5386\u90bb\u63a5\u8868\n        //line\u662f\u90bb\u63a5\u8868\uff0c\u5176\u4e2d\u6709\u56db\u4e2a\u6210\u5458\u53d8\u91cf\uff0cp\u4e3a\u6240\u6307\u5411\u7684\u70b9\uff0cw\u4e3a\u8fb9\u6743\uff0cf\u4e3a\u6d41\u91cf\uff0cnxt\u4e3a.......\u90bb\u63a5\u8868\u7684next\u6307\u9488qwq\n\t\t\tif(line[i].f>0&&!vis[line[i].p]&&dis[line[i].p]>dis[pas.p]+line[i].w+h[pas.p]-h[line[i].p])//\u5224\u65ad\uff0c\u5e26\u4e0a\u52bf\n\t\t\t{\n\t\t\t\tdis[line[i].p]=dis[pas.p]+line[i].w+h[pas.p]-h[line[i].p];//\u8ddfspfa\u4e00\u6837\u7684\u5957\u8def\uff0c\u5c31\u662f\u591a\u4e86\u4e2a\u52bf\n\t\t\t\tflow[line[i].p]=min(line[i].f,flow[pas.p]);\n\t\t\t\tfrom[line[i].p]=pas.p;//\u5230\u8fd9\u4e2a\u70b9\u7684\u6d41\u91cf\n\t\t\t\tL[line[i].p]=i;//\u6240\u88ab\u589e\u5e7f\u7684\u8fb9\u7684\u7f16\u53f7\n\t\t\t\tData nxt;\n\t\t\t\tnxt.p=line[i].p;nxt.d=dis[line[i].p];//\u538b\u5165\u5806\uff0c\u611f\u89c9\u81ea\u5df1\u5199\u7684\u597d\u5197\u6742qwq\n\t\t\t\tpush(nxt);\n\t\t\t}\n\t}\n\treturn dis[end]!=0x7fffffff;//\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u589e\u5e7fqwq\n}\nvoid MCMA(int begin,int end)\n{\n\twhile(dijkstra(begin,end))//\u5dee\u4e0d\u591a\u8ddfspfa\u4e00\u6837\u7684\u683c\u5f0f\uff0c\u5c31\u662f\u52a0\u4e86\u4e2ah\u6570\u7ec4\n\t{\n\t\tint max_flow=flow[end];\n\t\tMin_cost+=max_flow*(dis[end]-h[begin]+h[end]);//\u6b64\u5904\u8981\u51cf\u6389\uff0c\u624d\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027qwq\n\t\tMax_flow+=max_flow;\n\t\tfor(int i=end;i!=begin;i=from[i])\n\t\t{\n\t\t\tline[L[i]].f-=max_flow;\n\t\t\tline[L[i]^1].f+=max_flow;\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t\th[i]+=dis[i];//\u7d2f\u52a0\uff0c\u4e00\u5b9a\u8981\u7d2f\u52a0\uff0c\u867d\u7136\u4e0d\u7d2f\u52a0\u53ef\u80fd\u8fc7\u51e0\u4e2a\u70b9\n\t}\n}\n```",
        "postTime": 1533467856,
        "uid": 28007,
        "name": "Lance1ot",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u4f9d\u65e7\u662f\u4ee3\u7801\u5411\u9898\u89e3QAQ\n\n\u6ca1\u6709\u5bf9\u539f\u7406\u5f88\u591a\u7684\u89e3\u91ca\uff0c\u4f46\u662f\u5927\u6982\u80fd\u591f\u5bf9\u5728\u5176\u4ed6\u5927\u4f6c\u90a3\u91cc\u7406\u89e3\u4e86\u539f\u7406\uff0c\u5374\u5bf9\u4ee3\u7801\u5b9e\u73b0\u6709\u4e9b\u95ee\u9898\u7684\u65c1\u53cb\u3002\n\nNOIP2018 IS COMING \u6211\u4eec\u4e00\u8d77\u7801\u4e00\u904d\u6a21\u677f\u9898\u5427~\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=123456789;\nstruct node{\n    int to;//\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9 \n    int cap;//\u8fd9\u6761\u8fb9\u7684\u6d41\u91cf\uff08\u662f\u6307\u5f53\u524d\u8fd8\u80fd\u6d41\u7684\u6700\u5927\u6d41\u91cf\uff0c\u800c\u4e0d\u662f\u4e0d\u53d8\u91cf\uff09 \n    int coc;//coc\u5b58\u53cd\u5411\u8fb9\u3002\u7531\u4e8e\u6211\u4f7f\u7528\u4e86vector\uff0c\u6240\u4ee5coc\u8bb0\u5f55\u7684\u662fdata[x][i]\u4e2d\u7684i\u3002\u5177\u4f53\u600e\u4e48\u8ba1\u7b97\u53cd\u5411\u8fb9\u4e0b\u9762\u8bf4\u3002 \n    int cost;//cost\u5b58\u4e00\u6761\u8fb9\u7684\u8d39\u7528 \n};//\u4f7f\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b58\u50a8\u6240\u6709\u7684\u8fb9\u4ee5\u53ca\u53cd\u5411\u8fb9\uff0c\u6240\u6709\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u3002 \nvector<node>data[50005];//data\u7528\u6765\u5b58\u56fe \nint dx[50005],pre1[50005],pre2[50005],incf[50005],n,m,s,t,ans,maxf;\nbool inq[50005];\n// dx\uff0cinq\u7684\u610f\u4e49\u548cspfa\u4e2d\u7684dist\uff0cinq\uff08\u6216vis\uff09\u76f8\u540c\uff0cpre1\uff0cpre2\uff0cincf\u7684\u7528\u5904\u4e0b\u9762\u4f1a\u8bf4\u3002\n// n,m,s,t\u5982\u9898\u76ee\u6240\u793a\uff0cans\u662f\u6700\u5c0f\u8d39\u7528\uff0cmaxf\u662f\u6700\u5927\u6d41\u3002 \nvoid add(int u,int v,int w,int f){//\u52a0\u4e00\u6761\u8fb9\u7684\u51fd\u6570\uff0c\u7531u\u5230v\u8fde\u4e00\u6761\u6d41\u4e3aw\uff0c\u82b1\u8d39\u4e3af\u7684\u8fb9 \n    data[u].push_back((node){v,w,data[v].size(),f});\n    data[v].push_back((node){u,0,data[u].size()-1,-f});//\u53cd\u5411\u8fb9\u7684\u6d41\u8981\u7f6e\u4e3a0\u3002\u56e0\u4e3a\u5982\u679c\u4f60\u8bbe\u6210\u6b63\u7684\uff0c\u8fd9\u6761\u8def\u5c31\u6709\u53ef\u80fd\u7531\u7ec8\u70b9\u5411\u8d77\u70b9\u6d41\uff0c\u5728\u53e6\u4e00\u6761\u8def\u4e0a\u8fbe\u5230\u6700\u5927\u6d41\uff0c\u66f4\u5c0f\u8d39\u7528\u3002\u8fd9\u663e\u7136\u4e0d\u5408\u6cd5\u3002 \n\t//\u53cd\u5411\u8fb9\u7684\u5b9e\u73b0\uff0c\u662f\u8003\u8651\u5230\u8fd9\u4e24\u6761\u4e92\u4e3a\u53cd\u5411\u8fb9\u7684\u8fb9\u662f\u540c\u65f6\u52a0\u5165\u7684\uff0c\u76f4\u63a5\u8c03\u7528\u5f53\u65f6data[v].size()\u5c31\u662f\u53cd\u5411\u8fb9\u7684\u7f16\u53f7\u3002\n\t//\u6309\u8bf4\u7528size()\u8ba1\u7b97\u7f16\u53f7\u662f\u5e94\u8be5-1\u7684\uff08\u56e0\u4e3a\u7f16\u53f7\u75310\u5f00\u59cb\uff0c\u800csize()\u75311\u5f00\u59cb\uff09\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u8ba1\u7b97\u4e0d\u7528\uff0c\u539f\u56e0\u662f\n\t//\u5f53\u65f6v\u8fd8\u6ca1\u6709\u63d2\u5165\u8fd9\u4e2a\u8fb9\uff0c\u5929\u7136\u6709\u4e00\u4e2a\u88ab\u51cf\u4e00\u7684size() \n}\nbool spfa(){\n    fill(dx+1,dx+n+1,maxn);//\u521d\u59cb\u5316\uff0c\u4e00\u5b9a\u522b\u5fd8\u4e86\u3002 \n    queue<int>q;\n    memset(inq,0,sizeof(inq));\n    q.push(s);\n    dx[s]=0;\n    inq[s]=1;//\u4ee5\u4e0a\u8fd9\u4e9b\u53d8\u91cf\uff0c\u73a9\u8f6cspfa\u7684\u4f60\u4e00\u5b9a\u770b\u8d77\u6765\u5f88\u719f\u6089QAQ \n    incf[s]=maxn;//\u90a3\u4e48incf\u5462\uff1f\u4ed6\u8bb0\u5f55\u7684\u662f\u4e00\u6761\u589e\u5e7f\u8def\u7684\u6700\u5c0f\u6d41\u91cf\u3002incf[i]\u4ee3\u8868\u5f53\u524d\u589e\u5e7f\u8def\u5230i\u4e3a\u6b62\u7684\u6700\u5c0f\u6d41\u91cf\uff0cincf[t]\u4e3a\u6574\u6761\u8def\u6700\u5c0f\u6d41\u91cf\u3002 \n\t//\u5982\u4f55\u7406\u89e3\u5462\uff0c\u6211\u4eec\u8003\u8651\u77ed\u677f\u6548\u5e94\uff0c\u6700\u5927\u5bb9\u91cf\u53d6\u51b3\u4e8e\u6700\u77ed\u6728\u677f\u3002\u589e\u5e7f\u8def\u4ea6\u7136\uff0c\u5b83\u7684\u6700\u5927\u6d41\u91cf\u53d6\u51b3\u4e8e\u589e\u5e7f\u8def\u4e0a\u6d41\u91cf\u6700\u5c0f\u7684\u8fb9\u3002 \n    while(!q.empty()){\n        int now=q.front();\n        inq[now]=0;\n        q.pop();//\u662f\u4e0d\u662f\u8d85\u719f\u6089\u7684\u611f\u89c9QAQ (\u53ea\u8bf4\u4e00\u4e0b\u548cspfa\u4e0d\u4e00\u6837\u7684\u4ee3\u7801\u7684\u610f\u601d)\n        for(int i=0;i<data[now].size();i++){\n        \tnode &tmp=data[now][i];\n            if(tmp.cap>0&&tmp.cost+dx[now]<dx[tmp.to]){//\u6709\u6d41\u91cf\u624d\u80fd\u677e\u5f1b~ \n                dx[tmp.to]=dx[now]+tmp.cost;//\u548cspfa\u4e00\u6837 \n                incf[tmp.to]=min(incf[now],tmp.cap);//\u66f4\u65b0\u589e\u5e7f\u8def\u7684\u201c\u77ed\u677f\u201d\u3002\n                pre1[tmp.to]=now;//pre1[i]\u662f\u8fd9\u6b21\u589e\u5e7f\u8def\u7684i\u70b9\u662f\u7531\u54ea\u4e2a\u70b9\u6d41\u8fc7\u6765\u7684\u3002 \n                pre2[tmp.to]=i;//pre2[i]\u662f\u8fd9\u6b21\u589e\u5e7f\u8def\u7684i\u70b9\u662f\u7531pre1[i]\u7684\u7f16\u53f7\u4e3a\u591a\u5c11\u7684\u8fb9\u6d41\u8fc7\u6765\u7684\u3002 \n                if(!inq[tmp.to]){//QAQ spfa\uff0cspfa\u4f60\u8fd8\u6d3b\u7740\uff01 \n                    inq[tmp.to]=1;\n                    q.push(tmp.to);\n                }\n            }\n        }\n    }\n    return dx[t]!=maxn;//\u5982\u679cdx[t]\u88ab\u66f4\u8fc7\u4e86\uff0c\u610f\u5473\u7740\u4e00\u5b9a\u4e0d\u662f\u6700\u5927\u6d41\uff01\u8fd4\u56de1\uff0c\u627e\u589e\u5e7f\u8def\u53bb\uff01 \n}\nvoid update(){//\u66f4\u65b0\u7b54\u6848\u548c\u56fe\u7a0b\u5ea6\u7684\u80fd\u529b\u3002 \n    int x=t;//\u9996\u5148\u628a\u5f53\u524d\u70b9\u7f6e\u4e3a\u7ec8\u70b9\uff0c\u6211\u4eec\u6cbf\u7740\u7ec8\u70b9\u7531\u589e\u5e7f\u8def\u53cd\u5411\u8d70\u5230\u8d77\u70b9~ \n    while(x!=s){//x\u5230s\u7684\u65f6\u5019\u505c\u6b62~ \n        int y=pre1[x];//\u4f7f\u7528\u6211\u4eec\u5148\u524d\u7ef4\u62a4\u7684\u6570\u7ec4\u6765\u53cd\u5411\u8d70\u589e\u5e7f\u8def\u3002 \n        int i=pre2[x];\n        data[y][i].cap-=incf[t];//\u6240\u6709\u589e\u5e7f\u8def\u4e0a\u7684\u8fb9\u4e00\u5f8b\u51cf\u53bb\u53ef\u6269\u6700\u5927\u5bb9\u91cf\uff01 \n        data[x][data[y][i].coc].cap+=incf[t];//\u53cd\u5411\u8fb9\uff0c\u4e00\u5f8b\u589e\u52a0\u8fd9\u4e2a\u5bb9\u91cf\u3002\n\t\t//\u5982\u679c\u8bf4\u4e3a\u4ec0\u4e48\u8981\u5f04\u53cd\u5411\u8fb9\uff0c\u6211\u4e2a\u4eba\u7684\u7406\u89e3\u662f\uff1a\u589e\u5e7f\u4e00\u6761\u589e\u5e7f\u8def\u8d39\u7528\u6700\u4f18\uff0c\u7136\u800c\u6700\u5927\u6d41\u91cf\u672a\u5fc5\u3002\n\t\t//\u5982\u679c\u6211\u4eec\u53cd\u5411\u5efa\u8fb9\uff0c\u53ef\u4ee5\u7531\u7ec8\u70b9\u6d41\u5411\u8d77\u70b9\uff0c\u8fd9\u6837\u5176\u5b9e\u610f\u5473\u7740\uff0c\u5f53\u5e74\u8fd9\u6761\u8fb9\u9009\u62e9\u7684\u6d41\u51cf\u5c11\u4e00\u70b9\u3002\n\t\t//\u4e0d\u8fc7\u6211\u4eec\u672a\u5fc5\u8981\u7406\u6027\u7406\u89e3\u8fd9\u4e2a\u4e8b\uff0c\u65e2\u7136\u90fd\u5efa\u4e86\u53cd\u5411\u8fb9\u4e86\uff0c\u90a3\u5c31\u548c\u6b63\u5411\u8fb9\u53cd\u7740\u6765\u5457~\n        x=y;//\u8fed\u4ee3\u4e00\u4e0b \n    }\n    maxf+=incf[t];//\u66f4\u65b0\u6700\u5927\u6d41 \n    ans+=dx[t]*incf[t];//\u66f4\u65b0\u8d39\u7528 \n}\nvoid FT(){\n    while(spfa()){//\u5f53spfa\u53d1\u73b0\u6709\u589e\u5e7f\u8def\u7684\u65f6\u5019\uff0c\u5c31\u66f4\u65b0\u4e00\u4e0b\u56fe\uff0c\u6700\u5c0f\u8d39\u7528\u548c\u6700\u5927\u6d41\u3002\u5982\u679c\u6ca1\u6709\u589e\u5e7f\u8def\uff0c\u7b54\u6848\u6700\u4f18\u3002 \n        update();\n    }\n}\n/*\n\t\u6700\u5c0f\u8d39\u7528\u6d41\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u800c\u4e14\u975e\u5e38\u597d\u7528/w\\\u53ef\u4ee5\u89e3\u51b3\u5f88\u591a\u4e71\u4e03\u516b\u7cdf\u7684\u95ee\u9898\u3002\n\t\u4ee3\u7801\u96be\u5ea6\u8f83\u4f4e\uff0c\u5efa\u56fe\u96be\u5ea6\u8f83\u9ad8\u3002\u5982SDOI2017\u65b0\u751f\u821e\u4f1a\u3002\n\t\u4e2a\u4eba\u8ba4\u4e3a\uff0c\u7528\u8fd9\u6837\u9b3c\u755c\u7684\u5efa\u6a21\u65b9\u5f0f\uff0c\u6050\u6015\u96be\u4ee5\u5361\u6389spfa\u3002\n\t\u4e3a\u4ec0\u4e48\u627e\u589e\u5e7f\u8def\u7528spfa\u5c31\u53ef\u4ee5\u505a\u5230\u6700\u5c0f\u8d39\u7528\u5462\uff1f\u8003\u8651\u6211\u4eec\u6bcf\u4e00\u6b21\u7684\u677e\u5f1b\u90fd\u662f\u4ee5\u4e00\u6761\u8def\u5f84\u7684\u65b9\u5f0f\u677e\u5f1b\u8fc7\u6765\u7684\uff0c\u5c3d\u7ba1\n\t\u4f1a\u53d1\u6563\u51fa\u53bb\uff0c\u4f46\u677e\u5f1b\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u7ec8\u70b9\u4e00\u5b9a\u6709\u4e14\u53ea\u6709\u4e00\u6761\u8def\u3002\u5982\u679c\u5df2\u7ecf\u4e0d\u53ef\u677e\u5f1b\uff0c\u8fd9\u6761\u8def\u4e00\u5b9a\u662f\u5f53\u524d\u5355\u4f4d\u6d41\u91cf\u4ef7\u683c\n\t\u6700\u5c0f\u7684\u589e\u5e7f\u8def\u3002\u6211\u4eec\u8d2a\u5fc3\uff1a\u53cd\u6b63\u90fd\u662f\u589e\u5e7f\u8def\uff0c\u5148\u6269\u4fbf\u5b9c\u7684\u80af\u5b9a\u597d\u554aQAQ \n*/\nint main(){\n    cin>>n>>m>>s>>t; \n    for(int i=1;i<=m;i++){\n        int u,v,w,f;\n        cin>>u>>v>>w>>f;\n        add(u,v,w,f);//\u6309\u7167\u9898\u610f\u5efa\u56fe \n    }\n    FT();//\u6700\u5c0f\u8d39\u7528\u6d41\u4e3b\u4f53 \n    cout<<maxf<<\" \"<<ans<<endl;\n}\n```",
        "postTime": 1541029592,
        "uid": 38055,
        "name": "Npse_D",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "## \u8d39\u7528\u6d41\n\n### \u505a\u6cd5\n\n1. \u5728\u6b8b\u4f59\u7f51\u7edc\u4e0a\u5bfb\u627e\u6700\u77ed\u8def\n2. \u5bf9\u8be5\u8def\u5f84\u8fdb\u884c\u589e\u5e7f, \u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\n3. \u4e0d\u65ad\u91cd\u590dopt.1\u64cd\u4f5c, \u76f4\u81f3$s\\to t$\u4e0d\u5b58\u5728\u8def\u5f84\n\n### \u8bc1\u660e\n\n#### \u5b9a\u4e49\n\n1. \u5b9a\u4e49$f$\u4f5c\u4e3a\u56fe\u4e2d\u7684\u6d41\n\n2. $f\\text{-}g$\u8868\u793a\u6d41$f$\u4e0e\u6d41$g$\u4e4b\u95f4\u4e0d\u540c\u7684\u6d41\u91cf\n3. $in(u)$\u8868\u793a$u$\u7684\u5165\u6d41, $out(u)$\u8868\u793a$u$\u7684\u51fa\u6d41\n\n#### Proof 1\n\n- $f$\u662f\u6700\u5c0f\u8d39\u7528\u6d41 $\\Leftrightarrow$ \u6b8b\u4f59\u7f51\u7edc\u4e2d\u65e0\u8d1f\u5708\n\n\u5047\u8bbe, \u5b58\u5728\u8d39\u7528\u6bd4$f$\u66f4\u5c0f\u7684\u6d41$f'$. \n\n\u89c2\u5bdf\u4e8c\u8005, \u7531\u4e8e\u6d41\u91cf\u76f8\u540c, \u90a3\u4e48$out(s), in(t)$\u5747\u76f8\u540c\n\n\u4e14$\\forall u, in(u)=out(u)$ \u5728$f, f'$\u4e2d\u6052\u6210\u7acb.\n\n**\u4e8e\u662f$f'\\text{-}f$\u5f62\u6210\u7684\u6d41\u662f\u7531\u82e5\u5e72\u5708\u7ec4\u6210\u7684!**\n\n\u56e0\u4e3a$cost(f') < cost(f)$ \u6545$f $\u7684\u6b8b\u7559\u7f51\u7edc\u4e2d\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u8d1f\u5708.\n\n#### Proof 2\n\n- \u5229\u7528\u6570\u5b66\u5f52\u7eb3\u8bc1\u660e\n\n\u5047\u8bbe$f_i$ \u8868\u793a\u6d41\u91cf\u4e3a$i$\u7684\u6700\u5c0f\u8d39\u7528\u6d41\n\n$f_0$\u4fbf\u662f\u539f\u56fe(\u663e\u7136\u539f\u56fe\u4e2d\u4e0d\u5b58\u5728\u8d1f\u5708).\n\n\u90a3\u4e48\u6839\u636e\u6211\u4eec\u7684\u505a\u6cd5, \u5f97\u5230\u4e86$f_{i+1}$, \u90a3\u4e48\u5047\u8bbe\u5b58\u5728\u8d39\u7528\u66f4\u5c0f\u7684\u6d41$f_{i+1}'$\n\n\u5219 $f_{i + 1} \\text{-}f_i$\u662f\u4e00\u6761$s\\to t$\u7684**\u6700\u77ed\u8def**, \u800c$f_{i+1}'\\text{-}f_i$\u662f\u4e00\u6761$s\\to t$\u7684\u8def\u5f84\u4e0e\u82e5\u5e72\u5708\u7ec4\u6210\u7684\n\n\u90a3\u4e48\u8fd9\u4e9b\u5708\u4e2d\u5219\u5fc5\u5b9a\u5b58\u5728\u8d1f\u5708, \u8fd9\u4e0e$f_i$\u662f\u6700\u5c0f\u8d39\u7528\u6d41\u76f8\u6096.\n\n\u6545\u4e0a\u8ff0\u6210\u7acb.\n\n---\n\n### \u539f\u59cb\u5bf9\u5076\u7b97\u6cd5\n~~\u4e0d\u8981\u5728\u610f\u540d\u5b57~~\n\n> \u80cc\u666f: \u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u8fb9, ~~spfa\u5df2\u7ecf\u6b7b\u4e86~~\n>\n> \u601d\u8003: \u6c42\u6700\u77ed\u8def\u53ef\u5426\u7528Dijkstra\u5462?\n\n\u5047\u5982\u6211\u4eec\u7ed9\u6bcf\u4e00\u4e2a\u8282\u70b9 \u9644\u4e0a**\u52bf** $h(i)$\uff1a\u4f7f\u5f97$e(u,v)' = e(u,v) + h(u) - h(v)$ \n\n\u4e14\u5b83\u6052\u975e\u8d1f, \u90a3\u5c31\u53ef\u4ee5\u7528$\\text{Dijkstra}$\u4e86\n\n- \u8003\u8651\u6700\u77ed\u8def\u7684\u6027\u8d28: $dis(u) + e(u, v) \\geq dis(v)$\n\n\u5f97\u5230$dis(u)-dis(v) + e(u, v) \\geq 0$\n\n\u90a3\u4e48\u6211\u4eec\u5c06$dis(u)-dis(v) + e(u, v)$\u4f5c\u4e3a\u65b0\u7684\u8fb9\u6743, \u8bb0\u4e3a$e(u,v)'$\n\n~~\u4e0d\u96be\u8bc1\u660e~~\u4ee5\u5b83\u4e3a\u65b0\u56fe\u6240\u5f97\u5230\u7684\u6700\u77ed\u8def\u4e0e\u539f\u56fe\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u8def\u5f84\u662f\u4e00\u6837\u7684.\n\n\u90a3\u4e48\u8fd9\u6837\u5c31\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5$\\text{Dijkstra}$\u4e86. (~~\u6bd4spfa~~\u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86, \u96fe\n\n\n\n\u5373: \u5728\u8dd1no.i\u6b21\u589e\u5e7f\u7684\u65f6\u5019\u7684\u52bf$h_i(u)$\u4e3a$dis_i(u)$\n\n~~\u7b49\u7b49, \u5982\u679c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u52bf(\u5373\u6700\u77ed\u8def), \u90a3\u8fd8tm\u8981\u589e\u5e7f\u5e72\u561b~~\n\n\u4e8e\u662f\u53d1\u73b0\u5176\u5b9e$h_i(u)=h_{i-1}(u)$\u4e5f\u662f\u53ef\u4ee5\u7684, \u5373\u53d8\u6210\u4e0a\u6b21\u589e\u5e7f\u7684**\u539f\u56fe**\u4e2d$u$\u7684\u6700\u77ed\u8def.\n\n> \u4ece\u7b80\u8bc1\u660e: \n>\n> 1. \u82e5e(u,v)\u5728no.i-1\u6b21\u589e\u5e7f\u65f6\u5b58\u5728, \u90a3\u4e48\u663e\u7136\u6ee1\u8db3\n>\n> 2. \u82e5e(u,v)\u5728no.i-1\u6b21\u589e\u5e7f\u4e0d\u5b58\u5728\n>\n>    \u90a3\u4e48\u6b64\u6b21\u5b83\u7684\u51fa\u73b0\u662f\u56e0\u4e3a\u589e\u5e7f\u5bfc\u81f4\u7684\n>\n>    \u610f\u601d\u5c31\u662f\u8bf4\u5b83\u4e00\u5b9a\u5728\u4e0a\u6b21\u7684$s\\to t$\u7684\u6700\u77ed\u8def\u4e0a, \u90a3\u4e48e(u, v) = -e(v, u) = 0\n>\n>    \u4f9d\u65e7\u975e\u8d1f.\n\n```cpp\n%:pragma GCC optimize(\"Ofast\", 2)\n#include <bits/stdc++.h>\nusing namespace std;\n\nnamespace {\n\tinline void read(int &x) {\n\t\tx = 0; int f = 1; char c = getchar();\n\t\tfor(; !isdigit(c); c = getchar())\n\t\t\tif(c == '-') f = -1;\n\t\tfor(;  isdigit(c); c = getchar())\n\t\t\tx = (x << 3) + (x << 1) + (c ^ '0');\n\t\tx *= f;\n\t}\n}\n\nconst int N = 5e3 + 5, M = 5e4 + 5;\nconst int inf = 1e9;\n\n# define pi pair<int, int>\n\nint n, m, s, t, u, v, c, w;\n\nnamespace Primal {\n\tint Ecnt = 1, first[N], nex[M * 2], arr[M * 2], cap[M * 2], cost[M * 2];\n\tint dis[N], h[N], pree[N], prev[N], F, C;\n\n\ttemplate <typename T>\n\tinline void Min(T &a, T b) {\n\t\tif(a > b) a = b;\n\t}\n\tinline void Ad(int u, int v, int c, int w) {\n\t\tnex[++Ecnt] = first[u], first[u] = Ecnt, arr[Ecnt] = v, cap[Ecnt] = c, cost[Ecnt] = w;\n\t}\n\tinline void add(int u, int v, int c, int w) {\n\t\tAd(u, v, c, w), Ad(v, u, 0, -w);\n\t}\n\tvoid Dijkstra() {\n\t\tstatic priority_queue<pi, vector<pi>, greater<pi> > q;\n\t  for(; !q.empty(); q.pop());\n\t\tfill(dis, dis + 1 + n, -1);\n\t\tdis[s] = 0, q.push(pi(0, s));\n\t\t// printf(\"-----------\\n\");\n\t\twhile(!q.empty()) {\n\t\t\tpi now = q.top(); q.pop();\n\t\t\tint u = now.second;\n\t\t\tif(dis[u] < now.first) continue;\n\t\t\tfor(int i = first[u]; i; i = nex[i]) {\n\t\t\t\tstatic int v; v = arr[i];\n\t\t\t\tif(!cap[i]) continue;\n\t\t\t\tif(dis[v] < 0 || dis[v] > dis[u] + cost[i] + h[u] - h[v]) {\n\t\t\t\t\tdis[v] = dis[u] + cost[i] + h[u] - h[v];\n\t\t\t\t\tprev[v] = u, pree[v] = i;\n\t\t\t\t\tq.push(pi(dis[v], v));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpi solve(int s, int t) {\n\t\tfill(h, h + 1 + n, 0);\n\t\tfor(int f = inf; f > 0; ) {\n\t\t\tDijkstra();\n\t\t\tif(dis[t] < 0) break;\n\t\t\tfor(register int i = 1; i <= n; ++i) // be careful this for\n\t\t\t\th[i] += (dis[i] != -1) ? dis[i] : 0;\n\t\t\tint d = f;\n\t\t\tfor(int u = t; u != s; u = prev[u]) \n\t\t\t\tMin(d, cap[pree[u]]);\n\t\t\tf -= d, F += d, C += h[t] * d;\n\t\t\tassert(C >= 0);\n\t\t\tfor(int u = t; u != s; u = prev[u]) {\n\t\t\t\tcap[pree[u]] -= d;\n\t\t\t\tcap[pree[u] ^ 1] += d;\n\t\t\t}\n\t\t} return pi(F, C);\n\t}\n}\nusing namespace Primal;\n\nint main() {\n\tread(n), read(m), read(s), read(t);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tread(u), read(v), read(c), read(w);\n\t\tadd(u, v, c, w);\n\t}\n\tpi get = solve(s, t);\n\tprintf(\"%d %d\\n\", get.first, get.second);\n\treturn 0;\n}\n\n```\n\n\n\u5176\u5b9e\u5927\u5bb6\u53ef\u80fd\u6700\u7591\u60d1\u7684\u5c31\u662f\u4e3a\u4ec0\u4e48\u6709\u4ee3\u7801\u662f \uff1a\n\n```cpp\n   for(int i = 1; i <= n; ++i) h[i] += dist[i];\n```\n\n\u4ece\u7406\u8bba\u51fa\u53d1, $h'(i)$\u6b64\u65f6\u5b9a\u4e49\u4e3ano.(i-1)\u6b21\u589e\u5e7f\u65f6**\u539f\u56fe**\u4e2d\u7684\u6700\u77ed\u8def ~~(\u518d\u6b21\u5f3a\u8c03\u662f\u539f\u56fe!)~~\n\n\u800c\u6570\u7ec4dist\u5b9e\u9645\u5b58\u50a8\u7684\u662f\n\n$$\n\\begin{aligned}\n\\text{dist[u]}&=\\sum e'(u, v) \\\\\n&=\\sum \\bigg( h(u)-h(v) + e(u, v) \\bigg) \\\\\n&= dis(u) + h(s)-h(u) \\\\\n&= dis(u) - h(u) \\\\\n\\end{aligned}\n$$\n\n\u90a3\u4e48$h'(u) = dis(u) = h(u) + dist[u]\u200b$\n\n\u6240\u4ee5\u5c31\u662f \u4e00\u76f4\u90fd\u662f \"+=\"\n\n",
        "postTime": 1516334642,
        "uid": 50047,
        "name": "Bartholomew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u4e0d\u77e5\u9053luogu\u7684LaTeX\u652f\u6301\u5982\u4f55\u3002\u3002\u3002\u8981\u662f\u5d29\u4e86\u7684\u8bdd\u53ef\u4ee5\u53bb[\u6211\u7684blog](http://www.yhzq-blog.cc/\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u603b\u7ed3/)\u770b\u770b\r\n\r\n\r\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u601d\u60f3,\u7528Dij\u6c42\u89e3\u8d39\u7528\u6d41\r\n\r\n\r\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4,Dijkstra\u53ea\u80fd\u5728\u6b63\u6743\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\u5440,\u800c\u8d39\u7528\u6d41\u7684\u7f51\u7edc\u6784\u56fe\u4e2d$w[x][y] = -w[y][x]$,\u52bf\u5fc5\u4f1a\u4ea7\u751f\u8d1f\u6743\u8fb9,\u600e\u4e48\u80fd\u7528Dijkstra\u5462\uff1f(\u4e0b\u6587\u7528$w[i][j]$\u8868\u793a\u8d39\u7528,$p[i]$\u8868\u793a\u70b9,\u65b9\u4fbf\u8bb2\u89e3)\r\n\r\n\u6211\u4eec\u6c42\u89e3\u8d39\u7528\u6d41\u4e00\u822c\u7528spfa\u6216zkw\u6d41,\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5728\u7a00\u758f\u56fe\u4e0a\u8fd0\u884c\u6548\u7387\u8fd8\u4e0d\u9519,\u4f46\u662f\u5728\u7a20\u5bc6\u56fe\u4e0a\u7684\u8868\u73b0\u5374\u65e0\u6cd5\u4ee4\u4eba\u6ee1\u610f,\u800c\u4e14\u5176\u8fd0\u884c\u6548\u7387\u4e0e\u56fe\u7684\u5f62\u6001\u5173\u7cfb\u592a\u5927,\u65e0\u6cd5\u4ee4\u4eba\u5b89\u5fc3\u3002\r\n\r\n\u53cd\u89c2Dijkstra,\u5b83\u5728\u7a20\u5bc6\u56fe$O(n^2)$\u548c\u7a00\u758f\u56fe$O(mlogm)$\u4e0a\u7684\u8868\u73b0\u90fd\u4e0d\u9519,\u800c\u4e14\u5176\u8fd0\u884c\u65f6\u95f4\u4e0e\u56fe\u7684\u5f62\u6001\u5173\u7cfb\u4e0d\u5927,\u8f83\u4e3a\u7a33\u5b9a,\u552f\u4e00\u7684\u7f3a\u70b9\u662f\u4e0d\u80fd\u8fd0\u884c\u5728\u8d1f\u6743\u56fe\u4e0a\u3002\r\n\r\n\u4e8b\u5b9e\u4e0a\u5728\u5bf9\u7f51\u7edc\u8fdb\u884c\u4e00\u4e9b\u5904\u7406\u540e,Dijkstra\u662f\u53ef\u4ee5\u7528\u6765\u6c42\u89e3\u8d39\u7528\u6d41\u7684\u3002\r\n\r\n\u6211\u4eec\u5bf9\u7f51\u7edcG\u4e2d\u7684\u6bcf\u4e2a\u70b9i\u8bbe\u7f6e\u4e00\u4e2a\u52bf\u51fd\u6570$h[i]$,\u5728\u7b97\u6cd5\u8fd0\u884c\u7684\u6bcf\u4e00\u65f6\u523b,\u5bf9\u4e8e\u6bcf\u6761\u6b8b\u4f59\u7f51\u7edc\u4e2d\u7684\u8fb9$(x, y)$,\u90fd\u8981\u6ee1\u8db3$h[x] + w[x][y] - h[y] >= 0$(\u4e09\u89d2\u4e0d\u7b49\u5f0f)\u3002\u7ef4\u62a4h[i]\u7684\u65b9\u6cd5\u4e0b\u6587\u518d\u8ba8\u8bba\u3002\r\n\r\n\u6784\u5efa\u65b0\u7f51\u7edc$G',V' = V,w'[x][y] = h[x] + w[x][y] - h[y]$,\u8fd9\u6837\u5728\u65b0\u7f51\u7edc\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u503c\u5747\u975e\u8d1f,\u53ef\u4ee5\u4f7f\u7528Dijkstra\u6c42\u89e3\u6700\u77ed\u8def\u3002\r\n\r\n$G'$\u4e2d\u7684\u4e00\u6761\u8def\u5f84 $p[1], p[2],\\cdots, p[m]$ \u7684\u6743\u503c\u4e3a\r\n\r\n\r\n$$\\begin{aligned}\r\nw'[path]&=w'[p[1]][p[2]] + w'[p[2]][p[3]] + \\cdots + w'[p[m-1]][p[m]]\\\\\r\n        &=h[p[1]]-h[p[2]] + w[p[1]][p[2]]\\\\\r\n&+h[p[2]]-h[p[3]] + w[p[2]][p[3]]\\\\\r\n        &+\\cdots\\\\\r\n&+h[p[m-1]]-h[p[m]] + w[p[m-1]][p[m]]\\\\\r\n&=w[p[1]][p[2]] + w[p[2]][p[3]] + \\cdots + w[p[m-1]][p[m]] + h[p[1]]-h[p[m]] \\\\\r\n        &=w[path] + h[p[1]]-h[p[m]]\r\n\\end{aligned}$$\r\n\r\n\u800c\u5f53p[1]\u548cp[m]\u786e\u5b9a\u65f6,\u6700\u4f18\u5316$w[path]$\u4e0e\u6700\u4f18\u5316$w'[path]$\u662f\u7b49\u4ef7\u7684,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728G'\u4e2d\u6c42\u89e3S\u5230T\u7684\u6700\u77ed\u8def$w'[path]$,G\u4e2dS\u5230T\u7684\u6700\u77ed\u8def$w[path] = w'[path] - h[S] + h[T]$\u3002\r\n\r\n\u4e0b\u9762\u6211\u4eec\u6765\u8ba8\u8bba\u5982\u4f55\u7ef4\u62a4\u52bf\u51fd\u6570$h[]$\u3002\r\n\r\n\u521d\u59cb\u60c5\u51b5\u4e0b,\u5982\u679c\u6240\u6709\u7684\u6743\u503c\u90fd\u4e3a\u6b63,\u90a3\u4e48\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u6240\u6709$h[i]$\u8bbe\u7f6e\u4e3a0\uff1b\u5982\u679c\u6709\u8d1f\u6743\u503c,\u90a3\u4e48\u6211\u4eec\u505a\u4e00\u904dspfa,\u8ba9h[]\u7b49\u4e8e\u8ddd\u79bb\u51fd\u6570\u3002\u5982\u679c\u521d\u59cb\u7f51\u7edc\u4e3aDAG,\u4e5f\u53ef\u4ee5\u91c7\u7528\u9012\u63a8$h[i] = min(h[j] + w[j][i], g[j][i] = true)$\u3002\r\n\r\n\u8ba9$d'[i]$\u8868\u793aG'\u4e2dS\u5230\u70b9i\u7684\u8ddd\u79bb,\u5f53\u67d0\u6b21\u589e\u5e7f\u7ed3\u675f\u540e,G'\u4e2d\u4f1a\u65b0\u52a0\u5165\u67d0\u4e9b\u8fb9$(j, i)$,\u800c\u8fd9\u4e9b(j, i)\u5fc5\u5b9a\u6ee1\u8db3$d'[i] + w'[i][j] = d'[j]$(\u5426\u5219(i, j)\u5c31\u4e0d\u4f1a\u5728\u589e\u5e7f\u8def\u4e2d)\u3002\u5bf9\u4e0a\u5f0f\u8fdb\u884c\u4e00\u4e9b\u4ee3\u6570\u53d8\u6362\uff1a\r\n\r\n\r\n$$\\begin{aligned}\r\nd'[i] + w'[i][j] = d'[j]\r\n\\\\d'[i] + w[i][j] + h[i]-h[j] = d'[j]\r\n\\\\(d'[j] + h[j])-(d'[i] + h[i])-w[i][j] = 0\r\n\\\\(d'[j] + h[j])-(d'[i] + h[i]) + w[j][i] = 0\r\n\\end{aligned}$$\r\n\r\n(\u56e0\u4e3a\u662f\u8d39\u7528\u6d41,\u6240\u4ee5\u6709w[i][j] = -w[j][i])\r\n\r\n\u56e0\u6b64\u8ba9\u6240\u6709$h[i] += d'[i]$\u540e,\u65b0\u52a0\u5165\u7684\u8fb9(j, i)\u4e5f\u4f1a\u6ee1\u8db3\u52bf\u51fd\u6570\u7684\u6027\u8d28\u3002\r\n\r\n\u540c\u65f6\u6211\u4eec\u6709\uff1a\r\n\r\n\r\n$$\\begin{aligned}\r\nd'[i] + w'[i][j] - d'[j] >= 0\\\\\r\nd'[i] + h[i] - h[j] + w[i][j] - d'[j] >= 0\\\\\r\n(d'[i] + h[i]) - (d'[j] + h[j]) + w[i][j] >= 0\\\\\r\n\\end{aligned}$$\r\n\r\n\u56e0\u6b64\u4fee\u6539$h[i]$\u540e,$(i, j)$\u4f9d\u7136\u4f1a\u6ee1\u8db3\u52bf\u51fd\u6570\u7684\u6027\u8d28\u3002\r\n\u7b97\u6cd5\u8fc7\u7a0b\u5982\u4e0b\uff1a\r\n\r\n\r\n>S1 \u521d\u59cb\u5316h[]\r\n>S2 \u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\u505aDijkstra\r\n>S3 \u82e5S\u5230T\u6709\u53ef\u884c\u8def\u5f84,\u5219\u4fee\u6539\u589e\u5e7f\u8def\u4e0a\u7684\u8fb9\u7684\u5bb9\u91cf\u5e76\u6240\u6709h[i] += d'[i],\u8f6cS2,\u5426\u5219\u9000\u51fa\r\n\r\n\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a$O(spfa() + K * Dijkstra())$\u6216$O(K * Dijkstra())$,\u8fd9\u53d6\u51b3\u4e8e\u521d\u59cb\u5316h[]\u65f6\u662f\u5426\u8c03\u7528spfa,K\u8868\u793a\u589e\u5e7f\u6b21\u6570\u3002\r\n\r\n\r\n\r\n```cpp\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <queue>\r\n#include <cstring>\r\n#define M 200100\r\n#define N 10010\r\n#define INF 0x33333333\r\n#define min(x,y) ((x<y)?(x):(y))\r\nusing namespace std;\r\ntypedef pair<int,int> Pair;\r\nstruct node\r\n{\r\n    int from,to,next,flow,cost;\r\n}e[M];\r\nint tot=-1,st[M];\r\nint n,m,x,y,z;\r\nvoid add(int x,int y,int z,int zz)\r\n{\r\n    e[++tot].to=y;\r\n    e[tot].from=x;\r\n    e[tot].flow=z;\r\n    e[tot].cost=zz;\r\n    e[tot].next=st[x];\r\n    st[x]=tot;\r\n}\r\nPair main_pro(int s,int t)\r\n{\r\n    static int h[N];\r\n    int flow=0,cost=0;\r\n    while(1)\r\n    {\r\n        static int dis[N],pv[N],pe[N];\r\n        memset(dis,0x33,sizeof dis);\r\n        dis[s]=0;\r\n        priority_queue<Pair,vector<Pair>,greater<Pair> >que;\r\n        que.push(Pair(0,s));\r\n        while(!que.empty())\r\n        {\r\n            Pair now=que.top();\r\n            que.pop();\r\n            if (now.first!=dis[now.second]) continue;\r\n            if (now.second==t) break;\r\n            for (int i=st[now.second];~i;i=e[i].next)\r\n            {\r\n                int nowcost=e[i].cost+h[now.second]-h[e[i].to];\r\n                if (e[i].flow>0 && dis[e[i].to]>dis[now.second]+nowcost)\r\n                {\r\n                    dis[e[i].to]=dis[now.second]+nowcost;\r\n                    que.push(Pair(dis[e[i].to],e[i].to));\r\n                    pv[e[i].to]=now.second;\r\n                    pe[e[i].to]=i;\r\n                }\r\n            }\r\n        }\r\n        if (dis[t]==INF)\r\n            break;\r\n        for (int i=0;i<n;i++)\r\n            h[i]=min(h[i]+dis[i],INF);\r\n        int newflow=INF;\r\n        for (int x=t;x!=s;x=pv[x])\r\n            newflow=min(newflow,e[pe[x]].flow);\r\n        flow+=newflow;\r\n        cost+=newflow*h[t];\r\n        for (int x=t;x!=s;x=pv[x])\r\n            e[pe[x]].flow-=newflow,e[pe[x]^1].flow+=newflow;\r\n    }\r\n    return make_pair(flow,cost);\r\n}\r\nint main() \r\n{\r\n    int m, from, to;\r\n    scanf(\"%d%d%d%d\",&n,&m,&from,&to);\r\n    memset(e,-1,sizeof e);\r\n    memset(st,-1,sizeof st);\r\n    for(int i = 0; i < m; ++i) \r\n    {\r\n        int u,v,flow,cost;\r\n        scanf(\"%d%d%d%d\",&u,&v,&flow,&cost);\r\n        add(u,v,flow,cost);\r\n        add(v,u,0,-cost);\r\n    }\r\n    Pair ans = main_pro(from, to);\r\n    printf(\"%d %d\\n\",ans.first,ans.second);\r\n}\r\n\r\n```",
        "postTime": 1490865765,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u53d1\u4e86\u7f51\u7edc\u6d41\uff0c\u518d\u6765\u4e00\u53d1\u8d39\u7528\u6d41\n\n\u80fd\u505a\u8d39\u7528\u6d41\u7684\uff0c\u7f51\u7edc\u6d41\u81ea\u7136\u505a\u5f97\u6765\uff0c\u4f46\u5728\u8fd9\u8fd8\u662f~~\u4e0d\u8981\u8138\u7684~~\u5b89\u5229\u4e00\u4e0b\u81ea\u5df1\u7684\u535a\u5ba2\uff08\u91cc\u9762\u4e5f\u6709\u7f51\u7edc\u6d41\u7684\u9898\u89e3\uff09\uff1a\n\n[\u70b9\u6211](https://www.luogu.org/blog/71403/)\n\n\u626f\u8fdc\u4e86...\n\n\u8d39\u7528\u6d41\uff0c\u5c31\u662f\u5728\u4e0d\u70b8\u6c34\u7ba1\u7684\u60c5\u51b5\u4e0b\u6c42\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6700\u5c0f\u8d39\u7528\u3002\n\n\u6709\u6ca1\u6709\u60f3\u8d77\u4ec0\u4e48\uff1f\n\n\u601d\u8003\u4e00\u4e0b......\n\n\u5bf9\uff0c\u6700\u77ed\u8def\u5f84\uff01\n\n\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u7528\u5df2\u6b7b\u7684SPFA\u6c42\u51fa\u4e0d\u70b8\u6c34\u7ba1\u7684\u6700\u77ed\u8def\u5f84\uff08\u5f53\u7136\uff0c\u5b9e\u5728\u6709\u5fc3\u7406\u9634\u5f71\u7684\u53ef\u4ee5\u7528dijkstra\uff09\u3002\n\n\u5982\u679c\u4f60\u6700\u77ed\u8def\u5f84\u90fd\u4e0d\u4f1a\uff0c\u8fd8\u662f\u53bb [\u8fd9\u513f](https://www.luogu.org/problemnew/show/P3371)\n\u548c [\u8fd9\u513f](https://www.luogu.org/problemnew/show/P4779)\n\n\u7136\u540e\u518d\u4e00\u628a\u589e\u5e7f\u8def\u6c42\u51fa\u6700\u5927\u6d41\u4e0e\u6700\u5c0f\u8d39\u7528\u5c31\u597d\u4e86\uff08\u6211\u89c9\u5f97\u5f88OK\uff09\n\n\u732e\u4e0a\u672c\u849f\u84bb\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#define maxn 5050\n#define maxm 50005\n#define INF 0x3f3f3f3f\ninline int read(){\n\tint r=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){r=(r<<3)+(r<<1)+c-'0';c=getchar();}\n\treturn r*f;\n}\nint s,t,n,m,head[maxn],pre[maxn],dis[maxn],q[maxn];\nbool vis[maxn];\nint s_e;\nstruct E{\n\tint v,c,w,nxt;\n}e[maxm*2];\nstruct Max_fei{//\u672c\u4eba\u559c\u6b22\u7ed3\u6784\u4f53\n\tinline void a_e(int u,int v,int c,int w){\n\t\te[s_e]=(E){v,c,w,head[u]};\n\t\thead[u]=s_e++;\n\t}\n\tinline void add(int u,int v,int c,int w){\n\t\ta_e(u,v,c,w);\n\t\ta_e(v,u,0,-w);\n\t}\n\tinline bool spfa(){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tdis[i]=INF;\n\t\t\tvis[i]=false;\n\t\t}\n\t\tdis[s]=0;\n\t\tvis[s]=true;\n\t\tq[0]=s;\n\t\tint hd=0,tl=1;\n\t\twhile(hd^tl){\n\t\t\tint u=q[hd++];//\u5faa\u73af\u961f\u5217\n\t\t\thd%=maxn;\n\t\t\tfor(int i=head[u];i!=-1;i=e[i].nxt){\n\t\t\t\tint v=e[i].v;\n\t\t\t\tif(dis[v]>dis[u]+e[i].w&&e[i].c){//\u5224\u65ad\u6c34\u7ba1\u8fd8\u80fd\u8fd0\u6c34\u5417\n\t\t\t\t\tdis[v]=dis[u]+e[i].w;//\u66f4\u65b0\n\t\t\t\t\tpre[v]=i;//\u8bb0\u5f55\u4f4d\u7f6e\n\t\t\t\t\tif(vis[v])continue;//\u5982\u679c\u5728\u961f\u91cc\uff0c\u90a3\u5c31\u4e0d\u8fdb\u961f\n\t\t\t\t\tvis[v]=true;\n\t\t\t\t\tq[tl++]=v;\n\t\t\t\t\ttl%=maxn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvis[u]=false;\n\t\t}\n\t\tif(dis[t]==INF)return false;\n\t\treturn true;\n\t}\n\tinline int min(int a,int b){//\u539f\u8c05\u6211\u7684\u624b\u5199min\n\t\treturn a<b?a:b;\n\t}\n\tinline int end(int &flow){//flow\u6c42\u6700\u5927\u6d41\n\t\tint p,u,Min=1e9,ans=0;\n\t\tfor(u=t;u!=s;u=e[p^1].v){//\u56e0\u4e3a\u5f00\u59cb\u503c\u4e3a0\uff0c\u53ef\u4ee5\u7528xor\u6765\u627e\u53cd\u8fb9\n\t\t\tp=pre[u];//\u5f80\u524d\u627e\n\t\t\tMin=min(Min,e[p].c);//\u627e\u5168\u90e8\u7ecf\u8fc7\u6c34\u7ba1\u90fd\u80fd\u6d41\u8fc7\u7684\u6700\u5927\u6d41\n            \n\t\t}\n\t\tfor(u=t;u!=s;u=e[p^1].v){\n\t\t\tp=pre[u];\n\t\t\te[p].c-=Min;\n\t\t\te[p^1].c+=Min;\n\t\t\tans+=e[p].w*Min;//\u52a0\u8d39\u7528\n\t\t}\n\t\tflow+=Min;//\u52a0\u6700\u5927\u6d41\n\t\treturn ans;\n\t}\n\tinline int solve(int &flow){\n\t\tint ans=0;\n\t\twhile(spfa()){\n\t\t\tans+=end(flow);\n\t\t}\n\t\treturn ans;\n\t}\n}Flow;\ninline void work(){\n\tn=read();m=read();\n\ts=read();t=read();\n\tfor(int i=1;i<=n;i++)head[i]=-1;//\u521d\u59cb\u503c\u4e3a-1\uff0c\u65b9\u4fbfxor\n\tfor(int i=1;i<=m;i++){\n\t\tint u=read(),v=read(),c=read(),w=read();\n\t\tFlow.add(u,v,c,w);\n\t}\n\tint flow=0;\n\tint ans=Flow.solve(flow);\n\tprintf(\"%d %d\\n\",flow,ans);\n}\nint main(){\n\twork();\n\treturn 0;\n}\n```\n\u5230\u6b64\u7ed3\u675f~~\uff08\u5077\u5077\u6492\u82b1\uff09~~",
        "postTime": 1548205892,
        "uid": 71403,
        "name": "\u4e00\u53f6\u77e5\u79cb\u3002",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u611f\u8c22 @WuHongxun \u795e\u725b\u4ecb\u7ecd\u539f\u59cb\u5bf9\u5076\u7b97\u6cd5  \n\u6309\u7167[TopCoder\u4e0a\u7684\u8d44\u6599](https://www.topcoder.com/community/data-science/data-science-tutorials/minimum-cost-flow-part-two-algorithms/)\uff0c\u697c\u4e0b\u7684\u539f\u59cb\u5bf9\u5076\u5e76\u4e0d\u662f\u5f88\u89c4\u8303\u5462\uff0c\u56e0\u4e3a\u53ea\u6709SPFA= =  \n\u6b63\u89c4\u7684\u539f\u59cb\u5bf9\u5076\u662f\u5148\u7528Bellman-Ford\u7b97\u6cd5\u6765\u6784\u9020\u8ddd\u79bb\u9876\u6807\uff0c\u518d\u8fdb\u884cReduce\u64cd\u4f5c\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728Reduce\u64cd\u4f5c\u540e\u7684\u6bcf\u6761\u8fb9\u8d39\u7528\u4e00\u5b9a\u975e\u8d1f\u3002    \n\u90a3\u4e48\u5c31\u53ef\u4ee5\u6109\u5feb\u7684Dijkstra\u5566\uff0c\u6211\u4eec\u6bcf\u6b21\u8fdb\u884c\u201cDijkstra-Reduce-\u591a\u8def\u589e\u5e7f\u201d\u7684\u5faa\u73af\uff0c\u76f4\u5230\u65e0\u6cd5\u589e\u5e7f\u4e3a\u6b62\u3002   \n\u9644\u9001\u4e00\u4e2a\u5404\u7c7b\u8d39\u7528\u6d41\u7b97\u6cd5\u6027\u80fd\u6d4b\u8bd5\u8868\u683c\uff1a\u5176\u4e2d\u7684\u201cBinary Heap with decrease_key\u201d\u662f\u624b\u5199\u7684\uff0c\u5176\u4ed6\u7684\u90fd\u662fSTL / pb_ds\u3002\n\n| Algorithm                                | Accepted | Time   |\n| ---------------------------------------- | -------- | ------ |\n| Dijkstra+Pairing Heap+Primal Dual(O2)    | Yes      | 820ms  |\n| Dijkstra+std::priority_queue+Primal Dual(O2) | Yes      | 832ms  |\n| Dijkstra+Binary Heap with decrease_key<br />+Primal Dual(O2) | Yes      | 888ms  |\n| Dijkstra+Pairing Heap+Primal Dual        | Yes      | 1236ms |\n| Dijkstra+Binary Heap with decrease_key+Primal Dual | Yes      | 1528ms |\n| SPFA+Primal Dual(O2)                     | Yes      | 1548ms |\n| SPFA+Edmond Karp                         | Yes      | 1596ms |\n| SPFA+Primal Dual                         | Yes      | 2184ms |\n| Dijkstra+std::priority_queue+Primal Dual | No       | 3036ms |\n| SPFA+SLF+Primal Dual(O2)                 | No       | 3204ms |\n| SPFA+SLF+Primal Dual                     | No       | 4740ms |\n\nDijkstra + STL\u5806\u7248\u672c\u7684\u539f\u59cb\u5bf9\u5076\u5728\u5f00O2\u7684\u60c5\u51b5\u4e0b\u662f\u5f88\u4f18\u79c0\u7684\uff0c\u5f53\u7136\uff0c\u5982\u679c\u7528pb_ds\u7684\u914d\u5bf9\u5806\uff0c\u5f00\u4e0d\u5f00O2\u901f\u5ea6\u90fd\u5f88\u4e0d\u9519\u3002\u624b\u5199\u4e8c\u53c9\u5806\u6027\u80fd\u5e76\u4e0d\u6bd4STL\u597d\u591a\u5c11\u3002\n\n**UPD-20180321:\u539f\u6765\u7684\u4ee3\u7801\u6709\u70b9\u95ee\u9898\uff0c\u628a\u6539\u8fc7\u7684\u53d1\u4e0a\u6765**\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n#include <bits/extc++.h>\nusing namespace std;\n\ntypedef long long int64;\ntypedef pair<int64, int> HeapNode;\ntypedef __gnu_pbds::priority_queue<HeapNode, greater<HeapNode>, __gnu_pbds::pairing_heap_tag>\n        pairing_heap;\n\nstruct Edge {\n    int u, v;\n    int64 flow, cap, cost;\n    int next;\n};\n\nconst int MAXN = 5000, MAXM = 50000;\nconst int64 LLINF = 0x3f3f3f3f3f3f3f3fLL;\n\nint e_ptr = 1, s, t, head[MAXN+10]; Edge E[(MAXM+10)<<1];\nint64 dist[MAXN+10], MaxFlow, MinCost, delta; \nint inq[MAXN+10], done[MAXN+10], vis[MAXN+10];\npairing_heap pq; pairing_heap :: point_iterator it[MAXN+10];\n\nvoid AddEdge(int u, int v, int64 cap, int64 cost) {\n    E[++e_ptr] = (Edge) { u, v, 0, cap, cost, head[u] }; head[u] = e_ptr;\n    E[++e_ptr] = (Edge) { v, u, 0,  0, -cost, head[v] }; head[v] = e_ptr;\n}\n\nvoid Reduce() {\n    for(int i = 2; i <= e_ptr; i++) \n        E[i].cost += dist[E[i].v] - dist[E[i].u];\n    delta += dist[s];\n}\n\nbool BellmanFord() {\n    queue<int> Q;\n    memset(dist, 0x3f, sizeof(dist));\n    dist[t] = 0; Q.push(t); inq[t] = true;\n    while(!Q.empty()) {\n        int u = Q.front(); Q.pop(); inq[u] = false;\n        for(int j=head[u]; j; j=E[j].next) {\n            int v = E[j].v; int64 f = E[j^1].flow, c = E[j^1].cap, len = E[j^1].cost;\n            if(f < c && dist[v] > dist[u] + len) {\n                dist[v] = dist[u] + len;\n                if(!inq[v]) {\n                    inq[v] = true;\n                    Q.push(v);\n                }\n            }\n        }\n    }\n    return dist[s] != LLINF;\n}\n\nbool Dijkstra() {\n    memset(dist, 0x3f, sizeof(dist));\n    memset(it, 0, sizeof(it));\n    dist[t] = 0; it[t] = pq.push(make_pair(dist[t], t));\n    while(!pq.empty()) {\n        HeapNode p = pq.top(); pq.pop();\n        int u = p.second;\n        for(int j=head[u]; j; j=E[j].next) {\n            int v = E[j].v; int64 f = E[j^1].flow, c = E[j^1].cap, len = E[j^1].cost;\n            if(f < c && dist[v] > dist[u] + len) {\n                dist[v] = dist[u] + len;\n                if(it[v] == NULL) \n                \tit[v] = pq.push(make_pair(dist[v], v));\n                else\n                \tpq.modify(it[v], make_pair(dist[v], v));\n            }\n        }\n    }\n    return dist[s] != LLINF;\n}\n\nint64 DFS(int u, int64 flow) {\n    if(u == t || flow == 0) return flow;\n    vis[u] = true; // differ from dinic\n    int64 res = flow;\n    for(int j=head[u]; j; j=E[j].next) {\n        int v = E[j].v; int64 f = E[j].flow, c = E[j].cap, len = E[j].cost;\n        if(!vis[v] && f < c && len == 0) { // not `dist[v] == dist[u]` ! they do not equal ! \n            int64 tmp = DFS(v, min(res, c-f)); // len = 0 <=> on the shortest path\n            E[j].flow += tmp;\n            E[j^1].flow -= tmp;\n            res -= tmp;\n        }\n    }\n    return flow - res;\n}\n\nvoid Augment() {\n    int64 CurFlow = 0;\n    while(memset(vis, 0, sizeof(vis)), \n    \t(CurFlow = DFS(s, LLINF))) {\n        MaxFlow += CurFlow;\n        MinCost += CurFlow * delta;\n    }\n}\n\nvoid PrimalDual() {\n    if(!BellmanFord()) return;\n    Reduce(); Augment();\n    while(Dijkstra()) {\n        Reduce(); Augment();\n    }\n}\n\nint main() {\n    int n, m, u, v, cap, cost;\n    scanf(\"%d%d%d%d\", &n, &m, &s, &t);\n    for(int i=1; i<=m; i++) {\n        scanf(\"%d%d%d%d\", &u, &v, &cap, &cost);\n        AddEdge(u, v, cap, cost);\n    }\n    PrimalDual();\n    printf(\"%lld %lld\", MaxFlow, MinCost);\n    return 0;\n}\n```",
        "postTime": 1519829387,
        "uid": 23865,
        "name": "panda_2134",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "### \u3010\u7528\u9014\u3011\n- \u6bcf\u4e00\u6761\u8fb9\u589e\u52a0\u4e00\u4e2a\u53c2\u6570\uff1a\u6bcf\u4e2a\u5355\u4f4d\u6d41\u91cf\u7684\u8d39\u7528\uff1b\u6c42\u89e3\u5728\u6700\u5927\u6d41\u7684\u60c5\u51b5\u4e0b\u6700\u5c0f\u7684\u8d39\u7528\u3002\n\n### \u3010\u4e3b\u8981\u601d\u8def\u3011\n- EK\u7b97\u6cd5\uff0c\u5373SPFA+\u589e\u5e7f\u8def\n- \u5728\u56fe\u4e0a _**\u4ee5\u8d39\u7528\u4e3a\u8fb9\u6743**_ \u8dd1SPFA\uff1a\u5728\u66f4\u65b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u66f4\u65b0\u6210\u529f\uff0c\u90a3\u4e48\u987a\u4fbf\u8fdb\u884c\u5f80\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5c3d\u53ef\u80fd\u591a\u5730\u6d41\u6c34\uff0c\u5e76\u4e14**\u628a\u6d41\u6c34\u7684\u8def\u5f84\u8bb0\u5f55\u4e0b\u6765**\uff08pre[v]=u->v\u7684\u8fb9\uff09\u3002\n- \u8dd1\u5b8cSPFA\u540e\uff0c\u987a\u7740\u4e4b\u524d\u8bb0\u5f55\u7684\u8def\u5f84\u4ece\u6c47\u70b9\u6eaf\u56de\u5230\u6e90\u70b9\uff0c\u5e76\u4e14\u8fdb\u884c\u589e\u5e7f\u8def\u3002\n- \u6700\u5c0f\u7684\u603b\u8d39\u7528\u5c31\u662f\u7d2f\u8ba1 (\u5f53\u524d\u8def\u5f84\u6240\u6d41\u603b\u91cf) x (s\u5230t\u7684\u6700\u77ed\u8def\u5f84)\n\n### \u3010\u53c2\u8003\u7a0b\u5e8f\u3011\n```cpp\n#include<cstdio>\n#include<queue>\n#include<iostream>\n#include<cstring>\nusing namespace std;\n\n#define INF 0x3f3f3f3f\nint cur=1,n,m,s,t,mcost,mflow;\nint head[5005],dis[5005],flow[5005],pre[5005];\nstruct EDGE{\n    int t,next,w,f;\n}e[100005];\nvoid add(int a,int b,int w,int f)\n{\n    cur++;e[cur].t=b;e[cur].next=head[a];e[cur].w=w;e[cur].f=f;head[a]=cur;\n    cur++;e[cur].t=a;e[cur].next=head[b];e[cur].w=0;e[cur].f=-f;head[b]=cur;\n}\n\nqueue < int > q;\nbool vis[5005];\nbool SPFA(int s,int t)\n{\n    memset(dis,INF,sizeof dis);\n    memset(vis,0,sizeof vis);\n    dis[s]=0;\n    vis[s]=1;\n    flow[s]=INF;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front();q.pop();\n        vis[u]=false;\n        for (int h=head[u];h!=-1;h=e[h].next)\n        {\n            int v=e[h].t,f=e[h].f;\n            if (e[h].w&&dis[u]+f<dis[v])//\u5982\u679c\u8fb9\u8fd8\u6709\u6d41\u91cf\u5c31\u5c1d\u8bd5\u66f4\u65b0\n            {\n                dis[v]=dis[u]+f;//\u66f4\u65b0\u6700\u77ed\u8def\u5f84\n                flow[v]=min(flow[u],e[h].w);//\u5c3d\u53ef\u80fd\u5730\u6d41\u6c34\n                pre[v]=h;//\u8bb0\u5f55\u8def\u5f84\n                if (!vis[v])\n                {\n                    vis[v]=true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    return dis[t]!=INF;\n}\n\nvoid Update(int s,int t)\n{\n    int x=t;\n    while (x!=s)\n    {\n        int i=pre[x];\n        e[i].w-=flow[t];\n        e[i^1].w+=flow[t];\n        x=e[i^1].t;\n    }//\u6cbf\u7740\u8bb0\u5f55\u4e0b\u7684\u8def\u5f84\u5e76\u8fdb\u884c\u589e\u5e7f\u8def\n    mflow+=flow[t];\n    mcost+=flow[t]*dis[t];//\u7d2f\u8ba1\u8d39\u7528\n}\nvoid E_K(int s,int t)\n{\n    while (SPFA(s,t))//\u5f53\u8fd8\u6709\u591a\u4f59\u6d41\u91cf\u65f6\n        Update(s,t);\n}\n\nint main()\n{\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    memset(head,-1,sizeof head);\n    for (int i=1;i<=m;i++)\n    {\n        int a,b,w,f;\n        scanf(\"%d%d%d%d\",&a,&b,&w,&f);\n        add(a,b,w,f);\n    }\n    E_K(s,t);\n    printf(\"%d %d\\n\",mflow,mcost);\n    return 0;\n} \n\n```",
        "postTime": 1532613340,
        "uid": 12349,
        "name": "FREEH",
        "ccfLevel": 6,
        "title": "EK-SPFA\u8d39\u7528\u6d41 \u603b\u7ed3+\u6a21\u677f\u2014\u2014\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u6a21\u677f\u9898\u597d\u554a\n\n\u7ed9\u51fa\u4e00\u4e2a\u5bb9\u91cf\u7f51\u7edc\uff0c\u90a3\u4ed6\u7684\u6700\u5927\u6d41\u4e00\u5b9a\u662f\u4e00\u4e2a\u5b9a\u503c\uff08\u5373\u4f7f\u662f\u6709\u591a\u4e2a\u4e00\u6837\u7684\u6700\u5927\u503c\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4ece\u5f00\u59cb\u7684\u53ef\u884c\u6d41\u5f00\u59cb\u589e\u5e7f\u65f6\uff0c\u6700\u7ec8\u7684\u589e\u5e7f\u91cf\u662f\u4e00\u5b9a\u7684\u3002\n\n\u6240\u4ee5\u4e3a\u4e86\u6ee1\u8db3\u6700\u5c0f\u8d39\u7528\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u627e\u6700\u5c0f\u8d39\u7528\u7684\u589e\u5e7f\u8def\u5373\u53ef\uff0c\u76f4\u5230\u6d41\u91cf\u4e3a\u6700\u5927\u503c\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u4ec5\u4ec5\u662f\u5728\u6c42\u589e\u5e7f\u8def\u65f6\u5148\u8003\u8651\u8d39\u7528\u6700\u5c0f\u7684\u589e\u5e7f\u8def\uff0c\u5176\u4ed6\u601d\u60f3\u548cEK\u601d\u60f3\u4e00\u6837\u3002\n\n\u6211\u4eec\u5b66\u8fc7SPFA\u6c42\u6700\u77ed\u8def\u7b97\u6cd5\uff08bellman-ford\u7684\u961f\u5217\u4f18\u5316\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5f27\u7684\u8d39\u7528\u770b\u505a\u662f\u8def\u5f84\u957f\u5ea6\uff0c\u5373\u53ef\u8f6c\u5316\u4e3a\u6c42\u6700\u77ed\u8def\u7684\u95ee\u9898\u4e86\u3002\u53ea\u9700\u8981\u6240\u8d70\u7684\u6700\u77ed\u8def\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u5373\u53ef\uff1a1\u5269\u4f59\u6d41\u91cf\u4e0d\u4e3a0,2\u8def\u5f84\u53d8\u77edd[v]>d[u]+cost< u,v> \u3002\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>  \n#include <queue>  \n#include <string.h>  \n#include <cstdio>\nusing namespace std;  \nint maxData = 0x7fffffff; \nqueue<int> dl;\nint head[5001],cost[100001],net[100001],to[100001],cap[100001];//cost\u4e3a\u8d39\u7528\u6570\u7ec4\uff0ccap\u4e3a\u5bb9\u91cf\nint cnt=1;\nvoid add(int x,int y,int c,int z)\n{\n    to[++cnt]=y;\n    cost[cnt]=z;\n    cap[cnt]=c;\n    net[cnt]=head[x];\n    head[x]=cnt;\n}\nint flow[5001];\nint pre[5001];//\u524d\u9a71\u8282\u70b9\nint xb[5001];//\u8bb0\u5f55\u4e0b\u6807\uff0c\u4fbf\u4e8e\u4fee\u6539\u5bb9\u91cf\nint n,m;\nint mflow=0;//\u6700\u5927\u6d41\nint mcost=0;//\u6700\u5c0f\u8d39\u7528\nint dis[5001];//\u8bb0\u5f55\u4ece\u6e90\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u6700\u5c0f\u7684\u8d39\u7528\u503c\uff0c\u5b66\u8fc7\u6700\u5c0f\u8def\u7684\u90fd\u61c2\nint f[5001];//\u6807\u8bb0\u662f\u5426\u5728\u961f\u5217\u4e2d\nint BFS(int s,int t)\n{\n    memset(dis,127,sizeof(dis));//\u8d4b\u521d\u503c\u6700\u5927\u503c\n    memset(f,0,sizeof(f));//\u8d4b\u503c\u4e3a0\n    int INF=dis[0];\n    while(!dl.empty())\n     dl.pop();\n    for(int i=1;i<=n;i++)\n     pre[i]=-1;//\u6e05\u7a7a\u524d\u9a71\u8282\u70b9\n    f[s]=1;\n    dis[s]=0;\n    pre[s]=0;\n    flow[s]=maxData;\n    dl.push(s);\n    while(!dl.empty())\n    {\n        int dd=dl.front();\n        dl.pop();\n        f[dd]=0;\n        for(int i=head[dd];i;i=net[i])\n        {\n            int tmp=to[i];\n            if(cap[i]>0&&dis[tmp]>dis[dd]+cost[i])//\u677e\u5f1b\u64cd\u4f5c\n           {\n              dis[tmp]=dis[dd]+cost[i];\n              pre[tmp]=dd;\n              xb[tmp]=i;\n              flow[tmp]=min(flow[dd],cap[i]);\n              if(!f[tmp]) f[tmp]=1,dl.push(tmp);\n           }\n        }\n    }\n    if(dis[t]>=INF) return 0;//\u6210\u529f\u627e\u5230\u4e86\u589e\u5e7f\u8def\n    return 1;\n}\nvoid max_flow(int s,int t)\n{\n    while(BFS(s,t))\n    {\n        int k=t;\n        while(k!=s)\n         {\n             cap[xb[k]]-=flow[t];\n             cap[xb[k]^1]+=flow[t];\n             k=pre[k];\n         } \n        mflow+=flow[t];\n        mcost+=flow[t]*dis[t];//\u6d41\u91cf\u4e58\u4ee5\u6700\u5c0f\u5355\u4f4d\u6d41\u91cf\u7684\u8d39\u7528\u5373\u4e3a\u6700\u5c0f\u8d39\u7528\n    }\n}\nint main()\n{\n    int s,t;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=m;i++)\n     {\n         int x,y,c,d;\n         scanf(\"%d%d%d%d\",&x,&y,&c,&d);\n         add(x,y,c,d);\n         add(y,x,0,-d);//\u5efa\u7acb\u53cd\u5411\u8fb9\uff0ccost\u7684\u503c\u4e3a\u6b63\u5411\u8fb9\u7684\u8d1f\u503c\n     }\n    max_flow(s,t);\n    printf(\"%d %d\",mflow,mcost);//\u8f93\u51fa\u6700\u5927\u6d41\u4e0e\u6700\u5c0f\u8d39\u7528\n}\n```",
        "postTime": 1493372442,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "# \u524d\u8a00\n\n\u672c\u6587\u53d1\u8868\u4e8e\uff1a\n\n- \u4e2a\u4eba\u535a\u5ba2\uff1a[\u94fe\u63a5](https://2018haha.github.io)\n- \u6d1b\u8c37\u535a\u5ba2\uff1a[\u94fe\u63a5](https://www.luogu.org/blog/2018--haha/solution-p3381 )\n\n\u7f51\u7edc\u6d41\u662fOI\u4e2d\u6bd4\u8f83\u5e38\u51fa\u73b0\u7684\u7b97\u6cd5\uff0c\u800c\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u662f\u5176\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u4e4b\u4e00\uff0c\u9605\u8bfb\u672c\u6587\u524d\uff0c\u8bf7\u786e\u4fdd\u638c\u63e1\u4e86\u7f51\u7edc\u6700\u5927\u6d41\u7684Dinic\u7684\u6c42\u6cd5\uff0c\u8be6\u89c1[\u7f51\u7edc\u6700\u5927\u6d41](https://2018haha.github.io/2019/06/27/%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81/#more )\n\n# \u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u7b97\u6cd5\n\n## \u7b80\u4ecb\n\n\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\uff08\u4ee5\u4e0b\u7b80\u79f0\u8d39\u7528\u6d41\uff09\uff0c\u662f\u5728\u7f51\u7edc\u6700\u5927\u6d41\u7684\u57fa\u7840\u4e0a\uff0c\u7ed9\u6bcf\u4e2a\u8fb9\u589e\u52a0\u4e86\u53e6\u4e00\u4e2a\u503c\u2014\u2014\u8d39\u7528\uff0c\u4ee3\u8868\u6bcf\u6d41\u8fc7\u4e00\u4e2a\u5355\u4f4d\u7684\u6d41\u91cf\uff0c\u5c31\u4f1a\u8017\u8d39\u8fd9\u4e9b\u8d39\u7528\u3002\u800c\u8d39\u7528\u6d41\u7b97\u6cd5\uff0c\u5c31\u662f\u5728\u6c42\u6700\u5927\u6d41\u7684\u540c\u65f6\uff0c\u627e\u51fa\u6240\u82b1\u8d39\u7528\u6700\u5c0f\u7684\u65b9\u6848\uff0c\u5e76\u6c42\u51fa\u8fd9\u4e2a\u6700\u5c0f\u8d39\u7528\u3002\n\n## \u5b9e\u73b0\u65b9\u6cd5\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u56fe\uff0c\u5b83\u7684\u6700\u5927\u6d41\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c\uff0c\u4f46\u662f\u6709\u5f88\u591a\u65b9\u6848\uff0c\u800c\u6c42\u8d39\u7528\u6700\u5c0f\u7684\u8d70\u6cd5\uff0c\u4fbf\u53ef\u4ee5\u5229\u7528**\u6700\u77ed\u8def\u7b97\u6cd5**\uff0c\u4ee5\u8d39\u7528\u4e3a\u6700\u77ed\u8def\u7684\u8fb9\u6743\u3002\n\n\u601d\u8003\u4e00\u4e0b\uff0cDinic\u4e2d\u7684\u53cd\u8fb9\u601d\u60f3\u5b9e\u9645\u4e0a\u662f\u8ba9\u7a0b\u5e8f\u53ef\u4ee5\u6cbf\u7740\u53cd\u8fb9\u8dd1\u56de\u53bb\uff0c\u8fbe\u5230\u53cd\u6094\u76ee\u7684\u3002\u6240\u4ee5\u8d39\u7528\u6d41\u4e2d\uff0c\u53cd\u8fb9\u7684\u8d39\u7528\u9700\u8981\u8bbe\u7f6e\u6210\u6b63\u8fb9\u7684\u76f8\u53cd\u6570\uff0c\u4fdd\u8bc1\u5728\u8fd4\u56de\u65f6\u8d39\u7528\u4e5f\u4f1a\u8fd8\u56de\u6765\u3002\n\n\u7531\u4e8e\u53cd\u8fb9\u6709\u8d1f\u8fb9\u6743\uff0c\u6240\u4ee5\u8981\u7528~~\u5df2\u6b7b\u7684~~SPFA\n\n\u628a$Dinic$\u4e2d\u7684$Bfs$\u6539\u4e3a$SPFA$\u5373\u53ef,\u6bcf\u6b21\u627e\u6b8b\u91cf\u56fe\u4e2d$S-T$\u7684\u6700\u77ed\u8def\u5f84\uff08\u8d39\u7528\u4f5c\u4e3a\u8fb9\u6743\uff09\uff0c\u5e76\u6309\u7167$Dinic$\u7684\u65b9\u5f0f\u589e\u5e7f\u8fd9\u6761\u8def\u5f84\u3002\n\n$Dinic$\u589e\u5e7f\u65f6\u9700\u8981\u628a\u6b8b\u91cf\u56fe\u4e2d\u6d41\u91cf\u66f4\u6539\uff0c\u6240\u4ee5\u8981\u7528\u80fd\u8bb0\u5f55\u8def\u5f84\u7684$SPFA$\n\n\n### \u5efa\u56fe\n\n```cpp\nint head[N],to[N],next[N],f[N],c[N];//f\u662f\u5bb9\u91cf\uff0cc\u662f\u8d39\u7528\nint cnt=1;\nvoid Add(int x,int y,int z,int cost)\n{\n    to[++cnt]=y;\n    f[cnt]=z;\n    c[cnt]=cost;\n    next[cnt]=head[x];\n    head[x]=cnt;\n}\n```\n\n### SPFA\n\n```cpp\nint dis[N];/*spfa\u7684\u8ddd\u79bb\u6570\u7ec4*/\nint flow[N];/*\u6e90\u70b9\u5230\u6b64\u5904\u6d41\u91cf*/\nint vis[N];\nint pre[N];//\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71 \nint last[N];\nbool Spfa() \n{\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(flow,0x7f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tqueue<int> q;\n\tq.push(S);\n\tvis[S]=1,dis[S]=0;\n\tpre[T]=-1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=next[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(f[i]>0 && dis[v]>dis[u]+c[i])//\u6709\u6b8b\u91cf\uff0c\u80fd\u677e\u5f1b\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+c[i];//\u66f4\u65b0\u8ddd\u79bb\n\t\t\t\tpre[v]=u;//SPFA\u8bb0\u5f55\u524d\u9a71\n\t\t\t\tlast[v]=i;//\u8bb0\u5f55\u8fb9\u7684\u7f16\u53f7\uff0c\u4fbf\u4e8e\u589e\u5e7f\u65f6\u66f4\u6539\u8fb9\u6743 \n\t\t\t\tflow[v]=min(flow[u],f[i]);\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ~pre[T];\n}\n```\n\n\u4e3b\u51fd\u6570\n\n```cpp\nint Flow,Cost;\nvoid Mcmf()\n{\n\twhile(Spfa())\n\t{\n\t\tint u=T;\n\t\tFlow+=flow[T];\n\t\tCost+=flow[T]*dis[T];\n\t\twhile(u!=S)//\u904d\u5386\u8fd9\u6b21\u7684\u589e\u5e7f\u8def\uff08\u6700\u77ed\u8def\uff09 \n\t\t{\n\t\t\tf[last[u]]-=flow[T];//\u66f4\u65b0\u8fb9\u6743 \n\t\t\tf[last[u]^1]+=flow[T];\n\t\t\tu=pre[u];\n\t\t}\n\t}\n}\n```\n\n### \u603b\u7ed3\n\n\u8fd9\u79cd\u8d39\u7528\u6d41\u7b97\u6cd5\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u589e\u5e7f\u65f6\u4f18\u5148\u8003\u8651\u8d39\u7528\uff08\u7528\u6700\u77ed\u8defSPFA\u5b9e\u73b0\uff09\uff0c\u4fdd\u8bc1\u8d39\u7528\u6700\u5c0f\uff08\u53cd\u6b63\u7531\u4e8e\u53cd\u8fb9\u7684\u5b58\u5728\uff0cDinic\u600e\u4e48\u6d41\u5230\u6700\u540e\u90fd\u80fd\u6d41\u51fa\u6700\u5927\u6d41 \uff09\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#define next adjagag\nusing namespace std; \nconst int N=1000010;\n\nint head[N],to[N],next[N],f[N],c[N];\nint cnt=1;\nint n,m,S,T;\nvoid Add(int x,int y,int z,int cost)\n{\n    to[++cnt]=y;\n    f[cnt]=z;\n    c[cnt]=cost;\n    next[cnt]=head[x];\n    head[x]=cnt;\n}\n\nint dis[N];\nint flow[N];\nint vis[N];\nint pre[N];\nint last[N];\nbool Spfa() \n{\n\tmemset(dis,0x7f,sizeof(dis));\n\tmemset(flow,0x7f,sizeof(flow));\n\tmemset(vis,0,sizeof(vis));\n\tqueue<int> q;\n\tq.push(S);\n\tvis[S]=1,dis[S]=0;\n\tpre[T]=-1;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=next[i])\n\t\t{\n\t\t\tint v=to[i];\n\t\t\tif(f[i]>0 && dis[v]>dis[u]+c[i])\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+c[i];\n\t\t\t\tpre[v]=u;\n\t\t\t\tlast[v]=i;\n\t\t\t\tflow[v]=min(flow[u],f[i]);\n\t\t\t\tif(!vis[v])\n\t\t\t\t{\n\t\t\t\t\tvis[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ~pre[T];\n}\n\nint Flow,Cost;\nvoid Mcmf()\n{\n\twhile(Spfa())\n\t{\n\t\tint u=T;\n\t\tFlow+=flow[T];\n\t\tCost+=flow[T]*dis[T];\n\t\twhile(u!=S)\n\t\t{\n\t\t\tf[last[u]]-=flow[T];\n\t\t\tf[last[u]^1]+=flow[T];\n\t\t\tu=pre[u];\n\t\t}\n\t}\n}\n\nint main()\n{\n    scanf(\"%d %d %d %d\",&n,&m,&S,&T);\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z,c;\n        scanf(\"%d %d %d %d\",&x,&y,&z,&c);\n        Add(x,y,z,c);\n        Add(y,x,0,-c);\n    }\n    Mcmf();\n    printf(\"%d %d\\n\",Flow,Cost);\n    return 0;\n}\n```",
        "postTime": 1562304389,
        "uid": 113401,
        "name": "2018\u4e00\u7ef4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709pascal\uff0c\u5c31\u6765\u4e00\u6ce2\u5427~\n\n\u7ed9p\u515a\u6765\u7684\u662f\u4e00\u4e2amcmf\u7684\u505a\u6cd5\uff0c\n\n\u5176\u5b9emcmf\u5c31\u662f\u628adinic\u7684dfs/bfs\u90e8\u5206\u6362\u6210\u6700\u77ed\u8def\uff08dijkstra/spfa\uff09\u7136\u540e\u505a\u5c31\u884c\u4e86~\n\n\u4e0b\u9644\u4ee3\u7801\uff0c\u53cc\u5411\u5efa\u8fb9spfa\u548cdijkstra\n### P3381SPFA.pas \n1920ms \uff08O2 1730ms \uff09\n```pascal\nvar\n        n,m,s,e,i,head,tail,tot,v,x,y,z,o:longint;\n        ans,bns:longint;\n        q:array[0..800000] of longint;\n        dis,flow:array[0..400000] of longint;\n        w,ne,t,f,hy,l,he:array[0..400000] of longint;\nfunction min(x,y:longint):longint;\nbegin\n        if x<y then exit(x) else exit(y);\nend;\nprocedure link(x,y,z,o:longint);\nbegin\n        inc(tot);\n        ne[tot]:=he[x];\n        he[x]:=tot;\n        t[tot]:=y;\n        w[tot]:=z;\n        f[tot]:=o;\nend;\nfunction spfa(x,y:longint):boolean;\nvar\n        i,v:longint;\nbegin\n        for i:=1 to n do begin\n                dis[i]:=maxlongint>>1;\n                flow[i]:=maxlongint>>1;\n                q[i]:=0;\n                l[i]:=0;\n                hy[i]:=0;\n        end;\n        head:=0;\n        tail:=1;\n        q[1]:=x;\n        dis[x]:=0;\n        repeat\n                inc(head);\n                v:=he[q[head]];\n                while v<>-1 do begin\n                        if (f[v]>0) and (dis[t[v]]>dis[q[head]]+w[v]) then begin\n                                dis[t[v]]:=dis[q[head]]+w[v];\n                                flow[t[v]]:=min(f[v],flow[q[head]]);\n                                l[t[v]]:=v;\n                                hy[t[v]]:=q[head];\n                                inc(tail);\n                                q[tail]:=t[v];\n                        end;\n                        v:=ne[v];\n                end;\n        until head>tail;\n        if dis[y]=maxlongint>>1 then exit(false) else exit(true);\nend;\nprocedure mcfa(x,y:longint);\nvar\n        maxf:int64;\n        v,i:longint;\nbegin\n        while spfa(x,y) do begin\n                maxf:=flow[y];\n                ans:=ans+maxf*(dis[y]);\n                bns:=bns+maxf;\n                v:=y;\n                while v<>x do begin\n                        f[l[v]]:=f[l[v]]-maxf;\n                        f[l[v] xor 1]:=f[l[v] xor 1]+maxf;\n                        v:=hy[v];\n                end;\n        end;\nend;\nbegin\n        readln(n,m,s,e);\n        for i:=1 to n do he[i]:=-1;//\u521d\u59cb\u5316\n        tot:=-1;\n        for i:=1 to m do begin\n                readln(x,y,z,o);\n                link(x,y,o,z);//\u5efa\u8fb9\n                link(y,x,-o,0);\n        end;\n        mcfa(s,e);\n        writeln(bns,' ',ans);\nend.\n```\ndijkstra\u4e5f\u53ef\u4ee5\u505a\uff0c\u611f\u8c22@ Lance1ot\u7ed9\u6211\u7684\u601d\u8def~~\n\u5c31\u662f\u8ba9\u8d1f\u6743\u503c\u52a0\u4e0a\u4e00\u4e2a\u5f88\u5927\u5f88\u5927\u7684\u6570\uff08\u7ecf\u6d4b\u8bd5\uff0c\u4e00\u822c\u5f00maxlongint*10000\u5c31\u591f\u4e86\uff09\u53d8\u6210\u6b63\u6743\u503c\uff08\u4e0b\u9762df\u6570\u7ec4\u7684\u4f5c\u7528\uff09\n### P3381dijkstra.pas\n719ms \uff08O2 553ms\uff09\n```pascal\nvar\n        n,m,s,e,i,j,head,tot,v,x,y,z,o:longint;\n        ans,bns:int64;\n        heap,num,cj,dis,flow,df:array[0..400000] of int64;\n        w,ne,t,f,hy,l,he:array[0..400000] of longint;\nfunction min(x,y:int64):int64;\nbegin\n        if x<y then exit(x) else exit(y);\nend;\nfunction swap(var x,y:int64):int64;\nvar\n        t:int64;\nbegin\n        t:=x;\n        x:=y;\n        y:=t;\nend;\nprocedure link(x,y,z,o:longint);\nbegin\n        inc(tot);\n        ne[tot]:=he[x];\n        he[x]:=tot;\n        t[tot]:=y;\n        w[tot]:=z;\n        f[tot]:=o;\nend;\nprocedure insert(a,x:int64);\nvar\n        i:int64;\nbegin\n        if cj[x]<>0 then begin\n                i:=cj[x];\n                heap[i]:=a;\n        end else begin\n                inc(heap[0]);\n                i:=heap[0];\n                heap[i]:=a;\n                num[i]:=x;\n                cj[x]:=i;\n        end;\n        while (i>>1>0) and (heap[i]<heap[i>>1]) do begin\n                swap(cj[num[i]],cj[num[i>>1]]);\n                swap(heap[i],heap[i>>1]);\n                swap(num[i],num[i>>1]);\n                i:=i>>1;\n        end;\nend;\nprocedure del;\nvar\n        i,mid:longint;\nbegin\n        cj[num[1]]:=0;\n        heap[1]:=heap[heap[0]];\n        num[1]:=num[heap[0]];\n        dec(heap[0]);\n        i:=1;\n        if (heap[i<<1]<heap[i<<1+1]) or (i=heap[0]) then mid:=i<<1 else mid:=i<<1+1;\n        while (mid<=heap[0]) and (heap[mid]<heap[i]) do begin\n                swap(cj[num[i]],cj[num[mid]]);\n                swap(heap[i],heap[mid]);\n                swap(num[i],num[mid]);\n                i:=mid;\n                if (heap[i<<1]<heap[i<<1+1]) or (i<<1=heap[0]) then mid:=i<<1 else mid:=i<<1+1;\n        end;\nend;\nfunction dij(x,y:longint):boolean;\nvar\n        i,v:longint;\nbegin\n        for i:=1 to n do begin\n                dis[i]:=maxlongint*10000;\n                flow[i]:=maxlongint*10000;\n                heap[i]:=0;\n                num[i]:=0;\n                cj[i]:=0;\n                l[i]:=0;\n        end;\n        heap[0]:=1;\n        num[1]:=x;\n        dis[x]:=0;\n        head:=x;\n        while heap[0]<>0 do begin\n                v:=he[head];\n                while v<>-1 do begin\n                        if (f[v]>0) and (dis[t[v]]>dis[head]+w[v]+df[head]-df[t[v]]) then begin//\u4e0d\u540c\u70b91\n                                dis[t[v]]:=dis[head]+w[v]+df[head]-df[t[v]];\n                                flow[t[v]]:=min(f[v],flow[head]);\n                                l[t[v]]:=v;\n                                hy[t[v]]:=head;\n                                insert(dis[t[v]],t[v]);\n                        end;\n                        v:=ne[v];\n                end;\n                del;\n                head:=num[1];\n        end;\n        if dis[y]=maxlongint*10000 then exit(false) else exit(true);\nend;\nprocedure mcfa(x,y:longint);\nvar\n        maxf:int64;\n        v,i:longint;\nbegin\n        while dij(x,y) do begin\n                maxf:=flow[y];\n                ans:=ans+maxf*(dis[y]-df[x]+df[y]);\n                bns:=bns+maxf;\n                v:=y;\n                while v<>x do begin\n                        f[l[v]]:=f[l[v]]-maxf;\n                        f[l[v] xor 1]:=f[l[v] xor 1]+maxf;\n                        v:=hy[v];\n                end;\n                for i:=1 to n do df[i]:=df[i]+dis[i];//\u4e0d\u540c\u70b92\n        end;\nend;\nbegin\n        assign(input,'jjj.in');reset(input);\n        assign(output,'jjj.out');rewrite(output);\n        readln(n,m,s,e);\n        for i:=1 to n do he[i]:=-1;\n        tot:=-1;\n        for i:=1 to m do begin\n                readln(x,y,z,o);\n                link(x,y,o,z);\n                link(y,x,-o,0);\n        end;\n        mcfa(s,e);\n        writeln(bns,' ',ans);\nend.\n```",
        "postTime": 1556189330,
        "uid": 113864,
        "name": "kfhkx",
        "ccfLevel": 0,
        "title": "P3381\u9898\u89e3"
    },
    {
        "content": "860ms /  3.36MB\n\n\u4ee3\u7801\uff1a1.8KB C++11\n\n\n\u65f6\u7a7a\u6548\u7387\u8fd8\u4e0d\u9519\u3002\n\n\u8d39\u7528\u6d41\u89e3\u6cd5\u76ee\u524d\u589e\u5e7f\u8def\u7b97\u6cd5\u5927\u81f4\u4e24\u79cd\uff0c\n\n1.SPFA\u627e\u589e\u5e7f\u8def\u7b97\u6cd5\n\n2.zkw\u8d39\u7528\u6d41\u7b97\u6cd5\u3002\n\n\n\u9488\u5bf9\u4e24\u79cd\u7b97\u6cd5\uff0c\u90fd\u4e0d\u662f\u5f88\u5b8c\u7f8e\u7684\u5e94\u5bf9\u6240\u6709\u7684\u968f\u673a\u6570\u636e\uff0c\u90fd\u6709\u5404\u81ea\u7684\u6781\u9650\u56fe\u4e0b\u6781\u6162\u7684\u6548\u7387\u3002\n\n\u90a3\u4e48\u5c31\u6298\u4e2d\u4e00\u4e0b\u597d\u4e86\uff0c\u7528SPFA\u66f4\u65b0\u8ddd\u79bb\u6807\u53f7\uff0c\u7136\u540e\u8dd1\u6700\u5927\u6d41\u7b97\u4e00\u4e0b\u8d39\u7528\uff0c\u7c7b\u4f3c\u4e00\u4e2adinic\u7684\u7b97\u6cd5\uff0c\n\n\u867d\u7136\u5728\u6b64\u9898\u4e2d\u6548\u7387\u4e0d\u654czkw\u8d39\u7528\u6d41\uff0c\u4f46\u662f\u666e\u904d\u6765\u8bf4\uff0c\u65e2\u7b80\u5355\u6613\u61c2\uff0c\u6709\u4f18\u4e8eSPFA\uff0c\u5982\u679c\u6709\u51fa\u9898\u4eba\u6545\u610f\u5361ZKW= =\uff0c\u90a3\u4e48\u5c31\u606d\u559c\u5566\uff0c\u8fd9\u4e2a\u505a\u6cd5\u53ef\u4ee5\u5361\u5361\u5e38\u6570\u6c34\u8fc7\u53bb^\\_^\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int INF=0x3f3f3f3f;\nconst int M=50100;\nconst int N=5010;\ndeque<int> Q;\nint ans=0,res=0,n,m,S,T,EdgeCnt=0;\nint d[N],a[N];\nbool inq[N],vis[N];\nstruct Edge{\n    int to,cap,cost,next;\n}e[M*2];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid addedge(int u,int v,int w,int c){\n    int &p=EdgeCnt;\n    e[p].to=v;e[p].cap=w;e[p].cost=c;e[p].next=a[u];\n    a[u]=p++;\n}\nbool bfs(){\n    for (int i=0;i<=n;i++)d[i]=INF;\n    memset(inq,0,sizeof(inq));\n    d[T]=0;Q.push_back(T);inq[T]=true;\n    while (!Q.empty()){\n        int u=Q.front();Q.pop_front();\n        inq[u]=false;\n        for (int p=a[u];p!=-1;p=e[p].next){\n            int v=e[p].to;\n            if (e[p^1].cap && d[v]>d[u]-e[p].cost){\n                d[v]=d[u]-e[p].cost;\n                if (!inq[v]){\n                    inq[v]=true;\n                    if (Q.empty() || d[v]>=d[Q.front()])Q.push_back(v);\n                        else Q.push_front(v);\n                }\n            }\n        }\n    }\n    return d[S]<d[0];\n}\nint dfs(int u,int f){\n    vis[u]=true;\n    if (u==T || f==0)return f;\n    int used=0;\n    for (int p=a[u];p!=-1;p=e[p].next){\n        int v=e[p].to;\n        if ((!vis[v]) && e[p].cap && d[v]==d[u]-e[p].cost){\n            int w=f-used;\n            w=dfs(v,min(e[p].cap,w));\n            e[p].cap-=w;\n            e[p^1].cap+=w;\n            used+=w;\n            if (used==f)return used;\n        }\n    }\n    return used;\n}\nint main(){\n    n=read(),m=read(),S=read(),T=read();\n    memset(a,0xff,sizeof(a));\n    for (int i=1;i<=m;i++){\n        int u,v,w,c;\n        u=read(),v=read(),w=read(),c=read();\n        addedge(u,v,w,c);\n        addedge(v,u,0,-c);\n    }\n    while (bfs()){\n        vis[T]=1;\n        while (vis[T]){\n            memset(vis,0,sizeof(vis));\n            int flow=dfs(S,INF);\n            res+=d[S]*flow;\n            ans+=flow;\n        }\n    }\n    printf(\"%d %d\",ans,res);\n    return 0;\n}\n```",
        "postTime": 1503543687,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u75af\u72c2\u4f18\u5316\u7248\u8d39\u7528\u6d41\u6a21\u677f\n\n\u5c31\u662f\u5148\u8dd1\u6700\u77ed\u8def\u6784\u56fe\uff0c\u4e4b\u540e\u4e0d\u65ad\u6cbf\u7740\u6700\u77ed\u8defdfs\u589e\u5e7f\uff0c\u4e4b\u540e\u5faa\u73af\u3002\n\n\u4f18\u5316\u6709\u51e0\u70b9\u3002\n\n1 \u8dd1\u6700\u77ed\u8def\u65f6\u8981\u9006\u5411\uff0c\u4eceT\u51fa\u53d1\u6cbf\u53cd\u5411\u8fb9\u8dd1\u3002\u800cDFS\u662f\u6b63\u5411\u7684\u3002\u51cf\u5c11\u4e86\u641c\u7d22\u8303\u56f4\u3002\n\n2 \u56e0\u4e3a\u6709\u8d1f\u8fb9\uff0cspfa\u4f1a\u53d8\u6162(\u6700\u5dee\u65f6\u95f4\u5e94\u8be5\u662fnm\u7684\uff0c\u867d\u7136\u6ca1\u6709\u770b\u5230\u8fd9\u6837\u7684\u6570\u636e)\u3002\u4f46\u6709\u4e00\u4e2a\u6d88\u9664\u7684\u529e\u6cd5(orz\u5b66\u957f)\u3002\n\n\u5982\u679c\u6211\u4eec\u6bcf\u4e2a\u70b9\u7ed9\u6bcf\u4e2a\u70b9\u8bbe\u7f6e\u4e00\u4e2ah,\u5c06\u6bcf\u6761\u8fb9<u,v>\u7684\u6743-=h[u]-h[v]\uff0c\u90a3\u4e48\u7b54\u6848+=h[\u7ec8\u70b9]\u5c31\u662f\u5b9e\u9645\u7b54\u6848\u4e86\u3002\n\n\u8003\u8651\u600e\u4e48\u8bbe\u7f6eh\u4f7f\u5f97\u6240\u6709\u6709\u6d41\u91cf\u7684\u8fb9\u90fd\u662f>=0\u7684\u3002\n\n\u4e00\u5f00\u59cb\u6240\u6709\u6709\u6d41\u91cf\u7684\u8fb9\u90fd\u662f>=0\u7684\uff0c\u662fok\u7684\u3002\u4f46\u662f\u9009\u62e9\u4e00\u6761\u8fb9\u540e\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53cd\u5411\u8fb9\u6d41\u91cf\u589e\u52a0\uff0c\u800c\u53cd\u5411\u8fb9\u662f<=0\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bbe\u7f6eh\uff0c\u4f7f\u5f97\u8be5\u8fb9\u548c\u53cd\u5411\u8fb9\u90fd=0\u3002\n\n\u7531\u4e8e\u9009\u62e9\u8fb9<u,v>\u540e,dist[v]=dist[u]+len\u3002\n\n\u53d6h[i]=dist[i]\u5c31\u53ef\u4ee5\u4e86\uff01\n\n3 dfs\u627e\u5230\u7b54\u6848\u540e\uff0c\u4e0d\u8981\u76f4\u63a5\u9000\u51fa\u3002\u589e\u5e7f\u81f3\u524d\u9762\u6216\u8005\u540e\u9762\u7684\u6d41\u91cf\u6d41\u5149\u4e3a\u6b62\u3002\n\n4 \u7531\u4e8e\u5b58\u5728\u4e3a0\u7684\u8fb9\uff0cdfs\u65f6\u6211\u4eec\u9700\u8981\u6807\u8bb0\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u6808\uff0c\u9632\u6b62\u6b7b\u5faa\u73af\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u5229\u7528\u8fd9\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u8fd9\u4e2a\u70b9\u662f\u5426\u53ef\u7528(\u5f53\u4e00\u4e2a\u70b9\u540e\u9762\u6d41\u91cf\u6d41\u5149\u4e86\u5c31\u6807\u8bb0\u4e00\u4e0b)\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u65f6\u95f4\uff0c\u6807\u8bb0\u8bb0\u5f55\u7684\u662f\u5f53\u524d\u65f6\u95f4\u5219\u4e3a\u6709\u6548\u7684\u6807\u8bb0\u3002\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u6e05\u7a7a\u6807\u8bb0\u4e86\u3002\n\n\n```cpp\n#pragma GCC optimize \"O2\" \n#include<cstdio>\n#include<algorithm>\n#include<string.h>\n#include<ext/pb_ds/priority_queue.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\n\n#define ch_top 10000000\nchar ch[ch_top],*now_r=ch;\nvoid read(int &x) \n{ while(*now_r<48)++now_r;\n  for (x=*now_r-48;*++now_r>=48;)\n   x= (x<<1)+(x<<3)+*now_r-48;\n}\n\n#define oo 1000000000\n#define N 10100\n#define M 200100\nint n,m,S,T,i,x,y,f,c;\nint t[N];\nstruct edge\n{\n    int to,next,f,cost;\n}l[M];int e;\n#define add(x,y,f,c) {l[++e]=(edge){y,t[x],f,c};t[x]=e;}\n\n\nint g[N],tot;\nstruct xiao\n{\n__inline__ __attribute((always_inline))\nbool operator () (int y,int x)\n{\n    return g[x]<g[y];\n}\n};\ntypedef __gnu_pbds::priority_queue<int,xiao> heap;\nheap q;\nheap::point_iterator dy[N];\nint _t[N];\nbool spfa()\n{\n    for (i=1;i<=n;++i) g[i]=oo;\n    g[T]=0;q.push(T);\n    do\n    {\n        x=q.top();dy[x]=0;q.pop();\n        for (_t[x]=i=t[x];i;i=l[i].next)\n        if (l[i^1].f&&g[y=l[i].to]>g[x]+l[i^1].cost)\n        {\n            g[y]=g[x]+l[i^1].cost;\n            if (dy[y]==0) dy[y]=q.push(y);\n            else q.modify(dy[y],y);\n        }\n    }while (!q.empty());\n    \n    if (g[S]==oo) return 0;\n    for (x=1;x<=n;++x)\n    for (i=t[x];i;i=l[i].next)\n     l[i].cost-=g[x]-g[l[i].to];\n    tot+=g[S];\n    return 1;\n}\n\nint tag[N],num;\nint dfs(int x,int f)\n{\n    if (x==T) return f;\n    tag[x]=num;\n    int f0=f,del,y;\n    for (int &i=_t[x];i;i=l[i].next)\n    if (l[i].f&&!l[i].cost&&tag[y=l[i].to]!=num)\n    {\n        del=dfs(y,min(l[i].f,f));\n        l[i].f-=del;l[i^1].f+=del;\n        f-=del;\n        if (!f) {tag[x]=0;return f0;} \n    }\n    return f0-f;\n}\n\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    fread(ch,1,ch_top,stdin);\n    read(n);read(m);read(S);read(T);\n    e=1; \n    for (i=1;i<=m;++i) \n    {\n        read(x);read(y);read(f);read(c); \n        add(x,y,f,c) add(y,x,0,-c)\n    }\n    int ansf=0,ansc=0;\n    while (spfa()) \n    {\n        ++num;\n        f=dfs(S,oo);\n        ansf+=f;ansc+=f*tot;\n    }\n    printf(\"%d %d\",ansf,ansc);\n}\n```",
        "postTime": 1483679921,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "- \u5bb9\u91cf\u9650\u5236 (Capacity Constraints):\n\n\tf(u,v)\u2264c(u,v)\u4e00\u6761\u8fb9\u7684\u6d41\u4e0d\u80fd\u8d85\u8fc7\u5b83\u7684\u5bb9\u91cf\u3002\n\n- \u659c\u5bf9\u79f0 (Skew Symmetry):\n\n\tf(u,v)=-f(v,u)\u7531u\u5230v\u7684\u51c0\u6d41\u5fc5\u987b\u662f\u7531v\u5230u\u7684\u51c0\u6d41\u7684\u76f8\u53cd\uff08\u53c2\u8003\u4f8b\u5b50\uff09\u3002\uff08\u65e2\u7136\u8981\u770b\u7f51\u7edc\u6d41\uff0c\u8fd9\u662f\u4e00\u5b9a\u8981\u77e5\u9053\u7684\uff09\n\n- \u6d41\u5b88\u6052 (Flow Conservation):\n\n\t\u9664\u975eu=s\u6216u=t\uff0c\u5426\u5219\u03a3\uff08w\u2208V\uff09f(u,w)=0 \u4e00\u7ed3\u70b9\u7684\u51c0\u6d41\u662f\u96f6\uff0c\u9664\u4e86\u201c\u5236\u9020\u201d\u6d41\u7684\u6e90\u70b9\u548c\u201c\u6d88\u8017\u201d\u6d41\u7684\u6c47\u70b9\u3002\n\n--------\u767e\u5ea6\n\n\u76f8\u4fe1\u5927\u5bb6\u4e5f\u90fd\u770b\u8fc7\u4e86\uff0c\u6211\u8fd9\u91cc\u4e5f\u4e0d\u591a\u8a00\u4e86\uff0c\u4e0b\u9762\u5206\u522b\u5b9e\u73b0\u8fd9\u4e09\u4e2a\u5b9a\u8bba\n\n-  \u5bb9\u91cf\u9650\u5236 (Capacity Constraints):\n\t\n    \u5728\u4ee3\u7801\u4e2d\u5176\u5b9e\u4e5f\u5c31\u4e00\u53e5\u8bdd\uff0c\u53ea\u601d\u8003\u6b8b\u7559\u7f51\u7edc\u7f51\u7edc\u4e2d\u7684\u8fb9\u5373\u53ef\n```cpp\nif(edge[i].cap>edge[i].flow\uff09\n```\n-  \u659c\u5bf9\u79f0 (Skew Symmetry) and \u6d41\u5b88\u6052 (Flow Conservation) :\n\t\n   \u8fd9\u4e24\u53e5\u8bdd\u5728\u4ee3\u7801\u4e2d\u7684\u5b9e\u73b0\u5c31\u8981\u7528\u5230\u53cd\u5411\u8fb9\u4e86\uff08\u76f8\u4fe1\u770b\u7f51\u7edc\u6d41\u7684\u4e00\u5b9a\u77e5\u9053\u53cd\u5411\u8fb9\u7684\u4f5c\u7528\u5427\uff09~~\u5176\u5b9e\u4e5f\u5c31\u662f\u53cd\u6094~~\n   \n   \u8fd9\u91cc\u628a\u5efa\u8fb9\u548c\u589e\u52a0\u6d41\u91cf\u653e\u4e00\u8d77\n   ```cpp\n\t\t\n\tvoid add(int x,int y,int flow,int cap,int cost)\n\t{\n\t\taddedge++;\n\t\tedge[addedge].cap = cap;\n\t\tedge[addedge].cost = cost;\n\t\tedge[addedge].flow = flow;\n\t\tedge[addedge].next = head[x];\n\t\tedge[addedge].to = y;\n\t\thead[x] = addedge;\n\t}\n\t\n\tvoid EK(int s,int t)\n{\n\twhile(bfs(s,t))\n\t{\n\t\t\n\t\tint k = t;\n\t\twhile(k!=s)\n\t\t{\n\t\t\tedge[p[k]].flow+=nowflow;\n\t\t\tedge[p[k]^1].flow-=nowflow;\n\t\t\tk = pre[k];\n\t\t}\n\t\tmaxflow+=nowflow;\n\t\tmincost+=nowflow*dist[t];\n\t\tnowflow = 0;\n\t}\n\treturn;\n}\n\t\n```\n\n\u4e0d\u660e\u767d\u6ca1\u5173\u7cfb\u4e0b\u9762\u653e\u6ce8\u89e3\u4ee3\u7801\uff1a\n```cpp\n/*\n\u56e0\u4e3a\u8fd9\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6240\u4ee5\u7528SPFA\u627e\u589e\u5e7f\u8def\u800c\u4e0d\u7528BFS\n\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u4f1a\u4e86\uff0c\u6700\u5927\u6d41\u5e94\u8be5\u4e5f\u4e0d\u662f\u95ee\u9898\u4e86\u5427 \n*/\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 5010;//\u70b9\u7684\u4e2a\u6570 \nconst int M = 50010;//\u8fb9\u7684\u4e2a\u6570 \nconst int inf = 0x3f3f3f3f;//\u6700\u5927\u503c \nint n,m,S,T;//\u9898\u610f\u7406\u89e3 \nint maxflow=0,mincost=0,addedge=-1,nowflow=0;//\u5206\u522b\u662f\u6700\u5927\u6d41\uff0c\u6700\u5c0f\u8d39\u7528\uff0c\u7b2c\u51e0\u6761\u8fb9\uff0c\u4e00\u6b21\u589e\u5e7f\u7684\u6d41\u91cf\u7684\u5927\u5c0f \nint node[N];//\u6bcf\u4e2a\u70b9\u7684\u73b0\u6d41\u91cf \nstruct EDGE\n{\n\tint next;\n\tint to;\n\tint flow;\n\tint cap;\n\tint cost;\n}edge[M<<1];//\u6709\u53cd\u5411\u8fb9\uff0c\u6240\u4ee5\u8fb9\u7684\u5927\u5c0f\u5f00\u4e24\u500d \nint head[M<<1];//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9 \nint p[N];//\u5f27\u7684\u7f16\u53f7 \nint pre[N];//\u8fd9\u4e2a\u70b9\u7684\u524d\u9a71 \nint dist[N];//\u8d39\u7528 \nbool enqueue[N];//\u662f\u5426\u5728\u961f\u91cc \nint read()//\u5feb\u8bfb\u677f\u5b50 \n{\n\tint x=0,f=1;\n\tchar ch = getchar();\n\twhile(ch<'0'||ch>'9')\n\t{\n\t\tif(ch=='-')\n\t\t{\n\t\t\tf = -1;\n\t\t}\n\t\tch = getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tx = (x<<3)+(x<<1)+(ch-'0');\n\t\tch = getchar(); \n\t}\n\treturn x*f;\n}\nvoid add(int x,int y,int flow,int cap,int cost)//\u52a0\u8fb9 \n{\n\taddedge++;\n\tedge[addedge].cap = cap;\n\tedge[addedge].cost = cost;\n\tedge[addedge].flow = flow;\n\tedge[addedge].next = head[x];\n\tedge[addedge].to = y;\n\thead[x] = addedge;\n}\nbool bfs(int s,int t)//\u4e3b\u4f53\u51fd\u6570 \n{\n\tmemset(enqueue,0,sizeof(enqueue));//\u521d\u59cb\u5316 \n\tmemset(dist,0x3f,sizeof(dist));\n\tmemset(pre,-1,sizeof(pre));\n\tmemset(node,0,sizeof(node));\n\tqueue<int> q;\n\tdist[s] = 0;\n\tenqueue[s] = true;\n\tnode[s] = inf;//\u6e90\u70b9\u6d41\u91cf\u65e0\u7a77\u5927 \n\tq.push(s);\n\tpre[s] = 0;\n\twhile(!q.empty())//SPFA\u677f\u5b50 \n\t{\n\t\tint x = q.front();\n\t\tq.pop();\n\t\tenqueue[x] = false;\n\t\tfor(int i = head[x];~i;i = edge[i].next)//\u679a\u4e3e\u8fb9 \n\t\t{\n\t\t\tint y = edge[i].to;\n\t\t\tif(edge[i].cap>edge[i].flow && dist[y]>dist[x]+edge[i].cost)//\u5728\u6b8b\u91cf\u7f51\u7edc\u4e2d \n\t\t\t{\n\t\t\t\tdist[y] = dist[x] + edge[i].cost;\n\t\t\t\tpre[y] = x;\n\t\t\t\tp[y] = i;\n\t\t\t\tnode[y] = min(node[x],edge[i].cap-edge[i].flow);//\u53d7\u5bb9\u91cf\u7684\u9650\u5236 \n\t\t\t\tif(!enqueue[y])\n\t\t\t\t{\n\t\t\t\t\tq.push(y);\n\t\t\t\t\tenqueue[y] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tnowflow = node[t];//\u73b0\u6d41\u91cf \n\tif(dist[t]==inf) return false;//\u4e0d\u8fde\u901a\u4e86 \n\telse return true;\n}\nvoid EK(int s,int t)//\u589e\u5e7f \n{\n\twhile(bfs(s,t))\n\t{\n\t\t\n\t\tint k = t;\n\t\twhile(k!=s)\n\t\t{\n\t\t\tedge[p[k]].flow+=nowflow;//\u6d41\u8fc7\u7684\u8fb9+ \n\t\t\tedge[p[k]^1].flow-=nowflow;//\u53cd\u5411\u8fb9- \n\t\t\tk = pre[k];//\u627e\u524d\u9a71 \n\t\t}\n\t\tmaxflow+=nowflow;//\u6700\u5927\u6d41+ \n\t\tmincost+=nowflow*dist[t];//\u8d39\u7528+ \n\t\tnowflow = 0;\n\t}\n\treturn;\n}\nint main()//\u4e3b\u51fd\u6570 \n{\n\tmemset(head,-1,sizeof(head));//\u521d\u59cb\u5316 \n\tn=read();\n\tm=read();\n\tS=read();\n\tT=read();\n\tfor(int i=1;i<=m;i++)//\u52a0\u8fb9 \n\t{\n\t\tint a,b,c,d;\n\t\ta=read();b=read();c=read();d=read();//\u9898\u610f \n\t\tadd(a,b,0,c,d);\n\t\tadd(b,a,0,0,-d);\n\t}\n\tEK(S,T);\n\tprintf(\"%d %d\",maxflow,mincost);//\u8f93\u51fa\uff0c\u7ed3\u675f \n\treturn 0;\n}\n```\n\n\u5982\u679c\u60a8\u5bf9SPFA\u6709\u610f\u89c1\u7684\u8bdd\uff0c\u53ef\u4ee5\u7ed9\u6bcf\u6761\u8fb9\u52a0\u4e0a\u4e00\u4e2a\u503c\u4f7f\u5b83\u53d8\u4e3a\u6b63\u6570\uff0c\u518d\u8dd1Dijkstra\n\n\u82e5\u6709\u7591\u95ee\u53ef\u4ee5\u79c1\u4fe1\u6211\u54df\n   \n\n\n\n\n",
        "postTime": 1571317670,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "P3381"
    },
    {
        "content": "\u540c\u5fd7\u4eec\uff0c\u540c\u80de\u4eec\uff1a  \n# \u8d39\u7528\u6d41\uff0c\u8d39\u7528\u516d\uff0c\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41  \n\n\n~~\u5176\u5b9e\u8fd9\u662f\u4e00\u9053\u6a21\u677f\u9898~~\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u662f\u5728\u8d39\u7528\u7684\u589e\u5e7f\u8def\u4e0a\u8d4b\u8d1f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528\u5230\u7684bfs\u5927\u53d1\u5e94\u8be5\u662fspfa\uff08dij\u4e0d\u80fd\u8d70\u8d1f\u8fb9\uff09  \n\u4e8e\u662f\uff0c\u6211\u4eec\u5f88\u613f\u610f\u5728\u6700\u5927\u6d41\u7684\u6728\u677f\u4e0a\uff0c\u52a0\u4e0a\u6709\u5173\u8d39\u7528\u7684\u5224\u65ad\uff0c\u4fbf\u53ef\u4ee5\u5f88\u8f7b\u677e\u5f97A\u4e86\u8fd9\u9053\u9898\uff01\uff01\uff01  \n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MK 200100\nusing namespace std;\nint n,m,S,T;\nint ans = 0;\nint cost = 0;\nint f[MK];\nint dep[MK];\nint id[MK];\nint mn[MK];\n\nstruct node\n{\n\tint next,to,v,w;\n}e[MK*2];\n\nint ei = 1,h[MK];\n\nvoid add(int x,int y,int v,int w)\n{\n\tei++;\n\te[ei].to = y;\n\te[ei].v = v;\n\te[ei].w = w;\n\te[ei].next = h[x];\n\th[x] = ei;\n}\n\nint dis[MK],u[MK];\n\nint spfa()\n{\n\tqueue<int>qu;\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(f,0,sizeof(f));\n\tmemset(mn,0x3f,sizeof(mn));\n\tmemset(u,0,sizeof(u));\n\tmemset(id,0,sizeof(id));\n\tqu.push(S);\n\tdis[S] = 0;\n\tf[S] = 0;\n\twhile(!qu.empty())\n\t{\n\t\tint f1 = qu.front();\n\t\tqu.pop();\n\t\tu[f1] = 0;\n\t\tfor(int i=h[f1];i;i=e[i].next)\n\t\t{\n\t\t\tint to = e[i].to;\n\t\t\tif(e[i].v==0 || dis[to]<=dis[f1]+e[i].w)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdis[to] = dis[f1]+e[i].w;\n\t\t\tf[to] = f1;\n\t\t\tid[to] = i;\n\t\t\tmn[to] = min(mn[f1],e[i].v);\n\t\t\tif(u[to]==0)\n\t\t\t{\n\t\t\t\tu[to] = 1;\n\t\t\t\tqu.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T]!=dis[0];\n}\n\nint update()\n{\n\tint next = T;\n\twhile(f[next]!=0)\n\t{\n\t\te[id[next]].v -= mn[T];\n\t\te[id[next]^1].v += mn[T];\n\t\tnext = f[next];\n\t}\n\treturn mn[T];\n}\n\nvoid EK()\n{\n\twhile(spfa())\n\t{\n\t\tint k = 0;\n\t\tk += update();\n\t\tans += k;\n\t\tcost += k*dis[T];\n\t}\n}\n\nsigned main()\n{\n\tscanf(\"%lld%lld%lld%lld\",&n,&m,&S,&T);\n\twhile(m--)\n\t{\n\t\tint x,y,v,w;\n\t\tscanf(\"%lld%lld%lld%lld\",&x,&y,&v,&w);\n\t\tadd(x,y,v,w);\n\t\tadd(y,x,0,-w);\n\t}\n\tEK();\n\tprintf(\"%lld %lld\\n\",ans,cost);\n\treturn 0;\n}\n```\n\n\u563b\u563b\u563b\uff0c\u53ef\u80fd\u6709\u4e9b\u6c34\uff0c\u4f46\u662f\u7b80\u5355\u660e\u4e86\uff0c\u8fd8\u8bf7\u5927\u4f6c\u6307\u6559\uff01\uff01\uff01",
        "postTime": 1565091989,
        "uid": 90646,
        "name": "Xie_BR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "## ~~\u6765\u4e00\u4e2a\u7b80\u5355\u6613\u61c2\u7684~~\n## Minimum cost maximum flow\n\n------------\n###  \u539f\u7406\n\u89e3\u51b3\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u95ee\u9898\uff0c\u4e00\u822c\u6709\u4e24\u6761\u9014\u5f84\u3002\u4e00\u6761\u9014\u5f84\u662f\u5148\u7528\u6700\u5927\u6d41\u7b97\u6cd5\u7b97\u51fa\u6700\u5927\u6d41\uff0c\u7136\u540e\u6839\u636e\u8fb9\u8d39\u7528\uff0c\u68c0\u67e5\u662f\u5426\u6709\u53ef\u80fd\u5728\u6d41\u91cf\u5e73\u8861\u7684\u524d\u63d0\u4e0b\u901a\u8fc7\u8c03\u6574\u8fb9\u6d41\u91cf\uff0c\u4f7f\u603b\u8d39\u7528\u5f97\u4ee5\u51cf\u5c11\uff1f\u53ea\u8981\u6709\u8fd9\u4e2a\u53ef\u80fd\uff0c\u5c31\u8fdb\u884c\u8fd9\u6837\u7684\u8c03\u6574\u3002\u8c03\u6574\u540e\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6700\u5927\u6d41\u3002\n\u7136\u540e\uff0c\u5728\u8fd9\u4e2a\u65b0\u6d41\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u68c0\u67e5\uff0c\u8c03\u6574\u3002\u8fd9\u6837\u8fed\u4ee3\u4e0b\u53bb\uff0c\u76f4\u81f3\u65e0\u8c03\u6574\u53ef\u80fd\uff0c\u4fbf\u5f97\u5230\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\u8fd9\u4e00\u601d\u8def\u7684\u7279\u70b9\u662f\u4fdd\u6301\u95ee\u9898\u7684\u53ef\u884c\u6027\uff08\u59cb\u7ec8\u4fdd\u6301\u6700\u5927\u6d41\uff09\uff0c\u5411\u6700\u4f18\u63a8\u8fdb\u3002\u53e6\u4e00\u6761\u89e3\u51b3\u9014\u5f84\u548c\u524d\u9762\u4ecb\u7ecd\u7684\u6700\u5927\u6d41\u7b97\u6cd5\u601d\u8def\u76f8\u7c7b\u4f3c\uff0c\u4e00\u822c\u9996\u5148\u7ed9\u51fa\u96f6\u6d41\u4f5c\u4e3a\u521d\u59cb\u6d41\u3002\u8fd9\u4e2a\u6d41\u7684\u8d39\u7528\u4e3a\u96f6\uff0c\u5f53\u7136\u662f\u6700\u5c0f\u8d39\u7528\u7684\u3002\u7136\u540e\u5bfb\u627e\u4e00\u6761\u6e90\u70b9\u81f3\u6c47\u70b9\u7684\u589e\u6d41\u94fe\uff0c\u4f46\u8981\u6c42\u8fd9\u6761\u589e\u6d41\u94fe\u5fc5\u987b\u662f\u6240\u6709\u589e\u6d41\u94fe\u4e2d\u8d39\u7528\u6700\u5c0f\u7684\u4e00\u6761\u3002\u5982\u679c\u80fd\u627e\u51fa\u589e\u6d41\u94fe\uff0c\u5219\u5728\u589e\u6d41\u94fe\u4e0a\u589e\u6d41\uff0c\u5f97\u51fa\u65b0\u6d41\u3002\u5c06\u8fd9\u4e2a\u6d41\u505a\u4e3a\u521d\u59cb\u6d41\u770b\u5f85\uff0c\u7ee7\u7eed\u5bfb\u627e\u589e\u6d41\u94fe\u589e\u6d41\u3002\u8fd9\u6837\u8fed\u4ee3\u4e0b\u53bb\uff0c\u76f4\u81f3\u627e\u4e0d\u51fa\u589e\u6d41\u94fe\uff0c\u8fd9\u65f6\u7684\u6d41\u5373\u4e3a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\u8fd9\u4e00\u7b97\u6cd5\u601d\u8def\u7684\u7279\u70b9\u662f\u4fdd\u6301\u89e3\u7684\u6700\u4f18\u6027\uff08\u6bcf\u6b21\u5f97\u5230\u7684\u65b0\u6d41\u90fd\u662f\u8d39\u7528\u6700\u5c0f\u7684\u6d41\uff09\uff0c\u800c\u9010\u6e10\u5411\u53ef\u884c\u89e3\u9760\u8fd1\uff08\u76f4\u81f3\u6700\u5927\u6d41\u65f6\u624d\u662f\u4e00\u4e2a\u53ef\u884c\u89e3\uff09\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define MM 50001\n#define NN 5001\nusing namespace std;\nint N,M,S,T,a,b,c,d,mf,mc,p=1;\nint head[NN],pos[NN],fa[NN],dis[NN],in[NN],flow[NN];\n//flow\u4e3a\u4eceS\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u5927\u53ef\u66f4\u65b0\u6d41\u91cf\n//dis\u4e3a\u4eceS\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u5c0f\u603b\u8d39\u7528\nstruct ss{\n    int to,l,c,dis;\n}q[MM<<1];\nvoid add(int a,int b,int c,int d)\n{\n    q[++p]=(ss){b,head[a],c, d};head[a]=p;\n    q[++p]=(ss){a,head[b],0,-d};head[b]=p;//\u53cd\u5411\u8fb9\u7684\u5bb9\u91cf\u4e3a\u96f6\uff0c\u8d39\u7528\u4e3a\u8d1f\n}\nbool spfa()\n{\n    memset(dis,66,sizeof(dis));\n    memset(in,0,sizeof(in));\n    memset(flow,66,sizeof(flow));\n    queue<int>que;\n    que.push(S);dis[S]=0;\n    while(!que.empty())\n    {\n        int u=que.front();que.pop();\n        for(int i=head[u];i;i=q[i].l)\n        {\n            int v=q[i].to,di=q[i].dis,c=q[i].c;\n            if(c&&dis[v]>dis[u]+di)\n            {\n                dis[v]=dis[u]+di;\n                pos[v]=i;//\u5b58v\u70b9\u5728head\u6570\u7ec4\u91cc\u7684\u4f4d\u7f6e\n                fa[v]=u;//\u5b58v\u70b9\u7684\u7236\u4eb2u\n                flow[v]=min(c,flow[u]);\n                //\n                if(!in[v])\n                {\n                    que.push(v);in[v]=1;\n                }\n            }\n        }\n        in[u]=0;\n    }\n    return flow[T]!=flow[S];//\u5224\u65adT\u662f\u5426\u80fd\u88ab\u4fbf\u5229\n}\nvoid mcmf()\n{\n    while(spfa())\n    {\n        mf+=flow[T];//\u66f4\u65b0\u6700\u5927\u6d41\n        mc+=flow[T]*dis[T];//\u66f4\u65b0\u6700\u5c0f\u8d39\u7528\n        for(int u=T;u!=S;u=fa[u])//\u4eceT\u8fd4\u56de\u6cbf\u8def\u5f84\u4fee\u6539\u5269\u4f59\u5bb9\u91cf\n        {\n            int v=pos[u];\n            q[v].c-=flow[T];//\u6b63\u8fb9\u51cf\u6389\u589e\u5e7f\u91cf\n            q[v^1].c+=flow[T];//\u53cd\u8fb9\u51cf\u6389\u589e\u5e7f\u91cf\n        }\n    }\n    printf(\"%d %d\\n\",mf,mc);\n}\nint main()\n{\n    scanf(\"%d%d%d%d\",&N,&M,&S,&T);\n    for(int i=1;i<=M;i++)\n    {\n        scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n        add(a,b,c,d);\n    }\n    mcmf();\n    return 0;//OK.\n}\n```\nInspiration comes from [%](https://www.luogu.org/space/show?uid=56923)",
        "postTime": 1524749346,
        "uid": 57146,
        "name": "ifyml",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u6709\u4eba\u53d1primal dual\u7684\u8d39\u7528\u6d41\u554a\uff08\u539f\u59cb\u5bf9\u5076\uff09\n\n\u53d1\u4e00\u53d1\u5427\n\n\u8bdd\u8bf4\u7528\u8fd9\u4e2a\u7684\u4eba\u597d\u50cf\u771f\u7684\u4e0d\u591a\n\n\u96be\u9053\u5927\u5bb6\u90fd\u4e0d\u53eb\u5b83\u8fd9\u4e2a\u540d\u5b57 \u9003\uff09?\n\n**572ms & 3511kb**\n\n\n\n```cpp\n#include <stdio.h> \n#include <string> \n#include <string.h> \nusing namespace std;\n#define MAXN 100010\n#define MAXM 200010\ntemplate<class T>void read(T &x)\n{\n    x = 0;int f = 0;int ch = getchar();\n    while(ch < '0' || ch > '9')  {f |= (ch == '-'); ch = getchar();}\n    while(ch >=  '0'&&ch <= '9'){x = x * 10+(ch^48); ch = getchar();}\n    x = f?-x:x;\n    return;\n}\nstruct Edge {\n    int y, c, f, nxt;\n    Edge() {}\n    Edge(int _y, int _c, int _f, int _nxt) {\n        y = _y, c = _c, f = _f, nxt = _nxt;\n    }\n}e[MAXM];\nint lst[MAXN]; \nint nn, mm; \nint E; \nint _phi[MAXN], _q[MAXN];\nint _s, _t, _cost, _tot;\nbool _v[MAXN];\ninline bool relable() {\n    int x, to, tail = 1, front = 0;\n    for(int i = 1; i <= nn; i++) _v[i] = 0, _phi[i] = 0x3fffffff;\n    _phi[_t] = 0; _q[0] = _t;\n    while(tail != front) {\n        x = _q[front++]; _v[x] = 0;\n        if(front > nn) front = 0;\n        for(int i = lst[x]; ~i; i = e[i].nxt) {\n            if(e[i ^ 1].c && _phi[to = e[i].y] > _phi[x] - e[i].f) {\n                _phi[to] = _phi[x] - e[i].f;\n                if(_v[to] == 0) {\n                    _v[to] = 1;\n                    if(_phi[to] < _phi[_q[front]])\n                        front == 0 ? front = nn : front--, _q[front] = to;\n                    else\n                    _q[tail++] = to,tail > nn ? tail = 0 : 0;\n                }    \n            }\n        }\n    }\n    for(int i = 1; i <= nn; i++)\n    for(int j = lst[i]; ~j; j = e[j].nxt)\n    e[j].f += _phi[e[j].y] - _phi[i];\n    _tot += _phi[_s];\n    return _phi[_s] < 0x3fffffff;\n}\ninline int aug(int s, int flow) {\n    if(s == _t) return _cost += _tot * flow, flow;\n    int res = flow, te; _v[s] = 1;\n    for(int i = lst[s]; ~i; i = e[i].nxt) {\n        if(!_v[e[i].y] && !e[i].f && e[i].c) {\n            res -= (te = aug(e[i].y, min(res, e[i].c)));\n            e[i].c -= te; e[i ^ 1].c += te;\n            if(!res) return flow;\n        }\n    }\n    return flow - res;\n}\npair<int, int> cost_flow(int s, int t) {\n    _cost = _tot = 0; _s = s; _t = t; relable();\n    int flow = 0, te = 0;\n    do memset(_v,0,sizeof(_v)), flow += te;\n    while((te = aug(s, 0x3fffffff)) || relable());\n    return make_pair(_cost, flow);\n}\ninline void add_edge(int x, int y, int c, int f) {\n    e[mm] = Edge(y, c, f, lst[x]); lst[x] = mm++;\n    e[mm] = Edge(x, 0, -f, lst[y]); lst[y] = mm++;\n}\nsigned main() {\n    memset(lst, -1, sizeof(lst));\n    read(nn), read(E);\n    read(_s), read(_t);\n    for(int i = 1, a, b, c, d; i <= E; i++) {\n        read(a), read(b);read(c), read(d);\n        add_edge(a, b, c, d);\n    }\n    pair<int, int> alpha;\n    alpha = cost_flow(_s, _t);\n    printf(\"%d %d\\n\", alpha.second, alpha.first);\n    return 0; \n}\n```",
        "postTime": 1511588610,
        "uid": 34332,
        "name": "KKarshilov",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u6734\u7d20\u7684EK+SPFA\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 5100\n#define MAXM 100100\n#define INF 1073741824\nusing namespace std;//INF\u4e0d\u8981\u5f00\u592a\u5927\u4e86\u5426\u5219\u53ef\u80fd\u4f1a\u5728\u4e00\u4e9b\u64cd\u4f5c\u4e0b\u8d8a\u754c\nstruct Edge{\n    int from,to,re,c;//\u4e0d\u8bb0\u5f55\u6d41\u91cf\u548c\u5bb9\u91cf\u800c\u76f4\u63a5\u8bb0\u5f55\u6b8b\u91cf\u53ef\u4ee5\u8282\u7ea6\u7a7a\u95f4\u65b9\u4fbf\u64cd\u4f5c\uff08re=res,c=cost\uff09\n    Edge(int _from,int _to,int _re,int _c) {from=_from,to=_to,re=_re,c=_c;}\n    Edge(){}\n};\nEdge table[MAXM+1];//\u4e00\u5b9a\u8981\u8bb0\u5f97\u7ed9\u9006\u5411\u8fb9\u5f00\u6570\u7ec4\uff08\u56e0\u4e3a\u8fd9\u4e2a\u4e3aP3381\u8d21\u732e\u4e86N\u4e2aTLE+RE\uff09\nint pre[MAXN+1],dis[MAXN+1];//\u524d\u9a71&&\u6700\u77ed\u8def\uff08\u6743\u503c\u4e3acost\uff09\nint nxt[MAXM+1],fr[MAXM+1];//\u8bb0\u5f55\u90bb\u63a5\u8868\nint n,m,s,t,tot=1;\nint max_f,min_c;//\u6700\u5927\u6d41\u6700\u5c0f\u8d39\u7528\nbool inq[MAXN+1];\ndeque<int> mession;//\u53cc\u5411\u961f\u5217\nvoid MCMF(){\n    while(true){\n        fill(dis+1,dis+n+1,INF);\n        memset(inq,false,sizeof(inq));\n        dis[s]=0;\n        mession.push_back(s);\n        inq[s]=true,dis[s]=0;\n        int now;//\u73b0\u5728\u70b9\n        while(!mession.empty()){\n            now=mession.front(),mession.pop_front();\n            inq[now]=false;\n            for(int i=fr[now];i!=-1;i=nxt[i]){\n                Edge &tar=table[i];//\u76ee\u6807\u70b9\n                if(tar.re>0&&dis[tar.to]>dis[now]+tar.c){\n                    dis[tar.to]=dis[now]+tar.c;\n                    pre[tar.to]=i;\n                    if(!inq[tar.to]){\n                        if(mession.empty()||dis[tar.to]<dis[mession.front()]) mession.push_front(tar.to);//\u4f18\u5148\u5904\u7406\u7684\u4f18\u5316\uff08\u8981\u52a0\u5165\u7a7a\u961f\u5217\u7684\u5224\u65ad\uff0c\u5426\u5219\u4f1aRE\uff09\n                        else mession.push_back(tar.to);\n                        inq[tar.to]=true;//\u662f\u5426\u5728\u961f\u5217\u4e2d\n                    }\n                }\n            }\n        }\n        if(dis[t]==INF) return;//\u96c6\u4e2d\u7684EK\u5199\u6cd5\uff08\u53ea\u6709\u4e00\u4e2a\u51fd\u6570\uff09\uff08\u6b64\u65f6\u4e0d\u53ef\u589e\u5e7f\uff09\n        int ret=INF;\n        for(int i=t;i!=s;i=table[pre[i]].from)\n            if(ret>table[pre[i]].re)\n                ret=table[pre[i]].re;//\u83b7\u53d6\u6700\u5c0f\u7684\u53ef\u589e\u5e7f\u6d41\u91cf\n        for(int i=t;i!=s;i=table[pre[i]].from) table[pre[i]].re-=ret,table[pre[i]^1].re+=ret;//\u589e\u5e7f\n        max_f+=ret,min_c+=ret*dis[t];\n    }\n}\ninline int read(){//\u4e0d\u7528\u8003\u8651\u8d1f\u6570\u7684\u8bfb\u5165\u4f18\u5316\n    int num=0;\n    char c;\n    while(isspace(c=getchar()));\n    while((num=num*10+c-48)&&isdigit(c=getchar()));\n    return num;\n}\nint main(){\n    n=read(),m=read(),s=read(),t=read();\n    memset(nxt,-1,sizeof(nxt));//\u6ce8\u610f\u7ed3\u675f\u7684\u6807\u8bb0\n    for(int i=1;i<=m;i++){\n        int x=read(),y=read(),c1=read(),c2=read();\n        table[++tot]=Edge(x,y,c1,c2);\n        nxt[tot]=fr[x],fr[x]=tot;\n        table[++tot]=Edge(y,x,0,-c2);//\u65b9\u4fbf\u76f4\u63a5\u8c03\u7528\u6b63\u5411\u8fb9\u9006\u5411\u8fb9\n        nxt[tot]=fr[y],fr[y]=tot;\n    }\n    MCMF();\n    printf(\"%d %d\",max_f,min_c);\n    return 0;\n}\n```",
        "postTime": 1500365817,
        "uid": 43464,
        "name": "Creeper_LKF",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u8d39\u7528\u6d41\n\n\n\u56e0\u4e3a\u8981\u6ce8\u610f\u8d39\u7528\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u7528SPFA\u627e\u8d39\u7528\u6700\u5c0f\u7684\u589e\u5e7f\u8def\uff0c\u4e0d\u8981\u7528Dijkstra\uff08\u56e0\u4e3a\u6709\u8d1f\u8fb9\u6743\uff09\uff08\u7136\u800c\u4e00\u822c\u60c5\u51b5\u4e0bSPFA\u66f4\u597d\u5199\uff0c\u6240\u4ee5\u8fd9\u4e2a\u8b66\u544a\u662f\u5e9f\u8bdd\uff09\uff1b\n\n\n\u7136\u540e\u589e\u5e7fap()\u3002\n\n\n\u51e0\u4e2a\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n\n\u53cd\u8fb9\u8d39\u7528\u4e3a\u5176\u5bf9\u5e94\u8fb9\u7684\u76f8\u53cd\u6570\uff1b\n\n\n\u961f\u5217\u9996\u5c3e\u6307\u9488\u8bb0\u5f97\u6e05\u96f6\uff1b\uff08RE\u4e8650%\u5de6\u53f3\uff09\n\n\n**\u6709\u4e00\u79cd\u5e38\uff08la\uff09\u6570\uff08ji\uff09\u7ea7\u4f18\u5316\u6280\u5de7\u53eb\u5148\u7559\u4e2a\u5751\uff0c\u53cd\u8fb9\u968f\u7528\u968f\u5efa\u3002\uff08\u4f18\u5316\u7a0b\u5ea6\u8fbe\u4e0d\u5230O\uff08\uff09\\*0.5\uff0c\u4f46\u662f\u591f\u7528\uff0c\u800c\u4e14\u5f88\u597d\u5b9e\u73b0\uff09\uff1b**\n\n**\u4e00\u4e2a\u4e24\u4e2a\u70b9\u4e00\u76f4\u88ab\u5361\uff0c\u53c8\u770b\u4e0d\u61c2\u697c\u4e0b\u5927\u795e\u9898\u89e3\uff08\u50cf\u6211\u4e00\u6837\uff09\u7684\u540c\u5b66\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002**\n\n\n\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n\n```cpp\n 1 #include<cstdio>\n 2 #include<cstring>\n 3 #define maxn 5010\n 4 #define maxm 100010\n 5 #define maxt 2139062143\n 6 int n,m,s,t,nflow,nfee,flow,fee;\n 7 int a,b,c,d;\n 8 long long la,lb;\n 9 int h[maxn],hs=1;\n10 struct edge{int s,n,w,f;}e[maxm];\n11 int w[maxn];\n12 int p[maxn][2];\n13 int q[maxm],head,tail;\n14 int min(int x,int y){return x<y?x:y;}\n15 int spfa(){\n16     memset(w,0x7f,sizeof(w));\n17     head=tail=0;\n18     q[head++]=s,w[s]=0;\n19     while(head>tail){\n20         a=q[tail++];\n21         for(int i=h[a];i;i=e[i].n)\n22         if(e[i].w){\n23             la=e[i].f,lb=w[a],la+=lb,lb=w[e[i].s];\n24             if(la<lb){\n25                 w[e[i].s]=la;\n26                 p[e[i].s][0]=i;\n27                 p[e[i].s][1]=a;\n28                 q[head++]=e[i].s;\n29             }\n30         }\n31     }\n32     return w[t];\n33 }\n34 int ap(int k,int v){\n35     if(k==s) return v;\n36     int ret=ap(p[k][1],min(e[p[k][0]].w,v));\n37     if(!e[p[k][0]^1].f) e[p[k][0]^1]=(edge){p[k][1],h[k],0,-e[p[k][0]].f},h[k]=p[k][0]^1;\n38     e[p[k][0]].w-=ret;\n39     e[p[k][0]^1].w+=ret;\n40     return ret;\n41 }\n42 bool Mcmf(){\n43     nfee=spfa();\n44     if(nfee==maxt) return false;\n45     nflow=ap(t,maxt);\n46     flow+=nflow;\n47     fee+=nflow*nfee;\n48     return true;\n49 }\n50 int main(){\n51     scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n52     for(int i=1;i<=m;i++){\n53         scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n54         e[++hs]=(edge){b,h[a],c,d},h[a]=hs++;\n55     }\n56     while(Mcmf());\n57     printf(\"%d %d\\n\",flow,fee);\n58     return 0;\n59 }\n\u6765\u6e90\uff1ahttp://www.cnblogs.com/J-william/p/6506067.html\n```",
        "postTime": 1490769829,
        "uid": 21020,
        "name": "Long\u00b7J\u00b7William",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3381 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3011"
    }
]