[
    {
        "content": "\u8fd9\u9898\u600e\u4e48\u5c31\u9ed1\u4e86\uff08\u6211\u8fd9\u4e48\u83dc\u600e\u4e48\u4f1a\u505a\u5f97\u51fa\u6765\u9ed1\u9898\u5462\uff09\n\n\u8fd9\u9898\u600e\u4e48\u505a\u5462\uff1f\u5176\u5b9e\u4e3b\u8981\u662f\u8981\u7ec6\u7ec6\u8bfb\u4e00\u4e0b\u90a3\u4e24\u4e2a\u6027\u8d28\n\n\u5bf9\u4e8e1\uff0c\u6bcf\u4e2a\u81ea\u5df1\u4e0d\u540c\u7684\u9886\u57df\u7684\u70b9\u4e4b\u95f4\u90fd\u8981\u6709\u8fb9\n\n\u5bf9\u4e8e2\uff0c\u81ea\u5df1\u7684\u9886\u57df\u7684\u6bcf\u4e00\u4e2a\u70b9\u8981\u548c\u5bf9\u9762\u7684\u6bcf\u4e00\u4e2a\u9886\u57df\u7684\u6bcf\u4e00\u4e2a\u70b9\u8981\u6709\u8fb9\n\n\u8ba4\u771f\u770b\u7740\u4e24\u4e2a\u6761\u4ef6\u662f\u4e0d\u662f\u4f1a\u53d1\u73b0\u5982\u679c\u5bf9\u9762\u62ff\u4e86\u4e00\u4e2a\u9886\u57df\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9886\u57df\u4f5c\u4e3a\u81ea\u5df1\u7684\u9886\u57df\u4e5f\u662f\u6ee1\u8db3\u6761\u4ef6\u7684\n\n#### \u6240\u4ee5\u4e0d\u8981\u7ed9\u8d70\u72d7\u7559\u9886\u57df\n\n\u597d\u4e86\u73b0\u5728\u95ee\u9898\u5c31\u662f\u600e\u4e48\u5206\u914d\u8fd9\u4e2a\u9886\u57df\u4e86\n\n\u663e\u7136\u5bf9\u4e8e\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u82e5\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u8fb9\uff0c\u5219\u8981\u5212\u5206\u5230\u540c\u4e00\u4e2a\u9886\u57df\u53bb\n\n\u6240\u4ee5\u600e\u4e48\u5212\u5206\u9886\u57df\uff1f\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9A\u5b83\u5fc5\u5b9a\u5c5e\u4e8e\u4e00\u4e2a\u9886\u57df\uff0c\u90a3\u4e48\u6211\u4eec\u4ee5\u8fd9\u4e2a\u70b9\u8fdb\u884c\u6269\u5c55\uff0c\u6211\u4eec\u8981\u8fd9\u4e2a\u9886\u57df\u5c3d\u91cf\u591a\uff0c\u56e0\u6b64\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\u8868\u793a\u548c\u5f53\u524d\u679a\u4e3e\u7684A\u5728\u4e0d\u5728\u4e00\u4e2a\u9886\u57df\u5185\u3002\u5bf9\u4e8e\u8fd9\u4e2aA\u70b9\u6cbf\u7740\u4ed6\u7684\u51fa\u8fb9\u62d3\u5c55\uff0c\u6240\u6709\u88abA\u8bbf\u95ee\u5230\u7684\u70b9\u90fd\u662f\u5141\u8bb8\u4e0d\u548cA\u5728\u540c\u4e00\u4e2a\u9886\u57df\uff0c\u6240\u4ee5\u5076\u6ca1\u6709\u88abA\u8bbf\u95ee\u5230\u7684\u70b9\u5fc5\u5b9a\u548cA\u5728\u540c\u4e00\u4e2a\u9886\u57df\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u7528\u4e00\u4e2a\u6876\u6765\u7ef4\u62a4\uff0c\u6bcf\u6b21\u5c06\u5176++\uff0c\u628a\u8fd9\u4e9b\u6ca1\u6709\u88ab\u8bbf\u95ee\u5230\u7684\u70b9\u8fdb\u5165\u961f\u5217.\u7136\u540e\u6211\u4eec\u8981\u7528\u4e00\u4e2alimit\u7ef4\u62a4\u8fd9\u4e2a\u9886\u57df\u5927\u5c0f\uff0c\u904d\u5386\u8fd9\u4e2a\u6876\uff0c\u5c06\u904d\u5386\u5230\u7684\u70b9\u5982\u679c\u4ed6\u7684\u6876\u7684\u503c\u5c0f\u4e8elimit\uff0c\u90a3\u4e48\u8bf4\u660e\u8fd9\u4e2a\u70b9\u4e0d\u80fd\u88ab\u8fd9\u4e2a\u9886\u57df\u7684\u6240\u6709\u70b9\u5230\u8fbe\uff0c\u56e0\u6b64\u4ed6\u8981\u5c5e\u4e8e\u8fd9\u4e2a\u9886\u57df\uff0c\u6309\u7167\u8fd9\u4e2a\u65b9\u6cd5\u7ef4\u62a4\u5373\u53ef\u3002\u5177\u4f53\u7ec6\u8282\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(m+nk),k\u4e3a\u9886\u57df\u6570\u91cf\uff0cm\u4e3a\u8fb9\u6570\n\n\u6781\u7aef\u60c5\u51b5\u9000\u5316n^2?\n\n\u4e0d\u4f1a\u7684\uff0c\u56e0\u4e3a\u6b64\u9898m\u4e0d\u5927\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053k\u4e0d\u4f1a\u5f88\u5927\uff0c\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u80fd\u591f\u901a\u8fc7\u6b64\u9898\u3002\u82e5\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u6b22\u8fce\u6307\u51fa\u3002\n\n### ~~\uff08\u8def\u8fc7\u70b9\u4e2a\u8d5e\u5440\uff09~~\n\n\n\ncode\uff1a\n```\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\n\nstruct note{\n    int seq,val,act;\n}que[4000008];\nint n,m,l,maxp;\nint x[4000008],y[4000008],_last[4000008],_next[4000008];\nint vis[4000008],cnt[4000008],fa[4000008],tp[4000006];\n\ninline void edge(int u,int v){\n    l++; x[l]=u; y[l]=v; _next[l]=_last[u]; _last[u]=l;\n}\ninline int _max(int a1,int a2){if (a1<a2) return a2; else return a1;}\nbool cmp(int a1,int a2){return a1<a2;}\n\ninline void dividing(int);\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for (register int i=1;i<=n;i++) _last[i]=-1;\n    for (register int i=1;i<=m;i++){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        edge(u,v),edge(v,u);\n    }\n    for (register int i=1;i<=n;i++)\n        if (!vis[i]) dividing(i);\n    printf(\"%d\\n\",maxp);\n    sort(cnt+1,cnt+1+maxp,cmp);\n    for (register int i=1;i<=maxp;i++) printf(\"%d \",cnt[i]);\n}\n\ninline void dividing(int pos)\n{\n    \n    for (register int i=1;i<=n;i++) fa[i]=i,tp[i]=vis[i];\n    register int limit=0,lef=1,rig=n,res=n,deep=n,spp=1;\n    for (register int i=1;i<=n;i++) que[i].seq=i,que[i].val=0;//inti\n    while (res && lef<=deep && deep<=10*n)\n      if (que[lef].val<limit || spp)//\u82e5\u4e3a\u7b2c\u4e00\u4e2a\u6216\u8005\u8fd9\u4e2a\u70b9\u7684\u6876\u503c\u6ca1\u6709\u5230\u8fbelimit\n        {\n            pos=que[lef].seq; lef++; \n            if (vis[pos]) continue; \n            vis[pos]=1;\n            for (register int j=_last[pos];j!=-1;j=_next[j]){\n            \tint tar=y[j];\n            \twhile (fa[tar]!=0 && fa[tar]!=tar) tar=fa[tar];\n                que[tar].val++;\n            }\n            limit++;\n            res--; spp=0;\n        }else {\n            if (que[lef].val==999999999) {lef++; continue;}\n            rig++;\n            fa[que[lef].seq]=rig;\n            que[rig]=que[lef];\n            que[lef].val=999999999;\n            lef++;\n\t\t\tdeep++;//\u904d\u5386\u51fa\u8fb9\uff0c\u66f4\u65b0\u6700\u5927deep\uff08\u56e0\u4e3a\u6709\u4e0b\u9762\u7684\u79fb\u52a8\u64cd\u4f5c\uff0c\u4e0d\u80fd\u5230n\u5c31\u505c\n            //\u8fd9\u4e2a\u70b9\u5230\u76ee\u524d\u4e3a\u6b62\u6210\u7acb\u5e76\u4e0d\u4ee3\u8868\u5b8c\u5168\u6210\u7acb\uff0c\u8981\u5c06\u4ed6\u79fb\u52a8\u5230\u961f\u5217\u672b\u5c3e\uff0cfa\u6570\u7ec4\u7ef4\u62a4\u4ed6\u7684\u65b0\u4f4d\u7f6e\u3002\n        }\n    maxp++;\n    for (register int i=1;i<=n;i++) \n        if (tp[i]!=vis[i]) cnt[maxp]++;//\u7edf\u8ba1\u7b54\u6848\n}\n}\n```\n\uff08\u76f4\u63a5\u590d\u5236\u6284\u88ad\u4f1ace)\n\uff08bug\u4e0d\u5f71\u54cd\u9605\u8bfb\uff09\n\uff08\u8fd9\u662f\u91cd\u53d1\u7684\u4e4b\u524d\u90a3\u4e2a\u6709\u4e00\u70b9bug\uff09",
        "postTime": 1541568264,
        "uid": 14904,
        "name": "smzzl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4833 \u3010\u8428\u5854\u5c3c\u4e9a\u7684\u4e00\u751f\u4e4b\u654c\u3011"
    },
    {
        "content": "> \u7ed9\u5b9a\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u56fe\uff0c\u6c42\u8865\u56fe\u7684\u8fde\u901a\u5757\u4e2a\u6570\u4ee5\u53ca\u5404\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\n\n\u6709\u4e2a $\\text{naive}$ \u7684\u60f3\u6cd5\u5c31\u662f\u76f4\u63a5\u66b4\u529b\u5efa\u51fa\u8865\u56fe\u7136\u540e\u53bb\u8dd1\uff0c\u4f46\u662f\u8fd9\u6837\u8fb9\u6570\u662f $n^2$ \u7ea7\u522b\u7684\uff0c\u663e\u7136\u4f1a $\\text{T}$\u3002\n\n\u53d1\u73b0\u53ea\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5efa\u51fa\u751f\u6210\u6811\u3002\n\n\u8003\u8651 $\\text{BFS}$ \u6811\uff0c\u679a\u4e3e\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9 $u$ \u6807\u8bb0\u5b83\u5e76\u628a\u5b83\u52a0\u5165\u5230\u961f\u5217\uff0c\u5148\u628a\u5b83\u5728 **\u539f\u56fe** \u76f4\u63a5\u76f8\u90bb\u7684\u70b9\u6807\u8bb0\uff0c\u7136\u540e\u5c06\u5b83\u5728 **\u8865\u56fe** \u4e0a\u76f8\u90bb\u4e14\u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9 $v$ \u6807\u8bb0\u5e76\u653e\u5165\u961f\u5217\u3002\n\n\u53ef\u4ee5\u76f4\u63a5\u7528\u94fe\u8868\u76f4\u63a5\u7ef4\u62a4\u51fa\u6765\u8fd9\u4e2a $v$\u3002\n\n\u8fd9\u6837\u6bcf\u4e2a\u70b9\u5728\u94fe\u8868\u4e2d\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u904d\uff0c\u4e14\u8fd9\u4e48\u505a\u679a\u4e3e\u4ec5\u6d89\u53ca\u5230\u6811\u8fb9\uff0c\u800c\u5bf9 $u$ \u679a\u4e3e\u5728\u539f\u56fe\u4e0a\u76f8\u90bb\u7684\u70b9\u4e5f\u53ea\u7b49\u4e8e\u679a\u4e3e\u539f\u56fe\u4e0a\u7684\u8fb9\u7684\u590d\u6742\u5ea6\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(n+m)$ \u7684\u3002\n\n[\u53cc\u500d\u7ecf\u9a8c](https://www.luogu.com.cn/problem/P3452)\n\n$\\texttt{Code:}$\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long \n#define ull unsigned long long\n#define fir first\n#define sec second\nusing namespace std;\nnamespace IO{\n\t#define File(x,y) freopen(#x,\"r\",stdin),freopen(#y,\"w\",stdout);\n\t#define fill(a,b,c,d) memset(a,b,sizeof(c)*(d+1))\n\t#define copy(a,b,c,d) memcpy(a,b,sizeof(c)*(d+1))\n\t#define fillall(x,y) memset(x,y,sizeof(x))\n\t#define copyall(x,y) memcpy(x,y,sizeof(x))\n\tinline int read(){\n\t\tint w=0,f=1; char ch=getchar();\n\t\twhile(ch<'0'||ch>'9'){if(ch=='-') f=-1; ch=getchar();}\n\t\twhile(ch>='0'&&ch<='9'){w=(w<<1)+(w<<3)+(ch^48); ch=getchar();}\n\t\treturn w*f;\n\t}\n}\nusing namespace IO;\nnamespace CL{\n\n\tconst int maxn=1e5+5,maxm=2e6+5;\n\n\tint n,m,top;\n\tint stk[maxn];\n\tbool vis[maxn],org[maxn];\n\tqueue<int> q;\n\tnamespace Graph{\n\t\tint head[maxn],id;\n\t\tstruct e{int v,next;}edge[maxm<<1];\n\t\tinline void add(int u,int v){\n\t\t\tedge[++id]=(e){v,head[u]};\n\t\t\thead[u]=id;\n\t\t}\n\t}using namespace Graph;\n\tnamespace list{\n\t\tint pre[maxn],nxt[maxn];\n\t\tinline void init(){\n\t\t\tnxt[0]=1;\n\t\t\tfor(int i=1;i<n;i++) pre[i+1]=i,nxt[i]=i+1;\n\t\t}\n\t\tinline void del(int x){pre[nxt[x]]=pre[x],nxt[pre[x]]=nxt[x];}\n\t}using namespace list;\n\n\tinline int main(){\n\t\tn=read(),m=read();\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tint x=read(),y=read();\n\t\t\tadd(x,y),add(y,x);\n\t\t}\n\t\tinit();\n\t\tfor(int i=1;i<=n;i++) if(!vis[i]){\n\t\t\tvis[i]=1,stk[++top]=1;\n\t\t\tdel(i),q.push(i);\n\t\t\twhile(!q.empty()){\n\t\t\t\tint u=q.front(); q.pop();\n\t\t\t\tfor(int j=head[u];j;j=edge[j].next){\n\t\t\t\t\tint v=edge[j].v;\n\t\t\t\t\tif(!vis[v]) org[v]=1;\n\t\t\t\t}\n\t\t\t\tfor(int j=nxt[0];j;j=nxt[j]){\n\t\t\t\t\tif(!org[j]){\n\t\t\t\t\t\tvis[j]=1,stk[top]++;\n\t\t\t\t\t\tdel(j),q.push(j);\n\t\t\t\t\t}\n\t\t\t\t\telse org[j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsort(stk+1,stk+1+top);\n\t\tprintf(\"%d\\n\",top);\n\t\tfor(int i=1;i<=top;i++) printf(\"%d \",stk[i]); puts(\"\");\n\t\treturn 0;\n\t}\n}\nsigned main(){return CL::main();}\n```",
        "postTime": 1635548905,
        "uid": 226113,
        "name": "\u706b\u7fbd\u767d\u65e5\u751f",
        "ccfLevel": 0,
        "title": "\u300c\u9898\u89e3\u300dP4833 \u8428\u5854\u5c3c\u4e9a\u7684\u4e00\u751f\u4e4b\u654c"
    },
    {
        "content": "## Description\n\n\u7ed9\u4f60\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u56fe\uff0c\u8ba9\u4f60\u6c42\u51fa\u8fd9\u4e2a\u56fe\u7684\u8865\u56fe\u7684\u8054\u901a\u5757\u7684\u4e2a\u6570\u548c\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u5927\u5c0f\u3002\n\n## Solution\n\n\u9996\u5148\uff0c\u641e\u6e05\u695a\u9898\u610f\u4ee5\u540e\u6211\u4eec\u53ef\u4ee5\u628a\u8865\u56fe\u7684\u8fb9\u5168\u90e8\u5efa\u51fa\u6765\uff0c\u4e4b\u540e\u518d\u6c42\u8054\u901a\u5757\u7684\u4e2a\u6570\u548c\u5927\u5c0f\u3002\n\n\u4f46\u662f\u5f88\u660e\u663e\uff0c\u5efa\u7acb\u8865\u56fe\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $n ^ 2$ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u5982\u679c\u628a\u8865\u56fe\u7684\u8fb9\u5168\u90e8\u5efa\u51fa\u6765\u53ea\u80fd\u8fc7 $1 \\leq n \\leq 10 ^ 3$ \u7684\u5206\u3002\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u5efa\u7acb\u8865\u56fe\uff0c\u8981\u6362\u4e00\u79cd\u65b9\u5f0f\uff0c\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u539f\u56fe\u6765\u8fdb\u884c\u8054\u901a\u5757\u7684\u4e2a\u6570\u7edf\u8ba1\u3002\n\n\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6ca1\u6709\u88ab $\\text{vis}$ \u6807\u8bb0\u8fc7\u7684\u70b9\uff0c\u52a0\u5165\u961f\u5217\uff0c\u8bf4\u660e\u4e4b\u524d\u8fd9\u4e2a\u70b9\u6ca1\u6709\u88ab\u904d\u5386\u5230\uff0c\u4e4b\u540e\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u679a\u4e3e\u5b83\u80fd\u5230\u8fbe\u7684\u70b9\uff0c\u628a\u8fd9\u4e9b\u70b9 $\\text{col}$ \u6807\u8bb0\u4e00\u4e0b\uff0c\u8bf4\u660e\u5728\u539f\u56fe\u4e0a\u9762\u80fd\u591f\u5230\u8fbe\uff0c\u4e5f\u5c31\u662f\u8bf4\u660e\u5728\u8865\u56fe\u4e0a\u4e0d\u80fd\u591f\u5230\u8fbe\uff0c\u4e4b\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u6ca1\u88ab\u6807\u8bb0 $\\text{col}$ \u548c $\\text{vis}$\uff0c\u5c31\u628a\u8fd9\u4e2a\u70b9\u52a0\u5165\u961f\u5217\u3002\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u6837\u505a\u4f7f\u5f97\u7a7a\u95f4\u590d\u6742\u5ea6\u5927\u5927\u964d\u4f4e\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u9ad8\u4e86\uff0c\u53d8\u4e3a\u4e86 $O(n ^ 2)$ \u7ea7\u522b\u3002\n\n\u6211\u4eec\u5982\u4f55\u52a0\u5feb\u5bfb\u627e\u6ca1\u88ab\u6807\u8bb0\u8fc7\u7684\u70b9\u7684\u4f4d\u7f6e\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u94fe\u8868\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5df2\u7ecf\u88ab\u5bfb\u627e\u8fc7\u4e86\uff0c\u5c31\u628a\u8fd9\u4e2a\u70b9\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u522b\u7684\u8054\u901a\u5757\u91cc\u9762\uff0c\u5e76\u4e14\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u8fd9\u4e2a\u8054\u901a\u5757\u6807\u8bb0\u8fc7\u4e86\uff0c\u4e5f\u4e0d\u9700\u8981\u518d\u6807\u8bb0\u4e00\u6b21\uff0c\u8fd9\u4e2a\u70b9\u4e0d\u4f1a\u5bf9\u540e\u9762\u4ea7\u751f\u4efb\u4f55\u8d21\u732e\uff0c\u6240\u4ee5\u94fe\u8868\u91cc\u9762\u53ea\u4f1a\u5b58\u7740\u6ca1\u6709\u7528\u5230\u8fc7\u7684\u70b9\u3002\n\n\u4e8e\u662f\uff0c\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u964d\u4e3a\u4e86 $O(n + m)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u4e3b\u8981\u770b\u4ee3\u7801\u5427\uff0c\u7b14\u8005\u7684\u8bed\u6587\u5b9e\u5728\u5dee\u52b2\u3002\n\n## Code\n\n```\n#include <cstdio>\n#include <cmath>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n#include <queue> \nusing namespace std;\nconst int Maxk = 2e6 + 10;\nint nex[Maxk],pre[Maxk];\nstruct Node {\n  int nex_,to_;\n}e[Maxk << 1];\nint n,m,cnt;\nbool vis[Maxk];\nint head[Maxk];\nint ans[Maxk],ret,col[Maxk];\nqueue <int> qp;\ninline int read()\n{\n\tint s = 0, f = 0;char ch = getchar();\n\twhile (!isdigit(ch)) f |= ch == '-', ch = getchar();\n\twhile (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -s : s;\n}\ninline void Add_edge(int from,int to)\n{\n  e[++ cnt].to_ = to;\n  e[cnt].nex_ = head[from];\n  head[from] = cnt;\n}\ninline void Del(int x)\n{\n  nex[pre[x]] = nex[x];//\u94fe\u8868\u5220\u9664\n  pre[nex[x]] = pre[x];\n}\nsigned main()\n{\n  n = read(),m = read();\n  for(int i = 1;i <= n;i ++) nex[i] = i + 1,pre[i] = i - 1;//\u94fe\u8868\u521d\u59cb\u5316\n  for(int i = 1;i <= m;i ++) {\n    int x = read(),y = read();\n    Add_edge(x,y),Add_edge(y,x); //\u539f\u56fe\u8fde\u8fb9\n  }\n  nex[n] = 0,pre[0] = 1;\n  for(int i = 1;i <= n;i ++) {\n    if(vis[i]) continue;//\u5982\u679c\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u627e\u8fc7\u4e86\uff0c\u8df3\u8fc7\n    vis[i] = true;\n    ans[++ ret] = 1;//\u65b0\u7684\u8054\u901a\u5757\uff0c\u56e0\u4e3a\u6bcf\u6b21\u961f\u5217\u91cc\u9762\u90fd\u662f\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u6309\u7167\u8fde\u901a\u5757\u8fdb\u884c\u5bfb\u627e\n    qp.push(i);//\u961f\u5217\u52a0\u5165\u8fd9\u4e2a\u70b9\n    Del(i);//\u5df2\u7ecf\u6ca1\u6709\u7528\u4e86\uff0c\u5220\u9664\n    while(!qp.empty()) {\n      int x = qp.front();\n      qp.pop();\n      for(int j = head[x];j;j = e[j].nex_) {\n        int y = e[j].to_;\n        if(!vis[y]) col[y] = 1;//\u539f\u56fe\u4e0a\u9762\u80fd\u591f\u5230\u8fbe\u7684\u70b9\uff0c\u5e76\u4e14\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6253\u4e0a\u6807\u8bb0\uff0c\u8865\u56fe\u4e0d\u80fd\u8bbf\u95ee\u3002\n      }\n      for(int j = nex[0];j;j = nex[j]) {//\u679a\u4e3e\u94fe\u8868\n        if(!col[j]) {//\u5982\u679c\u8fd9\u4e2a\u70b9\u8865\u56fe\u80fd\u591f\u8bbf\u95ee\u5230\n          vis[j] = true;\n          ans[ret] ++;//\u8054\u901a\u5757\u91cc\u9762\u7684\u70b9\u6570\u76ee ++\n          Del(j);\n          qp.push(j);\n        }\n        else col[j] = 0;//\u5426\u5219\u6e05\u7a7a col \u6570\u7ec4\uff0c\u4e3a\u4e0b\u4e00\u6b21\u5bfb\u627e\u51c6\u5907\u3002\n      }\n    }\n  }\n  sort(ans + 1,ans + ret + 1);//\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\u4e0d\u4e00\u5b9a\u662f\u6700\u5927\u7684\uff0c\u5148\u6392\u5e8f\u3002\n  cout << ret << endl;\n  for(int i = 1;i <= ret;i ++) cout << ans[i] << \" \";\n  cout << endl;\n  return 0; \n}\n```",
        "postTime": 1629638234,
        "uid": 381904,
        "name": "\u659c\u63fd\u6b8b\u7bab",
        "ccfLevel": 6,
        "title": "\u3010P4833 \u8428\u5854\u5c3c\u4e9a\u7684\u4e00\u751f\u4e4b\u654c\u3011\u9898\u89e3"
    }
]