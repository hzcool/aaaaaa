[
    {
        "content": "\u8fd9\u4e00\u9898\u662f\u4e00\u4e2a\u597d\u9898\u3002\u5982\u679c\u77e5\u9053\u601d\u8def\u4e86\uff0c\u4fbf\u4f1a\u975e\u5e38\u7b80\u5355\u3002\u4f46\u662f\u5982\u679c\u4e0d\u77e5\u9053\u601d\u8def\uff0c\u5374\u6bd4\u8f83\u7684\u96be\u60f3\u51fa\u6765\u3002\n\n\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u3002\u9996\u5148\uff0c\u80af\u5b9a\u8981\u660e\u786e\u4e00\u70b9\uff0c\u90a3\u5c31\u662f\u8fd9\u4e2a\u56fe\u662f\u4e0d\u4e00\u5b9a\u8054\u901a\u7684\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u6574\u5f20\u56fe\u5207\u5206\u6210\u8bb8\u591a\u5206\u5f00\u7684\u8fde\u540c\u5b50\u56fe\u6765\u5904\u7406\u3002\u7136\u800c\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u662f\uff1a\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u8fde\u901a\u56fe\uff1f\n\n\u4e4d\u770b\u4e0b\u53bb\uff0c\u4f3c\u4e4e\u65e0\u4ece\u4e0b\u624b\uff0c\u56e0\u4e3a\u65b9\u6848\u597d\u50cf\u6709\u5f88\u591a\u79cd\uff0c\u6839\u672c\u5c31\u679a\u4e3e\u4e0d\u5b8c\u3002\u4f46\u662f\uff0c\u5173\u952e\u8981\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u91cd\u8981\u7684\u4e24\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u628a\u5b83\u62bd\u8c61\u6210\u8fd9\u4e24\u4e2a\u8981\u7d20\uff1a\n\n##\u2460\u6bcf\u4e00\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u70b9\u4e2d\uff0c\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u88ab\u9009\u4e2d\u3002\u2461\u6bcf\u4e00\u6761\u8fb9\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\uff0c\u4e0d\u80fd\u88ab\u540c\u65f6\u9009\u4e2d\u3002\u7531\u6b64\uff0c\u53ef\u4ee5\u63a8\u65ad\u51fa\uff1a\n\n#\u6bcf\u4e00\u6761\u8fb9\u90fd\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u88ab\u5b83\u6240\u8fde\u63a5\u7684\u70b9\u88ab\u9009\u4e2d\u3002\n\n\u53c8\u56e0\u4e3a\u6211\u4eec\u8981\u5904\u7406\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u56fe\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\u56fe\u7684\u70b9\u7684\u9009\u6cd5\uff0c\u53ef\u4ee5\u8003\u8651\u5230\u76f8\u90bb\u7684\u70b9\u67d3\u6210\u4e0d\u540c\u7684\u989c\u8272\u3002\n\n#\u4e8e\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u8981\u4e0d\u5c31\u53ea\u6709\u4e24\u79cd\u9009\u6cd5\uff08\u56e0\u4e3a\u53ef\u4ee5\u5168\u90e8\u9009\u67d3\u6210\u4e00\u79cd\u8272\u7684\uff0c\u4e5f\u53ef\u4ee5\u5168\u90e8\u9009\u67d3\u6210\u53e6\u4e00\u79cd\u8272\u7684\uff09\uff0c\u8981\u4e0d\u5c31\u662fimpossible\uff01\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6bcf\u4e00\u4e2a\u5b50\u8fde\u901a\u56fe\uff0c\u5bf9\u5b83\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u7136\u540e\u53d6\u4e24\u79cd\u67d3\u8272\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u6700\u540e\u6c47\u603b\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u53e6\u5916\uff0c\u8981\u5224\u65adimpossible\uff0c\u53ea\u9700\u8981\u52a0\u4e00\u4e2aused\u6570\u7ec4\uff0c\u8bb0\u5f55\u5df2\u7ecf\u904d\u5386\u4e86\u54ea\u4e9b\u70b9\u3002\u5982\u679c\u91cd\u590d\u904d\u5386\u4e00\u4e2a\u70b9\uff0c\u4e14\u4e0e\u4e0a\u4e00\u6b21\u7684\u989c\u8272\u4e0d\u540c\uff0c\u5219\u5fc5\u7136\u662fimpossible\u7684\u3002\n\n\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cmath>\n#include<string>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstruct Edge\n{\n    int t;\n    int nexty;\n}edge[200000];\nint head[20000];\nint cnt=0;//\u94fe\u5f0f\u524d\u5411\u661f\nvoid add(int a,int b)//\u5b58\u8fb9\n{\n    cnt++;\n    edge[cnt].t=b;\n    edge[cnt].nexty=head[a];\n    head[a]=cnt;\n}\nbool used[20000]={0};//\u662f\u5426\u904d\u5386\u8fc7\nint col[20000]={0};//\u6bcf\u4e00\u4e2a\u70b9\u7684\u67d3\u8272\nint sum[2];//\u9ed1\u767d\u4e24\u79cd\u67d3\u8272\u5404\u81ea\u7684\u70b9\u6570\nbool dfs(int node,int color)//\u67d3\u8272\uff08\u8fd4\u56defalse\u5373impossible\uff09\n{\n    if(used[node])//\u5982\u679c\u5df2\u88ab\u67d3\u8fc7\u8272\n    {\n        if(col[node]==color)return true;//\u5982\u679c\u4ecd\u662f\u539f\u6765\u7684\u989c\u8272\uff0c\u5373\u53ef\u884c\n        return false;//\u975e\u539f\u6765\u7684\u989c\u8272\uff0c\u5373\u4ea7\u751f\u4e86\u51b2\u7a81\uff0c\u4e0d\u53ef\u884c\n    }\n    used[node]=true;//\u8bb0\u5f55\n    sum[col[node]=color]++;//\u8fd9\u4e00\u79cd\u989c\u8272\u7684\u4e2a\u6570\u52a01\uff0c\u4e14\u6b64\u70b9\u7684\u989c\u8272\u4e5f\u8bb0\u5f55\u4e0b\u6765\n    bool tf=true;//\u662f\u5426\u53ef\u884c\n    for(int i=head[node];i!=0&&tf;i=edge[i].nexty)//\u904d\u5386\u8fb9\n    {\n        tf=tf&&dfs(edge[i].t,1-color);//\u662f\u5426\u53ef\u4ee5\u7ee7\u7eed\u67d3\u8272\n    }\n    return tf;//\u8fd4\u56de\u662f\u5426\u5b8c\u6210\u67d3\u8272\n}\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int a,b;\n    while(m--)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n        add(b,a);//\u5b58\u7684\u662f\u6709\u5411\u8fb9\uff0c\u6240\u4ee5\u5b58\u4e24\u6b21\n    }\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(used[i])continue;//\u5982\u679c\u6b64\u70b9\u5df2\u88ab\u5305\u542b\u4e3a\u4e00\u4e2a\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\u7684\u5b50\u56fe\uff0c\u5219\u4e0d\u9700\u91cd\u590d\u904d\u5386\n        sum[0]=sum[1]=0;//\u521d\u59cb\u5316\n        if(!dfs(i,0))//\u5982\u679c\u4e0d\u80fd\u67d3\u8272\n        {\n            printf(\"Impossible\");\n            return 0;//\u76f4\u63a5\u8df3\u51fa\n        }\n        ans+=min(sum[0],sum[1]);//\u52a0\u4e0a\u5c0f\u7684\u4e00\u4e2a\n    }\n    printf(\"%d\",ans);//\u8f93\u51fa\u7b54\u6848\n    return 0;\n}\n```",
        "postTime": 1508048515,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "//\u5e76\u67e5\u96c6\u89e3\u6cd5\uff1a\n\n\u50cf[\u56e2\u4f19]\u8fd9\u9898\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u53bb\u770b\u770b\uff1b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint f[10001],a,b,n,m,t[10001],bj[10001],h[10001],ans;\nint find(int x)//\u6a21\u677f\u51fd\u6570\uff1b\n{\n    if(f[x]!=x) f[x]=find(f[x]);\n    return f[x];\n}\nvoid xx(int x,int y)//\u5224\u65ad\u51fd\u6570\uff1b\n{\n    int qq=find(x);\n    if(qq!=y)//\u5982\u679c\u4ed6\u4eec\u7236\u4eb2\u4e0d\u76f8\u7b49\u5c06\u4ed6\u4eec\u5408\u5e76\uff1b\n    {\n        f[y]=qq;\n        t[qq]+=t[y];\n    }\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        f[i]=i;\n        t[i]=1;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        int x1=find(a),x2=find(b);\n        if(x1!=x2)//\u76f8\u90bb\u4e24\u70b9\u4e00\u5b9a\u5f02\u8272\uff1b\n        {\n            if(h[a]) xx(h[a],x2);/*a\u7684\u7236\u4eb2\u8282\u70b9\u4e00\u5b9a\n            \u548ca\u5f02\u8272\uff0c\u4e00\u5b9a\u548ca\u7684\u5f02\u8272\u70b9\u540c\u8272\uff0c\u6240\u4ee5\u5c06\u4ed6\u4eec\n            \u5408\u5e76\uff1b*/\n            if(h[b]) xx(h[b],x1);//\u540c\u4e0a\uff1b\n            h[a]=x2;//h\u6570\u7ec4\u5b58a\u70b9\u5f02\u8272\u70b9\uff1b\n            h[b]=x1;//\u540c\u4e0a\uff1b\n        }\n        else//\u5982\u679c\u4ed6\u4eec\u540c\u8272\uff0c\u8868\u793a\u4e0d\u884c\uff1b\n        {\n            cout<<\"Impossible\";\n            return 0;\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        int q=find(i);\n        if(!bj[q])//\u8868\u793a\u8fd9\u4e2a\u96c6\u5408\u7684\u7b54\u6848\u8fd8\u6ca1\u88ab\u9009\u8fc7\uff1b\n        {\n            int q1=find(h[i]);\n            bj[q]=1;\n            bj[q1]=1;\n            ans+=min(t[q],t[q1]);//\u4e24\u79cd\u60c5\u51b5\u6700\u5c0f\u503c\uff1b\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1526964679,
        "uid": 87457,
        "name": "wshz",
        "ccfLevel": 0,
        "title": "\u5c01\u9501\u9633\u5149\u5927\u5b66"
    },
    {
        "content": "\u539f\u7f6e\u9876\u7684\u90a3\u4e2a\u9898\u89e3\u5df2\u7ecf\u8bf4\u7684\u5f88\u8be6\u5c3d\u4e86\u3002\u8fd9\u91cc\u6211\u60f3\u5bf9\u90a3\u4e2a\u9898\u89e3\u4e2d\u90e8\u5206\u4ee3\u7801\u8fdb\u884c\u4e00\u4e0b\u8bf4\u660e:\nQ1: \u4e3a\u4ec0\u4e48dfs\u7ed3\u5c3e\u5904\u6ca1\u6709\u56de\u6eaf\u64cd\u4f5c\uff1f (used[u]=false)\nA1: \u8fd9\u9053\u9898\u4e0d\u7528\u56de\u6eaf\u3002\u53ea\u6709\u5728\u90a3\u4e9b\u9700\u8981\u6c42\u51fa\u6240\u6709\u53ef\u80fd\u8def\u5f84\u7684\u9898\u76ee\u4e2d\u624d\u9700\u8981\u56de\u6eaf\u64cd\u4f5c\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u56de\u6eaf\u64cd\u4f5c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u201c\u9057\u5fd8\u64cd\u4f5c\u201d;\u4f7f\u5f97\u5728\u5bfb\u627e\u7b2c\u4e8c\u6761\u8def\u5f84\u65f6\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u76f8\u540c\u7684\u7ed3\u70b9\u3002\u800c\u8fd9\u9053\u9898\u5e76\u4e0d\u9700\u8981\u6c42\u51fa\u6240\u4ee5\u53ef\u80fd\u8def\u5f84\u3002\u4e0d\u660e\u767d\u7684\u540c\u5b66\u53ef\u4ee5\u62ff\u8d77\u7eb8\u548c\u7b14\u6a21\u62df\u4e00\u4e0b:\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u4f9d\u6b21\u5f80\u4e0b\uff0c\u989c\u8272\u5206\u522b\u4e3a\u9ed1\u3001\u767d\u3001\u9ed1\u2026\u2026\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002\u53ef\u89c1\u8fd9\u4e2a\u8fc7\u7a0b\u53ea\u662f\u628a\u56fe\u4e2d\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8d70\u4e00\u904d\uff0cdfs return\u7684\u65f6\u5019\u4e5f\u662f\u5982\u6b64\uff0c\u53ea\u662f\u4e3a\u4e86\u628a\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8d70\u4e00\u904d\uff0c\u5e76\u4e0d\u662f\u8981\u6c42\u51fa\u6240\u6709\u53ef\u80fd\u8def\u5f84\u3002\u56e0\u6b64\u5e76\u4e0d\u9700\u8981\u56de\u6eaf\u3002\nQ2: \u5982\u679c\u4e0d\u9700\u8981\u6c42\u51fa\u6240\u6709\u8def\u5f84\uff0c\u90a3\u600e\u4e48\u4fdd\u8bc1\u7b54\u6848\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u90a3\u4e2a\u5462\uff1f\nA2: \u5176\u5b9e\u5982\u679c\u62ff\u8d77\u7eb8\u548c\u7b14\u6a21\u62df\u4e00\u4e0b\u4f60\u4f1a\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e2a\u8fc7\u7a0b\u6c42\u51fa\u7684\u7b54\u6848\u662f\u552f\u4e00\u7684\uff0c\u4e5f\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u3002\u4e0d\u8fc7\u6ce8\u610f\u4e00\u70b9\uff0c\u6709\u4e00\u884c\u5f88\u91cd\u8981:ans+=min(sum[white],sum[black]). \u8fd9\u53e5\u8bdd\u8bf4\u660e\u4e86\u5e94\u8be5\u52a0\u7684\u662f\u9ed1\u548c\u767d\u4e2d\u66f4\u5c0f\u7b54\u6848\u7684\u90a3\u4e2a\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5f88\u597d\u7406\u89e3:\u4f60\u5e94\u8be5\u5728\u67d3\u9ed1\u8272\u7684\u7ed3\u70b9\u4eec\u548c\u67d3\u767d\u8272\u7684\u7ed3\u70b9\u4eec\u4e2d\u66f4\u5c0f\u7684\u653e\u6cb3\u87f9\uff0c\u56e0\u4e3a\u4e24\u79cd\u65b9\u6cd5\u90fd\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\nQ3: \u4e3a\u4ec0\u4e48main\u4e2d\u8fd8\u9700\u8981\u518d\u628a\u6240\u6709\u7ed3\u70b9\u90fddfs\u4e00\u904d\uff1f\nA3: \u56e0\u4e3a\u56fe\u4e0d\u4e00\u5b9a\u662f\u5168\u8054\u901a\u7684\u3002\u81f3\u4e8e\u4f1a\u4e0d\u4f1a\u8d85\u65f6/\u91cd\u590d\u8ba1\u7b97\uff0c\u4f60\u4e0d\u9700\u8981\u62c5\u5fc3\u3002\u6b64\u524d\u8bf4\u660e\u8fc7\u4e86\uff0c\u4e0d\u9700\u8981\u56de\u6eaf\u64cd\u4f5c;\u56e0\u6b64main\u4e2d\u518ddfs\u65f6\u4f1a\u68c0\u67e5\u8be5\u7ed3\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5982\u679c\u8bbf\u95ee\u8fc7\u4e86\u5c31\u76f4\u63a5\u8df3\u8fc7\uff0c\u5373if(used[i]) continue;.",
        "postTime": 1520674729,
        "uid": 52710,
        "name": "InnovatorNZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "~~\u770b\u5230\u5927\u4f6c\u4eec\u7528\u7684\u526a\u679d\u548c\u5e76\u67e5\u96c6\u7684\u7b97\u6cd5\uff0c\u7528\u4e86\u5e7f\u641c\u7684\u6211\u745f\u745f\u53d1\u6296\u3002~~\n## \u601d\u8def\n\u8fd9\u9898\u601d\u8def\u5e94\u8be5\u633a\u591a\uff0c\u6211\u7ecf(kan)\u8fc7(wan)\u601d(ti)\u7d22(jie)\u540e\uff0c\u611f\u89c9\u53ef\u4ee5**\u67d3\u8272**\u3002\n\n\u7531\u4e8e\u6cb3\u87f9\u4e0d\u548c\u8c10\uff08~~\u602a\u602a\u7684~~\uff09\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u7684\u4e00\u7aef\u6709\u6cb3\u87f9\uff0c\u90a3\u4e48\u53e6\u4e00\u7aef\u5fc5\u7136\u6ca1\u6709\uff1b\u800c\u5982\u679c\u4e00\u7aef\u6ca1\u6709\u6cb3\u87f9\uff0c\u90a3\u4e48\u53e6\u4e00\u7aef\u4e00\u5b9a\u6709\u3002\u6240\u4ee5\uff0c**\u904d\u5386\u6bcf\u6761\u8fb9**\uff08\u81f3\u5c11\u4e00\u7aef\u5df2\u7ecf\u67d3\u8272\uff09\uff0c\u5982\u679c\u53e6\u4e00\u7aef\u6ca1\u6709\u67d3\u8272\uff0c\u5219\u67d3\u4e0a\u548c\u8fd9\u4e00\u7aef**\u76f8\u53cd\u7684\u989c\u8272**\uff1b\u5982\u679c\u90fd\u5df2\u7ecf\u67d3\u8272\uff0c**\u5224\u65ad\u662f\u5426\u76f8\u53cd**\uff0c\u662f\u5c31\u4e0d\u7ba1\uff0c\u4e0d\u662f\u5c31**\u4e00\u5b9a**$Impossible$\u3002\n\n\u7531\u4e8e\u8981\u6309\u8fb9\u904d\u5386\uff0c\u6570\u636e\u8303\u56f4\u53c8\u8d85\u5927\uff0c\u53ea\u80fd\u7528**\u90bb\u63a5\u8868**\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\u3002\n\n\u518d\u8bf4\u5e7f\u641c\u3002\u9700\u8981\u6bcf\u67d3\u8272\u4e00\u4e2a\u70b9\u5c31\u628a\u6b64\u70b9\u653e\u8fdb\u961f\u5217\uff0c\u5e76\u6807\u8bb0\u3002\u6211\u9009\u62e9\u5e7f\u641c\u7684\u539f\u56e0\u662f\u4e0d\u7528\u9012\u5f52\uff0c\u53d1\u73b0\u4e0d\u6ee1\u8db3\u5c31\u53ef\u4ee5**\u76f4\u63a5\u8fd4\u56de**\u3002\n## \u7ec6\u8282\n\u8fd9\u9053\u9898\u5176\u5b9e\u7ec6\u8282\u633a\u591a\u3002\n\n\u9996\u5148\uff0c\u4e3a\u4e86\u65b9\u4fbf\u904d\u5386\uff0c\u5efa\u8fb9\u65f6\u8981\u5efa**\u53cc\u5411\u8fb9**\u3002\n\n\u5176\u6b21\uff0c\u539f\u56fe\u5e76\u975e\u8fde\u901a\u56fe\uff0c\u6240\u4ee5\u5e94\u8be5**\u6bcf\u4e2a\u70b9\u90fd\u641c\u4e00\u6b21**\uff08\u641c\u8fc7\u5c31\u4e0d\u641c\u4e86\uff09\uff0c\u5373\u5728\u4e3b\u51fd\u6570\u4e0a\u52a0\u4e00\u5c42\u5faa\u73af\u3002\n\n\u5982\u679c\u53ef\u4ee5\u6ee1\u8db3\uff0c\u5c31\u8981\u7edf\u8ba1\u6cb3\u87f9\u6700\u5c0f\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u5728\u6bcf\u6b21\u5e7f\u641c\u90fd\u7edf\u8ba1\u4e00\u904d\uff0c\u518d\u52a0\u8d77\u6765\u3002\u5176\u5b9e\u6bcf\u6b21\u7684\u4e2a\u6570\u5c31\u662f\u4e24\u79cd\u989c\u8272\u7528\u7684\u5c11\u7684\u7684\u4e2a\u6570\uff0c\u6ce8\u610f\u5728\u6bcf\u6b21\u641c\u5b8c\u540e\u90fd\u8981\u6c42\u503c\u3002\n## \u6280\u5de7\n\u8fd9\u91cc\u7684\u6280\u5de7\u5c31\u662f\u5982\u4f55\u628a\u4ee3\u7801\u5199\u7684\u66f4\u7b80\u5355\uff08~~\u66f4\u77ed~~\uff09\n### \u67d3\u8272\n\u5f00\u4e00\u4e2a\u6574\u578b\u7684$used$\u6570\u7ec4\uff0c\u503c\u4e3a$0$\u8868\u793a\u672a\u67d3\u8272\uff0c$1$\u8868\u793a\u4e00\u79cd\u989c\u8272\uff0c$2$\u8868\u793a\u53e6\u4e00\u79cd\u3002\n\n\u6c42\u76f8\u53cd\u7684\u989c\u8272\u65b9\u6cd5\uff1a$a$%$2+1$\uff08$1$\u53d8$2$\uff0c$2$\u53d8$1$\uff09\u3002\n### \u989c\u8272\u4e2a\u6570\n\u6700\u597d\u7684\u65b9\u6cd5\u662f\u7528\u6570\u7ec4$sum[3]$\u8bb0\u5f55\uff0c$sum[1]$\u4e3a\u4e00\u79cd\u989c\u8272\u7684\u4e2a\u6570\uff0c$sum[2]$\u4e3a\u53e6\u4e00\u79cd\u3002\n\n\u7528\u6570\u7ec4\u7684\u597d\u5904\u662f\u7edf\u8ba1\u53ea\u9700\u8981$sum[used[...]]++$\u5c31\u597d\u4e86\u3002\n## \u4ee3\u7801\n\u76f8\u4fe1\u6ca1\u6709\u591a\u5c11\u4eba\u559c\u6b22\u4e0a\u9762\u7684\u4e00\u901a\u5206\u6790\u5427\uff0c\u90a3\u4e48\uff0c\u4f60\u4eec\u559c\u6b22\u7684\u4ee3\u7801\u6765\u4e86\u2014\u2014\n```cpp\n//\u957f\u5ea654\u884c\uff0c\u65f6\u95f415ms\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int MAXN=10010,MAXM=200010;//\u6ce8\u610f\u53cc\u5411\u8fb9\uff0c\u8fb9\u8981\u5f002\u500d\nint n,m,tot=0,sum[3],ans=0;\nint h[MAXN],used[MAXN];//h[i]\u8bb0\u5f55\u70b9i\u5728\u90bb\u63a5\u8868\u4e2d\u6307\u5411\u7684\u7b2c\u4e00\u6761\u8fb9\nstruct Edge{//\u8fb9\u7684\u7ed3\u6784\u4f53\n\tint v;\n\tint next;//next\u8bb0\u5f55\u8fd9\u6761\u8fb9\u5728\u90bb\u63a5\u8868\u4e2d\u6307\u5411\u540c\u7aef\u70b9\u7684\u53e6\u4e00\u6761\u8fb9\n}e[MAXM];\nvoid addEdge(int u,int v){//\u5efa\u8fb9\n\ttot++;//\u8fb9\u7684\u4ee3\u53f7\n\te[tot].v=v;\n\te[tot].next=h[u];h[u]=tot;\n}\nqueue<int> q;\nbool bfs(int start){//\u5e7f\u641c\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de\u771f\n\tused[start]=1;//\u67d3\u4e3a1\n\tsum[1]=1,sum[2]=0;//\u521d\u59cb\u5316\n\tq.push(start);//\u8fdb\u961f\u5217\n\twhile(!q.empty()){//\u961f\u5217\u975e\u7a7a\n\t\tint u=q.front();q.pop();//u\u4e3a\u539f\u7aef\u70b9\n\t\tfor(int k=h[u];k;k=e[k].next){//\u90bb\u63a5\u8868\n\t\t\tint v=e[k].v;//v\u4e3a\u6307\u5411\u7aef\u70b9\n\t\t\tif(used[v]==used[u]) return 1;//\u540c\u8272\uff0c\u76f4\u63a5\u8fd4\u56de\n\t\t\tif(used[v]==0){//\u6ca1\u67d3\u8fc7\u8272\n\t\t\t\tused[v]=used[u]%2+1;//\u67d3\u76f8\u53cd\u989c\u8272\n\t\t\t\tsum[used[v]]++;//\u8bb0\u5f55\n\t\t\t\tq.push(v);//\u8fdb\u961f\u5217\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;//\u6ee1\u8db3\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\twhile(m--){\n\t\tint uu,vv;\n\t\tscanf(\"%d%d\",&uu,&vv);\n\t\taddEdge(uu,vv);//\u5efa\u8fb9\uff0c\u53cc\u5411\n\t\taddEdge(vv,uu);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(used[i]) continue;//\u904d\u5386\u8fc7\u5c31\u4e0d\u518d\u904d\u5386\n\t\tif(bfs(i)){//\u4e0d\u6ee1\u8db3\n\t\t\tprintf(\"Impossible\");\n\t\t\treturn 0;//\u76f4\u63a5\u8fd4\u56de\n\t\t}\n\t\telse ans+=min(sum[1],sum[2]);//\u52a0\u548c\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;//\u534e\u4e3d\u7ed3\u675f\n}\n```\n\u770b\u6211\u8fd9\u4e48\u8f9b\u82e6\u5199\u7684\u4e00\u7bc7\u9898\u89e3\uff0c\u600e\u4e48\u80fd\u4e0d\u70b9\u4e2a\u8d5e\u5462\uff1f",
        "postTime": 1573362038,
        "uid": 130981,
        "name": "dingcx",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u54ea\u6709\u697c\u4e0a\u8bf4\u7684\u90a3\u4e48\u590d\u6742\uff0c\u7206\u641c\u4e0d\u5c31AC\u4e86\n\n\u89c1\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int> g[10010];\nint n,m,c[10010],x,f[10010];\nvoid dfs(int k,int t){\n    if(c[k]!=-1&&c[k]!=t){puts(\"Impossible\");exit(0);}\t//\u51b2\u7a81\uff0c\u65e0\u89e3\n    if(c[k]==t) return;\t//\u8bb0\u5fc6\u5316\n    c[k]=t;\t//\u67d3\u8272\n    f[k]=1;\t//\u6807\u8bb0\n    x++;\n    for(int i=0;i<g[k].size();i++) dfs(g[k][i],t^1);\t//\u641c\u5427\uff0c\u8981\u6362\u989c\u8272\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\t//\u5efa\u56fe\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n    int ans=0;\n    memset(f,0,sizeof(f));\n    for(int i=1;i<=n;i++) if(f[i]==0){\t//\u6ca1\u641c\u8fc7\u7684\u5c31\u641c\n        x=0;\n        memset(c,-1,sizeof(c));\n        dfs(i,0);\n        int t=0;\n        for(int i=1;i<=n;i++) t+=c[i]==1;\n        ans+=min(t,x-t);\t//\u7d2f\u52a0\u7b54\u6848\u65f6\u8981\u6ce8\u610f\u6bd4\u8f83\u6700\u4f18\u89e3\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1525441668,
        "uid": 25279,
        "name": "\u5317\u6d77_Beihai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u53c8\u662f\u4e00\u4e2a\u9633\u5149\u660e\u5a9a\u7684\u65e9\u4e0a\n\n\u53c8\u662f\u4e00\u9053\u5199\u7740\u56fe\u7684\u904d\u5386\u6807\u7b7e\u7684\u9898\u76ee\n\n\u8fd9\u9053\u9898\u76ee\u9898\u610f\u662f\uff0c\u6709\u4e00\u4e2a\u7531n\u4e2a\u7ed3\u70b9\u6784\u6210\u7684\u6709m\u6761\u8fb9\u7684\u56fe\uff0c\u6211\u6ca1\u9700\u8981\u5728\u67d0\u51e0\u4e2a\u70b9\u4e0a\u653e\u7f6e\u6cb3\u87f9\uff0c\u6cb3\u87f9\u4f1a\u5360\u9886\u8be5\u70b9\u4e0a\u7684\u6240\u6709\u8fb9\uff0c\u76f8\u90bb\u7684\u6cb3\u87f9\u4e4b\u95f4\u4f1a\u53d1\u751f\u51b2\u7a81\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u6cb3\u87f9\u5360\u9886\u6574\u4e2a\u56fe\n\n\u65e2\u7136\u662f\u56fe\u7684\u9898\uff0c\u5f53\u7136\u662f\u8981\u753b\u56fe\u5566~\\(\u2267\u25bd\u2266)/~\n\n\u4e0b\u9762\u662f\u4e24\u4e2a\u968f\u4fbf\u753b\u7684\u56fe\n\n![\u4e71\u753b\u7684\u56fe1](https://t1.picb.cc/uploads/2018/10/30/JbouSs.png)\n\n![\u4e71\u753b\u7684\u56fe2](https://t1.picb.cc/uploads/2018/10/30/Jbocy7.png)\n\n\u7ecf\u8fc7\u89c2\u5bdf\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c1\u56fe\u53ef\u4ee5\u5b9e\u73b0\u6cb3\u87f9\u5360\u9886\u5168\u56fe\u7684\u76ee\u6807\u800c2\u56fe\u4e0d\u884c\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u5462\uff0c2\u56fe\u53c8\u4e3a\u4ec0\u4e48\u4e0d\u884c\u5462\uff1f\uff1f\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u628aa\u56fe\u5206\u5c42\n\n![\u56fe1\u5206\u5c42](https://t1.picb.cc/uploads/2018/10/30/Jbomm6.png)\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u56fe1\u7684\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u5efa\u7acb\u5728\u4e0d\u540c\u7684\u5c42\u4e0a\u7684\uff0c\u5373\u4e0d\u4f1a\u51fa\u73b0\u540c\u4e00\u5c42\u4e4b\u95f4\u4e92\u76f8\u8fde\u63a5\u7684\u8fb9\u3002\u6211\u7ed9\u8fd9\u79cd\u56fe\u8d77\u4e00\u4e2a\u540d\u5b57\u53eb\u505a\u5206\u5c42\u56fe(\u4e71\u8bf4\u7684)\u3002\n\n\u800c\u56fe2\u5206\u5c42\u540e\u5b58\u5728\u540c\u4e00\u5c42\u4e4b\u95f4\u7684\u8fb9\u3002\n\n\u9898\u76ee\u4e2d\u8bf4\u4e86\uff0c\u6cb3\u87f9\u76f4\u63a5\u4e0d\u80fd\u76f8\u90bb\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u8ba9\u6cb3\u87f9\u5360\u636e\u5947\u6570\u5c42\u6216\u8005\u5076\u6570\u5c42\u7684\u6240\u6709\u70b9\uff0c\u95ee\u9898\u5c31\u89e3\u51b3\u4e86(^\u03c9^)\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u7ed9\u4e00\u4e2a\u56fe\u5206\u5c42\u5462\uff1f\uff1f\uff1f\n\n\u5e76\u67e5\u96c6\uff01\uff01\uff01\n\n\u5e76\u67e5\u96c6\u8fd9\u4e2a\u7b97\u6cd5\u4ee3\u7801\u590d\u6742\u5ea6\u5f88\u4f4e\uff0c\u800c\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5f88\u4f4e\u7684\uff0c\u5982\u679c\u4f60\u6ca1\u5b66\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u6211\u6709\u8be6\u7ec6\u8bf4\u660e\u3002\n\n\u5e76\u67e5\u96c6\u7684\u4f5c\u7528\u662f\u4f7f\u67d0\u4e9b\u70b9\u5177\u6709\u76f8\u540c\u7684\u7956\u5b97\u7ed3\u70b9\uff0c\u90a3\u4e48\u4ed6\u4eec\u76f4\u63a5\u5c31\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u540c\u6837\u7684\u601d\u60f3\u53ef\u4ee5\u7528\u5728\u8fd9\u4e00\u9053\u9898\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5947\u6570\u5c42\u7684\u70b9\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u518d\u8ba9\u5076\u6570\u5c42\u7684\u70b9\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684plan a\u548cplan b\u3002\u6bcf\u4e2aplan\u6240\u9700\u8981\u7684\u6cb3\u87f9\u4e2a\u6570\u5c31\u662f\u5947\u6570\u6216\u5076\u6570\u5c42\u4e2d\u70b9\u7684\u4e2a\u6570\u7684\u548c\u4e86QWQ\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n//bzoi\u7537\u5c0f\u9e1f\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nint n,m,fa[44000];//fa\u51fd\u6570\u8bb0\u5f55\u5404\u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9\n//\u8def\u5f84\u538b\u7f29\u540e\u7236\u4eb2\u7ed3\u70b9\u548c\u7956\u5b97\u7ed3\u70b9\u662f\u4e00\u4e2a\u610f\u601d\u54e6(A\u03c9A)\nbool bj[44000];\nint find(int now)\n{\n\tif(fa[now]==now) return now;//\u521d\u59cb\u5316\u65f6\u628a\u6bcf\u4e2a\u70b9\u90fd\u8bbe\u4e3a\u6839\u7ed3\u70b9\uff0c\u4ed6\u4eec\u7684\u7956\u5b97\u7ed3\u70b9\u90fd\u662f\u81ea\u5df1\u3002 \n\tint fn=find(fa[now]);\n\t//\u5e76\u67e5\u96c6\u5bfb\u627e\u7956\u5148\u51fd\u6570\u7684\u8def\u5f84\u538b\u7f29\u6700\u597d\u8fd9\u6837\u5199\uff0c\u505a\u5e26\u6743\u5e76\u67e5\u96c6\u9898\u76ee\u90fd\u662f\u5728\u56de\u6eaf\u540e\u66f4\u65b0\u6743\u503c\u7684\n\t//\u5982\u679c\u8981\u5199\u6743\u503c\u66f4\u65b0\u8bed\u53e5\u5c31\u5199\u5728\u8be5\u6ce8\u91ca\u7684\u4f4d\u7f6e\u5c31\u597d\u4e86(>^\u03c9^<)\n\treturn fa[now]=fn;\n}\nvoid unity(int a,int b)\n{\n\tint r1=find(a),r2=find(b);//\u5206\u522b\u627e\u5230a\u548cb\u7684\u7956\u5b97\u7ed3\u70b9\n\tfa[r1]=r2;//\u8981\u5c06\u4ee5r1\u7ed3\u70b9\u4e3a\u7956\u5b97\u7684\u6240\u6709\u7ed3\u70b9\u7684\u7956\u5b97\u7ed3\u70b9\u8bbe\u4e3ar2\uff0c\u53ea\u9700\u8981\u628ar1\u7684\u7956\u5b97\u7ed3\u70b9\u8bbe\u4e3ar2\u5c31\u597d\u4e86\n\t//\u5728\u4e0b\u4e00\u6b21find\u540e\u8def\u5f84\u538b\u7f29\u4f1a\u628a\u5e76\u67e5\u96c6\u6062\u590d\u7236\u4eb2\u5c31\u662f\u7956\u5b97\u7684\u72b6\u6001 \n}\nint main()\n{\n\t//\u4e00\u4e0bplan a\uff0cplan b\u5206\u522b\u6307\u5728\u6240\u6709\u5947\u6570\u5c42\u70b9\u4e0a\u653e\u6cb3\u87f9\u4ee5\u53ca\u5728\u6240\u6709\u5076\u6570\u70b9\u4e0a\u653e\u6cb3\u87f9 \n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=n*2; i++) fa[i]=i;\n\t//\u4e3a\u4ec0\u4e48\u8981\u7ed9(1,2*n)\u7684\u7ed3\u70b9\u90fd\u521d\u59cb\u5316\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5bf9\u7ed3\u70b9\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\u5904\u7406\n\t//\u5728\u8be5\u6570\u7ec4\u4e2d\u4e0ei\u5f02\u8272\u7684\u70b9\u6211\u4eec\u7528i+n\u5b58\u50a8\uff0c\u63a5\u4e0b\u6765\u4f1a\u6709\u8be6\u7ec6\u8bf4\u660e\n\tint x[110000],y[110000],ass1=0,ass2=0;\n\t//x1\u4e3aplan a\u4e2d\u7684\u4e00\u70b9\uff0cass1\u5b58\u50a8plan a\u6240\u9700\u6cb3\u87f9\u6570\n\t//y1\u4e3aplan b\u4e2d\u7684\u4e00\u70b9\uff0cass2\u5b58\u50a8plan b\u6240\u9700\u6cb3\u87f9\u6570 \n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tcin>>x[i]>>y[i];//a\u3001b\u95f4\u6709\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u9009\u62e9\u4e86a\u5c31\u4e0d\u80fd\u9009\u62e9b\u4e86\n\t\tint r1=find(x[i]),r2=find(y[i]); //\u5206\u522b\u627e\u5230x\u548cy\u7684\u7956\u5148\n\t\tif(r1==r2)\n\t\t{\n\t\t\tcout<<\"Impossible\";//\u5982\u679c\u4e24\u4e2a\u70b9\u540c\u5c5e\u4e8e\u4e00\u5c42\u5374\u5b58\u5728\u4e00\u6761\u8fb9\n\t\t\texit(0);//\u90a3\u4e48\u4ed6\u4eec\u5404\u70b9\u4e0a\u7684\u6cb3\u87f9\u4e00\u5b9a\u4f1a\u53d1\u751f\u51b2\u7a81 \n\t\t}\n\t\telse\n\t\t{\n\t\t\tunity(x[i]+n,y[i]);//x\u7684\u4e0d\u540c\u5c42\u7684\u70b9\u548cy\u540c\u5c42 \n\t\t\tunity(x[i],y[i]+n);//y\u7684\u4e0d\u540c\u5c42\u6570\u70b9\u548cx\u540c\u5c42\n\t\t}\n\t}\n\t//\u5206\u522b\u627e\u5230\u4e24\u4e2a\u65b9\u6848\u7684\u7956\u5b97\u7ed3\u70b9\n\t/*\n\to o\n\t| |\n\to o-o\n\t\u53ef\u80fd\u4f1a\u51fa\u73b0\u5982\u4e0a\u56fe\u7684\u60c5\u51b5\uff0c\u56fe\u7684\u672c\u8eab\u53ef\u80fd\u7531\u5f88\u591a\u4e2a\u5206\u5c42\u56fe\u6784\u6210\uff0c\u90a3\u4e48\u5c06\u8981\u6c42\u7684\u5c31\u662f\u6bcf\u4e00\u4e2a \u5206\u5c42\u56fe\u4e2d\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848 \n\t*/\n\tmemset(bj,true,sizeof(bj)); //\u7528\u4e8e\u8bb0\u5f55\u4ee5i\u4e3a\u6839\u8282\u70b9\u7684\u56fe\u662f\u5426\u653e\u7f6e\u8fc7\u6cb3\u87f9 \n\tint ass=0;\n\tfor(int i=1; i<=m; i++)\n\t{\n\t\tint r1=find(x[i]),r2=find(y[i]);\n\t\tif(bj[r1] && bj[r2]) //\u8be5\u8fb9\u6240\u5728\u7684\u5206\u5c42\u56fe\u6ca1\u6709\u8ba1\u7b97\u8fc7\u6700\u4f73\u89e3\u51b3\u65b9\u6848 \n\t\t{\n\t\t\tbj[r1]=false;\n\t\t\tbj[r2]=false;//\u6807\u8bb0\u8be5\u5206\u5c42\u56fe\u8fdb\u884c\u8fc7\u8fd0\u7b97 \n\t\t\tass1=0;\n\t\t\tass2=0;\n\t\t\tfor(int i=1; i<=n; i++)//\u6c42\u51fa\u8be5\u8fb9\u6240\u5728\u7684\u5206\u5c42\u56fe\u4e2d\u6700\u4f73\u89e3\u51b3\u65b9\u6848 \n\t\t\t{\n\t\t\t\tif(find(i)==r1) ass1++;//\u8be5\u70b9\u5c5e\u4e8eplan a \n\t\t\t\telse\n\t\t\t\tif(find(i)==r2) ass2++;//\u8be5\u5e97\u5c5e\u4e8eplan b \n\t\t\t}\n\t\t\tass+=min(ass1,ass2);//\u5b58\u50a8\u7b54\u6848 \n\t\t}\t\n\t}\n\tcout<<ass;\n\t//\u5b8c\u7ed3\u6492\u82b1\uff0c\u611f\u8c22\u966a\u4f34\u30fd(\u00b0\u25bd\u00b0)\u30ce \n}\n```",
        "postTime": 1540890246,
        "uid": 44128,
        "name": "\u7537\u5c0f\u9e1fQAQ",
        "ccfLevel": 0,
        "title": "\u5e76\u67e5\u96c6\u771f\u7684\u592a\u597d\u73a9\u4e86"
    },
    {
        "content": "\u626c\u4e2d\u590f\u4ee4\u8425Day0\u7684\u665a\u4e0a\u7ec3\u624b\u5199\u4e00\u9053\u9898\u3002\u8fd8\u6bd4\u8f83\u987a\u5229\u5427...\n\n\u601d\u8def\uff1a\n\n\u8fd9\u5c31\u662f\u4e2a\u67d3\u8272\u95ee\u9898\u3002\u628a\u56fe\u4e0a\u7684\u70b9\u67d3\u6210\u7ea2\u8272\u548c\u84dd\u8272\u3002\u8981\u6c42\uff1a\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u80fd\u4e00\u6837\u3002\n\n\u89e3\u91ca\u4e00\u4e0b\uff1a\u4e0d\u59a8\u7ea2\u8272\u5bf9\u5e94\u6cb3\u87f9\u5360\u9886\u800c\u84dd\u8272\u5bf9\u5e94\u6ca1\u6709\u5360\u9886\u3002\n\n- \u5982\u679c\u4e00\u6761\u8fb9\u4e24\u4e2a\u70b9\u90fd\u662f\u7ea2\u8272\uff0c\u90a3\u5c31\u662f\u4e24\u4e2a\u6cb3\u87f9\u6253\u67b6\u4e86\n\n- \u5982\u679c\u4e00\u6761\u8fb9\u4e24\u4e2a\u70b9\u90fd\u662f\u84dd\u8272\uff0c\u90a3\u5c31\u8fd9\u6761\u8fb9\u6ca1\u6709\u88ab\u5207\u65ad\n\n\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\u662f\u4e0d\u884c\u7684\u3002\n\n- \u5982\u679c\u4e00\u6761\u8fb9\u4e24\u4e2a\u70b9\u4e00\u7ea2\u4e00\u84dd\uff0c\u90a3\u5c31\u662f\u6070\u597d\u88ab\u5207\u65ad\n\n\u8fd9\u79cd\u60c5\u51b5\u662f\u53ef\u4ee5\u7684\u3002\n\n\u5bf9\u5427\uff1f\n\n\u5982\u6b64\u770b\u6765\uff0c\u6240\u8c13\u5360\u9886\u548c\u4e0d\u5360\u9886\u5176\u5b9e\u662f\u7b49\u4ef7\u7684\u3002\n\n\u5728\u4e00\u4e2a\u8fde\u901a\u56fe\u4e2d\uff0c\u4ee4\u4efb\u610f\u4e00\u4e2a\u70b9\u662f\u7ea2\u8272\u6216\u8005\u84dd\u8272\uff0c\u90a3\u4e48\u6574\u5f20\u56fe\u7684\u989c\u8272\u5e94\u8be5\u5df2\u7ecf\u786e\u5b9a\u4e86\u3002\u4e3a\u4e86\u8ba9\u7ea2\u8272\u7684\u70b9\u6700\u5c11\uff0c\u53ea\u9700\u8981\u5206\u522b\u5c1d\u8bd5\u4e24\u79cd\u60c5\u51b5\uff08\u4ee4\u8fd9\u4e2a\u70b9\u662f\u7ea2\u8272\u6216\u8005\u4ee4\u8fd9\u4e2a\u70b9\u662f\u84dd\u8272\uff09\uff0c\u770b\u770b\u54ea\u79cd\u60c5\u51b5\u4e2d\u7ea2\u70b9\u6570\u76ee\u6700\u5c11\u5373\u53ef\u3002\n\n\u4e3a\u4ec0\u4e48\u4f1aImpossible\uff1f\u90a3\u662f\u56e0\u4e3a\uff0c\u5728\u4ece\u7b2c\u4e00\u4e2a\u70b9\u7684\u989c\u8272\u4e00\u76f4\u63a8\u5230\u6240\u6709\u70b9\u7684\u989c\u8272\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u7684\u70b9\u4f1a\u88ab\u8981\u6c42\u6d82\u4e0a\u76f8\u53cd\u7684\u989c\u8272\u3002\u5373\uff0c\u5f53\u4f60\u60f3\u628a\u4e00\u4e2a\u70b9\u6d82\u6210\u84dd\u8272\u7684\u65f6\u5019\uff0c\u5374\u53d1\u73b0\u5b83\u5df2\u7ecf\u662f\u7ea2\u8272\u4e86\u3002\u8fd9\u5c31\u51fa\u73b0\u65e0\u89e3\u60c5\u51b5\u3002\n\n\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u91cc\uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u53ebdfs\u7684\u51fd\u6570\u3002\u5b83\u7684\u529f\u80fd\u662f\uff1a\u4ee4i\u7684\u989c\u8272\u662fs\uff08s\u2208{0,1}\uff09\uff0c\u8fd4\u56dei\u6240\u5728\u7684\u8fde\u901a\u56fe\u7528\u4e86\u989c\u82721\u7684\u70b9\u6570\u3002\n\n\u662f\u7684\u3002\u8fde\u901a\u662f\u4e2a\u6c38\u6052\u7684\u8bdd\u9898\u3002\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\u5bf9\u4e0d\u8fde\u901a\u7684\u8003\u8651\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u91cc\uff0c\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u5faa\u73af\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6ce8\u610f\u88ab\u67d3\u8fc7\u8272\u7684\u70b9\u4e0d\u9700\u8981\u7ee7\u7eed\u904d\u5386\u3002\n\n\u5bf9color2\u6570\u7ec4\u7684\u89e3\u91ca\uff1a\u56e0\u4e3a\u6211\u592a\u7b28\u4e86\uff0c\u5b9e\u5728\u4e0d\u77e5\u9053\u600e\u4e48\u6837\u624d\u80fd\u8ba9dfs(i,0)\u548cdfs(i,1)\u5e76\u884c\u4e0d\u6096\u3002\n\n```cpp\n\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<map>\n#include<queue>\n#include<vector>\n#include<string>\n#include<cmath>\n#include<cstdio>\n#include<cstdlib>\n#include<stack>\n#include<set>\nusing namespace std;\n\n\nvector<int> g[10000+10];\n\nint color[10000+10];\nint color2[10000+10];\nint n, m;\nbool ok;\nint dfs(int i, int s){\n\tif (!ok) return 0;\n\tint sum=s;\n\tcolor[i]=s;\n\tfor (int j=0; j<g[i].size(); j++){\n\t\tint v=g[i][j];\n\t\tif (color[v]==-1){\n\t\t\tcolor[v]=(!s);\n\t\t\tsum+=dfs(v, !s);\n\t\t} else if (color[v]==s)  ok=false;\n\t\t\n\t}\n\t\n\treturn sum;\n}\nint main(){\n\n\tcin>>n>>m;\n\tfor (int i=0; i<m; i++){\n\t\tint u, v;\n\t\tcin>>u>>v;\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\t\n\tmemset(color, -1, sizeof(color));\n\tok=true;\n\tint one=0;\n\tint ans=0;\n\tfor (int i=1; i<=n; i++){\n\t\tif (color[i]==-1){\n\t\t\tmemcpy(color2, color, sizeof(color));\n\t\t\tint a=dfs(i,0);\n\t\t\tmemcpy(color, color2, sizeof(color));\n\t\t\tint b=dfs(i,1);\n\t\t\tans+=min(a,b);\n\n\t\t}\n\t\tif (!ok) break;\n\t}\n\tif (!ok){\n\t\tcout<<\"Impossible\"<<endl;\n\t} else {\n\t\tcout<<ans<<endl;\n\t}\n\n    return 0;\n}\n\n\n\n```",
        "postTime": 1530629813,
        "uid": 81690,
        "name": "EricWay1024",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/wzc-wwwwd/)\n\n[P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1330)\n\n### \u6b64\u9898\u7b97\u6cd5:\u4e8c\u5206\u56fe\n\n\u5927\u81f4\u601d\u8def:\n\n>1.$ $\u8f93\u5165\u8fb9\uff0c\u5efa\u8bae\u7528\u90bb\u63a5\u8868\u5b58\u8fb9\u3002\n\n>2.$dfs$\u6bcf\u4e2a\u8054\u901a\u5757\uff0c\u5c06\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u8d77\u70b9\u67d3\u6210\u767d\u8272\uff0c\u548c\u767d\u8272\u76f8\u90bb\u7684\u70b9\u67d3\u6210\u7eff\u8272\uff0c\u548c\u7eff\u8272\u76f8\u90bb\u7684\u70b9\u67d3\u6210\u767d\u8272(\u56e0\u4e3a~~\u6c34\u6676\u5de8\u87f9~~\u6cb3\u87f9\u4e0d\u80fd\u76f8\u90bb)\u3002\u8fd9\u65f6\u5982\u679c\u6709\u4e0b\u56fe\u4e2d\u4e94\u53f7\u70b9\u8fd9\u6837\u989c\u8272\u77db\u76fe\u7684\u70b9\uff0c\u5c31\u8f93\u51fa\"Impossible\"\u5e76$return\\space 0;$\n\n![](https://s2.ax1x.com/2019/09/13/nDj4pQ.jpg)\n\n>3.$ $\u5982\u679c\u67d3\u8272\u6210\u529f\u4e86\uff0c\u770b\u767d\u70b9\u7eff\u70b9\u54ea\u4e2a\u5c11\uff0c\u7136\u540e\u653e\u7f6e\u6cb3\u87f9\u3002\n\n>4.$ $\u6700\u540e\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u7b54\u6848\u52a0\u4e00\u4e0b\u5c31\u662f\u6700\u7ec8\u7b54\u6848$ans$\u4e86\u3002\n\n## \u4ee5\u4e0b\u662f\u4ee3\u7801+\u6ce8\u91ca\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=10010;\nconst int M=100010;\nstruct node{\n\tint adj,nex;\n}edge[M];\nint top,g[N],ans;\nint white,green;\nvoid add(int x,int y){\n\tedge[++top].adj=y;\n\tedge[top].nex=g[x];\n\tg[x]=top;\n} \n//\u90bb\u63a5\u8868\u5b58\u8fb9\nint dfn[N],n,m,a,b;\nbool vis[N],col[N];\nbool dfs(int now,int go){//\u8fd4\u56de\u503c\u4e3a\u6709\u6ca1\u6709\u989c\u8272\u77db\u76fe\u7684\u70b9\n\tcol[now]=go%2;\n\tif(col[now]) green++; \n\telse white++;//1\u662f\u7eff\u8272\uff0c0\u662f\u767d\u8272\n\tvis[now]=1;\n\tfor(int i=g[now];i;i=edge[i].nex){//\u904d\u5386\u8fb9\n\t\tint p=edge[i].adj;\n\t\tif(vis[p]){\n\t\t\tif((col[p]^col[now])==0)//\u5982\u679c\u4e24\u8005\u76f8\u540c\n\t\t\t\treturn 0;\n\t\t} else if(!dfs(p,go+1))\n\t\t\treturn 0;\n\t} return 1;\n} int main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b); add(b,a);\n\t} for(int i=1;i<=n;i++){\n\t\tif(!vis[i]){\n\t\t\twhite=green=0;\n\t\t\tif(!dfs(i,0)){\n\t\t\t\tprintf(\"Impossible\\n\");\n\t\t\t\treturn 0;\n\t\t\t} ans+=min(white,green);//\u5c11\u653e\u6cb3\u87f9\n\t\t}\n\t} printf(\"%d\\n\",ans);\n\treturn 0;\n} \n```\n~~\u522b\u6253\u56de\u8840\u4e2d\u7684\u6c34\u6676\u5de8\u87f9~~\n\n\u8c22\u8c22\u5927\u5bb6! !",
        "postTime": 1568340723,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u60f3\u660e\u767d\u5f88\u7b80\u5355\uff0cbfs+\u67d3\u8272\n\n\u56e0\u4e3a\u6574\u5f20\u56fe\u53ef\u80fd\u5305\u542b\u591a\u5f20\u5c0f\u56fe\uff0c\u904d\u5386\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8fd8\u6709\u6ca1\u641c\u8fc7\u7684\u8282\u70b9\u5c31\u4ee5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u5f00\u59cbbfs\n\nbfs\u8fc7\u7a0b\u4e2d\u5982\u679c\u9047\u5230\u76f8\u90bb\u8282\u70b9\u67d3\u8272\u76f8\u540c\u7684\u60c5\u51b5\u5c31\u8df3\u51fa\uff0c\u8f93\u51faimpossible\u5373\u53ef\n\n\u67d3\u8272\u65b9\u6848\u9009\u53d6\u8f83\u5c0f\u7684\u4e00\u79cd\n\n\u4ee5\u4e0a\uff0c\u4e0a\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\nvector <int>  edge[1000010];\nqueue <int> que;\nint vis[1000010],ans[2],col[1000010];\nint n,m,ansn,aa,bb,flag;\nvoid bfs(int x)\n{\n    while(!que.empty())\n    {\n        int tmp=que.front();\n        que.pop();\n        vis[tmp]=1;\n        for(int i=0;i<edge[tmp].size();i++)\n        {\n            int nowp=edge[tmp][i];\n            if(col[nowp]==col[tmp])//\u5982\u679c\u67d3\u8272\u76f8\u540c\u5219\u8df3\u51fa\uff0c\u8f93\u51faimpossible \n            {\n                ans[0]=-1;\n                ans[1]=-1;\n                return;\n            }  \n            if(!vis[nowp])\n            {\n                que.push(nowp);\n                col[nowp]=(col[tmp]+1)%2;//\u5426\u5219\u5c06\u5176\u67d3\u6210\u4e0e\u7236\u8282\u70b9\u4e0d\u540c\u7684\u989c\u8272\uff0c\u8fd9\u91cc\u75280\u548c1\u6765\u67d3\u8272 \n                ans[col[nowp]]++;//\u5f53\u524d\u67d3\u8272\u65b9\u6848\u7684\u82b1\u8d39+1 \n            }\n        }\n    }\n}\nvoid scan()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>aa>>bb;\n        edge[aa].push_back(bb);\n        edge[bb].push_back(aa);\n    }\n    memset(col,-1,sizeof(col));\n}\nvoid solve()\n{\n    for(int i=1;i<=n;i++)\n    {\n        if(vis[i]!=1)  \n        {\n            ans[0]=1;\n            ans[1]=0;\n            col[i]=0;\n            que.push(i);\n            bfs(i);\n            if(ans[0]==-1)\n            {\n                flag=1;\n                break;\n            }\n            ansn+=min(ans[0],ans[1]);//\u9009\u53d6\u4e24\u79cd\u67d3\u8272\u65b9\u6848\u4e2d\u8f83\u5c0f\u7684\u90a3\u79cd \n        }\n    }\n    if(flag==1)  cout<<\"Impossible\";\n    else cout<<ansn;\n}\nint main()\n{\n    scan();\n    solve();\n}\n```",
        "postTime": 1508674237,
        "uid": 27166,
        "name": "hxn2228",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u4e9b\u767d\u70b9\uff0c\u73b0\u5c06\u4e00\u4e9b\u767d\u70b9\u67d3\u4e3a\u9ed1\u70b9\uff0c\u4f7f\u5f97:\u9ed1\u70b9\u4e92\u4e0d\u76f8\u90bb\u4e14\u767d\u70b9\u4e92\u4e0d\u76f8\u90bb\u3002\u8981\u6c42\u6700\u5c11\u9ed1\u70b9\u6570\u3002\n\n## \u7b80\u8981\u5206\u6790\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u9ed1\u70b9\u3001\u767d\u70b9\u672c\u8d28\u662f\u4e00\u6837\u7684\u3002\u4e14\u4e00\u4e2a\u5408\u6cd5\u7684\u56fe\u4e2d\u6bcf\u4e2a\u70b9\u53ea\u80fd\u6216\u767d\u6216\u9ed1\u3002\n\n## \u5f97\u51fa\u7b97\u6cd5\n\n\u5bf9\u4e00\u4e2a\u8fde\u901a\u56fe,\u4ece\u4efb\u610f\u70b9$P$\u5f00\u59cb\uff0c\u5c06$P$\u8bbe\u4f4d\u767d,\u7136\u540e\u5f00\u59cb\u5bf9\u8fde\u901a\u56fe\u67d3\u8272\u67d3\u8272\uff0c\u540c\u65f6\u7d2f\u52a0\u9ed1\u767d\u70b9\u4e2a\u6570\u3002\u5982\u6ca1\u6709\u51fa\u73b0\u77db\u76fe\uff0c\u5219\u7b54\u6848\u4e3a$min(W,B)$\u3002\u7d2f\u52a0\u5373\u53ef\u3002\u6709\u70b9\u50cf2-SAT.\n\n## \u4ee3\u7801\u793a\u4f8b\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nconst int N=10010;\nvector<int> E[N];\nint a[2],c[N],n,m;\nbool dfs(int u,bool x) {\n\ta[c[u]=x]++;\n\tfor(int v:E[u]) if(c[v]!=-1 && c[v]==c[u])\n\t\treturn 0;\n\tfor(int v:E[u]) if(c[v]==-1 && !dfs(v,x^1))\n\t\treturn 0;\n\treturn 1;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1; i<=n; ++i) c[i]=-1;\n\tfor(int u,v; m--; ) {\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tE[u].push_back(v);\n\t\tE[v].push_back(u);\n\t}\n\tint ans=0;\n\tfor(int i=1; i<=n; ++i) if(c[i]==-1){\n\t\tif(!dfs(i,0)) {\n\t\t\tputs(\"Impossible\");\n\t\t\treturn 0;\n\t\t}\n\t\tans+=min(a[0],a[1]);\n\t\ta[0]=a[1]=0;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1528769364,
        "uid": 89742,
        "name": "Qura",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u7a81\u7136\u53d1\u73b0\u9898\u89e3\u597d\u591a\u90fd\u662fDFS+\u67d3\u8272\uff0c\u5176\u5b9e\u611f\u89c9\u672c\u9898\u4e5f\u53ef\u4ee5\u5199\u5e76\u67e5\u96c6\u7684\u3002\n\n\u5176\u539f\u7406\u5c31\u662f\u672c\u9898\u7684\u6a21\u578b\u5c31\u662f\u5bf9\u7acb\u8282\u70b9\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u6839\u636e\u654c\u4eba\u7684\u654c\u4eba\u5c31\u662f\u6211\u7684\u670b\u53cb\uff0c\u5904\u7406\u4e00\u4e2a\u654c\u4eba\u6570\u7ec4\u6765\u8bb0\u5f55\u8282\u70b9\u7684\u654c\u4eba\u8fd9\u6837\u4e00\u6761\u8fb9\u7684\u4e00\u4e2a\u70b9\u5c31\u53ef\u4ee5\u4e0e\u53e6\u4e00\u4e2a\u70b9\u7684\u654c\u4eba\u5e76\u5728\u4e00\u8d77\u3002\u82e5\u662f\u6ca1\u6709\u654c\u4eba\uff0c\u5219\u76f4\u63a5\u5c06\u81ea\u5df1\u4f5c\u4e3a\u654c\u4eba\u3002\n\n\u800c\u5904\u7406\u6570\u91cf\u65f6\uff0c\u5e76\u5165\u64cd\u4f5c\u5c31\u5c06\u3010\u654c\u4eba\u7684\u654c\u4eba\u3011\u6570\u91cf+=\u81ea\u5df1\u96c6\u5408\u6570\u91cf\u3002\n\n\u6700\u540e\u5f97\u51fa\u7ed3\u679c\u65f6\uff0c\u9009\u53d6\u6ca1\u6709\u4f7f\u7528\u7684\u96c6\u5408\uff0c\u56e0\u4e3a\u662f\u5bf9\u7acb\u5173\u7cfb\uff0c\u6240\u4ee5\u5728\u4e24\u4e2a\u5bf9\u7acb\u96c6\u5408\u4e2d\u9009\u53d6\u4e00\u4e2a~~\u6cb3\u87f9~~\u8f83\u5c11\u7684\u7d2f\u52a0\u5c31\u53ef\u4ee5\u3002\n\n\u5f53\u51fa\u73b0\u4e24\u4e2a\u70b9\u5df2\u7ecf\u662f\u670b\u53cb\uff08\u7956\u5148\u76f8\u540c\uff09\u5374\u53c8\u662f\u654c\u4eba\uff08\u5728\u4e00\u6761\u8fb9\u4e0a\uff09\u5219\u8f93\u51fa~~\u4e0d\u53ef\u80fd~~\n\n\u8fd9\u79cd\u505a\u6cd5\u611f\u89c9\u6bd4\u8f83\u9002\u7528\u4e8e\u5904\u7406\u5bf9\u7acb\u5173\u7cfb\u7684\u5e76\u67e5\u96c6\n\n\u4f8b\u5982\uff1aP1862&&P1892\uff0c\u8fd9\u4e24\u4e2a\u9898\u90fd\u53ef\u4ee5\u8bb0\u5f55\u654c\u4eba\u6570\u7ec4\u6765\u5904\u7406\n\ncode\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans,a,b,c;\nint f[100001],paic[100001],cnt[100001],vist[100001];\nint find(int k)\n{if(f[k]==k)return k;\nelse return f[k]=find(f[k]);}\nint main(){\ncin>>n>>m;\nfor(int i=1;i<=n;i++){cnt[i]=1;f[i]=i;}\nwhile(m--)\n{\n\tcin>>a>>b;\n\tint aa=find(a),bb=find(b);\n\tif(aa!=bb)\n\t\t{if(!paic[a])paic[a]=bb;\n\t\telse {f[bb]=find(paic[a]);cnt[find(paic[a])]+=cnt[bb];}\n\t\tif(!paic[b])paic[b]=aa;\n\t\telse {f[aa]=find(paic[b]);cnt[find(paic[b])]+=cnt[aa];}\n\t\t} \n\telse {cout<<\"Impossible\";return 0;}\n} \nfor(int i=1;i<=n;i++){\n\tint white=find(i);\n\tif(!vist[white]){\n\t\tint black=find(paic[white]);\n\t\tvist[white]=1;\n\t\tvist[black]=1;\n\t\tans+=min(cnt[black],cnt[white]);\n\t}\n}\ncout<<ans;\nreturn 0;\n}\n```\n\u7801\u98ce\u5de8\u4e11\uff0cQAQ",
        "postTime": 1549619138,
        "uid": 116388,
        "name": "SFWR",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053~~\u67d3\u8272\u4f53~~  \u67d3\u8272\u9898\n\n------------\n\u8fd9\u9898\u6709\u4e00\u4e2a\u5751\u70b9\u5c31\u662f\u56fe\u6709\u53ef\u80fd\u5e76\u975e\u8fde\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u4ece\u6bcf\u4e00\u4e2a\u5b50\u56fe\u53bb\u627e\n\n------------\ndfs\u5927\u6cd5\u597d\n\n\n------------\n\u7a0d\u5fae\u5177\u4f53\u8bb2\u4e00\u4e0b\u9898\u76ee\uff0c\u5176\u5b9e\u6240\u6709\u7684\u70b9\u6709\u4e24\u79cd\uff0c1\u70b9\u548c0\u70b9\uff0c\u53ea\u8981\u51fa\u73b0\u4e00\u4e2a\u70b9\u5468\u56f4\u8fde\u901a\u7684\u70b9\u51fa\u73b0\u4e0d\u4e00\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u76f4\u63a5break\u6389\uff0c\u8fd4\u56de\u8f93\u51faImpossible\uff0c\u5982\u679c\u989c\u8272\u4e00\u6837\u5c31\u7ee7\u7eed\u641c\uff0c\u5176\u5b9e\u4ee3\u7801\u6ce8\u91ca\u5199\u7684\u6bd4\u8f83\u6e05\u695a\u4e86\uff0c\u4e0b\u9762\u653e\u4ee3\u7801\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 100002\nusing namespace std;\nvoid add(int q,int z);//\u94fe\u5f0f\u524d\u771f\u9999\u661f\u4e0d\u4f1a\u7684\u8bdd\u81ea\u5df1\u53bbcsdn\u5b66\u5b66(\u5982\u679c\u4f60\u4f1avector\u90a3\u66f4\u597d\u54af\uff0c\u672c\u849f\u84bb\u4e0d\u4f1a) \nvoid fuck(int num,int can);//\u4e0d\u8981\u5728\u4e4e\u51fd\u6570\u540dqwq \nint n,m;//\u9898\u76ee\u8981\u6c42 \nint a,b;//\u5b58\u8fb9\u7528\u5f97\u53d8\u91cf \nint flag;//\u8fd9\u4e2aflag\u7528\u5904\u540e\u9762\u6709\u8bf4\u660e \nint cnt;//\u8fb9\u7684\u4e2a\u6570 \nint ans;//\u7b54\u6848 \nint we[maxn];//\u6bcf\u4e2a\u70b9\u7684\u989c\nint ci[2];//\u4e24\u79cd\u989c\u82721\u6216\nint head[maxn*2];//\u94fe\u5f0f\u524d\u771f\u9999\u661f\u8981\u7528\nbool vis[maxn];//\u8d70\u8fc7\u6ca1\u6709 \nstruct node\n{\n\tint q,z,next;\n}ass[maxn*2];\nint main()\n{\n\tios::sync_with_stdio(false);//\u80cc\u4e0b\u8fd9\u4e2a\u4f7f\u4f60\u7684cin\u8ddfscanf\u4e00\u6837\u5feb(noip\u4e0d\u53ef\u7528) \n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)//\u5b58\u8fb9 \n\t{\n\t\tcin>>a>>b;\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tfor(int i=1;i<=n;i++)//\u5224\u65ad\u662f\u5426\u8fde\u7eed \n    {\n        ci[0]=0;\n\t\tci[1]=0;//\u6bcf\u6b21\u5f52\u96f6 \n        if(!vis[i])//\u5982\u679c\u6ca1\u4fbf\u5229\u8fc7\u8fd9\u4e2a\u5c0f\u56fe\u56fe \n        fuck(i,0);\n        if(flag)//\u5982\u679c\u6ca1\u6cd5\u5c01\u9501\u5b8c \n        {\n        \tcout<<\"Impossible\";\n        \treturn 0;\n\t\t}\n        ans+=min(ci[0],ci[1]);//\u4e24\u79cd\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u628a\u5404\u4e2a\u5b50\u56fe\u7684ans\u7d2f\u52a0 \n    }\n\tcout<<ans;\n\treturn 0;\n}\nvoid add(int q,int z)//\u5b58\u8fb9 \n{\n\tass[++cnt].q=q;\n\tass[cnt].z=z;\n\tass[cnt].next=head[q];\n\thead[q]=cnt;\n}\nvoid fuck(int num,int can)\n{\n\tci[can]++;//\u8fd9\u79cd\u989c\u8272\u4e2a\u6570++ \n\twe[num]=can;//\u7ed9\u5b83\u67d3\u4e0a\u989c\u8272 \n\tvis[num]=true;//\u8d70\u8fc7\u4e86\u8bb0\u5f55\u4e0a\uff0c\u5224\u65ad\u5b50\u56fe\u8981\u7528\u5462\n\tfor(int i=head[num];i;i=ass[i].next)//\u641c\u8fb9 \n\t{\n\t\tint now=ass[i].z;\n\t\tif(vis[now])\n\t\t{\n\t\t\tif(we[now]!=can)continue;//\u5982\u679c\u4e0d\u884c\u7684\u8bdd\u76f4\u63a5continue \n\t\t\telse\n\t\t\t{\n\t\t\t\tflag=1;\n\t\t\t\treturn ;//\u8bb0\u5f55flag\u8fd4\u56de\u53bb \n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tint can2;\n\t\t\tif(can==0)can2=1;\n\t\t\telse can2=0;//\u6362\u989c\u8272 \n\t\t\tfuck(now,can2);//\u7ee7\u7eed\u641c\u641c\u641c \n\t\t}\n\t}\n}\n```",
        "postTime": 1545971912,
        "uid": 136006,
        "name": "s_Shot\u10e6Maki",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u601d\u8def\u662f\u501f\u9274dalao\u7684\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u6211\u7684\u5199\u6cd5\u66f4\u5e73\u6613\u8fd1\u4eba\u4e00\u4e9b\uff08~~\u539a\u989c\u65e0\u803b~~\uff09\uff0c\u57fa\u672c\u601d\u8def\u6211\u518d\u8d58\u8ff0\u4e00\u904d\n\n1\u3001\u9996\u5148\u5c31\u662f\u56fe\u6709\u53ef\u80fd\u662f\u4e0d\u8fde\u901a\u7684\uff0c\u6240\u4ee5\u4f60\u8981\u505a\u4e00\u4e2a\u6807\u6280\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fde\u901a\u56fe\u8fdb\u884c\u67d3\u8272\n\n2\u3001\u6211\u4eec\u91c7\u7528\u9ed1\u767d\u70b9\u67d3\u8272\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u5df2\u7ecf\u88ab\u67d3\u4e3a\u9ed1\u8272\uff0c\u90a3\u4e48\u548c\u4ed6\u76f8\u90bb\u7684\u70b9\u4e00\u5b9a\u8981\u88ab\u67d3\u6210\u767d\u8272\uff0c\u6700\u540e\u7b54\u6848\u53d6\u6570\u91cf\u66f4\u5c11\u7684\u989c\u8272\uff0c\u8fd9\u91cc\u7528sum\u6570\u7ec4\u6765\u8ba1\u7b97\u4e24\u79cd\u989c\u8272\u7684\u6570\u91cf\n\n3\u3001impossible\u7684\u60c5\u51b5\u5c31\u662f\uff1a\u5982\u679c\u4e00\u4e2a\u70b9\u5df2\u7ecf\u88ab\u904d\u5386\u8fc7\uff08\u7528vis\u6570\u7ec4\u6807\u8bb0\uff09\uff0c\u5373\u5df2\u7ecf\u67d3\u8fc7\u8272\uff08\u7528col\u6570\u7ec4\u8bb0\u5f55\uff09\uff0c\u4f46\u662f\u4ed6\u5df2\u7ecf\u88ab\u67d3\u8fc7\u7684\u989c\u8272\u548c\u63a5\u4e0b\u6765\u8981\u67d3\u5f97\u989c\u8272\u4e0d\u540c\uff0c\u5373\u8bf4\u660e\u51fa\u73b0\u4e86\u4e24\u79cd\u989c\u8272\u76f8\u540c\u7684\u70b9\u8981\u76f8\u90bb\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u80fd\u5c01\u9501\n\n\u4e0b\u9762\u662f\u4ee3\u7801\uff0c\u4ee3\u7801\u91cc\u4e5f\u6709\u5177\u4f53\u7684\u6ce8\u91ca\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n\tint to,next;\n}e[200005];\nint head[200005],cnt;\nint sum[2],col[100005];//sum\u8868\u793a\u4e24\u79cd\u6d82\u8272\u65b9\u6cd5\uff0ccol\u8868\u793a\u989c\u8272 \nbool vis[100005];\nvoid add(int u,int v)\n{\n\te[++cnt].next=head[u];\n\thead[u]=cnt;\n\te[cnt].to=v;\n}\nvoid dfs(int x,int d)\n{\n\tvis[x]=1;//\u8868\u793a\u5df2\u7ecf\u904d\u5386\u8fc7 \n\tsum[d]++;//\u6b64\u989c\u8272\u7684\u4e2a\u6570\u52a01 \n\tcol[x]=d;//\u6d82\u8272 \n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint y=e[i].to;\n\t\tif(vis[y])//\u5982\u679c\u5df2\u7ecf\u904d\u5386\u8fc7 \n\t\t{\n\t\t\tif(col[y]==1-d)//\u989c\u8272\u548c\u539f\u6765\u76f8\u540c \n\t\t\t\tcontinue;\n\t\t\telse //\u989c\u8272\u548c\u539f\u6765\u4e0d\u540c \n\t\t\t{\n\t\t\t\tprintf(\"Impossible\");\n\t\t\t\texit(0);\n\t\t\t}\n\t\t}\n\t\telse \n\t\t\tdfs(y,1-d);\n\t}\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tint u,v,ans=0;\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u,v),add(v,u);\n\t}\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tsum[0]=sum[1]=0;//\u521d\u59cb\u5316 \n\t\tif(!vis[i])//\u6709\u53ef\u80fd\u662f\u975e\u8fde\u901a\u56fe \n\t\t\tdfs(i,0);\n\t\tans+=min(sum[0],sum[1]);//\u9009\u62e9\u4e2a\u6570\u66f4\u5c0f\u7684\u90a3\u79cd\u6d82\u8272\u65b9\u6848 \n\t}\n\tprintf(\"%d\",ans);\n}\n```",
        "postTime": 1531103268,
        "uid": 51195,
        "name": "accedhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "#\u3010Pascal\u3011\u5c01\u9501\u9633\u5149\u5927\u5b66\u89e3\u9898\u601d\u8def\n\n\n**Q1:\u6b64\u9898\u663e\u7136\u662f\u7528\u6d82\u8272\u6765\u505a\u7684\uff0c\u90a3\u4e48\u600e\u4e48\u6765\u6d82\u8272\uff1f**\n\n\u521d\u59cb\u5316\u6bcf\u4e2a\u70b9\u4e3a0\uff0c\u5047\u8bbe\u8be5\u70b9\u9700\u8981\u4fdd\u7559\u4e3a1\uff0c\u5220\u9664\u4e3a2.\n\n\u5219\u5f53\u6211\u4eec\u8bbe\u7f6e\u4e86\u521d\u59cb\u70b9\u7684\u989c\u8272\uff08\u5047\u8bbe\u662f1\uff09\uff0c\u90a3\u4e48\u4e0e\u4e4b\u6709\u8fb9\u76f8\u8fde\u7684\u989c\u8272\u5fc5\u7136\u662f\u786e\u5b9a\u7684\uff08\u4e00\u4e2aDfs\uff09\n\n\n**Q2:\u5982\u4f55\u5224\u65ad\u6cb3\u87f9\u65e0\u6cd5\u5c01\u9501\u6240\u6709\u9053\u8def\uff1f**\n\n\u5f53\u6211\u4eecDfs\u641c\u5230\u4e00\u4e2a\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\uff0c\u4e14\u8be5\u70b9\u7684\u989c\u8272\u4e0e\u5c06\u8981\u6d82\u7684\u989c\u8272\u4e0d\u76f8\u540c\uff0c\u5219\u65e0\u6cd5\u6ee1\u8db3\n\n\n**Q3\uff1a\u5982\u4f55\u9632\u6b62\u7206\u5185\u5b58\uff1f**\n\n\u4f7f\u7528**\u94fe\u5f0f\u524d\u5411\u661f**\u53ef\u4ee5\u6709\u6548\u89e3\u51b3\n\n\n**Q4\uff1a\u6700\u540e\u7684\u6700\u5c0f\u503c\u600e\u4e48\u5f97\u5230\uff1f**\n\n\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u989c\u8272\u4e3a1\u7684\u65b9\u6848\u6570\u4e3atot,\u603b\u7684\u70b9\u6570\u4e3asum\uff08\u8fd9\u4e9b\u6570\u636e\u5728Dfs\u4e2d\u90fd\u53ef\u4ee5\u5f97\u5230\uff09\n\n\u90a3\u4e48\uff0c\u989c\u8272\u4e3a2\u7684\u65b9\u6848\u6570n=sum-tot\uff0c\u6240\u4ee5\u6700\u5c0f\u503c\u4e3an(min)=min(tot,sum-tot)\n\n\n**Q5:\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879**\n\n1.\u9898\u76ee\u5e76\u6ca1\u6709\u4fdd\u8bc1n\u4e2a\u70b9\u5728\u56fe\u4e2d\u90fd\u6709\u8fb9\u76f8\u8fde\uff0c\u6240\u4ee5\u6709\u4e9b\u70b9\u662f\u4e0d\u7528\u505a\u7684\n\n2.\u9898\u76ee\u5e76\u6ca1\u6709\u4fdd\u8bc1\u53ea\u6709\u4e00\u4e2a\u56fe\uff0c\u6240\u4ee5\u8981\u627e\u51fa\u6bcf\u4e00\u4e2a\u5c0f\u56fe\n\n\ncode:\n\n\n\n\n\n```cpp\nvar n,m,i,x,y,min,tot,nowsum,ans:longint;\n    s,w,e,color:array[1..100005*2] of longint;\n    vis:array[1..100005] of boolean;\nFunction minx(a,b:longint):longint;\nbegin\n  if a<b then exit(a)\n   else exit(b);\nend;\nProcedure Add(x,y,v:longint);  //\u524d\u5411\u661f\u6dfb\u8fb9\nvar i:longint;\nbegin\n  if s[x]<>0 then w[v]:=s[x];\n  s[x]:=v; e[v]:=y;\nend;\nFunction Change_color(x:longint):longint; //\u6539\u53d8\u989c\u8272\nbegin\n  if x=1 then exit(2);\n  if x=2 then exit(1);\nend;\nProcedure Dfs(x,v:longint);\nvar temp:longint;\nbegin\n  if vis[x] then  //\u5982\u679c\u8bbf\u95ee\u8fc7\u8be5\u70b9\n   begin\n    if (color[x]<>0) and (v<>color[x]) then   //\u5982\u679c\u88ab\u6d82\u8fc7\u989c\u8272\u4e14\u989c\u8272\u4e0e\u5f53\u524d\u6240\u8981\u6d82\u7684\u989c\u8272\u4e0d\u7b26\n     begin\n      writeln('Impossible');  //\u8f93\u51fa'\u4e0d\u53ef\u80fd'\n      halt;\n     end;\n    exit;\n   end;\n  inc(nowsum);  //\u7edf\u8ba1\u5f53\u524d\u5c0f\u56fe\u4e2d\u70b9\u7684\u603b\u6570\n  vis[x]:=true;    //\u6dfb\u52a0\u8bbf\u95ee\n  color[x]:=v;     //\u6d82\u8272\n  if v=1 then inc(tot);  //\u7edf\u8ba1\u989c\u8272\u4e3a1\u7684\u4e2a\u6570\n  temp:=s[x];  //\u94fe\u5f0f\u524d\u5411\u661f\u6c42\u4e0b\u4e00\u4e2a\u70b9\n  while temp<>0 do\n   begin\n    Dfs(e[temp],change_color(v));\n    temp:=w[temp];\n   end;\nend;\nbegin\n  readln(n,m);\n  fillchar(s,sizeof(s),0);\n  fillchar(w,sizeof(w),0);\n  fillchar(e,sizeof(e),0);\n  fillchar(vis,sizeof(vis),0);\n  fillchar(color,sizeof(color),0);\n  ans:=0;\n  for i:=1 to m do\n   begin\n    readln(x,y);\n    Add(x,y,i);Add(y,x,i+m);  //\u6b63\u53cd\u90fd\u5b58\n   end;\n  for i:=1 to n do\n   begin\n    tot:=0; nowsum:=0;\n    if (not vis[i]) then Dfs(i,1);  //\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\u5c31\u5f00\u59cb\u8bbf\u95ee\n    tot:=minx(tot,nowsum-tot);  //\u7edf\u8ba1\u5f53\u524d\u5c0f\u56fe\u4e2d\u7684\u6700\u5c0f\u503c\n    inc(ans,tot);  //\u7edf\u8ba1\u603b\u503c\n   end;\n  writeln(ans);\nend.\n```",
        "postTime": 1509986246,
        "uid": 15700,
        "name": "zsj123",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9898\u666e\u53ca\u7ec4\u7684\u9898\u5427\n\n\u56e0\u4e3a\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff0c\u6240\u4ee5\u8981\u8bbf\u95ee\u6240\u6709\u8054\u901a\u5757\n\n\u4ee5\u53ca\u9ed1\u767d\u67d3\u8272\n\n\u5728\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\u4e0a\u968f\u4fbf\u627e\u4e2a\u70b9\u5f00\u59cbbfs\n\n\u8fdb\u884c\u67d3\u8272\n\n\u5982\u679c\u6709\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u88ab\u67d3\u540c\u79cd\u989c\u8272\uff0c\u65e0\u89e3\n\n\u5426\u5219\u5c31\u8bb0\u5f55\u4e0b\u9ed1\u767d\u4e24\u8272\u7684\u70b9\u7684\u4e2a\u6570\n\n\u5728\u5e03\u5c40\u8d2a\u5fc3\u9ed1\u767d\u70b9\u8f83\u5c0f\u7684\u4e2a\u6570\u5373\u53ef\n\n\u9644\u4e0a\u4ee3\u7801\n\n            \n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#define re register\nstruct node\n{\n    int to,next;\n}    e[200005];\nint head[10005],vis[10005],bl[10005],dep[10005];\nint cnt=0,flag,ans=0;\ninline void insert(int u,int v)\n{\n    e[++cnt].to=v;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\ninline void dfs(int s)\n{\n    std::queue<int>    q;\n    int cnt0=0,cnt1=1;\n    q.push(s);\n    bl[s]=1;vis[s]=1;dep[s]=1;\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();\n        for(int i=head[now];i;i=e[i].next)\n        {\n            int to=e[i].to;\n            if(vis[to] && bl[to]==bl[now])\n            {\n                flag=0;\n                return;\n            }\n            if(!vis[to])\n            {\n                vis[to]=1;\n                q.push(to);\n                dep[to]=dep[now]+1;\n                if(dep[to]&1)\n                {\n                    bl[to]=1;\n                    cnt1++;\n                }\n                else\n                {\n                    bl[to]=0;\n                    cnt0++;\n                }\n            }\n        }\n    }\n    ans+=std::min(cnt0,cnt1);\n}\nint main()\n{\n    int n,m,u,v;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        insert(u,v);\n        insert(v,u);\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(!vis[i])\n        {\n            flag=1;\n            dfs(i);\n        }\n        if(!flag)\n        {\n            printf(\"Impossible\\n\");\n            return 0;\n        }\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\u4e00\u5f00\u59cb\u60f3\u4ec0\u4e48\u5148tarjan\u8fdb\u884c\u7f29\u70b9\u7136\u540e\u5224\u65ad\u8054\u901a\u5757\u7684\u5927\u5c0f\u5982\u679c\u4e3a\u5947\u6570\u65e0\u89e3\n\u7136\u540e\u5bf9\u8fd9\u5f20\u7b80\u5355\u56fe\u9ed1\u767d\u67d3\u8272\u53d6\u8f83\u5c0f\u7684\u518d\u52a0\u4e0a\u6240\u6709\u8054\u901a\u5757\u7684\u4e00\u534a\n\n\u53d1\u73b0\u6709\u9519\n\n\u7136\u540e\u770b\u770b\u662f\u56fe\u7684\u904d\u5386\u4e8e\u662f\u5c31\u76f4\u63a5\u4e0a\u9ed1\u767d\u67d3\u8272\u4e86\n\n\u8fd8\u771f\u8fc7\u4e86\n",
        "postTime": 1502375437,
        "uid": 44250,
        "name": "Zzh20011004",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u90fd\u662f\u67d3\u8272\u7684\u9898\u89e3\uff0c\u6211\u8865\u4e2a\u5e76\u67e5\u96c6\u7684\u3002\u65f6\u7a7a\u90fd\u76f8\u5bf9\u8f83\u4f18\uff0c\u53cd\u6b63\u6211\u662f9ms\uff0c\u7a7a\u95f4O(n)\n\nf[]\u8868\u793a\u8981\u88ab\u67d3\u4e3a\u540c\u8272\u7684\u70b9\uff0ce[]\u8868\u793a\u8981\u88ab\u67d3\u4e3a\u5f02\u8272\u7684\u70b9\uff0c\u6bcf\u6b21\u5408\u5e76\u53e6\u4e00\u4e2a\u70b9\u7684\u5f02\u8272\u70b9\uff0c\u6700\u540e\u6bcf\u4e24\u7ec4\u5f02\u8272\u70b9\u6570\u53d6\u6700\u5c0f\u503c\u76f8\u52a0\u3002\n\n```cpp\n#include<time.h>\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<stack>\n#include<queue>\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\nusing namespace std;\n#define fi(a,b) for(int i=a;i<=b;i++)\nconst int maxn=10001;\nint f[maxn],e[maxn],p[maxn],b[maxn],ans=0,n,m;\nint find(int x){return f[x]==x?x:f[x]=find(f[x]);}//\u5e76\u67e5\u96c6\nvoid heb(int x,int y){\n    x=find(x);y=find(y);\n    if(x==y)return;\n    f[x]=y;p[y]+=p[x];\n}//\u5e76\u67e5\u96c6\nint main(){\n    //freopen(\"in.txt\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);fi(1,n){f[i]=i;p[i]=1;}\n    memset(e,0,sizeof(e));memset(b,0,sizeof(b));\n    fi(1,m){\n        int a,b;scanf(\"%d%d\",&a,&b);\n        if(find(a)==find(b)){printf(\"Impossible\");return 0;}//\u51fa\u73b0\u77db\u76fe\n        if(e[b])heb(a,e[b]);if(e[a])heb(e[a],b);\n        e[a]=f[b];e[b]=f[a];//\u5408\u5e76\n    }//\n    fi(1,n)if(!b[find(i)]){b[f[i]]=1;b[find(e[i])]=1;ans+=min(p[f[i]],p[f[e[i]]]);}//\u6c42\u548c\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1487842637,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u9898\u9762\u4e00\u5982\u65e2\u5f80\u7684--------\n\n**\u3010\u9898\u9762\u5206\u6790\u3011**\n\n\u9996\u5148\u6211\u4eec\u8981\u770b\uff0c\u8fd9\u9053\u9898ta\u5728\u8bb2\u4ec0\u4e48\uff0cta\u5728\u6c42\u4ec0\u4e48\uff1f\n\n\u5bf9\u4e8e\u4e00\u5f20\u56fe\uff0c\u9700\u8981\u5bf9\u591a\u5c11\u4e2a\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u624d\u80fd\u4f7f\u5f97\uff1a\n\n1.\u6bcf\u6761\u8fb9\u4e0a\u90fd\u6709\u64cd\u4f5c\u70b9\n\n2.\u6bcf\u6761\u8fb9\u4e0a\u5de6\u53f3\u4e0d\u80fd\u540c\u65f6\u6709\u64cd\u4f5c\u70b9\n\n\u8fd9\u4e24\u4e2a\u70b9\u5f88\u5bb9\u6613\u4ece\u9898\u9762\u4e2d\u63d0\u53d6\u51fa\u6765\n\n**\u3010\u601d\u60f3\u7684\u521d\u6b65\u6784\u5efa\u3011**\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e4b\u524d\u60f3\u5230\u7684\u9898\u76ee\u7279\u8d28\uff0c\u6211\u4eec\u8981\u5982\u4f55\u8fdb\u884c\u5904\u7406\u5462\uff1f\n\n\u6211\u4eec\u6682\u65f6\u4e0d\u7ba1\u6cb3\u87f9\u7684\u51b2\u7a81\u95ee\u9898\uff0c\u5148\u89e3\u51b3\u5c01\u9501\u6bcf\u6761\u8fb9\n\n\u6211\u4eec\u5047\u8bbe\u6bcf\u6761\u8fb9\u5de6\u53f3\u4e24\u8fb9\u90fd\u6709\u6cb3\u87f9\u628a\u5b88\uff0c\u5e76\u4e14\u6211\u4eec\u8ba4\u4e3a\u8be5\u8fb9\u7684\u5de6\u53f3\u7aef\u70b9\u4e00\u8fb9\u662f1\u53f7\u6cb3\u87f9\uff0c\u4e00\u8fb9\u662f0\u53f7\u6cb3\u87f9\n\n\u63a5\u4e0b\u6765\u89e3\u51b3\u6cb3\u87f9\u7684\u51b2\u7a81\u95ee\u9898\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u56fe\uff0c\u8981\u4e48\u5168\u90e8\u75281\u53f7\u6cb3\u87f9\uff0c\u8981\u4e48\u5168\u90e8\u75280\u53f7\u6cb3\u87f9\uff0c\u624d\u80fd\u4fdd\u8bc1\u4e0d\u51b2\u7a81\uff0c\u6240\u4ee5\u5bf9\u4e8e\u8fd9\u4e2a\u8fde\u901a\u56fe\uff0c\u5b83\u7684\u7b54\u6848\u5c31\u662f0\u53f7\u548c\u548c1\u53f7\u7684\u6700\u5c0f\u503c\u3002\u663e\u7136\u7684\uff0c\u5982\u679c\u51fa\u73b0\u50cf\u4e0b\u56fe\u7684\u60c5\u51b5\uff0c\u663e\u7136\u7b54\u6848\u4e3aImpossible\n\n![\u51b2\u7a81](https://s2.ax1x.com/2019/10/18/KVjzz6.png)\n\n**\u3010\u601d\u8def\u7684\u5b9e\u73b0\u3011**\n\n\u6211\u4eec\u6bcf\u6b21\u627e\u5230\u672a\u88ab\u8d4b\u503c\u8fc7\u7684\u70b9\uff0c\u5bf9\u5b83\u8fdb\u884cdfs\uff0c\u5e76\u5904\u74061 0\u7684min\u503c\n\ndfs\u5185\u5904\u7406\u662f\u5426\u51b2\u7a81\uff0c1\u53f70\u53f7\u6cb3\u87f9\u8ba1\u6570\u4ee5\u53ca\u4e0b\u4e00\u5c42\u7684dfs\n\n- \u8fde\u901a\u56fe\u7684\u5904\u7406\n\t\n    \u5e76\u67e5\u96c6\u8fde\u8fb9\n\n- 1 0\u6cb3\u87f9\u7684\u8d4b\u503c\n\n\t\u5728dfs\u4e2d\u7684for\u5faa\u73af\u6bcf\u6b21\u8d4b\u503c\u4e0e\u5b83\u76f8\u8fde\u7684\u8fb9\n    \n- 1 0\u6cb3\u87f9\u7684\u51b2\u7a81\n\n\t\u5982\u679c\u672c\u6b21dfs\u5230\u7684\u70b9\u5df2\u7ecf\u88ab\u8fde\u8fc7\uff0c\u90a3\u4e48\u5224\u65ad\u70b9\u4e4b\u524d\u88ab\u8d4b\u503c\u76841 0\u53f7\u662f\u5426\u4e0e\u8fd9\u6b21\u8d4b\u503c\u7684\u76f8\u540c\n\n**\u3010\u4ee3\u7801\u3011**\n```cpp\n#include<iostream>\n#include<cstdio>\n#define N 10009\n#define M 100009\nusing namespace std;\nint use[2*N],col[2*N],head[2*N],sum[5];\nint n,m,tot;\nstruct de{\n\tint nex,u;\n}ed[2*M];\nvoid add(int a,int b){\n\ted[++tot].nex=head[a];\n\ted[tot].u=b;\n\thead[a]=tot;\n}\nbool dfs(int node,int co){\n    if(use[node]){\n        if(col[node]==co) return true;\n        else return false;\n    }\n    use[node]=1;\n    sum[col[node]=co]++;\n    bool f=1;\n    for(int i=head[node];i!=0&&f;i=ed[i].nex)\n    \tf=f&&dfs(ed[i].u,1-co);\n    return f;\n}\nint main(){\n\tint x,y,i,ans=0;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=m;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    for(i=1;i<=n;i++){\n        if(use[i])\n            continue;\n        sum[0]=sum[1]=0;\n        if(!dfs(i,0)){\n            printf(\"Impossible\");\n            return 0;\n        }\n        ans+=min(sum[0],sum[1]);\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n**\u3010\u540e\u8bb0\u3011**\n\n\u601d\u8def\u6709\u53c2\u8003**KesdiaelKen**",
        "postTime": 1568696109,
        "uid": 39406,
        "name": "djww",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u505a\u5b8c\u8fd9\u4e2a\u9898\u6211\u4e5f\u771f\u662f\u65e0\u8bed\uff0c\u6302\u4e86\u56db\u904d\u90fd\u662f\u6302\u5728memset\u4e0a\u3002\u3002\n\n\u5176\u5b9e\u697c\u4e0b\u5f88\u591a\u4eba\u4e5f\u8bf4\u4e86\uff0c\u8fd9\u4e2a\u6cb3\u87f9\u7684\u5206\u5e03\u5c31\u50cf\u662f\u628a\u8fd9\u4e2a\u56fe\u8fdb\u884c\u67d3\u8272\uff0c\u7136\u540e\u76f8\u90bb\u7684\u70b9\u8981\u67d3\u6210\u4e0d\u540c\u7684\u989c\u8272\uff0c\u5f88\u5bb9\u6613\u5f97\u51fa\u5982\u679c\u53ef\u884c\uff0c\u90a3\u4e48\u67d3\u8272\u7684\u4e24\u79cd\u989c\u8272\u4e2d\uff0c\u5c11\u7684\u90a3\u4e00\u79cd\u5c31\u662f\u8981\u6c42\u7684\u3002\n\n\u8c8c\u4f3c\u73b0\u5728\u524d\u6392\u9898\u89e3\u90fd\u662fdfs\u641c\u7d22\u7684\u4e86\uff0c\u6211\u53ea\u662f\u7ed9\u51fa\u4e00\u79cdbfs\u7684\u89e3\u6cd5\u3002\n\n\u9996\u5148\uff0c\u5efa\u56fe\uff0c\u7528\u6570\u7ec4\u6a21\u62df\u90bb\u63a5\u8868\u5efa\u56fe\uff0c\u6ca1\u9519\uff0c\u5c31\u662fspfa\u90a3\u4e48\u5efa\u56fe\u3002\n\n\u5efa\u597d\u56fe\u4e86\u4e4b\u540e\uff0c\u5f00\u59cb\u8fdb\u884c\u5bbd\u641c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u56fe\u5e76\u4e0d\u662f\u8054\u901a\u56fe\uff0c\u6240\u4ee5\u8fd8\u662f\u8981\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u5f53\u6210\u8d77\u70b9\u641c\u7684\uff0c\u5f53\u7136\u5df2\u7ecf\u641c\u8fc7\u7684\u5c31\u4e0d\u7528\u641c\u4e86\u3002\n\n\u5bf9\u4e8e\u67d3\u8272\u4f7f\u75281\u548c-1\u53ef\u80fd\u597d\u64cd\u4f5c\u4e00\u4e9b\u3002\n\n\u4e00\u904d\u67d3\u8272\u4e00\u8fb9\u52a0\u8c8c\u4f3c\u53ef\u4ee5\u52a0\u5feb\u4e00\u4e9b\u65f6\u95f4\u6548\u7387\u3002\n\n\u5f53\u7136\uff0c\u67d3\u8272\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u70b9\u662f\u5df2\u7ecf\u67d3\u8fc7\u8272\uff0c\u7136\u800c\u73b0\u5728\u5b83\u88ab\u8981\u6c42\u67d3\u6210\u53e6\u4e00\u4e2a\u989c\u8272\u81ea\u7136\u5c31\u662fImpossible\u89e3\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#define re register\nusing namespace std;\nstruct po\n{\n    int from;\n    int to;\n    int nxt;\n    int dis;\n};\npo edge[1000001];\nint head[1000001],b[10001],dis[100001],vis[1000001],col[1000001],ans,n,m,s,t,l,d;\nint h[500001][3],num,sum1,sum2;\ninline void add_edge(int from,int to,int dis)\n{\n    edge[++num].nxt=head[from];\n    edge[num].to=to;\n    edge[num].dis=dis;\n    head[from]=num;\n}\ninline int read()\n{\n    int x=0,c=1;\n    char ch=' ';\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    while(ch=='-')c*=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n    return x*c;\n}\ninline void bfs(int st)\n{\n    memset(b,0,sizeof(b));\n    int front=0,tail=1;\n    h[1][1]=st;\n    h[1][2]=1;\n    b[st]=1;\n    col[st]=1;\n    sum1=1;sum2=0;\n    while(front<tail)\n    {\n        int now=h[++front][1];\n        int color=h[front][2];\n        for(re int i=head[now];i;i=edge[i].nxt)\n        {\n            int x=edge[i].to;\n            if(col[x]==0)\n            {\n                col[x]=color*(-1);\n                if(col[x]==1)\n                sum1++;\n                else\n                sum2++;\n            }\n            else\n            {\n                if(col[x]==color)\n                {\n                    cout<<\"Impossible\";\n                    exit(0);\n                }\n            }\n            if(!b[x])\n            {\n                vis[x]=1;\n                b[x]=1;\n                h[++tail][1]=x;\n                h[tail][2]=col[x];\n            }\n        }\n    }\n    ans+=min(sum1,sum2);\n}\nint main()\n{\n    cin>>n>>m;\n    for(re int i=1;i<=m;i++)\n    {\n        s=read(),t=read();\n        add_edge(s,t,0);\n        add_edge(t,s,0);\n    }\n    for(re int i=1;i<=n;i++)\n    {\n        if(!vis[i])\n        {\n            vis[i]=1;\n            bfs(i);\n        }\n    }\n    cout<<ans;\n}\n```\n\u4ee3\u7801\u7565\u663e\u7e41\u6742\uff0c\u8bf7\u5927\u4f6c\u4eec\u52ff\u602a\n",
        "postTime": 1513993167,
        "uid": 49223,
        "name": "Victorique",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u5e76\u6ca1\u6709\u7528\u5e76\u67e5\u96c6\uff0c\u53ea\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u662f\u5426\u8d70\u8fc7\uff0c\u4ece1\u5230n\u904d\u5386\uff0c\u5982\u679c\u8be5\u8282\u70b9\u6ca1\u6709\u8d70\u8fc7\uff0c\u5219\u4ece\u8fd9\u91cc\u5f00\u59cbdfs\u5e76\u5728\u8be5\u70b9\u653e\u7f6e\u6cb3\u87f9\uff0c\u4e00\u6b65\u4e00\u6b65\u63a8\uff0c\u5982\u679c\u51fa\u73b0\u76f8\u90bb\u70b9\u90fd\u4e3a\u653e\u7f6e\u6216\u4e0d\u653e\u7f6e\u5219\u8f93\u51faimpossible\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8054\u901a\u5206\u91cf\u8bb0\u5f55\u8be5\u8054\u901a\u5206\u91cf\u7684\u70b9\u7684\u6570\u91cf\u53ca\u653e\u7f6e\u6cb3\u87f9\u7684\u6570\u91cf\uff0c\u5728\u6bcf\u4e2a\u8054\u901a\u5206\u91cf\u904d\u5386\u540e\uff0c\u5224\u65ad\u603b\u70b9\u6570\u51cf\u53bb\u653e\u7f6e\u6570\u4e66\u5426\u5c0f\u4e8e\u653e\u7f6e\u6570\uff0c\u56e0\u4e3a\u8bbe\u653e\u7f6e\u6cb3\u87f9\u7684\u70b9\u4e3a1\uff0c\u4e0d\u653e\u7684\u70b9\u4e3a0\uff0c\u9898\u76ee\u8981\u6c42\u5373\u662f0,1\u76f8\u4ea4\u66ff\u51fa\u73b0\uff0c\u5982\u679c\u5728\u521d\u59cb\u70b9\u4e3a1\u7684\u60c5\u51b5\u4e0b\u80fd\u6210\u7acb\uff0c\u90a3\u4e48\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b0\u548c1\u4ea4\u6362\u4e5f\u6210\u7acb\uff0c\u6240\u4ee5\u8981\u7528\u8be5\u8054\u901a\u5206\u91cf\u603b\u6570\u51cf\u53bb\u653e\u7f6e\u6570\u5224\u65ad\u4e89\u53d6\u653e\u7f6e\u6570\u6700\u5c0f\u3002\u6ce8\u610f\uff0c\u5f53\u8be5\u8054\u901a\u5206\u91cf\u603b\u6570\u4e3a1\u65f6\u5219\u4e3a0.\n\n\u6700\u540e\u628a\u6240\u6709\u8054\u901a\u5206\u91cf\u7684\u6700\u5c0f\u653e\u7f6e\u6570\u76f8\u52a0\u5f97\u7ed3\u679c\u3002\n\n\u4ee3\u7801\u7565\u4e11//\u6342\u8138\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nint init()\n{\n    char c=getchar();\n    int jg=0,zf=1;\n    while(c<'0'||c>'9'){if(c=='-')zf*=-1;c=getchar();}\n    while(c>='0'&&c<='9'){jg=(jg<<1)+(jg<<3)+c-'0';c=getchar();}\n    return jg*zf;\n}\nint zg[10010],n,m,h[10010],ans,top,sl,an;//zg\u8d70\u8fc7\u70b9\u7684\u6807\u8bb0\uff0ch\u90bb\u63a5\u8868\u5934\uff0cans\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u653e\u7f6e\u6570\uff0ctop\u8fb9\u6808\u9876\uff0csl\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u603b\u6570\uff0can\u603b\u653e\u7f6e\u6570 \nstruct node\n{\n    int t;\n    int next;\n}b[200010];//\u90bb\u63a5\u8868 \nvoid add(int fr,int to)//\u52a0\u8fb9 \n{\n    b[++top].t=to;\n    b[top].next=h[fr];\n    h[fr]=top;\n    return;\n}\nint dfs(int now,int sw)//\u5982\u679c\u8fd4\u56de0\u5219\u4ee3\u8868\u53d1\u751f\u51b2\u7a81\uff0cimpossible \n{\n    sl++;\n    if(sw==0)//\u8be5\u70b9\u4e3a\u6539\u8fde\u901a\u5206\u91cf\u521d\u59cb\u70b9\u3002 \n    {\n        zg[now]=1;\n        ans++;\n        bool ky=1;\n        int i=h[now];\n        while(i!=0)\n        {\n            if(!dfs(b[i].t,1))\n            {\n                cout<<\"Impossible\"<<endl;\n                return 0;\n            }\n            i=b[i].next;\n        }\n        if(sl-ans<ans)\n        ans=sl-ans;\n        if(sl!=1)//\u7279\u5224\u8be5\u8fde\u901a\u5206\u91cf\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u82e5\u67091\u4e2a\u70b9\u8fd4\u56de-1 \n        return ans;\n        else\n        return -1;\n    }\n    if(sw==1)//\u8be5\u70b9\u7684\u4e0a\u4e00\u4f4d\u653e\u7f6e\u4e86\u6cb3\u87f9 \n    {\n        zg[now]=2;\n        int  i=h[now];\n        while(i!=0)\n        {\n            if(zg[b[i].t]==2)\n            return 0;\n            if(!(zg[b[i].t]))\n            {\n                if(!dfs(b[i].t,2))\n                return 0;\n            }\n            i=b[i].next;\n        }\n    }\n    if(sw==2)//\u8be5\u70b9\u7684\u4e0a\u4e00\u4f4d\u6ca1\u6709\u653e\u6cb3\u87f9 \n    {\n        zg[now]=1;\n        int i=h[now];\n        ans++;\n        while(i!=0)\n        {\n            if(zg[b[i].t]==1)\n            return 0;\n            if(!(zg[b[i].t]))\n            {\n                if(!dfs(b[i].t,1))\n                return 0;\n            }\n            i=b[i].next;\n        }\n    }\n    return 1;\n}\nint main()\n{\n    n=init();\n    m=init();\n    for(int i=1,v,u;i<=m;i++)\n    {\n        v=init();\n        u=init();\n        add(v,u);\n        add(u,v);\n    }\n    for(int i=1;i<=n;i++)\n    if(!zg[i])//\u67e5\u627e\u672a\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u5373\u627e\u4e0b\u4e00\u4e2a\u8fde\u901a\u5206\u91cf \n    {\n        ans=0;//\u521d\u59cb\u5316 \n        sl=0;\n        int sss=dfs(i,0);\n        if(!sss)\n        return 0;\n        if(sss!=-1)\n        an+=sss;\n    }\n    cout<<an<<endl;\n    return 0;\n}\n```",
        "postTime": 1501745142,
        "uid": 21192,
        "name": "\u53cb\u90bb\u7267\u9e21",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "~~\u6211\u6765\u7ec4\u6210\u7b2c50\u7bc7\u9898\u89e3~~\n\n**\u9ed1\u767d\u67d3\u8272\u597d\u9898**\n\n\u76f4\u63a5\u9ed1\u767d\u67d3\u8272\u5373\u53ef\uff0c\u601d\u7ef4\u96be\u5ea6\u5e76\u4e0d\u9ad8\u3002\n\n\u4ee3\u7801\u5982\u4e0b\u2014\u2014\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,ans,vis[10005],a[2];\nint head[10005],k=1,u,v;\nstruct edge\n{\n\tint to,next;\n}e[200005];\n\nvoid adde(int u,int v)//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\n{\n\te[k].to=v;\n\te[k].next=head[u];\n\thead[u]=k++;\n}\n\nbool dfs(int u,int co)//\u56fe\u7684\u904d\u5386\n{\n\tif(vis[u]!=-1)//\u904d\u5386\u8fc7\u4e86\n\t{\n\t\tif(vis[u]==co)return 1;//\u5982\u679c\u5df2\u67d3\u7684\u8272\u4e0e\u5f53\u524d\u989c\u8272\u76f8\u540c\uff0c\u8bf4\u660e\u53ef\u884c\n\t\treturn 0;//\u5426\u5219\u4e0d\u884c\n\t}\n\tvis[u]=co;a[co]++;//\u6807\u8bb0\u5e76\u7edf\u8ba1\n\tbool can=1;\n\tfor(register int i=head[u];i&&can;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tcan=can&&dfs(v,!co);//\u5982\u679c\u4ecd\u5408\u6cd5\u5219\u7ee7\u7eed\n\t}\n\treturn can;\n}\n\nint main()\n{\n\tmemset(vis,-1,sizeof(vis));//\u521d\u59cb\u5316\u4e3a\u672a\u67d3\u8272\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadde(u,v);//\u52a0\u8fb9\n\t\tadde(v,u);\n\t}\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tif(vis[i]!=-1)continue;//\u904d\u5386\u8fc7\u5219\u8df3\u8fc7\n\t\ta[1]=a[0]=0;//\u521d\u59cb\u5316\u8fd9\u4e00\u90e8\u5206\u5b50\u56fe\u6240\u9700\u7684\u9ed1\u767d\u6570\n\t\tif(!dfs(i,0)){puts(\"Impossible\");return 0;}//\u5982\u679c\u4e0d\u80fd\u67d3\u8272\u5219Impossible\n\t\tans+=min(a[1],a[0]);//\u7edf\u8ba1\u7b54\u6848\uff0c\u53d6\u9ed1\u8272\u548c\u767d\u8272\u4e2d\u8f83\u5c11\u7684\u90a3\u4e2a\n\t}\n\tprintf(\"%d\\n\",ans);//\u8f93\u51fa\n\treturn 0;//\u7ed3\u675f\u4e86\u7f6a\u6076\u7684\u4e00\u751f\n}\n```\n\u8d44\u74f7\u4e00\u4e0b\u53edqwq",
        "postTime": 1576904671,
        "uid": 65502,
        "name": "Crab_Dave",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "```cpp\n#include<iostream>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nconst int N = 10001;\n\nvector<int> g[N];   //  \u9886\u63a5\u77e9\u9635\nint n, m, ans;\nint color[N];   //  0\u6ca1\u6d82 1\u767d\u8272 -1\u9ed1\u8272\n\nbool magic()\n{\n  queue<int> q;\n\n  for(int i = 1; i <= n; i++){  //  \u56fe\u4e0d\u8fde\u901a\n    if(!color[i]){  //  i\u672a\u6d82\u8272\uff0c\u7ed9\u4ecei\u5f00\u59cb\u7684\u8fde\u901a\u5b50\u56fe\u6d82\u8272\n      int cnt = 0, num = 1; //  \u8fde\u901a\u5b50\u56fe\u7684\u6d82\u9ed1\u8272\u6570\u548c\u9876\u70b9\u6570\n      \n      //    \u8d77\u70b9i\u5165\u961f\uff0c\u8bb0\u4e3a\u767d\u8272\uff0c\u51c6\u5907\u5e7f\u641c\n      q.push(i);\n      color[i] = 1;\n\n      while(!q.empty()){\n        int h = q.front();\n\n        for(int i = 0; i < g[h].size(); i++){   //  \u7ed9\u961f\u9996\u8fde\u63a5\u9876\u70b9\u6d82\u8272\n          int t = g[h][i];\n          if(color[t] == color[h])  //  \u9876\u70b9t\u6709\u989c\u8272\u4e14\u4e0e\u961f\u9996\u9876\u70b9\u51b2\u7a81\n            return false;\n          if(color[t])  //  t\u6709\u989c\u8272\u5c31\u4e0d\u6d82\u8272\u4e86\n            continue;\n\n          //    \u9876\u70b9t\u6ca1\u989c\u8272\uff0c\u4e0a\u8272\u5e76\u7edf\u8ba1\u9ed1\u8272\u6570\n          color[t] = -color[h];\n          if(color[t] == -1)\n            cnt++;\n          //    \u7edf\u8ba1\u8fde\u901a\u5b50\u56fe\u9876\u70b9\u6570\uff0c\u65b0\u6d82\u8272\u7684\u9876\u70b9\u5165\u961f\n          num++;\n          q.push(t);\n        }\n        \n        q.pop();\n      }\n      \n      if(num - cnt < cnt)   //  \u9ed1\u767d\u98a0\u5012\u9009\u6d82\u8272\u6570\u5c11\u7684\n        cnt = num - cnt;\n      \n      ans += cnt;   //  \u5f53\u524d\u8fde\u901a\u5b50\u56fe\u7684\u6700\u5c11\u6d82\u8272\u6570\u52a0\u5165\u7b54\u6848\u4e2d\n    }\n  }\n\n  return true;\n}\n\nint main()\n{\n  cin >> n >> m;\n  for(int i = 0; i < m; i++){\n    int a, b;\n    cin >> a >> b;\n    g[a].push_back(b);\n    g[b].push_back(a);\n  }\n\n  if(magic())\n    cout << ans;\n  else\n    cout << \"Impossible\";\n\n  return 0;\n}\n```\n",
        "postTime": 1572770561,
        "uid": 179983,
        "name": "59percent",
        "ccfLevel": 0,
        "title": "\u5c01\u9501\u9633\u5149\u5927\u5b66(\u9ed1\u767d\u56fe)"
    },
    {
        "content": "# \u4e8c\u5206\u56fe\u5224\u65ad\u6a21\u677f\n\u5982\u4f55\u5224\u65ad\u4e00\u5f20\u56fe\u662f\u4e8c\u5206\u56fe\uff1f\u4ece\u4e00\u4e2a\u70b9\u5f00\u59cb\u67d3\u8272\uff0c\u9ed1\u9ec4\u76f8\u95f4\u67d3\u8272\uff0c\u67d3\u5230\u4e00\u4e2a\u672c\u989c\u8272\u7684\u70b9\u5373 $ U.color = V.color $ \u5c31\u9519\u4e86\u3002\n#### \u5224\u65adImpossble\u5c31\u662f\u8fd9\u6837\n```cpp\nbool dfs(int x,int c)\n{\n\tcolor[x]=c;\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(color[y]==c)return 0;\n\t\tif(color[y]==0&&!dfs(y,-c))//\u67d3\u4e0b\u4e00\u79cd\u989c\u8272\n        return 0;\n\t}\n\treturn 1;\n}\n```\n## \u90a3\u4e48\u95ee\u9898\u6765\u4e86\n## \u600e\u4e48\u5224\u65ad\u8981\u51e0\u53ea\u6cb3\u87f9\u5462\uff1f\n\u6211\u4eec\u770b![](https://cdn.luogu.com.cn/upload/image_hosting/hzxdpcbn.png)\u53ea\u8981\u5728\u6bcf\u4e2a\u4e8c\u5206\u5c0f\u56fe\u4e0a\u5224\u65ad $ Yellow \\ and \\ black $ \u7684\u6570\u91cf\u54ea\u4e2a\u5927\u5373\u53ef\u3002\u9996\u5148\u6211\u4eec\u5b58\u4e0b\u6765\u6bcf\u4e2a\u5c0f\u56fe\uff0c\n```cpp\nbool dfs(int x,int c)\n{\n\tcolor[x]=c;\n\tquery[++cnt]=x;//\u52a0\u7684\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(color[y]==c)return 0;\n\t\tif(color[y]==0&&!dfs(y,-c))return 0;\n\t}\n\treturn 1;\n}\nfor(int i=1;i<=n;i++)\n\tif(color[i]==0)\n\tif(!dfs(i,666))\n\t{\n\t\tputs(\"Impossible\");//\u4e0d\u884c\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tfor(int j=1;j<=cnt;j++)\n\t\tif(color[query[j]]==666)tmp++;//tmp->\u9ec4\n\t\tans+=min(tmp,cnt-tmp);//cnt-tmp->\u9ed1\n\t\ttmp=0;\n\t\tcnt=0;//\u6bcf\u6b21\u91cd\u7f6e\u4e3a\u3007\n\t\tres=0;\n\t}\n```\n# OK\uff0c\u6765\u4e00\u53d1\u603b\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<iostream>\n#define maxn 100010\nusing namespace std;\nint n,m,x,y,tot=1,ans;\nint head[10010],Next[maxn<<1],ver[maxn<<1],res,tmp;\nshort color[10010];\nint query[10010],cnt;\nbool dfs(int x,int c)\n{\n\tcolor[x]=c;\n\tquery[++cnt]=x;\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(color[y]==c)return 0;\n\t\tif(color[y]==0&&!dfs(y,-c))return 0;\n\t}\n\treturn 1;\n}\nvoid add(int x,int y)\n{\n\tver[++tot]=y;\n\tNext[tot]=head[x];\n\thead[x]=tot;\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)\n\tif(color[i]==0)\n\tif(!dfs(i,666))//\u67d3\u8272666\n\t{\n\t\tputs(\"Impossible\");\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\tfor(int j=1;j<=cnt;j++)\n\t\tif(color[query[j]]==666)tmp++;\n\t\tans+=min(tmp,cnt-tmp);\n\t\ttmp=0;\n\t\tcnt=0;\n\t\tres=0;\n\t}\n\tprintf(\"%d\",ans);\n}\n```\n",
        "postTime": 1571043176,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "### \u8fd9\u662f\u4e00\u9053\u840c\u65b0\u7ec3\u4e60dfs\u7684\u4e0d\u4e8c\u4e60\u9898\n \u8fd9\u9053\u9898\u53ef\u4ee5\u62bd\u8c61\u6210\u7528dfs\u6c42\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5757\u7684\u540c\u65f6\u8fdb\u884c\u67d3\u8272\uff0c\u903b\u8f91\u80fd\u529b\u7684\u8981\u6c42~~\u5bf9\u840c\u65b0\u6765\u8bf4\u8f83\u9ad8~~\n\n\n------------\nOI\u9898\u76ee\u901a\u5e38\u90fd\u5f88~~\u7e41\u7410~~\uff0c\u5408\u7406\u5408\u6cd5\u5730\u62bd\u8c61\u9898\u610f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u80fd\u529b\u3002\n\u9898\u76ee\u4e2d\u63d0\u5230\u6cb3\u87f9\u5c01\u9501\u4e86\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u5c31\u4e0d\u597d\u4f7f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6709\u6cb3\u87f9\u7684\u9876\u70b9\u62bd\u8c61\u6210\u4e00\u79cd\u989c\u8272\uff0c\u65e0\u6cb3\u87f9\u7684\u9876\u70b9\u62bd\u8c61\u6210\u53e6\u4e00\u79cd\u989c\u8272\u3002\n\n\u9898\u76ee\u5927\u610f\uff1a**\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\u6709\u5e8f\u5730\u904d\u5386\uff0c\u4fdd\u8bc1\u6bcf\u4e24\u4e2a\u8fde\u901a\u7684\u9876\u70b9\u989c\u8272\u4e0d\u540c\uff0c\u8f93\u51fa\u4e24\u79cd\u989c\u8272\u4e2d\u67d3\u8272\u6b21\u6570\u8f83\u5c11\u7684\u90a3\u4e2a\uff1b\u5982\u679c\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u4efb\u4f55\u4e00\u5904\u51fa\u73b0\u77db\u76fe\uff08\u5373\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u88ab\u67d3\u6210\u4e00\u79cd\u989c\u8272\uff09\uff0c\u904d\u5386\u505c\u6b62\uff0c\u8f93\u51faImpossible\u3002\n------------**\n\nPS\uff1a\u8fd9\u91cc\u4e3a\u840c\u65b0\u4eec\u666e\u53ca\u4e00\u4e0b\u201c\u67d3\u8272\u201d\uff1a\n~~\u9996\u5148\u80af\u5b9a\u4e0d\u662f\u62ff\u7740\u5237\u5b50\u5237\u5566~~\n\u67d3\u8272\u662f\u5904\u7406\u4e00\u4e9b\u6709\u5173\u56fe\u7684\u95ee\u9898\u7684\u5e38\u7528\u65b9\u6cd5\uff0c\u4e00\u79cd\u989c\u8272\u53ef\u4ee5\u4ee3\u8868\u4e00\u79cd\u72b6\u6001\uff0c\u800c\u989c\u8272\u53ef\u4ee5\u75281\uff0c2\uff0c3\u8fd9\u6837\u7684\u6570\u5b57\u6765\u8868\u793a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528true\uff0cfalse\u8fd9\u6837\u7684\u5e03\u5c14\u578b\u53d8\u91cf\u8868\u793a\uff0c\u7b49\u7b49\u3002\u6700\u7ec8\u76ee\u7684\u53ea\u6709\u4e00\u4e2a\uff1a\u628a\u56fe\u4e0a\u7684\u9876\u70b9\u5206\u7c7b\u5904\u7406\uff0c\u4ece\u800c\u8fbe\u5230\u89e3\u51b3\u95ee\u9898\u7684\u6548\u679c\u3002\n\n------------\n\u4e0b\u9762\u5c31\u662f\u4ee3\u7801\u5b9e\u73b0\u7684\u8fc7\u7a0b\u5566\n\u9996\u5148\u5f53\u7136\u662f\u628a\u56fe\u5b58\u8fdb\u6765\uff0c\u5b58\u56fe\u7684\u65b9\u6cd5\u6709\u591a\u79cd\uff0c\u6700\u840c\u65b0\u7684\u65b9\u6cd5\u662f\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4G[i][j],\u8868\u793a\u9876\u70b9i\u3001j\u4e4b\u524d\u662f\u5426\u6709\u8fde\u901a\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\uff0c\u5f88\u591a\u7a7a\u95f4\u662f\u6d6a\u8d39\u6389\u7684\uff0c\u56e0\u6b64\u6570\u636e\u4e00\u5927\u8d77\u6765\u5c31\u53ef\u80fdMLE\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u53e6\u4e00\u79cd\u66f4\u4e3b\u6d41\u7684\u5b58\u56fe\u65b9\u6cd5\uff1a\u4e0d\u5b9a\u957f\u6570\u7ec4\n```cpp\nvector <int> G[N];\n```\nG[i]\u7528\u6765\u8868\u793a\u70b9i\uff0c**G[i][j]\u8868\u793a\u70b9i\u4e0e\u70b9G[i][j]\u4e4b\u95f4\u662f\u5426\u6709\u9053\u8def\u8fde\u63a5\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684j\u7684\u503c\u5e76\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\uff0cj\u53ea\u662f\u8d77\u5230\u7528\u6765\u8868\u793a\u6570\u7ec4\u957f\u5ea6\u7684\u4f5c\u7528\u3002**\n\u4e0b\u9762\u662f\u5b58\u56fe\u7684\u4ee3\u7801\uff1a\n```cpp\nfor(int i=1;i<=m;++i)\n{\n\tint a,b;\n\tscanf(\"%d%d\",&a,&b);\n\tG[a].push_back(b);\n\tG[b].push_back(a);\n}\n```\n\u5230\u8fd9\u91cc\u8fd8\u4e0d\u53ef\u4ee5\u904d\u5386\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u8981\u9884\u5904\u7406\u4e00\u4e9b\u4e8b\u513f\n\u6211\u4eec\u9700\u8981\u5f00\u4e00\u4e2a\u6570\u7ec4V[n+1],V[i]\u8868\u793a\u70b9\u662f\u5426\u88ab\u67d3\u8272\u53ca\u67d3\u6210\u4e86\u4ec0\u4e48\u8272\uff0c\u6211\u4eec\u7ea6\u5b9a-1\u4e3a\u672a\u67d3\u8272\uff0c0\u548c1\u5206\u522b\u4e3a\u4e24\u79cd\u989c\u8272\u3002\u73b0\u5728\uff0c\u6ca1\u6709\u70b9\u88ab\u67d3\u8272\uff0c\u6240\u4ee5\u9700\u8981\u521d\u59cb\u5316\u6570\u7ec4V\n```cpp\nmemset(V,-1,sizeof(V));\n```\n\u6211\u4eec\u8fd8\u9700\u8981\u5f00\u4e00\u4e2a\u6570\u7ec4color[2]\uff0c\u8868\u793a0\u8272\u548c1\u8272\u5206\u522b\u67d3\u4e86\u591a\u5c11\u6b21\u3002\n\n\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730dfs\u5566\n\u9996\u5148\uff0c\u6211\u4eec\u4ee5\u5faa\u73af\u7684\u65b9\u5f0f\u679a\u4e3e\u56fe\u4e0a\u6bcf\u4e2a\u70b9\uff0c\u5f53\u679a\u4e3e\u5230\u70b9i\u65f6\u8fdb\u884c\u5224\u5b9a\uff0c\u5982\u679c\u70b9i\u5df2\u67d3\u8272\uff0c\u90a3\u4e48\u5c31continue\uff1b\u5982\u679c\u70b9i\u672a\u88ab\u67d3\u8272\uff0c\u90a3\u5c31\u968f\u4fbf\u67d3\u4e2a\u8272\uff08\u4e3a\u53d9\u8ff0\u65b9\u4fbf\uff0c\u6211\u4eec\u67d3\u62100\u8272\uff09\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u8981\u5f00\u59cb\u4ee5\u70b9i\u4e3a\u6839\u53bb\u641c\u7d22\u4e86\uff0c\u6211\u4eec\u9700\u8981\u628acolor\u6570\u7ec4\u6e05\u96f6\uff08\u6e05\u96f6\u7684\u5177\u4f53\u539f\u56e0\u540e\u7eed\u4ecb\u7ecd\uff09\n```cpp\nfor(int i=1;i<=n;++i)\n\t{\n\t\tif(V[i]!=-1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tV[i]=0;\n\t\tcolor[1]=color[0]=0;\n\t\tdfs(i);\n\t\tans+=min(color[0],color[1]); //\u8fd9\u884c\u7684\u4f5c\u7528\u540e\u9762\u8bf4\n\t}\n```\n\u4e0b\u9762\u5c31\u662fdfs\u51fd\u6570\uff0cdfs(x)\u8868\u793a\u5bf9\u70b9x\u8fdb\u884c\u641c\u7d22\uff0c\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97\u70b9x\u88ab\u67d3\u6210\u4e86\u4ec0\u4e48\u8272\uff0c\u540c\u65f6\u5176\u5bf9\u5e94\u7684color\u6570\u7ec4\u53d8\u91cf++\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u4f9d\u6b21\u679a\u4e3e\u6240\u6709\u4e0e\u70b9x\u8fde\u901a\u7684\u70b9G[x][k]\uff0c\u5982\u679c\u70b9G[x][k]\u5df2\u88ab\u67d3\u8272\uff0c\u5c31continue\uff1b\u5426\u5219\uff0c \u5c31\u67d3\u6210\u4e0e\u70b9x\u4e0d\u540c\u7684\u8272\uff0c\u518d\u641c\u7d22\u8fd9\u4e2a\u70b9\n\u2026\u2026\n\u4e00\u76f4\u4e0b\u53bb\uff0c\u76f4\u5230\u65e0\u8def\u53ef\u8d70\u56de\u6eaf\n```cpp\nvoid dfs(int x)\n{\n\tif(!V[x]) ++color[0];\n\tif(V[x]) ++color[1];\n\tfor(int k=0;k<G[x].size();++k)\n\t{\n\t\tint v=G[x][k];\n\t\tif(V[v]!=-1)\n\t\t{\n\t\t\tif(V[v]==V[x])     //\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0c\u6b64\u5904\u8868\u793a\u70b9v\u548c\u70b9x\u5747\u5df2\u88ab\u67d3\u8272\uff0c\u5e76\u4e14\u7531\u4e8e\u524d\u9762\u7684\u67d0\u5904\u64cd\u4f5c\uff0c\u4f7f\u5f97\u8fd9\u4e24\u4e2a\u8fde\u901a\u7684\u70b9\u88ab\u67d3\u6210\u4e86\u540c\u4e00\u79cd\u989c\u8272\uff0c\u51fa\u73b0\u4e86\u77db\u76fe\uff0c\u6240\u4ee5\u76f4\u63a5\u4e2d\u65ad\u7a0b\u5e8f\u7684\u8fd0\u884c\u5373\u53ef\u3002\n\t\t\t{\n\t\t\t\tprintf(\"Impossible\\n\");\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tV[v]=!V[x];\n\t\tdfs(v);\n\t}\n}\n```\n\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u904d\u5386\u5b8c\u6210\u4e86\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6211\u4eec\u9700\u8981\u6c47\u603b\u7b54\u6848\uff0c\u4e3a\u4e0b\u4e00\u6b21\u904d\u5386\u505a\u51c6\u5907\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u6b64\u65f6\u5df2\u7ecf\u5b8c\u6210\u4e86\u4e00\u4e2a\u8fde\u901a\u8fde\u901a\u5757\uff0c\u4e0b\u6b21\u904d\u5386\u4e00\u5b9a\u4e0d\u4f1a\u548c\u672c\u6b21\u51fa\u73b0\u540c\u4e00\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0b\u6b21\u904d\u5386\u4e0e\u672c\u6b21\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u627e\u51fa\u4e24\u79cd\u989c\u8272\u4e2d\u67d3\u8272\u6b21\u6570\u8f83\u5c11\u7684\u90a3\u4e2a\u989c\u8272\u4f5c\u4e3a\u8fd9\u6b21\u904d\u5386\u7684\u6700\u7ec8\u7b54\u6848\u5373\u53ef\u3002\n```cpp\nans+=min(color[0],color[1]); \n```\n\u6700\u540e\uff0c\u6211\u4eec\u53ea\u9700\u628aans\u7684\u503c\u8f93\u51fa\u5c31AC\u5566\uff01\n\n#### \u4e0b\u9762\u662f\u5b8c\u6574\u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=10000+10;\nint n,m;\nint V[N];\nvector <int> G[N];\nint color[2];\nint ans;\nvoid dfs(int x)\n{\n\tif(!V[x]) ++color[0];\n\tif(V[x]) ++color[1];\n\tfor(int k=0;k<G[x].size();++k)\n\t{\n\t\tint v=G[x][k];\n\t\tif(V[v]!=-1)\n\t\t{\n\t\t\tif(V[v]==V[x])\n\t\t\t{\n\t\t\t\tprintf(\"Impossible\\n\");\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tV[v]=!V[x];\n\t\tdfs(v);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tG[a].push_back(b);\n\t\tG[b].push_back(a);\n\t}\n\tmemset(V,-1,sizeof(V));\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(V[i]!=-1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tV[i]=0;\n\t\tcolor[1]=color[0]=0;\n\t\tdfs(i);\n\t\tans+=min(color[0],color[1]); \n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\u5b8c\u7ed3\uff0c\u6492\u82b1\uff01\uff01\uff01",
        "postTime": 1564588624,
        "uid": 218405,
        "name": "_CHO",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.org/fe/problem/P1330)\n# Solution\n\u7b80\u5355\u8bf4\uff0c\u5c31\u662f\u5c06\u7ed9\u5b9a\u7684\u56fe\uff08\u4e0d\u4e00\u5b9a\u8054\u901a\uff09\u8fdb\u884c\u201c\u67d3\u8272\u201d\u3002\u56e0\u4e3a\u201c\u5f53\u4e24\u53ea\u6cb3\u87f9\u5c01\u9501\u4e86\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u65f6\uff0c\u4ed6\u4eec\u4f1a\u53d1\u751f\u51b2\u7a81\u201d\uff0c\u6240\u4ee5\u7528\u4e24\u79cd\u989c\u8272\u3002\n\n\u6ce8\u610f\uff1a\u7ed9\u5b9a\u7684\u56fe\u4e0d\u4e00\u5b9a\u662f\u8054\u901a\u7684\n\n\u5224\u8054\u901a\uff1a\n\n\u65b9\u6cd5\u4e00\uff1a\u5e76\u67e5\u96c6\uff0c\u7236\u8282\u70b9\u76f8\u540c\u7684\u4e3a\u4e00\u5f20\u56fe\uff08[\u53ef\u53c2\u8003\u849f\u84bb\u7684OI\u7b14\u8bb0](https://five-shifts-forever.blog.luogu.org/bing-zha-ji)\uff09\n\n\u65b9\u6cd5\u4e8c\uff1aFloyd\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nint n,m,sum1,sum2,ans;  //n\u4e3a\u8282\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570\uff0csum1.sum2\u7528\u4e8e\u67d3\u8272\u70b9\u7684\u7edf\u8ba1\uff0cans\u4e3a\u6700\u540e\u7b54\u6848\nint f[10001],vis[10001],du[10001];   //f\u7528\u4e8e\u5e76\u67e5\u96c6\u5224\u8054\u901a\uff0cvis\u7528\u4e8e\u67d3\u8272\uff081\uff0c2\u5206\u522b\u662f\u4e24\u79cd\u989c\u8272\uff09\uff0cdu\u7528\u4e8e\u7edf\u8ba1\u8282\u70b9\u7684\u5ea6\u6570\nbool flag;   //flag\u7528\u4e8e\u5224\u662f\u5426\u6709\u89e3.false\u8868\u6709\u89e3.true\u65e0\u89e3\nvector<int> g[10001];  //vector\u7384\u5b66\u5efa\u56fe\n//\u5e76\u67e5\u96c6\nint find(int x){\n    if(x!=f[x]) f[x]=find(f[x]);\n    return f[x];\n}\nvoid dfs(int x){\n    if(vis[x]==1) sum1++;\n    if(vis[x]==2) sum2++;  //\u8bb0\u5f55\u8272\u6570\n    if(flag==true) return ; \n    for(int i=0;i<g[x].size();i++){\n        if(vis[x]!=vis[g[x][i]]&&vis[g[x][i]]!=0) continue; //\u5df2\u7ecf\u67d3\u597d\uff0c\u8df3\u8fc7\n        if(vis[x]==vis[g[x][i]]){ //\u4e0e\u4e4b\u524d\u6709\u51b2\u7a81\uff0c\u65e0\u89e3\n            flag=true;\n            break;\n        }\n        vis[g[x][i]]=3-vis[x];\n        dfs(g[x][i]);\n    }\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) f[i]=i;\n    for(int i=1;i<=m;i++){\n        int u,v;\n        cin>>u>>v;\n        int x=find(u);\n        int y=find(v);\n        if(x!=y) f[y]=x;  //\u5e76\u67e5\u96c6\n        g[u].push_back(v);\n        g[v].push_back(u);  //\u65e0\u5411\u56fe\uff0c\u53cc\u5411\u5efa\u8fb9\n        du[u]++;\n        du[v]++;   //\u8bb0\u5f55\u5ea6\u6570\n    }\n    for(int i=1;i<=n;i++){\n        sum1=0,sum2=0;  //sum1.sum2\u8868\u6bcf\u5f20\u56fe\u7684\u4e24\u79cd\u8272\u6570\uff0c\u641c\u7d22\u524d\u6e05\u96f6\n        if(f[i]==i&&du[i]>0){  //\u641c\u7d22\u6bcf\u5f20\u72ec\u7acb\u4e14\u6709\u8fb9\u7684\u56fe\n            vis[i]=1;  //\u8d77\u70b9\u8272\u522b\u5176\u5b9e\u65e0\u6240\u8c13\uff0c\u6548\u679c\u90fd\u4e00\u6837\n            dfs(i);\n            ans+=min(sum1,sum2);\n        }\n        if(flag==true){\n            cout<<\"Impossible\";\n            return 0;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```\n\u849f\u84bb\u521d\u6b21\u5199\u9898\u89e3\uff0c\u8bf7\u591a\u6307\u6559",
        "postTime": 1555242452,
        "uid": 70151,
        "name": "\u52a0\u52d2\u6bd4\u00b7\u53f2\u52aa\u6bd4",
        "ccfLevel": 0,
        "title": "P1330 \u5c01\u9501\u9633\u5149\u5927\u5b66"
    },
    {
        "content": "[\u9898\u76ee\u63cf\u8ff0](https://www.luogu.org/problemnew/show/P1330)\n\n\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u4e00\u9053\u56fe\u7684\u904d\u5386\u3002\u9898\u76ee\u7684\u610f\u601d\u5927\u81f4\u662f\uff0c\u5c06\u4e00\u5f20\u56fe\u4e0a\u7684\u6bcf\u4e00\u6761\u8fb9**\u90fd\u6709\u4e14\u53ea\u80fd\u6709**\u4e00\u4e2a\u7aef\u70b9\u88ab\u9009\u4e2d\u3002\n\u4e8e\u662f\u5bf9\u4e8e\u4e00\u5f20\u56fe\uff0c**\u6709\u4e00\u4e2a\u70b9\u88ab\u9009\u4e2d\uff0c\u4e0e\u5176\u76f8\u8fde\u7684\u70b9\u90fd\u4e0d\u80fd\u88ab\u9009**\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef \u672c\u9898\u8fd4\u56de(impossible);\n\n\u6211\u4e3a\u4e86\u8ba9\u6587\u5b57\u80fd\u914d\u5408\u4ee3\u7801\uff0c\u4ee5\u4e0b\u7684\u6807\u8bb0\u70b9\u5168\u7528map<int,bool> A,B\u4e24\u4e2a\u4ee3\u66ff\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u904d\u5386\u8be5\u56fe\uff0c\u540c\u65f6\u6807\u8bb0\u8be5\u70b9\u8fdb\u5165A\u8fd8\u662f\u8fdb\u5165B\uff0c\u518d\u4ece\u8fd9\u4e2a\u70b9\u5411\u5176\u4ed6\u70b9\u904d\u5386\uff0c\u5982\u679c\u5176\u4ed6\u70b9\u6ca1\u6709\u88ab\u904d\u5386\u8fc7\uff0c\u5219\u52a0\u5165\u5f85\u904d\u5386\u961f\u5217\uff0c\u88ab\u904d\u5386\u8fc7\u7684\u70b9\u8981\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u9898\u610f\u3002\n\n### \u6ce8\u610f\uff01\n\n\u672c\u9898\u6709\u4e00\u4e2a\u5751\u70b9\uff0c\u5751\u4e86\u62113\u6b21\u3002\u3002 \u9996\u5148\u4ed6\u7684\u70b9\u4f7f\u7528\u7edd\u5bf9\u4e0d\u662f\u4ece1\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u51fa\u73b0\uff0c\u5176\u6b21\uff0c\u4ed6\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u53ef\u80fd\u6709\u591a\u7ec4\u56fe\uff0c\u4e5f\u5c31\u662f\u4e0d\u662f\u4e00\u5f20\u8fde\u901a\u56fe\u3002\u6211\u4eec\u9700\u8981\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u5224\u65ad\u4e00\u6b21\uff0c\u7136\u540e\u4eceA.size()\u548cB.size()\u4e2d\u53d6\u6700\u5c0f\u7684\u90a3\u4e2a\u4f5c\u4e3a\u8fd9\u4e2a\u5c0f\u56fe\u7684\u7ed3\u679c\u3002\n\nQAQ\n\n\u7136\u540e\uff0c\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5~~\u6109\u5feb~~\u7684\u6c34\u8fc7\u4e86\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n\tint w=1,d=0; char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1; ch=getchar();}\n\twhile(ch>='0'&&ch<='9')d=d*10+ch-'0',ch=getchar();\n\treturn w*d;\n}\nconst int N=100010,M=500010;\nint head[N],Next[M],ver[M],tot;\nvoid add(int x,int y)\n{\n\tver[++tot]=y,Next[tot]=head[x],head[x]=tot;\n}\nmap<int,bool> A,B;\nint n,m,df[N],d[N],zz; \n\n//df\u6570\u7ec4\u5224\u65ad\u8be5\u70b9\u662f\u5426\u88ab\u8bb0\u5f55\uff0cd\u6570\u7ec4\u8bb0\u5f55\u51fa\u73b0\u8fc7\u7684\u70b9\u3002\n\nvoid init()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tif(!df[x])\n\t\t{\n\t\t\tdf[x]=1; d[++zz]=x;\n\t\t}\n\t\tif(!df[y])\n\t\t{\n\t\t\tdf[y]=1; d[++zz]=y;\n\t\t}\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t} \n}\nbool v[N];\nqueue<pair<int,int> > q;\nvoid bfs(int k,int jh)\n{\n\tq.push(make_pair(k,jh));\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front().first,z=q.front().second;\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=Next[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(!v[y]) //\u5982\u679c\u8be5\u70b9\u6ca1\u6709\u904d\u5386\u8fc7\uff0c\u5224\u65ad\u5b83\u8fdb\u54ea\u4e00\u4e2a\u96c6\u5408\n\t\t\t{\n\t\t\t\tif(z) A[y]=1;\n\t\t\t\telse B[y]=1;\n\t\t\t\tv[y]=1;\n\t\t\t\tq.push(make_pair(y,(z+1)%2));\n\t\t\t}\n\t\t\telse //\u4e0d\u7136\u5c31\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u9898\u610f\u3002\n\t\t\t{\n\t\t\t\tint flag=(A.count(y)?0:1);\n\t\t\t\tif(z==flag) \n\t\t\t\t{\n\t\t\t\t\tcout<<\"Impossible\"; \n\t\t\t\t\texit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint ans;\nvoid solve()\n{\n\tfor(int i=1;i<=zz;i++) \n    //\u9009\u51fa\u6ca1\u6709\u7528\u8fc7\u7684\u70b9\uff0c\u5c31\u662f\u6ca1\u6709\u904d\u5386\u8fc7\u7684\u5206\u56fe\u3002\n\tif(!v[d[i]])\n\t{\n\t\tA[d[i]]=1;v[d[i]]=1;\n\t\tbfs(d[i],0);\n\t\tans+=min(A.size(),B.size()); \n\t\tA.clear();B.clear(); //\u6bcf\u6b21\u52a0\u5b8c\u8981\u6e05\u7a7amap\n\t}\n\tcout<<ans;\n}\nint main()\n{\n\tinit();\n\tsolve();\n}\n```",
        "postTime": 1541664149,
        "uid": 74598,
        "name": "\u6076\u706c\u5fc3",
        "ccfLevel": 0,
        "title": "P1330 \u5c01\u9501\u9633\u5149\u5927\u5b66"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u867d\u7136\u6211\u4e5f\u662f\u7528dfs\u5b9e\u73b0\u7684 \u4f46\u770b\u4e86\u770b\u4e0b\u9762\u5927\u4f6c\u7684\u9898\u89e3\u597d\u50cf\u6ca1\u6709\u548c\u6211\u601d\u8def\u5b8c\u5168\u4e00\u6837\u7684\n\n\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355 \u5f88\u597d\u7406\u89e3 \u4f46\u6211\u611f\u89c9\u4e5f\u5f88\u9b3c\u755c\n\n\u9996\u5148\u9700\u8981\u5199\u4e24\u4e2adfs\u51fd\u6570 dfs1\u548cdfs2 \u4e14\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u8fc7\u7a0b\u4e2d\u4f1a\u4e92\u76f8\u8c03\u7528\n\n\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe \u6211\u4eec\u5148\u904d\u5386\u4e00\u4e0b\u6bcf\u4e00\u4e2aedge[i].to \u5982\u679c\u5b83\u4ece\u6765\u6ca1\u6709\u88abdfs1\u6216\u8005dfs2\u641c\u5230\u8fc7 \u6211\u4eec\u5c31\u7528dfs1\u641c\u5b83\n\n\u7136\u540e\u5bf9\u4e8e\u5b83\u6240\u5728\u7684\u56fe \u4e0e\u5b83\u76f8\u90bb\u7684\u70b9 \u6211\u4eec\u7528dfs2\u53bb\u641c \u800c\u4e14\u53ea\u8981\u662f\u88abdfs2\u641c\u5230\u7684\u70b9 \u6211\u4eec\u90fdans++\n\n\u4e3e\u4e2a\u4f8b\u5b50 **7-28-2-12-18** \u8fd9\u662f\u4e00\u4e2a\u56fe\n\n\u5047\u5982\u4e4b\u524d\u6211\u4eec\u53d1\u73b0**2**\u8fd9\u4e2a\u70b9\u6ca1\u88ab\u641c\u8fc7(!judge[edge[i].to]) \u5148\u7528dfs1\u641c\u5b83 \u7136\u540e\u641c\u5b83\u7684\u65f6\u5019\u904d\u5386\u4ed6\u7684\u4e34\u70b9 \u4f1a\u7528dfs2\u641c\u5230**12** \u56e0\u4e3a\u5b83\u662f\u88abdfs2\u641c\u5230\u7684 \u6240\u4ee5ans++ \u7136\u540e\u518d\u8c03\u7528dfs1\u53bb\u641c**18** \u8fd9\u6837\u6574\u4e2a\u56fe\u4e0b\u6765 **28 12**\u4e24\u4e2a\u70b9\u90fd\u662f\u88abdfs2\u641c\u5230\u7684 \u6240\u4ee5ans\u5c31\u7b49\u4e8e2\n\n\u4f46\u662f\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898 \u5982\u679c\u8fd9\u4e2a\u56fe\u6211\u4eec\u4e00\u5f00\u59cb\u5148\u641c\u7684\u662f**28** \u90a3\u4e48\u641e\u5b8c\u8fd9\u4e2a\u56fe\u540e\u6211\u4eec\u4f1a\u53d1\u73b0 dfs2\u641c\u5230\u7684\u70b9\u6709**7 2 18** \u8fd9\u6837ans\u5c31\u7b49\u4e8e3\u4e86 \u660e\u663e\u4e0d\u5bf9 \u6240\u4ee5\u6211\u4eec\u6ca1\u641c\u4e00\u4e2a\u56fe\u7684\u65f6\u5019\u90fd\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e2a\u56fe\u4e00\u5171\u591a\u5c11\u4e2a\u70b9 \u6700\u540e\u771f\u6b63\u7684\u7b54\u6848total\u5c31+=min(ans , pointsize - ans) pointsize\u5c31\u662f\u6307\u56fe\u4e2d\u70b9\u7684\u603b\u6570\n\n\u5bf9\u4e8eImpossible\u7684\u60c5\u51b5 \u6211\u4eec\u4f1a\u53d1\u73b0 \u5982\u679c\u4f60\u7528dfs1\u641c\u5230\u4e86\u4e00\u4e2a \u5df2\u7ecf\u88abdfs1\u641c\u5230\u8fc7\u7684\u70b9 \u90a3\u4e48 \u5b83\u80af\u5b9a\u5c31\u4f1aImpossible \u5e94\u8be5\u5f88\u5bb9\u6613\u60f3\u5427\n\n\u5bf9\u4e8e\u6211\u641e\u7684\u4e09\u4e2a\u5e03\u5c14\u6570\u7ec4exist[size] , judge[size] , vis[size]\u5b83\u4eec\u7684\u610f\u601d\u5206\u522b\u662f\u6709\u6ca1\u6709\u88abdfs1\u641c\u5230\u8fc7 \u6709\u6ca1\u6709\u88ab\u641c\u5230\u8fc7 \u6709\u6ca1\u6709\u88abdfs2\u641c\u5230\u8fc7\n\n\n\u4ee3\u7801\u5982\u4e0b\n\n\n\n        \n        \n\n\n\n\n\n\n                \n\n        \n        \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cctype>\n#include<cstdlib>\n    using namespace std;\n    #define in = read();\n    typedef long long ll;\n    typedef unsigned int ui;\n    const ll size = 200000 + 1000;\n        struct point{    int next , to;}edge[size];\n            void dfs1(int x);\n            void dfs2(int x);\n                int n , m , a , b;\n                int site , ans , pointsize , total;\n                int head[size];\n                bool exist[size] , judge[size] , vis[size];\ninline ll read(){\n        ll num = 0 , f = 1;    char ch = getchar();\n        while(!isdigit(ch)){\n                if(ch == '-')   f = -1;\n                ch = getchar();\n        }\n        while(isdigit(ch)){\n                num = num*10 + ch - '0';\n                ch = getchar();\n        }\n        return num*f;\n}\ninline void add(int x , int y){\n        edge[++ site].next = head[x];\n        edge[site].to = y;\n        head[x] = site;\n}\nvoid dfs2(int x){\n        if(!judge[x])    pointsize ++;\n        if(!vis[x])        ans ++;\n        vis[x] = true;    judge[x] = true;\n        for(register int i=head[x];i;i=edge[i].next)\n                if(!exist[edge[i].to])\n                        dfs1(edge[i].to);\n}\nvoid dfs1(int x){\n        if(!judge[x])    pointsize ++;\n        exist[x] = true;    judge[x] = true;\n        for(register int i=head[x];i;i=edge[i].next){\n                if(exist[edge[i].to]){\n                        printf(\"Impossible\");\n                        exit(0);\n                }\n                dfs2(edge[i].to);\n        }\n}\nint main(){\n        n in;    m in;\n        for(register int i=1;i<=m;i++){\n                a in;    b in;\n                add(a , b);        add(b , a);\n        }\n        for(register int i=1;i<=(m<<1);i++)\n                if(!judge[edge[i].to]){\n                        dfs1(edge[i].to);\n                        total += min(ans , pointsize - ans);\n                        ans = 0;    pointsize = 0;\n                }\n        printf(\"%d\" , total);\n        return 0;\n}\nCOYG\n```",
        "postTime": 1508485190,
        "uid": 27394,
        "name": "ars4me",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u4ece\u6e90\u70b9\u5f00\u59cb\u62d3\u5c55\uff0c\u5c06\u6e90\u70b9\u67d3\u8272\u4e3a1\uff0c\u4e0e\u6e90\u70b9\u76f8\u8fde\u7684\u70b9\u67d3\u8272\u4e3a2\n\n\u8fd9\u65f6\u5982\u679c\u4ece\u4e00\u4e2a\u88ab\u67d3\u8272\u4e3a1\u7684\u70b9\u62d3\u5c55\uff0c\u53d1\u73b0\u4e00\u4e2a\u989c\u8272\u4e5f\u4e3a1\u7684\u70b9\uff0c\u8bf4\u660e\u65e0\u89e3\n\n\u7d2f\u8ba1\u67d3\u8272\u4e3a1\u7684\u70b9\u548c\u67d3\u8272\u4e3a2\u7684\u70b9\u7684\u6570\u91cf\uff0c\u9009\u62e9\u5c0f\u7684\u7d2f\u52a0\u5230ans\u91cc\n\n\u6ce8\u610f\uff0c\u56fe\u4e0d\u662f\u5168\u8fde\u901a\u7684\u3002\u6bcf\u4e2a\u8fde\u901a\u56fe\u5206\u5f00\u67d3\u8272\uff0c\u5206\u5f00\u7d2f\u52a0\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N=100001;\nstruct node{\n    int v,nxt;\n}e[N];\nint n,m,num,ans;\nbool flag;\nint head[N],cn[3],col[N];\ninline int qread()\n{\n    int x=0,j=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9'){if(ch=='-')j=-1;ch=getchar();}\n    while(ch>='0' && ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*j;\n}\nvoid Insert(int u,int v)\n{\n    e[++num].v=v;\n    e[num].nxt=head[u];\n    head[u]=num;\n}\nvoid dfs(int now)\n{\n    if(flag)return;\n    for(int i=head[now];i;i=e[i].nxt)\n    {\n        int v=e[i].v;\n        if(col[v]==col[now])\n        {\n            flag=1;\n            return;\n        }\n        if(!col[v])\n        {\n            col[v]=3-col[now];\n            cn[col[v]]++;\n            dfs(v);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {\n        int u=qread(),v=qread();\n        Insert(u,v);\n        Insert(v,u);\n    }\n    for(int i=1;i<=n;i++)\n        if(!col[i])\n        {\n            col[i]=1;\n            cn[1]=1;cn[2]=0;\n            dfs(i);\n            if(flag)\n            {\n                printf(\"Impossible\\n\");\n                return 0;\n            }\n            else ans+=min(cn[1],cn[2]);\n        }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1507900353,
        "uid": 40059,
        "name": "Trick_t",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u849f\u84bb\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\uff0c\u5982\u6709\u4e0d\u597d\u8bf7\u89c1\u8c05\u3002\n\n\u672c\u4eba\u91c7\u7528bfs\u52a0\u67d3\u8272\uff0c\u6bcf\u641c\u7d22\u4e00\u4e2a\u8282\u70b9\u5224\u65ad\u662f\u5426\u53d1\u751f\u51b2\u7a81\u3002\n\n\u7531\u4e8e\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u6240\u4ee5\u5e94\u641c\u7d22\u6bcf\u4e2a\u8282\u70b9\u3002\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <list>\n#include <queue>\n#include <cmath>\n#define MAXL 1000001\nusing namespace std;\nlist<int> edges[MAXL];\nint n,m,color[MAXL],clr[2],ans;//color\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u989c\u8272\uff0cclr\u4e3a\u6bcf\u79cd\u989c\u8272\u7684\u4e2a\u6570 \nbool vis[MAXL];\nbool flag=1;//\u662f\u5426\u80fd\u5c01\u9501\u9053\u8def \nvoid addedge(int u,int v){\n    edges[u].push_back(v);\n    edges[v].push_back(u);\n}\nvoid bfs(int x){\n    clr[0]=0;clr[1]=0;//\u521d\u59cb\u5316\u6bcf\u4e2a\u8054\u901a\u5757\u7684\u989c\u8272\u4e2a\u6570 \n    color[x]=0;//\u5c06\u7b2c\u4e00\u4e2a\u70b9\u67d3\u8272 \n    clr[color[x]]++;\n    queue<int> q;\n    q.push(x);\n    vis[x]=1;\n    while (!q.empty()){\n        int a=q.front();\n        q.pop();\n        for (list<int>::iterator it=edges[a].begin();it!=edges[a].end();it++){\n            if (vis[*it]&&color[*it]==color[a]){\n                flag=0;\n                return;\n```\n}//\u5224\u65ad\u662f\u5426\u53d1\u751f\u51b2\u7a81\n\n```cpp\n            if (!vis[*it]){\n                color[*it]=1-color[a];\n                clr[color[*it]]++;\n                vis[*it]=1;\n                q.push(*it);\n            }\n        }\n    }\n    ans+=min(clr[0],clr[1]);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;i++){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        addedge(u,v);\n    }\n    for (int i=1;i<=n;i++){\n        if (!vis[i]){\n            bfs(i); \n        }\n        if (!flag){\n            printf(\"%s\",\"Impossible\");\n            return 0;\n        }\n    }\n    printf(\"%d\",ans);\n}\n```",
        "postTime": 1504145282,
        "uid": 28229,
        "name": "\u9f99\u5c11\u21161",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u849f\u84bb\u4e5f\u80fd\u5199\u51fa\u6765\u7684AC\u4ee3\u7801\uff01\u601d\u8def\u662f\u641c\u7d22+\u67d3\u8272\u3002\n\n\n\u9996\u5148\u9700\u8981\u8ba4\u8bc6\u5230\u56fe\u4e0d\u4e00\u5b9a\u662f\u8fde\u901a\u56fe\u3002\u56e0\u6b64\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u5ffd\u89c6\u5b64\u7acb\u7684\u70b9\u3002\u4ece1\u5f00\u59cb\u679a\u4e3e\u70b9\u5230n\uff0c\u8981\u662f\u6ca1\u6709\u88ab\u7814\u7a76\u8fc7\u5e76\u4e14\u4e0d\u662f\u5b64\u7acb\u7684\u70b9\u7684\u8bdd\u5c31\u5bf9\u5b83\u8fdb\u884c\u67d3\u8272\u3002\u6bcf\u4e2a\u8fde\u901a\u5757\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u7d2f\u52a0min{\u8272\u57571\u7684\u4e2a\u6570\uff0c\u8272\u57572\u7684\u4e2a\u6570}\u5373\u53ef\u3002\n\n\n\u4e00\u4e9b\u7ec6\u8282\u8bf7\u770b\u4ee3\u7801\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\nusing namespace std;\nint n, m, uu, vv, ans1, ans2, ans, shux[10005]={0};\nvector<int>    edge[10005];//vector\u597d\u7528 \nbool u[10005];\nvoid hx(int nl, int sx){//\u5f53\u524d\u5904\u5728nl\u70b9\uff0c\u60f3\u67d3\u4e0asx\u7684\u989c\u8272 \n    if(shux[nl] && shux[nl]!=sx){//\u67d3\u7cca\u4e86 \n        cout<<\"Impossible\";\n        exit(0);\n    }\n    if(shux[nl])    return ;//\u5e7d\u96c5\u5730\u8fd4\u56de\u5427\uff0c\u67d3\u8fc7\u8272\u7684\u70b9 \n    u[nl] = true;\n    shux[nl] = sx;\n    if(sx==1)    ans1++;\n    else             ans2++;\n    for(int i=0; i<edge[nl].size(); i++)\n        hx(edge[nl][i], sx==1?2:1);//\u76f8\u90bb\u70b9\u67d3\u8272\u4e0d\u540c \n}\nint main(){\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        scanf(\"%d %d\", &uu, &vv);\n        edge[uu].push_back(vv);\n        edge[vv].push_back(uu);\n    }\n    for(int i=1; i<=n; i++)\n        if(!u[i] && edge[i].size()){\n            ans1 = ans2 = 0;//\u7d2f\u52a0\u6bcf\u79cd\u8272\u5757\u4e2a\u6570\u7684\u53d8\u91cf\u8bb0\u5f97\u6e05\u96f6 \n            hx(i, 1); \n            ans += min(ans1, ans2);\n        }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1503321013,
        "uid": 44733,
        "name": "poorpool",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "DFS\u67d3\u8272\u90fd\u6709\u5f88\u591a\u4eba\u89e3\u4e86\uff0c\u697c\u4e0b\u7684\u5e76\u67e5\u96c6\u9898\u89e3\u5199\u5f97\u6709\u70b9\u4e0d\u8be6\u7ec6\u3002\u6211\u6765\u8865\u4e00\u4e2a\u8be6\u7ec6\u7684\u5e76\u67e5\u96c6\u3002\n\n\n\u8fd9\u9898\u7684\u5e76\u67e5\u96c6\u5177\u4f53\u6765\u8bf4\u5e94\u8be5\u662f\u79cd\u7c7b\u5e76\u67e5\u96c6\uff0c\u901a\u8fc7\u5411\u91cf\u504f\u79fb\uff0c\u4ece\u4e24\u4e24\u5173\u7cfb\u786e\u5b9a\u7b2c\u4e09\u6761\u8fb9\u7684\u5173\u7cfb\u5341\u5206\u6b63\u786e\uff08\u4ea7\u751f\u51b2\u7a81\uff09\u3002\u7c7b\u4f3c\u7684\u9898\u8fd8\u6709P2024\u98df\u7269\u94fe\uff0c\u8fd8\u6709\u7ecf\u5178\u7684\u76d1\u72f1\u95ee\u9898\u3002\n\n\u6211\u4eec\u901a\u8fc7\u6bcf\u6b21\u8f93\u5165\u4e00\u6761\u8fb9\uff0c\u628a\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\u5173\u7cfb\u786e\u5b9a\u4e3a\u654c\u5bf9\uff0c\u75281\u8868\u793a\uff0c\u5982\u679c\u4e2d\u9014\u8f93\u5165\u4e00\u6761\u8fb9\u4e0e\u4ee5\u524d\u7684\u5173\u7cfb\u4ea7\u751f\u51b2\u7a81\u4e86\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa\u201cImpossible\u201d\uff0c\u5982\u679c\u8f93\u5b8c\u4e86\u8fd8\u4e0d\u51b2\u7a81\u8bc1\u660e\u6709\u53ef\u884c\u89e3\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u9898\u4e0d\u6b62\u4e00\u4e2a\u8054\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u5e76\u67e5\u96c6\u5b8c\u6210\u540e\u8981\u786e\u5b9a\u6709\u591a\u5c11\u4e2a\u7956\u5148\uff0c\u540c\u65f6\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u786e\u5b9a\u513f\u5b50\u548c\u7956\u5148\u7684\u5173\u7cfb\u3002\u6709\u654c\u5bf9\u548c\u53cb\u597d\u3002\u6700\u540e\u5bf9\u4e8e\u7956\u5148\u8bb0\u5f55\u4e00\u4e0b\u6709\u591a\u5c11\u4e2a\u654c\u5bf9P\u548c\u53cb\u597dQ\uff0c\u6bcf\u4e2a\u7956\u5148\u6700\u5c0f\u7684\u5173\u7cfb\u6570\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u56e0\u4e3a\u654c\u5bf9\u548c\u53cb\u597d\u53ef\u4ee5\u4ea4\u6362\uff0c\u4e0d\u4f1a\u9020\u6210\u51b2\u7a81\uff09\n\n\n\u00b7\u00b7\u00b7cpp\n\n    \n        \n```cpp\n#include<iostream>\n#include<stdio.h>\nusing namespace std;\nint n,m,ans=0;\nint fa[10001]={0},r[10001]={0},p[10001]={0},q[10001]={0};\nint ff(int x)\n{\n    if(fa[x]==x) return x;\n    else \n    {\n        int temp=ff(fa[x]);\n        r[x]=(r[fa[x]]+r[x])%2;\n        fa[x]=temp;\n        return fa[x];\n    }\n}\nbool uni(int x,int y)\n{\n    int a=ff(x);\n    int b=ff(y);\n    if(a==b)\n    {\n        if(r[x]==r[y]) return true;//occ\n        else return false; \n    }\n    fa[a]=b;\n    r[a]=(((1+r[y])%2)+r[x])%2;\n    return false;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    {\n        fa[i]=i;\n        p[i]=0;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int a,b;\n        cin>>a>>b;\n        if(uni(a,b))\n        {\n            cout<<\"Impossible\";\n            return 0;\n        }      \n    }\n    for(int i=1;i<=n;i++)\n    {\n        ff(i);\n        if(r[i]==1) p[fa[i]]++;\n        else q[fa[i]]++;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        if(fa[i]==i) ans+=min(p[i],q[i]);\n    }\n    cout<<ans;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1496236777,
        "uid": 7882,
        "name": "zhegexiankabutaileng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u4e00\u9053\u67d3\u8272\u95ee\u9898\u3002\n\n\u5728\u5224\u65ad\u4e2d\uff0c\u9996\u5148\u9009\u51fa\u4e00\u4e2a\u6ca1\u6709\u88ab\u7528\u8fc7\u7684\u70b9\uff08\u5373 !vis[i]\uff09\uff0c\u7136\u540e\u5bf9\u5176\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u8fdb\u884c\u67d3\u8272\u3002\n\n\u5728\u67d3\u8272\u4e2d\uff0c\u6ca1\u627e\u5230\u4e00\u4e2a\u70b9t\uff0c\u5c31\u8ba9vis[t]=index(index\u4fdd\u5b58\u7684\u662f\u7b2c\u51e0\u5c42);\u800c\u4e14\u67d3\u8272\u65f6\u53ea\u7528\u67d3\u4e00\u904d\uff0c\u53e6\u4e00\u79cd\u60c5\u51b5\u76f4\u63a5\u7528all-\u5f53\u524d\u7684\u503c\u3002\n\n\u6709\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u6bcf\u6b21\u5f00\u59cb\u65f6\u5148\u628a\u6839\u8282\u70b9\u653e\u8fdb\u961f\u5217\u4e2d\uff0c\u7b2c\u4e00\u5c42\u5faa\u73af\u5faa\u73af\u5c42\u6570\uff0c\u4ee4k=q.size(),\u7b2c\u4e8c\u5c42\u5faa\u73af\u4ece0\u5230k\u6bcf\u6b21pop()\u4e00\u4e2a\uff0c\u5728\u7b2c\u4e8c\u5c42\u5faa\u73af\u5b8c\u6210\u4e4b\u524d\uff0c\u6240\u6709pop()\u51fa\u7684\u70b9\u90fd\u662f\u5c5e\u4e8e\u540c\u4e00\u5c42\u3002\n\nc++\u4ee3\u7801\uff1a\n\n\n\n    \n    \n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define maxn 10010\nusing namespace std;\nint n,m;\nvector<int> edges[maxn];\nint vis[maxn];\nint f(int u){\n    queue<int> q;\n    q.push(u);\n    int index=1;\n    vis[u]=index;\n    int re1=0;\n    int all=0;\n    bool can=true;\n    while(!q.empty()){\n        index++;\n        int k=q.size();\n        for(int i=0;i<k;i++) {\n            int x=q.front();q.pop();\n            for(int i=0;i<edges[x].size();i++){\n                if(!vis[ edges[x][i] ]) {\n                    vis[ edges[x][i] ]=index;\n                    q.push(edges[x][i]);\n                }else {\n                    if(vis[edges[x][i]]!=vis[x]) continue;//fu jie dian\n                    can=false;\n                    break;\n                }\n            }\n        }\n        if(!can) break;\n        if(index%2) re1+=k;\n        all+=k;\n    }\n    if(!can) return -1;\n    return min(all-re1,re1);\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    int a,b;\n    for(int i=0;i<m;i++) {\n        scanf(\"%d%d\",&a,&b);\n        edges[a].push_back(b);\n        edges[b].push_back(a);\n    }\n    memset(vis,0,sizeof(vis));\n    int re=0;\n    for(int i=1;i<=n;i++){\n        if(!vis[i]) {\n            int u=f(i);\n            if(u==-1) {\n                printf(\"Impossible\");\n                return 0;\n            }\n            re+=u;\n        }\n    }\n    printf(\"%d\",re);\n    return 0;\n}\n\n```",
        "postTime": 1479219814,
        "uid": 25029,
        "name": "\u8ffd\u5fc6\u3002\u4f3c\u6d77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "bfs\u67d3\u8272\uff0c\u6ce8\u610f\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u56fe\uff1b\uff1b\n\n\u4e00\u4e2a\u70b9\u53ea\u6709\u653e\u548c\u4e0d\u653e\u4e24\u4e2a\u72b6\u6001\uff1b\n\n\u6240\u4ee5\u540c\u4e00\u56fe\u7684\u5176\u4ed6\u70b9\u53ef\u636e\u6b64\u63a8\u51fa\uff0c\u4e24\u79cd\u90fd\u4e0d\u7b26\u5408\u5c31\u76f4\u63a5\u8df3\u51fa\uff1b\n\n\n\n\u849f\u84bb\u7684\u4ee3\u7801\uff0c\u975e\u5e38\u6076\u5fc3\u4eba\uff1a\n\n\n\n\n    \n\n\n        \n    \n    \n    \n    \n    \n              \n              \n    \n          \n        \n            \n            \n              \n              \n              \n          \n          \n            \n    \n              \n              \n    \n          \n    \n            \n              \n              \n              \n          \n          \n            \n    \n    \n    \n    \n   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n```cpp\n#include<iostream>\n#include<queue>\nusing namespace std;\nint xia[10005],dui[10005],hou[200010],i,n,m,j,tot,min1,x,daan;\nbool meiyou,chuxian[10005],you[10005],meiyou2;\nqueue<int>q;\nstruct uu{\n    int qi;\n    int zhong;\n}bian[200010];\nint main()\n{\n    cin>>n>>m;\n    for(i=1;i<=n;i++)xia[i]=-1;\n    for(i=1;i<=m;i++)\n    {\n        cin>>bian[i].qi>>bian[i].zhong;\n        hou[i]=xia[bian[i].qi];\n        xia[bian[i].qi]=i;\n        bian[i+n].qi=bian[i].zhong;\n        bian[i+n].zhong=bian[i].qi;\n        hou[i+n]=xia[bian[i].zhong];\n        xia[bian[i].zhong]=i+n;\n    }\n    for(j=1;j<=n;j++)\n{     \n    if(you[j]==1)continue;min1=999999999;\n        while(!q.empty())q.pop();\n        tot=0;\n    meiyou=0;\n    you[j]=1;\n    q.push(j);\n    dui[j]=1;\n    chuxian[j]=1;\n    tot++;\n    while(!q.empty())\n    {\n        x=q.front();\n        q.pop();\n        i=xia[x];\n        if(dui[x]==1)\n          {\n                  while(i!=-1)\n        {\n          if(dui[bian[i].zhong]==1){ meiyou=1;break;      }\n          if(chuxian[bian[i].zhong]==0)\n          {chuxian[bian[i].zhong]=1;\n          you[bian[i].zhong]=1;\n            q.push(bian[i].zhong);\n            dui[bian[i].zhong]=2;\n          }    \n           i=hou[i];\n        }\n          }\n  if(dui[x]==2)\n          {\n                  while(i!=-1)\n        {\n               if(dui[bian[i].zhong]==2){ meiyou=1;break;      }\n               if(chuxian[bian[i].zhong]==0)\n               {chuxian[bian[i].zhong]=1;you[bian[i].zhong]=1;\n                q.push(bian[i].zhong);\n            dui[bian[i].zhong]=1;\n            tot++;\n             }\n          i=hou[i];    \n        }\n          }\n          if(meiyou==1)break;\n    }\n    if(meiyou==0)min1=tot;\n    meiyou2=0;\n    for(i=1;i<=n;i++){chuxian[i]=0;dui[i]=0;}\n    while(!q.empty())q.pop();\n    chuxian[j]=1;\n    tot=0;\n    q.push(j);\n    dui[j]=2;\n    while(!q.empty())\n    {\n        x=q.front();\n        q.pop();\n        i=xia[x];\n        if(dui[x]==1)\n          {\n                  while(i!=-1)\n        {\n          if(dui[bian[i].zhong]==1){ meiyou2=1;break;      }\n         if(chuxian[bian[i].zhong]==0)\n          {    q.push(bian[i].zhong);you[bian[i].zhong]=1;\n          chuxian[bian[i].zhong]=1;\n            dui[bian[i].zhong]=2;}\n          i=hou[i];    \n        }\n          }\n  if(dui[x]==2)\n          {\n                  while(i!=-1)\n        {\n               if(dui[bian[i].zhong]==2){ meiyou2=1;break;      }\n             if(chuxian[bian[i].zhong]==0)\n          {chuxian[bian[i].zhong]=1;  you[bian[i].zhong]=1;  \n          q.push(bian[i].zhong);\n            dui[bian[i].zhong]=1;\n            tot++;\n        }\n          i=hou[i];    \n        }\n          }\n          if(meiyou2==1)break;\n    }\n    if(meiyou2==0)min1=min(tot,min1);\n    if(meiyou==1&&meiyou2==1){    cout<<\"Impossible\";return 0;}\n    else daan+=min1;\n}\n    cout<<daan;\n}\n\n```",
        "postTime": 1478568988,
        "uid": 20220,
        "name": "_HLLY_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u697c\u4e0b\u5404\u8def\u5927\u795e\u7684\u89e3\u6cd5\u771f\u662f666\u7684\uff0cBFS+\u67d3\u8272\u4ec0\u4e48\u7684\u6211\u770b\u4e0d\u61c2\u3002\u9996\u5148\u56e0\u4e3a\u6bcf\u4e00\u6761\u8fb9\u90fd\u8981\u88ab\u67d3\u8272\uff0c\u6240\u4ee5\u5982\u679c\u628a\u56fe\u753b\u51fa\u6765\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u53ef\u4ee5\u53d1\u73b0\uff1a\u5982\u679c\u67d3\u4e86\u4e00\u4e2a\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u90a3\u4e48\u6240\u6709\u4e3a\u5947\u6570\u7684\u70b9\u90fd\u67d3\u5b8c\u624d\u4e0d\u4f1a\u8d77\u51b2\u7a81\u53c8\u5c01\u9501\u4e86\u9633\u5149\u5927\u5b66\uff1b\u5076\u6570\u540c\u7406\u3002\u6240\u4ee5\u53ef\u4ee5BFS\u6216\u8005DFS\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u540e\u518dBFS\u6216DFS\u540e\u6bd4\u8f83\u6df1\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u6570\u548c\u6df1\u5ea6\u4e3a\u5076\u6570\u7684\u70b9\u6570\u7684\u5927\u5c0f\u5373\u53ef\u3002\uff08\u5982\u679cIMPOSSIBLE\u7684\u8bdd\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u6df1\u5ea6%2\u76f8\u540c\u7684\u70b9\u6709\u8fde\u63a5\uff0c\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>V[10005];\nvector<int>e;\nbool vis[10005];\nint depth[10005],n,m;\nbool ok=true;\nint ans1,ans2,ans=0;\nvoid dfs(int v)\n{\n    vis[v]=1;\n    for(int i=V[v].size()-1;i>=0;i--)\n    {  int k=V[v][i];\n        if(!vis[k])\n        {\n            depth[k]=min(depth[v]+1,depth[k]);\n            dfs(k);\n        }\n    }\n}\nvoid dfs2(int v)\n{    \n    if(!ok) return;\n    if(depth[v]%2)ans1++;\n    else ans2++;\n    for(int i=V[v].size()-1;i>=0;i--)\n    {  int k=V[v][i];\n        if(depth[v]%2==depth[k]%2) \n        {ok=false;return;}\n        else\n        if(depth[k]>depth[v])\n        {\n            dfs2(k);\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    { int a,b;\n        scanf(\"%d%d\",&a,&b);\n        V[a].push_back(b);\n        V[b].push_back(a);\n    }\n    memset(depth,127/3,sizeof(depth));\n    depth[1]=0;\n    for(int i=1;i<=n;i++)\n    {  if(!vis[i])\n      {depth[i]=0;dfs(i);e.push_back(i);}\n    }\n    int ans=0;\n    for(int i=e.size()-1;i>=0;i--)\n    {   int v=e[i];\n       ok=true;ans1=0,ans2=0;\n        dfs2(v);\n        if(!ok){\n            printf(\"Impossible\\n\");\n            return 0;\n        }\n        ans=ans+min(ans1,ans2);\n    }\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1476402769,
        "uid": 14410,
        "name": "Ghost_lzy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u663e\u7136\u7684\u9ed1\u767d\u67d3\u8272\u95ee\u9898\uff01\n\n\u5229\u7528bfs\u5206\u5c42\u641c\u7d22\u7684\u6027\u8d28\uff0c\u5206\u5c42\uff01\n\n\u6ce8\u610f\u53ef\u80fd\u5b58\u5728\u7684\u597d\u51e0\u4e2a\u8054\u901a\u5757\u7684\u60c5\u51b5\uff01\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u641c\u7d22\u5230\u4e00\u4e2a\u4e0e\u81ea\u5df1\u540c\u8272\u7684\u70b9\uff0c\u8bc1\u660e\u4e0d\u5b58\u5728\u5408\u6cd5\u65b9\u6848\uff01\n\n\u5404\u4e2a\u8054\u901a\u5757\u5206\u5f00\u7d2f\u52a0\u7b54\u6848\uff01\n\n\u7b54\u6848\u662f\u5f53\u524d\u8054\u901a\u5757\u5185\u90e8\u7684\u9ed1\u8272\u4e0e\u767d\u8272\u7684\u6700\u5c0f\u503c\uff01\n\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cstdlib>\n#include<cstdio>\n#include<cmath>\n#include<queue>\n#define INF 10000007\n#define LL long long \nusing namespace std;\nint next[1000010],head[1000010],list[1000010],q[1000010],sum[5],step[1000010],a[1000010],vis[1000010];\nint cnt,n,m,flag,ans;\nvoid insert(int x,int y){\n    next[++cnt]=head[x];\n    list[cnt]=y;\n    head[x]=cnt;\n}\nvoid solve(int begin){\n    for(int i=1;i<=n;i++)q[i]=0,step[i]=0;\n    int l=0,r=1;\n    sum[1]=0;sum[2]=0;\n    step[1]=1;\n    q[1]=begin;step[1]=1;a[begin]=1;vis[begin]=1;\n    while(l<r){\n        int now=q[++l];\n        for(int i=head[now];i;i=next[i]){\n            int k=list[i];\n            if(a[k]==a[now]){\n                flag=0;\n                return;\n            }\n            if(!vis[k]){\n                vis[k]=1;\n                q[++r]=k;\n                step[r]=step[l]+1;\n                if(step[r]%2==1)a[k]=1;\n                    else if(step[r]%2==0)a[k]=2;\n            }\n        }\n    }\n    for(int i=1;i<=r;i++)sum[a[q[i]]]++;\n    ans+=min(sum[1],sum[2]);\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        int x,y;\n        cin>>x>>y;\n        insert(x,y);insert(y,x);\n    }\n    for(int i=1;i<=n;i++)if(!vis[i]){\n        flag=1;\n        solve(i);\n        if(!flag){\n            cout<<\"Impossible\"<<endl;\n            return 0;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```",
        "postTime": 1474806384,
        "uid": 2022,
        "name": "syx2000121910",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u4e00\u9053\u7b80\u5355\u7684\u67d3\u8272\u52a0\u4e0adfs\u5224\u7684\u95ee\u9898\uff0c\u6ce8\u610f\u8be5\u95ee\u9898\u4e5f\u662f\u53cc\u5411\u5efa\u8fb9\n\n/\\*\nID:Agreement\n\nLANG:C++\n\n\\*/\n    \n    \n```cpp\n// Invincible\n#include <bits/stdc++.h>\n#define erep( i , u ) for( int i = head[u] ; ~i ; i = e[i].nxt )\n#define rep( i , l , r ) for( int i = (l) ; i <= (r) ; i++ )\n#define per( i , r , l ) for( int i = (r) ; i >= (l) ; i-- )\nusing namespace std;\ninline int _read(){\n    register int x = 0;\n    register char ch = getchar();\n    while( ch > '9' || ch < '0' ) ch = getchar();\n    while( ch >= '0' && ch <= '9' ){\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x;\n}\nconst int maxn = 10000 + 5 , maxe = 100000 + 5;\nstruct edge{\n    int v , nxt;\n} e[maxe];\nint head[maxn] , _t = 0;\ninline void addedge( int u , int v ){\n    e[++_t].v = v , e[_t].nxt = head[u] , head[u] = _t;\n}\nint clr[maxn] , c[2];\nint q[maxe];\ninline bool bfs( int x ){\n    int f = 0 , r = 0;\n    c[0] = c[1] = 0; \n    c[clr[x] = 0]++; \n    q[r++] = x;\n    while( f < r ){\n        int u = q[f++];\n        erep( i , u ){\n            int v = e[i].v;\n            if( -1 == clr[v] ){\n                c[ clr[v] = clr[u] ^ 1 ]++;\n                q[r++] = v;\n            }else if( clr[v] == clr[u] ) { return false; }\n        }\n    }\n    return true;\n} \nint main(){\n    int N , M;\n    memset( head , 0xff , sizeof head );\n    memset( clr , 0xff , sizeof clr );\n    scanf( \"%d %d\" , &N , &M );\n    int u , v;\n    rep( i , 1 , M ){\n        u = _read() , v = _read();\n        addedge( u , v ); addedge( v , u ); \n    }  \n    int ans = 0;\n    bool f = 1;\n    rep( i , 1 , N )\n        if( -1 == clr[i] ){\n            if( 0 == bfs(i) ) { f = 0 ; break; }\n            ans += min( c[0] , c[1] );\n        }\n    if( 0 == f ) puts(\"Impossible\");\n    else\n        cout << ans << endl;\n    return 0;\n}\n```",
        "postTime": 1473088829,
        "uid": 22733,
        "name": "eternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u9996\u5148\u3002\u3002\u3002\u9898\u76ee\u6570\u636e\u8fd8\u662f\u6bd4\u8f83\u6c34\u7684\uff0c\u6211\u53ea\u7528\u4e86DFS\u90fd\u8fc7\u4e86\u3002\n\na[i][0]\u662f\u8bb0\u5f55\u5173\u4e8e\u70b9i\u7684\u8fb9\u6570\uff0ca[i][j]\u662f\u5173\u4e8ei\u70b9\u7684\u7b2cj\u6761\u8fb9\u8fde\u5411\u54ea\u4e2a\u70b9\u3002\n\n\u7136\u540e\u5f00\u59cbDFS\uff0c\u4ece\u6e90\u70b9\u5f00\u59cb\u62d3\u5c55\uff0c\u5c06\u6e90\u70b9\u67d3\u8272\u4e3a1\uff0c\u4e0e\u6e90\u70b9\u76f8\u8fde\u7684\u70b9\uff08\u4e0b\u9762\u79f0\u4e3a\u4e8c\u5c42\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff09\u67d3\u8272\u4e3a2\uff0c\u628a\u4e0e\u4e8c\u5c42\u70b9\u76f8\u8fde\u7684\u67d3\u8272\u4e3a1\uff0c\u4e0e\u4e09\u5c42\u70b9\u76f8\u8fde\u7684\u70b9\u67d3\u8272\u4e3a2,\u5c31\u662f\u4e0d\u65ad\u7684121212\u2026\u2026\u5f53\u7136\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c\u4f60\u53d1\u73b0\uff0c\u4ece\u4e00\u4e2a\u88ab\u67d3\u8272\u4e3a1\u7684\u70b9\u62d3\u5c55\uff0c\u53d1\u73b0\u4e00\u4e2a\u989c\u8272\u4e5f\u4e3a1\u7684\u70b9\uff0c\u8fd9\u5c31\u65e0\u6cd5\u67d3\u8272\uff0c\u4e5f\u5c31\u662f\u9898\u76ee\u4e2d\u7684Impossible\u3002\u5f00\u53d8\u91cf\u7d2f\u8ba1\u56fe\u4e2d\u4f60\u67d3\u8272\u4e3a1\u7684\u70b9\u548c\u67d3\u8272\u4e3a2\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u9009\u62e9\u5c0f\u7684\u7d2f\u52a0\u5230ans\u91cc\u9762\u3002\n\n\uff01\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u56fe\u4e0d\u662f\u5168\u8fde\u901a\u7684\u3002\u6bcf\u4e2a\u8fde\u901a\u56fe\u5206\u5f00\u67d3\u8272\uff0c\u5206\u5f00\u7d2f\u52a0\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u5730\u8f93\u51fa\u6240\u6709\u8fde\u901a\u56fe\u4e2d\u7684\u82721\u548c\u82722\u7684\u8f83\u5c0f\u503c(\u6211\u5c31\u5728\u8fd9\u91cc\u6302\u4e86)\u3002\n\n\n\n\n    \n    \n    \n    \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int maxn=10005;\nint n,m,nn,mm,f[maxn],a[maxn][300];\nvoid dfs(int h)\n{\n    for (int j=1;j<=a[h][0];j++)\n    {\n       ### if (f[a[h][j]]==f[h]) {cout<<\"Impossible\"<<endl;exit(0);} \n        if (!f[a[h][j]]){\n        f[a[h][j]]=3-f[h];\n        if (f[a[h][j]]==1) nn++; else mm++;\n        dfs(a[h][j]);}\n    }   \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int x,y,ans=0;\n    for (int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        a[x][++a[x][0]]=y;\n        a[y][++a[y][0]]=x;       \n    }\n    for (int i=1;i<=n;i++)\n    if (!f[i])\n    {\n        f[i]=1;\n        nn=1;mm=0;\n        dfs(i);\n       ###nn=min(nn,mm);\n###ans+=nn;\n    }\n    printf(\"%d\\n\",ans);\n    //system(\"pause\");\n    return 0;\n}\n```",
        "postTime": 1470067593,
        "uid": 20794,
        "name": "Glis",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u6211\u662f\u7528bfs\u6539\u5199\u7684dfs\u5e94\u4e3a\u6bcf\u6b21\u4e0e\u4e0a\u5c42\u6bd4\u8f83 \u7528bfs\u7684\u8bdd\u5c31\u53ef\u597d\u4e00\u70b9\n\n\u5c31\u662f\u5bf9\u6bcf\u4e00\u5c42\u67d3\u8272 \u6bd4\u8f83\u4ed6\u548c\u4ed6\u7684\u7236\u4eb2\u8282\u70b9 \u989c\u8272\u5fc5\u987b\u4e0d\u4e00\u6837 \u8bb0\u5f55\u4e0b\u6765\u5176\u4e2d\u4e00\u79cd\u7684\u989c\u8272\u603b\u6570 \u603b\u7684\u70b9\u6570\u51cf\u4ed6\u5c31\u662f\u53e6\u4e00\u79cd\u989c\u8272\u6570  \u7136\u540e\u52a0\u4e0a\u5176\u4e2d\u8f83\u5c0f\u7684\u5c31\u53ef\u4ee5\u4e86\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<vector>\n#include<cmath>\n#include<queue>\n#include<iostream>\n#define maxn 10060\n#define MK(a,b)  make_pair(a,b)\nusing namespace std;\nint n,m,h[maxn],vis[maxn],used[maxn],cnt,ccnt;\ntypedef pair<int ,int>pii;\nvector<int >son[maxn];\nqueue<pii >q;\nvoid bfs(){\nwhile(!q.empty()){\nccnt++;\nint u=q.front().first;\nint fa=q.front().second;\nq.pop();\nh[u]=h[fa]+1;\nused[u]=1;\nif(!vis[fa])vis[u]=1,cnt++;\nfor(int i=0;i<son[u].size();i++){\nint y=son[u][i];\nif(y==fa)continue;\nif(used[y]){\nif(h[y]==h[u]||abs(h[u]-h[y])&1){\nputs(\"Impossible\");\nexit(0);\n}\n}\nelse{\nq.push(MK(y,u));\n}\n}\n}\n}\nint main(){\nscanf(\"%d%d\",&n,&m);\nfor(int i=1;i<=m;i++){\nint a,b;\nscanf(\"%d%d\",&a,&b);\nif(a==b)continue;\nson[a].push_back(b);\nson[b].push_back(a);\n}\nvis[1]=1;\nint ans=0;\nfor(int i=1;i<=n;i++){\nccnt=cnt=0;\nif(!used[i]){\nq.push(MK(i,0));\n       bfs();\n}\nans+=min(cnt,ccnt-cnt);\n}\nprintf(\"%d\",ans);\nreturn 0;\n}\n```",
        "postTime": 1465266039,
        "uid": 18431,
        "name": "intruder",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u89c1\u5230\u697c\u4e0b\u6709\u7528C++\u7684\u9009\u624b\u5199\u7684\u6df1\u641cdfs\u548c\u7528\u90bb\u63a5\u8868\u7684\u5927\u795e\uff0c\u5728\u8fd9\u91cc\u8865\u4e00\u4e2a\u7528\u7c7b\u90bb\u63a5\u8868\u5e7f\u641cbfs\uff1b\u4f46\u662f\u5982\u679c\u4e0d\u7528C++\u7684STL\u7684vector\u5bb9\u5668\u4f18\u5316\u7684\u8bdd\uff0c\u5c31\u53ea\u670970\u5206\u7684\u6837\u5b50\uff1b\u53e6\u4e00\u65b9\u9762\uff0c\u8865\u5145\u4e00\u70b9\u5bf9\u4e8e\u6bcf\u4e2a\u56fe\u90fd\u8981\u8ba1\u7b97\u9ed1\u767d\u70b9\u7684\u6700\u5c0f\u503c\uff08\u8868\u793a\u56e0\u6b64\u88ab\u56f0\u4e8630\u5206\uff09\n\n```cpp\n\n//Coding P1330\n#include<iostream>\n#include<algorithm>\n#include<vector>\n#define White 1    //no animal\n#define Black 2    //an animal\n#define No_Color 0    //haven't search\nusing namespace std;\nint color[10001];\nvector<int> g[10001];\nint p[10001],fp,rp,sum=0,pans,psum;\nint n,m;bool f;\nint opposite_color(int color_k)\n{\n    return color_k==White?Black:White;\n}\nint BFS(int x)\n{\n    p[fp=rp=1]=x;\n    color[x]=Black;\n    pans=0;pans++;\n    psum=0;psum++;\n    while(fp<=rp)\n    {\n        int u=p[fp++];\n        for(int i=0;i<g[u].size();i++)\n        {\n            int v=g[u][i];\n            if(color[v]==No_Color)\n            {\n                color[v]=opposite_color(color[u]);\n                if(color[v]==Black) pans++;\n                p[++rp]=v;psum++;\n            }\n            else if(color[v]!=No_Color&&color[v]==color[u])\n            {\n                f=false;\n                return 0;\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    f=true;cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int u,v;cin>>u>>v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    for(int i=1;i<=n;i++)\n        if(color[i]==No_Color)\n        {\n            BFS(i);\n            sum+=min(pans,psum-pans);\n            if(f==false) break;\n        }\n    if(f==true) cout<<sum<<endl;\n    else cout<<\"Impossible\"<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1459648890,
        "uid": 8662,
        "name": "Mys_C_K",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "**\n\u6211\u8bf4\u4e00\u53e5\uff1a\n\n\u56fe\u4e0d\u4e00\u5b9a\u8fde\u901a\n\nwoc\u6211\u90fd\u88ab\u5751\u4e86\u591a\u5c11\u6b21\u4e86\n\nnoip\u5c31\u88ab\u5751\u4e86\n\n\u7136\u540e\u5c31\u662f\u4e8c\u5206\u67d3\u8272\n\n**\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int maxn=10000+10;\nconst int maxm=100000+10;\n\nint first[maxn],next[2*maxm],u[2*maxm],v[2*maxm];\nint n,m;\n\nvoid add_edge(int u,int x)\n{\n    next[x]=first[u];\n    first[u]=x;\n}\n\nvoid init_data()\n{\n    cin>>n>>m;\n    for(int i=1;i<=n;i++) first[i]=-1;\n    for(int i=1;i<=2*m;i+=2)\n    {\n        scanf(\"%d%d\",&u[i],&v[i]);\n        u[i+1]=v[i];\n        v[i+1]=u[i];\n        add_edge(u[i],i);\n        add_edge(v[i],i+1);\n    }\n}\n\nint cnt1,cnt2,color[maxn];\nbool erfenranse(int u)\n{\n    if(color[u]==1) cnt1++;\n    else if(color[u]==2) cnt2++;\n    for(int i=first[u];i!=-1;i=next[i])\n    {\n        if(color[v[i]] == color[u]) return false;\n        if(!color[v[i]])\n        {\n            color[v[i]] =3-color[u];\n            if(!erfenranse(v[i])) return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    init_data();\n    memset(color,0,sizeof(color));\n    int ok=1,ans=0;\n    for(int i=1;i<=n;i++)\n      if(!color[i])\n      {\n        color[i]=1;cnt1=cnt2=0;\n        if(erfenranse(i)) ans+=min(cnt1,cnt2);\n        else {ok=0;break;}\n      }\n    if(ok) printf(\"%d\",ans);\n    else printf(\"Impossible\\n\");\n    return 0;\n}\n\n\n```",
        "postTime": 1451799287,
        "uid": 11280,
        "name": "QWsin",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u9898\u76ee\u8981\u6c42\u6bcf\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u88ab\u5c01\u9501\uff0c\u53ef\u4ee5\u5bf9\u56fe\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u82e5\u4e0d\u5b58\u5728\u67d3\u8272\u65b9\u6848\u5219\u65e0\u89e3\uff0c\u82e5\u5b58\u5728\u67d3\u8272\u65b9\u6848\u5219\u7b54\u6848\u4e3a\u4e24\u79cd\u989c\u8272\u4e2d\u6240\u7528\u6b21\u6570\u8f83\u5c11\u7684\u90a3\u79cd\u7684\u6b21\u6570\u3002\n\n```cpp\n\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\nvector<int> g[10003];\nbool vis[10003];\nint a[10003];\nint t[2];\n\nbool dfs(int u,int col)\n{\n    vis[u]=true;\n    a[u]=col;\n    t[col]++;\n    for (int i=0;i<g[u].size();i++)\n    {\n        int v=g[u][i];\n        if (vis[v]&&a[v]==a[u])\n            return false;\n        else if (!vis[v])\n        {\n            bool flag=dfs(v,(col+1)&1);\n            if (!flag)\n                return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    int n,m,i,j;\n    scanf(\"%d%d\",&n,&m);\n    for (i=1;i<=m;i++)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    int ans=0;\n    for (i=1;i<=n;i++)\n        if (!vis[i])\n        {\n            t[0]=t[1]=0;\n            bool flag=dfs(i,0);\n            if (!flag)\n            {\n                printf(\"Impossible\\n\");\n                return 0;\n            }\n            ans+=min(t[0],t[1]);\n        }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1436670136,
        "uid": 2031,
        "name": "xizeroplus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u66b4\u529b\u5927\u6cd5\u597d\u554a\uff01\uff01\uff01  \n\u5927\u5bb6\u90fd\u5199dfs\uff0c\u6211\u6765\u5199\u4e00\u7bc7bfs  \n\u4e8c\u5206\u56fe\u67d3\u8272\u677f\u5b50\u9898\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684  \nbfs\u7684\u6846\u67b6\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u8981\u5f00\u4e00\u4e2a\u7ed3\u6784\uff0c\u538b\u7f16\u53f7\u7684\u540c\u65f6\u538b\u5165\u989c\u8272\uff0c\u5982\u679c\u548c\u4e4b\u524d\u8bb0\u5f55\u7684\u989c\u8272\u4e0d\u540c\u76f4\u63a5\u8f93\u51faImpossible\u7136\u540e\u7ed3\u675f  \n\u5751\u70b9\uff1a\n#### \u8fd9\u4e2a\u56fe\u4e0d\u4e00\u5b9a\u8054\u901a\uff01  \n\u6bd4\u5982\u8fd9\u4e2a\u6570\u636e\uff08\u5e94\u8be5\u662fcase#3\uff09  \n\u8f93\u5165\uff1a  \n30 12  \n18 12  \n11 5  \n5 30  \n15 23  \n28 2  \n12 2  \n3 26  \n7 28  \n25 22  \n4 3  \n27 22  \n6 9  \n\n\u8f93\u51fa\uff1a  \n7  \n\u8fd9\u4e2a\u6570\u636e\u4e0d\u8fde\u901a\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5faa\u73af\u5224\u65ad\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u4e4b\u524d\u6ca1\u6709\u88ab\u641c\u5230\u5c31\u641c  \n\u7b54\u6848\u7edf\u8ba1\u4e5f\u6709\u4e00\u4e9b\u6280\u5de7\uff0c\u6bcf\u6b21\u5206\u522b\u7edf\u8ba1\u4e24\u79cd\u989c\u8272\u7684\u4e2a\u6570\uff0c\u641c\u5b8c\u4ee5\u540e\u9009\u4e00\u4e2a\u5c0f\u7684\u52a0\u5230\u603b\u7b54\u6848\u4e0a  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans=0,ans1=0,ans2=0;\nbool arr[10005],color[10005];\nvector<int> mp[10005];\nstruct qu\n{\n\tint num;\n\tbool c;\n};\nbool bfs(int st)\n{\n\tans1=0;\n\tans2=0;\n\tif(arr[st])\n\t\treturn true;\n\tqueue<qu> q;\n\tq.push(qu{st,true});\n\tcolor[st]=1;\n\twhile(!q.empty())\n\t{\n\t\tint now=q.front().num;\n\t\tbool col=q.front().c;\n\t\tq.pop();\n\t\tif(arr[now]&&col==color[now])\n\t\t\tcontinue;\n\t\telse if(arr[now])\n\t\t\treturn false;\n\t\tcolor[now]=col;\n\t\tarr[now]=true;\n\t\tif(col)\n\t\t\tans1++;\n\t\telse\n\t\t\tans2++;\n\t\tfor(int i=0;i<mp[now].size();i++)\n\t\t\tif(color[mp[now][i]]!=col||!arr[mp[now][i]])\n\t\t\t\tq.push(qu{mp[now][i],!col});\n\t}\n\treturn true;\n}\nint main()\n{\n\tmemset(arr,false,sizeof(arr));\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tmp[u].push_back(v);\n\t\tmp[v].push_back(u);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(!bfs(i))\n\t\t{\n\t\t\tcout<<\"Impossible\"<<endl;\n\t\t\treturn 0;\n\t\t}\n\t\tans+=min(ans1,ans2);\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n\u8fd9\u4e2a\u9898\u76ee\u63cf\u8ff0\u5f88\u6709\u8da3\uff0c\u8c10\u97f3\u6897\u7528\u7684\u7279\u522b\u597d\uff0c\u4ed4\u7ec6\u601d\u8003\u8d77\u6765\u5f88\u6709\u6df1\u610f",
        "postTime": 1573217380,
        "uid": 182525,
        "name": "yangyujia18",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5f88\u6c34\n\n\u5982\u679c\u9898\u76ee\u8bf4\u7684\u76f4\u63a5\u4e00\u70b9\uff0c\u90a3\u5c31\u662f\u5206\u5206\u949f\u79d2\u6389\u7684\u4e8b\uff1a\n\n# P1330 \u5c01\u9501\u9633\u5149\u5927\u5b66\n\n#### \u96be\u5ea6\uff1a$\\color{red}\\text{\u5165\u95e8}$ \n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u56fe\uff0c\u7528\u9ed1\u767d\u67d3\u8272\u6cd5\u5224\u65ad\u8fd9\u4e2a\u56fe\u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u3002\u5982\u679c\u662f\uff0c\u8f93\u51fa\u6700\u5c11\u6709\u54ea\u4e9b\u70b9\u662f\u767d\u70b9\uff08\u5047\u8bbe\u9ed1\u70b9>=\u767d\u70b9\uff09\uff0c\n\n## \u8f93\u5165\u683c\u5f0f\n\n\u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u6574\u6570N\uff0cM\n\n\u63a5\u4e0b\u6765M\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6574\u6570A\uff0cB\uff0c\u8868\u793a\u70b9A\u5230\u70b9B\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\u3002\n\n## \u8f93\u51fa\u683c\u5f0f\n\n\u4ec5\u4e00\u884c\uff1a\u5982\u679c\u8fd9\u4e2a\u56fe\u4e0d\u662f\u4e8c\u5206\u56fe\uff0c\u5219\u8f93\u51fa\u201cImpossible\u201d\uff0c\u5426\u5219\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u9700\u8981\u67d3\u591a\u5c11\u4e2a\u767d\u70b9\u3002\n\n## \u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n### \u8f93\u5165\n\n3 3\n\n1 2\n\n1 3\n\n2 3\n\n### \u8f93\u51fa \n\nImpossible\n\n### \u8f93\u5165\n3 2\n\n1 2\n\n2 3\n\n### \u8f93\u51fa\n\n1\n## \u8bf4\u660e/\u63d0\u793a\n\u3010\u6570\u636e\u89c4\u6a21\u3011\n\n1<=N<=10000\uff0c1<=M<=100000\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u6700\u591a\u6709\u4e00\u6761\u9053\u8def\u3002\n\n\u6240\u4ee5\u8bf4\u5148\u628a\u4e00\u4e2a\u70b9\u67d3\u8272\uff0c\u76f8\u90bb\u7684\u70b9\u8ddf\u5b83\u7528\u4e0d\u540c\u7684\u989c\u8272\uff0c\u5982\u679c\u76f8\u90bb\u70b9\u7684\u989c\u8272\u76f8\u540c\uff0c\u8fd9\u5c31\u4e0d\u662f\u4e8c\u5206\u56fe\u3002\n\n\u5982\u679c\u662f\u4e8c\u5206\u56fe\uff0c\u5728\u6bcf\u6b21\u67d3\u8272\u65f6\u7edf\u8ba1\u9ed1\u70b9\u548c\u767d\u70b9\u4e2a\u6570\uff0c\u6700\u540e\u4e24\u4e2a\u6bd4\u8f83\uff0c\u5c11\u7684\u90a3\u4e2a\u5c31\u662f\u767d\u70b9\u6570\u3002\n\n\u8be6\u7ec6\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nvector<int>g[50005];\nqueue<int>q;\nlong long sum,cnt1,cnt2;\nint n,m,x,y,cnt;\nbool vis[50005],col[50005];\nbool bfs(int x){\n\tvis[x]=true;\n\tcol[x]=true;\n\tq.push(x);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tif(col[u])cnt1++;\n\t\telse cnt2++;\n\t\tfor(int i=0;i<g[u].size();i++){\n\t\t\tif(!vis[g[u][i]]){\n\t\t\t\tvis[g[u][i]]=true;\n\t\t\t\tcol[g[u][i]]=!col[u];\n\t\t\t\tq.push(g[u][i]);\n\t\t\t}else if(col[u]==col[g[u][i]])return false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)vis[i]=false;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>x>>y;\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(!vis[i]){\n\t\t\tcnt1=cnt2=0;\n            if(bfs(i))sum+=min(cnt1,cnt2);\n            else{\n                cout<<\"Impossible\";\n                return 0;\n            }\n\t\t}\n\t}\n\tcout<<sum;\n\treturn 0;\n}\n```\n",
        "postTime": 1570000595,
        "uid": 242967,
        "name": "JasonZRY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\uff0c\u4e00\u4e0b\u5b50\u5c31\u60f3\u5230\u4e86~~\u5927\u6cd5\u5e08~~dfs\u3002\u7136\u800c\u8eab\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u6211\u628a\u4e00\u9053\u601d\u8def\u6e05\u6670\u7b97\u6cd5\u660e\u663e\u7684dfs\u9898\u5199\u5230\u4e86MLE...\n\n\u4e8e\u662f\u6211\u6253\u7b97\u8bb2\u4e00\u4e0b\u5982\u4f55\u628a\u50cf\u6211\u8fd9\u79cd\u849f\u84bb\u7684\u88f8dfs\u505a\u6cd5\u4eceMLE\u5f04\u5230AC\u3002\u8fd9\u5f53\u7136\u5f88\u7b80\u5355\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7ffb\u5f00lyd~~\u5927\u7237~~\u5927\u4f6c\u7684\u84dd\u4e66\uff0c\u6253\u5f000x01\u8282\u3002lyd\u5728\u84dd\u4e66\u4e00\u5f00\u59cb\u5c31\u7ed9\u6211\u4eec\u8bb2\u4e86\u4e00\u4e9b~~\u6bd2\u7624~~\u5b9e\u7528\u7684\u4e1c\u897f\u3002\u6ca1\u9519\uff0c\u53ea\u8981\u7528\u72b6\u6001\u538b\u7f29\u5c31\u53ef\u4ee5\u8f7b\u677e\u53d8AC\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u662f\u72b6\u6001\u538b\u7f29\u7684\u51e0\u6b65\u57fa\u672c\u64cd\u4f5c\uff1a\n\n- \u53d6\u51fa\u6574\u6570n\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u7b2ck\u4f4d\uff1a (n>>k)&1\n- \u5bf9\u6574\u6570n\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u7b2ck\u4f4d\u8d4b\u503c1\uff1a n|(1<<k)\n\n\u601d\u8def\uff1a\u6574\u4e2a\u56fe\u5206\u4e3a\u51e0\u4e2a\u4e92\u4e0d\u76f8\u8fde\u7684\u8fde\u901a\u5757\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u6bcf\u6761\u8fb9\uff0c\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u53ea\u6cb3\u87f9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bbe\u4e00\u6761\u8fb9\u7684\u7aef\u70b9\u5206\u522b\u4e3aA,B\uff0c\u5219\u6cb3\u87f9\u8981\u4e48\u5728A\u4e0a\uff0c\u8981\u4e48\u5728B\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5206\u522b\u8bbe\u6cb3\u87f9\u5728A\u4e0a\u6216\u5728B\u4e0a\uff0c\u7136\u540e\u8fdb\u56fe\u7684\u904d\u5386\uff0c\u82e5\u5728\u540c\u4e00\u79cd\u60c5\u51b5\u4e2d\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u6709\u6cb3\u87f9\uff0c\u5219\u4e0d\u6210\u7acb\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5bf9\u56fe\u8fdb\u884c\u67d3\u8272\uff0c\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u4e3a\u9ed1\u767d\u4e24\u8272\uff0c\u5176\u4e2d\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u4e2d\u9700\u8981\u7684\u70b9\u6570\u66f4\u5c11\u7684\u7b54\u6848\u7684\u548c\u5c31\u662f\u6700\u7ec8\u7684\u7b54\u6848\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u51e0\u4e2a\u6570\u7ec4\u5206\u522b\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684\u989c\u8272\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u7684\u4fe1\u606f\u4ee5\u53ca\u5b83\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5f53\u7136\u662f\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0cedge[x][y]\u5b58\u50a8\u4ecex\u5230y\u662f\u5426\u6709\u8fb9\uff0c\u7136\u800c\u8fd9\u6837\u4f1aTLE\uff0c\u4e8e\u662f\u5c31\u60f3\u5230\u4e86\u72b6\u6001\u538b\u7f29\u4e86\u3002\u53ea\u8981\u5bf9\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8fdb\u884c\u538b\u7f29\u5c31\u53ef\u4ee5\u660e\u663e\u5730\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\nusing namespace std;\nconst int N=2e4;\nint n,m,ans=0,b,w,v[N],color[N],edge[N][N/30];//b\u3001w\u5206\u522b\u5b58\u50a8\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u9ed1\u8272\u4e0e\u767d\u8272\u7684\u8282\u70b9\u4e2a\u6570\uff0cv\u3001color\u6570\u7ec4\u5206\u522b\u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684\u8bbf\u95ee\u60c5\u51b5\u548c\u989c\u8272\uff0cedge\u6570\u7ec4\u5b58\u8fb9\nbool over=false;//\u5224\u65ad\u662f\u5426\u5408\u6cd5\nvoid dfs(int now,int c)\n{\n\tif(over)\n\t\treturn ;//\u5982\u679c\u5df2\u7ecf\u4e0d\u5408\u6cd5\u5219\u8fd4\u56de\u5373\u53ef\n\tif(c==1)\n\t{\n\t\tw++;\n\t\tc=2;\n\t}\n\telse\n\t{\n\t\tb++;\n\t\tc=1;\n\t}//\u67d3\u6210\u4e0e\u4e0a\u4e00\u4e2a\u8282\u70b9\u4e0d\u540c\u7684\u989c\u8272\u5e76\u7edf\u8ba1\n\tv[now]=1;//\u8bbf\u95ee\u6807\u8bb0\n\tcolor[now]=c;//\u5b58\u50a8\u989c\u8272\n\tfor(int i=1;i<=n;i++)\n\t\tif((edge[now][i/30]>>(i%30))&1)//\u82e5\u5f53\u524d\u8282\u70b9\u5230i\u8282\u70b9\u6709\u8fb9\n\t\t\tif(color[i]==c && !over)\n\t\t\t{\n\t\t\t\tcout<<\"Impossible\";\n\t\t\t\tover=true;\n\t\t\t}//\u82e5\u5f53\u524d\u8282\u70b9\u4e0ei\u8282\u70b9\u989c\u8272\u76f8\u540c\u5e76\u4e14\u6ca1\u6709\u6807\u8bb0\u8fc7\u4e0d\u5408\u6cd5\n\t\t\telse\n\t\t\t\tif(!v[i])\n\t\t\t\t\tdfs(i,c);//\u82e5i\u8282\u70b9\u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u5219\u8bbf\u95ee\u5b83\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tedge[x][y/30]=edge[x][y/30]|(1<<(y%30));\n\t\tedge[y][x/30]=edge[y][x/30]|(1<<(x%30));\n\t}//\u8f93\u5165\u5e76\u5b58\u8fb9\n\tfor(int i=1;i<=n;i++)\n\t\tif(!v[i])\n\t\t{\n\t\t\tb=0;\n\t\t\tw=0;//\u521d\u59cb\u5316\n\t\t\tdfs(i,0);\n\t\t\tif(over)\n\t\t\t\treturn 0;//\u82e5\u4e0d\u5408\u6cd5\u5219\u7ed3\u675f\u7a0b\u5e8f\n\t\t\tans+=min(b,w);//\u7b54\u6848\u52a0\u4e0a\u4e24\u4e2a\u989c\u8272\u6240\u5360\u636e\u7684\u8282\u70b9\u66f4\u5c11\u7684\u4e00\u4e2a\n\t\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1554874984,
        "uid": 91534,
        "name": "TEoS",
        "ccfLevel": 6,
        "title": "P1330 \u5c01\u9501\u9633\u5149\u5927\u5b66"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u601d\u7ef4\u9898\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u75280/1\u6807\u8bb0\uff0c\u4ece\u5f53\u524d\u7684\u70b9\u5ef6\u4f38\u51fa\u53bb\u7684\u70b9\u5c31\u8981\u4e0e\u5f53\u524d\u70b9\u7684\u6807\u8bb0\u4e0d\u540c\uff0c\u5982\u679c\u67e5\u627e\u5230\u4e24\u70b9\u6807\u8bb0\u76f8\u540c\uff0c\u5219\u65e0\u6cd5\u5c01\u9501\u3002\u5f53\u7136\u8fd9\u4e0d\u53ef\u80fd\u4e00\u6b21\u5c31\u641e\u5b9a\uff0c\u9700\u8981\u628a\u6bcf\u4e2a\u70b9\u90fd\u67e5\u627e\u4e00\u904d\uff0c\u6bcf\u6b21\u52a0\u4e0a0/1\u4e2a\u6570\u7684\u8f83\u5c0f\u503c\u5373\u53ef\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,edge,nex[200012],head[20012],vet[200012],vis[20012],ans;\nint sum[3];\nbool flag;\ninline void addedge(int u,int v)\n{\n    nex[++edge]=head[u];\n    head[u]=edge;\n    vet[edge]=v;\n}\ninline void dfs(int u,int fa)\n{\n    if (flag) return;\n    if (vis[u]>-1)\n        if (vis[u]==vis[fa]) {flag=1;return;}\n        else return;\n    vis[u]=1^vis[fa];\n    sum[vis[u]]++;\n    int e,v;\n    for (e=head[u];v=vet[e],e;e=nex[e])\n    if (v!=fa)\n    {\n        dfs(v,u);\n        if (flag) return;\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    int x,y;\n    for (int i=1; i<=m; i++) scanf(\"%d%d\",&x,&y),addedge(x,y),addedge(y,x);\n    for (int i=1; i<=n; i++) vis[i]=-1;\n    for (int i=1; i<=n; i++)\n    if (vis[i]==-1) \n    {\n    \tsum[0]=sum[1]=0;\n        flag=0,dfs(i,0);\n        if (flag) return printf(\"Impossible\"),0;\n        ans+=min(sum[0],sum[1]);\n    }\n    return printf(\"%d\\n\",ans),0;\n}\n```",
        "postTime": 1541081790,
        "uid": 43103,
        "name": "Tanktt",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "1.\u7b2c\u4e00\u53cd\u5e94\u662f\u8fd9\u662f\u4e00\u9053\u56fe\u67d3\u8272\u95ee\u9898,\u56e0\u4e3a\u76f8\u90bb\u4e24\u4e2a\u70b9\u6709\u51b2\u7a81,\u4f46\u5206\u6790\u53d1\u73b0\u4e0d\u662f(\u6216\u8005\u8bf4\u4e0d\u8fd9\u4e48\u88f8\u7684\u662f).\n2.\u96be\u9053\u662f\u6a21\u62df\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u5f00\u59cb\u8fdb\u884c\u904d\u5386,\u770b\u6700\u540e\u7ed3\u679c\u54ea\u4e2a\u66f4\u5c11\u662f\u54ea\u4e2a? \u4e0d\u592a\u53ef\u80fd,\u6570\u636e\u592a\u5927\u4e86.\n3.\u60f3\u5230\u4e00\u79cd\u65b9\u6cd5:\u628a\u4e00\u5f20\u56fe\u6309\u7167bfs\u5206\u5947\u6570\u5c42\u548c\u5076\u6570\u5c42,\u770b\u54ea\u4e2a\u5c42\u70b9\u6570\u6700\u5c11,\u7ed3\u679c\u5c31\u662f\u54ea\u4e2a. \u5982\u679c\u540c\u4e00\u5c42\u4e4b\u95f4\u6709\u70b9\u76f8\n\u8fde\u90a3\u4e48\u5c31Impossible. \u53d1\u73b0\u53ef\u80fd\u662f\u5bf9\u7684? \n4.\u611f\u89c9\u50cf\u662f\u4ece\u4e00\u5f20\u56fe\u4e2d\u627e\u51fa\u4e00\u68f5\u751f\u6210\u6811, \u8fd9\u68f5\u6811\u7684\u5c42\u6570\u662f\u6700\u5c0f\u7684.\n\n----------\n\u7efc\u4e0a\u6240\u8ff0: \n\u76f8\u90bb\u4e24\u4e2a\u70b9\u4e4b\u95f4\u4e00\u5b9a\u6709\u4e00\u4e2a\u662f\u6709\u6cb3\u87f9\u7684,\u56e0\u4e3a\u4f1a\u6709\u4e00\u6761\u8fb9. \u90a3\u4e48\u5c31\u6709\u4e24\u79cd\u72b6\u6001: \u67d3\u8272\u6216\u8005\u4e0d\u67d3\u8272,\u90a3\u4e48\u7528bfs\u5206\u5c42,\n\u4e00\u5c42\u9ed1\u4e00\u5c42\u767d,\u54ea\u79cd\u5c42\u70b9\u5c11\u5c31\u9009\u54ea\u5c42,\u540c\u4e00\u5c42\u6709\u90bb\u8fb9\u7684Impossible. \u4e00\u53e5\u8bdd(\u6211\u521b\u7684):\u9ed1\u767d\u4e92\u65a5\u5c42\u67d3\u8272\u95ee\u9898. \n\u5982\u4f55\u89e3\u51b3\u540c\u4e00\u5c42\u7684\u70b9\u4e4b\u95f4\u6709\u8fb9\u7684\u60c5\u51b5? \n: \u8bb0\u5f55\u5c42\u6b21,\u53d1\u73b0\u4ece\u4e00\u4e2a\u70b9\u6269\u5c55\u8fc7\u6765\u7684\u70b9\u5df2\u7ecf\u6709\u5c42\u6b21\u4e86\u800c\u4e14\u662f\u548c\u81ea\u5df1\u4e00\u4e2a\u5c42,\u5176\u5b9e\u53ea\u6709\u4e09\u79cd,\u4e0a\u4e00\u5c42\u8fd9\u4e00\u5c42\u4e0b\u4e00\u5c42\n\u4e0a\u4e00\u5c42\u8df3\u8fc7,\u8fd9\u4e00\u5c42Impossible(\u4e2d\u9014\u8fd4\u56de),\u4e0b\u4e00\u5c42push,\u5c31ok\u4e86,\u56de\u56fd\u5934\u6765\u7edf\u8ba1\u9ed1\u767d\u5c42\u70b9\u6570\u91cf. \n\u56e0\u4e3a\u4f1a\u6bd4\u8f83\u5c42\u6b21,\u6240\u4ee5\u4e0d\u50cf\u4f20\u7edf\u7684\u904d\u5386\u662f\u5efa\u7acbvisit\u6570\u7ec4,\u800c\u662f\u5efa\u7acb\u5c42\u6570\u6570\u7ec4,\u4ee5\u4fbf\u4e92\u65a5\u5206\u6790\u548c\u7ed3\u679c\u7edf\u8ba1. \n\n---------- \n\u7ed3\u679c\u53ea\u670940\u5206. \u4f3c\u4e4e\u662f\u8fd9\u5f20\u56fe\u4e0d\u4e00\u5b9a\u662f\u8fde\u901a\u56fe, \u6240\u4ee5\u8981\u589e\u52a0\u5904\u7406\u8fd9\u662f\u4e2a\u95ee\u9898: \u6211\u6709\u597d\u591a\u6b21\u90fd\u6ca1\u6709\u8003\u8651\u56fe\u7684\u8054\u901a\u6027,\u4ee5\u540e\u4e00\u5b9a\u8981\u6ce8\u610f. \n\u7ed3\u679c\u8fd8\u662f40\u5206, \u4e4b\u524d\u5bf9\u7684\u53c8\u6709\u9519\u4e86,\u4e4b\u524d\u9519\u4e86\u53c8\u6709\u5bf9\u7684.\u600e\u4e48\u4f1a\u8fd9\u6837. \n\u539f\u56e0\u662f\u91cd\u590d\u5224\u65ad\u4e86\u4e4b\u524d\u627e\u8fc7\u7684\u70b9,\u52a0\u4e2avis\u6570\u7ec4\u53bb\u91cd.\n\u7136\u800c\u73b0\u5728\u662f50\u5206,\u8be5\u4e0d\u4f1a\u662f\u601d\u8def\u51fa\u4e86\u95ee\u9898\u5427.\n\u59a5\u534f\u4e86,\u53bb\u770b\u9898\u89e3\u5b66\u4e60\u5b66\u4e60. \n\u770b\u9898\u89e3\u53d1\u73b0\u601d\u8def\u5dee\u4e0d\u591a\u7684,\u4e8e\u662f\u8fd4\u56de,\u627e\u5230\u4e86\u4e00\u4e2a\u5f88\u660e\u663e\u7684bug.\u539f\u6765\u662f\u6211\u4e4b\u524d\u8f6c\u79fb\u5230\u591a\u8fde\u901a\u56fe\u65f6\u6709\u51e0\u884c\u4ee3\u7801\u8981\u4fee\n\u6539,\u4f46\u662f\u6211\u6f0f\u6389\u4e86\u4e00\u4e2a\u5730\u65b9, \u6240\u4ee5\u51fa\u9519\u4e86. \nOK, \u4e0d\u5b8c\u7f8e\u5730\u7ed3\u675f\u4e86. \u7ecf\u8fc7\u601d\u8003\u5bf9\u601d\u7ef4\u8fd8\u662f\u6709\u4e00\u5b9a\u5730\u8bad\u7ec3\u7684.\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\nconst int maxn = 10005;\nint n, m;\nvector<int> G[maxn]; // \u90bb\u63a5\u8868\u5b58\u50a8. \nint layers[maxn] = {}; // \u521d\u59cb\u90fd\u662f-1\u5c42 \nbool vis[maxn] = {};\n\nbool bfs(int i)\n{\n\tqueue<int> que;\n\tque.push(i);\n\tlayers[i] = 1;\n\twhile (!que.empty()) {\n\t\tint u = que.front();\n\t\tque.pop();\n\t\tfor (int i = 0; i < G[u].size(); ++i) {\n\t\t\tint v = G[u][i];\n\t\t\tif (layers[v] == layers[u] - 1) continue; // \u904d\u5386\u5230\u4e86\u4e0a\u4e00\u5c42,\u5206\u8fc7\u5c42\u4e86continue \n\t\t\tif (layers[v] == layers[u]) return false;  // \u904d\u5386\u5230\u4e86\u540c\u4e00\u5c42 \n\t\t\tlayers[v] = layers[u] + 1;  // \u4e0b\u4e00\u5c42\u90a3\u5c31\u52a0\u4e0a\u53bb. \n\t\t\tque.push(v);\n\t\t}\n\t}\n\treturn true;\n}\n\nint main()\n{\n\tmemset(layers, -1, sizeof(layers));\n\tcin >> n >> m;\n\tfor (int i = 0; i < m; ++i) {\n\t\tint u, v;\n\t\tcin >> u >> v;\n\t\tG[u].push_back(v);\n\t\tG[v].push_back(u);\n\t}\n\tint ans = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (layers[i] == -1) {\n\t\t\t//cout << \"i = \" << i << endl;\n\t\t\tif (!bfs(i)) {\n\t\t\t\tcout << \"Impossible\";\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\tint odd = 0, even = 0;\n\t\t\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\t\t\tif (layers[i] + 1 && !vis[i]) {\n\t\t\t\t\t\tvis[i] = true;\n\t\t\t\t\t\tif (layers[i] & 1) odd++;\n\t\t\t\t\t\telse even++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//cout << min(even, odd) << endl; \n\t\t\t\tans += min(even, odd);\n\t\t\t}\n\t\t}\n\t}\n\tcout << ans;\n}\n```",
        "postTime": 1532576332,
        "uid": 75540,
        "name": "\u59ec\u5c0f\u91ce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76ee\u611f\u89c9\u5c31\u662f\u4e8c\u5206\u56fe\uff08\u6ca1\u6709\u5947\u5708\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u70b9\u96c6\uff0c\u800c\u4e14\u6ca1\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\u540c\u4e00\u4e2a\u70b9\u96c6\u91cc\u7684\u4e24\u4e2a\u70b9\uff09\u7684\u5224\u5b9a\uff0c\u65b9\u6cd5\u662f\u7528dfs\u8fdb\u884c\u4e8c\u7740\u8272\uff1a\u9996\u5148\u5047\u8bbe\u6bcf\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u7b2c\u4e00\u4e2a\u88ab\u8bbf\u95ee\u5230\u7684\u7ed3\u70b9\u989c\u8272\u4e3a1\uff0c\u7136\u540e\u8fb9dfs\u8fb9\u7740\u8272\uff0c\u9047\u5230\u51b2\u7a81\u7684\u5c31\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7136\u540e\u5bf9\u4e8e\u4e00\u6b21\u67d3\u8272\uff0c\u628a\u7b54\u6848\u52a0\u4e0a\u4e24\u79cd\u989c\u8272\u4e2a\u6570\u91cc\u8f83\u5c0f\u7684\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#define maxn 10100\n#define maxm 100100\n#define min(a, b) a < b ? a : b\n\nint n, m, x, y;\nint cnt[3], ans;\n\nstruct Edge {\n    int to, nxt;\n};\n\nstruct Graph {\n    int tot, head[maxn], col[maxn];\n    Edge e[maxm << 1];\n    Graph(void) { tot = 1; }\n\n    inline void AddEdge(const int& u, const int& v) {\n        e[tot] = (Edge) {v, head[u]}, head[u] = tot++;\n        e[tot] = (Edge) {u, head[v]}, head[v] = tot++;\n    }\n\n    inline void bipaint(int u) {\n        for (register int i = head[u]; i; i = e[i].nxt) {\n            int v = e[i].to;\n            if (col[v] == col[u]) printf(\"Impossible\"), exit(0);\n            if (!col[v]) {\n                ++cnt[col[v] = 3 - col[u]];\n                bipaint(v);\n            }\n        }\n    }\n} opt;\n\nint main()\n{\n    //freopen(\"test.in\", \"r\", stdin);\n    scanf(\"%d%d\", &n, &m);\n    for (register int i = 1; i <= m; ++i) scanf(\"%d%d\", &x, &y), opt.AddEdge(x, y);\n    for (register int i = 1; i <= n; ++i) if (!opt.col[i]) {\n        opt.col[i] = 1;\n        cnt[1] = 1, cnt[2] = 0;\n        opt.bipaint(i);\n        ans += min(cnt[1], cnt[2]);\n    }\n    printf(\"%d\", ans);\n    return 0;\n}\n```",
        "postTime": 1502797554,
        "uid": 31766,
        "name": "LoliconAutomaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u4e8c\u5206\u67d3\u8272\u6cd5\u5427  \u5229\u7528DFS\n\n\u4e0b\u9762\u662f\u6311\u6218\u767d\u4e66\u4e0a\u7684\u6a21\u677f\uff0c\u57fa\u672c\u548c\u9898\u76ee\u5dee\u4e0d\u591a\uff0c\n\n\n\n//!  \u56e0\u4e3a\u4e0d\u786e\u5b9a\u662f\u4e0d\u662f \u8fde\u901a\u56fe  \u6240\u4ee5\u8981\u5c06\u6240\u6709\u70b9\u679a\u4e3e\u4e00\u904d\n\n//!  \u5982\u679c\u5df2\u7ecf\u786e\u5b9a\u662f\u8fde\u901a\u56fe \u90a3\u5c31\u53ea\u9700\u8981\u4efb\u53d6\u4e00\u4e2a\u70b9\u8fdb\u884c\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 10001\nvector<int>G[MAXN];\nint V;//! \u9876\u70b9\u4e2a\u6570\nint color[MAXN];//!\u8bb0\u5f55\u9876\u70b9\u7684\u989c\u8272\nbool DFS(int v,int c)\n{\n    color[v]=c;\n    for(int i=0;i<G[v].size();i++)\n    {\n        //!  \u5982\u679c\u51fa\u73b0\u76f8\u90bb\u70b9\u989c\u8272\u76f8\u540c  \u90a3\u4e48\u5c31\u8fd4\u56defalse\n        if(color[G[v][i]]==-c)return false;\n        if(color[G[v][i]]==0&&!DFS(G[v][i],-c))return false;\n    }\n    return true;\n}\nvoid solve()\n{\n    for(int i=0;i<V;i++)\n    {\n        if(color[i]==0)//!  \u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u67d3\u8272\n        {\n            if(!DFS(i,1))//!  \u90a3\u4e48\u5c31\u67d3\u62101\uff0c\u7136\u540e\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u4e0d\u80fd\u8fbe\u6210\u6761\u4ef6,\u5c31\u53ea\u8df3\u51fa\u4e0d\u7528\u7ba1\u5176\u4ed6\u4e86\n            {printf(\"No\\n\");return ;}\n        }\n    }\n    printf(\"Yes\\n\");\n}\n```",
        "postTime": 1502706958,
        "uid": 51504,
        "name": "\u6811\u4e0a\u7684\u7537\u7235",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    },
    {
        "content": "\u597d\u5427\uff0c\u8868\u793a\u672c\u849f\u84bb\u4e0d\u61c2\u4ec0\u4e48\u53eb\u9ed1\u767d\u67d3\u8272\uff0c\u6240\u4ee5\u9898\u89e3\u57fa\u672c\u770b\u4e0d\u61c2\u3002\u3002\n\n\u4f46\u662f\u6211\u540c\u65f6\u7528BFS+DFS\u4e5fAC\u4e86\n\n\u601d\u8def\uff1a\n\n\u56e0\u4e3a\u5404\u4e2a\u70b9\u4e0d\u4e00\u5b9a\u76f8\u8fde\n\n\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u4e00\u8fb9\u6240\u6709\u7684\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u70b9\u8dd1\u4e00\u8fb9DFS\uff0c\n\n\u5728DFS\u7684\u8fc7\u7a0b\u4e2d\u540c\u65f6\u8bbf\u95ee\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u70b9\uff0c\n\n\u7136\u540e\u5728\u6bcf\u6b21DFS\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884cDFS\uff0c\n\n\u7b97\u51fa\u5728\u8be5\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u4ece\u8be5\u70b9\u51fa\u53d1\uff0c\u9700\u8981\u653e\u7f6e\u7684\u6570\u91cf\n\n           \n        \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstdlib>\n#include<queue>\nusing namespace std;\nvoid read(int & n)\n{\n    char c='+';int x=0;\n    while(c<'0'||c>'9')\n    c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=x*10+(c-48);\n        c=getchar();\n    }\n    n=x;\n}\nconst int MAXN=10101;\nstruct node\n{\n    int u,v,nxt;\n}edge[MAXN*10+101];\nstruct dian\n{\n    int bh;\n    int how;// 0\u4e0d\u653e\uff0c1\u653e \n}sz[MAXN];\nint n,m;\nint head[MAXN];\nint vis1[MAXN];\nint vis2[MAXN];\nint fang[MAXN];// \u8bb0\u5f55\u8fd9\u4e2a\u70b9\u662f\u5426\u653e \nint num=1;\nint ans1=0x7fffff,ans2=0,out=0;\nvoid add_edge(int x,int y)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].nxt=head[x];\n    head[x]=num++;\n}\nvoid bfs(int p,int fbf)\n{\n    memset(vis2,0,sizeof(vis2));\n    dian bg;\n    bg.bh=p;\n    bg.how=1;\n    queue<dian>q;\n    q.push(bg);\n    while(q.size()!=0)\n    {\n        dian now=q.front();\n        vis2[now.bh]=now.how;\n        q.pop();\n        if(now.how==1)\n        ans2++;\n        for(int i=head[now.bh];i!=-1;i=edge[i].nxt)\n        {\n            dian will;\n            will.bh=edge[i].v;\n            if(now.how==1)will.how=2;\n            else will.how=1;\n            if(vis2[edge[i].v])\n            {\n                if(vis2[edge[i].v]==now.how)\n                {\n                    printf(\"Impossible\");\n                    exit(0);\n                }\n                else continue;\n            }\n            q.push(will);\n        }\n    }\n    ans1=min(ans1,ans2);\n}\nvoid dfs(int p)\n{\n    ans2=0;\n    vis1[p]=1;\n    bfs(p,1);\n    for(int i=head[p];i!=-1;i=edge[i].nxt)\n    {\n        if(vis1[edge[i].v]==0)\n        {\n            ans2=0;\n            dfs(edge[i].v);    \n        }\n    }\n}\nint main()\n{\n    read(n);read(m);\n    for(int i=1;i<=n;i++)\n    head[i]=-1;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        read(x);read(y);\n        add_edge(x,y);\n        add_edge(y,x);\n    }\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(vis1[i]==0&&head[i]!=-1)\n        {\n            ans1=0x7ffff;\n            dfs(i);\n            out+=ans1;\n        }\n    }\n    printf(\"%d\",out);\n    return 0;\n}\n```",
        "postTime": 1497949478,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1330 \u3010\u5c01\u9501\u9633\u5149\u5927\u5b66\u3011"
    }
]