[
    {
        "content": "\u611f\u89c9\u6b64\u9898\u5927\u90e8\u5206\u9898\u89e3\u90fd\u4e00\u70b9\u4e5f\u4e0d\u8d1f\u8d23\u4efb\u3002\n\n\u672c\u4eba\u5341\u5206\u4e0d\u8d5e\u540c\uff0c\u5bf9\u4e8e\u4e00\u9053\u7f51\u7edc\u6d41\u9898\uff0c\u4e00\u7bc7\u9898\u89e3\u53ea\u8bf4\u600e\u4e48\u5efa\u56fe\u4e0d\u8bf4\u601d\u8def\u7684\u884c\u4e3a\u3002\u6211\u5c31\u60f3\u8bf7\u95ee\uff0c\u96be\u9053\u505a\u4e00\u9053\u9898\u7684\u76ee\u7684\uff0c\u5c31\u53ea\u5728\u4e8e\u505a\u8fd9\u4e00\u9053\u9898\u5417\uff1fA\u4e86\u5c31\u597d\uff1f\u539f\u7406\u601d\u8def\u4ec0\u4e48\u7231\u7ba1\u4e0d\u7ba1\uff1f\u8fd9\u80fd\u53eb\u9898\u89e3\uff1f\n\n\u7f51\u7edc\u6d41\u9898\u7684\u91cd\u70b9\u5c31\u662f\u5728\u4e8e\u5efa\u56fe\u3002\u5982\u679c\u8fd9\u90fd\u80fd\u4e00\u7b14\u5e26\u8fc7\uff0c\u90a3\u8fd8\u505a\u4e2a\u9524\u5b50\uff1f\n\n\u6beb\u4e0d\u5938\u5f20\u7684\u8bf4\uff0c\u5982\u679c\u5f20\u4e09\u505a\u7f51\u7edc\u6d41\u9898\u7684\u65f6\u5019\u5c31\u8fd9\u4e48\u4f3c\u662f\u800c\u975e\uff0c\u5c31\u7b97\u4ed6\u52e4\u52e4\u6073\u6073\u5730\u505a\u5b8c\u4e8624\u9898\uff0c\u7701\u9009\u7684\u65f6\u5019\u4e5f\u8fd0\u6c14\u597d\u9047\u5230\u4e86\u7f51\u7edc\u6d41\u9898\uff0c\u505a\u51fa\u6765\u7684\u6982\u7387\u7edd\u5bf9\u4e0d\u9ad8\uff0c\u6216\u8005\u8bf4\u5c31\u6839\u672c\u4e0d\u53ef\u80fd\u505a\u51fa\u6765\u3002\n\n\u4f60\u8bf4\uff0c\u7f51\u7edc\u6d41\u9898\u662f\u4ec0\u4e48\uff1f\u5230\u73b0\u5728\u4e3a\u6b62\u8fd8\u53ea\u662f\u4e00\u4e2a\u9760\u7ecf\u9a8c\u548c\u9605\u5386\u901a\u6740\u7684\u9898\u76ee\u7c7b\u522b\u3002\u6240\u4ee5\u7f51\u7edc\u6d41\u9898\u9700\u8981\u683c\u5916\u91cd\u89c6\u7ecf\u9a8c\u7684\u79ef\u7d2f\uff0c\u77e5\u5176\u7136\u77e5\u5176\u6240\u4ee5\u7136\u3002\n\n\u603b\u4e4b\u5462\uff0c\u4e00\u9053\u7f51\u7edc\u6d41\u9898\uff0c\u4e0d\u4ed4\u7ec6\u5206\u6790\u601d\u8def\u76f4\u63a5\u544a\u8bc9\u4f60\u600e\u4e48\u5efa\u56fe\uff0c\u5c31\u662f\u5728\u800d\u6d41\u6c13\u3002\n\n_____\n\n> \u7ed9\u5b9a\u5b9e\u76f4\u7ebf $ L $ \u4e0a $ n $ \u4e2a\u5f00\u533a\u95f4\u7ec4\u6210\u7684\u96c6\u5408 $ I $\uff0c\u548c\u4e00\u4e2a\u6b63\u6574\u6570 $ k $\uff0c\u8bd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u4ece\u5f00\u533a\u95f4\u96c6\u5408 $ I $ \u4e2d\u9009\u53d6\u51fa\u5f00\u533a\u95f4\u96c6\u5408 $ S \\subseteq I $\uff0c\u4f7f\u5f97\u5728\u5b9e\u76f4\u7ebf $ L $ \u7684\u4efb\u4f55\u4e00\u70b9 $ x $\uff0c$ S $ \u4e2d\u5305\u542b\u70b9 $ x $ \u7684\u5f00\u533a\u95f4\u4e2a\u6570\u4e0d\u8d85\u8fc7 $ k $\u3002\u4e14 $ \\sum\\limits_{z \\in S} | z | $ \u8fbe\u5230\u6700\u5927\u3002\u8fd9\u6837\u7684\u96c6\u5408 $ S $ \u79f0\u4e3a\u5f00\u533a\u95f4\u96c6\u5408 $ I $ \u7684\u6700\u957f $ k $ \u53ef\u91cd\u533a\u95f4\u96c6\u3002$ \\sum\\limits_{z \\in S} | z | $ \u79f0\u4e3a\u6700\u957f $ k $ \u53ef\u91cd\u533a\u95f4\u96c6\u7684\u957f\u5ea6\u3002\n>\n> \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5f00\u533a\u95f4\u96c6\u5408 $ I $ \u548c\u6574\u6570 $ k $\uff0c\u8ba1\u7b97\u5f00\u533a\u95f4\u96c6\u5408 $ I $ \u7684\u6700\u957f $ k $ \u53ef\u91cd\u533a\u95f4\u96c6\u7684\u957f\u5ea6\u3002\n>\n> $ 1 \\leq n \\leq 500, 1 \\leq k \\leq 3 $\n\n\u9996\u5148\u4e00\u62ff\u51fa\u6765\uff0c\u8fd9\u4e0d\u5c31\u662f\u5339\u914d\u95ee\u9898\u561b\uff1f\u4e00\u4e2a\u70b9\u6700\u591a\u5339\u914d $k$ \u4e2a\u533a\u95f4\u3002\u4e8e\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u5efa\u4e00\u4e2a\u70b9\uff0c\u7136\u540e\u8fde\u5411\u8986\u76d6\u81ea\u5df1\u7684\u70b9\uff0c\u7136\u540e\u2026\u597d\u50cf\u4e0d\u592a\u5bf9\uff1f\u5176\u4e00\u4ed6\u6ca1\u7ed9\u4e0b\u6807\u7684\u53d6\u503c\u8303\u56f4\uff0c\u5176\u4e8c\u4e00\u4e2a\u7ebf\u6bb5\u8986\u76d6\u591a\u4e2a\u70b9\uff0c\u8981\u4e48\u90fd\u8986\u76d6\u8981\u4e48\u90fd\u4e0d\u8986\u76d6\uff0c\u8fd9\u4e2a\u9650\u5236\u5f88\u96be\u8868\u793a\u2026\n\n\u4e8e\u662f\u597d\u50cf\u4e0d\u77e5\u9053\u4ece\u4f55\u5904\u5165\u624b\u4e86\u3002\u53d1\u73b0\u4e00\u4e2a\u8fd9\u6837\u7684\u6027\u8d28\uff0c\u5c31\u662f\u6c38\u8fdc\u4e0d\u4f1a\u9009\u62e9 $k$ \u4e2a\u4ee5\u4e0a\u4ea4\u4e8e $1$ \u70b9\u7684\u533a\u95f4\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u5f7c\u6b64\u4e4b\u95f4\u6ca1\u6709\u4ea4\uff0c\u5c31\u53ef\u4ee5\u540c\u65f6\u9009\uff1b\u5426\u5219\u80fd\u4e0d\u80fd\u540c\u65f6\u9009\uff0c\u770b\u60c5\u51b5\u3002\u8fd9\u50cf\u6781\u4e86\u300c\u9650\u5236\u300d\uff0c\u4e5f\u5c31\u662f\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u4e4b\u95f4\u6ca1\u6709\u4ea4\uff0c\u90a3\u4e24\u8005\u4e0d\u5b58\u5728\u9650\u5236\uff1b\u5426\u5219\u5b58\u5728 $k$ \u7684\u9650\u5236\u3002\n\n\u6839\u636e\u4e00\u5f00\u59cb\u7684\u5339\u914d\uff0c\u53ef\u4ee5\u731c\u5230\u5927\u81f4\u4e0a\u7528\u7f51\u7edc\u6d41\u662f\u53ef\u884c\u7684\u3002\u5e76\u4e14\u4f3c\u4e4e\u7f51\u7edc\u6d41\u5f88\u9002\u5408\u7528\u6d41\u91cf\u6765\u8868\u5f81\u9650\u5236\u3002\u90a3\u4e48\u8003\u8651\uff0c\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u4e0d\u5b58\u5728\u9650\u5236\uff0c\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u529e\u2014\u2014\u7f51\u7edc\u6d41\u7c7b\u4f3c\u7535\u6d41\uff0c\u6240\u4ee5\u6b64\u65f6\u5982\u679c\u4e32\u8054\u7684\u8bdd\uff0c\u5c31\u4ee3\u8868\u7740\u53ef\u4ee5\u540c\u65f6\u9009\uff1b\u90a3\u4e48\u5982\u679c\u5b58\u5728\u9650\u5236\uff0c\u5c31\u610f\u5473\u7740\u4e0d\u80fd\u4e32\u8054\u3002\u6839\u636e\u8fd9\u4e00\u70b9\uff0c\u8003\u8651\u5982\u4f55\u4e32\u8054\u3002\u53d1\u73b0\u672c\u8d28\u4e0a\u662f\u5c06\u4e24\u4e2a\u4e0d\u4ea4\u7684\u533a\u95f4\u4e2d\u95f4\u8fde $f=\\infty,c=0$ \u7684\u8fb9\u3002\n\n\u8fd9\u4e00\u70b9\u5c31\u5f15\u7533\u51fa\u4e24\u4e2a\u5efa\u56fe\u65b9\u6cd5\uff0c\u5176\u672c\u8d28\u662f\u76f8\u540c\u7684\uff1a\n\n1\u3001\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90 $\\rm S$ \u548c\u4e00\u4e2a\u6e90 $\\rm S'$ \uff0c\u4e2d\u95f4\u8fde $f=k,c=0$ \u7684\u8fb9\uff0c\u76ee\u7684\u662f\u63d0\u4f9b\u521d\u59cb\u6d41\u91cf\u3002$\\rm S'$ \u5411\u6bcf\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8fde\u4e00\u6761 $f=1,c=-1$ \u8fb9\u3002\u7136\u540e\u533a\u95f4\u5de6\u7aef\u70b9\u5411\u53f3\u7aef\u70b9\u8fde\u8fb9 $f=1,c=-len$ \u8868\u793a\u8d21\u732e\uff0c\u6bcf\u4e2a\u53f3\u7aef\u70b9\u518d\u5411 $\\rm T $ \u8fde\u8fb9\u5373\u53ef\u3002\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u4e0d\u4ea4\uff0c\u5c31\u7531\u4e00\u4e2a\u533a\u95f4\u7684 $r$ \u8fde\u5411\u53e6\u4e00\u4e2a\u533a\u95f4\u7684 $l$ \uff08\u5f53\u7136\u8981\u6309\u79e9\u5566\uff09\u3002\u601d\u8003\u8fd9\u6837\u505a\u7684\u5408\u7406\u6027\uff0c\u5bf9\u4e8e\u76f8\u4ea4\u7684\u533a\u95f4\uff0c\u4e00\u5b9a\u662f\u5e76\u8054\uff1b\u5426\u5219\u7684\u8bdd\u5c31\u662f\u4e32\u8054\uff08\u5176\u5b9e\u53eb\u505a\u6df7\u8fde\uff0c\u4f46\u662f\u95ee\u9898\u4e0d\u5927\uff09\u3002\n\n2\u3001\u5efa\u7acb\u4e00\u4e2a\u6e90 $\\rm S$ \u8fde\u5411\u6570\u8f74\u4e0a\u7684 $0$ \u4f4d\u7f6e\uff0c$f=k,c=0$\u3002\u7136\u540e\u6570\u8f74\u4e0a\u6bcf\u4e2a $i>0$ \u5411 $i+1$ \u8fde\u8fb9 $f=k,c=0$\u3002\u6700\u540e $maxright$ \u5411 $\\rm T$ \u8fde\u8fb9\u3002\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u8fde\u6cd5\u8ddf1\u76f8\u540c\u3002\n\n\u6ce8\u610f\uff1a\n\n1\u3001\u4e3a\u4ec0\u4e48\u8981\u62c6\u70b9\uff1f\u6b64\u5904\u62c6\u70b9\u7684\u4f5c\u7528\u503c\u5f97\u6ce8\u610f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u672c\u8d28\u4e0a\u5e94\u8be5\u62bd\u8c61\u6210\u4e00\u4e2a\u70b9\u3002\u4f46\u662f\u5728\u6d41\u56fe\u91cc\u662f\u4e0d\u5b58\u5728\u300c\u70b9\u6743\u300d\u8fd9\u4e2a\u6982\u5ff5\u7684\u3002\u6240\u4ee5\u9700\u8981\u628a\u70b9\u6743\u8f6c\u8fb9\u6743\uff0c\u62c6\u70b9\u7684\u4f5c\u7528\u4fbf\u5728\u4e8e\u6b64\u3002\n\n2\u3001\u5176\u5b9e\u4e0a\u9762\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u901a\u8fc7\u521d\u4e2d\u7269\u7406\u91cc\u9762\u4ec0\u4e48\u300c\u5224\u65ad\u4e24\u4e2a\u7535\u8def\u56fe\u662f\u5426\u7b49\u4ef7\u300d\u7684\u77e5\u8bc6\u6765\u89e3\u51b3\u7684233\n\n3\u3001\u7531\u4e8e\u672c\u9898\u4fdd\u8bc1\u4e86\u300c\u5f00\u533a\u95f4\u300d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5 $l\\to r,len=r-l$ \u3002\u5f53\u7136\u5982\u679c\u662f\u95ed\u533a\u95f4\uff0c\u53ea\u9700\u8981\u6539\u6210 $l\\to r+1$ \u5373\u53ef\u3002\n\n4\u3001\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u65b9\u6848\uff0c\u53d1\u73b0\u6700\u7ec8\u53ef\u80fd\u5b58\u5728\u5f88\u591a\u6570\u8f74\u4e0a\u7684\u70b9 $i$ \u53ea\u4e0e $i-1,i+1$ \u8fde\u4e86 $f=k,c=0$ \u7684\u8fb9\uff0c\u6240\u4ee5\u662f\u6ca1\u7528\u7684\uff0c\u79bb\u6563\u5316\u6389\u5c31\u597d\u4e86\u3002 \n\n```cpp\nconst int N = 200010 ;\nconst int I = 998244353 ;\n\n#define ft first\n#define sc second\n#define to(k) e[k].to\n#define fr(k) e[k].from\n#define fw(k) e[k].flow\n#define ct(k) e[k].cost\n#define next(k) e[k].next\n#define pint pair<int, int>\n\nstruct Edge{\n    int to ;\n    int from ;\n    int flow ;\n    int cost ;\n    int next ;\n}e[N * 2] ;\n\nint _s ;\nint _t ;\nint ans ;\nint res ;\nint cnt ;\nint n, m ;\nint g[N] ;\nint vis[N] ;\nint dis[N] ;\nint pre[N] ;\nint head[N] ;\nint _last[N] ;\nqueue <int> q ;\n\nvoid add(int u, int v, int f, int c){\n    to(++ cnt) = v ;\n    next(cnt) = head[u] ;\n    fw(cnt) = f ; ct(cnt) = c ;\n    fr(cnt) = u ; head[u] = cnt ;\n}\nbool spfa(){\n    fill(g, g + n + 1, I) ;\n    fill(dis, dis + n + 1, I) ;\n    fill(vis, vis + n + 1, 0) ;\n    q.push(_s) ; vis[_s] = 1 ; dis[_s] = 0 ;\n    while (!q.empty()){\n        int x = q.front() ;\n        q.pop() ; vis[x] = 0 ;\n        for (int k = head[x] ; ~k ; k = next(k))\n            if (dis[to(k)] > dis[x] + ct(k) && fw(k)){\n                dis[to(k)] = dis[x] + ct(k) ;\n                g[to(k)] = min(fw(k), g[x]) ;\n                pre[to(k)] = x ; _last[to(k)] = k ;\n                if (!vis[to(k)]){\n                    q.push(to(k)) ;\n                    vis[to(k)] = 1 ;\n                }\n            }\n    }\n    return (bool)(dis[_t] < I) ;\n}\nvoid ek(){\n    while (spfa()){\n        int x = _t ;\n        res += g[_t] ;\n        ans += g[_t] * dis[_t] ;\n        //cout << g[_t] << \" \" << ans << endl ;\n        while (x != _s){\n            fw(_last[x]) -= g[_t] ;\n            fw(_last[x] ^ 1) += g[_t] ;\n            x = pre[x] ;\n        }\n    }\n}\n\nint len[N] ;\npint base[N] ;\nint _n, _k, tot ;\nmap <int, int> Id, buc ;\nmap <int, int> :: iterator t ;\n\nint main(){\n    int u, v, f, c ;\n    cin >> _n >> _k ; cnt = -1 ;\n    memset(head, -1, sizeof(head)) ;\n    for (int i = 1 ; i <= _n ; ++ i){\n        cin >> base[i].ft >> base[i].sc ;\n        len[i] = base[i].sc - base[i].ft ;\n    }\n    for (int i = 1 ; i <= _n ; ++ i){\n        if (!Id.count(base[i].ft)) buc[base[i].ft] ++ ;\n        if (!Id.count(base[i].sc)) buc[base[i].sc] ++ ;\n    }\n    add(0, 1, _k, 0) ; add(1, 0, 0, 0) ;\n    for (t = buc.begin() ; t != buc.end() ; ++ t)\n        Id[t->ft] = ++ tot ; _s = 0 ; _t = tot + 1 ;\n    for (int i = 1 ; i <= tot ; ++ i)\n        add(i, i + 1, I, 0), add(i + 1, i, 0, 0) ;\n    for (int i = 1 ; i <= _n ; ++ i){\n        //cout << Id[base[i].ft] << \" \" << Id[base[i].sc] << endl ;\n        add(Id[base[i].ft], Id[base[i].sc], 1, -len[i]) ;\n        add(Id[base[i].sc], Id[base[i].ft], 0, len[i]) ;\n    }\n    n = _t + 1 ; ek() ;\n    cout << -ans << endl ;\n}\n```\n\n",
        "postTime": 1584491470,
        "uid": 28313,
        "name": "\u768e\u6708\u534a\u6d12\u82b1",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "~~\u904d\u89c2\u6240\u6709\u9898\u89e3\u53d1\u73b0\u90fd\u5728\u6559\u600e\u4e48\u5efa\u56fe\u3002\u3002~~ \u8fd9\u5bf9\u6211\u8fd9\u4e2a\u849f\u84bb\u663e\u5f97\u975e\u5e38\u4e0d\u53cb\u597d\u3002\n\n\u4e0b\u9762\u662f\u6211\u7684\u7406\u89e3\uff1a\n\n1.    \u62ff\u5230\u8fd9\u9053\u9898\u540e\u753b\u4e86\u51e0\u4e2a\u56fe \u53d1\u73b0\u6bcf\u4e2a\u6bcf\u4e2a\u70b9\u88ab\u8986\u76d6 \u5f53\u4e14\u4ec5\u5f53\u7ebf\u6bb5\u7684\u8d77\u70b9\u6216\u8005\u7ec8\u70b9\u88ab\u8986\u76d6 \u5b8c\u5168\u53ef\u4ee5\u79bb\u6563\u6210\u70b9\u56e0\u4e3a\u4e00\u6761\u7ebf\u6bb5\u7684\u4e2d\u95f4\u7684\u70b9\u662f\u4e0d\u5fc5\u8981\u7684\u3002\n\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6211\u4eec\u53d1\u73b0\u5176\u6700\u591a\u88ab\u8986\u76d6k\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u6761\u7ebf\u6bb5\u80fd\u8986\u76d6\u597d\u591a\u70b9\u4f46\u662f\u4e00\u4e2a\u70b9\u6700\u591a\u88ab\u8986\u76d6k\u6b21\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6bcf\u6761\u7ebf\u6bb5\u8fde\u5411\u6e90\u70b9\u8868\u793a\u4f7f\u7528\u5f53\u524d\u8fd9\u6761\u7ebf\u6bb5 \u800c\u8fd9\u6761\u7ebf\u6bb5\u9700\u8981\u8fde\u5411\u81ea\u5df1\u8986\u76d6\u7684\u90a3\u4e9b\u70b9 \u8fd9\u4e9b\u70b9\u8fde\u5411\u6c47\u70b9 \u5bb9\u91cf\u4e3ak\u8868\u793a\u81ea\u5df1\u6700\u591a\u88ab\u8986\u76d6k\u6b21\u3002\n\n3. \u6211\u4eec\u8ba9\u6700\u7ec8\u88ab\u8986\u76d6\u7684\u70b9\u901a\u8fc7\u6c47\u70b9\u7684\u6d41\u91cf\u9650\u5236\u4fdd\u8bc1\u4e86\u8fd9\u4e2a\u6761\u4ef6\u540e\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u6b63\u786e\uff0c\u56e0\u4e3a\u8fd9\u662f\u8d39\u7528\u6d41\uff0c\u8fd9\u6761\u7ebf\u6bb5\u7684\u503c\u80af\u5b9a\u662f\u5176\u957f\u5ea6\uff0c\u800c\u6d41\u91cf\u4e3a1\uff0c\u5982\u679c\u4e3a\u591a\u7684\u8bdd\u8d39\u7528\u5c06\u4f1a\u88ab\u7edf\u8ba1\u7684\u4e0d\u6b63\u786e\uff0c\u4f46\u662f\u4e3a1\u7684\u8bdd\u4e00\u6761\u7ebf\u6bb5\u7684\u6d41\u5fc5\u7136\u6d41\u5411\u67d0\u4e2a\u70b9 \u4f46\u662f\u6211\u4eec\u60f3\u8ba9\u8fd9\u4e00\u6761\u6d41\u6d41\u8fc7\u6240\u6709\u7684\u70b9\u90a3\u4e48\u600e\u4e48\u529e\uff1f\n\n4. \u53ef\u4ee5\u53d1\u73b0\u8fd9\u53d8\u6210\u4e86\u4e00\u4e2a\u4e00\u6d41\u5bf9\u591a\u6d41\u7684\u95ee\u9898\uff0c\u95ee\u9898\u81ea\u7136\u4e5f\u88ab\u8f6c\u6362\u6210\u4e86\u5982\u4f55\u4f7f\u7528\u4e00\u6761\u6d41\u6d41\u8fc7\u82e5\u5e72\u4e2a\u70b9\uff0c\u53d1\u73b0\u60f3\u8981\u8fd9\u4e48\u505a\u5fc5\u7136\u8fd9\u4e9b\u70b9\u5f97\u6a2a\u7740\u8fde\u5230\u4e00\u5757\u7136\u540e\u4f7f\u7528\u4e00\u6761\u6d41\u6d41\u8fc7\u4ed6\u4eec\uff0c\u6240\u4ee5\u5c31\u6709\u672c\u9898\u7684\u57fa\u672c\u6a21\u578b\u4e86\u628a\u4e00\u4e9b\u70b9\u4e32\u8054\u8d77\u6765\u3002\n\n\u76f8\u4f3c\u9898\u76ee\uff1a\u5fd7\u613f\u8005\u7684\u62db\u52df(\u4e0d\u8fc7\u8fd9\u4e2a\u662f\u5f3a\u5236\u8981\u6d41\n\n5. \u672c\u9898\u662f\u6700\u591a\u53ef\u4ee5k\u4e2a\u4e5f\u5c31\u662f\u4e0d\u5f3a\u5236\u8981\u6d41\u53cd\u800c\u5f3a\u8005\u9650\u5236\u6d41\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4ece\u6e90\u70b9\u653e\u51fak\u6d41\uff0c\u7136\u540e\u7531\u4e8e\u6700\u591ak\u6761\u6d41\u6240\u4ee5\u5728\u4efb\u610f\u65f6\u523b\u90fd\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u53ef\u4ee5\u4e0d\u4f7f\u7528\u7ebf\u6bb5\u6240\u4ee5\u6bcf\u4e2a\u76f8\u90bb\u4e24\u70b9\u4e4b\u95f4\u8fde\u4e0a\u5bb9\u91cf\u4e3ak\u8d39\u7528\u4e3a0\u7684\u8fb9 \u7136\u540e\u7ebf\u6bb5\u8fde\u63a5l\u548cr \u8d39\u7528\u4e3a\u5176\u957f\u5ea6\uff0c\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u7efc\u4e0a\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u4e00\u6d41\u5bf9\u591a\u6d41\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8fd9\u6837\u8fdb\u884c\u89e3\u51b3\u3002\n\nupdate 2020 10 9:\n\n\u5927\u6982\u662f\u9000\u5f79\u540e\u7b2c\u4e00\u6b21\u6267\u7b14.\n\n\u662f\u8fd9\u6837\u7684 \u4e00\u6d41\u5bf9\u591a\u6d41\u662f\u7ecf\u5178\u7684\u6a21\u578b \u600e\u4e48\u505a\u5c31\u662f\u5fd7\u613f\u8005\u62db\u52df\u7684\u90a3\u4e2a\u5efa\u6a21\u65b9\u6cd5\u3002\n\n\u5c3d\u7ba1\u5176\u6709\u66f4\u4f18\u79c0\u7684\u7ebf\u6027\u89c4\u5212\u505a\u6cd5\uff0c\u4f46\u662f\u5176\u7f51\u7edc\u6d41\u7684\u5efa\u6a21\u4e5f\u662f\u76f8\u5f53\u7ecf\u5178\u3002\n\n\u4e8e\u662f\u505a\u6cd5\u4e5f\u5c31\u547c\u4e4b\u6b32\u51fa\u4e86\u3002\n\ncode\uff1a\n```cpp\n//#include<bits/stdc++.h>\n#include<iomanip>\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<deque>\n#include<cmath>\n#include<ctime>\n#include<cstdlib>\n#include<stack>\n#include<algorithm>\n#include<vector>\n#include<cctype>\n#include<utility>\n#include<set>\n#include<bitset>\n#include<map>\n#define INF 1000000000\n#define ll long long\n#define min(x,y) ((x)>(y)?(y):(x))\n#define max(x,y) ((x)>(y)?(x):(y))\n#define RI register ll\n#define db double\nusing namespace std;\nchar buf[1<<15],*fs,*ft;\ninline char getc()\n{\n    return (fs==ft&&(ft=(fs=buf)+fread(buf,1,1<<15,stdin),fs==ft))?0:*fs++;\n}\ninline int read()\n{\n    int x=0,f=1;char ch=getc();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getc();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n    return x*f;\n}\ninline void put(int x)\n{\n    x<0?x=-x,putchar('-'):0;\n    int num=0;char ch[20];\n    while(x)ch[++num]=x%10+'0',x/=10;\n    num==0?putchar('0'):0;\n    while(num)putchar(ch[num--]);\n    putchar('\\n');return;\n}\nconst int MAXN=510,maxn=50010;\nint n,k,S,T,len=1,P,sum,t,h,cnt,top;\nint l[MAXN],r[MAXN],b[MAXN<<1],c[MAXN<<1];\nint vis[maxn],dis[maxn];\nint q[maxn],pre[maxn],in[maxn];\nint lin[maxn],nex[maxn],ver[maxn],e[maxn],e1[maxn];\ninline void add(int x,int y,int z,int z1)\n{\n    ver[++len]=y;nex[len]=lin[x];lin[x]=len;e[len]=z;e1[len]=z1;\n    ver[++len]=x;nex[len]=lin[y];lin[y]=len;e[len]=0;e1[len]=-z1;\n}\ninline void discrete()\n{\n    sort(b+1,b+1+top);\n    for(int i=1;i<=top;++i)if(i==1||b[i]!=b[i-1])c[++cnt]=b[i];\n    for(int i=1;i<=n;++i)\n    {\n        l[i]=lower_bound(c+1,c+1+cnt,l[i])-c;\n        r[i]=lower_bound(c+1,c+1+cnt,r[i])-c;\n    }\n}\ninline int spfa()\n{\n    for(int i=1;i<=T;++i)dis[i]=-INF;\n    t=h=0;dis[S]=0;q[++t]=S;vis[S]=1;in[S]=INF;\n    while(h++<t)\n    {\n        int x=q[h];vis[x]=0;\n        for(int i=lin[x];i;i=nex[i])\n        {\n            int tn=ver[i];\n            if(!e[i])continue;\n            if(dis[tn]<dis[x]+e1[i])\n            {\n                dis[tn]=dis[x]+e1[i];\n                in[tn]=min(in[x],e[i]);\n                pre[tn]=i;\n                if(!vis[tn])q[++t]=tn,vis[tn]=1;\n            }\n        }\n    }\n    return dis[T]!=-INF;\n}\ninline void EK()\n{\n    while(spfa())\n    {\n        int x=T,i=pre[x];\n        sum+=in[T]*dis[T];\n        while(x!=S)\n        {\n            e[i]-=in[T];\n            e[i^1]+=in[T];\n            x=ver[i^1];i=pre[x];\n        }\n    }\n}\nint main()\n{\n    //freopen(\"1.in\",\"r\",stdin);\n    n=read();k=read();\n    for(int i=1;i<=n;++i)\n    {\n        l[i]=read(),r[i]=read();\n        if(l[i]>r[i])swap(l[i],r[i]);\n        b[++top]=l[i],b[++top]=r[i];\n    }\n    discrete();\n    S=cnt+1;T=S+1;\n    for(int i=1;i<=cnt;++i)\n    {\n        if(i==1)add(S,i,k,0);\n        if(i==cnt)add(i,T,k,0),add(i-1,i,k,0);\n        if(i!=1&&i!=cnt)add(i-1,i,k,0);\n    }\n    for(int i=1;i<=n;++i)add(l[i],r[i],1,c[r[i]]-c[l[i]]);\n    EK();put(sum);\n    return 0;\n}\n\n```\n~~\u6492\u82b1~~~\n",
        "postTime": 1560899636,
        "uid": 59688,
        "name": "chdy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "**    \u6240\u6709\u70b9\u5411\u4e0b\u4e00\u4e2a\u70b9\u8fde\u5bb9\u91cf\u4e3ak\u8d39\u7528\u4e3a0\u7684\u8fb9\n\nl\u548cr\u8fde\u5bb9\u91cf\u4e3a1\u8d39\u7528\u4e3a\u533a\u95f4\u957f\u5ea6\u7684\u8fb9\n\n\u7136\u540e\u8dd1\u6700\u5927\u6d41\u6700\u5927\u8d39\u7528\u6d41\n\n(\u6700\u5927\u8d39\u7528\u5c31\u662f\u628a\u8fb9\u6743\u53d6\u76f8\u53cd\u6570\u8dd1\u6700\u5c0f\u8d39\u7528\n\n\u6700\u540e\u518d\u8f93\u51fa\u6700\u7ec8\u8d39\u7528\u7684\u76f8\u53cd\u6570)\n\n\u539f\u56e0\n\u4f60\u60f3\u8981\u8d39\u7528\u5c3d\u91cf\u5927\n\n\u56e0\u4e3ai->i+1\u8d39\u7528\u4e3a0\n\n\u53ea\u6709l->r\u6709\u8d39\u7528\n\n\u800c\u4e14\u8d39\u7528\u4e3a\u533a\u95f4\u957f\u5ea6\n\n\u6240\u4ee5\u8dd1\u6700\u5927\u8d39\u7528\u4e5f\u5c31\u662f\u6c42\u6700\u957f\u533a\u95f4**\n\n    \n    \n    \n    \n```cpp\n    #include <algorithm>\n    #include <iostream>\n    #include <cstring>\n    #include <cstdio>\n    #include <vector>\n    #include <queue>\n    #define ul unsigned long long\n    #define rg register int\n    #define ll long long\n    #define il inline\n    #define INF 2147483647\n    #define SZ 10000000\n    using namespace std;\n    int n,N,k,s,t,a[SZ],l[SZ],r[SZ];\n```\n/\\*\nN : \u539f\u6570\u7ec4\u5927\u5c0f\n\nn : \u79bb\u6563\u5316\u4e4b\u540e\u7684\u6570\u7ec4\u5927\u5c0f\n\na[] : \u79bb\u6563\u6570\u7ec4\n\nk : \u53ef\u91cd\u8fed\u6570\n\nl , r \u6240\u7ed9\u533a\u95f4\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\n\n\\*/\n```cpp\n    struct Edge{int to,nxt,w,c;}e[SZ];\n    int Ehead[SZ],pv[SZ],pe[SZ],Ecnt=2;\n    il void Eadd(int u,int v,int w,int cost)\n    {\n        e[Ecnt]=(Edge){v,Ehead[u],w,cost};\n        Ehead[u]=Ecnt++;\n        e[Ecnt]=(Edge){u,Ehead[v],0,-cost};\n        Ehead[v]=Ecnt++;\n    }\n```\n/\\*\n\u52a0\u8fb9\u51fd\u6570\n\npv[i] : spfa\u65f6\u4f7f\u5f97i\u70b9dis\u503c\u677e\u5f1b\u7684\u8282\u70b9\n\n(\u6700\u77ed\u8def\u7684\u4e0a\u4e00\u8282\u70b9)\n\npe[i] : i\u4e0epv[i]\u8fde\u63a5\u7684\u8fb9\n\ne[i].w : \u6d41\u91cf\n\ne[i].c : \u8d39\u7528\n\n\\*/\n        \n```cpp\n    // \u8d39\u7528\u6d41\u677f\u5b50 '_'\u2193\u2193\u2193\n    ll dis[SZ];\n    int vis[SZ];\n    queue <int> Q;\n    bool spfa()\n    {\n        memset(dis,63,sizeof(dis));\n        dis[s]=0; Q.push(s);\n        while(!Q.empty())\n        {\n            rg u=Q.front();\n            Q.pop();\n            for(rg i=Ehead[u];i;i=e[i].nxt)\n            {\n                rg v=e[i].to;\n                if((e[i].w)&&(dis[v]>dis[u]+e[i].c))\n                {\n                    dis[v]=dis[u]+e[i].c;\n                    pe[v]=i;\n                    pv[v]=u;\n                    if(!vis[v])\n                    {\n                        vis[v]=1;\n                        Q.push(v);\n                    }\n                }\n            }\n            vis[u]=0;\n        }    \n        return dis[t]<dis[0];\n    }\n    il void costflow()\n    {\n        ll Ans=0;\n        while(spfa())\n        {\n            rg di=INF;\n            for(rg i=t;i!=s;i=pv[i])\n             di=min(di,e[pe[i]].w);\n            for(rg i=t;i!=s;i=pv[i])\n            {\n                e[pe[i]].w-=di;\n                e[pe[i]^1].w+=di;\n                Ans+=1ll*di*e[pe[i]].c;\n            }\n        }\n        printf(\"%lld\",-Ans);\n    }\n    // \u8d39\u7528\u6d41\u677f\u5b50 '_'\u2191\u2191\u2191\n    int main()\n    {\n        scanf(\"%d%d\",&N,&k);\n        for(rg i=1;i<=N;++i)\n        {\n            scanf(\"%d%d\",&l[i],&r[i]);\n            if(l[i]>r[i]) swap(l[i],r[i]);\n            a[i]=l[i];a[i+N]=r[i];\n        }\n        sort(a+1,a+N+N+1);\n        n=unique(a+1,a+N+N+1)-a-1;\n        for(rg i=1;i<=N;++i)\n        {\n            rg L=lower_bound(a+1,a+n+1,l[i])-a;\n            rg R=lower_bound(a+1,a+n+1,r[i])-a;\n            Eadd(L,R,1,l[i]-r[i]);\n        }\n```\n/\\*\n\u5229\u7528unique\u548clower\\_bound\u79bb\u6563\u5316\n\n\u539f\u7406\u662f\u628a\u8f93\u5165\u5230l[i]\u4e0er[i]\u51fa\u73b0\u7684\u6240\u6709\u6570\u5b57\n\n\u6392\u5b8c\u5e8f\u540e\u5229\u7528unique\u53bb\u91cd\n\n\u6ce8\u610f\u90a3\u4e9b+1-1\u4ec0\u4e48\u7684\n\n\\*/\n```cpp\n        for(rg i=1;i<n;++i)\n         Eadd(i,i+1,INF,0);\n        s=n+1;t=n+2;\n        Eadd(s,1,k,0);\n        Eadd(n,t,k,0);\n        costflow();\n        while(1);\n        return 0;\n}\n```",
        "postTime": 1514984808,
        "uid": 47725,
        "name": "stdlifg",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u5efa\u6a21\u65b9\u6cd5\u4e00\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/12259.png) \n\n\u5efa\u6a21\u65b9\u6cd5\u4e8c\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/12260.png) \n\n\u4ee3\u7801\u94fe\u63a5\uff1a\n\nhttp://www.cnblogs.com/TheRoadToTheGold/p/8080899.html\n",
        "postTime": 1513852104,
        "uid": 21351,
        "name": "xuxinyu",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u56e0\u4e3a\u4e00\u4e2azz\u9519\u8bef\u8c03\u4e86\u4e00\u4e2a\u65e9\u4e0a\u2026\u2026\u6c47\u70b9\u5199\u9519\u4e86\u2026\u2026spfa\u4e5f\u5199\u9519\u4e86\u2026\u2026\n\n\u697c\u4e0a\u5927\u4f6c\u4eec\u8bf4\u7684\u90fd\u633a\u6e05\u695a\u4e86\u2026\u2026\u6211\u5c31\u6765\u8bb2\u8bb2\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684\u5427\u2026\u2026\n\n\u505a\u6cd5\uff1a\u628a\u6570\u8f74\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u5411\u5b83\u53f3\u8fb9\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a$k$\uff0c\u8d39\u7528\u4e3a$0$\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u5411\u53f3\u7aef\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a$1$\uff0c\u8d39\u7528\u4e3a\u533a\u95f4\u957f\u5ea6\uff0c\u7136\u540e\u6c42\u4e00\u4e2a\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u3002\u56e0\u4e3a\u5750\u6807\u592a\u5927\uff0c\u8bb0\u5f97\u79bb\u6563\n\n\u7136\u800c\u5e76\u4e0d\u662f\u5f88\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u662f\u5bf9\u7684\u2026\u2026\u60f3\u4e86\u60f3\uff0c\u628a\u7f51\u7edc\u6d41\u5f53\u6210\u4e00\u4e2a\u6c34\u6d41\u597d\u4e86\uff0c\u6c34\u4ece\u5de6\u6d41\u5230\u53f3\uff0c\u90a3\u4e48\u5982\u679c\u662f\u5728\u4e00\u4e2a\u533a\u95f4\u5185\uff0c\u4e0d\u53ef\u80fd\u6ee1\u6d41\uff08\u56e0\u4e3a\u88ab\u533a\u95f4\u5de6\u7aef\u70b9\u81f3\u53f3\u7aef\u70b9\u90a3\u4e00\u6761\u8fb9\u7ed9\u5206\u53bb\u4e86\u4e00\u90e8\u5206\u6d41\uff09\uff0c\u4f46\u662f\u88ab\u5206\u53bb\u7684\u90a3\u4e00\u90e8\u5206\u6d41\u4f1a\u5728\u533a\u95f4\u53f3\u7aef\u70b9\u88ab\u6d41\u56de\u6765\uff0c\u6240\u4ee5\u4e0d\u60f3\u4ea4\u7684\u533a\u95f4\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff08\u56e0\u4e3a\u662f\u5f00\u533a\u95f4\uff0c\u6240\u4ee5\u53f3\u7aef\u70b9\u548c\u53e6\u4e00\u533a\u95f4\u5de6\u7aef\u70b9\u91cd\u5408\u5e76\u6ca1\u6709\u5f71\u54cd\uff09\u3002\u7136\u540e\u5982\u679c\u533a\u95f4\u5185\u8fd8\u6709\u5176\u4ed6\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u53c8\u4f1a\u5206\u6d41\uff0c\u4e00\u76f4\u8fd9\u6837\u4e0b\u53bb\uff0c\u76f4\u5230\u6709\u8d85\u8fc7$k$\u4e2a\u533a\u95f4\u8986\u76d6\u4e86\u540c\u4e00\u70b9\uff0c\u90a3\u6837\u6d41\u5c31\u4e0d\u591f\u4e86\uff0c\u4e0d\u4f1a\u518d\u5206\uff08\u56e0\u4e3a\u4ece\u6e90\u70b9\u4e5f\u53ea\u6709$k$\u7684\u6d41\uff09\uff0c\u90a3\u4e48\u53ea\u8981\u6c42\u51fa\u4e86\u4e00\u4e2a\u6700\u5927\u6d41\uff0c\u5c31\u662f\u4e00\u4e2a\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u7684\u65b9\u6848\u3002\u53c8\u56e0\u4e3a\u8981\u4f7f\u957f\u5ea6\u6700\u5927\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u8ba9\u533a\u95f4\u7684\u6d41\u5e26\u4e0a\u8d39\u7528\uff0c\u6c42\u4e00\u4e2a\u6700\u5927\u8d39\u7528\u6d41\u5373\u53ef",
        "postTime": 1534728209,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u5efa\u56fe\u65b9\u6cd5\u5982\u4e0b\uff1a\n\n- s~t \u6240\u6709\u7684\u70b9\u5411\u4e0b\u4e00\u4e2a\u70b9\u5efa\u6d41\u91cf\u4e3a k\uff0c\u8d39\u7528\u4e3a 0 \u7684\u8fb9\u3002\n\n- \u6309\u7167\u6240\u7ed9\u7684\u533a\u95f4 l \u5411 r \u5efa\u6d41\u91cf\u4e3a 1\uff0c\u8d39\u7528\u4e3a\u533a\u95f4\u957f\u5ea6\u7684\u8fb9\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5efa\u56fe\u662f\u6b63\u786e\u7684\u5462\uff1f\u6211\u4eec\u5206\u522b\u770b\u4e00\u4e0b\u51e0\u4e2a\u9650\u5236\u6761\u4ef6\uff1a\n\n- ### \u6bcf\u4e2a\u533a\u95f4\u53ea\u80fd\u7528\u4e00\u6b21\u3002\n\n\u6211\u4eec\u5728\u5efa\u533a\u95f4\u65f6\uff0c\u9650\u5236\u6d41\u91cf\u4e3a 1\uff0c\u8fd9\u6837\u6bcf\u4e2a\u533a\u95f4\u80af\u5b9a\u53ea\u80fd\u88ab\u7528\u4e00\u6b21\u5566\u3002\n\n- ### \u6bcf\u4e2a\u70b9\u6700\u591a\u9009\u4e2d k \u6b21\u3002\u5728\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u6c42\u9009\u51fa\u7684\u533a\u95f4\u957f\u5ea6\u6700\u5927\u3002\n\n\u8fd9\u4e2a\u600e\u4e48\u8bc1\u660e\u5462\uff1f\u6211\u4eec\u60f3\u4e00\u4e0b\u4e00\u4e2a\u6d41\u91cf\u4e3a 1 \u7684\u589e\u5e7f\u8def\uff0c\u5927\u6982\u4f1a\u50cf\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/j4kiys8f.png)\n\n\u84dd\u8272\u4ee3\u8868\u7b2c\u4e00\u79cd\u8fb9\uff0c\u7ea2\u8272\u4ee3\u8868\u7b2c\u4e8c\u79cd\u8fb9\uff0c\u84dd\u7d2b\u8272\u4ee3\u8868\u589e\u5e7f\u8def\u3002\n\n\u8fd8\u6709\u4e00\u79cd\u589e\u5e7f\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/21fjpqn4.png)\n\n\u7eff\u8272\u7684\u5373\u4e3a\u589e\u5e7f\u8def\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4ec0\u4e48\uff1f\u6bcf\u4e00\u6b21\u6700\u5927\u6d41\uff0c\u9009\u62e9\u7684\u5b9e\u9645\u4e0a\u662f\u5f53\u524d\u6240\u6709\u533a\u95f4\u4e2d **\u6ca1\u6709\u4ea4\u96c6** \u4e14\u957f\u5ea6\u4e4b\u548c\u6700\u5927\u7684\u82e5\u5e72\u533a\u95f4\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6d41\u91cf\u4e3a 1 \u7684\u6700\u77ed\u8def\u6700\u591a\u53ea\u4f1a\u628a\u6bcf\u4e2a\u70b9\u7684\u9009\u4e2d\u6b21\u6570\u589e\u52a0 1\u3002\u90a3\u4e48 s \u6d41\u51fa\u7684\u6700\u5927\u6d41\u91cf\u4e3a k\uff0c\u5219\u6574\u5f20\u56fe\u6700\u5927\u6d41\u4e3a k\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u88ab\u9009\u4e2d k \u6b21\uff0c\u800c\u4e14\u6211\u4eec\u4f7f\u7528\u4e86\u8d39\u7528\u6d41\uff0c\u5219\u6700\u540e\u6c42\u51fa\u7684\u7b54\u6848\u4e00\u5b9a\u662f\u6700\u5927\u7684\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int N=1010,M=1e5,inf=1e9+7;\nint n,k,s,t,cnt=1,ans,tot,li[N],ri[N],h[N],dis[N],pre[N],flow[N],b[N];\nbool in[N];\nint rd(){\n\tint x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9') c=getchar();\n\twhile(c<='9'&&c>='0') x=x*10+c-'0',c=getchar();\n\treturn x;\n}\nvoid pd(int x){\n\tint s[20],top=0;\n\twhile(x>0) s[++top]=x%10,x/=10;\n\tif(!top) s[++top]=0;\n\twhile(top>0) putchar('0'+s[top--]);\n\tprintf(\"\\n\");\n}\nqueue<int>q;\nstruct edge{int fr,to,nex,cap,len;}e[M];\nvoid add(int u,int v,int w1,int w2){\n\te[++cnt].to=v;\n\te[cnt].fr=u;\n\te[cnt].nex=h[u];\n\te[cnt].cap=w1;\n\te[cnt].len=w2;\n\th[u]=cnt;\n\te[++cnt].to=u;\n\te[cnt].fr=v;\n\te[cnt].nex=h[v];\n\te[cnt].cap=0;\n\te[cnt].len=-w2;\n\th[v]=cnt;\n}\nbool spfa(){\n\tfor(int i=s;i<=t;i++) dis[i]=inf,flow[i]=0;\n\tdis[s]=0,flow[s]=inf;\n\tq.push(s);\n\tin[s]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tin[u]=0;\n\t\tq.pop();\n\t\tfor(int i=h[u];i;i=e[i].nex){\n\t\t\tint v=e[i].to;\n\t\t\tint d=dis[u]+e[i].len,f=min(flow[u],e[i].cap);\n\t\t\tif(!f) continue;\n\t\t\tif(d<dis[v]||(d==dis[v]&&f>flow[v])){\n\t\t\t\tdis[v]=d;\n\t\t\t\tflow[v]=f;\n\t\t\t\tpre[v]=i;\n\t\t\t\tif(!in[v]){\n\t\t\t\t\tin[v]=1;\n\t\t\t\t\tq.push(v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(!flow[t]) return 0;\n\tans=ans+dis[t]*flow[t];\n\tfor(int i=t;i;i=e[pre[i]].fr){\n\t\te[pre[i]].cap-=flow[t];\n\t\te[pre[i]^1].cap+=flow[t];\n\t}\n\treturn 1;\n}\nint main(){\n\tn=rd(),k=rd();\n\tfor(int i=1;i<=n;i++){\n\t\ttot++,li[i]=b[tot]=rd();\n\t\ttot++,ri[i]=b[tot]=rd();\n\t}\n\tsort(b+1,b+1+tot);\n\ttot=unique(b+1,b+1+tot)-b-1;\n\ts=0,t=tot+1;\n\tfor(int i=1;i<=n;i++){\n\t\tint len=ri[i]-li[i];\n\t\tli[i]=lower_bound(b+1,b+1+tot,li[i])-b;\n\t\tri[i]=lower_bound(b+1,b+1+tot,ri[i])-b;\n\t\tadd(li[i],ri[i],1,-len);\n\t}\n\tfor(int i=0;i<t;i++) add(i,i+1,k,0);\n\twhile(spfa());\n\tpd(-ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1582425398,
        "uid": 55405,
        "name": "\u9752\u7fbd\u540c",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u3010\u9898\u610f\u3011\n\u7ed9\u51fan\u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u6743\u503c\u4e3a\u533a\u95f4\u957f\u5ea6\u3002\u6c42\u4e00\u79cd\u53d6\u533a\u95f4\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6570\u6700\u591a\u88ab\u53d6k\u6b21\uff0c\u4e14\u6743\u503c\u548c\u6700\u5927\u3002\n\n\n\u3010\u601d\u8def\u3011\n\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u3002\n\n\u8fde\u8fb9\u65b9\u6cd5\uff1a\n\ni -> i+1,\u5bb9\u91cf\u4e3ak\uff0c\u8d39\u7528\u4e3a0\n\n\u5bf9\u6bcf\u4e2a\u533a\u95f4\uff0cleft -> right\uff0c\u5bb9\u91cf\u4e3a1\uff0c\u8d39\u7528\u4e3a-1*\u533a\u95f4\u957f\u5ea6\n\n\uff08\u8981\u6c42\u7684\u662f\u6700\u5927\u6743\u503c\uff0c\u6545\u8fde\u8d1f\u8fb9\uff09\n\n\u8dd1mcf\uff0c\u8f93\u51fa\u6700\u5c0f\u8d39\u7684\u76f8\u53cd\u6570\u5373\u53ef\u3002\n\n\n\n\u3010\u4f18\u5316\u3011\n\n\u7528\u4e0a\u9762\u7684\u7b97\u6cd5\u53ef\u4ee5\u5f97\u523063\u5206\u3002\u4e3a\u4ec0\u4e48\u4f1aTLE\u6700\u540e\u56db\u4e2a\u70b9\uff1f\n\n\n\u8bbe\u60f3\u6709\u4e00\u4e2a\u533a\u95f4\u662f[1,10000000],\u90a3\u4e48\u6211\u4eec\u7684\u7b97\u6cd5\u5c31\u9700\u8981\u8fde10000000\u6761\u8fb9\uff0c10000000\u4e2a\u70b9\u3002\u8fd9\u4f1a\u5bfc\u81f4\u7b97\u6cd5TLE\n\n\u4e8e\u662f\u505a\u4e00\u4e2a\u79bb\u6563\u5316\u5373\u53efAC\n\n\u3010\u4ee3\u7801\u3011\n\n```cpp\n#include<iostream>\n#include <algorithm>\nconst int maxn=50005,maxm=500005,inf=1<<30;\nusing namespace std;\n//\u90bb\u63a5\u8868\u5b58\u8fb9\nstruct Node\n{\n    int v,c,w;\n    Node *next,*rev;\n}pool[maxm],*h[maxn],*pree[maxn];\n\nint n,m,s,t,tot,src,sink;\nint dis[maxn],q[maxn],prev[maxn];\nbool vis[maxn];\nint ls[maxm],lsh[maxn];\nint Left[maxn],Right[maxn];\nint pas[maxn];\nint tots=0,totl=0;\n//\u589e\u52a0\u8fb9\nvoid addEdge(int u,int v,int c,int w)\n{\n//\tcout<<u<<' '<<v<<' '<<c<<' '<<w<<endl;\n    Node *p=&pool[++tot],*q=&pool[++tot];\n    p->v=v; p->c=c; p->w=w; p->next=h[u]; p->rev=q; h[u]=p;\n    q->v=u; q->c=0; q->w=-w; q->next=h[v]; q->rev=p; h[v]=q;\n}\n//\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u6a21\u677f\nbool spfa(){\n    for(int i=1;i<maxn;i++) dis[i]=1<<30;\n    for(int i=1;i<maxn;i++) vis[i]=0;\n    int front=0,rear=0;\n    vis[src]=1,dis[src]=0;\n    q[rear++]=src;\n    while(front<rear)\n    {\n        int u=q[front++];\n        vis[u]=0;\n        for(Node *p=h[u];p;p=p->next)\n        {\n            if(p->c>0 && dis[p->v]>dis[u]+p->w)\n            {\n                dis[p->v]=dis[u]+p->w;\n                prev[p->v]=u;\n                pree[p->v]=p;\n                if(!vis[p->v])\n                {\n                    vis[p->v]=1;\n                    q[rear++]=p->v;\n                }\n            }\n        } \n    }\n    if(dis[sink]<inf) return true;\n    return false;\n}\n\nint augment(){\n    int u=sink;\n    int delta=inf;\n    while(u!=src)\n    {\n        delta=min(delta,pree[u]->c);\n        u=prev[u];\n    }\n    u=sink;\n    while(u!=src)\n    {\n        pree[u]->c-=delta;\n        pree[u]->rev->c+=delta;\n        u=prev[u];\n    }\n    return delta;\n}\nint ans1, ans2;\nvoid mincostflow()\n{\n    int delta=0;\n    while(spfa()==true)\n    {\n        delta=augment();\n        ans1+=delta;//\u6700\u5927\u6d41\n        ans2+=delta*dis[sink];//\u6700\u5c0f\u8d39\n    }\n}\n\nint main()\n{\n\tint K;\n\tcin>>n>>K;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>Left[i]>>Right[i];\n\t\tls[++tots]=Left[i];//\u79bb\u6563\u5316\n\t\tls[++tots]=Right[i];\n\t\tpas[i]=Right[i]-Left[i];\n\t}\n\tsort(ls+1,ls+tots+1);\n\tfor(int i=1;i<=tots;i++)\n\t{\n\t\tif(ls[i]!=ls[i-1]) lsh[++totl]=ls[i];//\u5e94\u8be5\u4e5f\u53ef\u4ee5\u7528unique\u4ee3\u66ff\uff0c\u4f46\u672c\u4eba\u592a\u849f\u84bb\u4e0d\u4f1a\u5e93\u51fd\u6570\n\t}\n\t//for(int i=1;i<=totl;i++)\n\t//{\n\t//\tcout<<\"match \"<<i<<' '<<lsh[i]<<endl;//\u9a8c\u8bc1\u79bb\u6563\u5316\u6b63\u786e\u6027\n\t//}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=totl;j++)\n\t\t{\n\t\t\tif(Left[i]==lsh[j]) Left[i]=j;\n\t\t\tif(Right[i]==lsh[j]) Right[i]=j;\n\t\t}\n\t}\n    //\u6309\u4e0a\u8ff0\u65b9\u6cd5\u5efa\u8fb9\uff0csrc\u4e3a\u539f\u70b9\uff0csink\u4e3a\u6c47\u70b9\n    src=0;\n    for(int i=1;i<=n;i++)\n    {\n        sink=max(sink,Right[i]);\n        addEdge(Left[i], Right[i], 1,-pas[i]);\n    }\n    for(int i=1;i<=sink-1;i++)\n    {\n        addEdge(i,i+1,K,0);\n    }\n    addEdge(src,1,K,0);\n    addEdge(sink,sink+1,K,0);\n    sink++;\n    mincostflow();\n    cout<<-1*ans2<<endl;//\u8bb0\u5f97\u6700\u540e\u53d6\u76f8\u53cd\u6570\n    return 0;\n}\n```\n\ndone",
        "postTime": 1526093363,
        "uid": 38212,
        "name": "mydiplomacy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "UPD on 8/14\uff1a \u628a\u7ebf\u6027\u89c4\u5212\u90a3\u90e8\u5206\u5185\u5bb9\u7684\u9505\u4fee\u4e86\u3002\n\n---\n\u6211\u7a0d\u5fae\u8bf4\u4e00\u4e0b\u6211\u5bf9\u8fd9\u9053\u9898\u76ee\u7684\u7406\u89e3\u5427\u3002\n\n\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u6570\u8f74\uff08\u5373\u533a\u95f4\u8981\u8986\u76d6\u7684\u4e1c\u897f\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u70b9\u90fd\u9700\u8981\u6ee1\u8db3\u81ea\u5df1\u88ab\u8986\u76d6\u4e0d\u8d85\u8fc7 $k$ \u6b21\u3002\u4f46\u662f\u8fd9\u662f\u4e2a\u975e\u5e38\u9759\u6001\u7684\u4e1c\u897f\uff0c\u4e0d\u5927\u9002\u5408\u7528\u7f51\u7edc\u6d41\u53bb\u6a21\u62df\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u95ee\u9898\u201c\u52a8\u6001\u5316\u201d\u3002\n\n\u600e\u4e48\u52a8\u6001\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u53ef\u4ee5\u770b\u6210\u4e0d\u65ad\u5730\u52a0\u5165\u533a\u95f4\u7136\u540e\u53e0\u52a0\u8d77\u6765\u3002\u9996\u5148\uff0c\u6211\u4eec\u770b\u5230\u6bcf\u4e2a\u70b9\u7684 $k$ \u9650\u5236\u7c7b\u4f3c\u4e8e\u5bb9\u91cf\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u62c6\u70b9\uff0c\u70b9\u5bb9\u91cf\u8f6c\u5316\u4e3a\u8fb9\u5bb9\u91cf\u3002\u6bcf\u4e00\u4e2a\u533a\u95f4\u52a0\u5165\u8fdb\u6765\uff0c\u5373\u6c34\u6d41\u4ece\u6e90\u70b9\u6d41\u5230 $l$ \u6765\uff0c\u7136\u540e\u518d\u4ece $r$ \u79bb\u5f00\uff0c\u5373\u6d41\u5411\u6c47\u70b9\uff0c\u4ee5\u4e0a\u975e\u5e38\u597d\u7406\u89e3\uff0c\u4e0d\u8fc7\u662f\u4e0d\u80fd\u505a\u7684\uff0c\u56e0\u4e3a\u79bb\u6563\u5316\u540e\u8fd9\u4e2a\u4ee3\u4ef7\u4e0d\u597d\u7b97\uff0c\u800c\u4e14\u8fd8\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6d41\u8fdb\u6765\u7684 $l$ \u4e00\u5b9a\u4ece\u81ea\u5df1\u5bf9\u5e94\u7684 $r$ \u6d41\u51fa\u53bb\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u5bf9\u540e\u9762\u7684\u89e3\u6cd5\u6709\u5f88\u5927\u7684\u5e2e\u52a9\u548c\u542f\u53d1\u3002\u6211\u4eec\u653e\u4e00\u4e0b\u56fe\u3002\n\n![image.png](https://i.loli.net/2020/08/08/WdTOae3rU9jVCSP.png)\n\n\u4e0a\u9762\u62c6\u70b9\u548c\u628a $k$ \u8bbe\u4e3a\u5bb9\u91cf\u7684\u601d\u8def\u6b63\u89e3\u8fd8\u53ef\u4ee5\u7528\u3002\n\n\u5176\u4e2d\u6bcf\u79cd\u989c\u8272\u7684\u6d41\u5165\u548c\u6d41\u51fa\u5bf9\u5e94\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u65e2\u7136\u53e0\u52a0\u4e0d\u884c\uff0c**\u6211\u4eec\u53cd\u8fc7\u6765\uff0c\u8003\u8651\u4ece $k$ \u4e2d\u5265\u79bb**\u3002\u4ec0\u4e48\u53eb\u5265\u79bb\u5462\uff1f\u6211\u4eec\u5f62\u8c61\u5316\u4e00\u4e0b\uff0c\u628a\u8fd9\u9053\u9898\u60f3\u8c61\u6210\u6709 $k$ \u4e2a\u4eba\u548c $m$ \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u7684\u65f6\u95f4\u7684\u5f00\u533a\u95f4\u4e3a  $l,r$\u3002\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u662f\u8fd9\u6837\u5b89\u6392\u7684\uff0c\u7b2c $l$ \u65f6\u95f4\u6765\u4e00\u4e2a\u4eba\uff0c\u7136\u540e\u7b2c $r+1$ \u65f6\u95f4\u518d\u8fd8\u56de\u6765\uff0c\u7136\u540e\u7ed9\u4f60 $len$ \u7684\u6536\u76ca\u3002\u8fd9\u6837\u7684\u8bdd\u4e00\u5207\u5c31\u597d\u505a\u5f88\u591a\u4e86\u3002\u5176\u4e2d\u4eba\u6570\u6211\u4eec\u8f6c\u5316\u6210\u5bb9\u91cf\uff0c\u7136\u540e\u4ece\u4e2d\u62ff\u4e00\u4e2a\u4eba\u51fa\u6765\u7136\u540e\u7b2c $r+1$ \u5206\u949f\u6362\u56de\u6765\u8fd9\u4e2a\u64cd\u4f5c\u8f6c\u5316\u6210\u4ece $l$ \u5230 $r+1$ \u7684\u8fb9\u3002\u4e0a\u56fe\u5bf9\u5e94\u7684\u6b64\u79cd\u89e3\u6cd5\u7684\u56fe\u5982\u4e0b\u3002\n\n![image.png](https://i.loli.net/2020/08/08/hMT1aZ8P5WjpFn4.png)  \n\uff08\u5f88\u5f62\u8c61\u4e86\u5427 qwq\uff09\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u4ee3\u8868\u7684\u8fb9\uff0c\u8d39\u7528\u4e3a len\uff0c\u5176\u4ed6\u8fb9\u8d39\u7528\u4e3a 0\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\u6ce8\u610f\u8981\u79bb\u6563\u5316\u3002\n\n\u6211\u4e2a\u4eba\u89c9\u5f97\u6709\u4e00\u4e9b\u7f51\u7edc\u6d41\u95ee\u9898\u7684\u6d41\u91cf\u53bb\u5f62\u8c61\u5316\u53ef\u4ee5\u6709\u66f4\u597d\u7684\u7406\u89e3\u548c\u601d\u8def\uff0c\u56e0\u4e3a\u7f51\u7edc\u6d41\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u8fc7\u7a0b\uff08\u8fd9\u4e2a\u5355\u4f4d\u7684\u6c34\u6d41\u5e94\u8be5\u5f80\u54ea\u91cc\u8d70\uff09\u3002\u6709\u65f6\u5019\u628a\u7f51\u7edc\u6d41\u95ee\u9898\u53bb\u4ee3\u6570\u5316\u662f\u4e2a\u975e\u5e38\u597d\u7684\u9009\u62e9\uff0c\u4f46\u662f\u6709\u4e9b\u65f6\u5019\u53cd\u5176\u9053\u800c\u884c\u4e4b\u53bb\u5f62\u8c61\u5316\u8bf4\u4e0d\u5b9a\u4f1a\u6709\u66f4\u597d\u7684\u601d\u8def\u548c\u7406\u89e3\u5462~\u3002\n\n\u590d\u6742\u5ea6\u7684\u8bdd\uff0c\u70b9\u6570 $O(n)$\uff0c\u8fb9\u6570 $O(n)$\uff0c\u6d41\u91cf\u662f $k$\uff0c\u6240\u4ee5\u7406\u8bba\u590d\u6742\u5ea6\u8fd8\u662f $O(n^2k)$\uff0c\u5b9e\u9645\u590d\u6742\u5ea6\u662f\u7f51\u7edc\u6d41\u7684\u7384\u5b66\u590d\u6742\u5ea6\u3002\n\n---\n\n\u4e0a\u9762\u63d0\u5230\u4e86\u628a\u7f51\u7edc\u6d41\u4ee3\u6570\u5316\u662f\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff0c\u90a3\u4e48\u6211\u8fd9\u91cc\u518d\u653e\u4e00\u4e2a\u57fa\u4e8e\u7ebf\u6027\u89c4\u5212\u7684\u7f51\u7edc\u6d41\u63a8\u5bfc\u5427\u3002\uff08\u4e0d\u60f3\u770b\u7684\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u770b\u4ee3\u7801\uff09\u3002\n\n\u8bbe $p_i$ \u4e3a\u6570\u8f74\u4e0a\u7b2c $i$ \u5904\u88ab\u51e0\u4e2a\u7ebf\u6bb5\u8986\u76d6\uff0c$x_i$ \u4e3a\u7b2c $i$ \u4e2a\u533a\u95f4\u9009\u4e0d\u9009\uff0c$z_{i,j}$ \u8868\u793a\u7b2c $i$ \u4e2a\u533a\u95f4\u8986\u4e0d\u8986\u76d6\u7b2c $j$ \u4e2a\u70b9\u3002\n\n$$\np_1=\\sum x_i\\times z_{i,1} \\le k\n$$\n$$\np_2=\\sum x_i\\times z_{i,2} \\le k\n$$\n$$\n...\n$$\n$$\np_n=\\sum x_i\\times z_{i,n} \\le k\n$$\n\n\u4e0d\u7b49\u5f0f\u8f6c\u5316\u4e3a\u7b49\u5f0f\u3002\n\n$$\np_1=(\\sum x_i\\times z_{i,1})+y_1 = k\n$$\n$$\np_2=(\\sum x_i\\times z_{i,2})+y_2 = k\n$$\n$$\n...\n$$\n$$\np_n=(\\sum x_i\\times z_{i,n})+y_n = k\n$$\n\n\u5176\u4e2d $y$ \u7684\u8303\u56f4\u662f $0\\le y\\le k$\u3002\n\n\u6574\u4e2a\u65b9\u7a0b\u4e2d\u5bf9\u4e8e\u4e0d\u540c\u7684 $z$ \u6bcf\u4e2a\u53d8\u91cf\u51fa\u73b0\u6b21\u6570\u4e0d\u4e00\u81f4\uff0c\u6211\u4eec\u8003\u8651\u4e0a\u4e0b\u4e24\u9879\u505a\u5dee\u5206\u3002\uff08\u5957\u8def\uff09\n\n$$\np_1-p_0=(\\sum x_i\\times z_{i,1})+y_1 = k\n$$\n$$\np_2-p_1=(\\sum x_i\\times (z_{i,2}-z_{i,1}))-y_1+y_2=0\n$$\n$$\n...\n$$\n$$\np_{n+1}-p_{n}=(\\sum x_i\\times -z_{i,n})-y_n = -k\n$$\n\n\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c$x_i\\times z_{i,j}$ \u4e0d\u4e3a $0$ \u5f53\u4e14\u4ec5\u5f53 $i=$ \u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9\uff0c\u4e14\u4e00\u6b63\u4e00\u8d1f\u3002\n\n\u7ebf\u6027\u89c4\u5212\u65b9\u7a0b\u8f6c\u6362\u4e3a\u7f51\u7edc\u6d41\u5efa\u8fb9\u5927\u81f4\u65b9\u6cd5\u662f\uff0c\u5e38\u6570\u9879\u548c\u6e90\u6c47\u8fde\u8fb9\uff0c\u7cfb\u6570\u6b63\u4ee3\u8868\u6d41\u51fa\uff0c\u7cfb\u6570\u8d1f\u4ee3\u8868\u6d41\u5165\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u5efa\u8fb9\n\n- \u5bf9\u4e8e\u5e38\u6570\u9879 $k$ \u548c $-k$\uff0c$S\\to 1,c=k; n+1\\to T, c=k$\u3002\n- \u5bf9\u4e8e $y$\uff0c$i\\to i+1, c=k$\u3002\n- \u5bf9\u4e8e $x$ \u548c $z$\uff0c$s_i\\to t_i+1, c=1$\u3002\n\n\u8003\u8651\u9898\u76ee\u6c42\u7684\u76ee\u6807\u51fd\u6570\u6700\u5c0f\u503c\uff0c\u4e8e\u662f\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n---\n \n$\\downarrow\\texttt{Finally, the code that you want.} \\downarrow$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2009,inf=0x3f3f3f3f;\ntypedef pair<int,int>pii;\n\nstruct Edge{int to,nxt,c,w;}e[N*2]; int hd[N],tot=1;\nvoid add(int u,int v,int c,int w){e[++tot]=(Edge){v,hd[u],c,w};hd[u]=tot;}\nvoid addh(int u,int v,int c,int w){add(u,v,c,w),add(v,u,0,-w);}\n\nint n,k,s,t,mflow,cost,tmp;\nint d[N]; bool in[N]; \nbool spfa(){ \n\tqueue<int>q; q.push(s); memset(d,0,sizeof(d)); d[s]=1;\n\twhile(!q.empty()) {\n\t\tint u=q.front(); q.pop(); in[u]=0;\n\t\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\t\tif(e[i].c&&d[v=e[i].to]<d[u]+e[i].w) {\n\t\t\t\td[v]=d[u]+e[i].w;\n\t\t\t\tif(!in[v]) q.push(v),in[v]=1;\n\t\t\t}\n\t}\n\treturn d[t]>0;\n}\nint dinic(int u,int flow) {\n\tint rest=flow; if(u==t) return flow; in[u]=1;\n\tfor(int i=hd[u],v;i&&rest;i=e[i].nxt)\n\t\tif(!in[v=e[i].to]&&e[i].c&&d[v]==d[u]+e[i].w) {\n\t\t\tint used=dinic(v,min(e[i].c,rest));\n\t\t\tif(!used) d[v]=-1;\n\t\t\trest-=used, e[i].c-=used, e[i^1].c+=used, cost+=used*e[i].w;\n\t\t}\n\tin[u]=0;\n\treturn flow-rest;\n}\npii flow(int ret=0,int tmp=0) {\n\twhile(spfa()) while(tmp=dinic(s,inf)) ret+=tmp;\n\treturn make_pair(ret,cost);\n}\n//\u4e0a\u9762\u4e3a\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41MCMF\u6a21\u677f \n\nstruct Interval {int l,r,len;}a[N]; \nstruct Num {int id,lr,val;}num[N]; int cnum;\nbool cmp(const Num &a,const Num &b) {\n\treturn a.val<b.val;\n}\n\nint main() {\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++) {\n\t\tscanf(\"%d%d\",&a[i].l,&a[i].r); a[i].len=a[i].r-a[i].l;\n\t\tnum[i]=(Num){i,0,a[i].l}, num[i+n]=(Num){i,1,a[i].r};\n\t} \n\tsort(num+1,num+2*n+1,cmp);\n\tfor(int i=1;i<=n;i++) {\n\t\tscanf(\"%d%d\",&a[i].l,&a[i].r);\n\t\tif(a[i].l>a[i].r) swap(a[i].l,a[i].r);\n\t\ta[i].len=a[i].r-a[i].l;\n\t\tnum[i]=(Num){i,0,a[i].l}, num[i+n]=(Num){i,1,a[i].r};\n\t}\n\t//\u4e0a\u9762\u4e3a\u8bfb\u5165+\u79bb\u6563\u5316 \n\ts=cnum+1, t=cnum+2;\n\tfor(int i=1;i<cnum;i++) addh(i,i+1,k,0);\n\taddh(s,1,k,0), addh(cnum,t,k,0);\n\tfor(int i=1;i<=n;i++)\n\t\taddh(a[i].l,a[i].r,1,a[i].len);\n\t//\u4e0a\u9762\u4e3a\u5efa\u8fb9 \n\tprintf(\"%d\",flow().second);\n\treturn 0;\n}\n```",
        "postTime": 1596957343,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u9898\u89e3\u600e\u4e48\u6e05\u4e00\u8272\u7684\u90fd\u662f\u79bb\u6563\u5316\u8fde\u8ddd\u79bb\u7684...\u849f\u84bb\u524d\u6765\u8d21\u732e\u4e00\u53d1\u53e6\u7c7b\u601d\u8def\u7684\u8d39\u7528\u6d41\u89e3\u6cd5QWQ\n\n\u8003\u8651\u7528\u6700\u5c0f\u8def\u5f84\u8986\u76d6\u7684\u601d\u8def\u89e3\u8fd9\u9053\u9898\u3002\u5c06\u6bcf\u4e2a\u533a\u95f4\u62bd\u8c61\u6210\u4e00\u6761\u7ebf\u6bb5\uff08~~\u8fd9\u4e0d\u5c31\u662f[P3357 \u6700\u957fk\u53ef\u91cd\u7ebf\u6bb5\u96c6\u95ee\u9898](https://www.luogu.org/problemnew/show/P3357)\u4e48~~\uff09\u7136\u540e\u628a\u7ebf\u6bb5\u7684\u96c6\u5408\u5206\u5c42\uff0c\u6bcf\u5c42\u7684\u7ebf\u6bb5\u96c6\u5408\u4e2d\u7684\u7ebf\u6bb5\u4e92\u4e0d\u76f8\u4ea4\uff0c\u603b\u5171\u6700\u591a\u53e0$k$\u5c42\uff0c\u6c42\u6700\u5927\u6536\u76ca\u3002\u53ef\u4ee5\u8bc1\u660e\u653e\u7b2c$i$\u5c42\u65f6\uff0c\u5176\u4e2d\u7684\u7ebf\u6bb5\u4e00\u5b9a\u4e0e\u524d$i-1$\u5c42\u6709\u76f8\u4ea4\u90e8\u5206\u3002\n\n### \u8bc1\u660e\uff1a\u8d39\u7528\u6d41\u91c7\u7528\u7684\u662f\u6700\u77ed\u8def\uff0c\u6bcf\u6b21\u5bfb\u627e\u5230\u7684\u4e00\u6761\u8def\u5f84\u4e00\u5b9a\u662f\u5f53\u524d\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u6536\u76ca\uff0c\u5982\u679c\u653e\u7b2c$i$\u5c42\u65f6\u6709\u7ebf\u6bb5\u548c\u524d$i-1$\u5c42\u4e0d\u76f8\u4ea4\uff0c\u5219\u5728\u524d$i-1$\u7684\u67d0\u5c42\u653e\u7f6e\u8fd9\u6761\u7ebf\u6bb5\u53ef\u4ee5\u5728\u8be5\u5c42\u53d6\u5f97\u66f4\u5927\u7684\u6536\u76ca\uff0c\u8fd9\u4e0e\u6700\u77ed\u8def\u7b97\u6cd5\u77db\u76fe\uff0c\u8bc1\u6bd5\u3002~~\uff08\u611f\u89c9\u597d\u50cf\u5f88\u5947\u602a\u7684\u6837\u5b50\uff09~~\n\n\u8fd9\u6837\u201c\u8d2a\u5fc3\u201d\u5730\u627e\u5230\u6700\u540e\u7b2c$k$\u5c42\uff0c\u5f97\u5230\u6536\u76ca\u4e00\u5b9a\u6700\u5927\u3002\uff08\u5230\u8fd9\u91cc\u601d\u8def\u8bf4\u5b8c\u4e86\uff0c\u6709\u5174\u8da3\u7684\u5927\u4f6c\u4eec\u53ef\u4ee5\u81ea\u884c\u601d\u8003\u5b9e\u73b0\u95ee\u9898\uff09\n\n\u8003\u8651\u4ee3\u7801\u5b9e\u73b0\u3002\u5c06\u7ebf\u6bb5\u7f29\u6210\u70b9\u5e76\u62c6\u6210**\u4e24\u4e2a\u70b9$x_{i}$\u548c$y_{i}$**\u3002\n- \u8d85\u7ea7\u6e90\u70b9\u5411$S$\uff08\u8fd9\u4e2a\u70b9\u4e0d\u662f\u8d85\u7ea7\u6e90\u70b9\uff0c\u53ea\u662f\u4e2a\u4e2d\u8f6c\u7ad9\uff0c\u8d1f\u8d23\u9650\u6d41\uff0c\u5176\u5b9e\u8981\u4e0d\u8981\u65e0\u6240\u8c13~~\u5f53\u65f6\u6211\u8111\u62bd\u4e86~~\uff09\u8fde\u63a5$flow=k,cost=0$\u7684\u8fb9\n- \u4ece$S$\u5411$x_{i}$\u8fde$flow=1,cost=0$\u7684\u8fb9\n- $x_{i}$\u5411$y_{i}$\u8fde$flow=1,cost=-length_{i}$\u7684\u8fb9\n- $y_{i}$\u5411\u4e0e\u81ea\u5df1\u4e0d\u76f8\u4ea4\u7684$x_{j}$\u8fde\u8fb9\uff08\u8bb0\u4f4f\u4e24\u4e24\u4e4b\u95f4\u53ea\u9700\u8981\u5176\u4e2d\u4e00\u4e2a\u8fde\u5c31\u884c\u4e86\uff0c\u5373\u4e0d\u8981\u51fa\u73b0$y_{i}$\u8fde\u4e86$x_{j}$\u4e4b\u540e\uff0c$y_{j}$\u53c8\u8fde$x_{i}$\u7684\u60c5\u51b5\uff0c\u8fd9\u4e8c\u8005\u7b49\u4ef7\uff0c\u9632\u6b62\u51fa\u73b0\u8d1f\u73af\uff09\n- $y_{i}$\u5411\u8d85\u7ea7\u6c47\u70b9\u8fde$flow=k,cost=0$\u7684\u8fb9\n\n\u6700\u540e\u8dd1\u8d39\u7528\u6d41\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\n\nusing namespace std;\n\nconst int MAXN = 500 + 20;\nconst int MAXE = MAXN * 200;\nconst int INF = 0x3f3f3f3f;\n\nstruct Segment {\n    int l, r, length;\n    Segment(int l = 0, int r = 0, int length = 0) :\n        l(l), r(r), length(length) {};\n    bool operator < (const Segment &A) const {\n        return l == A.l ? r < A.r : l < A.l;\n    }\n}I[MAXN];\n\nstruct Edge {\n    int bg, ed, nxt, flow, cost;\n    Edge(int bg = 0, int ed = 0, int nxt = 0, int flow = 0, int cost = 0) :\n        bg(bg), ed(ed), nxt(nxt), flow(flow), cost(cost) {};\n};\n\nstruct Map {\n    Edge edge[MAXE];\n    int head[MAXN << 1], count = 1;\n    inline void insert(int bg, int ed, int flow, int cost) {\n        edge[++count] = Edge(bg, ed, head[bg], flow, cost);\n        head[bg] = count;\n        edge[++count] = Edge(ed, bg, head[ed], 0, -cost);\n        head[ed] = count;\n    }\n}A;\n\nint dis[MAXN << 1], pre[MAXN << 1][3];//node edge flow\nbool vis[MAXN << 1];\n\nbool bfs(int s, int t) {\n    memset(dis, 0x3f, sizeof(dis));\n    memset(pre, 0, sizeof(pre));\n    memset(vis, false, sizeof(vis));\n    queue<int> que;\n    que.push(s);\n    dis[s] = 0;\n    pre[s][2] = INF;\n    while (!que.empty()) {\n        int now = que.front();\n        que.pop();\n        vis[now] = false;\n        for (int i = A.head[now]; i; i = A.edge[i].nxt) {\n            int v = A.edge[i].ed;\n            if (dis[v] > dis[now] + A.edge[i].cost && A.edge[i].flow) {\n                dis[v] = dis[now] + A.edge[i].cost;\n                pre[v][0] = now;\n                pre[v][1] = i;\n                pre[v][2] = min(pre[now][2], A.edge[i].flow);\n                if (!vis[v]) {\n                    que.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n    }\n    return dis[t] != INF;\n}\n\nint EK(int s, int t) {\n    int ans = 0;\n    while (bfs(s, t)) {\n        int now = t, change = pre[t][2];\n        while (pre[now][0]) {\n            int e = pre[now][1];\n            A.edge[e].flow -= change;\n            A.edge[e ^ 1].flow += change;\n            now = pre[now][0];\n        }\n        ans += change * dis[t];\n    }\n    return ans;\n}\n\nint main() {\n    int n, k, x0, x1, s, S, T;\n    scanf(\"%d%d\", &n, &k);\n    s = n * 2 + 1; S = s + 1; T = S + 1;\n    for (int i = 1; i <= n; ++i) {\n        scanf(\"%d%d\", &x0, &x1);\n        I[i] = Segment(min(x0, x1), max(x0, x1), abs(x1 - x0));//\u542c\u8bf4\u6709\u53ef\u80fd\u51fa\u73b0x0>x1?\n    }\n    sort(I + 1, I + n + 1);//\u8111\u5b50\u62bd\u4e86\u7684\u4ea7\u7269\n    A.insert(S, s, k, 0);\n    for (int i = 1; i <= n; ++i) {\n        A.insert(i, i + n, 1, -I[i].length);\n        A.insert(s, i, 1, 0);\n        A.insert(i + n, T, 1, 0);\n        for (int j = i + 1; j <= n; ++j) {//\u4e00\u5b9a\u8981\u9632\u6b62\u91cd\u590d\u8fde\u8fb9\uff08j=i+1\uff09\n            if (I[i].r <= I[j].l || I[i].l >= I[j].r) {\n                A.insert(i + n, j, 1, 0);\n            }\n        }\n    }\n    printf(\"%d\\n\", -EK(S, T));//\u8bb0\u5f97\u53d6\u8d1f\n}\n```\n",
        "postTime": 1552647721,
        "uid": 10337,
        "name": "ZPC2048",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6211\u7528\u7c7b\u4f3c\u66b4\u529b\u7684\u65b9\u6cd5~~\u5438\u6c271376ms~~\u8fc7\u4e86\u3002\n\nhttps://www.luogu.org/record/show?rid=6275933\n\n\u601d\u8def\uff1a\u5206\u5c42\u56fe\u6700\u957f\u8defdfs+\u526a\u679d\u3002\n\n\u5bf9\u4e8e\u8fd9n\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u5c06\u5176\u6309\u5de6\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u590d\u5236k\u4efd\uff0c\u5206\u4e3ak\u5c42\u3002\n\n\u5bf9\u4e8e**\u4e0d\u91cd\u53e0\u7684\u4e24\u6bb5\u533a\u95f4**\uff0c\u4ece\u5de6\u8fb9\u533a\u95f4\u8fde\u5230\u540c\u5c42\u53f3\u8fb9\u7684\u533a\u95f4\uff0c\u8fb9\u6743\u4e3a\u53f3\u8fb9\u533a\u95f4\u957f\uff1b\u5e76\u4ece\u53f3\u8fb9\u533a\u95f4\u8fde\u5230\u4e0b\u5c42\u5de6\u8fb9\u533a\u95f4\u540c\u4f4d\u7f6e\u7684\u533a\u95f4\uff0c\u8fb9\u6743\u4e3a\u5de6\u8fb9\u533a\u95f4\u957f\n\n\u5bf9\u4e8e**\u91cd\u53e0\u7684\u4e24\u6bb5\u533a\u95f4**\uff0c\u70b9\u6570\u8fc7\u591a\u65f6\u4e0d\u8fde\u8fb9\uff0c\u5426\u5219\u4ece\u5de6\u8fb9\u8fde\u5411\u4e0b\u4e00\u5c42\u7684\u53f3\u8fb9\u533a\u95f4\uff0c\u8fb9\u6743\u4e3a\u53f3\u8fb9\u7ebf\u6bb5\u957f\u3002\n\n\u6700\u540e\uff0c\u53e6\u8d77\u6e90\u70b9s\uff0c\u8fde\u5411\u7b2c\u4e00\u5c42\u7684\u5404\u6bb5\u533a\u95f4\uff0c\u8fb9\u6743\u4e3a\u5404\u6bb5\u533a\u95f4\u957f\u3002\n\n\u8dd1\u4e00\u904d\u5206\u5c42\u56fe\u6700\u957f\u8def\uff0c\u6ce8\u610f**\u9009\u8fc7\u7684\u533a\u95f4\u4e0d\u80fd\u518d\u9009**\u3002\n\n\u4e0a\u4ee3\u7801\u2193\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int INF=2e9;\n\nint n,k,s,np,ans;\nint h[1500005],ln[1500005],q[1500005];\nbool boom[5005];\nstruct lint{\n\tint l,r;\n}line[5005];\nstruct rpg{\n\tint li,nx,ln;\n}a[1500005];\n\ninline void add(int ls,int nx,int ln){\n\ta[++np]=(rpg){h[ls],nx,ln};\n\th[ls]=np;\n}\n\nbool cmp(lint a,lint b){\n\treturn a.l<b.l;\n}\n\nvoid dfs(int x){\n\tfor(register int i=h[x];i;i=a[i].li){\n\t\tif(!boom[a[i].nx%n]&&ln[a[i].nx]<ln[x]+a[i].ln){\n\t\t\tln[a[i].nx]=ln[x]+a[i].ln;\n\t\t\tboom[a[i].nx%n]=1;\n\t\t\tdfs(a[i].nx);\n\t\t\tboom[a[i].nx%n]=0;\n\t\t}\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\tfor(register int i=1;i<=n;++i){\n\t\tscanf(\"%d%d\",&line[i].l,&line[i].r);\n\t}sort(line+1,line+n+1,cmp);\n\tfor(register int i=1;i<=n;++i){\n\t\tadd(s,i,line[i].r-line[i].l);\n\t}\n\tfor(int l=0;l<k;++l){\n\t\tfor(register int i=1;i<n;++i){\n\t\t\tfor(int j=i+1;j<=n;++j){\n\t\t\t\tif(i!=j){\n\t\t\t\t\tif(line[i].r<=line[j].l){\n\t\t\t\t\t\tadd(i+n*l,j+n*l,line[j].r-line[j].l);\n\t\t\t\t\t\tadd(j+n*l,i+n*(l+1),line[i].r-line[i].l);\n\t\t\t\t\t}else if(n<400){\n\t\t\t\t\t\tadd(i+n*l,j+n*(l+1),line[j].r-line[j].l);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}dfs(s);\n\tfor(register int i=n*(k-1);i<=n*k;++i)\n\t\tans=max(ln[i],ans);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1521372226,
        "uid": 31293,
        "name": "Adove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u601d\u8def\u548c[\u82b1\u59d0\u7684](https://www.luogu.com.cn/blog/pks-LOVING/solution-p3358)\u4e00\u6837,\u63d0\u4f9b\u4e00\u5f20\u6bd4\u8f83\u597d\u770b\u7684\u56fe\n\n\u6837\u4f8b\u7684\u5efa\u56fe:\n![](https://cdn.luogu.com.cn/upload/image_hosting/3n6bgyda.png)\n\n[\u6211\u7684\u535a\u5ba2-\u9898\u89e3\u539f\u6587](https://tony031218.github.io/2020/04/21/%E3%80%8C%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%E3%80%8D%E6%9C%80%E9%95%BFk%E5%8F%AF%E9%87%8D%E5%8C%BA%E9%97%B4%E9%9B%86%E9%97%AE%E9%A2%98-%E9%A2%98%E8%A7%A3/)\n\n## \u9898\u76ee\u5927\u610f\n\u7ed9\u5b9a\u4e00\u4e2a\u5f00\u533a\u95f4\u7684\u96c6\u5408$\\mathbf{I}$,\u4ece$\\mathbf{I}$\u4e2d\u53d6\u51fa\u4e00\u4e9b\u5f00\u533a\u95f4,\u7ec4\u6210\u96c6\u5408$\\mathbf{S}$\n\n\u4f7f\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a$x$,\u6ee1\u8db3$\\mathbf{S}$\u4e2d\u5305\u542b$x$\u7684\u533a\u95f4\u6570\u4e0d\u8d85\u8fc7$k$,\u4e14$\\mathbf{S}$\u4e2d\u5f00\u533a\u95f4\u603b\u957f\u5ea6\u6700\u5927\n\n\u6c42\u6700\u5927\u7684\u957f\u5ea6\n\n## \u9898\u89e3\n\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u7684\u8bdd,\u5219\u53ef\u4ee5\u540c\u65f6\u9009\u62e9,\u5728\u56fe\u4e0a\u8868\u73b0\u4e3a\u4e32\u8054\n\n\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u6709\u91cd\u53e0\u7684\u8bdd,\u5219\u4e0d\u80fd\u540c\u65f6\u9009\u62e9,\u5728\u56fe\u4e0a\u8868\u73b0\u4e3a\u5e76\u8054(\u670d\u4ece\u603b\u6d41\u91cf\u7684\u7ea6\u675f)\n\n\u5148\u5bf9\u6240\u6709\u8282\u70b9\u8fdb\u884c\u79bb\u6563\u5316,\u6ce8\u610f\u79bb\u6563\u5316\u524d\u7edf\u8ba1\u51fa\u533a\u95f4\u7684\u957f\n\n1. \u4ece \u6e90\u70b9 \u5411 \u8282\u70b91 \u63a5\u4e00\u6761 **\u6d41\u91cf\u4e3a$k$,\u8d39\u7528\u4e3a$0$** \u7684\u8fb9(\u6700\u5927\u6d41\u91cf\u4e3ak,\u5bf9\u7b54\u6848\u65e0\u8d21\u732e)\n2. \u4ece \u6bcf\u4e2a\u8282\u70b9$i$ \u5411 \u8282\u70b9$i+1$ \u63a5\u4e00\u6761 **\u6d41\u91cf\u4e3a$inf$,\u8d39\u7528\u4e3a$0$** \u7684\u8fb9(\u53ef\u4ee5\u968f\u610f\u901a\u8fc7,\u5bf9\u7b54\u6848\u65e0\u8d21\u732e)\n3. \u4ece \u6700\u540e\u4e00\u4e2a\u8282\u70b9 \u5411 \u6c47\u70b9 \u63a5\u4e00\u6761 **\u6d41\u91cf\u4e3a$inf$,\u8d39\u7528\u4e3a$0$** \u7684\u8fb9(\u603b\u6d41\u91cf\u67091.\u63a7\u5236,\u5bf9\u7b54\u6848\u65e0\u8d21\u732e)(\u53ef\u4ee5\u5305\u542b\u57282.\u91cc)\n4. \u4ece \u6bcf\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9 \u5411 \u5176\u53f3\u7aef\u70b9 \u63a5\u4e00\u6761 **\u6d41\u91cf\u4e3a$1$,\u8d39\u7528\u4e3a\u533a\u95f4\u957f** \u7684\u8fb9(\u53ea\u53ef\u7528\u4e00\u6b21,\u5bf9\u7b54\u6848\u8d21\u732e\u4e3a\u533a\u95f4\u957f\u5ea6)\n\n\u6c42\u51fa\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41,\u6700\u5927\u8d39\u7528\u5373\u4e3a\u6700\u7ec8\u7684\u7ed3\u679c\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read() {\n    int x = 0; int f = 1; char ch = getchar();\n    while (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}\n    while (isdigit(ch))  {x = x * 10 + ch - 48; ch = getchar();}\n    return x * f;\n}\n\nconst int maxn = 2010;\nconst int inf  = 0x3f3f3f3f;\nconst int ninf = 0xc0c0c0c0;\n\nint n, m, s, t, ansflow;\nint vis[maxn], d[maxn], p[maxn], a[maxn];\nlong long anscost;\n\nstruct Edge {\n\tint from, to, cap, flow, cost;\n\tEdge(int u, int v, int c, int f, int w): from(u), to(v), cap(c), flow(f), cost(w){}\n};\nvector<Edge> edges;\nvector<int> G[maxn];\nvoid add(int u, int v, int c, int w) {\n\tedges.push_back(Edge(u, v, c, 0, w));\n\tedges.push_back(Edge(v, u, 0, 0,-w));\n\tint mm = edges.size();\n\tG[u].push_back(mm - 2);\n\tG[v].push_back(mm - 1);\n}\n\nbool BellmanFord(int& flow, long long& cost) {\n    memset(d, 0xc0, sizeof(d));\n\tmemset(vis, 0, sizeof(vis));\n\td[s] = 0; vis[s] = 1; p[s] = 0; a[s] = inf;\n\tqueue<int> Q;\n\tQ.push(s);\n\twhile (!Q.empty()) {\n\t\tint x = Q.front(); Q.pop();\n\t\tvis[x] = 0;\n\t\tfor (int i = 0; i < G[x].size(); ++i) {\n\t\t\tEdge& e = edges[G[x][i]];\n\t\t\tif (e.cap > e.flow && d[e.to] < d[x] + e.cost) {\n\t\t\t\td[e.to] = d[x] + e.cost;\n\t\t\t\tp[e.to] = G[x][i];\n\t\t\t\ta[e.to] = min(a[x], e.cap - e.flow);\n\t\t\t\tif (!vis[e.to]) {\n\t\t\t\t\tQ.push(e.to);\n\t\t\t\t\tvis[e.to] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (d[t] == ninf) return false;\n\tflow += a[t];\n\tcost += (long long)d[t] * (long long)a[t];\n\tfor (int u = t; u != s; u = edges[p[u]].from) {\n\t\tedges[p[u]].flow += a[t];\n\t\tedges[p[u] ^ 1].flow -= a[t];\n\t}\n\treturn true;\n}\n\nint MaxCostMaxFlow(long long& cost) {\n\tint flow = 0; cost = 0;\n\twhile (BellmanFord(flow, cost));\n\treturn flow;\n}\n\nstruct Interval {\n    int l, r, len;\n}inter[510];\nint nums[1020], old[1020];\n\nint main() {\n    int n_ = read(), k = read();\n    for (int i = 1; i <= n_; ++i) {\n        inter[i].l = read(); inter[i].r = read();\n        inter[i].len = inter[i].r - inter[i].l;\n        nums[i * 2 - 1] = inter[i].l;\n        nums[i * 2] = inter[i].r;\n    }\n    \n    // \u79bb\u6563\u5316\n    for (int i = 1; i <= n_ * 2; ++i) old[i] = nums[i];\n    sort(old + 1, old + 1 + n_ * 2);\n    int len = unique(old + 1, old + 1 + n_ * 2) - old - 1;\n    for (int i = 1; i <= n_ * 2; ++i) nums[i] = lower_bound(old + 1, old + 1 + len, nums[i]) - old;\n    for (int i = 1; i <= n_; ++i) {\n        inter[i].l = nums[i * 2 - 1];\n        inter[i].r = nums[i * 2];\n    }\n    \n    s = 0; n = len + 2; t = n - 1;\n    add(s, 1, k, 0);  // \u5efa\u8fb91.\n    for (int i = 1; i <= len; ++i) {\n        add(i, i + 1, inf, 0); // \u5efa\u8fb92.3.\n    }\n    for (int i = 1; i <= n_; ++i) {\n        add(inter[i].l, inter[i].r, 1, inter[i].len); //\u5efa\u8fb94.\n    }\n    ansflow = MaxCostMaxFlow(anscost);\n    printf(\"%d\\n\", anscost);\n    return 0;\n}\n```",
        "postTime": 1587434440,
        "uid": 141791,
        "name": "Tony_Wong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u95ee\u9898\u60f3\u901a\u4e86\u4e5f\u786e\u5b9e\u4e0d\u96be\n\n**\u95ee\u9898:\u628a\u533a\u95f4\u770b\u6210\u4e00\u4e2a\u70b9\u4e0d\u597d\u5904\u7406\u70b9\u6743,\u6240\u4ee5\u8981\u8f6c\u5316\u4e3a\u8fb9\u6743**\n\n\u9996\u5148\u628a\u533a\u95f4\u62c6\u6210\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9,\u5de6\u53f3\u7aef\u70b9\u7684\u8fb9\u6d41\u91cf1,\u8d39\u7528\u533a\u95f4\u957f\u5ea6\n\n\u8fd9\u4e2a\u5e94\u8be5\u4e0d\u96be\u7406\u89e3,\u6bcf\u4e2a\u533a\u95f4\u53ea\u80fd\u9009\u4e00\u6b21\u561b,\u4ef7\u503c\u662f\u957f\u5ea6\n\n<br/>\n\n**\u95ee\u9898:\u6bcf\u4e2a\u70b9\u4e0d\u80fd\u6709\u8d85\u8fc7k\u4e2a\u533a\u95f4\u8986\u76d6**\n\n**\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u540c\u4e00\u65f6\u95f4\u7684\u6d41\u91cf\u4e0d\u80fd\u5927\u4e8ek**\n\n\u5c31\u662f\u8bf4,\u4ece\u6e90\u70b9\u5230\u6c47\u70b9\u6d41\u7684\u8fc7\u7a0b\u4e2d,\u4efb\u610f\u65f6\u523b\u4e0d\u80fd\u540c\u65f6\u5728k\u6761\u8def\u5f84\u4e0a\u8d70\n\n\u5426\u5219\u5c31\u662f\u540c\u4e00\u4e2a\u533a\u57df\u5185\u9009\u4e86k\u4e2a\u533a\u95f4,\u8fd9\u662f\u4e0d\u6ee1\u8db3\u7684\n\n\u6211\u9009\u4e86\u67d0\u4e2a\u533a\u95f4,\u76f4\u5230\u8fd9\u4e2a\u533a\u95f4\u7684\u53f3\u7aef\u70b9,\u6211\u5df2\u7ecf\u628a\u6d41\u91cf\u5206\u51fa1\u4e86\n\n\u8fd9\u4e2a\u65f6\u5019\u6d41\u91cf\u8fd8\u5269k-1,\u5728\u8fbe\u5230\u90a3\u4e2a\u53f3\u7aef\u70b9\u4e4b\u524d,\u6211\u6700\u591a\u80fd\u9009k-1\u4e2a\u533a\u95f4\n\n\u6bd4\u5982\u5bf9\u4e8e(1,5),(8,9),(2,10)\u6765\u8bf4,\u56fe\u5927\u6982\u8fd9\u4e2a\u6837\u5b50\n\n![](https://img-blog.csdnimg.cn/2020081912092738.png)\n\u5047\u5982\u4ece1\u6d41\u52305\u4e86,\u5982\u679ck=1,\u90a3\u4e48\u6ca1\u6709\u6d41\u91cf\u4ece1\u6d41\u52302\u4e4b\u540e\u4e86\n\n\u5047\u5982\u4ece1\u7559\u52305\u4e86,k=2,\u90a3\u4e48\u8fd8\u67091\u7684\u6d41\u91cf\u53ef\u4ee5\u7ee7\u7eed\u5f80\u540e\u6d41\u52302\n\n\u90a3\u4e48\u52302\u4e86\u56e0\u4e3a\u8fd8\u6709\u6d41\u91cf1,\u6240\u4ee5\u53ef\u4ee5\u9009\u62e9\u4ece2\u6d41\u523010,\u4e5f\u5c31\u662f\u9009\u62e9(2,10)\n\n\u5f53\u7136\u4e5f\u53ef\u4ee5\u4ece2\u6d41\u52305,\u4e4b\u540e\u518d\u505a\u9009\u62e9\u3002\n\n**\u5177\u4f53\u8fde\u8fb9**\n\n**\u6240\u6709\u5750\u6807\u79bb\u6563\u5316,\u5de6\u8fb9\u7684\u70b9\u8fde\u5411\u53f3\u8fb9\u7684\u70b9,\u6d41\u91cfk,\u8fb9\u67430**\n\n**\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4,\u5de6\u7aef\u70b9\u8fde\u5411\u53f3\u7aef\u70b9,\u6d41\u91cf1,\u8fb9\u6743\u4e3a\u533a\u95f4\u957f\u5ea6**\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int inf=1e9;\nconst int maxn=2e5+10;\nint n,k,li[maxn],ri[maxn],b[maxn],top,s,t,flow[maxn];\nstruct edge{\n\tint to,nxt,flow,w;\n}d[maxn]; int head[maxn],cnt=1;\nvoid add(int u,int v,int flow,int w){\n\td[++cnt]=(edge){v,head[u],flow,w},head[u]=cnt;\n\td[++cnt]=(edge){u,head[v],0,-w},head[v]=cnt;\n}\nint dis[maxn],vis[maxn],pre[maxn];\nbool spfa()\n{\n\tqueue<int>q;\n\tfor(int i=0;i<=t;i++)\tdis[i]=-inf,vis[i]=0;\n\tq.push(s),dis[s]=0;\n\tflow[s]=inf;\n\twhile( !q.empty() )\n\t{\n\t\tint u=q.front(); q.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=d[i].nxt )\n\t\t{\n\t\t\tint v=d[i].to;\n\t\t\tif( dis[v]<dis[u]+d[i].w&&d[i].flow )\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+d[i].w;\n\t\t\t\tif( !vis[v] )\tvis[v]=1,q.push(v);\n\t\t\t\tflow[v]=min( flow[u],d[i].flow );\n\t\t\t\tpre[v]=i;\n\t\t\t}\n\t\t}\n\t}\n\tif( dis[t]==-inf )\treturn false;\n\treturn true;\n}\nint dinic()\n{\n\tint maxflow=0,mincost=0;\n\twhile( spfa() )\n\t{\n\t\tint x=t;\n\t\tmaxflow+=flow[t],mincost+=flow[t]*dis[t];\n\t\twhile( x!=s )\n\t\t{\n\t\t\tint i=pre[x];\n\t\t\td[i].flow-=flow[t];\n\t\t\td[i^1].flow+=flow[t];\n\t\t\tx=d[i^1].to;\n\t\t}\n\t}\n\treturn mincost;\n}\nint main()\n{\n\tcin >> n >> k;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\t++top; cin >> b[top];\n\t\t++top; cin >> b[top];\n\t\tli[i]=b[top-1],ri[i]=b[top];\n\t}\n\tsort(b+1,b+1+top);\n\ttop=unique(b+1,b+1+top)-b-1;\n\ts=0,t=top+1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint len=ri[i]-li[i];\n\t\tli[i]=lower_bound( b+1,b+1+top,li[i] )-b;\n\t\tri[i]=lower_bound( b+1,b+1+top,ri[i] )-b;\n\t\tadd( li[i],ri[i],1,len);\n\t}\n\tfor(int i=0;i<t;i++)\tadd(i,i+1,k,0);\n\tcout << dinic();\n}\n```",
        "postTime": 1597810497,
        "uid": 299810,
        "name": "issue_is_fw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    },
    {
        "content": "### \u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\n\n\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u70b9\uff0c\u6700\u591a\u88ab\u8986\u76d6 $k$ \u6b21\uff0c\u76f8\u4fe1\u8fd9\u4e2a\u5927\u5bb6\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898\u5427\uff1f\n\n\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u5c31\u662f\u51fa\u4e8e\u5982\u4f55\u6784\u5efa\u51fa\u56fe\u7684\u9636\u6bb5\u4e86\u3002\n\n\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 $(l,r)$ \uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6211\u4eec\u8981\u8986\u76d6\u533a\u95f4 $(l,r)$ \u5185\u6240\u6709\u7684\u70b9\u4e00\u6b21(\u4e0d\u542b\u7aef\u70b9)\uff0c\u5982\u4f55\u5feb\u901f\u8868\u8fbe\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u6211\u4eec\u4e0d\u59a8\u4ee5 $\\sum\\limits _{(u,v)\\in E}flow(u,v)$ \u8868\u793a $v$ \u70b9(\u4e0d\u542b\u6e90\u6c47)\u7684 **\u672a\u8986\u76d6\u6b21\u6570** \uff0c\u90a3\u4e48\u4e00\u5f00\u59cb\u6211\u4eec\u6709 $(i,i+1)$ \u5bb9\u91cf\u4e3a $k$ \u7684\u521d\u59cb\u8fb9\uff0c\u8d39\u7528\u4e3a $0$ \uff0c \u8868\u793a\u6700\u591a\u88ab\u8986\u76d6 $k$ \u6b21\u3002\n\n\u63a5\u7740\u8868\u8fbe\u51fa\u4e0a\u9762\u8fd9\u4e2a\u4e1c\u897f \n\n> \u6211\u4eec\u8981\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 $(l,r)$ \uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6211\u4eec\u8981\u8986\u76d6\u533a\u95f4 $(l,r)$ \u5185\u6240\u6709\u7684\u70b9\u4e00\u6b21(\u4e0d\u542b\u7aef\u70b9)\uff0c\u5982\u4f55\u5feb\u901f\u8868\u8fbe\u8fd9\u4e2a\u4e1c\u897f\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u4e00\u6761\u8fb9\uff0c\u4f7f\u5f97\u7f51\u7edc\u6d41\u4e2d $l+1,l+2,\\cdots,r-1$ \u8fd9\u4e9b\u7ecf\u8fc7\u8fd9\u4e9b\u70b9\u7684\u6d41\u91cf\u51cf\u4e00\uff0c\u8fdb\u800c\u8868\u793a\u51fa\u5b83\u4eec\u88ab\u8986\u76d6\u4e00\u6b21\uff0c\u4e8e\u662f\u6211\u4eec\u5efa $(l,r)$ \u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \uff0c\u8868\u793a\u53ea\u80fd\u9009\u4e00\u6b21\uff0c \u8d39\u7528\u4e3a $r-l$\uff0c \u5982\u679c\u7ecf\u8fc7\u8fd9\u6761\u8fb9\uff0c\u5c31\u8868\u793a\u9009\u62e9\u4e86\u8fd9\u4e2a\u533a\u95f4\u3002\n\n\u6700\u540e\u8dd1\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 2005;\n\nstruct edge { int y, c, w, next; } a[N << 1]; int len, last[N];\nstruct node { int l, r, c; } seg[N]; int arr[N], siz;\n\nvoid ins(int x, int y, int c, int w) { \n\ta[++len] = (edge) { y, c, w, last[x] }; last[x] = len;\n\ta[++len] = (edge) { x, 0, -w, last[y] }; last[y] = len;\n}\n\nint q[N << 2], d[N], f[N], S, T, prv[N], ans; bool v[N];\n\nbool spfa() {\n\tmemset(d, 0xcfcfcfcf, sizeof d); memset(f, 0, sizeof f);\n\td[S] = 0; f[S] = 0x3f3f3f3f; int l = 1, r = 0; v[q[++r] = S] = 1;\n\tfor (int x = q[l]; l <= r; x = q[++l]) {\n\t\tv[x] = 0; for (int k = last[x], y; k; k = a[k].next) {\n\t\t\tif (d[y = a[k].y] < d[x] + a[k].w && a[k].c) {\n\t\t\t\td[y] = d[x] + a[k].w; f[y] = min(f[x], a[k].c);\n\t\t\t\tif (!v[y]) v[q[++r] = y] = 1; prv[y] = k;\n\t\t\t}\n\t\t}\n\t}\n\treturn f[T] > 0;\t\t\t\n}\t\n\nvoid upd() {\n\tans += f[T] * d[T]; int k = prv[T];\n\twhile (k) {\n\t\ta[k].c -= f[T]; \n\t\ta[k ^ 1].c += f[T];\n\t\tk = prv[a[k ^ 1].y];\n\t}\n}\n\nint get(int x) {\n\tint l = 1, r = siz;\n\twhile (l < r) {\n\t\tint mid = l + r >> 1;\n\t\tif (arr[mid] < x) l = mid +1;\n\t\telse r = mid;\n\t}\n\treturn l;\n}\n\nint main() {\n\tlen = 1; memset(last, 0, sizeof last);\n\tsiz = 0;\n\tint n, m; scanf(\"%d%d\", &n, &m);\n\tfor (int i = 1, l, r; i <= n; ++i) {\n\t\tscanf(\"%d%d\", &l, &r);\n\t\tseg[i].l = l; seg[i].r = r; seg[i].c = r - l;\n\t\tarr[++siz] = l; arr[++siz] = r;\n\t}\n\t\n\tsort(arr + 1, arr + siz +1); int cnt = 0;\n\tfor (int i = 1; i <= siz; ++i) if (i == 1 || arr[i - 1] != arr[i]) arr[++cnt] = arr[i];\n\tsiz = cnt; for (int i = 1; i <= n; ++i) seg[i].l = get(seg[i].l), seg[i].r = get(seg[i].r);\n\t\n\tS = 0; T = siz + 1;\n\tfor (int i = 0; i < T; ++i) ins(i, i + 1, m, 0);\n\tfor (int i = 1; i <= n; ++i) ins(seg[i].l, seg[i].r, 1, seg[i].c);\n\t\n\tans = 0;\n\twhile (spfa()) upd();\n\tprintf(\"%d\\n\", ans); \n\treturn 0;\n}\n```",
        "postTime": 1597374304,
        "uid": 106232,
        "name": "_Sein",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3358 \u3010\u6700\u957fk\u53ef\u91cd\u533a\u95f4\u96c6\u95ee\u9898\u3011"
    }
]