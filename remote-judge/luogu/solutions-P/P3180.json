[
    {
        "content": "## \u4e00\u4e36\u601d\u8def\n\n\u9996\u5148\uff0c\u6839\u636e\u9898\u610f\uff0c\u56fe\u662f\u4e00\u9897\u4ed9\u4eba\u638c\uff0c\u6240\u4ee5\u81ea\u7136\u60f3\u5230\u5efa\u51fa\u5706\u65b9\u6811\uff0c\u5e76\u8003\u8651\u8be2\u95ee\u5728\u5706\u65b9\u6811\u4e0a\u7684\u610f\u4e49\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u60ca\u5947\u7684\u53d1\u73b0\uff0c\u5220\u9664$x$\u5230$1$\u7684\u6240\u6709\u8def\u5f84\u4e0a\u7684\u8fb9\u540e\uff0c$x$\u80fd\u5230\u7684\u70b9\u521a\u597d\u5c31\u662f\u5706\u65b9\u6811\u4e0a$x$\u7684\u5b50\u6811\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7dfs\u5e8f\u5c06\u5b50\u6811\u8f6c\u5316\u4e3a\u533a\u95f4\uff0c\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\uff1a\n\n **\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u5c0f\u4e8e\u7b49\u4e8ey\u4e14\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570/\u5076\u6570\u7684\u6570\u7684\u6570\u91cf**\n \n \u7565\u52a0\u601d\u7d22\u540e\u53d1\u73b0\u4e1c\u897f\u4e0d\u597d\u7528\u4efb\u4f55\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u6240\u4ee5\u8003\u8651\u4f7f\u7528\u83ab\u961f\u3002\u4f46\u662f\u8be2\u95ee\u662f\u8be2\u95ee\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u5f97\u8003\u8651\u7528\u53e6\u5916\u4e00\u4e2a\u4e1c\u897f\u6765\u7ef4\u62a4\u8fd9\u4e2a\u524d\u7f00\u548c\u3002\n \n \u6811\u72b6\u6570\u7ec4\u81ea\u7136\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u6765\u5230$O(n \\sqrt{n}logn)$\uff0c\u56e0\u4e3a\u6811\u72b6\u6570\u7ec4\u8be2\u95ee\u548c\u4fee\u6539\u90fd\u662f$O(logn)$\uff0c\u4f46\u83ab\u961f\u8be2\u95ee\u662f$O(1)$\uff0c\u4fee\u6539\u662f$O(\\sqrt{n})$\u7684\u3002\n \n \u90a3\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u4e00\u4e2a\u8be2\u95ee\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8f83\u9ad8\uff0c\u4f46\u4fee\u6539\u4e00\u5b9a\u662f$O(1)$\u7684\u6570\u636e\u7ed3\u6784\u3002\u90a3\u7528\u4ec0\u4e48\u5462\uff1f\u679c\u65ad\u60f3\u5230\u53e6\u5916\u4e00\u4e2a$O(\\sqrt{n})$\u7684\u6570\u636e\u7ed3\u6784\u5206\u5757\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\u3002~~\uff08\u679c\u7136$\\sqrt{n}$\u6570\u636e\u7ed3\u6784\u642d\u914d\u8d77\u6765\u66f4\u914d\u5462\uff09~~\n \n##  \u4e8c\u4e36\u4ee3\u7801\n```cpp\n//BadWaper gg\n#include<bits/stdc++.h>\n#define inf 1e9\n#define eps 1e-6\n#define mp make_pair\n#define N 1000010\n#define M 1010\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline ll read()\n{\n\tchar ch=getchar();\n\tll s=0,w=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\nstruct SqrtBlock\n{\n\tint c[N],sum[M][2],pos[N];\n\tint l[M],r[M];\n\tint n,block,cnt;\n\tSqrtBlock(){n=N-10;}\n\tinline void clear(){memset(c,0,sizeof(c));memset(sum,0,sizeof(sum));}\n\tinline void build()\n\t{\n\t\tblock=cnt=sqrt(n);\n\t\tfor(register int i=1;i<=cnt;i++)l[i]=r[i-1]+1,r[i]=i*block;\n\t\tif(r[cnt]!=n){cnt++;l[cnt]=l[cnt-1]+1;r[cnt]=n;}\n\t\tfor(register int i=1;i<=cnt;i++)\n\t\t{\n\t\t\tfor(register int j=l[i];j<=r[i];j++)pos[j]=i;\n\t\t}\n\t}\n\tinline void add(int x){if(c[x])sum[pos[x]][c[x]&1]--;c[x]++;sum[pos[x]][c[x]&1]++;}\n\tinline void del(int x){sum[pos[x]][c[x]&1]--;c[x]--;if(c[x])sum[pos[x]][c[x]&1]++;}\n\tinline int query(int x,int opt)\n\t{\n\t\tint ans=0,p=0;\n\t\tfor(register int i=1;i<=cnt&&r[i]<=x;i++)ans+=sum[i][opt],p=r[i];\n\t\tfor(register int i=p+1;i<=x;i++)ans+=(((c[i]&1)==opt)&&(c[i]));\n\t\treturn ans;\n\t}\n}T;//\u5206\u5757\nstruct edge\n{\n\tint next,to;\n}e[N];\nint head[N],cnt=1;\nvector<int>v[N];\nint dfn[N],low[N],Time,fa[N],size[N],pre[N];\nint P[N],Q[N],val[N],w[N],dcnt,ans[N],vis[N];\nmap<int,int>ma[N];\nint n,m,BL,nowl,nowr;\nstruct ask\n{\n\tint l,r,id,opt,v;\n}q[N];\ninline void add_edge(int from,int to){e[++cnt]=(edge){head[from],to};head[from]=cnt;}\ninline void solve(int x,int y)\n{\n\t++dcnt;val[dcnt]=inf;\n\tv[x].push_back(dcnt);\n\tfor(register int i=y;i!=x;i=fa[i])v[dcnt].push_back(i),vis[pre[i]]=vis[pre[i]^1]=1;\n}\nvoid dfs(int now,int pr)\n{\n\tdfn[now]=low[now]=++Time;fa[now]=pr;\n\tfor(register int i=head[now];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==pr)continue;\n\t\tif(!dfn[e[i].to]){pre[e[i].to]=i;dfs(e[i].to,now);low[now]=min(low[now],low[e[i].to]);}\n\t\telse low[now]=min(low[now],dfn[e[i].to]);\n\t}\n\tfor(register int i=head[now];i;i=e[i].next)\n\t{\n\t\tif(dfn[e[i].to]>dfn[now]&&fa[e[i].to]!=now)vis[i]=vis[i^1]=1,solve(now,e[i].to);\n\t}\n}//tarjan\nvoid dfs(int now)\n{\n\tP[now]=++Time;Q[Time]=now;int tmp=v[now].size();size[now]=1;\n\tfor(register int i=0;i<tmp;i++)\n\t{\n\t\tdfs(v[now][i]);size[now]+=size[v[now][i]];\n\t}\n}//\u6c42dfs\u5e8f\ninline int QB(int p){return p/BL;}\ninline int cmp(ask a,ask b){return (QB(a.l)<QB(b.l))||(QB(a.l)==QB(b.l)&&a.r<b.r);}//\u83ab\u961f\u7684\u6392\u5e8f\nint main()\n{\n\t//freopen(\".in\",\"r\",stdin);\n//\tfreopen(\"3624.out\",\"w\",stdout);\n\tT.build();\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)w[i]=val[i]=read();dcnt=n;\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint x=read(),y=read();\n\t\tif(ma[x][y])continue;\n\t\tma[x][y]=ma[y][x]=1;\n\t\tadd_edge(x,y);add_edge(y,x);\n\t}\n\tdfs(1,0);\n\tTime=0;\n\tfor(register int x=1;x<=n;x++)\n\t{\n\t\tfor(register int i=head[x];i;i=e[i].next)\n\t\t{\n\t\t\tif(dfn[e[i].to]>dfn[x]&&!vis[i])v[x].push_back(e[i].to);\n\t\t}\n\t}//\u5efa\u7acb\u5706\u65b9\u6811\uff0c\u672c\u4eba\u7684\u65b9\u6cd5\u6bd4\u8f83\u9b3c\u755c\uff0c\u4e0d\u5efa\u8bae\u521d\u5b66\u8005\u770b\u6211\u7684\u4ee3\u7801\u5b66\u5706\u65b9\u6811\n\tdfs(1);\n\tBL=sqrt(dcnt);\n\tint QQ=read();\n\tfor(register int i=1;i<=QQ;i++)\n\t{\n\t\tq[i].opt=read();int x=read();q[i].v=read();q[i].id=i;\n\t\tq[i].l=P[x];q[i].r=P[x]+size[x]-1;//\u5904\u7406\u51fa\u8be2\u95ee\u533a\u95f4\n\t}\n\tsort(q+1,q+QQ+1,cmp);//\u6392\u5e8f\n\tfor(register int i=1;i<=QQ;i++)\n\t{\n\t\tif(i==1)\n\t\t{\n\t\t\tfor(register int j=q[i].l;j<=q[i].r;j++){if(val[Q[j]]!=inf)T.add(val[Q[j]]);}\n\t\t\tnowl=q[i].l,nowr=q[i].r;ans[q[i].id]=T.query(q[i].v,q[i].opt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile(nowl<q[i].l){if(val[Q[nowl]]!=inf)T.del(val[Q[nowl]]);nowl++;}\n\t\t\twhile(nowl>q[i].l){nowl--;if(val[Q[nowl]]!=inf)T.add(val[Q[nowl]]);}\n\t\t\twhile(nowr<q[i].r){nowr++;if(val[Q[nowr]]!=inf)T.add(val[Q[nowr]]);}\n\t\t\twhile(nowr>q[i].r){if(val[Q[nowr]]!=inf)T.del(val[Q[nowr]]);nowr--;}\n\t\t\tans[q[i].id]=T.query(q[i].v,q[i].opt);\n\t\t}//\u83ab\u961f\n\t}\n\tfor(register int i=1;i<=QQ;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n\n```\n\n## \u4e09\u4e36\u540e\u8a00\n\n\u8fd9\u9053\u9898\u7ed9\u6211\u7684\u542f\u793a\u5c31\u662f\uff0c$\\sqrt{n}$\n\u6570\u636e\u7ed3\u6784\u5957\u8d77\u6765\u7528\u5f80\u5f80\u6bd4$logn$\u6570\u636e\u7ed3\u6784\u66f4\u52a0\u6709\u6548\u3002\n\n**\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u7bc7\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u90a3\u4f60\u53ef\u4ee5\u70b9\u4e2a\u8d5e\u652f\u6301\u6211\u4e00\u4e0bqwq\u3002\u5982\u679c\u4f60\u5bf9\u9898\u89e3\u6709\u4efb\u4f55\u95ee\u9898/\u8ba4\u4e3a\u6211\u7684\u9898\u89e3\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u79c1\u4fe1/\u5728\u8bc4\u8bba\u533a\u53d1\u51fa\u6765\uff0c\u5f53\u7136\u5982\u679c\u4f60\u5bf9\u6211\u7684\u9898\u89e3\u6709\u4efb\u4f55\u610f\u89c1/\u5efa\u8bae\u4e5f\u6b22\u8fce\u6307\u51fa\u3002\u6211\u4f1a\u5c3d\u6211\u5168\u529b\u628a\u6211\u9898\u89e3\u5199\u5230\u6700\u597d\u7684qwq**",
        "postTime": 1592439901,
        "uid": 72419,
        "name": "WAPER4EVER",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3180 \u3010[HAOI2016]\u5730\u56fe\u3011"
    },
    {
        "content": "\u5bf9\u4ed9\u4eba\u638c\u8fdb\u884c\u4e86\u4e00\u904ddfs\uff0c\u5f97\u5230dfs\u6811\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u73af\uff0cdfs\u5e8f\u6700\u5c0f\u7684\u53eb\u505a\u73af\u7684\u73af\u6839\n\n\n\u57281\u5230x\u7684\u7b80\u5355\u8def\u5f84\u90fd\u4e0d\u80fd\u8d70\u7684\u9650\u5236\u4e0b\uff0c\u4ece\u70b9x\u51fa\u53d1\uff0c\u80fd\u8d70\u5230\u7684\u70b9\u8bb0\u4e3ax\u7684\u5b50\u6811\n\n\n\u5982\u679cx\u5728\u73af\u4e0a \u4e14 x\u4e0d\u662f\u73af\u6839\uff0c\u90a3\u4e48x\u7684\u5b50\u6811\u4e3a dfs\u5e8f\u5927\u4e8ex\u7684dfs\u5e8f \u4e14 \u4e0d\u548cx\u5728\u540c\u4e00\u4e2a\u73af\u4e0a\u7684\u70b9\n\n\n\u5982\u679cx\u5728\u73af\u4e0a \u4e14 x\u662f\u73af\u6839\uff0c\u90a3\u4e48\u6240\u6709dfs\u5e8f\u5927\u4e8ex\u7684dfs\u5e8f\u7684 \u70b9 \u90fd\u662fx\u7684\u5b50\u6811\n\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u73af\u4e0a\u70b9\u7684\u5b50\u6811\u53ea\u80fd\u7d2f\u79ef\u5230\u73af\u6839\u90a3\u91cc\n\n\n\u5b9a\u4e49 x\u7684\u5b50\u6811\u5927\u5c0f\u4e3ason[x]\uff0cx\u7684dfs\u5e8f\u4e3aid[x]\n\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u67e5\u8be2 \u533a\u95f4[id[x]\uff0cid[x]+son[x]-1] \u5185\u6709\u591a\u5c11\u4e2a\u70b9\u7684\u6cb9\u817b\u5ea6<=y\n\n\n\u7528\u83ab\u961f\n\n\ncnt[k] \u8868\u793a \u6cb9\u817b\u5ea6\u4e3ak\u7684\u70b9\u7684\u4e2a\u6570\n\n\n\u5bf9\u6cb9\u817b\u5ea6 \u4e5f\u5206\u5757 \u7edf\u8ba1\n\n\n\n\u7528\u83ab\u961f\n\n\ncnt[k] \u8868\u793a \u6cb9\u817b\u5ea6\u4e3ak\u7684\u70b9\u7684\u4e2a\u6570\n\n\n\u5bf9\u6cb9\u817b\u5ea6 \u4e5f\u5206\u5757 \u7edf\u8ba1\n\n\n\u4ee3\u7801\u8bf7\u89c1 http://www.cnblogs.com/TheRoadToTheGold/p/7388886.html\n",
        "postTime": 1503028655,
        "uid": 21351,
        "name": "xuxinyu",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3180 \u3010[HAOI2016]\u5730\u56fe\u3011"
    },
    {
        "content": "## \u5e9f\u8bdd\n\n\u8bdd\u8bf4\u8fd9\u9898\u5c45\u7136\u6ca1\u6709 dsu on tree \u7684\u9898\u89e3QWQ\uff1f\uff08\u6211\u5bfb\u601d\u8fd9\u4e0d\u662f\u4e2a\u8d64\u88f8\u88f8\u7684 dsu on tree \u5417\uff1f\uff09\n\n\u6587\u7ae0\u540c\u6b65\u53d1\u8868\u4e8e[\u6211\u7684CSDN\u535a\u5ba2](https://blog.csdn.net/a_forever_dream/article/details/104037656)\uff0c\u4f46\u662f\u5e94\u8be5\u8fd8\u662f\u8fd9\u91cc\u7684\u5199\u7684\u597d\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8fd9\u4e00\u7bc7\u5199\u7684\u665a\uff0c\u7701\u53bb\u4ee5\u53ca\u7a0d\u7a0d\u52a0\u4e0a\u4e86\u4e00\u70b9\u4e1c\u897f\u3002\n\n## \u6b63\u9898\n\n\u6709\u4e00\u53e5\u7ecf\u5178\u7684\u8001\u8bdd\u662f\u8fd9\u4e48\u8bf4\u7684\uff1a\n> \u51fa\u9898\u4eba\u60f3\u8ba9\u4f60\u6253\u5706\u65b9\u6811\uff0c\u4e8e\u662f\u628a\u9898\u51fa\u5728\u4e86\u4ed9\u4eba\u638c\u4e0a\u3002\n\n\u6240\u4ee5\u770b\u5230\u4ed9\u4eba\u638c\uff0c\u65e0\u8111\u6572\u4e00\u68f5\u5706\u65b9\u6811\uff0c\u7136\u540e\u7a81\u7136\u53d1\u73b0\u8be2\u95ee\u8f6c\u5316\u6210\u4e86\u8fd9\u4e2a\u4e1c\u897f\uff1a*\u7ed9\u4e00\u4e2a\u70b9\uff0c\u8be2\u95ee\u4ed6\u7684\u5b50\u6811\u5185\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u6b21\u6216\u5076\u6570\u6b21\u7684\u6cb9\u817b\u5ea6\u6709\u591a\u5c11\u79cd\u3002*\n\n\u770b\u5230\u8fd9\u79cd\u5b50\u6811\u5185\u8be2\u95ee\u51fa\u73b0\u6b21\u6570\u7684\u95ee\u9898\uff0c\u5dee\u4e0d\u591a\u5c31\u53ef\u4ee5\u628a\u8822\u8822\u6b32\u52a8\u7684 dsu on tree \u638f\u51fa\u6765\u4e86\u3002\n\n\u5904\u7406\u7684\u65f6\u5019\uff0c\u5f00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u79cd\u6cb9\u817b\u5ea6\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5728\u5f00\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u5206\u522b\u8bb0\u5f55\u51fa\u73b0\u5076\u6570\u6b21\u7684\u548c\u51fa\u73b0\u5947\u6570\u6b21\u7684\uff0c\u5047\u5982\u4e00\u79cd\u6cb9\u817b\u5ea6\u51fa\u73b0\u5076\u6570\u6b21\uff0c\u90a3\u4e48\u8ba9even\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e $+1$\uff0c\u5426\u5219\u8ba9odd\u7684\u5bf9\u5e94\u4f4d\u7f6e $+1$\uff0c\u51fa\u73b0 $0$ \u6b21\u7684\u81ea\u7136\u6ca1\u6709\u8d21\u732e\u3002\n\n\u6c42\u89e3\u7684\u65f6\u5019\u6811\u72b6\u6570\u7ec4\u6c42\u4e2a\u524d\u7f00\u548c\u5c31\u597d\u4e86\u3002\n\n\u867d\u7136\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nlog^2n)$\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u5e38\u6570\u6709\u70b9\u5927\uff0c\u6240\u4ee5\u8dd1\u7684\u4e0d\u7b97\u5feb\u2026\u2026\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <map>\n#include <algorithm>\nusing namespace std;\n#define maxn 1000010\n\nint n,m,q,nn,a[maxn];\nstruct par{\n\tint x,y;\n\tpar(int xx,int yy):x(xx),y(yy){}\n\tbool operator <(const par &b)const{return x==b.x?(y<b.y):(x<b.x);}\n};\nmap<par,bool> Map;\nstruct V_E{\n\tstruct edge{int y,type,id,next;};//type\u548cid\u53ea\u6709T3\u7528\u5230\uff0c\u4e0b\u9762\u4f1a\u8bb2 \n\tedge e[maxn<<1];\n\tint first[maxn],len;\n\tvoid buildroad(int x,int y,int type=0,int id=0)\n\t{\n\t\te[++len]=(edge){y,type,id,first[x]};\n\t\tfirst[x]=len;\n\t}\n}T1,T2,T3;\n//T1\u662f\u539f\u56fe\uff0cT2\u8bb0\u5f55\u5706\u65b9\u6811\uff0cT3\u7528\u6765\u8bb0\u5f55\u8be2\u95ee\n//T3\u4e2d\u7684y\u5b58\u7684\u5c31\u662f\u8be2\u95ee\u7684y\uff0cid\u5b58\u8fd9\u662f\u54ea\u4e2a\u8be2\u95ee\uff0ctype\u5b58 \u95ee\u7684\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570 \nint times[maxn],odd[maxn],even[maxn];\n//times\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570\uff0codd\u548ceven\u662f\u6811\u72b6\u6570\u7ec4\nint lowbit(int x){return x&(-x);}\nvoid tr_add(int *tree,int x,int y){for(;x<=1000000;x+=lowbit(x))tree[x]+=y;}//\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539 \nint tr_sum(int *tree,int x){int p=0;for(;x>=1;x-=lowbit(x))p+=tree[x];return p;}//\u6811\u72b6\u6570\u7ec4\u6c42\u524d\u7f00\u548c \nint tr_ask(int *tree,int x){return tr_sum(tree,x)-tr_sum(tree,x-1);}//\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u6c42\u503c \nvoid add(int x)//\u6cb9\u817b\u5ea6x\u51fa\u73b0\u6b21\u6570+1 \n{\n\tif(!x)return;\n\ttimes[x]++;\n\tif(times[x]==1)tr_add(odd,x,1);\n\telse if(times[x]%2==1)tr_add(even,x,-1),tr_add(odd,x,1);\n\telse tr_add(odd,x,-1),tr_add(even,x,1);\n}\nvoid del(int x)//\u6cb9\u817b\u5ea6x\u51fa\u73b0\u6b21\u6570-1 \n{\n\tif(!x)return;\n\ttimes[x]--;\n\tif(times[x]==0)tr_add(odd,x,-1);\n\telse if(times[x]%2==1)tr_add(even,x,-1),tr_add(odd,x,1);\n\telse tr_add(odd,x,-1),tr_add(even,x,1);\n}\nint dfn[maxn],low[maxn],id=0,fa[maxn],belong[maxn];\nvoid solve(int x,int y)//\u5706\u65b9\u6811\u677f\u5b50 \n{\n\tint now=y; nn++;\n\twhile(now!=fa[x])belong[now]=nn,T2.buildroad(now,nn),T2.buildroad(nn,now),now=fa[now];\n}\nvoid tarjan(int x)//\u5706\u65b9\u6811\u677f\u5b50 \n{\n\tdfn[x]=low[x]=++id;\n\tfor(int i=T1.first[x];i;i=T1.e[i].next)\n\t{\n\t\tint y=T1.e[i].y; if(y==fa[x])continue;\n\t\tif(!dfn[y])\n\t\t{\n\t\t\tfa[y]=x; tarjan(y);\n\t\t\tif(low[y]<low[x])low[x]=low[y];\n\t\t}\n\t\telse if(dfn[y]<low[x])low[x]=dfn[y];\n\t\tif(low[y]<=dfn[x])continue;\n\t\tT2.buildroad(x,y);T2.buildroad(y,x);\n\t}\n\tfor(int i=T1.first[x];i;i=T1.e[i].next)\n\t{\n\t\tint y=T1.e[i].y; if(fa[y]==x||dfn[y]<dfn[x])continue;\n\t\tsolve(x,y);\n\t}\n}\nint size[maxn],mson[maxn];\nint ans[maxn];\nvoid dfs1(int x,int fa)//\u627e\u91cd\u513f\u5b50 \n{\n\tsize[x]=1;\n\tfor(int i=T2.first[x];i;i=T2.e[i].next)\n\t{\n\t\tint y=T2.e[i].y; if(y==fa)continue;\n\t\tdfs1(y,x); size[x]+=size[y];\n\t\tif(size[y]>size[mson[x]])mson[x]=y;\n\t}\n}\nvoid go(int x,int fa,bool tf)//\u52a0\u4e0a/\u5220\u53bb \u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8d21\u732e \n{\n\tif(tf)add(a[x]); else del(a[x]);\n\tfor(int i=T2.first[x];i;i=T2.e[i].next)\n\tif(T2.e[i].y!=fa)go(T2.e[i].y,x,tf);\n}\nvoid getans(int x)//\u6c42\u89e3\u6240\u6709\u5bf9x\u7684\u8be2\u95ee \n{\n\tfor(int i=T3.first[x];i;i=T3.e[i].next)\n\tif(T3.e[i].type==0)ans[T3.e[i].id]=tr_sum(even,T3.e[i].y);\n\telse ans[T3.e[i].id]=tr_sum(odd,T3.e[i].y);\n}\nvoid dfs2(int x,int fa,bool tf)\n{\n\tfor(int i=T2.first[x];i;i=T2.e[i].next)//\u5904\u7406\u8f7b\u5b50\u6811 \n\tif(T2.e[i].y!=fa&&T2.e[i].y!=mson[x])dfs2(T2.e[i].y,x,false);\n\t\n\tif(mson[x]!=0)dfs2(mson[x],x,true); add(a[x]);//\u5904\u7406\u91cd\u5b50\u6811\u548c\u81ea\u5df1 \n\tfor(int i=T2.first[x];i;i=T2.e[i].next)//\u52a0\u4e0a\u8f7b\u5b50\u6811\u8d21\u732e \n\tif(T2.e[i].y!=fa&&T2.e[i].y!=mson[x])go(T2.e[i].y,x,true);\n\tgetans(x);//\u6c42\u89e3\u81ea\u5df1 \n\t\n\tif(!tf)go(x,fa,false);//\u5982\u679c\u81ea\u5df1\u662f\u7236\u4eb2\u7684\u8f7b\u513f\u5b50\uff0c\u90a3\u4e48\u5220\u53bb\u81ea\u5df1\u7684\u8d21\u732e \n}\n\nint main()\n{\n\tscanf(\"%d %d\",&n,&m); nn=n;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n\tfor(int i=1,x,y;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tif(!Map[par(x,y)])T1.buildroad(x,y),T1.buildroad(y,x),Map[par(x,y)]=true;\n\t}\n\tscanf(\"%d\",&q);\n\tfor(int i=1,type,x,y;i<=q;i++)\n\t{\n\t\tscanf(\"%d %d %d\",&type,&x,&y);\n\t\tT3.buildroad(x,y,type,i);\n\t}\n\ttarjan(1);//\u5706\u65b9\u6811\u677f\u5b50 \n\tdfs1(1,0); dfs2(1,0,true);//dsu on tree \n\tfor(int i=1;i<=q;i++)printf(\"%d\\n\",ans[i]);\n}\n```",
        "postTime": 1579418475,
        "uid": 35379,
        "name": "Scarlet_Hypoc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3180 \u3010[HAOI2016]\u5730\u56fe\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a\u5706\u65b9\u6811\n\n\u9898\u610f\uff1a\u4ee51\u53f7\u70b9\u4e3a\u6839\u5efa\u5706\u65b9\u6811\uff0c\u67e5\u8be2\u67d0\u70b9\u5b50\u6570\u5185\u51fa\u73b0\u6b21\u6570\u4e3a\u5947/\u5076\u6570\u4e14<=\u7ed9\u5b9a\u503c\u7684\u989c\u8272\u7684\u79cd\u6570\n\n\u663e\u7136Tarjan\u7f29\u70b9\u5efa\u5706\u65b9\u6811\uff0c\u4ece1\u53f7\u70b9\u5f00\u59cb\u6811\u4e0adfs\u5e8f\uff0c\u56e0\u4e3a\u53ea\u8981\u5706\u70b9\uff0c\u6240\u4ee5\u65b9\u70b9\u5c31\u4e0d\u7528\u6dfb\u52a0dfn\u4e86\n\n\u7136\u540e\u5b50\u6570\u7edf\u8ba1\u8f6c\u5316\u4e3a\u533a\u95f4\u7edf\u8ba1\uff0c\u56e0\u4e3a\u6709\u51fa\u73b0\u6b21\u6570\u5947\u5076\u6027\u548c\u503c\u57df\u7684\u9650\u5236\uff0c\u8003\u8651\u83ab\u961f\u5957\u503c\u57df\u5206\u5757\n\nsum[x][0/1]\u8868\u793a\u7f16\u53f7\u4e3ax\u7684\u5757\u6709\u591a\u5c11\u79cd\u989c\u8272\u51fa\u73b0\u6b21\u6570\u662f\u5076\u6570/\u5947\u6570\n\n\u5982\u679c\u539f\u6765cnt[x]\u662f\u5076\u6570\uff0cadd\u4e4b\u540e\u5c31\u4f1a\u53d8\u6210\u5947\u6570\uff0c\u90a3\u5c31sum[pos[x]][0]--,sum[pos[x]][1]++\u5373\u53ef\uff0c\u53cd\u4e4b\n\n\u6ce8\u610f\u51fa\u73b0\u6b21\u6570\u4e3a0\u4e0d\u80fd\u7b97\uff0c\u8981\u7279\u5224\u4e00\u4e0b\n\n\u52a0\u4e86\u4e2a\u79bb\u6563\u5316\uff0c\u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u51cf\u5c0f\u5e38\u6570\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(q\u221an)\n```cpp\n#include<cmath>\n#include<stack>\n#include<cstdio>\n#include<algorithm>\nusing std::min;\nusing std::sort;\nusing std::stack;\nusing std::unique;\nusing std::upper_bound;\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch=getchar();bool f=0;\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\nconst int N=1e5+10,M=1.5e5+10,Q=1e5+10,SQRTN=350;\nint n,m,a[N],ans[Q];\ntemplate<int maxn,int maxm>class Graph\n{\n\tprivate:\n\t\tint edc;\n\tpublic:\n\t\tint head[maxn],next[maxm],to[maxm];\n\t\tinline const void link(int u,int v)\n\t\t{\n\t\t\tnext[++edc]=head[u];to[head[u]=edc]=v;\n\t\t\tnext[++edc]=head[v];to[head[v]=edc]=u;\n\t\t}\n};\nGraph<N,M<<1>g;\nGraph<N<<1,N<<2>t;\nstack<int>s;\nint dfn[N],low[N],dot[N],sqr,dfc;\nint belong[N],pos[N],cnt[N],sum[SQRTN][2],size1,size2;\nstruct query\n{\n\tbool type;\n\tint l,r,v,id;\n\tinline const bool operator<(const query &q)const\n\t{\n\t\treturn belong[l]^belong[q.l]?belong[l]<belong[q.l]:belong[l]&1?r<q.r:r>q.r;\n\t}\n}q[Q];\nint aa[N],tot;\ninline const int loc(int x)\n{\n\tif (x<aa[1])return 0;\n\tif (x>aa[tot])return tot;\n\treturn upper_bound(aa+1,aa+tot+1,x)-aa-1;\n}\ninline const void tarjan(int u,int fa)\n{\n\tlow[u]=dfn[u]=++dfc;s.push(u);\n\tfor (int v,i=g.head[u];i;i=g.next[i])\n\t\tif ((v=g.to[i])^fa)\n\t\t\tif (!dfn[v])\n\t\t\t{\n\t\t\t\ttarjan(v,u);\n\t\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\t\tif (low[v]<dfn[u])continue;\n\t\t\t\tt.link(++sqr,u);int w;\n\t\t\t\tdo w=s.top(),s.pop(),t.link(w,sqr);while (w^v);\n\t\t\t}\n\t\t\telse low[u]=min(low[u],dfn[v]);\n}\ninline const void tarjan()\n{\n\tsqr=n;\n\tfor (int i=1;i<=n;i++)\n\t\tif (!dfn[i])\n\t\t\ttarjan(i,0);\n}\ninline const void dfs(int p,int fa)\n{\n\tif (p<=n)dot[dfn[p]=++dfc]=p;\n\tfor (int i=t.head[p];i;i=t.next[i])if (t.to[i]^fa)dfs(t.to[i],p);\n\tif (p<=n)low[p]=dfc;\n}\ninline const void add(int x)\n{\n\tint p=pos[x];\n\tif (cnt[x]&1)sum[p][0]++,sum[p][1]--;\n\telse if (cnt[x])sum[p][1]++,sum[p][0]--;\n\t\telse sum[p][1]++;\n\tcnt[x]++;\n}\ninline const void del(int x)\n{\n\tint p=pos[x];\n\tif (cnt[x]==1)sum[p][1]--;\n\telse if (cnt[x]&1)sum[p][1]--,sum[p][0]++;\n\t\telse sum[p][0]--,sum[p][1]++;\n\tcnt[x]--;\n}\ninline const int ask(int x,bool f)\n{\n\tint p=pos[x]-1,ans=0;\n\tfor (int i=1;i<=p;i++)ans+=sum[i][f];\n\tfor (int i=p*size2+1;i<=x;i++)ans+=cnt[i]&&((cnt[i]&1)==f);\n\treturn ans;\n}\nint main()\n{\n\tread(n);read(m);\n\tfor (int i=1;i<=n;i++)read(a[i]),aa[i]=a[i];\n\tsort(aa+1,aa+n+1);tot=unique(aa+1,aa+n+1)-aa-1;\n\tfor (int i=1;i<=n;i++)a[i]=loc(a[i]);\n\tfor (int u,v;m--;)read(u),read(v),g.link(u,v);\n\ttarjan();dfc=0;dfs(1,0);\n\tread(m);\n\tsize1=sqrt(1.0*n);size2=sqrt(1.0*tot);\n\tfor (int i=1;i<=n;i++)belong[i]=(i-1)/size1+1;\n\tfor (int i=1;i<=tot;i++)pos[i]=(i-1)/size2+1;\n\tfor (int i=1;i<=m;i++)\n\t\tread(q[i].type),read(q[i].l),read(q[i].v),\n\t\tq[i].v=loc(q[i].v),q[i].id=i,\n\t\tq[i].r=low[q[i].l],q[i].l=dfn[q[i].l];\n\tsort(q+1,q+m+1);int l=1,r=0;\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\twhile (r<q[i].r)add(a[dot[++r]]);\n\t\twhile (l>q[i].l)add(a[dot[--l]]);\n\t\twhile (r>q[i].r)del(a[dot[r--]]);\n\t\twhile (l<q[i].l)del(a[dot[l++]]);\n\t\tans[q[i].id]=q[i].v?ask(q[i].v,q[i].type):0;\n\t}\n\tfor (int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1569290038,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3180 \u3010[HAOI2016]\u5730\u56fe\u3011"
    },
    {
        "content": "\u9996\u5148\u8be2\u95ee\u662f\u5728\u4e00\u68f5\u4ed9\u4eba\u638c\u4e0a\u8fdb\u884c\n\n\u5bf9\u539f\u56fe\u8fdb\u884c\u4e00\u6b21dfs\uff0c\u5f97\u5230\u4e00\u68f5dfs\u6811\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u73af\uff0c\u79f0\u73af\u4e0a\u7684\u70b9\u4e2d\u5728dfs\u6811\u91cc\u6df1\u5ea6\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u4e3a\u8be5\u73af\u7684\u73af\u6839\n\n\u8003\u8651\u539f\u95ee\u9898\u7684\u8be2\u95ee\uff0c\u6709\u4e00\u4e2a\u7ea6\u675f\uff0c\u662f\u4ece1\u53f7\u70b9\u5230x\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u90fd\u4e0d\u80fd\u901a\u8fc7\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u6240\u6709\u7ecf\u8fc7\u70b9x\u7684\u73af\u6765\u8bf4\uff0c\u9664\u975ex\u662f\u8be5\u70b9\u73af\u6839\uff0c\u5426\u5219\u8be5\u73af\u5176\u5b83\u70b9\u5bf9\u7b54\u6848\u90fd\u6ca1\u6709\u8d21\u732e\n\n\u56e0\u4e3a\u53ef\u4ee5\u4ece\u73af\u6839\u8d70\u5230\u8be5\u70b9\u4e0b\u9762\u518d\u8d70\u4e0a\u6765\uff0c\u6216\u8005\u73af\u6839\u76f4\u63a5\u8d70\u5230\u8fd9\u4e2a\u70b9\uff0c\u8fd9\u6837\u73af\u4e0a\u7684\u70b9\u5c31\u90fd\u4f5c\u5e9f\u4e86==\n\n\u9488\u5bf9\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u5c06\u539f\u4ed9\u4eba\u638c\u91cd\u5efa\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u73af\uff0c\u5c06\u73af\u4e0a\u9664\u73af\u6839\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2\u6307\u5b9a\u4e3a\u73af\u6839\u800c\u5220\u53bb\u539f\u6765\u6307\u5411\u7236\u4eb2\u7684\u8fb9\n\n\u5bf9\u65b0\u6811\u8fdb\u884c\u4e00\u6b21dfs\uff0c\u5f97\u5230dfs\u5e8f\uff0c\u8fd9\u6837\u662f\u4e00\u4e2a\u5e8f\u5217\n\n\u6bcf\u4e2a\u8be2\u95ee\u5c31\u53ef\u4ee5\u53d8\u6210\u533a\u95f4\u8be2\u95ee\u4e86\u3002\u3002\u83ab\u961f\u89e3\u51b3\n\n\u7ef4\u62a4\u6743\u503c\u7684\u65b9\u6848\uff0c\u7528bzoj3809\u7684\u5206\u5757\u65b9\u6cd5\u5373\u53ef\n\n\u5f53\u7136\uff0c\u6784\u5efa\u65b0\u6811\u4e0d\u9700\u8981\u771f\u7684\u6784\u5efa\u51fa\uff0c\u4e24\u8fb9dfs\u914d\u5408tarjan\u5c31\u884c\u4e86\n--------------------- \n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <iostream>\n#include <bits/stdc++.h>\n#include <ext/pb_ds/priority_queue.hpp>\nusing namespace std;\n \nconst int maxn = 1E5 + 10;\nconst int N = 1E6 + 10;\n \nint n, m, sq1, sq2, dfs_clock, tot, cur, low[maxn], DFN[maxn], Name[maxn], dfn[maxn], s[maxn], a[maxn], siz[maxn], sum[1010][2], cnt[N], a ns[maxn];\n \nvector <int> v[maxn];\n \nint Getpos (int x, int sq)\n{\n\treturn (x % sq == 0) ? x / sq : x / sq + 1;\n}\n \nstruct Query {\n\tint l, r, t, y, num; \n\tQuery(){}\n\tQuery(int l, int r, int t, int y, int num) : l(l), r(r), t(t), y(y), num(num){}\n\tbool operator < (const Query &B) const\n\t{\n\t\tif (Getpos(l, sq1) < Getpos(B.l,sq1)) return 1;\n\t\tif (Getpos(l, sq1) > Getpos(B.l,sq1)) return 0;\n\t\treturn r < B.r;\n\t}\n} Q[maxn];\n \nvoid Dfs1(int x, int from)\n{\n\tDFN[x] = low[x] = ++dfs_clock;\n\tName[DFN[x]] = x;\n\tfor (int i = 0; i < v[x].size(); i++)\n\t{\n\t\tint to = v[x][i];\n\t\tif (to == from) continue;\n\t\tif (!DFN[to])\n\t\t{\n\t\t\tDfs1(to, x);\n\t\t\tlow[x] = min(low[x], low[to]);\n\t\t}\n\t\telse low[x] = min(low[x], DFN[to]);\n\t}\n}\n \nvoid Dfs2(int x, int from)\n{\n\tdfn[x] = ++dfs_clock; \n\tsiz[x] = 1;\n\tfor (int i = 0; i < v[x].size(); i++)\n\t{\n\t\tint to = v[x][i];\n\t\tif (to == from) continue;\n\t\tif (!dfn[to] && low[to] >= DFN[x])\n\t\t{\n\t\t\tDfs2(to, x);\n\t\t\tsiz[x] += siz[to];\n\t\t}\n\t}\n\tfor (int i = 0; i < v[x].size(); i++)\n\t{\n\t\tint to = v[x][i];\n\t\tif (to == from) continue;\n\t\tif (!dfn[to] && low[to] < DFN[x])\n\t\t{\n\t\t\tDfs2(to, x);\n\t\t\tsiz[Name[low[to]]] += siz[to];\n\t\t}\n\t}\n}\n \nvoid Add(int x)\n{\n\tint pos = Getpos(x, sq2);\n\tif (cnt[x] & 1) --sum[pos][1], ++sum[pos][0];\n\telse if (cnt[x]) --sum[pos][0], ++sum[pos][1];\n\telse ++sum[pos][1];\n\t++cnt[x];\n}\n \nvoid Dec(int x)\n{\n\tint pos = Getpos(x, sq2);\n\tif (cnt[x] == 1) --sum[pos][1];\n\telse if (cnt[x] & 1) --sum[pos][1], ++sum[pos][0];\n\telse --sum[pos][0], ++sum[pos][1];\n\t--cnt[x];\n}\n \nint getint()\n{\n\tchar ch = getchar();\n\tint ret = 0;\n\twhile (ch < '0' || '9' < ch) ch = getchar();\n\twhile ('0' <= ch && ch <= '9')\n\t\tret = ret * 10 + ch - '0', ch = getchar();\n\treturn ret;\n}\n \nint main()\n{\n\t#ifdef DMC\n\t\tfreopen(\"DMC.txt\", \"r\", stdin);\n\t#endif\n\tn = getint(); \n\tm = getint();\n\tfor (int i = 1; i <= n; i++) \n\t\ta[i] = getint(), cur = max(cur, a[i]);\n\tsq1 = sqrt(n); \n\tsq2 = sqrt(cur);\n\twhile (m--)\n\t{\n\t\tint x = getint(), y = getint();\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\tDfs1(1, 0); \n\tdfs_clock = 0; \n\tDfs2(1, 0);\n\tfor (int i = 1; i <= n; i++) s[dfn[i]] = a[i];\n\tm = getint();\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\tint x, y, t = getint();\n\t\tx = getint(); \n\t\ty = getint();\n\t\tQ[i] = Query(dfn[x], dfn[x] + siz[x] - 1, t, y, i);\n\t}\n\tsort(Q + 1, Q + m + 1);\n\tint L = 1, R = 0;\n\tfor (int i = 1; i <= m; i++)\n\t{\n\t\twhile (R < Q[i].r) Add(s[++R]);\n\t\twhile (L > Q[i].l) Add(s[--L]);\n\t\twhile (R > Q[i].r) Dec(s[R--]);\n\t\twhile (L < Q[i].l) Dec(s[L++]);\n\t\tint Ans = 0, po = Getpos(Q[i].y, sq2);\n\t\tfor (int j = 1; j < po; j++) Ans += sum[j][Q[i].t];\n\t\tfor (int j = po * sq2 - sq2 + 1; j <= Q[i].y; j++)\n\t\t{\n\t\t\tif (!cnt[j]) continue;\n\t\t\tAns += ((cnt[j] & 1) == Q[i].t) ? 1 : 0;\n\t\t}\n\t\tans[Q[i].num] = Ans;\n\t}\n\tfor (int i = 1; i <= m; i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1545827300,
        "uid": 154004,
        "name": "Jiang_zi_chuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3180 \u3010[HAOI2016]\u5730\u56fe\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P3180)\n\n## \u9898\u610f\n\n\u4e00\u9897 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u4ed9\u4eba\u638c\uff0c\u70b9\u6709\u70b9\u6743\uff0c$q$ \u7ec4\u8be2\u95ee\uff0c\u8be2\u95ee\u67d0\u4e2a\u8282\u70b9\u5b50\u4ed9\u4eba\u638c\u70b9\u6743\u5c0f\u4e8e\u7b49\u4e8e $y$ \u7684\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\uff08\u5076\u6570\uff09\u7684\u70b9\u6743\u4e2a\u6570\u3002\n\n\u5b9a\u4e49\u8282\u70b9 $i$ \u7684\u5b50\u4ed9\u4eba\u638c\u4e3a\uff1a\u628a\u4ece\u6839\u5230 $i$ \u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8fb9\u5168\u90e8\u5220\u9664\u540e $i$ \u6240\u5c5e\u7684\u8fde\u901a\u5757\u3002\n\n## \u9898\u89e3\n\n\u8003\u8651\u5982\u679c\u662f\u4e00\u68f5\u6811\u7684\u8bdd\uff1a\u79bb\u7ebf\u8be2\u95ee\uff0c$\\text{dfs}$ \u641c\u7d22\u5e76\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u5957\u8def\u9898\u3002\n\n\u73b0\u5728\u53d8\u6210\u4e86\u4ed9\u4eba\u638c\uff0c\u5982\u679c\u662f\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48\u548c\u6811\u7684\u505a\u6cd5\u662f\u4e00\u6837\u7684\u3002\u8003\u8651\u73af\u4e0a\u7684\u70b9\uff1a\n\n1. \u73af\u4e0a\u79bb\u6839\u6700\u8fd1\u7684\u70b9\uff1a\u73af\u4e0a\u6240\u6709\u70b9\u7684\u5b50\u4ed9\u4eba\u638c\u7684\u5e76\u3002\n2. \u73af\u4e0a\u5176\u4f59\u70b9\uff0c\u7531\u4e8e\u5220\u6389\u4e86\u6240\u6709\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c\u6240\u4ee5\u73af\u4e0a\u7684\u8fb9\u5168\u5220\u6389\u4e86\uff0c\u73af\u4e0a\u7684\u8fb9\u5168\u5220\u6389\u4e86\uff0c\u6240\u4ee5\u73af\u4e0a\u7684\u70b9\u4e92\u76f8\u72ec\u7acb\u3002\n\n\u8fd9\u6837\u73af\u4e0a\u7684\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\u5c31\u786e\u5b9a\u4e86\uff1a\u79bb\u6839\u6700\u8fd1\u7684\u70b9\u7b49\u4ef7\u4e8e\u73af\u4e0a\u6240\u6709\u5176\u4ed6\u70b9\u7684\u7236\u4eb2\u3002\u6240\u4ee5\u76f4\u63a5\u91cd\u65b0\u5efa\u56fe\u53d8\u6210\u6811\u7136\u540e\u6309\u7167\u5957\u8def\u505a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n## \u4ee3\u7801\n\n```\n// Problem: P3180 [HAOI2016]\u5730\u56fe\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P3180\n// Memory Limit: 125 MB\n// Time Limit: 1000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\n#define add(x, y, z) to[x][z].push_back(y)\nusing namespace std;\nnamespace Std {\nint n, m, cnt, dfn[100010], fa[100010], tot, q, num[100010], po[100010],\n    type[100010], li[100010], ans[100010];\nbool mark[100010];\nvector<int> vec[100010], to[100010][2];\nstruct tree {\n  tree *ls, *rs;\n  int num1, num2;\n  tree() {\n    ls = rs = NULL;\n    num1 = num2 = 0;\n  }\n  void pushup() {\n    if (ls == NULL) {\n      num1 = rs->num1;\n      num2 = rs->num2;\n    } else if (rs == NULL) {\n      num1 = ls->num1;\n      num2 = ls->num2;\n    } else {\n      num1 = ls->num1 + rs->num1;\n      num2 = ls->num2 + rs->num2;\n    }\n  }\n  void change(int l, int r, int pos) {\n    if (l == r) {\n      if ((!num1 && (!num2))) num2 = 1;\n      if (num1)\n        num1 = 0, num2 = 1;\n      else\n        num2 = 0, num1 = 1;\n      return;\n    }\n    int mid = ((l + r) >> 1);\n    if (pos <= mid) {\n      if (ls == NULL) ls = new tree;\n      ls->change(l, mid, pos);\n    } else {\n      if (rs == NULL) rs = new tree;\n      rs->change(mid + 1, r, pos);\n    }\n    pushup();\n  }\n  void merge(tree *x, int l, int r) {\n    if (l == r) {\n      if (x->num1) {\n        if (num1)\n          num1 = 0, num2 = 1;\n        else\n          num1 = 1, num2 = 0;\n      }\n      return;\n    }\n    int mid = (l + r) >> 1;\n    if (ls != NULL && x->ls != NULL)\n      ls->merge(x->ls, l, mid);\n    else if (x->ls != NULL)\n      ls = x->ls;\n    if (rs != NULL && x->rs != NULL)\n      rs->merge(x->rs, mid + 1, r);\n    else if (x->rs != NULL)\n      rs = x->rs;\n    pushup();\n  }\n  int query(int l, int r, int L, int R, int opt) {\n    if (L <= l && r <= R) return opt ? num1 : num2;\n    int tmp = 0;\n    int mid = (l + r) >> 1;\n    if (L <= mid && ls != NULL) tmp += ls->query(l, mid, L, R, opt);\n    if (R > mid && rs != NULL) tmp += rs->query(mid + 1, r, L, R, opt);\n    return tmp;\n  }\n} * rt[100010];\nvoid dfs(int x, int y) {\n  dfn[x] = ++tot;\n  fa[x] = y;\n  for (auto i : to[x][0]) {\n    if (i == y) continue;\n    if (!dfn[i]) {\n      mark[x] = 0;\n      dfs(i, x);\n      if (!mark[x]) add(x, i, 1);\n    } else {\n      if (dfn[i] > dfn[x]) continue;\n      int u = x;\n      while (u != i) {\n        add(i, u, 1);\n        u = fa[u];\n        mark[u] = 1;\n      }\n    }\n  }\n}\nvoid dfs2(int x) {\n  rt[x] = new tree;\n  rt[x]->change(1, 1000000, num[x]);\n  for (auto i : to[x][1]) {\n    dfs2(i);\n    rt[x]->merge(rt[i], 1, 1000000);\n  }\n  for (auto i : vec[x]) {\n    ans[i] = rt[x]->query(1, 1000000, 1, li[i], type[i]);\n  }\n}\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  int u, v;\n  for (int i = 1; i <= n; ++i) {\n    scanf(\"%d\", num + i);\n  }\n  for (int i = 1; i <= m; ++i) {\n    scanf(\"%d%d\", &u, &v);\n    add(u, v, 0);\n    add(v, u, 0);\n  }\n  dfs(1, 0);\n  scanf(\"%d\", &q);\n  for (int i = 1; i <= q; ++i) {\n    scanf(\"%d%d%d\", type + i, po + i, li + i);\n    vec[po[i]].push_back(i);\n  }\n  dfs2(1);\n  for (int i = 1; i <= q; ++i) printf(\"%d\\n\", ans[i]);\n  return 0;\n}\n}  // namespace Std\nint main() { return Std::main(); }\n\n```\n",
        "postTime": 1653656463,
        "uid": 576737,
        "name": "Wilson_Inversion",
        "ccfLevel": 7,
        "title": "P3180 [HAOI2016]\u5730\u56fe \u9898\u89e3"
    },
    {
        "content": "#### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u4ed9\u4eba\u638c ($1\\le n\\le 10^5$, $n-1\\le m\\le 1.5\\cdot10^5$)\uff0c\u5b9a\u4e49 $u$ \u7684\u5b50\u4ed9\u4eba\u638c\u4e3a\u53bb\u6389 $u$ \u5230 $1$ \u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u7ecf\u8fc7\u7684\u8857\u9053\u540e $u$ \u6240\u5728\u7684\u8fde\u901a\u5757\u3002\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\uff0c$q$ ($1\\le q\\le 10^5$) \u6b21\u8be2\u95ee\u4e00\u4e2a\u70b9\u7684\u5b50\u4ed9\u4eba\u638c\u4e2d\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570/\u5076\u6570\u7684\u70b9\u6743\u4e2a\u6570\u3002\n\n#### \u9898\u89e3\n\n\u8fdb\u884c\u4e00\u904d dfs\uff0c \u5bf9\u4e8e\u6bcf\u4e2a\u73af\uff0c\u5220\u6389\u5176\u4e2d\u7684\u6240\u6709\u8fb9\u5e76\u4ece\u5176\u4e2d dfs \u5e8f\u6700\u5c0f\u7684\u70b9\u5411\u73af\u4e0a\u5176\u4ed6\u6240\u6709\u70b9\u8fde\u8fb9\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\u540e\u539f\u56fe\u53d8\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u4e14\u8fd9\u4e2a\u6811\u4e0a $u$ \u7684\u5b50\u6811\u6240\u5305\u542b\u7684\u70b9\u4e0e\u539f\u56fe\u4e2d $u$ \u7684\u5b50\u4ed9\u4eba\u638c\u6240\u5305\u542b\u7684\u70b9\u76f8\u540c\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u5b50\u6811\u8be2\u95ee\uff0c\u56e0\u6b64\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n+q)\\log n+m)$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional>\n#include <numeric>\nstruct Node {\n    Node *lc, *rc;\n    int cnt[2];\n    Node(Node *lc = nullptr, Node *rc = nullptr, int c0 = 0, int c1 = 0) : lc(lc), rc(rc), cnt{c0, c1} {}\n};\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    int n, m;\n    std::cin >> n >> m;\n    std::vector<int> a(n);\n    for (int i = 0; i < n; ++i)\n        std::cin >> a[i];\n    auto values = a;\n    std::sort(values.begin(), values.end());\n    values.erase(std::unique(values.begin(), values.end()), values.end());\n    for (auto &i : a)\n        i = std::lower_bound(values.begin(), values.end(), i) - values.begin();\n    std::vector<std::vector<int>> e(n);\n    std::vector<int> parent(n, -1), dep(n, -1);\n    for (int i = 0; i < m; ++i) {\n        int u, v;\n        std::cin >> u >> v;\n        --u;\n        --v;\n        e[u].push_back(v);\n        e[v].push_back(u);\n    }\n    dep[0] = 0;\n    std::function<void(int)> dfs = [&](int u) {\n        for (auto v : e[u]) {\n            if (v == parent[u])\n                continue;\n            if (dep[v] == -1) {\n                parent[v] = u;\n                dep[v] = dep[u] + 1;\n                dfs(v);\n            } else if (dep[v] > dep[u]) {\n                for (auto i = v; i != u; )\n                    std::tie(i, parent[i]) = {parent[i], u};\n            }\n        }\n    };\n    dfs(0);\n    for (int i = 0; i < n; ++i)\n        e[i].clear();\n    for (int i = 1; i < n; ++i)\n        e[parent[i]].push_back(i);\n    std::vector<Node *> root(n);\n    std::function<Node *(int, int, int)> insert = [&](int l, int r, int v) {\n        if (r - l == 1)\n            return new Node(nullptr, nullptr, 0, 1);\n        int m = (l + r) / 2;\n        if (v < m) {\n            return new Node(insert(l, m, v), nullptr, 0, 1);\n        } else {\n            return new Node(nullptr, insert(m, r, v), 0, 1);\n        }\n    };\n    for (int i = 0; i < n; ++i)\n        root[i] = insert(0, values.size(), a[i]);\n    std::function<Node *(Node *, Node *)> merge = [&](Node *p, Node *q) {\n        if (p == nullptr)\n            return q;\n        if (q == nullptr)\n            return p;\n        if (p -> lc == nullptr && p -> rc == nullptr) {\n            int c = (p -> cnt[1] + q -> cnt[1]) % 2;\n            return new Node(nullptr, nullptr, c == 0, c == 1);\n        }\n        Node *r = new Node(merge(p -> lc, q -> lc), merge(p -> rc, q -> rc));\n        if (r -> lc != nullptr) {\n            r -> cnt[0] += r -> lc -> cnt[0];\n            r -> cnt[1] += r -> lc -> cnt[1];\n        }\n        if (r -> rc != nullptr) {\n            r -> cnt[0] += r -> rc -> cnt[0];\n            r -> cnt[1] += r -> rc -> cnt[1];\n        }\n        return r;\n    };\n    std::function<void(int)> dfs1 = [&](int u) {\n        for (auto v : e[u]) {\n            dfs1(v);\n            root[u] = merge(root[u], root[v]);\n        }\n    };\n    dfs1(0);\n    std::function<int(Node *, int, int, int, int)> query = [&](Node *p, int l, int r, int b, int v) {\n        if (l >= b || p == nullptr)\n            return 0;\n        if (r <= b)\n            return p -> cnt[v];\n        int m = (l + r) / 2;\n        return query(p -> lc, l, m, b, v) + query(p -> rc, m, r, b, v);\n    };\n    int q;\n    std::cin >> q;\n    while (q--) {\n        int v, u, b;\n        std::cin >> v >> u >> b;\n        --u;\n        b = std::upper_bound(values.begin(), values.end(), b) - values.begin();\n        std::cout << query(root[u], 0, values.size(), b, v) << \"\\n\";\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1586687040,
        "uid": 149656,
        "name": "jiangly",
        "ccfLevel": 10,
        "title": "P3180 [HAOI2016]\u5730\u56fe \u9898\u89e3"
    }
]