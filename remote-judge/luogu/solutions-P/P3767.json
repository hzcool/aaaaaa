[
    {
        "content": "\u603b\u4f53\u601d\u8def\u662f\uff0c\u628a\u64cd\u4f5c\u5efa\u6210\u6811\uff0c\u5728\u6811\u4e0a\u6c42\u51fa\u4e00\u4e2a\u64cd\u4f5c\u7684\u4f5c\u7528dfs\u5e8f\u533a\u95f4\uff1b\u5bf9\u4e8e\u64cd\u4f5c\u7684dfs\u5e8f\u533a\u95f4\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb+\u53ef\u64a4\u9500\u79cd\u7c7b\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\n## \u5177\u4f53\u601d\u8def\u8fc7\u7a0b\n\n~~\u5982\u679c\u60a8\u8db3\u591f\u5f3a\uff0c\u60a8\u5c31\u4f1a\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u5806\u5957\u8def\u62fc\u4e00\u5757~~\n\n### 1. \u53ea\u6709\u52a0\u8fb9\n\n\u79cd\u7c7b\u5e76\u67e5\u96c6\u3002\u5f00\u4e94\u4e2a\u79cd\u7c7b\u7ef4\u62a4\u5373\u53ef\u3002\n\n> \u4e0d\u8981\u5fd8\u8bb0\u6570\u7ec4\u5927\u5c0f\\*5\n\n### 2. \u52a0\u4e0a\u5220\u9664\u64cd\u4f5c\n\n\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u6cbb+\u53ef\u64a4\u9500\u79cd\u7c7b\u5e76\u67e5\u96c6\u3002\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u5e38\u7528\u4e8e\u548c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u914d\u5408\uff0c\u79bb\u7ebf\u7ef4\u62a4\u4e00\u4e2a\u56fe\u7684\u8fde\u901a\u6027\uff0c\u4ee5\u53ca\u76f8\u5173\u4fe1\u606f\u3002\u8fd9\u4e2a\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a\uff0c\u4e0d\u4f1a\u7684\u4e5f\u4e0d\u7528\u6765\u505a\u8fd9\u4e2a\u9898\u4e86\u3002\n\n\u7136\u540e\u53ef\u64a4\u9500\u7684\u79cd\u7c7b\u5e76\u67e5\u96c6\u600e\u4e48\u5199\u5462\uff1f\u5176\u5b9e\u975e\u5e38simple\uff0c\u548c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7684\u64a4\u9500\u90e8\u5206\uff0c\u4ee3\u7801\u5b8c\u5168\u4e00\u6837\uff0c\u5c31\u5f62\u5982 `while(top>last_top) back()` \u7684\u5199\u5c31\u53ef\u4ee5\u4e86\u3002\u52a0\u4e94\u6761\u8fb9\u4e5f\u662f\u52a0\u8fb9\uff0c\u4e3a\u5565\u5c31\u4e0d\u80fd\u64a4\uff0c\u5f88\u7b80\u5355\u7684\u9053\u7406\u3002\n\n\u6ce8\u610f\u6211\u4eec\u8fd8\u8981\u5728\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\uff0c\u5f53\u524d\u662f\u5426\u5408\u6cd5\u3002\u4e0d\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5143\u7d20\uff0c\u5b58\u5728\u4e24\u4e2a\u79cd\u7c7b\u62c6\u51fa\u6765\u7684\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u3002\u8fd9\u663e\u7136\u4e0d\u80fd\u6bcf\u6b21 $O(n)$ \u6c42\uff0c\u4f46\u662f\u6ce8\u610f\u5230\u6bcf\u6b21\u6539\u4e24\u4e2a\u5173\u7cfb\uff0c\u53ea\u4f1a\u5bf9\u8fd9\u4e24\u4e2a\u70b9\u6709\u5f71\u54cd\uff0c$O(1)$ \u7684 check \u4e00\u4e0b\u8fd9\u4e24\u4e2a\u70b9\u662f\u5426\u5408\u6cd5\u5c31\u884c\u3002\u7136\u540e\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8868\u793a\u5f53\u524d\u662f\u5426\u5408\u6cd5\u3002\u6ce8\u610f\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u503c\uff0c\u4e5f\u8981\u8bb0\u5728\u64a4\u9500\u4fe1\u606f\u7684 struct \u4e2d\uff08\u64a4\u9500\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u4e5f\u8981\u76f8\u5e94\u7684\u88ab\u6539\u53d8\uff0c\u663e\u7136\uff09\u3002\n\n### 3. \u52a0\u4e0a\u5386\u53f2\u7248\u672c\n\n\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u6709\u5176\u4f9d\u8d56\u7684\u7248\u672c\uff0c\u9664\u4e86\u521d\u59cb\u8282\u70b90\u3002\u5f88\u5bb9\u6613\u8054\u60f3\u5230\u8fd9\u662f\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002\u628a\u6811\u5efa\u51fa\u6765\u3002\n\n\u548c\u5e8f\u5217\u7c7b\u4f3c\uff0c\u8003\u8651\u4e00\u4e2a\u64cd\u4f5c\u7684\u5f71\u54cd\u533a\u95f4\uff0c\u5e94\u8be5\u662f\u5b50\u6811-\u82e5\u5e72\u4e2a\u5b50\u5b50\u6811\uff08\u5b50\u5b50\u6811\u5b9a\u4e49\u4e3a\uff0c\u5b50\u6811\u4e2d\u67d0\u4e2a\u70b9\u7684\u5b50\u6811\uff09\u3002\u8003\u8651\u5b83\u7684dfs\u5e8f\uff0c\u5c31\u662f\u4e00\u6bb5\u533a\u95f4-\u82e5\u5e72\u4e2a\u5b50\u533a\u95f4\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5220\u9664\u64cd\u4f5c\uff0c\u7136\u540e\u628a\u5b83\u5220\u9664\u7684\u90a3\u4e2a\u70b9\u7684\u5f71\u54cd\u533a\u95f4\u5206\u88c2\u6210\u4e24\u90e8\u5206\u3002\u5173\u4e8e\u5177\u4f53\u548b\u5b9e\u73b0\uff0c\u5c31\u662f\u7ef4\u62a4\u4e00\u4e0b\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9 `mx`\uff0c\u7136\u540e\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\u7684dfs\u5e8f\u533a\u95f4\u4e3a `[l,r]`\uff0c\u52a0\u4e0a\u5f71\u54cd\u533a\u95f4 `[mx,l-1]`\uff0c\u7136\u540e\u66f4\u65b0 `mx=r+1` \u5373\u53ef\u3002\u5230\u6700\u540e\u5728\u52a0\u4e0a `[mx,odfn]`\uff0codfn\u5c31\u662f\u5b50\u6811\u7684dfs\u5e8f\u533a\u95f4\u53f3\u7aef\u70b9\uff08\u4ee3\u7801\u91cc\u5c31\u662f\u8fd9\u4e2a\u540d\u79f0\uff09\n\n\u6700\u540e\u5728dfs\u5e8f\u533a\u95f4\u4e0a\u8dd1\u7ebf\u6bb5\u6811\u5206\u6cbb\u5c31\u884c\u4e86\u3002\u522b\u5fd8\u8bb0\u6700\u540e\u8f93\u51fa\u7684\u662f `ans[dfn[i]]`\uff0c\u800c\u4e0d\u662f `ans[i]`\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace Flandre_Scarlet\n{\n    #define N 200005\n    #define F(i,l,r) for(int i=l;i<=r;++i)\n    #define D(i,r,l) for(int i=r;i>=l;--i)\n    #define Fs(i,l,r,c) for(int i=l;i<=r;c)\n    #define Ds(i,r,l,c) for(int i=r;i>=l;c)\n    #define MEM(x,a) memset(x,a,sizeof(x))\n    #define FK(x) MEM(x,0)\n    #define Tra(i,u) for(int i=G.st(u),v=G.to(i);~i;i=G.nx(i),v=G.to(i))\n    #define p_b push_back\n    #define sz(a) ((int)a.size())\n    #define all(a) a.begin(),a.end()\n    #define iter(a,p) (a.begin()+p)\n    int I() {char c=getchar(); int x=0; int f=1; while(c<'0' or c>'9') f=(c=='-')?-1:1,c=getchar(); while(c>='0' and c<='9') x=(x<<1)+(x<<3)+(c^48),c=getchar(); return ((f==1)?x:-x);}\n    template <typename T> void Rd(T& arg){arg=I();}\n    template <typename T,typename...Types> void Rd(T& arg,Types&...args){arg=I(); Rd(args...);}\n    void RA(int *p,int n) {F(i,1,n) *p=I(),++p;}\n\n    int n,m;\n    struct add{int t,u,v;}; // \u52a0\u7684\u4e00\u4e2a\u6761\u4ef6\uff08t=1\u751f\uff0ct=2\u514b\uff09\n    struct query{int fa; add e;}o[N]; // \u4e00\u4e2a\u64cd\u4f5c\uff08\u5982\u679c\u662f\u5220\u9664\u64cd\u4f5c\uff0c\u4ee4e.u=\u5220\u9664\u7684\u4f4d\u7f6e\uff09\n    void Input()\n    {\n        Rd(n,m);\n        F(i,1,m)\n        {\n            int f,t; Rd(f,t);\n            o[i].fa=f; o[i].e.t=t;\n            switch(t)\n            {\n                case 1: \n                case 2: {o[i].e.u=I(); o[i].e.v=I(); break;}\n                case 3: {o[i].e.u=I(); break;}\n            }\n        }\n    }\n    class Graph // \u5b58\u50a8\u56fe\u7684\u7c7b\n    {\n    public:\n        int head[N];\n        struct edge{int u,v,nx;}; vector<edge> E;\n        inline void adde(int u,int v)\n        {\n            E.p_b((edge){u,v,head[u]}); head[u]=sz(E)-1;\n        }\n        inline void add2(int u,int v) {adde(u,v),adde(v,u);}\n        inline int  st(int u) {return u==-1?-1:head[u];}\n        inline int  nx(int i) {return i==-1?-1:E[i].nx;}\n        inline int  to(int i) {return i==-1?-1:E[i].v;}\n        inline vector<edge> adds() {return E;}\n        inline void clear() {E.clear(); MEM(head,-1);}\n        Graph() {clear();}\n    }G;\n    class Union_Find_Back_Type // \u53ef\u64a4\u9500\u79cd\u7c7b\u5e76\u67e5\u96c6\n    {\n    public:\n        int fa[N*5],sz[N*5]; bool vis[N*5]; // \u4e94\u500d\u7a7a\u95f4\n        bool is_legal; // \u5f53\u524d\u662f\u5426\u5408\u6cd5\n        struct bak{int u,v,fv,su; bool legal;} bk[N*5]; int top=0; // \u628a\u5f53\u524d\u662f\u5426\u5408\u6cd5\u4e5f\u8981\u8bb0\u4e0b\n        int P[N][5],tot;\n        \n        void clear(int n) \n        {\n            tot=0;\n            F(i,1,n) F(j,0,4) P[i][j]=++tot; \n            is_legal=1;\n\n            F(i,1,tot) fa[i]=i,sz[i]=1,vis[i]=0; // \u8fd9\u91cc\u5faa\u73af\u5230tot \uff08\u51995*n\u4e5f\u53ef\u4ee5\uff09\n            while(top) bk[top--]=(bak){0,0,0,0,0};\n        }\n        int  find(int x) {return x==fa[x]?x:find(fa[x]);}\n        void merge(int u,int v)\n        {\n            u=find(u),v=find(v);\n            if (u==v) return;\n            if (sz[u]<sz[v]) swap(u,v);\n            bk[++top]=(bak){u,v,fa[v],sz[u],is_legal};\n            fa[v]=u; sz[u]+=sz[v];\n        }\n        bool same(int u,int v) {return find(u)==find(v);}\n        bool illegal(int u) // \u5224\u65adu\u662f\u5426\u4e0d\u5408\u6cd5\u4e86\n        {\n            F(i,0,4) vis[find(P[u][i])]=0;\n            F(i,0,4) \n            {\n                int f=find(P[u][i]);\n                if (vis[f]) return true;\n                vis[f]=1;\n            }\n            return false;\n        }\n        void ke(int u,int v) // \u514b\n        {\n            F(j,0,4) merge(P[u][j],P[v][(j+2)%5]);\n            if (illegal(u) or illegal(v)) is_legal=0;\n            // \u6bcf\u6b21\u66f4\u65b0\u4e00\u4e0bu,v\u5373\u53ef\n        }\n        void sh(int u,int v) // \u751f\n        {\n            F(j,0,4) merge(P[u][j],P[v][(j+1)%5]);\n            if (illegal(u) or illegal(v)) is_legal=0;\n        }\n        void addtype(add e)\n        {\n            if (e.t==1) sh(e.u,e.v);\n            else        ke(e.u,e.v);\n        }\n        void back() // \u64a4\u9500\u4e00\u6b21\n        {\n            bak tmp=bk[top--];\n            int u=tmp.u,v=tmp.v;\n            fa[v]=tmp.fv; sz[u]=tmp.su;\n            is_legal=tmp.legal;\n        }\n    }un;\n    int ans[N];\n    class SegmentTree // \u975e\u5e38\u677f\u5b50\n    {\n    public:\n        vector<add> es[N<<2];\n        #define ls ix<<1\n        #define rs ix<<1|1\n        #define lson ls,L,mid\n        #define rson rs,mid+1,R\n        #define inx int ix=1,int L=1,int R=(m+1)\n        void adde(int l,int r,add e,inx)\n        {\n            if (l>r) return;\n            if (l<=L and R<=r)\n            {\n                es[ix].p_b(e);\n                return;\n            }\n            int mid=(L+R)>>1;\n            if (l<=mid) adde(l,r,e,lson);\n            if (mid<r)  adde(l,r,e,rson);\n        }\n        void solve(inx)\n        {\n            int rec=un.top;\n            for(auto e:es[ix]) un.addtype(e);\n            if (L==R)\n            {\n                ans[L]=un.is_legal;\n            }\n            else\n            {\n                int mid=(L+R)>>1;\n                solve(lson); solve(rson);\n            }\n            while(un.top>rec) un.back();\n        }\n    }T;\n\n    int idfn[N],odfn[N],tick=0;\n    void DFS_init(int u) // \u5148\u5904\u7406\u51fadfs\u5e8f\u533a\u95f4\n    {\n        idfn[u]=++tick;\n        Tra(i,u) DFS_init(v);\n        odfn[u]=tick;\n    }\n    int mx[N];\n    void DFS(int u)\n    {\n        if (o[u].e.t==3) // \u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u66f4\u65b0\u4e00\u4e0b\u5f71\u54cd\u533a\u95f4\n        {\n            int p=o[u].e.u;\n            T.adde(mx[p],idfn[u]-1,o[p].e);\n            mx[p]=odfn[u]+1;\n        }\n        Tra(i,u) DFS(v);\n    }\n    void Soviet()\n    {\n        G.clear();\n        F(i,1,m) G.adde(o[i].fa,i); // \u52a0\u8fb9\n\n        DFS_init(0);\n        F(i,0,m) mx[i]=idfn[i];\n\n        DFS(0);\n        F(i,1,m) if (o[i].e.t!=3) T.adde(mx[i],odfn[i],o[i].e);\n        // \u8fd9\u4e9b\u5c31\u662f\u4e0a\u9762\u63d0\u5230\u7684\u5904\u7406\u4e00\u4e2a\u533a\u95f4\u4e2d\u5220\u9664\u4e86\u82e5\u5e72\u7684\u5b50\u533a\u95f4\u7684\u65b9\u6cd5\n        /*\n        \u5c31\u662f\uff0c\u7ef4\u62a4\u4e00\u4e0b\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9 mx\n        \u7136\u540e\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\u7684dfs\u5e8f\u533a\u95f4\u4e3a [l,r]\uff0c\u52a0\u4e0a\u5f71\u54cd\u533a\u95f4 [mx,l-1]\uff0c\u7136\u540e\u66f4\u65b0 mx=r+1 \u5373\u53ef\u3002\n        \u5230\u6700\u540e\u5728\u52a0\u4e0a [mx,odfn]\uff0codfn\u5c31\u662f\u5b50\u6811\u7684dfs\u5e8f\u533a\u95f4\u53f3\u7aef\u70b9\n        \uff08\u4ee3\u7801\u91cc\u5c31\u662f\u8fd9\u4e2a\u540d\u79f0\uff09\n        */\n\n        un.clear(n);\n        T.solve();\n        F(i,1,m) puts(ans[idfn[i]]?\"excited\":\"naive\");\n    }\n    void IsMyWife()\n    {\n        Input();\n        Soviet();\n    }\n}\n#undef int //long long\nint main()\n{\n    Flandre_Scarlet::IsMyWife();\n    getchar();\n    return 0;\n}\n```\n\nPS: \u795e\u5947\u7684\u662f\uff0c\u6700\u957f\u7684\u4e0d\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb (\u7ea61KB)\uff0c\u800c\u662f\u53ef\u64a4\u9500\u79cd\u7c7b\u5e76\u67e5\u96c6 (\u7ea62KB)",
        "postTime": 1608131276,
        "uid": 106252,
        "name": "LightningUZ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3767 \u3010\u819c\u6cd5\u3011"
    },
    {
        "content": "\u6211\u6765\u8865\u5145\u89e3\u91ca\u4e00\u4e0b\u9898\u89e3\u5427\u3002\n\n\u64cd\u4f5c\u5f62\u6210\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002\n\n\u6211\u4eec\u5e0c\u671b\u52a0\u5165\u64cd\u4f5c\u4f5c\u7528\u4e8e\u4e00\u4e2a\u8fde\u7eed\u7684dfs\u533a\u95f4\uff0c\u5e76\u4e14\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\u3002\u56e0\u4e3a\u5220\u9664\u64cd\u4f5c\u662f\u4e0d\u597d\u641e\u7684\u3002\n\ndfs\u4e00\u904d\u6811\uff0c\u5982\u679c\u9047\u5230\u5220\u9664\uff0c\u90a3\u4e48\u90a3\u4e2a\u52a0\u5165\u7684\u533a\u95f4\u5c31\u88ab\u780d\u6210\u4e86\u4e24\u4e2a\u533a\u95f4\u3002\n\n\u8fd9\u6837\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e2a\u533a\u95f4\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002\n\n\u4e4b\u540e\u904d\u5386\u4e00\u904d\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u95ee\u9898\u5c31\u53ea\u5269\u4e0b\u52a0\u8fb9\uff1b\u5982\u679c\u52a0\u7684\u8fb9\u7684\u4e24\u70b9\u5df2\u7ecf\u76f8\u8fde\u901a\uff0c\u8be2\u95ee\u4e24\u70b9\u7684\u5dee\u3002\n\n\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u8ddffather\u7684\u5dee\u3002\u8fd9\u6837\u4fe1\u606f\u663e\u7136\u662f\u53ef\u4ee5\u5408\u5e76\u7684\u3002\n\n\u5982\u679c\u8981\u95ee\u4e24\u4e2a\u70b9\u7684\u5dee\uff0c\u53ea\u8981\u77e5\u9053\u4ed6\u4eec\u8ddf\u6839\u7684\u5dee\uff0c\u518d\u51cf\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N=100010;\ntypedef vector<int>::iterator iter;\nint n,m,f[N];vector<int>son[N];\nstruct query\n{\n    int type,x,y;\n}q[N];int last[N];\nint dfn[N];\n\nconst int NL=5000000;\nvector<int>a[N*4];\nint dis[N],sz[N];\nbool ok[N];\nstruct state\n{\n    int i,f0,sz0,d0;\n    state (int x)\n    {\n        i=x;f0=f[x];sz0=sz[x];d0=dis[x];\n    }\n    void back()\n    {\n        f[i]=f0;\n        sz[i]=sz0;\n        dis[i]=d0;\n    }\n};\nvector<state>st[N*4];\ntypedef vector<state>::iterator is;\nint ql,qr,i;\n#define mid (l+r>>1)\n#define cl (k*2)\n#define cr (cl+1)\nvoid add(int k,int l,int r)\n{\n    if(ql<=l&&qr>=r)\n    {\n        a[k].push_back(i);\n        return ;\n    }\n    if(ql<=mid)add(cl,l,mid);\n    if(qr>mid)add(cr,mid+1,r);\n}\n\nint tot;\nvoid dfs(int x)\n{\n    dfn[x]=++tot;\n    if(q[x].type==3) \n    {\n        i=q[x].x;\n        if(!(ql=last[i]))q[x].x=0;\n        else \n        {\n            qr=dfn[x]-1;\n            add(1,1,m);\n            last[i]=0;\n        }\n    }\n    else last[x]=dfn[x];\n    \n    for(iter it=son[x].begin();it!=son[x].end();++it) \n     dfs(*it);\n    if(q[x].type==3) \n    {\n        if(q[x].x) last[q[x].x]=tot+1;\n    }\n    else \n    {\n       if(ql=last[x])\n       {\n            i=x;qr=tot;\n            add(1,1,m);\n         last[x]=0;\n       }\n    }\n}\n\nvoid find(int x,int &fx,int &dx)\n{\n    dx=0;\n    while(f[x])\n    {\n        dx+=dis[x];\n        x=f[x];\n    }\n    fx=x;\n}\nvoid solve(int k,int l,int r)\n{\n    for(iter it=a[k].begin();it!=a[k].end();++it)\n    {\n        i=*it;\n        int x=q[i].x,y=q[i].y,d=q[i].type,dx,dy,fx,fy;\n        find(x,fx,dx);find(y,fy,dy); \n        if(fx==fy)\n         if(((dx-dy)%5+5)%5!=d)\n         { \n           if(st[k].size())\n           for(is it2=st[k].end();--it2>=st[k].begin();) it2->back();\n           return;\n         }\n         else continue;\n         \n        st[k].push_back(state(fx));st[k].push_back(state(fy));\n        \n        if(sz[fx]>sz[fy]){swap(fx,fy);swap(dx,dy);d=-d;}\n        f[fx]=fy;\n        dis[fx]=-dx+d+dy;\n        sz[fy]+=sz[fx];\n    } \n    \n    if(l==r) ok[l]=1;\n    else { solve(cl,l,mid);solve(cr,mid+1,r); }\n    \n    if(st[k].size())\n    for(is it2=st[k].end();--it2>=st[k].begin();) \n     it2->back();\n} \n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i)\n    {\n        scanf(\"%d\",f+i);\n        son[f[i]].push_back(i);\n        scanf(\"%d%d\",&q[i].type,&q[i].x);\n        if(q[i].type<3)scanf(\"%d\",&q[i].y);\n    }\n    \n    for(iter it=son[0].begin();it!=son[0].end();++it) \n     dfs(*it);\n    \n    for(i=1;i<=m;++i){sz[i]=1;f[i]=0;}\n    solve(1,1,m);\n    \n    for(i=1;i<=m;++i)\n    if(ok[dfn[i]]) puts(\"excited\");\n    else puts(\"naive\");\n}\n```\n\n",
        "postTime": 1494601640,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3767 \u3010\u819c\u6cd5\u3011"
    },
    {
        "content": "# \u4e00\u53e5\u8bdd\u9898\u610f\n\n\nN\u4e2a\u70b9\uff0c\u652f\u6301\u52a0\u8fb9\u3001\u5220\u8fb9\u3001\u53ef\u6301\u4e45\u5316\uff0c\u6bcf\u6761\u8fb9\u8981\u6c42\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u7684\u5dee\u4e3a1\u62162\uff08\u6a215\u610f\u4e49\u4e0b\uff09\uff0c\u95ee\u6bcf\u4e2a\u65f6\u523b\u662f\u5426\u6709\u5408\u6cd5\u65b9\u6848\u3002\n\n\n# \u63d0\u793a\n\n\n\u5148\u770b\u770b\u8fd9\u4e24\u9053\u9898\uff08\u53ef\u81ea\u884c\u641c\u7d22\u76f8\u5173\u9898\u89e3\uff09\uff1a\n\n\n- [\u6d1b\u8c37P2024\u2014\u2014\u98df\u7269\u94fe](https://www.luogu.org/problem/show?pid=2024)\n\n- [BZOJ4025\u2014\u2014\u4e8c\u5206\u56fe](http://www.lydsy.com/JudgeOnline/problem.php?id=4025)\n\n\n\u5927\u6982\u4f1a\u505a\u4e86\u5427\uff1f\uff08\u9003\n\n\n# \u5177\u4f53\u505a\u6cd5\n\n\n\u6211\u4eec\u628a\u64cd\u4f5c\u7684\u65f6\u95f4\u7ed3\u6784\u5efa\u7acb\u51fa\u6765\uff0c\u53d1\u73b0\u662f\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u5728\u7236\u4eb2\u8282\u70b9\u64cd\u4f5c\u540e\u7684\u56fe\u4e0a\u8fdb\u884c\u3002\n\n\n\u7136\u540e\u6bcf\u4e2a\u52a0\u5165/\u5220\u9664\u64cd\u4f5c\u6240\u5f71\u54cd\u7684\u8303\u56f4\u662f\u4ed6\u7684\u5b50\u6811\uff0c\u5728dfs\u5e8f\u4e0a\u662f\u4e00\u6bb5**\u8fde\u7eed**\u7684\u533a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\n\u5206\u6cbb\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5e26\u6743\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u6df1\u5ea6\uff0c\u4ee3\u8868\u4e0e\u6839\u8282\u70b9\u7684\u5dee\u503c\uff0c\u6267\u884c\u5408\u5e76\u64cd\u4f5c\u65f6\uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\u3002\n\n\n\u6ce8\u610f\u8981\u652f\u6301\u64a4\u9500\uff0c\u6240\u4ee5**\u4e0d\u80fd\u8def\u5f84\u538b\u7f29**\u3002\n",
        "postTime": 1494425480,
        "uid": 15326,
        "name": "will7101",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3767 \u3010\u819c\u6cd5\u3011"
    }
]