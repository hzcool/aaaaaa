[
    {
        "content": "\u4e00\u4e2a\u5f88 naive \u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\uff0c\u53ef\u4ee5\u5148\u5efa\u51fa\u64cd\u4f5c\u6811\uff0c\u53ca\u5bf9\u4e8e\u7b2c $i$ \u6b21\u64cd\u4f5c\uff0c\u82e5\u4e3a $2$\uff0c$x$ \u5411 $i$ \u8fde\u8fb9\uff0c\u5426\u5219 $i-1$ \u5411 $i$ \u8fde\u8fb9\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u6811\u4e0a DFS \u4e00\u904d\u6c42\u51fa\u6240\u6709\u7b54\u6848\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u652f\u6301\u8fde\u8fb9\u5220\u8fb9\u548c\u52a8\u6001\u7ef4\u62a4\u8fde\u901a\u5757\u5185\u6743\u503c\u4fe1\u606f\u3002\n\n\u5c06\u6743\u503c\u79bb\u6563\u5316\uff0c\u7531\u4e8e\u540e\u52a0\u8fdb\u6765\u7684\u8fb9\u4e00\u5b9a\u5148\u5220\uff0c\u8003\u8651\u5e76\u67e5\u96c6+\u5206\u5757\uff0c\u7ef4\u62a4\u8fde\u901a\u5757\u4e2d\u6bcf\u4e00\u5757\u7684\u6bcf\u4e00\u79cd\u6743\u503c\u4e2a\u6570\u3002\n\n\u8fd9\u6837\u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a $O(n\\sqrt n)$\uff0c\u7531\u4e8e\u6bd2\u7624\u7684\u7a7a\u95f4\u88ab\u5361\u6389\u4e86\u3002\n\n\u4f46\u60a8\u53ef\u4ee5\u76f4\u63a5\u628a\u5757\u957f\u8c03\u4e3a $20$\uff0c\u7136\u540e\u6211 T \u4e86\u4e00\u4e2a\u70b9\u3002\n\n\u4f46\u6211\u4eec\u53ef\u4ee5\u628a\u5206\u5757\u7684\u6570\u7ec4\u5f00\u6210 short\uff0c\u56e0\u4e3a $n/$\u5757\u5927\u5c0f \u4e0d\u4f1a\u70b8 short\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u8c03\u5757\u957f\u4e3a $40$\uff0c\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u3002\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define re register\nusing namespace std;\n#define gc getchar\ninline int read(){\n\tre int t=0;re char v=gc();\n\twhile(v<'0')v=gc();\n\twhile(v>='0')t=(t<<3)+(t<<1)+v-48,v=gc();\n\treturn t;\n}\nint n,m,A[100002],B[100002],head[100002],cnt,ans[100002],blk,K,fa[100002],sz[100002];\nshort f[100002][47];\nchar typ[100002];\nstruct edge{int to,next;}e[100002];\nstruct node{int x,y;bool operator <(const node &a)const{return x<a.x;};}p[100002];\ninline void add(re int x,re int y){e[++cnt]=(edge){y,head[x]},head[x]=cnt;}\ninline int root(re int x){return x==fa[x]?x:root(fa[x]);}\ninline void dfs(re int x){\n\tre bool kk=0;\n\tif(typ[x]==1){\n\t\tA[x]=root(A[x]),B[x]=root(B[x]);\n\t\tif(A[x]^B[x]){\n\t\t\tkk=1;\n\t\t\tif(sz[A[x]]>sz[B[x]])A[x]^=B[x]^=A[x]^=B[x];\n\t\t\tfa[A[x]]=B[x],sz[B[x]]+=sz[A[x]];\n\t\t\tfor(re int i=1;i<=K;++i)f[B[x]][i]+=f[A[x]][i];\n\t\t}\n\t}\n\telse if(typ[x]==3){\n\t\tre int s=B[x],y=0,R=root(A[x]);\n\t\tif(s>sz[R])ans[x]=-1;\n\t\telse{\n\t\t\tfor(re int i=1;i<=K&&!y;++i){\n\t\t\t\tif(s>f[R][i])s-=f[R][i];\n\t\t\t\telse y=i;\n\t\t\t}\n\t\t\tfor(re int i=(y-1)*blk+1;i<=y*blk&&s;++i)if(root(p[i].y)==R)--s,ans[x]=p[i].x;\n\t\t}\n\t}\n\tfor(re int i=head[x];i;i=e[i].next)dfs(e[i].to);\n\tif(kk){\n\t\tfor(re int i=1;i<=K;++i)f[B[x]][i]-=f[A[x]][i];\n\t\tfa[A[x]]=A[x],sz[B[x]]-=sz[A[x]];\n\t}\n}\nint main(){\n\tn=read(),m=read(),blk=46,blk=n/blk,K=(n-1)/blk+1;\n\tfor(re int i=1;i<=n;++i)p[i]=(node){read(),i},sz[fa[i]=i]=1;\n\tsort(p+1,p+n+1);\n\tfor(re int i=1;i<=n;++i){\n\t\tre int x=(i-1)/blk+1;\n\t\t++f[p[i].y][x];\n\t}\n\tfor(re int i=1;i<=m;++i){\n\t\ttyp[i]=read();\n\t\tif(typ[i]==1)add(i-1,i),A[i]=read(),B[i]=read();\n\t\telse if(typ[i]==2)add(read(),i);\n\t\telse add(i-1,i),A[i]=read(),B[i]=read();\n\t}\n\tdfs(0);\n\tfor(re int i=1;i<=m;++i)if(typ[i]==3)printf(\"%d\\n\",ans[i]);\n}\n```\n",
        "postTime": 1615766530,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "\u9898\u89e3\uff1a[Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e"
    },
    {
        "content": "\u867d\u7136\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48$O(n\\sqrt{Nlogn})$\u7684\u505a\u6cd5\u4f1a\u8fd9\u4e48\u5757\u2026\u2026\n\n\u867d\u7136\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48$O(nlogn)$\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fc720mb\u7684\u5185\u5b58\u9650\u5236\n\n~~\u542c\u8bf4\u6807\u7b97\u662f\u542f\u53d1\u5f0f\u5408\u5e76bitset\u7684\u65f6\u5019\u6574\u4e2a\u4eba\u90fd\u60ca\u4e86~~\n\n~~\u5f53\u7136\u8fd9\u4e1c\u897f\u73b0\u5728\u8fc7\u4e0d\u53bb\u4e86~~\n___________\n\n## \u672c\u9898\u9898\u89e3\n\n\u597d\u4e86\u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u9898\u8ba9\u6211\u4eec\u5e72\u4ec0\u4e48\u2026\u2026\n\n\u6c42\u8054\u901a\u5757kth\u652f\u6301\u52a0\u8fb9?\n\n\u8fd9\u4e0d\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u88f8\u9898~~(HNOI2012\u6c38\u65e0\u4e61)~~\u5417\uff1f\n\n\u597d\u7684\u770b\u8d77\u6765\u6211\u4eec\u5ffd\u7565\u4e86\u64cd\u4f5c2\u2026\u2026\uff0c\u6211\u4eec\u8fd8\u8981\u8d44\u74f7\u56de\u6863~~(Load)~~\u64cd\u4f5c\uff0c\u6b64\u65f6\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u590d\u6742\u5ea6\u5c31gg\u4e86(\u56e0\u4e3a\u6211\u53ef\u4ee5\u4e00\u76f4\u5728\u4f60\u7ebf\u6bb5\u6811\u5408\u5e76\u590d\u6742\u5ea6\u975e\u5e38\u5927\u7684\u4e00\u6b65\u56de\u6863\u7136\u540e\u590d\u6742\u5ea6\u5c31\u88ab\u5361\u6210$O(n^2)$\u4e86)\n\n\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u529e\u5462\uff1f\n\n\u5f53\u7136\u662f\u4e07\u80fd\u7684\u6839\u53f7\u7b97\u6cd5\u54af\n\n\u90a3\u4e48\u4f17\u6240\u5468\u77e5\u7684\uff0c\u6c42kth\u6709\u4e24\u4e2a\u7b97\u6cd5\uff0c\u4e00\u4e2a\u662f\u4e8c\u5206\u6cd5\uff0c\u800c\u53e6\u4e00\u4e2a\u5c31\u662f\u5927\u5bb6\u559c\u95fb\u4e50\u89c1\u7684\u503c\u57df\u5206\u5757\u7b97\u6cd5\u4e86\n\n\u5982\u679c\u60a8\u8fd8\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u503c\u57df\u5206\u5757\u6c42kth\u7684\u8bdd\uff0c\u8fd9\u91cc\u7b80\u5355\u7684\u79d1\u666e\u4e00\u4e0b\n\n\u6211\u4eec\u628a\u6743\u503c\u5206\u6210$O(\\sqrt{N})$\u5757\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u56de\u7b54\u503c\u4e3ai\u7684\u6570\u5b57\u6070\u597d\u6709\u591a\u5c11\u4e2a\u8fd9\u4e2a\u95ee\u9898\u4ee5\u53ca\u7b2ci\u4e2a\u503c\u57df\u5757\u5185\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u8fd9\u4e2a\u95ee\u9898\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u91c7\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u6c42\u51fakth\n\n**\u5148\u679a\u4e3ekth\u5728\u54ea\u4e00\u4e2a\u503c\u57df\u5757\uff0c\u7136\u540e\u5728\u679a\u4e3ekth\u5230\u5e95\u662f\u54ea\u4e00\u4e2a\u6570\u5b57**\n\n\u8fd9\u6837\u505a\u7684\u597d\u5904\u5c31\u662f\u6211\u4eec\u65e0\u9700\u50cf\u4e8c\u5206\u4e00\u6837\u56de\u7b54\u6bd4mid\u5927\u7684\u6570\u5b57\u6709\u51e0\u4e2a\u8fd9\u4e2a\u4e0d\u662f\u5f88\u597d\u505a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u56de\u7b54\u6709\u51e0\u4e2a\u6570\u5b57\u843d\u5728\u7b2ci\u4e2a\u5757\u91cc\u4ee5\u53ca\u6709\u51e0\u4e2a\u6570\u5b57\u7684\u503c\u6070\u597d\u4e3ai\u8fd9\u4e24\u4e2a\u6bd4\u8f83\u597d\u56de\u7b54\u7684\u95ee\u9898\u5c31\u53ef\u4ee5\u4e86\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u5feb\u901f\u7684\u56de\u7b54\u8fd9\u4e24\u4e2a\u95ee\u9898\n\n\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\u6211\u4eec\u628a\u70b9\u6309\u7167\u6743\u503c\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u5c06\u6c42\u7b2ck\u5c0f\u503c\u8f6c\u6210\u4e86\u6c42\u7b2ck\u5c0f\u70b9\u7684\u95ee\u9898\u4e86\n\n### case1:\u6c42\u6709\u51e0\u4e2a\u70b9\u7684\u503c\u6070\u597d\u4e3ai\n\n\u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u79bb\u6563\u5316\u4e4b\u540e\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5c31\u53ea\u67090\u548c1\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u503c\u4e3ai\u7684\u70b9\u662f\u5426\u548cx\u76f8\u8fde\n\n\u8fd9\u4e2a\u95ee\u9898\u662f\u666e\u53ca\u7ec4\u5e76\u67e5\u96c6\u95ee\u9898\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\n\n### case2:\u6c42\u6709\u51e0\u4e2a\u70b9\u7684\u503c\u6070\u597d\u843d\u5728\u7b2ci\u4e2a\u503c\u57df\u5757\u5185\n\n\u4e00\u4e2a\u7b80\u5355\u7c97\u66b4\u7684\u601d\u8def\u662f\u5e76\u67e5\u96c6\u4e0a\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a$O(\\sqrt{N})$\u7684\u6570\u7ec4\uff0c\u7136\u540e\u5408\u5e76\u4e24\u4e2a\u70b9\u7684\u65f6\u5019\u66b4\u529b\u628a\u4e24\u4e2a\u6570\u7ec4\u76f8\u52a0\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42kth\u4e86\n\n\u7b49\u7b49\u554a\uff0c$20mb$\u7684\u7a7a\u95f4\u60a8\u8ddf\u6211\u63d0$O(n\\sqrt{n})$\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff1f\n\n\u8fd9\u79cd\u884c\u4e3a\u5c31\u662f\u5728\u81ea\u627emle\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u8003\u8651\u6709\u6ca1\u6709\u4ec0\u4e48trick\u53ef\u4ee5\u5e2e\u6211\u4eec\u5361\u7a7a\u95f4\n\n\u5982\u679c\u6211\u4eec\u4f7f\u7528\u6309size\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u5e76\u67e5\u96c6\u7684\u6811\u9ad8\u662f$O(logn)$\u7ea7\u522b\u7684\uff0c\u90a3\u4e48\u8fd9\u53c8\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f\n\n\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u628a\u6570\u7ec4\u6362\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u7684\u8bdd\u6b64\u65f6\u6211\u4eec\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u9aa4\u964d\u81f3$O(nlogn)$\n\n\u5177\u4f53\u70b9\u6765\u8bb2\u6211\u4eec\u5e76\u67e5\u96c6\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5b58\u4e0a\u4e24\u4e2a\u503c$(id,cnt)$\u8868\u793a\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6709$cnt$\u4e2a\u5c5e\u4e8e\u7f16\u53f7\u4e3a$id$\u7684\u503c\u57df\u5757\u7684\u70b9,\u67e5kth\u7684\u65f6\u5019for\u4e00\u904d\u8fd9\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5c31\u53ef\u4ee5\u4e86\n\n\u5982\u6b64\u8fd9\u822c\u5206\u6790\u7684\u8bdd\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u8868size\u4e3a$\\min(size(p),\\sqrt{N})$\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(nlogn)$\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u70b9\u6700\u574f\u60c5\u51b5\u4e0b\u4f1a\u5728\u6bcf\u4e2a\u7956\u5148\u5904\u88ab\u5b58\u50a8\u4e00\u6b21\uff0c\u7531\u4e8e\u8fd9\u4e2alog\u76f8\u5f53\u7684\u865a\u6240\u4ee5\u6211\u4eec\u7684\u6570\u7ec4\u957f\u5ea6\u53ea\u9700\u8981\u5f0010~20n\u5c31\u53ef\u4ee5\u4e86\n\n\u4f46\u662f\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5c31\u975e\u5e38\u7684\u4ee4\u4eba\u5934\u75bc\u4e86\uff0c\u6211\u5199\u4e86\u4e00\u4e2a\u5f52\u5e76\u6765\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\uff0c\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u6211\u4eec\u5728\u5c06\u4e24\u4e2a\u94fe\u8868\u5408\u5e76\u7684\u65f6\u5019\u5fc5\u987b\u4fdd\u8bc1\u662f\u628a\u5c0f\u7684\u94fe\u8868\u4e00\u4e2a\u4e00\u4e2a\u7684\u63d2\u5165\u5230\u5927\u94fe\u8868\u91cc\uff0c\u4e3a\u4e86\u907f\u514d\u88ab\u5361\u7a7a\u95f4\u6211\u5408\u5e76\u7684\u662f\u4e24\u4e2a\u5355\u5411\u94fe\u8868(\u8fd9\u4e1c\u897f\u5341\u5206\u6076\u5fc3\uff0c\u7ec6\u8282\u76f8\u5f53\u591a)\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u89e3\u51b3\u4e86\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u7684\u95ee\u9898\u4e86\uff0c\u4e5f\u89e3\u51b3\u4e86kth\u7684\u95ee\u9898\u4e86\n\n\u5f53\u7136\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4ec5\u4ec5\u662f\u7528$O(n\\sqrt{nlogn})$\u7684\u590d\u6742\u5ea6\u89e3\u51b3\u4e86\u6c38\u65e0\u4e61\u8fd9\u9898\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u652f\u6301\u64cd\u4f5c2\uff0c\u4e5f\u5c31\u662f\u56de\u6863\u64cd\u4f5c\n\n### case3:\u56de\u6863\n\n\u6211\u88ab\u8fd9\u4e2a\u64cd\u4f5c\u9898\u610f\u6740\u4e86\u597d\u51e0\u56de\n\n\u8bf7\u6ce8\u610f\u64cd\u4f5c2\u5c31\u662f\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8ba9\u8fd9\u5f20\u56fe**\u5b8c\u7f8e**\u7684\u56de\u5230\u7b2cx\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u72b6\u6001\uff0c**\u4e0d\u662f\u5220\u9664\u6240\u6709\u6dfb\u52a0\u65f6\u95f4\u5927\u4e8ex\u7684\u8fb9**\n\n\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u7684\u533a\u522b\u5c31\u662f\u6211\u4eec\u751a\u81f3\u4f1a**\u5220\u9664\u64cd\u4f5c\u65f6\u95f4\u5927\u4e8ex\u7684\u56de\u6863\u64cd\u4f5c**\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u8be5\u600e\u4e48\u63cf\u8ff0\u56de\u6863\u5173\u7cfb\u5462\uff1f\n\n\u6211\u4eec\u628a\u6240\u6709\u7684\u64cd\u4f5c\u770b\u6210\u4e00\u9897\u6811\uff0c\u6211\u4eec\u73b0\u5728\u53ea\u9700\u8981\u5b58\u50a8\u4e00\u4e0b\u7b2cx\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u7248\u672c\u53f7\u5c31\u884c\u4e86\uff0c\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5728\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684\u7248\u672c\u4e0a\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7248\u672c(\u5176\u5b9e\u8fd9\u4e1c\u897f\u5c31\u662f\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784)\n\n\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u8bbe\u5f53\u524d\u7684\u7248\u672c\u53f7\u4e3a$father$,\u4e00\u5f00\u59cb\u7684\u7248\u672c\u662f1\uff0c\u4e5f\u5c31\u662f\u4ec0\u4e48\u64cd\u4f5c\u90fd\u4e0d\u505a\n\n\u90a3\u4e48\u7b2ci\u4e2a\u64cd\u4f5c1\u4f1a\u8ba9\u7248\u672c\u53f7\u53d8\u6210i+1\uff0c\u56e0\u4e3a\u56fe\u88ab\u6539\u53d8\u4e86\uff0c**\u6b64\u65f6\u6211\u4eec\u5728father\u548ci+1\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9**\uff0c\u7136\u540e\u4ee4$father=i+1$\n\n\u8be2\u95ee\u64cd\u4f5c\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u56fe\u7684\u7248\u672c\u53f7\uff0c\u6240\u4ee5\u7b2ci\u6b21\u8be2\u95ee\u65f6\u7684\u7248\u672c\u53f7\u7b49\u4e8e\u7b2ci-1\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u7248\u672c\u53f7\n\n**\u56de\u6863\u64cd\u4f5c\u4e4b\u540e\u7684\u7248\u672c\u53f7\u4e3a\u7b2cx\u6b21\u64cd\u4f5c\u7ed3\u675f\u4e4b\u540e\u7684\u7248\u672c\u53f7**(\u8fd9\u4e1c\u897f\u53ef\u80fd\u6709\u70b9\u62d7\u53e3\uff0c\u591a\u8bfb\u51e0\u904d\u4f60\u5c31\u4f1a\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u4e86)\uff0c\u6b64\u65f6\u6211\u4eec\u5c06father\u66f4\u6539\u4e3a\u7b2cx\u65f6\u523b\u4e4b\u540e\u7684\u7248\u672c\u53f7\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4f1a\u5efa\u51fa\u4e00\u68f5\u4ee51\u4e3a\u6839\u7684\u6709\u6839\u6811\u6765\uff0c\u7b2ci\u4e2a\u7248\u672c\u6240\u62e5\u6709\u7684\u8fb9\u5c31\u662fi\u52301\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u9897\u64cd\u4f5c\u6811\u4e0adfs,\u538b\u6808\u7684\u65f6\u5019\u76f4\u63a5\u5728\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u4e0a\u8fdb\u884c\u8fde\u8fb9\u5373\u53ef\uff0c\u800c\u5f39\u6808\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u52a8\u4e00\u4e9b\u8111\u7b4b\u4e86\n\n\u4f17\u6240\u5468\u77e5\uff0c\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u662f\u8d44\u74f7\u64a4\u9500\u64cd\u4f5c\u7684\uff0c\u4e00\u822c\u72b6\u6001\u4e0b\u6211\u4eec\u5f00\u4e00\u4e2a\u6808\u8bb0\u5f55\u4e00\u4e0b\u4ec0\u4e48\u4e1c\u897f\u88ab\u4fee\u6539\u4e86\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5f39\u6808\u6765\u5b9e\u73b0\u5feb\u901f\u56de\u6863\uff0c\u4e3a\u4ec0\u4e48\u5462?\n\n\u56e0\u4e3a\u6211\u4eec\u4e3a\u4e86\u5361\u7a7a\u95f4\uff0c\u5728\u5408\u5e76\u4e24\u4e2a\u5e76\u67e5\u96c6\u8282\u70b9u\u548cv\u7684\u65f6\u5019\u76f4\u63a5\u5c06v\u7684\u94fe\u8868\u63a5\u5230\u4e86u\u7684\u94fe\u8868\u4e0a\uff0c\u800c\u4e0d\u662f\u590d\u5236\u4e86\u4e00\u4efd\u65b0\u7684\u94fe\u8868(\u6ce8\u610f\u5982\u679c\u590d\u5236\u4e86\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u7a7a\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u4e0d\u5bf9)\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u9700\u8981\u628a\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868**\u76f8\u51cf**,\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5728\u5927\u94fe\u8868\u5f53\u4e2d\u5220\u6389\u5c0f\u94fe\u8868\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd9\u4e2a\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u5f52\u5e76\u6765\u5b9e\u73b0\uff0c\u5f53\u7136\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u5355\u5411\u94fe\u8868\uff0c\u7ec6\u8282\u540c\u6837\u4f1a\u975e\u5e38\u7684\u6076\u5fc3\uff0c\u7ec6\u8282\u90e8\u5206\u53ef\u4ee5\u81ea\u884c\u770b\u6211\u7684\u4ee3\u7801\n\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u987a\u5229\u5904\u7406\u4e86\u56de\u6863\u64cd\u4f5c\uff0c\u63a5\u4e0b\u6765\u628a\u8be2\u95ee\u79bb\u7ebf\u4e00\u4e0b\u6302\u5230\u6811\u7684\u5bf9\u5e94\u8282\u70b9\u4e0a\u5c31\u53ef\u4ee5\u4e86\u2026\u2026\n\n\u6240\u4ee5\u603b\u7ed3\u4e00\u4e0b\u8fd9\u9898\u5c31\u662f\u7ef4\u62a4\u4e00\u4e2a\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\uff0c\u5c06\u8be2\u95ee\u79bb\u7ebf\u4e4b\u540e\u628a\u7248\u672c\u6811\u9020\u51fa\u6765\u7136\u540e\u5728\u6811\u4e0adfs\u901a\u8fc7\u538b\u6808\u548c\u5f39\u6808\u7684\u65b9\u5f0f\u7ef4\u62a4\u8fd9\u5f20\u56fe\u5c31\u53ef\u4ee5\u4e86\u2026\u2026\n\n\u4e3a\u4e86\u5361\u7a7a\u95f4\u4ee3\u7801\u91cc\u6709\u5f88\u591atrick\uff0c\u8bf7\u81ea\u884c\u53c2\u8003\u4ee3\u7801\u5427\u2026\u2026\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\nusing namespace std;const int N=1e5+10;const int B=350;\ntemplate <class T>\nvoid read(T &x){\n    char c;\n    bool op = 0;\n    while(c = getchar(), c < '0' || c > '9')\n    if(c == '-') op = 1;\n    x = c - '0';\n    while(c = getchar(), c >= '0' && c <= '9')\n    x = x * 10 + c - '0';\n    if(op) x = -x;\n}\nint qu[N];int qv[N];int rk[N];int val[N];int n;int m;\nint cntb[N/B+3];int pl[N/B+3];int pr[N/B+3];\nint ve[N];int nx[N];int al[N];int ans[N];int ctt;\ninline void add(int u,int V){ve[++ctt]=V;nx[ctt]=al[u];al[u]=ctt;}\nnamespace lsh//\u79bb\u6563\u5316 \n{\n    inline bool cmp(const int& x,const int& y){return val[x]<val[y];}\n    inline void pre()\n    {\n        for(int i=1;i<=n;i++)ans[i]=i;sort(ans+1,ans+n+1,cmp);\n        for(int i=1;i<=n;i++)rk[ans[i]]=i;for(int i=1;i<=n;i++)ans[rk[i]]=val[i];\n        for(int i=1;i<=n;i++)val[i]=ans[i];val[n+1]=-1;\n        for(int i=1;i<=n;i++)pr[(i-1)/B+1]=i;for(int i=n;i>=1;i--)pl[(i-1)/B+1]=i;\n    }\n}\nstruct bcj//\u5e76\u67e5\u96c6 \n{\n    int fa[N];int tot[N];int x[20*N];int v[20*N];int ct;int al[N];\n    inline void add(int u,int V){v[++ct]=V;x[ct]=al[u];al[u]=ct;}\n    inline void mglist(int p,int q)//\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\uff0c\u6ce8\u610f\u4e0d\u8981\u65b0\u5f00\u591a\u4f59\u7684\u8282\u70b9 \n    {\n        int t;int i=al[p];int j=al[q];int k1=v[i]&32767;int k2=v[j]&32767;\n        if(k1==k2)v[i]=(((v[i]>>15)+(v[j]>>15))<<15)|k1,t=i,i=x[i],j=x[j];\n        else if(k1<k2)t=i,i=x[i];else v[++ct]=v[j],al[p]=ct,t=ct,j=x[j];\n        while(i&&j)\n        {\n            int k1=v[i]&32767;int k2=v[j]&32767;\n            if(k1==k2)v[i]=(((v[i]>>15)+(v[j]>>15))<<15)|k1,x[t]=i,t=i,i=x[i],j=x[j];\n            else if(k1<k2)x[t]=i,t=i,i=x[i];else v[++ct]=v[j],x[t]=ct,t=ct,j=x[j];\t\n        }while(i)x[t]=i,t=i,i=x[i];while(j)v[++ct]=v[j],x[t]=ct,t=ct,j=x[j];x[t]=0;\n    }\n    inline void splist(int p,int q,int ti)//\u5206\u88c2\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \n    {\n        for(int i=al[q];i;i=x[i])cntb[v[i]&32767]+=(v[i]>>15);\n        while(al[p]>ti)al[p]=x[al[p]];int t=al[p];\n        v[t]=(((v[t]>>15)-(cntb[v[t]&32767]))<<15)|(v[t]&32767);\n        for(int i=x[al[p]];i;i=x[i])\n            if(i<=ti){int k=v[i]&32767;v[i]=(((v[i]>>15)-cntb[k])<<15)|k,x[t]=i,t=i;}\n        ct=ti;for(int i=al[q];i;i=x[i])cntb[v[i]&32767]=0;x[t]=0;\n    }inline void f(int& x){for(;x!=fa[x];x=fa[x]);}\n    inline int ck(int x){for(;x!=fa[x];x=fa[x]);return x;}\n    inline void ih()\n    {\n        for(int i=1;i<=n;i++)fa[i]=i;for(int i=1;i<=n;i++)tot[i]=1;\n        for(int i=1;i<=n;i++)add(i,(1<<15)|((i-1)/B+1));\n    }\n    inline void lk(int& u,int& V)//\u8fde\u8fb9 \n    {f(u);f(V);if(u==V)return;if(tot[u]<tot[V])swap(u,V);tot[u]+=tot[V];fa[V]=u;mglist(u,V);}\n    inline void del(int u,int V,int ti){fa[V]=V;tot[u]-=tot[V];splist(u,V,ti);}//\u5220\u9664\u8fb9 \n    inline int brukth(int id,int l,int r,int k)//\u66b4\u529b\u67e5\u8be2kth \n    {for(int i=l;i<=r;i++){k-=(id==ck(i));if(!k)return i;}}\n    inline int kth(int u,int k) \n    {\n        f(u);if(k>tot[u])return n+1;\n        for(int i=al[u];i;i=x[i])\n            if(k>(v[i]>>15))k-=(v[i]>>15);\n            else return brukth(u,pl[v[i]&32767],pr[v[i]&32767],k);\n    }\n}bcj;\ninline void dfs(int u)//\u5728\u64cd\u4f5c\u6811\u4e0adfs \n{\n    if(u<0){ans[-u]=bcj.kth(qu[-u],qv[-u]);return;}int curt;\n    if(u!=1)curt=bcj.ct,bcj.lk(qu[u],qv[u]);\n    for(int i=al[u];i;i=nx[i])dfs(ve[i]);\n    if(u!=1&&qu[u]!=qv[u])bcj.del(qu[u],qv[u],curt);\n}\nint main()\n{\n    read(n);read(m);for(int i=1;i<=n;i++)read(val[i]); lsh::pre();bcj.ih();ans[1]=1;\n    for(int i=2,typ,x,fa=1;i<=m+1;i++) \n    {\n        read(typ);\n        switch(typ)\n        {\n            case 1:\n            {\n                read(qu[i]);read(qv[i]);qu[i]=rk[qu[i]];qv[i]=rk[qv[i]];\n                ans[i]=i;add(fa,i);fa=i;break;\n            }\n            case 2:{read(x);x++;fa=ans[x];ans[i]=fa;break;}\n            case 3:{read(qu[i]);read(qv[i]);qu[i]=rk[qu[i]];add(fa,-i);ans[i]=ans[i-1];break;}\n        }\n    }for(int i=2;i<=m+1;i++)ans[i]=-2;dfs(1);\n    for(int i=2;i<=m+1;i++)if(ans[i]!=-2)printf(\"%d\\n\",val[ans[i]]);return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1544688966,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5064 \u3010[Ynoi2014]\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\u3011"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5](https://www.luogu.com.cn/problem/P5064)\n\n>\u9898\u610f\uff1a  \n\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u9700\u652f\u6301\uff1a  \n\u52a0\u4e00\u6761\u8fde\u63a5 $x,y$ \u7684\u8fb9\uff1b  \n\u56de\u5230\u67d0\u4e2a\u5386\u53f2\u7248\u672c\uff1b  \n\u8be2\u95ee $x$ \u6240\u5728\u8fde\u901a\u5757\u4e2d\u7b2c $k$ \u5c0f\u7684\u70b9\u6743\u3002  \n$n,m\\leq10^5$\uff0c\u65f6\u95f4\u9650\u5236 $500\\text{ms}$\uff0c\u7a7a\u95f4\u9650\u5236 $20\\text{MB}$\u3002\n\n\u63d0\u4f9b\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6 $O\\left(\\dfrac{nm}{w}\\right)$\uff0c\u7a7a\u95f4 $O(n+m)$ \u7684\u505a\u6cd5\u3002\n\n- \u5148\u5c06\u70b9\u6743\u79bb\u6563\u5316\uff0c\u5e76\u8ba9\u70b9\u6743\u76f8\u540c\u7684\u70b9\u5bf9\u5e94\u4e0d\u540c\u7684\u79bb\u6563\u5316\u540e\u7684\u6743\u503c\u3002  \n \u8fd9\u53ef\u4ee5\u8ba9\u6240\u6709\u70b9\u552f\u4e00\u5bf9\u5e94\u4e0d\u540c\u7684\u6743\u503c\u3002  \n \u7136\u540e\u628a\u6240\u6709\u70b9\u7684\u7f16\u53f7\u6362\u6210\u5176\u6743\u503c\uff0c\u5c31\u53ea\u9700\u67e5\u8be2\u8fde\u901a\u5757\u4e2d\u7b2c $k$ \u5c0f\u7684\u7f16\u53f7\u3002\n\n\u8003\u8651\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u5f00\u4e00\u4e2a $\\text{bitset}$\uff08\u9700\u624b\u5199\uff09\uff0c\u5355\u6b21\u67e5\u8be2\u4fbf\u53ef\u4ee5\u8df3\u6574\u5757\u4e0e\u6563\u5757\u505a\u5230 $O\\left(\\dfrac{n}{w}+w\\right)$\u3002\n\n\u53ef\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u5e76\u67e5\u96c6\uff08\u6309\u5b50\u6811\u5927\u5c0f\uff09\u5904\u7406\u8fde\u901a\u5757\uff0c$\\text{bitset}$ \u53ea\u5f00\u5728\u8fde\u901a\u5757\u6839\u8282\u70b9\u4e0a\u3002\n\n\u8fde\u8fb9\u53ef\u4ee5\u76f4\u63a5\u4e24\u4e2a $\\text{bitset}$ \u6216\u5728\u4e00\u8d77\uff0c\u5c0f\u7684\u6216\u4e0a\u5927\u7684\uff0c\u5355\u6b21 $O\\left(\\dfrac{n}{w}\\right)$\u3002\n\n\u800c\u5bf9\u4e8e\u52a0\u8fb9\u4e0e\u56de\u9000\uff0c\u53ef\u4ee5 $\\text{dfs}$ \u64cd\u4f5c\u6811\uff0c\u4fbf\u53ea\u9700\u5904\u7406\u64cd\u4f5c\u6811\u4e0a\u7684\u56de\u9000\u3002\n\n\u7531\u4e8e\u52a0\u8fb9\u524d\u5b50\u6811\u5c0f\u7684 $\\text{bitset}$ \u5bf9\u540e\u7eed\u8fde\u8fb9\u65e0\u7528\uff0c\u53ef\u4ee5\u4fdd\u7559\uff0c\u56de\u9000\u76f4\u63a5\u5c06\u5176\u51cf\u6389\u5373\u53ef\u3002\n\n\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O\\left(\\dfrac{nm}{w}\\right)$\uff0c\u7a7a\u95f4\u4e0e\u65f6\u95f4\u76f8\u540c\uff0c\u5f88\u4e0d\u4f18\u79c0\u3002\n\n\u4f46\u5176\u5b9e\u5728\u8054\u901a\u5757\u70b9\u6570\u8f83\u5c0f\u65f6\u6ca1\u5fc5\u8981\u6d6a\u8d39\u4e00\u4e2a $\\text{bitset}$ \u7684\u7a7a\u95f4\u3002\n\n\u5728\u8fde\u901a\u5757\u70b9\u6570 $<\\dfrac{n}{w}$ \u65f6\u53ea\u9700\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\n\n\u8fd9\u6837\u6700\u591a\u5f00 $w$ \u4e2a $\\text{bitset}$\uff0c\u7a7a\u95f4\u80fd\u505a\u5230 $w\\times \\dfrac{n}{w}$\uff0c\u4e5f\u5c31\u662f\u7ebf\u6027\u3002\n\n\u518d\u7ec6\u8bb2\u4e00\u4e0b\u5408\u5e76\u4e0e\u64a4\u56de\u3002\n\n- \u5bf9\u4e8e\u94fe\u8868\u548c\u94fe\u8868\u7684\u5408\u5e76\uff0c\u76f4\u63a5\u8ba9\u4e24\u8fb9\u9996\u5c3e\u76f8\u8fde\u3002  \n\u4e3a\u4e86\u64a4\u56de\u4e00\u5e76\u8bb0\u5f55\u70b9\u6570\u5927\u5c0f\uff0c\u56e0\u6b64\u53ea\u9700\u628a\u540e\u51e0\u4e2a\u5206\u5f00\u4fbf\u80fd\u64a4\u56de\u3002  \n\u6bcf\u4e2a\u70b9\u65f6\u65f6\u53ea\u5728\u4e00\u4e2a\u94fe\u8868\u4e0a\uff0c\u7a7a\u95f4\u7ebf\u6027\u3002  \n\u8fd9\u91cc\u5408\u5e76\u4e0d\u9700\u8981\u4fdd\u8bc1\u6709\u5e8f\uff0c\u67e5\u8be2\u65f6\u62ce\u51fa\u6765\u6240\u6709\u70b9\u540e $\\operatorname{nth\\ element}$ \u4e5f\u80fd\u505a\u5230 $O\\left(\\dfrac{n}{w}\\right)$\u3002\n\n- \u5bf9\u4e8e\u94fe\u8868\u4e0e $\\text{bitset}$ \u7684\u5408\u5e76\uff0c\u6709\u94fe\u8868\u7684\u5b50\u6811\u4e00\u5b9a\u66f4\u5c0f\uff0c\u76f4\u63a5\u904d\u5386\u94fe\u8868\u63d2\u5165 $\\text{bitset}$\u3002  \n\u800c\u5408\u5e76\u540e\u94fe\u8868\u5c06\u4e0d\u88ab\u8bbf\u95ee\uff0c\u64a4\u56de\u65f6\u518d\u6b21\u904d\u5386\u94fe\u8868\u4fee\u6539 $\\text{bitset}$ \u6bcf\u4e00\u4f4d\u3002\n\n- \u5bf9\u4e8e $\\text{bitset}$ \u4e0e $\\text{bitset}$ \u7684\u5408\u5e76\uff0c\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c  \n\u800c\u70b9\u6570\u5c0f\u7684 $\\text{bitset}$ \u4ecd\u80fd\u4fdd\u7559\uff0c\u4e14\u7a7a\u95f4\u4f7f\u7528\u4e0d\u4f1a\u589e\u52a0\u3002\n\n\u6ce8\u610f $\\operatorname{nth\\ element}$ \u5e26\u7684\u5e38\u6570\u6709\u70b9\u5927\uff0c\u53ef\u8ba9\u94fe\u8868\u6700\u591a\u7ef4\u62a4 $\\dfrac{n}{2w}$ \u4e2a\u70b9\u3002\n\n\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O\\left(\\dfrac{nm}{w}\\right)$\uff0c\u7a7a\u95f4 $O(n+m)$ \u3002\n\n\u65e0\u9700\u5361\u5e38\uff0c\u65e0\u9700\u5361\u7a7a\u95f4\uff0c\u7545\u4f60\u6240\u5199\uff01\n\n$\\texttt{Code:}$\n\n```cpp\n#include<bits/stdc++.h>\n#define ull unsigned long long\nusing namespace std;\nconst int W=64;\nconst int _W=63;\nconst int t=6;\nconst int N=1e5+10;\nint n,m,x,y,xx,nn,tot,qq;\nint btot,bbtot,lim,tn,ptot;\nchar opt,ch;\nstruct bitset{\n\tull b[N/W+1];int i,res,l;ull j;\n\tinline void reset(){memset(b,0,sizeof(b));}\n\tinline void add(int i){b[i>>t]|=1ull<<(i&(_W));}\n\tinline void del(int i){b[i>>t]^=1ull<<(i&(_W));}\n\tinline void operator |=(const bitset &a){\n\t\tfor(i=0;i!=tn;++i)b[i]|=a.b[i];\n\t}\n\tinline void operator ^=(const bitset &a){\n\t\tfor(i=0;i!=tn;++i)b[i]^=a.b[i];\n\t}\n\tinline void inquiry(int k){\n\t\tfor(i=0;i!=tn;++i){\n\t\t\tl=__builtin_popcountll(b[i]);\n\t\t\tif(l<k)k-=l;else break;\n\t\t}\n\t\tj=b[i];\n\t\twhile(--k)j^=(1ull<<__builtin_ctzll(j));\n\t\tres=i*W+__builtin_ctzll(j);\n\t}\n}b[101];\nint pre[N],suf[N],sz[N],id[N],f[N];\nint a[N],_[N],__[N],cnt[N],res[N];\nint bin[N],btp,tmp[N],idx;\ninline int getf(int x){\n\twhile(x!=f[x])x=f[x];return x;\n}\nint qx[N],qy[N];bool cvr_id[N];\ninline void merge(int x,int y){\n\t++ptot;idx=id[x];cvr_id[ptot]=0;\n\tif(!idx&&sz[x]>lim){\n\t\tidx=id[x]=btp?bin[btp--]:++btot;b[idx].add(x);\n\t\txx=x;while(pre[xx])b[idx].add(xx=pre[xx]);\n\t\txx=x;while(suf[xx])b[idx].add(xx=suf[xx]);\n\t\tcvr_id[ptot]=1;\n\t}\n\tif(id[y])b[idx]|=b[id[y]];\n\telse {\n\t\tif(idx){\n\t\t\tb[idx].add(y);\n\t\t\txx=y;while(pre[xx])b[idx].add(xx=pre[xx]);\n\t\t\txx=y;while(suf[xx])b[idx].add(xx=suf[xx]);\n\t\t}\n\t\telse {\n\t\t\twhile(suf[x])x=suf[x];\n\t\t\twhile(pre[y])y=pre[y];\n\t\t\tpre[suf[x]=y]=x;\n\t\t}\n\t}\n}\ninline void draw_back(int x,int y){\n\tidx=id[x];\n\tif(id[y])b[idx]^=b[id[y]];\n\telse {\n\t\tif(idx){\n\t\t\tb[idx].del(y);\n\t\t\txx=y;while(pre[xx])b[idx].del(xx=pre[xx]);\n\t\t\txx=y;while(suf[xx])b[idx].del(xx=suf[xx]);\n\t\t}\n\t\telse {\n\t\t\twhile(suf[x])x=suf[x];\n\t\t\txx=sz[y];while(--xx)x=pre[x];\n\t\t\tsuf[pre[x]]=0;pre[x]=0;\n\t\t}\n\t}\n}\nint to[N],nextn[N],h[N],edg;\ninline void add_edge(int x,int y){\n\tto[++edg]=y,nextn[edg]=h[x],h[x]=edg;\n}\nint nextnq[N],hq[N],xq[N],kk[N],ii[N],edgq;\ninline void addq(int x,int xx,int k,int i){\n\tnextnq[++edgq]=hq[x],hq[x]=edgq;\n\txq[edgq]=xx;kk[edgq]=k,ii[edgq]=i;\n}\ninline void inquiry(int x,int k,int i){\n\tif(sz[x]<k)res[i]=-1;\n\telse {\n\t\tif(id[x]){\n\t\t\tb[id[x]].inquiry(k);\n\t\t\tres[i]=b[id[x]].res;\n\t\t}\n\t\telse {\n\t\t\ttmp[nn=1]=x;\n\t\t\txx=x;while(suf[xx])tmp[++nn]=xx=suf[xx];\n\t\t\txx=x;while(pre[xx])tmp[++nn]=xx=pre[xx];\n\t\t\tnth_element(tmp+1,tmp+k,tmp+nn+1);\n\t\t\tres[i]=tmp[k];\n\t\t}\n\t}\n}\nvoid dfs(int x){\n\tint i,y,fx,fy;\n\tfx=getf(qx[x]),fy=getf(qy[x]);\n\tif(fx!=fy){\n\t\tif(sz[fx]<sz[fy])xx=fx,fx=fy,fy=xx;\n\t\tsz[fx]+=sz[fy];f[fy]=fx;merge(fx,fy);\n\t}\n\tfor(i=hq[x];i;i=nextnq[i])\n\t\tinquiry(getf(xq[i]),kk[i],ii[i]);\n\tfor(i=h[x];i;i=nextn[i])dfs(to[i]);\n\tif(fx!=fy){\n\t\tsz[fx]-=sz[fy];f[fy]=fy;\n\t\tif(cvr_id[ptot--]){\n\t\t\tb[id[fx]].reset();\n\t\t\tbin[++btp]=id[fx];\n\t\t\tid[fx]=0;\n\t\t}\n\t\telse draw_back(fx,fy);\n\t}\n}\ninline void read(int &x){\n\tx=0;ch=getchar();while(ch<48)ch=getchar();\n\twhile(ch>47)x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n}\ninline void read(char &x){\n\tx=0;ch=getchar();while(ch<48)ch=getchar();\n\tx=ch^48,ch=getchar();\n}\nvoid write(int x){\n\tif(x>9)write(x/10);putchar(48|(x%10));\n}\nmain(){\n\tread(n),read(m);register int i,j;\n\tlim=n/W/2,tn=n/W+1;\n\tfor(i=1;i<=n;++i)read(a[i]),_[i]=a[i];\n\tfor(i=1;i<=n;++i)sz[i]=1,f[i]=i;\n\tsort(_+1,_+n+1);nn=unique(_+1,_+n+1)-_-1;\n\tfor(i=1;i<=n;++i)\n\t\t++cnt[a[i]=lower_bound(_+1,_+nn+1,a[i])-_];\n\tnn=0;\n\tfor(i=1;j=cnt[i],i<=n;++i)\n\t\twhile(j)--j,__[++nn]=_[i];\n\tfor(i=1;i<=n;++i)cnt[i]+=cnt[i-1];\n\tfor(i=1;i<=n;++i)a[i]=cnt[a[i]]--;\n\tid[0]=j=tot=1;\n\tfor(i=1;i<=m;++i){\n\t\tread(opt),read(x);\n\t\tif(opt==1){\n\t\t\t++tot;add_edge(j,tot);j=tot;\n\t\t\tread(y);qx[j]=a[x],qy[j]=a[y];\n\t\t}\n\t\tif(opt==2)j=id[x];\n\t\tif(opt==3){\n\t\t\tread(y);++qq;\n\t\t\taddq(j,a[x],y,qq);\n\t\t}\n\t\tid[i]=j;\n\t}\n\tfor(i=0;i<=m;++i)id[i]=0;\n\tdfs(1);\n\tfor(i=1;i<=qq;++i){\n\t\tres[i]<0?puts(\"-1\"):\n\t\t(write(__[res[i]]),putchar('\\n'));\n\t}\n}\n```",
        "postTime": 1660743207,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[P5064 \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e]"
    },
    {
        "content": "\u503c\u57df\u5206\u5757 + \u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7684\u505a\u6cd5\u5176\u5b9e\u53ef\u4ee5\u505a\u5230 $\\mathcal O(n)$ \u7a7a\u95f4\u3002\n\n\u663e\u7136\u64cd\u4f5c\u7684\u4f9d\u8d56\u5173\u7cfb\u662f\u4e00\u68f5\u6811\uff0c\u5148\u5efa\u51fa\u64cd\u4f5c\u6811\u3002\u8003\u8651\u628a\u503c\u57df\u5206 $n/B$ \u5757\uff0c\u6bcf\u5757 $B$ \u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u8303\u56f4\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6bcf\u4e2a\u5757\uff0c\u5bf9\u6574\u4e2a\u64cd\u4f5c\u6811\u8fdb\u884c DFS\uff0c\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u8fde\u901a\u5757\u5c5e\u4e8e\u8fd9\u4e2a\u5757\u5185\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u8bb0\u67d0\u65f6\u523b $x$ \u6240\u5728\u8fde\u901a\u5757\u4e2d\u5c5e\u4e8e\u8be5\u503c\u57df\u5757\u7684\u70b9\u7684\u4e2a\u6570\u4e3a $\\mathrm {cnt}_x$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee $(x,y)$\uff0c\u5982\u679c $x$ \u6240\u5728\u8fde\u901a\u5757\u4e2d\u5c5e\u4e8e\u8fd9\u4e2a\u503c\u57df\u5757\u5185\u7684\u70b9\u7684\u4e2a\u6570 $\\mathrm {cnt}_x$ \u5c0f\u4e8e $y$ \u4e2a\uff0c\u90a3\u8bf4\u660e\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u4e0d\u5728\u8fd9\u4e2a\u5757\u5185\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ee4 $y$ \u51cf\u53bb $\\mathrm {cnt}_x$\u3002\n\n\u5426\u5219\u7b54\u6848\u5728\u8fd9\u4e2a\u503c\u57df\u5757\u5185\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u8fd9\u4e2a\u5757\u5185\u7684\u6240\u6709\u6570\uff0c\u4e00\u4e2a\u4e2a Check \u662f\u5426\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u5185\uff0c\u7136\u540e\u5c31\u80fd\u6c42\u51fa\u7b54\u6848\u3002\u8fd9\u6837\u6211\u4eec\u81f3\u591a\u53ea\u4f1a\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u8fdb\u884c $\\mathcal O(B)$ \u6b21\u5e76\u67e5\u96c6\u7684\u67e5\u8be2\uff0c\u6bcf\u6b21\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u662f $\\mathcal O(\\log n)$\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(mB\\log n)$\uff0c\u800c\u5916\u9762\u7684\u5e76\u67e5\u96c6\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u503c\u57df\u5757\u7684\u5f62\u6001\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u63d0\u524d\u5904\u7406\u51fa\u5408\u5e76\u70b9\u7684\u65f6\u5019\u7684\u6839\uff0c\u8fd9\u6837\u5916\u9762\u5c31\u4e0d\u5e26 $\\log$ \u4e86\u3002\n\n\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O\\left(\\dfrac {nm}B+nB+mB\\log n\\right)$\uff0c\u5f53 $B$ \u53d6 $\\sqrt{\\dfrac {nm}{n+m\\log n}}$ \u65f6\u6700\u4f18\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(\\sqrt{nm(n+m\\log n)})$\uff0c\u56e0\u4e3a\u8fd9\u9898 $n,m$ \u540c\u9636\uff0c\u6240\u4ee5\u662f $\\mathcal O(n\\sqrt {n\\log n})$\u3002\uff08\u4f46\u5f88\u8ff7\u60d1\u7684\u662f\uff0c\u6211\u5b9e\u6d4b $B=2000$ \u5de6\u53f3\u6700\u5feb...\uff09\n\n\u800c\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u53ea\u5bf9\u4e00\u4e2a\u5757\u8fdb\u884c\u5904\u7406\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal O(n)$ \u7684\u4e86\u3002",
        "postTime": 1648625401,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "P5064"
    },
    {
        "content": "\u6211\u4eec\u8003\u8651\u5efa\u51fa\u64cd\u4f5c\u6811\uff0c\u5148\u8fdb\u884c\u4e00\u6b21 $\\text{dfs}$\uff0c\u5c06\u52a0\u8fb9\u64cd\u4f5c\u5224\u65ad\u662f\u5426\u5408\u6cd5\uff08\u662f\u5426\u5df2\u8fde\u901a\uff09\uff0c\u5904\u7406\u51fa\u64cd\u4f5c\u6811\u4e0a\u6bcf\u4e2a\u52a0\u8fb9\u64cd\u4f5c\u5e76\u67e5\u96c6\u7684\u6839\uff0c\u8be2\u95ee\u64cd\u4f5c\u5e76\u67e5\u96c6\u7684\u6839\u3002\n\n\u5c06\u6743\u503c\u79bb\u6563\u5316\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u6743\u503c\u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a\u70b9\uff0c\u5bf9\u503c\u57df\u5206\u5757\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u503c\u57df\u5757\u8fdb\u884c\u4e00\u6b21 $\\text{dfs}$\uff0c\u5f97\u51fa\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\u5728\u54ea\u4e00\u4e2a\u503c\u57df\u5757\u5185\u3002\n\n\u5bf9\u64cd\u4f5c\u6811\u5206\u5757\uff0c\u8fd9\u91cc\u5206\u5757\u7684\u8981\u6c42\u662f\u9009\u51fa $O(\\frac{m}{B})$ \u4e2a\u70b9\u4f7f\u5f97\u6811\u4e0a\u4efb\u610f\u4e00\u4e2a\u70b9\u5b58\u5728\u4e00\u4e2a\u4e0d\u8d85\u8fc7 $O(B)$ \u7ea7\u7956\u5148\u4e3a\u5173\u952e\u70b9\uff0c$B$ \u53d6 $\\sqrt{m}$\u3002\n\n\u6211\u4eec\u79f0\u4e00\u4e2a\u70b9\u6240\u5c5e\u7684\u5757\u7684\u6839\u4e3a\u79bb\u5b83\u6700\u8fd1\u7684\u4e3a\u5173\u952e\u70b9\u7684\u7956\u5148\uff08\u5305\u62ec\u81ea\u5df1\uff09\uff0c\u6709\u540c\u4e00\u4e2a\u6240\u5c5e\u7684\u5757\u7684\u6839\u7684\u8282\u70b9\u5c5e\u4e8e\u540c\u4e00\u5757\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\uff0c\u6211\u4eec\u53ef\u4ee5 $O(m)$ \u5904\u7406\u51fa\u64cd\u4f5c\u5230\u8fd9\u4e2a\u5757\u6839\u65f6\uff0c\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u5e76\u67e5\u96c6\u7684\u6839\u3002\u5757\u5185\u6bcf\u4e2a\u8be2\u95ee\u7684\u72b6\u6001\u662f\u4ece\u6839\u5904\u72b6\u6001\u5408\u5e76 $O(B)$ \u6b21\u8fde\u901a\u5757\u5f62\u6210\u7684\uff0c\u6211\u4eec\u628a\u8fd9 $O(B)$ \u6b21\u5408\u5e76\u8fde\u901a\u5757\u62ff\u51fa\u6765\uff0c$\\text{BFS}$ \u4e00\u904d\u5c31\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u5e76\u67e5\u96c6\u7684\u6839\u4e0e\u8be2\u95ee\u8282\u70b9\u5c5e\u4e8e\u540c\u4e00\u8fde\u901a\u5757\uff0c\u679a\u4e3e\u7b54\u6848\u6240\u5728\u503c\u57df\u5757\u5185\u70b9\uff0c\u5f97\u5230\u7b54\u6848\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u65f6\u95f4 $O(n\\sqrt{n})$\uff0c\u7a7a\u95f4 $O(n)$ \u7684\u7b97\u6cd5\uff0c$n,m$ \u540c\u9636\u3002 \n\n\u4ee3\u7801\u4e0d\u60f3\u7ed9\uff0c\u5199\u7684\u592a\u4e11\uff0c\u90fd\u8dd1\u5230\u6700\u52a3\u89e3\u4e86/kk\u3002\n\nps\uff1a\u6211\u4e0d\u77e5\u9053\u8fd9\u9898\u5565\u6bdb\u75c5\uff0c\u6211\u503c\u57df\u5206\u5757\u5757\u957f $3500$ \u6700\u5feb\u3002",
        "postTime": 1619437617,
        "uid": 55707,
        "name": "gxy001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5064 [Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e"
    },
    {
        "content": "[$\\text{Link}$](https://www.luogu.com.cn/problem/P5064)\n## \u9898\u610f\n\u7ed9\u4e00\u5f20 $n$ \u4e2a\u7ed3\u70b9\u7684\u7a7a\u56fe\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u70b9\u6743 $a_i$\uff0c\u652f\u6301\u64cd\u4f5c\u5171 $m$ \u6b21\uff1a\n\n1. \u8fde\u8fb9\n2. \u5c06\u56fe\u6062\u590d\u5230\u67d0\u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001\n3. \u67e5\u8be2\u8fde\u901a\u5757 $k$ \u5c0f\n\n\u6570\u636e\u8303\u56f4\uff1a$n,m\\le 10^5$.\n\n## \u601d\u8def\n\u8fd9\u4e2a\u9898\u6bd4\u8f83\u7684\u7b80\u5355\u3002\n\n\u5efa\u51fa\u64cd\u4f5c\u6811\uff0c\u6bcf\u4e00\u6761\u8fb9\u4ee3\u8868\u4e00\u6b21\u64cd\u4f5c\uff0c\u4e00\u4e2a\u7ed3\u70b9\u4ee3\u8868\u4e00\u4e2a\u72b6\u6001\u3002\n\n\u8fde\u901a\u5757 $k$ \u5c0f\u6709\u8bb8\u591a\u505a\u6cd5\uff0c\u4f46\u6211\u4eec\u9700\u8981\u652f\u6301\u5feb\u901f\u5408\u5e76\u3001\u56de\u64a4\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u503c\u57df\u5206\u5757\u3002\n\n\u5148\u628a\u5e8f\u5217\u79bb\u6563\u5316\u6210 $[1,n]$ \u7684**\u6392\u5217**\u3002\u8003\u8651\u5408\u5e76\u503c\u57df\u5206\u5757\uff1a\u6574\u5757\u53ef\u4ee5\u76f4\u63a5\u5408\u5e76\uff0c\u6563\u5757\u5374\u4e0d\u597d\u5904\u7406\u3002\n\n\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u53d1\u73b0\u6563\u5757\u7684\u4f5c\u7528\u662f\u67e5\u8be2\u8fde\u901a\u5757\u5185\u6709\u6ca1\u6709\u6570 $x$\uff0c\u8fd9\u4e2a\u5e76\u67e5\u96c6\u4e5f\u80fd\u505a\u5230\uff0c\u5e76\u4e14\u5e76\u67e5\u96c6\u5bb9\u6613\u64a4\u9500\u3002\n\n\u64a4\u9500\u65f6\u6574\u5757\u53ef\u4ee5\u76f4\u63a5\u51cf\u6389\uff0c\u5e76\u67e5\u96c6\u53ef\u4ee5\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3002\n\n\u4ee4\u5757\u957f\u4e3a $T=\\Theta(\\sqrt{\\dfrac n{\\log n}})$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(\\dfrac{nm}T+mT\\log n)=\\Theta(m\\sqrt{n\\log n})$\u3002\n\n\u4f46\u662f\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(nT)=\\Theta(\\dfrac{n\\sqrt n}{\\sqrt{\\log n}})$\uff0c\u65e0\u6cd5\u8fbe\u5230\u9898\u76ee\u8981\u6c42\u7684\u7a7a\u95f4\u3002\n\n\u9996\u5148\uff0c$T<32768$\uff0c\u6240\u4ee5\u6574\u5757\u53ef\u4ee5\u7528 `short` \u7c7b\u578b\u5b58\u3002\n\n\u7136\u540e\u8bd5\u7740\u8c03\u5757\u957f\uff0c\u6211\u8c03\u5230 $T=4200$ \u7684\u65f6\u5019\u65f6\u7a7a\u90fd\u538b\u7ebf\u8fc7\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nnamespace IO{//by cyffff\n\t\n}\nconst int N=1e5+10,sq=4200;\nint n,m,bl[N],br[N],bel[N];\nint a[N],rev[N],pr[N],op[N],ans[N];\nshort bnt,blo[N][N/sq+10];\nint head[N],cnt,nxt[N];\nstruct Edge{\n\tint to,nxt;\n}s[N];\ninline void add(int u,int v){\n\tcnt++;\n\ts[cnt].to=v;\n\ts[cnt].nxt=head[u];\n\thead[u]=cnt;\n}\npair<int,int>b[N];\nstruct node{\n\tint x,y;\n}as[N];\nnamespace ds{\n\tint f[N],siz[N];\n\tinline void init(int sz){\n\t\tfor(int i=1;i<=sz;i++)\n\t\t\tf[i]=i,siz[i]=1;\n\t}\n\tinline int find(int x){\n\t\tfor(;x!=f[x];x=f[x]);\n\t\treturn x;\n\t}\n\tinline void swap(int &a,int &b){\n\t\tint c;\n\t\tif(siz[a]>siz[b]) c=a,a=b,b=c;\n\t}\n\tinline void merge(int x,int y){\n\t\tf[x]=y,siz[y]+=siz[x];\n\t}\n\tinline void split(int x,int y){\n\t\tsiz[y]-=siz[x],f[x]=x;\n\t}\n}\ninline void dfs(int x){\n\tint fx,fy;\n\tif(op[x]==1){\n\t\tint tx=as[x].x,ty=as[x].y;\n\t\tfx=ds::find(tx),fy=ds::find(ty);\n\t\tif(fx==fy) goto out;\n\t\tds::swap(fx,fy);\n\t\tfor(int i=1;i<=bnt;i++)\n\t\t\tblo[fy][i]+=blo[fx][i];\n\t\tds::f[fx]=fy,ds::siz[fy]+=ds::siz[fx];\n\t}\n\tif(op[x]==3){\n\t\tint tx=as[x].x,k=as[x].y,tmp=-1;\n\t\ttx=ds::find(tx);\n\t\tfor(int p=1;p<=bnt;p++)\n\t\t\tif(blo[tx][p]<k) k-=blo[tx][p];\n\t\t\telse{ tmp=p;break; }\n\t\tif(tmp==-1){ ans[x]=-1;goto out; }\n\t\tfor(int i=bl[tmp];;i++)\n\t\t\tif(ds::find(pr[i])==tx)\n\t\t\t\tif(k>1) k--;\n\t\t\t\telse{ ans[x]=rev[i];break; }\n\t}\n\tout:;\n\tfor(int i=head[x];i;i=s[i].nxt) dfs(s[i].to);\n\tif(op[x]==1&&fx!=fy){\n\t\tfor(int i=1;i<=bnt;i++)\n\t\t\tblo[fy][i]-=blo[fx][i];\n\t\tds::siz[fy]-=ds::siz[fx],ds::f[fx]=fx;\n\t}\n}\nint main(){\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t\tb[i]=make_pair(a[i]=read(),i);\n\tsort(b+1,b+n+1);\n\tfor(int i=1;i<=n;i++){\n\t\tint t=a[i];\n\t\ta[i]=lower_bound(b+1,b+n+1,make_pair(a[i],i))-b;\n\t\tpr[a[i]]=i,rev[a[i]]=t;\n\t}\n\tbnt=0;\n\tfor(int i=1;i<=n;i+=sq)\n\t\tbl[++bnt]=i,br[bnt]=min(i+sq-1,n);\n\tfor(int i=1;i<=bnt;i++)\n\t\tfor(int j=bl[i];j<=br[i];j++) \n\t\t\tbel[j]=i;\n\tds::init(n);\n\tfor(int i=1;i<=n;i++)\n\t\tblo[i][bel[a[i]]]=1;\n\tfor(int i=1;i<=m;i++){\n\t\top[i]=read();\n\t\tif(op[i]!=2) as[i]={read(),read()},add(i-1,i);\n\t\telse add(read(),i);\n\t}\n\tdfs(0);\n\tfor(int i=1;i<=m;i++)\n\t\tif(op[i]==3) printf(\"%d\\n\",ans[i]);\n}\n```\n\u518d\u89c1 qwq~",
        "postTime": 1644288386,
        "uid": 365127,
        "name": "cyffff",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5064\u3010[Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\u3011"
    },
    {
        "content": "~~eee\uff0c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6211\u7adf\u7136\u5199\u4e86\u8def\u5f84\u538b\u7f29~~\r\n\r\n\u9898\u610f\r\n\r\n\u7ed9\u4f60\u4e00\u4e2a\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\uff0c\u6700\u5f00\u59cb\u6ca1\u6709\u8fb9\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u64cd\u4f5c\uff1a\r\n\r\n\r\n`1 x y`\uff0c\u6dfb\u52a0\u4e00\u6761 $x$ \u4e0e $y$ \u4e4b\u95f4\u7684\u53cc\u5411\u8fb9\u3002\r\n\r\n`2 x`\uff0c\u56de\u5230\u7b2c $x$ \u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001\uff08\u6ce8\u610f\u8fd9\u91cc\u7684 $x$ \u53ef\u4ee5\u662f $0$\uff0c\u5373\u56de\u5230\u521d\u59cb\u72b6\u6001\uff09\u3002\r\n\r\n`3 x y`\uff0c\u67e5\u8be2 $x$ \u6240\u5728\u8054\u901a\u5757\u80fd\u5230\u7684\u70b9\u4e2d\u70b9\u6743\u7b2c $y$ \u5c0f\u7684\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u8f93\u51fa $-1$\u3002\r\n\r\n\u5206\u6790\r\n\r\n\u54ce\u5440\uff0c\u8fd9\u4e2a\u56de\u5230\u67d0\u4e2a\u72b6\u6001\u8fd9\u4e48\u6bd2\u7624\uff0c\u4f46\u662f\u53d1\u73b0\u6bcf\u4e2a\u72b6\u6001\u5165\u8bfb\u5747\u4e3a $1$\uff0c\u90a3\u8003\u8651\u76f4\u63a5\u628a\u64cd\u4f5c\u6811\u5efa\u51fa\u6765\uff0c\u90a3\u64cd\u4f5c\u4e8c\u5c31\u89e3\u51b3\u4e86\uff01\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c$x \\rightarrow i$\r\n\uff0c\u5bf9\u4e8e\u5176\u4ed6\u64cd\u4f5c $i-1 \\rightarrow i$\u3002\r\n\r\n\u56de\u6765\u770b\u4fee\u6539\uff0c\u53d1\u73b0\u662f\u5408\u5e76\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u66b4\u529b\u5408\u5e76\u7684\u590d\u6742\u5ea6\u663e\u662f $\\mathcal O(sz)$\uff0c$sz$ \u4e3a\u8fde\u901a\u5757\u5927\u5c0f\uff0c\u4f3c\u4e4e\u4e0d\u592a\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u7528\u5206\u5757\u5747\u644a\uff0c\u6309\u503c\u57df\u79bb\u6563\u5316\u4e4b\u540e\u590d\u6742\u5ea6\u5c31\u8bb2\u5230 $\\mathcal O(\\sqrt n)$ \u7684\u4e86\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u8bbe $f_{u,i}$\uff0c\u8868\u793a\u5df2 $u$ \u4e3a\u6839\u7684\u8fde\u901a\u5757\u4e2d\uff0c\u5728 $i$ \u503c\u57df\u5757\u7684\u6570\u91cf\u3002\r\n\r\n\u6700\u540e\u4e00\u6b65\u4fee\u6539\uff0c\u76f4\u63a5\u66b4\u529b\u627e\u5230\u5728\u90a3\u4e2a\u503c\u57df\u5757\u5185\uff0c\u518d\u66b4\u529b\u679a\u4e3e\u5757\u5185\u7684\u6570\u5c31\u884c\u4e86\uff0c\u7528\u4e0a\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u56e0\u4e3a\u64cd\u4f5c\u6811\u4e0a\u8fd8\u5f97\u56de\u6eaf\uff0c\u6240\u4ee5\u5f97\u652f\u6301\u64a4\u9500\uff0c\u590d\u6742\u5ea6 $\\mathcal O(\\sqrt n\\log n)$\u3002\r\n\r\n\u4e8e\u662f\u7a0d\u5fae\u8c03\u4e00\u4e0b\u5757\u957f\u7406\u8bba\u590d\u6742\u5ea6 $\\mathcal O(n\\sqrt{n\\log n})$\u3002\r\n\r\n\u4ed4\u7ec6\u4e00\u770b\u6211\u7684\u5929\u5440\uff0c\u7a7a\u95f4\u7adf\u7136\u53ea\u6709 `20mb`\uff0c\u90a3 $\\mathcal O(n\\sqrt{n\\log n})$ \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u5f53\u573a\u66b4\u6bd9\uff01\r\n\r\n\u4ed4\u7ec6\u4e00\u770b\uff0c\u5148\u5361\u7a7a\u95f4\uff0c\u76f4\u63a5\u628a $f$ \u5f00\u6210 `short`\u3002\u60f3\u4e86\u4e00\u60f3\u89c9\u5f97\u5e76\u67e5\u96c6\u5e38\u6570\u600e\u4e48\u5c0f\uff0c\u7a0d\u5fae\u65f6\u95f4\u653e\u5bbd\u4e00\u70b9\u4e0d\u662f\u4e0d\u884c\uff0c\u6240\u4ee5\u679c\u65ad\u8c03\u5927\u5757\u957f\uff0c\u53d1\u73b0\u5757\u6570\u5927\u6982\u5230 $46$ \u7684\u65f6\u5019\u6ca1\u5565\u95ee\u9898\u3002\r\n\r\ncode\r\n\r\n```cpp\r\n#include <bits/stdc++.h>\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\r\n#define LL long long\r\nusing namespace std;\r\n\r\nnamespace IO {\r\n    char ibuf[(1 << 20) + 1], *iS, *iT;\r\n#if ONLINE_JUDGE\r\n#define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\r\n#else\r\n#define gh() getchar()\r\n#endif\r\n    inline long long read () {\r\n        char ch = gh();\r\n        long long x = 0;\r\n        bool t = 0;\r\n        while (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\r\n        while (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\r\n        return t ? ~(x - 1) : x;\r\n    }\r\n    inline void write(long long x) {\r\n        if (x < 0) {\r\n            x = ~(x - 1);\r\n            putchar('-');\r\n        }\r\n        if (x > 9)\r\n            write(x / 10);\r\n        putchar(x % 10 + '0');\r\n    }\r\n}\r\n\r\nusing IO::read;\r\nusing IO::write;\r\n\r\nconst int maxn(1e5 + 7), B(47);\r\nint n, m, sqn, len, head[maxn], tot, typ[maxn], a[maxn], b[maxn], ans[maxn], fa[maxn], sz[maxn];\r\nshort f[maxn][B];\r\nstruct edge {\r\n    int v, nxt;\r\n} e[maxn];\r\nstruct Node {\r\n    int x, y;\r\n    inline bool operator < (const Node &rhs) const {\r\n        return x < rhs.x;\r\n    }\r\n} p[maxn];\r\ninline int find (int x) {\r\n    return fa[x] == x ? fa[x] : find(fa[x]);\r\n}\r\ninline void add_edge (int u, int v) {\r\n    e[++tot] = {v, head[u]};\r\n    head[u] = tot;\r\n}\r\n\r\ninline void dfs (int u) {\r\n    bool fl = 0;\r\n    if (typ[u] == 1) {\r\n        a[u] = find(a[u]), b[u] = find(b[u]);\r\n        int x = a[u], y = b[u];\r\n        if (x != y) {\r\n            fl = 1;\r\n            if (sz[x] > sz[y]) swap(x, y), swap(a[u], b[u]);\r\n            sz[y] += sz[x], fa[x] = y;\r\n            for (int i = 1; i <= len; i++) f[y][i] += f[x][i];\r\n        }\r\n    } else if (typ[u] == 3) {\r\n        int x = b[u], y = 0;\r\n\t\ta[u] = find(a[u]);\r\n        if (x > sz[a[u]]) ans[u] = -1;\r\n        else {\r\n\t        for (int i = 1; i <= len && !y; i++)\r\n\t            if (x > f[a[u]][i]) x -= f[a[u]][i];\r\n\t            else y = i;\r\n\t        for (int i = (y - 1) * sqn + 1; i <= min(n, y * sqn) && x; i++)\r\n\t            if (find(p[i].y) == a[u]) \r\n\t                --x, ans[u] = p[i].x;\r\n\t\t}\r\n    }\r\n    for (int i = head[u]; i; i = e[i].nxt) dfs(e[i].v);\r\n    if (fl) {\r\n        int x = a[u], y = b[u];\r\n        for (int i = 1; i <= len; i++) f[y][i] -= f[x][i];\r\n        fa[x] = x, sz[y] -= sz[x];\r\n    }\r\n}\r\n\r\nint main() {\r\n    n = read(), m = read(), sqn = n / 46, len = (n - 1) / sqn + 1;\r\n    for (int i = 1; i <= n; i++) p[i] = {(int)read(), i}, fa[i] = i, sz[i] = 1;\r\n    sort(p + 1, p + n + 1);\r\n    for (int i = 1; i <= n; i++) ++f[p[i].y][(i - 1) / sqn + 1];\r\n    for (int i = 1; i <= m; i++) {\r\n        typ[i] = read();\r\n        if (typ[i] == 2) {\r\n            add_edge(read(), i);\r\n        } else {\r\n            add_edge(i - 1, i);\r\n            a[i] = read(), b[i] = read();\r\n        }\r\n    }\r\n    dfs(0);\r\n    for (int i = 1; i <= m; i++) if (typ[i] == 3) write(ans[i]), puts(\"\");\r\n}\r\n// I love WHQ!\r\n```",
        "postTime": 1676594721,
        "uid": 317495,
        "name": "JWRuixi",
        "ccfLevel": 7,
        "title": "P5064 [Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e"
    },
    {
        "content": "\u4e00\u79cd\u4e0d\u9700\u8981\u6811\u5206\u5757\u3001\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\sqrt{n})$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$ \u7684\u505a\u6cd5\u3002\n\n\uff08\u4e0b\u6587\u4e2d\u7684\u201c\u5143\u7d20\u201d\u53ef\u7406\u89e3\u4e3a\u201c\u6570\u201d\u201c\u503c\u201d\u4e4b\u7c7b\u7684\uff09\n\n**\u5927\u5bb6\u5148\u770b gyh20 \u7684\u9898\u89e3**\uff0c\u6211\u6765\u7b80\u5355\u590d\u8ff0\u4e0b\u60f3\u6cd5\u3002\u8003\u8651\u7528\u503c\u57df\u5206\u5757\u6c42 kth \uff0c\u79bb\u7ebf\u6240\u6709\u64cd\u4f5c\uff0c\u5efa\u51fa\u64cd\u4f5c\u6811\uff0c\u8fde\u8fb9\u64cd\u4f5c\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u6bcf\u4e2a\u5e76\u67e5\u96c6\u7684\u6839\u7ef4\u62a4\u503c\u57df\u5206\u5757\uff0c\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u5757\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff08\u5728\u8fd9\u4e2a\u96c6\u5408\u5185\u7684\uff09\u3002\u8fd9\u6837 dfs \u64cd\u4f5c\u6811\uff0c\u9047\u5230\u8be2\u95ee\u7684\u9876\u70b9\uff0c\u627e\u5230\u8be2\u95ee\u7684\u8fde\u901a\u5757\u5bf9\u5e94\u5e76\u67e5\u96c6\u7684\u6839\uff0c\u786e\u5b9a\u7b54\u6848\u5728\u54ea\u4e2a\u5757\uff0c\u7136\u540e\u904d\u5386\u5757\u5185\u5143\u7d20\uff0c\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u5b83\u4eec\u662f\u5426\u5728\u8be2\u95ee\u7684\u8fde\u901a\u5757\u4e2d\u3002\u8fd9\u4e2a\u505a\u6cd5\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $O(n \\sqrt{n \\log n})$ \uff0c\u8dd1\u5f97\u98de\u5feb\uff08\u751a\u81f3\u6bd4\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684\u505a\u6cd5\u8fd8\u5feb\uff09\u3002\n\n**\u518d\u770b zhylj \u7684\u9898\u89e3**\uff0c\u5728\u524d\u4e00\u79cd\u505a\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u9010\u5757\u5904\u7406\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u90fd dfs \u4e00\u904d\u64cd\u4f5c\u6811\uff0c\u5e76\u67e5\u96c6\u7684\u6839\u8bb0\u5f55\u6240\u5728\u96c6\u5408\u4e2d\uff0c\u5728\u76ee\u524d\u5904\u7406\u7684\u5757\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002\u6bcf\u4e00\u6b21 dfs \u64cd\u4f5c\u6811\uff0c\u5e76\u67e5\u96c6\u8fde\u8fb9\u90fd\u5f97\u5148\u627e\u5230\u4e24\u4e2a\u96c6\u5408\u7684\u6839\uff0c\u662f $O(\\log n)$ \u7684\uff0c\u518d $O(1)$ \u5408\u5e76\u3002\u56e0\u6b64\u6211\u4eec\u5148 dfs \u4e00\u904d\u64cd\u4f5c\u6811\uff0c\u63d0\u524d\u627e\u5230\u6bcf\u4e00\u6b21\u8fde\u8fb9\u64cd\u4f5c\u4e2d\u4e24\u4e2a\u96c6\u5408\u7684\u6839\u5e76\u5b58\u4e0b\u6765\uff0c\u63a5\u4e0b\u6765 dfs \u5c31\u4e0d\u7528\u627e\u6839\u4e86\u3002\u8fd9\u4e2a\u505a\u6cd5\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u5230 $O(n)$ \uff0c\u4e14\u6574\u5757\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u89c6\u4e3a $O(n \\sqrt{n})$ \uff0c\u74f6\u9888\u5728\u6563\u5757\u3002\n\n**\u6211\u4eec\u5728 zhylj \u7684\u57fa\u7840\u4e0a\u7a0d\u52a0\u6539\u8fdb**\u3002\u5e76\u67e5\u96c6\u7684\u6839\u591a\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u5b58\u6709\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u3001\u5728\u76ee\u524d\u5904\u7406\u7684\u5757\u5185\u7684\u5143\u7d20\u3002\u5408\u5e76\u4e24\u4e2a\u94fe\u8868\u662f $O(1)$ \u7684\uff0c\u90a3\u4e48\u5e76\u67e5\u96c6\u5408\u5e76\u4ecd\u662f $O(1)$ \uff0c\u64a4\u9500\u8fde\u8fb9\u540c\u7406\u3002\u5bf9\u4e8e\u6563\u5757\uff0c\u6211\u4eec\u628a\uff08\u8be2\u95ee\u7684\u8fde\u901a\u5757\u6240\u5728\u5e76\u67e5\u96c6\u7684\u6839\u7684\uff09\u94fe\u8868\u8a8a\u5230\u6570\u7ec4\u4e0a\uff0c\u7528 `nth_element` \u6c42\u51fa kth \u3002\u94fe\u8868\u7684\u957f\u5ea6\u662f $O(\\sqrt{n})$ \u7684\uff0c\u8fdb\u800c\u6563\u5757\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u88ab\u52a0\u901f\u5230 $O(n \\sqrt{n})$ \u3002\n\n\u7531\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u79cd\u4e0d\u9700\u8981\u6811\u5206\u5757\u3001\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\sqrt{n})$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$ \u7684\u505a\u6cd5\u3002\n\n\u5982\u6709\u758f\u6f0f\uff0c\u9ebb\u70e6\u5728\u8bc4\u8bba\u533a\u4e2d\u6307\u51fa\u3002[\u53c2\u8003\u4ee3\u7801\uff0c\u5b9e\u73b0\u8bf7\u6ce8\u610f\u5e38\u6570\u4f18\u5316](https://www.luogu.com.cn/paste/ad148cbb)\u3002",
        "postTime": 1662616767,
        "uid": 234011,
        "name": "Cat_shao",
        "ccfLevel": 0,
        "title": "P5064"
    },
    {
        "content": "\u5173\u952e\u8bcd\uff1a\u64cd\u4f5c\u6811\u3001\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3001\u503c\u57df\u5206\u5757\u3002\n\n\u8981\u6c42\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\uff1a\n\n1. \u5728\u56fe\u4e0a\u6dfb\u52a0\u4e00\u6761\u53cc\u5411\u8fb9\n  \n2. \u8fd4\u56de\u5230\u5386\u53f2\u7248\u672c\n  \n3. \u67e5\u8be2\u4e00\u70b9\u6240\u5728\u8fde\u901a\u5757\u5185\u70b9\u6743\u7b2c $k$ \u5c0f\n  \n\n\u6700\u5f00\u59cb\u6211\u7684\u60f3\u6cd5\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u5957\u503c\u57df\u5206\u5757\uff0c\u80fd\u4e0d\u80fd\u62ff\u8fd9\u4e2a\u505a\u5148\u4e0d\u8bf4\uff0c\u5c31\u662f\u771f\u7684\u8fd9\u4e48\u505a\uff0c\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u4f1a\u7206\u70b8\u3002\u8003\u8651\u5efa\u51fa\u64cd\u4f5c\u6811\uff0c\u6709\u4e86\u64cd\u4f5c\u6811\u5728\u4e0a\u9762\u8fdb\u884c\u4e00\u6b21 DFS\uff0cDFS \u8fc7\u7a0b\u4e2d\u9700\u8981\u7ef4\u62a4\u6811\u7ed3\u6784\u4ee5\u53ca\u8fde\u901a\u5757\u7684\u6743\u503c\u4fe1\u606f\uff0c\u7531\u4e8e\u6ca1\u6709\u5bf9\u5386\u53f2\u7248\u672c\u7684\u8be2\u95ee\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u5b9e\u73b0\uff0c\u56de\u7b54\u7b2c $k$ \u5c0f\u5219\u53ef\u4ee5\u7528\u503c\u57df\u5206\u5757\u5b9e\u73b0\u3002\u8bb2\u4e86\u4e00\u4e0b\u601d\u8def\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5177\u4f53\u7684\u5b9e\u73b0\u4e86\u3002\n\n**\u64cd\u4f5c\u6811\u7684\u6784\u5efa**\n\n\u64cd\u4f5c\u6811\u5176\u5b9e\u662f\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\uff0c\u5bf9\u4e8e\u7b2c $i$ \u6b21\u64cd\u4f5c\uff0c\u5982\u679c\u662f\u8fde\u8fb9\u6216\u8005\u67e5\u8be2\uff0c\u90a3\u5c31\u76f4\u63a5\u4ece\u4e0a\u4e00\u6b21\u64cd\u4f5c\u7684\u72b6\u6001\u8f6c\u79fb\u5230\u73b0\u5728\u7684\u72b6\u6001\uff0c\u8fde\u8fb9 $(i-1,i)$ \u5373\u53ef\u3002\u5982\u679c\u662f\u8fd4\u56de\u5230\u5386\u53f2\u7248\u672c $x$\uff0c\u90a3\u4e48\u5c31\u8fde\u8fb9 $(x,i)$\u3002\u4e0b\u9762\u662f\u4e00\u68f5\u64cd\u4f5c\u6811\u7684\u793a\u4f8b\uff0c\u6811\u8fb9\u4e0a\u6807\u6ce8\u4e86\u64cd\u4f5c\u4ee5\u53ca\u64cd\u4f5c\u5bf9\u5e94\u8981\u505a\u7684\u4e8b\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/feo4pjug.png)\n\n\u8fd9\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u6a21\u62df\u4e0a\u8ff0\u8fc7\u7a0b\u5efa\u6811\u5373\u53ef\u3002\n\n```cpp\nfor(int cx=1;cx<=q;++cx){\n  std::cin>>optp[cx];\n  if(optp[cx]==1){\n    std::cin>>opx[cx]>>opy[cx];\n    addEdge(cx-1,cx);\n  }else if(optp[cx]==2){\n    std::cin>>opx[cx];\n    addEdge(opx[cx],cx);\n  }else if(optp[cx]==3){\n    std::cin>>opx[cx]>>opy[cx];\n    addEdge(cx-1,cx);\n  }\n}\n```\n\n**\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\n\n\u4e0a\u9762\u63d0\u5230\uff0c\u5982\u679c\u8981\u6c42\u56de\u5230\u5386\u53f2\u7248\u672c\uff0c\u5c31\u8981\u64a4\u9500\u64cd\u4f5c\u76f4\u5230\u56de\u5230\u76ee\u6807\u5386\u53f2\u7248\u672c\u3002\u7531\u4e8e\u662f\u5728\u56fe\u4e0a\u5bf9\u8fde\u901a\u5757\u8fdb\u884c\u67e5\u8be2\uff0c\u6211\u4eec\u8003\u8651\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u4f46\u662f\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\u4e0d\u80fd\u652f\u6301\u64a4\u9500\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u538b\u7f29\u7684\u5e76\u67e5\u96c6\u4f1a\u7834\u574f\u8fde\u901a\u5757\u5f62\u6001\u3002\u90a3\u4e48\u6211\u4eec\u8003\u8651\u6309\u79e9\u5408\u5e76\uff0c\u6309\u79e9\u5408\u5e76\u6709\u4e24\u79cd\u5199\u6cd5\uff0c\u4e00\u79cd\u662f\u6df1\u5ea6\u5c0f\u7684\u5408\u5e76\u5230\u6df1\u5ea6\u5927\u7684\uff0c\u4e00\u79cd\u662f\u70b9\u6570\u5c11\u7684\u5408\u5e76\u5230\u70b9\u6570\u591a\u7684\uff0c\u540e\u8005\u66f4\u5e38\u89c1\uff0c\u56e0\u4e3a\u53ea\u8fdb\u884c\u6309\u79e9\u5408\u5e76\u4e0d\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u7684\u60c5\u51b5\u4e0b\uff0c\u4e24\u8005\u590d\u6742\u5ea6\u7686\u4e3a $O(q\\log n)$ \u7684\uff0c\u800c\u70b9\u6570\u6bd4\u6df1\u5ea6\u66f4\u6613\u7ef4\u62a4\u3002\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u53ef\u4ee5\u4fdd\u6301\u8fde\u901a\u5757\u7684\u5f62\u6001\uff0c\u56e0\u6b64\u5e76\u67e5\u96c6\u53ef\u4ee5\u5f00\u6808\u8bb0\u5f55\u64cd\u4f5c\uff0c\u5982\u679c\u8981\u64a4\u9500\u5c31\u628a\u6808\u9876\u7684\u64cd\u4f5c\u53d6\u51fa\u65ad\u8fb9\u3001\u590d\u539f\u79e9\u3001\u590d\u539f\u7ef4\u62a4\u7684\u503c\u57df\u5206\u5757\u5185\u5bb9\u3002\n\n\u8fd9\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u8981\u6ce8\u610f\u4e00\u4e0b\u64a4\u9500\u65f6\u6570\u636e\u7684\u66f4\u65b0\u987a\u5e8f\uff0c\u4ee5\u53ca\u6709\u6ca1\u6709\u6f0f\u6389\u6ca1\u6709\u590d\u539f\u7684\u6570\u636e\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u7684\u3002\n\n```cpp\nshort bin[sz][bsz];\nstruct UnionFindSet{\n  int fa[sz],tsz[sz];\n  struct op_t{\n    int u,v;\n  };\n  std::stack<op_t> stk;\n  void clear(int n){\n    for(int cx=0;cx<=n;++cx)\n      fa[cx]=cx,tsz[cx]=1,bin[cx][(pids[cx]-1)/lim]=1;\n  }\n  int find(int x){\n    if(fa[x]==x) return x;\n    return find(fa[x]);\n  }\n  void merge(int u,int v){\n    int fu=find(u),fv=find(v);\n    if(tsz[fu]>tsz[fv]) std::swap(fu,fv);\n    stk.push(op_t{fu,fv});\n    if(fu==fv) return;\n    tsz[fv]+=tsz[fu];\n    for(int cx=0;cx<=(n-1)/lim;++cx)\n      bin[fv][cx]+=bin[fu][cx];\n    fa[fu]=fv;\n  }\n  void undo(){\n    auto p=stk.top();\n    stk.pop();\n    if(p.u==p.v) return;\n    fa[p.u]=p.u;\n    for(int cx=0;cx<=(n-1)/lim;++cx)\n      bin[p.v][cx]-=bin[p.u][cx];\n    tsz[p.v]-=tsz[p.u];\n  }\n}UFS;\n```\n\n\u5176\u4e2d `bin` \u662f\u7ef4\u62a4\u7684\u503c\u57df\u5206\u5757\uff0c\u4e0b\u9762\u4f1a\u8bb2\u3002\n\n**\u503c\u57df\u5206\u5757\u4e0e\u64cd\u4f5c\u6811\u4e0a DFS**\n\n\u9996\u5148\u672c\u9898\u503c\u57df\u592a\u5927\u4e86\uff0c\u8981\u8fdb\u884c\u79bb\u6563\u5316\u3002\u4e4b\u540e\u5728\u64cd\u4f5c\u6811\u4e0a DFS\uff08\u6ce8\u610f\u4ece\u521d\u59cb\u7248\u672c $0$ \u5f00\u59cb\uff09\uff0c\u5982\u679c\u662f\u8fde\u8fb9\u64cd\u4f5c\uff0c\u76f4\u63a5\u5e76\u67e5\u96c6\u4e0a\u8fdb\u884c\u4e00\u6b21 `merge` \u8fde\u8fb9\uff0c\u5bf9\u5e94\u7684\u503c\u57df\u5206\u5757\u628a\u4e24\u4e2a\u8fde\u901a\u5757\u7684\u4fe1\u606f\u5408\u5e76\uff1b\u5982\u679c\u662f\u67e5\u8be2\u64cd\u4f5c\u5c31\u5728\u503c\u57df\u5206\u5757\u5185\u8fdb\u884c\u67e5\u8be2\u7b2c $k$ \u5c0f\uff0c\u6574\u5757\u76f4\u63a5 $O(1)$ \u770b\uff0c\u5269\u4f59\u90e8\u5206\u66b4\u529b\u770b\u5728\u4e0d\u5728\u8fde\u901a\u5757\u5185\uff0c\u8fd9\u90e8\u5206\u662f $O(B\\log n)$ \u7684\uff08$B$ \u4e3a\u5757\u957f\uff09\u3002\u7531\u4e8e DFS \u5b8c\u4e00\u68f5\u5b50\u6811\u540e\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u8981\u64a4\u9500\uff0c\u6240\u4ee5\u56de\u6eaf\u65f6\u8fdb\u884c\u5e76\u67e5\u96c6\u7684 `undo` \u6765\u64a4\u9500\u4e4b\u524d\u7684\u7edf\u8ba1\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff0c\u6ce8\u610f\u5230\u64cd\u4f5c $2$ \u5df2\u7ecf\u7531\u64cd\u4f5c\u6811\u7684\u5f62\u6001\u8868\u793a\uff0c\u6240\u4ee5 DFS \u53ea\u9700\u5904\u7406\u64cd\u4f5c $1$ \u548c $3$\u3002\n\n```cpp\nvoid DFS(int u){\n  if(optp[u]==1) UFS.merge(opx[u],opy[u]);\n  else if(optp[u]==3){\n    int fxu=UFS.find(opx[u]);\n    int bid;\n    for(bid=0;bid<=(n-1)/lim;++bid){\n      if(opy[u]<=bin[fxu][bid]) break;\n      opy[u]-=bin[fxu][bid];\n    }\n    if(bid>(n-1)/lim) ans[u]=-1;\n    else{\n      for(int cx=bid*lim+1;cx<=(bid+1)*lim&&opy[u]!=0;++cx){\n        if(UFS.find(pw[cx].second)==fxu) opy[u]--;\n        ans[u]=pw[pids[pw[cx].second]].first;\n      }\n    }\n  }\n  for(int p=head[u];p!=0;p=graph[p].nxt)\n    DFS(graph[p].to);\n  if(optp[u]==1) UFS.undo();\n}\n```\n\n**\u590d\u6742\u5ea6\u5206\u6790**\n\n\u79bb\u6563\u5316 $O(n\\log n)$\uff0c\u5efa\u8868\u8fbe\u5f0f\u6811 $O(q)$\uff0c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u8fde\u8fb9\u548c\u64a4\u9500 $O(q\\log n)$\uff0c\u8868\u8fbe\u5f0f\u6811\u4e0a DFS \u4e3a $O(q(\\frac{n}{B}+B\\log n))$\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n+q(\\frac{n}{B}+B\\log n))$\u3002\u53c8\u8868\u8fbe\u5f0f\u6811\u5927\u5c0f $O(n)$\uff0c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6 $O(n)$\uff0c\u503c\u57df\u5206\u5757 $O(\\frac{n^2}{B})$\uff0c\u603b\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac{n^2}{B})$\u3002\u53d6 $B=O(\\sqrt{\\frac{n}{\\log n}})$\uff0c\u5f97\u5230\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n+q\\sqrt{n\\log n})$ \u548c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(n\\sqrt{n\\log n})$ \u7684\u505a\u6cd5\u3002\u6ce8\u610f\u5230\u672c\u9898\u65f6\u95f4\u548c\u7a7a\u95f4\u9650\u5236\uff0c$B$ \u5e94\u5f53\u8f83\u5927\uff0c\u4f7f\u5757\u6570\u8f83\u5c11\uff0c\u503c\u57df\u5206\u5757\u7a7a\u95f4\u5f00\u9500\u4e5f\u4f1a\u51cf\u5c11\u3002\u53e6\u5916\uff0c\u6ce8\u610f\u5230\u672c\u9898\u6570\u636e\u8303\u56f4 $10^5$ \u53ef\u4ee5\u7528 `short` \u5b58\u50a8\uff0c\u53ef\u4ee5\u4f18\u5316\u7a7a\u95f4\u5e38\u6570\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e3a\u4e86\u5361\u7a7a\u95f4\uff0c\u91cd\u5fc3\u8981\u5411\u7a7a\u95f4\u9002\u5f53\u503e\u659c\uff0c\u6700\u597d\u7684\u529e\u6cd5\u662f\u56fa\u5b9a\u5757\u6570\uff0c\u5757\u957f\u53d6 $n$ \u548c\u5757\u6570\u4e4b\u6bd4\uff08\u6ce8\u610f\u5757\u957f\u5411\u4e0a\u53d6\u6574\uff09\u3002\n\n\u53e6\u9644\uff1a[\u63d0\u4ea4\u8bb0\u5f55](https://www.luogu.com.cn/record/72498685)\uff0c\u60f3\u8981\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u627e\u6211\u3002",
        "postTime": 1648360798,
        "uid": 496840,
        "name": "SAMSHAWCRAFT",
        "ccfLevel": 0,
        "title": "[Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e - \u9898\u89e3"
    },
    {
        "content": "\u770b\u5230\u8fd9\u79cd\u201c\u56de\u5230\u7b2c $x$ \u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001\u201d\uff0c\u8003\u8651\u5efa\u51fa\u64cd\u4f5c\u6811\u3002\u73b0\u5728\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a\n\n- \u52a0\u8fb9 $u, v$\u3002\n- \u64a4\u9500\u52a0\u8fb9 $u, v$\u3002\n- \u6c42\u8fde\u901a\u5757\u5185\u7b2c $k$ \u5c0f\u3002\n\n\u524d\u4e24\u4e2a\u64cd\u4f5c\u663e\u7136\u53ef\u4ee5\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u4f46\u662f\u7b2c\u4e09\u4e2a\u64cd\u4f5c\u6709\u70b9\u5c0f\u9ebb\u70e6\uff1a\u7ebf\u6bb5\u6811\u5408\u5e76\u548c\u5e73\u8861\u6811\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u9519\u7684 /ng\n\n\u4f46\u4e8b\u5b9e\u4e0a\u5904\u7406\u7b2c $k$ \u5c0f\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u5206\u5757\u3002\n\n\u6211\u4eec\u66b4\u529b\u4e00\u70b9\uff0c\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u7ef4\u62a4\u4e00\u4e2a\u503c\u57df\u5206\u5757\uff0c\u5408\u5e76\u65f6\u66b4\u529b\u52a0\u8d77\u6765\uff0c\u64a4\u9500\u5408\u5e76\u65f6\u66b4\u529b\u51cf\u6389\uff0c\u6c42\u7b2c $k$ \u5c0f\u65f6\u8ddf\u4e00\u822c\u503c\u57df\u5206\u5757\u4e00\u6837\u505a\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u5361\u7a7a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u5757\u957f\u5f00\u5c0f\u4e00\u70b9\u5e76\u7528 short \u5b58\u5373\u53ef\u3002\n\n\u8bbe\u5757\u957f\u4e3a $S$\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log n + m(\\log n + S + \\frac{m}{S}))$\u3002\u6211\u7684\u4ee3\u7801\u4e2d\u53d6 $S = 40$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nconst int block = 2.5e3;\nint n, k, cnt = 0;\nint root[100007], size[100007], a[100007], b[100007], pos[100007], ref[100007], head[100007], op[100007], x[100007], y[100007], ans[100007];\nshort bucket[100007][41];\nEdge edge[100007];\n\ninline void init(int n){\n\tfor (register int i = 1; i <= n; i++){\n\t\troot[i] = i;\n\t\tsize[i] = 1;\n\t}\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\nint get_root(int x){\n\tif (root[x] == x) return x;\n\treturn get_root(root[x]);\n}\n\nvoid dfs(int u){\n\tif (op[u] == 1){\n\t\tx[u] = get_root(x[u]);\n\t\ty[u] = get_root(y[u]);\n\t\tif (x[u] != y[u]){\n\t\t\tif (size[x[u]] > size[y[u]]) swap(x[u], y[u]);\n\t\t\troot[x[u]] = y[u];\n\t\t\tsize[y[u]] += size[x[u]];\n\t\t\tfor (register int i = 1; i <= k; i++){\n\t\t\t\tbucket[y[u]][i] += bucket[x[u]][i];\n\t\t\t}\n\t\t}\n\t} else if (op[u] == 3){\n\t\tx[u] = get_root(x[u]);\n\t\tif (y[u] > size[x[u]]){\n\t\t\tans[u] = -1;\n\t\t} else {\n\t\t\tfor (register int i = 1; i <= k; i++){\n\t\t\t\tif (y[u] <= bucket[x[u]][i]){\n\t\t\t\t\tint r = min(i * block, n);\n\t\t\t\t\tfor (register int j = block * (i - 1) + 1; j <= r; j++){\n\t\t\t\t\t\tif (get_root(ref[j]) == x[u] && --y[u] == 0){\n\t\t\t\t\t\t\tans[u] = b[j];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ty[u] -= bucket[x[u]][i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tdfs(edge[i].end);\n\t}\n\tif (op[u] == 1 && x[u] != y[u]){\n\t\troot[x[u]] = x[u];\n\t\tsize[y[u]] -= size[x[u]];\n\t\tfor (register int i = 1; i <= k; i++){\n\t\t\tbucket[y[u]][i] -= bucket[x[u]][i];\n\t\t}\n\t}\n}\n\nint main(){\n\tint m;\n\tcin >> n >> m;\n\tk = (n - 1) / block + 1;\n\tinit(n);\n\tfor (register int i = 1; i <= n; i++){\n\t\tcin >> a[i];\n\t\tb[i] = a[i];\n\t}\n\tsort(b + 1, b + n + 1);\n\tfor (register int i = 1; i <= n; i++){\n\t\ta[i] = lower_bound(b + 1, b + n + 1, a[i]) - b;\n\t\ta[i] += pos[a[i]]++;\n\t\tref[a[i]] = i;\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\tcin >> op[i] >> x[i];\n\t\tif (op[i] != 2){\n\t\t\tcin >> y[i];\n\t\t\tadd_edge(i - 1, i);\n\t\t} else {\n\t\t\tadd_edge(x[i], i);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tbucket[i][(a[i] - 1) / block + 1]++;\n\t}\n\tdfs(0);\n\tfor (register int i = 1; i <= m; i++){\n\t\tif (op[i] == 3) cout << ans[i] << endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1683187980,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5064 \u3010[Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\u3011"
    },
    {
        "content": "\u5ba3\u4f20\u535a\u5ba2 $\\to$ [link](https://www.cnblogs.com/Plozia/p/16463637.html)\n\n\u6bd2\u7624\u5361\u5e38\u5206\u5757\u9898\u4f46\u662f\u770b\u4f60\u5199\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u9053\u9898\u6709\u56de\u6eaf\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8003\u8651\u5efa\u7acb\u64cd\u4f5c\u6811\uff0c\u4e0b\u8bbe\u7b2c $i$ \u4e2a\u64cd\u4f5c\u5728\u64cd\u4f5c\u6811\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u4e3a $p_i$\uff1a\n\n\u5148\u5efa\u7acb 0 \u53f7\u8282\u70b9\u8868\u793a\u521d\u59cb\u72b6\u6001\uff08\u4ee4 $p_0=0$\uff09\uff0c\u5bf9\u4e8e 1,3 \u4e24\u4e2a\u975e\u56de\u6eaf\u64cd\u4f5c\uff08\u8bbe\u4e3a\u7b2c $i$ \u4e2a\u64cd\u4f5c\uff09\uff0c\u5f53\u524d\u64cd\u4f5c\u7f16\u53f7\u5c31\u662f\u64cd\u4f5c\u6811\u4e0a\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7\uff0c\u5373\u4ee4 $p_i=i$\uff1b\u5bf9\u4e8e 2 \u8fd9\u4e2a\u56de\u6eaf\u64cd\u4f5c\uff0c\u7531\u4e8e\u6211\u4eec\u77e5\u9053\u5176\u4f1a\u56de\u6eaf\u5230\u54ea\u4e00\u6b65\uff08\u8bbe\u4e3a\u7b2c $j$ \u6b65\uff09\uff0c\u5219\u4ee4 $p_i = p_j$\u3002\n\n\u6700\u540e\u5bf9 1,3 \u64cd\u4f5c\uff0c\u8fde\u8fb9 $p_{i-1},p_i$\uff0c\u8fb9\u4e0a\u7684\u6743\u503c\u5c31\u662f\u5f53\u524d\u64cd\u4f5c\u3002\n\n\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c31\u6210\u529f\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u70e6\u4eba\u7684\u56de\u6eaf\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u8fd9\u68f5\u64cd\u4f5c\u6811\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\uff0c\u800c\u904d\u5386\u64cd\u4f5c\u6811\u65f6\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4e00\u6761\u8fb9\u7684\u63d2\u5165\u4e0e\u5220\u9664\uff0c\u548c\u4e00\u4e2a\u8be2\u95ee\uff0c\u548c\u7ebf\u6bb5\u6811\u5206\u6cbb\u6709\u70b9\u50cf\u3002\n\n\u7136\u540e\u5148\u5bf9\u6743\u503c\u79bb\u6563\u5316\uff0c\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u7ef4\u62a4\u5f53\u524d\u56fe\u7684\u8fde\u901a\u6027\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u6211\u4eec\u8fdb\u884c\u503c\u57df\u5206\u5757\uff0c\u6bcf\u4e00\u4e2a\u70b9\u5728\u5e76\u67e5\u96c6\u4e0a\u7684\u6839\u8282\u70b9\u7ef4\u62a4\u5f53\u524d\u6240\u5728\u8fde\u901a\u5757\u7684\u6743\u503c\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u5728\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u4e0a\u67e5\u8be2\u7b2c k \u5c0f\u3002\n\n\u63a5\u4e0b\u6765\u8bb2\u8bb2\u6211\u7684\u5199\u6cd5\uff1a\n\n0. \u7531\u4e8e\u6211\u7684\u5199\u6cd5\u7279\u522b\u5361\uff08#16 499ms AC\uff09\uff0c\u6240\u4ee5\u6211\u7684\u4ee3\u7801\u4e0d\u89c1\u5f97\u6709\u53c2\u8003\u4ef7\u503c\uff08\u4f46\u662f\u5bf9\u7684\uff09\uff0c\u8bf7\u8c28\u614e\u53c2\u8003\u3002\n1. \u5b9e\u9645\u64cd\u4f5c\u4e2d\u5efa\u8bae\u91c7\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7ef4\u62a4\u5e76\u67e5\u96c6\uff0c\u867d\u7136\u8fd9\u6bd4\u6309\u8f76\u5408\u5e76\u6162\u4f46\u662f\u64cd\u4f5c 3 \u51fa\u73b0 k > \u5f53\u524d\u5b50\u6811\u5927\u5c0f\u65f6\u53ef\u4ee5\u76f4\u63a5\u5224\u6389\u3002\n2. \u5efa\u8bae\u591a\u5c01\u88c5\u51e0\u4e2a\u51fd\u6570\uff08\u4f46\u662f\u4e0d\u8981\u592a\u591a\uff0c\u5c01\u88c5\u6bd4\u8f83\u590d\u6742\u7684\u64cd\u4f5c\uff09\uff0c\u6bd4\u5982\u8bf4 dfs \u4e2d\u5bf9\u4e8e\u4e00\u6761\u8fb9\u7684\u5408\u5e76\u3001\u64a4\u9500\u4ee5\u53ca\u67e5\u8be2\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5206\u522b\u5199 3 \u4e2a\u51fd\u6570\u7ef4\u62a4\uff0c\u5b9e\u6d4b\u6bd4\u5168\u5806\u5728 dfs \u51fd\u6570\u4e2d\u5feb\u3002\n3. unsigned int \u6bd4 int \u5feb\u3002\n\nCodeBase\uff1a[CodeBase of Plozia](https://github.com/Plozia/CodeBase-of-Plozia/blob/main/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97/P5064%20%5BYnoi2014%5D%20%E7%AD%89%E8%BF%99%E5%9C%BA%E6%88%98%E4%BA%89%E7%BB%93%E6%9D%9F%E4%B9%8B%E5%90%8E.cpp)\n\nCode\uff1a\n\n```cpp\n/*\n========= Plozia =========\n\tAuthor:Plozia\n\tProblem:P5064 [Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e\n\tDate:2022/7/9\n========= Plozia =========\n*/\n\n#include <bits/stdc++.h>\ntypedef long long LL;\n\nconst int MAXN = 1e5 + 1;\nunsigned int n, m, Head[MAXN], cntEdge, Block = 4250;\nint ans[MAXN];\nunsigned int fa[MAXN], Size[MAXN];\nunsigned short f[MAXN][25];\nstruct node { unsigned int opt, x, y; } q[MAXN];\nstruct EDGE { unsigned int To, Next; } Edge[MAXN];\nstruct NODE\n{\n\tunsigned int a, id;\n\tbool operator <(const NODE &fir)const { return a < fir.a; }\n}a[MAXN];\n\nint Read()\n{\n\tint sum = 0, fh = 1; char ch = getchar();\n\tfor (; ch < '0' || ch > '9'; ch = getchar()) fh -= (ch == '-') << 1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar()) sum = (sum * 10) + (ch ^ 48);\n\treturn sum * fh;\n}\nvoid addEdge(int From, int To)\n{\n\t++cntEdge; Edge[cntEdge] = (EDGE){To, Head[From]}; Head[From] = cntEdge;\n}\nint gf(int x)\n{\n\twhile (fa[x] != x) x = fa[x];\n\treturn x;\n}\n\nvoid Merge(int &fx, int &fy)\n{\n\tif (Size[fx] > Size[fy]) fx ^= fy ^= fx ^= fy;\n\tfa[fx] = fy; Size[fy] += Size[fx];\n\tfor (int j = 1; j <= 24; ++j) f[fy][j] += f[fx][j];\n}\nvoid Split(int fx, int fy)\n{\n\tfa[fx] = fx; Size[fy] -= Size[fx];\n\tfor (int j = 1; j <= 24; ++j) f[fy][j] -= f[fx][j];\n}\n\nvoid Calc(int fx, int u)\n{\n\tint sum = 0, flag = 0;\n\tfor (int j = 1; j <= 24; ++j)\n\t{\n\t\tif (sum + f[fx][j] < q[u].y) sum += f[fx][j];\n\t\telse { flag = j; break ; }\n\t}\n\tfor (int j = (flag - 1) * Block + 1, pz = std::min(flag * Block, n); j <= pz; ++j)\n\t{\n\t\tif (gf(a[j].id) == fx) ++sum;\n\t\tif (sum == q[u].y) { ans[u] = a[j].a; break ; }\n\t}\n}\n\nvoid dfs(int now)\n{\n\tfor (int i = Head[now]; i; i = Edge[i].Next)\n\t{\n\t\tint u = Edge[i].To;\n\t\tif (q[u].opt == 1)\n\t\t{\n\t\t\tint fx = gf(q[u].x), fy = gf(q[u].y);\n\t\t\tif (fx != fy) Merge(fx, fy);\n\t\t\tdfs(u);\n\t\t\tif (fx != fy) Split(fx, fy);\n\t\t}\n\t\telse if (q[u].opt == 3)\n\t\t{\n\t\t\tint fx = gf(q[u].x);\n\t\t\tif (q[u].y > Size[fx]) { ans[u] = -1; dfs(u); continue ; }\n\t\t\tCalc(fx, u); dfs(u);\n\t\t}\n\t\telse dfs(u);\n\t}\n}\n\nint main()\n{\n\tn = Read(), m = Read(); for (int i = 1; i <= n; ++i) a[i].a = Read(), a[i].id = i;\n\tstd::sort(a + 1, a + n + 1);\n\tfor (int i = 1; i <= m; ++i) { q[i].opt = Read(), q[i].x = Read(); if (q[i].opt != 2) q[i].y = Read(); }\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tif (q[i].opt != 2) addEdge(i - 1, i);\n\t\telse addEdge(q[i].x, i);\n\t}\n\tfor (int i = 1; i <= n; ++i) fa[i] = i, Size[i] = 1, ++f[a[i].id][(i - 1) / Block + 1];\n\tdfs(0);\n\tfor (int i = 1; i <= m; ++i)\n\t\tif (q[i].opt == 3) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1657447016,
        "uid": 134000,
        "name": "Plozia",
        "ccfLevel": 7,
        "title": "P5064 [Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e \u9898\u89e3"
    },
    {
        "content": ">  \u5728\u592a\u9633\u897f\u659c\u7684\u8fd9\u4e2a\u4e16\u754c\u91cc\uff0c\u7f6e\u8eab\u5929\u4e0a\u4e4b\u68ee\u3002**\u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e**\uff0c\u4e0d\u5f52\u4e4b\u4eba\u4e0e\u671b\u773c\u6b32\u7a7f\u7684\u4f17\u4eba\uff0c \u4eba\u4eba\u672c\u7740\u6b63\u4e49\u4e4b\u540d\uff0c\u957f\u5b58\u4e0d\u706d\u7684\u8fc7\u53bb\u3001\u9010\u6e10\u6d88\u901d\u7684\u672a\u6765\u3002\u6211\u56de\u6765\u4e86\uff0c\u7eb5\u4f7f\u65e5\u8584\u897f\u5c71\uff0c\u5373\u4fbf\u770b\u4e0d\u5230\u672a\u6765\uff0c\u6b64\u65f6\u6b64\u523b\u7684\u5149\u8f89\uff0c**\u76fc\u541b\u52ff\u5fd8**\u3002\u2014\u2014\u2014\u2014\u4e16\u754c\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\n\n[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5064)\n\n\u9996\u5148\u4e0d\u8003\u8651\u7a7a\u95f4\u9650\u5236\u60f3\u4e00\u4e0b\u600e\u4e48\u505a\u3002\n\n\u5bf9\u4e8e kth\uff0c\u4e00\u822c\u4e24\u79cd\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u662f\u4e8c\u5206\uff0c\u663e\u7136\u8fd9\u91cc\u4e0d\u9002\u7528\uff0c\u7b2c\u4e8c\u79cd\u662f\u7ef4\u62a4\u4e00\u4e2a\u6876\uff0c\u518d\u7528\u5404\u79cd\u5947\u5947\u602a\u602a\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5b83\uff0c\u65e2\u7136\u662f Ynoi\uff0c\u6211\u4eec\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u7528\u5206\u5757\u7ef4\u62a4\u8fd9\u4e2a\u6876\u3002\n\n\u4e4b\u540e\u5c31\u662f\u8fde\u8fb9\u548c\u56de\u64a4\uff0c\u6211\u4eec\u8003\u8651\u5efa\u51fa\u64cd\u4f5c\u6811\uff0c\u5230\u65f6\u5019\u5728\u64cd\u4f5c\u6811\u4e0a dfs \u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u505a\u5230\u4e86\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u5148\u64a4\u56de\uff0c\u76f4\u63a5\u7528\u53ef\u64a4\u56de\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u56e0\u4e3a\u7528\u4e86\u5206\u5757\uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u590d\u6742\u5ea6\u5c31\u662f $\\mathcal{O}(\\frac{n}{B})$\uff0c$B$ \u662f\u5757\u957f\u3002\n\n\u6700\u540e\u6765\u5904\u7406\u7a7a\u95f4\u7684\u95ee\u9898\uff0c\u4e00\u5f00\u59cb\u6211\u4eec\u53ef\u4ee5\u8c03\u5757\u957f\uff0c\u5c06\u5757\u6570\u8c03\u4e3a $15$ \u5de6\u53f3\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a MLE \u4e86\uff0c\u4f46\u662f\u4f1a TLE\uff0c\u8fd9\u65f6\u5019\u5361\u7a7a\u95f4\u4eba\u5c31\u4f1a\u4f7f\u51fa\u8bf4\uff1a\u201c\u641e\u4e00\u641e\u628a\u6570\u7ec4\u5f00\u6210 short \u5c31\u597d\u4e86\u3002\u201d\u4f46\u662f\u6211\u4eec\u76ee\u524d\u6700\u9700\u8981\u4f18\u5316\u7684\u5c31\u662f\u7528\u4e86\u5206\u5757\u7684\u6876\uff0c\u6bcf\u4e00\u5757\u7684\u503c\u662f\u6709\u53ef\u80fd\u5230 $n$ \u7684\u3002\u6211\u4eec\u8003\u8651\u4e00\u79cd\u975e\u5e38\u89c4\u7684\u79bb\u6563\u5316\u65b9\u5f0f\uff0c\u5373\u4f7f\u503c\u76f8\u540c\u6211\u4eec\u4e5f\u6309\u4e0b\u6807\u6392\u5e8f\uff0c\u628a\u5b83\u4eec\u79bb\u6563\u5316\u6210\u4e0d\u540c\u7684\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e00\u5757\u7684\u603b\u548c\u662f\u5757\u957f\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6109\u5feb\u5730\u5f00 short\uff0c\u628a\u5757\u957f\u5f00\u6210 30 \u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<stdio.h>\n#include<ctype.h>\n#include<algorithm>\n#include<vector>\n#define N 100005\n#define fi first\n#define se second\nusing namespace std;\ninline int read(){\n\tint x=0,f=0; char ch=getchar();\n\twhile(!isdigit(ch)) f|=(ch==45),ch=getchar();\n\twhile(isdigit(ch)) x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n\treturn f?-x:x;\n}\nstruct edge{\n\tint b,n;\n}e[N];\nint n,m,a[N],X[N],Y[N],B,ans[N],fa[N],sze[N],h[N],tot;\ninline void charu(int a,int b){\n\te[++tot].b=b,e[tot].n=h[a],h[a]=tot;\n}\nshort f[N][30],op[N];\npair <int,int> b[N];\nstruct Stack{\n\tint x,y;\n}st[N];\nint top;\nint find(int x){\n\treturn fa[x]==x?x:find(fa[x]);\n}\ninline void merge(int x,int y){\n\tx=find(x),y=find(y);\n\tif(sze[x]>sze[y]) swap(x,y);\n\tst[++top]={x,y};\n\tif(x==y) return;\n\tsze[y]+=sze[x];\n\tfor(int i=0;i<=(n-1)/B;++i) f[y][i]+=f[x][i];\n\tfa[x]=y;\n}\ninline void restore(){\n\tStack v=st[top--];\n\tif(v.x==v.y) return;\n\tfa[v.x]=v.x;\n\tfor(int i=0;i<=(n-1)/B;++i) f[v.y][i]-=f[v.x][i];\n\tsze[v.y]-=sze[v.x];\n}\nvoid dfs(int u){\n\tif(op[u]==1) merge(X[u],Y[u]);\n\tif(op[u]==3){\n\t\tint x=find(X[u]);\n\t\tshort i;\n\t\tfor(i=0;i<=(n-1)/B;++i){\n\t\t\tif(Y[u]-f[x][i]<=0) break;\n\t\t\tY[u]-=f[x][i];\n\t\t}\n\t\tif(i>(n-1)/B) ans[u]=-1;\n\t\telse{\n\t\t\tfor(int j=i*B+1;j<=(i+1)*B && Y[u];++j){\n\t\t\t\tif(find(b[j].se)==x) Y[u]--;\n\t\t\t\tans[u]=b[a[b[j].se]].fi;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=h[u];i;i=e[i].n) dfs(e[i].b);\n\tif(op[u]==1) restore();\n}\nint main(){\n\tn=read(),m=read();B=3334;\n\tfor(int i=1;i<=n;++i) b[i].fi=read(),b[i].se=i;\n\tsort(b+1,b+n+1);\n\tfor(int i=1;i<=n;++i) a[b[i].se]=i;\n\tfor(int i=1;i<=n;++i) fa[i]=i,sze[i]=1,f[i][(a[i]-1)/B]=1;\n\tfor(int i=1;i<=m;++i){\n\t\top[i]=read();\n\t\tif(op[i]==1){\n\t\t\tX[i]=read(),Y[i]=read();\n\t\t\tcharu(i-1,i);\n\t\t}\n\t\tif(op[i]==2){\n\t\t\tX[i]=read();\n\t\t\tcharu(X[i],i);\n\t\t}\n\t\tif(op[i]==3){\n\t\t\tX[i]=read(),Y[i]=read();\n\t\t\tcharu(i-1,i);\n\t\t}\n\t}\n\tdfs(0);\n\tfor(int i=1;i<=m;++i) if(op[i]==3) printf(\"%d\\n\",ans[i]);\n\treturn (0^0);\n}\n\n```\n\n",
        "postTime": 1645449642,
        "uid": 238861,
        "name": "xzzduang",
        "ccfLevel": 0,
        "title": "[Ynoi2014] \u7b49\u8fd9\u573a\u6218\u4e89\u7ed3\u675f\u4e4b\u540e"
    }
]