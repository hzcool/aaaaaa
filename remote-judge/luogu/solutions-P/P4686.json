[
    {
        "content": "\u4e00\u4e2a\u7ed3\u8bba\uff1a\u201c\u4ece\u51fa\u53d1\u70b9\u5f00\u59cb\u8d70\u7edd\u5bf9\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\u201d\u3002  \n\u8003\u8651\u5982\u4f55\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff08\u8fd9\u4f1a\u76f4\u63a5\u63d0\u793a\u6b63\u89e3\uff09\uff1a  \n\u6211\u4eec\u5bf9\u6570\u8f74\u5206\u6bb5\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u628a\u5f53\u524d\u6bb5\u5206\u6210\u4e24\u6bb5\u3002  \n\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\uff08\u9664\u4e86\u7b2c\u4e00\u6bb5\uff09\u6211\u4eec\u603b\u4f1a\u6709\u4e00\u4e2a\u5230\u8fbe\u8fd9\u4e2a\u6bb5\u7684\u65b9\u6cd5\uff1a\u8d70\u4e00\u4e2a\u4f20\u9001\u95e8\u3002\u8fd9\u4e2a\u4f20\u9001\u95e8\u7684\u4f4d\u7f6e\u662f\u8fd9\u4e2a\u6bb5\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u6211\u4eec\u67e5\u770b\u8fd9\u4e2a\u4f20\u9001\u95e8\u901a\u5411\u54ea\u91cc\uff0c\u7136\u540e\u628a\u90a3\u4e2a\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002  \n\u5bf9\u4e8e\u6bcf\u4e00\u6bb5\uff08\u9664\u4e86\u6700\u540e\u4e00\u6bb5\uff09\u6211\u4eec\u603b\u4f1a\u6709\u4e00\u4e2a\u79bb\u5f00\u8fd9\u4e2a\u6bb5\u7684\u65b9\u6cd5\uff0c\u548c\u4e0a\u9762\u7c7b\u4f3c\u5efa\u56fe\u3002  \n\u6211\u4eec\u8003\u8651\uff0c\u6211\u4eec\u5728\u884c\u8d70\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u7b2c\u4e00\u4e2a\u6bb5\u6ca1\u6709\u5165\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u7edd\u5bf9\u4e0d\u4f1a\u56de\u5230\u7b2c\u4e00\u4e2a\u6bb5\u3002  \n\u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u6bb5\u6ca1\u6709\u51fa\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u7edd\u5bf9\u4e0d\u4f1a\u5411\u5176\u4ed6\u5730\u65b9\u5faa\u73af\u3002  \n\u7531\u4e8e\u9664\u4e86\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7279\u6b8a\u6bb5\uff0c\u5176\u4ed6\u4efb\u4f55\u6bb5\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5165\u5ea6\u548c\u51fa\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5b9a\u4f1a\u4ece\u4e00\u53f7\u6bb5\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u6bb5\u79bb\u5f00\u3002  \n\u8bc1\u6bd5\u3002  \n\u6211\u4eec\u53d1\u73b0\uff0c\u9664\u4e86\u4ece\u4e00\u53f7\u70b9\u5230\u6700\u540e\u4e00\u4e2a\u70b9\u662f\u4e00\u6761\u7b80\u5355\u8def\u5f84\uff0c\u5176\u4ed6\u7684\u70b9\u4e00\u5b9a\u5728\u4e00\u4e2a\u73af\u91cc\uff08\u53ef\u4ee5\u753b\u56fe\u7406\u89e3\uff09\u3002  \n\u8003\u8651\u6211\u4eec\u65b0\u52a0\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u5f20\u6709\u5411\u56fe\u5982\u4f55\u53d8\u5316\uff1f  \n\u6211\u4eec\u6709\u4e09\u79cd\u52a0\u7684\u65b9\u5f0f\uff1a  \n* \u4e00\uff1a\u7528\u4e00\u5bf9\u4f20\u9001\u95e8\u628a\u4e24\u4e2a\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u94fe\u63a5\u3002  \n\u8fd9\u4f1a\u76f4\u63a5\u5bfc\u81f4\u6709\u4e24\u4e2a\u70b9\u4e00\u5206\u4e3a\u4e8c\uff0c\u7136\u540e\u4ed6\u4eec\u6240\u5728\u7684\u8fde\u901a\u5757\u5408\u5e76\u3002  \n\u5982\u679c\u6211\u4eec\u5408\u5e76\u8def\u5f84\u548c\u73af\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u66f4\u957f\u7684\u8def\u5f84\u3002  \n\u5982\u679c\u6211\u4eec\u5408\u5e76\u73af\u548c\u73af\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u73af\u3002  \n* \u4e8c\uff1a\u7528\u4e00\u5bf9\u4f20\u9001\u95e8\u94fe\u63a5\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u4e24\u4e2a\u70b9\u3002  \n\u8fd9\u4f1a\u76f4\u63a5\u5bfc\u81f4\u8fd9\u4e2a\u8fde\u901a\u5757\u4e00\u5206\u4e3a\u4e8c\u3002\u8fd9\u5bf9\u7b54\u6848\u6ca1\u6709\u4efb\u4f55\u5e2e\u52a9\u3002  \n* \u4e09\uff1a\u8fd9\u5bf9\u4f20\u9001\u95e8\u653e\u5728\u67d0\u5bf9\u4f20\u9001\u95e8\u7684\u5185\u90e8\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6211\u4eec\u6c38\u8fdc\u65e0\u6cd5\u8bbf\u95ee\u5230\u8fd9\u4e2a\u4f20\u9001\u95e8\uff0c\u6240\u4ee5\u4ed6\u5355\u72ec\u6210\u4e00\u4e2a\u70b9\u3002  \n\n\u9898\u89e3\u663e\u800c\u6613\u89c1\uff0c\u6211\u4eec\u628a\u6240\u6709\u73af\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002  \n\u7136\u540e\u4ece\u5927\u5230\u5c0f\uff0c\u7528\u4f20\u9001\u95e8\u628a\u4ed6\u4eec\u7528\u65b9\u6cd5\u4e00\u8fde\u5230\u6211\u4eec\u7684\u8def\u5f84\u91cc\u3002 \n\u5982\u679c\u8fde\u5b8c\u4ee5\u540e\uff0c\u4f20\u9001\u95e8\u8fd8\u6709\u5269\u4f59\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u505a\u65b9\u6cd5\u4e09\u548c\u65b9\u6cd5\u4e00\uff0c\u628a\u4ed6\u4eec\u7d2f\u52a0\u5230\u7b54\u6848\u91cc\u3002  \n\u7ec6\u8282\uff1a\u5982\u679c\u53ea\u5269\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u6211\u4eec\u5c31\u628a\u4ed6\u52a0\u5728\u672b\u5c3e\u3002   \n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$  \n\u8fdb\u4e00\u6b65\u4f18\u5316\uff1a  \n\u6211\u4eec\u53d1\u73b0\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6392\u5e8f\uff0c\u4f46\u662f\u7531\u4e8e\u6392\u5e8f\u7684\u503c\u975e\u5e38\u5c0f\uff0c\u6211\u4eec\u4f7f\u7528\u6876\u6392\u5e8f\u3002  \n\u65f6\u95f4\u590d\u6742\u5ea6\u5230\u8fbe\u7406\u8bba\u4e0b\u5c4a\uff1a$O(n)$  \n\u4f46\u662f\u6211\u61d2\u5f97\u5199\u7ebf\u6027\u7684\uff0c\u4e0b\u9762\u7ed9\u51fa$O(nlogn)$\u7684\u4ee3\u7801\uff0c\u5438\u6c27\u80fd\u8fc7\u3002  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 2e6+10;\nstruct qwq {\n    int inc,out;\n}s[maxn];\nstruct QQQ {\n    int l,r;\n}L[maxn];\nstruct QAQ {\n    int v,bl,type;\n    const bool operator < (const QAQ& rhs) const {\n        return v<rhs.v;\n    }\n}v[maxn];\nint n,m,cnt,ind[maxn];\nint sz[maxn],ans,tot;\nbool vis[maxn];\nint find(int x) {\n    return lower_bound(v+1,v+1+cnt,(QAQ){x,0,0})-v;\n}\nvoid dfs(int cur,int pos) {\n    while(!vis[cur]) {\n        vis[cur]=1;\n        sz[pos]++;\n        int nxt;\n        if(v[cur].type) nxt = find(L[v[cur].bl].l+1);\n        else nxt=find(L[v[cur].bl].r+1);\n        cur = nxt;\n    }\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;++i) {\n        scanf(\"%d%d\",&L[i].l,&L[i].r);\n        v[++cnt].v=L[i].l;\n        v[cnt].bl=i;\n        v[cnt].type=0;\n        v[++cnt].v=L[i].r;\n        v[cnt].bl=i;\n        v[cnt].type=1;\n    }\n    sort(v+1,v+1+cnt);\n    int cur = 1;\n    while(cur!=cnt+1) {\n        vis[cur]=1;\n        ++ans;\n        int nxt;\n        if(v[cur].type) nxt = find(L[v[cur].bl].l+1);\n        else nxt=find(L[v[cur].bl].r+1);\n        cur = nxt;\n    }\n    vis[cur]=1;\n    for(int i=1;i<=cnt;++i) {\n        if(!vis[i]) {\n            dfs(i,++tot);\n        }\n    }\n#ifdef DEBUG\n    printf(\"%d\\n\",ans);\n    printf(\"%d\\n\",tot);\n    for(int i=1;i<=tot;++i) printf(\"%d \",sz[i]);\n#endif\n    sort(sz+1,sz+1+tot,greater<int>());\n    for(int i=1;i<=tot&&m;++i) {\n        ans+=2;\n        --m;\n        ans+=sz[i];\n    }\n    if(m) {\n        if(m&1) --m,++ans;\n        ans+= 2*m;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1561979025,
        "uid": 64618,
        "name": "\u6587\u6587\u6bbf\u4e0b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4686 \u3010[IOI2008] Teleporters \u4f20\u9001\u5668\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u4e00\u4e2a\u4f20\u9001\u5668\uff0c\u6211\u4eec\u628a\u5b83\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5de6\u70b9\u548c\u53f3\u70b9\uff08\u5de6\u4f20\u9001\u95e8\u7684\u53f3\u70b9\u548c\u53f3\u4f20\u9001\u95e8\u7684\u5de6\u70b9\u662f\u4e00\u4e2a\u70b9\uff0c\u540c\u7406\u5de6\u4f20\u9001\u95e8\u7684\u5de6\u70b9\u548c\u53f3\u4f20\u9001\u95e8\u7684\u53f3\u70b9\u662f\u4e00\u4e2a\u70b9\uff09\uff0c\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1ynosqeq.png)\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u628a\u6570\u8f74\u4e0a\u6240\u6709\u70b9\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff08\u6700\u5f00\u59cb\u548c\u6700\u540e\u90fd\u662f $0$\uff09\u5173\u7cfb\u6c42\u51fa\u6765\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u4e00\u4e2a\u300c\u7f6e\u6362\u300d\uff0c\u5373\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u4e2a\u524d\u9a71\u548c\u4e00\u4e2a\u540e\u7ee7\u7684\u56fe\uff0c\u5373\u7531\u82e5\u5e72\u4e2a\u73af\u7ec4\u6210\u7684\u56fe\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5206\u6570\u5373\u662f $0$ \u6240\u5728\u7684\u73af\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u4f20\u9001\u95e8\u5728\u540c\u4e00\u4e2a\u73af\u7684\u8def\u5f84\u4e0a\uff0c\u6b64\u73af\u5c31\u4f1a\u88c2\u5f00\uff1b\u82e5\u4e0d\u5728\uff0c\u6b64\u4e24\u4e2a\u73af\u5c31\u4f1a\u62fc\u63a5\u3002\u6240\u4ee5\uff0c\u5efa\u5b8c\u56fe\u540e\uff0c\u6211\u4eec\u5148\u6c42\u51fa\u6240\u6709\u73af\u7684\u957f\u5ea6\uff0c\u8d2a\u5fc3\u5730\u4ece\u5927\u5230\u5c0f\u628a\u73af\u5e76\u5230 $0$ \u6240\u5728\u7684\u73af\uff0c\u82e5\u8fd8\u6709\u4f20\u9001\u95e8\u6b21\u6570\uff0c\u5c31\u91cd\u590d\u6b64\u8fc7\u7a0b\uff1a\u4e00\u4e2a\u4f20\u9001\u95e8\u5148\u65b0\u5efa\u4e00\u4e2a\u73af\uff0c\u4e00\u4e2a\u4f20\u9001\u95e8\u518d\u628a\u8fd9\u4e2a\u65b0\u5efa\u7684\u73af\u5e76\u5165 $0$ \u6240\u5728\u7684\u73af\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing std::sort;\n\nconst int maxl = 2e6 + 3;\n\nint n, m;\nint l, r;\n\nint t[maxl];\nbool b[maxl];\nint nxt[maxl];\nint cnt = -1, num[maxl];\nbool vis[maxl];\nint ans = 0;\n\nvoid dfs(int x) {\n    int res = 1, cur = nxt[x];\n    vis[x] = true;\n    while (cur != x) {\n        res++;\n        vis[cur] = true;\n        cur = nxt[cur];\n    }\n    num[++cnt] = res;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d%d\", &l, &r);\n        t[l] = t[r] = i;\n        b[l] = true;\n    }\n    int pr = 0;\n    for (int i = 1; i < maxl; i++)\n        if (t[i]) {\n            if (b[i]) {\n                nxt[pr] = (t[i] << 1) - 1;\n                nxt[t[i] << 1] = 0;\n                pr = t[i] << 1;\n            } else {\n                nxt[pr] = t[i] << 1;\n                nxt[(t[i] << 1) - 1] = 0;\n                pr = (t[i] << 1) - 1;\n            }\n        }\n    dfs(0);\n    for (int i = 1; i <= (n << 1); i++)\n        if (!vis[i])\n            dfs(i);\n    sort(num + 1, num + cnt + 1, [](int x, int y) {return x > y;});\n    if (m <= cnt) {\n        ans = -3;\n        for (int i = 0; i <= m; i++)\n            ans += num[i] + 2;\n    }\n    else {\n        ans = (n + cnt) << 1;\n        m -= cnt;\n        ans += (m << 1) + (m & 1);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1681378061,
        "uid": 243533,
        "name": "Flash_Man",
        "ccfLevel": 6,
        "title": "P4686\u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u5bf9\u4e8e\u7b2c $i$ \u7ec4\u4f20\u9001\u5668\uff0c\u628a\u5de6\u8fb9\u90a3\u4e2a\u4f20\u9001\u5668\u7684\u5de6\u4fa7\u548c\u53f3\u8fb9\u90a3\u4e2a\u4f20\u9001\u5668\u7684\u53f3\u4fa7\u770b\u6210\u4e00\u4e2a\u70b9 $i+n$\uff0c\u628a\u5de6\u8fb9\u90a3\u4e2a\u4f20\u9001\u5668\u7684\u53f3\u4fa7\u548c\u53f3\u8fb9\u90a3\u4e2a\u4f20\u9001\u5668\u7684\u5de6\u4fa7\u770b\u6210\u4e00\u4e2a\u70b9 $i$\u3002\u53e6\u5916\uff0c\u6211\u4eec\u628a\u6700\u5de6\u4fa7\u4f20\u9001\u5668\u7684\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u4f20\u9001\u5668\u7684\u53f3\u4fa7\u4e5f\u770b\u6210\u4e00\u4e2a\u70b9 $0$\u3002\n\n\u6837\u4f8b 1 be like:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/tdquic55.png)\n\n\n\u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u8fd9 $2n+1$ \u4e2a\u70b9\uff0c\u53d1\u73b0\u6bcf\u4e2a\u70b9\u6070\u597d\u80fd\u5230\u8fbe\u4e00\u4e2a\u70b9\uff0c\u4f8b\u5982\u4e0a\u56fe\u4e2d $0 \\to 5, 2 \\to 6$ \u7b49\u3002\u56e0\u6b64\u6700\u7ec8\u5f97\u5230\u7684\u56fe\u662f\u82e5\u5e72\u4e2a\u73af\u3002\n\n\u6837\u4f8b 1 be like:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9gcimyvu.png)\n\n\u53d1\u73b0\u6700\u7ec8\u7b54\u6848\u4e3a\u4e0e $0$ \u8fde\u901a\u7684\u73af\u7684\u5927\u5c0f\u51cf $1$\u3002\uff08\u7531\u6b64\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u4e0d\u53ef\u80fd\u4e3a\u65e0\u7a77\u5927\uff09\n\n\u8003\u8651 $m$ \u6b21\u64cd\u4f5c\u5982\u4f55\u8fdb\u884c\uff0c\u624b\u73a9\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u4e00\u6b21\u64cd\u4f5c\u53ef\u80fd\u6709\u4ee5\u4e0b\u6548\u679c\uff1a\n\n- \u8fde\u63a5\u4e24\u4e2a\u73af\uff0c\u5f97\u5230\u7684\u65b0\u73af\u5927\u5c0f\u4e3a\u5b83\u4eec\u7684\u5927\u5c0f\u4e4b\u548c\u52a0\u4e0a $2$\u3002\n- \u5c06\u4e00\u4e2a\u73af\u7834\u5f00\uff0c\u5f97\u5230\u4e24\u4e2a\u65b0\u73af\uff0c\u5b83\u4eec\u7684\u5927\u5c0f\u4e4b\u548c\u4e3a\u539f\u73af\u5927\u5c0f\u52a0\u4e0a $2$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u8d2a\u5fc3\u7b56\u7565\uff1a\n\n\u6bcf\u6b21\u8d2a\u5fc3\u9009\u62e9\u6700\u5927\u7684\u73af\u548c\u4e0e $0$ \u76f8\u8fde\u7684\u73af\u5408\u5e76\uff0c\u5408\u5e76\u5b8c\u6210\u4e4b\u540e\u53cd\u590d\u4ece\u4e0e $0$ \u76f8\u8fde\u7684\u73af\u4e2d\u7834\u51fa\u5927\u5c0f\u4e3a $1$ \u7684\u73af\u7136\u540e\u628a\u8fd9\u4e2a\u73af\u5408\u5e76\u56de\u53bb\u3002\n\n\u5bb9\u6613\u5199\u51fa\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nint nxt[2000005];\nbool vis[2000005];\nstruct TP {\n    int pos, id;\n    bool tp;\n    bool operator<(const TP &o) const {\n        return pos < o.pos;\n    }\n} w[2000005];\nint cur, siz[2000005];\nvoid DFS(int u) {\n    if (vis[u]) return;\n    siz[cur]++;\n    vis[u] = true;\n    DFS(nxt[u]);\n}\nint ans;\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n        int l, r;\n        scanf(\"%d%d\", &l, &r);\n        w[i].pos = l;\n        w[i].id = i;\n        w[i].tp = 0;\n        w[i + n].pos = r;\n        w[i + n].id = i;\n        w[i + n].tp = 1;\n    }\n    sort(w + 1, w + n * 2 + 1);\n    nxt[0] = w[1].id + n;\n    for (int i = 1; i <= n * 2; i++) {\n        int id = w[i].id;\n        if (!w[i].tp) {\n            if (i) nxt[w[i - 1].id + n * w[i - 1].tp] = id + n;\n            nxt[id] = w[i + 1].id + n * !w[i + 1].tp;\n        }\n        else {\n            nxt[w[i - 1].id + n * w[i - 1].tp] = id;\n            if (i != n * 2) nxt[id + n] = w[i + 1].id + n * !w[i + 1].tp;\n        }\n    }\n    for (int i = 0; i <= n * 2; i++) {\n        if (!vis[i]) {\n            cur++;\n            DFS(i);\n        }\n    }\n    sort(siz + 2, siz + cur + 1, greater<int>());\n    ans = siz[1] - 1;\n    for (int i = 2; i <= cur; i++) {\n        if (!m) break;\n        m--;\n        ans += 2; ans += siz[i];\n    }\n    if (m & 1) {\n        ans++;\n        m--;\n    }\n    ans += m * 2;\n    printf(\"%d\\n\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1681377428,
        "uid": 363415,
        "name": "251Sec",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4686 [IOI2008] Teleporters"
    }
]