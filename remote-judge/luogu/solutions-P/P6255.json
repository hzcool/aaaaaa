[
    {
        "content": "\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u5206\u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\u3002\n\n### \u8fde\u901a\u5206\u91cf\u662f\u4e00\u68f5\u6811\n\n\u6b64\u65f6\u6309\u9898\u76ee\u8981\u6c42\uff0c\u4ece\u4efb\u4f55\u4e00\u4e2a\u70b9\u51fa\u53d1\u9009\u4efb\u4f55\u4e00\u6761\u8fb9\u90fd\u662f\u6b7b\u8def\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u53ea\u9700\u8981\u5728\u53f6\u8282\u70b9\u5904\u6807\u8bb0\u4ece\u53f6\u8282\u70b9\u51fa\u53d1\u7684\u8fb9\u5373\u53ef\uff08\u8fd9\u4e9b\u6807\u8bb0\u5df2\u7ecf\u53ef\u4ee5\u5b8c\u6574\u8986\u76d6\u6240\u6709\u6b7b\u8def\u4e86\uff09\u3002\n\n### \u8fde\u901a\u5206\u91cf\u4e0d\u662f\u4e00\u68f5\u6811\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u6761 $u \\to v$ \u8fb9\u6ee1\u8db3\u5176\u88ab\u5272\u65ad\u540e\u56fe\u5206\u4e3a\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u4e14 $v$ \u6240\u5728\u8fde\u901a\u5206\u91cf\u662f\u4e00\u68f5\u6811\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5728 $u$ \u5165\u53e3\u5904\u5b89\u88c5\u6807\u8bb0\u3002\n\n\u8fd9\u6837\u53ef\u80fd\u4f1a\u5b58\u5728\u91cd\u590d\u8986\u76d6\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\u9010\u6b65\u5220\u9664\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u5230\u65e0\u6cd5\u518d\u5220\u4e3a\u6b62\uff0c\u90a3\u4e48\u4ece\u6ca1\u88ab\u5220\u7684\u70b9 $u$ \u5230\u88ab\u5220\u7684\u70b9 $v$ \u4e4b\u95f4\u5c31\u662f\u6b7b\u8def\u3002\n\n\u8fd9\u4e2a\u6807\u8bb0\u5b8c\u6574\u8986\u76d6\u4e86 $v$ \u6240\u5904\u7684\u5b50\u6811\uff0c\u4ece\u800c\u907f\u514d\u4e86\u4e0d\u5fc5\u8981\u7684\u6807\u8bb0\u3002\n\n```cpp\n// Problem : P6255 [ICPC2019 WF]Dead-End Detector\n// Contest : Luogu Online Judge\n// URL : https://www.luogu.com.cn/problem/P6255\n// Author : StudyingFather\n// Site : https://studyingfather.com\n// Memory Limit : 1000 MB\n// Time Limit : 5000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <set>\nusing namespace std;\nint t[500005],vis[500005];\nvector<int> e[500005],l,p[500005];\nvector<pair<int,int> > res;\nqueue<int> q;\nset<int> s;\nvoid dfs(int u)\n{\n vis[u]=1;\n s.insert(u);\n if(t[u]==1)\n {\n  q.push(u);\n  l.push_back(u);\n }\n for(auto v:e[u])\n  if(!vis[v])\n   dfs(v);\n}\nint main()\n{\n ios::sync_with_stdio(false);\n int n,m;\n cin>>n>>m;\n for(int i=1;i<=m;i++)\n {\n  int u,v;\n  cin>>u>>v;\n  e[u].push_back(v);\n  e[v].push_back(u);\n  t[u]++,t[v]++;\n }\n for(int i=1;i<=n;i++)\n  if(!vis[i])\n  {\n   s.clear();\n   l.clear();\n   dfs(i);\n   while(!q.empty())\n   {\n    int u=q.front();\n    q.pop();\n    s.erase(u);\n    for(auto v:e[u])\n    {\n     t[v]--;\n     if(t[v]==1)q.push(v);\n    }\n   }\n   if(s.empty())\n    for(auto u:l)\n     res.push_back({u,e[u].front()});\n   else\n    for(auto u:s)\n     for(auto v:e[u])\n      if(!s.count(v))\n       res.push_back({u,v});\n  }\n sort(res.begin(),res.end());\n cout<<res.size()<<endl;\n for(auto p:res)\n  cout<<p.first<<' '<<p.second<<endl;\n return 0;\n}\n```",
        "postTime": 1585742302,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6255 \u3010[ICPC2019 WF]Dead-End Detector\u3011"
    },
    {
        "content": "# P6255 ICPC2019 WF Dead-End Detector\n\n\u60f3\u5f53\u5e74\u8fd9\u9053\u9898\u88ab\u9009\u4e3a\u6821\u5185 ACM \u8d5b\u524d\u8bad\u7ec3\uff0c\u7ed3\u679c\u662f\u5386\u57ce\u4e8c\u4e2d 57 \u7ea7\u5168\u706d\uff0c\u5168\u573a\u4e09\u4e2a\u961f\uff0c\u53ea\u6709\u6709\u4e00\u4e2a\u961f\u6709\u5206\uff0c\u5e76\u4e14\u53ea\u6709\u4e00\u9053\u9898\uff0c\u975e\u5e38\u60e8\u70c8\uff0c\u4eca\u5929\u91cd\u65b0\u5ba1\u89c6\u8fd9\u9053\u9898\uff0c\u53d1\u73b0\u5f53\u65f6\u6c34\u5e73\u786e\u5b9e\u592a\u4f4e\u3002\n\n## \u9898\u610f\n\n\u8fd9\u9898\u9898\u610f\u6bd4\u8f83\u7ed5\uff0c\u573a\u4e0a\u5bf9\u9898\u610f\u4e5f\u662f\u4e00\u77e5\u534a\u89e3\uff0c\u611f\u5230\u8ff7\u832b\u7684\u8bdd\u53ef\u4ee5\u597d\u597d\u7814\u7a76\u6837\u4f8b\u3002\n\n\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u7ed9\u6b7b\u8def\u7684\u8d77\u70b9\u6253\u6807\u8bb0\uff0c\u6b7b\u8def\u5b9a\u4e49\u4e3a\u4ece\u8d77\u70b9\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u540e\uff0c\u65e0\u6cd5\u4e0d\u6389\u5934\u8d70\u56de\u8d77\u70b9\u3002\u4e00\u6761\u6b7b\u8def\u5982\u679c\u88ab\u4e00\u6761\u6709\u6807\u8bb0\u7684\u6b7b\u8def\u4e0d\u6389\u5934\u5730\u5230\u8fbe\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6b7b\u8def\u7684\u6807\u8bb0\u4fbf\u4e0d\u5fc5\u6253\uff0c\u6c42\u6700\u5c11\u7684\u6807\u8bb0\u6570\u91cf\u548c\u6807\u8bb0\u4f4d\u7f6e\u3002\n\n## \u89e3\u6cd5\n\n\u9996\u5148\uff0c\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u8fb9\u4e00\u5b9a\u4e0d\u662f\u6b7b\u8def\uff0c\u6240\u4ee5\u5148\u7f29\u70b9\uff0c\u8003\u8651\u8fb9\u53cc\u6784\u6210\u7684\u6811\u7684\u6811\u8fb9\u5373\u53ef\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u6253 Tag \u548c\u5220 Tag \u4e24\u6b65\uff0c\u800c\u8fd9\u4e24\u4e2a\u9636\u6bb5\u662f\u4e92\u4e0d\u5e72\u6270\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u5148\u6253 Tag\uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u5220\u9664\u591a\u4f59\u7684 Tag \u5373\u53ef\u3002\n\n\u8bf4\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u56e0\u4e3a\u6b7b\u8def\u7684\u5b9a\u4e49\u662f\u786e\u5b9a\u7684\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u5220\u9664 Tag\uff0c\u4e00\u6761\u8def\u8be5\u662f\u6b7b\u8def\u4ecd\u7136\u662f\u6b7b\u8def\uff0c\u6240\u4ee5\u6253 Tag \u5220 Tag \u4e92\u4e0d\u5f71\u54cd\u3002\n\n## \u5220 Tag\n\n\u56e0\u4e3a\u5220 Tag \u9700\u8981\u7684\u662f\u6709\u6253 Tag \u7684\u8fb9\u80fd\u4e0d\u6389\u5934\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\u80fd\u7ecf\u8fc7\u4e00\u6761\u8fb9\u4e5f\u5c31\u662f\u80fd\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u8ba8\u8bba\u662f\u5426\u5b58\u5728\u6709\u8fd9\u79cd\u8fb9\u8fde\u5165\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u53ef\u80fd\u5c31\u4f1a\u4ea7\u751f\u95ee\u9898\uff0c\u5c31\u662f\u5220\u9664 Tag \u4e4b\u540e\uff0c\u539f\u672c\u8fde\u5165\u67d0\u4e2a\u70b9\u7684\u6709 Tag \u7684\u8fb9\u7684 Tag \u88ab\u5220\u9664\u540e\uff0c\u8fd9\u6761\u8fb9\u7684 Tag \u5c31\u4e0d\u80fd\u88ab\u5220\u9664\u4e86\u3002\u4f46\u662f\uff0c\u6211\u4eec\u77e5\u9053\u80fd\u5426\u5230\u8fbe\u662f\u53ef\u4ee5\u4f20\u9012\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4e00\u6761\u8fb9\u7684 Tag \u88ab\u5220\u9664\uff0c\u5b83\u5220\u9664\u7684 Tag \u7684\u6b63\u786e\u6027\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u6bcf\u6b21\u6253 Tag\uff0c\u5c06\u7ec8\u70b9\u8bb0\u5f55\u4e00\u4e2a Deleted \u6807\u8bb0\uff0c\u6700\u540e\u5c06\u6709\u6807\u8bb0\u7684\u6240\u6709\u70b9\u7684\u51fa\u8fb9\u7684 Tag \u90fd\u5220\u6389\u5373\u53ef\u3002\n\n\u4f46\u662f\u6709\u4e00\u79cd\u60c5\u51b5\u6bd4\u8f83\u7279\u6b8a\uff0c\u5c31\u662f\u4e00\u6761\u5165\u8fb9\u4e0d\u80fd\u5220\u9664\u81ea\u5df1\u7684\u56de\u8fb9\u7684\u6807\u8bb0\uff0c\u8fd9\u65f6\u56e0\u4e3a\u8d70\u4e86\u5165\u8fb9\u518d\u8d70\u56de\u8fb9\u5c31\u76f8\u5f53\u4e8e\u662f\u6389\u5934\u4e86\uff0c\u4f46\u662f\u5982\u679c\u6709\u591a\u4e2a\u5e26 Tag \u7684\u5165\u8fb9\uff0c\u5c31\u65e0\u9700\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u591a\u6761\u5165\u8fb9\u7684\u56de\u8fb9\u53ef\u4ee5\u76f8\u4e92\u88ab\u5220\u9664\u3002\u8fd9\u4e9b\u60c5\u51b5\u6bcf\u4e2a\u70b9\u8bb0\u5f55\u4e00\u4e2a\u552f\u4e00\u5e26 Tag \u5165\u8fb9\u7684\u5730\u5740\uff0c\u7279\u5224\u4e00\u4e0b\u5373\u53ef\u3002\n\n```cpp\nvoid Del(BCC* x) {\n  EdgeB* Sid(x->Fst);\n  while (Sid) { if (Sid != x->Dont) Sid->Deleted = 1; Sid = Sid->Nxt; }\n}\n```\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\u4e0d\u80fd\u6bcf\u6b21\u5165\u8fb9\u8fde\u8fdb\u6765\u5c31\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u5fc5\u987b\u79bb\u7ebf\u5904\u7406\uff0c\u56e0\u4e3a\u7f29\u70b9\u4e4b\u540e\u662f\u83ca\u82b1\u56fe\u7684\u6570\u636e\u53ef\u4ee5\u5361\u5230 $O(n^2)$\uff0c\u6253\u6807\u8bb0\uff0c\u6700\u540e\u7edf\u4e00\u5220\u9664\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u70b9\u53ea\u56de\u904d\u5386\u4e00\u6b21\u5b83\u7684\u8fde\u8fb9\u3002\n\n## \u6253 Tag\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4e00\u6761\u8def\u5f84\u53ea\u8981\u80fd\u901a\u5411\u4e00\u4e2a\u975e\u8282\u70b9\u7684\u53cc\u8fde\u901a\u5206\u91cf\uff0c\u5728\u8fd9\u4e2a\u53cc\u8fde\u901a\u5206\u91cf\u91cc\u7ed5\u4e00\u5708\uff0c\u5c31\u53ef\u4ee5\u4e0d\u6389\u5934\u5730\u4ece\u539f\u5730\u53cd\u5411\u51fa\u6765\u3002\u8fd9\u4e2a\u7ed3\u8bba\u662f\u63a5\u4e0b\u6765\u6253 Tag \u7684\u57fa\u7840\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u4e3a\u6839\uff0c\u7136\u540e\u5c06\u8fb9\u5206\u6210\u4e24\u7c7b\uff0c\u8fde\u5411\u7236\u4eb2\u548c\u8fde\u5411\u513f\u5b50\u3002\n\n\u5bf9\u4e8e\u8fde\u5411\u513f\u5b50\u7684\u8fb9\uff0c\u5982\u679c\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u6709\u975e\u8282\u70b9\u7684\u8fb9\u53cc\uff0c\u90a3\u4e48\u4e0d\u7528\u6253 Tag\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8bf4\u660e\u8fd9\u8d70\u6761\u8fb9\u540e\u6ca1\u6cd5\u4e0d\u6389\u5934\u56de\u5230\u8d77\u70b9\uff0c\u5219\u7ed9\u8fde\u5411\u513f\u5b50\u7684\u8fb9\u6253 Tag\u3002\n\n\u5982\u4e0b\u662f\u4ee3\u7801\uff1a\n\n```cpp\nvoid DFSFall(BCC* x) {\n  EdgeB* Sid(x->Fst);\n  x->SubTree = x->Turn;\n  while (Sid) {\n    if (Sid->To != x->Fa) {\n      DFSFall(Sid->To), x->SubTree |= Sid->To->SubTree;\n      if (!(Sid->To->SubTree)) {\n        Sid->Ava = 1;\n        if (Sid->To->Dont) Sid->To->Dont = EB + 0x3f3f3f3f;\n        else Sid->To->Dont = EB + ((Sid - EB) ^ 1);\n        Sid->To->Deleted = 1;\n      }\n    }\n    Sid = Sid->Nxt;\n  }\n}\n```\n\n\u7136\u540e\u662f\u513f\u5b50\u8fde\u7236\u4eb2\u7684\u8fb9\uff0c\u8fd9\u79cd\u8fb9\u9700\u8981\u8ba8\u8bba\u4e0d\u6253 Tag \u7684\u60c5\u51b5\u3002\n\n\u7b2c\u4e00\u79cd\u662f\u7ecf\u8fc7\u7236\u4eb2\u5f80\u4e0a\u8d70\uff0c\u80fd\u8d70\u5230\u81f3\u5c11\u4e00\u4e2a\u975e\u8282\u70b9\u8fb9\u53cc\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7236\u4eb2\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5 DFS \u8fc7\u7a0b\u4e2d\u7edf\u8ba1\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6ce8\u610f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u90fd\u662f\u5efa\u7acb\u5728\u524d\u9762\u6240\u8bf4\u7684\u60c5\u51b5\u4e0d\u5b58\u5728\u7684\u524d\u63d0\u4e0b\u7684\u3002\u8fd9\u65f6\u7236\u4eb2\u5b58\u5728\u513f\u5b50\uff0c\u5b83\u7684\u5b50\u6811\u4e2d\u81f3\u5c11\u4e00\u4e2a\u975e\u8282\u70b9\u8fb9\u53cc\u3002\n\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8fd8\u9700\u8981\u8ba8\u8bba\u5b50\u6811\u5b58\u5728\u975e\u8282\u70b9\u8fb9\u53cc\u7684\u513f\u5b50\u7684\u6570\u91cf\uff0c\u5f53\u7236\u4eb2\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u5b50\u6811\u4e2d\u5b58\u5728\u975e\u8282\u70b9\u8fb9\u53cc\uff0c\u5219\u9664\u4e86\u8fd9\u4e2a\u513f\u5b50\u4ee5\u5916\u90fd\u53ef\u4ee5\u4e0d\u6253 Tag\uff0c\u4f46\u662f\u9700\u8981\u5728\u7236\u4eb2\u8fde\u5411\u8fd9\u4e2a\u7279\u5b9a\u7684\u513f\u5b50\u7684\u8fb9\u4e0a\u6253 Tag\u3002\u5f53\u6709\u5927\u4e8e\u4e00\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u4e2d\u6709\u975e\u8282\u70b9\u8fb9\u53cc\uff0c\u5219\u6309\u7b2c\u4e00\u79cd\u60c5\u51b5\u5904\u7406\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u662f\u7a0b\u5e8f\u5b9e\u73b0\uff1a\n\n```cpp\nvoid DFSRise(BCC* x) {\n  BCC* Son(NULL);\n  EdgeB* Sid(x->Fst);\n  char More(0);\n  while (Sid) {\n    if ((Sid->To != x->Fa) && (Sid->To->SubTree)) More = (Son ? 1 : 0), Son = Sid->To;\n    Sid = Sid->Nxt;\n  }\n  Sid = x->Fst;\n  if (More || (x->Turn)) {\n    while (Sid) {\n      if (Sid->To != x->Fa) Sid->To->Turn = 1, DFSRise(Sid->To);\n      Sid = Sid->Nxt;\n    }\n    return;\n  }\n  if (!Son) {\n    while (Sid) {\n      if (Sid->To != x->Fa) {\n        DFSRise(Sid->To), EB[((Sid - EB) ^ 1)].Ava = 1, x->Deleted = 1;\n        if (x->Dont) x->Dont = EB + 0x3f3f3f3f; else x->Dont = Sid;\n      }\n      Sid = Sid->Nxt;\n    }\n    return;\n  }\n  while (Sid) {\n    if (Sid->To != x->Fa) {\n      if (Sid->To == Son) {\n        DFSRise(Sid->To), EB[((Sid - EB) ^ 1)].Ava = 1, x->Deleted = 1;\n        if (x->Dont) x->Dont = EB + 0x3f3f3f3f; else x->Dont = Sid;\n      }\n      else Sid->To->Turn = 1, DFSRise(Sid->To);\n    }\n    Sid = Sid->Nxt;\n  }\n}\n```\n\n## \u4ee3\u7801\n\n\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u5c31\u662f\u4eba\u5c3d\u7686\u77e5\u7684 Tarjan \u4e86\uff0c\u76f4\u63a5\u7f29\u70b9\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u7ed9\u51fa\u4ee3\u7801\u7701\u7565\u7f3a\u7701\u6e90\u7684\u5176\u4f59\u90e8\u5206\uff1a\n\n```cpp\nunsigned m, n, M;\nunsigned A, C, D, t;\nunsigned Cnt(0), Top(0), CntRoot(0), CntPrt(0);\nstruct Node;\nstruct BCC;\nstruct Edge {\n  Node* To;\n  Edge* Nxt;\n}E[1000005];\nstruct EdgeIO {\n  unsigned Frm, To;\n  const inline char operator <(const EdgeIO& x) const { return (this->Frm ^ x.Frm) ? (this->Frm < x.Frm) : (this->To < x.To); }\n}IO[1000005];\nstruct EdgeB {\n  BCC* To;\n  EdgeB* Nxt;\n  EdgeIO UsedTo;\n  char Ava, Deleted;\n}EB[1000005];\nstruct BCC {\n  BCC* Fa;\n  EdgeB* Fst, * Dont;\n  char Turn, SubTree, Deleted;\n}B[500005], * Root[500005], * CntB(B);\nstruct Node {\n  Edge* Fst;\n  BCC* Bel;\n  unsigned DFSr, Low;\n}N[500005], * Stack[500005];\nvoid Link(Node* x) {\n  Edge* Sid(x->Fst);\n  while (Sid) {\n    if (Sid->To->Bel) {\n      if (Sid->To->Bel < x->Bel) {\n        EB[Cnt].UsedTo.Frm = x - N, EB[Cnt].UsedTo.To = Sid->To - N;\n        EB[Cnt].Nxt = x->Bel->Fst, x->Bel->Fst = EB + Cnt, EB[Cnt++].To = Sid->To->Bel;\n        EB[Cnt].UsedTo.Frm = Sid->To - N, EB[Cnt].UsedTo.To = x - N;\n        EB[Cnt].Nxt = Sid->To->Bel->Fst, Sid->To->Bel->Fst = EB + Cnt, EB[Cnt++].To = x->Bel;\n        Sid->To->Bel->Fa = x->Bel;\n      }\n    }\n    Sid = Sid->Nxt;\n  }\n}\nvoid Shrink(Node* x, Edge* No) {\n  x->Low = x->DFSr = ++Cnt, Stack[++Top] = x;\n  Edge* Sid(x->Fst);\n  while (Sid) {\n    if (Sid != No) {\n      if (!(Sid->To->DFSr)) Shrink(Sid->To, E + ((Sid - E) ^ 1)), x->Low = min(x->Low, Sid->To->Low);\n      else x->Low = min(x->Low, Sid->To->Low);\n    }\n    Sid = Sid->Nxt;\n  }\n  if (x->DFSr == x->Low) {\n    ++CntB, CntB->Turn = (Stack[Top] != x);\n    do { Stack[Top]->Bel = CntB; } while (Stack[Top--] != x);\n  }\n}\nsigned main() {\n  n = RD(), m = RD(), M = (m << 1);\n  for (unsigned i(0); i < m; ++i) IO[i].Frm = RD(), IO[i].To = RD();\n  sort(IO, IO + m);\n  for (unsigned i(0); i < M; i += 2) {\n    C = IO[i >> 1].Frm, D = IO[i >> 1].To;\n    E[i].Nxt = N[C].Fst, N[C].Fst = E + i, E[i].To = N + D;\n    E[i ^ 1].Nxt = N[D].Fst, N[D].Fst = E + (i ^ 1), E[i ^ 1].To = N + C;\n  }\n  for (unsigned i(1); i <= n; ++i) if (!(N[i].DFSr)) Shrink(N + i, NULL), Root[++CntRoot] = CntB;\n  Cnt = 0;\n  for (unsigned i(1); i <= n; ++i) Link(N + i);\n  for (unsigned i(1); i <= CntRoot; ++i) DFSFall(Root[i]), DFSRise(Root[i]);\n  for (BCC* i(B + 1); i <= CntB; ++i) if (i->Deleted) Del(i);\n  for (unsigned i(0); i < Cnt; ++i) if (EB[i].Ava && (!EB[i].Deleted)) IO[++CntPrt] = EB[i].UsedTo;\n  sort(IO + 1, IO + CntPrt + 1);\n  printf(\"%u\\n\", CntPrt);\n  for (unsigned i(1); i <= CntPrt; ++i) printf(\"%u %u\\n\", IO[i].Frm, IO[i].To);\n  system(\"pause\");\n  return Wild_Donkey;\n}\n```\n",
        "postTime": 1631768125,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "P6255 ICPC2019 WF Dead-End Detector"
    },
    {
        "content": "\u8003\u8651\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002\n\n1. \u8fde\u901a\u5757\u662f\u4e00\u68f5\u6811\n\n\u5728\u6bcf\u4e2a\u5ea6\u4e3a 1 \u7684\u8282\u70b9\u5904\u88c5\u4e0a\u5373\u53ef\u3002\n\n2. \u8fde\u901a\u5757\u4e0d\u662f\u4e00\u68f5\u6811\n\n\u90a3\u4e48 $s\\to t$ \u662f non-rebundant dead-end \u5f53\u4e14\u4ec5\u5f53\u5272\u6389\u8fd9\u6761\u8fb9\u540e $t$ \u6240\u5728\u7684\u8fde\u901a\u5206\u91cf\u662f\u6811\u4e14 $s$ \u662f\u73af\u4e0a\u70b9\uff08\u5426\u5219\u662f rebundant\uff09\u3002\n\n\u6211\u4eec\u627e\u5230\u6240\u6709\u73af\u4e0a\u70b9\uff08\u7528\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\uff09\u5373\u53ef\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u5c31\u662f\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u5220\u9664\u7684\u6761\u4ef6\u4ece\u6709\u5411\u56fe\u7684\u5ea6\u4e3a $0$ \u6539\u6210\u5ea6\u4e3a $1$\uff0c\u7136\u540e\u505a\u4e00\u8fb9\u8fd9\u6837\u7684\u62d3\u6251\u6392\u5e8f\u5373\u53ef\u3002\u7136\u540e\u5982\u679c\u4e00\u6761\u8fb9 $(s,t)$ \u6ee1\u8db3 $s$ \u6ca1\u6709\u88ab\u5220\u9664\u4e14 $t$ \u88ab\u5220\u9664\u4e86\u90a3\u4e48 $s\\to t$ \u5c31\u662f\u4e00\u4e2a non-rebundant dead-end\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(register int i=(a);i<=(b);i++)\n#define per(i,a,b) for(register int i=(a);i>=(b);i--)\nusing namespace std;\nconst int N=5e5+9;\ntypedef pair<int,int> pii;\n\ninline long long read() {\n    register long long x=0, f=1; register char c=getchar();\n    while(c<'0'||c>'9') {if(c=='-') f=-1; c=getchar();}\n    while(c>='0'&&c<='9') {x=(x<<3)+(x<<1)+c-48,c=getchar();}\n    return x*f;\n}\n\nint n,m,su[N],sv[N],id[N],sz[N],tot[N],deg[N];\nvector<int>e[N],c[N];\nvector<pii>ans;\n\nint find(int i) {return id[i]==i?i:id[i]=find(id[i]);}\nvoid add(int u,int v) {\n\te[u].push_back(v), e[v].push_back(u);\n\tid[find(u)]=find(v);\n\tdeg[u]++, deg[v]++;\n}\n\nvoid topo(int u) {\n\tqueue<int>q;\n\tfor(auto v:c[u]) if(deg[v]==1) q.push(v);\n\twhile(!q.empty()) {\n\t\tint u=q.front(); q.pop();\n\t\tfor(auto v:e[u]) {\n\t\t\tdeg[v]--;\n\t\t\tif(deg[v]==1) q.push(v);\n\t\t}\n\t}\n}\n\nint main() {\n\tn=read(), m=read();\n\trep(i,1,n) id[i]=i;\n\trep(i,1,m) add(su[i]=read(),sv[i]=read());\n\trep(i,1,n) sz[find(i)]++, c[id[i]].push_back(i);\n\trep(i,1,m) tot[id[su[i]]]++;\n\trep(i,1,n) if(id[i]==i) {\n\t\tif(tot[i]==sz[i]-1) {\n\t\t\tfor(auto u:c[i]) if(deg[u]==1) ans.push_back(pii(u,e[u][0]));\n\t\t} else {\n\t\t\ttopo(i);\n\t\t\tfor(auto u:c[i]) if(deg[u])\n\t\t\t\tfor(auto v:e[u]) if(deg[v]==1) ans.push_back(pii(u,v));\n\t\t}\n\t}\n\tsort(ans.begin(),ans.end());\n\tprintf(\"%d\\n\",ans.size());\n\tfor(auto x:ans) printf(\"%d %d\\n\",x.first,x.second);\n\treturn 0;\n}\n```",
        "postTime": 1616248937,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "P6255 [ICPC2019 WF]Dead-End Detector"
    },
    {
        "content": "$\\text{Problem}:$[\u9898\u76ee\u94fe\u63a5](https://codeforces.com/gym/102511/problem/E)\n\n$\\text{Solution}:$\n\n\u8003\u8651\u4ece $u$ \u51fa\u53d1\u80fd\u56de\u5230 $u$\uff0c\u8bf4\u660e $u$ \u70b9\u4e00\u5b9a\u5728\u73af\u4e0a\u3002\u5982\u679c $u\\rightarrow v$ \u540e\u5fc5\u987b\u6389\u5934\u624d\u80fd\u56de\u5230 $u$\uff0c\u5219\u8bf4\u660e\u5c06 $u\\rightarrow v$ \u8fd9\u6761\u65e0\u5411\u8fb9\u65ad\u6389\uff0c$v$ \u6240\u5728\u7684\u8fde\u901a\u5757\u662f\u65e0\u73af\u7684\u3002\u65e0\u5411\u56fe\u8fde\u901a\u5757\u65e0\u73af\uff0c$v$ \u6240\u5728\u7684\u8fde\u901a\u5757\u662f\u4e00\u4e2a\u6811\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u5c06\u539f\u56fe\u6240\u6709\u5728\u73af\u4e0a\u7684\u70b9\u4fdd\u7559\u4e0b\u6765\uff0c\u5c06\u73af\u4e0a\u70b9\u548c\u76f8\u90bb\u7684\u975e\u73af\u4e0a\u70b9\u4e4b\u95f4\u6807\u8bb0\u8def\u6807\u5373\u53ef\u3002\u5177\u4f53\u7684\uff0c\u4ece\u6240\u6709 $deg_{x}=1$ \u7684\u70b9\u51fa\u53d1\uff0c\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\u7684\u65b9\u6cd5\u8fdb\u884c $BFS$\u3002\n\n\u5bf9\u4e8e\u8fde\u901a\u5757\u662f\u4e00\u4e2a\u6811\u7684\u60c5\u51b5\uff0c\u663e\u7136\u7684\uff0c\u5728\u6240\u6709\u5ea6\u4e3a $1$ \u7684\u8282\u70b9\u7684\u5904\u6807\u8bb0\u8def\u6807\u5c31\u53ef\u4ee5\u5305\u542b\u6240\u6709\u60c5\u51b5\uff0c\u7279\u6b8a\u5904\u7406\u5373\u53ef\u3002\n\n$\\text{Code}:$\n\n```cpp\n#include <bits/stdc++.h>\n#pragma GCC optimize(3)\n#define int long long\n#define ri register\n#define mk make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define eb emplace_back\n#define is insert\n#define es erase\nusing namespace std; const int N=500010;\ninline int read()\n{\n\tint s=0, w=1; ri char ch=getchar();\n\twhile(ch<'0'||ch>'9') { if(ch=='-') w=-1; ch=getchar(); }\n\twhile(ch>='0'&&ch<='9') s=(s<<3)+(s<<1)+(ch^48), ch=getchar();\n\treturn s*w;\n}\nint n,m,book[N],vis[N],deg[N],d[N];\nint head[N],maxE; struct Edge { int nxt,to; }e[N<<1];\ninline void Add(int u,int v) { e[++maxE].nxt=head[u]; head[u]=maxE; e[maxE].to=v; }\nvector<int> g;\nvector<pair<int,int> > ans;\nvoid DFS(int x)\n{\n\tbook[x]=1, g.eb(x);\n\tfor(ri int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].to;\n\t\tdeg[x]++;\n\t\tif(book[v]) continue;\n\t\tDFS(v);\n\t}\n}\ninline void BFS()\n{\n\tif((int)g.size()<=1) return;\n\tqueue<int> Q;\n\tfor(auto i:g)\n\t{\n\t\td[i]=deg[i];\n\t\tif(deg[i]==1) Q.push(i);\n\t}\n\tint cnt=0;\n\twhile(!Q.empty())\n\t{\n\t\tint x=Q.front(); Q.pop();\n\t\tfor(ri int i=head[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tdeg[v]--, deg[x]--;\n\t\t\tif(deg[v]==1) Q.push(v);\n\t\t}\n\t\tif(!deg[x]) vis[x]=1, cnt++;\n\t}\n\tif(cnt==(int)g.size())\n\t{\n\t\tfor(auto i:g) if(d[i]==1)\n\t\t{\n\t\t\tfor(ri int j=head[i];j;j=e[j].nxt)\n\t\t\t{\n\t\t\t\tint v=e[j].to;\n\t\t\t\tans.eb(mk(i,v));\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tfor(auto i:g)\n\t{\n\t\tif(vis[i]) continue;\n\t\tfor(ri int j=head[i];j;j=e[j].nxt)\n\t\t{\n\t\t\tint v=e[j].to;\n\t\t\tif(vis[v]) ans.eb(mk(i,v));\n\t\t}\n\t}\n}\nsigned main()\n{\n\tn=read(), m=read();\n\tfor(ri int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tu=read(), v=read();\n\t\tAdd(u,v), Add(v,u);\n\t}\n\tfor(ri int i=1;i<=n;i++)\n\t{\n\t\tif(book[i]) continue;\n\t\tg.clear();\n\t\tDFS(i), BFS();\n\t}\n\tprintf(\"%lld\\n\",(int)ans.size());\n\tsort(ans.begin(),ans.end());\n\tfor(auto i:ans) printf(\"%lld %lld\\n\",i.fi,i.se);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1615721948,
        "uid": 98618,
        "name": "Provicy",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6255"
    }
]