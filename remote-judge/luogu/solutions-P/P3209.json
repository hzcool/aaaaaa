[
    {
        "content": "\u9996\u5148\uff0c\u5e73\u9762\u56fe\u7684\u6027\u8d28\uff1a\u8fb9\u6570\u5c0f\u4e8e\u7b49\u4e8e$3n-6$\u3002\u4e0d\u7b26\u5408\u7684\u76f4\u63a5\u8df3\u8fc7\u3002\n\n\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u54c8\u5bc6\u5c14\u987f\u73af\u4e4b\u5916\u7684\u4efb\u610f\u4e00\u6761\u8fb9\uff0c\u8981\u4e48\u8fde\u5728\u73af\u5185\u90e8\uff0c\u8981\u4e48\u8fde\u5728\u73af\u5916\u90e8\u3002\u5728\u4e00\u5b9a\u7684\u6761\u4ef6\u4e0b\uff08\u53ef\u4ee5\u7b80\u5355\u5224\u65ad\uff09\uff0c\u5982\u679c\u4e24\u6761\u8fb9**\u540c\u65f6**\u8fde\u5728\u73af\u5185\u90e8\u6216**\u540c\u65f6**\u8fde\u5728\u73af\u5916\u90e8\uff0c\u8fd9\u4e24\u6761\u8fb9\u5c31\u4e00\u5b9a\u4f1a\u76f8\u4ea4\uff0c\u8fd9\u6837\u7684\u9650\u5236\u6761\u4ef6\u7b26\u54082-SAT\u7684\u6a21\u578b\u3002\n\n\u628a\u7b2c$i$\u6761\u8fb9\u62c6\u6210$i$\u548c$i'$\uff0c$i$\u8868\u793a\u8fd9\u6761\u8fb9\u8fde\u5728\u5185\u90e8\uff0c$i'$\u8868\u793a\u8fde\u5728\u5916\u90e8\u3002\n\n\u5bf9\u4e8e\u4efb\u610f\u4e24\u6761\u4e0d\u5728\u54c8\u5bc6\u5c14\u987f\u73af\u4e0a\u7684\u8fb9$i,j,i\\neq j$\uff0c\u5982\u679c\u4ed6\u4eec\u4e0d\u80fd\u540c\u65f6\u8fde\u5728\u73af\u5185\u6216\u73af\u5916\uff0c\u5219\uff1a\n\n1\u3001\u5efa\u8fb9$<i,j'>$\uff0c\u8868\u793a$i$\u5728\u5185\u5219$j$\u5fc5\u987b\u5728\u5916\u3002\n\n2\u3001\u5efa\u8fb9$<i',j>$\uff0c\u8868\u793a$i$\u5728\u5916\u5219$j$\u5fc5\u987b\u5728\u5185\u3002\n\n3\u3001\u5efa\u8fb9$<j,i'>$\uff0c\u8868\u793a$j$\u5728\u5185\u5219$i$\u5fc5\u987b\u5728\u5916\u3002\n\n4\u3001\u5efa\u8fb9$<j',i>$\uff0c\u8868\u793a$j$\u5728\u5916\u5219$i$\u5fc5\u987b\u5728\u5185\u3002\n\n\u7136\u540e\u6c42\u4e00\u904d\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a$i$\u548c$i'$\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\uff0c\u90a3\u4e48\u539f\u56fe\u4e0d\u662f\u5e73\u9762\u56fe\uff0c\u5426\u5219\u662f\u5e73\u9762\u56fe\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\nconst int V = 205, N = 3e4 + 5, M = 2e6 + 5;\nint n, m, eX[N], eY[N], Cir[V], ecnt, nxt[M], adj[N], go[M], dfn[N], low[N],\ntop, times, stk[N], bel[N], sum, rev[V], Ex[N], Ey[N];\nbool cir[V][V], ins[N];\nvoid add_edge(int u, int v) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v;\n}\nvoid Tarjan(int u) {\n    dfn[u] = low[u] = ++times;\n    stk[++top] = u; ins[u] = 1;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if (!dfn[v = go[e]]) {\n            Tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (ins[v]) low[u] = min(low[u], dfn[v]);\n    if (dfn[u] == low[u]) {\n        int v; bel[u] = ++sum; ins[u] = 0;\n        while (v = stk[top--], v != u) bel[v] = sum, ins[v] = 0;\n    }\n}\nbool check() {\n    int i; for (i = 1; i <= (m << 1); i++)\n        if (!dfn[i]) Tarjan(i);\n    for (i = 1; i <= m; i++)\n        if (bel[i] == bel[i + m]) return 0;\n    return 1;\n}\nvoid work() {\n    ecnt = times = sum = 0; memset(adj, 0, sizeof(adj));\n    memset(dfn, 0, sizeof(dfn)); memset(bel, 0, sizeof(bel));\n    memset(low, 0, sizeof(low)); memset(cir, 0, sizeof(cir));\n    int i, j, u, v, x, y, tot = 0; n = read(); m = read();\n    for (i = 1; i <= m; i++) {\n        eX[i] = read(); eY[i] = read();\n        if (eX[i] > eY[i]) swap(eX[i], eY[i]);\n    }\n    for (i = 1; i <= n; i++) {\n        rev[Cir[i] = read()] = i;\n        if (i > 1) {\n            x = Cir[i - 1]; y = Cir[i];\n            if (x < y) cir[x][y] = 1;\n            else cir[y][x] = 1;\n        }\n    }\n    if (m > 3 * n - 6) return (void) (printf(\"NO\\n\"));\n    x = Cir[n]; y = Cir[1]; ((x < y) ? cir[x][y] : cir[y][x]) = 1;\n    for (i = 1; i <= m; i++) {\n        if (cir[eX[i]][eY[i]]) continue;\n        Ex[++tot] = eX[i]; Ey[tot] = eY[i];\n    }\n    m = tot; for (i = 1; i < m; i++) for (j = i + 1; j <= m; j++) {\n        u = rev[Ex[i]], v = rev[Ey[i]], x = rev[Ex[j]], y = rev[Ey[j]];\n        if (u > v) swap(u, v); if (x > y) swap(x, y);\n        if ((u < x && v > x && v < y) || (u > x && u < y && v > y)) {\n            add_edge(i, j + m); add_edge(i + m, j);\n            add_edge(j, i + m); add_edge(j + m, i);\n        }\n    }\n    printf(check() ? \"YES\\n\" : \"NO\\n\");\n}\nint main() {\n    int T = read();\n    while (T--) work();\n    return 0;\n}\n```",
        "postTime": 1511875433,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]PLANAR\u3011"
    },
    {
        "content": "\u5176\u5b9e\u4e0d\u75282-sat\u7684\uff0c\u76f4\u63a5\u5e76\u67e5\u96c6\u3002\n\n\u5148\u7528\u5e73\u9762\u56fe\u5b9a\u7406 m<=3\\*n+6 \u628a\u8fb9\u6570\u51cf\u5c0f\u5230O(n)\u7ea7\u522b\u3002\n\n\u7136\u540e\u8bbe \u96c6\u5408 i+m \u8868\u793a \u4e0d\u80fd\u4e0ei\u5171\u5b58\u7684\u8fb9 \u6240\u5728\u7684\u96c6\u5408\u3002\n\n\u679a\u4e3e\u6bcf\u4e00\u5bf9\u4e0d\u80fd\u5171\u5b58\u7684\u8fb9\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\uff0c\u5219\u65e0\u89e3\u3002\n\n\u5426\u5219\u4ea4\u53c9\u8fde\u8fb9 fa[find(i)]=j+m , fa[find(j)]=i+m \u3002\n\n\u5982\u4f55\u5224\u65ad\u4e24\u6761\u8fb9\u662f\u5426\u76f8\u4ea4\uff1f\u5148\u628a\u6240\u6709\u8fb9\u5750\u6807\u8f6c\u6362\u4e3a\u54c8\u5bc6\u987f\u56de\u8def\u4e2d\u7684\u987a\u5e8f\u5750\u6807\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u6761\u8fb9i,j\uff0c\u5982\u679c\u6709xi<xj<yi<yj\uff0c\u5219\u76f8\u4ea4\u3002\n\n\u6ce8\u610f\u5982\u679c\u4e24\u6761\u8fb9\u4efb\u610f\u4e0d\u5728\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u4e24\u7aef\u70b9\u76f8\u540c\u5219\u4e0d\u53ef\u80fd\u76f8\u4ea4\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=2e3+1e1;\n\nint x[maxn<<4],y[maxn<<4],vis[maxn<<4];\nint id[maxn];\nint fa[maxn<<5];\nint T,n,m;\n\ninline int findfa(int x)\n{\n    return fa[x] == x ? x : fa[x] = findfa(fa[x]);\n}\n\ninline void initfa()\n{\n    for(int i=1;i<=m<<1;i++)\n        fa[i] = i;\n}\n\ninline bool cross(int x1,int x2,int y1,int y2)\n{\n    if( x1 == x2 || y1 == y2 || x1 == y2 || x2 == y1 )\n        return 0;\n    if( x1 < x2 && y1 < y2 && x2 < y1 )\n        return 1;\n    if( x2 < x1 && y2 < y1 && x1 < y2 )\n        return 1;\n    return 0;\n}\n\n\ninline bool check()\n{\n    initfa();\n    for(int i=1;i<=m;i++)\n    {\n        if( vis[i] )\n            continue;\n        for(int j=1;j<=m;j++)\n        {\n            if( vis[j] )\n                continue;\n            if( !cross(x[i],x[j],y[i],y[j]) )\n                continue;\n            int fai = findfa(i) , faj = findfa(j);\n            if( fai == faj )\n                return 0;\n            fa[fai] = findfa( j + m ),\n            fa[faj] = findfa( i + m );\n        }\n    }\n    return 1;\n}\n\ninline void init()\n{\n    memset(x,0,sizeof(x));\n    memset(y,0,sizeof(y));\n    memset(vis,0,sizeof(vis));\n    n = m = 0;\n}\n\ninline int getint()\n{\n    int ret = 0;\n    char ch = getchar();\n    while( ch < '0' || ch > '9' )\n        ch = getchar();\n    while( '0' <= ch && ch <= '9' )\n        ret = ret * 10 + ( ch - '0' ),\n        ch = getchar();\n    return ret;\n}\nint main()\n{\n    T = getint();\n    \n    while( T-- )\n    {\n        init();\n        n = getint() , m = getint();\n        for(int i=1;i<=m;i++)\n            x[i] = getint() , y[i] = getint();\n        for(int i=1;i<=n;i++)\n            id[getint()] = i;\n        if( m > 3 * n + 6 )\n        {\n            puts(\"NO\");\n            continue;\n        }\n        for(int i=1,a,b;i<=m;i++)\n        {\n            a = id[x[i]] , b = id[y[i]];\n            x[i] = min( a , b ),\n            y[i] = max( a , b );\n        }\n        for(int i=1;i<=m;i++)\n            if( y[i] == x[i] + 1 || ( y[i]==n && x[i]==0) )\n                vis[i] = 1;\n        if( check() )\n            puts(\"YES\");\n        else puts(\"NO\");\n    }\n    return 0;\n}\n```",
        "postTime": 1509539587,
        "uid": 31907,
        "name": "cmd2001",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]PLANAR\u3011"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u79cd\u65b0\u601d\u8def\n\n\u5982\u679c\u5355\u72ec\u7684\u5e73\u9762\u56fe\u5224\u5b9a\u80af\u5b9a\u662f\u5f88\u9ebb\u70e6\u7684\uff0c\u4f46\u9898\u76ee\u7ed9\u4e86\u4e00\u4e2a\u6761\u4ef6\uff0c**\u6b64\u5e73\u9762\u56fe\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def**\uff0c\u6211\u4eec\u5c06\u54c8\u5bc6\u987f\u56de\u8def\u753b\u6210\u4e00\u4e2a\u5706\uff0c\u90a3\u4e48\u539f\u56fe\u7684\u8fb9\uff08\u9664\u53bb\u54c8\u5bc6\u987f\u56de\u8def\u4e0a\u7684\u8fb9\uff09\u53ef\u4ee5\u770b\u4f5c\u662f\u8be5\u5706\u7684\u5f26\uff0c\u8003\u8651\u5706\u4e2d\u4e24\u6761\u76f8\u4ea4\u7684\u5f26 $(u_1, v_1), (u_2, v_2)$,\u7531\u4e8e\u662f\u5e73\u9762\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e2d\u7684\u4e00\u6761\u7ffb\u5230\u5706\u5916\u53bb\uff08\u4f46\u4e24\u6761\u5f26\u4e0d\u80fd\u540c\u65f6\u7ffb\u5230\u5706\u5916\u53bb\uff0c\u539f\u56e0\u662f\u5982\u679c\u4ed6\u4eec\u5728\u5706\u5185\u76f8\u4ea4\uff0c\u90a3\u4e48\u5728\u5706\u5916\u4e5f\u4f1a\u76f8\u4ea4\uff0c\u53ef\u4ee5\u753b\u56fe\u6a21\u62df\u4e00\u4e0b\uff09\uff0c\u6211\u4eec\u8003\u8651\u5c06\u5f26\u89c6\u4e3a\u70b9\uff0c\u628a\u76f8\u4ea4\u7684\u5f26\u8fde\u8fb9\uff0c\u8fd9\u6837\uff0c\u5e73\u9762\u56fe\u7684\u5224\u5b9a\u5c31\u8f6c\u4e3a\u4e86\u65b0\u56fe\u7684\u4e8c\u5206\u56fe\u5224\u5b9a~\n\n\u8981\u6ce8\u610f\u7684\u4e00\u70b9\uff1a\u6309\u7167\u9898\u4e2d\u6240\u7ed9\u7684m\u7684\u8303\u56f4\u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u4f46\u8fd9\u5176\u5b9e\u662f\u4e2a\u5047\u6570\u636e\u8303\u56f4\uff0c\u5e73\u9762\u56fe\u6709\u4e00\u6761\u6027\u8d28\u662f $m \\leq 3n - 6$\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u4e86\u89e3\u4e00\u4e0b\u8bc1\u660e\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x * f;\n}\nconst int M = 10010;\nstruct node{\n    int nxt, to;\n}edge[700 * 700 * 2];\nint head[M], num, col[M];\nvoid build(int from, int to){\n    edge[++num].nxt = head[from];\n    edge[num].to = to;\n    head[from] = num;\n}\nbool dfs(int u, int color){\n    col[u] = color;\n    for(int i=head[u]; i; i=edge[i].nxt){\n        int v = edge[i].to;\n        if(col[v] == color) return 0;\n        if(col[v] == 0 && !dfs(v, -color)) return 0;\n    }\n    return 1;\n}\nbool check(int u1, int v1, int u2, int v2){\n    return (u1 < u2 && u2 < v1 && v1 < v2) || (u2 < u1 && u1 < v2 && v2 < v1);\n}\nint t, n, m;\nint from[M], to[M], G[M];\nvoid clearx(){\n    memset(head, 0, sizeof(head)); num = 0;\n    memset(col, 0, sizeof(col));\n    memset(G, 0, sizeof(G));\n}\nint main(){\n    t = read();\n    while(t --){\n        n = read(), m = read(); int flag = 0;\n        clearx();\n        for(int i=1; i<=m; i++){\n            from[i] = read(); to[i] = read();\n        }\n        for(int i=1; i<=n; i++) G[read()] = i;\n        if(m > 3 * n - 6){\n            puts(\"NO\"); continue;\n        }\n        for(int i=1; i<=m-1; i++){\n            for(int j=i+1; j<=m; j++){\n                int u1 = G[from[i]], v1 = G[to[i]], u2 = G[from[j]], v2 = G[to[j]];\n                if(u1 > v1) swap(u1, v1); if(u2 > v2) swap(u2, v2);\n                if( check(u1, v1, u2, v2) ) build(i, j), build(j, i);\n            }\n        }\n        for(int i=1; i<=m; i++){\n            if(col[i] == 0){\n                if(!dfs(i, 1)){\n                    flag = 1;\n                    break;\n                }\n            }\n        }\n        if(!flag) puts(\"YES\");\n        else puts(\"NO\");\n    }\n    return 0;\n}\n\n\n```\n\n",
        "postTime": 1540310553,
        "uid": 60108,
        "name": "alecli",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]\u5e73\u9762\u56fe\u5224\u5b9a\u3011"
    },
    {
        "content": "[My Blog](https://yzxoi.top/archives/1701)\n\n# Description\n\n\u5224\u5b9a\u4e00\u4e2a\u56fe\u662f\u5426\u4e3a\u5e73\u9762\u56fe\u7684\u95ee\u9898\u662f\u56fe\u8bba\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u3002\u73b0\u5728\u5047\u8bbe\u4f60\u8981\u5224\u5b9a\u7684\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u56fe\u662f\u5426\u662f\u5e73\u9762\u56fe\uff0c\u56fe\u4e2d\u5b58\u5728\u4e00\u4e2a\u5305\u542b\u6240\u6709\u9876\u70b9\u7684\u73af\uff0c\u5373\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe $G=(V,E)$\uff0c\u5982\u679c\u80fd\u591f\u505a\u5230\u628a\u5b83\u753b\u5728\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\uff0c\u4f7f\u5f97 $\\forall (a,b)(c,d)$\uff0c$a,b,c,d$ \u4e24\u4e24\u4e0d\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u8fb9 $(a,b)$ \u548c\u8fb9 $(c,d)$ \u6ca1\u6709\u4ea4\u70b9\uff0c\u5219\u79f0 $G$ \u662f\u5e73\u9762\u56fe\u3002\n\n\u54c8\u5bc6\u987f\u56de\u8def\u6307\u7684\u662f\uff1a\u5728\u4e00\u4e2a\u6709 $n$ \u4e2a\u70b9\u7684\u56fe\u4e2d\uff0c\u4e00\u6761\u4ece\u70b9 $x$ \u51fa\u53d1\uff0c\u6700\u540e\u56de\u5230\u70b9 $x$\uff0c\u5e76\u4e14\u9664\u70b9 $x$ \u5916\u6240\u6709\u70b9\u90fd\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u603b\u957f\u5ea6\u4e3a $n$ \u7684\u8def\u5f84\u3002\n\n## Solution\n\n\u7b80\u5355\u7ed9\u51fa\u5e73\u9762\u56fe\u7684\u5b9a\u4e49\uff1a\u65e0\u5411\u56fe\u753b\u5728\u540c\u4e00\u4e2a\u5e73\u9762\u4e0a\uff0c\u4efb\u610f\u4e24\u8fb9\u6ca1\u6709\u4ea4\u70b9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u5728\u54c8\u5bc6\u987f\u56de\u8def\u4e0a\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u65e0\u9700\u5176\u4ed6\u5224\u65ad\u3002\n2. \u5728\u54c8\u5bc6\u987f\u56de\u8def\u5916/\u91cc\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u6709\u4e24\u79cd\u9009\u62e9\uff1a\u8981\u4e48\u5728\u5916\u90e8\uff0c\u8981\u4e48\u5728\u91cc\u9762\u3002\n\n\u7531\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7684\u4e24\u79cd\u9009\u62e9\uff0c\u4ee5\u53ca\u5e73\u9762\u56fe\u7684\u9650\u5236\uff0c\u8fd9\u5c31\u8f6c\u5316\u4e3a\u4e86\u4e2a\u7ecf\u5178\u7684 2-SAT \u95ee\u9898\u3002\n\n![image-20210301204343887](https://gitee.com/yzx1798106406/picgoimage/raw/master/pic/image-20210301204343887.png)\n\n\u663e\u7136\u5982\u679c\u8fb9 $(x,y)$ \u4e0e\u8fb9 $(u,v)$ \u90fd\u5728\u73af\u5185\u65f6\uff0c\u8fd9\u4e2a\u56fe\u5c31\u4e0d\u662f\u5e73\u9762\u56fe\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u987a\u6b21\u679a\u4e3e\u4e24\u6761\u8fb9\uff0c\u5224\u65ad\u662f\u5426\u6709\u9650\u5236\u5373\u53ef\u3002\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```c++\nfor(i=1;i<=p;i++) for(j=i+1;j<=p;j++){//\u679a\u4e3e\u4e24\u6761\u8fb9\n\tu=rk[e[i].x],v=rk[e[i].y],x=rk[e[j].x],y=rk[e[j].y];//rk\u8868\u793a\u70b9\u5728\u54c8\u5bc6\u987f\u56de\u8def\u4e0a\u7684\u5e8f\u53f7\n\tif(u>v) swap(u,v);if(x>y) swap(x,y);\n\tif((u<x&&v>x&&v<y)||(u>x&&u<y&&v>y)) Add(i,j+p),Add(i+p,j),Add(j,i+p),Add(j+p,i);//\u5224\u65ad\u662f\u5426\u6709\u9650\u5236\uff0c\u5e76\u5efa\u56fe\n}\n```\n\n\u7136\u800c\u53d1\u73b0\u8fd9\u79cd\u65b9\u6cd5\u7684\u5efa\u56fe\u590d\u6742\u5ea6\u4f1a\u9ad8\u8fbe $O(M^2)$\uff0c\u5bf9\u4e8e $1\\leq M\\leq 10^4$ \u7684\u672c\u9898\u662f\u5b8c\u5168\u4e0d\u80fd\u901a\u8fc7\u7684\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u8981\u5229\u7528\u5230\u5e73\u9762\u56fe\u7684\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff1a$m\\leq 3n+6$\u3002\n\n\u5177\u4f53\u6027\u8d28\u7684\u8bc1\u660e\uff0c\u697c\u4e0a\u697c\u4e0b\u90fd\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002\n\n## Code\n\n```c++\n#include<bits/stdc++.h>\n#define Tp template<typename Ty>\n#define Ts template<typename Ty,typename... Ar>\n#define W while\n#define I inline\n#define RI register int\n#define LL long long\n#define Cn const\n#define CI Cn int&\n#define gc getchar\n#define D isdigit(c=gc())\n#define pc(c) putchar((c))\n#define min(x,y) ((x)<(y)?(x):(y))\n#define max(x,y) ((x)>(y)?(x):(y))\nusing namespace std;\nnamespace Debug{\n\tTp I void _debug(Cn char* f,Ty t){cerr<<f<<'='<<t<<endl;}\n\tTs I void _debug(Cn char* f,Ty x,Ar... y){W(*f!=',') cerr<<*f++;cerr<<'='<<x<<\",\";_debug(f+1,y...);}\n\tTp ostream& operator<<(ostream& os,Cn vector<Ty>& V){os<<\"[\";for(Cn auto& vv:V) os<<vv<<\",\";os<<\"]\";return os;}\n\t#define gdb(...) _debug(#__VA_ARGS__,__VA_ARGS__)\n}using namespace Debug;\nnamespace FastIO{\n\tTp I void read(Ty& x){char c;int f=1;x=0;W(!D) f=c^'-'?1:-1;W(x=(x<<3)+(x<<1)+(c&15),D);x*=f;}\n\tTs I void read(Ty& x,Ar&... y){read(x),read(y...);}\n\tTp I void write(Ty x){x<0&&(pc('-'),x=-x,0),x<10?(pc(x+'0'),0):(write(x/10),pc(x%10+'0'),0);}\n\tTp I void writeln(Cn Ty& x){write(x),pc('\\n');}\n}using namespace FastIO;\nCn int N=210,M=10010,P=3*N+6;\nint T,n,m,p,C[N],G[N][N],fir[P<<1],nxt[P*P<<2],son[P*P<<2],tot,dfn[P<<1],low[P<<1],stk[P<<1],col[P<<1],cnt,top,cc,rk[N];\nstruct Edge{int x,y;}e[P],E[M];\nI void Add(CI x,CI y){nxt[++tot]=fir[x],fir[x]=tot,son[tot]=y;}\n#define to son[i]\nI void Tarjan(CI x){\n\tdfn[x]=low[x]=++cnt,stk[++top]=x;RI i;\n\tfor(i=fir[x];i;i=nxt[i]) if(!dfn[to]) Tarjan(to),low[x]=min(low[x],low[to]);else if(!col[to]) low[x]=min(low[x],dfn[to]);\n\tif(dfn[x]==low[x]){col[x]=++cc;W(stk[top]^x) col[stk[top--]]=cc;top--;}\n}\nint main(){\n\tRI i,j,u,v,x,y,flg;read(T);W(T--){\n\t\tfor(memset(G,0,sizeof(G)),memset(dfn,0,sizeof(dfn)),read(n,m),i=1;i<=m;i++) read(E[i].x,E[i].y),E[i].x>E[i].y&&(swap(E[i].x,E[i].y),0);//\u6240\u6709\u8fb9\u6309\u7167\u7f16\u53f7\u5c0f\u8fde\u5411\u7f16\u53f7\u5927\uff0c\u4fbf\u4e8e\u53bb\u6389\u54c8\u5bc6\u987f\u56de\u8def\u4e0a\u7684\u8fb9\n\t\tfor(i=1;i<=n;i++) read(C[i]),rk[C[i]]=i,i>1&&(G[min(C[i-1],C[i-1])][max(C[i-1],C[i])]=1,0);G[min(C[1],C[n])][max(C[1],C[n])]=1;//\u54c8\u5bc6\u987f\u56de\u8def\u4e0a\u7684\u8fb9\u6253\u4e0a\u6807\u8bb0\n\t\tif(m>3*n+6){puts(\"NO\");continue ;}//\u5229\u7528\u5e73\u9762\u56fe\u7684\u6027\u8d28\n\t\tfor(memset(col,0,sizeof(col)),flg=cnt=top=cc=p=0,i=1;i<=m;i++) if(!G[E[i].x][E[i].y]) e[++p]=E[i];\n\t\tfor(memset(fir,0,sizeof(fir)),tot=0,i=1;i<=p;i++) for(j=i+1;j<=p;j++){\n\t\t\tu=rk[e[i].x],v=rk[e[i].y],x=rk[e[j].x],y=rk[e[j].y];\n\t\t\tif(u>v) swap(u,v);if(x>y) swap(x,y);\n\t\t\tif((u<x&&v>x&&v<y)||(u>x&&u<y&&v>y)) Add(i,j+p),Add(i+p,j),Add(j,i+p),Add(j+p,i);//\u5efa\u56fe\n\t\t}for(i=1;i<=(p<<1);i++) if(!dfn[i]) Tarjan(i);for(i=1;i<=p;i++) if(col[i]==col[i+p]){puts(\"NO\");flg=1;break ;}if(!flg) puts(\"YES\");\n\t}return 0;\n}\n```\n\n",
        "postTime": 1614603182,
        "uid": 37103,
        "name": "yzxoi",
        "ccfLevel": 7,
        "title": "LuoguP3209 [HNOI2010] \u5e73\u9762\u56fe\u5224\u5b9a"
    },
    {
        "content": "## \u9898\u76ee\u5206\u6790\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053,\u9898\u4e2d\u7ed9\u51fa\u7684\u56fe\u4e2d\u6709\u4e00\u4e2a\u54c8\u5bc6\u987f\u56de\u8def,\u8be2\u95ee\u8fd9\u5f20\u56fe\u662f\u4e0d\u662f\u5e73\u9762\u56fe.\n\n\u6839\u636e\u5e73\u9762\u56fe\u7684\u6027\u8d28,$m \\leq 3n-6$,\u4e0d\u6ee1\u8db3\u7684\u76f4\u63a5\u8df3\u6389,[*\u8bc1\u660e\u770b\u8fd9\u91cc*](https://wenku.baidu.com/view/8c887f10a6c30c2259019ea0.html).\n\n\u7136\u540e\u6211\u4eec\u628a\u54c8\u5bc6\u987f\u56de\u8def\u4e2d\u7684\u8fb9\u7b5b\u6389,\u679a\u4e3e\u5269\u4e0b\u7684\u8fb9\u662f\u5426\u6709\u4e24\u4e24\u76f8\u4ea4\u7684.\n\n\u8003\u8651\u5173\u7cfb\u6570\u7ec4\u7684\u5efa\u7acb,m\u8868\u793a\u7b5b\u6389\u56de\u8def\u540e\u7684\u8fb9\u7684\u6570\u91cf,$(1,m)$\u8868\u793a\u8fd9\u6761\u8fb9\u5728\u5708\u5185,$(m+1,2m)$\u8868\u793a\u8fd9\u6761\u8fb9\u5728\u5708\u5916.\n\n\u5982\u679c\u4e24\u6761\u8fb9\u76f8\u4ea4\u7684\u8bdd,\u90a3\u4e48\u5b83\u4eec\u5c31\u4e0d\u80fd\u540c\u65f6\u5728\u5708\u5916\u6216\u5708\u5185,\u6839\u636e\u8fd9\u4e2a\u8fde\u8fb9.\n\n\u7136\u540e\u7528tarjan\u8dd1\u4e00\u904d2-sat,\u56e0\u4e3a\u6211\u4eec\u53ea\u7528\u5224\u5b9a\u662f\u5426\u662f\u5e73\u9762\u56fe,\u6240\u4ee5\u5bfc\u51fa\u77db\u76fe(\u5373scc[i]==scc[i+m])\u7684\u5c31\u76f4\u63a5\u8fd4\u56defalse.\n\n\u5176\u4ed6\u7684\u7ec6\u8282\u76f4\u63a5\u770b\u4ee3\u7801\u597d\u4e86,\u5f88\u597d\u7406\u89e3\u7684.\n\n## \u4ee3\u7801\n\n```cpp\n#include \"iostream\"\n#include \"cstdio\"\n#include \"cstring\"\n#include \"cstdlib\"\n#include \"cmath\"\n#include \"cctype\"\n#include \"algorithm\"\n#include \"set\"\n#include \"queue\"\n#include \"stack\"\n#include \"map\"\n#include \"stack\"\n#define lxl long long\n#define R register\n#define INF 0x3f3f3f3f\n#define debug(x) printf(\"debug:%lld\\n\",x) \nusing namespace std;\nconst lxl maxm=100010,maxn=1010;\nlxl T,n,m,EdgeSize,TimeCnt,SccCnt,tot;\nlxl loop[maxn],pla[maxn],head[maxm<<1],dfn[maxm<<1],low[maxm<<1],scc[maxm<<1],num[maxn][maxn];\nbool edge[maxn][maxn],falg[maxm<<1];\nstack<lxl>s;\nstruct _Edge\n{\n\tlxl to,next;\n}e[maxm*10];\nstruct _Con\n{\n\tlxl u,v;\n}le[maxm],ne[maxm];\ninline lxl read()\n{\n\tchar c=getchar();\n\tlxl f=1,x=0;\n\tfor(;!isdigit(c);c=getchar())(c=='-')&&(f=-1);\n\tfor(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+(c^48);\n\treturn f*x;\n}\ninline void EdgeAdd(lxl from,lxl to)\n{\n\te[EdgeSize].to=to;\n\te[EdgeSize].next=head[from];\n\thead[from]=EdgeSize++;\n}\nvoid tarjan(lxl now)\n{\n\tdfn[now]=low[now]=++TimeCnt;\n\tfalg[now]=true,s.push(now);\n\tfor(R int i(head[now]),to;~i;i=e[i].next)\n\t{\n\t\tto=e[i].to;\n\t\tif(!dfn[to])\n\t\t{\n\t\t\ttarjan(to);\n\t\t\tlow[now]=min(low[now],low[to]);\n\t\t}\n\t\telse if(falg[to])low[now]=min(low[now],dfn[to]);\n\t}\n\tif(dfn[now]==low[now])\n\t{\n\t\t++SccCnt;\n\t\twhile(!s.empty())\n\t\t{\n\t\t\tlxl temp=s.top();\n\t\t\ts.pop();\n\t\t\tfalg[temp]=false;\n\t\t\tscc[temp]=SccCnt;\n\t\t\tif(temp==now)break;\n\t\t}\n\t}\n}\ninline bool ok()\n{\n\tfor(R int i(1);i<=m+m;++i)if(!dfn[i])tarjan(i);\n\tfor(R int i(1);i<=m;++i)if(scc[i]==scc[i+m])return false;\n\treturn true;\n}\nint main(void)\n{\n\tT=read();\n\tfor(;T;--T)\n\t{\n\t\twhile(!s.empty())s.pop();\n\t\tmemset(falg,false,sizeof(falg)),memset(e,0,sizeof(e));\n\t\tmemset(head,-1,sizeof(head)),memset(dfn,0,sizeof(dfn));\n\t\tmemset(low,0,sizeof(low)),memset(scc,0,sizeof(scc));\n\t\tmemset(edge,false,sizeof(edge)),memset(le,0,sizeof(le));\n\t\tmemset(pla,0,sizeof(pla)),memset(loop,0,sizeof(loop));\n\t\tmemset(ne,0,sizeof(ne));\n\t\tSccCnt=TimeCnt=EdgeSize=tot=0;\n\t\tn=read(),m=read();\n\t\tfor(R int i(1);i<=m;++i)\n\t\t{\n\t\t\tle[i].u=read(),le[i].v=read();\n\t\t\tif(le[i].u>le[i].v)swap(le[i].u,le[i].v);\n\t\t\tedge[le[i].u][le[i].v]=true;\n\t\t}\n\t\tfor(R int i(1);i<=n;++i)\n\t\t\n\t\t\tloop[i]=read(),pla[loop[i]]=i;\n\t\t\tif(i>1)edge[min(loop[i],loop[i-1])][max(loop[i],loop[i-1])]=false;\n\t\t}\n\t\tif(m>n+n+n-6)\n\t\t{\n\t\t\tprintf(\"NO\\n\");\n\t\t\tcontinue;\n\t\t}\n\t\tedge[min(loop[1],loop[n])][max(loop[1],loop[n])]=false;\n\t\tfor(R int i(1);i<=m;++i)\n\t\t\tif(edge[le[i].u][le[i].v])ne[++tot].u=le[i].u,ne[tot].v=le[i].v;\n\t\tm=tot;\n\t\tfor(R int i(1);i<=m;++i)\n\t\t\tfor(R int j(i+1);j<=m;++j)\n\t\t\t{\n\t\t\t\tlxl a=ne[i].u,b=ne[i].v,x=ne[j].u,y=ne[j].v;\n\t\t\t\tif(edge[a][b]&&edge[x][y])\n\t\t\t\t{\n\t\t\t\t\tif(pla[b]<pla[a])swap(a,b);\n\t\t\t\t\tif(pla[y]<pla[x])swap(x,y);\n\t\t\t\t\tif(pla[a]<pla[x]&&pla[b]>pla[x]&&pla[b]<pla[y])\n\t\t\t\t\t{\n\t\t\t\t\t\tEdgeAdd(i,j+m),EdgeAdd(j,i+m);\n\t\t\t\t\t\tEdgeAdd(i+m,j),EdgeAdd(j+m,i); \n\t\t\t\t\t}\n\t\t\t\t\telse if(pla[b]>pla[y]&&pla[a]>pla[x]&&pla[a]<pla[y])\n\t\t\t\t\t{\n\t\t\t\t\t\tEdgeAdd(i,j+m),EdgeAdd(j,i+m);\n\t\t\t\t\t\tEdgeAdd(i+m,j),EdgeAdd(j+m,i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tprintf(ok()?\"YES\\n\":\"NO\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1581597720,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]\u5e73\u9762\u56fe\u5224\u5b9a\u3011"
    },
    {
        "content": "### ~~\u524d\u8a00~~\n\n\u8fd9\u9898\u5176\u5b9e\u7528\u4e0d\u4e0a $ 2-SAT $\uff0c$ Dinic $\uff0c$ Topo+Tarjan $,$ disjoint-set$ \u8fd9\u4e48\u9ad8\u5927\u4e0a\u7684\u540d\u8bcd\u6765\u89e3\u91ca\u7684\uff08\u5176\u5b9e\u662f\u6211\u592a\u84bb\u4e86qwq\uff09\u8981\u6211\u8bf4\u5c31\u662f\u7206\u641c\uff0c\u53ea\u4e0d\u8fc7\u4fdd\u8bc1\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6b63\u786e\u6027\n\n\u5927\u5bb6\u7684\u601d\u8def\u5176\u5b9e\u672c\u8d28\u90fd\u5dee\u4e0d\u591a\uff0c\u4ee3\u7801\u5b9e\u73b0\u8d77\u6765\u9664\u4e86 $ Tarjan $ \u90a3\u4e2a\u4e4b\u5916\u5b9e\u8d28\u90fd\u4e00\u6837\uff0c\u4f46\u5374\u786c\u8981\u63d0\u5230\u4e8c\u5206\u56fe\u4e0a\uff0c\u5413\u5f97\u6211\u8fd9\u79cd\u83dc\u9e21\u5f53\u573a\u529d\u9000\u4e86\n\n\u4ee5\u9632\u540e\u9762\u7684\u4eba\u4e5f\u4f1a\u8ddf\u6211\u4e00\u6837\u88ab\u5413\u7740\uff0c\u6211\u51b3\u5b9a\u7528\u6bd4\u8f83\u6613\u61c2\u7684\u65b9\u5f0f\u89e3\u91ca\u4e00\u4e0b qwq\n\n------------\n\n## \u4e00\u4e9b\u5fc5\u987b\u60f3\u660e\u767d\u7684\u4e8b\n\n\u9898\u76ee\u4e2d\u7ed9\u4e86\u56fe\u4e2d\u7684\u54c8\u5bc6\u987f\u8def\u5f84\uff0c\u8fd9\u610f\u5473\u7740\u56fe\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\u90fd\u8fde\u6210\u4e86\u4e00\u4e2a\u73af\u3002\u4f46\u662f\u73af\u4e0a\u53ea\u6709 n \u6761\u8fb9\uff0c\u5269\u4e0b\u7684\u8fb9\u53bb\u54ea\u4e86\u5462\uff1f\u81ea\u7136\u662f\u628a\u73af\u4e0a\u4e0d\u76f8\u90bb\u7684\u4e24\u70b9\u7ed9\u8fde\u63a5\u8d77\u6765\u4e86\n\n\u6682\u4e14\u5148\u628a\u9664\u4e86\u54c8\u5bc6\u987f\u8def\u5f84\u7684\u6240\u6709\u8fb9\u6210\u4e3a\u201c\u5f26\u201d\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/mu1mpadh.png)\n\n\u60f3\u60f3\u73af\u628a\u5e73\u9762\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u90a3\u4e48\u5982\u679c\u4e24\u6761\u5f26\u76f8\u4ea4\u4e86\uff0c\u4f7f\u6b64\u56fe\u4e0d\u4e3a\u5e73\u9762\u56fe\uff0c\u90a3\u4e48\u8fd9\u4e24\u6761\u5f26\u80af\u5b9a\u5728\u73af\u7684\u540c\u4fa7\uff08\u5185\u6216\u5916\uff09\n\n\u53ea\u5728\u540c\u4fa7\u5c31\u884c\u4e86\u5417\uff1f\n\n\u8bbe\u7ed3\u70b9 $ i $ \u5728\u73af\u4e0a\u7684\u987a\u5e8f\u4e3a $ HamiN_i $\uff0c\u90a3\u4e48\u4e24\u6761\u5f26\u76f8\u4ea4\u8fd8\u5f97\u6ee1\u8db3\u4e00\u6761\u5f26\u7684\u7ed3\u70b9 $ a $ \u7684 $ HamiN $ \u5728\u53e6\u4e00\u6761\u5f26\u4e24\u4e2a\u7ed3\u70b9\u7684 $ HamiN $ \u7684\u5f00\u533a\u95f4\u5185\uff0c\u53e6\u4e00\u7ed3\u70b9 $ b $ \u4e0d\u5728\u5176\u95ed\u533a\u95f4\u5185\n\n\u8bbe\u6709\u4e24\u6761\u8fb9 $ x,y $\uff0c\u7528\u8868\u8fbe\u5f0f\u5c31\u5199\u6210\uff1a\n\n$ HamiN_{x.a}<HamiN_{y.a}<HamiN_{x.b} $\n\n\u5e76\u4e14\n\n$ HamiN_{y.b}<HamiN_{x.a} || HamiN_{x.b}<HamiN_{y.b} $\n\n\u628a $ y $ \u7684 $ a,b $ \u518d\u5bf9\u8c03\u4e00\u4e0b\u8fdb\u884c\u6bd4\u8f83\uff1a\n\n$ HamiN_{x.a}<HamiN_{y.b}<HamiN_{x.b} $\n\n\u5e76\u4e14\n\n$ HamiN_{y.a}<HamiN_{x.a} || HamiN_{x.b}<HamiN_{y.a} $\n\n\u4e24\u8005\u6ee1\u8db3\u5176\u4e00\uff0c\u540c\u4fa7\u4e24\u5f26\u5c31\u76f8\u4ea4\n\n\u4ee3\u7801\u5199\u4e0a\u6765\u5c31\u662f\n\n```cpp\nbool Intersect(DE x,DE y)\n{\n\treturn\n\t(\n\t\t(\n\t\t\t(HamiN[y.a]<HamiN[x.a] && HamiN[x.a]<HamiN[y.b])\n\t\t\t&& \n\t\t\t(HamiN[x.b]<HamiN[y.a] || HamiN[y.b]<HamiN[x.b])\n\t\t)\n\t\t||\n\t\t(\n\t\t\t(HamiN[y.a]<HamiN[x.b] && HamiN[x.b]<HamiN[y.b])\n\t\t\t&& \n\t\t\t(HamiN[x.a]<HamiN[y.a] || HamiN[y.b]<HamiN[x.a])\n\t\t)\n\t);\n}\n```\n\n\u6ce8\u610f\u63d0\u524d\u9884\u5904\u7406\u51fa $ HamiN $ \u5e76\u4f7f\u5f97\u6bcf\u6761\u5f26 $ HamiN_a \\leq HamiN_b $\n\n```cpp\nscanf(\"%d %d\",&n,&m);\nfor(int i=1;i<=m;i++) E[i].Scan();\nfor(int i=1,V;i<=n;i++)\n{\n\tscanf(\"%d\",&V);\n\tHamiN[V]=i;\n}\nfor(int i=1;i<=m;i++)\n\tif(HamiN[E[i].a]>HamiN[E[i].b]) swap(E[i].a,E[i].b);\n```\n\n------------\n\n## \u7b97\u6cd5\u601d\u8def\n\n\u5982\u679c\u56fe\u4e0a\u6240\u6709\u5f26\u4e0d\u7ba1\u5411\u5185\u5411\u5916\u5982\u4f55\u6446\u653e\u90fd\u4f1a\u6709\u76f8\u4ea4\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u4e0d\u662f\u5e73\u9762\u56fe\n\n\u5982\u679c\u5b58\u5728\u6709\u4e00\u79cd\u6446\u653e\u65b9\u5f0f\u4f7f\u6240\u6709\u5f26\u90fd\u4e0d\u76f8\u4ea4\uff0c\u90a3\u4e48\u5c31\u662f\u5e73\u9762\u56fe\n\n\u6211\u4eec\u53ea\u8981\u5c3d\u91cf\u8ba9\u56fe\u6210\u4e3a\u5e73\u9762\u56fe\u5c31\u884c\u4e86\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5f26\uff0c\u627e\u51fa\u6240\u6709\u6709\u53ef\u80fd\u4e0e\u4e4b\u76f8\u4ea4\u7684\u5f26\uff08\u5c31\u662f\u5982\u679c\u653e\u5728\u540c\u4fa7\u5b83\u4fe9\u5c31\u4f1a\u76f8\u4ea4\uff0c\u5b83\u4eec\u7ec4\u6210\u7684\u96c6\u5408\u79f0\u4e3a $ oppo $\uff09\uff0c\u90a3\u4e48\u8fd9\u6761\u5f26\u653e\u5728\u4e86\u4e00\u4fa7\uff0c\u5176 $ oppo $ \u5185\u6240\u6709\u5f26\u5fc5\u987b\u653e\u5728\u5f02\u4fa7\n\n\u6211\u4eec\u6bcf\u653e\u4e00\u6761\u5f26\uff0c\u5c31\u5c06\u5176\u7684 $ oppo $ \u5185\u6240\u6709\u8fb9\u653e\u8fdb\u5f02\u4fa7\uff0c\u5982\u679c\u8fd9\u671f\u95f4\u6709\u8fb9\u76f8\u4ea4\u4e86\uff0c\u90a3\u5c31\u6ca1\u529e\u6cd5\u4e86\uff0c\u80af\u5b9a\u4e0d\u662f\u5e73\u9762\u56fe\n\n\u5bf9\u4e8e\u4e00\u5f00\u59cb\u653e\u7f6e\u7684\u5f26\uff0c\u6211\u4eec\u653e\u5728\u54ea\u4fa7\u90fd\u884c\n\n\u6574\u4e2a\u653e\u7f6e\u7684\u8fc7\u7a0b\u7528 $ DFS $ \u5b9e\u73b0\uff0c\u6837\u5b50\u5f88\u50cf\u4f60\u4eec\u5339\u914d\u4e8c\u5206\u56fe\u65f6\u7684\u6837\u5b50\n\n\u6548\u7387 $ O(Tm^2) $\uff0c\u7531\u4e8e $ m\\leq3n-6 $\uff0c\u6839\u672c\u4e0d\u614c\n\n## \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN=200;\nconst int MAXM=1e4;\n\nbool inseg(int bef,int ob,int aft)\n{return bef<ob && ob<aft;}\n\nstruct DE\n{\n\tint a,b;\n\tvoid Scan() {scanf(\"%d %d\",&a,&b);}\n\tvoid Print() {printf(\"%d %d\\n\",a,b);}\n}E[MAXM+5];\n\nint T,n,m;bool ans;\nint HamiN[MAXN+5];\nDE Assort[3][MAXN+5];int num[3];\n//\u8bb0\u5f55\u4e24\u4fa7\u6709\u54ea\u4e9b\u5f26\u653e\u7f6e\n\nbool Intersect(DE x,DE y)\n{\n\treturn\n\t(\n\t\t(\n\t\t\t(HamiN[y.a]<HamiN[x.a] && HamiN[x.a]<HamiN[y.b])\n\t\t\t&& \n\t\t\t(HamiN[x.b]<HamiN[y.a] || HamiN[y.b]<HamiN[x.b])\n\t\t)\n\t\t||\n\t\t(\n\t\t\t(HamiN[y.a]<HamiN[x.b] && HamiN[x.b]<HamiN[y.b])\n\t\t\t&& \n\t\t\t(HamiN[x.a]<HamiN[y.a] || HamiN[y.b]<HamiN[x.a])\n\t\t)\n\t);\n}\n\nbool cmp(DE x,DE y)\n{\n\tif(HamiN[x.a]!=HamiN[y.a]) return HamiN[x.a]<HamiN[y.a];\n\treturn HamiN[x.b]<HamiN[y.b];\n}\n\nbool CanPutIn(DE ob,bool type)//\u5224\u65ad\u5f26 ob \u662f\u5426\u80fd\u653e\u5728 type \u4fa7\n{\n\tfor(int i=1;i<=num[type];i++)\n\t\tif(Intersect(ob,Assort[type][i])) return 0;\n\treturn 1;\n}\n\nstruct msg\n{\n\tbool type;\n\tint edge;\n};\n\nvector<int> oppo[MAXM+5];\nbool visit[MAXM+5];\n\nbool DFS(int edge,bool type)\n{\n\tvisit[edge]=1;\n\tAssort[type][++num[type]]=E[edge];\n\tbool cnt=1;\n\tfor(int i=0,rear;i<oppo[edge].size() && cnt;i++)\n\t{\n\t\trear=oppo[edge][i];\n\t\tif(visit[rear]) continue;\n\t\tif(CanPutIn(E[rear],!type)) cnt&=DFS(rear,!type);\n\t\telse cnt=0;\n\t}\n\treturn cnt;\n}\n\nint main()\n{\n\tfor(scanf(\"%d\",&T);T--;)\n\t{\n\t\tscanf(\"%d %d\",&n,&m);\n\t\tfor(int i=1;i<=m;i++) E[i].Scan();\n\t\tfor(int i=1,V;i<=n;i++)\n\t\t{\n\t\t\tscanf(\"%d\",&V);\n\t\t\tHamiN[V]=i;\n\t\t}\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tif(HamiN[E[i].a]>HamiN[E[i].b]) swap(E[i].a,E[i].b);\n\t\tif(m>3*n-6) {printf(\"NO\\n\");continue;}\n\t\tnum[0]=num[1]=0;\n\t\tans=1;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\toppo[i].clear();\n\t\t\tvisit[i]=0;\n\t\t}\n\t\tfor(int i=1;i<=m;i++)\n\t\t\tfor(int j=1;j<=m;j++)\n\t\t\t{\n\t\t\t\tif(i==j) continue;\n\t\t\t\tif(Intersect(E[i],E[j])) oppo[i].push_back(j);\n\t\t\t}\n\t\tfor(int i=1;i<=m && ans;i++)\n\t\t\tif(!visit[i]) ans&=DFS(i,0);\n  \t\t//\u5982\u679c !visit[i]\uff0c\u8bf4\u660e\u5f26 i \u8ddf\u4e4b\u524d\u653e\u7f6e\u7684\u5f26\u7edd\u5bf9\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u56e0\u6b64\u53ef\u4ee5\u968f\u610f\u653e\u7f6e\u5f26 i\n\t\tif(ans) printf(\"YES\\n\");\n\t\telse printf(\"NO\\n\");\n\t}\n\treturn 0;\n}\n```\n### \u540e\u8bed\n\n~~\u4e0d\u770b\u4e5f\u884c\uff0c\u6ca1\u5565\u7528~~\n\n\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u9898\u7b2c\u4e00\u53cd\u5e94\u662f\u5e93\u62c9\u6258\u592b\u65af\u57fa\u5b9a\u7406 qwq \u6ee1\u56fe\u627e $ K_5 $\uff08\u4e94\u4e2a\u7ed3\u70b9\u7684\u65e0\u5411\u5b8c\u5168\u56fe\uff09\u548c $ K_{3,3} $\uff08\u4e24\u90e8\u6709\u4e09\u4e2a\u7ed3\u70b9\u7684\u4e8c\u5206\u56fe\uff0c\u4e0d\u540c\u90e8\u7684\u7ed3\u70b9\u90fd\u4e92\u76f8\u6709\u8fde\u8fb9\uff09\n\n\u7136\u540e\u6548\u7387\u662f\u2026\u2026$ O(Tn^6) $ qwq \u76f4\u5230\u6211\u770b\u5230\u9898\u76ee\u4e2d\u7ed9\u4e86\u54c8\u5bc6\u987f\u56de\u8def\u2026\u2026\n\n------------\n\n\u7136\u540e\u60f3\u4e86\u4e2a\u5047\u7b97\u6cd5\uff1a\u4f9d\u6b21\u653e\u7f6e\u6240\u6709\u8fb9\uff0c\u80fd\u653e\u8fdb\u5185\u4fa7\u5c31\u653e\u5185\u4fa7\uff0c\u4e0d\u884c\u5c31\u5916\u4fa7\uff0c\u518d\u4e0d\u884c\u76f4\u63a5\u8f93\u51fa NO\n\n\u5176\u5b9e\u5199\u5230\u4e00\u534a\u4e00\u7ecf\u53d1\u73b0\u7b97\u6cd5\u5047\u4e86\uff0c\u7136\u800c\u4e0d\u7518\u5fc3\uff0c\u6309\u7167\u5f26\u4e24\u4fa7\u7ed3\u70b9\u7684 $ HamiN $ \u6392\u5e8f\u4e86\u4e00\u4e0b\n\n\u5c45\u7136\u62ff\u4e86 80 \u5206 qwq \u8003\u573a\u4e0a\u5982\u679c\u60f3\u4e0d\u51fa\u6765\u8fd9\u65b9\u6cd5\u80af\u5b9a\u503c\u4e86",
        "postTime": 1580210179,
        "uid": 54591,
        "name": "Seauy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]\u5e73\u9762\u56fe\u5224\u5b9a\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u5206\u6790\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u6709\u7684\u56de\u8def\u6784\u56fe\uff0c\u5269\u4e0b\u7684\u8fb9\uff0c\u53ea\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u5708\u5185\u5708\u5916\uff0c\n\n\n\u624b\u52a8\u6a21\u62df\u4e00\u4e0b\u5c31\u53ef\u4ee5\u53d1\u73b0\uff1a\u9898\u76ee\u8981\u6c42\u907f\u514d\u4e24\u7ebf\u76f8\u4ea4\uff0c\u90a3\u4e48\u53ea\u4f1a\u5b58\u5728\u5728\u5708\u5185\u7684\u7f16\u53f7\u5b58\u5728\u4ee5\u4e0b\u5173\u7cfb\u65f6\u6ee1\u8db3\uff1a\n\n\n( u[i] < u[j] && v[i] > u[j] && v[i] < v[j] ) || ( u[j] < u[i] && v[j] > u[i] && v[j] < v[i])\n\n\u5373\u4e00\u70b9\u5728\u53e6\u4e00\u8fb9\u5185\uff0c\u53e6\u4e00\u70b9\u5728\u53e6\u4e00\u8fb9\u4e4b\u5916\uff0c\u7136\u540e\u8dd1\u4e00\u904d2 \u2013 sat\uff0c\u641e\u5b9a\n\n\nc++\u4ee3\u7801\u5982\u4e0b\uff1a\n\n[\u849f\u84bbblog](http://tgotp.science/1997-hnoi2010planar/)\n",
        "postTime": 1507525401,
        "uid": 23087,
        "name": "Tgotp",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]PLANAR\u3011"
    },
    {
        "content": "\u9996\u5148\u9700\u8981\u4e86\u89e3\u5e73\u9762\u56fe\u7684\u5b9a\u4e49\uff1a\n\n\u5982\u679c\u56fe $G$ \u80fd\u753b\u5728\u5e73\u9762 $S$ \u4e0a\uff0c\u5373 **\u9664\u9876\u70b9\u5904\u5916\u65e0\u8fb9\u76f8\u4ea4** \uff0c\u5219\u79f0 $G$ \u53ef\u5e73\u9762\u5d4c\u5165 $S$ \uff0c $G$ \u4e3a\u53ef\u5e73\u9762\u56fe\u6216\u5e73\u9762\u56fe\u3002\n\n\u8bbe $G$ \u662f\u5e73\u9762\u56fe\uff0c\u7531 $G$ \u7684\u8fb9\u5c06 $G$ \u6240\u5728\u7684\u5e73\u9762\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u533a\u57df\uff0c\u6bcf\u4e2a\u533a\u57df\u79f0\u4e3a $G$ \u7684\u4e00\u4e2a **\u9762** \uff0c\u5176\u4e2d\u9762\u79ef\u65e0\u9650\u7684\u9762\u79f0\u4e3a\u65e0\u9650\u9762\u6216\u5916\u90e8\u9762\uff0c\u9762\u79ef\u6709\u9650\u7684\u79f0\u4e3a\u6709\u9650\u9762\u6216\u5185\u90e8\u9762\u3002\u5305\u56f4\u6bcf\u4e2a\u9762\u7684\u6240\u6709\u8fb9\u7ec4\u6210\u7684\u56de\u8def\u79f0\u4e3a\u8be5\u9762\u7684 **\u8fb9\u754c** \uff0c\u8fb9\u754c\u7684\u957f\u5ea6\u79f0\u4e3a\u8be5\u9762\u7684 **\u6b21\u6570** \u3002\n\n\u4e3a\u4e86\u5f3a\u8c03\u5e73\u9762\u56fe\u7684\u9762\uff0c\u7528\u4e09\u5143\u7ec4\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u56fe $G=(V,E,F)$ \uff0c\u5176\u4e2d $F$ \u8868\u793a\u5e73\u9762\u56fe $G$ \u4e2d\u9762\u7684\u4e2a\u6570\u3002\n\n---\n\n\u5bf9\u4e8e\u8fde\u901a\u5e73\u9762\u56fe\uff0c\u6709\u6b27\u62c9\u516c\u5f0f\uff1a\n$$\nV-E+F=2\n$$\n\u8bc1\u660e\u6bd4\u8f83\u590d\u6742\uff0c\u8981\u6d89\u53ca\u4ee3\u6570\u62d3\u6251\u3002\n\n\u82e5 $G$ \u662f\u8fde\u901a\u7684\u7b80\u5355\u5e73\u9762\u56fe\uff08\u65e0\u91cd\u8fb9\u4e0e\u81ea\u73af\uff09\uff0c\u5219\u6bcf\u4e2a\u9762\u7684\u6b21\u6570\u90fd **\u81f3\u5c11\u4e3a $3$** \uff0c\u53c8\u56e0\u4e3a\u6bcf\u6761\u8fb9\u4ec5\u5c5e\u4e8e **\u4e24\u4e2a\u9762** \u7684\u8fb9\u754c\uff0c\u5219\u6709\uff1a $3F \\leq 2E$ \u3002\u4ee3\u5165\u4e0a\u5f0f\u5f97\uff1a\n$$\nE \\leq 3V-6\n$$\n\n---\n\n\u7136\u540e\u518d\u6765\u770b\u8fd9\u9053\u9898\u3002\n\n\u8f93\u5165\u4e2d\u7ed9\u51fa\u4e86\u8fd9\u4e2a\u56fe $G$ \u548c $G$ \u4e2d\u7684\u4e00\u4e2a\u54c8\u5bc6\u987f\u56de\u8def\u3002\n\n\u6211\u4eec\u5c06\u8fd9\u4e2a\u54c8\u5bc6\u987f\u56de\u8def\u5c55\u5f00\uff0c\u5373\u8ba9\u5176\u4ed6\u8fb9\u90fd\u5728\u56de\u8def\u56f4\u6210\u7684\u533a\u57df\u5185\u3002\n\n\u56fe\u4e3a\u6837\u4f8b\u7b2c\u4e00\u7ec4\u6570\u636e\uff1a\n\n![d1DmCV.png](https://s1.ax1x.com/2020/08/19/d1DmCV.png)\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4e0a\u56fe\u4e2d\u76f8\u4ea4\u7684\u4e24\u6761\u8fb9\u5fc5\u987b\u4e00\u6761\u8fb9\u5728\u54c8\u5bc6\u987f\u56de\u8def\u5185\uff0c\u4e00\u6761\u5728\u56de\u8def\u5916\u624d\u80fd\u4e0d\u76f8\u4ea4\u3002\n\n\u5219\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a2-SAT\u95ee\u9898\uff0c\u679a\u4e3e\u76f8\u4ea4\u7684\u4e24\u6761\u8fb9 $i,j$\uff0c\u8fde\u8fb9\uff1a\n\n+ $i \\to j'$ \u8868\u793a $i$ \u5728\u56de\u8def\u5185\u5219 $j$ \u5fc5\u987b\u5728\u56de\u8def\u5916\u3002\n+ $j \\to i'$ \u8868\u793a $j$ \u5728\u56de\u8def\u5185\u5219 $i$ \u5fc5\u987b\u5728\u56de\u8def\u5916\u3002\n+ $i' \\to j$ \u8868\u793a $i$ \u5728\u56de\u8def\u5916\u5219 $j$ \u5fc5\u987b\u5728\u56de\u8def\u5185\u3002\n+ $j' \\to i$ \u8868\u793a $j$ \u5728\u56de\u8def\u5916\u5219 $i$ \u5fc5\u987b\u5728\u56de\u8def\u5185\u3002\n\n\u7f29\u70b9\u540e\u5224\u65ad\u662f\u5426\u5b58\u5728 $i,i'$ \u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u82e5\u5b58\u5728\u5219 $G$ \u4e0d\u662f\u5e73\u9762\u56fe\u3002\n\n\u7136\u800c $M \\leq 10000$ \uff0c\u76f4\u63a5\u8fde\u8fb9\u4f1a\u7206\u70b8\u3002\u7528\u4e0a\u9762\u7684\u7ed3\u8bba $K \\leq 3V-6$ \u53ef\u4ee5\u7279\u5224\u6389\u4e0d\u53ef\u80fd\u6210\u4e3a\u5e73\u9762\u56fe\u7684\u60c5\u51b5\u3002\n\n---\n\n$\\text{Code}:$\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <stack>\n#define maxm 2000005\n#define Rint register int\n#define INF 0x3f3f3f3f\nusing namespace std;\ntypedef long long lxl;\n\ntemplate <typename T>\ninline T read()\n{\n\tT x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n\treturn x*f;\n}\n\nstruct edge\n{\n\tint u,v,next;\n\tinline bool operator < (const edge &T)const\n\t{\n\t\treturn u<T.u||(u==T.u&&v<T.v);\n\t}\n}e[maxm],eg[10005];\n\nint head[maxm],k;\n\ninline void add(int u,int v)\n{\n\te[k]=(edge){u,v,head[u]};\n\thead[u]=k++;\n}\n\nint n;\nint dfn[maxm],low[maxm],scc[maxm],dfs_cnt,scc_cnt;\nstack<int> S;\n\ninline void tarjan(int u)\n{\n\tS.push(u);\n\tdfn[u]=low[u]=++dfs_cnt;\n\tfor(int i=head[u];~i;i=e[i].next)\n\t{\n\t\tint v=e[i].v;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!scc[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(dfn[u]==low[u])\n\t{\n\t\tint x;\n\t\t++scc_cnt;\n\t\tdo\n\t\t{\n\t\t\tx=S.top();S.pop();\n\t\t\tscc[x]=scc_cnt;\n\t\t} while (x!=u);\n\t}\n}\n\nint N,M,G[205];\n\ninline void clear()\n{\n\tmemset(head,-1,sizeof(head));\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(low,0,sizeof(low));\n\tmemset(scc,0,sizeof(scc));\n\tk=scc_cnt=dfs_cnt=0;\n}\n\nint main()\n{\n\t// freopen(\"P3209.in\",\"r\",stdin);\n\tint T=read<int >();\n\twhile(T--)\n\t{\n\t\tN=read<int >(),M=read<int >();\n\t\tclear();\n\t\tfor(int i=1;i<=M;++i)\n\t\t{\n\t\t\tint u=read<int >(),v=read<int >();\n\t\t\teg[i]=(edge){u,v};\n\t\t}\n\t\tfor(int i=1;i<=N;++i)\n\t\t\tG[read<int >()]=i;\n\t\tif(M>3*N-6) {puts(\"NO\");continue;}\n\t\tfor(int i=1;i<=M;++i)\n\t\t{\n\t\t\teg[i].u=G[eg[i].u];\n\t\t\teg[i].v=G[eg[i].v];\n\t\t\tif(eg[i].u>eg[i].v) swap(eg[i].u,eg[i].v);\n\t\t}\n\t\tsort(eg+1,eg+M+1);\n\t\tfor(int i=1;i<M;++i)\n\t\t\tfor(int j=i+1;j<=M;++j)\n\t\t\t\tif(eg[i].u<eg[j].u&&eg[j].u<eg[i].v&&eg[i].v<eg[j].v)// \u5224\u65ad\u662f\u5426\u76f8\u4ea4\n\t\t\t\t\tadd(i+M,j),add(j+M,i),add(i,j+M),add(j,i+M);\n\t\tfor(int i=1;i<=(M<<1);++i)\n\t\t\tif(!dfn[i]) tarjan(i);\n\t\tbool flag=true;\n\t\tfor(int i=1;i<=M;++i)\n\t\t\tif(scc[i]==scc[i+M])\n\t\t\t{\n\t\t\t\tflag=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\tputs(flag?\"YES\":\"NO\");\n\t}\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1597839439,
        "uid": 224236,
        "name": "GoPoux4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]\u5e73\u9762\u56fe\u5224\u5b9a\u3011"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u628a\u8fd9\u4e2a\u54c8\u5bc6\u987f\u56de\u8def\u753b\u6210\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u6bcf\u4e00\u6761\u8fb9\u53ea\u6709\u5728\u5185\u548c\u5728\u5916\u4e24\u79cd\u60c5\u51b5\u3002\u9ed8\u8ba4\u6240\u6709\u8fb9\u90fd\u5728\u73af\u5185\u3002\u679a\u4e3e\u8fb9\uff0c\u5982\u679c\u8fb9\u4e0e\u8fb9\u4e4b\u95f4\u51fa\u73b0\u4e86\u51b2\u7a81\uff0c\u90a3\u4e48\u5c31\u4ee3\u8868\u6709\u4e00\u6761\u8fb9\u5728\u5185\uff0c\u6709\u4e00\u6761\u8fb9\u5728\u5916\u3002\u8fd9\u6837\u5c31\u6784\u5efa\u4e86\u4e00\u4e2a2-SAT\u6a21\u578b\uff0c\u76f4\u63a5\u6c42\u89e3\u5373\u53ef\u3002\n\n```pascal\n//2-SAT\u95ee\u9898\nType\n    road=record\n        toit,next:longint;\n    end;\nVar\n    roads:array[1..1000000] of road;\n    flag,low,dfn,list,stack,refer:array[1..1000000] of longint;\n    flag2:array[1..1000000] of boolean;\n    cnt,top,time,tot,m,n,i,t,tt:longint;\nFunction min(a,b:longint):longint;\n        begin\n                if a<b then exit(a);\n                exit(b);\n        end;\nProcedure add(u,v:longint);\n    begin\n        inc(cnt);\n        roads[cnt].toit:=v;\n        roads[cnt].next:=list[u];\n        list[u]:=cnt;\n    end;\nProcedure dfs(now:longint);\n    var\n        w:longint;\n    begin\n        flag[now]:=1;\n        inc(top);\n        stack[top]:=now;\n        inc(time);\n        dfn[now]:=time;\n        low[now]:=time;\n        w:=list[now];\n        while w<>0 do begin\n            if flag[roads[w].toit]=0 then dfs(roads[w].toit);\n            if flag[roads[w].toit]<2 then low[now]:=min(low[now],low[roads[w].toit]);\n            w:=roads[w].next;\n        end;\n        if dfn[now]=low[now] then begin\n            inc(tot);\n            while stack[top+1]<>now do begin\n                refer[stack[top]]:=tot;\n                flag[stack[top]]:=2;\n                dec(top);\n            end;\n        end;\n    end;\nFunction build:boolean;\n    var\n        a,b,pos:array[1..1000000] of longint;\n        //flag:array[1..1000000] of boolean;\n        i,t,j:longint;\n    begin\n        readln(n,m);\n        for i:=1 to m do begin\n            readln(a[i],b[i]);\n        end;\n        for i:=1 to n do begin\n            read(t);\n            pos[t]:=i;\n        end;\n        if m>3*n-6 then begin\n            writeln('NO');\n            exit(false);\n        end;\n        for i:=1 to m do begin\n            a[i]:=pos[a[i]];\n            b[i]:=pos[b[i]];\n            if a[i]>b[i] then begin\n                tt:=a[i];\n                a[i]:=b[i];\n                b[i]:=tt;\n            end;        \n        end;\n        for i:=1 to m do begin\n            if (a[i]+1=b[i]) or ((a[i]=1) and (b[i]=n)) then flag2[i]:=true;\n        end;\n        for i:=1 to m do if not(flag2[i]) then\n            for j:=1 to m do if (i<>j) and not(flag2[j]) then\n                if ((a[i]<a[j]) and (a[j]<b[i]) and (b[i]<b[j])) then begin\n                    add(i,j+m); //i\u4ee3\u8868i\u5728\u5185,i+m\u4ee3\u8868i\u5728\u5916\n                    add(j,i+m);\n                    add(i+m,j);\n                    add(j+m,i);\n                end;\n        exit(true);\n    end;\nProcedure work;\n    var\n        i:longint;\n    begin\n        time:=0;\n        for i:=1 to m do\n            if not(flag2[i]) then begin\n                if (dfn[i]=0) then dfs(i);\n                if (dfn[i+m]=0) then dfs(i+m);\n            end;\n            for i:=1 to m do begin\n                //if not(flag2[i]) then writeln(refer[i],' ',refer[i+m]);\n                if (refer[i]=refer[i+m]) and (not(flag2[i])) then begin\n                    //writeln(refer[i]);\n                    writeln('NO');\n                    exit;\n                end;\n            end;\n        writeln('YES');\n    end;\nBegin\n    readln(t);\n    for i:=1 to t do begin\n        fillchar(flag,sizeof(flag),0);\n        fillchar(flag2,sizeof(flag2),false);\n        fillchar(list,sizeof(list),0);\n        fillchar(refer,sizeof(refer),0);\n        fillchar(dfn,sizeof(dfn),0);\n        fillchar(low,sizeof(low),0);\n        top:=0;\n        time:=0;\n        tot:=0;\n        cnt:=0;\n        if build then work;\n    end;\nEnd.\n```",
        "postTime": 1478924115,
        "uid": 8876,
        "name": "hibiki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3209 \u3010[HNOI2010]PLANAR\u3011"
    }
]