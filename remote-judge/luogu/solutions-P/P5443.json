[
    {
        "content": "\u64cd\u4f5c\u5206\u5757+\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3002\n\n\u6211\u4eec\u5c06\u64cd\u4f5c\u8fdb\u884c\u5206\u5757\uff0c\u5bf9\u6bcf\u5757\u7684\u8be2\u95ee\u8fdb\u884c\u5904\u7406\u3002\u8bbe\u5757\u5927\u5c0f\u4e3a$S$\u3002\n\n\u5bf9\u5f53\u524d\u5757\u4e4b\u524d\u7684\u4fee\u6539\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u6389\u3002\n\n\u5bf9\u6bcf\u4e2a\u5757\uff0c\u90fd\u6709\u4e00\u90e8\u5206\u8fb9\u4f1a\u88ab\u4fee\u6539\uff0c\u8fd9\u4e9b\u8fb9\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7$S$\u3002\u800c\u5269\u4e0b\u7684\u8fb9\u4e0d\u4f1a\u88ab\u4fee\u6539\u3002\u8be2\u95ee\u7684\u4e2a\u6570\u4e5f\u4e0d\u4f1a\u8d85\u8fc7$S$\u3002\n\n\u5c06\u8be2\u95ee\u6309\u7167\u91cd\u91cf\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fb9\u4e5f\u6309\u91cd\u91cf\u9650\u5236\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u679a\u4e3e\u8be2\u95ee\uff0c\u628a\u6ee1\u8db3\u91cd\u91cf\u9650\u5236\u7684\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u8fb9\u52a0\u5165\u5373\u53ef\u3002\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u8003\u8651\u4f1a\u88ab\u4fee\u6539\u7684\u8fb9\u4ea7\u751f\u7684\u5f71\u54cd\u3002\u7531\u4e8e\u8fd9\u4e9b\u8fb9\u7684\u4e2a\u6570\u5e76\u4e0d\u591a\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8be2\u95ee\uff0c\u628a\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\u66b4\u529b\u63d2\u5165\u5373\u53ef\u3002\u5904\u7406\u5b8c\u8fd9\u4e2a\u8be2\u95ee\uff0c\u518d\u628a\u8fd9\u4e9b\u8fb9\u66b4\u529b\u5220\u6389\u5373\u53ef\u3002\n\n\u9700\u8981\u7528\u5230\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u3002\n\n\u6bcf\u4e2a\u5757\u5904\u7406\u7684\u590d\u6742\u5ea6\u4e3a$O(m\\log m+S^2\\log n)$\u3002\n\n\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u53d6\u5757\u5927\u5c0f\u5373\u53ef\u3002\u7406\u8bba\u590d\u6742\u5ea6$O(q\\sqrt q\\log m)$\u3002\n\n\u53ef\u4ee5\u628a$O(m\\log m)$\u7684\u6392\u5e8f\u7528\u5f52\u5e76\u4f18\u5316\u6389$\\log$\u3002\u5219\u7406\u8bba\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230$O(q\\sqrt{q\\log m})$\u3002\n\n~~\u770b\u8d77\u6765log\u653e\u6839\u53f7\u5916\u9762\u4e5f\u633a\u5feb\u7684\u554a~~\n\n## Code\uff1a\n```cpp\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int N=1e5+7,siz=1024;\nint n,m;\nstruct edge{\n\tint u,v,w,id;\n\tinline int operator<(const edge&rhs)const{return w>rhs.w;}\n}e[N];\ninline int cmp(const edge&a,const edge&b){return a.id<b.id;}\nint ans[N];\nstruct f_t{\n\tint bc,id,tim;\n\tinline int operator<(const f_t&rhs)const{return bc>rhs.bc;}\n};\nvector<f_t>M,Q;\nint q;\nint fa[N],sz[N],sta[N],top,vis[N],ys[N];\ninline int find(int x){return x==fa[x]?x:find(fa[x]);}\ninline void merge(int u,int v){\n\tu=find(u),v=find(v);\n\tif(u==v)return;\n\tif(sz[u]<sz[v])swap(u,v);\n\tsta[++top]=v;\n\tsz[u]+=sz[v],fa[v]=u;\n}\nvoid back(int lst){\n\twhile(top>lst){\n\t\tint v=sta[top--];\n\t\tsz[fa[v]]-=sz[v];\n\t\tfa[v]=v;\n\t}\n}\nvoid solve(){\n\tsort(e+1,e+m+1);\n\tsort(Q.begin(),Q.end());\n\tfor(int i=1;i<=m;++i)ys[e[i].id]=i;\n\tstatic vector<f_t>MM;MM.clear();\n\tfor(f_t i:M)vis[i.id]=-1,MM.push_back((f_t){e[ys[i.id]].w,i.id,0});\n\tfor(f_t i:M)MM.push_back(i);\n\tfor(int i=1;i<=n;++i)fa[i]=i,sz[i]=1;\n\ttop=0;\n\tfor(int i=0,it=1;i<Q.size();++i){\n\t\twhile(it<=m&&e[it].w>=Q[i].bc){\n\t\t\tif(!vis[e[it].id])merge(e[it].u,e[it].v);\n\t\t\t++it;\n\t\t}\n\t\tint last=top;\n\t\tfor(f_t a:MM)\n\t\tif(a.tim<=Q[i].tim)vis[a.id]=a.bc;\n\t\tfor(f_t a:M)\n\t\tif(vis[a.id]>=Q[i].bc)merge(e[ys[a.id]].u,e[ys[a.id]].v);\n\t\tans[Q[i].tim]=sz[find(Q[i].id)];\n\t\tback(last);\n\t}\n\tfor(f_t i:M)e[ys[i.id]].w=i.bc,vis[i.id]=0;\n\tM.clear(),Q.clear();\n}\nint main(){\n\tios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;++i)cin>>e[i].u>>e[i].v>>e[e[i].id=i].w;\n\tcin>>q;\n\tfor(int t=1;t<=q;++t){\n\t\tint op;f_t x;\n\t\tcin>>op>>x.id>>x.bc;\n\t\tx.tim=t;\n\t\tif(op==1)M.push_back(x);else Q.push_back(x);\n\t\tif(t%siz==0)solve();\n\t}\n\tif(q%siz)solve();\n\tfor(int i=1;i<=q;++i)if(ans[i])cout<<ans[i]<<'\\n';\n\treturn 0;\n}\n```",
        "postTime": 1562725084,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "\u611f\u8c22 @soar_unprecedentedly \u6307\u51fa\u7684\u4e00\u5904\u9519\u8bef\u4ee5\u53ca\u63d0\u4f9b\u7684\u66f4\u4f18\u89e3~\n\n### \u7b97\u6cd5$1$\uff1a \n\n\u8003\u8651\u6700\u66b4\u529b\u7684\u66b4\u529b\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4fee\u6539\uff0c\u76f4\u63a5\u4fee\u6539\u8fd9\u4e2a\u8fb9\u3002 \n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u679a\u4e3e\u6240\u6709\u8fb9\u3002 \n\n\u5982\u679c\u8fd9\u4e2a\u8fb9\u7684\u91cd\u91cf\u9650\u5236\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8be2\u95ee\u7684\u91cd\u91cf\uff0c\u90a3\u4e48\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u6700\u540e\u770b\u8be2\u95ee\u70b9\u6240\u5728\u7684\u5e76\u67e5\u96c6\u7684\u5927\u5c0f\u5c31\u597d\u4e86\u3002 \n\n\u590d\u6742\u5ea6$O(Qm\\alpha)$\n\n\u671f\u671b\u5f97\u5206\uff1a$13$\u5206\u3002 \n\n### \u7b97\u6cd5$2$\uff1a\n\n\u6211\u4eec\u8003\u8651\u5bf9\u6240\u6709\u8fb9\uff0c\u6240\u6709\u7684\u8be2\u95ee\u6392\u5e8f\uff08\u6839\u636e\u91cd\u91cf\u4ece\u5927\u5230\u5c0f\uff09\u3002\n\n\u6709\u8da3\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u4fee\u6539\u64cd\u4f5c\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u79bb\u7ebf\u628a\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\u7684\u65b9\u6cd5\u5b8c\u7f8e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u8fd9\u4e2a\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u5982\u679c\u6709\u4fee\u6539\u600e\u4e48\u529e\u5462\uff1f \n\n\u6211\u4eec\u5206\u4e24\u7c7b\u8fb9\u8ba8\u8bba\uff1a\u6709\u4fee\u6539\u7684\u8fb9\uff0c\u548c\u65e0\u4fee\u6539\u7684\u8fb9\u3002 \n\n\u6709\u4e9b\u8fb9\u662f\u6c38\u8fdc\u6ca1\u6709\u4fee\u6539\u7684\uff0c\u53ef\u4ee5\u5728\u79bb\u7ebf\u7684\u65f6\u5019\u76f4\u63a5\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u5bf9\u4e8e\u6709\u4fee\u6539\u7684\u8fb9\uff0c\u6211\u4eec\u5982\u4f55\u5904\u7406\uff1f\n\n\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u3002\u6211\u4eec\u679a\u4e3e\u6240\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u770b\u770b\u64cd\u4f5c\u65f6\u95f4\u662f\u5426\u5927\u4e8e\u5f53\u524d\u8be2\u95ee\u65f6\u95f4\u3002\n\n\u5982\u679c\u5927\u4e8e\uff0c\u4e0d\u505a\u5904\u7406\u3002\u5426\u5219\u4fee\u6539\u8fd9\u4e9b\u8fb9\u3002\n\n\u6700\u540e\u6839\u636e\u91cd\u91cf\u5927\u5c0f\u628a\u8fd9\u4e9b\u6709\u4fee\u6539\u7684\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u6700\u540e\u64a4\u9500\u4e00\u4e0b\u52a0\u5165\u5e76\u67e5\u96c6\u7684\u6709\u4fee\u6539\u7684\u8fb9\u5373\u53ef\u3002 \n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(Q\\log_2Q+m\\log_2m+Q(Q+Q\\log_2n))$\n\n\u671f\u671b\u5f97\u5206\uff1a$13$\u5206\u3002 \n\n### \u7b97\u6cd5$3$\uff1a\n\n\u7b97\u6cd5$1$\u548c\u7b97\u6cd5$2$\u7684\u74f6\u9888\u5f88\u663e\u7136\uff1a\u4e00\u4e2a\u679a\u4e3e\u4e86\u6240\u6709\u7684\u8fb9\uff0c\u4e00\u4e2a\u679a\u4e3e\u4e86\u6240\u6709\u7684\u64cd\u4f5c\u3002\n\n\u4e24\u4e2a\u7b97\u6cd5\u4e5f\u5404\u6709\u4f18\u52a3\uff1a\n\n\u7b97\u6cd5$1$\u5728\u8fb9\u5f88\u5c11\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u5feb\uff0c\u76f4\u63a5\u628a\u8fb9\u6539\u4e86\u3002 \n\n\u7b97\u6cd5$2$\u5728\u8be2\u95ee\u5f88\u5c11\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u5feb\uff0c\u800c\u4e14\u79bb\u7ebf\u4e86\uff0c\u53ea\u9700\u8981\u8003\u8651\u4fee\u6539\u8fc7\u7684\u8fb9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5747\u644a\u4e00\u4e0b\u4e24\u4e2a\u505a\u6cd5\u3002\n\n\u600e\u4e48\u5747\u644a\uff1f\n\n\u8003\u8651\u5206\u5757\u3002 \n\n\u5bf9\u4e8e\u6240\u6709\u8be2\u95ee\u5206\u5757\u3002$S$\u4e2a\u8be2\u95ee\u4e3a$1$\u5757\u3002\n\n\u5982\u4f55\u5bf9\u8be2\u95ee\u5757\u8fdb\u884c\u5904\u7406\uff1f \n\n\u5148\u5bf9\u7b2c$1$\u4e2a\u5757\u5185\u7684\u6240\u6709\u8be2\u95ee\u64cd\u4f5c,\u6240\u6709\u8fb9\u6309\u7167\u91cd\u91cf\u6392\u5e8f\uff08\u4ece\u5927\u5230\u5c0f\uff09\u3002\n\n\u7136\u540e\u6211\u4eec\u76f4\u63a5\u7167\u642c\u7b97\u6cd5$2$\u7684\u6d41\u7a0b\uff0c\u79bb\u7ebf\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u3002 \n\n\u5bf9\u4e8e\u8fd9$S$\u4e2a\u64cd\u4f5c\u65e0\u4fee\u6539\u7684\u8fb9\uff0c\u76f4\u63a5\u52a0\u5165\u5e76\u67e5\u96c6\u3002\n\n\u5bf9\u4e8e\u8fd9$S$\u4e2a\u64cd\u4f5c\u5185\u6709\u4fee\u6539\u7684\u8fb9\uff0c\u679a\u4e3e\u6240\u6709\u8fd9$S$\u4e2a\u64cd\u4f5c\u7684\u6240\u6709\u4fee\u6539\u64cd\u4f5c\u3002\u6839\u636e\u65f6\u95f4\u5224\u65ad\u8fd9\u4e9b\u8fb9\u7684\u91cd\u91cf\u3002\n\n\u7136\u540e\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u5f97\u5230\u7b54\u6848\uff0c\u518d\u64a4\u56de\uff0c\u8fdb\u884c\u4e0b\u4e00\u4e2a\u8be2\u95ee\u3002\n\n\u6700\u540e\u6211\u4eec\u50cf\u7b97\u6cd5$1$\u4e00\u6837\uff0c\u5904\u7406\u5b8c\u8fd9\u4e2a\u5757\u540e\uff0c\u6267\u884c\u8fd9\u4e2a\u5757\u7684\u6240\u6709\u4fee\u6539\u64cd\u4f5c\uff0c\u76f4\u63a5\u628a\u8fb9\u6743\u6539\u4e86\u3002\n\n\u7136\u540e\u8fdb\u884c\u7b2c$2$\u4e2a\u5757\u7684\u64cd\u4f5c\uff0c\u505a\u5b8c\u518d\u641e\u7b2c$3$\u4e2a\u5757...\u4ee5\u6b64\u7c7b\u63a8\u3002 \n\n\u6211\u4eec\u53d1\u73b0\u590d\u6742\u5ea6\u53d8\u5f97\u5f88\u6709\u610f\u601d\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5757\u5185\u6700\u591a\u53ea\u6709$S$\u4e2a\u4fee\u6539\u64cd\u4f5c\u3002 \n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\frac QS m\\log_2m+\\frac QS S^2\\log_2n)$\n\n\u5373$O(QS\\log_2n+\\frac {Qm\\log_2m}{S})$\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u61d2\u5f97\u7b97\u4e86\uff0c\u7279\u522b\u5947\u602a\uff0c\u597d\u50cf$S$\u53d6$\\sqrt{m\\log_2n}$\u8dd1\u7684\u98de\u5feb\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u5e38\u6570\u662f\u8dd1\u4e0d\u6ee1$\\log_2n$\u7684\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a100\u5206\u3002 \n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define ljc 998244353\nusing namespace std;\n#ifdef Fading\n#define gc getchar\n#endif\n#ifndef Fading\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\n#endif\ninline ll read(){\n    register ll x=0,f=1;char ch=gc();\n    while (!isdigit(ch)){if(ch=='-')f=-1;ch=gc();}\n    while (isdigit(ch)){x=(x<<3)+(x<<1)+ch-'0';ch=gc();}\n    return (f==1)?x:-x;\n}\nstruct edge{\n    int from,to,dis,id;\n}g[120001],g1[120001],g2[120001];\nint tot;\ninline void made(int from,int to,int dis,int id){\n    g[++tot].from=from;g[tot].to=to;g[tot].dis=dis;g[tot].id=id;\n}\ninline bool cmp(edge a,edge b){\n    return a.dis>b.dis;\n}\ninline bool cmpid(edge a,edge b){\n    return a.id<b.id;\n}\nstruct que{\n    int opt,id,W,num;\n}q[120001],cac1[120001],cac2[120001];\ninline bool cmp0(que a,que b){\n    return a.W>b.W;\n}\nint n,m,S,ans[120001],Id[120001],sz[120001],F[120001];\nint find(int u){\n    if (F[u]!=u) return find(F[u]);\n    else return u;\n}\nint sta[120001][2],top;\ninline void merge(int u,int v){\n    int fu=find(u),fv=find(v);\n    if (fu==fv) return;\n    if (sz[fu]<sz[fv]) swap(fu,fv);\n    F[fv]=fu;sz[fu]+=sz[fv];\n    sta[++top][0]=fu;sta[top][1]=fv;\n}\ninline void cancel(){\n    ll u=sta[top][0],v=sta[top--][1];\n    sz[u]-=sz[v];F[v]=v;\n}\nint cnt1,cnt2,D[120001];\nbool vis[120001];\nint all,dl[120001],Op[120001];\ninline void work(int sum){\n    cnt1=all=top=cnt2=0;\n    for (int i=1;i<=m;i++) vis[i]=0,D[i]=0,Id[g[i].id]=i;\n    for (int i=1;i<=sum;i++){\n        if (q[i].opt==1){\n            cac1[++cnt1]=q[i];\n            if (vis[Id[q[i].num]]) continue;\n            D[Id[q[i].num]]=g[Id[q[i].num]].dis;\n            vis[Id[q[i].num]]=1;\n            dl[++all]=Id[q[i].num];\n        }else{\n            cac2[++cnt2]=q[i];\n        }\n    }\n    for (int i=1;i<=n;i++) F[i]=i,sz[i]=1;\n    sort(cac2+1,cac2+1+cnt2,cmp0);\n    int pos=1;\n    for (int i=1;i<=cnt2;i++){\n        while (pos<=m&&g[pos].dis>=cac2[i].W){\n            if (!vis[pos]) merge(g[pos].from,g[pos].to);\n            pos++;\n        }\n        ll las=top;\n        for (int j=1;j<=cnt1;j++){\n            if (cac1[j].id<cac2[i].id){\n                D[Id[cac1[j].num]]=cac1[j].W;\n            }\n        }\n        for (int j=1;j<=all;j++){\n            if (D[dl[j]]>=cac2[i].W){\n                merge(g[dl[j]].from,g[dl[j]].to);\n            }\n            D[dl[j]]=g[dl[j]].dis;\n        }\n        ans[cac2[i].id]=sz[find(cac2[i].num)];\n        for (;las!=top;) cancel();\n    }\n    ll tot1=0,tot2=0;\n    for (int i=1;i<=sum;i++){\n        if (q[i].opt==1) g[Id[q[i].num]].dis=q[i].W; \n    }\n    for (int i=1;i<=m;i++){\n        if (vis[i]) g1[++tot1]=g[i];\n        else g[++tot2]=g[i]; \n    }\n    sort(g1+1,g1+1+tot1,cmp);\n    merge(g+1,g+1+tot2,g1+1,g1+1+tot1,g2+1,cmp); \n    for (int i=1;i<=m;i++) g[i]=g2[i];\n}\nsigned main(){\n    n=read(),m=read();\n    S=sqrt(m*log2(n));\n    for (int i=1;i<=m;i++){\n    \tint x=read(),y=read(),z=read();\n    \tmade(x,y,z,i);\n    }\n    int Q=read();\n    sort(g+1,g+1+m,cmp);\n    int cnt=0;\n    for (int i=1;i<=Q;i++){\n    \tq[++cnt].id=i;\n    \tint op=read();q[cnt].opt=op;\n    \tOp[i]=op;\n    \tif (op==1){\n    \t\tq[cnt].num=read(),q[cnt].W=read();\n        }else{\n    \t\tq[cnt].num=read(),q[cnt].W=read();\n        }\n        if (cnt==S) work(S),cnt=0;\n    }\n    if (cnt) work(cnt);\n    for (int i=1;i<=Q;i++){\n        if (Op[i]==2) printf(\"%d\\n\",ans[i]);\n    }\n    return 0;\n}\n\n\n```\n\n\u7b97\u6cd5$4$\uff1a\n\n\u611f\u8c22 @soar_unprecedentedly \u63d0\u4f9b\u505a\u6cd5~\n\n$\\log$\u5728\u5916\u9762\u8dd1\u4e0d\u5feb\uff0c\u600e\u4e48\u628a\u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6\u53bb\u6389\u5462\uff1f\n\n\u53d1\u73b0\u4e00\u6b21\u6700\u591a\u52a0\u5165$S$\u6761\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53bb\u6389\u5e26\u64a4\u9500\u5e76\u67e5\u96c6\uff0c\u6bcf\u4e00\u6b21\u52a0\u5165\u8fb9\u66b4\u529b dfs \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\frac QS m\\log_2m+\\frac QS S^2\\alpha)$\n\n\u5373$O(QS\\alpha+\\frac {Qm\\log_2m}{S})$\u3002\n\n$S$\u53d6$\\sqrt{m\\log_2m}$\u8dd1\u7684\u98de\u5feb\uff0c\u76f4\u63a5\u6700\u4f18\u89e3\u4e86\u3002\n\n\u4ee3\u7801\u5c31\u4e0d\u8d34\u4e86\u3002\n\n\n",
        "postTime": 1562770826,
        "uid": 20309,
        "name": "Fading",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "\u8fd9\u4e0d\u662f\u8ddf P3247 \u662f\u540c\u4e00\u4e2a\u9898\u5417\u2026\u2026\u505a\u4e86\u90a3\u9898\u5e94\u8be5\u5c31\u4f1a\u8fd9\u9898\u4e86\u5427\u3002\n\n\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8be2\u95ee\u7684\u8bdd\u6211\u4eec\u53ef\u4ee5\u66b4\u641c\u4e00\u904d\uff0c\u6216\u8005\u628a\u6240\u6709\u6743\u503c\u5927\u4e8e\u4ed6\u7684\u8fb9\u90fd\u4e22\u5230\u5e76\u67e5\u96c6\u91cc\uff0c\u7136\u540e\u770b\u8fd9\u4e2a\u70b9\u6240\u5728\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002\n\n\u5e26\u4e0a\u4fee\u6539\u7684\u8bdd\uff0c\u4e00\u4e2a\u4fee\u6539\u80fd\u5f71\u54cd\u5230\u7684\u662f\u65f6\u95f4\u5728\u4ed6\u4e4b\u540e\uff0c\u8fd9\u4e2a\u8fb9\u7684\u4e0b\u4e00\u4e2a\u4fee\u6539\u4e4b\u524d\uff0c\u5e76\u4e14\u6743\u503c\u5c0f\u4e8e\u7b49\u4e8e\u4ed6\u7684\u6240\u6709\u8be2\u95ee\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u7ebf\u6bb5\u6811\u5206\u6cbb\u4e22\u5230 kdt \u4e0a\u8dd1 kdt \u5206\u6cbb\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\sqrt m\\log m)$\uff08\u8ba4\u4e3a $m$ \u4e0e $q$ \u540c\u9636\uff0c$\\log m$ \u4e0e $\\log n$ \u540c\u9636\uff09\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 $O(m\\sqrt m)$\u3002\n\n\u7136\u800c\u6211\u4e0d\u4f1a kdt\u3002\u8fd9\u4e2a\u505a\u6cd5\u6211\u6ca1\u5199\u8fc7\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8fc7\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u65f6\u95f4\u8f74\u5206\u5757\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5757\u5185\u7684\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u52a0\u5165\u6ca1\u6709\u88ab\u4fee\u6539\u8fc7\u7684\u8fb9\uff0c\u518d\u52a0\u88ab\u4fee\u6539\u8fc7\u7684\u8fb9\u3002\u628a\u6240\u6709\u4e0d\u4f1a\u5728\u8fd9\u4e2a\u5757\u4e2d\u88ab\u4fee\u6539\u7684\u8fb9\u62ff\u51fa\u6765\u6309\u6743\u503c\u6392\u5e8f\uff0c\u628a\u8be2\u95ee\u4e5f\u62ff\u51fa\u6765\u6309\u6743\u503c\u6392\u5e8f\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u5f52\u5e76\u4e00\u4e0b\uff0c\u7136\u540e\u5904\u7406\u6bcf\u4e2a\u8be2\u95ee\u65f6\u66b4\u529b\u52a0\u5165\u6240\u6709\u5728\u8fd9\u4e2a\u5757\u5185\u4f1a\u88ab\u4fee\u6539\u7684\u8fb9\uff0c\u5e76\u56de\u9000\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u662f $O(\\dfrac{m^2\\log m}s+ms\\log m))$\uff0c\u53d6\u5757\u957f $s=\\sqrt m$ \u5f97\u5230\u4e00\u4e2a $O(m\\sqrt m\\log m)$ \u7b97\u6cd5\uff0c\u5982\u679c\u4f60\u5e38\u6570\u8ddf\u6211\u4e00\u6837\u5927\u90a3\u80af\u5b9a\u8fc7\u4e0d\u4e86\u3002\n\n\u4f18\u5316\u4e00\uff1a\u4e0a\u4e00\u4e2a\u5757\u548c\u8fd9\u4e00\u4e2a\u5757\u90fd\u6ca1\u6709\u88ab\u4fee\u6539\u8fc7\u7684\u8fb9\u5728\u4e0a\u4e00\u4e2a\u5757\u4e00\u5b9a\u5df2\u7ecf\u88ab\u6392\u597d\u5e8f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e0a\u4e00\u4e2a\u5757\u4fee\u6539\u8fc7\u4f46\u8fd9\u4e2a\u5757\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5f52\u5e76\u3002\u8fd9\u6837\u7684\u8bdd\u590d\u6742\u5ea6\u5176\u5b9e\u6ca1\u6709\u6539\u53d8\uff0c\u56e0\u4e3a\u53ef\u56de\u9000\u5e76\u67e5\u96c6\u7684\u65f6\u95f4\u5f00\u9500\u4e5f\u662f $\\dfrac{m^2\\log m}s$\uff0c\u4f46\u662f\u8fd9\u6837\u53ef\u4ee5\u4f18\u5316\u6389\u5f88\u5927\u5e38\u6570\u3002\u53e6\u5916\uff0c\u5982\u679c\u53d6 $s=\\sqrt{m\\log m}$\uff0c\u590d\u6742\u5ea6\u4e3a $O(m\\sqrt{m\\log m}\\log m)$\uff0c\u4f46\u5b9e\u9645\u8868\u73b0\u975e\u5e38\u4f18\u79c0\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u66b4\u529b\u52a0\u5165\u88ab\u4fee\u6539\u8fc7\u7684\u8fb9\u65f6\u5e38\u6570\u8fdc\u8fdc\u8dd1\u4e0d\u6ee1\u3002\n\n\u4f18\u5316\u4e8c\uff1a\u5e76\u67e5\u96c6\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u6309\u79e9\u5408\u5e76\uff0c\u7136\u540e\u5904\u7406\u88ab\u4fee\u6539\u8fc7\u7684\u8fb9\u65f6\uff0c\u53ef\u4ee5\u5728\u5e76\u67e5\u96c6\u7f29\u70b9\u7684\u57fa\u7840\u4e0a\u52a0\u8fb9\uff0c\u7136\u540e\u66b4\u641c\u5373\u53ef\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(\\dfrac{m^2\\log m}s+ms)$\uff0c\u5927\u529b\u89e3\u5f97 $s=\\sqrt{m\\log m}$ \u65f6\u6700\u4f18\uff0c\u590d\u6742\u5ea6 $O(m\\sqrt{m\\log m})$\u3002\n\n\u4f18\u5316\u4e09\uff1a\u5c31\u662f\u628a\u524d\u4e24\u4e2a\u4f18\u5316\u4e00\u8d77\u4e0a\uff0c\u6700\u540e\u590d\u6742\u5ea6\u4e3a $O(\\dfrac{m^2\\alpha(m)}s+ms)$\uff0c\u89e3\u5f97 $s=\\sqrt{m\\alpha(m)}$ \u65f6\u6700\u4f18\u590d\u6742\u5ea6\u4e3a $m\\sqrt{m\\alpha(m)}$\uff0c\u57fa\u672c\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6839\u53f7\u3002\n\n\u540e\u4e24\u4e2a\u4f18\u5316\u6211\u6ca1\u6709\u8fdb\u884c\u5b9e\u73b0\uff0c\u4e0d\u77e5\u9053\u5177\u4f53\u7684\u6548\u7387\u600e\u4e48\u6837\u3002\n\n\u4e0b\u9762\u662f\u4f18\u5316\u4e00\u7684\u4ee3\u7801\uff0c\u6211\u89c9\u5f97\u975e\u5e38\u6f02\u4eae\u3002\u4f46\u5728\u6d1b\u8c37\u4e0a\u65e0\u6cd5\u901a\u8fc7\uff0c\u5728 loj \u4e0a\u53ef\u4ee5\u901a\u8fc7\u3002\u5982\u679c\u5757\u957f\u53d6 $\\sqrt{m\\log m}$ \u5219\u5728\u6d1b\u8c37\u548c loj \u90fd\u53ef\u4ee5\u901a\u8fc7\u3002\n```cpp\n#include<algorithm>\n#include<vector>\n#include<cmath>\n#include<cctype>\n#include<cstdio>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e4+5,maxm=1e5+5,maxs=350;\nint n,m,q,u[maxm],v[maxm],d[maxm],t[maxs],b[maxs],r[maxs];\nbool vis[maxm];\nbool cmp1(int x,int y){\n\treturn d[x]>d[y];\n}\nint ans[maxs];\nbool cmp2(int x,int y){\n\treturn r[x]>r[y];\n}\nint fa[maxn],size[maxn];\nint findrt(int x){\n\treturn fa[x]==x?x:findrt(fa[x]);\n}\nint d2[maxm];\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tm=readint();\n\tfor(int i=1;i<=m;i++){\n\t\tu[i]=readint();\n\t\tv[i]=readint();\n\t\td[i]=readint();\n\t}\n\tq=readint();\n\tint s=sqrt(q);\n\tvector<int> e1,e2;\n\tfor(int i=1;i<=m;i++) e1.push_back(i);\n\tsort(e1.begin(),e1.end(),cmp1);\n\tfor(int i=0;i<(q-1)/s+1;i++){\n\t\tint len=i==(q-1)/s?q-i*s:s;\n\t\tfor(int j=0;j<len;j++){\n\t\t\tt[j]=readint();\n\t\t\tb[j]=readint();\n\t\t\tr[j]=readint();\n\t\t}\n\t\tfor(int j=0;j<len;j++) if(t[j]==1) vis[b[j]]=1;\n\t\tvector<int> e11,e12;\n\t\tfor(int j=0;j<(int)e1.size();j++) if(!vis[e1[j]]) e11.push_back(e1[j]);\n\t\tfor(int j=0;j<(int)e2.size();j++) if(!vis[e2[j]]) e12.push_back(e2[j]);\n\t\tsort(e12.begin(),e12.end(),cmp1);\n\t\te1.clear();\n\t\tint cur=0;\n\t\tfor(int j=0;j<(int)e12.size();j++){\n\t\t\twhile(cur<(int)e11.size()&&d[e11[cur]]>d[e12[j]]) e1.push_back(e11[cur++]);\n\t\t\te1.push_back(e12[j]);\n\t\t}\n\t\tfor(int j=cur;j<(int)e11.size();j++) e1.push_back(e11[j]);\n\t\te2.clear();\n\t\tfor(int j=1;j<=m;j++) if(vis[j]) e2.push_back(j);\n\t\tvector<int> q2;\n\t\tfor(int j=0;j<len;j++) if(t[j]==2) q2.push_back(j);\n\t\tsort(q2.begin(),q2.end(),cmp2);\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tfa[j]=j;\n\t\t\tsize[j]=1;\n\t\t}\n\t\tcur=0;\n\t\tfor(int j=0;j<(int)q2.size();j++){\n\t\t\twhile(cur<(int)e1.size()&&d[e1[cur]]>=r[q2[j]]){\n\t\t\t\tint x=findrt(u[e1[cur]]),y=findrt(v[e1[cur]]);\n\t\t\t\tcur++;\n\t\t\t\tif(x==y) continue;\n\t\t\t\tif(size[x]>size[y]) swap(x,y);\n\t\t\t\tfa[x]=y;\n\t\t\t\tsize[y]+=size[x];\n\t\t\t}\n\t\t\tfor(int k=0;k<(int)e2.size();k++) d2[e2[k]]=d[e2[k]];\n\t\t\tfor(int k=0;k<q2[j];k++) if(t[k]==1) d2[b[k]]=r[k];\n\t\t\tvector<int> res;\n\t\t\tfor(int k=0;k<(int)e2.size();k++) if(d2[e2[k]]>=r[q2[j]]){\n\t\t\t\tint x=findrt(u[e2[k]]),y=findrt(v[e2[k]]);\n\t\t\t\tif(x==y) continue;\n\t\t\t\tif(size[x]>size[y]) swap(x,y);\n\t\t\t\tfa[x]=y;\n\t\t\t\tsize[y]+=size[x];\n\t\t\t\tres.push_back(x);\n\t\t\t}\n\t\t\tans[q2[j]]=size[findrt(b[q2[j]])];\n\t\t\tfor(int k=(int)res.size()-1;k>=0;k--){\n\t\t\t\tint x=res[k];\n\t\t\t\tsize[fa[x]]-=size[x];\n\t\t\t\tfa[x]=x;\n\t\t\t}\n\t\t}\n\t\tfor(int j=0;j<len;j++) if(t[j]==2) printf(\"%d\\n\",ans[j]);\n\t\tfor(int j=0;j<len;j++) if(t[j]==1) vis[b[j]]=0;\n\t\tfor(int j=0;j<len;j++) if(t[j]==1) d[b[j]]=r[j];\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1594296173,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "APIO\u573a\u5916\u9009\u624b\u6ca1\u4e8b\u4f11\u95f2\u505a\u9898\u3002\uff08\u770b\u4e86yyb\u7684\u9898\u89e3\u624d\u628a\u8fd9\u9898\u505a\u51fa\u6765\uff09          \n\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5206\u5757\uff0c\u628a\u6bcf$\\text{SZ}$\u4e2a\u64cd\u4f5c\u5206\u62101\u7ec4\uff0c\u91cc\u9762\u5927\u6982\u67092\u7c7b\uff1a**\u6ca1\u88ab\u4fee\u6539\u8fc7\u7684\u548c\u88ab\u4fee\u6539\u8fc7\u7684\u3002**   \n\u63a5\u7740\u5bf9\u5757\u5185\u8be2\u95ee\u8fdb\u884c\u79bb\u7ebf\u3002    \n\u5bf9\u4e8e\u6ca1\u6709\u4fee\u6539\u8fc7\u7684\uff1a\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6392\u5e8f\u7136\u540e\u628a\u4ed6\u4eec\u52a0\u5165\u5e76\u67e5\u96c6\u3002     \n\u5bf9\u4e8e\u4fee\u6539\u8fc7\u7684\uff0c\u6211\u4eec\u770b\u4ed6\u7684\u65f6\u95f4\u662f\u5426\u5927\u4e8e\u5f53\u524d\u64cd\u4f5c\u7684\u65f6\u95f4\uff0c\u5982\u679c\u5927\u4e8e\u5219\u52a0\u5165\u539f\u6765\u7684\u6743\u503c\uff0c\u5982\u679c\u5c0f\u4e8e\u5219\u7528\u4fee\u6539\u540e\u7684\u6743\u503c\u3002  \n\u6700\u540e\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u67e5\u4e00\u4e0b\u8fde\u901a\u5757\u7684\u5927\u5c0f\u3002    \n\u518d\u6ce8\u610f\u4e00\u70b9\uff0c\u56e0\u4e3a\u8fd9\u91cc\u7684\u5e76\u67e5\u96c6\u662f\u652f\u6301\u64a4\u56de\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\u3002     \n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\n\nconst int maxm = 1e5 + 10;\n\ninline void _swap(int& a,int& b) { a ^= b ^= a ^= b; }\ntemplate<class T> inline void read(T& res) {\n    res = 0;  char ch = getchar();  bool neg = 0;\n    while(!isdigit(ch))\n        neg |= ch == '-', ch = getchar();\n    while(isdigit(ch))\n        res = (res << 1) + (res << 3) + (ch & 15), ch = getchar();\n    if(neg)\n        res = -res; \n}\n\nint n, m, i, j, k, tote, totq, top, lastop, SZ;  \nint fa[maxm], sz[maxm], id[maxm], ans[maxm], r[maxm];  \nstd::pair<int,int> sta[maxm];  \n\nint find(int u) { return u == fa[u] ? u : find(fa[u]); }\ninline void Union(int u,int v) {\n    int ru = find(u), rv = find(v);\n    if(ru == rv)\n        return;\n    if(sz[ru] < sz[rv])\n        _swap(ru,rv);\n    fa[rv] = ru;  sz[ru] += sz[rv];\n    sta[++top] = std::make_pair(ru,rv);  \n}\n\nbool vis[maxm];  \nstruct edge {\n    int u, v, w, id;  \n    edge() { u = v = w = id = 0; }\n    edge(int _u,int _v,int _w,int _id) {\n        u = _u;  v = _v;  w = _w;  id = _id;\n    }\n    inline friend bool operator < (edge a,edge b) {\n        if(a.w != b.w)\n            return a.w > b.w;\n        else\n            return a.id < b.id;    \n    }\n} e[maxm], e1[maxm], e2[maxm];\nstruct node {\n    int id, t, b, r;  \n    node() { id = t = b = r = 0; }\n    node(int _id,int _t,int _b,int _r) {\n        id = _id;  t = _t;  b = _b;  r = _r;\n    }  \n    inline friend bool operator < (node a,node b) {\n        return a.b > b.b;  \n    }\n} Q[maxm], x[maxm], y[maxm];  \n\ninline void solve() {\n    memset(vis,0,sizeof(vis));  top = lastop = 0;\n    for(int i = 1;i <= n;i++)\n        fa[i] = i, sz[i] = 1;\n    int tot1 = 0, tot2 = 0;\n    for(int i = 1;i <= totq;i++) {\n        if(Q[i].t == 1)\n            vis[ Q[i].b ] = 1, x[++tot1] = Q[i];\n        else\n            y[++tot2] = Q[i];\n    }\n    std::sort(y + 1,y + tot2 + 1);\n    for(int i = 1;i <= m;i++)\n        id[ e[i].id ] = i;\n    int j = 1;\n    for(int i = 1;i <= tot2;i++) {\n        while(j <= m && e[j].w >= y[i].b) {\n            if(!vis[ e[j].id ])\n                Union(e[j].u,e[j].v);\n            j++;\n        }\n        lastop = top;\n        for(int j = 1;j <= tot1;j++)\n            r[ x[j].b ] = e[ id[ x[j].b ] ].w;\n        for(int j = 1;j <= tot1;j++)\n            if(x[j].id < y[i].id)\n                r[ x[j].b ] = x[j].r;  \n        for(int j = 1;j <= tot1;j++)\n            if(r[ x[j].b ] >= y[i].b)\n                Union(e[ id[ x[j].b ] ].u,e[ id[ x[j].b ] ].v);\n        ans[ y[i].id ] = sz[ find(y[i].r) ];\n        while(top > lastop) {\n            int u = sta[top].first, v = sta[top].second;\n            top--;\n            fa[v] = v;\n            sz[u] -= sz[v];  \n        }\n    }\n    for(int i = 1;i <= tot1;i++)\n        e[ id[ x[i].b ] ].w = x[i].r; \n    tot1 = tot2 = 0;\n    for(int i = 1;i <= m;i++) {\n        if(vis[ e[i].id ])\n            e1[++tot1] = e[i];\n        else\n            e[++tot2] = e[i];\n    }\n    std::sort(&e1[1],&e1[tot1 + 1]);\n    std::merge(&e[1],&e[tot2 + 1],&e1[1],&e1[tot1 + 1],&e2[1]);\n    for(int i = 1;i <= m;i++)\n        e[i] = e2[i];  \n}\n\nint main() {\n    SZ = 500;   \n    read(n);  read(m);\n    for(int i = 1, u, v, w;i <= m;i++)\n        read(u), read(v), read(w), e[i] = edge(u,v,w,i);   \n    std::sort(&e[1],&e[m + 1]);  \n    int q;  read(q);\n    for(int i = 1, op, x, y;i <= q;i++) {\n        read(op);  read(x);  read(y);\n        if(op == 2)\n            _swap(x,y);\n        Q[++totq] = node(i,op,x,y);  \n        if(totq == SZ)\n            solve(), totq = 0;   \n    } \n    if(totq)\n        solve();\n    for(int i = 1;i <= q;i++)\n        if(ans[i])\n            printf(\"%d\\n\",ans[i]);\n    return 0;  \n}\n```\n",
        "postTime": 1562735001,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "> ### [\u6d1b\u8c37\u9898\u76ee\u9875\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P5443)\n\n>\u9898\u610f\u89c1\u6d1b\u8c37\u3002\n\n\uff08\u4ee5\u4e0b\u8ba4\u4e3a\u6240\u6709 $\\log$ \u540c\u9636\uff0c\u7528 $\\log n$ \u8868\u793a\uff09\n\n\u9996\u5148\u5728\u6211\u8ba4\u77e5\u8303\u56f4\u5185\u4f3c\u4e4e\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u56fe\u4e0a\u8be2\u95ee\u9898\u90fd\u6ca1\u6709 polylog \u505a\u6cd5\u3002\u5148\u6765\u8003\u8651\u66b4\u529b\u3002\n\n\u5148\u4e0a\u4e00\u4e2a**\u90fd\u4f1a\u7684\u66b4\u529b\uff1a\u4fee\u6539\u5c31\u76f4\u63a5\u6539\uff0c\u67e5\u8be2\u5c31\u628a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u8fb9\u8fde\u8d77\u6765\u5efa\u51fa\u4e00\u5f20\u56fe\u8dd1 DFS\u3002$\\mathrm O(qm)$\u3002\n\n\u518d\u8003\u8651\u4e00\u4e2a\u7a0d\u5fae\u7ecf\u8fc7\u5927\u8111\u7684\u60f3\u6cd5\u3002\u5047\u5982\u95ee\u9898\u662f\u9759\u6001\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u8fb9\u548c\u6240\u6709\u8be2\u95ee\u6392\u4e2a\u5e8f\uff0c\u4f7f\u5f97\u5728\u4e4b\u524d\u6709\u7684\u8fb9\u4e4b\u540e\u4e00\u5b9a\u6709\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5 two-pointers \u5730\u9012\u63a8\u5efa\u56fe\u4e86\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u5373\u53ef\u3002\u4f46\u662f\u6709\u4fee\u6539\u600e\u4e48\u529e\u5462\uff1f\u4f9d\u7136\u6392\u5e8f\uff0c\u53ea\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4fee\u6539\u7684\u8fb9\u6392\u5e8f\u6309\u4e0a\u8ff0\u65b9\u6cd5\u52a0\uff0c\u6709\u4fee\u6539\u7684\u8fb9\u7684\u8bdd\u5c31\u628a\u4fee\u6539\u5b83\u7684\u64cd\u4f5c\u6709\u5e8f\u5730\u5b58\u4e0b\u6765\uff0c\u6bcf\u6b21\u67e5\u8be2\u5c31\u4e8c\u5206\u67e5\u627e\u51fa\u6bcf\u6761\u6709\u4fee\u6539\u7684\u8fb9\u6700\u540e\u4e00\u6b21\u4fee\u6539\u5e76\u7b26\u5408\u6761\u4ef6\u5c31\u52a0\u5165\u5e76\u67e5\u96c6\uff0c\u5f97\u51fa\u7b54\u6848\u540e\u64a4\u9500\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathrm O\\!\\left(m\\log n+q^2\\log n\\right)$\u3002\n\n\u4e8b\u5b9e\u4e0a\u8fd9\u4e24\u79cd\u66b4\u529b\u5e76\u4e0d\u80fd\u89c6\u4f5c\u5e76\u5217\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u66b4\u529b\u4e00\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u4ec5\u4e0e $m$ \u76f8\u5173\uff0c\u66b4\u529b\u4e8c\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u4ec5\u4e0e $q$ \u76f8\u5173\uff0c\u4f46\u662f\u66b4\u529b\u4e8c\u8fd8\u6709\u4e00\u4e2a\u5355\u72ec\u7684 $m$\uff0c\u800c\u4e14\u8fd9\u4e2a $m$ \u548c\u66b4\u529b\u4e00\u91cc\u7684 $m$ \u662f\u505a\u7684\u540c\u6837\u7684\u5de5\u4f5c\uff1a\u5f80\u56fe\u91cc\u52a0\u8fb9\u3002\u5982\u679c\u628a\u66b4\u529b\u4e00\u7684 DFS \u4e5f\u770b\u6210\u5e76\u67e5\u96c6\u7684\u8bdd\uff0c\u5b8c\u5168\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u66b4\u529b\u4e8c\u662f\u4e00\u4e9b\u8fde\u7eed\u7684\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\u6392\u5e8f\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u64cd\u4f5c\u5206\u6210\u82e5\u5e72\u6bb5\u62b1\u56e2\u53d6\u6696\uff0c\u66b4\u529b\u4e8c\u672c\u8d28\u4e0a\u662f $1$ \u6bb5\uff0c\u800c\u66b4\u529b\u4e00\u662f $q$ \u6bb5\u3002\n\n\u663e\u7136\u8fd9\u4e24\u79cd\u5206\u6bb5\u65b9\u5f0f\u90fd\u592a\u6781\u7aef\u4e86\u3002\u4e0d\u59a8\u5f3a\u884c\u4ee4\u6bcf\u6bb5\u5927\u5c0f\u76f8\u7b49\uff0c\u8fd9\u6837\u5c31\u6709\u4e86\u5206\u5757\u7684\u60f3\u6cd5\uff1a\u6bcf\u6bb5 $sz1$ \u4e2a\u64cd\u4f5c\uff0c\u5171 $\\mathrm O\\!\\left(\\dfrac q{sz1}\\right)$ \u6bb5\u3002\u8fd9\u6837\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u662f $\\mathrm O\\!\\left(\\dfrac q{sz1}(m\\log n+sz1^2\\log n)\\right)=\\mathrm O\\!\\left(\\dfrac{qm\\log n}{sz1}+q\\cdot sz1\\log n\\right)$ \u3002\u6839\u636e\u5747\u503c\u4e0d\u7b49\u5f0f\uff0c$sz1=\\sqrt m$ \u65f6\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6700\u4f18\u4e3a $\\mathrm O(q\\sqrt m\\log n)$\uff0c\u5982\u679c\u4f60\u5e38\u6570\u8ddf\u6211\u4e00\u6837\u5927\u5c31\u522b\u60f3\u4e86\u8001\u8001\u5b9e\u5b9e\u4f18\u5316\u5427\uff0c\u5982\u679c\u4f60\u5e38\u6570\u8ddf fz \u4e00\u6837\u5c0f\u53ef\u4ee5\u8003\u8651\u5361\u8fc7\u53bb\u3002\n\n\u8003\u8651\u4f18\u5316\u3002\u63a5\u4e0b\u6765\u5206\u6790\u590d\u6742\u5ea6\u7684\u65f6\u5019\u4e0d\u8003\u8651\u7ebf\u6027\u548c\u7ebf\u6027\u4e58\u4ee5 $\\log$ \u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bf9\u590d\u6742\u5ea6\u7684\u5f71\u54cd\u5b9e\u5728\u662f\u5fae\u4e4e\u5176\u5fae\u3002\u628a\u5269\u4e0b\u6765\u7684\u64cd\u4f5c\u90fd\u62ce\u51fa\u6765\u6574\u7406\u4e00\u904d\u3002\n\n1. \u5c06\u6ca1\u6709\u4fee\u6539\u7684\u8fb9\u6392\u5e8f\uff1a\u6bcf\u5757\u90fd\u8981\u6392\u4e00\u904d\uff0c$\\mathrm O\\!\\left(\\dfrac{qm\\log n}{sz1}\\right)$\uff1b\n1. \u5c06\u6ca1\u6709\u4fee\u6539\u7684\u8fb9\u52a0\u5165\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff1a\u6bcf\u5757\u90fd\u8981\u52a0\u4e00\u904d\uff0c$\\mathrm O\\!\\left(\\dfrac{qm\\log n}{sz1}\\right)$\uff1b\n1. \u5c06\u6709\u4fee\u6539\u7684\u8fb9\u52a0\u5165\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\uff1a$\\mathrm O\\!\\left(q\\cdot sz1\\log n\\right)$\u3002\n\n\u8003\u8651\u64cd\u4f5c $1$\u3002\u6ce8\u610f\u5230\u8fd9\u4e00\u5757\u548c\u4e0a\u4e00\u5757\u90fd\u6ca1\u6709\u4fee\u6539\u7684\u8fb9\u4e00\u5b9a\u662f\u6392\u597d\u5e8f\u7684\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4e0a\u4e00\u5757\u6709\u4fee\u6539\u8fd9\u4e00\u5757\u6ca1\u6709\u4fee\u6539\u7684\u8fb9\u62ce\u51fa\u6765\u6392\u5e8f\u7136\u540e\u548c\u4e4b\u524d\u90a3\u4e2a\u5f52\u5e76\u4e00\u4e0b\u5373\u53ef\u3002\u800c\u7b2c\u4e8c\u7c7b\u90a3\u79cd\u8fb9\u5355\u5757\u53ea\u80fd\u6709 $\\mathrm O(sz1)$ \u6761\uff0c\u603b\u5171\u5c31\u662f $\\mathrm O(q)$ \u6761\u3002\u4e8e\u662f\u64cd\u4f5c $1$ \u7684 $\\log$ \u6ca1\u4e86\u3002\u7136\u9e45\u590d\u6742\u5ea6\u6ca1\u6709\u53d8\uff0c\u56e0\u4e3a\u4e0b\u9762\u6709\u4e2a\u590d\u6742\u5ea6\u4e00\u6837\u7684\u64cd\u4f5c\uff08\u60b2\uff09\n\n\u8003\u8651\u64cd\u4f5c $2$\u3002\u663e\u7136\u8fd9\u4e00\u90e8\u5206\u662f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u64a4\u9500\u7684\uff0c\u4e8e\u662f\u8fd9\u4e00\u90e8\u5206\u6539\u5230\u666e\u901a\u5e76\u67e5\u96c6\u6a21\u5f0f\uff0c\u8def\u5f84\u538b\u7f29 + \u542f\u53d1\u5f0f\u5408\u5e76\u53ef\u4ee5\u53d8 $\\log$ \u4e3a $\\alpha$\u3002\u81f3\u6b64\u603b\u590d\u6742\u5ea6\u964d\u5230\u4e86 $\\mathrm O\\!\\left(q\\sqrt{m\\alpha(n)\\log n}\\right)$\u3002~~\uff08\u8fd8\u662f\u5f88\u5927\uff09~~\n\n\u8003\u8651\u64cd\u4f5c $3$\u3002\u53ef\u4ee5\u5e76\u67e5\u96c6\u7f29\u70b9\uff0c\u7136\u540e\u66b4\u529b\u8fde\u8fb9\u8dd1DFS\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u663e\u7136\u662f\u5c11\u4e86\u4e00\u4e2a $\\log$ \u4e86\u7684\u3002\u81f3\u6b64\uff0c\u4ee4 $sz1=\\sqrt{m\\alpha(n)}$ \u5373\u53ef\u62e5\u6709 $\\mathrm O\\!\\left(q\\sqrt{m\\alpha(n)}\\right)$ \u7684\u603b\u590d\u6742\u5ea6\u3002\n\n\u53ef\u628a\u6211\u7ed9\u5361\u5e38\u5361\u6b7b\u4e86\u3002\u4eba\u50bb\u5e38\u6570\u5927\u5c31\u662f\u6307\u6211\u5427\u3002\u90bb\u63a5\u8868\u9700\u8981\u7528\u94fe\u5f0f\u524d\u5411\u661f\u3002\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define X first\n#define Y second\n#define pb push_back\nconst int N=50000,M=100000,QU=100000;\nint n,m,qu;\nint a[M+1],b[M+1],w[M+1];\nstruct query{int tp,x,y;}qry[QU+1];\nint ans[QU+1];\nvector<int> chged,unchged;\nint las_unchged[M+1];\nvector<int> chgid[M+1];\nvector<int> ask;\nbool cmp(int x,int y){return qry[x].y>qry[y].y;}\nbool cmp0(int x,int y){return w[x]>w[y];}\nstruct ufset{\n\tint fa[N+1],sz[N+1];\n\tvoid init(){\n\t\tfor(int i=1;i<=n;i++)fa[i]=0,sz[i]=1;\n\t}\n\tint root(int x){return fa[x]?fa[x]=root(fa[x]):x;}\n\tvoid mrg(int x,int y){\n\t\tx=root(x),y=root(y);\n\t\tif(x==y)return;\n\t\tif(sz[x]>sz[y])swap(x,y);\n\t\tfa[x]=y,sz[y]+=sz[x];\n\t}\n\tint _sz(int x){return sz[x];}\n}ufs;\nstruct addedge{\n\tint sz,head[N+1],nxt[2*M+1],val[2*M+1];\n\tvoid init(){sz=0;}\n\tvoid ae(int x,int y){\n\t\tval[++sz]=y;nxt[sz]=head[x];head[x]=sz;\n\t}\n}nei;\nvector<int> cc;\nbool vis[N+1];\nint dfs(int x){\n\tvis[x]=true;\n\tcc.pb(x);\n\tint res=ufs._sz(x);\n\tfor(int i=nei.head[x];i;i=nei.nxt[i]){\n\t\tint y=nei.val[i];\n\t\tif(vis[y])continue;\n\t\tres+=dfs(y);\n\t}\n\treturn res;\n}\nint main(){\n//\tfreopen(\"C:\\\\Users\\\\chenx\\\\OneDrive\\\\\u684c\u9762\\\\06.in\",\"r\",stdin);\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)scanf(\"%d%d%d\",a+i,b+i,w+i);\n\tcin>>qu;\n\tfor(int i=1;i<=qu;i++)scanf(\"%d%d%d\",&qry[i].tp,&qry[i].x,&qry[i].y);\n\tint sz1=sqrt((m+1)*4);\n\tfor(int i=1,ie;i<=qu;i=ie+1){\n\t\tie=min(qu,i+sz1-1);\n\t\tmemset(las_unchged,0,sizeof(las_unchged));\n\t\tfor(int j=0;j<unchged.size();j++)las_unchged[unchged[j]]=1;\n\t\tchged.clear();ask.clear();\n\t\tfor(int j=1;j<=m;j++)chgid[j].clear();\n\t\tfor(int j=i;j<=ie;j++)\n\t\t\tif(qry[j].tp==1){\n\t\t\t\tif(chgid[qry[j].x].empty())chged.pb(qry[j].x);\n\t\t\t\tchgid[qry[j].x].pb(j);\n\t\t\t}\n\t\t\telse ask.pb(j);\n\t\tsort(ask.begin(),ask.end(),cmp);\n\t\tvector<int> v,v0;\n\t\tfor(int j=1;j<=m;j++)if(chgid[j].empty()){\n\t\t\tlas_unchged[j]++;\n\t\t\tif(las_unchged[j]==1)v.pb(j);\n\t\t}\n\t\tsort(v.begin(),v.end(),cmp0);\n\t\tfor(int j=0;j<unchged.size();j++)if(las_unchged[unchged[j]]==2)v0.pb(unchged[j]);\n\t\tunchged.clear();\n\t\tint now1=-1,now2=-1;\n\t\twhile(now1+1<v.size()||now2+1<v0.size()){\n\t\t\tif(now1+1==v.size()||now2+1<v0.size()&&cmp0(v0[now2+1],v[now1+1]))unchged.pb(v0[++now2]);\n\t\t\telse unchged.pb(v[++now1]);\n\t\t}\n\t\tufs.init();\n\t\tint now=-1;\n\t\tfor(int j=0;j<ask.size();j++){\n\t\t\twhile(now+1<unchged.size()&&qry[ask[j]].y<=w[unchged[now+1]])\n\t\t\t\tnow++,ufs.mrg(a[unchged[now]],b[unchged[now]]);\n\t\t\tnei.init();\n\t\t\tfor(int k=0;k<chged.size();k++){\n\t\t\t\tint fd=lower_bound(chgid[chged[k]].begin(),chgid[chged[k]].end(),ask[j])-chgid[chged[k]].begin()-1;\n\t\t\t\tint w0=fd==-1?w[chged[k]]:qry[chgid[chged[k]][fd]].y;\n\t\t\t\tif(qry[ask[j]].y>w0)continue; \n\t\t\t\tint ar=ufs.root(a[chged[k]]),br=ufs.root(b[chged[k]]);\n\t\t\t\tnei.ae(ar,br),nei.ae(br,ar);\n\t\t\t\t}\n\t\t\tans[ask[j]]=dfs(ufs.root(qry[ask[j]].x));\n\t\t\tfor(int k=0;k<chged.size();k++)nei.head[ufs.root(a[chged[k]])]=nei.head[ufs.root(b[chged[k]])]=0;\n\t\t\tfor(int k=0;k<cc.size();k++)vis[cc[k]]=false;\n\t\t\tcc.clear();\n\t\t}\n\t\tfor(int j=i;j<=ie;j++)if(qry[j].tp==1)w[qry[j].x]=qry[j].y;\n\t}\n\tfor(int i=1;i<=qu;i++)if(qry[i].tp==2)printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1597402603,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "\u6d1b\u8c37 P5443 - \u6865\u6881"
    },
    {
        "content": "\u8003\u8651\u5047\u5982\u6ca1\u6709\u4fee\u6539\u600e\u4e48\u505a\u3002\n\n\u663e\u7136\u6ca1\u6709\u4fee\u6539\u7684\u8bdd\u8fd9\u662f\u4e00\u4e2a\u6c34\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u7528 $Kruscal$ \u91cd\u6784\u6811\u6216\u8005\u628a\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u7136\u540e\u6309\u7167\u8be2\u95ee\u7684\u6743\u503c\u6392\u5e8f\u52a8\u6001\u52a0\u8fb9\u8f93\u51fa\u5e76\u67e5\u96c6\u5927\u5c0f\u5373\u53ef\u3002\n\n\u4f46\u662f\u5e26\u4e86\u4fee\u6539\u540e\uff0c\u8003\u8651\u5bf9\u4e8e\u64cd\u4f5c\u5206\u5757\u3002\u5047\u8bbe\u6211\u4eec\u628a $B$ \u4e2a\u64cd\u4f5c\u5f53\u6210\u4e00\u4e2a\u5757\u6765\u5904\u7406\uff0c\u4e5f\u5c31\u662f\u6bcf $B$ \u4e2a\u64cd\u4f5c\u6211\u4eec\u5904\u7406\u4e00\u6b21\u8be2\u95ee\u3002\n\n\u7136\u540e\u6211\u4eec\u4e00\u5171\u8981\u5904\u7406 $\\frac{q}{B}$ \u6b21\u3002\n\n\u6bcf\u6b21\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u88ab\u6539\u53d8\u7684\u8fb9\u7684\u6570\u91cf\u80af\u5b9a\u4e0d\u8d85\u8fc7 $B$ \u6761\uff08\u56e0\u4e3a\u4e00\u5171\u624d $B$ \u4e2a\u64cd\u4f5c\uff09\uff0c\u7136\u540e\u6211\u4eec\u628a\u8fd9\u4e9b\u88ab\u64cd\u4f5c\u5230\u7684\u8fb9\u62ff\u4e0b\u6765\u3002\u518d\u628a\u6ca1\u6709\u4fee\u6539\u5230\u7684\u8fb9\u6309\u7167\u627f\u91cd\u80fd\u529b\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e00\u4e0b\uff0c\u8fd9 $B$ \u4e2a\u64cd\u4f5c\u91cc\u9762\u7684\u8be2\u95ee\u6211\u4eec\u4e5f\u79bb\u7ebf\u4e0b\u6765\u6309\u7167\u8f66\u8f86\u91cd\u91cf\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u6ca1\u6709\u88ab\u4fee\u6539\u5230\u7684\u8fb9\u6211\u4eec\u5c31\u6309\u7167\u6ca1\u6709\u4fee\u6539\u7684\u65b9\u6cd5\u505a\u3002\u5bf9\u4e8e\u88ab\u4fee\u6539\u5230\u7684\u8fb9\u6211\u4eec\u5c31\u5224\u65ad\u6709\u591a\u5c11\u6761\u8fb9\u4f1a\u5f71\u54cd\u67d0\u4e00\u6b21\u7684\u8be2\u95ee\uff08\u9700\u8981\u6bcf\u4e2a\u8be2\u95ee\u524d\u9762\u7684\u64cd\u4f5c\u6709\u54ea\u4e9b\uff0c\u53ef\u4ee5\u7528\u65f6\u95f4\u6233\u7684\u65b9\u6cd5\u5b9e\u73b0\uff09\uff0c\u7136\u540e\u52a0\u5165\u540e\u4e3a\u4e86\u4e0d\u5f71\u54cd\u5230\u4e0b\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u83b7\u5f97\u5f53\u524d\u8be2\u95ee\u7684\u7b54\u6848\u540e\u8981\u5c06\u8fd9\u4e2a\u8be2\u95ee\u7684\u52a0\u5165\u7684\u8fb9\u64a4\u9500\uff08\u9700\u8981\u7528\u5230\u53ef\u6301\u4e45\u5316\u5e76\u67e5\u96c6\uff09\u3002\n\n\u7b54\u6848\u5c31\u662f\u6240\u5728\u5e76\u67e5\u96c6\u7684\u96c6\u5408\u5927\u5c0f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a $O(\\frac{q}{B} \\times m \\log m + Bq \\log q)$\n\n\u7528\u5747\u503c\u4e0d\u7b49\u5f0f\u6c42\u7684\u6700\u4f73\u5757\u957f\u662f $\\sqrt {m \\log m}$\u3002\uff08$mq$ \u540c\u9636\u770b\u4f5c\u76f8\u540c\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define MP(a,b) make_pair(a,b)\ninline int read() {\n\tint x = 0, flag = 1;\n\tchar ch = getchar();\n\tfor( ; ch > '9' || ch < '0' ; ch = getchar()) if(ch == '-') flag = -1;\n\tfor( ; ch >= '0' && ch <= '9' ; ch = getchar()) x = (x << 3) + (x << 1) + ch - '0';\n\treturn x * flag;\n}\nconst int MAXN = 1e5 + 50, block = 1400;\nint n, m, q, tack[MAXN][2];\nint Change[MAXN][2], lst[MAXN], nc = 0, nq = 0, Ans[MAXN], book[MAXN], LS[MAXN];\nstruct Edge {\n\tint from, to, w;\n} edge[MAXN], tmp[MAXN];\nstruct Ques {\n\tint s, w, id, tim;\n} Q[MAXN];\nbool cmp(Edge a, Edge b) { return a.w > b.w; }\nbool cmp2(Ques a, Ques b) { return a.w > b.w; }\nnamespace DSU { // \u53ef\u64a4\u9500\u5e76\u67e5\u96c6\n\tint f[MAXN], top, siz[MAXN];\n    pair <int, int> tack[MAXN];\n    void reset() { for(int i = 1 ; i <= n ; i ++) f[i] = i, siz[i] = 1; top = 0; }\n    int find(int x) { return f[x] == x ? x : find(f[x]); }\n    int merge(int x, int y) {\n        int fax = find(x), fay = find(y);\n        if(fax == fay) return 0;\n        if(siz[fax] > siz[fay]) swap(fax, fay);\n        f[fax] = fay, siz[fay] += siz[fax];\n        tack[++ top] = MP(fax, fay);\n        return siz[fay];\n    }\n    void Cancle() { \n        pair <int, int> D = tack[top --];\n        f[D.first] = D.first;\n        siz[D.second] = siz[D.second] - siz[D.first];\n        return ;\n    }\n} ;\nvoid GetAns() {\n\tint h = 0, now = 0; DSU::top = 0;\n\tfor(int i = 1 ; i <= n ; i ++) DSU::f[i] = i, DSU::siz[i] = 1;\n\tfor(int j = 1 ; j <= m ; j ++) if(book[j] != 1) tmp[++ h] = edge[j];\n\tsort(tmp + 1, tmp + 1 + h, cmp);\n\tsort(Q + 1, Q + 1 + nq, cmp2);\n\tfor(int i = 1 ; i <= nq ; i ++) {\n\t\tint qw = Q[i].w;\n\t\twhile(tmp[now + 1].w >= qw) now ++, DSU::merge(tmp[now].from, tmp[now].to); // \u6ca1\u6709\u4fee\u6539\u5230\u7684\u5c31\u76f4\u63a5\u626b\n\t\tint tp = DSU::top;\n\t\tfor(int j = Q[i].tim ; j >= 1 ; j --) { // \u4e00\u4e2a\u7ec6\u8282\uff0c\u8981\u53cd\u6b63\u505a\uff0c\u8981\u4ee5\u6700\u540e\u4e00\u6b21\u4fee\u6539\u4e3a\u51c6\uff01\n\t\t\tint id = Change[j][0], w = Change[j][1];\n\t\t\tif(LS[id]) continue;\n\t\t\tLS[id] = 1;\n\t\t\tif(w >= qw) DSU::merge(edge[id].from, edge[id].to);\n\t\t}\n\t\tfor(int j = Q[i].tim + 1; j <= nc; j ++) { // \u8fd9\u4e2a\u662f\u56e0\u4e3a\u867d\u7136\u6709\u4e9b\u8fb9\u5728\u6574\u4e2a\u5757\u91cc\u9762\u88ab\u4fee\u6539\u4e86\uff0c\u4f46\u662f\u5728\u8fd9\u4e2a\u8be2\u95ee\u4e4b\u524d\u6ca1\u6709\u88ab\u4fee\u6539\n\t\t\tint id = Change[j][0];\n\t\t\tif(LS[id]) continue;\n\t\t\tif(edge[id].w >= qw) DSU::merge(edge[id].from, edge[id].to);\n\t\t}\n\t\tfor(int j = 1 ; j <= Q[i].tim ; j ++) {// \u8fd9\u91cc\u662f\u5728\u590d\u539f\n\t\t\tint id = Change[j][0], w = Change[j][1];\n\t\t\tLS[id] = 0;\n\t\t}\n\t\tAns[Q[i].id] = DSU::siz[DSU::find(Q[i].s)]; // \u6c42\u7b54\u6848\n\t\twhile(DSU::top > tp) DSU::Cancle(); // \u64a4\u9500\n\t}\n\tfor(int j = 1 ; j <= nc ; j ++) book[Change[j][0]] = 0; // \u8bb0\u5f97\u590d\u539f\n\tfor(int j = 1 ; j <= nc ; j ++) edge[Change[j][0]].w = Change[j][1]; // \u8bb0\u5f97\u8981\u4fee\u6539\u6389\u8fb9\u6743\u54e6\n\tfor(int i = 1 ; i <= nq ; i ++) printf(\"%d\\n\", Ans[i]);\n\tnq = 0, nc = 0;\n\treturn ;\n}\n\nint main() {\n    //freopen(\"Bridge.in\", \"r\", stdin);\n    //freopen(\"Bridge.out\", \"w\", stdout);\n\tn = read(), m = read();\n\tfor(int i = 1 ; i <= m ; i ++) {\n\t\tint u = read(), v = read(), w = read();\n\t\tedge[i] = (Edge){ u, v, w };\n\t} int q = read();\n\tfor(int v = 1 ; v <= q ; v ++) {\n\t\tint op = read(), a = read(), b = read();\n\t\tif(op == 1) Change[++ nc][0] = a, book[a] = 1, Change[nc][1] = b;\n\t\telse Q[++ nq].s = a, Q[nq].w = b, Q[nq].id = nq, Q[nq].tim = nc;\n\t\tif(v % block == 0) GetAns();\n\t} if(nq) GetAns();\n\treturn 0;\n}\n```",
        "postTime": 1623763569,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u3010APIO2019\u3011\u6865\u6881 \u9898\u89e3"
    },
    {
        "content": "\u5148\u8bb2\u4e0b\u90e8\u5206\u5206\u600e\u4e48\u641e\u3002\n\n\u6709\u4e2a\u975e\u5e38\u66b4\u529b\u7684\u66b4\u529b\u505a\u6cd5\uff1a\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u628a\u8fb9\u6743\u5927\u4e8e $w_j$ \u7684\u8fb9\u52a0\u5165\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u5757\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O(qm)}$\uff0c\u53ef\u4ee5\u8fc7 $\\mathrm{Subtask\\ 1}$\n\n\u5f53 $t_i=2$ \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5 `kruskal` \u91cd\u6784\u6811\uff0c\u53ef\u4ee5\u8fc7 $\\mathrm{Subtask \\ 4}$\n\n$\\rm Subtask \\ 2$ \u662f\u4e00\u4e2a\u94fe\u7684\u7ed3\u6784\uff0c\u53d1\u73b0\u95ee\u9898\u8f6c\u4e3a $\\max\\limits_{l,r,i\\in[l,r] \\& d_i>=w_j}\\{ r-l+1 \\}$\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u505a\u4e00\u4e0b\u3002\n\n\n$\\rm Subtask \\ 3,5$...\u4e0d\u4f1a\u505a\uff0c\u544a\u8f9e\uff08\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u6536\u83b7 $43 \\rm pts$\n\n\n\n\n------------\n\n\u81f3\u4e8e\u6b63\u89e3...\n\n\u53ef\u4ee5\u628a\u8be2\u95ee\u5206\u5757\uff0c\u8bbe\u5757\u957f\u4e3a $S$\uff0c\u628a\u6bcf\u4e00\u6761\u8fb9\u5206\u6210\u4e09\u79cd\u53bb\u505a\uff0c\u4e00\u79cd\u662f\u5757\u5185\u6ca1\u4fee\u6539\u8fc7\u7684\uff0c\u4e00\u79cd\u662f\u5757\u5185\u4fee\u6539\u8fc7\uff0c\u65f6\u95f4\u5728\u8be2\u95ee\u524d\u7684\uff0c\u53e6\u4e00\u79cd\u662f\u5757\u5185\u4fee\u6539\u8fc7\uff0c\u65f6\u95f4\u5728\u8be2\u95ee\u540e\u7684\u3002\n\n\u524d\u4e00\u79cd\u8fb9\u53ef\u4ee5\u76f4\u63a5\u4e0e\u8be2\u95ee\u6392\u5e8f\u53bb\u505a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(\\frac{q}{S}m \\log m)$\n\n\u7b2c\u4e8c\u79cd\u8fb9\uff0c\u7b2c\u4e09\u79cd\u8fb9\u53ef\u4ee5\u679a\u4e3e\u5757\u5185\u4fee\u6539\uff0c\u7528\u53ef\u64a4\u9500\u5316\u5e76\u67e5\u96c6\u53bb\u505a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(\\frac{q}{S}S^2 \\log n)$\n\n\n\u81f3\u4e8e\u5757\u957f\u591a\u5927\u6700\u4f18\uff0c~~\u4eba\u8089\u4e8c\u5206\u5f97\u51fa~~\u597d\u50cf\u662f $\\sqrt{m \\log n}$\n\n\n\n\u4ea4 LOJ \uff0c\u76f4\u63a5 AC \u4e86\uff0c\u7136\u540e\u518d\u4ea4\u6d1b\u8c37\uff0cTLE 44 pts....\n\n\n\u795e $\\sf\\color{black}{F}\\color{red}{zzzz}$ \u8bf4\u8fd9\u9898\u8fd8\u6709\u4e24\u4e2a\u4f18\u5316\uff0c\u770b\u4e86\u4e00\u773c\u9898\u89e3\uff0c\u53d1\u73b0\u7b2c\u4e00\u79cd\u8fb9\u5728\u6392\u5e8f\u7684\u65f6\u5019\u5b8c\u5168\u53ef\u4ee5\u5148\u6392\u5e8f\u518d\u5f52\u5e76\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n1. \u5728\u89e3\u51b3\u8be2\u95ee\u4e4b\u524d\u5148\u628a\u8fb9\u6392\u5e8f\u4e00\u904d\n2. \u628a\u6392\u5e8f\u540e\u7684\u8fb9\u585e\u8fdb\u5757\u91cc\u89e3\u51b3\u8be2\u95ee\uff0c\u628a\u8be2\u95ee\u6392\u5e8f\uff0c\u6ca1\u4fee\u6539\u7684\u8fb9\u62c9\u51fa\u6765\u548c\u8be2\u95ee\u505a\u4e00\u6b21\u5f52\u5e76\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O(\\frac{q}{S}m)}$\n3. \u89e3\u51b3\u5f53\u524d\u5757\u5185\u7684\u8be2\u95ee\u540e\uff0c\u628a\u5757\u5185\u4fee\u6539\u7684\u8fb9\u62c9\u51fa\u6765\u6392\u5e8f\uff0c\u6ca1\u6709\u4fee\u6539\u7684\u8fb9\u4e5f\u62c9\u51fa\u6765\uff0c\u548c\u4fee\u6539\u7684\u8fb9\u505a\u4e00\u6b21\u5f52\u5e76\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(\\frac{q}{S}m)$\n\n\n\n\u770b\u8d77\u6765\u597d\u50cf\u4f18\u5316\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u4f46\u5176\u5b9e\u53ea\u662f\u5361\u5e38\uff0c\u56e0\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u5728\u53ef\u64a4\u9500\u5316\u5e76\u67e5\u96c6\u4e0a...\n\n\u603b\u800c\u8a00\u4e4b\u8fd9\u9898\u662f\u4e00\u9053\u4e0d\u9519\u7684\u6570\u636e\u7ed3\u6784\u9898\uff0c\u4e5f\u8bb8\u80fd\u653e\u8fdb NOIP \u63d0\u9ad8\u7ec4\u5e76\u67e5\u96c6\u8bb2\u8bfe\u91cc\uff08\n\n\n\u5982\u679c\u770b\u4e0d\u61c2\u53ef\u4ee5\u770b\u4ee3\u7801\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5;\nint u[N], v[N], d[N], vis[N], n, m;\nstruct query {\n    int type, val, id;\n    query() {}\n    query(int _t, int _v, int _id) {\n        type = _t;\n        val = _v;\n        id = _id;\n    }\n    bool operator<(const query &b) const { return val == b.val ? type < b.type : val > b.val; }\n};\nvoid merge(query *A, query *B, query *f, int n, int m) {\n    int i = 1, j = 1, cnt = 0;\n    while (i <= n && j <= m)\n        if (A[i] < B[j])\n            f[++cnt] = A[i++];\n        else\n            f[++cnt] = B[j++];\n    while (i <= n) f[++cnt] = A[i++];\n    while (j <= m) f[++cnt] = B[j++];\n}\nquery a[N << 1], A[N << 1], B[N << 1], F[N << 1];\nint type[N], b[N], r[N], s[N], w[N], ans[N], cnt;\nint f[N], sz[N];\nint find(int x) {\n    while (x != f[x]) x = f[x];\n    return x;\n}\nint st[N], top = 0;\nvoid solve(int L, int R) {\n    cnt = 0;\n    int cnt1 = 0, cnt2 = 0;\n    for (int i = 1; i <= n; ++i) f[i] = i, sz[i] = 1;\n    for (int i = L; i <= R; ++i)\n        if (type[i] == 1)\n            vis[b[i]] = i;\n        else\n            A[++cnt1] = query(1, w[i], i);\n    sort(A + 1, A + cnt1 + 1);\n    for (int i = 1; i <= m; ++i)\n        if (vis[F[i].id] == 0)\n            B[++cnt2] = F[i];\n    merge(A, B, a, cnt1, cnt2);\n    cnt = cnt1 + cnt2;\n    for (int i = L; i <= R; ++i) vis[b[i]] = 0;\n    for (int i = 1; i <= cnt; ++i) {\n        // if(L==3) cout<<a[i].type<<\" \"<<a[i].id<<\" \"<<d[a[i].id]<<endl;\n        if (a[i].type == 0) {\n            int x = find(u[a[i].id]), y = find(v[a[i].id]);\n            if (x == y)\n                continue;\n            if (sz[x] >= sz[y])\n                swap(x, y);\n            f[x] = y;\n            sz[y] += sz[x];\n        } else {\n            top = 0;\n            for (int j = L; j <= a[i].id; ++j)\n                if (type[j] == 1)\n                    vis[b[j]] = r[j];\n            for (int j = L; j <= a[i].id; ++j)\n                if (type[j] == 1 && vis[b[j]] >= a[i].val) {\n                    int x = find(u[b[j]]), y = find(v[b[j]]);\n                    if (x == y)\n                        continue;\n                    if (sz[x] >= sz[y])\n                        swap(x, y);\n                    st[++top] = x;\n                    f[x] = y;\n                    sz[y] += sz[x];\n                }\n            for (int j = a[i].id; j <= R; ++j)\n                if (type[j] == 1 && d[b[j]] >= a[i].val && vis[b[j]] == 0) {\n                    // if(i==3) cout<<j<<\" Q\\n\";\n                    int x = find(u[b[j]]), y = find(v[b[j]]);\n                    if (x == y)\n                        continue;\n                    if (sz[x] >= sz[y])\n                        swap(x, y);\n                    st[++top] = x;\n                    f[x] = y;\n                    sz[y] += sz[x];\n                }\n            int x = find(s[a[i].id]);\n            ans[a[i].id] = sz[x];\n            while (top > 0) sz[f[st[top]]] -= sz[st[top]], f[st[top]] = st[top], --top;\n            for (int j = L; j <= a[i].id; ++j)\n                if (type[j] == 1)\n                    vis[b[j]] = 0;\n        }\n    }\n    for (int i = L; i <= R; ++i)\n        if (type[i] == 1)\n            vis[b[i]] = 0;\n}\nint L[N], R[N];\nint rd() {\n    int x = 0;\n    char ch = getchar();\n    while (!isdigit(ch)) ch = getchar();\n    while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n    return x;\n}\nvoid write(int x) {\n    if (x < 0)\n        return putchar('-'), write(-x);\n    if (x > 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\nint main() {\n    n = rd();\n    m = rd();\n    for (int i = 1; i <= m; ++i) u[i] = rd(), v[i] = rd(), d[i] = rd();\n    for (int i = 1; i <= m; ++i) F[i] = query(0, d[i], i);\n    sort(F + 1, F + m + 1);\n    int q;\n    cin >> q;\n    for (int i = 1; i <= q; ++i) {\n        cin >> type[i];\n        if (type[i] == 1)\n            b[i] = rd(), r[i] = rd();\n        else\n            s[i] = rd(), w[i] = rd();\n    }\n    int len = 1000, cnt = q / len;\n    for (int i = 1; i <= cnt; ++i) L[i] = R[i - 1] + 1, R[i] = L[i] + len - 1;\n    if (R[cnt] < q)\n        ++cnt, L[cnt] = R[cnt - 1] + 1, R[cnt] = q;\n    for (int i = 1; i <= cnt; ++i) {\n        solve(L[i], R[i]);\n        for (int j = L[i]; j <= R[i]; ++j)\n            if (type[j] == 1)\n                d[b[j]] = r[j];\n        int cnt1 = 0, cnt2 = 0;\n        for (int j = L[i]; j <= R[i]; ++j)\n            if (type[j] == 1)\n                vis[b[j]] = 1;\n        for (int j = 1; j <= m; ++j)\n            if (vis[F[j].id] == 0)\n                A[++cnt1] = F[j];\n            else\n                B[++cnt2] = query(0, d[F[j].id], F[j].id);\n        sort(B + 1, B + cnt2 + 1);\n        merge(A, B, F, cnt1, cnt2);\n        for (int j = L[i]; j <= R[i]; ++j)\n            if (type[j] == 1)\n                vis[b[j]] = 0;\n    }\n    for (int i = 1; i <= q; ++i)\n        if (type[i] == 2)\n            write(ans[i]), putchar('\\n');\n    return 0;\n}\n```\n\n\n\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u8fd9\u9898\u662f\u5178\u578b\u7684\u53e3\u80e1 3 \u5206\u949f\uff0c\u5199\u4ee3\u7801 3 \u5c0f\u65f6 /kk",
        "postTime": 1594790928,
        "uid": 344016,
        "name": "wurzang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "\u8003\u8651\u82e5\u53ea\u6709\u67e5\u8be2\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6784\u9020$Kruskal$\u91cd\u6784\u6811\uff0c\u7136\u540e\u5728\u7ebf\u8be2\u95ee\u4e86\uff0c\u4e5f\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u628a\u8be2\u95ee\u548c\u8fb9\u90fd\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u53cc\u6307\u9488\u4f9d\u6b21\u52a0\u5165\u5bf9\u4e8e\u5f53\u524d\u8be2\u95ee\u5408\u6cd5\u7684\u8fb9\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\u73b0\u5728\u52a0\u4e0a\u4fee\u6539\u64cd\u4f5c\uff0c\u8003\u8651\u53ef\u4ee5\u5bf9\u6240\u6709\u64cd\u4f5c\u5206\u5757\uff0c\u5bf9\u5757\u5185\u6240\u6709\u8be2\u95ee\u64cd\u4f5c\u6392\u5e8f\uff0c\u548c\u4e4b\u524d\u7684\u79bb\u7ebf\u505a\u6cd5\u4e00\u6837\uff0c\u7528\u53cc\u6307\u9488\u4f9d\u6b21\u52a0\u8fb9\u3002\n\n\u4f46\u662f\u6709\u4e9b\u8fb9\u4f1a\u5728\u5757\u5185\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u6d89\u53ca\u4fee\u6539\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee,\u66b4\u529b\u626b\u4e00\u904d\u5757\u5185\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u82e5\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u5728\u5f53\u524d\u8be2\u95ee\u7684\u65f6\u95f4\u70b9\u4e4b\u524d\uff0c\u90a3\u4e48\u5c31\u6267\u884c\u5bf9\u5e94\u8fb9\u7684\u4fee\u6539\uff0c\u6267\u884c\u5b8c\u6240\u6709\u80fd\u591f\u6267\u884c\u7684\u4fee\u6539\u540e\uff0c\u518d\u8003\u8651\u8fd9\u4e9b\u6d89\u53ca\u4fee\u6539\u7684\u8fb9\uff0c\u52a0\u5165\u5408\u6cd5\u7684\u3002\n\n\u5f53\u6307\u9488\u626b\u5230\u4e0b\u4e00\u4e2a\u8be2\u95ee\u65f6\uff0c\u56e0\u4e3a\u8be2\u95ee\u5df2\u7ecf\u4e0d\u518d\u662f\u6309\u65f6\u95f4\u987a\u5e8f\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u4e0a\u4e00\u4e2a\u8be2\u95ee\u6267\u884c\u7684\u4e00\u4e9b\u4fee\u6539\u5728\u5f53\u524d\u8be2\u95ee\u4e0d\u80fd\u751f\u6548\uff0c\u6240\u4ee5\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u628a\u9664\u4e86\u4e0d\u6d89\u53ca\u4fee\u6539\u7684\u8fb9\u90fd\u64a4\u9500\u6389\uff0c\u7136\u540e\u5c31\u548c\u4e4b\u524d\u5904\u7406\u8be2\u95ee\u7684\u8fc7\u7a0b\u4e00\u6837\u4e86\u3002\n\n\u8bbe\u5757\u5927\u5c0f\u4e3a$S$\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5757\uff0c\u9700\u8981\u5bf9\u8fb9\u6392\u5e8f\u548c\u5904\u7406\u8be2\u95ee\uff0c\u5904\u7406\u8be2\u95ee\u65f6\u9700\u8981\u679a\u4e3e\u6240\u6709\u7684\u4fee\u6539\u548c\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6765\u7ef4\u62a4\uff0c\u90a3\u4e48\u5904\u7406\u4e00\u4e2a\u5757\u7684\u590d\u6742\u5ea6\u4e3a$O(m\\log m + S^2 \\log n)$\uff0c\u603b\u5171$\\frac{q}{S}$\u4e2a\u5757\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u5c31\u4e3a$O(\\frac{q m\\log m}{S}+ qS \\log n)$\uff0c\u5757\u5927\u5c0f\u53d6$\\sqrt{m\\log m}$\u65f6\u4f1a\u6bd4\u8f83\u5feb\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 200010\nusing namespace std;\ntemplate<typename T> inline void read(T &x)\n{\n    x=0;char c=getchar();bool flag=false;\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\n    if(flag)x=-x;\n}\nint n,m,S,qu,tot,top,cnt1,cnt2;\nint ans[maxn],fa[maxn],siz[maxn],bel[maxn],val[maxn];\nbool vis[maxn];\nstruct edge\n{\n    int x,y,v,id;\n}e[maxn];\nbool cmp1(const edge &a,const edge &b)\n{\n    return a.v>b.v;\n}\nstruct query\n{\n    int x,v,id,opt;\n}q[maxn],q1[maxn],q2[maxn];\nbool cmp2(const query &a,const query &b)\n{\n    return a.v>b.v;\n}\nstruct node\n{\n    int x,y;\n}st[maxn];\nint find(int x)\n{\n    return fa[x]==x?x:find(fa[x]);\n}\nvoid merge(int x,int y)\n{\n    int rx=find(x),ry=find(y);\n    if(rx==ry) return;\n    if(siz[rx]<siz[ry]) swap(rx,ry);\n    st[++top]=(node){rx,ry};\n    fa[ry]=rx,siz[rx]+=siz[ry];\n}\nvoid del(int id)\n{\n    int x=st[id].x,y=st[id].y;\n    fa[y]=y,siz[x]-=siz[y];\n}\nvoid init()\n{\n    top=cnt1=cnt2=0,sort(e+1,e+m+1,cmp1);\n    for(int i=1;i<=n;++i) fa[i]=i,siz[i]=1;\n    for(int i=1;i<=m;++i) val[i]=vis[i]=0,bel[e[i].id]=i;\n    for(int i=1;i<=tot;++i)\n    {\n        if(q[i].opt==1) q1[++cnt1]=q[i],vis[q[i].x]=true;\n        else q2[++cnt2]=q[i];\n    }\n    sort(q2+1,q2+cnt2+1,cmp2);\n}\nvoid work()\n{\n    init();\n    int now,pos=1;\n    for(int i=1;i<=cnt2;++i)\n    {\n        int x=q2[i].x,v=q2[i].v,id=q2[i].id;\n        while(e[pos].v>=v)\n        {\n            if(!vis[e[pos].id])\n                merge(e[pos].x,e[pos].y);\n            pos++;\n        }\n        now=top;\n        for(int j=1;j<=cnt1;++j)\n            val[q1[j].x]=e[bel[q1[j].x]].v;\n        for(int j=1;j<=cnt1;++j)\n            if(q1[j].id<id)\n                val[q1[j].x]=q1[j].v;\n        for(int j=1;j<=cnt1;++j)\n            if(val[q1[j].x]>=v)\n                merge(e[bel[q1[j].x]].x,e[bel[q1[j].x]].y);\n        ans[id]=siz[find(x)];\n        while(top>now) del(top--);\n    }\n    for(int i=1;i<=cnt1;++i) e[bel[q1[i].x]].v=q1[i].v;\n}\nint main()\n{\n    read(n),read(m),S=sqrt(m*log2(m));\n    for(int i=1;i<=m;++i)\n        read(e[i].x),read(e[i].y),read(e[i].v),e[i].id=i;\n    read(qu);\n    for(int i=1;i<=qu;++i)\n    {\n        q[++tot].id=i,read(q[tot].opt);\n        read(q[tot].x),read(q[tot].v);\n        if(tot==S) work(),tot=0;\n    }\n    if(tot) work();\n    for(int i=1;i<=qu;++i)\n        if(ans[i])\n            printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1589273994,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "$$\\href{http://blog.chhokmah.cn/index.php/archives/80/}{\\Large\\texttt{My blog}}$$\n\n----\n## \u9898\u76ee\u6982\u62ec\n\u7ed9\u5b9a\u4e00\u5f20 $N$ \u4e2a\u70b9\uff0c$M$ \u6761\u8fb9\u7684\u65e0\u5411\u5e26\u6743\u56fe\u3002\n\n\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(x,y)$\uff0c\u4ece $x$ \u53f7\u8282\u70b9\u5f00\u59cb\u51fa\u53d1\uff0c\u53ea\u5141\u8bb8\u901a\u8fc7\u8fb9\u6743 $\\geq y$ \u7684\u8fb9\u3002\n\n\u95ee\u80fd\u591f\u5230\u8fbe\u7684\u8054\u901a\u5757\u6700\u5927\u7684\u5927\u5c0f\u3002\n\n**\u8981\u6c42\u52a8\u6001\u4fee\u6539\u8fb9\u6743**\n\n## \u601d\u8def\u8981\u70b9\n### \u5b50\u4efb\u52a1\u8ba8\u8bba\n\u66b4\u529b\u5c31\u4e0d\u8fdb\u884c\u8fc7\u591a\u7684\u8bb2\u89e3\u3002\n\n#### \u5b50\u4efb\u52a1 \u94fe\n\u672c\u8d28\u662f\u4e00\u4e2a\u5e8f\u5217\u95ee\u9898\u3002\n\n\u4f60\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u6b21\u7684\u64cd\u4f5c\u662f\u8fdb\u884c\u4e00\u6b21\u5411\u5de6\u8fb9\u6269\u5c55\u548c\u5411\u53f3\u8fb9\u6269\u5c55\uff0c\u627e\u5230\u7b2c\u4e00\u6761\u4e0d\u6ee1\u8db3\u7684\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\u4f60\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5305\u542b\u8d77\u70b9\u7684\u6700\u5927\u533a\u95f4\uff0c\u6ee1\u8db3\u5728\u4e0a\u9762\u7684\u6240\u6709\u8fb9\u6743\u90fd\u6ee1\u8db3 $\\geq y$\u3002\n\n\u56e0\u4e3a\u652f\u6301\u4fee\u6539\u64cd\u4f5c\uff0c\u6240\u4ee5\u8003\u8651\u7528\u4e8c\u5206\u7b54\u6848\uff0c\u7ebf\u6bb5\u6811\u67e5\u8be2\u7684\u65b9\u6cd5\u5728 $O(nlog^2n)$ \u7684\u65f6\u95f4\u89e3\u51b3\u3002\n\n#### \u5b50\u4efb\u52a1 \u53ea\u6709\u67e5\u8be2\n\u6211\u4eec\u5047\u8bbe\u8054\u901a\u5757\u4e2d\u6700\u5c0f\u7684\u8fb9\u6743\u4e3a $min$\uff0c\u90a3\u4e48\u67d0\u4e00\u4e2a\u8d77\u70b9\u5f00\u59cb\u80fd\u591f\u904d\u5386\u6574\u4e2a\u8054\u901a\u5757\u7684\u5145\u8981\u6761\u4ef6\u662f $min \\ge y$\u3002\n\n\u4e5f\u5c31\u662f\u6700\u5c0f\u8fb9\u7684\u8fb9\u6743 $\\ge y$\uff0c\u8fd9\u5c31\u5bb9\u6613\u60f3\u5230\u7528 $Kruscal$ \u91cd\u6784\u6811\u6765\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u5efa\u7acb\u51fa $Kruscal$ \u91cd\u6784\u6811\u4e4b\u540e\uff0c\u4ee5\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\uff0c\u90fd\u53ef\u4ee5\u88ab\u4ee5\u6839\u8282\u70b9\u4e3a\u8d77\u70b9\u7684\u8def\u5f84\u5305\u542b\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u500d\u589e\u627e\u5230**\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u7956\u5148\u8282\u70b9**\uff0c\u7136\u540e\u5176\u5b50\u6811\u5927\u5c0f\u5373\u4e3a\u7b54\u6848\u3002 \n\n\u4e5f\u53ef\u4ee5\u91c7\u7528\u79bb\u7ebf\u505a\u6cd5\uff0c\u5c06\u64cd\u4f5c\u79bb\u7ebf\u540e\uff0c\u6309\u7167 $y$ \u503c\u4ece\u5927\u5230\u5c0f\u67e5\u8be2\uff0c\u5c06\u6240\u6709\u7684\u8fb9\u6309\u7167\u987a\u5e8f\u52a0\u5165\u5230\u5e76\u67e5\u96c6\u4e2d\uff0c**\u7b54\u6848\u5c31\u662f\u8054\u901a\u5757\u5927\u5c0f**\u3002\n\n### \u6b63\u89e3\n\u91c7\u7528\u300c\u5b50\u4efb\u52a1 \u53ea\u6709\u67e5\u8be2\u300d\u4e2d\u7684\u505a\u6cd5\uff0c\u8003\u8651\u66b4\u529b\u3002\n\n\u6211\u4eec\u6309\u7167\u8be2\u95ee\u5206\u5757\uff0c\u5728\u5f53\u524d\u5757\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u76f8\u5f53\u4e8e\u548c\u524d\u9762\u6240\u6709\u5757\u7684\u5230\u7684\u65b0\u56fe**\u91cd\u65b0\u66b4\u529b**\u6c42\u4e00\u904d\u7b54\u6848\uff0c\u7136\u540e**\u66f4\u65b0\u4e3a\u65b0\u56fe**\u3002\n\n\u5c06\u5f53\u524d\u5757\u4e2d\u4e0d\u9700\u8981\u4fee\u6539\u7684\u8fb9\u52a0\u5165\u5230\u8054\u901a\u5757\u4e2d\uff0c\u8003\u8651\u4fee\u6539\u7684\u8fb9\uff0c\u5c06\u5728\u5f53\u524d\u64cd\u4f5c\u4e4b\u524d\u7684\u6bcf\u4e00\u6761\u8fb9\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u5f97\u5230\u7684\u6743\u503c\u548c\u6807\u51c6\u503c $y$ \u8fdb\u884c\u6bd4\u8f83\uff0c\u5426\u5219\u89c6\u4e3a\u672a\u88ab\u4fee\u6539\u3002\n\n\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u540c\u4e00\u6761\u8fb9\u53ef\u80fd\u88ab\u4e0d\u540c\u7684\u4fee\u6539\u64cd\u4f5c\uff0c\u6240\u4ee5\u8003\u8651\u8981**\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\u3002\n\n## \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n#define inf 0x3f3f3f3f\n#define INF 0x3f3f3f3f3f3f3f3f\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nnamespace FastIO {\n\ntemplate <class T> \nvoid rd(T& x) {\n  x = 0;\n  char ch = 0;\n  bool f = 0;\n  while (!isdigit(ch)) f |= ch == '-', ch = getchar(); \n  while (isdigit(ch)) x = x * 10 + (ch ^ 48), ch = getchar();\n  f ? x = -x : 1;\n}\n\ntemplate <class T> \nvoid ptf(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x > 9) ptf(x / 10);\n  putchar(x % 10 + 48);\n}\n\nvoid read(int& x) { rd(x); }\nvoid read(long long& x) { rd(x); }\nvoid read(unsigned int& x) { rd(x); }\nvoid read(unsigned long long& x) { rd(x); }\nvoid read(char& x) { x = getchar(); }\nvoid read(string& x) { cin >> x; }\ntemplate <class T, class R> \nvoid read(pair<T, R>& x) {\n  read(x.first), read(x.second);\n}\ntemplate <class T> \nvoid read(vector<T>& x) { \n  for (auto& ele : x) read(x); \n}\n\nvoid write(int x) { ptf(x); }\nvoid write(long long x) { ptf(x); }\nvoid write(unsigned long long x) { ptf(x); }\nvoid write(unsigned int x) { ptf(x); }\nvoid write(char x) { putchar(x); }\nvoid write(char* x) { printf(\"%s\", x); }\nvoid write(string x) { cout << x; }\ntemplate <class T> \nvoid write(vector<T> x) {\n  for (auto ele : x)  (x); \n}\ntemplate <class T, class R> \nvoid write(pair<T, R> x) {\n  write(x.first), putchar(','), write(x.second);\n}\ntemplate <class T> \nvoid writeln(T x) {\n  write(x), puts(\"\");\n}\n\n}\n\nusing FastIO::read;\nusing FastIO::write;\nusing FastIO::writeln;\n\nnamespace RevocableDisjoinSet {\n\nconst int N = 1e5 + 5; \n\nstruct DisjoinSet {\n  int top, n; \n  int fa[N], sz[N];\n  pair<int, int> stk[N];\n\n  void init(int x) {\n    n = x, top = 0;\n    for (int i = 1; i <= n; i++) {\n      fa[i] = i; \n      sz[i] = 1;\n    }\n  }\n\n  int get(int x) {\n    return fa[x] == x ? x : get(fa[x]); \n  }\n\n  void merge(int x, int y) {\n    int p1 = get(x), p2 = get(y);\n    if (p1 != p2) {\n      if (sz[p1] > sz[p2]) { swap(p1, p2); }\n      fa[p1] = p2; \n      sz[p2] += sz[p1];\n      stk[++top] = make_pair(p1, p2);\n    }\n  }\n\n  void revoke(int goal) {\n    while (top > goal) {\n      fa[stk[top].first] = stk[top].first;\n      fa[stk[top].second] = stk[top].second; \n      sz[stk[top].second] -= sz[stk[top].first];\n      top--; \n    }\n  }\n\n  int check(int x, int y) {\n    return get(x) == get(y);\n  }\n};\n\n}\n\n// ===============\n\nRevocableDisjoinSet::DisjoinSet dsu;\n\nconst int N = 5e4 + 5, M = 1e5 + 5; \n\nstruct Ed {\n  int u, v, w, id; // \u73b0\u5728\u7b2c i \u6761\u8fb9 \u539f\u6765\u7684\u7f16\u53f7\n  \n  bool operator<(const Ed& rhs) const {\n    return w > rhs.w || (w == rhs.w && id < rhs.id);\n  }\n} ed[M], ed2[M], tmp[M];\n\nstruct Op {\n  int t, x, y, id;\n\n  bool operator<(const Op& rhs) const {\n    return y > rhs.y;\n  }\n} op[M], op1[M], op2[M];\n\nint n, m, q, tot;\nint ismdy[M], did[M], ans[M];\nint rk[M]; // \u7b2c i \u6761\u8fb9\u7684 rank (\u6309\u7167 w \u6392\u5e8f)\n\n/**\n * \u5bf9\u4e8e\u5f53\u524d\u7684\u8fb9 i\uff0c \u539f\u6765\u7684\u7f16\u53f7\u4e3a ed[i].i \n * \u5176\u4e2d\u539f\u6765\u7684\u7f16\u53f7\u662f\u6ca1\u6709\u6392\u5e8f\u8fc7\u7684\uff0c\u73b0\u5728\u7684\u7f16\u53f7\u4e3a\u6392\u5e8f\u5b8c\u7684\u4e0b\u6807\n */\nvoid solve() {\n  dsu.init(n);\n  memset(ismdy, 0, sizeof ismdy);\n  int t1 = 0, t2 = 0, pt = 1; // pt \u904d\u5386\u73b0\u5728\u7684\u7f16\u53f7\n  for (int i = 1; i <= tot; i++) \n    if (op[i].t == 1) {\n      op1[++t1] = op[i];\n      ismdy[op[i].x] = 1; // \u5c06\u8fd9\u6761\u8fb9\u7684\u539f\u6765\u7684\u7f16\u53f7\u6253\u4e0a\u4fee\u6539\u6807\u8bb0\n    } else \n      op2[++t2] = op[i];\n  // op2 \u662f\u8be2\u95ee op1 \u662f\u4fee\u6539\n  sort(op2 + 1, op2 + 1 + t2);\n  for (int i = 1; i <= t2; i++) {\n    while (pt <= m && ed[pt].w >= op2[i].y) {\n      if (!ismdy[ed[pt].id]) \n        dsu.merge(ed[pt].u, ed[pt].v);\n      pt++; \n    }\n    int temp = dsu.top;\n    for (int j = 1; j <= t1; j++) \n      did[op1[j].x] = 0;\n    for (int j = 1; j <= t1; j++) \n      if (op1[j].id < op2[i].id) \n        did[op1[j].x] = j; \n    for (int j = 1; j <= t1; j++) \n      if (did[op1[j].x] == j) {\n        if (op1[j].y >= op2[i].y) \n          dsu.merge(ed[rk[op1[j].x]].u, ed[rk[op1[j].x]].v);\n      } else if (did[op1[j].x] == 0 && ed[rk[op1[j].x]].w >= op2[i].y) \n        dsu.merge(ed[rk[op1[j].x]].u, ed[rk[op1[j].x]].v);\n    ans[op2[i].id] = dsu.sz[dsu.get(op2[i].x)];\n    dsu.revoke(temp);\n  }\n  memset(did, 0, sizeof did);\n  int l = 1, r = 1, num = 0, t = 0;\n  for (int i = t1; i >= 1; i--) \n    if (!did[op1[i].x]) {\n      did[op1[i].x] = 1; \n      ed2[++num] = ed[rk[op1[i].x]];\n      ed2[num].w = op1[i].y; \n    }\n  sort(ed2 + 1, ed2 + 1 + num);\n  while (l <= m && r <= num) {\n    while (l <= m && did[ed[l].id]) \n      l++;\n    if (ed[l].w >= ed2[r].w) \n      tmp[++t] = ed[l], l++;\n    else \n      tmp[++t] = ed2[r], r++;\n  }\n  while (l <= m) {\n    if (!did[ed[l].id])\n      tmp[++t] = ed[l];\n    l++;\n  }\n  while (r <= num) \n    tmp[++t] = ed2[r], r++;\n  for (int i = 1; i <= m; i++) {\n    ed[i] = tmp[i];\n    rk[ed[i].id] = i; \n  }\n}\n\nint main() {\n  read(n), read(m);\n  for (int i = 1; i <= m; i++) {\n    read(ed[i].u), read(ed[i].v), read(ed[i].w);\n    ed[i].id = i; \n  }\n  sort(ed + 1, ed + 1 + m);\n  for (int i = 1; i <= m; i++) \n    rk[ed[i].id] = i; \n  read(q);\n  tot = 0;\n  for (int i = 1; i <= q; i++) {\n    read(op[++tot].t), read(op[tot].x), read(op[tot].y);\n    op[tot].id = i; \n    if (tot == 500) {\n      solve();\n      tot = 0;\n    }\n  }\n  if (tot) \n    solve();\n  for (int i = 1; i <= q; i++) \n    if (ans[i]) \n      writeln(ans[i]);\n  return 0;\n}\n```\n## \u540e\u8a00\n- \u5f53\u64cd\u4f5c\u590d\u6742\uff0c\u4e14\u4e0d\u5bb9\u6613\u4f18\u5316\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528\u5206\u5757\u6765\u964d\u4f4e\u590d\u6742\u5ea6\u3002\n- \u8fd8\u662f\u5f3a\u8c03\u4e00\u5b9a\u8981\u4e00\u6b65\u6b65\u5206\u6790\u95ee\u9898\uff0c\u4e5f\u8981\u901a\u8fc7\u9898\u76ee\u7684\u6027\u8d28\u6765\u770b\u51fa\u9898\u76ee\u7684\u6a21\u578b\u3002",
        "postTime": 1585730412,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5443 \u3010[APIO2019]\u6865\u6881\u3011"
    },
    {
        "content": "# [APIO2019]\u6865\u6881\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5443)\n\n## \u8349\u7a3f\n\n\u5982\u679c\u95ee\u9898\u662f\u9759\u6001\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7528```kruaskal```\u91cd\u6784\u6811\u3002\n\n\u6211\u4eec\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5206\u5757\u3002\u8bbe\u5757\u7684\u5927\u5c0f\u4e3a$S$\u3002\u6bcf\u9694$1$\u5757\u6784\u5efa\u4e00\u9897```kruaskal```\u91cd\u6784\u6811\uff0c\u9700\u8981$O(m)$\u7684\u590d\u6742\u5ea6\u3002\u7136\u540e\u8ba1\u7b97\u66f4\u6539$(u,v,w)$\u5bf9\u8be2\u95ee\u7684\u5f71\u54cd\u3002\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n+ \u5982\u679c\u8fd9\u4e2a\u8fb9\u4ece\u80fd\u8d70\u8f6c\u4e3a\u4e0d\u80fd\u8d70\n+ \u5982\u679c\u8fd9\u4e2a\u4fbf\u4ece\u4e0d\u80fd\u8d70\u53d8\u4e3a\u80fd\u8d70\n\n\u5c31\u4e0d\u4f1a\u4e86\u3002\u56e0\u4e3a\u4e24\u79cd\u4e1c\u897f\u90fd\u6ca1\u6cd5\u641e\u3002\n\n## \u6b63\u89e3\n\n\u4e24\u79cd\u5f62\u5f0f\u7684\u66b4\u529b\uff1a\n\n1. \u679a\u4e3e\u6240\u6709\u8fb9\uff0c\u770b\u8fb9\u4e2d\u6709\u54ea\u4e9b\u8fb9\u53ef\u4ee5\u8d70\uff0c\u628a\u4e24\u4e2a\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u770b\u5927\u5c0f\u3002\n2. \u628a\u6240\u6709\u8be2\u95ee\u6392\u5e8f\uff08\u6309\u7167\u80fd\u8d70\u7684\u8fb9\u7684\u6700\u5927\u503c\uff09\u3002\u4e0b\u9762\u628a\u8fb9\u5206\u4e3a\u4e24\u7c7b\uff1a\n   1. \u8fd9\u6761\u8fb9\u88ab\u66f4\u6539\u8fc7\u3002\u679a\u4e3e\u6240\u6709\u66f4\u6539\u8fc7\u7684\u8fb9\uff0c\u5408\u5e76\u3002\u7136\u540e\u64a4\u9500\u6389\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5bf9\u6392\u597d\u5e8f\u4e4b\u540e\u7684\u5176\u4ed6\u6392\u5e8f\u9020\u6210\u5f71\u54cd\u3002\n   2. \u8fd9\u6761\u8fb9\u6ca1\u6709\u88ab\u66f4\u6539\u8fc7\u3002\u90a3\u4e48\u628a\u6240\u6709\u8fb9\u6309\u7167\u6743\u503c\u6392\u5e8f\uff0c\u6bcf\u6b21\u8be2\u95ee\u52a0\u5165\u4e00\u4e9b\u8fb9\u3002\n\n\u73b0\u5728\u5408\u5e76\u4e24\u4e2a\u66b4\u529b\uff0c\u6211\u4eec\u8003\u8651\u5206\u5757\uff08\u8fd9\u6709\u4e9b\u5957\u8def......\uff09\u3002\u8bbe\u5757\u7684\u5927\u5c0f\u4e3a$S$\uff0c\u6bcf\u4e00\u5757\u7ed9\u6240\u6709\u5728\u8be5\u5757\u5185\u6ca1\u88ab\u66f4\u6539\u7684\u8fb9\u6392\u4e00\u904d\u5e8f\u3002\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u662f$O(\\frac{m}{S}mlog_2m)$\u3002\u5728\u540c\u4e00\u5757\u5185\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u627e\u6240\u6709\u5728\u5b83\u524d\u9762\u7684\u66f4\u6539\uff0c\u770b\u8fd9\u4e2a\u8fb9\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\uff0c\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\uff0c\u90a3\u4e48\u5c31\u5408\u5e76\u4e24\u4e2a\u7aef\u70b9\u3002\u5728\u5408\u5e76\u5b8c\u6240\u6709\u8fb9\u4e4b\u540e\uff0c\u518d\u64a4\u9500\u6389\u6240\u6709\u5408\u5e76\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f$O(\\frac{m}{S}S^2log_2n)=O(mSlog_2n)$\u3002\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u4e3a$\\frac{m}{S}mlog_2m+mSlog_2n$\u7684\u3002\u53ef\u4ee5\u8ba4\u4e3a$n,m$\u662f\u540c\u9636\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a\u5f0f\u5b50\u5316\u4e3a$\\frac{n^2}{S}log_2n+nSlog_2n$\u3002\u5229\u7528\u5747\u503c\u4e0d\u7b49\u5f0f\u53ef\u77e5\uff0c$\\frac{n^2}{S}log_2n+nSlog_2n\\ge \\sqrt{n^{3}log_2^2n}=n^{\\frac{3}{2}}log_2n$\u3002\u53ef\u4ee5\u53d1\u73b0\u5728$\\frac{n^2}{S}log_2n=nSlog_2n$\u7684\u65f6\u5019\u53d6\u5f97\u6700\u4f18\u503c\uff0c\u5373$S=\\sqrt{n}$\u65f6\u53d6\u6700\u4f18\u89e3\u3002\n\n\u611f\u89c9\u5b9e\u73b0\u597d\u9ebb\u70e6\u554a\uff01\n\n## \u77e5\u8bc6\u70b9\n\n+ \u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6309\u9ad8\u5ea6\u5408\u5e76\u590d\u6742\u5ea6\u5206\u6790\uff1a\n  + \u4e00\u4e2a\u9ad8\u5ea6\u4e3a$h$\u7684\u6811\uff0c\u5fc5\u7136\u662f\u4e24\u4e2a\u9ad8\u5ea6\u4e3a$h-1$\u7684\u6811\u5408\u5e76\u51fa\u6765\u7684\u3002\n+ \u7ecf\u5178\u95ee\u9898\u7ed3\u70b9\u89e3\u6cd5\uff08\u4e0d\u5e26\u66f4\u6539\u7684\u89e3\u6cd5\uff09\uff1a\n  + \u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u8be2\u95ee\u6309\u7167\u80fd\u8d70\u7684\u8def\u7684\u6700\u5927\u9650\u5ea6\u6392\u5e8f\uff0c\u4e00\u6761\u4e00\u6761\u7684\u52a0\u8fb9\u3002\uff08\u89c1\u5230\u8fd9\u79cd\u9898\uff0c\u4e00\u5b9a\u8981\u5f80\u8fd9\u91cc\u60f3\u4e00\u60f3\uff0c\u4e00\u5f00\u59cb\u5c31\u6ca1\u60f3\u8fd9\u4e2a\uff0c\u60f3\u7684\u662f```kruaskal```\u91cd\u6784\u6811\uff09\u3002\n+ \u5361\u5e38\u5c0f\u5e38\u8bc6\uff1a\n  + \u5bf9\u4e8e\u90a3\u79cd\u5361\u4e0d\u8fc7\u53bb\u5206\u5757\u9898\uff0c\u53ef\u4ee5\u628a\u5757\u7684\u5927\u5c0f\u6539\u4e3a\u539f\u6765\u7684```4```\u500d\u3002\n  + \u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6309\u7167\u5927\u5c0f\u5408\u5e76\uff0c\u53ef\u4ee5\u4e00\u6b21\u64cd\u4f5c\u53ea\u5165\u961f\u4e00\u4e2a\u70b9\uff08\u5c31\u662f\u90a3\u4e2a\u7236\u4eb2\u88ab\u66f4\u6539\u4e86\u7684\u70b9\uff09\u3002\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a\u7248\u672c\u4e86\u3002\n\n## \u4ee3\u7801\n\n[Link](https://paste.ubuntu.com/p/HnPF7Tt7Bs/)",
        "postTime": 1576685236,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[APIO2019]\u6865\u6881"
    },
    {
        "content": "\u5907\u9009 T3 \u3002                   \n\n\u4ec0\u4e48\u5c51\u9898\u554a\uff0c\u628a\u5757\u957f\u5f00\u6210 $3\\sqrt n$ \u5c31\u8dd1\u7684\u98de\u5feb\u8fde\u5e38\u90fd\u4e0d\u7528\u5361\uff0c\u800c\u5f00\u4e2a\u6b63\u7ecf\u7684 $\\sqrt n$ \u5c31 T \u98de\u4e86\u3002              \n\n\u5176\u5b9e\u8fd8\u662f\u633a\u7b80\u5355\u7684\uff0c\u53ea\u8981\u60f3\u5230\u8be2\u95ee\u5206\u5757\u5373\u53ef\u3002                 \n\n\u8003\u8651\u5230\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u5982\u4f55\u5904\u7406\uff1a\u5c06\u5f53\u524d\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u4e2d\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u8be2\u95ee $w$ \u7684\u8fb9\u52a0\u8fdb\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u5e76\u67e5\u96c6\u4e2d\u6700\u540e\u8bbf\u95ee\u70b9 $b$ \u7684\u8fde\u901a\u5757\u5927\u5c0f\u3002          \n\n\u6709\u4e86\u8fd9\u4e2a\u601d\u60f3\u540e\u6211\u4eec\u53d1\u73b0\u52a0\u8fdb\u53bb\u7684\u8fb9\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u6ee1\u8db3\u6743\u503c\u5927\u4e8e\u7b49\u4e8e\u8be2\u95ee $w$\u3002\u90a3\u4e48\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u4e9b\u8be2\u95ee\u548c\u4e00\u4e9b\u6309\u6743\u503c\u4ece\u5927\u5230\u5c0f\u6392\u7684\u8fb9\u548c\u4e00\u4e9b\u6309 $w$ \u4ece\u5927\u5230\u5c0f\u6392\u7684\u8be2\u95ee\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53cc\u6307\u9488\u505a\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002                \n\n\u8003\u8651\u8be2\u95ee\u5206\u5757\uff0c\u4ee4\u5757\u957f\u4e3a $\\sqrt q$ \uff0c\u5bf9\u4e8e\u6bcf\u6761\u4e0d\u5728\u5757\u5185\u4fee\u6539\u7684\u8fb9\u6211\u4eec\u63d0\u51fa\u6765\u6392\u5e8f\uff0c\u5bf9\u4e8e\u5757\u5185\u7684\u8be2\u95ee\u6211\u4eec\u4e5f\u63d0\u51fa\u6765\u6309 $w$ \u6392\u5e8f\u3002\u7136\u540e\u8fd9\u4e00\u90e8\u5206\u7684\u8fb9\u5408\u5e76\u6211\u4eec\u5c31\u7528\u4e0a\u8ff0\u7684\u53cc\u6307\u9488\u6765\u505a\u5c31\u597d\u4e86\uff0c\u7531\u4e8e\u53ea\u6709\u6bcf\u4e2a\u5757\u8981\u505a\u4e00\u6b21\u53cc\u6307\u9488\u548c\u6392\u5e8f\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(m \\sqrt q (\\log m + \\log n))$ \u3002           \n\n\u8003\u8651\u5bf9\u5757\u5185\u7684\u8fb9\u66b4\u529b\u505a\uff0c\u5148\u5bf9\u4e8e\u6240\u6709\u5f53\u524d\u8be2\u95ee\u524d\u7684\u4fee\u6539\u76f4\u63a5\u6539\u6389\uff0c\u518d\u628a\u5f53\u524d\u5757\u5185\u7684\u5408\u6cd5\u8fb9\u52a0\u5165\u5e76\u67e5\u96c6\u4e2d\u56de\u7b54\u8be2\u95ee\uff0c\u8003\u8651\u5230\u6211\u4eec\u6392\u5e8f\u5df2\u7ecf\u6709 $O(m \\sqrt q \\log m)$ \u4e86\u6240\u4ee5\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u64a4\u9500\u8fd9\u4e9b\u8fb9\uff0c\u6700\u540e\u8fd9\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(q \\sqrt q \\log n)$ \u3002                \n\n\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u4f18\u5316\u662f\u5bf9\u4e8e\u5757\u5185\u7684\u8fb9\u4e0d\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u76f4\u63a5\u5e76\u67e5\u96c6\u7f29\u70b9\u540e\u91cd\u65b0\u5efa\u56fe\u8dd1\uff0c\u90a3\u4e48\u524d\u9762\u53cc\u6307\u9488\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u5e76\u67e5\u96c6 $O(m \\sqrt q a(n))$ \uff0c\u800c\u5757\u5185\u7684\u8fb9\u4ec5\u9700\u8981 $O(q\\sqrt q)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u540e\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(m \\sqrt q a(n))$ \u4e86\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u505a\u6cd5\u5e38\u6570\u8f83\u5927\u4e0d\u63a8\u8350\u5199\u3002       \n\n~~\u8fd8\u662f\u548c P3247 \u592a\u50cf\u4e86\u3002~~\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 1e5 + 5 , SIZE = 335;\nint top,Ans[Len],n,m,t,sizt,L[SIZE],R[SIZE],q,cnt,flag[Len],eedge[Len],ssedge[Len],ccnt,qcnt,smr[Len];\nstruct Ques\n{\n\tint opt,b,r;\n}qu[Len];\nstruct node\n{\n\tint x,y,w;\n}edge[Len];\nbool cmmp(int x,int y){return qu[x].r > qu[y].r;}\nbool cmp(int x,int y){return edge[x].w > edge[y].w;}\nstruct Node\n{\n\tint x,y,siz;\n\tNode(){x = y = siz = 0;}\n\tNode(int X,int Y,int SIZ){x = X , y = Y , siz = SIZ;}\n}stk[Len];\nstruct NNode\n{\n\tint fa[Len],siz[Len];\n\tvoid makeSet(){top = 0;for(int i = 1 ; i <= n ; i ++) fa[i] = i , siz[i] = 1;}\n\tint findSet(int x){return fa[x] == x ? fa[x] : findSet(fa[x]);}\n\tvoid unionSet(int x,int y)\n\t{\n\t\tint u = findSet(x) , v = findSet(y);\n\t\tif(u == v) return;\n\t\tif(siz[u] < siz[v]) swap(u , v);\n\t\tstk[++ top] = Node(u , v , siz[u]);\n\t\tfa[v] = u , siz[u] += siz[v];\n\t}\n\tvoid del(int ID)\n\t{\n\t\tint u = stk[ID].x , v = stk[ID].y;\n\t\tfa[v] = v , siz[u] = stk[ID].siz;\n\t}\n}S1;\nsigned main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i = 1 ; i <= m ; i ++) scanf(\"%d %d %d\",&edge[i].x,&edge[i].y,&edge[i].w);\n\tscanf(\"%d\",&q);\n\tfor(int i = 1 ; i <= q ; i ++) scanf(\"%d %d %d\",&qu[i].opt,&qu[i].b,&qu[i].r);\n\tt = 1024; \n\tsizt = q / t;\n\tfor(int i = 1 ; i <= sizt ; i ++) L[i] = (i - 1) * t + 1 , R[i] = i * t;\n\tif(R[sizt] < q)\n\t{\n\t\tsizt ++;\n\t\tL[sizt] = R[sizt - 1] + 1;\n\t\tR[sizt] = q;\n\t}\n\tfor(int i = 1 ; i <= sizt ; i ++) \n\t{\n\t\tcnt = ccnt = qcnt = 0;S1.makeSet();int idx = 1;\n\t\tfor(int j = L[i] ; j <= R[i] ; j ++) \n\t\t{\n\t\t\tif(qu[j].opt == 1) flag[qu[j].b] = i , ssedge[++ ccnt] = qu[j].b;\n\t\t\telse smr[++ qcnt] = j;\n\t\t}\n\t\tfor(int j = 1 ; j <= m ; j ++) if(flag[j] != i) eedge[++ cnt] = j;\n\t\tsort(eedge + 1 , eedge + 1 + cnt , cmp);\n\t\tsort(ssedge + 1 , ssedge + 1 + ccnt);\n\t\tsort(smr + 1 , smr + 1 + qcnt , cmmp);\n\t\tccnt = unique(ssedge + 1 , ssedge + 1 + ccnt) - ssedge - 1;\n\t\tfor(int j = 1 ; j <= qcnt ; j ++)\n\t\t{\n\t\t\twhile(idx <= cnt && edge[eedge[idx]].w >= qu[smr[j]].r) \n\t\t\t{\n\t\t\t\tS1.unionSet(edge[eedge[idx]].x , edge[eedge[idx]].y);\n\t\t\t\tidx ++;\n\t\t\t}\n\t\t\tint Top = top;\n\t\t\tfor(int k = L[i] ; k <= smr[j] ; k ++) if(qu[k].opt == 1) swap(edge[qu[k].b].w , qu[k].r); \n\t\t\tfor(int k = 1 ; k <= ccnt ; k ++) if(edge[ssedge[k]].w >= qu[smr[j]].r) S1.unionSet(edge[ssedge[k]].x , edge[ssedge[k]].y);\n\t\t\tAns[smr[j]] = S1.siz[S1.findSet(qu[smr[j]].b)];\n\t\t\twhile(top > Top) S1.del(top --); \n\t\t\tfor(int k = smr[j] ; k >= L[i] ; k --) if(qu[k].opt == 1) swap(edge[qu[k].b].w , qu[k].r);\n\t\t}\n\t\tfor(int j = L[i] ; j <= R[i] ; j ++) if(qu[j].opt == 1) edge[qu[j].b].w = qu[j].r;\n\t}\n\tfor(int i = 1 ; i <= q ; i ++) if(qu[i].opt == 2) printf(\"%d\\n\",Ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1629851950,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5443 [APIO2019]\u6865\u6881"
    }
]