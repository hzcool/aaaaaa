[
    {
        "content": "\u4f5c\u4e3a\u4e00\u9053\u7801\u519c\u9898\u2026\u2026\n\n(SA+\u4e8c\u5206\u5957(\u4e3b\u5e2d\u6811+\u4e8c\u5206))\u6015\u4e0d\u662f\u771f\u00b7\u7406\u8bba\u590d\u6742\u5ea6O(Nlog^2N)\n\n\u5982\u679c\u719f\u7ec3\u7684\u538b\u884c\u7684\u8bdd\u5e94\u8be5\u53ef\u4ee5\u505a\u5230\u767e\u884c\u4ee5\u5185\u5427\n\n\u90a3\u4e48\u6211\u4eec\u6765\u8bb2\u89e3\u4e00\u4e0b\u8fd9\u9053\u9898\uff1a\u8bbe\u6211\u4eec\u7684\u7b54\u6848\u4e3amid(\u6ce8\u610f\u8fd9\u91cc\u6709\u5751\u662f\\[a,b]\u7684**\u6240\u6709**\u5b50\u4e32\u548c\\[c,d]**\u8fd9\u4e2a**\u5b50\u4e32\u7684\u6700\u957flcp),\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u4e8b\u5b9e: _\u5982\u679cmid\u53ef\u884c\u7684\u8bdd\uff0c\u90a3\u4e48\u4efb\u610f\u4e00\u4e2a\u6bd4mid\u5c0f\u7684\u6570\u4e5f\u53ef\u884c_ \n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u95ee\u9898\u6ee1\u8db3**\u53ef\u4e8c\u5206\u6027**\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\uff0c\u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a**\u5224\u5b9a\u6027\u95ee\u9898**:mid\u8fd9\u4e2a\u7b54\u6848\u884c\u4e0d\u884c\uff1f\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679cmid\u8fd9\u4e2a\u7b54\u6848\u53ef\u4ee5\u7684\u8bdd\uff0c\u5c31**\u4f1a\u5b58\u5728**\u4e00\u4e2a\u540e\u7f00S\uff0c\n\n1.\u5b83\u7684\u5f00\u5934\u5728\\[a,b-mid+1]\u5f53\u4e2d\u3002\n\n2.lcp(S,c)>=mid\u3002\n\n\u518d\u6b21\u8f6c\u5316\u4e00\u6b65\uff0c\u5c31\u662f\u8be2\u95ee\u6ee1\u8db3\u4ee5\u4e0a\u4e24\u4e2a\u6761\u4ef6\u7684\u540e\u7f00S\u7684\u4e2a\u6570\uff0c\u7ecf\u5178\u7684\u4e8c\u5143\u9650\u5236\u7edf\u8ba1\u95ee\u9898\uff0c\u6211\u4eec\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u6441\u6b7b\u4e00\u4e2a\u518d\u53bb\u7ba1\u4e0b\u4e00\u4e2a\uff0c\u53d1\u73b0\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u5b9e\uff1a\u5982\u679c\u628a\u8fd9\u4e9b\u540e\u7f00\u6392\u597d\u5e8f\uff0c\u90a3\u4e48lcp\u7b26\u5408\u8981\u6c42\u7684\u4e00\u5b9a\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c(\u4e3a\u4ec0\u4e48\uff1f\uff0c\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u6392\u597d\u5e8f\u4ee5\u540e\uff0clcp\u8fd9\u4e2a\u51fd\u6570\u662f\u5355\u5cf0\u7684\uff0c\u5e76\u4e14\u5cf0\u503c\u5728\u81ea\u5df1\u8fd9\u91cc)\n\n\u90a3\u4e48\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u4e8c\u5206\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\uff0c\u4e3a\u6b64\u6211\u4eec\u9700\u8981O(1)\u6c42\u51fa\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u4e3a\u6b64\u6211\u4eec\u8fd8\u5f97\u5199\u4e00\u4e2aSt\u8868QAQ\n\n\u90a3\u4e48\u6700\u540e\u6211\u4eec\u53d1\u73b0\u73b0\u5728\u4e24\u4e2a\u9650\u5236\u90fd\u662f\u533a\u95f4\u578b\u7684\u4e86\uff0c\u800c\u4e14\u662f\u9759\u6001\u533a\u95f4\uff0c\u6ca1\u6709\u4fee\u6539\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u67e5\u8be2\u4e00\u53d1\u2026\u2026\n\n### \u4e0b\u9762\u662f\u79d1\u666e\n\n _\u53ea\u662f\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8e\u6570\u636e\u7ed3\u6784/\u7b97\u6cd5\u7684\u5f15\u7533\uff0c\u5e76\u4e0d\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u539f\u7406\uff0c\u5982\u679c\u4e0d\u4f1a\u7684\u8bdd\u770b\u5bf9\u5e94\u7684\u819c\u677f\u5427\uff0c\u89e3\u91ca\u7684\u90fd\u5f88\u8be6\u7ec6_ \n \n######  \u5173\u4e8e\u540e\u7f00\u6570\u7ec4\n\nht\u6570\u7ec4\u7684\u610f\u4e49\u662f\uff0clcp(rk\\[i-1],rk\\[i])\uff0c\u6240\u4ee5ht\u6570\u7ec4\u662f\u5728\u6309sa\u5e8f\u6392\u51fa\u6765\u4e4b\u540e\u624d\u6709\u610f\u4e49\u7684\uff0c\u53e6\u5916\u6211\u4eec\u4f1a\u53d1\u73b0ht\u6570\u7ec4\u662f\u201c\u5411\u4e0a\u201d\u5339\u914d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u533a\u95f4min\u6765\u67e5\u8be2\u4efb\u610f\u4e24\u4e2a\u4e32\u7684lcp\u65f6\u67e5\u8be2\u7684\u662f(rk\\[a],rk\\[b]]\u5373**\u5de6\u5f00\u53f3\u95ed**\u533a\u95f4\u3002\n\n###### \u5173\u4e8est\u8868\n\n\u8003\u8651\u5230ht\u6570\u7ec4\u5411\u4e0a\u5339\u914d\u7684\u7279\u6027\uff0c\u6211\u4eec\u7684\u533a\u95f4min\u4e5f\u5199\u6210\u5de6\u5f00\u53f3\u95ed\u5c31\u597d\u4e86\n\n###### \u5173\u4e8e\u4e3b\u5e2d\u6811\n\n\u4e3b\u5e2d\u6811\u5176\u5b9e\u662f\u7ebf\u6bb5\u6811\u7684\u524d\u7f00\u548c\uff0c\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u901a\u5e38\u662f\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u4ee5\u6ee1\u8db3\u6211\u4eec\u5bf9\u6743\u503c\u7684\u533a\u95f4\u9650\u5236\u8981\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u5efa\u4e3b\u5e2d\u6811\u7684\u65f6\u5019\u901a\u5e38\u662f\u4e00\u4e2a\u70b9\u4e00\u4e2a\u70b9\u63d2\u5165\uff0c\u4ee5\u6ee1\u8db3\u6bcf\u4e00\u4e2a\u5b9e\u9645\u533a\u95f4\u7684\u8981\u6c42\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bb2\uff0c\u6211\u4eec\u5bf9sa\u5efa\u4e3b\u5e2d\u6811\uff0c\u56e0\u4e3a\u6700\u540e\u5b9e\u9645\u4e0a\u7b2c\u4e8c\u6b21\u4e8c\u5206\u7684\u533a\u95f4\u662f\u4e00\u4e2a\u5728sa\u5e8f\u4e0a\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u67e5\u8be2\u9650\u5236\u7684\u5219\u662f\u8fd9\u4e2a\u540e\u7f00\u7684\u5b9e\u9645\u7f16\u53f7\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u7684\u6743\u503c\u662f\u540e\u7f00\u7684\u7f16\u53f7\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int N=100010;int n;int m;\nchar mde[N];int sa[N];int rk[2*N];int ht[N];\nint x[N];int y[N];queue <int> q[N];\ninline bool cmp(int i,int j){return (x[i]==x[j])&&(y[i]==y[j]);}\ninline void rixs()//\u8fd9\u91cc\u7684\u540e\u7f00\u6570\u7ec4\u7528\u7684\u662f\u961f\u5217\u5b9e\u73b0\uff0c\u5e38\u6570\u8f83\u5927\n{\n    for(int i=1;i<=n;i++){q[y[i]].push(i);}\n    int cnt=0;for(int i=0;i<=n;i++)\n    {for(;!q[i].empty();q[i].pop()){sa[++cnt]=q[i].front();}}\n    for(int i=1;i<=n;i++){q[x[sa[i]]].push(sa[i]);}\n    cnt=0;for(int i=0;i<=n;i++)\n    {for(;!q[i].empty();q[i].pop()){sa[++cnt]=q[i].front();}}\n    rk[sa[1]]=1;for(int i=2;i<=n;i++)\n    {rk[sa[i]]=(cmp(sa[i-1],sa[i]))?rk[sa[i-1]]:i;}\n}\ninline void create_sa()//\u677f\u5b50\u5565\u7684\u95ee\u5ea6\u5a18\u5427\n{\n    for(int i=1;i<=n;i++){q[mde[i]-'a'+1].push(i);}\n    int cnt=0;for(int i=1;i<=26;i++)\n    {for(;!q[i].empty();q[i].pop()){sa[++cnt]=q[i].front();}}\n    rk[sa[1]]=1;for(int i=2;i<=n;i++)\n    {rk[sa[i]]=(mde[sa[i-1]]==mde[sa[i]])?rk[sa[i-1]]:i;}\n    for(int k=1;k<=n;k*=2)\n    {for(int i=1;i<=n;i++){x[i]=rk[i];y[i]=rk[i+k];}rixs();}\n}\ninline void calch()\n{\n    int j=0;int k=0;for(int i=1;i<=n;ht[rk[i++]]=k)\n    {for(k=k?k-1:k,j=sa[rk[i]-1];mde[i+k]==mde[j+k];k++);}\n}\nint st[22][N];int log[N];\ninline void calclog()//\u6253\u8868log\uff0c\u65b9\u4fbf\u4f7f\u7528\n{int i=0;for(int j=1;j<=n;j++){if((1<<(i+1))<=j)i++;log[j]=i;}}\ninline void create_st()//\u5bf9ht\u5efast\u8868\n{\n    for(int i=0;i<=n-1;i++){st[0][i]=ht[i+1];}\n    for(int i=1;i<=log[n];i++)\n    {for(int j=0;j<n-(1<<(i-1));j++){st[i][j]=min(st[i-1][j],st[i-1][j+(1<<(i-1))]);}}\n}\ninline int rmq(int l,int r)//\u5de6\u5f00\u53f3\u95ed\u7684rmq\n{int len=r-l;int res=min(st[log[len]][l],st[log[len]][r-(1<<log[len])]);return res;}\nstruct per_linetree//\u4e3b\u5e2d\u6811\u7684\u677f\u5b50\uff0c\u8fd9\u4e2a\u771f\u7684\u662f\u7eaf\u677f\u5b50\u4e86\n{\n    int s[2][44*N];int fa[44*N];int root[N];int cnt;int val[44*N];\n    per_linetree(){root[0]=1;cnt=1;}\n    inline void insert(int p1,int p2,int l,int r,int pos)\n    {\n        val[p2]=val[p1]+1;if(r-l==1)return;int mid=(l+r)/2;\n        if(pos<=mid){s[0][p2]=++cnt;s[1][p2]=s[1][p1];insert(s[0][p1],cnt,l,mid,pos);}\n        else {s[1][p2]=++cnt;s[0][p2]=s[0][p1];insert(s[1][p1],cnt,mid,r,pos);}\n    }\n    inline void add(int t1,int t2,int pos)\n    {root[t2]=++cnt;insert(root[t1],root[t2],0,n,pos);}\n    inline int sum(int p1,int p2,int l,int r,int dl,int dr)\n    {\n        if(dl==l&&dr==r){return val[p2]-val[p1];}int mid=(l+r)/2;int res=0;\n        if(dl<mid)res+=sum(s[0][p1],s[0][p2],l,mid,dl,min(dr,mid));\n        if(mid<dr)res+=sum(s[1][p1],s[1][p2],mid,r,max(dl,mid),dr);\n        return res;\n    }\n    inline int query(int t1,int t2,int l,int r)\n    {return sum(root[t1-1],root[t2],0,n,l-1,r);}\n}plt;\ninline bool jud(int x,int a,int b,int c)//\u68c0\u6d4bmid\u662f\u5426\u53ef\u884c\n{\n    int l=1;int r=rk[c];int up;int down;//\u4e8c\u5206\u4e0a\u8fb9\u754c\uff0c\u6ce8\u610f\u662f\u5de6\u5f00\u53f3\u95ed\n    while(l<r){int mid=(l+r)/2;if(rmq(mid,rk[c])<x){l=mid+1;}else {r=mid;}}\n    up=r;\n    l=rk[c];r=n;//\u4e8c\u5206\u4e0b\u8fb9\u754c\n    while(l<r){int mid=(l+r+1)/2;if(rmq(rk[c],mid)<x){r=mid-1;} else{l=mid;}}\n    down=r;\n    return plt.query(up,down,a,b-x+1)!=0;//\u4e3b\u5e2d\u6811\u67e5\u4e00\u53d1\u662f\u5426\u5b58\u5728\u7b26\u5408\u8981\u6c42\u7684\u540e\u7f00\n}\ninline int solve(int a,int b,int c,int d)//\u4e3b\u4e8c\u5206\u8fc7\u7a0b\n{\n    int l=0;int r=min(b-a+1,d-c+1);//\u8fd9\u4e2a\u5c31\u662f\u88f8\u7684\u4e8c\u5206\u7b54\u6848\u4e86\n    while(l<r){int mid=(l+r+1)/2;if(jud(mid,a,b,c)){l=mid;}else {r=mid-1;}}\n    return r;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);scanf(\"%s\",mde+1);\n    create_sa();calch();calclog();create_st();//\u4e0a\u6765\u5148\u9884\u5904\u7406\n    for(int i=1;i<=n;i++){plt.add(i-1,i,sa[i]);}//\u5bf9sa\u5efa\u4e3b\u5e2d\u6811\n    for(int i=1;i<=m;i++)\n    {\n        int a;int b;int c;int d;\n        scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n        printf(\"%d\\n\",solve(a,b,c,d));\n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n}\n```\n",
        "postTime": 1518660509,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4094 \u3010[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "## [\u9898\u610f](https://www.luogu.com.cn/problem/P4094)\n\n\u8003\u8651\u4e8c\u5206\u7b54\u6848$mid$,\u73b0\u5728\u6211\u4eec\u8981\u5224\u65ad$s[c...c+mid-1]$\u662f\u5426\u5728$s[a...b]$\u51fa\u73b0\u8fc7\u3002\n\n\n\u9996\u5148\u627e\u5230$s[c...c+mid-1]$\u6240\u5728\u7684\u72b6\u6001\uff1a  \n\u5efa\u51fa$parent\\ tree$\uff0c\u4ece$s[1...c+mid-1]$\u7684\u8282\u70b9\uff08\u8fd9\u4e2a\u53ef\u4ee5\u8bb0\u5f55\uff09\u7528\u500d\u589e\u5411\u4e0a\u8df3\u5230\u6700\u540e\u4e00\u4e2a$len\\geqslant mid$\u7684\u8282\u70b9\u5373\u53ef\uff0c\u8bb0\u8fd9\u4e2a\u8282\u70b9\u4e3a$now$\u3002\n\n\u4e4b\u540e\u6211\u4eec\u8981\u5224\u65ad$now$\u7684$endpos$\u4e2d\u662f\u5426\u542b\u6709$[a+mid-1,b]$\u4e2d\u7684\u67d0\u4e2a\u6570\uff0c\u6211\u4eec\u7ed9\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u7528\u6765\u7ef4\u62a4\u8be5\u8282\u70b9$endpos$\uff08\u76f8\u5f53\u4e8e\u6876\uff09\uff0c\u4ece$parent\\ tree$\u5411\u4e0a\u5408\u5e76\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\ncode:\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500010;\nint n,m,tot,cnt,t;\nint id[maxn],root[maxn],head[maxn];\nint f[maxn][20];\nchar s[maxn];\nstruct edge{int to,nxt;}e[maxn<<1];\nstruct Seg\n{\n\t#define lc(p) (seg[p].lc)\n\t#define rc(p) (seg[p].rc)\n\t#define sum(p) (seg[p].sum)\n\tint lc,rc,sum;\n}seg[maxn*60];\ninline int read()\n{\n\tchar c=getchar();int res=0,f=1;\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9')res=res*10+c-'0',c=getchar();\n\treturn res*f;\n}\ninline void add_edge(int u,int v)\n{\n\te[++cnt].nxt=head[u];\n\thead[u]=cnt;\n\te[cnt].to=v;\n}\ninline void up(int p){sum(p)=sum(lc(p))+sum(rc(p));}\nvoid insert(int &p,int l,int r,int pos)\n{\n\tif(!p)p=++tot;\n\tsum(p)++;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(pos<=mid)insert(lc(p),l,mid,pos);\n\telse insert(rc(p),mid+1,r,pos);\n}\nint query(int p,int l,int r,int ql,int qr)\n{\n\tif(l>=ql&&r<=qr)return sum(p);\n\tint mid=(l+r)>>1,res=0;\n\tif(ql<=mid)res+=query(lc(p),l,mid,ql,qr);\n\tif(qr>mid)res+=query(rc(p),mid+1,r,ql,qr);\n\treturn res;\n}\nint merge(int p,int q,int l,int r)\n{\n\tif(!p||!q)return p+q;\t\n\tint x=++tot,mid=(l+r)>>1;sum(x)=sum(p)+sum(q);\n\tif(l==r)return x; \n\tlc(x)=merge(lc(p),lc(q),l,mid);\n\trc(x)=merge(rc(p),rc(q),mid+1,r);\n\treturn x;\n}\nstruct SAM\n{\n\tint tot,last;\n\tint fa[maxn],len[maxn];\n\tint ch[maxn][30];\n\tSAM(){last=tot=1;}\n\tinline void add(int c)\n\t{\n\t\tint now=++tot;len[now]=len[last]+1;\n\t\tint p=last;last=now;\n\t\twhile(p&&!ch[p][c])ch[p][c]=now,p=fa[p];\n\t\tif(!p){fa[now]=1;return;}\n\t\tint q=ch[p][c];\n\t\tif(len[q]==len[p]+1)fa[now]=q;\n\t\telse\n\t\t{\n\t\t\tint nowq=++tot;\n\t\t\tlen[nowq]=len[p]+1;\n\t\t\tmemcpy(ch[nowq],ch[q],sizeof(ch[q]));\n\t\t\tfa[nowq]=fa[q];fa[q]=fa[now]=nowq;\n\t\t\twhile(p&&ch[p][c]==q)ch[p][c]=nowq,p=fa[p];\n\t\t}\n\t}\n}sam;\nvoid dfs(int x)\n{\n\tfor(int i=1;i<=t;i++)f[x][i]=f[f[x][i-1]][i-1];\n\tfor(int i=head[x];i;i=e[i].nxt)\n\t{\n\t\tint y=e[i].to;\n\t\tf[y][0]=x;dfs(y);\n\t\troot[x]=merge(root[x],root[y],1,n);\n\t}\n}\ninline bool check(int mid,int a,int b,int c,int d)\n{\n\tint now=id[c+mid-1];\n\tfor(int i=t;~i;i--)if(f[now][i]&&sam.len[f[now][i]]>=mid)now=f[now][i];\n\treturn query(root[now],1,n,a+mid-1,b)>0;\n}\nint main()\n{\n\tn=read(),m=read();\n\tscanf(\"%s\",s+1);\n\tid[0]=1;\n\tfor(int i=1;i<=n;i++)sam.add(s[i]-'a'),id[i]=sam.last,insert(root[sam.last],1,n,i);\n\tfor(int i=2;i<=sam.tot;i++)add_edge(sam.fa[i],i);\n\tt=(int)log2(sam.tot)+1;dfs(1);\n\twhile(m--)\n\t{\n\t\tint a=read(),b=read(),c=read(),d=read();\n\t\tint l=0,r=min(b-a+1,d-c+1),ans=0;\n\t\twhile(l<=r)\n\t\t{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(check(mid,a,b,c,d))ans=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1576578672,
        "uid": 145441,
        "name": "nofind",
        "ccfLevel": 6,
        "title": "P4094 [HEOI2016/TJOI2016]\u5b57\u7b26\u4e32(\u540e\u7f00\u81ea\u52a8\u673a+\u7ebf\u6bb5\u6811\u5408\u5e76)"
    },
    {
        "content": "[\u9996\u5148\u5b89\u5229\u4e00\u6ce2blog](http://labelray.top/2018/09/27/heoi2016-tjoi2016%e5%ad%97%e7%ac%a6%e4%b8%b2/)\n\n\u542c\u8bf4\u8fd9\u9898\u6b63\u89e3\u662f\u4e3b\u5e2d\u6811\u4ec0\u4e48\u7684\uff0c\u4f46\u662f\u4e0d\u592a\u4f1a\u5199\uff0c\u6240\u4ee5\u5c31\u5199\u4e86\u4e00\u4e2a\u66b4\u529b\u8bd5\u7740\u9a97\u5206\uff0c\u6ca1\u60f3\u5230\u7adf\u7136\u8fc7\u4e86\u800c\u4e14\u6bd4\u4e3b\u5e2d\u6811\u5feb\u597d\u591a2333\n\n\u770b\u5230\u4ec0\u4e48\u6700\u957f\u516c\u5171\u524d\u7f00\uff08LCP\uff09\u7b2c\u4e00\u53cd\u5e94\u5c31\u5e94\u8be5\u662f\u540e\u7f00\u6570\u7ec4\n\n\u9898\u76ee\u8981\u6c42$s[a\\dots b]$\u7684\u4e00\u4e2a\u5b50\u4e32\u4e0e$s[c\\dots d]$\u7684LCP\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f$s[e\\dots b](a\\leq e\\leq b)$\u4e0e$s[c\\dots d]$\u7684LCP\u3002\n\n\u6211\u4eec\u5c06\u4ece$x$\u5f00\u59cb\u7684\u540e\u7f00\u79f0\u4e3a$\\text{Suffix}(x)$\uff0c\u4ee4$L=|\\text{LCP}(\\text{Suffix}(e), \\text{Suffix}(c))|$\uff0c\u5219$|\\text{LCP}(s[e\\dots b], s[c\\dots d])|=\\min\\{b-e+1, d-c+1, L\\}$\n\n\u5047\u8bbe\u6709\u6700\u4f18\u89e3\u65f6\uff0c$rk[e]<rk[c]$\u3002\u56e0\u4e3a$L=\\min\\limits_{rk[e]< i\\leq rk[c]}height[i]$\uff0c\u6240\u4ee5$L$\u5c31\u53ef\u4ee5\u76f4\u89c2\u7406\u89e3\u4e3a\u4ece$rk[c]$\u5411\u524d\u626b\u5230$rk[e]+1$\u5176\u4e2d\u7ecf\u5386\u7684$height$\u6700\u5c0f\u503c\n\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u64cd\u4f5c\uff0c\u5728`for(int i=rk[c];i>=2;i--)`\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9047\u5230$a\\leq sa[i]\\leq b$\uff0c\u5c31\u53ef\u4ee5\u7528$|\\text{LCP}(s[sa[i]\\dots b], s[c\\dots d])|$\u7684\u503c\u66f4\u65b0\u7b54\u6848\uff1b\u5982\u679c\u5f53\u524d\u7684$height[i]<ans$\uff0c\u5219\u518d\u7ee7\u7eed\u626b\u4e0b\u53bb\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u66f4\u4f18\u7684\u7b54\u6848,\u53ef\u4ee5\u4e2d\u65ad\u5faa\u73af\u3002\n\n\u56e0\u4e3a\u5f53\u524d\u662f\u6211\u4eec\u5047\u8bbe$rk[e]<rk[c]$\uff0c\u5b9e\u9645\u4e0a\u8fd8\u6709\u4e24\u79cd\u60c5\u51b5\uff0c$rk[e]>rk[c]$\u548c$rk[e]=rk[c](e=c)$\u3002\u5bf9\u4e8e\u524d\u4e00\u79cd\u60c5\u51b5\uff0c\u6309\u76f8\u540c\u7684\u65b9\u6cd5\u5411\u540e\u626b\u4e00\u6b21\u5373\u53ef\uff1b\u5bf9\u4e8e\u540e\u4e00\u79cd\u60c5\u51b5\uff0c\u5355\u72ec\u7528$\\min\\{d-c+1, b-c+1\\}$\u66f4\u65b0\u4e00\u4e0b\u7b54\u6848\u5373\u53ef\n\n~~\u6211\u624d\u4e0d\u4f1a\u8bf4\u8fd9\u4e2a\u66b4\u529b\u505a\u6cd5\u6211\u5728luogu\u6700\u4f18\u89e3\u62ff\u5230rank4\uff0c\u800c\u4e14\u8981\u5361\u8fd9\u79cd\u66b4\u529b\u4e5f\u4e0d\u662f\u5f88\u5bb9\u66132333~~\n\n\n```\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nconst int MX=100010;\nint N, M, s[MX], sa[MX], rk[MX], height[MX];\n\nvoid get_int(int &_){\n\tchar c=getchar(); _=0;\n\twhile(c<'0' || c>'9')\tc=getchar();\n\twhile(c>='0' && c<='9')\t_=_*10+c-'0', c=getchar();\n}\n\nvoid input(){\n\tchar c[MX];\n\tint _[MX];\n\tget_int(N);get_int(M);\n\tscanf(\"%s\", c+1);\n\tstd::copy(c+1, c+N+1, _+1);\n\tstd::copy(_+1, _+N+1, s+1);\n\tstd::sort(_+1, _+N+1);\n\t_[0]=std::unique(_+1, _+N+1)-_-1;\n\tfor(int i=1; i<=N; i++)\n\t\ts[i]=std::lower_bound(_+1, _+_[0]+1, s[i])-_;\n}\n\nvoid SuffixSort(){\n\tint buc[MX], fir[MX], sec[MX], tmp[MX];\n\tstd::fill(buc, buc+N+1, 0);\n\tfor(int i=1; i<=N; i++)\tbuc[s[i]]++;\n\tfor(int i=1; i<=N; i++)\tbuc[i]+=buc[i-1];\n\tfor(int i=1; i<=N; i++)\trk[i]=buc[s[i]-1]+1;\n\t\t\n\tfor(int t=1; t<=N; t<<=1){\n\t\tfor(int i=1; i<=N; i++)\n\t\t\tfir[i]=rk[i], sec[i]=i+t<=N ? rk[i+t] : 0;\n\t\t\n\t\tstd::fill(buc, buc+N+1, 0);\n\t\tfor(int i=1; i<=N; i++)\tbuc[sec[i]]++;\n\t\tfor(int i=1; i<=N; i++)\tbuc[i]+=buc[i-1];\n\t\tfor(int i=1; i<=N; i++)\ttmp[N- --buc[sec[i]]]=i;\n\t\t\n\t\tstd::fill(buc, buc+N+1, 0);\n\t\tfor(int i=1; i<=N; i++)\tbuc[fir[i]]++;\n\t\tfor(int i=1; i<=N; i++)\tbuc[i]+=buc[i-1];\n\t\tfor(int i=1; i<=N; i++)\tsa[buc[fir[tmp[i]]]--]=tmp[i];\n\t\t\n\t\tbool fl=true;\n\t\tfor(int i=1, k=0; i<=N; i++){\n\t\t\tint j=sa[i];\n\t\t\tif(!k)\trk[j]=1;\n\t\t\telse if(fir[j]==fir[k] && sec[j]==sec[k])\n\t\t\t\tfl=false, rk[j]=rk[k];\n\t\t\telse\trk[j]=rk[k]+1;\n\t\t\tk=j;\t\n\t\t}\n\t\tif(fl)\tbreak;\n\t}\n\t\n\tfor(int i=1, k=0; i<=N; i++){\n\t\tif(rk[i]==1)\tk=0;\n\t\telse{\n\t\t\tint j=sa[rk[i]-1];\n\t\t\tk=k>0 ? k-1 : k;\n\t\t\twhile(s[j+k]==s[i+k] && i+k<=N && j+k<=N)\n\t\t\t\tk++;\n\t\t}\n\t\theight[rk[i]]=k;\n\t}\n}\n\nint solve(int a, int b, int c, int d){\n\tint len=0x3f3f3f3f, ans=0;\n\tif(a<=c && c<=b)\tans=std::max(ans, std::min(d-c+1, b-c+1));\n\tfor(int i=rk[c]; i>=2; i--){\n\t\tif(height[i]<=ans)\tbreak;\n\t\tlen=std::min(len, height[i]);\n\t\tif(sa[i-1]<=b && sa[i-1]>=a)\n\t\t\tans=std::max(ans, std::min(std::min(b-sa[i-1]+1, d-c+1), len));\n\t}len=0x3f3f3f3f;\n\tfor(int i=rk[c]+1; i<=N; i++){\n\t\tif(height[i]<=ans)\tbreak;\n\t\tlen=std::min(len, height[i]);\n\t\tif(sa[i]<=b && sa[i]>=a)\n\t\t\tans=std::max(ans, std::min(std::min(b-sa[i]+1, d-c+1), len));\n\t}\n\treturn ans;\n}\n\nint main(){\n\tint a, b, c, d;\n\tinput();\n\tSuffixSort();\n\twhile(M--){\n\t\tget_int(a);\tget_int(b);\tget_int(c);\tget_int(d);\n\t\tprintf(\"%d\\n\", solve(a, b, c, d));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1539000988,
        "uid": 52211,
        "name": "Labelray",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4094 \u3010[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "\u9898\u89e3\u540c\u6b65\u53d1\u5728[\u65b0\u535a\u5ba2](https://foreverlasting1202.github.io/)\n\n[\u9898\u9762](https://www.luogu.org/problemnew/show/P4094)\n\n\u540e\u7f00\u81ea\u52a8\u673a\u3002\n\n\u8fd9\u8fd8\u7b97\u662f\u4e00\u9053\u6bd4\u8f83\u597d\u60f3\u7684\u9898\u5427\u3002\u9996\u5148\u76f4\u63a5\u6c42\u6700\u957f\u80af\u5b9a\u4e0d\u884c\uff0c\u90a3\u4e48\u5c31\u4e8c\u5206\u4e00\u4e0b\u957f\u5ea6\uff0c\u7136\u540e\u5224\u65ad$s[c,d+l-1]$\u662f\u5426\u5728$s[a,b]$\u51fa\u73b0\u8fc7\u3002\u8fd9\u662f\u57fa\u672c\u5957\u8def\u5427\uff0c\u524d\u7f00\u4e0d\u597d\u641e\u90a3\u4e48\u53d8\u6210\u540e\u7f00\uff0c\u662f\u5426\u51fa\u73b0\u76f4\u63a5\u7ebf\u6bb5\u6811\u5408\u5e76+\u500d\u589e\u5c31\u597d\u4e86\u3002\n\ncode:\n```\n//2018.11.18 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=1e5+10;\nnamespace MAIN{\n    int n,m;\n    struct SAM{\n        struct Sam{\n            int vis[26],par,len;\n        }sam[N<<1];\n        int cnt,las,rt;\n        SAM() {cnt=las=rt=1;}\n        inline void extend(const res &x){\n            res p=las,np=++cnt;\n            las=np,sam[np].len=sam[p].len+1;\n            for(;p&&!sam[p].vis[x];p=sam[p].par)sam[p].vis[x]=np;\n            if(!p)sam[np].par=rt;\n            else {\n                res q=sam[p].vis[x];\n                if(sam[q].len==sam[p].len+1)sam[np].par=q;\n                else {\n                    res nq=++cnt;\n                    memcpy(sam[nq].vis,sam[q].vis,sizeof(sam[nq].vis));\n                    sam[nq].par=sam[q].par;\n                    sam[nq].len=sam[p].len+1;\n                    sam[q].par=sam[np].par=nq;\n                    for(;p&&sam[p].vis[x]==q;p=sam[p].par)sam[p].vis[x]=nq;\n                }\n            }\n        }\n    }A;\n    char str[N];\n    int ls[N<<6],rs[N<<6],sum[N<<6],rt[N<<1],tot;\n    inline void pushup(const res &rt){\n        sum[rt]=sum[ls[rt]]+sum[rs[rt]];\n    }\n    int merge(const res &x,const res &y,const res &l,const res &r){\n        if(!x||!y)return x+y;\n        if(l==r){sum[x]+=sum[y];return x;}\n        res mid=(l+r)>>1,z=++tot;\n        ls[z]=merge(ls[x],ls[y],l,mid);\n        rs[z]=merge(rs[x],rs[y],mid+1,r);\n        pushup(z);\n        return z;\n    }\n    void update(res &rt,const res &l,const res &r,const res &p){\n        if(!rt)rt=++tot;\n        if(l==r){sum[rt]++;return;}\n        res mid=(l+r)>>1;\n        if(p<=mid)update(ls[rt],l,mid,p);\n        else update(rs[rt],mid+1,r,p);\n        pushup(rt);\n    }\n    int query(const res &rt,const res &l,const res &r,const res &L,const res &R){\n        if(!rt)return 0;\n        if(L<=l&&r<=R)return sum[rt];\n        res mid=(l+r)>>1,ret=0;\n        if(L<=mid)ret+=query(ls[rt],l,mid,L,R);\n        if(R>mid)ret+=query(rs[rt],mid+1,r,L,R);\n        return ret;\n    }\n    int buc[N<<1],rnk[N<<1];\n    int F[N<<1][21],pos[N];\n    inline bool check(const res &lim,res p,const res &l,const res &r){\n        for(res i=20;~i;i--)if(A.sam[F[p][i]].len>=lim&&F[p][i])p=F[p][i];\n        return query(rt[p],1,n,l+lim-1,r);\n    }\n    inline void MAIN(){\n        n=read(),m=read();\n        scanf(\"%s\",str+1);\n        reverse(str+1,str+n+1);\n        for(res i=1;i<=n;i++)A.extend(str[i]-'a'),update(rt[A.las],1,n,i),pos[i]=A.las;\n        for(res i=1;i<=A.cnt;i++)buc[A.sam[i].len]++;\n        for(res i=1;i<=A.cnt;i++)buc[i]+=buc[i-1];\n        for(res i=1;i<=A.cnt;i++)rnk[buc[A.sam[i].len]--]=i;\n        for(res i=A.cnt;i>=1;i--)if(A.sam[rnk[i]].par)rt[A.sam[rnk[i]].par]=merge(rt[A.sam[rnk[i]].par],rt[rnk[i]],1,n),F[i][0]=A.sam[i].par;\n        for(res j=1;j<=20;j++)\n            for(res i=1;i<=A.cnt;i++)\n                F[i][j]=F[F[i][j-1]][j-1];\n        while(m--){\n            res a=n-read()+1,b=n-read()+1,c=n-read()+1,d=n-read()+1;\n            res l=0,r=_min(a-b+1,c-d+1),ret=0;\n            while(l<=r){\n                res mid=(l+r)>>1;\n                if(check(mid,pos[c],b,a))l=mid+1,ret=mid;\n                else r=mid-1;\n            }\n            printf(\"%d\\n\",ret);\n        }\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1542542348,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010HEOI2016/TJOI2016\u3011\u5b57\u7b26\u4e32"
    },
    {
        "content": "### SAM\n\n\u600e\u4e48\u9898\u89e3\u90fd\u6ca1\u6709\u51e0\u7bc7SAM\u7684\uff0cSAM\u4f1a\u4f24\u5fc3\u7684\u3002\n\n### Part.1\n\n\u9996\u5148\u89c2\u5bdf\u8be2\u95ee\uff0c\u597d\u50cf\u975e\u5e38\u4e0d\u53ef\u505a\uff0c\u4f46\u662f\u53ef\u4ee5\u53d1\u73b0\u7b54\u6848\u6709\u53ef\u4e8c\u5206\u6027\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u53ef\u4ee5\u4e8c\u5206\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\uff0c\u7136\u540e\u5c31\u662f\u8be2\u95ee$c$\u5230$c+mid-1$\u6709\u6ca1\u6709\u5728$[a,b]$\u51fa\u73b0\u8fc7\uff0c\u7136\u800cSAM\u66f4\u64c5\u957f\u540e\u7f00\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u4e32\u7ffb\u8f6c\u8fc7\u6765\u6c42\u540e\u7f00\u5339\u914d\u6570\u3002\n\n\u5982\u679c\u5bf9SAM\u654f\u611f\u7684\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5176\u5b9e\u5c31\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u5728SAM\u4e0a\u7ebf\u6bb5\u6811\u5408\u5e76\u9884\u5904\u7406\u7136\u540e\u500d\u589e\u8df3$parent$\u6811\u67e5\u8be2\u7684\u88f8\u9898\u4e86\u3002\n\n~~\u4e8e\u662f\u5c31\u5b8c\u4e86\uff08\u4e0d\u662f~~\n\n### Part.2\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u77e5\u9053\u4e00\u4e2a$endpos$\u7684\u7236\u4eb2\u80af\u5b9a\u662f\u5979\u7684\u540e\u7f00\uff0c\u5373\u5982\u679c\u5f53\u524d\u70b9\u53ef\u4ee5\u5339\u914d\uff0c\u5979\u7684\u7236\u4eb2\u80af\u5b9a\u53ef\u4ee5\u5339\u914d\u3002SAM\u4e0a\u6bcf\u4e2a\u70b9\u6211\u4eec\u90fd\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7edf\u8ba1\u5979\u53ef\u4ee5\u5339\u914d\u54ea\u4e9b\u524d\u7f00\uff0c\u9996\u5148\u524d\u7f00\u5bf9\u5e94\u7684\u8282\u70b9\u80af\u5b9a\u53ef\u4ee5\u5339\u914d\u81ea\u5df1\uff0c\u7136\u540e\u6211\u4eec\u7ebf\u6bb5\u6811\u5408\u5e76\u7b54\u6848\u3002\n\n\u6bcf\u6b21\u5047\u8bbe\u6211\u4eec\u94a6\u5b9a\u4e86\u53f3\u7aef\u70b9\u4e3a$r$\uff0c\u6211\u4eec\u5c31\u500d\u589e\u7684\u5f80\u4e0a\u8df3\u5230\u6700\u4e0a\u9762\u7684$r-maxlen+1\\le l$\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u70b9\u5305\u542b\u4e86\u6211\u4eec\u6240\u6709\u7684\u9700\u8981\u7684\u4e1c\u897f\uff0c\u76f4\u63a5\u67e5\u4e00\u904d\u5373\u53ef\u3002\n\n\u505a\u5b8c\u4e86\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b[\u8fd9\u4e2a](https://www.luogu.com.cn/problem/CF666E)\uff0c\u8ddf\u8fd9\u4e2a\u6bd4\u8f83\u50cf\u3002\n\n```cpp\nconst int maxn=1e5+5;\n\nstruct SegmentTree\n{\n    int lc[maxn*40],rc[maxn*40],wife[maxn*40],cnt;\n    void modify(int &u,int l,int r,int x)\n    {\n        if(!u) u=++cnt;\n        ++wife[u];\n        if(l==r) return;\n        int mid=(l+r)>>1;\n        if(x<=mid) modify(lc[u],l,mid,x);\n        else modify(rc[u],mid+1,r,x);\n    }\n    int merge(int u,int v)\n    {\n        if(!u||!v) return u|v;\n        int x=++cnt;\n        wife[x]=wife[u]+wife[v];\n        lc[x]=merge(lc[u],lc[v]);\n        rc[x]=merge(rc[u],rc[v]);\n        return x;\n    }\n    int query(int u,int l,int r,int x,int y)\n    {\n        if(!u) return 0;\n        if(x<=l&&r<=y) return wife[u];\n        int mid=(l+r)>>1,res=0;\n        if(x<=mid) res+=query(lc[u],l,mid,x,y);\n        if(y>mid) res+=query(rc[u],mid+1,r,x,y);\n        return res;\n    }\n}wife;\n\nint tr[maxn<<1][26],maxlen[maxn<<1],link[maxn<<1],cnt=1,las=1,tax[maxn<<1],a[maxn<<1];\nint fa[maxn<<1][21],n,pos[maxn],rt[maxn<<1];\nchar s[maxn];\n\nvoid insert(int c)\n{\n    int u=las,nu=las=++cnt;\n    maxlen[nu]=maxlen[u]+1;\n    for(;u&&!tr[u][c];u=link[u]) tr[u][c]=nu;\n    if(!u) return link[nu]=1,void();\n    int v=tr[u][c];\n    if(maxlen[u]+1==maxlen[v]) return link[nu]=v,void();\n    int nv=++cnt;\n    maxlen[nv]=maxlen[u]+1;link[nv]=link[v];link[v]=link[nu]=nv;\n    memcpy(tr[nv],tr[v],sizeof(tr[v]));\n    for(;u&&tr[u][c]==v;u=link[u]) tr[u][c]=nv;\n}\n\ninline bool check(int lim,int u,int l,int r)\n{\n    for(int i=20;i>=0;--i) if(fa[u][i]&&maxlen[fa[u][i]]>=lim) u=fa[u][i];\n    return wife.query(rt[u],1,n,l+lim-1,r);\n}\n\nint main()\n{\n    int q,x,y,c,d;\n    scanf(\"%d%d%s\",&n,&q,s+1);\n    reverse(s+1,s+n+1);\n    for(int i=1;i<=n;++i) insert(s[i]-'a'),pos[i]=las,wife.modify(rt[las],1,n,i);\n    for(int i=1;i<=cnt;++i) ++tax[maxlen[i]],fa[i][0]=link[i];\n    for(int i=1;i<=cnt;++i) tax[i]+=tax[i-1];\n    for(int i=cnt;i;--i) a[tax[maxlen[i]]--]=i;\n    for(int i=cnt;i>1;--i) rt[link[a[i]]]=wife.merge(rt[a[i]],rt[link[a[i]]]);\n    for(int j=1;j<=20;++j)\n        for(int i=1;i<=cnt;++i)\n            fa[i][j]=fa[fa[i][j-1]][j-1];\n    while(q--)\n    {\n        scanf(\"%d%d%d%d\",&x,&y,&c,&d);\n        x=n-x+1;y=n-y+1;c=n-c+1;d=n-d+1;\n        int l=0,r=min(x-y+1,c-d+1),mid,ans=0;\n        while(l<=r)\n        {\n            int mid=(l+r)>>1;\n            if(check(mid,pos[c],y,x)) l=mid+1,ans=mid;\n            else r=mid-1;\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0,QAQ;\n}\n```\n\n",
        "postTime": 1601992371,
        "uid": 199750,
        "name": "\u8bd5\u8bd5\u4e8b\u5b9e\u4e0a\u5417",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4094 \u3010[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "[**\u4e0d\u77e5\u9053\u66f4\u597d\u8fd8\u662f\u66f4\u5dee\u7684\u9605\u8bfb\u4f53\u9a8c**](https://www.cnblogs.com/VCLS01/p/14757453.html)\n## \u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 $s$\uff0c\u6709 $m$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u5b9a $a,b,c,d$\uff0c\u6c42 $s[a\\ldots b]$ \u7684\u6240\u6709\u5b50\u4e32\u4e0e $s[c\\ldots d]$ \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002\n\n**\u6570\u636e\u8303\u56f4\uff1a**$1\\le n,m\\le10^5$\uff0c$1\\le a<b\\le n$\uff0c$1\\le c<d\\le n$\u3002\n\n**\u65f6\u95f4\u9650\u5236\uff1a**$2000\\operatorname{ms}$\u3002\n## Solution\n\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u4e32\u6c42 $LCP$ \u6700\u5927\u503c\u6bd4\u8f83\u590d\u6742\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n^2\\log n)$\uff0c\u96be\u4ee5\u63a5\u53d7\u3002\n\n\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u6027\u8d28\uff1a\u82e5 $k$ \u4e3a\u53ef\u884c\u7b54\u6848\uff0c\u5219\u4efb\u4f55\u6bd4 $k$ \u5c0f\u7684\u503c\u90fd\u4e3a\u53ef\u884c\u7b54\u6848\u3002\n\n\u56e0\u6b64\u8003\u8651**\u4e8c\u5206**\u3002\u4e8c\u5206\u7b54\u6848\u7684\u6700\u5927\u503c\uff0c\u5047\u8bbe\u5f53\u524d\u7b54\u6848\u4e3a $len$\uff0c\u4f1a\u6709\u5982\u4e0b\u7684\u6027\u8d28\uff1a\n\n1. \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5b50\u4e32 $ans$ \u5b8c\u5168\u4f4d\u4e8e $[a,b]$ \u4e4b\u95f4\uff0c\u5219 $ans$ \u7684\u5f00\u5934\u5e94\u8be5\u4f4d\u4e8e $[a,b-len+1]$ \u4e4b\u95f4\u3002\n2. $LCP(ans,s[c\\ldots n])\\ge len$\u3002\n\n\u7531 $height$ \u6570\u7ec4\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u6027\u8d28\u7684 $ans$ \u5f00\u5934\u4e00\u5b9a\u662f\u4e00\u6bb5\u5305\u542b $c$ \u7684\u8fde\u7eed\u533a\u95f4\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u51fa\u8fd9\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u68c0\u9a8c\u7b2c\u4e00\u4e2a\u6027\u8d28\u662f\u5426\u6210\u7acb\uff0c\u8fd9\u6b65\u53ef\u4ee5\u901a\u8fc7\u4e3b\u5e2d\u6811\u6765\u5b9e\u73b0\u3002\u4e3b\u5e2d\u6811\u5b58\u50a8\u53ef\u80fd\u5b58\u5728\u7b54\u6848\u7684\u533a\u95f4\u5185\u662f\u5426\u6709 $i$ \u4f7f $sa[i]\\in[a,b-len+1]$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n\\log^2n)$\uff0c\u671f\u671b\u5f97\u5206 $100\\operatorname{pts}$\u3002\n## Code\uff08\u5b9e\u73b0\u6781\u4e11\uff09\n```cpp\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst int maxn=100010;\nchar s[maxn];\nint sa[maxn],c[maxn],x[maxn],y[maxn],n,m;\nint rk[maxn],height[maxn];\nint q,tot,st[maxn][18],lg2[maxn],root[maxn];\ntemplate<class T>inline T Min(const T &a,const T &b){return a<b?a:b;}\ninline void GetSA(){\n\tfor(int i=1;i<=n;++i)++c[x[i]=s[i]];\n\tfor(int i=2;i<=m;++i)c[i]+=c[i-1];\n\tfor(int i=n;i;--i)sa[c[x[i]]--]=i;\n\tfor(int k=1;k<=n;k<<=1){\n\t\tint num=0;\n\t\tfor(int i=n-k+1;i<=n;++i)y[++num]=i;\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tif(sa[i]>k)y[++num]=sa[i]-k;\n\t\tfor(int i=1;i<=m;++i)c[i]=0;\n\t\tfor(int i=1;i<=n;++i)++c[x[i]];\n\t\tfor(int i=2;i<=m;++i)c[i]+=c[i-1];\n\t\tfor(int i=n;i;--i)sa[c[x[y[i]]]--]=y[i],y[i]=0;\n\t\tswap(x,y);\n\t\tx[sa[1]]=1,num=1;\n\t\tfor(int i=2;i<=n;++i)\n\t\t\tx[sa[i]]=(y[sa[i]]==y[sa[i-1]]&&y[sa[i]+k]==y[sa[i-1]+k])?num:++num;\n\t\tif(num==m)break;\n\t\tm=num;\n\t}\n}\ninline void GetHeight(){\n\tfor(int i=1;i<=n;++i)rk[sa[i]]=i;\n\tfor(int i=1,k=0;i<=n;++i){\n\t\tif(rk[i]==1)continue;\n\t\tif(k)--k;\n\t\tint j=sa[rk[i]-1];\n\t\twhile(i+k<=n&&j+k<=n&&s[i+k]==s[j+k])++k;\n\t\theight[rk[i]]=k;\n\t}\n}\nstruct SegmentTree{\n\tint lc,rc,v;\n}tr[maxn*20];\ninline void pushup(int u){\n\ttr[u].v=tr[tr[u].lc].v+tr[tr[u].rc].v;\n}\ninline int Insert(int p,int l,int r,int x){\n\tint u=++tot;\n\tif(l==r){tr[u].v=tr[p].v+1;return u;}\n\tint mid=(l+r)>>1;\n\tif(x<=mid){\n\t\ttr[u].rc=tr[p].rc;\n\t\ttr[u].lc=Insert(tr[p].lc,l,mid,x);\n\t}\n\telse{\n\t\ttr[u].lc=tr[p].lc;\n\t\ttr[u].rc=Insert(tr[p].rc,mid+1,r,x);\n\t}\n\tpushup(u);\n\treturn u;\n}\ninline int query(int p,int q,int l,int r,int ql,int qr){\n\tif(ql<=l&&r<=qr)return tr[q].v-tr[p].v;\n\tint mid=(l+r)>>1,ans=0;\n\tif(ql<=mid)ans=query(tr[p].lc,tr[q].lc,l,mid,ql,qr);\n\tif(mid<qr)ans+=query(tr[p].rc,tr[q].rc,mid+1,r,ql,qr);\n\treturn ans;\n}\ninline void InitST(){\n\tfor(int i=1;i<=n;++i)st[i][0]=height[i],lg2[i]=log2(i);\n\tfor(int i=1;i<18;++i)\n\t\tfor(int j=1;j+(1<<i)-1<=n;++j)\n\t\t\tst[j][i]=Min(st[j][i-1],st[j+(1<<(i-1))][i-1]);\n}\ninline int queryST(int l,int r){\n\tif(l>r)swap(l,r);\n\tif(l==r)return n-l+1;\n\t++l;\n\tint t=lg2[r-l+1];\n\treturn Min(st[l][t],st[r-(1<<t)+1][t]);\n}\ninline bool check(int len,int a,int b,int c,int d){\n\tint l=1,r=rk[c],ql,qr;\n\twhile(l<r){\n\t\tint mid=(l+r)>>1;\n\t\tif(queryST(mid,rk[c])<len)l=mid+1;\n\t\telse r=mid;\n\t}\n\tql=r;\n\tl=rk[c],r=n;\n\twhile(l<r){\n\t\tint mid=(l+r+1)>>1;\n\t\tif(queryST(rk[c],mid)<len)r=mid-1;\n\t\telse l=mid;\n\t}\n\tqr=l;\n\tif(query(root[ql-1],root[qr],1,n,a,b-len+1)>0)return true;\n\telse return false;\n}\ninline int solve(int a,int b,int c,int d){\n\tint l=0,r=Min(b-a+1,d-c+1);\n\twhile(l<r){\n\t\tint mid=(l+r+1)>>1;\n\t\tif(check(mid,a,b,c,d))l=mid;\n\t\telse r=mid-1;\n\t}\n\treturn l;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&q);\n\tscanf(\"%s\",s+1);m='z';\n\tGetSA();GetHeight();\n\tfor(int i=1;i<=n;++i)\n\t\troot[i]=Insert(root[i-1],1,n,sa[i]);\n\tInitST();\n\twhile(q--){\n\t\tint a,b,c,d;\n\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\t\tprintf(\"%d\\n\",solve(a,b,c,d));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1620740303,
        "uid": 375785,
        "name": "x7103",
        "ccfLevel": 9,
        "title": "[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32"
    },
    {
        "content": "> [P4094 [HEOI2016/TJOI2016]\u5b57\u7b26\u4e32 \u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P4094)\n\n> \u9898\u610f\u7b80\u8ff0\uff1a\u7ed9\u51fa\u5b57\u7b26\u4e32 $s$\uff0c\u591a\u6b21\u8be2\u95ee $a,b,c,d$ \u6c42 $s[a:b]$ \u7684\u6240\u6709\u5b50\u4e32\u4e0e $s[c:d]$ \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u6700\u5927\u503c\u3002\n\n> [\u6211\u7684 SAM \u5b66\u4e60\u7b14\u8bb0 \u4f8b\u9898 X.](https://www.cnblogs.com/alex-wei/p/Suffix_Automaton.html)\n\n---\n\n\u9996\u5148\uff0cSAM \u4e0d\u592a\u65b9\u4fbf\u5904\u7406\u524d\u7f00\uff0c\u6240\u4ee5\u5c06\u6574\u4e2a\u4e32\u7ffb\u8f6c\uff08\u8be2\u95ee\u4e0d\u8981\u5fd8\u8bb0\u7ffb\u8f6c\uff09\uff0c\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u4e86\u6700\u957f\u516c\u5171\u540e\u7f00\u3002\u63a5\u4e0b\u6765\u6c42 $s[1:d]$ \u6240\u4ee3\u8868\u7684\u72b6\u6001\uff0c\u8bbe\u4e3a $p$\uff0c\u76f4\u63a5\u5728\u5efa SAM \u65f6\u9884\u5904\u7406\u5373\u53ef\u3002\n\n\u76f4\u63a5\u4e0d\u7ba1 $c$ \u7684\u9650\u5236\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u51fa $s[a:b]$ \u6240\u6709\u5b50\u4e32\u4e0e $s[1:d]$ \u7684\u6700\u957f\u516c\u5171\u540e\u7f00\u957f\u5ea6\uff0c\u5e76\u4e0e $d-c+1$ \u53d6 $\\min$\u3002\n\n\u6839\u636e SAM \u7684\u6027\u8d28\uff0c$link$ \u6811\u4e0a\u6240\u6709 $p$ \u7684\u7956\u5148\u90fd\u8868\u793a $s[1:d]$ \u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u540e\u7f00\u3002\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u72b6\u6001 $q$ \u6ee1\u8db3 $q$ \u662f $p$ \u7684\u7956\u5148\u4e14 $\\left(\\max_{x\\in endpos(q),x\\leq b}x\\right)-a+1\\leq len(q)$\uff08\u4e5f\u5c31\u662f\u8be5\u72b6\u6001\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u5728 $b$ \u6216 $b$ \u4e4b\u524d\u51fa\u73b0\u7684\u6700\u9760\u53f3\u7684\u7ed3\u675f\u4f4d\u7f6e\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u6700\u9760\u53f3\u663e\u800c\u6613\u89c1\uff08\u53f3\u8fb9\u7684\u51fa\u73b0\u4f4d\u7f6e\u80af\u5b9a\u4f18\u4e8e\u5de6\u8fb9\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u6709\u5de6\u7aef\u70b9 $a$ \u7684\u9650\u5236\uff09\uff0c\u8bfb\u8005\u53ef\u81ea\u884c\u7406\u89e3\uff09\uff0c**\u4e14 $len(q)$ \u7684\u503c\u6700\u5c0f\uff0c\u90a3\u4e48\u6700\u957f\u516c\u5171\u540e\u7f00\u80af\u5b9a\u5728 $q$ \u6216 $link(q)$ \u6240\u8868\u793a\u7684\u5b50\u4e32\u4e2d\u3002**\n\n- \u5148\u8bf4\u8bf4\u4e3a\u4ec0\u4e48\u8981 $len(q)$ \u6700\u5c0f\uff1a\u5047\u8bbe\u5b58\u5728 $q'$ \u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u4f46 $len(q')>len(q)$\uff0c\u5373 $q$ \u662f $q'$ \u7684\u7956\u5148\uff08\u540c\u65f6 $q'$ \u662f $p$ \u7684\u7956\u5148\uff09\u3002\u8bb0 $\\max_{x\\in endpos(q),x\\leq b}x$ \u4e3a $maxp(q,b)$\uff0c\u90a3\u4e48\u6839\u636e $endpos$ \u548c $link$ \u7684\u6027\u8d28\uff0c\u5373 $endpos(q')\\subsetneq endpos(q)$\uff0c\u56e0\u6b64\uff0c$maxp(q',b)\\leq maxp(q,b)$\uff0c\u5373 $q'$ \u70b9\u6240\u8868\u793a\u5b57\u7b26\u4e32\u5728 $b$ \u6216 $b$ \u4e4b\u524d\u51fa\u73b0\u7684\u6700\u5927\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4e00\u5b9a\u4e0d\u5927\u4e8e $q$ \u70b9\u6240\u8868\u793a\u7684\u5b57\u7b26\u4e32\u5728 $b$ \u6216 $b$ \u4e4b\u524d\u51fa\u73b0\u7684\u6700\u5927\u7ed3\u675f\u4f4d\u7f6e\u3002\u56e0\u6b64 $maxp(q',b)-a+1\\leq maxp(q,b)-a+1$\u3002\u53c8\u56e0\u4e3a $len(q)\\ (len(q'))\\geq maxp(q,b)\\ (maxp(q',b)) -a+1$\uff0c\u5373 $q$ \u548c $q'$ \u6240\u8868\u793a\u7684\u7684\u6700\u957f\u5b57\u7b26\u4e32\u8d85\u51fa\u4e86 $a$ \u7684\u9650\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u662f\u7528 $maxp$ \u503c $-a+1$ \u6c42\u51fa\u5728 $a$ \u7684\u9650\u5236\u4e0b\u8be5\u72b6\u6001\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u3002\u6545 $q$ \u4e00\u5b9a\u6bd4 $q'$ \u66f4\u4f18\u3002\n\n- \u518d\u8bf4\u8bf4\u4e3a\u4ec0\u4e48\u8981\u7b97\u4e0a $link(q)$\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/2ggzru0w.png)\n  \u4e00 \u76ee \u4e86 \u7136\uff0c\u4e0d \u8a00 \u800c \u55bb\u3002\n\n- \u540c\u65f6\uff0c\u56e0\u4e3a $link(q)$ \u7684\u8d21\u732e\u5df2\u7ecf\u662f $len(q)$ \u4e86\uff0c\u5982\u679c\u518d\u5f80\u4e0a\u8df3 $maxp$ \u9012\u589e\uff0c\u8d21\u732e\u4e5f\u4e00\u5b9a\u662f\u8be5\u70b9\u7684 $len$ \u503c\uff0c\u8fd9\u662f\u9012\u51cf\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u518d\u5f80\u4e0a\u8003\u8651\u3002\n\n\u8bf4\u5b8c\u4e86\u601d\u8def\uff0c\u63a5\u4e0b\u6765\u8bb2\u8bb2\u600e\u4e48\u5b9e\u73b0\uff1a\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u7ef4\u62a4 $endpos$ \u96c6\u5408\u53ef\u4ee5\u8f7b\u677e\u5728 $\\log$ \u65f6\u95f4\u5185\u6c42\u51fa $maxp$\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684 $q$ \u6ee1\u8db3\u4e8c\u5206\u6761\u4ef6\uff0c\u6240\u4ee5\u6c42 $q$ \u76f4\u63a5\u7528 $p$ \u5728 $link$ \u6811\u4e0a\u500d\u589e\u5373\u53ef\u3002\u90a3\u4e48\u6700\u540e\u7b54\u6848\u5373\u4e3a $\\min(\\max(maxp(q,b)-a+1,len(link(q))),d-c+1)$\u3002\uff08\u4e0d\u9700\u8981\u7279\u5224\u7b54\u6848\u4e3a $0$ \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6b64\u65f6 $maxp(q,b)-a+1$ \u4e0d\u5c0f\u4e8e $0$\uff0c\u800c $len(link(q))$ \u663e\u7136\u4e3a $0$\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(q\\log^2 n)$\u3002\n\n```cpp\n/*\n\tPowered by C++11.\n\tAuthor : Alex_Wei.\n*/\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n//#pragma GCC optimize(3)\n\n//using int = long long\n//using i128 = __int128;\n\nusing uint = unsigned int;\nusing ll = long long;\nusing ull = unsigned long long;\nusing db = double;\nusing ld = long double;\nusing pii = pair <int,int>;\nusing pll = pair <ll,ll>;\nusing pdd = pair <double,double>;\nusing vint = vector <int>;\nusing vpii = vector <pii>;\n\n#define fi first\n#define se second\n#define pb emplace_back\n#define mpi make_pair\n#define all(x) x.begin(),x.end()\n#define sor(x) sort(all(x))\n#define rev(x) reverse(all(x))\n#define mem(x,v) memset(x,v,sizeof(x))\n#define mcpy(x,y) memcpy(x,y,sizeof(y))\n#define Time 1.0*clock()/CLOCKS_PER_SEC\n\npii operator + (pii a,pii b){return {a.fi+b.fi,a.se+b.se};}\npll operator + (pll a,pll b){return {a.fi+b.fi,a.se+b.se};}\n\nnamespace IO{\n\tchar buf[1<<23],*p1=buf,*p2=buf,obuf[1<<24],*O=obuf;\n\t#ifdef __WIN32\n\t\t#define gc getchar()\n\t#else\n\t\t#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<22,stdin),p1==p2)?EOF:*p1++)\n\t#endif\n\t#define pc(x) (*O++=x)\n\t#define flush() fwrite(obuf,O-obuf,1,stdout)\n\tinline ll read(){\n\t\tll x=0; bool sign=0; char s=gc;\n\t\twhile(!isdigit(s))sign|=s=='-',s=gc;\n\t\twhile(isdigit(s))x=(x<<1)+(x<<3)+(s-'0'),s=gc;\n\t\treturn sign?-x:x;\n\t}\n\tinline void print(ll x){\n\t\tif(x<0)pc('-'),print(-x);\n\t\telse{\n\t\t\tif(x>9)print(x/10);\n\t\t\tpc(x%10+'0');\n\t\t}\n\t}\n} using namespace IO;\n\nconst int N=2e5+5;\nconst int S=26;\n\nint node,rt[N],ls[N<<5],rs[N<<5],val[N<<5];\nvoid push(int x){\n\tval[x]=max(val[ls[x]],val[rs[x]]);\n} void ins(int l,int r,int p,int &x){\n\tx=++node;\n\tif(l==r)return val[x]=p,void();\n\tint m=l+r>>1;\n\tif(p<=m)ins(l,m,p,ls[x]);\n\telse ins(m+1,r,p,rs[x]);\n\tpush(x);\n} int merge(int l,int r,int x,int y){\n\tif(!x||!y)return x|y;\n\tint z=++node,m=l+r>>1;\n\tif(l==r)return val[z]=max(val[x],val[y]),z;\n\tls[z]=merge(l,m,ls[x],ls[y]),rs[z]=merge(m+1,r,rs[x],rs[y]);\n\treturn push(z),z;\n} int query(int l,int r,int ql,int qr,int x){\n\tif(!x)return 0;\n\tif(ql<=l&&r<=qr)return val[x];\n\tint m=l+r>>1,ans=0;\n\tif(ql<=m)ans=query(l,m,ql,qr,ls[x]);\n\tif(m<qr)ans=max(ans,query(m+1,r,ql,qr,rs[x]));\n\treturn ans;\n}\n\n// Suffix_Automaton\nint a,b,c,d;\nint n,m,K,cnt,las;\nint fa[N],len[N],son[N][S];\nint buc[N],id[N],f[N][S],ed[N];\nvector <int> e[N];\nvoid ins(int it){\n\tint p=las,cur=++cnt;\n\tlen[cur]=len[las]+1,las=cur;\n\tins(1,n,len[cur],rt[cur]),ed[len[cur]]=cur;\n\twhile(p&&!son[p][it])son[p][it]=cur,p=fa[p];\n\tif(!p)return fa[cur]=1,void();\n\tint q=son[p][it];\n\tif(len[p]+1==len[q])return fa[cur]=q,void();\n\tint cl=++cnt;\n\tfa[cl]=fa[q],fa[q]=fa[cur]=cl,len[cl]=len[p]+1;\n\tmcpy(son[cl],son[q]);\n\twhile(p&&son[p][it]==q)son[p][it]=cl,p=fa[p];\n} void build(char *s){\n\tlas=cnt=1,K=log2(n);\n\tfor(int i=1;i<=n;i++)ins(s[i]-'a');\n\tfor(int i=1;i<=cnt;i++)buc[len[i]]++;\n\tfor(int i=1;i<=n;i++)buc[i]+=buc[i-1];\n\tfor(int i=cnt;i;i--)id[buc[len[i]]--]=i;\n\tfor(int i=cnt;i>1;i--)rt[fa[id[i]]]=merge(1,n,rt[fa[id[i]]],rt[id[i]]);\n\tfor(int j=0;j<=K;j++)for(int i=1;i<=cnt;i++)f[i][j]=j?f[f[i][j-1]][j-1]:fa[i];\n} int qpos(int pos){\n\treturn query(1,n,1,b,rt[pos]);\n}\n\nchar s[N];\nint main(){\n\tcin>>n>>m,scanf(\"%s\",s+1);\n\treverse(s+1,s+n+1),build(s);\n\twhile(m--){\n\t\tcin>>a>>b>>c>>d;\n\t\ta=n-a+1,b=n-b+1,c=n-c+1,d=n-d+1,swap(a,b),swap(c,d);\n\t\tint p=ed[d];\n\t\tfor(int i=K;~i;i--)if(f[p][i]){\n\t\t\tint pp=f[p][i],pos=qpos(pp);\n\t\t\tif(len[pp]>=pos-a+1)p=pp;\n\t\t} int pos=qpos(p);\n\t\tcout<<min(d-c+1,max(pos-a+1,len[f[p][0]]))<<endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1613916303,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4094 [HEOI2016/TJOI2016]\u5b57\u7b26\u4e32"
    },
    {
        "content": "SAM\u505a\u6cd5\u4e0d\u4e00\u5b9a\u8981\u7528\u53cd\u4e32\u6784\u5efaSAM\u3002\u7ed9\u51fa\u4e00\u79cd\u6b63\u4e32\u5efaSAM\u7684\u505a\u6cd5\u3002\n\n\u5982\u679c\u76f4\u63a5\u6c42\u8be2\u95ee\u7684\u7b54\u6848\u4f3c\u4e4e\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a $s[a \\dots b]$ \u7684\u6240\u6709\u5b50\u4e32\u6570\u91cf\u7ea7\u662f $O(n^2)$ \u7ea7\u522b\u7684\uff0c\u4e00\u4e2a\u4e2a\u7b97  LCP (\u5373\u4f7f\u662f\u5728SAM\u4e0a) \u80af\u5b9a\u4e5f\u662f\u4e0d\u884c\u7684\u3002\n\n\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\u6613\u77e5\u7b54\u6848\u7684\u8303\u56f4\u5728 $[0,\\min \\{ b-a+1,d-c+1\\}]$ \u4e4b\u95f4\uff0c\u5047\u8bbe\u73b0\u5728\u4e8c\u5206\u7b54\u6848 $mid$ \uff0c\u5373\u7b54\u6848\u662f\u5426\u5927\u4e8e\u7b49\u4e8e $mid$ \u3002\u82e5\u7b54\u6848\u5927\u4e8e\u7b49\u4e8e $mid$ \uff0c\u90a3\u4e48\u6839\u636e\u9898\u610f\uff0c**$s[c \\dots c+mid-1]$ \u5fc5\u5b9a\u662f $s[a \\dots b]$ \u7684\u5b50\u4e32\u3002** \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728SAM\u4e0a\u627e\u5230\u8868\u793a $s[c \\dots c+mid-1]$ \u7684\u70b9\uff0c\u5047\u8bbe\u4e3a\u70b9 $p$ \uff0c\u7136\u540e\u67e5\u8be2\u70b9 $p$ \u5305\u4e0d\u5305\u542b $s[a \\dots b]$ \uff0c\u5373 $p$ \u7684 $endpos$ \u96c6\u5408\u5728\u533a\u95f4 $[a+mid-1,b]$ \u4e2d\u6709\u6ca1\u6709\u5143\u7d20\u3002\u8fd9\u4e2a\u5224\u65ad\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u5b8c\u6210\u3002\n\n\u90a3\u4e48\u5982\u4f55\u6c42\u70b9 $p$ \u5462\uff1f\u6839\u636eSAM\u7684Parent Tree\u7684\u6027\u8d28\uff0c\u82e5 $u$ \u662f $v$ \u7684\u7956\u5148\uff0c\u90a3\u4e48 $u$ \u6240\u80fd\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u90fd\u662f $v$ \u6240\u80fd\u4ee3\u8868\u7684\u540e\u7f00\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u8868\u793a\u524d\u7f00 $c[1 \\dots c+mid-1]$ \u7684\u70b9\uff0c\u8bbe\u5176\u4e3a $u$ \uff0c\u7136\u540e\u4e0d\u65ad\u5f80\u4e0a\u8df3 \n$\\texttt{fa}$ \uff0c\u76f4\u5230\u8df3\u5230\u4ee3\u8868 $s[c \\dots c+mid-1]$ \u7684 (\u5373 $p$ ) \u70b9\u3002\u4f46\u600e\u4e48\u5224\u65ad\u8fd9\u4e2a\u8282\u70b9\u662f\u4e0d\u662f\u4ee3\u8868 $s[c \\dots c+mid-1]$ \u7684 (\u5373 $p$ ) \u8282\u70b9\u5462\uff1f\u7a0d\u52a0\u5206\u6790\u5373\u53ef\u5f97\u77e5\uff0c $p$ \u4e00\u5b9a\u662f $u$ \u7684\u7956\u5148\u4e2d\uff0c **$\\texttt{maxLen}$ \u5927\u4e8e\u7b49\u4e8e $mid$ \u4e14\u6df1\u5ea6\u6700\u6d45(\u6700\u9760\u4e0a)\u7684\u70b9\u3002** \u4f46\u8fd8\u5269\u4e00\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u4e2a\u8df3 $\\texttt{fa}$ \u7684\u590d\u6742\u5ea6\u663e\u7136\u662f\u9519\u7684\uff0c\u8003\u8651\u500d\u589e\u3002\u7c7b\u4f3c\u4e8e\u500d\u589e\u6c42 LCA \uff0c\u4ece $fa_{u\\ 18}$ \u5230 $fa_{u\\ 0}$ \u679a\u4e3e\uff0c\u53ea\u8981 $fa_{u\\ i}$ \u7684 $len$ \u5927\u4e8e\u7b49\u4e8e $mid$ \uff0c\u90a3\u4e48\u5c31\u5f80\u4e0a\u8df3\u5230 $fa_{u\\ i}$ \u3002\n\n```cpp\n#include <vector>\n#include <stdio.h>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ninline bool islower (char &ch) { return ch >= 'a' && ch <= 'z'; }\ninline bool isdigit (char &ch) { return ch >= '0' && ch <= '9'; }\ninline int idx (char &ch) { return ch - 'a'; } // idx\u662f\u6bcf\u4e2a\u5b57\u7b26\u5728SAM\u4e2d\u5bf9\u5e94\u7684\u7f16\u53f7(\u5982'a'\u5bf9\u5e940)\n\ninline char gc () {\n\tstatic char buf[1048576], *p1 = buf, *p2 = buf;\n\treturn p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1048576, stdin), p1 == p2) ? EOF : *p1 ++ ;\n}\n\nint readi () {\n\tint ans = 0; char ch = gc();\n\twhile(!isdigit(ch)) ch = gc();\n\twhile(isdigit(ch)) ans = ans * 10 + ch - '0', ch = gc();\n\treturn ans;\n}\n\nint reads (char *S) {\n\tint p = 0; char ch = gc();\n\twhile(!islower(ch)) ch = gc();\n\twhile(islower(ch)) S[++ p] = ch, ch = gc();\n\tS[p + 1] = 0; return p;\n}\n\n//\u4ee5\u4e0a\u5168\u662f\u5feb\u8bfb\n\nconst int N = 1e5 + 5;\nint rt[N << 1]; // SAM\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684root\nstruct SegmentTree { // \u7ebf\u6bb5\u6811\u5408\u5e76\n\tint sum[N * 80];\n\tint lch[N * 80], rch[N * 80];\n\tint cnt;\n\t\n\tinline void pushup (int u) { sum[u] = sum[lch[u]] + sum[rch[u]]; }\n\tvoid update (int &u, int x, int l, int r, int v) {\n\t\tif(!u) u = ++ cnt;\n\t\tif(l == r) { sum[u] += v; return; }\n\t\t\n\t\tint mid = l + r >> 1;\n\t\tif(mid >= x) update(lch[u], x, l, mid, v);\n\t\telse update(rch[u], x, mid + 1, r, v);\n\t\tpushup(u);\n\t}\n\t\n\tint merge (int u, int v, int l, int r) {\n\t\tif(!u || !v) return u | v;\n\t\tint w = ++ cnt;\n\t\tif(l == r) { sum[w] = sum[u] + sum[v]; return w; }\n\t\t\n\t\tint mid = l + r >> 1;\n\t\tlch[w] = merge(lch[u], lch[v], l, mid);\n\t\trch[w] = merge(rch[u], rch[v], mid + 1, r);\n\t\tpushup(w); return w;\n\t}\n\t\n\tint query (int u, int ql, int qr, int l, int r) {\n\t\tif(!u) return 0;\n\t\tif(l >= ql && r <= qr) return sum[u];\n\t\t\n\t\tint mid = l + r >> 1, ret = 0;\n\t\tif(mid >= ql) ret += query(lch[u], ql, qr, l, mid);\n\t\tif(mid < qr) ret += query(rch[u], ql, qr, mid + 1, r);\n\t\treturn ret;\n\t}\n} seg;\n\nint n, q;\nint ed[N]; // ed[i]\u4ee3\u8868\u524d\u7f00s[1...i]\u5728SAM\u4e2d\u7684\u5bf9\u5e94\u54ea\u4e2a\u70b9\n\nstruct SAM {\n\tint ch[N << 1][26];\n\tint fa[N << 1][19] /*\u500d\u589e*/, len[N << 1];\n\tvector <int> g[N << 1]; // Parent Tree\n\tint cnt, lst;\n\tSAM () { cnt = lst = 1; }\n\t\n\tvoid insert (int c) { // \u6807\u51c6SAM\u6784\u5efa\n\t\tint p = lst, np = ++ cnt; lst = np;\n\t\tlen[np] = len[p] + 1; seg.update(rt[np], len[np], 1, n, 1);\n\t\t\n\t\tfor(; p && !ch[p][c]; p = fa[p][0])\n\t\t\tch[p][c] = np;\n\t\t\n\t\tif(!p) fa[np][0] = 1;\n\t\telse {\n\t\t\tint q = ch[p][c];\n\t\t\t\n\t\t\tif(len[q] == len[p] + 1) fa[np][0] = q;\n\t\t\telse {\n\t\t\t\tint nq = ++ cnt;\n\t\t\t\tmemcpy(ch[nq], ch[q], sizeof ch[q]);\n\t\t\t\tfa[nq][0] = fa[q][0];\n\t\t\t\tlen[nq] = len[p] + 1;\n\t\t\t\tfa[np][0] = fa[q][0] = nq;\n\t\t\t\t\n\t\t\t\tfor(; p && ch[p][c] == q; p = fa[p][0])\n\t\t\t\t\tch[p][c] = nq;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvoid buildSAM (char *S) { // \u5efaSAM\n\t\tfor(int i = 1; S[i]; ++ i)\n\t\t\tinsert(idx(S[i]));\n\t}\n\t\n\tvoid updEndPos (char *S) { // ed\u7684\u542b\u4e49\u5728\u4e0a\u9762(\u8fd9\u4e2aEndPos\u4e0d\u662fSAM\u4e2d\u7684endpos)\n    //\u4e2a\u4eba\u4e60\u60ef\u5728\u5efa\u5b8cSAM\u4e4b\u540e\u518d\u66f4\u65b0ed[i]\uff0c\u56e0\u4e3aSAM\u7684\u7ed3\u6784\u53ef\u80fd\u968f\u7740\u5b57\u7b26\u7684\u589e\u591a\u800c\u6539\u53d8\u4e4b\u524d\u7684\u5f62\u6001(endpos\u51fa\u73b0\u6b67\u4e49\u65f6\u5019\u7684\u5206\u88c2)\n\t\tfor(int i = 1, p = 1; S[i]; ++ i) {\n\t\t\tp = ch[p][idx(S[i])];\n\t\t\ted[i] = p;\n\t\t}\n\t}\n\t\n\tvoid buildParentTree () { // \u5efaParent Tree\n\t\tfor(int i = 2; i <= cnt; ++ i)\n\t\t\tg[fa[i][0]].push_back(i);\n\t}\n\t\n\tvoid dfsParentTree (int u) { // dfs\uff0c\u9884\u5904\u7406\u500d\u589e\u548cendpos\u96c6\u5408\n\t\tfor(int i = 1; i < 19; ++ i)\n\t\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t\t\n\t\tfor(int i = 0; i < g[u].size(); ++ i) {\n\t\t\tint v = g[u][i];\n\t\t\tdfsParentTree(v);\n\t\t\trt[u] = seg.merge(rt[u], rt[v], 1, n);\n\t\t}\n\t}\n\t\n\tint findNode (int c, int mid) { // \u627e\u7b26\u5408\u6761\u4ef6\u7684\u70b9p(\u4ee3\u8868s[c...c+mid-1]\u7684\u70b9)\n\t\tint p = ed[c + mid - 1];\n\t\tfor(int i = 18; ~i; -- i) \n\t\t\tif(fa[p][i] && len[fa[p][i]] >= mid) // \u53ea\u8981len[fa[p][i]]\u5927\u4e8e\u7b49\u4e8emid\u5c31\u5f80\u4e0a\u8df3\n            \tp = fa[p][i];\n\t\t\n\t\treturn p;\n\t}\n} sam;\n\nbool check (int a, int b, int c, int mid) { // \u67e5\u8be2mid\u662f\u5426\u5408\u6cd5\n\tint p = sam.findNode(c, mid);\n\treturn (bool)(seg.query(rt[p], a + mid - 1, b, 1, n)); // s[c...c+mid-1]\u662f\u5426\u5728s[a...b]\u51fa\u73b0\u8fc7\n}\n\nvoid solve () {\n\tint a, b, c, d; a = readi(); b = readi(); c = readi(); d = readi();\n\n\tint l = 0, r = min(b - a + 1, d - c + 1);\n\tint mid;\n\twhile(l < r) {\n\t\tmid = l + r + 1 >> 1; // \u5411\u4e0a\u53d6\u6574\n\t\tif(check(a, b, c, mid)) l = mid;\n\t\telse r = mid - 1;\n\t}\n\t\n\tprintf(\"%d\\n\", l);\n}\n\nchar S[N];\n\nint main () {\n\n\tn = readi(); q = readi();\n\treads(S);\n\tsam.buildSAM(S);\n\tsam.buildParentTree();\n\tsam.dfsParentTree(1);\n\tsam.updEndPos(S);\n\t//\u5168\u662f\u9884\u5904\u7406\n    \n\twhile(q -- ) solve();\n\n\treturn 0;\n}\n```",
        "postTime": 1617932358,
        "uid": 358957,
        "name": "fhqTreap",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4094 \u3010[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "\u9ed1\u9898\u7adf\u7136\u4e0d\u770b\u9898\u89e3\u5207\u4e86\uff0c\u611f\u52a8\u3002\n\n\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$ \u548c\u4e24\u4e2a\u533a\u95f4 $[l_1,r_1]$ \u548c $[l_2,r_2]$\u3002\u8bf7\u6c42\u51fa\u4e00\u4e2a\u5b50\u4e32 $[l_3,r_3]$ \u4f7f\u5f97 $l_1\\leq l_3\\leq r_3\\leq r_1$ \u4e14 $\\operatorname{lcp}(s_{[l_3,r_3]},s_{[l_2,r_2]})$ \u6700\u5927\u3002\n\n\u9996\u5148\uff0c\u8fd9\u4e2a $r_3$ \u6ca1\u6709\u7528\uff0c\u663e\u7136\u6709\u4e00\u4e2a\u6700\u4f18\u65b9\u6848\u4f7f\u5f97 $r_3=r_1$\u3002\n\n\u6240\u4ee5\u9700\u8981\u51b3\u7b56\u7684\u53ea\u5269\u4e0b $l_3$\u3002\n\n\u8003\u8651\u6c42\u51fa\u539f\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u6570\u7ec4\u548c Height\u3002\n\n\u8fd9\u65f6\u4f1a\u6709\u4e00\u4e2a\u6bd4\u8f83\u76f4\u63a5\u7684\u601d\u8def\u662f\u8fd9\u6837\uff1a\u56e0\u4e3a\u6c42 $\\text{lcp}(x,y)$ \u7b49\u4ef7\u4e8e\u5728 Height \u6570\u7ec4\u4e0a\u6c42 $(r_x,r_y]$ \u533a\u95f4\u7684\u6700\u5c0f\u503c\uff08\u5176\u4e2d $r$ \u5bf9\u5e94 rank \u6570\u7ec4\uff09\uff0c\u800c\u7531\u4e8e\u533a\u95f4\u7684\u4e00\u7aef\u5df2\u7ecf\u56fa\u5b9a\u4e3a $r_c$\uff0c\u6240\u4ee5\u8003\u8651\u7ef4\u62a4\u51fa rank \u7684\u4e3b\u5e2d\u6811\uff0c\u6bcf\u6b21\u5728\u533a\u95f4 $[a,b]$ \u4e2d\u67e5\u627e $r_c$ \u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u67e5\u51fa lcp \u7136\u540e\u5bf9\u4e24\u4e2a\u533a\u95f4\u957f\u5ea6\u53d6 $\\min$ \u5c31\u53ef\u4ee5\u4e86\uff0c\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n~~\u53ef\u60dc\u8fd9\u6837\u662f\u9519\u7684\u3002~~\n\n\u4e3a\u4ec0\u4e48\u662f\u9519\u7684\u5462\uff1f\n\n\u56e0\u4e3a\u8fd9\u6837\u53ea\u4fdd\u8bc1\u4e86\u5728 **\u4e0d\u5bf9\u533a\u95f4\u957f\u5ea6\u53d6 min** \u65f6\u5f97\u5230\u6700\u4f18\u7b54\u6848\uff0c\u800c\u65e0\u6cd5\u4fdd\u8bc1 **\u53d6\u5b8c min \u4e4b\u540e** \u7684\u7b54\u6848\u4ecd\u662f\u6700\u4f18\u7684\u3002\n\n\u4f8b\u5982\u5982\u4e0b\u6570\u636e\uff1a\n\n```plain\n12 1\nabcabcabcdef\n1 5 4 12\n```\n\n\u6b63\u786e\u7b54\u6848\u662f $5$\uff0c\u800c\u6211\u4eec\u7684\u7b97\u6cd5\u4f1a\u7ed9\u51fa $2$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w4capja7.png)\n\n\u5361\u70b9\u5927\u6982\u662f\u5339\u914d\u5f97\u66f4\u591a\u7684\u90a3\u4e2a\u5b57\u7b26\u4e32\u6709\u5f88\u591a\u90fd\u8d85\u51fa\u4e86\u533a\u95f4\uff0c\u4e8e\u662f\u5c31\u8fd8\u4e0d\u5982\u5339\u914d\u5f97\u66f4\u5c11\u7684\u90a3\u4e2a\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u6211\u4eec\u7684\u7b97\u6cd5\u3002\u8003\u8651\u4e8c\u5206\u7b54\u6848 $x$\uff0c\u6bcf\u6b21\u5229\u7528\u4e0a\u8ff0\u7b97\u6cd5\u5bf9\u533a\u95f4 $[a,b-x+1]$ \u6c42\u89e3\uff0c\u5982\u679c\u5f97\u5230\u7684\u7b54\u6848 $\\geq x$ \u5c31\u8ba4\u4e3a\u5408\u6cd5\u3002\n\n\u4f1a\u6709\u7591\u95ee\uff0c\u4e0a\u9762\u90a3\u4e2a\u7b97\u6cd5\u4e0d\u662f\u4f9d\u7136\u5f97\u4e0d\u5230\u6700\u4f18\u89e3\u5417\uff1f\n\n**\u4f46\u662f\uff0c\u6b64\u65f6\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u5373\u4f7f\u7531\u4e8e\u4e0a\u9762\u7684\u53c9\u70b9\u5bfc\u81f4\u89e3\u4e0d\u662f\u6700\u4f18\uff0c\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u6ee1\u8db3\u4e8c\u5206\u7684\u9650\u5236\uff0c\u6240\u4ee5\u4ecd\u7136\u53ef\u4ee5\u505a\u51fa\u6b63\u786e\u7684\u5224\u5b9a\uff0c\u800c\u8fd9\u5c31\u8db3\u591f\u4e86\u3002**\n\n\u6240\u4ee5\u6700\u540e\u6211\u4eec\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f\u4e8c\u5206\u4e00\u4e2a $\\log$\uff0c\u4e3b\u5e2d\u6811\u4e00\u4e2a $\\log$\uff0c\u6545\u603b\u590d\u6742\u5ea6 $O(n\\log n+m\\log^2n)$\uff0c\u7a7a\u95f4 $O(n\\log n)$\uff0c\u8db3\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nconst int N = 100005;\nint n, m, suf[N], rnk[N], a[N], b[N], cnt[N], h[N], st[N][25], suftmp[N];\nchar s[N];\n\n#define Sum(p) (p ? p->sum : 0)\n#define Lc(p) (p ? p->l : NULL)\n#define Rc(p) (p ? p->r : NULL)\nstruct Node {\n\tint sum;\n\tNode *l, *r;\n\tinline void Update() {\n\t\tsum = Sum(l) + Sum(r);\n\t}\n};\nNode nd[30 * N];\nint top;\nstruct Segtree {\n\tNode *_root[N];\n\tinline void Ins(Node *&p1, Node *p2, int pl, int pr, int v) {\n\t\tp1 = &nd[++top];\n\t\tif (p2) nd[top] = *p2;\n\t\tif (pl == pr) {\n\t\t\tp1->sum++;\n\t\t\treturn;\n\t\t}\n\t\tint mid = pl + pr >> 1;\n\t\tif (v <= mid) Ins(p1->l, Lc(p2), pl, mid, v);\n\t\telse Ins(p1->r, Rc(p2), mid + 1, pr, v);\n\t\tp1->Update();\n\t}\n\tinline int Rnk(Node *p1, Node *p2, int pl, int pr, int l, int r) {\n\t\tif (pl == l && pr == r) return Sum(p2) - Sum(p1);\n\t\tint mid = pl + pr >> 1;\n\t\tif (mid >= r) return Rnk(Lc(p1), Lc(p2), pl, mid, l, r);\n\t\telse if (mid + 1 <= l) return Rnk(Rc(p1), Rc(p2), mid + 1, pr, l, r);\n\t\telse return Rnk(Lc(p1), Lc(p2), pl, mid, l, mid) + Rnk(Rc(p1), Rc(p2), mid + 1, pr, mid + 1, r);\n\t}\n\tinline int Kth(Node *p1, Node *p2, int pl, int pr, int k) {\n\t\tif (k <= 0) return 0;\n\t\tif (k > Sum(p2) - Sum(p1)) return n + 1;\n\t\tif (pl == pr) return pl;\n\t\tint cntl = Sum(Lc(p2)) - Sum(Lc(p1)), mid = pl + pr >> 1;\n\t\tif (cntl >= k) return Kth(Lc(p1), Lc(p2), pl, mid, k);\n\t\telse return Kth(Rc(p1), Rc(p2), mid + 1, pr, k - cntl);\n\t}\n\tinline int Lower(int l, int r, int x) {\n\t\treturn Kth(_root[l - 1], _root[r], 1, n, Rnk(_root[l - 1], _root[r], 1, n, 1, x));\n\t}\n\tinline int Upper(int l, int r, int x) {\n\t\treturn Kth(_root[l - 1], _root[r], 1, n, Rnk(_root[l - 1], _root[r], 1, n, 1, x) + 1);\n\t}\n};\nSegtree sgt;\n\ninline void Read() {\n\tscanf(\"%d%d\", &n, &m);\n\tscanf(\"%s\", s + 1);\n}\n\ninline bool cmp(int i, int j) {\n\treturn s[i] < s[j];\n}\n\ninline void Prefix() {\n\tfor (int i = 1;i <= n;i++) suf[i] = i;\n\tsort(suf + 1, suf + n + 1, cmp);\n\tfor (int i = 1;i <= n;) {\n\t\tint l = i;\n\t\twhile (i <= n && s[suf[l]] == s[suf[i]]) rnk[suf[i++]] = l;\n\t}\n\tfor (int k = 1;k <= 19;k++) {\n\t\tfor (int i = 1;i <= n;i++) b[i] = (i + (1 << k - 1) > n ? 0 : rnk[i + (1 << k - 1)]);\n\t\tmemset(cnt, 0, sizeof(cnt));\n\t\tfor (int i = 1;i <= n;i++) cnt[b[i]]++;\n\t\tfor (int i = 1;i <= n;i++) cnt[i] += cnt[i - 1];\n\t\tfor (int i = n;i >= 1;i--) suftmp[cnt[b[i]]--] = i;\n\t\tfor (int i = 1;i <= n;i++) a[i] = rnk[i];\n\t\tmemset(cnt, 0, sizeof(cnt));\n\t\tfor (int i = 1;i <= n;i++) cnt[a[i]]++;\n\t\tfor (int i = 1;i <= n;i++) cnt[i] += cnt[i - 1];\n\t\tfor (int i = n;i >= 1;i--) suf[cnt[a[suftmp[i]]]--] = suftmp[i];\n\t\tfor (int i = 1;i <= n;) {\n\t\t\tint l = i;\n\t\t\twhile (i <= n && a[suf[l]] == a[suf[i]] && b[suf[l]] == b[suf[i]]) rnk[suf[i++]] = l;\n\t\t}\n\t}\n\tfor (int i = 1;i <= n;i++) {\n\t\th[rnk[i]] = Max(h[rnk[i - 1]] - 1, 0);\n\t\twhile (s[i + h[rnk[i]]] == s[suf[rnk[i] - 1] + h[rnk[i]]]) h[rnk[i]]++;\n\t}\n\t//for (int i = 1;i <= n;i++) printf(\"%d \", h[i]); puts(\"\");\n\tfor (int i = 1;i <= n;i++) st[i][0] = h[i];\n\tfor (int j = 1;j <= 19;j++) {\n\t\tfor (int i = 1;i <= n;i++) {\n\t\t\tif (i + (1 << j - 1) > n) break;\n\t\t\tst[i][j] = Min(st[i][j - 1], st[i + (1 << j - 1)][j - 1]);\n\t\t}\n\t}\n\tfor (int i = 1;i <= n;i++) sgt.Ins(sgt._root[i], sgt._root[i - 1], 1, n, rnk[i]);\n}\n\ninline int Lcp(int l, int r) {\n\tif (l == r) return n - suf[r] + 1;\n\tif (l > r) swap(l, r);\n\tl++;\n\tint k = 31 - __builtin_clz(r - l + 1);\n\treturn Min(st[l][k], st[r - (1 << k) + 1][k]);\n}\n\ninline void Solve() {\n\twhile (m--) {\n\t\tint a, b, c, d;\n\t\tscanf(\"%d%d%d%d\", &a, &b, &c, &d);\n\t\tint l = 0, r = Min(b - a + 1, d - c + 1) + 1;\n\t\twhile (l < r - 1) {\n\t\t\tint mid = l + r >> 1;\n\t\t\tint x1 = sgt.Lower(a, b - mid + 1, rnk[c]), x2 = sgt.Upper(a, b - mid + 1, rnk[c]);\n\t\t\tif (Max(Min(Min(Lcp(x1, rnk[c]), b - suf[x1] + 1), d - c + 1), Min(Min(Lcp(x2, rnk[c]), b - suf[x2] + 1), d - c + 1)) >= mid) l = mid;\n\t\t\telse r = mid;\n\t\t}\n\t\tprintf(\"%d\\n\", l);\n\t}\n}\n\nint main() {\n\tRead();\n\tPrefix();\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1613743995,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4094 \u3010[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32\u3011"
    },
    {
        "content": "\u4e00\u9053\u4e0d\u9519\u7684\u9898\u3002\n\n\u770b\u5230\u9898\u591a\u534a\u4f1a\u60f3\u5230\u540e\u7f00\u6570\u7ec4\u5427\u3002\n\n\u9996\u5148\u5148\u6c42\u51fa sa,rk,height \u6570\u7ec4\uff0c\uff0c\u6211\u4eec\u73b0\u5728\u5176\u5b9e\u5c31\u662f\u8981\u5728$[a..b]$\u4e2d\u9009\u4e00\u4e2a\u4f4d\u7f6e $w$\uff0c\u6700\u5927\u5316 $\\min(b-w+1,d-c+1,lcp(w,c))$\uff0c\u8003\u8651\u5230$lcp(sa[i],sa[j])=\\min_{k=i+1}^jht[k]$ \u53d8\u4e00\u4e0b\u5f97\u5230 $lcp(i,j)=\\min_{k=rk[i]+1}^{rk[j]}ht[k]$\uff0c\u5f88\u663e\u7136\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u662f\u8981\u9009\u6700\u63a5\u8fd1 $rk[c]$ \u7684\u4f4d\u7f6e $w$\uff0c\u663e\u7136\uff0c\u6709\u4e24\u4e2a\uff08\u4e00\u4e2a\u6bd4 $rk[w]$ \u5927\uff0c\u4e00\u4e2a\u6bd4 $rk[w]$ \u5c0f\uff0c\u4e5f\u5c31\u662f\u627e\u533a\u95f4\u5185\u7684\u524d\u9a71\u540e\u7ee7\uff09\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u8fd8\u6709\u53d6 $\\min$ \u64cd\u4f5c\uff0c\u76f4\u63a5\u641e\u4f1a\u5f88\u590d\u6742\u2026\u2026\n\n\u4e0d\u8fc7\u8fd9\u4e2a\u4e5f\u633a\u597d\u5f04\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u884c\u5373\u53ef\u3002\n\n\u95ee\u9898\u662f\u5982\u4f55\u5728\u4e00\u4e2a $\\log$ \u5185\u627e\u51fa\u524d\u9a71\u540e\u7ee7\u3002\n\n\u663e\u7136\u6570\u7ec4\u662f\u9759\u6001\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5b9e\u73b0\uff0c\u5177\u4f53\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define mid ((l+r)>>1)\n#define N 300010\n#define M 4000010\nusing namespace std;\nnamespace chair_man_tree\n{\n\tint t[M],ls[M],rs[M],w,cnt;\n\tvoid update(int now)\n\t{\n\t\tt[now]=t[ls[now]]+t[rs[now]];\n\t}\n\tvoid add(int l,int r,int&p,int q)\n\t{\n\t\tif(!p) p=++cnt;\n\t\tif(l==r){t[p]++;return;}\n\t\tif(w<=mid)\n\t\t{\n\t\t\trs[p]=rs[q];\n\t\t\tadd(l,mid,ls[p],ls[q]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tls[p]=ls[q];\n\t\t\tadd(mid+1,r,rs[p],rs[q]);\n\t\t}\n\t\tupdate(p);\n\t}\n\tint sum(int l,int r,int p,int q)\n\t{\n\t\tif(r<=w) return t[q]-t[p];\n\t\tif(l>w||t[q]-t[p]==0) return 0;\n\t\treturn sum(l,mid,ls[p],ls[q])+sum(mid+1,r,rs[p],rs[q]);\n\t}\n\tint kth(int l,int r,int k,int p,int q)\n\t{\n\t\tif(l==r) return l;\n\t\tif(k<=t[ls[q]]-t[ls[p]]) return kth(l,mid,k,ls[p],ls[q]);\n\t\telse return kth(mid+1,r,k-(t[ls[q]]-t[ls[p]]),rs[p],rs[q]);\n\t}\n}\nint n;\nnamespace ST\n{\n\tint f[20][N],lg[N],x;\n\tvoid init(int*a)\n\t{\n\t\tf[0][1]=1;\n\t\tfor(int i=2;i<=n;i++) lg[i]=lg[i>>1]+1,f[0][i]=a[i];\n\t\tfor(int i=1;(1<<i)<=n;i++)\n\t\t\tfor(int j=1;j+(1<<(i-1))<=n;j++)\n\t\t\t\tf[i][j]=min(f[i-1][j],f[i-1][j+(1<<(i-1))]);\n\t}\n\tint query(int l,int r)\n\t{\n\t\tx=lg[r-l];\n\t\treturn min(f[x][l],f[x][r-(1<<x)+1]);\n\t}\n}\nchar s[N];\nint sa[N],rk[N],ht[N];\nnamespace SA\n{\n\tint id[N],px[N],ork[N],t[N];\n\tbool cmp(int a,int b,int c)\n\t{return ork[a]==ork[b]&&ork[a+c]==ork[b+c];}\n\tvoid main()\n\t{\n\t\tint i,w,p,m=300;\n\t\tfor(i=1;i<=n;i++) t[rk[i]=s[i]]++;\n\t\tfor(i=1;i<=m;i++) t[i]+=t[i-1];\n\t\tfor(i=n;i;i--) sa[t[rk[i]]--]=i;\n\t\tfor(w=1;w<n;w<<=1,m=p)\n\t\t{\n\t\t\tfor(i=1;i<=m;i++) t[i]=0;\n\t\t\tfor(p=0,i=n;i>n-w;i--) id[++p]=i;\n\t\t\tfor(i=1;i<=n;i++) if(sa[i]>w) id[++p]=sa[i]-w;\n\t\t\tfor(i=1;i<=n;i++) t[px[i]=rk[id[i]]]++;\n\t\t\tfor(i=1;i<=m;i++) t[i]+=t[i-1];\n\t\t\tfor(i=n;i;i--) sa[t[px[i]]--]=id[i];\n\t\t\tfor(i=1;i<=n;i++) ork[i]=rk[i];\n\t\t\tfor(p=0,i=1;i<=n;i++) rk[sa[i]]=cmp(sa[i],sa[i-1],w)?p:++p;\n\t\t}\n\t\tfor(i=1,p=0;i<=n;i++)\n\t\t{\n\t\t\tif(p) p--;\n\t\t\twhile(s[i+p]==s[sa[rk[i]-1]+p]) p++;\n\t\t\tht[rk[i]]=p;\n\t\t}\n\t}\n}\nusing namespace chair_man_tree;\nint a,b,c,d,rt[N],T,l,r;\nbool check(int len)\n{\n\tregister int ans=0,x,y;\n\tw=rk[c];\n\tx=sum(1,n,rt[a-1],rt[b-len+1]);\n\tif(x>0)\n\t{\n\t\ty=kth(1,n,x,rt[a-1],rt[b-len+1]);\n\t\tif(w==y) return 1;\n\t\tans=ST::query(y+1,w);\n\t}\n\tif(x<=b-len-a+1)\n\t{\n\t\ty=kth(1,n,x+1,rt[a-1],rt[b-len+1]);\n\t\tif(w==y) return 1;\n\t\tans=max(ans,ST::query(w+1,y));\n\t}\n\treturn ans>=len;\n}\nint main()\n{\n\tscanf(\"%d%d%s\",&n,&T,s+1);\n\tSA::main();\n\tST::init(ht);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tw=rk[i];\n\t\tadd(1,n,rt[i],rt[i-1]);\n\t}\n\twhile(T--)\n\t{\n\t\tscanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\t\tl=1,r=min(b-a+1,d-c+1);\n\t\twhile(l<r)\n\t\t{\n\t\t\tif(check(mid)) l=mid+1;\n\t\t\telse r=mid;\n\t\t}\n\t\tif(!check(l)) l--;\n\t\tprintf(\"%d\\n\",l);\n\t}\n}\n```\n",
        "postTime": 1617837419,
        "uid": 99506,
        "name": "_LHF_",
        "ccfLevel": 0,
        "title": "[HEOI2016/TJOI2016]\u5b57\u7b26\u4e32 \u89e3\u9898\u62a5\u544a"
    },
    {
        "content": "# [HEOI2016/TJOI2016] \u5b57\u7b26\u4e32\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P4094)\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32$s$\uff0c\u6bcf\u6b21\u7ed9\u4f60\u4e00\u6bb5\u533a\u95f4$[a,b]$\u548c$[c,d]$\uff0c\u6c42$s[a,b]$\u7684\u5b50\u4e32\u548c$[c,d]$\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002\n\n## \u9898\u89e3\n\n\u9996\u5148\u4e8c\u5206\u7b54\u6848$l$\uff0c\u90a3\u4e48\u95ee\u9898\u8f6c\u5316\u4e3a\u5f00\u5934\u5728$[a,b-l+1]$\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u6240\u6709\u540e\u7f00\u548c\u5f00\u5934\u4e3a$c$\u7684\u540e\u7f00\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u6700\u5927\u957f\u5ea6\u662f\u5426\u6bd4$l$\u5927\u3002\u7136\u540e\u5c31\u53d8\u6210\u4e00\u4e2a\u70b9\u548c\u51e0\u4e2a\u70b9\u548c\u51e0\u4e2a\u5176\u4ed6\u70b9\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u70b9\u7684\u795e\u90fd\u662f\u5426\u5927\u4e8e$l$\u3002\u4f46\u663e\u7136\u8fd9\u6837\u505a\u4e0d\u51fa\u6765\u3002\u6240\u4ee5\u8003\u8651\u8f6c\u53d8\uff0c\u6211\u4eec\u77e5\u9053\u4e8c\u5206\u4e4b\u540e\u6700\u7ec8\u7684\u90a3\u4e2a\u516c\u5171\u524d\u7f00\u5c31\u53d8\u6210\u4e86$[c,c+l-1]$\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u6240\u4ee5\u5c31\u770b\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u88ab$[a,b-l+1]$\u4e3a\u5f00\u5934\u7684\u4e00\u4e2a\u540e\u7f00\u5305\u542b\u5c31\u884c\u4e86\u3002\u5c31\u76f8\u5f53\u4e8e\uff0c\u5224\u65ad$[c,c+l-1]$\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5728\u540e\u7f00\u6811\u4e0a\u5bf9\u5e94\u7684\u90a3\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u662f\u5426\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u5f00\u5934\u5728$[a,b-l+1]$\u7684\u540e\u7f00\u7684\u8282\u70b9\u3002\n\n\u6700\u540e\u7531\u8877\u5730\u611f\u8c22\u4e00\u4e0b@[EternalAlexander](https://www.luogu.com.cn/user/48355)\u8fd9\u4f4d\u5de8\u4f6c\u3002\n\n## \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <iostream>\n\nconst int maxLen = 1e5 + 5, maxNode = maxLen << 1, inf = 1e8;\nint len, queNum;\nchar str[maxLen];\nstruct SuffixTree {\n\tint curLen, tail, now, actLen;\n\tint curStr[maxLen], link[maxNode], start[maxNode], len[maxNode], ch[maxNode][27];\n\tSuffixTree () {\n\t\tnow = tail = 1;\n\t\tcurLen = actLen = 0;\n\t\tlen[0] = inf;\n\t}\n\tint NewNode(int st, int le) {\n\t\tlink[++tail] = 1;\n\t\tstart[tail] = st;\n\t\tlen[tail] = le;\n\t\treturn tail;\n\t}\n\tvoid Extend(int ins) {\n\t\tcurStr[++curLen] = ins;\n\t\t++actLen;\n\t\tfor (int last = 1; actLen; ) {\n\t\t\twhile (actLen > len[ch[now][curStr[curLen - actLen + 1]]])\n\t\t\t\tactLen -= len[now = ch[now][curStr[curLen - actLen + 1]]];\n\t\t\tint &son = ch[now][curStr[curLen - actLen + 1]], val = curStr[start[son] + actLen - 1];\n\t\t\tif (!son || val == ins) {\n\t\t\t\tlink[last] = now;\n\t\t\t\tlast = now;\n\t\t\t\tif (!son)\n\t\t\t\t\tson = NewNode(curLen - actLen + 1, inf);\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tint split = NewNode(start[son], actLen - 1);\n\t\t\t\tch[split][val] = son;\n\t\t\t\tch[split][ins] = NewNode(curLen, inf);\n\t\t\t\tstart[son] += actLen - 1;\n\t\t\t\tlen[son] -= actLen - 1;\n\t\t\t\tlink[last] = son = split;\n\t\t\t\tlast = split;\n\t\t\t}\n\t\t\tif (now == 1)\n\t\t\t\t--actLen;\n\t\t\telse\n\t\t\t\tnow = link[now];\n\t\t}\n\t}\n} sft;\nstruct SegmentTree {\n\tint tail, ch[maxNode << 6][2];\n\tvoid Create(int &now) {\n\t\tch[++tail][0] = ch[now][0], ch[tail][1] = ch[now][1], now = tail;\n\t}\n\tvoid Insert(int &now, int lEP, int rEP, int pos) {\n\t\tCreate(now);\n\t\tif (lEP == rEP)\n\t\t\treturn ;\n\t\tint mid = (lEP + rEP) >> 1;\n\t\tif (pos <= mid)\n\t\t\tInsert(ch[now][0], lEP, mid, pos);\n\t\telse\n\t\t\tInsert(ch[now][1], mid + 1, rEP, pos);\n\t}\n\tvoid Merge(int &uId, int vId) {\n\t\tif (!uId || !vId) {\n\t\t\t//\u56e0\u4e3a\u8fd9\u6b21\u5408\u5e76\u5e76\u6ca1\u6709\u8fdb\u884c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u635f\u574f\u7ed3\u6784\uff0c\u5c31\u662f ch\u4e0d\u4f1a\u6539\u53d8 \n\t\t\tuId |= vId;\n\t\t\treturn ;\n\t\t}\n\t\tCreate(uId);\n\t\tMerge(ch[uId][0], ch[vId][0]);\n\t\tMerge(ch[uId][1], ch[vId][1]);\n\t}\n\tint Query(int now, int lEP, int rEP, int askL, int askR) {\n\t\tif (!now)\n\t\t\treturn 0;\n\t\tif (lEP > askR || rEP < askL)\n\t\t\treturn 0;\n\t\tif (askL <= lEP && rEP <= askR)\n\t\t\treturn 1;\n\t\tint mid = (lEP + rEP) >> 1;\n\t\treturn Query(ch[now][0], lEP, mid, askL, askR) | Query(ch[now][1], mid + 1, rEP, askL, askR);\n\t}\n} seg;\nint depth[maxNode], depToNod[maxLen], rt[maxNode], fa[maxNode][20]; //\u8fd9\u4e2a\u5b58\u6bcf\u4e2a\u957f\u5ea6\u7684\u540e\u7f00\u5bf9\u5e94\u7684\u70b9\u7684\u7f16\u53f7 \nvoid dfs(int now, int dep) {\n\tfor (int up = 1; up <= 17; ++up)\n\t\tfa[now][up] = fa[fa[now][up - 1]][up - 1];\n\tdep += std::min(sft.len[now], len - sft.start[now] + 1);\n\tdepth[now] = dep;\n\tbool isLeaf = 1;\n\tfor (int sonId = 0; sonId <= 26; ++sonId)\n\t\tif (sft.ch[now][sonId]) {\n\t\t\tisLeaf = 0;\n\t\t\tfa[sft.ch[now][sonId]][0] = now;\n\t\t\tif (now == 1 && sonId == 26)\n\t\t\t\tcontinue ;\n\t\t\tdfs(sft.ch[now][sonId], dep);\n\t\t\tseg.Merge(rt[now], rt[sft.ch[now][sonId]]);\n\t\t}\n\tif (isLeaf) {\n\t\tseg.Insert(rt[now], 1, len, dep);\n\t\tdepToNod[dep] = now;\n\t}\n}\nint locate(int lpos, int rpos) {\n\tint now = depToNod[len - lpos + 1];\n\tfor (int up = 17; up >= 0; --up)\n\t\tif (fa[now][up] && depth[fa[now][up]] >= rpos - lpos + 1)\n\t\t\tnow = fa[now][up];\n\treturn now;\n}\nbool Check(int lcpLen, int begA, int endB, int begC, int endD) {\n\t//begC + lcpLen - 1\u662f\u90a3\u4e2a\u6700\u957f\u516c\u5171\u524d\u7f00 \n\tint pos = locate(begC, begC + lcpLen - 1);\n\tendB -= lcpLen - 1;\n\t//\u8fd9\u91cc\u662f rt[pos]\u800c\u4e0d\u662f pos\uff01 \n\tif (seg.Query(rt[pos], 1, len, len - endB + 1, len - begA + 1))\n\t\treturn endB += lcpLen - 1, 1;\n\telse\n\t\treturn endB += lcpLen - 1, 0;\n}\n\nint main() {\n\tfreopen(\"string.in\", \"r\", stdin);\n\tscanf(\"%d%d\", &len, &queNum);\n\tscanf(\"%s\", str + 1);\n\tfor (int pos = 1; pos <= len; ++pos)\n\t\tsft.Extend(str[pos] - 'a');\n\tsft.Extend(26);\n\tdfs(1, 0);\n\twhile (queNum--) {\n\t\tint begA, endB, begC, endD;\n\t\tscanf(\"%d%d%d%d\", &begA, &endB, &begC, &endD);\n\t\tint lEP = 0, rEP = std::min(endD - begC + 1, endB - begA + 1);\n\t\twhile (rEP > lEP) {\n\t\t\tint mid = (lEP + rEP + 1) >> 1;\n\t\t\tif (Check(mid, begA, endB, begC, endD))\n\t\t\t\tlEP = mid;\n\t\t\telse\n\t\t\t\trEP = mid - 1;\n\t\t}\n\t\tprintf(\"%d\\n\", lEP);\n\t}\n\treturn 0;\n}\n```\n\n## \u77e5\u8bc6\u70b9\n\n+ \u4e0d\u80fd\u76f4\u63a5\u641e\u7684\u6700\u5927\u503c\u95ee\u9898\u60f3\u4e00\u4e0b\u4e8c\u5206\u3002\n+ \u5982\u679c\u8981\u628a\u95ee\u9898\u8f6c\u5316\u6210\u540e\u7f00\u6811\u4e0a\u7684\u95ee\u9898\uff0c\u8981\u5145\u5206\u5229\u7528\u5df2\u77e5\u6761\u4ef6\uff0c\u505a\u4e0d\u51fa\u6765\u4e86\u8981\u6362\u4e00\u4e2a\u8f6c\u5316\u65b9\u6cd5\u3002\n",
        "postTime": 1580306389,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[HEOI2016/TJOI2016] \u5b57\u7b26\u4e32\uff08\u540e\u7f00\u6811\uff0c\u7ebf\u6bb5\u6811\u5408\u5e76\uff09"
    }
]