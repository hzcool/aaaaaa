[
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P7968)\n\n#### \u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u4f60 $n$ \u4e2a\u4eba\u7684\u8eab\u9ad8\u8303\u56f4\uff0c\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5c06\u8fde\u7eed\u7684\u4e00\u6bb5\u4eba\u6392\u9664\uff0c\u4f46\u8981\u6c42\u8fd9\u4e9b\u4eba\u8eab\u9ad8\u6ca1\u6709\u4ea4\u96c6\uff0c\u6709 $Q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u5b9a $l$\uff0c$r$ \u95ee\u6700\u591a\u9700\u8981\u51e0\u6b21\u64cd\u4f5c\u53ef\u4ee5\u5c06 $l - r$ \u4e4b\u95f4\u7684\u4eba\u5168\u90e8\u6392\u9664\u3002\n\n#### \u5206\u6790\uff1a\n\n\u8003\u8651\u8d2a\u5fc3\uff0c\u5bf9\u4e8e\u4e00\u6b21\u64cd\u4f5c\uff0c\u8bbe\u5176\u5de6\u7aef\u70b9\u4e3a $l$\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u4f1a\u8ba9\u53f3\u7aef\u70b9\u5c3d\u53ef\u80fd\u7684\u5927\uff0c\u6240\u4ee5 $r$ \u9009\u62e9\u8eab\u9ad8\u65e0\u4ea4\u96c6\u7684\u6700\u5927\u7684 $r$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $l$  \u4eec\u90fd\u6c42\u51fa\u5b83\u7684 $r$\uff0c\u8fd9\u4e00\u64cd\u4f5c\u53ef\u4ee5\u7528\u6570\u636e\u7ed3\u6784\u53bb\u7ef4\u62a4\uff0c\u6211\u8fd9\u91cc\u7528\u7684\u662f\u5355\u8c03\u961f\u5217\u52a0\u7ebf\u6bb5\u6811\uff0c\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n\u53e6\u5916\u8eab\u9ad8\u5f88\u9ad8\u554a\uff0c\u8fd8\u8981\u79bb\u6563\u5316\u3002\n\n\u7136\u540e\u6574\u9053\u9898\u76ee\u5c31\u5f88\u6e05\u6670\u4e86\uff0c\u5c31\u76f8\u5f53\u4e8e[\u6700\u5c11\u7ebf\u6bb5\u8986\u76d6](https://www.luogu.com.cn/problem/CF1175E)\uff0c\u8fd9\u5c31\u662f\u500d\u589e\u4f18\u5316 DP \u7684\u677f\u5b50\u9898\u4e86\uff0c\u70b9\u53ef\u4ee5\u8f6c\u6210\u7ebf\u6bb5\u3002\n\n#### code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long i64;\n\ni64 read() {\n\ti64 x(0), f(0); char ch = getchar();\n\twhile (!isdigit(ch)) f |= (ch == '-'), ch = getchar();\n\twhile (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n\treturn f ? -x : x;\n}\nint __stk[128], __len;\nvoid put(i64 x) {\n\tif (x < 0) putchar('-'), x = -x;\n\tdo { __stk[++__len] = x % 10, x /= 10; } while (x);\n\twhile (__len) putchar(__stk[__len--] ^ 48);\n}\nconst int N = 401010;\nint n, q, cnt;\nint L[N], R[N], c[N];\nint f[N][22];\n\nstruct Tree {\n\t#define mid ((l + r) >> 1)\n\t#define ls (x << 1)\n\t#define rs (x << 1 | 1)\n\tint t[N << 4], tag[N << 4];\n\tvoid pushdown(int x) {\n\t\tif (tag[x]) {\n\t\t\tt[ls] += tag[x], tag[ls] += tag[x];\n\t\t\tt[rs] += tag[x], tag[rs] += tag[x];\n\t\t\ttag[x] = 0;\n\t\t}\n\t}\n\tvoid modify(int x, int l, int r, int L, int R, int v) {\n\t\tif (l >= L && r <= R) return t[x] += v, tag[x] += v, void();\n\t\tpushdown(x);\n\t\tif (mid >= L) modify(ls, l, mid, L, R, v);\n\t\tif (mid < R) modify(rs, mid + 1, r, L, R, v);\n\t\tt[x] = max(t[ls], t[rs]);\n\t}\n\tint ask(int x, int l, int r, int L, int R) {\n\t\tif (l >= L && r <= R) return t[x];\n\t\tpushdown(x); int ans = 0;\n\t\tif (mid >= L) ans = max(ans, ask(ls, l, mid, L, R));\n\t\tif (mid < R) ans = max(ans, ask(rs, mid + 1, r, L, R));\n\t\treturn ans;\n\t}\n}T;\n\nsigned main() {\n//\tfreopen(\"osumnjiceni.in\",\"r\",stdin);\n//\tfreopen(\"osumnjiceni.out\",\"w\",stdout);\n\tn = read();\n\tfor (int i = 1; i <= n; ++i) {\n\t\tc[++cnt] = L[i] = read();\n\t\tc[++cnt] = R[i] = read(); \n\t}\n\tsort(c + 1, c + cnt + 1), cnt = unique(c + 1, c + cnt + 1) - c - 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tL[i] = lower_bound(c + 1, c + cnt + 1, L[i]) - c;\n\t\tR[i] = lower_bound(c + 1, c + cnt + 1, R[i]) - c;\n\t}\n\tint p = 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\twhile (T.ask(1, 1, cnt, L[i], R[i])) {\n\t\t\tf[p - 1][0] = i - 1;\n\t\t\tT.modify(1, 1, cnt, L[p], R[p], -1), ++p;\n\t\t}\n\t\tT.modify(1, 1, cnt, L[i], R[i], 1);\n\t}\n\twhile (p <= n + 1) f[p - 1][0] = n, ++p;\n\tfor (int j = 1; j <= 20; ++j) \n\t\tfor (int i = 0; i <= n; ++i) \n\t\t\tf[i][j] = f[f[i][j - 1]][j - 1];\n\tq = read();\n\twhile (q--) {\n\t\tint l = read() - 1, r = read(), ans = 1;\n\t\tfor (int i = 20; ~i; --i) if(f[l][i] < r) ans += 1 << i, l = f[l][i];\n\t\tput(ans), putchar('\\n');\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1661749884,
        "uid": 399716,
        "name": "\u94b0\u747e_\u604b\u6db5",
        "ccfLevel": 7,
        "title": "[COCI2021-2022#2] Osumnji\u010deni \u9898\u89e3"
    },
    {
        "content": "\u4eca\u5929\u5b66\u5f1f\u95ee\u6211\u7684\u4e00\u9053\u9898\uff0c\u8fc7\u6765\u770b\u4e86\u770b\u53d1\u73b0\u9898\u89e3\u597d\u50cf\u6ca1\u6709\u5bf9\u4e00\u4e9b\u7ec6\u8282\u8bf4\u660e\uff1f\u5728\u6b64\u4f5c\u4e00\u4e9b\u8865\u5145\u3002\n\n\u9996\u5148\u8f6c\u5316\u9898\u610f\uff0c\u7ed9\u51fa $n$ \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u5e26\u6709\u4e00\u4e2a\u503c\u57df\u4e0a\u4e0b\u754c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u9009\u51fa\u7f16\u53f7\u8fde\u7eed\u4e14\u503c\u57df\u4e0a\u4e0b\u754c\u65e0\u4ea4\u96c6\u7684\u4e00\u4e9b\u4eba\u8fdb\u884c\u8986\u76d6\uff0c$q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u95ee\u5b8c\u5168\u8986\u76d6 $[l,r]$ \u6700\u5c11\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\uff1f\n\n\u8003\u8651\u8d2a\u5fc3\uff0c\u663e\u7136\uff0c\u5f53\u7f16\u53f7\u8fde\u7eed\u7684\u4e24\u6bb5 $[l,x),[x,r]$ \u5728\u503c\u57df\u4e0a\u5b8c\u5168\u65e0\u4ea4\u96c6\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u8fd9\u4e24\u6bb5\u4e00\u8d77\u8986\u76d6\uff08\u591a\u8986\u76d6\u7684\u90e8\u5206\u8d85\u51fa\u8be2\u95ee\u53f3\u8fb9\u754c\u65f6\u5bf9\u4e8e\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u800c\u5728\u8be2\u95ee\u8303\u56f4\u5185\u5c06\u4e8c\u8005\u540c\u65f6\u8986\u76d6\u4e00\u5b9a\u662f\u66f4\u597d\u7684\u9009\u62e9\uff09\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u4eba $i$\uff0c\u6211\u4eec\u90fd\u9009\u51fa\u7f16\u53f7\u6700\u9760\u540e\u4e14\u6ee1\u8db3 $[i,j]$ \u503c\u57df\u4e0a\u65e0\u4ea4\u96c6\u7684\u4e00\u4e2a $j$ \u4f5c\u4e3a\u8f6c\u79fb\u7684\u53f3\u8fb9\u754c\u3002\n\n\u8fd9\u91cc\u91c7\u7528\u53cc\u6307\u9488\u7ef4\u62a4\uff0c\u7ef4\u62a4\u4e00\u4e2a\u503c\u57df\u4e0a\u4e0d\u91cd\u590d\u7684\u96c6\u5408\uff0c\u5f53\u53f3\u6307\u9488\u53ef\u4ee5\u6269\u5f20\u65f6\u5c31\u5c3d\u91cf\u6269\u5f20\uff0c\u7136\u540e\u5728\u5de6\u6307\u9488\u5df2\u7ecf\u5904\u7406\u597d\u540e\u5c06\u5176\u5220\u53bb\u5e76\u53f3\u79fb\u3002\n\n\u8986\u76d6\u90e8\u5206\uff0c\u6211\u4eec\u5728\u5df2\u7ecf\u5904\u7406\u597d\u7684\u6240\u6709\u6bb5\u91cc\u9762\u9009\u51fa\u5e76\u8986\u76d6\uff0c\u53ef\u4ee5\u91c7\u7528\u500d\u589e\u6216\u5e76\u67e5\u96c6\u4f18\u5316\uff0c\u53ef\u4ee5\u53c2\u8003[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/CF1175E)\uff0c\u6ce8\u610f\u5230\u4e00\u70b9\uff0c\u5c31\u662f\u6211\u4eec\u7684\u500d\u589e\u7b97\u6cd5\u662f\u57fa\u4e8e\u7aef\u70b9\u76f8\u4ea4\u7684\u8986\u76d6\u60c5\u51b5\uff0c\u800c\u672c\u9898\u7684\u6837\u4f8b\u5c31\u544a\u8bc9\u6211\u4eec\u4e0d\u9700\u8981\u4e5f\u4e0d\u53ef\u80fd\u662f\u7aef\u70b9\u76f8\u4ea4\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u76f4\u63a5\u5957\u7528\u4f1a\u5bfc\u81f4\u7b54\u6848\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u503c\uff08\u56e0\u4e3a\u59cb\u7ec8\u5728\u53f3\u7aef\u70b9\u8986\u76d6\u81ea\u8eab\uff09\u3002\u6709\u4e00\u79cd\u6bd4\u8f83\u5de7\u5999\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\u4ee4\u6240\u6709\u8986\u76d6\u65b9\u5f0f\u53d8\u6210\u5de6\u5f00\u53f3\u95ed\uff0c\u5373\u4ee4\u500d\u589e\u4e2d $f_{i,j}$ \u8868\u793a\u539f\u5148\u7684 $f_{i+1,j}$\uff0c\u7c7b\u4f3c\u4e8e\u9009\u51fa\u4e00\u6bb5\u540e\uff0c\u5728\u5c06\u6307\u9488\u53f3\u79fb\u4e00\u4f4d\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u5904\u7406\u672c\u9898\u7684\u60c5\u51b5\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, q, cnt, l[N], r[N], a[N], c[N << 1], d[N << 1], dd[N << 1], f[18][N];\nchar ibuf[N], *is = ibuf, *ie = ibuf;\ninline char gc() {\n\treturn is == ie && (is = ibuf, ie = ibuf + fread(ibuf, 1, N, stdin)), is == ie ? EOF : *is++;\n}\ninline int read() {\n\tint x = 0;\n\tchar ch = gc();\n\twhile (!isdigit(ch))\n\t\tch = gc();\n\twhile (isdigit(ch))\n\t\tx = (x << 1) + (x << 3) + (ch ^ 48), ch = gc();\n\treturn x;\n}\ninline void modify(int t[], int x, int k) {\n\twhile (x <= cnt) {\n\t\tt[x] += k;\n\t\tx += (x & -x);\n\t}\n}\ninline int query(int t[], int x) {\n\tint res = 0;\n\twhile (x) {\n\t\tres += t[x];\n\t\tx -= (x & -x);\n\t}\n\treturn res;\n}\ninline void Modify(int l, int r, int k) {\n\tmodify(d, l, k), modify(d, r + 1, -k);\n\tmodify(dd, l, l * k), modify(dd, r + 1, (r + 1) * -k);\n}\ninline int Query(int l, int r) {\n\treturn (r + 1) * query(d, r) - query(dd, r) - l * query(d, l - 1) + query(dd, l - 1);\n}\nsigned main() {\n\tn = read();\n\tfor (int i = 1; i <= n; i++) {\n\t\tl[i] = read(), r[i] = read();\n\t\tc[++cnt] = l[i], c[++cnt] = r[i];\n\t}\n\tsort(c + 1, c + cnt + 1);\n\tcnt = unique(c + 1, c + cnt + 1) - c - 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tl[i] = lower_bound(c + 1, c + cnt + 1, l[i]) - c;//\u4ec5\u5728\u4e4e\u6709\u65e0\u4ea4\u96c6\uff0c\u5373\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff0c\u79bb\u6563\u5316\u5904\u7406\u5373\u53ef\u3002\n\t\tr[i] = lower_bound(c + 1, c + cnt + 1, r[i]) - c;\n\t}\n\tint R = 0;\n\tfor (int L = 1; L <= n; L++) {\n\t\twhile (R < n && Query(l[R + 1], r[R + 1]) == 0) {//BIT \u7ef4\u62a4\uff0c\u82e5\u5bf9\u5e94\u503c\u57df\u533a\u95f4\u5185\u533a\u95f4\u548c\u4e3a 0 \u5219\u8bf4\u660e\u65e0\u76f8\u4ea4\u53ef\u80fd\u3002\n\t\t\tR++;\n\t\t\tModify(l[R], r[R], 1);\n\t\t}\n\t\ta[L] = R;\n\t\tModify(l[L], r[L], -1);//\u63a5\u4e0b\u6765\u7ef4\u62a4\u533a\u95f4\u53d8\u6210[L + 1, R]\uff0c\u5220\u9664 L\u3002\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t \tf[0][i - 1] = a[i];\n\tf[0][n] = n;//\u9632\u6b62\u9009\u62e9\u5230 n \u540e\u53d8\u6210 0 \u53c8\u6765\u4e00\u56de\n\tfor (int i = 1; i <= 17; i++)\n\t\tfor (int j = 0; j <= n; j++)\n\t\t\tf[i][j] = f[i - 1][f[i - 1][j]];\n\tq = read();\n\twhile (q--) {\n\t\tint l = read() - 1, r = read(), ans = 0;\n\t\tfor (int i = 17; ~i; i--)\n\t\t\tif (f[i][l] < r) ans += 1 << i, l = f[i][l];\n\t\tprintf(\"%d\\n\", ans + 1);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1663940527,
        "uid": 434929,
        "name": "Usada_Pekora",
        "ccfLevel": 7,
        "title": "P7968 \u8d2a\u5fc3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6709\u603b\u5171\u4e24\u4e2a\u90e8\u5206\uff1a\n1. \u7ed9\u5b9a\u5acc\u7591\u4eba\u8eab\u9ad8\u8303\u56f4\uff0c\u5c06\u5acc\u7591\u4eba\u5206\u7ec4\u3002\n2. \u5df2\u77e5\u5acc\u7591\u4eba\u7684\u7f16\u53f7\u8303\u56f4\uff0c\u6c42\u786e\u5b9a\u8fd9\u4e2a\u5acc\u7591\u4eba\u81f3\u591a\u8981\u5230\u591a\u5c11\u7ec4\u4e2d\u53bb\u5bfb\u627e\u3002\n\n\u8fd9\u9053\u9898\u7684\u7b2c\u4e00\u90e8\u5206\u5176\u5b9e\u5c31\u662f\u8981\u628a\u4e00\u4e2a\u4e00\u4e2a\u7684\u533a\u95f4\u5206\u6210\u7f16\u53f7\u8fde\u7eed\u7684\u82e5\u5e72\u7ec4\uff0c\u6bcf\u7ec4\u7ec4\u5185\u7684\u533a\u95f4\u90fd\u4e92\u4e0d\u91cd\u53e0\u6ca1\u6709\u4ea4\u96c6\u3002\u6211\u4eec\u8981\u7ef4\u62a4\u8fd9\u4e9b\u7ec4\u624d\u80fd\u505a\u7b2c\u4e8c\u90e8\u5206\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u66b4\u529b\uff0c\u6bcf\u6b21\u4ece\u5acc\u7591\u4eba $\\texttt {p}$ \u5f00\u59cb\uff0c\u7136\u540e\u6309\u987a\u5e8f\u628a\u5acc\u7591\u4eba\u9010\u4e00\u52a0\u5165\u4e00\u4e2a\u7ec4\u5f53\u4e2d\u3002\u76f4\u5230\u8981\u6dfb\u52a0\u7684\u67d0\u4e2a\u5acc\u7591\u4eba $\\texttt {q}$ \u8eab\u9ad8\u533a\u95f4\u4e0e\u8fd9\u4e00\u7ec4\u5df2\u6709\u7684\u5acc\u7591\u4eba\u7684\u8eab\u9ad8\u533a\u95f4\u4ea4\u96c6\u65f6\uff0c\u6211\u4eec\u53e6\u5f00\u4e00\u4e2a\u7ec4\uff0c\u628a $\\texttt{q}$ \u6dfb\u52a0\u5230\u8fd9\u4e2a\u7ec4\u4e2d\uff0c\u5982\u6b64\u5f80\u590d\uff0c\u76f4\u81f3\u9884\u5904\u7406\u5b8c\u6240\u6709\u5acc\u7591\u4eba\u7684\u8eab\u9ad8\u533a\u95f4\u3002\n\n\u5728\u628a\u5acc\u7591\u4eba $\\texttt {p}$ \u52a0\u5165\u4e00\u4e2a\u7ec4\u4e4b\u524d\uff0c\u6211\u4eec\u8981\u77e5\u9053\u8fd9\u4e2a\u7ec4\u4e2d\u6709\u6ca1\u6709\u8eab\u9ad8\u8303\u56f4\u548c\u4ed6/\u5979\u7684\u8eab\u9ad8\u8303\u56f4\u91cd\u53e0\u7684\u4eba\u3002\u4e3a\u4e86\u5feb\u901f\u67e5\u627e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u4e00\u4e2a `std::set<std::pair<int,int>>` \u5b58\u50a8\u76ee\u524d\u672c\u7ec4\u5f53\u4e2d\u5acc\u7591\u4eba\u7684\u8eab\u9ad8\u8303\u56f4\uff0c\u6bcf\u4e2a `std::pair` \u7684\u524d\u4e00\u4e2a\u952e\u503c\u8868\u793a\u8eab\u9ad8\u533a\u95f4\u8303\u56f4\u7684\u5de6\u7aef\u70b9\uff0c\u540e\u4e00\u4e2a\u952e\u503c\u8868\u793a\u5acc\u7591\u4eba\u7684\u7f16\u53f7\u3002\u5728\u67e5\u627e\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e8c\u5206\u627e\u5230\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u8eab\u9ad8\u533a\u95f4\u8303\u56f4\u5de6\u7aef\u70b9\u6bd4 $\\texttt {p}$ \u7684\u8eab\u9ad8\u8303\u56f4\u5de6\u7aef\u70b9\u5927\u7684\u4eba $\\texttt {p'}$\uff0c\u7136\u540e\u68c0\u9a8c  $\\texttt {p}$ \u7684\u8eab\u9ad8\u533a\u95f4\u53f3\u7aef\u70b9\u662f\u5426\u5728 $\\texttt {p'}$ \u7684\u8eab\u9ad8\u533a\u95f4\u8303\u56f4\u4e2d\uff1b\u518d\u4e8c\u5206\u627e\u5230\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u8eab\u9ad8\u533a\u95f4\u8303\u56f4\u5de6\u7aef\u70b9\u6bd4 $\\texttt {p}$ \u7684\u8eab\u9ad8\u8303\u56f4\u5de6\u7aef\u70b9\u5c0f\u7684\u4eba $\\texttt {p'}$\uff0c\u7136\u540e\u68c0\u9a8c  $\\texttt {p'}$ \u7684\u8eab\u9ad8\u533a\u95f4\u53f3\u7aef\u70b9\u662f\u5426\u5728 $\\texttt {p}$ \u7684\u8eab\u9ad8\u533a\u95f4\u8303\u56f4\u4e2d\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u68c0\u9a8c\u90fd\u662f OK \u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a $\\texttt {p}$ \u52a0\u5165\u5230\u8fd9\u7ec4\u5acc\u7591\u4eba\u5f53\u4e2d\uff0c\u5426\u5219\u6e05\u7a7a\u96c6\u5408\uff0c\u65b0\u5efa\u4e00\u4e2a\u65b0\u7684\u7ec4\u3002\u8fd9\u6837\u505a\u7b2c\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n\\log n)$\u3002\n\n\u7b2c\u4e8c\u90e8\u5206\u662f\u5728\u7ed9\u5b9a\u7684\u5acc\u7591\u4eba\u7f16\u53f7\u533a\u95f4\u4e2d\uff0c\u5bfb\u627e\u4e00\u4e2a\u5acc\u7591\u4eba $\\texttt {X}$ \u81f3\u591a\u9700\u8981\u8c03\u67e5\u591a\u5c11\u6b21\u3002\u6211\u4eec\u77e5\u9053\u5728\u7ed9\u5acc\u7591\u4eba\u5206\u597d\u7ec4\u4e4b\u540e\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5acc\u7591\u4eba\u4f1a\u88ab\u627e\u5230\uff0c\u4f46\u8981\u627e\u5230 $\\texttt {X}$\uff0c\u6700\u574f\u60c5\u51b5\u662f\u6211\u4eec\u5728\u6bcf\u4e2a\u7ec4\u4e2d\u90fd\u627e\u5230\u4e00\u4e2a\u5acc\u7591\u4eba\u540e\u624d\u627e\u5230 $\\texttt {X}$\uff0c\u8fd9\u76f8\u5f53\u4e8e\u8be2\u95ee\u8fd9\u4e2a\u7f16\u53f7\u533a\u95f4\u4e00\u5171\u8de8\u8d8a\u4e86\u591a\u5c11\u4e2a\u5acc\u7591\u4eba\u7ec4\u3002\n\n\u5982\u679c\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u770b\u6709\u591a\u5c11\u4e2a\u6bb5\uff0c\u5355\u6b21\u8be2\u95ee\u590d\u6742\u5ea6\u5c06\u662f $O(n)$ \u7684\u3002\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\uff0c\u4f60\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u4f46\u6ca1\u6709\u5fc5\u8981\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u6bd4\u7ebf\u6bb5\u6811\u5e38\u6570\u7565\u5c0f\u4e00\u70b9\u7684\u500d\u589e\u65b9\u6cd5\u3002\n \n\u6211\u4eec\u8bb0 $\\texttt{nxt(p)}$ \u4e3a\u521a\u521a\u5206\u7ec4\u65f6\uff0c\u7b2c\u4e00\u4e2a\u65e0\u6cd5\u52a0\u5165 $\\texttt{p}$ \u6240\u5728\u7ec4\u7684\u5acc\u7591\u4eba\uff0c\u8bb0 ${f(p,i)}$ \u4e3a $\\texttt{p}$ \u53cd\u590d\u505a\u64cd\u4f5c\uff1a$\\texttt{p}\\leftarrow\\texttt{nxt(p)}$ \u5171 $2^i$ \u6b21\u5f97\u5230\u7684\u4eba\uff0c\u5373 $\\texttt{p}$ \u6240\u5728\u7ec4\u540e\u9762\u7b2c $2^i$ \u4e2a\u7ec4\u7b2c\u4e00\u4e2a\u52a0\u5165\u7684\u4eba\uff0c\u4e0d\u96be\u5f97\u5230\uff1a\n\n$$f(p,i)\\leftarrow f(f(p,i-1),i-1),f(p,0)\\leftarrow\\texttt{nxt(p)}$$\n\n\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019 $O(\\log n)$ \u5730\u56de\u7b54\u8be2\u95ee\u4e86\u3002\u8fd9\u6837\u505a\uff0c\u6574\u9053\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n+q\\log n)$\u3002\n\n\u6ce8\u610f\u7ec6\u8282\uff0c\u4ee3\u7801\u5982\u4e0b\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a\n``` cpp\n#include <stdio.h>\n#include <algorithm>\n#include <set>\n#define qaq inline\nusing ll=long long;\nusing piit=std::pair<int,int>;\nconst int sz=2e5+19;\nconst int logsz=19;\nint n,q,lns[sz],rns[sz],f[logsz][sz];\nstd::set<piit> s;\nint main(){\n    scanf(\"%d\",&n);\n    for(int cx=1;cx<=n;++cx)\n        scanf(\"%d%d\",lns+cx,rns+cx);\n    auto validIns=[](int id)->bool{\n        if(s.empty()) return true;\n        auto it=s.lower_bound(std::make_pair(lns[id],0));\n        int prev,post=it->second;\n        if(lns[id]<=lns[post]&&lns[post]<=rns[id]) return false;\n        if(it!=s.begin()){\n            --it,prev=it->second;\n            if(lns[prev]<=lns[id]&&lns[id]<=rns[prev]) return false;\n        }\n        return true;\n    };\n    for(int lim=0,cx=1;cx<=n;++cx){\n        if(lim<cx){\n            s.clear();\n            lim=cx;\n            s.insert(std::make_pair(lns[lim],lim));\n        }\n        while(lim<n&&validIns(lim+1))\n            lim++,s.insert(std::make_pair(lns[lim],lim));\n        f[0][cx]=lim+1;\n        s.erase(std::make_pair(lns[cx],cx));\n    }\n    f[0][n+1]=n+1;\n    for(int cx=1;cx<logsz;++cx){\n        for(int cy=1;cy<=n+1;++cy){\n            f[cx][cy]=f[cx-1][f[cx-1][cy]];\n        }\n    }\n    scanf(\"%d\",&q);\n    for(int cx=1,a,b,ans;cx<=q;++cx){\n        scanf(\"%d%d\",&a,&b);\n        ans=0;\n        for(int cy=logsz-1;~cy;--cy)\n            if(f[cy][a]<=b) a=f[cy][a],ans+=(1<<cy);\n        printf(\"%d\\n\",ans+1);\n    }\n    return 0;\n}\n```",
        "postTime": 1640670205,
        "uid": 496840,
        "name": "SAMSHAWCRAFT",
        "ccfLevel": 0,
        "title": "[COCI2021-2022#2] Osumnji\u010deni - \u9898\u89e3"
    },
    {
        "content": "# COCI2021-2022 Contest1 T5\u9898\u89e3\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.monkey-hyx.tech?t=COCI-2021-2022-Contest2)\n\n\uff08\u5efa\u8bae\u60a8\u4ece\u4e0a\u65b9\u94fe\u63a5\u8fdb\u5165\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u67e5\u770b\u6b64 Blog\uff0c\u5728 Luogu \u4e2d\u56fe\u7247\u4f1a\u88ab\u5899\u6389\uff0c\u90e8\u5206 Markdown \u4e5f\u4f1a\u5931\u6548\uff09\n\n## [\u539f\u9898\u9762\u94fe\u63a5](https://hsin.hr/coci/contest2_tasks.pdf)\n\n## [Luogu\u9898\u9762](https://www.luogu.com.cn/problem/list?keyword=COCI2021-2022%232&page=1)\n\n## T5 Osumnji\u010deni\n\n### \u9898\u610f\n\n\u6709 $ n $ \u4e2a\u533a\u95f4\uff0c\u7f16\u53f7\u4e3a $ 1, 2, \\cdots, n $\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u6807\u8bb0\u8fde\u7eed\u4e00\u6bb5\u7f16\u53f7\u7684\u533a\u95f4\uff0c\u8981\u6c42\u5176\u4e2d\u7684\u533a\u95f4\u4e92\u4e0d\u76f8\u4ea4\u3002$ q $ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e00\u4e2a\u7f16\u53f7\u7684\u533a\u95f4\uff0c\u6c42\u51fa\u6807\u8bb0\u8fd9\u4e2a\u7f16\u53f7\u533a\u95f4\u5185\u6240\u6709\u533a\u95f4\u81f3\u5c11\u9700\u8981\u591a\u5c11\u6b21\u3002\n\n### Solution\n\n\u9996\u5148\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u8d2a\u5fc3\uff0c\u5373\u5f53\u6211\u4eec\u67d0\u4e00\u6b21\u6807\u8bb0\u7684\u533a\u95f4 $ \\left[ l, r \\right] $ \u7684 $ l $ \u786e\u5b9a\u4e4b\u540e\uff0c\u4e3a\u4e86\u6807\u8bb0\u6b21\u6570\u5c3d\u91cf\u5c11\uff0c\u6211\u4eec\u4e00\u5b9a\u8981\u5728\u5408\u6cd5\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u8ba9\u6807\u8bb0\u533a\u95f4\u66f4\u5927\uff0c\u5373 $ r $ \u66f4\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u5bf9\u4e8e $ n $ \u4e2a\u533a\u95f4\u7ef4\u62a4\u51fa\u6bcf\u4e00\u4e2a $ l $ \u5bf9\u5e94\u7684\u6700\u5927\u7684 $ r $\uff0c\u8003\u8651\u4f7f\u7528\u6570\u636e\u7ed3\u6784\uff1a\n\n\u6743\u503c\u7ebf\u6bb5\u6811 + \u5355\u8c03\u961f\u5217\u3002\n\n\u4e0d\u96be\u60f3\u5230\uff0c\u7528\u5355\u8c03\u961f\u5217\u7684\u601d\u60f3\u5b58\u8eab\u9ad8\u533a\u95f4\uff0c\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u5728\u5f53\u524d\u5355\u8c03\u961f\u5217\u4e2d\u6240\u6709\u8eab\u9ad8\u533a\u95f4\u503c\u57df\u4e2d\uff0c\u5982\u679c\u63d2\u5165\u65b0\u7684\u8eab\u9ad8\u533a\u95f4\uff0c\u4f1a\u6709\u54ea\u4e9b\u8eab\u9ad8\u533a\u95f4\u56e0\u6709\u533a\u95f4\u76f8\u4ea4\u800c\u4e0d\u5408\u6cd5\u3002\u4ee5\u6b64\u5373\u53ef $ O(n \\log n) $ \u5904\u7406\u51fa\u6bcf\u4e00\u4e2a $ l $ \u5bf9\u5e94\u7684\u6700\u5927 $ r $\u3002\n\n\u5e76\u4e14\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u503c\u57df\u8fc7\u5927\uff0c\u5e76\u4e14\u503c\u57df\u5177\u4f53\u7684\u6570\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u9700\u8981\u8003\u8651\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u8003\u8651\u8fdb\u884c\u79bb\u6563\u5316\u3002\n\n\u4e8e\u662f\u6b64\u65f6\u6211\u4eec\u4fbf\u53ef\u4ee5\u53d1\u73b0\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u533a\u95f4\u8986\u76d6\u95ee\u9898\uff0c\u5373[CF1175E Minimal Segment Cover](https://www.luogu.com.cn/problem/CF1175E)\u3002\n\n\u4e5f\u5c31\u662f\u6211\u4eec\u73b0\u5728\u6709 $ n $ \u6bb5 $ \\left[ l, r \\right] $\uff0c\u8981\u6c42\u51fa\u8986\u76d6 $ \\left[l', r'\\right] $ \u81f3\u5c11\u9700\u8981\u591a\u5c11\u6bb5\u533a\u95f4\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u5728\u6211\u4eec\u5f53\u524d\u7684\u7b97\u6cd5\u4e2d\u53ef\u80fd $ l = r $\uff0c\u800c\u533a\u95f4\u8986\u76d6\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u533a\u95f4\u6539\u4e3a $ \\left( l, r \\right] $\uff0c\u5373\u53ef\u5f88\u76f4\u89c2\u5730\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u8986\u76d6\u663e\u7136\u5c31\u662f\u4e00\u4e2a $ O(n \\log n) $ \u7684\u9884\u5904\u7406\u548c $ O(q \\log n) $ \u7684\u67e5\u8be2\uff0c\u8bb0\u5f55\u4ece $ i $ \u70b9\u51fa\u53d1\u7528 $ 2^j $ \u6761\u7ebf\u6bb5\u6700\u8fdc\u8fbe\u5230\u7684\u4f4d\u7f6e\uff0c\u500d\u589e\u8dd1\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u5177\u4f53\u53ef\u4ee5\u53bb\u770b\u6a21\u677f\u9898\u7684\u9898\u89e3\uff0c\u548c\u8fd9\u9898\u51e0\u4e4e\u6ca1\u533a\u522b\u3002\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define MAXNQ (210000)\n\n/******************************\nabbr\nst => Segment Tree\nlt => LazyTag\ngl/gr => global left/right\nms => Max Section\nsec => Section\n******************************/\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\n\nint ms;\nint N, Q;\n\nclass SegTree{\n    private:\n        #define LS (p << 1)\n        #define RS ((p << 1) + 1)\n        #define MID ((gl + gr) >> 1)\n        int st[MAXNQ << 3], lt[MAXNQ << 3];\n    public:\n        void Pushdown(int p, int gl, int gr){\n            if(gl == gr)return (void)(lt[p] = 0);\n            st[LS] += lt[p], st[RS] += lt[p];\n            lt[LS] += lt[p], lt[RS] += lt[p];\n            lt[p] = 0;\n        }\n        void Modify(int l, int r, int val, int p = 1, int gl = 1, int gr = ms){\n            // printf(\"modifying l=%d, r=%d, v=%d, p=%d, gl=%d, gr=%d\\n\", l, r, val, p, gl, gr);\n            if(l <= gl && gr <= r){st[p] += val, lt[p] += val; return;}\n            if(lt[p])Pushdown(p, gl, gr);\n            if(l <= MID)Modify(l, r, val, LS, gl, MID);\n            if(MID + 1 <= r)Modify(l, r, val, RS, MID + 1, gr);\n            st[p] = st[LS] + st[RS];\n        }\n        bool Query(int l, int r, int p = 1, int gl = 1, int gr = ms){\n            // printf(\"querying l=%d, r=%d p=%d, gl=%d, gr=%d\\n\", l, r, p, gl, gr);\n            if(l <= gl && gr <= r)return st[p];\n            if(lt[p])Pushdown(p, gl, gr);\n            return ((l <= MID) ? Query(l, r, LS, gl, MID) : false ) | ((MID + 1 <= r) ? Query(l, r, RS, MID + 1, gr) : false); \n        }\n}st;\n\ntemplate<typename T = int>\ninline T read(void);\n\npair < int, int > sec[MAXNQ];\nvector < int > values;\n//1e5 < 2^17\nint dp[MAXNQ][30];\n\nint main(){\n    N = read();\n    for(int i = 1; i <= N; ++i){\n        int l = read(), r = read();\n        sec[i] = make_pair(l, r);\n        values.push_back(l), values.push_back(r);\n    }\n    sort(values.begin(), values.end());\n    ms = distance(values.begin(), unique(values.begin(), values.end()));\n    for(int i = 1; i <= N; ++i){\n        sec[i].first = distance(values.begin(), lower_bound(values.begin(), values.begin() + ms, sec[i].first) + 1);\n        sec[i].second = distance(values.begin(), lower_bound(values.begin(), values.begin() + ms, sec[i].second) + 1);\n    }\n    int cur(1);\n    for(int i = 1; i <= N; ++i){\n        while(st.Query(sec[i].first, sec[i].second))\n            st.Modify(sec[cur].first, sec[cur].second, -1),\n            dp[cur - 1][0] = i - 1,\n            ++cur;\n        st.Modify(sec[i].first, sec[i].second, 1);\n    }\n    while(cur <= N + 1)dp[cur - 1][0] = N, ++cur;\n    for(int j = 1; j <= 17; ++j)\n        for(int i = 0; i <= N; ++i)\n            dp[i][j] = dp[dp[i][j - 1]][j - 1];\n    Q = read();\n    while(Q--){\n        int l = read() - 1, r = read();\n        int ret(0);\n        for(int dis = 17; dis >= 0; --dis){\n            if(dp[l][dis] < r){\n                ret += 1 << dis;\n                l = dp[l][dis];\n            }\n        }\n        printf(\"%d\\n\", ret + 1);\n    }\n\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate<typename T>\ninline T read(void){\n    T ret(0);\n    short flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n\n## UPD\n\n2022_09_05 \u5b8c\u6210 T1 - T3 \u53ca T4 \u4e00\u90e8\u5206\n\n2022_09_06 \u521d\u7a3f\n",
        "postTime": 1662461981,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "COCI2021-2022 Contest2 T5"
    }
]