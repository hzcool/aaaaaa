[
    {
        "content": "\u8fd9\u9898\u4e3b\u6d41\u7684\u65b9\u6cd5\u662f\u7528\u52a8\u6001\u6811\u7ef4\u62a4\u8fb9\u7684\u8fde\u901a\u6027\uff08\u5177\u4f53\u505a\u6cd5\u53ef\u4ee5\u53c2\u8003\u5176\u4ed6\u9898\u89e3\uff09\u3002\n\n\u4f46\u6b64\u9898\u4e0d\u9700\u8981\u7ef4\u62a4\u8fb9\u6743\u7b49\u4fe1\u606f\uff0c\u800c\u4e14\u4e5f\u6ca1\u6709\u5f3a\u5236\u5728\u7ebf\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4e0d\u7528\u52a8\u6001\u6811\u8fd9\u4e48\u9ad8\u7aef\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\n<!--more-->\n\n\u79bb\u7ebf\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u6bcf\u6761\u8fb9\u5728\u56fe\u4e2d\u51fa\u73b0\u7684\u65f6\u95f4\uff08\u4e00\u5b9a\u662f\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\uff09\u3002\n\n\u5bf9\u65f6\u95f4\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff08\u8303\u56f4\u4e3a1\uff5em\uff09\uff0c\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u8fb9\u96c6\uff0c\u4ee3\u8868\u5b8c\u6574\u51fa\u73b0\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\u7684\u8fb9\u7684\u96c6\u5408\u3002\n\n\u9996\u5148\u5c06\u6240\u6709\u7684\u8fb9\u63d2\u5165\u7ebf\u6bb5\u6811\uff0c\u7531\u7ebf\u6bb5\u6811\u7684\u6027\u8d28\u53ef\u77e5\u63d2\u5165\u4e00\u6761\u8fb9\u7684\u65f6\u95f4\u4e3a $O(logn)$ \uff0c\u6bcf\u6761\u8fb9\u6700\u540e\u53ea\u4f1a\u843d\u5728$O(logn)$\u4e2a\u8282\u70b9\u4e0a\u3002\n\n\u7136\u540edfs\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u8fdb\u5165\u4e00\u4e2a\u8282\u70b9\u5c31\u5c06\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u6240\u6709\u8fb9\u63d2\u5165\u5e76\u67e5\u96c6\uff0c\u5f53dfs\u7ed3\u675f\u65f6\u5220\u9664\u521a\u521a\u63d2\u5165\u7684\u8fd9\u4e9b\u8fb9\u3002\n\n\u5f53dfs\u5230\u53f6\u5b50\u8282\u70b9\u65f6\uff0c\u663e\u7136\u6b64\u65f6\u4e00\u6761\u8fb9\u5728\u5e76\u67e5\u96c6\u5185\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e00\u65f6\u523b\u8fd9\u6761\u8fb9\u5b58\u5728\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u56de\u7b54\u8fd9\u4e00\u65f6\u523b\u7684\u8be2\u95ee\u3002\n\n\n\u6ce8\u610f\u5230\u6211\u4eec\u7684\u5e76\u67e5\u96c6\u9700\u8981\u652f\u6301\u64a4\u9500\u64cd\u4f5c\uff0c\u6240\u4ee5\u5e94\u5f53\u4f7f\u7528\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u3002\n\n\u5411\u5e76\u67e5\u96c6\u63d2\u5165\u4e00\u6761\u8fb9\u7684\u65f6\u95f4\u4e3a$O(logm)$\uff0c\u64a4\u9500\u63d2\u5165\u7684\u65f6\u95f4\u4e3a$O(1)$\uff0c\u7ebf\u6bb5\u6811\u4e0a\u4e00\u5171\u6709$O(mlogm)$\u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u6070\u597d\u4f1a\u88ab\u63d2\u5165\u4e00\u6b21\u64a4\u9500\u4e00\u6b21\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6\u4e3a$O(mlog^2m)$\u3002\u7531\u4e8e\u5e38\u6570\u5c0f\u6240\u4ee5\u53ef\u4ee5\u8f7b\u6613\u8dd1\u8fc7m=20W\n\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u4ec5\u7528\u7ebf\u6bb5\u6811\u548c\u5e76\u67e5\u96c6\u5b8c\u6210\u4e86\u672c\u9898\u3002\n\n\n#### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define MAXN 20000\n#define MAXM 300000\nint n,m;\nstruct Query\n{\n    int u,v;\n    bool b;\n    Query(int u=0,int v=0,bool b=false):u(u),v(v),b(b){}\n}q[MAXM+10];\nbool operator <(const Query&a,const Query&b)\n{\n    if (a.u==b.u) return a.v<b.v;\n    return a.u<b.u;\n}\nstruct BakData\n{\n    int x,y,sx,sy;\n    BakData(int x=0,int y=0,int sx=0,int sy=0):x(x),y(y),sx(sx),sy(sy){}\n};\nint fa[MAXN+10];\nint siz[MAXN+10];\nint find(int x) \n{\n    if (fa[x]==x) return x;\n    return find(fa[x]);\n}\nBakData Union(int x,int y)  //\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u64cd\u4f5c\uff0c\u6ce8\u610f\u8981\u8fd4\u56de\u64cd\u4f5c\u524d\u7684\u4fe1\u606f\u4ee5\u4fbf\u64a4\u9500\n{\n    int fx=find(x),fy=find(y);\n    if (siz[fx]>siz[fy]) swap(fx,fy);\n    BakData t(fx,fy,siz[fx],siz[fy]);\n    fa[fx]=fy;\n    siz[fy]=siz[fx]+siz[fy];\n    return t;\n}\nvoid undo(BakData t) //\u64a4\u9500\u4e0a\u4e00\u6b21\u64cd\u4f5c\n{\n    fa[t.x]=t.x;\n    fa[t.y]=t.y;\n    siz[t.x]=t.sx;\n    siz[t.y]=t.sy;\n}\ntypedef vector<Query>::iterator vit;\nint ans[MAXM+10];\nstruct Node\n{\n    int l,r;\n    Node *lc,*rc;\n    vector<Query> e;\n    void insert(int l,int r,const Query& q);\n    void dfs(vit it)\n    {\n        if (it!=e.end())\n        {\n            BakData t=Union(it->u,it->v);\n            dfs(it+1);\n            undo(t);\n            return;\n        }\n        if (l==r)\n        {\n            if (q[l].b)\n            {\n                ans[l]=find(q[l].u)==find(q[l].v)?1:-1;\n            }\n            return;\n        }\n        lc->dfs(lc->e.begin());\n        rc->dfs(rc->e.begin());\n    }\n}node[2*MAXM+10];\nNode* newNode(int l,int r)\n{\n    static int c=0;\n    Node* now=node+ ++c;\n    now->l=l; now->r=r;\n    if (l==r)\n    {\n        now->lc=now->rc=node;\n    }\n    else\n    {\n        int mid=(l+r)/2;\n        now->lc=newNode(l,mid);\n        now->rc=newNode(mid+1,r);\n    }\n    return now;\n}\nvoid Node::insert(int l,int r,const Query& q)\n{\n    if (this->l==l && this->r==r)\n    {\n        e.push_back(q);\n        return;\n    }\n    int mid=(this->l+this->r)/2;\n    if (l<=mid) lc->insert(l,min(mid,r),q);\n    if (r>mid) rc->insert(max(l,mid+1),r,q);\n}\n//vector<Query> q[MAXM+10];\nchar ch[20];\nmap<Query,int> ma; //\u8fd9\u91cc\u4f7f\u7528\u4e86map\u7ef4\u62a4\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\nint main()\n{\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\",\"r\",stdin);\n#endif\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n; ++i) \n    {\n        fa[i]=i;\n        siz[i]=1;\n    }\n    Node* root=newNode(1,m);\n    for(int i=1; i<=m; ++i)\n    {\n        int u,v;\n        scanf(\"%s%d%d\",ch,&u,&v);\n        if (u>v) swap(u,v);\n        if (ch[0]=='C')\n        {\n            ma[Query(u,v)]=i;\n        }\n        else if (ch[0]=='D')\n        {\n            Query t(u,v);\n            map<Query,int>::iterator it=ma.find(t);\n            assert(it!=ma.end());\n            root->insert(it->second,i,t);    \n            ma.erase(t);\n        }\n        else\n        {\n            q[i].u=u; q[i].v=v;            \n            q[i].b=true;\n        }\n    }\n    for(map<Query,int>::iterator it=ma.begin(); it!=ma.end(); ++it)\n    {\n        root->insert(it->second,m,it->first);\n    }\n    root->dfs(root->e.begin());\n    for(int i=1 ;i<=m; ++i)\n    {\n        if (ans[i]==1) puts(\"Yes\");\n        else if (ans[i]==-1) puts(\"No\");\n    }\n    return 0;\n}\n```\n\n#### \u53c2\u8003\u6587\u732e\n\n1. \u5409\u5982\u4e00\u7684\u8bfe\u4ef6\u300a\u8001\u5e74\u4eba\u6570\u636e\u7ed3\u6784\u57fa\u7840\u300b\n\n\n2. http://blog.csdn.net/qq\\_33362864/article/details/74536978\n\n##### \u987a\u4fbf\u5ba3\u4f20\u4e00\u4e0b\u6211\u7684\u535a\u5ba2\n\nhttp://waautomaton.tk/2017/10/18/bzoj-2049-lg-2147-SDOI-2008-Cave-\u6d1e\u7a74\u52d8\u6d4b-\u9898\u89e3/\n",
        "postTime": 1508292124,
        "uid": 39219,
        "name": "WAAutoMaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "\u4e00\u770b\u5c31\u77e5\u9053\u662f LCT \u88f8\u9898\uff0c\u76f4\u63a5\u4e0a\u6a21\u677f\u3002\u3002\u3002\n\n\u8fd9\u5e74\u5934\uff0c\u9898\u89e3\u600e\u4e48\u90fd\u559c\u6b22\u7528\u6570\u7ec4\uff0c\u552f\u4e00\u7684\u7ed3\u6784\u4f53\u9898\u89e3\u8fd8\u7528\u4e86\u6307\u9488\uff0c\u90c1\u95f7ing\u3002\u3002\u3002\n\n\u6240\u4ee5\uff0c\u6211\u6765\u4e00\u53d1 \u65e0\u6307\u9488\u7ed3\u6784\u4f53\uff0c\u81ea\u6211\u611f\u89c9\u633a\u597d\u3002\u3002\u3002\n\n\u8fd8\u6709\u90a3\u5565\uff0c\u4e0d\u8981\u7528 STL \u7684\u6808\uff0c\u4f1a RE/WA \u7684\u3002\u3002\u3002\n\n\u9644\u4e0a\u4ee3\u7801\uff08\u7d27\u7d27\u51d1\u51d180+\u884c\uff09\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 10010//\u6570\u7ec4\u5927\u5c0f\n#define MAX 999999999//\u6781\u503c\nusing namespace std;\nint n,m;\nstruct node{//\u6709\u7236\u65e0\u6307\u9488\u7ed3\u6784\u4f53\n    int son[2];\n    int f,flag;\n}a[MAXN];\ninline int read(){//\u8bfb\u4f18\n    int date=0,w=1;char c=0;\n    while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n    while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n    return date*w;\n}\ninline int isroot(int rt){//\u662f\u5426\u662f\u6839\n    return a[a[rt].f].son[0]!=rt&&a[a[rt].f].son[1]!=rt;\n}\ninline void pushdown(int rt){//\u6807\u8bb0\u4e0b\u4f20\n    if(!rt||!a[rt].flag)return;\n    a[a[rt].son[0]].flag^=1;a[a[rt].son[1]].flag^=1;a[rt].flag^=1;\n    swap(a[rt].son[0],a[rt].son[1]);//\u522b\u5fd8\u4e86\u4ea4\u6362\u5de6\u53f3\u8282\u70b9\u3002\u3002\u3002\n}\ninline void turn(int rt){//\u65cb\u8f6c\uff0c\u6539\u8fdb\u7248\n    int x=a[rt].f,y=a[x].f,k=a[x].son[0]==rt?0:1;\n    if(!isroot(x)){//\u5c31\u662f\u8fd9\u91cc\uff0c\u5224\u65ad\u662f\u5426\u662f\u6839\n        if(a[y].son[0]==x)a[y].son[0]=rt;\n        else a[y].son[1]=rt;\n    }\n    a[rt].f=y;a[x].f=rt;a[a[rt].son[!k]].f=x;\n    a[x].son[k]=a[rt].son[!k];a[rt].son[!k]=x;\n}\nvoid splay(int rt){//\u4f38\u5c55\uff0c\u4e5f\u662f\u6539\u8fdb\u7248\uff0c\u5e94\u4e3a\u8981\u9002\u5e94LCT\u3002\u3002\u3002\n    int top=0,stack[MAXN];//\u679c\u65ad\u624b\u5199\u6808\n    stack[++top]=rt;//\u7b2c\u4e00\u4e2a\u4e00\u5b9a\u662f\u6839\n    for(int i=rt;!isroot(i);i=a[i].f)stack[++top]=a[i].f;\n    while(top)pushdown(stack[top--]);//\u66b4\u529b\u4fee\u6539\n    while(!isroot(rt)){//\u8fd9\u91cc\u5c31\u57fa\u672c\u65e0\u5927\u6539\u4e86\n        int x=a[rt].f,y=a[x].f;\n        if(!isroot(x)){\n            if((a[x].son[0]==rt)^(a[y].son[0]==x))turn(rt);\n            else turn(x);\n        }\n        turn(rt);//\u6ce8\u610f\uff0c\u662f\u6700\u540e\u624d\u8fdb\u884c\uff0c\u5f53\u521d\u6211\u628a\u8fd9\u53e5\u653e\u5230\u91cc\u9762\uff0c\u7136\u540e\u5c31 WA \u4e86\u3002\u3002\u3002\n    }\n}\nvoid access(int rt){//\u5c06 x \u4e0e x\u6240\u5728\u6811\u7684\u6839 \u8fde\u4e00\u6761\u94fe\n    for(int i=0;rt;i=rt,rt=a[rt].f){//\u66b4\u529b\u4fee\u6539\uff0c\u8017\u65f6\u8d3c\u591a\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002\u3002\u3002\n        splay(rt);\n        a[rt].son[1]=i;\n    }\n}\ninline void makeroot(int rt){access(rt);splay(rt);a[rt].flag^=1;}//\u5c06 x \u53d8\u4e3a\u6811\u6839\nint find(int rt){//\u627e\u6811\u6839\n    access(rt);splay(rt);\n    while(a[rt].son[0])rt=a[rt].son[0];//\u4e00\u76f4\u5f80\u5de6\u8d70\n    return rt;\n}\ninline void split(int x,int y){makeroot(x);access(y);splay(y);}\u641e\u51fa x\u4e0ey\u7684\u94fe\ninline void cut(int x,int y){//\u5272 x\u4e0ey\u7684\u94fe\n    split(x,y);\n    a[y].son[0]=a[x].f=0;\n}\ninline void link(int x,int y){makeroot(x);a[x].f=y;}//\u8fde x\u4e0ey\u7684\u94fe\nint main(){\n    char ch[10];\n    int x,y;\n    n=read();m=read();\n    while(m--){\n        scanf(\"%s\",ch);x=read();y=read();\n        if(ch[0]=='C')link(x,y);\n        if(ch[0]=='D')cut(x,y);//\u57fa\u672c\u64cd\u4f5c\u4e0d\u518d\u591a\u8bf4\u3002\u3002\u3002\n        if(ch[0]=='Q'){\n            if(find(x)==find(y))printf(\"Yes\\n\");//\u5224\u65ad\u8054\u901a\n            else printf(\"No\\n\");\n        }\n    }\n    return 0;//\u7ec8\u4e8e\u6572\u5b8c\u4e86\uff08\u7d2f\u6b7b\u6211\u4e86\u3002\u3002\u3002\uff09\n}\n\n```",
        "postTime": 1514693981,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "\u5e2e\u5fd9\u5237\u5237\u8bbf\u95ee\u91cf\uff1ahttp://www.cnblogs.com/xzz\\_233/p/8064958.html\n\nlink-cut tree\n\n\n\u52a8\u6001\u6811\uff08\u51c6\u786e\u8bf4\u662f\u7ef4\u62a4\u68ee\u6797\uff09\u4e4b\u4e00\uff0c\u652f\u6301\u8fde\u8fb9\uff0c\u65ad\u8fb9\uff0c\u6c42\u94fe\u4e0a\u6743\u503c\u548c\u7b49\u64cd\u4f5c\u3002\n\n\nsplay\u57fa\u7840\uff1a\u4f1arotate\u548csplay\u5c31\u884c\u3002\u8fd8\u8981\u4f1a\u4e00\u70b9\u533a\u95f4\u53cd\u8f6c\u64cd\u4f5c\u6253\u6807\u8bb0\u3002\u5f88\u57fa\u2642\u7840\u7684\u4e1c\u897f\u3002\n\n\n\u6709\u91cd\u94fe\uff0c\u6bcf\u6761\u91cd\u94fe\u7528splay\u6765\u7ef4\u62a4\uff0csplay\u4e2d\u6392\u540d\u4e3a\u8fd9\u6761\u91cd\u94fe\u4e2d\u6df1\u5ea6\u503c\uff0c\u987a\u4fbf\u628a\u94fe\u7684\u8981\u7ef4\u62a4\u4fe1\u606f\uff08\u8b6c\u5982\u94fe\u4e0a\u70b9\u6743\u548c\uff09\u7edf\u8ba1\u4e86\u3002\n\n\n\u8fb9\u5206\u5b9e\u8fb9\u548c\u865a\u8fb9\uff0c\u5b9e\u8fb9\u6709ch\u6570\u7ec4\u8bb0\u5f55\uff0c\u865a\u8fb9\u5219\u6ca1\u6709\u3002\u90fd\u6709fa\u6570\u7ec4\u8bb0\u5f55\u3002\n\n\u865a\u8fb9\u94fe\u63a5\u4e24\u6761\u91cd\u94fe\u3002\u7236\u5b50\u5173\u7cfb\u5373\u539f\u6811\u7684\u7236\u5b50\u5173\u7cfb\u3002\n\n\n\u8fde\u5230\u7236\u4eb2\u7684\u8fb9\u4e3a\u865a\u8fb9\u7684\u70b9\u5c31\u662f\u8fd9\u6761\u91cd\u94fe\u7684splay\u7684\u6839\u3002\n\nsplay\n\nsplay(x)\u3002\u5148\u4ece\u4e0a\u5f80\u4e0b\u4e0b\u653e\u4e00\u904d\uff0c\u518d\u6267\u884csplay\u3002\n\n\u6ce8\u610frotate\u4e2d\u5982\u679cy-z\u7684\u8fb9\u662f\u865a\u8fb9\u4e0d\u7528\u5f80\u56de\u8fde\u3002\n\naccess\n\naccess(x)\u3002\u6700\u4e3b\u8981\u64cd\u4f5c&&\u6700\u8017\u65f6\u95f4\u7684\u64cd\u4f5c\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002\n\n\n\u62c9\u4e00\u6761\u4ecex\u6240\u5728\u6811\u7684\u6839\u8282\u70b9\u5230x\u7684\u94fe\u3002\n\n\n\u4ecex\u5f00\u59cb\u5f80\u4e0a\u62c9\uff0cy\u521d\u59cb\u5316\u4e3a0\uff0c\u6bcf\u6b21\u5148splay(x)\uff0cx\u5de6\u5b50\u6811\u4e3a\u8fde\u4e0a\u53bb\u7684\u91cd\u94fe\uff0c\u53f3\u5b50\u6811\u4e3a\u8fde\u4e0b\u53bb\u7684\u91cd\u94fe\u3002\n\n\u65ad\u6389\u53f3\u5b50\u6811\u7684\u8fb9\uff0c\u8fde\u6210y\u3002\uff08\u65ad\u8fb9\u6307\u5b9e\u53d8\u865a\n\nmakeroot\n\n\nmakeroot(x)\u3002\u5c06x\u53d8\u6210x\u6240\u5728\u6811\u7684\u6839\u3002\n\n\u5148access(x)\uff0c\u8fd9\u65f6\u6709\u4e00\u6761\u4eceroot\u5230x\u7684\u91cd\u94fe\u3002\n\n\u7136\u540esplay(x)\uff0c\u518d\u5728x\u4e0a\u6253\u4e00\u4e2a\u53cd\u8f6c\u6807\u8bb0\uff08\u8fd9\u6761\u91cd\u94fe\u4e0a\u7684\u6df1\u5ea6\u8981\u53cd\u8f6c\uff09\n\nsplit\n\nsplit(x,y)\u3002\u641e\u51fa\u4e00\u6761\u91cd\u94fe\uff0c\u4e24\u7aef\u70b9\u4e3ax\u548cy\u3002\n\nmakeroot(x),access(y),splay(y)\u3002\n\n\u4e0d\u591a\u89e3\u91ca\u4e86\uff1f\n\n\uff08\u6211\u4e60\u60ef\u628a\u8fd9\u4e2a\u76f4\u63a5\u5199\u8fdb\u4ee3\u7801\uff0cso\u770b\u4e0d\u5230split\u51fd\u6570\uff09\n\nlink\n\nlink(x,y)\u3002\u8fde\u4e00\u6761x-y\u7684\u8fb9\u3002\n\nmakeroot(x)\uff0c\u7136\u540e\u5c06FA\u2642x\u7f6e\u4e3ay\u3002\n\n\u8fd9\u91cc\u8fde\u8f7b\u8fb9\u6ca1\u4e8b\u7684\u3002\n\ncut\n\ncut(x,y)\u3002\u5272\u2642\u6389x-y\u7684\u8fb9\u3002\n\nsplit(x,y)\uff0c\u7136\u540ex\u5728y\u5de6\u513f\u5b50\u5904\u4e0d\u89e3\u91ca\u3002\n\nFA\u2642x=ch[y][0]=0\u3002\n\nfind\n\n\u627e\u5230x\u6240\u5728\u6811\u7684\u6839\u3002\u4e3b\u8981\u7528\u4e8e\u5224\u65ad\u8fde\u901a\u6027\uff1f\uff1f\uff1f\n\n\u5148access(x),splay(x),\u518d\u4e00\u76f4\u5f80\u5de6\u8fb9\u8d70\u5c31\u627e\u5230\u6839\u4e86\u3002\u4e0d\u89e3\u91ca\u4e86\u3002\u3002\u3002\n",
        "postTime": 1513662709,
        "uid": 23118,
        "name": "\u03bb\u1d09\u028d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "### \u524d\u7f6e\u77e5\u8bc6\nLCT\uff08\u52a8\u6001\u6811\uff09\n\n\u52a8\u6001\u6811\uff1a\u662f\u4e00\u79cd\u68ee\u6797\uff0c\u652f\u6301\u52a8\u6001\u8fde\u63a5\u3001\u5220\u9664\u3001\u6c42\u6743\u503c\u7b49\u64cd\u4f5c\uff0c\u7b97\u662f\u52a0\u5f3a\u7248\u5e76\u67e5\u96c6\u3002\u52a8\u6001\u6811\u4e3a\u4e86\u4f7f\u628a\u4e00\u4e2a\u8282\u70b9\u65cb\u8f6c\u5230\u6839\u4e0e\u7ffb\u8f6c\u533a\u95f4\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 $O(log_2n)$\uff0c\u4e00\u822c\u4f7f\u7528 Splay \u7ef4\u62a4\u3002\n\n\u52a8\u6001\u6811\u64cd\u4f5c\uff1a\n\n1. `rotate` \u64cd\u4f5c\u4e0e `splay` \u64cd\u4f5c\n\n\u540c Splay \u4e2d\u7684 rotate \u4e0e splay \u64cd\u4f5c\n\n2. `pushdown` \u64cd\u4f5c\n\n\u5904\u7406\u7ffb\u8f6c\u533a\u95f4\u7684 tag\uff0c\u5982\u679c\u6709 tag \u5c31\u7ed9\u5b50\u8282\u70b9\u7ffb\u8f6c\u4e00\u904d\u540e\u4ea4\u6362\u5b50\u7ed3\u70b9\u3002\n\n3. `access` \u64cd\u4f5c\n\n\u5c31\u662f\u628a\u8282\u70b9 $x$ \u5230\u90a3\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u5f3a\u884c\u9020\u51fa\u4e00\u6761\u94fe\u3002\u662f LCT \u7684\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u64cd\u4f5c\n\n4. `makeroot` \u64cd\u4f5c\n\n\u5c31\u662f\u628a $x$ \u65cb\u8f6c\u5230\u6210\u4e3a\u5b83\u90a3\u6761\u94fe\u7684\u6839\uff0c\u5148 `access` \u4e00\u904d\u4e4b\u540e\u628a $x$ \u65cb\u8f6c\u5230\u90a3\u6761\u94fe\u7684 splay \u6811\u7684\u6839\u8282\u70b9\uff0c\u518d\u4ea4\u6362\u5de6\u53f3\u8282\u70b9\uff0c\u5373\u628a\u5b83\u7684\u7956\u5b97\u8282\u70b9\u53d8\u6210\u5b50\u5b59\u8282\u70b9\uff0c\u5b83\u5c31\u6210\u4e86\u6839\u8282\u70b9\u4e86\u3002\n\n5. `split` \u64cd\u4f5c\n\n\u5c31\u662f\u628a $x$ \u4e0e $y$ \u4e4b\u95f4\u8fde\u63a5\u4e0a\u4e00\u6761\u94fe\u3002\n\n\u5148 `makeroot(x)`\uff0c\u518d `access(x)` \u9020\u94fe\uff0c`splay(y)` \u628a $y$ \u65cb\u8f6c\u5230\u6839\u3002\n\n6. `link` \u64cd\u4f5c\n\n`makeroot(x)` \u540e\u628a $x$ \u7684\u7236\u4eb2\u8d4b\u503c\u4e3a $y$\uff0c\u548c\u5e76\u67e5\u96c6\u5dee\u4e0d\u591a\n\n7. `cut` \u64cd\u4f5c\n\u7c7b\u4f3c\u5730\uff0c\u9020\u4e00\u6761\u94fe\u540e\u5c1d\u8bd5\u62c6\u5f00 $x$\uff0c$y$\u3002\n### \u5206\u6790\n\u8fd9\u9053\u9898\u662f\u5229\u7528 LCT \u7ef4\u62a4\u8fde\u901a\u6027\u7684\u6a21\u677f\u9898\u3002\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define lld long long\nint n,m;\nint val[300001];\nstruct LCT{\n\tint top;\n\tint sons[300001][2];\n\tint fa[300001];\n\tint q[300001];\n\tint rev[300001];\n\tvoid pushdown(int id){\n\t\tint l=sons[id][0],r=sons[id][1];\n\t\tif(rev[id]){\n\t\t\trev[l]^=1;rev[r]^=1;rev[id]^=1;\n\t\t\tswap(sons[id][0],sons[id][1]);\n\t\t}\n\t}\n\tbool isroot(int id){return sons[fa[id]][0]!=id&&sons[fa[id]][1]!=id;}\n\tvoid rotate(int id){\n\t\tint f=fa[id],ff=fa[f],l,r;\n\t\tif(sons[f][0]==id)l=0;else l=1;r=l^1;\n\t\tif(!isroot(f)){\n\t\t\tif(sons[ff][0]==f)sons[ff][0]=id;\n\t\t\telse sons[ff][1]=id;\n\t\t}\n\t\tfa[id]=ff;fa[f]=id;fa[sons[id][r]]=f;\n\t\tsons[f][l]=sons[id][r];sons[id][r]=f;\n\t}\n\tvoid splay(int id){\n\t\ttop=1;q[top]=id;\n\t\tfor(int i=id;!isroot(i);i=fa[i])q[++top]=fa[i];\n\t\tfor(int i=top;i;--i)pushdown(q[i]);\n\t\tint f,ff;\n\t\twhile(!isroot(id)){\n\t\t\tf=fa[id];ff=fa[f];\n\t\t\tif(!isroot(f)){\n\t\t\t\tif((sons[f][0]==id)^(sons[ff][0]==f))rotate(id);\n\t\t\t\telse rotate(f);\n\t\t\t}\n\t\t\trotate(id);\n\t\t}\n\t}\n\tvoid access(int id){\n\t\tfor(int t=0;id;t=id,id=fa[id])\n\t\t\tsplay(id),sons[id][1]=t;\n\t}\n\tvoid makeroot(int id){\n\t\taccess(id);\n\t\tsplay(id);\n\t\trev[id]^=1;\n\t}\n\tint findroot(int id){\n\t\taccess(id);\n\t\tsplay(id);\n\t\twhile(sons[id][0])id=sons[id][0];\n\t\treturn id;\n\t}\n\tvoid split(int x,int y){\n\t\tmakeroot(x);\n\t\taccess(y);\n\t\tsplay(y);\n\t}\n\tvoid cut(int x,int y){\n\t\tsplit(x,y);\n\t\tif(sons[y][0]==x&&sons[x][1]==0)\n\t\t\tsons[y][0]=0,fa[x]=0;\n\t}\n\tvoid link(int x,int y){\n\t\tmakeroot(x);\n\t\tfa[x]=y;\n\t}\n}T;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint x,y;\n\tchar op[101];\n\twhile(m--){\n\t\tscanf(\"%s%d%d\",op,&x,&y);\n\t\tif(op[0]=='Q')puts((T.findroot(x)==T.findroot(y))?\"Yes\":\"No\");\n\t\tif(op[0]=='D')T.cut(x,y);\n\t\tif(op[0]=='C')T.link(x,y);\n\t}\n}\n```",
        "postTime": 1627365630,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "P2147 [SDOI2008]\u6d1e\u7a74\u52d8\u6d4b \u9898\u89e3"
    },
    {
        "content": "\u5168\u4e16\u754c\u90fd\u5728\u7528\u6570\u7ec4\u5199LCT????\n~~\u611f\u89c9\u575a\u6301\u7528\u6307\u9488\u7684\u81ea\u5df1\u5df2\u7ecf\u8ddf\u4e0d\u4e0a\u8fd9\u4e2a\u65f6\u4ee3\u4e86~~\n\n\u6240\u4ee5\u60f3\u627e\u4e2a\u5f88\u987a\u624b\u7684LCT\u677f\u5b50\u90fd\u975e\u5e38\u7684\u56f0\u96beQAQ\n\n\u6240\u4ee5\u5c31\u6765\u4e00\u53d1\u6307\u9488\u7248LCT\u7684\u677f\u5b50..\n~~\u4e07\u4e00\u6709\u4eba\u548c\u6211\u4e00\u6837\u60f3\u4e0d\u5f00\u5199\u6307\u9488\u5462~~\n\n\u8fd9\u9898\u5c31LCT\u677f\u5b50\u9898\u561b, \u6240\u4ee5\u5177\u4f53\u7684\u601d\u8def\u5176\u4ed6dalao\u4eec\u90fd\u5df2\u7ecf\u8bf4\u5f97\u5f88\u8be6\u7ec6\u4e86\n\u6211\u5c31\u8fc7\u6765\u6c34\u4e00\u53d1\u677f\u5b50, \u8ba9\u521a\u5165\u5751LCT\u7684\u5199\u6307\u9488\u7684\u840c\u65b0(\u81ea\u5df1\u5c31\u662f)\u6709\u6240\u53c2\u8003\u5427.\n\n\u4ee3\u7801(\u56e0\u4e3a\u90fd\u662f\u677f\u5b50\u64cd\u4f5c, \u6240\u4ee5\u5c31\u4e0d\u5199\u6ce8\u91ca\u4e86, \u51fd\u6570\u540d\u548c~~\u4e16\u754c\u4e2d\u5927\u591a\u6570\u4eba\u7684~~\u547d\u540d\u89c4\u8303\u662f\u57fa\u672c\u4e00\u6837\u7684...\n```\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int N=20101;\ninline int gn(int a=0,char c=0){\n\tfor(;c<'0'||c>'9';c=getchar());\n\tfor(;c>47&&c<58;c=getchar())a=a*10+c-48;return a;\n}\nstruct node{\n\tnode *fa,*ch[2];\n\tbool rev;\n\tbool getwh();\n\tbool isroot();\n\tvoid pushdown();\n\tvoid setch(bool wh,node* child);\n}pool[N],*null; int tot;\nbool node::getwh(){\n\treturn fa->ch[1]==this;\n}\nbool node::isroot(){\n\treturn fa==null||(fa->ch[0]!=this&&fa->ch[1]!=this);\n}\nvoid node::pushdown(){\n\tif(null==this||!rev) return;\n\tswap(ch[0],ch[1]);\n\tch[0]->rev^=1; ch[1]->rev^=1;\n\trev=0;\n}\nvoid node::setch(bool wh,node* child){\n\tpushdown(); ch[wh]=child;\n\tif(null!=child) child->fa=this;\n}\nvoid init(){\n\tnull=pool; null->rev=0;\n\tnull->fa=null->ch[0]=null->ch[1]=null;\n}\nnode* newnode(){\n\tnode* x=pool+ ++tot; x->rev=0;\n\tx->ch[0]=x->ch[1]=x->fa=null;\n\treturn x;\n}\nvoid rotat(node* x){\n\tnode *fa=x->fa,*fafa=fa->fa;\n\tif(fafa!=null) fafa->pushdown();\n\tfa->pushdown(); x->pushdown();\n\tint wh=x->getwh();\n\tif(fa->isroot()) x->fa=fa->fa;\n\telse fafa->setch(fa->getwh(),x);\n\tfa->setch(wh,x->ch[wh^1]);\n\tx->setch(wh^1,fa);\n}\nvoid fix(node* x){\n\tif(!x->isroot()) fix(x->fa);\n\tx->pushdown();\n}\nvoid splay(node* x){\n\tfix(x);\n\tfor(;!x->isroot();rotat(x))\n\t\tif(!x->fa->isroot())\n\t\t\tx->getwh()==x->fa->getwh()?rotat(x->fa):rotat(x);\n}\nnode* access(node* x){\n\tnode* y=null;\n\tfor(;x!=null;x=x->fa){\n\t\tsplay(x); x->ch[1]=y; y=x;\n\t}\n\treturn y;\n}\nvoid makeroot(node* x){\n\taccess(x)->rev^=1;\n\tsplay(x);\n}\nvoid link(node* x,node* y){\n\tmakeroot(x); x->fa=y;\n}\nvoid cut(node* x,node* y){\n\tmakeroot(x); access(y); splay(y);\n\tx->fa=y->ch[0]=null;\n}\nnode* Find(node* x){\n\tfor(access(x),splay(x);x->ch[0]!=null;x->pushdown(),x=x->ch[0]);\n\treturn x;\n}\nint main(){ init();\n\tint n=gn(),m=gn();\n\tfor(int i=1;i<=n;++i) newnode();\n\tchar opt[123];\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%s\",opt);\n\t\tint x=gn(),y=gn();\n\t\tnode *X=pool+x,*Y=pool+y;\n\t\tif(opt[0]=='Q')\n\t\t\tputs(Find(X)==Find(Y)?\"Yes\":\"No\");\n\t\telse if(opt[0]=='C')\n\t\t\tlink(X,Y);\n\t\telse cut(X,Y);\n\t}\t\n}\n```",
        "postTime": 1520297097,
        "uid": 18455,
        "name": "Enzymii",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "## \u524d\u7f6e\u829d\u58eb\n- LCT\n\n ...\u6ca1\u4e86\n## \u5206\u6790\n\u51e0\u4e4e\u5c31\u662f $LCT$ \u7684\u6a21\u677f\u9898\u4e86\n#### \u64cd\u4f5c1\n\u64cd\u4f5c\u4e3a $link$\n#### \u64cd\u4f5c2\n\u64cd\u4f5c\u4e3a $cut$\n#### \u64cd\u4f5c3\n\u64cd\u4f5c\u4e3a $find\\_root$\n\u5982\u679c $x~,~y$ \u7684 $root$ \u76f8\u540c\uff0c\u8f93\u51fa $Yes$\n\u5426\u5219\u8f93\u51fa $No$\n## \u4ee3\u7801\n$\\mathcal{Code:}$\n```cpp\n#include<map>\n#include<queue>\n#include<cmath>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define N 300010\n#define int long long\n#define debug cout<<__LINE__<<\" \"<<__FUNCTION__<<\"\\n\"\ninline int read(){\n\tint x=0,y=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}\n\treturn x*y;\n}\nvoid put(int x){\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>=10) put(x/10);\n\tputchar((x%10)+48);\n}\nstruct LCT{//\u5c01\u88c5\n\tstruct Node{\n\t\tint fa,ch[2],rev;//rev \u4e3a\u7ffb\u8f6c\u6807\u8bb0\n\t\tNode(){fa=ch[0]=ch[1]=rev=0;}\n\t}tree[N];\n\tint top,res[N];//\u6a21\u62df\u6808\n\t#define ls(x) tree[x].ch[0]\n\t#define rs(x) tree[x].ch[1]\n\tinline int Nroot(int x){return tree[x].fa&&(ls(tree[x].fa)==x||rs(tree[x].fa)==x);}//\u5224\u65ad\u662f\u5426\u662fSplay\u7684\u6839\uff08\u6709\u7236\u4eb2\u4e14\u7236\u4eb2\u8ba4\u513f\u5b50\uff09\n\tinline void Rev(int x){swap(ls(x),rs(x));tree[x].rev^=1;}\n\tinline void Pushdown(int x){//\u6807\u8bb0\u4e0b\u653e\n\t\tif(!tree[x].rev) return;\n\t\tif(ls(x)) Rev(ls(x));\n\t\tif(rs(x)) Rev(rs(x));\n\t\ttree[x].rev=0;\n\t}\n\tinline void Rotate(int x){\n\t\tint y=tree[x].fa,z=tree[y].fa,k=(x==ls(tree[x].fa)),w=tree[x].ch[k];\n\t\tif(Nroot(y)) tree[z].ch[y==rs(tree[y].fa)]=x;\n\t\ttree[x].ch[k]=y;tree[y].ch[!k]=w;\n\t\ttree[y].fa=x;tree[x].fa=z;\n\t\tif(w) tree[w].fa=y;\n\t}\n\tinline void Splay(int x){\n\t\tint tmp=x;\n\t\tres[top=1]=tmp;\n\t\twhile(Nroot(tmp)) res[++top]=tree[tmp].fa,tmp=tree[tmp].fa;//\u4e00\u5b9a\u8bb0\u5f97\u4e0b\u653e\u6807\u8bb0\n\t\twhile(top) Pushdown(res[top]),--top;\n\t\twhile(Nroot(x)){\n\t\t\tif(Nroot(tree[x].fa)) Rotate((x==rs(tree[x].fa))^(tree[x].fa==rs(tree[tree[x].fa].fa))?x:tree[x].fa);\n\t\t\tRotate(x);\n\t\t} \n\t}\n\tinline void Access(int x){\n\t\tint y=0;\n\t\twhile(x){\n\t\t\tSplay(x);rs(x)=y;y=x;x=tree[x].fa;\n\t\t}\n\t}\n\tinline void Makeroot(int x){//\u8f6c\u6210\u6574\u68f5\u6811\u7684\u6839\n\t\tAccess(x);Splay(x);Rev(x);\n\t}\n\tinline int Findroot(int x){//\u627e\u6839\n\t\tAccess(x);Splay(x);Pushdown(x);\n\t\twhile(ls(x)){\n\t\t\tx=ls(x);Pushdown(x);\n\t\t}\n\t\treturn x;\n\t}\n\tinline void Link(int x,int y){\n\t\tif(Findroot(x)==Findroot(y)) return;\n\t\tMakeroot(x);tree[x].fa=y;\n\t}\n\tinline void Cut(int x,int y){\n\t\tMakeroot(x);Access(y);Splay(y);\n\t\tif(ls(y)==x) tree[x].fa=ls(y)=0;\n\t}\n}Tree;\nint n,m;\nsigned main(){\n// \tfreopen(\".in\",\"r\",stdin);\n// \tfreopen(\".out\",\"w\",stdout);\n\tn=read();m=read();\n\tchar ch[20];\n\tfor(int i=1,x,y;i<=m;i++){\n\t\tscanf(\"%s\", ch);x=read();y=read();\n\t\tif(ch[0]=='C') Tree.Link(x,y);\n\t\tif(ch[0]=='D') Tree.Cut(x,y);\n\t\tif(ch[0]=='Q') cout<<(Tree.Findroot(x)==Tree.Findroot(y)?\"Yes\\n\":\"No\\n\");\n\t}\n//\tfclose(stdin);\n//\tfclose(stdout);\n    return 0;\n}\n\n\n```",
        "postTime": 1568859513,
        "uid": 123081,
        "name": "zh_dou",
        "ccfLevel": 7,
        "title": "[\u9898\u89e3]P2147 |[SDOI2008]\u6d1e\u7a74\u52d8\u6d4b"
    },
    {
        "content": "$LCT\\ or\\ $\u65f6\u95f4\u5206\u6cbb\n\n\u56e0\u4e3a$LCT$\u5341\u5206\u7684\u677f\u5b50\uff0c\u6240\u4ee5\u8bf4\u4e00\u4e0b\u65f6\u95f4\u5206\u6cbb\n\n\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u5e7f\u6cdb\u8fd0\u7528\u4e8e\u4e00\u4e9b\u79bb\u7ebf\u4e14\u4e0d\u652f\u6301\u5220\u9664\u4f46\u652f\u6301\u64a4\u9500\u4e0a\u4e00\u6b65\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u5e76\u67e5\u96c6\u3001$Trie$\u3001\u7ebf\u6027\u57fa.\n\n\u5bf9\u65f6\u95f4\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u628a\u6bcf\u6761\u8fb9\u7684\u5b58\u5728\u65f6\u95f4\u533a\u95f4\u4f5c\u4e3a\u4e00\u4e2a\u4fee\u6539\u63d2\u8fdb\u7ebf\u6bb5\u6811\uff0c\u6700\u540e$dfs$\u4e00\u904d\u7ebf\u6bb5\u6811\u5f97\u5230\u8be2\u95ee.\n\n$dfs$\u7684\u65f6\u5019\uff0c\u5148\u5f80\u5e76\u67e5\u96c6\u91cc\u63d2\u5165\u8fd9\u4e2a\u533a\u95f4\u4e0a\u7684\u8fb9\uff0c\u7136\u540e$dfs$\u5de6\u53f3\u513f\u5b50\uff0c\u7136\u540e\u64a4\u9500\u63d2\u5165.\n\n\u64a4\u9500\u5c31\u662f\u628a$fa$\u554a$size$\u4ec0\u4e48\u7684\u76f4\u63a5\u8fd8\u539f\u6210\u521a\u624d\u7684\u72b6\u6001.\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\uff0c\u6309\u79e9\u5408\u5e76.\n\n\u8003\u8651\u6bcf\u6761\u8fb9\u4f1a\u88ab\u62c6\u6210$O(\\log m)$\u6761\uff0c\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u662f$O(\\log m)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6$O(m\\log ^2m)$\uff0c**\u7a7a\u95f4**$O(m\\log m)$\uff0c\u6570\u7ec4\u8981\u5f00\u5927.\n\n\u770b\u4ee3\u7801\u5427.\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<map>\nusing namespace std;\nconst int N=5e5;\nstruct Query{int x,y,b;bool operator <(const Query &a)const{return x==a.x?y<a.y:x<a.x;}}q[N],to[N*20];\nstruct Bk{int x,y,sx,sy;}stack[N*20];\nint size[N],f[N],ans[N],n,m,mm,nxt[N*20],fst[N<<2];\nvoid ade(int rot,Query q){to[++mm]=q,nxt[mm]=fst[rot],fst[rot]=mm;}//\u4e00\u5f00\u59cb\u7528\u7684vector\uff0c\u7ed3\u679c\u5438\u6c27\u624d\u80fd\u8fc7\uff0c\u5c31\u90bb\u63a5\u8868\u4e86233\nchar st[1000];\nmap<Query,int>lst;\nvoid update(int rot,int lt,int rt,int lq,int rq,Query q)\n{\n\tif(lt>=lq&&rt<=rq){ade(rot,q);return;}//\u4e0d\u9700\u8981pushdown\uff0c\u4e5f\u8bb8\u6709\u70b9\u7c7b\u4f3c\u6807\u8bb0\u6c38\u4e45\u5316???\n\tint mid=(lt+rt)>>1;\n\tif(rq<=mid)update(rot<<1,lt,mid,lq,rq,q);\n\telse if(lq>mid)update(rot<<1|1,mid+1,rt,lq,rq,q);\n\telse update(rot<<1,lt,mid,lq,mid,q),update(rot<<1|1,mid+1,rt,mid+1,rq,q);\n}\nint find(int x){return x==f[x]?x:find(f[x]);}\nBk merge(int x,int y)\n{\n\tint fx=find(x),fy=find(y);\n\tif(size[fx]>size[fy])swap(fx,fy);//\u6309\u79e9\u5408\u5e76\n\tBk t=(Bk){fx,fy,size[fx],size[fy]};//\u8fd9\u662f\u4e00\u6b65\u64a4\u9500\n\tf[fx]=fy,size[fy]+=size[fx];return t;\n}\nvoid undo(Bk t){f[t.x]=t.x,f[t.y]=t.y,size[t.x]=t.sx,size[t.y]=t.sy;}\nvoid push(int rot,int &top)\n{\n\tfor(int i=fst[rot];i;i=nxt[i])\n\t\tstack[++top]=merge(to[i].x,to[i].y);//\u7528\u6808\u5b58\u4e0b\u64a4\u9500\n}\nvoid pop(int lt,int rt){for(int i=rt;i>lt;i--)undo(stack[i]);}\nvoid query(int rot,int lt,int rt,int tp)//\u8981\u8bb0\u5f55\u8fd9\u4e2a\u533a\u95f4\u7684\u64a4\u9500\u6808\u7684\u8d77\u59cb\u4f4d\u7f6e\n{\n\tint top=tp;push(rot,tp);\n\tif(lt==rt){if(q[lt].b)ans[lt]=find(q[lt].x)==find(q[lt].y);}//\u5230\u53f6\u5b50\u5c31\u56de\u7b54\u8be2\u95ee\n\telse\n\t{\n\t\tint mid=(lt+rt)>>1;\n\t\tquery(rot<<1,lt,mid,tp);\n\t\tquery(rot<<1|1,mid+1,rt,tp);//\u9012\u5f52\u5de6\u53f3\u513f\u5b50\n\t}\n\tpop(top,tp);//\u9000\u6808\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);for(int i=1;i<=n;i++)f[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%s%d%d\",st+1,&x,&y);if(x>y)swap(x,y);\n\t\tswitch(st[1])\n\t\t{\n\t\t\tcase 'C':q[i]=(Query){x,y,0},lst[q[i]]=i;break;\n\t\t\tcase 'D':q[i]=(Query){x,y,0},update(1,1,m,lst[q[i]],i,q[i]),lst.erase(q[i]);break;//map\u6765\u8bb0\u67d0\u6761\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\n\t\t\tcase 'Q':q[i]=(Query){x,y,1};break;\n\t\t}\n\t}\n\tfor(map<Query,int>::iterator it=lst.begin();it!=lst.end();++it)update(1,1,m,it->second,m,it->first);//\u6700\u540e\u5168\u52a0\u8fdb\u53bb\n\tquery(1,1,m,0);\n\tfor(int i=1;i<=m;i++)if(q[i].b)puts(ans[i]?\"Yes\":\"No\");\n}\n```\n\u65f6\u95f4\u5206\u6cbb\u8fd8\u662f\u5f88\u6709\u542f\u53d1\u6027\u7684\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e9b\u522b\u7684\u4e1c\u897f~~\u5f53\u7136LCT\u5bf9\u8fde\u901a\u6027\u9898\u968f\u4fbf\u5207~~",
        "postTime": 1555289550,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]\u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "### [\u66f4\u597d\u7684\u9605\u8bfb](https://www.cnblogs.com/yzhang-rp-inf/p/10203159.html)\n\n### [\u539f\u9898\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P2147)\n\n### \u8fd9\u9898\u7528Link-Cut-Tree\u89e3\u51b3\uff0c[Link-Cut-Tree\u8be6\u89e3](https://www.cnblogs.com/yzhang-rp-inf/p/10201857.html)\n\n\u6211\u4e0d\u592a\u4f1a\u8e29\u7206Link-Cut-Tree\u7684\u5e76\u67e5\u96c6\u505a\u6cd5qaq\n\n\u6211\u4eec\u7528Link-Cut-Tree\u7ef4\u62a4\u8fde\u901a\u6027~~\uff08\u5341\u5206\u65e0\u8111\uff09~~\n\nConnect\u64cd\u4f5c\uff1a\u628au,v\u4e24\u4e2a\u70b9\u8fde\u8d77\u6765\n\nDestroy\u64cd\u4f5c\uff1a\u628au,v\u4e24\u4e2a\u70b9\u5206\u5f00\u6765\n\nQuery\u64cd\u4f5c\uff1a\u5224\u65ad\u5728\u8fd9\u4e2a\u68ee\u6797\u91ccu\u7684\u6839\u548cv\u7684\u6839\u662f\u5426\u76f8\u7b49\n\n```cpp\n#include <bits/stdc++.h>\n#define N 10005\nusing namespace std;\ninline int read()\n{\n    register int f=1,x=0;register char ch;\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    return f*x;\n}\ninline void Swap(register int &a,register int &b)\n{\n    a^=b^=a^=b;\n}\nstruct Link_Cut_Tree{\n    int c[N][2],fa[N],top,q[N],rev[N];\n    inline void pushdown(register int x){\n        if(rev[x])\n        {\n            register int l=c[x][0],r=c[x][1];\n            rev[l]^=1,rev[r]^=1,rev[x]^=1;\n            Swap(c[x][0],c[x][1]);\n        }\n    }\n    inline bool isroot(register int x)\n    {\n        return c[fa[x]][0]!=x&&c[fa[x]][1]!=x;\n    }\n    inline void rotate(register int x)\n    {\n        int y=fa[x],z=fa[y],l,r;\n        l=c[y][0]==x?0:1;\n        r=l^1;\n        if(!isroot(y))\n            c[z][c[z][0]==y?0:1]=x;\n        fa[x]=z;\n        fa[y]=x;\n        fa[c[x][r]]=y;\n        c[y][l]=c[x][r];\n        c[x][r]=y;\n    }\n    inline void splay(register int x)\n    {\n        top=1;\n        q[top]=x;\n        for(register int i=x;!isroot(i);i=fa[i])\n            q[++top]=fa[i];\n        for(register int i=top;i;--i)\n            pushdown(q[i]);\n        while(!isroot(x))\n        {\n            int y=fa[x],z=fa[y];\n            if(!isroot(y))\n                rotate((c[y][0]==x)^(c[z][0]==y)?(x):(y));\n            rotate(x);\n        }\n    }\n    inline void access(register int x)\n    {\n        for(register int t=0;x;t=x,x=fa[x])\n        {\n            splay(x);\n            c[x][1]=t;\n        }\n    }\n    inline void makeroot(register int x)\n    {\n        access(x);\n        splay(x);\n        rev[x]^=1;\n    }\n    inline int findroot(register int x)\n    {\n        access(x);\n        splay(x);\n        while(c[x][0])\n            x=c[x][0];\n        return x;\n    }\n    inline void split(register int x,register int y)\n    {\n        makeroot(x);\n        access(y);\n        splay(y);\n    }\n    inline void cut(register int x,register int y)\n    {\n        split(x,y);\n        c[y][0]=0;\n        fa[x]=0;\n    }\n    inline void link(register int x,register int y)\n    {\n        makeroot(x);\n        fa[x]=y;\t\n    }\t\n}T;\nint n,m;\nint main()\n{\n    n=read(),m=read();\n    char ch[10];\n    while(m--)\n    {\n        scanf(\"%s\",ch);\n        if(ch[0]=='C')\n        {\n            int x=read(),y=read();\n            T.link(x,y);\n        }\n        else if(ch[0]=='D')\n        {\n            int x=read(),y=read();\n            T.cut(x,y);\n        }\n        else\n        {\n            int x=read(),y=read();\n            puts(T.findroot(x)==T.findroot(y)?\"Yes\":\"No\");\n        }\n    }\n    return 0;\n } \n```\n\n\n",
        "postTime": 1546257550,
        "uid": 37881,
        "name": "yzhang",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]\u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u7b2c\u4e00\u773c\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u5427\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u9898\u548c\u5927\u90e8\u5206\u677f\u5b50\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u91cc\u8be2\u95ee\u4e0d\u662f\u5168\u56fe\u8fde\u901a\u6027\u4e86\uff0c\u662f\u4e24\u70b9\u7684\u8fde\u901a\u6027\u3002\u5176\u5b9e\u601d\u8def\u6ca1\u4ec0\u4e48\u5927\u533a\u522b\uff0c\u8fd8\u662f\u8981\u7528**\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u628a\u8fb9\u6302\u5230\u7ebf\u6bb5\u6811\u4e0a\u76f8\u5e94\u7684\u65f6\u95f4\u70b9\u4e0a\u3002\n\n\u53ea\u662f\u6211\u4eec\u73b0\u5728\u7684\u8be2\u95ee\u4e0d\u540c\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u6a21\u4eff\u628a\u8fb9\u6302\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u65b9\u5f0f\uff0c\u628a\u8be2\u95ee\u6302\u5728\u5355\u70b9\u4e0a\u3002\u6bcf\u4e2a\u65f6\u95f4\u70b9\u4e0a\u6700\u591a\u6709\u4e00\u6b21\u8be2\u95ee\uff0c\u7531\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9\u662f\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5217\u7684\uff0c\u6211\u4eec\u5728\u904d\u5386\u5230\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\u5373\u53ef\u3002\n\n```cpp\n\n//Don't act like a loser.\n//This code is written by huayucaiji\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\n#define int long long\n#define pr pair<int,int>\nusing namespace std;\n\nint read() {\n\tchar ch=getchar();\n\tint f=1,x=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\n\nconst int MAXN=10000+10,MAXM=2e5+10;\n\nint n,m,q,cnt,num;\nstack<pr > stk;\nint size[MAXN],father[MAXN];\nvector<pr > edge[MAXM<<2];\nvector<pr > qry[MAXM<<2];\nset<pr > s;\nmap<pr,int > mp;\n\npr make_edge(int x,int y) {\n\treturn make_pair(min(x,y),max(x,y));\n}\nint find(int x) {\n\tif(x!=father[x]) {\n\t\treturn find(father[x]);\n\t}\n\treturn x;\n}\nvoid merge(pr s) {\n\tint x=find(s.first);\n\tint y=find(s.second);\n\tif(x==y) {\n\t\tstk.push(make_pair(-1,-1));\n\t\treturn ;\n\t}\n\tif(size[x]>size[y]) {\n\t\tswap(x,y);\n\t}\n\tfather[x]=y;\n\tsize[y]+=size[x];\n\tstk.push(make_pair(x,y));\n}\nvoid del() {\n\tint x=stk.top().first;\n\tint y=stk.top().second;\n\tstk.pop();\n\tif(x==-1) {\n\t\treturn ;\n\t}\n\tfather[x]=x;\n\tsize[y]-=size[x];\n}\n\nvoid modify(int l,int r,int p,int x,int y,pr s) {\n\tif(x>y||r<x||y<l) {\n\t\treturn ;\n\t}\n\tif(x<=l&&r<=y) {\n\t\tedge[p].push_back(s);\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\tmodify(l,mid,p<<1,x,y,s);\n\tmodify(mid+1,r,p<<1|1,x,y,s);\n}\nvoid modqry(int l,int r,int p,int x,int y,pr s) {\n\tif(x>y||r<x||y<l) {\n\t\treturn ;\n\t}\n\tif(x<=l&&r<=y) {\n\t\tqry[p].push_back(s);\n        //\u628a\u8be2\u95ee\u6302\u5230\u7ebf\u6bb5\u6811\u4e0a\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\tmodqry(l,mid,p<<1,x,y,s);\n\tmodqry(mid+1,r,p<<1|1,x,y,s);\n}\n\nvoid query(int l,int r,int p) {\n\tint sz=edge[p].size();\n\tfor(int i=0;i<sz;i++) {\n\t\tmerge(edge[p][i]);\n\t}\n\tif(l==r) {\n\t\tint qsz=qry[p].size();\n        //qsz\u7684\u503c\u57df\u5728 [0,1]\u3002\n\t\tfor(int i=0;i<qsz;i++) {\n\t\t\tif(find(qry[p][i].first)==find(qry[p][i].second)) {\n\t\t\t\tputs(\"Yes\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tputs(\"No\");\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tint mid=(l+r)>>1;\n\t\tquery(l,mid,p<<1);\n\t\tquery(mid+1,r,p<<1|1);\n\t} \n\twhile(sz--) {\n\t\tdel();\n\t}\n}\n\nsigned main() {\n\tcin>>n;\n\tfor(int i=1;i<=n;i++) {\n\t\tfather[i]=i;\n\t\tsize[i]=1;\n\t}\n\tcin>>q;\n\t\n\tfor(int i=1;i<=q;i++) {\n\t\tstring c;\n\t\tcin>>c;\n\t\tint u,v;\n\t\tu=read();\n\t\tv=read();\n\t\tif(c[0]=='Q') {\n\t\t\tmodqry(1,q,1,i,i,make_pair(u,v));\n\t\t}\n\t\tif(c[0]=='C') {\n\t\t\ts.insert(make_edge(u,v));\n\t\t\tmp[make_edge(u,v)]=i;\n\t\t}\n\t\tif(c[0]=='D') {\n\t\t\tmodify(1,q,1,mp[make_edge(u,v)],i-1,make_edge(u,v));\n\t\t\tmp[make_edge(u,v)]=0;\n\t\t\ts.erase(make_edge(u,v));\n\t\t}\n\t}\n\t\n\tfor(set<pr >::iterator it=s.begin();it!=s.end();it++) {\n\t\tmodify(1,q,1,mp[*it],q,*it);\n        //\u8fd8\u6709\u4e9b\u8fb9\u6ca1\u88ab\u5220\u9664\u8981\u52a0\u8fdb\u53bb\n\t}\n\t\n\tquery(1,q,1);\n\treturn 0;\n}\n\n```",
        "postTime": 1615078898,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "LG2147 [SDOI2008]\u6d1e\u7a74\u52d8\u6d4b"
    },
    {
        "content": "\u7b80\u4ecb\uff1a~~LCT\u6a21\u677f~~\uff0c[\u4e0d\u4f1aLCT\u7684\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/problem/P3690)\n\n\u5206\u6790\uff1a\n\n\u5bf9\u4e8eConnect\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528LCT\u8fdb\u884c\u52a8\u6001\u8fde\u8fb9\uff1b\n\n\u5bf9\u4e8eDestory\u64cd\u4f5c\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528LCT\u8fdb\u884c\u52a8\u6001\u5220\u8fb9\uff1b\n\n\u7136\u540e\u5c31\u6ca1\u4e86\u3002\u3002\u3002\n\nCode\n\n\u6ce8\uff1a\u5982\u679c\u51fa\u73b0\u4e86\u4e24\u79cd\u6ce8\u91ca\uff0c\u5199\u5728\u62ec\u53f7\u91cc\u7684\u662f\u4eba\u8bdd\n```c\n#include<bits/stdc++.h>\n#define N (int)(1e4+1)\n#define M 5001\n#define R register\n#define INFI 0x7fffffff\n#define INFL 0x7fffffffffffffff\n#define F(i,start,end) for(R int (i)=(start);(i)<=(end);i++)\nusing namespace std;\ntemplate<typename T> void read(T &x)//\u968f\u5904\u53ef\u89c1\u7684\u5feb\u8bfb\u3002\u3002\u3002\n{\n\tint f=1;\n\tx=0;\n\tchar c=getchar();\n\twhile(!isdigit(c))\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\tx=x*f;\n}\nvoid write(int x)\n{\n\tif(x<0)\n\t\tx=~x+1,putchar('-');\n\tif(x>9)\n\t\twrite(x/10);\n\tputchar(x%10+'0');\n}\nstruct link_cut_tree\n{\n\t#define ls tree[p].son[0]\n\t#define rs tree[p].son[1]\n\t#define fa tree[p].f\n\t#define anc tree[fa].f\n\tstack<int> s;\n\tstruct node\n\t{\n\t\tint f,son[2];\n\t\tbool tip;\n\t}tree[N];\n\tvoid pushdown(int p)//\u91ca\u653e\u8be5\u70b9\u7684\u65cb\u8f6c\u61d2\u6807\u8bb0\n\t{\n\t\tif(tree[p].tip)\n\t\t{\n\t\t\ttree[ls].tip^=1;\n\t\t\ttree[rs].tip^=1;\n\t\t\ttree[p].tip^=1;\n\t\t\tswap(ls,rs);\n\t\t}\n\t\treturn;\n\t}\n\tvoid connect(int p,int f,bool k)//\u8fde\u8fb9\n\t{\n\t\ttree[p].f=f;\n\t\ttree[f].son[k]=p;\n\t\treturn;\n\t}\n\tbool identify(int p)//\u5224\u65ad\u8be5\u8282\u70b9\u5728\u539f\u6811\u4e0a\u7684\u6df1\u5ea6\u4e0e\u5176\u7236\u8282\u70b9\u5728\u539f\u6811\u4e0a\u7684\u6df1\u5ea6\u7684\u5173\u7cfb\uff08\u5224\u65ad\u8be5\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u54ea\u4e2a\u513f\u5b50\uff09\n\t{\n\t\treturn tree[fa].son[1]==p;\n\t}\n\tbool check(int p)//\u5224\u65ad\u8be5\u8282\u70b9\u662f\u4e0d\u662f\u5176\u6240\u5728splay\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff08\u5224\u65ad\u8be5\u8282\u70b9\u662f\u4e0d\u662f\u5176\u6240\u5728splay\u7684\u6839\uff09\n\t{\n\t\treturn tree[fa].son[0]!=p&&tree[fa].son[1]!=p;\n\t}\n\tvoid rotate(int p)//\u65cb\u8f6c\u8be5\u8282\u70b9\n\t{\n\t\tint f=fa,a=anc;\n\t\tbool fs=identify(p),as=identify(f);\n\t\tif(!check(f))//\u53ea\u6709\u5f53\u5176\u7956\u5148\u8282\u70b9\u4e0e\u5176\u5728\u540c\u4e00\u4e2asplay\u65f6\uff0c\u624d\u9700\u8981\u8fde\u4e00\u6761\u5b9e\u8fb9 \n\t\t\ttree[a].son[as]=p;\n\t\ttree[p].f=a;\n\t\tconnect(tree[p].son[fs^1],f,fs);\n\t\tconnect(f,p,fs^1);\n\t\treturn;\n\t}\n\tvoid splay(int p)//\u65cb\u8f6c\u8be5\u8282\u70b9\u6240\u5728\u7684\u6574\u4e2asplay\n\t{\n\t\tint temp=p;\n\t\twhile(!check(p))\n\t\t{\n\t\t\ts.push(p);\n\t\t\tp=fa;\n\t\t}\n\t\ts.push(p);\n\t\tp=temp;\n\t\twhile(s.size())//\u4e00\u5b9a\u8981\u6309\u8282\u70b9\u5728\u5176splay\u4e2d\u6df1\u5ea6\u7684\u5347\u5e8f\u91ca\u653e\u61d2\u6807\u8bb0\n\t\t{\n\t\t\tpushdown(s.top());\n\t\t\ts.pop();\n\t\t}\n\t\twhile(!check(p))//splay\u6a21\u677f\u90e8\u5206\uff0c\u5728\u6b64\u4e0d\u591a\u505a\u89e3\u91ca\n\t\t{\n\t\t\tif(check(fa))\n\t\t\t\trotate(p);\n\t\t\telse\n\t\t\t\tif(identify(p)==identify(fa))\n\t\t\t\t\trotate(fa),rotate(p);\n\t\t\t\telse\n\t\t\t\t\trotate(p),rotate(p);\n\t\t}\n\t\treturn;\n\t}\n\tvoid access(int p)//\u62c9\u4e00\u6761\u8be5\u8282\u70b9\u4e0e\u6240\u6709splay\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\u7684\u8def\u5f84\uff08\u5c31\u662f\u628a\u8be5\u8282\u70b9\u4e0e\u6839\u8282\u70b9\u653e\u5728\u4e00\u4e2asplay\u91cc\uff09\n\t{\n\t\tint f=0;\n\t\twhile(p)\n\t\t{\n\t\t\tsplay(p);\n\t\t\trs=f;//\u62c9\u865a\u8fb9\n\t\t\tf=p;\n\t\t\tp=fa;\n\t\t}\n     \t\treturn;\n\t}\n\tvoid modify(int p)//\u5c06\u5728\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\u53d8\u4e3a\u5728\u6240\u6709splay\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff08\u6362\u6839\uff09\n\t{\n\t\taccess(p);\n\t\tsplay(p);\n\t\ttree[p].tip^=1;//\u56e0\u4e3a\u5728\u8be5\u8282\u70b9\u6240\u5728\u7684splay\u91cc\uff0c\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\u6700\u5927\uff0c\u6240\u4ee5\u65cb\u8f6c\u8be5\u8282\u70b9\u6240\u5728\u7684splay\uff0c\u4f7f\u6df1\u5ea6\u5012\u7f6e\u540e\uff0c\u8be5\u8282\u70b9\u6210\u4e3a\u4e86\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff0c\u8fd9\u4e5f\u4f1a\u5bfc\u81f4\u8be5\u8282\u70b9\u6ca1\u6709\u4e86\u5de6\u5b69\u5b50\uff0c\u8fd9\u4e00\u6761\u6027\u8d28\u4f1a\u5728cut\u51fd\u6570\u4e2d\u7528\u5230\n\t\treturn;\t\n\t}\n\tint find(int p)//\u67e5\u627e\u5728\u8be5\u8282\u70b9\u6240\u5728splay\u4e2d\uff0c\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff08\u627e\u6839\uff09\n\t{\n\t\taccess(p);\n\t\tsplay(p);\n\t\twhile(ls)\n\t\t\tp=ls;\n\t\treturn p;\n\t}\n\tvoid split(int p1,int p2)//\u5077\u61d2\u51fd\u6570\n\t{\n\t\tmodify(p1);\n\t\taccess(p2);\n\t\tsplay(p2);\n\t\treturn;\n\t}\n\tvoid link(int p1,int p2)//\u8fde\u8fb9\n\t{ \n      \t\tint f1=find(p1),f2=find(p2);\n\t\tif(f1==f2)//\u5982\u679c\u5df2\u7ecf\u5728\u540c\u4e00\u4e2asplay\u4e2d\uff0c\u5c31\u6ca1\u5fc5\u8981\u8fde\u8fb9\u4e86\n\t\t\treturn; \n\t\tmodify(p1);\n\t\ttree[p1].f=p2;\n\t\treturn;\n\t}\n\tvoid cut(int p1,int p2)//\u5220\u8fb9\n\t{\n\t\tint f1=find(p1),f2=find(p2);\n\t\tif(f1!=f2)//\u5982\u679c\u5df2\u7ecf\u4e0d\u5728\u540c\u4e00\u4e2asplay\u4e2d\uff0c\u5c31\u6ca1\u5fc5\u8981\u5220\u8fb9\u4e86\n\t\t\treturn;\n\t\tsplit(p1,p2);\n\t\tif(tree[p2].son[0]==p1&&!tree[p1].son[1])//\u53ea\u6709\u5f53\u4e24\u70b9\u95f4\u6ca1\u6709\u5176\u4ed6\u70b9\u65f6\u624d\u53ef\u4ee5\u5220\u8fb9\uff08\u6ca1\u6709\u8fb9\u5f53\u7136\u5c31\u5220\u4e0d\u4e86\u8fb9\uff09 \n\t\t{\n\t\t\ttree[p2].son[0]=0;\n\t\t\ttree[p1].f=0;\n\t\t}\n\t\treturn;\n\t}\n\tbool query(int p1,int p2)//\u5b9e\u73b0\u4e86\u5b8c\u5168\u5c01\u88c5 \n\t{\n\t\treturn find(p1)==find(p2);\n\t}\n\t#undef ls\n\t#undef rs\n\t#undef fa\n\t#undef anc\n}lct;\nint n,m,u,v;\nchar opt[10];\nint main()\n{\n\tread(n),read(m);\n\tF(i,1,m)\n\t{\n\t\tscanf(\"%s\",&opt),read(u),read(v);\t\n\t\tif(opt[0]=='C')\n\t\t\tlct.link(u,v);\n\t\tif(opt[0]=='D')\n\t\t\tlct.cut(u,v);\n\t\tif(opt[0]=='Q')\n\t\t\tprintf(\"%s\\n\",lct.query(u,v)?\"Yes\":\"No\");\n\t}\n \treturn 0;\n}\n\n\u540e\u8bb0\uff1a\u56e0\u4e3a\u8fd9\u9898\u7684\u7279\u6b8a\u6027\u8d28\uff1a\u8fde\u63a5\u7684\u70b9\u4e00\u5b9a\u4e0d\u8fde\u901a\uff0c\u5220\u7684\u8fb9\u4e00\u5b9a\u5b58\u5728\uff0c\u6240\u4ee5LCT\u4e2d\u7684link\u548ccut\u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\n```c\n\tvoid link(int p1,int p2)\n\t{ \n\t\tmodify(p1);\n\t\ttree[p1].f=p2;\n\t\treturn;\n\t}\n\tvoid cut(int p1,int p2)\n\t{\n\t\tsplit(p1,p2);\n\t\ttree[p2].son[0]=0;\n\t\ttree[p1].f=0;\n\t\treturn;\n\t}\n```\n\u5b9e\u6d4b\uff0c\u8fd9\u6837\u5199\u5feb\u5230\u98de\u8d77\uff08~~\u4e5f\u5c31150ms~~\n",
        "postTime": 1609378473,
        "uid": 219402,
        "name": "FANTASTlC",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]\u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5c31\u662f\u7528\u52a8\u6001\u6811\u7ef4\u62a4\u8fde\u901a\u6027\u800c\u5df2\u3002\u3002\u3002\u6807\u7b7e\u7684`\u5e76\u67e5\u96c6`\u662fsmg\uff1f\uff1f\uff1f\n\n\u6765\u8bf4\u4e00\u4e0b\u65b9\u6cd5\u3002\u6709\u901a\u9053\u5c31\u662f\u52a0\u8fb9\uff0c\u901a\u9053\u6ca1\u4e86\u5c31\u662f\u5220\u8fb9\u3002\n\n\u81f3\u4e8e\u4e24\u4e2a\u70b9\u662f\u5426\u8fde\u901a\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u79cd\u65b9\u6cd5\uff1a\u4e00\u68f5\u6811\u8c01\u90fd\u77e5\u9053\u7684\u4fe1\u606f\u5c31\u662f\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148makeroot(x)\uff0c\u7136\u540eAccess(y)\uff0c\u6700\u540efindroot(y)\u662f\u5426\u7b49\u4e8ex\u5c31\u884c\u4e86\u3002\n\n\u6240\u4ee5pushup\u64cd\u4f5c\u4e5f\u6ca1\u5fc5\u8981\uff0c\u56e0\u4e3a\u6839\u672c\u6ca1\u6709\u70b9\u6743\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\nconst int M=1e4+5;\nint s[M],f[M],st[M],val[M],lazy[M],chi[M][2];\nint get(int now)\n{\n\treturn chi[f[now]][0]==now||chi[f[now]][1]==now;\n}\nvoid filp(int now)\n{\n\tstd::swap(chi[now][0],chi[now][1]);lazy[now]^=1;\n}\nvoid pushdown(int now)\n{\n\tif(lazy[now])filp(chi[now][0]),filp(chi[now][1]),lazy[now]=0;\n}\nvoid rotate(int x)\n{\n\tint y=f[x],z=f[y],k=chi[y][1]==x,v=chi[x][!k];\n\tif(get(y))chi[z][chi[z][1]==y]=x;chi[x][!k]=y;chi[y][k]=v;\n\tif(v)f[v]=y;f[f[y]=x]=z;\n}\nvoid Splay(int x)\n{\n\tint top=0,y=x;st[++top]=y;\n\twhile(get(y))st[++top]=y=f[y];\n\twhile(top)pushdown(st[top--]);\n\twhile(get(x))\n\t{\n\t\ty=f[x];top=f[y];\n\t\tif(get(y))rotate(((chi[y][0]==x)^(chi[top][0]==y))?x:y);\n\t\trotate(x);\n\t}\n}\nvoid Access(int x)\n{\n\tfor(register int y=0;x;x=f[y=x])Splay(x),chi[x][1]=y;\n}\nint findroot(int x)\n{\n\tAccess(x);Splay(x);\n\twhile(chi[x][0])pushdown(x),x=chi[x][0];\n\tSplay(x);return x;\n}\nvoid makeroot(int x)\n{\n\tAccess(x);Splay(x);filp(x);\n}\nvoid link(int x,int y)\n{\n\tmakeroot(x);if(findroot(y)!=x)f[x]=y;\n}\nbool isunicom(int x,int y)\n{\n\tmakeroot(x);Access(y);return findroot(y)==x;\n}\nvoid cut(int x,int y)\n{\n\tmakeroot(x);\n\tif(findroot(y)==x&&f[y]==x&&!chi[y][0])f[y]=chi[x][1]=0;\n}\nsigned main(void)\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\twhile(m--)\n\t{\n\t\tchar s[10];int x,y;\n\t\tscanf(\"%s%d%d\",s,&x,&y);\n\t\tif(*s=='Q')printf(\"%s\\n\",isunicom(x,y)?\"Yes\":\"No\");\n\t\tif(*s=='C')link(x,y);\n\t\tif(*s=='D')cut(x,y);\n\t}\n}\n```",
        "postTime": 1588343734,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6570\u636e\u7ed3\u6784 LCT P2147\u9898\u89e3"
    },
    {
        "content": "\u867d\u7136lct\u7684\u9898\u89e3\u6709\u4e86\uff0c\u4f46\u662f\uff0c\u6211\u76f8\u4fe1\u5728\u8fd9\u9898\u91cc\u9762\uff0c\u6211\u7684lct\u66f4\u597d\uff1b\n\n\u7ec6\u8282\u5728\u6211\u7684\u535a\u5ba2\u91cc\n\nhttp://blog.csdn.net/largecub233/article/details/72566630\n\n\u6211\u4eec\u4e00\u5f00\u59cb\u8bfb\u5165n\n\n\u8868\u793a\u6709n\u68f5\u6811\u7684\u68ee\u6797\uff1b\n\n\u6211\u4eec\u6bcf\u6b21\u5408\u5e76x,y\n\n\u662f\u5427x,y\u4e24\u9897\u6811\u5408\u5e76\u8d77\u6765\uff1b\n\n\u4f46\u662f\u6bcf\u68f5\u6811\u6709\u5f88\u591asplay\uff1b\n\n\u6240\u4ee5\u8fd9\u4e9bsplay\u5fc5\u987b\u8981\u4e92\u8865\u5f71\u54cd\uff1b\n\n\n\u56e0\u4e3a\u5b9e\u8fb9\u7684\u5b58\u5728\uff0c\u4e00\u4e2asplay\u7684\u6839\u8282\u70b9\u53ef\u80fdfa\u4e0d\u662f0\uff1b\n\n\u6240\u4ee5\u6211\u4eec\u8981\u5224\u65ad\u4ed6\u7236\u4eb2\u8282\u70b9\u6709\u6728\u6709\u4ed6\u8fd9\u4e2a\u513f\u5b50\uff1b\n\n\u7136\u540e\u662f\u65cb\u8f6c\uff1b\n\n\u5207\u8bb0\u65cb\u8f6c\u4e00\u5b9a\u8981\u6309\u987a\u5e8f\uff1b\n\n\u8fd9\u4e24\u4e2a\u7ec6\u8282\u662flct\u7684splay\u7684\u96be\u70b9\uff1b\n\n\u4ee3\u7801\u81ea\u5df1\u770b\u5427\uff1b\n\n\u53e6\u5916\uff0c\u4e0d\u4f1asplay\u7684\u4e00\u5b9a\u8981\u5148\u597d\u597d\u5b66splay\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N=1e4+5;\nint ch[N][2],fa[N],rev[N];\nint n,m,x,y;\nchar c[20];\nint get(int x){\n    if(ch[fa[x]][1]==x)return 1;\n    if(ch[fa[x]][0]==x)return 0;\n    return -1;\n}\nvoid rotate(int x){\n    int f=fa[x],ff=fa[f],l=get(x),r=l^1;\n    if(get(f)!=-1)ch[ff][ch[ff][1]==f]=x;\n    fa[ch[x][r]]=f; fa[f]=x; fa[x]=ff; \n    ch[f][l]=ch[x][r]; ch[x][r]=f; \n}\nvoid push(int x){\n    if(!rev[x])return;\n    rev[x]=0;\n    rev[ch[x][0]]^=1;\n    rev[ch[x][1]]^=1;\n    swap(ch[x][0],ch[x][1]);\n}\nvoid cle(int x){if(get(x)!=-1)cle(fa[x]);push(x);}\nvoid splay(int x){\n    cle(x);\n    for(int f=fa[x];get(x)!=-1;rotate(x),f=fa[x])\n        if(get(f)!=-1)rotate(get(x)==get(f)?f:x);\n}\nvoid access(int x){for(int t=0;x;x=fa[t=x])splay(x),ch[x][1]=t;}\nvoid makeroot(int x){access(x);splay(x);rev[x]=1;}\nvoid link(int x,int y){makeroot(x);fa[x]=y;}\nvoid cut(int x,int y){makeroot(x);access(y);splay(y);fa[x]=ch[y][0]=0;}\nint find(int x){for(access(x),splay(x);ch[x][0];x=ch[x][0]);return x;}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    while(m--){\n        scanf(\"%s%d%d\",c,&x,&y);\n        if(c[0]=='C')link(x,y);\n        if(c[0]=='D')cut(x,y);\n        if(c[0]=='Q')\n            if(find(x)==find(y))printf(\"Yes\\n\");else printf(\"No\\n\");    \n    }\n}\n```",
        "postTime": 1495205101,
        "uid": 7442,
        "name": "\u5de8\u578b\u65b9\u5757",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "lct\u601d\u8def\u9898\uff0c\u597d\u5427\u5176\u5b9e\u8fd8\u662f\u8003\u677f\u5b50\uff08\u624b\u52a8\u5212\u6389\uff09\n\n\u9898\u76ee\u8981\u6c42\uff1a\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u52a0\u8fb9\uff0c\u5220\u8fb9\u548c\u67e5\u8be2\u8fde\u901a\u6027\uff08\u4f3c\u4e4e\u5e76\u67e5\u96c6\u80fd\u6c34\u8fc7\uff0c\u800c\u4e14\u8dd1\u7684\u8fd8\u5f02\u5e38\u7684\u5feb\uff1f\u6295\u8bc9\uff01\uff01\uff01\uff09\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u52a8\u6001\u52a0\u8fb9\u5220\u8fb9\u95ee\u9898\u5f53\u7136\u5c31\u7528lct\u5566\u3002\n\n\u5bf9\u4e8e\u52a0\u8fb9\u548c\u5220\u8fb9cut\u548clink\u51fd\u6570\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u3002\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u67e5\u8be2\u8fde\u901a\u6027\uff1f\n\n\u53ef\u4ee5\u8003\u8651\u5224\u65ad\u6839\u8282\u70b9\u662f\u5426\u76f8\u7b49\u3002\n\n\u60f3\u4e00\u4e0blct\u7684\u6027\u8d28\uff0c\u56e0\u4e3alct\u4e2d\u7684splay\u662f\u6839\u8282\u70b9\u6df1\u5ea6\u4e3a\u5173\u952e\u5b57\u7ef4\u62a4\u7684\uff0c\u8fd9\u6837\u5982\u679c\u6211\u4eec\u5c06\u8981\u67e5\u627e\u7684\u8282\u70b9access\u4e00\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u542b\u6709\u6839\u8282\u70b9\u7684auxiliary tree\u3002\u7531\u4e8e\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u5728\u8fd9\u9897splay\u4e2d\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u4e00\u76f4\u5f80\u4ed6\u7684\u5de6\u513f\u5b50\u4e0a\u8df3\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u96be\u770b\uff0c\u4e0d\u53d1\u4e86\u5427\u3002\u3002\u3002\n",
        "postTime": 1490324405,
        "uid": 19912,
        "name": "\u5c0f\u5f3a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "\u59a5\u59a5\u7684\u4e00\u4e2aLCT\u6a21\u677f\u9898\u3002\n\n\u4e0d\u8fc7\u8bdd\u8bf4\uff0c\u8fd9\u4e2a\u5e76\u67e5\u96c6\u6309\u9053\u7406\u6765\u8bf4\u5e94\u8be5\u8981\u5361\u6389\u7684\u54272333\n\n\u53ef\u80fd\u6570\u636e\u6bd4\u8f83\u53cb\u5584\u3002\n\nLCT\u603b\u7684\u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u597d\u5199\u7684\u5566\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std ;\nconst int maxn = 10010, maxm = 200010 ;\nint n, m, fa[maxn], ch[maxn][2], stk[maxn] ;\nbool rev[maxn] ;\n\nbool isrt ( int x ) { return ch[fa[x]][0] != x && ch[fa[x]][1] != x ; } \nvoid Rotate ( int x, bool f ) {\n    int y = fa[x], z = fa[y], u = ch[x][f^1] ;\n    if ( !isrt(y) ) ch[z][ch[z][1]==y] = x ;\n    fa[x] = z ;\n    ch[fa[u] = y][f] = u ;\n    ch[fa[y] = x][f^1] = y ;\n}\n\nvoid push_down ( int x ) {\n    if ( rev[x] ) {\n        rev[x] = false ;\n        rev[ch[x][0]] ^= 1 ;\n        rev[ch[x][1]] ^= 1 ;\n        swap ( ch[x][0], ch[x][1] ) ;\n    }\n}\n\nvoid Splay ( int x ) {\n    int i, u, top, y, z ;\n    stk[top=1] = x ;\n    for ( u = x ; !isrt(u) ; u = fa[u] ) stk[++top] = fa[u] ;\n    while (top) push_down(stk[top--]) ;\n    for ( y = fa[x], z = fa[y] ; !isrt(x) ; z = fa[y=fa[x]] ) {\n        bool f1 = ch[y][1] == x, f2 = ch[z][1] == y ;\n        if ( isrt(y) ) Rotate ( x, f1 ) ;\n        else if ( f1^f2 ) Rotate ( x, f1 ), Rotate ( x, f2 ) ;\n        else Rotate ( y, f2 ), Rotate ( x, f1 ) ;\n    }\n}\n\nvoid access ( int x ) {\n    for ( int t = 0 ; x ; x = fa[t=x] ) \n        Splay(x), ch[x][1] = t ;\n}\n\nvoid Make_rt ( int x ) {\n    access(x) ;\n    Splay(x) ;\n    rev[x] ^= 1 ;\n}\n\nvoid Link ( int x, int y ) {\n    Make_rt(x) ;\n    fa[x] = y ;\n}\n\nvoid Cut ( int x, int y ) {\n    Make_rt(x) ;\n    access(y) ;\n    Splay(y) ;\n    ch[y][0] = fa[x] = 0 ;\n}\n\nbool query ( int u, int v ) {\n    for ( Make_rt(u), access(v), Splay(v) ; ch[v][0] ; v = ch[v][0] ) ;\n    return u == v ;\n}\n\nchar cmd[10] ;\nint main() {\n    int i, j, k, u, v ;\n    scanf ( \"%d%d\", &n, &m ) ;\n    while (m--) {\n        scanf ( \"%s%d%d\", cmd, &u, &v ) ;\n        if ( cmd[0] == 'C' ) Link ( u, v ) ;\n        else if ( cmd[0] == 'D' ) Cut ( u, v ) ;\n        else puts(query(u,v) ? \"Yes\" : \"No\") ;\n    }\n    return 0 ;\n}\n```",
        "postTime": 1486609859,
        "uid": 17941,
        "name": "Vasily",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]Cave \u6d1e\u7a74\u52d8\u6d4b\u3011"
    },
    {
        "content": "\u5f88\u7ecf\u5178\u7684\u7684 LCT \u7ef4\u62a4\u8054\u901a\u6027\u3002\n\n\u4e24\u4e2a\u6d1e\u7a74\u4e4b\u95f4\u81f3\u591a\u53ea\u6709\u4e00\u6761\u8def\u5f84\u4fdd\u8bc1\u4e86\u8fd9\u662f\u4e2a\u68ee\u6797\u3002\n\n\u65b0\u901a\u9053\u5c31\u8fde\u8fb9\uff0c\u6467\u6bc1\u901a\u9053\u5c31\u5220\u8fb9\u3002\u67e5\u8be2\u5c31 `find` \u4e00\u4e0b\u4e24\u4e2a\u70b9\u770b\u770b\u662f\u4e0d\u662f\u540c\u4e00\u68f5\u6811\u5373\u53ef\u3002\n\n```cpp\n#include <algorithm>\n#include <cstdio>\nusing namespace std;\nconst int N = 10005;\nint n, m;\nint val[N], ch[N][2], rev[N], fa[N];\nvoid pushup(int k) { return; }\nvoid pushdown(int k) {\n    if (!rev[k])\n        return;\n    swap(ch[k][0], ch[k][1]);\n    rev[ch[k][0]] ^= 1, rev[ch[k][1]] ^= 1;\n    rev[k] = 0;\n}\nbool isroot(int k) { return (ch[fa[k]][0] != k) && (ch[fa[k]][1] != k); }\nint get(int k) { return ch[fa[k]][1] == k; }\nvoid rotate(int x) {\n    int y = fa[x], z = fa[y], k = get(x);\n    if (!isroot(y))\n        ch[z][ch[z][1] == y] = x;\n    ch[y][k] = ch[x][!k], fa[ch[x][!k]] = y;\n    ch[x][!k] = y, fa[y] = x, fa[x] = z;\n    pushup(y), pushup(x);\n}\nvoid update(int p) {\n    if (!isroot(p))\n        update(fa[p]);\n    pushdown(p);\n}\nvoid splay(int x) {\n    update(x);\n    for (int fat; fat = fa[x], !isroot(x); rotate(x)) {\n        if (!isroot(fat))\n            rotate(get(fat) == get(x) ? fat : x);\n    }\n}\nvoid access(int x) {\n    int p;\n    for (p = 0; x; p = x, x = fa[x]) {\n        splay(x), ch[x][1] = p, pushup(x);\n    }\n}\nvoid makeroot(int p) {\n    access(p);\n    splay(p);\n    rev[p] ^= 1;\n}\nvoid link(int x, int p) {\n    makeroot(x), splay(x);\n    fa[x] = p;\n}\nvoid split(int x, int p) { makeroot(x), access(p), splay(p); }\nvoid cut(int x, int p) {\n    split(x, p);\n    if (ch[p][0] == x && ch[x][1] == 0)\n        ch[p][0] = fa[x] = 0;\n}\nint find(int x) {\n    access(x);\n    splay(x);\n    for (; ch[x][0]; x = ch[x][0]) pushdown(x);\n    return x;\n}\n\nint main(void) {\n    scanf(\"%d%d\", &n, &m);\n    for (int u, v; m; m--) {\n        char op[5];\n        scanf(\"%s%d%d\", op, &u, &v);\n        if (op[0] == 'Q') {\n            int fu = find(u), fv = find(v);\n            puts(fu == fv ? \"Yes\" : \"No\");\n        } else if (op[0] == 'C') {\n            link(u, v);\n        } else {\n            cut(u, v);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1616768168,
        "uid": 255095,
        "name": "PragmaGCC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2147 \u3010[SDOI2008]\u6d1e\u7a74\u52d8\u6d4b\u3011"
    }
]