[
    {
        "content": "**\u9898\u5916\u8bdd\uff1a**\n\nEZEC\u5b98\u65b9\u9898\u89e3\uff1a\n\n\u6709\u70b9\u6851\u5fc3\u554a\u3002\u3002\u3002\u8fd9\u6b21\u9664\u4e86\u5185\u90e8\u4eba\u5458\u5c45\u7136\u6ca1\u4ebaAC\u8fd9\u9898\uff0c\u641e\u4e86\u597d\u4e45\u7684\u8bf4\u3002\n\n\u552f\u4e00\u4e00\u4e2a35\u5206\u7684\u4ee3\u7801\u8fd8\u662f\u5199\u7684\u65e0\u4f18\u5316LCA\u89e3\u6cd5\uff0c~~\u800c\u4e14\u4ed6\u601d\u8def\u6211\u8fd8\u6ca1\u770b\u61c2~~\n\n\u88ab\u5410\u69fd\u9664\u4e86\u7b97\u6cd5\u4e4b\u5916\u6709\u70b9\u88f8\uff0c\u8fd9\u91cc\u8bb2\u4e00\u4e0b\uff1a\u8fd9\u9898\u539f\u672c\u7684\u60f3\u6cd5\u5176\u5b9e\u662f\u540e\u9762\u8bb2\u5230\u7684\u6b63\u89e3\u7b2c\u4e8c\u79cd\uff08\u867d\u7136\u5f53\u65f6\u6ca1\u6709\u60f3\u5230tarjan\uff09\uff0c\u4f46\u662f\u539f\u672c\u7684\u601d\u8def\u5e76\u6ca1\u6709\u7b2c\u4e00\u79cd\u6b63\u89e3\u90a3\u4e48\u88f8\n\n------------\n\n\u5bf9\u4e8e $N \\le 10$ \u7684\u6570\u636e\uff0c\u5b9e\u65f6\u8bb0\u5f55\u5c0fE\u548cPF\u5230\u6bcf\u4e2a\u5c9b\u7684\u8ddd\u79bb\uff0c\u7136\u540e $dfs$ \u679a\u4e3e\u6bcf\u79cd\u53ef\u80fd\u7684\u8d70\u6cd5\u3002\u590d\u6742\u5ea6 $N!$\u3002\n\n------------\n\n\u5bf9\u4e8e $N \\le 16$ \u7684\u6570\u636e\uff0c\u8003\u8651\u72b6\u538bdp\u3002$dp[i][j]$ \u8bb0\u5f55\u5f53\u524d\u7684\u72b6\u6001\u4ee5\u53ca\u5f53\u524d\u6240\u5728\u7684\u70b9\u3002\u72b6\u538b\u5b8c\u540e\u5bf9\u6bcf\u4e2a\u72b6\u6001\u8fdb\u884c\u7edf\u8ba1\u3002\u5982\u679c\u72b6\u6001\u6570\u8d85\u8fc7 $l$ \u5e76\u4e14\u5c0f\u4e8e\u5f53\u524d\u6240\u80fd\u5f97\u5230\u7684\u6700\u5c0f\u503c \uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\u7b54\u6848\u3002\n\n\u5728\u72b6\u538b\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u7b54\u6848\u4f1a\u66f4\u5feb~~\u4f46\u8fd9\u4e2a\u8ddf\u6b63\u89e3\u6ca1\u5565\u5173\u7cfb~~\u3002\n\n\u590d\u6742\u5ea6\u4e3a $n*2^n$\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n\u4ee3\u7801\u7565\uff08~~\u72b6\u538b\u4f60\u90fd\u4f1a\u4f60\u8ddf\u6211\u8bb2\u4f60\u60f3\u4e0d\u51fa\u6b63\u89e3\uff1f~~\uff09\n\n------------\n\n\n\u5f53\u6570\u5b57\u53d8\u5927\u540e\uff0c\u6307\u6570\u7ea7\u522b\u7684\u7b54\u6848\u80af\u5b9a\u4e0d\u5408\u6cd5\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u5feb\u7684\u65b9\u6cd5\u3002\n\n\u7b2c\u4e00\u6b65\u89c2\u5bdf\u5230\u72f1\u957f\u7684\u6700\u77ed\u8ddd\u79bb\u5728\u52a0\u8fb9\u524d\u540e\u90fd\u662f\u4e00\u4e2a\u56fa\u5b9a\u503c\uff08\u672a\u5fc5\u76f8\u7b49\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u8fd9\u4e2a\u8ddd\u79bb\uff0c\u52a0\u8fb9\uff0c\u7136\u540e\u518d\u9884\u5904\u7406\u4e00\u6b21\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7531\u4e8e\u53ea\u6709 $N-1$ \u6761\u8fb9\uff0c\u5728\u52a0\u8fb9\u4e4b\u524d\u6bcf\u4e00\u6761\u8fb9\u5230\u53e6\u4e00\u6761\u8fb9\u90fd\u6709\u552f\u4e00\u7684\u6700\u77ed\u8def\u3002\n\n\u5728 $N\\le500$ \u7684\u6570\u636e\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u70b9\u8dd1\u4e00\u6b21 $dij$\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u5230\u5176\u4ed6\u4efb\u610f\u70b9\u7684\u8ddd\u79bb\u548c\u957f\u5ea6\uff0c\u518d\u8fdb\u884c\u52a0\u8fb9\u64cd\u4f5c\u3002**\u72f1\u957f\u53ea\u80fd\u52a0\u4e00\u6b21\u8fb9\u7684\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u5c42\u56fe\u6765\u5b9e\u73b0\u3002**\n\n\u52a0\u5b8c\u8fb9\u540e\uff0c\u66b4\u529b\u679a\u4e3e $K$\uff0c\u53d6\u6700\u5927\u7684 $K$ \u4f5c\u4e3a\u7b54\u6848\u3002\n\n\u66b4\u529b\u679a\u4e3e\u7684\u90e8\u5206\u4ee3\u7801\uff1a\n\n```cpp\n//maxi\u4e3a\u6700\u5927\u7684p_i\u548ce_i\u7684\u503c\ninline void find_ans(){\n  int ans1=-1,ans2;\n  for (int i=1;i<=maxi;i++){\n    int re = dijk(1,i);\n    if(re>=L) ans1 = i,ans2 = re;\n  }\n  if (ans1==-1) cout << \"no solution\";\n  else cout << ans1 << endl << ans2;\n}\n```\n\n\u8fd9\u4e2a\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a $N^2 \\times Max(p_i,e_i)$\uff0c\u5927\u7ea6\u4e3a $500^3$\uff0c\u53ef\u4ee5\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u8dd1\u5b8c\u3002\n\n\u53e6\u4e00\u79cd\u65b9\u6cd5\u4e3a\u4fdd\u7559\u5230\u6bcf\u6761\u8fb9\u7684\u6700\u5c0f $K$ \u503c\uff0c\u9884\u5904\u7406\u540e\u5bf9\u6574\u5f20\u56fe\u7edf\u8ba1\u4e00\u6b21\u6700\u5c0f\u7b54\u6848\uff0c\u8fd9\u91cc\u7559\u7ed9\u8bfb\u8005\u81ea\u884c\u601d\u8003\u3002\n\n------------\n\n\u5f53 $N \\le2500$ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u52a0\u7b80\u5355\u7684\u65b9\u6cd5\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u65e2\u7136\u6bcf\u4e24\u70b9\u53ea\u6709\u4e00\u6761\u8fb9\u4e92\u901a\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ea\u6709\u4e00\u4e2a\u516c\u5171\u7956\u5148\u3002\u4ed6\u4eec\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u70b9\u5206\u522b\u5230\u516c\u5171\u7956\u5148\u7684\u8ddd\u79bb\u7684\u548c\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u70b9\u7684\u6570\u91cf\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u70b9\u7684\u6df1\u5ea6\u51cf\u53bb\u7956\u5148\u7684\u6df1\u5ea6\u3002\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528 $LCA$ \u6765\u5b9e\u73b0\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u70b9 $1$ \u5f00\u59cb\u8dd1\u4e00\u4e2a $dij$ \uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e24\u70b9\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u80fd\u591f\u52a0\u8fb9\u3002\n\n\u52a0\u5b8c\u8fb9\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206 $K$\uff0c\u5982\u679c\u5c0f E \u80fd\u591f\u8dd1\u5230 $L$ \u4e2a\u70b9\u4e0a\uff0c\u5e76\u4e14\u5230\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\u90fd\u6bd4\u72f1\u957f\u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a $K$ \u662f\u53ef\u5b9e\u73b0\u7684\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a $N^2logN$ \uff0c\u53ef\u4ee5\u8fc7 $N \\le 2500$ \u7684\u6570\u636e\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <fstream>\n#include <cstring>\n#include <math.h>\nusing namespace std;\nconst int MAXN = 5e3+5;\n#define pp pair<long long,long long>\n#define f first\n#define s second\nconst int BD = 14;\nint n,m,t,L,q,d,level[MAXN<<1],pa[MAXN<<1][BD];\ninline long long read() {\n  long long x=0,w=1;\n  char ch;\n  while(ch<'0'||ch>'9'){\n    if(ch=='-') w=-1;\n    ch=getchar();\n  }\n  while(ch>='0'&&ch<='9')\n  x=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n  return x*w;\n}\nbool inq[MAXN<<1];\nvector<pp> adj[MAXN<<1],adj2[MAXN<<1];\nlong long dist1[MAXN<<1],dist2[MAXN<<1],dist3[MAXN];\nint LCA(int u, int v) {\n\tif(level[u] < level[v]) swap(u,v);\n\tint diff = level[u] - level[v];\n\tfor(int i=0; i<BD; i++) if((diff>>i)&1 ) u = pa[u][i];\n\tif(u == v) return u;\n\tfor(int i=BD-1; i>=0; i--) if(pa[u][i] != pa[v][i]) {\n\t\tu = pa[u][i];\n\t\tv = pa[v][i];\n\t}\n\treturn pa[u][0];\n}//\u627eLCA\u7684\u677f\u5b50\nvoid set_up_lca(int nn){\n  for(int i = 1 ; i <= BD ; i++){\n    for(int j = 0; j < nn ; j++){\n      if(pa[j][i-1] != -1) pa[j][i] = pa[pa[j][i-1]][i-1] ;\n    }\n  }\n}//lca\u7684\u677f\u5b50\nvoid dfs(int pos, int lev, int prev){\n  pa[pos][0] = prev;\n  level[pos] = lev;\n  for (pp v : adj[pos]){\n    if (v.f==prev) continue;\n    dfs(v.f,lev+1,pos);\n  }\n}//\u628a\u6df1\u5ea6\u627e\u51fa\u6765\ninline void dij(int source, vector<pp> adja[MAXN], long long dist[MAXN]){\n  for (int i=0;i<=2*n;i++) dist[i] = 1e9;\n  queue<int> q;\n  dist[source] = t;\n  q.push(source);\n  while(!q.empty()){\n    long long qs = q.front(); q.pop();\n    inq[qs] = false;\n    for (pp v : adja[qs]){\n      if (dist[v.f]>dist[qs]+v.s){\n        dist[v.f]=dist[qs]+v.s;\n        if (!inq[v.f]) inq[v.f] = true,q.push(v.f);\n      }\n    }\n  }\n}//\u9884\u5904\u7406\u8ddd\u79bb\ninline void add_edge(){\n  for (int i=1;i<=n;i++){\n    for (int j=i+1;j<=n;j++){\n      if(i==j)continue;\n      int lca = LCA(i,j);\n      long long dis = dist2[i]+dist2[j]-2*dist2[lca];\n      if (dis<=d && level[i]+level[j]-2*level[lca]-1>=q){//\u5982\u679c\u4ed6\u4eec\u8ddd\u79bb\u5c0f\u4e8eD\u4e14\u4e4b\u95f4\u6709\u8d85\u8fc7Q\u4e2a\u70b9\n        adj2[i].push_back(make_pair(j+n,floor(dis/2)));\n        adj2[j].push_back(make_pair(i+n,floor(dis/2)));\n      }\n    }\n  }\n}\nbool seem[MAXN];\ninline int dijk(int source, long long num){\n  memset(dist1,0x3f3f3f,sizeof(dist1));\n  memset(seem,0,sizeof(seem));\n  queue<int> q;\n  int re = 0;\n  dist1[source] = 0;\n  q.push(source);\n  while(!q.empty()){\n    long long qs = q.front(); q.pop();\n    inq[qs] = false;\n    if (!seem[qs]) seem[qs] = true,re++;\n    for (pp v : adj[qs]){\n      if (v.s>num) continue;//\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u8ddd\u79bb\u7528K\u8db3\u591f\n      if (dist1[v.f]>dist1[qs]+v.s && dist1[qs]+v.s<=dist3[v.f]){//\u5982\u679c\n        dist1[v.f]=dist1[qs]+v.s;\n        if (!inq[v.f])inq[v.f] = true,q.push(v.f);\n      }\n    }\n  }\n  return re;\n}\ninline void bs(){\n  long long l = 0, r = 1e18;\n  while(l!=r-1){\n    long long mid = (l+r)/2;\n    if (dijk(1,mid)>=L) r = mid;\n    else l = mid;\n  }//\u4e8c\u5206\n  if (dijk(1,l)>=L) cout << l << endl << dijk(1,l);\n  else if (dijk(1,r)>=L) cout << r << endl << dijk(1,r);\n  else cout << \"no solution\";\n}\ninline void update_dis(){\n  for (int i=1;i<=n;i++) dist3[i] = min(dist2[i],dist2[i+n]);\n}\n\nint u,v,p,e;\nint main(){\n  n = read(); t= read(); d = read(); L = read();q = read();\n  for (int i=0;i<n-1;i++){\n    u = read(); v = read(); p = read(); e = read();\n    adj[u].push_back(make_pair(v,p));\n    adj[v].push_back(make_pair(u,p));\n    adj[u+n].push_back(make_pair(v+n,p));\n    adj[v+n].push_back(make_pair(u+n,p));\n    adj2[u].push_back(make_pair(v,e));\n    adj2[u+n].push_back(make_pair(v+n ,e));\n    adj2[v].push_back(make_pair(u,e));\n    adj2[v+n].push_back(make_pair(u+n ,e));//\u522b\u5fd8\u4e86\u53cc\u5411\u8fb9\u548c\u5206\u5c42\u56fe\u8fb9\u7684\u52a0\u6cd5\n  }\n  for (int i=1;i<(MAXN<<1);i++){\n    for (int j=0;j<BD;j++){\n      pa[i][j] = -1;\n    }\n  }\n  dfs(1,0,-1);\n  set_up_lca(n*2);//\u9884\u5904\u7406\u516c\u5171\u7956\u5148\n  dij(1,adj2,dist2);//\u9884\u5904\u7406\u8ddd\u79bb\n  add_edge();//\u52a0\u8fb9\n  dij(1,adj2,dist2);//\u518d\u9884\u5904\u7406\u8ddd\u79bb\n  update_dis();//\u66f4\u65b0\u8ddd\u79bb\n  bs();//\u4e8c\u5206\n}\n```\n\n\u53e6\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u601d\u7ef4\u65b9\u6cd5\u662f\u66b4\u529b\u679a\u4e3e\u8282\u70b9\u8fdb\u884c $dijkstra$ \uff0c\u8fd9\u91cc\u7559\u7ed9\u8bfb\u8005\u81ea\u884c\u601d\u8003\n\n\n------------\n\n\n\u5f53 $N\\le 7500$ \u7684\u65f6\u5019\uff0c$N^2logN$ \u4f1a\u76f4\u63a5\u88ab\u5361\u6389\u3002\n\n\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u66f4\u7b80\u4fbf\u7684\u65b9\u6cd5\u3002\n\n\u8fd9\u65f6\u5019\uff0c\u4e07\u80fd\u7684 $dfs$ \u5c31\u51fa\u6765\u4e86\u3002\n\n\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u8282\u70b9\uff0c\u987a\u7740\u8fb9\u5f80\u4e0b\u8d70\u3002\u5f53\u8ddd\u79bb\u8d85\u8fc7 $D$ \u65f6\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u5982\u679c\u4e2d\u95f4\u5c9b\u5c7f\u8d85\u8fc7 $Q$ \u5c31\u52a0\u8fb9\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include <math.h>\nusing namespace std;\n#define G() Cr=getchar()\n#define LL long long\nLL Xr,Fr;char Cr;\nint bian;\ninline LL rd(){\n\tXr=0,Fr=1;G();\n\twhile(Cr<'0'||Cr>'9'){if(Cr=='-')Fr=-1;G();}\n\twhile(Cr>='0'&&Cr<='9')Xr=(Xr<<1)+(Xr<<3)+Cr-'0',G();\n\treturn Xr*Fr;\n}\n#define MAX_N 15000\n#define MAX_M 10000000\n#define oo 9999999999999999\nint n, T, D, L, Q;\nLL dis[MAX_N], Dis[MAX_N];\nLL va[MAX_N], Va[MAX_M];\nint to[MAX_N], ne[MAX_N], he[MAX_N], cnt;\nint To[MAX_M], Ne[MAX_M], He[MAX_M], Cnt;\nint add_u[MAX_M], add_v[MAX_M], add_t;\nLL add_d[MAX_M];\nint a, b;\nLL c, d;\nbool vis[MAX_N];\nLL ans, Ans, Ma, num;\n\nvoid add(int u, int v){\n\tto[++cnt]=v;\n\tne[cnt]=he[u];\n\the[u]=cnt;\n\tva[cnt]=c;\n}\n\nvoid Add(int u, int v){\n\tTo[++Cnt]=v;\n\tNe[Cnt]=He[u];\n\tHe[u]=Cnt;\n\tVa[Cnt]=d;\n}\n\nvoid dfs_ae(int U, int u, LL dd, int t, int la){\n\tif(dd>D)return;\n\tif(t>=Q) add_u[++add_t]=U, add_v[add_t]=u, add_d[add_t]=floor(dd/2);\n\tfor(int i=He[u];i;i=Ne[i]) if(To[i]!=la && To[i]<=n) dfs_ae(U,To[i],dd+Va[i],t+1,u);\n}//\u9884\u5904\u7406\n\nvoid Dijk(int U){\n\tpriority_queue< pair<int,int> >q;\n\tq.push(make_pair(0,U));\n\tfor(int i=1;i<=2*n;i++) Dis[i]=oo;\n\tDis[U]=0;\n\twhile(!q.empty()){\n\t\tint u=q.top().second;\n\t\tif (-q.top().first>Dis[u]) {q.pop(); continue;}\n\t\tq.pop();\n\t\tvis[u]=1;\n\t\tfor(int i=He[u];i;i=Ne[i]){\n\t\t\tint v=To[i];\n\t\t\tif(vis[v])continue;\n\t\t\tif(Dis[v]>Dis[u]+Va[i]){//\u8ddf\u4e4b\u524d\u540c\u6837\u7684\u64cd\u4f5c\n\t\t\t\tDis[v]=Dis[u]+Va[i];\n\t\t\t\tq.push(make_pair(-Dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nbool seem[MAX_N];\nvoid dijk(int t){\n\tmemset(seem,0,sizeof(seem));\n\tpriority_queue< pair<int,int> >q;\n\tq.push(make_pair(0,1));\n\tfor(int i=1;i<=n;i++) dis[i]=oo, vis[i]=0;\n\tdis[1]=0;\n\twhile(!q.empty()){\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tnum++;\n\t\tseem[u] = true;\n\t\tfor(int i=he[u];i;i=ne[i]){\n\t\t\tint v=to[i];\n\t\t\tif(seem[v])continue;\n\t\t\tif(dis[v]>dis[u]+va[i] && dis[u]+va[i]<=T+Dis[v] && va[i]<=t){\n\t\t\t\tdis[v]=dis[u]+va[i];\n\t\t\t\tq.push(make_pair(-dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\n\nbool check(int t){\n\tnum=0;\n\tdijk(t);\n\tif(num>=L){\n\t\tAns=num;\n\t\treturn 1;\n\t}\n\telse return 0;\n}//\u67d0\u6570\u5b57\u662f\u5426\u80fd\u5b9e\u73b0\n\nint main(){\n\tcin>>n>>T>>D>>L>>Q;\n\tfor(int i=1;i<n;i++){\n\t\ta=rd(), b=rd(), c=rd(), d=rd();\n\t\tMa=max(Ma,c);\n\t\tif(c) add(a,b), add(b,a);\n\t\tif(d) Add(a,b), Add(b,a), Add(a+n,b+n), Add(b+n,a+n);\n\t}\n\tfor(int i=1;i<=n;i++) dfs_ae(i,i,0,-1,0);//\u9884\u5904\u7406\u72f1\u957f\u8ddd\u79bb\n\tfor(int i=1;i<=add_t;i++) {\n\t\td=add_d[i], Add(add_u[i],add_v[i]+n);}//\u52a0\u8fb9\n\tDijk(1);//\u4e8c\u6b21\u5904\u7406\n\tfor(int i=1;i<=n;i++)Dis[i]=min(Dis[i],Dis[i+n]);//\u66f4\u65b0\u8ddd\u79bb\n\tans=2147483647;\n\tint l=0, r=Ma;\n\twhile(l<=r){\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) ans=mid, r=mid-1;\n\t\telse l=mid+1;\n\t}//\u4e8c\u5206\u5957\u8def\n\tif(ans==2147483647)puts(\"no solution\");\n\telse cout<<ans<<endl<<Ans;\n}\n```\n\n\u6b63\u89e3\u5176\u5b9e\u5e76\u4e0d\u6bd475\u5206\u505a\u6cd5\u96be\u60f3\u3002\u7136\u800c\uff0c\u8fd9\u9898\u6709\u4e00\u4e2a\u7384\u5b66\u7684\u5730\u65b9\uff1a\n\n```cpp\nvoid dfs_ae(int U, int u, LL dd, int t, int la){\n\tif(dd>D)return;\n\tif(t>=Q) add_u[++add_t]=U, add_v[add_t]=u, add_d[add_t]=floor(dd/2);//\u8fd9\u884c\n\tfor(int i=He[u];i;i=Ne[i]) if(To[i]!=la && To[i]<=n) dfs_ae(U,To[i],dd+Va[i],t+1,u);\n}\n```\n\n\u770b\u8d77\u6765\u786e\u5b9e\u50cf\u662f\u591a\u6b64\u4e00\u4e3e\u3002\u8c8c\u4f3c\u8fd8\u591a\u5f00\u4e86\u4e00\u4e2a\u6570\u7ec4\u3002\n\n\u7136\u800c\uff0c\u5982\u679c\u5c06\u8fd9\u91cc\u6539\u6210\u8fd9\u6837:\n\n```cpp\nvoid dfs_ae(int U, int u, LL dd, int t, int la){\n\tif(dd>D)return;\n\td = floor(dd/2);\n\tAdd(U,u);\n\t// if(t>=Q) add_u[++add_t]=U, add_v[add_t]=u, add_d[add_t]=floor(dd/2);\n\tfor(int i=He[u];i;i=Ne[i]) if(To[i]!=la && To[i]<=n) dfs_ae(U,To[i],dd+Va[i],t+1,u);\n}\n```\n\n\u5c31\u4f1a\u60ca\u5947\u7684\u53d1\u73b0\u83b7\u5f97\u4e8670\u5206\u7684\u6210\u7ee9\u3002\u867d\u7136\u603b\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u4f46\u662f\u5982\u6b64\u5efa\u8fb9\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u6bcf\u6b21 dfs \u8fb9\u52a0\u8fb9\uff0c\u4f1a\u5bfc\u81f4\u6240\u6709\u8fb9\u90fd\u88ab\u679a\u4e3e\u4e86\u4e00\u6b21\uff0c\u6700\u540e\u590d\u6742\u5ea6\u53ef\u80fd\u53d8\u4e3a $O(N(N+M))$ \uff0c $M$ \u4e3a\u52a0\u8fb9\u6761\u6570\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u7206\u70b8\u3002\n\n\u8fd9\u79cd\u89e3\u6cd5\u590d\u6742\u5ea6\u4e3a $N^2$\uff0c\u80fd\u591f\u5728\u89c4\u5b9a\u65f6\u95f4\u8dd1\u5b8c\u3002\n\n------------\n\n\n\u53e6\u4e00\u79cd\u8f83\u4e3a\u590d\u6742\u7684\u65b9\u6cd5\u4e3a $LCA$ $+$ $tarjan$ \u3002\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4ece\u6811\u7684\u9876\u7aef\u5f80\u4e0b\u8dd1\uff0c\u90a3\u4e48\u5f53\u67d0\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u68f5\u6811\u5185\uff0c\u4ed6\u4eec\u7684\u7956\u5148\u7684\u7956\u5148\u5bf9\u4ed6\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002\u540c\u7406\uff0c\u5982\u679c\u4ece\u4e0b\u5f80\u4e0a\u8dd1\uff0c\u90a3\u4e48\u5b50\u6811\u5bf9\u4e8e\u7236\u8282\u70b9\u4e5f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002\u4e8e\u662f\uff0c\u5f53\u6211\u4eec\u5904\u7406\u5b8c\u5b50\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5408\u5e76\u5b50\u6811\u7684\u7956\u5148\u3002\uff08~~\u5176\u5b9e\u53ea\u80fd\u8bf4\u7c7b\u4f3ctarjan~~\uff09\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <fstream>\n#include <cstring>\n#include <math.h>\nusing namespace std;\nconst int MAXN = 7e3+505;\n#define pp pair<long long,long long>\n#define f first\n#define s second\nconst int BD = 12;\nconst int MAXB = 10000000;\nint n,m,t,L,q,ed,d,level[MAXN<<1];\ninline long long read() {\n\tlong long x=0,w=1;\n\tchar ch;\n\twhile(ch<'0'||ch>'9'){\n\t\tif(ch=='-') w=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9')\n\tx=(x<<3)+(x<<1)+ch-'0',ch=getchar();\n\treturn x*w;\n}\nstruct Edge{\n  int t,d,nxt;\n}edge[MAXB],edge2[MAXB];\nint head[MAXN],head2[MAXN<<1],tot,tot2;\ninline void add(int from, int to, int dis){\n  edge[++tot].t = to;\n  edge[tot].d = dis;\n  edge[tot].nxt = head[from];\n  head[from] = tot;\n}\ninline void add2(int from, int to, int dis){\n  edge2[++tot2].t = to;\n  edge2[tot2].d = dis;\n  edge2[tot2].nxt = head2[from];\n  head2[from] = tot2;\n}\nbool inq[MAXN<<1];\nlong long dist1[MAXN],dist2[MAXN<<1],dist3[MAXN];\nvoid dfs(int pos, int lev, int prev){\n\tlevel[pos] = lev;\n\tfor(int i = head[pos];i;i=edge[i].nxt){\n    int to =edge[i].t;\n\t\tif (to==prev) continue;\n\t\tdfs(to,lev+1,pos);\n\t}//\u540c\u6837\u5199lca\u7684\u914d\u65b9\n}\ninline void dij(int source){\n  fill(dist2+1,dist2+1+2*n,1e18);\n\tqueue<int> q;\n\tdist2[source] = t;\n\tq.push(source);\n\twhile(!q.empty()){\n\t\tlong long qs = q.front(); q.pop();\n\t\tinq[qs] = false;\n    for (int i=head2[qs];i;i=edge2[i].nxt){\n      int to = edge2[i].t,d = edge2[i].d;\n      if (dist2[to]>dist2[qs]+d){\n        dist2[to]=dist2[qs]+d;\n        if (!inq[to])inq[to] = true,q.push(to);\n      }\n    }\n\t}\n}//\u8fd8\u662f\u540c\u6837\u7684\u65b9\u6cd5\nint father[MAXN];\nint LCA(int x){\n\treturn father[x]^x?father[x]=LCA(father[x]):x;\n}//lca\u7684\u65b9\u6cd5\nint bian = 0;\nbool visit[MAXN];\ninline void add_edge(int i,int fa){\n\tfather[i]=i;\n\tfor(int j=head2[i];j;j=edge2[j].nxt){\n    int to = edge2[j].t;\n\t\tif(to^fa && !visit[to]){\n\t\t\tadd_edge(to,i);\n\t\t\tfather[to]=i;\n\t\t}//\u5148\u5efa\u5b50\u6811,\u7136\u540e\u5408\u5e76\n\t}\n\tvisit[i]=true;\n\tfor (int j=1;j<=n;j++){\n\t\tif(i==j || !visit[j])continue;\n\t\tint lca = LCA(j);\n\t\tlong long dis = dist2[i]+dist2[j]-(dist2[lca]<<1);\n\t\tif (dis<=d && level[i]+level[j]-(level[lca]<<1)-1>=q){\n\t\t\tbian+=2;\n      add2(i,j+n,dis/2);\n      add2(j,i+n,dis/2);\n\t\t}\n\t}//\u5efa\u8fb9\n}\nbool seem[MAXN];\ninline int dijk(int source, long long num){\n\tmemset(dist1,0x3f3f3f,sizeof(dist1));\n\tmemset(seem,0,sizeof(seem));\n\tqueue<int> q;\n\tint re = 0;\n\tdist1[source] = 0;\n\tq.push(source);\n\twhile(!q.empty()){\n\t\tlong long qs = q.front(); q.pop();\n\t\tinq[qs] = false;\n\t\tif (!seem[qs]) seem[qs] = true,re++;\n\t\tfor(int i = head[qs];i;i=edge[i].nxt){\n      int to = edge[i].t,d = edge[i].d;\n\t\t\tif (d>num) continue;\n\t\t\tif (dist1[to]>dist1[qs]+d && dist1[qs]+d<=dist3[to]){\n\t\t\t\tdist1[to]=dist1[qs]+d;\n\t\t\t\tif (!inq[to])inq[to] = true,q.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn re;\n}//\u4e8c\u5206dij\ninline void bs(){\n\tlong long l = 0, r = 1e18;\n\twhile(l!=r-1){\n\t\tlong long mid = (l+r)/2;\n\t\tif (dijk(1,mid)>=L) r = mid;\n\t\telse l = mid;\n\t}\n\tif (dijk(1,l)>=L) cout << l << endl << dijk(1,l);\n\telse if (dijk(1,r)>=L) cout << r << endl << dijk(1,r);\n\telse cout << \"no solution\";\n}//\u4e8c\u5206\ninline void update_dis(){\n\tfor (int i=1;i<=n;i++) dist3[i] = min(dist2[i],dist2[i+n]);\n}//\u66f4\u65b0\nint u,v,p,e;\nint main(){\n\tn = read(); t= read(); d = read(); L = read();q = read();\n\ted = n;\n\tfor (int i=0;i<n-1;i++){\n\t\tu = read(); v = read(); p = read(); e = read();\n    add(u,v,p);\n    add(v,u,p);\n    add2(u,v,e);\n    add2(v,u,e);\n    add2(u+n,v+n,e);\n    add2(v+n,u+n,e);\n\t}\n\tdfs(1,0,-1);\n\tdij(1);\n\tadd_edge(1,-1);\n\tdij(1);\n\tupdate_dis();\n\tbs();//\u8fd9\u91cc\u65b9\u6cd5\u57fa\u672c\u4e0e\u4e0a\u9762\u4e00\u6837\n}\n```\n\n------------\n\n\u90e8\u5206\u5206\u65b9\u6cd5\uff1a\n\n\u5bf9\u4e8e $Q=0$ \u7684\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4e24\u4e24\u5224\u65ad\u65f6\u95f4\u662f\u5426\u8d85\u8d8a $D$\uff0c\u5e76\u4e0d\u9700\u8981\u5224\u65ad\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u671f\u671b\u5f97\u5206 $35$\uff0c\u5b9e\u9645\u5f97\u5206 $45$\u3002\n\n\u5bf9\u4e8e\u4e0d\u52a0\u8fb9\u7684\u505a\u6cd5\uff0c~~\u6211\u4eec\u5c31\u4e0d\u52a0\u8fb9~~\uff0c\u4e0d\u4f7f\u7528\u5206\u5c42\u56fe\uff0c\u9884\u8ba1\u5f97\u5206 $20$\uff0c\u5b9e\u9645\u5f97\u5206 $20$\u3002\n\n------------\n\n\n\u5bf9\u4e8e\u5927\u5e38\u6570\u9009\u624b\uff08\u6bd4\u5982\u6211\uff09\uff0c\u6211\u4eec\u7ed9\u4e0e\u4e86\u8db3\u591f\u5927\u7684\u7a7a\u95f4\u548c\u65f6\u95f4\uff08 $2$ \u500d\u7a7a\u95f4\u65f6\u95f4\uff09\u3002\u4f46\u7531\u4e8e\u8981\u5361 $75$ \u5206\u505a\u6cd5\uff0c\u5982\u679c\u6b63\u89e3\u5e38\u6570\u5de8\u5927\u7684\u8bdd\u65e0\u6cd5\u6ee1\u5206\u3002",
        "postTime": 1586368644,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "[Round1 \u5f00\u5b66\u4fe1\u5fc3\u8d5b] \u8d8a\u72f1"
    },
    {
        "content": "\u9996\u5148\u601d\u8def\u662f\u6309\u7167\u51fa\u9898\u4eba\u7684\u9898\u89e3\u601d\u8def\u3002\n\n\u5bf9\u4e8e\u5c0fE\uff0c\u6211\u4eec\u6309\u7167\u9898\u76ee\u7ed9\u7684\u8fdb\u884c\u5efa\u56fe\u3002\n\n\u5bf9\u4e8e\u76d1\u72f1\u957f\u5efa\u4e00\u4e2a\u56fe\uff0c\u7136\u540e\u5bf9\u4e8e\u989d\u5916\u822a\u7ebf\uff0c\u6211\u4eec\u4f7f\u7528\u5206\u5c42\u56fe\u3002\u4e00\u5c42\u662f\u6ca1\u6709\u4f7f\u7528\u8fc7\u989d\u5916\u822a\u7ebf\uff0c\u4e00\u5c42\u662f\u4f7f\u7528\u8fc7\u989d\u5916\u822a\u7ebf\u3002\u4e24\u5c42\u4e4b\u95f4\u4f7f\u7528\u989d\u5916\u822a\u7ebf\u8fdb\u884c\u8fde\u63a5\u3002\n\n\u7136\u540e\u6bcf\u6b21\u8fdb\u884c\u4e8c\u5206\uff0c\u4e8c\u5206\u80cc\u5305\u7684\u5bb9\u91cf\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\u3002\u7136\u540e\u5728\u8fd9\u4e2a\u9650\u5236\u4e0b\uff0c\u8fdb\u884c\u6700\u77ed\u8def\uff0c\u8fd9\u4e2a\u6700\u77ed\u8def\u7684dist\u8981\u5c0f\u4e8e\u7b49\u4e8e\u76d1\u72f1\u957f\u7684dist(\u5c31\u662f\u5c0fE\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u65f6\u95f4\u5c0f\u4e8e\u76d1\u72f1\u957f\u5230\u8fbe\u8fd9\u4e2a\u70b9\u7684\u65f6\u95f4)\uff0c\u624d\u53ef\u4ee5\u66f4\u65b0\u3002\n\n\u7136\u540e\u6bcf\u6b21\u8fd4\u56de\u5bb9\u91cf\u662f\u4e00\u4e2a\u503c\u7684\u60c5\u51b5\u4e0b\u5c0fE\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u7684\u6570\u91cf\uff0c\u5176\u5b9e\u5c31\u662f`dijkstra`\u7b97\u6cd5\u4e2d\u591a\u5c11\u4e2a\u70b9\u7684`st`\u88ab\u8bbe\u7f6e\u4e3a`true`\u3002\n\n\u7136\u540e\u91cd\u70b9\u5c31\u662f\u8fdb\u884c\u5efa\u8fb9\u3002\n\n1. \u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u8fdb\u884c\u679a\u4e3e\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u6c42\u89e3`lca`\uff0c\u7136\u540e\u5bf9\u4e8e\u6ee1\u8db3\u8981\u6c42\u7684\u70b9\u5bf9\u8fdb\u884c\u5efa\u8fb9\uff0c\u8fd9\u91cc\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2log(n))$ \u3002[\u63d0\u4ea4\u8bb0\u5f5565\u5206](https://www.luogu.com.cn/record/92554784)\n2. \u53ef\u4ee5\u4f7f\u7528dfs\uff0c\u4ece\u6bcf\u4e2a\u70b9\u5f00\u59cb\u8fdb\u884cdfs\uff0c\u7136\u540e\u627e\u5230\u5176\u4e2d\u4e00\u4e2a\u70b9\u4e3a\u5f53\u524d\u70b9\u65f6\u7684\u989d\u5916\u822a\u7ebf\uff0c\u8fdb\u884c\u7edf\u4e00\u52a0\u8fb9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \u3002[\u63d0\u4ea4\u8bb0\u5f5585\u5206](https://www.luogu.com.cn/record/92555111)\n3. \u7531\u4e8e\u6211\u5199\u7684\u4ee3\u7801\u5e38\u6570\u5de8\u5927\uff0c\u51fa\u9898\u4eba\u63d0\u5230\u76842\uff0cdfs\u5efa\u8fb9\u7684\u65b9\u5f0f\u53ea\u5f97\u5230\u4e8685\u5206\uff0c\u7136\u540e\u6211\u8003\u8651\u5230\u53ef\u4ee5\u4f7f\u7528dsu on tree \u6765\u8fdb\u884c\u7edf\u8ba1\u6709\u90a3\u4e9b\u8fb9,\u7136\u540e\u5c31\u901a\u8fc7\u4e86\u3002[\u63d0\u4ea4\u8bb0\u5f55100](https://www.luogu.com.cn/record/92560015)\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <set>\n\nusing namespace std ;\n\nusing ll = long long ;\nusing pii = pair<ll,ll> ;\n\nconst int N = 4e5 + 100,M = 6 * N,ZZ = 6e6 + 10 ;\nconst int INF = 0x3f3f3f3f ;\n\nint n,zzz,ddt,qt ;\nint h1[N],h2[N],e[M+ZZ],ne[M+ZZ],idx ;\nstruct Node{\n    int a,b ;\n    ll c ;\n}eg[ZZ] ;\nll dist1[N],dist2[N],w[M+ZZ] ;\nint dfn[N],son[N],sz[N],dui[N],time_stamp ;\nll dist[N],dep[N] ;\nset<pii> ss ;\nbool st[N] ;\n\nvoid add(int h[],int a,int b,ll c){\n    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx ++ ;\n}\n\n\n// \u5bf9\u56fe2\u8fdb\u884c\u7b2c\u4e00\u6b21dfs\uff0c\u5904\u7406\u51fadfn\uff0c\u548cdist\uff0cdep\uff0csz\uff0c\u548c\u91cd\u513f\u5b50 son\nvoid dfs(int u,int fa,int depth,ll distance){\n    dfn[u] = ++ time_stamp,dui[time_stamp] = u ;\n    sz[u] = 1 ;\n    dist[u] = distance,dep[u] = depth ;\n    for(int i = h2[u] ; ~ i ; i = ne[i]){\n        int j = e[i] ;\n        if(j == fa) continue ;\n        dfs(j,u,depth+1,distance+w[i]) ;\n        sz[u] += sz[j] ;\n        if(sz[son[u]] < sz[j]) son[u] = j ;\n    }\n}\n\n// \u8fdb\u884cdsu on tree\nvoid dfs2(int u,int fa,int tag){  // tag\u4ee3\u8868\u5f53\u524d\u662f\u5426\u6e05\u7a7a\n    for(int i = h2[u] ; ~ i ; i = ne[i]){\n        int j = e[i] ;\n        if(j == fa || j == son[u]) continue ;\n        dfs2(j,u,1) ; // \u8fdb\u884c\u5904\u7406\u6240\u6709\u8f7b\u513f\u5b50\uff0c\u4ece\u8f7b\u513f\u5b50\u56de\u6765\u8981\u6e05\u7a7a\n    }\n\n    if(son[u]) dfs2(son[u],u,0) ; // \u8fdb\u884c\u53d8\u91cf\u91cd\u513f\u5b50\n\n    // \u8fdb\u884c\u66b4\u529b\u6dfb\u52a0\u6240\u6709\u7684\u8f7b\u513f\u5b50\n    for(int i = h2[u] ; ~ i ; i = ne[i]){\n        int j = e[i] ;\n        if(j == fa || j == son[u]) continue ;\n\n        // \u53d8\u91cf\u8f7b\u513f\u5b50j\n        for(int x = dfn[j] ; x <= dfn[j] + sz[j] - 1 ; x ++){\n            int id = dui[x] ;\n            // \u8fdb\u884c\u52a0\u8fb9\u7684\u64cd\u4f5c\n            ll totdis = dist[id] - 2 * dist[u] ;\n\n            for(pii t : ss){\n                if(t.first + totdis > ddt) break ;  // \u5f53\u8d85\u8fc7\u6700\u5927\u65f6\u95f4\u5c31\u76f4\u63a5break\n                if(dep[t.second] + dep[id] - 2 * dep[u] - 1 >= qt) eg[++zzz] = {t.second,id,(t.first+totdis)/2} ;\n            }\n        }\n\n        // \u5411set\u4e2d\u6dfb\u52a0\u5143\u7d20\n        for(int x = dfn[j] ; x <= dfn[j] + sz[j] - 1 ;x ++){\n            int id = dui[x] ;\n            ss.insert({dist[id],id}) ;\n        }\n    }\n\n    // \u8fdb\u884c\u7edf\u8ba1 u \u4e0e u\u5b50\u6811\u4e2d\u6ee1\u8db3\u7684\u70b9\u5bf9\n    for(pii t : ss){\n        if(t.first - dist[u] > ddt) break ;\n        if(dep[t.second] - dep[u] - 1 >= qt) eg[++zzz] = {u,t.second,(t.first-dist[u])/2} ;\n    }\n\n    // \u5411set\u4e2d\u6dfb\u52a0\u5143\u7d20\n    ss.insert({dist[u],u}) ;\n\n    if(tag){\n        ss.clear() ;\n    }\n}\n\n// \u8fdb\u884c\u6c42\u89e3\u6700\u77ed\u8def\n// len\u4ee3\u8868\u8282\u70b9\u4e2a\u6570\n// h\u4ee3\u8868\u4f7f\u7528\u90a3\u4e2a\u56fe\uff0c\u56e0\u4e3a\u662f\u94fe\u5f0f\u524d\u5411\u661f\u8fdb\u884c\u5efa\u56fe\n// dist\u4ee3\u8868\u6c42\u89e3\u653e\u5230\u90a3\u4e2a\u6570\u7ec4\u4e2d\n// sta\u4ee3\u8868\u521d\u59cb\u503c\uff0c\u5bf9\u4e8e\u76d1\u72f1\u957f\u662f\u6709\u521d\u59cb\u503c\uff08\u53d1\u73b0\u65f6\u95f4\uff09\uff0c\u5bf9\u4e8e\u9003\u72af\u521d\u59cb\u503c\u662f0\n// tag \u4ee3\u8868\u6700\u77ed\u8def\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u56e0\u4e3a\u9003\u72af\u5728\u6c42\u6700\u77ed\u8def\u7684\u65f6\u5019\u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\u8981\u5c0f\u4e8e\u7b49\u4e8elim\n// \u5e76\u4e14\u8fd8\u8981\u65f6\u95f4\u5c0f\u4e8e\u76d1\u72f1\u957f\u7684\u6700\u77ed\u65f6\u95f4\nint dijkstra(int len,int h[],ll dist[],int sta,int tag,int lim){\n    fill(dist,dist+len+1,INF) ;\n    fill(st,st+len+1,0) ;\n    dist[1] = sta ;\n    priority_queue<pii,vector<pii>,greater<pii>> q ;\n    q.push({sta,1}) ;\n\n    while(q.size()){\n        pii t = q.top() ;\n        q.pop() ;\n        ll ver = t.second,distance = t.first ;\n        \n        if(st[ver]) continue ;\n        st[ver] = 1 ;\n\n        for(int i = h[ver] ; ~ i ; i = ne[i]){\n            int j = e[i] ; \n            if(tag){\n                if(w[i] > lim) continue ;\n                if(dist[j] > distance + w[i] && distance + w[i] <= dist2[j]){\n                    dist[j] = distance + w[i] ;\n                    q.push({dist[j],j}) ;\n                }\n            }\n            else {\n                if(dist[j] > distance + w[i]){\n                    dist[j] = distance + w[i] ;\n                    q.push({dist[j],j}) ;\n                }\n            }\n        }\n    }\n\n    int ct = 0 ;\n    for(int i = 1 ; i <= len ; i ++)  ct += st[i] ;\n    return ct ;\n}\n\nint main(){\n    int t,target ;\n    scanf(\"%d%d%d%d%d\",&n,&t,&ddt,&target,&qt) ;\n    memset(h1,-1,sizeof h1) ;\n    memset(h2,-1,sizeof h2) ;\n    int mx = 0 ;\n    for(int i = 1 ; i <= n - 1 ; i ++){\n        int a,b,c,d ;\n        scanf(\"%d%d%d%d\",&a,&b,&c,&d) ;\n\n        // \u8fd9\u91cc\u8fdb\u884c\u5efa\u8fb9\uff0c\u5efa\u4e2a\u5206\u5c42\u56fe\n        // \u5bf9\u4e8e\u5206\u5c42\u56fe\u6765\u8bf4\uff0ch1 \u662fp\u7684\u8fb9\uff0ch2\u91cc\u9762\u5b58\u50a8pf\u7684\u8fb9\n        add(h1,a,b,c),add(h1,b,a,c) ;\n        mx = max(mx,c) ;\n        add(h2,a,b,d),add(h2,b,a,d) ;\n        add(h2,a+n,b+n,d),add(h2,b+n,a+n,d) ;\n    }\n    // \u5bf9\u7b2c\u7b2c\u4e8c\u4e2a\u8fdb\u884c\u5904\u7406,\u5904\u7406\u51fa\u6240\u6709\u7684\u52a0\u8fb9\n    \n    // \u8fd9\u91cc\u4f7f\u7528set\u8fdb\u884c\u5b58\u8fb9\uff0c\u7136\u540e\u4f7f\u7528\u7c7b\u4f3c\u4e8edsu on tree \u7684\u65b9\u5f0f\u8fdb\u884c\u8fd0\u7b97\n    dfs(1,0,0,0) ;\n    dfs2(1,-1,0) ;\n    // \u8fdb\u884c\u52a0\u8fb9\n    for(int i = 1 ; i <= zzz ; i ++)\n        add(h2,eg[i].a,eg[i].b+n,eg[i].c),add(h2,eg[i].b,eg[i].a+n,eg[i].c) ;\n    // \u5904\u7406\u51fa\u76d1\u72f1\u957f\u7684\u6700\u77ed\u8def\n    dijkstra(2 * n,h2,dist2,t,0,0) ;\n    for(int i = 1 ; i <= n ;i ++) dist2[i] = min(dist2[i],dist2[i+n]) ;\n    \n    // \u8fdb\u884c\u4e8c\u5206\n    int l = 0,r = mx ;\n    while(l < r){\n        int mid = l + r >> 1 ;\n        if(dijkstra(n,h1,dist1,0,1,mid) >= target) r = mid ;\n        else l = mid + 1 ;\n    }\n\n    if(dijkstra(n,h1,dist1,0,1,l) >= target) printf(\"%d\\n%d\\n\",l,dijkstra(n,h1,dist1,0,1,l)) ;\n    else puts(\"no solution\") ;\n    return 0 ;\n}\n```",
        "postTime": 1667382206,
        "uid": 446986,
        "name": "verden",
        "ccfLevel": 0,
        "title": "P6436 \u300cEZEC-1\u300d\u8d8a\u72f1 \u9898\u89e3 dsu on tree + \u6700\u77ed\u8def"
    }
]