[
    {
        "content": "\u4e0d\u5f97\u4e0d\u8bf4bitset\u5957\u83ab\u961f\u8fd8\u662f\u76f8\u5f53\u5957\u8def\u7684\u2026\u2026\n\n\u4e0d\u8fc7\u8fd9\u9053\u9898\u653e\u5230ynoi\u91cc\u5c31\u663e\u5f97\u76f8\u5f53\u4eb2\u6c11\u4e86\u2026\u2026(45\u884c\u7684ynoi\u9898\u554a!)\n_________________________________\n\n\u9996\u5148\u8fd9\u9053\u9898\u7684\u8be2\u95ee\u770b\u6837\u5b50\u57fa\u672c\u6ca1\u6cd5\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u2026\u2026\n\n\u56e0\u4e3a\u4f60\u76f8\u5f53\u4e8e\u8bf4\u8981\u7ef4\u62a4\u4e0d\u540c\u533a\u95f4\u6743\u503c\u6570\u7ec4\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u4e1c\u897f\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u663e\u7136\u662f\u6ca1\u6cd5\u505a\u7684\n\n\u90a3\u4e48\u667a\u5546\u4e0d\u591f\u538b\u4f4d\u6765\u51d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528bitset\u4e71\u641e\u4e00\u6ce2\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u7684\u53d1\u73b0\u4e00\u4e2a\u8be2\u95ee$(l_{1},r_{1},l_{2},r_{2},l_{3},r_{3})$\u7684\u7b54\u6848\u662f\n\n$$(r_{1}-l_{1}+1)+(r_{2}-l_{2}+1)+(r_{3}-l_{3}+1)-3\u00d7size$$\n\n\u5176\u4e2d$size$\u8868\u793a\u8fd93\u4e2a\u533a\u95f4\u91cc\u9762\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u516c\u5171\u7684\u989c\u8272\n\n\u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2abitset\u6765\u6807\u8bb0\u8fd9\u4e2a\u533a\u95f4\u91cc\u51fa\u73b0\u8fc7\u4ec0\u4e48\u989c\u8272\u7684\u8bdd\uff0c\u6211\u4eec\u6700\u591a\u77e5\u9053\u8fd9\u4e2a3\u4e2a\u533a\u95f4\u51fa\u73b0\u4e86**\u591a\u5c11\u79cd\u516c\u5171\u7684\u989c\u8272**\uff0c\u800c\u4e0d\u662f\u51fa\u73b0\u4e86**\u591a\u5c11\u4e2a\u516c\u5171\u7684\u989c\u8272**\n\n\u6b64\u65f6\u60c5\u51b5\u5f00\u59cb\u53d8\u5f97\u8fa3\u624b\u8d77\u6765\u2026\u2026\n\n\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u6211\u4eec\u4f1a\u53d1\u73b0,\u95ee\u9898\u7684\u74f6\u9888\u5728\u4e8e\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u6c42\u516c\u5171\u989c\u8272\u4e2a\u6570\uff0c\u76f8\u5f53\u4e8e\u6bcf\u79cd\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u53d6\u4e00\u4e2amin\uff0c\u53ef\u662fbitset\u5374\u53ea\u662f\u652f\u6301\u96c6\u5408\u53d6\u4ea4\u96c6\n\n\u4f46\u662f\u6211\u4eec\u53c8\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\u662f\u6240\u6709\u989c\u8272\u7684\u51fa\u73b0\u6b21\u6570\u4e4b\u548c=\u533a\u95f4\u957f\u5ea6\n\n\u6240\u4ee5\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u5b58\u50a8\u4e00\u4e2a\u533a\u95f4\n\n\u9996\u5148\u6211\u4eec\u5728\u7ed9\u6570\u5b57\u79bb\u6563\u5316\u7684\u65f6\u5019\u505a\u4e0b\u624b\u811a\n\n\u6211\u4eec\u4ee4\u8fd9\u4e2a\u6570\u5b57\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c=\u8fd9\u4e2a\u5e8f\u5217\u91cc\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u6570\u5b57\u4e2a\u6570\n\n(\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u7528map\u6c42\u51fa\u6bcf\u79cd\u503c\u7684\u51fa\u73b0\u6b21\u6570\u505a\u4e00\u904d\u524d\u7f00\u548c\u5c31\u884c)\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u7528\u4e00\u4e2abitset\u5b58\u50a8\u4e00\u4e2a\u533a\u95f4\u4e86\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u5411\u8fd9\u4e2a\u533a\u95f4\u91cc\u52a0\u4e00\u4e2a\u989c\u8272p\n\n\u4e00\u822c\u7684\u505a\u6cd5\u662f\u4ee4bitset\u7684p\u8fd9\u4e00\u4f4d\u4e3a1\n\n\u4f46\u662f\u6211\u4eec\u73b0\u5728\u4e0d\u8fd9\u6837\u4e86\uff0c\u5047\u5982\u8bf4\u8fd9\u4e2a\u533a\u95f4\u91ccp\u8fd9\u4e2a\u503c\u5df2\u7ecf\u51fa\u73b0$cnt_{p}$\u6b21\u4e86\n\n\u6211\u4eec\u5c31\u4ee4bitset\u91cc\u9762$(p-cnt_{p})$\u8fd9\u4e00\u4f4d\u4e3a1\n\n\u56e0\u4e3a\u8fd9\u4e2a\u6570\u5b57\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\u662f\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u6570\u5b57\u4e2a\u6570\n\n\u6362\u53e5\u8bdd\u8bf4\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u76f8\u90bb\u4e24\u4e2a\u503cp1,p2\u7684\u503c\u7684\u5dee\uff0c\u521a\u597d\u662fp1\u7684\u51fa\u73b0\u6b21\u6570\n\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u8fd9\u6837\u5b58\u50a8\u989c\u8272\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u5c06\u4e00\u4e2a\u989c\u8272\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u989c\u8272\u5730\u65b9\u53bb\n\n\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u5b58\u50a8\u5143\u7d20\u6709\u4e00\u4e2a\u597d\u5904\u662f\n\n\u6211\u4eec\u73b0\u5728\u80fd\u7b97\u4e24\u4e2a\u533a\u95f4\u6216\u8005\u591a\u4e2a\u533a\u95f4\u4e4b\u95f4\u6709\u591a\u5c11\u4e2a\u516c\u5171\u7684\u989c\u8272\u4e86\n\n\u53ea\u8981\u628a\u8fd9\u51e0\u4e2a\u533a\u95f4\u53d6\u4e00\u4e0b\u4ea4\u96c6\u7136\u540e\u770b\u4ea4\u96c6\u7684size\u5c31\u884c\u4e86\n\n\u4e3a\u4ec0\u4e48\u6b64\u65f6\u53d6\u4ea4\u96c6\u5c31\u53ef\u4ee5\u8d77\u5230\u53d6min\u7684\u6548\u679c\u5462\u2026\u2026\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u63d2\u5165\u989c\u8272\u7684\u65b9\u5f0f\u51b3\u5b9a\u4e86\u5047\u5982\u67d0\u4e2a\u989c\u8272p\u5728\u533a\u95f4\u5185\u51fa\u73b0\u4e86$cnt_{p}$\u6b21\u7684\u8bdd\n\n\u90a3\u4e48bitset\u91cc\u9762\u7b2c$p$\u5230\u7b2c$p-cnt_{p}+1$\u4f4d\u662f\u8fde\u7eed\u7684\u4e00\u6bb51\uff0c\u4e5f\u5c31\u5b58\u50a8\u4e0b\u4e86$cnt_{p}$\u7684\u4fe1\u606f\n\n\u800c\u53d6\u4ea4\u96c6\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u989c\u8272p\uff0c\u4ea4\u96c6\u91cc\u4ece\u7b2cp\u4f4d\u5411\u524d\u8fde\u7eed1\u7684\u957f\u5ea6\u6070\u597d\u5c31\u662f\u6bcf\u4e00\u4e2a\u96c6\u5408$cnt_{p}$\u4e2d\u7684min(\u4e0d\u61c2\u7684\u8bdd\u81ea\u5df1\u753b\u4e2a\u56fe\u8fd8\u662f\u76f8\u5f53\u597d\u7406\u89e3\u7684)\n\n _\u5982\u679c\u4f60\u719f\u6089\u540e\u7f00\u6570\u7ec4\u7684\u8bdd\u4f1a\u53d1\u73b0\u8fd9\u79cd\u5b58\u50a8\u65b9\u5f0f\u548c\u540e\u7f00\u6570\u7ec4\u91cc\u7684\u8ba1\u6570\u6392\u5e8f\u7684\u884c\u4e3a\u975e\u5e38\u5411(\u90fd\u662f\u505a\u4e00\u904d\u524d\u7f00\u548c\u7136\u540e\u5012\u7740\u6392\u5e03\u5143\u7d20)_ \n\n\u6240\u4ee5\u6211\u4eec\u5c31\u6210\u529f\u4f7f\u7528\u53d6\u4ea4\u96c6\u5b8c\u6210\u4e86\u53d6min\u7684\u64cd\u4f5c\u4e86\n\n\u597d\u4e86\u90a3\u4e48\u6211\u4eec\u7684\u7b97\u6cd5\u5c31\u5927\u81f4\u5b9a\u578b\u4e86:\u901a\u8fc7\u67d0\u79cd\u5947\u6280\u6deb\u5de7\u6c42\u51fa\u8fd9\u4e2a\u533a\u95f4\u7684bitset\uff0c\u7136\u540e\u4e09\u4e2abitset\u53d6\u4e00\u4e0b\u4ea4\u5373\u53ef\n\n\u7136\u540e\u4f60\u53d1\u73b0\u4e00\u4ef6\u4e8b\u60c5\u662f\u8fd9\u6837\u7684bitset\u4f3c\u4e4e\u5e76\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7\u7ebf\u6bb5\u6811\u8fd9\u79cd\u5e38\u7528\u7684\u5904\u7406\u533a\u95f4\u95ee\u9898\u7684\u5de5\u5177\u6765\u6c42\u51fa\u6765\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u8bf7\u51fa\u83ab\u961f\u8fd9\u79cd\u6cdb\u7528\u66f4\u5f3a\u7684\u533a\u95f4\u5904\u7406\u7b97\u6cd5\u4e86\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u6c42\u8fd9\u4e2a\u533a\u95f4\u7684bitset\u8fd8\u662f\u5f88\u8d44\u74f7\u5feb\u901f\u63d2\u5165\u548c\u5220\u9664\u7684\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u83ab\u961f\u7b97\u6cd5\u4ee5$O(N\\sqrt{N})$\u7684\u590d\u6742\u5ea6\u6c42\u51fa\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684bitset\n\n\u7136\u540e\u4f60\u9700\u8981\u505a\u7684\u5c31\u662f\u628a\u8fd9\u4e2abitset\u548c\u5bf9\u5e94\u7684\u8be2\u95ee\u7684bitset&\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\n\n\u6700\u540e\u7684\u95ee\u9898\u662f\u6211\u4eec\u5f00\u4e0d\u8d771e5\u4e2a\u957f\u5ea6\u4e3a1e5\u7684bitset\n\n~~\u5f88\u7b80\u5355\u628a\u8be2\u95ee\u62c6\u62103\u7ec4\uff0c\u6bcf\u7ec4\u83ab\u961f\u4e00\u6b21\u5c31\u884c\u4e86~~\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<map>\n#include<bitset>\nusing namespace std;const int N=1e5+10;const int M=34010;typedef long long ll;\nint a[N];int n;int m;map <int,int> mp;bitset <N> ans[M];int nans[M];bitset <N> nb;\nstruct qry{int l;int r;int t;}q[3*M];int tp;int tot=1;int cnt[N];\ninline bool cmp1(const qry& a,const qry& b){return a.l<b.l;}\ninline bool cmp2(const qry& a,const qry& b){return a.r<b.r;}\ninline void ins(int p){nb[p-cnt[p]]=1;cnt[p]++;}\ninline void del(int p){cnt[p]--;nb[p-cnt[p]]=0;}\ninline void solve()\n{\n    if(tot>=m)return;\n    for(int i=1;i<=M-10&&tot<=m;i++,tot++)\n    {\n        ++tp;scanf(\"%d%d\",&q[tp].l,&q[tp].r);q[tp].t=i;nans[i]+=q[tp].r-q[tp].l+1;\n        ++tp;scanf(\"%d%d\",&q[tp].l,&q[tp].r);q[tp].t=i;nans[i]+=q[tp].r-q[tp].l+1;\n        ++tp;scanf(\"%d%d\",&q[tp].l,&q[tp].r);q[tp].t=i;nans[i]+=q[tp].r-q[tp].l+1;\n    }for(int i=1;i<=tp/3;i++)ans[i].set();sort(q+1,q+tp+1,cmp1);int nl=0;int nr=0;\n    for(int i=1;i<=tp;i+=320){int r=min(tp,i+319);sort(q+i,q+r+1,cmp2);}\n    for(int i=1;i<=tp;i++)\n    {\n        if(nr<q[i].l)\n        {\n            for(int j=nl;j<=nr;j++)del(a[j]);nl=q[i].l;nr=q[i].r;\n            for(int j=nl;j<=nr;j++)ins(a[j]);\n        }\n        else \n        {\n            while(nl<q[i].l)del(a[nl]),nl++;while(nl>q[i].l)nl--,ins(a[nl]);\n            while(nr<q[i].r)nr++,ins(a[nr]);while(nr>q[i].r)del(a[nr]),nr--;\n        }ans[q[i].t]&=nb;\n    }for(int i=nl;i<=nr;i++)del(a[i]);\n    for(int i=1;i<=tp/3;i++)printf(\"%lld\\n\",nans[i]-ans[i].count()*3);\n    for(int i=1;i<=tp/3;i++)nans[i]=0;tp=0;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)scanf(\"%d\",&a[i]);\n    for(int i=1;i<=n;i++)mp[a[i]]++;map <int,int> :: iterator it,it1;\n    for(it=mp.begin(),it1=it,++it1;it1!=mp.end();++it,++it1)it1->second+=it->second;\n    for(int i=n;i>=1;i--)a[i]=mp[a[i]];\n    solve();solve();solve();return 0;\n}\n```",
        "postTime": 1536658056,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "\u9898\u610f\u5df2\u7ecf\u8db3\u591f\u6e05\u695a\u4e86\uff0c\u6211\u4eec\u76f4\u63a5\u8bf4\u601d\u8def\uff1a\n\n---\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\n\n- \u5206\u5757\u3001\u83ab\u961f\n- \u79bb\u6563\u5316\n- \u4e00\u4e9b\u5947\u5947\u602a\u602a\u7684\u6280\u5de7\n\n\u6839\u636e\u9898\u610f\u4e09\u6bb5\u533a\u95f4\u7684\u6570\u7684\u603b\u548c\u4e3a $\\sum_{i=1}^3(r_i-l_i+1)-3\\times k$\uff0c\u5176\u4e2d $k$ \u4e3a\u4e09\u6bb5\u533a\u95f4\u5185\u5171\u6709\u7684\u6570\u7684\u4e2a\u6570\u3002\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u8fd9\u4e2a $k$ \u7684\u503c\u3002\n\n\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u4f7f\u7528\u83ab\u961f\u7ef4\u62a4\u67e5\u8be2\u7684\u533a\u95f4\u5185\u6bcf\u4e2a\u6570\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u5c06\u5176\u62c6\u6210\u4f20\u7edf\u83ab\u961f\u7684\u4e09\u4e2a\u8be2\u95ee\uff1a$(l_1,r_1),(l_2,r_2),(l_3,r_3)$\uff0c\u5206\u522b\u8fdb\u884c\u5904\u7406\u3002\u6211\u4eec\u8981\u5f97\u5230 $k$\uff0c\u9700\u8981\u5f97\u5230\u8fd9\u4e09\u4e2a\u8be2\u95ee\u4e2d\u6709\u54ea\u4e9b\u6570\u3001\u5206\u522b\u51e0\u4e2a\uff0c\u7136\u540e\u53d6\u5b83\u4eec\u7684\u4ea4\u96c6\u5373\u53ef\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u4e2a\u4ea4\u96c6\uff08\u6216\u4e09\u6b21\u8be2\u95ee\uff09\u600e\u4e48\u6c42\u5462\uff1f\u6ce8\u610f\u4e00\u4e2a\u6570\u53ef\u80fd\u91cd\u590d\u51fa\u73b0\u591a\u6b21\u3002\u6211\u4eec\u8003\u8651\u5148\u5c06\u521d\u59cb $a$ \u6570\u7ec4\u8fdb\u884c**\u79bb\u6563\u5316**\uff0c\u53ea\u8bb0\u5f55 $a$ \u6570\u7ec4\u6bcf\u4e00\u4e2a\u503c\u5bf9\u5e94\u6392\u5e8f\u597d\u7684\u6570\u7ec4\u7684**\u7f16\u53f7**\u5373\u53ef\u3002\u8fd9\u6837\uff0c\u82e5\u5e72\u4e2a\u76f8\u540c\u7684\u6570\u4fbf\u4f1a\u7559\u51fa\u82e5\u5e72\u4e2a\u7a7a\u7740\u7684\u7f16\u53f7\uff0c\u5b83\u4eec\u4ee3\u8868\u540c\u4e00\u4e2a\u503c\u3002\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u79bb\u6563\u5316\u7684\u5bf9\u5e94\u5173\u7cfb\u7528 bitset \u5b58\u5373\u53ef\u3002\n\n\u5b8c\u7ed3\u6492\u82b1\uff01\n\n\u7b49\u7b49\uff0cYnoi \u53ef\u4e0d\u662f\u8fd9\u4e48\u7b80\u5355\u5c31\u8fc7\u53bb\u7684\u3002\u770b\u4e00\u773c\u6570\u636e\u8303\u56f4\uff0c$1\\le n,m\\le 10^5$\u3002bitset \u5b58\u4e0d\u4e0b\uff01\uff08\u7b11\u5bb9\u9010\u6e10\u51dd\u56fa\uff09\n\n\u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8f93\u5165\u7684\u67e5\u8be2**\u5206\u4e3a\u82e5\u5e72\u7ec4**\uff0c\u6bcf\u7ec4 $2\\times 10^4$ \u4e2a\u6570\uff08\u5f53\u7136\u66f4\u5927\u4e5f\u53ef\u4ee5\uff0c\u4e0d\u70b8\u7a7a\u95f4\u5c31\u6ca1\u4e8b\uff09\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\u5206\u522b\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002\n\n**\u5c0f\u7ec6\u8282\uff1a\u83ab\u961f\u5fc5\u987b\u5148\u8fdb\u961f\u518d\u51fa\u961f\uff01** \u6211\u56e0\u4e3a\u4e00\u5f00\u59cb\u987a\u5e8f\u641e\u6df7\u4e00\u76f4 RE\uff0c\u88ab\u5361\u4e86 1.5h\uff01\n\n\u771f\u00b7\u5b8c\u7ed3\u6492\u82b1\uff01\n\n---\n\n\u4e3b\u8981\u4ee3\u7801\uff1a\n\n```cpp\nconst ll N = 1e5+5, M = 2e4, K = M+5, SIZE = 320;\nll n, m, a[N], b[N], s[N];\nll vis[N], len[N];\nbitset<N> cnts[K], u;\n#define whichBlock(x) (\\\n\t(x-1)/SIZE+1\\\n)\nstruct Node {\n\tll l, r, id;\n\tfriend bool operator < (const Node &a, const Node &b) {\n\t\tll x = whichBlock(a.l), y = whichBlock(b.l);\n\t\tif(x == y) return a.r < b.r;\n\t\treturn x < y;\n\t}\n}q[N];\n\nvoid discretization() {\n\tfor(ll i=1;i<=n;i++) {\n\t\tscanf(\"%lld\", &a[i]);\n\t\tb[i] = a[i];\n\t}\n\tsort(b+1, b+1+n);\n\tfor(ll i=1;i<=n;i++) a[i] = ll(lower_bound(b+1, b+1+n, a[i]) - b);\n}\nvoid modify(ll x, ll y) {\n\tll z = a[x];\n\tif(y == -1) u[z+(--s[z])] = 0;\n\telse u[z+(s[z]++)] = 1;\n}\nvoid solve(ll op) {\n\tassert(op > 0);\n\tll tot = 0;\n\tmemset(s, 0, sizeof(s));\n\tfor(ll i=1;i<=op;i++) {\n\t\tvis[i] = len[i] = 0;\n\t\tfor(ll j=1;j<=3;j++) {\n\t\t\tq[++tot].id = i;\n\t\t\tscanf(\"%lld%lld\", &q[tot].l, &q[tot].r);\n\t\t\tlen[i] += q[tot].r - q[tot].l + 1;\n\t\t}\n\t}\n\tsort(q+1, q+1+tot);\n\tll l = 1, r = 0;\n\tu.reset();\n\tfor(ll i=1;i<=tot;i++) {\n\t\twhile(l > q[i].l) modify(--l, 1);\n\t\twhile(r < q[i].r) modify(++r, 1);\n\t\twhile(l < q[i].l) modify(l++, -1);\n\t\twhile(r > q[i].r) modify(r--, -1);\n\t\tif(vis[q[i].id]) cnts[q[i].id] &= u;\n\t\telse cnts[q[i].id] = u;\n\t\tvis[q[i].id] = 1;\n\t}\n\tfor(ll i=1;i<=op;i++) printf(\"%lld\\n\", len[i]-3*(ll)cnts[i].count());\n}\n```",
        "postTime": 1601737462,
        "uid": 122461,
        "name": "rui_er",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6211\u7684\u7b2c\u4e00\u9053 Ynoi\uff0c~~\u540c\u65f6\u4e5f\u4e00\u53d1\u5361\u5230\u4e86\u6700\u4f18\u89e3~~\uff0c\u53d1\u7bc7\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b qwq\u3002\u770b\u4e0a\u53bb\u4e0d\u5f00 $O2$ \u4e5f\u662f\u80fd\u8fc7\u7684\uff0c~~\u826f\u5fc3 lxl \u597d\u8bc4\u3002~~\n\n\u672c\u9898\u9700\u8981\u7684\u77e5\u8bc6\u70b9\uff1a\n\n- \u5206\u5757\uff0c\u83ab\u961f\n- `bitset` \u4f18\u5316\n- \u79bb\u6563\u5316\n- \u5176\u5b83\u7684\u5947\u6280\u6deb\u5de7\n\n\u9996\u5148\u660e\u786e\u8fd9\u9898\u8981\u6c42\u7684\uff0c\u4e09\u4e2a\u533a\u95f4\u5185\u4e0d\u540c\u65f6\u51fa\u73b0\u7684\u6570\u7684\u4e2a\u6570\u3002\u5217\u51fa\u67ff\u5b50\u5c31\u662f $(r_1 - l_1 + 1) + (r_2 - l_2 + 1) + (r_3 - l_3 + 1) - rep$\uff0c\u5176\u4e2d $rep$ \u662f\u4e09\u4e2a\u533a\u95f4\u5185\u540c\u65f6\u51fa\u73b0\u7684\u6570\u7684\u4e2a\u6570\u3002\n\n\u9996\u5148 $1 \\le a_i \\le 10^9$\uff0c\u663e\u7136\u79bb\u6563\u5316\u3002\u540c\u65f6\u6ce8\u610f\uff0c\u672c\u9898\u79bb\u6563\u5316\u65f6\u4e0d\u80fd\u53bb\u91cd\uff0c\u5373\u4e0d\u9700\u8981 `unique`\uff0c\u76f4\u63a5\u4f7f\u7528 `lower_bound` \u5373\u53ef\u3002\n\n\u968f\u540e\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u6c42\u5220\u9664\u7684\u6570\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u5bf9\u591a\u4e2a\u533a\u95f4\u5185\u5143\u7d20\u4e2a\u6570\u7684\u7ef4\u62a4\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u83ab\u961f\uff0c\u5982\u83ab\u961f\u677f\u5b50\u9898 [\u5c0f Z \u7684\u889c\u5b50](https://www.luogu.com.cn/problem/P1494) \u5c31\u662f\u8fd9\u79cd\u9898\u578b\u3002\n\n\u8001\u5957\u8def\uff0c\u5c06\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\u62c6\u6210 $\\sqrt n$ \u5757\uff0c\u628a\u6240\u6709\u8be2\u95ee\u7684\u533a\u95f4\u4ee5 $l$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c$r$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002\n\n\u6b64\u65f6\u8003\u8651\u5982\u4f55\u6c42\u51fa\u4e0a\u6587\u7684 $rep$\u3002\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684 `bitset`\uff0c\u6bcf\u4e00\u4f4d\u662f\u5426\u4e3a $1$ \u5373\u8868\u793a\u8fd9\u4e00\u4f4d\u662f\u5426\u88ab\u5220\u9664\u3002\u518d\u7ef4\u62a4\u53e6\u4e00\u4e2a `bitset` $Bst$\uff0c\u6bcf\u4e00\u4f4d\u662f\u5426\u4e3a $1$ \u8868\u793a\u8fd9\u4e00\u533a\u95f4\u662f\u5426\u6709\u8fd9\u4e2a\u6570\u3002\u5219\u6700\u540e\u8981\u5220\u9664\u7684\u6570\u5c31\u662f\u4e09\u4e2a\u533a\u95f4\u7684 $Bst$ \u53d6\u4ea4\u96c6\u3002\n\n\u6700\u540e\u8981\u6ce8\u610f\uff0c\n\n- \u6b64\u9898 $1 \\le n, m \\le 10^5$\uff0c\u5f00\u4e0d\u4e0b\u8fd9\u4e48\u5927\u7684 `bitset`\uff0c\u9700\u8981\u5206\u51e0\u6b21\u6c42\u7b54\u6848\u3002\n\n- \u533a\u95f4\u79fb\u52a8\u4f4d\u7f6e\u65f6\uff0c\u8981\u5148\u52a0\u518d\u51cf\u3002\u5982\u679c\u5148\u51cf\uff0c\u5219\u53ef\u80fd\u4f1a\u8ba9 $cnt$ \u53d8\u6210\u8d1f\u6570\u518d\u53d8\u6210\u6b63\u6570\uff0c\u4f1a\u5bfc\u81f4 `bitset` \u65e0\u6548\u8bbf\u95ee\u5185\u5b58\uff0c\u4ece\u800c\u5bfc\u81f4 RE\u3002\n\n\u4e8e\u662f\u8fd9\u9898\u5c31\u7ed3\u675f\u4e86\uff0c$\\text{Code}$\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <bitset>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#define il inline\n#define rg register\n\n//namespace IO {\n//    const int SIZE = (1 << 20) + 1;\n//    char ibuf[SIZE], *iS, *iT, obuf[SIZE],*oS = obuf, *oT = obuf + SIZE - 1;\n//    char _st[55];\n//    int _qr = 0;\n//    inline char gc() {\n//        return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++);\n//    }\n//    inline void qread() {}\n//    template<class T1, class ...T2>\n//    inline void qread(T1 &IEE, T2&... ls) {\n//        register T1 __ = 0, ___ = 1;\n//        register char ch;\n//        while(!isdigit(ch = gc())) ___ = (ch == '-') ? -___ : ___;\n//        do {\n//            __ = (__ << 1) + (__ << 3) + (ch ^ 48);\n//        }while(isdigit(ch = gc()));\n//        __ *= ___;\n//        IEE = __;\n//        qread(ls...);\n//        return ;\n//    }\n//    inline void flush() {\n//        fwrite(obuf, 1, oS - obuf, stdout);\n//        oS = obuf;\n//        return ;\n//    }\n//    inline void putc_(char _x) {\n//        *oS++ = _x;\n//        if(oS == oT) flush();\n//    }\n//    inline void qwrite() {}\n//    template<class T1, class ...T2>\n//    inline void qwrite(T1 IEE, T2... ls) {\n//        if(!IEE) putc_('0');\n//        if(IEE < 0) putc_('-'), IEE = -IEE;\n//        while(IEE) _st[++_qr] = IEE % 10 + '0', IEE /= 10;\n//        while(_qr) putc_(_st[_qr--]);\n//        qwrite(ls...);\n//        return ;\n//    }\n//    struct Flusher_{~Flusher_(){flush();}}io_flusher;\n//}\n//\n//using namespace IO;\n//\u6b64\u90e8\u5206\u662f\u5feb\u8bfb\uff0c\u4e3a\u9632\u6b62\u6284\u88ad\u6ce8\u91ca\u6389\u4e86\u3002\n//\u6ce8 : \u6b64\u5feb\u8bfb\u677f\u5b50\u662f@SPFA(uid=177999) \u7ed9\u6211\u7684\uff0c\u4e3a\u9632\u6b62\u4ed6\u88ab\u8bf4\u662f ctj \u7279\u6765\u6b64\u58f0\u660e\u4e00\u4e0b\u3002\nusing namespace std;\n\nconst int N = 1e5 + 5;\nconst int M = 25005;\n\nbitset<N> bst[M], Bst;//bitset \u5f00 25000\uff0c\u5206\u56db\u6b21\u6c42\u51fa\u7b54\u6848\u3002\nbool vis[M];\nint n, m, tot, blocksize;\nint a[N], b[N], blocknum[N];\nint ans[N], cnt[N];\n\nstruct Node {\n\tint id, l, r;\n\tbool operator < (const Node &oth) const {\n\t\treturn blocknum[l] == blocknum[oth.l] ? r < oth.r : blocknum[l] < blocknum[oth.l];\n\t}\n} Que[N << 2];\n\nil void Add(int id) {\n\tint x = a[id];\n\t++cnt[x];\n\tBst[x + cnt[x] - 1] = 1; \t\n}\n\nil void Del(int id) {\n\tint x = a[id];\n\t--cnt[x];\n\tBst[x + cnt[x]] = 0;\n}\n\nil void Solve(int k) {\n\ttot = 0;\n\tmemset(vis, false, sizeof vis);\n\tmemset(ans, 0, sizeof ans);\n\tmemset(cnt, 0, sizeof cnt);\n    //\u56e0\u4e3a\u662f\u5206\u6b21\u6c42\u51fa\u7b54\u6848\uff0c\u4e0d\u8981\u5fd8\u8bb0\u6bcf\u6b21\u521d\u59cb\u5316\u3002\n\tfor(rg int i = 1; i <= k; i++) {\n\t\tfor(int j = 1; j <= 3; j++) {\n\t\t\tQue[++tot].id = i;\n\t\t\tqread(Que[tot].l, Que[tot].r);\n\t\t\tans[i] += Que[tot].r - Que[tot].l + 1;\n\t\t}\n\t}\n\tsort(Que + 1, Que + tot + 1);\n\tBst.reset();\n\tint l = 1, r = 0;\n\tfor(rg int i = 1; i <= tot; i++) {\n\t\twhile(l > Que[i].l) Add(--l);\n\t\twhile(r < Que[i].r) Add(++r);\n\t\twhile(l < Que[i].l) Del(l++);\n\t\twhile(r > Que[i].r) Del(r--);\n  \t\t//\u533a\u95f4\u79fb\u52a8\u4f4d\u7f6e\u5148\u52a0\u518d\u51cf\u3002\n\t\tif(!vis[Que[i].id]) bst[Que[i].id] = Bst, vis[Que[i].id] = true;//\u6b64\u533a\u95f4\u672a\u8bbf\u95ee\u8fc7\uff0c\u76f4\u63a5\u8d4b\u503c\n\t\telse bst[Que[i].id] &= Bst;//\u8bbf\u95ee\u8fc7\uff0c\u53d6\u4ea4\u96c6\n\t}\n\tfor(rg int i = 1; i <= k; i++) ans[i] -= bst[i].count() * 3;\n\tfor(rg int i = 1; i <= k; i++) printf(\"%d\\n\", ans[i]);\n}\n\nint main() {\n\tqread(n, m);\n\tblocksize = sqrt(n);\n\tfor(rg int i = 1; i <= n; i++) {\n\t\tqread(a[i]);\n\t\tb[i] = a[i];\n\t\tblocknum[i] = (i - 1) / blocksize + 1;\n\t}\n\tsort(b + 1, b + n + 1);\n\tfor(rg int i = 1; i <= n; i++) a[i] = lower_bound(b + 1, b + n + 1, a[i]) - b;//\u79bb\u6563\u5316\uff0c\u4e0d\u9700\u8981\u53bb\u91cd\n\tint T = M - 5;\n\twhile(m) {\n\t\tif(m < T) {\n\t\t\tSolve(m);\n\t\t\tbreak;\n\t\t}\n\t\telse Solve(T), m -= T;\n\t}//\u5206\u6b21\u6c42\u51fa\u7b54\u6848\n\treturn 0;\n}\n```\n\nupd\uff1a\u6ce8\u660e\u4e86\u5feb\u8bfb\u677f\u5b50\u7684\u6765\u6e90\u3002",
        "postTime": 1601980555,
        "uid": 242543,
        "name": "BreezeEnder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4688 [Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e"
    },
    {
        "content": "\u63a8\u4e00\u624b\u849f\u84bb\u7684 $\\color{LimeGreen}{\\texttt {\u535a\u5ba2}}$ \n\n------------\n\n\n\u603b\u4f53\u505a\u6cd5\u5df2\u7ecf\u88ab\u697c\u4e0a\u7684\u795e\u4ed9\u4eec\u8bf4\u5f97\u5dee\u4e0d\u591a\u5566\uff0c\u8fd9\u7bc7\u6587\u7ae0\u65e8\u5728\u5c3d\u53ef\u80fd\u8bf4\u5f97$\\large{\\texttt\u7ec6}\\normalsize{\\texttt\u7ec6}{\\texttt \u7ec6}\\small{\\texttt \u7ec6}$\u7ec6\u4e00\u70b9\u3002\u907f\u514d\u50cf\u7b14\u8005\u4e00\u6837~~Coding \u4e94\u5206\u949f\uff0cDebug \u4e24\u5c0f\u65f6~~\u7684\u60c5\u51b5QwQ\u3002\n\n$\\Large{\\texttt \u601d}\\Large{\\texttt \u8def}$\uff1a\u83ab\u961f\uff08\u4e0d\u5e26\u4fee\uff09+ $bitset$ \u4f18\u5316\u3002\u53ef\u4ee5\u79f0\u5f97\u4e0a\u677f\u5b50\u5427\uff0c\u53ef\u60dc\u4e00\u773c\u8fd8\u6ca1\u770b\u51fa\u6765\uff0c\u8fd8\u662f\u9898\u505a\u7684\u5c11/kk\u3002\n\n$\\Large{\\texttt \u9996}\\Large{\\texttt \u5148}$ \uff0c\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48**\u79bb\u6563\u5316**\u662f\u9700\u8981\u7684\u3002\u6743\u503c\u503c\u57df\u8f83\u5927\uff0c\u5c06\u8017\u8d39\u5927\u91cf $bitset$ \u7684\u7a7a\u95f4\u3002\u79bb\u6563\u5316\u540e $bitset$ \u53ea\u9700\u5f00 $10^5$ \u7684\u7a7a\u95f4\uff0c\u8f83\u4e3a\u4f18\u79c0\u3002\n\n$\\Large{\\texttt \u5176}\\Large{\\texttt \u6b21} $\uff0c\u5982\u679c\u60a8\u662f\u5934\u4e00\u56de\u63a5\u89e6 $bitset$ \u5bf9\u83ab\u961f\u7684\u4f18\u5316\uff0c\u8fd9\u91cc\u6709\u51e0\u4e2a\u5728\u4ee3\u7801\u91cc\u4f1a\u7528\u4e0a\u7684\u64cd\u4f5c\u9700\u8981\u5148\u8ddf\u60a8\u53d9\u6e05\uff1a\n\n- `bitset<MAX> now` \u5f00\u4e00\u4e2a\u5927\u5c0f\u4e3a $MAX$ \u7684 $bitset$ \uff0c\u540d\u4e3a $now$ \u3002\u672c\u9898\u4e2d\uff0c $bitset$ \u7684\u7b2c $i$ \u4f4d\u5219\u4ee3\u8868\u79bb\u6563\u5316\u540e\uff0c\u503c\u4e3a $i$ \u7684\u8fd9\u4e2a\u5143\u7d20 **\u5728/\u4e0d\u5728(1/0)** \u8fd9\u4e2a\u533a\u95f4\u5185\u3002\n\n- `now.set(pos) ` \u5c06 $now$ \u7684\u7b2c $pos$ \u4f4d\u8bbe\u4e3a $1$ \u3002\u672c\u9898\u4e2d\u7528\u6765\u8868\u793a\u79bb\u6563\u5316\u540e\uff0c\u503c\u4e3a $pos$ \u7684\u8fd9\u4e2a\u5143\u7d20 **\u5305\u542b\u4e8e** \u8981\u67e5\u8be2\u7684\u533a\u95f4\u3002 \n\n- `now.reset(pos)` \u5c06 $now$ \u7684\u7b2c $pos$ \u4f4d\u8bbe\u4e3a $0$ \u3002\u76f8\u5bf9\u7684\uff0c\u672c\u9898\u4e2d\u7528\u6765\u8868\u793a\u79bb\u6563\u5316\u540e\uff0c\u503c\u4e3a $pos$ \u7684\u8fd9\u4e2a\u5143\u7d20 **\u4e0d\u5305\u542b\u4e8e** \u8981\u67e5\u8be2\u7684\u533a\u95f4\u3002 \n\n- `sum[i] &= now` $sum[i]$ \u4e5f\u662f\u4e00\u4e2a $bitset$ \u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u4e2a $bitset$ \u76f4\u63a5 **\u4e0e** \u4e0a\uff0c\u6765\u5b9e\u73b0\u6c42 **\u5143\u7d20\u4ea4\u96c6** \u7684\u4f5c\u7528\u3002\n\t-  _\u5982\u679c\u60a8\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u5b9e\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\u5982\u679c\u4e00\u4e2a\u79bb\u6563\u540e\u7684\u5143\u7d20\uff0c\u5728\u4e09\u4e2a\u533a\u95f4\u90fd\u6709\u51fa\u73b0\uff0c\u5219\u5b83\u5728\u4e09\u4e2a\u533a\u95f4\u6240\u5bf9\u5e94\u7684 $bitset$ \u4e2d\u7684\u4f4d\u7f6e**\u90fd\u4e3a $1$** \uff0c **\u201c\u4e0e\u201d** \u8fd0\u7b97\u540e\uff0c\u4e09\u7ec4\u90fd\u4e3a $1$ \u7684\u4f4d\u7f6e**\u7ed3\u679c\u4f9d\u7136\u4e3a $1$**\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u5c31\u5bf9\u5e94\u7740\u4e09\u4e2a\u533a\u95f4\u7684\u4ea4\u96c6\u3002_ \n    \n- `sum[i].count()` \u7528\u4e8e\u6c42 $bitset$ \u4e2d $1$ \u7684\u4e2a\u6570\u3002\u8fd9\u91cc\u7528\u6765\u7edf\u8ba1\u6c42\u4ea4\u96c6\u540e**\u5143\u7d20\u7684\u4e2a\u6570**\uff0c\u539f\u56e0\u4e0e\u524d\u9762\u7c7b\u4f3c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n$\\Large{\\texttt \u7136}\\Large{\\texttt \u540e}$\uff0c\u9700\u8981\u6307\u51fa\u8fd9\u9898\u4f7f\u7528\u83ab\u961f+ $bitset$ \u7684\u610f\u4e49\uff0c\u6709\u4e00\u8a00\uff1a\n\n> \u83ab\u961f\u53ef\u4ee5\u7ef4\u62a4\u5e38\u89c4\u6570\u636e\u7ed3\u6784\u96be\u4ee5\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\n\n\u8fd9\u91cc\u7684\u8981\u7ef4\u62a4\u7684\u533a\u95f4\u4fe1\u606f\u662f\u4ec0\u4e48\uff0c\u662f**\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u533a\u95f4\u4e2d\u51fa\u73b0**\u3002\n\n\u8fd9\u5f88\u96be\u4e0d\u8ba9\u4eba\u8054\u60f3\u5230\u83ab\u961f\u677f\u9898\u300a\u5c0fB\u7684\u8be2\u95ee\u300b\u3002\n\n\u518d\u8005\uff0c\u4e5f\u5f88\u96be\u60f3\u5230\u4e00\u79cd\u522b\u7684\u6570\u636e\u7ed3\u6784\u80fd\u591f\u9ad8\u6548\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002\n\n\u53c8\u6709\u4e00\u8a00\uff1a\n\n> bitset \u5e38\u7528\u4e8e\u5e38\u89c4\u6570\u636e\u7ed3\u6784\u96be\u4ee5\u7ef4\u62a4\u7684\u7684\u5224\u5b9a\u3001\u7edf\u8ba1\u95ee\u9898\n\n\u5fc5\u7136\uff0c\u8fd9\u9053\u9898\u4fbf\u662f\u4e00\u6b3e\u6781\u4e3a\u9b3c\u755c\u7684\u7edf\u8ba1\u95ee\u9898\uff0c**\u533a\u95f4\u5143\u7d20\u4ea4\u96c6**\uff0c\u8fd9\u4ee4\u4eba\u4e0d\u5f97\u4e0d\u8d8b\u5411 $bitset$ \u6c42\u5e2e\u52a9\u3002\u5e78\u597d\uff0c $bitset$ \u6c42\"\u4e0e\"\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\uff08\u8fd9\u91cc\u8bf4\u53e5\u95f2\u8bdd\uff0c\u4e3a\u4ec0\u4e48\u903b\u8f91\u8fd0\u7b97\u7b26 **\u201c\u4e0e\u201d**  $\\land$ \u548c\u96c6\u5408\u8fd0\u7b97\u7b26 **\u201c\u4ea4\u201d** $\\cap$ \u6709\u4e9b\u5f62\u4f3c\uff0c\u5b9e\u5219\u4e0d\u662f\u5de7\u5408\uff0c $\\cap$ \u7684\u5b9a\u4e49\u4fbf\u662f\uff1a\u5728\u96c6\u5408A **\u4e14** \u5728\u96c6\u5408B\u7684\u5143\u7d20\u3002\uff09\n\n$\\Large{\\texttt \u6700}\\Large{\\texttt \u540e}$\uff0c\u7565\u52a0\u6574\u7406\u4e00\u4e0b\u53ef\u80fd\u4f1a\u628a\u60a8\u5361\u7740\u7684\u70b9\uff0c\u5982\u4e0b\uff1a\n\n1. \u672c\u9898\u7a0d\u5e26\u5361\u7a7a\u95f4\uff0c\u5efa\u8bae\u5c06\u8be2\u95ee**\u5206\u6210\u4e09\u5757**\u5904\u7406\uff0c\u4ee5\u5b9e\u73b0\u53ea\u5f00 $\\dfrac{1}{3}$ \u5927\u5c0f\u7684 $bitset$ \u800c\u4e0d\u727a\u7272\u65f6\u95f4\u590d\u6742\u5ea6\u3002\uff08\u8fd9\u79cd\u5361\u7a7a\u95f4\u601d\u60f3\u7c7b\u4f3c\u4e8e\u5faa\u73af\u5c55\u5f00\u7684\u5361\u65f6\u95f4\u601d\u60f3\uff1f\uff09\u3002\u7b14\u8005\u91c7\u7528\u4e86**\u5e38\u6570\u5927\u5c0f\u7684\u5757**\uff0c\u800c\u8fd9\u4e00\u5e38\u6570\u7ecf\u68c0\u9a8c\u4e3a $33350$ \uff0c\u518d\u5f80\u4e0a\u5c31 $MLE$ \u4e86QwQ \u3002\u5f53\u7136\uff0c\u8fd9\u662f\u56e0\u4eba\u7684\u5199\u6cd5\u800c\u5f02\u7684\uff0c\u4e0d\u5fc5\u6b7b\u677f\u3002\uff08~~\u7528\u6a21\u62df\u9000\u706b\u8c03\u5e38\u6570\u6307\u65e5\u53ef\u5f85~~\uff09\n\n1. \u505a\u83ab\u961f\u65f6\u9700\u8981\u6ce8\u610f\u5de6\u53f3\u6307\u9488\u7684\u79fb\u52a8\u987a\u5e8f\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u9020\u6210\u8d1f\u503c $bitset$ \u800c $RE$ \u3002\u5177\u4f53\u5730\u8bf4\uff0c`l--,r++,l++,r--` \u6216 `l--,r++,r--,l++` \u662f\u6700\u543c\u54d2\u3002\u56e0\u4e3a\u4ed6\u4eec\u90fd\u662f**\u5148\u6269\u5f20**\u4e86\u533a\u95f4\uff0c**\u518d\u6536\u7f29**\u3002\u6709\u6548\u907f\u514d\u4e86\u4e00\u4e0a\u6765\u5c31\u6536\u7f29\uff0c\u7ed3\u679c\u4e00\u76f4\u627e\u4e0d\u5230\u8be2\u95ee\u5de6\u53f3\u754c\u7684\u60c5\u51b5\u3002\n\n1. \u56e0\u4e3a\u672c\u9898\u662f\u4e00\u4e2a\u4e00\u4e2a\u5220\u53bb\u76f8\u540c\u6570\u7684\uff0c\u6240\u4ee5\u4e0d\u540c\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\uff0c\u5373\u4f7f\u4ed6\u4eec\u6743\u503c\u76f8\u540c\uff0c**\u672c\u8d28\u4e0a\u662f\u4e0d\u540c\u7684**\u3002\u6545\u79bb\u6563\u5316\u65f6\u5c31**\u522b\u60f3\u7740\u53bb\u91cd**\u4e86\uff0c\u89e3\u51b3\u529e\u6cd5\u5f88\u591a\uff0c\u6bd4\u5982\u5c11\u5199\u4e00\u6761 $\\operatorname{unique}$ \u54c7\uff0c\u8ba1\u7b97\u51fa\u73b0\u6b21\u6570 $cnt$ \u65f6\u6709\u610f\u66f4\u6539\u6743\u503c\u4fdd\u8bc1\u5176\u4e0d\u91cd\u54c7\u3002\u7b14\u8005\u9009\u62e9\u7684\u662f\u540e\u8005\u3002\n\n1. \u548c\u666e\u901a\u83ab\u961f\u8bb0\u5f55\u6700\u7ec8\u7b54\u6848\u7684\u6570\u7ec4\u4e00\u6837\uff0c\u53c2\u4e0e \u201c\u4e0e\u201d \u8fd0\u7b97\u7684 $bitset$ \u7684\u6807\u53f7\u4e5f\u4e0d\u5e94\u662f\u4ed6\u6392\u5e8f\u540e\u7684\u5e8f\u53f7\uff0c\u800c\u5e94\u662f\u8fd9\u4e2a\u8be2\u95ee**\u8f93\u5165\u65f6\u8bb0\u5f55\u7684 $id$** \u3002\u5373 `sum[q[i].id] &= now` \u3002\n\n1. \u65e2\u7136\u6211\u4eec\u662f\u5f00\u5e38\u6570\u5927\u5c0f\u7684\u5757\uff0c\u5faa\u73af\u65f6\u987b**\u683c\u5916\u6ce8\u610f\u4e0a\u754c**\uff0c\u8c28\u9632\u8bbf\u95ee\u5230\u7a7a\u8be2\u95ee\u5bfc\u81f4\u7b97\u6cd5\u9000\u5316\u6210\u66b4\u529bAwA\u3002\n\n1. \u5982\u679c\u60a8\u88ab\u5361\u5e38\u4e86\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u83ab\u961f\u7684**\u5947\u5076\u6027\u6392\u5e8f**\u4f18\u5316\uff0c\u767e\u5ea6\u5373\u53ef\uff0c\u5728\u6b64\u4e0d\u591a\u8bf4\u4e86\u3002\n\n\u7531\u4e8e\u7b14\u8005\u7801\u98ce\u8be1\u5f02\u4e14\u5b9e\u73b0\u4e0e\u5176\u4ed6\u5927\u4f6c\u57fa\u672c\u65e0\u5f02\uff0c\u8fd9\u91cc\u5c31\u653e\u4e00\u4e2a $\\mathtt{OI\\ Wiki}$ \u7684[\u4f8b\u9898\u53c2\u8003\u4ee3\u7801\u94fe\u63a5](https://oi-wiki.org/misc/mo-algo-with-bitset/)\u53ed\uff0c\u987a\u7740\u8fd9\u6761\u94fe\u662f\u80fd\u7ffb\u5230\u7684\u3002\uff08~~\u9003~~",
        "postTime": 1601893211,
        "uid": 150879,
        "name": "quest_2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "\u5199Ynoi\u9898\u89e3\u6709\u763e\u7cfb\u5217QAQ   \n\u5148\u63a8\u4e00\u53d1\u6211\u7684\u535a\u5ba2  \n[\u4f20\u9001\u95e8](https://lfd2002.com) \n\u8fd9\u9898\u7edd\u58c1\u795e\u9898  \n\u8fd9\u4e2a\u9898\u4e0a\u6765\u6211\u4eec\u53ef\u4ee5\u770b\u770b\u95ee\u7684\u662f\u4ec0\u4e48  \n$\\sum _ {i=1}^{3} (r_i-l_i+1) - 3 * \\sum _ {j=1} ^ {Max}min(cnt_1[j],cnt_2[j],cnt_3[j])$  \n\u7136\u540e\u53d1\u73b0\u524d\u9762\u90a3\u90e8\u5206\u975e\u5e38\u597d\u529e  \n\u8003\u8651\u540e\u9762\u90a3\u90e8\u5206  \n\u770b\u5230$a_i$\u7684\u8303\u56f4\u6211\u5148\u60f3\u5230\u4e86\u628a\u8fd9\u4e2a\u6570\u5217\u79bb\u6563\u5316\u4e00\u4e0b  \n\u7136\u540e\u6211\u8003\u8651\u5230\u7684\u662f\u7528\u4e00\u4e2a\u64cd\u4f5c\u628a\u51fa\u73b0\u7684\u6700\u5c11\u6b21\u6570\u641e\u51fa\u6765  \n\u5982\u679c\u8fd9\u8981\u662f\u4e00\u4e2a$0-1$\u4e32\u7684\u8bdd\u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u4e0e\u64cd\u4f5c\u4e48  \n\u6240\u4ee5\u8bf4\u6211\u7528bitset\u6765\u7ef4\u62a4\u8fd9\u4e2a\u4e8b\u60c5  \n\u6c42\u4e00\u6bb5\u533a\u95f4\u5185\u5404\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u662f\u83ab\u961f\u7b97\u6cd5\u7684\u7ecf\u5178\u95ee\u9898\u3002  \n\u5bf9\u4e8e\u672c\u9898\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u8be2\u95ee\u7684\u4e09\u4e2a\u533a\u95f4\u62c6\u5f00\u89e3\u51b3\uff0c\u6700\u540e\u518d\u5408\u5e76\u8d77\u6765\u3002  \n\u6bcf\u6b21\u5408\u5e76\u90fd\u662fO(n)\u7684\u590d\u6742\u5ea6\uff0c\u4e0d\u4f18\u79c0\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528bitset\u4f18\u5316,\u8bb0\u5f55cnt\u3002\u6ce8\u610f\u5230\u6570\u5b57\u53ef\u80fd\u91cd\u590d\u51fa\u73b0\uff0c\u800cbitset\u53ea\u80fd\u8bb0\u5f550\u548c1\uff0c\u56e0\u6b64\u5728\u79bb\u6563\u5316\u524d\u4e0d\u80fd\u6709\u53bb\u91cd\u64cd\u4f5c\u3002  \n\u4f8b\u5982\u5bf9\u6837\u4f8b\u6570\u636e\uff1a1 2 2 3 3 \uff0c\u79bb\u6563\u5316\u540e\u5e94\u4e3a\uff1a1 2 2 4 4\uff0c\u5728bitset\u4e2d\u7528\u7b2c2\u4f4d\u8868\u793a\u51fa\u73b0\u7684\u7b2c1\u4e2a2\uff0c\u7b2c3\u4f4d\u8868\u793a\u7b2c\u4e8c\u4e2a2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002   \n\u4f46\u8fd9\u6837\u4f1aMLE\uff0c\u4e8e\u662f\u6211\u4eec\u5f3a\u884c\u628a\u8be2\u95ee\u5206\u7ec4\uff0c\u6bcf25000\u4e2a\u4e3a\u4e00\u7ec4\uff0c\u5206\u6279\u6c42\u89e3\uff0c\u89e3\u51b3\u4e86\u7a7a\u95f4\u4e0d\u8db3\u7684\u95ee\u9898\u3002  \n\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\u5982\u679c\u5e38\u6570\u5927\u70b9\u53ef\u80fd\u4f1aTLE <del>\u6211\u5e38\u6570\u5c0f\u4e0d\u5173\u6211\u4e8b</del>\u8fd9\u6837\u600e\u4e48\u529e\u5462 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u624b\u5199\u4e00\u4e2abitset\u561b\u5bf9\u4e0d\u5bf9  \n<del>\u6211\u662f\u4e0d\u4f1a\u5199 \u5e78\u597d\u6211\u5e38\u6570\u5c0f</del>  \n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 100100\n#define T 25000\ninline int read()\n{\n    int s=0,w=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n    return s*w;\n}\nstruct Query\n{\n    int l,r,id,pos;\n}Q[N];\nint l1[N],l2[N],l3[N],r1[N],r2[N],r3[N],n,m;\nint bel[N],cnt[N],tcnt,vis[T+10],ans[N],block,a[N],b[N];\nbitset<N>f[T+10],tmp;\ninline bool cmp1(const Query qwq,const Query qaq)\n{\n    if(qwq.pos<qaq.pos) return true;\n    else if(qwq.pos==qaq.pos&&qwq.r<qaq.r) return true;\n    else return false;\n}\ninline bool cmp2(const Query qwq,const Query qaq)\n{\n    if(qwq.id<qaq.id) return true;\n    else return false;\n}\ninline void modify(int x,int y)\n{\n    x=a[x];\n    if(y<0) tmp[x+cnt[x]-1]=0;\n    if(y>0) tmp[x+cnt[x]]=1;\n    cnt[x]+=y;\n}\ninline void solve(int x,int y)\n{\n    memset(cnt,0,sizeof cnt);tcnt=0;\n    tmp.reset();int l=1,r=0;\n    memset(vis,0,sizeof vis);\n    for(int i=x;i<=y;i++)\n    {\n        Q[++tcnt]=(Query){l1[i],r1[i],i,bel[l1[i]]};\n        ans[i]+=r1[i]-l1[i]+1;\n        Q[++tcnt]=(Query){l2[i],r2[i],i,bel[l2[i]]};\n        ans[i]+=r2[i]-l2[i]+1;\n        Q[++tcnt]=(Query){l3[i],r3[i],i,bel[l3[i]]};\n        ans[i]+=r3[i]-l3[i]+1;\n    }\n    sort(Q+1,Q+tcnt+1,cmp1);\n    for(int i=1;i<=tcnt;i++)\n    {\n        while(r<Q[i].r) r++,modify(r,1);\n        while(l>Q[i].l) l--,modify(l,1);\n        while(r>Q[i].r) modify(r,-1),r--;\n        while(l<Q[i].l) modify(l,-1),l++;\n        if(!vis[Q[i].id-x+1]) vis[Q[i].id-x+1]=1,f[Q[i].id-x+1]=tmp;\n        else f[Q[i].id-x+1]&=tmp;\n    }\n    for(int i=x;i<=y;i++)\n        ans[i]-=f[i-x+1].count()*3;\n}\nint main()\n{\n    n=read(),m=read();block=sqrt(n);\n    for(int i=1;i<=n;i++)\n    {\n        a[i]=read();b[i]=a[i];\n        bel[i]=(i-1)/block+1;\n    }\n    sort(b+1,b+n+1);\n    for(int i=1;i<=n;i++)\n        a[i]=lower_bound(b+1,b+n+1,a[i])-b;\n    for(int i=1;i<=m;i++)\n    {\n        l1[i]=read(),r1[i]=read();\n        l2[i]=read();r2[i]=read();\n        l3[i]=read();r3[i]=read();\n    }\n    for(int i=1;i<=m;i+=T) solve(i,min(m,i+T-1));\n    for(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1536289643,
        "uid": 55682,
        "name": "Michael_Bryant",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.lydsy.com/JudgeOnline/problem.php?id=4939)\n\n\u7b2c\u4e00\u6b21\u505a\u5927\u6bd2\u7624\u9898\uff0c\u679c\u7136\u6076\u5fc3......\n\n\u9996\u5148\u770b\u61c2\u9898\u610f\u540e\u76f8\u4fe1\u8bf8\u4f4d\u5946\u4f6c\u9a6c\u4e0a\u5c31\u80fd\u60f3\u5230bitset\u7ef4\u62a4\u5e76\u96c6\uff0c\u518d\u7528\u83ab\u961f\u53bb\u7ef4\u62a4\u7b54\u6848\u7684\u65b9\u6cd5\uff08\u592a\u660e\u663e\u4e86\u5427\uff09\u3002\u7136\u540e\u5f53\u6211\u5f00\u5f00\u5fc3\u5fc3\u6572\u5230\u4e00\u534a\u65f6\uff0c\u5c31\u53d1\u73b0\u4e00\u4e2a\u795e\u5947\u7684\u4e8b\u60c5\uff1a\u6211\u9760\u7a7a\u95f4\u597d\u50cf\u4f1a\u70b8\uff01\u8d76\u7d27\u5306\u5306\u5fd9\u5fd9\u770b\u4e86\u4e00\u6ce2\u6570\u636e\uff0c\u7684\u786e\u5f00\u4e0d\u4e0b\u3002\u90a3\u4e48\u600e\u4e48\u529e\uff1f\u8fd9\u65f6\u5c31\u4f1a\u6709\u4e00\u4e2a\u795e\u5947\u7684\u529e\u6cd5\u53eb\u505a \u5206\u6210\u591a\u6b21\u8be2\u95ee\uff0c\u8fd9\u6837\u5b50\u7684\u8bdd\u7a7a\u95f4\u5c31\u4f1a\u8db3\u591f\u4e86\u3002\u7136\u540e\u53ea\u8981\u6ce8\u610f\u4e0b\u591a\u6b21\u8be2\u95ee\u7684\u6b21\u6570\uff0c\u8c03\u6574\u6b21\u6570\u5c31\u80fd\u5728\u65f6\u95f4\u4e0a\u8fc7\u53bb\u4e86\u3002\n\n\u4e0b\u9762\u662fcode\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define LL long long\n#define res register int\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read() {\n    res s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9') {\n        if(ch=='-')w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return s*w;\n}\ninline void write(res x) {\n    if(x<0)putchar('-'),x=-x;\n    if(x>9)write(x/10);\n    putchar(x%10+'0');\n}\nconst int N=1e5+10,NN=27000;\nint n,m,len,part[N],ans[N];\nbitset<N> F[NN+10],temp;\nint A[N],B[N],L1[N],L2[N],L3[N],R1[N],R2[N],R3[N],cnt[N],l,r,tot;\nbool flag[NN+10];\nstruct mdzz {\n    int L,R,id;\n    mdzz() {}\n    mdzz(res L,res R,res id):L(L),R(R),id(id) {}\n} Q[N];\ninline bool cmp(mdzz x,mdzz y) {\n    return part[x.L]==part[y.L]?x.R<y.R:part[x.L]<part[y.L];\n}\ninline void init() {\n    memset(cnt,0,sizeof(cnt));\n    memset(flag,0,sizeof(flag));\n    temp.reset();\n    l=1,r=0,tot=0;\n}\ninline void add(res x) {\n    temp[x+cnt[x]]=1,cnt[x]++;\n}\ninline void rem(res x) {\n    temp[x+cnt[x]-1]=0,cnt[x]--;\n}\ninline void solve(res lx,res rx) {\n    init();\n    for(res i=lx; i<=rx; i++) {\n        Q[++tot]=mdzz(L1[i],R1[i],i),ans[i]+=R1[i]-L1[i]+1;\n        Q[++tot]=mdzz(L2[i],R2[i],i),ans[i]+=R2[i]-L2[i]+1;\n        Q[++tot]=mdzz(L3[i],R3[i],i),ans[i]+=R3[i]-L3[i]+1;\n    }\n    //for(res i=1;i<=tot;i++)printf(\"%d %d %d\\n\",Q[i].L,Q[i].R,Q[i].id);\n    sort(Q+1,Q+tot+1,cmp);\n    //for(res i=1;i<=tot;i++)printf(\"%d %d %d\\n\",Q[i].L,Q[i].R,Q[i].id);\n    for(res i=1; i<=tot; i++) {\n        while(r<Q[i].R)add(A[++r]);\n        while(l>Q[i].L)add(A[--l]);\n        while(r>Q[i].R)rem(A[r--]);\n        while(l<Q[i].L)rem(A[l++]);\n        if(!flag[Q[i].id-lx+1]) flag[Q[i].id-lx+1]=1,F[Q[i].id-lx+1]=temp;\n        else F[Q[i].id-lx+1]&=temp;\n    }\n    for(res i=lx; i<=rx; i++)ans[i]-=F[i-lx+1].count()*3;\n}\nint main() {\n    n=read(),m=read();\n    len=sqrt(n);\n    for(res i=1; i<=n; i++)A[i]=B[i]=read(),part[i]=(i-1)/len+1;\n    sort(B+1,B+n+1);\n    for(res i=1; i<=n; i++)A[i]=lower_bound(B+1,B+1+n,A[i])-B;\n    for(res i=1; i<=m; i++)L1[i]=read(),R1[i]=read(),L2[i]=read(),R2[i]=read(),L3[i]=read(),R3[i]=read();\n    //for(res i=1;i<=n;i++)printf(\"%d %d\\n\",A[i],B[i]);\n    for(res i=1; i<=m; i+=NN)solve(i,min(m,i+NN-1));\n    for(res i=1; i<=m; i++)write(ans[i]),puts(\"\");\n    return 0;\n}\n```",
        "postTime": 1530622713,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010Ynoi2016\u3011\u6389\u8fdb\u5154\u5b50\u6d1e"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u9898\u7ed9\u6211\u7684\u4e00\u4e2a\u5f88\u5927\u7684\u542f\u793a\u5c31\u662f\u5e26\u6743\u7684 bitset \u600e\u4e48\u5199\u3002\n\n\u6b63\u5e38\u7684 bitset \u5982\u679c\u67d0\u4e2a\u503c\u51fa\u73b0\u591a\u6b21\u53ea\u4f1a\u5360\u7528\u4e00\u4e2a\u4f4d\u7f6e\uff08\u6216\u8005\u8bf4\u53ea\u4f1a\u4f7f\u4e00\u4e2a\u4f4d\u7f6e\u91cd\u590d\u5730\u53d8\u6210 $1$\uff09\uff0c\u4f46\u662f\u6211\u4eec\u5e0c\u671b\u51fa\u73b0\u591a\u6b21\u7684\u503c\u80fd\u591f\u5360\u7528\u591a\u4e2a\u4f4d\u7f6e\u3002\u8fd9\u6837\u505a\u7684\u610f\u4e49\u5728\u4e8e\u53d6\u5e76\u96c6\u65f6\u80fd\u591f\u83b7\u77e5\u91cd\u590d\u7684\u4e2a\u6570\u800c\u4e0d\u662f\u91cd\u590d\u7684\u79cd\u7c7b\u6570\uff0c\u540c\u65f6\u5728\u5bf9 bitset \u53d6 count \u7684\u65f6\u5019\u591a\u4e2a\u91cd\u590d\u6570\u80fd\u591f\u91cd\u590d\u4ea7\u751f\u8d21\u732e\u3002\u5f53\u7136\uff0c\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u8db3\u591f\u5c0f\uff0c\u6216\u8005\u5747\u644a\u8db3\u591f\u5c0f\u7684\u4e0a\u9650\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u4f1a\u7206\u7a7a\u95f4\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u6211\u4eec\u8981\u8bb0\u6bcf\u4e2a\u6570\u5b9e\u9645\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u6bcf\u4e2a\u6570\u6709\u4e00\u4e2a\u7d22\u5f15\u8868\u793a\u8fd9\u4e2a\u6570\u5f00\u59cb\u7b2c\u4e00\u4e2a\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u540e\u9762\u4e00\u4e9b\u4f4d\u7f6e\u90fd\u662f\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u7684\uff0c\u6bcf\u6b21\u66f4\u65b0 \u7d22\u5f15+\u6570\u91cf \u7684\u4f4d\u7f6e\u3002\u4e0d\u8fc7\u56e0\u4e3a\u8fd9\u4e2a\uff0c\u5b83\u7684\u5b9e\u9645\u5e94\u7528\u53ef\u80fd\u53ea\u6709\u83ab\u961f\u4e86\u5427\uff1f\n\n\u5f53\u7136\uff0c~~\u56e0\u4e3a\u662f Ynoi~~ \u8fd9\u9898\u8981\u662f\u6570\u636e\u8303\u56f4\u5c0f\u4e00\u70b9\u53ef\u80fd\u5c31\u653e\u8fc7\u4e86\u66b4\u529b\uff0c\u6240\u4ee5\u5373\u4f7f\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\uff0c\u5747\u644a\u8db3\u591f\u5c0f\uff0c\u8fd8\u662f\u88ab\u5361\u4e86\u7a7a\u95f4\u3002\u90a3\u4e48\u7528\u4e00\u4e2a\u4e0d\u592a\u5e38\u89c1\u7684\u65b9\u6cd5\uff0c\u628a\u8be2\u95ee\u5206\u7ec4\u5c31\u53ef\u4ee5\u4e86\uff0c\u7531\u4e8e lxl \u975e\u5e38\u826f\u5fc3\uff08\u786e\u4fe1\uff09\uff0c\u6ca1\u5438\u6c27\u4e5f\u8fc7\u4e86\u8fd9\u9898\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\u672c\u8eab\uff0c\u662f\u591a\u4e2a\u533a\u95f4\u7684\u53ef\u79bb\u7ebf\u8be2\u95ee\uff0c\u6570\u636e\u8303\u56f4\u53ea\u6709 $10^5$\uff0c\u5f88\u5bb9\u6613\u770b\u51fa\u662f\u83ab\u961f\uff0c\u540c\u4e00\u4e2a\u8be2\u95ee\u91cc\u9762\u6709\u591a\u4e2a\u4e92\u76f8\u72ec\u7acb\u7684\u5b50\u8be2\u95ee\uff0c\u8fd9\u4e2a\u975e\u5e38\u597d\u641e\uff0c\u5c31\u989d\u5916\u5730\u8bbe\u7f6e\u4e00\u4e2a\u7b54\u6848\u6570\u7ec4\u7136\u540e\u628a\u5b50\u8be2\u95ee\u62c6\u5f00\u6765\u5c31\u597d\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,val[100005],Alpha[100005],S,rt,cnt[100005],neko[100005];\nbitset<100005>ans[10005],cur,mk;\nint Schwarzkopf_Henkal=1e4;\nstruct node{\n    int l,r,id;\n    friend bool operator<(node a,node b){\n        if(a.l/S!=b.l/S)\n            return a.l<b.l;\n        return a.r<b.r;\n    }\n}t[300005];\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    S=ceil(n/sqrt(m));\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",&val[i]);\n        Alpha[i]=val[i];\n    }\n    sort(Alpha+1,Alpha+n+1);\n    // cout<<'\\n';\n    for(int i=1;i<=n;i++){\n        val[i]=lower_bound(Alpha+1,Alpha+n+1,val[i])-Alpha;\n        // cout<<val[i]<<\" \";\n    }\n    while(m>0){\n        mk.reset();\n        cur.reset();\n        memset(neko,0,sizeof(neko));\n        memset(cnt,0,sizeof(cnt));\n        rt=0;\n        for(int i=1;i<=min(m,Schwarzkopf_Henkal);i++){\n            for(int j=1,l,r;j<=3;j++){\n                scanf(\"%d%d\",&l,&r);\n                t[++rt]=(node){l,r,i};\n                neko[i]+=r-l+1;\n            }\n        }\n        sort(t+1,t+rt+1);\n        for(int i=1,l=1,r=0;i<=rt;i++){\n            while(l>t[i].l){\n                l--;\n                cur[val[l]+cnt[val[l]]]=1;\n                cnt[val[l]]++;\n            }\n            while(r<t[i].r){\n                r++;\n                cur[val[r]+cnt[val[r]]]=1;\n                cnt[val[r]]++;\n            }\n            while(l<t[i].l){\n                cnt[val[l]]--;\n                cur[val[l]+cnt[val[l]]]=0;\n                l++;\n            }\n            while(r>t[i].r){\n                cnt[val[r]]--;\n                cur[val[r]+cnt[val[r]]]=0;\n                r--;\n            }\n            if(mk[t[i].id])\n                ans[t[i].id]&=cur;\n            else ans[t[i].id]=cur;\n            mk[t[i].id]=1;\n        }\n        for(int i=1;i<=min(m,Schwarzkopf_Henkal);i++)\n            printf(\"%d\\n\",neko[i]-3*ans[i].count());\n        m-=Schwarzkopf_Henkal;\n    }\n}\n```",
        "postTime": 1601893513,
        "uid": 251723,
        "name": "Schwarzkopf_Henkal",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "## \u9898\u610f\u7b80\u8ff0\n\nYnoi\u7684\u9898\u8c8c\u4f3c\u9898\u9762\u90fd\u5f88\u7b80\u6d01\u2026\u2026\uff08\u9664\u4e86\u60ef\u4f8b\u7684\u4e00\u5927\u5806Gal\u6216Anime\u7684\u56fe\u7247+\u5bf9\u8bdd\u4ee5\u5916\uff09\n\n## \u9898\u89e3\n\n\u8bfb\u5b8c\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6bcf\u8f6e\u8be2\u95ee\u7684\u7b54\u6848\u662f\u8fd9\u4e2a\u4e1c\u897f:\n\n$$\n\\sum_{i=1}^{3}(r_{i}-l_{i}+1)-P\\times 3\n$$\n\n\u5176\u4e2d\uff0c$P$ \u8868\u793a\u4e09\u4e2a\u533a\u95f4\u91cc\u9762\u7684\u516c\u5171\u989c\u8272\u6570\u91cf\u3002\n\n\u524d\u9762\u90a3\u4e2a $\\sum$ \u91cc\u9762\u7684\u4e1c\u897f\u5f88\u597d\u7ef4\u62a4\uff0c\u6211\u4eec\u4e3b\u8981\u6765\u8bb2\u540e\u9762\u4e00\u90e8\u5206\u7684\u7ef4\u62a4\u65b9\u6cd5\u3002\n\n\u9996\u5148\u521d\u59cb\u5e8f\u5217\u7684 $a_{i}$ \u662f\u4e00\u5b9a\u8981\u79bb\u6563\u5316\u4e00\u904d\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8868\u793a\u51fa\u51fa\u73b0\u7684\u6700\u5c11\u6b21\u6570\u5462\uff1f\n\n\u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4e32\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5c31\u662f\u4e00\u4e2a $\\operatorname{bit\\_and}$ \u7684\u64cd\u4f5c\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e09\u4e2a\u533a\u95f4\u5206\u5f00\u5904\u7406\u518d\u5408\u5e76\u3002\u76f4\u63a5\u7ef4\u62a4\u590d\u6742\u5ea6\u8fc7\u9ad8\uff0c\u7528 bitset \u4f18\u5316\u3002\u7531\u4e8e\u8fd9\u662f\u4e2a\u4e8c\u8fdb\u5236\u5e8f\u5217\uff0c\u6240\u4ee5\u79bb\u6563\u5316\u7684\u65f6\u5019\u4e0d\u80fd\u53bb\u91cd\uff0c\u5426\u5219\u7b54\u6848\u5c31\u4f1a\u504f\u5927\u3002\n\n\u76f4\u63a5\u64cd\u4f5c\u5bb9\u6613 MLE\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u5c0ftrick\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8be2\u95ee\u5206\u6279\u5904\u7406\uff0c\u8fd9\u6837\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <queue>\n#include <bitset>\n#include <cmath>\n\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\nconst int N = 1e5 + 5;\nconst int F = 23333 + 5;\nint n, m, block, origin[N], appear[N];\nint cnt[N], ans[N], vis[25005];\nint l1[N], l2[N], l3[N];\nint r1[N], r2[N], r3[N];\nbitset < N > S[F];\nvector < int > disc;\nstruct AskSet {\n\tint l, r;\n\tint id, p;\n} Q[N];\n\nint GetID(int x) {\n\treturn lower_bound(disc.begin(), disc.end(), x) - disc.begin() + 1;\n}\n\nbool SortWith(const AskSet& x, const AskSet& y) {\n\treturn (x.p < y.p) || (x.p == y.p && x.r < y.r);\n}\n\nvoid MakeCont(int pos, int flags, bitset < N >& bit) {\n\tpos = origin[pos];\n\tif (flags > 0) bit[pos + cnt[pos]] = 1;\n\telse bit[pos + cnt[pos] - 1] = 0;\n\tcnt[pos] += flags;\n}\n\nvoid Contribute(int fr, int ba) {\n\tmemset(cnt, 0, sizeof cnt);\n\tmemset(vis, 0, sizeof vis);\n\tbitset < N > bit; bit.reset();\n\tint l = 1, r = 0, subs = 0;\n\tfor (int i = fr; i <= ba; ++i) {\n\t\tQ[++subs] = {l1[i], r1[i], i, appear[l1[i]]};\n\t\tQ[++subs] = {l2[i], r2[i], i, appear[l2[i]]};\n\t\tQ[++subs] = {l3[i], r3[i], i, appear[l3[i]]};\n\t\tans[i] += (r3[i] - l3[i]) + (r2[i] - l2[i]) + (r1[i] - l1[i]) + 3;\n\t}\n\tsort(Q + 1, Q + 1 + subs, SortWith);\n\tfor (int i = 1; i <= subs; ++i) {\n\t\twhile (r < Q[i].r) MakeCont(++r, 1, bit);\n\t\twhile (l > Q[i].l) MakeCont(--l, 1, bit);\n\t\twhile (r > Q[i].r) MakeCont(r--, -1, bit);\n\t\twhile (l < Q[i].l) MakeCont(l++, -1, bit);\n\t\tif (!vis[Q[i].id - fr + 1]) {\n\t\t\tvis[Q[i].id - fr + 1] = 1;\n\t\t\tS[Q[i].id - fr + 1] = bit;\n\t\t} else {\n\t\t\tS[Q[i].id - fr + 1] &= bit;\n\t\t}\n\t}\n\tfor (int i = fr; i <= ba; ++i)\n\t\tans[i] -= S[i - fr + 1].count() * 3;\n}\n\nsigned main() {\n\tscanf(\"%d %d\", &n, &m);\n\tblock = sqrt(n);\n\tfor (int i = 1; i <= n; ++i) {\n\t\tscanf(\"%d\", &origin[i]);\n\t\tappear[i] = (i - 1) / block + 1;\n\t\tdisc.push_back(origin[i]);\n\t}\n\tsort(disc.begin(), disc.end());\n\tfor (int i = 1; i <= n; ++i)\n\t\torigin[i] = GetID(origin[i]);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tscanf(\"%d %d\", &l1[i], &r1[i]);\n\t\tscanf(\"%d %d\", &l2[i], &r2[i]);\n\t\tscanf(\"%d %d\", &l3[i], &r3[i]);\n\t}\n\tfor (int i = 1; i <= m; i += 23333) Contribute(i, min(m, i + 23332));\n\tfor (int i = 1; i <= m; ++i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1591079351,
        "uid": 161849,
        "name": "cirnovsky",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "upd on 7/29\uff1a\u53d1\u73b0\u9898\u89e3\u8bf4\u7684\u5f88\u6709\u95ee\u9898\uff0c\u6539\u4e00\u4e0b\n\n---\n\n\u8fd9\u7b97\u662fYnoi\u9898\u91cc\u9762\u6bd4\u8f83\u6e05\u65b0\u7684\u4e00\u9898\u4e86\uff0c\u5c45\u7136\u4e0d\u5361\u5e38\uff0c\u6211\u4ea4\u4e0a\u53bb\u4e00\u904d\u8fc7\uff08\u5927\u96fe\n\n\u524d\u7f6e\u829d\u58eb\uff1a\u83ab\u961f\uff0cbitset\n\n\u9996\u5148\u5982\u679c\u4f60\u505a\u8fc7[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P1494)\u7684\u8bdd\u90a3\u4e48\u4f60\u80af\u5b9a\u4f1a\u60f3\u5230\u83ab\u961f\uff0c\u7ef4\u62a4\u533a\u95f4\n\n\u4f46\u662f\u76f4\u63a5\u53bb\u7ef4\u62a4\u597d\u50cf\u5f88\u56f0\u96be\u3002\u3002\u3002\n\n\u6ce8\u610f\u5230\u5176\u5b9e\u7b54\u6848\u5c31\u662f\u603b\u6570\u51cf\u53bb\u4e09\u4e2a\u533a\u95f4\u7684\u4ea4\u96c6\u7684\u5927\u5c0f\u518d\u4e58\u4e2a\u4e09\uff0c\u539f\u56e0\u662f\u5220\u6570\u7684\u65f6\u5019\u5176\u5b9e\u5c31\u662f\u628a\u4ea4\u96c6\u91cc\u9762\u7684\u6570\u5168\u90e8\u5220\u6389\u4e86\u3002\n\n\u4e8e\u662f\u8003\u8651\u7528bitset\u6765\u7ef4\u62a4\u4e0b\u4ea4\u96c6\uff0c\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u5927\u6982\u662f$O(n^2/w+n\\sqrt n)$\uff0c\u7a7a\u95f4\u662f$O(n^2/w)$\u7684\n\n\u4f46\u662f\u4f60\u4f1a\u53d1\u73b0\u8fd9\u9053\u9898\u6bd2\u7624\u5230\u5f00\u59cb\u5361\u4f60\u7a7a\u95f4\u3002\u3002\u3002\n\n\u4e8e\u662f\u4f60\u53bb\u7ffb\u7ffb\u9898\u89e3\uff0c\u7136\u540e\u9898\u89e3\u544a\u8bc9\u4f60\u8fd9\u5c31\u662f\u6b63\u89e3\uff0c\u4f60\u53ea\u8981\u518d\u628a\u8be2\u95ee\u5206\u6210\u82e5\u5e72\u7ec4\uff0c\u6bcf\u7ec4\u53bb\u6309\u7167\u4e0a\u9762\u7684\u505a\u6cd5\u505a\u4e00\u904d\u5c31\u53ef\u4ee5\u4e86\n\n\u7136\u540e\u624b\u7b97\u4e0b\u7a7a\u95f4\u6700\u591a\u5141\u8bb8\u591a\u5c11\u5c31\u53ef\u4ee5\u8fc7\u6389\u4e86\n\n\u4ee3\u7801\u5c31\u4e0d\u653e\u4e86",
        "postTime": 1587563749,
        "uid": 121027,
        "name": "Spasmodic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "\u5e26\u4e0a\u516b\u805a\u6c27\u80fd\u76f4\u63a5\u8fc7\u7684\u80af\u5b9a\u90fd\u662f lxl \u7684\u826f\uff08\u51c9\uff09\u5fc3\u9898\uff08\u786e\u4fe1\n\n$10^5$\uff1f\n\n\u53ef\u4ee5\u79bb\u7ebf\uff1f\n\n~~\u8fd8\u662f lxl \u7684\u9898\uff1f~~\n\n\u6240\u4ee5\u80af\u5b9a\u662f\u83ab\u961f\u5566qwq\u3002\n\n\u4f46\u662f\u6211\u4eec\u5f88\u5feb\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u503c\u57df\u4e0a\u66b4\u529b\u5339\u914d\u6570\u7ec4\uff0c\u5373\u4f7f\u5728\u79bb\u6563\u5316\u4e4b\u540e\u4f9d\u7136\u662f $O(N)$ \u7684\uff0c\u8fd9\u6837\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(N^2)$ \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u53d1\u73b0\u79bb\u53ef\u63a5\u53d7\u7684\u590d\u6742\u5ea6\u5e76\u4e0d\u8fdc\uff0c\u6240\u4ee5\u8003\u8651 bitset \u5361\u6389 $64$ \u500d\u5e38\u6570\u3002\n\n\u4f46\u662f\u73b0\u5728\u6709\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\uff1abitset \u53ea\u80fd\u7ef4\u62a4 $0$ \u548c $1$\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u53ef\u4ee5\u591a\u6b21\u51fa\u73b0\u4e00\u4e2a\u6570\u3002\n\n\u8fd9\u91cc\u8003\u8651\u66f4\u6362\u79bb\u6563\u5316\u7684\u65b9\u6cd5\u3002\n\n\u56e0\u4e3a\u8981\u652f\u6301\u7684\u662f\u51fa\u73b0\u6b21\u6570\u53d6 min\uff0c\u800c\u6b64\u9898\u4e0d\u5e26\u4fee\uff0c\u51fa\u73b0\u6b21\u6570\u6700\u5927\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5c06\u4e00\u4e2a\u6570\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\u8bbe\u5b9a\u4e3a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u7684\u6570\u7684\u6570\u91cf\u3002\n\n\u6bd4\u5982 $\\{1,2,2,3,3,10,11,11\\}$ \u79bb\u6563\u5316\u540e\u5e94\u4e3a $\\{1,2,2,4,4,6,7,7\\}$\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff1a\u5728\u7ef4\u62a4\u7684\u65f6\u5019\uff0c\u5047\u5982\u503c $x$ \u5728\u6574\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u8fc7 $c$ \u6b21\uff0c\u5728 bitset \u7ef4\u62a4\u7684\u533a\u95f4\u5185\u51fa\u73b0\u4e86 $c_0$ \u6b21\uff0c\u90a3\u4e48\u6b64\u65f6 $[x,x+c_0-1]$ \u4e2d\u662f $1$\uff0c$[x+c_0,x+c-1]$ \u4e2d\u90fd\u662f $0$\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5 and \u4e86\u3002\n\n\u73b0\u5728\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u91cc\u6709 $10^5$ \u4e2a\u8be2\u95ee\uff0c\u4f46\u662f $10^5$ \u4e2a $10^5$ \u7684 bitset \u5f00\u4e0d\u4e0b\u600e\u4e48\u529e\uff1f\n\n\u8003\u8651\u5f3a\u884c\u5206\u7ec4\uff0c\u6211\u8fd9\u91cc\u62c6\u4e864\u7ec4\uff0c\u8fd9\u6837\u5c31\u5c06\u7a7a\u95f4\u538b\u7f29\u5230\u4e86 $2.5 \\times 10^4 \\times 10^5$bit\u3002\u5b9e\u6d4b\u5927\u6982 300M \u5de6\u53f3\uff0c\u4e0d\u662f\u5f88\u5361\u3002\n\n\u6700\u540e\u8d34\u4e00\u4e2a\u4ee3\u7801\u5427qwq\n\n```cpp\n#pragma GCC optimize(\"Ofast\",\"-funroll-loops\",\"-fdelete-null-pointer-checks\")\n#pragma GCC target(\"ssse3\",\"sse3\",\"sse2\",\"sse\",\"avx2\",\"avx\")\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <queue>\n#include <bitset>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nconst int N = 100005, S = 317, DIV = 25000;\nstruct query {\n\tint l, r, i;\n};\nint n, a[N], m, pos[N], cnt[N], tot[N];\nquery qry[N * 3];\npriority_queue <pair <int, int>, vector <pair <int, int> >, greater <pair <int, int> > > que;\nbitset <N> ans[DIV + 5], cur;\n\ninline bool cmp(const query& a, const query& b) {\n\treturn (pos[a.l] ^ pos[b.l] ? pos[a.l] < pos[b.l] : (pos[a.l] & 1 ? a.r < b.r : a.r > b.r));\n}\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (register int i = 1;i <= n;i++) a[i] = qread(), pos[i] = (i - 1) / S + 1;\n}\n\ninline void Prefix() {\n\tfor (register int i = 1;i <= n;i++) que.push(make_pair(a[i], i));\n\tregister int rk = 1;\n\twhile (!que.empty()) {\n\t\tregister int val = que.top().first, trk = rk;\n\t\twhile (!que.empty() && que.top().first == val) {\n\t\t\ta[que.top().second] = trk;\n\t\t\trk++;\n\t\t\tque.pop();\n\t\t}\n\t}\n}\n\ninline void Add(int pos) {\n\tcnt[a[pos]]++;\n\tcur.set(a[pos] + cnt[a[pos]] - 1);\n}\n\ninline void Del(int pos) {\n\tcur.reset(a[pos] + cnt[a[pos]] - 1);\n\tcnt[a[pos]]--;\n}\n\ninline void Solve() {\n\tfor (register int i = 1;i <= DIV && i <= m;i++) {\n\t\tqry[3 * i - 2].l = qread(); qry[3 * i - 2].r = qread(); qry[3 * i - 2].i = i;\n\t\tqry[3 * i - 1].l = qread(); qry[3 * i - 1].r = qread(); qry[3 * i - 1].i = i;\n\t\tqry[3 * i].l = qread(); qry[3 * i].r = qread(); qry[3 * i].i = i;\n\t\tans[i].set();\n\t\ttot[i] = qry[3 * i - 2].r - qry[3 * i - 2].l + 1\n\t\t\t   + qry[3 * i - 1].r - qry[3 * i - 1].l + 1\n\t\t\t   + qry[3 * i].r - qry[3 * i].l + 1;\n\t}\n\tsort(qry + 1, qry + Min(DIV * 3, 3 * m) + 1, cmp);\n\tregister int l = 1, r = 0;\n\tmemset(cnt, 0, sizeof(cnt));\n\tcur.reset();\n\tfor (register int i = 1;i <= Min(DIV * 3, 3 * m);i++) {\n\t\twhile (l > qry[i].l) Add(--l);\n\t\twhile (r < qry[i].r) Add(++r);\n\t\twhile (r > qry[i].r) Del(r--);\n\t\twhile (l < qry[i].l) Del(l++);\n\t\tans[qry[i].i] &= cur;\n\t}\n\tfor (register int i = 1;i <= Min(DIV, m);i++) printf(\"%d\\n\", tot[i] - ans[i].count() * 3);\n\tm -= DIV;\n}\n\nint main() {\n\tRead();\n\tPrefix();\n\twhile (m >= 0) Solve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1582640780,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    },
    {
        "content": "> \u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u7ec4 $a$\u3002\u6709 $m$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e09\u6bb5\u533a\u95f4 $[l_1,r_1]$\uff0c$[l_2,r_2]$\uff0c$[l_3,r_3]$\uff0c\u628a\u8fd9\u4e09\u6bb5\u533a\u95f4\u4e2d\u540c\u65f6\u51fa\u73b0\u7684\u6570\u4e00\u4e2a\u4e00\u4e2a\u5220\u6389\uff0c\u95ee\u6700\u540e\u4e09\u4e2a\u533a\u95f4\u5269\u4e0b\u7684\u6570\u7684\u4e2a\u6570\u548c\uff0c**\u8be2\u95ee\u72ec\u7acb**\u3002\n\n> $1 \\leq n \\leq 10^5$\uff0c$1 \\leq a_i \\leq 10^9$\n\n\u7b2c\u4e00\u9053 Ynoi\uff0c\u5199\u4e2a\u9898\u89e3\u7eaa\u5ff5\u4e00\u4e0b\u3002\n\n\u770b\u5230\u8fd9\u9053\u9898\u4e09\u4e2a\u533a\u95f4\uff0c\u5e76\u4e14\u4e2a\u6570\u548c\u4e5f\u662f\u9700\u8981\u4e3b\u5e2d\u6811\u4e00\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u624d\u80fd\u7ef4\u62a4\uff0c\u5c31\u77e5\u9053\u8fd9\u9053\u9898\u6570\u636e\u7ed3\u6784\u4e0d\u597d\u7ef4\u62a4\u3002\n\n\u4f46\u662f $10^5$ \u7684\u6570\u636e\u8303\u56f4 $n \\sqrt n$ \u662f\u7ef0\u7ef0\u6709\u4f59\u7684\uff0c\u5c31\u53ef\u4ee5\u60f3\u5230\u83ab\u961f\u3002\u518d\u4e00\u770b\u5230\u533a\u95f4\u53d6\u5e76\u96c6\u53ef\u4ee5\u60f3\u5230 bitset\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u8be2\u95ee\u62c6\u6210\u4e09\u4e2a\u8be2\u95ee\uff0c\u7528\u83ab\u961f\u5206\u522b\u7ef4\u62a4\u8fd9\u4e09\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u6570\u7684\u96c6\u5408\uff0c\u7136\u540e\u53d6\u5e76\u96c6\u3002\u90a3\u4e48\u6700\u7ec8\u4e00\u4e2a\u8be2\u95ee\u7684\u7b54\u6848 $=$ \u8fd9\u4e09\u6bb5\u533a\u95f4\u7684\u957f\u5ea6\u548c $-\\ 3\\ \\times $ \u5e76\u96c6\u7684\u5927\u5c0f\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u533a\u95f4\u4e2d\u7684\u6570\u53ef\u80fd\u6709\u91cd\u590d\u7684\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6280\u5de7\uff0c\u79bb\u6563\u5316\u7684\u65f6\u5019\u4e0d\u53bb\u91cd\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6ce8\u610f\u70b9\uff1a\u83ab\u961f\u9700\u8981\u5148\u5165\u540e\u51fa\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002\n\n```cpp\n//Coded by tzc_wk\n/*\n\u6570\u636e\u4e0d\u6e05\u7a7a\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u591a\u6d4b\u4e0d\u8bfb\u5b8c\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8fb9\u754c\u4e0d\u7279\u5224\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8d2a\u5fc3\u4e0d\u8bc1\u660e\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\nD P \u987a\u5e8f\u9519\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u5927\u5c0f\u5c11\u7b49\u53f7\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u53d8\u91cf\u4e0d\u7edf\u4e00\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8d8a\u754c\u4e0d\u5224\u65ad\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u8c03\u8bd5\u4e0d\u6ce8\u91ca\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n\u6ea2\u51fa\u4e0d l l\uff0c\u7206\u96f6\u4e24\u884c\u6cea\u3002\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi\t\t\tfirst\n#define se\t\t\tsecond\n#define fz(i,a,b)\tfor(int i=a;i<=b;i++)\n#define fd(i,a,b)\tfor(int i=a;i>=b;i--)\n#define foreach(it,v) for(__typeof(v.begin()) it=v.begin();it!=v.end();it++)\n#define all(a)\t\ta.begin(),a.end()\n#define giveup(...) return printf(__VA_ARGS__),0;\n#define fill0(a)\tmemset(a,0,sizeof(a))\n#define fill1(a)\tmemset(a,-1,sizeof(a))\n#define fillbig(a)\tmemset(a,0x3f,sizeof(a))\n#define fillsmall(a) memset(a,0xcf,sizeof(a))\n#define mask(a)\t\t(1ll<<(a))\n#define maskx(a,x)\t((a)<<(x))\n#define _bit(a,x)\t(((a)>>(x))&1)\n#define _sz(a)\t\t((int)(a).size())\n#define filei(a)\tfreopen(a,\"r\",stdin);\n#define fileo(a)\tfreopen(a,\"w\",stdout);\n#define fileio(a) \tfreopen(a\".in\",\"r\",stdin);freopen(a\".out\",\"w\",stdout)\n#define eprintf(...) fprintf(stderr,__VA_ARGS__)\n#define put(x)\t\tputchar(x)\n#define eoln        put('\\n')\n#define space\t\tput(' ')\n#define y1\t\t\ty_chenxiaoyan_1\n#define y0\t\t\ty_chenxiaoyan_0\ntypedef pair<int,int> pii;\ninline int read(){\n\tint x=0,neg=1;char c=getchar();\n\twhile(!isdigit(c)){\n\t\tif(c=='-')\tneg=-1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c))\tx=x*10+c-'0',c=getchar();\n\treturn x*neg;\n}\ninline void print(int x){\n\tif(x<0){\n\t\tputchar('-');\n\t\tprint(abs(x));\n\t\treturn;\n\t}\n\tif(x<=9)\tputchar(x+'0');\n\telse{\n\t\tprint(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}\ninline int qpow(int x,int e,int _MOD){\n\tint ans=1;\n\twhile(e){\n\t\tif(e&1)\tans=ans*x%_MOD;\n\t\tx=x*x%_MOD;\n\t\te>>=1;\n\t}\n\treturn ans;\n}\nint n=read(),m=read(),a[100005],key[100005];\nconst int BLK_SZ=320;\nint blk,bel[100005],L[100005],R[100005];\nstruct query{\n\tint ind,l,r;\n\tfriend bool operator <(query a,query b){\n\t\tif(bel[a.l]!=bel[b.l])\n\t\t\treturn bel[a.l]<bel[b.l];\n\t\telse if(bel[a.l]&1)\n\t\t\treturn a.r<b.r;\n\t\telse\n\t\t\treturn a.r>b.r;\n\t}\n} q[100005];\nint qs=0,ans[100005];\nbitset<100005> d[21005],cur;\nint cnt[100005];\ninline void ins(int x){\n\tcur[x+cnt[x]]=1;\n\tcnt[x]++;\n}\ninline void del(int x){\n\tcnt[x]--;\n\tcur[x+cnt[x]]=0;\n}\ninline void solve(int M){\n\tfill0(cnt); \n\tqs=0;fill0(ans);\n\tfz(i,1,M){\n\t\tq[++qs].l=read();q[qs].r=read();q[qs].ind=i;ans[i]+=q[qs].r-q[qs].l+1;\n\t\tq[++qs].l=read();q[qs].r=read();q[qs].ind=i;ans[i]+=q[qs].r-q[qs].l+1;\n\t\tq[++qs].l=read();q[qs].r=read();q[qs].ind=i;ans[i]+=q[qs].r-q[qs].l+1;\n\t}\n\tsort(q+1,q+qs+1);\n\tcur.reset();\n\tfz(i,1,M){\n\t\td[i].set();\n\t}\n\tint l=1,r=0;\n\tfz(i,1,qs){\n\t\twhile(l>q[i].l)\tins(a[--l]);\n\t\twhile(r<q[i].r)\tins(a[++r]);\n\t\twhile(l<q[i].l)\tdel(a[l++]);\n\t\twhile(r>q[i].r)\tdel(a[r--]);\n\t\td[q[i].ind]&=cur;\n//\t\tfz(i,1,n)\tcout<<cur[i]<<endl;\n\t}\n\tfz(i,1,M){\n\t\tcout<<ans[i]-3*(d[i].count())<<endl;\n\t}\n}\nsigned main(){\n\tfz(i,1,n)\ta[i]=read(),key[i]=a[i];\n\tsort(key+1,key+n+1);\n\tfz(i,1,n)\ta[i]=lower_bound(key+1,key+n,a[i])-key;\n\tblk=(n-1)/BLK_SZ+1;\n\tfz(i,1,blk){\n\t\tL[i]=(i-1)*BLK_SZ+1;\n\t\tR[i]=min(i*BLK_SZ,n);\n\t\tfz(j,L[i],R[i])\tbel[j]=i;\n\t}\n\tint T=m/5;\n\tsolve(T);solve(T);solve(T);solve(T);solve(m-(T<<2));\n\treturn 0;\n}\n```\n\n~~\u540e\u6392\u819c\u62dc lxl~~",
        "postTime": 1585881834,
        "uid": 115194,
        "name": "lTgMFePRoeZ",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4688 \u3010[Ynoi2016]\u6389\u8fdb\u5154\u5b50\u6d1e\u3011"
    }
]