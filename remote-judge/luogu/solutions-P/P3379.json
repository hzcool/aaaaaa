[
    {
        "content": "> LCA\uff08Least Common Ancestors\uff09\uff0c\u5373\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u662f\u6307\u5728\u6709\u6839\u6811\u4e2d\uff0c\u627e\u51fa\u67d0\u4e24\u4e2a\u7ed3\u70b9u\u548cv\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u3002\n\u2014\u2014\u2014\u6765\u81ea\u767e\u5ea6\u767e\u79d1\n\n\u4f8b\u5982\uff1a\n\n![\u4e00\u68f5\u6811](https://cdn.luogu.com.cn/upload/pic/61612.png )\n\n\u5728\u8fd9\u68f5\u6811\u4e2d $17$ \u548c $8$ \u7684LCA\u5c31\u662f $3$\uff0c $9$ \u548c $7$ \u7684LCA\u5c31\u662f $7$ \u3002\n\n\u660e\u767d\u4e86LCA\u540e\uff0c\u5c31\u4e0b\u6765\u6211\u4eec\u5c31\u8981\u63a2\u8ba8\u63a2\u8ba8LCA\u600e\u4e48\u6c42\u4e86 $qwq$\n\n- \u66b4\u529b\u7b97\u6cd5\n\n \u4ee5 $17$ \u548c $18$ \u4e3a\u4f8b\uff0c\u65e2\u7136\u8981\u6c42LCA\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8ba9\u4ed6\u4eec\u4e00\u4e2a\u4e00\u4e2a\u5411\u4e0a\u722c~~(\u6211\u8981\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0a\u722c \u2014\u2014 \u300a\u8717\u725b\u300b)~~\uff0c\u76f4\u5230\u76f8\u9047\u4e3a\u6b62\u3002\u7b2c\u4e00\u6b21\u76f8\u9047\u5373\u662f\u4ed6\u4eec\u7684LCA\u3002\n\u6a21\u62df\u4e00\u4e0b\u5c31\u662f\uff1a  \n$17->14->10->7->3$  \n$18->16->12->8->5->3$  \n\u6700\u7ec8\u7ed3\u679c\u5c31\u662f $3$  \n**\u5f53\u7136\u8fd9\u4e2a\u7b97\u6cd5\u59a5\u59a5\u7684\u4f1aT\u98de\u6389\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u8fdb\u884c\u4f18\u5316\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u7528\u500d\u589e\u6765\u52a0\u901f\u7684\u500d\u589eLCA\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u4eca\u5929\u4ecb\u7ecd\u7684\u91cd\u70b9\u3002**\n\n- \u500d\u589e\u7b97\u6cd5\n\n \u6240\u8c13\u500d\u589e\uff0c\u5c31\u662f\u6309$2$\u7684\u500d\u6570\u6765\u589e\u5927\uff0c\u4e5f\u5c31\u662f\u8df3 $1,2,4,8,16,32$ \u2026\u2026 \u4e0d\u8fc7\u5728\u8fd9\u6211\u4eec\u4e0d\u662f\u6309\u4ece\u5c0f\u5230\u5927\u8df3\uff0c\u800c\u662f\u4ece\u5927\u5411\u5c0f\u8df3\uff0c\u5373\u6309\u2026\u2026$32,16,8,4,2,1$\u6765\u8df3\uff0c\u5982\u679c\u5927\u7684\u8df3\u4e0d\u8fc7\u53bb\uff0c\u518d\u628a\u5b83\u8c03\u5c0f\u3002\u8fd9\u662f\u56e0\u4e3a\u4ece\u5c0f\u5f00\u59cb\u8df3\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u201c\u6094\u68cb\u201d\u7684\u73b0\u8c61\u3002\u62ff $5$ \u4e3a\u4f8b\uff0c\u4ece\u5c0f\u5411\u5927\u8df3\uff0c$5\u22601+2+4$,\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u56de\u6eaf\u4e00\u6b65\uff0c\u7136\u540e\u624d\u80fd\u5f97\u51fa$5=1+4$\uff1b\u800c\u4ece\u5927\u5411\u5c0f\u8df3\uff0c\u76f4\u63a5\u53ef\u4ee5\u5f97\u51fa$5=4+$1\u3002\u8fd9\u4e5f\u53ef\u4ee5\u62ff\u4e8c\u8fdb\u5236\u4e3a\u4f8b\uff0c$5(101)$\uff0c\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u586b\u5f88\u7b80\u5355\uff0c\u5982\u679c\u586b\u4e86\u8fd9\u4f4d\u4e4b\u540e\u6bd4\u539f\u6570\u5927\u4e86\uff0c\u90a3\u6211\u5c31\u4e0d\u586b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u5f88\u597d\u64cd\u4f5c\u7684\u3002\n \n \u8fd8\u662f\u4ee5 $17$ \u548c $18$ \u4e3a\u4f8b\uff0c\u5982\u679c\u5206\u522b\u4ece$17$\u548c$18$\u8df3\u5230$3$\u7684\u8bdd\uff0c\u5b83\u4eec\u7684\u8def\u5f84\u5206\u522b\u662f*\uff08\u6b64\u4f8b\u53ea\u6f14\u793a\u500d\u589e\uff0c\u5e76\u4e0d\u662f\u500d\u589eLCA\u7b97\u6cd5\u7684\u771f\u6b63\u8def\u5f84\uff09*\uff1a  \n $17->3$  \n $18->5->3$\n \n \u53ef\u4ee5\u770b\u51fa\u5411\u4e0a\u8df3\u7684\u6b21\u6570\u5927\u5927\u51cf\u5c0f\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nlogn)$,\u5df2\u7ecf\u53ef\u4ee5\u6ee1\u8db3\u5927\u90e8\u5206\u7684\u9700\u6c42\u3002\n \n \u60f3\u8981\u5b9e\u73b0\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u9996\u5148\u6211\u4eec\u8981\u8bb0\u5f55\u5404\u4e2a\u70b9\u7684\u6df1\u5ea6\u548c\u4ed6\u4eec$2^i$\u7ea7\u7684\u7684\u7956\u5148\uff0c\u7528\u6570\u7ec4$\\rm{depth}$\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c$fa[i][j]$\u8868\u793a\u8282\u70b9$i$\u7684$2^j$\u7ea7\u7956\u5148\u3002\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nvoid dfs(int now, int fath) {  //now\u8868\u793a\u5f53\u524d\u8282\u70b9\uff0cfath\u8868\u793a\u5b83\u7684\u7236\u4eb2\u8282\u70b9\n\tfa[now][0] = fath; depth[now] = depth[fath] + 1;\n\tfor(int i = 1; i <= lg[depth[now]]; ++i)\n    \tfa[now][i] = fa[fa[now][i-1]][i-1]; //\u8fd9\u4e2a\u8f6c\u79fb\u53ef\u4ee5\u8bf4\u662f\u7b97\u6cd5\u7684\u6838\u5fc3\u4e4b\u4e00\n\t                                //\u610f\u601d\u662fnow\u76842^i\u7956\u5148\u7b49\u4e8enow\u76842^(i-1)\u7956\u5148\u76842^(i-1)\u7956\u5148\n                                    \t//2^i = 2^(i-1) + 2^(i-1)\n\tfor(int i = head[now]; i; i = e[i].nex)\n    \tif(e[i].t != fath) dfs(e[i].t, now);\n}\n```\n \u9884\u5904\u7406\u5b8c\u6bd5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u627e\u5b83\u7684LCA\u4e86\uff0c\u4e3a\u4e86\u8ba9\u5b83\u8dd1\u5f97\u5feb\u4e00\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u4e00\u4e2a\u5e38\u6570\u4f18\u5316(\u6765\u81ea\u6d1b\u8c37\u63d0\u9ad8\u7ec4\u8bb2\u4e49)\n```cpp\nfor(int i = 1; i <= n; ++i) //\u9884\u5148\u7b97\u51falog_2(i)+1\u7684\u503c\uff0c\u7528\u7684\u65f6\u5019\u76f4\u63a5\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86\n\t  lg[i] = lg[i-1] + (1 << lg[i-1] == i);  //\u770b\u4e0d\u61c2\u7684\u53ef\u4ee5\u624b\u63a8\u4e00\u4e0b\n```\n \u63a5\u4e0b\u6765\u5c31\u662f\u500d\u589eLCA\u4e86\uff0c\u6211\u4eec\u5148\u628a\u4e24\u4e2a\u70b9\u63d0\u5230\u540c\u4e00\u9ad8\u5ea6\uff0c\u518d\u7edf\u4e00\u5f00\u59cb\u8df3\u3002\n\n \u4f46\u6211\u4eec\u5728\u8df3\u7684\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u8df3\u5230\u5b83\u4eec\u7684LCA\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u8bef\u5224\uff0c\u6bd4\u5982$4$\u548c$8$\uff0c\u5728\u8df3\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8ba4\u4e3a$1$\u662f\u5b83\u4eec\u7684LCA\uff0c\u4f46$1$\u53ea\u662f\u5b83\u4eec\u7684\u7956\u5148\uff0c\u5b83\u4eec\u7684LCA\u5176\u5b9e\u662f$3$\u3002\u6240\u4ee5\u6211\u4eec\u8981\u8df3\u5230\u5b83\u4eecLCA\u7684\u4e0b\u9762\u4e00\u5c42\uff0c\u6bd4\u5982$4$\u548c$8$\uff0c\u6211\u4eec\u5c31\u8df3\u5230$4$\u548c$5$\uff0c\u7136\u540e\u8f93\u51fa\u5b83\u4eec\u7684\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u8bef\u5224\u4e86\u3002\n```cpp\nint LCA(int x, int y) {\n\tif(depth[x] < depth[y]) //\u7528\u6570\u5b66\u8bed\u8a00\u6765\u8bf4\u5c31\u662f\uff1a\u4e0d\u59a8\u8bbex\u7684\u6df1\u5ea6 >= y\u7684\u6df1\u5ea6\n\t\tswap(x, y);\n\twhile(depth[x] > depth[y])\n\t\tx = fa[x][lg[depth[x]-depth[y]] - 1]; //\u5148\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\n\tif(x == y)  //\u5982\u679cx\u662fy\u7684\u7956\u5148\uff0c\u90a3\u4ed6\u4eec\u7684LCA\u80af\u5b9a\u5c31\u662fx\u4e86\n\t\treturn x;\n\tfor(int k = lg[depth[x]] - 1; k >= 0; --k) //\u4e0d\u65ad\u5411\u4e0a\u8df3\uff08lg\u5c31\u662f\u4e4b\u524d\u8bf4\u7684\u5e38\u6570\u4f18\u5316\uff09\n\t\tif(fa[x][k] != fa[y][k])  //\u56e0\u4e3a\u6211\u4eec\u8981\u8df3\u5230\u5b83\u4eecLCA\u7684\u4e0b\u9762\u4e00\u5c42\uff0c\u6240\u4ee5\u5b83\u4eec\u80af\u5b9a\u4e0d\u76f8\u7b49\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5c31\u8df3\u8fc7\u53bb\u3002\n\t    \tx = fa[x][k], y = fa[y][k];\n\treturn fa[x][0];  //\u8fd4\u56de\u7236\u8282\u70b9\n}\n```\n \u5b8c\u6574\u7684\u6c42$17$\u548c$18$\u7684LCA\u7684\u8def\u5f84\uff1a  \n $17->10->7->3$  \n $18->16->8->5->3$  \n \u89e3\u91ca\uff1a\u9996\u5148\uff0c$18$\u8981\u8df3\u5230\u548c$17$\u6df1\u5ea6\u76f8\u540c\uff0c\u7136\u540e$18$\u548c$17$\u4e00\u8d77\u5411\u4e0a\u8df3\uff0c\u4e00\u76f4\u8df3\u5230LCA\u7684\u4e0b\u4e00\u5c42($17$\u662f$7$\uff0c$18$\u662f$5$)\uff0c\u6b64\u65f6LCA\u5c31\u662f\u5b83\u4eec\u7684\u7236\u4eb2\n\n\u603b\u4f53\u6765\u8bf4\u5c31\u662f\u8fd9\u6837\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6211\u8fd9\u4e2a\u849f\u84bb\u8bb2\u7684\u5404\u4f4d$dalao$\u80fd\u4e0d\u80fd\u770b\u660e\u767d\n$\\tt{orz}$\n\n#### \u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nstruct zzz {\n    int t, nex;\n}e[500010 << 1]; int head[500010], tot;\nvoid add(int x, int y) {\n\te[++tot].t = y;\n\te[tot].nex = head[x];\n\thead[x] = tot;\n}\nint depth[500001], fa[500001][22], lg[500001];\nvoid dfs(int now, int fath) {\n\tfa[now][0] = fath; depth[now] = depth[fath] + 1;\n\tfor(int i = 1; i <= lg[depth[now]]; ++i)\n\t\tfa[now][i] = fa[fa[now][i-1]][i-1];\n\tfor(int i = head[now]; i; i = e[i].nex)\n\t\tif(e[i].t != fath) dfs(e[i].t, now);\n}\nint LCA(int x, int y) {\n\tif(depth[x] < depth[y]) swap(x, y);\n\twhile(depth[x] > depth[y])\n\t\tx = fa[x][lg[depth[x]-depth[y]] - 1];\n\tif(x == y) return x;\n\tfor(int k = lg[depth[x]] - 1; k >= 0; --k)\n\t\tif(fa[x][k] != fa[y][k])\n\t\t\tx = fa[x][k], y = fa[y][k];\n\treturn fa[x][0];\n}\nint main() {\n\tint n, m, s; scanf(\"%d%d%d\", &n, &m, &s);\n\tfor(int i = 1; i <= n-1; ++i) {\n\t\tint x, y; scanf(\"%d%d\", &x, &y);\n\t\tadd(x, y); add(y, x);\n\t}\n\tfor(int i = 1; i <= n; ++i)\n\t\tlg[i] = lg[i-1] + (1 << lg[i-1] == i);\n\tdfs(s, 0);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint x, y; scanf(\"%d%d\",&x, &y);\n\t\tprintf(\"%d\\n\", LCA(x, y));\n\t}\n\treturn 0;\n}\n```\n- \u5e7f\u544a\n\n \u5728\u4e0b\u7684[\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/34188/)\u548c[github\u535a\u5ba2](http://morslin.github.io/),\u6b22\u8fcedalao\u524d\u53bb\u8650\u83dc\n \n*2019.10.21 upd*\uff1a\u66f4\u6539\u7801\u98ce",
        "postTime": 1521631822,
        "uid": 34188,
        "name": "MorsLin",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u53ea\u60f3\u5230\u500d\u589e\u4e00\u79cd\u505a\u6cd5\uff0c\u771f\u662f\u849f\u84bb23333\n\n\u770b\u4e86\u4e0b\u697c\u4e0b\u5199\u7684\u9898\u89e3\uff0c\u6ce8\u89e3\u592a\u5c11\u4e86\uff0c\u8868\u793a\u849f\u84bb\u770b\u4e0d\u592a\u61c2\u554a\u3002\n\n\u6211\u5c31\u81ea\u5df1\u5199\u4e86\u4e00\u4e2a\u53c8\u8be6\u7ec6\u6ce8\u89e3\u7684\u500d\u589e\uff0c\u7b97\u6cd5\u5185\u5bb9\u4e0e\u697c\u4e0b\u5927\u795e\u7684\u6ca1\u4ec0\u4e48\u592a\u5927\u5dee\u522b\uff0c\u5c31\u662f\u6ce8\u89e3\u5199\u7684\u7a0d\u5fae\u8be6\u7ec6\u4e00\u70b9\uff0c\u65b9\u4fbf\u548c\u6211\u4e00\u6837\u7684\u849f\u84bb\u770b\u770b\u3002\n\n \n        \n    \n                       \n            \n\n    \n\n    \n    \n    \n```cpp\n#include<iostream>\n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<stdio.h>\n#include<vector>\n#define maxn 500500\nusing namespace std;\n///\u96b6\u5c5e\u90bb\u63a5\u8868 \nstruct Edge{                    //\u90bb\u63a5\u8868\u7684\u7ed3\u6784\u4f53 \n    int from,to;\n}edges[2*maxn];                 //\u8fb9\u8981\u4e582\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe \uff1b \nint first[maxn],next[2*maxn];   //\u540c\u7406\uff1b \nint read(){                        //\u8bfb\u5165\u4f18\u5316\uff0c\u53ef\u4ee5\u7167\u7740\u8fd9\u4e2a\u6a21\u677f\u6765\u5199\uff0c\u8fd9\u4e2a\u8fd8\u7b97\u5199\u7684\u6bd4\u8f83\u597d\u770b\u3002 \n    int re=0;\n    char ch=getchar();\n    while (ch<'0' || ch>'9') ch=getchar();\n    while (ch>='0' && ch<='9'){ \n        re=re*10+ch-'0'; \n        ch=getchar();\n    }\n    return re;\n}\n///////////////////////////////////////////////\n///\u5168\u5c40\u53d8\u91cf \nint n,m;\nint root;\nint height[maxn];\nfloat log2n;\n///////////////////////////////////////////////////////\n///\u96b6\u5c5eLCA\u7684\u5168\u5c40\u53d8\u91cf \nint f[maxn][20];// \nint have[maxn];                           //have\uff0c\u6709\u6ca1\u6709\u627e\u8fc7\uff0c\u8fd9\u90fd\u662f\u5957\u8def \u3002 \nvoid dfs(int u,int h){                 //u\u4ee3\u8868\u70b9\u7684\u6807\u53f7\uff0ch\u4ee3\u8868\u9ad8\u5ea6\u3002 \n    int v;\n    height[u]=h;\n    for(int i=1;i<=log2n;i++) {\n        if(h<=(1<<i)) break;              //\u7531\u4e8ei\u662f\u4ece\u5c0f\u5230\u5927\u8ba1\u7b97\u7684\uff0c\u6545\uff081<<i\uff09>=h \u65f6\u53ef\u76f4\u63a5\u9000\u51fa\u3002\u8bf7\u52a1\u5fc5\u60f3\u6e05\u695a\u662f<=  \u8fd8\u662f=\u3002\n        f[u][i] = f[ f[u][i-1] ][i-1]; //\u52a8\u89c4\u8ba1\u7b97\u3002\u540c\u6837\u4e5f\u662f\u4e00\u5207\u500d\u589e\u7b97\u6cd5\u7684\u6838\u5fc3\u3002 \n    }\n    int k=first[u];\n    while(k!=-1){\n        v=edges[k].to;\n        if(!have[v]) {\n            have[v]=1;        \n            f[v][0]=u;                 //\u5c06\u8981\u627e\u7684\u4e0b\u4e00\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u6807\u4e3a\u5f53\u524d\u5904\u7406\u7684\u8282\u70b9u\u3002 \n            dfs(v,h+1);\n        }\n        k=next[k];\n    }\n}\nint require_LCA(int a,int b){\n    int da=height[a],db=height[b];\n//\u7b2c\u4e00\u6b65\uff0c\u5c06a\uff0cb\u4e24\u70b9\u79fb\u5230\u540c\u6837\u7684\u9ad8\u5ea6\uff0c\u53ea\u52a8\u9ad8\u5ea6\u5927\u7684\u90a3\u4e2a\u70b9\u800c\u4e0d\u52a8\u9ad8\u5ea6\u5c0f\u7684\u90a3\u4e2a\u70b9\u3002 \n    if(da!=db) {\n        if(da<db){                   //\u4fdd\u8bc1a\u7684\u9ad8\u5ea6\u662f\u5927\u4e8eb\u7684\u9ad8\u5ea6\u7684\u3002 \n            swap(a,b);\n            swap(da,db);\n        }\n        int d=da-db;\n        for(int i=0;i<=log2n;i++) \n            if( (1<<i) & d) a=f[a][i]; //\u8fd9\u91cc\u7684\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u91cf\n                                       //\u8003\u8651\u5230d\u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u800c\uff081<<i\uff09\u5728\u4e8c\u8fdb\u5236\u4e2d\u53ea\u6709\u7b2c\uff08i+1\uff09\u4f4d\u662f1\uff1b \n                                       //\u90a3\u4e48d\u4e0e\uff081<<i\uff09\u5982\u679c\u67d0\u4e00\u4f4d\u4e3a1\uff0c\u90a3\u4e48\u8868\u793a\u53ef\u4ee5\u5411\u4e0a\u79fb\u52a8\uff0c \n                                       //\u5982\u679c\u6b64\u65f6\u4e0d\u79fb\u52a8\uff0c\u90a3\u4e48i\u589e\u5927\u4e86\u540e\u5c31\u65e0\u6cd5\u4f7fheight[a]==height[b]\u4e86 \n    }\n//\u7b2c\u4e8c\u6b65,\u627e\u5230\u67d0\u4e2a\u4f4d\u7f6ei\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u65f6\uff0cf[a][i]!=f[b][i],\u4f46\u518d\u5411\u4e0a\u79fb\u52a8\u4e00\u6b65\uff0ca\uff0cb\u76f8\u540c\u4e86 \n//\u4ecelog2n\u5f00\u59cb\u4ece\u5927\u5230\u5c0f\u679a\u4e3ei\uff0c\u5982\u679c\u8d85\u8fc7\u4e86a\uff0cb\u7684\u9ad8\u5ea6\uff0c\u5219\u4ee4i\u7ee7\u7eed\u51cf\u5c0f\n//\u5982\u679c\u6ca1\u6709\u8d85\u8fc7a\uff0cb\u7684\u9ad8\u5ea6\uff0c\u90a3\u4e48\u5c31\u5224\u65ad\u79fb\u52a8\u4e86\u540e\u4f1a\u4e0d\u4f1a\u8ba9a==b\uff0c\n//\u662f\uff0c\u5219i\u7ee7\u7eed\u51cf\u5c0f\uff0c\u5426\u5219\uff0c\u4ee4\u6b64\u65f6\u7684a=f[a][i],b=f[b][i]; \n    if(a==b) return b;\n    int i=0;\n    for(i=log2n;i>=0;i--) {\n        if(height[ f[a][i] ]<0) continue;\n        if( f[a][i]==f[b][i] ) continue;\n        else a=f[a][i],b=f[b][i];        //\u987a\u4fbf\u4e00\u63d0\uff0c\u5728\u7b2c\u4e8c\u6b65\u4efb\u4f55\u5730\u65b9\u6ca1\u6709break\uff1b\n                                       //\u6211\u5c31\u662f\u56e0\u4e3a\u5728\u8fd9\u91cc\u5199\u4e86\u4e00\u4e2abreak\uff0c\u7136\u540e\u627e\u4e86\u6211\u4e24\u4e2a\u5c0f\u65f6\u554a\u3002 \n    }    \n    return f[a][0];\n}\n/////////////////////////////////\n///\u636e\u8bf4\u4ece\u4e3b\u51fd\u6570\u5f00\u59cb\u9605\u8bfb\u662f\u4e2a\u597d\u4e60\u60ef\u3002 \nint main(){\n//    freopen(\"in2.txt\",\"r\",stdin);\n    n=read();m=read();root=read();\n    memset(first,-1,sizeof(first));\n    memset(next,-1,sizeof(next));\n    int s,t;\n    int dsd=2*(n-1);\n    for(int i=1;i<=dsd;i+=2) {\n        s=read();t=read();      //\u8bfb\u5165\u4f18\u5316\u3002 \n        edges[i].from=s;\n        edges[i].to=t;\n        edges[i+1].from=t;\n        edges[i+1].to=s;\n        next[i]=first[s];\n        first[s]=i;\n        next[i+1]=first[t];\n        first[t]=i+1;\n    }\n    // \u4ee5\u4e0a\u662f\u90bb\u63a5\u8868\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 \n    log2n=log(n)/log(2)+1;        //C++\u8ba1\u7b97log\u662f\u81ea\u7136\u5bf9\u6570\uff0c\u6211\u4eec\u8981\u7528\u7684\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570\uff0c\u6545\u8981\u9664\u4ee5log(2); \n                                  //\u5bf9\u65e0\u7406\u6570\u52a0\u4e0a1\u6216\u662f0.5\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u53ef\u4ee5\u51cf\u5c0f\u8bef\u5dee\uff1b \n    memset(have,0,sizeof(have));\n    memset(height,0,sizeof(height));\n    memset(f,-1,sizeof(f));\n    have[root]=1;                //fa[][]\u548cheight[]\u8981\u5728dfs\u7406\u8fdb\u884c\u8ba1\u7b97\uff0c\u4e0d\u7136\u6839\u672c\u627e\u4e0d\u5230\u67d0\u4e2a\u975e\u6839\u8282\u70b9\u7684\u7236\u4eb2\u662f\u8c01; \n    dfs(root,1);                \n    for(int i=1;i<=n;i++){\n        for(int j=0;j<=log2n;j++) {\n            if(height[i] <=(1<<j) ) break;\n        }\n    }\n    for(int i=0;i<m;i++) {      //\u5e94\u5bf9\u8981\u6c42\u8fdb\u884c\u6c42\u89e3\u3002 \n        s=read();t=read();\n        int y=require_LCA(s,t);\n        printf(\"%d\\n\",y);\n    }\n    return 0;\n}\n```",
        "postTime": 1479388963,
        "uid": 25029,
        "name": "\u8ffd\u5fc6\u3002\u4f3c\u6d77",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u76f4\u63a5\u5957\u7528\u6a21\u677f\u5c31\u53ef\u4ee5\u4e86\uff0c\u5176\u5b9e\u500d\u589e\u8fd9\u9053\u9898\u5e76\u4e0d\u4f1a\u5d29\u6389\uff0c\u53cd\u800c\uff0c\u500d\u589e\u6765\u505a\u8fd9\u9053\u9898\uff0c\u5176\u5b9e\u66f4\u5229\u4e8e\u521d\u5b66\u8005\u7406\u89e3\uff08\u6bd4\u5982\u6211\uff09\u3002\n\n\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6709\u4e9b\u9898\u6570\u636e\u53ef\u80fd\u4f1a\u592a\u5927\uff0c\u8981\u6ce8\u610f\u6570\u7ec4\u4f1a\u4e0d\u4f1a\u8d85\u5185\u5b58\u3002\u540c\u65f6\u56e0\u4e3a\u662f\u4e00\u4e2a\u6811\uff0c\u6240\u4ee5\u6240\u6709\u8fb9\u662f\u53cc\u5411\u7684\uff0c\u5c31\u9700\u8981\u628astruct\u5f00\u4e24\u500d\u5927\u5c0f\u3002\u8be6\u7ec6\u5728\u4ee3\u7801\u91cc\u89e3\u91ca\u2026\u2026\u2026\u2026\u2026\u2026\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nconst int maxn=500000+2;\nint n,m,s;\nint k=0;\nint head[maxn],d[maxn],p[maxn][21];//head\u6570\u7ec4\u5c31\u662f\u94fe\u63a5\u8868\u6807\u914d\u4e86\u5427\uff1fd\u5b58\u7684\u662f\u6df1\u5ea6\uff08deep\uff09,p[i][j]\u5b58\u7684[i]\u5411\u4e0a\u8d702\u7684j\u6b21\u65b9\u90a3\u4e48\u957f\u7684\u8def\u5f84\nstruct node{\n    int v,next;\n}e[maxn*2];//\u5b58\u6811\nvoid add(int u,int v)\n{\n    e[k].v=v;\n    e[k].next=head[u];\n    head[u]=k++;\n}               //\u52a0\u8fb9\u51fd\u6570\nvoid dfs(int u,int fa)\n{\n    d[u]=d[fa]+1;\n    p[u][0]=fa;\n    for(int i=1;(1<<i)<=d[u];i++)\n        p[u][i]=p[p[u][i-1]][i-1];\n    for(int i=head[u];i!=-1;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v!=fa)\n            dfs(v,u);\n    }\n}                               //\u9996\u5148\u8fdb\u884c\u7684\u9884\u5904\u7406\uff0c\u5c06\u6240\u6709\u70b9\u7684deep\u548cp\u7684\u521d\u59cb\u503cdfs\u51fa\u6765\nint lca(int a,int b)                                          //\u975e\u5e38\u6807\u51c6\u7684lca\u67e5\u627e\n{\n    if(d[a]>d[b])\n        swap(a,b);           //\u4fdd\u8bc1a\u662f\u5728b\u7ed3\u70b9\u4e0a\u65b9\uff0c\u5373a\u7684\u6df1\u5ea6\u5c0f\u4e8eb\u7684\u6df1\u5ea6\n    for(int i=20;i>=0;i--)\n        if(d[a]<=d[b]-(1<<i))\n            b=p[b][i];             //\u5148\u628ab\u79fb\u5230\u548ca\u540c\u4e00\u4e2a\u6df1\u5ea6\n    if(a==b)\n        return a;                 //\u7279\u5224\uff0c\u5982\u679cb\u4e0a\u6765\u548c\u5c31\u548ca\u4e00\u6837\u4e86\uff0c\u90a3\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u7b54\u6848\u4e86\n    for(int i=20;i>=0;i--)\n    {\n        if(p[a][i]==p[b][i])\n            continue;\n        else\n            a=p[a][i],b=p[b][i];           //A\u548cB\u4e00\u8d77\u4e0a\u79fb\n    }\n    return p[a][0];               \u627e\u51fa\u6700\u540ea\u503c\u7684\u6570\u5b57\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    int a,b;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        add(a,b);\n        add(b,a);                      //\u65e0\u5411\u56fe\uff0c\u8981\u52a0\u4e24\u6b21\n    }\n    dfs(s,0);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",lca(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1509162171,
        "uid": 49352,
        "name": "\u5317\u6781\u718a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "emmmmmm\n\n\n\u8fd9\u9053\u9898\u542c\u8bf4\u500d\u589e\u4e0d\u52a0\u4f18\u5316\u4f1a\u88ab\u5361\u3002\u3002\u3002\n\n\n\u6240\u4ee5\u6211\u6b63\u597d\u62ff\u6700\u8fd1\u521a\u5b66\u7684**\u6811\u94fe\u5256\u5206**\u7ec3\u7ec3\u624b\n\n\n\u867d\u7136\u770b\u5230\u9898\u89e3\u91cc\u6709\u6811\u5256\u3002\u3002\u3002\n\n\n\u4f46\u6211\u81ea\u8ba4\u4e3a\u81ea\u5df1\u5199\u7684\u6bd4\u8f83\u4f18\u7f8e\u3002\u3002\u3002\n\n\n\u800c\u4e14\u6700\u5173\u952e\u7684\u662f\u9898\u89e3\u91cc\u597d\u591a\u90fd\u5728\u8bf4\u6811\u5256\u6162\u3002\u3002\u3002\n\n\n\u4ed6\u4eec\u6015\u4e0d\u662f\u5199\u4e86\u5047\u7684\u6811\u5256\u3002\u3002\u3002\n\n\n\u4e0b\u9762\u7ed9\u51fa\u4e25\u683c\u3010\u5e76\u4e0d\u3011\u7684\u590d\u6742\u5ea6\u8bc1\u660e\uff1a\n\n\n\u6811\u5256\u8981\u7528\u5230\u4e24\u6b21dfs\uff0c\u90fd\u662fO\uff08n\uff09\u7684\u590d\u6742\u5ea6\n\n\n\u7136\u540e\u5982\u679c\u56fe\u662f\u6ee1\u4e8c\u53c9\u6811\u7684\u8bdd\u662f\u6700\u574f\u60c5\u51b5\uff0c\u4f46\u6b64\u65f6\u67e5\u8be2\u4e5f\u662fO\uff08logn\uff09\u7684\n\n\n\u3010\u663e\u7136\u6700\u574f\u60c5\u51b5\u6bcf\u6b21\u4e00\u6b65\u6b65\u53d6f[top[x]]\u8d70\uff0c\u8d70\u4e0b\u6765\u662f\u4e00\u4e2a\u6811\u7684\u6df1\u5ea6\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2alogn\u3011\n\n\n\u6240\u4ee5\u7406\u8bba\u590d\u6742\u5ea6\u4e0a\u754c\u5c31\u662fO\uff082n+mlogn\uff09\n\n\n\u800c\u4e14\u5173\u952e\u7684\u662f\u6811\u5256\u5e38\u6570\u8fd8\u6bd4\u500d\u589e\u8981\u5c0f\u3002\u3002\u3002\n\n\n\u500d\u589e\u7684\u8bdd\u5e38\u6570\u867d\u7136\u4e5f\u5f88\u5c0f\n\n\n\u4f46\u662f\u67d0\u96c6\u8bad\u961fdalao\u5199\u8fc7\u4e00\u7bc7\u8bba\u6587\u91cc\u9762\u6709\u4e25\u683c\u7684\u6811\u5256\u7684\u5e38\u6570\u8bc1\u660e\uff0c\u8ba1\u7b97\u7ed3\u679c\u662f\u6811\u5256\u7684\u5e38\u6570\u63a5\u8fd11/2\n\n\n\u518d\u52a0\u4e0a\u6811\u5256\u7528\u7684\u7684\u7a7a\u95f4\u4e5f\u6bd4\u500d\u589e\u554aRMQ\u554a\u5c0f\n\n\n**\u6240\u4ee5\u5199\u6811\u5256\u662f\u5b8c\u5168\u6ca1\u95ee\u9898\u6ef4~**\n\n\n\u90a3\u4e48\u4e0b\u9762\u5c31\u7b80\u5355\u8bf4\u4e0b\u6811\u5256\u601d\u8def\u54af\n\n\n\u6811\u5256\u5c31\u662f\u628a\u6811\u5256\u5206\u6210\u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u94fe\uff0c\u76ee\u524d\u5e38\u7528\u505a\u6cd5\u662f\u5256\u6210\u8f7b\u91cd\u94fe\n\n\n\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49siz[x]\u4e3a\u4ee5x\u4e3a\u6839\u7ed3\u70b9\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u4e2a\u6570\n\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9x\uff0c\u5728\u5b83\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u4e2d\u5bfb\u627e\u4e00\u4e2a\u7ed3\u70b9y\n\n\n\u4f7f\u5f97\u5bf9\u4e8ey\u7684\u5144\u5f1f\u8282\u70b9z\uff0c\u90fd\u6709siz[y]\u2265siz[z]\n\n\n\u6b64\u65f6x\u5c31\u6709\u4e00\u6761\u91cd\u8fb9\u8fde\u5411y\uff0c\u6709\u82e5\u5e72\u6761\u8f7b\u8fb9\u8fde\u5411\u4ed6\u7684\u5176\u4ed6\u5b50\u7ed3\u70b9\u3010\u6bd4\u5982z\u3011\n\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6811\u4e0a\u7684\u4e0d\u5728\u91cd\u94fe\u4e0a\u7684\u8fb9\u7684\u6570\u91cf\u5c31\u4f1a\u5927\u5927\u51cf\u5c11\n\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u6c42LCA\uff08x,y\uff09\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5224\u65ad\u4e24\u70b9\u662f\u5426\u5728\u540c\u4e00\u94fe\u4e0a\n\n\n\u5982\u679c\u4e24\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u6211\u4eec\u53ea\u8981\u627e\u5230\u8fd9\u4e24\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u8f93\u51fa\u5c31\u884c\u4e86\n\n\n\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\n\n\n\u90a3\u5c31\u627e\u5230\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4ee4\u5b83\u7b49\u4e8e\u5b83\u6240\u5728\u7684\u91cd\u94fe\u94fe\u7aef\u7684\u7236\u8282\u70b9\u5373\u4e3ax=f[top[x]]\n\n\n\u76f4\u5230\u4e24\u70b9\u5230\u8fbe\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u8f93\u51fa\u4e24\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\n\n\n**\u4ee3\u7801\u5982\u4e0b\uff1a**\n\n\n```cpp\n//by \u51cf\u7ef4\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nstruct edge{\n    int to,ne;\n}e[1000005];\nint n,m,s,ecnt,head[500005],dep[500005],siz[500005],son[500005],top[500005],f[500005];\nvoid add(int x,int y)\n{\n    e[++ecnt].to=y;\n    e[ecnt].ne=head[x];\n    head[x]=ecnt;\n}\nvoid dfs1(int x)\n{\n    siz[x]=1;\n    dep[x]=dep[f[x]]+1;\n    for(int i=head[x];i;i=e[i].ne)\n    {\n        int dd=e[i].to;\n        if(dd==f[x])continue;\n        f[dd]=x;\n        dfs1(dd);\n        siz[x]+=siz[dd];\n        if(!son[x]||siz[son[x]]<siz[dd])\n            son[x]=dd;\n    }\n}\nvoid dfs2(int x,int tv)\n{\n    top[x]=tv;\n    if(son[x])dfs2(son[x],tv);\n    for(int i=head[x];i;i=e[i].ne)\n    {\n        int dd=e[i].to;\n        if(dd==f[x]||dd==son[x])continue;\n        dfs2(dd,dd);\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<n;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(s);\n    dfs2(s,s);\n    for(int i=1;i<=m;++i)\n    {\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        while(top[x]!=top[y])\n        {\n            if(dep[top[x]]>=dep[top[y]])x=f[top[x]];\n            else y=f[top[y]];\n        }\n        printf(\"%d\\n\",dep[x]<dep[y]?x:y);\n    }\n}\n```",
        "postTime": 1507981493,
        "uid": 35870,
        "name": "\u51cf\u7ef4",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n### \u4e00\u3001RMQ\u6c42LCA\n\u5148\u4ecb\u7ecd\u4e00\u4e0b\u4e09\u4e2a\u6570\u7ec4\u7684\u542b\u4e49\n\nver[i]\u8868\u793adfs\u7b2ci\u4e2a\u8bbf\u95ee\u7684\u7ed3\u70b9\n\nR[i]\u8868\u793aver[i]\u6240\u5728\u7684\u5c42\u6570\uff0c\u4e5f\u5c31\u662f\u6df1\u5ea6\n\nfirst[i]\u8868\u793aver[i]\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807\n\n\u4e3e\u4e2a\u6817\u5b50\u5982\u4e0b\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/18791.png)\n\n\u6c42\u51fa\u6765\u7684\u4e09\u4e2a\u6570\u7ec4\u5982\u4e0b\u56fe\uff0cf->first,v->ver,T\u5c31\u662f\u70b9\u7684\u7f16\u53f7\n\n![](https://cdn.luogu.com.cn/upload/pic/18792.png)\n\n\u5982\u679c\u6211\u4eec\u8981\u6c42d\u548cf\u7684LCA\uff0c\u6211\u4eec\u53d1\u73b0d\u7b2c\u4e00\u6b21\u51fa\u73b0\u57284\uff0cf\u7b2c\u4e00\u6b21\u51fa\u73b0\u57289\uff0c\u7531dfs\u7684\u6027\u8d28\u53ef\u4ee5\u77e5\u9053\uff0c\u57284~9\u4e4b\u95f4\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5c31\u662fLCA\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528ST\u8868\u6765\u5904\u7406\u51fa\u5404\u533a\u95f4\u4e4b\u95f4\u6df1\u5ea6\u7684RMQ\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u53ea\u7528\u5e38\u6570\u7684\u65f6\u95f4\u5c31\u80fd\u8f93\u51fa\u7b54\u6848\uff0c\u5e76\u4e14\u9884\u5904\u7406\u4e5f\u53ea\u7528nlogn\uff0c\u6309\u7167\u9053\u7406\u6765\u8bf4\u662f\u6bd4\u500d\u589e\u8981\u5feb\u7684\u3002\u53ef\u662f\u3002\u3002\u3002\u6211\u53d1\u73b0\u4e0d\u52a0\u8bfb\u5165\u4f18\u5316\u5c31\u5f88\u60ac\u3002\u3002\u65f6\u95f4\u5361\u7684\u5f88\u7d27\uff0c\u8bfb\u5165\u8f93\u51fa\u90fd\u8981\u5c3d\u91cf\u4f18\u3002\u3002\u4e0d\u8981\u50cf\u6211\u4e00\u5f00\u59cb\u7528cout\u3002\u3002\u3002\u597d\u4e86\uff0c\u4e0d\u626f\u6de1\u4e86\n\n\u4e0a\u4ee3\u7801\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m,s,tot=0,cnt=0;\nint head[1000100],nxt[1000100],to[1000100];\nint fir[1000100],ver[1000100],r[1000100];\nint f[20][1000100],rec[20][1000100];\nint read()\n{\n    int x=0,flag=0;\n    char ch=getchar();\n    if(ch=='-') flag=1;\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x*=10,x+=ch-'0',ch=getchar();\n    if(flag) return -x;\n    return x;\n}\nvoid addedge(int x,int y)\n{\n    cnt++;\n    nxt[cnt]=head[x];\n    head[x]=cnt;\n    to[cnt]=y;\n}\nvoid dfs(int u,int dep)//dfs\u5904\u7406\u51fa\u4e09\u4e2a\u6570\u7ec4\n{\n\tfir[u]=++tot,ver[tot]=u,r[tot]=dep;\n\tfor(int i=head[u];i!=-1;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(!fir[v])\n\t\t{\n\t\t\tdfs(v,dep+1);\n\t\t\tver[++tot]=u,r[tot]=dep;\n\t\t}\n\t}\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tx=read(),y=read();\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tdfs(s,1);\n    //ST\u8868\u6c42RMQ\uff0c\u4e0d\u4f1aST\u8868\u7684\u7ae5\u978b\u5148\u53bb\u505a\u4e00\u4e0bST\u8868\u6a21\u677f\u3002\u3002\u3002\n\tfor(int i=1;i<=tot;i++)\n\t\tf[0][i]=r[i],rec[0][i]=ver[i];\n\tfor(int i=1;i<=log(tot)/log(2);i++)\n\t\tfor(int j=1;j<=tot-(1<<i)+1;j++)\n\t\t{\n\t\t\tif(f[i-1][j]<f[i-1][j+(1<<(i-1))])\n\t\t\t\tf[i][j]=f[i-1][j],rec[i][j]=rec[i-1][j];\n\t\t\telse f[i][j]=f[i-1][j+(1<<(i-1))],rec[i][j]=rec[i-1][j+(1<<(i-1))];\n\t\t}\n    //rec\u8bb0\u5f55\u7684\u662f\u533a\u95f4\u5185\u6df1\u5ea6\u6700\u5c0f\u503c\u7684\u7f16\u53f7\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l,r;\n\t\tl=read(),r=read();\n\t\tl=fir[l],r=fir[r];\n\t\tif(l>r) swap(l,r);\n\t\tint k=0;\n\t\twhile((1<<k)<=r-l+1) k++;\n\t\tk--;\n        if(f[k][l]<f[k][r-(1<<k)+1]) printf(\"%d\\n\",rec[k][l]);\n        else printf(\"%d\\n\",rec[k][r-(1<<k)+1]);//\u5e38\u89c1\u7684ST\u8868\u8f93\u51fa\n\t}\n\treturn 0;\n}\n```\n\n### \u4e8c\u3001\u500d\u589e\u6c42LCA\n\u8fd9\u91cc\u5c31\u4e0d\u5728\u8be6\u7ec6\u4ecb\u7ecd\u4e86\uff0c\u56e0\u4e3a\u697c\u4e0b\u7684\u5927\u4f6c\u4eec\u57fa\u672c\u90fd\u662f\u7528\u500d\u589e\u7684\uff0c\u6709\u5f88\u8be6\u7ec6\u7684\u89e3\u91ca\u3002\n\n\u8fd8\u662f\u7b80\u5355\u8bf4\u4e00\u4e0b\u5427\u3002\u7b80\u5355\u7684\u6765\u8bf4\uff0c\u5c31\u662f\u4e24\u4e2a\u70b9\u4e00\u8d77\u722c\u6811\uff0c\u5148\u8ba9\u6df1\u5ea6\u6bd4\u8f83\u6df1\u7684\u70b9\u722c\u5230\u548c\u4f4e\u7684\u70b9\u4e00\u6837\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u5f00\u59cb\u4e00\u8d77\u722c\uff0c\u722c\u5230\u4e24\u4e2a\u70b9\u91cd\u5408\u5c31\u662fLCA\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m,s,tot=0,cnt=0;\nint head[1000100],nxt[1000100],to[1000100];\nint d[500100],f[30][1000100];\nint read()\n{\n    int x=0,flag=0;\n    char ch=getchar();\n    if(ch=='-') flag=1;\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')x*=10,x+=ch-'0',ch=getchar();\n    if(flag) return -x;\n    return x;\n}\nvoid addedge(int x,int y)\n{\n    cnt++;\n    nxt[cnt]=head[x];\n    head[x]=cnt;\n    to[cnt]=y;\n}\nvoid dfs(int u,int dep)//\u5904\u7406\u51fa\u5404\u4e2a\u70b9\u7684\u6df1\u5ea6\n{\n\td[u]=dep;\n\tfor(int i=head[u];i!=-1;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(!d[v]) dfs(v,dep+1),f[0][v]=u;\n\t}\n}\nint LCA(int x,int y)\n{\n\tint l=0;\n\twhile((1<<l)<=n) l++;\n\tl--;//l\u8868\u793a\u7684\u662f\u6700\u5927\u7684i\u4e3a\u591a\u5c11\uff0c\u5f53\u7136\uff0c\u4e0d\u7528\u6c42l\u4e5f\u53ef\u4ee5\uff0c\u53ea\u8981\u662f\u4e00\u4e2a\u591f\u5927\u7684\u6570\u50cf20\u5373\u53ef\n\tif(d[x]<d[y]) swap(x, y);//\u8ba9x\u4e3a\u6df1\u5ea6\u8f83\u5927\u7684\n    for(int i=20;i>=0;i--)\n        if(d[y]<=d[x]-(1<<i)) x=f[i][x];//\u4e0d\u65ad\u722c\u6811\uff0c\u4f7f\u6df1\u5ea6\u76f8\u540c\n    if(x==y) return x;\n    for(int i=20;i>=0;i--)\n\t{\n        if(f[i][x]!=f[i][y])//\u4e0d\u540c\u5c31\u4e00\u8d77\u722c\u6811\n\t\t{\n            x=f[i][x];\n            y=f[i][y];\n        }\n    }\n    return f[0][x];\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tx=read(),y=read();\n\t\taddedge(x,y);\n\t\taddedge(y,x);\n\t}\n\tf[0][s]=s;\n\tdfs(s,1);\n\tfor(int i=1;(1<<i)<=n;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t\tf[i][j]=f[i-1][f[i-1][j]];//f[i][j] \u8868\u793a j\u76842^i \u500d\u7956\u5148,\u6240\u4ee5f[0][v]\u5c31\u662fv\u7684\u7236\u4eb2\u8282\u70b9u\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l,r;\n\t\tl=read(),r=read();\n\t\tprintf(\"%d\\n\",LCA(l,r));\n\t}\n\treturn 0;\n}\n```\n\n### \u4e09\u3001tarjan\u6c42LCA\n\u5176\u5b9e\u6ca1\u6709\u4e86\uff0c\u5413\u5413\u4f60\u7684\u800c\u5df2\uff0c\u4f46\u786e\u5b9e\u6709\u8fd9\u79cd\u7b97\u6cd5\u3002tarjan\u662f\u771f\u7684\u5de8\u3002\u3002\u5927\u5bb6\u53ef\u4ee5\u767e\u5ea6\u4e00\u4e0b\u6211\u8fd9\u91cc\u771f\u7684\u5c31\u4e0d\u4ecb\u7ecd\u4e86\u3002",
        "postTime": 1525697943,
        "uid": 21874,
        "name": "hicc0305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\uff08\u4e0d\u597d\u610f\u601d\u56fe\u7247\u6302\u4e86\uff09\n\n# \u2460.\u500d\u589e\u6cd5\n\n\u500d\u589e\u7b97\u6cd5\u53ef\u4ee5\u5728\u7ebf\u6c42\u6811\u4e0a\u4e24\u4e2a\u70b9\u7684LCA\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)\n\u3002\n\n### \u8be6\u89e3:\n\n\u5148\u901a\u8fc7\u9012\u63a8\u9884\u5904\u7406\u51fa log2(i)+1 \u3002\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/39062.png)\n\n\u5efa\u6811\u5e76\u9884\u5904\u7406: fa\u76842^i\u7956\u5148 \u7b49\u4e8e fa\u76842^(i-1)\u7956\u5148 \u7684 2^(i-1)\u7956\u5148\u3002\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/39063.png)\n\n\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u6839\u636e\u4e24\u4e2a\u8282\u70b9\u7684\u7684\u6df1\u5ea6\uff0c\u5982\u4e0d\u540c\uff0c\u5411\u4e0a\u8c03\u6574\u6df1\u5ea6\u5927\u7684\u8282\u70b9\uff0c\u4f7f\u5f97\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u5c42\u4e0a\uff0c\u5982\u679c\u6b63\u597d\u662f\u7956\u5148\uff0c\u7ed3\u675f\uff1b\u5426\u5219\uff0c\u5c06\u4e24\u4e2a\u8282\u70b9\u540c\u65f6\u4e0a\u79fb\uff0c\u67e5\u8be2\u6700\u8fd1\u516c\u5171\u7956\u5148(\u4e24\u4e2a\u8fc7\u7a0b\u5747\u4f7f\u7528\u500d\u589e\u52a0\u901f)\u3002\n\n------------\n\n    \n    #include<cstdio>\n\t#include<iostream>\n\t#include<cstring>\n\t#include<cmath>\n\t#include<algorithm>\n\t#include<queue>\n\tusing namespace std;\n\tinline int read()\n\t{\n\t\tchar ch=getchar(); \n\t\tint x=0,f=1;\n\t\twhile((ch>'9'||ch<'0')&&ch!='-')\n    \t\tch=getchar();\n\t\tif(ch=='-')\n\t\t{\n\t\t\tf=-1;\n\t\t\tch=getchar();\n\t\t}\n\t\twhile('0'<=ch&&ch<='9')\n\t\t{\n        \tx=x*10+ch-'0';\n        \tch=getchar();\n    \t}\n\t\treturn x*f;\n\t}\n\tinline void put(int x)  \n\t{    \n\t\tif(x==0)\n\t\t{\n\t\t\tputchar('0');\n\t\t\tputchar('\\n');\n\t\t\treturn;\n\t\t}\n\t\tint num=0;\n\t\tchar c[25];\n\t\twhile(x)\n\t\t{\n\t\t\tc[++num]=(x%10)+48;\n\t\t\tx/=10;\n\t\t}\n\t\twhile(num)\n\t\t\tputchar(c[num--]);\n\t\tputchar('\\n');\n\t\treturn ;\n\t}\n\tint n,m,s,x,y,tot=0;\n\tconst int N=500005,M=1000005;\n\tint head[N],to[M],nxt[M];\n\tint deep[N],fa[N][22],lg[N];\n\tvoid add(int x,int y)\n\t{\n\t\tto[++tot]=y;\n\t\tnxt[tot]=head[x];\n\t\thead[x]=tot;\n        return ;\n\t}\n\tvoid dfs(int x,int y)\n\t{\n    \tdeep[x]=deep[y]+1;\n    \tfa[x][0]=y;\n    \tfor(int i=1;(1<<i)<=deep[x];++i)\n    \t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\t\tfor(int i=head[x];i;i=nxt[i])\n    \t\tif(to[i]!=y)\n\t\t\t\tdfs(to[i],x);\n\t\treturn ;\n\t}\n\tint LCA(int x,int y)\n\t{\n\t\tif(deep[x]<deep[y])\n\t\t\tswap(x,y);\n\t\twhile(deep[x]>deep[y])\n\t\t\tx=fa[x][lg[deep[x]-deep[y]]-1];\n\t\tif(x==y)\n\t\t\treturn x;\n\t\tfor(int k=lg[deep[x]];k>=0;--k)\n\t\t\tif(fa[x][k]!=fa[y][k])\n\t\t\t{\n\t\t\t\tx=fa[x][k];\n\t\t\t\ty=fa[y][k];\n\t\t\t}\t\n\t\treturn fa[x][0];\n\t}\n\tint main()\n\t{\n\t\tn=read();m=read();s=read();\n\t\tfor(int i=1;i<n;i++)\n\t\t{\n\t\t\tx=read();y=read();\n\t\t\tadd(x,y);add(y,x);\n\t\t}\n\t\tdfs(s,0);\n\t\tfor(int i=1;i<=n;++i)\n\t\t\tlg[i]=lg[i-1]+(1<<lg[i-1]==i);\n\t\tfor(int i=1;i<=m;++i)\n\t\t{\n\t\t\tx=read();y=read();\n\t\t\tput(LCA(x,y));\n\t\t}\n\t\treturn 0;\n\t} \n    \n\n------------\n\n\n------------\n\n# \u2461.Tarjan\u79bb\u7ebf\u6cd5\n\nTarjan(\u79bb\u7ebf)\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n+q)\u3002\n\n## \u4e0b\u9762\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e0bTarjan\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u8def\uff1a\n\n**1.**\u4ee5s\u4e3a\u6839\u8282\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u3002\n\n**2.**\u904d\u5386\u8be5\u70b9u\u6240\u6709\u5b50\u8282\u70b9v\uff0c\u5e76\u6807\u8bb0\u8fd9\u4e9b\u5b50\u8282\u70b9v\u5df2\u88ab\u8bbf\u95ee\u8fc7\u3002\n\n**3.**\u82e5\u662fv\u8fd8\u6709\u5b50\u8282\u70b9\uff0c\u8fd4\u56de2\uff0c\u5426\u5219\u4e0b\u4e00\u6b65\u3002\n\n**4.**\u5408\u5e76v\u5230u\u4e0a\u3002\n\n**5.**\u5bfb\u627e\u4e0e\u5f53\u524d\u70b9u\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u70b9v\u3002\n\n**6.**\u82e5\u662fv\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u53ef\u4ee5\u786e\u8ba4u\u548cv\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3av\u88ab\u5408\u5e76\u5230\u7684\u7236\u4eb2\u8282\u70b9a\u3002\n\n\u641c\u7d22\u5305\u542b\u8282\u70b9u\u7684\u6240\u6709\u8be2\u95ee\uff0c\u5982\u679c\u53e6\u4e00\u8282\u70b9\u5df2\u88ab\u641c\u7d22\u8fc7\uff0c\u7136\u540e\u6211\u4eec\u901a\u8fc7\u5e76\u67e5\u96c6\u6765\u627e\u53e6\u4e00\u8282\u70b9\u7684\u7956\u5148\uff0c\u5e76\u8bbe\u4e3a\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u6ce8\u610f\uff0c\u7531\u4e8e\u5c06\u6bcf\u4e00\u7ec4\u67e5\u8be2\u53d8\u4e3a\u4e24\u7ec4\uff0c\u6240\u4ee52n-1\u548c2n\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/39064.png)\n\n[\u63a8\u8350\u4e00\u4e2a\u8be6\u89e3\u535a\u5ba2](https://www.cnblogs.com/JVxie/p/4854719.html)\n\n------------\n\n\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    #include<algorithm>\n    #include<queue>\n    #include<map>\n    #include<cmath>\n    #include<vector>\n    using namespace std;\n    inline int read()\n    {\n        char ch=getchar();\n        int x=0,f=1;\n        while((ch>'9'||ch<'0')&&ch!='-')\n            ch=getchar();\n        if(ch=='-')\n        {\n            f=-1;\n            ch=getchar();\n        }\n        while('0'<=ch&&ch<='9')\n        {\n            x=x*10+ch-'0';\n            ch=getchar();\n        }\n        return x*f;\n    }\n    inline void put(int x)\n    {\n        if(x==0)\n        {\n            putchar('0');\n            putchar('\\n');\n            return;\n        }\n        int num=0;\n        char c[25];\n        while(x)\n        {\n            c[++num]=(x%10)+48;\n            x/=10;\n        }\n        while(num)\n            putchar(c[num--]);\n        putchar('\\n');\n        return ;\n    }\n    int n,m,s,x,y,tot=0,vtot=0;\n    const int N=500005,M=1000005;\n    int head[N],to[M],nxt[M];\n    int vhead[N],vto[M],vnxt[M];\n    int fa[N],lca[2*M];\n    bool visit[N];\n    void add(int x,int y)\n    {\n        to[++tot]=y;\n        nxt[tot]=head[x];\n        head[x]=tot;\n        return ;\n    }\n    void vadd(int x,int y)\n    {\n        vto[++vtot]=y;\n        vnxt[vtot]=vhead[x];\n        vhead[x]=vtot;\n        return ;\n    }\n    int find(int u)\n    {\n        if(u!=fa[u])\n            fa[u]=find(fa[u]);\n        return fa[u];\n    }\n    void Tarjan(int u)\n    {\n\n        visit[u]=true;\n        for(int i=head[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            if(visit[v])\n                continue;\n            Tarjan(v);\n            fa[v]=u;\n        }\n        for(int i=vhead[u];i;i=vnxt[i])\n        {\n            int v=vto[i];\n            if(visit[v])\n            {\n                lca[i]=find(v);\n                if(i%2)\n                    lca[i+1]=lca[i];\n                else\n                    lca[i-1]=lca[i];\n            }\n        }\n        return ;\n    }\n    int main()\n    {\n        n=read();m=read();s=read();\n        for(int i=1;i<=n;i++)\n            fa[i]=i;\n        for(int i=1;i<n;i++)\n        {\n            x=read();y=read();\n            add(x,y);add(y,x);\n        }\n        for(int i=1;i<=m;i++)\n        {\n            x=read();y=read();\n            vadd(x,y);\n            vadd(y,x);\n        }\n        Tarjan(s);\n        for(int i=1;i<=m;i++)\n            put(lca[i*2]);\n        return 0;\n    }\n    \n    \n\n------------\n\n\n------------\n\n# \u2462.ST\u7b97\u6cd5LCA\n\nST\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n+q+nlogn)\n\nST\uff08Sparse Table\uff09\u7b97\u6cd5\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u540d\u7684\u5728\u7ebf\u5904\u7406RMQ\u95ee\u9898\u7684\u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728O(nlogn)\u65f6\u95f4\u5185\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7136\u540e\u5728O(1)\u65f6\u95f4\u5185\u56de\u7b54\u6bcf\u4e2a\u67e5\u8be2\u3002\n\n### \u8be6\u89e3\uff1a\n\n\u9996\u5148\u5f15\u5165\u6b27\u62c9\u5e8f\u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u6761\u5e8f\u5217\u4e0a\u7684\u6700\u503c\u95ee\u9898\uff0cid[u]\u8868\u793a\u8be5\u8282\u70b9\u5728\u6b27\u62c9\u5e8f\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u65f6\u95f4\uff0cvis[dft]\u5b58\u50a8\u4e0b\u6807\uff1b\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/40226.png)\n\n\u6b27\u62c9\u5e8f\uff1aA B D B E F E G E B A C A\n\n\u5373\u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u90fd\u5c06\u5176\u5b58\u5165\u6b27\u62c9\u5e8f\u3002\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/39345.png)\n\n\u7ecf\u8fc7ST\u7684\u9884\u5904\u7406\u540e\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u5c0f\u7684\u5f53\u4f5c\u5de6\u533a\u95f4l\uff0c\u5927\u7684\u5f53\u4f5c\u53f3\u533a\u95f4r\uff0c\u4e4b\u540e\u67e5\u8be2l<=i<=r\u91cc\u9762\u4f7f\u5f97deep[i]\u6700\u5c0f\u7684\u503c,\u8fd4\u56de\u5bf9\u5e94\u4e0b\u6807\u5373\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u4f8b\u5982\u6c42D\u3001C\u7684LCA\uff0c\u5176\u5fc5\u5b9a\u88ab\u5939\u5728D\u548cC\u5404\u81ea\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u4e4b\u95f4\uff0c\u5373\n\u6c42\u89e3\u8fd9\u4e00\u90e8\u5206\u5e8f\u5217 D B E F E G E B A C \u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u4e00\u70b9\u3002\n\n![luogu](https://cdn.luogu.com.cn/upload/pic/39348.png)\n\n------------\n\n\n    #include<cstdio>\n    #include<iostream>\n    #include<cstring>\n    #include<cmath>\n    #include<algorithm>\n    #include<queue>\n    using namespace std;\n    inline int read()\n    {\n        char ch=getchar();\n        int x=0,f=1;\n        while((ch>'9'||ch<'0')&&ch!='-')\n            ch=getchar();\n        if(ch=='-')\n        {\n            f=-1;\n            ch=getchar();\n        }\n        while('0'<=ch&&ch<='9')\n        {\n            x=x*10+ch-'0';\n            ch=getchar();\n        }\n        return x*f;\n    }\n    inline void put(int x)\n    {\n        if(x==0)\n        {\n            putchar('0');\n            putchar('\\n');\n            return;\n        }\n        int num=0;\n        char c[25];\n        while(x)\n        {\n            c[++num]=(x%10)+48;\n            x/=10;\n        }\n        while(num)\n            putchar(c[num--]);\n        putchar('\\n');\n        return ;\n    }\n    int n,m,s,x,y,tot=0,dft=0;\n    const int N=500005,M=1000005;\n    int head[N],to[M],nxt[M];\n    int deep[M],vis[M],id[M];\n    int f[M][20],lg[M];\n    void add(int x,int y)\n    {\n        to[++tot]=y;\n        nxt[tot]=head[x];\n        head[x]=tot;\n        return ;\n    }\n    void DFS(int u,int fa,int dep)\n    {\n        id[u]=++dft;\n        vis[dft]=u;\n        deep[dft]=dep;\n        for(int i=head[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            if(v==fa)\n                continue;\n            DFS(v,u,dep+1);\n            vis[++dft]=u;\n            deep[dft]=dep;\n        }\n        return ;\n    }\n    void RMQ()\n    {\n        for(int i=1;i<=dft;i++)\n            lg[i]=lg[i-1]+(1<<lg[i-1]==i);\n        for(int i=1;i<=dft;i++)\n            f[i][0]=i;\n        for(int i=1;(1<<i)<=dft;i++)\n        {\n            for(int j=1;j+(1<<i)-1<=dft;j++)\n            {\n                int a=f[j][i-1];\n                int b=f[j+(1<<(i-1))][i-1];\n                if(deep[a]<=deep[b])\n                    f[j][i]=a;\n                else\n                    f[j][i]=b;\n            }\n        }\n        return ;\n    }\n    int ST(int x,int y)\n    {\n        int r=id[x];\n        int l=id[y];\n        if(r<l)\n            swap(r,l);\n        int k=lg[r-l+1]-1;\n        int a=f[l][k];\n        int b=f[r-(1<<k)+1][k];\n        if(deep[a]<=deep[b])\n            return vis[a];\n        else\n            return vis[b];\n        return 0;\n    }\n    int main()\n    {\n        n=read();m=read();s=read();\n        for(int i=1;i<n;i++)\n        {\n            x=read();y=read();\n            add(x,y);add(y,x);\n        }\n        DFS(s,0,1);\n        RMQ();\n        for(int i=1;i<=m;++i)\n        {\n            x=read();y=read();\n            put(ST(x,y));\n        }\n        return 0;\n    }\n\n\u8c22\u8c22\u56f4\u89c2~\n\n#### [\u5b89\u5229\u535a\u5ba2](https://www.luogu.org/blog/Otto-Apocalypse/)\n",
        "postTime": 1540135226,
        "uid": 56564,
        "name": "\u7b2c\u4e00\u7eff\u8005\u5965\u6258",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u4e0d\u8bf4\u592a\u591a\uff0c\u6ce8\u91ca\u5df2\u7ecf\u975e\u5e38\u8be6\u7ec6\u4e86\n### \u611f\u8c22[\u8ba8\u8bba](https://www.luogu.org/discuss/show?postid=51362)\u91cc\u9762\u7684\u5927\u4f6c\u7684\u6307\u70b9\uff0c\u7279\u522b\u662f[@arfa](https://www.luogu.org/space/show?uid=77760)\u4ee5\u53ca[@Mercury_Disaster](https://www.luogu.org/space/show?uid=64037)\u5927\u4f6c\uff01\n\n```cpp\n#include<cstdio>\n#include<vector>\nusing namespace std;\nconst int N=500001;\nint dep[N],fa[N][22];//fa[i][k]\u8868\u793a\u8282\u70b9i\u7684\u4e0a2^k\u5c42\u7684\u7956\u5148\u662f\u54ea\u4e2a\u70b9\n/*\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8ba9fa[i][k]\u8868\u793a\u8282\u70b9i\u7684\u4e0ak\u5c42\u7684\u7956\u5148\u662f\u54ea\u4e2a\u70b9\uff1f\n1.\u7a7a\u95f4N*N\u4f1a\u70b8\n2.\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u70b9\u90fd\u8981\u5f80\u4e0a\u722c\u770b\u4ed6\u7684\u7956\u5148\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5de8\u5927\u3002\u5982\u679c\u8fd9\u68f5\u6811\u957f\u5f97\u50cf\u4e00\u6761\u94fe\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\n0+1+2+\u2026\u2026+(n-1)=n(n-1)/2 \n */\nint lg[N];\n//lg[i]\u7684\u5b9a\u4e49:log(i)+1\nint tot;\nvector<int>vec[N];\nvoid add(int x,int y) {\n    vec[x].push_back(y);\n}\nvoid dfs(int u,int last) {//last\u662fu\u7684\u7238\u7238!\n    dep[u]=dep[last]+1;\n    fa[u][0]=last;\n    for(int i=1; (1<<i)<=dep[u]; i++)fa[u][i]=fa[fa[u][i-1]][i-1];\n    //\u6ce8\u610f:i\u5bf9\u5e94\u7b2c2^i\u5c42 \u5c42\u6570=1,2,4,8,...... \u8bbek=2^i\n    //u\u7684\u4e0ak\u5c42\u7956\u5148\u5373\u4e3au\u7684\u4e0ak/2\u4e2a\u7956\u5148\u7684\u7b2ck/2\u4e2a\u7956\u5148\u4e14k%2=0\uff08\u56e0\u4e3ak=2^i\uff09\uff08\u96fe\uff09 \n    //\u4f8b\u5982u\u7684\u4e0a4\u5c42\u7956\u5148\u4e3a\u4e0a2\u5c42\u7956\u5148\u7684\u4e0a2\u5c42\u7956\u5148\n    for(int i=0; i<vec[u].size(); i++)if(vec[u][i]!=last)dfs(vec[u][i],u);\n    //\u904d\u5386\u6240\u6709\u513f\u7838\n}\nint lca(int x,int y) {\n    if(dep[x]<dep[y])swap(x,y);//\u4ee4x\u6df1\u4e8ey\n    while(dep[x]!=dep[y])x=fa[x][lg[dep[x]-dep[y]]-1];\n    //lg[dep[x]-dep[y]]\u8868\u793alog(dep[x]-dep[y])+1,\u518d\u51cf\u53bb1 \n    //\u8ba9x\u5f80\u4e0a\u8df32^log([dep[x]-dep[y])\u5c42 \n    /*\n    \u500d\u589e\n    \u662f\u4e0d\u662f\u4efb\u4f55\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u80fd\u88ab\u4e00\u4e9b2\u7684n\u6b21\u65b9\u52a0\u8d77\u6765?\n    \u7b54\u6848\u662f:\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6570\u5b57\u90fd\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u8868\u793a \n    \u5341\u8fdb\u5236\uff1a16=16\t     15=8+4+2+1\t         10=8+2\t       5=4+1\t        ...\n    \u4e8c\u8fdb\u5236\uff1a10000=10000  1111=1000+100+10+1\t 1010=1000+10  101=100+1        ...\n    \u6240\u4ee5\u500d\u589eLCA\u7684\u610f\u601d\u5c31\u662f: \u6bcf\u6b21\u4ee52\u7684k\u6b21\u65b9\u8df3\u8dc3!!\n \n    \uff08\u4ee5\u4e0a\u5927\u81f4\u6539\u7f16\u4e8earfa\u5927\u4f6c\u7684 \n    [\u535a\u5ba2](https://www.luogu.org/blog/acking/solution-p3379)\uff09\n    \n    \u8fd9\u91cc\u5c31\u8981\u7528\u5230lg\u6570\u7ec4\u5224\u65adx\u8981\u5f80\u4e0a\u8df3\u591a\u5c11 \n    Q1\uff1a\u4e3a\u4ec0\u4e48\u8981\u4e00\u6b65\u4e00\u6b65\u4ee52\u7684k\u6b21\u65b9\u8df3\u8dc3\uff1f \n    \u56e0\u4e3afa[x][k]\u8868\u793a\u7684\u662fx\u76842^N\u5c42\u4e0a\u7684\u7956\u5148,\u6240\u4ee5\u4e0d\u80fd\u4e00\u6b65\u8df3\u5230\u4e0ak\uff08k\u4e3a\u4efb\u610f\u6570\uff09\u5c42\u7684\n    \u8ba9x\u5f80\u4e0a\u8df3(2^k1+2^k2+2^k3+......)\u5c42 \u624d\u80fd\u8ba9x\u548cy\u8fbe\u5230\u540c\u4e00\u9ad8\u5ea6\n    Q2\uff1a\u4e3a\u4ec0\u4e48x\u53ef\u4ee5\u4e00\u6b65\u4e00\u6b65\u8df3\u4e0ay\u90a3\u4e00\u5c42\uff1f \n    \u8bbe k=log([dep[x]-dep[y]) \n    k\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u4f8b\u5982dep[x]-dep[y]=5=(101)2=(100)2+(1)2\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09 \n    \u90a3\u4e48\u5c31\u8981\u5f80\u4e0a\u8df32\u6b21\uff0c\u5206\u522b\u8df3 (100)2 \u3001 (1)2 \u5c42 \n    \uff08\u6240\u4ee5\uff0clog(x)\u4e5f\u53ef\u4ee5\u8868\u793ax\u4e8c\u8fdb\u5236\u9664\u4e86\u6700\u9ad8\u4f4d\u76841\u4e4b\u5916\u90fd\u53bb\u6389\u7684\u5f62\u5f0f\uff09 \n    \u5f80\u4e0a\u8df3\u4e86\u4e00\u6b21\u4ee5\u540e\uff0cdep[x]-dep[y]=(101)2-(100)2=(1)2\uff0c\u518d\u5f80\u4e0a\u8df3(1)2\u5c42\u5c31\u53ef\u4ee5\u4e86 \n    x\u4e00\u6b65\u4e00\u6b65\u903c\u8fd1y\u90a3\u4e00\u5c42\uff0cdep[x]-dep[y]\u4e00\u6b65\u4e00\u6b65\u51cf\u5c0f\uff0c\u5c31\u80fd\u8fbe\u5230\u4e86 \n    */\n    if(x==y)return x;\n    //\u5982\u679c`x\u548cy\u662f\u540c\u4e00\u70b9\u7684\u8bdd,\u8bf4\u660e\u8fd9\u4e2ay\u672c\u6765\u5c31\u662fx\u7684\u7956\u5148,\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de`x\n    for(int k=lg[dep[x]]; k>=0; k--)\n        if(fa[x][k]!=fa[y][k])x=fa[x][k],y=fa[y][k];\n    //\u6ce8\u610f:\u5c42\u6570=......,8,4,2,1 \u8bbep=2^k\n    //\u5982\u679c`x\u7684\u4e0ap\u5c42\u7684\u7956\u5148\u7684\u7238\u7238\u8fd8\u662f\u548c`y\u7684\u4e0ap\u5c42\u7684\u7956\u5148\u7684\u7238\u7238\u4e0d\u4e00\u81f4\n    //\u90a3\u4e48\u5c31\u8ba9ta\u4eec\u5f80\u4e0a\u722cp\u5c42\n    return fa[x][0];//\u8fd4\u56de`x\u7684\u7238\u7238(lca)\n}\nint n,m,s;\nint x,y;\nint main() {\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1; i<=n; i++) {\n        lg[i]=lg[i-1];\n        if(i==1<<lg[i-1])lg[i]++;\n    }\n    for(int i=1; i<=n-1; i++) {\n        scanf(\"%d%d\",&x,&y);\n        add(x,x);\n        add(y,y);\n    }\n    dfs(s,0);//\u4ece\u6811\u6839\u5f00\u59cbdfs\n    for(int i=1; i<=m; i++) {\n        scanf(\"%d%d\",&x,&y);\n        printf(\"%d\\n\",lca(x,y));\n    }\n    return 0;\n}\n```\n\u63d0\u793a\uff1a\u4e3a\u4e86\u8ba9\u5927\u5bb6\u4e0d\u6284\u9898\u89e3\uff0c\u8fd9\u4e2a\u4ee3\u7801\u7edd\u5bf9\u4e0d\u53ef\u80fd\u8fc7\u7684\uff0c\u4f46\u662f\u5173\u952e\u4ee3\u7801\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u8bf7\u5927\u5bb6\u5728\u67d0\u4e2a\u4e0d\u5173\u952e\u7684\u5730\u65b9\u627e\u95ee\u9898",
        "postTime": 1532493818,
        "uid": 44658,
        "name": "\u590f\u591c\u7a7a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "**\u6b27\u62c9\u5e8f\u6c42 LCA \u5c06\u6210\u4e3a\u65f6\u4ee3\u7684\u773c\u6cea\uff01**\n\ndfs \u5e8f\u6c42 LCA \u65e0\u8bba\u662f\u4ece\u65f6\u95f4\u5e38\u6570\uff0c\u7a7a\u95f4\u5e38\u6570\u8fd8\u662f\u597d\u5199\u7a0b\u5ea6\u65b9\u9762\u5747\u540a\u6253\u6b27\u62c9\u5e8f\u3002\n\n### \u5b9a\u4e49\n\ndfs \u5e8f\u8868\u793a\u5bf9\u4e00\u68f5\u6811\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5f97\u5230\u7684 **\u8282\u70b9\u5e8f\u5217**\uff0c\u800c **\u65f6\u95f4\u6233** dfn \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u5728 dfs \u5e8f\u4e2d\u7684\u4f4d\u7f6e\u3002\u8fd9\u4e24\u4e2a\u6982\u5ff5\u9700\u8981\u7740\u91cd\u533a\u5206\u3002\n\n### \u7b97\u6cd5\u4ecb\u7ecd\n\n\u8003\u8651\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9 $u, v$ \u53ca\u5176\u6700\u8fd1\u516c\u5171\u7956\u5148 $d$\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f7f\u7528\u6b27\u62c9\u5e8f\u6c42 LCA \u7684\u539f\u56e0\u662f\u5728\u6b27\u62c9\u5e8f\u4e2d\uff0c$d$ \u5728 $u, v$ \u4e4b\u95f4\u51fa\u73b0\u8fc7\uff0c\u4f46\u5728 dfs \u5e8f\u4e2d\uff0c$d$ \u5e76\u6ca1\u6709\u5728 $u, v$ \u4e4b\u95f4\u51fa\u73b0\u8fc7\u3002\u5bf9\u4e8e dfs \u5e8f\u800c\u8a00\uff0c\u7956\u5148\u4e00\u5b9a\u51fa\u73b0\u5728\u540e\u4ee3\u4e4b\u524d\uff08\u6027\u8d28\uff09\u3002\n\n\u4e0d\u59a8\u8bbe **$u$ \u7684 dfn \u5c0f\u4e8e $v$ \u7684 dfn**\uff08\u5047\u8bbe\uff09\u3002\n\n\u5f53 **$u$ \u4e0d\u662f $v$ \u7684\u7956\u5148** \u65f6\uff08\u60c5\u51b5 1\uff09\uff0cdfs \u7684\u987a\u5e8f\u4e3a\u4ece $d$ \u4e0b\u964d\u5230 $u$\uff0c\u518d\u56de\u5230 $d$\uff0c\u518d\u5f80\u4e0b\u964d\u5230 $v$\u3002\n\n\u6839\u636e\u6027\u8d28\uff0c\u4efb\u4f55 $d$ \u4ee5\u53ca $d$ \u7684\u7956\u5148\u5747\u4e0d\u4f1a\u51fa\u73b0\u5728 $u\\sim v$ \u7684 dfs \u5e8f\u4e2d\u3002\n\n\u8003\u5bdf $d$ \u5728 $v$ \u65b9\u5411\u4e0a\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 $v'$\uff0c\u5373\u8bbe $v'$ \u4e3a $d$ \u7684 / \u5b50\u6811\u5305\u542b $v$ \u7684 / \u513f\u5b50\u3002\u6839\u636e dfs \u7684\u987a\u5e8f\uff0c\u663e\u7136 $v'$ \u5728 $u\\sim v$ \u7684 dfs \u5e8f\u4e4b\u95f4\u3002\n\n\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u4eec\u53ea\u9700\u8981\u6c42\u5728 $u$ \u7684 dfs \u5e8f\u548c $v$ \u7684 dfs \u5e8f\u4e4b\u95f4\u6df1\u5ea6\u6700\u5c0f\u7684\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48 **\u5b83\u7684\u7236\u4eb2** \u5373\u4e3a $u, v$ \u7684 LCA\u3002\n\n\u8fd9\u6837\u505a\u7684\u6b63\u786e\u6027\u4f9d\u8d56\u4e8e\u5728 dfs \u5e8f $u$ \u5230 $v$ \u4e4b\u95f4\uff0c$d$ \u4ee5\u53ca $d$ \u7684\u7956\u5148\u5fc5\u7136\u4e0d\u4f1a\u5b58\u5728\uff0c\u4e14\u5fc5\u7136\u5b58\u5728 $d$ \u7684\u513f\u5b50\u3002\n\n$u, v$ \u6210\u7956\u5148\u540e\u4ee3\u5173\u7cfb\uff08\u60c5\u51b5 2\uff09\u662f\u5bb9\u6613\u5224\u65ad\u7684\uff0c\u4f46\u8fd9\u4e0d\u4f18\u7f8e\uff0c\u4e0d\u80fd\u4f53\u73b0\u51fa dfs \u6c42 LCA \u7684\u4f18\u52bf\uff1a**\u7b80\u6d01**\u3002\u4e3a\u4e86\u5224\u65ad\u8fd8\u8981\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\uff0c\u4f46\u6211\u4eec\u81ea\u7136\u5e0c\u671b\u6c42 LCA \u7684\u65b9\u6cd5\u8d8a\u7b80\u5355\u8d8a\u5feb\u8d8a\u597d\u3002\n\n\u6839\u636e\u5047\u8bbe\uff0c\u6b64\u65f6 $u$ \u4e00\u5b9a\u662f $v$ \u7684\u7956\u5148\u3002\u56e0\u6b64\u8003\u8651\u4ee4\u67e5\u8be2\u533a\u95f4\u4ece $[dfn_u, dfn_v]$ \u53d8\u6210 $[dfn_u + 1, dfn_v]$\u3002\n\n\u5bf9\u4e8e\u60c5\u51b5 1\uff0c$u$ \u663e\u7136\u4e00\u5b9a\u4e0d\u7b49\u4e8e $v'$\uff0c\u6240\u4ee5\u60c5\u51b5 2 \u5bf9\u4e8e\u7b97\u6cd5\u8fdb\u884c\u7684\u4fee\u6539\u4ecd\u7136\u9002\u7528\u4e8e\u60c5\u51b5 1\u3002\n\n\u7efc\u4e0a\uff0c\u82e5 $u\\neq v$\uff0c\u5219 $u, v$ \u4e4b\u95f4\u7684 LCA \u7b49\u4e8e\u5728 dfs \u5e8f\u4e2d\uff0c\u4f4d\u7f6e\u5728 $dfn_u + 1$ \u5230 $dfn_v$ \u4e4b\u95f4\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\u7684\u7236\u4eb2\u3002\u82e5 $u = v$\uff0c\u5219\u5b83\u4eec\u7684 LCA \u5c31\u7b49\u4e8e $u$\uff0c\u8fd9\u662f\u552f\u4e00\u9700\u8981\u7279\u5224\u7684\u60c5\u51b5\u3002\n\n\u9884\u5904\u7406 ST \u8868\u7684\u590d\u6742\u5ea6\u4ecd\u4e3a $\\mathcal{O}(n\\log n)$\uff0c\u4f46\u5e38\u6570\u51cf\u534a\u3002\u4ee5\u4e0b\u662f\u6a21\u677f\u9898 [P3379](https://www.luogu.com.cn/problem/P3379) \u7684\u4ee3\u7801\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 5e5 + 5;\nint n, m, R, dn, dfn[N], dep[N], lg[N], mi[19][N];\nvector <int> e[N];\nint get(int x, int y) {return dep[x] < dep[y] ? x : y;}\nvoid dfs(int id, int f) {\n\tmi[0][dfn[id] = ++dn] = f, dep[id] = dep[f] + 1;\n\tfor(int it : e[id]) if(it != f) dfs(it, id); \n}\nint lca(int u, int v) {\n\tif(u == v) return u;\n\tif((u = dfn[u]) > (v = dfn[v])) swap(u, v);\n\tint d = lg[v - u++];\n\treturn get(mi[d][u], mi[d][v - (1 << d) + 1]);\n}\nint main() {\n\tscanf(\"%d %d %d\", &n, &m, &R);\n\tfor(int i = 2; i <= n; i++) lg[i] = lg[i >> 1] + 1;\n\tfor(int i = 2, u, v; i <= n; i++) {\n\t\tscanf(\"%d %d\", &u, &v);\n\t\te[u].push_back(v), e[v].push_back(u);\n\t}\n\tdfs(R, 0);\n\tfor(int i = 1; i <= lg[n]; i++)\n\t\tfor(int j = 1; j + (1 << i) - 1 <= n; j++)\n\t\t\tmi[i][j] = get(mi[i - 1][j], mi[i - 1][j + (1 << i - 1)]);\n\tfor(int i = 1, u, v; i <= m; i++) scanf(\"%d %d\", &u, &v), printf(\"%d\\n\", lca(u, v));\n\treturn 0;\n}\n```\n\n### \u548c\u5404\u79cd LCA \u7b97\u6cd5\u7684\u5bf9\u6bd4\n\n\u5bf9\u6bd4 dfs \u5e8f\u548c\u6b27\u62c9\u5e8f\uff0c\u4e0d\u4ec5\u9884\u5904\u7406\u7684\u65f6\u95f4\u5e38\u6570\u780d\u534a\uff08\u6b27\u62c9\u5e8f LCA \u7684\u74f6\u9888\u6070\u597d\u5728\u4e8e\u9884\u5904\u7406\uff0cdfs \u662f\u7ebf\u6027\uff09\uff0c**\u7a7a\u95f4\u5e38\u6570\u4e5f\u780d\u534a**\uff08\u6838\u5fc3\u4f18\u52bf\uff09\uff0c\u800c\u4e14\u8fd8\u66f4\u597d\u5199\uff08\u5bf9\u4e8e\u4e00\u4e9b\u9898\u76ee\u5c31\u4e0d\u9700\u8981\u518d\u540c\u65f6\u6c42\u6b27\u62c9\u5e8f\u548c dfs \u5e8f\u4e86\uff09\uff0c\u4e5f\u4e0d\u9700\u8981\u62c5\u5fc3\u5fd8\u8bb0\u5f00\u4e24\u500d\u7a7a\u95f4\uff0c\u53ef\u4ee5\u8bf4\u524d\u8005\u4ece\u5404\u4e2a\u65b9\u9762\u540a\u6253\u540e\u8005\u3002\n\n\u5bf9\u6bd4 dfs \u5e8f\u548c\u500d\u589e\uff0c\u524d\u8005\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6\u66f4\u4f18\u3002\n\n\u5bf9\u4e8e dfs \u5e8f\u548c the Method of Four Russians\uff0c\u524d\u8005\u66f4\u597d\u5199\uff0c\u4e14\u5355\u6b21\u67e5\u8be2\u5e38\u6570\u66f4\u5c0f\uff08\u5176\u5b9e\u5dee\u4e0d\u591a\uff09\u3002\n\n\u5bf9\u4e8e dfs \u5e8f\u548c\u6811\u5256\uff0c\u524d\u8005\u66f4\u597d\u5199\uff0c\u4e14\u5355\u6b21\u67e5\u8be2\u590d\u6742\u5ea6\u66f4\u4f18\u3002\n\n**\u5c06 dfs \u5e8f\u6c42 LCA \u53d1\u626c\u5149\u5927\uff0c\u8ba9\u6b27\u62c9\u5e8f\u6c42 LCA \u6210\u4e3a\u65f6\u4ee3\u7684\u773c\u6cea\uff01**\n\n",
        "postTime": 1649385121,
        "uid": 123294,
        "name": "Alex_Wei",
        "ccfLevel": 10,
        "title": "\u51b7\u95e8\u79d1\u6280 \u2014\u2014 dfs \u5e8f\u6c42 LCA"
    },
    {
        "content": "\u6ca1\u770b\u5230\u6709\u7528\u7ea6\u675fRMQ\u505a\u7684\uff0c\u6700\u521d\u5728\u9ed1\u4e66\u4e0a\u770b\u5230\u7684\uff0c\u7f51\u4e0a\u8d44\u6599\u4e5f\u4e0d\u591a\uff0c\u81ea\u5df1\u7814\u7a76\u4e86\u4e00\u4e0b\uff0c\u629b\u7816\u5f15\u7389\u3002\n\n#  **\u7ea6\u675fRMQ**\n\u5982\u679cRMQ\u533a\u95f4\u6ee1\u8db3\u4e24\u9879\u4e4b\u5dee\u6700\u5927\u4e3a1\uff0c\u8fd9\u65f6\u5019\u6709**O(n)\u5efa\u8868\uff0cO(1)\u67e5\u8be2**\u7684\u4f18\u79c0ST\u8868,\u5f53\u7136\uff0c\u662f**\u5728\u7ebf\u7b97\u6cd5**\n\n\u6c42LCA\uff0c\u901a\u8fc7DFS\u628a\u539f\u6811\u8f6c\u5316\u4e3a\u6df1\u5ea6\u5e8f\u5217\uff0c\u5c31\u7b49\u4ef7\u4e8e\u6c42\u533a\u95f4\u6700\u5c0f\u503c (\u53d6\u5230\u7684\u4f4d\u7f6e)\n\n\u7531\u4e8eDFS\u7684\u6027\u8d28\uff0c\u8be5\u5e8f\u5217\u4e24\u4e2a\u6570\u4e4b\u95f4\u663e\u7136\u76f8\u5dee1\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u7ea6\u675fRMQ\u89e3\u51b3\n\n\u5148\u603b\u4f53\u6982\u62ec\u4e00\u4e0b\u505a\u6cd5\uff1a\u628a**\u539f\u5e8f\u5217\u5206\u5757\uff0c\u5757\u5185\u9884\u5904\u7406\uff0c\u5757\u95f4\u505aST\u8868**\n\n\n------------\n\n\n\u5206\u5757\u5927\u5c0f\u5b9a\u4e3aL=log(n)/2\uff0c\u8fd9\u6837\u5171\u5206D=n/L\u5757\uff0c\u5bf9\u8fd9D\u4e2a\u6570\uff08\u5757\u5185\u6700\u5c0f\u503c\uff09\u505a\u6b63\u5e38ST\u8868\uff0c\u5efa\u8868\u590d\u6742\u5ea6O(Dlog(D))=O((n/L)(log(n)-log(L))=O(n)\n\n\u6211\u4eec\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u662fO(n)\u7684\uff0clog(n)/2\u7684\u5757\u6b63\u597d\u6d88\u53bb\u4e86ST\u5efa\u8868\u65f6\u7684log\n\n\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5904\u7406\u51fa\u5757\u5185\u7684\u6700\u5c0f\u503c\uff0c\u8be5\u600e\u4e48\u505a\u5462\uff1f\u4e00\u4e2a\u6b63\u5e38\u60f3\u6cd5\u5c31\u662f\u679a\u4e3e\u6bcf\u4e2a\u6570\uff0c\u4e00\u5171\u662fO(n)\u590d\u6742\u5ea6\n\n\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u867d\u7136\u7559\u4e0b\u4e86\u6bcf\u5757\u7684\u6700\u5c0f\u503c\u4ee5\u53ca\u5176\u53d6\u5230\u7684\u4f4d\u7f6e\uff0c\u82e5\u8003\u8651\u67e5\u8be2\u5757\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u800c\u8fd9\u4e2a\u533a\u95f4\u6070\u597d\u53d6\u4e0d\u5230\u6700\u5c0f\u503c\uff0c\u8fd9\u65f6\u5019\u53ea\u80fd\u66b4\u529b\u679a\u4e3e\uff0c\u5c31\u7834\u574f\u4e86\u67e5\u8be2O(1)\u4e86\n\n \n\n\u81f3\u6b64\u6211\u4eec\u4ecd\u6ca1\u6709\u4f7f\u7528\u5176\u00b11\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u73b0\u5728\u8003\u8651\u4e00\u4e0b\u3002\n\n\u5757\u5185\u4e00\u5171log(n)/2\u4e2a\u6570\uff0c\u7531\u4e58\u6cd5\u539f\u7406\u53ef\u77e5\uff0c**\u672c\u8d28\u4e0d\u540c**\u7684\u5757\u6709U=2^(log(n)/2)=n^(1/2)\u4e2a\uff0c\u6211\u4eec\u4e0d\u59a8\u5904\u7406\u51fa\u6bcf\u4e2a\u8fd9\u79cd\u5757\uff0c\u590d\u6742\u5ea6Ulog(n)/2\uff0c\u8fd9\u4e2a\u51fd\u6570\u589e\u957f\u662f\u5c0f\u4e8e\u7ebf\u6027\u7684\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662fO(n)\n\n\u8fd9\u6837\uff0c\u5904\u7406\u51fa\u6bcf\u4e2a\u5757\u5185\u4e24\u5143\u7d20\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5c31\u53ef\u4ee5\u7528**01\u552f\u4e00\u8868\u793a**\u4e00\u4e2a\u5757\u4e86\uff0c\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u5b58\u4e0b\u6765\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5757\u7684**\u7279\u5f81**\uff0c\u8fd9\u4e00\u6b65\u590d\u6742\u5ea6O(n)\n\n\u8fd9\u6837\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5373\u4f7f\u67e5\u8be2\u5757\u5185\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u63d0\u53d6\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u5c31\u53ef\u4ee5\u5728\u9884\u5904\u7406\u7684\u6570\u7ec4\u4e2dO(1)\u67e5\u8be2\u4e86\n\n(\u600e\u4e48\u505a\u5462\uff1f\u628a\u8fd9\u6bb5\u4e8c\u8fdb\u5236\u6570\u63d0\u51fa\u6765\uff0c\u79fb\u5230\u6700\u53f3\u8fb9\uff0c\u7531\u4e8e\u6211\u4eec\u89c4\u5b9a0\u8868\u793a\u5c0f\u4e8e\uff0c1\u8868\u793a\u5927\u4e8e\uff0c\u6240\u4ee5\u4f1a\u8d2a\u5fc3\u5730\u9009\u53d6\u524d\u9762\u7684\u6570\uff0c\u67e5\u8868\u51cf\u53bb\u504f\u79fb\u91cf\u5c31\u53ef\u4ee5\u4e86)\n\n \n\n\u67e5\u8be2\u65f6\uff0c\u7c7b\u4f3c\u5206\u5757\uff0c\u8fb9\u89d2\u7684\u5757\u76f4\u63a5\u67e5\u8868\uff0c\u4e2d\u95f4\u90e8\u5206ST\u8868\u67e5\u8be2\uff0c\u67e5\u8be2\u662fO(1)\u7684\u3002\n\n \n\n\u81f3\u6b64\u6211\u4eec\u5b8c\u6210\u4e86O(n)\u5efa\u8868\uff0cO(1)\u67e5\u8be2\u7684\u7ea6\u675fRMQ\u3002\n\n \n\n\u4e00\u822c\u5730\uff0c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u5e8f\u5217\uff0c\u53ef\u4ee5\u5728O(n)\u65f6\u95f4\u5185\u5efa\u6210\u4e00\u9897\u7b1b\u5361\u5c14\u6811\uff0c\u628a\u67e5\u8be2\u8be5\u5e8f\u5217RMQ\u8f6c\u5316\u4e3a\u6c42\u7b1b\u5361\u5c14\u6811LCA\uff0c\u5c31\u53d8\u6210O(1)\u7684\u4e86\u3002  \n\n\u5b89\u5229\u4e00\u4e0b\u81ea\u5df1[\u535a\u5ba2](https://www.cnblogs.com/ghostcai/p/9280720.html)\n\n\n\n\n```cpp\n//drunk,fix later\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#define Re register\nusing namespace std;\n\nconst int MAXN=1000005;\n\ninline int rd() {\n    int ret=0,f=1;\n    char c;\n    while(c=getchar(),!isdigit(c))f=c=='-'?-1:1;\n    while(isdigit(c))ret=ret*10+c-'0',c=getchar();\n    return ret*f;\n}\n\nint n,m,st;\n\nstruct Edge {\n    int next,to;\n} e[MAXN<<1];\nint ecnt,head[MAXN];\ninline void add(int x,int y) {\n    e[++ecnt].next = head[x];\n    e[ecnt].to = y;\n    head[x] = ecnt;\n}\n\nint appear[MAXN],elm[MAXN],dep[MAXN],tot;\nvoid dfs(int x,int pre) {\n    appear[x]=++tot;\n    elm[tot]=x;\n    dep[tot]=dep[appear[pre]]+1;\n    for(int i=head[x]; i; i=e[i].next) {\n        int v=e[i].to;\n        if(v==pre) continue;\n        dfs(v,x);\n        elm[++tot]=x;\n        dep[tot]=dep[appear[x]];\n    }\n}\n\nint blockLen,num,L[MAXN],R[MAXN],bl[MAXN];\nint blockTyp[MAXN],f[MAXN][32],g[MAXN][32];\nint lookUp[MAXN];\ninline int computeType(int x) {\n    int sum=0;\n    for(Re int i=L[x]; i<=R[x]-1; i++)\n        sum<<=1,sum+=(dep[i+1]>dep[i]);\n    return sum;\n}\n\ninline void calcPos(int x) {\n    int len=0,po=0,cnt=0,mn=1<<30,mnid;\n    len=blockLen;\n    for(Re int i=len; i>=0; i--) {\n        po++;\n        if((1<<i)&x) cnt++;\n        else cnt--;\n        if(cnt<mn) mn=cnt,mnid=po;\n    }\n    lookUp[x]=mnid-1;\n}\n\nvoid build() {\n    blockLen=log2(tot)/2;\n    num=tot/blockLen;\n    if(tot%blockLen) num++;\n    for(Re int i=1; i<=num; i++) {\n        L[i]=(i-1)*blockLen+1;\n        R[i]=i*blockLen;\n    }\n    for(Re int i=tot+1; i<=R[num]; i++) dep[i]=(1<<30);\n    for(Re int i=1; i<=tot; i++)bl[i]=(i-1)/blockLen+1;\n    for(Re int i=0; i*i<=tot; i++) calcPos(i);\n    for(Re int i=1; i<=num; i++)blockTyp[i]=computeType(i);\n    for(Re int i=1; i<=num; i++) g[i][0]=(i-1)*blockLen+lookUp[blockTyp[i]],f[i][0]=dep[g[i][0]]; //offset!\n    for(Re int j=1; (1<<j)<=num; j++)\n        for(Re int i=1; i<=num; i++) \n            if(f[i][j-1]<f[i+(1<<(j-1))][j-1]) f[i][j]=f[i][j-1],g[i][j]=g[i][j-1];\n            else f[i][j]=f[i+(1<<(j-1))][j-1],g[i][j]=g[i+(1<<(j-1))][j-1];\n}\n\ninline int inBlockQuery(int x,int y) {\n    int u=blockTyp[bl[x]],v=(bl[x]-1)*blockLen+lookUp[u];\n    if(x<=v&&v<=y) return v;\n    int sav=bl[x];\n    x-=L[sav]-1;y-=L[sav]-1;\n    u>>=(blockLen-y);\n    u&=(~((-1)<<(y-x)));\n    return (sav-1)*blockLen+lookUp[u]-(blockLen-y);\n}\n\nint query(int x,int y) {\n    if(bl[x]==bl[y]) return inBlockQuery(x,y);\n    int mn=1<<30,mnid,tmp;\n    tmp=inBlockQuery(x,R[bl[x]]);\n    if(dep[tmp]<mn) mn=dep[tmp],mnid=tmp;\n    tmp=inBlockQuery(L[bl[y]],y);\n    if(dep[tmp]<mn) mn=dep[tmp],mnid=tmp;\n    int l=bl[x]+1,r=bl[y]-1,len;\n    if((r-l+1>0))  len=log2(r-l+1);\n    else return mnid;\n    if(f[l][len]<mn) mn=f[l][len],mnid=g[l][len];\n    if(f[r-(1<<len)+1][len]<mn) mn=f[r-(1<<len)+1][len],mnid=g[r-(1<<len)+1][len];\n    return mnid;\n}\n\nint main() {\n    n=rd();m=rd();st=rd();\n    int x,y;\n    for(Re int i=1; i<=n-1; i++) {\n        x=rd();y=rd();\n        add(x,y);add(y,x);\n    }\n    dfs(st,0);build();\n    for(int i=1; i<=m; i++) {\n        x=rd();y=rd();\n        if(appear[x]>appear[y]) swap(x,y);\n        printf(\"%d\\n\",elm[query(appear[x],appear[y])]);\n    }\n    return 0;\n}\n```",
        "postTime": 1531046663,
        "uid": 13856,
        "name": "GhostCai",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u6211\u53d1\u73b0\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u6811\u5256LCA\u5199\u7684\u4eba\u5c11\uff0c\u4e14\u57fa\u672c\u90fd\u5e38\u6570\u8f83\u5927\uff0c\u8c8c\u4f3c\u9898\u89e3\u524d\u516d\u9875\u7684\u6811\u5256LCA\u6ca1\u6709\u6bd4\u6211\u5feb\u7684\u3002\n\u6211\u5728\u8fd9\u91cc\u7ed9\u5927\u5bb6\u8bb2\u4e00\u4e0b\u6811\u5256LCA\u3002\n\n\n\u9996\u5148\uff0c\u4f60\u8981\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u5982\u679c\u4e0d\u4f1a\u8bf7\u51fa\u95e8\u5de6\u8f6c\n[\u6d1b\u8c37P3384](https://www.luogu.org/problem/P3384)\uff0c\u7136\u540e\u6211\u4eec\u76f4\u63a5\u4e24\u904d\u5927\u6cd5\u5e08\u7edf\u8ba1\u4fe1\u606f\uff0c\u6ce8\u610f\u8fd9\u91cc\u4e0d\u7528\u5199\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u7edf\u8ba1\u6743\u503c\uff0c\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u4e0d\u5199\u7ebf\u6bb5\u6811\uff0c\u89c1\u56fe\u3002\n\n\n**\u539f\u8c05\u6211\u56fe\u753b\u7684\u4e11**\n![](https://i.loli.net/2019/10/04/JtLvkxXdMs5SOuR.png)\n\n\n\u8fd9\u56fe\u4e2d\u84dd\u8272\u548c\u7eff\u8272\u7684\u7ebf\u6761\u662f\u91cd\u8fb9\uff0c\u7ea2\u8272\u662f\u8868\u793a\u6211\u4eec\u8981\u6c42\u8fd9\u4e24\u70b9\u7684LCA\u3002\n\n\n\u4e8e\u662f\u5148\u5224\u65ad\u4e00\u4e0b\uff0c\u4ed6\u4eec\u662f\u4e0d\u662f\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\uff0c\u56e0\u4e3a\u91cd\u94fe\u4e0a\u4e24\u70b9\u7684\u6df1\u5ea6\u80af\u5b9a\u4e0d\u540c\uff0c\u5982\u679c\u5728\u540c\u4e00\u91cd\u94fe\u4e0a\uff0cLCA\u663e\u7136\u5c31\u662f\u6df1\u5ea6\u5c0f\u7684\u90a3\u4e2a\u3002\u6211\u4eec\u4e00\u770b\uff0c\u663e\u7136\u4e0d\u540c\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5c06\u60c5\u51b5\u8f6c\u5316\u4e3a\u5728\u540c\u4e00\u91cd\u94fe\u4e0a\u6765\u505a\u3002\u9996\u5148\u6bd4\u8f83\u4e00\u4e0b\u8c01\u7684\u94fe\u9876\u6df1\u5ea6\u5927\uff0c\u5c31\u5411\u4e0a\u8df3\u3002\n![](https://i.loli.net/2019/10/04/lJaWZX92cDTHvti.png)\n\n\n\u6211\u4eec\u7ed9\u4e24\u70b9\u8d77\u4e2a\u540d\u5b57\uff1ax,y,\u4ece\u56fe\u4e2d\u53ef\u4ee5\u663e\u7136\u7684\u770b\u51fa\uff08\u6ce8\u610f\uff1a\u8f7b\u513f\u5b50\u7684\u94fe\u9876\u662f\u4ed6\u81ea\u5df1\uff09\uff1adepth[top[x]]>depth[top[y]]\uff08depth\u662f\u6df1\u5ea6\uff09\u3002\n\u4e8e\u662f\u6211\u4eec\u628ay\u5411\u4e0a\u8df3\uff0c\u5373y=fa[top[y]]\uff08fa\u662f\u7236\u4eb2\uff09\uff0c\u53d1\u73b0\u4ed6\u4eec\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\u4e86\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u8fd4\u56de\u6df1\u5ea6\u5c0f\u7684\u70b9\u5373\u53ef\u3002\n\u8d34\u4e00\u4e0b\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nint query(int x,int y)//\u6838\u5fc3\u4ee3\u7801\n{\n    while(top[x]!=top[y])//\u5224\u65ad\u662f\u5426\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\n        if(depth[top[x]]>=depth[top[y]])//\u94fe\u9876\u6df1\u5ea6\u5927\u7684\u5f80\u4e0a\u8df3\n            x=fa[top[x]];\n        else\n            y=fa[top[y]];\n    return depth[x]<depth[y]?x:y;//\u8fd4\u56de\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u7f16\u53f7\n}\n```\n\n\u6700\u540e\u518d\u8d34\u4e00\u4e0bAC\u4ee3\u7801\uff08\u6700\u5927\u7684\u70b9380ms\uff0c\u603b\u51711.03s\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=500005;\nstruct Edge\n{\n    int from;\n    int to;\n    int next;\n}e[MAXN<<1];//\u90bb\u63a5\u8868\u5b58\u56fe\nint depth[MAXN],fa[MAXN],siz[MAXN],head[MAXN],son[MAXN],root,n,opt,cnt,top[MAXN];//son\u662f\u91cd\u513f\u5b50\uff0csiz\u662f\u5b50\u6811\u5927\u5c0f\uff0copt\u662f\u8be2\u95ee\u6570\uff0c\u5176\u4ed6\u540c\u4e0a\u6587\u3002\ninline int read(void)//\u5feb\u8bfb\n{\n    char ch=getchar();\n    int mark=1,x=0;\n    while((ch<'0'||ch>'9')&&ch!='-')\n        ch=getchar();\n    if(ch=='-')\n    {\n        mark=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=(x*10)+(ch-'0');\n        ch=getchar();\n    }\n    return mark*x;\n}\nvoid dfs1(int p,int dep,int father)//\u7edf\u8ba1\u5b50\u6811\u5927\u5c0f\u3001\u6df1\u5ea6\u3001\u7236\u4eb2\u548c\u91cd\u513f\u5b50\u3002\n{\n    depth[p]=dep;\n    fa[p]=father;\n    int maxv=-1;\n    siz[p]=1;\n    for(int i=head[p];i;i=e[i].next)\n        if(e[i].to!=father)\n        {\n            dfs1(e[i].to,dep+1,p);\n            siz[p]+=siz[e[i].to];\n            if(siz[e[i].to]>maxv)\n            {\n                maxv=siz[e[i].to];\n                son[p]=e[i].to;\n            }\n        }\n    return ;\n}\nvoid dfs2(int p,int tp)//\u7edf\u8ba1\u94fe\u9876\n{\n    top[p]=tp;\n    if(!son[p])\n        return ;\n    dfs2(son[p],tp);\n    for(int i=head[p];i;i=e[i].next)\n        if(e[i].to!=fa[p]&&e[i].to!=son[p])\n            dfs2(e[i].to,e[i].to);\n    return ;\n}\nint query(int x,int y)//\u6838\u5fc3\u4ee3\u7801\n{\n    while(top[x]!=top[y])//\u5224\u65ad\u662f\u5426\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\n        if(depth[top[x]]>=depth[top[y]])//\u94fe\u9876\u6df1\u5ea6\u5927\u7684\u5f80\u4e0a\u8df3\n            x=fa[top[x]];\n        else\n            y=fa[top[y]];\n    return depth[x]<depth[y]?x:y;//\u8fd4\u56de\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u7f16\u53f7\n}\nvoid add(int u,int v)//\u52a0\u8fb9\n{\n    e[++cnt].from=u;\n    e[cnt].to=v;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n    e[++cnt].from=v;\n    e[cnt].to=u;\n    e[cnt].next=head[v];\n    head[v]=cnt;\n    return ;\n}\nint main(void)//\u4e3b\u51fd\u6570\n{\n    n=read(),opt=read(),root=read();\n    for(int i=1;i<n;i++)\n        add(read(),read());\n    dfs1(root,0,root);\n    dfs2(root,root);\n    while(opt--)\n        printf(\"%d\\n\",query(read(),read()));\n    return 0;\n}\n```\n",
        "postTime": 1570175644,
        "uid": 147780,
        "name": "\u7a7a\u9280\u5b50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u5f88\u591a\u65f6\u5019\u6211\u4eec\u4f1a\u9047\u5230\u8981\u6c42 $LCA$ \u7684\u9898\u76ee\uff0c\u7136\u800c\u5b9e\u9645\u4e0a\u6c42 $LCA$ \u4e5f\u662f\u53ef\u4ee5\u6bd2\u7624\u4e00\u4e9b\u7684 ~~(\u4e3b\u8981\u662f\u6211\u5f31 QAQ )~~ \u3002\u5f53\u6211\u4eec\u9700\u8981\u6c42\u4ee5\u67d0\u4e2a\u70b9$s(s$\u4f1a\u53d8$)$\u4e3a\u6839\u7684 $LCA$ \u65f6\u5c31\u9700\u8981 $LCT$ \n\n\u9996\u5148$LCT$\u662f\u53ef\u4ee5\u52a0\u8fb9\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a$link$\u64cd\u4f5c\n\n\u4f46\u662f\u56e0\u4e3a\u7ed9\u5b9a\u4e86\u4e00\u68f5\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u4e0d\u9700\u8981$findroot$\u6765\u5224\u65ad\u52a0\u8fb9\u662f\u5426\u5408\u6cd5\n\n\u7136\u540e\u8003\u8651$s$\u4e3a\u6839\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981$makeroot(s)$\n\n\u7136\u540e\u6bcf\u6b21\u8be2\u95ee$LCA(x,y)$\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5148$access(x)$\uff0c\u90a3\u4e48$x$\u548c\u6839\u5728\u4e86\u4e00\u4e2a$Splay$\n\n\u7136\u540e\u4e0d\u96be\u53d1\u73b0\uff0c$LCA$\u663e\u7136\u4e5f\u5728\u8fd9\u9897$Splay$\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u518d\u8003\u8651$access(y)$\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u56e0\u4e3a$LCA$\u548c$x$\u5728\u4e00\u9897$Splay$\u4e2d\uff0c\u6240\u4ee5$y$\u5230$LCA$\u4e00\u5b9a\u662f\u4e00\u6761\u865a\u8fb9\uff0c\u6545\u5728$access(y)$\u7684\u65f6\u5019\u6bcf\u6b21\u8bb0\u5f55\u8df3\u8fc7\u7684\u865a\u8fb9\u662f\u8df3\u5230\u4e86\u8c01\u90a3\u91cc\uff0c\u7136\u540e\u5c06\u6700\u540e\u4e00\u6b21\u8dd1\u865a\u8fb9\u7684\u70b9\uff08\u7236\u4eb2\uff09\uff0c\u4f5c\u4e3a$LCA$\u8f93\u51fa\u3002\n\n\u8be6\u89c1\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define ls(x) t[x].son[0]\n#define rs(x) t[x].son[1]\nil int read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\nconst int N = 5e5 + 5;\nstruct LCT {\n\tint son[2], fa;\n\tbool mark;\n}t[N];\nint n, m, s;\nbool isroot( int x ) {\n\treturn ( ls(t[x].fa) != x ) && ( rs(t[x].fa) != x );\n}\nvoid pushmark( int x ) {\n\tif( t[x].mark ) {\n\t\tt[x].mark = 0, t[ls(x)].mark ^= 1, t[rs(x)].mark ^= 1;\n\t\tswap( ls(x), rs(x) );\n\t}\n}\nil void rotate( int x ) {\n\tint f = t[x].fa, ff = t[f].fa, qwq = ( rs(f) == x );\n\tt[x].fa = ff;\n\tif( !isroot(f) ) t[ff].son[rs(ff) == f] = x;\n\tt[t[x].son[qwq ^ 1]].fa = f, t[f].son[qwq] = t[x].son[qwq ^ 1];\n\tt[x].son[qwq ^ 1] = f, t[f].fa = x;\n}\nint st[N];\nil void Splay( int x ) {\n\tint top = 0, now = x; st[++top] = now;\n\twhile( !isroot(now) ) st[++top] = ( now = t[now].fa );\n\twhile( top ) pushmark( st[top--] );\n\twhile( !isroot(x) ) {\n\t\tint f = t[x].fa, ff = t[f].fa;\n\t\tif( !isroot(f) ) ( ( rs(ff) == f ) ^ ( rs(f) == x ) ) ? rotate(f) : rotate(x);\n\t\trotate( x );\n\t}\n}\nvoid access( int x ) {\n\tfor( int y = 0; x; y = x, x = t[y].fa ) {\n\t\tSplay( x ), t[x].son[1] = y;\n\t}\n}\nvoid makeroot( int x ) {\n\taccess( x ), Splay( x ), t[x].mark ^= 1, pushmark( x );\n}\nvoid link( int x, int y ) {\n\tmakeroot( x ), t[x].fa = y;\n}\nint LCA( int x, int y ) {\n\taccess( x );\n\tint ans = y;\n\tfor( int i = 0; y; ans = i = y, y = t[i].fa ) {\n\t\tSplay( y ), t[y].son[1] = i;\n\t}\n\treturn ans;\n}\nsigned main()\n{\n\tn = read(), m = read(), s = read();\n\tint x, y;\n\tfor( register int i = 1; i < n; ++ i )\n\t\tx = read(), y = read(), link( x, y );\n\tmakeroot(s);\n\tfor( register int i = 1; i <= m; ++ i ) {\n\t\tx = read(), y = read();\n\t\tprintf(\"%d\\n\", LCA( x, y ));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1553068156,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "**\u8fd9\u9053\u9898\u6211\u7528\u7684\u662ftarjan**\n------------\n\n\u6211\u770b\u9898\u89e3\u91cc\u9762\u7684\u5404\u4f4d\u795e\u7287\u4eec\u90fd\u7528\u7684\u662f\u500d\u589e\u7b97\u6cd5\uff0c\u500d\u589e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a**O((n+m)log n)** \uff0c\u5df2\u7ecf\u5f88\u5feb\u4e86\uff0c\u800c\u6211\u8fd9\u91cc\u8981\u4ecb\u7ecd\u7684tarjan\u7b97\u6cd5\u66f4\u5feb\u54e6~\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u6709**O(n+m)** !!\n\n\u4e3a\u4ec0\u4e48tarjan\u8fd9\u4e48\u5feb\u5462\uff1f\u662f\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u79bb\u7ebf\u7b97\u6cd5\uff0c\u4e5f\u5c31\u662f\u628am\u4e2a\u8be2\u95ee\u4e00\u6b21\u6027\u8bfb\u5165\uff0c\u4e00\u8d77dfs\u4e00\u904d\uff0c\u8bb0\u5f55\u7ed3\u679c\uff0c\u7136\u540e\u7edf\u4e00\u8f93\u51fa\u3002\u6211\u4e2a\u4eba\u89c9\u5f97tarjan\u8981\u6bd4\u500d\u589e\u597d\u7406\u89e3\uff08~~\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u5176\u5b9e\u6211\u4e0d\u4f1a\u500d\u589e\u7684\uff0c\u9003~~\uff09\n\n------------\n\u63a5\u4e0b\u6765\u6211\u8981\u89e3\u91ca\u4e00\u4e0btarjan\u7b97\u6cd5\u7684\u539f\u7406\uff1a\uff08\u63a8\u8350\u4e00\u7bc7\u6211\u5728\u7f51\u4e0a\u770b\u5230\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4f5c\u8005\u89e3\u91ca\u5f97\u5f88\u8be6\u7ec6\uff0c[\u70b9\u8fd9\u513f](https://www.cnblogs.com/JVxie/p/4854719.html)\uff09\n\n\u597d\u7684\uff0c\u8a00\u5f52\u6b63\u4f20\uff0ctarjan\u5728dfs\u7684\u4efb\u610f\u65f6\u523b\uff0c\u6811\u90fd\u6709\u4ee5\u4e0b\u4e09\u79cd\u8282\u70b9\uff1a\n1. v=2\uff0c \u8868\u793a\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u4e86\uff0c\u800c\u4e14\u8fd8\u56de\u6eaf\u4e86\uff0c\u5373\u5b83\u7684\u5b50\u8282\u70b9\u5df2\u7ecf\u5168\u90e8\u8bbf\u95ee\u8fc7\u4e86\n1. v=1\uff0c \u8868\u793a\u8bbf\u95ee\u8fc7\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u56de\u6eaf\uff0c\u5373\u73b0\u5728\u5728\u8bbf\u95ee\u5b83\u7684\u5b50\u8282\u70b9\n1. v=0\uff0c \u8868\u793a\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\n\n\u63a5\u4e0b\u6765\u7ed9\u51fatarjan\u7684\u4f2a\u4ee3\u7801\uff0c\u76f8\u4fe1\u5927\u5bb6\u80fd\u901a\u8fc7\u4f2a\u4ee3\u7801\u7406\u89e3tarjan\u7684\u539f\u7406\uff1a\n```\nvoid tarjan(int x) {\n\t\u6807\u8bb0x\u8282\u70b9\u5df2\u8bbf\u95ee\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u56de\u6eaf\n\tfor(\u679a\u4e3ex\u7684\u5b50\u8282\u70b9y) {\n\t\tif(\u6ca1\u6709\u8bbf\u95ee\u8fc7y)\n\t\t\u7ee7\u7eeddfs tarjan(y)\n\t\t\u5408\u5e76y\u5230x\u4e0a\n\t}\n\tfor(\u679a\u4e3e\u6240\u6709\u548cx\u7684\u8be2\u95ee\u6709\u5173\u7684\u8282\u70b9y) {\n\t\tif(y\u8282\u70b9\u8bbf\u95ee\u8fc7\uff0c\u4e14\u5df2\u7ecf\u56de\u6eaf) {\n\t\t\tx,y\u7684lca\u4e3afind(y)\n\t\t}\n\t}\n\t\u6807\u8bb0x\u8282\u70b9\u5df2\u7ecf\u8bbf\u95ee\uff0c\u4e14\u56de\u6eaf\n\n```\n\n------------\n\u597d\u7684\uff0c\u63a5\u4e0b\u6765\u7ed9\u5927\u5bb6\u89e3\u91ca\u4e00\u4e0b\uff1a\n1. \u4eces\u8282\u70b9\uff08\u6839\u636e\u9898\u5e72\u53ef\u77e5s\u8282\u70b9\u4e3a\u6839\u8282\u70b9\uff09\uff0c\u4e5f\u5c31\u662f\u6839\u8282\u70b9\u5f00\u59cbdfs\n1. \u904d\u5386\u5f53\u524d\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\uff0c\u82e5\u672a\u8bbf\u95ee\uff0c\u5219\u8bbf\u95ee\uff0c\u5e76\u6253\u4e0av=1\u7684\u6807\u8bb0\n1. \u5408\u5e76\uff08\u8fd9\u91cc\u7528\u4e86\u5e76\u67e5\u96c6\uff0cfa\u6570\u7ec4\u5373\u4ee3\u8868\u7236\u8282\u70b9\uff09\n1. \u5bfb\u627e\u4e0e\u5f53\u524d\u8282\u70b9\u6709\u5173\u7684\u8be2\u95ee\u7684\u8282\u70b9\uff08\u82e5\u8bbf\u95ee\u8fc7\uff0c\u76f4\u63a5\u8be2\u95ee\u5176\u7236\u8282\u70b9\uff0c\u5373\u5e76\u67e5\u96c6\u91cc\u9762\u7684find\u51fd\u6570\uff0c\u5e76\u8bb0\u5f55\u5728ans\u6570\u7ec4\u91cc\uff09\n1. \u5f53\u524d\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u5df2\u7ecf\u8bbf\u95ee\u5b8c\uff0c\u6253\u4e0av=2\u6807\u8bb0\u3002\u5e76\u56de\u6eaf\n\n\u63a5\u4e0b\u6765\u653e\u4e0atarjan\u4ee3\u7801\uff1a\n```cpp\nvoid tarjan(int x) {\n\tv[x] = 1;//\u6807\u8bb0\u8bbf\u95ee\u672a\u56de\u6eaf\n\tfor(int i = head[x]; i; i = Next[i]) {//\u679a\u4e3e\u5b50\u8282\u70b9\n\t\tint y = ver[i];\n\t\tif(v[y]) continue;//\u8bbf\u95ee\u8fc7\uff0c\u8df3\u8fc7\u5176\u5b50\u8282\u70b9\n\t\ttarjan(y);//\u62d3\u5c55\u5b50\u8282\u70b9\n\t\tfa[y] = x;//\u5408\u5e76\n\t}\n\tfor(int i = 0; i < query[x].size(); i ++) {\n\t\tint y = query[x][i], id = query_id[x][i];\n\t\tif(v[y] == 2) {//\u6709\u5173\u8282\u70b9y\u8bbf\u95ee\u8fc7\n\t\t\tans[id] = find(y);//\u8bb0\u5f55lca\n\t\t}\n\t}\n\tv[x] = 2;//\u6807\u8bb0\u8bbf\u95ee\u5df2\u56de\u6eaf\n}\n```\n\n------------\n\u81f3\u4e8e\u522b\u7684\u561b~\u6211\u5728\u8fd9\u91cc\u7528\u4e86vector\u578b\u7684\u6570\u7ec4\u7528\u6765\u5b58\u50a8x\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff08query\uff09\u548c\u5404\u4e2a\u8be2\u95ee\u7684\u7f16\u53f7\uff08query_id\uff09\uff0cquery_id\u5373ans\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u8fd9\u6837\u4fbf\u4e8e\u5728dfs\u91cc\u9762\u679a\u4e3e\u548cans\u7684\u50a8\u5b58\u3002\n\u7531\u4e8e\u662f\u53cc\u5411\u8fb9\uff0c\u6240\u4ee5\u5b58\u8fb9\u7684ver,Next\u7684\u8303\u56f4\u8981\u4e582\uff0c\u4e0d\u7136\u4f1aRE\u3002\n\n\u4e0b\u9762\u9644\u4e0aAC\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 5e5 + 50;\nconst int M = 1e6 + 50;//\u53cc\u5411\u8fb9\uff0c\u8981\u4e582\n\nint n, m, s;\nint tot, head[N], ver[M], Next[M];\nint fa[N], v[N], ans[N];\nvector <int> query[N], query_id[N];\n\nvoid addEdge(int u, int v) {\n\tver[++ tot] = v, Next[tot] = head[u], head[u] = tot;\n}\n\nvoid add_query(int x, int y, int id) {\n\tquery[x].push_back(y); query_id[x].push_back(id);\n\tquery[y].push_back(x); query_id[y].push_back(id);\n}\n\nint find(int x) {return fa[x] == x ? x : fa[x] = find(fa[x]);}\n\nvoid tarjan(int x) {\n\tv[x] = 1;\n\tfor(int i = head[x]; i; i = Next[i]) {\n\t\tint y = ver[i];\n\t\tif(v[y]) continue;\n\t\ttarjan(y);\n\t\tfa[y] = x;\n\t}\n\tfor(int i = 0; i < query[x].size(); i ++) {\n\t\tint y = query[x][i], id = query_id[x][i];\n\t\tif(v[y] == 2) {\n\t\t\tans[id] = find(y);\n\t\t}\n\t}\n\tv[x] = 2;\n}\n\nint main() {\n\tscanf(\"%d %d %d\", &n, &m, &s);\n\tfor(int i = 1; i <= n; i ++) fa[i] = i;\n\tfor(int i = 1; i <  n; i ++) {\n\t\tint u, v;\n\t\tscanf(\"%d %d\", &u, &v);\n\t\taddEdge(u, v);\n\t\taddEdge(v, u);\n\t}\n\tfor(int i = 1; i <= m; i ++) {\n\t\tint x, y;\n\t\tscanf(\"%d %d\", &x, &y);\n\t\tif(x == y) ans[i] = x;//\u5c0f\u5c0f\u7684\u7279\u5224\u3002\u867d\u7136\u6ca1\u4ec0\u4e48\u7528\n\t\telse {\n\t\t\tadd_query(x, y, i);//\u8bb0\u5f55query\u548cquery_id\n\t\t}\n\t}\n\ttarjan(s);//dfs\n\tfor(int i = 1; i <= m; i ++) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```\n\n\n------------\n\u5982\u679c\u8fd8\u6709\u5bf9tarjan\u7684\u539f\u7406\u4e0d\u7406\u89e3\u7684\uff0c\u53ef\u4ee5[\u70b9\u8fd9\u513f]\uff0c(https://www.cnblogs.com/JVxie/p/4854719.html)\n\u4e5f\u5c31\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u6211\u5728\u7f51\u4e0a\u770b\u5230\u7684\u90a3\u7bc7\uff0c\u76f8\u4fe1\u4f60\u901a\u8fc7\u770b\u4f5c\u8005\u7ed9\u51fa\u7684\u793a\u610f\u56fe\uff0c\u5c31\u80fd\u604d\u7136\u5927\u609f\u3002",
        "postTime": 1571151469,
        "uid": 89882,
        "name": "zhenghwen",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problem/P3379)\n\n\u770b\u4e86\u4e00\u4e9b\u9898\u89e3\uff0c\u53d1\u73b0\u5927\u5bb6\u597d\u50cf\u90fd\u5728\u7528\u500d\u589e\u7b97$LCA$\n\n$LCA$\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7528$Tarjan$\u7b97\uff0c\u5e76\u4e14\u7b80\u5355\u6613\u61c2\n\n\u4e0b\u9762\u6211\u4eec\u6765\u8bb2\u8bb2\u5982\u4f55~~\u5728\u4e0d\u5f00O2\u7684\u60c5\u51b5\u4e0b~~\u7528$Tarjan$\u8fc7\u8fd9\u9053\u9898\n\n# \u524d\u8a00\uff1a\u4f55\u4e3a$LCA$\uff08\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\uff1f\n\n> **\u767e\u5ea6\u767e\u79d1\uff1a** \u5bf9\u4e8e\u6709\u6839\u6811T\u7684\u4e24\u4e2a\u7ed3\u70b9u\u3001t\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148LCA(T,u,t)\u8868\u793a\u4e00\u4e2a\u7ed3\u70b9x\uff0c\u6ee1\u8db3x\u662fu\u6216t\u7684\u7956\u5148\u4e14x\u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\u3002\n\n~~\u6666\u6da9\u96be\u61c2~~\n\n### \u6211\u4eec\u6765\u4e3e\u51e0\u4e2a\u4f8b\u5b50:\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/50f218ju.png)\n\n\u5982\u4e0a\u56fe\uff0c\n\n**\u4f8b$1$\u3001** $4$ \u548c $5$ \u7684\u516c\u5171\u7956\u5148\u53ea\u6709 $1$\uff0c\u56e0\u6b64\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u53ea\u80fd\u662f $1$\n\n**\u4f8b$2$\u3001** $4$ \u548c $6$ \u7684\u516c\u5171\u7956\u5148\u6709 $1$ \u3001$2$\uff0c\u56e0\u4e3a $2$ \u79bb\u4ed6\u4eec\u4fe9\u66f4\u8fd1\uff0c\u6240\u4ee5 $2$ \u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n\n**\u4f8b$3$\u3001** \u5728$LCA$\u4e2d\uff0c\u81ea\u5df1\u53ef\u4ee5\u662f\u81ea\u5df1\u7684\u7956\u5148 ~~\uff08\u6211\u662f\u6211\u7238\u7238\uff09~~ \uff0c\u56e0\u6b64 $4$ \u548c $2$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u6709 $1$ \u3001$2$\uff0c\u5176\u4e2d $2$ \u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n\n### \u7efc\u5408\u524d\u4e09\u4e2a\u4f8b\u5b50\uff0c$LCA$\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a\n\n> \u5bf9\u4e8e\u4e00\u68f5\u6811\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u4ed6\u4eec\u53ef\u80fd\u6709\u8bb8\u591a\u516c\u5171\u7956\u5148\uff0c\u5176\u4e2d\u79bb\u4ed6\u4eec\u4fe9\u6700\u8fd1\u7684\uff0c\u53eb\u505a\u4ed6\u4eec\u4fe9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\n\n------------\n\n\n# \u4e00\u3001\u7b97\u6cd5\u6982\u8ff0\n\n## \u524d\u7f6e\u829d\u58eb\uff1a\n\n\u5e76\u67e5\u96c6\u3001\u90bb\u63a5\u8868 ~~\uff08\u8fd9\u4e48\u7b80\u5355\uff0c\u6839\u672c\u4e0d\u7b97\u524d\u7f6e\u829d\u58eb\uff09~~\n\n## \u4f2a\u4ee3\u7801\uff1a\n\n```cpp\n1  Tarjan(u){\n2\t  vis(u)//\u6253\u4e0a\u8bbf\u95ee\u6807\u8bb0 \n3\t  for each(u->t){//\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u8282\u70b9 \n4\t\t  Tarjan(t)//\u7ee7\u7eed\u5411\u4e0b\u904d\u5386 \n5\t\t  marge(u,t)//\u628at\u7684\u7238\u7238\u53d8\u6210u\uff08\u5e76\u67e5\u96c6--\u5408\u5e76\uff09 \n6\t  }\n7\t  for each(ask(u,t)){//\u5bf9\u4e8e\u6bcf\u4e2a\u6709\u5173\u95ee\u9898 \n8\t\t  if(vis(t))//\u5982\u679c\u53e6\u4e00\u4e2a\u7ed3\u70b9\u5df2\u88ab\u8bbf\u95ee \n9\t\t  answer=find(t)//\u7b54\u6848\u4e3a\u90a3\u4e2a\u7ed3\u70b9\u7684\u8001\u7956\u5b97\uff08\u5e76\u67e5\u96c6--\u67e5\u627e\uff09 \n10\t  }\n11 }\n```\n\n## \u4e00\u4e9b\u95ee\u7b54\uff1a\n\n$Q1$\u3001\u672c\u9898\u5c5e\u4e8e\u6709\u5411\u56fe$or$\u65e0\u5411\u56fe\uff1f\n\n$A1$\u3001\u7531\u4e8e\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u5f97\u77e5\u6240\u6709\u7236\u5b50\u5173\u7cfb\uff0c\u56e0\u6b64\u5c5e\u4e8e\u65e0\u5411\u56fe\uff0c\u904d\u5386\u65f6\u52a0\u4e00\u4e2a\u5224\u65ad\u662f\u5426\u8bbf\u95ee\u7684\u6570\u7ec4\u5373\u53ef\u3002\n\n$Q2$\u3001\u3010\u7b2c$5$\u884c\u3011\u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u5408\u5e76\u64cd\u4f5c\uff1f\n\n$A2$\u3001\u56e0\u4e3a $u$ \u662f $t$ \u7684\u7236\u8282\u70b9\uff0c\u5728\u5e76\u67e5\u96c6\u4e2d\u4e5f\u8981\u6709\u6240\u4f53\u73b0\uff0c\u65b9\u4fbf\u67e5\u627e\u64cd\u4f5c\u3002\n\n$Q3$\u3001\u5982\u679c\u6309\u7167 **A$1$** \u8fd9\u79cd\u8bf4\u6cd5\uff0c\u4f1a\u4e0d\u4f1a\u5bfc\u81f4\u8bef\u5224\uff1f\u5373\u627e\u5230\u7684\u4e0d\u662f\u6700\u8fd1\u7684\u4e00\u4e2a\u516c\u5171\u7956\u5148\uff1f\n\n$A3$\u3001**\u4e0d\u4f1a\u3002**~~\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff09~~ \u5f53\u6211\u4eec\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u70b9\u65f6\uff0c\u5fc5\u5b9a\u8981\u5148\u5c06\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9\u8bbf\u95ee\u5b8c\uff0c\u518d\u56de\u7b54\u95ee\u9898\u3002\n\n\u5047\u8bbe\u6211\u4eec\u8981\u6c42\u4e24\u4e2a\u7ed3\u70b9 $u$ \u3001$t$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u73b0\u5728\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n**1\u3001\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u4e24\u8005\u5176\u4e2d\u4e4b\u4e00\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/y9pehywy.png)\n\n\u4e0d\u59a8\u8bbe\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a $u$ \uff0c\u56e0\u6b64 $t$ \u6bd4 $u$ \u66f4\u6df1\uff0c\u6240\u4ee5 $u$ \u5c06\u9996\u5148\u88ab\u8bbf\u95ee\u5230\u3002\u4e4b\u540e\u5c42\u5c42\u5411\u4e0b\uff0c\u8bbf\u95ee\u5230 $t$\uff0c\u8bbf\u95ee\u5b8c $t$ \u7684\u6240\u6709\u5b50\u8282\u70b9\u540e\uff0c\u5f00\u59cb\u56de\u6eaf\uff0c\u540c\u65f6\u4f20\u9012\u5e76\u67e5\u96c6\u3002\u6700\u7ec8\u56de\u6eaf\u5230 $u$ \uff0c\u56de\u7b54\u95ee\u9898\u65f6\uff0c $u$ \u3001$t$ \u90fd\u88ab\u8bbf\u95ee\u8fc7\uff0c\u4e14\u6b64\u65f6 $find(t)$ \u4e3a $u$\uff08\u5982\u56fe\uff09\u3002\u56e0\u6b64\u4e0d\u4f1a\u8bef\u5224\u3002\n\n**2\u3001\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e0d\u662f\u4e24\u8005\u5176\u4e2d\u4e4b\u4e00\uff1a**\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jg1c2v0n.png)\n\n\u8bbe\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a $s$\uff0c\u5219\u6b64\u65f6 $u$ \u3001$t$ \u4e00\u5b9a\u5206\u5c45 $s$ \u7684\u5de6\u53f3\u5b50\u6811 ~~\uff08\u60f3\u4e00\u60f3\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff09~~ \u3002\u5148\u8bbf\u95ee\u5b8c $u$ \uff0c$find(u)$ \u88ab\u66f4\u65b0\u4e3a $s$\uff0c\u6b64\u65f6\u518d\u8bbf\u95ee $t$ \u65f6\uff0c$answer=find(u)=s$ \u3002\u56e0\u6b64\u4e0d\u4f1a\u8bef\u5224\u3002\n\n## \u65f6\u7a7a\u590d\u6742\u5ea6\uff1a\n\n\u65e0\u4efb\u4f55\u5361\u5e38\u64cd\u4f5c\u3001O2\u3001\u5feb\u8bfb\u7684\u6d4b\u8bc4\u8bb0\u5f55\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/jnixsqwg.png)\n\n\u7531\u4e8e $Tarjan$ \u662f\u79bb\u7ebf\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u4f18\u8d8a\uff0c\u4ec5\u6709 $O(n+m)$ \u5de6\u53f3\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u5927\u6982 $O(7n+10m)$ \u5de6\u53f3\uff0c\u5f88\u6734\u7d20\n\n\n\n------------\n\n\n# \u4e8c\u3001\u4ee3\u7801\u5b9e\u73b0\n\n## \u904d\u5386\u7684\u5b9e\u73b0\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u90bb\u63a5\u8868\n\n```cpp\nint head_edge[500010],cnt_edge;\nstruct Edge{\n\tint to,next;\n}e[1000010];//\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u6240\u4ee5\u5f00\u53cc\u500d\u5927\u5c0f\nvoid add_edge(int x,int y){\n\te[++cnt_edge].to=y;\n\te[cnt_edge].next=head_edge[x];\n\thead_edge[x]=cnt_edge;\n}\n```\n\n\u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5e76\u67e5\u96c6\u6570\u7ec4$+$\u4e00\u4e2a\u8bbf\u95ee\u6570\u7ec4\n\n```cpp\nint dad[500010];bool vis[500010];\n```\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f00\u5199\u8fa3\n\n```cpp\nvoid Tarjan(int x){\n\tvis[x]=true;\n\tfor(int i=head_edge[x];i;i=e[i].next){\n\t\tint sum=e[i].to;\n\t\tif(!vis[sum]){//\u6ce8\u610f\u8fd9\u91cc\u4e00\u5b9a\u8981\u5224\u65ad\uff0c\u5426\u5219\u4f1a\u8fdb\u5165\u6b7b\u5faa\u73af\n\t\t\tTarjan(sum);\n\t\t\tdad[sum]=x;\n\t\t}\n\t}\n}\n```\n\n## \u6c42\u89e3\u7684\u5b9e\u73b0\n\n\u9996\u5148\u6211\u4eec\u77e5\u9053\uff0c\u6c42\u89e3\u65f6\u7b2c\u4e00\u6b65\u8981\u505a\u7684\u4e8b\u60c5\uff0c\u5c31\u662f\u627e\u5230\u548c\u5f53\u524d\u8282\u70b9\u6709\u5173\u7684\u8be2\u95ee\u3002~~\uff08\u66b4\u529b\u8dd1\u4e00\u6b21O(q)\u723d\u6b6a\u6b6a\uff09~~\n\n\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u8ba9\u6211\u4eec\u81ea\u7136\u800c\u7136\u5730\u60f3\u5230\u4e86\uff1a**\u90bb\u63a5\u8868**\n\n\u4e8e\u662f\u4e4e\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u53e6\u4e00\u4e2a\u90bb\u63a5\u8868\n\n```cpp\nint head_ask[500010],cnt_ask;\nstruct Ask{\n\tint to,next,num,same;\n\tbool fw;//\u662f\u5426\u56de\u7b54\u8fc7\u8fd9\u4e2a\u95ee\u9898\n}ask[1000010];\nvoid add_ask(int x,int y){\n\task[++cnt_ask].to=y;\n\task[cnt_ask].next=head_ask[x];\n\thead_ask[x]=cnt_ask;\n}//\u51fd\u6570\u3001\u6570\u7ec4\u3001\u53d8\u91cf\u540d\u8981\u4e0e\u7b2c\u4e00\u4e2a\u90bb\u63a5\u8868\u533a\u5206\u5f00\n```\n\n**\u4f46\u662f\uff0c\u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u4e24\u4e2a\u95ee\u9898\uff1a**\n\n**$1$\u3001** \u5bf9\u4e8e\u6bcf\u5bf9\u8be2\u95ee $(x,y)$ \uff0c\u5f53\u524d\u7ed3\u70b9\u53ef\u80fd\u4e0e $x$ \u6709\u5173\uff0c\u4e5f\u53ef\u80fd\u4e0e $y$ \u6709\u5173\u3002\n\n**\u89e3\u51b3\u65b9\u6848\uff1a** \u5bf9\u4e8e\u6bcf\u5bf9\u8be2\u95ee\uff0c\u6211\u4eec\u53ef\u4ee5\u6b63\u7740\u53cd\u7740\u5b58\u4e24\u904d\uff0c\u7136\u540e\u628a\u8fd9\u4e24\u73a9\u610f\u7ed1\u2642\u5230\u4e00\u8d77\u5c31\u884c\u4e86\u3002\n\n**$2$\u3001** \u56de\u7b54\u95ee\u9898\u7684\u987a\u5e8f\u65e0\u6cd5\u5904\u7406\u3002\n\n**\u89e3\u51b3\u65b9\u6848\uff1a** \u5bf9\u4e8e\u6bcf\u5bf9\u8be2\u95ee\uff0c\u628a\u5b83\u7684\u53f7\u7801\u8bb0\u4e0b\u6765\uff0c\u518d\u5f00\u4e00\u4e2a $ans$ \u6570\u7ec4\u5b58\u7b54\u6848\u3002\u56de\u7b54\u95ee\u9898\u65f6\uff0c\u7b54\u6848\u586b\u5230 $ans$\u3010\u8be2\u95ee\u53f7\u7801\u3011\u91cc\u5c31\u884c\u4e86\u3002\n\n\u5b8c\u5584\u540e\u7684\u90bb\u63a5\u8868\uff1a\n\n```cpp\nint head_ask[500010],cnt_ask;\nint ans[500010];//\u7528\u6765\u5b58\u7b54\u6848\nstruct Ask{\n\tint to,next,num,same;\n\tbool fw;\n}ask[1000010];\nvoid add_ask(int x,int y,int z,int save){\n\task[++cnt_ask].to=y;\n\task[cnt_ask].num=z;//num\u7528\u6765\u5b58\u8be2\u95ee\u7f16\u53f7\n\task[cnt_ask].same=cnt_ask+save;//\u7ed1\u2642\u5230\u4e00\u8d77\n\task[cnt_ask].next=head_ask[x];\n\thead_ask[x]=cnt_ask;\n}\n```\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6c42\u89e3\u8fa3\n\n```cpp\nvoid Tarjan(int x){\n\tvis[x]=true;\n\tfor(int i=head_edge[x];i;i=e[i].next){\n\t\tint sum=e[i].to;\n\t\tif(!vis[sum]){\n\t\t\tTarjan(sum);\n\t\t\tdad[sum]=x;\n\t\t}\n\t}\n\tfor(int i=head_ask[x];i;i=ask[i].next){\n\t\tint sum=ask[i].to;\n\t\tif(vis[sum]&&!ask[i].fw){\n\t\t\tans[ask[i].num]=find(sum);//\u83b7\u53d6\u7b54\u6848\n\t\t\task[i].fw=true;\n\t\t\task[ask[i].same].fw=true;//\u7ed1\u2642\u5728\u4e00\u8d77\u7684\u4e00\u5e76\u89e3\u51b3\u6389\n\t\t}\n\t}\n}\n```\n\n# $Code$:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,s,dad[500010];\nint head_edge[500010],cnt_edge;\nint head_ask[500010],cnt_ask;\nbool vis[500010];\nint ans[500010];\nstruct Edge{\n\tint to,next;\n}e[1000010];\nstruct Ask{\n\tint to,next,num,same;\n\tbool fw;\n}ask[1000010];\nvoid add_edge(int x,int y){\n\te[++cnt_edge].to=y;\n\te[cnt_edge].next=head_edge[x];\n\thead_edge[x]=cnt_edge;\n}\nvoid add_ask(int x,int y,int z,int save){\n\task[++cnt_ask].to=y;\n\task[cnt_ask].num=z;\n\task[cnt_ask].same=cnt_ask+save;\n\task[cnt_ask].next=head_ask[x];\n\thead_ask[x]=cnt_ask;\n}\nint find(int x){\n\tif(dad[x]==x)\n\treturn x;\n\treturn dad[x]=find(dad[x]);\n}\nvoid Tarjan(int x){\n\tvis[x]=true;\n\tfor(int i=head_edge[x];i;i=e[i].next){\n\t\tint sum=e[i].to;\n\t\tif(!vis[sum]){\n\t\t\tTarjan(sum);\n\t\t\tdad[sum]=x;\n\t\t}\n\t}\n\tfor(int i=head_ask[x];i;i=ask[i].next){\n\t\tint sum=ask[i].to;\n\t\tif(vis[sum]&&!ask[i].fw){\n\t\t\tans[ask[i].num]=find(sum);\n\t\t\task[i].fw=true;\n\t\t\task[ask[i].same].fw=true;\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=n;i++){\n\t\tdad[i]=i;\n\t\tif(i!=n){\n\t\t\tint xx,yy;\n\t\t\tscanf(\"%d%d\",&xx,&yy);\n\t\t\tadd_edge(xx,yy);\n\t\t\tadd_edge(yy,xx);//\u5b58\u65e0\u5411\u8fb9\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint xx,yy;\n\t\tscanf(\"%d%d\",&xx,&yy);\n\t\tadd_ask(xx,yy,i,+1);\n\t\tadd_ask(yy,xx,i,-1);//\u7b54\u6848\u5b58\u4e24\u6b21\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5\u518d\u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\n\t}\n\tTarjan(s);\n\tfor(int i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",ans[i]);//\u76f4\u63a5\u6309\u987a\u5e8f\u8f93\u51fa\u7b54\u6848\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1573397487,
        "uid": 123993,
        "name": "Carlota",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u770b\u4e86\u770b\u9898\u89e3\u7684dalao\u4eec,\u90fd\u662f\u4ec0\u4e48RMQ\u554a,\u5728\u7ebf\u7684\u500d\u589e\u554a(~~\u7136\u540e\u6211\u90fd\u4e0d\u4f1a~~)\n\n\u55ef,\u5c31\u53d1\u4e00\u7bc7tarjan\u7684\u79bb\u7ebf\u5199\u6cd5\u628a(\u521a\u597d\u6700\u8fd1\u5199tarjan)\n\n(~~\u7b2c\u4e00\u7bc7\u9898\u89e3~~)\n\n\u55ef,\u5927\u81f4\u7684\u601d\u8def\u5982\u4e0b:\n\n\u5148\u9009\u62e9\u4e00\u4e2a\u8282\u70b9u\u4e3a\u6839\u8282\u70b9\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u641c\u7d22\u3002\uff08\u6807\u8bb0u\u5df2\u8bbf\u95ee\u8fc7\uff09\n\n\u904d\u5386\u8be5\u70b9u\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9v\uff0c\u5e76\u6807\u8bb0v\u5df2\u8bbf\u95ee\u8fc7\u3002\n\n\u82e5v\u8fd8\u6709\u513f\u5b50\u8282\u70b9\uff0c\u5bf9v\u91cd\u590dii\u64cd\u4f5c\uff0c\u5426\u5219\u8fdb\u5165\u4e0b\u4e00\u64cd\u4f5c\u3002\n\n\u628av\u5408\u5e76\u5230u\u4e0a\uff08\u5e76\u67e5\u96c6\uff09\u3002\n\n\u628a\u5f53\u524d\u7684\u70b9\u8bbe\u4e3au\uff0c\u904d\u5386\u4e0eu\u6709\u8be2\u95ee\u5173\u7cfb\u7684\u8282\u70b9v\u3002\n\n\u5982\u679cv\u5728\u4e4b\u524d\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48u\u548cv\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u662fv\u901a\u8fc7\u5e76\u67e5\u96c6\u5408\u5e76\u540e\u7684\u7236\u4eb2\u8282\u70b9\uff08\u6ce8\u610f\u662f\u5408\u5e76\u540e\uff09\uff0c\u5373\u5f53\u524d\u7684find\uff08v\uff09\u3002\n\n(code):\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <climits>\n#include <iostream>\n#include <algorithm>\n#define ri register int \n\nusing namespace std;\n\nstruct node{\t\t\t\t\t\t\t\t\t\t//\u524d\u5411\u661f \n\tint next,to;\n}edge[1000005];\nint head[500005],cnt;\n\nvoid add(int u,int v){\n\tedge[++cnt].to = v;\n\tedge[cnt].next = head[u];\n\thead[u] = cnt;\n}\n\nstruct node2{\n\tint id;\t\t\t\t\t\t\t\t\t\t\t//\u7f16\u53f7,\u65b9\u4fbf\u8bb0\u5f55\u7b54\u6848 \n\tint to;\n\tint next;\n}que[1000005];\t\t\t\t\t\t\t\t\t\t//\u8bb0\u5f55\u8be2\u95ee\u7684\u7ed3\u6784\u4f53 \nint ans[500005];\nint headq[500005],cnt2;\n\nvoid add_q(int u,int v,int i){\n\tque[++cnt2].to = v;\n\tque[cnt2].id = i;\n\tque[cnt2].next = headq[u];\n\theadq[u] = cnt2;\n}\n\nint n,m,s;\nint fa[500005];\nbool vis[500005];\nint lca[500005];\n\nint find(int x){\n\tif(x == fa[x])\n\t\treturn x;\n\treturn fa[x] = find(fa[x]);\n}\n\nvoid tarjan(int u){\n\tvis[u] = 1;\n\tfor(ri i = head[u];i;i = edge[i].next){\n\t\tint v = edge[i].to;\n\t\tif(!vis[v]){\t\t\t\t\t\t\t\t\t\t//\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7,\u5c31tagjan\u8fd9\u4e2a\u70b9 \n\t\t\ttarjan(v);\n\t\t\tfa[v] = find(u);\n\t\t}\n\t}\n\tfor(ri i = headq[u];i;i = que[i].next){\n\t\tint v = que[i].to;\n\t\tif(vis[v])\t\t\t\t\t\t\t\t\t\t\t//\u627e\u7b54\u6848\u65f6,\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u5c31\u53ef\u4ee5\u8bb0\u5f55lca\u4e86 \n\t\t\tlca[que[i].id] = find(v);\n\t}\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin >> n >> m >> s;\n\tint a,b;\n\tfor(ri i = 1;i <= n-1;i ++){\n\t\tcin >> a >> b;\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tfor(ri i = 1;i <= m;i ++){\n\t\tcin >> a >> b;\n\t\tadd_q(a,b,i);\n\t\tadd_q(b,a,i);\n\t}\n\tfor(ri i = 1;i <= n;i ++)\n\t\tfa[i] = i;\n\ttarjan(s);\n\tfor(ri i = 1;i <= m;i ++)\n\t\tcout << lca[i] << endl;\n\treturn 0;\n}\n```",
        "postTime": 1540340361,
        "uid": 26042,
        "name": "Carsonn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "LCA\u662f\u6709\u5f88\u591a\u7684\u7b97\u6cd5\u53ef\u4ee5\u7b97\u7684\uff0c\u50cfTarjan\u3001\u500d\u589e\u4ec0\u4e48\u7684\uff0c\u8fd9\u91cc\u4e3b\u8981\u8bb2\u4e00\u4e0b\u500d\u589e\uff0c\u601d\u60f3\u6bd4\u8f83\u7b80\u5355\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a n * log(n) + k * log(n)\uff1b\t\n\u5411\u4e0a\u67e5\u8be2\u6bcf\u4e00\u6b21\u8df32^i\u5c42\uff0c\u8ba9O(n)\u7684\u67e5\u627e\u53d8\u6210O(logn)\u3002\n\nLCA\uff1a\u4e00\u68f5\u6811\u4e0a\u4e24\u4e2a\u70b9\u5411\u4e0a\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u5176\u4e2d\u4e00\u4e2a\u70b9\u5411\u4e0a\u6807\u8bb0\u81f3\u6839\u8282\u70b9\uff0c\u518d\u5bf9\u53e6\u5916\u4e00\u4e2a\u70b9\u5411\u4e0a\u6807\u8bb0\uff0c\u7b2c\u4e00\u6b21\u9047\u5230\u7b2c\u4e00\u6b21\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u6240\u6c42\u3002\n\n\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u500d\u589e\u7684\u601d\u60f3\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5411\u4e0a2^k\u6b65\u7684\u7236\u8282\u70b9\uff0c\u9996\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u70b9\u5411\u4e0a2^k\u6b65\u7684\u7236\u8282\u70b9\u3002\n\n\u5f53\u6211\u4eec\u67e5\u8be2\u4e24\u4e2a\u70b9\u7684LCA\u65f6\uff0c\u5148\u628a\u4ed6\u4eec\u8c03\u6574\u5230\u540c\u4e00\u6df1\u5ea6\uff0c\u518d\u770b\u4ed6\u4eec\u662f\u5426\u76f8\u5f53\uff0c\u4e0d\u7b49\u5c31\u540c\u65f6\u5411\u4e0a\u8c03\u6574\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```c\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 5e5 + 10;\nint n, m, cnt, root, head[MAXN];\nint deep[MAXN], fa[MAXN][30], q[MAXN];\nstruct Node {int x, y, nxt;}e[MAXN << 1];\n//\u94fe\u8868\u662f\u53cc\u5411\u7684\uff0c\u9700\u8981\u5c06MAXN * 2;\n\ninline int read() {\n\tint x = 0, flag = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' or ch > '9') {if(ch == '-')\tflag = -1;\tch = getchar();}\n\twhile(ch >= '0' and ch <= '9') {x = x * 10 + ch - '0';\tch = getchar();}\n\treturn x * flag;\n}\n\ninline void add_edge(int x, int y) {\n\t//\u94fe\u8868\uff08\u94fe\u5f0f\u524d\u5411\u661f\uff09\n\te[++cnt].x = x, e[cnt].y = y;\n\te[cnt].nxt = head[x], head[x] = cnt;\n}\n\ninline void bfs() {\n\t//\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u4ed6\u7684\u76f4\u63a5\u7236\u4eb2(fa)\n\tdeep[root] = 1, fa[root][0] = root;\t//\u6839\u8282\u70b9\u4e3a root\n\tint l = 1, r = 1;\n\tq[1] = root;\t//\u5148\u8ba9\u6839\u8282\u70b9\u5165\u961f\uff0c\u5f53\u7136\u53ef\u4ee5\u9009\u62e9\u7528queue\u6765\u5199\n\twhile(l <= r) {\n\t\tint now = q[l++];\n\t\tfor(register int i = head[now]; i; i = e[i].nxt) {\n\t\t\tif(e[i].y != fa[now][0]) {\n\t\t\t\t//\u5982\u679c\u5f53\u524d\u7684i\u8282\u70b9\u6307\u5411\u7684\u4e0d\u662f\u7b2c\u4e00\u4e2a\u7236\u4eb2\uff08\u4e0a\u65b9\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff09\n\t\t\t\tq[++r] = e[i].y, fa[e[i].y][0] = now;\n\t\t\t\tdeep[e[i].y] = deep[now] + 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void init() {\n\t//\u9884\u5904\u7406\u51fai\u7684\u4e0a\u7b2c2^j\u7684\u8282\u70b9\u662f\u4ec0\u4e48\n\tfor(register int j = 1; j <= 20; j++) {\n\t\t//20\u662f log\uff08\u8282\u70b9\uff09\u7684\u503c\n\t\tfor(register int i = 1; i <= n; i++)\n\t\t\t//\u5229\u7528\u500d\u589e\u6765\u6c42,i\u8868\u793a\u5f53\u524d\u7684\u8282\u70b9\uff08\u6c42i\u8282\u70b9\u4e0a\u8fb9\u7684\u8282\u70b9\uff09\n\t\t\tfa[i][j] = fa[fa[i][j - 1]][j - 1];\n\t}\n}\n\ninline int lca(int x, int y) {\n\tif(deep[y] > deep[x])\tx ^= y ^= x ^= y;\t//\u7b49\u540cswap(x, y);\n\tfor(register int j = 20; ~j; j--) {\n\t\t//j\u8303\u56f4\u4e3a \uff1a [0, 20] & j\u4e3a\u6574\u6570\n\t\t//for\u7b97\u5b8c\u540edeep[x] == deep[y];\n\t\tif(deep[fa[x][j]] >= deep[y])\n\t\t\tx = fa[x][j];\n\t}\n\tif(x == y)\treturn x;\t//x\u548cy\u5728\u4e00\u6761\u94fe\u4e0a\uff0cx\u548cy\u91cd\u5408\n\tfor(register int j = 20; ~j; j--) {\n\t\t//\u5f53x\u548cy\u7684\u4e0a\u8fb9\u7684\u67d0\u4e00\u8282\u70b9\u7b2c\u4e00\u6b21\u662f\u540c\u662f\u4e00\u4e2a\u65f6\uff0c\u5c31\u662f\u8981\u6c42\u7684lca(x, y);\n\t\tif(fa[x][j] != fa[y][j])\n\t\t\tx = fa[x][j], y = fa[y][j];\n\t}\n\treturn fa[x][0];\n}\n\nint main() {\n\tn = read(), m = read(), root = read();\n\tfor(register int i = 1; i < n; i++) {\n\t\tint x = read(), y = read();\n\t\tadd_edge(x, y), add_edge(y, x);\n\t}\n\tbfs();\tinit();\n\tfor(register int i = 1; i <= m; i++) {\n\t\tint num1 = read(), num2 = read();\n\t\tprintf(\"%d\\n\", lca(num1, num2));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570321275,
        "uid": 84897,
        "name": "Hercules",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u7528LCT\u5b9e\u73b0LCA\u8fd8\u884c\u3002\n\nLCT\u663e\u7136\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4LCA\uff0c\u5c31\u662faccess\u8fc7\u7a0b\u7684\u6700\u540e\u4e00\u6761\u8f7b\u8fb9\u3002\n\n\u8fd9\u5c31\u662f\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u601d\u8def\n\nLCT\u5927\u6cd5\u597d\uff01\n\n```cpp\n// Author: 23forever\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <vector>\n#include <queue>\ntypedef long long LL;\nconst int MAXN = 500000;\nconst int MAXM = 1000000;\nusing namespace std;\n\ninline void enableFileIO() {\n  freopen(\"test.in\", \"r\", stdin);\n  freopen(\"test.out\", \"w\", stdout);\n}\n\ninline int read() {\n  int x = 0, w = 1;\n  char c = ' ';\n\n  while (c < '0' || c > '9') {\n    c = getchar();\n    if (c == '-') w = -1;\n  }\n  while (c >= '0' && c <= '9') {\n    x = (x << 1) + (x << 3) + (c ^ 48);\n    c = getchar();\n  }\n\n  return x * w;\n}\n\nstruct LinkCutTree {\n  struct Node {\n    int ch[2], fa;\n    bool rev;\n  }s[MAXN + 5];\n  \n  #define ls ch[0]\n  #define rs ch[1]\n  #define u s[x]\n  #define uls s[u.ls]\n  #define urs s[u.rs]\n  #define ufa s[u.fa]\n  #define o s[y]\n  #define ols s[s[y].ls]\n  #define ors s[s[y].rs]\n  #define ofa s[s[z].fa]\n  #define v s[z]\n  #define vls s[s[z].ls]\n  #define vrs s[s[z].rs]\n  \n  int top, st[MAXN + 5];\n  void pd(int x) {\n    if (u.rev) {\n      u.rev ^= 1;\n      uls.rev ^= 1;\n      urs.rev ^= 1;\n      swap(u.ls, u.rs);\n    }\n  }\n  bool isRoot(int x) {\n    return ufa.ls != x && ufa.rs != x;\n  } \n  void rotate(int x) {\n    int y = u.fa, z = o.fa, l, r;\n    if (o.ls == x) {\n      l = 0;\n    } else {\n      l = 1;\n    }\n    r = l ^ 1;\n    if (!isRoot(y)) {\n      if (v.ls == y) {\n        v.ls = x;\n      } else {\n        v.rs = x;\n      }\n    }\n    \n    u.fa = z;\n    o.fa = x;\n    s[u.ch[r]].fa = y;\n    o.ch[l] = u.ch[r];\n    u.ch[r] = y;\n  }\n  void splay(int x) {\n    top = 0;\n    st[++top] = x;\n    for (int i = x; !isRoot(i); i = s[i].fa) {\n      st[++top] = s[i].fa;\n    }\n    for (int i = top; i; --i) pd(st[i]);\n    while (!isRoot(x)) {\n      int y = u.fa, z = o.fa;\n      if (!isRoot(y)) {\n        if (v.ls == y ^ o.ls == x) {\n          rotate(x);\n        } else {\n          rotate(y);\n        }\n      }\n      rotate(x);\n    }\n  }\n  void access(int x) {\n    for (int last = 0; x; last = x, x = u.fa) {\n      splay(x);\n      u.rs = last;\n    }\n  }\n  void makeRoot(int x) {\n    access(x);\n    splay(x);\n    u.rev ^= 1;\n  }\n  void link(int x, int y) {\n    makeRoot(x); \n    u.fa = y;\n  }\n  int query(int x, int y) {\n    access(x);\n    int last;\n    for (last = 0; y; last = y, y = o.fa) {\n      splay(y);\n      o.rs = last;\n    }\n    return last;\n  }\n}LCT;\n\nint n, m, rt;\n\nvoid init() {\n  //enableFileIO();\n  \n  n = read();\n  m = read();\n  rt = read();\n  for (int i = 1; i < n; ++i) {\n    int x = read(), y = read();\n    LCT.link(x, y);\n  }\n  LCT.makeRoot(rt);\n}\n\nint main() {   \n  init();\n\n  for (int i = 1; i <= m; ++i) {\n    int x = read(), y = read();\n    printf(\"%d\\n\", LCT.query(x, y));\n  }\n  return 0;\n}\n```",
        "postTime": 1538793319,
        "uid": 53567,
        "name": "23forever",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "# \u500d\u589eLCA by pascal\n\n\u6211\u4eec\u77e5\u9053,\u4e00\u4e2a\u4e00\u4e2a\u5f80\u4e0a\u8df3\u7684LCA\u662f\u4f1aTLE,\u8fd9\u65f6\u5c31\u6709\u4e86\u66f4\u5feb\u7684LCA\u7b97\u6cd5\u3002\n#### \"\u500d\u589eLCA\"\n\n\u500d\u589eLCA\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4:\n```psacal\n1.\u8ba92\u4e2a\u8282\u70b9\u8df3\u5230\u540c\u4e00\u4e2a\u6df1\u5ea6,\u7136\u540e\u5b8c\u4e8b\u3002\n2.\u4e00\u8d77\u5f80\u4e0a\u8df3,\u76f4\u5230\u627e\u5230\u516c\u5171\u7956\u5148,\u7136\u540e\u5b8c\u4e8b\u3002\n```\n\u542c\u8d77\u6765\u597d\u7b80\u5355\u54e6\u3002\n\n---\n\n## \u500d\u589e\n\n\u5148\u8bf7\u5927\u5bb6\u601d\u8003\u4e00\u4e0b,\u662f\u4e0d\u662f\u4efb\u4f55\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u80fd\u88ab\u4e00\u4e9b2\u7684n\u6b21\u65b9\u52a0\u8d77\u6765?\n\n\u7b54\u6848\u662f:\u53ef\u4ee5\u7684\u3002\n\n```psacal\n16=16\n15=8+2+4+1\n10=8+2\n5=4+1\n...\n```\n\u90a3\u4e48,\u500d\u589e\u7684\u610f\u601d\u5c31\u662f:\n**\u6bcf\u6b21\u4ee52\u7684n\u6b21\u65b9\u8df3\u8dc3!!**\n\n\u90a3\u4e48,\u663e\u800c\u6613\u89c1,\u65f6\u95f4\u590d\u6742\u5ea6\u662f log \u55bd\u3002\n\n\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u7ec4 get[i,j] \u6765\u5b58\u50a8 i\u53f7\u8282\u70b9\u5982\u679c\u8df3\u4e862\u7684j\u6b21\u65b9,\u5230\u8fbe\u7684\u70b9\u7684\u7f16\u53f7\u3002\n![](http://images.cnblogs.com/cnblogs_com/wxl-Ezio/1173002/o_QQ%E5%9B%BE%E7%89%8720180320205056.png)\n##### \u76d7\u4e00\u5f20\u56fe\u6765\u8bf4:\n\n```pascal\nget[17,0]=14\nget[14,1]=7\nget[10,2]=1\nget[ 7,3]=?? 0\n```\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9eget[i,0]\u5c31\u662f\u5e73\u5e38\u7684father[i]\u3002\n\n```pascal\nget[i,1]\u53ef\u4ee5\u8868\u793a\u4e3aget[i\u7684father,0],\u4e5f\u5c31\u662fget[get[i,0],1]\nget[i,2]\u53ef\u4ee5\u8868\u793a\u4e3aget[get[i,1],1]\n...\n```\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7c7b\u4f3c\u7684DP\u5f0f\u5b50:\n**get[i,j]:=get[get[i,j-1],j-1];**\n\n---\n\n## \u64cd\u4f5c\n\n\u64cd\u4f5c\u67092\u4e2a:\n```psacal\n1.LCA\u4e3b\u9898\u90e8\u5206:\n\t(1.\u8df3\u5230\u540c\u4e00\u4e2a\u6df1\u5ea6\u3002\n    (2.\u4e00\u8d77\u5f80\u4e0a\u8df3\u3002\n    \n2.DFS\u90e8\u5206:\n\t(1.\u7528\u6765\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6 dep[i] (dep[i]=dep[i\u7684\u7236\u4eb2]+1)\n    (2.\u8bb0\u5f55get[i,j]\n```\n\n\u5177\u4f53\u7684\u770b\u4ee3\u7801\u6f14\u793a:\n\n#### DFS\u90e8\u5206:\n```pascal\nprocedure Dfs(cnt,fa:longint); //\u73b0\u5728\u7684\u8282\u70b9cnt,\u7236\u4eb2fa\nvar\n        i:longint;\nbegin\n        dep[cnt]:=dep[fa]+1;  //\u66f4\u65b0\u6df1\u5ea6\n        get[cnt,0]:=fa;  //get\u7684fa,\u524d\u9762\u5df2\u8bb2\n        i:=0;\n        repeat\n                inc(i); //\u65b9++\n                get[cnt,i]:=get[get[cnt,i-1],i-1]; //\u795e\u5947de\u516c\u5f0f\n        until lg[i]>dep[cnt];  //\u5fd8\u4e86\u4ecb\u7ecdlg[i]=2\u7684i\u6b21\u65b9,\u8981\u9884\u5904\u7406,\u5927\u6982i\u523021\u5de6\u53f3\n        i:=head[cnt]; //\u94fe\u5f0f\u524d\u5411\u661f\n        while i<>0 do\n        begin\n                if gt[i]<>fa then\n                        Dfs(gt[i],cnt); //\u5176\u4ed6\u8fde\u8fb9\n                i:=next[i];\n        end;\nend;\n```\n\u7136\u540e:\n\n#### LCA\u90e8\u5206\n```psacal\nfunction Find(x_,y_:longint):longint; //\u4e24\u4e2a\u8282\u70b9 x_,y_\nvar\n        i,x,y,t:longint;\nbegin\n        x:=x_; y:=y_;\n        if dep[x_]<dep[y_] then //\u4ea4\u6362\u6df1\u5ea6,\u4f7fy\u5728\u9ad8\u5904\n        begin\n                x:=y_;\n                y:=x_;\n        end;\n        for i:=21 downto 0 do //\u4e00\u5b9a\u662fdownto!!!(\u770b\u524d\u9762\u4e8b\u4f8b)\n                if (dep[y]<=dep[x]-lg[i]) then //\u8ba9x\u8df3\u5230y\u5904\n                        x:=get[x,i];\n        if x=y then\n                exit(x); //\u5982\u679cx\u5df2\u7ecf\u662fy\u4e86,\u90a3\u4e48y\u5c31\u662f\u7956\u5148\u4e86\n        for i:=21 downto 0 do //\u4e00\u5b9a\u662fdownto!!\n                if get[x,i]<>get[y,i] then \n                //\u8bf4\u660e\u4e00\u70b9,\u5982\u679c\u6211\u8df3\u8fc7\u4e86\u600e\u4e48\u529e?\u90a3\u4e48\u6211\u4eec\u5c31\u8df3\u5230\u7956\u5148\u7684\u4e0b\u9762(\u53cd\u6b63\u4efb\u4f55\u6570\u90fd\u53ef\u4ee5\u88ab2\u7684n\u6b21\u65b9\u76f8\u52a0,\u5bf9\u4e0d\u5bf9),\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u6b64\u8282\u70b9\u7684\u7236\u4eb2\u5c31\u5f97\u4e86\n                begin\n                        x:=get[x,i]; //\u5927\u5bb6\u4e00\u8d77\u8df3\n                        y:=get[y,i];\n                end;\n        exit(get[x,0]);\nend;\n```\n\n---\n## CODE\n```pascal\nvar\n        get:array[-1..500010,0..21] of longint;\n        num,gt,head,next:array[-1..5000010] of longint;\n        lg:array[0..21] of longint;\n        dep:array[-1..500010] of longint;\n        i,n,m,l,r,root:longint;\n\nprocedure Main;\nvar\n        i:longint;\nbegin\n        read(n,m,root);\n        dec(n);\n        for i:=1 to n do\n        begin\n                read(l,r);\n                gt[2*i]:=r;\n                next[2*i]:=head[l];\n                head[l]:=2*i;\n                gt[2*i-1]:=l;\n                next[2*i-1]:=head[r];\n                head[r]:=2*i-1;\n        end;\n        lg[0]:=1;\n        for i:=1 to 21 do\n                lg[i]:=lg[i-1]*2;\nend;\n\nfunction Find(x_,y_:longint):longint;\nvar\n        i,x,y,t:longint;\nbegin\n        x:=x_; y:=y_;\n        if dep[x_]<dep[y_] then\n        begin\n                x:=y_;\n                y:=x_;\n        end;\n        for i:=21 downto 0 do\n                if (dep[y]<=dep[x]-lg[i]) then\n                        x:=get[x,i];\n        if x=y then\n                exit(x);\n        for i:=21 downto 0 do\n                if get[x,i]<>get[y,i] then\n                begin\n                        x:=get[x,i];\n                        y:=get[y,i];\n                end;\n        exit(get[x,0]);\nend;\n\nprocedure Dfs(cnt,fa:longint);\nvar\n        i:longint;\nbegin\n        dep[cnt]:=dep[fa]+1;\n        get[cnt,0]:=fa;\n        i:=0;\n        repeat\n                inc(i);\n                get[cnt,i]:=get[get[cnt,i-1],i-1];\n        until lg[i]>dep[cnt];\n        i:=head[cnt];\n        while i<>0 do\n        begin\n                if gt[i]<>fa then\n                        Dfs(gt[i],cnt);\n                i:=next[i];\n        end;\nend;\n\nprocedure Answer;\nbegin\n        read(l,r);\n        writeln(Find(l,r));\nend;\n\nbegin\n        Main;\n        Dfs(root,-1);\n        for i:=1 to m do\n                Answer;\nend.\n\n```\n\n\n",
        "postTime": 1526121922,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "## \u61d2\u4e86\u61d2\u4e86\u5148\u5199\u4e2aRMQ+ST\u8868\u7684\uff0c\u500d\u589e\u7684\u540e\u9762\u518d\u8865\uff08\n### ~~\u7fa4\u4f17\uff1a\u4f60\u4f1a\u8865\u5417\uff1f\uff01~~\n\n\u597d\u4e86\uff0c\u5148\u4e0a\u4ee3\u7801\uff08~~\u540e\uff1f\u6ca1\u4e86\u4f60\u8fd8\u60f3\u8981\u4ec0\u4e48~~\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll N=500005,INF=0x3f3f3f3f;\ntemplate <typename T> void rd(T &x){\n\tll fl=1;x=0;char c=getchar();\n\tfor(;!isdigit(c);c=getchar()) if(c=='-') fl=-fl;\n\tfor(;isdigit(c);c=getchar()) x=(x<<3)+(x<<1)+c-'0';\n\tx*=fl;\n}\nvoid wr(ll x){\n\tif(x<0) x=-x,putchar('-');\n\tif(x<10) putchar(x+'0');\n\tif(x>9) wr(x/10),putchar(x%10+'0');\n}\nll n,m,depth[N],in[N],out[N],t,ST[N*2][20],s,cnt,y[N*2],z[N*2],nxt[N*2],fst[N];\nvoid clear(){\n    cnt=0;\n    memset(fst,0LL,sizeof(fst));\n}\nvoid add(ll a,ll b,ll c){  //\u524d\u5411\u661f \n    y[++cnt]=b,z[cnt]=c,nxt[cnt]=fst[a],fst[a]=cnt;\n}\nvoid dfs(ll x,ll pre){  //\u6b27\u62c9\u5e8f\uff08\uff08\uff08 \n    in[x]=++t;\n    ST[t][0]=x;\n    for(ll i=fst[x];i;i=nxt[i])\n        if(y[i]!=pre){\n            depth[y[i]]=depth[x]+z[i];\n            dfs(y[i],x);\n            ST[++t][0]=x;\n        }\n    out[x]=t;\n}\nvoid Get_ST(ll n){  //ST\u8868\uff0c\u849f\u4e86\uff08 \n    for(ll i=1;i<=n;i++)\n        for(ll j=1;j<20;j++){\n            ST[i][j]=ST[i][j-1];\n            ll v=i-(1<<(j-1));\n            if(v>0&&depth[ST[v][j-1]]<depth[ST[i][j]]) ST[i][j]=ST[v][j-1];\n        }\n}\nll RMQ(ll L,ll R){\n    ll val=floor(log(R-L+1)/log(2)),x=ST[L+(1<<val)-1][val],y=ST[R][val];  //\u4e00\u5806\u795e\u5947\u7684\u8fd0\u7b97 \n    if(depth[x]<depth[y]) return x;\n    else return y;\n}\nint main(){\n    rd(n);rd(m);rd(s);\n    for(ll i=1,a,b,c;i<n;i++){\n        rd(a);rd(b);//rd(c); c\u6307a\u5230b\u7684\u8ddd\u79bb \n        add(a,b,1);\n        add(b,a,1);\n    }\n    dfs(s,0);\n    depth[0]=INF;\n    Get_ST(t);\n    while(m--){\n        ll x,y;\n        rd(x);rd(y);\n        if(out[x]>in[y]) swap(x,y);\n        ll LCA=RMQ(out[x],in[y]);\n        wr(LCA);puts(\"\");// LCA\u7684\u70b9\uff08\uff08\uff08 \n        //wr(depth[x]+depth[y]-depth[LCA]*2);puts(\"\");  xy\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 \n    }\n    return 0;\n}\n```\n\n**st\u8868\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4ee3\u66ff\uff0c\u53ef\u662flog\uff08n\uff09\uff08\uff08\uff08**\n![](https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=d76eeb2db1096b63814c56563c03ab7c/8b82b9014a90f603aea5b0453612b31bb051ed9f.jpg)\n\n\u6211\u592a**\u849f**\u4e86\uff0c\u9884\u5904\u7406O\uff08nlog\uff08n\uff09\uff09\uff0c\u5728\u7ebf\u8be2\u95eeO\uff081\uff09\u90fd\u5dee\u70b9T\n\n\u500d\u589e\u540e\u9762\u8865\uff08\u60b2\uff09\n\n[\u849f\u84bb\u535a\u5ba2<-](https://www.luogu.org/blog/jiangruohuang/#)\u795e\u7287\u4eec\u63d0\u70b9\u63d0\u70b9**ORTorz**\uff08\n\n\u4e5f\u53ea\u6709\u80cc\u5305\u548c\u7ebf\u6bb5\u6811\u8be6\u7ec6\u4e00\u70b9\uff08\n\n2019.10.3",
        "postTime": 1570111022,
        "uid": 83999,
        "name": "Demoe",
        "ccfLevel": 7,
        "title": "LCA\u6a21\u677f"
    },
    {
        "content": "### \u524d\u8a00\uff1a\n\tLCA,\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e24\u79cd\u6bd4\u8f83\u5e38\u7528\u7684\u505a\u6cd5\u3002\n    1. \u6811\u94fe\u5256\u5206\u6c42LCA\u3002\n    2. \u500d\u589e\u3002\n           \n------------\n### \u6811\u94fe\u5256\u5206\u6c42LCA\n\n- \u5982\u679c\u4e24\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u6211\u4eec\u53ea\u8981\u627e\u5230\u8fd9\u4e24\u70b9\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u8f93\u51fa\u5c31\u884c\u4e86\n- \u5982\u679c\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u90a3\u5c31\u627e\u5230\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4ee4\u5b83\u7b49\u4e8e\u5b83\u6240\u5728\u7684\u91cd\u94fe\u94fe\u7aef\u7684\u7236\u8282\u70b9\n\n------------\n- Code:\n------------\n```\n - \u53d8\u91cf\u89e3\u91ca\uff1a\n  1. siz[x]:\u4ee5x\u4e3a\u6839\u7ed3\u70b9\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u4e2a\u6570\n  2. son[x]:\u4ee5x\u4e3a\u6839\u7ed3\u70b9\u7684\u91cd\u513f\u5b50\n  3. dep[]:\u8282\u70b9\u7684\u6df1\u5ea6\n```\n\n------------\n\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,m,s,cnt;\nint st[500010],siz[500010],fa[500010],dep[500010],son[500010],top[500010];\nstruct node{\n\tint to,last;\n}e[5000000];\nvoid add(int u,int v){\n\te[++cnt].to=v;\n\te[cnt].last=st[u];\n\tst[u]=cnt;\n}\nvoid dfs1(int x){\n\tdep[x]=dep[fa[x]]+1;//\u6df1\u5ea6\u52a01\n\tsiz[x]=1;\n\tfor(int i=st[x];i;i=e[i].last){\n\t\tint v=e[i].to;\n\t\tif(v==fa[x])//\u5982\u679cv\u5c31\u662fx\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u5c31\u8df3\u8fc7\n\t\t\tcontinue;\n\t\tfa[v]=x;//v\u7684\u7236\u4eb2\u8282\u70b9\u4e3ax\n\t\tdfs1(v);//\u641c\u7d22\u513f\u5b50\n\t\tsiz[x]+=siz[v];//\u4ee5x\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u52a0\u4e0a\u513f\u5b50\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\n\t\tif(!son[x]||siz[son[x]]<siz[v])//\u5f53x\u6ca1\u6709\u513f\u5b50\u8282\u70b9\u6216x\u7684\u5176\u4ed6\u513f\u5b50\u7684\u5b50\u6811\u5927\u5c0f\u6bd4\u513f\u5b50\u8282\u70b9v\u7684\u5b50\u6811\u5927\u5c0f\u8981\u5c0f\n\t\t\tson[x]=v;//\u5c31\u66f4\u65b0\u91cd\u513f\u5b50\n\t}\n}\nvoid dfs2(int x,int topf){\n\ttop[x]=topf;//\u8fd9\u4e2a\u70b9\u6240\u5728\u94fe\u7684\u9876\u7aef\n\tif(son[x])//\n\t\tdfs2(son[x],topf);//\u6309\u5148\u5904\u7406\u91cd\u513f\u5b50\uff0c\u518d\u5904\u7406\u8f7b\u513f\u5b50\u7684\u987a\u5e8f\u9012\u5f52\u5904\u7406 \n\tfor(int i=st[x];i;i=e[i].last){\n\t\tint v=e[i].to;\n\t\tif(v==fa[x]||v==son[x])\n\t\t\tcontinue;\n\t\tdfs2(v,v); //\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8f7b\u513f\u5b50\u90fd\u6709\u4e00\u6761\u4ece\u5b83\u81ea\u5df1\u5f00\u59cb\u7684\u94fe\n\t}\n}\nint main(){\n\tscanf(\"%d %d %d\",&n,&m,&s);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\tadd(x,y);add(y,x);\n\t}\n\tdfs1(s);\n\tdfs2(s,s);\n\tfor(int i=1;i<=m;i++){\n\t\tint x,y;\n\t\tscanf(\"%d %d\",&x,&y);\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]>=dep[top[y]])\n\t\t\t\tx=fa[top[x]];\n\t\t\telse\n\t\t\t\ty=fa[top[y]];\n\t\t}\n\t\tif(dep[x]<dep[y])\n\t\t\tprintf(\"%d\\n\",x);\n\t\telse\n\t\t\tprintf(\"%d\\n\",y);\n\t}\n\treturn 0;\n}\n```\n\n------------\n\n### \u500d\u589e\n------------\n- #### \u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u6839\u636e\u4e24\u4e2a\u8282\u70b9\u7684\u7684\u6df1\u5ea6\uff0c\u5982\u4e0d\u540c\uff0c\u5411\u4e0a\u8c03\u6574\u6df1\u5ea6\u5927\u7684\u8282\u70b9\uff0c\u4f7f\u5f97\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u5c42\u4e0a\uff0c\u5982\u679c\u6b63\u597d\u662f\u7956\u5148\u7ed3\u675f\uff0c\u5426\u5219\uff0c\u5c06\u8fde\u4e2a\u8282\u70b9\u540c\u65f6\u4e0a\u79fb\uff0c\u67e5\u8be2\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\n------------\n- \u500d\u589eCode\uff1a\n\n------------\n```\n- \u53d8\u91cf\u89e3\u91ca\uff1a\n  1. lg[]:\u9884\u5904\u7406log2\n  2. dep[]:\u8282\u70b9\u7684\u6df1\u5ea6\n  3. fa[i][j]\u8868\u793a\u8282\u70b9i\u76842^j\u7ea7\u7956\u5148\n\n```\n\n\n------------\n\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nint n,m,s,cnt,st[500010],lg[500010],dep[500010],fa[500010][30];\nstruct node{\n    int to,last;\n}e[1000010];\nvoid add(int u,int v){\n    e[++cnt].to=v;\n    e[cnt].last=st[u];\n    st[u]=cnt;\n}\nvoid work(int s,int fath){\n    dep[s]=dep[fath]+1;\n    fa[s][0]=fath;\n    for(int i=1;(1<<i)<=dep[s];i++)\n        fa[s][i]=fa[fa[s][i-1]][i-1];//\u610f\u601d\u662ff\u76842^i\u7956\u5148\u7b49\u4e8ef\u76842^(i-1)\u7956\u5148\u76842^(i-1)\u7956\u5148\n                               \t     //2^i=2^(i-1)+2^(i-1)\n    for(int i=st[s];i;i=e[i].last)\n        if(e[i].to!=fath)\n            work(e[i].to,s);\n}\nint lca(int x,int y){\n    if(dep[x]<dep[y])//\u5982\u679cx\u7684\u6df1\u5ea6\u6bd4y\u7684\u6df1\u5ea6\u5927\n        swap(x,y);//\u4ea4\u6362x\uff0cy\n    while(dep[x]>dep[y])\n        x=fa[x][lg[dep[x]-dep[y]]-1];//x\uff0cy\u5148\u8df3\u5230\u540c\u4e00\u6df1\u5ea6\u3002\n    if(x==y)\n        return x;\n    for(int i=lg[dep[x]]-1;i>=0;i--)//\u5411\u4e0a\u8df3\n        if(fa[x][i]!=fa[y][i]){\u5982\u679cx\uff0cy\u76842^i\u7ea7\u7956\u5148\u4e0d\u76f8\u7b49\n            x=fa[x][i];//\u8df3\n            y=fa[y][i];\n        }\n    return fa[x][0];\n}\nint main(){\n    scanf(\"%d %d %d\",&n,&m,&s);\n    for(int i=1;i<n;i++){\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        add(x,y);add(y,x);\n    }\n    work(s,0);\n    for(int i=1;i<=n;i++)\n        lg[i]=lg[i-1]+(1<<lg[i-1]==i);//\u9884\u5904\u7406log2\n    for(int i=1;i<=m;i++){\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        printf(\"%d\\n\",lca(x,y));\n    }\n    return 0;\n}\n```\n\n\n------------\n",
        "postTime": 1559713055,
        "uid": 114791,
        "name": "D\u611a\u8005",
        "ccfLevel": 0,
        "title": "\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u9898\u89e3"
    },
    {
        "content": "/\\*\n\\* P3379\n\n\\* Au:Small\\_Ash\n\n\\* LCA \u4e0d\u8fc7\u6211\u4e0d\u662f\u7528\u500d\u589e\uff0c\u6211\u662f\u7528\u4e86RMQ+dfs\u5e8f\uff08\u671b\u6709\u5176\u4ed6\u5927\u795e\u5199\u500d\u589e\u7684\uff09\n\n\\* \u4ec0\u4e48\u662fdfs\u5e8f\u5927\u5bb6\u5e94\u8be5\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u9898\u76ee\u6570\u636e\u800c\u8a00\uff0cdfs\u5e8f\u662f 4 2 4 1 3 1 5 1 4 \uff08\u4e5f\u53ef\u4ee5\u5199\u62104 1 3 1 5 1 4 2 4\uff0c\u4f46\u662f\u6ca1\u6709\u5f71\u54cd\uff09\n\n\\* \u662f\u7684\uff0c\u8fd9\u9898\u5229\u7528\u7684\u662fdfs\u5e8f\u7684\u4e00\u4e2a\u7279\u6027\u2014\u2014\u4e24\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u5176\u4e4b\u95f4\u7684\u6570\u4e00\u5b9a\u662f\u5176\u672c\u8eab\u6216\u5176\u5b50\u8282\u70b9\uff08\u8bc1\u660e\u5927\u5bb6\u81ea\u5df1\u63a8\u63a8\u5c31\u597d\u4e86\uff09\n\n\\* \u4e3e\u4e2a\u4f8b\u5b50\uff0c 4 2 4 '1' 3 1 5 '1' 4 \u70b9\u51fa\u7684\u4e24\u4e2a1\u4e4b\u95f4\u7684\u662f 3 1 5 \u5c31\u90fd\u662f\u5b50\u8282\u70b9\u6216\u672c\u8eab\n\n\\* \u4e8e\u662f\uff0c\u53c8\u6709\u4e86\u6027\u8d28 \u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\uff08\u5305\u62ec\u8fd9\u4e24\u70b9\uff09\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\u5c31\u662f\u4e24\u4e2a\u70b9\u7684\u6700\u8fdb\u7956\u5148\n\n\\* \u8bc1\u660e\uff1a\u5047\u8bbe\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u4e0d\u662fLCA\uff0c\u90a3\u4e48\u8fd9\u4e2aLCA\u70b9\u4e00\u5b9a\u5728\u4e24\u70b9\u4e4b\u5916\u3002\n\n\\* \u4f46\u662fdfs\u5e8f\u5728\u8d70\u5230\u4efb\u610f\u4e00\u4e2a\u5144\u5f1f\u524d\uff0c\u4e00\u5b9a\u8981\u7ecf\u8fc7\u4e24\u4e2a\u8ddd\u79bb\u6700\u8fd1\u7684\u516c\u5171\u70b9\uff08\u4e5f\u5c31\u662fLCA\uff09\n\n\\* \u6240\u4ee5\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u8bc1\u660eLCA\u70b9\u4e00\u5b9a\u5728\u4e24\u70b9\u4e4b\u95f4\u3002\n\n\\* \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u6570\u5bf9\u5e94\u7684dfs\u5e8f\u4e2d\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6765\uff0cRMQ\u4e00\u904d\u5404\u4e2a\u70b9\u7684\u6df1\u5ea6\uff08\u4f18\u5148\u53d6\u6df1\u5ea6\u5c0f\u7684\uff09\u3002\n\n\\* \u6700\u540e\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u8be2\u4e24\u4e2a\u8282\u70b9\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u6700\u5c0f\u6df1\u5ea6\u5bf9\u5e94\u7684\u8282\u70b9\u5c31\u597d\u4e86\uff08\u6709\u70b9\u7ed5\u53e3\u4ee4\uff0c\u53ef\u4ee5\u770b\u4ee3\u7801\uff09\n\n\\*/\n    \n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint n,m,s,f[1000005],d[500005],l[500005],fn;//f\u662fdfs\u5e8f\uff0cd\u662f\u6df1\u5ea6\uff0cl\u662f\u6700\u5de6\u8fb9\u5bf9\u5e94\u4f4d\u7f6e \nbool v[500005];//dfs\u6807\u8bb0 \nint head[500005],next[1000005],to[1000005];//\u90bb\u63a5\u8868\nint r[1000005][20];//RMQ\u7528 \nvoid RMQ(){\n    for (int i=0;i<fn;i++) r[i][0]=f[i];\n    for (int j=1;(1<<j)<=fn;j++)\n        for (int i=0;i+(1<<j)-1<fn;i++){\n            if (d[r[i][j-1]]<=d[r[i+(1<<(j-1))][j-1]]) r[i][j]=r[i][j-1];\n            else r[i][j]=r[i+(1<<(j-1))][j-1];\n        } \n    return;\n}\nvoid dfs(int x,int y){ \n    v[x]=true;d[x]=y;\n    f[fn]=x;l[x]=fn;fn++;\n    int k=head[x];\n    while (k!=-1){\n        while (v[to[k]]) k=next[k];\n        if (k==-1) break;\n        dfs(to[k],y+1);\n        f[fn]=x;fn++;\n        k=next[k];\n    }\n    return;\n}\nint find(int  x,int y){\n    int kk,xx,a,b;\n    kk=0;\n    a=min(x,y);\n    b=max(x,y);\n    xx=b-a+1;\n    while ((1<<(kk+1))<=xx) kk++;\n    if (d[r[a][kk]]<=d[r[b-(1<<kk)+1][kk]]) return r[a][kk];\n            else return r[b-(1<<kk)+1][kk];\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&s);\n    memset(head,-1,sizeof(head));\n    for (int i=1;i<n;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        next[2*i-1]=head[b];\n        head[b]=2*i-1;\n        to[2*i-1]=a;\n        next[2*i]=head[a];\n        head[a]=2*i;\n        to[2*i]=b;\n    }\n    fn=0;\n    dfs(s,0);\n    RMQ();\n    for (int i=0;i<m;i++){\n        int a,b;\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",find(l[a],l[b]));\n    }\n    return 0;\n}\n\n```",
        "postTime": 1474645267,
        "uid": 745,
        "name": "dph754132771",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8 P3379 \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148](https://www.luogu.org/problem/P3379)\n\n------------\n\n# \u5199\u5728\u524d\u9762\n**$LCA$\u662f\u56fe\u8bba\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u7b97\u6cd5\u4e4b\u4e00\u3002\u5b83\u7684\u5e94\u7528\u8303\u56f4\u975e\u5e38\u5e7f\u6cdb\uff0c\u5728$NOIP$\u4e2d\u8003\u5bdf\u7684\u975e\u5e38\u591a\uff0c\u4ee3\u7801\u5bb9\u6613\u5b9e\u73b0\uff0c\u5b9e\u7528\u6027\u5f88\u9ad8\uff0c\u662f ~~\u849f\u84bb~~ \u5165\u95e8\u5fc5\u5907\u7b97\u6cd5\u3002**\n\n**\u4f5c\u4e3a\u4e00\u4e2a\u521a\u5b66$LCA$\u7684 ~~\u849f\u84bb~~ \uff0c\u6211\u51b3\u5b9a\u5199\u4e00\u7bc7\u535a\u5ba2\u6765\u603b\u7ed3\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5e0c\u671b\u5728\u5199\u535a\u5ba2\u7684\u8fc7\u7a0b\u4e2d\u66f4\u6df1\u5165\u5730\u4e86\u89e3\u548c\u638c\u63e1\u8fd9\u4e2a\u7b97\u6cd5\u3002**\n\n\n------------\n# \u7b97\u6cd5\u5185\u5bb9\n$LCA$\u7684\u5168\u79f0\u4e3a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u987e\u540d\u601d\u4e49\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\u800c\u8a00\uff0c\u5176$LCA$\u4e3a\u4ed6\u4eec\u7684\u516c\u5171\u7956\u5148\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9\u3002\n#### \u5728\u4ee5\u4e0b\u8fd9\u4e2a\u56fe\u4e2d\uff0c$2$\u548c$5$\u7684$LCA$\u662f$3$\uff0c\u800c$1$\u548c$5$\u7684$LCA$\u4e3a$4$\u3002![](https://cdn.luogu.com.cn/upload/pic/65577.png)\n\u770b\u5230\u8fd9\u91cc\uff0c\u5927\u5bb6\u5bf9$LCA$\u7684\u6982\u5ff5\u5e94\u8be5\u4e86\u89e3\u5f97\u5f88\u6e05\u695a\u4e86\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\n\n\n------------\n\n## \u2160 \u66b4\u529b\u641c\u7d22 \n\u6700\u5bb9\u6613\u60f3\u5230\u7684\uff0c\u4e5f\u6700\u5bb9\u6613\u5b9e\u73b0\u7684\uff0c\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u7528 $O(n)$\u7684\u65f6\u95f4\u7ef4\u62a4\u4e00\u4e2a\u6df1\u5ea6\u6570\u7ec4 $depth[]$ \uff0c\u7136\u540e\u4ece\u6bcf\u4e2a\u8be2\u95ee\u7684\u70b9\u904d\u5386\u5176\u7956\u5148\uff0c\u4e24\u4e2a\u8be2\u95ee\u70b9\u7684\u516c\u5171\u7956\u5148\u4e2d $depth[]$ \u6700\u5c0f\u7684\u5373\u4e3a\u7b54\u6848\u3002\n\n\u6bcf\u6b21\u67e5\u8be2\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(logn)$\uff0c\u5373\u8be5\u6811\u7684\u6df1\u5ea6\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\uff0c\u5bf9\u4e8e\u672c\u9898\u53ef\u80fd\u4f1a$TLE$\u3002\n\n\n------------\n\n## \u2161 \u4f18\u5316\u7b97\u6cd5 \n#### \u65e2\u7136\u66b4\u529b\u4f1a$TLE$\uff0c\u90a3\u4e48\u5c31\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u4f18\u5316\u7b97\u6cd5\u3002\n\n\n------------\n\n### $1^o$  \u500d\u589e\u6c42$LCA$\n\n\u500d\u589e\u5728\u4fe1\u606f\u5b66\u4e2d\u662f\u4e00\u79cd\u5f88\u91cd\u8981\u7684\u601d\u60f3\u3002\u5728\u627e\u5bfb\u8be2\u95ee\u70b9\u7684\u7956\u5148\u65f6\uff0c\u53ef\u4ee5\u7528\u5230\u500d\u589e\u7684\u601d\u60f3\u3002$DFS$\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684$i$\u7684\u5411\u4e0a $2^j$\u4e2a\u8282\u70b9$f[i][j]$\uff0c\u8fd9\u6837\u5728\u5411\u4e0a\u5bfb\u627e\u8be2\u95ee\u70b9\u7684\u7956\u5148\u65f6\u80fd\u5f97\u5230\u4e00\u4e2a$logn$\u7ea7\u522b\u7684\u4f18\u5316\u3002\u7531$1,2,4,8,...,2^n$\u7b49\u6570\u80fd\u7ec4\u6210$1-2^n$\u6240\u6709\u6570\u7684\u6027\u8d28\u53ef\u77e5\uff0c\u8be5\u4f18\u5316\u662f\u53ef\u884c\u7684\u3002\n\n\u5982\u4e0b\u56fe$f[11][0]=10,f[11][1]=6,f[f[11][0]][0]=f[11][1]=6$\n\n\u7531$2^n=2^{n-1}+2^{n-1}$\u53ef\u5f97 $\\large\\text{f[i][j]=f[f[i][j-1]][j-1]}$ \u8fd9\u6837\u4e00\u4e2a~~\u7384\u5b66~~\u7684\u500d\u589e\u5f0f\u5b50\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/65611.png)\n\n\n------------\n#### \u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\n\n```cpp\nvoid dfs(int u,int father){\n    Dep[u]=Dep[father]+1;//\u7ef4\u62a4\u6df1\u5ea6\n    for(int i=0;i<=19;i++)\n        f[u][i+1]=f[f[u][i]][i];//\u500d\u589e\u9012\u63a8\u5f0f\n    for(int e=first[u];e;e=nxt[e]){\n        int v=go[e];\n        if(v==father)\n            continue;\n        f[v][0]=u;\n        dfs(v,u);//\u7ee7\u7eed\u8fdb\u884c\u641c\u7d22\n    }\n}\nint lca(int x,int y){\n    if(Dep[x]<Dep[y])\n        swap(x,y);\n    for(int i=20;i>=0;i--){\n        if(Dep[f[x][i]]>=Dep[y])\n             x=f[x][i];\n        if(x==y)\n            return x;\n    }//\u5411\u4e0a\u641c\u5230\u540c\u4e00\u6df1\u5ea6\n    for(int i=20;i>=0;i--){\n        if(f[x][i]!=f[y][i]){\n            x=f[x][i];\n            y=f[y][i];\n        }\n    }//\u540c\u65f6\u500d\u589e\u5411\u4e0a\u5bfb\u627e\u516c\u5171\u7956\u5148\n    return f[x][0];\n}\n```\n#### \u5b8c\u6574\u4ee3\u7801\u8bf7\u89c1\u6587\u672b\n\n\n------------\n\n### $2^o$ $ST$\u8868\u6c42$LCA$\n\u8fd9\u662f\u4e00\u79cd\u548c\u4ee5\u4e0a\u4e24\u79cd\u7b97\u6cd5\u601d\u8def\u4e0d\u540c\u7684\u7b97\u6cd5\uff0c\u5b83\u548c$tarjan$\u4e00\u6837\u662f\u57fa\u4e8e$DFS$\u7684\uff0c\u540c\u65f6\u4e5f\u662f\u79bb\u7ebf\u7684\uff0c\u5728\u8fd9\u4e2a\u65b9\u9762\u4e0a\uff0c**\u500d\u589e**\u7684\u5e94\u7528\u8303\u56f4**\u66f4\u4e3a\u5e7f\u6cdb**\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u8fd9\u79cd\u7b97\u6cd5\u662f\u5982\u4f55\u6c42\u89e3$LCA$\u7684\u3002\n\n\u5728\u4e00\u6b21$DFS$\uff0c\u4e5f\u5c31\u662f\u6811\u7684\u5148\u5e8f\u904d\u5386+\u56de\u6eaf\u4e2d\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6$depth[]$ \u548c$DFS$\u5e8f$dfn[]$\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u8282\u70b9\u5728$DFS$\u5e8f\u4e2d$dfn[]$\u51fa\u73b0\u6700\u65e9\u7684\u4f4d\u7f6e$fst[]$\u3002\n\n\u56fe$1$\u662f\u56fe$4$\u7684$dfn[]$\u5e8f\u5217\uff0c\u56fe$2$\u662f\u56fe$4$\u7684$depth[]$\u5e8f\u5217\uff0c\u56fe$3$\u662f\u56fe$4$\u7684$1-n$\u7684$fst[]$\u6570\u7ec4\u3002\n\n\n![](https://cdn.luogu.com.cn/upload/pic/65624.png)\n![](https://cdn.luogu.com.cn/upload/pic/65658.png)\n![](https://cdn.luogu.com.cn/upload/pic/65659.png)\n![](https://cdn.luogu.com.cn/upload/pic/65577.png)\n\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u8981\u6c42$1$\u548c$5$\u7684$LCA$\uff0c\u5c31\u5728$dfn[]$\u4e2d\u627e\u5230$fst[1]=2$\u548c$fst[5]=7$\u4e24\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728$[2,7]$\u8fd9\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684$depth[]$\u6700\u5c0f\u7684\u503c\uff0c\u4e5f\u5c31\u662f$4$\uff0c\u5373\u4e3a\u7b54\u6848\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u884c\u5462\uff1f\u56e0\u4e3a$DFS$\u6df1\u5ea6\u4f18\u5148\u7684\u6027\u8d28\u4fdd\u8bc1\u4e86\u5728\u641c\u5b8c\u6240\u6709$x$\u7684\u5b50\u8282\u70b9\u4e4b\u524d\u4e0d\u4f1a\u8bbf\u95ee\u5230\u6bd4$x$\u7684$depth[]$\u66f4\u5c0f\u7684\u70b9\uff0c\u4ece\u800c\u4fdd\u8bc1\u5728$dfn[]$\u5e8f\u5217\u7684\u8fd9\u4e2a\u533a\u95f4\u6bb5\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u6bd4$LCA$\u7684$depth[]$\u66f4\u5c0f\u7684\u70b9\u3002\n\n\u533a\u95f4\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u53ef\u4ee5\u7528$ST$\u8868\u6765\u7ef4\u62a4\uff0c$O(nlogn)$\u5efa$ST$\u8868\uff0c\u6bcf\u6b21\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(1)$\uff0c\u5bf9\u4e8e$m>n$\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4$LCA$\u66f4\u4e3a\u4f18\u79c0\u3002\n\n#### \u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\n```cpp\ninline void dfs(int cur,int dep){\n\tfst[cur]=++cnt;\n\tdfn[cnt]=cur;\n\tdepth[cnt]=dep+1;//\u7ef4\u62a4\u4e09\u4e2a\u6570\u7ec4\n\tfor(int i=0;i<g[cur].size();i++){\n\t\tint t=g[cur][i];\n\t\tif(fst[t]==0){\n\t\t\tdfs(t,dep+1);//\u5148\u5e8f\u904d\u5386\n\t\t\tdfn[++cnt]=cur;\n\t\t\tdepth[cnt]=dep+1;//\u56de\u6eaf\n\t\t}\n\t}\n}\ninline void ST_init(){\n\tfor(int i=1;i<=cnt;i++){\n\t\tst[i][0]=i;//\u521d\u59cb\u5316ST\u8868\n\t}\n\tint a,b;\n\tfor(int j=1;j<=lg[cnt];j++){\n\t\tfor(int i=1;i+(1<<j)-1<=cnt;i++){//DP\u6c42\u53d6ST\u8868\n\t\t\ta=st[i][j-1];\n\t\t\tb=st[i+(1<<j-1)][j-1];\n\t\t\tif(depth[a]<depth[b])\n\t\t\t\tst[i][j]=a;\n\t\t\telse\n\t\t\t\tst[i][j]=b;\n\t\t}\n\t}\n\t\t\n}\ninline int lca(int x,int y){//\u8be2\u95ee\n\tx=fst[x];y=fst[y];\n\tif(x>y)\n\t\tswap(x,y);\n\tint k=lg[y-x];//\u53d6\u65ad\u70b9\n\tint a=st[x][k];\n\tint b=st[y-(1<<k)+1][k];\n\tif(depth[a]<depth[b])//\u67e5\u8be2\u533a\u95f4\u6700\u5c0f\u503c\n\t\treturn dfn[a];\n\telse\n\t\treturn dfn[b];\n} \n```\n#### \u5b8c\u6574\u4ee3\u7801\u8bf7\u89c1\u6587\u672b\n\n\n------------\n\n### $3^o$ $tarjan$\u6c42$LCA$\n$tarjan$\u662f\u4e00\u4e2a\u5bf9$DFS$\u5341\u5206\u6709\u7814\u7a76\u7684\u5946\u4f6c\uff0c\u6709\u8bb8\u591a\u540d\u53eb$tarjan$\u7684\u7b97\u6cd5\u90fd\u662f\u57fa\u4e8e$DFS$\u7684\u3002\u5f53\u7136\uff0c\u6b64\u5904\u7684$tarjan$\u4e0e\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684$tarjan$\u662f\u4e24\u7801\u4e8b\u3002\n\n\u76f8\u6bd4\u4e8e\u500d\u589e\u800c\u8a00\uff0c$tarjan$\u548c$ST$\u8868\u90fd\u662f\u79bb\u7ebf\u7684\u505a\u6cd5\uff0c\u4f46$tarjan$\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n+m)$\uff0c\u6bd4\u500d\u589e\u548c$ST$\u8868\u90fd\u66f4\u52a0\u4f18\u79c0\u3002\n\n$tarjan$\u505a\u6cd5\u5982\u4e0b\uff1a\u5148\u8bfb\u5165\u6240\u6709\u7684\u8be2\u95ee\uff0c\u7136\u540e\u5728$DFS$\u65f6\uff0c\u7ef4\u62a4\u4e00\u4e2a$vis[]$\u6570\u7ec4\uff0c\u6807\u8bb0\u641c\u7d22\u4e86\u54ea\u4e9b\u8be2\u95ee\u70b9\uff0c\u5982\u679c\u5173\u4e8e$x$\u7684\u8be2\u95ee$y$\u5df2\u7ecf\u641c\u7d22\u8fc7\uff0c\u5219$LCA(x,y)=find(x)$\uff0c\u4e5f\u5c31\u662f$x$\u7684\u7956\u5148\uff08\u8fd9\u91cc\u5199$y$\u4e5f\u6ca1\u95ee\u9898\uff09\u3002$DFS$\u5b8c\u4ee5$rt$\u4e3a\u6839\u7684\u5b50\u6811\u540e\uff0c\u7528\u5e76\u67e5\u96c6\u5c06$rt$\u4e0e\u5b83\u7684\u7236\u4eb2\u5408\u5e76\u3002\n\n$tarjan$\u7b97\u6cd5\u540c\u6837\u5229\u7528\u4e86$DFS$\u7684\u6027\u8d28\uff0c\u5728\u641c\u7d22\u5b8c\u4ee5$rt$\u4e3a\u6839\u7684\u5b50\u6811\u524d\uff0c\u6240\u6709$rt$\u7684\u540e\u4ee3\u7684\u7956\u5148\u90fd\u662f$rt$\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86$tarjan$\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002\n\n#### \u5177\u4f53\u4ee3\u7801\u5b9e\u73b0\n```cpp\nint find(int x){//\u5e76\u67e5\u96c6\u64cd\u4f5c\n\tif(fa[x]==x)\n\t\treturn x;\n\telse\n\t\treturn fa[x]=find(fa[x]);\n}\nvoid tarjan(int u){\n\tvis[u]=1;//\u6807\u8bb0\u8bbf\u95ee\n\tfor(auto qid:q[u]){//c++11,\u679a\u4e3e\u6240\u6709\u4e0eu\u6709\u5173\u7684\u8be2\u95ee\n\t\tif(query[qid].x==u)\n\t\t\tif(vis[query[qid].y])\n\t\t\t\tquery[qid].lca=find(query[qid].y);\n\t\telse\n\t\t\tif(vis[query[qid].x])\n\t\t\t\tquery[qid].lca=find(query[qid].x); \n\t}\n\tfor(auto v:g[u]){\n\t\tif(vis[v])\n\t\t\tcontinue;\n\t\ttarjan(v);//DFS u\u7684\u5b50\u8282\u70b9\n\t\tfa[v]=u;//\u5408\u5e76\u5e76\u67e5\u96c6\n\t}\n}\n```\n#### \u5b8c\u6574\u4ee3\u7801\u8bf7\u89c1\u6587\u672b\n\n\n------------\n\n### $4^o$ \u6811\u94fe\u5256\u5206\u6c42$LCA$\n\n\u6811\u5256\u7684\u7b97\u6cd5\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c\uff0c\u770b\u4e0d\u61c2\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u5176\u5b9e\u6211\u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u9898\u7528\u6811\u5256\u662f\u5927\u6750\u5c0f\u7528\u3002~~\u5176\u5b9e\u662f\u6211\u592a\u83dc\u4e0d\u4f1a\u5199\u6811\u5256~~\n\n\u8fd9\u91cc\u7b80\u5355\u8bb2\u4e00\u4e0b\u6811\u5256\u7684\u601d\u8def\uff0c\u5982\u679c\u4e24\u4e2a\u8be2\u95ee\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u5176$LCA$\u5373\u4e3a\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\uff0c\u5982\u679c\u4e24\u4e2a\u8be2\u95ee\u70b9\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u5c31\u628a\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u8df3\u5230\u5b83\u6240\u5728\u7684\u91cd\u94fe\u9876\u7aef\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u3002\n\n#### \u7ed9\u51fa\u4f2a\u4ee3\u7801\n```\nint lca(int x,int y){\n\tif x\u7684\u6df1\u5ea6\u5927\u4e8ey\n\t\tswap(x,y);\n\tif x\u4e0ey\u5728\u540c\u4e00\u94fe\u4e0a\n\t\treturn x;\n\telse\n\t\ty=father[top[y]];\n\t\treturn lca(x,y);\n}\n```\n\n\n------------\n# \u6587\u7ae0\u7ed3\u5c3e\n### \u6709\u4e00\u4ef6\u5f88\u91cd\u8981\u7684\u4e8b\u60c5\u8ddf\u5927\u5bb6\u8bf4\uff1a\u6d1b\u8c37\u7684\u6a21\u677f\u65f6\u95f4\u5361\u7684\u592a\u6b7b\uff0c\u8bb0\u5f97\u5f00$O2$\u4f18\u5316\u3002\n[$TLE$\u60e8\u6848]( https://www.luogu.org/record/21475847)\n\n\n------------\n\n## \u500d\u589e\u6c42$LCA$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500050;\nint n,m,q,x,y,head[maxn<<1],tot,dep[maxn],f[maxn][21];\nstruct node{\n\tint to,nxt;\n}e[maxn<<1];\ninline void add(int u,int v){\n\te[++tot].to=v;\n\te[tot].nxt=head[u];\n\thead[u]=tot;\n}\ninline void dfs(int u,int pre){\n    dep[u]=dep[pre]+1;\n    f[u][0]=pre;\n    for(int i=1;i<=20;i++)\n        f[u][i]=f[f[u][i-1]][i-1];\n    for(int i=head[u];i;i=e[i].nxt){\n        int v=e[i].to;\n        if(v!=pre){\n        \tf[v][0]=u;\n        \tdfs(v,u);\n    \t}\n    }\n}\ninline int lca(int x,int y){\n    if(dep[x]<dep[y])\n        swap(x,y);\n    for(int i=20;i>=0;i--){\n        if(dep[f[x][i]]>=dep[y])\n             x=f[x][i];\n        if(x==y)\n            return x;\n    }\n    for(int i=20;i>=0;i--)\n        if(f[x][i]!=f[y][i])\n            x=f[x][i],y=f[y][i];\n    return f[x][0];\n}\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n\twhile(isdigit(ch)){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nint main(){\n    n=read();q=read();m=read();\n    for(int i=1;i<n;i++){\n    \tx=read();y=read();\n        add(x,y);add(y,x);\n    }\n    dfs(m,0);\n    while(q--){\n    \tx=read();y=read();\n        printf(\"%d\\n\",lca(x,y));\n    }\n    return 0;\n}\n```\n\n\n------------\n\n\n## $ST$\u8868\u6c42$LCA$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5e5+5;\nconst int maxbit=22;\nvector<int> g[maxn];\nint dfn[maxn*2];\nint depth[maxn*2];\nint lg[maxn*2];\nint st[maxn*2][maxbit];\nint fst[maxn];\ninline int read(){\n    char ch=getchar();\n    int x=0,f=1;\n    while((ch>'9'||ch<'0')&&ch!='-')\n        ch=getchar();\n    if(ch=='-')\n        f=-1,ch=getchar();\n    while('0'<=ch&&ch<='9')\n        x=x*10+ch-'0',\n        ch=getchar();\n    return x*f;\n} \nint cnt=0;\ninline void dfs(int cur,int dep){\n    fst[cur]=++cnt;\n    dfn[cnt]=cur;\n    depth[cnt]=dep+1;\n    for(int i=0;i<g[cur].size();i++){\n        int t=g[cur][i];\n        if(fst[t]==0){\n            dfs(t,dep+1);\n            dfn[++cnt]=cur;\n            depth[cnt]=dep+1;\n        }\n    }\n}\ninline void ST_init(){\n    for(int i=1;i<=cnt;i++){\n        st[i][0]=i;\n    }\n    int a,b;\n    for(int j=1;j<=lg[cnt];j++){\n        for(int i=1;i+(1<<j)-1<=cnt;i++){\n            a=st[i][j-1];\n            b=st[i+(1<<j-1)][j-1];\n            if(depth[a]<depth[b])\n                st[i][j]=a;\n            else\n                st[i][j]=b;\n        }\n    }\n}\ninline int lca(int x,int y){\n    x=fst[x];y=fst[y];\n    if(x>y)\n        swap(x,y);\n    int k=lg[y-x];\n    int a=st[x][k];\n    int b=st[y-(1<<k)+1][k];\n    if(depth[a]<depth[b])\n        return dfn[a];\n    else\n        return dfn[b];\n} \nint main(){\n    lg[0]=-1;\n    for(int i=1;i<maxn*2;i++)\n        lg[i]=lg[i>>1]+1;\n    int n,m,s;\n    n=read(),m=read(),s=read();\n    //scanf(\"%d%d%d\",&n,&m,&s);\n    int x,y;\n    for(int i=1;i<n;i++){\n        x=read(),y=read();\n        //scanf(\"%d%d\",&x,&y);\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n    dfs(s,0);\n    ST_init();\n    while(m--){\n        x=read();y=read();\n        cout<<lca(x,y)<<endl; \n    }\n    return 0;\n}\n/*\n5 5 4\n3 1\n2 4\n5 1\n1 4\n2 4\n3 2\n3 5\n1 2\n4 5\n*/\n```\n\n\n------------\n\n## $tarjan$\u6c42$LCA$\uff08\u63d0\u4ea4\u65f6\u8bb0\u5f97\u9009$c++11$)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5e5+5;\nstruct qnode{\n    int x,y,lca;\n}query[maxn];\nint fa[maxn];\nbool vis[maxn];\nvector<int> g[maxn],q[maxn];\nvoid init(){\n    for(int i=0;i<maxn;i++)\n        fa[i]=i;\n}\nint find(int x){\n    if(fa[x]==x)\n        return x;\n    else\n        return fa[x]=find(fa[x]);\n}\nvoid tarjan(int u){\n    vis[u]=1;\n    for(auto qid:q[u]){\n        if(query[qid].x==u){\n            if(vis[query[qid].y])\n                query[qid].lca=find(query[qid].y);\n        }\n        else if(vis[query[qid].x])\n                query[qid].lca=find(query[qid].x); \n    }\n    for(auto v:g[u]){\n        if(vis[v])\n            continue;\n        tarjan(v);\n        fa[v]=u;\n    }\n}\nint main(){\n    init();\n    int n,m,s;\n    cin>>n>>m>>s;\n    int x,y;\n    for(int i=1;i<n;i++){\n        scanf(\"%d%d\",&x,&y);\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&query[i].x,&query[i].y);\n        q[query[i].x].push_back(i);\n        q[query[i].y].push_back(i);\n    }\n    tarjan(s);\n    for(int i=1;i<=n;i++)\n        printf(\"%d\\n\",query[i].lca);\n}\n```\n\n\n------------\n\n### \u672c\u849f\u84bb\u7b2c\u4e00\u7bc7\u535a\u5ba2\u5386\u65f6\u4e09\u5929\uff0c\u5230\u6b64\u5199\u5b8c\u3002\n\n\n\n------------\n## $updated$ $ $ $on$ $ $ $2019/8/5$:\n* **\u500d\u589e\u7684\u4ee3\u7801\u539f\u672c\u662f\u5c0f\u84dd\u4e66\u4e0a\u7684\uff0c\u7801\u98ce\u4e0d\u5fcd\u76f4\u89c6\uff0c\u6211\u53c8\u91cd\u65b0\u6253\u4e86\u4e00\u904d\uff0c\u770b\u5f97\u8212\u670d\u591a\u4e86\u3002**\n\n* **$ST$\u8868\u4e5f\u662f\u79bb\u7ebf\u7684\uff0c\u5f00\u59cb\u5199\u9519\u4e86\uff0c\u8fd9\u91cc\u6539\u8fc7\u6765\u3002**\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1564027296,
        "uid": 62246,
        "name": "Del_Your_Heart",
        "ccfLevel": 0,
        "title": "\u6d45\u8c08LCA"
    },
    {
        "content": "# \u5178\u578bTarjan(\u7cd6\u6d46)\u89e3LCA\u7684\u9898\u76ee\n\u4e0b\u9762\u8bb2\u89e3\u7cd6\u6d46\u7b97\u6cd5\n\n\u7cd6\u6d46\u7b97\u6cd5\u7684\u8fc7\u7a0b\u5c31\u662f\u4e00\u4e2aDFS\u7684\u8fc7\u7a0b\n\n### \u5148\u5b9a\u4e49\u4e00\u4e9b\u4e1c\u897f\ndep[i]:i\u5728\u6811\u4e2d\u7684\u6df1\u5ea6\n\nid[i]:i\u5728\u5e76\u67e5\u96c6\u4e2d\u7684\u7956\u5148\n\nvst[i]:\u6709\u6ca1\u6709\u8bbf\u95ee\u8fc7\n\ndfn[i]:i\u7684\u65f6\u95f4\u6233\n### \u518d\u770b\u4e00\u4e0b\u5e76\u67e5\u96c6\u7684\u4e24\u884c\u4ee3\u7801:\n```cpp\ninline int getr(int i){return i==id[i]?i:id[i]=getr(id[i]);}//\u627e\u7956\u5148 \ninline void unite(int u,int v){int a=getr(u),b=getr(v);if(dep[a]>dep[b])id[a]=b;else id[b]=a;}//\u6309\u6df1\u5ea6\u6700\u5c0f\u5408\u5e76 \n```\n\u8fd9\u91cc\u5e76\u67e5\u96c6\u7684getr\u51fd\u6570\u4f7f\u7528\u4e86\u8def\u5f84\u538b\u7f29,\u522b\u7684\u5e94\u8be5\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\n### \u63a5\u4e0b\u6765\u5c31\u662f\u7cd6\u6d46\u7b97\u6cd5\u5566\n\u5148\u4e0a\u4ee3\u7801:\n```cpp\nvoid tarjan(int x){//\u7cd6\u6d46\u7b97\u6cd5 \n\tid[x]=x;vst[x]=true;//\u521d\u59cb\u5316\u7956\u5148\u4e3a\u81ea\u5df1\u5e76\u8bbe\u7f6e\u5df2\u8bbf\u95ee \n\tfor(int i=0;i<es[x].size();i++)\n\t\tif(!vst[es[x][i]]){//\u8bbf\u95ee\u6240\u6709x\u7684\u5b50\u8282\u70b9es[x][i] \n\t\t\tdep[es[x][i]]=dep[x]+1;//\u6df1\u5ea6+1 \n\t\t\ttarjan(es[x][i]);//\u9012\u5f52\u8c03\u7528 \n\t\t\tunite(es[x][i],x);//\u5c06\u5b50\u8282\u70b9\u5411\u7236\u8282\u70b9\u5408\u5e76 \n\t\t} \n\tfor(int i=0;i<qes[x].size();i++)\n\t\tif(vst[qes[x][i].num])//\u65f6\u95f4\u6233\u9760\u524d \n\t\t\tq[qes[x][i].id].lca=getr(qes[x][i].num);//\u8ba1\u7b97lca=\u65f6\u95f4\u6233\u9760\u524d\u7684\u8282\u70b9\u7684\u7956\u5148,\u540e\u9762\u4f1a\u8bc1\u660e \n}\n```\n\u73b0\u5728\u6211\u4eec\u6765\u8bc1\u4e00\u4e0b\u4e3a\u4ec0\u4e48lca=\u65f6\u95f4\u6233\u9760\u524d\u7684\u8282\u70b9\u7684\u7956\u5148\n\n\u8bc1:\n\n\u8bbe\u65f6\u95f4\u6233\u9760\u524d\u7684\u8282\u70b9\u7684\u7956\u5148=x,\u4e24\u4e2a\u8282\u70b9\u4e3aa,b,\u6ee1\u8db3dfn[a]<dfn[b]. \n\n\u5148\u8bc1x\u4e3aCA\n\n\u663e\u7136x\u4e3aa\u7956\u5148,\u4e0b\u8bc1x\u4e3ab\u7956\u5148\n\n\u82e5x\u4e0d\u4e3ab\u7956\u5148,\u5219CA(a,b)\u4e3ax\u7956\u5148,\u5219getr(a)=getr(x)\u2260x,\u77db\u76fe!\n\n\u6240\u4ee5,x\u4e3aCA(a,b).\n\n\u518d\u8bc1x\u4e3aLCA\n\n\u82e5x\u4e0d\u4e3aLCA,\u5219LCA(a,b)\u5fc5\u4e3ax\u5b50\u6811\u7684\u975e\u6839\u8282\u70b9.\n\n\u5219tarjan(LCA(a,b))\u5fc5\u7136\u6ca1\u6709return,\u56e0\u4e3atarjan(b)\u6ca1\u6709\u7b97\u5b8c.\n\n\u6240\u4ee5\u8fd8\u672a\u6267\u884cLCA(a,b)\u5411\u5176\u7236\u8282\u70b9\u5408\u5e76,\u56e0\u6b64getr(a)=getr(LCA(a,b))\u2260x,\u77db\u76fe!\n\n\u7efc\u4e0a,x\u4e3aLCA.\u8bc1\u6bd5. \n\n**\u5de7\u5999\u5730\u8fd0\u7528\u4e86dfs\u7684\u641c\u7d22\u987a\u5e8f,\u5341\u5206\u4f69\u670d\u5f53\u5e74\u841d\u535c\u7cd6\u6d46(Robert Tarjan)\u7684\u8111\u6d1e**\n\n\u4e0b\u9762\u5c31\u662f\u4ee3\u7801\u5566\n```cpp\n#include<bits/stdc++.h>\n#define N 500005\nusing namespace std;\nint n,m,s,dep[N],id[N];bool vst[N];\nstruct query{\n\tint id,x,y,lca;\n}q[N];\nstruct data{\n\tint id,num;\n};\nvector<int>es[N];\nvector<data>qes[N];\ninline int getr(int i){return i==id[i]?i:id[i]=getr(id[i]);}\ninline void unite(int u,int v){int a=getr(u),b=getr(v);if(dep[a]>dep[b])id[a]=b;else id[b]=a;}\ninline void tarjan(int x){\n\tid[x]=x;vst[x]=true;\n\tfor(int i=0;i<es[x].size();i++)\n\t\tif(!vst[es[x][i]]){\n\t\t\tdep[es[x][i]]=dep[x]+1;\n\t\t\ttarjan(es[x][i]);\n\t\t\tunite(es[x][i],x);\n\t\t} \n\tfor(int i=0;i<qes[x].size();i++)if(vst[qes[x][i].num])q[qes[x][i].id].lca=getr(qes[x][i].num);\n}\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1,x,y;i<n;i++)scanf(\"%d%d\",&x,&y),es[x].push_back(y),es[y].push_back(x);\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d\",&q[i].x,&q[i].y);\n\t\tq[i].id=i;\n\t\tqes[q[i].x].push_back((data){i,q[i].y});\n\t\tqes[q[i].y].push_back((data){i,q[i].x});\n\t}\n\ttarjan(s);\n\tfor(int i=1;i<=m;i++)printf(\"%d\\n\",q[i].lca);\n\treturn 0;\n}\n```\n\u603b\u590d\u6742\u5ea6:O(n+m),\u6bd4ST\u8868/\u500d\u589e\u8981\u5feb\u591a\u4e86,\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\u8981\u7528Tarjan\u7b97\u6cd5\n\n\uff08\u4e0d\u8fc7\u8fd9\u6b21\u83ab\u540d\u5176\u5999\u5730TE\u4e86,\u4e5f\u8bb8\u662f\u56e0\u4e3avector\u901f\u5ea6\u6162,\u7528\u4e86\u6c27\u6c14\u4f18\u5316\u624d\u8fc7\u7684)",
        "postTime": 1545996255,
        "uid": 121027,
        "name": "Spasmodic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "- \u524d\u8a00\uff1a\n\n  \u7ed9\u5b9a\u4e00\u4e2a\u6709\u6839\u6811,\u82e5\u8282\u70b9$z$\u662f\u4e24\u8282\u70b9$x,y$\u6240\u6709\u516c\u5171\u7956\u5148\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u4e2a,\u5219\u79f0$z$\u662f$x,y$\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148($Least Common Ancestors$)\uff0c\u7b80\u79f0$LCA$.\u5b83\u5728\u8bb8\u591a\u4e0e\u6811\u76f8\u5173\u95ee\u9898\u4e2d\u53d1\u6325\u8f83\u5927\u4f5c\u7528\n  \n- \u600e\u4e48\u6c42\n\n  \u4ee5\u8fd9\u9898\u4e3a\u4f8b:[luogu P3379 \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09](https://www.luogu.org/problemnew/show/P3379)\n\n  1. \u6734\u7d20\u66b4\u529b\n   \n     \u8ba9\u6df1\u5ea6\u66f4\u5927\u7684\u8282\u70b9$x$\u5411\u4e0a\u8d70\u81f3\u4e0e\u53e6\u4e00\u8282\u70b9$y$\u5728\u540c\u4e00\u6df1\u5ea6\u4e0a,\u7136\u540e\u540c\u65f6\u5411\u4e0a\u8d70\u76f4\u81f3\u76f8\u9047.\n     \n     \u65f6\u95f4\u590d\u6742\u5ea6  $O(N)$\n     \n     \u4ee3\u7801\u7565\n     \n  2. \u500d\u589e\u4f18\u5316\n  \n     \u6309\u7167\u4e0a\u9762\u7684\u601d\u8def,\u4f46\u662f\u4e0d\u662f\u4e00\u4e2a\u4e00\u4e2a\u8d70,\u800c\u662f\u5148\u641c\u4e00\u904d\u6811,\u9884\u5904\u7406\u51fa$x$\u7684\u7b2c$2^k (1<=2^k<=max(dep))$\u4e2a\u7236\u4eb2,\u5b58\u8d77\u6765.\u8be2\u95ee\u65f6,\u8fd8\u662f\u8ba9\u6df1\u5ea6\u66f4\u5927\u7684\u8282\u70b9$x$\u5411\u4e0a\u500d\u589e\u81f3\u4e0e\u53e6\u4e00\u8282\u70b9$y$\u5728\u540c\u4e00\u6df1\u5ea6\u4e0a,\u7136\u540e\u4e00\u8d77\u500d\u589e\u5411\u4e0a\u8df3\n     \n     \u65f6\u95f4\u590d\u6742\u5ea6  $O(M \\log N)$\n     \n     \u4ee3\u7801\u89c1\u540e\n     \n  3. \u79bb\u7ebfTarjan\n  \n     \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u901a\u4fd7\u6613\u61c2\uff1a\u6211\u4eec\u5148\u5c06\u6240\u6709\u8be2\u95ee\u5b58\u8d77\u6765\uff0cDFS\u4e00\u904d\u6811\u540c\u65f6\u6211\u4eec\u628a\u8282\u70b9\u5206\u4e3a3\u7c7b\n     \n     1. \u5df2\u7ecf\u56de\u6eaf\u5b8c\u7684\u6807\u8bb0\u4e3a$''1''$\n     \n     2. \u6b63\u5728dfs\u7684\u53cadfs\u8fc7\u4f46\u672a\u56de\u6eaf\u7684\u6807\u8bb0\u4e3a$''2''$\n     \n     \u7136\u540e\u5728\u6b63\u5728dfs\u7684\u8282\u70b9\u4e2d\u5904\u7406\u4e0e\u5b83\u6709\u5173\u7684\u8be2\u95ee,\u82e5\u6b63\u5728\u56de\u6eaf\u5df2\u7ecfDFS\u8fc7\u7684\u8282\u70b9$x$,\u6709\u4e2a\u8be2\u95ee\u662f\u6c42$LCA(x,y)$\u3002\n     \n     \u82e5$y$\u7684\u6807\u8bb0\u662f$''1''$,\u663e\u7136$y$\u7b2c\u4e00\u4e2a\u6807\u8bb0\u4e3a$''2''$\u7684\u7956\u5148\u5c31\u4e3a$LCA(x,y)$\u3002\u4e07\u4e00\u6807\u8bb0\u4e0d\u662f$''1''$\u5462\uff1f\u6bd4\u5982\u5f53$y$\u662f$x$\u7956\u5b97\u8fd8\u662f\u6ca1\u5173\u7cfb,\u5728\u56de\u6eaf\u5230$y$\u65f6,$y$\u5c31\u662f\u7b26\u5408\u8981\u6c42\u7684\u7b54\u6848\n     \n     \u90a3\u600e\u4e48\u5feb\u901f\u6c42\u7b2c\u4e00\u4e2a\u6807\u8bb0\u4e3a$''2''$\u7684\u7956\u5148\u5462?\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86.\n     \n     \u65f6\u95f4\u590d\u6742\u5ea6$O(N+M)$\uff0c\u8f83\u5feb\u7136\u800c\u53ea\u80fd\u79bb\u7ebf\n     \n     \u4ee3\u7801\u89c1\u540e;\n     \n  4. \u6811\u94fe\u5256\u5206\n  \n     \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u6811\u5256\u7684\u8bdd\u53ef\u4ee5\u53bb\u505a\u505a\u6811\u5256\u6a21\u677f\u6216\u770b\u8fd9\u4f4d\u5927\u4f6c\u535a\u5ba2https://www.cnblogs.com/George1994/p/7821357.html\n     \n     \u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0,\u6bd5\u7adf\u662fLCA\u677f\u5b50\u9898\n     \n     \u4ee3\u7801\u89c1\u540e\uff0c\u7ed9\u5927\u5bb6\u505a\u4e2a\u53c2\u8003\n     \n     \u65f6\u95f4\u590d\u6742\u5ea6$O(M \\log N)$\n     \n- \u500d\u589e\u4ee3\u7801\uff1a\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cctype>\n#include <cmath>\n#include <queue>\n#include <map>\n#define ll long long \n#define ri register int \nusing namespace std;\nconst int maxn=500005;\nconst int inf=0x7fffffff;\ntemplate <class T>inline void read(T &x){\n    x=0;int ne=0;char c;\n    while(!isdigit(c=getchar()))ne=c=='-';\n    x=c-48;\n    while(isdigit(c=getchar()))x=(x<<3)+(x<<1)+c-48;\n    x=ne?-x:x;\n    return ;\n}\nstruct Edge{\n    int ne,to;\n}edge[maxn<<1];\nint h[maxn],num_edge=0,t;\ninline void add_edge(int f,int to){\n    edge[++num_edge].ne=h[f];\n    edge[num_edge].to=to;\n    h[f]=num_edge;\n    return ;\n}\nint f[maxn][35],d[maxn];\nint n,m,s;\nvoid bfs(){\n    int u,v;\n    memset(d,0,sizeof(d));\n    queue <int>q;\n    q.push(s);d[s]=1;\n    //f[s][0]=s;\n    while(q.size()){\n        u=q.front();q.pop();\n        for(ri i=h[u];i;i=edge[i].ne){\n            v=edge[i].to;\n            if(d[v])continue;\n            f[v][0]=u,d[v]=d[u]+1;\n            //cout<<u<<' '<<v<<endl;\n            for(ri j=1;j<=t;j++)\n\t\t\t{f[v][j]=f[f[v][j-1]][j-1];}//cout<<'8'<<f[v][j]<<endl;};\n            q.push(v);\n        }\n    }\n    return ;\n}\ninline int lca(int x,int y){\n    if(d[x]<d[y])swap(x,y);\n    if(x==y)return x;\n    for(ri i=t;i>=0;i--){\n\t\tif(d[f[x][i]]>=d[y])x=f[x][i];\n\t}\n\t//cout<<'*'<<x<<' '<<y<<endl;\n\tif(x==y)return x;\n\tfor(ri i=t;i>=0;i--){\n\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\t}\n\treturn f[x][0];\n}\nint main(){\n    int x,y,z;\n    read(n),read(m),read(s);\n    memset(f,0,sizeof(f));\n    t=(int)(log(n)/log(2))+1;\n    for(ri i=1;i<n;i++){\n        read(x),read(y);\n        add_edge(x,y);\n        add_edge(y,x);\n        //cout<<x<<' '<<y<<endl;\n    }\n    bfs();\n    for(ri i=1;i<=m;i++){\n        read(x),read(y);\n        printf(\"%d\\n\",lca(x,y));\n    }\n    return 0;   \n}\n```\n- Tarjan\u4ee3\u7801  \n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cctype>\n#include <cstring>\n#include <queue>\n#include <map>\n#define ll long long \n#define ri register int \n#define ull unsigned long long\nusing namespace std;\nconst int maxn=500005;\nconst int inf=0x7fffffff;\ntemplate <class T>inline void read(T &x){\n\tx=0;int ne=0;char c;\n\twhile(!isdigit(c=getchar()))ne=c=='-';\n\tx=c-48;\n\twhile(isdigit(c=getchar()))x=(x<<3)+(x<<1)+c-48;\n\tx=ne?-x:x;\n\treturn ;\n}\nint n,m,s,t;\nstruct Edge{\n\tint ne,to;\n}edge[maxn<<1];\nstruct QU{\n\tint d,id;\n\tQU(int x,int y){d=x,id=y;}\n\tQU(){;}\n};\nvector <QU>q[maxn];\nint h[maxn],num_edge=0,ans[maxn];\ninline void add_edge(int f,int to){\n\tedge[++num_edge].ne=h[f];\n\tedge[num_edge].to=to;\n\th[f]=num_edge;\n\treturn;\n}\nint fa[maxn],vis[maxn];\nint get(int x){\n\tif(fa[x]!=x)fa[x]=get(fa[x]);\n\treturn fa[x];\n}\nvoid dfs(int cur){\n\tint u,v;\n\tvis[cur]=1;\n\tfor(ri i=h[cur];i;i=edge[i].ne){\n\t\tv=edge[i].to;\n\t\tif(vis[v])continue;\n\t\tdfs(v);\n\t\tfa[v]=cur;//dfs\u540e\u518d\u5408\u5e76\n\t}\n\tfor(ri i=0;i<q[cur].size();i++){\n\t\tu=q[cur][i].d,v=q[cur][i].id;\n        if(vis[u]==2){\n\t\t\tans[v]=get(u);\n\t\t}\n\t}\n\tvis[cur]=2;//dfs\u8fc7\n\treturn ;\n}\nint main(){\n\tint x,y;\n\tread(n),read(m),read(s);\n\tfor(ri i=1;i<n;i++){\n\t\tread(x),read(y);\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t\tfa[i]=i;\n\t}fa[n]=n;\n\tfor(ri i=1;i<=m;i++){\n\t\tread(x),read(y);\n\t\t//q[x].push_back(y);q[y].push_back(x);\n\t\tq[x].push_back(QU(y,i));\n\t\tq[y].push_back(QU(x,i));\n\t}\n\tdfs(s);\n\tfor(ri i=1;i<=m;i++){\n\t\tprintf(\"%d\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n```\n\n- \u6811\u94fe\u5256\u5206\u4ee3\u7801\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cctype>\n#include <map>\n#include <queue>\n#define ll long long \n#define ri register int \nusing namespace std;\nconst int maxn=500005;\nconst int inf=0x7fffffff;\ntemplate <class T>inline void read(T &x){\n\tx=0;int ne=0;char c;\n\twhile(!isdigit(c=getchar()))ne=c=='-';\n\tx=c-48;\n\twhile(isdigit(c=getchar()))x=(x<<3)+(x<<1)+c-48;\n\tx=ne?-x:x;\n}\nint n,m,s;\nstruct Edge{\n\tint ne,to;\n}edge[maxn<<1];\nint h[maxn],num_edge=0;\ninline void add_edge(int f,int to){\n\tedge[++num_edge].ne=h[f];\n\tedge[num_edge].to=to;\n\th[f]=num_edge;\n}\nint dep[maxn],fa[maxn],size[maxn],top[maxn],son[maxn];//son--\u91cd\u513f\u5b50  top--\u91cd\u94fe\u9876\u7aef\u6216\u8f7b\u94fe\u8282\u70b9\nvoid dfs_1(int u){\n\tint v;\n\tsize[u]=1;\n\tfor(ri i=h[u];i;i=edge[i].ne){\n\t\tv=edge[i].to;\n\t\tif(dep[v])continue;\n\t\tdep[v]=dep[u]+1,fa[v]=u;\n\t\tdfs_1(v);\n\t\tsize[u]+=size[v];\n\t\tif(!son[u]||size[son[u]]<size[v])son[u]=v;\n\t}\n\treturn;\n}\nvoid dfs_2(int u,int t){//t--top\u91cd\u94fe\u8d77\u70b9\n\tint v;\n\ttop[u]=t;\n\tif(!son[u])return ;//\u53f6\u5b50\u8282\u70b9\n\tdfs_2(son[u],t); //dfs\u91cd\u94fe\u4e0a\u5404\u8282\u70b9\n\tfor(ri i=h[u];i;i=edge[i].ne){\n\t\tv=edge[i].to;\n\t\tif(v==fa[u])continue;\n\t    if(v!=son[u])dfs_2(v,v);//dfs\u4e0b\u4e00\u6761\u94fe\u7684\u8d77\u70b9\n\t}\n\treturn ;\n}\nint main(){\n\tint x,y;\n\tread(n),read(m),read(s);\n\tfor(ri i=1;i<n;i++){\n\t\tread(x),read(y);\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tdep[s]=1;\n\tdfs_1(s);\n\tdfs_2(s,s);\n\tfor(ri i=1;i<=m;i++){\n\t\tread(x),read(y);\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]])y=fa[top[y]];\n\t\t\telse x=fa[top[x]];\n\t\t}//\u6b64\u65f6\u5728\u4e00\u6761\u94fe\u4e0a\n\t\tif(dep[x]>dep[y])swap(x,y);\n\t\tprintf(\"%d\\n\",x);\n\t}\n\treturn 0;\n}\n\n```\n    ",
        "postTime": 1530598337,
        "uid": 61382,
        "name": "Rye_Catcher",
        "ccfLevel": 6,
        "title": "\u5b66\u4e60\u7b14\u8bb0--\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA)\u7684\u51e0\u79cd\u6c42\u6cd5"
    },
    {
        "content": "### \u5176\u4ed6\u5927\u4f6c\u5176\u5b9e\u5df2\u7ecf\u8bb2\u7684\u542c\u6e05\u695a\u7684\u4e86\uff0c\u8fd9\u91cc\u53ea\u662f\u5728\u67e5\u8be2\u7684\u65f6\u5019\u6539\u6210\u4e8c\u5206\u641c\u7d22\uff08\u597d\u7406\u89e3\u5f88\u591a\uff09\uff0c\u5e76\u4e14\u6709\u8be6\u7ec6\u7684\u4ee3\u7801\u6ce8\u91ca\n\n### \u5927\u6982\u601d\u8def\u8fd8\u662f\u8bf4\u4e00\u4e0b\u5427\uff1a\n### 1.\u8bfb\u5165\u6570\u636e\uff0c\u8fde\u8fb9\uff08\u65e0\u5411\u56fe\u8fde\u4e24\u6761\uff0c\u6ce8\u610f\u6570\u7ec4\u5927\u5c0f*2\uff09\uff0c\u50cfST\u8868\u90a3\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u7528\u4e00\u4e2a\u8868\u8bb0\u5f55\u4e0b\u4ed6\u7684\u7b2c2^0 2^1 2^2\u2026\u2026\u7684\u7236\u4eb2\n### 2.\u7528BFS\u521d\u59cb\u5316\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\n### 3.\u67e5\u8be2\u65f6\u5148\u5c06\u6df1\u5ea6\u5927\u7684\u70b9\u7f29\u5230\u4e8e\u6df1\u5ea6\u5c0f\u7684\u70b9\u7684\u90a3\u4e00\u5c42\uff0c\u7136\u540e\u7528\u4e8c\u5206\u641c\u7d22\uff08\u8be6\u7ec6\u8fc7\u7a0b\u770b\u4ee3\u7801\u6ce8\u91ca\uff09\u627e\u51fa\u6700\u8fd1\u7956\u5148\u7684\u5c42\u6570\uff0c\u518d\u627e\u5230\u90a3\u4e2a\u70b9\u5e76\u8f93\u51fa\n\n\n```cpp\n//AC\u8bc1\u660e\uff1ahttps://www.luogu.org/recordnew/show/6367306\n#include <iostream>\n#include <cstdio>\n#include <string.h>\n#include <queue>\nusing namespace std;\nconst int maxn=5e5,maxm=5e5;\nint log2[maxn+5]/*\u9884\u5904\u7406log*/,depth[maxn+5]/*\u6df1\u5ea6*/,f[18][maxn+5]/*\u7236\u4eb2\u8868*/,head[2*maxn+5],nxt[2*maxn+5],v[2*maxn+5];/*\u4e09\u4e2a\u524d\u5411\u661f\u6570\u7ec4\uff0c\u4e0b\u9762\u8981\u8fde\u4e24\u6761\u8fb9\u4e00\u5b9a\u8981\u6ce8\u610f\u4e582*/\nint n,m,s;//n\u4e3a\u70b9\u6570\uff0cm\u4e3a\u95ee\u9898\u6570\uff0cs\u4e3a\u6570\u6839\n\ninline int read()//\u8bfb\u5165\u4f18\u5316\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9') c=getchar();\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    return x;\n}\n\ninline void write(int x)//\u8f93\u51fa\u4f18\u5316\n{\n    if(x>9) write(x/10);\n    putchar(x%10+'0');\n    return;\n}\n\ninline void cal_log()//\u9884\u5904\u7406log\uff0c\u56e0\u4e3alog2[n]=log2[n-1]+log2[2],\u4e14log2[2]=1\uff0c\u7b80\u5355\u7684\u6570\u5b66\u63a8\u5bfc\n{\n    log2[1]=0;\n    log2[2]=1;\n    for(int i=3;i<=n;i++)\n        log2[i]=log2[i/2]+1;\n    return;\n}\n\nint cnt=0;\ninline void addline(int x,int y)//\u52a0\u8fb9\n{\n    v[cnt]=y;\n    nxt[cnt]=head[x];\n    head[x]=cnt++;\n    return;\n}\n\ninline void make_table(int s,int len)//\u5236\u4f5c\u7236\u4eb2\u8868\uff0cs\u4e3a\u6811\u6839\uff0clen\u4e3a\u6811\u7684\u6700\u5927\u6df1\u5ea6\n{\n    for(int i=1;i<=log2[len];i++)//\u7236\u4eb2\u8868\u53ea\u9700\u8981\u505a\u5230log2[len]\u5373\u53ef\n        for(int j=1;j<=n;j++)//\u5bf9\u6bcf\u4e2a\u6570\u627e\u7956\u5148\n        {\n            int nt=f[i-1][j];//\u9996\u5148\u627e\u5230\u4e0a\u4e00\u4e2a\u7236\u4eb2\uff0c\u53732^(i-1)\u7ea7\u522b\u7684\u7236\u4eb2\uff0c\u8df3\u5230\u90a3\u4e00\u5c42\n            f[i][j]=f[i-1][nt];//\u8bfb\u53d6nt\u76842^(i-1)\u7ea7\u522b\u7684\u7236\u4eb2\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86i\u76842^i\u7ea7\u522b\u7684\u7236\u4eb2\uff0c\u4e5f\u5c31\u662f2^(i-1)+2^(i-1)=2^i\n        }\n    return;\n}\n\ninline int make_depth(int s)//\u8ba1\u7b97\u6df1\u5ea6\uff0cs\u4e3a\u6811\u6839\n{\n    queue<int> Q;//\u5b9a\u4e49\u961f\u5217\n    Q.push(s);//\u5148\u538b\u5165\u6811\u6839\n    depth[s]=1;//\u5b9a\u4e49\u6811\u6839\u7684\u6df1\u5ea6\u4e3a1\n    while(!Q.empty())//\u5f53\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\u4e00\u76f4\u8ba1\u7b97\n    {\n        int x=Q.front();//\u63d0\u53d6\u4e00\u4e2a\u70b9\n        Q.pop();//\u5f39\u6389\u4ed6\n        for(int i=head[x];i!=-1;i=nxt[i])//\u641c\u8fb9\n            if(!depth[v[i]])//\u5982\u679cdepth\u4e3a0\uff0c\u8bf4\u660e\u6ca1\u6709\u88ab\u8ba1\u7b97\u8fc7\u6df1\u5ea6\n            {\n                f[0][v[i]]=x;//\u56e0\u4e3av[i]\u6bd4x\u540e\u51fa\u73b0\uff0c\u8bf4\u660ev[i]\u7684\u6df1\u5ea6\u80af\u5b9a\u5927\u4e8ex\uff08x\u5728v[i]\u4e4b\u4e0a\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4v[i]\u7684\u7236\u4eb2\u662fx\n                //\u90a3\u4e48\u5c31\u628av[i]\u76842^0\uff08\u4e5f\u5c31\u662f1\uff09\u7ea7\u522b\u7684\u7236\u4eb2\u6807\u4e3ax\uff1b\n                depth[v[i]]=depth[x]+1;//v[i]\u7684\u6df1\u5ea6\u5c31\u662fx\u7684\u6df1\u5ea6+1\n                Q.push(v[i]);//\u628av[i]\u538b\u5165\u961f\u5217\n            }\n\n    }\n    int maxdepth=0;//\u8bb0\u5f55\u6700\u5927\u6df1\u5ea6\u4fbf\u4e8e\u8fd4\u56de\n    for(int i=1;i<=n;i++)\n        maxdepth=max(maxdepth,depth[i]);//\u641c\u4e00\u904d\u6df1\u5ea6\uff0c\u8bb0\u5f55\u6700\u5927\u6df1\u5ea6\n    return maxdepth;//\u8fd4\u56de\u6700\u5927\u6df1\u5ea6\n}\n\ninline int search(int pst,int len)//\u67e5\u8be2pst\u5f80\u4e0a\u6570len\u5c42\u7684\u7236\u4eb2\uff0cpst\u4e3a\u5f53\u524d\u4f4d\u7f6e\uff0clen\u4e3a\u5269\u4f59\u9700\u8981\u67e5\u627e\u7684\u5c42\u6570\n{\n    if(len==0)//\u5982\u679clen\u4e3a0\u8bf4\u660e\u5df2\u7ecf\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef\n        return pst;\n    int level=log2[len];//\u8ba1\u7b97\u51falen\u7684level\uff0c\u4e5f\u5c31\u662f\u6700\u63a5\u8fd1\u4e8e2^n\u7684\u6570\uff0c\u4fbf\u4e8e\u7528\u7236\u4eb2\u8868\u8df3\u8f6c\n    return search(f[level][pst],len-(1<<level));//\u8df3\u8f6c\u52302^level\u7ea7\u522b\u7684\u7236\u4eb2\uff0c\u628a\u5269\u4f59\u9700\u8981\u67e5\u627e\u7684\u5c42\u6570\u51cf\u63892^level\n}\n\ninline int LCA(int x,int y)//LCA\u4e3b\u51fd\u6570\uff0cx\u548cy\u8868\u793a\u5f85\u67e5\u5bfb\u7684\u4e24\u4e2a\u70b9\n{\n    int dx=depth[x],dy=depth[y];//dx\u548cdy\u8bb0\u5f55x\u548cy\u7684\u6df1\u5ea6\n    if(dx<dy)//\u5982\u679cx\u6df1\u5ea6\u5c0f\u4e8ey\uff0c\u8bf4\u660ex\u5728y\u4e4b\u4e0a\uff0cy\u9700\u8981\u8df3\u5230\u8ddf\u4ed6\u540c\u4e00\u4e2a\u5c42\u518d\u8fdb\u884c\u641c\u7d22\n        y=search(y,dy-dx),dy=dx;//\u627e\u5230y\u5f80\u4e0a\u6570dy-dx\u5c42\u7684\u7236\u4eb2\uff0c\u5373\u8df3\u5230\u8ddfx\u540c\u4e00\u5c42\uff0c\u5e76\u628ady=dx\n    else//\u5982\u679cx\u6df1\u5ea6\u5927\u4e8ey\uff0c\u540c\u4e0a\u7c7b\u63a8\n        x=search(x,dx-dy),dx=dy;\n    int l=1,r=dx;//\u4e8c\u5206\u641c\u7d22\uff0c\u9501\u5b9a\u9700\u8981\u641c\u7d22\u7684\u533a\u95f4\uff0c\u56e0\u4e3adx=dy\uff0cr\u53d6\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef\n    //\u8fd9\u91cc\u6211\u4eec\u8ba9l\u4e00\u76f4\u5728\u76f8\u540c\u7956\u5148\u7684\u8303\u56f4\u5185\uff0c\u4e5f\u5c31\u662f\u8bf4l\u4e00\u5b9a\u662fx\u548cy\u7684\u76f8\u540c\u7956\u5148\uff0c\u8ba9r\u5f80\u4e0a\u7f29\uff0c\u6700\u540e\u8fd4\u56del\n \twhile(l<r)\n    {\n        int mid=((l+r)>>1)+1;//\u53d6\u4e2d\u95f4\u503c\uff0c+1\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\uff08\u5982\u679c\u4e0d+1\uff0c\u53ef\u4ee5\u8bd5\u4e00\u4e0bl=1,r=2\u4e14\u6211\u4eec\u6240\u9700\u8981\u7684\u503c\u5c31\u5728l\u4e0a\u7684\u60c5\u51b5\uff0c\u4e0d+1\u5c31\u4f1a\u6b7b\u5faa\u73af\uff09\n \t\tif(search(x,dx-mid)==search(y,dy-mid))//\u8ba9x\u548cy\u5411\u4e0a\u8df3\u8dc3\u76f8\u540c\u7684\u9ad8\u5ea6\uff0c\u770b\u770b\u7956\u5148\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\n            l=mid;//\u5982\u679c\u662f\uff0c\u8ba9l\u5f80\u4e0b\u7f29\uff0c\u56e0\u4e3amid\u6ee1\u8db3\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff0cl\u7f29\u5230mid\u662f\u5b89\u5168\u7684\n        else\n            r=mid-1;//\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48mid\u8fd9\u4e2a\u70b9\u80af\u5b9a\u4e0d\u662f\uff0c\u8ba9r\u5230mid\u7684\u57fa\u7840\u4e0a\u518d-1\n    }\n    return search(x,dx-l);//\u901a\u8fc7\u641c\u7d22\u6211\u4eec\u627e\u5230\u4e86\u7956\u5148\u6240\u5728\u7684\u5c42\u6570l\uff0cx\u5728dx\u5c42\uff08\u8fd9\u91cc\u548c\u540e\u9762\u6210y\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3adx=dy\uff09\uff0c\u6240\u4ee5\u4ecex\u5f80\u4e0a\u6570dx-l\u5c42\u5373\u4e3ax\u548cy\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n}\n\nint main()\n{\n    memset(head,-1,sizeof(head));//\u524d\u5411\u661f\u5fc5\u5907\n    n=read(),m=read(),s=read();//\u8bfb\u5165\n    for(int i=1;i<=n-1;i++)\n    {\n        int x=read(),y=read();//\u8bfb\u53d6\u4e24\u4e2a\u7aef\u70b9\n        addline(y,x);//\u6811\u662f\u65e0\u5411\u56fe\uff0c\u9700\u8981\u8fde\u4e24\u6761\u8fb9\uff0c\u4e0a\u9762\u5b9a\u4e49\u6570\u7ec4\u5927\u5c0f\u7684\u65f6\u5019\u8bb0\u5f97\u4e582\n        addline(x,y);\n    }\n\n    cal_log();//\u9884\u5904\u7406log2x\n    int maxdepth=make_depth(s);//\u8ba1\u7b97\u6df1\u5ea6\u5e76\u8fd4\u56de\u6700\u5927\u6df1\u5ea6\u4ee5\u4fbf\u4e0b\u9762\u505a\u8868\u7528\n    make_table(s,maxdepth);//\u505a\u7236\u4eb2\u8868\uff0c\u7528\u500d\u589e\u601d\u60f3\n\n    while(m--)\n    {\n        int x=read(),y=read();//\u8bfb\u5165\u67e5\u8be2\u7684\u4e24\u4e2a\u70b9\n        write(LCA(x,y));//\u8f93\u51fa\u8fd4\u56de\u503c\n        putchar('\\n');\n    }\n\n    return 0;//\u597d\u4e60\u60ef\n}\n\n```",
        "postTime": 1521855498,
        "uid": 29354,
        "name": "CodyTheWolf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "## \u6700\u8fd1\u516c\u5171\u7956\u5148\u57fa\u7840\u77e5\u8bc6\uff1a\n\n\u6211\u4eec\u8bb0x\uff0cy\u7684\u7956\u5148\u4e3aLCA(x,y\uff09\n\n\u5982\u56fe\u6240\u793a\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/1dnmhqgl.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u5728\u6b64\u56fe\u4e2d\uff1aLCA(6,9)=1,LCA(7,9)=4,LCA(4,7)=4\n\n\u660e\u767d\u4e86\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u57fa\u7840\u540e\uff1a\u6211\u4eec\u8bf4\u4e00\u8bf4\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u6c42\u6cd5\uff1a\n\n# \u4e00\uff1a\u5411\u4e0a\u6807\u8bb0\u6cd5\uff1a\n\n\u4e5f\u662f\u6700\u6162\u7684\u65b9\u6cd5\uff1a\u65f6\u95f4\u590d\u6742\u5ea6$O(nm)$\n\n\u601d\u8def\uff1a\u4ecex\u5411\u4e0a\u6807\u8bb0\u5230\u6839\u8282\u70b9\uff0c\u4ecey\u5411\u4e0a\u6807\u8bb0\u5230\u6839\u8282\u70b9\uff0c\u5f53\u7b2c\u4e00\u6b21\u9047\u5230\u5df2\u6807\u8bb0\u7684\u8282\u70b9\u662f\uff0c\u5c31\u627e\u5230\u5566\uff01\uff01\uff01\n\n# \u4e8c\uff1a\u6811\u4e0a\u500d\u589e\u6cd5\uff1a\n\n\u6b64\u9898\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\uff08~~\u6211\u5c31\u7528\u7684\u8fd9\u79cd~~\uff09\n\n\u8bbed[x]\u4e3ax\u7684\u6df1\u5ea6\uff1a\n\n\u601d\u8def\uff1a\n\n1.\u5982\u679c\u8fd9\u4e24\u70b9\u6df1\u5ea6\u4e0d\u76f8\u540c\uff0c\u5c31\u8ba9\u6df1\u5ea6\u5927\u7684\u8df3\u5230\u6df1\u5ea6\u76f8\u540c\u7684\u5730\u65b9\uff08\u4e0d\u59a8\u8bbed[x]>d[y]\uff09\n\n2.\u4ecex\u4e00\u76f4\u5411\u4e0a\u8df32^(logn).....$2^1$,$2^0$\u6b65\uff0c\u8fd8\u6709\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0bx=f[x][\u6b65\u6570],y=f[y][\u6b65\u6570]\uff0c\u53ea\u8981\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e0d\u76f8\u7b49\u5c31\u66f4\u65b0\n\n3.\u6b64\u65f6x,y\u5dee\u4e00\u6b65\u5c31\u76f8\u4f1a\uff08~~\u8ba9\u60a8\u5931\u671b\u4e86~~\uff09\uff0c\u4ed6\u4eec\u7684\u7236\u8282\u70b9f[x][0]\u5c31\u662fLCA\uff08x,y\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230$O((n+m)logn)$\n\n\u4ee3\u7801\uff08~~\u8bf7\u52ff\u4f5c\u5f0a\u54e6\uff01~~\uff09\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define Maxn 1000010 \n#define next Next\nusing namespace std;\nll read()\n{\n\tll r=0,f=1;char c=getchar();\n\twhile((c<'0'||c>'9')&&(c!='-')) c=getchar();\n\tif(c=='-') f=-1,c=getchar();\n\twhile(c>='0'&&c<='9') r=r*10+c-'0',c=getchar();\n\treturn r*f;\n}\nqueue<ll> q;\nll s,t,n,m,tot,head[Maxn],next[Maxn],ver[Maxn],d[Maxn],f[Maxn][25];\nvoid add(ll x,ll y)\n{\n\tver[++tot]=y;\n\tnext[tot]=head[x];\n\thead[x]=tot;\n}\nvoid bfs(ll s)\n{\n\tq.push(s);\n\td[s]=1;\n\twhile(q.size())\n\t{\n\t\tll x=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[x];i;i=next[i])\n\t\t{\n\t\t\tll y=ver[i];\n\t\t\tif(d[y]) continue;\n\t\t\td[y]=d[x]+1;\n\t\t\tf[y][0]=x;\n\t\t\tfor(int j=1;j<=t;j++)\n\t\t\t\tf[y][j]=f[f[y][j-1]][j-1];\n\t\t\tq.push(y);\n\t\t } \n\t}\n}\nll lca(ll x,ll y)\n{\n\tif(d[x]>d[y]) swap(x,y);\n\tfor(int i=t;i>=0;i--)\n\t if(d[f[y][i]]>=d[x]) y=f[y][i];\n\tif(x==y) return x;\n\tfor(int i=t;i>=0;i--)\n\t if(f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nint main()\n{\n\tn=read(),m=read(),s=read();\n\tt=(ll)(log(n)/log(2))+1;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tbfs(s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tprintf(\"%lld\\n\",lca(x,y)); \n\t}\n\treturn 0;\n}\n```\n\n# Tarjan\n\n~~\u5410\u69fd\u4e00\u53e5\uff1aTarjan\u600e\u4e48\u5230\u5904\u90fd\u6709\u5b83\u7684\u7b97\u6cd5~~\n\n\u601d\u8def\uff08~~\u4e0d\u8d34\u4ee3\u7801\u4e86~~\uff09\uff1a\n\n\u79bb\u7ebf\u7b97\u6cd5\uff1a\u6bcf\u6b21\u8be2\u95ee\u5b8c\u540e\u624d\u56de\u7b54\u3002\n\n\u7528\u5e76\u67e5\u96c6\u4f18\u5316\u7684LCA\n\n\u8282\u70b9\u5206\u4e3a\u4e09\u7c7b\uff1a\n\n1.\u9012\u5f52\u8fc7\u4e14\u56de\u6eaf\u4e86\u7684\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a2\n\n2.\u9012\u5f52\u5374\u672a\u56de\u6eaf\u7684\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a1\n\n3.\u5565\u90fd\u6ca1\u5e72\u7684\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a0\n\n\u53ea\u8981\u4e00\u4e2a\u8282\u70b9\u88ab\u6807\u8bb0\u4e3a2\uff0c\u5c31\u5408\u5e76\u5230\u5b83\u7236\u4eb2\u7684\u96c6\u5408\u4e2d(\u7236\u8282\u70b9\u662f1\u54e6\uff0c\u5e76\u4e14\u4e5f\u662f\u5b64\u8eab\u4e00\u5143\u7d20\uff09\n\n\u6bcf\u6b21\u8be2\u95eex\uff0c\u53ea\u8981\u6709\u8282\u70b9\u88ab\u6807\u8bb0\u4e3a2\uff0c\u90a3\u4e48y\u5c31\u662f\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff08\u5c31\u662fanswer\uff09\n\n\u53ef\u4ee5\u81ea\u884c\u5199\u5199\u54e6\uff01\uff01\uff01\uff08\u7801\u91cf\u7a0d\u5927\uff09\n\n\u5728\u8fd9\u91cc\u8865\u4e0atarjan\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define Maxn 1000005\n#define next Next\nusing namespace std;\nll read()\n{\n\tll r=0,f=1;char c=getchar();\n\twhile((c<'0'||c>'9')&&(c!='-')) c=getchar();\n\tif(c=='-') f=-1,c=getchar();\n\twhile(c>='0'&&c<='9') r=r*10+c-'0',c=getchar();\n\treturn r*f;\n}\nll tot,ans[Maxn],n,m,s,ver[Maxn],next[Maxn],head[Maxn],fa[Maxn],v[Maxn];\nvector<ll> query[Maxn],query_id[Maxn];\nvoid add(ll x,ll y)\n{\n\tver[++tot]=y;\n\tnext[tot]=head[x];\n\thead[x]=tot;\n}\nvoid add_id(ll x,ll y,ll id)\n{\n\tquery[x].push_back(y);\n\tquery[y].push_back(x);\n\tquery_id[x].push_back(id);\n\tquery_id[y].push_back(id);\n}\nll find(ll x)\n{\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid tarjan(ll x)\n{\n\tv[x]=1;\n\tfor(int i=head[x];i;i=next[i])\n\t{\n\t\tll y=ver[i];\n\t\tif(v[y]) continue;\n\t\ttarjan(y);\n\t\tfa[y]=x;\n\t}\n\tfor(int i=0;i<query[x].size();i++)\n\t{\n\t\tll y=query[x][i],id=query_id[x][i];\n\t\tif(v[y]==2)\n\t\t{\n\t\t\tll lca=find(y);\n\t\t\tans[id]=lca;\n\t\t}\n\t}\n\tv[x]=2;\n}\nint main()\n{\n\tn=read(),m=read(),s=read();\n\tfor(int i=1;i<=n;i++) fa[i]=i;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tif(x==y) ans[i]=x;\n\t\telse\n\t\t{\n\t\t\tadd_id(x,y,i);\n\t\t\tans[i]=1<<30;\n\t\t}\n\t}\n\ttarjan(s);\n\tfor(int i=1;i<=m;i++) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n+m)$\n\n\u901f\u5ea6\u5947\u5feb\n\n\u8c22\u8c22\u5927\u5bb6\u7684\u89c2\u770b\uff01",
        "postTime": 1573739681,
        "uid": 138649,
        "name": "\u7237\uff0c\u65e0\u9650\u9738\u6c14",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u521a\u5b66\u4e86st\u5199\u6cd5\uff0c\u5199\u4e00\u7bc7\u9898\u89e3\u7ec3\u7ec3\u624b\n\n\u9996\u5148\uff0c\u6211\u4eec\u6309\u7167dfs\u7684\u8fc7\u7a0b\u5f97\u5230\u4e00\u4e2a\u6b27\u62c9\u5e8f\uff08\u8bbf\u95ee\u5230\u4e00\u4e2a\u6570\u5c31\u52a0\u5230\u5e8f\u5217\u672b\u5c3e **\uff08\u5305\u62ec\u56de\u6eaf\uff09** \uff09\n\n\u7ed3\u5408\u56fe\u7406\u89e3\u4e00\u4e0b\u6b27\u62c9\u5e8f![\u6b27\u62c9\u5e8f](https://cdn.luogu.com.cn/upload/image_hosting/gw8tppli.png)\n\n\u7136\u540e\u6211\u4eec\u89c2\u5bdf\u4e0a\u56fe\uff0c\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u5c31\u80fd\u53d1\u73b0lca\u662ffir[x],fir[y]\u4e2ddep\u6700\u5c0f\u7684\uff08fir\u4e3a\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff09\n\n![\u6811](https://cdn.luogu.com.cn/upload/image_hosting/plp40ylj.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2armq\u95ee\u9898\uff1a\n\n\u5728fir[x]~fir[y]\u4e2d\uff0cdep\u6700\u5c0f\u7684\u662f\u54ea\u4e2a\n\n\u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u7528st\u8868\u7ef4\u62a4\uff0c\u7136\u540e\u67e5\u8be2\u5c31\u53ef\u4ee5\u505a\u5230O(1)\u4e86\n\n\u611f\u6027\u7406\u89e3\uff0c\u4f60\u4e00\u4e2a\u6570\uff0c\u6700\u591a\u5728\u88ab\u8bbf\u95ee\u5230\u65f6tim++\uff0c\u56de\u6eaf\u65f6\uff0c\u7236\u4eb2tim++\uff0c\u6240\u4ee5st\u8868\u5f00\u4e24\u500d\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6+25;\nint n,m,s,st[N*2][20],dfn[N],fir[N],tim,dep[N],fa[N];\nstruct edge\n{\n\tint next,to;\n}p[2*N];\nint head[N],num;\nvoid ad(int x,int y)\n{\n\tp[++num]=edge{head[x],y};\n\thead[x]=num;\n}\nvoid dfs(int u)\n{\n\tdfn[++tim]=u; //\u6b27\u62c9\u5e8f\u4e2d\u7b2ci\u4e2a\u6570\u662f\u5565 \n\tif(!fir[u]) fir[u]=tim; //u\u5728\u6b27\u62c9\u5e8f\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \n\tst[tim][0]=u; //st\u8868 \n\tfor(int i=head[u];i;i=p[i].next)\n\t{\n\t\tint v=p[i].to;\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tdep[v]=dep[u]+1;\n\t\tdfs(v);\n\t\tdfn[++tim]=u;\n\t\tst[tim][0]=u;\n\t}\n}\nint lca(int x,int y)\n{\n\tint l=fir[x],r=fir[y];\n\tif(r<l) swap(l,r);\n\tint lg=(log2(r-l+1));\n//\tprintf(\"@%d %d %d\\n\",l,r,lg);\n//\tprintf(\"@%d %d %d %d %d\\n\",l,r,lg,r-l+1,log2(r-l+1));\n\treturn dep[st[l][lg]]>dep[st[r-(1<<lg)+1][lg]]?st[r-(1<<lg)+1][lg]:st[l][lg];\n}\nint main() \n{\n\tcin>>n>>m>>s;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tad(x,y);\n\t\tad(y,x);\n\t}\n\tdfs(s);\n//\tfor(int i=1;i<=tim;i++) st[i][0]=dfn[i];\n//\tfor(int i=1;i<=n;i++) printf(\"#%d %d %d\\n\",i,dfn[i],fir[i]);\n\tfor(int j=1;j<=20;j++)\n\t\tfor(int i=1;i+(1<<j)-1<=tim;i++)\n\t\t\tif(dep[st[i][j-1]]>dep[st[i+(1<<(j-1))][j-1]]) st[i][j]=st[i+(1<<(j-1))][j-1];\n\t\t\telse st[i][j]=st[i][j-1];\n//\tfor(int i=1;i<=n;i++) for(int j=0;j<=2;j++) printf(\"%d %d %d\\n\",i,j,st[i][j]);\n\twhile(m--)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tprintf(\"%d\\n\",lca(x,y));\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1573048927,
        "uid": 11392,
        "name": "shenbear",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u4ee5\u524d\u4e00\u76f4\u4e0d\u4f1a\u6c42lca\n\n\u5ffd\u7136\u53d1\u73b0RMQ\u6c42lca\u771f\u795e\u5947\n\n\u4f3c\u4e4e\u5927\u5bb6\u90fd\u662f\u6811\u4e0a\u500d\u589e\n\n\u6240\u4ee5\u5c31\u5199\u4e86\u4e00\u4e2adfs\u5e8f\u52a0RMQ\u7684\n\n\u7b80\u76f4\u4e0d\u7528\u52a8\u8111\u5b50\u554a\uff0c\u597d\u723d\u597d\u723d\n\n\u5c31\u662f\u8dd1\u7684\u7279\u522b\u6162\uff0c\u666e\u901a\u8bfb\u5165\u4f18\u5316\u662f\u8fc7\u4e0d\u4e86\u7684\uff0c\u5fc5\u987b\u8981\u7528\u8fd9\u4e2a\u636e\u8bf4\u662f\u6700\u5feb\u7684\u8bfb\u5165\u4f18\u5316\u3002\n\n\u5bf9\u4e8e\u4e24\u4e2a\u70b9\u7684lca\u5c31\u662fdfs\u5e8f\u4e2d\u4e24\u4e2a\u70b9\u7b2c\u4e00\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u533a\u95f4\u4e2d\u7684\u90a3\u4e2a\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\uff0c\u7136\u540e\u968f\u4fbf\u5199\u4e2aRMQ\u5c31\u8fc7\u4e86\n\n\u5bf9\u4e8e\u5361\u5e38\u8868\u793a\u5f3a\u70c8\u7684\u4e0d\u6ee1\n\n\n    \n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define N 500010\nint read()\n{\n    char ch='*';\n    while(!isdigit(ch=getchar()));\n    int num=ch-'0';\n    while(isdigit(ch=getchar()))num=num*10+ch-'0';\n    return num;\n}\nstruct edge {\n    int to,next;\n}e[N<<1];\nint h[N],n,m,root,cnt;\nint vis[N];\nint f[N*2][25];\nint q[N<<1],tot;\nint dep[N];\nint pos[N];\nvoid add(int from,int to)\n{\n    e[++cnt].to=to;e[cnt].next=h[from];h[from]=cnt;\n    e[++cnt].to=from;e[cnt].next=h[to];h[to]=cnt;\n}\nvoid build (int x)\n{\n    if(vis[x]) return ;\n    vis[x]=1;\n    q[tot++]=x;\n    pos[x]=tot-1;\n    for(int i=h[x];i;i=e[i].next)\n    {\n        if(!vis[e[i].to ]) {\n            dep[e[i].to]=dep[x]+1;\n            build(e[i].to);\n            q[tot++]=x;\n        }\n    }\n    return;\n}\nvoid RMQ()\n{\n    for(int i=0;i<tot;i++) f[i][0]=q[i];\n    for(int j=1;(1<<j)<=tot;j++)\n    {\n        for(int i=0;i+(1<<j)-1<tot;i++)\n        {\n            if(dep[f[i][j-1]]<dep[f[i+(1<<(j-1))][j-1]]) f[i][j]=f[i][j-1];\n            else f[i][j]=f[i+(1<<(j-1))][j-1];\n        }\n    }\n}\nint main()\n{\n    n=read();m=read();root=read();\n    int u,v;\n    for(int i=1;i<=n-1;i++)\n    {\n        u=read();v=read();\n        add(u,v);\n    }\n    build(root);\n    RMQ();\n    for(int i=1;i<=m;i++)\n    {\n        u=read();v=read();\n        if(pos[v]<pos[u]) swap(u,v);\n        int k=0;\n        while((1<<(k+1))<=pos[v]-pos[u]+1) k++;\n        if(dep[f[pos[u]][k]]<dep[f[pos[v]-(1<<k)+1][k]])\n        printf(\"%d\\n\",f[pos[u]][k]);\n        else printf(\"%d\\n\",f[pos[v]-(1<<k)+1][k]);\n    }\n}\n```",
        "postTime": 1503641481,
        "uid": 36102,
        "name": "doge233",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\u7684\u516c\u5171\u7684\u4e14\u79bb\u4ed6\u4eec\u6700\u8fd1\u7684\u7956\u5148(\u8fd9\u662f\u53e5\u5e9f\u8bdd)\n\n\u6c42LCA\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\uff0c~~\u7136\u800c\u7a9d\u53ea\u4f1a\u4e00\u79cd~~\n\n\u6765\uff0c\u561a\u5575\u4e00\u4e0b\u3002\n\n### \u4e00\u3001\u6734\u7d20\u7b97\u6cd5\n ~~\u66b4\u529b\u51fa\u5947\u8ff9!!~~ \n\n+ \u4ece\u4e00\u4e2a\u70b9\u5f80\u4e0a\u8d70\uff0c\u4e00\u8fb9\u8d70\u4e00\u8fb9\u6807\u8bb0\uff0c\u76f4\u5230\u8d70\u5230\u6839\n+ \u4ece\u53e6\u4e00\u4e2a\u70b9\u5f80\u4e0a\u8d70\uff0c\u76f4\u5230\u8d70\u5230\u4e00\u4e2a\u6709\u6807\u8bb0\u7684\u70b9\uff0c\u6b64\u65f6\u8fd9\u4e2a\u70b9\u5c31\u662f\u4ed6\u4eec\u7684LCA\n\n\u4f46\u662f\uff0c\u8fd9\u73a9\u610f\u513f\u53ea\u80fd\u9a97\u70b9\u5c0f\u6570\u636e\u7684\u5206\uff0c\u770b\u770b\u90a3\u6570\u636e\u89c4\u6a21\u4e0a\u90a3~~\u53cb\u597d\u7684~~5\u4e2a\u201c0\u201d\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ea\u80fd\u4f5c\u7f62\u3002\n\n**\u54ce\uff0c\u7b49\u4e00\u4e0b\uff0c\u662f\u4e0d\u662f\u53ef\u4ee5\u4f18\u5316\uff1f**\n\n\u6734\u7d20\u7b97\u6cd5\u7684\u5f31\u52bf\u5c31\u5728\u4e8e\uff0c\u201c\u8d70\u201d\u7684\u65f6\u95f4\u592a\u957f\u4e86\u3002\u65e2\u7136\u201c\u8d70\u201d\u7684\u65f6\u95f4\u957f\uff0c\u90a3\u6211\u4eec\u9614\u4e0d\u9614\u4ee5\u8ba9\u4ed6\u201c\u8df3\u201d\u5462\uff1f\n\n\u4e8e\u662f\uff0c\u4e00\u79cd\u5168\u65b0\u7684\u65b9\u6cd5\u6a2a\u7a7a\u51fa\u4e16\u2014\u2014\n\n## \u4e8c\u3001\u500d\u589e\u6cd5\n\u60f3\u8ba9\u4ed6\u8df3\uff0c\u90a3\u56fa\u7136\u8981\u6709\u4e00\u5b9a\u7684\u65b9\u6cd5\uff0c\u4e0d\u80fd\u778e\u8df3\u4e71\u8df3\u3002\u500d\u589e\u6cd5\u4fbf\u662f\u8fd9\u6837\uff0c\u4ed6\u89c4\u5b9a\u6bcf\u6b21\u53ea\u80fd\u8df3$2^i$\u5c42\uff0c\u8fd9\u5c31\u662f\u201c\u500d\u589e\u201d\uff0c\u5373\u63092\u7684\u500d\u6570\u589e\u5927\u3002\n\n~~\u8010\u514b\u65af\u7279~~Next\uff0c\u6211\u4eec\u8981\u4ece\u5927\u5f80\u5c0f\u53bb\u8bd5\u8df3\u3002\u7c7b\u6bd4\u7528\u5929\u5e73\uff08\u6709\u781d\u7801\u7684\u90a3\u79cd\uff09\u79f0\u7269\u4f53\u8d28\u91cf\uff0c\u5148\u4ece\u5927\u7684\u5f00\u59cb\u653e\uff0c\u8d85\u8fc7\u4e86\u518d\u53d6\u51fa\uff0c\u653e\u5c0f\u7684\u3002\u8df3\u8fd9\u4e2a\u4e5f\u662f\u8fd9\u6837\u3002\n\n\u6211\u4eec\u8fd8\u9700\u8981\u63d0\u524d\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u7b2c$2^i$\u4e2a\u7956\u5148\uff0c\u8fd9\u6837\u5728\u8df3\u7684\u65f6\u5019\u53ef\u4ee5\u65b9\u4fbf\u8bb8\u591a\u3002\u7528dfs\u5b9e\u73b0\uff08\u5176\u5b9e\u662f\u62ab\u7740dfs\u5916\u8863\u7684\u9012\u63a8\uff09\uff0c\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4f[x][i]\u8868\u793ax\u7684\u7b2c$2^i$\u4e2a\u7956\u5148\u3002\u540c\u65f6\u6211\u4eec\u9700\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6d[x]\u3002\n\n\u6c42LCA\u7684\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b:\n- \u5148\u4e0d\u59a8\u8bbe$d[x] \\leq d[y]$\n- \u5c06y\u201c\u8df3\u201d\u5230\u4e0ex\u540c\u4e00\u6df1\u5ea6\n- \u6b64\u65f6\u82e5x==y \u5219LCA\u5c31\u662fx\n- \u5426\u5219x\u548cy~~\u624b\u62c9\u7740\u624b~~\u4e00\u8d77\u8df3\n\n**\u6ce8\u610f**\uff1ax\u548cy\u4e0d\u80fd\u4e00\u76f4\u8df3\u5230\u76f8\u540c\u8282\u70b9\uff0c\u56e0\u4e3a\u53ef\u80fd\u4e00\u8df3\u5c31\u8df3\u591a\u4e86\uff0c\u6b64\u65f6\u867d\u7136\u662f\u516c\u5171\u7956\u5148\uff0c\u4f46\u4e0d\u662f\u6700\u8fd1\u7684\u4e86\uff0c\u6240\u4ee5\u53ea\u80fd\u8df3\u5230LCA\u7684\u4e0b\u9762\u4e00\u5c42\uff0c\u7136\u540e\u8fd4\u56dex\u548cy\u7684\u7236\u8282\u70b9\uff08\u5176\u5b9e\u662f\u540c\u4e00\u4e2a\u7236\u4eb2\uff09\u5373\u53ef\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 500005;\n//\u5feb\u8bfb\u5feb\u8f93\ninline int rd()\n{\n\tint x=0; bool s=0; char ch=0;\n\twhile(!isdigit(ch)) {s|=(ch=='-'); ch=getchar();}\n\twhile(isdigit(ch)) {x=(x<<1)+(x<<3)+(ch-48); ch=getchar();}\n\treturn s?-x:x;\n}\ninline void wrote(int x)\n{\n\tif(x<0) {putchar('-'); wrote(-x); return;}\n\tif(x<10) {putchar(x+48); return;}\n\twrote(x/10);\n\tputchar(x%10+48);\n}\ninline void writeln(int x)\n{\n\twrote(x);\n\tputs(\"\");\n}\n\nvector <int> g[2*N];                 //STL\u5927\u6cd5\u597d\nint d[N],f[N][20],lg[N],n,m,s;\nvoid dfs(int x,int dad)\n{\n\tif(d[x]) return;\n \td[x]=d[dad]+1;\n\tf[x][0]=dad;\n\tfor(int i=1; (1<<i)<=d[x]; ++i)\n  \t\tf[x][i]=f[f[x][i-1]][i-1];//\u9012\u63a8\u8ba1\u7b97\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u610f\u4e49\u624b\u63a8\u4e00\u4e0b\n\tfor(int i=0; i<g[x].size(); ++i)\n\t\tif(g[x][i]!=dad) dfs(g[x][i],x);//\u626b\u63cf\u6240\u6709\u513f\u5b50\n}\nint lCa(int x,int y)\n{\n\tif(d[x]>d[y]) swap(x,y);\n\twhile(d[y]>d[x]) y=f[y][lg[d[y]-d[x]]-1];\n\tif(x==y) return x;\n\tfor(int i=lg[n]; i>=0; --i)\n\t\tif(f[y][i]!=f[x][i])\n\t\t{\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\treturn f[x][0];\n}\nint main()\n{\n\tn=rd(),m=rd(),s=rd();\n\tfor(int i=1; i<=n; ++i)//\u5e38\u6570\u4f18\u5316\uff0c\u8ddf\u67d0\u5de8\u64d8\u5b66\u7684\uff0c\u63d0\u524d\u7b97\u51falog_2(i)+1\u7684\u503c\n  \t\tlg[i]=lg[i-1]+(1<<lg[i-1]==i)\n\t\n\tfor(int i=1; i<n; ++i)\n\t{\n\t\tint x=rd(),y=rd();\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t}\n\tdfs(s,0);\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tint x=rd(),y=rd();\n\t\twriteln(lCa(x,y));\n\t}\n\treturn 0;\n}\n```\n\u6b22\u8fce\u5404\u4f4d\u5de8\u64d8\u63d0\u51fa\u5efa\u8bae\u3002\u3002\u3002",
        "postTime": 1565076515,
        "uid": 93689,
        "name": "retired_LeoStrange",
        "ccfLevel": 0,
        "title": "\u56fe\u8bba\u57fa\u7840\u2014\u2014\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA)\u4e4b\u500d\u589e\u6cd5"
    },
    {
        "content": "\u8fd9\u91cc\u8bb2\u4e00\u79cd\u786c\u6838\u505a\u6cd5\u3002\n\n\u9996\u5148$\\mathrm{dfs}$\u6574\u68f5\u6811\uff0c\u6c42\u51fa\u8fd9\u68f5\u6811\u7684\u6b27\u62c9\u5e8f\uff0c\u7136\u540e$\\mathrm{LCA}$\u95ee\u9898\u5c31\u53d8\u6210\u4e86$\\pm 1\\mathrm{RMQ}$\u95ee\u9898\u3002\n\n\u8003\u8651$\\mathrm{O}(n)$\u89e3\u51b3$\\pm 1\\mathrm{RMQ}$\u95ee\u9898\u3002\n\n\u5c06\u539f\u5e8f\u5217\u5206\u5757\uff0c\u6bcf\u4e00\u5757\u957f\u5ea6\u4e3a$\\dfrac {\\log_2 n}2$\uff0c\u5757\u5916\u7528$\\mathrm{ST}$\u8868\u9884\u5904\u7406\uff0c\u590d\u6742\u5ea6$\\mathrm{O}(n)$\uff0c\u8003\u8651\u5757\u5185\u5982\u4f55$\\mathrm{O}(1)$\u56de\u7b54\u3002\n\n\u56e0\u4e3a\u76f8\u90bb\u4e24\u9879\u4e4b\u5dee\u6700\u591a\u4e3a$1$\uff0c\u6240\u4ee5\u5757\u5185\u672c\u8d28\u4e0d\u540c\u7684\u72b6\u6001\u53ea\u6709$2 ^ {\\frac {\\log n} 2} = \\sqrt n$\u79cd\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u8bbe$f[S][l][r]$\u8868\u793a\u72b6\u6001\u4e3a$S$\u65f6\uff0c\u533a\u95f4$[l, r]$\u7684\u6700\u5c0f\u503c\u3002\n\n\u4e8e\u662f\u5757\u5185\u5c31\u80fd$\\mathrm{O}(1)$\u89e3\u51b3\u4e86\uff0c\u8fd9\u4e00\u90e8\u5206\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u4e3a$\\mathrm{O}(\\sqrt n \\log^2n)$\u3002\n\n\u56e0\u4e3a\u4ee5\u4e0a\u64cd\u4f5c\u590d\u6742\u5ea6\u5747\u6ca1\u6709\u8d85\u8fc7$\\mathrm{O}(n)$\uff0c\u6240\u4ee5\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u4e3a$\\mathrm{O}(n)$\uff0c\u603b\u590d\u6742\u5ea6\u4e3a$\\mathrm{O}(n) - \\mathrm{O}(1)$\u3002\n\n\u4ee3\u7801\u89c1\u6211\u7684[$\\texttt{blog}$](https://www.cnblogs.com/cj-xxz/p/11142232.html)",
        "postTime": 1562384984,
        "uid": 46800,
        "name": "xgzc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u770b\u89c1\u4e0b\u9762\u5168\u662f\u6570\u7ec4\u52a0\u8fb9\u5fc3\u91cc\u8bf4\u4e0d\u51fa\u7684\u96be\u53d7.jpg\n\n\u6b64\u9898\u500d\u589e\u53ef\u4ee5\u641e\u5b9a~~\uff08\u6bd5\u7adf\u6211\u53ea\u4f1a\u500d\u589e\uff09~~\uff0c\u987a\u4fbf%%%\u5927\u529bDalao\n\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\u3002\uff08\u8ba9\u6211\u6765\u7ed9\u4f60\u4eec\u6f14\u793a\u4e00\u53d1\u6807\u51c6\u6307\u9488\u5927\u6cd5\uff09\n\n```cpp\n#define lop(c,m) for(int c=1;c<=(m);++c)\n#define loop(c,m) for(int c=0;c<(m);++c)\n#define down(c,m,s) for(int c=m;c>=(s);--c)\n``` \n\u6570\u636e\u5b58\u50a8\n```cpp\nint n,m,s,x,y;\nstruct edge{\n\tint target;\n\tedge* next;\n\tedge(const int& t,edge* const n):target(t),next(n){\n\t}//\u6784\u9020\u51fd\u6570\n}*head[500005];//\u90bb\u63a5\u8868\nint depth[500005],parent[500005][20];//depth\u5373\u6df1\u5ea6\uff0cparent[i][j]\u5b58\u50a8\u4ecei\u70b9\u76842^j\u7ea7\u7956\u5148\n```\n\u6837\u4f8b\u6570\u636e\u5904\u7406\u7684\u6700\u7ec8\u7ed3\u679c\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/19678.png)\n\n\u5904\u7406\u8f93\u5165\uff0c\u6ca1\u4ec0\u4e48\u5199\u7684\uff0c\u8bb0\u5f97\u52a0\u53cc\u5411\u8fb9\n\n\u771f\u6b63\u7684\u52a0\u8fb9\n```cpp\ninline void addedge(const int& s,const int& t){\n\thead[s]=new edge(t,head[s]);//\u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\n}\n```\n\u9884\u5904\u7406\u6a21\u5757\n```\ninline void predo(){\n\tqueue<int> que;\n\tque.push(s);\n\tparent[s][0]=-1;//\u9632\u6b62\u904d\u5386\u56de\u6839\n\twhile(!que.empty()){\n\t\tint now=que.front();\n\t\tque.pop();\n\t\tfor(edge* ptr=head[now];ptr;ptr=ptr->next) if(!parent[ptr->target][0]){//DFS\u5904\u7406\u8fc7\u7684\u4e0d\u5fc5\u518d\u8bbf\u95ee\n\t\t\tdepth[ptr->target]=depth[now]+1;\n\t\t\tparent[ptr->target][0]=now;\n\t\t\tfor(int i=1;(1<<i)<=depth[ptr->target];++i) parent[ptr->target][i]=parent[parent[ptr->target][i-1]][i-1];//\u500d\u589e\u5904\u7406parent[][] \n\t\t\tque.push(ptr->target);\n\t\t}\n\t}\n}\n```\n\u500d\u589eLCA\uff08\u6838\u5fc3\uff09\n```\n\ninline int lca(int a,int b){\n\tif(depth[a]>depth[b]) swap(a,b);//\u4fdd\u8bc1b\u7684\u6df1\u5ea6\u4e0d\u5927\u4e8ea\n\tdown(i,19,0) if(depth[b]>=depth[a]+(1<<i)) b=parent[b][i];//b\u5728a\u4e0b\u5219\u63d0\u5347\uff0c\u500d\u589e\u590d\u6742\u5ea6log(d[b]-d[a])\n\tif(a==b) return a;//\u73b0\u5728a,b\u5904\u4e8e\u540c\u4e00\u6df1\u5ea6\u3002\u4ee5\u4e0b\u4ee3\u7801\u53ea\u80fd\u5904\u7406\u7956\u5148\uff0c\u6545\u6b64\u5904\u7279\u5224\u8fd4\u56deLCA=a\n\tdown(i,19,0) if(parent[a][i]!=parent[b][i]) a=parent[a][i],b=parent[b][i];//\u603b\u662f\u5bfb\u627e\u6700\u8fd1\u7684\u975e\u516c\u5171\u7956\u5148\uff08\u4e8c\u8fdb\u5236\u5206\u89e3\uff09\uff0c\u500d\u589e\u590d\u6742\u5ea6log(d[LCA]-d[a])\n\treturn parent[a][0];//a,b\u5df2\u7ecf\u5728LCA\u4ee5\u4e0b1\u6df1\u5ea6\uff0c\u8fd4\u56deLCA\n}\n```\nAC\u3002\n\n\u6307\u9488\u52a0\u8fb9\u53ef\u4ee5\u7528\u5185\u5b58\u6c60\u4f18\u5316\uff0c\u8fd9\u91cc\u4e0d\u5199\u4e86\u3002",
        "postTime": 1526811652,
        "uid": 49234,
        "name": "Zarinopl",
        "ccfLevel": 7,
        "title": "P3379  \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09"
    },
    {
        "content": "#2\u79cd\u65b9\u6cd5:(ST\u8868)(\u500d\u589e)\n\n##\u8868\u793a\u4e00\u8138\u61f5\u903c\u7684\u6211!\n\n\u5176\u5b9e\u5927\u5bb6\u4e00\u76f4\u8bf4\u8fd9\u4e00\u9898\u4f1a\u5361\u500d\u589e,\u5176\u5b9e\u90fd\u662f\u5e38\u6570\u4e0d\u591f\u4f18\u8d8a!\n\n\u73b0\u5728\u4ecb\u7ecd\u4e00\u53d1**\u6b27\u62c9\u5e8f+ST\u8868!**\n\n ![](https://cdn.luogu.com.cn/upload/pic/10232.png) \n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\u6709\u8fd9\u6837:\n\n\n```cpp\n1   2   3   2   4   2   5   2   1   6   7   6   8   6   1\n```\n\u6240\u8c13\u7684\u6b27\u62c9\u5e8f\u5c31\u662f\u4f60\u6bcf\u4e00\u6b21\u641c\u7d22\u5230\u4e86\u4e00\u4e2a\u70b9\u6216\u8005\u662f\u56de\u6eaf\u4f1a\u6765,\u90fd\u8fdb\u884c\u8bb0\u5f55:\n\n\u6240\u4ee5\u8fd9\u4e2a\u56fe\u7684\u6b27\u62c9\u5e8f\u662f\u8fd9\u6837\u7684:\n\n1   2   3   2   4   2   5   2   1   6   7   6   8   6   1\n\n\u4e8e\u662f\u5982\u679c\u6211\u4eec\u56de\u6c42 2 \u548c 6 \u7684\u7956\u5148\u7684\u8bdd,\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u4e2a2 \u7684\u4f4d\u7f6e,\u8fd9\u65f6\u8868\u793a\u521a\u597d\u63a2\u5230\u4e86 2 \u8282\u70b9,\u540c\u7406\u4e8e 6 !\u4e8e\u662f\u5c31\u53d8\u6210\u4e86:\n\n1   **2**   3   2   4   2   5   2   1   **6**   7   6   8   6   1\n\n\u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u4e00\u6bb5\u533a\u95f4\u91cc\u9762\u627e\u5230\u6700\u5c0f\u503c,\u56e0\u4e3a\u8fd9\u4e00\u6bb5\u2217\u2217\u8868\u793a2\u2212\u22126\u7684\u8def\u5f84,\u2217\u2217\u90a3\u4e48\u80af\u5b9a\u6709LCA \u7684\u5b58\u5728,\u5e76\u4e14\u5b83\u53ea\u4f1a\u51fa\u73b0 \u4e00\u6b21! ,\u5c31\u662f\u8fd9\u6bb5\u533a\u95f4\u91cc\u9762\u7684\u6700\u5c0f\u503c!\u4e0d\u96be\u53d1\u73b0\u2014\u5c31\u662f 1\n\n\u800c\u627e\u6700\u5c0f\u503c\u7684\u5de5\u4f5c,\u6211\u4eec\u8981\u4ea4\u7ed9ST \u8868\u6765\u5de5\u4f5c!\n\n\u90a3\u4e48\u4e00\u5f00\u59cb,\u6211\u4e5f\u662fTLE 70 \u4f46\u662f\u53ea\u8981\u4f60\u6709 **\u4fe1\u4ef0**.\u90a3\u4e48\u51cf\u4e00\u6ce2\u5e38\u6570, \u518d \u5feb\u8bfb\u4e00\u6ce2\u5c31\u53ef\u4ee5\u4e86!\n\n\u53ef\u4ee5\u4ecb\u7ecd\u4e00\u7bc7\u8d85\u597d\u7684\u6587\u7ae0:\n\n\n```cpp\n#pragma GCC optimize(3)\n#include<cstring>\n#include<stdio.h>\n#include<algorithm>\nusing namespace std;\nconst int N = 500500;\nvector<int> G[N];\nint n,m,s,x,y,l,cnt;\nint oula[N*2],low[N],start[N],len[N*2];\nstruct node{int deep,order;}Rmax[N*2][30];\nvoid DFS(int now,int father,int deep)\n{\n    oula[++cnt]=now;\n    if(low[now]==-1) low[now]=deep;\n    if(start[now]==-1) start[now]=cnt;\n    for(int i=0;i<(int)G[now].size();i++)\n      if(G[now][i]!=father)\n    {\n        DFS(G[now][i],now,deep+1);\n        oula[++cnt]=now;\n    }\n}\ninline void RMQ()\n{ \n    for(int i=1;i<=cnt;i++) Rmax[i][0].order=oula[i],Rmax[i][0].deep=low[oula[i]];\n    for(int j=1;(1<<j)<=cnt;j++)\n        for (int i = 1; i+(1<<j)-1<=cnt;i++)\n        {\n            if(Rmax[i][j-1].deep<Rmax[i+(1<<(j-1))][j-1].deep)\n                Rmax[i][j].deep=Rmax[i][j-1].deep,Rmax[i][j].order=Rmax[i][j-1].order;\n            else\n                Rmax[i][j].deep=Rmax[i+(1<<(j-1))][j-1].deep,Rmax[i][j].order=Rmax[i+(1<<(j-1))][j-1].order;\n        }\n    return ;\n}\ninline int solve(int l,int r)\n{\n     if(l>r) swap(l,r);\n     int le=len[r-l+1],mid=r-(1<<le)+1;\n     if(Rmax[l][le].deep<Rmax[mid][le].deep) return Rmax[l][le].order;\n     else return Rmax[mid][le].order;\n}\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    bool flag=0;\n    while(c<'0'||c>'9'){if(c=='-')flag=1;    c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n    return flag?-x:x;\n}\nint main()\n{\n    for(int i=1;i<2*N;++i) len[i]=(1<<(l+1))==i?++l:l;\n    n=read();m=read();s=read();\n    memset(low,-1,sizeof(low));\n    memset(start,-1,sizeof(start));\n    for(int i=1;i<n;++i)\n    {\n      x=read();y=read();\n      G[x].push_back(y);\n      G[y].push_back(x);\n    }\n    DFS(s,-1,1);\n    RMQ();\n    for(int i=1;i<=m;++i)\n    {\n        x=read();y=read();\n        printf(\"%d\\n\",solve(start[x],start[y]));\n    }\n    return 0;\n}\n```\nhttp://blog.csdn.net/qq\\_39809664/article/details/78359007\n\n##\u500d\u589e\n\n\u5176\u5b9e\u5c31\u50cf\u662f \u4e8c\u5206\u641c\u7d22\u4e00\u6837\u7684\u601d\u60f3!\n\n\u6211\u4eec\u5904\u7406dp[i][j] \u8868\u793a i \u53f7\u8282\u70b9\u5411\u4e0a\u8df3 $2_{}^{j}$ \u7684\u8282\u70b9,\u4e5f\u5c31\u662f\u7956\u5148\u8282\u70b9\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u7684LCA \u6765\u8bf4,\u6211\u4eec\u53ef\u4ee5\u5148\u5c06 2 \u4e2a\u8282\u70b9 \u8c03\u5230 \u540c\u4e00\u8ddd\u79bb\n\n\u5728\u4ecedp[i][20]~dp[i][0] \u4e00\u76f4\u4ece\u4e0a\u5f80\u4e0b\u8dd1,\u4e3a\u4ec0\u4e48\u4e0d\u662f\u5c0f\u5230\u5927\u5462?? \u56e0\u4e3a\n\n**\u6211\u4eec\u5148\u6765\u7f29\u5c0f\u8303\u56f4** \u800c\u4e0d\u662f\u5c0f\u5230\u5927,\u6211\u4eec\u662f\u786e\u5b9a\u4e00\u4e2a\u6700\u8fdc\u7684\u516c\u5171\u7956\u5148,\u518d\u6765\u627e\u6709\u6ca1\u6709\u66f4\u5c0f\u7684\u7956\u5148!!\n\n\n```cpp\n#include <stdio.h>\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cstdio>\n#define N  505000\n#define M  32\nstd::vector<int> G[N];\nint root,V,m,x,y,parent[N][M],depth[N];\nvoid DFS(int v,int father)\n{\n    parent[v][0]=father,depth[v]=depth[father]+1;\n    for(int i=0;i<(int)G[v].size();i++)\n        if(G[v][i]!=father)\n            DFS(G[v][i],v);\n}\ninline void init(int V)\n{\n    DFS(root,0);\n    for(int k=1; (1<<k) <=V ; k++)\n        for(int v=1;v<=V;v++)\n        {\n           parent[v][k]=parent[parent[v][k-1]][k-1];\n        }\n}\ninline int LCA(int u,int v)\n{\n    if(depth[u] > depth[v]) u^=v,v^=u,u^=v;\n    int del=depth[v]-depth[u];\n    for(int k=0;del;del>>=1,++k)\n        if(del&1)\n        {\n            v=parent[v][k];\n        }\n    if(u==v) return u;\n    // seperater\n    for(int k=19;k>=0;k--)\n        if(parent[u][k]!=parent[v][k])\n        // \u8868\u793a2\u4e2a\u70b9\u76842^k\u5747\u6ca1\u6709\u5728\u4e00\u68f5\u6811\u7684\u5206\u76f4\u63a5\u70b9\u4e0a! \u5982\u679c\u662f\"==\" \u5e94\u8be5\u5728root\u8282\u70b9\u7f29\u653e\u7684!\n    {\n        u=parent[u][k];   \n        v=parent[v][k];\n    }\n    return parent[u][0];\n}\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    bool flag=0;\n    while(c<'0'||c>'9'){if(c=='-')flag=1;    c=getchar();}\n    while(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+c-'0';c=getchar();}\n    return flag?-x:x;\n}\nint main()\n{\n    V=read();m=read();root=read();\n    //memset(parent,-1,sizeof(parent));\n    for(int i=1;i<V;i++)\n    {\n        x=read();y=read();\n        G[x].emplace_back(y);\n        G[y].emplace_back(x);\n    }\n    //for(int i=0;i<G[root].size();i++) std::cout<<G[root][i]<<\" \";std::cout<<std::endl;\n    init(V);//for(int i=1;i<=V;i++) std::cout<<parent[0][i]<<\" \";std::cout<<std::endl;\n    for(int i=1;i<=m;i++)\n    {\n        x=read();y=read();\n        printf(\"%d\\n\",LCA(x,y));\n    }\n    return 0;\n}\n```",
        "postTime": 1509691809,
        "uid": 50047,
        "name": "Bartholomew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "lca\u76ee\u524d\u6bd4\u8f83\u6d41\u884c\u7684\u7b97\u6cd5\u4e3b\u8981\u6709tarjian\uff0c\u500d\u589e\u548c\u6811\u94fe\u5256\u5206\n\n\u5173\u4e8e\u500d\u589e\u7b97\u6cd5\u697c\u4e0b\u5df2\u6709\u8be6\u7ec6\u9610\u8ff0\uff0c\u5728\u8fd9\u91cc\u6211\u5c31\u5148\u4ecb\u7ecd\u5269\u4e0b\u4e24\u79cd\n\ntarjian\u662f\u4e00\u79cd\u79bb\u7ebf\u7b97\u6cd5\uff0c\u9700\u8981\u63d0\u524d\u77e5\u9053\u6240\u6709\u8be2\u95ee\u5bf9\n\n\u7b97\u6cd5\u5982\u4e0b\n\n1.\u8bfb\u5165\u6240\u6709\u8be2\u95ee\u5bf9\uff08u,v\uff09\uff0c\u5e76\u5efa\u597d\u6811\uff08\u5efa\u8bae\u90bb\u63a5\u8868\uff09\n\n2.\u521d\u59cb\u5316\u6bcf\u4e2a\u8282\u70b9\u5404\u5c5e\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u90fd\u6307\u5411\u81ea\u5df1\n\n3.\u5bf9\u6574\u68f5\u6811\u8fdb\u884cdfs\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u904d\u5386\n\n\u6bcf\u5904\u7406\u5230\u4e00\u4e2a\u65b0\u8282\u70b9(u)\u65f6\u770b\u4ed6\u7684\u53e6\u4e00\u534a\uff08\u8be2\u95ee\u5bf9\u8c61v\uff09\u662f\u5426visit\u8fc7\uff0c\u5982\u679cvisit\u8fc7\u4e86\uff0c\u5219\u8fd9\u7ec4\u8be2\u95ee\u5bf9\u7684lca\u5373v\u7684\u5e76\u67e5\u96c6\u7684\u6839\u8282\u70b9\uff0c\u82e5\u6ca1\u6709visit\u8fc7\uff0c\u5219\u7ee7\u7eed\u5411\u4e0b\u6df1\u641c\uff0c\u8be5\u8282\u70b9\u8bb0\u4e3a\u5df2visit\n\n\u6bcf\u5f53\u56de\u6eaf\u7684\u65f6\u5019\u90fd\u5c06\u5b50\u8282\u70b9\u7684\u5e76\u67e5\u96c6\u5e76\u5230\u7236\u8282\u70b9\u7684\u5e76\u67e5\u96c6\u4e2d\n\n\n\u8fd9\u6837\u4e00\u904d\u8d70\u4e0b\u6765\u5c31\u5b8c\u6210\u4e86tarjian\u7b97\u6cd5\u3002\n\n\n\u63a5\u7740\u8bf4\u8bf4\u6811\u5256\uff0c\n\n\u6811\u5256\uff08\u6811\u94fe\u5256\u5206\uff09\u662f\u4e00\u79cd\u5728\u7ebf\u7b97\u6cd5\uff0c\u8dd1\u8d77\u6765\u975e\u5e38\u5feb\uff0c\u5e94\u8be5\u662f\u76ee\u524dlca\u7b97\u6cd5\u4e2d\u6700\u4f18\u7684\n\n\u5efa\u6811\u540e\uff0c\u6211\u4eec\u9700\u8981\u628a\u6574\u68f5\u6811\u5212\u4e3a\u8f7b\u91cd\u94fe\uff0c\n\n\u6bcf\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u4e00\u5b9a\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\n\n\u5b9a\u4e49\uff1a\n\n\u91cd\u8fb9\uff1a\u7236\u8282\u70b9\u4e0e\u5176\u5b50\u6811\u6700\u5927\uff08\u5b50\u8282\u70b9\u6700\u591a\uff09\u7684\u8282\u70b9\u7684\u8fde\u8fb9\u79f0\u4e3a\u91cd\u8fb9\n\n\u8f7b\u8fb9\uff1a\u975e\u91cd\u8fb9\u5373\u4e3a\u8f7b\u8fb9\n\n\u91cd\u94fe\uff1a\u76f8\u8fde\u7684\u91cd\u8fb9\u79f0\u4e3a\u91cd\u94fe\n\n\u5212\u5206\u91cd\u94fe\u540e\uff0c\u6211\u4eec\u8981\u8bb0\u4e00\u4e2ajump\u6570\u7ec4\u8868\u793a\u5b58\u6bcf\u4e2a\u8282\u70b9\u7684\u201c\u8df3\u201d\u7684\u4fe1\u606f\n\n\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u5728\u91cd\u94fe\u4e0a\uff0c\u5219jump[i]\u4e3a\u5b83\u6240\u5c5e\u91cd\u94fe\u7684\u6839\u8282\u70b9\uff08\u6700\u9876\u7aef\uff09\n\n\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u4e0d\u5728\u91cd\u94fe\u4e0a\u6216\u8005\u5b83\u662f\u4e00\u6761\u91cd\u94fe\u7684\u9876\u7aef\uff08\u6839\u8282\u70b9\uff09\uff0c\u90a3\u4e48jump[i]\u4e3a\u5b83\u7684\u7236\u8282\u70b9\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u5904\u7406\u8be2\u95ee\u5bf9\u4e86\n\n\u6bd4\u5982\u6c42\u4e24\u4e2a\u8282\u70b9a\uff0cb\u7684lca\n\n\u6211\u4eec\u5148\u770b\u4ed6\u4eec\u662f\u5426\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\uff0c\u5982\u679c\u662f\uff0c\u5219lca\u5373\u4e3a\u6df1\u5ea6\u8f83\u5c0f\u7684\u8282\u70b9\n\n\u5982\u679c\u4e0d\u662f\uff0c\u5219\u6211\u4eec\u9700\u8981\u6bd4\u8f83jump[a]\u548cjump[b]\u7684\u6df1\u5ea6\uff0cjump[a]\u6bd4\u8f83\u6d45\u5219\u4ee4a=jump[a]\u53cd\u4e4b\u4ee4b=jump[b]\n\n\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b\u76f4\u5230a==b\uff08lca\u4e3a\u8fd9\u4e2a\u8282\u70b9\uff09\u6216a,b\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u65f6\uff08lca\u4e3a\u6df1\u5ea6\u6d45\u7684\u8282\u70b9\uff09\n\n\n\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\uff0c\u590d\u6742\u5ea6\u867d\u8bf4\u8bc4\u662fO(n\\*logn)\u4f46\u5b9e\u9645\u4e0a\u8dd1\u8d77\u6765\u5feb\u5f97\u591a\n\n\u4ee5\u4e0a\u5c31\u662f\u6211\u5bf9lca\u7684\u7406\u89e3\uff0c\u5e0c\u671b\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\u3002\n\n\n\u2014\u2014\u2014\u2014by cc\\_ling 2017.3.5\n",
        "postTime": 1488684725,
        "uid": 14951,
        "name": "Pokacy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u8fd9\u9898\u6bd5\u7adf\u662f\u6a21\u677f\u9898\uff0c\u5c31\u5f53\u505a\u6c34\u4e00\u6c34\u5427\uff08\u5927\u96fe\uff09\n\n\n\u6211\u770b\u5f88\u591a\u4eba\u7528\u7684\u90fd\u662f \u500d\u589e RMQ+dfs \u4ec0\u4e48\u7684\uff0c\u4f46\u662ftarjan\u5e94\u8be5\u8fd8\u662f\u6700\u5feb\u7684\n\n\n\u6211\u7528\u7684tarjan\u73b0\u5728\u5e94\u8be5\u662f\u5df2\u63d0\u4ea4\u7684\u91cc\u9762\u6700\u5feb\u7684\u4e86\uff0c\u6700\u540e\u4e09\u4e2a\u70b9\u5e73\u5747\u7528\u4e86345ms\uff0c\u603b\u5171\u53ea\u7528\u4e861000+ms\n\n\ntarjan\u7684\u5177\u4f53\u505a\u6cd5\u5e94\u8be5\u5f88\u591a\u4eba\u7684\u535a\u5ba2\u91cc\u9762\u90fd\u6709\u4e86\uff0c\u6211\u5c31\u4e0d\u5728\u8fd9\u91cc\u8d58\u8ff0\u4e86\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\n\n\n\u6ce8\u610f\u4e00\u5b9a\u8981\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u94fe\u8868\u6216\u8005\u5176\u4ed6\u7684\u9759\u6001\u7ed3\u6784\u6765\u5b58\u50a8\uff0c\u6211\u4e00\u5f00\u59cb\u7528\u7684vector\u548clist\uff0c\u6700\u540e\u4e09\u4e2a\u5e97\u59cb\u7ec8TLE\n\n\n\u00b7\u00b7\u00b7cpp\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <cstring>\n#include <cstdlib>\n#include <algorithm>\nusing namespace std;\nstruct querynode\n{\n    int id;\n    int v;\n    int next;\n};\nstruct listnode\n{\n    int next;\n    int son;\n};\nlistnode listnod[1000010];\nquerynode querynod[1000010];\nint listidx = 0;\nint queryidx = 0;\nint n,m,s;\nint pa[500010];\nint headsons[500010];\nint headquery[500010];\nint lca[500010];\nbool vis[500010];\nint findunion( int u )\n{\n    return pa[u]==u ? u : pa[u]=findunion(pa[u]);\n}\nvoid LCA( int u )\n{\n    pa[u] = u;\n    vis[u] = true;\n    for( int i = headsons[u] ; i != -1 ; i = listnod[i].next )\n    {\n        if( i == -1 )\n        {\n            break;\n        }\n        int v = listnod[i].son;\n        if( !vis[v] )\n        {\n            LCA( v );\n            pa[v] = u;\n        }\n    }\n    for( int i = headquery[u] ; i != -1 ; i = querynod[i].next )\n    {\n        if( i == -1 )\n        {\n            break;\n        }\n        int v = querynod[i].v;\n        int id = querynod[i].id;\n        if( vis[v] )\n        {\n            lca[id] = findunion( v );\n        }\n    }\n}\nint main()\n{\n    cin >> n >> m >> s;\n    for( int i = 1 ; i <= n ; ++i )\n    {\n        headsons[i] = -1;\n        headquery[i] = -1;\n    }\n    for( int i = 0 ; i < n-1 ; ++i )\n    {\n        int u,v;\n        scanf( \"%d%d\" , &u , &v );\n        listnod[listidx].next = headsons[u];\n        listnod[listidx].son = v;\n        headsons[u] = listidx;\n        ++listidx;\n        listnod[listidx].next = headsons[v];\n        listnod[listidx].son = u;\n        headsons[v] = listidx;\n        ++listidx;\n    }\n    for( int i = 0 ; i < m ; ++i )\n    {\n        int a,b;\n        scanf( \"%d%d\" , &a , &b );\n        querynod[queryidx].next = headquery[a];\n        querynod[queryidx].id = i;\n        querynod[queryidx].v = b;\n        headquery[a] = queryidx;\n        ++queryidx;\n        querynod[queryidx].next = headquery[b];\n        querynod[queryidx].id = i;\n        querynod[queryidx].v = a;\n        headquery[b] = queryidx;\n        ++queryidx;\n    }\n    memset( vis , false , sizeof(vis) );\n    LCA( s );\n    for( int i = 0 ; i < m ; ++i )\n    {\n        printf( \"%d\\n\" , lca[i] );\n    }\n    return 0;\n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1475666622,
        "uid": 8212,
        "name": "__stdcall",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u770b\u7740$LCT$\u89e3\u6cd5\u8fd8\u6bd4\u8f83\u5c11\uff0c\u8bb2\u5f97\u4e5f\u4e0d\u7b97\u8be6\u7ec6\uff0c\u6211\u6765\u6c34\u4e00\u7bc7\uff1f\n\n\u4e8b\u5b9e\u4e0a\uff0c$LCT$\u89e3\u6cd5\u76f8\u5f53\u597d\u7406\u89e3\u3002\n\n![](https://s2.ax1x.com/2019/07/22/ePRnBD.png)\n\n\u6211\u4eec\u628a$LCA$\u5206\u4e3a\u4e24\u7c7b\n\n\u4e00\u7c7b\u662f\u4e24\u70b9\u4e2d\u6709\u4e00\u70b9\u4e3a$LCA$\uff0c\u5982\u56fe\u4e2d$3\\;7$\n\n\u4e00\u7c7b\u662f\u4e24\u70b9\u90fd\u4e0d\u662f$LCA$\uff0c\u5982\u56fe\u4e2d$4\\;7$\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u7b2c\u4e00\u7c7b\u60c5\u51b5\u4e2d\uff0c\u8f83\u6d45\u7684\u70b9\u5728\u8f83\u6df1\u7684\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u3002\n\n\u8fd9\u65f6\u5c06\u5176\u4e2d\u4e00\u70b9`access`\uff0c\u5224\u65ad\u53e6\u4e00\u70b9\u662f\u5426\u5728\u540c\u4e00\u5b9e\u94fe\u4e0a\u5373\u53ef\u3002\u5982\u56fe\uff1a\n\n![](https://s2.ax1x.com/2019/07/22/ePhnBT.png)\n\n\u7b2c\u4e8c\u7c7b\u60c5\u51b5\u4e2d\uff0c\u53ef\u4ee5\u5148\u5c06\u70b9$a$ `access`\uff0c\u518d\u5c06\u70b9$b$ `access`\u3002\n\n\u8fd9\u65f6\u6211\u4eec\u53d1\u73b0\uff0c$LCA$\u6b63\u662f$a$\u6240\u5728\u5b9e\u94fe\u9876\u7aef\u7684\u7236\u4eb2\u3002\u5982\u56fe\uff0c\u5148`access(7)`\n\n![](https://s2.ax1x.com/2019/07/22/ePfRh9.png)\n\n\u7136\u540e`access(4)`\n\n![](https://s2.ax1x.com/2019/07/22/ePhuHU.png)\n\n\u4e8e\u662f\u5c31\u505a\u5b8c\u4e86\u3002\u3002\u3002  \n\n$LCA$\u51fd\u6570\u5982\u4e0b\uff08\u6bd2\u7624OOP\u4e0d\u8981\u5728\u610f\uff09\n\n```cpp\ntemplate<typename Value_type,typename Functor>\nstd::pair<bool,typename link_cut_tree<Value_type,Functor>::iterator>\nlink_cut_tree<Value_type,Functor>::least_common_ancestor(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    // if(!split(sptr,eptr))return std::make_pair(0,iterator(NULL));//\u5728\u4fdd\u8bc1\u8fde\u901a\u65f6\u4e0d\u5224\u65ad\u4ee5\u51cf\u5c0f\u5e38\u6570\n    access(sptr);\n    Node *now1=sptr,*now2=eptr;\n    while(!now1->is_root())now1=now1->ftr;\n    while(!now2->is_root())now2=now2->ftr;\n    if(now1==now2)return std::make_pair(1,iterator(eptr));//\u5224\u65ad\u540c\u4e00\u5b9e\u94fe\n    access(eptr);\n    now1=sptr,now2=eptr;\n    while(!now1->is_root())now1=now1->ftr;\n    while(!now2->is_root())now2=now2->ftr;\n    if(now1==now2)return std::make_pair(1,iterator(sptr));\n    return std::make_pair(1,iterator(now1->ftr));//\u6b64\u65f6now1\u5c31\u662fsptr\u6240\u5728splay\u7684\u6839\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff08\u5f00O2\u6700\u5f3a3\u4e2a\u70b9900+ms\u5361\u8fc7\uff09\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n\n//#define MEMPOOL\n\ntemplate<typename Value_type,typename Functor>\nclass LCT_splay\n{\n    public:\n        struct Node;\n        Node* __new_node(const Value_type&);\n#ifdef MEMPOOL\n    private:\n        Node mem_pool[1<<20];\n        int tot;\n#endif\n};\ntemplate<typename Value_type,typename Functor>\nstruct LCT_splay<Value_type,Functor>::Node\n{\n    Value_type val,sum;\n    Node* ftr;\n    Node* ch[2];\n//    Node*& lc;\n//    Node*& rc;\n    #define lc ch[0]\n    #define rc ch[1]\n    bool rev;\n\n    Node(const Value_type& v=Value_type()):\n        val(v),\n        sum(v),\n        ftr(NULL),\n//        lc(ch[0]),\n//        rc(ch[1]),\n        rev(0) {ch[0]=ch[1]=NULL;}\n\n    void reverse();\n    void push_down();\n    void push_all();\n    void maintain();\n    bool is_root();\n    void rotate();\n    void splay();\n};\n\ntemplate<typename Value_type,typename Functor>\nvoid\nLCT_splay<Value_type,Functor>::Node::reverse()\n{\n    rev^=1;\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nLCT_splay<Value_type,Functor>::Node::push_down()\n{\n    if(!rev)return;\n    rev=0;\n    Node* ptr=lc;\n    lc=rc;\n    rc=ptr;\n    if(lc!=NULL)lc->reverse();\n    if(rc!=NULL)rc->reverse();\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nLCT_splay<Value_type,Functor>::Node::push_all()\n{\n    if(!is_root())this->ftr->push_all();\n    push_down();\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nLCT_splay<Value_type,Functor>::Node::maintain()\n{\n    Functor func;\n    sum=func(func(lc!=NULL?lc->sum:Value_type(),val),rc!=NULL?rc->sum:Value_type());\n}\n\ntemplate<typename Value_type,typename Functor>\nbool\nLCT_splay<Value_type,Functor>::Node::is_root()\n{\n    return ftr==NULL||(ftr->lc!=this&&ftr->rc!=this);\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nLCT_splay<Value_type,Functor>::Node::rotate()\n{\n    Node *nftr=ftr,*gftr=ftr->ftr;\n    bool is_rc=nftr->rc==this;\n    bool is_rf=gftr!=NULL?gftr->rc==nftr:0;\n    ftr=gftr;\n    if(!nftr->is_root())gftr->ch[is_rf]=this;\n    nftr->ch[is_rc]=this->ch[!is_rc];\n    if(this->ch[!is_rc]!=NULL)this->ch[!is_rc]->ftr=nftr;\n    nftr->ftr=this;\n    this->ch[!is_rc]=nftr;\n    nftr->maintain();\n    maintain();\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nLCT_splay<Value_type,Functor>::Node::splay()\n{\n    push_all();\n    while(!is_root())\n    {\n        Node *nftr=ftr,*gftr=ftr->ftr;\n        if(nftr->is_root())rotate();\n        else\n        {\n            if((gftr->lc==nftr)^(nftr->lc==this))rotate();\n            else nftr->rotate();\n            rotate();\n        }\n    }\n}\n\ntemplate<typename Value_type,typename Functor>\ntypename\nLCT_splay<Value_type,Functor>::Node*\nLCT_splay<Value_type,Functor>::__new_node(const Value_type& v)\n{\n#ifdef MEMPOOL\n    if(tot==1<<20)\n    {\n        fprintf(stderr,\"Error:No enough memory\\n\");\n        return NULL;\n    }\n    mem_pool[tot++].val=v;\n    return mem_pool+tot-1;\n#else\n    return new Node(v);\n#endif\n}\n\n\n\ntemplate<typename Value_type,typename Functor>\nclass link_cut_tree:public LCT_splay<Value_type,Functor>\n{\n    typedef typename LCT_splay<Value_type,Functor>::Node Node;\n    private:\n        void access(Node*);\n        void make_root(Node*);\n        Node* find_root(Node*);\n        bool split(Node*,Node*);\n    public:\n        struct iterator;\n        iterator make_node(const Value_type&);\n        bool link(const iterator&,const iterator&);\n        bool cut(const iterator&,const iterator&);\n        std::pair<bool,Value_type> query(const iterator&,const iterator&);\n        std::pair<bool,iterator> least_common_ancestor(const iterator&,const iterator&);\n        void set_root(const iterator&);\n        bool modify(iterator,const Value_type&);\n};\n\ntemplate<typename Value_type,typename Functor>\nstruct link_cut_tree<Value_type,Functor>::iterator\n{\n    private:\n        Node* ptr;\n        friend class link_cut_tree;\n    public:\n        Value_type operator*()const{return ptr->val;}\n        iterator(Node* p=NULL):ptr(p) {}\n        iterator(const iterator& iter):ptr(iter.ptr) {}\n};\n\ntemplate<typename Value_type,typename Functor>\nvoid\nlink_cut_tree<Value_type,Functor>::access(Node* ptr)\n{\n    for(Node* nptr=NULL;ptr!=NULL;nptr=ptr,ptr=ptr->ftr)\n        {\n            ptr->splay();\n            ptr->rc=nptr;\n            ptr->maintain();\n        }\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nlink_cut_tree<Value_type,Functor>::make_root(Node* ptr)\n{\n    access(ptr);\n    ptr->splay();\n    ptr->reverse();\n}\n\ntemplate<typename Value_type,typename Functor>\ntypename\nlink_cut_tree<Value_type,Functor>::Node*\nlink_cut_tree<Value_type,Functor>::find_root(Node* ptr)\n{\n    access(ptr);\n    ptr->splay();\n    while(ptr->lc!=NULL)ptr->push_down(),ptr=ptr->lc;\n    ptr->splay();\n    return ptr;\n}\n\ntemplate<typename Value_type,typename Functor>\nbool\nlink_cut_tree<Value_type,Functor>::split(Node* sptr,Node* eptr)\n{\n    make_root(sptr);\n    if(find_root(eptr)!=sptr)return 0;\n    eptr->splay();\n    return 1;\n}\n\ntemplate<typename Value_type,typename Functor>\ntypename\nlink_cut_tree<Value_type,Functor>::iterator\nlink_cut_tree<Value_type,Functor>::make_node(const Value_type& v)\n{\n    return iterator(LCT_splay<Value_type,Functor>::__new_node(v));\n}\n\ntemplate<typename Value_type,typename Functor>\nbool\nlink_cut_tree<Value_type,Functor>::link(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    make_root(sptr);\n    if(find_root(eptr)==sptr)return 0;\n    sptr->ftr=eptr;\n    return 1;\n}\n\ntemplate<typename Value_type,typename Functor>\nbool\nlink_cut_tree<Value_type,Functor>::cut(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    make_root(sptr);\n    if(find_root(eptr)!=sptr||eptr->ftr!=sptr||eptr->lc!=NULL)return 0;\n    eptr->ftr=NULL;\n    sptr->lc=NULL;\n    sptr->maintain();\n    return 1;\n}\n\ntemplate<typename Value_type,typename Functor>\nstd::pair<bool,Value_type>\nlink_cut_tree<Value_type,Functor>::query(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    if(!split(sptr,eptr))return std::make_pair(0,Value_type());\n    return std::make_pair(1,eptr->sum);\n}\n\ntemplate<typename Value_type,typename Functor>\nstd::pair<bool,typename link_cut_tree<Value_type,Functor>::iterator>\nlink_cut_tree<Value_type,Functor>::least_common_ancestor(const iterator& siter,const iterator& eiter)\n{\n    Node* sptr=siter.ptr;\n    Node* eptr=eiter.ptr;\n    // if(!split(sptr,eptr))return std::make_pair(0,iterator(NULL));\n    access(sptr);\n    Node *now1=sptr,*now2=eptr;\n    while(!now1->is_root())now1=now1->ftr;\n    while(!now2->is_root())now2=now2->ftr;\n    if(now1==now2)return std::make_pair(1,iterator(eptr));\n    access(eptr);\n    now1=sptr,now2=eptr;\n    while(!now1->is_root())now1=now1->ftr;\n    while(!now2->is_root())now2=now2->ftr;\n    if(now1==now2)return std::make_pair(1,iterator(sptr));\n    return std::make_pair(1,iterator(now1->ftr));\n}\n\ntemplate<typename Value_type,typename Functor>\nvoid\nlink_cut_tree<Value_type,Functor>::set_root(const iterator& iter)\n{\n    Node* ptr=iter.ptr;\n    make_root(ptr);\n}\n\ntemplate<typename Value_type,typename Functor>\nbool\nlink_cut_tree<Value_type,Functor>::modify(iterator iter,const Value_type& v)\n{\n    Node* ptr=iter.ptr;\n    if(ptr==NULL)return 0;\n    ptr->splay();\n    ptr->val=v;\n    ptr->maintain();\n    return 1;\n}\n#undef lc\n#undef rc\n\ntemplate<typename Argument_type,typename Result_type>\nclass Nop\n{\n    public:\n        Result_type operator()(const Argument_type& x,const Argument_type& y)const\n        {\n            return 0;\n        }\n};\n\nlink_cut_tree<int,Nop<int,int> > my_LCT;\nlink_cut_tree<int,Nop<int,int> >::iterator iters[500005];\n\nchar gc()\n{\n    static char buf[1<<16],*p1=buf,*p2=buf;\n    if(p1==p2)\n    {\n        p2=(p1=buf)+fread(buf,1,1<<16,stdin);\n        if(p1==p2)return EOF;\n    }\n    return *p1++;\n}\n\n#define getchar gc\n\ntemplate<typename T>\nvoid read(T& x)\n{\n    bool f=0;\n    x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')f|=(c=='-'),c=getchar();\n    while(c>='0'&&c<='9')x=x*10+(c^48),c=getchar();\n}\n\ntemplate<typename T>\nvoid write(T x)\n{\n    if(x<0)std::putchar('-'),x=-x;\n    if(x>=10)write(x/10);\n    putchar(x%10^48);\n}\n\nint main()\n{\n    int n,m,s;\n    read(n),read(m),read(s);\n    for(int i=1;i<=n;++i)\n    {\n        iters[i]=my_LCT.make_node(i);\n    }\n    for(int i=1;i<n;++i)\n    {\n        int u,v;\n        read(u),read(v);\n        my_LCT.link(iters[u],iters[v]);\n    }\n    my_LCT.set_root(iters[s]);\n    for(int i=0;i<m;++i)\n    {\n        int u,v;\n        read(u),read(v);\n        write(*(my_LCT.least_common_ancestor(iters[u],iters[v]).second));\n        putchar('\\n');\n    }\n}\n```\n$LCT$\u5927\u6cd5\u597d\uff01\uff01\uff01\uff08\u7834\u97f3",
        "postTime": 1563780991,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u6b64\u9898\u89e3\u9002\u7528\u4e8e\u5df2\u7ecf\u5bf9LCA\u6709\u76f8\u5173\u4e86\u89e3\uff0c\u770b\u8fc7\u76f8\u5173\u56fe\u89e3\u6559\u7a0b\uff0c\u5199\u7a0b\u5e8f\u5374gg\u7684\u540c\u5b66\n\n\u5185\u9644log2\u5e38\u6570\u4f18\u5316~~\uff08\u6ca1\u5b83\u8981tle\u7684\uff09~~\n\n\u8bb2\u89e3\u90fd\u5199\u5728\u6ce8\u91ca\u91cc\u4e86\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint const maxn = 500001;\nint const maxm = 19;    //\u6b64\u4e3a log2(500000) + 1 \u53d6\u6574\uff0c\u786e\u4fdd\u6570\u7ec4\u4e0d\u4f1a\u6ea2\u51fa\nint N, M, S;\nint father[maxn];       //dfs\u51fd\u6570\u548c\u5176\u5b83dalao\u5199\u7684\u4e0d\u592a\u4e00\u6837\uff08\u4e0b\u9762\u4f1a\u8bb2\uff09\uff0c\u6240\u4ee5\u8981\u7528\u4e00\u4e2afather\u6570\u7ec4\u8bb0\u5f55\u4ed6\u7238\nvector<int> data[maxn]; //\u4f7f\u7528vector\u52a8\u6001\u6570\u7ec4\uff0c\u4e5f\u8bb8\u7a7a\u95f4\u4e0d\u662f\u6700\u7701\u7684\uff0c\u4f46\u6bd4\u8f83\u7701\u4e8b\nint depth[maxn];        //\u8bb0\u5f55\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6df1\u5ea6\nint jump[maxn][maxm];   //\u4f7f\u7528\u500d\u589e\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u9700\u8981\u6709\u4e2a\u7528\u6765\u9884\u5904\u7406\u7684\u6570\u7ec4\uff0cjump[i][j]\u6307\u4ecei\u7ed3\u70b9\u5411\u4e0a\u8df32^j\u4e2a\u7ed3\u70b9\u6240\u5230\u8fbe\u7684\u7ed3\u70b9\nint lg2[maxn];          //\u5e38\u6570\u4f18\u5316\u6570\u7ec4\n\nvoid dfs(int x, int deep)   //x\u8bb0\u5f55\u7ed3\u70b9\uff0cdeep\u8bb0\u5f55\u6b64\u8282\u70b9\u7684\u6df1\u5ea6\n{\n    depth[x] = deep;    //\u8bb0\u5f55\u4e0b\u672c\u8282\u70b9\u7684\u6df1\u5ea6\n    jump[x][0] = father[x]; //\u4e3a\u4e0b\u9762\u521d\u59cb\u5316\u500d\u589e\u6570\u7ec4\u63d0\u4f9b\u539f\u59cb\u6570\u636e\n    for (int i = 1; i <= lg2[depth[x]]; i++)    //i <= lg2[depth[x]]\u8fd8\u53ef\u4ee5\u5199\u6210(1 << i) <= depth[x]\n        jump[x][i] = jump[jump[x][i - 1]][i - 1];    //\u8f6c\u79fb\uff1ax\u76842^i\u7b49\u4e8ex\u76842^(i-1)\u7956\u5148\u76842^(i-1)\u7956\u5148\n    for (int i = 0; i < data[x].size(); i++)    //data[x].size()\u6c42vector\u6570\u7ec4\u5927\u5c0f\n        if (data[x][i] != father[x])    //\u5224\u65ad\u4ee5\u9632\u6b62\u76f4\u63a5\u641c\u5230\u4eb2\u7238\n        {\n            father[data[x][i]] = x;     //\u63d0\u524d\u8ba9\u513f\u5b50\u77e5\u9053\u4ed6\u7238\uff0c\u514d\u5f97\u5230\u65f6\u5019\u516d\u4eb2\u4e0d\u8ba4\n            dfs(data[x][i], deep + 1);  //\u5bf9\u5b50\u8282\u70b9\u8fdb\u884c\u641c\u7d22\n        }\n}\n\nint main()\n{\n    scanf(\"%d%d%d\", &N, &M, &S);\n    //\u5efa\u8bae\u5728\u8fd9\u79cd\u6570\u636e\u91cf\u5de8\u5927\u7684\u65f6\u5019\u907f\u514d\u4f7f\u7528cin & cout\uff0c\u4e0d\u7136\u53ef\u4ee5\u8bd5\u8bd5 ios::sync_with_stdio(false);\n    for (int i = 0; i <= (int)log2(N) + 1; i++) //\u624b\u5199log2\u5e38\u6570\u4f18\u5316\uff0c\u7ecf\u6d4b\u8bd5\uff0c\u53ef\u52a0\u5feb\u81f3\u5c11\u7ea620%\u7684\u901f\u5ea6\n        for (int j = (1 << i); j < (1 << (i + 1)) && j <= N; j++)   //1 << i\u7b49\u4ef7\u4e8epow(2,i)\n            lg2[j] = i;     //\u81ea\u521b\u4f18\u5316\uff0c\u5982\u53ef\u6539\u8fdb\uff0c\u8bf7\u4e0d\u541d\u8d50\u6559\n\n    for (int i = 1; i <= N - 1; i++)\n    {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        data[x].push_back(y);   //vector\u6570\u7ec4\u5e38\u89c4\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u849f\u84bb\u9700\u8981\u6ce8\u610f\uff0cvector\u6570\u7ec4\u8bb0\u5f55\u4ece0\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\u4ece1\u5f00\u59cb\uff0c\u4e5f\u53ef\u4ee5\u7528data[x].begin(), data[x].end()\u53d6\u5f97\u5f00\u59cb\u7ed3\u675f\u6307\u9488\n        data[y].push_back(x);   //\u65e0\u5411\u56fe\uff0c\u8981push_back()\u4e24\u6b21\n    }\n    //LCA \u521d\u59cb\u5316\n    dfs(S, 1);\n\n    //LCA \u6838\u5fc3\u4ee3\u7801\n    for (int i = 1; i <= M; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        if (depth[a] != depth[b])   //\u5982\u679c\u4e8c\u8005\u6df1\u5ea6\u4e0d\u540c\uff0c\u9996\u5148\u8981\u8ba9\u4ed6\u4eec\u7ad9\u5728\u540c\u4e00\u8d77\u8dd1\u7ebf\u554a\n        {\n            if (depth[a] < depth[b])    //\u786e\u4fdd a \u66f4\u6df1\uff0c\u4fbf\u4e8e\u4e4b\u540e\u64cd\u4f5c\n                swap(a, b);\n            while (depth[a] > depth[b])\n                a = jump[a][lg2[depth[a] - depth[b]]];  //\u6839\u636e\u6df1\u5ea6\u5dee\uff0c\u6b65\u5b50\u7531\u5927\u5230\u5c0f\u5730\u5230\u8fbe\u8d77\u8dd1\u7ebf\uff0c\u53ef\u4ee5\u6267\u7b14\u6a21\u62df\u4e00\u628a\n        }\n        if (a == b)     //\u5982\u679cb\u662fa\u7684\u7956\u5148\uff0c\u76f4\u63a5\u8f93\u51fa\u5c31\u597d\u4e86\n        {\n            printf(\"%d\\n\", a);\n            continue;\n        }\n        for (int j = lg2[depth[a]]; j >= 0; j--)    //\u4ece\u4e0b\u5f80\u4e0a\uff0c\u6b65\u5b50\u7531\u5927\u5230\u5c0f\u5411\u4e0a\u8df3\n            if (jump[a][j] != jump[b][j])   //\u5982\u679c\u8df3\u8fc7\u4e86\uff0c\u90a3\u4e48\u7956\u5148\u4e00\u5b9a\u76f8\u540c\uff0c\u6b65\u5b50\u5c31\u8981\u8fc8\u5c0f\u70b9\n            {\n                a = jump[a][j];\n                b = jump[b][j];//a\uff0cb\u540c\u65f6\u8d77\u8df3\n            }\n        printf(\"%d\\n\", jump[a][0]); //\u56e0\u4e3a\u5224\u65ad\u7684\u4e00\u4e9b\u539f\u56e0\uff0c\u6700\u7ec8\u7b54\u6848\uff08LCA\uff09\u521a\u597d\u5c31\u662f\u4ed6\u4eec\u73b0\u5728\u7684\u7236\u8282\u70b9\n    }\n    return 0;//\u7a0b\u5e8f\u5b8c\u7f8e\u7ed3\u675f\n}\n\n```\n",
        "postTime": 1563545645,
        "uid": 162184,
        "name": "AQiu",
        "ccfLevel": 0,
        "title": "\u5237\u9898\u65e5\u8bb0 @P3379 \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09"
    },
    {
        "content": "[*\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c*](https://www.cnblogs.com/Lemir3/p/11112663.html#autoid-2-1-0)\n\n#\u4ec0\u4e48\u662fLCA?\n\n\u8bdd\u4e0d\u591a\u8bf4,\u540c\u5fd7\u4eec\u5148\u6765\u5eb7\u5eb7LCA\u662f\u4ec0\u4e48\u4e1c\u897f.(\u9003\n\n![\u914d\u56fe1](https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=853c0d74b6003af349badb62052bc619/e4dde71190ef76c6140016569d16fdfaae5167f9.jpg)\n\n![\u914d\u56fe2](https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=e6f73389b74543a9f11bfdce2e168a7b/8b13632762d0f703c46178a108fa513d2797c5f8.jpg)\n\n~~LCA\u201c\u5149\u8f89\u201d\u662f\u5370\u5ea6\u65af\u5766\u822a\u7a7a\u516c\u53f8(HAL)\u4e3a\u6ee1\u8db3\u5370\u5ea6\u7a7a\u519b\u9700\u8981\u7814\u5236\u7684\u5355\u5ea7\u5355\u53d1\u8f7b\u578b\u5168\u5929\u5019\u8d85\u97f3\u901f\u6218\u6597\u653b\u51fb\u673a\uff0c\u4e3b\u8981\u4efb\u52a1\u662f\u4e89\u593a\u5236\u7a7a\u6743\u3001\u8fd1\u8ddd\u652f\u63f4\uff0c\u662f\u5370\u5ea6\u81ea\u884c\u7814\u5236\u7684\u7b2c\u4e00\u79cd\u9ad8\u6027\u80fd\u6218\u6597\u673a\u3002~~\n\n\u5f53\u7136,\u540c\u5fd7\u4eec\u8ba4\u8bc6\u7684LCA\u53ef\u4e0d\u662f\u90a3\u4e2a~~\u7814\u5236\u4e86\u4e09\u5341\u5e74\u7684~~\u70c2\u73a9\u610f.\n\n\u5728\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d,LCA\u6307\u7684\u662f\"Lowest Common Ancestors\",\u5373\"\u6700\u8fd1\u516c\u5171\u7956\u5148\".\u7b97\u6cd5\u76ee\u7684\u662f\u5728\u4e00\u9897\u6709\u6839\u6811\u4e2d,\u6c42\u51fa\u7ed3\u70b9$x$\u548c$y$\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148.\n\n\u90a3\u4e48\u4ec0\u4e48\u662f\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u5462?\u65af\u5927\u6797\u683c\u52d2\u7684\u62d6\u62c9\u673a\u5de5\u4eba\u4eec\u7ed9\u51fa\u4e86\u8fd9\u6837\u4e00\u5e45\u56fe:\n\n![\u914d\u56fe3.png](https://i.loli.net/2019/06/30/5d18a7794d21159013.png)\n\n\u9996\u5148\u6211\u4eec\u5f97\u7406\u89e3\u7956\u5148\u7684\u6982\u5ff5.\u5bf9\u4e0e\u4efb\u610f\u4e00\u4e2a\u6811\u4e0a\u7684\u7ed3\u70b9,\u4e0e\u5b83\u6709\u4eb2\u7f18\u5173\u7cfb,\u4e14\u6df1\u5ea6\u6bd4\u5b83\u5c0f\u7684\u7ed3\u70b9\u90fd\u662f\u5b83\u7684\u7956\u5148.\n\n\u5728\u8fd9\u5e45\u56fe\u4e2d,3\u53f7\u7ed3\u70b9\u7684\u7956\u5148\u4e3a2\u548c1,6\u53f7\u7ed3\u70b9\u7684\u7956\u5148\u4e3a5\u548c1,\u6240\u4ee5\u5b83\u4eec\u6709\u516c\u5171\u7684\u7956\u51481,\u6240\u4ee5\u8bf43\u548c6\u7684LCA\u4e3a1.\n\n\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50,3\u7ed3\u70b9\u7684\u7956\u5148\u4e3a2\u548c1,4\u53f7\u7ed3\u70b9\u7684\u7956\u5148\u4e3a2\u548c1,\u5b83\u4eec\u6709\u516c\u5171\u7956\u51482\u548c1,\u4f46\u662f2\u662f\u8ddd\u79bb\u5b83\u4eec\u6700\u8fd1\u7684\u7956\u5148,\u6240\u4ee5\u8bf43\u548c4\u7684LCA\u4e3a2.\n\n#\u600e\u6837~~\u5efa\u8bbe~~\u6c42\u51faLCA?\n\n\u6c42LCA\u4e00\u822c\u53ef\u7528\u5230\u500d\u589e,Tarjan(\u4e0d\u662f\u7528\u4e8e\u7f29\u70b9\u90a3\u4e2aTarjan)\u8fd9\u4e24\u79cd\u7b97\u6cd5,\u5728\u8fd9\u91cc\u4e00\u4e00\u8bb2\u89e3.\n\n##\u500d\u589e\u7248LCA\n\n###\u4e3b\u4f53\u601d\u60f3(\u8bf7\u52ff\u8054\u60f3\u5230\u67d0\u91d1\u59d3\u9886\u5bfc\u4eba)\n\n\u500d\u589e\u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u62c6\u5206\u7684\u601d\u60f3,\u5176\u5df2\u5e7f\u6cdb\u5e94\u7528\u4e8eST\u8868,\u6c42\u89e3LCA\u7b49\u7b97\u6cd5,\u4e3a\u6211\u56fd\u751f\u4ea7\u529b\u7684\u53d1\u5c55,\u63a8\u8fdb\u5171\u4ea7\u4e3b\u4e49\u7684\u65e9\u65e5\u5b9e\u73b0\u505a\u51fa\u4e86\u5de8\u5927\u8d21\u732e.\n\n###\u5b9e\u73b0\u65b9\u5f0f\n\n\u7c7b\u6bd4ST\u8868\u7684\u5b9e\u73b0\u65b9\u5f0f,\u540c\u5fd7\u4eec\u53ef\u4ee5\u8bbe$f[i][j]$\u4e3a\u7ed3\u70b9i\u5411\u4e0a\u6761$2^j$\u540e\u5230\u8fbe\u7684\u7ed3\u70b9.\u663e\u7136,$f[i][0]$\u5c31\u662f$i$\u7ed3\u70b9\u7684\u7236\u4eb2.\n\n\u90a3\u4e48\u5982\u4f55\u8fdb\u884c\u4e8c\u8fdb\u5236\u62c6\u5206\u5462?\u663e\u7136,$f[i][j-1]$\u5411\u4e0a\u518d\u8df3$2^{j-1}$\u6b21\u540e\u5230\u8fbe\u7684\u7ed3\u70b9\u5c31\u662f$f[i][j]$.\n\n\u4e8e\u662f\u540c\u5fd7\u4eec\u53ef\u4ee5\u8fd9\u6837\u9884\u5904\u7406:\n\n`f[i][j]=f[f[i][j-1]][j-1];`\n\n\u610f\u4e3a:$i$\u53f7\u7ed3\u70b9\u5411\u4e0a\u8df3$2^j$\u4e2a\u957f\u5ea6\u5230\u8fbe\u7684\u7ed3\u70b9,\u7b49\u4e8e$i$\u53f7\u7ed3\u70b9\u5411\u4e0a\u8df3$2^{j-1}$\u4e2a\u7ed3\u70b9\u5230\u8fbe\u7684\u7ed3\u70b9\u518d\u5411\u4e0a\u8df3$2^{j-1}$\u4e2a\u7ed3\u70b9.\n\n\u7136\u540e\u5c06\u4e24\u4e2a\u7ed3\u70b9\u63d0\u81f3\u540c\u4e00\u6df1\u5ea6,\u4e0d\u65ad\u5730\u5411\u4e0a\u8df3\u5373\u53ef\u6c42\u51fa\u5b83\u4eec\u7684LCA.\n\n###~~\u5efa\u8bbe~~\u6c42\u51faLCA\u7684\u5177\u4f53\u6b65\u9aa4\n\n1. \u8fdb\u884c\u9884\u5904\u7406.\n\n2. \u628a\u7ed3\u70b9x\u548cy\u8c03\u6574\u81f3\u540c\u4e00\u9ad8\u5ea6.\n\n3. \u5c06\u7ed3\u70b9x\u548cy\u540c\u65f6\u5411\u4e0a\u8c03\u6574,\u4fdd\u6301\u6df1\u5ea6\u4e00\u81f4\u4e14\u4e8c\u70b9\u4e0d\u76f8\u4f1a.\u5177\u4f53\u5730\u8bf4,\u5c31\u662f\u5c06$x$\u548c$y$\u4ee5\u6b64\u5411\u4e0a\u8d70$k$=$2^{logn}$,...,$2^1$,$2^0$\u6b65,\u5982\u679c$f[x][k]$!=$f[y][k]$(\u5373\u4e24\u70b9\u8fd8\u672a\u76f8\u4f1a),\u5c31\u4ee4$x$=$f[x][k]$,$y$=$f[y][k]$.\n\n4. \u8fd9\u65f6$x$\u4e0e$y$\u53ea\u5dee\u4e00\u6b65\u5c31\u76f8\u4f1a\u4e86,\u8fd4\u56de$f[x][0]$,\u5373$x$\u7684\u7236\u4eb2,\u5373\u4e3a$x$\u548c$y$\u7684LCA.\n\n\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(log2(Depth))$\n\n[*\u6a21\u677f\u9898*](https://www.luogu.org/problemnew/show/P3379)\n\n**\u4ee3\u7801:**\n\n```cpp\n\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n\nusing namespace std;\n\nstruct edge\n{\n  int next,to;\n}e[1000010];\n\nint n,m,s,size;\nint head[500010],depth[500010],path[500010][51];\n\nvoid EdgeAdd(int,int);\nint LCA(int,int);\nvoid DFS(int,int);\n\nint main()\n{\n  memset(head,-1,sizeof(head));\n  scanf(\"%d%d%d\",&n,&m,&s);\n  for(int _=1;_<=n-1;_++)\n  {\n    int father,son;\n    scanf(\"%d%d\",&father,&son);\n    EdgeAdd(father,son);\n    EdgeAdd(son,father);\n  }\n  DFS(s,0);\n  for(int _=1;_<=m;_++)\n  {\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\\n\",LCA(a,b));\n  }\nreturn 0;\n}\n\nvoid EdgeAdd(int from,int to)\n{\n  e[++size].to=to;\n  e[size].next=head[from];\n  head[from]=size;\n}\n\nvoid DFS(int from,int father)\n{\n  depth[from]=depth[father]+1;\n  path[from][0]=father;\n  for(int _=1;(1<<_)<=depth[from];_++)\n  {\n    path[from][_]=path[path[from][_-1]][_-1];\n  }\n  for(int _=head[from];_!=-1;_=e[_].next)\n  {\n    int to=e[_].to;\n    if(to!=father)\n    {\n      DFS(to,from);\n    }\n  }\n}\n\nint LCA(int a,int b)\n{\n  if(depth[a]>depth[b])\n  {\n    swap(a,b);\n  }\n  for(int _=20;_>=0;_--)\n  {\n    if(depth[a]<=depth[b]-(1<<_))\n    {\n      b=path[b][_];\n    }\n  }\n  if(a==b)\n  {\n    return a;\n  }\n  for(int _=20;_>=0;_--)\n  {\n    if(path[a][_]==path[b][_])\n    {\n      continue;\n    }\n    else\n    {\n      a=path[a][_];\n      b=path[b][_];\n    }\n  }\nreturn path[a][0];\n}\n\n```\n\n##Tarjan\u7248LCA\n\n*Tarjan\u7248\u7684LCA\u662f\u79bb\u7ebf\u7684,\u800c\u4e0a\u6587\u4ecb\u7ecd\u7684\u500d\u589e\u7248LCA\u662f\u5728\u7ebf\u7684,\u6240\u4ee5\u8bf4\u5982\u679c\u4e0d\u662f\u76f4\u63a5\u8f93\u51faLCA\u7684\u8bdd,\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u5f55\u5b83.*\n\n###\u4e3b\u4f53\u601d\u60f3\n\n\u4ece\u6839\u7ed3\u70b9\u904d\u5386\u8fd9\u68f5\u6811,\u904d\u5386\u5230\u6bcf\u4e2a\u7ed3\u70b9\u4f7f\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u7236\u5b50\u5173\u7cfb.\n\n###\u5b9e\u73b0\u65b9\u5f0f\n\n\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u7236\u5b50\u5173\u7cfb,\u5c06\u904d\u5386\u8fc7\u7684\u70b9\u5408\u5e76\u4e3a\u4e00\u9897\u6811.\n\n\u82e5\u4e24\u4e2a\u7ed3\u70b9$x$,$y$\u5206\u522b\u4f4d\u4e8e\u7ed3\u70b9$a$\u7684\u5de6\u53f3\u5b50\u6811\u4e2d,\u90a3\u4e48\u7ed3\u70b9$a$\u5c31\u4e3a$x$\u4e0e$y$\u7684LCA.\n\n\u8003\u8651\u5230\u8be5\u7ed3\u70b9\u672c\u8eab\u5c31\u662f\u81ea\u5df1\u7684LCA\u7684\u60c5\u51b5,\u505a\u51fa\u5982\u4e0b\u4fee\u6539:\n\n>\u82e5$a$\u662f$x$\u548c$y$\u7684\u7956\u5148\u4e4b\u4e00,\u4e14$x$\u548c$y$\u5206\u522b\u5728$a$\u7684\u5de6\u53f3\u5b50\u6811\u4e2d,\u90a3\u4e48$a$\u4fbf\u662f$x$\u548c$y$\u7684LCA.\n\n\u8fd9\u4e2a\u5b9a\u7406\u4fbf\u662fTarjan\u7248LCA\u7684\u5b9e\u73b0\u57fa\u7840.\n\n###\u5177\u4f53\u6b65\u9aa4\n\n\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u7ed3\u70b9$x$\u65f6,\u6709\u4ee5\u4e0b\u6b65\u9aa4:\n\n1. \u628a\u8fd9\u4e2a\u7ed3\u70b9\u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee.\n\n2. \u904d\u5386\u8fd9\u4e2a\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9$y$,\u5e76\u5728\u56de\u6eaf\u65f6\u7528\u5e76\u67e5\u96c6\u5408\u5e76$x$\u548c$y$.\n\n3. \u904d\u5386\u4e0e\u5f53\u524d\u7ed3\u70b9\u6709\u67e5\u8be2\u5173\u7cfb\u7684\u7ed3\u70b9$z$,\u5982\u679c$z$\u5df2\u88ab\u8bbf\u95ee,\u5219\u5b83\u4eec\u7684LCA\u5c31\u4e3a$find(z)$.\n\n\u9700\u8981\u540c\u5fd7\u4eec\u6ce8\u610f\u7684\u662f,\u5b58\u67e5\u8be2\u5173\u7cfb\u7684\u65f6\u5019\u662f\u8981\u53cc\u5411\u5b58\u50a8\u7684.\n\n\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n+m)$\n\nTarjan\u7248\u7684LCA\u5f88\u5c11\u7528\u5230,\u4f46\u4e3a\u4e86\u65b9\u4fbf\u7406\u89e3,\u8fd9\u91cc\u5f15\u7528\u4e86**\u53c2\u8003\u6587\u732e2**\u91cc\u7684\u4ee3\u7801,\u671b\u539f\u535a\u4e3b\u4e0d\u8981\u4ecb\u610f.\n\n**\u4ee3\u7801:**\n\n```cpp\n\n#include<bits/stdc++.h>\nusing namespace std;\nint n,k,q,v[100000];\nmap<pair<int,int>,int> ans;//\u5b58\u7b54\u6848\nint t[100000][10],top[100000];//\u5b58\u50a8\u67e5\u8be2\u5173\u7cfb\nstruct node{\n    int l,r;\n};\nnode s[100000];\n/*\u5e76\u67e5\u96c6*/\nint fa[100000];\nvoid reset(){\n    for (int i=1;i<=n;i++){\n        fa[i]=i;\n    }\n}\nint getfa(int x){\n    return fa[x]==x?x:getfa(fa[x]);\n}\nvoid marge(int x,int y){\n    fa[getfa(y)]=getfa(x);\n}\n/*------*/\nvoid tarjan(int x){\n    v[x]=1;//\u6807\u8bb0\u5df2\u8bbf\u95ee\n    node p=s[x];//\u83b7\u53d6\u5f53\u524d\u7ed3\u70b9\u7ed3\u6784\u4f53\n    if (p.l!=-1){\n        tarjan(p.l);\n        marge(x,p.l);\n    }\n    if (p.r!=-1){\n        tarjan(p.r);\n        marge(x,p.r);\n    }//\u5206\u522b\u5bf9l\u548cr\u7ed3\u70b9\u8fdb\u884c\u64cd\u4f5c\n    for (int i=1;i<=top[x];i++){\n        if (v[t[x][i]]){\n            cout<<getfa(t[x][i])<<endl;\n        }//\u8f93\u51fa\n    }\n}\nint main(){\n    cin>>n>>q;\n    for (int i=1;i<=n;i++){\n        cin>>s[i].l>>s[i].r;\n    }\n    for (int i=1;i<=q;i++){\n        int a,b;\n        cin>>a>>b;\n            t[a][++top[a]]=b;//\u5b58\u50a8\u67e5\u8be2\u5173\u7cfb\n            t[b][++top[b]]=a;\n    }\n    reset();//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    tarjan(1);//tarjan \u6c42 LCA\n}\n\n```\n\n#\u53c2\u8003\u6587\u732e\n\n[*\u53c2\u8003\u6587\u732e1*](https://www.cnblogs.com/water-mi/p/9794827.html)\n\n[*\u53c2\u8003\u6587\u732e2*](https://www.cnblogs.com/abc2237512422/p/9832468.html)\n\n[*\u53c2\u8003\u6587\u732e3*](https://blog.csdn.net/sr_19930829/article/details/41828637)\n",
        "postTime": 1561959207,
        "uid": 54986,
        "name": "lemir3",
        "ccfLevel": 5,
        "title": "\u65af\u5927\u6797\u683c\u52d2\u62d6\u62c9\u673a\u5382LCA\u9879\u76ee\u7814\u5236\u6210\u529f"
    },
    {
        "content": "# ~~**\u65e0\u6570\u6b21RE\u78b0\u5934\u4e4b\u540e\u7684\u4e00\u4f4d\u849f\u84bb\u89c9\u609f\u4e86**~~\n\n\u53cc\u94fe\u8868\uff0c\u500d\u589e\u6c42LCA...\n\n\u53cc\u94fe\u8868\uff0c\u500d\u589e\u6c42LCA......\n\n\u53cc\u94fe\u8868\uff0c\u500d\u589e\u6c42LCA?????????\n\n\u53cc\u94fe\u8868!!!!!!!!!!!!!!\n\n\n------------\n\n\n# **\u5177\u4f53\u505a\u6cd5\u5982\u4e0b**# \n\n\u500d\u589e\u6cd5\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u7b97\u6cd5\u3002\u8bbef[x,k]\u8868\u793ax\u76842k\u8f88\u7956\u5148\uff0c\u5373\u4ecex\u5411\u6839\u7ed3\u70b9\u8d702k\u6b65\u5230\u8fbe\u7684\u7ed3\u70b9\u3002\n\n\u7279\u522b\u7684\uff0c\u82e5\u8be5\u7ed3\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u4ee4f[x,k]=0\u3002f[x,0]\u5c31\u662fx\u7684\u7236\u8282\u70b9\u3002\u90a3\u4e48x\u5411\u6839\u8282\u70b9\u8d70\u4e862k\u6b65\uff0c\u53ef\u4ee5\u7b49\u4ef7\u4e8ex\u5411\u6839\u8d702k-1\u6b65\uff0c\u518d\u8d702k-1\u6b65\uff0c\u6240\u4ee5\u5bf9\u4e8ek\u2208[1,logn],\u6709f[x][k]=f[f[x][k-1]][k-1]\u3002\n\n\t\u8fd9\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u7684\u8fc7\u7a0b\uff0c\u201c\u9636\u6bb5\u201d\u5c31\u662f\u7ed3\u70b9\u7684\u6df1\u5ea6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6811\u8fdb\u884c\u904d\u5386\uff0c\u7531\u6b64\u5f97\u5230f[x,0]\uff0c\u518d\u8ba1\u7b97f\u6570\u503c\u6240\u6709\u503c\u3002\n    \n\t\u4ee5\u4e0a\u90e8\u5206\u662f\u9884\u5904\u7406\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\u3002\u4e4b\u540e\u53ef\u4ee5\u591a\u6b21\u5bf9\u4e0d\u540cx\uff0cy\u8ba1\u7b97LCA\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn).\u3002\n    \n\t\u57fa\u4e8ef\u6570\u7ec4\u8ba1\u7b97LCA\uff08x\uff0cy\uff09\u5206\u4e3a\u4ee5\u4e0b\u51e0\u6b65\uff1a\n    \n\uff081\uff09\u8bbedep[x]\u8868\u793ax\u7684\u6df1\u5ea6\u3002\u4e0d\u59a8\u8bbedep[x]>=dep[y](\u5426\u5219\uff0c\u53ef\u4ea4\u6362x\uff0cy)\u3002\n\n\uff082\uff09\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628ax\u5411\u4e0a\u8c03\u6574\u5230\u4e0ey\u540c\u4e00\u6df1\u5ea6\u3002\n\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u4f9d\u6b21\u5c1d\u8bd5\u4ecex\u5411\u4e0a\u8d70k=2logn\u30012(logn-1)\u202621\u300120\u6b65\uff0c\u82e5\u8fbe\u5230\u7684\u7ed3\u70b9\u6bd4y\u6df1\uff0c\u5219\u4ee4x=f[x,k]\u3002\n\n\uff083\uff09\u82e5\u6b64\u65f6x=y,\u8bf4\u660e\u5df2\u7ecf\u627e\u5230\u4e86LCA,LCA\u5c31\u7b49\u4e8ey\u3002\n\n\uff084\uff09\u82e5\u6b64\u65f6x!=y,\u90a3\u4e48x\uff0cy\u7ee7\u7eed\u5f80\u4e0a\u8df3\uff0c\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628ax\uff0cy\u540c\u65f6\u5411\u4e0a\u8c03\u6574\uff0c\u5e76\u4fdd\u6301\u6df1\u5ea6\u4e00\u81f4\u4e14\u4e8c\u8005\u4e0d\u76f8\u4f1a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u4f9d\u6b21\u5c1d\u8bd5\u628ax\uff0cy\u540c\u65f6\u5411\u4e0a\u8d70k=2logn\u30012(logn-1)\u202621\u300120\u6b65\uff0c\u82e5f[x,k]!=f[y,k],\u5373\u4ecd\u672a\u76f8\u4f1a\uff0c\u5219\u4ee4x=f[x,k],y=[y,k]\u3002\n\n\uff085\uff09\u6b64\u65f6x,y\u5fc5\u5b9a\u53ea\u5dee\u4e00\u6b65\u5c31\u76f8\u4f1a\u4e86\uff0c\u5b83\u4eec\u7684\u7236\u8282\u70b9f[x,0]\u5c31\u662fLCA\u3002\n\n\u8981\u4fdd\u8bc1x\uff0cy\u4e0d\u76f8\u4f1a\uff0c\u6240\u4ee5\uff0ci=2\u65f6\uff0c\u867d\u7136\u53ef\u4ee5\u8df3\u5230\u540c\u4e00\u70b9\uff0c\u4f46\u4e0d\u53ef\u8df3\uff0c\u56e0\u4e3a\u6b64\u65f6\u5230\u8fbe\u7684\u70b9\u4e0d\u4fdd\u8bc1\u4e3aLCA\u3002\n\n------------\n\n# **~~\u500d\u589e\u6c42LCA\u7684~~**\n# **AC\u4ee3\u7801**\n\n**\uff08!\uff09**\n\u6ce8\u610f\uff0c\u672c\u7a0b\u5e8f\u4f7f\u7528\u4e86\u53cc\u5411\u94fe\u8868\uff0c\u94fe\u8868\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn1 500005\nusing namespace std;\nint n,m,s;\nint a,b;\nint u,v;\nint sum=0;\nint depth[maxn1];\nint f[maxn1][25];//f[n][m]\u8868\u793an\u4ee5\u4e0a2^m\u5c42\u7684\u7956\u5148\nint go[maxn1*2],first[maxn1*2],next[maxn1*2];//\u53cc\u5411\u94fe\u8868\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\nint maxx(int a,int b){\n\treturn a>b?a:b;\n}\nvoid read(int &x){//\u5feb\u8bfb\uff0c\u5404\u4f4d\u4e0e\u6211\u4e00\u6837\u7684\u849f\u84bb\u4eec\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\n\tchar temp;\n    //getchar()\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u7684ASCII\u7801\n    //\u82e5\u6587\u4ef6\u7ed3\u5c3e(End-Of-File)\u5219\u8fd4\u56de-1(EOF)\n    //\u4e14\u5c06\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u56de\u663e\u5230\u5c4f\u5e55\n    //\u5982\u7528\u6237\u5728\u6309\u56de\u8f66\u4e4b\u524d\u8f93\u5165\u4e86\u4e0d\u6b62\u4e00\u4e2a\u5b57\u7b26\n    //\u5176\u4ed6\u5b57\u7b26\u4f1a\u4fdd\u7559\u5728\u952e\u76d8\u7f13\u5b58\u533a\u4e2d\u7b49\u5f85\u540e\u7eedgetchar\u8c03\u7528\u8bfb\u53d6\n    //\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u7eed\u7684getchar\u8c03\u7528\u4e0d\u4f1a\u7b49\u5f85\u7528\u6237\u6309\u952e\uff0c\u800c\u76f4\u63a5\u8bfb\u53d6\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\n    //\u76f4\u5230\u7f13\u51b2\u533a\u4e2d\u7684\u5b57\u7b26\u8bfb\u5b8c\u540e\uff0c\u624d\u7b49\u5f85\u7528\u6237\u6309\u952e\u3002\n\twhile(temp=getchar()){\n\t\tif(temp>='0'&&temp<='9'){\n\t\t\tx=temp-'0';\n\t\t\tbreak;//\u4e00\u76f4\u8f93\u5165\u5230\u6570\u5b57\u4e3a\u6b62\n\t\t}\n\t}\n\twhile(temp=getchar()){\n\t\tif(temp<'0'||temp>'9'){\n\t\t\tbreak;\n\t\t}\n\t\tx=x*10+temp-'0';\n\t}\n\treturn ;\n}\nvoid init(){//\u521d\u59cb\u5316\u6570\u7ec4\n\tmemset(f,0,sizeof(f));\n\tmemset(go,0,sizeof(go));\n\tmemset(next,0,sizeof(next));\n\tmemset(first,0,sizeof(first));\n\tmemset(depth,0,sizeof(depth));\n\treturn ;\n}\nvoid add(int a,int b){//\u53cc\u94fe\u8868\u521d\u59cb\u5316\n\tsum++;\n\tnext[sum]=first[a];\n\tfirst[a]=sum;\n\tgo[sum]=b;\n\treturn ;\n}\nvoid preprocessing(int x,int fath){\n\tint i;\n\tdepth[x]=depth[fath]+1;//x\u7684\u6df1\u5ea6\u662f\u5176\u7236\u8282\u70b9\u6df1\u5ea6\u52a0\u4e00\n\tfor(i=1;(1<<i)<=depth[x];i++){\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t}\n\tfor(i=first[x];i;i=next[i]){\n\t\tif(go[i]!=fath){\n\t\t\tf[go[i]][0]=x;\n\t\t\tpreprocessing(go[i],x);\n\t\t}\n\t}\n\treturn ;\n}\nint lca(int x,int y){\n\tint i;\n\tif(depth[x]<depth[y]){\n\t\tswap(x,y);\n\t}\n\tfor(i=24;i>=0;i--){\n\t\tif(depth[f[x][i]]>=depth[y]){//\u5148\u8df3\u5230\u540c\u4e00\u5c42\n\t\t\tx=f[x][i];\n\t\t}\n\t\tif(x==y){\n\t\t\treturn x;\n\t\t}\n\t}\n\tfor(i=24;i>=0;i--){//\u6b64\u65f6x\uff0cy\u5df2\u8df3\u5230\u540c\u4e00\u5c42\n\t\tif(f[x][i]!=f[y][i]){\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\t}\n\treturn f[x][0];//x,y\u662f\u6df1\u5ea6\u6700\u6d45\u4e14\u4e0d\u540c\u7684\u70b9\uff0c\u5373LCA\u7684\u5b50\u8282\u70b9\n}\nint main(){\n\tint i;\n\tinit();\n\tread(n);\n\tread(m);\n\tread(s);\n\tfor(i=1;i<=n-1;i++){\n\t\tread(a);\n\t\tread(b);\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tpreprocessing(s,0);\n\tfor(i=1;i<=m;i++){\n\t\tread(u);\n\t\tread(v);\n\t\tprintf(\"%d\\n\",lca(u,v));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1548666193,
        "uid": 55121,
        "name": "\u0442\u044b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "## LCA\uff08Least Common Ancestors&\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\n\n\u849f\u84bb\u8868\u793a\u81ea\u5df1\u53ea\u4f1a\u500d\u589elca\n\n\u4e8e\u662f\u5c31\u6765\u8bb2\u4e00\u4e0b\n\nlca\u662f\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\n\nLCA\uff08Least Common Ancestors\uff09\uff0c\u5373\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u662f\u6307\u5728\u6709\u6839\u6811\u4e2d\uff0c\u627e\u51fa\u67d0\u4e24\u4e2a\u7ed3\u70b9u\u548cv\u6700\u8fd1\u7684\u516c\u5171\u7956\u5148\u3002\n\n\n\u5728\u4e00\u4e9b\u56fe\u7684\u9898\u76ee\u91cc\u4e5f\u5f88\u5e38\u7528\n\nlca\u5206\u6210\u4e24\u90e8\u5206\u2014\u2014\u2014\u2014\u9884\u5148\u6c42\u6df1\u5ea6\u548c\u7956\u5148&\u5bfb\u627e\u516c\u5171\u7956\u5148\n\n\n\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u505a\u5462\uff1f\uff1f\uff1f\n\n\n\n\u6211\u4eec\u5047\u8bbe\u6c42\u4e00\u9897\u6811\u4e0aa,b\u4e24\u70b9\u7684lca\n\n\u4e00\u4e2a\u663e\u7136\u7684\u60f3\u6cd5\n\n\u6211\u4eec\u8ba9a,b\u4e24\u70b9\u4e00\u76f4\u4e00\u6b65\u4e00\u6b65\u5411\u4e0a\u8d70\u76f4\u5230\u4e24\u70b9\u503c\u76f8\u7b49\n\n\u8fd9\u4e2a\u505a\u6cd5\u5f88\u7f8e\u5999,\u53ef\u662f\u5b83\u4f1aT\u98de\u6389233\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6709\u6ca1\u6709\u4e00\u4e2a\u66f4\u5feb\u7684\u65b9\u6cd5...\n\n\u53c8\u4e00\u4e2a\u663e\u7136\u7684\u60f3\u6cd5...\n\n\u6211\u4eec\u8003\u8651\u7528\u500d\u589e\uff0c\u8ba9\u8fd9\u4e24\u4e2a\u70b9\u4ee52^k\u7684\u8ddd\u79bb\u5411\u4e0a\u8d70\n\n\u5f88\u663e\u7136,\u8fd9\u6837\u4f1a\u5feb\u5f88\u591a\n\n\n\n\n\u7b97\u6cd5\u5b9e\u73b0\uff1a\n\n\n\u9996\u5148\u6211\u4eec\u8981\u9884\u5148\u7b97\u51fa\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u4e0e\u7956\u5148\n\n\tvoid makefather(int a,int b) //b\u662fa\u7684father \n\n\t{\n\n\t\tdeep[a]=deep[b]+1;\n\n\t\tf[a][0]=b;\n\n\t\tfor(int k=1;k<=22;k++)\n\n\t\t\tf[a][k]=f[f[a][k-1]][k-1]; \n\t\t\t//\u500d\u589e\u6838\u5fc3\n\t\t\t//\u8bb0\u5f55a\u7684\u4e0a2^k\u5c42\u7684\u7956\u5148\n\t\t\t//\u8fd9\u4e2a\u8f6c\u79fb\u7684\u610f\u601d\u849f\u84bb\u8868\u793a\u770b\u4e86\u597d\u4e45qwq\n\t\t\t//\u5176\u5b9e\u610f\u601d\u5c31\u662f\u4f60\u4e0a\u4e0a\u5c42\u7684\u7956\u5148\u5c31\u662f\u4f60\u4e0a\u5c42\u7684\u7956\u5148 \n\n\t}\n    \n\u7136\u540e\u500d\u589e\u6c42lca\n\n\t\n\tint lca(int a,int b) //\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148 \n\n\t{ \n\n\t\tif(deep[a]<deep[b]) swap(a,b); //\u8bbea\u7684\u6df1\u5ea6\u5927\u4e8eb \n\n\t\tint dis=deep[a]-deep[b];  //\u6c42\u51faa,b\u5c42\u95f4\u7684\u8ddd\u79bb \n\n\t\tfor(int k=22;k>=0;k--)  //\u8df3\u5230\u540c\u4e00\u5c42 \n\n\t\t{\n\n    \t\tint d=1<<k;\n    \t\tif(d<=dis)   \n   \t\t\t {\n     \t\t\t   b=f[b][k]; //\u628ab\u53d8\u6210\u5b83\u76842^k\u5904\u7684\u7956\u5148 \n        \t\t\tdis-=d;    //\u7ee7\u7eed\u500d\u589e\u6c42\u7956\u5148 \n    \t\t\t} \n\t\t}\n\n\t\tif(a==b) return a; \n   \t //\u7279\u5224\u4e00\u4e0b,\u5982\u679ca,b\u76f8\u540c,a\u5c31\u662fb\u7684\u7956\u5148 \n\n\t\tfor(int k=22;k>=0;k--) \n\n\t\t//\u5411\u4e0a\u500d\u589e\u627e\u7956\u5148,\u9700\u8981\u8df3\u5230\u7956\u5148\u7684\u4e0b\u4e00\u5c42 \n\n\t\t{\n   \t\t if(f[a][k]==f[b][k]) continue; \n    \n    //\u5982\u679c\u500d\u589e\u5230\u7956\u5148,\u8df3\u8fc7\u53bb \n   \n  \t\t \ta=f[a][k];  \n   \t\t\tb=f[b][k];\n   \n\t\t} \n\n\t\treturn f[a][0]; //\u8fd4\u56de\u516c\u5171\u7956\u5148 \n\n}\n\n\n\n\u849f\u84bbBrynhildr\u53d1\u51fa\u81ea\u5df1\u5f31\u5f31\u7684\u4ee3\u7801....\n\n```c\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 500000+9; \nint n,m,s,x,y,a,b,tot=1;\nint f[maxn][23];\nint deep[maxn];\nint head[maxn];\n\nstruct Edge\n{\n\tint from;\n\tint to;\n\tint next;\n} edge[maxn*2];\n\ninline void addedge(int u,int v)\n{\n\tedge[tot].from=u;\n\tedge[tot].to=v;\n\tedge[tot].next=head[u];\n\thead[u]=tot++;\n}\n\ninline void makefather(int a,int b)\n{\n    deep[a]=deep[b]+1;\n    f[a][0]=b;\n    for(int k=1;k<=22;k++)\n    {\n        f[a][k]=f[f[a][k-1]][k-1];\n    }\n    for(int k=head[a];k;k=edge[k].next)\n    {\n    \n        int q=edge[k].to;\n        if(q!=b)\n        makefather(q,a);\n    }\n} \n\ninline int lca(int a,int b)\n{\n    if(deep[a]<deep[b])swap(a,b);\n    int d=deep[a]-deep[b];\n    for(int k=22;k>=0;k--)\n    {\n        int v=1<<k;\n        if(v<=d)\n        {\n            a=f[a][k];\n            d-=v;\n        }\n    }\n    if(a==b)return a;\n    for(int k=22;k>=0;k--)\n    {\n        if(f[a][k]==f[b][k])continue;\n        a=f[a][k];\n        b=f[b][k];\n    }\n    return f[a][0];\n}\nint main()\n{\n    scanf(\"%d %d %d\",&n,&m,&s);\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n       \taddedge(x,y);\n       \taddedge(y,x);\n    }\n    makefather(s,0);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&a,&b);\n        printf(\"%d\\n\",lca(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1533700377,
        "uid": 87542,
        "name": "Brynhildr",
        "ccfLevel": 3,
        "title": "\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09"
    },
    {
        "content": "//\u5bf9\u4e8e\u8bb8\u591a\u65b0\u624b\u540c\u5b66\uff0c\u53ef\u80fd\u4e0a\u6765\u5f88\u8ff7\u832b\u8fd9\u4e2a\u500d\u589e\u7b97\u6cd5\uff0c\u6211\u4eec\u8fd9\u91cc\u4e5f\u662f\uff1b\n\n\n//\u6240\u4ee5\u6211\u6253\u7b97\u7ed9\u4f60\u4eec\u5949\u4e0a\u4e00\u4e2a70\u5206\u7684\u4ee3\u7801\uff0c\u56e0\u4e3aac\u4ee3\u7801\u5b9e\u5728\u662f\u592a\u591a\u4e86\uff0c\u5728\u8003\u8bd5\u5f53\u4e2d\u771f\u7684\u5fd8\u6389\u4e86\u500d\u589e\uff0c\u53c8\u4f1a\u662f\u5982\u4f55\u6700\u5927\u7684\u504f\u5206\uff1b\n\n\n\n\n\n```cpp\n//\u6bd4\u8f83\u9002\u5408\u50cf\u6211\u8fd9\u6837\u7684\u5c0f\u849f\u84bb\u53bb\u7406\u89e3\n#include<iostream>\n#include<cstring>\n#define max 500004\nusing namespace std;\nint n,m,root,deep[max],vis[max],head[max],node,f[max];\nstruct Node{\n    int v,next;\n}e[max*2];//\u8fd9\u4e2a\u90bb\u63a5\u8868\u6211\u76f8\u4fe1\u5927\u90e8\u5206\u4eba\u8fd8\u662f\u4f1a\u7684\uff0c\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u770b\u770b\u6211\u9898\u89e3\u91ccspfa\u91cc\u9762\u7684\u8be6\u7ec6\u8bb2\u89e3\uff0c\u6216\u8005\u79c1\u4fe1\u6211\uff1b\nvoid add_edge(int src,int to)\n{\n    e[node].v=to;\n    e[node].next=head[src];\n    head[src]=node++;//\u672c\u4eba\u8fd8\u662f\u6bd4\u8f83\u559c\u6b22node++\uff0c\u597d\u591a\u4eba\u7528++node\uff0c\u770b\u4e2a\u4eba\u4e60\u60ef\uff1b\n}\nvoid build_tree(int root,int depth)//\u5efa\u6811\u662f\u4e00\u5b9a\u7684\uff0c\u8fd9\u91cc\u8fd8\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\uff0c\u5f53\u6b64\u524d\u6240\u7ad9\u5728\u7684\u70b9\u6709\u4e0b\u4e00\u4e2a\u8fde\u63a5\u7684\u70b9\u7684\u65f6\u5019\uff0cdepth+1\uff0c\u7136\u540e\u7ee7\u7eed\u9012\u5f52\u4e0b\u4e00\u4e2a\u70b9\uff1b\n{\n    deep[root]=depth;\n    vis[root]=1;\n    for(int i=head[root];i!=-1;i=e[i].next)    \n    {\n        if(vis[e[i].v]!=0)         continue;\n        f[e[i].v]=root;\n        build_tree(e[i].v,depth+1);\n    }\n}\nint LCA(int u,int v)//\u8fd9\u91cc\u5c31\u662f\u66b4\u529b\u7248\u7684LCA\uff0c\u76f8\u5bf9\u500d\u589e\u8981\u7b80\u5355\u7684\u591a\uff0c\u8bfb\u4e00\u4e0b\u5c31\u77e5\u9053\u4ec0\u4e48\u610f\u601d\u4e86\uff1b\n{\n    while(deep[u]>deep[v])    u=f[u];//\u5148\u4fdd\u8bc1u\u548cv\u5728\u540c\u4e00\u6df1\u5ea6\n    while(deep[v]>deep[u])    v=f[v];\n    while(u!=v)                                   //\u7136\u540e\u4e00\u8d77\u5f80\u4e0a\u627e\u7956\u5148\n        {\n            u=f[u];\n            v=f[v];\n        }\n    return u;//\u8fd4\u56de\u53bbu\uff0cv\u90fd\u662f\u4e00\u6837\u7684\n}\nint main()\n{\n    cin>>n>>m>>root;\n    memset(head,-1,sizeof(head));\n    for(int i=1;i<n;i++)\n        {\n            int a,b,c;\n            cin>>a>>b;\n            add_edge(a,b);\n            add_edge(b,a);\n        }\n    build_tree(root,1);\n    int x,y;\n    for(int i=1;i<=m;i++)\n    {\n        cin>>x>>y;\n        cout<<LCA(x,y)<<endl;\n    }\n    return 0;\n}\n//\u4e0b\u9762\uff0c\u5949\u4e0a\u4e00\u6bb5ac\u4ee3\u7801\uff0cby whiteying\u5927\u4f6c\uff0c\u4f9b\u5927\u5bb6\u5bf9\u6bd4\u4e00\u4e0b\u3002\n#include<iostream>\n#include<cstdio>\n#define MAXN 500050*2\nusing namespace std;\nint N,M,S,cur,father[MAXN][25],deep[MAXN],head[MAXN],maxh,m,log[500005];\nstruct liin\n{\n    int to,next;\n}a[MAXN];\nvoid read(int &x){\n    char c=getchar();x=0;    \n    while(!isdigit(c))c=getchar();\n    while(isdigit(c))x=x*10+c-'0',c=getchar();\n}\nvoid dfs(int k,int j)\n{\n    father[j][0]=k;\n    for(int i=head[j];i;i=a[i].next)\n        if(a[i].to!=k)\n        {\n            deep[a[i].to]=deep[j]+1;\n            dfs(j,a[i].to);\n        }\n}\nint lca(int a,int b)\n{\n    if(deep[a]<deep[b])\n        swap(a,b);\n    for(int i = 19;i >= 0; i--)\n          if(deep[a] >= deep[b] + (1<<i))\n             a=father[a][i];\n    if(a==b)\n        return a;\n    for(int i=19;i>=0;i--)\n        if(father[a][i]!=father[b][i])\n        {\n            a=father[a][i];\n            b=father[b][i];\n           }\n    return father[a][0];\n}\nvoid add(int from,int to)\n{\n    a[++cur].to=to;\n    a[cur].next=head[from];\n    head[from]=cur;\n}\nint main()\n{\n    int i,x,y;\n    read(N);\n    read(M);\n    read(S);\n    for(i=1;i<=N-1;i++)\n    {\n        read(x);\n        read(y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs(S,S);\n    for(int j=1;j<=19;j++)\n        for(int i=1;i<=N;i++)\n            if(father[i][j-1])\n                father[i][j]=father[father[i][j-1]][j-1];\n    for(int i=1;i<=M;i++)\n    {\n        int a,b;\n        read(a);\n        read(b);\n        printf(\"%d\\n\",lca(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1510048002,
        "uid": 35464,
        "name": "Leelzh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "## \u6b63\u786e\u4f7f\u7528 vector \u6765\u5b58\u56fe\u8dd1 LCA\n\n\u4f17\u6240\u5468\u77e5 vector \u5e38\u6570\u5927\u5728\u5185\u5b58\u5206\u914d\u500d\u589e\uff0c\u56e0\u6b64reserve\u662f\u5fc5\u8981\u7684\uff0c\u9650\u5b9a\u5176\u5927\u5c0f\u4e3an+1\u800c\u975eMAXN\u4e5f\u662f\u5fc5\u8981\u7684\u3002\u5b9e\u9a8c\u4e0e\u7ecf\u9a8c\u544a\u8bc9\u6211\u4eec\u521d\u59cb\u628avetcor g[i].reserve(3)\u662f\u597d\u7684\uff0c\u591a\u6570\u7ed3\u70b9\u8fb9\u6570\u5927\u4e8e\u7b49\u4e8e\u6ee1\u4e8c\u53c9\u6811\uff0c\u4ee53\u4e3a\u5e95\u52a0\u500d\u53ef\u4ee5\u6709\u6548\u9632\u6b62\u7a7a\u95f4\u88ab\u6d6a\u8d39\u3002\n\n<https://www.luogu.org/record/show?rid=4302396>\n\n\u8fd9\u6837\u8dd1\u500d\u589e LCA \u4f1a\u8dd1\u52302300ms\u4ee5\u5185\uff0c\u56e0\u4e3a\u6211\u5b58\u4e0b\u4e86\u8fb9\u6743\u4e3a1\u5e76\u4e14\u7d2f\u52a0\uff0c\u5728\u672c\u9898\u4e2d\u662f\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u7684\uff0c\u4f46\u6a21\u677f\u5e94\u5177\u5907\u901a\u7528\u6027\u56e0\u800c\u4fdd\u7559\u3002\n\n\u52a0\u5165\u8bfb\u5165\u4f18\u5316\uff0c\u628a\u8fb9\u6743\u53bb\u6389 \u6216\u8bb8 \u53ef\u4ee5\u5361\u4e00\u4e0b\u5e38\u6570\u52302000ms\u4ee5\u5185\u3002\n\n\u8fd9\u5df2\u7ecf\u4f18\u4e8e\u9898\u89e3\u4e2d\u597d\u591a\u5199\u4e86\u94fe\u8868\u5b58\u8fb9\u4f46\u5199\u7684\u4e0d\u662f\u592a\u7cbe\u5999\u7684LCA\u4e86\uff0c\u4e5f\u6ca1\u6709\u592a\u957f\uff0c\u6ca1\u6709\u538b\u884c70\u884c\u8fd8\u7b97\u662f\u53ca\u683c\u6c34\u5e73\uff0c\u968f\u4fbf\u538b\u4e00\u4e0b\u6216\u8005\u62ec\u53f7\u5e76\u8fdb\u4e0a\u4e00\u884c\u5c31\u80fd\u523050-60\u884c\u3002\n\n**\u4e0b\u9762\u662f\u500d\u589e\u7684\u6a21\u677f tarjan\u89c1** <https://chiang.work/lca-template.html>\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n#define fi first\n#define sc second\nconst int MAXN = 500005;\ntypedef pair<int,int> P;\nconst int MAXLG = 21;\nint dep[MAXN], dis[MAXN],anc[MAXN][MAXLG];//anc \u70b9i\u7684\u7b2c2^j\u7684\u7956\u5148 \nint log2n,root;\nvoid DFS(int u,int pre,vector<P> *g)\n{\n    for(int i=1;i<=log2n;i++)\n    {\n        anc[u][i] = anc[anc[u][i-1]][i-1];\n        if(!anc[u][i]) break;\n    }\n    int siz = g[u].size();\n    for(int i=0;i<siz;++i)\n    {\n        P e = g[u][i];\n        if(e.fi != anc[u][0])\n        {\n            dis[e.fi] = dis[u] + e.sc;\n            dep[e.fi] = dep[u] + 1;\n            anc[e.fi][0] = u;\n            DFS(e.fi,u,g);\n        }\n    }\n}\nint LCA(int u,int v)\n{\n    if(dep[u] > dep[v]) swap(u,v);\n    for(int i=log2n;i>=0;--i)\n        if(dep[anc[v][i]] >= dep[u])\n            v = anc[v][i];\n    for(int i=log2n;i>=0;--i)\n        if(anc[u][i] != anc[v][i])\n            u = anc[u][i],v = anc[v][i];\n    if(u!=v) u = anc[u][0];\n    return u;\n}\n\nint main()\n{\n    int n,u,v,m;\n    scanf(\"%d%d%d\",&n,&m,&root);\n    vector<P> g[n+1];\n    for(int i=0;i<=n;++i)\n        g[i].reserve(3);\n    log2n = log(1.0*n) / log(2.0) + 0.5;\n    for(int i=1;i<=n-1;++i)\n    {\n        scanf(\"%d%d\",&u,&v);\n        g[u].push_back(P(v,1));\n        g[v].push_back(P(u,1));\n    }\n    dep[root] = 1;\n    dis[root] = 0;\n    dep[0] = -1;\n    DFS(root,-1,g);\n    while(m--)\n    {\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",LCA(u,v));\n    }\n    return 0;\n}\n```",
        "postTime": 1509926493,
        "uid": 18861,
        "name": "joseph_cheung",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u542c\u697c\u4e0b\u8bf4\u4e3b\u8981\u65b9\u6cd5\u5c31\u4e09\u4e2a\uff0c\u6211\u611f\u5230\u6df1\u6df1\u7684\u4e0d\u670d\u3002\n\n\u697c\u4e0b\u4f3c\u4e4e\u63d0\u5230\u4e86\u6811\u5256\uff0c\u90a3\u4e48\u65e2\u7136\u6811\u5256\u90fd\u80fd\u505a\uff0c\u6211\u5927LinkCutTree\u5c31\u4e0d\u884c\u4e86\u5417\uff1f\n\n\u5b9e\u9645\u4e0a\uff0c\u4e4b\u524d\u53ef\u4ee5\u5728\u8ba8\u8bba\u533a\u627e\u5230\u6211\u7684\u5e16\u5b50\uff0c\u6211\u53d1\u73b0LCT\u5c45\u7136T\u6389\u4e86\uff0c\u6211\u4ee5\u4e3a\u662f\u56e0\u4e3a\u4ed6\u7684\u590d\u6742\u5ea6\u662f$O(logn^2)$,\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3aLCT\u7531\u4e8e\u9891\u7e41\u7684access\u64cd\u4f5c\u5bfc\u81f4\u5e38\u6570\u5de8\u5927\u3002\n\n\u5bf9\u4e8e\u6c42LCA\uff0c\u6211\u4eec\u53ea\u8981\u8bb0\u5f55access\u6700\u540e\u7ecf\u8fc7\u7684\u5b9e\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include<bits/stdc++.h>\n#define N 500010\nusing namespace std;\nint n,m;\ninline int read(){\n    int f=1,x=0;char ch;\n    do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n    do{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n    return f*x;\n}\nstruct Link_Cut_Tree\n{\n    int c[N][2],fa[N],sumv[N],val[N],q[N],top[N];\n    bool rev[N];\n    void pushup(int x)\n    {\n        int l=c[x][0],r=c[x][1];sumv[x]=sumv[l]+sumv[r]+val[x];\n    }\n    void pushdown(int x)\n    {\n        int l=c[x][0],r=c[x][1];\n        if(rev[x])\n        {\n            rev[x]^=1;rev[r]^=1;rev[l]^=1;\n            swap(c[x][1],c[x][0]);\n        }\n    }\n    bool isroot(int x){return c[fa[x]][0]!=x&&c[fa[x]][1]!=x;}\n    void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],l,r;\n        l=(c[y][1]==x);r=l^1;\n        if(!isroot(y))c[z][c[z][1]==y]=x;\n        fa[c[x][r]]=y;fa[y]=x;fa[x]=z;\n        c[y][l]=c[x][r];c[x][r]=y;\n        pushup(y);pushup(x);\n    }    \n    void splay(int x)\n    {\n        int top=0;q[++top]=x;\n        for(int i=x;!isroot(i);i=fa[i])q[++top]=fa[i];\n        while(top)pushdown(q[top--]);\n        while(!isroot(x))\n        {\n            int y=fa[x],z=fa[y];\n            if(!isroot(y))\n            {\n            if(c[y][0]==x^c[z][0]==y)rotate(x);else rotate(y);\n            }\n        rotate(x);\n        }\n    }\n    int access(int x){int last=0;\n        for(int t=0;x;t=x,x=fa[x])splay(x),c[x][1]=t,last=x;pushup(x);\n        return last;}\n    void makeroot(int x){access(x);splay(x);rev[x]^=1;}\n    void link(int x,int y){makeroot(x);fa[x]=y;}\n    void split(int x,int y){makeroot(x);access(y);splay(y);}\n    void cut(int x,int y){split(x,y);c[y][0]=fa[x]=0;}\n    int find(int x){access(x);splay(x);int y=x;while(c[y][0])y=c[y][0];return y;}\n}T;\nint main(){\n    int n=read(),m=read(),r=read();\n    for(int i=1;i<n;i++){\n        int u=read(),v=read();\n        T.link(u,v);\n    }\n    T.makeroot(r);\n    while(m--){\n        int u=read(),v=read();\n        T.access(u);int ans=T.access(v);\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1490362512,
        "uid": 15143,
        "name": "Acorasick",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u500d\u589e\u7b97\u6cd5\uff0c\u6a21\u677f\u7684\u8bdd\u561b\u3002\u4ee3\u7801\u4e00\u5b9a\u8981\u4f18\u7f8e\u4f18\u7f8e\u4f18\u7f8e\uff01\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nconst int maxx = 500000 + 100;\nint head[maxx],depth[maxx];\nint n,m,x,y,root,num;\nint grand[maxx][20+2];\nbool done[maxx];\nstruct Edge{\n    int next;\n    int to;\n}Edges[maxx<<1];\ninline int Read(){\n    int x=0,f=1;char c=getchar();\n    while(c>'9'||c<'0') {if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') {x=x*10+c-'0'; c=getchar();}\n    return x*f;\n}\nvoid Add(int x,int y){\n    Edges[++num].to=y;\n    Edges[num].next=head[x];\n    head[x]=num;\n}\nvoid Dfs(int x){\n    done[x]=true;\n    for(int i=1;i<=20;i++){\n        if(depth[x] < (1<<i)) break;\n        grand[x][i]=grand[grand[x][i-1]][i-1];\n    }\n    for(int i=head[x];i;i=Edges[i].next){\n        int now=Edges[i].to;\n        if(done[now]) continue;\n        depth[now]=depth[x]+1;\n        grand[now][0]=x;\n        Dfs(now);\n    }\n}\nvoid Lca(int x,int y){\n    if(depth[x]>depth[y]) swap(x,y);\n    int d=depth[y]-depth[x];\n    for(int i=0;i<=20;i++){\n        if((1<<i) & d)\n        y=grand[y][i];\n    }\n    for(int i=20;i>=0;i--){\n        if(grand[x][i]!=grand[y][i]){\n            x=grand[x][i];\n            y=grand[y][i];\n        }\n    }\n    printf(\"%d\\n\",x==y? x:grand[x][0]);\n}\nint main(){\n    n=Read();m=Read();root=Read();\n    for(int i=1;i<n;i++){\n        x=Read();y=Read();\n        Add(x,y);\n        Add(y,x);\n    }\n    Dfs(root);\n    while( m-- ){\n        x=Read();y=Read();\n        Lca(x,y);\n    }\n    return 0;\n}\n```",
        "postTime": 1485315818,
        "uid": 21673,
        "name": "Sor4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "# \u8fd9\u662f\u4e00\u4e2a\u627e\u4e0d\u540c\u6e38\u620f\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint depth[500001],fa[500001][22],lg[500001],head[500001];\nint cnt;\nstruct rec\n{\n    int to;\n    int nxt;\n}e[1000001];\nvoid add(int x,int y)\n{\n    e[++cnt].to=y; \n    e[cnt].nxt=head[x];\n    head[x]=cnt;\n}\nvoid dfs(int f,int fath)\n{\n    depth[f]=depth[fath]+1;\n    fa[f][0]=fath;\n    for(int i=1;(1<<i)<=depth[f];i++)\n    \tfa[f][i]=fa[fa[f][i-1]][i-1];\n    for(int i=head[f];i;i=e[i].nxt)\n    \tif(e[i].to!=fath)\n        \tdfs(e[i].to,f);\n}\nint main()\n{\n    int n,m,s;\n    int x,y;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=n-1;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    dfs(s,0);\n    for(int i=1;i<=n;i++)\n      \tlg[i]=lg[i-1]+(1<<lg[i-1]==i);\n    while(m--)\n    {\n        scanf(\"%d%d\",&x,&y);\n        if(depth[x]<depth[y])\n          \tswap(x,y);\n        while(depth[x]>depth[y])\n          \tx=fa[x][lg[depth[x]-depth[y]]-1];\n        if(x==y)\n        {\n            cout<<x<<endl;\n            continue;\n        }\n        for(int k=lg[depth[x]]-1;k>=0;k--)\n          \tif(fa[x][k]!=fa[y][k])\n          \t{\n            \tx=fa[x][k];\n\t\t\t\ty=fa[y][k];\n          \t}\n        cout<<fa[x][0]<<endl;\n    }\n    return 0;\n}\n```\n### 70\u5206\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint depth[500001],fa[500001][22],lg[500001],head[500001];\nint cnt;\nstruct rec\n{\n    int to;\n    int nxt;\n}e[1000001];\nvoid add(int x,int y)\n{\n    e[++cnt].to=y; \n    e[cnt].nxt=head[x];\n    head[x]=cnt;\n}\nvoid dfs(int f,int fath)\n{\n    depth[f]=depth[fath]+1;\n    fa[f][0]=fath;\n    for(int i=1;(1<<i)<=depth[f];i++)\n    \tfa[f][i]=fa[fa[f][i-1]][i-1];\n    for(int i=head[f];i;i=e[i].nxt)\n    \tif(e[i].to!=fath)\n        \tdfs(e[i].to,f);\n}\nint main()\n{\n\tint n,m,s;\n\tint x,y;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    for(int i=1;i<=n-1;i++)\n    {\n\t\tscanf(\"%d%d\",&x,&y);\n        add(x,y);\n\t\tadd(y,x);\n    }\n    dfs(s,0);\n    for(int i=1;i<=n;i++)\n      \tlg[i]=lg[i-1]+(1<<lg[i-1]==i);\n    while(m--)\n    {\n\t\tscanf(\"%d%d\",&x,&y);\n\t    if(depth[x]<depth[y])\n\t      \tswap(x,y);\n\t    while(depth[x]>depth[y])\n\t      \tx=fa[x][lg[depth[x]-depth[y]]-1];\n\t    if(x==y)\n\t\t{\n\t\t\tprintf(\"%d\\n\",x);\n\t\t\tcontinue;\n\t\t}\n\t    for(int k=lg[depth[x]]-1;k>=0;k--)\n\t      \tif(fa[x][k]!=fa[y][k])\n\t      \t{\n\t        \tx=fa[x][k];\n\t\t\t\ty=fa[y][k];\n\t      \t}\n\t    printf(\"%d\\n\",fa[x][0]);\n    }\n    return 0;\n}\n```\n### \u6ee1\u5206\n# **\u8c28\u4ee5\u6b64\u7bc7\u9898\u89e3\u8868\u8fbe\uff0c\u6b64\u9898\u5361printf\uff01\uff01\uff01**",
        "postTime": 1551361076,
        "uid": 93488,
        "name": "Porsche",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u500d\u589eLCA,~~\u4e0d\u8fc7\u672c\u4eba\u5e76\u6ca1\u6709\u7528\u8fd9\u79cd\u7b97\u6cd5\uff0c\u50cf\u500d\u589eLCA\uff0c\u7528\u6811\u5256\u505a\u5b8c\u5168\u6ca1\u6709\u95ee\u9898QAQ~~\n\n\u7b80\u5355\u8bf4\u4e00\u4e0b\u6811\u5256\u7684\u601d\u8def\n\n\u5148\u5256\u6210\u8f7b\u91cd\u94fe\uff0c\u6211\u4eec\u5b9a\u4e49f[x]\u4e3ax\u7684\u7236\u4eb2\u8282\u70b9\uff0csi[x]\u4e3a\u8282\u70b9x\u7684\u5b50\u6811\u5927\u5c0f\n\n\u7b2c\u4e00\u904d\u7684\u6df1\u641c\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u5e76\u4e14\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u91cd\u513f\u5b50\uff08if(si[y]>=si[son[x]]) son[x]=y\uff09\n\n\u7b2c\u4e8c\u904d\u6df1\u641c\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u6240\u80fd\u591f\u5230\u8fbe\u7684\u6700\u9876\u7aef\u7684\u70b9\uff0c\u8bb0\u4e3atop[x],\uff08\u5373\u8be5\u8282\u70b9\u6240\u5728\u94fe\u4e0a\u6700\u9876\u7aef\u7684\u70b9\uff09\n\n\u7136\u540e\u6211\u4eec\u6bcf\u6b21\u6c42LCA\u65f6\u5c31\u5224\u65ad\u4e24\u70b9\u662f\u5426\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u5982\u679c\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u8f93\u51fa\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5373\u53ef\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u8ba9\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u5230\u8fbe\u4ed6\u91cd\u94fe\u9876\u7aef\u7684top[x]\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u4e24\u70b9\u5728\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u8f93\u51fa\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9QAQ\n\n~~\u8fd9\u9053\u9898\u7528\u6765\u7ec3\u7ec3\u6811\u94fe\u5256\u5206\u4e5f\u4e0d\u9519\uff0c\u5c24\u5176\u662f\u60f3\u8981\u638c\u63e1\u6811\u5256\u7684QAQ~~\n\n\n\n------------\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\nusing namespace std;\n#define rg register//\u5361\u5e38\n#define swap(a,b) s=a,a=b,b=s\nconst int N=5e5+5;\nint n,m,s,a,b,h[N<<1],cnt,f[N],dep[N],si[N],son[N],top[N];\nstruct edge{\n    int to,next;\n}e[N<<1];//\u4f4d\u8fd0\u7b97\u5361\u5e38\ninline int read()\n{\n    char ch=getchar();int x=0;\n    while(!isdigit(ch)) ch=getchar();\n    while(isdigit(ch)){x=(x<<1)+(x<<3)+ch-'0';ch=getchar();}\n    return x;\n}//inline\u5361\u5e38\ninline void add(int u,int v)//\u524d\u5411\u661f\u5efa\u8fb9\n{\n    e[++cnt].to=v;\n    e[cnt].next=h[u];\n    h[u]=cnt;\n}\ninline void dfs1(int x)\n{\n    si[x]=1;\n    dep[x]=dep[f[x]]+1;//\u6df1\u5ea6\u662f\u5176\u7236\u4eb2\u8282\u70b9\u6df1\u5ea6\u52a01\n    for(rg int i=h[x];~i;i=e[i].next){\n        int y=e[i].to;\n        if(f[x]^y){\n            f[y]=x;//\u5982\u679cx\u7684\u7236\u4eb2\u8282\u70b9\u4e0d\u662fy\uff0c\u90a3\u4e48f[y]=x\n            dfs1(y);\n            si[x]+=si[y];\n            if(si[y]>=si[son[x]]) son[x]=y;//\u6c42\u91cd\u513f\u5b50\n        }\n    }\n}\ninline void dfs2(int x)\n{\n    top[x]=!(son[f[x]]^x)?top[f[x]]:x;//\u6c42top[x]\n    if(son[x]) dfs2(son[x]);\n    for(rg int i=h[x];~i;i=e[i].next){\n        int y=e[i].to;\n        if(f[x]^y&&son[x]^y) dfs2(y);\n    }\n}\ninline int LCA(int x,int y)\n{\n    int fx=top[x],fy=top[y];\n    while(fx^fy){\n        if(dep[fx]<dep[fy]) swap(fx,fy),swap(x,y);\n        x=f[fx];fx=top[x];\n    }\n    if(dep[x]>dep[y]) swap(x,y);\n    return x;\n}\nint main(void)\n{\n    memset(h,-1,sizeof(h));\n    n=read();m=read();s=read();\n    for(rg int i=1;i<n;++i) a=read(),b=read(),add(a,b),add(b,a);//\u672c\u4eba\u63a8\u8350++i\uff0c\u4fbf\u4e8e\u5361\u5e38\n    dfs1(s);dfs2(s);\n    while(m--){\n        a=read();b=read();\n        printf(\"%d\\n\",LCA(a,b));\n    }\n}\n```",
        "postTime": 1548984921,
        "uid": 84726,
        "name": "sp201613",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\n# [P3379 LCA](https://www.luogu.org/problemnew/show/P3379)\n\n\n\n------------\n\n\n\n# $ 1:$\u8717\u725b\u722c\u5f0f\n\n```c++\n\nvoid dfs(int u,int fa) {\n    f[u]=fa;//\u9884\u5904\u7406father\n    for(int i=head[u]; i; i=e[i].nxt) if(e[i].v!=fa) {\n            int &w=e[i].w,&v=e[i].v;\n            dis[v]=dis[u]+w;\n            h[v]=h[u]+1;//\u9884\u5904\u7406\u6df1\u5ea6\n            dfs(v,u);\n        }\n}\nint LCA(int x,int y) {\n    while(h[x]<h[y])y=f[y];\n    while(h[x]>h[y])x=f[x];//\u79fb\u52a8\u81f3\u540c\u4e00\u6df1\u5ea6\n    while(x!=y) x=f[x],y=f[y];\n    return x;\n}\n\n\n```\n#### \u590d\u6742\u5ea6:$O( log(n) )$ ~ $O(n)$\n#### ~~\u5f53\u7136,\u8fd9\u4e1c\u897f\u975e\u5e38\u597d\u5361\uff0c\u4e00\u5361\u5c31\u51c9$->$~~ $O(n)$\n#### \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u79cd\u66b4\u529b\u7b97\u6cd5\uff0c\u6570\u636e\u8fbe\u52305e5\u65f6\u7edd\u5bf9\u4f1aT(\u4e0d\u5361\u4f60\u4e5f\u4f1a)...\n\n# $2:$ \u500d\u589e\u5927\u6cd5\n### \u590d\u6742\u5ea6 \u9884\u5904\u7406:$O(nlog(n))$ \u67e5\u8be2:$O(log(n))$,\u6709\u5e38\u6570\n## \u7b97\u6cd5\u6838\u5fc3:\n### $1.$ \u9884\u5904\u7406$fa[i][k]$:i\u4e0a\u7684\u7b2c$2^k$\u4e2a\u7956\u5148(\u5982\u679c\u6ca1\u6709,\u8bb0\u4e3a$-1$)\n### --- \u9884\u5904\u7406\u65b9\u6cd5 $O(n log(log(n)))$\n### --- \u9012\u63a8\u5f0f  $fa[i][k]=fa[fa[i][k-1][k-1]$\n### --- \u5916\u5c42\u63a5k\u7684\u5faa\u73af,\u5185\u5c42\u63a5i\u7684\u5faa\u73af\n\n```c++\n\nvoid dfs(int u,int f) {\n\tfa[u][0]=f;\n\tfor(reg int i=head[u]; i; i=nxt[i]) if(to[i]!=f) {\n\t\t\treg int &v=to[i],&w=x[i];\n\t\t\th[v]=h[u]+1;\n\t\t\tdis[v]=dis[u]+w;\n\t\t\tdfs(v,u);\n\t\t}\n}\nvoid LCA_init() {\n\tdfs(1,-1);\n\tfor(reg int j=0; j+1<L; j++)\n\t\tfor(reg int i=1; i<=n; i++) {\n\t\t\tif(fa[i][j]<0)fa[i][j+1]=-1;\n\t\t\telse fa[i][j+1]=fa[f[i][j]][j];\n\t\t}\n}\n\n```\n### $2.$\u901a\u8fc7\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236\u679a\u4e3e\u7684\u65b9\u6cd5\u627e\u7238\u7238,\u5176\u539f\u7406\u4e0e\u8717\u725b\u722c\u5f0f\u7c7b\u4f3c\n### --- $step1:$\u5c06x,y\u79fb\u52a8\u5230\u540c\u4e00\u6df1\u5ea6\n### --- $step2:$\u679a\u4e3ex,y\u7684\u4e0a\u5c42\u7956\u5148,\u9632\u6b62\u8fc7\u5ea6\u79fb\u52a8,\u5012\u7740\u5faa\u73af\n```c++\nint LCA(int x,int y) {\n\tif(h[x]>h[y])swap(x,y);\n\tint del=h[y]-h[x];\n\tfor(int i=0; (1<<i)<=del; i++)\n    \tif(del&(1<<i))\n    \t\ty=f[y][i];\n\tif(x==y)return x;//\u8fd9\u53e5\u8bdd\u5f88\u5173\u952e,\u5f88\u5bb9\u6613\u5fd8,\u4e0d\u52a0\u4f1a\u8fc7\u5ea6\n\tfor(int i=ceil(log(h[x])); i>=0; i--)\n    \tif(fa[x][i]!=fa[y][i])\n    \t\tx=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\n```\n### \u4f18\u5316$1:$\u9884\u5904\u7406 $log[N] $\u6570\u7ec4\n```c++\nfor(int i=2;i<=n;i++)\n\tLog[i]=Log[i-1]+((1<<Log[i-1]+1)==i);\n```\n### \u4f18\u5316$2:$ $dfs$\u540c\u65f6\u9884\u5904\u7406 $f[i][k]$ \u6570\u7ec4\n### ----\u56e0\u4e3a\u6df1\u641c\u65f6\u6839\u7684\u6570\u7ec4\u4f1a\u5148\u88ab\u5904\u7406,\u4e0d\u4f1a\u8c03\u7528\u5230\u672a\u5904\u7406\u7684\u533a\u57df\n```c++\nvoid dfs(int u,int f) {\n\tfa[u][0]=f;\n\tfor(int j=1;j<L;j++)\n\t\tif(fa[u][j-1]<0)fa[u][j]=-1;\n\t\telse fa[u][j]=fa[fa[u][j-1]][j-1];\n\tfor(reg int i=head[u]; i; i=nxt[i]) if(to[i]!=f) {\n\t\t\treg int &v=to[i],&w=x[i];\n\t\t\th[v]=h[u]+1;\n\t\t\tdis[v]=dis[u]+w;\n\t\t\tdfs(v,u);\n\t\t}\n}\n```\n\n### \u6574\u4f53\u4ee3\u7801$Show$\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include <algorithm>\n#include<cmath>\nusing namespace std;\n#define reg register\nconst int N=5e5+10,LN=23;\nint n,m,L,st;\nint f[N][LN],h[N];\nint to[N<<1],head[N<<1],nxt[N<<1],cnt,Log[N];\n#define add(u,v) nxt[++cnt]=head[u],head[u]=cnt,to[head[u]]=v\nint rd() {\n\tint s=0;\n\tchar x=getchar();\n\twhile(x<'0'||x>'9')x=getchar();\n\twhile(x>='0'&&x<='9')s=(s<<1)+(s<<3)+(x^'0'),x=getchar();\n\treturn s;\n}\n\nvoid dfs(int u,int fa) {\n\tf[u][0]=fa;\n\tfor(int j=1;j<L;j++)\n\t\tif(f[u][j-1]<0)f[u][j]=-1;\n\t\telse f[u][j]=f[f[u][j-1]][j-1];\n\tfor(int i=head[u]; i; i=nxt[i]) if(to[i]!=fa) {\n\t\t\treg int &v=to[i];\n\t\t\th[v]=h[u]+1;\n\t\t\tdfs(v,u);\n\t\t}\n}\nvoid LCA_init() {\n\tdfs(st,-1);\n\tfor(int i=2;i<=n;i++)\n    \tLog[i]=Log[i-1]+((1<<Log[i-1]+1)==i);\n}\nint LCA(int x,int y) {\n\tif(h[x]>h[y])swap(x,y);\n\tint del=h[y]-h[x];\n\tfor(int i=0; (1<<i)<=del; i++)\n    \tif(del&(1<<i))\n    \t\ty=f[y][i];\n\tif(x==y)return x;\n\tfor(int i=Log[h[x]]+1; i>=0; i--)\n    \tif(f[x][i]!=f[y][i])\n    \t\tx=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nint main() {\n\tn=rd(),m=rd(),st=rd();\n\tL=ceil(log(n));\n\tfor(int i=1,u,v,w; i<n; i++)\n    \tu=rd(),v=rd(),add(u,v),add(v,u);\n\tLCA_init();\n\tfor(int i=1,a,b; i<=m; i++)\n    \ta=rd(),b=rd(),printf(\"%d\\n\",LCA(a,b));\n}\n```\n# $3.$\u91cd\u94fe\u5256\u5206\n## \u67e5\u8be2\u539f\u7406:\u4e0e\u8717\u725b\u722c\u7c7b\u4f3c\n## \u5b9e\u9645\u4e0a,\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u8717\u725b\u722c\u5f0f\u5927\u90e8\u5206\u65f6\u95f4\u7684\u6d6a\u8d39\u5728\u4e00\u4e2a\u4e2a\u627e\u4e0a\n## \u800c\u6211\u4eec\u901a\u8fc7\u91cd\u94fe\u5256\u5206\u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u52a0\u5feb\n## ![\u4e00\u68f5\u7b80\u5355\u7684\u6811](https://cdn.luogu.com.cn/upload/pic/50513.png)\n\n## \u5bf9\u4e8e\u67e5\u8be2$LCA(11,9)$,\u8717\u725b\u722c\u5f0f\u7ed9\u51fa\u7684\u8fc7\u7a0b\u662f\n#### 11,9\n#### 7,9\n#### 4,5\n#### 2,3\n#### 1,1\n#### 1\n### \u4e00\u4e2a\u4e2a\u722c\u4e0a\u53bb\n\n### \u4e8b\u5b9e\u4e0a $11-7-4$\u7684\u8fc7\u7a0b\u53ef\u4ee5\u5316\u4e3a$11-4$\n### \u540c\u6837\u7684 $4-2-1$ \u5316\u4e3a$4-1$ \u7b49\u7b49\n### \u8fd9\u6761\u94fe\u8d8a\u957f,\u5176\u4e2d\u65e0\u7528\u7684\u90e8\u5206\u8d8a\u591a,\u6240\u4ee5\u628a\u4e00\u6761\u6761\u94fe\u5206\u51fa\u6765\u975e\u5e38\u6709\u5fc5\u8981\n\n### \u6240\u4ee5\u6709\u4e86\u91cd\u94fe\u5256\u5206,\u8fd9\u662f\u5b83\u7684\u8fc7\u7a0b\n#### 11,9\n#### 4,9\n#### 4,3\n#### 4,1\n#### 1\n\n### \u8fc7\u7a0b\u7b80\u5316\u4e86\u4e0d\u5c11,\u5f53\u94fe\u8d8a\u957f,\u6548\u679c\u8d8a\u597d\n\n## \u7b97\u6cd5\u6838\u5fc3:\n### \u7ef4\u62a4$size[N],son[N],top[N],fa[N],depth[N]$\u6570\u7ec4\n### $size[N]:$\u8fd9\u4e2a\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\n### $son[N]:$\u8fd9\u4e2a\u7ed3\u70b9\u4e0b\u6700\u91cd\u7684\u513f\u5b50\n### $top[N]:$\u8fd9\u6761\u94fe\u7684\u9876\u7aef\n### $fa[N]:$\u8fd9\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\n### $depth[N]:$\u8fd9\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\n## \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5728\u4e24\u6b21\u6df1\u641c\u5185\u89e3\u51b3\n```c++\nvoid dfs1(int u,int f) {\n\tfa[u]=f;\n\tson[u]=0,size[u]=1;\n\tfor(int i=head[u]; i; i=e[i].nxt) if(e[i].v!=f) {\n\t\t\tint &v=e[i].v;\n\t\t\tdepth[v]=depth[u]+1;\n\t\t\tdfs1(v,u);\n\t\t\tif(size[son[u]]<size[v])son[u]=v;\n\t\t\tsize[u]+=size[v];\n\t\t}\n}\n```\n### \u8fd9\u91cc\u5904\u7406\u4e86$fa[N],son[N],size[N],depth[N]$\u6570\u7ec4\n### ~~\u4e5f\u5c31\u662f\u8bf4,\u53ea\u5269$top[N]$\u4e86~~\n```c++\nvoid dfs2(int u,int t) {\n\ttop[u]=t;\n\tif(son[u])dfs2(son[u],t);//\u628a\u8fd9\u4e00\u6761\u94fe\u8fde\u5230\u5e95,top\u90fd\u8bbe\u6210t\n\telse return;//\u5982\u679c\u662f\u53f6\u8282\u70b9\u5c31\u4e0d\u7528\u627e\u4e86\n\tfor(int i=head[u]; i; i=e[i].nxt) {\n\t\tint &v=e[i].v;\n\t\tif(v==f[u]||v==son[u])continue;\n\t\tdfs2(v,v);//\u5bf9\u4e8e\u5176\u4ed6\u7684\u8f7b\u94fe,\u5206\u5f00\u5904\u7406,\u4ee5\u5b83\u81ea\u5df1\u4e3atop\n\t}\n}\n```\n### \u67e5\u8be2\u90e8\u5206:\n```c++\nint LCA(int x,int y) {\n\twhile(top[x]!=top[y]) {\n\t\tif(depth[top[x]]>depth[top[y]])x=fa[top[x]];\n\t\telse y=fa[top[y]];\n\t}\n\treturn depth[x]<depth[y]?x:y;\n}\n```\n### \u5176\u5b9e\u4e0e\u8717\u725b\u722c\u5f0f\u7c7b\u4f3c,\u8df3\u8fc7\u4e86\u8fd9\u6761\u94fe\u4e0a\u7684\u79fb\u52a8\u8fc7\u7a0b\n\n### $code$\u6574\u4f53$Show$\n```c++\n#include<cstdio>\n#include<cstring>\n#include<vector>\nusing namespace std;\n#define add(__u,__v) e[++cnt].nxt=head[__u],e[head[__u]=cnt].v=__v\n#define reg register\ninline void rd(reg int &s){\n\ts=0;\n\treg char x=getchar();\n\twhile(x<'0'||x>'9')x=getchar();\n\twhile(x>='0'&&x<='9')s=(s<<1)+(s<<3)+(x^'0'),x=getchar();\n}\ninline void wt(reg int x){\n\treg char buf[10]={0,0},l=0;\n\tdo buf[++l]=x%10;\n\twhile(x/=10);\n\tif(!l)l=1;\n\tfor(;l;l--)putchar(buf[l]+'0');\n}\nconst int N=1e5+10;\nint n,m,st;\nint fa[N],head[N<<1],cnt;\nstruct node {\n\tint v,nxt;\n} e[N<<1];\nint depth[N],top[N],son[N],size[N];\nvoid dfs1(int u,int f) {\n\tfa[u]=f;\n\tson[u]=0,size[u]=1;\n\tfor(int i=head[u]; i; i=e[i].nxt) if(e[i].v!=f) {\n\t\t\tint &v=e[i].v;\n\t\t\tdepth[v]=depth[u]+1;\n\t\t\tdfs1(v,u);\n\t\t\tif(size[son[u]]<size[v])son[u]=v;\n\t\t\tsize[u]+=size[v];\n\t\t}\n}\n\nvoid dfs2(int u,int t) {\n\ttop[u]=t;\n\tif(son[u])dfs2(son[u],t);\n\telse return;\n\tfor(int i=head[u]; i; i=e[i].nxt) {\n\t\tint &v=e[i].v;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\n\nint LCA(int x,int y) {\n\twhile(top[x]!=top[y]) {\n\t\tif(depth[top[x]]>depth[top[y]])x=fa[top[x]];\n\t\telse y=fa[top[y]];\n\t}\n\treturn depth[x]<depth[y]?x:y;\n}\n\nint main() {\n\tscanf(\"%d%d%d\",&n,&m,&st);\n\tfor(int i=1,u,v; i<n; i++)rd(u),rd(v),add(u,v),add(v,u);\n\tdfs1(st,0),dfs2(st,st);\n\tfor(int i=1,a,b; i<=m; i++) rd(a),rd(b),wt(LCA(a,b)),putchar('\\n');\n}\n```\n",
        "postTime": 1548858188,
        "uid": 130740,
        "name": "orangejuice",
        "ccfLevel": 10,
        "title": "LCA\u7684\u51e0\u79cd\u505a\u6cd5"
    },
    {
        "content": "\u500d\u589e\u7684\u601d\u60f3\uff0c\u501f\u9274\u4e86\u4e0b\u9762\u7684\u9898\u89e3\uff0c\u4f46\u770b\u7740\u89c9\u5f97\u5f88\u5403\u529b\uff0c\u4e8e\u662f\u6765\u81ea\u5df1\u5199\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u4ee3\u7801\u53ca\u6ce8\u91ca\uff0c\u8fd9\u9898\u76ee\u597d\u50cf\u6709\u70b9\u5361\u5e38\uff0cj\u4e00\u5b9a\u8981\u5f0019\uff0c\u4e0d\u80fd\u5f0020,2^19\u5927\u7ea6\u7b49\u4e8e520000\u521a\u597d\u5361\u5728500000\u4e0a\u9762\uff0c\u5176\u4f59\u7684\u5c31\u662f\u8981\u5f00\u5404\u79cd\u4f18\u5316\uff0c\u80fd\u5f00\u7684\u90fd\u5f00\u4e86\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxx=500000*2+10;\nint n,m,rt,f[maxx][20],deep[maxx],head[maxx],e;//f[maxx][20]\u7528\u6765\u5b58\u500d\u589e\u7684\u7236\u4eb2\u8282\u70b9\uff0cdeep\u7528\u6765\u5b58\u6df1\u5ea6\nstruct node{\n    int to,last;\n}a[maxx];\nvoid add(int x,int y){\n    a[++e].to=y;    \n    a[e].last=head[x];\n    head[x]=e;\n```\n}//\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u6811\n```cpp\nvoid read(int &x){\n    char c=getchar();x=0;    \n    while(!isdigit(c))c=getchar();\n    while(isdigit(c))x=x*10+c-'0',c=getchar();\n```\n}//\u8bfb\u5165\u4f18\u5316\n```cpp\nvoid build(int rt){//\u5efa\u6811\n    for(register int i=head[rt];i;i=a[i].last){\n        int v=a[i].to;//\u627e\u5230\u672c\u8282\u70b9\u8fde\u7684\u4e0b\u4e00\u4e2a\u70b9\n        if(!deep[v]){//\u5982\u679c\u6ca1\u6709\u6df1\u5ea6\uff0c\u610f\u601d\u5c31\u662f\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u628a\u4ed6\u7684\u6df1\u5ea6\u9644\u6210\u5230\u4ed6\u7684\u70b9\u7684\u6df1\u5ea6+1\n            deep[v]=deep[rt]+1;    \n            f[v][0]=rt;//\u4ed6\u5f80\u4e0a\u8df3\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u5c31\u662f\u5230\u4ed6\u7684\u90a3\u4e2a\u70b9\n            build(v);\n        }\n    }\n}\nvoid increase__pretreatment(){\n    for(register int j=1;j<=19;++j)    \n        for(register int i=1;i<=n;++i)\n            f[i][j]=f[f[i][j-1]][j-1];//\u500d\u589e\u9884\u5904\u7406\uff0c\u5982\u679c\u8fd9\u91cc\u4e0d\u61c2\u5efa\u8bae\u53bb\u767e\u5ea6\u4e00\u4e0b\u500d\u589e\n}\nint LCA(int x,int y){\n    if(deep[x]<deep[y])swap(x,y);\n    for(register int i=19;i>=0;--i)\n        if(deep[f[x][i]]>=deep[y])x=f[x][i];\n    if(x==y)return y;//\u53ef\u80fdLCA\u5c31\u662fy\n    for(register int i=19;i>=0;--i)\n        if(f[x][i]!=f[y][i])    \n            x=f[x][i],y=f[y][i];\n    return f[x][0];    //\u56e0\u4e3a\u6211\u4eec\u4e0a\u9762\u5224\u5b9a\u8df3\u7684\u6761\u4ef6\u662ff[x][i]!=f[y][i]\u6240\u4ee5\u5230\u6700\u540ex\u4e0ey\u662f\u4e0d\u76f8\u7b49\u7684\uff0c\u4f46\u662f\u53ea\u8981\u518d\u5f80\u4e0a\u8df3\u4e00\u4e2a\u5c31\u76f8\u7b49\u4e86\uff0c\u56e0\u4e3a2^0=1\uff1b\n}\nint main(){\n    read(n),read(m),read(rt);\n    for(register int i=1;i<=n-1;++i){\n        int x;int y;\n        read(x),read(y);    \n        add(x,y),add(y,x);\n    }\n    deep[rt]=1;\n    build(rt);\n    increase__pretreatment();\n    for(register int i=1;i<=m;++i){\n        int a,b;\n        read(a),read(b);\n        printf(\"%d\\n\",LCA(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1504228152,
        "uid": 47202,
        "name": "cheeseYang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u6b64\u9898\u4e09\u79cd\u505a\u6cd5\n\n\u4e0d\u591a\u8bf4 \u5f00\u59cb\n\n1 tarjan\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>     \u8e0f\u708e \n#include <cstring>\n#include <cstdio>\nusing namespace std;\nconst int N = 500005;\nconst int M = 1000005;\nint top,cnt,dad[N],ans[N];\nbool used[N];\nstruct heads {\n    int head;\n}v1[N],v2[N];\nstruct Edge {\n    int v,next,num;\n}e1[M],e2[M];\nvoid chu()\n{\n    memset(v1,-1,sizeof(v1));\n    memset(v2,-1,sizeof(v2));\n    memset(dad,-1,sizeof(dad));\n    memset(used,0,sizeof(used));\n}\nint getdad(int x)\n{return dad[x] == -1 ? x : dad[x] = getdad(dad[x]);}\nvoid Unions(int a,int b)\n{\n    int r1=getdad(a);\n    int r2=getdad(b);\n    if(r1!=r2)\n        dad[r2]=r1;\n}\nvoid add1(int u,int v)\n{\n    e1[top].v=v;\n    e1[top].next=v1[u].head;\n    v1[u].head=top++;\n}\nvoid add2(int u,int v,int i)\n{\n    e2[cnt].num=i;\n    e2[cnt].v=v;\n    e2[cnt].next=v2[u].head;\n    v2[u].head=cnt++;\n}\nvoid Tarjan(int u)\n{\n    used[u]=true;\n    for(int i=v1[u].head;i!=-1;i=e1[i].next)\n    {\n        int v=e1[i].v;\n        if(used[v])\n            continue;\n        Tarjan(v);\n        Unions(u,v);\n    }\n    int Ms;\n    for(int i=v2[u].head;i!=-1;i=e2[i].next)\n    {\n        int v=e2[i].v;\n        Ms=e2[i].num;\n        if(used[v])///==getdad(v)\n            ans[Ms]=getdad(v);\n    }\n}\nint main()\n{\n    int n,m,s,u,v;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    chu();\n    int nn=n;\n    n--;\n    while(n--)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add1(u,v),add1(v,u);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add2(u,v,i),add2(v,u,i);\n    }\n    Tarjan(s);\n    for(int i=1;i<=nn;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```\n2 \u500d\u589e\n```cpp\n#include<iostream>      \n#include<cmath>\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<stdio.h>\n#include<vector>\n#define maxn 500500\nusing namespace std;\n///\u96b6\u5c5e\u90bb\u63a5\u8868 \nstruct Edge{                    //\u90bb\u63a5\u8868\u7684\u7ed3\u6784\u4f53 \n    int from,to;\n}edges[2*maxn];                 //\u8fb9\u8981\u4e582\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u56fe \uff1b \nint first[maxn],next[2*maxn];   //\u540c\u7406\uff1b \nint read(){                        //\u8bfb\u5165\u4f18\u5316\uff0c\u53ef\u4ee5\u7167\u7740\u8fd9\u4e2a\u6a21\u677f\u6765\u5199\uff0c\u8fd9\u4e2a\u8fd8\u7b97\u5199\u7684\u6bd4\u8f83\u597d\u770b\u3002 \n    int re=0;\n    char ch=getchar();\n    while (ch<'0' || ch>'9') ch=getchar();\n    while (ch>='0' && ch<='9'){ \n        re=re*10+ch-'0'; \n        ch=getchar();\n    }\n    return re;\n}\n///////////////////////////////////////////////\n///\u5168\u5c40\u53d8\u91cf \nint n,m;\nint root;\nint height[maxn];\nfloat log2n;\n///////////////////////////////////////////////////////\n///\u96b6\u5c5eLCA\u7684\u5168\u5c40\u53d8\u91cf \nint f[maxn][20];// \nint have[maxn];                           //have\uff0c\u6709\u6ca1\u6709\u627e\u8fc7\uff0c\u8fd9\u90fd\u662f\u5957\u8def \u3002 \nvoid dfs(int u,int h){                 //u\u4ee3\u8868\u70b9\u7684\u6807\u53f7\uff0ch\u4ee3\u8868\u9ad8\u5ea6\u3002 \n    int v;\n    height[u]=h;\n    for(int i=1;i<=log2n;i++) {\n        if(h<=(1<<i)) break;              //\u7531\u4e8ei\u662f\u4ece\u5c0f\u5230\u5927\u8ba1\u7b97\u7684\uff0c\u6545\uff081<<i\uff09>=h \u65f6\u53ef\u76f4\u63a5\u9000\u51fa\u3002\u8bf7\u52a1\u5fc5\u60f3\u6e05\u695a\u662f<=  \u8fd8\u662f=\u3002\n        f[u][i] = f[ f[u][i-1] ][i-1]; //\u52a8\u89c4\u8ba1\u7b97\u3002\u540c\u6837\u4e5f\u662f\u4e00\u5207\u500d\u589e\u7b97\u6cd5\u7684\u6838\u5fc3\u3002 \n    }\n    int k=first[u];\n    while(k!=-1){\n        v=edges[k].to;\n        if(!have[v]) {\n            have[v]=1;        \n            f[v][0]=u;                 //\u5c06\u8981\u627e\u7684\u4e0b\u4e00\u4e2a\u70b9\u7684\u7236\u8282\u70b9\u6807\u4e3a\u5f53\u524d\u5904\u7406\u7684\u8282\u70b9u\u3002 \n            dfs(v,h+1);\n        }\n        k=next[k];\n    }\n}\nint require_LCA(int a,int b){\n    int da=height[a],db=height[b];\n//\u7b2c\u4e00\u6b65\uff0c\u5c06a\uff0cb\u4e24\u70b9\u79fb\u5230\u540c\u6837\u7684\u9ad8\u5ea6\uff0c\u53ea\u52a8\u9ad8\u5ea6\u5927\u7684\u90a3\u4e2a\u70b9\u800c\u4e0d\u52a8\u9ad8\u5ea6\u5c0f\u7684\u90a3\u4e2a\u70b9\u3002 \n    if(da!=db) {\n        if(da<db){                   //\u4fdd\u8bc1a\u7684\u9ad8\u5ea6\u662f\u5927\u4e8eb\u7684\u9ad8\u5ea6\u7684\u3002 \n            swap(a,b);\n            swap(da,db);\n        }\n        int d=da-db;\n        for(int i=0;i<=log2n;i++) \n            if( (1<<i) & d) a=f[a][i]; //\u8fd9\u91cc\u7684\u4f4d\u8fd0\u7b97\u53ef\u4ee5\u51cf\u5c11\u4ee3\u7801\u91cf\n                                       //\u8003\u8651\u5230d\u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u800c\uff081<<i\uff09\u5728\u4e8c\u8fdb\u5236\u4e2d\u53ea\u6709\u7b2c\uff08i+1\uff09\u4f4d\u662f1\uff1b \n                                       //\u90a3\u4e48d\u4e0e\uff081<<i\uff09\u5982\u679c\u67d0\u4e00\u4f4d\u4e3a1\uff0c\u90a3\u4e48\u8868\u793a\u53ef\u4ee5\u5411\u4e0a\u79fb\u52a8\uff0c \n                                       //\u5982\u679c\u6b64\u65f6\u4e0d\u79fb\u52a8\uff0c\u90a3\u4e48i\u589e\u5927\u4e86\u540e\u5c31\u65e0\u6cd5\u4f7fheight[a]==height[b]\u4e86 \n    }\n//\u7b2c\u4e8c\u6b65,\u627e\u5230\u67d0\u4e2a\u4f4d\u7f6ei\uff0c\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u65f6\uff0cf[a][i]!=f[b][i],\u4f46\u518d\u5411\u4e0a\u79fb\u52a8\u4e00\u6b65\uff0ca\uff0cb\u76f8\u540c\u4e86 \n//\u4ecelog2n\u5f00\u59cb\u4ece\u5927\u5230\u5c0f\u679a\u4e3ei\uff0c\u5982\u679c\u8d85\u8fc7\u4e86a\uff0cb\u7684\u9ad8\u5ea6\uff0c\u5219\u4ee4i\u7ee7\u7eed\u51cf\u5c0f\n//\u5982\u679c\u6ca1\u6709\u8d85\u8fc7a\uff0cb\u7684\u9ad8\u5ea6\uff0c\u90a3\u4e48\u5c31\u5224\u65ad\u79fb\u52a8\u4e86\u540e\u4f1a\u4e0d\u4f1a\u8ba9a==b\uff0c\n//\u662f\uff0c\u5219i\u7ee7\u7eed\u51cf\u5c0f\uff0c\u5426\u5219\uff0c\u4ee4\u6b64\u65f6\u7684a=f[a][i],b=f[b][i]; \n    if(a==b) return b;\n    int i=0;\n    for(i=log2n;i>=0;i--) {\n        if(height[ f[a][i] ]<0) continue;\n        if( f[a][i]==f[b][i] ) continue;\n        else a=f[a][i],b=f[b][i];        //\u987a\u4fbf\u4e00\u63d0\uff0c\u5728\u7b2c\u4e8c\u6b65\u4efb\u4f55\u5730\u65b9\u6ca1\u6709break\uff1b\n                                       //\u6211\u5c31\u662f\u56e0\u4e3a\u5728\u8fd9\u91cc\u5199\u4e86\u4e00\u4e2abreak\uff0c\u7136\u540e\u627e\u4e86\u6211\u4e24\u4e2a\u5c0f\u65f6\u554a\u3002 \n    }    \n    return f[a][0];\n}\n/////////////////////////////////\n///\u636e\u8bf4\u4ece\u4e3b\u51fd\u6570\u5f00\u59cb\u9605\u8bfb\u662f\u4e2a\u597d\u4e60\u60ef\u3002 \nint main(){\n//    freopen(\"in2.txt\",\"r\",stdin);\n    n=read();m=read();root=read();\n    memset(first,-1,sizeof(first));\n    memset(next,-1,sizeof(next));\n    int s,t;\n    int dsd=2*(n-1);\n    for(int i=1;i<=dsd;i+=2) {\n        s=read();t=read();      //\u8bfb\u5165\u4f18\u5316\u3002 \n        edges[i].from=s;\n        edges[i].to=t;\n        edges[i+1].from=t;\n        edges[i+1].to=s;\n        next[i]=first[s];\n        first[s]=i;\n        next[i+1]=first[t];\n        first[t]=i+1;\n    }\n    // \u4ee5\u4e0a\u662f\u90bb\u63a5\u8868\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 \n    log2n=log(n)/log(2)+1;        //C++\u8ba1\u7b97log\u662f\u81ea\u7136\u5bf9\u6570\uff0c\u6211\u4eec\u8981\u7528\u7684\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570\uff0c\u6545\u8981\u9664\u4ee5log(2); \n                                  //\u5bf9\u65e0\u7406\u6570\u52a0\u4e0a1\u6216\u662f0.5\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u53ef\u4ee5\u51cf\u5c0f\u8bef\u5dee\uff1b \n    memset(have,0,sizeof(have));\n    memset(height,0,sizeof(height));\n    memset(f,-1,sizeof(f));\n    have[root]=1;                //fa[][]\u548cheight[]\u8981\u5728dfs\u7406\u8fdb\u884c\u8ba1\u7b97\uff0c\u4e0d\u7136\u6839\u672c\u627e\u4e0d\u5230\u67d0\u4e2a\u975e\u6839\u8282\u70b9\u7684\u7236\u4eb2\u662f\u8c01; \n    dfs(root,1);                \n    for(int i=1;i<=n;i++){\n        for(int j=0;j<=log2n;j++) {\n            if(height[i] <=(1<<j) ) break;\n        }\n    }\n    for(int i=0;i<m;i++) {      //\u5e94\u5bf9\u8981\u6c42\u8fdb\u884c\u6c42\u89e3\u3002 \n        s=read();t=read();\n        int y=require_LCA(s,t);\n        printf(\"%d\\n\",y);\n    }\n    return 0;\n}\n```\n3 \u5256\u5206\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <iostream>   \n#include <cstdio>\n#define _(ch) ch=read()                    //\u4fbf\u4e8e\u8bfb\u5165 \nusing namespace std;\nconst int S = 500001;\nbool f[S];                                 //dfs \u6807\u8bb0\nint n,m,s;\nint fa[S];                                 //\u5e76\u67e5\u96c6 \nint num,h[S];                             //\u90bb\u63a5\u8868 \nint deep[S];                             //\u6df1\u5ea6 \nint sum[S];                             //\u5b50\u7ed3\u70b9\u4e2a\u6570 \nint dad[S];                             //\u94fe\u5934\u5143\u7d20 \nstruct B{\n    int to,next;\n}t[S<<1];\ninline int read()                         //optimize\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;  \n}\nvoid ADD(int x,int y)                     //connect the x and the y\n{\n    num++;\n    t[num].to=y;\n    t[num].next=h[x];\n    h[x]=num;\n}\ninline int Find(int x)\n//find the root (\u91cd\u94fe's top)\n{return fa[x] == x ? x : fa[x] = Find(fa[x]);}\ninline void Unions(int a,int b)\n{                                        //union(\u642d\u91cd\u94fe)\n    /*int f1=Find(a);\n    int f2=Find(b);\n    if(f1!=f2)\n    {\n        fa[f1]=f2;\n    }*/\n    fa[Find(b)]=Find(a);\n}\ninline void dfs(int p)//D is the (\u7ed3\u70b9)\n{//calc every D's son D\n//\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6df1\u5ea6 \n    f[p]=true;\n    int maxx=0;                            //\u5bfb\u627e\u5b50\u8282\u70b9\u4e2d\u62e5\u6709\u5b50\u7ed3\u70b9\u4e2a\u6570\u6700\u591a\u7684\u8282\u70b9\u7f16\u53f7 \n    sum[0]=-1;                            //0\u53f7\u6ca1\u6709\u5b50\u7ed3\u70b9\n    for(int j=h[p];j;j=t[j].next) \n    {                                    //\u8fdb\u884c\u904d\u5386 \n        int v=t[j].to;\n        if(f[v]) continue;\n        deep[v]=deep[p]+1;\n        dad[v]=p;                        //p is v's dad \n        dfs(v);                         //continue dfs\n        if(sum[v] > sum[maxx]) maxx=v;     //update\n        sum[p]+=sum[v]+1;\n//        p\u7684\u5b50\u7ed3\u70b9\u6570 = p \u7684\u4ee5'v'\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u76ee\u52a0\u4e0a'v'\u8fd9\u4e2a\u70b9(\u5373+1)\n    }\n    if(maxx) Unions(p,maxx);            //if updated \n    //that means find the (\u91cd\u94fe) succeed\n}\ninline int jump(int p)                     //find p can jump to  \n{\n    int top=Find(p);                     //(\u91cd\u94fe)'s top \n    if(top == p) return dad[p];\n//    \u5982\u679cp\u6240\u5904\u4e8e\u7684\u94fe\u7684\u94fe\u5934\u5c31\u662f\u81ea\u5df1,\u4e5f\u5c31\u662f\u8bf4,\u5df2\u7ecf\u4f4d\u4e8e\u94fe\u7684top\u5904,\u6240\u4ee5\u53ea\u80fd\u591f\u8df3\u5230\u4ed6\u7684\u7236\u7ed3\u70b9\u7684\u4f4d\u7f6e,\n//    \u6240\u4ee5\u76f4\u63a5return it's dad,\u5373\u8df3\u4e00\u6b65\u5230\u8fbe\u7236\u7ed3\u70b9\u5904 \n//    \u8bf4\u767d\u4e86\u5c31\u662f\u8bf4,\u4e00\u5b9a\u8981\u8df3!!! \n    return top;                            //\u5176\u4f59\u60c5\u51b5\u5c31\u8fd4\u56de\u94fe\u5934\u5c31\u597d(\u5c31\u662f\u5f53\u524d\u7ed3\u70b9\u8df3\u5230\u4e86\u94fe\u5934\u4f4d\u7f6e) \n}\ninline int Lca(int a,int b)             //Lca \n{\n    while(a!=b)                         //\u5f53\u4e24\u70b9\u4e0d\u76f8\u7b49\u7684\u65f6\u5019\u5c31\u5f00\u59cb\u8df3 \n    {\n        if(Find(a)==Find(b))             //\u5982\u679c\u5b83\u4eec\u4f4d\u4e8e\u540c\u4e00\u6761\u91cd\u94fe\u4e0a \n          return deep[a]<deep[b] ? a:b; //\u76f4\u63a5\u8fd4\u56de\u6df1\u5ea6\u8f83\u6d45\u7684\u90a3\u4e2a\u70b9 \n        int ja=jump(a),jb=jump(b);\n        if(deep[ja] > deep[jb])            //\u5982\u679ca\u8df3\u4e86\u4e4b\u540e\u6ca1\u6709\u5230\u8fbeb\u8df3\u4e86\u4e4b\u540e\u7684\u6df1\u5ea6 \n            a=ja;                        //\u5c31\u9009\u53d6\u6df1\u5ea6\u8f83\u6df1\u7684\u70b9\u8df3 \n        else\n            b=jb;\n    }\n    return a;\n}\nint main()\n{\n    _(n),_(m),_(s);\n    int x,y;\n    for(int i=1;i<n;i++)\n    {\n        _(x),_(y);\n        ADD(x,y),ADD(y,x);\n        fa[i]=i;                        //\u987a\u4fbf\u521d\u59cb\u5316\u4e00\u4e0b\u5e76\u67e5\u96c6 \n    }\n    fa[n]=n;                             //\u6709\u4e00\u4e2a\u6ca1\u6709\u8fdb\u884c\u521d\u59cb\u5316\u7684\u5e76\u67e5\u96c6,\u8fdb\u884c\u521d\u59cb\u5316 \n    deep[s]=1;                             //\u6839\u7ed3\u70b9\u7684\u6df1\u5ea6\u8bbe\u7f6e\u4e3a1,\u975e\u5e38\u91cd\u8981!!!! \n    dfs(s);                                //\u5bfb\u627e\u5b50\u8282\u70b9\u4e2a\u6570,\u4f4d\u4e8e\u54ea\u4e00\u6761\u91cd\u94fe\u4e0a \n    while(m--)\n    {\n        _(x),_(y);\n        printf(\"%d\\n\",Lca(x,y));\n    }\n    return 0;\n}\n\u5e0c\u671b\u5927\u5bb6\u4e0d\u61c2\u95ee\u6211\uff01\uff01\uff01\n```",
        "postTime": 1503709694,
        "uid": 41490,
        "name": "qscqesze_lca",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u500d\u589e\u4f1a\u88ab\u5361\uff1f\uff1f\u6211\u89c9\u5f97\u849f\u84bb\u5199\u7684\u8dd1\u7684\u8fd8\u597d\u7684\uff0c\u6700\u6162\u7684500+ms\uff0c\u662f\u4e0d\u662f\u697c\u4e0b\u5927\u4f6c\u5199\u7684\u6709\u70b9chou= =\n\n\n\u81f3\u4e8e\u6811\u5256\u7684\u8bdd\uff0c\u6bd4\u8f83\u51b7\u95e8\u7684\u7b97\u6cd5\uff0c\u5f88\u96be\u4f1a\u88ab\u51fa\u9898\u4eba\u51fa\u6570\u636e\u9488\u5bf9\uff0c\n\n\n\u4f46\u5176\u5b9e\u5982\u679c\u51fa\u6570\u636e\u9488\u5bf9\u6811\u5256\u8fd8\u662f\u5f88\u7b80\u5355\u7684\uff0c\u6bd4\u5982\u51fa\u4e2a\u4e00\u4e2a\u91cd\u94fe\uff0c\u4e00\u5806\u8f7b\u94fe\uff08\u4f8b\u5982\u6ee1\u4e8c\u53c9\u6811\uff09\uff0c\u4f46\u5176\u957f\u5ea6\u76f8\u5f53\uff0c\u9a6c\u4e0a\u88ab\u5361\u6389\u3002\n\n\n\u5bf9\u4e8e\u79bb\u7ebf\u7684tarjan+rmq\u7684\u8bdd\uff0c\u8fd8\u662f\u5f88\u96be\u9488\u5bf9\u7684\u3002\n\n\n\u8fd9\u91cc\u5148\u7ed9\u4e2a\u500d\u589e\u7684\u5427\u3002\uff08\u5148\uff1f\u5565\u610f\u601d\uff0c\u5f80\u4e0b\u7ffb\uff0c\u6709\u65b0\u59ff\u52bf\u54df\uff0c\u52a1\u5fc5\u8010\u5fc3\u770b\u4e00\u770b\uff09\uff1a\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=500100;\nint fa[N][25],dep[N],a[N];\nstruct Edge{\n    int to,next;\n}e[N*2];\nint n,maxdep=0,T,rt,EdgeCnt=0,top=0;\nvoid addedge(int u,int v){\n    int p=++EdgeCnt;\n    e[p].to=v;e[p].next=a[u];\n    a[u]=p;\n}\nvoid build(int u){\n    for (int p=a[u];p;p=e[p].next){\n        int v=e[p].to;\n        if (v!=fa[u][0]){\n            fa[v][0]=u;\n            dep[v]=dep[u]+1;\n            maxdep=max(maxdep,dep[v]);\n            build(v);\n        }\n    }\n}\nint LCA(int u,int v){\n    if (dep[u]<dep[v])swap(u,v);\n    for (int k=top;k>=0;k--)\n        if (dep[fa[u][k]]>=dep[v])u=fa[u][k];\n    if (u==v)return u;\n    for (int k=top;k>=0;k--)\n        if (fa[u][k]!=fa[v][k]){\n            u=fa[u][k];v=fa[v][k];\n        }\n    return fa[u][0];\n}\nint main(){\n    scanf(\"%d%d%d\",&n,&T,&rt);\n    for (int i=1;i<n;i++){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        addedge(u,v);\n        addedge(v,u);\n    }\n    dep[rt]=1;\n    build(rt);\n    for (;(1<<top)<=maxdep;top++);\n    for (int k=1;k<=top;k++)\n        for (int i=1;i<=n;i++)\n            fa[i][k]=fa[fa[i][k-1]][k-1];\n    while (T--){\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",LCA(u,v));\n    }\n    return 0;\n}\n```\n\u8fd9\u79cd\u505a\u6cd5\uff0c\u5b8c\u5168\u9760\u8fd0\u6c14\uff0c\u5982\u679c\u51fa\u4e2a\u6570\u636e\u8ba9\u4f60\u5361\u6ee1top\u6b21\u500d\u589e\uff0c\u90a3\u5c31= =\n\u6240\u4ee5\uff0c\u63a5\u4e0b\u6765\u6211\u8981\u8bb2\u4e00\u79cd\uff0c\u65b0\uff0c\u65b0\uff0c\u65b0\u7684\u5927\u591a\u4eba\u90fd\u4e0d\u77e5\u9053\u7684\u7b97\u6cd5\uff0ctarjan\uff01\n\n\u6ce8\u610f\uff0c\u4e0d\u662ftarjan+rmq\uff0c\u800c\u662ftarjan+\u5e76\u5dee\u96c6\uff01\u5e76\u5dee\u96c6\uff1f\u6211\u4eec\u5b9a\u4e49f[x]\u8868\u793ax\u5728\u76ee\u524d\u56de\u6eaf\u4e2d\u5230\u8fbe\u7684\u6700\u524d\u9762\u7684\u7956\u5148\n\n\u6ce8\u610f\uff0ctarjan\u7684\u5b97\u65e8\u603b\u662f\u79bb\u7ebf\u7684\uff0c\u6211\u4eec\u5148\u5c06\u6240\u6709\u95ee\u9898\u90fd\u9884\u5b58\u4e0b\u6765\uff0c\u5f04\u5230\u4e00\u4e2a\u90bb\u63a5\u8868\u4e2d\uff0c\u7136\u540edfs\u904d\u5386\u6574\u4e2a\u6811\uff0c\u6ce8\u610f\u5f53\u6211\u4eec\u904d\u5386\u5230\u4e00\u4e2a\u70b9u\u65f6\uff0c\n\n\u5bf9\u4e8e\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u53e6\u4e00\u4e2a\u8282\u70b9v\u6211\u4eec\u5df2\u7ecf\u904d\u5386\u8fc7\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662ff[v]\uff0c\u628af[v]\u5f53\u6210\u4e00\u4e2a\u5e76\u5dee\u96c6\uff0c\u7528\u8def\u5f84\u538b\u7f29\u7ef4\u62a4\u4e00\u4e0b\uff0c\u4e0d\u7136\u5c31\u63a5\u7740\u904d\u5386\u4e0b\u4e2a\u70b9\uff0c\u5206\u6790\u4e00\u4e0b\u6548\u7387\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6211\u4eec\u53ea\u4f1a\u904d\u5386\u4e00\u6b21\uff0c\u6bcf\u4e2a\u95ee\u9898\u6211\u4eec\u4e5f\u53ea\u4f1a\u904d\u5386\u4e24\u6b21\uff0c\u800c\u5e76\u5dee\u96c6\u7684\u6548\u7387\u5c31\u662fO(1)\uff0c\u6240\u4ee5\u603b\u7684\u6548\u7387\u5c31\u662fO\uff08n\uff09\u7684\u4e86\uff0c\u6210\u529f\u7684\u53bb\u6389\u4e86\u4e00\u4e2a\u7cfb\u6570logn\u3002\n\n\u5982\u679c\u4f60\u5e76\u4e0d\u7406\u89e3f[v]\u5c31\u662f\u7b54\u6848\uff0c\u753b\u4e2a\u56fe\u5c31\u597d\u4e86\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int M=1001000;\nstruct TreeEdge{\n    int to,next;\n}e[M];\nstruct Question{\n    int to,next,code;\n}q[M];\nint n,m,rt,EdgeCnt=0,QueCnt=0;\nint f[M],a[M],b[M],ans[M];\nbool vis[M];\nint read(){\n    int x=0,f=1;char ch=getchar();\n    while (ch<'0' || ch>'9'){if (ch=='-')f=-1;ch=getchar();}\n    while ('0'<=ch && ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n    return x*f;\n}\nvoid addedge(int u,int v){\n    int p=++EdgeCnt;\n    e[p].to=v;e[p].next=a[u];\n    a[u]=p;\n}\nvoid addque(int u,int v,int no){\n    int p=++QueCnt;\n    q[p].to=v;q[p].next=b[u];q[p].code=no;\n    b[u]=p;\n}\nint find(int x){\n    return f[x]==x?x:f[x]=find(f[x]);\n}\nvoid dfs(int u){\n    vis[u]=1;\n    for (int p=b[u];p;p=q[p].next){\n        int v=q[p].to;\n        if (vis[v])ans[q[p].code]=find(f[v]);\n    }\n    for (int p=a[u];p;p=e[p].next){\n        int v=e[p].to;\n        if (!vis[v]){\n            dfs(v);f[v]=u;\n        }\n    }\n}\nint main(){\n    n=read();m=read();rt=read();\n    for (int i=1;i<n;i++){\n        int u,v;\n        u=read();v=read();\n        addedge(u,v);\n        addedge(v,u);\n    }\n    for (int i=1;i<=n;i++)f[i]=i;\n    for (int i=1;i<=m;i++){\n        int u,v;\n        u=read(),v=read();\n        addque(u,v,i);addque(v,u,i);\n    }\n    dfs(rt);\n    for (int i=1;i<=m;i++)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1503648155,
        "uid": 54916,
        "name": "I_AM_HelloWord",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u5f88\u591a\u4eba\u8bf4\u8fd9\u9053\u9898\u4e0d\u80fd\u7528\u500d\u589e\u5199\n\n\n\u5176\u5b9e\u662f\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u9700\u8981\u52a0\u4e00\u70b9\u8bfb\u5165\u4f18\u5316\u7f62\u4e86\n\n\n\u6ce8\u610f\u500d\u589e\u7684\u6700\u5927\u503c\u4e00\u5b9a\u8981\u53d619\u800c\u4e0d\u80fd\u53d620\uff0c\u56e0\u4e3a\u8fd9\u9898\u5361\u5e38\uff01\uff01\n\n\n\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u7528\u4f4d\u8fd0\u7b97\uff0c\u4e5f\u5199\u4e86\u5927\u91cf\u7684\u6ce8\u91ca\u5e76\u6807\u660e\u4e86\u6613\u9519\u70b9\uff0c\u5927\u5bb6\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nconst int MAXN=1000001;\nint n,m,root;\nstruct node\n{\n    int u;\n    int v;\n    int next;\n}edge[MAXN];\nint num=1;\nint head[MAXN];\nint deep[MAXN];\nint f[MAXN][20];\nvoid edge_add(int x,int y)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].next=head[x];\n    head[x]=num++;\n}\nvoid build_tree(int p)\n{\n    for(int i=head[p];i!=-1;i=edge[i].next)// \u904d\u5386\u4e0ep\u8282\u70b9\u76f8\u90bb\u7684\u8282\u70b9 \n    {\n        int will=edge[i].v;\n        if(deep[will]==0)// \u5982\u679c\u70b9will\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8bdd \n        {\n            deep[will]=deep[p]+1;// \u5219\u70b9will\u7684\u6df1\u5ea6==p\u7684\u6df1\u5ea6+1 \n            f[will][0]=p;// will\u70b9\u5411\u4e0a\u8df32^0\u7684\u8282\u70b9\u662fp \n            build_tree(will);//\u7ee7\u7eed\u521d\u59cb\u5316will\u8282\u70b9 \n        }\n    }\n}\nvoid initialize_step()\n{\n    for(int i=1;i<=19;i++)\n        for(int j=1;j<=n;j++)\n            f[j][i]=f[f[j][i-1]][i-1];\n    // \u7b2cj\u4e2a\u8282\u70b9\uff0c\u5411\u4e0a\u8df3i\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u5c31\u662f \u8df3\u5230i-1\u5904\u518d\u5411\u4e0a\u8df3i-1\u80fd\u5230\u8fbe\u7684\u8282\u70b9\n    // \u56e0\u4e3a\u500d\u589e\u662f\u4ee5\u6b21\u65b9\u7684\u5f62\u5f0f\u589e\u52a0\u7684 \n}\nint LCA(int x,int y)\n{\n    if(deep[x]<deep[y])swap(x,y);// \u5982\u679c\u8bf4\u8282\u70b9x\u7684\u6df1\u5ea6\u6bd4\u8282\u70b9y\u7684\u6df1\u5ea6\u5c0f\u7684\u8bdd\uff0c\u5c31\u4ea4\u6362\u4ed6\u4fe9\u7684\u4f4d\u7f6e\uff0c\u8ba9x<y \n    for(int i=19;i>=0;i--)// \u56e0\u4e3a\u8df3\u7684\u6b65\u6570\u8d8a\u5c0f\u8d8a\u597d\uff0c\u6240\u4ee5\u4ece\u6700\u5927\u7684\u503c\u5f00\u59cb\u8df3\n    {\n        if(deep[f[x][i]]>=deep[y])// \u5982\u679c\u8df3\u5b8ci\u6b65\u4e4b\u540ex\u8fd8\u5728y\u4e0b\u65b9\u7684\u8bdd \uff0c\u8fd9\u91cc\u5fc5\u987b\u52a0\u7b49\u4e8e\u53f7 \n        x=f[x][i];// \u5c31\u66f4\u65b0x\u7684\u503c\uff0c\u7ee7\u7eed\u8df3\n    }\n    if(x==y)return y;//\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679cx\u548cy\u5728\u540c\u4e00\u6761\u7ebf\u4e0a\uff0c\u5c31\u76f4\u63a5\u8fd4\u56dex\u7684\u503c \uff0cy\u4e5f\u53ef\u4ee5 \n    for(int i=19;i>=0;i--)//\u518d\u8ba9x\u548cy\u4e00\u8d77\u5411\u4e0a\u8df3\n    if(f[x][i]!=f[y][i])\n    x=f[x][i],y=f[y][i];// \u5982\u679c\u4ed6\u4eec\u8df3\u5b8c\u4e4b\u540e\u7684\u7956\u5148\u4e0d\u76f8\u7b49\u7684\u8bdd,\u5c31\u7ee7\u7eed\u8df3 \n    return f[x][0];//\u6309\u8fd9\u6837\u8df3\u4e0b\u53bb\uff0c\u4e00\u5b9a\u4f1a\u8df3\u5230\u53ea\u8981\u518d\u8df3\u4e00\u6b65\u5c31\u80fd\u627e\u5230\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u4f4d\u7f6e\uff01 \n}\nvoid read(int & x)\n{\n    char c=getchar();x=0;\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')x=x*10+c-48,c=getchar();// \u8bfb\u5165\u4f18\u5316\uff0c\u5fc5\u987b\u8981\u6709\uff01 \n}\nint main()\n{\n    //scanf(\"%d%d%d\",&n,&m,&root);\n    read(n);read(m);read(root);\n    for(int i=1;i<=n;i++)head[i]=-1;\n    for(int i=1;i<=n-1;i++)\n    {\n        int x,y;\n        //scanf(\"%d%d\",&x,&y);\n        read(x);read(y);\n        edge_add(x,y);\n        edge_add(y,x);\n    }\n    deep[root]=1;//\u5c06\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u8bbe\u4e3a1 \n    build_tree(root);// \u5efa\u7acb\u8d77\u4e00\u68f5\u6811 \n    initialize_step();// \u521d\u59cb\u5316\u5411\u4e0a\u8df3\u7684\u8ddd\u79bb \n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        //scanf(\"%d%d\",&x,&y);\n        read(x);read(y);// \u6c42x\u4e0ey\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\n        printf(\"%d\\n\",LCA(x,y));// ans \n    }\n    return 0;\n}\n```",
        "postTime": 1498037100,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u4e00\u4e2a\u5728\u7ebf\u500d\u589e\uff0c\u4e00\u4e2a\u79bb\u7ebf\u3002\uff08\u500d\u589e\u4f30\u8ba1\u5199\u4f1f\u4e86\uff0c\u8dd1\u5f97\u8d3c\u6162\uff09\uff1b\n\n\u4ee3\u7801\u4e2d\u6709\u8be6\u89e3\uff1b\uff08\u82e5\u6709\u758f\u6f0f\u6216\u8868\u8ff0\u4e0d\u6e05\u7684\u53ef\u4ee5\u79c1\u4fe1\u6211\uff09\n\n**\u5148\u662f\u79bb\u7ebf\uff1a**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nint n,m,start;\nint head[500005];\nstruct Bian\n{\n    int to,next;\n} a[1000005];\nint num=0;\nstruct Question\n{\n    int to,next,number;\n} b[1000005];\nint sum=0;\nint hh[500005];\nint ans[500005];\nint fa[500005];\nbool d[500005];\nvoid init(int x,int y)\n{\n    a[++num].next=head[x];\n    a[num].to=y;\n    head[x]=num;\n}\nvoid init2(int x,int y,int number)\n{\n    b[++sum].next=hh[x];\n    b[sum].to=y;\n    b[sum].number=number;\n    hh[x]=sum;\n}\nint find(int x)//\u5e76\u67e5\u96c6; \n{\n    int pre=x;\n    int y;\n    while(x!=fa[x])x=fa[x];\n    while(pre!=fa[pre])//\u8def\u5f84\u538b\u7f29 \n        {\n            y=fa[pre];\n            fa[pre]=x;\n            pre=y;\n        }\n    return x;\n}\nvoid dfs(int x)\n{\n    d[x]=1;\n    fa[x]=x;\n    int u;\n    for(int i=head[x]; i ; i=a[i].next)\n        {\n            u=a[i].to;\n            if(!d[u])\n                {\n                    dfs(u);\n                    fa[u]=x;//dfs\u5230\u4e86\u6700\u6df1\u5c42\u540e\u4ee5\u6b64\u5c06x\u7684\u5b50\u8282\u70b9\u7684father\u8d4b\u4e3ax\uff1b \n                }\n        }\n        int number;\n    for(int i=hh[x] ; i ; i=b[i].next)//\u627e\u7b54\u6848\uff1a\u5982\u679c\u6709\u4e0ex\u76f8\u5173\u7684\u8f93\u5165\uff0c\u5728\u8be5\u5c42\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86 \uff1b \n        {\n            u=b[i].to;\n            number=b[i].number;\n            if(d[u])\n                {\n                    ans[number]=find(u);\n                }\n        }\n}\nint main()\n{\n    //freopen(\"LCA.in\",\"r\",stdin);\n    scanf(\"%d%d%d\",&n,&m,&start);\n    int x,y;\n    for(int i=1; i<=n-1; i++)//\u8bb0\u5f55\u90bb\u8fb9\uff1b \n        {\n            scanf(\"%d%d\",&x,&y);\n            a[++num].next=head[x];\n            a[num].to=y;\n            head[x]=num;\n            a[++num].next=head[y];\n            a[num].to=x;\n            head[y]=num;\n        }\n    int xx,yy;\n    for(int i=1; i<=m; i++)//\u8bb0\u5f55\u9700\u8981\u6c42\u7684a,b\uff1b \n        {\n            scanf(\"%d%d\",&xx,&yy);\n            b[++sum].next=hh[xx];\n            b[sum].to=yy;\n            b[sum].number=i;//\u8bb0\u5f55\u53f7\u7801\u4ee5\u4fbf\u8f93\u51fa \n            hh[xx]=sum;\n            b[++sum].next=hh[yy];\n            b[sum].to=xx;\n            b[sum].number=i;\n            hh[yy]=sum;\n        }\n    dfs(start);\n    for(int i=1; i<=m; i++)printf(\"%d\\n\",ans[i]); \n    return 0;\n}\n```\n**\u500d\u589e\uff1a**\n\n\n\n    \n\n\n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\nusing namespace std;\nint head[500005];int dep[500005];bool d[500005];\nint fa[500005][50];int n,m,start;int maxdep;\nstruct LIN\n{\n    int to,next;\n}a[1000005];int num=0;\nvoid init(int x,int y)\n{\n    a[++num].next=head[x];\n    a[num].to=y;\n    head[x]=num;\n}\nvoid getdep(int x)\n{\n    d[x]=1;\n    int u;\n    for(int i=head[x]; i ; i=a[i].next)\n    {\n        u=a[i].to;\n        if(!d[u])\n        {\n            dep[u]=dep[x]+1;fa[u][0]=x;//\u5728\u8fd9\u91cc\u53ef\u4ee5\u641c\u51fa2\u76840\u6b21\u65b9\u7956\u5148\uff0c\u5373u\u7684father x\uff1b \n            getdep(u);\n        }\n    }\n} \nvoid swap(int &x,int &y)\n{\n    x^=y;y^=x;x^=y;\n}\nint GO(int x,int y)\n{\n    if(dep[x]<dep[y])swap(x,y);//\u4fdd\u8bc1dep\u3010x\u3011>dep\u3010y\u3011\uff1b \n    int deep=dep[x]-dep[y];//dep\u5dee \n    for(int i=maxdep;i>=0;i--)\n    {\n        if(((1<<i)&deep)) //\u8fd9\u91cc\u6709\u70b9\u96be\u7406\u89e3\uff1b\u6211\u4eec\u53ef\u4ee5\u5148\u628adeep\u8f6c\u6362\u62102\u8fdb\u5236\u5f62\u5f0f\uff0c\u7136\u540e\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\uff1b\u5982 deep=5\u65f6 000101\uff1b \n```\n{//\u8bf4\u660e\u9700\u8981\u5148\u8df3\u4e00\u6b212\u76840\u6b21\u65b9 \u518d\u8df3\u4e00\u6b212\u76842\u6b21\u65b9\uff1b\n\n\n```cpp\n            x=fa[x][i];\n        }\n    }\n    if(x==y)return x;\n    //\u5230\u8fd9\u91cc x\u548cy \u5df2\u7ecf\u5230\u4e86\u540c\u4e00\u6df1\u5ea6\uff1b \n    for(int i=maxdep;i>=0;i--)//x,y\u540c\u65f6\u5f00\u59cb\u8df3\uff1b \n    {\n        if(fa[x][i]!=fa[y][i])//\u8fd9\u91cc\u9700\u8981\u753b\u4e2a\u56fe\u6765\u6a21\u62df; \n        {\n            x=fa[x][i];y=fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\nvoid getfa()\n{\n    for(int j=1;j<=maxdep+1;j++)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            fa[i][j]=fa[fa[i][j-1]][j-1];//i\u7684 2j\u7956\u5148\u5c31\u662fi\u76842 j-1\u6b21\u65b9\u76842 j-1\u6b21\u65b9\u7956\u5148 \u5f88\u7ed5 \u753b\u4e2a\u56fe\u5c31\u61c2\u4e86\uff1b \n        }\n    }\n}\nint main()\n{\n    //freopen(\"LCA.in\",\"r\",stdin);\n    int x,y;\n    scanf(\"%d%d%d\",&n,&m,&start);\n    for(int i=1;i<=n-1;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        init(x,y);init(y,x);\n    }\n    maxdep=log(n)/log(2)+1;//\u5373\u4e3alog2n \u8fd0\u7528\u4e86\u6362\u5e95\u516c\u5f0f \u5f97\u5230\u6700\u5927\u53ef\u4ee5\u8df3\u7684\u8ddd\u79bb\uff1b \n    dep[start]=1;\n    getdep(start);//\u5148\u83b7\u5f97\u6bcf\u4e00\u7ed3\u70b9\u7684dep\u6df1\u5ea6\uff1b \n    getfa();//\u5f97\u5230\u6bcf\u4e2a\u8282\u70b9\u76842\u7684i\u6b21\u65b9\u500d\u7956\u5148\uff1b \n    int u,v;\n    for(int i=1;i<=m;i++)//\u5728\u7ebf\u627eLCA\uff1b \n    {\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",GO(u,v));\n    }\n    return 0;\n}\n```",
        "postTime": 1479448375,
        "uid": 22873,
        "name": "Hank",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u697c\u4e0a\u7684\u5927\u591a\u5c31\u7528\u7684\u500d\u589e\u6216tarjan\u79bb\u7ebf\uff0c\u521a\u5b66\u4e86\u6811\u5256\u5c31\u6765\u79c0\u4e00\u6ce2(\uffe3\u25bd\uffe3)\"\n\n\u5177\u4f53\u601d\u8def\u53ef\u4ee5\u53c2\u89c1http://blog.csdn.net/wazwaztime/article/details/51416187  \u5f88\u8be6\u7ec6\u5f88\u751f\u52a8\n\n\u52a0\u4e86\u8bfb\u5165\u4f18\u5316\u6700\u540e\u4e09\u4e2a\u70b9\u5e73\u5747400ms\u8fc7\u7684\uff0c\u770b\u4e86\u4e00\u4e0b\u5728\u9898\u89e3\u91cc\u9762\u6548\u7387\u5e94\u8be5\u8fd8\u7b97\u53ef\u4ee5\uff08\u8c8c\u4f3c\u7528\u6811\u5256\u505aLCA\u5e73\u5747\u6548\u7387\u9ad8\u4e8e\u500d\u589e\u548ctarjan\uff1f\n\n\u9001\u4e0a\u4ee3\u7801\u52a0\u4e00\u70b9\u7b80\u7565\u7684\u6ce8\u91ca(\u770b\u4e0d\u61c2\u53ef\u4ee5\u53bb\u4e0a\u9762\u7684\u535a\u5ba2\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int N=500005; \nint head[N],to[N<<1],next[N<<1];\nint n,m,S,pathcnt,edgecnt;\nint dep[N],belong[N],father[N],size[N];//\u7ed3\u70b9\u6df1\u5ea6,\u6240\u5728\u91cd\u94fe,\u5b50\u6811\u5927\u5c0f \nint top[N];  //\u91cd\u94fe\u7684\u9876\u7aef\u8282\u70b9\nvoid dfs(int u){\n    size[u]=1;\n    int maxn=-1,k;\n    for (int i=head[u],v;i;i=next[i]){\n        v=to[i];\n        if (v!=father[u]){\n            father[v]=u,dep[v]=dep[u]+1;\n            dfs(v);\n            size[u]+=size[v];\n            if (size[v]>maxn) maxn=size[v],k=v; \n        } \n    } \n    if (maxn==-1){ //\u6ca1\u6709\u5b50\u7ed3\u70b9,\u62c9\u51fa\u4e00\u6761\u91cd\u8def\u5f84 \n        belong[u]=++pathcnt;\n    } \n    else {\n        for (int i=head[u],v;i;i=next[i]){\n            v=to[i];\n            if (v!=father[u]){\n                if (v==k) belong[u]=belong[v]; //\u91cd\u513f\u5b50\n                else top[belong[v]]=v; \n            } \n        } \n    }\n}\nvoid Cut(){\n    father[S]=0,dep[S]=0;\n    dfs(S);\n    top[belong[S]]=S;\n}\nint query(int u,int v){\n    int x=belong[u],y=belong[v];\n    while (x!=y){\n        if (dep[top[x]]>dep[top[y]])\n            u=father[top[x]],x=belong[u];\n        else v=father[top[y]],y=belong[v];\n    }\n    if (dep[u]<dep[v]) return u;\n    else return v; \n}\nvoid add_edge(int u,int v){\n    to[++edgecnt]=v,next[edgecnt]=head[u],head[u]=edgecnt;\n    to[++edgecnt]=u,next[edgecnt]=head[v],head[v]=edgecnt;\n}\ninline void read(int &x){ //\u8bfb\u5165\u4f18\u5316 \n    x=0; char c; \n    do c=getchar(); while(c<'0'||c>'9');\n    do x=(x<<3)+(x<<1)+c-'0',c=getchar(); while(c>='0'&&c<='9');\n}\nint main()\n{\n    read(n),read(m),read(S);\n    for (int i=1,u,v;i<n;i++) {\n        read(u),read(v);\n        add_edge(u,v); \n    }\n    Cut(); //\u5256\u5206 \n    for (int i=1,u,v;i<=m;i++){\n        read(u),read(v);\n        printf(\"%d\\n\",query(u,v));\n    } \n    return 0; //23333333\n}\n```",
        "postTime": 1477658190,
        "uid": 13661,
        "name": "y553546436",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "lca\u6211\u53ea\u4f1a\u500d\u589e\uff0c\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u548c\u5b9e\u73b0\u7684\u3002\u7136\u800c\u8fd8\u662f\u82b1\u4e86\u5f88\u4e45\u624d\u627e\u5230\u9519\u3002\uff08\u8ba8\u8bba\u91cc\u6709\u6211\u539f\u6765\u7684\u7a0b\u5e8f\u3002\uff09\n\n\n\u9884\u5904\u7406dp\u51faf[i][j]\u8868\u793a\u70b9i\u76842^j\u7684\u7236\u4eb2\uff0cf[i][j]=f[ f[i][j-1],j-1 ];\n\n\n\u4e4b\u540e\u5bf9\u4e8ex,y\uff0c\u5148\u5c06x,y\u8c03\u5230\u540c\u4e00\u6df1\u5ea6\uff0c\u53ef\u4ee5\u628a\u6df1\u5ea6\u5dee\u770b\u6210\u4e8c\u8fdb\u5236\n\n\n```cpp\n delta:=deep[x]-deep[y];\n  while delta>0 do\n  begin\n   j:=delta and(-delta);\n   x:=f[x][trunc(ln(j)/ln(2))];\n   delta:=delta xor j;\n  end;\n```\n\u8fd9\u662f\u6211\u539f\u6765\u7684\u7a0b\u5e8f\uff0c\u601d\u8def\u662f\u4e0d\u9519\u7684\uff0c\u7136\u800ctrunc(ln(j)/ln(2))\u6709\u8bef\u5dee(\u6bd4\u5982trunc(4)=3)\uff0c \u6539\u6210round\u5c31\u5bf9\u4e86(\u6216\u8005trunc(x+minmin),minmin\u662f\u4e00\u4e2a\u6781\u5c0f\u7684\u6570)\u3002\n\n\uff08\u9020\u4e86\u5927\u6570\u636e\uff0c\u6162\u6162\u76d1\u770b\uff0c\u624d\u53d1\u73b0\u3002\uff09\n\n\n\u4e4b\u540e\u7279\u5224x=y\uff0c\u8fd4\u56dex\uff0c\n\n\n\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u7b2c\u4e00\u4e2a\u4f7fx=y\u7684\u4e0a\u5347\u8ddd\u79bb\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6700\u540e\u4e00\u4e2ax<>y\u7684\u4e0a\u5347\u8ddd\u79bb+1\uff0c\n\n\n\u53ea\u8981\u4ece\u5927\u5230\u5c0f\u5c1d\u8bd5\u5b83\u7684\u4e8c\u8fdb\u5236\u5c31\u884c\u4e86\u3002\n\n\n```cpp\n j:=trunc(ln(deep[x])/ln(2)+minmin);\n  while (x<>y)and(j>=0) do\n  begin\n   if f[x][j]<>f[y][j] then begin x:=f[x][j];y:=f[y][j]; end;\n   dec(j);\n  end;\n```\n\uff08\u539f\u6765\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662fdfs\u7206\u4e86\u6808\uff0c\u5e94\u8be5\u662f\u56e0\u4e3a\u5c42\u6570\u592a\u6df1\uff0c\u6539\u6210bfs\u7528\u6570\u7ec4\u5b58\u5c31\u884c\u4e86\u3002\uff09\n```pascal\nconst p=500010;minmin=1e-9;\nvar\n deep,t,a:array[1..p] of longint;\n f:array[1..p,0..20] of longint;\n l:array[1..p*2,1..2] of longint;\n n,q,i,j,fa,x,y,max_j,tail:longint;\n\n procedure swap(var x,y:longint);\n var t:longint;\n begin\n  t:=x;x:=y;y:=t;\n end;\n procedure chmax(var x:longint;y:longint);\n begin\n  if x<y then x:=y;\n end;\n procedure jia(x:longint);\n begin\n  inc(tail);a[tail]:=x;\n end;\n\nprocedure dfs(var x:longint);\nvar i:longint;\nbegin\n if x<>fa then \n begin\n  max_j:=trunc( ln(deep[x])/ln(2)+minmin );\n  for j:=1 to max_j do\n   f[x][j]:=f[f[x][j-1],j-1];\n end;\n\n i:=t[x];\n while i<>0 do\n begin\n  if l[i,1]<>f[x][0] then\n  begin\n   f[l[i,1]][0]:=x;\n   deep[l[i,1]]:=deep[x]+1;\n   jia(l[i,1]);\n  end;\n  i:=l[i,2];\n end;\nend;\n\nfunction lca(x,y:longint):longint;\nvar delta,j:longint;\nbegin\n  if deep[x]<deep[y] then swap(x,y); if y=fa then exit(y);\n  delta:=deep[x]-deep[y];\n  while delta>0 do\n  begin\n   j:=delta and(-delta);\n   x:=f[x][trunc(ln(j)/ln(2)+minmin)];\n   delta:=delta xor j;\n  end;\n\n  if x=y then exit(x);\n  j:=trunc(ln(deep[x])/ln(2)+minmin);\n  while (x<>y)and(j>=0) do\n  begin\n   if f[x][j]<>f[y][j] then begin x:=f[x][j];y:=f[y][j]; end;\n   dec(j);\n  end;\n  exit(f[x][0]);\nend;\n\nbegin\n readln(n,q,fa);\n for i:=1 to n-1 do\n begin\n  read(x,y);\n  l[i,2]:=t[x];t[x]:=i;l[i,1]:=y;\n  l[i+n,2]:=t[y];t[y]:=i+n;l[i+n,1]:=x;\n end;\n\n dfs(fa);\n for i:=1 to n-1 do\n  dfs(a[i]);\n\n for i:=1 to q do\n begin\n  read(x,y);\n  writeln(lca(x,y));\n end;\nend.\n```\n\u53c8\u7528c++\u5199\u4e86\u4e00\u904d\uff0c\u5feb\u4e86200ms\uff08\u5f53\u7136\u4e5f\u56e0\u4e3a\u5199\u7684\u6d41\u7545\u4e86\u5f88\u591a\uff09\u3002\n\n```cpp\n#include<bits/stdc++.h>\nconst int maxn=500000+10;const double minmin=1e-7;\nint maxj,j,i,x,y;\nint num=0,t[maxn],l[maxn*2][2];\nint root,f[maxn][20],deep[maxn];\nint head,tail,a[maxn];\nint delta;\n\nvoid jia(int x,int y)\n{\n    l[++num][1]=t[x];t[x]=num;l[num][0]=y;\n}\n\nvoid bfs()\n{\n    head=0;tail=1;a[1]=root;\n    while (head!=tail)\n    {\n        x=a[++head];\n        for (i=t[x];i;i=l[i][1])\n            if ( (y=l[i][0])!=f[x][0] )\n            {\n                a[++tail]=y;\n                deep[y]=deep[x]+1;\n                f[y][0]=x;\n            }\n        for (j=0;f[x][j];f[x][++j]=f[f[x][j-1]][j-1]) ;\n    }\n}\n\nint lca(int x,int y)\n{\n    if (deep[x]<deep[y]) { j=x;x=y;y=j; }\n    \n    delta=deep[x]-deep[y];\n    while (delta)\n    {\n        j=delta & -delta;\n        x=f[x][(int)(log(j)/log(2)+minmin)];\n        delta^=j;\n    }\n    \n    if (x==y) return x;\n    for (j=maxj;f[x][0]!=f[y][0];--j)\n    if (f[x][j]!=f[y][j])\n    {\n        x=f[x][j];y=f[y][j];\n    }\n    return f[x][0];\n}\n\nint main()\n{\n    freopen(\"1.in\",\"r\",stdin);\n    int n,m;\n    scanf(\"%d%d%d\",&n,&m,&root);\n    maxj=(int)( log(n)/log(2)+minmin );//\u7528(int)\u5c31\u662f\u5f3a\u8f6c\u6210int\u578b,\u800cfloor\u8fd4\u56de\u503c\u662fdouble\u7684\n    for (i=1;i<n;++i) \n    {\n     scanf(\"%d%d\",&x,&y);\n     jia(x,y);jia(y,x);\n    }\n    bfs();\n    for (i=1;i<=m;++i) \n    {\n     scanf(\"%d%d\",&x,&y);\n     printf(\"%d\\n\",lca(x,y));\n    }\n}\n```",
        "postTime": 1477631432,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "N\u8303\u56f450W \u663e\u7136\u53ef\u4ee5\u7528\u500d\u589e\n\n\u5f53\u7136\u4e0d\u8981\u6c42\u5f3a\u5236\u5728\u7ebf \u6240\u4ee5Tarjan\u7684\u79bb\u7ebf\u7b97\u6cd5\u4e5f\u662fok\u7684\n\n\u4f3c\u4e4e\u6d1b\u8c37\u6ca1\u5f00O2 \u6240\u4ee5vector\u5927\u6982\u662f1.5\u500d\u7684\u666e\u901a\u6570\u7ec4\u901f\u5ea6 \u4f1aT\n\n\u8fb9\u8868\u5f00\u94fe\u5f0f\u524d\u5411\u661f \u5c0f\u5e38\u6570\u9ad8\u6548\u7387\n\n\u6700\u540e\u52a0\u8bfb\u5165\u4f18\u5316\u5361\u4e00\u5361\u5e38\u6570 1000+ms\u8fc7\n\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int MAXN = 500000 + 10;\n\ninline int read() {\n    int x = 0, f = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-') f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = x * 10 + ch - '0'; ch = getchar();}\n    return x * f;\n}\n\nint n, m, root, cnt;\nint depth[MAXN], head[MAXN], fa[MAXN][20];\nbool vis[MAXN];\nstruct data { int to, next; }edge[MAXN << 1];\n\ninline void addedge(int u, int v) {\n    edge[++cnt].to = v; edge[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nvoid dfs(int x) {\n    vis[x] = true;\n    for(int i = 1; i <= 18; ++i) {\n        if(depth[x] < (1 << i)) break;\n        fa[x][i] = fa[fa[x][i - 1]][i - 1];\n    }\n    for(int i = head[x]; i; i = edge[i].next) {\n        if(vis[edge[i].to]) continue;\n        depth[edge[i].to] = depth[x] + 1;\n        fa[edge[i].to][0] = x;\n        dfs(edge[i].to);\n    }\n}\n\ninline int lca(int x, int y) {\n    if(depth[x] < depth[y]) swap(x, y);\n    int d = depth[x] - depth[y];\n    for(int i = 0; i <= 18; ++i)\n        if((1 << i) & d) x = fa[x][i];\n    for(int i = 18; i >= 0; --i)\n        if(fa[x][i] != fa[y][i]) {\n            x = fa[x][i];\n            y = fa[y][i];\n        }\n    if(x == y) return x;\n    else return fa[x][0];\n}\n\nint main() {\n    n = read(), m = read(), root = read();\n    for(int i = 1, u, v; i < n; ++i) {\n        u = read(), v = read();\n        addedge(u, v);\n        addedge(v, u);\n    }\n    dfs(root);\n    for(int i = 1, x, y; i <= m; ++i) {\n        x = read(), y = read();\n        printf(\"%d\\n\", lca(x, y));\n    }\n    return 0;\n}\n```",
        "postTime": 1476754427,
        "uid": 18480,
        "name": "Sci_M3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "type\n bi=record\n\ngo,next:longint\n\n```cpp\n end;\nvar\n i,u,v,n,m,xb,s:longint;\n e:array[0..1010000] of bi;\n h,id,ma,size,top,dep,dad,dfn:array[0..510000] of longint;\nprocedure adde(x,y:longint);\nbegin\n inc(xb);\n e[xb].go:=y;\n e[xb].next:=h[x];\n h[x]:=xb\nend;\nprocedure dfs1(x:longint);\nvar\n p,max:longint;\nbegin\n max:=0;\n p:=h[x];\n while p>0 do\n begin\n  if dep[e[p].go]=0 then\n  begin\n   dep[e[p].go]:=dep[x]+1;\n   dad[e[p].go]:=x;\n   dfs1(e[p].go);\n   if size[e[p].go]>max then\n   begin\n    max:=size[e[p].go];\n    ma[x]:=e[p].go\n   end;\n   inc(size[x],size[e[p].go])\n  end;\n  p:=e[p].next\n end;\n inc(size[x])\nend;\nprocedure dfs2(x:longint);\nvar\n p:longint;\nbegin\n inc(xb);\n id[x]:=xb;\n dfn[xb]:=x;\n if ma[x]=0 then exit;\n top[ma[x]]:=top[x];\n dfs2(ma[x]);\n p:=h[x];\n while p>0 do\n begin\n  if (e[p].go<>ma[x])and(id[e[p].go]=0) then\n  begin\n   top[e[p].go]:=e[p].go;\n   dfs2(e[p].go)\n  end;\n  p:=e[p].next\n end\nend;\nprocedure swap(var x,y:longint);\nvar\n t:longint;\nbegin\n t:=x;\n x:=y;\n y:=t\nend;\nfunction lca(x,y:longint):longint;\nvar\n u,v:longint;\nbegin\n u:=x;\n v:=y;\n while top[u]<>top[v] do\n begin\n  if dep[top[u]]>dep[top[v]] then swap(u,v);\n  v:=dad[top[v]]\n end;\n if dep[u]<dep[v] then exit(u)\n  else exit(v)\nend;\nbegin\n readln(n,m,s);\n for i:=1 to n-1 do\n begin\n  readln(u,v);\n  adde(u,v);\n  adde(v,u)\n end;\n dep[s]:=1;\n dad[s]:=0;\n dfs1(s);\n xb:=0;\n top[s]:=s;\n dfs2(s);\n for i:=1 to m do\n begin\n  readln(u,v);\n  writeln(lca(u,v))\n end\nend.\n```\n\u6811\u94fe\u5256\u5206\u6c42\u500d\u589e\u3002\n\u5bf9\u4e8e\u4e00\u68f5\u6811\u4e2d\u7684\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c\u6211\u4eec\u628a\u5176\u4e2d\u5b50\u8282\u70b9\u6700\u591a\u7684\u513f\u5b50\u53eb\u505a\u91cd\u513f\u5b50\uff0c\u5176\u4f59\u7684\u53eb\u505a\u8f7b\u513f\u5b50\u3002\u8fde\u5411\u91cd\u513f\u5b50\u7684\u8fb9\u53eb\u91cd\u8fb9\uff0c\u5176\u4f59\u7684\u53eb\u8f7b\u8fb9\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u4ece\u4e00\u4e2a\u8282\u70b9u\u5230\u5b83\u7684\u4efb\u610f\u8f7b\u513f\u5b50v\uff0csize(u)>=2size(v)\n\n\u6240\u4ee5\uff0c\u4e00\u4e2a\u8282\u70b9\u722c\u5230\u6839\u81f3\u591a\u7ecf\u8fc7logn\u6761\u8f7b\u8fb9\u3002\n\n\u6211\u4eec\u628a\u8fde\u7eed\u7684\u91cd\u8fb9\u79f0\u4e3a\u91cd\u94fe\uff0c\u5219\u4e0d\u53ef\u80fd\u6709\u8fde\u7eed\u4e24\u6761\u91cd\u94fe\uff0c\u6545\u5fc5\u4e3a\u8f7b\u8fb9-\u91cd\u94fe-\u8f7b\u8fb9\u3002\u3002\u3002\n\n\u6240\u4ee5\u6cbf\u7740\u8f7b\u8fb9-\u91cd\u94fe-\u8f7b\u8fb9\u3002\u3002\u3002\u722c\u6811\u81f3\u591a\u8981\u722clogV\u6b21(V\u4e3a\u8282\u70b9\u6570\uff09\n\n\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\u5176\u5b9e\u8fdc\u8fdc\u8fbe\u4e0d\u5230logV\u6b21\uff0c\u6240\u4ee5\u6811\u5256\u5176\u5b9e\u8fd0\u884c\u5f88\u5feb\uff0c\u552f\u4e00\u7f3a\u70b9\u5c31\u662f\u6811\u8d8a\u5e73\u8861\u8d8a\u6162\u3002\uff08\u4e0e\u500d\u589e\u4e0d\u540c\uff0c\u500d\u589e\u662flogh+\u5927\u5e38\u6570\uff0ch\u4e3a\u6df1\u5ea6\uff0c\u6811\u5256\u662flogV+\u5947\u5c0f\u5e38\u6570\uff0cV\u662f\u8282\u70b9\u6570\n",
        "postTime": 1475547601,
        "uid": 19567,
        "name": "zx2003",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u600e\u4e48\u6ca1\u6709\u4e00\u4e2apascal\u7684\u3002\u3002\u3002\n\n\u6211\u6765\u8d34\u4e00\u4e2a\u597d\u4e86\n\n\u8fd9\u9898\u7528tarjan\uff0c\u7b80\u5355\u7684\u6765\u8bf4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\n\n\u2460\u6307\u7236\u94fe\uff08\u90bb\u63a5\u8868\uff09\u5b58\uff0c\u8981\u5b58\u4e24\u4e2a\uff0c\u8fd9\u4e2a\u540e\u9762\u518d\u89e3\u91ca\n\n\u2461\u6df1\u641c\uff1aa  \u5efa\u7acb\u5e76\u67e5\u96c6\n\nb \u82e5\u6b64\u7ed3\u70b9\uff08x\uff09\u5df2\u8d70\u8fc7\uff0c\u4e14\u9700\u8981\u6c42\u89e3\uff0c\u4e14\u4e0e\u4e4b\u76f8\u5173\u7684\u70b9\uff08y\uff09\u4e5f\u8d70\u8fc7\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662fy\u6216x\u7684\u6839\u8282\u70b9\uff08\u4e0d\u662f\u4e25\u683c\u610f\u4e49\u4e0a\u7684\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\uff0c\u540e\u9762\u505a\u89e3\u91ca\uff09\n\nc \u56de\u6eaf\u7684\u65f6\u5019\u5408\u5e76\u5e76\u67e5\u96c6\uff0c\u5207\u8bb0\uff1a\u4e0d\u80fd\u5148\u5408\u5e76\u518d\u5f80\u4e0b\u641c\uff0c\u4e00\u5b9a\u662f\u641c\u5230\u5e95\u518d\u5f80\u4e0a\u5408\u5e76\uff01\uff01\n\n\n\n\n\n\n\n```cpp\nvar\nn,m,a,b,i,tot,s:longint;\nnow,child,pre,pre1,child1,now1,f,id,sum,ans:array[0..1000000]of longint;\nq:array[0..1000000,1..2]of longint;\ncan:array[0..1000000]of boolean;\nfunction find(x:longint):longint;//\u5173\u4e8e\u5e76\u67e5\u96c6\u4e0d\u591a\u89e3\u91ca\uff0c\u8fd9\u91cc\u8981\u8def\u5f84\u538b\u7f29\nbegin\n   if f[x]=x then exit(x);\n   find:=find(f[x]);\n   f[x]:=find;\nend;\nprocedure hb(p,q:longint);//\u5408\u5e76\u5e76\u67e5\u96c6\uff0c\u8fd9\u4e2a\u5927\u5bb6\u5e94\u8be5\u6ca1\u95ee\u9898\nvar pp,qq:longint;\nbegin\n  pp:=find(p);\n  qq:=find(q);\n  if pp<>qq then\n   f[pp]:=qq;\nend;\nprocedure  tar(faa:longint);//tarjan\nvar  fa,son:longint;\nbegin\n    fa:=now1[faa];//\u8fd9\u4e00\u6bb5\u8fd8\u4e0d\u662f\u6df1\u641c\n    can[faa]:=true;//\u6807\u8bb0\u8d70\u8fc7\n    while  fa<>0  do//while \u5f53\u524d\u7684\u70b9\u88ab\u8be2\u95ee do\n       begin\n          son:=child1[fa];//son\u662f\u5f53\u524d\u7ed3\u70b9\u7684\u5b69\u5b50\n          if can[son] then//\n              ans[id[fa]]:=find(son);//\u8fd9\u4e00\u53e5\u662f\u5173\u952e\uff08\u6b64\u65f6find\uff08son\uff09\u5e76\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8def\u5f84\u538b\u7f29\uff09\u4e0d\u53ef\u8a00\u4f20\uff0c\u81ea\u5df1\u4f53\u4f1a\u5427\n          fa:=pre1[fa];//\u627e\u4e0b\u4e00\u4e2a\u4e0e\u4e4b\u6709\u5173\u8054\u7684\u70b9\n       end;\n    fa:=now[faa];//\u6df1\u641c\n    while fa<>0 do//\u8fd8\u6709\u5b69\u5b50\u65f6\n       begin\n          son:=child[fa];\n          if can[son]=false then//\u5982\u679c\u6ca1\u6709\u88ab\u8d70\u8fc7\n            begin\n             tar(son);//\u6df1\u641c\u4e0b\u4e00\u5c42\n             hb(son,faa);//\u56de\u6eaf\u7684\u65f6\u5019\u5408\u5e76\n            end;\n        fa:=pre[fa];\n       end;\nend;\n```\n\uff5b\u4e3b\u7a0b\u5e8f\uff5d\n```cpp\nbegin\n    readln(n,m,s);\n    tot:=0;\n    for i:=1 to n-1 do\n       begin//\u5efa\u7acb\u6307\u7236\u94fe\n          readln(a,b);\n          inc(tot);\n          child[tot]:=a;\n          pre[tot]:=now[b];\n          now[b]:=tot;\n          inc(tot);\n          child[tot]:=b;\n          pre[tot]:=now[a];\n          now[a]:=tot;\n       end;\n    tot:=0;\n   for i:=1 to m do\n     begin//\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8be2\u95ee\u7684\u4e5f\u8981\u76f8\u5173\u8054\uff08\u4f46\u4e0d\u8981\u5c06\u5176\u7406\u89e3\u4e3aa\u662fb\u7684\u7236\u4eb2\u6216\u513f\u5b50\uff0c\u53ea\u662f\u4ed6\u4eec\u4e24\u4e2a\u6709\u5173\u7cfb\uff0c\u5f85\u4f1a\u53ea\u8981\u641c\u5230a\uff0c\u4e14a\u4e0eb\u6709\u5173\u7cfb\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6c42\u89e3\u4e86\n       readln(a,b);\n       q[i,1]:=a;q[i,2]:=b;//\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u4e00\u4f4d\u6570\u7ec4\u5b58\uff0c\u770b\u4e2a\u4eba\u559c\u597d\n       inc(tot);\n       child1[tot]:=a;\n       pre1[tot]:=now1[b];\n       now1[b]:=tot;\n       id[tot]:=i;//\u4ee3\u8868\u5f53\u524d\u8fd9\u4e2a\u94fe\u8868\u662f\u7b2c\u51e0\u4e2a\u8be2\u95ee\uff0c\u5426\u5219\u540e\u9762\u4e0d\u597d\u8bb0\u5f55\u7b54\u6848\uff0c\u8fd9\u91cc\u5927\u5bb6\u81ea\u5df1\u4f53\u4f1a\u6ca1\u6709\u8fd9\u53e5\u8bdd\u7684\u540e\u679c\n       inc(tot);\n       child1[tot]:=b;\n       pre1[tot]:=now1[a];\n       now1[a]:=tot;\n       id[tot]:=i;//\u540c\u4e0a\n     end;\n  for i:=0 to n do\n     f[i]:=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n  tar(s);\n  for i:=1 to m do//\u8f93\u51fa\n     begin\n        writeln(ans[i]);\n     end;\nend.\n\n```",
        "postTime": 1475481083,
        "uid": 17920,
        "name": "\u6545\u4e8b\u548c\u9152",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u500d\u589eLCA\u3002\n\nFa[i][j]\u8868\u793a\u7ed3\u70b9i\u7684\u7b2c2^j\u4e2a\u7956\u5148\u3002\n\n\u6211\u56e0\u4e3a\u6bd4\u8f83\u61d2\uff0c\u6240\u4ee5\u7a0b\u5e8f\u91cc\u7528\u4e8620\u8fd9\u4e2a\u5e38\u91cf\uff08\u5373log MaxN\uff09\uff0c\u5176\u5b9e\u5b8c\u5168\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u6539\u4e3alog N\u751a\u81f3\u662flog H\uff08H\u4e3a\u6811\u7684\u6df1\u5ea6\uff0c\u53ef\u5728\u6784\u6811\u4e2d\u7edf\u8ba1\uff09\uff0c\u4f46\u4e0d\u5f71\u54cd\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nconst size_t    MaxN = 500005;\n\nint    N, M, S;\nint    Deep[MaxN], Fa[MaxN][20];\n\nstruct EdgeTp {\n    int        adj;\n    EdgeTp    *next;\n} ;\nstruct GraphTp {\n    EdgeTp    Edges[MaxN << 1], *Head[MaxN], *Tail;\n    GraphTp() { Tail = Edges; }\n\n    inline void AddEdge(const int& u, const int& v) {\n        *Tail = (EdgeTp) {v, Head[u]};\n        Head[u] = Tail++;\n    }\n    void BuildTree(const int& ci) {\n        for(EdgeTp *j = Head[ci]; j; j = j -> next) {\n            int    i(j -> adj);\n            if(!Deep[i]) {\n                Deep[i] = Deep[ci] + 1, Fa[i][0] = ci;\n                BuildTree(i);\n            }\n        }\n    }\n} G;    //\u4e0d\u8981\u95ee\u6211\u7684\u90bb\u63a5\u8868\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u602a233\n\nint LCA(int u, int v)\n{\n    if(Deep[u] > Deep[v])    //\u4f7fv\u7684\u6df1\u5ea6\u66f4\u6df1\uff0c\u4fbf\u4e8e\u540e\u9762\u5904\u7406\n        swap(u, v);\n\n    int    d(Deep[v] - Deep[u]), i;\n\n    for(i = 0; i < 20; i++)    //\u4f7fu,v\u5230\u8fbe\u540c\u4e00\u5c42\n        if((1 << i) & d)\n            v = Fa[v][i];\n\n    if(u == v)    //\u5df2\u7ecf\u627e\u5230LCA\n        return u;\n\n    for(i = 19; i >= 0; i--)    //\u9010\u6e10\u903c\u8fd1LCA\n        if(Fa[u][i] != Fa[v][i])\n            u = Fa[u][i], v= Fa[v][i];\n\n    return Fa[u][0];\n}\n\nint main()\n{\n    int    u, v;\n\n    cin >> N >> M >> S;\n    for(int i = 1; i < N; i++) {\n        scanf(\"%d%d\", &u, &v);\n        G.AddEdge(u, v), G.AddEdge(v, u);\n    }\n\n    Deep[S] = 1;\n    G.BuildTree(S);    //\u6784\u6811\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6df1\u5ea6\u548cFa[i][0]\u3002\n    for(v = 1; v < 20; v++)    //\u9884\u5904\u7406\uff0c\u6613\u5f97Fa[i][j]=Fa[Fa[i][j-1]][j-1]\n        for(u = 1; u <= N; u++)\n            Fa[u][v] = Fa[Fa[u][v - 1]][v - 1];\n\n    while(M--) {\n        scanf(\"%d%d\", &u, &v);\n        printf(\"%d\\n\", LCA(u, v));\n    }\n\n    return 0;\n}\n```",
        "postTime": 1474808887,
        "uid": 3144,
        "name": "\u6d6e\u5c18ii",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u6211\u5728\u8fd9\u91cc\u5e76\u4e0d\u60f3\u5206\u6790\u7b97\u6cd5\u548c\u590d\u6742\u5ea6\u3002\u5982\u679c\u6811\u94fe\u5256\u5206\u6c42LCA\u7684\u65b9\u6cd5\u60a8\u8fd8\u4e0d\u4f1a\uff0c\u90a3\u8bf7\u542c\u4e00\u4e0b\u7b80\u77ed\u7684\u89e3\u91ca\uff0c\u518d\u4e0d\u61c2\u8bf7\u79fb\u6b65\u5176\u4ed6\u9898\u89e3\u3002\n\n> \u4e2a\u4eba\u7406\u89e3\uff0c\u6811\u5256\u5c31\u662f\u8ba9\u6bcf\u4e2a\u5206\u652f\u8282\u70b9\u4e0b\u5ef6\u4f38\u51fa\u4e00\u6761\u8def\u5f84\uff0c\u79f0\u4e3a\u201c\u91cd\u94fe\u201d\u3002\u5f53\u7136\u4f60\u53ef\u4ee5\u968f\u673a\u9009\u8fb9\uff0c\u4f46\u662f\u8fd9\u6837\u5c31\u4e0d\u80fd\u5f88\u597d\u5730\u89e3\u51b3\u5b50\u6811\u5927\u5c0f\u60ac\u6b8a\u5bfc\u81f4\u5728\u4e00\u68f5\u201c\u679d\u7e41\u53f6\u8302\u201d\u7684\u6811\u4e0a\u8df3\u6765\u8df3\u53bbTLE\u7684\u95ee\u9898\u3002\u7136\u540e\u4fdd\u5b58\u8d77dep[]\uff08\u8282\u70b9\u6df1\u5ea6\uff09,fa[]\uff08\u7236\u4eb2\u8282\u70b9\uff09,top[]\uff08\u6700\u5173\u952e\u7684\uff0c\u8be5\u91cd\u94fe\u7684\u6700\u9876\u7aef\u8282\u70b9\uff09\u3002\n\n> \u5bf9\u4e8e\u4e00\u7ec4\u8be2\u95ee\uff08x,y\uff09\uff0c\u4e0d\u65ad\u5c1d\u8bd5\u8ba9top[]\u6df1\u5ea6\u8f83\u5927\u7684\u4e00\u70b9\u79fb\u5230fa[top[x/y]]\u5904\uff08\u6b63\u786e\u6027\uff1a\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ea\u6709\u4e00\u6761\u5411\u5b50\u4f38\u51fa\u7684\u91cd\u94fe\uff0c\u4e0d\u4f1a\u6709\u4e24\u70b9top[]\u76f8\u7b49\u800c\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\uff1b\u9ad8\u6548\u6027\uff1a\u56e0\u4e3a\u91cd\u94fe\u5b89\u6392\u5728\u5b50\u6811\u6700\u5927\u7684\u4e00\u7aef\uff0c\u6bcf\u6b21\u8df3\u7684\u9ad8\u5ea6\u662f\u6700\u4f18/\u8f83\u4f18\u7684\uff09\u3002\u77e5\u9053top[x]==top[y]\uff0c\u8fd9\u65f6x\uff0cy\u4e2d\u66f4\u9ad8\u7684\u70b9\u5c31\u662fLCA\u3002\n\n\u63a5\u4e0b\u6765\u8bb2\u8bb2\u5bf9\u4e8e\u8fd9\u9053\u9898\u7684\u4f18\u5316\u7a7a\u95f4\u3002\n\n### \u7a7a\u95f4\n\n\u4e00\u822c\u6807\u51c6\u6811\u5256\u8981\u8bb0$7$\u4e2a\u6570\u7ec4\uff08\u8fd9\u4e0d\u662f\u6bd4\u70e6\u4eba\u7684$Tarjan$\u8fd8\u591a\u5417\uff09\uff1a\n\n1. dep[]//\u6df1\u5ea6\n2. fa[]//\u7236\u4eb2\n3. size[]//\u5b50\u6811\u5927\u5c0f\n4. son[]//\u91cd\u513f\u5b50\n5. top[]//\u91cd\u94fe\u9876\u7aef\n6. seg[]//\u7ebf\u6bb5\u6811\u7f16\u53f7\n7. rev[]//seg[]\u7684\u53cd\u51fd\u6570\n\n\u9996\u5148\u7ebf\u6bb5\u6811\u6211\u4eec\u4e0d\u8981\u7ba1\u3002\u8fd9\u5c31\u8981\u8bb05\u4e2a\u503c\uff0cdep[],fa[],top[]\u90fd\u662f\u4e0d\u80fd\u5c11\u7684\uff0c\u4e8b\u5b9e\u8bc1\u660eson[]\u4f60\u4e0d\u8bb0\u4e5f\u4e0d\u884c\uff08\u8ba1\u7b97top[]\u662f\u57fa\u4e8eson[]\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u800cson[]\u662f\u57fa\u4e8esize[]\u81ea\u5e95\u5411\u4e0a\u7684\uff09\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528size\u3002\n\n\u5728\u8fd4\u56deDfs1()\u7684\u65f6\u5019\u8fd4\u56desize\u7ed9\u7236\u8282\u70b9\u7528\u5c31\u884c\u4e86\u3002\n\n```cpp\nint Dfs1(const int v,const int fath){\n      fa[v]=fath;\n      dep[v]=dep[fath]+1;\n      \n      int size=1,maxs=0,mi=0;\n      for(register int i=in[v];i;i=e[i].nxt){\n        int u=e[i].y;\n        if(u==fath)continue;\n        \n        int s=Dfs1(u,v);\n        size+=s;\n        if(s>maxs){\n          maxs=s;\n          mi=u;\n        }\n      }\n      son[v]=mi;\n      return size;\n   }\n```\n### \u65f6\u95f4\n\n\u8fd9\u5df2\u7ecf\u5361\u5361\u5c31\u8dd1\u98de\u5feb\u4e86\u7684\uff0c\u597d\u50cf\u4e5f\u52a0\u901f\u4e0d\u5230\u54ea\u91cc\u53bb\u3002\n\n\u6700\u540e\uff0c\u8bb2\u8bb2\u98ce\u683c\u3002\u6211\u559c\u6b22\u4e0d\u5199$using namespace std;$\u5e76\u5f00$namespace LCA{}$\u3002\u4f7f\u6a21\u677f\u66f4\u52a0\u6e05\u6670\u3002\n\n~~\u770b\u6765\u8fd9\u8f88\u5b50\u548c$namespace$\u662f\u8fc7\u4e0d\u53bb\u4e86~~\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#define maxn 500001\n\ninline int read(){\n    int x=0;char ch=getchar();\n    while(ch>'9'||ch<'0')ch=getchar();\n    do x=x*10+ch-48,ch=getchar();while(ch>='0'&&ch<='9');\n    return x;\n}\nconst int n=read(),m=read(),s=read();//const read\u6076\u4e60\u4e0d\u6539~~~\n\nstruct Edge{\n    int x,y,nxt;\n}e[maxn<<1];\nint in[maxn],tot;\ninline void ins(const int x,const int y){\n    e[++tot].x=x;\n    e[tot].y=y;\n    e[tot].nxt=in[x];\n    in[x]=tot;\n}\n\nnamespace LCA{\n   int dep[maxn],son[maxn],fa[maxn],top[maxn];\n   int Dfs1(const int v,const int fath){\n      fa[v]=fath;\n      dep[v]=dep[fath]+1;\n      \n      int size=1,maxs=0,mi=0;\n      for(register int i=in[v];i;i=e[i].nxt){\n        int u=e[i].y;\n        if(u==fath)continue;\n        \n        int s=Dfs1(u,v);\n        size+=s;\n        if(s>maxs){\n          maxs=s;\n          mi=u;\n        }\n      }\n      son[v]=mi;\n      return size;//\u4f18\u5316\u7a7a\u95f4\n   }\n   void Dfs2(const int v,const int fath){\n      for(register int i=in[v];i;i=e[i].nxt){\n        int u=e[i].y;\n        if(u==fath)continue;\n        if(u==son[v])\n          top[u]=top[v];\n        else \n          top[u]=u;\n        Dfs2(u,v);\n      }\n   }\n   inline int LCA(int x,int y){\n      while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])\n          std::swap(x,y);\n        x=fa[top[x]];\n      }\n      return dep[x]<dep[y]?x:y;\n   }\n}\n\nvoid test(){//\u6d4b\u8bd5\u73af\u8282\n    using namespace LCA;\n    for(register int i=1;i<=n;i++)\n      std::printf(\"%d dep=%d son=%d fa=%d top=%d\\n\",i,dep[i],son[i],fa[i],top[i]);\n    puts(\"\");\n}\nint main(){\n    for(register int i=1;i<n;i++){\n      int x=read(),y=read();\n      ins(x,y);ins(y,x);\n    }\n    LCA::Dfs1(s,0);\n    LCA::top[s]=s;//\u522b\u5fd8\u4e86\u8fd9\u53e5\uff0c\u4f60\u8981\u4e0d\u5199\u5c31\u4f1a\u589e\u52a0\u5f88\u591a\u65f6\u95f4\u548c\u4ee3\u7801\n    LCA::Dfs2(s,0);\n    \n    //test();\n    \n    for(register int i=1;i<=m;i++){\n      int x=read(),y=read();\n      std::printf(\"%d\\n\",LCA::LCA(x,y));//\u559c\u6b22\u4e3b\u7a0b\u5e8f\u548cnamespace \u5f00\u540c\u540d\n    }\n    //getchar(),getchar();\n    return 0;\n}\n```",
        "postTime": 1571755612,
        "uid": 219595,
        "name": "Vocalise",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "#### \u9898\u89e3\u597d\u591a\uff0c\u6211\u518d\u5199\u4e00\u7bc7\u5427\uff0c\u8fc7\u4e0d\u8fc7\u65e0\u6240\u8c13\uff0c\u81ea\u5df1\u7406\u4e00\u7406\u601d\u8def\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstdlib> \nusing namespace std;\nconst int ONE=567890;//\u8282\u70b9\u6570 \nint N,M,S;// \nint x,y;// \nint nmb[ONE<<1],first[ONE<<1],go[ONE<<1],tot;//\u524d\u5411\u661f\u5b58\u56fe \nint Dep[ONE];// \u8282\u70b9\u6df1\u5ea6 \nint f[ONE][21];// \u500d\u589e \nvoid add(int u,int v){//add two edges in one time \n\tnmb[++tot]=first[u];first[u]=tot;go[tot]=v;\n\tnmb[++tot]=first[v];first[v]=tot;go[tot]=u; \n}\nvoid Deal_first(int u,int father)//\u9884\u5904\u7406 \n{\n\tDep[u]=Dep[father]+1;//\u81ea\u5df1\u7684\u6df1\u5ea6\u662f\u81ea\u5df1\u7236\u4eb2\u6df1\u5ea6\u52a0\u4e00 \n\tfor(int i=0;i<=19;i++) \n\t{\n\t\tf[u][i+1]=f[f[u][i]][i];//\u81ea\u5df1\u7236\u4eb2\u7684\u500d\u589e\u662f\u81ea\u5df1\u500d\u589e\u52a0\u4e00\n\t } \n\tfor(int e=first[u];e;e=nmb[e])//\u904d\u5386\u53d1\u51fa\u7684\u8fb9 \n\t{\n\t\tint v=go[e];//v\u4e3a\u672b\u7aef\u70b9 \n\t\tif(v==father)continue;//\u56e0\u4e3a\u53cc\u5411\u5b58\u56fe\uff0cso\u6709\u6761\u8fb9\u6307\u5411\u81ea\u5df1\u7684\u7236\u4eb2 \n\t\tf[v][0]=u;//\u500d\u589e\u4e00\u4e3a\u81ea\u5df1\u7684\u7236\u4eb2 \n\t\tDeal_first(v,u);//\u7ee7\u7eed\u641c\u7d22 \n\t}\n}\nint LCA(int x,int y)//\u6c42LCA \n{\n\tif(Dep[x]<Dep[y])swap(x,y);//\u4f7fx\u4e3a\u6df1\u7684\u70b9\uff1b \n\tfor(int i=20;i>=0;i--)\n\t{\n\t\tif(Dep[f[x][i]]>=Dep[y])x=f[x][i];//\u500d\u589e\u4f7fx\u4e0ey\u5728\u540c\u4e00\u6df1\u5ea6 \n\t\tif(x==y)return x;//\u5047\u5982y\u662fx\u7684\u6839\u8282\u70b9\uff0c\u8fd4\u56de\uff1b \n\t}\n\tfor(int i=20;i>=0;i--)//x\uff0cy\u540c\u65f6\u500d\u589e \n\t{\n\t\tif(f[x][i]!=f[y][i])//\u5047\u5982\u6ca1\u6709\u627e\u5230\u7956\u5148\u5219\u8fdb\u884c\u500d\u589e \n\t\t{\n\t\t\tx=f[x][i];\n\t\t\ty=f[y][i];\n\t\t}\n\t\telse;//\u5047\u5982\u627e\u5230\u540c\u4e00\u7956\u5148\uff0c\u500d\u589e\u53d8\u5c0f\u3002 \n\t}\n\treturn f[x][0];//\u56e0\u4e3a\u500d\u589e\u540e\uff0cx\u4e0ey\u4f4d\u4e8e\u540c\u4e00\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\uff0c\u8981\u8fd4\u56de\u4ed6\u4eec\u7684\u7236\u4eb2\u3002 \n}\nint main()\n{\n\tcin>>N>>M>>S;\n\tfor(int i=1;i<N;i++)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y);\n\t}\n\tDeal_first(S,0);\n\twhile(M--)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tprintf(\"%d\\n\",LCA(x,y));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1570187383,
        "uid": 158869,
        "name": "\u76e7\u92c5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "20\u884c\u7684 $\\mathrm{LCT}$ \u4e86\u89e3\u4e00\u4e0b~\n\n\u5177\u4f53\u505a\u6cd5\u5c31\u662f\uff0c\u5728 `access` \u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u8fd4\u56de\u6700\u540e\u4e00\u6b21\u865a\u5b9e\u94fe\u53d8\u6362\u65f6\u865a\u8fb9\u7236\u8282\u70b9\u7684\u503c\uff0c\u90a3\u4e48\u63a5\u8fde\u4e24\u6b21 `access` \u7684\u540e\u4e00\u6b21\u7684\u8fd4\u56de\u503c\u5c31\u662f\u4e24\u4e2a\u8282\u70b9\u7684 $\\mathrm{LCA}$\u3002\n\n\u7531\u4e8e\u53ea\u9700\u8981\u7ef4\u62a4 $\\mathrm{LCA}$\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u7ffb\u8f6ctag\uff0c\u522b\u7684\u4fe1\u606f\u4e0d\u7528\u7ef4\u62a4\uff0c\u8fd9\u6837\u65e2\u51cf\u5c11\u4e86\u7801\u91cf\uff0c\u5e38\u6570\u4e5f\u80fd\u9002\u5f53\u5c0f\u4e00\u70b9~~\u867d\u7136\u8fd8\u662f\u90a3\u4e48\u5927\u3002~~\n\n\u4e0a\u4ee3\u7801~\uff1a\n\n```cpp\n#include <bits/stdc++.h>\ninline int read() {char ch = getchar(); int r = 0, w = 1; while(!isdigit(ch)) {if(ch == '-') w = -1; ch = getchar();} while(isdigit(ch)) {r = r * 10 + ch - '0', ch = getchar();} return r * w;}\nconst int N = 5e5 + 6;\nint n, m, S, x, y, ch[N][2], fa[N], tag[N], s[N];\nvoid pushdown(int o) {if(tag[o]) tag[o] ^= 1, tag[ch[o][0]] ^= 1, tag[ch[o][1]] ^= 1, std::swap(ch[o][0], ch[o][1]);}\nbool get(int o) {return ch[fa[o]][1] == o;}\nbool isrt(int o) {return ch[fa[o]][0] != o && ch[fa[o]][1] != o;}\nvoid rotate(int x) {int y = fa[x], z = fa[y], chk = get(x); if(!isrt(y)) ch[z][ch[z][1] == y] = x; ch[y][chk] = ch[x][chk ^ 1], fa[ch[x][chk ^ 1]] = y, ch[x][chk ^ 1] = y, fa[y] = x, fa[x] = z;}\nvoid splay(int x) {int top; s[top = 1] = x; for(register int i = x; !isrt(i); i = fa[i]) s[++top] = fa[i]; while(top) pushdown(s[top--]); for(register int f; f = fa[x], !isrt(x); rotate(x)) {if(!isrt(f)) rotate(get(f) == get(x) ? f : x);}}\nint access(int x) {int o; for(o = 0; x; o = x, x = fa[x]) splay(x), ch[x][1] = o; return o;}\nvoid mkrt(int x) {access(x); splay(x); tag[x] ^= 1;}\nvoid link(int x, int y) {mkrt(x); fa[x] = y;}\n\nint main() {\n\tn = read(), m = read(), S = read();\n\tfor(register int i = 1; i < n; i++) x = read(), y = read(), link(x, y);\n\tmkrt(S);\n\twhile(m--) x = read(), y = read(), access(x), printf(\"%d\\n\", access(y));\n\treturn 0;\n}\n```",
        "postTime": 1569662971,
        "uid": 104841,
        "name": "Minakami_Yuki",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09"
    },
    {
        "content": "- \u7b97\u6cd5\uff1a\n\n\u9996\u5148\u6211\u4eec\u80fd\u60f3\u51fa\u4e00\u79cd\u66b4\u529b\u7b97\u6cd5\uff1a\u5148\u628a\u6df1\u5ea6\u9ad8\u7684\u70b9\u8df3\u5230\u548c\u6df1\u5ea6\u4f4e\u7684\u70b9\u7684\u540c\u4e00\u5c42\uff0c\u7136\u540e\u4ed6\u4eec\u4fe9\u4e00\u8d77\u5f80\u4e0a\u8df3\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u76f8\u9047\u4e86\uff0c\u5f53\u524d\u70b9\u5c31\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u4f46\u53ef\u60dc\u4f1a\u8d85\u65f6\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u4f18\u5316\u3002\n\n- \u4f18\u5316\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u8df3\u7684\u8fc7\u7a0b\u4f18\u5316\u4e00\u4e0b\uff0c\u539f\u6765\u662f\u4e00\u4e2a\u4e00\u4e2a\u5f80\u4e0a\u8df3\uff0c\u901f\u5ea6\u592a\u6162\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u4f18\u5316\u4e00\u4e0b\uff0c2\u7684n\u6b21\u65b9\u8fd9\u6837\u5f80\u4e0a\u8df3\u3002\u5df2\u77e5fa[u][i]\u8868\u793au\u7684\u7b2c2\u7684i\u6b21\u65b9\u4e2a\u7956\u5148\uff08fa[u][0]\u5c31\u662fu\u7684\u7236\u4eb2\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(n log n)\n\n- \u6d41\u7a0b\uff1a\n\n1. \u6211\u4eec\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u70b9\u76842\u7684i\uff080 <= i <= \u4e0a\u9650\uff08\u4e0a\u9650\u76f4\u63a5\u752820\u4e5f\u884c\uff09\uff09\u6b21\u65b9\u7684\u7236\u4eb2\u548c\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\n2. \u7136\u540e\u5c06\u4e24\u4e2a\u70b9\u4e2d\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u4e0e\u53e6\u4e00\u70b9\u5728\u540c\u6837\u7684\u6df1\u5ea6\n3. \u8fdb\u884c\u7279\u5224\u662f\u5426\u4e24\u4e2a\u70b9\u91cd\u5408\u4e86\uff08\u91cd\u5408\u4e86\u5c31\u4e0d\u7528\u5411\u4e0a\u8df3\u4e86\uff09\n4. \u7136\u540e\u4e24\u4e2a\u70b9\u4e00\u8d77\u5411\u4e0a\u8df32\u7684i\uff08i\u4ece\u5927\u5230\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u6837\u4fdd\u8bc1\u6709\u6b63\u786e\u6027\uff09\u6b21\u65b9\uff08\u524d\u63d0\u662f\u4e0d\u80fd\u91cd\u5408\uff09\uff0c\u6700\u540e\u4ed6\u4eec\u4f1a\u8df3\u5230\u4ed6\u4eec\u7684LCA\u7684\u513f\u5b50\u4e0a\uff08\u81ea\u884c\u7406\u89e3\uff09\n5. \u6700\u540e\u8fd4\u56de\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u7236\u4eb2\u5c31\u662f\u4ed6\u4eec\u4e24\u4e2a\u7684LCA\n\n- \u5168\u6587 + \u4ee3\u7801\uff1a\n\nhttps://www.cnblogs.com/qqq1112/p/11448165.html",
        "postTime": 1567832785,
        "uid": 143681,
        "name": "Strong_Jelly",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "# tarjan\u89e3\u6cd5\n\u597d\u50cf\u5f88\u5c11\u6709\u4eba\u5199tarjan\u52a0\u5e76\u67e5\u96c6\u7684\u9898\u89e3\uff0c\u5728\u8fd9\u91cc\u7ed9\u51fa\u6765\u4e00\u4e2a\u3002   \n\u65f6\u95f4\u590d\u6742\u5ea6O(n+q)\u5bf9\u4e8e\u8fd9\u9898\u4e5f\u5c31\u662f1e6\uff0c\u8db3\u591f\u4e86\n#### \u601d\u8def\uff1a\ntarjan\u662f\u4e00\u79cd\u79bb\u7ebf\u7b97\u6cd5\uff0c\u5148\u8bfb\u5b8c\u8be2\u95ee\uff0c\u8dd1\u5b8cdfs\u4e4b\u540e\u518d\u6309\u5e8f\u8f93\u51fa\u3002     \n\u4ece\u6811\u6839\u5f00\u59cbdfs\u641c\u7d22\uff0c\u5148\u5c06\u5f53\u524d\u8282\u70b9\u6807\u4e3a\u5df2\u8bbf\u95ee\uff0c\u5f00\u59cb\u5904\u7406\u4e0e\u8fd9\u4e2a\u70b9\u6709\u5173\u7684\u8be2\u95ee\uff0c\u4f8b\u5982\u6211\u4eec\u73b0\u5728\u5904\u7406u\u548cv\u7684LCA\uff0c\u5f53\u524d\u8bbf\u95ee\u5230\u4e86u\uff0c\u90a3\u4e48\u68c0\u6d4bv\u662f\u5426\u88ab\u8bbf\u95ee\uff0c\u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48LCA(u,v)\u5c31\u7b49\u4e8ev\u5c42\u6570\u6700\u6df1\u7684\u516c\u5171\u7956\u5148\u8282\u70b9\u3002      \n\u600e\u6837\u627e\u5230u\u548cv\u7684\u8fd9\u4e2a\u7956\u5148\u8282\u70b9\u5462\uff1f\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u4e00\u4e2a\u6570\u7ec4fa[i]\uff0c\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u67e5\u627e\u72b6\u6001\u4e0bi\u8282\u70b9\u5c42\u6570\u6700\u6df1\u7684\u7956\u5148\u3002u\u548cv\u6240\u9700\u7684\u7956\u5148\u8282\u70b9\u5c31\u662f\u4ecev\u5f00\u59cb\u5411\u4e0a\u67e5\u627e\u5230\u7684\u7b2c\u4e00\u4e2af[i]==i\u7684\u8282\u70b9\uff0cfa[i]\u521d\u59cb\u72b6\u6001\u4e0b\u5c31\u7b49\u4e8ei\uff0c\u53ea\u6709\u5728\u904d\u5386\u5b8c\u5b83\u7684\u6240\u6709\u5b50\u6811\u4e4b\u540e\uff0c\u624d\u4f1a\u66f4\u65b0\u4e3a\u5b83\u7684\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5728\u4e8e\uff0c\u82e5u\u548cv\u7684LCA\u5c31\u662fi\uff0c\u90a3\u4e48\u5728\u904d\u5386\u5230u\u7684\u65f6\u5019\uff0cfa[i]\u4e00\u5b9a\u4ecd\u7136\u7b49\u4e8ei\uff0c\u800c\u904d\u5386\u5b8cu\u7684\u6574\u68f5\u5b50\u6811\u4e5f\u6ca1\u6709\u627e\u5230v\uff0c\u90a3\u4e48f[u]\u5c31\u4f1a\u66f4\u65b0\u4e3au\u7684\u7236\u8282\u70b9\uff0c\u540c\u7406v\u4e5f\u662f\uff0c\u6700\u7ec8\u53ea\u6709\u5b83\u4eec\u7684LCA\u4e5f\u5c31\u662fi\u7684fa[i]\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u516c\u5171\u7956\u5148\u4e5f\u5c31\u662fi\u4e86\u3002     \n\u8fd9\u91cc\u501f\u52a9\u4e86\u5e76\u67e5\u96c6\u7684\u601d\u60f3\uff0c\u5e76\u4e14\u4e3a\u4e86O(1)\u65f6\u95f4\u5185\u627e\u5230\u6240\u9700\u7684\u7956\u5148\u8282\u70b9\uff0c\u9700\u8981\u8fdb\u884c\u8def\u5f84\u538b\u7f29\u3002    \n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=5e5+5;\nconst int inf=0x3f3f3f3f;\nconst int maxm=N<<1;\n\nint e[maxm],nx[maxm],st[maxm];\nstruct point\n{\n    int to;\n    int i;\n    point(int tto,int ii):to(tto),i(ii){}\n};\nint tot,fa[N],vis[N],ans[N];\nvector <point> ask[N];\n\nvoid init()\n{\n    tot=0;\n    memset(vis,0,sizeof(vis));\n    memset(st,0,sizeof(st));\n}\nvoid add(int x,int y)\n{\n    tot++;\n    e[tot]=y;\n    nx[tot]=st[x];\n    st[x]=tot;\n}\n\nint father(int x)\n{\n    return fa[x]==x ? x : fa[x]=father(fa[x]);\n}\n\nvoid dfs(int v)\n{\n    vis[v]=1;\n    for(auto p : ask[v])\n    {\n        if(vis[p.to] && !ans[p.i])\n            ans[p.i]=father(p.to);\n    }\n    for(int i=st[v];i;i=nx[i])\n    {\n        if(!vis[e[i]])\n        {\n            dfs(e[i]);\n            fa[e[i]]=v;\n        }\n    }\n}\n\nint main()\n{\n    int n,q,root,x,y;\n    init();\n    scanf(\"%d%d%d\",&n,&q,&root);\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n        fa[i]=i;\n    }\n    fa[n]=n;\n    for(int i=1;i<=q;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        ask[x].push_back(point(y,i));\n        ask[y].push_back(point(x,i));\n        ans[i]=0;\n    }\n    dfs(root);\n    for(int i=1;i<=q;i++)\n    {\n        printf(\"%d\\n\",ans[i]);\n    }\n    system(\"pause\");\n    return 0;\n}\n```\n\u5bf9\u4e86\uff0c\u8fd9\u91cc\u67e5\u8be2\u6570\u7ec4\u5fc5\u987b\u53cc\u5411\uff0c\u5373\u65e2\u6807\u8bc6LCA(u,v)\u4e5f\u6807\u8bc6LCA(v,u)\uff0c\u9632\u6b62\u6f0f\u67e5",
        "postTime": 1567770817,
        "uid": 221906,
        "name": "RicheyJang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u849f\u84bb\u624b\u6b8b\u515a\u82b1\u4e86\u4e00\u4e2a\uff08\u7528\u6765\u590d\u4e60\u521d\u8d5b\u7684\uff09\u65e9\u4e0a\u5199\u7684bi~\u4e1c\u897f\uff0c\u52a0\u5f3a\u4e00\u4e0b\u5bf9\u6811\u5256\u7684\u7406\u89e3\n\n\u4e2a\u4eba\u8ba4\u4e3a\u6811\u94fe\u5256\u5206\u7684\u4ee3\u7801\u662f\u771f\u7684\u597d\u5199\uff0c\u6c42LCA\u4e5f\u662f\u6811\u5256\u7684\u7b80\u5355\u5e94\u7528\u7f62\u4e86\uff08\u6bd5\u7adf\u522b\u7684\u6811\u5256\u9898\u662f\u771f\u7684\u96be\uff09\uff08\u6982\u5ff5\u8bf7\u81ea\u884c\u767e\u5ea6\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint n,m,s,rx,ry,k;\nint head[500005],next[1000005],to[1000005];//\u90bb\u63a5\u8868\u5b58\u56fe\nint def[500005],lgr[500005],son[500005],kfa[500005],fad[500005];\n//\u4f9d\u6b21\u8868\u793a\uff1a\u70b9\u6df1\u5ea6\uff08\u6839\u4e3a1\uff09\uff0c\u5b50\u6811\u5927\u5c0f\uff0c\u91cd\u513f\u5b50\uff0c\u81ea\u5df1\u6240\u5728\u91cd\u94fe\u7684\u9876\u7aef\uff0c\u7236\u4eb2\ninline void addline(int st,int ed)\n{\n    ++k;\n    next[k]=head[st];\n    head[st]=k;\n    to[k]=ed;\n}\ninline void iread(int &c)\n{\n    char p='k';c=0;\n    while((p<'0')||(p>'9'))p=getchar();\n    while((p>='0')&&(p<='9')){c=c*10+p-'0';p=getchar();}\n}\nvoid dfs1(int poi,int fa)\n{\n    def[poi]=def[fa]+1;\n    fad[poi]=fa;\n    int maxson=1;\n    lgr[poi]=1;\n    for(int i=head[poi];i;i=next[i])\n    {\n    \tif(to[i]==fa)continue;\n        dfs1(to[i],poi);\n        lgr[poi]+=lgr[to[i]];\n        if(lgr[to[i]]>maxson)son[poi]=to[i],maxson=lgr[to[i]];\n        //1.\u9009\u62e9\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u4e00\u4e2a\u70b9\u4e3a\u91cd\u513f\u5b50\uff1b2.\u82e5\u4e0b\u9762\u5747\u4e3a\u53f6\u5b50\uff0c\u5219\u901a\u8fc7\u8bbe\u7f6emaxson=1\u4fdd\u8bc1\u5168\u4e0d\u4e3a\u91cd\u513f\u5b50\uff08\u521a\u5f00\u59cb\u88ab\u8fd9\u4e2a\u5361\u6389\u4e86\u4e09\u4e2a\u70b9\uff0c\u6211\u4e5f\u6ca1\u660e\u767d\u4e3a\u4ec0\u4e48\uff09\n    }\n}\nvoid dfs2(int poi,int fa)\n{\n    for(int i=head[poi];i;i=next[i])\n    {\n        if(to[i]==fa)continue;\n        if(to[i]==son[poi])kfa[to[i]]=kfa[poi];\n        else kfa[to[i]]=to[i];\n        dfs2(to[i],poi);\n    }\n}\ninline int LCA(int a,int b)\n{\n    while(kfa[a]!=kfa[b])def[kfa[a]]<=def[kfa[b]]?(b=fad[kfa[b]]):(a=fad[kfa[a]]);\n    return (def[a]<=def[b]?a:b);\n    //\u5047\u5982\u4e0d\u5728\u4e00\u6761\u91cd\u94fe\u4e0a\uff0c\u5219\u5c06\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u5f80\u4e0a\u8df3\uff0c\u76f4\u5230\u5230\u8fbe\u540c\u4e00\u6761\u91cd\u94fe\n    //\u5426\u5219\uff0c\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u5c31\u662fLCA\n}\nint main()\n{\n    iread(n);iread(m);iread(s);\n    for(int i=1;i<n;i++)\n    {\n        iread(rx);iread(ry);\n        addline(rx,ry);\n        addline(ry,rx);\n    }\n    dfs1(s,0);\n    kfa[s]=s;//\u7531\u4e8e\u5199\u6cd5\u4e0a\u548c\u5176\u4ed6\u5927\u4f6c\u7684\u5dee\u5f02\uff0c\u6211\u7684dfs2\u6709\u70b9\u4e0d\u540c\uff0c\u53ef\u4ee5\u53c2\u7167\n    dfs2(s,0);\n    for(int i=1;i<=m;i++)\n    {\n    \tiread(rx);iread(ry);\n    \tprintf(\"%d\\n\",LCA(rx,ry));\n    }\n    return 0;\n}\n\n```\n\u987a\u4fbf\u819c\u4e00\u4e0b @YZ_HL \u5927\u4f6c\uff08\u5230\u5e95\u8981\u600e\u4e48@\u522b\u4eba\u554a\u5582\uff09",
        "postTime": 1539404443,
        "uid": 80068,
        "name": "\u9022\u79cb\u5546\u72ec\u5b63",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u770b\u5230\u9898\u89e3\u4e86\u5168\u90e8\u90fd\u662fDFS\u7248\u672c\uff0c\u53ef\u80fd\u6709\u4eba\u51fa\u4e8e\u4fe1\u4ef0\u4f1a\u60f3\u8981BFS\u7684\u677f\u5b50\uff0c\u6240\u4ee5\u6765\u8d21\u732e\u4e00\u53d1BFS\u7248\u672c\u7684\u500d\u589e\u4f18\u5316\u7684LCA=-=\u3002\n\u500d\u589e\u4f18\u5316LCA\u6b65\u9aa4\n1.\u8bbed[x]\u8868\u793ax\u7684\u6df1\u5ea6\u3002\u8bbed[x] >= d[y]   (\u5426\u5219\u53ef\u4ea4\u6362x, y)\n\n2.\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628ax\u5411\u4e0a\u8c03\u6574\u5230\u4e0ey\u540c\u4e00\u6df1\u5ea6\n  \n\u5c31\u662f\u4f9d\u6b21\u5c1d\u8bd5\u4ecex\u5411\u4e0a\u8d70k = 2^logn, ..., 2^1, 2^0\u6b65\uff0c\u68c0\u67e5\u5230\u8fbe\u7684\u8282\u70b9\u662f\u5426\u6bd4y\u6df1\u3002\u5728\u6bcf\u6b21\u68c0\u67e5\u4e2d\uff0c\u82e5\u662f\uff0c\u5219\u4ee4x = f[x, k]\n\n3.\u82e5\u6b64\u65f6x = y, \u8bf4\u660e\u627e\u5230\u4e86LCA\uff0c LCA\u5c31\u7b49\u4e8ey\n\n4.\u628ax, y\u540c\u65f6\u5411\u4e0a\u8c03\u6574\uff0c\u5e76\u4fdd\u6301\u6df1\u5ea6\u4e00\u81f4\u4e14\u4e8c\u8005\u4e0d\u76f8\u4f1a\n\n\u5c31\u662f\u4f9d\u6b21\u5c1d\u8bd5\u628ax, y\u540c\u65f6\u5411\u4e0a\u8d70k = 2^logn, ..., 2^1, 2^0\u6b65\uff0c\u6bcf\u6b21\u5c1d\u8bd5\u4e2d\uff0c\u82e5f[x, k] != f[y, k] (\u5373\u4ecd\u672a\u76f8\u4f1a)\uff0c\u5219\u4ee4x = f[x, k], y = f[y, k]\n\n5.\u6b64\u65f6x, y\u5fc5\u5b9a\u53ea\u5dee\u4e00\u6b65\u76f8\u4f1a\uff0c\u4ed6\u4eec\u7684\u7236\u8282\u70b9f[x, 0]\u5c31\u662fLCA\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 500050;\nstruct node {\n\tint y, net;\n}e[maxn << 1];\nint n, m, s, t;\nint lin[maxn], len = 0;\nint deep[maxn], f[maxn][21];\nqueue<int> q; \n\ninline int read() {\n\tint x= 0, y = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)) {\n\t\tif(ch == '-') y = -1;\n\t\tch = getchar();\n\t}\n\twhile(isdigit(ch)) {\n\t\tx = (x << 1) + (x << 3) + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn x * y;\n}\n\ninline void insert(int xx, int yy) {\n\te[++len].y = yy;\n\te[len].net = lin[xx];\n\tlin[xx] = len;\n}\n\ninline void bfs(int st) {\n\tq.push(st);\n\tdeep[st] = 1;\n\twhile(!q.empty()) {\n\t\tint k = q.front(); q.pop();\n\t\tfor(int i = lin[k]; i; i = e[i].net) {\n\t\t\tint to = e[i].y;\n\t\t\tif(deep[to]) continue;\n\t\t\tdeep[to] = deep[k] + 1;\n\t\t\tf[to][0] = k;\n\t\t\tfor(int j = 1; j <= t; ++j)\n\t\t\t\tf[to][j] = f[f[to][j - 1]][j - 1];\n\t\t\tq.push(to);\n\t\t}\n\t} \n}\n\ninline int LCA(int x, int y) {\n\tif(deep[x] > deep[y]) swap(x, y);\n\tfor(int i = t; i >= 0; i--) \n\t\tif(deep[f[y][i]] >= deep[x]) \n\t\t\ty = f[y][i];\n\tif(x == y) return x;\n\tfor(int i = t; i >= 0; --i)  \n\t\tif(f[x][i] != f[y][i]) \n\t\t\tx = f[x][i], y = f[y][i];\n\treturn f[x][0];\n} \n\nint main() {\n\tn = read(), m = read(), s = read();\n\tt = (int)(log(n) / log(2)) + 1;\n\tfor(int i = 1; i < n; ++i) {\n\t\tint x, y;\n\t\tx = read(), y = read();\n\t\tinsert(x, y);\n\t\tinsert(y, x);\n\t}\n\tbfs(s);\n\tfor(int i = 1; i <= m; ++i) {\n\t\tint a, b;\n\t\ta = read(), b = read();\n\t\tcout << LCA(a, b) << '\\n';\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1530584749,
        "uid": 28177,
        "name": "Cyxhsa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "# \u500d\u589e\u7b97\u6cd5\uff1a# \n\u53c8\u662f\u4e00\u9053\u5361\u5e38\u6570\u7684\u9898\uff0c\u8bf4\u8bf4\u500d\u589e\u601d\u8def\u548c\u5b9e\u73b0\u7ec6\u8282\uff0c\u6709\u4eba\u8ba4\u4e3a\u500d\u589e\u8fc7\u4e0d\u4e86\n## \u601d\u8def\uff1a\n\u500d\u589e\u7b97\u6cd5\u57fa\u4e8e\u66b4\u529b\u5411\u4e0a\u8d70\u7684\u601d\u8def,\u4f46\u662f\u6bcf\u6b21\u5411\u4e0a\u4e0d\u662f\u8d70\u4e00\u4e2a\u70b9\uff0c\u800c\u662f2^i\u6b21\u65b9\u4e2a\u70b9\n\u9884\u5904\u7406\uff1a\u901a\u8fc7dfs\u904d\u5386\uff0c\u8bb0\u5f55\u6df1\u5ea6h[u],\u540c\u65f6\u6784\u9020\u500d\u589e\u6570\u7ec4p[u][i],\u8868\u793au\u7684\u5411\u4e0a\u8d702^i\u6b65\uff0c\u662f\u54ea\u4e2a\u70b9\u3002P[u][maxLen]\u8868\u793a\u6700\u5927\u6b65\u6570\uff0c\u8981\u521a\u597d\u8d85\u8fc7\u6811\u7684\u6700\u5927\u6df1\u5ea6\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u8fd8\u662f\u5206\u4e3a\u4e24\u4e2a\u70b9\u6df1\u5ea6\u76f8\u540c\u548c\u4e0d\u540c\u3002\u5047\u8bbe\u6df1\u5ea6\u4e0d\u540c\uff0c\u6211\u4eec\u8981\u53d8\u6210\u6df1\u5ea6\u76f8\u540c\u3002\n\u53d8\u6210\u76f8\u540c\u6df1\u5ea6\uff1a\u5bf9\u4e8e\u8f83\u6df1\u7684\u70b9a\u548c\u8f83\u6d45\u7684\u70b9b,a\u4ece2^maxLen\u4e0d\u662f\u5f00\u59cb\u8bd5\u9a8c\uff0c\u5982\u679c\u8d70\u5b8c\u6df1\u5ea6\u5927\u4e8e\u4e86b\uff0c\u5c31\u8bd5\u9a8c2^\uff08maxLen-1\uff09\u7684\u6b65\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5982\u679c\u521a\u597d\u7b49\u4e8eb\u7684\u6df1\u5ea6\uff0c\u5f53\u524d\u5c31\u8bf4\u660e\u8fbe\u5230\u76ee\u7684\uff0c\u4f46\u662f\u51fa\u73b02^\uff08i-1\uff09\u6df1\u5ea6\u5c0f\u4e8eb\u7684\uff0c2^i\u53c8\u5927\u4e8eb\u7684\uff0c\u5c31\u628aa\u8d702^\uff08i-1\uff09\u7684\u6b65\u6570\u7ee7\u7eed\u8bd5\u9a8c\u3002\u76f4\u5230\u6210\u529f\n\u627elca: 2\u4e2a\u70b9\u540c\u65f6\u5411\u4e0a\u8d702^\uff08maxLen-1\uff09\u7684\u6b65\u6570\uff0c\u770b\u770b\u662f\u5426\u8d85\u51fa\u8303\u56f4\u6216\u8005\u662f\u76f8\u540c\u8282\u70b9\uff1f\u662f\u7684\u8bdd\uff0c\u8bd5\u9a8c2^\uff08maxLen-1\uff09\u6b65\u6570\uff1b\u4e0d\u662f\u7684\u8bdd\uff0c\u51fa\u73b0\uff0ca\u548cb\u540c\u65f6\u8d702^i\u662f\u540c\u4e00\u8282\u70b9\uff0c\u800c2^(i-1)\u4e0d\u662f\u76f8\u540c\u8282\u70b9\uff0c\u5c312\u4e2a\u70b9\u90fd\u8d702^(i-1)\u6b65\u6570\uff0c\u7ee7\u7eed\u4e0a\u9762\u7684\u8d70\u6cd5\u53bb\u5b9e\u9a8c\uff0c\u76f4\u5230\u51fa\u73b0\u4ee5\u4e0b\u60c5\u5f62\u7ed3\u675f\uff1a\n2\u4e2a\u70b9\u5411\u4e0a\u8d70\u4e00\u6b65\u6b63\u597d\u662f\u76f8\u540c\u8282\u70b9\u3002\n## \u7ec6\u8282\u5206\u6790\uff1a\n1. \u4e0d\u540c\u9898\u76ee\u8f93\u5165\u65b9\u5f0f\u4e0d\u540c\uff0c\u6811\u4e5f\u53ef\u4ee5\u5206\u4e3a\u6709\u5411\u7684\u548c\u65e0\u5411\uff0c\u65e0\u5411\u6811\u4efb\u4f55\u8282\u70b9\u90fd\u80fd\u5f53\u505a\u6839\uff0c\u5bf9\u4e8e\u4e0d\u540c\u6839lca\u7ed3\u679c\u5f53\u7136\u4e0d\u540c\uff0c\u6240\u4ee5\u9898\u76ee\u4f1a\u7ed9\u5b9a\u6839\u8282\u70b9\uff0cdfs\u65f6\u9ebb\u70e6\u4e00\u4e9b\u8981\u5224\u65ad\u4e0d\u80fd\u5f80\u7236\u8282\u70b9\u8d70(\u5f80\u56de\u8d70)\u3002\n\u6709\u5411\u6811\u9700\u8981\u81ea\u5df1\u5224\u65ad\u6839\uff0c\u901a\u8fc7p[u][0]\u5b58\u4e0d\u5b58\u5728\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u56e0\u4e3a\u6839\u8282\u70b9\u6ca1\u6709\u4efb\u4f55\u7236\u4eb2\uff0cp[root][0]\u4e0d\u5b58\u5728\n2. \u65f6\u95f4\u662fV+log(h)*Q,\u6162\u4e8etarjan\uff0c\u7a0d\u6162\u4e8e\u540c\u662f\u5728\u7ebf\u7b97\u6cd5\u7684\u6811\u94fe\u5256\u5206\uff0c\u4f46\u662f\u6bd4\u666e\u901a\u66b4\u529b\u7684\u7b97\u6cd5\u5feb\uff0c\u597d\u5904\u662f\u5728\u7ebf\u5c31\u80fd\u7528\u3002\u800c\u4e14\u500d\u589e\u7684\u601d\u60f3\u5f88\u91cd\u8981\n\n3. \u4ee3\u7801\u5b9e\u73b0\u5206\u4e3a\u4e24\u79cd\uff0cvector\u548c\u666e\u901a\u6570\u7ec4\uff0c\u666e\u901a\u6570\u7ec4\u8981\u5355\u5f00\u4e00\u4e2alen\u6570\u7ec4\u7ef4\u62a4count(p[u]) \uff0c\u4f7f\u7528vector\u7684\u8bdd\u4e0d\u7528\u7ef4\u62a4count(p[u])\uff0c\u56e0\u4e3avector<int>p[MAX],\u540ep[u].size();\u5c31\u53ef\u4ee5\u8bbf\u95ee\u957f\u5ea6\u3002\u6548\u7387\u80af\u5b9a\u662f\u6570\u7ec4\u7684\u5f3a\u4e8evector\u3002Vector\u4e3a\u4e86\u4f18\u5316\u6548\u7387\uff0c\u53ef\u4ee5\u7528vector\u7684reserve\u51fd\u6570\u9884\u5b9a\u4e49\u5185\u5b58\u3002\u4f46\u4ecd\u7136\u4e0d\u5982\u6570\u7ec4\u5feb\n  \n4. \u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u5e38\u6570\uff0c\u53ef\u9009\u7684\u65b9\u6cd5\u662f\uff1a\u5728\u4e8edfs\u91cc\uff0cdfs\u53c2\u6570\u5c3d\u53ef\u80fd\u5c11\uff0c\u4e0d\u8981\u4f20\u6df1\u5ea6\u3002\u7528inline\u51fd\u6570\u6807\u8bb0\u3002\u500d\u589e\u6570\u7ec4P\u4e0d\u7528vector,\u7528\u6570\u7ec4\u5b58\u3002\u9886\u63a5\u8868\u7528list\u5b58\uff0c\u56e0\u4e3a\u6709\u4e9b\u9898\u4e0d\u9700\u8981\u9891\u7e41\u8bbf\u95ee\u8868\u4e2d\u95f4\u7684\u5143\u7d20\uff0clist\u589e\u52a0\u5220\u9664\u7684\u6548\u7387\u9ad8\u4e8evector\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAX=500010;\nlist<int>adList[MAX];//\u50a8\u5b58\u6811,\u6709\u5411\u56fe\nint V,E;//V\u4e2a\u70b9\nint h[MAX];//\u9ad8\u5ea6\nint p[MAX][25];//p[u][i]\u8282\u70b9u\u7684\u5411\u4e0a\u8d702^i\u6b65\u662f\u54ea\u4e2a\u8282\u70b9\nint pLen[MAX];\ninline  void dfsh(int now,int father){\n    int k,j,next;\n    for(list<int>::iterator i=adList[now].begin();i!=adList[now].end();++i){//\u7b49\u4ef7\u4e8ec++11\u8bed\u6cd5 for(auto i: adList[now]){next=i;\n        next=*i;\n        if(next!=father){\n            h[next]=h[now]+1;\n            p[next][pLen[next]++]=now;\n            for(j=0;;j++){//\u66f4\u65b0\u500d\u589e\u6570\u7ec4\n                k=p[next][j];\n                if(pLen[k]>j){\n                    p[next][pLen[next]++]=p[k][j];\n                }else{\n                    break;\n                }\n            }\n            dfsh(next,now);\n        }\n    }\n}\ninline  void toSameh(int &c,int minh){\n    int i,k;\n    for(i=pLen[c]-1;i>=0&&h[p[c][i]]<minh;--i);//\u628a\u5b83\u4eec\u6df1\u5ea6\u76f8\u540c\n    c=p[c][i];\n    if(h[c]>minh){\n        toSameh(c,minh);\n    }\n}\ninline  int toSameDot(int a,int b){\n    if(a==b)\n        return a;\n    int i;\n    for(i=0;i<pLen[a]-1&&p[a][i]!=p[b][i];++i);//\u7531\u4e8e\u6df1\u5ea6\u76f8\u540c\n    --i;\n    if(i==-1){\n        return p[a][0];\n    }\n    return toSameDot(p[a][i],p[b][i]);\n}\ninline  int getLCA(int a,int b){\n    int i,j,k;\n    if(h[a]!=h[b]){//s\u6df1\u5ea6\u8c03\u6574\u76f8\u540c\n        int &c=h[a]>h[b]?a:b;//\u5f97\u5230\u5b83\u4eec\u7684\u5f15\u7528\n        toSameh(c,min(h[a],h[b]));\n    }\n    return toSameDot(a,b);\n}\ninline void init(int root){\n    int f=0;\n    dfsh(root,f);//\u521d\u59cb\u5316\u9ad8\u5ea6\u548c\u500d\u589e\u6570\u7ec4,\u628a1\u5f53\u505a\u6811\u6839\n}\nint main(int argc,char *argv[]){\n    int i,j,k,n,m,T,b,e,a,root,Q;\n    scanf(\"%d%d%d\",&V,&Q,&root);//V\u4e2a\u70b9Q\u6b21\u67e5\u8be2\n    for(i=1;i<V;i++){//V-1\u6761\u8fb9,\u4fdd\u8bc1\u8f93\u5165\u662f\u4e00\u68f5\u6811\uff0c\u4e14\u7b2c\u4e00\u4e2a\u6570\u662f\u7b2c\u4e8c\u4e2a\u6570\u7684\u7236\u8282\u70b9\n        scanf(\"%d%d\",&b,&e);\n        adList[b].push_back(e);\n        adList[e].push_back(b);\n    }\n    init(root);\n    for(i=0;i<Q;i++){//Q\u6b21\u67e5\u8be2\n        scanf(\"%d%d\",&a,&b);\n        printf(\"%d\\n\",getLCA(a,b));\n    }\nreturn 0;\n}\n```",
        "postTime": 1527315134,
        "uid": 73205,
        "name": "v__v",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "Tarjan\u7b97\u6cd5\u6c42LCA\u4f2a\u4ee3\u7801\n\nTarjan(u)//marge\u548cfind\u4e3a\u5e76\u67e5\u96c6\u5408\u5e76\u51fd\u6570\u548c\u67e5\u627e\u51fd\u6570\n\n```cpp\n{\n    for each(u,v)    //\u8bbf\u95ee\u6240\u6709u\u5b50\u8282\u70b9v\n    {\n        Tarjan(v);        //\u7ee7\u7eed\u5f80\u4e0b\u904d\u5386\n        marge(u,v);    //\u5408\u5e76v\u5230u\u4e0a\n```\n\u6807\u8bb0v\u88ab\u8bbf\u95ee\u8fc7;\n    }\n    for each(u,e)    //\u8bbf\u95ee\u6240\u6709\u548cu\u6709\u8be2\u95ee\u5173\u7cfb\u7684e\n\n    {\n\u5982\u679ce\u88ab\u8bbf\u95ee\u8fc7;\n\nu,e\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3afind(e);\n\n    }\n}\u4f2a\u4ee3\u7801\u6765\u6e90\uff1ahttp://www.cnblogs.com/JVxie/p/4854719.html\n\n----------------------------------------------------------------------------------------------------------------------\n\n\u56e0\u4e3a\u6570\u636e\u8303\u56f4\u8f83\u5927\u6240\u4ee5\u7528\u90bb\u63a5\u8868\u6a21\u62df\u6570\u7ec4\u3002\n\n\u5e76\u4e14\u8981\u7528\u4e24\u4e2a\u4e00\u4e2a\u5b58\u8981\u67e5\u7684\u70b9\uff0c\u4e00\u4e2a\u5b58\u8fb9\u3002\n\n\n```cpp\ntype tr=record\n     next,too:longint;//too\u6307\u4ed6\u6307\u5411\u7684\u8fb9\uff0cnext\u6307\u90bb\u63a5\u8868\u7684\u4e0b\u4e00\u4e2a\u70b9\n     end;\nvar n,m,k,i,q,w,tot,tot2:longint;\n    vis:array[-2..1000009] of boolean;\n    data,data2:array[-2..1000009] of tr;//data\uff0cdata2\u6a21\u62df\u94fe\u8868\n    c,head,head2,fa,where:array[-2..1000009] of longint;//head\u8bb0\u5f55\u90bb\u63a5\u8868\u8d77\u70b9\u3002C\u8bb0\u5f55\u7ed3\u679c\u3002//Fa\u8bb0\u5f55\u7236\u5b50\u5173\u7cfb\uff0cwhere\u4e0b\u9762\u8bb2\u3002\nfunction find(x:longint):longint;//\u5e76\u67e5\u96c6\uff0c\u8def\u5f84\u538b\u7f29\nbegin\n   if fa[x]=x then exit(x);\n   find:=find(fa[x]);\n   fa[x]:=find;\nend;\n procedure hb(p,q:longint);//\u5408\u5e76\nvar pp,qq:longint;\nbegin\n  pp:=find(p);\n  qq:=find(q);\n  if pp<>qq then\n   fa[pp]:=qq;\nend;\nprocedure  dfs(q:longint);//tarjan\u7b97\u6cd5\nvar  w,v:longint;\nbegin\n vis[q]:=true;\n    w:=head[q];\n    while w<>0 do\n       begin\n          v:=data[w].too;\n          if vis[v]=false then//\u5f53\u6ca1\u8bbf\u95ee\u8fc7\u5c31\u9012\u5f52\u641c\u7d22\u3002\n            begin\n             dfs(v);\n             hb(v,q);//\u8981\u5148\u641c\u7d22\u518d\u5408\u5e76\n            end;\n        w:=data[w].next;\n       end;\n     w:=head2[q];\n      while w<>0 do\n       begin\n          v:=data2[w].too;\n          if vis[v] then//\u5982\u679c\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u5c31\u53ef\u4ee5\u6c42\u516c\u5171\u7956\u5148\n           c[where[w]]:=find(v);\n          w:=data2[w].next;\n       end;\nend;\n begin\n readln(n,m,k);\n tot:=0;\n  for i:=1 to (n-1) do//\u90bb\u63a5\u8868\u5b58\u8fb9\n   begin\n    read(q,w);\n    tot:=tot+1;\n    data[tot].too:=w;\n    data[tot].next:=head[q];\n    head[q]:=tot;\n    tot:=tot+1;//\u53cc\u5411\u90fd\u8981\u5b58\n    data[tot].too:=q;\n    data[tot].next:=head[w];\n    head[w]:=tot;\n   end;\n  tot2:=0;\n  for i:=1 to m do\n   begin\n    read(q,w);\n    tot2:=tot2+1;\n    data2[tot2].too:=w;\n    data2[tot2].next:=head2[q];\n    head2[q]:=tot2;\n    where[tot2]:=i;\n    tot2:=tot2+1;\n    data2[tot2].too:=q;\n    data2[tot2].next:=head2[w];\n    head2[w]:=tot2;\n    where[tot2]:=i;//\u56e0\u4e3a\u6211\u4eec\u5b58\u4e24\u8fb9\u628a\u957f\u5ea6\u6269\u5927\u4e86\uff0c\u6240\u7528where\u6307\u56de\u4ed6\u539f\u6765\u7684\u4f4d\u7f6e\n   end;\n  for i:=0 to n do//\u521d\u59cb\u5316\u7236\u8282\u70b9\n   fa[i]:=i;\n   dfs(k);\n  for i:=1 to m do\n   writeln(c[i]);\nend.\n\n```",
        "postTime": 1509977882,
        "uid": 11236,
        "name": "\u671dL\u5915",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u697c\u4e0b\u7684ST\u8868\u6c42LCA\u5e38\u6570\u592a\u5927\u3002\u3002\u3002\u6211\u6765\u53d1\u4e00\u6ce2\u840c\u65b0\u53cb\u597d\u7684ST\u8868\u3002\u3002\u5176\u5b9e\u4e5f\u4e0d\u4f1a\u5f88\u6162\uff08\u4e3b\u7ad9 2300ms \u5de6\u53f3\u3002\u6ca1\u5361\u5e38\uff0c\uff0c\u548ctarjan \uff0c\u6811\u5256\u5f53\u7136\u6ca1\u6cd5\u6bd4\u3001\u3001\n\n\u697c\u4e0b\u597d\u50cf\u8bb2\u7684\u86ee\u6e05\u695a\u7684\u554a\u3002\u3002\u597d\u50cf\u6ca1\u4ec0\u4e48\u53ef\u4ee5\u8bf4\u7684\u4e86\u3002\u3002\u4ee3\u7801\u52a0\u6ce8\u91ca\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 5e5+5;\nint rmq[MAXN<<1]; // rmq\u6570\u7ec4, \u5c31\u662f\u6b27\u62c9\u5e8f\u5217\u5bf9\u5e94\u7684\u6df1\u5ea6\u5e8f\u5217\nstruct ST{\n    int mm[MAXN<<1];\n    int f[MAXN<<1][20]; // \u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u4e0b\u6807\n    void init(int n){\n        mm[0] = -1;\n        for(int i = 1;i <= n;++i){\n            mm[i] = (i & (i-1)) == 0 ? mm[i-1] + 1:mm[i-1];\n            f[i][0] = i;\n        }\n        for(int j = 1;j <= mm[n];++j)\n        for(int i = 1;i + (1<<j) - 1 <= n; ++i)\n        f[i][j] = rmq[f[i][j-1]] < rmq[f[i+(1<<(j-1))][j-1]] ? f[i][j-1]:f[i+(1<<(j-1))][j-1];\n    } \n    int query(int a,int b){\n        if(a > b) swap(a, b);\n        int k = mm[b - a + 1];\n        return rmq[f[a][k]] <= rmq[f[b-(1<<k)+1][k]] ? f[a][k] : f[b-(1<<k)+1][k];  \n    }\n};\n\nstruct edge{int v,nxt;}e[MAXN<<1];\nint head[MAXN],cnt, n, m ,root;\nint F[MAXN<<1]; // \u6b27\u62c9\u5e8f\u5217, \u5c31\u662f dfs \u904d\u5386\u7684\u987a\u5e8f, \u957f\u5ea6\u4e3a 2 * n - 1, \u4e0b\u6807\u4ece 1 \u5f00\u59cb\nint P[MAXN];    // P[i] \u8868\u793a\u70b9 i \u5728 F \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\nint tot;\nST st;\n\nvoid ins(int u,int v){\n    e[++cnt] = (edge){v,head[u]};head[u] = cnt;\n    e[++cnt] = (edge){u,head[v]};head[v] = cnt;\n}\nvoid dfs(int u,int fa,int dep){\n    F[++tot] = u;\n    rmq[tot] = dep;\n    P[u] = tot;\n    for(int i = head[u];i;i = e[i].nxt){\n        int v = e[i].v;\n        if(v == fa) continue;\n        dfs(v, u, dep + 1);\n        F[++tot] = u; rmq[tot] = dep;  \n    }\n}\n\nvoid LCA_init(int root,int node_num){\n    tot = 0;\n    dfs(root, root, 0);\n    st.init(2 * node_num - 1);\n}\n\nint query_lca(int u,int v){\n    return F[st.query(P[u], P[v])];\n}\n\nint main(){\n    int u, v;\n    scanf(\"%d%d%d\",&n,&m,&root);\n    for(int i = 1;i < n;++i) scanf(\"%d%d\",&u,&v),ins(u,v);\n    LCA_init(root, n);\n    while(m--){\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",query_lca(u,v));\n    }\n    return 0;\n}\n```",
        "postTime": 1509802115,
        "uid": 48967,
        "name": "\u5948\u8299\u83b2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u542c\u8bf4\u5927\u5bb6\u65e9\u5c31\u4f1a\u4e86rmq\u5199lca\n\n\u7136\u800c\u4eca\u5929\u8003\u8bd5\u9047\u5230\u4e86\u4e00\u4e2alca\u7684\u9898\u7ed3\u679c\u5c34\u5c2c\u4e86\n\n\u6240\u4ee5\u5c31\u6765\u770b\u770b\u8fd9\u4e2a\u4e1c\u897f\n\n\n\u611f\u89c9rmq\u5199lca\u8981\u597d\u5f88\u591a\n\n\u65e0\u8bba\u662f\u4ee3\u7801\u96be\u5ea6\u8fd8\u662f\u4ee3\u7801\u7684\u7f8e\u89c22333\n\n\n\u6839\u636e\u5c31\u662f\u6811\u7684dfs\u5e8f\uff0c\u7236\u8282\u70b9\u80af\u5b9a\u6bd4\u5de6\u8fb9\u7684\u5b50\u8282\u70b9\u540e\u5165\u961f\uff0c\u53f3\u8fb9\u7684\u5b50\u8282\u70b9\u80af\u5b9a\u6bd4\u7236\u8282\u70b9\u540e\u5165\u961f\n\n\u90a3\u4e48\u53ef\u4ee5\u63a8\u51fa\u6700\u8fd1\u516c\u5171\u7956\u5148\u5c31\u5e94\u8be5\u662f\u90a3\u4e2adfs\u5e8f\u91cc\u6df1\u5ea6\u5c0f\u7684\u90a3\u4e2a\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u5f00\u59cb\u7528rmq\u6c42\u533a\u95f4\u6700\u5c0f\u503c\n\n\n\u770b\u5230\u4e0b\u9762\u597d\u50cf\u6709\u4eba\u5199\u4e86rmq\u5199lca\u7684\u9898\u89e3\n\n\u4e0d\u8fc7\u611f\u89c9\u6211\u7684\u4ee3\u7801\u8981\u6bd4\u4ed6\u7684\u597d\u770b\uff0c\u55ef\uff0c\u5bf9\uff0c\u4ed6\u4e5f\u662f\u8fd9\u6837\u8ba4\u4e3a\u7684\n\n\u6d1b\u8c37\u597d\u50cf\u6ca1\u6709rmq\u7684\u88f8\u9898\uff0c\u5982\u679c\u6709\u7591\u95ee\u7684\u8bdd\u662f\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\u7684\n\n\u633a\u597d\u73a9\u7684\n\n\n\u597d\u4e86\uff0c\u4ee3\u7801\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#define N 500010\nusing namespace std;\n#if 0\n```\nWriter: Goes && G.S.M.\nJust a game\n\nEnjoy it\n\n\n\n\n\n\n\n\n\n    \n    \n        \n```cpp\n#endif\ninline int read()\n{\n    char ch='*';\n    while(!isdigit(ch=getchar()));\n    int num=ch-'0';\n    while(isdigit(ch=getchar()))num=num*10+ch-'0';\n    return num;\n}\nstruct ss{\n    int to,nex;\n}edge[N<<1];\nint head[N],ecnt;\nvoid add(int x,int y){\n    edge[++ecnt]=(ss){y,head[x]};\n    edge[++ecnt]=(ss){x,head[y]};\n    head[x]=ecnt-1;head[y]=ecnt;\n}\nint q[N<<1],tot;\nint f[N<<1][25];\nint deep[N],p[N];\nint n,m,root;\nvoid DFS(int pos,int fa){\n    q[tot++]=pos;p[pos]=tot-1;\n    for(int i=head[pos];i;i=edge[i].nex)\n    if(edge[i].to!=fa){\n        deep[edge[i].to]=deep[pos]+1;\n        DFS(edge[i].to,pos);\n        q[tot++]=pos;\n    }\n    return;\n}\nvoid RMQ(){\n    for(int i=0;i<tot;i++)    f[i][0]=q[i];\n    for(int j=1;(1<<j)<=tot;j++)\n        for(int i=0;i+(1<<j)-1<tot;i++)\n        if(deep[f[i][j-1]]<deep[f[i+(1<<(j-1))][j-1]])\n            f[i][j]=f[i][j-1];\n        else f[i][j]=f[i+(1<<(j-1))][j-1];\n}\nvoid take(int x,int y)\n{\n    if(p[y]<p[x]) swap(x,y);\n    int k=log(p[y]-p[x]+1)/log(2);\n    if(deep[f[p[x]][k]]<deep[f[p[y]-(1<<k)+1][k]])\n        printf(\"%d\\n\",f[p[x]][k]);\n    else printf(\"%d\\n\",f[p[y]-(1<<k)+1][k]);\n}\nint main()\n{\n    n=read(),m=read(),root=read();\n    for(int i=1;i<=n-1;i++)\n        add(read(),read());\n    DFS(root,0);RMQ();\n    for(int i=1;i<=m;i++)\n        take(read(),read());\n    return 0;\n}\n\n```",
        "postTime": 1506938551,
        "uid": 38348,
        "name": "Goes",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u591a\u4eba\u7528\u500d\u589e\u554a\n\n\u500d\u589e\u6c42LCA\u5f88\u5bb9\u6613\u88ab\u94fe\u5361\u6389\n\n\u7136\u800c\u6211\u4eec\u6709\u4e00\u79cd~~\u65e0\u654c~~\u66f4\u597d\u7684\u65b9\u6cd5\u6c42LCA\n\n\u90a3\u5c31\u662f\u2026\n\n#**\u6811\u94fe\u5256\u5206**\n\n\uff08\u5176\u4ed6\u9898\u89e3\u91cc\u7adf\u7136\u6709\u4eba\u8bf4\u6811\u5256\u6162...\u4ed6\u4e00\u5b9a\u5199\u4e86\u5047\u6811\u5256\uff09\n\n\uff08\u53cd\u6b63\u6811\u5256\u6bd4\u500d\u589e\u5feb\u6781\u4e86\uff09\n\n\u6811\u94fe\u5256\u5206\u5c31\u662f\u628a\u6811\u5256\u5206\u6210\u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u94fe\n\n\u663e\u7136\u7684\uff0c\u5728\u94fe\u4e0a\u6c42LCA\u662f\u5f88\u7b80\u5355\u7684\uff08\u500d\u589e\u7b97\u6cd5\u5c34\u5c2c\u6781\u4e86\uff09\n\n\u6211\u4eec\u53ea\u8981\u627e\u5230\u94fe\u4e0a\u4e24\u70b9\u6df1\u5ea6\u8f83\u5c0f\u7684\u70b9\u5c31\u884c\u4e86\n\n\u6240\u4ee5\u5728\u94fe\u4e0a\u6bd4\u5728\u5176\u4ed6\u8fde\u63a5\u94fe\u7684\u8fb9\u4e0a\u5feb\n\n\u56e0\u6b64\u5b9e\u9645\u5e94\u7528\u4e2d\u6211\u4eec\u4e00\u822c\u4f1a\u4f7f\u7528\u201c\u8f7b\u91cd\u8fb9\u6811\u94fe\u5256\u5206\u201d\n\n\u201c\u8f7b\u91cd\u8fb9\u6811\u94fe\u5256\u5206\u201d\u6307\u7684\u662f\u5c06\u6811\u8fb9\u5206\u6210\u4e24\u7c7b\uff1a\u201c\u91cd\u8fb9\u201d\u548c\u201c\u8f7b\u8fb9\u201d\n\n\u5206\u7c7b\u65b9\u6cd5\u5982\u4e0b\n\n\u6211\u4eec\u5b9a\u4e49Size(x)\u4e3a\u4ee5x\u4e3a\u6839\u7ed3\u70b9\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u4e2a\u6570\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9u\uff0c\u5728\u5b83\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u4e2d\u5bfb\u627e\u4e00\u4e2a\u7ed3\u70b9v\n\n\u4f7f\u5f97\u5bf9\u4e8eu\u7684\u5176\u4ed6\u5b50\u8282\u70b9w\uff0c\u90fd\u6709Size(v)\u2265Size(w)\n\n\u6b64\u65f6u\u6709\u4e00\u6761\u91cd\u8fb9\u8fde\u5411v\uff0c\u6709\u82e5\u5e72\u6761\u8f7b\u8fb9\u8fde\u5411u\u7684\u5176\u4ed6\u5b50\u7ed3\u70b9\n\n\u8fd9\u6837\u4e00\u6765\uff0c\u6811\u4e0a\u7684\u4e0d\u5728\u91cd\u94fe\u4e0a\u7684\u8fb9\u7684\u6570\u91cf\u4fbf\u5927\u5927\u51cf\u5c11\uff0c\u6548\u7387\u5c31\u63d0\u9ad8\u4e86\n\n\u628a\u6811\u4e0a\u7684\u91cd\u94fe\u5212\u5206\u5b8c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6c42LCA\u4e86\n\n\u4f2a\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9x\u548cy\nwhile(x\u548cy\u4e0d\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a) {\n    x\u4e0ey\u4e2d\u6df1\u5ea6\u8f83\u5927\u7684\u7ed3\u70b9\u79fb\u81f3\u5b83\u6240\u5728\u7684\u91cd\u94fe\u7684\u9876\u7aef\u7684\u7236\u7ed3\u70b9\n}\nLCA\u5373\u4e3ax\u4e0ey\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u8282\u70b9\n```",
        "postTime": 1503296648,
        "uid": 24397,
        "name": "__\u4e16\u754c\u7b2c\u4e00\u5f31__",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u53ef\u4ee5\u6811\u4e0a\u500d\u589e\u6c42LCA\u3002\n\n\u8fd9\u9053\u9898\u7684\u65f6\u95f4\u9650\u5236\u548c\u6570\u636e\u975e\u5e38\u4e25\u683c\uff0c\u5f88\u5bb9\u6613\u4e0d\u660e\u4e0d\u767d\u5c31TLE\u4e863\u4e2a\u70b9\uff0c\u6240\u4ee5\uff0c\u5404\u79cd\u4f18\u5316\u4e00\u5b9a\u8981\u52a0\u4e0a\uff01\n\n\u6811\u4e0a\u500d\u589e\u662f\u4e00\u79cd\u901a\u8fc7st\u8868\uff08\u7a00\u758f\u8868\uff09\u8bb0\u5f55\uff0c\u5e76\u4e0d\u65ad\u4ee52\u500d\u7684\u65b9\u5f0f\u5411\u4e0a\u67e5\u627e\u6765\u6c42\u5f97\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u7b97\u6cd5\u3002\n\n\u8fd9\u91cc\u7528st[n][k]\u6765\u8868\u793a\u7b2cn\u4e2a\u70b9\u7684\u7b2c2^k\u4e2a\u7956\u5148\uff08\u8fd9\u91cc\u7684^\u8868\u793a\u4e58\u65b9\uff09\u3002\n\n\u4f8b\u5982\uff1ast[1][0]\u8868\u793a1\u53f7\u70b9\u7684\u7b2c\u4e00\u4e2a\u7956\u5148\uff0c\u53731\u53f7\u70b9\u7684\u7236\u4eb2\u3002\n\n\u7531\u4e8e\u5361\u5e38\u6570\uff0cc++\u4e2d\u7684vector\u548ccincout\u90fd\u6709\u53ef\u80fd\u8d85\u65f6\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u8bfb\u5165\u4f18\u5316\u548c\u5355\u5411\u94fe\u8868\u6765\u4f18\u5316\u3002\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<iostream>\n#include<vector>\nusing namespace std;\nconst int Inf=2147483647;\nint st[500000+1][21],d[500001];\nstruct node{\n    int n;\n    node *next;\n}*b[500001],*e[500001];//b\u6570\u7ec4\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u6240\u5f15\u51fa\u7684\u90bb\u63a5\u8868\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0ce\u8868\u793a\u7ec8\u6b62\u4f4d\u7f6e\nint read() {//\u8bfb\u5165\u4f18\u5316\n  int ans=0,c;\n  while(!isdigit(c=getchar()));\n  do{\n      ans=ans*10+c-'0';\n  }while(isdigit(c = getchar()));\n  return ans;\n}\nvoid dfs(int x){\n    for(int i=1;i<=20;i++){\n        st[x][i]=st[st[x][i-1]][i-1];\n    }\n    node *k;\n    k=b[x]->next;\n    while(k!=NULL){\n        if(k->n!=st[x][0]){\n            st[k->n][0]=x;\n            d[k->n]=d[x]+1;\n            dfs(k->n);\n        }\n        k=k->next;\n    }\n}\nint lca(int x1,int y1){\n    int x=x1,y=y1;\n    if(d[x]<d[y]){\n        swap(x,y);\n    }\n    for(int i=20;i>=0;i--){\n        if(d[st[x][i]]>=d[y]){\n            x=st[x][i];\n        }\n    }\n    if(x==y){\n        return x;\n    }\n    for(int i=20;i>=0;i--){\n        if(st[x][i]!=st[y][i]){\n            x=st[x][i];\n            y=st[y][i];\n        }\n    }\n    return st[x][0];\n}\nint main(){\n    int n,m,i,j,s;\n    n=read();\n    m=read();\n    s=read();\n    for(i=1;i<=n;i++){\n        b[i]=new node;\n        e[i]=b[i];//\u521b\u9020\u6307\u9488\u7a7a\u95f4\n    }\n    for(i=1;i<=n-1;i++){\n        int a,b;\n        a=read();\n        b=read();\n        node *a1=new node;\n        a1->n=b;\n        a1->next=NULL;//NULL\u8868\u793a\u7ed3\u5c3e\n        e[a]->next=a1;\n        e[a]=a1;\n        node *b1=new node;\n        b1->n=a;\n        b1->next=NULL;\n        e[b]->next=b1;\n        e[b]=b1;\n    }\n    d[s]=1;\n    dfs(s);\n    for(i=1;i<=m;i++){\n        int a,b;\n        a=read();b=read();\n        printf(\"%d\\n\",lca(a,b));\n    }\n    return 0;\n}\n```",
        "postTime": 1502608177,
        "uid": 20337,
        "name": "Only_My_Whisper",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u7b97\u6cd5\u8fd9\u91cc\u7528\u5f97\u662f\u500d\u589e\n\n\n\u4e0d\u8fc7\u4e00\u5f00\u59cb\u6781\u4e3a\u597d\u5947\uff0c\u660e\u660e\u7b97\u6cd5\u662f\u5bf9\u7684\uff0c\u4e3a\u4ec0\u4e48\u8fd8 TLE 3\u4e2a\u70b9\uff1f\n\n\n\u540e\u6765\u53d1\u73b0\u662f#########\u5361\u5e38\u6570\u256e(\u256f\u25bd\u2570)\u256d\n\n\n\u9996\u5148\uff0cvector\u5c31\u4e0d\u8981\u7528\u4e86\uff0c\u4e00\u5b9a\u8981\u6539\u6210\u94fe\u5f0f\u524d\u5411\u661f\n\n\n\u5176\u6b21\uff0c\u8bfb\u5199\u4f18\u5316\u4e00\u5b9a\u8981\u52a0\uff0c\u8fd8\u8981\u52a0\u6700\u5feb\u7684\uff0c\u4e00\u822c\u7684\u90fd\u8fc7\u4e0d\u4e86\u256e(\u256f\u25bd\u2570)\u256d\n\n\n\u8fd9\u91cc\u8d76\u7d27\u628a\u641c\u96c6\u5230\u7684\u6700\u5feb\u7684\u6a21\u5757\u653e\u5728\u8fd9\u91cc\uff1a\n\n\n```cpp\nint getint()\n{\n    char ch='*';\n    while(!isdigit(ch=getchar()));\n    int num=ch-'0';\n    while(isdigit(ch=getchar()))num=num*10+ch-'0';\n    return num;\n}\n```\n\u6700\u540e\uff0c\u7531\u4e8e\u7b2c\u4e00\u6b21\u5199\u94fe\u5f0f\u524d\u5411\u661f\uff0c######\u65e0\u5411\u56fe\u7684\u94fe\u5f0f\u524d\u5411\u661f\u4e00\u5b9a\u8981\u4e58\u4ee52\u554a\uff01\uff01\uff01\n\n\u6700\u540e\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801\uff08\u770b\u4e86\u4e0d\u5c11\u6a21\u677f\uff0c\u611f\u89c9\u5c31\u8fd9\u4e2a\u6a21\u677f\u6700\u597d\u5199\u4e86\uff09\uff1a\n\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nint n,m,root,parent[30][600005],dep[600005],head[1000005];\nint log_v;\n\nint cnt=0;\nstruct e\n{\n    int to,next;\n}edge[1000005];\n\nint getint()\n{\n    char ch='*';\n    while(!isdigit(ch=getchar()));\n    int num=ch-'0';\n    while(isdigit(ch=getchar()))num=num*10+ch-'0';\n    return num;\n}\n\nvoid add (int x,int y) \n{\n    cnt++;\n    edge[cnt].to=y;\n    edge[cnt].next=head[x];\n    head[x]=cnt;\n}\n\nvoid dfs(int node,int father,int d)\n{\n    parent[0][node]=father;\n    dep[node]=d; \n    \n    for(int i=head[node];i!=-1;i=edge[i].next)\n    {\n        if(edge[i].to!=father) dfs(edge[i].to,node,d+1);\n    }\n}\n\nvoid init()\n{\n    dfs(root,-1,0);\n    \n    for(int k=0;k<log_v-1;k++)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            if(parent[k][i]<0) parent[k+1][i]=-1; \n            else parent[k+1][i]=parent[k][parent[k][i]];  \n        }\n    }\n}\n\nint LCA(int x,int y)\n{\n    if(dep[x]>dep[y]) swap(x,y);\n    \n    for(int i=0;i<log_v;i++)\n    {\n        if(((dep[y]-dep[x]) >> i) & 1) y=parent[i][y]; \n    }                                                   \n    \n    if(x==y) return x;\n    \n    for(int i=log_v;i>=0;i--)\n    {\n        if(parent[i][x]!=parent[i][y])   \n        {\n            x=parent[i][x];\n            y=parent[i][y];\n        }\n    }\n    \n    return parent[0][x];\n}\n\nint main()\n{\n    memset(head,-1,sizeof(head));\n    n=getint();m=getint();root=getint();\n    log_v=int(log10(n)/log10(2))+1;  //\u00d3\u00c3\u00bb\u00bb\u00b5\u00d7\u00b9\u00ab\u00ca\u00bd\u00b2\u00e2\u00cb\u00e3log_v \n    \n    for(int i=1;i<=n-1;i++)\n    {\n        int x,y;x=getint();y=getint();\n        add(x,y);add(y,x);\n    }\n    \n    init();\n    \n    for (int i=1;i<=m;i++)\n    {\n        int x,y;x=getint();y=getint();\n        printf(\"%d\\n\",LCA(x,y));\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1502110225,
        "uid": 18490,
        "name": "NewErA",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u660e\u660e\u4e0d\u7528\u8bfb\u4f18\u2026\u2026\u5361\u4e00\u5361\u5e38\u6570\uff08\u6bd4\u5982\u8bf4inline\u3001register\u3001\u8fd8\u6709\u81ea\u5df1\u7edf\u8ba1p\u7684\u5c42\u6570\u800c\u4e0d\u662f\u76f4\u63a5\u752819\uff09\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#define maxn 500100\n\nint n, m, s, x, y;\n\nstruct Edge {\n    int to, nxt;\n    Edge(void) {}\n    Edge(const int& to, const int& nxt) : to(to), nxt(nxt) {}\n};\n\nstruct LCA {\n    int tot, head[maxn], dep[maxn], anc[maxn][20];\n    Edge e[maxn<<1];\n    LCA(void) { tot = 1; }\n    \n    inline void AddEdge(const int& u, const int& v) {\n        e[tot] = Edge(v, head[u]), head[u] = tot++;\n    }\n    \n    inline void dfs(int u, int fa) {\n        anc[u][0] = fa;\n        for (register int i = head[u]; i; i = e[i].nxt) {\n            int v = e[i].to;\n            if (v != fa) {\n                dep[v] = dep[u] + 1;\n                dfs(v, u);\n            }\n        }\n    }\n    \n    inline void process() {\n        for (register int i = 1; i <= n; ++i)\n            for (register int j = 1; (1 << j) <= n; ++j) anc[i][j] = -1;\n        for (register int j = 1; (1 << j) <= n; ++j)\n            for (register int i = 1; i <= n; ++i)\n                if (anc[i][j-1] != -1) anc[i][j] = anc[anc[i][j-1]][j-1];\n    }\n    \n    inline int query(int p, int q) {\n        int _log = 0;\n        if (dep[p] < dep[q]) std::swap(p, q);\n        for (_log = 0; (1 << _log) <= dep[p]; ++_log); \n        --_log;\n        for (register int i = _log; i >= 0; --i)\n            if (dep[p] - (1 << i) >= dep[q]) p = anc[p][i];\n        if (p == q) return p;\n        for (register int i = _log; i >= 0; --i)\n            if (anc[p][i] != -1 && anc[p][i] != anc[q][i])\n                p = anc[p][i], q = anc[q][i];\n        return anc[p][0];\n    }\n} opt;\n\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &s);\n    for (register int i = 1; i < n; ++i) {\n        scanf(\"%d%d\", &x, &y);\n        opt.AddEdge(x, y); opt.AddEdge(y, x);\n    }\n    opt.dfs(s, 0), opt.process();\n    for (register int i = 1; i <= m; ++i) {\n        scanf(\"%d%d\", &x, &y);\n        printf(\"%d\\n\", opt.query(x, y));\n    }\n    return 0;\n}\n```",
        "postTime": 1501314135,
        "uid": 31766,
        "name": "LoliconAutomaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u6709\u6bd2\u3002\u3002\u3002\n\n\u9996\u5148\u8981\u624b\u6253\u94fe\u8868\u5199\u90bb\u63a5\u8868\u3002\u3002\u3002\n\n\u5176\u6b21\u8981\u8bfb\u5165\u4f18\u5316\u3002\n\n\u6709\u8fd9\u4e24\u4e2a\u7528\u500d\u589e\u5c31\u80fd\u8fc7\u4e86\u3002\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u5c31\u662f\u624b\u6253\u94fe\u8868+\u8bfb\u5165\u4f18\u5316\u7684\u500d\u589e\u4ee3\u7801\uff0c\u65f6\u95f4\u5361\u5728900ms+\u3002\u3002\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstatic const int maxs=500000,logs=20;\nstruct node{int d;node*nxt;node(){d=0,nxt=NULL;}};\nstruct lst\n{\n    node*begin,*end;\n    lst(){begin=end=NULL;}\n    void push_back(int d)\n    {\n        node*p=new node;\n        p->d=d;\n        if(begin==NULL)begin=end=p;else end=end->nxt=p;\n    }\n}l[maxs+5];\ntemplate<typename _Tp>void in(_Tp & dig)\n{\n    char c=getchar();dig=0;\n    while(!isdigit(c))c=getchar();\n    while(isdigit(c))dig=dig*10+c-'0',c=getchar();\n}\nint n,m,s,dep[maxs+5],pre[maxs+5][logs+1];\nvoid build(int u,int p)\n{\n    pre[u][0]=p;\n    for(int i=1;i<=logs;i++)pre[u][i]=pre[pre[u][i-1]][i-1];\n    for(node*i=l[u].begin;i!=NULL;i=i->nxt)\n        if(p!=i->d)dep[i->d]=dep[u]+1,build(i->d,u);\n}\nint query(int a,int b)\n{\n    if(dep[a]>dep[b])swap(a,b);\n    for(int i=logs;i>=0;i--)if(dep[pre[b][i]]>=dep[a])b=pre[b][i];\n    if(a==b)return a;\n    for(int i=logs;i>=0;i--)if(pre[a][i]!=pre[b][i])a=pre[a][i],b=pre[b][i];\n    return pre[a][0];\n}\nint main()\n{\n    in(n),in(m),in(s);\n    for(int i=1,a,b;i<n;i++)\n        scanf(\"%d%d\",&a,&b),l[a].push_back(b),l[b].push_back(a);\n    dep[s]=1,build(s,0);\n    for(int i=1,a,b;i<=m;i++)in(a),in(b),printf(\"%d\\n\",query(a,b));\n    return 0;\n}\n```",
        "postTime": 1494066623,
        "uid": 22388,
        "name": "XZYQvQ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "#\u6811\u5256lca\n\n\u867d\u7136\u8bf4\u7279\u522b\u6162\uff0c\u4f46\u662f\u81f3\u5c11\u8fc7\u4e86\n\n\u5168\u90e8\u52a0\u4e0ainline\u5404\u79cd\u4f18\u5316\u7ec8\u4e8e\u4e0dtle\u4e86\u3002\n\n\n\u6b63\u9898\uff1a\n\n\u5e76\u86e4\u7eed\uff08\u5478\uff09\u5e76\u67e5\u96c6+\u8bfb\u5165\u4f18\u5316+\u5185\u8054\u51fd\u6570\uff08inline\uff09+\u6811\u94fe\u5256\u5206+dfs(doby frog search)\n\n\u5c06\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u8282\u70b9\u5408\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n\n\u96c6\u5408\u7684\u6839\u5c31\u662f\u91cd\u94fe\u7684\u9876\u7aef\n\n\u6240\u4ee5\u8df3\u5230\u91cd\u94fe\u9876\u7aef\u5c31\u662f\u8df3\u5230Find()\u7684\u4f4d\u7f6e\n\n\u5176\u4ed6\u6ce8\u89e3\u89c1\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#define _(ch) ch=read()   //\u65b9\u4fbf\u8bfb\u5165\nconst int S=500001;   //\u6570\u7ec4\u5927\u5c0f\nbool f[S];  //dfs\u65f6\u7684\u6807\u8bb0\nint n,m,s,fa[S],i,cnt,head[S],q,dep[S],sum[S],dad[S];\nstruct edge{int to,next;}e[S*2]; //\u90bb\u63a5\u8868\u5b9a\u4e49\ninline int read()  //\u8bfb\u5165\u4f18\u5316\n{\n    int out=0;char cc=getchar();\n    while (cc>57||cc<48)cc=getchar();\n    while (cc>=48&&cc<=57)\n        out=out*10+cc-48,cc=getchar();\n    return out;\n}\ninline void add(int a,int b)   //+1s\u2190\u5212\uff0c+1\u6761\u8fb9\n{\n    e[++cnt].next=head[a];\n    e[cnt].to=b;\n    head[a]=cnt;\n}\ninline int Find(int w)  //\u5e76\u67e5\u96c6find\u64cd\u4f5c\uff0c\u67e5\u627e\u96c6\u5408\u7684\u6839\uff0c\u5373\u91cd\u94fe\u9876\u7aef\n{\n    if (fa[w]==w)return w;\n    return fa[w]=Find(fa[w]);\n}\ninline void Union(int a,int b)  //\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\u6240\u5728\u96c6\u5408\uff0c\u5373\u642d\u91cd\u94fe\n{\n    fa[Find(b)]=Find(a);\n}\ninline void dfs(int p)  //\u5148\u4e00\u904ddfs\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u62e5\u6709\u7684\u5b50\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u642d\u91cd\u94fe\n{\n    f[p]=1;  //\u6807\u8bb0\u4e0a\uff0c\u9632\u6b62\u91cd\u590d\u8bbf\u95ee\n    int maxs=0;sum[0]=-1;  //\u4ee4p\u7684\u513f\u5b50\u8282\u70b9\u4e2d\u62e5\u6709\u5b50\u8282\u70b9\u6570\u6700\u591a\u7684\u8282\u70b9\u7684\u7f16\u53f7\u4e3amaxs\uff0csum[i]\u4ee3\u8868\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\n    for (int j=head[p];j;j=e[j].next)  //\u904d\u5386p\u7684\u513f\u5b50\u8282\u70b9\n    {\n        int v=e[j].to;\n        if (f[v])continue;   //\u5982\u679c\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u8df3\u8fc7\n        dep[v]=dep[p]+1;  //\u513f\u5b50\u7684\u6df1\u5ea6=\u7238\u7238+1\n        dad[v]=p;dfs(v);   //dad[v]\u53ea\u7f16\u53f7\u4e3av\u7684\u70b9\u7684\u7236\u4eb2\uff0c\u7136\u540edfs\u8be5\u5b50\u8282\u70b9\n        if (sum[v]>sum[maxs])maxs=v; // \u66f4\u65b0maxs\n        sum[p]+=sum[v]+1;  //p\u7684\u5b50\u8282\u70b9\u6570=p\u7684\u4ee5v\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570\u76ee\u52a0\u4e0av\u8fd9\u4e2a\u70b9\n    }\n    if (maxs)Union(p,maxs);  //\u5982\u679c\u5b58\u5728maxs\uff0c\u90a3\u4e48\u642d\u4e00\u6761\u91cd\u94fe\u5230\u8fd9\u4e2amaxs\u4e0a\n}\ninline int jump(int p) //\u8ba1\u7b97\u8df3\u5230\u7684\u70b9\n{\n    int top=Find(p);  //top\u4e3a\u91cd\u94fe\u9876\u7aef\n    if (top==p)return dad[p];  //\u5982\u679cp\u6240\u5728\u7684\u96c6\u5408\u7684\u6839=\u5b83\u81ea\u5df1\uff0c\u90a3\u4e48\u5b83\u7684\u4e00\u5b9a\u6ca1\u6709\u91cd\u94fe\u642d\u5230\u5b83\u7684\u7956\u5148\u8282\u70b9\u4e0a\uff0c\u5373\u662f\u8f7b\u94fe\uff0c\u53ea\u80fd\u8df3\u5230\u7236\u4eb2\u8282\u70b9\n    return top;  //\u662f\u91cd\u94fe\u7684\u8bdd\u5c31\u8df3\u5230\u91cd\u94fe\u9876\u7aef\n}\ninline int lca(int a,int b)  //\u6811\u94fe\u5256\u5206\u6c42lca\n{\n    while (a!=b)   //\u5f53\u4e24\u70b9\u4e0d\u76f8\u7b49\u65f6\u5c31\u8df3\n    {\n        if (Find(a)==Find(b))return dep[a]<dep[b]?a:b;   //\u5982\u679c\u5b83\u4eec\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u5373\u5b83\u4eec\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\uff0c\u90a3\u4e48\u5b83\u4eec\u7684lca\u5c31\u662f\u5b83\u4eec\u5f53\u4e2d\u6df1\u5ea6\u6d45\u7684\u90a3\u4e2a\u70b9\uff0c\u5f88\u597d\u7406\u89e3\u5427.\n        int ja=jump(a),jb=jump(b);  //ja\u4ee3\u8868a\u8981\u8df3\u5230\u7684\u70b9\uff0cjb\u4e0d\u662f\u90a3\u4e2a\u610f\u601d\u2026\u2026\u662fb\u8981\u8c03\u5230\u7684\u70b9\n        if (dep[ja]>dep[jb])a=ja;  //\u9009\u53d6ja\u4e0ejb\u4e2d\u6df1\u5ea6\u6bd4\u8f83\u6df1\u7684\u90a3\u4e2a\u8df3\n        else b=jb;\n    }\n    return a;\n}\nint main()\n{\n    _(n),_(m),_(s);   //\u8bfb\u5165\n    int x,y;\n    for (i=1;i<n;i++)\n        _(x),_(y),add(x,y),add(y,x),fa[i]=i;  //\u5efa\u4e00\u6761\u65e0\u5411\u8fb9\uff0c\u987a\u4fbf\u521d\u59cb\u4e00\u4e0b\u5e76\u67e5\u96c6\n    fa[n]=n;dep[s]=1;dfs(s);  //\u628a\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u8bbe\u4e3a1\uff08\u7136\u800c\u5e76\u6ca1\u6709\u4ec0\u4e48xx\u7528\uff09\uff0c\u7136\u540e\u8fdb\u884cdfs\n    while (m--)\n        _(x),_(y),printf(\"%d\\n\",lca(x,y));  //\u5728\u7ebf\u6811\u5256lca\n    return 0;  //\u534e\u4e3d\u5730\u7ed3\u675f\u3002\n}\n```",
        "postTime": 1488621847,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u53d1\u6811\u94fe\u5256\u5206\u7684sol\uff1f\n\n\u7b80\u76f4\u5c31\u662f\u9609\u5272\u8fc7\u7684\u6a21\u677f\u3002\u3002\u3002\u3002\u3002\n\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <cmath>\n#include <ctime>\nusing namespace std ;\nconst int zhf = 1<<29 ;\nbool Read ( int &x ) {\n    char c = getchar() ; x = 0 ; bool f = 0 ;\n    while ( !isdigit(c) ) {\n        if ( c == '-' ) f = 1 ;\n        if ( c == EOF ) return false ;\n        c = getchar() ;\n    }\n    while ( isdigit(c) ) {\n        x = 10*x + c - '0' ;\n        c = getchar() ;\n    }\n    if (f) x = -x ;\n    return true ;\n}\nconst int maxn = 500010 ;\nint n, m, dep[maxn], siz[maxn], fa[maxn], son[maxn], top[maxn] ;\nint e, be[maxn], to[maxn<<1], nxt[maxn<<1] ;\n\nvoid add ( int x, int y ) {\n    to[++e] = y ;\n    nxt[e] = be[x] ;\n    be[x] = e ;\n}\n\nint dfs1 ( int x ) {\n    int i, u ;\n    siz[x] = 1 ;\n    for ( i = be[x] ; i ; i = nxt[i] ) {\n        u = to[i] ;\n        if ( u == fa[x] ) continue ;\n        fa[u] = x ;\n        dep[u] = dep[x]+1 ;\n        siz[x] += dfs1(u) ;\n        if ( son[x] == -1 || siz[u] > siz[son[x]] ) \n            son[x] = u ;\n    }\n    return siz[x] ;\n}\n\nvoid dfs2 ( int x, int Top ) {\n    top[x] = Top ;\n    if ( son[x] != -1 ) \n        dfs2 ( son[x], Top ) ;\n    for ( int i = be[x] ; i ; i = nxt[i] ) {\n        int u = to[i] ;\n        if ( u == fa[x] || u == son[x] ) continue ;\n        dfs2 ( u, u ) ;\n    }\n}\n\nint query ( int u, int v ) {\n    while ( top[u] != top[v] ) {\n        if ( dep[top[u]] > dep[top[v]] ) swap ( u, v ) ;\n        v = fa[top[v]] ;\n    }\n    return dep[u] < dep[v] ? u : v ;\n}\n\nint main() {\n    int i, j, x, y, rt ;\n    Read(n) ; Read(m) ; Read(rt) ;\n    for ( i = 1 ; i < n ; i ++ ) {\n        Read(x) ; Read(y) ;\n        add ( x, y ) ;\n        add ( y, x ) ;\n    }\n    memset ( son, -1, sizeof(son) ) ;\n    fa[rt] = rt ;\n    dfs1(rt) ;\n    dfs2(rt,rt) ;\n    while (m--) {\n        Read(x) ; Read(y) ;\n        printf ( \"%d\\n\", query ( x, y ) ) ;\n    }\n    return 0 ;\n}\n```\n\u5176\u5b9e\u4e0d\u957f\uff0c\u4e3b\u8981\u662f\u6709\u4e00\u5806\u5934\u6587\u4ef6\u548c\u8bfb\u5165\u4f18\u5316\u4ec0\u4e48\u4ec0\u4e48\u7684\uff08\u5176\u5b9e\u6beb\u65e0\u610f\u4e49\u7684\uff09\n",
        "postTime": 1487342854,
        "uid": 17941,
        "name": "Vasily",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    },
    {
        "content": "\u601d\u8def\u5927\u6982\u4e00\u6837\u5427\uff0c\u8fd8\u662f\u500d\u589e\u597d\u5199\u4e00\u70b9\uff0c\u6ce8\u610f\u5b58\u50a8\uff08pre,now,child)\u6570\u7ec4\u7684\u5927\u5c0f\u8981\u4e3a\u8fb9\u6570\u76842\u500d\u4ee5\u4e0a\uff0c\u5426\u5219\u6700\u540e3\u4e2a\u70b9\u8fc7\u4e0d\u4e86\uff1btarjan\u4e5f\u53ef\u4ee5\u89e3\uff0c\u53c2\u8003\u4e0b\u8fb9\u7684\u5427\uff0c\u5199\u7684\u5df2\u7ecf\u5f88\u7b80\u6d01\u4e86\n\n\n```cpp\nvar\na,b,i,j,tot,n,m,s:longint;//tot\u662f\u81ea\u5df1\u5b58\u50a8\u8fb9\u6570\ndep,now,child,pre:array[0..1000000] of longint;//\u524d\u5411\u661f\u5b58\u56fe\nf:array[0..600000,0..30] of longint;//\u500d\u589e\u6570\u7ec4\nvis:array[0..600000] of boolean;//\u904d\u5386dfs\u8f85\u52a9\u5224\u65ad\nprocedure add(u,v:longint);//\u5efa\u56fe\nbegin\ninc(tot);\npre[tot]:=now[u];\nnow[u]:=tot;\nchild[tot]:=v;\nend;\nprocedure dfs(u:longint);//\u641c\u7d22\u6c42dep\u4ee5\u53ca\u6df1\u5ea6\u76f8\u5dee\u4e3a2^0\u7684\u7236\u4eb2\nvar\np,v:longint;\nbegin\n  p:=now[u];\n  while p<>0 do\n   begin\n    v:=child[p];\n    if vis[v]=false then\n      begin\n       vis[v]:=true;\n       dep[v]:=dep[u]+1;\n       f[v,0]:=u;\n       dfs(v);\n      end;\n    p:=pre[p];\n   end;\nend;\nprocedure bz;//\u500d\u589e\u6c422^i\u7236\u4eb2\uff0c\u4e00\u822c\u6700\u5927\u6df1\u5ea6\u4f30\u8ba1\u4e3atrunc\uff08ln\uff08n\uff09/ln\uff082\uff09\uff09\nvar\ni,j:longint;\nbegin\n for i:=1 to trunc(ln(n)/ln(2)) do\n   for j:=1 to n do\n      f[j,i]:=f[f[j,i-1],i-1];\nend;\nprocedure swap(var u,v:longint);//\u6ce8\u610f\u662f\u4f20\u5730\u5740\uff0c\u4e0d\u662f\u4f20\u53c2\nvar\nt:longint;\nbegin\nt:=u;\nu:=v;\nv:=t;\nend;\nfunction lca(u,v:longint):longint;\nvar\np,temp,ii:longint;\nbegin\n if u=v then exit(u);\n if dep[u]<dep[v] then swap(u,v);\n temp:=dep[u]-dep[v];\n ii:=0;\n while temp>0 do//\u6df1\u5ea6\u63d0\u5230\u4e00\u8d77\u6765\uff0c\u5411\u4e0b\u5bfb\u627e\n  begin\n   if (temp and 1=1) then u:=f[u,ii];\n   temp:=temp shr 1;\n   inc(ii);\n  end;\n if u=v then exit(u);\n ii:=0;\n while u<>v do\n  begin\n   if (f[u,ii]<>f[v,ii])or((f[u,ii]=f[v,ii])and(ii=0)) then\n     begin\n        u:=f[u,ii];\n        v:=f[v,ii];\n        inc(ii);\n      end\n    else   dec(ii);\n  end;\n exit(u);\nend;\nbegin\n readln(n,m,s);\n for i:=1 to n-1 do\n  begin\n   readln(a,b);\n   add(a,b);\n   add(b,a);\n  end;\nfillchar(dep,sizeof(dep),0);\nfillchar(f,sizeof(f),0);\nfillchar(vis,sizeof(vis),false);\nvis[s]:=true;\ndep[s]:=1;\ndfs(s);\nbz;\nfor i:=1 to m do\n begin\n   readln(a,b);\n   writeln(lca(a,b));\n  end;\nend.\n```",
        "postTime": 1479365230,
        "uid": 5946,
        "name": "\u6c99\u6ee9\u7389\u7c73",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3379 \u3010\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u3011"
    }
]