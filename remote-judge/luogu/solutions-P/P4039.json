[
    {
        "content": "\u9898\u76ee\u5927\u610f\n\n\u5c06\u4e00\u4e2a$n*m$\u768401\u77e9\u9635\u6cbf\u7740\u5217\u5207\u51e0\u5200\uff0c\u62c6\u6210\u82e5\u5e72\u4e2a$n*w_i$\u5927\u5c0f\u7684\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u4efb\u610f\u6392\u5217\u5b83\u4eec\u6765\u62fc\u6210\u4e00\u4e2a\u65b0\u7684$n*m$\u768401\u77e9\u9635\uff0c\u4f7f\u5f97\u77e9\u9635\u4e2d\u6700\u5927\u7684\u51680\u77e9\u5f62\u9762\u79ef\u6700\u5927\u3002\n\n### Solution\n\n\u8fd9\u9898\u5173\u952e\u5728\u4e8e$n*m\\leq 10^5$\uff0c\u5373\u77e9\u9635\u5927\u5c0f\u4e0d\u8d85\u8fc7$10^5$\u3002\u4e00\u79cd\u76f4\u89c9\u662f\u5e73\u8861\u89c4\u5212\uff0c\u5373\u5206$n\\leq \\sqrt{10^5}$\u548c$m\\leq \\sqrt{10^5}$\u4e24\u79cd\u60c5\u51b5\u5206\u522b\u8bbe\u8ba1\u7b97\u6cd5\u3002\n\n- $n\\leq \\sqrt{10^5}$\n\n\u679a\u4e3e\u6700\u7ec8\u51680\u77e9\u5f62\u7684\u4e0a\u4e0b\u8fb9\u754c$l,r$\uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u5c0f\u77e9\u9635\u5206\u7c7b\u3002\u82e5\u5c0f\u77e9\u9635\u5185\u7b2c$l$\u884c\u81f3\u7b2c$r$\u884c\u5168\u90e8\u4e3a0\uff0c\u5206\u4e3aI\u7c7b\uff0c\u5426\u5219\u5206\u4e3aII\u7c7b\u3002\n\n\u6700\u540e\u80af\u5b9a\u662f\u628aI\u7c7b\u7684\u77e9\u9635\u653e\u5728\u4e2d\u95f4\uff0c\u4e24\u8fb9\u653eII\u7c7b\u7684\u77e9\u9635\u6765\u51d1\u6210\u4e00\u4e2a\u51680\u77e9\u5f62\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97I\u7c7b\u77e9\u9635\u5bbd\u5ea6\u4e4b\u548c\uff0c\u4ee5\u53caII\u7c7b\u77e9\u9635\u5728\u5de6\u8fb9\u6700\u591a\u51e0\u5217\u4e3a\u51680\uff0c\u53f3\u8fb9\u6700\u591a\u51e0\u5217\u4e3a\u51680\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5de6\u53f3\u4e0d\u80fd\u7528II\u7c7b\u77e9\u9635\u4e2d\u7684\u540c\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u8bb0\u5f55\u4e00\u4e0b\u6b21\u5927\u503c\uff0c\u4e0d\u80fd\u7528\u6700\u5927\u503c\u65f6\u7528\u6b21\u5927\u503c\u66ff\u6362\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n^2m)=O(10^5n)$\uff0c$n$\u662f\u6839\u53f7\u7ea7\u522b\u7684\uff0c\u663e\u7136\u4e0d\u4f1a\u8d85\u65f6\u3002\n\n- $m\\leq 10^5$\n\n\u8fd9\u65f6\u5c31\u4e0d\u80fd\u76f4\u63a5\u679a\u4e3e\u77e9\u5f62\u7684\u4e0a\u4e0b\u8fb9\u754c\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\u679a\u4e3e\u4e0a\u4e0b\u8fb9\u754c\uff1a\n\n> \u8bb0\u5f55\u77e9\u5f62\u4e2d\u6bcf\u4e2a\u70b9$(i,j)$\u5f80\u4e0a\u7b2c\u4e00\u4e2a$1$\u7684\u884c\u53f7\uff08\u8bb0\u4f5c$up[i][j]$\uff09\u3002\u679a\u4e3e\u77e9\u5f62\u4e2d\u7684\u6bcf\u4e2a\u70b9$(i,j)$\uff0c\u5c06$up[i][j]$\u4f5c\u4e3a\u4e0a\u8fb9\u754c\uff0c$i$\u4f5c\u4e3a\u4e0b\u8fb9\u754c\u3002\uff08\u66ff\u6362\u4e86\u539f\u6765\u66b4\u529b\u679a\u4e3e\u7684\u4e0a\u8fb9\u754c$r$\uff0c\u4e0b\u8fb9\u754c$l$\uff09\n\n\u5269\u4e0b\u7684\u8fc7\u7a0b\u5957\u7528\u4e0a\u9762\u7684\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(nm^2)=O(10^5m)$\uff0c$m$\u662f\u6839\u53f7\u7ea7\u522b\u7684\uff0c\u4e5f\u4e0d\u4f1a\u8d85\u65f6\u3002\n\n\u81f3\u6b64\uff0c\u95ee\u9898\u89e3\u51b3\u3002\n\n### Code\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\n\nconst int N=100007;\n\nint T;\nint s,n,m,ans,w[N],st[N],en[N],sum[N],a[N],up[N];\n\nint id(int x,int y){\n\tif(x<1||y<1)return 0;\n\treturn (y-1)*n+x;\n}\nint get(int x1,int x2,int y1,int y2){\n\treturn sum[id(x2,y2)]-sum[id(x1-1,y2)]-sum[id(x2,y1-1)]+sum[id(x1-1,y1-1)];\n}\n\nvoid calc(int l,int r){\n\tfor(int i=1;i<=s;++i)for(int j=st[i],ret=0;j<=en[i];++j){\n\t\tif(get(l,r,j,j)==0)++ret;\n\t\telse ret=0;\n\t\tans=max(ans,(r-l+1)*ret);\n\t}\n\tint L[2][2],R[2][2],mid=0;\n\tmemset(L,0,sizeof(L));\n\tmemset(R,0,sizeof(R));\n\tfor(int i=1;i<=s;++i){\n\t\tint mxl=0,mxr=0;\n\t\tfor(int j=st[i];j<=en[i];++j)if(get(l,r,j,j)==0)++mxl;else break;\n\t\tfor(int j=en[i];j>=st[i];--j)if(get(l,r,j,j)==0)++mxr;else break;\n\t\tif(mxl==w[i])mid+=w[i];\n\t\telse{\n\t\t\tif(mxl>L[0][0])L[0][0]=mxl,L[0][1]=i;\n\t\t\telse if(mxl>L[1][0])L[1][0]=mxl,L[1][1]=i;\n\t\t\tif(mxr>R[0][0])R[0][0]=mxr,R[0][1]=i;\n\t\t\telse if(mxr>R[1][0])R[1][0]=mxr,R[1][1]=i;\n\t\t}\n\t}\n\tfor(int p=0;p<2;++p)for(int q=0;q<2;++q)if(L[p][1]!=R[q][1])ans=max(ans,(r-l+1)*(mid+L[p][0]+R[q][0]));\n\tans=max(ans,(r-l+1)*(mid+L[0][0]));\n\tans=max(ans,(r-l+1)*(mid+R[0][0]));\n}\n\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tm=ans=0;\n\t\tscanf(\"%d%d\",&s,&n);\n\t\tmemset(w,0,sizeof(w));\n\t\tmemset(st,0,sizeof(st));\n\t\tmemset(en,0,sizeof(en));\n\t\tmemset(sum,0,sizeof(sum));\n\t\tmemset(a,0,sizeof(a));\n\t\tmemset(up,0,sizeof(up));\n\t\tfor(int i=1;i<=s;++i){\n\t\t\tscanf(\"%d\",&w[i]);\n\t\t\tst[i]=m+1;\n\t\t\tfor(int j=1;j<=n;++j)for(int k=1;k<=w[i];++k){\n\t\t\t\tchar c;scanf(\" %c\",&c);\n\t\t\t\ta[id(j,m+k)]=c-'0';\n\t\t\t}\n\t\t\tm+=w[i],en[i]=m;\n\t\t}\n\t\tfor(int i=1;i<=n;++i)for(int j=1;j<=m;++j)sum[id(i,j)]=sum[id(i-1,j)]+sum[id(i,j-1)]-sum[id(i-1,j-1)]+a[id(i,j)];\n\t\tfor(int j=1;j<=m;++j)\n\t\t\tfor(int i=1,lst=0;i<=n+1;++i)\n\t\t\t\tif(i>n||a[id(i,j)]){\n\t\t\t\t\tfor(int k=lst+1;k<=i-1;++k)up[id(k,j)]=i-1;\n\t\t\t\t\tlst=i;\n\t\t\t\t}\n\t\tif(n<m)for(int i=1;i<=n;++i)for(int j=i;j<=n;++j)calc(i,j);\n\t\telse for(int i=1;i<=n;++i)for(int j=1;j<=m;++j)calc(i,up[id(i,j)]);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1576314029,
        "uid": 37598,
        "name": "GaryZhong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4039 \u3010[AHOI2014/JSOI2014]\u62fc\u56fe\u3011"
    },
    {
        "content": "\u4ece\u4e0b\u5f80\u4e0a\u4e00\u884c\u4e00\u884c\u5904\u7406\uff0c\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u5411\u4e0a\u5ef6\u4f38\u957f\u5ea6\n\n\u5bf9\u4e8e\u6bcf\u884c\uff0c\u62ff\u53f3\u8fb9\u4e00\u90e8\u5206+\u5b8c\u6574\u7684\u5757+\u5de6\u8fb9\u7684\u5757\u62fc\u4e00\u4e0b\n\n\u62ff\u5806\u6309\u9ad8\u5ea6\u7ef4\u62a4\u4e00\u4e0b\u5b8c\u6574\u7684\u5757\u7684\u957f\u5ea6\uff0c\u4e00\u4e2a\u4e00\u4e2a\u7684\u62ff\u8d70\u6700\u4f4e\u9ad8\u5ea6\uff0c\u6254\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u91cc\n\n\u5bf9\u53e6\u4e00\u4e2a\u96c6\u5408\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u9ad8\u5ea6\u7684\u6700\u957f\u957f\u5ea6\u5c31\u53ef\u4ee5\u4e86\uff08\u4ece\u5de6\u8fb9\u6216\u53f3\u8fb9\uff09\n\n\u53ef\u4ee5\u76f4\u63a5\u53ef\u4ee5\u6301\u4e45\u5316\u786c\u8279(\u6069\u6ce8\u610f\u4e00\u4e0b\u5de6\u8fb9\u53f3\u8fb9\u4e0d\u80fd\u6765\u81ea\u4e00\u4e2a\u5757)\n\n\u4e0d\u8fc7\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e2a\u6570\u4e0d\u8d85\u8fc7$\\sqrt 1e5$\uff0c\u79bb\u6563\u5316\u4e00\u4e0b\u5c31\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u4e86",
        "postTime": 1550478043,
        "uid": 63727,
        "name": "ButterflyDew",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4039 \u3010[AHOI2014/JSOI2014]\u62fc\u56fe\u3011"
    },
    {
        "content": "# [AHOI2014/JSOI2014]\u62fc\u56fe\n\n## \u9898\u76ee\u94fe\u63a5\n\n### [[AHOI2014/JSOI2014]\u62fc\u56fe](https://www.luogu.org/problemnew/show/P4039)\n\n## \u89e3\u9898\u62a5\u544a\n\n\u7f51\u4e0a\u7684\u9898\u89e3\u90fd\u662f\u6839\u53f7\u5206\u6cbb\uff0c\u4f46\u662f\u8fd9\u91cc\u8003\u8651\u4e00\u79cd$log$\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u611f\u8c22@[\u72ec\u79c0\u5e73\u5ddd](https://www.luogu.org/space/show?uid=53153)\u795e\u4ed9\u544a\u8bc9\u4e86\u6211\u8fd9\u4e2a\u795e\u5947\u7684\u89e3\u6cd5\u3002\n\n\u7b80\u5355\u601d\u8003\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u4f18\u60c5\u51b5\u53ea\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u5728\u4e00\u5757\u62fc\u56fe\u5185\u90e8\u9009\u53d6\u4e00\u4e2a\u4e3e\u884c\uff0c\u4e00\u79cd\u662f\u591a\u4e2a\u62fc\u56fe\u8054\u901a\u8d77\u6765\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50 :\n\n![](https://cdn.luogu.com.cn/upload/pic/54978.png)\n\n\u5f53\u7136\uff0c\u53ef\u80fd\u4f1a\u6ca1\u6709\u5de6\u533a\u95f4\u6216\u8005\u53f3\u533a\u95f4\u3002\n\n\u6682\u65f6\u4e0d\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u683c\u5b50\uff0c\u6700\u591a\u53ef\u4ee5\u5411\u4e0a\u5ef6\u4f38\u591a\u5c11(\u5982\u679c\u8fd9\u4e2a\u683c\u5b50\u4e0a\u7684\u6570\u5b57\u4e3a $1$ \u90a3\u4e48\u662f\u4e0d\u53ef\u5ef6\u4f38\u7684)\uff0c\u53ea\u9700\u8981\u4ece\u4e0a\u5230\u4e0b\u626b\u4e00\u904d\u5373\u53ef\u3002\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u4ece\u4e0b\u5f80\u4e0a\u679a\u4e3e\u6240\u6c42\u77e9\u5f62\u7684\u4e0b\u8fb9\u754c\uff0c\u5bfb\u627e\u6700\u4f18\u89e3\u3002\n\n\u8003\u8651\u5df2\u77e5\u4e0b\u8fb9\u754c\u5982\u4f55\u6c42\u51fa\u6700\u4f18\u89e3\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u62fc\u56fe\uff0c\u60c5\u51b5\u90fd\u5e94\u8be5\u662f\u8fd9\u6837\u5b50\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/54982.png)\n\n\u5176\u4e2d\u84dd\u8272\u7684\u8868\u793a\u4ece\u5f53\u524d\u4e0b\u8fb9\u754c\u6700\u591a\u53ef\u4ee5\u5f80\u4e0a\u5ef6\u4f38\u7684\u90e8\u5206\u3002\n\n\u5c1d\u8bd5\u4ece\u4e0a\u5230\u4e0b\u679a\u4e3e\u9ad8\u5ea6\uff0c\u7531\u4e8e\u5728\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u9ad8\u5ea6\u6700\u591a\u6709 $M$ \u79cd\uff0c\u800c $n \\times M \\leq 10^5$\uff0c\u6240\u4ee5\u5230\u73b0\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u8fd8\u662f\u5728\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u3002\n\n\u6bcf\u679a\u4e3e\u5230\u4e00\u4e2a\u9ad8\u5ea6\uff0c\u90fd\u9700\u8981\u6c42\u51fa\u6bcf\u4e00\u5757\u62fc\u56fe\u4ece\u5de6\u8fb9\u5411\u5185\u53ef\u4ee5\u5ef6\u4f38\u591a\u5c11\uff0c\u4ece\u53f3\u8fb9\u5411\u5185\u53ef\u4ee5\u5ef6\u4f38\u591a\u5c11(\u7279\u522b\u5730\uff0c\u5982\u679c\u53ef\u4ee5\u5ef6\u4f38\u7684\u957f\u5ea6\u7b49\u4e8e\u8be5\u5757\u62fc\u56fe\u7684\u957f\u5ea6\uff0c\u8bf4\u660e\u8fd9\u4e00\u5757\u62fc\u56fe\u88ab\u6253\u901a\u4e86\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e2d\u95f4\u7684\u5757)\u3002\n\n\u53ea\u8981\u7ef4\u62a4\u4e86\u8fd9\u4e9b\u4e1c\u897f\uff0c\u6211\u4eec\u627e\u51fa\u4ece\u5de6\u8fb9\u5ef6\u4f38\u6700\u591a\u7684\u62fc\u56fe\uff0c\u4ece\u53f3\u8fb9\u5ef6\u4f38\u6700\u591a\u7684\u62fc\u56fe\uff0c\u4ee5\u53ca\u6240\u6709\u88ab\u6253\u901a\u4e86\u7684\u62fc\u56fe\uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\u5c31\u53ef\u4ee5\u5f97\u5230\u5f53\u524d\u9ad8\u5ea6\u7684\u6700\u4f18\u89e3\u3002\n\n\u7531\u4e8e \u4ece\u5de6\u8fb9\u5ef6\u4f38\u6700\u591a\u7684\u62fc\u56fe \u548c \u4ece\u53f3\u8fb9\u5ef6\u4f38\u6700\u591a\u7684\u62fc\u56fe \u53ef\u80fd\u662f\u540c\u4e00\u4e2a\u62fc\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u4f1a\u540c\u65f6\u9700\u8981\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u540c\u65f6\uff0c\u5f53\u4e00\u4e2a\u62fc\u56fe\u88ab\u6253\u901a\u4e4b\u540e\uff0c\u9700\u8981\u5c06\u5b83\u5bf9\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u8d21\u732e\u5220\u53bb\u3002\u4e8e\u662f\u9009\u62e9\u4f7f\u7528\u4e24\u4e2a $set$ \u5206\u522b\u6765\u5b58\u50a8\u6ca1\u88ab\u6253\u901a\u7684\u62fc\u56fe\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u5728\u679a\u4e3e\u9ad8\u5ea6\u4e4b\u540e\u5feb\u901f\u6c42\u51fa\u6240\u9700\u8981\u7684\u503c\uff0c\u53ea\u9700\u8981\u4e24\u4e2a\u6307\u9488\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u4e3a\u4e86\u987a\u4fbf\u89e3\u51b3\u6700\u4f18\u60c5\u51b5\u5728\u4e00\u5757\u62fc\u56fe\u5185\u90e8\u7684\u60c5\u51b5\uff0c\u9009\u62e9\u4f7f\u7528\u5e76\u67e5\u96c6\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u5757\u62fc\u56fe\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u5217\u5f53\u4f5c\u4e00\u4e2a\u5355\u72ec\u7684\u70b9\uff0c\u5c06\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5411\u4e0a\u5ef6\u4f38\u8ddd\u79bb\u79f0\u4e3a\u8fd9\u4e2a\u70b9\u7684\u9ad8\u5ea6\uff0c\u7531\u4e8e\u662f\u4ece\u4e0a\u5f80\u4e0b\u679a\u4e3e\u9ad8\u5ea6\uff0c\u6240\u4ee5\u76f8\u90bb\u7684\u4e24\u70b9\u4e4b\u95f4\u53ea\u53ef\u80fd\u662f\u5728\u4e0d\u65ad\u5730\u5408\u5e76\uff0c\u6bcf\u679a\u4e3e\u5230\u4e00\u4e2a\u9ad8\u5ea6 $h$\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u5c06\u6240\u6709\u9ad8\u5ea6\u4e3a $h$ \u7684\u70b9\u548c\u5b83\u76f8\u90bb\u4e14\u9ad8\u5ea6\u4e3a $h$ \u7684\u70b9\u5408\u5e76\u5373\u53ef\u3002\u5982\u679c\u5f53\u524d\u70b9\u6240\u5728\u8054\u901a\u5757\u7684\u5927\u5c0f\u4e3a\u8fd9\u5757\u62fc\u56fe\u7684\u5bbd\u5ea6\uff0c\u8bf4\u660e\u5f53\u524d\u62fc\u56fe\u88ab\u6253\u901a\u4e86\u3002\n\n\u540c\u65f6\uff0c\u5f53\u524d\u70b9\u6240\u5728\u8054\u901a\u5757\u7684\u5927\u5c0f\u4e0e\u5f53\u524d\u679a\u4e3e\u5230\u7684\u9ad8\u5ea6 $h$ \u76f8\u4e58\uff0c\u5e76\u7528\u7ed3\u679c\u66f4\u65b0 $ans$ \u5c31\u53ef\u4ee5\u6db5\u76d6\u6240\u6709\u6700\u4f18\u89e3\u5728\u4e00\u5757\u62fc\u56fe\u7684\u60c5\u51b5\u4e86\u3002\u8fd9\u4e2a\u7b80\u5355\u60f3\u4e00\u4e0b\u5c31\u660e\u767d\u4e86\u5427\uff1f\n\n\u9644\u4e0aCode\u3002\u3002\u3002\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<deque>\n#include<queue>\n#include<set>\n\nclass Solution{\nprivate :\n    typedef std::pair<int, int> par;\n    static const int maxn = 1e5 + 7;\n    \n    struct Block{\n        int len, **h;\n        int *fa, *size;\n        bool *open;\n        std::string *str;\n\n        inline int *operator [](int x) const {\n            return this->h[x];\n        }\n\n        int find(int k) {\n            return fa[k] == k ? k : fa[k] = find(fa[k]);\n        }\n\n        int findSize(int k) {\n            return size[find(k)];\n        }\n\n        void merge(int x, int y) {\n            if (!open[x] || !open[y]) {\n                return;\n            }\n            x = find(x), y = find(y);\n            if (x == y) {\n                return;\n            }\n            fa[y] = x;\n            size[x] += size[y];\n        }\n    };\n    \n    int t, s, n, ans;\n    Block b[maxn];\n    std::deque<par> dq;\n    std::priority_queue<std::pair<int, par> > pq;\n    std::set<par, std::greater<par> > left, right;\n\n    template<typename T>\n    T next(T x) {\n        ++x;\n        return x;\n    }\n\n    template<typename T>\n    T prev(T x) {\n        --x;\n        return x;\n    }\n\n    void make(const Block &b) {\n        for (register int i = 1; i <= n; i++) {\n            for (register int j = 1; j <= b.len; j++) {\n                bool now = b.str[i][j - 1] - '0';\n                if (now) {\n                    b[i][j] = 0;\n                } else {\n                    b[i][j] = b[i - 1][j] + 1;\n                }\n                //printf(\"%d \", b[i][j]);\n            }\n            //putchar('\\n');\n        }\n        //putchar('\\n');\n    }\n\n    int deal(int flor) {\n        int res = 0;\n        //printf(\"floor = %d : \\n\", flor);\n        for (register int i = 1; i <= s; i++) {\n            left.insert(std::make_pair(0, i));\n            right.insert(std::make_pair(0, i));\n            memset(b[i].open, 0, b[i].len + 2);\n            b[i].fa[0] = 0, b[i].size[0] = 0, b[i].open[0] = 1;\n            b[i].fa[b[i].len + 1] = b[i].len + 1, b[i].size[b[i].len + 1] = 0, b[i].open[b[i].len + 1] = 1;\n            for (register int j = 1; j <= b[i].len; j++) {\n                b[i].fa[j] = j, b[i].size[j] = 1;\n                pq.push(std::make_pair(b[i][flor][j], std::make_pair(i, j)));\n            }\n        }\n        int mid = 0;\n        //fprintf(stderr, \"%d\\n\", flor);\n        while (!pq.empty()) {\n            int height = pq.top().first, id = pq.top().second.first, pos = pq.top().second.second;\n            pq.pop();\n\n            int leftLen = b[id].findSize(0), rightLen = b[id].findSize(b[id].len + 1);\n            b[id].open[pos] = 1;\n            b[id].merge(pos, pos - 1);\n            b[id].merge(pos, pos + 1);\n            ans = std::max(ans, b[id].findSize(pos) * height);\n            //printf(\"%d %d : %d %d\\n\", id, pos, b[id].findSize(pos), height);\n            left.erase(std::make_pair(leftLen, id));\n            right.erase(std::make_pair(rightLen, id));\n            if (b[id].findSize(0) == b[id].len) {\n                //puts(\"233\");\n                mid += b[id].findSize(0);\n            } else {\n                left.insert(std::make_pair(b[id].findSize(0), id));\n                right.insert(std::make_pair(b[id].findSize(b[id].len + 1), id));\n            }\n            //printf(\"%d %d : %d\\n\", flor, height, mid);\n            int sum = mid * height;\n            res = std::max(res, sum);\n            if (!left.empty()) {\n                par l = *left.begin();\n                //printf(\":: %d\\n\", l.first);\n                res = std::max(res, sum + l.first * height);\n                if (!right.empty()) {\n                    par r = *right.begin();\n                    if (l.second == r.second) {\n                        if (right.size() > 1u) {\n                            r = *next(right.begin());\n                            res = std::max(res, sum + (l.first + r.first) * height);\n                        }\n                        if (left.size() > 1u) {\n                            l = *next(left.begin());\n                            res = std::max(res, sum + (l.first + r.first) * height);\n                        }\n                    } else {\n                        res = std::max(res, sum + (l.first + r.first) * height);\n                    }\n                }\n            } else {\n                if (!right.empty()) {\n                    par r = *right.begin();\n                    res = std::max(res, sum + r.first * height);\n                }\n            }\n            //par leftFirst = *left.begin();\n        }\n        //printf(\"%d %d\\n\", flor, res);\n        return res;\n    }\n    \npublic :\n    Solution() {\n        scanf(\"%d\", &t);\n        while (t--) {\n            get();\n            solve();\n        }\n    }\n\n    void get() {\n        scanf(\"%d %d\", &s, &n);\n        for (register int i = 1; i <= s; i++) {\n            scanf(\"%d\", &b[i].len);\n            b[i].h = new int*[n + 1];\n            b[i].fa = new int[b[i].len + 2];\n            b[i].size = new int[b[i].len + 2];\n            b[i].open = new bool[b[i].len + 2];\n            \n            b[i].str = new std::string[n + 1];\n            b[i].h[0] = new int[b[i].len + 1];\n            memset(b[i].h[0], 0, (b[i].len + 1) << 2);\n            for (register int j = 1; j <= n; j++) {\n                std::cin >> b[i].str[j];\n                b[i].h[j] = new int[b[i].len + 1];\n                memset(b[i].h[j], 0, (b[i].len + 1) << 2);\n            }\n        }\n    }\n\n    void solve() {\n        //make(b[1]);\n        //ans = getAns(b[1]);\n        ans = 0;\n        for (register int i = 1; i <= s; i++) {\n            make(b[i]);\n            //ans = std::max(ans, getAns(b[i]));\n        }\n        for (register int i = 1; i <= n; i++) {\n            ans = std::max(ans, deal(i));\n        }\n        printf(\"%d\\n\", ans);\n    }\n};\nSolution sol;\n\nint main() {}\n\n```",
        "postTime": 1553495209,
        "uid": 49866,
        "name": "\u9f99\u4e4b\u543b\u2014\u6c34\u8d27",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4039 \u3010[AHOI2014/JSOI2014]\u62fc\u56fe\u3011"
    }
]