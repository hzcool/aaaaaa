[
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u7528\u5806\u6765\u7ef4\u62a4\u51fa\u6bcf\u4e00\u6b65\u5378\u4e0b\u7684\u662f\u54ea\u4e00\u4e2a\u9489\u5b50\u3002\n\n\u5220\u70b9\u6bd4\u8f83\u590d\u6742\uff0c\u53cd\u8fc7\u6765\u53d8\u6210\u52a0\u70b9\u3002\n\n\u6c34\u5e73\u5e8f\u6392\u5e8f\u540e\uff0c\u5206\u522b\u7ef4\u62a4\u4e0a\u51f8\u58f3\u548c\u4e0b\u51f8\u58f3\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u5927\u6982\u662f\uff0c\u52a0\u5165\u4e00\u4e2a\u70b9\u65f6\uff0c\u627e\u5230\u5176\u5728\u51f8\u58f3\u4e2d\u7684\u524d\u9a71\u548c\u540e\u7ee7\uff0c\u5224\u65ad\u4e00\u4e0b\u5b83\u662f\u5426\u51f8\u51fa\u6765\u3002\n\n\u5982\u679c\u51f8\u51fa\u6765\u5219\u9700\u8981\u52a0\u5165\u8fd9\u4e2a\u70b9\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u5411\u4e24\u8fb9\u68c0\u67e5\uff0c\u4e0d\u65ad\u5220\u53bb\u51f9\u4e0b\u53bb\u7684\u70b9\u3002\n\n\u64cd\u4f5c\u53ea\u6709\u63d2\u5165\u3001\u5220\u9664\u548c\u67e5\u627e\u524d\u9a71\u540e\u7ee7\uff0c\u5e73\u8861\u6811\u5373\u53ef\u7ef4\u62a4\uff0cC++ \u5b9e\u73b0\u7684\u8bdd\u7528 `std::set` \u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n \\log n)$\u3002\n\n\u6700\u540e\u6ce8\u610f\u8f93\u51fa\u7ec6\u8282\uff0c\u7531\u4e8e `double` \u7cbe\u5ea6\u53ea\u6709 $15 \\sim 16$ \u4f4d\uff0c\u800c\u672c\u9898\u7b54\u6848\u6700\u591a\u53ef\u4ee5\u6709 $19$ \u4f4d\uff0c\u6545\u8f93\u51fa\u65f6\u4e0d\u80fd\u76f4\u63a5\u4e58 $0.5$\u3002\u6b63\u786e\u7684\u5904\u7406\u65b9\u5f0f\u5e94\u8be5\u662f\u5224\u65ad\u5947\u5076\u6027\u6765\u8f93\u51fa $.0$ \u6216 $.5$\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <set>\n#include <queue>\n\nconst int MaxN = 300000;\n\ntypedef struct vec_t {\n  long long x, y;\n  vec_t(long long _x = 0, long long _y = 0) { x = _x, y = _y; }\n  inline friend bool operator<(const vec_t &a, const vec_t &b) { return a.x < b.x; }\n  inline friend vec_t operator-(const vec_t &a, const vec_t &b) { return vec_t(a.x - b.x, a.y - b.y); }\n  inline friend long long cross(const vec_t &a, const vec_t &b) { return a.x * b.y - a.y * b.x; }\n} node_t;\n\nint N;\nlong long Area;\nnode_t A[MaxN + 5];\nbool Del[MaxN + 5];\nint Id[MaxN + 5];\nlong long Ans[MaxN + 5];\nstd::priority_queue< std::pair<int, int> > _L, _R, _U, _D;\nstd::set<int> Up, Down;\n\nvoid init() {\n  scanf(\"%d\", &N);\n  for (int i = 1; i <= N; ++i) scanf(\"%lld %lld\", &A[i].x, &A[i].y);\n  std::sort(A + 1, A + 1 + N);\n  for (int i = 1; i <= N; ++i) {\n    _L.push(std::make_pair(-A[i].x, i));\n    _R.push(std::make_pair(A[i].x, i));\n    _U.push(std::make_pair(A[i].y, i));\n    _D.push(std::make_pair(-A[i].y, i));\n  }\n  static char s[MaxN + 5];\n  scanf(\"%s\", s + 1);\n  for (int i = 1; i <= N - 2; ++i) {\n    if (s[i] == 'L') {\n      while (Del[_L.top().second] == true) _L.pop();\n      Id[i] = _L.top().second;\n      Del[_L.top().second] = true;\n    } else if (s[i] == 'R') {\n      while (Del[_R.top().second] == true) _R.pop();\n      Id[i] = _R.top().second;\n      Del[_R.top().second] = true;\n    } else if (s[i] == 'U') {\n      while (Del[_U.top().second] == true) _U.pop();\n      Id[i] = _U.top().second;\n      Del[_U.top().second] = true;\n    } else {\n      while (Del[_D.top().second] == true) _D.pop();\n      Id[i] = _D.top().second;\n      Del[_D.top().second] = true;\n    }\n  }\n}\n\ninline void uppre(int x, std::set<int>::iterator pre) {\n  std::set<int>::iterator ppre = pre;\n  while (ppre != Up.begin()) {\n    ppre--;\n    if (cross(A[*pre] - A[x], A[*ppre] - A[*pre]) > 0) break;\n    Area -= cross(A[*pre], A[*ppre]);\n    Up.erase(pre);\n    pre = ppre;\n  }\n}\n\ninline void upnxt(int x, std::set<int>::iterator nxt) {\n  std::set<int>::iterator nnxt = nxt;\n  nnxt++;\n  while (nnxt != Up.end()) {\n    if (cross(A[*nxt] - A[*nnxt], A[x] - A[*nxt]) > 0) break;\n    Area -= cross(A[*nnxt], A[*nxt]);\n    Up.erase(nxt);\n    nxt = nnxt;\n    nnxt++;\n  }\n}\n\nvoid insertUp(int x) {\n  std::set<int>::iterator nxt = Up.lower_bound(x), pre = nxt;\n  if (nxt == Up.begin()) {\n    upnxt(x, nxt);\n    Area += cross(A[*Up.begin()], A[x]);\n    Up.insert(x);\n  } else if (nxt == Up.end()) {\n    pre--;\n    uppre(x, pre);\n    Area += cross(A[x], A[*(--Up.end())]);\n    Up.insert(x);\n  } else {\n    pre--;\n    if (cross(A[x] - A[*nxt], A[*pre] - A[x]) < 0) return;\n    Area -= cross(A[*nxt], A[*pre]);\n    uppre(x, pre), upnxt(x, nxt);\n    nxt = Up.lower_bound(x), pre = nxt;\n    pre--;\n    Area += cross(A[*nxt], A[x]) + cross(A[x], A[*pre]);\n    Up.insert(x);\n  }\n}\n\ninline void downpre(int x, std::set<int>::iterator pre) {\n  std::set<int>::iterator ppre = pre;\n  while (ppre != Down.begin()) {\n    ppre--;\n    if (cross(A[*pre] - A[*ppre], A[x] - A[*pre]) > 0) break;\n    Area -= cross(A[*ppre], A[*pre]);\n    Down.erase(pre);\n    pre = ppre;\n  }\n}\n\ninline void downnxt(int x, std::set<int>::iterator nxt) {\n  std::set<int>::iterator nnxt = nxt;\n  nnxt++;\n  while (nnxt != Down.end()) {\n    if (cross(A[*nxt] - A[x], A[*nnxt] - A[*nxt]) > 0) break;\n    Area -= cross(A[*nxt], A[*nnxt]);\n    Down.erase(nxt);\n    nxt = nnxt;\n    nnxt++;\n  }\n}\n\nvoid insertDown(int x) {\n  std::set<int>::iterator nxt = Down.lower_bound(x), pre = nxt;\n  if (nxt == Down.begin()) {\n    downnxt(x, nxt);\n    Area += cross(A[x], A[*Down.begin()]);\n    Down.insert(x);\n  } else if (nxt == Down.end()) {\n    pre--;\n    downpre(x, pre);\n    Area += cross(A[*(--Down.end())], A[x]);\n    Down.insert(x);\n  } else {\n    pre--;\n    if (cross(A[x] - A[*pre], A[*nxt] - A[x]) < 0) return;\n    Area -= cross(A[*pre], A[*nxt]);\n    downpre(x, pre), downnxt(x, nxt);\n    nxt = Down.lower_bound(x), pre = nxt;\n    pre--;\n    Area += cross(A[*pre], A[x]) + cross(A[x], A[*nxt]);\n    Down.insert(x);\n  }\n}\n\nvoid solve() {\n  for (int i = 1; i <= N; ++i)\n    if (Del[i] == false) {\n      Up.insert(i);\n      Down.insert(i);\n    }\n  for (int q = N - 2; q >= 1; --q) {\n    int x = Id[q];\n    insertUp(x);\n    insertDown(x);\n    Ans[q] = Area;\n  }\n  for (int i = 1; i <= N - 2; ++i)\n    printf(\"%lld.%lld\\n\", Ans[i] >> 1, (Ans[i] & 1) * 5);\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```",
        "postTime": 1589331135,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P6425 \u3010[COCI2008-2009#2] CAVLI\u3011"
    }
]