[
    {
        "content": "\u5f00\u59cb\u770b\u9519\u4e86\uff0c\u4ee5\u4e3a\u4e00\u6279\u4eba\u4e0d\u80fd\u5206\u5f00\u8d70\u3002\u3002\u3002\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u9053\u88f8\u88f8\u7684\u7f51\u7edc\u6d41\n\n\u7b54\u6848\u4e3amaxflow\u548c\u53d6\u4e0a\u6574(x/maxflow)\n\n\u7528\u666e\u901a\u7684\u7f51\u7edc\u6d41\u7b97\u6cd5\u5373\u53efAC\u3002\u3002\u3002\n",
        "postTime": 1377596017,
        "uid": 400,
        "name": "hncsyjc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "## \u5206\u6790\n\u6211\u4eec\u770b\u4e00\u4e0b\u8865\u5145\u8bf4\u660e\uff0c\u6bcf\u6b21\u53ea\u80fd\u989d\u5b9a\u7684\u5b66\u751f\u6570\u91cf\uff0c\u4e0d\u80fd\u51fa\u73b0\u62e5\u6324\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u5b83\u5c31\u5728\u75af\u72c2\u6697\u793a\u6211\u4eec\u8fd9\u5c31\u662f\u7f51\u7edc\u6d41\u3002\u4e0b\u9762\u662f\u6b63\u89e3\u3002\n\n\n\u8fd9\u9898\u80af\u5b9a\u8d2a\u5fc3\uff0c\u7531\u4e8e\u5148\u9001\u54ea\u4e2a\u540c\u5b66\u6ca1\u6709\u533a\u522b\uff0c\u5982\u679c\u6bcf\u6b21\u653e\u6700\u591a\u7684\u4e00\u6ce2\u4eba\u51fa\u53bb\u80af\u5b9a\u4e0d\u5403\u4e8f\uff0c\u6240\u4ee5\u5c31\u4e00\u80a1\u8111\u5730\u6bcf\u6b21\u585e\u6700\u591a\u7684\u4e00\u6ce2\u4eba\u51fa\u53bb\u5c31\u884c\u4e86\u3002\n\n\u6240\u4ee5\u73b0\u5728\u662f\u770b\u6bcf\u6b21\u6700\u591a\u9001\u51e0\u4e2a\u4eba\u3002\n\n\u7136\u540e\u518d\u4e00\u770b\u9898\u9762\uff0c\u8fd9\u5c31\u662f\u88f8\u7684\u7f51\u7edc\u6d41\u3002\n\ndinic \u7b97\u6cd5\u5199\u597d\uff0c\u7b97\u51fa\u6bcf\u6b21\u6700\u591a\u51e0\u4e2a\u4eba\uff0c\u7136\u540e\u9664$x$\u5c31\u884c\u4e86\u3002\n\n\u6ce8\u610f\uff0c\u6ca1\u6cd5\u9003\u8d70\u7684\u60c5\u51b5\u5373\u4e00\u6b21\u4e00\u4e2a\u4eba\u90fd\u51fa\u4e0d\u53bb\uff0c\u7279\u5224\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\n\n\u6570\u636e\u8303\u56f4\u5462\uff1f\u51fa\u9898\u4eba\u5f88\u8d34\u5fc3\u5730\u7ed9\u6211\u4eec\u8bbe\u7f6e\u4e86\u4e00\u4e2a$n\\le 200$\u7684\u6570\u636e\uff0c\u6765\u4ee3\u8868\u8fd9\u662f\u771f\u7684\u7f51\u7edc\u6d41\uff0c\u4e0d\u4f1a\u5361\u5e38\u3002\u4e0d\u8fc7\u5176\u5b9e\u6570\u636e\u8fd8\u53ef\u4ee5\u518d\u52a0\u5927\uff0c\u56e0\u4e3a\u7f51\u7edc\u6d41\u7684\u526a\u679d\u975e\u5e38\u5389\u5bb3\uff0c$n$\u518d\u5927\u4e00\u70b9\u4e5f\u65e0\u59a8\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2009;\nstruct edge{int to,nxt,w;}e[N*2];int hd[N],tot=1;\nvoid add(int u,int v,int w){\n\te[++tot]=(edge){v,hd[u],w}; hd[u]=tot;\n}\n\nint n,m,d[N],ans,x;\nbool bfs(){\n\tqueue<int>q; memset(d,0,sizeof(d));\n\tq.push(1),d[1]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front(); q.pop();\n\t\tfor(int i=hd[u],v;i;i=e[i].nxt)\n\t\t\tif(!d[v=e[i].to]&&e[i].w){\n\t\t\t\tq.push(v),d[v]=d[u]+1;\n\t\t\t\tif(v==n) return 1;\n\t\t\t}\n\t}\n\treturn 0;\n} \nint dfs(int u,int flow){\n\tif(u==n) return flow;\n\tint rest=flow;\n\tfor(int i=hd[u],v;i&&rest;i=e[i].nxt){\n\t\tif(e[i].w&&d[v=e[i].to]==d[u]+1){\n\t\t\tint tmp=dfs(v,min(rest,e[i].w));\n\t\t\tif(!tmp) d[v]=0;\n\t\t\trest-=tmp; e[i].w-=tmp; e[i^1].w+=tmp;\n\t\t}\n\t}\n\treturn flow-rest; //\u771f\u6b63\u7ed9\u51fa\u53bb\u7684 \n}\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&x);\n\tfor(int i=1,u,v,w;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&u,&v,&w),add(u,v,w),add(v,u,0);\n\tint tmp=0;\n\twhile(bfs()) while(tmp=dfs(1,1e9)) ans+=tmp;\n\tif(!ans){puts(\"Orz Ni Jinan Saint Cow!\");return 0;} \n\tprintf(\"%d \",ans);\n\tint a2=ceil(x*1./ans);\n\tprintf(\"%d\",a2);\n\treturn 0;\n}\n```\n**\u7136\u540e\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u7f51\u7edc\u7624\u7684\u53ef\u4ee5\u770b\uff1a[\u6211\u7684\u7f51\u7edc\u6d41](https://www.luogu.com.cn/blog/forever-captain/wang-lao-liu-xue-xi-bi-ji)**",
        "postTime": 1583710303,
        "uid": 180652,
        "name": "_lgswdn",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "# [P1343 \u5730\u9707\u9003\u751f](https://www.luogu.org/problemnew/show/P1343)\n\n---\n\n# \u7b97\u6cd5\n\u7f51\u7edc\u6700\u5927\u6d41\u3002 \u8bf7\u5927\u5bb6\u5148\u638c\u63e1\uff0c\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u8bb2\u3002\n\n# \u601d\u8def\n\u5f88\u660e\u663e\uff0c1\u662f\u6e90\u70b9\uff0cn\u662f\u6c47\u70b9\uff0c\u76f4\u63a5\u7f51\u7edc\u6700\u5927\u6d41\u6a21\u677f\u5373\u53ef\u3002\n\u8fd9\u91cc\u6570\u636e\u5341\u5206\u5c0f\uff0c\u7528Edmonds-Karp\u6216Dinic\u90fd\u53ef\u4ee5\u3002\n~~\u6211\u624d\u4e0d\u544a\u8bc9\u4f60EK\u600e\u4e48\u6253\u5fd8\u5149\u4e86~~\n\u7528\u7f51\u7edc\u6d41\u6c42\u51fa\u4e86\u6bcf\u6b21\u80fd\u901a\u8fc7\u7684\u5b66\u751f\u6570ans\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u5206\u6210$floor(frac{ans - 1}x) + 1$\u6b21\u901a\u8fc7\u3002\u603b\u4f53\u6765\u8bf4\u4e0d\u662f\u5f88\u96be\uff0c\u5177\u4f53\u770b\u4ee3\u7801QAQ\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define open(s) freopen( s\".in\", \"r\", stdin ), freopen( s\".out\", \"w\", stdout )\n#define MAXN 205\n#define MAXM 4005\n//\u5efa\u53cc\u5411\u8fb9\u8981\u5f00\u4e24\u500d\u522b\u5fd8\u4e86\n\nint n, m, X, ans;//\u5c0f\u5199\u7684x\u4f1a\u51b2\u7a81\uff08\u4e0b5\u884c\uff09 QAQ \u53ea\u597d\u6539\u5927\u5199\nint hd[MAXN], nxt[MAXM], to[MAXM], val[MAXM], tot(1);//MAXN\u3001MAXM\u522b\u770b\u9519\u4e86 ~~\u6211\u624d\u4e0d\u544a\u8bc9\u4f60\u4e3a\u4e86\u8fd9\u4e2a\u6211\u9519\u4e86\u597d\u51e0\u904d~~\n//\u8fd8\u6709tot\u8981\u8d4b\u503c\u4e3a1**\u5343\u4e07**\u522b\u5fd8\u4e86 ~~\u6211\u53c8\u4e3a\u8fd9\u4e2a\u8c03\u8bd5\u4e86\u597d\u4e45~~\uff08\u4e0d\u7528\u6210\u5bf9\u5b58\u50a8\u7684\u8bf7\u5ffd\u7565\u8fd9\u53e5\u8bdd\uff09\nint dis[MAXN];\nqueue<int> Q;\nint S, T;\nint x, y;\n\nvoid Add( int x, int y, int z ){nxt[++tot] = hd[x]; hd[x] = tot; to[tot] = y; val[tot] = z;}//\u94fe\u5f0f\u524d\u5411\u661f\u4e07\u5c81\uff01~~\u867d\u7136\u90bb\u63a5\u77e9\u9635\u4e5f\u53ef\u4ee5~~\n\nbool BFS(){//\u5206\u5c42\n\twhile( !Q.empty() ) Q.pop();//\u6e05\u7a7aqueue \u61d2\u5f97\u624b\u6253\u961f\u5217QAQ\n\tmemset( dis, 0, sizeof dis );//\u521d\u59cb\u5316\u522b\u5fd8\u4e86\n\tQ.push(S); dis[S] = 1;\n\twhile( !Q.empty() ){\n\t\tx = Q.front(); Q.pop();\n\t\tfor ( int i = hd[x]; i; i = nxt[i] ){\n\t\t\tif ( val[i] && !dis[to[i]] ){\n\t\t\t\tdis[to[i]] = dis[x] + 1;\n\t\t\t\tQ.push( to[i] );\n\t\t\t\tif ( to[i] == T ) return 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint DFS( int x, int fl ){\n\tif ( x == T ) return fl;\n\tint res(fl), k;\n\tfor ( int i = hd[x]; i && res; i = nxt[i] ){\n\t\tif ( ( dis[to[i]] == dis[x] + 1 ) && val[i] ){\n\t\t\tk = DFS( to[i], min( res, val[i] ) );\n\t\t\tif ( !k ) dis[to[i]] = 0; //\u526a\u679d\uff01 \u4e0d\u80fd\u518d\u589e\u5e7f\u7684\u70b9\u53bb\u6389\uff01\n\t\t\tval[i] -= k; val[i^1] += k; res -= k; //\u6210\u5bf9\u5b58\u50a8\n\t\t}\n\t}\n\treturn fl - res;\n}\n\nint main(){\n\tscanf( \"%d%d%d\", &n, &m, &X );\n\tS = 1; T = n;\n\tfor ( int i = 1; i <= m; ++i ){\n\t\tint x, y, z; scanf( \"%d%d%d\", &x, &y, &z );\n\t\tAdd( x, y, z ); Add( y, x, 0 );\n\t}\n\t\n\tint t;\n\twhile( BFS() ) while( ( t = DFS( S, INT_MAX ) ) > 0 ) ans += t;\n\t\n\tif ( ans ) printf( \"%d %d\\n\", ans, ( X - 1 ) / ans + 1 );//\u540c\u4e0a\n\telse printf( \"Orz Ni Jinan Saint Cow!\\n\" ); //\u8fd9\u662f\u8c01\uff1f\n\treturn 0;\n}\n```",
        "postTime": 1544758665,
        "uid": 70786,
        "name": "_louhc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\u5f88\u7b80\u5355\u7684\u6700\u5927\u6d41\n\n\u6211\u662fEK\u4e5f\u5c31\u662f\u52a8\u80fd\u7b97\u6cd5\uff08\u6ed1\u7a3d\uff09\n\n\u627e1\u5230n\u80fd\u901a\u8fc7\u7684\u5b66\u751f\u7684\u6700\u5927\u4eba\u6570\uff0c\u5982\u679c\u662f0\uff0c\u5c31\u6ca1\u6cd5\u9003\u51fa\u53bb\u4e86\n\n\u5982\u679c\u80fd\u9003\u51fa\u53bb\u5c31\u7528\u4eba\u6570\u9664\u4ee5\u4e00\u6b21\u9003\u51fa\u7684\u4eba\u6570\uff0c\u5982\u679c\u9664\u4e0d\u5c3d\u8981+1\u6b21\u554a\uff0c\u4e0d\u80fd\u820d\u4e0b\u5269\u4e0b\u7684\u4eba\u4e0d\u7ba1\u4e86\u4e0d\u662f\u5417233\n\n    \n    \n    \n    \n        \n         \n                  \n    \n           \n    \n    \n         \n         \n    \n    \n```cpp\n#include <iostream>  \n#include <queue>  \n#include <string.h>  \n#include <queue> \n#include <cstdio>\nusing namespace std;  \nint maxData = 0x7fffffff; \nqueue<int> dl;\nint flow[10001];\nstruct ss{\n    int d;\n    int wb;\n};\nstruct node{\n    int to;\n    int cap;\n    int rev;\n};\nvector<node> v[10001];\nss pre[10001];\nint n,m;\nvoid add(int from,int to,int cap)\n{\n    v[from].push_back((node){to,cap,v[to].size()});\n    v[to].push_back((node){from,0,v[from].size()-1}); \n}\nint BFS(int s,int t)\n{\n    while(!dl.empty())\n     dl.pop();\n    for(int i=1;i<=n;i++)\n     pre[i].d=-1;\n    pre[s].d=0;\n    flow[s]=maxData;\n    dl.push(s);\n    while(!dl.empty())\n    {\n        int dd=dl.front();\n        dl.pop();\n        if(dd==t)\n         break;\n        for(int i=0;i<v[dd].size();i++)\n         {\n             node &tmp=v[dd][i];\n             if(tmp.to!=s&&tmp.cap>0&&pre[tmp.to].d==-1)\n              {\n                  pre[tmp.to].d=dd;\n                  pre[tmp.to].wb=i;\n                  flow[tmp.to]=min(flow[dd],tmp.cap);\n                  dl.push(tmp.to);\n              }\n         }\n    }\n    if(pre[t].d==-1)\n     return -1;\n    else \n     return flow[t];\n}\nint max_flow(int s,int t)\n{\n    int mflow=0;\n    int d=0;\n    while((d=BFS(s,t))!=-1)\n    {\n        int k=t;\n        while(k!=s)\n         {\n           v[pre[k].d][pre[k].wb].cap-=d;\n           v[k][v[pre[k].d][pre[k].wb].rev].cap+=d;\n           k=pre[k].d;\n         } \n        mflow+=d;\n    }\n    return mflow;\n}\nint main()\n{\n    int num;\n    scanf(\"%d%d%d\",&n,&m,&num);\n    for(int i=1;i<=m;i++)\n     {\n         int x,y,c;\n         scanf(\"%d%d%d\",&x,&y,&c);\n         add(x,y,c);\n     }\n    int c=max_flow(1,n);\n    if(!c) puts(\"Orz Ni Jinan Saint Cow!\");\n    else   \n    {\n        printf(\"%d \",c);\n        int s=num/c;\n        if(num%c) s++;\n        printf(\"%d\",s);\n    }\n}\n```",
        "postTime": 1492908061,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\n\u5199\u4e2a\u9898\u89e3\uff0c\u987a\u4fbf\u5e2e\u52a9\u81ea\u5df1\u8bb0\u5fc6\u7406\u89e3\n\nvar capacity:array[1..200,1..200]of longint;//\u8bb0\u4e0b\u8fd9\u5f20\u7f51\u7edc\u56fe\n\nflow,pre:array[1..200]of longint;       //flow\u8bb0\u5f55\u5206\u6d41\u91cf\uff0cpre[i]\u8868\u793a\u67d0\u6761\u8def\u5f84\u4e2di\u8fd9\u4e2a\u8282\u70b9\u662f\u63a5\u5728\u54ea\u4e2a\u70b9\u540e\u9762\u7684\n\n```cpp\n    n,m,x,a1,b1,c1,maxstream,time:longint;\n    queue:array[1..100000]of longint;       //\u6a21\u62df\u6808\u7684\u961f\u5217\u6570\u7ec4,c++\u53ef\u4ee5\u4e0d\u7528\u8fd9\u4e2a,c++\u6709\u4e13\u95e8\u7684push\u548cpop\u51fd\u6570,\u66f4\u65b9\u4fbf\nfunction min(a,b:longint):longint;          //\u6c42\u6700\u5c0f\u503c\u7684\u51fd\u6570\nbegin\n     if a>b then exit(b)\n     else exit(a);\nend;\nfunction bfs(src,des:longint):longint;      //\u641c\u7d22\u6240\u6709\u7684\u8def\u5f84,src\u662f\u521d\u59cb\u70b9,des\u662f\u76ee\u6807\u70b9\nvar i,j,tail,index:longint;\nbegin\n     fillchar(queue,sizeof(queue),0);\n     fillchar(pre,sizeof(pre),-1);          //\u586b\u4e3a-1\u8868\u793a\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u6709\u5b83\u7684\u7236\u4eb2\u8282\u70b9\n     pre[src]:=0;flow[src]:=$7fffff;        //\u521d\u59cb\u5316pre\u548cflow,\u8fd9\u91cc\u5c06$7fffff\u7528\u4f5c\u6b63\u65e0\u7a77\n     tail:=1;queue[1]:=src;                 //\u5c06\u521d\u59cb\u70b9\u5165\u6808\n     while not(tail=0)do                    //\u5224\u65ad\u6808\u4e2d\u662f\u5426\u6709\u5143\u7d20\uff0c\u6ca1\u6709\u7684\u8bdd\u8bf4\u660e\u518d\u4e5f\u627e\u4e0d\u5230\u8def\u5f84\u4e86\n     begin\n          index:=queue[tail];               //\u4ece\u6808\u4e2d\u53d6\u51fa\u6808\u9876\u7aef\u7684\uff0c\u4e5f\u5c31\u662f\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u70b9\n          dec(tail);                        //\u51fa\u6808\n          if(index=des)then break;          //\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u76ee\u6807\u70b9\uff0c\u8bf4\u660e\u8fd9\u6761\u8def\u627e\u5230\u4e86\uff0c\u5c31\u7ec8\u6b62\u5faa\u73af\n          for i:=1 to n do                  //\u904d\u5386\u6bcf\u4e2a\u8282\u70b9\n          begin\n               if(i<>src)and(capacity[index,i]>0)and(pre[i]=-1)then //\u5224\u65ad\u5f53\u524d\u8d70\u5230\u7684\u70b9index\u662f\u5426\u548ci\u70b9\u76f8\u8fde,\u5e76\u4e14\u8fd8\u672a\u8d70\u8fc7(\u5373pre[i]=-1)\n               begin\n                    pre[i]:=index;                                  //\u8bb0\u5f55i\u8282\u70b9\u662f\u7531index\u70b9\u8fc7\u6765\u7684\n                    flow[i]:=min(capacity[index,i],flow[index]);    //\u53d6(index\u70b9\u7684\u6700\u5927\u6d41)\u548c(\u4eceindex\u5230i\u7684\u6700\u5927\u5bb9\u91cf)\u4e8c\u8005\u6700\u5c0f\u503c\n                    inc(tail);\n                    queue[tail]:=i;                                 //\u5c06i\u70b9\u5165\u6808\n               end;\n          end;\n     end;\n     if(pre[des]=-1)then exit(-1)           //\u5982\u679c\u76ee\u6807\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u662f-1\uff0c\u5373\u627e\u4e0d\u5230\u4e0e\u76ee\u6807\u70b9\u76f8\u8fde\u7684\u8def\u5f84\n     else exit(flow[des]);                  //\u5982\u679c\u80fd\u627e\u5230\u8def\u5f84\uff0c\u8f93\u51fa\u6700\u5927\u7684\u5206\u6d41\nend;\nfunction floyd(src,des:longint):longint;    //\u5c06\u6240\u6709\u5206\u6d41\u904d\u5386\u5b8c\u7edf\u8ba1\nvar increasement,sumflow,k:longint;\nbegin\n     sumflow:=0;\n     increasement:=bfs(src,des);\n     while(increasement<>-1)do              //\u5982\u679c\u7b2c\u4e00\u904d\u7684\u641c\u7d22\u4e0d\u80fd\u627e\u5230\u5206\u6d41,\u90a3\u4e48\u8fd9\u6bb5\u4ee3\u7801\u5c31\u4e0d\u6267\u884c\uff0c\u7b54\u6848\u5c31\u662f\u5b66\u751f\u65e0\u6cd5\u64a4\u79bb\n     begin                                  //\u5982\u679c\u6709\u5206\u6d41\uff0c\u5c31\u4e0d\u65ad\u7684\u641c\u7d22\uff0c\u4e0d\u65ad\u7684\u5408\u5e76\u5206\u6d41\n          k:=des;                           //while\u91cc\u9762\u7684\u8bed\u53e5\u56e0\u4e3a\u662f\u5957\u6a21\u677f\uff0c\u8fd9\u91cc\u6ca1\u4ec0\u4e48\u7528..\n          while(k<>src)do\n          begin\n               dec(capacity[pre[k],k],increasement);\n               inc(capacity[k,pre[k]],increasement);\n               k:=pre[k];\n          end;\n          inc(sumflow,increasement);        //\u5408\u5e76\u5206\u6d41\n          increasement:=bfs(src,des);\n     end;\n     exit(sumflow);                         //\u5f97\u5230\u6700\u5927\u7f51\u7edc\u6d41\nend;\nprocedure init;\nvar i,j:longint;\nbegin\n     readln(n,m,x);\n     for i:=1 to m do\n     begin\n          readln(a1,b1,c1);\n          if a1=b1 then continue;           //\u5224\u65ad\u53ea\u6709\u76ee\u6807\u70b9\u548c\u8d77\u59cb\u70b9\u7684\u7279\u6b8a\u60c5\u51b5\n          inc(capacity[a1,b1],c1);          //\u8003\u8651\u52302\u4e2a\u70b9\u4e4b\u95f4\u591a\u6761\u8fb9\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0d\u76f4\u63a5\u8d4b\u503c\n     end;\nend;\nbegin\n     init;                                  //\u521d\u59cb\u5316\n     maxstream:=floyd(1,n);                 //\u904d\u5386\u5f97\u5230\u6700\u5927\u6d41\n     if maxstream=0 then writeln('Orz Ni Jinan Saint Cow!')\n     else                                   //\u6700\u5927\u6d41\u4e3a0\u5373\u6ca1\u6709\u8def\u5f84\u80fd\u901a\u8fc7\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u7684\u6700\u5927\u6d41\u91cf\u5c31\u662f0\n     begin\n          time:=x div maxstream;            //\u5bf9\u5b66\u751f\u7684\u6279\u6570\u8fdb\u884c\u5904\u7406\u8f93\u51fa\n          if x mod maxstream<>0 then inc(time);\n          writeln(maxstream,' ',time);\n     end;\n     readln;readln;\nend.\n```",
        "postTime": 1437136347,
        "uid": 7206,
        "name": "nonprocess",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "~~\u8fd9\u4e00\u9898\u4e00\u770b\u5c31\u662f\u4e00\u9053**\u7f51\u7edc\u6d41\u6700\u5927\u6d41**~~\u3002\n\n\u9003\u751f\u9053\u8def\u2014\u2014>\u6c34\u7ba1\n\n\u5b66\u751f\u2014\u2014>\u6c34\n\n\u6559\u5ba4\u2014\u2014>\u6e90\u70b9\n\n\u5b89\u5168\u5730\u5e26\u2014\u2014\uff1e\u6c47\u70b9\n\n\u6700\u5927\u6d41\u7684\u7cbe\u9ad3\u5c31\u5728\u53cd\u5411\u8fb9\n![](https://cdn.luogu.com.cn/upload/image_hosting/78wswgeo.png?x-oss-process=image/resize,m_lfit,h_170,w_225)(\u30fb\u25c7\u30fb)\uff1f\n\n### **\u57fa\u672c\u6982\u5ff5**\n>\u6b8b\u91cf=\u5bb9\u91cf-\u5df2\u6d41\u8fc7\u7684\u91cf\n\n>\u53cd\u5411\u8fb9\u7684\u6d41\u91cf\u503c=\u6b63\u5411\u6d41\u8fc7\u7684\u603b\u6d41\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b63\u5411\u6d41\u8fc7\u591a\u5c11\uff0c\u53cd\u5411\u53ef\u4ee5\u6d41\u56de\u591a\u5c11\u3002\n\n\u6700\u5927\u6d41\u6709\u597d\u51e0\u79cd\u505a\u6cd5\uff1a$EK(edmonds-karp) or I S A P or Dicnic......$\n\n\u7136\u989d\uff0c\u7a9d\u53ea\u4f1a$EK$\u548c$ISAP$,\u4f46\u662f\uff0c$EK$\u8c8c\u4f3c\u4e0d\u592a\u884c\uff0c$so$ \u6211\u4eec\u9009\u62e9$ISAP$\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/94z0koef.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u56e0\u4e3a\uff0c\u7a9d\u662f\u81ea\u5b66$ISAP$\u7684\uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u4ece\u4f60\u8c37\u7684[blog](https://www.luogu.com.cn/blog/ONE-PIECE/jiu-ji-di-zui-tai-liu-suan-fa-isap-yu-hlpp)\u91cc\u5b66\u6765\u7684\uff0c\u5e94\u8be5\u4e0d\u7b97\u4fb5\u6743\u2467\u3002\n**$ISAP$\u6a21\u677f**\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int inf=2147483647;//inf:\u6700\u5927\u503c \nint cnt=1,head[13000];//cnt:\u7b2cCNT\u6761\u8fb9head[i]:\u7b2ci\u4e2a\u70b9\u5c5e\u4e8e\u7b2c\u51e0\u6761\u8fb9 \nint n,m,s,t;//n\u4e2a\u70b9m\u6761\u8fb9s:\u6e90\u70b9t:\u6c47\u70b9 \ninline int Read()\n{\n    int x=0;\n    char c=getchar();\n    while(c>'9'||c<'0')c=getchar();\n    while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n    return x;\n}\nstruct Node\n{\n    int v;//\u5f53\u524d\u70b9 \n    int next;//\u8fde\u63a5\u70b9 \n    int val;//\u5bb9\u91cf \n}node[250000];//node[i]:\u7b2ci\u6761\u8fb9\u7684\u60c5\u51b5 \ninline void addedge(int u,int v,int val)\n{\n    node[++cnt].v=v;\n    node[cnt].val=val;\n    node[cnt].next=head[u];\n    head[u]=cnt;\n}\nint dep[13000],gap[13000];//dep[i]\u8868\u793a\u8282\u70b9i\u7684\u6df1\u5ea6\uff0cgap[i]\u8868\u793a\u6df1\u5ea6\u4e3ai\u7684\u70b9\u7684\u6570\u91cf \nvoid bfs()//\u5012\u7740\u641c \n{\n    memset(dep,-1,sizeof(dep));//\u628a\u6df1\u5ea6\u53d8\u4e3a-1(0\u4f1a\u5bfc\u81f4gap\u5d29\u574f) \n    memset(gap,0,sizeof(gap));\n    dep[t]=0;//\u6c47\u70b9\u6df1\u5ea6\u4e3a0 \n    gap[0]=1;//\u6df1\u5ea6\u4e3a0\u7684\u70b9\u67091\u4e2a \n    queue<int>q; \n    q.push(t);//t\u70b9\u5165\u6808 \n    while(!q.empty())\n\t{\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=node[i].next)//head[u]:u\u70b9\u6240\u5728\u7684\u8fb9,node[i].next:u\u70b9\u6240\u5728\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u8fd9\u6837\u904d\u5386\u4e0b\u53bb \n\t\t{\n            int v=node[i].v;//v\u4e3a\u5f53\u524d\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9 \n            if(dep[v]!=-1)\tcontinue;//dep[v]!=-1\u76f8\u5f53\u4e8ev\u70b9\u5df2\u88ab\u904d\u5386||\u4e0d\u7ba1 \n            q.push(v);\n            dep[v]=dep[u]+1;//v\u70b9\u7684\u6df1\u5ea6\u6bd4u\u70b9\u59271 \n            gap[dep[v]]++;\n        }//\u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u904d\u5386\u8fc7 \n    }\n    return;\n}//\u4ecet\u5230s\u8dd1\u4e00\u904dbfs\uff0c\u6807\u8bb0\u6df1\u5ea6\nint maxflow;\nint dfs(int u,int flow)\n{\n    if(u==t)\n\t{\n        maxflow+=flow;\n        return flow;\n    }\n    int used=0;\n    for(int i=head[u];i;i=node[i].next)//head[u]:u\u70b9\u6240\u5728\u7684\u8fb9,node[i].next:u\u70b9\u6240\u5728\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u8fd9\u6837\u904d\u5386\u4e0b\u53bb \n\t{\n        int d=node[i].v;\n        if(node[i].val&&dep[d]+1==dep[u])//\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u6b8b\u91cf\u5927\u4e8e0,\u4e14\u6ca1\u6709\u65ad\u5c42 \n\t\t{\n            int mi=dfs(d,min(node[i].val,flow-used));//\u6d41\u91cf \n            if(mi)\n\t\t\t{\n                node[i].val-=mi;//\u6b63\u5411\u8fb9-mi \n                node[i^1].val+=mi;//\u53cd\u5411\u8fb9+mi \n                used+=mi;\n            }\n            if(used==flow)return used;\n        }\n    }\n    //\u5982\u679c\u5df2\u7ecf\u5230\u4e86\u8fd9\u91cc\uff0c\u8bf4\u660e\u8be5\u70b9\u51fa\u53bb\u7684\u6240\u6709\u70b9\u90fd\u5df2\u7ecf\u6d41\u8fc7\u4e86\n    //\u5e76\u4e14\u4ece\u524d\u9762\u70b9\u4f20\u8fc7\u6765\u7684\u6d41\u91cf\u8fd8\u6709\u5269\u4f59\n    //\u5219\u6b64\u65f6\uff0c\u8981\u5bf9\u8be5\u70b9\u66f4\u6539dep\n    //\u4f7f\u5f97\u8be5\u70b9\u4e0e\u8be5\u70b9\u51fa\u53bb\u7684\u70b9\u5206\u9694\u5f00\n    --gap[dep[u]];\n    if(gap[dep[u]]==0)dep[s]=n+1;//\u51fa\u73b0\u65ad\u5c42\uff0c\u65e0\u6cd5\u5230\u8fbet\u4e86\n    dep[u]++;//\u5c42++ \n    gap[dep[u]]++;//\u5c42\u6570\u5bf9\u5e94\u4e2a\u6570++\n    return used; \n}\nint ISAP()\n{\n    maxflow=0;\n    bfs();//\u4ecet\u5230s\u8dd1\u4e00\u904dbfs\uff0c\u6807\u8bb0\u6df1\u5ea6\n    while(dep[s]<n)\tdfs(s,inf);//\u6bcf\u8d70\u4e00\u904d\u589e\u5e7f\u8def,s\u7684\u5c42\u6570\u4f1a\u52a01,\u5982\u679c\u4e00\u76f4\u6ca1\u6709\u51fa\u73b0\u65ad\u5c42,\u6700\u591a\u8dd1n-dep(\u521abfs\u5b8c\u65f6s\u7684\u6df1\u5ea6)\u6761\u589e\u5e7f\u8def\u5171\u6709n\u4e2a\u70b9 \n    return maxflow;\n}\nint main()\n{\n    n=Read(),m=Read(),s=Read(),t=Read();\n    int u,v,w;\n    for(int i=1;i<=m;i++)\n\t{\n\t\tu=Read();\n\t\tv=Read();\n\t\tw=Read();\n\t\taddedge(u,v,w);//\u6b63\u5411\u8fb9 \n\t\taddedge(v,u,0);//\u53cd\u5411\u8fb9 \n\t}  \n    printf(\"%d\\n\",ISAP());\n    return 0;\n}\n```\n\n\u4f46\u662f,$but$,\u8fd9\u9053\u9898\u5e76\u4e0d\u662f\u53ea\u8981\u5957\u4e0a\u6a21\u677f\u5c31\u73c2\u4ee5\u8fc7\u7684\uff0c\u56e0\u4e3a\uff0cTA\u8ba9\u6211\u4eec\u7b97\"\u6bcf\u6279\u6700\u591a\u80fd\u8fd0\u51fa\u591a\u5c11\u4e2a\u5b66\u751f\uff0cx\u540d\u5b66\u751f\u5206\u51e0\u6279\u624d\u80fd\u8fd0\u5b8c\u3002\",\u6240\u4ee5\uff0c\u5728\u7ed3\u5c3e\u52a0\u4e0a\u51e0\u53e5\u8bdd\u5c31\u597d\u4e86\n```cpp\n\tint al=ISAP(),time;\n\t\n\tif(al)\n\t{\n\t\ttime=x/al;\n\t\tif(al*time<x)\ttime++;\n\t\tprintf(\"%d %d\\n\",al,time);\n\t}\n    else\n    \tprintf( \"Orz Ni Jinan Saint Cow!\\n\"); \n    return 0;\n```\n\n\u9644\u4e0a$A C $ $code:$\n\n\n------------\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 205\n#define MAXM 4005\nusing namespace std;\nconst int inf=2147483647;//inf:\u6700\u5927\u503c \nint cnt=1,head[MAXN];//cnt:\u7b2cCNT\u6761\u8fb9head[i]:\u7b2ci\u4e2a\u70b9\u5c5e\u4e8e\u7b2c\u51e0\u6761\u8fb9 \nint n,m,s,t;//n\u4e2a\u70b9m\u6761\u8fb9s:\u6e90\u70b9t:\u6c47\u70b9 \ninline int Read()\n{\n    int x=0;\n    char c=getchar();\n    while(c>'9'||c<'0')c=getchar();\n    while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n    return x;\n}\nstruct Node\n{\n    int v;//\u5f53\u524d\u70b9 \n    int next;//\u8fde\u63a5\u70b9 \n    int val;//\u5bb9\u91cf \n}node[MAXM];//node[i]:\u7b2ci\u6761\u8fb9\u7684\u60c5\u51b5 \ninline void addedge(int u,int v,int val)\n{\n    node[++cnt].v=v;\n    node[cnt].val=val;\n    node[cnt].next=head[u];\n    head[u]=cnt;\n}\nint dep[MAXN],gap[MAXN];//dep[i]\u8868\u793a\u8282\u70b9i\u7684\u6df1\u5ea6\uff0cgap[i]\u8868\u793a\u6df1\u5ea6\u4e3ai\u7684\u70b9\u7684\u6570\u91cf \nvoid bfs()//\u5012\u7740\u641c \n{\n    memset(dep,-1,sizeof(dep));//\u628a\u6df1\u5ea6\u53d8\u4e3a-1(0\u4f1a\u5bfc\u81f4gap\u5d29\u574f) \n    memset(gap,0,sizeof(gap));\n    dep[t]=0;//\u6c47\u70b9\u6df1\u5ea6\u4e3a0 \n    gap[0]=1;//\u6df1\u5ea6\u4e3a0\u7684\u70b9\u67091\u4e2a \n    queue<int>q; \n    q.push(t);//t\u70b9\u5165\u6808 \n    while(!q.empty())\n\t{\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=node[i].next)//head[u]:u\u70b9\u6240\u5728\u7684\u8fb9,node[i].next:u\u70b9\u6240\u5728\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u8fd9\u6837\u904d\u5386\u4e0b\u53bb \n\t\t{\n            int v=node[i].v;//v\u4e3a\u5f53\u524d\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9 \n            if(dep[v]!=-1)\tcontinue;//dep[v]!=-1\u76f8\u5f53\u4e8ev\u70b9\u5df2\u88ab\u904d\u5386||\u4e0d\u7ba1 \n            q.push(v);\n            dep[v]=dep[u]+1;//v\u70b9\u7684\u6df1\u5ea6\u6bd4u\u70b9\u59271 \n            gap[dep[v]]++;\n        }//\u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u904d\u5386\u8fc7 \n    }\n    return;\n}//\u4ecet\u5230s\u8dd1\u4e00\u904dbfs\uff0c\u6807\u8bb0\u6df1\u5ea6\nint maxflow;\nint dfs(int u,int flow)\n{\n    if(u==t)\n\t{\n        maxflow+=flow;\n        return flow;\n    }\n    int used=0;\n    for(int i=head[u];i;i=node[i].next)//head[u]:u\u70b9\u6240\u5728\u7684\u8fb9,node[i].next:u\u70b9\u6240\u5728\u7684\u8fb9\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u5c31\u8fd9\u6837\u904d\u5386\u4e0b\u53bb \n\t{\n        int d=node[i].v;\n        if(node[i].val&&dep[d]+1==dep[u])//\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u6b8b\u91cf\u5927\u4e8e0,\u4e14\u6ca1\u6709\u65ad\u5c42 \n\t\t{\n            int mi=dfs(d,min(node[i].val,flow-used));//\u6d41\u91cf \n            if(mi)\n\t\t\t{\n                node[i].val-=mi;//\u6b63\u5411\u8fb9-mi \n                node[i^1].val+=mi;//\u53cd\u5411\u8fb9+mi \n                used+=mi;\n            }\n            if(used==flow)return used;\n        }\n    }\n    //\u5982\u679c\u5df2\u7ecf\u5230\u4e86\u8fd9\u91cc\uff0c\u8bf4\u660e\u8be5\u70b9\u51fa\u53bb\u7684\u6240\u6709\u70b9\u90fd\u5df2\u7ecf\u6d41\u8fc7\u4e86\n    //\u5e76\u4e14\u4ece\u524d\u9762\u70b9\u4f20\u8fc7\u6765\u7684\u6d41\u91cf\u8fd8\u6709\u5269\u4f59\n    //\u5219\u6b64\u65f6\uff0c\u8981\u5bf9\u8be5\u70b9\u66f4\u6539dep\n    //\u4f7f\u5f97\u8be5\u70b9\u4e0e\u8be5\u70b9\u51fa\u53bb\u7684\u70b9\u5206\u9694\u5f00\n    --gap[dep[u]];\n    if(gap[dep[u]]==0)dep[s]=n+1;//\u51fa\u73b0\u65ad\u5c42\uff0c\u65e0\u6cd5\u5230\u8fbet\u4e86\n    dep[u]++;//\u5c42++ \n    gap[dep[u]]++;//\u5c42\u6570\u5bf9\u5e94\u4e2a\u6570++\n    return used; \n}\nint ISAP()\n{\n    maxflow=0;\n    bfs();//\u4ecet\u5230s\u8dd1\u4e00\u904dbfs\uff0c\u6807\u8bb0\u6df1\u5ea6\n    while(dep[s]<n)\tdfs(s,inf);//\u6bcf\u8d70\u4e00\u904d\u589e\u5e7f\u8def,s\u7684\u5c42\u6570\u4f1a\u52a01,\u5982\u679c\u4e00\u76f4\u6ca1\u6709\u51fa\u73b0\u65ad\u5c42,\u6700\u591a\u8dd1n-dep(\u521abfs\u5b8c\u65f6s\u7684\u6df1\u5ea6)\u6761\u589e\u5e7f\u8def\u5171\u6709n\u4e2a\u70b9 \n    return maxflow;\n}\nint main()\n{\n    n=Read(),m=Read(),s=1,t=n;\n    int x=Read();\n    int u,v,w;\n    for(int i=1;i<=m;i++)\n\t{\n\t\tu=Read();\n\t\tv=Read();\n\t\tw=Read();\n\t\taddedge(u,v,w);//\u6b63\u5411\u8fb9 \n\t\taddedge(v,u,0);//\u53cd\u5411\u8fb9 \n\t}\n\tint al=ISAP(),time;\n\t\n\tif(al)\n\t{\n\t\ttime=x/al;\n\t\tif(al*time<x)\ttime++;\n\t\tprintf(\"%d %d\\n\",al,time);\n\t}\n    else\n    \tprintf( \"Orz Ni Jinan Saint Cow!\\n\"); \n    return 0;\n}\n```\n\u5b8c\u7ed3\u273f\u273f\u30fd(\u00b0\u25bd\u00b0)\u30ce\u273f\n\n\n------------\n\n**update 2020.4.2**\n\n\u65b0\u589e\u4e00\u79cd\u7b97\u6cd5$EK$\u3002~~as we know,~~$EK$\u662f$edmonds-karp$\u7684\u7b80\u5199\u3002\n>Edmonds-Karps\u589e\u5e7f\u8def\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nm^2)\u3002\n\n>\u7136\u800c\u5728\u5b9e\u9645\u8fd0\u7528\u4e2d\u5219\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u8fd9\u4e2a\u754c\uff0c\n\n>\u6548\u7387\u8f83\u9ad8\uff0c\u4e00\u822c\u80fd\u5904\u740610^3~10^4\u89c4\u6a21\u7684\u7f51\u7edc\n\t\t\t\t\t\n>                    \u2014\u2014\u674e\u715c\u4e1c\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hytoaci5.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n**\u5148\u8d34\u6a21\u677f**\n```cpp\n#include<bits/stdc++.h>\n#define mst(a,b) memset(a,b,sizeof(a))\n#define For(i,k,j) for(register int i=(k);i<=(j);i++)\n#define INF 2147483647\nusing namespace std;\nconst int MAXN=10001;\nconst int MAXM=100001;\nint g[MAXN][MAXN]; //g[u][v] : u -> v \u8fd8\u53ef\u4ee5\u6d41\u7684\u91cf (\u6b63\u5411\u56fe) \nint pre[MAXN]; // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\nbool vis[MAXN]; // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \nint n,m;\ninline bool bfs(int s,int t)//\u7ecf\u5178BFS \n{\n\t//\u65b0\u7684\u5f00\u59cb \n\tmst(pre,-1);//\u91cd\u65b0\u8ba1\u7b97pre[] \n\tmst(vis,0);//\u91cd\u65b0\u8bb0\u5f55vis[] \n\tqueue<int>q;//\u65b0\u5efa\u961f\u5217 \n\tvis[s]=true;//\u6e90\u70b9\u5df2\u88ab\u904d\u5386 \n\tq.push(s);//\u538b\u5165\u961f\u5217 \n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tFor(i,1,n) \n\t\t{\n\t\t\tif(!vis[i]&&g[now][i]>0)//\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u88ab\u904d\u5386\u5230,\u4e14now\u548ci\u6709\u7ba1\u9053 \n\t\t\t{\n\t\t\t\tvis[i]=true;//\u5f53\u524d\u70b9\u5df2\u88ab\u8bbf\u95ee \n\t\t\t\tpre[i]=now;//\u8bb0\u5f55i\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\u662fnow \n\t\t\t\tif(i==t)//\u5982\u679ci\u70b9\u662f\u6c47\u70b9,\u90a3\u4e48,\u4e00\u6761\u8def\u5f84\u4ea7\u751f \n\t\t\t\t\treturn 1;\n\t\t\t\tq.push(i);//else,\u7ee7\u7eed\u641c \n\t\t\t}\n\t\t}\n\t}\n\treturn 0;//\u6240\u6709\u8def\u5f84\u90fd\u88ab\u904d\u5386\u5b8c\u4e86 \n}\ninline int EK(int s,int t) \n{\n\tint v,u,d,maxflow=0;\n\twhile(bfs(s,t)) \n\t{ //\u53ef\u4ee5\u589e\u5e7f \n\t\tv=t,d=INF;//\u627e\u53ef\u589e\u91cfd ,d\u4e3a\u5f53\u524d\u6d41\u91cf \n\t\twhile(v!=s)//\u56de\u6eaf \n\t\t{\n\t\t\tu=pre[v]; // u\u8bb0\u5f55v\u7684\u524d\u9a71 \n\t\t\td=min(d,g[u][v]);  // d \u548c\u5f53\u524d\u8fb9\uff08\u6b63\u5411\u8fb9\uff09\u8fd8\u53ef\u4ee5\u6d41\u8fc7\u53bb\u7684\u91cf\u53d6\u6700\u5c0f\u503c->\u80fd\u6d41\u591a\u5c11 \n\t\t\tv=u;//v=\u524d\u4e00\u4e2a\u70b9 \n\t\t}\n\t\tmaxflow+=d;//\u6700\u5927\u6d41\u91cf \n\t\tv=t;//Do it again\n\t\twhile(v!=s)//\u56de\u6eaf \n\t\t{\n\t\t\tu=pre[v];// u\u8bb0\u5f55v\u7684\u524d\u9a71 \n\t\t\tg[u][v]-=d; //\u7f51\u7edc\u4e2d\u7684\u6b63\u5411\u8fb9\u5269\u4e0b\u53ef\u4ee5\u6d41\u7684\u91cf\u51cf\u5c11d \n\t\t\tg[v][u]+=d; //\u7f51\u7edc\u4e2d\u7684\u53cd\u5411\u8fb9\u5269\u4e0b\u53ef\u4ee5\u6d41\u7684\u91cf\u589e\u52a0d\n\t\t\tv=u;\n\t\t}\n\t}\n\treturn maxflow;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);//n\u4e3a\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570 \n\tint s,t;//\u6e90\u70b9&\u6c47\u70b9 \n\tscanf(\"%d%d\",&s,&t);\n\tFor(i,1,m) \n\t{\n\t\tint u,v,w;//\u8d77\u70b9,\u7ec8\u70b9,\u7ba1\u9053\u6d41\u91cf \n\t\tscanf(\"%d%d%d\",&u,&v,&w); \n\t\tg[u][v]+=w;//\u5efa\u56fe \n\t}\n\tprintf(\"%d\\n\",EK(s,t));\n    return 0;\n}\n\n```\n\u5927\u5bb6\u53ef\u4ee5\u5148\u770b\u6ce8\u91ca\uff0c\u7528\u7684\u662f\u90bb\u63a5\u77e9\u9635\u3002\n\n\u8fd9\u91cc\u5c31\u5c06\u8be6\u7ec6\u8bb2\u4e00\u4e2a\u90e8\u5206\n```cpp\nif(!vis[i]&&g[now][i]>0)//\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u88ab\u904d\u5386\u5230,\u4e14now\u548ci\u6709\u7ba1\u9053 \n```\n$why?$\uff0c\n\n$!vis[i]$\u8868\u793a\u5f53\u524d\u70b9\u6728\u6709\u88ab\u904d\u5386\uff08\u6b64\u6b21BFS\uff09\n\nRT![](https://cdn.luogu.com.cn/upload/image_hosting/k8mmsvy0.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\u2014\u2014>![](https://cdn.luogu.com.cn/upload/image_hosting/b2rqx69g.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\u8bbe\u4e2d\u95f4\u4e00\u70b9\u4e3aa\uff0c\u5de6\u4e0a\u4e3ax\uff0c\u53f3\u4e0a\u4e3ab\n\n\u90a3\u4e48\u6211\u4eec\u968f\u673a\u7ed9\u7ba1\u9053\u7684\u5bb9\u91cf\u8d4b\u503c\uff0c\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\uff0c$S-A-X-Y-T$\u7684\u6d41\u91cf\u4e0d\u53ef\u80fd\u5927\u4e8e$S-A-T$\u7684\u6d41\u91cf\u3002\n\n\n------------\n$AC$ $code$\n\n```cpp\n\n#include<bits/stdc++.h>\n#define mst(a,b) memset(a,b,sizeof(a))\n#define For(i,k,j) for(register int i=(k);i<=(j);i++)\n#define INF 2147483647\nusing namespace std;\nconst int MAXN=10001;\nconst int MAXM=100001;\nint g[MAXN][MAXN]; //g[u][v] : u -> v \u8fd8\u53ef\u4ee5\u6d41\u7684\u91cf (\u6b63\u5411\u56fe) \nint pre[MAXN]; // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\nbool vis[MAXN]; // \u8bb0\u5f55\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7 \nint n,m;\nbool bfs(int s,int t)//\u7ecf\u5178BFS \n{\n\t//\u65b0\u7684\u5f00\u59cb \n\tmst(pre,-1);//\u91cd\u65b0\u8ba1\u7b97pre[] \n\tmst(vis,0);//\u91cd\u65b0\u8bb0\u5f55vis[] \n\tqueue<int>q;//\u65b0\u5efa\u961f\u5217 \n\tvis[s]=true;//\u6e90\u70b9\u5df2\u88ab\u904d\u5386 \n\tq.push(s);//\u538b\u5165\u961f\u5217 \n\twhile(!q.empty())\n\t{\n\t\tint now=q.front();\n\t\tq.pop();\n\t\tFor(i,1,n) \n\t\t{\n\t\t\tif(!vis[i]&&g[now][i]>0)//\u5982\u679c\u8fd9\u4e2a\u70b9\u6ca1\u88ab\u904d\u5386\u5230,\u4e14now\u548ci\u6709\u7ba1\u9053 \n\t\t\t{\n\t\t\t\tvis[i]=true;//\u5f53\u524d\u70b9\u5df2\u88ab\u8bbf\u95ee \n\t\t\t\tpre[i]=now;//\u8bb0\u5f55i\u70b9\u7684\u524d\u4e00\u4e2a\u70b9\u662fnow \n\t\t\t\tif(i==t)//\u5982\u679ci\u70b9\u662f\u6c47\u70b9,\u90a3\u4e48,\u4e00\u6761\u8def\u5f84\u4ea7\u751f \n\t\t\t\t\treturn 1;\n\t\t\t\tq.push(i);//else,\u7ee7\u7eed\u641c \n\t\t\t}\n\t\t}\n\t}\n\treturn 0;//\u6240\u6709\u8def\u5f84\u90fd\u88ab\u904d\u5386\u5b8c\u4e86 \n}\ninline int EK(int s,int t) \n{\n\tint v,u,d,maxflow=0;\n\twhile(bfs(s,t)) \n\t{ //\u53ef\u4ee5\u589e\u5e7f \n\t\tv=t,d=INF;//\u627e\u53ef\u589e\u91cfd ,d\u4e3a\u5f53\u524d\u6d41\u91cf \n\t\twhile(v!=s)//\u56de\u6eaf \n\t\t{\n\t\t\tu=pre[v]; // u\u8bb0\u5f55v\u7684\u524d\u9a71 \n\t\t\td=min(d,g[u][v]);  // d \u548c\u5f53\u524d\u8fb9\uff08\u6b63\u5411\u8fb9\uff09\u8fd8\u53ef\u4ee5\u6d41\u8fc7\u53bb\u7684\u91cf\u53d6\u6700\u5c0f\u503c->\u80fd\u6d41\u591a\u5c11 \n\t\t\tv=u;//v=\u524d\u4e00\u4e2a\u70b9 \n\t\t}\n\t\tmaxflow+=d;//\u6700\u5927\u6d41\u91cf \n\t\tv=t;//Do it again\n\t\twhile(v!=s)//\u56de\u6eaf \n\t\t{\n\t\t\tu=pre[v];// u\u8bb0\u5f55v\u7684\u524d\u9a71 \n\t\t\tg[u][v]-=d; //\u7f51\u7edc\u4e2d\u7684\u6b63\u5411\u8fb9\u5269\u4e0b\u53ef\u4ee5\u6d41\u7684\u91cf\u51cf\u5c11d \n\t\t\tg[v][u]+=d; //\u7f51\u7edc\u4e2d\u7684\u53cd\u5411\u8fb9\u5269\u4e0b\u53ef\u4ee5\u6d41\u7684\u91cf\u589e\u52a0d\n\t\t\tv=u;\n\t\t}\n\t}\n\treturn maxflow;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);//n\u4e3a\u70b9\u6570\uff0cm\u4e3a\u8fb9\u6570 \n\tint s=1,t=n;//\u6e90\u70b9&\u6c47\u70b9 \n\tint x;\n\tscanf(\"%d\",&x);\n\tFor(i,1,m) \n\t{\n\t\tint u,v,w;//\u8d77\u70b9,\u7ec8\u70b9,\u7ba1\u9053\u6d41\u91cf \n\t\tscanf(\"%d%d%d\",&u,&v,&w); \n\t\tg[u][v]+=w;//\u5efa\u56fe \n\t}\n\tint al=EK(s,t),time;\n\t\n\tif(al)\n\t{\n\t\ttime=x/al;\n\t\tif(al*time<x)\ttime++;\n\t\tprintf(\"%d %d\\n\",al,time);\n\t}\n    else\n    \tprintf( \"Orz Ni Jinan Saint Cow!\\n\"); \n    return 0;\n}\n\n```\n",
        "postTime": 1585729939,
        "uid": 181775,
        "name": "_Fontainebleau_",
        "ccfLevel": 0,
        "title": "P1343 \u5730\u9707\u9003\u751f"
    },
    {
        "content": "\u770b\u4e86\u770b\u597d\u50cf\u6ca1\u7528isap\u7b97\u6cd5\uff0c\u6211\u5c31\u6765\u4e00\u4e2a\n\n\u6570\u636e\u597d\u50cf\u5f88\u5c0f\uff0cisap\u8dd1\u5f97\u98de\u5feb\uff0c\u53ea\u6709\u4e00\u4e2a\u70b9\u6bd4\u8f83\u5751\uff0ct\u4e86\u4e00\u6b21\n\n\u4e3b\u8981\u662fmaxflow\u9664\u51fa\u6765\u518d\u53d6\u6574\uff0c\u7136\u540e\u4e0d\u8981\u5199\u9519\u677f\u5b50\u5c31\u53ef\u4ee5\u5566\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define min(x,y) (x<y?x:y)\n#define maxn 10005\n#define inf 1<<30\nusing namespace std;\nstruct edge{\n    int from,to,cap,flow;\n};\nstruct isap\n{\n    int s,t,n,p[maxn],d[maxn],num[maxn],cur[maxn];\n    bool vis[maxn];\n    vector<edge>edges;\n    vector<int>g[maxn];\n    void init(int s,int t,int n)\n    {\n        this->s=s;\n        this->t=t;\n        this->n=n;\n        for(int i=1;i<=n;i++)\n        g[i].clear();\n        edges.clear();\n    }\n    void addedge(int from,int to,int cap)\n    {\n        edges.push_back((edge){from,to,cap,0});\n        edges.push_back((edge){to,from,0,0});\n        int m=edges.size();\n        g[from].push_back(m-2);\n        g[to].push_back(m-1);\n    }\n    void bfs()\n    {\n    queue<int>q;\n    q.push(t);\n    vis[t]=1,d[t]=0;\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        for(int i=0;i<g[x].size();i++)\n        {\n            edge& e=edges[g[x][i]^1];\n            if(!vis[e.from]&&e.flow<e.cap)\n            {\n                vis[e.from]=1;\n                d[e.from]=d[x]+1;\n                q.push(e.from);\n            }\n        }\n    }\n    }\n    int augment()\n    {\n        int x=t,a=inf;\n        while(x!=s)\n        {\n            edge& e=edges[p[x]];\n            a=min(a,e.cap-e.flow);\n            x=e.from;\n        }\n        x=t;\n        while(x!=s)\n        {\n            edge&e=edges[p[x]];\n            e.flow+=a;\n            edges[p[x]^1].flow=-a;\n            x=e.from;\n        }\n        return a;\n    }\n    int maxflow()\n    {\n        int flow=0;\n        bfs();\n        memset(num,0,sizeof(num));\n        for(int i=1;i<=n;i++) num[d[i]]++;\n        memset(cur,0,sizeof(cur));\n        int x=s;\n        while(d[s]<n)\n        {\n            if(x==t)\n            {\n                flow+=augment();\n                x=s;\n            }\n            bool ok=0;\n            for(int i=cur[x];i<g[x].size();i++)\n            {\n                edge& e=edges[g[x][i]];\n                if (d[x]==d[e.to]+1 && e.cap>e.flow)\n                {\n                    p[e.to]=g[x][i];\n                    cur[x]=i; x=e.to;\n                    ok=1;\n                    break;\n                }\n            }\n            if(!ok)\n            {\n            int m=n-1;\n            for(int i=0;i<g[x].size();i++)\n            {\n                edge& e=edges[g[x][i]];\n                if(e.cap>e.flow) m=min(m,d[e.to]);\n            }\n            num[d[x]]--;\n            if(!num[d[x]]) break;\n            d[x]=m+1;num[d[x]]++;\n            cur[x]=0;\n            if(x!=s)x=edges[p[x]].from;\n            }\n        }\n        return flow;\n    }\n};\n\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    int n,m,s,t,u,v,w,X;\n    cin>>n>>m>>X;\n    s=1,t=n;\n    isap get_sap;\n    get_sap.init(s,t,n);\n    for(int i=1;i<=m;i++)\n    {\n        cin>>u>>v>>w;\n        get_sap.addedge(u,v,w);\n    }\n    int max_flow=get_sap.maxflow();    \n    if(max_flow>0)\n    {\n    int ans=X/max_flow;\n    cout<<max_flow<<\" \";\n    if(ans*max_flow==X) cout<<ans;\n    else cout<<ans+1;\n    }\n    else \n    {\n        cout<<\"Orz Ni Jinan Saint Cow!\";\n    }\n    return 0;\n}\n```",
        "postTime": 1494073379,
        "uid": 22816,
        "name": "\u82ac\u7279",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\u7ea2\u679c\u679c\u7684\u6700\u5927\u6d41\uff08\u867d\u7136\u7b2c\u4e00\u773c\u8fd8\u6ca1\u770b\u51fa\u6765....\u54ce\uff0c\u849f\u84bb\u4e00\u679a.....\uff09\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nint map[310][310],n,m,x,flow[310],pre[310];\nqueue<int> q;\nint bfs(int s,int t)\n{\n        while(!q.empty()) q.pop();\n            for(int i=1;i<=n;i++) pre[i]=-1;//\u524d\u9a71\u4e3a\u8d1f \n            pre[s]=0;//\u66f4\u6539\u8d77\u70b9 \n            flow[s]=0x7f7f7f;//\u8d77\u70b9\u6d41\u91cf\u4e3a\u65e0\u7a77\n            q.push(s);\n            while(!q.empty())\n            {\n                        int x=q.front();\n                        q.pop();\n                        i    f(x==t) break;//\u627e\u5230\u589e\u5e7f\u8def\n                        for(int i=1;i<=n;i++)\n                        {\n                                    if(i!=s&&map[x][i]>0&&pre[i]==-1)\n                                    {\n                                                pre[i]=x;//\u8bb0\u5f55\u524d\u9a71 \n                                                if(flow[x]<map[x][i]) flow[i]=flow[x];\n                                                else flow[i]=map[x][i];//\u627e\u589e\u91cf \n                                                q.push(i);\n                                    }\n                        } \n            }\n            if(pre[t]==-1) return -1;\n            else return flow[t];\n}\nint max_flow(int s,int t)\n{\n            int ins_flow=0;\n            int tot_flow=0;\n            while((ins_flow=bfs(s,t))!=-1)\n            {\n                        int k=t;//\u4ece\u7ec8\u70b9\u5f80\u8d77\u70b9\u627e \n                        while(k!=s)\n                        {\n                                    int last=pre[k];\n                                    map[last][k]-=ins_flow;//\u6539\u6b63\u5411\u8fb9 \n                                    map[k][last]+=ins_flow;//\u6539\u53cd\u5411\u8fb9 \n                                    k=last;\n                        }\n                        tot_flow+=ins_flow;\n            }\n            return tot_flow;\n}\nint main()\n{\n            scanf(\"%d%d%d\",&n,&m,&x);\n            for(int i=1;i<=m;i++)\n            {\n                        int x,y,z;\n                        scanf(\"%d%d%d\",&x,&y,&z);\n                        map[x][y]+=z;\n                }\n            int temp=max_flow(1,n);\n            if(temp==0){\n                printf(\"Orz Ni Jinan Saint Cow!\\n\");\n                return 0;\n            }\n            if(x%temp==0) printf(\"%d %d\\n\",temp,x/temp);\n            else printf(\"%d %d\\n\",temp,x/temp+1);\n            return 0;\n}\n```",
        "postTime": 1477879237,
        "uid": 25119,
        "name": "\u9752\u4e1d\u3001\u66ae\u6210\u96ea",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u5c31\u4e0d\u8bf4\u4e86\uff0c\u8bf4\u6765\u8bf4\u53bb\u5c31\u662f\u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u628a\u6743\u503c\u89c6\u4e3a\u5bb9\u91cf\uff0c\u7136\u540e\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u5f97\u5230\u6700\u5c0f\u5272\u3002\u5b8c\u4e86\u5c31\u53ef\u4ee5\u8ba1\u7b97\u4e86\uff0c\u5982\u679c\u6700\u5927\u6d41\u4e3a0\uff0c\u5c31\u662f\u4e0d\u80fd\u5b8c\u6210\u8f93\u51fa\u201cOrz Ni Jinan Saint Cow!\u201d,\u5982\u679c\u4e0d\u662f0\u5c31\u8981\u8003\u8651\u80fd\u4e0d\u80fd\u6574\u9664\uff0c\u4e0d\u80fd\u6574\u9664\u5c31\u8981\u5728\u5546\u4e0a\u52a0\u4e0a\u4e00\u3002\n```c\n#include<bits/stdc++.h>\n#pragma GCC optimize(2)\n#define MAXN 205\n#define maxnode 1000005\n#define sigma_size 26\n#define md 12345678\n#define INF 0x3f3f3f3f\n#define pii pair<int,int>\nusing namespace std;\n\nstruct Edge\n{\n    int from,to,cap,flow;\n    Edge(int from=0,int to=0,int cap=0,int flow=0):from(from),to(to),cap(cap),flow(flow){};\n};\nint n,m,s,t,k;\n\nstruct Dinic\n{\n    int n,m,s,t;\n    bool vis[MAXN];\n    int d[MAXN],cur[MAXN];\n    vector<Edge> edges;\n    vector<int> G[MAXN];\n    void init(int n)\n    {\n        this->n=n;\n        edges.clear();\n        for(int i=0;i<=n;i++)\n            G[i].clear();\n    }\n\n    void AddEdge(int from,int to,int cap)\n    {\n        edges.push_back({from,to,cap,0});\n        edges.push_back({to,from,0,0});\n        int mm=edges.size();\n        G[from].push_back(mm-2);\n        G[to].push_back(mm-1);\n    }\n\n    bool bfs()\n    {\n        memset(vis,0,sizeof(vis));\n        d[s]=0,vis[s]=true;\n        queue<int> Q;\n        Q.push(s);\n        while(!Q.empty())\n        {\n            int X=Q.front();\n            Q.pop();\n            for(int i=0;i<G[X].size();i++)\n            {\n                Edge &e=edges[G[X][i]];\n                if(!vis[e.to]&&e.cap>e.flow)\n                {\n                    vis[e.to]=true;\n                    d[e.to]=d[X]+1;\n                    Q.push(e.to);\n                }\n            }\n        }\n        return vis[t];\n    }\n\n    int dfs(int x,int a)\n    {\n        if(x==t||a==0)\n            return a;\n        int flow=0;\n        int f;\n        for(int &i=cur[x];i<G[x].size();i++)\n        {\n            Edge &e=edges[G[x][i]];\n            if(d[e.to]==d[x]+1&&(f=dfs(e.to,min(a,e.cap-e.flow)))>0)\n            {\n                flow+=f;\n                e.flow+=f;\n                edges[G[x][i]^1].flow-=f;\n                a-=f;\n                if(a==0)\n                    break;\n            }\n        }\n        return flow;\n    }\n\n    int Maxflow(int s,int t)\n    {\n        this->s=s;\n        this->t=t;\n        int flow=0;\n        while(bfs())\n        {\n            memset(cur,0,sizeof(cur));\n            flow+=dfs(s,INF);\n        }\n        return flow;\n    }\n}dinic;\n\n\nint main()\n{\n    scanf(\"%d %d %d\",&n,&m,&k);\n    for(int i=1;i<=m;i++)\n    {\n        int u,v,w;\n        scanf(\"%d %d %d\",&u,&v,&w);\n        dinic.AddEdge(u,v,w);\n    }\n    int ans=dinic.Maxflow(1,n);\n    if(ans==0)\n    {\n        printf(\"Orz Ni Jinan Saint Cow!\\n\");\n        return 0;\n    }\n    int sum=k/ans;\n    if(k%ans)\n        sum+=1;\n    printf(\"%d %d\\n\",ans,sum);\n    return 0;\n}\n\n```\n",
        "postTime": 1573433439,
        "uid": 210155,
        "name": "abandentsky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u76ee\u5c31\u662f\u4e00\u9053\u6734\u7d20\u7684\u6c42\u6700\u5927\u6d41\u7684\u9898\u76ee\uff1b\n\u5148bfs\u5206\u5c42\uff1b\u518ddfs\u5bf9\u6bcf\u4e00\u5c42\u6b21\u7684\u6d41\u91cf\u8fdb\u884c\u4fee\u6539\uff1b\n\u6700\u540e\u8f93\u51fa\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\uff1b\u4e0d\u4f1a\u7684\u53ef\u4ee5\u5148\u53bb\u505a\u4e00\n\u4e0b P3376 \u8fd9\u9053\u6a21\u677f\u9898\uff1b _**\u4e0a\u4ee3\u7801\uff1a**_ \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=10005;\nint n,m,s;\nstruct edge{\n\tint v,nxt,val;\n}e[N*2];\nint head[N],cnt=1;\nint dis[N];\nint maxflow;\nvoid add(int u,int v,int val){\n\te[++cnt]=(edge){v,head[u],val};head[u]=cnt;\n\te[++cnt]=(edge){u,head[v],0};head[v]=cnt;\n}\nbool bfs()\n{\n\tqueue<int>q;\n\tmemset(dis,-1,sizeof(dis));\n\tq.push(1);dis[1]=1;\n\twhile(!q.empty())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=e[i].nxt)\n\t\t{\n\t\t\tint v=e[i].v;\n\t\t\tif(dis[v]==-1&&e[i].val)\n\t\t\t{\n\t\t\t\tq.push(v);\n\t\t\t\tdis[v]=dis[x]+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[n]!=-1;\n}\nint dfs(int u,int flow)\n{\n\tif(u==n) return flow;\n\tint res=0;\n\tfor(int i=head[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(dis[v]==dis[u]+1&&e[i].val)\n\t\t{\n\t\t\tint fl=dfs(v,min(e[i].val,flow));\n\t\t\tif(fl)\n\t\t\t{\n\t\t\t\te[i].val-=fl;e[i^1].val+=fl;\n\t\t\t\tflow-=fl;res+=fl;\n\t\t\t\tif(!flow) return res;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main()\n{\n\tscanf(\"%d%d%d\",&n,&m,&s);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,val;\n\t\tscanf(\"%d%d%d\",&x,&y,&val);\n\t\tadd(x,y,val);\n\t}\n\twhile(bfs()) maxflow+=dfs(1,1<<29);\n\tif(maxflow)printf(\"%d \",maxflow);\n\telse {\n\t\tprintf(\"Orz Ni Jinan Saint Cow!\");\n\t\treturn 0;\t\n\t}\n\tif(s%maxflow==0) printf(\"%d\",s/maxflow);\n\telse printf(\"%d\",s/maxflow+1);\n\treturn 0;\n}\n```\n",
        "postTime": 1564796245,
        "uid": 203867,
        "name": "\u82cf\u5e55\u5bd2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\u7f51\u7edc\u6d41\u4e2d\u7684\u6700\u5927\u6d41\uff0c\u8fd9\u91cc\u7528dinic()\u52a0\u524d\u5411\u661f\u89e3\u51b3\n```cpp\n#pragma GCC optimize(200000)/\u4e0d\u7528\u95ee\u4e3a\u4ec0\u4e48,\u8981\u76f8\u4fe1O(200000)\u4f18\u5316\u6bd4O(2)\u5feb\u5f97\u591a\n//\u81f3\u5c11\u542c\u8d77\u6765\u662f\u8fd9\u6837\u7684\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\nusing namespace std;\nstruct edge{\n\tlong long next,w,to;\n}e[1000005];\ninline long long read(){\n\tlong long t=0;\n\tchar v=getchar();\n\twhile(v<'0'||v>'9')v=getchar();\n\twhile(v>='0'&&v<='9'){\n\t\tt=(t<<3)+(t<<1)+v-'0';\n\t\tv=getchar();\n\t}\n\treturn t;\n}\nlong long p[1000002];\nlong long head[1000002],b,c,d,n,m,cnt=1,S,T,x,o;\ninline void bu(register long long u,register long long v,register long long w){\n      e[++cnt].to=v;\n      e[cnt].w+=w;\n      e[cnt].next=head[u];\n      head[u]=cnt;\n      e[++cnt].to=u;\n      e[cnt].next=head[v];\n      head[v]=cnt;\n}   \nqueue <long long> q;\ninline long long spfa(register long long s,register long long t){\n    memset(p,-1,sizeof(p));\n\twhile(!q.empty())q.pop();\n\tq.push(s);\n\tp[s]=0;\n\twhile(!q.empty()){\n\t\tlong long r=q.front();\n\t\tq.pop();\n\t\tif(r==t)return 1;\n        for(register long long i=head[r];i;i=e[i].next){\n\t\t\tif(e[i].w>0&&p[e[i].to]<0){\n\t\t\t    q.push(e[i].to);\n\t\t\t\tp[e[i].to]=p[r]+1;\n\t\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\ninline long long dfs(register long long s,register long long t,register long long mx){\n\tlong long r=0,y=0;\n\tif(s==t)return mx;\n\tfor(register long long i=head[s];i;i=e[i].next)\n\t\tif(e[i].w>0&&p[e[i].to]==p[s]+1){\n\t\t\ty=dfs(e[i].to,t,min(e[i].w,mx));\n\t\t\te[i].w-=y;\n\t\t\te[i^1].w+=y;\n\t\t\tr+=y;\n\t\t\tmx-=y;\n\t\t\tif(!mx)return r;\n\t\t}\n\t\n\treturn r;\n}\ninline long long dinic(){\n\tlong long ans=0;\n\twhile(spfa(S,T))ans+=dfs(S,T,0x7fffffff);\n\treturn ans;\n}\nint main(){\n    n=read();\n\tm=read();\n\tx=read();\n\tS=1;\n\tT=n;\n\tfor(register long long i=1;i<=m;++i){\n\t\tb=read();\n\t\tc=read();\n\t\td=read();\n\t\tbu(b,c,d);\n\t}\n\to=dinic();\n\tif(o==0)printf(\"Orz Ni Jinan Saint Cow!\");\n\telse printf(\"%d %d\",o,(x+o-1)/o);\n}//\u5176\u5b9eO(200000)\u6ca1\u6709\u592a\u5927\u7684\u533a\u522b\n```\n",
        "postTime": 1557492191,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1Dinic\u3002\n\n\u8fd9\u9898\u6bd4\u8f83\u5c11\uff0c\u6211\u4eec\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u8981\u8f93\u9001\u5b66\u751f\uff0c\u6211\u4eec\u53ea\u8981\u627e\u51fa\u6bcf\u6b21\u53ef\u4ee5\u901a\u8fc7\u7684\u6700\u5927\u7684\u5b66\u751f\u6570\u91cf\u5c31\u597d\u3002\n\n\u7136\u540e\u7528\u4e00\u70b9\u8d2a\u5fc3\u7684\u539f\u7406\uff0c\u6bcf\u6b21\u90fd\u53bb\u7528\u6700\u5927\u7684\u8f93\u9001\u65b9\u6848\u8f93\u9001\u5b66\u751f\uff08\u5e9f\u8bdd\u3002\u3002\uff09\n\n\u53ea\u8981\u6700\u5927\u6d41\u4e0d\u4e3a0\u5c31\u4e00\u5b9a\u80fd\u8f93\u9001\u5b8c\u6210\n\n        \n        \n    \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<algorithm>\n#define lli long long int \nusing namespace std;\nconst int MAXN=300001;\nconst int maxn=0x7fffff;\nvoid read(int &n)\n{\n    char c='+';int x=0;bool flag=0;\n    while(c<'0'||c>'9')\n    {c=getchar();if(c=='-')flag=1;}\n    while(c>='0'&&c<='9')\n    {x=(x<<1)+(x<<3)+c-48;c=getchar();}\n    flag==1?n=-x:n=x;\n}\nstruct node\n{\n    int u,v,flow,cap,nxt;\n}edge[MAXN];\nint head[MAXN];\nint num=0;\nint n,m,S,T,x;\nint dis[MAXN];\nint vis[MAXN];\nint cur[MAXN];\nvoid add_edge(int x,int y,int z)\n{\n    edge[num].u=x;\n    edge[num].v=y;\n    edge[num].cap=z;\n    edge[num].flow=0;\n    edge[num].nxt=head[x];\n    head[x]=num++;\n}\nbool bfs(int bg,int ed)\n{\n    memset(dis,-1,sizeof(dis));\n    queue<int>q;\n    q.push(bg);\n    dis[bg]=0;\n    while(!q.empty())\n    {\n        int p=q.front();\n        q.pop();\n        for(int i=head[p];i!=-1;i=edge[i].nxt)\n        {\n            if(dis[edge[i].v]==-1&&edge[i].cap>edge[i].flow)\n            {\n                vis[edge[i].v]=1;\n                dis[edge[i].v]=dis[edge[i].u]+1;\n                  q.push(edge[i].v);            \n            }\n        }\n    }\n    if(dis[ed]==-1)\n        return 0;\n    else return 1;\n}\nint dfs(int now,int a)// a:\u6240\u6709\u5f27\u7684\u6700\u5c0f\u6b8b\u91cf \n{\n    if(now==T||a<=0)\n        return a;\n    int flow=0,f;\n    for(int i=head[now];i!=-1;i=edge[i].nxt)\n    {\n        if(dis[now]+1==dis[edge[i].v]&&edge[i].cap-edge[i].flow>0)\n        {\n            f=dfs(edge[i].v,min(a,edge[i].cap-edge[i].flow));\n            edge[i].flow+=f;\n            edge[i^1].flow-=f;\n            flow+=f;\n            a-=f;\n            if(a<=0)break;\n        }\n    }\n    return flow;\n}\nvoid Dinic(int S,int T)\n{\n    int ansflow=0;\n    int cs=0;\n    int maxflow=0;\n    for(int i=1;i<=n;i++)\n            cur[i]=head[i];\n    while(bfs(S,T))\n    {\n        int p=dfs(S,maxn);\n        cs++;\n        ansflow+=p;\n        maxflow=max(maxflow,p); \n    }// \u6c42\u51fa\u5c42\u7ea7\n    if(ansflow==0)\n        printf(\"Orz Ni Jinan Saint Cow!\");\n    else \n        printf(\"%d %d\",ansflow,(x%ansflow)==0?(x/ansflow):(x/ansflow+1));\n    //printf(\"%d\",ansflow);\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&x);\n    //read(n);read(m);read(x);\n//    swap(n,m);\n    S=1;T=n;\n   // read(S);read(T);\n    for(int i=1;i<=n;i++)\n        head[i]=-1;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y,z;\n        //read(x);read(y);read(z);\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add_edge(x,y,z);\n        add_edge(y,x,0);\n    }\n    Dinic(S,T);\n    return 0;\n}\n\n```",
        "postTime": 1499672083,
        "uid": 36984,
        "name": "attack",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1343 \u3010\u5730\u9707\u9003\u751f\u3011"
    }
]