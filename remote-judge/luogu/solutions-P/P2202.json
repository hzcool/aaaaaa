[
    {
        "content": "## \u601d\u8def\n\n\n### \u6574\u4f53\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u8981\u6ee1\u8db3\u9898\u610f\uff0c\u4e24\u4e2a\u6b63\u65b9\u5f62\u7684\u5750\u6807$(x_i,y_i)(x_j,y_j)$\u5fc5\u987b\u6ee1\u8db3$|x_i-x_j|<k$\u5e76\u4e14$|y_i-y_j|<k$\u3002\u5982\u679c\u6709\u4e14\u4ec5\u6709\u4e00\u7ec4\u6b63\u65b9\u5f62\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u91cd\u53e0\u90e8\u5206\u7684\u9762\u79ef$ans=|k-(x_i-x_j)|\\times|k-(y_i-y_j)|$\u3002\n\n\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u66b4\u529b\u626b\u63cf\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^2)$\u3002\n\n\n\u6211\u672c\u6765\u6253\u7b97\u5199\u4e00\u4e2a\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7684\uff0c\u4f46\u597d\u50cf\u6709\u4e9b\u5927\u6750\u5c0f\u7528\u4e86\uff0c\u96be\u5ea6\u624d\u63d0\u9ad8\u554a\u3002\n\n\n\u6839\u636e[\u5b98\u65b9\u9898\u89e3](http://www.usaco.org/current/data/sol\\_squares.html)\uff0c\u5148\u5bf9\u6240\u6709\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4\u4e0e\u5f53\u524d\u70b9\u6a2a\u5750\u6807\u5dee\u503c\u5c0f\u4e8ek\u7684\u6240\u6709\u70b9\u7684\u96c6\u5408\uff0c\u6bcf\u6b21\u67e5\u627e\u70b9\u96c6\u4e2d\u7eb5\u5750\u6807\u6700\u63a5\u8fd1\u5f53\u524d\u70b9\u7684\u70b9\uff0c\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\n\u5982\u4f55\u7ef4\u62a4\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5462\uff1f\u56e0\u4e3a\u70b9\u662f\u6709\u5e8f\u7684\uff0c\u6ee1\u8db3$x_i\\le x_{i+1}$\uff0c\u6bcf\u6b21\u53ea\u9700\u5c06\u65e0\u6548\u7684\u70b9\u5220\u9664\u5373\u53ef\u3002\n\n\n### \u5177\u4f53\u5b9e\u73b0\n\n\n\u4f7f\u7528`set`\u7ef4\u62a4\u70b9\u96c6\u6bd4\u8f83\u65b9\u4fbf\uff0c\u5220\u9664\u548c\u63d2\u5165\u64cd\u4f5c\u5747\u4e3alog\u7ea7\u7684\u3002\u5176\u4e2d`set::insert`\u4f1a\u8fd4\u56de\u4e00\u4e2a`pair<iterator,bool>`\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u63d2\u5165\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u63d2\u5165\u662f\u5426\u6210\u529f\u3002(\u53c2\u8003http://en.cppreference.com/w/cpp/container/set/insert)\n\n\n> cppreference\u662f\u4e00\u4e2a\u4e0d\u9519\u7684C++\u53c2\u8003\u7f51\u7ad9\n\n\u53e6\u5916\uff0c\u7b54\u6848\u5e94\u8be5\u752864\u4f4d\u6574\u6570\u4fdd\u5b58\u3002\n\n\n## \u4ee3\u7801\u6e05\u5355\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50005;\ntypedef pair<int,int> pii;\npii p[N];\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    for(int i=1;i<=n;i++)\n        cin>>p[i].first>>p[i].second;\n  //first\u8868\u793a\u6a2a\u5750\u6807 second\u8868\u793a\u7eb5\u5750\u6807\n    sort(p+1,p+n+1);\n  //\u6a2a\u5750\u6807\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57 \u7eb5\u5750\u6807\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\n    set<pii> S;\n  //first\u8868\u793a\u7eb5\u5750\u6807 second\u8868\u793a\u70b9\u7684\u6807\u53f7 \u5176\u5b9e\u53ea\u4fdd\u5b58\u70b9\u7684\u6807\u53f7\u4e5f\u53ef\u4ee5 \u4f46\u5fc5\u987b\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u4e86\n    long long ans=0;\n    for(int i=1,j=1;i<=n;i++)\n    {\n        for(;j<i&&p[i].first-p[j].first>=k;j++)\n            S.erase(make_pair(p[j].second,j));\n      //\u5220\u9664\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\n        set<pii>::iterator it1=S.insert(make_pair(p[i].second,i)).first,it2=it1;\n      //it1\u548cit2\u5747\u4e3a\u5f53\u524d\u70b9\u7684\u8fed\u4ee3\u5668\n        if(it1--!=S.begin()&&p[i].second-it1->first<k)\n            if(!ans)\n                ans=(long long)(k-abs(p[i].first-p[it1->second].first))*(k-(p[i].second-it1->first));\n            else\n                ans=-1;\n        if(++it2!=S.end()&&it2->first-p[i].second<k)\n            if(!ans)\n                ans=(long long)(k-abs(p[i].first-p[it2->second].first))*(k-(it2->first-p[i].second));\n            else\n                ans=-1;\n      //\u6ce8\u610fset::iterator\u53ea\u80fd\u8fdb\u884c\u81ea\u589e\u81ea\u51cf \u4e0d\u80fd\u8fdb\u884c+1/-1\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n\\log n)$\n\n",
        "postTime": 1492656735,
        "uid": 9406,
        "name": "zhzh2001",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]\u65b9\u5757\u91cd\u53e0Square Overlap\u3011"
    },
    {
        "content": "## P2202 [USACO13JAN]Square Overlap S \n### & Hack fake solution\n[[Statment]](https://www.luogu.com.cn/problem/P2202)\n\n$Date:\\ Dec.\\ 25th$\n\n---\n#### \u9898\u610f\uff1a\n&emsp;&emsp;\u7ed9\u5b9a $n$ \u4e2a\u8fb9\u957f\u4e3a $k$ \u7684\u6b63\u65b9\u5f62\uff0c\u82e5\u4e24\u4e24\u4e4b\u95f4\u6ca1\u6709\u4e0d\u76f8\u4ea4\uff0c\u8f93\u51fa $0$\u3002 \u82e5\u6070\u597d\u53ea\u6709\u4e24\u4e2a\u6b63\u65b9\u5f62\u76f8\u4ea4\uff0c\u8f93\u51fa**\u76f8\u4ea4\u9762\u79ef**\u3002 \u82e5\u6709\u591a\u4e8e\u4e24\u4e2a\u6b63\u65b9\u5f62\u76f8\u4ea4\u8f93\u51fa $-1$\u3002\n\n---\n##### \u5148\u8868\u8fbe\u4e00\u6ce2\u611f\u60f3\uff1a\n&emsp;&emsp;\u4f5c\u4e3a\u4e00\u9053\u5e73\u8861\u6811\u7684\u9898\u76ee\uff0c\u9898\u89e3\u91cc\u5374\u53ea\u6709\u4e00\u7bc7\u6b63\u7ecf\u7684\u4f7f\u7528 set \u7684\u505a\u6cd5\uff0c\u5176\u4f59\u7684\u5927\u90fd\u662f\u201c\u66b4\u529b\u201d\u3002\u6211\u611f\u5230\u975e\u5e38\u6c14\u6124\u3002 ~~\u4f46\u662f\u5e73\u8861\u6811\u6700\u540e\u8fd8\u8dd1\u4e0d\u8fc7\"\u66b4\u529b\"\u3002~~ \u4e00\u5f00\u59cb\u6211\u5206\u6790\u4e86\u4e00\u6ce2\u8fd8\u8ba9\u4e3a\u66b4\u529b\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff0c**\u4e0d\u8fc7\u6700\u540e\u8fd8\u662f\u5c06\u5176 Hack \u6389\u4e86\uff0c \u8fd9\u4e2a\u6211\u4eec\u7a0d\u540e\u518d\u8c08**\u3002\n\n---\n#### \u9898\u89e3\n&emsp;&emsp;\u5148\u8bf4\u4e00\u4e0b\u4e25\u683c $O(nlogn)$ \u7684\u5e73\u8861\u6811\u505a\u6cd5\u3002 \n\n###### \u4e00\u4e9b\u89e3\u9898\u57fa\u7840\u7ed3\u8bba\uff1a\n\n&emsp;&emsp;\u8bbe\u4e24\u4e2a\u6b63\u65b9\u5f62\u4e2d\u5fc3\u4e3a $a$ , $b$, **\u4e24\u4e2a\u6b63\u65b9\u5f62\u76f8\u4ea4\u5f53\u4e14\u4ec5\u5f53 $|a.x - b.x| < k$ \u4e14 $|a.y - b.y| < k$**\u3002 \u8fd9\u5f88\u597d\u7406\u89e3\uff0c \u60f3\u8c61\u6bcf\u4e2a\u4e2d\u5fc3\u70b9\u5411\u5916\u62d3\u5c55 $\\frac{k}2$ \u7684\u957f\u5ea6\uff0c\u4e24\u4e2a\u6b63\u65b9\u5f62\u6700\u591a\u80fd\u62d3\u5c55\u51fa $k$, \u6240\u4ee5\u4e24\u4e2a\u6b63\u65b9\u5f62\u76f8\u4ea4\u9700\u8981\u6ee1\u8db3\u6a2a\u7eb5\u4e4b\u5dee\u5747\u5c0f\u4e8e $k$\u3002\n\n&emsp;&emsp;\u4e24\u4e2a\u76f8\u4ea4\u7684\u6b63\u65b9\u5f62\u76f8\u4ea4\u9762\u79ef\u4e3a:\n$$\nS = (k - |a.x - b.x|) \\times (k - |a.y - b.y|)\n$$\n&emsp;&emsp;\u5373\u76f8\u4ea4\u90e8\u5206\u7684**\u957f$\\times$\u5bbd**\u3002\n\n###### \u5177\u4f53\u5b9e\u73b0\uff1a\n&emsp;&emsp;\u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\u4e4b\u540e\u5c31\u53ef\u4ee5\u5728\u76f4\u5230\u4e24\u4e2a\u4e2d\u5fc3\u4f4d\u7f6e\u7684\u60c5\u51b5\u4e0b\u6c42\u9762\u79ef\u4e86\u3002\n\u4f46\u662f\u76f4\u63a5\u679a\u4e3e\u662f $n^2$ \u7684\u663e\u7136\u8fc7\u4e0d\u4e86\uff0c \u8003\u8651\u5bf9 $x$ \u8fdb\u884c\u6392\u5e8f\u540e\u8fdb\u884c\u53cc\u6307\u9488 $l$, $r$ \u626b\u63cf\u3002 \n\t\n&emsp;&emsp;\u8bb0\u6839\u636e $x$ \u6392\u5e8f\u540e\u7684\u4e2d\u5fc3\u5e8f\u5217\u4e3a $p$, \u5bf9\u4e8e\u786e\u5b9a\u7684\u5c3e\u6307\u9488 $r$, \u6211\u4eec\u7ef4\u62a4\u6ee1\u8db3 $p_r.x - p_l.x \\lt k$ \u7684\u6700\u5927\u533a\u95f4 $[l, r]$\u3002\u5177\u4f53\u7ef4\u62a4\u7684\u65b9\u6cd5\u7c7b\u4f3c\u4e8e[P1886 \u6ed1\u52a8\u7a97\u53e3](https://www.luogu.com.cn/problem/P1886), \u4e0d\u8fc7\u6211\u4eec\u8981\u77e5\u9053\u7684\u4e0d\u662f\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u503c\uff0c\u800c\u662f\u5728 $[l, r - 1]$ \u4e2d **$|p_i.y - p_r.y|$ \u6700\u5c0f\u7684 $p_i$**\u3002\n\n&emsp;&emsp;\u90a3\u5982\u4f55\u5f97\u5230 $|p_i.y - p_r.y|$ \u6700\u5c0f\u7684 $p_i$ \u5462\uff1f\u53ef\u4ee5\u5728 $[l, r - 1]$ \u4e2d\u627e\u51fa\u6700\u5927\u7684 $p_j.y \\le p_r.y$\uff0c \u548c\u6700\u5c0f\u7684 $p_k.y \\ge p_r.y$\uff0c\u8fd9\u4e0d\u5c31\u662f\u5e73\u8861\u6811\u4e0a\u6c42\u4e00\u4e2a $p_r$ \u5173\u4e8e $y$ \u7684**\u524d\u9a71**\u548c**\u540e\u7ee7**\u5417\uff1f\n\n&emsp;&emsp;\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u7528\u4efb\u610f\u4e00\u79cd\u4f60\u4f1a\u5199\u7684\u5e73\u8861\u6811\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u7528std::set\u7684lower_bound\u51fd\u6570\u83b7\u5f97\u524d\u9a71\u540e\u7ee7\u3002 \n\n\uff08P.S. \u8fd9\u91cc\u7684\u524d\u9a71\u540e\u7ee7\u548c\u4f20\u7edf\u610f\u4e49\u4e0a\u7684\u7565\u6709\u4e0d\u540c\uff0c **\u82e5 $p_i.y = p_r.y$\uff0c\u4e5f\u628a $p_i$ \u89c6\u4e3a\u524d\u9a71\u548c\u540e\u7ee7**\uff09\n\n\u4e4b\u540e\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- \u82e5 $p_j$ \u548c $p_k$ \u90fd\u4e8e $p_r$ \u76f8\u4ea4, \u6216\u8005\u4e4b\u524d\u5df2\u7ecf\u6709\u5176\u4ed6\u7684\u6b63\u65b9\u5f62\u5b58\u5728\u76f8\u4ea4\uff0c \u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa $-1$\u3002\n- \u5426\u5219\u8bb0\u5f55\u4e0b\u4e0e $p_j$ \u6216 $p_k$ \u4e0e $p_r$ \u76f8\u4ea4\u7684\u9762\u79ef\u3002\n- \u5982\u679c\u4e00\u76f4\u6ca1\u6709\u76f8\u4ea4\uff0c\u8bb0\u5f55\u7684\u76f8\u4ea4\u9762\u79ef\u4e3a $0$, \u6700\u540e\u4e5f\u4f1a\u8f93\u51fa $0$ \u4e0d\u7528\u7279\u5224\u3002\n\n\u53cc\u6307\u9488\u626b\u63cf\u6bcf\u4e2a\u6570\u5165\u961f\u4e00\u6b21\u51fa\u961f\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c\u5e73\u8861\u6811\u4e0a\u4fee\u6539\u67e5\u8be2\u5747\u4e3a $O(logn)$, \u603b\u590d\u6742\u5ea6 $O(nlogn)$ \u3002\n\n\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u6392\u5e8f\u540e\u53cc\u6307\u9488 + \u5e73\u8861\u6811 AC \u6b64\u9898\u3002\n\n---\n###### \u4e00\u4e2a\u7b14\u8005\u4e4b\u524d\u7684\u7591\u60d1\uff1a\n\t\n&emsp;&emsp;\u5728\u6211\u7b2c\u4e00\u6b21\u5199\u7684\u65f6\u5019\uff0c \u5bf9\u4e8e\u6bcf\u4e00\u4e2a $p_r$, \u67e5\u51fa\u4e86\u4e24\u4e2a\u524d\u9a71(\u5373\u524d\u9a71\u7684\u524d\u9a71)\u548c\u4e24\u4e2a\u540e\u7ee7\u518d\u7edf\u8ba1\u7b54\u6848\uff0c\u62c5\u5fc3\u51fa\u73b0 $p_r$ \u4e0e\u4e24\u4e2a\u524d\u9a71\u6216\u540e\u7ee7\u76f8\u4ea4\u4e24\u6b21\uff0c\u6f0f\u5224 $-1$ \u7684\u60c5\u51b5\uff0c \u4f46\u5176\u5b9e\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\u3002 \u4ee5\u524d\u9a71\u4e3a\u4f8b\uff0c\u5982\u679c\u5b58\u5728 $p_r$ \u4e0e\u4e24\u4e2a\u524d\u9a71\u540c\u65f6\u76f8\u4ea4\u7684\u60c5\u51b5\uff0c\u90a3\u8fd9\u4e24\u4e2a\u524d\u9a71\u672c\u8eab\u4e5f\u4e00\u5b9a\u76f8\u4ea4\uff0c\u5728\u4e4b\u524d\u5df2\u7ecf\u88ab\u7edf\u8ba1\u8fc7\u4e86\uff0c\u4e0d\u4f1a\u6f0f\u5224 $-1$\u3002**\u6240\u4ee5\u53ea\u8981\u4e2a\u641c\u51fa\u4e00\u4e2a\u524d\u9a71\u548c\u4e00\u4e2a\u540e\u7ee7\u5c31\u53ef\u4ee5\u4e86**\u3002 \u867d\u7136\u8fd9\u4e0d\u5f71\u54cd\u603b\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u5e38\u6570\u5c0f\u8dd1\u7684\u5feb\u603b\u662f\u597d\u7684\u3002\n\n---\n#### Code : \n\u8fd9\u91cc\u6211\u9009\u62e9\u4e86 Splay \u4f5c\u4e3a\u5e73\u8861\u6811\u3002 \u7531\u4e8e\u4ee3\u7801\u8f83\u957f Splay \u90e8\u5206\u5c31\u653e\u5728\u672c\u6587\u7684\u6700\u540e\uff0c\u8fd9\u91cc\u53ea\u7ed9\u51fa\u6838\u5fc3\u4ee3\u7801(~~\u597d\u50cf\u8fd8\u662f\u86ee\u957f\u7684~~)\u3002\n```cpp\n#include <bits/stdc++.h>\ntemplate<class _Tp = int> _Tp read() {\n  _Tp w = 0;\n  bool f = 0;\n  char ch = getchar();\n  while (!isdigit(ch)) f |= ch == '-', ch = getchar();\n  while (isdigit(ch)) w = (w << 3) + (w << 1) + (ch ^ 48), ch = getchar();\n  return f ? -w : w;\n}\n\nconst int kMaxN = 5e4 + 5;\nconst int INF = 0x3f3f3f3f;\ntypedef long long ll;\nint n;\nll k, square; // square \u8bb0\u5f55\u9762\u79ef\u7b54\u6848\nstruct point {\n  int x, y;\n  bool operator < (point o) const {\n    return (y < o.y || (y == o.y && x < o.x));\n  } // \u5728\u5e73\u8861\u6811\u4e2d\u6839\u636e y \u6392\u5e8f\uff0c\u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u91cd\u8f7d\u5c0f\u4e8e\u53f7\n  // \u6ce8\u610f y \u76f8\u7b49\u65f6\u8fd4\u56de x \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u5426\u5219\u5e73\u8861\u6811\u5185\u4f1a\u8ba4\u4e3a\u4e24\u4e2a y \u76f8\u540c x \u4e0d\u540c\u7684\u70b9\u662f\u540c\u4e00\u4e2a\u70b9\n  // \u540c\u65f6\u8fd9\u4e5f\u4fdd\u8bc1\u4e86\u5728\u67e5\u524d\u9a71\u540e\u7ee7\u7684\u65f6\u5019\u4f1a\u67e5\u5230 y \u548c\u5f53\u524d\u76f8\u540c\u7684\u70b9\uff0c \u800c\u4e0d\u4f1a\u88ab\u8df3\u8fc7\n  point() {};\n  point(int x_, int y_) : x(x_), y(y_) {}\n} p[kMaxN];\n\nll intersect(point a, point b) { // \u7b97\u76f8\u4ea4\u9762\u79ef\n  ll r = 0, c = 0;\n  if (std::abs(b.x - a.x) < k) r = k - std::abs(b.x - a.x);\n  if (std::abs(b.y - a.y) < k) c = k - std::abs(b.y - a.y);\n  return r * c;\n}\nvoid check(point a, point b) { // \u68c0\u67e5 a, b \u662f\u5426\u6709\u4ea4\uff0c \u4e14\u4e4b\u524d\u662f\u5426\u6709\u5176\u4ed6\u6b63\u65b9\u5f62\u6709\u4ea4\n  ll tmp = intersect(a, b);\n  if (tmp != 0) {\n    if (square != 0) puts(\"-1\"), exit(0); // \u4e4b\u524d\u6709\u6b63\u65b9\u5f62\u6709\u4ea4\uff0c\u627e\u5230\u4e24\u4e2a\u76f4\u63a5\u9000\u51fa\u3002\n    else square = tmp;\n  }\n}\n\nSplay<point> set;\nint main() {\n  Splay<int> s(std::greater<int>());\n  set.insert(point(0, -INF)), set.insert(point(0, INF)); // \u63d2\u5165\u4e24\u4e2a\u6781\u5927\u6781\u5c0f\u503c\u9632\u6b62\u67e5\u4e0d\u5230\u524d\u9a71\u540e\u7ee7\n  n = read(), k = read();\n  for (int i = 1; i <= n; i++)\n    p[i].x = read(), p[i].y = read();\n  std::sort(p + 1, p + n + 1, [](point a, point b)->bool{ return a.x < b.x; }); // \u6839\u636e x \u6392\u5e8f\n  set.insert(p[1]);\n  for (int l = 1, r = 2; r <= n; r++) {\n    while (l < r && p[r].x - p[l].x >= k) set.erase(p[l++]); // \u5c06\u4e0e\u5f53\u524d\u70b9 x \u8ddd\u79bb\u5927\u4e8e k, \u4e0d\u53ef\u80fd\u76f8\u4ea4\u7684\u6b63\u65b9\u5f62\u4ece\u5e73\u8861\u6811\u4e2d\u5220\u9664\n    point pre = set.pre(p[r]);\n    if (pre.y != -INF) { // \u5b58\u5728\u524d\u9a71\n      check(pre, p[r]);\n    }\n    point next = set.next(p[r]);\n    if (next.y != INF) { // \u5b58\u5728\u540e\u7ee7\n      check(next, p[r]);\n    }\n    set.insert(p[r]); // \u5c06\u5f53\u524d\u70b9\u63d2\u5165\u5e73\u8861\u6811\n  }\n  printf(\"%lld\\n\", square);\n  return 0;\n}\n```\n--- \n#### \u5173\u4e8e Hack \u66b4\u529b\uff1a\n&emsp;&emsp;\u63a5\u4e0b\u6765\u518d\u8c08\u8c08\"\u66b4\u529b\"\u4e3a\u4ec0\u4e48\u80fd\u901a\u8fc7\u6b64\u9898\u800c\u6ca1\u6709\u88ab\u5361\uff0c \u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u5361\u6389\u3002\n\n&emsp;&emsp;\"\u66b4\u529b\"\u7684\u5927\u81f4\u505a\u6cd5\u662f\u5bf9 $x$ \u8fdb\u884c\u6392\u5e8f\u540e\uff0c \u679a\u4e3e\u5c3e\u7ed3\u70b9 $r$, \u66b4\u529b\u5411\u524d\u641c\u7d22 $l$, \u76f4\u5230 $p_r.x - p_l.x \\ge k$ \u540e\u9000\u51fa\u3002 \u540c\u65f6\u82e5\u641c\u7d22\u5230\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6b63\u65b9\u5f62\u76f8\u4ea4\uff0c \u76f4\u63a5\u8f93\u51fa $-1$ \u540e\u9000\u51fa\u3002\n\u7531\u4e8e\u672c\u9898\u6570\u636e\u76f8\u5f53\u968f\u673a(~~\u4ee5\u81f3\u4e8e\u6211\u4e4b\u524d\u7684\u5bf9 $x$ \u6392\u5e8f\u53ea\u5224\u76f8\u90bb\u4e24\u4e2a\u662f\u5426\u76f8\u4ea4\u7684\u5047\u7b97\u6cd5\u90fd\u80fd\u62ff\u5230 50pts~~) \u6240\u4ee5\u66b4\u529b\u8f7b\u677e\u901a\u8fc7\u6b64\u9898\uff0c\u751a\u81f3\u8dd1\u7684\u6bd4\u5e73\u8861\u6811\u8fd8\u8981\u5feb\u3002\n\n&emsp;&emsp;\u8003\u8651\u5982\u4f55\u6784\u9020\u4e00\u79cd\u6570\u636e\u4f7f\u5f97\u8be5\u505a\u6cd5\u590d\u6742\u5ea6\u8fbe\u5230\u6700\u52a3:\n\n- 1. \u4e0d\u80fd\u6709 2 \u5bf9\u6216\u4ee5\u4e0a\u7684\u6b63\u65b9\u5f62\u76f8\u4ea4\uff0c\u5426\u5219\u8be5\u7b97\u6cd5\u4f1a\u5728\u641c\u7d22\u5230\u540e\u76f4\u63a5\u7ed3\u675f\u3002\n- 2. $x$ \u5c3d\u91cf\u63a5\u8fd1\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u672b\u5c3e $r$ \u5411\u524d\u626b\u63cf\u7684\u8ddd\u79bb\u5c3d\u91cf\u957f\u3002\n\n\u4e3a\u4e86\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u8981\u6c42\uff0c \u6211\u4eec\u8ba9\u6b63\u65b9\u5f62\u4ece\u4e0a\u5230\u4e0b\uff0c\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u5207\uff0c \u5373\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u7684 $y$ \u4e4b\u5dee\u4e3a $k$\u3002\n\n\u4e3a\u4e86\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u8981\u6c42\uff0c \u4e00\u5f00\u59cb\u6211\u60f3\u8ba9 $x$ \u6bcf\u6b21 +1\uff0c \u4f46\u8fd9\u6837\u5c31\u9700\u8981\u5e73\u8861\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u4e0a\u6b63\u65b9\u5f62\u8fb9\u957f\u7684\u9650\u5236\uff0c\u5bfc\u81f4\u53ea\u80fd\u8ba9 $k$ \u4e3a $\\sqrt x_{max} = 1000$ \u7ea7\u522b\uff0c\u65e0\u6cd5\u5c06\u5176\u5361\u6389\u3002 \n\u7d22\u6027\u6211\u4eec\u76f4\u63a5\u8ba9 $x$ \u76f8\u7b49\u4e14 $k = 2$\uff0c \u8fd9\u6837\u8be5\u66b4\u529b\u5c31\u4f1a\u8fbe\u5230 $O(n^2)$ \u7ea7\u522b\u3002\n\nhack \u6570\u636e\u751f\u6210\u5668\uff1a\n```cpp\nint main() {\n  int n = 5e4, k = 2;\n  printf(\"%d %d\\n\", n, k);\n  for (int i = 1; i <= n; i++)\n    printf(\"%d %d\\n\", 0, 2 * i); // x = 0, y \u9012\u589e\n  return 0;\n}\n```\n\u8fd8\u6709\u53e6\u4e00\u79cd\u6709\u6280\u5de7\u7684\u66b4\u529b\u6839\u636e $x + y$ \u6765\u6392\u5e8f\uff0c \u4e4b\u540e\u518d\u5224\u65ad\u662f\u5426\u540c\u65f6\u6ee1\u8db3 $|a.x - b.x| < k$ \u4e14 $|a.y - b.y| < k$ \u7684\u9650\u5236\uff0c \u53ef\u4ee5\u6784\u9020 $x + y$ \u76f8\u7b49\u4e14 $k = 2$ \u7684\u60c5\u51b5\u5361\u6210 $O(n^2)$\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u8ba9 (x, y) \u5728\u4e8c\u56db\u8c61\u9650\u5e73\u5206\u7ebf\u4e0a\uff1a\n```cpp\n  for (int i = 1; i <= n; i++)\n    printf(\"%d %d\\n\", -i * 2, i * 2); // x + y = 0\n```\n\n\u81f3\u6b64\uff0c\u9664\u4e86\u590d\u6742\u5ea6\u6b63\u786e\u4f7f\u7528\u4e86set\u7684\u9898\u89e3\uff0c\u5176\u4ed6\u7684\u66b4\u529b\u4e71\u641e\u7b97\u6cd5\u90fdTLE\u4e86\u3002\n\n---\n~~\u597d\u50cf [Dpair](https://www.luogu.com.cn/user/66511) \u5728\u770b\u5230\u6211\u5728 hack \u66b4\u529b\u4e4b\u540e\uff0c\u53c8\u641e\u4e86\u4e2a[\u591a\u6b21\u6392\u5e8f\u7684\u7533\u5fc5\u66b4\u529b](https://www.luogu.com.cn/record/44204061)\u5199\u6cd5\uff0c \u6682\u65f6\u4e0d\u4f1a\u5361 \u3002~~ \n\n\u4e0d\u8fc7\u73b0\u6709\u7684\u9519\u8bef\u9898\u89e3\u5168\u90fd\u88ab hack \u4e86\n\n---\n\u6700\u540e\uff1a\u652f\u6301\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u548c\u7ed3\u6784\u4f53\u4ee5\u53ca\u52a8\u6001\u5185\u5b58\u7684~~\u5927\u5e38\u6570~~\u6307\u9488 Splay \u4ee3\u7801\u3002\n```cpp\n// multi set using splay\ntemplate<class _Tp> class Splay {\n  std::function<bool(_Tp, _Tp)> less;\n  bool greater(const _Tp& x, const _Tp& y) { return less(y, x); }\n  bool equal(const _Tp& x, const _Tp& y) { return (!less(x, y)) && (!greater(x, y)); }\n  struct node {\n    _Tp key;\n    int times, size;\n    node *ls, *rs, *fa;\n    void update() { size = times + ls->size + rs->size; }\n    bool get() { return fa->rs == this; }\n    node* &son(bool d) { return !d ? ls : rs; }\n    node(_Tp key_, node* null_, int times_ = 1) \n         : key(key_), times(times_), size(times_), ls(null_), rs(null_), fa(null_) {}\n  } fall_back, *null = &fall_back, *root = null;\n  void rotate(node* x) {\n    node *y = x->fa, *z = y->fa;\n    bool d = x->get(), d2 = y->get();\n    y->son(d) = x->son(!d);\n    if (y->son(d) != null) y->son(d)->fa = y;\n    x->son(!d) = y;\n    y->fa = x; x->fa = z;\n    if (z != null) z->son(d2) = x;\n    y->update(), x->update();\n  }\n  void splay(node* now) {\n    for (node* fa = null; (fa = now->fa) != null; rotate(now))\n      if (fa->fa != null) rotate((fa->get() == now->get()) ? fa : now);\n    root = now;\n  }\n  node* pre() {  node* now = root->ls; while (now->rs != null) now = now->rs; return now; }\n  node* next() { node* now = root->rs; while (now->ls != null) now = now->ls; return now; }\n public:\n  int rank(_Tp key) {\n    int ret = 0; node* now = root;\n    while (now != null) {\n      if (now->ls != null && less(key, now->key)) now = now->ls;\n      else {\n        ret += now->ls->size;\n        if (equal(key, now->key)) return splay(now), ret + 1;\n        else ret += now->times, now = now->rs;\n      }\n    } return 0;\n  }\n  void insert(_Tp key) {\n    node *now = root, *fa = null;\n    while (now != null) {\n      if (equal(key, now->key)) \n        return ++(now->times), splay(now);\n      fa = now;\n      now = now->son(greater(key, now->key));\n    }\n    now = new node(key, null), now->fa = fa;\n    if (fa != null) fa->son(greater(key, fa->key)) = now;\n    return splay(now);\n  }\n  bool erase(_Tp key) {\n    if (!rank(key)) return (false);\n    --(root->times), root->update();\n    if (!root->times) {\n      node* newrt, *oldrt = root;\n      if ((newrt = pre()) != null) {\n        splay(newrt);\n        root->rs = oldrt->rs;\n        if (root->rs != null) root->rs->fa = root;\n        root->update();\n      } else if ((newrt = next()) != null) {\n        splay(newrt);\n        root->ls = oldrt->ls;\n        if (root->ls != null) root->ls->fa = root;\n        root->update();\n      } else root = null;\n      delete oldrt;\n    }\n    return (true);\n  }\n  _Tp pre(_Tp key) {\n    insert(key);\n    _Tp ret = pre()->key;\n    erase(key);\n    return ret;\n  }\n  _Tp next(_Tp key) {\n    insert(key);\n    _Tp ret = next()->key;\n    erase(key);\n    return ret;\n  }\n  _Tp kth(int k) {\n    node* now = root;\n    while (now != null) {\n      if (now->ls != null && (k <= now->ls->size)) now = now->ls;\n      else {\n        k -= now->ls->size;\n        if (k <= now->times) return spaly(now), now->key;\n        k -= now->times;\n        now = now->rs;\n      }\n    } return now->key;\n  }\n  Splay(_Tp fall_back_) : fall_back(node(fall_back_, &fall_back, 0)), less(std::less<_Tp>()) {}\n  Splay(std::function<bool(_Tp, _Tp)> compare_function = std::less<_Tp>()) : fall_back(node(_Tp(), &fall_back, 0)), less(compare_function) {}\n  Splay(_Tp fall_back_, std::function<bool(_Tp, _Tp)> compare_function = std::less<_Tp>()) : fall_back(node(fall_back_, &fall_back, 0)), less(compare_function) {}\n};\n```\n---\n##### \u7ed3\u8bed\uff1a\u8fd8\u662f\u591a\u60f3\u60f3\u590d\u6742\u5ea6\u6b63\u786e\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u4e5f\u8981\u6709\u7406\u60f3\u3002\n---\nUpdate: \u4e4b\u524d hack \u5fd8\u8bb0 $k$ \u662f\u5076\u6570\u4e86, \u4e0d\u8fc7\u4ee4 $k = 2$ , $(x, y)$ \u6269\u5927\u4e24\u500d\u4e4b\u540e\u4ecd\u7136\u53ef\u4ee5 $hack$ \u3002\n\nUpdate: fix: Splay \u4e2d\u67e5\u5bfb\u7b2c k \u5927\u4e4b\u540e\u6ca1\u6709\u5c06\u7ed3\u679c splay \u5230\u6839, \u867d\u7136\u4e0e\u6b64\u9898\u65e0\u5173\uff0c\u4f46\u8fd8\u662f\u4fee\u590d\u4e00\u4e0b\u3002",
        "postTime": 1608894668,
        "uid": 87329,
        "name": "Ezio__Auditore",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]Square Overlap S\u3011"
    },
    {
        "content": "\u6211\u7684\u601d\u8def\u6bd4\u8f83~~\u7b80\u5355~~\uff08\u611a\u8822\uff09 \u5c31\u662f\u5206\u522b\u4ee5x\u548cy\u6807\u51c6\u5bf91~n\u7684\u70b9\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5206\u522b\u4ece1~n-1\u5411i+1\u5230n\u627e\u4f1a\u91cd\u53e0\u7684\u6b63\u65b9\u5f62\u8fdb\u884c\u7edf\u8ba1\u3002\u3002\u3002\u7528\u65f6216ms\n\n\u590d\u6742\u5ea6\u5f88\u900a \u53ef\u80fd\u88ab\u5361\u5230n^2 \u7136\u800c\u826f\u5fc3\u51fa\u9898\u4eba\u6ca1\u5361\n\n\u7136\u540e\u81ea\u6211\u611f\u89c9\u7ec6\u8282\u591a\u5230\u7206\u70b8\u3002\u8d21\u732e7WA\n\n```cpp\n#include<bits/stdc++.h>\n#define debug printf(\"%d %s\\n\",__LINE__,__FUNCTION__)\n#define PP system(\"pause\")\n#define N 1000010\n#define NN 2010\n#define NNN 310\n#define eps 1e-9\n#define inf 0x3f3f3f3f\nusing namespace std;\nnamespace program\n{\n    template<class T>\n    T read()\n    {\n        T s=0;\n        int ch,flag=0;\n        do\n            flag|=(ch=='-');\n        while(!isdigit(ch=getchar()));\n        do\n            s=s*10+ch-'0';\n        while(isdigit(ch=getchar()));\n        return flag?-s:s;\n    }\n    template <class T>\n    void write(T x)\n    {\n        static int Buf[100];\n        int top=0;\n        do\n            Buf[top++]=(int)(x%10)+'0';\n        while(x/=10);\n        while(top)\n            putchar(Buf[--top]);\n        putchar(' ');\n    }\n    template<class T>\n    void writeln(T x)\n    {\n        write(x);\n        putchar('\\n');\n    }\n    int n,k,ans=0,res=0;\n    struct node{int x,y;}a[N];\n    inline bool cmp1(node A,node B){if(A.x==B.x)return A.y<B.y;else return A.x<B.x;}\n    inline bool cmp2(node A,node B){if(A.y==B.y)return A.x<B.x;else return A.y<B.y;}\n    inline void work()\n    {\n      n=read<int>();\n      k=read<int>();\n      for(int i=1;i<=n;i++)\n      {\n        a[i].x=read<int>();\n        a[i].y=read<int>();\n      }\n      sort(a+1,a+n+1,cmp1);//\u7b2c\u4e00\u904d\u7edf\u8ba1\n      for(int i=1;i<n;i++)\n      {\n        int j=i+1;\n        //\u7ec6\u82821\uff1a\u5224\u65ad\u4e2d\u95f4\u8981\u7528or\n        while((abs(a[j].x-a[i].x)<k||abs(a[j].y-a[i].y)<k)&&j<=n)//\u8fa3\u9e21\u590d\u6742\u5ea6\u53ef\u80fd\u88ab\u5361\u5230n^2\n        {\n         //\u7ec6\u82822\uff1a\u8fd9\u91cc\u8981\u7528and\n          if(abs(a[j].x-a[i].x)<k&&abs(a[j].y-a[i].y)<k)\n            if(ans!=0){exit(puts(\"-1\")&0);}\n            else ans=(k-abs(a[j].x-a[i].x))*(k-abs(a[j].y-a[i].y));\n          j+=1;\n        }\n      }\n      sort(a+1,a+n+1,cmp2); //\u7b2c\u4e8c\u904d\u7edf\u8ba1\n      for(int i=1;i<n;i++)\n      {\n        int j=i+1;\n        //\u7ec6\u82823\uff1aj\u8981\u5224\u8fb9\u754c\uff08\u88ab\u5751\u98de\u8d77\u6765\u7684\u6211\u745f\u745f\u53d1\u6296\uff09\n        while((abs(a[j].x-a[i].x)<k||abs(a[j].y-a[i].y)<k)&&j<=n)\n        {\n          if(abs(a[j].x-a[i].x)<k&&abs(a[j].y-a[i].y)<k)\n            if(res!=0)exit(puts(\"-1\")&0);\n            else res=(k-abs(a[j].x-a[i].x))*(k-abs(a[j].y-a[i].y));\n          j+=1;\n        }\n      }\n      //\u7ec6\u82824\uff1aans\u548cres\u8981\u975e0\n      if(ans!=0&&res!=0&&ans!=res)\n        puts(\"-1\");\n      else\n        if(ans!=0)writeln(ans);\n        else if(res!=0)writeln(res);\n        else puts(\"0\");\n    }\n}\nint main()\n{\n    program::work();\n    return 0;\n}\n\n```",
        "postTime": 1529843530,
        "uid": 83235,
        "name": "\u4e25\u4f73\u6960",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]\u65b9\u5757\u91cd\u53e0Square Overlap\u3011"
    },
    {
        "content": "\u597d\u50cf\u53ea\u6709\u4e00\u7bc7\u9898\u89e3\u3002\u3002\u90a3\u6211\u6765\u518d\u53d1\u4e00\u7bc7\u3002\u3002\u3002\n\n\u5224\u5b9a\u6b63\u65b9\u5f62\u662f\u5426\u91cd\u53e0\u548c\u8ba1\u7b97\u6b63\u65b9\u5f62\u91cd\u53e0\u9762\u79ef\u697c\u4e0b\u90fd\u5df2\u7ecf\u8bf4\u8fc7\u4e86\u3002\u3002\u6211\u5c31\u4e0d\u91cd\u590d\u4e86\u3002\n\n\u6211\u7684\u601d\u8def\u548c\u697c\u4e0b\u4e0d\u5927\u4e00\u6837\u3002\u3002\n\n1\uff09\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u65b9\u5f62\uff08a, b\uff09 \u548c\u53e6\u4e00\u4e2a\u6b63\u65b9\u5f62\uff08c, d\uff09\uff0c\u5982\u679c |a - c|+|b - d| > 2 \\* k \u7684\u8bdd\uff0c\u662f\u80af\u5b9a\u65e0\u89e3\u7684\u3002\uff08\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u3002\uff09\n\u7136\u800c\u8fd9\u6837\u5b50\u8fd8\u662f\u4e0d\u662f\u5f88\u597d\u5904\u7406\u554a\u3002\u3002\u3002\u6240\u4ee5\u6211\u5c31\u6269\u5927\u4e86\u4e00\u4e0b\u8303\u56f4\u3002\u3002\u3002\u76f4\u63a5\u628a\u7edd\u5bf9\u503c\u8131\u53bb\u3002\u3002\u3002\u8fd9\u6837\u5b50\u7684\u8bdd\u81f3\u5c11\u4e0d\u4f1a\u6f0f\u89e3\u3002\u3002\uff08\u518d\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff09\u3002\u5373\u539f\u6765\u7684\u8303\u56f4\u662f |a - c|+|b - d| <= 2\\*k \u53ef\u80fd\u6709\u89e3\uff0c\u73b0\u5728\u53d8\u6210\u4e86 a + b - c - d <= 2 \\* k \u53ef\u80fd\u6709\u89e3\u3002\u524d\u4e00\u79cd\u60c5\u51b5\u662f\u540e\u4e00\u79cd\u60c5\u51b5\u7684\u5b50\u96c6\u3002\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u4f1a\u6f0f\u89e3\u3002\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u6309\u7167\u6a2a\u5750\u6807\u52a0\u7eb5\u5750\u6807\u6392\u5e8f\u3002\u3002\u7136\u540e\u518d\u679a\u4e3e\u5224\u5b9a\u662f\u5426\u5408\u610f\u3002\u3002\u3002\n\u8fd8\u6709\u5c31\u662f\u3002\u3002\u91cd\u53e0\u4e2a\u6570\u5927\u4e8e\u4e00\u65f6\u53ca\u65f6\u8df3\u51fa\u5faa\u73af\u3002\u3002\u53ef\u4ee5\u5feb\u5f88\u591a\u3002\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define read(a) a=getint()\nusing namespace std;\nconst int getint() {int x=0, f=1, c=getchar();for(;c<'0'||c>'9';c=getchar())if(c=='-') f=-1;for(;c>='0'&&c<='9';c=getchar()) x=x*10+c-48;return x*f;}\nint n, k, ans, f;\nstruct node{int x, y;}a[50001];\nbool cmp(node a,node b)\n{return a.x+a.y<b.x+b.y;}\nbool jud(node a,node b){\n    return abs(a.x-b.x)<k && abs(a.y-b.y)<k;\n}\nint main() {\n    read(n);read(k);\n    for(int i=1;i<=n;++i) read(a[i].x),read(a[i].y);\n    sort(a+1,a+n+1,cmp);\n    for(int i=1; i<n; ++i) {\n        int p = i + 1;\n        while(a[i].x+a[i].y  + 2*k >= a[p].x+a[p].y && ans < 2 && p<=n) {\n            if(jud(a[i],a[p])) ans ++, f = (k-abs(a[i].x-a[p].x))*(k-abs(a[i].y-a[p].y));\n            p++;\n        }\n        if(ans>1) {puts(\"-1\");return 0;}\n    }\n    if(ans) printf(\"%d\\n\",f);else puts(\"0\");\n    return 0;\n}\n```",
        "postTime": 1507508996,
        "uid": 48967,
        "name": "\u5948\u8299\u83b2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]\u65b9\u5757\u91cd\u53e0Square Overlap\u3011"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u662f\u6c34\u6bcd\u54e5\uff0c\u4eca\u5929\u6211\u4e3a\u5927\u5bb6\u5e26\u6765 P2202 \u7684\u4e00\u7bc7\u4e25\u683c\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9898\u89e3\u3002\n\n\u636e\u524d\u9762\u7684\u5927\u4f6c\u4eec\u6240\u8bf4\uff0c\u8fd9\u9053\u9898\u7684\u6b63\u89e3\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\u5c06\u6bcf\u4e2a\u5750\u6807\u6309 x \u6392\u5e8f\uff0c\u7136\u540e\u627e\u5230 x \u5728\u8303\u56f4\u5185\u7684\u533a\u95f4\uff0c\u518d\u627e\u5230\u8fd9\u6bb5\u533a\u95f4\u4e2d\u627e\u5230 y \u6700\u8fd1\u7684\u5750\u6807\uff0c\u6700\u7ec8\u5224\u65ad\u662f\u5426\u91cd\u5408\u3002\n\n\u73b0\u5728\u9700\u8981\u4e00\u4e2a\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff1a\u80fd\u5feb\u901f\u5220\u9664\u8fc7\u65f6\uff08\u4e0e\u76ee\u524d x \u8ddd\u79bb >= k\uff09\u8282\u70b9\uff1b\u80fd\u5feb\u901f\u6dfb\u52a0\u65b0\u8282\u70b9\uff1b\u80fd\u5feb\u901f\u627e\u5230\u79bb\u8be5\u8282\u70b9\u6700\u8fd1\u7684\u8282\u70b9\u3002\n\n\u7136\u800c\u201c\u627e\u5230\u6700\u8fd1\u201d\u8fd9\u4e2a\u64cd\u4f5c\u5927\u591a\u6570\u4eba\u7528 set \u6216 \u624b\u5199\u5e73\u8861\u6811\u5b9e\u73b0\u3002\u4e2a\u4eba\u5341\u5206\u538c\u6076 STL\uff0c\u4e14\u5f88\u61d2\uff0c\u4e0d\u60f3\u5199\u5e73\u8861\u6811\u3002\u6240\u4ee5\u6211\u82e6\u601d\u51a5\u60f3\uff0c\u60f3\u5230\u4e86\u4e00\u4e2a\u5b9e\u73b0\u7b80\u5355\u7684\u3001\u590d\u6742\u5ea6\u66f4\u4f18\u79c0\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u52a0\u5165\u65b0\u7ed3\u70b9\u5c31\u5728\u8868\u672b\u5c3e\u6dfb\u52a0\u3002\u8fd9\u6837\u7531\u4e8e\u6dfb\u52a0\u65f6\u95f4\u662f\u5355\u8c03\u7684\uff0c\u5220\u9664\u8fc7\u65f6\u8282\u70b9\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u6700\u524d\u8fde\u7eed\u7684\u4e00\u6bb5\u5b9e\u73b0\u3002\n\n\u7b2c\u4e09\u79cd\u64cd\u4f5c\u7684\u8bdd\uff0c\u8003\u8651\u5c06\u94fe\u8868\u5206\u5757\uff0c\u4e00\u5757\u5927\u5c0f\u4e3a k\uff0c\u7528\u90bb\u63a5\u8868\u7684\u65b9\u5f0f\u5b9e\u73b0\u5206\u5757\uff0chead \u8868\u793a\u5757\u7684\u7f16\u53f7\u3002\u5047\u5982\u4e24\u4e2a\u8282\u70b9\u5728\u4e00\u5757\u4e2d\uff0c\u90a3\u4e48\u4e8c\u8005\u4e00\u5b9a\u5408\u6cd5\uff08\u5dee\u503c < k\uff09\uff1b\u4e24\u4e2a\u8282\u70b9\u5728\u76f8\u90bb\u7684\u5757\u4e2d\uff0c\u90a3\u4e48\u4e8c\u8005\u53ef\u80fd\u5408\u6cd5\uff1b\u82e5\u4e0d\u662f\u4ee5\u4e0a\u4e24\u8005\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u4f1a\u5408\u6cd5\uff08\u4e2d\u95f4\u81f3\u5c11\u9694\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a k \u7684\u5757\uff09\uff0c\u90a3\u4e48\u5728\u641c\u7d22\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u5408\u6cd5\u8282\u70b9\uff0c\u53ea\u9700\u8981\u67e5\u627e\u672c\u8eab\u6240\u5728\u5757\u4e8e\u76f8\u90bb\u4e24\u4e2a\u5757\u3002\n\n\u63a5\u4e0b\u6765\u662f\u7ebf\u6027\u590d\u6742\u5ea6\u7684\u8bc1\u660e\uff1a\n\n\u6bcf\u4e2a\u8282\u70b9\u5220\u9664\u540e\u4e0d\u4f1a\u518d\u6dfb\u52a0\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u5220\u9664\u4e00\u6b21\uff0cn \u4e2a\u8282\u70b9\u5220\u9664 n \u6b21\uff0c\u94fe\u8868\u5220\u9664\u662f $\\Theta(1)$ \u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u90e8\u5206\u662f$\\Theta(n)$\u7684\u3002\n\n\u5bf9\u4e8e\u672a\u5220\u9664\u7684\u8282\u70b9\uff0c\u4e00\u4e2a\u5757\u4e2d\u4e0d\u4f1a\u51fa\u73b0 3 \u4e2a\u4ee5\u4e0a\u8282\u70b9\uff0c\u6240\u4ee5\u641c\u7d22\u4e00\u4e2a\u5757\u4e2d\u6240\u6709\u672a\u5220\u9664\u7684\u70b9\u662f $\\Theta(1)$ \u7684\u3002\u641c\u7d22\u4e00\u4e2a\u8282\u70b9\u65f6\u904d\u5386\u4e86 3 \u4e2a\u5757\uff0c\u603b\u5171\u904d\u5386 n \u6b21\uff0c\u6240\u4ee5\u904d\u5386\u672a\u5220\u9664\u8282\u70b9\u662f$\\Theta(n)$\u7684\u3002\n\n\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u5927\u6982\u957f\u8fd9\u6837\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/2l0vvr03.png)\n\n\u53ea\u5269\u4e0b\u6392\u5e8f\u4e86\u3002\u7531\u4e8e\u662f\u6570\u503c\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u5373\u53ef\u3002\u57fa\u6570\u6392\u5e8f\u662f\u7ebf\u6027\u7684\u3002\n\n\u7efc\u4e0a\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u662f\u7ebf\u6027\u7684\u3002\n\n\u7531\u4e8e\u662f\u7ebf\u6027\u7684\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u6beb\u65e0\u538b\u529b\u5730\u62ff\u5230\u4e86 2021 \u5e74 10 \u6708 16 \u65e5\u7684\u6700\u4f18\u89e3\uff0867ms,\u52a0\u4e0a\u5feb\u8bfb\u8fbe\u5230\u4e86\u60ca\u4eba\u7684 39ms)\u3002\n\n\u524d\u9762\u8bf4\u5f97\u6709\u4ebf\u4e9b\u6666\u6da9\u96be\u61c2\uff0c\u6240\u4ee5\u770b\u4e00\u4e0b\u4ee3\u7801\u5427\u3002\n\n```c\n#include <stdio.h>\n#include <string.h>\n\n// Consts\n\n#define RN 50005\n\n// Defs\n\ntypedef struct\n{\n    int x, y, nxt;\n}\nDots;\n\n// Utility\n\n#define ABS(x) ((x) > 0 ? (x) : -(x))\n\n// Sort\n\nunsigned _bu[256];\n\n#define SORTBYTE(TYPE, PART, FR, TO, BIT, LEN, NEG) \\\n{ \\\n    memset(_bu, 0, sizeof(_bu)); \\\n    \\\n    for (TYPE *it = (FR) + (LEN); it != (FR); it--) \\\n    { \\\n        ++_bu[((it[-1]PART >> BIT) + (NEG ? 128 : 0)) & 255]; \\\n    } \\\n    for (unsigned *it = _bu; it != _bu + 255; it++) \\\n    { \\\n        it[1] += it[0]; \\\n    } \\\n    for (TYPE *it = (FR) + (LEN); it != (FR); it--) \\\n    { \\\n        (TO)[--_bu[((it[-1]PART >> BIT) + (NEG ? 128 : 0)) & 255]] = it[-1]; \\\n    } \\\n}\n// \u57fa\u6570\u6392\u5e8f\u6a21\u677f\uff0c\u53ef\u4ee5\u901a\u8fc7 WC 2017 \u6311\u6218\u3002\n// \u5168\u90e8\u5b8f\u5b9a\u4e49\u662f\u4e3a\u4e86\u5b9e\u73b0\u6cdb\u578b\u3002\n\nDots all[RN], all2[RN];\n\n// Main\n\nint head[2000005];\nint n, k;\n\nstatic inline int getblock(int x)\n{ // x \u5bf9\u5e94\u5757\u7f16\u53f7\u3002\n    return (x + 1000000) / k + 1;\n}\n\nint main(void)\n{\n    scanf(\"%d%d\", &n, &k);\n    \n    for (int i = 1; i <= n; i++)\n    {\n        scanf(\"%d%d\", &all[i].x, &all[i].y);\n    }\n    // \u4e0d\u8981\u5bb3\u6015\uff0c\u8fd9\u662f\u6392\u5e8f\n    SORTBYTE(Dots, .x, all + 1, all2 + 1, 0, n, 0);\n    SORTBYTE(Dots, .x, all2 + 1, all + 1, 8, n, 0);\n    SORTBYTE(Dots, .x, all + 1, all2 + 1, 16, n, 0);\n    SORTBYTE(Dots, .x, all2 + 1, all + 1, 24, n, 1);\n    \n    int flag = 0;\n    long long ans;\n    \n    for (int i = 1; i <= n; i++)\n    {\n        int bl = getblock(all[i].y);\n        \n        for (int bi = bl - 1; bi <= bl + 1; bi++)\n        { // \u904d\u5386\u524d\u4e00\u4e2a\u5757\u3001\u81ea\u8eab\u6240\u5728\u5757\u4e0e\u540e\u4e00\u4e2a\u5757\u3002\n            for (int j = head[bi], pre = 0; j; pre = j, j = all[j].nxt)\n            {\n                if (all[j].x + k <= all[i].x)\n                { // \u5220\u9664\u8fc7\u65f6\u6b63\u65b9\u5f62\u3002\n                    if (pre)\n                        all[pre].nxt = all[j].nxt;\n                    else\n                        head[bi] = all[j].nxt;\n                    continue;\n                }\n                if (ABS(all[j].y - all[i].y) < k)\n                { // \u627e\u5230\u5408\u6cd5\u6b63\u65b9\u5f62\u3002\n                    if (flag)\n                    {\n                        printf(\"-1\\n\");\n                        return 0;\n                    }\n                    flag = 1;\n                    ans = 1ll * (k - ABS(all[i].x - all[j].x))\n                              * (k - ABS(all[i].y - all[j].y));\n                }\n                if (bi == bl)\n                { // \u6dfb\u52a0\u672c\u8eab\u3002\n                    all[j].nxt = i;\n                    break;\n                }\n            }\n        }\n        if (!head[bl])\n        { // \u6dfb\u52a0\u672c\u8eab\n            head[bl] = i;\n        }\n    }\n    \n    if (flag)\n    {\n        printf(\"%lld\\n\", ans);\n    }\n    else\n    {\n        printf(\"0\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1634395124,
        "uid": 52381,
        "name": "CodingJellyfish",
        "ccfLevel": 6,
        "title": "P2202 \u4e25\u683c\u7ebf\u6027\u505a\u6cd5"
    },
    {
        "content": "[[USACO13JAN] Square Overlap S](/problem/P2202)\n\n---\n\n### \u5f31\u5316\u7248\u672c\n\n\u5047\u5982\u7ed9\u5b9a $n$ \u6761\u957f\u5ea6\u4e3a $k$ \u7684\u7ebf\u6bb5\uff0c\u95ee\u6709\u51e0\u7ec4\u91cd\u53e0\uff0c\u600e\u4e48\u505a\uff1f\n\n\u6392\u5e8f\uff0c\u679a\u4e3e $1\\cdots n$\uff0c\u5bf9\u4e8e\u7b2c $i$ \u4f4d\uff0c\u770b $i$ \u4e0e $i+1$\uff0c$i$ \u4e0e $i-1$ \u6784\u4e0d\u6784\u6210\u91cd\u53e0\uff0c\u6700\u540e\u7b54\u6848 ${}\\div 2$\uff08\u56e0\u4e3a\u6bcf\u4e00\u5bf9\u90fd\u4f1a\u88ab\u7b97\u4e24\u6b21\uff09\u3002\n\n\u8fd9\u4e2a\u601d\u8def\u5982\u679c\u5e94\u7528\u5230\u4e8c\u7ef4\uff0c\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a\u70b9 $i+1$ \u7684 $x$ \u5750\u6807\u4e0e\u70b9 $i$ \u7684 $x$ \u5750\u6807\u76f8\u7b49\uff0c\u4f46\u662f $y$ \u5750\u6807\u76f8\u5dee\u5f88\u5927\uff0c\u8fd9\u6837\u5c31\u4e0d\u884c\u4e86\u3002\n\n---\n### \u6b63\u89e3\n\n\u770b\u6807\u7b7e\uff0c\u8003\u8651\u5e73\u8861\u6811\u3002\u8fd8\u662f\u5148\u6392\u5e8f\uff0c\u5bf9\u4e8e $y$ \u5750\u6807\u5efa\u5e73\u8861\u6811\uff0c\u7b2c $i$ \u8f6e\uff0c\u653e\u5165\u6240\u6709\u5355\u770b $x$ \u5750\u6807\u53ef\u80fd\u4e0e $i$ \u7684\u6b63\u65b9\u5f62\u91cd\u53e0\u7684\u70b9\u7684 $y$ \u5750\u6807\uff0c\u67e5\u627e\u70b9 $i$ \u7684 $y$ \u5750\u6807\u5728\u5e73\u8861\u6811\u91cc\u7684\u524d\u9a71\uff0c\u540e\u7ee7\u3002\u6bcf\u4e00\u5bf9\u70b9\u90fd\u4f1a\u88ab\u67e5\u627e $2$ \u6b21\uff0c\u6700\u540e\u5224\u65ad\u7684\u65f6\u5019\u8981\u6ce8\u610f\u3002\n\n\u90a3\u5982\u4f55\u628a\u8fd9\u4e9b\u70b9\u653e\u8fdb\u5e73\u8861\u6811\u5462\uff1f\u4e0d\u96be\u53d1\u73b0\u6bcf\u6b21\u8981\u653e\u8fdb\u5e73\u8861\u6811\u7684\u70b9\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u800c\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u6bcf\u4e00\u8f6e\u90fd\u662f\u9012\u589e\u7684\uff0c\u53ef\u4ee5\u8bb0\u5f55\u4e3a $l,r$ \u653e\u5728\u5faa\u73af\u5916\u9762\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u4f1a\u4ece $1\\cdots n$\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u662f **\u5747\u644a $\\mathcal O(1)$**\u3002\n\n---\n\n### \u6b63\u786e\u6027\u8bc1\u660e\n\n\u4e3a\u4ec0\u4e48\u53ea\u7528\u67e5 $1$ \u6b21\u524d\u9a71\u3001\u540e\u7ee7\u5462\uff1f\u8bbe\u70b9 $i$ \u7684\u540e\u7ee7\u662f $j$\uff0c\u70b9 $k$ \u7684\u6b63\u65b9\u5f62\u4f1a\u4e0e\u70b9 $i$ \u7684\u6b63\u65b9\u5f62\u91cd\u53e0\uff0c\u4f46 $k$ \u4e0d\u662f $i$ \u7684\u540e\u7ee7\u3002\n\n\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u67e5\u627e\u5230\u70b9\u5bf9 $(i,j),(k,i)$\uff0c\u4ee5\u53ca $(j,i)$ \uff08\u5982\u679c $k$ \u7684 $y$ \u5750\u6807\u6bd4 $i$ \u79bb $j$ \u66f4\u8fd1\uff0c\u4f1a\u67e5\u627e\u5230 $(j,k)$\uff09\n\n\u90a3\u4e48\uff0c\u4f1a\u627e\u5230 $3$ \u5bf9\u70b9\u3002$2$ \u5bf9\u70b9\u53ef\u4ee5\u8bf4\u660e\u6709\u4e00\u4e2a\u7b26\u5408\u7684\u70b9\u5bf9\uff0c\u800c $3\\gt 2$\uff0c\u8bf4\u660e\u81f3\u5c11\u6709\u4e24\u4e2a\u7b26\u5408\u7684\u70b9\u5bf9\u3002\n\n---\n\n### \u4ee3\u7801\n\n\u5e73\u8861\u6811\uff0c\u597d\u50cf\u6709\u4e9b\u4eba\u7528 `set`\uff0c\u6211\u5199\u7684\u662f FHQ-Treap\u3002\n\n\u5982\u679c\u786e\u5b9a\u4e24\u7ec4\u6b63\u65b9\u5f62\u6709\u91cd\u53e0\uff0c\u91cd\u53e0\u9762\u79ef $=\\operatorname{abs}(k-\\operatorname{abs}(x_1-x_2))\\times\\operatorname{abs}(k-\\operatorname{abs}(y_1-y_2))$\n\n```cpp\n// author: One_Zzz\n#include<stdio.h>\n#include<stdlib.h>\n#include<algorithm>\nconst int maxn = 5e5 + 1;\nconst int inf = 0x7F114514;\nconst int& min2(const int& a,const int& b){\n\treturn a < b ? a : b;\n}\ninline int abs2(int x){ // \u624b\u5199\u7384\u5b66\u63d0\u901f\n\treturn x > 0 ? x : -x;\n}\nint lc[maxn],rc[maxn],val[maxn],valx[maxn],heap[maxn],siz[maxn],cnt = 0,rt; \n// FHQ-Treap\uff0cval\u8bb0\u5f55y\u5750\u6807\uff0cvalx\u662fx\u5750\u6807\uff08\u5e73\u8861\u6811\u91cc\u4e0d\u7528\uff0c\u4f46\u662f\u6c42\u524d\u9a71\u540e\u7ee7\u65f6\u8981\u7528\nint new_node(int x,int y){\n\tsiz[++cnt] = 1;\n\tval[cnt] = y;\n\tvalx[cnt] = x; // \u4e00\u5e76\u8bb0\u5f55x\u5750\u6807\n\theap[cnt] = rand();\n\treturn cnt;\n} \nvoid push_up(int i){\n\tsiz[i] = 1 + siz[lc[i]] + siz[rc[i]];\n}\nint merge(int x,int y){\n\tif(!x || !y) return x + y;\n\tif(heap[x] < heap[y]){\n\t\trc[x] = merge(rc[x],y);\n\t\tpush_up(x);\n\t\treturn x;\n\t} else {\n\t\tlc[y] = merge(x,lc[y]);\n\t\tpush_up(y);\n\t\treturn y;\n\t}\n}\nvoid split(int i,int k,int& x,int& y){\n\tif(!i) x = y = 0;\n\telse {\n\t\tif(val[i] <= k){\n\t\t\tx = i;\n\t\t\tsplit(rc[i],k,rc[i],y);\n\t\t} else {\n\t\t\ty = i;\n\t\t\tsplit(lc[i],k,x,lc[i]);\n\t\t}\n\t\tpush_up(i);\n\t}\n}\nint kth(int i,int k){\n\tfor(;;){\n\t\tif(k <= siz[lc[i]]) i = lc[i];\n\t\telse if(k == siz[lc[i]] + 1) return i;\n\t\telse {\n\t\t\tk -= siz[lc[i]] + 1;\n\t\t\ti = rc[i];\n\t\t}\n\t}\n}\nvoid insert(int px,int py){\n\tint x,y;\n\tsplit(rt,py,x,y);// \u7528\u7684\u662fy\uff0c\u4f46\u662f\u8981\u8bb0\u5f55x\n\trt = merge(merge(x,new_node(px,py)),y); \n}\nvoid erase(int n){\n\tint x,y,z;\n\tsplit(rt,n,x,z);\n\tsplit(x,n - 1,x,y);\n\ty = merge(lc[y],rc[y]);\n\trt = merge(merge(x,y),z);\n}\nint prv(int n){\n\tint x,y;\n\tsplit(rt,n - 1,x,y);\n\tint ret = kth(x,siz[x]); // \u8fd4\u56de\u7684\u662f\u4e0b\u6807\uff0c\u56e0\u4e3a\u540c\u65f6\u8981\u77e5\u9053y\u5750\u6807\u79bb\u70b9i\u6700\u8fd1\u7684\u70b9\u7684x\u548cy\u5750\u6807\n\trt = merge(x,y);\n\treturn ret; // \u8fd4\u56de\u4e0b\u6807\u53ef\u4ee5\u7528valx[prv(n)]\u77e5\u9053n\u7684\u524d\u9a71\u7684x\u5750\u6807\n}\nint nxt(int n){\n\tint x,y;\n\tsplit(rt,n,x,y);\n\tint ret = kth(y,1); // Cu prv\n\trt = merge(x,y);\n\treturn ret;\n}\nstruct point{\n\tint x,y;\n\tbool operator<(const point& p) const{\n\t\treturn x != p.x ? x < p.x : y < p.y;// \u6392\u5e8f\u3002x\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0cy\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\n\t} \n} q[maxn];\nint main(){\n\tint n,k;\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i = 1;i <= n;++i) scanf(\"%d%d\",&q[i].x,&q[i].y);\n\tstd::sort(q + 1,q + n + 1);\n\tinsert(-inf,-inf); // \u5148\u52a0\u4e24\u4e2a\u70b9\uff0c\u907f\u514d\u67e5\u8be2\u524d\u9a71\u540e\u7ee7\u65f6\u51fa\u9519\n\tinsert(inf,inf); \n\tint l = 1,r = 0,num = 0,ans;\n\tfor(int i = 1;i <= n;++i){\n\t\tint lx = q[i].x - k,rx = q[i].x + k;\n\t\tfor(;q[r + 1].x < rx && r + 1 <= n;++r) insert(q[r + 1].x,q[r + 1].y); // \u6dfb\u52a0\u4ece\u4e0a\u4e00\u6b21\u7684r\u5230\u8fd9\u6b21\u7684\u53f3\u8fb9\u754c\n\t\tfor(;q[l].x <= lx && l <= n;++l) erase(q[l].y); // \u5220\u9664\u4ece\u4e0a\u4e00\u6b21\u7684l\u5230\u8fd9\u6b21\u7684\u5de6\u8fb9\u754c\n\t\t// \u5220\u9664->\u6dfb\u52a0 \u987a\u5e8f\u4e0d\u80fd\u4e71\n\t\tint pv = prv(q[i].y),nx = nxt(q[i].y);\n\t\tif(abs2(q[i].y - val[pv]) < k && abs2(q[i].x - valx[pv]) < k){ // \u770b\u524d\u9a71\n\t\t\t++num; // \u51fa\u73b0\u6b21\u6570\u52a0\u4e00\n\t\t\tans = abs2(k - abs2(q[i].x - valx[pv])) * abs2(k - abs2(q[i].y - val[pv]));\n\t\t}\n\t\tif(abs2(q[i].y - val[nx]) < k && abs2(q[i].x - valx[nx]) < k){ // \u770b\u540e\u7ee7\n\t\t\t++num;\n\t\t\tans = abs2(k - abs2(q[i].x - valx[nx])) * abs2(k - abs2(q[i].y - val[nx]));\n\t\t}\n\t\tif(num >= 4) break; // \u8981\u4e582\n\t}\n\tif(num == 0) printf(\"0\\n\");\n\telse if(num == 2) printf(\"%d\\n\",ans); // \u90fd\u8981\u4e582\n\telse printf(\"-1\\n\"); \n\treturn 0;\n}\n```",
        "postTime": 1627805303,
        "uid": 368107,
        "name": "xfrvq",
        "ccfLevel": 7,
        "title": "\u9898\u89e3-P2202"
    },
    {
        "content": "\u84dd\u9898\u5417\uff1f\u53ef\u80fd\u4e0d\u90a3\u4e48\u96be\u3002\n\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230\u5bf9\u4e8e\u70b9 $i$ \u548c $l$ \uff0c\u5982\u679c $abs(l_x-i_x)<k$ \u5e76\u4e14 $abs(l_y-i_y)<k$ \uff0c\u8fd9\u4e24\u4e2a\u77e9\u5f62\u5c31\u4f1a\u6709\u91cd\u53e0\uff0c\u91cd\u53e0\u9762\u79ef\u4e3a $abs(k-abs(i_x-l_x))\\times abs(k-abs(i_y-l_y))$ \u3002\n\n\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u8ba1\u7b97\u91cd\u53e0\u7684\u6b21\u6570\u7279\u5224\u5373\u53ef\u3002\n\n\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \uff0c\u4e0d![](https://cdn.luogu.com.cn/upload/image_hosting/51d80tin.png)\u624d\u602a\u3002\n\n\u8003\u8651\u5229\u7528\u5355\u8c03\u6027\uff0c\u6309 $x$ \u503c\u6392\u5e8f\uff0c\u5bf9\u4e8e\u70b9 $i$ \uff0c\u679a\u4e3e\u70b9 $l$ \uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a $O(nlog_2n)$ \u3002\n\n\u559c\u95fb\u4e50\u89c1\u7684\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct node{\n\tint x,y;\n} pos[50001];\nint n,k,num,ans;\nbool cmp(node x,node y)\n{\n\treturn x.x<=y.x;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&pos[i].x,&pos[i].y);\n\tsort(pos+1,pos+1+n,cmp);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint l=i+1;\n\t\twhile(l<=n&&abs(pos[l].x-pos[i].x)<k)\n\t\t{\n\t\t\tif(abs(pos[l].y-pos[i].y)<k)\n\t\t\t{\n\t\t\t\tnum++;\n\t\t\t\tif(num==2)\n\t\t\t\t{\n\t\t\t\t\tputs(\"-1\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tans=abs(k-abs(pos[i].x-pos[l].x))*abs(k-abs(pos[i].y-pos[l].y));\n\t\t\t}\n\t\t\tl++;\n\t\t}\n\t}\n\tif(num)\n\t\tcout<<ans;\n\tif(num==0)\n\t\tputs(\"0\");\n\treturn 0;\n}\n```\n",
        "postTime": 1594457469,
        "uid": 240812,
        "name": "45dino",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]Square Overlap S\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\uff0c\u82e5\u4e24\u4e2a\u6b63\u65b9\u5f62\u91cd\u53e0\uff0c\u5219\u4e24\u4e2a\u6b63\u65b9\u5f62\u7684\u5750\u6807 $(x_i,y_i),(x_j,y_j)$ \u6ee1\u8db3 $|x_i-x_j|<k$ \u4e14 $|y_i-y_j|<k$\uff0c\u91cd\u53e0\u7684\u9762\u79ef\u4e3a $|k-(x_i-x_j)|\\times|k-(y_i-y_j)|$\u3002\n\n\u7785\u4e86\u773c\u6807\u7b7e\uff0c\u53d1\u73b0\u6709\u5e73\u8861\u6811\uff0c\u6211\u4eec\u8003\u8651\u5982\u4f55\u8fd0\u7528\u3002\u663e\u7136\uff0c\u6211\u4eec\u5e94\u5f53\u5148\u5bf9 $x$ \u5750\u6807\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u6839\u636e $y$ \u5750\u6807\u5efa\u5e73\u8861\u6811\u3002\u63a5\u4e0b\u6765\u5bf9\u4e8e\u7b2c $i$ \u8f6e\uff0c\u6211\u4eec\u90fd\u63d2\u5165\u53ea\u770b $x$ \u5750\u6807\u6709\u53ef\u80fd\u4e0e\u70b9 $i$ \u6240\u5728\u6b63\u65b9\u5f62\u91cd\u53e0\u7684\u6b63\u65b9\u5f62\u7684 $y$ \u5750\u6807\uff0c\u63a5\u4e0b\u6765\u5c31\u67e5\u627e\u70b9 $i$ \u7684 $y$ \u5750\u6807\u5728\u5e73\u8861\u6811\u91cc\u7684\u524d\u9a71\u548c\u540e\u7ee7\u3002\n\n\u90a3\u4e48\u5982\u4f55\u5c06\u70b9\u63d2\u5165\u5e73\u8861\u6811\u5462\uff1f\u5bf9 $x$ \u5750\u6807\u6392\u5e8f\u540e\uff0c\u6570\u5217\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u9700\u8981\u63d2\u5165\u7684\u90fd\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u4e14\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u90fd\u4f1a\u9012\u589e\u3002\u6bcf\u8f6e\u90fd\u66b4\u529b\u63d2\u5165\u4e00\u6b21\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u591f\u4f18\u79c0\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u6b21\u7684\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u8bb0\u4e3a $l,r$\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u5220\u6389\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\uff0c\u518d\u63d2\u5165\u5f53\u524d\u70b9\u3002\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5355\u8c03\u961f\u5217\uff0c\u8fd9\u6837\u6bcf\u4e2a\u70b9\u90fd\u53ea\u4f1a\u88ab\u63d2\u5165 $1$ \u6b21\u3002\n\n## \u4ee3\u7801\n\n\u8fd9\u91cc\u6211\u7528\u7684\u662f\u4f38\u5c55\u6811\u3002\n\n```\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int N=5000000;\nstruct Node{\n\tll x,y;\n\tll ch[2];\n\tll f,cnt,son,val;\n}a[N],t[N];\nll n,k,tot,ans,root,final,l=1;\ninline void read(ll &x) {\n    x=0;\n    register ll f=1;\n    register char c=getchar();\n    while(c<'0'||c>'9') {\n        if(c=='-') f=-1;\n        c=getchar();\n    }\n    while (c>='0'&&c<='9')\n        x=(x<<3)+(x<<1)+c-'0',c=getchar();\n    x*=f;\n}\nvoid push_up(ll x){\n\tt[x].son=t[t[x].ch[0]].son+t[t[x].ch[1]].son+t[x].cnt;\n}\nvoid rotate(ll x){\n\tll y=t[x].f;\n\tll z=t[y].f;\n\tll k=(t[y].ch[1]==x);\n\tt[z].ch[t[z].ch[1]==y]=x;t[x].f=z;\n\tt[y].ch[k]=t[x].ch[k^1];t[t[x].ch[k^1]].f=y;\n\tt[x].ch[k^1]=y;t[y].f=x;\n\tpush_up(y);push_up(x);\n}\nvoid Splay(ll x,ll goal){\n\tif(x==goal)return;\n\twhile(t[x].f!=goal){\n\t\tll y=t[x].f;\n\t\tll z=t[y].f;\n\t\tif(z!=goal){\n\t\t\t(t[z].ch[0]==y)^(t[y].ch[0]==x)?rotate(x):rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(!goal){\n\t\troot=x;\n\t}\n}\nvoid insert(ll x){\n\tll u=root,ff=0;\n\twhile(u&&t[u].val!=x){\n\t\tff=u;\n\t\tu=t[u].ch[t[u].val<x];\n\t}\n\tif(u){\n\t\tt[u].cnt++;\n\t}\n\telse{\n\t\tu=++tot;\n\t\tif(ff){\n\t\t\tt[ff].ch[t[ff].val<x]=u;\n\t\t}\n\t\tt[u].son=t[u].cnt=1;\n\t\tt[u].f=ff;t[u].val=x;\n\t}\n\tSplay(u,0);\n}\nvoid find(ll x){\n\tll u=root;\n\tif(!u)return;\n\twhile(t[u].val!=x&&t[u].ch[t[u].val<x]){\n\t\tu=t[u].ch[t[u].val<x];\n\t}\n\tSplay(u,0);\n}\nll next(ll x,ll f){\n\tfind(x);\n\tll u=root;\n\tif(t[x].cnt>1)return root;\n\tu=t[u].ch[f];\n\twhile(t[u].ch[f^1])u=t[u].ch[f^1];\n\treturn u;\n}\nvoid _delete(ll x){\n\tll first=next(x,0);\n\tll last=next(x,1);\n\tSplay(first,0);Splay(last,first);\n\tll del=t[last].ch[0];\n\tif(t[del].cnt>1){\n\t\tt[del].cnt--;Splay(del,0);\n\t}\n\telse{\n\t\tt[last].ch[0]=0;\n\t}\n}\nbool cmp(Node x,Node y){\n\tif(x.x!=y.x)return x.x<y.x;\n\treturn x.y<y.y;\n}\nint main(){\n\t//freopen(\"P2202_2.in\",\"r\",stdin);\n\tread(n);read(k);\n\tinsert(-1145141999);\n\tinsert(1145141999);//\u63d2\u5165\u865a\u8282\u70b9\n\tfor(int i=1;i<=n;i++)read(a[i].x),read(a[i].y);\n\tsort(a+1,a+1+n,cmp);\n\tinsert(a[1].y);\n\tfor(int r=2;r<=n;r++){\n\t\twhile(l<r&&a[r].x-a[l].x>=k){\n\t\t\t_delete(a[l].y);\n\t\t\tl++;\n\t\t}\n\t\tinsert(a[r].y);\n\t\tll first=next(a[r].y,0)-2;\n\t\tll last=next(a[r].y,1)-2;\n\t//\t_delete(a[r].y);\n\t\t//cout<<first<<\" \"<<a[r].y<<\" \"<<last<<endl;\n\t\tif(first>0&&abs(a[first].y-a[r].y)<k){\n\t\t\tans++;\n\t\t\tif(ans==2){\n\t\t\t\tputs(\"-1\");return 0;\n\t\t\t}\n\t\t\telse if(ans==1){\n\t\t\t\tfinal=abs(k-abs(a[first].x-a[r].x))*abs(k-abs(a[first].y-a[r].y));\n\t\t\t}\n\t\t}\n\t\tif(last>0&&abs(a[last].y-a[r].y)<k){\n\t\t\tans++;\n\t\t\tif(ans==2){\n\t\t\t\tputs(\"-1\");return 0;\n\t\t\t}\n\t\t\telse if(ans==1){\n\t\t\t\tfinal=abs(k-abs(a[last].x-a[r].x))*abs(k-abs(a[last].y-a[r].y));\n\t\t\t}\n\t\t}\n\t\t//cout<<final<<\" \"<<a[r].y<<endl;\n\t}\n\tprintf(\"%lld\\n\",final);\n\treturn 0;\n}\n```\n",
        "postTime": 1659868626,
        "uid": 356925,
        "name": "\u5feb\u6597\u6e38\u9e7f",
        "ccfLevel": 4,
        "title": "P2202\u9898\u89e3"
    },
    {
        "content": "### Preface\n\n\u7b80\u6d01\u6613\u61c2\u7684 $O(n)$ \u89e3\u6cd5\uff01\uff08\u6700\u6162\u70b9 81ms\uff09\n\n\u601d\u8def\u7c7b\u4f3c\u4e8e [P7883 \u5e73\u9762\u6700\u8fd1\u70b9\u5bf9\uff08\u52a0\u5f3a\u52a0\u5f3a\u7248\uff09](https://www.luogu.com.cn/problem/P7883)\uff0c\u53ef\u4ee5\u5148\u505a\u4e00\u4e0b\u3002\n\n### Analysis\n\n\u4e24\u4e2a\u6b63\u65b9\u5f62\u91cd\u53e0 $\\iff$ \u4e24\u4e2a\u4e2d\u5fc3\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb $<K$\u3002\n\n\u6211\u4eec\u5c06\u6574\u4e2a\u5e73\u9762\u5212\u5206\u6210 $K\\times K$ \u7684\u65e0\u6570\u4e2a\uff08\u5b9e\u9645\u7528\u5230\u7684\u6700\u591a $n$ \u4e2a\uff09\u6b63\u65b9\u5f62\uff0c\u79f0\u4e3a Block\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u65b9\u5f62\uff08\u5176\u4e2d\u5fc3\u5728 Block x\uff09\uff0c\u4e0e\u5979\u91cd\u53e0\u7684\u6b63\u65b9\u5f62\u5fc5\u7136\u6ee1\u8db3\u4e2d\u5fc3 Block \u4e3a Block x \u5468\u56f4\u7684 $9$ \u4e2a Block \u4e2d\u3002\n\n\u8003\u8651\u5c06\u4e2d\u5fc3\u70b9\u4e00\u4e2a\u4e00\u4e2a\u653e\u5165\u5e73\u9762\u5bf9\u5e94\u7684 Block \u4e2d\uff0c\u5e76\u904d\u5386\u5468\u56f4 $9$ \u4e2a Block \u4e2d\u7684\u4e2d\u5fc3\u70b9\uff0c\u5224\u65ad\u662f\u5426\u91cd\u53e0\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bc1\u660e\uff1a\n\n\u524d\u9762 Block \u6807\u53f7\u7528 Hash\uff0c\u6240\u4ee5\u4e0d\u5e26 $\\log$\u3002\uff08\u6211\u7528\u7684 `unordered_map` \u53ef\u80fd\u8f83\u6162\uff09\n\n\u7531\u4e8e\u6211\u4eec\u9047\u5230 $\\ge2$ \u5bf9\u91cd\u53e0\u65f6\u5c31\u505c\u6b62\u7b97\u6cd5\uff0c\u6240\u4ee5\u5728\u4efb\u610f\u65f6\u523b\u6700\u591a\u6709\u4e00\u5bf9\u91cd\u53e0\u7684\u6b63\u65b9\u5f62\u3002\u663e\u7136\u6bcf\u4e2a\u70b9\u5224\u65ad\u65f6 $9$ \u4e2a Block \u91cc\u4e2d\u5fc3\u70b9\u7684\u4e2a\u6570\u662f $O(1)$ \u7684\uff0c\u4e8e\u662f\u603b\u65f6\u95f4 $O(n)$\u3002\n\n### Details\n\n\u8bb0\u5f97\u8bfb\u5165\u65f6\u5c06\u5750\u6807\u504f\u79fb\u4e00\u4e0b\uff0c\u4ee5\u514d\u8d1f\u6570\u9664\u6cd5\u7684\u95ee\u9898\u3002\n\n\u5bf9\u4e8e\u6682\u65f6\u6ca1\u6709\u4e2d\u5fc3\u70b9\u5b58\u5165\u7684 Block\uff0c\u6682\u65f6\u4e0d\u6807\u53f7\uff0c\u8282\u7701\u7a7a\u95f4\u3002\n\n### Code\n\n[Link](https://www.luogu.com.cn/record/67669477)\n\n\u5934\u6587\u4ef6 + \u5feb\u8bfb\u6bd4\u8f83\u957f\uff0c\u5176\u5b9e\u4e3b\u4f53\u8fd8\u77ed\u7684\u3002\n\n```cpp\n//Said no more counting dollars. We'll be counting stars.\n#include<bits/stdc++.h>\nusing namespace std;\n#define fir first\n#define sec second\n#define mkp make_pair\n#define pb emplace_back\n#define For(i,j,k) for(int i=j;i<=k;i++)\n#define Rof(i,j,k) for(int i=j;i>=k;i--)\n#define gc getchar\n#define pc putchar\ninline int read(){\n\tint x=0;char c=gc();bool f=0;\n\twhile(!isdigit(c)){if(c=='-')f=1;c=gc();}\n\twhile(isdigit(c)){x=(x<<3)+(x<<1)+c-48;c=gc();}\n\tif(f)x=-x;return x;\n}\n#define N 50500\n#define base 3000000\n#define B 13331\n#define ll long long\n#define ull unsigned long long\n\nconst int dx[9]={1,1,1,0,0,0,-1,-1,-1},dy[9]={-1,0,1,-1,0,1,-1,0,1}; \nint n,m,tot=0,cnt=0;\npair<int,int> a[N],ans;\nvector<int> b[N];\nunordered_map<ull,int> mp;\ninline int block(int x,int y,bool build){\n\tull xx=x/m,yy=y/m;\n\tint tmp=xx*B+yy;\n\tif(build && mp[tmp]==0) mp[tmp]=++tot;\n\treturn mp[tmp];\n}\ninline bool check(int x,int y){return abs(a[x].fir-a[y].fir)<m && abs(a[x].sec-a[y].sec)<m;}\nvoid see(int x,int y){\n\tif(x==0) return ;\n\tfor(int i:b[x]) if(check(i,y)){\n\t\tcnt++;\n\t\tans=mkp(i,y);\n\t\tif(cnt>1) return ;\n\t}\n}\nvoid work(int t){\n\tint x,y;\n\tFor(i,0,8){\n\t\tx=a[t].fir+m*dx[i];\n\t\ty=a[t].sec+m*dy[i];\n\t\tsee(block(x,y,0),t);\n\t\tif(cnt>1) return ;\n\t}\n}\nsigned main(){\n\tn=read(),m=read();\n\tFor(i,1,n) a[i].fir=read()+base,a[i].sec=read()+base;\n\tFor(i,1,n){\n\t\twork(i);\n\t\tif(cnt>1){\n\t\t\tputs(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t\tb[block(a[i].fir,a[i].sec,1)].pb(i);\n\t}\n\tif(cnt==0){\n\t\tputs(\"0\");\n\t\treturn 0;\n\t}\n\tint x=m-abs(a[ans.fir].fir-a[ans.sec].fir);\n\tint y=m-abs(a[ans.fir].sec-a[ans.sec].sec);\n\tprintf(\"%lld\\n\",(ll)x*y);\nreturn 0;}\n```",
        "postTime": 1642935458,
        "uid": 101868,
        "name": "I_am_Accepted",
        "ccfLevel": 0,
        "title": "P2202 [USACO13JAN]Square Overlap S"
    },
    {
        "content": "\u5199\u4e00\u6ce2\u5e73\u8861\u6811\u9898\u89e3\u3002\n\n## \u5206\u6790\n\n\u5c06\u6240\u6709\u6b63\u65b9\u5f62\u6309 $x$ \u8f74\u6392\u5e8f\uff0c\u4ece\u5de6\u5230\u53f3\u52a0\u5165\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u5728\u52a0\u5165\u5e76\u7edf\u8ba1\u7b54\u6848\u7684\u6b63\u65b9\u5f62\uff0c\u5220\u9664\u4e0e\u4ed6\u5728 $x$ \u8f74\u4e0a\u8ddd\u79bb\u5927\u4e8e $k$ \u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5728\u5904\u7406\u8fd9\u4e2a\u6b63\u65b9\u5f62\u65f6\u672a\u88ab\u5220\u9664\u7684\u6b63\u65b9\u5f62\u90fd\u5728 $x$ \u8f74\u4e0a\u4e0e\u5b83\u201c\u91cd\u56de\u201d\u3002\n\n\u8fd9\u4e00\u6b65\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\u7ef4\u62a4\uff0c\u6211\u7528\u7684\u662f\u7528 vector \u5b58\u8981\u5220\u9664\u7684\u6b63\u65b9\u5f62\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u662f\u5426\u91cd\u5408\u3002\n\n\u5f00\u4e24\u9897\u5e73\u8861\u6811\uff0c\u4e00\u4e2a\u7ef4\u62a4\u6b63\u65b9\u5f62\u7684\u4e0a\u8fb9\u754c\uff0c\u4e00\u4e2a\u7ef4\u62a4\u6b63\u65b9\u5f62\u7684\u4e0b\u8fb9\u754c\u3002\n\n\u5728\u5e73\u8861\u6811\u4e2d\u5bfb\u627e\u5f53\u524d\u6b63\u65b9\u5f62\u4e0a\u8fb9\u754c\u7684\u540e\u7ee7\uff0c\u5bfb\u627e\u4e0b\u8fb9\u754c\u7684\u524d\u9a71\uff0c\u5e76\u7b97\u51fa\u8ddd\u79bb\u3002\n\n\u82e5\u4e24\u4e2a\u8ddd\u79bb\u90fd\u5c0f\u4e8e $k$ \uff0c\u8bf4\u660e\u8fd9\u4e2a\u6b63\u65b9\u5f62\u4e0a\u9762\u91cd\u56de\u4e86\u4e00\u4e2a\uff0c\u4e0b\u9762\u4e5f\u91cd\u56de\u4e86\u4e00\u4e2a\uff0c\u90a3\u4e48\u5c31\u8f93\u51fa $-1$,\u5426\u5219\u5c31\u76f4\u63a5\u7edf\u8ba1\u7b54\u6848\u3002\n\n### code\n\n```\n #include<bits/stdc++.h>\n#define in inline\n#define re register\n//#define int long long\nusing namespace std;\nin int read(){\n\tint x=0,f=1;\n\tchar c;\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=1e5+10,inf=1e9,M=1e6+10;\nstruct sqare{\n\tint x,y,id;\n}s[N];\nint n,k;\nint ans;\nstruct Treap{\n\tpair<int,int>v[N];\n\tint rd[N],son[N][2],top,root,id[N];\n\tint flip(int k,bool d){\n\t\tint s=son[k][d^1];\n\t\tson[k][d^1]=son[s][d];\n\t\tson[s][d]=k;\n\t\treturn s;\n\t}\n\tint insert(int k,int z,int h){\n\t\tif(!k){k=++top,v[k]=make_pair(z,h),rd[k]=rand();return k;}\n\t\tif(v[k].first==z){return k;}\n\t\tbool d=(v[k].first<z);\n\t\tson[k][d]=insert(son[k][d],z,h);\n\t\tif(rd[k]<rd[son[k][d]])k=flip(k,d^1);\n\t\treturn k;\n\t}\n\tvoid ins(int z,int h){root=insert(root,z,h);}\n\tint delet(int k,int z){\n\t\tif(!k)return 0;\n\t\tif(z<v[k].first)son[k][0]=delet(son[k][0],z);\n\t\telse if(z>v[k].first)son[k][1]=delet(son[k][1],z);\n\t\telse{\n\t\t\tif(!son[k][0]&&!son[k][1]){\n\t\t\t\tk=0;\n\t\t\t}\n\t\t\telse if(son[k][0]&&!son[k][1]){\n\t\t\t\tk=flip(k,1);\n\t\t\t\tson[k][1]=delet(son[k][1],z);\n\t\t\t}\n\t\t\telse if(!son[k][0]&&son[k][1]){\n\t\t\t\tk=flip(k,0);\n\t\t\t\tson[k][0]=delet(son[k][0],z);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbool d=(rd[son[k][0]]>rd[son[k][1]]);\n\t\t\t\tk=flip(k,d);\n\t\t\t\tson[k][d]=delet(son[k][d],z);\n\t\t\t}\n\t\t}\n\t\treturn k;\n\t}\n\tvoid del(double z){root=delet(root,z);}\n\tpair<int,int> prefix(int k,int x){\n\t\tif(!k)return make_pair(-inf,0);\n\t\telse if(v[k].first>=x)return prefix(son[k][0],x);\n\t\telse {\n\t\t\tpair<int,int>g=prefix(son[k][1],x);\n\t\t\tif(v[k].first>g.first)return v[k];\n\t\t\telse return g;\n\t\t}\n\t}\n\tpair<int,int> suffix(int k,int z){\n\t\tif(!k)return make_pair(inf,0);\n\t\tif(v[k].first<=z)return suffix(son[k][1],z);\n\t\telse{\n\t\t\tpair<int,int>g=suffix(son[k][0],z);\n\t\t\tif(v[k].first<g.first)return v[k];\n\t\t\telse return g;\n\t\t}\n\t}\n\tpair<int,int> suf(int z){return suffix(root,z);}\n\tpair<int,int> pre(int z){return prefix(root,z);}\t\t//\u666e\u901aTreap\u3002 \n}T1,T2;\nbool cmp(sqare a,sqare b){return a.x<b.x;}\nvoid ins(sqare a){\n\tint l2=a.y-k,r2=a.y+k;\n\tT1.ins(l2,a.id),T2.ins(r2,a.id);\n}\nvoid del(sqare a){\n\tint l2=a.y-k,r2=a.y+k;\n\tT1.del(l2),T2.del(r2);\n}\nvector<int>v[N];\nint t[N];\nvoid dl(int x){\n\tfor(int i=0;i<v[x].size();i++)del(s[v[x][i]]);\n\tv[x].clear();\n}\nsigned main(){\n\tn=read(),k=read()/2;\n\tfor(int i=1;i<=n;i++)s[i].x=read(),s[i].y=read();\n\tsort(s+1,s+1+n,cmp);\n\tfor(int i=1;i<=n;i++)t[i]=s[i].x;\n\tt[n+1]=inf;\n\tfor(int i=1;i<=n;i++){\n\t\tint x=lower_bound(t+1,t+1+n+1,t[i]+k+k)-t;\n\t\ts[i].id=i;\n\t\tv[x].push_back(i);\t\t\t\t//vector \u52a0\u5165\u5220\u9664\u8282\u70b9\u3002 \n\t}\n\tT2.ins(-inf,0),T2.ins(inf,0),T1.ins(-inf,0),T1.ins(inf,0);\n\tfor(int i=1;i<=n;i++){\n\t\tdl(i);\n\t\tint l1=s[i].x-k,l2=s[i].y-k,r2=s[i].y+k;\n\t\tpair<int,int>g1=T1.pre(l2+1),g2=T2.suf(r2-1);\t\t\t//\u4e3a\u4e86\u7edf\u8ba1\u7b54\u6848\u8fd8\u8981\u8fd4\u56de\u7f16\u53f7\u3002 \n\t\tint prel2=g1.first,sufr2=g2.first,idl2=s[g1.second].x+k,idr2=s[g2.second].x+k;\n\t\tins(s[i]);\n\t\tint x=l2-prel2,y=sufr2-r2,zl2=idl2-l1,zr2=idr2-l1;\n\t\tif(x==0&&y==0){\n\t\t\tif(ans){\n\t\t\t\tputs(\"-1\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tans=k*2*zl2;\n\t\t}\n\t\tif(x<k+k&&y<k+k){\n\t\t\tputs(\"-1\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(x<k+k){\n\t\t\tif(ans){\n\t\t\t\tputs(\"-1\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tans=(k+k-x)*zl2;\n\t\t}\n\t\tif(y<k+k){\n\t\t\tif(ans){\n\t\t\t\tputs(\"-1\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tans=(k+k-y)*zr2;\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1671935587,
        "uid": 186240,
        "name": "seanli",
        "ccfLevel": 0,
        "title": "P2202\u9898\u89e3"
    },
    {
        "content": "## Sol ##\n\n[blog\u98df\u7528](http://www.caolaoshi.men/index.php/archives/usaco13jan-so.html)\n\n\u8fd9\u4e2a\u9898\u6ca1\u4ec0\u4e48\u6280\u5de7\uff0c\u8ddf\u7740\u9898\u76ee\u505a\u5c31\u80fd\u8fc7\uff0c\u4e3b\u8981\u662f\u5f0f\u5b50\u63a8\u7684\u6bd4\u8f83\u9ebb\u70e6\u3002\u4e24\u4e2a\u5730\u65b9\u9700\u8981\u63a8\u5f0f\u5b50\u6765\u7b97\uff0c\u5c31\u662f\u5224\u65ad\u662f\u5426\u91cd\u53e0\u548c\u8ba1\u7b97\u91cd\u53e0\u9762\u79ef\u7684\u65f6\u5019\u3002\u6211\u4eec\u6309\u7167\u6a2a\u5750\u6807\u6392\u5e8f\uff0c\u6bcf\u4e00\u6b21\u53ea\u53d6\u51fa\u53ef\u80fd\u4e0e\u8be5\u70b9\u6709\u91cd\u53e0\u7684\u77e9\u5f62(\u5de6\u8fb9\u754c\u6bd4\u5f53\u524d\u77e9\u5f62\u7684\u53f3\u8fb9\u754c\u5c0f\u7684\u77e9\u5f62)\uff0c\u786e\u5b9a\u4e86\u6a2a\u5750\u6807\u518d\u786e\u5b9a\u7eb5\u5750\u6807\uff0c\u7eb5\u5750\u6807\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\u53f3\u4e0a\u65b9\u548c\u53f3\u4e0b\u65b9\u3002\u81ea\u5df1\u6839\u636e\u4e24\u79cd\u60c5\u51b5\u624b\u63a8\u51fa\u5f0f\u5b50\u6765\uff0c\u5c31\u80fd\u6c42\u89e3\u4e86\u3002\n\n## Code ##\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nstruct Node {\n    int x , y;\n    bool operator < (const Node &a) const {\n        return x < a.x;\n    }\n};\nNode map[50005];\nint n , k , cnt , top = 2 , ans;\n\nint myabs(int a) {\n    return a>0?a:(-a);\n}\n\nint jud(int x , int y) {\n    if(map[y].y > map[x].y && map[y].y-k/2<map[x].y+k/2)\n        return 1;\n    if(map[y].y < map[x].y && map[y].y+k/2>map[x].y-k/2)\n        return 1;\n    return 0;\n}\n\nint qarea(int x , int y) {\n    if(map[x].y > map[y].y) {\n        int len1 = map[y].y-map[x].y+k , len2 = map[x].x-map[y].x+k;\n        return len1*len2;\n    }\n    if(map[x].y < map[y].y) {\n        int len1 = map[x].y-map[y].y+k , len2 = map[x].x-map[y].x+k;\n        return len1*len2;\n    }\n}\n\nint main() {\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1; i<=n; i++)\n        scanf(\"%d%d\",&map[i].x,&map[i].y);\n    sort(map+1 , map+n+1);\n    for(int i=1; i<=n; i++)\n        for(int j=i+1; j<=n; j++) {\n            if(map[j].x-k/2 >= map[i].x+k/2)\n                break;\n            if(i != j && jud(i , j)) {\n                cnt++;\n                if(cnt > 1) {\n                    printf(\"-1\");\n                    return 0;\n                }\n                ans = qarea(i , j);\n            }\n        }\n    if(!cnt)\n        printf(\"0\");\n    else\n        printf(\"%d\",ans);\n    return 0;\n}\n```\n\n\n  [1]: https://www.luogu.org/problemnew/show/P2202",
        "postTime": 1535358573,
        "uid": 37427,
        "name": "\u66f9\u8001\u5e08",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]\u65b9\u5757\u91cd\u53e0Square Overlap\u3011"
    },
    {
        "content": "\u6765\u4e00\u53d1Pascal\u9898\u89e3\uff08\u5410\u69fd\u4e00\u4e0b\u96be\u5ea6\u786e\u5b9e\u4e0d\u5408\u7406\uff09\n\n\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u5f97\u662f\u7ebf\uff08\u66b4\uff09\u6027\uff08\u529b\uff09\u626b\uff08\u679a\uff09\u63cf\uff08\u4e3e\uff09\uff08>\\_>\uff09\u7684\u601d\u60f3\n\n\u5bf9\u4e8eN\u4e2a\u6b63\u65b9\u5f62\uff0c\u53ef\u4ee5\u77e5\u9053\u5f53\u6b63\u65b9\u5f62A\u3001B\u7684\u5750\u6807\u4e3a\uff08x1,y1\uff09(x2,y2)\u65f6\uff0cabs\uff08x1-x2\uff09<k \u4e14abs\uff08y1-y2\uff09<k\u6b63\u65b9\u5f62\u4f1a\u51fa\u73b0\u91cd\u53e0\n\n\u5bf9\u4e8e50000\u4e2a\u6b63\u65b9\u5f62\uff0c\u679a\u4e3e\u663e\u7136\u662f\u53ef\u4ee5\u8fc7\u7684\uff0c\u4e8e\u662f\u4e0a\u4ee3\u7801\n\n\n\n\n\n```cpp\nvar i,j,k,l,n,num,ans,r:longint;\n    x,y:array[1..500000] of longint;\nprocedure sort(l,r:longint);\nvar i,j,t,m:longint;\nbegin\n  i:=l;j:=r;m:=x[(i+j) div 2];\n  repeat\n    while x[i]<m do inc(i);\n    while x[j]>m do dec(j);\n    if not(i>j) then begin\n      t:=x[i];x[i]:=x[j];x[j]:=t;\n      t:=y[i];y[i]:=y[j];y[j]:=t;\n      inc(i);dec(j);end;\n  until i>j;\n  if l<j then sort(l,j);\n  if i<r then sort(i,r);\nend;\nbegin\n  readln(n,k);\n  for i:=1 to n do read(x[i],y[i]);\n  sort(1,n);//\u6309\u5750\u6807\u6392\u5e8f\uff0c\u4fbf\u4e8e\u679a\u4e3e\n  ans:=0;\n  for l:=1 to n-1 do\n   begin\n     r:=l+1;   num:=0;//\u63091\u5230n-1\u679a\u4e3el\u4e2a\u6b63\u65b9\u5f62\uff0c\u5219\u5224\u65adR=l+1\u4e2a\u6b63\u65b9\u5f62\u7684\u5750\u6807\n     while (x[r]-x[l]<k)and(r<=n) do\n       begin\n         if (abs(y[r]-y[l])<k) then//\u5982\u679c\u6709\u91cd\u53e0\uff0c\u8ba1\u7b97\u9762\u79ef\u4e3aans\n         if ans=0 then\n           ans:=(k-abs(x[r]-x[l]))*(k-abs(y[r]-y[l]))\n         else begin ans:=-1;   break;end;\n         if ans=-1 then break;inc(r);//\u7ebf\u6027\u626b\u63cf\u7684\u7cbe\u9ad3\uff0c\u82e5\u5f53\u524d\u7684r\u6ee1\u8db3\u4e0el\u91cd\u53e0\uff0c\u5219\u5411\u53f3\u6269\u5f20\uff0c\u5426\u5219break\u8df3\u51fa\u5faa\u73af\uff0cl\u60f3\u505a\u63a8\u8fdb\n        end;\n     if ans=-1 then break;//\u5982\u679c\u5b8c\u5168\u65e0\u91cd\u53e0\u5219\u8fd4\u56de-1\n  end;\n  writeln(ans);\nend.\n\n```",
        "postTime": 1509763677,
        "uid": 19485,
        "name": "scarborough_fair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]\u65b9\u5757\u91cd\u53e0Square Overlap\u3011"
    },
    {
        "content": "\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u90a3\u4e48\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784...\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u7684\u662f\u4e24\u4e2a\u6b63\u65b9\u5f62A,B\u51fa\u73b0\u91cd\u53e0\uff0c\u5f53\u4e14\u4ec5\u5f53:\n\n##|Xa-Xb|<K && |Ya-Yb|<K##\n\u6b64\u65f6\u91cd\u53e0\u90e8\u5206\u7684\u9762\u79ef\n\n##S=(K-|Xa-Xb|)\\*(K-|Ya-Yb|)##\n\u5f97\u5230\u4e0a\u8ff0\u7ed3\u8bba\u540e\u5f88\u5bb9\u6613\u60f3\u5230\u4e24\u4e24\u679a\u4e3e\u6240\u6709\u7684\u4e2d\u5fc3,\u65f6\u95f4\u590d\u6742\u5ea6\u662f**O(n^2)**,\u800cNmax=50000,\u663e\u7136\u662f\u4f1aTLE\u7684\n\n\u56e0\u6b64\u6211\u4eec\u8003\u8651\u4f18\u5316:\n\n\\* \u7528\u4e00\u4e2abool\u53d8\u91cfhave\u8bb0\u5f55\u4e4b\u524d\u662f\u5426\u5df2\u7ecf\u627e\u5230\u91cd\u53e0\u6b63\u65b9\u5f62\n\n\\* \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u4e2d\u5fc3i:\u5bf9\u6a2a\u5750\u6807\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\u540e\u518d\u6309\u6a2a\u5750\u6807\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\n\n\\* \u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u4e2d\u5fc3j:\u679a\u4e3e\u8303\u56f4\u4e3a[1,i-1],\u5e76\u4e14**\u4ece\u540e\u5f80\u524d\u8fdb\u884c\u679a\u4e3e**,\u6211\u4eec\u8bbe\u4e00\u4e2a\u53d8\u91cftemp\u4e3a\u70b9j\u5230\u70b9i\u7684\u8ddd\u79bb,\u90a3\u4e48\u5f53temp>=K\u65f6\u5c31\u76f4\u63a5\u8df3\u51fa\u5bf9j\u7684\u679a\u4e3e\u8fc7\u7a0b\u3002\u5982\u679ctemp<K \u5e76\u4e14\u6ee1\u8db3 |Yi-Yj|<K \u4e14 have=false \u5c31\u66f4\u65b0ans\u5e76\u6807\u8bb0have , \u5426\u5219have=true\u76f4\u63a5\u8f93\u51fa-1\u5373\u53ef\u3002\n\n\u8be6\u7ec6\u89c1\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\n#define MAXN 50001\n#define in(x) x=read()\n\nusing namespace std;\n\ntypedef long long ll;\n\ninline int read()\n{\n    int X=0,w=1;\n    char ch=getchar();\n    while(ch>'9' || ch<'0') {if(ch=='-') w=-1;ch=getchar();}\n    while(ch<='9' && ch>='0') X=(X<<3)+(X<<1)+ch-'0',ch=getchar();\n    return X*w;\n}//\u8bfb\u5165\u4f18\u5316,\u53ef\u5ffd\u7565 \n\nstruct data\n{\n    ll x,y;\n}s[MAXN];//\u4e2d\u5fc3\u5750\u6807 \nint N,K;\nll ans=0;\nbool have;\n\ninline bool mcomp(const data &a,const data &b)\n{\n    return a.x<b.x;\n}\n\nint main()\n{\n    in(N);in(K);\n    for(int i=1;i<=N;i++)\n        in(s[i].x),in(s[i].y);\n    sort(s+1,s+N+1,mcomp);\n    for(int i=2;i<=N;i++)//\u6309\u6a2a\u5750\u6807\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u4e2d\u5fc3 \n    {\n        int tmp=0;\n        for(int j=i-1;j>=1;j--)//\u4f9d\u6b21\u5224\u65ad\u7b2ci\u5230i-1,i-2...\u7684\u8ddd\u79bb\u662f\u5426\u5c0f\u4e8ek \n        {\n            tmp+=(s[j+1].x-s[j].x);\n            if(tmp>=K) break;//\u5982\u679c\u8ddd\u79bb\u5927\u4e8ek\u7ee7\u7eed\u679a\u4e3e\u663e\u7136\u662f\u6ca1\u6709\u5fc5\u8981\u7684 \n            if(abs(s[i].y-s[j].y)<K)\n            {\n                if(have) {printf(\"-1\\n\");return 0;}//\u4e4b\u524d\u5df2\u7ecf\u627e\u5230\u8fc7\u91cd\u53e0\u6b63\u65b9\u5f62,\u76f4\u63a5\u8f93\u51fa-1 \n                have=true;ans=(K-tmp)*(K-abs(s[i].y-s[j].y));\n            }\n        }\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n//By windows250\n```",
        "postTime": 1507518261,
        "uid": 35065,
        "name": "windows250",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2202 \u3010[USACO13JAN]\u65b9\u5757\u91cd\u53e0Square Overlap\u3011"
    }
]