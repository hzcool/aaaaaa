[
    {
        "content": "\u5f88\u597d\u7684\u4e00\u9053\u9898\uff0c\u4f46\u662f\u5165\u624bAC\u81ea\u52a8\u673a\u4e0d\u8981\u50cf\u6211\u4e00\u6837\u4f5c\u6b7b\u8fd9\u9053\u9898\u3002\n\n\u4e0d\u8fc7\u505a\u5b8c\u8fd9\u9053\u9898\u4f60\u5bf9AC\u81ea\u52a8\u673a\u7684\u7406\u89e3\u5e94\u8be5\u63d0\u5347\u4e86\u4e00\u4e2a\u5c42\u6b21\u5427\n\n## AC\u81ea\u52a8\u673a\n\n\u4e00\u79cd\u5b57\u7b26\u4e32\u81ea\u52a8\u673a\uff0c\u4f5c\u7528\u662f\uff0c\u5f53\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u5b57\u5178\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u65f6\uff0c\u72b6\u6001\u8282\u70b9\u4e0d\u4e3a\u7a7a\n\n\u4e5f\u5c31\u662f\u8bf4AC\u81ea\u52a8\u673a\u662f\u591a\u6a21\u5f0f\u4e32\u7684KMP\n\n\u90a3\u4e48\u4e3a\u4e86\u6784\u9020AC\u81ea\u52a8\u673a\uff0c\u6211\u4eec\u9996\u5148\u8981\u5bf9\u5b57\u5178\u5efa\u4e00\u4e2atrie\u6811\n\n\u7136\u540e\uff0c\u50cfKMP\u7684next\u4e00\u6837\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u4e00\u4e2a\u6570\u7ec4\u6765\u5904\u7406\u5931\u914d\u7684\u60c5\u51b5\n\n\u5728\u4e00\u822c\u7684AC\u81ea\u52a8\u673a\u677f\u5b50\u4e2d\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u6570\u7ec4\u4e3afail[]\uff0cfail[i]\u8868\u793a\uff0c\u6211\u4eec\u5728AC\u81ea\u52a8\u673a\n\n/\\*\u5176\u5b9e\u6b64\u65f6\u7684AC\u81ea\u52a8\u673a\u8fd8\u662ftrie\u6811\\*/\u4e0a\u7684\u8282\u70b9i\u5931\u914d\uff0c\u5e94\u8be5\u8df3\u5230AC\u81ea\u52a8\u673a\u7684\u90a3\u4e00\u4e2a\u8282\u70b9\n\n\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u9012\u63a8\u65b9\u6cd5\uff1a\u5bf9\u6574\u53eatrie\u6811BFS\n\n1.\u6839\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u7684fail=root\n\n2.\u5bf9\u4e8e\u4e00\u4e2a\u4e00\u822c\u7684\u8282\u70b9\uff0c\u5b83\u7684fail\u53ef\u4ee5\u8fd9\u6837\u6c42\u5f97\uff0c\u6cbf\u7740\u7236\u8282\u70b9\u7684fail\u8def\u5f84\u4e0d\u65ad\u201c\u5411\u4e0a\u8df3\u201d\uff0c\n\n\u5bf9\u4e8e\u201c\u5411\u4e0a\u8df3\u201d\u8def\u5f84\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u4ed6\u6709\u4e00\u4e2a\u51fa\u8fb9\u7c7b\u578b\u6070\u597d\u4e0e**\u5f53\u524d\u7ed3\u70b9\u548c\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u8282\u70b9\u7684\u8fde\u8fb9\u7c7b\u578b**\u76f8\u7b49\uff0c\u90a3\u4e48\u5b83\u7684fail=\u8fd9\u6761\u51fa\u8fb9**\u6307\u5411\u7684\u8282\u70b9**\n\n\u90a3\u4e48\u5339\u914d\u7684\u65f6\u5019\u50cfKMP\u5229\u7528next\u4e00\u6837\u5229\u7528fail\u5c31\u597d\u4e86\n\n/\\*\u5f53\u7136AC\u81ea\u52a8\u673a\u7684\u771f\u5b9e\u5f62\u6001\u662f\u4e00\u53ea\u81ea\u52a8\u673a\uff0c\u53c8\u79f0trie\u56fe\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e0d\u662ftrie\u56fe\\*/\n\n##\u672c\u9898\u9898\u89e3\n\n\u53d1\u73b0\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\uff0c\u5bf9\u4e8eAC\u81ea\u52a8\u673a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8282\u70b9A\u7684fail\u6307\u5411\u8282\u70b9B\n\n\u5c31\u4f1a\u53d1\u73b0**B\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32**\u4e00\u5b9a\u5728**A\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32**\u4e2d\u51fa\u73b0\n\n/\\*\u6b64\u5904\u5f3a\u70c8\u753b\u4e00\u53eatrie\u81ea\u5df1\u770b\u4e00\u770b\\*/\n\n\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u539f\u9898\u4e2d\u7684\u8be2\u95ee\u53d8\u6210\u4e86\n\n\u201c\u6709\u591a\u5c11\u4e2a\u5c5e\u4e8eY\u7684\u8282\u70b9\u7684fail\u6307\u9488**\u76f4\u63a5\u6216\u95f4\u63a5**\u6307\u5411X\u7684\u7ed3\u675f\u4f4d\u7f6e\u201d\n\n\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u518d\u8df3\u8d8a\u4e00\u5c0f\u6b65\n\n\u5982\u679c\u628afail\u6307\u9488\u7406\u89e3\u6210\u8fb9\uff0c\u90a3\u4e48**\u539ftrie\u6811\u7684\u70b9\u548cfail\u6307\u9488**\u5f62\u6210\u7684\u8fb9\uff0c\u5171\u540c\u6784\u6210\u4e00\u53ea\u6811\n\n\u6211\u4eec\u4e00\u822c\u79f0\u5b83\u4e3afail\u6811\n\n\u73b0\u5728\u8be2\u95ee\u53d8\u6210\u4e86\uff0c\u5728fail\u6811\u4e2d\uff0c\u4ee5X\u7ed3\u675f\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u70b9\u5c5e\u4e8eY\n\n\u53ef\u4ee5\u5229\u7528dfs\u5e8f\uff0c\u5c06fail\u6811\u4e0a\u7684\u70b9\u6620\u5c04\u5230\u4e00\u4e2a\u5e8f\u5217\u4e0a\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u5b83\u53d8\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\u7edf\u8ba1\u95ee\u9898\n\n\u53ea\u8981\u9489\u6b7b\u201c\u5c5e\u4e8eY\u7684\u8282\u70b9\u201d\u8fd9\u4e2a\u6761\u4ef6\u6211\u4eec\u5c31\u53ef\u4ee5\u7edf\u8ba1\u4e86\n\n\u9700\u8981\u5229\u7528\u5230trie\u6811\n\n\u5177\u4f53\u6765\u8bb2dfs\u6574\u53eatrie\n\n\u6bcfd\u5230\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u5bf9\u5e94\u7684\u5e8f\u5217\u70b9+1\uff0c\u56de\u6eaf\u7684\u65f6\u5019-1\uff1b\n\n\u8fd9\u6837\u505a\u53ef\u4ee5\u4fdd\u8bc1\u53ea\u6709\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u70b9\u662f\u6709\u503c\u7684\n\n\u5982\u679c\u5f53\u524d\u70b9\u662f\u4e00\u4e2a\u7ed3\u675f\u8282\u70b9\uff0c\u90a3\u4e48\u8bf4\u660e\u6bcf\u4e00\u4e2a\u5c5e\u4e8e\u8fd9\u4e2a\u4e32\u7684\u8282\u70b9\u90fd\u5df2\u7edf\u8ba1\u5b8c\u6bd5\n\n\u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8c03\u51fa\u6bcf\u4e00\u4e2a\u5173\u4e8e\u8fd9\u4e2a\u4e32\u7684\u8be2\u95ee\uff0c\u533a\u95f4\u6c42\u548c\u5373\u53ef\n\n\u597d\u50cf\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6b38\u2026\u2026\n\n\u5269\u4e0b\u7684\u5c31\u662f\u4ee3\u7801\u5b9e\u73b0\u4e86\uff0c\u9700\u8981\u4e71\u4e03\u516b\u7cdf\u7ef4\u62a4\u4e00\u5806\u6620\u5c04\n\n\u7ec6\u8282\u770b\u4ee3\u7801\u597d\u4e86\n\n\u4e0a\u4ee3\u7801~\n\n\n\n\n```cpp\n    #include<cstdio>\n    #include<algorithm>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    int n=1;//\u6ce8\u610f\uff0c\u90bb\u63a5\u8868\u4e0d\u652f\u63010\u53f7\u8282\u70b9\uff0ctrie\u6811\u7684\u6839\u7f16\u53f7\u4e3a1\n    struct nod\n    {int num;int typ;};\n    queue <nod> q;\n    struct trie//trie\u6811\n    {\n        int map[100010][30];int end[100010];//\u8bb0\u5f55\u7ed3\u675f\u70b9\n        int word;//\u5355\u8bcd\u8ba1\u6570\u5668\n        int fa[100010];int fail[100010];int dis[100010];//father\uff0c\u4ee5\u53caend\u6570\u7ec4\u7684\u53cd\u5411\u6570\u7ec4\n        inline int insert(int p,char c)//trie\u6811\u63d2\u5165\n        {\n            if(map[p][c-'a'+1]!=0)return map[p][c-'a'+1];\n            map[p][c-'a'+1]=++n;fa[n]=p;return n;\n        }\n        inline int back(int p){return fa[p];}//\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5b9e\u73b0\u6253\u5b57\u673a\u7684'B'\u952e\n        inline void ed(int p){end[p]=++word;dis[word]=p;}\n        inline void build()//\u6784\u9020fail\n        {\n            for(int i=1;i<=26;i++)\n            if(map[1][i]!=0)//\u7b2c\u4e00\u5c42\u8282\u70b9\u7684\u7279\u5224\n            {nod p;p.num=map[1][i];p.typ=i;fail[p.num]=1;q.push(p);}\n            while(!q.empty())//bfs\n            {\n                nod now=q.front();q.pop();\n                if(fail[now.num]!=1)//\u8df3fail\n                {\n                    int trail=fail[fa[now.num]];\n                    while(1)\n                    {\n                        if(map[trail][now.typ]!=0){trail=map[trail][now.typ];break;}\n                        if(trail==1)break;trail=fail[trail];\n                    }fail[now.num]=trail;\n                }\n                for(int i=1;i<=26;i++)\n                {if(map[now.num][i]!=0)\n                {nod p;p.num=map[now.num][i];p.typ=i;q.push(p);}}\n            }return;\n        }\n    }tr;\n    struct data{int v;int nxt;}edge[200010];\n    int cnt;int alist[100010];\n    inline void add(int u,int v)//\u5b58fail\u6811\n    {\n        edge[++cnt].v=v;edge[cnt].nxt=alist[u];\n        alist[u]=cnt;return;\n    }\n    struct node{int v;int num;};\n    struct data2{node v;int nxt;}edge1[100010];\n    int cnt1;int alist1[100010];\n    inline void add1(int u,int v,int num)//\u5b58\u8be2\u95ee\n    {\n        node p;p.v=v;p.num=num;\n        edge1[++cnt1].v=p;edge1[cnt1].nxt=alist1[u];\n        alist1[u]=cnt1;return;\n    }\n    struct treearray//4\u884c\u6811\u72b6\u6570\u7ec4\n    {\n        int ta[200010];\n        inline void ub(int& x){x+=x&(-x);}\n        inline void db(int& x){x-=x&(-x);}\n        inline void c(int x,int t){for(;x<=n;ub(x))ta[x]+=t;}\n        inline int sum(int x){int res=0;for(;x>0;db(x))res+=ta[x];return res;}\n    }ta;\n    int dfn[100010];int size[100010];int dfu;\n    bool book[100010];int ans[100010];\n    void dfsfail(int x)//\u5bf9fail\u6811\u7684dfs\n    {\n        dfn[x]=++dfu;\n        size[x]=1;book[x]=true;\n        int nxt=alist[x];\n        while(nxt)\n        {\n            int v=edge[nxt].v;\n            if(book[v]==false)\n            {dfsfail(v);size[x]+=size[v];}\n            nxt=edge[nxt].nxt;\n        }return;\n    }\n    void dfstrie(int x)//\u5bf9trie\u7684dfs\n    {\n        ta.c(dfn[x],1);\n        if(tr.end[x]!=0)\n        {\n            int nxt=alist1[tr.end[x]];\n            while(nxt)\n            {\n                node v=edge1[nxt].v;int x=tr.dis[v.v];\n                ans[v.num]=ta.sum(dfn[x]+size[x]-1)-ta.sum(dfn[x]-1);\n                nxt=edge1[nxt].nxt;\n            }\n        }\n        for(int i=1;i<=26;i++)\n        {if(tr.map[x][i]!=0){dfstrie(tr.map[x][i]);}}\n        ta.c(dfn[x],-1);return;\n    }\n    char mde[100010];int len;int st;int m;\n    int main()\n    {\n        scanf(\"%s\",mde+1);\n        len=strlen(mde+1);\n        for(st=1;st<=len;st++){if(mde[st]!='B'&&mde[st]!='P')break;}\n        int p=tr.insert(1,mde[st]);\n        for(int i=st+1;i<=len;i++)//\u6784\u9020trie\n        {\n            if(mde[i]=='B'){p=tr.back(p);}\n            else if(mde[i]=='P'){tr.ed(p);}\n            else p=tr.insert(p,mde[i]);\n        }\n        scanf(\"%d\",&m);\n        for(int i=1;i<=m;i++)//\u79bb\u7ebf\n        {\n            int u;int v;\n            scanf(\"%d%d\",&u,&v);\n            add1(v,u,i);\n        }tr.build();//\u5efaAC\u81ea\u52a8\u673a\n        for(int i=2;i<=n;i++)\n        {add(tr.fail[i],i);add(i,tr.fail[i]);}//\u5efafail\u6811\n        dfsfail(1);dfstrie(1);//\u4e24\u8fb9dfs\n        for(int i=1;i<=m;i++)\n        {printf(\"%d\\n\",ans[i]);}\n        return 0;//\u62dc\u62dc\u7a0b\u5e8f~\n    }\n\n```",
        "postTime": 1515232212,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "\u5148\u5199\u4e2a\u66b4\u529b\uff1a\n\n\u6bcf\u6b21\u6253\u5370\u51fa\u5b57\u7b26\u4e32\u540e\uff0c\u5c31\u63d2\u5165\u5230$Trie$\u6811\u4e2d\n\n\u641e\u5b8c\u540e\u76f4\u63a5\u642d$AC$\u81ea\u52a8\u673a\n\n\u770b\u4e00\u770b\u5339\u914d\u662f\u600e\u4e48\u6837\u7684\uff1a\n\n\u6bcf\u6b21\u6cbf\u7740$AC$\u81ea\u52a8\u673a\u8d70\uff0c\u5728\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u8df3$fail$\u6307\u9488\n\n\u5982\u679c\u6709$x$\u4e32\u7684\u672b\u8282\u70b9\uff0c\u5c31\u7ed9\u7b54\u6848$+1$\n\n\u8fd9\u6837\u7684\u8bdd\u6ca1\u6709\u5fc5\u8981\u5b58\u4e0b\u6bcf\u4e2a\u4e32\n\n\u53ea\u8981\u7ed9$AC$\u81ea\u52a8\u673a\u5b58\u4e00\u4e2a\u7236\u4eb2\u8282\u70b9\n\n\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\n\n\u5012\u7740\u5f80\u4e0a\u8df3\u5c31\u53ef\u4ee5\u4e86\n\n\u8fd9\u6837\u80fd\u591f\u62ff\u5230$40$\u5206\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define MAX 200000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nchar ss[MAX];\nint nd[MAX],n,tot;\nstruct Node\n{\n    int vis[26];\n    int fail,fa;\n    int lt;\n}t[MAX];\nvoid GetFail()\n{\n    queue<int> Q;\n    for(int i=0;i<26;++i)\n        if(t[0].vis[i])Q.push(t[0].vis[i]);\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        for(int i=0;i<26;++i)\n            if(t[u].vis[i])\n                t[t[u].vis[i]].fail=t[t[u].fail].vis[i],Q.push(t[u].vis[i]);\n            else t[u].vis[i]=t[t[u].fail].vis[i];\n    }\n}\nint Query(int x,int y)\n{\n    int ret=0;\n    int now=nd[y];\n    while(now)\n    {\n        for(int i=now;i;i=t[i].fail)\n            if(t[i].lt==x){++ret;break;}\n        now=t[now].fa;\n    }\n    return ret;\n}\nint main()\n{\n    scanf(\"%s\",ss+1);\n    int now=0;\n    for(int i=1,l=strlen(ss+1);i<=l;++i)\n    {\n        if(ss[i]>='a'&&ss[i]<='z')\n        {\n            if(!t[now].vis[ss[i]-'a'])t[now].vis[ss[i]-'a']=++tot,t[tot].fa=now;\n            now=t[now].vis[ss[i]-'a'];\n        }\n        if(ss[i]=='B')now=t[now].fa;\n        if(ss[i]=='P'){nd[++n]=now;t[now].lt=n;}\n    }\n    int Q=read();\n    GetFail();\n    while(Q--)\n    {\n        int x=read(),y=read();\n        printf(\"%d\\n\",Query(x,y));\n    }\n    return 0;\n}\n\n```\n\n---\n\n\u8fd9\u6837\u5b50\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u90fd\u4f1a\u8981\u66b4\u8df3\n\n\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u4e32\u6709\u91cd\u590d\u7684\u591a\u6b21\u8be2\u95ee\n\n\u90a3\u4e48\u5c31\u4f1a\u591a\u5f88\u591a\u6b21\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\u8ba1\u7b97\n\n\u6240\u4ee5\uff0c\u53ef\u4ee5\u79bb\u7ebf\u628a\u6240\u6709\u8be2\u95ee\u90fd\u6309\u7167$y$\u6392\u5e8f\n\n\u6bcf\u6b21\u8df3\u7684\u65f6\u5019\u5f00\u4e2a\u6876\u4e00\u8d77\u8ba1\u7b97\n\n\u8fd9\u6837\u7684\u8bdd\u53ef\u4ee5\u62ff\u5230$70$\u5206\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define MAX 200000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nchar ss[MAX];\nint nd[MAX],n,tot;\nint ans[MAX];\nstruct Node\n{\n    int vis[26];\n    int fail,fa;\n    int lt;\n}t[MAX];\nstruct Question{int x,y,id,ans;}q[MAX];\nbool operator<(Question a,Question b){return a.y<b.y;}\nint sum[MAX];\nvoid GetFail()\n{\n    queue<int> Q;\n    for(int i=0;i<26;++i)\n        if(t[0].vis[i])Q.push(t[0].vis[i]);\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        for(int i=0;i<26;++i)\n            if(t[u].vis[i])\n                t[t[u].vis[i]].fail=t[t[u].fail].vis[i],Q.push(t[u].vis[i]);\n            else t[u].vis[i]=t[t[u].fail].vis[i];\n    }\n}\nint Query(int y)\n{\n    int ret=0;\n    int now=nd[y];\n    while(now)\n    {\n        for(int i=now;i;i=t[i].fail)\n            if(t[i].lt)sum[t[i].lt]++;\n        now=t[now].fa;\n    }\n    return ret;\n}\nint main()\n{\n    scanf(\"%s\",ss+1);\n    int now=0;\n    for(int i=1,l=strlen(ss+1);i<=l;++i)\n    {\n        if(ss[i]>='a'&&ss[i]<='z')\n        {\n            if(!t[now].vis[ss[i]-'a'])t[now].vis[ss[i]-'a']=++tot,t[tot].fa=now;\n            now=t[now].vis[ss[i]-'a'];\n        }\n        if(ss[i]=='B')now=t[now].fa;\n        if(ss[i]=='P'){nd[++n]=now;t[now].lt=n;}\n    }\n    int Q=read();\n    GetFail();\n    for(int i=1;i<=Q;++i)\n    {\n        q[i].x=read(),q[i].y=read();\n        q[i].id=i;\n    }\n    sort(&q[1],&q[Q+1]);\n    for(int i=1,pos=1;i<=Q;i=pos)\n    {\n        Query(q[i].y);\n        while(q[pos].y==q[i].y)q[pos].ans=sum[q[pos].x],pos++;\n        memset(sum,0,sizeof(sum));\n    }\n    for(int i=1;i<=Q;++i)ans[q[i].id]=q[i].ans;\n    for(int i=1;i<=Q;++i)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```\n\n---\n\n\u518d\u6765\u60f3\u60f3\u6211\u4eec\u6bcf\u6b21\u5728\u5e72\u4ec0\u4e48\uff1f\uff1f\n\n\u8df3$fail$\n\n\u663e\u7136\u6bcf\u4e2a\u8282\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a$fail$\u6307\u9488\n\n\u6240\u4ee5\uff0c\u8fd9\u5c31\u662f\u4e00\u68f5\u6811\uff1f\uff1f\n\n\u628a\u8fd9\u4e2a$fail$\u53cd\u8fc7\u6765\u770b\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\u4ec0\u4e48\uff1f\n\n\u539f\u6765\u662f$y$\u7684\u67d0\u4e2a\u8282\u70b9\u5f80\u4e0a\u8df3\u80fd\u4e0d\u80fd\u5230\u8fbe$x$\n\n\u73b0\u5728\u53cd\u8fc7\u6765\uff1a\n\n$x$\u5f80\u4e0b\u8df3\u80fd\u591f\u5230\u8fbe\u51e0\u4e2a$y$\u7684\u8282\u70b9\n\n\u90a3\uff0c\u4e0d\u5c31\u662f\u6c42\u5b50\u6811\u548c\uff1f\uff1f\uff1f\n\n\u5982\u679c\u628a\u6240\u6709$y$\u7684\u8282\u70b9\u5168\u90e8\u6253\u4e0a\u4e00\u4e2a$1$\u7684\u6807\u8bb0\n\n\u90a3\u4e48\uff0c\u6bcf\u6b21\u5c31\u53d8\u6210\u4e86\u6c42$x$\u672b\u8282\u70b9\u7684\u5b50\u6811\u548c\n\n\u800c\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u5728$dfs$\u5e8f\u4e0a\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\n\n\u8fd9\u6837\u8fd8\u662f\u53ef\u4ee5\u62ff\u5230$70$\u5206\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define MAX 200000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nchar ss[MAX];\nint nd[MAX],n,tot;\nint ans[MAX];\nint c[MAX];\nint dfn[MAX],low[MAX],tim;\ninline int lowbit(int x){return x&(-x);}\nvoid Modify(int x,int w){while(x<=tim)c[x]+=w,x+=lowbit(x);}\nint getsum(int x){int ret=0;while(x)ret+=c[x],x-=lowbit(x);return ret;}\nstruct Node\n{\n    int vis[26];\n    int fail,fa;\n    int lt;\n}t[MAX];\nstruct Question{int x,y,id,ans;}q[MAX];\nbool operator<(Question a,Question b){return a.y<b.y;}\nvoid GetFail()\n{\n    queue<int> Q;\n    for(int i=0;i<26;++i)\n        if(t[0].vis[i])Q.push(t[0].vis[i]);\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        for(int i=0;i<26;++i)\n            if(t[u].vis[i])\n                t[t[u].vis[i]].fail=t[t[u].fail].vis[i],Q.push(t[u].vis[i]);\n            else t[u].vis[i]=t[t[u].fail].vis[i];\n    }\n}\nstruct Line{int v,next;}e[MAX<<1];\nint h[MAX],cnt=1;\ninline void Add(int u,int v){e[cnt]=(Line){v,h[u]};h[u]=cnt++;}\nvoid dfs(int u)\n{\n    dfn[u]=++tim;\n    for(int i=h[u];i;i=e[i].next)dfs(e[i].v);\n    low[u]=tim;\n}\nint main()\n{\n    scanf(\"%s\",ss+1);\n    int now=0;\n    for(int i=1,l=strlen(ss+1);i<=l;++i)\n    {\n        if(ss[i]>='a'&&ss[i]<='z')\n        {\n            if(!t[now].vis[ss[i]-'a'])t[now].vis[ss[i]-'a']=++tot,t[tot].fa=now;\n            now=t[now].vis[ss[i]-'a'];\n        }\n        if(ss[i]=='B')now=t[now].fa;\n        if(ss[i]=='P'){nd[++n]=now;t[now].lt=n;}\n    }\n    int Q=read();\n    GetFail();\n    for(int i=1;i<=tot;++i)Add(t[i].fail,i);\n    dfs(0);\n    for(int i=1;i<=Q;++i)\n    {\n        q[i].x=read(),q[i].y=read();\n        q[i].id=i;\n    }\n    sort(&q[1],&q[Q+1]);\n    for(int i=1,pos=1;i<=Q;i=pos)\n    {\n        for(int now=nd[q[i].y];now;now=t[now].fa)\n            Modify(dfn[now],1);\n        while(q[pos].y==q[i].y)\n        {\n            int v=nd[q[pos].x];\n            q[pos].ans=getsum(low[v])-getsum(dfn[v]-1);\n            pos++;\n        }\n        memset(c,0,sizeof(c));\n    }\n    for(int i=1;i<=Q;++i)ans[q[i].id]=q[i].ans;\n    for(int i=1;i<=Q;++i)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```\n\n---\n\n\u73b0\u5728\u5927\u81f4\u7684\u65b9\u5411\u5df2\u7ecf\u6ca1\u6709\u95ee\u9898\u4e86\n\n\u770b\u770b\u6211\u4eec\u91cd\u590d\u7b97\u5728\u54ea\u91cc\uff1f\n\n\u6bcf\u6b21\u628a\u4e32\u63d2\u5165\u8fdb\u6811\u72b6\u6570\u7ec4\uff01\n\n\u56e0\u4e3a\u5f88\u591a\u7684\u4e32\u4f1a\u6709\u91cd\u590d\n\n\u6240\u4ee5\u4f1a\u53cd\u53cd\u590d\u590d\u628a\u5f88\u591a\u4e1c\u897f\u7ed9\u91cd\u590d\u63d2\u8fdb\u53bb\n\n\u8fd9\u6837\u5c31\u5f88\u6162\u4e86\n\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u628a$Trie$\u6811$dfs$\u904d\u5386\u4e00\u904d\n\n~~\u6211\u641eFail\u6307\u9488\u7684\u65f6\u5019\u4f1a\u628a\u539f\u6765\u7684Trie\u6570\u7ed9\u641e\u6389\uff0c\u8fd8\u8981\u5907\u4efd\u3002\u3002~~\n\n\u8bbf\u95ee\u5230\u7684\u65f6\u5019\u6253\u4e00\u4e2a$+1$\n\n\u7ed3\u675f\u7684\u65f6\u5019\u6253\u4e00\u4e2a$-1$\n\n\u6bcf\u6b21\u8bbf\u95ee\u5230\u4e00\u4e2a\u7ed3\u675f\u8282\u70b9\u7684\u65f6\u5019\uff0c\n\n\u4e00\u5b9a\u662f\u6709\u4e14\u4ec5\u6709\u8fd9\u4e2a\u4e32\u7684\u8282\u70b9\u88ab\u6253\u4e86\u6807\u8bb0\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u56de\u7b54\u8fd9\u4e2a\u4e32\u7684\u76f8\u5173\u8be2\u95ee\u4e86\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define MAX 200000\ninline int read()\n{\n    int x=0,t=1;char ch=getchar();\n    while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();\n    if(ch=='-')t=-1,ch=getchar();\n    while(ch<='9'&&ch>='0')x=x*10+ch-48,ch=getchar();\n    return x*t;\n}\nchar ss[MAX];\nint nd[MAX],n,tot;\nint ans[MAX];\nint c[MAX];\nint dfn[MAX],low[MAX],tim;\nint ql[MAX],qr[MAX];\ninline int lowbit(int x){return x&(-x);}\nvoid Modify(int x,int w){while(x<=tim)c[x]+=w,x+=lowbit(x);}\nint getsum(int x){int ret=0;while(x)ret+=c[x],x-=lowbit(x);return ret;}\nstruct Node\n{\n    int vis[26];\n    int Vis[26];\n    int fail,fa;\n    int lt;\n}t[MAX];\nstruct Question{int x,y,id,ans;}q[MAX];\nbool operator<(Question a,Question b){return a.y<b.y;}\nvoid GetFail()\n{\n    queue<int> Q;\n    for(int i=0;i<26;++i)\n        if(t[0].vis[i])Q.push(t[0].vis[i]);\n    while(!Q.empty())\n    {\n        int u=Q.front();Q.pop();\n        for(int i=0;i<26;++i)\n            if(t[u].vis[i])\n                t[t[u].vis[i]].fail=t[t[u].fail].vis[i],Q.push(t[u].vis[i]);\n            else t[u].vis[i]=t[t[u].fail].vis[i];\n    }\n}\nstruct Line{int v,next;}e[MAX<<1];\nint h[MAX],cnt=1;\ninline void Add(int u,int v){e[cnt]=(Line){v,h[u]};h[u]=cnt++;}\nvoid dfs(int u)\n{\n    dfn[u]=++tim;\n    for(int i=h[u];i;i=e[i].next)dfs(e[i].v);\n    low[u]=tim;\n}\nvoid DFS(int u)\n{\n    Modify(dfn[u],1);\n    if(t[u].lt)\n        for(int i=ql[t[u].lt];i<=qr[t[u].lt];++i)\n            q[i].ans=getsum(low[nd[q[i].x]])-getsum(dfn[nd[q[i].x]]-1);\n    for(int i=0;i<26;++i)\n        if(t[u].Vis[i])\n            DFS(t[u].Vis[i]);\n    Modify(dfn[u],-1);\n}\nint main()\n{\n    scanf(\"%s\",ss+1);\n    int now=0;\n    for(int i=1,l=strlen(ss+1);i<=l;++i)\n    {\n        if(ss[i]>='a'&&ss[i]<='z')\n        {\n            if(!t[now].vis[ss[i]-'a'])t[now].vis[ss[i]-'a']=++tot,t[tot].fa=now;\n            now=t[now].vis[ss[i]-'a'];\n        }\n        if(ss[i]=='B')now=t[now].fa;\n        if(ss[i]=='P'){nd[++n]=now;t[now].lt=n;}\n    }\n    for(int i=0;i<=tot;++i)\n        for(int j=0;j<26;++j)\n            t[i].Vis[j]=t[i].vis[j];\n    int Q=read();\n    GetFail();\n    for(int i=1;i<=tot;++i)Add(t[i].fail,i);\n    dfs(0);\n    for(int i=1;i<=Q;++i)\n    {\n        q[i].x=read(),q[i].y=read();\n        q[i].id=i;\n    }\n    sort(&q[1],&q[Q+1]);\n    for(int i=1,pos=1;i<=Q;i=pos)\n    {\n        ql[q[i].y]=i;\n        while(q[pos].y==q[i].y)pos++;\n        qr[q[i].y]=pos-1;\n    }\n    DFS(0);\n    for(int i=1;i<=Q;++i)ans[q[i].id]=q[i].ans;\n    for(int i=1;i<=Q;++i)\n        printf(\"%d\\n\",ans[i]);\n    return 0;\n}\n\n```",
        "postTime": 1516434558,
        "uid": 21283,
        "name": "yybyyb",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "\u6253\u5b57\u673a\u4e0a\u53ea\u6709$28$\u4e2a\u6309\u952e\uff0c\u5206\u522b\u5370\u6709$26$\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c'$B$'\u3001'$P$'\u4e24\u4e2a\u5b57\u6bcd\u3002\u7ecf\u963f\u72f8\u7814\u7a76\u53d1\u73b0\uff0c\u8fd9\u4e2a\u6253\u5b57\u673a\u662f\u8fd9\u6837\u5de5\u4f5c\u7684\uff1a\n\u00b7\u8f93\u5165\u5c0f\u5199\u5b57\u6bcd\uff0c\u6253\u5b57\u673a\u7684\u4e00\u4e2a\u51f9\u69fd\u4e2d\u4f1a\u52a0\u5165\u8fd9\u4e2a\u5b57\u6bcd(\u8fd9\u4e2a\u5b57\u6bcd\u52a0\u5728\u51f9\u69fd\u7684\u6700\u540e)\u3002\n\u00b7\u6309\u4e00\u4e0b\u5370\u6709'$B$'\u7684\u6309\u952e\uff0c\u6253\u5b57\u673a\u51f9\u69fd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4f1a\u6d88\u5931\u3002\n\u00b7\u6309\u4e00\u4e0b\u5370\u6709'$P$'\u7684\u6309\u952e\uff0c\u6253\u5b57\u673a\u4f1a\u5728\u7eb8\u4e0a\u6253\u5370\u51fa\u51f9\u69fd\u4e2d\u73b0\u6709\u7684\u6240\u6709\u5b57\u6bcd\u5e76\u6362\u884c\uff0c\u4f46\u51f9\u69fd\u4e2d\u7684\u5b57\u6bcd\u4e0d\u4f1a\u6d88\u5931\u3002\n\u4f8b\u5982\uff0c\u963f\u72f8\u8f93\u5165$aPaPBbP$\uff0c\u7eb8\u4e0a\u88ab\u6253\u5370\u7684\u5b57\u7b26\u5982\u4e0b\uff1a\n$a$ $aa$ $ab$ \u6211\u4eec\u628a\u7eb8\u4e0a\u6253\u5370\u51fa\u6765\u7684\u5b57\u7b26\u4e32\u4ece$1$\u5f00\u59cb\u987a\u5e8f\u7f16\u53f7\uff0c\u4e00\u76f4\u5230$n$\u3002\u6253\u5b57\u673a\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u529f\u80fd\uff0c\u5728\u6253\u5b57\u673a\u4e2d\u6697\u85cf\u4e00\u4e2a\u5e26\u6570\u5b57\u7684\u5c0f\u952e\u76d8\uff0c\u5728\u5c0f\u952e\u76d8\u4e0a\u8f93\u5165\u4e24\u4e2a\u6570$(x,y)$\uff08\u5176\u4e2d$1 \\leq x,y \\leq n$\uff09\uff0c\u6253\u5b57\u673a\u4f1a\u663e\u793a\u7b2c$x$\u4e2a\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5728\u7b2c$y$\u4e2a\u6253\u5370\u7684\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\u963f\u72f8\u53d1\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\u4ee5\u540e\u5f88\u5174\u594b\uff0c\u4ed6\u60f3\u5199\u4e2a\u7a0b\u5e8f\u5b8c\u6210\u540c\u6837\u7684\u529f\u80fd\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f\n\n<!--more-->\n\n~~\u4e0d\u80fd~~\n\n~~\u8fd9\u6253\u5b57\u673a\u6bd4\u73b0\u5728\u7684\u8fd8\u5148\u8fdb\uff0c\u54ea\u91cc\u8001\u5f0f\u4e86~~\n\n~~\u963f \u673a \u7684 \u6253 \u5b57 \u72f8~~\n\n----------\n\u4f7f\u7528\u753b\u56fe\u8f6f\u4ef6\uff1a PowerPoint 2014\n\n\u4e00\u9053\u4ece\u5f88\u4e45\u4ee5\u524d\u5c31\u60f3AC\u7684\u9898\u76ee\u3002\u7ec8\u4e8e\u505a\u6389\u4e86\u6765\u5199\u4e00\u53d1\u9898\u89e3\u3002\n\n\u9996\u5148\uff0c\u770b\u5230\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u5c31\u662f...\u5982\u4f55\u5b58\u50a8\uff01\n\n\u5b58\u50a8\u5b57\u7b26\u4e32\uff0c\u6700\u5e38\u7528\u7684\u662f\u4ec0\u4e48\uff1f\n\n\u67d01\uff1aMap\u3002 \u67d02:char\n\n\u62d6\u51fa\u53bb\u780d\u4e86\u3002\n\n\u5f88\u663e\u7136\uff0c\u5982\u679c\u8fd9\u9053\u9898\u6211\u4eec\u76f4\u63a5\u5728\u7ebf\u5904\u7406\uff0c\u4f7f\u7528\u7684\u5c31\u662fAC\u81ea\u52a8\u673a\u3002AC\u81ea\u52a8\u673a\u4f9d\u8d56\u4e8eTrie\u7ed3\u6784\u3002\u6240\u4ee5\u6211\u4eec\u8981\u5199\u4e2aTrie\u6811\u3002\nTrie\u6811\u600e\u4e48\u6784\u9020\uff1f\u8003\u8651\uff1a\u5982\u679c\u662f\"$P$\"\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u7ec4\u8be2\u95ee\uff0c\u7528\u6570\u7ec4\u5b58\u4e0b\u3002\u5982\u679c\u662f\"$B$\"\uff0c\u5219\u8bf4\u660e\u4e0b\u4e00\u4e2a\u52a0\u5165\u7684\u5b57\u7b26\u4f1a\u662f\u8fd9\u4e2a\u8282\u70b9\u7236\u4eb2\u7684\u5b69\u5b50\uff0c\u6240\u4ee5\u628a\u6307\u9488\u6307\u5411\u7236\u4eb2\u3002\u5982\u679c\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u76f4\u63a5\u63d2\u5165Trie\u6811\u5373\u53ef\u3002\n\u6211\u4eec\u53c8\u77e5\u9053\uff0cAC\u81ea\u52a8\u673a\u4e4b\u6240\u4ee5\u4f1a\u5feb\uff0c\u662f\u56e0\u4e3a\u4f7f\u7528\u4e86KMP\u601d\u60f3\u7684Fail\u6307\u9488\u3002\u6240\u4ee5\u5982\u679c\u628aFail\u6307\u9488\u4ee5\u53caTrie\u6811\u6784\u51fa\uff0c\u5e94\u8be5\u662f\u957f\u6210\u8fd9\u6837\u7684\uff1a\n\n![1][1]\n\n\u63a5\u4e0b\u6765\u662f\u5f88\u91cd\u8981\u7684\u4e00\u6b65\uff1a\n\u628a\u6240\u6709\u9664Fail\u6307\u9488\u4ee5\u5916\u7684\u8fb9\u5220\u53bb\u3002\u628a\u56fe\u53d8\u6210\u8fd9\u6837\uff1a\n(\u4e3a\u65b9\u4fbf\u89c2\u770b\uff0c\u6574\u7406\u4e00\u4e0b\u4ece\u6839\u5230\u6bcf\u4e2a\u8282\u70b9\u4f4d\u7f6e\u8868\u793a\u7684\u5b57\u7b26\u4e32\uff09\n\n![2][2]\n\n\u8fd9\u6837\u6574\u5f20\u56fe\u5c31\u53d8\u6210\u4e86\u4e00\u68f5\u6811\u3002\u8fd9\u79cd\u7531Fail\u6307\u9488\u6784\u6210\u7684\u6811\u53eb\u505a **Fail\u6811**\u3002\nFail\u6811\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\u7531\u4e8eFail\u6307\u9488\u6307\u5411 \u201c\u8fd9\u4e2a\u4e32\u7684\u6700\u957f\u540e\u7f00\u201d\u3002\uff08\u53c2\u89c1AC\u81ea\u52a8\u673a\u4e2d\u5bf9Fail\u6307\u9488\u7684\u5b9a\u4e49\uff09\n\u800c\u6307\u5411\u7684\u90a3\u4e2a\u70b9\u53c8\u662f\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002\n\u6211\u4eec\u77e5\u9053\uff0c\u540e\u7f00\u7684\u524d\u7f00\u662f\u4ec0\u4e48\uff1f\u662f\u5b50\u4e32\uff01\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u770b\u56fe\uff1a\n\n![3][3]\n\n\u84dd\u8272\u6846\u8d77\u90e8\u5206\u662f\u8fd9\u4e2a\u4e32\u7684\u540e\u7f00\u3002\n\n![4][4]\n\n\u7ea2\u8272\u6846\u8d77\u90e8\u5206\u662f\u540e\u7f00\u7684\u524d\u7f00\u3002\u8fd9\u4e0d\u5c31\u662f\u5b57\u7b26\u4e32 $S$ \u4e2d\u7684\u4e00\u4e2a\u5b50\u4e32\u5417\uff1f\n\n\u8fd9\u6709\u4ec0\u4e48\u7528\uff1f\u7528\u5904\u5927\u7740\u5462\u3002\n\u6211\u4eec\u56de\u5230\u9898\u76ee\uff0c\u9898\u76ee\u6c42\u7684\u662f\u7b2c $x$ \u6b21\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5728\u7b2c $y$ \u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\u8fd9\u4e2a\u600e\u4e48\u6c42\uff1f\u5c31\u8981\u5229\u7528\u521a\u624d\u6784\u5efa\u7684 Fail \u6811\n\u6211\u4eec\u628aFail\u6811\u8fb9\u53cd\u5411\u4e4b\u540e\uff0c\u5229\u7528DFS\u6c42\u4e00\u6b21DFS\u5e8f\u3002\u4ee5\u4e0a\u9762\u90a3\u5f20\u56fe\u4e3a\u4f8b\uff0c\u8dd1\u5b8c\u4e4b\u540e\u662f\u8fd9\u6837\u7684\uff1a\n\n![5][5]\n\nDfn\u6307DFS\u5e8f\uff0cLeaf\u8868\u793a\u5f53\u524d\u5b50\u6811\u7684\u6700\u5de6\u8fb9\u53f6\u5b50\u8282\u70b9\u3002\n\u8fd9\u6837\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\u6bd4\u5982\u6211\u4eec\u8981\u6c42 \"$a$\" \u5728  \"$aa$\" \u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u600e\u4e48\u6c42\uff1f\n\u6211\u4eec\u5229\u7528DFS\u5e8f\uff0c$a$\u7684DFS\u5e8f\u8bb0\u505a $d_i$\uff0c\u7136\u540e\u628a $a$ \u7684Leaf\u6c42\u51fa\u6765\uff0c\u8bb0\u505a $l_i$\n\u5f88\u663e\u7136\uff0c$l_i$\u8868\u793a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u5c31\u662f $d_i$ \u8868\u793a\u5b57\u7b26\u4e32\u3002\n\u5728\u52a0\u5165\u5b57\u7b26 $a$ \u65f6\uff0c\u628a $a_{cnt}$ \u52a0\u4e00\u3002\n\u5728\u52a0\u5165\u5b57\u7b26 $aa$ \u65f6\uff0c\u628a $aa_{cnt}$ \u52a0\u4e00\uff0c\u540c\u65f6\u628a $a_{cnt}$ \u4e5f\u52a0\u4e00\u3002\n\u8fd9\u4e2a$S_{cnt}$ \u8868\u793a\u4ec0\u4e48\u5462\uff1f\u8868\u793a\u5b57\u7b26\u4e32 $S$ \u5728\u8fd9\u68f5\u6811\u4e0a\u4e00\u5171\u662f\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002\n\u6211\u4eec\u7528\u56fe\u6765\u63cf\u8ff0\u8fd9\u4e2a\u8fc7\u7a0b\uff1a\n\n![6][6]\n\n\u6211\u4eec\u5148\u628a\u8fd9\u4e2a\u95ee\u9898\u653e\u4e00\u653e\u3002\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u6c42\u89e3\u3002\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u5728\u7ebf\u67e5\u8be2\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f $O(nm)$ \u7684\uff0c\u7206\u70b8\u5230\u5929\u8fb9\u3002\n\u6240\u4ee5\u8003\u8651\u79bb\u7ebf\u67e5\u8be2\u3002\u4e0d\u8fc7\u79bb\u7ebf\u548c\u5728\u7ebf\u6709\u5565\u533a\u522b\uff1f\n\u6211\u4eec\u5904\u7406\u6bcf\u4e00\u7ec4\u8be2\u95ee\uff0c\u628a\u540c\u4e00\u79cd\u8be2\u95ee\u4fdd\u5b58\u5728\u4e00\u8d77\u3002\n\u6bd4\u5982\u8be2\u95ee\u7b2c $1$ \u4e2a\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5728\u7b2c $3$ \u4e2a\u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u8be2\u95ee\u7b2c $2$ \u4e2a\u6253\u5370\u7684\u5b57\u7b26\u4e32\u5728\u7b2c $3$ \u4e2a\u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21\u3002\n\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u8be2\u95ee\u5408\u5e76\uff0c\u53d8\u6210\uff1a\u7b2c$3$\u4e2a\u6253\u5370\u7684\u5b57\u7b26\u4e32\u51fa\u73b0\u4e86\u51e0\u6b21\u7b2c$1$\u4e2a\uff0c\u51e0\u6b21\u7b2c$2$\u4e2a\u3002\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u6ca1\u6709\u5fc5\u8981\u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4e00\u8fb9\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u4e00\u8fb9\u5904\u7406\u3002\n\u5982\u679c\u6211\u4eec\u8bfb\u5165\u5230\u7b2c$k$\u4e2a $P$\uff0c\u90a3\u4e48\u8868\u793a\u73b0\u5728\u9700\u8981\u5904\u7406\u7b2c $k$ \u7ec4\u8be2\u95ee\u3002\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u9884\u5904\u7406\u7684DFS\u5e8f\u4f5c\u7528\u5c31\u6765\u4e86\u3002\u73b0\u5728\u76f8\u5f53\u4e8e\u6574\u68f5\u6811\u88ab\u6211\u4eec\u964d\u7ef4\u6253\u51fb\u4e86\u4e00\u4e0b\uff0c\u53d8\u6210\u4e86\u4e00\u4e2a\u5e8f\u5217\n\n![6][7]\n\n\u7136\u540e\u5f00\u59cb\u5f80\u91cc\u9762\u52a0\u5b57\u7b26\u3002\u6211\u4eec\u7528\u4e00\u4e2a\u6307\u9488 $Root$ \u6765\u8868\u793a\u5f53\u524d\u6307\u5411\u54ea\u4e2a\u8282\u70b9\u3002 \n\u6211\u4eec\u7a0d\u5fae\u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\n\n![7][8]\n\n\u597d\u7684\uff0c\u63a5\u4e0b\u6765\u95ee\u9898\u6765\u4e86\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a Deal \u64cd\u4f5c\uff0c\u6211\u4eec\u8981\u600e\u4e48\u89e3\u51b3\u5462\uff1f\n\u95ee\u9898\u7684\u5b9e\u8d28\u5c31\u662f\u7edf\u8ba1\u4ece\u6839\u5230 $l_i$ \u7684\u548c\u51cf\u53bb\u4ece\u6839\u5230 $d_i - 1$ \u7684\u548c\u3002\u5b9e\u9645\u4e0a\u5c31\u662f\u7edf\u8ba1\u533a\u95f4 $[d_i, l_i]$ \u7684 $Cnt$ \u548c\u3002\n\u4e3a\u4ec0\u4e48\u662f\u7edf\u8ba1\u8fd9\u4e2a\u5462\uff1f\u5f88\u7b80\u5355\u3002\u56e0\u4e3a\u53f6\u5b50\u8282\u70b9\u6240\u4ee3\u8868\u7684\u662f\u4e00\u6574\u4e2a\u4e32\u3002\u4f60\u53ea\u8981\u51cf\u53bb\u8fd9\u4e2a\u4e32\u6784\u6210\u7684\u65e0\u5173\u7684\u90a3\u4e00\u90e8\u5206\u5c31\u884c\u4e86\u3002\n\u5f53\u8bfb\u5165\u5230 $B$ \u65f6\uff0c\u6211\u4eec\u628a\u6307\u9488\u6307\u5411\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u3002\u5e76\u4e14\u628a $[1, l_{Root}]$ \u7684 $Cnt$ \u51cf\u4e00\u3002\u56e0\u4e3a\u5c11\u4e86\u8fd9\u4e2a\u5b57\u7b26\u3002\n\u8bfb\u5165\u5230\u5176\u4ed6\u5b57\u7b26\u7684\u65f6\u5019\uff0c\u63d2\u5165\u6811\u4e2d\uff0c\u5e76\u628a\u8fd9\u4e00\u8def ($[1, l_{Root}]$) \u7684 $Cnt$ \u52a0\u4e00\u3002\u56e0\u4e3a\u65b0\u52a0\u8fdb\u6765\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u5305\u62ec\u8fd9\u4e00\u6574\u8def\u7684\u5168\u90e8\u5b57\u7b26\u3002\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u600e\u4e48\u7ef4\u62a4\u4e0a\u8ff0\u8fc7\u7a0b\uff1f\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u5c31\u662f \u533a\u95f4\u52a0\uff0c\u4ee5\u53ca\u533a\u95f4\u6c42\u548c\u3002\n\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002 ~~\u5f53\u7136\u4f60\u786c\u8981\u7ebf\u6bb5\u6811\u6211\u4e5f\u62e6\u4e0d\u4f4f\u4f60~~ \n\n\u4ee3\u7801\uff1a\n\n    #include <cstdio>\n\t#include <queue>\n\t#include <cstring>\n\t#include <vector>\n\tconst int MaxN = 1e5 + 10;\n\t\n\tstruct Trie {\n\t    int Vis[30], End, Fail, Fa;\n\t}Ac[MaxN];\n\tint P = 1;\n\t\n\tstruct Edge {\n\t    int To, Next;\n\t}Road[MaxN];\n\t\n\tstruct Query {\n\t    int X, Y;\n\t};\n\tint Last[MaxN], Cnt;\n\t\n\tvoid Add(int U, int V) {\n\t    Road[++Cnt] = (Edge) {V, Last[U]}, Last[U] = Cnt;\n\t}\n\t\n\tint Lowbit(int X) {\n\t    return X & (-X);\n\t}\n\t\n\tint Tree[MaxN];\n\tint N, M;\n\t\n\tvoid Update(int X, int K) {\n\t    while(X < MaxN) {\n\t        Tree[X] += K;\n\t        X += Lowbit(X);\n\t    }\n\t} \n\t\n\tint Sum(int X) {\n\t    int Ans = 0;\n\t    while(X) {\n\t        Ans += Tree[X];\n\t        X -= Lowbit(X);\n\t    }\n\t    return Ans;\n\t}\n\t\n\tchar Or[MaxN], A[MaxN];\n\tint Q[MaxN], Cur = 0, Ret = 0;\n\t\n\tvoid Insert(char *S, int Root) {\n\t    for(int i = 0; S[i]; i++) {\n\t        if(S[i] == 'P') Q[++Ret] = Root; \n\t        else {\n\t            if(S[i] == 'B') Root = Ac[Root].Fa;\n\t            else {\n\t                int Now = S[i] - 'a';\n\t                if(!Ac[Root].Vis[Now]) Ac[Root].Vis[Now] = P, Ac[P].Fa = Root, P += 1;\n\t                Root = Ac[Root].Vis[Now];\n\t            }\n\t        }\n\t    Ac[Root].End = 1;\n\t    }\n\t}\n\t\n\tvoid Build() {\n\t    std::queue<int> Que;\n\t    for(int i = 0; i < 26; i++) if(Ac[0].Vis[i]) Ac[Ac[0].Vis[i]].Fail = 0, Que.push(Ac[0].Vis[i]);\n\t    while(!Que.empty()) {\n\t        int Top = Que.front(); Que.pop();\n\t        for(int i = 0; i < 26; i++) {\n\t            int Vis = Ac[Top].Vis[i];\n\t            if(Vis) {\n\t                Ac[Vis].Fail = Ac[Ac[Top].Fail].Vis[i];\n\t                Que.push(Ac[Top].Vis[i]);\n\t            }\n\t            else Ac[Top].Vis[i] = Ac[Ac[Top].Fail].Vis[i];\n\t        }\n\t    }\n\t}\n\t\n\tint Dfn[MaxN], Time = 0, R[MaxN];\n\t\n\tvoid Dfs(int Now) {\n\t    Dfn[Now] = ++Time;\n\t    for(int i = Last[Now]; i; i = Road[i].Next) {\n\t        int To = Road[i].To;\n\t        Dfs(To);\n\t    }\n\t    R[Now] = Time;\n\t}\n\t\n\tint Tot[MaxN];\n\tint Ans[MaxN];\n\t\n\tint main() {\n\t    scanf(\"%s\", Or);\n\t    Insert(Or, 0); Build();\n\t    std::vector <Query> Ask[MaxN];\n\t    for(int i = 1; i < P; i++) Add(Ac[i].Fail, i);\n\t    Dfs(0); int Root = 0; scanf(\"%d\", &N);\n\t    for(int i = 0; i < N; i++) {\n\t        int X, Y; scanf(\"%d%d\", &X, &Y);\n\t        Ask[Y].push_back((Query) {X, i});\n\t    }\n\t    Update(Dfn[0], 1);\n\t    Ret = 0; \n\t    for(int i = 0; Or[i]; i++) {\n\t        if(Or[i] == 'P') {\n\t            Ret += 1;\n\t            for(int j = 0; j < Ask[Ret].size(); j++) {\n\t                int X = Q[Ask[Ret][j].X];\n\t                Ans[Ask[Ret][j].Y] = Sum(R[X]) - Sum(Dfn[X] - 1);\n\t            }\n\t        }\n\t        else if(Or[i] == 'B') Update(Dfn[Root], -1), Root = Ac[Root].Fa;\n\t        else Root = Ac[Root].Vis[Or[i] - 'a'], Update(Dfn[Root], 1);\n\t     }\n\t    for(int i = 0; i < N; i++) printf(\"%d\\n\", Ans[i]);\n\t} \n\n\u9644\u5f55\uff1a\n\n1.[\u6d1b\u8c37 P2414 \u963f\u72f8\u7684\u6253\u5b57\u673a][9]\n\n2.[AC\u81ea\u52a8\u673a \u2014\u2014 Trie\u6811\u4e0eKMP\u601d\u60f3][10]\n\n\n3.:[\u5728\u6211\u7684blog\u4e0a\u9762\u67e5\u770b\u8fd9\u7bc7\u6587\u7ae0](http://xiaoyao24256.com/index.php/archives/189/)\n\n  [1]: https://i.loli.net/2018/07/16/5b4c311e1b99c.png\n  [2]: https://i.loli.net/2018/07/16/5b4c3169b3943.png\n  [3]: https://i.loli.net/2018/07/16/5b4c3377bf296.png\n  [4]: https://i.loli.net/2018/07/16/5b4c33b7068b8.png\n  [5]: https://i.loli.net/2018/07/16/5b4c3c7b6b077.png\n  [6]: https://i.loli.net/2018/07/16/5b4c54ba3abcf.png\n  [7]: https://i.loli.net/2018/07/16/5b4c4a5388fda.png\n  [8]: https://i.loli.net/2018/07/16/5b4c4c71ccb25.png\n  [9]: https://www.luogu.org/problemnew/show/P2414\n  [10]: http://xiaoyao24256.com/index.php/archives/48/",
        "postTime": 1531833656,
        "uid": 17757,
        "name": "WhiteEurya",
        "ccfLevel": 0,
        "title": "\u963f\u72f8\u7684\u6253\u5b57\u673a \u2014\u2014 AC\u81ea\u52a8\u673a\u3001Fail\u6811"
    },
    {
        "content": "## \u4e00\u3001\u9898\u76ee\n[\u7535\u78c1\u770b\u9898](https://www.luogu.com.cn/problem/P2414)\n## \u4e8c\u3001\u89e3\u6cd5\n\u6211\u4eec\u5148\u5bf9\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5efa\u51fa$AC$\u81ea\u52a8\u673a\uff0c\u81ea\u52a8\u673a\u7684\u70b9\u6570\u662f$O(n)$\u7684\uff0c\u5efa\u6cd5\u5982\u4e0b:\n\n- \u9047\u5230\u5c0f\u5199\u5b57\u6bcd\uff0c\u8df3\u81ea\u52a8\u673a\u4e0a\u7684\u8fb9\uff0c\u770b\u662f\u5426\u9700\u8981\u65b0\u5efa\u70b9\u3002\n\n- \u9047\u5230``P``\uff0c\u5b58\u4e0b\u5b57\u7b26\u4e32\u5bf9\u5e94\u5728\u81ea\u52a8\u673a\u4e0a\u7684\u70b9\u7f16\u53f7\u3002\n\n- \u9047\u5230``B``\uff0c\u5411\u5f53\u524d\u70b9\u7684\u7236\u4eb2\u4e0a\u8df3\u3002\n\n\u8003\u8651$x$\u4e32\u5728$y$\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5177\u4f53\u8fc7\u7a0b\u5c31\u662f\u5728\u81ea\u52a8\u673a\u4e0a\u8df3\u5230$y$\uff0c\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd\u53bb\u8df3$fail$\uff0c\u8df3\u5230$x$\u5bf9\u5e94\u70b9\u7684\u6b21\u6570\u5373\u4e3a\u51fa\u73b0\u6b21\u6570\u3002\u8fd8\u6709\u53e6\u4e00\u79cd\u7406\u89e3\u65b9\u6cd5\uff0c\u5982\u679c\u6211\u4eec\u5efa\u51fa$fail$\u6811\uff0c\u628a$y$\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u5728\u6811\u4e0a\u6253\u6807\u8bb0\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u67e5\u8be2$x$\u4e3a\u6839\u7684\u5b50\u6811\u5185\u6709\u591a\u5c11\u4e2a\u88ab\u6253\u4e0a\u6807\u8bb0\u7684\u70b9\u3002\n\n\u53ef\u4ee5\u79bb\u7ebf\u8be2\u95ee\uff0c\u8fd9\u6837\u5c31\u65b9\u4fbf\u4e86\u6253\u6807\u8bb0\u548c\u64a4\u56de\u6807\u8bb0\uff0c\u81f3\u4e8e\u67e5\u8be2\u5b50\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u7528``dfn+\u6811\u72b6\u6570\u7ec4``\u5b9e\u73b0\u3002\u6211\u4eec\u9010\u4e2a\u8bbf\u95ee\u7b2c\u4e00\u884c\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\uff1a\n- \u9047\u5230\u5c0f\u5199\u5b57\u7b26\uff0c\u5411\u4e0b\u8df3\uff08$trie$\u6811\uff09\uff0c\u6253\u6807\u8bb0\uff08\u6811\u72b6\u6570\u7ec4\u5355\u70b9\u4fee\u6539\uff09\u3002\n\n- \u9047\u5230``P``\uff0c\u56de\u7b54\u79bb\u7ebf\u4e0b\u6765\u7684\u95ee\u9898\uff08\u6811\u72b6\u6570\u7ec4\u533a\u95f4\u67e5\u8be2\uff09\u3002\n\n- \u9047\u5230``B``\uff0c\u5411\u7236\u4eb2\u8df3\uff08$trie$\u6811\uff09\uff0c\u5220\u9664\u6807\u8bb0\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n)$\uff0c\u8be6\u89c1\u4ee3\u7801\uff0c\u81ea\u8ba4\u4e3a\u5199\u7684\u6bd4\u8f83\u597d\u770bqwq\u3002\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <queue>\nusing namespace std;\nconst int M = 100005;\nint read()\n{\n int x=0,flag=1;char c;\n while((c=getchar())<'0' || c>'9') if(c=='-') flag=-1;\n while(c>='0' && c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n return x*flag;\n}\nint n,a[M],tot,f[M],c[M][26],val[M],fail[M],fa[M],cnt;\nint m,len,Index,dfn[M],out[M],bit[M],ans[M];\nchar s[M];\nstruct edge\n{\n    int v,next;\n    edge(int V=0,int N=0) : v(V) , next(N) {}\n}e[2*M];\nstruct node\n{\n    int x,id;\n    node(int X=0,int I=0) : x(X) , id(I) {}\n};vector<node> g[M];\nvoid link(int u,int v)\n{\n    e[++tot]=edge(v,f[u]),f[u]=tot;\n    e[++tot]=edge(u,f[v]),f[v]=tot;\n}\nvoid ins()\n{\n    scanf(\"%s\",s);\n    len=strlen(s);\n    for(int i=0,now=0;i<len;i++)\n    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            int v=s[i]-'a';\n            if(!c[now][v]) c[now][v]=++cnt,fa[cnt]=now;\n            now=cnt;\n        }\n        if(s[i]=='P')\n            a[++n]=now;\n        if(s[i]=='B')\n            now=fa[now];\n    }\n}\nvoid dfs(int u,int p)\n{\n    dfn[u]=++Index;\n    for(int i=f[u];i;i=e[i].next)\n    {\n        int v=e[i].v;\n        if(v^p) dfs(v,u);\n    }\n    out[u]=Index;\n}\nvoid build()\n{\n    queue<int> q;\n    for(int i=0;i<26;i++) if(c[0][i]) q.push(c[0][i]);\n    while(!q.empty())\n    {\n        int t=q.front();\n        q.pop();\n        for(int i=0;i<26;i++)\n            if(c[t][i]) fail[c[t][i]]=c[fail[t]][i],q.push(c[t][i]);\n            else c[t][i]=c[fail[t]][i];\n    }\n    for(int i=1;i<=cnt;i++)\n        link(i,fail[i]);\n    dfs(0,0);\n}\nint lowbit(int x)\n{\n    return x&(-x);\n}\nvoid change(int x,int y)\n{\n    for(;x<=Index;x+=lowbit(x))\n        bit[x]+=y;\n}\nint ask(int x)\n{\n    int sum=0;\n    for(;x>0;x-=lowbit(x)) sum+=bit[x];\n    return sum;\n}\nint main()\n{\n    ins();\n    build();\n    m=read();\n    for(int i=1;i<=m;i++)\n    {\n        int x=read(),y=read();\n        g[y].push_back(node(x,i));\n    }\n    for(int i=0,now=0,j=0;i<len;i++)\n    {\n        if(s[i]=='P')\n        {\n            j++;\n            for(int k=0;k<g[j].size();k++)\n            {\n                int x=g[j][k].x,id=g[j][k].id;\n                ans[id]=ask(out[a[x]])-ask(dfn[a[x]]-1);\n            }\n        }\n        if(s[i]=='B')\n        {\n            change(dfn[now],-1);\n            now=fa[now];\n        }\n        if(s[i]>='a' && s[i]<='z')\n        {\n            now=c[now][s[i]-'a'];\n            change(dfn[now],1);\n        }\n    }\n    for(int i=1;i<=m;i++)\n        printf(\"%d\\n\",ans[i]);\n}\n\n```\n\n",
        "postTime": 1580357913,
        "uid": 128239,
        "name": "C20203030",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "#### \u9898\u89e3Rank1\u597d\u50cf\u8fde\u7eed\u4e24\u4e2aP\u5c31\u4f1a\u88abhack\u2026\u2026\n\n~~\u6211\u4e0d\u4f1a\u8bf4\u6211\u56e0\u4e3a\u79bb\u7ebf\u5904\u7406\u5b8c\u540e\u6ca1\u6709\u91cd\u65b0\u6392\u5e8f\u8be2\u95eeWA\u4e861h~~\n\n~~\u6211\u4e5f\u4e0d\u4f1a\u8bf4\u6211\u5728\u5bf9\u62cd\u8c03\u8bd5\u7684\u65f6\u5019hack\u4e863\u7bc7\u9898\u89e3~~\n\n\u6069\u770b\u5927\u5bb6\u8fd9\u4e2a\u9898\u90fd\u6e05\u4e00\u8272\u7684\u6811\u72b6\u6570\u7ec4\u2026\u2026\u53ef\u662f\u6211\u7528\u7684\u7ebf\u6bb5\u6811\n\n~~\u4f46\u662f\u56e0\u4e3a\u6211\u4e0d\u4f1a\u5199\u6811\u72b6\u6570\u7ec4~~\n\n~~\u800c\u4e14\u53ef\u80fd\u6211\u5e38\u6570\u5c0f\u6211\u7684\u7ebf\u6bb5\u6811\u8dd1\u7684\u5e76\u4e0d\u662f\u5f88\u6162~~\n\n\u8fdb\u5165\u6b63\u9898\n\n\u4e00\u6b65\u4e00\u6b65\u5206\u6790\n\n# step1\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u4f55\u5efa\u7acbtrie\u6811\u5462\uff1f\n\n\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u548c\u666e\u901aAC\u81ea\u52a8\u673a\u7684\u63d2\u5165\u5355\u8bcd\u64cd\u4f5c\u5dee\u4e0d\u591a\n\n\u5982\u679c\u5f53\u524d\u8981\u5904\u7406\u7684\u662f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5c31\u5f80\u5f53\u524d\u8282\u70b9\u7684\u513f\u5b50\u8d70\n\n\u5982\u679c\u5f53\u524d\u662fP\uff0c\u610f\u5473\u7740\u4ece\u6839\u5230\u5f53\u524d\u8282\u70b9\u7ec4\u6210\u4e86\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u5355\u8bcd\u7684\u4f4d\u7f6e\n\n\u5982\u679c\u5f53\u524d\u662fB\uff0c\u90a3\u4e48\u5c31\u5f80\u5f53\u524d\u8282\u70b9\u7684\u7236\u4eb2\u8d70\u3002(\u6bd5\u7adf\u672b\u5c3e\u7684\u4e00\u4e2a\u5b57\u6bcd\u5220\u6389\u4e86)\n\n# step2\n\n\u5efa\u7acb\u597dtrie\u6811\u987a\u5e26\u628atrie\u6811\u8865\u6210trie\u56fe\u4e14\u8fde\u597dfail\u540e\uff0c\u6211\u4eec\u8003\u8651\u66b4\u529b\n\n\u5982\u4f55\u5224\u65ad\u5355\u8bcdx\u662f\u5426\u662fy\u7684\u5b50\u4e32\u5462\uff1f\n\n\u6839\u636eAC\u81ea\u52a8\u673a\u548cfail\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u77e5\u9053\u4e24\u4e2a\u7ed3\u8bba\uff1a\n\n1.trie\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5355\u8bcd\uff0c\u80af\u5b9a\u662f\u5f53\u524d\u6240\u4ee3\u8868\u7684\u5355\u8bcd\u7684\u524d\u7f00\n\n2.\u4e00\u4e2a\u8282\u70b9\u7684fail\u6307\u9488\u6307\u5411\u7684\u80af\u5b9a\u662f\u5f53\u524d\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5355\u8bcd\u7684\u6700\u957f\u540e\u7f00\n\n\u800c\u4e14\u5b50\u4e32\u53ef\u4ee5\u7406\u89e3\u4e3a\u524d\u7f00\u7684\u540e\u7f00\u3002\n\n\u66b4\u529b\u7684\u8bdd\u5c31\u4ece\u6839\u5230y\u904d\u5386\u6240\u6709\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u5f80\u4e0a\u66b4\u8df3fail\uff0c\u5982\u679c\u9047\u5230x\u5355\u8bcd\u7684\u7ed3\u5c3e\u5c31ans+1\n\n\n\n------------\n\n\u5f53\u7136\u8fd9\u6837\u5206\u80af\u5b9a\u4e0d\u591a\u5c31\u662f\u4e86\u2026\u2026\n\n\u8003\u8651\u9006\u5411\u601d\u7ef4\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u9897fail\u6811\u3002(\u4e0d\u77e5\u9053\u662f\u5565\u7684\u5148\u53bb\u767e\u5ea6)\n\n\u90a3\u4e48\u6211\u4eec\u539f\u672c\u662f\u8981\u8003\u8651\u6240\u6709\u5c5e\u4e8ey\u5355\u8bcd\u7684\u8282\u70b9\u6709\u54ea\u4e9b\u80fd\u591f\u66b4\u8df3fail\u6307\u9488\u5230x\u5355\u8bcd\u7ed3\u5c3e \n\n\u73b0\u5728\u5c31\u53d8\u6210\u4e86\u8003\u8651fail\u6811\u4e2dy\u5355\u8bcd\u7684\u8282\u70b9\u6709\u54ea\u4e9b\u5728x\u7684\u5b50\u6811\u4e2d\u4e86\u3002\n\n\u8fd8\u662f\u4e0d\u662f\u5f88\u597d\u641e\u5bf9\u4e48\u2026\u2026\uff1f\u90a3\u5c31\u79bb\u7ebf\n\n\u8be2\u95ee\u6309\u7167y\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u6309\u7167\u5efa\u7acbtrie\u6811\u7684\u8fc7\u7a0b\u91cd\u65b0\u904d\u5386\u4e00\u904dtrie\u6811\n\n\u8fd9\u6837\u6211\u4eec\u7ecf\u5386\u5355\u8bcd\u7684\u987a\u5e8f\u80af\u5b9a\u662f\u7b2c\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u2026\u2026\u7b2csum\u4e2a\u5355\u8bcd\n\n\u6bcf\u5f80\u4e0b\u8d70\u4e00\u6b65\uff0c\u6211\u4eec\u5c31\u7ed9\u5230\u7684\u8282\u70b9\u7684\u6743\u503c\u52a0\u4e00\n\n\u6bcf\u5f80\u4e0a\u8df3\u4e00\u6b65\uff0c\u6211\u4eec\u5c31\u7ed9\u79bb\u5f00\u7684\u8282\u70b9\u7684\u6743\u503c\u51cf\u4e00\n\n\u5f53\u6211\u4eec\u8df3\u5230\u7b2ci\u4e2a\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u5c31\u5904\u7406\u8be2\u95ee\u91ccy=i\u7684\u6240\u6709\u60c5\u51b5\n\n\u5c31\u662f\u67e5\u8be2\u4e00\u4e0bfail\u6811\u4e2dx\u7684\u5b50\u6811\u6743\u503c\u548c\n\n\u8fd9\u4e2aDFS\u5e8f+\u7ebf\u6bb5\u6811\u5c31\u5f88\u597d\u641e\u4e86 \n\n\u4ee3\u7801\u4e0d\u8d34\u4e86\u6709\u70b9\u957f(\u5176\u5b9e\u662f\u60f3\u5b89\u5229\u4e00\u4e0b\u535a\u5ba2)\n\n[Blog](http://www.cnblogs.com/refun/p/8697626.html)\n",
        "postTime": 1522677170,
        "uid": 41890,
        "name": "Refun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "# [NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\uff08AC\u81ea\u52a8\u673a\uff0cFail\u6811\uff0c\u79bb\u7ebf\uff0c\u6811\u72b6\u6570\u7ec4\uff09\n\n\u5199\u9898\u89e3\u524d\u5148\u653e\u963f\u72f8\uff01\n![](https://cdn.luogu.com.cn/upload/image_hosting/lwntsudk.png)\n\n## \u9898\u76ee\u53d9\u8ff0\n\n\u7ed9\u4f60\u82e5\u5e72\u4e2a\u5b57\u7b26\u4e32\uff08\u8f93\u5165\u65b9\u5f0f\u5947\u7279\uff09\uff0c\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21\u3002\n\n## \u9898\u89e3\n\n+ \u9996\u5148\u6784\u5efa`Trie`\uff08\u5982\u679c\u9898\u76ee\u4e0d\u6309\u8fd9\u79cd\u65b9\u5f0f\u8f93\u5165\u7684\u8bdd\uff0c\u90a3\u4e48\u8f93\u5165\u5c31\u4f1a\u8fc7\u591a\u3002\u3002\u3002\n\n+ \u5bf9\u4e8e\u8fd9\u4e2a`Trie`\u5efa\u7acb`AC`\u81ea\u52a8\u673a\u3002\u5229\u7528`Fail`\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u4e2d\u6709\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7b49\u4ef7\u4e8e\u5728`Fail`\u6811\u4e2d\uff0c\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u6709\u53e6\u4e00\u4e2a\u8282\u70b9\uff08\u5728`Fail`\u6811\u4e2d\uff09\u3002\u4e5f\u5c31\u662f\u770b\u4e00\u4e2a\u70b9\u5728`Trie`\u4e2d\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709\u591a\u5c11\u4e2a\u5c5e\u4e8e\u90a3\u4e2a\u70b9\u7684`Fail`\u6811\u3002\n\n+ \u4e5f\u5c31\u76f8\u5f53\u4e8e\u7ed9\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u90fd\u6253\u4e0a\u6807\u8bb0\uff0c\u770b\u5b50\u6811\u6743\u503c\u548c\u3002\u4e3a\u4e86\u4e0d\u591a\u6b21\u6253\u6807\u8bb0\uff0c\u8003\u8651\u5229\u7528\u76f8\u90bb\u4e24\u6b21\u6253\u6807\u8bb0\u516c\u5171\u7684\u90e8\u5206\uff0c\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u865a\u6811\u7684\u4e1c\u4e1c\uff0c\u6bcf\u6b21\u64a4\u9500\u4e00\u90e8\u5206\u6807\u8bb0\uff0c\u518d\u65b0\u589e\u4e00\u90e8\u5206\u3002\u6240\u4ee5\u53ef\u4ee5\u5148\u6309`dfs`\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6253\u6807\u8bb0\u3001\u64a4\u6807\u8bb0\u5373\u53ef\u3002\n+ \u4f46\u662f\u53d1\u73b0\u5e76\u4e0d\u9700\u8981\u8fd9\u6837\uff0c\u53ef\u4ee5\u53d1\u73b0\u672c\u8d28`dfs`\uff0c\u628a\u8fd9\u68f5\u6811`dfs`\u4e00\u904d\uff0c\u5230\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5904\u7406\u51fa\u8fd9\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u6253\u6807\u8bb0\u7684\u60c5\u51b5\u3002\u628a\u5173\u4e8e\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u8be2\u95ee\u90fd\u8bb0\u4e0b\u6765\uff0c\u5b50\u6811\u8be2\u95ee\u5373\u53ef\u3002\u5177\u4f53\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u3002\n\n## \u4ee3\u7801\n\n+ \u5f04\u6e05\u695a\u662f\u8c01\u5728\u8c01\u7684\u5b50\u6811\u91cc\u67e5\u8be2\uff01\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#define lowbit(x) ((x)&(-(x)))\nusing namespace std;\nconst int maxLen = 1e5 + 5, maxQue = 1e5 + 5;\nint len, nbQue, tot, wordId, dfstime, ch[maxLen][26], fa[maxLen], wordPos[maxLen], fail[maxLen];\nint in[maxLen], out[maxLen], ans[maxLen], cpy[maxLen][26];\nchar str[maxLen];\nqueue<int> Q;\nvector<int> tree[maxLen], ask[maxLen];\nstruct Query {\n\tint mo, wenBen;\n} que[maxQue];\nstruct Fenwick {\n\tint sum[maxLen];\n\tvoid Add(int pos, int val) {\n\t\tfor (; pos <= tot; pos += lowbit(pos))\n\t\t\tsum[pos] += val;\n\t}\n\tint Pre(int pos) {\n\t\tint ret = 0;\n\t\tfor (; pos; pos -= lowbit(pos)) ret += sum[pos];\n\t\treturn ret;\n\t}\n\tint Query(int lEP, int rEP) {\n\t\treturn Pre(rEP) - Pre(lEP - 1);\n\t}\n} sum;\nvoid Bfs() {\n\tfail[1] = 1;\n\tfor (int son = 0; son < 26; ++son) {\n\t\tif (ch[1][son]) {\n\t\t\tQ.push(ch[1][son]);\n\t\t\tfail[ch[1][son]] = 1;\n\t\t} else\n\t\t\tch[1][son] = 1;\n\t}\n\twhile (!Q.empty()) {\n\t\tint now = Q.front();\n\t\tQ.pop();\n\t\tfor (int son = 0; son < 26; ++son) {\n\t\t\tif (ch[now][son]) {\n\t\t\t\tQ.push(ch[now][son]);\n\t\t\t\tfail[ch[now][son]] = ch[fail[now]][son];\n\t\t\t} else\n\t\t\t\tch[now][son] = ch[fail[now]][son];\n\t\t}\n\t}\n}\nvoid Dfs(int now) {\n\tin[now] = ++dfstime;\n\tfor (auto to : tree[now])\n\t\tDfs(to);\n\tout[now] = dfstime;\n}\nvoid Solve(int now) {\n\tsum.Add(in[now], 1);\n\tfor (auto id : ask[now])\n\t\tans[id] = sum.Query(in[wordPos[que[id].mo]], out[wordPos[que[id].mo]]);\n\tfor (int son = 0; son < 26; ++son)\n\t\tif (cpy[now][son])\n\t\t\tSolve(cpy[now][son]);\n\tsum.Add(in[now], -1);\n}\nint main() {\n\tscanf(\"%s%d\", str + 1, &nbQue);\n\ttot = 1;\n\tlen = strlen(str + 1);\n\tint now = 1;\n\tfor (int pos = 1; pos <= len; ++pos) {\n\t\tif ('a' <= str[pos] && str[pos] <= 'z') {\n\t\t\tif (!ch[now][str[pos] - 'a']) {\n\t\t\t\tch[now][str[pos] - 'a'] = ++tot;\n\t\t\t\tfa[tot] = now;\n\t\t\t}\n\t\t\tnow = ch[now][str[pos] - 'a'];\n\t\t} else if (str[pos] == 'P') wordPos[++wordId] = now;\n\t\telse now = fa[now];\n\t}\n\tmemcpy(cpy, ch, sizeof(ch));\n\tBfs();\n\tfor (int i = 2; i <= tot; ++i) tree[fail[i]].push_back(i);\n\tDfs(1);\n\tfor (int i = 1; i <= nbQue; ++i) {\n\t\tscanf(\"%d%d\", &que[i].mo, &que[i].wenBen);\n\t\task[wordPos[que[i].wenBen]].push_back(i);\n\t}\n\tSolve(1);\n\tfor (int i = 1; i <= nbQue; ++i) printf(\"%d\\n\", ans[i]);\n\treturn 0;\n}\n```\n\n## \u77e5\u8bc6\u70b9\n\n+ \u8bb0\u5f55\u8fd9\u79cd\u79bb\u7ebf\u7684\u5904\u7406\u65b9\u6cd5\uff08\u6bd4\u5982\u9700\u8981\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u90fd\u6253\u4e0a\u6807\u8bb0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u8be2\u95ee\u6302\u5728\u70b9\u4e0a\uff0c\u904d\u5386\u6574\u68f5\u6811\uff0c\u904d\u5386\u5230\u4e00\u4e2a\u8282\u70b9\u65f6\u56de\u7b54\u8be2\u95ee\uff09\u3002\n+ \u8bb0\u4f4f\u8fd9\u79cd`Fail`\u6811\u7684\u7528\u6cd5\u3002",
        "postTime": 1582908802,
        "uid": 75715,
        "name": "KokiNiwa",
        "ccfLevel": 0,
        "title": "[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u306eblog](http://www.cnblogs.com/dedicatus545/p/8907400.html)\n\n# \u6b63\u6587\n\n### \u6700\u66b4\u529b\u7684\n\n\u6700\u66b4\u529b\u7684\u65b9\u6cd5\uff1a\u628a\u6240\u6709\u8be2\u95ee\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u8dd1\u4e00\u904dkmp\u7136\u540e\u8f93\u51fa\n\n\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b:\u628a\u6240\u6709\u8be2\u95ee\u4fdd\u5b58\u8d77\u6765\uff0c\u628a\u6a21\u677f\u4e32\u76f8\u540c\u7684\u5408\u5e76\uff0c\u6c42\u51fanext\u7136\u540e\u5339\u914d\n\n\u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u6cd5\u672c\u8d28\u6ca1\u6709\u533a\u522b\uff0c\u90fd\u662f\u66b4\u529b\n\n### \u4e0d\u90a3\u4e48\u66b4\u529b\u7684\n\n\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u7684\u4e32\u5efa\u7acb\u4e00\u4e2aAC\u81ea\u52a8\u673a\uff0c\u628a\u8be2\u95ee\u6309\u7167$y$\u6392\u5e8f\uff0c\u7136\u540e\u5728AC\u81ea\u52a8\u673a\u4e0a\u9762\u8dd1\uff0c\u6bcf\u6b21\u8df3fail\u66f4\u65b0\u7b54\u6848\n\n\u8fd9\u6837\u53ef\u4ee5\u62ff\u523070\u5206\uff0c\u4f46\u662f\u65f6\u95f4\u4e0a\u9650\u8fd8\u662f\u4f1a$O\\left(n^2\\right)$\u5de6\u53f3\n\n### \u5de7\u5999\u7684\u4f18\u5316\n\n\u8fd9\u9053\u9898\u91cc\u9762\uff0c\u6240\u6709\u7684\u6a21\u677f\u4e32\u548c\u6587\u672c\u4e32\u90fd\u5728AC\u81ea\u52a8\u673a\u91cc\n\n\u90a3\u4e48\uff0c\u9898\u76ee\u4e2d\u5b9e\u9645\u662f\u5728\u8981\u6c42\u4ec0\u4e48\u5462\uff1f\n\n\u5c31\u662f\u6709\u591a\u5c11\u4e2ax\u4e32\u662fy\u4e32\u7684\u4e00\u4e2a\u524d\u7f00\u7684\u540e\u7f00\n\n\u90a3\u4e48\uff0c\u5728AC\u81ea\u52a8\u673a**\u81ea\u5df1\u8eab\u4e0a**\u6709\u6ca1\u6709\u6ee1\u8db3\u8fd9\u6837\u7684\u68c0\u7d22\u7684\u7ed3\u6784\u5462\uff1f\n\n\u6709\u7684\uff0c\u90a3\u5c31\u662ffail\u6307\u9488\n\ntrie\u4e0a\u7684\u67d0\u4e00\u4e2a\u524d\u7f00\u7684fail\u6307\u9488\uff0c\u6307\u5411\u7684\u662f\u4f5c\u4e3a\u5b83\u7684\u6700\u957f\u540e\u7f00\u7684\u90a3\u4e2a\u8282\u70b9\uff1b\u540c\u65f6\uff0c\u4ece\u67d0\u4e2a\u524d\u7f00\u5f00\u59cb\u4e00\u8def\u6cbf\u7740fail\u6307\u9488\u8df3\uff0c\u76f4\u5230\u6839\u8282\u70b9\uff0c\u8fc7\u7a0b\u4e2d\u6240\u6709\u7684\u8282\u70b9\u4ee3\u8868\u7684\u524d\u7f00\u90fd\u662f\u8fd9\u4e2a\u524d\u7f00\u7684\u540e\u7f00\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u628afail\u6307\u9488\u770b\u6210\u6811\u8fb9\uff0c\u5c06\u8fd9\u4e2a\u201cfail\u6811\u201d\uff08\u4e0d\u8981\u548ckmp\u7684next\u6811\u641e\u6df7\u4e86\uff09\u63d0\u53d6\u51fa\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u9898\u76ee\u7684\u8be2\u95ee\u53d8\u6210\u8fd9\u6837\uff1a\n\n\u628a\u4ee3\u8868y\u4e32\u7684\u6240\u6709\u524d\u7f00\u7684\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u90a3\u4e48\u4ee3\u8868x\u4e32\u7684\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6807\u8bb0\u4e2a\u6570\uff0c\u5c31\u662f\u8fd9\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\n\n\u7ef4\u62a4\u4e2a\u6570\u548c\u53ef\u4ee5\u7528fail\u6811\u4e0a\u7684dfs\u5e8f\u4ee5\u53ca\u6811\u72b6\u6570\u7ec4\u5171\u540c\u5b8c\u6210\n\n### \u6b63\u89e3\n\n\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u5730\u65b9\uff1a\u6bcf\u6b21\u6211\u4eec\u90fd\u9700\u8981\u628a\u6811\u72b6\u6570\u7ec4\u5f52\u96f6\uff0c\u7136\u540e\u91cd\u65b0\u628a\u65b0\u7684y\u4e32\u524d\u7f00\u8282\u70b9\u63d2\u8fdb\u53bb\u2014\u2014\u5373\u4f7f\u6211\u4eec\u4f7f\u7528\u628ay\u6392\u5e8f\u7684\u65b9\u6cd5\u4e5f\u4f1aTLE\n\n\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6709\u4e9b\u70b9\u4f1a\u8fdb\u8fdb\u51fa\u51fa\u597d\u591a\u904d\uff0c\u5e76\u4e0d\u9ad8\u6548\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u529e\u6cd5\uff0c\u4f7f\u5f97\u6bcf\u4e2aAC\u81ea\u52a8\u673a\u4e0a\u7684\u70b9\u53ea\u8fdb\u51fa\u6811\u72b6\u6570\u7ec4\u4e00\u6b21\n\n\u90a3\u4e48\u8c01\u80fd\u6ee1\u8db3\u8fd9\u4e2a\u8981\u6c42\u5462\uff1f\n\n\u8fd8\u662fdfs\u5e8f\uff0c\u53ea\u4e0d\u8fc7\u662f\u539ftrie\u6811\u4e0a\u7684dfs\u5e8f\n\n\u6211\u4eec\u628a\u8f93\u5165\u7684\u8be2\u95ee\u6309\u7167y\u4e32\u5728trie\u6811\u4e0a\u7684dfs\u5e8f\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u3001\u5220\u9664\n\n\u56e0\u4e3a\u6309\u7167dfs\u5e8f\u904d\u5386\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u70b9\u8fdb\u5165\u4e00\u6b21\u79bb\u5f00\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u7684\u603b\u65f6\u95f4\u6548\u7387\u53ea\u6709$O\\left(nlogn\\right)$\n\n\u8fd9\u6837\u8fd9\u9053\u9898\u5c31\u505a\u5b8c\u4e86\n\n# Code\n\n\u672c\u9898\u7684\u6620\u5c04\u975e\u5e38\u591a\uff0c\u800c\u4e14\u5f88\u7e41\u590d\uff0c\u6709\u5f88\u591a\u91cd\u590d\u610f\u4e49\u7684\u4e1c\u897f\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5c0f\u5fc3\n\n\u53d8\u91cf\u540d\u6709\u70b9\u4e71\uff0c\u8fd8\u8bf7\u89c1\u8c05\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#define rank deep_dark_fantasy\nusing namespace std;\nstruct node{\n    int fail,fa,son[26];\n    vector<int>num;\n    node(){fail=fa=0;memset(son,0,sizeof(son));num.clear();}\n}a[100010];int cnt,tot;\nint dfn[100010],clk,end[100010],tmplca,pre[100010],rank[100010];\n//dfn\u662ftrie\u6811dfs\u5e8f\uff0crank\u662fdfn\u7684\u53cd\u6620\u5c04\n//end\u662f\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5728trie\u6811\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\n//pre\u8868\u793a\u7531dfs\u5e8f\u4e3ai\u7684\u4e32\u5411dfs\u5e8f\u4e3ai+1\u7684\u4e32\u8f6c\u79fb\u65f6\u7684lca\uff0ctmplca\u662f\u7ef4\u62a4\u8fd9\u4e2a\u7684\u8f85\u52a9\u53d8\u91cf\nstruct edge{\n    int to,next;\n}e[100010];int cnte,first[100010];\ninline void addedge(int u,int v){\n    e[++cnte]=(edge){v,first[u]};first[u]=cnte;\n}\ninline void add(char s[]){\n    int len=strlen(s),cur=0,i;\n    for(i=0;i<len;i++){\n        if(s[i]=='P'){a[cur].num.push_back(++tot);continue;}\n        if(s[i]=='B'){cur=a[cur].fa;continue;}\n        if(!a[cur].son[s[i]-'a']) a[cur].son[s[i]-'a']=++cnt;\n        a[a[cur].son[s[i]-'a']].fa=cur;cur=a[cur].son[s[i]-'a'];\n    }\n}\nvoid getdfn(int u){\n    int i,v,len=a[u].num.size();\n    for(i=0;i<len;i++){\n        dfn[++clk]=a[u].num[i];\n        rank[a[u].num[i]]=clk;\n        end[a[u].num[i]]=u;\n        pre[clk]=tmplca;tmplca=u;\n    }\n    for(i=0;i<26;i++){\n        v=a[u].son[i];if(!v) continue;\n        getdfn(v);tmplca=u;\n    }\n}\nint q[100010];\nvoid getfail(){\n    int head=0,tail=0,i,u,v;\n    for(i=0;i<26;i++){\n        if(!a[0].son[i]) continue;\n        a[a[0].son[i]].fail=0;q[tail++]=a[0].son[i];\n    }\n    while(head<tail){\n        u=q[head++];\n        for(i=0;i<26;i++){\n            v=a[u].son[i];\n            if(v) a[v].fail=a[a[u].fail].son[i],q[tail++]=v;\n            else a[u].son[i]=a[a[u].fail].son[i];\n        }\n    }\n    memset(first,-1,sizeof(first));\n    for(i=1;i<=cnt;i++) addedge(a[i].fail,i);\n}\nchar s[100010];int Q;\nstruct query{\n    int x,y,num,ans;\n}qq[100010];\nbool cmp(query l,query r){return rank[l.y]<rank[r.y];}\nbool cmp2(query l,query r){return l.num<r.num;}\nint now=0,tmpnow;\nstruct tree{//\u6811\u72b6\u6570\u7ec4\n    int x[100010];\n    tree(){memset(x,0,sizeof(x));}\n    int lowbit(int pos){return pos&(-pos);}\n    void change(int pos,int type){\n        for(int i=pos;i<=cnt+1;i+=lowbit(i)) x[i]+=type;\n    }\n    int ask(int pos){\n        int re=0;\n        for(int i=pos;i>0;i-=lowbit(i)) re+=x[i];\n        return re;\n    }\n}T;\nint faildfn[100010],failclk=0,le[100010],ri[100010];\n//faildfn\u662ffail\u6811\u4e0a\u7684dfs\u5e8f\uff0cle\u548cri\u662f\u67d0\u4e2a\u8282\u70b9\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u7684\u5de6\u53f3\u533a\u95f4\nvoid get_fail_dfn(int u){\n    int i,v;faildfn[u]=++failclk;le[u]=failclk;\n    for(i=first[u];~i;i=e[i].next){\n        v=e[i].to;\n        get_fail_dfn(v);\n    }\n    ri[u]=failclk;\n}\nint main(){\n    scanf(\"%s\",s);int i,j,x,y,xx;\n    add(s);getdfn(0);\n    getfail();get_fail_dfn(0);\n    \n    scanf(\"%d\",&Q);\n    for(i=1;i<=Q;i++) scanf(\"%d%d\",&qq[i].x,&qq[i].y),qq[i].num=i;\n    sort(qq+1,qq+Q+1,cmp);//\u6392\u5e8f\n    \n    j=1;\n    for(i=1;i<=tot;i++){\n        y=dfn[i];tmpnow=end[y];\n        while(now!=pre[i]){\n            T.change(faildfn[now],-1);now=a[now].fa;\n        }\n        while(tmpnow!=now){\n            T.change(faildfn[tmpnow],1);tmpnow=a[tmpnow].fa;\n        }//\u63d2\u5165\u3001\u5220\u9664\u8282\u70b9\n        now=end[y];\n        while(qq[j].y==y){//\u5904\u7406\u8be2\u95ee\n            xx=end[qq[j].x];\n            qq[j].ans=T.ask(ri[xx])-T.ask(le[xx]-1);\n            j++;\n        }\n    }\n    \n    sort(qq+1,qq+Q+1,cmp2);\n    for(i=1;i<=Q;i++) printf(\"%d\\n\",qq[i].ans);\n}\n```\n",
        "postTime": 1524381760,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "\u96be\u9053\u6ca1\u6709\u4eba\u5199\u5728\u7ebf\u7684\u5417\uff1f\n\n\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u5728\u7ebf\u505a\u6cd5(\u57fa\u4e8e\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811)\u3002\n\n\u9996\u5148\u539f\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u6210:\n\n\u5728trie\u6811\u4e0a\u4ece\u6839\u5230y\u7684\u94fe\u4e0a\u6240\u6709\u70b9\uff0c\u5728fail\u6811\u4e0ax\u7684\u5b50\u6811\u91cc\u6709\u51e0\u4e2a\n\n~~\u4e0d\u4f1a\u7684\u53ef\u4ee5\u53bb\u770b\u5176\u4ed6\u9898\u89e3~~\n\n\u7531\u4e8e\u5b50\u6811\u91cc\u7684dfs\u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u76f8\u5f53\u4e8e\u6bcf\u6b21\u8be2\u95ee\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4:\n\n1.trie\u6811\u4e0a\u6839\u5230y\u7684\u6240\u6709\u70b9 **dfs\u5e8f** \u4f4d\u7f6e+1  \n2.\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4\u7684\u548c\n\n\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\nRoot[x] \u8868\u793a\u6267\u884c\u4e86\u6839\u5230x\u7684\u6240\u6709\u64cd\u4f5c\u540e\u7684\u7ebf\u6bb5\u6811\u3002\n\nRoot[x] \u53ea\u8981\u5728\u7236\u4eb2\u7684\u57fa\u7840\u4e0a\u591a\u4e00\u4e2a\u81ea\u5df1\u7684\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u7ebf\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <queue>\nconst int N = 100005;\nint pos[N], head[N], tot;\nstruct edge { int to, nxt; } e[N];\nvoid addedge(int x, int y) {\n\te[++tot] = (edge) { y, head[x] }; head[x] = tot;\n}\nnamespace ac {\n\tint nxt[N][26], trans[N][26], fail[N], back[N], idx, word;\n\tvoid build_ac(std::string modify) {\n\t\tint p = 1; back[1] = 1; fail[1] = 1; idx = 1;\n\t\tfor (std::string::iterator it = modify.begin(); it != modify.end(); ++it) {\n\t\t\tif (*it == 'B') {\n\t\t\t\tp = back[p];\n\t\t\t} else if (*it == 'P') {\n\t\t\t\tpos[++word] = p;\n\t\t\t} else {\n\t\t\t\tif (!nxt[p][*it - 97])\n\t\t\t\t\tnxt[p][*it - 97] = ++idx, back[idx] = p;\n\t\t\t\tp = nxt[p][*it - 97];\n\t\t\t}\n\t\t}\n\t\tstd::queue<int> q;\n\t\tfor (int i = 0; i < 26; i++)\n\t\t\tif (nxt[1][i]) {\n\t\t\t\ttrans[1][i] = nxt[1][i];\n\t\t\t\tfail[nxt[1][i]] = 1;\n\t\t\t\tq.push(nxt[1][i]);\n\t\t\t} else\n\t\t\t\ttrans[1][i] = 1;\n\t\twhile (q.size()) {\n\t\t\tint tmp = q.front(); q.pop();\n\t\t\taddedge(fail[tmp], tmp);\n\t\t\tfor (int i = 0; i < 26; i++)\n\t\t\t\tif (nxt[tmp][i]) {\n\t\t\t\t\ttrans[tmp][i] = nxt[tmp][i];\n\t\t\t\t\tfail[nxt[tmp][i]] = trans[fail[tmp]][i];\n\t\t\t\t\tq.push(nxt[tmp][i]);\n\t\t\t\t} else\n\t\t\t\t\ttrans[tmp][i] = trans[fail[tmp]][i];\n\t\t}\n\t}\n}\nint in[N], out[N], stamp;\nvoid dfs0(int x) {\n\tin[x] = ++stamp;\n\tfor (int i = head[x]; i; i = e[i].nxt)\n\t\tdfs0(e[i].to);\n\tout[x] = stamp;\n}\nconst int LN = 50;\nint root[N], lc[N * LN], rc[N * LN], sum[N * LN], idx;\nint insert(int rt, int pos, int l = 1, int r = stamp) {\n\tint now = ++idx;\n\tsum[now] = sum[rt] + 1, lc[now] = lc[rt], rc[now] = rc[rt];\n\tif (l == r) return now;\n\tint mid = l + r >> 1;\n\tif (pos <= mid)\n\t\tlc[now] = insert(lc[rt], pos, l, mid);\n\telse\n\t\trc[now] = insert(rc[rt], pos, mid + 1, r);\n\treturn now;\n}\nint query(int rt, int L, int R, int l = 1, int r = stamp) {\n\tif (L <= l && R >= r) return sum[rt];\n\tint mid = l + r >> 1, res = 0;\n\tif (L <= mid)\n\t\tres += query(lc[rt], L, R, l, mid);\n\tif (R > mid)\n\t\tres += query(rc[rt], L, R, mid + 1, r);\n\treturn res;\n}\nvoid dfs1(int x) {\n\troot[x] = insert(root[ac::back[x]], in[x]);\n\tfor (int i = 0; i < 26; i++)\n\t\tif (ac::nxt[x][i])\n\t\t\tdfs1(ac::nxt[x][i]);\n}\nint q;\nstd::string tree;\nint main() {\n\tstd::cin >> tree >> q;\n\tac::build_ac(tree);\n\tdfs0(1), dfs1(1);\n\tfor (int i = 1; i <= q; i++) {\n\t\tint x, y;\n\t\tstd::cin >> x >> y;\n\t\tstd::cout << query(root[pos[y]], in[pos[x]], out[pos[x]]) << std::endl;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1544255516,
        "uid": 26127,
        "name": "Weng_Weijie",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "~~\u96be\u4e0d\u6210\u662f\u6211\u540e\u7f00\u81ea\u52a8\u673a\u5b66\u9b54\u6014\u4e86\uff0cAC \u81ea\u52a8\u673a\u90fd\u80fd\u5957\u4e0a\u7ebf\u6bb5\u6811~~\r\n\r\n\u9898\u610f\uff1a\u7ed9\u4f60\u4e00\u9897 Trie\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e24\u4e2a\u8282\u70b9 $ u,v $\uff0c$ u $ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u5728 $ v $ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\r\n\r\n\u8ba9\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u5b57\u7b26\u4e32\u5728 AC \u81ea\u52a8\u673a \u4e0a\u662f\u5982\u4f55\u5339\u914d\u7684\uff1a\r\n\r\n1. \u8df3\u513f\u5b50\u8282\u70b9\r\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u513f\u5b50\u8282\u70b9\u8df3 fail\uff0c\u82e5\u8df3\u5230\u5339\u914d\u4e32\u5c31\u4ee4 ans++\r\n\r\n\u5dee\u4e0d\u591a\u5c31\u662f\u6807\u8bb0\u4e00\u4e2a\u8282\u70b9 $ u $\uff0c\u7136\u540e\u8be2\u95ee\u662f\u5426\u6709\u82e5\u5e72\u4e2a\u8282\u70b9\u5728\u8be5\u8282\u70b9\u7684\u5b50\u6811\u5185\u3002\r\n\r\n\u4e8e\u662f\uff0c\u5f53 $ x $ \u76f8\u540c\u65f6\uff0c\u5c31\u53ef\u4ee5\u6807\u8bb0 $ x $ \u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\u540e\uff0c\u5728 fail \u6811\u4e0a\u505a\u4e00\u4e2a\u5b50\u6811\u548c\u3002\u67e5\u8be2\u7684\u65f6\u5019\u76f4\u63a5\u67e5\u8be2\u5b50\u6811\u548c\u5c31\u597d\u4e86\u3002\r\n\r\n$ x $ \u4e0d\u5b9a\u7684\u65f6\u5019\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5c31\u597d\u5566\u3002\r\n\r\n\u4e0d\u8fc7\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff1a\u5982\u4f55\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u662f\u54ea\u4e9b\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002\r\n\r\n\u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u6b21 $ B $ \u8df3 father \u7684\u65f6\u5019\uff0c\u7ecf\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u3002\u76f8\u5f53\u4e8e\u4f7f\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\u3002\u6240\u4ee5\u6807\u8bb0\u4e00\u4e0b\u5c31\u597d\u5566\u3002\r\n\r\n\u9700\u8981\u6ce8\u610f\u4e00\u70b9\u662f\u7ebf\u6bb5\u6811\u8981\u6807\u8bb0\u6c38\u4e45\u5316\u3002\r\n\r\ncode:\r\n```cpp\r\n#include<cstring>\r\n#include<cstdio>\r\n#include<queue>\r\ntypedef unsigned uint;\r\nconst uint M=1e5+5;\r\nuint n,m,cnt,tot,len,fa[M],pos[M],lst[M],fail[M],root[M],chi[M][26];char s[M];\r\nuint L,R,q[M];\r\nstruct Node{\r\n\tuint L,R,tag;\r\n}t[M*50];\r\ninline uint min(const uint&a,const uint&b){\r\n\treturn a-b>>31?a:b;\r\n}\r\ninline uint max(const uint&a,const uint&b){\r\n\treturn a-b>>31?b:a;\r\n}\r\nvoid Modify(uint&u,const uint&l,const uint&r,const uint&L=1,const uint&R=len){\r\n\tif(l>R||L>r)return;if(!u)u=++cnt;\r\n\tif(l<=L&&R<=r)return void(t[u].tag=1);\r\n\tuint mid=L+R>>1;\r\n\tModify(t[u].L,l,r,L,mid);Modify(t[u].R,l,r,mid+1,R);\r\n}\r\nuint Query(const uint&u,const uint&x,const uint&L=1,const uint&R=len){\r\n\tif(!u)return 0;if(L==R)return t[u].tag;\r\n\tuint mid=L+R>>1;\r\n\tif(x<=mid)return Query(t[u].L,x,L,mid)+t[u].tag;\r\n\telse return Query(t[u].R,x,mid+1,R)+t[u].tag;\r\n}\r\nuint Merge(const uint&q,const uint&p){\r\n\tif(!q||!p)return q|p;\r\n\tuint u=++cnt;\r\n\tt[u].L=Merge(t[q].L,t[p].L);\r\n\tt[u].R=Merge(t[q].R,t[p].R);\r\n\tt[u].tag=t[q].tag+t[p].tag;\r\n\treturn u;\r\n}\r\ninline void Build(){\r\n\tuint i,u,c;L=1;\r\n\tfor(c=0;c^26;++c)if(chi[1][c])fail[q[++R]=chi[1][c]]=1;\r\n\twhile(L<=R){\r\n\t\tif(!fail[u=q[L++]])fail[u]=1;\r\n\t\tfor(c=0;c^26;++c){\r\n\t\t\tif(chi[u][c])fail[q[++R]=chi[u][c]]=chi[fail[u]][c];\r\n\t\t\telse chi[u][c]=chi[fail[u]][c];\r\n\t\t}\r\n\t}\r\n}\r\ninline void init(){\r\n\tuint i,u=++tot,now=1;n=strlen(s);\r\n\tfor(i=0;i<n;++i){\r\n\t\tif(s[i]=='B')u=fa[u];\r\n\t\telse if(s[i]=='P')++len;\r\n\t\telse{\r\n\t\t\tif(!chi[u][s[i]-97])fa[chi[u][s[i]-97]=++tot]=u;\r\n\t\t\tu=chi[u][s[i]-97];\r\n\t\t}\r\n\t}\r\n\tu=1;Build();\r\n\tfor(i=0;i<n;++i){\r\n\t\tif(s[i]=='B')lst[u]^now?Modify(root[u],lst[u],now-1):void(),u=fa[u];\r\n\t\telse if(s[i]=='P')pos[now++]=u;\r\n\t\telse lst[u=chi[u][s[i]-97]]=now;\r\n\t}\r\n\twhile(u^1)lst[u]^now?Modify(root[u],lst[u],now-1):void(),u=fa[u];\r\n\tdo root[fail[q[R]]]=Merge(root[fail[q[R]]],root[q[R]]);while(--R);\r\n}\r\nsigned main(){\r\n\tuint x,y;scanf(\"%s%u\",s,&m);init();\r\n\twhile(m--)scanf(\"%u%u\",&x,&y),printf(\"%u\\n\",Query(root[pos[x]],y));\r\n}\r\n```",
        "postTime": 1632990866,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u5b57\u7b26\u4e32+\u6570\u636e\u7ed3\u6784 AC\u81ea\u52a8\u673a+\u7ebf\u6bb5\u6811 P2414\u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u6a21\u62df\u9898\u76ee\u63cf\u8ff0\u5efa\u51faAC\u81ea\u52a8\u673a\uff0cB\u5c31\u662f\u56de\u5230\u7236\u4eb2\uff0cP\u5c31\u662f\u4ee3\u8868\u4e00\u4e2a\u4e32\u7ed3\u675f\u3002\n\n\u8003\u8651\u5982\u679c\u6ca1\u6709\u65f6\u95f4\u9650\u5236\uff0c\u600e\u4e48\u5224\u65adx\u5728y\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5927\u5bb6\u4e00\u5b9a\u505a\u8fc7\u6d1b\u8c37AC\u81ea\u52a8\u673a\u7684\u52a0\u5f3a\u7248\u6a21\u677f\u3002\n\n\u56de\u5fc6\u4e00\u4e0b\uff0c\u90a3\u9898\u9664\u4e86\u66b4\u529b\u8df3fail\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u505a\u6cd5\uff1a\n\n```\n\u6bcf\u4e2a\u70b9\u6709\u4e14\u53ea\u6709\u4e00\u4e2afail\u6307\u9488\uff0c\u800c\u6839\u4e0d\u7b97fail\u6307\u9488\uff0c\u5c06fail\u6307\u5411\u7684\u70b9\u770b\u6210\u81ea\u5df1\u7684\u7238\u7238\uff0c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u68f5fail\u6811\u3002\n\n\u6211\u4eec\u66b4\u529b\u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u6bcf\u5230\u8fbe\u4e00\u4e2a\u70b9\u662f\u4e00\u4e2a\u5355\u8bcd\u7684\u672b\u5c3e\uff0c\u5c31\u7ed9\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u6b21\u6570+1\uff0c\u540c\u65f6\u7ed9\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u6240\u6709\u662f\u5355\u8bcd\u672b\u5c3e\u7684\u70b9\u90fd+1\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ea\u8981\u6253\u597d\u6807\u8bb0\uff0c\u7ed3\u675f\u540e\u6c42\u4e00\u904d\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u548c\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u4ed6\u88ab\u6253\u4e86\u591a\u5c11\u6b21\u6807\u8bb0\u4e86\u3002\n```\n\n~~\u9009\u81ea[\u591a\u5f17\u6843\u7684\u9898\u89e3](https://dftyem.github.io/2019/02/14/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)\u3002~~\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u66b4\u529b\uff0c\u628ay\u76f8\u540c\u7684\u8be2\u95ee\u4e00\u8d77\u5904\u7406\uff0c\u505a\u4e00\u904ddfs\uff0c\u8bbe\u7b2c\u4e00\u884c\u7684\u957f\u5ea6\u662fn\uff0c\u8fd9\u662f\u4e00\u4e2aO(nm/?)\u7684\u505a\u6cd5\uff0c\uff1f\u662f\u8be2\u95ee\u4e2dy\u53bb\u91cd\u540e\u7684\u4e2a\u6570\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u5355\u70b9\u4fee\u6539\u6c42\u5b50\u6811\u548c\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4dfs\u5e8f\u89e3\u51b3\uff0c\u4f46\u662f\u4f60\u6bcf\u4e2ay\u90fd\u8981\u6253\u4e00\u904d\u6807\u8bb0\u8fd8\u662fo(n)\u7684\u3002\n\n\u4e0d\u614c\uff0c\u6bcf\u4e2ay\u4e32\u90fd\u662f\u6709\u8054\u7cfb\u7684\uff0c\u4ed6\u4eec\u7ecf\u8fc7\u524d\u4e00\u4e2a\u4e32\u88ab\u63d2\u5165\u6216\u5220\u9664\u5f97\u5230\uff0c\u800c\u63d2\u5165\u5220\u9664\u7684\u6b21\u6570\u662fo(n)\u7684\u3002\n\n\u76f8\u5f53\u4e8e\u6211\u4eec\u53ef\u4ee5\u5728o(n)\u7684\u65f6\u95f4\u5185\u904d\u5386\u6240\u6709\u4e32\uff0c\u4e14\u4ed6\u4eec\u662f\u63091~n\u7684\u987a\u5e8f\u51fa\u73b0\u7684\uff0c\u5f53\u4e00\u4e2a\u4e32\u51fa\u73b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5173\u4e8e\u4ed6\u6240\u6709\u7684\u8be2\u95ee\u5728logn\u7684\u65f6\u95f4\u5185\u89e3\u51b3\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u7ef4\u62a4\u5f53\u524d\u4e32\u7684\u6807\u8bb0\uff0c\u67e5\u8be2\u65f6\u5bf9\u6bcf\u4e2ax\u7684\u672b\u7aef\u6c42\u5b50\u6811\u548c\u3002\n\n~~\u6700\u540e\u4e00\u6bb5\u786e\u5b9e\u6ca1\u60f3\u5230~~\n\n\u8fd9\u9898\u7ed9\u4eba\u542f\u53d1\u7684\u662ffail\u6811\u548c\u6b63\u5e38\u6811\u662f\u4e00\u6837\u7684\uff0c\u610f\u5473\u7740\u53ea\u8981\u4f60\u660e\u767d\u5728fail\u6811\u4e0a\u5404\u4e2a\u64cd\u4f5c\u7684\u610f\u4e49\uff0c\u4f60\u5c31\u53ef\u4ee5\u641e\u51fafail\u6811\u5256\u5206\u3001fail\u6811dp\u4e4b\u7c7b\u7684\u9898\u6765\u3002\n\n```c++\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nstruct qusch{\n\tint x,y,h;\n}a[100001];\nstruct node{\n\tint next,to;\n}w[100001];\nstruct trie{\n\tint ch[26],fa,fail;\n}t[100001];\nint ans[100001],n,m,now,num,size[100001],idx[100001];\nint head[100001],cnt,heap,tail,team[100001],c[100001];\nint pos[100001];\nchar ch[100001];\ninline int lowbit(int x){return x&(-x);}\ninline void update(int x,int y){while (x<=now){c[x]+=y;x+=lowbit(x);}}\ninline int query(int x){int y=0;while (x){y+=c[x];x-=lowbit(x);}return y;}\ninline bool cmp(qusch c,qusch d){return c.y<d.y;}\ninline void add(int x,int y){\n\tw[++cnt].next=head[x];\n\tw[cnt].to=y; head[x]=cnt;\n}\nvoid insert(){\n\tint l=strlen(ch),u=0;\n\tfor (int i=0; i<l; i++){\n\t\tif (ch[i]=='B'){u=t[u].fa;continue;}\n\t\tif (ch[i]=='P'){pos[++n]=u; continue;}\n\t\tint b=ch[i]-'a';\n\t\tif (!t[u].ch[b]) t[u].ch[b]=++num;\n\t\tt[t[u].ch[b]].fa=u; u=t[u].ch[b];\n\t}\n}\nvoid build(){\n\theap=tail=1;\n\twhile (heap<=tail){\n\t\tint x=team[heap];\n\t\tfor (int i=0; i<26; i++){\n\t\t\tif (t[x].ch[i]){\n\t\t\t\tteam[++tail]=t[x].ch[i];\n\t\t\t\tif (!x) continue;\n\t\t\t\tt[t[x].ch[i]].fail=t[t[x].fail].ch[i];\n\t\t\t}\n\t\t\telse t[x].ch[i]=t[t[x].fail].ch[i];\n\t\t}\n\t\theap++;\n\t}\n}\nvoid dfs(int x){\n\tidx[x]=++now; size[x]=1;\n\tfor (int i=head[x]; i; i=w[i].next){\n\t\tdfs(w[i].to);\n\t\tsize[x]+=size[w[i].to];\n\t}\n}\nint main(){\n\tscanf(\"%s\",ch);\n\tinsert(); build();\n\tfor (int i=1; i<=num; i++)\n\t\tif (t[i].fail!=i) add(t[i].fail,i);\n\tscanf(\"%d\",&m);\n\tfor (int i=1; i<=m; i++){\n\t\tscanf(\"%d%d\",&a[i].x,&a[i].y);\n\t\ta[i].h=i;\n\t}\n\tsort(a+1,a+m+1,cmp);\n\tdfs(0); int l=strlen(ch),u=0,k=1,e=0;\n\tfor (int i=0; i<l; i++){\n\t\tif (ch[i]=='B'){\n\t\t\tupdate(idx[u],-1); u=t[u].fa;\n\t\t\tcontinue;\n\t\t}\n\t\tif (ch[i]=='P'){\n\t\t\te++;\n\t\t\tfor (int j=k; a[j].y==e; j++){\n\t\t\t\tint p=pos[a[j].x];\n\t\t\t\tans[a[j].h]=query(idx[p]+size[p]-1)-query(idx[p]-1);\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tint b=ch[i]-'a';\n\t\tu=t[u].ch[b]; update(idx[u],1);\n\t}\n\tfor (int i=1; i<=m; i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1550221922,
        "uid": 63661,
        "name": "Taduro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "**\u9898\u610f**\n\n\u6709\u4e00\u4e2a\u6253\u5b57\u673a\uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n- \u5b57\u7b26\u4e32\u672b\u5c3e\u52a0\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\n- \u5b57\u7b26\u4e32\u672b\u5c3e\u5220\u4e00\u4e2a\u5b57\u7b26\n- \u8f93\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\n\n\u7ecf\u8fc7\u4e0d\u8d85\u8fc7$n$\u6b21\u64cd\u4f5c\u540e\u6709$m$\u7ec4\u8be2\u95ee\uff1a$(x,y)$\uff0c\u8868\u793a\u8be2\u95ee\u7b2c$x$\u6b21\u8f93\u51fa\u7b2c\u5b57\u7b26\u4e32\u5728\u7b2c$y$\u6b21\u8f93\u51fa\u7b2c\u5b57\u7b26\u4e32\u91cc\u51fa\u73b0\u51e0\u6b21\n\n$n,m \\leq 10^5$\n\n**\u9898\u89e3**\n\n\u6bcf\u6b21\u52a0\u51cf\u5b57\u7b26\u5c31\u5728trie\u6811\u4e0a\u8d70\uff0c\u8f93\u51fa\u7684\u8bdd\u8bb0\u5f55\u4e00\u4e0b\u5728\u54ea\u4e2a\u7ed3\u70b9\n\n\u7136\u540e\u8003\u8651\u8be2\u95ee$(x,y)$\u66b4\u529b\u600e\u4e48\u505a\uff1a$x$\u5e94\u8be5\u662f$y$\u4e00\u4e2a\u524d\u7f00\u7684\u540e\u7f00\uff0c\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u4ece\u6839\u5230$y$\u8def\u5f84\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\uff08\u8fd9\u76f8\u5f53\u4e8e\u679a\u4e3e$y$\u7684\u540e\u7f00\uff09\uff0c\u4ece\u8fd9\u4e2a\u7ed3\u70b9\u8df3$fail$\uff0c\u5982\u679c\u8df3\u5230$x$\u5c31$ans++$\uff0c\u7136\u540e\u8003\u8651\u4e0b\u4e00\u4e2a\u7ed3\u70b9\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6839\u5230$y$\u8fd9\u6761\u94fe\u4e0a\u7684\u7ed3\u70b9\u4e2d\uff0c\u5728$fail$\u6811\u4e2d\u662f$x$\u513f\u5b50\u7684\u4e2a\u6570\n\n\u6211\u4eec\u53ef\u4ee5\u6309$\\text{trie}$\u6811\u7684$\\text{dfs}$\u5e8f\u679a\u4e3e$y$\uff0c\u8fd9\u6837\u679a\u4e3e\u6240\u6709\u7684\u94fe\u548c\u4fe1\u606f\u662f$O(n)$\u7684\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u52a0\u5165\u4e00\u6b21\u548c\u5220\u9664\u4e00\u6b21\u3002\u7136\u540e\u8003\u8651\u56de\u7b54\u6240\u6709$(i,y)$\u7684\u8be2\u95ee\uff0c\u76f4\u63a5\u8be2\u95ee\u5f53\u524d\u5728$x$\u7684$fail$\u6811\u5b50\u6811\u7684\u7ed3\u70b9\u4e2a\u6570\u3002\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002\u5177\u4f53\u8bf4\u5c31\u662f\u628a\u8be2\u95ee\u6309$y$\u5728$trie$\u4e0a\u7684$\\text{dfs}$\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u5fc5\u987b\u63d2\u5165\u5230\u5b83$fail$\u6811$\\text{dfs}$\u5e8f\u7684\u4f4d\u7f6e\uff0c\u67e5\u8be2\u5c31\u627e\u5230$x$\u7684$fail$\u5b50\u6811\u7684$\\text{dfs}$\u533a\u95f4\u8fdb\u884c\u67e5\u8be2\u3002\n\n\u5b9e\u73b0\u7684\u8bdd\u6ce8\u610f$trie$\u548c$fail$\u4e0d\u8981\u641e\u6df7\u4e86\uff0c\u53e6\u5916\u8fd9\u9898\u4e5f\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u5728\u7ebf\u505aqwq\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\nconst int N = 2e5 + 10;\n\nint ch[N][26], fa[N], fail[N];\nint dfn[N], dl[N], dr[N], dn[N];\nint pos = 1, id = 1, n, pt[N], ans[N];\nvector<int> fs[N];\n\nstruct qs {\n    int x, y, id;\n    bool operator < (const qs &b) const {\n        return dfn[y] < dfn[b.y];\n    }\n} q[N];\n\nvoid work(char c) {\n    if(c == 'B') pos = fa[pos];\n    else if(c == 'P') pt[++ pt[0]] = pos;\n    else {\n        int &v = ch[pos][c - 'a'];\n        if(!v) {\n            v = ++ id;\n            fa[v] = pos;\n        }\n        pos = v;\n    }\n}\n\nvoid dfs(int u) { //on trie\n    dfn[u] = ++ dfn[0]; dn[dfn[0]] = u;\n    for(int i = 0; i < 26; i ++)\n        if(ch[u][i]) dfs(ch[u][i]);\n}\n\nvoid buildac() {\n    static int q[N], l, r, v;\n    for(int i = 0; i < 26; i ++) if(v = ch[1][i]) {\n        q[r ++] = v; fail[v] = 1;\n    } else ch[1][i] = 1;\n    while(l < r) {\n        int u = q[l ++];\n        for(int i = 0; i < 26; i ++) if(v = ch[u][i]) {\n            q[r ++] = v; fail[v] = ch[fail[u]][i];\n        } else ch[u][i] = ch[fail[u]][i];\n    }\n    for(int i = 2; i <= id; i ++)\n        fs[fail[i]].push_back(i);\n}\n\nvoid dfs2(int u) { //on fail tree\n    dl[u] = ++ dl[0];\n    for(int i = 0; i < fs[u].size(); i ++) dfs2(fs[u][i]);\n    dr[u] = dl[0];\n}\n\nint bit[N];\n\nvoid add(int x, int y) {\n    for(; x <= id; x += x & (-x)) bit[x] += y;\n}\n\nint qry(int x) {\n    int ans = 0;\n    for(; x >= 1; x &= x - 1) ans += bit[x];\n    return ans;\n}\n\nint main() {\n    static char s[N]; scanf(\"%s\", s);\n    for(char *c = s; *c; c ++) work(*c);\n    dfs(1); buildac(); dfs2(1);\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i ++) {\n        scanf(\"%d%d\", &q[i].x, &q[i].y);\n        q[i].x = pt[q[i].x];\n        q[i].y = pt[q[i].y]; //id -> node\n        q[i].id = i;\n    }\n    sort(q + 1, q + n + 1);\n    for(int i = 1, j = 1; i <= id; i ++) {\n        int u = dn[i];\n        if(i > 1) {\n            int la = dn[i - 1];\n            while(la != fa[u]) {\n                add(dl[la], -1);\n                la = fa[la];\n            }\n        }\n        add(dl[u], 1);\n        for(; j <= n && dfn[q[j].y] == i; j ++) {\n            ans[q[j].id] = qry(dr[q[j].x]) - qry(dl[q[j].x] - 1);\n        }\n    }\n    for(int i = 1; i <= n; i ++)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n\n```\n\n\n\n",
        "postTime": 1550057325,
        "uid": 20375,
        "name": "hongzy",
        "ccfLevel": 9,
        "title": "P2414 \u300cNOI 2011\u300d\u963f\u72f8\u7684\u6253\u5b57\u673a\u300cAC\u81ea\u52a8\u673a\u300d"
    },
    {
        "content": "\u6b64\u9898\u6b63\u89e3\uff1a\nac\u81ea\u52a8\u673a\uff08\u4e0d\u662f\u81ea\u52a8AC\u673a\uff09\u6c42\u51fafail\u6570\u7ec4\uff0c\u7136\u540e\u4ee5fail\u6570\u7ec4\u5efa\u6811\uff0c\u5982\u56fe\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/39675.png)\n\u7ea2\u8272\u7684\u8fb9\u548c\u5404\u70b9\u5f62\u6210\u4e86\u53e6\u4e00\u68f5\u6811.\n\n\u90a3\u4e48\uff08\u770b\u7ea2\u6811\uff09\uff0c\u82e5\u4e00\u4e2a\u70b9\u5728\u67d0\u4e2a\u5b57\u7b26\u4e32\u7ed3\u675f\u8282\u70b9\u7684\u5b50\u6811\u5185\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u5219\u51fa\u73b0\u5728\u90a3\u4e2a\u70b9\u6240\u5728\u7684\u5b57\u7b26\u4e32\u91cc\uff1b\u5982\u56fe\u4e2d\u7684a-b-c\u5b57\u7b26\u4e32\u548cc\u5b57\u7b26\u4e32\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u82e5\u8981\u6c42x\u5b57\u7b26\u4e32\u5728y\u5185\u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u5c31\u53ea\u9700\u6c42\u4ee5x\u7684\u7ed3\u675f\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u6709\u591a\u5c11\u4e2a\u8282\u70b9\u662fy\u5b57\u7b26\u4e32\u4e0a\u7684\u3002\n\u5982\u4f55\u505a\u5462\uff1f\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0cy\u76f8\u540c\u8be2\u95ee\u7684\u5f04\u5728\u4e00\u8d77\uff1b\n\n \n\n\u7136\u540e\u6c42\u51fa\u7ea2\u6811\u7684dfs\u5e8f\uff08\u6709\u70b9\u8be1\u5f02\uff0c\u770b\u4ee3\u7801\uff09\uff1b\n\n \n\n\u6211\u4eec\u518d\u904d\u5386\u4e00\u904d\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff1a\n\n\u5bf9\u4e8e\u8f93\u5165\u7684\u2018a\u2019-\u2018z\u2019\uff0c\u628a\u5bf9\u5e94\u7684dfs\u5e8f\u4e2d\u5176\u51fa\u73b0\u7684\u4f4d\u7f6e\u7684\u503c\u52a01\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff1b\n\n\u5bf9\u4e8e\u8f93\u5165\u7684\u2018B\u2019\uff0c\u73b0\u5728\u7684\u5b57\u7b26\u6240\u5bf9\u5e94\u7684dfs\u5e8f\u4e2d\u7684\u4f4d\u7f6e\u7684\u503c\u51cf1\uff1b\n\n\u5bf9\u4e8e\u9047\u5230\u7684c\u4e2a\u2018P\u2019\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u73b0\u5728\u7684\u6811\u72b6\u6811\u72b6\u7ef4\u62a4\u7684\u4fbf\u662f\u7b2cc\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5728dfs\u5e8f\u4e2d\u7684\u4f4d\u7f6e\u7684\u503c\u6240\u52a01\u540e\u7684\u7ed3\u679c\u3002\u63a5\u7740\u4fbf\u53ef\u7528\u533a\u95f4\u67e5\u8be2\u6c42\u51fay==c\u7684\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u90a3\u4e48\u4e0a~~\u53c8\u81ed\u53c8\u957f\u7684~~\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<algorithm>\n#include<iostream>\nusing namespace std;\nstruct node{\n    int x,y;\n} q[100005];\nstruct edge{\n    int to,next;\n}e[200005];\nint ch[100005][27];\nint val[100005],fail[100005],fa[100005],fini[100005],l[100005],r[100005],ans[100005];\nint head[100005],headq[100005],nxt[100005],lat[100005],c[150000];\nchar x[100005];\nint cnt,pnt,ent=1,dnt,lx;\nint idx(char x) {return x-'a';}\nvoid modify(int u,int d) {for(int i=u;i<=dnt;i+=i&(-i)) c[i]+=d;}\nint query(int u) {int sum=0;for(int i=u;i;i-=i&(-i)) sum+=c[i]; return sum;}\nvoid add(int u,int v)\n{\n    e[ent]=(edge){v,head[u]};head[u]=ent++;\n    e[ent]=(edge){u,head[v]};head[v]=ent++;\n}\nvoid read_trie()\n{\n    int u=0;\n    for(int i=1;i<=lx;i++)\n    {\n        if(x[i]=='B') u=fa[u];\n        else if(x[i]=='P') val[u]=++pnt,fini[pnt]=u;\n        else\n        {\n            int c=idx(x[i]);\n            if(!ch[u][c]) ch[u][c]=++cnt,fa[ch[u][c]]=u;\n            u=ch[u][c];\n        }\n    }\n}\nvoid get_fail()\n{\n    queue<int> q;\n    for(int c=0;c<26;c++) {int u=ch[0][c]; if(u) q.push(u);}\n    while(!q.empty())\n    {\n        int r=q.front(); q.pop();\n        for(int c=0;c<26;c++)\n        {\n            if(!ch[r][c]) continue;\n            int u=ch[r][c];\n            q.push(u);\n            int v=fail[r];\n            while(v&&!ch[v][c]) v=fail[v];\n            fail[u]=ch[v][c];\n        }\n    }\n}\n//----------------------------------------------------------------------\nvoid dfs_xu(int u,int fa)\n{\n    l[u]=++dnt;\n    for(int i=head[u];i;i=e[i].next) if(e[i].to!=fa) dfs_xu(e[i].to,u);\n    r[u]=dnt;\n}\nvoid work()\n{\n    int m; scanf(\"%d\",&m);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&q[i].x,&q[i].y); \n        nxt[i]=lat[q[i].y];\n        lat[q[i].y]=i;\n    }\n    for(int i=1;i<=cnt;i++) add(i,fail[i]);\n    dfs_xu(0,0);\n    int p=0,id=0;\n    for(int i=1;i<=lx;i++)\n    {\n        if (x[i]=='P')\n        {\n            id++;\n            for (int j=lat[id];j;j=nxt[j])\n            { \n                int u=fini[q[j].x]; \n                ans[j]=query(r[u])-query(l[u]-1); \n            } \n        } \n        else if (x[i]=='B') modify(l[p],-1),p=fa[p]; \n        else p=ch[p][idx(x[i])],modify(l[p],1); \n    }\n    for(int i=1;i<=m;i++) printf(\"%d\\n\",ans[i]);\n}\nint main()\n{\n    scanf(\"%s\",x+1);\n    lx=strlen(x+1);\n    read_trie();\n    get_fail();\n    work();\n    return 0;\n}\n```",
        "postTime": 1540468430,
        "uid": 55377,
        "name": "\u6211\u5f88\u8fa3ji\u770b\u7b7e\u540d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "### \u4ee3\u7801\u554a\u5b9e\u73b0\u554a\u5176\u4ed6$dalao$\u4eec\u90fd\u8bb2\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u6211\u6765\u4ece\u611f\u6027\u7684\u5c42\u9762\u8bb2\u8bb2\u6211\u5bf9\u8fd9\u4e2a\u9898\u76ee\u7684\u7406\u89e3\u5427$QwQ$~,\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\u3002\n\n- \u6211\u4eec\u505a\u7684\u8be2\u95ee\uff0c\u662f\u95ee$x$\u4e32\u5728$y$\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n- \u5f88\u663e\u7136\uff0c\u5927\u529b\u904d\u5386\u5f53\u7136\u53ef\u4ee5\u51fa\u7ed3\u679c\u3002\u90a3\u4e48\u600e\u4e48\u7528$AC$\u81ea\u52a8\u673a\u4f18\u5316\u6211\u4eec\u7684\u904d\u5386\u65b9\u5f0f\uff1f\n\n- $Trie$\u6811\u4e0a\uff1a\n\t- \u5bf9\u4e8e\u4e00\u4e2a\u70b9$u$\uff0c\u5b83\u4e0e\u6839\u8282\u70b9\u5bf9\u5e94\u7684\u94fe\u4ee3\u8868\u4e86\u4e32$u$\u7684\u6240\u6709\u524d\u7f00\u3002\n\n- $Fail$\u6811\u4e0a\uff1a\n\t- \u5bf9\u4e8e\u4e00\u4e2a\u70b9$u$\uff0c\u5b83\u7684\u5b50\u8282\u70b9\u5bf9\u5e94\u4e86\u6240\u6709\u80fd\u7528\u540e\u7f00\u5c06\u5176\u5305\u542b\u7684\u4e32$v$\u3002\n\n#### \u53c8\u662f\u524d\u7f00\u53c8\u662f\u540e\u7f00\u7684\uff0c\u5982\u679c\u6211\u4eec\u628a\u5b83\u4eec\u4e00\u8d77\u7528\u4e0a\u4f1a\u600e\u4e48\u6837\uff1f\u6bd4\u5982\u2014\u2014\n\n- \u6211\u4eec\u8ba4\u4e3a\u4e32$x$\u662f\u4e32$y$\u4e00\u4e2a\u524d\u7f00\u7684\u540e\u7f00\u3002\n\n\t- \u6709\u591a\u5c11\u8fd9\u6837\u7684\u524d\u7f00\u662f\u7b26\u5408\u8981\u6c42\u7684\u5462\uff1f\n\n#### \u73b0\u5728\u6211\u4eec\u6765\u8111\u8865\u4e00\u4e2a$Venn$\u56fe\uff0c\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u662f\u4e32$y$\u7684\u6240\u6709\u524d\u7f00\u4e32\uff0c\u53e6\u4e00\u4e2a\u96c6\u5408\u662f\u6240\u6709\u540e\u7f00\u5305\u542b\u4e32$x$\u7684\u5b57\u4e32\u3002\n\n#### \u5148\u5904\u7406\u7b2c\u4e00\u4e2a\u96c6\u5408\u3002\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u904d\u5386\u4e00\u4e0b$Trie$\u6811\uff0c\u5f53\u524d\u70b9\u5230\u6839\u8282\u70b9\u7684\u94fe\u4e0a\u6240\u6709\u8282\u70b9\uff0c\u5c31\u662f\u8fd9\u4e2a\u96c6\u5408\u5566~\n\n#### \u7b2c\u4e8c\u4e2a\u96c6\u5408\u554a\uff0c\u4e0d\u662f\u6b63\u597d\u6302\u5728$Fail$\u6811\u7684\u5f53\u524d\u70b9\u4e0b\u9762\u561b\uff1f\u8981\u53d6\u8d70\u8fd8\u4e0d\u5bb9\u6613\uff0c\u76f4\u63a5\u4e00\u68f5\u5b50\u6811\u780d\u8d70\u5c31\u5b8c\u4e8b\u4e86\u3002\n\n#### \u4ed4\u7ec6\u4e00\u60f3\uff0c\u6b38\uff1f\uff1f\u662f\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u53d6\u4e00\u4e2a\u4ea4\u96c6\uff1f\n\n#### \u90a3\u4e48\u601d\u8def\u5c31\u53d8\u5f97\u6e05\u695a\u8d77\u6765\u3002\u6211\u4eec\u6bcf\u6b21\u5728$Trie$\u6811\u7684\u5f53\u524d\u70b9\u4e0a\u53d6\u4e00\u6761\u5230\u6839\u8282\u70b9\u7684\u94fe\uff0c\u5bf9\u94fe\u4e0a\u6240\u6709\u70b9$+1$\u3002\u7136\u540e\u5728$Fail$\u6811\u7684\u5f53\u524d\u70b9\u4e0a\u6c42\u4e00\u4e2a\u5b50\u6811\u548c\uff0c\u95ee\u9898\u5c31\u8fce\u5203\u800c\u89e3\u5566~\n\n#### \u8fd9\u91cc\u6211\u53ea\u662f\u7b80\u5355\u7684\u603b\u7ed3\u4e00\u4e0b\u601d\u8def\u3002\u5199\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u7684\u5199\u6cd5\u662f\u8bb0\u5f55\u4e00\u4e0b$Fail$\u6811\u7684$dfs$\u5e8f\uff0c\u7136\u540e\u6309$dfs$\u5e8f\u585e\u8fdb\u6811\u72b6\u6570\u7ec4\u7406\u7ef4\u62a4\u3002\n\n#### $Trie$\u6811\u548c$Fail$\u6811\u4e00\u4e9b\u8282\u70b9\u6620\u5c04\u7565\u6709\u7e41\u7410\uff0c\u5199\u7684\u65f6\u5019\u8bb0\u5f97\u8c28\u614e\u4e00\u70b9\u54e6$QwQ$",
        "postTime": 1548489741,
        "uid": 58698,
        "name": "Nativ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "## \u65b0\u4eba\u7b2c\u4e00\u7bc7\u9898\u89e3\n\u9898\u610f\uff1a\u7ed9\u51fa\u82e5\u5e72\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u4e32\u5728\u53e6\u4e00\u4e2a\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u3002\n\n\u9996\u5148\u660e\u767d\uff1a \u5b50\u4e32 = \u524d\u7f00\u7684\u540e\u7f00\n\n\u53c8\u7531\u4e8e\uff1a**Trie\u6811\uff08AC\u81ea\u52a8\u673a\uff09\u7684\u7956\u5148\u8282\u70b9 = \u524d\u7f00**\n\n**Fail\u6811\u7684\u7956\u5148\u8282\u70b9 = \u540e\u7f00**\n\nx\u5728y\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u5373 \u5728Fail\u6811\u4e2d\u6709\u8282\u70b9x\u4f5c\u4e3a\u7956\u5148\u7684Trie\u6811\u4e2dy\u7684\u7956\u5148\u7684\u6570\u91cf\n\n\u5373 **Fail\u6811\u4e2dx\u7684\u5b50\u6811\u4e0eTrie\u6811\u4e2dy\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u7684\u516c\u5171\u8282\u70b9\u6570**\n\n\u7531 **\u5b50\u6811** \u5bb9\u6613\u60f3\u5230\u5229\u7528 **dfs\u5e8f** \u8f6c\u5316\u4e3a\u533a\u95f4\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\n\n\u4e0b\u9762\u662f\u4e00\u4e9b\u7ec6\u8282\n\n1. \u8f93\u5165\u7684\u95ee\u9898\uff1a \u56e0\u4e3a\u53ea\u6709\u5728\u672b\u5c3e\u63d2\u5165\u548c\u5220\u9664\uff0c\u7528 **\u6808** \u50a8\u5b58\u5f53\u524d\u8282\u70b9\uff0c\u6a21\u62df\u5373\u53ef\u3002\n\n2. \u67e5\u8be2\u7684\u95ee\u9898\uff1a **\u79bb\u7ebf\u5316** \uff0c\u628a\u6240\u6709\u8be2\u95ee\u50a8\u5b58\u5728y\u4e0a\uff0c\u5728 **Trie\u6811** \u4e0a **dfs+\u56de\u6eaf** \u5373\u53ef\u3002\n\n**\u4ee3\u7801\u5982\u4e0b\uff1a\uff08\u4e11\uff0c\u538b\u4e86\u884c\u66f4\u4e11\uff0c241ms\uff09**\n```c++\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#define maxn 100005\n#define lowbit(x) ((x)&-(x))\nusing namespace std;\nint N,M,tot=1,front,back,top,cnt,dfn;\nint q[maxn],fail[maxn],st[maxn]={1},t[maxn][26],head[maxn],nxt[maxn],e[maxn],L[maxn],R[maxn],ans[maxn],w[maxn];\nchar a[maxn];\nvector<pair<int,int> >query[maxn];\ninline void dfs(int x){\n\tL[x]=++dfn;\n\tfor(register int i=head[x];i;i=nxt[i]) dfs(i);\n\tR[x]=dfn;\n}\ninline void add(int x,int y){\n\twhile(x<=tot) w[x]+=y,x+=lowbit(x);\n}\ninline int sum(int x){\n\tint res=0;\n\twhile(x) res+=w[x],x-=lowbit(x);\n\treturn res;\n}\ninline void solve(int x){\n\tadd(L[x],1);\n\tfor(register unsigned int i=0;i<query[x].size();++i) ans[query[x][i].first]=sum(R[query[x][i].second])-sum(L[query[x][i].second]-1);\n\tfor(register int i=0;i<26;++i) if(t[x][i]) solve(t[x][i]);\n\tadd(L[x],-1);\n}\nint main(){\n\tscanf(\"%s\",a+1),N=strlen(a+1);\n\tfor(register int i=1;i<=N;++i){\n\t\tswitch(a[i]){\n\t\t\tcase 'B':--top;break;\n\t\t\tcase 'P':e[++cnt]=st[top];break;\n\t\t\tdefault:if(!t[st[top]][a[i]-'a']) t[st[top]][a[i]-'a']=++tot;++top,st[top]=t[st[top-1]][a[i]-'a'];break;\n\t\t}\n\t}\n\tfor(register int i=0;i<26;++i) if(t[1][i]) q[back++]=t[1][i],fail[t[1][i]]=1,nxt[t[1][i]]=head[1],head[1]=t[1][i];\n\tfor(register int x,y;front<back;){\n\t\tx=q[front++];\n\t\tfor(register int i=0;i<26;++i) if(t[x][i]){\n\t\t\tfor(y=fail[x];y;y=fail[y]) if(t[y][i]){y=t[y][i];break;}\n\t\t\ty=y?y:1,fail[t[x][i]]=y,nxt[t[x][i]]=head[y],head[y]=t[x][i],q[back++]=t[x][i];\n\t\t}\n\t}\n\tdfs(1),scanf(\"%d\",&M);\n\tfor(register int i=1,x,y;i<=M;++i) scanf(\"%d%d\",&x,&y),query[e[y]].push_back(make_pair(i,e[x]));\n\tsolve(1);\n\tfor(register int i=1;i<=M;++i) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1544709024,
        "uid": 149656,
        "name": "jiangly",
        "ccfLevel": 10,
        "title": "P2414 [ NOI2011 ] \u963f\u72f8\u7684\u6253\u5b57\u673a"
    },
    {
        "content": "\n\u8fd9\u9898\u597d\u5999\u554a\u2026\u2026\n\n\u9996\u5148\u641e\u8fd9\u9053\u9898\u5f97\u5148\u641e\u61c2$AC$\u81ea\u52a8\u673a\u662f\u4ec0\u4e48\u4e1c\u897f\n\n\u9996\u5148\u8fd9\u9898$40$\u5206\u66b4\u529b\u505a\u6cd5\u662f$kmp$\u76f4\u63a5\u5339\u914d\n\n\u6211\u4eec\u8003\u8651\u540c\u6837\u4f5c\u4e3a\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\u7684$AC$\u81ea\u52a8\u673a\n\n\u53ef\u4ee5\u53d1\u73b0$fail$\u6307\u9488\u6709\u4e00\u4e2a\u795e\u5947\u7684\u6027\u8d28\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32$a$\u7684\u6700\u540e\u4e00\u4f4d\u7684$fail$\u6307\u5411\u5b57\u7b26\u4e32$b$\u7684\u4e00\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48$a$\u80af\u5b9a\u5305\u542b$b$\n\n\u6240\u4ee5\u539f\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7edf\u8ba1$x$\u6700\u540e\u4e00\u4f4d\u5728$fail$\u6811\u91cc\u7684\u5b50\u6811\u91cc\u6709\u591a\u5c11$y$\u7684\u5b57\u7b26\n\n\u6811\u7ed3\u6784+\u5b50\u6811\u6c42\u548c\uff0c\u60f3\u5230\u4e86\u4ec0\u4e48\uff1f\n\ndfs\u5e8f+\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u641e\u4e86~~\u6811\u72b6\u6570\u7ec4\u4e5f\u53ef\u4ee5~~\n\n\u6240\u4ee5\u6309\u7167\u539f\u6765\u7684$Tire$\u6811\u5411\u4e0b\u627e\uff0c\u987a\u4fbf\u5728dfs\u5e8f\u4e0a\u6807\u8bb0\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\uff0c\u6309$y$\u503c\u6392\u5e8f\n\n\u904d\u5386\u5b57\u7b26\u4e32\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a```'P'```\uff0c\u56e0\u4e3a\u8fd9\u662f\u6253\u5370\uff0c\u7edf\u8ba1\u5f53\u524d\u7ed3\u5c3e\u5bf9\u5e94\u7684$y$\u6240\u5bf9\u5e94\u7684\u8be2\u95ee\uff0c\u91cc\u9762\u7684$x$\u7684\u5b50\u6811\u548c\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a```'B'```\uff0c\u56e0\u4e3a\u8fd9\u662f\u5220\u9664\uff0c\u6240\u4ee5\u8bb2\u5f53\u524d\u8282\u70b9\u7684$dfs$\u5e8f\u5bf9\u5e94\u7684\u503c$-1$\uff0c\u5e76\u8fd4\u56de\u5230ta\u7684\u7236\u8282\u70b9\n\n\u5bf9\u4e8e\u5176\u4ed6\uff0c\u5bf9\u5e94\u7684$dfs$\u5e8f$+1$\n\n\u7136\u540e\u5c31\u79bb\u7ebf\u8f93\u51fa\u5c31\u884c\u4e86\n\n\u4ee3\u7801\uff1a\n```\n# include<iostream>\n# include<cstring>\n# include<cstdio>\n# include<queue>\n# include<algorithm>\n# define mid (l+r>>1)\n# define tl (k<<1)\n# define tr (k<<1|1)\nusing namespace std;\nconst int MAX=1e5+1;\nstruct p{\n\tint x,y;\n}c[MAX];\nstruct q{\n\tint x,y,id;\n\tbool operator< (const q &a)\n\tconst{\n\t\treturn y<a.y;\n\t}\n}qu[MAX];\nint num,n,L,TOT,cnt,sum;\nint h[MAX],ov[MAX],ans[MAX];\nstring a;\nvoid add(int x,int y)\n{\n\tc[++num]=(p){h[x],y},h[x]=num;\n}\nstruct Tire{\n\tint fail[MAX],fa[MAX],die[MAX],id[MAX],siz[MAX];\n\tint vis[MAX][26],use[MAX][26];\n\tstruct o{\n\t\tint x;\n\t}s[MAX<<2];\n\tvoid build()\n\t{\n\t\tint x=0;\n\t\tfor(int i=0;i<L;++i)\n\t\t  {\n\t\t  \tif(a[i]=='B')\n\t\t  \tx=fa[x];\n\t\t  \telse if(a[i]=='P')\n\t\t  \tov[++cnt]=x;\n\t\t  \telse\n\t\t  \t{\n\t\t  \t\tif(!vis[x][a[i]-'a'])\n\t\t\t\tuse[x][a[i]-'a']=vis[x][a[i]-'a']=++TOT,fa[TOT]=x;\n\t\t\t\tx=vis[x][a[i]-'a'];\n\t\t\t}\n\t\t  }\n\t}\n\tvoid GET_FAIL()\n\t{\n\t\tqueue<int> qu;\n\t\tfor(int i=0;i<26;i++)\n\t\t  {\n\t\t  \tint v=vis[0][i];\n\t\t  \tif(v) qu.push(v);\n\t\t  }\n\t\twhile(!qu.empty())\n\t\t{\n\t\t\tint tt=qu.front();\n\t\t\tqu.pop();\n\t\t\tfor(int i=0;i<26;i++)\n\t\t\t  {\n\t\t\t  \tint v=vis[tt][i];\n\t\t\t  \tif(v)\n\t\t\t\t{\n\t\t\t\t\tfail[v]=vis[fail[tt]][i];\n\t\t\t\t\tqu.push(v);\n\t\t\t\t} \n\t\t\t  \telse vis[tt][i]=vis[fail[tt]][i];\n\t\t\t  }\n\t\t}\n\t}\n\tvoid dfs(int x)\n\t{\n\t\tid[x]=++sum,siz[x]=1;\n\t\tfor(int i=h[x];i;i=c[i].x)\n\t\t  {\n\t\t  \tint y=c[i].y;\n\t\t  \tif(y==x) continue;\n\t\t  \tdfs(y);\n\t\t  \tsiz[x]+=siz[y];\n\t\t  }\n\t}\n\tvoid pus(int k)\n\t{\n\t\ts[k].x=s[tl].x+s[tr].x;\n\t}\n\tint ask(int l,int r,int k,int L,int R)\n\t{\n\t\tif(l==L&&r==R) return s[k].x;\n\t\tif(R<=mid) return ask(l,mid,tl,L,R);\n\t\tif(L>mid) return ask(mid+1,r,tr,L,R);\n\t\treturn ask(l,mid,tl,L,mid)+ask(mid+1,r,tr,mid+1,R);\n\t}\n\tvoid change(int l,int r,int k,int x,int dis)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\ts[k].x+=dis;\n\t\t\treturn;\n\t\t}\n\t\tif(x<=mid) change(l,mid,tl,x,dis);\n\t\telse change(mid+1,r,tr,x,dis);\n\t\tpus(k);\n\t}\n\tvoid GET_ANS()\n\t{\n\t\tint tot=1,tot1=0;\n\t\tint x=0;\n\t\tfor(int i=0;i<L;++i)\n\t\t  {\n\t\t  \tif(a[i]=='P')\n\t\t  \t{\n\t\t  \t\ttot1++;\n\t\t  \t\twhile(qu[tot].y==tot1)\n\t\t  \t\t{\n\t\t  \t\t\tint xe=qu[tot].x;\n\t\t  \t\t\tans[qu[tot].id]=ask(1,sum,1,id[ov[xe]],id[ov[xe]]+siz[ov[xe]]-1);\n\t\t  \t\t\t++tot;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(a[i]=='B')\n\t\t\tchange(1,sum,1,id[x],-1),x=fa[x];\n\t\t\telse\n\t\t\tx=use[x][a[i]-'a'],change(1,sum,1,id[x],1);\n\t\t  }\n\t}\n}Tree;\nint read()\n{\n\tint x=0;\n\tchar ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar());\n\tfor(;isdigit(ch);x=x*10+ch-48,ch=getchar());\n\treturn x;\n}\nint main()\n{\n\tcin>>a;\n\tL=a.length();\n\tTree.build();\n\tn=read();\n\tfor(int i=1;i<=n;++i)\n\t  qu[i].x=read(),qu[i].y=read(),qu[i].id=i;\n\tsort(qu+1,qu+1+n);\n\tTree.GET_FAIL();\n\tfor(int i=0;i<=TOT;++i)\n\t  add(Tree.fail[i],i);\n\tTree.dfs(0);\n\tTree.GET_ANS();\n\tfor(int i=1;i<=n;++i)\n\t  printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1522477997,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "\u4e3a\u697c\u4e0b\u7684\u7287\u7287\u8865\u5145\u4e00\u4e0b\uff01\n\n\u9996\u5148\u5462\u5927\u81f4\u505a\u6cd5\u548c\u697c\u4e0b\u7287\u7287\u662f\u4e00\u6837\u7684\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u4e0d\u7136\u5c31\u662f\u5404\u79cdMLE&TLE\u2026\u2026\n\n\u5c31\u662f\u5f53\u524d\u5462\u6211\u4eec\u4e0d\u80fd\u628a\u8fd9\u4e9b\u4e32\u7ed9\u63d0\u53d6\u51fa\u6765\u518d\u8fdb\u884ctire\u6784\u5efa\u7684insert\u64cd\u4f5c\u3002\u800c\u662f\u5e94\u8be5\u7528\u5728\u7ebf\u7b97\u6cd5\u641e\u4e00\u53d1\u2026\u2026\u5982\u679c\u8bfb\u5230\u4e00\u4e2aP\u5c31\u628a\u5f53\u524d\u7684\u4f4d\u7f6e\u4fdd\u5b58\u4e00\u4e0b\u540e\u9762\u641e\u79bb\u7ebf\u7b97\u6cd5\u7684\u65f6\u5019\u53ef\u4ee5\u8c03\u7528\u2026\u2026\u8fd9\u4ee3\u8868\u6211\u63d2\u5165\u4e86\u4e00\u4e2a\u4e32\u4e86\u2026\u2026\u5982\u679c\u8bfb\u5230\u4e00\u4e2aB\u2026\u2026\u5c31\u5229\u7528fa\u6570\u7ec4\u4e2d\u4fdd\u5b58\u7684\u7236\u4eb2\u8282\u70b9\u56de\u53bb\u2026\u2026\u8bfb\u5230\u5c0f\u5199\u5b57\u6bcd\u5c31\u5f80\u4e0b\u4e00\u5c42\u2026\u2026\u4f46\u662f\u5e76\u4e0d\u65b0\u5efa\u4e00\u4e2a\u4e32\u2026\u2026\n\n\u7136\u540e\u5728\u5904\u7406\u7684\u65f6\u5019\u4e3a\u4e86\u9632\u6b62\u5197\u4f59\u7684\u8ba1\u7b97==\u641e\u4e86\u4e2a\u94fe\u8868\u5b58\u4e86y\u4e00\u6837\u7684\u8be2\u95ee\u2026\u2026\u76f4\u63a5\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86ww\n\n\u5c31\u56e0\u4e3a\u8fd9\u4e9b\u5c0f\u7ec6\u8282\u6ca1\u6709\u6ce8\u610f\u4e00\u76f4MLE&TLE\u4e09\u4e2a\u70b9\u2026\u2026\u8c03\u4e00\u5e74\u2026\u2026\n\n\u4e0a\u4ee3\u7801\uff1a\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<string>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nconst int MAXN=100010;\nint n;\nstring doo;\nstruct acm{\n    int fail;\n    int nex[26];\n}qwq[MAXN];\nint tot(1);\nint head[MAXN],ne[MAXN],to[MAXN],top1;\nint pos[MAXN],fa[MAXN],top;\nint xx[MAXN],hea[MAXN],nn[MAXN],ans[MAXN];\nvoid add(int x,int y){\n    ne[top1]=head[x];head[x]=top1;to[top1++]=y;\n}\nint id(char c){return (int)c-(int)'a';}\nint l[MAXN],r[MAXN],con;\nint tree[MAXN];\nvoid change(int x,int k){\n    for(int i=x;i<=tot;i+=(i&-i))\n        tree[i]+=k;\n}\nint query(int x){\n    int ans(0);\n    for(int i=x;i>0;i-=(i&-i))\n        ans+=tree[i];\n    return ans;\n}\nvoid init(){\n    memset(head,-1,sizeof(head));\n    for(int i=0;i<MAXN;++i)\n        qwq[i].fail=-1;\n}\nvoid build(){\n    queue<int> q;\n    for(int i=0;i<26;i++){\n        if(!(qwq[0].nex[i])) continue;\n        qwq[qwq[0].nex[i]].fail=0;\n        add(0,qwq[0].nex[i]);\n        q.push(qwq[0].nex[i]);\n    }\n    while(!q.empty()){\n        int tmp=q.front();q.pop();\n        for(int i=0;i<26;i++){\n            if(!(qwq[tmp].nex[i])) continue;\n            int p=qwq[tmp].fail;\n            while(p&&!(qwq[p].nex[i]))\n                p=qwq[p].fail;\n            if(!(qwq[p].nex[i])) {add(0,qwq[tmp].nex[i]);qwq[qwq[tmp].nex[i]].fail=0;}\n            else {add(qwq[p].nex[i],qwq[tmp].nex[i]);qwq[qwq[tmp].nex[i]].fail=qwq[p].nex[i];}\n            q.push(qwq[tmp].nex[i]);\n        }    \n    }\n}\nvoid dfs(int here){\n    l[here]=con++;\n    for(int i=head[here];i!=-1;i=ne[i]) dfs(to[i]);\n    r[here]=con-1;\n}\nvoid input(){\n    cin>>doo;\n    int now(0);\n    for(int i=0;i<doo.size();i++){\n        if(doo[i]=='P') pos[top++]=now;\n        else if(doo[i]=='B') now=fa[now];\n        else if(doo[i]!='P'&&doo[i]!='B'){\n            if(!qwq[now].nex[id(doo[i])]){\n                qwq[now].nex[id(doo[i])]=tot++;\n                fa[tot-1]=now;\n            }\n            now=tot-1;\n        }\n    }\n    init();\n    build();\n    dfs(0);\n}\nvoid xxj(){\n    memset(hea,-1,sizeof(hea));\n    cin>>n;\n    for(int i=0;i<n;i++){\n        int x,y;\n        scanf(\"%d%d\",&x,&y);\n        --x;--y;\n        xx[i]=x;\n        nn[i]=hea[y];\n        hea[y]=i;\n    }\n    int ii(0);\n    int now(0);\n    for(int i=0;i<doo.size();i++){\n        if(doo[i]=='P'){\n            for(int j=hea[ii];j!=-1;j=nn[j]) ans[j]=query(r[pos[xx[j]]])-query(l[pos[xx[j]]]-1);\n            ii++;\n        }\n        if(doo[i]=='B'){\n            change(l[now],-1);\n            now=fa[now];\n        }\n        if(doo[i]>='a'&&doo[i]<='z'){\n            now=qwq[now].nex[id(doo[i])];\n            change(l[now],1);\n        }\n    }\n}\nvoid output(){\n    for(int i=0;i<n;i++)\n        printf(\"%d\\n\",ans[i]);\n}\nint main(){\n    input();\n    xxj();\n    output();\n    return 0;    \n}\n```",
        "postTime": 1483353504,
        "uid": 26051,
        "name": "Xiaojian_xiang",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2414 \u3010\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "$\\text{AC}$\u81ea\u52a8\u673a\u7ecf\u5178\u9898\u3002  \n\u628a\u5b57\u7b26\u4e32\u52a0\u8fdb\u6765\u7684\u65f6\u5019\u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u5c0f\u5199\u5b57\u6bcd$\\text{c}$\uff0c\u5c31\u8ba9\u5f53\u524d\u6240\u5728\u7684\u4f4d\u7f6e$\\text{u}$\u5f80$\\text{c}$\u8fd9\u4e2a\u4f4d\u7f6e\u8d70\u3002\u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f$\\text{B}$\u7684\u8bdd\u5c31\u8ba9$\\text{u}$\u6210\u4e3a\u5176$\\text{Trie}$\u6811\u4e0a\u7684\u7236\u4eb2\uff08\u76f8\u5f53\u4e8e\u6254\u6389\u4e86\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff09\u3002\u662f$\\text{P}$\u7684\u8bdd\u5c31\u5bf9$\\text{u}$\u6253\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u73b0\u5728\u8fd9\u4e2a\u70b9\u662f\u4e00\u4e2a\u4e32\u7684\u7ed3\u5c3e\u3002      \n\n\u63a5\u7740\u8003\u8651\u5982\u4f55\u66b4\u529b\u3002\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u5b50\u4e32\u76f8\u5f53\u4e8e\u662f**\u4e00\u4e2a\u524d\u7f00\u7684\u540e\u7f00**\uff0c\u4e00\u4e2a\u70b9$\\text{u}$\u7684$\\text{fail}$\u6307\u9488\u76f8\u5f53\u4e8e**\u6307\u5411\u4e86$\\text{u}$\u7684\u6700\u5927\u540e\u7f00\u6240\u5728\u7684\u70b9**\uff0c\u4e00\u4e2a\u70b9$\\text{u}$\u5728$\\text{Trie}$\u6811\u4e0a\u7684\u7956\u5148\u6240\u4ee3\u8868\u7684\u4e32\u76f8\u5f53\u4e8e**\u70b9$\\text{u}$\u6240\u4ee3\u8868\u7684\u4e32\u7684\u524d\u7f00\u3002**  \n\u5f88\u663e\u7136\u4e86\uff0c\u6bcf\u6b21\u628a\u70b9$\\text{u}$\u6cbf\u7740$\\text{Trie}$\u6811\u5f80\u4e0a\u8df3\uff0c\u7136\u540e\u4e00\u76f4\u8df3$\\text{fail}$\uff0c\u5982\u679c\u73b0\u5728\u8df3\u5230\u7684\u70b9\u662f\u67e5\u8be2\u7684\u4e32\u5728$\\text{Trie}$\u6811\u6240\u4ee3\u8868\u7684\u8282\u70b9\uff0c\u90a3\u5c31\u628a$\\text{ans}++$\u3002  \n\u5927\u6982\u53ef\u4ee5\u62ff$40 \\sim 50$\u5206\u3002  \n\u8981\u62ff\u6ee1\u5206\u8fd8\u9700\u8981\u522b\u7684\u65b9\u6cd5\u3002   \n\u6211\u4eec\u8003\u8651\u5efa\u8fd9\u6837\u4e00\u9897\u7684\u6811\uff1a\u4ee5\u539f\u5148$\\text{Trie}$\u6811\u4e0a\u7684\u8282\u70b9\u4e3a\u8282\u70b9\uff0c\u628a\u6240\u6709\u7684$\\text{fail}$\u6307\u9488\u53cd\u5411\uff0c\u770b\u6210\u4e00\u6761\u8fb9\u3002\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u6709\u4e00\u4e2a$\\text{fail}$\u6307\u9488\uff0c\u6240\u4ee5\u5efa\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u628a\u8fd9\u68f5\u6811\u53eb\u505a$\\text{fail}$\u6811\u3002  \n\u63a5\u7740\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u4ee5\u70b9$\\text{u}$\u4e3a\u6839\u7684\u8fd9\u9897\u5b50\u6811\u91cc\u7684\u6240\u6709\u70b9\u5728$\\text{Trie}$\u6811\u4e0a\u4ee3\u8868\u7684\u4e32\u4e00\u5b9a\u662f\u70b9$\\text{u}$\u5728$\\text{Trie}$\u6811\u4e0a\u4ee3\u8868\u7684\u4e32\u7684\u540e\u7f00\uff08\u56e0\u4e3a\u662f\u8df3\u4e86\u82e5\u5e72\u6b21$\\text{fail}$\u8df3\u8fc7\u6765\u7684\uff09\u3002    \n\u6240\u4ee5\u5bf9\u4e8e\u8be2\u95ee$(x,y)$\u6211\u4eec\u628a\u70b9$\\text{y}$\u5728$\\text{Trie}$\u6811\u7684\u7956\u5148\u5168\u90e8\u6807\u8bb0\u4e3a$\\text{1}$\uff0c\u7136\u540e\u7528\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u4e00\u4e0b\u4ee5$\\text{x}$\u4e3a\u6839\u7684\u5b50\u6811\u548c\u5c31\u597d\u4e86\u3002   \n\u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\u8fd8\u662f\u592a\u6162\uff0c\u80fd\u62ff\u4e2a$\\text{70}$\u5206\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u5c0f$\\text{trick}$\u3002   \n\u90a3\u5c31\u662f$\\text{dfs}$\u4e00\u904d\u539f\u6765\u7684$\\text{Trie}$\u6811\uff0c\u7136\u540e\u52a0\u8fdb\u4e00\u4e2a\u70b9\u65f6\u628a\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u8bbe\u6210$\\text{1}$\uff0c\u56de\u6eaf\u65f6\u628a\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u8bbe\u6210$0$\uff08\u8fd9\u6837\u5230\u8fbe\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u65f6\u6811\u4e0a\u4e3a$1$\u7684\u70b9\u4e00\u5b9a\u53ea\u6709\u5b83\u7684\u7956\u5148\uff09\uff0c\u7136\u540e\u6279\u5904\u7406\u4e00\u4e0b\u8be2\u95ee\uff0c\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002      \n\u653e\u4e00\u4e0b\u5199\u7684\u5f88\u4e11\u7684\u4ee3\u7801\u3002   \n```cpp\n#include <bits/stdc++.h>\n\nconst int N = 2e5 + 10;\nint n, m, i, j, k, u, tot, cnt;\nint ch[N][26], fail[N], fa[N], ans[N];   \nint _ch[N][26], id[N];\nint fir[N], nxt[N], to[N];\nint dfn[N], bit[N], R[N]; \nstruct node {\n  int x, i;\n  node() { x = i = 0; }\n  node(int _x, int _i) { x = _x, i = _i; }\n};\nstd::vector<node> ask[N];  \nstd::vector<int> ed[N];\nchar str[N];\ninline void get_fail() {\n  std::queue<int> q; \n  for (int i = 0; i < 26; i++)\n    if (ch[0][i]) q.push(ch[0][i]);\n  while (!q.empty()) {\n    int u = q.front(); q.pop();\n    for (int i = 0; i < 26; i++) {\n      if (ch[u][i]) fail[ch[u][i]] = ch[fail[u]][i], q.push(ch[u][i]);\n      else ch[u][i] = ch[fail[u]][i];\n    }\n  }\n}\nint tim = 0;\ninline void addedge(int u, int v) {\n  static int cnte = 0;\n  to[++cnte] = v, nxt[cnte] = fir[u], fir[u] = cnte;\n}\ninline void add(int i, int v) {\n  for (; i <= tim; i += i & -i) bit[i] += v;\n}\ninline int sum(int i) {\n  int res = 0;\n  for (; i; i -= i & -i) res += bit[i];\n  return res;\n}\nvoid dfs1(int u) {\n  dfn[u] = ++tim;\n  for (int i = fir[u]; i; i = nxt[i]) dfs1(to[i]);\n  R[u] = tim;\n}\nvoid dfs2(int u) {\n  add(dfn[u], 1);\n  if (ed[u].size()) { \n    for (int j = 0, Siz = ed[u].size(); j < Siz; j++) {\n      for (int i = 0, siz = ask[ed[u][j]].size(); i < siz; i++) {\n        int I = ask[ed[u][j]][i].i, x = ask[ed[u][j]][i].x;\n        ans[I] = sum(R[id[x]]) - sum(dfn[id[x]] - 1);\n      }\n    }\n  }\n  for (int i = 0; i < 26; i++)\n    if (_ch[u][i]) dfs2(_ch[u][i]);\n  add(dfn[u], -1);\n}\n\nint main() {\n  scanf(\"%s\", str + 1);\n  for (int i = 1, len = strlen(str + 1); i <= len; i++) {\n    char c = str[i]; \n    if (c >= 'a' && c <= 'z') {\n      c -= 'a';\n      if (!ch[u][c]) ch[u][c] = ++tot, fa[tot] = u;\n      u = ch[u][c];\n    } else if (c == 'B') u = fa[u];\n    else id[++cnt] = u, ed[u].push_back(cnt);\n  }\n  for (int i = 0; i <= tot; i++)\n    for (int j = 0; j < 26; j++)\n      _ch[i][j] = ch[i][j];\n  get_fail();\n  for (int i = 1; i <= tot; i++) addedge(fail[i], i);\n  scanf(\"%d\", &m);\n  for (int i = 1, x, y; i <= m; i++) {\n    scanf(\"%d %d\", &x, &y);\n    ask[y].push_back(node(x, i));\n  }\n  dfs1(0);\n  dfs2(0);\n  for (int i = 1; i <= m; i++) printf(\"%d\\n\", ans[i]);\n  return 0;\n}\n\n```",
        "postTime": 1580368989,
        "uid": 114320,
        "name": "\u843d\u6c50",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "## \u77e5\u8bc6\u70b9\uff1a\nAC\u81ea\u52a8\u673a\uff0cfail\u6811\uff0c\u79bb\u7ebf\uff0c\u6811\u72b6\u6570\u7ec4\uff0c\u4e3b\u5e2d\u6811\n\n## \u9898\u610f\uff1a\n\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u4e32\uff0c\u82e5\u5e72\u6b21\u8be2\u95ee(x,y)x\u4e32\u5728y\u4e32\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u9664\u4e86\u503c\u57df\uff08\u5c0f\u5199\u5b57\u6bcd\uff09\u5916\u8303\u56f4\u90fd\u662f1e5.\n\n## \u89e3\u6cd5\uff1a\n\u9996\u5148\uff0c\u6309\u7167\u5b83\u7ed9\u5b9a\u7684\u201c\u6253\u5b57\u673a\u8bfb\u5165\u65b9\u5f0f\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728trie\u4e0a\u8df3\uff0c\u6a21\u62df\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u3002\u9047\u5230\u5c0f\u5199\u5b57\u6bcd\uff0c\u5219\u5f80\u4e0b\u8df3\uff08\u6ca1\u6709\u5c31\u63d2\u5165\u65b0\u70b9\uff09\uff0c\u9047\u5230$B$\u5c31\u8df3\u56de\u5176\u7236\u4eb2\u5904\uff08\u6240\u4ee5trie\u8fd8\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7236\u4eb2\u70b9\u7684\u7f16\u53f7\uff09\uff0c\u9047\u5230$P$\u5c31\u6807\u8bb0\u4e00\u4e0b\u7ed3\u5c3e\u7684\u8282\u70b9\uff08\u5047\u5982\u539f\u6765\u6709\u70b9\uff0c\u90a3\u4e48\u5c31\u628a\u5f53\u524d\u4e32\u7684fa\u5b9a\u4e3a\u539f\u6765\u7684\u90a3\u4e2a\u4e32\uff0c\u5426\u5219\u65b0\u589e\u4e00\u4e2a\u7f16\u53f7\uff09\u3002\u5047\u5982\u4e0d\u6309\u4e0a\u9762\u8fd9\u79cd\u65b9\u6cd5\u6765\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u4e0a\u754c\u662f$O(n^2)$\u7684\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u8003\u8651\u5355\u4e2a\u7684(x,y)\u600e\u4e48\u5339\u914d\u3002\u6ce8\u610f\u9898\u76ee\u95ee\u7684\u662fx\u5728y\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u6211\u4eec\u8981\u660e\u786e\u51e0\u4e2a\u6027\u8d28\u3002\n* \u4e00\u4e2aACAM\u4e0a\u7684\u8282\u70b9\u5230\u6839\u8282\u70b9\u4e0a\u7684\u8def\u5f84\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u662f\u5f53\u524d\u70b9\u7684\u524d\u7f00\u3002\u8fd9\u4e2a\u7528trie\u6765\u7406\u89e3\u5c31\u975e\u5e38\u663e\u7136\u4e86\u3002\n* \u4e00\u4e2afail\u6811\u4e0a\u7684\u8282\u70b9\u5230\u6839\u8282\u70b9\u4e0a\u7684\u8def\u5f84\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u662f\u5f53\u524d\u70b9\u7684\u540e\u7f00\uff0c\u4e14\u4e00\u5b9a\u662f\u957f\u5ea6\u4f9d\u6b21\u5355\u8c03\u9012\u51cf\u7684\u4e00\u4e2a\u540e\u7f00\u3002\n\n\u8fd9\u91cc\u8865\u5145\u4e00\u4e0b\u4ec0\u4e48\u5c31\u505afail\u6811\uff0cfail\u6811\u5c31\u662f\u628afail\u6307\u9488\u53cd\u5411\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u7684\u4e00\u68f5\u6811\uff0c\u5177\u6709\u5f88\u591a\u5f88\u4f18\u7f8e\u7684\u6027\u8d28\u3002\n\n\u90a3\u4e48\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0a\u4e24\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u95eex\u5728y\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5c31\u662f\u95eex\u5728fail\u6811\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u70b9\u662fy\u8282\u70b9\u5728fail\u6811\u4e2d\u6240\u5bf9\u5e94\u8282\u70b9\u7684\u7956\u5148\uff08\u5305\u62ecy\u81ea\u5df1\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u4e0a\u9762\u7684\u90a3\u4e2a\u4fe1\u606f\u3002\n\n\u5047\u5982\u5728\u7ebf\u505a\uff0c\u90a3\u4e48\u6bcf\u6b21\u904d\u5386\u4e00\u6b21fail\u6811\uff0c\u662f$O(n^2)$\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u6240\u6709\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u56e0\u4e3a\u662f\u95eey\u4f5c\u4e3a\u6587\u672c\u4e32\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u9009\u62e9\u628ay\u6392\u5e8f\u5904\u7406\u3002\u4e0d\u8fc7\u8fd9\u91cc\u6211\u9009\u62e9\u5f00\u4e2avector\u76f4\u63a5\u628ay\u5bf9\u5e94\u7684fa\uff08\u5c31\u662f\u5728\u63d2\u5165\u65f6\uff0c\u76f8\u540c\u7684\u8bdd\u5c31\u8bb0\u7684\u90a3\u4e2afa\uff09\u5bf9\u5e94\u7684ACAM\u4e0a\u7684\u7f16\u53f7\u6302\u4e0a\u53bb\uff0c\u628ax\u4e5f\u540c\u6837\u5904\u7406\u540e\u6302\u4e0a\u53bb\u3002\n\n\u8003\u8651\u628afail\u6811\u7684DFS\u5e8f\u5f04\u51fa\u6765\uff08\u56e0\u4e3a\u4ee5\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e00\u5b9a\u662f\u5728DFS\u5e8f\u4e0a\u8fde\u7eed\u7684\u4e00\u6bb5\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5e8f\u5217\u4e0a\u7684\u95ee\u9898\u7528\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u3002\u56e0\u4e3a\u6bcf\u6b21\u8fdb\u5165\u8d70\u51fa\u67d0\u4e2a\u8282\u70b9\u53d1\u751f\u7684\u5f71\u54cd\u90fd\u662f1\uff0c\u6240\u4ee5DFS\u4e00\u904dtrie\u6811\uff08\u6ce8\u610f\u8fd9\u91cc\u8981\u5728\u6c42fail\u4e4b\u524d\u628a\u6240\u6709\u7684son\u5907\u4efd\u4e00\u904d\uff0c\u5426\u5219\u4f1a\u8fde\u5230\u4e00\u4e9b\u539f\u6765\u6ca1\u6709\u7684\u70b9\u4e0a\uff09\uff0c\u4e00\u5230\u4e00\u4e2a\u70b9\u5c31\u628a\u5f53\u524d\u70b9\u5728fail\u6811\u4e0a\u7684DFS\u5e8f\u6240\u5bf9\u5e94\u7684\u70b9\u5728\u6811\u72b6\u6570\u7ec4\u4e0a+1\uff0c\u7136\u540e\u56de\u7b54\u5f53\u524d\u70b9\u7684\u6240\u6709\u8be2\u95ee\uff08\u5747\u4e3ax\u70b9\u7684\u5b50\u6811\u53f3\u7aef\u70b9-x\u70b9\u7684\u5b50\u6811\u5de6\u7aef\u70b9\u5bf9\u4e8e\u7684\u503c\uff09\uff0c\u7136\u540e\u904d\u5386\u6240\u6709\u7684\u771f\u513f\u5b50\uff0c\u7136\u540e-1\u8d70\u4eba\u3002\n\n## \u6ce8\u610f\uff1a\n1. \u641e\u6e05\u695a\u4ec0\u4e48\u65f6\u5019\u662ffail\uff0c\u4ec0\u4e48\u65f6\u5019\u662ftrie\u3002\u8fd9\u91cc\u7406\u89e3\u5b50\u4e32\u4e2a\u4eba\u8ba4\u4e3a\u53ef\u4ee5\u7c7b\u6bd4SAM\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b50\u4e32=\u540e\u7f00\u7684\u524d\u7f00=\u524d\u7f00\u7684\u540e\u7f00\uff0c\u6240\u4ee5\u662f\u904d\u5386trie\u6811\uff0c\u4f46\u662f\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684DFS\u5e8f\u662f\u5728fail\u6811\u4e0a\u7684\u3002\n2. \u5047\u5982\u4f60\u5728\u60f3\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f\u52a0\u4e0a\u4e00\u4e2a\u5730\u65b9\u7684\u6240\u6709\u7684\u5b50\u4e32\u7ed3\u5c3e\u7684\u4e2a\u6570\uff0c\u800c\u662f+1\uff1f\u662f\u56e0\u4e3a\u9898\u76ee\u95ee\u7684\u662fx\u5728y\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5c31\u7b97\u51fa\u73b0\u5f88\u591a\u6b21\uff0c\u90a3\u4e5f\u53ea\u7b97\u4e00\u6b21\u3002\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<vector>\nusing namespace std;\n\nconst int maxn=100010;\nint n,m,head[maxn],etot,tot=1,c[maxn],dfn[maxn],low[maxn],fa[maxn],cnt,ans[maxn],id[maxn];\nstruct node\n{\n\tint nxt,to;\n}edge[maxn];\nstruct trie\n{\n\tint son[26],fail,tag,fa,ch[26];\n}a[maxn];\nstruct pro\n{\n\tint x,id;\n};\nvector<pro>que[maxn];\nqueue<int>q;\nchar s[maxn];\n\nint read()\n{\n\tint x=0;\n\tchar c=getchar();\n\twhile (c<48||c>57)\n\t\tc=getchar();\n\twhile (c>=48&&c<=57)\n\t\tx=(x<<1)+(x<<3)+(c^48),c=getchar();\n\treturn x;\n}\n\nvoid insert(char *s)\n{\n\tint i,u=1,len=strlen(s),k;\n\ta[1].fa=1;\n\tfor (i=0;i<len;i++)\n\t{\n\t\tif (s[i]>='a'&&s[i]<='z')\n\t\t{\n\t\t\tk=s[i]-'a';\n\t\t\tif (!a[u].son[k])\n\t\t\t{\n\t\t\t\ta[u].son[k]=(++tot);\n\t\t\t\ta[tot].fa=u;\n\t\t\t}\n\t\t\tu=a[u].son[k];\n\t\t}\n\t\tif (s[i]=='B')\n\t\t\tu=a[u].fa;\n\t\tif (s[i]=='P')\n\t\t{\n\t\t\tid[++n]=u;\n\t\t\tfa[n]=n;\n\t\t\tif (a[u].tag)\n\t\t\t\tfa[n]=a[u].tag;\n\t\t\telse\n\t\t\t\ta[u].tag=n;\n\t\t}\n\t}\n}\n\nvoid getfail()\n{\n\tint i,u,v,fafail;\n\tfor (i=0;i<=25;i++)\n\t\ta[0].son[i]=1;\n\ta[1].fail=0;\n\tq.push(1);\n\twhile (!q.empty())\n\t{\n\t\tu=q.front();\n\t\tq.pop();\n\t\tfafail=a[u].fail;\n\t\tfor (i=0;i<=25;i++)\n\t\t{\n\t\t\tv=a[u].son[i];\n\t\t\tif (!v)\n\t\t\t\ta[u].son[i]=a[fafail].son[i];\n\t\t\telse\n\t\t\t{\n\t\t\t\ta[v].fail=a[fafail].son[i];\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid add(int u,int v)\n{\n\tedge[++etot]=(node){head[u],v};\n\thead[u]=etot;\n}\n\nint lowbit(int x)\n{\n\treturn x&-x;\n}\n\nvoid update(int x,int val)\n{\n\tfor (;x<=cnt;x+=lowbit(x))\n\t\tc[x]+=val;\t\n}\n\nint query(int x)\n{\n\tint res=0;\n\tfor (;x;x-=lowbit(x))\n\t\tres+=c[x];\n\treturn res;\n}\n\nvoid DFS(int u)\n{\n\tint i;\n\tdfn[u]=(++cnt);\n\tfor (i=head[u];i;i=edge[i].nxt)\n\t\tDFS(edge[i].to);\n\tlow[u]=cnt;\n}\n\nvoid dfs(int u)\n{\n\tupdate(dfn[u],1);\n\tint i,siz=que[u].size();\n\tfor (i=0;i<siz;i++)\n\t\tans[que[u][i].id]=query(low[que[u][i].x])-query(dfn[que[u][i].x]-1);\n\tfor (i=0;i<=25;i++)\n\t\tif (a[u].ch[i])\n\t\t\tdfs(a[u].ch[i]);\n\tupdate(dfn[u],-1);\n}\n\nint main()\n{\n\tint i,j,u,v;\n\tscanf(\"%s\",s);\n\tinsert(s);\n\tfor (i=1;i<=tot;i++)\n\t\tfor (j=0;j<=25;j++)\n\t\t\ta[i].ch[j]=a[i].son[j];\n\tgetfail();\n\tfor (i=1;i<=tot;i++)\n\t\tif (a[i].fail!=i&&a[i].fail>=1)\n\t\t\tadd(a[i].fail,i);\n\tDFS(1);\n\tm=read();\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tu=id[fa[read()]],v=id[fa[read()]];\n\t\tque[v].push_back((pro){u,i});\n\t}\n\tdfs(1);\n\tfor (i=1;i<=m;i++)\n\t\tprintf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1580123884,
        "uid": 38036,
        "name": "\u5357\u65b9\u4e0d\u8d25",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "[\u9898\u76ee\u5728\u8fd9\u91ccqwq](https://www.luogu.com.cn/problem/P2414)\n\n---\n\n\u6240\u6709\u6709\u6548\u7684\u4e32,\u603b\u957f\u5ea6\u662f$O(L^2)$,\u6211\u4eec\u4e0d\u80fd\u628a\u4ed6\u4eec\u5206\u522b\u6c42\u51fa\u6765,\u518d\u5efa\u7acbtrie,\u800c\u662f\u6839\u636e\u8f93\u5165\u7684B,P\u7684\u4e32,\u76f4\u63a5\u6784\u9020\u4e00\u4e2atrie.  \n\n\u4ece\u4ee3\u8868\u7a7a\u4e32\u7684\u6839\u8282\u70b9$q_s$\u5f00\u59cb,\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a$q$,trie\u6811\u4e0a\u7236\u4eb2\u4e3a$fa(q)$,\u52a0\u5165\u5b57\u7b26$c$\u540e\u5230\u8fbe$tr(q,c)$.  \n- \u5bf9\u4e8e\u6b63\u5e38\u5b57\u7b26$c$ \u5411\u4e0b\u6269\u5c55$tr(q,c)$,\u5e76\u8f6c\u79fb\u5230$tr(q,c)$\n- \u5bf9\u4e8eB \u56de\u9000\u5230trie\u6811\u4e0a\u7684\u7236\u8282\u70b9$fa(q)$.\n- \u5bf9\u4e8eP \u8bb0\u5f55\u5f53\u524d\u6240\u5728\u8282\u70b9$end(n)=q$,$S_n$\u4ece$q_s$\u5f00\u59cb\u5339\u914d\u7ed3\u675f\u4e8e$end(n)=q$.  \n\n\n\u6784\u9020AC\u81ea\u52a8\u673a(\u5efaDFA\u4e0d\u8981NFA). \n\u8bbe$fail(q)$\u4e3a\u7f16\u53f7\u4e3a$q$\u7684\u72b6\u6001\u5931\u914d\u65f6\u8f6c\u79fb\u5230\u7684\u72b6\u6001(DFA\u4e0d\u5141\u8bb8\u8fd9\u79cd\u8f6c\u79fb\u8fb9,\u6211\u4eec\u53ea\u662f\u7528\u5b83\u6784\u5efafail\u6811\u8fdb\u884c\u8ba1\u6570),$tr(q,c)$\u4e3a\u72b6\u6001$q$\u8f93\u5165\u5b57\u7b26$c$\u540e\u8f6c\u79fb\u5230\u7684\u72b6\u6001.\n\n\u5bf9\u4e8e\u67e5\u8be2$Q(x,y)$\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u90fd\u4ece$qs$\u5f00\u59cb\u8fdb\u884c\u5339\u914d,\u53d1\u73b0\u7b54\u6848\u662f\u8fd9\u4e2a\u6837\u5b50.\n\n\u6807\u8bb0$\\forall v(\\exists k,fail^k(v)=tr(qs,S_y))$\u5373$fail$\u6811\u4e0a$S_y$\u5bf9\u5e94\u72b6\u6001\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u72b6\u6001,\u897f\u7136\u5230\u8fbe\u4e00\u6b21\u5b83\u4eec\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001\u8bf4\u660e\u5339\u914d\u5230\u4e86\u4e00\u6b21$y$.  \n\u7edf\u8ba1$tr(qs,S_x[1,1]),tr(qs,S_x[1,2])\\dots tr(qs,S_x)$\u4e2d\u88ab\u6807\u8bb0\u7684\u72b6\u6001\u6570(\u8fd9\u91cc\u8d70\u7684\u8fb9\u90fd\u662f\u539f\u59cb\u7684trie\u4e0a\u9762\u7684\u8fb9,\u800c\u4e0d\u4f1a\u5931\u914d\u8d70\u7ecf\u7531fail\u7684\u8f6c\u79fb).\n\n\n\u6211\u4eec\u8003\u8651\u4e24\u68f5\u6811,$fail,trie$(\u70b9\u662f\u6709\u5bf9\u5e94\u5173\u7cfb\u7684,\u4f46\u662f\u8fb9\u6ca1\u6709),\u4ee4$[L(q),R(q)]$\u4e3afail\u6811\u4e0a\u8282\u70b9$q$\u7684dfs\u5e8f\u533a\u95f4.\u6211\u4eec\u8981\u505a\u7684\u5176\u5b9e\u662f\u8fd9\u4e2a.\n\n$$\n\\sum_{i=1}^{len(S_x)}[L(tr(qs,S_x[1,i])\\in L(end(y),R(end(y))]\n$$\n\n\u6211\u4eecdfs\u4e00\u4e0btrie\u6811,\u7ef4\u62a4\u6839\u94fe\u4e0a\u8282\u70b9\u5728fail\u6811\u4e0a\u7684dfs\u5e8f\u5f00\u59cb\u4f4d\u7f6e\u96c6\u5408$Sp$,\u8fdb\u5165$x$\u65f6,\u63d2\u5165$L(x)$(\u5728trie\u4e0a\u9762dfs,\u63d2\u5165\u7684\u662f$x$\u5728fail\u6811\u7684dfs\u5e8f\u4e2d\u7684\u4f4d\u7f6e),\u79bb\u5f00\u65f6\u5220\u9664\u6389\u5b83.  \n\u8d70\u5230$end(S_y)$\u65f6,$Q(x,y)=\\sum_{v\\in Sp}[\\,L(v)\\in [L(end(y)),R(end(y))]\\,]$\u8fd9\u662f\u4e2a\u5355\u70b9\u52a0,\u533a\u95f4\u6c42\u548c,\u6211\u4eec\u4f7f\u7528\u4e00\u4e2aBIT\u89e3\u51b3\u5b83.  \n\u5982\u679c\u662f\u5728\u7ebf\u7684\u8bdd,\u53ea\u9700\u8981\u628a\u6bcf\u4e2a\u70b9\u7684\u6839\u94fe\u7684$Sp$\u4fdd\u7559\u4e0b\u6765,\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7a7a\u95f4\u591a\u4e00\u4e2a$log$\u5c31\u80fd\u53d8\u6210\u5728\u7ebf\u7b97\u6cd5.\n\n---\n\n\u6254\u4ee3\u7801\u8dd1\u8def.\n\n\n```cpp\n#include <bits/stdc++.h>\nint read(){\n\tint x=0;char c;\n\tdo{c=getchar();}while(!isdigit(c));\n\tdo{x=x*10+c-'0';c=getchar();}while(isdigit(c));\n\treturn x;\n}\nconst int N=100000+10;\nint n,m,cnt,qs,end[N],ans[N];\nstruct Node{\n\tint tr[26],fail;\n\t// tr:trie of strings\n\t// fail:fail tree\n\tNode(){ fail=0;\n\t\tfor(int i=0;i<26;i++) tr[i]=0;\n\t}\n}t[N];\nint& tr(int q,int c){ return t[q].tr[c]; }\nint& fail(int q){ return t[q].fail; }\n\nstd::vector<int> g_fail[N];\nint l[N],r[N],idx; // dfs order of fail-tree\nvoid dfs0(int u){\n\tl[u]=++idx;\n\tfor(int i=0;i<g_fail[u].size();i++) dfs0(g_fail[u][i]);\n\tr[u]=idx;\n}\nstd::vector<int> g_trie[N];\nstd::vector<std::pair<int,int> > qry[N];\nint bit[N]; inline int lowbit(int x){ return x&(-x); }\nvoid add(int x,int y){\n\twhile(x<=cnt){\n\t\tbit[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n}\nint pre(int x){\n\tint s=0;\n\twhile(x){\n\t\ts+=bit[x];\n\t\tx^=lowbit(x);\n\t}\n\treturn s;\n}\n\nvoid solve(int u){\n\tadd(l[u],1);\n\tfor(int i=0;i<qry[u].size();i++){\n\t\tint id=qry[u][i].first,v=qry[u][i].second;\n\t\tans[id]=pre(r[v])-pre(l[v]-1);\n\t}\n\tfor(int i=0;i<g_trie[u].size();i++) solve(g_trie[u][i]);\n\tadd(l[u],-1);\n}\n\nint q[N],ql,qr;\nvoid init(){\n\tfor(int i=1;i<=cnt;i++) for(int j=0;j<26;j++){\n\t\tint v=tr(i,j); if(v) g_trie[i].push_back(v);\n\t}\n\tql=qr=0; for(int i=0;i<26;i++){\n\t\tint &j=tr(qs,i);\n\t\tif(j>0) fail(q[qr++]=j)=qs;\n\t\telse j=qs;\n\t}\n\twhile(ql<qr){\n\t\tint u=q[ql++]; for(int i=0;i<26;i++){\n\t\t\tint &j=tr(u,i),t=tr(fail(u),i);\n\t\t\tif(j>0) fail(q[qr++]=j)=t;\n\t\t\telse j=t;\n\t\t}\n\t}\n\tfor(int i=1;i<=cnt;i++) g_fail[fail(i)].push_back(i);\n\tidx=0; dfs0(qs);\n}\n\nint main(){\n\t//freopen(\"in\",\"r\",stdin);\n\tint p=(qs=++cnt); q[qr++]=p;\n\tstd::string s; std::cin>>s;\n\tfor(int i=0,ln=s.length();i<ln;i++){\n\t\tif(s[i]=='P') end[++n]=p;\n\t\telse if(s[i]=='B'){ p=q[qr-2]; qr--; }\n\t\telse{\n\t\t\tint &j=tr(p,s[i]-'a');\n\t\t\tif(j==0) j=++cnt;\n\t\t\tq[qr++]=(p=j);\n\t\t}\n\t}\n\tinit(); m=read();\n\tfor(int i=0;i<m;i++){\n\t\tint x=read(),y=read();\n\t\tqry[end[y]].push_back(std::make_pair(i,end[x]));\n\t}\n\tsolve(qs);\n\tfor(int i=0;i<m;i++) printf(\"%d\\n\",ans[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1579187457,
        "uid": 15295,
        "name": "hehelego",
        "ccfLevel": 0,
        "title": "[NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a sol"
    },
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u4e00\u68f5\u5b57\u5178\u6811\uff0c\u8be2\u95ee\u6811\u4e0a\u4e24\u4e2a\u4e32\u4e2d\u5176\u4e2d\u4e00\u4e2a\u5728\u53e6\u4e00\u4e2a\u7684\u5b50\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u8f6c\u5316\u95ee\u9898\u3002\u6211\u4eec\u5efa\u4e00\u4e2aAC\u81ea\u52a8\u673a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u6210\u76ee\u6807\u4e32\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u6cbf\u7740fail\u6307\u9488\u8dd1\uff0c\u80fd\u8bbf\u95ee\u591a\u5c11\u6b21\u6a21\u5f0f\u4e32\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e2a\u8282\u70b9\u3002\u8fd9\u4e5f\u5c31\u662f\u6c42\u76ee\u6807\u4e32\u524d\u7f00\u7684\u540e\u7f00\u4e0e\u6a21\u5f0f\u4e32\u5339\u914d\u7684\u8fc7\u7a0b\u3002\n\n\u8fdb\u4e00\u6b65\u8f6c\u5316\u5c31\u662ffail\u6307\u9488\u53cd\u5411\u5efa\u6811\u540e\uff0c\u6a21\u5f0f\u4e32\u672b\u8282\u70b9\u7684fail\u4e0a\u5b50\u6811\u4e2d\u5c5e\u4e8e\u76ee\u6807\u4e32\u7684\u8282\u70b9\u6570\u3002\n\n\u6c42\u5b50\u6811\u95ee\u9898\u6211\u4eec\u8003\u8651\u5728fail\u6811\u7684dfs\u5e8f\u4e0a\u7ef4\u62a4\u5f53\u524d\u5b58\u5728\u7684\u70b9\u6570\u3002\u7531\u4e8e\u76ee\u6807\u4e32\u90fd\u662fdfs\u8fc7\u7a0b\u4e2d\u6808\u7684\u4e00\u4e2a\u72b6\u6001\uff0c\u6211\u4eec\u5728\u628a\u70b9\u52a0\u5165\u6808\u65f6\u628a\u8fd9\u4e2a\u70b9\u5728fail\u7684dfs\u5e8f\u4e0a\u6807\u8bb0\uff0c\u51fa\u6808\u65f6\u53d6\u6d88\u6807\u8bb0\uff0c\u5f53\u6808\u72b6\u6001\u4e0e\u6211\u4eec\u6c42\u7684\u76ee\u6807\u4e32\u5339\u914d\u7684\u65f6\u5019\u6211\u4eec\u6c42\u4e00\u4e0b\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32\u7684fail\u5b50\u6811\u7684\u6807\u8bb0\u6570\u5373\u53ef\u3002\n\n\u5b9e\u9645\u5b9e\u73b0\u6211\u4eec\u628a\u8be2\u95ee\u79bb\u7ebf\u6309\u76ee\u6807\u4e32y\u7684\u6253\u5370\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u628a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8dd1\u4e00\u904d\uff08\u4e5f\u5c31\u76f8\u5f53\u4e8e\u7ed9\u5b9adfs\u5e8f\u7684dfs\uff09\uff0c\u6807\u8bb0\u6c42\u548c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\u3002\n\n\n    \n    \n    \n    \n    \n                        \n    \n    \n    \n    \n    \n```cpp\n    #include<cstdio>\n    #include<cstdlib>\n    #include<cstring>\n    #include<algorithm>\n    using namespace std;\n    typedef int ITA[100005];\n    ITA tl,gl,ans,fr,sz,pxx;\n    char ch[100005];\n    int gg,tt,qq,m,L;\n    inline int kano()\n    {\n        char ch=getchar();int w=0,u=1;\n        for(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')u=-1;\n        for(;ch>='0'&&ch<='9';ch=getchar())w=w*10+ch-'0';\n        return w*u;\n    }\n    struct QUERY\n    {\n        int x,y;\n        int num;\n    }qr[100005];\n    bool cmpy(const QUERY &a,const QUERY &b){return a.y<b.y;}\n    struct SSSD\n    {\n        int ed,nxt;\n    }sd[200005];\n    inline void addedge(int a,int b){sd[++tt]=(SSSD){b,fr[a]};fr[a]=tt;}\n    struct BIT\n    {\n        int a[100005];\n        inline static int L(int x){return  x&(-x);}\n        void add(int pos,int v){for(;pos<=qq;pos+=L(pos))a[pos]+=v;}\n        int query(int r)\n        {\n            int ans=0;\n            for(;r>0;r-=L(r))ans+=a[r];\n            return ans;\n        }\n        int query(int l,int r){return query(r)-query(l-1);}\n    }bit;\n    struct ACnode\n    {    \n        int fail;\n        int c;\n        int nx[26];\n        int fa;\n    };\n    struct ACautomaton\n    {\n        ACnode a[100005];\n        int t;\n        int rt;\n        ACautomaton(){t=1;rt=1;a[1].fail=1;}\n        void build_trie()\n        {\n            int pt=0;\n            for(int i=0,nw=rt;i<L;i++)\n            {\n                switch(ch[i])\n                {\n                    case 'P':{\n                        pxx[++pt]=nw;\n                        break;\n                    }\n                    case 'B':{\n                        nw=a[nw].fa;\n                        break;\n                    }\n                    default:{\n                        if(a[nw].nx[ch[i]-'a'])break;\n                        a[nw].nx[ch[i]-'a']=++t;\n                        a[t].c=ch[i]-'a';\n                        if(nw==rt)\n                        {\n                            a[t].fail=rt;\n                            addedge(rt,t);\n                        }\n                        a[t].fa=nw;nw=t;\n                    }\n                }\n            }    \n        }\n        void build_fail()\n        {\n            int nw=0;\n            int qu[100005];\n            int qt=1,qs=0;\n            qu[1]=rt;\n            while(qt>qs)\n            {\n                nw=qu[++qs];\n                for(int i=0;i<26;)\n                {\n                    while(!a[nw].nx[i]&&i<26)++i;\n                    if(i>=26)break;\n                    qu[++qt]=a[nw].nx[i];\n                    ++i;\n                }\n                if(a[nw].fail)continue;\n                for(int n2=a[a[nw].fa].fail;n2!=rt;n2=a[n2].fail)\n                {\n                    if(!a[n2].nx[a[nw].c])continue;\n                    a[nw].fail=a[n2].nx[a[nw].c];\n                    addedge(a[n2].nx[a[nw].c],nw);\n                    break;\n                }\n                if(!a[nw].fail)\n                {\n                    if(!a[rt].nx[a[nw].c])\n                    {\n                        a[nw].fail=rt;\n                        addedge(rt,nw);\n                    }\n                    else\n                    {\n                        a[nw].fail=a[rt].nx[a[nw].c];\n                        addedge(a[rt].nx[a[nw].c],nw);\n                    }\n                }\n            }\n        }\n        void rebuild()\n        {\n            int qt=1,pt=0;\n            for(int i=0,nw=rt;i<L;i++)\n            {\n                switch(ch[i])\n                {\n                    case 'P':{\n                        pt++;\n                        while(qr[qt].y==pt)\n                        {\n                            ans[qr[qt].num]=bit.query(tl[pxx[qr[qt].x]],tl[pxx[qr[qt].x]]+sz[pxx[qr[qt].x]]-1);\n                            qt++;\n                        }\n                        break;\n                    }\n                    case 'B':{\n                        bit.add(tl[nw],-1);\n                        nw=a[nw].fa;\n                        break;\n                    }\n                    default:{\n                        nw=a[nw].nx[ch[i]-'a'];\n                        bit.add(tl[nw],1);\n                    }\n                }\n            }        \n        }\n    }AC;\n    void dfs_fail(int nw)\n    {\n        tl[nw]=++qq;gl[qq]=nw;sz[nw]=1;\n        for(int i=fr[nw];i!=0;i=sd[i].nxt)\n        {\n            dfs_fail(sd[i].ed);\n            sz[nw]+=sz[sd[i].ed];\n        }\n    }\n    int main()\n    {\n        scanf(\"%s\",ch);L=strlen(ch);\n        AC.build_trie();\n        AC.build_fail();\n        dfs_fail(AC.rt);\n        m=kano();\n        for(int i=1;i<=m;i++)\n        {\n            qr[i].x=kano();\n            qr[i].y=kano();\n            qr[i].num=i;\n        }\n        sort(qr+1,qr+1+m,cmpy);\n        AC.rebuild();\n        for(int i=1;i<=m;i++)printf(\"%d\\n\",ans[i]);\n    }\n\u540c\u6837\u7684\u4e00\u4efd\uff1ahttp://www.msfakatsuki.com/index/Pennant-number=327\n```",
        "postTime": 1514468437,
        "uid": 3506,
        "name": "MSF_Akatsuki",
        "ccfLevel": 0,
        "title": "\u3010luogu2414\u3011[Noi2011]\u963f\u72f8\u7684\u6253\u5b57\u673a"
    },
    {
        "content": "\u4e00\u4e2a\u4e32a\u5728b\u4e2d\u51fa\u73b0, \u90a3\u4e48a\u662fb\u7684\u67d0\u4e9b\u524d\u7f00\u7684\u540e\u7f00, \u6240\u4ee5\u641e\u51faAC\u81ea\u52a8\u673a, \u6309fail\u53cd\u5411\u5efa\u6811, \u7136\u540e\u67e5\u8be2(x, y)\u5c31\u662fy\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u662fx\u7684\u524d\u7f00. \u79bb\u7ebf, \u5bf9AC\u81ea\u52a8\u673aDFS\u4e00\u904d, \u7528dfs\u5e8f+\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4, DFS\u5230\u7684\u67e5\u8be2\u70b9\u5c31\u56de\u7b54\u8be2\u95ee.\u65f6\u95f4\u590d\u6742\u5ea6O(|ACAM|+QlogQ)\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n    \n    \n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#include<cctype>\nusing namespace std;\n#define chk(c) ((c <= 'z' && c >= 'a') || (c =='P') || (c == 'B'))\n#define C(c) (c - 'a')\nconst int maxn = 100009;\nconst int c = 26;\ninline int read() {\n    char c = getchar();\n    for(; !isdigit(c); c = getchar());\n    int ret = 0;\n    for(; isdigit(c); c = getchar())\n        ret = ret * 10 + c - '0';\n    return ret;\n}\nstruct Node {\n    Node *ch[c], *fail, *par;\n    int v, d;\n    Node() : v(0) {\n        memset(ch, 0, sizeof ch);\n        fail = par = 0;\n    }\n} pool[maxn], *V[maxn], *pt = pool, *Rt;\nstruct Q {\n    int d, x, y;\n    inline void Read(int _d) {\n        d = _d;\n        x = read();\n        y = read();\n    }\n    bool operator < (const Q &o) const {\n        return y < o.y;\n    }\n} q[maxn];\nint n, dfsn, qn;\nint L[maxn], R[maxn], ql[maxn], qr[maxn], ans[maxn];\nvoid Init() {\n    int cnt = dfsn = n = 0;\n    pt->d = n++;\n    Rt = pt++;\n    Node* t = Rt;\n    char c = getchar();\n    for(; !chk(c); c = getchar());\n    for(; chk(c); c = getchar()) {\n        if(c == 'P') {\n            V[t->v = ++cnt] = t;\n        } else if(c == 'B') {\n            t = t->par;\n        } else {\n            if(!t->ch[C(c)]) {\n                pt->par = t;\n                pt->d = n++;\n                t->ch[C(c)] = pt++;\n            }\n            t = t->ch[C(c)];\n        }\n    }\n    scanf(\"%d\", &qn);\n    for(int i = 0; i < qn; i++) \n        q[i].Read(i);\n    sort(q, q + qn);\n    memset(ql, 0, sizeof(int) * (cnt + 1));\n    memset(qr, -1, sizeof(int) * (cnt + 1));\n    for(int i = 0; i < qn; i++) {\n        if(!i || q[i - 1].y != q[i].y)\n            ql[q[i].y] = i;\n        if(i + 1 == qn || q[i + 1].y != q[i].y)\n            qr[q[i].y] = i;\n    }\n}\nstruct edge {\n    int to;\n    edge* next;\n} E[maxn << 1], *Pt = E, *head[maxn];\ninline void AddEdge(int u, int v) {\n    Pt->to = v;\n    Pt->next = head[u];\n    head[u] = Pt++;\n}\nqueue<Node*> que;\nvoid buildFail() {\n    que.push(Rt);\n    while(!que.empty()) {\n        Node* t = que.front(); que.pop();\n        if(t->fail)\n            AddEdge(t->fail->d, t->d);\n        for(int i = 0; i < c; i++) if(t->ch[i]) {\n            Node* f = t->fail;\n            while(f && !f->ch[i])\n                f = f->fail;\n            t->ch[i]->fail = f ? f->ch[i] : Rt;\n            que.push(t->ch[i]);\n        }\n    }\n}\nstruct BIT {\n    int b[maxn];\n    BIT() {\n        memset(b, 0, sizeof b);\n    }\n    inline void Add(int x, int v) {\n        for(; x <= n; x += x & -x)\n            b[x] += v;\n    }\n    inline int Sum(int x) {\n        int ret = 0;\n        for(; x; x -= x & -x)\n            ret += b[x];\n        return ret;\n    }\n    inline int Query(int l, int r) {\n        return Sum(r) - Sum(l - 1);\n    }\n} Bit;\nvoid DFS(int x) {\n    L[x] = ++dfsn;\n    for(edge* e = head[x]; e; e = e->next) DFS(e->to);\n    R[x] = dfsn;\n}\nvoid dfsAC(Node* t) {\n    Bit.Add(L[t->d], 1);\n    if(t->v) {\n        for(int i = ql[t->v]; i <= qr[t->v]; i++)\n            ans[q[i].d] = Bit.Query(L[V[q[i].x]->d], R[V[q[i].x]->d]);\n    }\n    for(int i = 0; i < c; i++)\n        if(t->ch[i]) dfsAC(t->ch[i]);\n    Bit.Add(L[t->d], -1);\n}\nint main() {\n    Init();\n    buildFail();\n    DFS(0);\n    dfsAC(Rt);\n    for(int i = 0; i < qn; i++)\n        printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1474728390,
        "uid": 22733,
        "name": "eternal",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2414 \u3010\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    },
    {
        "content": "\u9996\u5148\u6839\u636eac\u81ea\u52a8\u673a\u7684\u6027\u8d28\uff0cy\u5728x\u4e2d\u7684\u6bcf\u6b21\u51fa\u73b0\uff0c\u5c31\u662f\u6709\u4e00\u4e2ay\u7684\u5b57\u7b26\u7684fail\u6307\u9488\u6307\u5411x\u7684\u7ed3\u675f\u8282\u70b9\u3002\n    \n\u6240\u4ee5\u6211\u4eec\u7684\u95ee\u9898\u53d8\u6210\u4e86\u7edf\u8ba1\u591a\u5c11\u4e2ay\u4e2d\u7684fail\u6307\u9488\u6307\u5411x\u3002\n\n\u7531\u6b64\u5f97\u5230\u542f\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u4e00\u9897fail\u6811\uff0c\u6811\u4e0a\u7684\u6bcf\u6761\u8fb9\u5c31\u662f\u539ftrie\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5b83\u7684fail\u8282\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u7edf\u8ba1\u5728fail\u6811\u4e2d\uff0c\u5173\u4e8e\u6bcf\u4e2ax\u7684\u8282\u70b9\uff0cy\u8282\u70b9\u5728\u5b83\u7684\u5b50\u6811\u4e2d\u51fa\u73b0\u4e86\u51e0\u6b21\u3002\n\n\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u8fd9\u6837\u7edf\u8ba1\uff0c\u662f\u56e0\u4e3a\u5728fail\u6811\u4e2d\uff0c\u5173\u4e8e\u6bcf\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9x\uff0c\u5b83\u5fc5\u7136\u662f\u5b83\u5b50\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u3002\n\n\u5173\u4e8e\u8fd9\u79cd\u6811\u4e0a\u5b50\u6811\u7edf\u8ba1\u95ee\u9898\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u5b83\u7684dfs\u5e8f\u6765\u8fdb\u884c\u8ba1\u6570\u3002\n\n\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u56e0\u4e3a\u5f88\u591a\u4e2a\u4e32\u53ef\u80fd\u51fa\u73b0\u91cd\u590d\uff0c\u6240\u4ee5\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u91cd\u590d\u63d2\u5165\u5e76\u8fdb\u884c\u7edf\u8ba1\u4f1a\u9020\u6210\u5927\u91cf\u7684\u65f6\u95f4\u6d6a\u8d39\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5de7\u5999\u7684\u4f18\u5316\uff1a\u6211\u4eec\u5728\u7edf\u8ba1\u4e2d\uff0c\u6309\u7167\u6700\u521d\u7684trie\u56fe\u8fdb\u884c\u904d\u5386\uff0c\u5047\u5982\u5f53\u524d\u8282\u70b9\u662f\u4e00\u4e2a\u5b50\u4e32\u7684\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5f53\u524d\u5df2\u7ecf\u63d2\u5165\u7684\u5b57\u7b26\u80af\u5b9a\u662f\u4e14\u53ea\u80fd\u662f\u8be5\u5b50\u4e32\u4e2d\u7684\u5b57\u7b26\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5bf9fail\u6811\u7684o\uff08n\uff09\u904d\u5386\u4e86\u3002",
        "postTime": 1544187846,
        "uid": 53032,
        "name": "\u5c0f\u5858\u7a7a\u660e",
        "ccfLevel": 0,
        "title": "P2414 [NOI2011]\u963f\u72f8\u7684\u6253\u5b57\u673a"
    },
    {
        "content": "\u76f4\u63a5KMP\u636e\u8bf4\u662f40\u5206\n\n\u76f4\u63a5AC\u81ea\u52a8\u673a\u636e\u8bf470\u5206\n\n\u6ee1\u5206\u505a\u6cd5\n\n\u6811\u72b6\u6570\u7ec4\u4f18\u5316AC\u81ea\u52a8\u673a\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nconst int maxn=200010;\nvector<int> qry[maxn],son[maxn];\nchar s[maxn];\n```\nint trans[maxn][30],fail[maxn],fa[maxn],que[maxn],\nL[maxn],R[maxn],sum[maxn],qx[maxn],ans[maxn],\n\npos[maxn],\n\n```cpp\nn,q,tot,num,clo;\nvoid dfs(int u)\n{\n    L[u]=++clo;\n    vector<int>::iterator it;\n    for (it=son[u].begin();it!=son[u].end();it++) dfs(*it);\n    R[u]=clo;\n}\nint query(int p)\n{\n    int ret=0;\n    for (;p;p-=p&-p) ret+=sum[p];\n    return ret;\n}\nvoid add(int p,int x)\n{\n    for (;p<=clo;p+=p&-p) sum[p]+=x;\n}\nint main()\n{\n    //freopen(\"in\",\"r\",stdin);\n    int p=0,hd=1,tl=0,u,v;\n    vector<int>::iterator it;\n    scanf(\"%s\",s+1);\n    n=strlen(s+1);\n    for (int i=1;i<=n;i++)\n        if (s[i]=='P') pos[++num]=p;\n        else if (s[i]=='B') p=fa[p];\n        else\n        {\n            if (!trans[p][s[i]-'a']) fa[trans[p][s[i]-'a']=++tot]=p;\n            p=trans[p][s[i]-'a'];\n        }\n    for (int i=0;i<26;i++)\n        if (trans[0][i]) que[++tl]=trans[0][i];\n    while (hd<=tl)\n    {\n        u=que[hd++];\n        for (int i=0;i<26;i++)\n            if (trans[u][i])\n            {\n                que[++tl]=trans[u][i];\n                fail[trans[u][i]]=trans[fail[u]][i];\n            }\n            else trans[u][i]=trans[fail[u]][i];\n    }\n    for (int i=1;i<=tot;i++) son[fail[i]].push_back(i);\n    scanf(\"%d\",&q);\n    for (int i=1;i<=q;i++)\n    {\n        scanf(\"%d%d\",&u,&v);\n        qx[i]=pos[u];\n        qry[pos[v]].push_back(i);\n    }\n    dfs(0);\n    p=0;\n    for (int i=1;i<=n;i++)\n        if (s[i]=='P')\n            for (it=qry[p].begin();it!=qry[p].end();it++) ans[*it]=query(R[qx[*it]])-query(L[qx[*it]]-1);\n        else if (s[i]=='B')\n        {\n            add(L[p],-1);\n            p=fa[p];\n        }\n        else\n        {\n            p=trans[p][s[i]-'a'];\n            add(L[p],1);\n        }\n    for (int i=1;i<=q;i++) printf(\"%d\\n\",ans[i]);\n```\nreturn 0\uff1b\n}",
        "postTime": 1494034934,
        "uid": 36102,
        "name": "doge233",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2414 \u3010\u963f\u72f8\u7684\u6253\u5b57\u673a\u3011"
    }
]