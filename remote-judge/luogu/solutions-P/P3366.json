[
    {
        "content": "# \u8fd9\u91cc\u4ecb\u7ecd\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e24\u79cd\u65b9\u6cd5\uff1aPrim\u548cKruskal\u3002\n\n[\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10293059.html)\n## \u5404\u79cdBug\u4e8e2018-9-27\u65e5\u4fee\u590d\n### \u4e24\u8005\u533a\u522b\uff1aPrim\u5728\u7a20\u5bc6\u56fe\u4e2d\u6bd4Kruskal\u4f18\uff0c\u5728\u7a00\u758f\u56fe\u4e2d\u6bd4Kruskal\u52a3\u3002Prim\u662f\u4ee5\u66f4\u65b0\u8fc7\u7684\u8282\u70b9\u7684\u8fde\u8fb9\u627e\u6700\u5c0f\u503c\uff0cKruskal\u662f\u76f4\u63a5\u5c06\u8fb9\u6392\u5e8f\u3002\n### \u4e24\u8005\u5176\u5b9e\u90fd\u662f\u8fd0\u7528\u8d2a\u5fc3\u7684\u601d\u8def\n# \u6d1b\u8c37\u6570\u636e\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/34515.png)\n## Prim\uff1a\n\u4e2a\u4eba\u89c9\u5f97Prim\u548c\u6700\u77ed\u8def\u4e2d\u7684dijkstra\u5f88\u50cf\uff0c\u7531\u4e8e\u901f\u5ea6\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002Prim\u7684\u601d\u60f3\u662f\u5c06\u4efb\u610f\u8282\u70b9\u4f5c\u4e3a\u6839\uff0c\u518d\u627e\u51fa\u4e0e\u4e4b\u76f8\u90bb\u7684\u6240\u6709\u8fb9\uff08\u7528\u4e00\u904d\u5faa\u73af\u5373\u53ef\uff09\uff0c\u518d\u5c06\u65b0\u8282\u70b9\u66f4\u65b0\u5e76\u4ee5\u6b64\u8282\u70b9\u4f5c\u4e3a\u6839\u7ee7\u7eed\u641c\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4\uff1adis\uff0c\u4f5c\u7528\u4e3a\u5df2\u7528\u70b9\u5230\u672a\u7528\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u8bc1\u660e\uff1aPrim\u7b97\u6cd5\u4e4b\u6240\u4ee5\u662f\u6b63\u786e\u7684\uff0c\u4e3b\u8981\u57fa\u4e8e\u4e00\u4e2a\u5224\u65ad\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u9876\u70b9v\uff0c\u8fde\u63a5\u5230\u8be5\u9876\u70b9\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9(v, vj)\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff08\u5373\u4efb\u610f\u4e00\u4e2a\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u5b50\u56fe\uff0c\u4ece\u5916\u90e8\u8fde\u63a5\u5230\u8be5\u8fde\u901a\u5b50\u56fe\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff09\n### \u5177\u4f53\u7b97\u6cd5\u6d41\u7a0b\u56fe\u89e3\u5982\u4e0b\uff1a\n```\n```\n![luogu](https://cdn.luogu.com.cn/upload/pic/28090.png)\n\u6ce8\u610f\uff1ainline\u548cregister\u4e3a\u4e00\u70b9\u70b9\u5e38\u6570\u4f18\u5316\uff0c\u4e0d\u8981\u7684\u8bdd\u4e5f\u53ef\u4ee5\u8fc7\uff0c\u4e0d\u7406\u89e3\u7684\u540c\u5b66\u5220\u6389\u5373\u53ef\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n#define il inline\nil int read()\n{\n    re int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*f;\n}//\u5feb\u8bfb\uff0c\u4e0d\u7406\u89e3\u7684\u540c\u5b66\u7528cin\u4ee3\u66ff\u5373\u53ef\n#define inf 123456789\n#define maxn 5005\n#define maxm 200005\nstruct edge\n{\n\tint v,w,next;\n}e[maxm<<1];\n//\u6ce8\u610f\u662f\u65e0\u5411\u56fe\uff0c\u5f00\u4e24\u500d\u6570\u7ec4\nint head[maxn],dis[maxn],cnt,n,m,tot,now=1,ans;\n//\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u7684\u70b9\u5230\u6ca1\u6709\u52a0\u5165\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6bd4\u5982\u8bf41\u548c2\u53f7\u8282\u70b9\u5df2\u7ecf\u52a0\u5165\u4e86\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48dis[3]\u5c31\u7b49\u4e8emin(1->3,2->3)\nbool vis[maxn];\n//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\nil void add(int u,int v,int w)\n{\n\te[++cnt].v=v;\n\te[cnt].w=w;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n}\n//\u8bfb\u5165\u6570\u636e\nil void init()\n{\n    n=read(),m=read();\n    for(re int i=1,u,v,w;i<=m;++i)\n    {\n        u=read(),v=read(),w=read();\n        add(u,v,w),add(v,u,w);\n    }\n}\nil int prim()\n{\n\t//\u5148\u628adis\u6570\u7ec4\u9644\u4e3a\u6781\u5927\u503c\n\tfor(re int i=2;i<=n;++i)\n\t{\n\t\tdis[i]=inf;\n\t}\n    //\u8fd9\u91cc\u8981\u6ce8\u610f\u91cd\u8fb9\uff0c\u6240\u4ee5\u8981\u7528\u5230min\n\tfor(re int i=head[1];i;i=e[i].next)\n\t{\n\t\tdis[e[i].v]=min(dis[e[i].v],e[i].w);\n\t}\n    while(++tot<n)//\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\u7b49\u4e8e\u70b9\u6570-1\n    {\n        re int minn=inf;//\u628aminn\u7f6e\u4e3a\u6781\u5927\u503c\n        vis[now]=1;//\u6807\u8bb0\u70b9\u5df2\u7ecf\u8d70\u8fc7\n        //\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6ca1\u6709\u4f7f\u7528\u7684\u70b9\n        //\u627e\u51fa\u6700\u5c0f\u503c\u4f5c\u4e3a\u65b0\u8fb9\n        //\u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u679a\u4e3enow\u70b9\u7684\u6240\u6709\u8fde\u8fb9\uff0c\u800c\u662f1~n\n        for(re int i=1;i<=n;++i)\n        {\n            if(!vis[i]&&minn>dis[i])\n            {\n                minn=dis[i];\n\t\t\t\tnow=i;\n            }\n        }\n        ans+=minn;\n        //\u679a\u4e3enow\u7684\u6240\u6709\u8fde\u8fb9\uff0c\u66f4\u65b0dis\u6570\u7ec4\n        for(re int i=head[now];i;i=e[i].next)\n        {\n        \tre int v=e[i].v;\n        \tif(dis[v]>e[i].w&&!vis[v])\n        \t{\n        \t\tdis[v]=e[i].w;\n        \t}\n\t\t}\n    }\n    return ans;\n}\nint main()\n{\n    init();\n    printf(\"%d\",prim());\n    return 0;\n}\n```\n## Kruskal\uff1a\nKruskal\u7b97\u6cd5\u7684\u601d\u60f3\u6bd4Prin\u597d\u7406\u89e3\u4e00\u4e9b\u3002\u5148\u628a\u8fb9\u6309\u7167\u6743\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u4f18\u5148\u9009\u53d6\u6743\u503c\u8f83\u5c0f\u7684\u8fb9\uff0c\u5e76\u4f9d\u6b21\u8fde\u63a5\uff0c\u82e5\u51fa\u73b0\u73af\u5219\u8df3\u8fc7\u6b64\u8fb9\uff08\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\uff09\u7ee7\u7eed\u641c\uff0c\u76f4\u5230\u5df2\u7ecf\u4f7f\u7528\u7684\u8fb9\u7684\u6570\u91cf\u6bd4\u603b\u70b9\u6570\u5c11\u4e00\u5373\u53ef\u3002\n\n\u8bc1\u660e\uff1a\u521a\u521a\u6709\u63d0\u5230\uff1a\u5982\u679c\u67d0\u4e2a\u8fde\u901a\u56fe\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6240\u6709\u4ece\u5916\u90e8\u8fde\u63a5\u5230\u8be5\u8fde\u901a\u56fe\u7684\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u7684\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002\u6240\u4ee5\u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u6700\u5c0f\u751f\u6210\u6811\u88ab\u62c6\u5206\u6210\u5f7c\u6b64\u72ec\u7acb\u7684\u82e5\u5e72\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u65f6\u5019\uff0c\u6240\u6709\u80fd\u591f\u8fde\u63a5\u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\n### \u5177\u4f53\u7b97\u6cd5\u6d41\u7a0b\u56fe\u89e3\u5982\u4e0b\uff1a\n```\n```\n![luogu](https://cdn.luogu.com.cn/upload/pic/28091.png)\n# [\u5e76\u67e5\u96c6\u8be6\u89e3](https://tbr-blog.blog.luogu.org/solution-p3367)\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n#define il inline\nil int read()\n{\n    re int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*f;\n}\nstruct Edge\n{\n\tint u,v,w;\n}edge[200005];\nint fa[5005],n,m,ans,eu,ev,cnt;\nil bool cmp(Edge a,Edge b)\n{\n    return a.w<b.w;\n}\n//\u5feb\u6392\u7684\u4f9d\u636e\uff08\u6309\u8fb9\u6743\u6392\u5e8f\uff09\nil int find(int x)\n{\n    while(x!=fa[x]) x=fa[x]=fa[fa[x]];\n    return x;\n}\n//\u5e76\u67e5\u96c6\u5faa\u73af\u5b9e\u73b0\u6a21\u677f\uff0c\u53ca\u8def\u5f84\u538b\u7f29\uff0c\u4e0d\u61c2\u5e76\u67e5\u96c6\u7684\u540c\u5b66\u53ef\u4ee5\u6233\u4e00\u6233\u4ee3\u7801\u4e0a\u65b9\u7684\u201c\u5e76\u67e5\u96c6\u8be6\u89e3\u201d\nil void kruskal()\n{\n    sort(edge,edge+m,cmp);\n    //\u5c06\u8fb9\u7684\u6743\u503c\u6392\u5e8f\n    for(re int i=0;i<m;i++)\n    {\n        eu=find(edge[i].u), ev=find(edge[i].v);\n        if(eu==ev)\n        {\n            continue;\n        }\n        //\u82e5\u51fa\u73b0\u4e24\u4e2a\u70b9\u5df2\u7ecf\u8054\u901a\u4e86\uff0c\u5219\u8bf4\u660e\u8fd9\u4e00\u6761\u8fb9\u4e0d\u9700\u8981\u4e86\n        ans+=edge[i].w;\n        //\u5c06\u6b64\u8fb9\u6743\u8ba1\u5165\u7b54\u6848\n        fa[ev]=eu;\n        //\u5c06eu\u3001ev\u5408\u5e76\n        if(++cnt==n-1)\n        {\n            break;\n        }\n        //\u5faa\u73af\u7ed3\u675f\u6761\u4ef6\uff0c\u53ca\u8fb9\u6570\u4e3a\u70b9\u6570\u51cf\u4e00\u65f6\n    }\n}\nint main()\n{\n    n=read(),m=read();\n    for(re int i=1;i<=n;i++)\n    {\n        fa[i]=i;\n    }\n    //\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    for(re int i=0;i<m;i++)\n    {\n        edge[i].u=read(),edge[i].v=read(),edge[i].w=read();\n    }\n    kruskal();\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n#### PS\uff1a\u7531\u4e8e\u4e2a\u4eba\u7801\u98ce\u4e60\u60ef\uff0c\u4ee3\u7801\u53ef\u80fd\u770b\u4e0a\u53bb\u8f83\u957f\uff0c\u4f46\u5176\u5b9e\u81ea\u5df1\u5199\u8d77\u6765\u8fd8\u662f\u6bd4\u8f83\u77ed\u7684\u3002",
        "postTime": 1519827105,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5"
    },
    {
        "content": "#Prim+\u90bb\u63a5\u94fe\u8868\n\n\u770b\u4e86\u4e00\u4e0b\u5176\u4ed6\u4eba\u7684\uff0c\u53d1\u73b0\u597d\u50cf\u90fd\u6ca1\u6709\u6211\u7684\u5806\u4f18\u5316\u8fc7\u540e\u7684Prim\u8981\u5feb\uff0c\u5806\u4f18\u5316\u4e4b\u540e\u7684Prim\u603b\u5171\u53ea\u8981180ms\uff0c\u800c\u4e14\u6211\u8981\u4ecb\u7ecd\u4e00\u4e0b\u6211\u7684\u6bd2\u7624\u7684Prim\u5199\u6cd5\uff0c\u770b\u4e86\u4e00\u4e0b\u7f51\u4e0a\u7684\u5404\u79cd\u5806\u4f18\u5316\u7248\u672c\u7684Prim\uff0c\u90fd\u662f\u76f4\u63a5\u5b58\u7684\u8fb9\uff0c\u4ee3\u7801\u5197\u957f\u800c\u96be\u4ee5\u7406\u89e3\uff0c\u800c\u65e2\u7136Prim\u548cDijkstra\u7684\u8d2a\u5fc3\u601d\u60f3\u662f\u4e00\u6837\u7684\u5e76\u4e14\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u90a3\u65e2\u7136\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u90bb\u63a5\u94fe\u8868\u5b58\u8fb9\u5e76\u4e14\u50cf\u5199Dijkstra\u4e00\u6837\u5199\u4ee3\u7801\u5440\uff01\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u4e00\u4e0b\u76f4\u63a5\u5b58\u8fb9\u548c\u7528\u90bb\u63a5\u94fe\u8868\u5404\u81ea\u7684\u4f18\u52bf\uff1a\u76f4\u63a5\u5b58\u8fb9\u6d88\u8017\u7684\u7a7a\u95f4\u5c0f\u56e0\u4e3a\u5b58\u6bcf\u6761\u8fb9\u7684\u6570\u636e\u5c11\u800c\u4e14\u4e0d\u7528\u56e0\u4e3a\u662f\u65e0\u5411\u56fe\u800c\u5b58\u4e24\u904d\uff0c\u4f46\u662f\u76f4\u63a5\u5b58\u8fb9\u7531\u4e8e\u4e0d\u77e5\u9053\u4e0e\u8be5\u8fb9\u76f8\u8fde\u7684\u8fb9\u662f\u54ea\u4e9b\uff0c\u5c31\u9700\u8981O(N)\u7684\u679a\u4e3e\u6216\u8005\u7528\u6bd4\u90bb\u63a5\u94fe\u8868\u66f4\u591a\u7684\u7a7a\u95f4\u6765\u4e0e\u9884\u5b58\u4e0b\u4e0e\u6bcf\u4e2a\u70b9\u76f8\u8fde\u7684\u8fb9\u6709\u90a3\u4e9b\u3002\u8bf4\u771f\u7684\uff0c\u8981\u7528\u5b58\u8fb9\u7684\u65b9\u6cd5\u5199\u4e00\u4e2a\u5806\u4f18\u5316\u7684Prim\u7684\u4ee3\u7801\u771f\u7684\u5176\u4e11\u65e0\u6bd4\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u8fd8\u662f\u7ed9\u5927\u5bb6\u63a8\u8350\u6211\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7a33\u5b9a\u5728O(NlogN)\u7684\u90bb\u63a5\u94fe\u8868\u7248\u672c\u5806\u4f18\u5316Prim(\u8bb2\u4e86\u8fd9\u4e48\u591a\u7ed3\u679c\u8fd8\u662f\u5728\u8bf4\u4ee3\u7801\u7684\u7f8e\u89c2\u6027\u2026\u2026\uff09\n\n\n\u6e05\u723d\u7684\u4ee3\u7801\uff08\u4e0d\u89c9\u5f97\u6e05\u723d\u7684\u53ef\u4ee5\u770b\u8fd9\u4e9b\u4ee3\u7801 [\u767e\u5ea6\u641c\u7d22:prim\u5806\u4f18\u5316](https://www.baidu.com/s?ie=utf-8&f=3&rsv\\_bp=1&rsv\\_idx=1&tn=baidu&wd=prim%E5%A0%86%E4%BC%98%E5%8C%96&oq=prim%25E5%25A0%2586%25E4%25BC%2598%25E5%258C%2596%25E6%2597%25B6%25E9%2597%25B4%25E5%25A4%258D%25E6%259D%2582%25E5%25BA%25A6&rsv\\_pq=8b20b8e70000c10f&rsv\\_t=9c56PDP2aFCdoEf4Rga7fg0NNIRggz%2Fb3lNC1OWap5M0INl4O%2BuJ4BCfkko&rqlang=cn&rsv\\_enter=0&inputT=1502&rsv\\_sug3=54&rsv\\_sug1=28&rsv\\_sug7=000&prefixsug=prim%25E5%25A0%2586%25E4%25BC%2598%25E5%258C%2596&rsp=0&rsv\\_sug4=2244&rsv\\_sug=1)\uff09\uff1a\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define R register int\nusing namespace std;\n\nint k,n,m,cnt,sum,ai,bi,ci,head[5005],dis[5005],vis[5005];\n\nstruct Edge\n{\n    int v,w,next;\n}e[400005];\n\nvoid add(int u,int v,int w)\n{\n    e[++k].v=v;\n    e[k].w=w;\n    e[k].next=head[u];\n    head[u]=k;\n}\n\ntypedef pair <int,int> pii;\npriority_queue <pii,vector<pii>,greater<pii> > q;\n\nvoid prim()\n{\n    dis[1]=0;\n    q.push(make_pair(0,1));\n    while(!q.empty()&&cnt<n)\n    {\n        int d=q.top().first,u=q.top().second;\n        q.pop();\n        if(vis[u]) continue;\n        cnt++;\n        sum+=d;\n        vis[u]=1;\n        for(R i=head[u];i!=-1;i=e[i].next)\n            if(e[i].w<dis[e[i].v])\n                dis[e[i].v]=e[i].w,q.push(make_pair(dis[e[i].v],e[i].v));\n    }\n}\n\nint main()\n{\n    memset(dis,127,sizeof(dis));\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);\n    for(R i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&ai,&bi,&ci);\n        add(ai,bi,ci);\n        add(bi,ai,ci);\n    }\n    prim();\n    if (cnt==n)printf(\"%d\",sum);\n    else printf(\"orz\");\n}\n```",
        "postTime": 1510198325,
        "uid": 51313,
        "name": "yhtwd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u8fd8\u6ca1\u89c1\u5230 Bor\u016fvka (Sollin) \u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff1f\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6559\u7a0b\u5728\u7f51\u4e0a\u6781\u5c11\u2026\u2026 \u7ffb\u4e86\u597d\u591a\u7684\u535a\u5ba2\u90fd\u6ca1\u7406\u89e3\uff0c\u6700\u7ec8\u627e\u5230\u4e86\u7ef4\u57fa\u767e\u79d1\u7684 [Bor\u016fvka's algorithm](https://en.wikipedia.org/wiki/Bor%C5%AFvka%27s_algorithm) \u8bcd\u6761\uff0c\u7ec8\u4e8e\u5f04\u61c2\u4e86\u8fd9\u4e2a\u5341\u5206\u53e4\u8001\u7684\u7b97\u6cd5\u3002\n\nBor\u016fvka \u5176\u5b9e\u662f\u4e00\u79cd\u591a\u8def\u589e\u5e7f\u7684 prim\u3002Prim \u7b97\u6cd5\u7531\u4e00\u4e2a\u70b9\u5f00\u59cb\uff0c\u5f80\u5916\u4e0d\u65ad\u8d2a\u5fc3\u5730\u627e\u6700\u77ed\u8fb9\uff0c\u7136\u540e\u4e0d\u65ad\u6269\u5927\u8fde\u901a\u5757\uff0c\u76f4\u5230\u5f62\u6210\u4e00\u68f5\u6811\u3002\u800c Bor\u016fvka \u7b97\u6cd5\u6bcf\u4e00\u6b21\u7684\u589e\u5e7f\uff0c\u4f1a\u5bf9\u73b0\u5728\u7684\u6bcf\u4e00\u4e2a\u8fde\u901a\u5757\u90fd\u627e\u4e00\u904d\u7684\u6700\u77ed\u8fb9\uff0c\u6700\u540e\u6bcf\u4e2a\u8fde\u901a\u5757\u62e9\u4f18\uff0c\u5c06\u8fd9\u4e9b\u8fb9\u5168\u90e8\u8fde\u4e0a\u3002\n\n\u7b97\u6cd5\u7684\u6267\u884c\u6d41\u7a0b\u5927\u7ea6\u662f\u8fd9\u6837\u7684\uff1a\n\n- \u5bf9\u4e8e\u73b0\u5728\u7684\u6bcf\u4e2a\u8fde\u901a\u5757\uff0c\u627e\u5230\u4ece\u8fd9\u4e2a\u8fde\u901a\u5757\u51fa\u53d1\uff0c\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u3001\u5230\u8fbe\u522b\u7684\u8fde\u901a\u5757\u7684\u6700\u77ed\u8fb9\u3002\uff08\u7279\u522b\u6ce8\u610f\uff1a\u82e5\u6743\u503c\u76f8\u540c\uff0c\u5219\u9700\u8981\u518d\u6309\u7167\u53e6\u4e00\u4e2a\u7ef4\u5ea6\u4e25\u683c\u6392\u5e8f\uff0c\u5e38\u7528\u6807\u53f7\u5927\u5c0f\u6392\u5e8f\u3002\u5373\u8fb9\u6743\u76f8\u540c\u65f6\uff0c\u8ba4\u4e3a\u7f16\u53f7\u5c0f\u7684\u8fb9\u77ed\u3002\u8fd9\u6837\u5904\u7406\u662f\u4e3a\u4e86\u907f\u514d\u4e24\u4e2a\u8fde\u901a\u5757\u4e92\u76f8\u8fde\u7684\u65f6\u5019\u51fa\u73b0\u73af\uff09\n- \u5168\u90e8\u627e\u5b8c\u540e\uff0c\u5c06\u8fd9\u4e9b\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002\uff08\u53ef\u80fd\u51fa\u73b0\u4e24\u4e2a\u8fde\u901a\u5757\u4e92\u8fde\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u8fd9\u65f6\u5728\u7b2c\u4e00\u4e2a\u8fde\u901a\u5757\u8fde\u5b8c\u8fd9\u6761\u8fb9\u540e\uff0c\u6807\u8bb0\u4e00\u4e0b\uff0c\u8bf4\u660e\u8be5\u8fb9\u5df2\u88ab\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4e0b\u4e00\u6b21\u5f39\u6389\u5373\u53ef\uff09\n\n\u5229\u7528\u7ef4\u57fa\u767e\u79d1\u7684\u6837\u4f8b\u53ef\u4ee5\u5f62\u8c61\u5730\u8bf4\u660e\u5982\u4e0a\u6b65\u9aa4\uff1a\n\n![](https://i.loli.net/2018/11/05/5be0585a128cb.png)\n\n\u8fd9\u6837\uff0c\u6bcf\u4e00\u6b21\u5408\u5e76\u7684 $O(M)$ \u7684\uff0c\u4f46\u662f\u6bcf\u4e00\u6b21\u5408\u5e76\u540e\uff0c\u8fde\u901a\u5757\u7684\u4e2a\u6570\u90fd\u51cf\u5c11\u4e00\u534a\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u53ea\u8981 $\\log N$ \u6b21\uff0c\u5c31\u80fd\u5408\u5e76\u6210\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(M \\log N)$ \u7684\u3002Bor\u016fvka \u7684\u4f18\u52bf\u4e5f\u6b63\u5728\u6b64\uff0c\u5b83\u53ea\u9700\u8981 $\\log N$ \u6b21\u7684\u5408\u5e76\uff0c\u8fd9\u662f\u53e6\u5916\u4e24\u4e2a MST \u7b97\u6cd5\u6240\u96be\u4ee5\u8fbe\u5230\u7684\u3002\u56e0\u6b64\uff0c\u4e00\u65e6\u6709[\u9898\u76ee](https://codeforces.com/problemset/problem/888/G)\u60f3\u8003\u5bdf Bor\u016fvka \u7b97\u6cd5\uff0c\u4e00\u5b9a\u8ddf\u8fd9\u4e2a\u7279\u6027\u5bc6\u5207\u76f8\u5173\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nconst int MaxN = 5000 + 5, MaxM = 200000 + 5;\n\nint N, M;\nint U[MaxM], V[MaxM], W[MaxM];\nbool used[MaxM];\nint par[MaxN], Best[MaxN];\n\nvoid init() {\n    scanf(\"%d %d\", &N, &M);\n    for (int i = 1; i <= M; ++i)\n        scanf(\"%d %d %d\", &U[i], &V[i], &W[i]);\n}\n\nvoid init_dsu() {\n    for (int i = 1; i <= N; ++i)\n        par[i] = i;\n}\n\nint get_par(int x) {\n    if (x == par[x]) return x;\n    else return par[x] = get_par(par[x]);\n}\n\ninline bool Better(int x, int y) {\n    if (y == 0) return true;\n    if (W[x] != W[y]) return W[x] < W[y];\n    return x < y;\n}\n\nvoid Boruvka() {\n    init_dsu();\n\n    int merged = 0, sum = 0;\n\n    bool update = true;\n    while (update) {\n        update = false;\n        memset(Best, 0, sizeof Best);\n\n        for (int i = 1; i <= M; ++i) {\n            if (used[i] == true) continue;\n            int p = get_par(U[i]), q = get_par(V[i]);\n            if (p == q) continue;\n\n            if (Better(i, Best[p]) == true) Best[p] = i;\n            if (Better(i, Best[q]) == true) Best[q] = i;\n        }\n\n        for (int i = 1; i <= N; ++i)\n            if (Best[i] != 0 && used[Best[i]] == false) {\n                update = true;\n                merged++; sum += W[Best[i]];\n                used[Best[i]] = true;\n                par[get_par(U[Best[i]])] = get_par(V[Best[i]]);\n            }\n    }\n\n    if (merged == N - 1) printf(\"%d\\n\", sum);\n    else puts(\"orz\");\n}\n\nint main() {\n    init();\n    Boruvka();\n    return 0;\n}\n```",
        "postTime": 1541430061,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "# \u751f\u6210\u6811\u4e13\u9898\n## cover by \u4e00\u5806\u5927\u4f6c\u7684\u535a\u5ba2 \u767e\u5ea6\u767e\u79d1\u7b49#%\uffe5%~\n\n## update 8/3\n\n\u4ee5\u524d\u5199\u8fd9\u4e2a\u7684\u65f6\u5019\u771f\u7684\u4ec0\u4e48\u90fd\u4e0d\u4f1a\uff0c\u778e\u5199\u4e86\u4e00\u4e2a\u535a\u5ba2\uff0c~~\u611f\u8c22\u6ca1\u6709\u5927\u4f6c\u55b7\u6211~~\u3002\u867d\u7136\u5199\u7684\u633a\u8be6\u7ec6\u4f46\u662f\u5e76\u6ca1\u6709\u591a\u5c11\u7406\u89e3\u7684\u4e1c\u897f\uff0c\u5176\u5b9e\u8fd9\u7bc7\u6587\u7ae0\u662f\u5bf9\u751f\u6210\u6811\u7684\u4e00\u4e2a\u603b\u7ed3\uff0c\u5982\u679c\u53ea\u60f3\u5b66\u6700\u5c0f\u751f\u6210\u6811\u7684\u53ef\u4ee5\u76f4\u63a5\u5f80\u4e0b\u7ffb\uff0c\u4f46\u662f\u5176\u4ed6\u5185\u5bb9\u591a\u591a\u5c11\u5c11\u90fd\u548c\u6700\u5c0f\u751f\u6210\u6811\u6709\u4e9b\u5173\u7cfb\uff0c\u8fde\u7740\u4e00\u8d77\u5b66\u4e86\u5176\u5b9e\u4e5f\u6ca1\u4ec0\u4e48\u7684\n\n- \u4fee\u590d\u4e86\u4e00\u4e9b\u9519\u8bef\n\n- \u6539\u6b63\u4e86\u4e00\u4e9b\u4ee3\u7801\n\n- \u7f8e\u5316\u4e86\u4e00\u4e0b\u6548\u679c\n\n------\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u751f\u6210\u6811\u7684\u6982\u5ff5\n\n## \u751f\u6210\u6811\n\n- \u5728\u56fe\u8bba\u4e2d\uff0c\u5982\u679c\u8fde\u901a\u56fe  \u7684\u4e00\u4e2a\u5b50\u56fe\u662f\u4e00\u68f5\u5305\u542b  \u7684\u6240\u6709\u9876\u70b9\u7684\u6811\uff0c\u5219\u8be5\u5b50\u56fe\u79f0\u4e3aG\u7684\u751f\u6210\u6811(SpanningTree)\u3002\n\n- \u751f\u6210\u6811\u662f\u8fde\u901a\u56fe\u7684\u5305\u542b\u56fe\u4e2d\u7684\u6240\u6709\u9876\u70b9\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u3002\n\n- \u56fe\u7684\u751f\u6210\u6811\u4e0d\u60df\u4e00\u3002\u4ece\u4e0d\u540c\u7684\u9876\u70b9\u51fa\u53d1\u8fdb\u884c\u904d\u5386\uff0c\u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7684\u751f\u6210\u6811\n\n#### \u901a\u4fd7\u7684\u6765\u8bf4\uff0c\u751f\u6210\u6811\u5c31\u662f\n\n - _\u53ea\u8981\u80fd\u8fde\u901a\u6240\u6709\u9876\u70b9\u800c\u53c8\u4e0d\u4ea7\u751f\u56de\u8def\u7684\u4efb\u4f55\u5b50\u56fe\u90fd\u662f\u5b83\u7684\u751f\u6210\u6811_ \n\n - _\u8fde\u63a5\u56fe\u4e2d\u6240\u6709\u7684\u70b9n\uff0c\u5e76\u4e14\u53ea\u6709n-1\u6761\u8fb9\u7684\u5b50\u56fe\u5c31\u662f\u5b83\u7684\u751f\u6210\u6811_ \n\n-----\n\u5e38\u7528\u7684\u751f\u6210\u6811\u7b97\u6cd5\u6709DFS\u751f\u6210\u6811\u3001BFS\u751f\u6210\u6811\u3001PRIM \u6700\u5c0f\u751f\u6210\u6811\u548cKruskal\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\n\n\u901a\u5e38\uff0c\u7531\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5f97\u5230\u7684\u751f\u6210\u6811\u79f0\u4e3a\u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\uff0c\u7b80\u79f0\u4e3aDFS\u751f\u6210\u6811\uff1b\u7531\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5f97\u5230\u7684\u751f\u6210\u6811\u79f0\u4e3a\u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811\uff0c\u7b80\u79f0\u4e3aBFS\u751f\u6210\u6811\n\n#### \u6df1\u5ea6\u4f18\u5148\u751f\u6210\u6811\u5177\u4f53\u6709\u4ec0\u4e48\u597d\u5904\u6211\u4e5f\u4e0d\u592a\u6e05\u695a\uff0c~~\u53ef\u80fd\u6bd4\u8f83\u597d\u6253~~\uff08\u53e3\u80e1\uff09\n\n####  \u5e7f\u5ea6\u4f18\u5148\u751f\u6210\u6811\u662f\u6240\u6709\u751f\u6210\u6811\u4e2d\u9ad8\u5ea6\u6700\u4f4e\u7684\uff08\u663e\u7136\uff09\n\n![](https://img-blog.csdn.net/20131112153534750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemwxOTg5MDEyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\u63a5\u4e0b\u6765\u8fdb\u5165\u6b63\u9898\n\n\u5728\u6240\u6709\u751f\u6210\u6811\u4e2d\uff0c\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u5f53\u7136\u662f\n\n-----\n\n## \u6700\u5c0f\u751f\u6210\u6811\n\n\n- \u5728\u751f\u6210\u6811\u4e2d\uff0c\u6211\u4eec\u79f0\u751f\u6210\u6811\u5404\u8fb9\u6743\u503c\u548c\u4e3a\u8be5\u6811\u7684\u6743\u3002\u5bf9\u4e8e\u65e0\u5411\u8fde\u901a\u56fe\u6765\u8bf4\uff0c\u6743\u503c\u6700\u5c0f\u7684\u751f\u6210\u6811\u88ab\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\n\u8fd9\u4e2a\u4e5f\u662f\u56fe\u8bba\u7684\u57fa\u7840\uff0c\u80fd\u591f\u914d\u5408\u56fe\u8bba\u5176\u4ed6\u591a\u4e2d\u7b97\u6cd5\u4f7f\u7528\n\n### \u5728\u6b64\u5148\u5f15\u5165\u4e00\u4e2a\u522b\u7684\u6982\u5ff5\n\n-----\n### \u74f6\u9888\u751f\u6210\u6811\n\n\u65e0\u5411\u56fe$G$\u7684\u74f6\u9888\u751f\u6210\u6811\u662f\u8fd9\u6837\u7684\u4e00\u9897\u751f\u6210\u6811$T$\uff0c\u5b83**\u6700\u5927**\u7684\u8fb9\u6743\n\u503c\u5728G\u7684\u6240\u6709\u751f\u6210\u6811\u4e2d\u662f**\u6700\u5c0f**\u7684\u3002\u74f6\u9888\u751f\u6210\u6811\u7684\u503c\u4e3a$T$\u4e2d\u6700\u5927\u6743\u503c\u8fb9\u7684\u6743\u3002\n\n### \u7ed3\u8bba\n\n\u65e0\u5411\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u74f6\u9888\u751f\u6210\u6811\uff0c\u4f46\u74f6\u9888\u751f\u6210\u6811\n\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\n\n\u600e\u4e48\u8bc1\u660e\u5462?\n\n$\u53ef\u4ee5\u4f7f\u7528\u53cd\u8bc1\u6cd5$\n\n\u5047\u8bbe\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u662f\u74f6\u9888\u6811\uff0c\u8bbe\u6700\u5c0f\u751f\u6210\u6811T\u7684\u6700\u5927\u6743\u8fb9\u4e3a$e$\uff0c\u5219\n\u5b58\u5728\u4e00\u68f5\u74f6\u9888\u6811$Tb$\uff0c\u5176\u6240\u6709\u7684\u8fb9\u7684\u6743\u503c\u5c0f\u4e8e$w(e)$\u3002\u5220\u9664$T$ \u4e2d\u7684$e$\uff0c\u5f62\u6210\u4e24\u68f5\u6570$T1,T2$\uff0c\u7528$Tb$\u4e2d\u8fde\u63a5$T1,T2$\u7684\u8fb9\u8fde\u63a5\u8fd9\u4e24\u68f5\u6811\uff0c\u5f97\u5230\u65b0\u7684\u751f\u6210\u6811\uff0c\n\u5176\u6743\u503c\u5c0f\u4e8e$T$\uff0c\u4e0e$T$\u662f\u6700\u5c0f\u751f\u6210\u6811\u77db\u76fe\n\n- \u5f53\u65f6\u6211\u5b66\u8fd9\u4e2a\u7684\u65f6\u5019\u770b\u6982\u5ff5\u5c31\u4e00\u8138\u61f5\uff0c\u8bf4\u8bf4\u6211\u81ea\u5df1\u7684\u7406\u89e3\u5427\n\n- \u5982\u679c\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u662f\u74f6\u9888\u751f\u6210\u6811\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u4e00\u6761\u8fb9\u6bd4\u74f6\u9888\u751f\u6210\u6811\u7684\u6240\u6709\u8fb9\u90fd\u8981\u5927\uff08\u56de\u53bb\u770b\u770b\u5b9a\u4e49\uff09\n\n- \u628a\u8fd9\u6761\u8fb9\u5220\u6389\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5c31\u53d8\u6210\u4e86\u4e24\u9897\u6811\n\n- \u8fd9\u4e24\u9897\u6811\u5728\u74f6\u9888\u751f\u6210\u6811\u91cc\u4e00\u5b9a\u6709\u53ef\u4ee5\u76f8\u8fde\u7684\u8fb9\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u9897\u6811\uff0c\u65e0\u8bba\u600e\u6837\u5212\u5206\uff0c\u4e24\u90e8\u5206\u4e4b\u95f4\u4e00\u5b9a\u6709\u8fb9\u76f8\u8fde\n\n- \u7528\u74f6\u9888\u751f\u6210\u6811\u4e2d\u7684\u8fb9\u628a\u8fd9\u4e24\u9897\u6811\u8fde\u8d77\u6765\uff0c\u4e0e\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b9a\u4e49\u77db\u76fe\n\n\n\n\u5e0c\u671b\u5927\u5bb6\u80fd\u7406\u89e3\n\n\u63a5\u4e0b\u6765\uff0c\u74f6\u9888\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\n\n\u4e0d\u591a\u8bf4\uff0c\u76f4\u63a5\u4e0a\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/52355.png)\n\n\n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n\u77e5\u9053\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u4e4b\u540e\uff0c\u50cf\u627e\u6700\u77ed\u8def\u4e2d\u6700\u5927\u6743\u503c\u7684\u9898\u5e94\u8be5\u5c31\u5f88\u597d\u505a\u4e86\u5427\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u6765\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5462\uff1f\n\n## 1.kruskal\u7b97\u6cd5\n\nKruskal \u7b97\u6cd5\u662f\u80fd\u591f\u5728O(mlogm) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\n\u6cd5\u3002\u5b83\u4e3b\u8981\u662f\u57fa\u4e8e\u8d2a\u5fc3\u7684\u601d\u60f3\uff1a\n\n\u2460 \u5c06\u8fb9\u6309\u7167\u8fb9\u6743\u4ece**\u5c0f\u5230\u5927**\u6392\u5e8f\uff0c\u5e76\u5efa\u7acb\u4e00\u4e2a\u6ca1\u6709\u8fb9\u7684\u56feT\u3002\n\n\u2461 \u9009\u51fa\u4e00\u6761\u6ca1\u6709\u88ab\u9009\u8fc7\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u3002\n\n\u2462 \u5982\u679c\u8fd9\u6761\u8fb9\u4e24\u4e2a\u9876\u70b9\u5728T \u4e2d\u6240\u5728\u7684\u8fde\u901a\u5757\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u5c06\n\u5b83\u52a0\u5165\u56feT\uff0c \u76f8\u540c\u5c31\u8df3\u8fc7\u3002\n\n\u2463 \u91cd\u590d\u2461\u548c\u2462\u76f4\u5230\u56feT \u8fde\u901a\u4e3a\u6b62\u3002\n\n\u7531\u4e8e\u53ea\u9700\u8981\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981\u771f\u6b63\u5efa\u7acb\u56feT\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\n\u6765\u7ef4\u62a4\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/52356.png)\n\n\u89c2\u5bdf\u4e00\u4e0b\u51e0\u79cd\u4e0d\u540c\u98ce\u683c\u7684\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\nconst int maxn = 1e6 + 1;\n\ninline int read()\n{\n\tregister int x = 0, ch = getchar(), f = 1;\n\twhile(!isdigit(ch)){if(ch == '-') f = -1; ch = getchar();}\n\twhile(isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n\treturn x * f;\n}\n\nint n, m;\n\nstruct node{\n\tint u;\n\tint v;\n\tint w;\n}e[maxn];\n\nint fa[maxn], cnt, sum, num;\n\nvoid add(int x, int y, int w)\n{\n\te[++ cnt].u = x;\n\te[cnt].v = y;\n\te[cnt].w = w;\n}\n\nbool cmp(node x, node y)\n{\n\treturn x.w < y.w;\n}\n\nint find(int x)\n{\n\treturn fa[x] == x ? fa[x] : fa[x] = find(fa[x]);//\u8def\u5f84\u538b\u7f29\n}\n\n/* \nint find(int x)\n{\n\tif(fa[x] == x) return x;\n  \telse \n\t{\n   \t\t fa[x] = find(fa[x]);//\u8def\u5f84\u538b\u7f29\n   \t\t return fa[x];\n    \t}\n}\n*/\n\nvoid kruskal()\n{\n\tfor(int i = 1; i <= cnt; i ++)\n\t{\n\t\tint x = find(e[i].u);\n\t\tint y = find(e[i].v);\n\t\tif(x == y) continue;\n\t\tfa[x] = y;\n\t\tsum += e[i].w;\n\t\tif(++ num == n - 1) break;//\u5982\u679c\u6784\u6210\u4e86\u4e00\u9897\u6811 \n\t}\n}\n\nint main()\n{\n\tn = read();\n\tm = read();\n\tfor(int i = 1; i <= n; i ++) fa[i] = i;\n\twhile(m --)\n\t{\n\t\tint x, y, w;\n\t\tx = read();\n\t\ty = read();\n\t\tw = read(); \n\t\tadd(x, y, w);\n\t}\n\tstd:: sort(e + 1, e + 1 + cnt, cmp);\n\tkruskal();\n\tprintf(\"%d\",sum);\n\treturn 0;\n}\n\n```\n\n-------------------------------\n\n\n## 2.prim\u7b97\u6cd5\n\nPrim \u7b97\u6cd5\u548cKruskal \u7b97\u6cd5\u4e00\u6837\u4e5f\u662f\u5bfb\u627e\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u79cd\u65b9\u6cd5:\n\n\u2460 \u5148\u5efa\u7acb\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u8fd9\u4e2a\u7ed3\u70b9\u53ef\u4ee5\u662f\u539f\u56fe\u4e2d\u4efb\n\u610f\u7684\u4e00\u4e2a\u7ed3\u70b9\u3002\n\n\u2461 \u4f7f\u7528\u4e00\u6761\u8fb9\u6269\u5c55\u8fd9\u4e2a\u6811\uff0c\u8981\u6c42\u8fd9\u6761\u8fb9\u4e00\u4e2a\u9876\u70b9\u5728\u6811\u4e2d\u53e6\u4e00\n\u4e2a\u9876\u70b9\u4e0d\u5728\u6811\u4e2d\uff0c\u5e76\u4e14\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u8981\u6c42\u6700\u5c0f\u3002\n\n\u2462 \u91cd\u590d\u6b65\u9aa4\u2461\u76f4\u5230\u6240\u6709\u9876\u70b9\u90fd\u5728\u6811\u4e2d\u3002\n\n\n\u8fd9\u91cc\u8bb0\u9876\u70b9\u6570$v$\uff0c\u8fb9\u6570$e$\n\n\n\u90bb\u63a5\u77e9\u9635:$O(v ^ 2)$ \u90bb\u63a5\u8868:$O(elog2v)$\n\n\n**\u6b64\u4e3a\u539f\u59cb\u7684\u52a0\u6743\u8fde\u901a\u56fe\u3002\u6bcf\u6761\u8fb9\u4e00\u4fa7\u7684\u6570\u5b57\u4ee3\u8868\u5176\u6743\u503c\u3002**\n\n\n![](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=82ac26a9ccfc1e17e9b284632bf99d66/9213b07eca806538cdd235ac94dda144ad348251.jpg)\n\n**\u9876\u70b9D\u88ab\u4efb\u610f\u9009\u4e3a\u8d77\u59cb\u70b9\u3002\u9876\u70b9A\u3001B\u3001E\u548cF\u901a\u8fc7\u5355\u6761\u8fb9\u4e0eD\u76f8\u8fde\u3002A\u662f\u8ddd\u79bbD\u6700\u8fd1\u7684\u9876\u70b9\uff0c\u56e0\u6b64\u5c06A\u53ca\u5bf9\u5e94\u8fb9AD\u4ee5\u9ad8\u4eae\u8868\u793a\u3002**\n\n**\u4e0d\u53ef\u9009 C, G \u53ef\u9009A, B, E, F \u5df2\u9009 D**\n\n![](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=611ad77f81025aafc73f76999a84c001/359b033b5bb5c9eaa5c7925cd639b6003af3b35d.jpg)\n\n**\u4e0b\u4e00\u4e2a\u9876\u70b9\u4e3a\u8ddd\u79bbD\u6216A\u6700\u8fd1\u7684\u9876\u70b9\u3002B\u8dddD\u4e3a9\uff0c\u8dddA\u4e3a7\uff0cE\u4e3a15\uff0cF\u4e3a6\u3002\u56e0\u6b64\uff0cF\u8dddD\u6216A\u6700\u8fd1\uff0c\u56e0\u6b64\u5c06\u9876\u70b9F\u4e0e\u76f8\u5e94\u8fb9DF\u4ee5\u9ad8\u4eae\u8868\u793a\u3002**\n\n**\u4e0d\u53ef\u9009 C G\uff0c\u53ef\u9009B, E, F\uff0c\u5df2\u9009A,D**\n\n![](https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=8e38c75ff403918fc3dc359830544df2/b58f8c5494eef01fd736887ae3fe9925bc317d6b.jpg)\n\n**\u7b97\u6cd5\u7ee7\u7eed\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u3002\u8ddd\u79bbA\u4e3a7\u7684\u9876\u70b9B\u88ab\u9ad8\u4eae\u8868\u793a\u3002**\n\n**\u53ef\u9009 B,E,G \u4e0d\u53ef\u9009 C\uff0c\u5df2\u9009 A D F**\n\n![](https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=c9eb138f39f33a878a600848a7357b5d/9e3df8dcd100baa1d1c3d7044410b912c9fc2ea5.jpg)\n\n**\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5728C\u3001E\u4e0eG\u95f4\u8fdb\u884c\u9009\u62e9\u3002C\u8dddB\u4e3a8\uff0cE\u8dddB\u4e3a7\uff0cG\u8dddF\u4e3a11\u3002\u70b9E\u6700\u8fd1\uff0c\u56e0\u6b64\u5c06\u9876\u70b9E\u4e0e\u76f8\u5e94\u8fb9BE\u9ad8\u4eae\u8868\u793a**\n\n**\u53ef\u9009 C E G,\u4e0d\u53ef\u9009 \u65e0\uff0c\u5df2\u9009 A D B F**\n\n### \u63a5\u4e0b\u6765\u7ee7\u7eed\u8fdb\u884c\uff0c\u6211\u5c31\u4e0d\u6253\u5177\u4f53\u6b65\u9aa4\u4e86\n\n![](https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=0fa05790bd096b63951456026d5aec21/6d81800a19d8bc3eb4d39675818ba61ea9d345b1.jpg)\n\n\n![](https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=4f26acaba818972bb737089887a410ec/f31fbe096b63f624f450a9bc8444ebf81a4ca304.jpg)\n\n![](https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=51f781f09d2f07084b082252884dd3fc/3801213fb80e7bec82c6905e2c2eb9389b506b75.jpg)\n\n![](https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=d0b2b04135d3d539d53007915bee8235/c83d70cf3bc79f3de184748fb9a1cd11728b2923.jpg)\n\n### \u7ed3\u675f\n\n**\u73b0\u5728\uff0c\u6240\u6709\u9876\u70b9\u5747\u5df2\u88ab\u9009\u53d6\uff0c\u56fe\u4e2d\u7eff\u8272\u90e8\u5206\u5373\u4e3a\u8fde\u901a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\u5728\u6b64\u4f8b\u4e2d\uff0c\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u4e4b\u548c\u4e3a39**\n\n\u662f\u4e0d\u662f\u6709\u70b9\u50cf\u6700\u77ed\u8def\u7b97\u6cd5\u4e2d\u7684\u8fea\u6770\u65af\u7279\u62c9\uff1f\n\n\u5176\u5b9e\u4ee3\u7801\u5b9e\u73b0\u4e5f\u5dee\u4e0d\u591a\n\n\u6700\u7b80\u5355\u7684\u65e0\u4f18\u5316\u7248\u672c\n-------\n```cpp\n+ View code\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n\nusing namespace std;\n/*\u6700\u5c0f\u751f\u6210\u6811Prim\u672a\u4f18\u5316\u7248*/\n\nint book[100];//\u7528\u4e8e\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\nint dis[100];//\u7528\u4e8e\u8bb0\u5f55\u8ddd\u79bb\u6811\u7684\u8ddd\u79bb\u6700\u77ed\u8def\u7a0b\nint MAX = 99999;//\u8fb9\u754c\u503c\nint maps[100][100];//\u7528\u4e8e\u8bb0\u5f55\u6240\u6709\u8fb9\u7684\u5173\u7cfb\n\nint main()\n{\n    int i,j,k;//\u5faa\u73af\u53d8\u91cf\n    int n,m;//\u8f93\u5165\u7684N\u4e2a\u70b9\uff0c\u548cM\u6761\u8fb9\n    int x,y,z;//\u8f93\u5165\u53d8\u91cf\n    int min,minIndex;\n    int sum=0;//\u8bb0\u5f55\u6700\u540e\u7684\u7b54\u6848\n    \n    cin>>n>>m;\n\n    //\u521d\u59cb\u5316maps\uff0c\u9664\u4e86\u81ea\u5df1\u5230\u81ea\u5df1\u662f0\u5176\u4ed6\u90fd\u662f\u8fb9\u754c\u503c\n    for (i = 1; i <= n; i++)\n    {\n        for (j = 1; j <= n; j++)\n        {\n            if(i!=j)\n                maps[i][j] = MAX;\n            else\n                maps[i][j] = 0;\n        }\n    }\n            \n    for (i = 1; i <= m; i++)\n    {\n        cin>>x>>y>>z;//\u8f93\u5165\u7684\u4e3a\u65e0\u5411\u56fe\n        maps[x][y] = z;\n        maps[y][x] = z;\n    }\n\n    //\u521d\u59cb\u5316\u8ddd\u79bb\u6570\u7ec4\uff0c\u9ed8\u8ba4\u5148\u628a\u79bb1\u70b9\u6700\u8fd1\u7684\u627e\u51fa\u6765\u653e\u597d\n    for (i = 1; i <= n; i++)\n        dis[i] = maps[1][i];\n\n    book[1]=1;//\u8bb0\u5f551\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\n\n    for (i = 1; i <= n-1; i++)//1\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86\uff0c\u6240\u4ee5\u5faa\u73afn-1\u6b21\n    {\n        min = MAX;//\u5bf9\u4e8e\u6700\u5c0f\u503c\u8d4b\u503c\uff0c\u5176\u5b9e\u8fd9\u91cc\u4e5f\u5e94\u8be5\u5bf9minIndex\u8fdb\u884c\u8d4b\u503c\uff0c\u4f46\u662f\u6211\u4eec\u627f\u8ba4\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u6709\u6700\u5c0f\u751f\u6210\u6811\u800c\u4e14\u4e0d\u5b58\u5728\u4e24\u6761\u76f8\u540c\u7684\u8fb9\n        //\u5bfb\u627e\u79bb\u6811\u6700\u8fd1\u7684\u70b9\n        for (j = 1; j <= n; j++)\n        {\n            if(book[j] ==0 && dis[j] < min)\n            {\n                min = dis[j];\n                minIndex = j;\n            }\n        }\n\n        //\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\n        book[minIndex] = 1;\n        sum += dis[minIndex];\n\n        for (j = 1; j <= n; j++)\n        {\n            //\u5982\u679c\u8fd9\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u800c\u4e14\u8fd9\u4e2a\u70b9\u5230\u4efb\u610f\u4e00\u70b9\u7684\u8ddd\u79bb\u6bd4\u73b0\u5728\u5230\u6811\u7684\u8ddd\u79bb\u8fd1\u90a3\u4e48\u66f4\u65b0\n            if(book[j] == 0 && maps[minIndex][j] < dis[j])\n                dis[j] = maps[minIndex][j];\n        }\n    }\n\n    cout<<sum<<endl;\n}\n```\n\n\u94fe\u5f0f\u524d\u9879\u661f\u5b58\u56fe\n----------\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define re register\n#define il inline\nil int read()\n{\n    re int x=0,f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-') f=-1;c=getchar();}\n    while(c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n    return x*f;\n}//\u5feb\u8bfb\uff0c\u4e0d\u7406\u89e3\u7684\u540c\u5b66\u7528cin\u4ee3\u66ff\u5373\u53ef\n#define inf 123456789\n#define maxn 5005\n#define maxm 200005\nstruct edge\n{\n    int v,w,next;\n}e[maxm<<1];\n//\u6ce8\u610f\u662f\u65e0\u5411\u56fe\uff0c\u5f00\u4e24\u500d\u6570\u7ec4\nint head[maxn],dis[maxn],cnt,n,m,tot,now=1,ans;\n//\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u7684\u70b9\u5230\u6ca1\u6709\u52a0\u5165\u7684\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6bd4\u5982\u8bf41\u548c2\u53f7\u8282\u70b9\u5df2\u7ecf\u52a0\u5165\u4e86\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48dis[3]\u5c31\u7b49\u4e8emin(1->3,2->3)\nbool vis[maxn];\n//\u94fe\u5f0f\u524d\u5411\u661f\u52a0\u8fb9\nil void add(int u,int v,int w)\n{\n    e[++cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\n//\u8bfb\u5165\u6570\u636e\nil void init()\n{\n    n=read(),m=read();\n    for(re int i=1,u,v,w;i<=m;++i)\n    {\n        u=read(),v=read(),w=read();\n        add(u,v,w),add(v,u,w);\n    }\n}\nil int prim()\n{\n    //\u5148\u628adis\u6570\u7ec4\u9644\u4e3a\u6781\u5927\u503c\n    for(re int i=2;i<=n;++i)\n    {\n        dis[i]=inf;\n    }\n    //\u8fd9\u91cc\u8981\u6ce8\u610f\u91cd\u8fb9\uff0c\u6240\u4ee5\u8981\u7528\u5230min\n    for(re int i=head[1];i;i=e[i].next)\n    {\n        dis[e[i].v]=min(dis[e[i].v],e[i].w);\n    }\n    while(++tot<n)//\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\u7b49\u4e8e\u70b9\u6570-1\n    {\n        re int minn=inf;//\u628aminn\u7f6e\u4e3a\u6781\u5927\u503c\n        vis[now]=1;//\u6807\u8bb0\u70b9\u5df2\u7ecf\u8d70\u8fc7\n        //\u679a\u4e3e\u6bcf\u4e00\u4e2a\u6ca1\u6709\u4f7f\u7528\u7684\u70b9\n        //\u627e\u51fa\u6700\u5c0f\u503c\u4f5c\u4e3a\u65b0\u8fb9\n        //\u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u679a\u4e3enow\u70b9\u7684\u6240\u6709\u8fde\u8fb9\uff0c\u800c\u662f1~n\n        for(re int i=1;i<=n;++i)\n        {\n            if(!vis[i]&&minn>dis[i])\n            {\n                minn=dis[i];\n                now=i;\n            }\n        }\n        ans+=minn;\n        //\u679a\u4e3enow\u7684\u6240\u6709\u8fde\u8fb9\uff0c\u66f4\u65b0dis\u6570\u7ec4\n        for(re int i=head[now];i;i=e[i].next)\n        {\n            re int v=e[i].v;\n            if(dis[v]>e[i].w&&!vis[v])\n            {\n                dis[v]=e[i].w;\n            }\n        }\n    }\n    return ans;\n}\nint main()\n{\n    init();\n    printf(\"%d\",prim());\n    return 0;\n}\n```\n\u4f18\u5148\u961f\u5217+\u5806\u4f18\u5316\n------\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define R register int\nusing namespace std;\n\nint k,n,m,cnt,sum,ai,bi,ci,head[5005],dis[5005],vis[5005];\n\nstruct Edge\n{\n    int v,w,next;\n}e[400005];\n\nvoid add(int u,int v,int w)\n{\n    e[++k].v=v;\n    e[k].w=w;\n    e[k].next=head[u];\n    head[u]=k;\n}\n\ntypedef pair <int,int> pii;\npriority_queue <pii,vector<pii>,greater<pii> > q;\n\nvoid prim()\n{\n    dis[1]=0;\n    q.push(make_pair(0,1));\n    while(!q.empty()&&cnt<n)\n    {\n        int d=q.top().first,u=q.top().second;\n        q.pop();\n        if(vis[u]) continue;\n        cnt++;\n        sum+=d;\n        vis[u]=1;\n        for(R i=head[u];i!=-1;i=e[i].next)\n            if(e[i].w<dis[e[i].v])\n                dis[e[i].v]=e[i].w,q.push(make_pair(dis[e[i].v],e[i].v));\n    }\n}\n\nint main()\n{\n    memset(dis,127,sizeof(dis));\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);\n    for(R i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&ai,&bi,&ci);\n        add(ai,bi,ci);\n        add(bi,ai,ci);\n    }\n    prim();\n    if (cnt==n)printf(\"%d\",sum);\n    else printf(\"orz\");\n}\n```\n\n\n\u8fd9\u662f\u5565\u3002\u3002\u3002\n-------------\n\n```cpp\n#include<cstring>\n#include<cstdio>\n#include<vector>\n#include<queue>\nusing namespace std;\nint n,m,x,y,z,tot,ans,k,ds[1001],next[2001],st[1001],to[2001],cost[2001];\nbool vis[1001];\nvoid addedge(int x,int y,int z)\n{\n\tnext[++tot]=st[x];st[x]=tot;to[tot]=y;cost[tot]=z;\n}\nstruct node\n{\n\tint x,d;\n\tnode(int a,int b):x(a),d(b) {}\n\tbool operator<(const node&t) const {return d>t.d;}\n}; priority_queue<node>q;\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t    addedge(x,y,z);addedge(y,x,z); \n\t}\n\tmemset(ds,0x7f,sizeof(ds));\n\tds[1]=0;q.push(node(1,0));vis[0]=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tnode a(0,0);\n\t\twhile(vis[a.x]&&!q.empty())\n          a=q.top(),q.pop();\n\t\tif(vis[a.x]) break;\n\t\tans+=a.d;vis[a.x]=1;k++;\n\t\tfor(int j=st[a.x];j;j=next[j])\n\t\t{\n\t\t\ty=to[j];z=cost[j];\n\t\t\tif(!vis[y]&&z<ds[y])\n\t\t      ds[y]=z,q.push(node(y,z));\n\t\t}  \n\t}\n\tif(k!=n) printf(\"-1\");\n\telse printf(\"%d\",ans);\n}\n```\n## kruskal\u548cprim\u7684\u6bd4\u8f83\n------\n\u4ece\u7b56\u7565\u4e0a\u6765\u8bf4\uff0cPrim\u7b97\u6cd5\u662f\u76f4\u63a5\u67e5\u627e\uff0c\u591a\u6b21\u5bfb\u627e\u90bb\u8fb9\u7684\u6743\u91cd\u6700\u5c0f\u503c\uff0c\u800cKruskal\u662f\u9700\u8981\u5148\u5bf9\u6743\u91cd\u6392\u5e8f\u540e\u67e5\u627e\u7684\uff5e\n\n\u6240\u4ee5\u8bf4\uff0cKruskal\u5728\u7b97\u6cd5\u6548\u7387\u4e0a\u662f\u6bd4Prim\u5feb\u7684\uff0c\u56e0\u4e3aKruskal\u53ea\u9700\u4e00\u6b21\u5bf9\u6743\u91cd\u7684\u6392\u5e8f\u5c31\u80fd\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u800cPrim\u7b97\u6cd5\u9700\u8981\u591a\u6b21\u5bf9\u90bb\u8fb9\u6392\u5e8f\u624d\u80fd\u627e\u5230\uff5e\n\nprim:\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n2)\u3002\u4e0e\u56fe\u4e2d\u8fb9\u6570\u65e0\u5173\uff0c\u8be5\u7b97\u6cd5\u9002\u5408\u4e8e\u7a20\u5bc6\u56fe\u3002\n\nkruskal:\u9700\u8981\u5bf9\u56fe\u7684\u8fb9\u8fdb\u884c\u8bbf\u95ee\uff0c\u6240\u4ee5\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u548c\u8fb9\u53c8\u5173\u7cfb\uff0c\u53ef\u4ee5\u8bc1\u660e\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08eloge\uff09\u3002\u9002\u5408\u7a00\u758f\u56fe\n\n\u63a5\u4e0b\u6765\u8bb2\u51e0\u9053\u4f8b\u9898\n--------\n\n### [UVALive 6437]Power Plant\n\nT\u7ec4\u6570\u636e\uff0c\u7ed9\u5b9a\u4e00\u5e45\u5e26\u6743\u56fe(n, m), \u7136\u540e\u7ed9\u5b9ak\u4e2a\u70b9, \u4e0e\u56fe\u4e2d\u5b58\u5728\u6709\u82e5\n\u5e72\u6761\u8fb9\u3002\u6bcf\u4e2a\u70b9\u90fd\u8981\u81f3\u5c11\u8981\u548c\u8fd9k\u4e2a\u70b9\u7684\u4e00\u4e2a\u70b9\u76f4\u63a5\u6216\u95f4\u63a5\u76f8\u8fde, \u95ee\u6700\u5c11\n\u7684\u8ddd\u79bb\u662f\u591a\u5c11\u3002\n1 \u2264 T \u2264 100,\n\nk\u4e2a\u70b9\uff0c\u81f3\u5c11\u4e00\u4e2a\uff0c\u660e\u663e\u7684\u7f29\u70b9\u3002\n\n### [UVA 1151]Buy or Build\n\n\u5e73\u9762\u4e0a\u6709n\u4e2a\u70b9\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba9\u6240\u6709n\u4e2a\u70b9\u8fde\u901a\uff0c\u4e3a\u6b64\uff0c\u4f60\u53ef\u4ee5\u65b0\u5efa\n\u4e00\u4e9b\u8fb9\uff0c\u8d39\u7528\u7b49\u4e8e\u4e24\u4e2a\u7aef\u70b9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u7684\u5e73\u65b9\u3002\u53e6\u5916\u8fd8\u6709q\u4e2a\u5957\u9910\uff0c\n\u53ef\u4ee5\u8d2d\u4e70\uff0c\u5982\u679c\u4f60\u8d2d\u4e70\u4e86\u7b2ci\u4e2a\u5957\u9910\uff0c\u8be5\u5957\u9910\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\u5c06\u53d8\u5f97\u76f8\u4e92\n\u8fde\u901a\uff0c\u7b2ci\u4e2a\u5957\u9910\u7684\u82b1\u8d39\u4e3aci\u3002\u6c42\u6700\u5c0f\u82b1\u8d39\u3002\n\n\n1 \u2264 n \u2264 1000, 0 \u2264 q \u2264 8\u3002\n\n\u679a\u4e3e\u9009\u62e9\u54ea\u4e2a\u5957\u9910\u540e\u518d\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\n\n### [UVA 10369]Arctic Network\n\n\u5357\u6781\u6709n\u4e2a\u79d1\u7814\u7ad9\uff0c\u8981\u7528\u536b\u661f\u6216\u65e0\u7ebf\u7535\u628a\u4ed6\u4eec\u8fde\u8d77\u6765\uff0c\u65e0\u7ebf\u7535\u7684\u8d39\n\u7528\u968f\u7740\u8ddd\u79bb\u589e\u52a0\u800c\u589e\u52a0\uff0c\u5e76\u4e14\u957f\u4f20\u64ad\u8ddd\u79bb\u4e3ad\uff0c\u73b0\u5728\u6709s\u4e2a\u536b\u661f\uff0c\u4efb\u610f\u4e24\n\u4e2a\u5b89\u88c5\u4e86\u536b\u661f\u7684\u8bbe\u5907\u65e0\u8bba\u8ddd\u79bb\u591a\u8fdc\u90fd\u53ef\u4ee5\u76f4\u63a5\u901a\u4fe1\uff0c\u6c42\u4e00\u4e2a\u65b9\u6848\u4f7f\n\u5f97d\u6700\u5c0f\u3002\n\ns \u2264 1\u65f6\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\n\ns \u2265 2\u65f6\uff0c\u7b49\u4e8e\u5b64\u7acb\u4e86s \u2212 1\u4e2a\u533a\u57df\uff0c\u5373s \u2212 1\u6761\u8fb9\u7f6e\u4e3a0\uff0c\u5f53\u7136\u662f\u6700\u5c0f\n\u751f\u6210\u6811\u4e2d\u6700\u5927\u7684s \u2212 1\u6761\u3002\nkruskal\u7684\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002\n\n### [BZOJ 1601][Usaco2008 Oct]\u704c\u6c34\n\nFarmer John\u5df2\u7ecf\u51b3\u5b9a\u628a\u6c34\u704c\u5230\u4ed6\u7684n(1\u00a1=n\u00a1=300)\u5757\u519c\u7530\uff0c\u519c\u7530\u88ab\u6570\n\u5b571\u5230n\u6807\u8bb0\u3002\u628a\u4e00\u5757\u571f\u5730\u8fdb\u884c\u704c\u6c34\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ece\u5176\u4ed6\u519c\u7530\u996e\u6c34\uff0c\u6216\u8005\n\u8fd9\u5757\u571f\u5730\u5efa\u9020\u6c34\u5e93\u3002\u5efa\u9020\u4e00\u4e2a\u6c34\u5e93\u9700\u8981\u82b1\u8d39wi\n,\u8fde\u63a5\u4e24\u5757\u571f\u5730\u9700\u8981\u82b1\n\u8d39pij\u3002\u8ba1\u7b97Farmer John\u6240\u9700\u7684\u6700\u5c11\u4ee3\u4ef7\u3002\n\n1 \u2264 N \u2264 300, 1 \u2264 wi \u2264 105\n, 1 \u2264 pij \u2264 105\u3002\n\n\n\u6bcf\u4e2a\u6c34\u5e93\u8981\u4e48\u9009\u62e9\u81ea\u5df1\u8fd9\u91cc\u5efa\u9020\u6c34\u5e93\uff0c\u8981\u4e48\u9009\u62e9\u8fde\u4e00\u6761\u8fb9\u5230\u5df2\u5efa\u6210\n\u7684\u6c34\u5e93\u3002\n\u5047\u8bbe\u6240\u6709\u7684\u6c34\u5e93\u6700\u7ec8\u90fd\u9009\u62e9\u597d\u4e86\u4e00\u4e2a\u51b3\u7b56\u7684\u8bdd\uff0c\u90a3\u4e48\u6574\u4e2a\u56fe\u5c31\u662f\uff0c\n\u5206\u6210m\u5757\uff0c\u6bcf\u4e00\u5757\u6709\u4e00\u4e2a\u70b9\u662f\u81ea\u5df1\u5efa\u9020\u6c34\u5e93\u7684\u3002\u5176\u4ed6\u90fd\u662f\u987a\u7740\u8fb9\u8fde\u5230\u8fd9\n\u4e2a\u70b9\u7684\u3002\u4e5f\u5c31\u662f\u5728\u8fd9\u4e2a\u5b50\u56fe\u5f53\u4e2d\u505a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u52a0\u4e00\u4e2a\u8d85\u7ea7\u6e90\uff0c\u6bcf\u4e2a\u70b9\u5411\u6e90\u8fde\u82b1\u8d39wi\u8fb9\u3002\u7136\u540e\u5728\u6574\u4e2a\u56fe\u4e2d\u505a\u6700\u5c0f\u751f\n\u6210\u6811\u3002\u8d85\u7ea7\u6e90\u7684\u8fde\u901a\u4fdd\u8bc1\u4e86\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u5efa\u9020\u4e86\u6c34\u5e93\n\n#### \u8fd8\u6709\u4e00\u4e9b\u6bd4\u8f83\u96be\u7684\u9898\uff0c\u7b49\u6211\u81ea\u5df1\u641e\u61c2\u4e86\u518d\u8865\u5427~\n\n\u5b8c\u7ed3\u6492\u82b1\n\n\n\n",
        "postTime": 1550704889,
        "uid": 142510,
        "name": "_October_",
        "ccfLevel": 0,
        "title": "\u751f\u6210\u6811"
    },
    {
        "content": "\u7528$LCT$\u6c42\u6700\u5c0f\u751f\u6210\u6811\u662f\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u601d\u60f3\uff0c\uff08\u4e2a\u4eba\u611f\u89c9\uff09\uff0c\u52a8\u6001\u8fde\u8fb9\uff0c\u679a\u4e3e\uff0c\u7528$Splay$\u7ef4\u62a4\u67d0\u79cd\u6700\u503c\uff0c\u6bcf\u6b21\u8fde\u4e00\u6761\u8fb9\uff0c\u82e5\u5176\u6784\u6210\u73af\uff0c\u5219\u73af\u4e0a\u65ad\u8fb9\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u64cd\u4f5c\u540e\u4ecd\u7136\u4e3a\u4e00\u68f5\u6811\u3002\n\n\u90a3\u4e48\u5148\u7b80\u5355\u7684\u4ecb\u7ecd\u4e00\u4e0b$LCT$\n\n\u5b83\u53ef\u4ee5\u52a8\u6001\u7684\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u652f\u6301\u52a0\u8fb9\uff0c\u5220\u8fb9\uff0c\u8fd8\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e00\u6761\u94fe\u4e0a\u7684\u8bb8\u591a\u4fe1\u606f\n\uff0c\u540c\u65f6\uff0c\u5b83\u7684\u94fe\u4e5f\u662f\u52a8\u6001\u7684\uff08\u60a8\u60f3\u7ef4\u62a4\u90a3\u4e00\u6761\u94fe\u5c31\u53ef\u4ee5\u7ef4\u62a4\u90a3\u4e00\u6761\u94fe\uff09\n\n\uff08\u6bd4\u5982\u7ef4\u62a4\u4e00\u6761\u94fe\u4e0a\u7684\u6700\u5927\u503c\uff09\n\n\n\u56de\u5230\u9898\u9762\uff0c\u5982\u679c\u7528$LCT$\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u79cd\u6bd4\u8f83\u76f4\u89c2\u7684\u60f3\u6cd5\uff1a\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u5176\u8fde\u63a5\u4e86\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u5c31\u8fde\u8fb9\uff0c\u5426\u5219\uff0c\u5176\u76f8\u5f53\u4e8e\u5728\u6811\u4e0a\u7684\u4e00\u6761\u8fd4\u7956\u8fb9\uff0c\u90a3\u4e48\u4f1a\u6784\u6210\u73af\uff0c\u6211\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u627e\u5230\u73af\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u7136\u540e\u65ad\u8fb9\u5373\u53ef\n\n**\u5177\u4f53\u5b9e\u73b0\u5462\uff1f**\n\n\u9996\u5148\u8bb0\u5f55\u5f53\u524d\u7b54\u6848\uff1a$ans$\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u5b83\u8fde\u63a5\u4e86\u4e24\u4e2a\u73b0\u5728\u5e76\u4e0d\u8054\u901a\u7684\u8054\u901a\u5757\uff0c\u90a3\u4e48\u6211\u5c31\u76f4\u63a5\u8fde\u8fb9\uff0c\u4f46\u662f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5982\u679c\u8981\u7528$LCT$\u4e0a\u7684\u6811\u70b9\u6765\u7ef4\u62a4\uff0c\u5176\u7236\u4eb2\u5230\u5176\u7684\u8fb9\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u5904\u7406\n\n\uff08\u52a8\u6001\u6811\u5b83\u52a8\u6765\u52a8\u53bb...\uff0c\u8fd8\u7ecf\u5e38\u6362\u6839\uff0c\u6240\u4ee5\u4e0d\u597d\u60f3\u6811\u5256\u90a3\u6837\u628a\u8fb9\u6743\u6620\u5c04\u5230\u70b9\u4e0a\uff09\n\n\u6240\u4ee5\u6bd4\u8f83\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\uff0c**\u628a\u5f53\u524d\u7684\u8fb9\u5f53\u4f5c\u4e00\u4e2a\u70b9\uff0c\u90a3\u4e48\u5176\u7f16\u53f7\u4e3a$n+id$**\n\n**\u7136\u540e\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u4e3a\u5176\u8fb9\u6743** \uff0c\u8fd9\u4e2a\u65f6\u5019\u8fde\u8fb9\u3002\u5047\u8bbe\u5176\u6c9f\u901a\u4e86$x,y$\uff0c\u5373\uff1a\n\n```cpp\nw[id + n] = z; //w\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\nlink( x, id + n ), link( id + n, y );\n```\n\n\u5426\u5219\uff0c\u8fd9\u6761\u8fb9\u662f\u6811\u4e0a\u7684\u4e00\u6761\u8fd4\u7956\u8fb9\uff0c\u5982\u679c\u8fde\u63a5\uff0c\u90a3\u4e48$x-y$\u4f1a\u5f62\u6210\u73af\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u65ad\u6389\u6700\u5927\u7684\u8fb9\u3002\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u9700\u8981\u7528$LCT$\u7ef4\u62a4\u94fe\u4e0a\u6700\u5927\u8fb9\u6743\uff08\u6309\u7167\u4e4b\u524d\u8bb2\u7684\u628a\u8fb9\u5f53\u4f5c\u70b9\uff0c\u8981\u6d88\u53bb\u70b9\u5bf9\u94fe\u9020\u6210\u7684\u5f71\u54cd\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6811\u70b9\u7684\u70b9\u6743\u8bbe\u4e3a$0$\uff09\n\n\u7136\u540e\u5148\u628a$x-y$\u7684\u94fe$split$\u51fa\u6765\n\n\u7136\u540e\u8bb0\u5f55\u4e00\u4e2a$id$\u8868\u793a\u70b9\u6743\u6700\u5927\u7684\u70b9\u7684\u7f16\u53f7\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5224\u65ad\uff0c\u5982\u679c\u5f53\u524d\u8981\u52a0\u5165\u7684\u8fb9\u6bd4\u73b0\u5728\u6700\u5927\u7684\u8fb9\u6743\uff08\u8fb9\u6743\u5c31\u662f\u70b9\u6743\uff0c\u524d\u6587**\u52a0\u7c97**\u90e8\u5206\u5199\u5230\u4e86\uff09\u8fd8\u8981\u5927\uff0c\u90a3\u4e48\u663e\u7136\u4e0d\u80fd\u52a0\u5165\u8fd9\u6761\u8fb9\n\n\u5426\u5219\uff0c\u6211\u4eec\u5c31\u5148\u628a\u6700\u5927\u8fb9\u6240\u4ee3\u8868\u7684\u70b9$Splay$\u4e0a\u53bb\uff0c\u7136\u540e\u8ba9\u5176\u4e24\u4e2a\u513f\u5b50\u90fd\u4e0d\u8ba4\u5b83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u65ad\u8fb9\u3002\n\n\u7136\u540e\u518d$link( x, Id+n), \\quad link(Id+n,y)$\n\n\u4e0a\u4ee3\u7801\u54af\uff1a$QAQ$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read() {\n\tchar cc = getchar(); int cn = 0, flus = 1;\n\twhile(cc < '0' || cc > '9') {  if( cc == '-' ) flus = -flus;  cc = getchar();  }\n\twhile(cc >= '0' && cc <= '9')  cn = cn * 10 + cc - '0', cc = getchar();\n\treturn cn * flus;\n}\nconst int N = 2e5 + 5005;\n#define ls(x) t[x].son[0]\n#define rs(x) t[x].son[1]\nstruct LCT {\n\tint son[2], mx, id, fa;\n\tbool mark;\n}t[N]; \nint w[N], n, m, Idnet, ans;\nvoid pushup( int x ) { //\u6bcf\u6b21\u4e0b\u4f20\u90fd\u9700\u8981\u66f4\u65b0\u6700\u5927\u70b9\u6743\uff0c\n\tt[x].id = x, t[x].mx = w[x];\n\tif( t[ls(x)].mx > t[x].mx ) t[x].mx = t[ls(x)].mx, t[x].id = t[ls(x)].id;\n\tif( t[rs(x)].mx > t[x].mx ) t[x].mx = t[rs(x)].mx, t[x].id = t[rs(x)].id;\n}\nbool isroot( int x ) {\n\treturn ( rs(t[x].fa) != x ) && ( ls(t[x].fa) != x );\n}\nvoid pushmark( int x ) { //\u4e0b\u4f20\u7ffb\u8f6c\u6807\u8bb0\n\tif( t[x].mark ) {\n\t\tt[x].mark = 0, t[ls(x)].mark ^= 1, t[rs(x)].mark ^= 1;\n\t\tswap( ls(x), rs(x) );\n\t}\n}\nvoid rotate( int x ) { //\u65cb\u8f6c\n\tint f = t[x].fa, ff = t[f].fa, qwq = ( rs(f) == x );\n\tt[x].fa = ff;\n\tif( !isroot(f) ) t[ff].son[(rs(ff) == f)] = x; //\u5982\u679c\u7236\u4eb2\u4e0d\u4e3a\u6839\u624d\u6539\u7237\u7237 \n\tt[t[x].son[qwq ^ 1]].fa = f, t[f].son[qwq] = t[x].son[qwq ^ 1],\n\tt[f].fa = x, t[x].son[qwq ^ 1] = f;\n\tpushup(f), pushup(x);\n} \nint st[N];\nvoid Splay( int x ) {\n\tint top = 0, now = x; st[++top] = now;\n\twhile( !isroot(now) ) st[++top] = ( now = t[now].fa );\n\twhile( top ) pushmark( st[top--] );\n\twhile( !isroot(x) ) {\n\t\tint f = t[x].fa, ff = t[f].fa;\n\t\tif( !isroot(f) ) ( ( rs(ff) == f ) ^ ( rs(f) == x ) ) ? rotate(x) : rotate(f);\n\t\trotate(x);\n\t}\n}\nvoid access( int x ) {\n\tfor( int y = 0; x; y = x, x = t[y].fa )\n\t\tSplay( x ), t[x].son[1] = y, pushup( x );\n}\nvoid makeroot( int x ) {\n\taccess( x ), Splay( x ), t[x].mark ^= 1, pushmark( x );\n}\nint findroot( int x ) {\n\taccess( x ), Splay( x ), pushmark( x );\n\twhile( ls(x) ) pushmark( x = ls(x) );\n\treturn x;\n}\nvoid split( int x, int y ) {\n\tmakeroot(x), access(y), Splay(y);\n}\nbool check( int x, int y ) { //\u5224\u65ad\u4e24\u4e2a\u70b9\u662f\u5426\u8054\u901a\n\tmakeroot( x );\n\treturn findroot( y ) != x; \n}\nvoid link( int x, int y ) {//link\u7684\u524d\u63d0\u662f\u8fd9\u4e24\u4e2a\u70b9\u8054\u901a\uff0c\u6240\u4ee5\u6ca1\u6709\u5224\u65ad\n\tmakeroot( x );\n\tt[x].fa = y;\n}\nsigned main()\n{\n\tn = read(), m = read();\n\tIdnet = n; //Idnet\u8868\u793a\u5f53\u524d\u8fb9\n\t\n\tint x, y, z, now; \n\t\n\tfor( register int i = 1; i <= m; ++ i ) {\n\t\tx = read(), y = read(), z = read();\n\t\t\n\t\t++Idnet, w[Idnet] = z; //\u8868\u793a\u7f16\u53f7\u4e3aIdnet\u7684\u8fb9\uff08\u4e5f\u662fLCT\u4e2d\u7684\u6811\u70b9\uff09\u7684\u70b9\u6743\u53d8\u6210z\n\t\t\n\t\tif( check( x, y ) )  \n\t\t\tlink( x, Idnet ), link( Idnet, y ), ans += z; //\u5982\u679c\u4e24\u4e2a\u4e0d\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5feb\u91cc\u9762\uff0c\u76f4\u63a5\u8fde\u8fb9\uff0c\u5e76\u66f4\u65b0\u7b54\u6848\n\t\telse \n        {\n\t\t\tsplit( x, y ), //\u628ax-y\u7684\u8def\u5f84\u5148\u62c9\u51fa\u6765\n            now = t[y].id;\n\t\t\tif( t[now].mx <= z ) continue; \n\t\t\tans += ( z - t[now].mx ), Splay( t[y].id ); //\u5148\u628a\u8fd9\u4e2a\u70b9\u65cb\u4e0a\u53bb\n\t\t\tt[ls(now)].fa = t[rs(now)].fa = 0; //\u5b50\u4e0d\u8ba4\u7236\uff0c\u5c31\u662f\u65ad\u8fb9 \n\t\t\tlink( x, Idnet ), link( Idnet, y );//\u518d\u8fde\u8fb9\t\n\t\t} \n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n[$LCT$\u8fd8\u53ef\u4ee5\u505a$LCA$\u6b38\uff1f](https://www.luogu.org/blog/Soulist/solution-p3379)",
        "postTime": 1553082833,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "## \u6700\u5c0f\u751f\u6210\u6811\u6709\u4e24\u4e2a\u7b97\u6cd5\uff1a$kruskal$\u4e0e$Prim$\n### \u8fd9\u4e24\u79cd\u7b97\u6cd5\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u4e2d\u6700\u5e38\u7528\u7684\u7b97\u6cd5~~\uff08\u56e0\u4e3a\u6211\u4e0d\u77e5\u9053\u522b\u7684\u7b97\u6cd5\u2026\u2026\uff09~~\n\n#### $kruskal$\u4e3b\u8981\u601d\u8def\uff1a\n1.\t\u8f93\u5165\u8fb9\uff0c\u7528\u7ed3\u6784\u4f53\u50a8\u5b58\n2.\t\u7528\u7ed3\u6784\u4f53\u5feb\u6392\u4ee5\u8fb9\u6bd4\u8f83\u4ece\u5c0f\u5230\u5927\u5feb\u6392\n3.\t\u5efa\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5e76\u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff08\u5e76\u67e5\u96c6\u4ee3\u8868\u4e24\u4e2a\u70b9\u6709\u6ca1\u6709\u5728\u540c\u4e00\u4e2a\u6811\u91cc\u9762\uff09\n#### \u63a5\u4e0b\u6765\u662f\u91cd\u70b9\n\n\u8bbe\u8fb9edge[100000],edge.start\u4e00\u4e2a\u70b9\uff0cedge.to\u53e6\u4e00\u4e2a\u70b9\uff0cedge.val\u662f\u8fb9\u957f\uff0cans\u662f\u6700\u7ec8\u7b54\u6848\u3002\n1.\tfor(i=1;i<=m\uff08\u8fb9\u6570\uff09;i++)\u627e\u4e00\u6761\u8fb9edge[i],\u82e5edge[i].start\u4e0eedge[i].to\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u5c31\u5c06edge[i].start\u4e0eedge[i].to\u6240\u5728\u7684\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u5e76\u5c06ans+=edge[i].val\u3002\n2.\t\u82e5\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5219\u8df3\u8fc7\u8fd9\u6b21\u5faa\u73af\u3002\u56e0\u4e3a\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/25212.png)\n\n{\u82e51\u4e0e3\u8fde\u8d77\u6765\uff0c\u5c31\u4f1a\u9020\u6210\u4e00\u4e2a\u73af\u3002}\n- \u6700\u540e\u4e00\u6b65\uff1aprintf(\"%d\",ans);\n\n\u89e3\u91ca\uff1a\n1.\t\u5feb\u6392\u8fb9\u957f\uff0c\u662f\u4e3a\u4e86\u8ba9\u6bcf\u6b21\u9009\u7684\u90fd\u662f\u6240\u6709\u8fde\u63a5\u4e2d\u90fd\u80fd\u662f\u8fb9\u957f\u6700\u5c0f\u7684\uff08\u8d2a\u5fc3\u601d\u60f3\uff09\n2.\t\u5e76\u67e5\u96c6\u7684\u4f5c\u7528\u662f\uff1a\u5224\u65ad\u6709\u6ca1\u6709\u8fde\u6210\u4e00\u4e2a\u73af\u3002\u82e5\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u5219\u8bf4\u660e\u5b83\u4eec\u5728\u540c\u4e00\u4e2a\u6811\u91cc\uff0c\u82e5\u8fde\u63a5\uff0c\u5c31\u4f1a\u9020\u6210\u4e00\u4e2a\u73af\n3.\t\u5f53\u5230\u4e86\u5df2\u8fde\u8fb9\u7684\u4e2a\u6570\u662f\u70b9\u7684\u4e2a\u6570-1\u65f6\uff0c\u5c31\u8981\u505c\u6b62\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u6240\u6709\u7684\u5e76\u67e5\u96c6\u90fd\u8fde\u5728\u4e86\u4e00\u8d77\u3002\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u4e0b\u9762\u662f\u70b9\u4e3a5\u65f6\u7684\u60c5\u51b5\n![](https://cdn.luogu.com.cn/upload/pic/25320.png)\n\n\u4ee5\u4e0b\u662f\u672c\u4eba~~(\u849f\u84bb)~~\u7684\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<string>\nusing namespace std;\nint n,m,i,j,u,v,total;\nstruct edge{\n    int start,to;long long val;\n}bian[2000005];\nint f[100000];\nlong long ans;\n\nint find(int x)//\u5e76\u67e5\u96c6\u90e8\u5206\n{\n    if (f[x]==x) return x; else \n    {\n        f[x]=find(f[x]);\n        return f[x];\n    }\t\n}\n\nbool cmp(edge a,edge b)//\u7ed3\u6784\u4f53\u5feb\u6392\u65f6\u7528\u5230\u7684\n{\n    return a.val<b.val;\n}\n\ninline void kruskal()//\u6700\u5c0f\u751f\u6210\u6811\n{\n    \n    for(int i=1;i<=m;i++)\n    {\n        u=find(bian[i].start);\n        v=find(bian[i].to);\n        if(u==v) continue;//\u5224\u65ad\u5728\u4e0d\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u91cc\u9762\uff0c\u5728\u5c31\u4e0b\u4e00\u4e2a\u5faa\u73af\n            ans+=bian[i].val;//\u4e0d\u5728\uff0c\u5c31\u52a0\u4e0a\n            f[u]=v;//\u8fde\u63a5\u4e24\u4e2a\u5e76\u67e5\u96c6\n            total++;\n            if(total==n-1) break;//\u5f53\u5f62\u6210\u4e86\u6700\u5c0f\u751f\u6210\u6811\u540e\uff0c\u9000\u51fa\uff08\u4e4b\u540e\u505a\u7684\u4e5f\u6ca1\u7528\u4e86\uff09\n    }\n} \nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++) f[i]=i;\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&bian[i].start,&bian[i].to,&bian[i].val);\n    }\n    sort(bian+1,bian+m+1,cmp);//\u5feb\u6392\u8fb9\u957f\n    kruskal();\n    printf(\"%d\",ans);\n    return 0;\n}\n```",
        "postTime": 1532506230,
        "uid": 58556,
        "name": "\u54e566666",
        "ccfLevel": 0,
        "title": "Kruskal\u7b97\u6cd5\u89e3\u6790"
    },
    {
        "content": "##1. Problem Description\n\n\n\u5982\u9898\uff0c\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\n\n\n##2. Input\n\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u3001M\uff0c\u8868\u793a\u8be5\u56fe\u5171\u6709N\u4e2a\u7ed3\u70b9\u548cM\u6761\u65e0\u5411\u8fb9\u3002\uff08N<=5000\uff0cM<=200000\uff09\n\n\u63a5\u4e0b\u6765M\u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570Xi\u3001Yi\u3001Zi\uff0c\u8868\u793a\u6709\u4e00\u6761\u957f\u5ea6\u4e3aZi\u7684\u65e0\u5411\u8fb9\u8fde\u63a5\u7ed3\u70b9Xi\u3001Yi\n\n\n##3. Output\n\n\u8f93\u51fa\u5305\u542b\u4e00\u4e2a\u6570\uff0c\u5373\u6700\u5c0f\u751f\u6210\u6811\u7684\u5404\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\uff1b\n\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a\n\n4 5\n1 2 2\n1 3 2\n1 4 3\n2 3 4\n3 4 3\n\u8f93\u51fa\u6837\u4f8b#1\uff1a\n\n7\n\n##4. \u8be6\u89e3\n\n\n\u6700\u5c0f\u751f\u6210\u6811\\_Kruskal\u7b97\u6cd5\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\nusing namespace std;\n\nconst int M=200100;\nstruct node{\n    int x;\n    int y;\n    int w;\n}a[M],t;\nint n,e,dad[M],p=1,ans;\n\nbool cmp(node x,node y){\n    if(x.w<y.w)return 1;\n    if(x.w==y.w)\n        if(x.x>y.x)return 1;\n    return 0;\n}\n\nvoid qsort(int l,int r){\n    int i=l,j=r;node mid=a[(i+j)/2];\n    while(i<=j){\n        while(cmp(a[i],mid))i++;\n        while(cmp(mid,a[j]))j--;\n        if(i<=j){\n            t=a[i];a[i]=a[j];a[j]=t;\n            i++;j--;\n        }\n    }\n    if(i<r)qsort(i,r);\n    if(l<j)qsort(l,j);\n}\nint findx(int x){\n    if(x==dad[x])return x;\n    dad[x]=findx(dad[x]);\n    return dad[x];\n}\nvoid solve(){\n    qsort(1,e);\n    for(int i=1;i<=n;i++)dad[i]=i;\n    for(int i=1;i<=e;i++){\n        if(findx(a[i].x)!=findx(a[i].y)){\n            ans+=a[i].w;\n            dad[findx(a[i].x)]=a[i].y;\n            p++;\n            if(p==n)return ;\n        }\n    }\n}\nint main(){\n    freopen(\"mst.in\",\"r\",stdin);\n    scanf(\"%d%d\",&n,&e);\n    for(int i=1;i<=e;i++)scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].w);\n    solve();\n    printf(\"%d\",ans);\n    return 0;\n}\n```\n\n\u6700\u5c0f\u751f\u6210\u6811\\_prims\u7b97\u6cd5\n\n\u6ce8\u610f\uff1a\u9700\u8981\u6ce8\u610f\u91cd\u8fb9\u7684\u60c5\u51b5\uff01\uff01\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\n\nconst int M=5001,INF=999999999;\nint n,e1,e;\nint w[M][M];\nint minc[M];\n\nvoid solve(int s){\n    int i,j,count=0,min,k;\n    for(i=1;i<=n;i++)minc[i]=w[s][i];\n    minc[s]=0;\n    for(i=1;i<n;i++){\n        min=INF;\n        for(j=1;j<=n;j++){\n            if(minc[j] && minc[j]<min){\n                min=minc[j];\n                k=j;\n            }\n        }\n        minc[k]=0;\n        count+=min;\n        for(j=1;j<=n;j++){\n            if(w[k][j]<minc[j])\n                minc[j]=w[k][j];\n        }\n    }\n    printf(\"%d\\n\",count);\n}\n\nint main(){\n    freopen(\"mst.in\",\"r\",stdin);\n    int t1,t2,t3;\n    for(int i=0;i<=M;i++)\n        for(int j=0;j<=M;j++)w[i][j]=INF;\n    scanf(\"%d%d\",&n,&e);\n    for(int i=1;i<=e;i++){\n        scanf(\"%d%d\",&t1,&t2);scanf(\"%d\",&t3);\n        if(t3<w[t1][t2])w[t2][t1]=w[t1][t2]=t3;\n    }\n    solve(n>>1);\n    return 0;\n}\n```",
        "postTime": 1512967514,
        "uid": 18063,
        "name": "XiaQiang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u7136\u800c\u697c\u4e0b\u7684\u4f18\u5316prime\u662fpas c++\u9009\u624b\u8868\u793a\u770b\u4e0d\u61c2 2333333\n\n\u597d\u4e86 \u849f\u84bb\u5728\u8fd9\u91cc\u6765\u4e00\u53d1\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684prime \u5efa\u8bae\u770b\u4e4b\u524d\u5148\u5b66\u4e60\u6734\u7d20\u7684prime\uff08\u7136\u800c\u5efa\u8bae\u4f60\u4eec\u5148\u5b66\u6700\u7b80\u5355\u7684Kruskal\uff09\n\n\nprime\u7684\u601d\u60f3\u662f\u6309\u70b9\u8d2a\u5fc3\n\n\u6211\u4eec\u5148\u7528\u4e00\u4e2a\u6570\u7ec4dist \u8868\u793a\u5982\u679c\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u70b9\u9700\u8981\u589e\u52a0\u7684\u6743\u503c\n\n\u56e0\u4e3a\u662f\u8d2a\u5fc3 \u6240\u4ee5dist[ i ]\u8d8a\u5c0f\u8d8a\u597d\n\n\u521d\u59cb\u72b6\u6001 \u6240\u6709dist\u5168\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff08\u6bd4\u65b9\u8bf40x7f7ff)\n\n\u7136\u540e\u6211\u4eec\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u70b9 \u5c06\u5b83\u7684dist\u53d8\u4e3a0\uff08\u6211\u9009\u62e9\u7684\u662f1\u53f7\u8282\u70b9\uff09\uff0c\u5e76\u5c06\u5b83\u6807\u8bb0\uff08\u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u6bcf\u4e2a\u70b9\u53ea\u80fd\u7528\u4e00\u6b21\uff09\n\n\u7136\u540e\u6211\u4eec\u904d\u5386\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u8fde\u7684\u70b9 \u5c06\u5b83\u4eec\u7684dist\u66f4\u65b0\uff08\u66f4\u65b0\u4e3a\u5b83\u4eec\u7684\u8fb9\u6743\u503c\uff09\n\n\u73b0\u5728 \u6211\u4eec\u5f97\u5230\u4e86\u591a\u4e2adist\u4e0d\u4e3a0x7f7ff\u7684\u70b9\u4e86\n\n\u4e8e\u662f \u6211\u4eec\u9009\u62e9\u5176\u4e2ddist\u6700\u5c0f\u7684\u70b9 \u6807\u8bb0\u5b83 \u7136\u540e\u518d\u904d\u5386\u4e0e\u5b83\u76f8\u8fde\u7684\u70b9\uff0c\u66f4\u65b0\u5b83\u4eec\u7684dist\n\n\u4e0d\u65ad\u7684\u91cd\u590d \u91cd\u590d \u76f4\u5230\u6240\u6709\u70b9\u90fd\u88ab\u6807\u8bb0\u4e3a\u6b62\n\n\u5f53\u7136 \u4e5f\u5b58\u5728orz\u7684\u60c5\u51b5\uff08\u867d\u7136\u6d4b\u8bd5\u70b9\u5e76\u6ca1\u6709ORZ\u7684\u60c5\u51b5 23333\uff09 \u8fd9\u65f6 \u88ab\u6807\u8bb0\u7684\u70b9\u7684\u6570\u91cf\u662f\u5c0f\u4e8en\u7684\uff0c\u52a0\u4e2a\u5224\u65ad\u5c31\u597d\u5566\n\n\n\n\u4e0b\u9762\u662f\u6734\u7d20\u7684pirme  \u65f6\u95f4\u590d\u6742\u5ea6O\uff08N^2\uff09\n\n\n\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x7f7ff\nusing namespace std;\nint n,m,dist[5010],head[5010],k,ans;\nbool vis[5010];\nstruct node\n{\n    int to,next,w;\n}edge[400010];\nvoid add(int u,int v,int w)\n{\n    edge[++k].to=v;\n    edge[k].w=w;\n    edge[k].next=head[u];\n    head[u]=k;\n}\nvoid Prime()\n{\n    fill(dist+1,dist+n+1,INF);\n    dist[1]=0;\n    for(int j=1;j<=n;j++)\n    {\n        int u=-1,minn=INF;\n        for(int i=1;i<=n;i++)\n        {\n            if(dist[i]<minn&&!vis[i])\n            {\n                u=i;\n                minn=dist[i];\n            }\n        }\n        if(u==-1)\n        {\n            ans=-1;\n            return;\n        }\n        vis[u]=1;\n        ans+=dist[u];\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            if(!vis[v]&&dist[v]>edge[i].w) dist[v]=edge[i].w;\n        }\n    }\n}\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;\n        add(a,b,c);\n        add(b,a,c);\n    }\n    Prime();\n    if(ans==-1) cout<<\"orz\"<<endl;\n    else cout<<ans;\n}\n```\n\u4ece\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d \u6211\u4eec\u4e0d\u96be\u53d1\u73b0 \u6bcf\u6b21\u901a\u8fc7\u679a\u4e3e\u627edist\u6700\u5c0f\u7684\u70b9\u592a\u6162\u4e86 \u4e8e\u662f\u5c31\u6709\u4e86\u4f18\u5148\u961f\u5217\u4f18\u5316\u7684\u7248\u672c\n\n\u4f18\u5148\u961f\u5217\u4f18\u5316prime: \u65f6\u95f4\u590d\u6742\u5ea6 O\uff08rand( )\uff09 ( \u7fa4\u91cc\u7684dalao\u544a\u8bc9\u6211\u7684 \u9ed1\u4eba\u95ee\u53f7\uff1f\uff1f\uff1f\uff09\n\n\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x7f7ff\nusing namespace std;\nint n,m,dist[5010],head[5010],k,ans,tot;\nbool vis[5010];\nstruct node\n{\n    int to,next,w;\n}edge[400010];\nstruct p\n{\n    int id,d;\n    bool operator < (const p &a) const\n    {\n        return a.d<d;\n    }\n};\nvoid add(int u,int v,int w)\n{\n    edge[++k].to=v;\n    edge[k].w=w;\n    edge[k].next=head[u];\n    head[u]=k;\n}\nvoid Prime()\n{\n    fill(dist+1,dist+1+n,INF);\n    priority_queue<p> q;\n    p now;\n    now.id=1;now.d=dist[1]=0;\n    q.push(now);\n    while(!q.empty())\n    {\n        p now=q.top();q.pop();\n        int u=now.id;\n        if(now.d!=dist[u]) continue;\n        vis[u]=1;\n        ans+=dist[u];\n        tot++;\n        for(int i=head[u];i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            if(!vis[v]&&dist[v]>edge[i].w)\n            {\n                dist[v]=edge[i].w;\n                p nxt;\n                nxt.d=dist[v];\n                nxt.id=v;\n                q.push(nxt);\n            }\n        }\n    }\n    if(tot<n) ans=-1;\n}\nint main()\n{\n    std::ios::sync_with_stdio(false);\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n    {\n        int a,b,c;\n        cin>>a>>b>>c;\n        add(a,b,c);\n        add(b,a,c);\n    }\n    Prime();\n    if(ans==-1) cout<<\"orz\"<<endl;\n    else cout<<ans;\n}\n\u5f53\u7136\u8fd8\u6709\u79cd\u505a\u6cd5\u53eb\u505aKruskal \u697c\u4e0b\u6709\u5f88\u591a\u7684\u9898\u89e3 \u6211\u5c31\u4e0d\u5199\u4e86_(:\u0437\u300d\u2220)_\uff08\u624d\u4e0d\u662f\u56e0\u4e3a\u61d2\uff09\n```",
        "postTime": 1504254124,
        "uid": 36365,
        "name": "Phrooce",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "### \u5728\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u524d\uff0c\u4f60\u9700\u8981\u7684\u57fa\u7840\u6709\uff1a\n\t     \u4e86\u89e3\u56fe\u7684\u57fa\u672c\u6982\u5ff5\n         \u4f1a\u5e76\u67e5\u96c6\uff0c\u8fd8\u4f1a\u4e00\u70b9\u70b9\u8def\u5f84\u538b\u7f29\n         \u77e5\u9053sort\u7684\u6bd4\u8f83\u51fd\u6570\n### \u597d\uff0c\u6211\u4eec\u5207\u5165\u6b63\u9898\u3002\n    \u4f55\u4e3a\u6700\u5c0f\u751f\u6210\u6811\uff1f\n  \u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a~~\u4e94\u9999~~\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u8ba9\u4f60\u9009\u4e00\u4e9b\u8fb9\uff0c\u8fd9\u4e9b\u8fb9\u80fd\u628a\u56fe\u4e2d\u6240\u6709\u8282\u70b9\u8fde\u901a\uff0c\u5e76\u4e14\u9009\u51fa\u7684\u8fb9\u7684\u6743\u503c\u8981\u5c3d\u91cf\u5c0f\n\n## \u4e0b\u9762\u4ecb\u7ecdKruskal\u7b97\u6cd5\n~~\uff08\u6572\u91cd\u70b9\u5212\u9ed1\u677f\u4e86\uff01\uff09~~\n#### ~~\u4e00\u53e5\u8bdd\u6982\u62ec\uff1aKruskal\u5c31\u662f\u62ff\u4e2a\u7834\u6570\u7ec4\u5b58\u8fb9\uff0c\u6309\u6743\u503c\u6392\u4e2a\u5e8f\uff0c\u518d\u4ece\u5934\u5230\u5c3e\u626b\u4e00\u904d\uff0c\u7528\u4e2a\u5e76\u67e5\u96c6\u4e71\u641e\u2026\u2026~~\n\n### \u7b97\u6cd5\u540d\u79f0\uff1aKruskal\n### \u7b97\u6cd5\u601d\u60f3\uff1a\u8d2a\u5fc3\n### \u5b58\u56fe\u65b9\u5f0f\uff1a\u8fb9\u96c6\u6570\u7ec4\n### \u5177\u4f53\u6d41\u7a0b\uff1a\n\t1.\u6309\u7167\u8fb9\u96c6\u6570\u7ec4\u4e2d\u7684\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    2.\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    3.\u4ece\u5934\u5230\u5c3e\u626b\u4e00\u904d\u56fe\u4e2d\u6240\u6709\u8fb9\uff1a\n      \u82e5\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\uff08\u5373\u4e24\u4e2a\u8282\u70b9\u88ab\u5df2\u7ecf\u9009\u62e9\u7684\u8fb9\u8fde\u901a\uff09\uff0c\u5219\u5565\u4e8b\u513f\u4e5f\u4e0d\u5e72\uff08\u56e0\u4e3a\u5df2\u7ecf\u8fde\u901a\u4e86\uff0c\u6ca1\u6709\u5fc5\u8981\u9009\u8fd9\u6761\u8fb9\uff09\n\t  \u82e5\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5185\uff08\u5373\u4e24\u4e2a\u8282\u70b9\u672a\u8fde\u901a\uff09\uff0c\u5219\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\uff0c\u5e76\u628a\u8fb9\u6743\u52a0\u5230\u7b54\u6848\u91cc\uff08\u9009\u8fd9\u6761\u8fb9\uff09\n\n\u4ee3\u7801\u4e0d\u751a\u597d\u770b\uff0c\u4e5f\u672a\u5224\u65ad\u4e0d\u8fde\u901a\u60c5\u51b5\uff0c\u656c\u8bf7\u8c05\u89e3\n\n\n\n------------\n```cpp\n//Kruscal\n#include <bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint f,t,v;\n} g[200002];\nbool cMp(edge a,edge b)\n{\n\treturn a.v<b.v;\n}\nint n,m,ans,f[5002];\nint roots(int x)\n{\n\treturn f[x]==x?x:f[x]=roots(f[x]);\n}\nint main()\n{\n\tios::sync_with_stdio(0);//\u8bfb\u5165\u4f18\u5316\n\tcin>>n>>m;\n\tfor(int i=1; i<=m; ++i) cin>>g[i].f>>g[i].t>>g[i].v;\n\tsort(g+1,g+m+1,cMp);\n\tfor(int i=1; i<=n; ++i) f[i]=i;\n\tfor(int i=1; i<=m; ++i)\n\t{\n\t\tif(roots(g[i].f)==roots(g[i].t)) continue;\n\t\tf[roots(g[i].f)]=roots(g[i].t);\n\t\tans+=g[i].v;\n\t}\n\tcout<<ans<<\"\\n\";\n\treturn 0;\n}\n```\n\n------------\n~~\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u5199\u7684\u4e0d\u592a\u597d\uff0c\u6b22\u8fce\u63d0\u51fa\u5efa\u8bae~~",
        "postTime": 1564711236,
        "uid": 93689,
        "name": "retired_LeoStrange",
        "ccfLevel": 0,
        "title": "\u56fe\u8bba\u57fa\u7840\u2014\u2014\u6700\u5c0f\u751f\u6210\u6811\u4e4bKruskal\u7b97\u6cd5"
    },
    {
        "content": "- **2020/06/22 Upt\uff1a\u51e0\u4e4e\u91cd\u5199\u4e86\u4e00\u4e0b**  \n- **2020/07/30 Upt\uff1a\u4fee\u4e86\u4e00\u4e9b\u5c0f\u9505**\n\n\u5728[\u8fd9\u91cc](https://www.luogu.org/blog/yhdhg1395754790/)\u770b\u672c\u6587\u7ae0,\u6548\u679c\u66f4\u4f73\u3002  \n\u5bf9\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b9a\u4e49\uff1a\u5728\u4e00\u4e2a\u6709$n$\u4e2a\u70b9\u7684\u56fe\u4e2d\uff0c\u7528$n - 1$\u6761\u8fb9\u5c06\u5176\u8fde\u6210\u4e00\u68f5\u6811\uff0c\u4f7f\u5f97\u6240\u6709$n - 1$\u6761\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u3002  \n**\u6700\u5c0f\u751f\u6210\u6811\u6709\u4e24\u79cd\u505a\u6cd5\uff1aPrim\u548cKruskal\uff0c\u672c\u6587\u7ae0\u4e24\u4e2a\u90fd\u4f1a\u4ecb\u7ecd\u3002**\n\nPrim\uff1a  \n\u524d\u7f6e\u77e5\u8bc6\uff1a[\u5806](https://www.luogu.org/blog/yhdhg1395754790/solution-p3378)  \nPrim\u7684\u505a\u6cd5\u5c31\u662f\u628a\u70b9\u5206\u4e3a\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u548c\u672a\u88ab\u52a0\u5165\u7684\uff0c\u6bcf\u6b21\u628a\u8ddd\u79bb\u5df2\u52a0\u5165\u7684\u70b9\u6700\u8fd1\u7684\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u3002\u4e0d\u8fc7\u8bb0\u5f55\u8fb9\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u70b9\uff0c\u8bb0$v_i$\u4e3a\u8282\u70b9$i$\u5230\u5df2\u52a0\u5165\u90e8\u5206\u6700\u77ed\u7684\u8fb9\u7684\u957f\u5ea6\uff0c\u800c\u5c0f\u6839\u5806\u8bb0\u5f55$v_i$\u548c$i$\uff1a\n\n1. \u9996\u5148\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\uff08\u4e00\u822c\u90091\u53f7\u70b9\uff09\u5165\u5c0f\u6839\u5806\u3002\n2. \u6bcf\u6b21\u53d6\u51fa\u5806\u9876$u$\u5e76pop\u3002\n3. \u5224\u65ad$u$\u662f\u5426\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n4. \u5982\u679c\u4e0d\u662f\uff0c\u5c06$v_u$\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\n5. \u7136\u540e\u904d\u5386\u6240\u6709\u8fde\u63a5\u7684\u70b9$x$\uff0c\n6. \u82e5$v_x>v_u$\uff0c\u5219\u5c06$x$\u52a0\u5165\u5806\u3002\n7. \u91cd\u590d2,3,4,5,6\u76f4\u5230\u5806\u4e3a\u7a7a\u6216\u8005\u5df2\u7ecf\u52a0\u5165\u4e86$n-1$\u6761\u8fb9\n\n\u5173\u4e8e\u65e0\u6cd5\u5f62\u6210\u4e00\u4e2a\u6811\uff1a\u8be5\u60c5\u51b5\u5c31\u662f\u5728\u7ed3\u675f\u540e\u5224\u65ad$n$\u4e2a\u70b9\u662f\u5426\u90fd\u5df2\u7ecf\u88ab\u6807\u8bb0\uff0c\u6216\u8005\u7531\u4e8e\u8bb0\u5f55\u4e86\u8fb9\u7684\u6761\u6570\uff0c\u4e5f\u53ef\u4ee5\u5224\u65ad\u8fb9\u6570\u662f\u5426\u4e3a1\u3002\n\n**code:**\n```cpp\n#include<queue>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nint n,m,cnt,ans;\nint v[5005];\nbool f[5005];//f\u5224\u65ad\u8be5\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\nstruct node\n{\n\tint first,second;\n\tfriend bool operator<(node x,node y){return x.first>y.first;}\n};\npriority_queue<node>q;//\u5c0f\u6839\u5806\nstruct graph\n{\n\tint tot;\n\tint hd[5005];\n\tint nxt[400005],to[400005],dt[400005];\n\tvoid add(int u,int v,int w)\n\t{\n\t\ttot++;\n\t\tnxt[tot]=hd[u];\n\t\thd[u]=tot;\n\t\tto[tot]=v;\n\t\tdt[tot]=w;\n\t\treturn ;\n\t}\n}g;//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tg.add(u,v,w);\n\t\tg.add(v,u,w);\n\t}\n\tmemset(v,0x3f,sizeof(v));\n\tq.push((node){0,1});\n\tv[1]=0;//\u5165\u5806\u7b2c\u4e00\u4e2a\u70b9\n\twhile(!q.empty()&&cnt<n-1)//cnt\u8bb0\u5f55\u8fb9\u7684\u6761\u6570\uff0c\u82e5\u5806\u4e0d\u4e3a\u7a7a\u6216\u8fb9\u6570\u4e0d\u8db3n-1\u5219\u7ee7\u7eed\n\t{\n\t\tint xx=q.top().second;//\u53d6\u51fa\u5806\u9876\n\t\tq.pop();//\u5f39\u51fa\n\t\tif(!f[xx])//\u82e5\u8fd8\u672a\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n\t\t{\n\t\t\tf[xx]=true;//\u6807\u8bb0\u4e3a\u52a0\u5165\n\t\t\tcnt++;//\u8fb9\u6570+1\n\t\t\tans+=v[xx];//\u8bb0\u5f55\u957f\u5ea6\n\t\t\tfor(int i=g.hd[xx];i;i=g.nxt[i])//\u904d\u5386\u80fd\u5230\u8fbe\u7684\u70b9\n\t\t\t\tif(v[g.to[i]]>g.dt[i])//\u6ee1\u8db3\u6761\u4ef6\n\t\t\t\t{\n\t\t\t\t\tv[g.to[i]]=g.dt[i];//\u5148\u66f4\u6539v\n\t\t\t\t\tq.push((node){v[g.to[i]],g.to[i]});//\u7136\u540e\u5165\u5806\n\t\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(!f[i])\n\t\t{\n\t\t\tprintf(\"orz\");\n\t\t\treturn 0;\n\t\t}//\u5224\u65ad\u662f\u5426\u8fde\u901a\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```\n\nKruskal\uff1a  \n\u524d\u7f6e\u77e5\u8bc6\uff1a[\u5e76\u67e5\u96c6](https://www.luogu.org/blog/yhdhg1395754790/solution-p3367)  \nKruskal\u7684\u505a\u6cd5\uff1a\n\n1. \u628a\u6240\u6709\u8fb9\u6309\u987a\u5e8f\u6392\u5e8f\u3002\n2. \u4ece\u7b2c\u4e00\u6761\u8fb9\u5f00\u59cb\u679a\u4e3e\u3002\n3. \u5982\u679c\u8fb9\u7684\u4e24\u7aef\u8054\u901a\uff08\u7528\u5e76\u67e5\u96c6\u5224\u65ad\uff09\uff0c\u5c31\u8df3\u8fc7\u3002\n4. \u5426\u5219\u5c31\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c\u5e76\u5408\u5e76\u4e24\u4e2a\u7aef\u70b9\u7684\u96c6\u5408\u3002\n5. \u91cd\u590d3,4\u6b65\u76f4\u5230\u679a\u4e3e\u5b8c\u3002\n\n\u5173\u4e8e\u65e0\u6cd5\u5f62\u6210\u4e00\u4e2a\u6811\uff1a\u5224\u65ad\u662f\u5426\u6240\u6709\u70b9\u90fd\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u3002 \n\n**code\uff1a**\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint n,m,ans;\nstruct node\n{\n\tint f,t,d;\n}a[200005];//\u5b58\u8fb9\uff0cKruskal\u4e0d\u7528\u5efa\u56fe\nbool cmp(node x,node y){return x.d<y.d;}\nstruct bin\n{\n\tint w[5005];\n\tint find(int x)\n\t{\n   \t\tif(x==w[x]) return x;\n\t    w[x]=find(w[x]);\n   \t\treturn w[x];\n\t}\n\tvoid add(int x,int y)\n\t{\n    \tw[find(x)]=find(y);\n   \t\treturn ;\n\t}\n\tbool ask(int x,int y)\n\t{\n   \t\tif(find(x)==find(y)) return true;\n    \telse return false;\n\t}\n}b;//\u5e76\u67e5\u96c6\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++) scanf(\"%d%d%d\",&a[i].f,&a[i].t,&a[i].d);\n\tfor(int i=1;i<=n;i++) b.w[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\tsort(a+1,a+m+1,cmp);//\u6309\u8fb9\u6743\u6392\u5e8f\n\tfor(int i=1;i<=m;i++)//\u679a\u4e3e\u6bcf\u6761\u8fb9\n\t{\n\t\tif(b.ask(a[i].f,a[i].t)) continue;//\u8fde\u901a\u5219\u8df3\u8fc7\n\t\tans+=a[i].d;//\u5426\u5219\u8bb0\u5f55\n\t\tb.add(a[i].f,a[i].t);//\u6539\u4e3a\u8fde\u901a\n\t}\n\tfor(int i=2;i<=n;i++)\n\t\tif(!b.ask(1,n))\n\t\t{\n\t\t\tprintf(\"orz\");\n\t\t\treturn 0;\n\t\t}//\u5224\u65ad\u662f\u5426\u8fde\u901a\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n\n```",
        "postTime": 1565228939,
        "uid": 195331,
        "name": "Mine_King",
        "ccfLevel": 7,
        "title": "\u6700\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "**\u9884\u544a\uff1a\u672c\u9898\u89e3\u5bf9\u65b0\u4eba\u4e0d\u53cb\u597d**\uff0c\u65b0\u4eba\u8bf7\u5ffd\u89c6\uff0c\u7b97\u6cd5\u76f8\u5173\uff1a**LCT**\u3002\n\n\u672c\u6765\u5728\u505a[\u9b54\u6cd5\u68ee\u6797](https://www.luogu.org/problemnew/show/P2387)\uff0c\u53ef\u540e\u6765\u53d1\u73b0\u9996\u5148\u8981**\u52a8\u6001\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811**\u3002\n\nKruskal\u7b97\u6cd5\u662f\u8d2a\u5fc3\u7684\uff0c\u6bcf\u6b21\u9009\u62e9\u6743\u503c\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\uff0c\u5c1d\u8bd5\u52a0\u5165\u5176\u4e2d\uff0c\u4f46\u8fd9\u4e5f\u5bfc\u81f4\u5176\u5fc5\u987b\u5148\u6392\u5e8f\uff0c\u80fd\u5426\u6362\u4e00\u4e2a\u601d\u8def\uff1f\n\n\u8003\u8651\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u65b0\u8fb9 $(u,v,w)$\uff0c\u82e5\u52a0\u5165\u540e\u4ecd\u7136\u6ca1\u6709\u5f62\u6210\u73af\uff0c\u5219\u8fd9\u6761\u8fb9\uff08\u53ef\u80fd\uff09\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u3002  \n\u53cd\u4e4b\uff0c\u5373\u52a0\u5165\u8fd9\u6761\u8fb9\u540e\u5f62\u6210\u4e86\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a\u8fd9\u4e2a\u73af\u4e0a\uff08\u81f3\u5c11\uff09\u6709\u4e00\u6761\u8fb9\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u8fd9\u6761\u8fb9\u4e00\u5b9a\u662f\u8fd9\u4e2a\u73af\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\uff08\u4e4b\u4e00\uff09\u3002\u90a3\u5982\u4f55\u624d\u80fd\u627e\u5230\u5462\uff1f\u5728\u52a0\u5165\u8fd9\u6761\u8fb9\u4e4b\u524d\uff0c\u53ef\u4ee5\u7528LCT\u6c42\u51fa\u70b9 $u$ \u5230\u70b9 $v$ \u4e4b\u95f4\u7684\u6700\u5927\u8fb9\u6743\u7684\u90a3\u6761\u8fb9\uff0c\u7136\u540e\u65ad\u5f00\u5b83\u3002\n\n\u53efLCT\u4e00\u822c\u662f\u7ef4\u62a4\u70b9\u4e0a\u4fe1\u606f\u7684\uff0c\u8981\u5982\u4f55\u7ef4\u62a4\u8fb9\u4e0a\u7684\u4fe1\u606f\u5462\uff1f\u8fd9\u91cc\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762[\u67d0\u7bc7\u9898\u89e3](https://www.luogu.org/blog/pupuvovovovo/solution-p3366)\u7684\u65b9\u6cd5\uff0c\u628a**\u8fb9\u8f6c\u6362\u4e3a\u70b9**\uff0c\u4f46\u8fd9\u6837\u5bfc\u81f4\u70b9\u6570\u589e\u5927\u4e86\u4e00\u500d\uff0c\u6709\u6ca1\u6709\u66f4~~(\u52a3)~~\u597d\u7684\u65b9\u6cd5\u5462\uff1f\u5f53\u7136\u6709\uff0c\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u70b9\u4e2d\u591a\u7ef4\u62a4 $4$ \u4e2a\u4fe1\u606f\u5c31\u597d\u4e86\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3\uff0c\u8fd9\u91cc\u5148\u628a\u4e00\u4e9b\u5b9a\u4e49\u8868\u793a\u597d\u3002 \n1. $(a,b)$:\u8282\u70b9A\u548c\u8282\u70b9B\u7684**\u76f4\u63a5**\u8fde\u8fb9\u3002\n2. $(a-b)$:\u8282\u70b9A\u548c\u8282\u70b9B\u7684**\u8def\u5f84**\u3002\n3. $pre$:\u5728\u539f\u6811\u4e2d\uff0c\u5f53\u524d\u8282\u70b9\u548c\u7236\u4eb2\u8282\u70b9\u7684\u8fb9(\u6ce8\u610f\u4e0d\u662f\u8fb9\u6743)\uff0c\u5982\u4e0b\u56fe\u4e2d $\\text{F.}pre=(\\text{B},\\text{F}),\\text{A.}pre=\\text{NULL}$\n4. $nxt$:\u5728\u539f\u6811\u4e2d\uff0c\u5f53\u524d\u8282\u70b9\u548c\u5176\u91cd\u513f\u5b50\uff08\u4e5f\u662fLCT\u4e2d\uff0c\u6240\u5728\u7684Spaly\u7684\u76f4\u63a5\u540e\u7ee7\uff09\u7684\u8fb9\uff0c\u5982\u4e0b\u56fe\u4e2d $\\text{G.}nxt=(\\text{G},\\text{H}),\\text{J.}nxt=\\text{NULL}$\n5. $front$:\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684Splay\u4e2d\u7684\u8282\u70b9\u4e2d\uff0c\u5728\u539f\u6811\u4e2d\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9(\u4e5f\u662f\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u91cd\u94fe\u4e2d\uff0c\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9)\u7684 $pre$\uff0c\u5982\uff1a$\\text{H.}front=\\text{C.}pre=(\\text{A},\\text{C})$\n6. $back$:\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684Splay\u4e2d\u7684\u8282\u70b9\u4e2d\uff0c\u5728\u539f\u6811\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9(\u4e5f\u662f\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u91cd\u94fe\u4e2d\uff0c\u6df1\u5ea6\u6700\u5927\u7684\u8282\u70b9)\u7684 $pre$\uff0c\u5982\uff1a$\\text{G.}back=\\text{J.}nxt=\\text{NULL}$\n\n![pic](https://s1.ax2x.com/2018/06/06/RWN7y.png)\n\n\u8fd9\u591a\u7ef4\u62a4\u7684\u56db\u4e2a\u4fe1\u606f\u4fbf\u662f $front,back,pre,nxt$\n```\nstruct node;\nstruct edge {\n\tnode *x,*y;\n\tedge(node *a,node *b):x(a),y(b) {}\n};\nstruct node {\n\tint rev;//\u7ffb\u8f6c\u6807\u8bb0\n\tnode *fa,*ch[2];//\u7236\u4eb2\uff0c\u513f\u5b50\n\tedge *front,*back,*pre,*nxt;\n\tnode(node *f=NULL):fa(f),rev(0),maxx(NULL),pre(NULL),nxt(NULL),front(NULL),back(NULL) {\n\t\tch[0]=ch[1]=NULL;\n\t}\n}\n```\n### Update\n\u5148\u6765\u8003\u8651\u5982\u4f55\u7ef4\u62a4 $front,back$\uff0c\u8fd9\u4e24\u4e2a\u786c\u9aa8\u5934\u3002\n```\nvoid node::update(void) {\n\tfront=pre,back=nxt;\n\tif(ch[0]) front=ch[0]->front;\n\tif(ch[1]) back=ch[1]->back;\n}\n```\n\u5982\u679c\u80fd\u4fdd\u8bc1update\u7684\u987a\u5e8f\u662f\u4ece\u6df1\u5ea6\u66f4\u5927\u7684\u70b9\u5230\u6df1\u5ea6\u66f4\u5c0f\u7684\u70b9\uff0c\u90a3\u6211\u4eec\u5c31\u80fd\u4fdd\u8bc1 $front,back$ \u7684\u6b63\u786e\u3002\n### revs\n\u63a5\u4e0b\u6765\u8003\u8651\u6362\u6839\u7684\u524d\u7f6e\u64cd\u4f5c\uff0c\u7ffb\u8f6c\u3002\n```\nvoid revs(node *x) {\n\tif(!x) return;\n\tswap(x->ch[0],x->ch[1]);\n\tswap(x->pre,x->nxt);\n\tswap(x->front,x->back);\n\tx->rev^=1;\n}\n```\n\u7531\u4e8e\u6574\u4e2a\u5148\u540e\u987a\u5e8f\u90fd\u53d8\u4e86\uff0c\u56e0\u6b64\u8981\u4ea4\u6362 $pre$ \u548c $nxt$\uff0c$front$ \u548c $back$\u3002\n### pushdown\n\u8003\u8651\u5b8c\u7ffb\u8f6c\uff0c\u8003\u8651\u7ffb\u8f6c\u6807\u8bb0\u7684\u4e0b\u4f20\uff0c\u8fd9\u91cc\u548c\u666e\u901aLCT\u6ca1\u6709\u533a\u522b\u3002\n### Rotate\u548cSplay\n\u8fd9\u91cc\u548c\u666e\u901aLCT\u6ca1\u6709\u533a\u522b\u3002\n### access\n\u63a5\u4e0b\u6765\u662f\u6253\u901a $x$ \u5230\u6839\u8282\u70b9\u7684\u4fe1\u606f\u3002\n```\n#define front(t) (t?t->front:NULL)\nvoid LCT::access(node *x) {\n\tnode *t=NULL;\n\twhile(x) {\n\t\tsplay(x); x->ch[1]=t;\n\t\tx->nxt=front(t); x->update();\n\t\tt=x; x=x->fa;\n\t}\n}\n```\n\u7531\u4e8e\u6539\u53d8\u4e86 $x$ \u7684\u53f3\u513f\u5b50(\u91cd\u94fe\u4e0a\u7684\u513f\u5b50)\uff0c\u5373\u6539\u53d8\u4e86\u5f53\u524d\u7684\u94fe\u5256\u5206\uff0c\u6240\u4ee5 $x$ \u7684\u540e\u4e00\u6761\u8fb9\u7406\u5e94\u53d8\u6210\u4ed6\u65b0\u7684\u53f3\u513f\u5b50\u6240\u5728\u7684splay\u91cc\u6700\u5de6\u8fb9\u7684\u70b9\u7684\u524d\u4e00\u6761\u8fb9\uff0c\u5373\u4ed6\u5fc3\u53f3\u513f\u5b50\u7684 $front$\u3002\n### make_root\n\u4f9d\u8d56 $revs$ \u548c $access$\uff0c\u7531\u4e8e\u90a3\u4e24\u4e2a\u51fd\u6570\u5747\u5904\u7406\u5b8c\u6bd5\uff0c\u8fd9\u91cc\u548c\u666e\u901aLCT\u6ca1\u6709\u533a\u522b\u3002\n### find_root\u548clink\n\u627e\u6839\u548c\u666e\u901aLCT\u6ca1\u6709\u533a\u522b\uff0c\u4f46\u8fde\u8fb9\u4f1a\u66f4\u6539\u3002\u7531\u4e8e $link$ \u64cd\u4f5c(\u4e00\u822c)\u8fde\u7684\u662f\u8f7b\u8fb9\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u6539\u53d8\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684 $pre$\u3002\n```\nnode *rooter(node *x) {\n\t\taccess(x);\n\t\tsplay(x);\n\t\twhile(x->pushdown(),x->ch[0])\n\t\t\tx=x->ch[0];\n\t\treturn x;\n\t}\nbool link(node *x,node *y,int w) {\n\tif(rooter(x)==rooter(y))//\u5982\u679c\u5df2\u8fde\u901a\n\t\treturn false;\n\tmake_root(x);\n\tx->fa=y;\n\tx->pre=new edge(x,y,w);//\u65b0\u5efa\u8fb9\n\treturn true;\n}\n```\n### Cut\n\u8fd9\u4e2a\u64cd\u4f5c\u8981\u6539\u7684\u4e1c\u897f\u4e0d\u5c11\u554a\u2026\u2026\n```\n#define del(x) if(x){delete x;x=NULL;}\nvoid cut(node *x,node *y) {\n\tmake_root(x),access(y),splay(y);\n\tif(y->ch[0]==x) {\n\t\tx->fa=y->ch[0]=NULL;\n\t\tdel(x->pre);\n\t\tdel(y->nxt);\n\t\tdel(x->front);\n\t\tdel(y->back);\n\t} x->update(),y->update();\n}\n```\n\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9\uff08\u8fd9\u91cc\u9009 $x$\uff09\u6210\u4e3a\u6839\u540e\uff0c\u7531\u4e8e $x$ \u7684\u7236\u4eb2\u6ca1\u6709\u4e86\uff0c\u56e0\u800c $x.pre$ \u8981\u5220\u9664\uff0c\u800c\u5728 $x$ \u6240\u5728\u7684splay\u4e2d\u4e3a\u6df1\u5ea6\u6700\u6d45\u7684\u8282\u70b9\uff0c\u56e0\u6b64 $x->front$ \u4e5f\u7b49\u4e8e$x.pre$\uff0c\u56e0\u6b64\u4e5f\u8981\u5220\u9664\uff0c\u540c\u7406\uff0c$y$ \u7684 $back$ \u548c $nxt$ \u4e5f\u8981\u5220\u53bb\uff08\u6ce8\u610f $access$ \u540e\u7684\u8282\u70b9\u662f\u6240\u5728\u91cd\u94fe\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\uff09  \n\u6709\u7684\u4eba\u95ee\uff0c\u8fd9\u6761\u8fb9\u53ea\u88ab $new$ \u4e86\u4e00\u6b21\uff0c\u5374\uff08\u53ef\u80fd\uff09\u88ab $delete$ \u4e24\u6b21\uff0c\u4ec0\u4e48\u4e0d\u4f1a\u62a5\u9519\uff1f\u6211\u53ea\u80fd\u544a\u8bc9\u4f60\uff0cdelete\u4efb\u4f55\u4e00\u4e2a\u6307\u9488\u90fd\u4e0d\u4f1a\u51fa\u9519\uff0c\u5305\u62ec`delete NULL`\u3002\n\u81f3\u6b64\uff0c\u8fb9\u6743\u4fe1\u606f\u88ab\u5f88\u597d\u5730\u7ef4\u62a4\u4e86\uff0c\u5e76\u4e14\u6ca1\u6709\u589e\u52a0\u8282\u70b9\u6570\u91cf\uff08\u589e\u5927Splay\u7684\u89c4\u6a21\uff09\u3002  \n\u4e0b\u9762\u7ed9\u51fa\u672c\u9898\u5b8c\u6574AC\u4ee3\u7801\uff1a\n```\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=200010;\nstruct node;\nstruct edge {\n    int w;\n    node *x,*y;\n    edge(node *a,node *b,int tw):x(a),y(b),w(tw) {}\n};\nedge* mmax(edge *a,edge *b) {\n    if(!b) return a;\n    if(!a) return b;\n    return a->w>b->w?a:b;\n}\nstruct node {\n    int rev;\n    node *fa,*ch[2];\n    edge *front,*back,*pre,*nxt,*maxx;\n    node(node *f=NULL):fa(f),rev(0),maxx(NULL),pre(NULL),nxt(NULL),front(NULL),back(NULL) {\n        ch[0]=ch[1]=NULL;\n    }\n#define size(t) (t?t->size:0)\n#define maxx(t) (t?t->maxx:0)\n#define front(t) (t?t->front:NULL)\n#define weight(t) (t?t->w:0)\n    void update() {\n        front=pre;\n        back=nxt;\n        if(ch[0]) front=ch[0]->front;\n        if(ch[1]) back=ch[1]->back;\n        maxx=mmax(mmax(maxx(ch[0]),maxx(ch[1])),mmax(pre,nxt));\n    }\n    friend void revs(node *x) {\n        if(!x) return;\n        swap(x->ch[0],x->ch[1]);\n        swap(x->pre,x->nxt);\n        swap(x->front,x->back);\n        x->rev^=1;\n    }\n    void pushdown() {\n        if(!rev) return;\n        rev=0,revs(ch[0]),revs(ch[1]);\n    }\n};\nstruct  LCT {\n#define which(p) (p->fa->ch[1]==p)\n#define is_root(p) ((!p->fa)||(p->fa->ch[0]!=p&&p->fa->ch[1]!=p))\n#define del(x) if(x){delete x;x=NULL;}\n    node *pt[maxn];\n    void init(int n) {\n        for(int i=1; i<=n; i++)\n            pt[i]=new node();\n    }\n    void rotate(node *p) {\n        int a=which(p)^1;\n        node *f=p->fa;\n        f->ch[a^1]=p->ch[a];\n        if(p->ch[a]) p->ch[a]->fa=f;\n        p->fa=f->fa;\n        if(!is_root(f)) p->fa->ch[which(f)]=p;\n        f->fa=p,p->ch[a]=f;\n        f->update(),p->update();\n    }\n    void splay(node *p) {\n        static node *tmp[maxn];\n        int pos=0;\n        for(node *t=p;; t=t->fa) {\n            tmp[++pos]=t;\n            if(is_root(t)) break;\n        }\n        for(; pos; --pos)\n            tmp[pos]->pushdown();\n        for(; !is_root(p); rotate(p))\n            if(!is_root(p->fa))\n                rotate(which(p)==which(p->fa)?p->fa:p);\n        p->update();\n    }\n    void access(node *x) {\n        node *t=NULL;\n        while(x) {\n            splay(x);\n            x->ch[1]=t;\n            x->nxt=front(t);\n            x->update();\n            t=x,x=x->fa;\n        }\n    }\n    void make_root(node *p) {\n        access(p),splay(p),revs(p);\n    }\n    bool link(node *x,node *y,int w) {\n        if(rooter(x)==rooter(y))\n            return false;\n        make_root(x);\n        x->fa=y;\n        x->pre=new edge(x,y,w);\n        return true;\n    } bool link(int a,int b,int w) {\n        return link(pt[a],pt[b],w);\n    }\n    void cut(node *x,node *y) {\n        make_root(x),access(y),splay(y);\n        if(y->ch[0]==x) {\n            x->fa=y->ch[0]=NULL;\n            del(x->pre);\n            del(y->nxt);\n            del(x->front);\n            del(y->back);\n        }\n        x->update(),y->update();\n    }\n    node *rooter(node *x) {\n        access(x);\n        splay(x);\n        while(x->pushdown(),x->ch[0])\n            x=x->ch[0];\n        return x;\n    }\n    edge* query(int x,int y) {\n        make_root(pt[x]);\n        access(pt[y]);\n        splay(pt[y]);\n        return pt[y]->maxx;\n    }\n} lct;\nint n,m;\nlong long ans=0;\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    lct.init(n+1);\n    int merge=0;\n    for(int i=1,u,v,w; i<=m; i++) {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        if(u==v) continue;\n        if(!lct.link(u,v,w)) {\n            edge *tmp=lct.query(u,v);\n            if(tmp->w>w) {\n                lct.cut(tmp->x,tmp->y);\n                ans-=tmp->w;\n                ans+=w;\n                lct.link(u,v,w);\n            }\n        } else ans+=w,merge++;\n    }\n    if(merge<n-1) puts(\"orz\");\n    else printf(\"%lld\\n\",ans);\n}\n```",
        "postTime": 1548569916,
        "uid": 29372,
        "name": "glassy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u4e2aPrim\u6a21\u677f\u6211\u4e00\u5b9a\u8981\u903c\u903c\u4e00\u4e0b\n\n\u4f60\u8bf4\u6d1b\u8c37\u662f\u60f3\u5e72\u4ec0\u4e48\u5462\uff0c\u7adf\u7136\u6570\u636e\u91cc\u9762\u53c8\u6709\u81ea\u73af\u53c8\u6709\u91cd\u8fb9\u3002\n\n\u4e8e\u662f\u6211WA\u4e86N \u6b64\uff0c\u53c8\u83ab\u540d\u7684\u8d85\u5185\u5b58\u3002\u6700\u540e\u7ec8\u4e8e\u53bb\u4e86\u81ea\u73af\u53c8\u53bb\u4e86\u91cd\u8fb9\u3002\u4e0d\u591a\u6253\u6446\u4e86\uff0c\u770b\u4ee3\u7801\uff01\u6709\u6211\u53bb\u9664\u6bd2\u836f\u7684\u65b9\u6cd5\u3002\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\n#define MAXN 5000+5 \nconst int INF=99999999;\nint n,m;\nint dis[MAXN+1];\nbool book[MAXN+1];//\u6807\u8bb0\u4e00\u4e2a\u70b9\u662f\u5426\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811 \nint sum;//\u6574\u6761\u6700\u5c0f\u751f\u6210\u6811\u7684\u957f\u5ea6\nint map[MAXN+1][MAXN+1],tot;\nvoid Prim()\n{\n    int pos;//\u8bb0\u5f55\u6700\u5c0f\u7684\u8fb9\u8fde\u5411\u7684\u70b9\u7684\u7f16\u53f7 \n    book[1]=true;//\u5c061\u53f7\u9876\u70b9\u52a0\u5165//\u7528true\u6bd4\u8f83\u597d\uff0c\u56e0\u4e3a\u521d\u59cb\u5316\u662ffalse \n    tot++;\n    while(tot<=n-1)//\u5230n\u7684\u65f6\u5019\u5c31\u4e0d\u80fd\u518d\u8fdb\u884c\u52a0\u70b9\u64cd\u4f5c\u4e86\uff0c\u56e0\u4e3a\u90fd\u8fdb\u5165\u4e86\n    {\n        int min=INF;\n        for(int i=1;i<=n;i++)\n            if(book[i]==false && dis[i]<min){//\u6ce8\u610f\u5bf9book\u7684\u5224\u65ad\u554a\uff0c\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u5c31\u80af\u5b9a\u4e0d\u80fd\u518d\u53bb\u5224\u65ad \n                min=dis[i];\n                pos=i;\n            }\n        book[pos]=true;//\u6ce8\u610fbook\u7684\u64cd\u4f5c \n        tot++;\n        sum+=dis[pos];\n        for(int k=1;k<=n;k++)//\u679a\u4e3epos\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u8fdb\u884c\u677e\u5f1b\u64cd\u4f5c \n        {\n            if(book[k]==false && dis[k]>map[pos][k])//\u5982\u679cpos\u4e0d\u80fd\u5230\u8fbek\u70b9\u4e5f\u6210\u7acb\uff0c\u56e0\u4e3a\u90a3\u662fINF\u4e0d\u4f1a\u5c0f\u4e8e\u7684\n                dis[k]=map[pos][k];\n        }\n```\n}//\u600e\u4e48\u5224\u65ad\u8fd9\u4e2a\u56fe\u4e0d\u8054\u901a\u554a\n```cpp\n    //\u8981\u6709\u7684\u8f93\u51faorz \n}\nint main() \n{\n    scanf(\"%d%d\",&n,&m);\n    //\u8bb0\u5f97\u521d\u59cb\u5316\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<=n;j++)\n            if(i==j)\n                map[i][j]=0;\n            else\n                map[i][j]=INF;\n    //\u6ce8\u610f\u521d\u59cb\u5316\u8981\u5728\u8d4b\u503c\u4e4b\u524d \n    for(int i=1;i<=m;i++)\n    {\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        /*if(edge[i].u==edge[i].v)\n            continue;*///\u4e5f\u53ef\u4ee5\u8fd9\u6837\u53bb\u81ea\u73af \n        if(w<map[u][v])//\u5904\u7406\u91cd\u8fb9\uff0c\u6309\u9898\u76ee\u8981\u6c42\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u53d6\u6700\u5c0f \n```\n{//\u6240\u4ee5\u4e4b\u524d\u7684\u521d\u59cb\u5316\u66f4\u6709\u5fc5\u8981\u4e86\n\n```cpp\n            map[u][v]=w;\n            map[v][u]=w;\n        }\n    }\n    //\u521d\u59cb\u5316dis\u6570\u7ec4 \n    //\u8fd9\u91cc\u6700\u5f00\u59cb\u9ed8\u8ba4\u4e3a1\u53f7\u9876\u70b9\u4e3a\u6e90\u70b9\uff0c\u5f00\u59cb\u662f1\u53f7\u9876\u70b9\u5230\u5404\u4e2a\u9876\u70b9\u7684\u521d\u59cb\u8ddd\u79bb\uff0c\u56e0\u4e3a\u5f00\u59cb\u6700\u5c0f\u751f\u6210\u6811\u91cc\u53ea\u67091\u53f7 \n    for(int i=1;i<=n;i++)\n        map[i][i]=0;//\u53bb\u73af\u64cd\u4f5c\u2014\u2014\u6570\u636e\u6709\u6bd2\uff0c\u6709\u4e00\u4e2a\u70b9\u7ec4\u6210\u6b63\u73af \n    for(int i=1;i<=n;i++)\n        dis[i]=map[1][i];\n    Prim();\n    printf(\"%d\",sum);\n        return 0; \n}\n```\n\u8fd9\u4e2a\u9898\u76ee\u8ba9\u6211\u5b66\u4f1a\u4e86\u731c\u51fa\u9898\u8005\u7684\u8111\u6d1e\u5927\u7684\u7a0b\u5ea6\u3002\n\u7136\u540e\u52a0\u4e0a\u8fd9\u4e9b\u95ee\u9898\u7684\u7834\u89e3\u65b9\u6cd5\uff01\n",
        "postTime": 1502453833,
        "uid": 24027,
        "name": "IG_TheShy_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "# \u6700\u5c0f\u751f\u6210\u6811\n\u8fd9\u91cc\u4ecb\u7ecd\u89e3\u51b3\u6700\u5c0f\u751f\u6210\u6811\u6700\u5e38\u89c1\u7684\u4e24\u79cd\u7b97\u6cd5Prim\u548cKruskal\u7b97\u6cd5\uff0c\u4f46\u5728\u8fd9\u4e4b\u524d\u5148\u4ecb\u7ecd\u5982\u4f55\u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\u3002\n\n## \u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\n\u5224\u65ad\u56fe\u662f\u5426\u8fde\u901a\uff0c\u53ef\u7528dfs\u548cbfs\u904d\u5386\u56fe\u7b97\u6cd5\uff0c\u6ce8\u610f\u70b9\u6570\u76ee\u8f83\u591a\uff0c\u53c8\u662f\u7a00\u758f\u56fe\u7684\u8bdd\uff0c\u6700\u540e\u4f7f\u7528\u90bb\u63a5\u8868\u7684\u65b9\u6cd5\u5b58\u50a8\u3002\u53e6\u5916\u63a8\u8350\u91c7\u7528\u7684\u662f\u5e76\u67e5\u96c6\u7684\u65b9\u6cd5\u3002\u521d\u59cb\u5316\u65f6\u5c06\u6bcf\u4e2a\u8282\u70b9\u770b\u4f5c\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u6bcf\u7ed9\u51fa\u4e00\u6761\u8fb9\u5373\u628a\u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u3002\u6700\u540e\u904d\u5386\u6240\u6709\u70b9\uff0c\u6709\u51e0\u4e2a\u96c6\u5408\u4fbf\u6709\u51e0\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u82e5\u53ea\u6709\u4e00\u4e2a\u96c6\u5408\u8bf4\u660e\u56fe\u8fde\u901a\u3002\u5e76\u67e5\u96c6\u65b9\u6cd5\u901a\u5e38\u60c5\u51b5\u4e0b\u65f6\u95f4\u6548\u7387\u8f83\u9ad8\uff0c\u8fd8\u80fd\u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u6709\u56de\u8def\uff0c\u5728kruskal\u7b97\u6cd5\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002\u53e6\u5916\u5982\u679c\u4f60\u662f\u7528\u5806\u4f18\u5316\u7684Prim\u7b97\u6cd5\u7684\u8bdd\u4f60\u53ef\u4ee5\u5224\u65ad\u5806\u4e3a\u7a7a\u65f6\u8282\u70b9\u662f\u5426\u5168\u90e8\u62d3\u5c55\uff0c\u6211\u4f1a\u5728\u4e4b\u540e\u8be6\u7ec6\u7684\u8bb2\u89e3\u3002\n\n\u4e0b\u9762\u9644\u4e0a\u4ee3\u7801\n\n(1)DFS\n```cpp\nint count = 0;\nvoid DFS(int i)\n{\n    int j = 0;\n    visited[i] = 1;\n    count++;\n    for(j=0; j<G.numVertexes; j++)\n    {\n        if(G.arc[i][j]==1 && !visited[j])//i\u548cj\u6709\u5173\u7cfb\u76f8\u90bb\uff0c\u5e76\u4e14j\u9876\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\n        {\n            DFS(G, j);\n        }\n    }\n}\n```\n\u4ece\u67d0\u4e00\u70b9\u51fa\u53d1\u5f00\u59cbDFS\uff0c\u5230\u6700\u540e\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6700\u540ecount\u7684\u503c\u662f\u5426\u662f\u5168\u90e8\u7684\u8282\u70b9\u5c31\u53ef\u4ee5\uff0c\u5982\u679c\u5c0f\u4e8e\u603b\u8282\u70b9\u6570\uff0c\u5219\u8bc1\u660e\u662f\u4e0d\u8fde\u901a\u7684\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8bc1\u660e\u662f\u8fde\u901a\u7684\u3002\n\n(2)BFS\n```cpp\nvoid bfs(int s){            //\u7528\u961f\u5217\u5e7f\u641c\n    queue<int> q;\n    q.push(s);\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        vis[x]=true;\n        for(int i=0;i<g[x].size();++i){\n            if(vis[g[x][i]]) g[x].erase(g[x].begin()+i);//\u5220\u9664\u56fe\u4e2d\u5df2\u7ecf\u904d\u5386\u8fc7\u7684\u70b9\uff0c\u53ef\u63d0\u9ad8\u904d\u5386\u901f\u5ea6\n            else q.push(g[x][i]);\n        }\n    }\n}\n\nbool judge(){                   //\u5224\u65ad\u662f\u5426\u6240\u6709\u70b9\u5df2\u88ab\u904d\u5386\u8fc7\n    for(int i=1;i<=n;++i)\n        if(!vis[i])\n            return false;\n    return true;\n}\n```\n\u540c\u6837\u5982\u679c\u4ece\u67d0\u4e00\u4e2a\u8282\u70b9\u5e7f\u5ea6\u641c\u5b8c\uff0c\u6709\u672a\u8bbf\u95ee\u5230\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8be5\u56fe\u4e00\u5b9a\u662f\u4e0d\u8fde\u901a\u7684\u3002\n\n(3)\u5e76\u67e5\u96c6\n```cpp\nint set[1000005];\n\nint find(int x){\n\n   return x==set[x]?x:(set[x]=find(set[x]));   //\u9012\u5f52\u67e5\u627e\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\uff0c\u542b\u8def\u5f84\u538b\u7f29\u3002\n\n}\nint main()\n\n{\n\n   int n,m,i,x,y;\n\n   scanf(\"%d%d\",&n,&m);\n\n   for(i=1;i<1000005;++i)        //\u521d\u59cb\u5316\u4e2a\u96c6\u5408\uff0c\u6570\u7ec4\u503c\u7b49\u4e8e\u5c0f\u6807\u7684\u70b9\u4e3a\u6839\u8282\u70b9\u3002\n\n       set[i]=i;\n\n   for(i=0;i<m;++i){\n\n       int a,b;\n\n       scanf(\"%d%d\",&a,&b);\n\n       int fx=find(a),fy=find(b);\n\n       set[fx]=fy;                      //\u5408\u5e76\u6709\u8fb9\u76f8\u8fde\u7684\u5404\u4e2a\u8fde\u901a\u5206\u91cf\n\n   }\n\n   int cnt=0;\n\n   for(i=1;i<=n;++i)          //\u7edf\u8ba1\u96c6\u5408\u4e2a\u6570\uff0c\u5373\u4e3a\u8fde\u901a\u5206\u91cf\u4e2a\u6570\uff0c\u4e3a\u4e00\u65f6\uff0c\u56fe\u8054\u901a\u3002\n\n       if(set[i]==i)\n\n           ++cnt;\n\n   if(cnt==1)\n\n       printf(\"yes\\n\");\n\n   else printf(\"no\\n\");\n\n   return 0;\n\n}\n```\nDFS\u548cBFS\u5176\u5b9e\u770b\u770b\u5c31\u884c\u4e86\uff0c\u57fa\u672c\u4e0d\u4f1a\u7528\u5230\u7684\u3002\n\n## \u63a5\u4e0b\u6765\u6211\u4eec\u6b65\u5165\u6b63\u9898\n\u7ed9\u51fa\u4e0b\u9762\u8fd9\u6837\u4e00\u4e2a\u65e0\u5411\u56fe\n![](https://cdn.luogu.com.cn/upload/pic/75507.png)\n\n\u5982\u679c\u4ee5V1\u4e3a\u8d77\u70b9\u7684\u8bdd\uff0c\u8ba9\u4f60\u505a\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u3002\n\n\u6839\u636e\u76f4\u89c9\u6211\u4eec\u4f1a\u6bcf\u6b21\u627e\u6700\u5c0f\u7684\u8fb9\uff0c\u76f4\u81f3\u62d3\u5c55\u5b8c\u6240\u6709\u8282\u70b9\uff1b\n\n\u4ee5\u8fd9\u4e2a\u56fe\u4e3a\u4f8b\uff1a\n\n1.V1\u8dddV2, V3, V4\u7684\u8ddd\u79bb\u5206\u522b\u662f3\uff0c\u6211\u4eec\u4f1a\u5148\u8fde\u63a5V1\u548cV2;\n\n2.\u57285, 8, 4, 6\u4e2d4\u6700\u5c0f\uff0c\u6240\u4ee5\u8fde\u63a5V2\u548cV4\uff1b\n\n3.\u57285\uff0c6\uff0c2\uff0c11\uff0c10\u4e2d2\u6700\u5c0f\uff0c\u6240\u4ee5\u8fde\u63a5V3\u548cV4;\n\n4.\u540c\u7406\uff0c\u8fde\u63a5V4\u548cV5;\n\n\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u662f19\uff0c\u53ef\u662f\u8fd9\u6837\u505a\u771f\u7684\u5bf9\u5417\uff1f\n\n\u5176\u5b9e\u8fd9\u6837\u505a\u771f\u7684\u662f\u6b63\u786e\u7684\u3002\u56e0\u4e3a\u4f60\u7ed5\u4e00\u5708\u4e4b\u540e\u5230\u8fbe\u8fd9\u4e2a\u70b9\u603b\u6bd4\u76f4\u63a5\u5230\u8fbe\u8fd9\u4e2a\u70b9\u8981\u957f\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u4e25\u8c28\u8bc1\u660e\uff1a\n\n\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u9876\u70b9v\uff0c\u8fde\u63a5\u5230\u8be5\u9876\u70b9\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9(v, vj)\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff08\u5373\u4efb\u610f\u4e00\u4e2a\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fde\u901a\u5b50\u56fe\uff0c\u4ece\u5916\u90e8\u8fde\u63a5\u5230\u8be5\u8fde\u901a\u5b50\u56fe\u7684\u6240\u6709\u8fb9\u4e2d\u7684\u4e00\u6761\u6700\u77ed\u8fb9\u5fc5\u7136\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\uff09\u3002\n\n### \u6839\u636e\u8fd9\u4e2a\u57fa\u672c\u601d\u60f3\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u5f88\u7b80\u5355\u7684\u7b97\u6cd5\n```cpp\n#include<cstdio>\nint a[6][6]= { {0, 0, 0, 0, 0, 0},{0, 0, 3, 5, 8, 0}, {0, 3, 0, 6, 4, 11}, {0, 5, 6, 0, 2, 0}, {0, 8, 4, 2, 0, 10}, {0, 0, 11, 0, 10, 0} }; //\u6d4b\u8bd5\u6570\u636e\nint used[6]; //\u5f53\u524d\u8282\u70b9\u7684\u72b6\u6001\nint main()\n{\n\tint n = 5, ans = 0, flag;\n\tused[1] = 1;\n\tfor(int k = 1; k < n; k++) //n\u4e2a\u70b9\u9700\u62d3\u5c55 n - 1 \u6b21\n\t{\n\t\tint minn = 0x3f3f3f3f;\n\t\tfor(int i = 1; i <= n; i++) if(! used[i]) //\u627e\u4e00\u4e2a\u672a\u88ab\u62d3\u5c55\u7684\u8282\u70b9\n\t\t\tfor(int j = 1; j <= n; j++)\n\t\t\t\tif(used[j] && a[i][j] && a[i][j] < minn) {\n\t\t\t\t\tminn = a[i][j];\n\t\t\t\t\tflag = i;\n\t\t\t\t} //\u627e\u4e00\u4e2a\u5df2\u62d3\u5c55\u7684\u8282\u70b9\n\t\tused[flag] = 1;\n\t\tans += minn;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n\n```\n\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n ^ 3), \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u5b83\u8fdb\u884c\u4f18\u5316\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2alowcost[ ]\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\nint a[6][6]= { {0, 0, 0, 0, 0, 0},{0, 0, 3, 5, 8, 0}, {0, 3, 0, 6, 4, 11}, {0, 5, 6, 0, 2, 0}, {0, 8, 4, 2, 0, 10}, {0, 0, 11, 0, 10, 0} };\nint used[6], LowCost[6];\nint main()\n{\n\tint n = 5, ans = 0, k;\n\tused[1] = 1;\n\tfor(int i = 1; i <= n; i++)\n\t\tLowCost[i] = a[1][i];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tint minn = 0x3f3f3f3f;\n\t\tfor(int j = 1; j <= n; j++)\n\t\t\tif(LowCost[j] < minn && LowCost[j] && ! used[j])\n\t\t\t{\n\t\t\t\tminn = LowCost[j];\n\t\t\t\tk = j;\n\t\t\t} //\u4ece\u62d3\u5c55\u7684\u8282\u70b9\u4e2d\u9009\u4e00\u4e2a\u6700\u5c0f\u7684\n\t\tused[k] = 1;\n\t\tfor(int j = 1; j <= n; j++)\n\t\t{\n\t\t\tif(used[j]) continue;\n\t\t\tif((a[k][j] < LowCost[j] && a[k][j]) || ! LowCost[j]) LowCost[j] = a[k][j];\n\t\t} //\u66f4\u65b0lowcost[]\n\t}\n\tfor(int i = 1; i <= n; i++)\n\t\tans += LowCost[i];\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n ^ 2)\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u5df2\u7ecf\u591f\u7528\u4e86\uff0c\u4f46\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f18\u5316\u3002\n\n\u4ee3\u7801\u4e2d\u6211\u4eec\u591a\u6b21\u67e5\u627elowcost[ ]\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n),\u6240\u4ee5\u53ef\u4ee5\u5199\u4e00\u4e2a\u6700\u5c0f\u5806\u6765\u8fdb\u884c\u4f18\u5316\u3002\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(logn)\u6240\u4ee5\u7c97\u7565\u4f30\u8ba1\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(nlogn)\n\nPrim\u7b97\u6cd5\u7684AC\u4ee3\u7801:\n\n```cpp\n#include<cstdio>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int maxn = 5001;\nconst int INF = 2147483647;\n\n\nstruct edge\n{\n\tint to, next, w;\n} e[400002]; //\u94fe\u5f0f\u524d\u5411\u661f\n\nstruct node\n{\n\tint u, w; // u\u662f\u8282\u70b9\uff0cw\u662f\u82b1\u8d39\n\tbool operator < (node x) const\n\t{\n\t\treturn w > x.w;\n\t} //\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u751f\u6210\u6700\u5c0f\u5806\n};\n\nint dis[maxn], head[maxn], num;// dis\u662f\u6700\u5c0f\u82b1\u8d39\uff0chead\u5b58\u8fb9\uff0cnum\u4e3a\u8fb9\u6570\nbool vis[maxn];\n\nvoid add(int u, int v, int w)\n{\n\te[++num].to = v;\n\te[num].w = w;\n\te[num].next = head[u];\n\thead[u] = num;\n} // \u52a0\u8fb9\n\npriority_queue<node> q;\n\nint main()\n{\n\tint n, m, ans = 0, cnt = 0;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tint u, v, w;\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tadd(u, v, w); add(v, u, w); // \u65e0\u5411\u56fe\u8981\u52a0\u4e24\u6b21\n\t}\n\tfor(int i = 2; i <= n; i++)\n\t\tdis[i] = INF; // \u521d\u59cb\u5316dis[]\n\tq.push((node) {1, 0});\n\twhile(cnt < n) // \u62d3\u5c55 n - 1 \u6b21\n\t{\n\t\tnode x = q.top();\n\t\tq.pop();\n\t\tif(vis[x.u]) continue;\n\t\tvis[x.u] = true;\n\t\tcnt++;\n\t\tans += x.w;\n\t\tfor(int i = head[x.u]; i ; i = e[i].next) \u904d\u5386u\u7ecf\u8fc7\u7684\u6240\u6709\u7684\u7ed3\u70b9\n\t\t\tif(e[i].w < dis[e[i].to]) {\n\t\t\t\tdis[e[i].to] = e[i].w;\n\t\t\t\tq.push((node) {e[i].to, e[i].w});\n\t\t\t}\n\t}\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```\n\u5982\u679c\u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\u53ea\u9700\u8981\u628awhile\u5faa\u73af\u6539\u4e3a\n\n```cpp\nwhile(! q.empty() || cnt < n)\n```\n\u7136\u540e\u52a0\u4e0a\n```cpp\nif(cnt < n) printf(\"orz\");\nelse printf(\"%d\", ans);\n```\n### \u63a5\u4e0b\u6765\u6211\u4eec\u4ecb\u7ecdKruskal\u7b97\u6cd5\u3002\nKruskal\u7684\u57fa\u672c\u601d\u60f3\u662f\u8d2a\u5fc3\uff0c\u5bf9\u6240\u6709\u7684\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u9010\u4e2a\u76f8\u52a0\uff0c\u53ea\u8981\u5224\u65ad\u662f\u5426\u6210\u73af\u5373\u53ef\u3002\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n\tint u, v, w;\n} a[200001]; // \u5b58\u8fb9\n\nint set[5001]; // \u5e76\u67e5\u96c6\u6570\u7ec4\n\nbool cmp (node a, node b)\n{\n\treturn a.w < b.w;\n}\n\nint find(int x) { return set[x] == x ? x : set[x] = find(set[x]); } // \u5e76\u67e5\u96c6\u67e5\u627e\u51fd\u6570\n\nint main()\n{\n\tint n, m, ans = 0;\n\tscanf(\"%d%d\", &n, &m);\n\tfor(int i = 1; i <= n; i++) set[i] = i; // \u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\tfor(int i = 1; i <= m; i++)\n\t\tscanf(\"%d%d%d\", &a[i].u, &a[i].v, &a[i].w);\n\tsort(a + 1, a + m + 1, cmp);\n\tfor(int i = 1; i <= m; i++) {\n\t\tint x = find(a[i].u);\n\t\tint y = find(a[i].v);\n\t\tif(x != y) { ans += a[i].w; set[x] = y; } // \u5982\u679c\u4e24\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\uff0c\u5219\u52a0\u5165\u4e4b\u540e\u4e0d\u4f1a\u6210\u73af\u3002\n\t}\n\tprintf(\"%d\", ans);\n\treturn 0;\n}\n```\n\n\u5199\u90a3\u4e48\u591a\u4e0d\u5bb9\u6613\uff0c\u70b9\u4e0b\u8d5e\u8c22\u8c22\u3002",
        "postTime": 1566999015,
        "uid": 183629,
        "name": "jiaomingyang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "## \u9898\u76ee\u63cf\u8ff0\n\u5982\u9898\uff0c\u7ed9\u51fa\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u8be5\u56fe\u4e0d\u8fde\u901a\uff0c\u5219\u8f93\u51faorz\n## \u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u3001M\uff0c\u8868\u793a\u8be5\u56fe\u5171\u6709N\u4e2a\u7ed3\u70b9\u548cM\u6761\u65e0\u5411\u8fb9\u3002\uff08N<=5000\uff0cM<=200000\uff09\n\u63a5\u4e0b\u6765M\u884c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570Xi\u3001Yi\u3001Zi\uff0c\u8868\u793a\u6709\u4e00\u6761\u957f\u5ea6\u4e3aZi\u7684\u65e0\u5411\u8fb9\u8fde\u63a5\u7ed3\u70b9Xi\u3001Yi\n## \u8f93\u51fa\u683c\u5f0f\uff1a\n\u8f93\u51fa\u5305\u542b\u4e00\u4e2a\u6570\uff0c\u5373\u6700\u5c0f\u751f\u6210\u6811\u7684\u5404\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\uff1b\u5982\u679c\u8be5\u56fe\u4e0d\u8fde\u901a\u5219\u8f93\u51faorz\n## \u8f93\u5165\u6837\u4f8b\n4 5\n\n1 2 2\n\n1 3 2\n\n1 4 3\n\n2 3 4\n\n3 4 3\n## \u8f93\u51fa\u6837\u4f8b\n7\n## \u5206\u6790\n\u6700\u5c0f\u751f\u6210\u6811(Minimum Cost Spanning Tree)\n\n\u9996\u5148\uff0c\u6700\u5c0f\u751f\u6210\u6811\u662f\u4e00\u526f\u8fde\u901a\u52a0\u6743\u65e0\u5411\u56fe\u4e2d\u4e00\u68f5\u6743\u503c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002\n\n\u4e3b\u8981\u53ef\u4ee5\u4f7f\u7528Prim\u548cKruskal\u7b97\u6cd5\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u7a00\u758f\u56fe\u6765\u8bf4\uff0c\u7528Kruskal\u5199\u6700\u5c0f\u751f\u6210\u6811\u6548\u7387\u66f4\u597d\uff0c\u52a0\u4e0a\u5e76\u67e5\u96c6\uff0c\u53ef\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\n\u4e00\u822c\u6765\u8bf4\u6700\u5c0f\u751f\u6210\u6811\u4e00\u822c\u6709\u4e24\u79cd\u7b97\u6cd5\n\n\u5373**Prim**\u4e0e**Kruskal**\n\nKruskal\u7b97\u6cd5\uff08\u5e76\u67e5\u96c6\u5b9e\u73b0\uff09\n\u5728\u4f7f\u7528Kruskal\u5b9e\u73b0\u6700\u5c0f\u751f\u6210\u6811\u4e4b\u524d\uff0c\u5148\u6765\u770b\u4e0b\u5e76\u67e5\u96c6\u9700\u8981\u6ce8\u610f\u7684\u4e24\u70b9\uff1a\n1. \u9488\u5bf9\u6811\u53ef\u80fd\u4f1a\u9000\u5316\u4e3a\u94fe\u8868\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff0c\u6bcf\u6b21\u5408\u5e76\u6811\u65f6\uff0c\u603b\u662f\u5c06\u77ee\u7684\u6811\u6302\u5230\u9ad8\u7684\u6811\u4e0b\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a\u6309\u79e9\u5408\u5e76\u3002\n\n2. \u4e3a\u4e86\u5f97\u5230\u7684\u6811\u5c06\u66f4\u52a0\u6241\u5e73\uff0c\u52a0\u901f\u4ee5\u540e\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5f15\u7528\u8282\u70b9\u7684\u901f\u5ea6\uff0cFind\u65f6\u6539\u53d8\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\u5230\u6839\u8282\u70b9\uff0c\u8fd9\u53eb\u8def\u5f84\u538b\u7f29\n\nKruskal\u7b97\u6cd5\u7684\u6b65\u9aa4\u5305\u62ec\uff1a\n1. \u5bf9\u6240\u6709\u6743\u503c\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff08\u8fd9\u91cc\u5bf9\u8fb9\u6392\u5e8f\u65f6\u8fd8\u9700\u8981\u8bb0\u5f55\u8fb9\u7684\u7d22\u5f15\uff0c\u8fd9\u6837\u4ee5\u8fb9\u7684\u6743\u503c\u6392\u5b8c\u5e8f\u540e\u53ea\u6539\u53d8\u4e86\u6743\u503c\u7684\u7d22\u5f15\u4f4d\u7f6e\uff09\n2. \u7136\u540e\u6bcf\u6b21\u9009\u53d6\u6700\u5c0f\u7684\u6743\u503c\uff0c\u5982\u679c\u548c\u5df2\u6709\u70b9\u96c6\u6784\u6210\u73af\u5219\u8df3\u8fc7\uff0c\u5426\u5219\u52a0\u5230\u8be5\u70b9\u96c6\u4e2d\u3002\u6700\u7ec8\u6709\u6240\u6709\u7684\u70b9\u96c6\u6784\u6210\u7684\u6811\u5c31\u662f\u6700\u4f73\u7684\u3002\n# Kruskal AC\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;//\u5947\u5947\u602a\u602a\u7684\u8bfb\u5165\u4f18\u5316\u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u8bfb\u5165\u901f\u5ea6\uff0c\u4f46\u5bb9\u6613\u51fa\u9505\u4e0d\u63a8\u8350\u4f7f\u7528QWQ\nusing namespace std;\nstruct ss{\n    int u;\n    int v;\n    int weight;\n    int next;\n};\nss s1[501010];\nint cnt=0,ans=0,tot=0,a,b,c,n,m;\nint head[501010],f[501001];\nbool vis[501010];\nint num[501010];\ninline int find(int x){return x==f[x]?x:f[x]=find(f[x]);}//\u5e76\u67e5\u96c6\ninline void unionn(int x,int y){f[y]=x;}\ntemplate <typename T> inline void read(T &x)\n{\n    x=0;int f=1;char c=getchar();\n    for(;c>'9'||c<'0';c=getchar())if(c=='-')f=-1;\n    for(;c>='0'&&c<='9';c=getchar())x=(x<<1)+(x<<3)+(c^48);\n    x*=f;\n}\ntemplate <typename T> inline void print(T x)\n{\n    if(x<0) putchar('-'),x=-x;\n    if(x>9) print(x/10);\n    putchar(x%10+48);\n}\ninline void abb(int x,int y,int z)\n{\n    cnt++;\n    s1[cnt].u=x;\n    s1[cnt].v=y;\n    s1[cnt].weight=z;\n    s1[cnt].next=head[x];\n    head[x]=cnt;\n}\ninline bool cmp(ss x,ss y)\n{\n    return x.weight<y.weight;\n}\nint main()\n{\n    read(n),read(m);\n    for(register int i=1;i<=m;i++)\n    {\n        read(a),read(b),read(c);\n        abb(a,b,c),abb(b,a,c);\n    }\n    for(register int i=1;i<=n;i++)\n        f[i]=i;\n    stable_sort(s1+1,s1+1+cnt,cmp);//\u5feb\u62cd\u4e00\u6ce2\n    for(register int i=1;i<=cnt;i++)\n    {\n        int r1=find(s1[i].u);\n        int r2=find(s1[i].v);\n        if(find(r1)!=find(r2))//\u5982\u679c\u4e24\u6570\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u5408\u5e76\u4ed6\u4eec\n        {\n            unionn(r1,r2);\n            ans++;\n            tot+=s1[i].weight;\n        }\n        if(ans==n-1)\n            break;\n    }\n    print(tot);//\u8001\u5b9e\u8bf4\u6570\u636e\u5e76\u4e0d\u5b58\u5728\u8f93\u51fa'orz'\u7684\u60c5\u51b5\u6240\u4ee5\u76f4\u63a5\u8f93\u51fa\n    return 0;\n}\n```\nPrim\u7b97\u6cd5\uff08\u4f7f\u7528visited\u6570\u7ec4\u5b9e\u73b0\uff09\nPrim\u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\u548c\u8fb9\u6570\u65e0\u5173\uff0c\u548c\u9876\u70b9\u6811\u6709\u5173\uff0c\u6240\u4ee5\u9002\u5408\u6c42\u89e3\u7a20\u5bc6\u7f51\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\nPrim\u7b97\u6cd5\u7684\u6b65\u9aa4\u5305\u62ec\uff1a\n1. \u5c06\u4e00\u4e2a\u56fe\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5f52\u4e3a\u70b9\u96c6U\uff0c\u4e00\u90e8\u5206\u5f52\u4e3a\u70b9\u96c6V\uff0cU\u7684\u521d\u59cb\u96c6\u5408\u4e3a{V1}\uff0cV\u7684\u521d\u59cb\u96c6\u5408\u4e3a{ALL-V1}\u3002\n2. \u9488\u5bf9U\u5f00\u59cb\u627eU\u4e2d\u5404\u8282\u70b9\u7684\u6240\u6709\u5173\u8054\u7684\u8fb9\u7684\u6743\u503c\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5c06\u5173\u8054\u7684\u8282\u70b9Vi\u52a0\u5165\u5230U\u4e2d\uff0c\u5e76\u4e14\u4eceV\u4e2d\u5220\u9664\uff08\u6ce8\u610f\u4e0d\u80fd\u5f62\u6210\u73af\uff09\u3002\n3. \u9012\u5f52\u6267\u884c\u6b65\u9aa42\uff0c\u76f4\u5230V\u4e2d\u7684\u96c6\u5408\u4e3a\u7a7a\u3002\n4. U\u4e2d\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u6811\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\n# Prim AC \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdio>\n#include<bitset>\n#include<cmath>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<queue>\nusing namespace std;\ntemplate <typename T> inline void read(T &x)\n{\n\tx=0;int f=1;char c=getchar();\n\tfor(;c>'9'||c<'0';c=getchar()) if(c=='-') f=-1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tx*=f;\n}\ntemplate <typename T> inline void print(T x)\n{\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+48);\n}\nstruct ss{\n\tint v;\n\tint w;\n\tint next;\n};\nss s1[501010];\nint head[501010],cnt=0;\nint n,m,tot=0;\nint DJ[501010];\nbool u[501010];\ninline void abb(int x,int y,int z)\n{\n\tcnt++;\n\ts1[cnt].v=y;\n\ts1[cnt].w=z;\n\ts1[cnt].next=head[x];\n\thead[x]=cnt;\n}\nint main()\n{\n\t\n\tmemset(DJ,0x7f,sizeof(DJ));\n\tread(n),read(m);\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\tread(a),read(b),read(c);\n\t\tabb(a,b,c),abb(b,a,c);\n\t}\n\tDJ[1]=0;\n\tfor(register int i=1;i<=n;i++)\n\t{\n\t\tint k=0;\n\t\tfor(register int j=1;j<=n;j++)\n\t\t\tif(!u[j]&&DJ[j]<DJ[k])\n\t\t\t\tk=j;\n\t\tu[k]=true,tot+=DJ[k];\n\t\tfor(register int j=head[k];j;j=s1[j].next)\n\t\t\tif(!u[s1[j].v]&&s1[j].w<DJ[s1[j].v])\n\t\t\t\tDJ[s1[j].v]=s1[j].w;\n\t}\n\tprint(tot);\n\treturn 0;\n}\n```\n\u51c6\u786e\u6765\u8bf4**Prim**\u4e0e**Dijkstra**\u7b97\u6cd5\u539f\u7406\u76f8\u4f3c\n### **\u90a3\u4e48\u65e2\u7136Dijkstra**\u53ef\u4ee5\u5f00\u5806\u4f18\u5316Prim\u4e5f\u53ef\u4ee5\u7528\u5417OvO\n\u786e\u5b9e\u53ef\u4ee5\n## \u53ef\u4ee5\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u4eceO(n*n)\u4f18\u5316\u5230O(n*logn)\n~~\u867d\u7136\u5bf9\u4e8e\u672c\u9898\u6ca1\u6709\u592a\u5927\u7528\uff08\u96fe\uff09~~\n\n# Prim_\u5806\u4f18\u5316AC\u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cstdio>\n#include<bitset>\n#include<cmath>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<iostream>\n#include<queue>\nusing namespace std;\ntemplate <typename T> inline void read(T &x)\n{\n\tx=0;int f=1;char c=getchar();\n\tfor(;c>'9'||c<'0';c=getchar()) if(c=='-') f=-1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tx*=f;\n}\ntemplate <typename T> inline void print(T x)\n{\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) print(x/10);\n\tputchar(x%10+48);\n}\nstruct ss{\n\tint v;\n\tint w;\n\tint next;\n};\nss s1[501010];\nint head[501010],cnt=0;\nint n,m,tot=0;\nint DJ[501010];\nbool u[501010];\npriority_queue<pair<int ,int> >q;\ninline void abb(int x,int y,int z)\n{\n\tcnt++;\n\ts1[cnt].v=y;\n\ts1[cnt].w=z;\n\ts1[cnt].next=head[x];\n\thead[x]=cnt;\n}\nint main()\n{\n\tmemset(DJ,0x7f,sizeof(DJ));\n\tread(n),read(m);\n\tfor(register int i=1;i<=m;i++)\n\t{\n\t\tint a,b,c;\n\t\tread(a),read(b),read(c);\n\t\tabb(a,b,c),abb(b,a,c);\n\t}\n\tDJ[1]=0;\n\tq.push(make_pair(0,1));\n\twhile(q.size())\n\t{\n\t\tint k=q.top().second;\n\t\tq.pop();\n\t\tif(!u[k])\n\t\t{\n\t\t\tu[k]=true;\n\t\t\ttot+=DJ[k];\n\t\t\tfor(register int j=head[k];j;j=s1[j].next)\n\t\t\t\tif(!u[s1[j].v]&&s1[j].w<DJ[s1[j].v])\n\t\t\t\t{\n\t\t\t\t\tDJ[s1[j].v]=s1[j].w;\n\t\t\t\t\tq.push(make_pair(-DJ[s1[j].v],s1[j].v));\n\t\t\t\t}\n\t\t}\n\t}\n\tprint(tot);\n\treturn 0;\n}\n```\n \u53ef\u4ee5\u8ba9\u672c\u9898\uff08Prim\uff09\u4ece396ms\u4f18\u5316\u5230213ms\n\n**\u6700\u540e\u603b\u7ed3\u4e00\u4e0b**\n\nKruskal VS Prim\n\u65b9\u6cd5\u4e0a\uff1aKruskal\u5728\u6240\u6709\u8fb9\u4e2d\u4e0d\u65ad\u5bfb\u627e\u6700\u5c0f\u7684\u8fb9\uff0cPrim\u5728U\u548cV\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u5bfb\u627e\u6743\u503c\u6700\u5c0f\u7684\u8fde\u63a5\uff0c\u5171\u540c\u70b9\u662f\u6784\u9020\u8fc7\u7a0b\u90fd\u4e0d\u80fd\u5f62\u6210\u73af\u3002\n\n\u65f6\u95f4\u4e0a\uff1aPrim\u9002\u5408\u7a20\u5bc6\u56fe\uff0c\u590d\u6742\u5ea6\u4e3aO(n * n)\uff0c\u56e0\u6b64\u901a\u5e38\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u50a8\u5b58\uff0c\u590d\u6742\u5ea6\u4e3aO(e * loge)\uff0c\u800cKruskal\u591a\u7528\u90bb\u63a5\u8868\uff0c\u7a20\u5bc6\u56fe Prim > Kruskal\uff0c\u7a00\u758f\u56fe Kruskal > Prim\u3002\n\n\u7a7a\u95f4\u4e0a\uff1a Prim\u9002\u5408\u70b9\u5c11\u8fb9\u591a\uff0cKruskal\u9002\u5408\u8fb9\u591a\u70b9\u5c11\u3002",
        "postTime": 1563454953,
        "uid": 117242,
        "name": "Waylish",
        "ccfLevel": 0,
        "title": "P3366 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u9898\u89e3"
    },
    {
        "content": "\u6628\u5929\uff1a __[\u56fe\u8bba-\u6700\u77ed\u8def<Dijkstra,Floyd>](https://www.luogu.org/blog/37682/tu-lun-zui-xiao-sheng-cheng-shu-dijkstrafloyd)__\n\n\u4ee5\u4e0a\u662f\u6628\u5929\u7684Blog\uff0c\u6709\u9700\u8981\u8005\u8bf7\u5148\u9605\u8bfb\u5b8c\u4ee5\u4e0a\u518d\u9605\u8bfb\u4eca\u5929\u7684Blog\u3002\n\n\u53ef\u80fd\u4eca\u5929\u7684\u6709\u70b9\u4e71\uff0c\u597d\u597d\u7406\u7406\uff0c\u8ba4\u771f\u770b\u5b8c\u76f8\u4fe1\u4f60\u4f1a\u61c2\u5f97\n\n\u7136\u800c\uff0c\u6587\u4e2d\u63d0\u5230\u7684\u6240\u6709\u7684\u7b97\u6cd5\u5728\u672c\u4ebaBlog\u4e2d\u90fd\u4f1a\u540e\u671f\u6709\u8bb2\u89e3\u3002~~\u63a8\u8350Blog~~\n\n------------\n\n\u5206\u5272\u7ebf\n\n------------\n\n# \u7b2c\u4e09\u5929\n\n\u5f15\u5b50\uff1a\u6628\u5929\u6211\u4eec~~\u7b80\u5355~~\u8bb2\u4e86\u8bb2\u6700\u5c0f\u751f\u6210\u6811<Dijkstra,Floyd>\u7b97\u6cd5\uff0c\u4eca\u5929\u7684\u8bfe\u7a0b\u5c31\u5f00\u59cb\u5566\uff01\n\n__\u4eca\u5929\u6211\u4eec\u8981\u8bb2\u7684\u662f\uff1a\u6700\u5c0f\u751f\u6210\u6811__\n\n## Top1\uff1a\u6700\u5c0f\u751f\u6210\u6811\u7684\u6982\u5ff5\n\n\u6700\u5c0f\u751f\u6210\u6811\uff0c\u542c\u8d77\u6765\u597d\u50cf\u662f\u6811\u5440\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u662f\u56fe\u8bba\u5462\uff1f\u5176\u5b9e\uff0c\u5904\u7406\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u524d\u7ed9\u51fa\u7684\u4e1c\u897f\uff0c\u5c31\u662f\u4e00\u4e2a\u56fe\uff0c\u53ea\u4e0d\u8fc7\u8fdb\u884c\u64cd\u4f5c\u540e\u8981\u6c42\u53d8\u6210\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7f62\u4e86\u3002\n\n__\u90a3\u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811\u5462\uff1f__\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u8bcd\u8bed\u62c6\u5f00\u6765\u770b\u3002\n\n__\u6811__ \uff0c\u6211\u4eec\u90fd\u597d\u7406\u89e3\uff0c\u7236\u4eb2\u513f\u7838\u7956\u5148\u5565\u7684~~\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd......\u5148\u767e\u5ea6\u5b8c\u6811\u518d\u6765\u770b\u5427~~ \uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u6811\u7684\u7279\u6027\u53ef\u4ee5\u5f97\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n```\n\u6700\u5c0f\u751f\u6210\u6811\u662f\u6ca1\u6709\u73af\u7684\n```\n__\u751f\u6210\u6811__ \uff0c\u5c31\u662f\u4e00\u4e2a\u70b9\u5230\u53e6\u4e00\u4e2a\u70b9\u7684\u8def\u5f84\u662f __\u552f\u4e00\u7684__ \uff0c\uff08\u53ef\u4ee5\u901a\u8fc7\u6811\u7684\u65e0\u73af\u6027\u8d28\u8bc1\u660e\uff09\uff0c\u4e5f\u5c31\u662f __\u4e00\u4e2a\u7528N-1\u6761\u8fb9\u8fde\u63a5\u7684\u6811\uff0c\u4e14\u6240\u6709\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u8def\u5f84\u552f\u4e00__\n\n__\u6700\u5c0f__ \u4ee3\u8868\u6700\u7ec8\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u6700\u5c0f\uff08\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u8fb9\u6743\u7684\u5230\u535a\u4e3b\u7684Blog\u91cc\u9762\u53bb\u770b\u5427\uff09\u3002\n\n------------\n\n\n> \u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u95ee\u9898\u4e86\uff1a\u4e3a\u4ec0\u4e48\u4f1a\u662fN-1\u6761\u8fb9\u5462\uff0c\u800c\u4e0d\u662fN-2\u6216\u8005N+1\u6761\u8fb9\uff1f\n\n  \u65e2\u7136\u8981\u628aN\u4e2a\u70b9\u7528\u6700\u5c11\u6570\u91cf\u7684\u8fb9\uff08\u8fd9\u91cc\u4e0d\u662f\u4e0a\u9762\u201c\u6700\u5c0f\u201d\u7684\u5b9a\u4e49\uff09\u5c06\u6240\u6709\u70b9\u8fde\u63a5\u8d77\u6765\uff0c\uff08\u5ffd\u7565\u8fb9\u6743\uff09\u4e0a\u8fc7\u5c0f\u5b66\u7684\u90fd\u77e5\u9053\uff0c\u5c06\u4e24\u4e2a\u70b9\u8fde\u8d77\u6765\u662f\u8981\u4e00\u6761\u8fb9\uff0c\u4e09\u4e2a\u70b9\u8981\u4e24\u6761\u8fb9\uff0c\u54ea\u91cc\u89c1\u8fc7\u4e09\u4e2a\u70b9\u7528\u4e00\u6761\u8fb9\u8fde\u8d77\u6765\u7684\uff1f\u7528N\u6761\u8fb9\u6216N+1\u6761\u8fb9\uff08\u5373\u4e0a\u8ff0\u4f8b\u5b50\u7684\u4e09\u6761\u8fb9\u6216\u56db\u6761\u8fb9\uff09\uff0c\u81ea\u7136\u5c31\u4f1a\u6d6a\u8d39\u8fb9\u4e86\u3002\n\n------------\n\n  \n  ### \u4e3b\u8981\u8fd8\u662f\u9760\u81ea\u5df1\u52a8\u624b\u753b\u56fe\u601d\u8003\u3002\n  \n## Top2\uff1a\u7b97\u6cd5-Kruskal\n\n\u6982\u5ff5\u6211\u4eec\u8bb2\u5b8c\u4e86\uff0c\u8fdb\u5165\u6b63\u9898\u3002\n\n\u5176\u5b9e\u6700\u5c0f\u751f\u6210\u6811\u8fd8\u6709\u4e2a\u7b97\u6cd5\u53eb\u505aPrim\uff0cPrim\u7b97\u6cd5\u548cKruskal\u7b97\u6cd5\u5728\u4e8e\uff0c\u4e00\u4e2a\u5728\u7a00\u758f\u56fe\u4e2d\u66f4\u5feb\uff0c\u4e00\u4e2a\u5728\u7a20\u5bc6\u56fe\u4e2d\u66f4\u5feb\u3002\u7136\u800c\uff0cKruskal\u5728\u6bd4\u8d5b\u4e2d\u4f1a\u66f4\u597d\u7528\u3002\n\n> \u90a3\u8bb2\u4e86\u8fd9\u4e48\u591a\uff0cKruskal\u5230\u5e95\u600e\u4e48\u7528\u5462\uff1f\n\n\u6211\u4eec\u90fd\u77e5\u9053\u4e86\u6570\u6ca1\u6709\u73af\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6bcf\u6b21\u53d6\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u53ea\u8981\u52a0\u5165\u8fd9\u6761\u8fb9\u4e4b\u540e\u4e0d\u884c\u6210\u73af\uff0c\u5c31\u53ef\u4ee5\u3002\n\n\u6709\u70b9\u50cf\u8d2a\u5fc3\uff0c\u4f46\u662f\u8981\u5224\u65ad\u6709\u6ca1\u6709\u73af\u3002\n\n> \u600e\u4e48\u5224\u65ad\u6709\u73af\u6ca1\u73af\u5462\uff1f\n\n\u2014\u2014\u5e76\u67e5\u96c6\n\n\u6240\u4ee5\u4ee3\u7801\u5c31\u5f88\u7b80\u7b54\u5566\uff01\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 5000 + 10;\n\nstruct Line{\n\tint x, y;\n\tint dis;\n\tbool operator < (const Line& next) const {\n        return dis > next.dis;\n    }\n};\npriority_queue<Line> line;\nint n, m, now;\nint fa[MAXN];\nint ans;\n\ninline int read(){\n    int f = 1, x = 0;\n    char c = getchar();\n\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n            f = -1;\n        c = getchar();\n    }\n\n    while (c >= '0' && c <= '9')\n    {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n\n    return f * x;\n}\n\nint find(int x){\n\tif(fa[x] == x)return x;\n\treturn fa[x] = find(fa[x]);\n}\n\nint main(){\n\tn = read(),m = read(); \n\tfor(int i = 1;i <= m; i++){\n\t\tint x,y,z;\n\t\tx = read(),y = read(),z = read();\n\t\tLine tot = {x,y,z};\n\t\tline.push(tot);\n\t}\n\t\n\tfor(int i = 1;i <= n; i++){\n\t\tfa[i] = i;\n\t}\n\t\n\twhile(!line.empty()){\n\t\tLine tot = line.top();\n\t\tline.pop();\n\t\tint nx = tot.x, ny = tot.y;\n\t\tif(find(nx) == find(ny)){\n\t\t\tcontinue;\n\t\t} \n\t\tfa[find(nx)] = find(ny);\n\t\tans += tot.dis;\n\t\tnow++;\n\t\tif(now == n - 1){\n\t\t\tprintf(\"%d\",ans);\n\t\t\treturn 0;\n\t\t}\n\t} \n\t\n\tputs(\"orz\");\n\treturn 0;\n}\n```\n",
        "postTime": 1560246379,
        "uid": 37682,
        "name": "\u5fa1\u00b7Dragon",
        "ccfLevel": 0,
        "title": "\u56fe\u8bba-\u6700\u5c0f\u751f\u6210\u6811<Kruskal>"
    },
    {
        "content": "## \u6700\u5c0f\u751f\u6210\u6811\n\n[\u70b9\u51fb\u5c31\u9001\u7384\u94c1\u91cd\u5251](https://www.luogu.org/problem/P3366)(\u9898\u76ee\u4f20\u9001)\n\n**\u751f\u6210\u6811\u7684\u6982\u5ff5**\n\n- \u5728\u56fe\u8bba\u4e2d,\u5982\u679c\u8fde\u901a\u56feG\u7684\u4e00\u4e2a\u5b50\u56fe\u662f\u4e00\u68f5\u5305\u542b\u6240\u6709\u9876\u70b9\u7684\u6811\uff0c\u5219\u8be5\u5b50\u56fe\u79f0\u4e3aG\u7684\u751f\u6210\u6811(SpanningTree).\n\n- \u751f\u6210\u6811\u662f\u8fde\u901a\u56fe\u7684\u5305\u542b\u56fe\u4e2d\u7684\u6240\u6709\u9876\u70b9\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe.\n\n- \u56fe\u7684\u751f\u6210\u6811\u4e0d\u60df\u4e00.\u4ece\u4e0d\u540c\u7684\u9876\u70b9\u51fa\u53d1\u8fdb\u884c\u904d\u5386\uff0c\u53ef\u4ee5\u5f97\u5230\u4e0d\u540c\u7684\u751f\u6210\u6811.\n\n\u5e38\u7528\u7684\u751f\u6210\u6811\u7b97\u6cd5\u6709DFS\u751f\u6210\u6811,BFS\u751f\u6210\u6811,PRIM \u6700\u5c0f\u751f\u6210\u6811\u548cKruskal\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5.\n\n### \u666e\u91cc\u59c6\u7b97\u6cd5\uff08Prim\u7b97\u6cd5\uff09\n\n\u56fe\u8bba\u4e2d\u7684\u4e00\u79cd\u7b97\u6cd5,\u53ef\u5728\u52a0\u6743\u8fde\u901a\u56fe\u91cc\u641c\u7d22\u6700\u5c0f\u751f\u6210\u6811.\u610f\u5373\u7531\u6b64\u7b97\u6cd5\u641c\u7d22\u5230\u7684\u8fb9\u5b50\u96c6\u6240\u6784\u6210\u7684\u6811\u4e2d,\u4e0d\u4f46\u5305\u62ec\u4e86\u8fde\u901a\u56fe\u91cc\u7684\u6240\u6709\u9876\u70b9(\u82f1\u8bed:Vertex (graph theory)),\u4e14\u5176\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u4ea6\u4e3a\u6700\u5c0f.\u8be5\u7b97\u6cd5\u4e8e1930\u5e74\u7531\u6377\u514b\u6570\u5b66\u5bb6\u6c83\u4f0a\u6377\u8d6b\u2022\u4e9a\u5c14\u5c3c\u514b(\u82f1\u8bed:Vojt\u011bch Jarn\u00edk)\u53d1\u73b0\uff1b\u5e76\u57281957\u5e74\u7531\u7f8e\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7f57\u4f2f\u7279\u2022\u666e\u91cc\u59c6(\u82f1\u8bed:Robert C. Prim)\u72ec\u7acb\u53d1\u73b0\uff1b1959\u5e74,\u827e\u5179\u683c\u2022\u8fea\u79d1\u65af\u5f7b\u518d\u6b21\u53d1\u73b0\u4e86\u8be5\u7b97\u6cd5.\u56e0\u6b64,\u5728\u67d0\u4e9b\u573a\u5408,\u666e\u91cc\u59c6\u7b97\u6cd5\u53c8\u88ab\u79f0\u4e3aDJP\u7b97\u6cd5,\u4e9a\u5c14\u5c3c\u514b\u7b97\u6cd5\u6216\u666e\u91cc\u59c6\uff0d\u4e9a\u5c14\u5c3c\u514b\u7b97\u6cd5.\n\n**\u7b97\u6cd5\u63cf\u8ff0**\n\n1).\u8f93\u5165,\u4e00\u4e2a\u52a0\u6743\u8fde\u901a\u56fe,\u5176\u4e2d\u4ee4\u9876\u70b9\u96c6\u5408\u4e3aE,\u8fb9\u96c6\u5408\u4e3aW.\n\n2).\u5c06dis\u6570\u7ec4(\u751f\u6210\u6811\u5230\u4efb\u4e00\u4e2a\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb)\u521d\u59cb\u5316\u5230\u6700\u5927.\n\n3).(\u4e00\u822c)\u627e\u9876\u70b91\u4e3a\u8d77\u59cb\u70b9,\u5b58\u5230\u9012\u51cf\u7684\u6570\u636e\u7ed3\u6784(\u4f18\u5148\u961f\u5217,\u5806,multiset.......)\u4e2d,\u4ee5\u4fbf\u627e\u5230\u6743\u503c\u6700\u5c0f\u7684\u70b9.\u4e4b\u540e\u5c06\u5176\u6254\u6389,\u4ece\u8be5\u70b9\u5f00\u59cb\u5c06\u80fd\u5230\u7684\u70b9\u8ddd\u79bb\u66f4\u65b0\u4e00\u4e0b.\n\n4).\u91cd\u590d\u4e0b\u5217\u64cd\u4f5c3,\u76f4\u5230\u6570\u636e\u7ed3\u6784\u4e3a\u7a7a\u6216\u6240\u6709\u7684\u70b9\u90fd\u5df2\u8bbf\u95ee\u8fc7.\n\n5).\u8f93\u51fa.\n\n\n**\u5ea6\u5a18\u7684\u63cf\u8ff0 ~~(\u6709\u70b9\u7384\u5e7b)~~:**\n\n1).\u8f93\u5165:\u4e00\u4e2a\u52a0\u6743\u8fde\u901a\u56fe,\u5176\u4e2d\u9876\u70b9\u96c6\u5408\u4e3aV,\u8fb9\u96c6\u5408\u4e3aE;\n\n2).\u521d\u59cb\u5316:Vnew = {x},\u5176\u4e2dx\u4e3a\u96c6\u5408V\u4e2d\u7684\u4efb\u4e00\u8282\u70b9(\u8d77\u59cb\u70b9),Enew = {},\u4e3a\u7a7a;\n\n3).\u91cd\u590d\u4e0b\u5217\u64cd\u4f5c,\u76f4\u5230Vnew = V:\n\na.\u5728\u96c6\u5408E\u4e2d\u9009\u53d6\u6743\u503c\u6700\u5c0f\u7684\u8fb9<u, v>,\u5176\u4e2du\u4e3a\u96c6\u5408Vnew\u4e2d\u7684\u5143\u7d20,\u800cv\u4e0d\u5728Vnew\u96c6\u5408\u5f53\u4e2d,\u5e76\u4e14v\u2208V(\u5982\u679c\u5b58\u5728\u6709\u591a\u6761\u6ee1\u8db3\u524d\u8ff0\u6761\u4ef6\u5373\u5177\u6709\u76f8\u540c\u6743\u503c\u7684\u8fb9,\u5219\u53ef\u4efb\u610f\u9009\u53d6\u5176\u4e2d\u4e4b\u4e00);\n\nb.\u5c06v\u52a0\u5165\u96c6\u5408Vnew\u4e2d,\u5c06<u, v>\u8fb9\u52a0\u5165\u96c6\u5408Enew\u4e2d;\n\n4).\u8f93\u51fa:\u4f7f\u7528\u96c6\u5408Vnew\u548cEnew\u6765\u63cf\u8ff0\u6240\u5f97\u5230\u7684\u6700\u5c0f\u751f\u6210\u6811.\n\n![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571721928634&di=66bfafe3e1b62f24889196c2c0f5f52d&imgtype=0&src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2F20180607005817263640.png)\n\n### Prim\u4ee3\u7801\n\n\u7528\u90bb\u63a5\u8868\u4f18\u5316\u4e0edijskra\u795e\u4f3c\n\n```\n#include<bits/stdc++.h>\n#define R register int//\u4f18\u5316,\u53ef\u5ffd\u7565\n#define P pair <int,int>\nusing namespace std;\nint k,n,m;\nint cnt,sum,dis[10005],vis[10005];\nvector <int> E[200005];//\u5b58\u70b9\nvector <int> W[200005];//\u5b58\u8fb9\ninline void add(int u,int v,int w) {\n\tE[u].push_back(v);//\u5b58\u70b9\n\tW[u].push_back(w);//\u5b58\u8fb9\n}\npriority_queue <P,vector<P>,greater<P> > q;//\u9012\u51cf\ninline void prim() {//\u795e\u4f3cdijskra\n\tmemset(dis,127,sizeof(dis));//\u521d\u59cb\u5316\n\tdis[1]=0;//\u521d\u59cb\u5316\n\tq.push(make_pair(dis[1],1));//\u521d\u59cb\u5316\n\twhile(!q.empty()&&cnt<n) {\n\t\tint d=q.top().first,u=q.top().second;\n\t\tq.pop();\n\t\tif(vis[u]) continue;//\u8bbf\u95ee\u8fc7\u5c31\u4e0d\u8bbf\u95ee\u4e86\n\t\tcnt++;\n\t\tsum+=d;//\u6709\u5c31\u52a0\n\t\tvis[u]=1;\n\t\tfor(R i=0; i<E[u].size(); i++)//dijskra\u8fd9\u91cc\u662f\u5faa\u73af\u627e\u4e2d\u754c\u70b9,\u800c\u8fd9\u91cc\u5219\u76f4\u63a5\u627e\u4e0e\u8be5\u70b9\u76f8\u90bb\u7684\u8fb9,\u5237\u65b0\u4e00\u904d\u8ddd\u79bb\n\t\t   if(W[u][i]<dis[E[u][i]]){\n\t\t\tdis[E[u][i]]=W[u][i]\uff1b\n               \t\tq.push(make_pair(dis[E[u][i]],E[u][i]));\n    \t\t}\n\t}\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(R i=1; i<=m; i++) {\n\t\tint a,b,c;\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tadd(a,b,c);\n\t\tadd(b,a,c);\n\t}\n\tprim();\n\tif (cnt==n)printf(\"%d\",sum);\n\telse printf(\"orz\");\n}\n```\n\n### \u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5(Kruskal)\n\nKruskal\u7b97\u6cd5\u662f\u4e00\u79cd\u7528\u6765\u67e5\u627e\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5,\u7531Joseph Kruskal\u57281956\u5e74\u53d1\u8868.\u7528\u6765\u89e3\u51b3\u540c\u6837\u95ee\u9898\u7684\u8fd8\u6709Prim\u7b97\u6cd5\u548cBoruvka\u7b97\u6cd5\u7b49.\u4e09\u79cd\u7b97\u6cd5\u90fd\u662f\u8d2a\u5fc3\u7b97\u6cd5\u7684\u5e94\u7528.\u548cBoruvka\u7b97\u6cd5\u4e0d\u540c\u7684\u5730\u65b9\u662f,Kruskal\u7b97\u6cd5\u5728\u56fe\u4e2d\u5b58\u5728\u76f8\u540c\u6743\u503c\u7684\u8fb9\u65f6\u4e5f\u6709\u6548.\n\n**\u601d\u60f3**\n\n\u5148\u6784\u9020\u4e00\u4e2a\u53ea\u542b n \u4e2a\u9876\u70b9\u3001\u800c\u8fb9\u96c6\u4e3a\u7a7a\u7684\u5b50\u56fe,\u628a\u5b50\u56fe\u4e2d\u5404\u4e2a\u9876\u70b9\u770b\u6210\u5404\u68f5\u6811\u4e0a\u7684\u6839\u7ed3\u70b9,\u4e4b\u540e,\u4ece\u7f51\u7684\u8fb9\u96c6 E \u4e2d\u9009\u53d6\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9,\u82e5\u8be5\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5206\u5c5e\u4e0d\u540c\u7684\u6811,\u5219\u5c06\u5176\u52a0\u5165\u5b50\u56fe,\u5373\u628a\u4e24\u68f5\u6811\u5408\u6210\u4e00\u68f5\u6811,\u53cd\u4e4b,\u82e5\u8be5\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5df2\u843d\u5728\u540c\u4e00\u68f5\u6811\u4e0a,\u5219\u4e0d\u53ef\u53d6,\u800c\u5e94\u8be5\u53d6\u4e0b\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u518d\u8bd5\u4e4b.\u4f9d\u6b21\u7c7b\u63a8,\u76f4\u5230\u68ee\u6797\u4e2d\u53ea\u6709\u4e00\u68f5\u6811,\u4e5f\u5373\u5b50\u56fe\u4e2d\u542b\u6709 n-1 \u6761\u8fb9\u4e3a\u6b62.\n\n\u5176\u5b9e\u5c31\u662f\u8d2a\u5fc3.\n\n**\u7b97\u6cd5\u63cf\u8ff0**\n\n1).\u65b0\u5efa\u56feG,G\u4e2d\u62e5\u6709\u539f\u56fe\u4e2d\u76f8\u540c\u7684\u8282\u70b9,\u4f46\u6ca1\u6709\u8fb9\uff1b\n\n2).\u5c06\u539f\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b\n\n3).\u4ece\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb,\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u8282\u70b9\u4e8e\u56feG\u4e2d\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\n\u91cf\u4e2d,\u5219\u6dfb\u52a0\u8fd9\u6761\u8fb9\u5230\u56feG\u4e2d\uff1b\n\n4).\u91cd\u590d3,\u76f4\u81f3\u56feG\u4e2d\u6240\u6709\u7684\u8282\u70b9\u90fd\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d.\n\n**wait!!**\n\n\u8bf7\u5148\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u6570\u636e\uff1a\n\n```\n5 5\n1 5 5\n5 6 8\n6 7 15\n7 1 30\n8 9 200\n```\n\n\u8fd9\u4e2a\u6570\u636e\u5df2\u7ecf\u628a\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e86,\u6682\u65f6\u4e0d\u7528\u518d\u8003\u8651.\n\n\u6211\u4eec\u5148\u6309\u8d2a\u5fc3\u7684\u60f3\u6cd5\u6765\u601d\u8003:\n\n1\u3001\u8fde\u63a51\u57ce\u5e02\u548c5\u57ce\u5e02. \n\n2\u3001\u8fde\u63a55\u57ce\u5e02\u548c6\u57ce\u5e02. \n\n3\u3001\u8fde\u63a56\u57ce\u5e02\u548c7\u57ce\u5e02.\n\n4\u3001\u8fde\u63a57\u57ce\u5e02\u548c1\u57ce\u5e02.\n\n\u5230\u8fd9\u91cc\uff0c\u5c31\u51fa\u95ee\u9898\u4e86,\u5b8c\u6210\u8fd94\u6b65,\u4fbf\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u65e0\u6cd5\u751f\u6210\u6700\u5c0f\u751f\u6210\u6811\u4e86.\n\n\u6240\u4ee5\u6211\u4eec\u8981\u53bb\u5224\u65ad\u662f\u5426\u4f1a\u5f62\u6210\u73af,\u7528\u5e76\u67e5\u96c6. (P3367  [\u5e76\u67e5\u96c6](https://www.luogu.org/problem/P3367))\n\n![\u7279\u7ecf\u5178\u7684\u56fe\u89e3](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1571722553609&di=ba133c4cb5711a184ff19aa0dcd426cd&imgtype=0&src=http%3A%2F%2Fwww.lwlwq.com%2Fxiaowei%2Fhome%2Fuploads%2F2015%2F03%2Fkruskal-procedure.png)\n\n### Kruskal\u4ee3\u7801\n\n\u4e0d\u591a\u505a\u89e3\u91ca.\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct point {\n    int l,r,w;//w\u662f\u8def\u5f84\u957f\u5ea6\n};\npoint a[200005];\nint n,m,s;\nint fa[10005];\nint find(int x) {//\u5e76\u67e5\u96c6\u7684\u6a21\u677f,\u4e00\u76f4\u5f80\u4e0a\u627e\u7236\u8282\u70b9\n    if(x==fa[x])return x;\n    return fa[x]=find(fa[x]);\n}\nbool cmp(point a,point b) {//\u4ee5\u8def\u5f84\u957f\u5ea6\u6392\u5e8f\n    return a.w<b.w;\n}\nvoid dfs() {\n    int cnt=0;\n    for(int i=1; i<=m; i++) {\n        int v=find(a[i].l),u=find(a[i].r);//\u627e\u7236\u8282\u70b9,\u770b\u662f\u5426\u540c\u6839\n        if(v==u)continue;//\u5df2\u7ecf\u88ab\u63a5\u5728\u4e86\u6811\u4e0a,\u5c31\u4e0d\u7528\u63a5\u4e86\n        ++cnt;\n        s+=a[i].w;\n        fa[u]=v;\n        if(cnt==n-1) return;\n    }\n}\nint main() {\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1; i<=n; i++)\n    \tfa[i]=i;//\u521d\u59cb\u5316,\u81ea\u5df1\u662f\u81ea\u5df1\u7684\u7236\u8282\u70b9\n    for(int i=1; i<=m; i++)\n        cin>>a[i].l>>a[i].r>>a[i].w;\n    sort(a+1,a+m+1,cmp);//\u6392\u5e8f\n    dfs();\n    cout<<s;\n    return 0;\n}\n```\n**prim\u4e0ekruskal\u7684\u6bd4\u8f83**\n\nprim:\u8be5\u7b97\u6cd5\u662f\u76f4\u63a5\u67e5\u627e,\u591a\u6b21\u5bfb\u627e\u90bb\u8fb9\u7684\u6743\u91cd\u6700\u5c0f\u503c,\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2),\u4e0e\u56fe\u4e2d\u8fb9\u6570\u65e0\u5173,\u8be5\u7b97\u6cd5\u9002\u5408\u4e8e\u7a20\u5bc6.\n\nkruskal:\u8be5\u7b97\u6cd5\u5148\u5bf9\u6743\u91cd\u6392\u5e8f\u540e\u67e5\u627e,\u9700\u8981\u5bf9\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u8bbf\u95ee,\u6240\u4ee5kruskal\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u548c\u8fb9(e)\u53c8\u5173\u7cfb,\u53ef\u4ee5\u8bc1\u660e\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(eloge).\u9002\u5408\u7a00\u758f\u56fe\n\n\u6240\u4ee5\u8bf4,Kruskal\u5728\u7b97\u6cd5\u6548\u7387\u4e0a\u662f\u6bd4Prim\u5feb\u7684,\u4f46\u5404\u6709\u5404\u7684\u4f18\u70b9.\n\n\u4e0a\u9762\u8fd8\u63d0\u5230\u4e86\u4e00\u79cd\u53e4\u8001\u7684\u7b97\u6cd5Boruvka,(Bor\u016fvka),\u5df2\u6709\u5927\u4f6c\u8bb2\u89e3,\u4fbf\u4e0d\u518d\u8d58\u8ff0.\n\n\nPS:\n\n\u987a\u4fbf\u9644\u4e0aPrim+\u5806\u4f18\u5316\n\n~~\u600e\u4e48\u957f,\u8fd8\u4e0d\u5982\u7528\u4f18\u5148\u961f\u5217\u5462~~\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n\tint next;\n\tint c;\n\tint zhi;\n} e[200005];\nint last[2000005],dis[2000005],n,m,ans,k;\nstruct node {\n\tint num;\n\tnode() {}\n\tnode(int h) {\n\t\tnum=h;\n\t}\n\tbool operator <(const node & p)const {\n\t\treturn dis[p.num]<dis[num];\n\t}\n};\nint located[2000005];\nint heap[2000005];\nint heap_size;\ninline void put(int d) {//\u624b\u5199 \n\tint now,next;\n\theap[++heap_size]=d;\n\tnow=heap_size;\n\tlocated[d]=now;\n\twhile(now>1) {\n\t\tnext=now>>1;\n\t\tif(dis[heap[now]]>=dis[heap[next]])break;\n\t\tlocated[d]=next;\n\t\tlocated[heap[next]]=now;\n\t\tswap(heap[now],heap[next]);\n\t\tnow=next;\n\t}\n\treturn;\n}\ninline void change(int d) {\n\tint now,next;\n\tnow=located[d];\n\twhile(now>1) {\n\t\tnext=now>>1;\n\t\tif(dis[heap[now]]>=dis[heap[next]])break;\n\t\tlocated[d]=next;\n\t\tlocated[heap[next]]=now;\n\t\tswap(heap[now],heap[next]);\n\t\tnow=next;\n\t}\n\treturn;\n}\ninline int get() {\n\tint now,next,res;\n\tres=heap[1];\n\theap[1]=heap[heap_size--];\n\tnow=1;\n\tlocated[heap[1]]=1;\n\tlocated[res]=0;\n\twhile(now*2<=heap_size) {\n\t\tnext=now*2;\n\t\tif(next<heap_size&&dis[heap[next+1]]<dis[heap[next]])++next;\n\t\tif(dis[heap[now]]<=dis[heap[next]])break;\n\t\tlocated[heap[now]]=next;\n\t\tlocated[heap[next]]=now;\n\t\tswap(heap[next],heap[now]);\n\t\tnow=next;\n\t}\n\treturn res;\n}\nint main() {\n\tcin>>n>>m;\n\tfor(int i=1; i<=m; i++) {\n\t\tint a,b,c;\n\t\tcin>>a>>b>>c;\n\t\te[++k].next=b;\n\t\te[k].c=c;\n\t\te[k].zhi=last[a];\n\t\tlast[a]=k;\n\t\te[++k].next=a;\n\t\te[k].c=c;\n\t\te[k].zhi=last[b];\n\t\tlast[b]=k;\n\t}\n\tfor(int i=2; i<=n; i++)\n\t\tdis[i]=INT_MAX;\n\tfor(int j=last[1]; j; j=e[j].zhi) {\n\t\tint y=e[j].next;\n\t\tint c=e[j].c;\n\t\tif(c<dis[y])dis[y]=c;\n\t}\n\tfor(int i=2; i<=n; ++i)\n\t\tput(i);\n\tfor(int i=1; i<=n-1; ++i) {\n\t\tint x=get();\n\t\tans+=dis[x];\n\t\tfor(int j=last[x]; j; j=e[j].zhi) {\n\t\t\tint y=e[j].next;\n\t\t\tint c=e[j].c;\n\t\t\tif(c<dis[y]) {\n\t\t\t\tdis[y]=c;\n\t\t\t\tchange(y);\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n\n```\n\u5e0c\u671b\u5927\u5bb6\u80fd\u7406\u89e3.\n\n(\u0e51\u2022\u0300\u3142\u2022\u0301)\u0648\u2727,\u70b9\u4e2a\u9876\u5457\n\n",
        "postTime": 1571714422,
        "uid": 251809,
        "name": "wick",
        "ccfLevel": 5,
        "title": "P3366 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811 \u9898\u89e3"
    },
    {
        "content": "# $kruskal$\n\nkruskal\u7b80\u5355\uff0ckruskal\u597d\u61c2\n\n\u5176\u5b9e\u8fd9\u9898\u8bc4\u5206\u6709\u70b9\u4f4e\uff0c\u5927\u6982\u662f\u9ec4\u9898\u5dee\u4e0d\u591a\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u4ece\u5934\u5f00\u59cb\u8bb2\uff0c\u4ece\u5e76\u67e5\u96c6\u8bb2\u5230\u5e95\n\n\u597d\u4e86\uff0c\u770b\u9898\u3002\n\n\u8bf6\uff0c\u9898\u9762\u600e\u4e48\u6ca1\u8bb2\u6700\u5c0f\u751f\u6210\u6811\u662f\u4ec0\u4e48\uff1f\n\n**\u6700\u5c0f\u751f\u6210\u6811\uff1a\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u539f\u56fe\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u5305\u542b\u539f\u56fe\u4e2d\u7684\u6240\u6709 n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u6709\u4fdd\u6301\u56fe\u8fde\u901a\u7684\u6700\u5c11\u7684\u8fb9\u3002**\n\n--\u767e\u5ea6\u767e\u79d1\n\n\u7528\u4eba\u8bdd\u8bf4\uff1a**\u628a\u6240\u6709\u70b9\u90fd\u4e32\u8d77\u6765\u4e14\u957f\u5ea6\u6700\u77ed\u7684\u4e00\u4e2a\u7f51**\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n**$kruskal$**:\n\n\u4f9d\u636e\u6743\u503c\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u53d6\u51fa\u6bcf\u6761\u8fb9\n\n\u5982\u679c\u5df2\u7ecf\u53d6\u51fa\u7684\u6240\u6709\u8fb9\u628a\u6240\u6709\u70b9\u90fd\u4e32\u8d77\u6765\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u7ed3\u675f\uff0c\u8f93\u51fa\u7b54\u6848\n\n\u6211\u6765\u76d7\u56fe\u4e86\uff01\u56fe\u7247\u8f6c\u81ea[Taday_Bule_Rainbow\u7684\u9898\u89e3](https://www.luogu.org/blog/tbr-blog/solution-p3366)\n\n![](https://cdn.luogu.com.cn/upload/pic/28091.png)\n\n\u770b\u8d77\u6765\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\u90a3\u4e48\u6211\u4eec\u4e00\u6b65\u4e00\u6b65\u5206\u6790\n\n\u524d\u5411\u661f\u5b58\u56fe\uff0c\u7ed3\u6784\u4f53\u6392\u5e8f\uff0c\u5f88\u7b80\u5355\u4e0d\u8bf4\u4e86\n\n\u4e3b\u8981\u662f\u600e\u4e48\u5224\u65ad\u5f53\u524d\u662f\u5426\u8054\u901a\n\n\u90a3\u4e48\u53c8\u8bb2\u5230\u4e86\uff1a**\u5e76\u67e5\u96c6**\n\n\u5e76\u67e5\u96c6\u662f\u4ec0\u4e48\u5462\uff1f[\u6a21\u677f\u9898](https://www.luogu.org/problem/P3367)\n\n\u5176\u5b9e\u975e\u5e38\u597d\u7406\u89e3\uff0c\u4e00\u4e2a\u4e00\u4e2a\u66b4\u641c\u663e\u7136\u662f\u4e0d\u53ef\u884c\u7684\n\n\u6211\u4eec\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u4eba\u5b9a\u4e00\u4e2a\u7956\u5148\uff0c\u8fd9\u6837\u5224\u65ad\u5c31\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u4e24\u4eba\u7684\u7956\u5148\u662f\u5426\u4e00\u6837\n\n\u9996\u5148\u521d\u59cb\u5316\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u7684\u7956\u5148\u5f00\u59cb\u90fd\u7b49\u4e8e\u81ea\u5df1\n\n\u7136\u540e\n\n```\nint find(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=find(f[x]);\n   //\u8def\u5f84\u538b\u7f29\n}\n```\n\u90a3\u4e48\u8def\u5f84\u538b\u7f29\u662f\u4e2a\u5565\u5462\uff1f\u6bd4\u5982\u8bf4\u4f60\u8981\u627e1\u7684\u7956\u5148\uff0c\u7ed3\u679c\u4f60\u627e\u5230\u4e862\uff0c\u7136\u540e\u53c8\u627e\u5230\u4e863\uff0c\u7136\u540e\u624d\u627e\u5230\u6700\u7ec8\u7956\u51484\n\n\u90a3\u4e482\u548c3\u7684\u7956\u5148\u90fd\u662f4\u4e86\n\n\u6211\u4eec\u76f4\u63a5\u5728\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u5b58\u5c31\u884c\u4e86\n\n\u73b0\u5728\u6211\u4eec\u76f4\u63a5\u4e0a\u4ee3\u7801\uff0c\u6240\u6709\u7684\u90fd\u5df2\u7ecf\u6ce8\u91ca\u597d\u4e86\uff0c\u5e94\u8be5\u5f88\u597d\u7406\u89e3\uff08\u9003\n\n```\n#include<bits/stdc++.h>\n#define N 200005\nusing namespace std;\nint n,m,f[N],ans,bs,pd;\nstruct Edge{\n\tint u,v,w;\n}e[N];//\u524d\u5411\u661f\uff0c\u4f46\u662f\u6ca1\u6709add\u51fd\u6570\uff0c\u5f88\u4e0d\u9519 \nint find(int x){\n\tif(f[x]==x) return x;\n\treturn f[x]=find(f[x]);\n}//\u5e76\u67e5\u96c6\uff0c\u4e0a\u9762\u8bb2\u8fc7\u4e86 \nbool cmp(Edge x,Edge y){\n\treturn x.w<y.w;//\u6309\u6743\u503c\u6392\u5e8f \n}//\u7ed3\u6784\u4f53\u6392\u5e8f\uff0c\u5f88\u5b9e\u7528\u7684\u6280\u80fd \nint main(){\n\tcin>>n>>m;\n\tfor(register int i=1;i<=n;i++) f[i]=i;//\u521d\u59cb\u5316 \n\tfor(register int i=0;i<m;i++) cin>>e[i].u>>e[i].v>>e[i].w;//\u8f93\u5165 \n\tsort(e,e+m,cmp);//\u6392\u5e8f \n\tfor(register int i=0;i<m;i++){\n\t\tint fv=find(e[i].v),fu=find(e[i].u);//\u6211\u4eec\u53d6\u51fa\u5f53\u524d\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u6240\u5728\u7684\u7956\u5148 \n\t\tif(fv==fu) continue;//\u5982\u679c\u5b83\u4eec\u76f8\u540c\uff0c\u5c31\u8bf4\u660e\u5b83\u4eec\u8054\u901a\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u52a0\u8fd9\u6761\u8fb9\u4e86 \n\t\tf[fv]=fu;//\u628a\u7956\u5148\u5b58\u8fdb\u53bb \n\t\tans+=e[i].w;//\u603b\u7b54\u6848+=\u8fd9\u6761\u8fb9\u7684\u6743\u503c \n\t\tif(++bs==n-1){//\u8fde\u901an\u4e2a\u70b9\u9700\u8981n-1\u6761\u8fb9 \n\t\t\tpd=1;//\u5224\u65ad\u662f\u5426\u8fde\u901a\u7684\u4e1c\u897f \n\t\t\tbreak;\t\n\t\t} \n\t}\n\tif(!pd) cout<<\"orz\";//\u5982\u679c\u4e0d\u8fde\u901a\u5c31\u8f93\u51fa\uff08\u8fd9\u9898\u597d\u50cf\u6ca1\u6709\u8fd9\u4e2a\u6570\u636e \n\telse cout<<ans;\n\treturn 0;//\u6109\u5feb\u5730\u7ed3\u675f\u4e86 \n}\n```\n# \u5199\u4e86\u86ee\u4e45\uff0c\u6c42\u8fc7QAQ",
        "postTime": 1571404173,
        "uid": 123936,
        "name": "hfee",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\uff0c\u662f\u6700\u5c0f\u751f\u6210\u6811\u7684\u6a21\u677f\u9898\u3002  \n\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u89e3\u51b3\u6700\u5c0f\u751f\u6210\u6811\u7684\u5e38\u7528\u7b97\u6cd5\u2014\u2014$Kruskal$\u3002  \n\n## Kruskal\u7b97\u6cd5\u6982\u8ff0  \nKruskal\u7b97\u6cd5\u975e\u5e38\u6613\u4e8e\u7406\u89e3\uff0c\u9700\u8981\u501f\u52a9\u5e76\u67e5\u96c6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b\uff1a  \n$\\ \\ \\ \\ \\ \\ \\ $\u65e2\u7136\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u53d6\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u5bb9\u6613\u63d0\u51fa\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a  \n$\\ \\ \\ \\ \\ \\ \\ $\u6211\u4eec\u53ea\u8981\u628a\u8fb9\u6309\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff08\u5bf9\u5e94\u201c\u6700\u5c0f\u201d\uff09\uff0c  \n$\\ \\ \\ \\ \\ \\ \\ $\u968f\u540e\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u770b\u8fd9\u5404\u8fb9\u6240\u5bf9\u5e94\u7684\u4e24\u4e2a\u8282\u70b9\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u5982\u679c\u4e0d\u5728\uff08\u5bf9\u5e94\u201c\u751f\u6210\u6811\u201d\uff0c\u6811\u9700\u8981\u65e0\u73af\uff09\uff0c\u5c31\u5408\u5e76\u4e24\u4e2a\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u96c6\u5408\uff0c\u5e76\u5c06\u7b54\u6848\u52a0\u4e0a\u8fb9\u6743\u3002  \n\n\u5177\u4f53\u6765\u8bf4\uff0c\u662f\u8fd9\u6837\u7684\uff1a  \n1. \u5c06\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\uff08\u4e24\u70b9\u4e00\u8fb9\uff09\u5b58\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\u5185\uff0c\u5c06\u8be5\u6570\u7ec4\u6309\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\uff1b\n2. \u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff08\u6240\u6709\u8282\u70b9\u7684\u96c6\u5408\u4ee3\u8868\u90fd\u662f\u5176\u672c\u8eab\uff09\uff1b\n3. \u904d\u5386\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u8be5\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u5185\uff08\u5982\u679c\u5728\u4e00\u4e2a\u96c6\u5408\u5185\u8bf4\u660e\u8fd9\u4e24\u70b9\u5df2\u7ecf\u76f8\u8fde\uff0c\u518d\u52a0\u8fb9\u5c06\u4f1a\u51fa\u73b0\u73af\uff09\uff0c\u5c31\u5c06\u4e24\u70b9\u6240\u5bf9\u5e94\u7684\u96c6\u5408\u5408\u5e76\uff0c\u5e76\u5c06\u7b54\u6848\u52a0\u4e0a\u8fb9\u6743\uff1b\n4. \u6700\u540e\u8f93\u51fa\u7b54\u6848\u3002  \n\n\u6211\u4eec\u6765\u770bAC\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define MAX_N 5000+5\n#define MAX_M 200000+5\nstruct edge{\n\tint start,end;\n\tint length;\n}Edge[MAX_M];\nint fa[MAX_N];\nint n,m;\nbool cmp(edge a,edge b){//cmp\u51fd\u6570\uff0c\u5c06\u6bcf\u6761\u8fb9\u6309\u8fb9\u6743\u5347\u5e8f\u6392\u5e8f\n\treturn a.length<b.length;\n}\nvoid init(){//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\uff0c\u6240\u6709\u8282\u70b9\u7684\u96c6\u5408\u4ee3\u8868\u90fd\u662f\u5176\u672c\u8eab\n\tfor (int i=1;i<=n;i++)\n\t\tfa[i]=i;\n}\nint get(int x){return fa[x]==x?x:fa[x]=get(fa[x]);} \n//\u6c42\u6bcf\u4e2a\u70b9\u7684\u96c6\u5408\u4ee3\u8868\n//\u6ce8\u610f\u8fd9\u91cc\u7684\u8def\u5f84\u538b\u7f29\uff08fa[x]=get(fa[x])\uff09\uff0c\u8fd9\u80fd\u5927\u5e45\u5ea6\u51cf\u5c11\u65f6\u95f4\nint Kruskal(){\n\tsort(Edge+1,Edge+m+1,cmp);//\u6392\u5e8f\n\tint sum=0;\n\tinit();//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n\tfor (int i=1;i<=m;i++){//\u904d\u5386\u6bcf\u6761\u8fb9\n\t\tint start=Edge[i].start,end=Edge[i].end;\n\t\tstart=get(start);end=get(end);\n\t\tif (start!=end){//\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u5185\n\t\t\tfa[end]=start;//\u5408\u5e76\n\t\t\tsum+=Edge[i].length;//\u7b54\u6848\u52a0\u4e0a\u8fb9\u6743\n\t\t}\n\t}\n\treturn sum;//\u8fd4\u56de\uff0c\u5230\u4e3b\u51fd\u6570\u8f93\u51fa\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor (int i=1;i<=m;i++)\n\t\tscanf(\"%d%d%d\",&Edge[i].start,&Edge[i].end,&Edge[i].length);//\u8f93\u5165\u6bcf\u6761\u8fb9\u7684\u4fe1\u606f\n\tprintf(\"%d\\n\",Kruskal());//\u8f93\u51fa\n\treturn 0;\n}\n```",
        "postTime": 1570890793,
        "uid": 113521,
        "name": "muyang_233",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "~~\u8bf7\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u7a0b\u5e8f~~\n# \u672c\u4eba\u4e60\u60ef\u4f7f\u7528\u5927\u62ec\u53f7{}\uff0c\u8bf7\u8c05\u89e3(*\uffe3\ufe36\uffe3)\n**\u6700\u5c0f\u751f\u6210\u6811\uff1a**\n\u8fde\u901a\u56fe\u6709\u4e0d\u540c\u7684\u751f\u6210\u6811\uff0c\u5176\u4e2d\u6811\u7684\u6743\u503c\uff08\u6811\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u503c\u548c\uff09\u6700\u5c0f\u7684\u751f\u6210\u6811\uff0c\u79f0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n**\u6700\u5c0f\u751f\u6210\u6811\u89e3\u51b3\u95ee\u9898\uff1a**\n\u5982\u4f55\u7528\u6700\u5c0f\u7684\u4ee3\u4ef7\uff0c\u7528n-1\u6761\u8fb9\u8fde\u63a5n\u4e2a\u70b9\u7684\u95ee\u9898\u3002\n\n**\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff1a**\nkruskal\u548cprim\u3002\n\n\uff08\u9644\uff1a[\u6700\u5c0f\u751f\u6210\u6811\u767e\u79d1](https://baike.so.com/doc/6806060-7023006.html)\uff09\n\n## Kruskal \u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\n\u770b\u5230\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u9996\u5148\u60f3\u5230\u7684\u7b97\u6cd5\u662f\uff1a\u8d2a\u5fc3\uff0c\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u8bf7\u5148\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u6570\u636e\uff1a\n```\n5 5\n1 2 1\n2 3 2\n1 3 3\n4 5 4\n1 5 5\n```\n\u8fd9\u4e2a\u6570\u636e\u5df2\u7ecf\u628a\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e86\uff0c\u6682\u65f6\u4e0d\u7528\u518d\u8003\u8651\u3002\n\n\u6211\u4eec\u5148\u6309\u8d2a\u5fc3\u7684\u60f3\u6cd5\u6765\u601d\u8003\uff1a\n\n1\u3001\u8fde\u63a51\u57ce\u5e02\u548c2\u57ce\u5e02\u3002\n![](https://cdn.luogu.com.cn/upload/pic/58514.png)\n\n2\u3001\u8fde\u63a52\u57ce\u5e02\u548c3\u57ce\u5e02\u3002\n![](https://cdn.luogu.com.cn/upload/pic/58515.png)\n\n3\u3001\u8fde\u63a51\u57ce\u5e02\u548c3\u57ce\u5e02\u3002\n![](https://cdn.luogu.com.cn/upload/pic/58517.png)\n\n\u5230\u8fd9\u91cc\uff0c\u5c31\u51fa\u95ee\u9898\u4e86\uff0c\u5b8c\u6210\u8fd93\u6b65\uff0c1\u30012\u30013\u4fbf\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u65e0\u6cd5\u751f\u6210\u6700\u5c0f\u751f\u6210\u6811\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u53bb\u5224\u65ad\u662f\u5426\u4f1a\u5f62\u6210\u73af\uff0c\u7528[\u5e76\u67e5\u96c6](https://baike.so.com/doc/6119935-6333082.html)\u3002\n\uff08\u4e0d\u77e5\u9053\u7684\u8bf7\u5148\u53bb\u5b8c\u6210[\u6d1b\u8c37P3367\u3010\u6a21\u677f\u3011\u5e76\u67e5\u96c6](https://www.luogu.org/problemnew/show/P3367)\u3002\uff09\n\n\u5148\u9644\u4e0a\u5e76\u67e5\u96c6\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<ctime>\n#include<iomanip>\n#include<algorithm>\n#include<sstream>\nusing namespace std;\nint n,m,z,x,y,father[10001],p,q;\nint find(int x)\n{\n\tif (father[x]==x)\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tfather[x]=find(father[x]);\n\t\treturn father[x];\n\t}\n}\nvoid join(int x,int y)\n{\n\tp=find(x);q=find(y);\n\tif (p!=q)\n\t{\n\t\tfather[p]=q;\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfather[i]=i;\n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tcin>>z>>x>>y;\n\t\tif (z==1)\n\t\t{\n\t\t\tjoin(x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (find(x)==find(y))\n\t\t\t{\n\t\t\t\tcout<<\"Y\"<<endl;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout<<\"N\"<<endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u5e76\u67e5\u96c6\u4e2d\u7684find\u548cjoin\u3002\n\n**\u601d\u8def\uff1a**\n\u6c42\u6700\u77ed\uff0c\u81ea\u7136\u8003\u8651\u5230\u8d2a\u5fc3\uff0c\u9996\u5148\u9009\u62e9\u6700\u77ed\u7684\u8fb9\uff0c\u7136\u540e\u6b21\u77ed\u2026\u2026\u91cd\u590d\u9009\u62e9\u6743\u503c\u8f83\u5c0f\u7684\u8fb9\uff0c\u76f4\u5230\u9009\u51fa\u4e86n-1\u6761\u8fb9\uff0c\u4f7fn\u4e2a\u70b9\u8fde\u901a\u3002\n\n**\u6ce8\u610f\uff1a**\n\u5728\u9009\u62e9\u7684\u8fc7\u7a0b\u4e2d\u5fc5\u987b\u6392\u9664\u6389\u4f1a\u6784\u6210\u56de\u8def\u7684\u8fb9\u3002\n\n**\u65b9\u6848\uff1a**\n\u6392\u5e8f+\u8d2a\u5fc3+\u5e76\u67e5\u96c6\n\n**\u7b97\u6cd5\u6d41\u7a0b\uff1a**\n\n1\u3001\u5c06\u6570\u636e\u6309\u6743\u503c\u6392\u5e8f\uff0c\u6211\u4eec\u5728\u79bb\u6563\u7684\u9876\u70b9\u4e2d\u6162\u6162\u589e\u52a0\u8fb9\uff0c\u6784\u9020\u5e76\u67e5\u96c6father[n]\u3002\n\n2\u3001\u9009\u62e9\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff08x1\uff0cy1\uff09\uff0c\u589e\u52a0\u5230\u56fe\u4e2d\u3002\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff08x1\uff0cy1\uff09\u88ab\u9009\u4e2d\u5230\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u4e24\u4e2a\u9876\u70b9\u5f7c\u6b64\u8fde\u901a\u4e86\uff0c\u5728\u5e76\u67e5\u96c6\u4e2d\u5408\u5e76\uff08x1,y1\uff09\u3002\n\n3\u3001\u9009\u62e9\u6743\u503c\u6b21\u5c0f\u7684\u8fb9\uff0c\u9996\u5148\u5224\u65ad\u8fd9\u6761\u8fb9\u7684\u589e\u52a0\u662f\u5426\u6784\u6210\u56de\u8def\uff0c\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\uff1a\u5426  \u589e\u52a0\u8fd9\u6761\u8fb9\uff0c\u5728\u5e76\u91c7\u96c6\u4e2d\u5408\u5e76\uff08xi\uff0cyi\uff09\uff1b\u662f  \u8df3\u8fc7\u8fd9\u6761\u8fb9\u3002\n\n4\u3001\u53cd\u590d\u6267\u884c\u6b65\u9aa43\uff0c\u76f4\u5230\u9009\u51fan-1\u6761\u8fb9\u5c06n\u4e2a\u70b9\u8fde\u901a\u3002\n\n**\u4ee3\u7801\uff1a**\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<ctime>\n#include<iomanip>\n#include<algorithm>\n#include<sstream>\nusing namespace std;\nint n,m,father[5001],p,q,h=0,ans=0,cn;               //father[i]\u662f\u57ce\u5e02i\u7684boss \nstruct student1\n{\n\tint f,t,c;\n}a[200001];                                    //\u7528a\u8bb0\u5f55\u4e24\u5ea7\u57ce\u5e02\u5efa\u516c\u8def\u7684\u8d39\u7528 \nbool cmp1(student1 a,student1 b)\n{\n\treturn a.c<b.c;\n}\nint find(int x)                              //\u67e5\u627e\u57ce\u5e02x\u7684boss \n{\n\tif (father[x]==x)\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tfather[x]=find(father[x]);\n\t\treturn father[x];\n\t}\n}\nvoid join(int x,int y)                     //\u628a\u57ce\u5e02x\u548c\u57ce\u5e02y\u5408\u5e76 \n{\n\tp=find(x);q=find(y);\n\tif (p!=q)\n\t{\n\t\tfather[p]=q;\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tcn=n;                         //\u50a8\u5b58n\u7684\u503c \n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tfather[i]=i;                //\u628a\u57ce\u5e02i\u7684father\u8bbe\u4e3a\u81ea\u5df1 \n\t}\n\tfor (int i=1;i<=m;i++)\n\t{\n\t\tcin>>a[i].f>>a[i].t>>a[i].c;\n\t}\n\tsort(a+1,a+m+1,cmp1);                   //\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n\tn--;\n\twhile (n>0)\n\t{\n\t\th++;\n\t\tif (h>m)                    //\u65e0\u6cd5\u8fde\u901a \n\t\t{\n\t\t\tcout<<\"orz\";\n\t\t\treturn 0;\n\t\t}\n\t\tif (find(a[h].f)==find(a[h].t))               //\u5982\u679c\u4e24\u4e2a\u57ce\u5e02\u5df2\u7ecf\u8fde\u901a\uff0c\u4e0d\u80fd\u518d\u8fde\u63a5\uff0c\u5426\u5219\u4f1a\u53d8\u6210\u73af \n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tjoin(a[h].f,a[h].t);                     //\u8fde\u901a\u4e24\u4e2a\u57ce\u5e02 \n\t\t\tn--;\n\t\t\tans+=a[h].c;                             //\u8ba1\u7b97\u7b54\u6848 \n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n## Prim \u666e\u6797\u59c6\u7b97\u6cd5\n\u5bfb\u627e\u56feG\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0cG=\uff08V\uff0cE\uff09\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e3aT\uff0cT={U\uff0cTE)\n\n**\u601d\u8def:**\n\u6700\u5c0f\u751f\u6210\u6811\u4e2d,\u5fc5\u987b\u9009\u5230\u6bcf\u4e2a\u9876\u70b9,\u6bcf\u4e2a\u9876\u70b9\u5fc5\u987b\u6709\u4e00\u6761\u8fb9\u4e0e\u5176\u76f8\u8fde\uff0c\u56fa\u5b9a\u9876\u70b9\u770b\u5b83\u7684\u90bb\u63a5\u70b9\u4e2d\u90a3\u4e9b\u70b9\u6ca1\u6709\u8bbf\u95ee\u4e14\u8fb9\u6743\u6700\u77ed\u3002\n\n**\u6ce8\u610f:**\n\u6807\u8bc6\u5df2\u7ecf\u8fdb\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u9876\u70b9\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u6ca1\u6709\u9009\u62e9\u8fc7,\u4f46\u5176\u7aef\u70b9\u90fd\u5728U\u4e2d\uff0c\u5219\u8fd9\u6761\u8fb9\u7684\u52a0\u5165\u5c06\u6784\u6210\u56de\u8def\uff0c\u5e94\u629b\u5f03\uff0c\n\n**\u96be\u70b9:**\n\u5982\u4f55\u627e\u51fa\u4e0b\u4e00\u4e2a\u5e94\u6dfb\u52a0\u5230\u751f\u6210\u6811\u7684\u8fb9?\n\n\u2014\u2014\u7c7b\u4f3cdijkstra\u7684\u6280\u5de7\uff0c\u5f00\u8bbe\u6570\u7ec4dis[i]\uff0c\u8bb0\u5f55\u751f\u6210\u6811\u5230\u9879\u70b9vi\u7684\u6700\u77ed\u8ddd\u79bb\u3002\n\n\u2014\u2014\u5728dis\u6570\u7ec4\u4e2d\u627e\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u501f\u52a9\u6700\u5c0f\u5806\u4f18\u5316\u3002O(N^2)-O(logM)\u3002\n\n**\u7b97\u6cd5\u6d41\u7a0b:**\n\n1\u3001U\uff0cTE\u4e3a\u7a7a,\u5b9a\u4e49book\u6570\u7ec4\u6807\u8bc6\u9876\u70b9\u72b6\u6001\uff0cdis\u6570\u7ec4\u8bb0\u5f55\u751f\u6210\u6811\u5230\u5404\u9876\u70b9\u7684\u8ddd\u79bb\u3002\n\n2\u3001\u4eceV\u4e2d\u4efb\u610f\u9009\u4e00\u4e2a\u9876\u70b9V1\u52a0\u5165\u751f\u6210\u6811\u4e2d\uff0cU={v1}\uff0c\u7528\u4e00\u7ef4\u6570\u7ec4book\u6765\u6807\u8bb0\u90a3\u4e9b\u9876\u70b9\u5df2\u7ecf\u52a0\u5165\u4e86\u751f\u6210\u6811\uff0cbook[1]=1\u3002\n\n3\u3001\u521d\u59cb\u5316dis,\u82e5v1\u5b58\u5728\u90bb\u63a5\u70b9\u2175,\u5219dis[i]=e[1][i]\uff0c\u5176\u4f59\u4e3a\u6b63\u65e0\u7a77\u3002\n\n4\u3001\u5728dis\u6570\u7ec4\u4e2d\u9009\u62e9\u79bb\u751f\u6210\u6811\u6700\u8fd1\u7684\u9876\u70b9vj\uff0c\u52a0\u5165\u5230\u751f\u6210\u6811\u4e2d(dis\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c)\uff0cbook[j]=1\uff0c\u8003\u5bdfvj\u7684\u90bb\u63a5\u70b9\uff0c\u66f4\u65b0dis\u6570\u7ec4\uff0c\u5982\u679cdis[k]>e[j][k] dis[k]=e[j][k]\u3002\n\n\u672c\u9898\u7684\u8bb2\u89e3\u5c31\u5230\u8fd9\u91cc\uff0c\u559c\u6b22\u5c31\u53bb\u70b9\u8d5e\u54df\uff01\u6709\u95ee\u9898\u8bf7\u5728\u8ba8\u8bba\u533a\u63d0\u95ee\u3002\u8c22\u8c22\u5927\u5bb6\uff01(\u3003'\u25bd'\u3003)",
        "postTime": 1557566864,
        "uid": 63444,
        "name": "\u82b7\u964c\u964c\u5416",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u6700\u5c0f\u751f\u6210\u6811\u65e0\u975e\u5c31\u662f\u4e24\u79cd\u5199\u6cd5\uff1a\n\n1\u3001**Prim\u7b97\u6cd5**\n\n2\u3001**Kruskal\u7b97\u6cd5**\n\n\u7136\u540e\u653e\u51e0\u4e2a\u6982\u5ff5\u6027\u7684\u5b9a\u4e49\uff1a\n\n\n------------\n\n\n**\u8fde\u901a\u56fe\uff1a**\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u82e5\u4efb\u610f\u4e24\u4e2a\u9876\u70b9vi\u4e0evj\u90fd\u6709\u8def\u5f84\u76f8\u901a\uff0c\u5219\u79f0\u8be5\u65e0\u5411\u56fe\u4e3a\u8fde\u901a\u56fe\u3002\n\n**\u5f3a\u8fde\u901a\u56fe\uff1a**\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u82e5\u4efb\u610f\u4e24\u4e2a\u9876\u70b9vi\u4e0evj\u90fd\u6709\u8def\u5f84\u76f8\u901a\uff0c\u5219\u79f0\u8be5\u6709\u5411\u56fe\u4e3a\u5f3a\u8fde\u901a\u56fe\u3002\n\n**\u8fde\u901a\u7f51\uff1a**\u5728\u8fde\u901a\u56fe\u4e2d\uff0c\u82e5\u56fe\u7684\u8fb9\u5177\u6709\u4e00\u5b9a\u7684\u610f\u4e49\uff0c\u6bcf\u4e00\u6761\u8fb9\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u6570\uff0c\u79f0\u4e3a\u6743\uff1b\u6743\u4ee3\u8868\u7740\u8fde\u63a5\u8fde\u4e2a\u9876\u70b9\u7684\u4ee3\u4ef7\uff0c\u79f0\u8fd9\u79cd\u8fde\u901a\u56fe\u53eb\u505a\u8fde\u901a\u7f51\u3002\n\n**\u751f\u6210\u6811\uff1a**\u4e00\u4e2a\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u6307\u4e00\u4e2a\u8fde\u901a\u5b50\u56fe\uff0c\u5b83\u542b\u6709\u56fe\u4e2d\u5168\u90e8n\u4e2a\u9876\u70b9\uff0c\u4f46\u53ea\u6709\u8db3\u4ee5\u6784\u6210\u4e00\u68f5\u6811\u7684n-1\u6761\u8fb9\u3002\u4e00\u9897\u6709n\u4e2a\u9876\u70b9\u7684\u751f\u6210\u6811\u6709\u4e14\u4ec5\u6709n-1\u6761\u8fb9\uff0c\u5982\u679c\u751f\u6210\u6811\u4e2d\u518d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5219\u5fc5\u5b9a\u6210\u73af\u3002\n\n**\u6700\u5c0f\u751f\u6210\u6811\uff1a**\u5728\u8fde\u901a\u7f51\u7684\u6240\u6709\u751f\u6210\u6811\u4e2d\uff0c\u6240\u6709\u8fb9\u7684\u4ee3\u4ef7\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\uff0c\u79f0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u3002 \n\n\n------------\n\n###### \uff08\u7531\u4e8e\u7bc7\u5e45\u9650\u5236\uff0c\u6240\u4ee5\u6211\u5c31\u53ea\u8bb2Kruskal\u7b97\u6cd5\u4e86\uff09\n\n\n------------\n\nKruskal\u7b97\u6cd5\u53ef\u4ee5\u79f0\u4e3a\u201c\u52a0\u8fb9\u6cd5\u201d\uff0c\u521d\u59cb\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\u4e3a0\uff0c\u6bcf\u8fed\u4ee3\u4e00\u6b21\u5c31\u9009\u62e9\u4e00\u6761\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u4ee3\u4ef7\u8fb9\uff0c\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u96c6\u5408\u91cc\u3002 \n1. \u628a\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\u6309\u4ee3\u4ef7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1b \n2. \u628a\u56fe\u4e2d\u7684n\u4e2a\u9876\u70b9\u770b\u6210\u72ec\u7acb\u7684n\u68f5\u6811\u7ec4\u6210\u7684\u68ee\u6797\uff1b \n3. \u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u9009\u62e9\u8fb9\uff0c\u6240\u9009\u7684\u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9ui,vi,\u5e94\u5c5e\u4e8e\u4e24\u9897\u4e0d\u540c\u7684\u6811\uff0c\u5219\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u6761\u8fb9\uff0c\u5e76\u5c06\u8fd9\u4e24\u9897\u6811\u5408\u5e76\u4f5c\u4e3a\u4e00\u9897\u6811\u3002 \n4. \u91cd\u590d(3),\u76f4\u5230\u6240\u6709\u9876\u70b9\u90fd\u5728\u4e00\u9897\u6811\u5185\u6216\u8005\u6709n-1\u6761\u8fb9\u4e3a\u6b62\u3002\n\n\n\n------------\n\n\n\u7136\u540e\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\uff1a\n\n\n\n------------\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nint f[2000002],n,x,pp,qq,xian,bian,ans,m;\nstruct node {\t\t//\u7ed3\u6784\u4f53\u4e0d\u591a\u8bf4\n\tint u,v,w;\n} p[2000002];\nbool cmp(node a,node b) {return a.w<b.w;}   //\u6bd4\u8f83\u51fd\u6570\uff08sort\uff09\nint find(int x) {\n\tif(f[x]==0)return x;\t\t\t//\u5e76\u67e5\u96c6\u6a21\u677f\n\telse return f[x]=find(f[x]);\n}\nint main() {\n\tscanf(\"%d %d\",&m,&n);\n\tfor(int i=1; i<=n; i++) scanf(\"%d %d %d\",&pp,&qq,&x),p[xian].u=pp,p[xian].v=qq,p[xian++].w=x;\n\tsort(p,p+xian,cmp);\t\t\t//\u76f4\u63a5\u8fdb\u884c\u6392\u5e8f\n\tfor(int i=0; i<xian; i++) {\n\t\tint u=p[i].u,v=p[i].v,w=p[i].w,t1=find(p[i].u),t2=find(p[i].v);\n\t\tif(t1!=t2)ans+=w,f[t1]=t2,bian++;\n        //\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u5408\u5e76\n\t\tif(bian==n-1)break;\n\t}\n\tprintf(\"%d\",ans);\n}\n```\n------------\n",
        "postTime": 1535887039,
        "uid": 84991,
        "name": "_\u81ea\u52a8AC\u673a_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u7528\u7684\u662fkruskal\u7b97\u6cd5\uff0c\u9700\u8981\u7528\u5230\u5e76\u67e5\u96c6\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u51fd\u6570\u4f18\u5316\u901f\u5ea6\uff1a\n\n\u8bfb\u5165\u4f18\u5316readint()\n\n\u8f93\u51fa\u4f18\u5316outint()\n\n\u6309\u79e9\u5408\u5e76level[]\n\n\u8def\u5f84\u538b\u7f29\u51fd\u6570getfather()\n\n\u6240\u4ee5\u8dd1\u7684\u6bd4\u9999\u6e2f\u8bb0\u8005\u8fd8\u5feb\u3002\n\n\u8d34\u4ee3\u7801\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int MAXN=5005,MAXM=200005;\nint readint(){\n    int Num;\n    char ch;\n    while((ch=getchar())<'0'||ch>'9');\n    Num=ch-'0';\n    while((ch=getchar())>='0'&&ch<='9') Num=Num*10+ch-'0';\n    return Num;\n}\nvoid outint(int x){\n    if(x>=10) outint(x/10);\n    putchar(x%10+'0');\n}\nstruct EDGE{\n    int a,b,data;\n    bool friend operator < (const EDGE &a,const EDGE &b){\n        return a.data<b.data;\n    }\n}edge[MAXM];\nint father[MAXN],level[MAXN];\nint getfather(int x){\n    return father[x]==x?x:father[x]=getfather(father[x]);\n}\nbool Union(const int &x,const int &y){\n    int fx=getfather(x),fy=getfather(y);\n    if(fx==fy) return false;\n    if(level[fx]>level[fy]) father[fy]=fx;\n    else{\n        father[fx]=fy;\n        if(level[fx]==level[fy]) level[fy]++;\n    }\n    return true;\n}\nint main(){\n    memset(level,0,sizeof(level));\n    int n=readint(),m=readint(),k=0,ans=0;\n    for(int i=1;i<=n;i++) father[i]=i;\n    for(int i=1;i<=m;i++){\n        edge[i].a=readint();\n        edge[i].b=readint();\n        edge[i].data=readint();\n    }\n    sort(edge+1,edge+1+m);\n    for(int i=1;i<=m;i++){\n        if(Union(edge[i].a,edge[i].b)){\n            ans+=edge[i].data;\n            k++;\n        }\n        if(k==n-1) break;\n    }\n    outint(ans);\n}\n\n```",
        "postTime": 1478942450,
        "uid": 20903,
        "name": "halfrot",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u53d1\u73b0\u9898\u89e3\u91cc\u6ca1\u6709Prim\uff0b\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u4e8e\u662f\u6765\u5199\u4e00\u53d1\n\n\u65e2\u7136dijkstra\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff0cprim\u4e3a\u4ec0\u4e48\u4e0d\u53ef\u4ee5\u5462qwq\n\n~~(\u5176\u5b9e\u662f\u6211\u4e0d\u4f1a\u7528STL\u5806\uff0c\u624b\u5199\u5806\u53c8\u5fd8\u4e86)~~\n\n\u601d\u8def\u5176\u5b83\u9898\u89e3\u7684\u5927\u4f6c\u4eec\u5df2\u7ecf\u8bb2\u5f97\u5f88\u660e\u767d\u4e86\n\n\u4f18\u5316\u5c31\u662f\u5728\u627e\u5230\u6839\u8282\u70b9\u8ddd\u79bb\u6700\u5c0f\u7684\u70b9\u65f6\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 5005,M = 200005,inf = 2147483647;\nstruct EE{\n    int to,nxt,dis;\n}edge[M*2] = {0};\nint cnt = 0,h[N] = {0};\nvoid ins(int x,int y,int z){\n    edge[++cnt].to = y;\n    edge[cnt].nxt = h[x];\n    edge[cnt].dis = z;\n    h[x] = cnt;\n}\nint n,m;\nint dis[N];\nlong long ans = 0;\nbool used[N] = {0};\n//\u7ebf\u6bb5\u6811\nstruct Node{\n    int mi,c;\n    //mi\u5b58\u50a8\u6700\u5c0f\u503c\uff0cc\u5b58\u50a8\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n}tr[N*4];\nvoid update(int nw,int l,int r,int x,int d){\n    if(l==r){\n        tr[nw].mi = d;\n        tr[nw].c = l;\n        return;\n    }\n    int mid = (l+r)/2;\n    if(x<=mid) update(nw*2,l,mid,x,d);\n    else update(nw*2+1,mid+1,r,x,d);\n    if(tr[nw*2].mi>tr[nw*2+1].mi) tr[nw].mi = tr[nw*2+1].mi,tr[nw].c = tr[nw*2+1].c;\n    else tr[nw].mi = tr[nw*2].mi,tr[nw].c = tr[nw*2].c;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i = 1;i<=m;i++){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        ins(x,y,z);\n        ins(y,x,z);\n    }\n    memset(dis,0x3f,sizeof(dis));\n    memset(tr,0x3f,sizeof(tr));\n    dis[1] = 0;\n    update(1,1,n,1,0);\n    //Prim\n    for(int p = 1;p<=n;p++){\n        int u = tr[1].c; // \u6574\u68f5\u6811\u6700\u5c0f\u503c\u6240\u5728\u4f4d\u7f6e\n        update(1,1,n,u,inf); // \u628a\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u8bbe\u4e3ainf\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\u8fd9\u4e2a\u4f4d\u7f6e\n        used[u] = 1;\n        for(int i = h[u];i;i = edge[i].nxt){\n            int v = edge[i].to;\n            if(!used[v]){\n                if(dis[v]>edge[i].dis){\n                    dis[v] = edge[i].dis;\n                    update(1,1,n,v,dis[v]);\n                }\n            }\n        }\n    }\n    for(int i = 1;i<=n;i++) ans += dis[i];\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n\u8bc4\u6d4b\u8bb0\u5f55\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z5e9r94w.png)\n\n\u795d\u5927\u5bb6CSP 2019 RP++",
        "postTime": 1573384182,
        "uid": 127714,
        "name": "CaCl2",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8003\u524d\u6253\u677f\u5b50\u7684\u65f6\u5019\u89c1\u5230\u4e86\u8fd9\u9053\u9898\u3002\n\n\u601d\u8003\u4e00\u4ef6\u4e8b\u60c5\uff1aPrim\u590d\u6742\u5ea6\u662f$O(n^2+m)$,\u5806\u4f18\u5316/zkw\u7ebf\u6bb5\u6811\u4f18\u5316\u4e4b\u540e\u662f$O((n+m)logn)$,kruskal\u7684\u590d\u6742\u5ea6\u662f$O(mlogm)$\u7684\uff0c\u6240\u4ee5\u524d\u8005\u9002\u5408\u7a00\u758f\u56fe\uff0c\u540e\u8005\u9002\u5408\u7a20\u5bc6\u56fe\uff0c\u8fd9\u662f\u5927\u5bb6\u516c\u8ba4\u7684\u4e8b\u5b9e\u3002\n\n\u7136\u800c\u5982\u679c\u7ed9\u4f60\u4e00\u5f20\u8fb9\u6570\u4e3a$10^7$\uff0c\u70b9\u6570\u4e3a$10^5$\u7684\u56fe\uff0c\u600e\u4e48\u7834\uff1f\n\n\u81ea\u5df1yy\u4e86\u4e00\u79cd\u795e\u5947\u7684\u65b9\u6cd5\uff0c\u7528\u5206\u5757\u4f18\u5316Prim\uff08\u4f30\u8ba1\u5927\u4f6c\u4eec\u65e9\u5c31\u90fd\u60f3\u5230\u4e86>-<\uff09\n\n\u6309\u8282\u70b9\u5206\u5757\u4e4b\u540e\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5757\u7684\u6700\u4f18\u8282\u70b9\u3002\n\n\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u4e00\u5b9a\u662f\u67d0\u4e2a\u8282\u70b9\u627e\u5230\u4e86\u66f4\u4f18\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0\u90a3\u4e2a\u5757\u7684\u7b54\u6848\u3002\n\n\u627e\u7b54\u6848\u7684\u65f6\u5019\uff0c\u66b4\u529b\u627e\u6bcf\u4e2a\u5757\u7684\u7b54\u6848\u3002\n\n\u505a\u5b8c\u67d0\u4e2a\u8282\u70b9\u4e4b\u540e\uff0c\u66b4\u529b\u91cd\u6784\u90a3\u4e2a\u8282\u70b9\u6240\u5728\u7684\u5757\u7684\u7b54\u6848\u3002\n\n\u6ce8\u610f\u5230\u66f4\u65b0\u7684\u65f6\u5019\u590d\u6742\u5ea6\u662f$O(1)$\u7684\uff0c\u627e\u7b54\u6848/\u91cd\u6784\u5757\u7684\u590d\u6742\u5ea6\u662f$O(\\sqrt n)$\u7684\uff0c\u603b\u590d\u6742\u5ea6\u662f$O(n\\sqrt n + m)$\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u8d34\u4e2a\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\nconst int N = 5e3 + 10, M = 4e5 + 10, inf = 1e9;\nint ri() {\n\tchar c = getchar(); int x = 0, f = 1; for(;c < '0' || c > '9'; c = getchar()) if(c == '-') f = -1;\n\tfor(;c >= '0' && c <= '9'; c = getchar()) x = (x << 1) + (x << 3) - '0' + c; return x * f;\n}\nbool vis[N]; int D[N], b[N], l[N], r[N], Ans[N], n, m;\nint pr[N], to[M], nx[M], w[M], tp;\nvoid add(int u, int v, int W) {to[++tp] = v; nx[tp] = pr[u]; pr[u] = tp; w[tp] = W;}\nvoid adds(int u, int v, int w) {add(u, v, w); add(v, u, w);}\nvoid Up(int &x, int y) {D[x] > D[y] ? x = y : 0;}\nvoid Add(int x, int w) {D[x] = w; Up(Ans[b[x]], x);}\nvoid Del(int x) {\n\tint nw = b[x]; D[x] = inf; \n\tif(x != Ans[nw]) return; Ans[nw] = 0;\n\tfor(int i = l[nw]; i <= r[nw]; ++i)\n\t\tUp(Ans[nw], i);\n}\nint main() {\n\tn = ri(); m = ri(); int B = sqrt(n); D[0] = inf;\n\tfor(int u, v;m--;) u = ri(), v = ri(), adds(u, v, ri());\n\tfor(int i = 1;i <= n; ++i) {\n\t\tb[i] = (i - 1) / B + 1;\n\t\tif(!l[b[i]]) l[b[i]] = i;\n\t\tr[b[i]] = i; D[i] = inf;\n\t}\n\tfor(int x = 1;x <= b[n]; ++x) Ans[x] = 0;\n\tAdd(1, 0); int r = 0;\n\tfor(int i = 1;i <= n; ++i) {\n\t\tint u = 0;\n\t\tfor(int x = 1;x <= b[n]; ++x)\n\t\t\tUp(u, Ans[x]);\n\t\tvis[u] = true; r += D[u]; Del(u);\n\t\tfor(int i = pr[u]; i; i = nx[i])\n\t\t\tif(!vis[to[i]] && D[to[i]] > w[i]) \n\t\t\t\tAdd(to[i], w[i]);\n\t}\n\tprintf(\"%d\\n\", r);\n\treturn 0;\n}\n\n\n\n```\n",
        "postTime": 1541589937,
        "uid": 2218,
        "name": "2014\u5415\u6cfd\u9f99",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u90a3\u5565\uff0c\u53d1\u4e00\u53d1\u542f\u53d1\u5f0f\u5408\u5e76\u2026\u2026\u770b\u5230\u8fd9\u4e2a\u4f60\u5e94\u8be5\u5c31\u77e5\u9053\u6211\u662fkruskal\u6d3e\uff0c\u5148\u8bf4\u660e\u4e00\u70b9\uff0c\u5e76\u67e5\u96c6\uff0c\u6211\u51e0\u4e4e\u6ca1\u9047\u89c1\u8fc7\u4e0d\u8def\u5f84\u538b\u7f29\u7684\u9898\u2026\u2026\u4e0d\u538b\u94c1tle\uff0c\u4f46\u662f\uff0c\u5728\u5408\u5e76\u65b9\u9762\uff0c\u4e5f\u6709\u53ef\u4f18\u5316\u7684\u5730\u65b9\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u96c6\u5408\uff0c\u6211\u4eec\u5c06\u5b83\u5408\u5e76\u4e4b\u540e\uff0c\u5982\u679c\u518d\u6b21\u8bbf\u95ee\uff0c\u53c8\u8981\u67e5\u4e00\u904d\u2026\u2026\u6240\u4ee5\u8bf4\u554a\uff0c\u5982\u679c\u4f60\u662f\u5199\u7684\u9012\u5f52\u5f0f\u5e76\u67e5\u96c6\uff0c\u5c31\u5c3d\u91cf\u8981\u51cf\u5c11\u96c6\u5408\u7684\u6df1\u5ea6\uff0c\u5f88\u597d\u7406\u89e3\uff0c\u5bf9\u5427\uff0c\u6240\u4ee5\u5408\u5e76\u65f6\uff0c\u5c31\u53ef\u4ee5\u5c06\u6df1\u5ea6\u6d45\u7684\u96c6\u5408\u5e76\u5230\u66f4\u6df1\u7684\u96c6\u5408\u4e0a\uff0c\u5c31\u51cf\u5c11\u4e86\u9012\u5f52\u6b21\u6570\u2026\u2026\u867d\u7136\u8fd9\u9898\u6ca1\u6709\u5fc5\u8981\uff0c\u4f46\u8fd8\u662f\u53d1\u4e00\u53d1\uff0c\u4e0a\u4ee3\u7801\uff1a\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#define ll long long\nusing namespace std;\ninline int read() \n{\n    int x=0; char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0';ch=getchar();}\n    return x;\n}\nint ans;\nstruct Node\n{\n    int u,v; int len;\n    Node(int x1=0,int x2=0,int x3=0):u(x1),v(x2),len(x3){};\n}Road[200005];\nbool cmp(const Node& Road1,const Node& Road2)\n{\n    return Road1.len<Road2.len;\n}\nint f[40005];\nint Find(int x)\n{\n    if(f[x]==x)return x;\n    else return f[x]=Find(f[x]);\n}\nint n,m;\nint rnk[40005];\nvoid unite(int x,int y) \n{\n    x=Find(x); y=Find(y);\n    if(x==y) return;\n    if(rnk[x]<rnk[y]) f[x]=y;\n    else \n    {\n        f[y]=x;\n        if(rnk[x]==rnk[y]) rnk[x]++;\n    }\n}\nint main()\n{\n     n=read();m=read();\n     for(int i=1;i<=m;i++)\n     {\n         int u,v;int len;\n         scanf(\"%d%d%d\",&u,&v,&len);\n         Road[i]=Node(u,v,len);\n     }\n     sort(Road+1,Road+m+1,cmp);\n    int sum=0;\n    for(int i=1;i<=n;i++)\n        f[i]=i;\n     for(int i=1;i<=m;i++)\n     {\n         int u=Road[i].u;\n         int v=Road[i].v;\n         int len=Road[i].len;\n         if(Find(u)!=Find(v))\n         {\n             //sum++;\n             //ans=max(ans,len);\n             unite(u,v);\n            ans+=len;\n            sum++;\n         }\n     }\n     if(sum<n-1)\n         printf(\"orz\\n\");\n     else\n         printf(\"%d\\n\",ans);\n     return 0;    \n }\n\n```",
        "postTime": 1506786141,
        "uid": 34332,
        "name": "KKarshilov",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u7ecf\u5178\u7684\u6700\u5c0f\u751f\u6210\u6811\uff08\u5e9f\u8bdd\uff09\u3002\n\nPrim\u7b97\u6cd5\uff0c\u7b80\u5355\u597d\u7528\u3002\n\n\u6838\u5fc3\u601d\u8def\uff1aPrim\u7b97\u6cd5\u3002\n\n```cpp\n-#include <iostream>-\n-#define maxn 25025048;-\n-using namespace std;-\n-int n,m,a[5001][5001]={0},dis[100001]={0},f[100001]={0};-\n-int main()-\n-{-\n-    cin>>n>>m;-\n-    for(int i=1;i<=n;i++)for(int j=1;j<=n;j++)a[i][j]=maxn;-\n-    for(int i=1,u,v,d;i<=m;i++)-\n-    {-\n-        cin>>u>>v>>d;-\n-        if(d<a[u][v])a[u][v]=d,a[v][u]=d;---\u56e0\u4e3a\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u8bfb\u5165\u65f6\u9009\u62e9\u6700\u5c0f\u7684\u8fb9\n-    }-\n-    for(int i=0;i<=n;i++)dis[i]=maxn; ---\u8d4b\u6700\u5927\u503c\n-    for(int i=1;i<=n;i++)f[i]=1;---\u628a\u6240\u6709\u70b9\u8d4b\u503c\u4e3a\u84dd\u70b9\n-    dis[1]=0;---\u7b2c\u4e00\u4e2a\u70b9\u8d4b\u503c\u4e3a\u767d\u70b9\n-    for(int i=1;i<=n;i++)-\n-    {-\n-        int k=0,o=0;-\n-        for(int j=1;j<=n;j++)if(f[j]==1&&(dis[j]<dis[k]))k=j;---\u627e\u51fa\u6700\u5c0f\u7684\u84dd\u70b9\n-        f[k]=0;---\u5c06\u5b83\u6807\u8bb0\u4e3a\u767d\u70b9\n-        for(int j=1;j<=n;j++)-\n-        {-\n-            if(f[j]==1&&(a[k][j]<dis[j]))dis[j]=a[k][j],o=j;---\u4fee\u6539\u4e0ek\u76f8\u8fde\u7684\u6240\u6709\u84dd\u70b9\n-        }-\n-    }-\n-    int s=0;---\u7d2f\u52a0\u7b54\u6848\n-    for(int i=1;i<=n;i++)s+=dis[i];---\u52a0\n-    cout<<s;---\u8f93\u51fa\n-    return 0;-\n-}-\n\u4e0d\u7ba1\u4f60\u4eec\u7528\u4ec0\u4e48\uff0c\u53cd\u6b63\u6211\u662f\u7528Prim\u3002\n```",
        "postTime": 1475721438,
        "uid": 14381,
        "name": "1jia1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u6b64\u9898\u5fc5\u987b\u4f7f\u7528\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u3002\u6b64\u7b97\u6cd5\u4f1a\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c\u6240\u4ee5\u5efa\u8bae\u5148\u8fc7\u6389P3367\u518d\u505a\u8fd9\u9898\u3002\n\n##\u6570\u636e\u592a\u5f31\uff0c\u5bfc\u81f4\u6211\u8fd9\u79cd\u9519\u8bef\u7684\u5224\u65ad\u65e0\u89e3\u7684\u65b9\u6cd5\u90fdAC\u4e86\u3002\u3002\u3002\n\n```pascal\nvar\n  i,n,m,ans,root1,root2:longint;\n    elen,eu,ev,father:array[0..200001]of longint;\nprocedure qsort(l,r:longint);\nvar\n  i,j,temp,mid:longint;\nbegin\n  i:=l; j:=r;\n  mid:=elen[(l+r) div 2];\n  repeat\n    while elen[i]<mid do inc(i);\n    while elen[j]>mid do dec(j);\n    if i<=j then\n    begin\n      temp:=elen[i];elen[i]:=elen[j];elen[j]:=temp;\n      temp:=eu[i];eu[i]:=eu[j];eu[j]:=temp;\n      temp:=ev[i];ev[i]:=ev[j];ev[j]:=temp;\n      inc(i);dec(j);\n    end;\n  until i>j;\n  if l<j then qsort(l,j);\n  if i<r then qsort(i,r);\nend;\nfunction getfather(x:longint):longint;\nbegin\n  if father[x]=x then exit(x);\n    father[x]:=getfather(father[x]);\n    exit(father[x]);\nend;\nbegin\n  readln(n,m);\n  if m<n-1 then begin write('orz');halt; end;//\u81f3\u5c11\u5f97\u6709n-1\u6761\u8fb9\uff0c\u5426\u5219\u65e0\u6cd5\u6784\u6210\u8fde\u901a\u56fe\n    for i:=1 to m do readln(eu[i],ev[i],elen[i]);\n    qsort(1,m);//\u5bf9\u8fb9\u8fdb\u884c\u6392\u5e8f\n    ans:=0;\n    for i:=1 to n do father[i]:=i;\n        for i:=1 to m do ans:=ans+elen[i];//\u6240\u6709\u8fb9\u7684\u6743\u503c\u603b\u548c\n    for i:=1 to m do begin\n      root1:=getfather(eu[i]); root2:=getfather(ev[i]);\n        if root1=root2 then ans:=ans-elen[i] else father[root1]:=root2;//\u5408\u5e76\n    end;\n        write(ans);\nend.\n```",
        "postTime": 1474867283,
        "uid": 3116,
        "name": "\u98de\u7fd4",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u4e0d\u96be\n\n\u6211\u5728\u8fd9\u91cc\u4ecb\u7ecd\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662fKruskal\u7b97\u6cd5\uff0c\u4e00\u79cd\u662fprim\u7b97\u6cd5\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/75015.png)\n\n# \u7b97\u6cd51\uff1aKruskal\u7b97\u6cd5\n\n\u521d\u59cb\u65f6\uff0c\u68ee\u6797\u662f\u7531\u5355\u4e2a\u8282\u70b9\u7ec4\u6210\u7684n\u68f5\u6811\u3002\u7136\u540e\u53cd\u590d\u627e\u51fa\u68ee\u6797\u4e2d\u8fde\u63a5\u4efb\u610f\u4e24\u68f5\u6811\u7684\u6240\u6709\u8fb9\u4e2d\u5177\u6709\u6700\u5c0f\u6743\u503c\u7684\u8fb9\uff08u,v\uff09\uff0c\u5c06\u5176\u4f5c\u4e3a\u5b89\u5168\u8fb9\uff0c\u628a\u5b83\u6dfb\u52a0\u5230\u6b63\u5728\u751f\u957f\u7684\u68ee\u6797\u4e2d\uff0c\u76f4\u81f3\u4ea7\u751f\u6700\u5c0f\u751f\u6210\u6811\u4e3a\u6b62\u3002 \u8ba1\u7b97\u6700\u5c0f\u751f\u6210\u6811\u91c7\u7528\u7684\u662f\u8d2a\u5fc3\u7b56\u7565\uff0c\u5373\u5fc5\u987b\u4fdd\u8bc1\u6bcf\u6b21\u6dfb\u52a0\u7684\u8fb9\u540c\u65f6\u6ee1\u8db3\u4e0b\u8ff0\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n\uff081\uff09\u4e0d\u80fd\u5f62\u6210\u56de\u8def\uff1b\n\n\uff082\uff09\u5728\u4fdd\u8bc1\u6761\u4ef61\u7684\u524d\u63d0\u4e0b\u6dfb\u52a0\u6743\u5c3d\u53ef\u80fd\u5c0f\u7684\u8fb9\uff0c\u8fd9\u6837\u7684\u8fb9\u79f0\u4e4b\u4e3a\u5b89\u5168\u8fb9\u3002\n\n\u7b97\u6cd5\u5982\u56fe\n\n![](https://cdn.luogu.com.cn/upload/pic/75019.png)\n\n![](https://cdn.luogu.com.cn/upload/pic/75016.png)\n\n![](https://cdn.luogu.com.cn/upload/pic/75020.png)\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n//\u4ee5\u4e0b\u4ee3\u7801\u6d89\u53ca\u5e76\u67e5\u96c6\uff0c\u4e0d\u61c2\u7684\u7ae5\u978b\u53ef\u4ee5\u5148\u4e86\u89e3\u4e00\u4e0b \n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge{\n    long long fr,to,len;\n}ed[200005];\n//\u7528\u7ed3\u6784\u4f53\u6765\u5b58\u50a8\u6bcf\u6761\u8fb9\u7684\u5934\u3001\u5c3e\u548c\u6743\u503c \nint n,m,x,y,z,cnt,l,fa[5001];\nbool cmp(edge a,edge b){\n    return a.len<b.len;\n}\nint find(int x){\n    if(fa[x]==x)return x;\n    return fa[x]=find(fa[x]);\n}\n//\u5e76\u67e5\u96c6\u51fd\u6570*1\nvoid merget(int x,int y){\n    int fx=find(x),fy=find(y);\n    if(fx!=fy)fa[fx]=fy;\n}\n//\u5e76\u67e5\u96c6\u51fd\u6570*2\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)fa[i]=i;                       //\u521d\u59cb\u5316 \n    for(int i=1;i<=m;i++){\n        cin>>x>>y>>z;                                   //\u8bfb\u5165\u6570\u636e\n        ed[i].fr=x;\n        ed[i].to=y;\n        ed[i].len=z;\n    }\n    sort(ed+1,ed+m+1,cmp);                              //\u6392\u5e8f\uff0c\u627e\u5230\u6743\u503c\u5c0f\u7684\u8fb9 \n    for(int i=1;i<=m;i++){\n        if(cnt==n-1)break;                              //\u5982\u679c\u70b9\u6570\u679a\u4e3e\u5b8c\u4e86\u5c31\u8df3\u51fa\u5faa\u73af \n        if(find(ed[i].fr)==find(ed[i].to))continue;     //\u5982\u679c\u8fd9\u4e24\u70b9\u5728\u4e00\u4e2a\u96c6\u5408\u5185\u5c31\u8df3\u8fc7 \n        merget(ed[i].fr,ed[i].to);                      //\u628a\u8fd9\u6761\u8fb9\u7684\u4e00\u5934\u4e00\u5c3e\u5408\u5e76 \n        l+=ed[i].len;                                   //\u589e\u52a0\u957f\u5ea6 \n        cnt++;                                          //\u8ba1\u6570\u5668+1 \n    }\n    if(cnt==n-1)cout<<l;                                //\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u8f93\u51fa\u957f\u5ea6 \n    else cout<<\"orz\";                                   //\u4e0d\u7136\u5c31\u8f93\u51faorz\n    return 0;\n} \n```\n\n# \u7b97\u6cd52\uff1aprim\u7b97\u6cd5\n\nPrim\u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u96c6\u5408A\u4e2d\u7684\u8fb9\u603b\u662f\u53ea\u5f62\u6210\u5355\u68f5\u6811\u3002\u521d\u59cb\u65f6\uff0cA\u4e3a\u7a7a\u3002\u63a5\u4e0b\u6765\u6bcf\u6b21\u6dfb\u52a0\u5230A\u7684\u8fb9\u90fd\u662f\u4f7f\u6811\u7684\u8fb9\u5c3d\u53ef\u80fd\u5c0f\u7684\u8fb9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u76f4\u8fdb\u884c\u5230\u4e0d\u5b58\u5728\u8fde\u63a5\u751f\u6210\u6811\u7684\u8fb9\u4e3a\u6b62\u3002 Prim\u7b97\u6cd5\u8fc7\u7a0b: \u5b9a\u4e49\u96c6\u5408A\u8868\u793a\u5df2\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u8282\u70b9\uff0c\u5b9a\u4e49min[]\u6570\u7ec4\u8868\u793a\u5176\u5b83\u8282\u70b9\u5230\u96c6\u5408A\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u521d\u59cb\u65f6\uff0cA\u4e3a\u7a7a\uff0cmin[]\u4e3a\u65e0\u7a77,min[1]=0;\u3002 \u63a5\u4e0b\u6765\u6bcf\u6b21\u6dfb\u52a0\u5230A\u7684\u8fb9\u90fd\u662f\u4f7f\u6811\u7684\u8fb9\u5c3d\u53ef\u80fd\u5c0f\u7684\u8fb9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u76f4\u8fdb\u884c\u5230\u4e0d\u5b58\u5728\u8fde\u63a5\u751f\u6210\u6811\u7684\u8fb9\u4e3a\u6b62\u3002 \u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a 1.\u5c06\u4e00\u4e2a\u56fe\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5f52\u4e3a\u70b9\u96c6A\uff0c\u4e00\u90e8\u5206\u5f52\u4e3a\u70b9\u96c6V\uff0cA\u7684\u521d\u59cb\u96c6\u5408\u4e3a{V1}\uff0cV\u7684\u521d\u59cb\u96c6\u5408\u4e3a{ALL-V1}\u3002\n\n2.\u9488\u5bf9A\u5f00\u59cb\u627eA\u4e2d\u5404\u8282\u70b9\u7684\u6240\u6709\u5173\u8054\u7684\u8fb9\u7684\u6743\u503c\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5c06\u5173\u8054\u7684\u8282\u70b9Vi\u52a0\u5165\u5230A\u4e2d\uff0c\u5e76\u4e14\u4eceV\u4e2d\u5220\u9664\uff08\u6ce8\u610f\u4e0d\u80fd\u5f62\u6210\u73af\uff09\u3002\n\n3.\u9012\u5f52\u6267\u884c\u6b65\u9aa42\uff0c\u76f4\u5230V\u4e2d\u7684\u96c6\u5408\u4e3a\u7a7a\u3002\n\n4.A\u4e2d\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u6811\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\u2014\u2014\u7531\u4e8ePrim\u7b97\u6cd5\u521d\u59cb\u5316\u65f6\u52a0\u5165\u4e86\u8d77\u70b9\uff0c\u800c\u6b65\u9aa42-3\u6bcf\u6267\u884c\u4e00\u6b21\u90fd\u4f1a\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u53ea\u9700\u5224\u65ad\u6267\u884cn-1\u6b21\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/75018.png)\n\n\u5269\u4e0b\u7684\u8fd9\u4e2a\u6211\u5c31\u4e0d\u4e0a\u4ee3\u7801\u4e86\uff0c\u81ea\u5df1\u770b\u5b8c\u662f\u80fd\u505a\u7684\u3002\n\n\uff08\u82e5\u771f\u4e0d\u4f1a\uff0c\u770bP1546\n\u6700\u77ed\u7f51\u7edc Agri-Net\uff09\n\n\u4ee3\u7801\uff1ahttps://www.luogu.org/paste/71kkrc1h\n\n# \u603b\u7ed3\uff1a\n\nKruskal\u7b97\u6cd5\u6bcf\u6b21\u5728\u68ee\u6797\u4e2d\u7684\u4e24\u68f5\u6811\u4e4b\u95f4\u6dfb\u52a0\u5b89\u5168\u8fb9\uff0c\u5176\u7b97\u6cd5\u6548\u7387\u53d6\u51b3\u4e8e\u8fb9\u6570\uff0c\u56e0\u6b64\u9002\u7528\u4e8e\u7a00\u758f\u56fe\u3002\n\nKruskal \u65f6\u95f4\u590d\u6742\u5ea6 O\uff08ElogE\uff09 E\u4e3a\u8fb9\u6570\n\nPrim\u7b97\u6cd5\u6bcf\u6b21\u5728\u5355\u68f5\u6811\u4e0a\u6dfb\u5b89\u5168\u8fb9\uff0c\u5176\u7b97\u6cd5\u6548\u7387\u53d6\u51b3\u4e8e\u8282\u70b9\u6570\uff0c\u56e0\u6b64\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\u3002\n\nPrim \u65f6\u95f4\u590d\u6742\u5ea6 O\uff08n^2\uff09 n\u4e3a\u70b9\u6570\uff0c\u4f46\u662f\u52a0\u4e0a\u5806\u6392\u4f18\u5316\u540e\u65f6\u95f4\u5c31\u53d8\u6210\u4e86 O\uff08ElogE\uff09\n\n\u7b80\u5355\u6765\u8bf4\uff0cKruskal\u662f\u5b58\u8fb9\u7684\uff0cPrim\u662f\u5b58\u56fe\u7684\n\n\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e24\u4e2a\u6027\u8d28 \uff081\uff09\u5207\u5272\u6027\u8d28\uff1a\u5047\u5b9a\u6240\u6709\u8fb9\u6743\u5747\u4e0d\u76f8\u540c\u3002\u8bbeS\u4e3a\u65e2\u975e\u7a7a\u96c6\u4e5f\u975e\u5168\u96c6\u7684V\u7684\u5b50\u96c6\uff0c\u8fb9e\u662f\u6ee1\u8db3\u4e00\u4e2a\u7aef\u70b9\u5728s\u5185\uff0c\u53e6\u4e00\u4e2a\u7aef\u70b9\u4e0d\u5728s\u5185\u7684\u6240\u6709\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u5219\u56feG\u7684\u6240\u6709\u751f\u6210\u6811\u5747\u5305\u542be\u3002 \uff082\uff09\u56de\u8def\u6027\u8d28\uff1a\u5047\u5b9a\u6240\u6709\u8fb9\u6743\u503c\u5747\u4e0d\u76f8\u540c\u3002\u8bbeC\u662f\u56feG\u4e2d\u7684\u4efb\u610f\u56de\u8def\uff0c\u8fb9e\u662fC\u4e0a\u6743\u503c\u6700\u5927\u7684\u8fb9\uff0c\u5219\u56feG\u7684\u6240\u6709\u751f\u6210\u6811\u5747\u4e0d\u542be\u3002\n\n###### \u7559\u7ed9\u6700\u540e\u5927\u5bb6\u7684\u8bdd\uff1a\n\n###### ~~\u4e3a\u4e86\u8ba9\u5927\u5bb6\u66f4\u597d\u7684\u6284\u9898\u89e3\uff0c\u6211\u5df2\u7ecf\u5728\u7a0b\u5e8f\u91cc\u5e03\u4e0b\u4e86\u9632\u4f2a\u6807\u8bc6\uff0c\u8fd9\u79cd\u6807\u8bc6\u53ea\u6709\u849f\u84bb\u624d\u80fd\u770b\u89c1~~",
        "postTime": 1569996187,
        "uid": 242967,
        "name": "JasonZRY",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u5e7f\u544a\uff1a\u914d\u5408[Blog](https://www.luogu.org/blog/149815/)\u98df\u7528\u66f4\u4f73\n\n## \u4ec0\u4e48\u662f\u6700\u5c0f\u751f\u6210\u6811\uff1f\n\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\u662f\u539f\u56fe\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u5305\u542b\u539f\u56fe\u4e2d\u7684\u6240\u6709 n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u6709\u4fdd\u6301\u56fe\u8fde\u901a\u7684\u6700\u5c11\u7684\u8fb9\u3002\u6700\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u7528kruskal\uff08\u514b\u9c81\u65af\u5361\u5c14\uff09\u7b97\u6cd5\u6216prim\uff08\u666e\u91cc\u59c6\uff09\u7b97\u6cd5\u6c42\u51fa\u3002   \u2014\u2014\u767e\u5ea6\n\n~~\u597d\u5427\u770b\u4e0d\u61c2~~\n\n\u901a\u4fd7\u5730\u8bb2\uff1a\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f\u6709N\u4e2a\u70b9\uff0cN-1\u6761\u8fb9\u4e14\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u6700\u5c0f\u7684\u56fe\n\n\u524d\u9762\u8bf4\u8fc7\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\u4e3b\u8981\u7528\u4e24\u79cd\u7b97\u6cd5\uff1aPrim\u548cKruskal\u3002\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5404\u6709\u4f18\u52bf\uff0c\u7a20\u5bc6\u56fe\u4e2dPrim\u66f4\u4f18\uff0c\u7a00\u758f\u56fe\u4e2dKruskal\u66f4\u4f18\u3002Prim\u662f\u4ee5\u66f4\u65b0\u8fc7\u7684\u8282\u70b9\u7684\u8fde\u8fb9\u627e\u6700\u5c0f\u503c\uff0cKruskal\u662f\u76f4\u63a5\u5c06\u8fb9\u6392\u5e8f\u3002\n\n~~\u4f17\u6240\u5468\u77e5~~\uff0c\u5b58\u56fe\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u90bb\u63a5\u77e9\u9635\u548c\u90bb\u63a5\u8868\uff0c\u663e\u7136\u90bb\u63a5\u8868\u66f4\u4f18\uff0c\u5360\u7528\u7a7a\u95f4\u66f4\u5c11\uff0c\u6240\u4ee5\u6211\u4f7f\u7528\u90bb\u63a5\u8868\u3002\n\nprim\u7b97\u6cd5\u4f7f\u7528\u4e0eDijkstra\u4e00\u6837\u7684\u201c\u84dd\u767d\u70b9\u201d\u601d\u60f3\uff0c\u84dd\u70b9\u4ee3\u8868\u5904\u7406\u5b8c\u7684\u70b9\uff0c\u767d\u70b9\u4ee3\u8868\u672a\u5904\u7406\u7684\u70b9\n\n\u4ee51\u4e3a\u8d77\u70b9\uff0cdis[i]\u8868\u793a\u70b9i\u5230\u84dd\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4ecedis\u503c\u6700\u5c0f\u7684\u70b9i\u5f00\u59cb\uff0c\u66f4\u65b0\u4e0e\u70b9i\u76f8\u8fde\u7684\u6240\u6709\u70b9\uff0c\u518d\u53d6dis\u6700\u5c0f\u7684\u70b9\u7ee7\u7eed\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6O($n^2$),\u672c\u9898\u4e2d450ms/5.2MB\n\n\u4ee3\u7801\u5982\u4e0b\u2193\n```cpp\n#include<cstdio>\n#define INF 2147483647\n#define MAXN 5001\n#define MAXM 200001\nusing namespace std;\nint head[MAXN],dis[MAXN];\nbool vis[MAXN];\nint edge_sum=0;\nint n,m;\nstruct Edge{\n\tint next,to,dis;\n}edge[MAXM<<1];//\u90bb\u63a5\u8868\nvoid addedge(int from,int to,int dis){\n\tedge[++edge_sum].next=head[from];\n\tedge[edge_sum].to=to;\n\tedge[edge_sum].dis=dis;\n\thead[from]=edge_sum;\n}//\u5b58\u56fe\nint prim(){//prim\u7b97\u6cd5\n\tlong long MST=0;\n\tfor(register int i=0;i<=n;i++)\n\t\tdis[i]=INF; //dis\u6570\u7ec4\u521d\u59cb\u5316\u4e3amaxint\n\tdis[1]=0;//\u70b91\u5230\u84dd\u70b9\u7684\u8ddd\u79bb\u4e3a0\n\tfor(register int i=1;i<=n;i++){\n\t\tint k=0;\n\t\tfor(register int j=1;j<=n;j++)\n\t\t\tif(!vis[j]&&dis[j]<dis[k]) k=j;//\u627edis\u6700\u5c0f\u7684\u70b9\n\t\tvis[k]=1;//\u6807\u8bb0\u4e3a\u84dd\u70b9\n\t\tfor(register int j=head[k];j;j=edge[j].next){\n\t\t\tif(!vis[edge[j].to]&&edge[j].dis<dis[edge[j].to])\n\t\t\t\tdis[edge[j].to]=edge[j].dis;\n\t\t}\n\t}//\u66f4\u65b0dis\u6570\u7ec4\n\tfor(register int i=1;i<=n;i++)\n\t\tif(dis[i]==INF) return -1;//\u5982\u679c\u4e0d\u8fde\u901a\u8fd4\u56de-1\n\t\telse MST+=dis[i];\n\treturn MST;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\taddedge(x,y,z);\n\t\taddedge(y,x,z); //\u65e0\u5411\u56fe\uff0c\u8981\u5b58\u4e24\u6b21\n\t} \n\tint MST=prim();\n\tif(MST==-1) printf(\"orz\\n\");\n\telse printf(\"%d\\n\",MST);\n\treturn 0;\n}\n```\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u6bcf\u6b21\u90fd\u8981\u627edis\u503c\u6700\u5c0f\u7684\u70b9\uff0c\u5341\u5206\u8d39\u65f6\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f18\u5316\u2014\u2014\u5806\uff0c\u5efa\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\u5373\u53ef\n\n~~C++ STL\u5927\u6cd5\u597d~~\n\npriority_queue\u4e3a\u4f18\u5148\u961f\u5217\uff0c\u53ef\u4ee5\u7528\u6765\u5efa\u5806\n\n\u4f18\u5316\u540e\u65f6\u95f4\u7f29\u77ed\u81f3241ms\n```cpp\n#include<cstdio>\n#include<queue>\n#define INF 2147483647\n#define MAXN 5001\n#define MAXM 200001\nusing namespace std;\nint head[MAXN],dis[MAXN];\nbool vis[MAXN];\nint edge_sum=0;\nint n,m,MST;\nstruct Edge{\n\tint next,to,dis;\n}edge[MAXM<<1];\nvoid addedge(int from,int to,int dis){\n\tedge[++edge_sum].next=head[from];\n\tedge[edge_sum].to=to;\n\tedge[edge_sum].dis=dis;\n\thead[from]=edge_sum;\n}\nstruct node{\n\tint u,dis;\n\tbool operator <(const node& rhs) const {\n        return dis>rhs.dis;\n    }\n};\nvoid prim(){\n\tpriority_queue<node> q;//\u5806\n\tfor(register int i=0;i<=n;i++)\n\t\tdis[i]=INF; \n\tdis[1]=0;\n\tq.push((node{1,0}));\n\twhile(!q.empty()){\n\t\tnode tmp=q.top();\n\t\tq.pop();\n\t\tint u=tmp.u,d=tmp.dis;\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(register int j=head[u];j;j=edge[j].next){\n\t\t\tif(!vis[edge[j].to]&&edge[j].dis<dis[edge[j].to]){\n\t\t\t\tdis[edge[j].to]=edge[j].dis;\n\t\t\t\tif(!vis[edge[j].to]) q.push((node){edge[j].to,dis[edge[j].to]});\n\t\t\t}\t\n\t\t}\n\t}\t\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(register int i=1;i<=m;i++){\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\taddedge(x,y,z);\n\t\taddedge(y,x,z); \n\t} \n\tprim();\n\tbool flag=0;\n\tfor(register int i=1;i<=n;i++){\n\t\tif(dis[i]==INF)\n\t\t\tflag=1;\n\t\tMST+=dis[i];\n\t}\n\tif(!flag) printf(\"%d\\n\",MST);\n\telse printf(\"orz\\n\");\n\treturn 0;\n}\n```\n\n\u63a5\u4e0b\u6765\u4ecb\u7ecd\u53e6\u4e00\u79cd\u7b97\u6cd5\uff1aKruskal\n\nKruskal\u4f7f\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5c06\u8fb9\u6309\u7167\u6743\u503c\u6392\u5e8f\uff0c\u6bcf\u6b21\u53d6\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u662f\u5426\u5b58\u5728\u73af\uff0c\u4e0d\u5b58\u5728\u73af\u5c31\u5c06\u8fd9\u6761\u8fb9\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u8fde\u63a5\uff0ctot\u7edf\u8ba1\u8fde\u63a5\u4e86\u51e0\u6761\u8fb9\uff0c\u5f53tot=n-1\u7684\u65f6\u5019\uff0c\u5faa\u73af\u7ed3\u675f\n\n245ms/2.8MB\n```cpp\n#include<cstdio>\n#include<algorithm>\n#define INF 2147483647\n#define MAXN 5001\n#define MAXM 200001\nint head[MAXN],fa[MAXN];\nint edge_sum=0;\nint n,m,MST;\nstruct Edge{\n\tint from,to,dis;\n}edge[MAXM<<1];\nbool cmp(Edge a,Edge b){\n\treturn a.dis<b.dis;\n}\nint find(int x){\n\tif(x==fa[x]) return x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid kruskal(){//kruskal\u6c42\u6700\u5c0f\u751f\u6210\u6811\n\tint tot=0;\n\tfor(register int i=1;i<=m;i++){\n\t\tint u=find(edge[i].from),v=find(edge[i].to);\n\t\tif(u==v) continue;\n\t\tMST+=edge[i].dis;\n\t\tfa[u]=v;\n\t\ttot++;\n\t\tif(tot==n-1) return ;\n\t}\n}\nusing namespace std;\nint main(){\n\tscanf(\"%d %d\",&n,&m);\n\tfor(register int i=1;i<=n;i++) fa[i]=i;\n\tfor(register int i=1;i<=m;i++){\n\t\tscanf(\"%d %d %d\",&edge[i].from,&edge[i].to,&edge[i].dis);\n\t} \n\tsort(edge+1,edge+1+m,cmp);//\u5c06\u8fb9\u6309\u7167\u6743\u503c\u6392\u5e8f\n\tkruskal();\n\tprintf(\"%d\\n\",MST);\n\treturn 0;\n} \n```\n",
        "postTime": 1565177076,
        "uid": 149815,
        "name": "Isprime",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "# ~~\u849f\u84bb\u7684\u7b2c\u4e00\u7bc7\u80fd\u8fc7\u7684\u9898\u89e3~~\n\u8fd9\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684Kruskal\u7b97\u6cd5\n\u7b97\u6cd5\u4e3b\u65e8\u5c31\u662f\u4ece\u5f53\u524d\u8fb9\u96c6\u9009\u53d6\u4e00\u6761\u6700\u5c0f\u6743\u503c\u7684\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9\u7956\u5148\u4e0d\u540c\uff0c\u5c31\u628a\u5b83\u4eec\u4e24\u4e2a\u6240\u5c5e\u7684\u96c6\u5408\u5408\u5e76\uff08\u6b64\u5904\u7528\u5230\u5e76\u67e5\u96c6\uff09\uff0c\u8fdb\u884c\u5982\u4e0a\u64cd\u4f5c\u76f4\u81f3\u9009\u5230n-1\u6761\u8fb9\n\n _ _ _\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u5949\u4e0a\u4ee3\u7801_ _ _ \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,Act[5010],en=0,ans=0;\nstruct Info{\n\tint s,e;\n\tint v;\n}edge[200010];//\u7ed3\u6784\u4f53\u5b58\u8fb9\nint find(int x){\n\tif (Act[x]==x) return x;\n\treturn Act[x]=find(Act[x]);\n}//\u627e\u7956\u5b97\uff0c\u8ba4\u7956\u5b97\nbool cmp(const Info &a,const Info &b){\n\treturn a.v<b.v;\n}//\u7ed3\u6784\u4f53\u6392\u5e8f\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);//\u8bfb\u5165\u4f18\u5316\n\tcin>>n>>m;\n\tint x,y,V;\n\tfor (int i=1; i<=m; i++){\n\t\tcin>>x>>y>>V;\n\t\tedge[i].s=x;\n\t\tedge[i].e=y;\n\t\tedge[i].v=V;\n\t}\n\tfor (int i=1; i<=n; i++) Act[i]=i;\n\tsort(edge+1,edge+m+1,cmp);//\u5c06\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\tfor (int i=1; i<=m; i++){\n\t\tif (en==n-1) break;\n\t\tif (find(edge[i].s)!=find(edge[i].e)) {//\u7956\u5b97\u4e0d\u540c\n\t\t\ten++;\n\t\t\tans+=edge[i].v;\n\t\t\tAct[find(edge[i].s)]=find(edge[i].e);\n\t\t}\n\t}\n\tif (en==n-1) cout<<ans<<endl;\n\telse cout<<\"orz\"<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1564206168,
        "uid": 96966,
        "name": "\u9762\u58c1\u80054\u53f7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": " _**Kruscal\u4ec0\u4e48\u7684\u771f\u7684\u662f\u592a\u597d\u4e86**_ \n - \u672c\u849f\u84bb\u521a\u4e00\u4e0a\u624b\u8868\u793a\u4e00\u8138\u61f5\u903c\uff0c\u540e\u6765\u8bf7\u6559\u5927\u4f6c\uff0c\u53d1\u73b0\u6838\u5fc3\u6b65\u9aa4\u5c31\u662f\u5e76\u67e5\u96c6\u561b\uff0c\u77ac\u95f4\u5f00\u5fc3\u4e86\u8bb8\u591a\u5462\n - \u9996\u5148\u5e76\u67e5\u96c6\u8fd9\u79cd\u4e1c\u897f\u7684\u6a21\u677f\u5f88\u5e38\u89c1\uff0c\u672c\u849f\u84bb\u603b\u7ed3\uff0c\u5e76\u67e5\u96c6\u7684\u6b65\u9aa4\u5206\u4e3a**\u67e5\u627e \u5224\u65ad \u5408\u5e76 \u521d\u59cb\u5316\uff08\u4e3b\u7a0b\u5e8f\u4e2d\uff09**\n ```\nint  find(int x)//\u67e5\u627e \n{\n\tif(f[x]==x)//f\u6570\u7ec4\u5b58\u7684\u662fx\u7684\u7238\u7238\uff0c\u8fd9\u91cc\u662f\u8bf4\u5982\u679cx\u7684\u7238\u7238\uff08\u6839\u8282\u70b9\uff09\u662f\u4ed6\u81ea\u5df1\uff0c\u90a3\u5c31\u8fd4\u56de\u4ed6\u81ea\u5df1\u7684\u503c\n\treturn x;\n\telse return f[x]=find(f[x]);\n    //\u5982\u679c\u4ed6\u7238\u7238\u4e0d\u662f\u81ea\u5df1\uff0c\u8c03\u7528\u9012\u5f52\uff0c\u8fd4\u56de\u7ee7\u7eed\u641c\u7d22\u4ed6\u7684\u7238\u7238\n}\nvoid unite(int x,int y)//\u5224\u65ad\u662f\u5426\u5728\u4e00\u4e2a\u6811\uff0c\u5408\u5e76 \n{\n\tx=find(x);\n\ty=find(y);\n\tif(find(x)!=find(y))\n\tf[x]=y;//\u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u6811\uff0c\u5c06x\u7684\u7238\u7238\u6307\u5411y\n\treturn ;\n}\nint main()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tf[i]=i;//\u521d\u59cb\u5316\n\t}\n```\n\u7136\u540e\u5c31\u662f\u5e26\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\u672c\u849f\u84bb\u7684\u65b9\u6cd5\u662fkruscal,\u4f46\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u65b9\u6cd5\u3002kruscal\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\u4e3b\u8981\u601d\u8def\u5982\u4e0b\n1. \u9996\u5148\u8981\u5c06\u8f93\u5165\u7684\u8fb9\u6743\u6392\u5e8f\uff0c\u6bd5\u7adf\u8981\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n2. \u7136\u540e\u5c31\u662f\u5e76\u67e5\u96c6\u6a21\u677f\u7684\u5957\u7528\u4e86\uff0c\u6392\u5b8c\u5e8f\u540e\u5148\u641c\u6700\u5c0f\u8fb9\uff0c\u7136\u540e\u5efa\u7acb\u6811\uff0c\u518d\u641c\u7d22\u7b2c\u4e8c\u5c0f\u7684\u8fb9\uff0c\u5982\u679c\u4ed6\u4fe9\u4e0d\u5728\u4e00\u4e2a\u6811\u91cc\uff0c\u5c31\u8fde\u63a5\u4ed6\u4eec\n3. \u5f53\u8fb9\u6bd4\u70b9\u5c0f\u4e00\u4e2a\u5c31\u5efa\u597d\u4e86\u6700\u5c0f\u751f\u6210\u6811\n```\n#include<cstdio>\n#include<cstrin>\n#include<algorithm>\n#include<cmath>\nusing namespace std;\nstruct node{\n//\u8fd9\u91cc\u662f\u7ed3\u6784\u4f53\uff0c\u672c\u849f\u84bb\u8ba4\u4e3a\u8fd9\u4e2a\u5bf9\u4e8e\u591a\u4e2a\u4fe1\u606f\uff0c\u50cf\u6811\u8fd9\u79cd\u6709\u70b9\u6709\u8fb9\u7684\uff0c\u8fd8\u662f\u6bd4\u8f83\u597d\u7528\u7684\n\tint x;int y;int z;\n};\nnode a[200010];\nint zx,zy,f[5010],sum,cnt;\nint n,m;//n\u4e2a\u7ed3\u70b9\uff0cm\u6761\u65e0\u5411\u8fb9 \nint find(int x)\n{\n    if(f[x]==x)\n    return x;\n    else return find(f[x]);\n}\nbool cmp(node a,node b)//\u7ed3\u6784\u4f53\u6392\u5e8f\u9700\u8981\u8fd9\u4e2a\u4e1c\u4e1c\n{\n\treturn a.z<b.z;\n}\nvoid krusal()//\u6838\u5fc3\u4ee3\u7801\n{\n\tsort(a+1,a+m+1,cmp);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tzx=find(a[i].x);\n\t\tzy=find(a[i].y);\n\t\tif(zx==zy)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\tsum=a[i].z+sum;//\u7d2f\u8ba1\u6700\u5c0f\u8fb9\n\t\tf[zx]=zy;\n\t\tif(++cnt==n-1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tf[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\t\t\t           scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].z);\n\t}\n\tkrusal();\n\tif(cnt==n-1)\n\t{\n\t\tprintf(\"%d\",sum);\n\t}\n\telse printf(\"orz\");\n\treturn 0;\n}\n```",
        "postTime": 1541187289,
        "uid": 87634,
        "name": "Aiden\u90b1\u79cb\u79cb",
        "ccfLevel": 0,
        "title": "\u6700\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "\n# Prim+heap\n\u5e93\u514b\u65af\u79d1\u62c9\u592a\u7b80\u5355\u4e86,\u8fd8\u662f\u7528Prim\u5427...\n\nheap+Prim\u542c\u8bf4\u5f88\u5feb,\u5176\u5b9e\u5427...\n\n---\n## Prim\n\u5148\u524d\u6211\u88ab\u5176\u4ed6\u4eba\u7684\u9898\u89e3\u641e\u8499\u4e86,Prim\u96be\u4e0d\u6210\u5c31\u662f**\u627e\u51fa\u6700\u77ed\u8fb9\u7136\u540e\u518d\u52a0?**\n\n\u90a3\u8ddf\u5e93\u514b\u65af\u79d1\u62c9\u6709\u4ec0\u4e48\u533a\u522b?????\n\n\u7136\u540e\u4ed4\u7ec6\u8150\u8d25...\u53d1\u73b0Prim\u7684\u771f\u6b63\u542b\u4e49\u662f:\n```psacal\n1.\u5047\u5982\u6211\u5df2\u7ecf\u6709\u4e00\u4e2a\u5c40\u90e8\u7684\u6700\u5c0f\u751f\u6210\u6811,\u540d\u5b57\u53eb\u505aA\u3002(\u4e00\u4e2a\u96c6\u5408)\n\n2.\u6709\u4e00\u4e9b\u6ca1\u6709\u8fde\u7684\u8fb9(\u5e76\u4e14\u5728A\u65c1\u8fb9(\u4e0eA\u8fde\u901a\u4f46\u662f\u6ca1\u6709\u8ba1\u5165ans)),\u53eb\u505aB\u3002(\u4e00\u4e2a\u96c6\u5408)\n3.\u4f60\u4f1a\u53d1\u73b0,\u6211\u7684A\u4f1a\u548cB\u662f\u76f8\u8fde\u7684,\u8fb9\u6743\u4e3amincost[B]\u3002\n\n4.\u6709\u4e00\u4e9b\u6ca1\u6709\u8fde\u7684\u8fb9(\u4e0d\u518dA\u65c1\u8fb9???),\u53eb\u505aC\u3002(\u4e00\u4e2a\u96c6\u5408)\n5.\u4f60\u4f1a\u53d1\u73b0,\u6211\u7684A\u4f1a\u548cC\u4e0d\u76f8\u8fde,\u8fb9\u6743\u5e94\u8be5\u4e3a mincost[C]:=maxlongint;\n```\n\u5bf9\u4e8eA,B,C,\u6211\u4eec\u6709\u4ec0\u4e48\u64cd\u4f5c?\n\n```psacal\n1.\u627e\u51fa\u4e00\u4e2a\u901a\u5411B\u6700\u77ed\u7684\u8fb9,\u628a\u5b83\u8fde\u8d77\u6765(\u52a0\u5165A),\u8ba1\u5165ans\u3002\n2.\u8fd9\u65f6,\u6709\u53ef\u80fd\u6709\u901a\u5230B\u7684\u66f4\u4f18\u89e3!!\u66f4\u65b0\u4e00\u4e9bmincost[B]\u3002(min)\n3.\u8fd9\u65f6,\u6709\u53ef\u80fd\u4f1a\u901a\u5230C!! \u4e00\u4e9bmincost[C]\u80fd\u8fde\u901a\u4e86!! \u53d8\u4e3aB\u3002\n```\n\n\u54c7,\u795e\u5947\u3002\n\n---\n\n## Heap\n\u5927\u5bb6\u90fd\u77e5\u9053,\u666e\u901a\u7ef4\u62a4Heap\u662flog(n),\u800c\u6c42\u51fa\u6700\u5c0f\u503c,\u53ea\u9700\u8981O(1)!\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528heap\u6027\u8d28\u6765\u6c42\u51faA\u5230B\u7684\u6700\u77ed\u8fb9!\u53ea\u9700\u8981\u628amincost\u52a0\u5165(\u5f53\u7136\u4f60\u60f3mincost\u66f4\u65b0\u4e86\u600e\u4e48\u529e?\u51c9\u62cc!\u518d\u52a0\u5165\u4e00\u6b21,\u53cd\u6b63\u53c8\u4e0d\u4f1a\u600e\u6837...)\n\n\u8be6\u89c1\u4ee3\u7801?\n\n---\n\n## Code\n```pascal\n// luogu-judger-enable-o2\nUses math;\nvar\n        n,m,ans,tot,num:longint;\n        ask:array[1..5010] of shortint;\n        mincost,cnt:array[1..5010] of longint;\n        heap:array[1..2,1..800010] of longint;\n        right,sum,next:array[1..800010] of longint;\n\nprocedure down(x:longint);\nvar\n        son:longint;\n        t:longint;\nbegin\n        if x*2>num then\n                exit;\n        son:=x*2;\n        if (son+1<=num)and(heap[2,son+1]<=heap[2,son]) then\n                inc(son);\n        if (heap[2,x]>heap[2,son]) then\n        begin\n                t:=heap[2,x];\n                heap[2,x]:=heap[2,son];\n                heap[2,son]:=t;\n                t:=heap[1,x];\n                heap[1,x]:=heap[1,son];\n                heap[1,son]:=t;\n        end;\n        down(son);\nend;\n\nprocedure insert(x:longint);\nvar\n        fa,t:longint;\nbegin\n        fa:=x div 2;\n        if (fa>0)and(heap[2,fa]>heap[2,x]) then\n        begin\n                t:=heap[2,fa];\n                heap[2,fa]:=heap[2,x];\n                heap[2,x]:=t;\n                t:=heap[1,fa];\n                heap[1,fa]:=heap[1,x];\n                heap[1,x]:=t;\n                insert(fa);\n        end;\nend;\n\nprocedure add(x,y,sum_:longint);\nbegin\n        inc(tot);\n        right[tot]:=y;\n        sum[tot]:=sum_;\n        next[tot]:=cnt[x];\n        cnt[x]:=tot;\nend;\n\nprocedure start;\nvar\n        i,j:longint;\n        srx:array[1..3] of longint;\nbegin\n        read(n,m);\n        for i:=1 to n do\n        begin\n                cnt[i]:=-1;\n                ask[i]:=-1;\n                mincost[i]:=maxlongint;\n        end;\n\n        tot:=0;\n        for i:=1 to m do\n        begin\n                for j:=1 to 3 do\n                        read(srx[j]);\n                add(srx[1],srx[2],srx[3]);\n                add(srx[2],srx[1],srx[3]);\n        end;\n\n        mincost[1]:=0;\n        ask[1]:=1;\n        i:=cnt[1];\n        while i<>-1 do\n        begin\n                mincost[right[i]]:=min(mincost[right[i]],sum[i]);\n                inc(num);\n                heap[1,num]:=right[i];\n                heap[2,num]:=mincost[right[i]];\n                insert(num);\n                i:=next[i];\n        end;\nend;\n\nprocedure Prim;\nvar\n        i,minway,head,rope:longint;\nbegin\n        rope:=0;\n        repeat\n                head:=heap[1,1];\n                minway:=heap[2,1];\n                if ask[head]=-1 then\n                begin\n                        ask[head]:=1;\n                        inc(ans,minway);\n                        inc(rope);\n\n                        heap[1,1]:=heap[1,num];\n                        heap[2,1]:=heap[2,num];\n                        dec(num);\n                        down(1);\n\n                        i:=cnt[head];\n                        while i<>-1 do\n                        begin\n                                if sum[i]<mincost[right[i]] then\n                                begin\n                                        mincost[right[i]]:=sum[i];\n                                        inc(num);\n                                        heap[1,num]:=right[i];\n                                        heap[2,num]:=mincost[right[i]];\n                                        insert(num);\n                                end;\n                                i:=next[i];\n                        end;\n                end\n                else\n                begin\n                        heap[1,1]:=heap[1,num];\n                        heap[2,1]:=heap[2,num];\n                        dec(num);\n                        down(1);\n                end;\n        until rope=n-1;\n        writeln(ans);\nend;\n\nbegin\n        Start;\n        Prim;\nend.\n```",
        "postTime": 1525514509,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u4e2a\u4eba\u8ba4\u4e3a\u5728\u8fd9\u91cc\u514b\u9c81\u5179\u5361\u5c14\u7b97\u6cd5\u597d\u505a\u4e00\u70b9\n\n1.\u5728\u56fe\u4e2d\u627e\u5230\u6700\u77ed\u8fb9\n\n\u4e3a\u6b64\u5728\u8bfb\u5165\u540e\u8fdb\u884c\u6392\u5e8f\n\nc++\u7528sort\u5c31\u597d\n\n2.\u5224\u65ad\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u8054\u901a\n\n1.\u5efa\u7acbfather\u6570\u7ec4,father[i]\u8868\u793ai\u7684\u7236\u4eb2,\u521d\u59cb\u81ea\u5df1\u4e3a\u7236\u4eb2\n\n2.\u5e76\u67e5\u96c6\n\n1.\u67e5\u96c6\uff08\u8def\u5f84\u4f18\u5316\uff09\u9012\u5f52\u5b9e\u73b0\n\n1\u51fd\u6570find(long long i):\u5982\u679cfather[i]==i\u5373\u7236\u7ed3\u70b9\u662f\u81ea\u5df1\uff08\u6ca1\u6709\u7236\u7ed3\u70b9\uff09\n\n\u8fd4\u56dei\n\n\u5426\u5219  father[i] = find(father[i]; //\u6811\u4f1a\u9000\u5316\u6210\u94fe\u8868\uff0c\u6240\u4ee5\u8981\u8def\u5f84\u4f18\u5316\n\n                                 return find(father[i]);\n\n2.\u5e76\u96c6    (long long a,long long b) father[find(b)] = find(a);  //\u53f3\u5e76\u5de6\n\n3.\u4e0d\u8fde\u901a:\u5e76\u96c6 \u603b\u548c+=\u8fb9\u6743\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;  //\u4e07\u80fd\u5934\u6587\u4ef6\ntypedef long long ll; \nll n, m; //\u70b9\u6570 \u8fb9\u6570\nll i, j; //\u5faa\u73af\u53d8\u91cf\nll total;//\u603b\u548c\nll fa[5000];//father[i]\u4e3ai\u7684\u7236\u4eb2\nstruct node {\n    ll a;\n    ll b;\n    ll size;\n}lines[200001];//\u7ed3\u6784\u4f53 \u8fb9 a,b\u4e3a\u8054\u901a\u7684\u9876\u70b9 size\u4e3a\u8fb9\u6743\nbool cmp(node c, node d) { return c.size < d.size; }//\u5feb\u6392\nint find(ll point) {\n    if (fa[point] == point) return point;\n    else { fa[point] = find(fa[point]); //\u9632\u6b62\u9000\u5316 \u8def\u5f84\u538b\u7f29 \u5c06\u5f53\u524d\u7684\u70b9\u76f4\u63a5\u8fde\u5230\u7236\u7ed3\u70b9\n            return find(fa[point]); }\n```\n}\u67e5\u96c6\n\nvoid Uninon(ll a, ll b) {\n\n    fa[find(b)] = find(a);\n\n}//\u5e76\u96c6\n\n\n```cpp\nint main() {\n//    freopen(\"MST.in\", \"r\", stdin);\n//    freopen(\"MST.out\", \"w\", stdout); \u6d1b\u8c37\u4e0d\u5174\u8fd9\u4e2a\n    cin >> n >> m;//\u70b9\u6570 \u8fb9\u6570\n    for (i = 1; i <= m; i++) cin >> lines[i].a >> lines[i].b >> lines[i].size;//\u8f93\u5165\u8fb9\n    sort(lines + 1, lines + m + 1, cmp);//\u5feb\u6392\n    for (i = 1; i <= n; i++)\n        fa[i] = i;//\u5c06\u7236\u7ed3\u70b9\u7f6e\u4e3a\u81ea\u5df1\u8868\u793a\u662f\u6839\u8282\u70b9\n    for (i = 1; i <= m; i++) {\n        if (!(find(lines[i].a) == find(lines[i].b))) {//\u5982\u679c\u672a\u8054\u901a\n            Uninon(lines[i].a, lines[i].b);//\u5e76\u96c6\n            total += lines[i].size;//\u52a0\u6743\u503c\n```\n}//\u6838\u5fc3\n\n\n```cpp\n    }\n    cout << total;//\u8f93\u51fa\n    return 0;\n}\n\n```",
        "postTime": 1512286825,
        "uid": 8494,
        "name": "Ikaros",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8fd9\u91cc\u7528\u514b\u9c81\u5179\u5361\u5c14\u7b97\u6cd5\n\n\u7528\u5e76\u67e5\u96c6\u7684\u601d\u8def\n\n\u627e\u5230\u8fd9\u4e2a\u56fe\u7684\u603b\u5171\u8fde\u901a\u4e86\u51e0\u4e2a\u70b9\n\n\u82e5\u5faa\u73af\u7ed3\u675f\u524d\u8fde\u901a\u5230\u4e86n\u4e2a\u70b9\u5c31\u4ee3\u8868\u662f\u8fde\u901a\u7684\u56fe\n\n\u5426\u5219\u4e0d\u8fde\u901a\n\n\u7528sum\u6570\u7ec4\u5b58\u653e\u5df2\u7ecf\u8fde\u901a\u4e86\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u8fde\u901a\u4e86\u51e0\u4e2a\u70b9\n\n\u9644\u4e0a\u4ee3\u7801:\n\n\n\n        \n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std; \nstruct note\n{\n    int start;\n    int end;\n    int time;    \n};\nint cmp(const note &a,const note &b)\n{ \n    if(a.time<b.time)\n        return 1;\n    return 0;\n}\nint f[5001],n,m,k,s,tt,sum[5001];\nstruct note x[200001];\nint getf(int v)\n{\n    if(f[v]==v)\n        return v;\n    else\n    {\n        f[v]=getf(f[v]);\n        return f[v];\n    }\n}\nvoid merge(int v,int u)\n{\n    int t1,t2;\n    t1=getf(v);\n    t2=getf(u);\n    if(t1!=t2)\n    {\n        f[t2]=t1;\n        sum[t1]=sum[t2]+sum[t1];\n        tt=tt+s;\n    }\n    return;\n}\nint main()\n{\n    int i,flag=0;\n    scanf(\"%d %d\",&n,&m);\n    for(i=1;i<=n;i++)\n        f[i]=i,sum[i]=1;\n    for(i=1;i<=m;i++)\n        scanf(\"%d %d %d\",&x[i].start,&x[i].end,&x[i].time);\n    sort(x+1,x+1+m,cmp);\n    for(i=1;i<=m;i++)\n    {\n        s=x[i].time;\n        merge(x[i].start,x[i].end);\n        if(sum[getf(x[i].start)]==n)\n        {\n            flag=1;\n            break;\n        }\n    }\n    if(flag==1)\n        printf(\"%d\",tt);\n    else\n        printf(\"orz\");\n    return 0;\n}\n\n```",
        "postTime": 1506441024,
        "uid": 50748,
        "name": "chenzijie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u88f8\u7684Kruskal\uff0c\u53ea\u662f\u6211\u60f3\u628a\u81ea\u5df1\u6389\u7684\u5751\u548c\u5927\u5bb6\u8bf4\u4e00\u8bf4\uff08MLE\u5927\u69824~5\u6b21\uff0c\u540e\u9762\u624d\u53d1\u73b0\u662f\u4ec0\u4e48\u539f\u56e0\uff09\n\n\u8be6\u7ec6\u89c1CODE\uff08\u6709\u89e3\u6790\uff09\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,ans=0,father[5001];\nstruct fkt{int x;int y;int value;}a[200001];\nbool cmp(fkt xx,fkt yy){//\u9996\u5148Kruscal\u7b97\u6cd5\u7684\u7ecf\u5178\u601d\u8def\u6709\u70b9\u7c7b\u4f3c\u8d2a\u5fc3\uff0c\u6211\u4eec\u9700\u8981\u6bcf\u6b21\u9009\u53d6\u6700\u4f18\u7684\u8fb9\u6254\u5230\u6211\u4eec\u7684\u96c6\u5408\u91cc\n    //\u6240\u4ee5\u6211\u4eec\u7528\u5230\u4e86\u5e76\u67e5\u96c6\u6765\u4f5c\u4e3a\u96c6\u5408\u7684\u5b58\u653e\u65b9\u5f0f\uff0c\u5148\u6392\u5e8f\u6765\u7c7b\u4f3c\u4e8e\u8d2a\u5fc3\u5730\u9009\u53d6\u6700\u5c0f\u7684\u8fb9\n    //\u80af\u5b9a\u6700\u5c0f\u7684\u8fb9\u662f\u6700\u4f18\u7684\uff0c\u2235\u5fc5\u7136\u5b58\u5728N-1\u6761\u8fb9\uff0c\u4e0d\u7136\u6ca1\u610f\u4e49\u554a\uff0c\u8fd9\u9898\u6570\u636e\u8fd8\u662f\u6bd4\u8f83\u6c34\uff0c\u6ca1\u6709\u8f93\u51faorz\u7684\u4f8b\u5b50\uff0c\u6240\u4ee5\u6211\u7684\u4ee3\u7801\u4e5f\u6ca1\u6709\u5224\u65adorz\u3002\u3002\u3002 \n    return xx.value<yy.value;\n}\nint find_fa(int x){//\u5e76\u67e5\u96c6\u4e4b\u627e\u7238\u7238\uff08\u7b80\u7565\u8df3\u8fc7\uff09 \n    if(father[x]!=x) \n        father[x]=find_fa(father[x]);    //\u6211\u5c31\u662f\u5728\u8fd9\u91cc\u7ffb\u8f66\u7684\u554aQAQ    \u5927\u5bb6\u8bb0\u4f4f\n                                        //\u627e\u7238\u7238\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u662ffather[x]=find_fa(father[x])\n                                        //\u627e\u7238\u7238\u7684\u65f6\u5019\u4e00\u5b9a\u4e0d\u8981father[x]=find_fa(x) \u2235\u8fd9\u6837\u4f60\u7684\u51fd\u6570\u7b49\u4e8e\u4e00\u76f4\u65e0\u9650\u5faa\u73af\u4e0b\u53bb\uff0c\u5bfc\u81f4MLE\u7684\u7ed3\u5c40TAT \n    return father[x];\n}\nvoid unionn(int x,int y){//\u5e76\u67e5\u96c6\u4e4b\u5408\u5e76\uff08\u7b80\u7565\u8df3\u8fc7\uff09 \n    x=find_fa(x);\n    y=find_fa(y);\n    father[y]=x;\n    return;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)    father[i]=i;//\u5e76\u67e5\u96c6\u4e4b\u521d\u59cb\u5316 \n    for(int i=1;i<=m;i++)//\u8bfb\u5165 \n        scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].value);\n    sort(a+1,a+m+1,cmp);//\u8d2a\u5fc3\u6392\u5e8f \n    n--;//\u6211\u4eec\u6700\u591a\u53ea\u4f1a\u6709N-1\u6761\u8fb9\u5c31\u53ef\u4ee5\u6700\u5c0f\u751f\u6210\u6811 \n    for(int i=1;i<=m;i++){//\u5f00\u59cb\u627e\uff0cKruskal\u8fd0\u7528\u7684\u662f\u627e\u8fb9\u7684\u65b9\u5f0f \n        int xxx=find_fa(a[i].x),yyy=find_fa(a[i].y);//\u9996\u5148\u5224\u65ad\u6211\u8fd9\u4e24\u4e2a\u70b9\u6709\u6ca1\u6709\u5728\u540c\u4e00\u96c6\u5408\u5185\uff08\u5982\u679c\u5728\u540c\u4e00\u96c6\u5408\u5185\u8bf4\u660e\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u7136\u5b58\u5728\u4e00\u6761\u8def\u5f84\u53ef\u4ee5\u8054\u901a\uff09 \n        if(xxx!=yyy){//\u5982\u679c\u4e0d\u8fde\u901a\u5c31\u628a\u5b83\u8fde\u8d77\u6765 \n            ans+=a[i].value;//\u8bb0\u5f55\u7b54\u6848 \n            unionn(a[i].x,a[i].y);//\u5408\u5e76\u4e24\u4e2a\u70b9\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u70b9\u5df2\u7ecf\u5728\u540c\u4e00\u96c6\u5408\u5185\u4e86 \n            n--;//\u6ee1\u8db3\u4e00\u6761\u6211\u4eec\u5220\u4e00\u6b21N \n        }\n        if(n==0)break;//\u627e\u5230\u4e86\u5c31\u9000\u51fa \n    }\n    printf(\"%d\\n\",ans);//\u8f93\u51fa\u7ed3\u679c \n    return 0;\n}\n\n```",
        "postTime": 1506259759,
        "uid": 28939,
        "name": "Lyrics",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "Kruskal\u662f\u4e00\u79cd\u7528\u5e76\u67e5\u96c6\u6765\u6784\u9020\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\n\n\n\u5c06\u4e00\u4e2a\u8fde\u901a\u5757\u5f53\u505a\u4e00\u4e2a\u96c6\u5408\n\n\u5148\u5c06\u6bcf\u4e00\u6761\u8fb9\u6309\u7167\u4ed6\u4eec\u7684\u6743\u503c\u6709\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7528algorithm\u91cc\u7684sort\u5feb\u6392\u5c31\u53ef\u4ee5\u5566\n\n\n\u4e00\u5f00\u59cb\u6bcf\u4e00\u4e2a\u70b9\u90fd\u662f\u5b64\u7acb\u7684\uff0c\u5206\u5c5e\u4e8en\u4e2a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\n\n\n\u63a5\u4e0b\u6765\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u8fde\u63a5\u7740\u4e24\u4e2a\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u5c31\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\u5c31\u8df3\u8fc7\uff0c\u76f4\u5230\u9009\u53d6\u4e86n-1\u6761\u8fb9\u4e3a\u6b62\u3002\n\n\n\u5e76\u67e5\u96c6\u4e00\u5b9a\u8981\u5c06\u5143\u7d20\u7684\u7236\u8282\u70b9\u6307\u6765\u6307\u53bb\u5730\u6307\uff08\u8def\u5f84\u538b\u7f29\uff09\uff0c\u4e00\u5b9a\u8981\u8def\u5f84\u538b\u7f29\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\u4e0d\u7136\u4f1a\u8d85\u65f6\uff01\uff01\n\n\n\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e0a\u4ee3\u7801\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nint fat[5001];\nint tot;\nstruct node{\n    int x,y,z;//\u7ed3\u6784\u4f53\u4fdd\u5b58\u8d77\u70b9x\uff0c\u7ec8\u70b9y\uff0c\u4ee5\u53ca\u8fb9\u6743z\n}f[200001];\nint find(int x)//\u8def\u5f84\u538b\u7f29\n{\n    if(fat[x]!=x) fat[x]=find(fat[x]);\n    return fat[x];\n}\nvoid unionn(int x,int y)//\u5408\u5e76\n{\n    int x1=find(x),y1=find(y);\n    if(x1==y1) return;\n    else fat[y1]=x1;\n}\nbool cmp(node a,node b)\n{\n    return a.z<b.z;//\u5feb\u6392\u7684\u89c4\u5219\n}\nint main()\n{\n    int m,n;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n        scanf(\"%d%d%d\",&f[i].x,&f[i].y,&f[i].z);\n    for(int i=1;i<=n;i++) fat[i]=i;//\u81ea\u5df1\u53eb\u81ea\u5df1\u7238\u7238\n    sort(f+1,f+m+1,cmp);//\u5feb\u6392\n    int k=0;//\u8ba1\u6570\n    for(int i=1;i<=m;i++)\n    {\n        if(find(f[i].x)!=find(f[i].y))//\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u5185\n        {\n            unionn(f[i].x,f[i].y);\n            tot+=f[i].z;//\u8ba1\u7b97\u6743\u503c\u548c\n            k++;\n        }\n    }\n    if(k<n-1) printf(\"orz\");//\u5224\u65ad\u662f\u5426\u8fde\u901a\n    else printf(\"%d\",tot);\n}\n```",
        "postTime": 1505797912,
        "uid": 24922,
        "name": "DEVILK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "## \u5206\u6790 ##\n\n\u8fd9\u9053\u9898\u76ee\u5462\uff0c\u5728\u5165\u95e8\u7684\u65f6\u5019\u8bb2\u8fc7prim\u7b97\u6cd5\u3002\u8fd9\u91cc\u5bf9\u4e8eprim\u7b97\u6cd5\u8fdb\u884c\u7b80\u5355\u7684\u4ecb\u7ecd\u3002prim\u7b97\u6cd5\uff0c\u5c31\u662f\u628a\u6240\u6709\u7684\u70b9\u5212\u5728A\u96c6\u5408\u91cc\u9762\uff0c\u7136\u540e\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u70b9\u5230B\u96c6\u5408\uff08\u6ee1\u8db3AB\u7ed3\u70b9\u7684\u4ea4\u53c9\u8fb9\u4fdd\u6301\u6700\u5c0f\uff09\u7136\u540e\u8fb9\u6570\u8fbe\u5230n-1\u7684\u65f6\u5019\u5c31\u6210\u529f\u4e86\u3002\n\n**\u514b\u9c81\u65af\u5361\u5c14\uff08\u8fd9\u4e2a\u65b9\u6cd5\u4f18\u79c0\u5f88\u591a\u554a\uff09**\n\n\u514b\u9c81\u65af\u5361\u5c14\u5c31\u662f\u57fa\u4e8e\u5e76\u67e5\u96c6\u7684\u3002\u628a\u6bcf\u4e2a\u70b9\u90fd\u770b\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u5bf9\u6bcf\u6761\u8fb9\u8fdb\u884c\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u5f53\u524d\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff08\u67e5\uff09\uff0c\u90a3\u5c31\uff0c\u5e76\u4ed6\uff1b\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\u5c31\uff0c\u4e0d\u8981\u4ed6\u3002\uff08\u54c8\u54c8\u54c8\u8fd8\u662f\u6211\u8bb2\u7684\u8d2a\u5fc3\u7b97\u6cd5\u7684\u5e94\u7528\uff09\n\n## \u4ee3\u7801 ##\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,cc=0,sum=0;\nstruct edge\n{\n    int l,r,v;\n}a[200200];\nint father[6000];\n\u4ee5\u4e0a\u662f\u53d8\u91cf\u8bf4\u660e\u90e8\u5206\na\u6570\u7ec4\u7528\u6765\u5b58\u653e\u6240\u6709\u7684\u8fb9\uff08\u5c31\u662f\u4e00\u4e2a\u8fb9\u8868\uff09\uff0cl\u548cr\u662f\u4e24\u4e2a\u7aef\u70b9\uff0cv\u662f\u6743\u503c\u3002\nfather\u6570\u7ec4\u7528\u6765\u5b58\u653e\u6240\u6709\u7ed3\u70b9\u7684\u7236\u4eb2\uff08\u6839\u7ed3\u70b9\uff09\ncc\u8bb0\u5f55\u5f53\u524d\u5df2\u7ecf\u8981\u4e86\u51e0\u6761\u8fb9\uff08\u4e3an-1\u6761\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7684\u6700\u5c0f\u751f\u6210\u6811\u5c31\u505a\u597d\u4e86\uff09\nsum\u7528\u6765\u8bb0\u5f55\u8fb9\u6743\u503c\u4e4b\u548c\u3002\nvoid read()\n{\n    scanf(\"%d%d\",&n,&m);\n    int x,y,z;\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&z);\n        a[i].l=x;\n        a[i].r=y;\n        a[i].v=z;\n    }\n//\u8bfb\u5165\u6570\u636e\u3002\u586b\u8fb9\u8868\n    for(int i=1;i<=n;i++)\n    father[i]=i;\n//\u5bf9father\u6570\u7ec4\u7684\u521d\u59cb\u5316\u3002\n}\n\u8bfb\u5165\u548c\u521d\u59cb\u5316\nbool mycmp(edge x,edge y)\n{\n    return x.v<y.v;\n}\nint getfather(int v)\n{\n    if(father[v]==v) return v;\n//\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\u7ed3\u70b9\u5c31\u662f\u81ea\u5df1\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u6839\u7ed3\u70b9\n    father[v]=getfather(father[v]);\n//\u538b\u7f29\u8def\u5f84\uff0c\u4f60\u61c2\u5f97\uff0c\u8bb0\u5fc6\u5316\u561b\u3002\n    return father[v];\n}\n\u83b7\u53d6\u6839\u7ed3\u70b9\nvoid un(int x,int y)\n{\n    int fx,fy;\n    fx=getfather(x);\n    fy=getfather(y);\n//\u83b7\u53d6\u4e24\u4e2a\u70b9\u7684\u6839\u7ed3\u70b9\n    father[fx]=fy;\n//\u7136\u540e\u4e00\u4e2a\u70b9\u7684\u6839\u7ed3\u70b9\u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u70b9\u7684\u6839\u7ed3\u70b9\u7684\u5b69\u5b50\u3002\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u5e76\u96c6\u3002\n}\n//\u5e76\u96c6\uff01\uff01\uff01\nbool judge(int x,int y)\n{\n    int fx,fy;\n    fx=getfather(x);\n    fy=getfather(y);\n    return fx!=fy;\n//\u83b7\u53d6\u4e24\u4e2a\u5143\u7d20\u7684\u6839\u7ed3\u70b9\uff0c\u5224\u65ad\u662f\u5426\u76f8\u7b49\n}\n//\u67e5\u70b9\nvoid work()\n{\n    for(int i=1;i<=m&&cc<=n-1;i++)\n    //cc\u5b58\u50a8\u5df2\u7ecf\u62e5\u6709\u7684\u8fb9\u6570\u3002\u6700\u591an-1\u6761\n    if(judge(a[i].l,a[i].r))\n    //\u5982\u679c\u6ca1\u6709\u5728\u4e00\u4e2a\u7ed3\u70b9\u91cc\u9762\u3002\n    {\n        un(a[i].l,a[i].r);\n        //\u5e76\n        cc++;\n        //\u8ba1\u6570\n        sum+=a[i].v;\n        //\u7d2f\u52a0\u6743\u503c\u548c\n    }\n}\nint main()\n{\n    read();\n    sort(a+1,a+1+m,mycmp);\n    //\u6309\u6743\u503c\u6392\u5e8f\n    work();\n    printf(\"%d\",sum);\n    return 0;\n}\n```",
        "postTime": 1505559069,
        "uid": 24081,
        "name": "Hydra_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u770b\u4e86\u4e00\u4e0b\u5176\u4ed6\u4ebaPrim\u5806\u4f18\u5316\u7684\u9898\u89e3\uff0c\u90fd\u7528STL\uff0cpas\u515a\u611f\u89c9\u5f88\u65e0\u5948\u554a\n\n\n\u6240\u4ee5\u6211\u518d\u53d1\u4e00\u4e2aPrim+heap \uff08\u624b\u6253\u7684\u5806\uff09\n\n\n\u518d\u8bf4\u7528\u60efSTL\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u6a21\u677f\u7684\u3002\u3002\n\n\nPrim+Heap \u901f\u5ea6\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\n\n\n\u57fa\u672c\u4e0a200ms\u5de6\u53f3\uff0c\uff0c\u6211\u8fd8\u6ca1\u7528\u90bb\u63a5\u8868\u5462\u3002\u3002\n\n\n\u8fd9\u91cc\u91c7\u7528\u90bb\u63a5\u77e9\u9635\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\n\n\n\u5176\u4e2d\n\nh\u6570\u7ec4\u662f\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\uff0c\u53ef\u4ee5\u5427\u6bcf\u6b21\u9009\u5806\u7684\u65f6\u95f4\u7f29\u77ed\u4e3alog m\n\n\ncur[i]\u8868\u793a\u9876\u70b9i\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\n\n\n\u5176\u4ed6\u7684\u5c31\u4e0d\u7528\u591a\u8bf4\u7684\u5427\uff0c\u90fd\u662fPrim\u7684\u57fa\u672c\n\n\n\u4e0d\u5e9f\u8bdd\uff0c\u4e0a\u4ee3\u7801\n\n\n``` pas\nconst INF=999999999;//\u6700\u5927\u503c\nconst MAXN=5000;\nconst MAXM=200000;\nvar \n    vis:array[1..MAXN+1] of boolean;\n    dis,h,cur:array[1..MAXN+1] of longint;\n    g:array[1..MAXN+1,1..MAXN+1] of longint;\n    n,m,i,j,sum,count,size,x,y,z:longint;\nprocedure swap(x,y:longint);//\u4ea4\u6362\u5806\u4e2d\u4e24\u4e2a\u9876\u70b9\u7684\u4f4d\u7f6e\nvar t:longint;\nbegin\n    t:=h[x];\n    h[x]:=h[y];\n    h[y]:=t;\n    t:=cur[h[x]];//\u540c\u6b65\u66f4\u65b0cur\n    cur[h[x]]:=cur[h[y]];\n    cur[h[y]]:=t;\nend;\nprocedure down(i:longint);//\u5411\u4e0b\u8c03\u6574\u51fd\u6570\nvar t:longint;\n    flag:boolean;\nbegin\n    flag:=true;//flag\u7528\u6765\u6807\u8bb0\u662f\u5426\u7ee7\u7eed\u8981\u5411\u4e0b\u8c03\u6574\n    while (i*2<=size)and(flag) do\n    begin\n    //\u5728\u81ea\u5df1\u548c\u5de6\u513f\u5b50\u3001\u53f3\u513f\u5b50\u4e2d\u9009\u4e00\u4e2a\u6700\u5c0f\u7684\n        t:=i;\n        if dis[h[i]]>dis[h[i*2]] then t:=i*2;\n        if ((i*2+1)<=size)and(dis[h[t]]>dis[h[i*2+1]]) then t:=i*2+1;\n        if t<>i then //\u5982\u679c\u4e0d\u662f\u81ea\u5df1\uff0c\u90a3\u5c31\u4ea4\u6362\u5b83\u4eec\n        begin\n            swap(t,i);\n            i:=t;//\u66f4\u65b0i\n        end \n        else flag:=false;//\u5426\u5219\u8bf4\u660e\u5f53\u524d\u7236\u8282\u70b9\u662f\u6700\u5c0f\u7684\uff0c\u5c31\u4e0d\u9700\u8981\u8c03\u6574\u4e86\n    end;\nend;\nprocedure up(i:longint);//\u5411\u4e0a\u8c03\u6574\nvar flag:boolean;\nbegin\n    flag:=true;\n    if i=1 then exit;//\u5982\u679c\u662f\u5728\u5806\u9876\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u9000\u51fa\n    while (i<>1)and(flag) do\n    begin\n        //\u5224\u65ad\u662f\u5426\u6bd4\u7236\u8282\u70b9\u5c0f\n        if dis[h[i]]<dis[h[i div 2]] then \n            swap(i,i div 2)\n        else \n            flag:=false;\n        i:=i div 2;//\u66f4\u65b0i\n    end;\nend;\nfunction top():longint;//\u53d6\u5806\u9876\uff0c\u4e5f\u5c31\u662fdis[i]\u6700\u5c0f\u7684\u90a3\u4e2ai\nvar t:longint;\nbegin\n    t:=h[1];//\u4fdd\u5b58\u5806\u9876\n    cur[t]:=0;\n    h[1]:=h[size];//\u5c06\u5806\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u8d4b\u5230\u5806\u9876\n    cur[h[1]]:=1;\n    size:=size-1;//\u5806\u7684\u5143\u7d20\u5c111\n    down(1);//\u56e0\u4e3a\u5806\u9876\u5df2\u7ecf\u6539\u52a8\uff0c\u4e3a\u4e86\u7ef4\u62a4\u6700\u5c0f\u5806\u7684\u7279\u6027\uff0c\u5fc5\u987b\u8c03\u6574\u4e00\u6b21\n    exit(t);\nend;\nbegin\n    readln(n,m);\n    //\u521d\u59cb\u5316\n    for i:=1 to n do\n        for j:=1 to n do\n            if i=j then g[i][j]:=0\n                else g[i][j]:=INF;\n    for i:=1 to m do\n    begin\n        readln(x,y,z);\n        if z<g[x][y] then //\u53bb\u91cd\u8fb9\n        begin\n            g[x][y]:=z;\n            g[y][x]:=z;\n        end;\n    end;\n    for i:=1 to n do g[i][i]:=0;//\u53bb\u81ea\u73af\n    for i:=1 to n do dis[i]:=g[1][i];//\u521d\u59cb\u5316dis\u6570\u7ec4\n    //\u521d\u59cb\u5316\u5806\n    size:=n;\n    for i:=1 to size do \n    begin\n        h[i]:=i;\n        cur[i]:=i;\n    end;\n    for i:=size div 2 downto 1 do down(i);\n    top();//\u5148\u5f39\u51fa\u4e00\u4e2a\u5806\u9876\u5143\u7d20\uff0c\u56e0\u4e3a\u6b64\u65f6\u5806\u9876\u662f\u4e00\u53f7\u9876\u70b9\n    //Prim \u7b97\u6cd5\u6838\u5fc3\u90e8\u5206\n    fillchar(vis,sizeof(vis),1);\n    vis[1]:=false;//\u5c06\u4e00\u53f7\u9876\u70b9\u52a0\u5165\u751f\u6210\u6811\n    count:=1;sum:=0;\n    while (count<n) do\n    begin\n        i:=top();//\u6839\u636e\u6700\u5c0f\u5806\u7684\u7279\u6027\uff0cdis[i]\u6700\u5c0f\u7684\u90a3\u4e2a\u9876\u70b9\u5c31\u5728\u5806\u9876\uff0c\u6240\u4ee5\u4e0d\u5fc5\u626b\u63cf\uff0c\u901a\u8fc7\u5806\u6765\u8282\u7701\u65f6\u95f4\uff0c\u907f\u514dTLE\n        vis[i]:=false;\n        inc(count);\n        sum:=sum+dis[i];\n        //\u626b\u63cf\u5f53\u524d\u9876\u70b9i\u7684\u6240\u6709\u8fb9\uff0c\u5e76\u8fdb\u884c\u677e\u5f1b\n        for j:=1 to n do \n            if (vis[j])and((g[i][j])<dis[j]) then\n            begin\n                dis[j]:=g[i][j];\n                up(cur[j]);//\u7531\u4e8edis[j]\u5df2\u7ecf\u53d8\u5c0f\u4e86\uff0c\u6240\u4ee5\u8981\u5c06\u5b83\u5411\u4e0a\u8c03\u6574\n            end;\n    end;\n    if count=n then writeln(sum) else writeln('orz');\n    //\u55ef\u8f93\u51fa\u597d\u795e\u5947\nend.\n```",
        "postTime": 1504093994,
        "uid": 16730,
        "name": "\u5fa1\u5742\u5fa1\u5742",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "```cpp\n#include<cstdio>\n#include<algorithm>\n#define N (5010) \n#define M (200010)\nusing namespace std;\n//\u5b9a\u4e49\u7ed3\u6784\u4f53\u5b58\u8fb9\uff0cx\u4e3a\u8d77\u70b9\uff0cy\u4e3a\u7ec8\u70b9\uff0cz\u4e3a\u503c\nstruct edge{\n    int x,y,z;\n}a[M];\nint fat[N],tot,ans;\nbool cmp(edge x,edge y){//\u7528\u4e8esort\u7684\u6392\u5e8f\uff0c\u6309\u503c\u6392\n    return x.z<y.z;\n} \nint ask(int x){//\u67e5\u627e\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\n        if (fat[x]!=x) fat[x]=ask(fat[x]);\n    return fat[x];\n}\nvoid unite (int x,int y){\n    int x1=ask(x),x2=ask(y);\n    if (x1==x2) return;\n    else fat[x1]=x2;\n}\nint main(){\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=m;i++) scanf(\"%d%d%d\",&a[i].x,&a[i].y,&a[i].z);\n    sort(a+1,a+m+1,cmp);//\u628a\u8fb9\u6309\u4ece\u5927\u5230\u5c0f\u6392\n    for (int i=1;i<=n;i++) fat[i]=i;//\u521d\u59cb\u5316\u5e76\u67e5\u96c6\n    for (int i=1;i<=m;i++){\n        if (ask(a[i].x)!=ask(a[i].y)){//\u514b\u9c81\u65af\u5361\u5c14\n            tot++;\n            ans=ans+a[i].z;\n            unite(a[i].x,a[i].y);\n        }\n    }\n    if (tot<n-1) printf(\"orz\");//\u5224\u65ad\u82e5tot=k-1\u5219\u751f\u6210\u4e86\u6700\u5c0f\u6811\n    else printf(\"%d\",ans);\nreturn 0;\n}\n```",
        "postTime": 1503927960,
        "uid": 9181,
        "name": "\u5305\u5b50\u5165\u4fb5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8fd9\u9898\u4e0d\u662f\u660e\u663e\u7684\u7a20\u5bc6\u56fe\uff08\u70b9\u5c11\uff0c\u8fb9\u591a\uff09\u5417\uff1f\n\n\u4e3a\u4ec0\u4e48\u4e0d\u7528prim\uff08\u70b9\u8d2a\u5fc3\uff09\uff1f \u867d\u7136prim\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u4e8ekruskal\uff08\u8fb9\u8d2a\u5fc3\uff09\uff0c\u4f46\u5728\u8fd9\u4e00\u9898\uff0c\u5b9e\u9645\u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u6162\u554a\uff01\n\n\u6211\u7684\u4ee3\u7801\u662f\u6734\u7d20\u7684prim\uff0c\u53ef\u80fd\u662f\u7528\u4e86STL\uff0c\u8dd1\u5f97\u975e\u5e38\u5feb\uff0c\u5728200ms\u5de6\u53f3\u3002\n\n\u697c\u4e0b\u4e4b\u6240\u4ee5TLE\uff0c\u53ef\u80fd\u662f\u6570\u7ec4\u6a21\u62df\u7684\u56fe\uff0c\u64cd\u4f5c\u592a\u6162\u3002\n\n\u601d\u8def\u4e0d\u5fc5\u591a\u8bb2\uff0c\u81ea\u884c\u627e\u8d44\u6599\u3002\n\n\n\u9644\u4e0ac++\u4ee3\u7801\uff1a\n\n\n\n\n\n```cpp\n#include <bits/stdc++.h>\n#define MAXV 5005\n#define INF 0x3fffffff\nusing namespace std;\nstruct Node\n{\n    int v ,w;\n    Node(int _v ,int _w) : v(_v) ,w(_w) {}\n};\nvector<Node> G[MAXV];\nint n ,m ,u ,v ,w;\nint d[MAXV];\nbool vis[MAXV];\nint prim();\nint main()\n{\n    scanf(\"%d%d\" ,&n ,&m);\n    for(int i=1 ;i<=m ;i++) {\n        scanf(\"%d%d%d\" ,&u ,&v ,&w);\n        G[u].push_back(Node(v ,w));\n        G[v].push_back(Node(u ,w));\n    }\n    int Ans=prim();\n    if(Ans==-1) printf(\"orz\");\n    else printf(\"%d\" ,Ans);\n    return 0;\n}\nint prim()\n{\n    fill(d ,d+MAXV ,INF);\n    d[1]=0;\n    int ans=0;\n    for(int i=1 ;i<=n ;i++) {\n        int u=-1 ,minn=INF;\n        for(int j=1 ;j<=n ;j++)\n            if(!vis[j] && d[j]<minn) {\n                u=j;\n                minn=d[j];\n            }\n        if(u==-1)   return -1;\n        vis[u]=true;\n        ans+=d[u];\n        for(int j=0 ;j<G[u].size() ;j++) {\n            int v=G[u][j].v;\n            if(!vis[v] && G[u][j].w<d[v])\n                d[v]=G[u][j].w;\n        }\n    }\n    return ans;\n}\n\n```",
        "postTime": 1503047377,
        "uid": 36517,
        "name": "ForwarDer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u554a\u3002\n\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4\u662f200000\uff0c\u592a\u5927\u4e86\u3002\u76f4\u63a5\u4e0akruskal\u7b97\u6cd5\u3002\u6bd5\u7adf\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4prim\u4f4e\u5f88\u591a\u554a\u3002\n\n\n\u5e76\u4e14kruskal\u5fc5\u987b\u8981\u7528\u5230\u5e76\u67e5\u96c6\uff0c\u8fd9\u5c31\u8981\u6c42\u6211\u4eec\u80fd\u591f\u719f\u7ec3\u638c\u63e1\u5e76\u67e5\u96c6\u7684\u4f7f\u7528\u3002\n\n\n\u800c\u4e14\u6211\u662f\u7528\u7684\u7ed3\u6784\u4f53\u5b58\u56fe\uff0c\u4e5f\u6ca1\u6709\u5411\u697c\u4e0b\u7684\u5927\u4f6c\u4e00\u6837\u7528\u5e76\u67e5\u96c6\u5b58\u56fe\u3002\n\n\n\u8fd9\u4e2a\u7a0b\u5e8f\u771f\u7684\u662f\u5f88\u9ebb\u70e6\u554a\uff0c\u5199\u4e86\u56db\u4e2a\u51fd\u6570\uff0c\u5177\u4f53\u89e3\u91ca\u90fd\u5728\u7a0b\u5e8f\u91cc\uff0c\u4ed4\u7ec6\u770b\u5427\u3002\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<algorithm>        //\u5934\u6587\u4ef6\n#define maxn 200010\nusing namespace std;\nint m,n,s,ans,tot;\nint xi,yi,zi,k;\nint f[maxn];\nstruct bian    //\u7ed3\u6784\u4f53\u5b58\u56fe\n{\n    int x;\n    int y;\n    int z;\n}a[200010];\nint cmp(bian a,bian b)  //\u7531\u4e8e\u662f\u8981\u7528\u5230\u7ed3\u6784\u4f53\u6392\u5e8f\uff0c\u6240\u4ee5\u624b\u5199\u4e86CMP\u51fd\u6570\n{\n    if(a.z<b.z)\n      return 1;\n    else\n      return 0;\n}\nint find(int i)     //\u5e76\u67e5\u96c6\u7684\u67e5\u627e\u51fd\u6570\n{\n    if(f[i]!=i)    //\u4e0d\u662f\u6839\u8282\u70b9\u5c31\u7ee7\u7eed\u5f80\u4e0b\u627e\n      f[i]=find(f[i]);\n    return f[i];\n}\nvoid unionn(int i,int j)     //\u5e76\u67e5\u96c6\u5408\u5e76\u51fd\u6570\n{\n    int la=find(i);\n    int lb=find(j);\n    if(la!=lb)              //\u5982\u679c\u6839\u8282\u70b9\u4e0d\u540c\uff0c\u5c31\u5408\u5e76\n      f[lb]=la;\n}\nint main()\n{\n    cin>>n>>m;\n    for(int i=1;i<=m;i++)\n      cin>>a[i].x>>a[i].y>>a[i].z;         //\u8f93\u5165\u6ca1\u6bdb\u75c5\n    sort(a+1,a+1+m,cmp);                //\u6392\u5e8f\n    for(int i=1;i<=n;i++)                     //\u521d\u59cb\u5316\uff0c\u9644\u521d\u503c\n      f[i]=i;\n    for(int i=1;i<=m;i++)                    //\u7b97\u6cd5\u5f00\u59cb\uff0c\u626b\u63cf\u6bcf\u4e00\u6761\u8fb9\n      {\n          if(find(a[i].x)!=find(a[i].y))   //\u5982\u679c\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u5c31\u5408\u5e76\n            {\n                unionn(a[i].x,a[i].y);     //\u5408\u5e76\n                tot+=a[i].z;                      //\u8ba1\u7b97\u603b\u6743\u503c\n                k++;                              //K\u662f\u5df2\u7ecf\u9009\u62e9\u7684\u8fb9\u6570\n            }\n          if(k==n-1)                            //\u56e0\u4e3a\u6700\u5927\u662fN-1\uff0c\u6240\u4ee5\u627e\u5230N-1\u5c31\u597d\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\u5c31\u53ef\u4ee5\u4e86\n            break;\n      }\n    if(k!=n-1)                                    //\u5224\u65ad\u4e0d\u8054\u901a\u56fe\n      cout<<\"orz\";\n    else\n      cout<<tot;\n    return 0;                                    //\u7ed3\u675f\n}\n```",
        "postTime": 1502956044,
        "uid": 16864,
        "name": "\u4e52\u4e53\u9ad8\u624b",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u660e\u663e\u662f\u5e76\u67e5\u96c6\n\n\u5982\u4f55\u5224\u65ad\u8fd9\u4e2a\u56fe\u662f\u5426\u8054\u901a\u5462\uff1f\u2014\u2014\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\n\n\u5c31\u662f\u627e\u603b\u5171\u7684\u8fde\u901a\u5757\u4e2a\u6570\n\n\u5982\u679c\u8fde\u901a\u5757\u4e2a\u6570\u4e3a1\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bf4\u660e\u8fd9\u662f\u4e2a\u8fde\u901a\u56fe\n\n\u4e0d\u662f\u5c31\u8f93\u51faorz\n\n\u7528\u4e00\u4e2aans\u6765\u5224\u65ad\u6b64\u56fe\u662f\u5426\u8054\u901a\n\nasn\u521d\u59cb\u503c\u4e3an\u8868\u660e\u521d\u59cb\u672a\u7ecf\u5408\u5e76\u65f6\u65f6\u7684\u8fde\u901a\u5757\u4e2a\u6570\u4e3an\n\n\u5728\u8fdb\u884c\u5e76\u67e5\u96c6\u64cd\u4f5c\u65f6\u8054\u901a\u4e24\u70b9\u5c31\u5bf9ans-1\n\n\u8868\u660e\u4e24\u4e2a\u56fe\u8fde\u901a\n\n\u8fd8\u6709\u4e00\u4e2acoin\u6765\u8bb0\u5f55\u4ef7\u503c\uff0c\u8054\u901a\u4e00\u4e2a\u5c31\u7d2f\u52a0c[i]\u4ef7\u503c\n\n\u6240\u4ee5\u8fd8\u8981\u5feb\u6392\n\n----------------------------------------------------------------------\n\n\n\n```cpp\nvar n,i,x,r1,r2,m,j,ans,coin:longint;\nfather,a,b,c:array[0..100000] of longint;\nprocedure sort(l,r:longint);\nvar\ni,j,x,y:longint;\nbegin\ni:=l;\nj:=r;\nx:=c[(l+r) div 2];\nrepeat\nwhile c[i]<x do\ninc(i);\nwhile x<c[j] do\ndec(j);\nif not(i>j) then\nbegin\ny:=a[i];\na[i]:=a[j];\na[j]:=y;\ny:=b[i];\nb[i]:=b[j];\nb[j]:=y;\ny:=c[i];\nc[i]:=c[j];\nc[j]:=y;\ninc(i);\ndec(j);\nend;\nuntil i>j;\nif l<j then\nsort(l,j);\nif i<r then\nsort(i,r);\nend;\nfunction find(x:longint):longint;\nbegin\nif father[x]<>x then father[x]:=find(father[x]);\nfind:=father[x];\nend;\nbegin\nreadln(n,m);\nfor i:=1 to m do\nreadln(a[i],b[i],c[i]);\nsort(1,m);//\u6309\u7167\u4ef7\u503c\u6392\u5e8f\nfor i:=1 to n do\nfather[i]:=i;\ni:=1;\nj:=1;\nans:=n;\nfor i:=1 to m do//\u5e76\u67e5\u96c6\u57fa\u672c\u64cd\u4f5c\nbegin\nr1:=find(a[i]);\nr2:=find(b[i]);\nif r1<>r2 then\nbegin\ncoin:=coin+c[i];//\u5982\u679c\u4e24\u4e2a\u56fe\u672a\u8fde\u63a5\uff0c\u800c\u73b0\u5728\u6709\u8def\uff0c\u5219\u8fde\u63a5\uff0c\u5e76\u7d2f\u52a0\u4ef7\u503c\nfather[r2]:=r1;\nans:=ans-1;/\u8fde\u901a\u540e\uff0c\u56fe\u7684\u4e2a\u6570\u51cf\u4e00\nend;\nend;\nif ans=1 then write(coin)//\u5982\u679c\u6700\u540e\u53ea\u6709\u4e00\u4e2a\u56fe\uff0c\u90a3\u4e48\u8f93\u4ef7\u503c\n           else write('orz');//\u4e0d\u7136orz\nend.\n\n```",
        "postTime": 1500104183,
        "uid": 32355,
        "name": "AuroraIris",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "**\u8fd9\u4e2a\u660e\u663e\u7684\u5c31\u662f\u6700\u5c0f\u751f\u6210\u6811**\n\n\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u6709prim\uff0ckruskal\n\n\u4eb2\u6d4b\u90fd\u80fdac\n\n\u63a8\u8350kruskal\n\nkruskal\u5982\u4e0b\uff1a\n\n\u2018\u2019#include<cstdio>\n\n```cpp\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N = 200001;\nint father[N];\nint n, m;\nstruct Node\n{\n    int value, a, b;\n}e[N];\nbool cmp(const Node& a, const Node& b)\n{\n    return a.value < b.value;\n}\nint find_(int x)        //\u5e76\u67e5\u96c6\u67e5\u627e \n{\n    int root = x;\n    while(father[root] != 0)\n        root = father[root];\n    while(root != x)\n    {\n        int temp = father[x];\n        father[x] = root;\n        x = temp;\n    }\n    return root;\n}\nvoid kruskal()\n{\n    int t = 1, costlenth = 0;        //t\u8868\u793a\u5df2\u5165\u6811\u7684\u8fb9\u6570\uff0ccostlenth\u8868\u793a\u751f\u6210\u6811\u6743\u503c\u603b\u548c \n    for(int i = 1; i <= m; i++)\n    {\n        int p = find_(e[i].a), q = find_(e[i].b);\n        if(p != q)                    //\u5408\u5e76\u96c6\u5408 \n        {\n            costlenth += e[i].value;\n            father[q] = p;\n            t++;\n            if(t == n)\n            {\n                printf(\"%d\\n\", costlenth);\n                return;\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1; i <= m; i++)\n        scanf(\"%d%d%d\", &e[i].a, &e[i].b, &e[i].value);\n    sort(e+1, e+m+1, cmp);            //\u5c06\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \n    kruskal();\n    return 0;\n}\n```",
        "postTime": 1499866857,
        "uid": 48717,
        "name": "gyf12138",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "**\u518d\u6765\u4e00\u53d1prim\u5806\u4f18\u5316\uff0c\u4e0d\u4e00\u6837\u7684**\n\n\\_prim\u7b97\u6cd5\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u5f00\u59cb\u65f6\u6240\u6709\u70b9\u90fd\u662f\u84dd\u70b9\uff08\u672a\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u5148\u9009\u62e9\u4efb\u610f\u4e00\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff0c\u5c06\u5b83\u6539\u4e3a\u767d\u70b9\uff08\u52a0\u5165\u6811\uff09\uff0c\u7136\u540e\u4e0d\u65ad\u5faa\u73af\u5bfb\u627e\u79bb\u767d\u70b9\u6700\u8fd1\u7684\u84dd\u70b9\uff0c\u79bb\u8fd9\u4e2a\u84dd\u70b9\u6700\u8fd1\u7684\u767d\u70b9\u5230\u8fd9\u4e2a\u84dd\u70b9\u7684\u8fb9\u5373\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u6761\u8fb9\uff0c\u5e76\u5c06\u8fd9\u4e2a\u84dd\u70b9\u6539\u4e3a\u767d\u70b9\uff08\u5c06\u5176\u52a0\u5165\u6811\uff09\uff0c\u76f4\u5230\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u6210\u4e3a\u767d\u70b9\uff08\u6240\u6709\u80fd\u5230\u8fbe\u7684\u70b9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff09\\_\n\n```cpp\n#include<cstdio>\n#include<queue>\nusing namespace std;\ntypedef long long LL;\nstruct Edge\n{\n    LL next,to,dis;\n    friend bool operator<(Edge a,Edge b)\n    {\n        return a.dis>b.dis;\n    }\n}edge[400001];//\u8fb9\u7684\u7c7b\u578b\npriority_queue<Edge> q;//\u4f18\u5148\u961f\u5217\uff0c\u4f9d\u7167\u5176\u4e2d\u8fb9\u7684\u6743\u503c\u6392\u5e8f \nLL num_edge,n,m,ans,node[5001];\nbool exist[5001];//\u5b58\u50a8\u4e00\u4e2a\u70b9\u662f\u5426\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\nint main()\n{\n    LL i,j,t1,t2,t3,k,num=1;\n    Edge x;\n    scanf(\"%lld%lld\",&n,&m);\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%lld%lld%lld\",&t1,&t2,&t3);\n        edge[++num_edge].next=node[t1];\n        edge[num_edge].to=t2;\n        edge[num_edge].dis=t3;\n        node[t1]=num_edge;\n        edge[++num_edge].next=node[t2];\n        edge[num_edge].to=t1;\n        edge[num_edge].dis=t3;\n        node[t2]=num_edge;//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\uff0c\u5efa\u7acb\u53cc\u5411\u8fb9\n    }\n    exist[1]=true;//\u9009\u62e9\u4efb\u610f\u4e00\u70b9\u4f5c\u4e3a\u8d77\u70b9\uff08\u6b64\u5904\u4e3a\u7b2c\u4e00\u4e2a\u70b9\uff09\uff0c\u5c06\u5176\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n    k=node[1];\n    while(k!=0)\n    {\n        q.push(edge[k]);\n        k=edge[k].next;\n    }//\u5c06\u4e0e\u7b2c\u4e00\u4e2a\u70b9\u76f8\u63a5\u7684\u8fb9\u52a0\u5165\u4f18\u5148\u961f\u5217\n    while(!q.empty()&&num<n)\n    {\n        x=q.top();//\u53d6\u51fa\u4e0e\u5df2\u7ecf\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u70b9\u76f8\u63a5\u7684\u8fb9\u4e2d\u6700\u77ed\u7684\u4e00\u6761\n        q.pop();\n        if(exist[x.to]==true) continue;//\u5982\u679c\u8be5\u8fb9\u7684\u76ee\u7684\u5730\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u5219\u4e0d\u7528\u518d\u6b21\u5c06\u76ee\u7684\u5730\u52a0\u5165\u6811\uff0c\u56e0\u6b64\u8df3\u8fc7\u6b64\u6761\u8fb9\n        num++;//num\u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u70b9\u7684\u6570\u91cf\n        ans+=x.dis;//\u6700\u5c0f\u8fb9\u6743\u4e4b\u548c\u52a0\u4e0a\u9009\u4e2d\u7684\u8fb9\u7684\u8fb9\u6743 \n        exist[x.to]=true;//\u8868\u793a\u6b64\u8fb9\u7684\u76ee\u7684\u5730\u5df2\u7ecf\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811 \n        k=node[x.to];\n        while(k!=0)\n        {\n            if(exist[edge[k].to]==false)\n                q.push(edge[k]);\n            k=edge[k].next;\n        }//\u53d6\u6240\u6709\u4e0e\u6b64\u8fb9\u7684\u76ee\u7684\u5730\u76f8\u63a5\u7684\u8fb9 \uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u7684\u76ee\u7684\u5730\u6ca1\u6709\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5219\u5c06\u8fb9\u52a0\u5165\u4f18\u5148\u961f\u5217 \n    }\n    if(num<n)\n        printf(\"orz\");//\u5982\u679c\u7ed3\u675f\u65f6\u5df2\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u7684\u70b9\u7684\u6570\u91cf\u5c0f\u4e8e\u70b9\u7684\u603b\u6570\u91cf\uff0c\u5219\u56fe\u4e0d\u662f\u8054\u901a\u56fe \n    else\n        printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1495517748,
        "uid": 28455,
        "name": "hehe_54321",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709prim\u5806\u4f18\u5316\u7684\uff0c\u53d1\u4e00\u4e2a\n\n\u5176\u5b9e\u5c31\u662f\u5728\u627e\u6700\u5c0f\u8fb9\u7684\u65f6\u5019\u76f4\u63a5\u7528\u5806\u6765\u50a8\u5b58\n\n\n```cpp\n#include <cstdio>\n#include <queue>\nstruct Node{\n    struct Edge{\n        Node *to;\n        int power;\n        Edge *next;\n        Edge(Node *to, int power, Edge *next) : to(to), power(power), next(next) {}\n    } *fe;\n    Node() : fe(0) {}\n    void push(Node *to, int power){\n        fe = new Edge(to, power, fe);\n    }\n}node[100001];\nstruct Cmp{\n    bool operator () (Node::Edge *a, Node::Edge *b){\n        return a->power > b->power;\n    }\n};\nint finally[100001], sum, n;\nvoid Prim(){\n    std::priority_queue<Node::Edge*, std::vector<Node::Edge*>, Cmp> que;\n    for(Node::Edge *e = node[1].fe; e; e = e->next)\n        que.push(e);\n    finally[1] = 1;\n    for(int i = 0; i < n - 1; i++){\n        Node::Edge *team;\n        team = que.top();\n        while(finally[team->to - node])\n            que.pop(), team = que.top();\n        sum += team->power;\n        finally[team->to - node] = 1;\n        for(Node::Edge *e = team->to->fe; e; e = e->next)\n            if(!finally[e->to - node])\n                que.push(e);\n    }\n}\nint main(int argc, char *argv[]){\n    int m;\n    scanf(\"%d%d\", &n, &m);\n    while(m--){\n        int c1, c2, c3;\n        scanf(\"%d%d%d\", &c1, &c2, &c3);\n        node[c1].push(node + c2, c3);\n        node[c2].push(node + c1, c3);\n    }\n    Prim();\n    printf(\"%d\", sum);\n    return 0;\n}\n```",
        "postTime": 1494138792,
        "uid": 29427,
        "name": "\u62d3\u62d3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u6700\u5c0f\u751f\u6210\u6811\u6709\u4e24\u79cd\u7b97\u6cd5\uff1aPrim \u548c Kruskal \u3002\n\n\u5f00\u59cb\u7684\u65f6\u5019\u60f3\u90fd\u6ca1\u60f3\uff0cPrim\u6734\u7d20\u7b97\u6cd5\uff0c\u7136\u540e T \u4e86\u4e09\u4e2a\u70b9\u3002\u3002\u3002\n\n\u7136\u540e\u5b66\u4e56\u4e86\uff0c\u5f00\u59cb\u7528 Kruskal \u7b97\u6cd5\uff0c\u6bd5\u7adf\u5e76\u67e5\u96c6\u901f\u5ea6\u80fd\u5feb\u4e00\u70b9\uff0c\u7136\u540e\u597d\u5bb9\u6613\u624d\u8fc7\u4e86\u3002\n\n\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a\u9898\u76ee\u65e8\u5728\u6559\u4f1a\u6211\u4eec\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u770b\u5230\u9898\u89e3\u533a\u91cc\u9762\u6709\u4e9b\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0d\u591f\u9ad8\uff0c\u4e8e\u662f\u628a\u81ea\u5df1\u7684\u849f\u84bb\u4ee3\u7801\u53d1\u4e0a\u6765\u3002\n\n\u8be5\u4ee3\u7801\u4e3a CPP \u4ee3\u7801 \uff0c \u867d\u7136\u6539\u6389\u5934\u6587\u4ef6\u5c31\u53ef\u4ee5\u7528 C99 \u6807\u51c6 \u3002\n\n\u4ee3\u7801\u524d\u534a\u90e8\u5206\u662fKruskal ( 100 )\uff0c \u540e\u534a\u90e8\u5206\u662f Prim ( 70 ) \u3002\n\n\u5177\u4f53\u7b97\u6cd5\u89e3\u91ca\u89c1\u6ce8\u91ca\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#define USING_PRIM // \u4f7f\u7528 Prim\u7b97\u6cd5\n#define USING_KRUSKAL // \u4f7f\u7528 Kruskal \u7b97\u6cd5\n#ifdef USING_KRUSKAL // \u9632\u6b62\u7b97\u6cd5\u51b2\u7a81 \uff0c \u4f18\u5148\u4fdd\u8bc1 Kruskal\n```\n#undef USING\\_PRIM\n    \n\n\n    \n    \n    \n\n\n\n\n\n\n```cpp\n#endif\n// \u4e0b\u9762\u7684\u4ee3\u7801\u65e0\u6cd5\u63d0\u4ea4\uff0c\u53ea\u80fd\u672c\u5730\u67e5\u770b\n#ifdef USING_PRIM\n    #pragma message(\"\u4f7f\u7528PRIM\u7b97\u6cd5\")\n#endif\n#ifdef USING_KRUSKAL\n    #pragma message(\"\u4f7f\u7528KRUSKAL\u7b97\u6cd5\")\n#endif\n// \u9664\u975e\u5220\u9664\u4e0a\u9762\u516d\u53e5\ntypedef struct tagLINK\n{\n    int X; // \u8d77\u70b9\n    int Y; // \u7ec8\u70b9\n    int W; // \u6743\u91cd\uff08\u957f\u5ea6\uff1f\uff09\n}LINK; // \u8fb9 \u7684\u7ed3\u6784\u4f53 \ntypedef LINK* PLINK; // \u8fb9\u6307\u9488\n#ifdef USING_PRIM \nint Prim( const int N , unsigned int** W ); // prim\u7b97\u6cd5\uff0c\u7ed9\u5b9a N \u548c \u6743\u91cd\u8868 \uff0c \u8fd4\u56de \u6700\u5c0f\u7684\u503c \uff0c \u82e5\u65e0\u6cd5\u8fde\u901a\u8fd4\u56de-1\nunsigned int** Prim_build_W( const int N , unsigned int** W ); // \u521d\u59cb\u5316\u6743\u91cd\u8868\uff08\u4e3a 0xFFFFFFFF\uff09\nvoid Prim_set_W( LINK link , unsigned int** W ); // \u8bbe\u7f6e\u6743\u91cd \uff0c \u5c06 link \u8fb9\u7684\u6743\u91cd\u8bbe\u7f6e\u8fdb W \u4e2d\n#endif\n#ifdef USING_KRUSKAL\nint Kruskal( const int N , const int M ,LINK* links ); //  Kruskal\u7b97\u6cd5\uff0c\u7ed9\u5b9a N \u548c \u6743\u91cd\u8868 \uff0c \u8fd4\u56de \u6700\u5c0f\u7684\u503c \uff0c \u82e5\u65e0\u6cd5\u8fde\u901a\u8fd4\u56de-1\nint Kruskal_cmp(const void* A , const void* B); // \u5feb\u6392\u6bd4\u8f83\u51fd\u6570\nint Kruskal_find(int* f , int x ); // \u5e76\u67e5\u96c6\u67e5\u627e\u51fd\u6570\nbool Kruskal_union(int* f , int a , int b ); // \u5408\u5e76 a \uff0c b \u4e24\u4e2a\u96c6\u5408\uff0c\u82e5 a\uff0cb\u5728\u7edf\u4e00\u96c6\u5408\u4e2d\uff0c\u5219\u8fd4\u56de false \uff0c \u5426\u5219\u8fd4\u56de true\u3002\n#endif\nint main()\n{\n    int N,M;\n    scanf(\"%d%d\",&N,&M);\n    PLINK links = (LINK*)calloc(M,sizeof(LINK)); // \u5206\u914d\u8fb9\u7684\u7a7a\u95f4\n    #ifdef USING_PRIM // prim\u7b97\u6cd5 \u5206\u914d\u6743\u91cd\u8868\u7a7a\u95f4\n    unsigned int **W = NULL ;\n    W = Prim_build_W(N,W);\n    #endif\n    for(int i=0;i<M;i++)\n    {\n        scanf(\"%d%d%d\",&links[i].X,&links[i].Y,&links[i].W); // \u8bfb\u5165\u8fb9\n        links[i].X -- , links[i].Y -- ; // \u5c06 1~N \u6807\u51c6\u5316\u4e3a 0 ~ N-1\n        #ifdef USING_PRIM // \u82e5\u4e3a PRIM \uff0c \u52a0\u5165\u8fb9\u81f3\u6743\u91cd\u8868\n        Prim_set_W( links[i] , W );\n        #endif\n    }\n    //\u4ee5\u4e0b\u516d\u884c\u4e3a \u4f7fcost\u7b49\u4e8e\u6700\u5c0f\u4ee3\u4ef7 \uff0c \u82e5cost==-1\uff0c\u5219\u4e0d\u53ef\u8fde\u901a\n    #ifdef USING_PRIM\n    int cost = Prim(N,W);\n    #endif\n    #ifdef USING_KRUSKAL\n    int cost = Kruskal(N,M,links);\n    #endif\n    if( cost ==-1 )printf(\"orz\\n\");\n    else printf(\"%d\",cost);\n}\n#ifdef USING_KRUSKAL\nint Kruskal( const int N , const int M ,LINK* links )\n{\n    int *f = (int*)calloc(N,sizeof(int)); // \u5e76\u67e5\u96c6\n    for(int i=0;i<N;i++)f[i] = i ; // \u5e76\u67e5\u96c6\u521d\u59cb\u5316\n    qsort(links,M,sizeof(LINK),Kruskal_cmp);\n    unsigned int LS = links[0].W ; // \u9996\u5148\u52a0\u5165\u6700\u77ed\u8fb9\n    Kruskal_union(f,links[0].X,links[0].Y); // \u5408\u5e76\n    int linked = 2 ; // \u5df2\u8fde\u63a5\u8fb9\u7684\u6570\u91cf\n    for(int i=1;i<M && linked < N ;i++)\n    {\n        if( Kruskal_union(f,links[i].X,links[i].Y) )\n        {\n            LS += links[i].W ;\n            linked ++ ;\n        }\n    }\n    free(f);\n    if( linked < N )return 0xFFFFFFFF; // \u82e5\u672a\u5b8c\u5168\u8fde\u63a5\uff0c\u8fd4\u56de -1 \n    return LS ;\n}\nbool Kruskal_union(int* f , int a , int b )//\u5e76\u67e5\u96c6\u7684\u5408\u5e76\u64cd\u4f5c\n{\n    int pa = Kruskal_find( f , a );\n    int pb = Kruskal_find( f , b );\n    if( pa == pb )return false ;\n    f[pa] = f[pb] ;\n    return true ;\n}\nint Kruskal_find(int* f , int x )\n{\n    if(f[x] != x)f[x] = Kruskal_find(f,f[x]);\n    return f[x];\n}\nint Kruskal_cmp(const void* A , const void* B)\n{\n    PLINK a = (PLINK)A , b = (PLINK)B ;\n    return a->W - b->W ;\n}\n#endif\n#ifdef USING_PRIM\nint Prim( const int N , unsigned int** W ) // prim\u51fd\u6570\n{\n    int *V = (int*)calloc(N,sizeof(int)); // \u5df2\u7ecf\u8fde\u901a\u7684\u8282\u70b9\n    bool* reach = (bool*)calloc(N,sizeof(bool)); // \u8bb0\u5f55\u662f\u5426\u8bbf\u95ee\u8fc7\u8282\u70b9\n    int SizeofV = 1 ; // \u5df2\u8bbf\u95ee\u8282\u70b9\u6570\n    int LS = 0; // \u6700\u77ed\u957f\u5ea6\n    reach[0] = true ;\n    for( ; SizeofV < N ; )\n    {\n        int best = 0 ; // \u6682\u65e0\u6700\u4f73\u9009\u62e9\n        unsigned length = 0xFFFFFFFF; // \u6700\u5c0f\u957f\u5ea6\u4e3a 0xFFFFFFFF\n        for(int i=0;i<SizeofV;i++)\n        {\n            for(int j=0;j<N;j++)\n            {\n                if(reach[j])continue; // \u82e5 j \u5728\u96c6\u5408\u4e2d\uff0c\u8df3\u8fc7\n                if( W[V[i]][j] < length ) // \u82e5\u53ef\u80fd\u4e3a\u6700\u77ed\u8fb9\n                {\n                    length = W[V[i]][j] ; // j \u4e3a\u6700\u4f73\u9009\u62e9\n                    best = j;\n                }\n            }\n        }\n        if( length == 0xFFFFFFFF )return 0xFFFFFFFF ; // \u82e5\u672c\u56de\u5408\u672a\u53d1\u73b0\u53ef\u8fde\u63a5\u7684\u672a\u8bbf\u95ee\u8fb9\uff0c\u8fd4\u56de-1\n        LS += length;\n        V[SizeofV] = best ;\n        SizeofV ++ ;\n        reach[best] = true ;\n    }\n    return LS; \n}\nunsigned int** Prim_build_W( const int N , unsigned int** W ) // \u6784\u5efa \u6743\u91cd\u8868\n{\n    W = (unsigned int**)calloc(N,sizeof(unsigned int*));\n    for(int i=0;i<N;i++)\n    {\n        W[i] = (unsigned int*)calloc(N,sizeof(unsigned int));\n        memset(W[i],0xFF,sizeof(unsigned int)*N);\n    };\n    return W;\n}\nvoid Prim_set_W( LINK link , unsigned int** W ) // \u8fde\u63a5\u8fb9\n{\n    if( W[link.X][link.Y] > link.W )W[link.X][link.Y] = W[link.Y][link.X] = link.W ; // \u9632\u6b62\u4e24\u70b9\u95f4\u6709\u591a\u6761\u8def\u5f84\n    return ;\n}\n#endif\n```",
        "postTime": 1493117031,
        "uid": 30310,
        "name": "RedContritio",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u76ee\u6d4b\u4e0a\u8fb9\u90fd\u662f\u6734\u7d20Kruskal\uff1f\n\n\u52a0\u4e2a\u6309\u79e9\u5408\u5e76\u73a9\u73a9...\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nconst int MAXN = 5000 + 10;\nconst int MAXM = 200000 + 10;\n\ninline int read() {\n    int x = 0, f = 1; char ch = getchar();\n    while(ch < '0' || ch > '9') {if(ch == '-') f = -1; ch = getchar();}\n    while(ch >= '0' && ch <= '9') {x = x * 10 + ch - '0'; ch = getchar();}\n    return x * f;\n}\n\nstruct node { int u, v, cost; }edge[MAXM];\nint fa[MAXN], rank[MAXN];\nint n, m;\n\ninline void init() { for(int i = 1; i <= n; ++i) fa[i] = i, rank[i] = 0; }\ninline int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\ninline bool cmp(node a, node b) { return a.cost < b.cost; }\ninline bool same(int x, int y) { return find(x) == find(y); }\ninline void unite(int x, int y) {\n    x = find(x), y = find(y);\n    if(x == y) return;\n    if(rank[x] < rank[y]) fa[x] = y;\n    else {\n        fa[y] = x;\n        if(rank[x] == rank[y]) rank[x]++;\n    }\n}\n\nint kruskal() {\n    sort(edge + 1, edge + m + 1, cmp);\n    init();\n    int res = 0;\n    for(int i = 1; i <= m; ++i) {\n        node e = edge[i];\n        if(!same(e.u, e.v)) {\n            unite(e.u, e.v);\n            res += e.cost;\n        }\n    }\n    return res;\n}\n\nint main() {\n    n = read(), m = read();\n    for(int i = 1; i <= m; ++i)\n        edge[i].u = read(), edge[i].v = read(), edge[i].cost = read();\n    int ans = kruskal(), tmp = find(1);\n    bool flag = false;\n    for(int i = 2; i <= n; ++i) if(find(i) != tmp) {\n        flag = true; break;\n    }\n    if(flag) puts(\"orz\\n\");\n    else printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1475725523,
        "uid": 18480,
        "name": "Sci_M3",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "/\\*\n\\* p3366\n\n\\* Au:Small\\_Ash\n\n\\* \u88f8\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\u3002\u3002\n\n\\* prim\u548c\u514b\u9c81\u65af\u5361\u5c14\u4efb\u4f60\u9009\n\n\\* \u56e0\u4e3a\u697c\u4e0a\u7684\u90fd\u662f\u514b\u9c81\u65af\u5361\u5c14\uff0c\u6211\u5c31\u53d1\u4e00\u4efdprim\u7684\u5427\n\n\\* \u4f46\u662f\u8981\u529d\u5404\u4f4d\uff0c\u8fd8\u662f\u5b66\u4e00\u4e0b\u90bb\u63a5\u8868\u518d\u6765\u7528prim\uff0c\u56e0\u4e3a\u7528\u90bb\u63a5\u77e9\u9635\u7684\u8bdd\uff0c\u975e\u7b80\u5355\u56fe\uff08\u5373\u6709\u91cd\u8fb9\uff09\u5c31\u4f1a\u70b8\uff08\u6211WA\u4e868\u6b21\u624d\u53d1\u73b0\u3002\u3002\u3002\uff09\n\n\\* \u5927\u6982\u601d\u8def\u5c31\u662f\u6bcf\u6b21\u627e\u4e00\u5934\u5728\u5df2\u641c\u7d22\u70b9\u96c6\u7684\u53e6\u4e00\u5934\u5728\u672a\u641c\u7d22\u70b9\u96c6\u7684\u6700\u5c0f\u8fb9\uff0c\u7136\u540e\u52a0\u5165\n\n\\* \u7531\u4e8e\u6bcf\u6b21\u90fd\u662f\u627e\u6700\u5c0f\u8fb9\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5806\u6765\u52a0\u5feb\u8fd0\u7b97\u3002\u3002\u3002\n\n\\* \u4e0a\u4ee3\u7801\uff1a\n\n\\*/\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <functional>//\u4f18\u5148\u961f\u5217\u5173\u952e\u5e93 \n#include <queue>//\u540c\u4e0a \nusing namespace std;\nstruct number{\n    int x,i;\n    bool operator < (const number &a) const {\n        return x>a.x;//\u6700\u5c0f\u503c\u4f18\u5148\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u662f\u5927\u6839\u5806\u7684\u8bf4\u3002\u3002\u3002 \n    }\n}A,B;//\u4e2d\u8f6c\u7ad9\u800c\u5df2 \npriority_queue <number> q;//\u5806 \nint map[5005][5005],n,m,a,b,c,ans;\nbool v[5005];\nint main(){\n    memset(v,false,sizeof(v));\n    memset(map,-1,sizeof(map));\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<m;i++){\n        scanf(\"%d%d%d\",&a,&b,&c);\n        if (map[a][b]==-1||c<map[a][b]) map[a][b]=c;\n        if (map[b][a]==-1||c<map[b][a]) map[b][a]=c;\n    }\n    v[1]=true;\n    for (int i=1;i<=n;i++)\n        if (map[1][i]!=-1){\n            A.x=map[1][i];\n            A.i=i;\n            q.push(A);\n        }\n    for (int i=1;i<n;i++){\n        if (q.empty()){\n            printf(\"orz\");\n            return 0;\n        }\n        B=q.top();\n        q.pop();\n        while (v[B.i]){\n            B=q.top();\n            q.pop();\n            if (q.empty()){\n                printf(\"orz\");\n                return 0;\n            }\n        }\n        ans+=B.x;\n        v[B.i]=true;\n        for (int j=1;j<=n;j++)\n        if (map[B.i][j]!=-1&&!v[j]){\n            A.x=map[B.i][j];\n            A.i=j;\n            q.push(A);\n        }\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1474870262,
        "uid": 745,
        "name": "dph754132771",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "**Kruskal\u7b97\u6cd5**\n\n\u5982\u679c\u4f60\u4e0d\u77e5\u9053Kruskal\u7b97\u6cd5\u5927\u6982\u957f\u5565\u6837\uff0c\u8bf7\u81ea\u884c\u67e5\u627e\u76f8\u5173\u8d44\u6599\uff08\u767e\u5ea6\u4e00\u5927\u5806\uff09\u3002\n\n\u6211\u7528\u662f\u5426\u80fd\u627e\u51fan-1\u6761\u8fb9\u6765\u5224\u65ad\u6709\u6ca1\u6709\u6210\u529f\u641e\u51fa\u6700\u5c0f\u751f\u6210\u6811\u3002\n\nps.\u6570\u636e\u4f3c\u4e4e\u6709\u70b9\u5f31\n\npascal\u4ee3\u7801\u5982\u4e0b\uff08\u53ef\u80fd\u5199\u5f97\u5e76\u4e0d\u6f02\u4eae\uff09\uff1a\n\n```pascal\nvar\nu,v,w:array[1..200000]of longint;//\u5b58\u653e\u8fb9E(u,v),\u6743\u503c\u4e3aw\nf:array[1..5000]of longint;//\u5e76\u67e5\u96c6\u6570\u7ec4\nn,m,i,j,s,ans:longint;\n\nprocedure qsort(l,r:longint);//\u628a\u6240\u6709\u8fb9\u6309\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6539\u4e00\u6539\u5feb\u901f\u6392\u5e8f\u6a21\u677f\u5c31\u53ef\u4ee5\u4e86\nvar    \ni,j,p,mid:longint;    \nbegin    \ni:=l;j:=r;    \nmid:=w[(l+r)shr 1];    \nrepeat    \nwhile w[i]<mid do inc(i);    \nwhile w[j]>mid do dec(j);    \nif i<=j then    \nbegin    \np:=u[i];u[i]:=u[j];u[j]:=p;p:=v[i];v[i]:=v[j];v[j]:=p;p:=w[i];w[i]:=w[j];w[j]:=p;inc(i);dec(j);    \nend;    \nuntil i>j;    \nif l<j then qsort(l,j);    \nif i<r then qsort(i,r);    \nend;      \n\nfunction find(x:longint):longint;//\u67e5\u627e\u70b9x\u6240\u5728\u96c6\u5408\nbegin\nif f[x]=0 then exit(x);\nif f[f[x]]=0 then exit(f[x]);\nfind:=find(f[x]);\nf[x]:=find;\nend;\n\nbegin\nread(n,m);\nfor i:=1 to m do read(u[i],v[i],w[i]);\nqsort(1,m);\nfillchar(f,n,0);\nans:=w[1];f[v[1]]:=u[1];//\u5148\u52a0\u5165\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u5c06\u5b83\u7684\u4e24\u7aef\u5e76\u5165\u4e00\u4e2a\u96c6\u5408\uff0c\u8868\u793a\u5df2\u7ecf\u52a0\u5165\u4e86\u751f\u6210\u6811\ns:=1;//s\u8bb0\u5f55\u5df2\u7ecf\u52a0\u5165\u751f\u6210\u6811\u7684\u8fb9\u7684\u6570\u91cf\nfor i:=2 to m do\nbegin\nif s=n-1 then begin write(ans);halt;end;//\u4e00\u68f5n\u4e2a\u9876\u70b9\u7684\u751f\u6210\u6811\u6709n-1\u6761\u8fb9\uff0c\u627e\u5230\u4e86n-1\u6761\u8fb9\u5faa\u73af\u5c31\u4e0d\u5fc5\u7ee7\u7eed\u4e86\nif find(u[i])<>find(v[i]) then //\u5982\u679c\u4e24\u70b9\u4e0d\u5728\u4e00\u4e2a\u96c6\u5408\nbegin//\u8fd9\u6761\u8fb9\u52a0\u5165\u751f\u6210\u6811\ninc(ans,w[i]);\nf[find(v[i])]:=find(u[i]);\ninc(s);\nend;\nend;\nif s=n-1 then begin write(ans);halt;end;//\u6210\u529f\u641e\u51fa\u4e86\u6700\u5c0f\u751f\u6210\u6811\uff0c\u539f\u56e0\u548c\u4e0a\u9762\u90a3\u6761\u4e00\u6a21\u4e00\u6837\u7684\u8bed\u53e5\u4e00\u6837\nwrite('orz');//orz\u3002\u3002\u3002 \nend.\n```",
        "postTime": 1474724284,
        "uid": 9455,
        "name": "321zdq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u8bf4\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u6709Kruskal\u548cPrim\uff08\u7a20\u5bc6\u56fe\u4f1aMLE\u7684\u8bdd\u7528\u8fd9\u4e2a\uff09\uff0c\u5199\u524d\u8005\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u867d\u7136\u540e\u8005\u53ef\u4ee5\u7528\u5806\u6765\u4f18\u5316\uff0c\u4e0d\u8fc7\u7565\u8fc7\u4e0d\u8868\u3002\n\n\nKruskal\u7b97\u6cd5\u4efb\u610f\u65f6\u523b\u7684\u4e2d\u95f4\u7ed3\u679c\u662f\u4e00\u4e2a\u68ee\u6797\uff1b\u4ecen\u4e2a\u70b9\u7684\u96c6\u5408\u5f00\u59cb\uff0c\u5728\u6bcf\u6b21\u9009\u62e9\u4e0d\u4ea7\u751f\u5708\u7684\u524d\u63d0\u4e0b\uff0c\u627e\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fb9\uff0c\u5408\u5e76\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u96c6\u5408\u3002\n\n\n\u7b80\u5355\u6613\u61c2\u7684\u4f2a\u4ee3\u7801\n\nFrom [Wikipedia https://en.wikipedia.org/wiki/Kruskal%27s\\_algorithm#Example]\n\n```cpp\nKRUSKAL(G): \n1 A = \u2205 \n2 foreach v \u2208 G.V: \n3    MAKE-SET(v) \n4 foreach (u, v) in G.E ordered by weight(u, v), increasing: \n5    if FIND-SET(u) \u2260 FIND-SET(v): \n6       A = A \u222a {(u, v)} \n7       UNION(u, v) \n```\n8 return A\n\n\u81f3\u4e8e\u600e\u4e48\u770b\u5b83\u662f\u5426\u8fde\u901a\uff0c\u6211\u662f\u770b\u6700\u540e\u662f\u5426\u6240\u6709\u70b9\u90fd\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\n\n\n```cpp\n/* P3366\n * Au: SJoshua\n */\n#include <cstdio> \n#include <algorithm> \n \n#define MAXM 200000\n#define MAXN 5000  \n \nusing namespace std; \n \nstruct edge { \n    int u, v, w;  \n} edges[MAXM]; \n \nint cmp (edge a, edge b) { \n    return a.w < b.w; \n} \n \nint set[MAXN]; \n \nint findSet(int k) { \n    return set[k] == k ? k : set[k] = findSet(set[k]); \n} \n \nint main(void) { \n    int n, m, nos, wt = 0; \n    scanf(\"%d %d\", &n, &m); \n    for (int k = 1; k <= m; k++) { \n        scanf(\"%d %d %d\", &edges[k].u, &edges[k].v, &edges[k].w); \n    } \n    sort(edges+1, edges+1+m, cmp); \n    for (int k = 1; k <= n; k++) { \n        set[k] = k; \n    } \n    nos = n; \n    for (int k = 1; k <= m && nos > 1; k++) { \n        int fu = findSet(edges[k].u); \n        int fv = findSet(edges[k].v); \n        if (fu != fv) { \n            set[fu] = fv; \n            wt += edges[k].w; \n            nos--; \n        } \n    }\n    int fc = findSet(1);\n    for (int k = 2; k <= n; k++) {\n        if (findSet(k) != fc) {\n            printf(\"orz\");\n            return 0;\n        }\n    }\n    printf(\"%d\", wt);   \n    return 0; \n}\n```",
        "postTime": 1474624148,
        "uid": 790,
        "name": "\u7ea6\u4fee\u4e9a_RK",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "![](https://cdn.luogu.com.cn/upload/image_hosting/i5409ltf.png)\n![](https://cdn.luogu.com.cn/upload/image_hosting/hexcu8ib.png)\n```\n                kruskal                   prim\n    \u600e\u4e48\u627e\uff1f    \u6bcf\u6b21\u627e\u6700\u5c0f\u8fb9\uff08\u5b9e\u73b0\u6392\u5e8f\uff09     \u6bcf\u6b21\u627e\u6700\u5c0f\u8ddd\u79bb(\u5269\u4f59\u70b9\u548c\u96c6\u5408T\u7684\u8ddd\u79bb)\n    \u600e\u4e48\u5224\u65ad\uff1f  \u5e76\u67e5\u96c6\u6765\u5224\u65ad\uff08\u662f\u5426\u540c\u4e00\u7956\u5b97\uff09  \u6392\u9664\u6389\u5df2\u6709\u7684\u70b9\n    \u52a0\u5165\u5230\u96c6\u5408  \n    \u5904\u7406       \u5408\u5e76\u96c6\u5408                   \u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb\n```\n\n# prim\n```cpp\n/*\n1. \u968f\u4fbf\u627e\u4e00\u4e2a\u70b9T = {v0}, vis[v0] = true,\n  1.2. \u6700\u77ed\u8ddd\u79bb\uff1a\u4efb\u610f\u4e00\u4e2a\u70b9\u5230T\u7684\u6700\u77ed\u8ddd\u79bb, d[N]\n   {v0},  d[x]=w[x->v0]\n  ->{v0, v1} ,  d[x]\u66f4\u65b0\n  for(int i=0; i<g[v1].size; i++) {//v1\u8fde\u63a5\u7684\u6240\u6709\u8fb9\n     int y = g[v1][i].y, w=g[v1][i].w;//Edge{y, w}\n     d[y] = min(w, d[y]);\n  }\n2. \u5faa\u73af\uff1a\u6bcf\u6b21\u627e\u5230T\u7684\u6700\u77ed\u8ddd\u79bb\uff08\u8fb9\uff09\u7684\u7684\u6700\u5c0f\uff0c\u52a0\u5165\u5230T\uff0c\u7136\u540e\u66f4\u65b0\u5176\u5b83\u8ddd\u79bb\n   \u5faa\u73af\uff1an\n     1. \u627e\u6700\u5c0f\uff0c\u53d6\u503c, \u4f18\u5148\u961f\u5217           1. \u53d6\u51fa\u6700\u5c0f\n     2. \u52a0\u5165                           2. \u52a0\u5165\u7b54\u6848\n     3. \u5904\u7406\u540e\u7eed\uff08\u66f4\u65b0\u8fb9\u7684\u8ddd\u79bb\uff0c\u52a0\u5165\u961f\u5217\uff09  3.\u5904\u7406\u540e\u7eed\uff0cin[--]\uff0c\u5982\u679c\u52300\u5c31\u52a0\u5165\u961f\u5217 \n\n\u5982\u679c\u8fde\u901a\uff0cT\u7684\u4e2a\u6570\u662fn\u4e2a\uff0cT\u5c31\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff08\u8fd8\u6709\u5176\u5b83\uff09\uff0c\u5982\u679c\u4e0d\u53d8\u901a\uff0c\u8fd4\u56de-1\n*/\n\n\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <queue>\n#include <cstring>\nusing namespace std;\nstruct Edge {\n  int y, w;\n};\n\nstruct Node {\n  int y, w;\n  //<,   Node n1, n2,   if(n1 < n2), less<Node>\n  bool operator < (const Node &n1) const {\n    return w > n1.w;\n  }\n};\n\nconst int N=1e5+5, INF=0x3f3f3f3f;\nint n, m;\nvector<Edge> g[N];\nbool vis[N];//Vnew\nint d[N];//\u5404\u70b9\u5230Vnew\u7684\u6700\u77ed\u8ddd\u79bb\n\nint prim(int v0) {\n  //priority_queue<Node, vector<Node>, greater<Node> > q;//\u6700\u5c0f\u7684\u51fa\u961f\uff0c\u6839\u636ew\n  priority_queue<Node> q;//\u9ed8\u8ba4\u662fless<Node>\n  memset(vis, false, sizeof(vis));\n  memset(d, 0x3f, sizeof(d));\n  //\u521d\u59cb\u5316Vnew\u548c\u5404\u70b9\u5230Vnew\u7684\u6700\u77ed\u8ddd\u79bb\n  int ans = 0, cnt=1;\n  vis[v0] = true;//\u7b2c\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u8fde\u51fa\u7684\u6700\u5c0f\u8fb9\n  for(int i=0; i<g[v0].size(); i++) {\n    Edge e1 = g[v0][i];\n    d[e1.y] = e1.w;\n    q.push(Node{e1.y, e1.w});\n  }\n  while(!q.empty()) {\n    //1. \u6700\u5c0f\u503c\n    Node t = q.top();\n    q.pop();\n    if(vis[t.y]) continue;//\u6392\u9664\u6389\u540c\u4e00\u4e2a\u70b9\u4e4b\u524d\u5df2\u7ecf\u9009\u8fc7\u7684\n    //2. \u52a0\u5165\n    int x = t.y, w=t.w;\n    vis[x] = true;\n    ans += w;\n    cnt++;\n    //cout<<\"\u52a0\u5165\"<<x<<\", ans+=\"<<w<<endl;\n    //3. \u66f4\u65b0\u6700\u77ed\u8ddd\u79bb\n    for(int i=0; i<g[x].size(); i++) {\n      int y=g[x][i].y, w=g[x][i].w;\n      if(vis[y]) continue;\n      if(w < d[y]) {//d[5]: 6,  d[5]->2\n        d[y] = w;\n        q.push(Node{y, w});\n      }\n    }\n  }\n  return cnt==n? ans: -1;\n}\n\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for(int i=1; i<=m; i++) {\n    int x, y, w;\n    scanf(\"%d%d%d\", &x, &y, &w);\n    g[x].push_back((Edge){y, w});\n    g[y].push_back((Edge){x, w});\n  }\n  \n  printf(\"%d\\n\", prim(1));\n  return 0;\n}\n\n```\n# kruskal\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\nstruct Edge {\n  int x, y, w;\n  bool operator < (const Edge &e1) const {\n    return w < e1.w;\n  }\n};\n\nconst int N=1e5+5, INF=0x3f3f3f3f;\nint n, m, top[N], rk[N];//top[\u70b9\u7684\u6570\u76ee]\nEdge e[N];//\u8fb9\u96c6\n\nint find(int x) {\n  int t = x;\n  while(top[t] != t)\n    t = top[t];\n  return top[x] = t;//\u4f18\u5316: \u538b\u7f29\u8def\u5f84\n}\n\nvoid join(int x, int y) {\n  int tx = find(x), ty = find(y);//tx=top[x]  ?\n  if(tx != ty)\n    top[tx] = ty;  \n}\n\nint kruskal() {\n  for(int i=1; i<=n; i++)//\u521d\u59cb\u5316\uff0c\u6bcf\u4e2a\u70b9\u4e00\u4e2a\u96c6\u5408\n    top[i] = i;\n  int ans=0;\n  for(int i=1; i<=m ; i++) {//O(m)\n    Edge e1 = e[i];\n    if(find(e1.x) == find(e1.y)) continue;//\u540c\u4e00\u4e2a\u4e0d\u8981\u4e86\n    join(e1.x, e1.y);//\u5408\u5e76\n    ans += e1.w;\n  }\n  return ans;\n}\n\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  for(int i=1; i<=m; i++) {//\u8f93\u5165\u8fb9\n    scanf(\"%d%d%d\", &e[i].x, &e[i].y, &e[i].w);\n  }\n  sort(e+1, e+m+1);//\u6392\u5e8f O(mlogm)\n  \n  printf(\"%d\\n\", kruskal());\n  return 0;\n}\n\n\n```\n",
        "postTime": 1570952112,
        "uid": 179983,
        "name": "59percent",
        "ccfLevel": 0,
        "title": "\u6700\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "Krusckal\u7b97\u6cd5\u6a21\u677f\uff1a\n\n1.\u7ed3\u6784\u4f53\u5b58\u8fb9\uff0c\u6bcf\u4e2a\u8fb9\u67093\u4e2a\u6307\u6807:st,to,var\uff08\u8d77\u59cb\uff0c\u7ec8\u672b\uff0c\u8ddd\u79bb/\u957f\u5ea6\uff09\uff1b\n\n2.\u6309\u6743\u503c\uff08\u8ddd\u79bb\uff09\u964d\u5e8f\u6392\u5e8f\uff1b\n\n3.\u8d2a\u5fc3\u7b97\u6cd5for m\u53d6\u8fb9\u5165\u56fe\uff1b\u5e76\u67e5\u96c6\u5224\u65ad\uff0c\u4e24\u8fb9\u4e0d\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\u5c31\u52a0\u5165\uff1b\n\n4.ans++\uff1b\n\n5.prntf ans\uff1b\n\n\n```\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n\nint n,m,x,i,j,y,z,tot;\nstruct node\n{\n\tint st,to;\n\tlong long var;\n}c[200001];\nint f[2000001];\nlong long ans;\n\ninline int find(int x)\n{\n\tif(f[x]==x) return x;\n\telse\n\t{\n\t\tf[x]=find(f[x]);\t\n\t\treturn f[x];\n\t}\n}\n\ninline bool cmp(node a,node b)\n{\n\treturn a.var<b.var;\n}\n\ninline void smainst_tree()\n{\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=find(c[i].st);\n\t\tint v=find(c[i].to);\n\t\tif(u==v) continue;\n\t\tans+=c[i].var;\n\t\tf[u]=v;\n\t\ttot++;\n\t\tif(tot==n-1) return;\n\t}\n}\n\n\ninline void scan()\n{\n\tscanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++) f[i]=i;\n    for(i=1;i<=m;i++)\n    {\n        scanf(\"%d%d%d\",&c[i].st,&c[i].to,&c[i].var);\n    }\n    sort(c+1,c+m+1,cmp);\n    smainst_tree();\n}\n\nint main()\n{\n\tscan();\n\tcout<<ans<<endl;\n    return 0;\n}\n```\n\n",
        "postTime": 1566737894,
        "uid": 120438,
        "name": "Lacrymabre",
        "ccfLevel": 0,
        "title": "L-P3366 \u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "**\u7b97\u6cd5\u539f\u7406\uff1a**\n\n- \u5728kruskal\u7b97\u6cd5\u6b63\u786e\u6027\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fdb\u884c\u4f18\u5316.\n- \u7531\u4e8ekruskal\u7684\u590d\u6742\u5ea6\u4e3aO(mlogm)\uff0c\u5728\u7a20\u5bc6\u56fe\u4e2d\u8868\u73b0\u53ef\u80fd\u4e0d\u592a\u597d\uff0c\u601d\u8003\u80fd\u5426\u5229\u7528\u6700\u77ed\u8fd9\u4e00\u6027\u8d28\u5bf9\u590d\u6742\u5ea6\u4e0a\u754c\u8fdb\u884c\u4f18\u5316.\n\n- \u8054\u60f3\u5230dijkstra\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u53d1\u73b0\u6700\u5c0f\u751f\u6210\u6811\u5728\u5c40\u90e8\u4e5f\u6ee1\u8db3\u8fd9\u4e00\u6027\u8d28\uff08\u6700\u5c0f\u751f\u6210\u6811\u7684\u6bcf\u4e00\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\uff09.\n- \u7531\u4e8e\u4efb\u610f\u4e00\u70b9\u90fd\u5fc5\u7136\u4f1a\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u70b9\u5f00\u59cb\"\u63a2\u7d22\"\uff08\u7c7b\u4f3c\u6587\u660eVI\u4e2d\u63a2\u7d22\u5730\u56fe\uff09.\n- \u5047\u8bbe\u9996\u5148\u9009\u62e9\u4e861\u53f7\u70b9\uff0c\u90a3\u4e48\u5bf9\u4e8e1\u53f7\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u60f3\u8981\u62d3\u5c55\u81ea\u5df1\u7684\u5927\u5c0f\u4e14\u82b1\u8d39\u5c3d\u91cf\u5c0f\uff0c\u5e94\u8be5\u9009\u62e9\u6743\u503c\u6700\u5c0f\u7684\u8fb9.\n- \u9012\u5f52\u8fdb\u884c\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811.\n\n**\u5806\u4f18\u5316\uff1a**\n\n- \u8003\u8651\u5230\u5728\u6700\u5c0f\u751f\u6210\u6811\u7684\u62d3\u5c55\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u5728\u88ab\u9009\u62e9\u65f6\uff0c\u5b83\u6240\u5728\u7684\"\u5165\u8fb9\"\u4e00\u5b9a\u662f\u6700\u4f18\u9009\u62e9\uff0c\u800c\u5df2\u6709\u7684\u6700\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u8bc1\u660e\u662f\u5b8c\u7f8e\u7684\uff0c\u800c\u4e14\u6bcf\u4e2a\u70b9\u5b9e\u9645\u4e0a\u4ec5\u4ec5\u662f\u5bf9\u4e8e\u5176\u4ed6\u70b9\u7684\u4e00\u4e2a\"\u4e2d\u8f6c\u7ad9\"\uff0c\u6240\u4ee5\u5b83\u7684\"\u5165\u8fb9\"\u5c31\u4e0d\u9700\u8981\u518d\u88ab\u66f4\u65b0\u3002\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u4e2a\u6027\u8d28\uff0c\u7ed3\u5408Dijkstra\u7684\u5806\u4f18\u5316\uff0c\u5c06\"\u5165\u8fb9\"\u957f\u5ea6\u4f5c\u4e3a\u5c0f\u6839\u5806\u7684\u7279\u5f81\u503c\uff0c\u5373\u53ef\u5c06\u7b97\u6cd5\u590d\u6742\u5ea6\u4ece![](https://private.codecogs.com/gif.latex?O%28n%5E2%29)\u4f18\u5316\u5230![](https://private.codecogs.com/gif.latex?O%28nlogm%29)\n\n------------\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int MAXN=5e3+5,MAXM=4e5+5;\nstruct Edge{\n\tint from,to,w,nxt;\n}e[MAXM];\nint head[MAXN],edgeCnt=1;\nvoid addEdge(int u,int v,int w){\n\te[++edgeCnt].from=u;\n\te[edgeCnt].to=v;\n\te[edgeCnt].w=w;\n\te[edgeCnt].nxt=head[u];\n\thead[u]=edgeCnt;\n}\nstruct Node{\n\tint nowV,nowW;\n\tbool operator <(Node another)const{\n\t\treturn nowW>another.nowW;\n\t}\n};\nint minw[MAXM];\nbool vis[MAXN];\nint prim(){\n\tmemset(minw,0x3f,sizeof(minw));\n\tpriority_queue<Node> q;\n\tq.push(Node{1,0});\n\tint ans=0;\n\twhile(!q.empty()){\n\t\tNode nowNode=q.top();q.pop();\n\t\tint v=nowNode.nowV,w=nowNode.nowW;\n\t\tif(vis[v])continue;\n\t\tvis[v]=1;\n\t\tans+=w;\n\t\tfor(int i=head[v];i;i=e[i].nxt){\n\t\t\tint nowV=e[i].to;\n\t\t\tif(!vis[nowV]&&e[i].w<minw[nowV]){\n\t\t\t\tminw[nowV]=e[i].w;\n\t\t\t\tq.push(Node{nowV,e[i].w});\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main(){\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\taddEdge(u,v,w);\n\t\taddEdge(v,u,w);\n\t}\n\tint ans=prim();\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1566343470,
        "uid": 115758,
        "name": "Object_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "## kruskal\u7b97\u6cd5+\u5e76\u67e5\u96c6\n\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\uff0c\u6bd4prim\u7b97\u6cd5\u7684\u4ee3\u7801\u91cf\u5c0f\uff0c\u800c\u4e14\u5728\u7a00\u758f\u56fe\u7684\u60c5\u51b5\u4e0b\u8981\u4f18\u4e8eprim\u7b97\u6cd5\u3002\u56e0\u4e3a\u5927\u591a\u6570\u56fe\u90fd\u662f\u7a00\u758f\u56fe\uff0c\u6240\u4ee5kruskal\u7b97\u6cd5\u662f\u8db3\u591f\u7684\u3002\n\n\u57fa\u672c\u601d\u60f3\uff1a\u628a\u8fb9\u6309\u7167\u6743\u503c\u7531\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u521d\u59cb\u65f6\uff0c\u751f\u6210\u6811\u7684\u8fb9\u96c6\u662f\u7a7a\u96c6\u3002\u7136\u540e\uff0c\u6309\u987a\u5e8f\u4f9d\u6b21\u5411\u8fb9\u96c6\u4e2d\u6dfb\u52a0\u8fb9\uff0c\u4f46\u662f\uff0c\u9700\u8981\u8df3\u8fc7\u4f7f\u5f97\u751f\u6210\u6811\u6210\u73af\u7684\u8fb9\u3002\u6bcf\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u5c31\u8981\u628a\u5b83\u8fde\u63a5\u7684\u4e24\u4e2a\u9876\u70b9\u52a0\u5165\u70b9\u96c6\u3002\u76f4\u5230\u8fb9\u5168\u90e8\u7528\u5b8c\uff0c\u6216\u8005\u8fbe\u5230v-1\u6761\u8fb9\u4e3a\u6b62\u3002\u5982\u679c\u8fb9\u5168\u90e8\u7528\u5b8c\uff0c\u751f\u6210\u6811\u4f9d\u7136\u4e0d\u8fde\u901a\uff0c\u5219\u8868\u660e\u56fe\u4e0d\u8fde\u901a\u3002\n\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5173\u952e\u5728\u4e8e\u5224\u65ad\u52a0\u5165\u4e00\u6761\u8fb9\u662f\u5426\u6210\u73af\uff0c\u4ee5\u53ca\u6700\u540e\u751f\u6210\u6811\u662f\u5426\u8fde\u901a\u3002\n\n\u540e\u4e00\u4e2a\u95ee\u9898\u7b80\u5355\uff0c\u6211\u4eec\u77e5\u9053\u5224\u65ad\u6811\u6216\u8005\u56fe\u662f\u5426\u8fde\u901a\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6700\u7ec8\u7684\u5206\u652f\u6570\u662f\u5426\u4e3a1\u6765\u5224\u65ad\u3002\u90a3\u4e48\uff0c\u6210\u73af\u600e\u4e48\u5224\u65ad\u5462\uff1f\n\n\u4f9d\u7136\u662f\u5e76\u67e5\u96c6\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u8fd9\u4e2a\u5b9a\u7406\uff0c\u5f53\u4e24\u4e2a\u9876\u70b9\u90fd\u5df2\u7ecf\u5728\u70b9\u96c6\u4e2d\u65f6\uff0c\u76f4\u63a5\u8fde\u63a5\u8fd9\u4e24\u4e2a\u9876\u70b9\u7684\u8fb9\uff0c\u5fc5\u7136\u4f7f\u5f97\u751f\u6210\u6811\u6210\u73af\u3002\n\n\u57fa\u4e8e\u8fd9\u4e2a\u5b9a\u7406\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u4e86\uff0c\u56e0\u4e3a\u4e24\u4e2a\u9876\u70b9\u540c\u5728\u5e76\u67e5\u96c6\u4e2d\uff0c\u5219\u5b83\u4eec\u7684\u7956\u5148\u8282\u70b9\u76f8\u540c\u3002\n\n\u4f7f\u7528\u5e76\u67e5\u96c6\u7684\u65f6\u5019\uff0c\u6ce8\u610f\u8def\u5f84\u538b\u7f29\u3002\u5426\u5219\uff0c\u6709\u53ef\u80fd\u9000\u5316\u4e3a\u957f\u5ea6\u4e3av\u7684\u94fe\u8868\u3002\n\n\u6700\u9700\u8981\u6ce8\u610f\u7684\u8fd8\u662f\u6ea2\u51fa\uff0c\u4e00\u5207\u6743\u503c\u7528long long\u3002\n\n\u9650\u4e8e\u7bc7\u5e45\uff0c\u5177\u4f53\u60c5\u51b5\u6211\u5c31\u4e0d\u89e3\u91ca\u4e86\uff0c\u5982\u679c\u8fd8\u4e0d\u61c2\uff0c\u53ef\u4ee5\u770b\u6211\u7684\u535a\u5ba2https://blog.csdn.net/zhangwancongcsdn/article/details/86890744\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\n\ntypedef struct\n{\n    int v1;\n    int v2;\n    int weight;\n}edge;\nedge elist[200000];\nint father[5001];\n\nbool cmp(edge a, edge b)\n{\n    return a.weight < b.weight;\n}\n\nint root(int x)\n{\n    if (father[x] < 0) return x;\n    else return root(father[x]);\n}\n\ninline int Min(int x, int y)\n{\n    return x < y ? x : y;\n}\n\nbool Merge(int x, int y)\n{\n    x = root(x);\n    y = root(y);\n    if (x == y) return false;\n    if (father[x] > father[y])\n        father[y] = Min(father[x] - 1, father[y]), father[x] = y;\n    else\n        father[x] = Min(father[y] - 1, father[x]), father[y] = x;\n    return true;\n}\n\nint main(int argc, char *argv[])\n{\n    int v, e, i, cnt = 0, branches;\n    long long totalw = 0;\n    scanf(\"%d %d\", &v, &e);\n    branches = v;\n    for (i = 0; i < e; i++)\n        scanf(\"%d %d %d\", &elist[i].v1, &elist[i].v2, &elist[i].weight);\n    sort(elist, elist+e, cmp);\n    memset(father, -1, sizeof(father));\n    i = 0;\n    while (i < e && cnt < v-1)\n    {\n        if (Merge(elist[i].v1, elist[i].v2))\n        {\n            totalw += (long long)elist[i].weight, cnt++;\n            branches--;\n        }\n        i++;\n    }\n    if (branches > 1)\n    {\n        printf(\"orz\");\n    }\n    else printf(\"%lld\", totalw);\n    return 0;\n}\n\n```",
        "postTime": 1565170101,
        "uid": 181612,
        "name": "wancong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "# \u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\nKruskal\u7b97\u6cd5\n\n**M**inimum **S**panning **T**ree\n\n## \u6700\u5c0f\u751f\u6210\u6811MST\n\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u90fd\u6709\u8def\u5f84\u76f8\u901a\uff0c\u79f0\u4e3a**\u8fde\u901a\u56fe**\n\n**\u751f\u6210\u6811**\u542b\u539f\u56fe**n**\u4e2a\u9876\u70b9\uff0c\u4f46\u53ea\u6709**n-1**\u6761\u8fb9\uff0c\u6784\u6210\u4e00\u68f5\u6811\n\n**\u6700\u5c0f\u751f\u6210\u6811**\u7684\u6240\u6709\u8fb9\u7684**\u957f\u5ea6\u603b\u548c**\u662f\u751f\u6210\u6811\u91cc\u6700\u5c0f\u7684\n\n**n**\u4e2a\u9876\u70b9\u7684\u751f\u6210\u6811\u6709**n-1**\u6761\u8fb9\uff0c\u82e5\u518d\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c**\u5fc5\u5b9a\u6210\u73af**\n\n\u7b97\u6cd5\u53ef\u89c6\u5316\u7f51\u5740\uff1a[visualgo.net/en/mst](visualgo.net/en/mst)\n# Kruskal\u7b97\u6cd5\n\u8d2a\u5fc3\uff1a\u6bcf\u6b21\u627e\u6700\u77ed\u8fb9\uff0c\u5c1d\u8bd5\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n\n\u6839\u636e\u8fb9\u7684\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f <---- O(mlogm)\n\n\u4f9d\u6b21\u67e5\u770b\u6bcf\u4e00\u6761\u8fb9i\uff1a\u7aef\u70b9ai,bi,\u8fb9\u957fwi\n\n\u82e5ai\u548cbi\u95f4\u8fd8\u6ca1\u6709\u8fde\u901a\n\n\u5c06\u8fd9\u6761\u8fb9i\u9009\u5165\u6700\u5c0f\u751f\u6210\u6811\u7b54\u6848\n\nMST\u603b\u957f\u5ea6\u589e\u52a0wi\n\n\u5426\u5219\u5ffd\u7565\u8fd9\u6761\u8fb9i\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a**O(mlogm)**\n```cpp\nstruct edge{ll a,b,w;};\nedge e[M];//\u8fb9\u96c6\u6570\u7ec4\nll n,m,id[N];\nll find(ll i){return id[i]==i?i:id[i]=find(id[i]);}//\u5e76\u67e5\u96c6\u67e5\u627e\u51fd\u6570\nbool cmp(const edge&a,const edge&b){return a.w<b.w;}//\u8fb9\u7684\u6392\u5e8f\u89c4\u5219\n```\n```cpp\nint main(){\n\tcin>>n>>m;\n\tfor(ll i=0;i<m;i++)//\u8f93\u5165\u8fb9\u96c6\u6570\u7ec4\n\t\tcin>>e[i].a>>e[i].b>>e[i].w;\t\n\tKruskal();\n\treturn 0;\n}\n```\n```cpp\nvoid Kruskal(){\n\tsort(e,e+m,cmp);//\u6839\u636e\u8fb9\u7684\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\tfor(ll i=1;i<=n;i++)id[i]=i;//\u5e76\u67e5\u96c6\u521d\u59cb\u5316\n\tll ans=0;\n\tfor(ll k=0;k<m;k++){//\u4f9d\u6b21\u67e5\u770b\u6bcf\u4e00\u6761\u8fb9\n\t\tll fa=find(e[k].a),fb=find(e[k].b);\n\t\tif(fa==fb)continue;//\u82e5\u8be5\u8fb9\u7aef\u70b9\u5df2\u8fde\u901a,\u5ffd\u7565\u8fd9\u6761\u8fb9\n\t\tid[fa]=fb;//\u5c06\u8be5\u8fb9\u9009\u5165MST\n\t\tans+=e[k].w;//\u603b\u957f\u5ea6\u589e\u52a0wi\n\t}\t\n\tcout<<ans<<endl;\n}\n```\n# \u8bc1\u660e\uff1a Kruskal\u7b97\u6cd5\u80fd\u627e\u5230MST\nKruskal\u9009\u7684\u7b2c1\u6761\u8fb9e1\u4e00\u5b9a\u5728\u67d0\u68f5MST\u4e2d\n\n\u53cd\u8bc1\u6cd5\uff1a\u4efb\u53d6\u4e00\u68f5\u4e0d\u5305\u542be1 \u7684MST\u8bb0\u4f5cT\n\n\u5411T\u4e2d**\u6dfb\u52a0e1** \uff0c**\u5fc5\u5b9a\u6210\u73af**\n\n\u8be5\u73af\u4e2d\u5fc5\u6709\u8fb9\u957f\u4e0d\u5c0f\u4e8ee1\u7684\u8fb9\u8bb0\u4f5cf\uff0c\u4eceT\u4e2d**\u5220\u9664f**\n\n\u65b0\u7684\u751f\u6210\u6811**T+e1-f**\u7684\u8fb9\u957f\u603b\u548c\u4e0d\u8d85\u8fc7T",
        "postTime": 1562909264,
        "uid": 185092,
        "name": "Frainstak",
        "ccfLevel": 5,
        "title": "Minimum_spanning_tree"
    },
    {
        "content": ">\u9694\u4e86\u51e0\u4e2a\u6708\uff0c\u53c8\u5f00\u59cb\u5199\u535a\u5ba2\u4e86qwq\n\n# kruskal\n### \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)\n### \u5b83\u7684\u7b97\u6cd5\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\n\u6211\u4eec\u6839\u636e\u8fb9\u7684\u6743\u503c\u5c06\u6240\u6709\u8fb9\u6392\u5e8f\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u6761\u8fb9\uff0c\u7528\u5e76\u67e5\u96c6\u53bb\u67e5\u8be2\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5426\u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u82e5\u5728\u540c\u4e00\u96c6\u5408\u5185\uff0c\u5219\u5220\u6389\u8fd9\u6761\u8fb9\uff0c\u82e5\u4e0d\u5728\u540c\u4e00\u7ed3\u5408\u5219\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c\u5e76\u5c06\u8fd9\u4e24\u4e2a\u7aef\u70b9\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u3002  \n\u9644\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\nint n,m,q[6000];\n\nstruct lalala{\n    int x,y,z,save;\n}a[210000];\n\nint mysort(lalala a,lalala b)\n{\n    return a.z < b.z;\n}\n\nint work(int x,int y)\n{\n    while(q[q[x]] != q[x]) q[x] = q[q[x]];\n    while(q[q[y]] != q[y]) q[y] = q[q[y]];\n    if(q[x] == q[y]) return 1;\n    else\n    {\n        q[q[y]] = q[x];\n        return 0;\n    }\n}\n\nint main()\n{\n    long long ans = 0;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++) q[i]=i;\n    for(int i=1; i<=m; i++) \n    {\n        cin>>a[i].x>>a[i].y>>a[i].z;\n        ans += a[i].z;\n    }\n    sort(a+1,a+m+1,mysort);\n    for(int i=1;i<=m;i++)\n    {\n        if(!work(a[i].x,a[i].y)) ans -= a[i].z;\n    }\n    cout << ans;\n    return 0;\n}\n```\n# prim\n### \u65f6\u95f4\u590d\u6742\u5ea6O(n2)\n~~\u8dd1\u5f97\u6162\uff0c\u4ee3\u7801\u957f\uff0c\u6ca1\u7279\u6b8a\u529f\u80fd\uff0c\u771f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u5b66\u5b83qwq\u2026\u2026~~\nprim\u7684\u601d\u60f3\u548c\u67d0\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u601d\u8def\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u8fc7\u7684\u70b9\u6807\u4e3a\u767d\u8272\uff0c\u6ca1\u6709\u66f4\u65b0\u8fc7\u7684\u6807\u4e3a\u84dd\u8272\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u4e2a\u84dd\u70b9\uff08\u6309minn\u503c\u4ece\u5c0f\u5230\u5927\u66f4\u65b0\uff0c\u8fd9\u91cc\u8c8c\u4f3c\u53ef\u4ee5\u7528\u5806\u4f18\u5316\uff0c\u7136\u800c\u6211\u6bd4\u8f83\u61d2qwq\uff09\u5e76\u66f4\u65b0\u4e3a\u767d\u70b9\uff0c\u5e76\u7528\u5b83\u53bb\u66f4\u65b0\u5176\u4ed6\u7684\u84dd\u70b9\uff08\u8fd9\u91cc\u4e0d\u7528\u628a\u88ab\u66f4\u65b0\u7684\u70b9\u6807\u4e3a\u767d\u8272\uff0c\u4e0d\u7136\u5b83\u4eec\u5c31\u6ca1\u6cd5\u66f4\u65b0\u5176\u4ed6\u70b9\uff0c\u4e5f\u6ca1\u6cd5\u88ab\u5176\u4ed6\u7684\u70b9\u66f4\u65b0\u4e86\uff09\u3002\u6700\u540e\u5c06\u6bcf\u4e2a\u70b9\u7684minn\u503c\u52a0\u8d77\u6765\u5c31\u597d\u5566\u3002\n\u9644\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define INF 2147483647\n\nusing namespace std;\n\nstruct node{\n    int k,dis;\n    bool operator < ( const node &x )const{return x.dis < dis;}\n};\n\npriority_queue<node> que;\n\nlong long n,m,s,d[1000005],cnt,D[1000005],v[1000005]; \n\nstruct Edge{\n    int to,next,x;\n}edge[2000005];\n\nvoid add(int x,int y,int a)\n{\n    edge[++cnt].to = y;\n    edge[cnt].x = a;\n    edge[cnt].next = d[x];  \n    d[x] = cnt;\n}\n\nint main()\n{\n    int x,y,a;\n    scanf(\"%lld%lld%lld\",&n,&m,&s);\n    for(register int i = 1; i <= m; i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&a);\n        add(x,y,a);\n    }\n    que.push((node){s,0});\n    for(register int i = 1; i <= n; i++) D[i] = INF;\n    D[s] = 0;\n    while(!que.empty())\n    {\n        node u = que.top();\n        que.pop();\n        if(v[u.k]) continue;\n        v[u.k] = 1;\n        for(register int i = d[u.k]; i; i = edge[i].next)\n        {\n            if(D[edge[i].to] > D[u.k] + edge[i].x)\n            {\n                D[edge[i].to] = edge[i].x + D[u.k];\n                if(!v[edge[i].to]) que.push((node){edge[i].to,D[edge[i].to]});\n            }\n        }\n    }\n    for(register int i = 1; i <= n; i++) printf(\"%d \",D[i]);\n    printf(\"\\n\");\n    return 0;\n}\n```\n## prim\u7684\u5806\u4f18\u5316\n\u65e2\u7136prim\u548c\u67d0\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u601d\u8def\u662f\u76f8\u4f3c\u7684\uff0c\u90a3\u4e48ta\u548c\u67d0\u6700\u77ed\u8def\u7b97\u6cd5\u4e00\u6837\u4e5f\u53ef\u4ee5\u7528\u5806\u4f18\u5316\uff0c\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u4eceO(n2)\u964d\u5230O(nlongn)  \n~~\u4f9d\u7136\u662f\u8dd1\u5f97\u6162\uff0c\u4ee3\u7801\u957f\uff0c\u6ca1\u7279\u6b8a\u529f\u80fdqwq\u2026\u2026~~  \n\u9644\u4e00\u4e0b\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#define ll long long\n#define INF 0x7fffffff\n#define re register\n\nusing namespace std;\n\nint read()\n{\n    register int x = 0,f = 1;register char ch;\n    ch = getchar();\n    while(ch > '9' || ch < '0'){if(ch == '-') f = -f;ch = getchar();}\n    while(ch <= '9' && ch >= '0'){x = x * 10 + ch - 48;ch = getchar();}\n    return x * f;\n}\n\nstruct edge{\n\tint x,y,z;\n}a[500005];\n\nstruct EDGE{\n\tint next,to,x,save;\n}e[500005];\n\nstruct node{\n\tint k,dis;\n\tbool operator < (const node & x) const {return x.dis < dis;}\n}now;\n\npriority_queue <node> que;\n\nint cnt,d[100005];\n\nvoid add(int x,int y,int a)\n{\n    e[++cnt].to = y;\n    e[cnt].x = a;\n    e[cnt].next = d[x];  \n    d[x] = cnt;\n}\n\nint n,m,q,x,y,z,ans,minn[100005],vis[100005];\n\nint mysort(edge a1, edge a2)\n{\n\tif(a1.x != a2.x) return a1.x < a2.x;\n\tif(a1.y != a2.y) return a1.y < a2.y;\n\treturn a1.z < a2.z;\n}\n\nint main()\n{\n\tn = read();\n\tm = read();\n\tfor(re int i = 1; i <= m; i++)\n\t{\n\t\ta[i].x = read(); a[i].y = read(); a[i].z = read();\n\t}\n\tsort(a + 1, a + m + 1, mysort);\n\tfor(re int i = 1; i <= m; i++)\n\t\tif(a[i].x != a[i - 1].x || a[i].y != a[i - 1].y)\n\t\t{\n\t\t\tadd(a[i].x, a[i].y, a[i].z);\n\t\t\tadd(a[i].y, a[i].x, a[i].z);\n\t\t}\n\tfor(re int i = 1; i <= n; i++) minn[i] = INF;\n\tque.push((node){1,0}); \n\twhile(!que.empty())\n\t{\n\t\tnow = que.top();\n\t\tque.pop();\n\t\tvis[now.k] = 1;\n\t\tfor(re int i = d[now.k]; i; i = e[i].next)\n\t\t\tif(!vis[e[i].to] && e[i].x < minn[e[i].to])\n\t\t\t{\n\t\t\t\tminn[e[i].to] = e[i].x;\n\t\t\t\tque.push((node){e[i].to,minn[e[i].to]});\n\t\t\t}\n\t}\n\tfor(re int i = 2; i <= n; i++) ans = ans + minn[i];\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```\n\n\u63a8\u8350\u4f8b\u9898\uff1a[\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811](https://www.luogu.org/problemnew/show/P3366)",
        "postTime": 1560737775,
        "uid": 150821,
        "name": "Azuree",
        "ccfLevel": 6,
        "title": "\u6700\u5c0f\u751f\u6210\u6811-\u5b66\u4e60"
    },
    {
        "content": "\u6211\u7684\u535a\u5ba2\u91cc\u4e5f\u6709\u8bb2\u89e3\u54e6\uff1a\n\n[\u4f20\u9001\u95e8](https://www.cnblogs.com/crazily/p/10122044.html)\n\nKruskal\u5176\u5b9e\u662f\u4e00\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\uff08\u8f83\u5bb9\u6613\u7406\u89e3\uff09O(\u2229_\u2229)O~~\n\n\u533a\u522b\u4e00\u4e0bprim\uff1a\n\nPrim\u5728\u7a20\u5bc6\u56fe\u4e2d\u6bd4Kruskal\u4f18\uff0c\u5728\u7a00\u758f\u56fe\u4e2d\u6bd4Kruskal\u52a3\u3002Prim\u662f\u4ee5\u66f4\u65b0\u8fc7\u7684\u8282\u70b9\u7684\u8fde\u8fb9\u627e\u6700\u5c0f\u503c\uff0cKruskal\u662f\u76f4\u63a5\u5c06\u8fb9\u6392\u5e8f\u3002\n\n\u5f53\u7136\u6211\u4eec\u77e5\u9053Kruskal\u662f\u4e2a\u5bb9\u6613\u7406\u89e3\u7684\u65b9\u6cd5\n\n\u6240\u4ee5\u8fd9\u91cc\u4ec5\u4ec5\u8bb2\u4e00\u4e0bKruskal\uff08\u849f\u84bb\u53ea\u80fd\u8bb2Kruskal\uff09\n\n------------------------------------------------------------------------------------\u4ee5\u4e0b\u662f\u4e2a\u4eba\u89c1\u89e3\uff08\u53ef\u80fd\u662f\u7247\u9762\u7684\uff09\n\n\u6211\u4eec\u8981\u627e\u4e00\u4e2a\u52a0\u6743\u6700\u5c0f\u7684\u6811\n\n\u6240\u4ee5\u6211\u4eec\u8981\u8fb9\u4eec\u5c3d\u53ef\u80fd\u7684\u5c0f\n\n\u6240\u4ee5\u8d2a\u5fc3\u7b97\u6cd5\u7684\u672c\u8d28\u5c31\u663e\u73b0\u51fa\u6765\u4e86\n\n\u6211\u4eec\u53ea\u8981\u5148\u6392\u5e8f\uff0c\u4ee5\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5f00\u59cb\u52a0\u6743\n\n\u5f53\u6211\u4eec\u53d1\u73b0\u4e00\u6761\u8fb9\u7684\u4e24\u7aef\u4e24\u4e2a\u70b9\u5df2\u7ecf\u88ab\u8fde\u8d77\u65f6\n\n\u8fd9\u6761\u7ebf\u5176\u5b9e\u5c31\u662f\u65e0\u7528\u7684\u662f\u6d6a\u8d39\n\n\u6240\u4ee5\u8df3\u8fc7ta\u7ee7\u7eed\n\n\u697c\u4e0b\u7684DALAO\u56fe\u5199\u7684\u5f88\u6e05\u695a\n\n\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u641c\u7d22\u662f\u5426\u94fe\u63a5\u5462\uff1f\n\n\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\uff01\n\n\u5982\u679c\u4e24\u70b9\u5177\u6709\u76f8\u540c\u7956\u5148\u90a3\u4e48\u5c31\u662f\u5df2\u7ecf\u8fde\u63a5\u7684\u70b9\u4e86\uff01\n\n\u5177\u4f53\u89c1\u4ee3\u7801\u54e6\u3002\n\n[\u4e0d\u61c2\u5e76\u67e5\u96c6\u7684\u5c0f\u4f19\u4f34\u6233\u8fd9\u91cc]( https://www.cnblogs.com/crazily/p/10121934.html)\n\n\u8fd8\u6709\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u672a\u89e3\u51b3\uff1aend\n\n\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u82e5\u6709n\u4e2a\u70b9\u90a3\u4e48\u4ed6\u5c31\u4f1a\u6709n-1\u6761\u8fb9\n\n\u6240\u4ee5\u5f53\u6211\u4eec\u641c\u9f50n-1\u6761\u8fb9\u540e\u5c31\u5efa\u6811\u5b8c\u6bd5\u4e86\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nlong long ans;\nint n,m;\nint f[200005];\nint find(int k){\n    if(f[k]==k){\n        return k;\n    }\n    return f[k]=find(f[k]);\n}\nstruct node{\n    int x,y;\n    int z;//sum\n}tree[200005];\nbool cmpp(node x,node y){\n    return x.z<y.z;\n}\nvoid Kruskal(int i,int a){\n    if(a==n-1){\n        return;\n    }\n    if(find(tree[i].x)==find(tree[i].y)){\n        Kruskal(i+1,a);\n        return;\n    } \n    ans+=tree[i].z;\n    f[find(tree[i].x)]=f[tree[i].y];\n    Kruskal(i+1,a+1);\n}\nint main(){\n    cin>>n>>m;\n    if(n>m) {cout<<\"orz\"<<endl;return 0;}\n    for(int i=1;i<=m;++i){\n        scanf(\"%d%d%d\",&tree[i].x,&tree[i].y,&tree[i].z);\n    }\n    sort(tree+1,tree+1+m,cmpp);\n    for(int i=1;i<=m;++i){\n        f[i]=i;\n    }\n    Kruskal(1,0);\n    cout<<ans<<endl;\n}\n\n/*\n\u6837\u4f8b\u8f93\u5165\uff1a \n5 18\n2 4 276\n3 3 435\n3 4 608\n2 4 860\n1 2 318\n1 3 547\n5 4 419\n2 5 98\n1 5 460\n5 3 399\n3 5 240\n3 2 733\n3 3 903\n4 2 909\n5 2 206\n3 4 810\n2 1 115\n2 3 419\n\u6837\u4f8b\u8f93\u51fa\uff1a \n729\n*/ \n```\n\n//\uff08\u6084\u54aa\u54aa\uff09\u5176\u5b9e\u9898\u76ee\u91cc\u90a3\u4e2aorz\u60c5\u51b5\u5728\u8bc4\u5206\u6570\u636e\u91cc\u5e76\u6ca1\u6709\u3002\u3002\u3002\u3002\u3002",
        "postTime": 1544798782,
        "uid": 90278,
        "name": "Crazily",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "**\u65e2\u7136\u6ca1\u6709\u4eba\u5199kruskal\u7684\u5806\u4f18\u5316\uff0c\u90a3\u4e48\u6211\u5c31\u6765\u8d21\u732e\u4e00\u7bc7**\n\n----\n## \u6700\u5c0f\u751f\u6210\u6811\n\u6700\u5c0f\u4ee3\u4ef7\u6811(Minimum-cost Spanning Tree):\u5bf9\u65e0\u5411\u8fde\u901a\u56fe\u7684\u751f\u6210\u6811\uff0c\u5404\u8fb9\u7684\u6743\u503c\u603b\u548c\u79f0\u4e3a\u751f\u6210\u6811\u7684\u6743\uff0c\u6743\u6700\u5c0f\u7684\u751f\u6210\u6811\u79f0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n---\n## Kruskal\n\u8fd9\u4e2a\u662f\u4e00\u4e2a\u6c42\u89e3\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u4e2a\u597d\u65b9\u6cd5\uff0c\u4e5f\u662f\u6c42\u52a0\u6743\u8fde\u901a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b97\u6cd5\u3002\n\n----\n## \u5927\u81f4\u601d\u8def\n![](http://img.my.csdn.net/uploads/201210/31/1351697185_6031.gif)\n\n\u4ee5\u8fb9\u4e3a\u4e3b\u5bfc\u5730\u4f4d\uff0c\u59cb\u7ec8\u9009\u62e9\u5f53\u524d\u53ef\u7528\uff08\u6240\u9009\u7684\u8fb9\u4e0d\u80fd\u6784\u6210\u56de\u8def\uff09\u7684\u6700\u5c0f\u6743\u690d\u8fb9\u3002\u6240\u4ee5Kruskal\u7b97\u6cd5\u7684\u7b2c\u4e00\u6b65\u662f\u7ed9\u6240\u6709\u7684\u8fb9\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u63a5\u4e0b\u6765\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u8003\u5bdf\u6bcf\u4e00\u6761\u8fb9\uff08u\uff0cv\uff09\u3002\n\n### \u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n* \u8bbe\u4e00\u4e2a\u6709n\u4e2a\u9876\u70b9\u7684\u8fde\u901a\u7f51\u7edc\u4e3aG\uff08V,E\uff09\uff0c\u6700\u521d\u5148\u6784\u9020\u4e00\u4e2a\u53ea\u6709n\u4e2a\u9876\u70b9\uff0c\u6ca1\u6709\u8fb9\u7684\u975e\u8fde\u901a\u56feT={V,\u7a7a}\uff0c\u56fe\u4e2d\u6bcf\u4e2a\u9876\u70b9\u81ea\u6210\u4e00\u683c\u8fde\u901a\u5206\u91cf\u3002\n\n* \u5728\uff25\u4e2d\u9009\u62e9\u4e00\u6761\u5177\u6709\u6700\u5c0f\u6743\u690d\u7684\u8fb9\u65f6\uff0c\u82e5\u8be5\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u843d\u5728\u4e0d\u540c\u7684\u8fde\u901a\u5206\u91cf\u4e0a\uff0c\u5219\u5c06\u6b64\u8fb9\u52a0\u5165\u5230\uff34\u4e2d\uff1b\u5426\u5219\uff0c\u5373\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u843d\u5230\u540c\u4e00\u8fde\u901a\u5206\u91cf\u4e0a\uff0c\u5219\u5c06\u6b64\u8fb9\u820d\u53bb\uff08\u6b64\u540e\u6c38\u4e0d\u9009\u7528\u8fd9\u6761\u8fb9\uff09\uff0c\u91cd\u65b0\u9009\u62e9\u4e00\u6761\u6743\u690d\u6700\u5c0f\u7684\u8fb9\u3002\n\n* \u5982\u6b64\u91cd\u590d\u4e0b\u53bb\uff0c\u76f4\u5230\u6240\u6709\u9876\u70b9\u5728\u540c\u4e00\u8fde\u901a\u5206\u91cf\u4e0a\u4e3a\u6b62\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u6211\u89c9\u5f97\u6709\u4e24\u70b9\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\u3002\n* \u6392\u5e8f\u90e8\u5206\n* \u7b97\u51fa\u8fde\u901a\u5206\u91cf\u4e2d\n\n\u90a3\u4e48\u53c8\u6709\u4eba\u8981\u95ee\u4e86\uff0c\u4ec0\u4e48\u662f\u8054\u901a\u5206\u91cf\uff1f\n\n----\n## \u8054\u901a\u5206\u91cf\n\u8bf4\u7684\u901a\u4fd7\u4e00\u70b9\uff0c\u5c31\u662f\u8054\u901a\u5757\uff0c\u53ef\u4ee5\u901a\u8fc7\u67d0\u4e9b\u8fb9\u53ef\u4ee5\u5230\u8fbe\u7684\u4e00\u4e2a\u70b9\u96c6\uff0c\u5c31\u53eb\u505a\u8054\u901a\u5757\uff08\u8fde\u901a\u5206\u91cf\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4ec0\u4e48\u65b9\u6cd5\u6765\u6c42\u8054\u901a\u5757\u5462\uff1f\n* bfs\n* dfs\n* \u5e76\u67e5\u96c6\n\n\u524d\u9762\u4e24\u79cd\u7684\u65b9\u6cd5\u662f\u5728\u662f\u592a~~\u8017\u65f6~~\uff08\u5de8\uff09\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4e0d\u8bb2\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u704c\u6c34\u704c\u5012\u5e95\uff0c\u704c\u5230\u90a3\u91cc\u662f\u54ea\u91cc\u3002\n\n----\n## \u5e76\u67e5\u96c6\n\u5e76\u67e5\u96c6\uff0c\u5176\u5b9e\u5c31\u662f\u67e5\u627e\u81ea\u5df1\u7684\u7956\u5148\u662f\u8c01\uff0c\u901a\u8fc7\u7956\u5148\u6765\u5224\u65ad\u662f\u5426\u662f\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5757\u91cc\u9762\u3002\n\n### \u67e5\u627e\n\u6211\u4eec\u6765\u770b\u4e00\u4e0bfind\u4e5f\u5c31\u662f\u67e5\u627e\u81ea\u5df1\u7684\u7956\u5148\u7684\u51fd\u6570\u5e94\u8be5\u600e\u4e48\u5199\u3002\n#### \u975e\u9012\u5f52\u5199\u6cd5\n```cpp\nint gf(int x) {\n\tint r=x;\n    while (fa[r]!=r) r=fa[x];\n}\n```\n#### \u9012\u5f52\u5199\u6cd5\n```cpp\nint gf(int x) {\n\tif (fa[x]==x) return fa[x];\n    else return gf(fa[x]);\n}\n```\n#### \u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u73a9\u610f\u662f\u5bf9\u7684\uff1f\n\u56e0\u4e3a\u4f60\u7684\u6700\u4e0a\u9762\u7684\u7956\u5148\uff0c\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u662f\u6307\u5411\u81ea\u5df1\u7684\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u90fd\u662f\u6307\u5411\u81ea\u5df1\u7684\u7236\u4eb2\uff0c\u4e5f\u5c31\u662f\u4e0d\u540c\u4e8e\u81ea\u5df1\u7684\u8282\u70b9\u3002\n\n#### \u4f46\u662f\u8fd9\u4e2a\u73a9\u610f\u592a\u6162\u4e86\uff0c\u4e3a\u4ec0\u4e48\uff1f\n\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8def\u5f84\u538b\u7f29\uff0c\u4e5f\u5c31\u662f\u6ca1\u7b97\u5b8c\u4e00\u6b21\uff0c\u5c31\u628a\u81ea\u5df1\u7684\u7236\u4eb2\u8282\u70b9\u6307\u5411\u81ea\u5df1\u7684\u7956\u5148\uff0c\u90a3\u4e48\u8fd9\u6837\u5c31\u53ef\u4ee5\u5927\u5927\u8282\u7701\u65f6\u95f4\u3002\n\n#### \u8def\u5f84\u538b\u7f29\n```cpp\nint gf(int x) {\n\tif (fa[x]==x)  return fa[x];\n    else return fa[x]=gf(fa[x]);\n}\n```\n\u8fd9\u4e2a\u65b0\u52a0\u7684```fa[x]=gf(fa[x])```\u5c31\u662f\u5728\u505a\u8def\u5f84\u538b\u7f29\uff0c\u5c31\u662f\u5728\u7b97\u7684\u65f6\u5019**\u987a\u4fbf**\u628a\u81ea\u5df1\u7684\u7236\u4eb2\u6539\u6389\u3002~~\u5e94\u8be5\u53eb\u53db\u53d8\uff08\u9003\uff09~~\n\n\n**\u8fd8\u662f\u4e09\u76ee\u8fd0\u7b97\u7b26\u770b\u4e0a\u53bb\u597d\u770b**\n```cpp\nint gf(int x) {\n\treturn fa[x]==x?fa[x]:fa[x]=gf(fa[x]);\n}\n```\n### \u5408\u5e76\n\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u53eb\u505a\u5408\u5e76\u3002\n\u5408\u5e76\u8fd9\u4e2a\u73a9\u610f\u7684\u672c\u8d28\u5c31\u662f\u8ba9\u4e00\u4e2a\u8054\u901a\u5757\u7684\u9876\u4e0a\u7684\u7956\u5148\u53d8\u6210\u53e6\u5916\u4e00\u4e2a\u8054\u901a\u5757\u7684\u7956\u5148\u7684\u513f\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002\n```cpp\nvoid Union(int x,int y) {\n\tint ance1=gf(x),ance2=gf(y);\n    if (ance1!=ance2) fa[ance1]=ance2;\n}\n```\n\u518d\u8be6\u7ec6\u7684\u53ef\u4ee5\u81ea\u5df1\u4e0a\u767e\u5ea6\uff0c\u81ea\u884c\u9605\u8bfb\u5176\u4ed6\u5927\u4f6c\u7684\u535a\u5ba2\u3002\n\n## **\u90a3\u4e48\u4ee5\u4e0a\u5c31\u662f\u5bf9\u4e8e\u7b97\u8054\u901a\u5757\u7684\u7b97\u6cd5**\n\u603b\u7ed3\uff1a\u53ef\u4ee5\u5f97\u5230\u80af\u5b9a\u662f\u5e76\u67e5\u96c6\u6700\u5feb\u4e86\u3002\n\n-----\n## \u5173\u4e8e\u6392\u5e8f\u7684\u90e8\u5206\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u6765\u8bb2\u4e00\u4e0b\u5173\u4e8e\u6392\u5e8f\u7684\u90e8\u5206\u3002\n\n\u8981\u4e0d\u5c31\u662fsort\uff0c\u8981\u4e0d\u5c31\u662f\u5f52\u5e76\u6392\u5e8f\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u4ec5\u4ec5\u53ea\u662f\u5c40\u9650\u4e8e\u6392\u5e8f\u7684\u601d\u60f3\u5185\uff0c\u6211\u4eec\u9700\u8981\u66f4\u52a0\u7a33\u5b9a\u800c\u4e14\u5feb\u901f\u5730\u7b97\u6cd5\u3002\n\n\u5728\u8bf4\u4e4b\u524d\u6211\u4eec\u5148\u628a\u6392\u5e8f\u7684\u4ee3\u7801\u8d34\u51fa\u6765\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxm=4000005;\nconst int maxn=5005;\nstruct Ed {\n\tint u,v,w;\n} edge[maxm];\nint n,m;\nint fa[maxn];\ninline int read() {\n\tint X=0,w=0;\n\tchar ch=0;\n\twhile (!isdigit(ch)) {\n\t\tw|=ch=='-';\n\t\tch=getchar();\n\t}\n\twhile (isdigit(ch)) {\n\t\tX=(X<<1)+(X<<3)+(ch^48);\n\t\tch=getchar();\n\t}\n\treturn w?-X:X;\n}\nint gf(int x) {//\u8def\u5f84\u538b\u7f29\n\tif (fa[x]==x) return fa[x];\n\telse return fa[x]=gf(fa[x]);\n}\nbool cmp(Ed a,Ed b) {\n\treturn a.w<b.w;\n}\nint main() {\n\tn=read(),m=read();\n\tfor (int i=1; i<=n; i++) fa[i]=i;\n\tfor (int i=1; i<=m; i++) {\n\t\tedge[i].u=read();\n\t\tedge[i].v=read();\n\t\tedge[i].w=read();\n\t}\n\tsort(edge+1,edge+1+m,cmp);//\u6392\u5e8f\uff0c\u5176\u5b9e\u53ef\u4ee5\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u61d2\u5f97\u5199\n\tint ans=0,cnt=0;\n\tfor (int i=1; i<=m; i++) {\n\t\tint ance1=gf(edge[i].u),ance2=gf(edge[i].v);\n\t\tif (ance1!=ance2) {\n\t\t\tans+=edge[i].w;\n\t\t\tcnt++;\n\t\t\tfa[ance1]=ance2;\n\t\t}\n\t\tif (cnt==n-1) break;\n\t}\n\tif (cnt<n-1) printf(\"orz\\n\");\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\u4ee5\u4e0a\u6bcf\u4e2a\u4eba\u90fd\u4f1a\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u5c31\u8981\u8bb2\u91cd\u70b9\u4e86\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528**\u4f18\u5148\u961f\u5217**\u6765\u4f18\u5316\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u5c0f\u6839\u5806\u3002~~\u6211\u662f\u4e00\u4e2a\u849f\u84bb\u849f\u84bb~~\n\n\u4ec0\u4e48\u610f\u601d\uff1f\u5c31\u662f\u6211\u4eec\u76f4\u63a5\u8bfb\u5165\u7684\u65f6\u5019\u5c31\u628a\u5e8f\u6392\u597d\u4e86\uff0c\u4f18\u5148\u961f\u5217\u662f\u4e00\u4e2a\u975e\u5e38\u725b\u903c\u7684\u4e1c\u897f\uff0c\u8fd9\u4e2a\u73a9\u610f\u6709\u5feb\u901f\uff0c\u800c\u4e14\u53c8\u7a33\u5b9a\uff0c\u4e0d\u4f1a\u50cf\u5feb\u6392\u90a3\u6837\u4e07\u4e00\u6765\u4e86\u4e00\u4e2a\u5751\u70b9\uff0c\u90a3\u4e48\u5c31GG\u4e86\u90a3\u79cd\u3002\n\n**\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4f18\u5148\u961f\u5217\u7684\u4ee3\u7801\u5f88\u77ed\uff0c\u53ef\u4ee5\u8282\u7ea6\u5f88\u591a\u65f6\u95f4**\n\n\u76f4\u63a5\u4e0a\u7a0b\u5e8f\u5427\uff0c\u4e5f\u4e0d\u60f3\u8bb2\u592a\u591a\u4e86\uff0c\u901a\u8fc7\u7a0b\u5e8f\u6765\u9886\u609f\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxm=4000005;\nconst int maxn=5005;\nstruct Edge{\n\tint u,v,w;\n\tbool operator <(const Edge a) const {return w>a.w;}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f18\u5148\u961f\u5217\u6392\u5e8f\n}edge[maxm];\npriority_queue<Edge>q;//\u4f18\u5148\u961f\u5217\nint n,m;\nint fa[maxn];\ninline int read() {//\u8bfb\u5165\u4f18\u5316\uff0c\u4e0d\u8981\u95ee\u6211\u8fd9\u662f\u600e\u4e48\u5199\u7684\uff0c\u81ea\u5df1\u767e\u5ea6\n\tint X=0,w=0;char ch=0;\n\twhile (!isdigit(ch)) {w|=ch=='-';ch=getchar();}\n\twhile (isdigit(ch)) {X=(X<<1)+(X<<3)+(ch^48);ch=getchar();}\n\treturn w?-X:X;\n}\ninline int gf(int x) {return fa[x]==x?fa[x]:fa[x]=gf(fa[x]);}//\u8def\u5f84\u538b\u7f29\nint main() {\n\tn=read(),m=read();\n\tfor (int i=1;i<=n;i++) fa[i]=i;\n\tfor (int i=1;i<=m;i++) q.push((Edge){read(),read(),read()});//\u9a9a\u6c14\u7684\u8bfb\u5165\n\tint ans=0,cnt=0;\n\twhile (!q.empty()) {\n\t\tEdge kkk=q.top(); q.pop();//\u76f4\u63a5\u53d6\u51fa\u961f\u9996\u5c31\u662f\u6700\u5c0f\u7684\uff0c\u662f\u4e0d\u662f\u5f88\u795e\u5947\uff0c\u6211\u89e3\u91ca\u4e0d\u4e86\uff0c\u53ef\u4ee5\u53bb\u95ee\u5f00\u53d1c++\u7684\u5927\u4f6c\u4eec\u3002\n\t\tint ance1=gf(kkk.u),ance2=gf(kkk.v);//\u5224\u8054\u901a\n\t\tif (ance1!=ance2) ans+=kkk.w,cnt++,fa[ance1]=ance2;\n\t\tif (cnt==n-1) break;\n\t}\n\tif (cnt<n-1) printf(\"orz\\n\");\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n```\n\u603b\u7ed3\uff1a\u5176\u5b9e\u6211\u89c9\u5f97\u65f6\u95f4\u8fd8\u662f\u4f18\u5148\u961f\u5217\u4f18\u5316\u66f4\u597d\u4e00\u70b9\uff0c\u800c\u4e14\u66f4\u52a0\u7a33\u5b9a\uff0c\u6b22\u8fce\u5927\u5bb6\u8bc4\u8bba\u3002",
        "postTime": 1540306558,
        "uid": 35567,
        "name": "Ayers",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3366 \u3010\u3010\u6a21\u677f\u3011\u6700\u5c0f\u751f\u6210\u6811\u3011"
    }
]