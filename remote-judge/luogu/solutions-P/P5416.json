[
    {
        "content": "\u9898\u610f\uff1a\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u96c6\u5408\uff0c\u4e00\u4e9b\u5143\u7d20\u5b58\u5728\u8fd9\u4e2a\u96c6\u5408\u4e4b\u4e2d\uff0c\u6bcf\u4e2a\n\n\u8282\u70b9\u4e0a\u7684\u96c6\u5408\uff0c\u662f\u7531\u7236\u4eb2\u7684\u5148\u590d\u5236\u4e0b\u6765\uff0c\u7136\u540e\u4fee\u65391\u4e2a\u5143\u7d20\uff0c\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\u3002\n\n\u6bcf\u4e2a\u5143\u7d20\u6709$(x,y,z,c)$\u56db\u4e2a\u503c\uff0c\u5176\u5b9e\u53ef\u4ee5\u53d1\u73b0$(y,z)$\u6ca1\u7528\uff0c\u90a3\u4e48\uff0c\u5c31\u662f\u4e24\u4e2a$(x,c)$\n\n\u6bcf\u6b21\u7ed9\u51fa\u6811\u4e0a\u4e00\u4e2a\u70b9\uff0c\u4ee5\u53ca\u4e00\u4e2a$X$\uff0c\u8981\u6c42\u51fa\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u5143\u7d20\u7684\n\n$$min( ( X - x_i)^2+C_i )$$\n\n\u5bb9\u6613\u60f3\u5230\u7684\u662f\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u68f5\u6811\u7684$dfs$\u5e8f\u3002\u4e8e\u662f\uff0c\u6bcf\u4e2a\u5143\u7d20\u5c31\u5b58\u5728\n\n\u4e00\u4e9b\u533a\u95f4\u4e4b\u4e2d\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u5230\u6bcf\u4e2a\u5143\u7d20\u5b58\u5728\u7684\u533a\u95f4\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u5143\u7d20\u5b58\u5165\n\n\u7ebf\u6bb5\u6811\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u4e4b\u4e2d\u3002\n\n\u63a5\u7740\u6211\u4eec\u53ef\u4ee5\u63a8\u67ff\u5b50\u4e86\uff08\u7cbe\u901a\u659c\u7387\u4f18\u5316\u6216\u8005\u51f8\u5305\u7684\u53ef\u4ee5\u5ffd\u7565\uff09\n\n\u6211\u4eec\u4ee4\n\n$$(X-x_i)^2+C_i=X^2-2Xx_i+x_i^2+C_i=k$$\n\n\u90a3\u4e48\n\n$$2Xx_i+k=X^2+x_i^2+C_i$$\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a$(x_i,X^2+x_i^2+C_i)$\u770b\u4f5c\u662f\u4e2a\u51b3\u7b56\u70b9\uff0c\u800c\u6211\u4eec\u6709\u4e00\u4e2a\u659c\u7387\u4e3a\n\n$2X$\u7684\u76f4\u7ebf\uff0c\u53ea\u8981\u6211\u4eec\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\uff0c\u610f\u5473\u7740\u6211\u4eec\u8fdb\u884c\u4e86\u4e00\u6b21\u51b3\u7b56\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\n\n\u8ba9$k$\u5c3d\u91cf\u7684\u5c0f\uff0c\u4e5f\u5c31\u662f\u5230$y$\u8f74\u7684\u622a\u8ddd\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\n\n\u8981\u7ef4\u62a4\u51fa\u4e00\u4e2a\u51f8\u5305\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a$X$\uff0c\u627e\u5230\u659c\u7387\u7b2c\u4e00\u4e2a\u5927\u4e8e$2X$\u7684\u7ebf\u6bb5\uff0c\u5b83\u524d\u9762\n\n\u7684\u70b9\u65e2\u662f\u6700\u4f18\u51b3\u7b56\u3002\n\n\u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u5f00\u9500\u5f88\u5927\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e$x_i$\uff0c\u4ece\u5c0f\u5230\u5927\u7684\u63d2\u5165\u5230\u6bcf\u4e00\u4e2a\u533a\u95f4\u4e4b\u4e2d\uff0c\u5728\u6240\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7684\u533a\n\n\u95f4\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u51f8\u5305\u3002\u5bf9\u4e8e\u8be2\u95ee\u4e5f\u5bf9\u4e8e$X$\u4ece\u5c0f\u5230\u8fbe\u7684\u53bb\u8be2\u95ee\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u4e00\u4e2a\u70b9\uff0c\n\n\u5e76\u5728\u7ecf\u8fc7\u7684\u533a\u95f4\u4e4b\u4e2d\uff0c\u6c42\u51fa\u6700\u53f3\u89e3\u5e76\u53d6$min$.\n\n\u5e76\u9644\u4e0a\u4eba\u5e05\u4f46\u5e38\u6570\u5927\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\n#define N 500007\n#define ls (x<<1)\n#define rs (x<<1|1)\n#define inf 1e17\n#define LL long long\nint n , m , tot , cnt , num ;\nint nex[2*N] , fire[N] , to[2*N] ;\nint L[4*N] , R[4*N] , a[N] , dfn[N] , To[N] ;\nLL C[N] , Ans[N] , val[N] ;\nstruct node{\n    LL x , val , opt ;\n}RR[N] ;\nbool operator < (node a , node b){ return a.val < b.val ;}\nbool cmp(int a , int b){ // \u6c42\u51fa\u4e00\u4e2a\u6392\u5217\uff0c\u4f7f\u5f97val\u9012\u589e\n    return val[a] < val[b] ;\n}\ndouble kk(int x , int y){ // \u6c42\u659c\u7387\n    return (double)( (double)val[x] * val[x] + (double)C[x] - \n    (double)val[y] * val[y] - (double)C[y] ) / (double)( (double)val[x] - (double)val[y] ) ;\n}\nvoid add(int u , int v){\n    nex[++tot] = fire[u] ;\n    fire[u] = tot ;\n    to[tot] = v ;\n    return ;\n}\nvector<int> AL[N] , AR[N] ;\nvector<int> W[4*N] ;\nvoid dfs(int x , int fr){ // \u627e\u5230\u6bcf\u4e00\u4e2a\u5305\u542b\u7684\u533a\u95f4\n    dfn[x] = ++num ;\n    if( To[x] > 0 ) AL[To[x]].push_back( num ) ; // \u4ece\u8fd9\u4e2a\u5f00\u59cb\u4e00\u5b9a\u662f\u4e2a\u533a\u95f4\u5de6\u7aef\u70b9\n    if( To[x] < 0 ) AR[abs(To[x])].push_back( num - 1 ) ; // \u4ece\u8fd9\u4e2a\u7ed3\u675f\u662f\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9\n    for(int i = fire[x] ; i ; i = nex[i] ){\n        int v = to[i] ;\n        if( v == fr ) continue ;\n        dfs( v , x ) ;\n    }\n    if( To[x] > 0 ) AR[To[x]].push_back( num ) ; //\u8fd9\u4e2a\u70b9\u7ed3\u675f\u5219\u662f\u4e2a\u533a\u95f4\u53f3\u7aef\u70b9\n    if( To[x] < 0 ) AL[abs(To[x])].push_back( num + 1 ) ; // \u8fd9\u4e2a\u540e\u9762\u7684\u70b9\u4e00\u5b9a\u662f\u4e2a\u533a\u95f4\u5de6\u7aef\u70b9\n}\nvoid build(int x , int l , int r){\n    L[x] = 0 , R[x] = -1 ; // \u8fd9\u662f\u4e00\u4e2a\u521d\u59cb\u5316\uff0c\u6211\u5c31\u662f\u8fd9\u4e2a\u5730\u65b9\u8c03\u4e86\u6bd4\u8f83\u4e45\u3002\n    if( l == r ) return  ;\n    int mid = ( l + r ) >> 1 ;\n    build( ls , l , mid ) ; build( rs , mid + 1 , r ) ;\n}\nvoid update(int x , int l , int r , int ll , int rr , int t ){\n    if( ll == l && r == rr ){\n        while( W[x].size() <= R[x] + 5 ) W[x].push_back( 0 ) ; // \u4fdd\u9669\u4e00\u70b9\u3002\n        if( L[x] <= R[x] && val[W[x][R[x]]] == val[t] ){  // \u53ef\u80fd\u5b58\u5728x\u76f8\u7b49\u7684\u3002\n            if( C[W[x][R[x]]] <= C[t] ) return ;\n            R[x]-- ;\n        }\n        while( L[x] < R[x] && kk( W[x][R[x]] , t ) < kk( W[x][R[x]] , W[x][R[x] - 1] ) ) R[x]-- ;// \u7c7b\u4f3c\u4e8e\u659c\u7387\u4f18\u5316\u7684\u7ef4\u62a4\u51f8\u5305\u3002\n        W[x][R[x] + 1] = t ; R[x]++ ;\n        return ;\n    }\n    int mid = ( l + r ) >> 1 ;\n    if( rr <= mid ) update( ls , l , mid , ll , rr , t ) ;\n    else if( ll > mid ) update( rs , mid + 1 , r , ll , rr , t ) ;\n    else update( ls , l , mid , ll , mid , t ) , update( rs , mid + 1 , r , mid + 1 , rr , t ) ;\n}\nLL query(int x , int l , int r , int pos , LL t , LL res ){\n    LL res1 = inf ;\n    while( L[x] < R[x] && kk( W[x][L[x]] , W[x][L[x] + 1] ) <= 2.0 * (double)t ) L[x]++ ; \n    //\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\u90fd\u7ef4\u62a4\u6c42\u4e00\u4e0b\u3002\n    if( L[x] <= R[x] && W[x].size() > 0 ) res1 = 1ll * ( t - val[W[x][L[x]]] ) * ( t - val[W[x][L[x]]] ) + C[W[x][L[x]]] ;\n    res1 = min( res , res1 ) ;\n    if( l == r ) return res1 ;\n    int mid = ( l + r ) >> 1 ;\n    if( pos <= mid ) return query( ls , l , mid , pos , t , res1 ) ;\n    else return query( rs , mid + 1 , r , pos , t , res1 ) ;\n}\nsigned main()\n{\n    scanf(\"%d%d%lld\" , &n , &m , &C[0] ) ;\n    for(int i = 1 ; i <= n - 1 ; i++ ){\n        int opt , u , y , z ;\n        LL x ;\n        scanf(\"%d\" , &opt ) ;\n        if( opt == 0 ){\n            scanf(\"%d%lld\" , &u , &x ) ;\n            scanf(\"%lld%d%d%lld\" , &val[x] , &y , &z , &C[x] ) ;\n            To[i] = x ;\n            add( u , i ) ; add( i , u ) ;\n        }\n        else{\n            scanf(\"%d%lld\" , &u , &x ) ;\n            To[i] = -x ;\n            add( u , i ) ; add( i , u ) ;\n        }\n    }\n    dfs( 0 , 0 ) ; // dfs\u5e8f\uff0c\u627e\u51fa\u6bcf\u4e2a\u533a\u95f4\n    build( 1 , 1 , n ) ;\n    for(int j = 1 ; j <= n ; j++ ) a[j] = j ;\n    sort( a + 1 , a + n + 1 , cmp ) ; // \u627e\u51fa\u54ea\u4e2aval\u9012\u589e\u7684\u6392\u5217\n    update( 1 , 1 , n , 1 , n , 0 ) ; // \u5730\u7403\u54ea\u4e2a\u8981\u52a0\u4e0a\n    for(int k = 1 ; k <= n ; k++ ){\n        int i = a[k] ;\n        for(int j = 0 ; j < AL[i].size() ; j++ ){\n            int L = AL[i][j] , R = AR[i][j] ;\n            if( L <= R ) update( 1 , 1 , n , L , R , i ) ;\n        }\n    }\n    for(int i = 1 ; i <= m ; i++ ){\n        scanf(\"%lld%lld\" , &RR[i].x , &RR[i].val ) ;\n        RR[i].opt = i ;\n    }\n    sort( RR + 1 , RR + m + 1 ) ; // \u8be2\u95ee\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u6b21\u64cd\u4f5c\u53ef\u662f\u76f4\u63a5\u53d6\u4e0a\u4e00\u6b21\u51f8\u5305\u6700\u524d\u9762\u7684\u503c\u3002\n    for(int i = 1 ; i <= m ; i++ ){\n        Ans[RR[i].opt] = query( 1 , 1 , n , dfn[RR[i].x] , RR[i].val , inf ) ;\n    }\n    for(int i = 1 ; i <= m ; i++ ) printf(\"%lld\\n\" , Ans[i] ) ;\n    return 0 ;\n}\n\n/*\n4 4 2\n0 0 1 10 2 3 7\n0 1 2 8 1 6 2\n1 1 1\n1 4\n2 8\n2 6\n3 8\n*/\n```\n\n\n",
        "postTime": 1568204151,
        "uid": 119610,
        "name": "Regimes",
        "ccfLevel": 7,
        "title": "[CTSC2016]\u65f6\u7a7a\u65c5\u884c"
    },
    {
        "content": "\u5927\u5bb6\u597d\uff0c\u6211\u662f\u4e00\u4e2a\u66b4\u529b\u9009\u624b\uff0c\u6240\u4ee5\u6211\u7528\u6781\u5176\u66b4\u529b\u7684\u65b9\u6cd5 AC \u4e86\u8fd9\u9053\u9898\u3002\n\n\u5f53\u7136\u4e5f\u56e0\u4e3a\u5982\u6b64\uff0c\u7a7a\u95f4\u6d88\u8017\u6bd4\u8f83\u5927\u3002\n\n\u4e3a\u4e86\u907f\u514d\u7a7a\u95f4\u7206\u70b8\uff0c\u6211\u4f7f\u7528\u4e86**\u4f4d\u57df**\u6765\u538b\u7f29\u7a7a\u95f4\u3002\n\n\u89c1 [\u6d1b\u8c37\u65e5\u62a5 #262 \u4f4d\u57df\u7b80\u4ecb](https://www.luogu.com.cn/blog/hkxa/introduction-BitField)\n\n---\n\n### \u6b63\u6587\n\n\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u4fee\u6539\u662f\u94fe\u72b6\u6570\u636e\uff08\u65f6\u7a7a $i$ \u7531\u65f6\u7a7a $i - 1$ \u53d1\u5c55\u800c\u6765\uff09\uff0c\u6211\u4eec\u76f4\u63a5\u7528 **\u674e\u8d85\u7ebf\u6bb5\u6811** \u7ef4\u62a4\u201c\u659c\u7387\u4f18\u5316DP\u201d \u5373\u53ef\u3002\n\n\u5f53\u64cd\u4f5c\u5f62\u6210\u4e86\u7c7b\u4f3c\u4e00\u68f5\u6811\u7684\u5f62\u5f0f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8f6c\u6362\u601d\u8def\uff0c\u5bf9 **\u64cd\u4f5c\u6811** \u7ef4\u62a4 **dfs \u5e8f**\u3002\n\n\u8003\u8651\u7528 **\u6811\u5957\u6811** \u6765\u7ef4\u62a4\uff08\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u7ebf\u6bb5\u6811\u5957\u674e\u8d85\u7ebf\u6bb5\u6811\uff09\u3002\n\n\u5982\u679c\u4e00\u6b21\u4fee\u6539\u6d89\u53ca\u4e86 dfs \u5e8f\u5728 $[l, r]$ \u4e2d\u7684\u8282\u70b9\uff0c\u5c31\u5bf9 **\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u7ebf\u6bb5\u6811** \u7684\u5728 $[l, r]$ \u4e2d\u7684\u8282\u70b9\u7684\u6807\u8bb0\uff08\u4e5f\u5c31\u662f\u4e00\u68f5\u674e\u8d85\u7ebf\u6bb5\u6811\uff09\u8fdb\u884c update\u3002\n\n```cpp\n// funct \u5b58\u50a8\u4e86\u4e00\u4e2a\u51fd\u6570\uff08\u659c\u7387\u4f18\u5316\uff09\nvoid range_insert(int u, int l, int r, int ml, int mr, const funct &f) {\n    if (l >= ml && r <= mr) {\n        segt_insert(root[u], -1e6, 1e6, f);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (mid >= ml) range_insert(u << 1, l, mid, ml, mr, f);\n    if (mid < mr) range_insert(u << 1 | 1, mid + 1, r, ml, mr, f);\n}\n```\n\n\u67e5\u8be2\u662f\u5355\u70b9\u7684\uff0c\u6240\u4ee5\u67e5\u8be2\u5f88\u7b80\u5355\n\n```cpp\nint64 query(int u, int l, int r, int pos, int x) {\n    if (l == r) return segt_query(root[u], -1e6, 1e6, x);\n    int mid = (l + r) >> 1;\n    return pos <= mid ? min(segt_query(root[u], -1e6, 1e6, x), query(u << 1, l, mid, pos, x)) :\n                        min(segt_query(root[u], -1e6, 1e6, x), query(u << 1 | 1, mid + 1, r, pos, x));\n}\n```\n\n---\n\n### \u5220\u9664\u64cd\u4f5c\n\n\u8003\u8651\u5c06\u5220\u9664\u64cd\u4f5c**\u901a\u8fc7 dfs \u5e8f**\u7406\u89e3\u6210 **\u5c06\u6dfb\u52a0\u64cd\u4f5c\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u5c0f\u7684\u6dfb\u52a0\u64cd\u4f5c**\n\n\u7531\u4e8e\u4e00\u6b21\u5220\u9664\u64cd\u4f5c\u53ea\u4f1a\u5c06\u4e00\u6b21\u6dfb\u52a0\u64cd\u4f5c\u5206\u5272\u6210\u4e24\u4e2a\u5c0f\u6dfb\u52a0\u64cd\u4f5c\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u53ef\u4ee5\u4fdd\u8bc1\u3002\n\n---\n\n\u590d\u6742\u5ea6 $\\Theta(n\\log^2n)$ \uff08\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u662f\uff09\n\n\u4ee3\u7801\u4e2d\u7684 ``segt_insert`` \u548c ``segt_query`` \u5c31\u662f\u6700\u666e\u901a\u7684\u674e\u8d85\u7ebf\u6bb5\u6811\uff08\u52a8\u6001\u5f00\u70b9\uff0c23 \u500d\u7a7a\u95f4\uff09\u3002\u5177\u4f53\u5b9e\u73b0\u89c1\u6700\u4e0b\u65b9\u4ee3\u7801\n\n## Code\n\n```cpp\n/*************************************\n * @problem:      \u300cCTSC2016\u300d\u65f6\u7a7a\u65c5\u884c.\n * @author:       brealid.\n * @time:         2020-11-26.\n*************************************/\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef unsigned uint32;\ntypedef long long int64;\ntypedef unsigned long long uint64;\n/*\n\u6b64\u5904\u4e3a\u5feb\u901f\u8f93\u5165\u8f93\u51fa\u4f18\u5316\uff0c\u5df2\u7701\u7565\n\u4e0b\u6587\u4e2d:\n- kin = \u4f18\u5316\u7684 cin\n- kout = \u4f18\u5316\u7684 cout\n*/\n\nconst int N = 5e5 + 5;\n\nint n, m, id[N];\nstruct planet_info {\n    int64 x: 21, c0: 43;\n} planet[N];\nvector<int> next_universe[N];\nint root[N << 2], trcnt;\nstruct funct {\n    int64 k: 23, b: 41;\n    funct() {}\n    funct(int K, int64 B) : k(K), b(B) {}\n    inline int64 calc(int64 x) const { return k * x + b; }\n    inline bool operator == (const funct &rhs) const { return k == rhs.k && b == rhs.b; }\n};\nstruct segt_node {\n    int ls, rs;\n    funct f;\n    inline void clear() { f.k = 0; f.b = 1.09e12; }\n} tr[N * 23];\n\nvoid segt_insert(int &u, int l, int r, const funct &f) {\n    if (!u) {\n        tr[u = ++trcnt].f = f;\n        return;\n    }\n    if (l == r) {\n        if (f.calc(l) < tr[u].f.calc(l)) tr[u].f = f;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (f.k > tr[u].f.k) {\n        if (f.calc(mid) < tr[u].f.calc(mid)) {\n            segt_insert(tr[u].rs, mid + 1, r, tr[u].f);\n            tr[u].f = f;\n        } else segt_insert(tr[u].ls, l, mid, f);\n    } else {\n        if (f.calc(mid) < tr[u].f.calc(mid)) {\n            segt_insert(tr[u].ls, l, mid, tr[u].f);\n            tr[u].f = f;\n        } else segt_insert(tr[u].rs, mid + 1, r, f);\n    }\n}\n\nint64 segt_query(int u, int l, int r, int x) {\n    if (!u) return 1.09e12;\n    int mid = (l + r) >> 1;\n    return x <= mid ? min(tr[u].f.calc(x), segt_query(tr[u].ls, l, mid, x)) :\n                      min(tr[u].f.calc(x), segt_query(tr[u].rs, mid + 1, r, x));\n}\n\nvoid range_insert(int u, int l, int r, int ml, int mr, const funct &f) {\n    if (l >= ml && r <= mr) {\n        segt_insert(root[u], -1e6, 1e6, f);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (mid >= ml) range_insert(u << 1, l, mid, ml, mr, f);\n    if (mid < mr) range_insert(u << 1 | 1, mid + 1, r, ml, mr, f);\n}\n\nint64 query(int u, int l, int r, int pos, int x) {\n    if (l == r) return segt_query(root[u], -1e6, 1e6, x);\n    int mid = (l + r) >> 1;\n    return pos <= mid ? min(segt_query(root[u], -1e6, 1e6, x), query(u << 1, l, mid, pos, x)) :\n                        min(segt_query(root[u], -1e6, 1e6, x), query(u << 1 | 1, mid + 1, r, pos, x));\n}\n\nvector<int> s[N];\n\ntemplate <typename Iter> Iter nxt(Iter x) { return ++x; }\n\nint dfn[N], dft;\nvoid predfs(int u) {\n    dfn[u] = ++dft;\n    if (id[u] >= 0) s[id[u]].push_back(dft);\n    else s[-id[u]].push_back(dft - 1);\n    for (uint32 i = 0; i < next_universe[u].size(); ++i) {\n        int v = next_universe[u][i];\n        predfs(v);\n    }\n    if (id[u] >= 0) s[id[u]].push_back(dft);\n    else s[-id[u]].push_back(dft + 1);\n}\n\nsigned main() {\n    tr[0].clear();\n    kin >> n >> m;\n    planet[0].c0 = kin.get<uint64>();\n    for (int i = 1, opt, fr; i < n; ++i) {\n        kin >> opt >> fr >> id[i];\n        next_universe[fr].push_back(i);\n        if (opt == 0) {\n            planet[id[i]].x = kin.get<int64>();\n            kin.ignore_next_int();\n            kin.ignore_next_int();\n            planet[id[i]].c0 = kin.get<uint64>();\n        } else {\n            id[i] = -id[i];\n        }\n    }\n    // int mxx = 0;\n    // for (int p = 0; p < n; ++p)\n    //     mxx = max(mxx, abs(planet[p].x));\n    predfs(0);\n    for (int p = 0; p < n; ++p) {\n        vector<int> &now = s[p];\n        funct f(-2 * planet[p].x, (int64)planet[p].x * planet[p].x + planet[p].c0);\n        for (size_t i = 0; i < now.size(); i += 2) {\n            if (now[i] > now[i + 1]) continue;\n            range_insert(1, 1, n, now[i], now[i + 1], f);\n        }\n    }\n    for (int i = 1, s, x0; i <= m; ++i) {\n        kin >> s >> x0;\n        kout << query(1, 1, n, dfn[s], x0) + (int64)x0 * x0 << '\\n';\n    }\n    return 0;\n}\n\n// qry x:\n// ans = \\min\\limits_{i}{ info[i].x^2 + c0 - 2 * qry_x * info[i].x } + qry_x * qry_x\n// k = -2 * info[i].x\n// b = info[i].x^2 + c0\n```\n\n---\n\nLOJ \u4e00\u76f4\u8fc7\u4e0d\u4e86\uff0c\u4f46 luogu \u5f88\u8f7b\u677e\u7684\u8fc7\u4e86\uff0c\u8fd8\u633a\u5feb\uff0c\u5f00\u4e86 O2 \u5728\u6700\u4f18\u89e3\u7684\u7b2c\u4e00\u9875\u3002",
        "postTime": 1606480687,
        "uid": 63720,
        "name": "brealid",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5416 \u3010[CTSC2016]\u65f6\u7a7a\u65c5\u884c\u3011"
    },
    {
        "content": "## P5416 [CTSC2016]\u65f6\u7a7a\u65c5\u884c\u3000\u9898\u89e3\n\n\u8fd9\u9053\u9898\u4e2d\uff0c\u6211\u4eec\u628a\u65f6\u7a7a\u95f4\u7684\u5173\u7cfb\u53ef\u4ee5\u770b\u6210\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u5373\u9898\u76ee\u4e2d\u7684\u661f\u7403\u3002\u9898\u76ee\u4e2d\u7ed9\u4e86 $(x,y,z,c)$ \u56db\u4e2a\u53c2\u6570\uff0c\u4f46\u53ef\u4ee5\u770b\u51fa\u53ea\u6709 $x$ \u548c $c$ \u662f\u6709\u7528\u7684\u3002\n\n\u9996\u5148\u6211\u4eec\u5904\u7406\u51fa\u8fd9\u68f5\u6811\u7684 dfs \u5e8f,\u5e76\u4e14\u5904\u7406\u51fa\u6bcf\u9897\u661f\u7403\u5728 dfs \u5e8f\u4e0a\u7684\u6709\u6548\u533a\u95f4\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u8fd0\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u601d\u60f3\uff0c\u5728\u5c06\u661f\u7403\u7684\u6240\u5728\u533a\u95f4\u653e\u5165\u7ebf\u6bb5\u6811\u7684\u8fc7\u7a0b\u4e2d,\u5c06\u9700\u8981\u4fee\u6539\u7684\u8282\u70b9\u6253\u4e0a\u6807\u8bb0\uff0c\u67e5\u8be2\u65f6\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u5c06\u6cbf\u9014\u7684\u6240\u6709\u53ef\u80fd\u7684\u7b54\u6848\u53d6\u6700\u5c0f\u503c\u3002\n\n\u73b0\u5728\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4e0b\u9762\u63d0\u4f9b\u4e24\u79cd\u65b9\u6cd5\u3002\n\n#### \u659c\u7387\u4f18\u5316\n\n\u5047\u8bbe\u7b2c $i$ \u4e2a\u67e5\u8be2\u5bf9\u5e94\u7b54\u6848\u662f $d_i$\uff0c\u5e76\u4e14\u7ed9\u51fa\u7684\u56fa\u5b9a\u503c\u4e3a $X_i$ \u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u5982\u4e0b\u5f0f\u5b50\uff1a\n\n$d_i =\\min((X_i-x_j)^2+c_j)$\n\n$x_j$ \u548c $c_j$ \u4e3a\u5bf9\u5e94\u8282\u70b9\u4e2d\u661f\u7403\u7684\u53c2\u6570\u3002\n\n\u5c55\u5f00\uff0c\u79fb\u9879\u5f97\u5230\uff1a\n\n$2X_ix_j+d_i-X_i^2=x_j^2+c_j$\n\n\u5c06 $(x_j,x_j^2+c_j)$ \u89c6\u4e3a\u4e00\u5806\u70b9\uff0c\u6709\u4e00\u6761\u659c\u7387\u4e3a $2X_i$ \u7684\u70b9\uff0c\u8ba9\u4f60\u6c42\u51fa\u6700\u5c0f\u622a\u8ddd\uff0c\u663e\u7136\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u7528\u51f8\u5305\u7ef4\u62a4\u3002\n\n\u4f46\u662f\u51f8\u5305\u8981\u6c42\u8fd9\u91cc\u7684 $X_i$ \u548c $x_j$ \u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a $x_j$ \u5bf9\u5e94\u7684\u533a\u95f4\u9884\u5904\u7406\u51fa\u6765\uff0c\u6309 $x$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4f9d\u6b21\u52a0\u5165\u7ebf\u6bb5\u6811\u3002\n\n\u67e5\u8be2\u4e5f\u662f\u79bb\u7ebf\u540e\u6309 $X_i$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u518d\u4f9d\u6b21\u67e5\u8be2\u3002\n\n#### \u53ef\u6301\u4e45\u5316\u674e\u8d85\u7ebf\u6bb5\u6811\n\n\u697c\u4e0a\u6709\u9898\u89e3\u8bf4\u53ef\u4ee5\u7528\u6811\u5957\u6811\uff08\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u7ebf\u6bb5\u6811\u5957\u674e\u8d85\u7ebf\u6bb5\u6811\uff09\u7ef4\u62a4\uff0c\u4f46\u5176\u5b9e\u4e0d\u7528\u90a3\u4e48\u9ebb\u70e6\u3002\n\n\u56e0\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u5728\u5b83\u7236\u4eb2\u7684\u57fa\u7840\u4e4b\u4e0a\u505a\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e00\u68f5\u53ef\u6301\u4e45\u5316\u7684\u674e\u8d85\u7ebf\u6bb5\u6811\u3002\n\n\u4f46\u662f\u8fd9\u6837\u8fd8\u662f\u4f1a MLE \u7684\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5c0f\u6280\u5de7\u3002\u5982\u679c\u7ebf\u6bb5\u6811\u4e0a\u4e00\u6bb5\u533a\u95f4\u5df2\u7ecf\u5168\u90e8\u5904\u7406\u5b8c\u4e86\uff0c\u90a3\u5b83\u5b50\u6811\u91cc\u7684\u6240\u6709\u7248\u672c\u548c\u8282\u70b9\u90fd\u518d\u4e5f\u7528\u4e0d\u4e0a\u4e86\uff0c\u4e4b\u540e\u7684\u4fee\u6539\u64cd\u4f5c\u53ef\u4ee5\u7528\u4e4b\u524d\u7684\u8282\u70b9\u53f7\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\n\n```cpp\nvoid solve(int x,int y,int p,int &lstroot)\n{\n    int T=tot,lst=lstroot;//\u8bb0\u5f55\u5f53\u524d\u7684\u7248\u672c\u53f7\u53ca\u8282\u70b9\u6570\u91cf \n    for(int i=0;i<M[p].size();++i)\n        lstroot=modify(-MAX,MAX,M[p][i],lstroot,p);//\u5728\u674e\u8d85\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539 \n    if(x!=y)\n\t{\n        int mid=(x+y)>>1;\n        solve(x,mid,lson(p),lstroot);//\u5904\u7406\u5b50\u533a\u95f4 \n        solve(mid+1,y,rson(p),lstroot);\n    }\n    for(int i=0;i<Q[p].size();++i)\n        ans[Q[p][i]]=getF(query(-MAX,MAX,xx[Q[p][i]],lstroot),Q[p][i]);//\u5904\u7406\u8be2\u95ee \n    lstroot=lst,tot=T;//\u8fd9\u91cc\u662f\u91cd\u70b9\uff0c\u5c06tot\u7f6e\u6210\u6765\u4e4b\u524d\u7684\u72b6\u6001\n//\u610f\u5473\u7740\u4e0b\u9762\u7684\u5b50\u533a\u95f4\u7684\u7248\u672c\u6e05\u7a7a\uff0c\u4e4b\u540e\u7684\u4fee\u6539\u4f1a\u8986\u76d6\u7248\u672c\u4fee\u6539\uff0c\u4ee5\u8282\u7ea6\u7a7a\u95f4 \n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n)$\uff0c\u8981\u5361\u4e00\u5361\u5e38\u3002\n\n\u4e0b\u9762\u662f\u4e11\u964b\u7684\u4ee3\u7801\n\n\u6cd5\u4e00\uff1a\n\n```cpp\n//written by cc0000\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=500020;\nconst int N=2030000;\ntypedef long long ll;\nint n,m;\nstruct planet{\n\tll x,c;\n}P[maxn];\nvector<int> que[N];\nint lx[N],rx[N];\n#define X(i) (P[(i)].x)\n#define Y(i) (P[(i)].x*P[(i)].x+P[(i)].c)\ndouble slope(int a,int b)\n{\n\tif(X(b)==X(a)) return (Y(a)>Y(b))?-1e18:1e18;//\u6ce8\u610f\u5224\u76f8\u7b49\u7684\u60c5\u51b5 \n\treturn 1.0*(Y(b)-Y(a))/(X(b)-X(a));\n}\nvoid insertx(int p,int v)\n{\n\twhile(lx[p]<rx[p]&&slope(que[p][rx[p]-1],que[p][rx[p]])>slope(que[p][rx[p]],v))\n\t\trx[p]--,que[p].pop_back();\n\tque[p].push_back(v);\n\trx[p]++;\n}\nll ask(int p,ll u)\n{\n\tif(que[p].empty()) return 1e17;\n\twhile(lx[p]<rx[p]&&slope(que[p][lx[p]],que[p][lx[p]+1])<=2.0*u)\t\tlx[p]++;\n\tint j=que[p][lx[p]];\n\treturn (1ll*P[j].x-u)*(1ll*P[j].x-u)+P[j].c;\n}\n#define lson(p) ((p)<<1)\n#define rson(p) ((p)<<1|1)\nvoid update(int L,int R,int x,int y,int v,int p)\n{\n\tif(x<=L&&y>=R)\n\t{\n\t\tinsertx(p,v);return;\n\t}\n\tint mid=(L+R)>>1;\n\tif(x<=mid) update(L,mid,x,y,v,lson(p));\n\tif(y>mid) update(mid+1,R,x,y,v,rson(p));\n\treturn;\n}\nvoid build(int L,int R,int p)\n{\n\tlx[p]=0,rx[p]=-1;//\u521d\u59cb\u51f8\u5305\u4e3a\u7a7a\uff0c\u5de6\u95ed\u53f3\u95ed\u7684\u5199\u6cd5\u8981\u521d\u59cb\u5316 \n\tif(L==R) return;\n\tint mid=(L+R)>>1;\n\tbuild(L,mid,lson(p));build(mid+1,R,rson(p));\n}\nll query(int L,int R,int pos,ll u,int p)\n{\n\tll ans=ask(p,u);\n\tif(L==R)return ans;\n\tint mid=(L+R)>>1;\n\tif(pos<=mid) ans=min(query(L,mid,pos,u,lson(p)),ans);\n\telse ans=min(query(mid+1,R,pos,u,rson(p)),ans);\n\treturn ans;\n}\nint planet_tot,planet_L[maxn],planet_R[maxn],planet_pos[maxn],planet_idx[maxn];\nbool cmp(int a,int b)\n{\n\treturn P[planet_pos[a]].x<P[planet_pos[b]].x;\n}\nvoid save(int l,int r,int v)//\u5b58\u7684\u662f\u5bf9\u5e94\u533a\u95f4 \n{\n\tplanet_tot++;\n\tplanet_L[planet_tot]=l;\n\tplanet_R[planet_tot]=r;\n\tplanet_pos[planet_tot]=v;\n\tplanet_idx[planet_tot]=planet_tot;\n}\nint to[maxn],nxt[maxn],head[maxn],num;\nvoid add(int x,int y){num++;nxt[num]=head[x];to[num]=y;head[x]=num;}\nint lst[maxn],dfn[maxn],siz[maxn],fr[maxn],id[maxn],opt[maxn],tot_tree;\nvoid dfs_build(int p)\n{\n\tdfn[p]=++tot_tree;siz[p]=1;\n\tfor(int i=head[p];i;i=nxt[i])\n\t\tdfs_build(to[i]),siz[p]+=siz[to[i]];\n}\nvoid dfs_create(int p)\n{\n\tif(opt[p]==0) lst[id[p]]=dfn[p];\n\telse save(lst[id[p]],dfn[p]-1,id[p]),lst[id[p]]=dfn[p]+siz[p];\n\tfor(int i=head[p];i;i=nxt[i])\n\t\tdfs_create(to[i]);\n\tif(opt[p]==0)\n\t\tsave(lst[id[p]],dfn[p]+siz[p]-1,id[p]);\n}\nint s[maxn],m_idx[maxn];ll x0[maxn];\nbool m_cmp(int a,int b){return x0[a]<x0[b];}\nll ans[maxn];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tP[0].x=0ll;\n\tscanf(\"%lld\",&P[0].c);\n\tid[1]=0;opt[1]=0;\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tll x,y,z,c;\n\t\tscanf(\"%d%d%d\",&opt[i],&fr[i],&id[i]);\n\t\tfr[i]++;add(fr[i],i);\n\t\tif(opt[i]==0)\n\t\t{\n\t\t\tscanf(\"%lld%lld%lld%lld\",&x,&y,&z,&c);\n\t\t\tP[id[i]].x=x;P[id[i]].c=c;\n\t\t}\n\t}\n\tdfs_build(1);dfs_create(1);\n\tsort(planet_idx+1,planet_idx+planet_tot+1,cmp);\n\tbuild(1,n,1);\n\tfor(int i=1;i<=planet_tot;i++)\n\t\tupdate(1,n,planet_L[planet_idx[i]],planet_R[planet_idx[i]],planet_pos[planet_idx[i]],1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%lld\",&s[i],&x0[i]);\n\t\ts[i]++;m_idx[i]=i;\n\t}\n\tsort(m_idx+1,m_idx+1+m,m_cmp);\n\tfor(int i=1;i<=m;i++)\n\t\tans[m_idx[i]]=query(1,n,dfn[s[m_idx[i]]],x0[m_idx[i]],1);\n\tfor(int i=1;i<=m;i++)\n\t\tprintf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n\u6cd5\u4e8c:\n\n\u8fd9\u7bc7\u4ee3\u7801\u662f\u7531\u5927\u4f6c @[Zpair](https://www.luogu.com.cn/user/163337) \u63d0\u4f9b\u7684\uff0c\u5e76\u4e14\u5df2\u7ecf\u8fc7\u672c\u4eba\u540c\u610f\u3002\n\n\u611f\u8c22\u4ed6\u7684\u9f0e\u529b\u652f\u6301 \u30fe(\u2267\u25bd\u2266*)o \n\n[\u8fd9\u91cc](https://www.luogu.com.cn/blog/vegetable-blog/p5416-ctsc2016-shi-kong-lv-xing) \u662f\u4ed6\u7684\u535a\u5ba2,\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define MAXN 500005\ntypedef long long ll;\nconst ll INF=1e18;\nconst int MAX=1e6;\nint xxx[MAXN],q;\nll c[MAXN];\n#define X(i) ((ll)xxx[i])\n#define K(j) (-2*(ll)xxx[j])\n#define B(j) ((ll)xxx[j]*xxx[j]+c[j])\n#define G(i,x) (i==-1?INF:K(i)*x+B(i))\nint a[MAXN*21],lson[MAXN*21],rson[MAXN*21],Now[MAXN*21],root,tot;\n#define NewNode(p) (q=++tot,lson[q]=lson[p],rson[q]=rson[p],a[q]=a[p],q)\n#define Min(i,j,x) (i==-1?j:(G(i,x)<G(j,x)?i:j))\nint modify(int x,int y,int idx,int p,int now)\n{\n\tif(Now[p]!=now)p=NewNode(p),Now[p]=now;\n\tif(x==y)\n\t{\n\t\ta[p]=Min(a[p],idx,x);\n\t\treturn p;\n\t}\n\tint mid=(x+y)>>1;\n\tif(!(Min(a[p],idx,mid)==a[p])^(K(a[p])<K(idx)))lson[p]=modify(x,mid,Min(a[p],idx,mid)^a[p]^idx,lson[p],now);\n\telse rson[p]=modify(mid+1,y,Min(a[p],idx,mid)^a[p]^idx,rson[p],now);\n\ta[p]=Min(a[p],idx,mid);\n\treturn p;\n}\nll query(int x,int y,int idx,int p)\n{\n\tif(!p)return INF;\n\tif(x==y)\n\t\treturn G(a[p],x);\n\tint mid=(x+y)>>1;\n\tif(idx<=mid)return min(G(a[p],idx),query(x,mid,idx,lson[p]));\n\tif(idx>mid)return min(G(a[p],idx),query(mid+1,y,idx,rson[p]));\n}\nint n,m;\nint head[MAXN],to[MAXN],nxt[MAXN],tot_edge;\nvoid add(int x,int y)\n{\n\tto[++tot_edge]=y;\n\tnxt[tot_edge]=head[x];\n\thead[x]=tot_edge;\n}\nint mp[MAXN],siz[MAXN],tot_tree;\nvoid dfs_build(int p)\n{\n\tmp[p]=++tot_tree;\n\tsiz[p]=1;\n\tfor(int i=head[p];i;i=nxt[i])\n\t\tdfs_build(to[i]),siz[p]+=siz[to[i]];\n}\nvector<int> Q[MAXN*4],M[MAXN*4];\n#define lson(p) ((p)<<1)\n#define rson(p) ((p)<<1|1)\nvoid add(int x,int y,int l,int r,int i,int op,int p)\n{//op==0\u662f\u67e5\u8be2 op==1\u662f\u4fee\u6539\n\tif(l<=x&&r>=y){\n\t\tif(op==0)Q[p].push_back(i);\n\t\telse M[p].push_back(i);\n\t\treturn;\n\t}\n\tint mid=(x+y)>>1;\n\tif(l<=mid)add(x,mid,l,r,i,op,lson(p));\n\tif(r>mid)add(mid+1,y,l,r,i,op,rson(p));\n}\nll ans[MAXN];\nint xx[MAXN];\nll getF(ll v,int i){return v+(ll)xx[i]*xx[i];}\nvoid solve(int x,int y,int p,int &lstroot)\n{\n\tint T=tot,lst=lstroot;\n\tfor(unsigned int i=0;i<M[p].size();++i)\n\t\tlstroot=modify(-MAX,MAX,M[p][i],lstroot,p);\n\tif(x!=y)\n\t{\n\t\tint mid=(x+y)>>1;\n\t\tsolve(x,mid,lson(p),lstroot);\n\t\tsolve(mid+1,y,rson(p),lstroot);\n\t}\n\tfor(unsigned int i=0;i<Q[p].size();++i)\n\t\tans[Q[p][i]]=getF(query(-MAX,MAX,xx[Q[p][i]],lstroot),Q[p][i]);\n\tlstroot=lst,tot=T;\n}\nint val[MAXN],op[MAXN],lst[MAXN];//op=1\u653e\u5f03 op=0\u662f\u6b96\u6c11\nvoid dfs(int p)\n{\n\tif(op[p]==0)\n\t\tlst[val[p]]=mp[p];\n\telse add(1,n,lst[val[p]],mp[p]-1,val[p],1,1),lst[val[p]]=mp[p]+siz[p];\n\tfor(int i=head[p];i;i=nxt[i])\n\t\tdfs(to[i]);\n\tif(op[p]==0)\n\t\tadd(1,n,lst[val[p]],mp[p]+siz[p]-1,val[p],1,1);\n}\nchar xch,xB[1<<15],*xS=xB,*xTT=xB;\n#define getc() (xS==xTT&&(xTT=(xS=xB)+fread(xB,1,1<<15,stdin),xS==xTT)?0:*xS++)\ninline int read()\n{\n\tint x=0;int f=1;char ch=getc();\n\twhile(ch<'0'|| ch>'9'){if(ch=='-')f=-1;ch=getc();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n\treturn x*=f;\n}\ninline long long readL()\n{\n\tlong long x=0;int f=1;char ch=getc();\n\twhile(ch<'0'|| ch>'9'){if(ch=='-')f=-1;ch=getc();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getc();}\n\treturn x*=f;\n}\nint main()\n{\n\tmemset(a,-1,sizeof(a));\n\tn=read();m=read();c[0]=read();val[1]=0;xxx[0]=0;\n\tint _x,_y,_z;\n\tfor(int i=2;i<=n;++i)\n\t{\n\t\top[i]=read();_x=read();val[i]=read();\n\t\tadd(_x+1,i);\n\t\tif(op[i]==0)\n\t\t\txxx[val[i]]=read(),_y=read(),_z=read(),c[val[i]]=readL();   \n\t}\n\tdfs_build(1);\n\tdfs(1);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\t_x=read(),xx[i]=read();\n\t\tadd(1,n,mp[_x+1],mp[_x+1],i,0,1);\n\t}\n\tsolve(1,n,1,root);\n\tfor(int i=1;i<=m;++i)\n\t\tprintf(\"%lld\\n\",ans[i]);\n}\n```",
        "postTime": 1642577785,
        "uid": 236523,
        "name": "cc0000",
        "ccfLevel": 7,
        "title": "P5416 [CTSC2016]\u65f6\u7a7a\u65c5\u884c\u3000\u9898\u89e3"
    },
    {
        "content": "\u7b2c\u4e03\u9053\u9ed1\u9898\uff01\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e4b\u4e2d\u987a\u5e26\u89e3\u51b3\u4e00\u4e9b\u7591\u96be\u6742\u75c7\u3002\r\n\r\n#### \u9898\u610f\r\n\r\n\u7ef4\u62a4 $n$ \u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u4ece\u524d\u9762\u67d0\u4e2a\u6807\u53f7\u6bd4\u5b83\u5c0f\u7684\u7248\u672c\u7ee7\u627f\u800c\u6765\u3002\r\n\r\n\u7ee7\u627f\u800c\u6765\u4e4b\u540e\u8981\u4e48\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20 $(x,c)$\uff0c\u8981\u4e48\u5220\u9664\u4e00\u4e2a\u5df2\u6709\u5143\u7d20\u3002\r\n\r\n\u7136\u540e\u7b2c $s$ \u4e2a\u96c6\u5408\u4e0a\u67e5\u8be2\u4e00\u4e2a\u503c $x_0$ \u4f7f\u5f97 $(x_i-x_0)^2+c_i$ \u6700\u5c0f\u5316\u3002\r\n\r\n> \u9898\u76ee\u4e2d\u7684 $y,z$ \u6ca1\u6709\u5fc5\u8981\u6240\u4ee5\u65e0\u9700\u7406\u4f1a\u3002\r\n\r\n---\r\n\r\n#### \u6211\u4eec\u4f1a\u4ec0\u4e48\r\n\r\n\u6211\u4eec\u4f1a\u4ec0\u4e48\uff1f\u659c\u7387\u4f18\u5316\u3002\u628a\u5f0f\u5b50\u62c6\u5f00\uff0c$x_i^2+x_0^2+c_i=ans+2x_ix_0$\u3002\r\n\r\n\u7b80\u5199\uff0c$k=2x_0$\uff0c$x_i^2+c_i=y_i$\uff0c$ans=b$\u3002\u539f\u5f0f= $kx_i+b=y+x_0^2$\u3002\u5c31\u6c42\u5f97\u6700\u5c0f\u7684 $b$ \u5373\u53ef\u3002 \r\n\r\n\u53d1\u73b0 $i$ \u70b9\u5176\u5b9e\u5c31\u662f $(x_i,y_i)$ \u4e00\u70b9\uff0c\u7136\u540e\u6211\u4eec\u62ff\u6761\u659c\u7387\u4e3a $k$ \u7684\u76f4\u7ebf\u4ece\u4e0b\u5230\u4e0a\u53bb\u626b\u5230\u6700\u5c0f\u7684 $b$\u3002\u8fd9\u4e2a\u6700\u5c0f\u7684 $b$ \u51cf\u53bb $x_0^2$ \u5373\u4e3a\u7b54\u6848\u3002\r\n\r\n\u4ece\u4e0b\u5f80\u4e0a\u626b\u5230\u6700\u5c0f\u7684 $b$ \u90a3\u5c31\u662f\u7ef4\u62a4\u4e0b\u51f8\u58f3\uff0c\u8981\u6c42 $x$ \u9012\u589e\u7136\u4e14\u659c\u7387\u9012\u589e\u3002\r\n\r\n\u6211\u4eec\u77e5\u9053\u7ef4\u62a4\u4e86\u4ec0\u4e48\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u96c6\u5408\uff0c\u7ef4\u62a4\u5176\u4e0b\u51f8\u58f3\uff0c\u5e76\u4e14\u7528 $k=2x_0$ \u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u626b\u63cf\u51fa\u7b54\u6848\u3002\r\n\r\n> Q:\u659c\u7387\u4f18\u5316\u662f\u5565\uff1fA:\u8fd9\u5c31\u662f\u3002\r\n>\r\n> Q:\u5982\u4f55\u7ef4\u62a4\u4e0b\u51f8\u58f3\uff1fA:\u5355\u8c03\u6808\u7ef4\u62a4\u659c\u7387\u9012\u589e\u3002\r\n>\r\n> Q:\u6392\u5e8f\u4f1a\u4e0d\u4f1a\u6210\u4e3a\u74f6\u9888\uff1fA:\u53ef\u4ee5\u4f7f\u7528\u57fa\u6570\u6392\u5e8f\uff0c\u4f46\u662f\u6ca1\u5fc5\u8981\uff0c\u56e0\u4e3a\u4e4b\u540e\u538b\u6839\u4e0d\u7528\u6392\u5e8f\u3002\r\n\r\n---\r\n\r\n#### \u6811\u8f6c\u5e8f\u5217\r\n\r\n\u6811\u5f62\u7ed3\u6784\uff0c\u600e\u4e48\u5904\u7406\uff1f\r\n\r\n\u6211\u4eec\u89c2\u5bdf\u5230\u4e00\u4e2a\u5143\u7d20\u51fa\u73b0\u5728\u5b83\u7684\u5b50\u6811\u4e4b\u5185\uff0c\u9664\u4e86\u5220\u9664\u64cd\u4f5c\u4e4b\u5916\u3002\r\n\r\n\u4e8e\u662f\u8003\u8651\u6309\u7167 dfn \u5e8f\u6392\u5e8f\uff0c\u5982\u679c\u6ca1\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u5143\u7d20\u5fc5\u7136\u51fa\u73b0\u7684\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u5982\u679c\u5728 $x$ \u8282\u70b9\u51fa\u73b0\u4e86\u8be5\u5143\u7d20\uff0c\u5219\u5b83\u80fd\u591f\u5f71\u54cd\u7684\u533a\u95f4\u5c31\u662f $[dfn[x],dfn[x]+siz[x]-1]$\u3002\r\n\r\n\u5220\u9664\u64cd\u4f5c\u4e5f\u662f\u5220\u53bb\u4e00\u6bb5 $dfn$ \u503c\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u5047\u8bbe\u5728 $x$ \u8282\u70b9\u4e2d\u67d0\u4e2a\u5143\u7d20\u88ab\u5220\u53bb\u4e86\uff0c\u90a3\u4e48\u5b83\u80fd\u591f\u5f71\u54cd\u7684\u533a\u95f4\u4e5f\u540c\u7406\u3002\r\n\r\n\u5bf9\u4e8e\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7b2c\u4e00\u6ce2\u6c42\u51fa $dfn$ \u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u6709**\u4e00\u6bb5**\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u8fd8\u6709**\u82e5\u5e72\u5c0f\u6bb5**\u8fde\u7eed\u7684\u4e0d\u5b58\u5728\u7684\u533a\u95f4\uff0c\u533a\u95f4\u4e2a\u6570\u663e\u7136\u662f $n$ \u4e2a\u3002\r\n\r\n\u90a3\u4e48\u679a\u4e3e\u6bcf\u4e2a\u5143\u7d20\u7136\u540e\u6309\u7167\u5220\u9664\u7684\u533a\u95f4\u6765\u4e00\u4e2a\u4e2a\u5206\u88c2\u539f\u6709\u8fde\u7eed\u7684\u533a\u95f4\u5373\u53ef\u3002\u53ef\u4ee5\u7b80\u5355\u5730\u89e3\u51b3\u3002\r\n\r\n>Q:\u533a\u95f4\u4e2a\u6570\u4e3a\u4ec0\u4e48\u662f $n$ \u4e2a\uff1fA:\u56e0\u4e3a\u96c6\u5408\u6570\u662f $n$ \u4e2a\uff0c\u6bcf\u4e2a\u96c6\u5408\u8981\u4e48\u5220\u9664\u5df2\u6709\u5143\u7d20\u8981\u4e48\u6dfb\u52a0\u5143\u7d20\u3002\r\n\r\n---\r\n\r\n#### \u5904\u7406\u5143\u7d20\u7684\u8d21\u732e\r\n\r\n\u5206\u6210\u533a\u95f4\u4e4b\u540e\uff0c\u5982\u4f55\u5904\u7406\uff1f\u73b0\u5728\u6bcf\u4e2a\u5143\u7d20\u5b83\u6709\u6548\u7684 $dfn$ \u503c\u533a\u95f4\u5df2\u7ecf\u5206\u88c2\u6210\u4e86\u4e00\u6bb5\u6bb5\u5c0f\u533a\u95f4\uff08\u6ca1\u5173\u7cfb\uff0c\u6bcf\u4e2a\u533a\u95f4\u90fd\u5f53\u5b8c\u6574\u7684\u533a\u95f4\u770b\uff09\uff0c\u533a\u95f4\u4e2a\u6570\u8fd8\u662f $O(n)$ \u7ea7\u522b\u7684\u3002\r\n\r\n\u73b0\u5728\u5176\u5b9e\u5c31\u662f\u57fa\u672c\u5f62\u5f0f\uff0c\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u5f71\u54cd $dfn$ \u5e8f\u5904\u4e8e\u6307\u5b9a\u533a\u95f4\u7684\u7b54\u6848\u3002\r\n\r\n\u6211\u4eec\u6309\u7167\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u67e5\u8be2\u7684\u5f62\u5f0f\u5206\u5272\u533a\u95f4\u5373\u53ef\uff1a\u5206\u6210\u4e86 $O(\\log n)$ \u4e2a\u533a\u95f4\u3002\r\n\r\n\u90a3\u4e48\u5efa\u9020\u4e00\u9897\u7ebf\u6bb5\u6811\u3002\r\n\r\n\u53ef\u4ee5\u8003\u8651\u5728\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u9762\u5148\u6253\u4e0a\u6807\u8bb0\uff0c\u6807\u8bb0\u4f7f\u7528 `vector` \u5b9e\u73b0\u3002\r\n\r\n\u7136\u540e\u6574\u7406\u6807\u8bb0\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u8ba1\u7b97\u51f8\u58f3\uff0c\u603b\u5171 $O(\\log n)$ \u4e2a\u5143\u7d20\u843d\u5728\u4e86 $O(\\log n)$ \u4e2a\u8282\u70b9\u4e0a\uff0c\u603b\u8282\u70b9\u4e2a\u6570\u662f $O(n\\log n)$ \u7ea7\u522b\u7684\u3002\r\n\r\n\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\u74f6\u9888\u5728\u4e8e\u6309\u7167 $x$ \u6392\u5e8f\u3002\u53ef\u4ee5\u57fa\u6570\u6392\u5e8f\u4f46\u662f\u6ca1\u6709\u5fc5\u8981\u3002\r\n\r\n\u6240\u4ee5\u5bf9\u4e8e\u6240\u6709\u5143\u7d20\uff0c\u6309\u7167 $x$ \u503c\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u52a0\u5165\u7ebf\u6bb5\u6811\u3002\r\n\r\n\u8fd9\u6837\u8dd1\u4e0b\u51f8\u58f3\u5c31\u4e0d\u7528\u6bcf\u5c42 $O(n\\log n)$ \u6392\u5e8f\u4e86\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\r\n\r\n> Q:\u5177\u4f53\u600e\u4e48\u4e2a\u52a0\u5165\u6cd5\uff1fA:\u6bcf\u4e2a\u533a\u95f4\u7ef4\u62a4\u4e00\u4e2a `vector` \u7136\u540e\u5728\u540e\u9762\u52a0\u5165 $(x,c)$ \u5373\u53ef\u3002\u8dd1\u4e0b\u51f8\u58f3\u7684\u65f6\u5019\u6309\u7167\u987a\u5e8f\u53bb\u5904\u7406\u3002\r\n\r\n---\r\n\r\n#### \u5904\u7406\u67e5\u8be2\u64cd\u4f5c\r\n\r\n\u505a\u9898\u7684\u65f6\u5019\u6709\u70b9\u72b9\u8c6b\uff0c\u6807\u8bb0\u8981\u4e0d\u8981\u4e0b\u4f20\uff1f\u5b9e\u9645\u4e0a\u662f\u4e0d\u7528\u4e0b\u4f20\u7684\u3002\r\n\r\n\u6253\u5728\u6574\u4e2a\u533a\u95f4\u4e0a\u9762\u7684\u6807\u8bb0\u5c31\u4e0d\u9700\u8981\u4e0b\u4f20\u3002\r\n\r\n\u6211\u4eec\u67e5\u8be2 $s$ \u7684\u65f6\u5019\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u67e5\u8be2 $dfn[s]$ \u5355\u70b9\u4e0a\u9762\u6240\u6709\u7684\u6807\u8bb0\u3002\u53ef\u4ee5\u8f7b\u6613\u6c42\u51fa\u659c\u7387 $k=2x_0$\u3002\r\n\r\n\u4f46\u662f\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u9762\u90fd\u4e8c\u5206\u4e00\u904d\u8fd8\u662f\u5f88\u6162\uff0c\u4f1a\u5230 $O(m\\log n)$ \u7ea7\u522b\uff1b\u6240\u4ee5\u4e5f\u540c\u63d2\u5165\u5143\u7d20\u4e00\u4e2a\u65b9\u6cd5\uff0c\u628a\u6240\u6709\u8be2\u95ee\u6309\u7167\u659c\u7387 $k$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u52a0\u5165\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\r\n\r\n> Q:\u8fd9\u662f\u79bb\u7ebf\u4e4b\u540e\u5355\u70b9\u67e5\u8be2\uff0c\u80fd\u5426\u4f7f\u7528\u66f4\u5feb\u7684\u6570\u636e\u7ed3\u6784\uff08\u6bd4\u5982\u6811\u72b6\u6570\u7ec4\uff09\u67e5\u8be2\uff1fA:\u53ef\u4ee5\u3002\r\n>\r\n> Q:\u5177\u4f53\u5982\u4f55\u52a0\u5165\u8be2\u95ee\uff1fA:\u5176\u5b9e\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u67e5\u8be2\u64cd\u4f5c\uff0c\u5728\u7ecf\u8fc7\u7684\u6bcf\u4e2a\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\u65e0\u9700\u53e6\u5f00 vector \u5904\u7406\u3002\r\n>\r\n> Q:\u5df2\u77e5\u659c\u7387 $k$ \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u4e4b\u540e\uff0c\u600e\u4e48\u5904\u7406\uff1fA:\u679a\u4e3e\u4e0b\u51f8\u58f3\u4e0a\u7b2c $i$ \u70b9\u548c\u7b2c $i+1$ \u70b9\u4e4b\u95f4\u7684\u7ebf\u6bb5\uff08\u5df2\u77e5\u659c\u7387\u9012\u589e\uff09\u505a\u53cc\u6307\u9488\uff0c$j$ \u6307\u5411\u7b2c $j$ \u4e2a\u8be2\u95ee\uff0c\u7136\u540e\u6bcf\u6b21 $j$ \u5f80\u53f3\u79fb\u52a8\u4e00\u4f4d\uff0c$i$ \u5f80\u53f3\u79fb\u52a8\u82e5\u5e72\u4f4d\u77e5\u9053 $i$ \u4e0d\u6ee1\u8db3\u6027\u8d28\u4f46\u662f\u524d $i-1$ \u4e2a\u70b9\u548c\u5176\u540e\u7ee7\u6240\u6784\u6210\u7684\u7ebf\u6bb5\u7684\u659c\u7387\u90fd\u662f $\\le k$ \u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981 $i$ \u70b9\u4f5c\u4e3a\u7b54\u6848\uff0c\u5b83\u7684\u8d21\u732e\u503c\u4e5f\u80fd\u591f\u663e\u7136\u5f97\u51fa\u3002\r\n\r\n---\r\n\r\n#### \u5bf9\u4e8e\u4ee3\u7801\u5b9e\u73b0\r\n\r\n\u8fd9\u9898\u5361\u7a7a\u95f4\u3002\u6240\u4ee5\u9700\u8981\u5728\u539f\u601d\u8def\u4e0a\u4f7f\u7528\u4e00\u4e9b\u6280\u5de7\u6765\u89e3\u51b3\u95ee\u9898\u3002\r\n\r\n+ \u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\uff0c\u53ea\u5f00\u4e00\u4e2a vector \u8bb0\u5f55\u51f8\u5305\u548c\u4e00\u4e2a\u7b54\u6848\u6307\u9488\uff1b\r\n+ \u63d2\u5165\u65f6\u5019\u76f4\u63a5\u5728 vector \u672b\u5c3e\u63d2\u5165\uff0c\u540c\u65f6\u7ef4\u62a4\u8be5\u51f8\u5305\u7684\u6027\u8d28\uff1b\r\n+ \u76f4\u63a5\u5b58\u50a8\u5bf9\u5e94\u4f4d\u7f6e\u7684\u661f\u7403\u800c\u4e0d\u662f\u91cd\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\uff1b\r\n+ \u4f7f\u7528 DFS \u4e00\u6b21\u6027\u6c42\u51fa\u6240\u6709\u5de6\u53f3\u7aef\u70b9\uff1b\r\n+ \u653e\u5f03\u4e86\u7edf\u4e00\u8ba1\u7b97\u7b54\u6848\u7684\u8fc7\u7a0b\u3002\u56e0\u4e3a\u8981\u518d\u5f00\u4e00\u4e2a vector \u592a\u8017\u8d39\u7a7a\u95f4\u4e86\u3002\r\n+ \u67e5\u8be2\u4e0d\u8ba1\u5165 vector \u800c\u76f4\u63a5\u6c42\u89e3\u7b54\u6848\u3002\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u76f4\u63a5\u53f3\u79fb\u7b54\u6848\u6307\u9488\u6765\u5b9e\u73b0\u53cc\u6307\u9488\u6c42\u89e3\uff1b\r\n+ vector \u975e\u5e38\u6d88\u8017\u7a7a\u95f4\u3002\u8ba1\u7b97\u521d\u59cb dfn \u5e8f\u533a\u95f4\u7684\u65f6\u5019\u4e0d\u5e94\u8be5\u4f7f\u7528 vector \u5b58\u50a8\uff0c\u53ef\u4ee5\u4f7f\u7528\u94fe\u5f0f\u524d\u5411\u661f\u53d6\u800c\u4ee3\u4e4b\uff1b\r\n\r\n\u7136\u540e\u5c31\u53ef\u4ee5\u5199\u51fa LOJ \u4e0a\u7684\u6700\u77ed\u89e3\u4e86\uff01\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;typedef int I;const I inf=0x3f3f3f3f;typedef long long LL;const I N=5e5+10;\r\nstruct nd{I x;LL y,c;void cy(){y=1ll*x*x+c;}}A[N];\r\ndouble slp(nd a,nd b){return (a.x==b.x)?((a.y<b.y)?1ll<<60:-(1ll<<60)):1.0*(a.y-b.y)/(a.x-b.x);}\r\nstruct ans{vector<nd>a;unsigned p;\r\n\tvoid ins(nd x){ for(I i=a.size()-1;i>0&&slp(a[i-1],a[i])>slp(a[i],x);a.pop_back(),--i); a.push_back(x);}\r\n\tLL qry(I x){\r\n\t\tfor(;p+1<a.size()&&slp(a[p],a[p+1])<2*x;++p);\r\n\t\tif(p<a.size())return 1ll*(a[p].x-x)*(a[p].x-x)+a[p].c;\r\n\t\treturn 1ll<<60;\r\n\t}}S[N<<1];\r\nLL ans[N];struct qr{I s,x,id;friend bool operator <(qr a,qr b){return a.x<b.x;}}Q[N];\r\nstruct ch{I l,r,id;friend bool operator <(ch a,ch b){return A[a.id].x<A[b.id].x;}}iv[N];\r\nI n,m,L[N<<1],R[N<<1],rt,cnt,cl,dfn[N],clk,op[N],oid[N],hd[N],nx[N],ey[N],ec;\r\nvoid build(I&p,I l,I r){\r\n\tp=++cnt;if(l==r)return;I mid=(l+r)>>1;\r\n\tbuild(L[p],l,mid);\r\n\tbuild(R[p],mid+1,r);\r\n}void chg(I p,I l,I r,I cl,I cr,nd cx){\r\n\tif(cl<=l&&r<=cr){S[p].ins(cx);return;}\r\n\tI mid=(l+r)>>1;\r\n\tif(cl<=mid)chg(L[p],l,mid,cl,cr,cx);\r\n\tif(mid<cr)chg(R[p],mid+1,r,cl,cr,cx);}\r\nvoid qry(I p,I l,I r,qr qx){\r\n\tans[qx.id]=min(ans[qx.id],S[p].qry(qx.x));\r\n\tif(l==r)return;\r\n\tI mid=(l+r)>>1;\r\n\tif(qx.s<=mid)qry(L[p],l,mid,qx);\r\n\telse qry(R[p],mid+1,r,qx);}\r\nstruct gr{I ey[N],nx[N],hd[N],ec;void conn(I x,I y){ey[++ec]=y;nx[ec]=hd[x];hd[x]=ec;}}G,lp,rp;\r\nvoid dfs(I x){\r\n\tdfn[x]=++clk;I ox=oid[x];\r\n\tif(!op[x])lp.conn(ox,clk);else rp.conn(ox,clk-1);\r\n\tfor(I i=G.hd[x];i;i=G.nx[i])dfs(G.ey[i]);\r\n\tif(!op[x])rp.conn(ox,clk);else lp.conn(ox,clk+1);\r\n}int main(){\r\n\tfreopen(\"travel.in\",\"r\",stdin);\r\n\tfreopen(\"travel.out\",\"w\",stdout);\r\n\tscanf(\"%d%d%lld\",&n,&m,&A[1].c);A[1].x=0;A[1].cy();oid[1]=1;\r\n\tfor(I i=2,fr;i<=n;++i){\r\n\t\tscanf(\"%d%d%d\",&op[i],&fr,&oid[i]);++fr;++oid[i];\r\n\t\tG.conn(fr,i);\r\n\t\tif(!op[i])scanf(\"%d%d%d%lld\",&A[oid[i]].x,&fr,&fr,&A[oid[i]].c),A[oid[i]].cy();\r\n\t}dfs(1);memset(ans,0x3f,sizeof(ans));\r\n\tfor(I i=1;i<=n;++i)for(I j=lp.hd[i],k=rp.hd[i];j&&k;j=lp.nx[j],k=rp.nx[k])iv[++cl]={lp.ey[j],rp.ey[k],i};\r\n\tsort(iv+1,iv+cl+1);build(rt,1,n);\r\n\tfor(I i=1;i<=cl;++i)chg(rt,1,n,iv[i].l,iv[i].r,A[iv[i].id]);\r\n\tfor(I i=1;i<=m;++i)scanf(\"%d%d\",&Q[i].s,&Q[i].x),Q[i].s=dfn[Q[i].s+1],Q[i].id=i;\r\n\tsort(Q+1,Q+m+1);\r\n\tfor(I i=1;i<=m;++i)qry(rt,1,n,Q[i]);\r\n\tfor(I i=1;i<=m;++i)printf(\"%lld\\n\",ans[i]);\r\n\treturn 0;\r\n}\r\n```",
        "postTime": 1675416146,
        "uid": 121995,
        "name": "SmallTualatin",
        "ccfLevel": 0,
        "title": "P5416 [CTSC2016]\u65f6\u7a7a\u65c5\u884c \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u9898\u4e2d\u7684 $y,z$ \u597d\u50cf\u6ca1\u5565\u7528\u2026\u2026\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u8981\u6c42 $\\min((x_0-x_i)^2+c_i)$\n\n\u8bbe $(x_0-x_i)^2+c_i=ans$\u3002\n\n\u90a3\u4e48 $x_0^2+x_i^2-2x_0x_i+c_i=ans$\n\n\u6240\u4ee5 $x_0^2+x_i^2+c_i=2x_0x_i+ans$\u3002\n\n\u8fd9\u4e2a\u5f0f\u5b50\u660e\u663e\u4e3a $y=kx+b$ \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u7ef4\u62a4\u4e0b\u51f8\u5305\u6c42\u89e3\u3002\n\n\u90a3\u4e48\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\u5373\u4e3a $(x_i,x_i^2+c_i)$\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7684\u659c\u7387\u4e3a $2x_0$\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u4e8c\u5206\u6c42\u89e3\u3002\n\n\u4f46\u662f\u6709\u65f6\u95f4\u53d8\u5316\uff0c\u60f3\u5230\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u9996\u5148\u6240\u6709\u7684\u65f6\u95f4\u8282\u70b9\u6210\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u68f5\u6811\u904d\u5386\u4e00\u904d\uff0c\u7528 dfs \u5e8f\u5bf9\u7ebf\u6bb5\u6811\u7f16\u53f7\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u52a0\u5165\uff0c\u90a3\u4e48\u4f1a\u4ece\u8fd9\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5230\u904d\u5386\u6574\u68f5\u5b50\u6811\u5b8c\u7ed3\u675f\uff0c\u90a3\u4e48\u5bf9\u6574\u68f5\u5b50\u6811\u52a0\u5165\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u5982\u679c\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u4ece\u8fd9\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5230\u6574\u68f5\u5b50\u6811\u5b8c\u7ed3\u675f\uff0c\u4e0d\u8fdb\u884c\u52a0\u64cd\u4f5c\uff0c\u904d\u5386\u5b8c\u5b50\u6811\u540e\uff0c\u8fdb\u884c\u52a0\u64cd\u4f5c\u3002\n\n\u5c31\u5982\u540c\u52a0\u4e0a $(l_1,r_1)$\uff0c\u51cf\u53bb $(l_2,r_2)$\uff0c\u5c31\u7b49\u540c\u4e8e\u52a0\u4e0a $(l_1,l_2-1),(r_1+1,r_2)$ \u4e24\u4e2a\u533a\u95f4\u3002\n\n\u5148\u5c06\u6bcf\u4e2a\u70b9\u6309 $x$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c$y$ \u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6c42\u89e3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\times \\log_2^2(n))$\u3002\n\n\u8003\u8651\u4f18\u5316\u3002\n\n\u5c06\u8be2\u95ee\u6309\u7167\u659c\u7387\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u95f4\u7684\u659c\u7387\u662f\u6709\u5355\u8c03\u6027\u7684\uff0c\u8bb0\u5f55\u4e0a\u6b21\u8be2\u95ee\u5f97\u5230\u7684\u4e0b\u6807\uff0c\u7136\u540e\u4e0b\u6b21\u8be2\u95ee\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u8fd9\u4e2a\u5730\u65b9\u5f00\u59cb\u3002\n\n\u51e0\u4e2a\u7ec6\u8282\uff1a\n\n1\u3001\u4e0d\u80fd\u5168\u5f00 long long\uff0c\u4f1a MLE\u3002\n\n2\u3001$x$ \u5750\u6807\u76f8\u540c\u65f6\u8981\u5904\u7406\u4e00\u4e0b\u3002\n\n3\u3001\u6ce8\u610f\u8be2\u95ee\u4e2d\u7684\u65f6\u95f4\u4e0e\u7ebf\u6bb5\u6811\u4e2d\u91cd\u65b0\u7f16\u53f7\u7684\u533a\u95f4\u4e0d\u540c\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n\\times\\log(n))$\u3002\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\n#define ll long long\n#define pii pair<int,int> \nusing namespace std;\nconst int N=5e5+5;\nint n,m,tim=-1,nl,nr,dfn[N];\nll ans[N],k,res;\nbool ss[N];\nstruct node\n{\n\tint name;\n\tll x,y;\n}a[N];\nstruct segmentree\n{\n\tvector<int>t;\n\tint cnt,to;\n}f[4*N];\nstruct ask\n{\n\tint name,tim;\n\tll k;\n}q[N];\nbool cmp(node x,node y)\n{\n\tif(x.x==y.x)return x.x*x.x+x.y>y.x*y.x+y.y;\n\treturn x.x<y.x;\n}\nbool cmp2(ask x,ask y)\n{\n\treturn x.k<y.k;\n}\nvector<pii>s[N];\nvector<int>fr[N],to[N];\nvoid dfs(int x,int name)\n{\n\tdfn[x]=++tim;\n\tif(ss[x])fr[name].push_back(tim);\n\tif(!ss[x])to[name].push_back(tim-1);\n\tint len=s[x].size();\n\tfor(int i=0;i<len;i++)dfs(s[x][i].first,s[x][i].second);\n\tif(ss[x])to[name].push_back(tim);\n\tif(!ss[x])fr[name].push_back(tim+1);\n}\ndouble clac(int x,int y)\n{\n\tif(a[x].x==a[y].x)return -1e18;\n\treturn 1.0*(a[x].x*a[x].x+a[x].y-a[y].x*a[y].x-a[y].y)/1.0/(a[x].x-a[y].x);\n}\nll clac9(ll x)\n{\n\treturn x*x;\n}\ninline int ls(int x)\n{\n\treturn x<<1;\n}\ninline int rs(int x)\n{\n\treturn x<<1|1;\n}\nvoid build(int x,int l,int r)\n{\n\tf[x].cnt=-1;\n\tf[x].to=0;\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tbuild(ls(x),l,mid);\n\tbuild(rs(x),mid+1,r);\n}\nvoid update(int x,int l,int r)\n{\n\tif(l>=nl&&r<=nr)\n\t{\n\t\twhile(f[x].cnt>0&&clac(f[x].t[f[x].cnt],f[x].t[f[x].cnt-1])>=clac(f[x].t[f[x].cnt],k))f[x].cnt--;\n\t\tint len=f[x].t.size();\n\t\tif(len-1==f[x].cnt)f[x].t.push_back(k),f[x].cnt++;\n\t\telse f[x].t[++f[x].cnt]=k;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=nl)update(ls(x),l,mid);\n\tif(mid<nr)update(rs(x),mid+1,r);\n}\nvoid search(int x,int l,int r)\n{\n\tfor(;f[x].to<f[x].cnt;f[x].to++)\n\t\tif(clac(f[x].t[f[x].to],f[x].t[f[x].to+1])>=k)break;\n\tif(f[x].cnt!=-1)res=min(res,clac9(k/2-a[f[x].t[f[x].to]].x)+a[f[x].t[f[x].to]].y);\n\tif(l==r)return;\n\tint mid=(l+r)>>1;\n\tif(mid>=nl)search(ls(x),l,mid);\n\telse search(rs(x),mid+1,r);\n}\nsigned main()\n{\n\tscanf(\"%d%d%lld\",&n,&m,&a[0].y);\n\tfor(int i=0;i<n;i++)a[i].name=-1;\n\ta[0].name=0;\n\ta[0].x=0;\n\tss[0]=1;\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint opt;\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==0)\n\t\t{\n\t\t\tint ul1,ul2,fa,name;\n\t\t\tscanf(\"%d%d\",&fa,&name);\n\t\t\tscanf(\"%lld%d%d%lld\",&a[name].x,&ul1,&ul2,&a[name].y);\n\t\t\ta[name].name=name;\n\t\t\ts[fa].push_back({i,name});\n\t\t\tss[i]=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint fa,name;\n\t\t\tscanf(\"%d%d\",&fa,&name);\n\t\t\ts[fa].push_back({i,name});\n\t\t}\n\t}\n\tdfs(0,0);\n\tsort(a,a+n,cmp);\n\tbuild(1,0,n-1);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tint x=a[i].name;\n\t\tif(x==-1)continue;\n\t\tint len=fr[x].size();\n\t\tfor(int j=0;j<len;j++)\n\t\t{\n\t\t\tnl=fr[x][j],nr=to[x][j],k=i;\n\t\t\tif(nr<nl)continue;\n\t\t\tupdate(1,0,n-1);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%lld\",&q[i].tim,&q[i].k);\n\t\tq[i].name=i;\n\t}\n\tsort(q+1,q+1+m,cmp2);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tnl=dfn[q[i].tim],k=2*q[i].k;\n\t\tres=1e18;\n\t\tsearch(1,0,n-1);\n\t\tans[q[i].name]=res;\n\t}\n\tfor(int i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n",
        "postTime": 1666251358,
        "uid": 275793,
        "name": "Gmt\u4e36FFF",
        "ccfLevel": 5,
        "title": "P5416 [CTSC2016]\u65f6\u7a7a\u65c5\u884c \u9898\u89e3"
    },
    {
        "content": "\u88ab\u5361\u7a7a\u95f4\u4e86\uff0c\u53c8\u4e0d\u60f3\u6362\u5199\u6cd5\uff0c\u5c31\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u4ee3\u7801\u5495\u4e86\uff0c\u4e0b\u6b21\u4e00\u5b9a\u3002\n\n## \u89e3\u6cd5\u4e00\uff1a\u7ebf\u6bb5\u6811\u5206\u6cbb\n\n\u867d\u7136\u9898\u76ee\u7ed9\u7684\u662f\u50cf\u53ef\u6301\u4e45\u5316\u4e00\u6837\u7248\u672c\u7ee7\u627f\u7684\u6837\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u7684\u5efa\u51fa\u64cd\u4f5c\u6811\u800c\u5728\u5c06\u95ee\u9898\u8f6c\u5316\u5230\u6811\u5f62\u7ed3\u6784\u4e0a\u3002\n\n\u8003\u8651\u4e00\u4e2a\u661f\u7403\uff0c\u5982\u679c\u6ca1\u6709\u5220\u9664\u4f5c\u7528\u7684\u662f\u4e00\u4e2a\u5b50\u6811\uff0c\u5bb9\u6613\u60f3\u5230\u5728 DFS \u5e8f\u4e0a\u4f5c\u7528\u4e00\u4e2a\u533a\u95f4\u3002\n\n\u518d\u8003\u8651\u5220\u9664\uff0c\u53d1\u73b0\u662f\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u6316\u6389\u4e00\u4e2a\u5b50\u6811\uff0c\u4e5f\u5c31\u662f\u628a DFS \u5e8f\u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\u6316\u6389\u4e2d\u95f4\u4e00\u4e2a\u5c0f\u533a\u95f4\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u76f8\u5f53\u4e8e\u5c06\u4f5c\u7528\u4e8e\u4e00\u4e2a\u5927\u533a\u95f4\u6539\u4e3a\u4f5c\u7528\u4e8e\u4e24\u4e2a\u5206\u5f00\u7684\u533a\u95f4\u3002\n\n\u4e8e\u662f\u4e00\u4e2a\u661f\u7403\u4f5c\u7528\u4e8e $t_i$ \u4e2a\u4e0d\u4ea4\u533a\u95f4\uff0c\u6709 $\\sum t_i=n$\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u4f5c\u7528\u4e8e\u533a\u95f4\u7684\u95ee\u9898\u5957\u8def\u7684\u8003\u8651\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u8003\u8651\u9898\u76ee\u7684\u8be2\u95ee\uff0c\u8d2a\u5fc3\u4e00\u4e0b $y,z$ \u4e24\u7ef4\u90fd\u4e3a $0$ \u6700\u4f18\uff0c\u6b64\u65f6\u82b1\u8d39\u4e3a $(x-x_i)^2+c_i=x^2-2xx_i+x_i^2+c_i$\u3002\n\n\u8fd9\u4e2a\u8d21\u732e\u6709\u4e24\u79cd\u770b\u6cd5\uff0c\u4e00\u79cd\u5c31\u662f\u5c06 $-2x_i$ \u770b\u4f5c $k$\uff0c$x_i^2+c_i$ \u770b\u4f5c $b$\uff0c\u5c31\u662f\u5f88\u591a\u6761 $y=kx+b$ \u7684\u76f4\u7ebf\u5728 $x$ \u5904\u7684\u6700\u5c0f\u53d6\u503c\uff0c\u4e0a\u674e\u8d85\u6811\u3002\n\n\u53e6\u4e00\u79cd\u662f\u5c06 $(x_i,x_i^2+c_i)$ \u770b\u4f5c\u70b9\uff0c$2x$ \u770b\u4f5c\u76f4\u7ebf\u7684\u659c\u7387\uff0c\u8981\u6c42 $b=y-kx$ \u7684\u6700\u5c0f\u622a\u8ddd\uff0c\u7528\u4e0b\u51f8\u58f3\u3002\n\n\u800c\u653e\u5230\u7ebf\u6bb5\u6811\u5206\u6cbb\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u53ef\u6301\u4e45\u5316\u674e\u8d85\u6811\uff0c\u652f\u6301\u56de\u9000\u5373\u53ef\uff0c\u7b2c\u4e8c\u79cd\u5728\u6bcf\u4e2a**\u7ebf\u6bb5\u6811\u5206\u6cbb\u533a\u95f4**\u4e0a\u90fd\u7ef4\u62a4\u4e00\u4e2a\u51f8\u58f3\u3002\n\n\u7531\u4e8e\u6211\u4eec\u63d2\u5165\u533a\u95f4\u7684\u987a\u5e8f\u4efb\u610f\uff0c\u56de\u7b54\u8be2\u95ee\u7684\u987a\u5e8f\u4e5f\u53ea\u662f\u6309\u7167\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u987a\u5e8f\u56de\u7b54\uff0c\u6ca1\u6709\u4efb\u4f55\u7279\u6b8a\u6027\u8d28\uff0c\u4e24\u79cd\u65b9\u6cd5\u90fd\u9700\u8981 $O(\\log)$ \u6765\u5b9e\u73b0\u6bcf\u4e2a\u64cd\u4f5c\u3002\n\n\u5373\u6bcf\u4e2a\u63d2\u5165 $O(\\log)$\uff0c\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee $O(\\log)$\u3002\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u5206\u6cbb\u4f1a\u5c06\u533a\u95f4\u62c6\u4e3a $O(\\log)$ \u4e2a\uff0c\u6545\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\n\n\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u770b\uff0c\u51f8\u58f3\u662f\u7ebf\u6027\u7a7a\u95f4\u4e0d\u5fc5\u591a\u8bf4\uff0c\u800c\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u7ed3\u6784\u4f7f\u5f97\u6211\u4eec\u6bcf\u6b21\u53ea\u7528\u7ef4\u62a4\u5f53\u524d\u5230\u67d0\u4e2a\u53f6\u5b50\u7684\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\u674e\u8d85\u6811\u53ea\u8981\u5728\u56de\u9000\u65f6\u56de\u6536\u7a7a\u95f4\u80fd\u505a\u5230\u548c\u51f8\u58f3\u4e00\u6837\u7684\u7a7a\u95f4 $O(n\\log n)$\u3002\n\n\u6309\u7406\u6765\u8bf4\u8fd9\u4e2a\u505a\u6cd5\u5e94\u8be5\u5361\u5e38\uff0c\u65f6\u95f4\u4e0d\u597d\u5361\u8fdb\u53bb\uff0c\u5b9e\u9645\u4e0a\u674e\u8d85\u6811\u7a7a\u95f4\u6781\u6613\u7206\u70b8\uff0c\u6211\u6ca1\u6709\u9694\u58c1\u4f4d\u57df\u7684\u9ad8\u7aef\u6280\u5de7\u5c31\u5bc4\u4e86\u3002\n\n## \u89e3\u6cd5\u4e8c\uff1a\u6807\u8bb0\u6c38\u4e45\u5316\u7ebf\u6bb5\u6811\n\n\u9996\u5148\u660e\u786e\u4e00\u70b9\uff1a\u6700\u597d\u7684\u7ebf\u6bb5\u6811\u5f0f\u62c6\u5206\u533a\u95f4\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u90fd\u4f1a\u4f7f\u5f97\u533a\u95f4\u4e2a\u6570\u4e3a $O(\\log)$\uff0c\u8fd9\u91cc\u533a\u95f4\u7684\u89e3\u51b3\u5fc5\u987b\u5e26\u4e2a $\\log$\u3002\n\n\u6ce8\u610f\u8fd9\u91cc\u8bf4\u7684\u4e0d\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u53ea\u662f\u8fd9\u79cd\u4e00\u7c7b\u8fd9\u79cd\u7ed3\u6784\u89e3\u51b3\u533a\u95f4\u95ee\u9898\u7684\u529e\u6cd5\uff0c\u4e5f\u5c31\u662f\u7ebf\u6bb5\u6811\u7ed3\u6784\u53bb\u62df\u5408\u533a\u95f4\u7684\u8fd9\u79cd\u62c6\u5206\u65b9\u5f0f\u3002\n\n\u674e\u8d85\u6811\u662f\u4e2a\u795e\u5947\u7684\u7b97\u6cd5\uff0c\u4e0d\u7ba1\u600e\u4e48\u641e\u63d2\u5165\u8be2\u95ee\u90fd\u662f $O(\\log)$\uff0c\u518d\u7279\u6b8a\u7684\u987a\u5e8f\u90fd\u505a\u4e0d\u5230 $O(1)$\u3002\n\n\u4f46\u51f8\u58f3\u4e0d\u4e00\u6837\uff0c\u50cf\u7ebf\u6027\u659c\u7387\u4f18\u5316\u7684\u505a\u6cd5\u4e00\u6837\uff0c\u6211\u4eec\u4f7f $x$ \u9012\u589e\u5c31\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u5747\u644a $O(1)$ \u63d2\u5165\u7ef4\u62a4\u51f8\u58f3\uff0c\u540c\u65f6\u8ba9\u659c\u7387\u5355\u589e\u5c31\u53ef\u4ee5\u7528\u6307\u9488\u5747\u644a $O(1)$ \u89e3\u51b3\u8be2\u95ee\u3002\n\n\u518d\u56de\u5230\u8fd9\u9053\u9898\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u53d1\u73b0\u51f8\u58f3\u7684\u7ef4\u62a4\u5e76\u4e0d\u4f9d\u8d56\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u987a\u5e8f\uff0c\u53cd\u800c\u53ea\u662f\u50cf\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u7ed3\u6784\u4e00\u6837\u5728\u62df\u5408\u5230\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u4e0a\u63d2\u5165\u70b9\u3002\n\n\u8fd9\u79cd\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\uff0c\u4e0d\u4f9d\u8d56\u4e0b\u653e\u4fe1\u606f\u800c\u76f4\u63a5\u5728\u533a\u95f4\u8282\u70b9\u4e0a\u7ef4\u62a4\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u901a\u5e38\u88ab\u5927\u4f17\u79f0\u4e4b\u4e3a\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u4e8e\u662f\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u7ebf\u6bb5\u6811\u800c\u975e\u7ebf\u6bb5\u6811\u5206\u6cbb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5373\u53ef\uff0c\u5728\u63d2\u5165\u65f6\u4fdd\u8bc1 $x$ \u7684\u9012\u589e\u505a\u5230\u7ebf\u6027\uff0c\u8be2\u95ee\u65f6\u4fdd\u8bc1 $k$ \u7684\u9012\u589e\u4e5f\u80fd\u505a\u5230\u7ebf\u6027\uff0c\u6700\u540e\u5728 $O(n\\log n)$ \u7684\u65f6\u95f4\u5185\u5f97\u4ee5\u89e3\u51b3\u3002\n\n\u51f8\u58f3\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u4ecd\u4e3a $O(n\\log n)$\u3002",
        "postTime": 1644318826,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "P5416 [CTSC2016]\u65f6\u7a7a\u65c5\u884c"
    },
    {
        "content": "[\u9898\u9762](https://www.lydsy.com/JudgeOnline/problem.php?id=5077)\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\u4e0e\u8be2\u95ee\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u3002\n\n\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7684\u7ed3\u70b9\u4e0a\u8bb0\u5f55\u4e24\u4e2avector\uff0c\u5206\u522b\u662f\u4fee\u6539vector\u548c\u8be2\u95eevector\u3002\n\n\u7136\u540e\u7ebf\u6bb5\u6811\u5206\u6cbb\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u4e00\u4e2a\u51f8\u5305\uff0c\u8ba1\u7b97\u51fa\u6700\u5c0f\u503c\u3002\uff08\u8be2\u95ee\u7684\u6700\u5c0f\u503c\u663e\u7136\u7684\u659c\u7387\u4f18\u5316\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\u3002\uff09\n\n\u7136\u540e\u5c31\u6c34\u8fc7\u53bb\u4e86\u3002~~\u4e8b\u5b9e\u4e0a\u6211\u5199\u4e86\u4e94\u4e2a\u5c0f\u65f6\u3002~~\n\ncode\uff1a\n```\n//2018.8.8 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register LL\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline LL read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline LL _abs(const res &x){\n    return x>0?x:-x;\n}\ninline LL _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline LL _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst LL N=5e5+10,M=5e5+10;\nstruct E{\n\tLL next,to;\n\tE() {}\n\tE(res next,res to):next(next),to(to) {}\n}edge[N<<1];\nLL head[N],cnt;\ninline void addedge(const res &u,const res &v){\n\tedge[++cnt]=E(head[u],v),head[u]=cnt;\n\tedge[++cnt]=E(head[v],u),head[v]=cnt;\n}\nstruct POS{\n\tLL x,c;\n\tPOS() {}\n\tPOS(res x,res c):x(x),c(c) {} \n}pos[N];\nLL n,m;\nLL A[N];\nbool jud[N];\nLL dfn[N],idx;\nvector<LL> L[N],R[N];\nvoid dfs(const res &x,const res &fax){\n\tdfn[x]=++idx;\n\tif(!jud[x])L[A[x]].push_back(idx);\n\telse R[A[x]].push_back(idx-1);\n\tfor(res i=head[x];~i;i=edge[i].next){\n\t\tres tox=edge[i].to;\n\t\tif(tox==fax)continue;\n\t\tdfs(tox,x);\n\t}\n\tif(!jud[x])R[A[x]].push_back(idx);\n\telse L[A[x]].push_back(idx+1);\n}\nstruct SEG{\n\tLL l,r,x,y;\n\tSEG() {}\n\tSEG(res l,res r,res x,res y):l(l),r(r),x(x),y(y) {}\n\tinline bool operator < (const SEG &b) const {\n\t\treturn x!=b.x?x<b.x:y<b.y;\n\t}\n}seg[N];\nLL segx;\nstruct QUE{\n\tLL id,s,x0;\n\tQUE() {}\n\tQUE(res id,res s,res x0):id(id),s(s),x0(x0) {}\n\tinline bool operator <(const QUE &b) const {\n\t\treturn x0!=b.x0?x0<b.x0:s<b.s;\n\t}\n}Q[M];\ninline double slope(SEG x,SEG y){\n\tif(x.x==y.x)return x.y>y.y?-inf:inf;\n\treturn 1.0*(x.y-y.y)/(x.x-y.x);\n}\nLL ans[M];\nvector<SEG> f[N<<2];\nvector<QUE> g[N<<2];\nvoid insertmodify(res rt,res l,res r,res L,res R,SEG id){\n//\tif(R>L)return;\n\tif(L<=l&&R>=r){\n\t\tf[rt].push_back(id);\n\t\treturn;\n\t}\n\tif(l==r)return;\n\tres mid=(l+r)>>1;\n\tif(L<=mid)insertmodify(rt<<1,l,mid,L,R,id);\n\tif(mid<R)insertmodify(rt<<1|1,mid+1,r,L,R,id);\n}\nvoid insertquery(res rt,res l,res r,res p,QUE id){\n//\tprintf(\"%d \",rt);\n\tg[rt].push_back(id);\n\tif(l==r)return;\n\tres mid=(l+r)>>1;\n\tif(p<=mid)insertquery(rt<<1,l,mid,p,id);\n    else insertquery(rt<<1|1,mid+1,r,p,id);\n}\nLL top[N<<2],he,ta;\ninline void solve(vector<SEG>F,vector<QUE>G){\n//\tprintf(\"%d %d\\n\",F.size(),G.size());\n\tif(!F.size()||!G.size())return;\n//\tprintf(\"%d\\n\",G.size());\n\the=1,ta=0;\n    for(res i=0;i<F.size();i++){\n        while(he<ta&&slope(F[top[ta-1]],F[top[ta]])>slope(F[top[ta]],F[i]))ta--;\n        top[++ta]=i;\n    }\n    if(he<=ta)\n        for(res i=0;i<G.size();i++){\n//        \tprintf(\"%d\\n\",G[i].id);\n            res k=G[i].x0;\n            while(he<ta&&k>slope(F[top[he]],F[top[he+1]]))he++;\n            ans[G[i].id]=_min(ans[G[i].id],-F[top[he]].x*k+F[top[he]].y+k*k);\n        }\n}\nvoid segdiv(res rt,res l,res r){\n\tsolve(f[rt],g[rt]);\n//\tprintf(\"%d\\n\",g[rt].size());\n//\tprintf(\"%d\\n\",rt);\n\tif(l==r)return;\n\tres mid=(l+r)>>1;\n\tsegdiv(rt<<1,l,mid),segdiv(rt<<1|1,mid+1,r);\n}\nint main(){\n//\tfreopen(\"ex_travel2.in\",\"r\",stdin);\n//\tfreopen(\"ex_travel.out\",\"w\",stdout);\n\tmemset(head,-1,sizeof(head));\n\tn=read(),m=read();\n\tpos[1].c=read();\n\tA[1]=1;\n\tfor(res i=2;i<=n;i++){\n\t\tres opt=read(),fr=read()+1,id=read()+1;\n\t\taddedge(i,fr);\n\t\tA[i]=id;\n\t\tjud[i]=opt;\n\t\tif(!opt){\n\t\t\tres x=read(),y=read(),z=read(),c=read();\n\t\t\tpos[id]=POS(x,c); \n\t\t}\n\t}\n\tdfs(1,-1);\n\tfor(res i=1;i<=n;i++)\n\t    for(res j=0;j<L[i].size();j++)\n\t    seg[++segx]=SEG(L[i][j],R[i][j],pos[i].x<<1,pos[i].x*pos[i].x+pos[i].c);\n\tsort(seg+1,seg+segx+1);\n\tfor(res i=1;i<=m;i++){\n\t\tres s=read()+1,x0=read();\n\t\tQ[i]=QUE(i,dfn[s],x0);\n\t\tans[i]=inf;\n\t}\n\tsort(Q+1,Q+m+1);\n//\tfor(res i=1;i<=segx;i++)printf(\"%d %d %d %d %d\\n\",i,seg[i].l,seg[i].r,seg[i].x,seg[i].y);\n//\tfor(res i=1;i<=m;i++)printf(\"%d %d %d %d\\n\",i,Q[i].id,Q[i].s,Q[i].x0);\n//\tfor(res i=1;i<=m;i++)printf(\"%d \",Q[i].s);\n//\tputs(\"\");\n\tfor(res i=1;i<=segx;i++)insertmodify(1,1,n,seg[i].l,seg[i].r,seg[i]);\n\tfor(res i=1;i<=m;i++)insertquery(1,1,n,Q[i].s,Q[i]);\n//\tputs(\"\");\n\tsegdiv(1,1,n);\n\tfor(res i=1;i<=m;i++)printf(\"%Ld\\n\",ans[i]);\n//\tfor(res i=1;i<=n<<1;i++)printf(\"%d \",g[i].size());\n//\tfor(res i=1;i<=n<<1;i++){\n//\t\tfor(res j=0;j<g[i].size();j++)printf(\"%d %d %d\\n\",g[i][j].id,g[i][j].s,g[i][j].x0);\n//\t\tputs(\"\");\n//\t}\n//\tfor(res i=1;i<=n<<1;i++){\n//\t\tfor(res j=0;j<g[i].size();j++)printf(\"%d \",g[i][j].id);\n//\t\tputs(\"\");\n//\t}\n\treturn 0;\n}\n```\n\n\u5176\u5b9e\u6211\u8fd9\u6837\u662f\u8fc7\u4e0d\u4e86\u7684\uff0c\u7a7a\u95f4\u4e0a\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5long long\u4e0d\u8981\u4e71\u5f00\uff0c\u5bf9\u4e8e\u8be2\u95ee\u64cd\u4f5c\u4e0d\u8981\u5f00vector\uff0c\u76f4\u63a5\u9012\u5f52\u8be2\u95ee\u5c31\u884c\u4e86\u3002\n\n\u771f\u6b63\u7684code\u5c31\u4e0d\u7ed9\u4e86\u3002",
        "postTime": 1533727187,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010CTSC2016\u3011\u65f6\u7a7a\u65c5\u884c"
    },
    {
        "content": "\u9996\u5148\u5462\u53ef\u4ee5\u770b\u51fa\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u65f6\u7a7a\u5f53\u505a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u662f\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u6dfb\u52a0\u6216\u8005\u5220\u9664\u661f\u7403\u7684\u6807\u8bb0\uff08\u4e5f\u8bb8\u662f\u4e00\u79cd\u9ad8\u8d85\u7684\u5dee\u5206\u65b9\u6cd5\uff1f\uff08\u96fe\uff09\uff09\n\u7136\u540e\u770b\u5b8c\u6837\u4f8b\u5c31\u77e5\u9053y,z\u5750\u6807\u662f\u62ff\u6765\u641e\u7b11\u7684\u3002\n\n\u6240\u4ee5\u5176\u5b9e\u8fd9\u662f\u4e2a\u4e00\u7ef4\u4e0a\u7684\u95ee\u9898\u3002\u4ece\u4e00\u5806\u70b9\u4e2d\u9009\u4e00\u4e2a\u51fa\u6765\u3002\u6700\u5c0f\u5316(xi\u2212x0)2+ci(xi\u2212x0)2+ci\uff0cx0x0\u662f\u8be2\u95ee\u4f4d\u7f6e\u3002\n\n\u554a\u8fd9\u4e2ax\u5982\u679c\u56fa\u5b9a\u7684\u8bdd\uff0c\u4e3b\u5e2d\u6811\u641e\u4e00\u641e\u7136\u540e\u533a\u95f4min\u561bqwq\u3002 \n\u7136\u540e\u53d1\u73b0\u4e86\u4e0d\u653e\u5f03\u661f\u7403\u8fd9\u79cd\u6761\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a0\u5165\u7684\u661f\u7403\u4e00\u5b9a\u4f1a\u5bf9\u540e\u9762\u9020\u6210\u5f71\u54cd\uff0c\u52a0\u4e0a\u6811\u662f\u4e00\u6761\u94fe\u8fd9\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u5c31\u662f\u4e2a\u4fee\u6539+\u8be2\u95ee\u7684\u6a21\u5f0f\u3002\u8ba9\u7a9d\u60f3\u8d77\u4e86cdq\u3002\u7a9d\u95e8\u6765\u8003\u8651cdq\u600e\u4e48\u505a\uff08\u5982\u679c\u6ca1\u6709\u5f80cdq\u60f3\u76f4\u63a5\u60f3\u51fa\u4e86\u51f8\u5305\u53ef\u4ee5\u8df3\u8fc7\u770b\u4e0b\u4e00\u6bb5qwq\u672c\u849f\u84bb\u7684\u601d\u7ef4\u6bd4\u8f83\u50f5\u786c\uff09\u56e0\u4e3a\u52a0\u5165\u7684\u70b9\u4e00\u5b9a\u4f1a\u5bf9\u540e\u9762\u7684\u70b9\u4ea7\u751f\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u62ff\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u5de6\u8fb9\u7684\u52a0\u5165\u661f\u7403\u64cd\u4f5c\uff0c\u7136\u540e\u66f4\u65b0\u53f3\u8fb9\u7684\u8be2\u95ee\u3002\u505acdq\u7684\u65f6\u5019\u8981\u5148\u5206\u6cbb\u7136\u540e\u6309x\u6392\u5e8f\uff0c\u4ece\u5de6\u5f80\u53f3\u505a\u4e00\u6b21\u8fd8\u5f97\u4ece\u53f3\u5f80\u5de6\u505a\u4e00\u6b21\u3002\u8fd9\u4e2a\u65f6\u5019\u53d1\u73b0\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u661f\u7403\u7684c\u56fa\u5b9a\uff0c\u90a3\u5047\u5982\u6211\u4ece\u5de6\u5f80\u53f3\u7684\u65f6\u5019\uff0c\u5982\u679c\u6709xi<xjxi<xj\u90a3\u4e48i\u661f\u7403\u4e00\u5b9a\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u88abj\u8279\u7ffb\u7136\u540e\u4ece\u6b64\u4ee5\u540e\u4e0d\u7528\u8003\u8651i\uff0c\u56e0\u4e3ad^2\u7684\u5bfc\u6570\u662f2d\u548cd\u6b63\u76f8\u5173\u7684\u5440\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u53d1\u73b0\u6bcf\u4e2a\u661f\u7403\u5176\u5b9e\u63a7\u5236\u7684\u662fx\u8f74\u4e0a\u4e00\u6bb5\u533a\u57df\uff0c\u7136\u540e\u5355\u8c03\u6808\u7ef4\u62a4\uff08\u6bd4\u5982\u8bf4\u5728t\u70b9\u88ab\u8279\u7ffb\uff0c\u5982\u679ct<=xjt<=xj\u5c31\u628ai\u5f39\u6389\uff09\u3002\u554a\u8fd9\u5c31\u662f\u7a9d\u6240\u60f3\u7684\u4e86qwq\u3002\u6ca1\u6709\u5199\u5e76\u4e0d\u77e5\u9053\u6b63\u786e\u6027\u3002\n\n\u7136\u540e\u8fd9\u4e00\u6bb5\u662f\u8854\u63a5\u3002\u62c6\u4e00\u62c6\u5f0f\u5b50cost=(xi\u2212x0)2+ci=x2i\u22122\u2217xi\u2217x0+x20+cicost=(xi\u2212x0)2+ci=xi2\u22122\u2217xi\u2217x0+x02+ci\uff0cx0x0\u786e\u5b9a\u4f4d\u7f6e\u4e4b\u540e\u662f\u56fa\u5b9a\u7684\uff0cx2i+cixi2+ci\u662f\u661f\u7403\u81ea\u8eab\u5c5e\u6027\uff0c\u6240\u4ee5\u5e94\u8be5\u6700\u5c0f\u5316\u22122\u2217xi\u2217x0+x2i+ci\u22122\u2217xi\u2217x0+xi2+ci\uff0cx0x0\u662f\u53d8\u91cf\uff0c\u8fd9\u5c31\u662f\u4e2a\u4e00\u6b21\u51fd\u6570\u5440\u3002k=\u22122\u2217xi,b=x2i+cik=\u22122\u2217xi,b=xi2+ci\u6240\u4ee5\u521a\u624d\u90a3\u4e2a\u5355\u8c03\u6808\uff0c\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u4e2a\u51f8\u5305\u3002\n\n\u7136\u540e\u518d\u6765\u89c2\u5bdf\u4e00\u6ce2\u5f97\u5230\uff0c\u6bcf\u4e2a\u8282\u70b9\u91cc\u7684\u661f\u7403\u53ef\u4ee5\u901a\u8fc7\u4ece\u8fd9\u4e2a\u8282\u70b9\u722c\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\u6765\u786e\u5b9a\uff08\u5f88\u663e\u7136\u7684qwq\uff09\u3002\u7136\u540e\u5176\u5b9e\u5c31\u662f\u8981\u7ef4\u62a4\u8fd9\u4e9b\u8282\u70b9\u7684\u51f8\u5305\u4e86\u3002\n\n\u6811\u4e0a\u5230\u6839\u8282\u70b9\u4fe1\u606f\uff1f\u4f60\u60f3\u5230\u4e86\u5565\u3002dfs\u5e8f+\u7ebf\u6bb5\u6811\u3002\n\n\u4e00\u4e2a\u52a0\u661f\u7403\u64cd\u4f5c\u5c31\u4f1a\u5f71\u54cd\u4e00\u68f5\u5b50\u6811\u3002\u91c7\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u601d\u60f3\uff0c\u5e76\u5728\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u4e00\u4e2a\u51f8\u5305\u3002\uff08\u56e0\u4e3a\u6807\u8bb0\u4e0b\u653e\u4f1a\u6d89\u53ca\u5220\u9664\uff0c\u5f88\u9ebb\u70e6\uff09\u3002\uff08\u628a\u5730\u7403\u53e6\u5916\u8003\u8651\u4e0d\u52a0\u8fdb\u53bb\uff09\n\n\u65e2\u7136\u5220\u9664\u5f88\u9ebb\u70e6\uff0c\u90a3\u9898\u76ee\u4e2d\u7684\u5220\u9664\u600e\u4e48\u505a\u5462\uff1f\u5047\u5982\u6211\u5728uu\u8fd9\u4e2a\u8282\u70b9\u52a0\u4e86\u4e00\u4e2ax\u661f\u7403\uff0c\u90a3\u4e48\u5e94\u8be5\u5728[L[u],R[u]][L[u],R[u]]\u8fd9\u4e2a\u533a\u95f4\u4fee\u6539\uff0c\u5982\u679c\u6211\u5728vv \u8fd9\u4e2a\u8282\u70b9\u628axx\u5220\u4e86\uff08\u6ce8\u610fv\u4e00\u5b9a\u662fu\u7684\u540e\u4ee3\uff0c\u800c\u4e14\u9664\u4e86u\u7684\u8282\u70b9\u7684\u52a0\u64cd\u4f5c\u4e0d\u53ef\u80fd\u52a0\u7684\u662fx\u661f\u7403\uff0c\u8fd9\u4e2a\u662f\u9898\u610f\u4fdd\u8bc1\uff09\uff0c\u90a3\u4e48\u6211\u5e94\u8be5\u5728[L[v],R[v]][L[v],R[v]]\u505a\u5220\u9664\u64cd\u4f5c\uff0c\u53ef\u662f\u6211\u4eec\u505a\u4e0d\u4e86\u5220\u9664\u64cd\u4f5c233333\uff0c\u90a3\u548b\u529e\uff0c\u6211\u62c6\u561b\uff0c\u6211\u62c6\u6210\u4fe9\u533a\u95f4[L[u],L[v]\u22121][L[u],L[v]\u22121]\u548c[R[v]+1,R[u]][R[v]+1,R[u]]\u4e0d\u5c31\u597d\u4e86\uff1f\u603b\u7684\u533a\u95f4\u4e2a\u6570\u8fd8\u662fO(n)\u7ea7\u522b\u7684\uff08\u597d\u50cf\u53ea\u4f1a<=n\uff09,\u5f53\u7136\u62c6\u7684\u65f6\u5019\u8fd8\u8981\u4e00\u4e9b\u7279\u5224\uff0c\u8fd9\u91cc\u53ea\u8bf4\u601d\u60f3\u3002\n\n\u554a\u7136\u540e\u89e3\u51b3\u4e86\u52a0\u5165\u5220\u9664\u64cd\u4f5c\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u662f\u56de\u7b54\u8be2\u95ee\u554a\uff08\u6ca1\u8be2\u95ee\u505a\u4e2a\u5375xxx\uff09\u3002\n\n\u7b49\u7740\uff0c\u53ea\u89e3\u51b3\u4e86\u533a\u95f4\u95ee\u9898\u8fd8\u6ca1\u89e3\u51b3\u548b\u7ef4\u62a4\u51f8\u5305\u5462\u3002(\u6211\u8ddf\u4f60\u8bf4\u4f60\u53ef\u4ee5\u6bcf\u4e2a\u8282\u70b9\u641e\u4e2asplay\u7136\u540e\u52a8\u6001\u52a0nlogn^2xxxx),\u56e0\u4e3a\u5148\u52a0\u54ea\u4e2a\u661f\u7403\u65e0\u6240\u8c13\u561b\uff0c\u5b66\u8fc7\u534a\u5e73\u9762\u4ea4\u7684\u5c0f\u4f19\u4f34\u90fd\u77e5\u9053\uff0c\u6392\u5e8f\u4e86\u4e4b\u540eO(n)\u5355\u8c03\u6808\u80fd\u505a\uff08\u548c\u4e4b\u524dcdq\u90e8\u5206\u7684\u60f3\u6cd5\u5dee\u4e0d\u591a\u7684\uff09\u3002\u90a3\u6211\u5148\u628a\u661f\u7403\u6309\u659c\u7387\u6392\u5e8f\uff08\u602a\u602a\u7684\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u661f\u7403\u5bf9\u5e94\u76f4\u7ebf\u561b\uff09\u7136\u540e\u7528\u534a\u5e73\u9762\u4ea4\u7684\u65b9\u6cd5\u3002\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u5f53\u4e00\u4e2a\u533a\u95f4\u88ab\u4fee\u6539\u64cd\u4f5c\u5b8c\u5168\u5305\u542b\u7684\u65f6\u5019\uff0c\u5c31\u5728\u8fd9\u4e2a\u5355\u8c03\u6808\u91cc\u5f39\u5f39\u5f39\u5c31ok\u3002O(nlogn)\n\n\u600e\u4e48\u56de\u7b54\u8be2\u95ee\u5462\u3002\n\n\u5de7\u554a\uff0c\u8be2\u95ee\u53ef\u4ee5\u79bb\u7ebf\u7684\u3002\u60f3\u4e00\u4e0b\uff0c\u5728\u4e00\u4e2a\u51f8\u5305\u4e0a\uff0c\u591a\u6b21\u95ee\u4f60\u67d0\u4e2ax\u5bf9\u5e94\u7684\u662f\u5355\u8c03\u6808\u91cc\u54ea\u6761\u7ebf\u6bb5\uff0c\u600e\u4e48\u505a\uff1f\uff08\u6bcf\u6b21\u53bb\u4e8c\u5206,nlog^2xxxxxx\uff09\u80af\u5b9a\u662f\u628a\u8be2\u95ee\u6309x\u6392\u4e86\u5e8f\u7136\u540e\u5728\u5355\u8c03\u6808\u91cc\u6328\u7740\u626b\u4e00\u904d\u5440\u3002\u8fd9\u6837O(nlogn+n)\u4e86\u3002\n\n\u90a3\u7ebf\u6bb5\u6811\u4e0a\u600e\u4e48\u505a\u554a\u3002\u8fd8\u662f\u5148\u628a\u8be2\u95ee\u6392\u5e8f\uff0c\u6765\u6211\u4eec\u60f3\u4e00\u4e0b\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2apos\u8868\u793a\u4e0a\u4e00\u6b21\u6700\u5c0f\u503c\u53d6\u5230\u7684\u4f4d\u7f6e\uff08\u521d\u59cb\u662f0\uff09\uff0c\u5982\u679c\u6709\u8be2\u95ee\u95ee\u5230\u8fd9\u91cc\uff0c\u6211\u5c31\u5c1d\u8bd5\u5f80\u540e\u632a\uff0c\u80fd\u632a\u53c8\u4e0d\u4f1a\u8d8a\u754c\u7684\u65f6\u5019\u5c31\u632a\u5c31\u597d\u4e86\u3002\u590d\u6742\u5ea6\u662f O(nlogn+nlogn)\u7684.\u7136\u540e\u6328\u7740\u6328\u7740\u95ee\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u7b54\u6848\u8bb0\u5f97\u8981\u8ddf\u5730\u7403\u7684\u7b54\u6848\u53d6\u4e2amin\u3002\n\n\u554a\u7ec8\u4e8e\u5199\u5b8c\u4e86\uff0c\u597d\u957f\u4e00\u7bc7.\n```\n#include<cmath>\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=500000+10;\nconst int maxm=500000+10;\ninline int read(){\n    int ret=0,ok=1;char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-')ok=-1;ch=getchar();}\n    for(;ch>='0'&&ch<='9';ch=getchar()) ret=ret*10+ch-'0';\n    return ret*ok;\n}\n\nll c0;\nint n,m,add[maxn];//add[i]\u8868\u793a\u7b2ci\u4e2a\u661f\u7403\u5728\u54ea\u4e2a\u65f6\u7a7a\u88ab\u52a0\u5165 \n\nint first[maxn],Next[maxm],tmp[maxn],ecnt;\nstruct Edge{int u,v;Edge(int u=0,int v=0):u(u),v(v){}}e[maxm];\ninline void add_edge(int u,int v){\n    Next[ecnt]=first[u];first[u]=ecnt;e[ecnt++]=Edge(u,v);  \n}\n\nvector<int>del[maxn];\n\nstruct Plt{\n    int x;ll c;\n    Plt(int x=0,ll c=0):x(x),c(c){}\n}pt[maxn];\n\nstruct Line{\n    ll b;\n    double k;\n    Line(ll b,double k):b(b),k(k){} \n};\n\nstruct Q{\n    int s,x,id;\n    inline void input(int i){\n        scanf(\"%d%d\",&s,&x);id=i;\n    }   \n    inline bool operator < (const Q &rhs)const{\n        return x<rhs.x; \n    }\n}ask[maxn];\n\nstruct Node{\n    vector<Line>st;\n    Node *lc,*rc;int pos;   //pos\u8868\u793a\u4e0a\u4e00\u6b21\u53d6\u5230\u6700\u4f18\u503c\u7684\u5730\u65b9 \n    Node(){st.clear();lc=rc=NULL;pos=0;}\n    inline void push(Line x){st.push_back(x);}\n    inline void pop(){st.pop_back();}\n}*root;\n\n#define mid ((l+r)>>1)\nvoid build(Node* &p,int l,int r){\n    p=new Node();if(l==r) return ;\n    build(p->lc,l,mid);build(p->rc,mid+1,r);\n}\n\ninline double getx(Line a,Line b){\n    return  (b.b-a.b)/(a.k-b.k);\n}\n\ninline void output(vector<Line>vc,int sz){\n    for(int i=0;i<sz;++i){\n        printf(\"[%d]:k=%.2f b=%lld\",i,vc[i].k,vc[i].b); \n    }\n    puts(\"\\n\");\n}\n\nvoid updata(Node* p,int l,int r,int L,int R,Line li)\n{\n    if(L<=l&&r<=R){\n        int sz=p->st.size();\n\n//      output(p->st,sz);\n\n        while(sz>=2&&p->st[sz-1].k!=li.k&&getx(p->st[sz-2],p->st[sz-1]) > getx(p->st[sz-2],li)) --sz,p->pop();  \n        if(!sz||p->st[sz-1].k!=li.k) p->push(li);\n        return ;\n    }\n    if(L<=mid) updata(p->lc,l,mid,L,R,li);\n    if(mid< R) updata(p->rc,mid+1,r,L,R,li);\n}\n\nconst ll INF=1ll<<60;\n\ninline ll gety(Line l,int x){return 1ll*x*x+l.k*x+l.b;}\n\nll query(Node* p,int l,int r,int pos,int x)\n{\n    ll ans=INF;int sz=p->st.size();\n    while(p->pos+1 < sz && gety(p->st[p->pos],x) > gety(p->st[p->pos+1],x)) ++p->pos;\n    if(sz) ans=gety(p->st[p->pos],x);\n    if(l==r) return ans;\n    if(pos<=mid) return min(ans,query(p->lc,l,mid,pos,x));\n    else return min(ans,query(p->rc,mid+1,r,pos,x));\n}\n\ninline void init_data()\n{\n    cin>>n>>m>>c0;\n    memset(first,-1,sizeof first);\n    int op,fr,id,x,y,z; ll c;\n    for(int i=1;i<n;++i)\n    {\n        tmp[i]=i;\n        scanf(\"%d%d%d\",&op,&fr,&id);\n        add_edge(fr,i);\n        if(op==0){\n            add[id]=i;\n            scanf(\"%d%d%d%lld\",&x,&y,&z,&c);\n            pt[id]=Plt(x,c);\n        }\n        else del[id].push_back(i);\n    }\n\n    for(int i=1;i<=m;++i) ask[i].input(i);\n}\n\nint Ln[maxn],Rn[maxn],dfs_clk;\nvoid dfs(int u)\n{\n    Ln[u]=++dfs_clk;\n    for(int i=first[u];i!=-1;i=Next[i]) \n        dfs(e[i].v);\n    Rn[u]=dfs_clk;\n}\n\ninline ll getb(int x){return 1ll*pt[x].x*pt[x].x+pt[x].c;}\n\ninline int cmp(const int &a,const int &b){\n    return pt[a].x < pt[b].x||(pt[a].x==pt[b].x&&getb(a) < getb(b));\n}\ninline int cmp2(const int &a,const int &b){\n    return Ln[a]<Ln[b];\n}\n\nll ans[maxn];\n\ninline void solve()\n{\n    dfs(0); build(root,1,n);\n\n    sort(tmp+1,tmp+n,cmp);\n    for(int i=1;i<n;++i)\n    {\n        int id=tmp[i];\n\n        if(!add[id]) continue;\n        Line l=Line(1ll*pt[id].x*pt[id].x+pt[id].c,-2*pt[id].x);\n        if(!del[id].size()){\n            updata(root,1,n,Ln[add[id]],Rn[add[id]],l);\n        }\n        else{\n            sort(del[id].begin(),del[id].end(),cmp2);\n\n//          for(int i=0;i<del[id].size();++i)\n//              printf(\"%d \",del[id][i]);puts(\"\");\n\n            if(Ln[add[id]] < Ln[del[id][0]]) \n                updata(root,1,n,Ln[add[id]],Ln[del[id][0]]-1,l);\n            if(Rn[del[id][del[id].size()-1]] < Rn[add[id]])\n                updata(root,1,n,Rn[del[id][del[id].size()-1]]+1,Rn[add[id]],l);\n            for(int i=0,sz=del[id].size();i<sz-1;++i)\n                if(Rn[del[id][i]]+1 <= Ln[del[id][i+1]]-1)\n                    updata(root,1,n,Rn[del[id][i]]+1,Ln[del[id][i+1]]-1,l);\n        }\n    }\n\n    sort(ask+1,ask+m+1);\n    for(int i=1;i<=m;++i)\n        ans[ask[i].id]=min(1ll*ask[i].x*ask[i].x+c0,query(root,1,n,Ln[ask[i].s],ask[i].x));\n\n    for(int i=1;i<=m;++i) printf(\"%lld\\n\",ans[i]);\n}\n\nint main()\n{\n    init_data();\n    solve();\n    return 0;\n}\n\n```\n",
        "postTime": 1560165795,
        "uid": 189492,
        "name": "songyihang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P5416 \u3010[CTSC2016]\u65f6\u7a7a\u65c5\u884c\u3011"
    }
]