[
    {
        "content": "\u65b0\u5b66\u865a\u6811\uff0c\u5199\u7bc7\u6587\u7ae0\u4ed4\u7ec6\u5730\u56de\u987e\u4e00\u4e0b\u5427\u3002\u3002\u3002\u8fd9\u73a9\u610f\u82b1\u4e86\u633a\u957f\u65f6\u95f4\u7684\u3002\n\n### \u4ec0\u4e48\u662f\u865a\u6811\n\n\u865a\u6811\u5e38\u5e38\u88ab\u4f7f\u7528\u5728\u6811\u5f62$dp$\u4e2d\uff0c\u5c31\u6bd4\u5982\u8fd9\u9898\u3002\u5f53\u4e00\u6b21\u8be2\u95ee\u4ec5\u4ec5\u6d89\u53ca\u5230\u6574\u9897\u6811\u4e2d\u5c11\u91cf\u7ed3\u70b9\u65f6\uff0c\u4e3a\u6bcf\u6b21\u8be2\u95ee\u90fd\u5bf9\u6574\u68f5\u6811\u8fdb\u884c$dp$\u5728\u65f6\u95f4\u4e0a\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5efa\u7acb\u4e00\u9897\u4ec5\u4ec5\u5305\u542b\u90e8\u5206\u5173\u952e\u7ed3\u70b9\u7684\u865a\u6811\uff0c\u5c06\u975e\u5173\u952e\u70b9\u6784\u6210\u7684\u94fe\u7b80\u5316\u6210\u8fb9\u6216\u662f\u526a\u53bb\uff0c\u5728\u865a\u6811\u4e0a\u8fdb\u884c$dp$\u3002\n\n\u865a\u6811\u5305\u542b\u6240\u6709\u7684\u8be2\u95ee\u70b9\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684$lca$\u3002\u663e\u7136\u865a\u6811\u7684\u53f6\u5b50\u8282\u70b9\u5fc5\u7136\u662f\u8be2\u95ee\u70b9\uff0c\u56e0\u6b64\u5bf9\u4e8e\u67d0\u6b21\u542b\u6709$k$\u4e2a\u70b9\u7684\u8be2\u95ee\uff0c\u865a\u6811\u6700\u591a\u6709$k$\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u4ece\u800c\u6574\u9897\u865a\u6811\u6700\u591a\u53ea\u6709$2k-1$\u4e2a\u7ed3\u70b9\uff08\u8fd9\u4f1a\u5728\u865a\u6811\u53d8\u6210\u4e8c\u53c9\u6811\u5f62\u6001\u65f6\u8fbe\u5230\uff09\u3002\n\n\n\n\n### \u5efa\u7acb\u865a\u6811\u4e4b\u524d\n\u6211\u4eec\u9700\u8981\uff1a\n\n\u9884\u5904\u7406\u51fa\u539f\u6811\u7684$dfs$\u5e8f\u4ee5\u53ca$dp$\u53ef\u80fd\u7528\u5230\u7684\u4e00\u4e9b\u5176\u4ed6\u4e1c\u897f\u3002\n\n\u9ad8\u6548\u7684\u5728\u7ebf$LCA$\u7b97\u6cd5\uff0c\u5355\u6b21\u8be2\u95ee$O(logn)$\u7684\u500d\u589e\u548c\u6811\u5256\uff0c$O(1)$\u7684$RMQ-ST$\u7686\u53ef\u3002\n\n\u5c06\u8be2\u95ee\u70b9\u6309$dfs$\u5e8f\u6392\u5e8f\u3002\n\n### \u5982\u4f55\u5efa\u7acb\u865a\u6811\n\n\u6700\u53f3\u94fe\u662f\u865a\u6811\u6784\u5efa\u7684\u4e00\u6761\u5206\u754c\u7ebf\uff0c\u8868\u660e\u5176\u5de6\u4fa7\u90e8\u5206\u7684\u865a\u6811\u5df2\u7ecf\u5b8c\u6210\u6784\u5efa\u3002\u6211\u4eec\u4f7f\u7528\u6808$stak$\u6765\u7ef4\u62a4\u6240\u8c13\u7684\u6700\u53f3\u94fe\uff0c$top$\u4e3a\u6808\u9876\u4f4d\u7f6e\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6700\u53f3\u94fe\u4e0a\u7684\u8fb9\u5e76\u6ca1\u6709\u88ab\u52a0\u5165\u865a\u6811\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u63a5\u4e0b\u6765\u7684\u8fc7\u7a0b\u4e2d\u968f\u65f6\u4f1a\u6709\u67d0\u4e2a$lca$\u63d2\u5230\u6700\u53f3\u94fe\u4e2d\u3002\n\n\u521d\u59cb\u65e0\u6761\u4ef6\u5c06\u7b2c\u4e00\u4e2a\u8be2\u95ee\u70b9\u52a0\u5165\u6808$stak$\u4e2d\u3002\n\n\u5c06\u63a5\u4e0b\u6765\u7684\u6240\u6709\u8be2\u95ee\u70b9\u987a\u6b21\u52a0\u5165\uff0c\u5047\u8bbe\u8be5\u8be2\u95ee\u70b9\u4e3a$now$\uff0c$lc$\u4e3a\u8be5\u70b9\u548c\u6808\u9876\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u5373$lc=lca(stak[top],now)$\u3002\n\n\u7531\u4e8e$lc$\u662f$stak[top]$\u7684\u7956\u5148\uff0c$lc$\u5fc5\u7136\u5728\u6211\u4eec\u7ef4\u62a4\u7684\u6700\u53f3\u94fe\u4e0a\u3002\n\n\u8003\u8651$lc$\u548c$stak[top]$\u53ca\u6808\u4e2d\u7b2c\u4e8c\u4e2a\u5143\u7d20$stak[top-1]$\u7684\u5173\u7cfb\u3002\n\n#### \u60c5\u51b5\u4e00\n\n$lc=stak[top]$\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c$now$\u5728$stak[top]$\u7684\u5b50\u6811\u4e2d\n\n![](https://cdn.luogu.com.cn/upload/pic/52299.png)\n\n\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u628a$now$\u5165\u6808\uff0c\u5373\u628a\u5b83\u52a0\u5230\u6700\u53f3\u94fe\u7684\u672b\u7aef\u5373\u53ef\u3002\n\n### \u60c5\u51b5\u4e8c\n$lc$\u5728$stak[top]$\u548c$stak[top-1]$\u4e4b\u95f4\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/52300.png)\n\n\u663e\u7136\uff0c\u6b64\u65f6\u6700\u53f3\u94fe\u7684\u672b\u7aef\u4ece$stak[top-1]->stak[top]$\u53d8\u6210\u4e86$stak[top-1]->lc->stak[top]$\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\uff0c\u9996\u5148\u662f\u628a\u8fb9$lc-stak[top]$\u52a0\u5165\u865a\u6811\uff0c\u7136\u540e\uff0c\u628a$stak[top]$\u51fa\u6808\uff0c\u628a$lc$\u548c$now$\u5165\u6808\u3002\n\n### \u60c5\u51b5\u4e09\n$lc=stak[top-1]$\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/52301.png)\n\n\u8fd9\u79cd\u60c5\u51b5\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u5927\u540c\u5c0f\u5f02\uff0c\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f$lc$\u4e0d\u7528\u5165\u6808\u4e86\u3002\n\n\n### \u60c5\u51b5\u56db\n\u6b64\u65f6\u6709$dep[lc]<dep[stak[top-1]]$\u3002$lc$\u5df2\u7ecf\u4e0d\u5728$stak[top-1]$\u7684\u5b50\u6811\u4e2d\u4e86\uff0c\u751a\u81f3\u4e5f\u672a\u5fc5\u5728$stak[top-2],stak[top-3]......$\u7684\u5b50\u6811\u4e2d\u3002\n\n\n![](https://cdn.luogu.com.cn/upload/pic/52404.png)\n\n\u4ee5\u56fe\u4e2d\u4e3a\u4f8b\uff0c\u6700\u53f3\u94fe\u4ece$stak[top-3]->stak[top-2]->stak[top-1]->stak[top]$\u53d8\u6210\u4e86$stak[top-3]->lc->now$\u3002\u6211\u4eec\u9700\u8981\u5faa\u73af\u4f9d\u6b21\u5c06\u6700\u53f3\u94fe\u7684\u672b\u7aef\u526a\u4e0b\uff0c\u5c06\u88ab\u526a\u4e0b\u7684\u8fb9\u52a0\u5165\u865a\u6811\uff0c\u76f4\u5230\u4e0d\u518d\u662f\u60c5\u51b5\u56db\u3002\n\n\u5c31\u4e0a\u56fe\u800c\u8a00\uff0c\u5faa\u73af\u4f1a\u6301\u7eed\u4e24\u8f6e\uff0c\u5c06$stak[top],stak[top-1]$\u4f9d\u6b21\u51fa\u6808\uff0c\u5e76\u4e14\u628a\u8fb9$stak[top-1]-stak[top],stak[top-2]-stak[top-1]$\u52a0\u5165\u865a\u6811\u4e2d\u3002\u968f\u540e\u901a\u8fc7\u60c5\u51b5\u4e8c\u5b8c\u6210\u6784\u5efa\u3002\n\n#\n\n\u5f53\u6700\u540e\u4e00\u4e2a\u8be2\u95ee\u70b9\u52a0\u5165\u4e4b\u540e\uff0c\u518d\u5c06\u6700\u53f3\u94fe\u52a0\u5165\u865a\u6811\uff0c\u5373\u53ef\u5b8c\u6210\u6784\u5efa\u3002\n\n### \u4e00\u4e9b\u95ee\u9898\n1. \u5982\u679c\u6808$stak$\u4e2d\u4ec5\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6$stak[top-1]$\u662f\u5426\u4f1a\u51fa\u95ee\u9898\uff1f\n\n\u5bf9\u4e8e\u6808$stak$\uff0c\u6211\u4eec\u4ece$1$\u5f00\u59cb\u50a8\u5b58\u3002\u90a3\u4e48\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c$stak[top-1]=0$\uff0c\u5e76\u4e14$dep[0]=0$\u3002\u6b64\u65f6$dep[lc]<dep[stak[top-1]]$\u6052\u6210\u7acb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c$stak[0]$\u626e\u6f14\u4e86\u6df1\u5ea6\u6700\u5c0f\u7684\u54e8\u5175\uff0c\u786e\u4fdd\u4e86\u7a0b\u5e8f\u53ea\u4f1a\u8fdb\u5165\u60c5\u51b5\u4e00\u548c\u4e8c\u3002\n\n2. \u5982\u4f55\u5728\u4e00\u6b21\u8be2\u95ee\u7ed3\u675f\u540e\u6e05\u7a7a\u865a\u6811\uff1f\n\n\u4e0d\u80fd\u76f4\u63a5\u5bf9\u56fe\u8fdb\u884c\u6e05\u7a7a\uff0c\u5426\u5219\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u5230$O(n)$\u7684\u590d\u6742\u5ea6\uff0c\u8fd9\u662f\u6211\u4eec\u65e0\u6cd5\u627f\u53d7\u7684\u3002\u5728$dfs$\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u5f53\u8bbf\u95ee\u5b8c\u4e00\u4e2a\u7ed3\u70b9\u5c31\u8fdb\u884c\u6e05\u7a7a\u5373\u53ef\u3002\n\n### \u56de\u5230\u672c\u9898\n\u4ee5\u6837\u4f8b\u7684\u8be2\u95ee\u4e8c\u4e3a\u4f8b\uff08\u5982\u4e0b\u56fe\uff09\n\n![](https://cdn.luogu.com.cn/upload/pic/52297.png)\n\n\u5efa\u7acb\u865a\u6811\u662f\u957f\u8fd9\u4e2a\u6837\u5b50\u7684\n![](https://cdn.luogu.com.cn/upload/pic/52380.png)\n\n\u5728\u672c\u9898\u4e2d\uff0c\u5efa\u7acb\u6709\u5411\u6811\u5373\u53ef\u3002\u6211\u4eec\u9884\u5904\u7406\u51fa$minv[pos]$\u4ee3\u8868\u4ece$1$\u5230$pos$\u8def\u5f84\u4e0a\u6700\u5c0f\u7684\u8fb9\u6743\u3002\u5982\u679c$pos$\u662f\u8be2\u95ee\u70b9\uff0c\u90a3\u4e48\u5207\u65ad$pos$\u53ca\u5176\u5b50\u6811\u4e0a\u8be2\u95ee\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7$dp(pos)=minv[pos]$\uff0c\u5426\u5219\uff0c\u6700\u5c0f\u4ee3\u4ef7$dp(pos)=min(minv[pos],\\sum dp(to))$\uff08\u5176\u4e2d$to$\u662f$pos$\u7684\u513f\u5b50\uff09\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f$pos$\u662f\u8be2\u95ee\u70b9\uff0c\u6309\u9053\u7406\u7528\u4e0d\u5230$dp(to)$\u7684\u503c\uff0c\u4f46\u4ecd\u65e7\u9700\u8981\u5bf9\u5176\u513f\u5b50\u8fdb\u884c$dfs$\uff0c\u56e0\u4e3a\u6e05\u7a7a\u865a\u6811\u9700\u8981\u5bf9\u6574\u4e2a\u865a\u6811\u8fdb\u884c\u904d\u5386\u3002\n\n\u8fd8\u6709\u7b54\u6848\u4f1a\u7206$int$\uff0c\u6240\u4ee5\u4e0d\u4ec5\u6570\u7ec4\u8981\u5f00$LL$\uff0c\u521d\u59cb\u5316\u7684$INF$\u4e5f\u6709\u5fc5\u8981\u5f00\u5f97\u8db3\u591f\u5927\u3002\u6211\u4e00\u5f00\u59cb\u76f4\u63a5\u62ff$0x3f3f3f3f$\u7ed3\u679c$WA$\u4e86\u6700\u540e\u4e00\u4e2a\u70b9\u3002\u3002\u3002\u3002\n\n\u6700\u540e\u5c31\u662f\u849f\u84bb~~\u7801\u98ce\u6e05\u5947\u5e38\u6570\u5de8\u5927\u547d\u540d\u6df7\u4e71~~\u7684\u4ee3\u7801\u4e86\n\n```cpp\n#include <bits/stdc++.h>\n#define INL inline\n#define REG register\n#define DB double\n#define LDB long double\n#define ULL unsigned long long\n#define LL long long\n\n#define RPT(i,x,y) for (REG int i=x;i<y;i++)\n#define DRPT(i,x,y) for (REG int i=x;i>y;i--)\n#define MST(a,b) memset(a,b,sizeof(a))\n\n#define MAXN 500500\n#define MAXM 10000\n#define MOD 998244353\n#define INF 0x3f3f3f3f\n#define LLINF 0x3f3f3f3f3f3f3f3f \n#define EPS 1e-5\n\n#define _ 0\nusing namespace std;\n\nint dfn[MAXN];\nint dep[MAXN];\nint fa[MAXN][25];\nLL minv[MAXN];\nint m[MAXN];\nint lst[MAXN];\nbool query[MAXN];\nint n,q;\nint num;\nint top;\nint dfscnt=1;\n\nint stak[MAXN];\n\nstruct EDGE\n{\n\tint to,next;\n\tLL val;\n}edge[MAXN<<1],edge1[MAXN<<1]; \n\nint head[MAXN];//\u521d\u59cb\u56fe\u5b58\u50a8 \nint cnt=1;\nINL void add(int x,int y,LL v)\n{\n\tedge[cnt].next=head[x];\n\tedge[cnt].to=y;\n\tedge[cnt].val=v;\n\thead[x]=cnt++;\n}\n\nint head1[MAXN];//\u865a\u6811\u5b58\u50a8 \nint cnt1=1;\nINL void add1(int x,int y)\n{\n\tedge1[cnt1].next=head1[x];\n\tedge1[cnt1].to=y;\n\thead1[x]=cnt1++;\n}\n\nvoid dfs(int pos)\n{\n\tint k;\n\tfor (k=0;fa[pos][k];k++)\n\t\tfa[pos][k+1]=fa[fa[pos][k]][k];\n\tm[pos]=k;\n\tdfn[pos]=dfscnt++;\n\tfor (int i=head[pos];i;i=edge[i].next)\n\t{\n\t\tREG int to=edge[i].to;\n\t\tif (!dfn[to])\n\t\t{\n\t\t\tdep[to]=dep[pos]+1;\n\t\t\tminv[to]=min(minv[pos],edge[i].val);\n\t\t\tfa[to][0]=pos;\n\t\t\tdfs(to);\n\t\t}\n\t}\n}\n\nLL dfs1(int pos) //dp\n{\n\tLL sum=0;\n\tLL tem;\n\tfor (int i=head1[pos];i;i=edge1[i].next)\n\t{\n\t\tint to=edge1[i].to;\n\t\tsum+=dfs1(to);\n\t}\n\tif (query[pos])\n\t\ttem=minv[pos];\n\telse\n\t\ttem=min(minv[pos],sum);\n\tquery[pos]=false; //\u6e05\u7a7a\u865a\u6811 \n\thead1[pos]=0;\n\treturn tem;\n}\n\nint lca(int x,int y) //\u500d\u589eLCA \n{\n\tif (dep[x]<dep[y])\n\t\tswap(x,y);\n\tDRPT(i,m[x],-1)\n\t\tif (dep[fa[x][i]]>=dep[y])\n\t\t\tx=fa[x][i];\n\tif (x==y)\n\t\treturn x;\n\tDRPT(i,m[x],-1)\n\t\tif (fa[x][i]!=fa[y][i])\n\t\t{\n\t\t\tx=fa[x][i];\n\t\t\ty=fa[y][i];\n\t\t}\n\treturn fa[x][0];\n} \n\nbool cmp(int x1,int x2)\n{\n\treturn dfn[x1]<dfn[x2];\n}\n\nint main()\n{\n\tminv[1]=LLINF;\n\tcin>>n;\n\tint x,y;\n\tLL v;\n\tRPT(i,0,n-1)\n\t{\n\t\tscanf(\"%d%d%lld\",&x,&y,&v);\n\t\tadd(x,y,v);\n\t\tadd(y,x,v);\n\t}\n\tdfs(1);\n\tcin>>q;\n\twhile (q--)\n\t{\n\t\tcin>>num;\n\t\tRPT(i,1,num+1)\n\t\t{\n\t\t\tscanf(\"%d\",&lst[i]);\n\t\t\tquery[lst[i]]=true;\n\t\t}\n\t\tsort(lst+1,lst+num+1,cmp);\n\t\tstak[top=1]=lst[1];\n\t\tRPT(i,2,num+1)\n\t\t{\n\t\t\tint now=lst[i];\n\t\t\tint lc=lca(now,stak[top]);\n\t\t\twhile (1)\n\t\t\t\tif (dep[lc]>=dep[stak[top-1]])\n\t\t\t\t{\n\t\t\t\t\tif (lc!=stak[top]) //\u4e0d\u6ee1\u8db3\u8be5\u6761\u4ef6\u4e3a\u60c5\u51b5\u4e00 \n\t\t\t\t\t{\n\t\t\t\t\t\tadd1(lc,stak[top]);\n\t\t\t\t\t\tif (lc!=stak[top-1]) //\u60c5\u51b5\u4e8c \n\t\t\t\t\t\t\tstak[top]=lc;\n\t\t\t\t\t\telse //\u60c5\u51b5\u4e09 \n\t\t\t\t\t\t\ttop--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse //\u60c5\u51b5\u56db\n\t\t\t\t{\n\t\t\t\t\tadd1(stak[top-1],stak[top]);  \n\t\t\t\t\ttop--;\n\t\t\t\t}\n\t\t\tstak[++top]=now; //\u6700\u540e\u7edf\u4e00\u628anow\u538b\u8fdb\u6808\u4e2d \n\t\t}\n\t\twhile (--top)\n\t\t\tadd1(stak[top],stak[top+1]); //\u5c06\u6700\u53f3\u94fe\u653e\u8fdb\u865a\u6811 \n\t\tcout<<dfs1(stak[1])<<endl;\n\t\tcnt1=1;\n\t}\n\treturn ~~(0^_^0);\n}\n\n```\n\n\u7b2c\u4e00\u6b21\u5199\u90a3\u4e48\u957f\u7684\u9898\u89e3\uff0c~~\u4ee5\u4e0a\u5185\u5bb9\u5747\u4e3a\u53e3\u80e1~~\u3002\u7531\u4e8e\u81ea\u5df1\u5b9e\u5728\u662f\u592a\u849f\u84bb\u4e86\uff0c\u9519\u8bef\u7f3a\u6f0f\u4e4b\u5904\u5728\u6240\u96be\u514d\uff0c\u5982\u6709\u53d1\u73b0\u70e6\u8bf7\u5404\u4f4d\u5927\u4f6c\u4eec\u6307\u6b63\u3002",
        "postTime": 1550752095,
        "uid": 56267,
        "name": "Rhodoks",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "### \u865a\u6811\n\u4f5c\u4e3a\u865a\u6811\u7684\u7ecf\u5178\u4f8b\u9898\uff0c\u62ff\u8fd9\u9053\u9898\u4ecb\u7ecd\u4e00\u4e0b\u865a\u6811\u662f\u4ec0\u4e48\u597d\u4e86~\n\n#### dfs\u539f\u7406\n\n\u4e0d\u77e5\u9053\u5927\u5bb6\u53d1\u73b0\u4e00\u4ef6\u4e8b\u4e86\u6ca1\u6709\uff0c\u6211\u4eec\u5173\u4e8e\"\u6811\"\u7684\u6240\u6709\u4fe1\u606f\uff0c\u7edd\u5927\u90e8\u5206\u662f\u901a\u8fc7dfs\u5904\u7406\u51fa\u6765\u7684\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u4e00\u4ef6\u4e8b\uff0cdfs\u5176\u5b9e\u5728\u5e95\u5c42\u5b9e\u73b0\u4e0a\uff0c\u5e76\u4e0d\u662f\u5927\u5bb6\u8111\u6d77\u4e2d\u60f3\u8c61\u7684dfs\u3002\n\n\u5f53\u4f60\u7684\u7a0b\u5e8f\u7f16\u8bd1\u51fa\u6765\u4e4b\u540e\uff0c\u4f60\u89c9\u5f97\u4f60\u5728\u8dd1dfs\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u5e76\u4e0d\u8fd9\u4e48\u60f3\uff0c\u56e0\u4e3a\u4f60\u751a\u81f3\u6ca1\u6709\u5efa\u6811\uff0c\u5b9e\u9645\u4e0a\u53ea\u6709\u90bb\u63a5\u8868\u800c\u5df2\uff0c\u6811\uff1f\u4e0d\u5b58\u5728\u7684\uff0c\u800c\u4f60\u4ee5\u4e3a\u4f60\u5728\u8fd9\u4e2a\u6811\u4e0a\u8fdb\u884c\u4e86\u6240\u8c13\u7684\"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\"\uff0c\u800c\u8ba1\u7b97\u673a\u5e76\u4e0d\u8fd9\u4e48\u8ba4\u4e3a\uff0c\u5b83\u53ea\u662f\u6309\u4e00\u5b9a\u7684\u6307\u4ee4\u5bf9\u4e00\u4e2a\u6808\u8fdb\u884c\u4e86\u53cd\u590d\u7684push\u548cpop\uff0c\u671f\u95f4\u505a\u4e00\u4e9b\u4e8b\u7f62\u4e86(\u5e94\u8be5\u90fd\u77e5\u9053\u9012\u5f52\u51fd\u6570\u7684\u5b9e\u73b0\u8fc7\u7a0b\u9690\u6027\u7684\u5f00\u4e86\u4e00\u4e2a\u6808\u5427\u2026\u2026)\n\n\u6c34\u4e86\u8fd9\u4e48\u591a\uff0c\u5176\u5b9e\u53ea\u662f\u60f3\u8bf4\u4e24\u4ef6\u4e8b\uff0c\u7b2c\u4e00\uff0c\u6211\u4eec\u505adfs\u53ef\u4ee5\u4e86\u89e3\u6811\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u4e86\u89e3\u7684\u5f88\u5145\u5206\uff0c\u7b2c\u4e8c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u5efa\u6811\u7684\u60c5\u51b5\u4e0b\u505adfs\uff0c\u53ea\u8981\u6211\u4eec\u638c\u63e1\u4e86\u53ef\u4ee5\u6a21\u62dfdfs\u7684\u4fe1\u606f\u5373\u53ef\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8dd1dfs\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u7a76\u7adf\u5bf9\u5f00\u51fa\u6765\u7684\u6808\u8fdb\u884c\u4e86\u4ec0\u4e48\u64cd\u4f5c\n\n#### \u865a\u6811\u7684\u6784\u5efa\n\nemm\u5927\u5bb6\u5e94\u8be5\u90fd\u77e5\u9053\u8fd9\u9053\u9898\u662f\u4e2a\u6811\u5f62dp\u5427\u3002\u9996\u5148\u8ba9\u6211\u4eec\u5148\u6765\u5199\u4e2a\u66b4\u529b\n\n\u4ee4sum\\[i]\u8868\u793a\u5207\u65adi\u7684\u5b50\u6811\u4e2d\u6240\u6709\u8be2\u95ee\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e4b\u548c\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u76f4\u63a5\u5207\u6389i\uff0c\u518d\u4ee4mi\\[i]\u8868\u793ai\u52301\u53f7\u70b9\u7684\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u8fb9\u6743\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\n\nsum\\[i]=sigma(min(mi\\[v],sum\\[v]) (v\u2208i.son)\n\n\u610f\u4e49\u5c31\u662f\u6211\u4eec\u679a\u4e3ei\u7684\u6240\u6709\u5b50\u6811\uff0c\u4e3a\u4e86\u5207\u65ad\u8fd9\u4e2a\u5b50\u6811v\uff0c\u8981\u4e0d\u7136\u5c31\u76f4\u63a5\u65ad\u4e86v\uff0c\u4e00\u4e86\u767e\u4e86\uff0c\u6216\u8005\u53ef\u4ee5\u5207\u65adv\u4e2d\u7684\u6240\u6709\u8be2\u95ee\u70b9\u3002\u7b54\u6848\u5c31\u662fsum\\[1]\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7c97\u66b4\u7684\u8dd1\u4e00\u8fb9dfs\uff0cdp\u5f97\u51fa\u7b54\u6848\uff0c\u590d\u6742\u5ea6O(N^2)\uff0c40pts get\u221a\n\n\u4f46\u662f\u5462\uff0c\u6211\u4eec\u53d1\u73b0\u66f4\u65b0i\u4ec5\u548cv\u6709\u5173\uff0c\u8ddfi\u4e00\u70b9\u5173\u7cfb\u6ca1\u6709\u2026\u2026\uff0c\u8fd9\u610f\u5473\u8fd9\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u82e5\u5e72\u4e2a\u65e0\u7528\u7684\u8282\u70b9\uff0c\u5c06\u4e00\u4e2a\u76f4\u8def\u5f84\u538b\u7f29\u4e3a\u4e00\u6761\u8fb9(\u8fd9\u91cc\u6307\u4e00\u4e2a\u70b9\u5230\u81ea\u5df1\u7684\u76f4\u7cfb\u7956\u5148\u7684\u8def\u5f84)\u3002\u4f46\u662f\u5982\u4f55\u533a\u522b\u6709\u7528\u548c\u6ca1\u7528\u7684\u8282\u70b9\u5462\uff1f\u663e\u7136\u6240\u6709\u8be2\u95ee\u70b9\u5168\u90e8\u6709\u7528\uff0c1\u53f7\u70b9\u4e5f\u6709\u7528\uff0c\u4f46\u662f\u5149\u8fd9\u4e9b\u662f\u4e0d\u884c\u7684\uff0c\u53ef\u80fd\u4e0d\u5b58\u5728\u7956\u5148\u5173\u7cfb\uff0c\u56e0\u6b64\u8fd8\u8981\u52a0\u4e00\u4e9b\u522b\u7684\u70b9\n\n\u7136\u540e\u8bf8\u4f4ddalao\u7ecf\u8fc7\u7814\u7a76\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u628a\u8be2\u95ee\u70b9\u6309dfs\u5e8f\u6392\u5e8f\uff0c\u76f8\u90bb\u7684\u70b9\u6c42\u4e00\u4e2alca\uff0c\u8be2\u95ee\u70b9+\u8fd9\u4e9blca\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u70b9\uff0c\u5b58\u5728\u4e14\u4ec5\u6709\u4e00\u6761\u4ec5\u5305\u542b\u4e24\u4e2a\u96c6\u5408\u70b9\u7684**\u76f4**\u8def\u5f84\uff0c(1\u53f7\u70b9\u9664\u5916)\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u79cd\u5173\u7cfb\u8ba4\u4e3a\u662f\u7236\u5b50\u5173\u7cfb\uff0c\u4e3e\u4e2a\u6817\u5b50\n\n![](https://cdn.luogu.com.cn/upload/pic/14884.png)\n\n\u56fe\u4e2d\u7684\u7ea2\u70b9\u662f\u8be2\u95ee\u70b9\uff0c\u7eff\u70b9\u662flca\uff0c\u84dd\u8272\u7684\u8def\u5f84\u8868\u793a\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u4ece\u9ed1\u6811\u4e2d\u62bd\u51fa\u4e86\u4e00\u53ea\u6811\u540c\u65f6\u4fdd\u7559\u4e86\u5173\u4e8e\u7ea2\u70b9\u7684\u5168\u90e8\u4fe1\u606f\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5efa\u51fa\u8fd9\u6837\u7684\u6811\uff0c\u7136\u540e\u518d\u8fd9\u79cd\u6811\u4e0a\u8dd1dfs\uff0c\u5c31\u53ef\u4ee5\u8fbe\u5230\u540c\u6837\u7684\u6811\u5f62dp\u6548\u679c\n\n\u7b49\u7b49\u2026\u2026\u8981\u6c42dfs\uff1f\u4f46\u662f\u524d\u9762\u8bf4\u8fc7dfs\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u6811\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5efa\u6811\u540c\u65f6dfs\uff0c\u4f46\u662f\u8fd9\u8981\u6c42\u6211\u4eec\u638c\u63e1\u4e00\u4e2a\u4e1c\u897f\uff0c\u5373\u4ec0\u4e48\u65f6\u5019\u538b\u6808\uff0c\u4ec0\u4e48\u65f6\u5019\u5f39\u6808\u3002\u518d\u8bf4\u7684\u76f4\u767d\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u6b27\u62c9\u5e8f\n\n##### \u6b27\u62c9\u5e8f\n\n\u4ec0\u4e48\u662f\u6b27\u62c9\u5e8f\uff0c\u6b63\u5e38\u7684dfs\u5e8f\u4ec5\u5728\u5165\u6808\u7684\u65f6\u5019\u8ba1\u7b97\u4e00\u6b21\uff0c\u800c\u6b27\u62c9\u5e8f\uff0c\u4e0d\u4ec5\u5728\u5165\u6808\u7684\u65f6\u5019\u8ba1\u7b97\u4e00\u6b21\uff0c\u8fd8\u5728\u51fa\u6808\u7684\u65f6\u5019\u8ba1\u7b97\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u70b9\u6709\u4e24\u6b21\u51fa\u73b0\u673a\u4f1a\u538b\u6808\u4e3a+\uff0c\u5f39\u6808\u4e3a-\uff0c\u6b27\u62c9\u5e8f\u8bb0\u5f55\u4e86dfs\u7684**\u5168\u90e8\u4fe1\u606f**\uff0c\u53ea\u8981\u6709\u4e86\u8fd9\u4e2a\u6811\u7684\u6b27\u62c9\u5e8f\uff0c\u5c31\u7b97\u6ca1\u6709\u6811\uff0c\u7ed9\u6211\u4eec\u4e00\u4e2a\u6808\uff0c\u7167\u6837\u53ef\u4ee5\u5728\u6811\u4e0a\u8dd1dfs\n\n### \u672c\u4f53\u9898\u89e3\n\n\u5176\u5b9e\u8bdd\u5df2\u7ecf\u8bf4\u4e86\u4e00\u534a\u4e86\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u62bd\u51fa\u6765\u7684\u90a3\u53ea\u6811\uff0c\u5b83\u7684\u6b27\u62c9\u5e8f\u5927\u5c0f\u5173\u7cfb\u548c\u539f\u6765\u7684\u6811\u7684\u6b27\u62c9\u5e8f\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u628a\u6240\u6709\u70b9\u7684\u590d\u5236\u4e00\u4e2a\u5f39\u51fa\u70b9\uff0c\u7136\u540e\u628a\u538b\u6808\u70b9\u548c\u5f39\u6808\u70b9\u6309\u539f\u6765\u6811\u4e0a\u7684\u6b27\u62c9\u5e8f\u6392\u4e00\u6ce2\u5e8f\uff0c\u5c31\u662f\u65b0\u6811\u4e2d\u7684\u70b9\u6309\u6b27\u62c9\u5e8f\u6392\u5e8f\u7684\u7ed3\u679c\uff0c\u7136\u540e\u6b27\u62c9\u5e8f\u6211\u4eec\u6709\u4e86\uff0c\u76f4\u63a5\u4e0d\u5efa\u6811\u8dd1dfs\u5373\u53ef\uff0c\u6811\u5f62dp\u540c\u66b4\u529b\n\n\u6ce8\u610f\u8fd9\u4e2a\u7b97\u6cd5\u590d\u6742\u5ea6\u4e0d\u662fNlogsigma(K)\u56e0\u4e3a\u6211\u4eec\u662f\u5bf9\u4e00\u4e9b\u5c0f\u7684\u6570\u636e\u6392\u5e8f\uff0c\u6bd4\u5408\u8d77\u6765\u6392\u4e00\u4e2a\u5927\u5e8f\u7684\u590d\u6742\u5ea6\u8981\u5c0f\uff0c\u53e6\u5916\u4f60\u8981\u771f\u7684\u89c9\u5f97lca\u590d\u6742\u5ea6\u4e0d\u884c\u53ef\u4ee5TARJAN\uff0c\u4f46\u662f\u500d\u589e\u5e38\u6570\u771f\u7684\u5c0f\uff0c\u53ef\u4ee5\u8fc7\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<stack>\nusing namespace std;\ntypedef long long ll;//\u5f00longlong \nconst int N=250010;\nstruct data{int v;int nxt;ll val;}edge[2*N];\nint alist[N];int cnt;int n;\ninline void add(int u,int v,ll val)\n{edge[++cnt].v=v;edge[cnt].nxt=alist[u];alist[u]=cnt;edge[cnt].val=val;}\nint dfu;int dfin[N];int dfou[N];int fa[22][N];ll mi[N];int dep[N]; \ninline void dfs(int x)//\u5904\u7406\u500d\u589e\u548c\u6b27\u62c9\u5e8f \n{\n\tdfin[x]=++dfu;\n\tfor(int i=1;fa[i-1][x];i++){fa[i][x]=fa[i-1][fa[i-1][x]];}\n\tint nxt=alist[x];\n\twhile(nxt)\n\t{\n\t\tint v=edge[nxt].v;ll val=edge[nxt].val;\n\t\tif(dfin[v]==0)\n\t\t{dep[v]=dep[x]+1;mi[v]=min(mi[x],val);fa[0][v]=x;dfs(v);}\n\t\tnxt=edge[nxt].nxt;\n\t}dfou[x]=++dfu;return;\n}\ninline int lca(int u,int v)//\u677f\u5b50\u500d\u589e\uff0c\u4e0d\u4f1a\u81ea\u884c\u95ee\u5ea6\u5a18 \n{\n\tif(dep[u]<dep[v])swap(u,v);int del=dep[u]-dep[v];\n\tfor(int i=0;del;del>>=1,i++){if(del&1){u=fa[i][u];}}if(u==v){return u;}\n\tfor(int i=20;i>=0;i--){if(fa[i][u]!=fa[i][v]){u=fa[i][u];v=fa[i][v];}}\n\treturn fa[0][v];\n}int tr[4*N];stack <int> s;int m;bool book[N];ll sum[N];//\u7528\u6765\u8fd8\u539fdfs\u7684\u6808 \ninline bool cmp(int x,int y)//\u6309\u6b27\u62c9\u5e8f\u6392\u5e8f \n{int k1=(x>0)?dfin[x]:dfou[-x];int k2=(y>0)?dfin[y]:dfou[-y];return k1<k2;}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u;int v;int val;scanf(\"%d%d%d\",&u,&v,&val);\n\t\tadd(u,v,val);add(v,u,val);\n\t}mi[1]=0x7f7f7f7f;dfs(1);scanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint cot;scanf(\"%d\",&cot);\n\t\tfor(int j=1;j<=cot;j++)\n\t\t{scanf(\"%d\",&tr[j]);book[tr[j]]=true;sum[tr[j]]=mi[tr[j]];}//\u5148\u5904\u7406\u5173\u952e\u70b9 \n\t\tsort(tr+1,tr+cot+1,cmp);//\u6309dfs\u5e8f\u6392\u5e8f \n\t\tfor(int j=1;j<cot;j++)//\u5904\u7406lca \n\t\t{int lc=lca(tr[j],tr[j+1]);if(!book[lc]){tr[++cot]=lc;book[lc]=true;}}\n\t\tint nc=cot;for(int j=1;j<=nc;j++){tr[++cot]=-tr[j];}//\u590d\u5236\u4e00\u4e2a-\u7684\u5f39\u6808\u70b9 \n\t\tif(!book[1]){tr[++cot]=1;tr[++cot]=-1;}sort(tr+1,tr+cot+1,cmp);//\u5f3a\u884c\u52a0\u51651\u53f7 \n\t\tfor(int j=1;j<=cot;j++)\n\t\t{\n\t\t\tif(tr[j]>0){s.push(tr[j]);}//\u6a21\u62dfdfs \n\t\t\telse\n\t\t\t{\n\t\t\t\tint now=s.top();s.pop();//pop\u6389\u4e4b\u540e\u5269\u4e0b\u7684\u6808\u9876\u5c31\u662f\u7236\u4eb2 \n\t\t\t\tif(now!=1){int fa=s.top();sum[fa]+=min(sum[now],mi[now]);}\n\t\t\t\telse {printf(\"%lld\\n\",sum[1]);}//\u8fd9\u91cc\u7279\u5224\u4e00\u4e0b1 \n\t\t\t\tsum[now]=0;book[now]=false;//pop\u5b8c\u4e4b\u540e\u8bb0\u5f97\u6e05\u7a7a \n\t\t\t}\n\t\t}\n\t}return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n\n\n",
        "postTime": 1519620256,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "[\u539f\u6587\u5730\u5740](https://www.cnblogs.com/bcoier/p/10416804.html)\n\n\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u5272\u65ad\u6bcf\u4e00\u6761\u8fb9\u90fd\u6709\u4ee3\u4ef7\uff0c\u6bcf\u6b21\u8be2\u95ee\u4f1a\u7ed9\u5b9a\u4e00\u4e9b\u70b9\uff0c\u6c42\u7528\u6700\u5c11\u7684\u4ee3\u4ef7\u4f7f\u6240\u6709\u7ed9\u5b9a\u70b9\u90fd\u548c1\u53f7\u8282\u70b9\u4e0d\u8fde\u901a\n\n## \u66b4\u529b$DP$\n\n\u6211\u4eec\u5148\u8003\u8651\u66b4\u529b\u600e\u4e48\u505a\n\n\u8bbe$dp[u]$\u4e3a\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u5272\u6389\u6240\u6709\u7ed9\u5b9a\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7\n\n\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1.\u82e5u\u4e0d\u662f\u7ed9\u5b9a\u70b9\uff0c\u5219$dp[u] = min(u$\u5230\u6839\u8282\u70b9\u7684\u6240\u6709\u8fb9\u7684\u6700\u5c0f\u8fb9\u957f\uff0c\u5272\u6389\u6240\u6709\u542b\u6709\u7ed9\u5b9a\u70b9\u7684\u5b50\u6811)\n\n$ps:$\u4e0a\u8ff0\u7ed9\u5b9a\u5b50\u6811\u4e0d\u4e00\u5b9a\u4e0eu\u76f4\u63a5\u76f8\u8fde\n\n2.\u82e5u\u662f\u7ed9\u5b9a\u70b9\uff0c\u663e\u7136\u4ed6\u5fc5\u987b\u4e0e1\u53f7\u70b9\u5206\u79bb\uff0c\u6240\u4ee5$dp[u]=u$\u5230\u6839\u8282\u70b9\u7684\u6240\u6709\u8fb9\u7684\u6700\u5c0f\u8fb9\u957f\n\n\u590d\u6742\u5ea6$O(nm)$\uff0c\u663e\u7136\u5bf9\u4e8e$m>=1$\u8fd9\u79cd\u6570\u636e\u662f\u8fc7\u4e0d\u4e86\u7684\n\n\u4e0b\u9762\u7ed9\u51fa\u66b4\u529bDP\u4ee3\u7801\uff08\u5438\u6c27\u4e4b\u540e\u670950\u5206\uff09\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n//#define int long long\n#define inf 1234567890\n#define mod 1000000007\nil int read()\n{\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define maxn 2333//\u6211\u4e5f\u4e0d\u77e5\u9053\u95ee\u4ec0\u4e48\u6570\u7ec4\u5f00\u5927\u4f1a\u4eceRE 50\u5206->TLE 20\u5206\nstruct edge\n{\n    int v, w, next;\n}e[maxn << 1];\nint n, m, head[maxn], cnt, is[maxn], dp[maxn];\nil void add(int u, int v, int w)\n{\n    e[++ cnt] = (edge){v, w, head[u]};\n    head[u] = cnt;\n}\nil void dfs(int u, int fr)\n{\n    int temp = 0;\n    for(re int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].v;\n        if(v == fr) continue;\n        if(is[v]) {temp += e[i].w; continue;}\n        dp[v] = min(dp[u], e[i].w);\n        dfs(v, u);\n        temp += dp[v];\n    }\n    dp[u] = min(dp[u], temp);\n}\nint main()\n{\n    //file(a);\n    n = read();\n    for(re int i = 1; i < n; ++ i)\n    {\n        int u = read(), v = read(), w = read();\n        add(u, v, w), add(v, u, w);\n    }\n    int T = read();\n    while(T --)\n    {\n        memset(is, 0, sizeof(is));\n        m = read(), dp[1] = inf;\n        for(re int i = 1; i <= m; ++ i) is[read()] = 1;\n        dfs(1, 0);\n        printf(\"%d\\n\", dp[1]);\n    }\n    return 0;\n}\n```\n\n\u90a3\u4e48\u5269\u4e0b\u4e94\u5341\u5206\u6211\u4eec\u8981\u600e\u4e48\u5f97\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0$\\sum k[i]$\u662f~~\u975e\u5e38~~\u5c0f\u7684\uff0c\u90a3\u6211\u4eec\u662f\u4e0d\u662f\u53ef\u4ee5\u5728k\u4e0a\u505a\u6587(luan)\u7ae0\uff08gao)\u5462\uff1f\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6709\u5f88\u591a\u70b9\u5728\u6811\u4e0a\u6211\u4eec\u662f\u6ca1\u6709\u7528\u5230\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u91cd\u6784\u4e00\u68f5\u65b0\u7684\u6811\uff0c\u8fd9\u68f5\u6811\u5c31\u53eb\u505a\u2014\u2014\u2014\u2014\u865a\u6811\n\n## \u865a\u6811\u4f18\u5316$DP$\n\n\u865a\u6811\u7684\u601d\u60f3\u662f\u53ea\u4fdd\u7559\u6709\u7528\u7684\u70b9\uff08\u5728\u8fd9\u9053\u9898\u76ee\u91cc\u9762\u663e\u7136\u662f\u6807\u8bb0\u70b9\u548clca\uff09\uff0c\u7136\u540e\u91cd\u65b0\u6784\u5efa\u4e00\u68f5\u6811\uff0c\u4ece\u800c\u4f7f\u8282\u70b9\u5927\u5927\u51cf\u5c11\uff0c\u4f18\u5316\u590d\u6742\u5ea6\n\n\u90a3\u4e48\u6211\u4eec\u8981\u600e\u4e48\u6784\u5efa\u865a\u6811\u5462\uff1f\n\n\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u7528dfs\u5e8f\u8868\u793a\u51fa\u6765\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u6807\u8bb0\u70b9\u6309\u7167dfs\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u538b\u8fdb\u4e00\u4e2a\u6808\u4e2d\uff0c\u7136\u540e\u8fde\u8fb9\u5373\u53ef\n\n### \u5177\u4f53\u65b9\u6cd5\uff1a\n\n\u6211\u4eec\u5148\u5bf9\u6240\u6709\u6807\u8bb0\u70b9\u6309\u7167$dfs$\u5e8f\u6392\u5e8f\uff0c\u5e76\u4f9d\u6b21\u5165\u6808\n\n\u6211\u4eec\u8003\u8651\u5165\u6808\u64cd\u4f5c\uff1a\n\n\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u52a0\u5165\u7684\u5143\u7d20\u4e3ax\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3ay\uff0c\u6808\u9876\u4e3a$s$\uff0c$l = lca(x, s)$\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u6309$dfs$\u52a0\u5165\uff0c\u6240\u4ee5$dfn[s]<dfn[x],dfn[l]<dfn[x]$\n\n\u5982\u679cl=s\uff0c\u4e5f\u5c31\u662f\u8bf4s\u662fx\u7684\u7956\u5148\uff0c\u90a3\u4e48s\u52301\u53f7\u70b9\u663e\u7136\u6709\u8fb9\u9700\u8981\u5272\u6389\uff0c\u6240\u4ee5x\u5bf9\u7b54\u6848\u5e76\u4e0d\u4ea7\u751f\u5f71\u54cd\uff0c\u76f4\u63a5\u5ffd\u7565\n\n\u6240\u4ee5x\uff0cs\u80af\u5b9a\u5728l\u7684\u4e24\u8fb9\uff08$dfn[l]<dfn[x]$\uff09\n\n\u7136\u540e\u6211\u4eec\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\n\n$if(dfn[y] > dfn[l])$ \u5219\u8bf4\u660ey\u5728l\u4e0ex\u4e4b\u95f4\uff0c\u8fde\u8fb9$y -> x$\uff0c\u5e76\u5c06x\u5f39\u51fa\n\n$if(dfn[y] < dfn[l])$ \u5219\u8bf4\u660el\u5728x\u4e0ey\u4e4b\u95f4\uff0c\u6240\u4ee5\u8fde\u8fb9$l -> x$\uff0c\u5e76\u4e14\u4ee4x\u51fa\u6808\uff0cl\u5165\u6808\n\n$if(dfn[y] = dfn[l])$ \u5219\u8bf4\u660ey=l\uff0c\u8fde\u8fb9 $l -> x$\n\n\u5efa\u6811\u5b8c\u6210\u4ee5\u540e\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u6709\u7528\u70b9\uff0c\u5373\u6ee1\u8db3\u66b4\u529bDP\u4e2d\u7684\u542b\u6709\u7ed9\u5b9a\u70b9\u7684\u5b50\u6811\uff0c\u6240\u4ee5\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u53ef\u4ee5\u5272\u6389\u7684\uff0c\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(klogk)$\n\n\u4ee3\u7801\u5982\u4e0b\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define re register\n#define debug printf(\"Now is Line : %d\\n\",__LINE__)\n#define file(a) freopen(#a\".in\",\"r\",stdin);freopen(#a\".out\",\"w\",stdout)\n#define int long long\n#define inf 123456789000000000\n#define mod 1000000007\nil int read()\n{\n    re int x = 0, f = 1; re char c = getchar();\n    while(c < '0' || c > '9') { if(c == '-') f = -1; c = getchar();}\n    while(c >= '0' && c <= '9') x = x * 10 + c - 48, c = getchar();\n    return x * f;\n}\n#define maxn 250005\nstruct edge\n{\n\tint v, w, next;\n}e[maxn << 1];\nint n, m, head[maxn], cnt, is[maxn], mi[maxn], dfn[maxn], col, t;\nint size[maxn], fa[maxn], top[maxn], son[maxn], dep[maxn], s[maxn];\nvector<int>v[maxn];\nil void add(int u, int v, int w)\n{\n\te[++ cnt] = (edge){v, w, head[u]};\n\thead[u] = cnt;\n}\nil bool cmp(int a, int b){return dfn[a] < dfn[b];}\nil void dfs1(int u, int fr)\n{\n\tsize[u] = 1, fa[u] = fr, dep[u] = dep[fr] + 1;\n\tfor(re int i = head[u]; i; i = e[i].next)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v == fr) continue;\n\t\tmi[v] = min(mi[u], e[i].w);\n\t\tdfs1(v, u), size[u] += size[v];\n\t\tif(size[son[u]] < size[v]) son[u] = v;\n\t}\n}\nil void dfs2(int u, int fr)\n{\n\ttop[u] = fr, dfn[u] = ++ col;\n\tif(!son[u]) return;\n\tdfs2(son[u], fr);\n\tfor(re int i = head[u]; i; i = e[i].next)\n\t{\n\t\tint v = e[i].v;\n\t\tif(v != fa[u] && v != son[u]) dfs2(v, v);\n\t}\n}\nil int lca(int a, int b)\n{\n\twhile(top[a] != top[b]) dep[top[a]] > dep[top[b]] ? a = fa[top[a]] : b = fa[top[b]];\n\treturn dep[a] < dep[b] ? a : b;\n}\nil void push(int x)\n{\n\tif(t == 1) {s[++ t] = x;return;}\n\tint l = lca(x, s[t]);\n\tif(l == s[t]) return;\n\twhile(t > 1 && dfn[s[t - 1]] >= dfn[l]) v[s[t - 1]].push_back(s[t]), --t;\n\tif(s[t] != l) v[l].push_back(s[t]), s[t] = l;\n\ts[++ t] = x;\n}\nil int dp(int u)\n{\n\tif(v[u].size() == 0) return mi[u];\n\tint temp = 0;\n\tfor(re int i = 0; i < v[u].size(); ++ i) temp += dp(v[u][i]);\n\tv[u].clear();\n\treturn min(mi[u], temp);\n}\nsigned main()\n{\n\tfile(a);\n\tn = read();\n\tfor(re int i = 1; i < n; ++ i)\n\t{\n\t\tint u = read(), v = read(), w = read();\n\t\tadd(u, v, w), add(v, u, w);\n\t}\n\tmi[1] = inf, dfs1(1, 0), dfs2(1, 1);\n\tint T = read();\n\twhile(T --)\n\t{\n\t\tm = read();\n\t\tfor(re int i = 1; i <= m; ++ i) is[i] = read();\n\t\tsort(is + 1, is + m + 1, cmp);\n\t\ts[t = 1] = 1;\n\t\tfor(re int i = 1; i <= m; ++ i) push(is[i]);\n\t\twhile(t > 0) v[s[t - 1]].push_back(s[t]), --t;\n\t\tprintf(\"%lld\\n\", dp(1));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1550802278,
        "uid": 57014,
        "name": "Nemlit",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\u4e00\u9053\u865a\u6811\u7684\u7ec3\u624b\u9898\u3002\n\n\u9996\u5148\u663e\u7136\u6709\u5982\u4e0b\u505a\u6cd5\uff1a\n\n\u8bbe $f_i$ \u8868\u793a\u4ee5 $i$ \u53f7\u70b9\u4e3a\u6839\u7684\u5b50\u6811\uff0c$i$ \u7684\u5b50\u8282\u70b9\u4e2d\u6240\u6709\u5173\u952e\u70b9\u5747\u4e0d\u4e0e $i$ \u53f7\u70b9\u76f8\u8fde\u82b1\u8d39\u7684\u6700\u4f4e\u6210\u672c\u3002\u5219\u6240\u6c42\u7b54\u6848\u4e3a $f_1$\u3002\n\n\u5bf9\u4e8e $i$ \u53f7\u70b9\u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 $son$\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n- \u5f53\u524d\u5b50\u8282\u70b9 $son$ \u662f\u5173\u952e\u70b9\uff0c\u5219\u8fde\u63a5 $i$ \u4e0e $son$ \u7684\u8fb9\u4e00\u5b9a\u8981\u5207\u65ad\u3002$f_i=f_i+w(i,son)$\u3002\n- \u5f53\u524d\u5b50\u8282\u70b9 $son$ \u4e0d\u662f\u5173\u952e\u70b9\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5207\u65ad\u4ee5 $son$ \u4e3a\u6839\u7684\u5b50\u6811\u5185\u6240\u6709\u5173\u952e\u70b9\u4e0e $son$ \u7684\u8054\u7cfb\uff0c\u6216\u8005\u76f4\u63a5\u5207\u65ad\u8fde\u63a5 $i$ \u548c $son$ \u7684\u8fb9\u3002$f_i=f_i+\\min(w(i,son),f_{son})$\u3002\n\n\u4e00\u6b21\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nq)$\u3002\n\n\u6ce8\u610f\u5230\u5982\u4e0b\u4e24\u4e2a\u4e8b\u5b9e\uff1a\n\n1. \u6240\u6709\u8be2\u95ee\u4e2d\u5173\u952e\u70b9\u7684\u603b\u6570\u4e0e $n$ \u540c\u9636\u3002\n2. \u5f88\u591a\u975e\u5173\u952e\u70b9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff08\u6bd4\u5982\u4e00\u4e2a\u5b50\u6811\u5185\u4e00\u4e2a\u5173\u952e\u70b9\u90fd\u6ca1\u6709\uff0c\u90a3\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u6240\u6709\u70b9\u90fd\u4e0d\u4f1a\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff09\u3002\n\n\u6211\u4eec\u8003\u8651\u538b\u7f29\u8fd9\u68f5\u6811\uff0c\u53ea\u4fdd\u7559\u5bf9\u4e8e DP \u8ba1\u7b97\u6709\u7528\u7684\u8282\u70b9\u3002\n\n\u73b0\u5728\u8981\u89e3\u51b3\u4e24\u4e2a\u95ee\u9898\uff1a\u600e\u4e48\u538b\u7f29\uff1f\u54ea\u4e9b\u8282\u70b9\u8be5\u4fdd\u7559\uff1f\n\n\u4e3a\u4e86\u786e\u4fdd\u7b54\u6848\u6b63\u786e\uff0c\u6211\u4eec\u538b\u7f29\u65f6\u5e94\u8be5\u786e\u4fdd**\u6811\u7684\u5f62\u6001\u4e0d\u53d8**\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u662f\u7956\u5148-\u540e\u4ee3\u7684\u5173\u7cfb\u4e0d\u53d8\u3002\n\n\u5728\u6b64\u524d\u63d0\u4e0b\uff0c\u6211\u4eec\u8981\u8ba9\u4fdd\u7559\u7684\u8282\u70b9\u6570\u5c3d\u53ef\u80fd\u5c11\u3002\n\n\u6beb\u65e0\u60ac\u5ff5\uff0c\u6240\u6709\u7684\u5173\u952e\u70b9\u5e94\u8be5\u4fdd\u7559\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u80fd\u786e\u5b9a\u6811\u7684\u5f62\u6001\uff08\u5373\u6240\u6709\u8282\u70b9\u95f4\u7684\u7956\u5148-\u540e\u4ee3\u5173\u7cfb\uff09\uff0c\u6211\u4eec\u5e94\u8be5\u4fdd\u7559\u6240\u6709\u5173\u952e\u70b9\u4e24\u4e24\u4e4b\u95f4\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\n\n\u4e0b\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u4f55\u5efa\u6811\uff1f\n\n\u5982\u679c\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u5173\u952e\u70b9\u5bf9\uff0c\u8ba1\u7b97\u4e24\u4e24\u4e4b\u95f4\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u65e0\u6cd5\u63a5\u53d7\u3002\n\n\u4e00\u79cd\u60f3\u6cd5\u662f\u5c06\u6240\u6709\u5173\u952e\u70b9\u5148\u6309 DFS \u5e8f\u6392\u5e8f\uff0c\u6309\u987a\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u52a0\u5230\u6811\u91cc\u3002\u521a\u5f00\u59cb\u6811\u4e0a\u53ea\u6709 $1$ \u53f7\u70b9\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4\u5728\u6811\u4e0a\u4e00\u6761\u94fe\u4e0a\u7684\u6240\u6709\u70b9\u3002\u8fd9\u4e2a\u6808\u5185\u7684\u6240\u6709\u70b9\u6ee1\u8db3\u5176 DFS \u5e8f\u5355\u8c03\u9012\u589e\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u51c6\u5907\u5c06\u4e00\u4e2a\u5173\u952e\u70b9\u52a0\u5165\u6808\u4e2d\u65f6\uff0c\u6c42\u4e00\u4e0b\u5f53\u524d\u6808\u9876\u70b9\u548c\u8981\u52a0\u5165\u7684\u5173\u952e\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 $p$\u3002\n\n1. \u5982\u679c\u6808\u9876\u5c31\u662f $p$\uff0c\u5219\u53ef\u4ee5\u77e5\u9053\u6211\u4eec\u52a0\u5165\u7684\u5173\u952e\u70b9\u548c\u6808\u4e2d\u7684\u70b9\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u76f4\u63a5\u5c06\u5173\u952e\u70b9\u52a0\u5165\u6808\u4e2d\u5373\u53ef\u3002\n2. \u5982\u679c\u6808\u9876\u4e0d\u662f $p$\uff0c\u5219\u9700\u8981\u5c06\u6808\u4e2d\u7684\u4e00\u4e9b\u70b9\u5f39\u51fa\u6765\uff0c\u4f7f\u5f97\u65b0\u52a0\u5165\u7684\u70b9\u548c\u6808\u91cc\u7684\u70b9\u5728\u4e00\u6761\u94fe\u4e0a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u505c\u5730\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u76f4\u5230\u8981\u63d2\u5165\u7684\u70b9\u7684 DFS \u5e8f\u5c0f\u4e8e\u6808\u9876\u4e0b\u9762\u7684\u70b9\u7684 DFS \u5e8f\u3002\u63a5\u4e0b\u6765\u5206\u4e24\u79cd\u60c5\u51b5\uff1a\n  - \u5982\u679c\u6b64\u65f6\u6808\u9876\u662f $p$\uff0c\u76f4\u63a5\u5c06\u5173\u952e\u70b9\u63d2\u5165\u6808\uff1b\n  - \u5982\u679c\u6b64\u65f6\u6808\u9876\u4e0d\u662f $p$\uff08\u663e\u7136\u8fd9\u65f6\u5019 $p$ \u7684 DFS \u5e8f\u6bd4\u6808\u9876\u5927\uff09\uff0c\u8bf4\u660e $p$ \u4e0d\u5728\u94fe\u4e0a\uff0c\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u63d2\u5165 $p$ \u548c\u5173\u952e\u70b9\u3002\n\n\u5f39\u6808\u7684\u65f6\u5019\u987a\u5e26\u628a\u8fb9\u8fde\u63a5\u4e00\u4e0b\uff0c\u6811\u5c31\u5efa\u597d\u5566\u3002\u5728\u65b0\u7684\u6811\u4e0a\u8dd1\u539f\u6765\u7684 DP \u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7ecf\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5404\u6b21\u5efa\u6811\u65f6\u7684\u8282\u70b9\u6570\u4e4b\u548c\u5c06\u4f1a\u63a7\u5236\u5728 $O(n)$ \u7684\u7ea7\u522b\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n// Problem : P2495 [SDOI2011]\u6d88\u8017\u6218\n// Contest : Luogu\n// URL : https://www.luogu.com.cn/problem/P2495\n// Memory Limit : 500 MB\n// Time Limit : 2000 ms\n// Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n#include <cstring>\n#include <iostream>\n#include <set>\n#include <algorithm>\nusing namespace std;\nstruct graph\n{\n struct edge\n {\n  int v,w,next;\n }e[1000005];\n int head[500005],ch,cnt;\n void addedge(int u,int v,int w)\n {\n  e[++cnt].v=v;\n  e[cnt].w=w;\n  e[cnt].next=head[u];\n  head[u]=cnt;\n }\n}t1,t2;\nint fa[500005][25],mind[500005][25],dis[500005],dep[500005],dfn[500005],cnt;\nint a[500005];\nlong long f[500005];\nint sta[500005];\nint d;\nset<int> s;\nbool cmp(int x,int y)\n{\n return dfn[x]<dfn[y];\n}\nvoid dfs1(int u,int f)\n{\n dfn[u]=++cnt;\n dep[u]=dep[f]+1;\n fa[u][0]=f;\n for(int i=1;i<=20;i++)\n {\n  fa[u][i]=fa[fa[u][i-1]][i-1];\n  mind[u][i]=min(mind[u][i-1],mind[fa[u][i-1]][i-1]);\n }\n for(int i=t1.head[u];i;i=t1.e[i].next)\n {\n  int v=t1.e[i].v,w=t1.e[i].w;\n  if(v!=f)\n  {\n   dis[v]=dis[u]+w;\n   mind[v][0]=w;\n   dfs1(v,u);\n  }\n }\n}\nvoid dfs2(int u)\n{\n f[u]=0;\n for(int i=t2.head[u];i;i=t2.e[i].next)\n {\n  int v=t2.e[i].v,w=t2.e[i].w;\n  dfs2(v);\n  if(s.count(v))f[u]+=w;\n  else f[u]+=min(f[v],1ll*w);\n }\n return;\n}\nint getlca(int x,int y)\n{\n d=1<<30;\n if(dep[x]>dep[y])swap(x,y);\n for(int i=20;i>=0;i--)\n  if(dep[y]-(1<<i)>=dep[x])\n  {\n   d=min(d,mind[y][i]);\n   y=fa[y][i];\n  }\n if(x==y)return x;\n for(int i=20;i>=0;i--)\n  if(fa[x][i]!=fa[y][i])\n  {\n   d=min(d,min(mind[x][i],mind[y][i]));\n   x=fa[x][i],y=fa[y][i];\n  }\n return fa[x][0];\n}\nint main()\n{\n ios::sync_with_stdio(false);\n int n;\n cin>>n;\n for(int i=1;i<n;i++)\n {\n  int u,v,w;\n  cin>>u>>v>>w;\n  t1.addedge(u,v,w);\n  t1.addedge(v,u,w);\n }\n dfs1(1,1);\n int q;\n cin>>q;\n while(q--)\n {\n  s.clear();\n  int k;\n  cin>>k;\n  for(int i=1;i<=k;i++)\n  {\n   cin>>a[i];\n   s.insert(a[i]);\n  }\n  sort(a+1,a+k+1,cmp);\n  sta[1]=1;\n  int top=1;\n  t2.head[1]=0;\n  for(int i=1;i<=k;i++)\n  {\n   int lca=getlca(a[i],sta[top]);\n   if(lca!=sta[top])//\u65b0\u52a0\u7684\u70b9\u548c\u539f\u6765\u5728\u6808\u91cc\u7684\u70b9\u4e0d\u5728\u4e00\u6761\u94fe\u4e0a\n   {\n    while(dfn[lca]<dfn[sta[top-1]])\n    {\n     int u=sta[top-1],v=sta[top];\n     getlca(u,v);\n     t2.addedge(u,v,d);\n     top--;\n    }\n    if(dfn[lca]>dfn[sta[top-1]])//lca \u672a\u5165\u6808\n    {\n     getlca(lca,sta[top]);\n     t2.head[lca]=0;\n     t2.addedge(lca,sta[top],d);\n     top--;\n     sta[++top]=lca;\n    }\n    else\n    {\n     int u=sta[top-1],v=sta[top];\n     getlca(u,v);\n     t2.addedge(u,v,d);\n     top--;\n    }\n   }\n   t2.head[a[i]]=0;\n   sta[++top]=a[i];\n  }\n  while(top>1)//\u6700\u540e\u8bb0\u5f97\u628a\u6808\u91cc\u7684\u70b9\u4e5f\u8fde\u4e0a\u8fb9\n  {\n   int u=sta[top-1],v=sta[top];\n   getlca(u,v);\n   t2.addedge(u,v,d);\n   top--;\n  }\n  dfs2(1);\n  cout<<f[1]<<endl;\n }\n return 0;\n}\n```",
        "postTime": 1592126116,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\t\u8fd9\u9898\u4e0d\u662f\u5f88\u96be\uff0c\u88f8\u88f8\u7684\u4e00\u9053\u865a\u6811\u5904\u7406\u6811\u5f62DP\u7684\u9898\uff1a\n    \u9996\u5148\uff1a\u8003\u8651\u88f8DP\uff0cf[i]\u8868\u793a\u5c06i\u5b50\u6811\u5185\u6240\u6709\u70b9\u5904\u7406\u6389\u6240\u9700\u7684\u6700\u5c0f\u4ee3\u4ef7\n    \t  \u7528\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4mn[i]\u8868\u793ai\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\uff0c\u90a3\u4e48\u8f6c\u79fb\u5c31\u5f88\t  \t    \u663e\u800c\u6613\u89c1\u4e86\u5427\uff1a    \n```cpp\n      mn[v]=min(mn[u],(ll)edge[i].w);\n      for(register int i=0;i<v[x].size();i++){\n          ans+=pr(v[x][i]);\n      }\n      return f[x]=min(ans,mn[x]);\n```\n\t\t  \u7136\u800c\uff0c\u66b4\u529b\u80af\u5b9a\u662f\u4e0d\u884c\u7684\u554a\uff0c\u6bd5\u7adf\u662f\u6bcf\u6b21\u8be2\u95eeO(n)\uff0c\u4e0d\u5c31\u70b8\u7684\u98de\u8d77\n          \u90a3\u4e48\u8003\u8651\u4f18\u5316\uff0c\u603b\u70b9\u6570\u90a3\u4e48\u5c0f\uff0c\u80af\u5b9a\u6709\u4ec0\u4e48\u529e\u6cd5\u5229\u7528\u8fd9\u4e2a\u7684\u3002\n          \u6211\u4eec\u8003\u8651\u4e00\u4e0bDP\u8fc7\u7a0b\uff0c\u662f\u4e0d\u662f\u4f1a\u904d\u5386\u5230\u6240\u6709lca\u5230\u9700\u6c42\u70b9\u8def\u5f84\u4e0a\u7684\u70b9\n          \u90a3\u4e48\u662f\u4e0d\u662f\u53ef\u4ee5\u8def\u5f84\u538b\u7f29\u4e00\u4e0b\uff1f\n          \u6211\u4eec\u5c06\u4e00\u68f5\u6811\u538b\u7f29\u6210\u53ea\u6709\u9700\u6c42\u70b9\u548c\u5176lca\u7684\u6811\uff08\u5176\u5b9e\u5c31\u662f\u865a\u6811\uff09\n          \u6211\u4eec\u518d\u8003\u8651\u5982\u679c\u8fd9\u6837\u4f1a\u6709\u591a\u5c11\u4e2a\u70b9\uff0c\u6211\u4eec\u5c06\u5176\u6309dfs\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u76f8\n          \u90bb\u70b9\u7684lca\u4e00\u5b9a\u6bd4\u8f83\u8fdc\u70b9\u7684lca\u6df1\uff0c\u4e5f\u5c31\u662f\u66f4\u63a5\u8fd1\u90a3\u4e24\u4e2a\u70b9\u90a3\u4e48\u65b0\u52a0\n          \u5165\u4e00\u4e2a\u70b9\uff0c\u6700\u591a\u4e5f\u5c31\u4f1a\u65b0\u52a0\u5165\u4e00\u4e2alca,\u6240\u4ee5\u603b\u5171\u6700\u591a\u5c312*k\u4e2a\u70b9\uff0cDP\n          \u968f\u4fbf\u8fc7\u3002\n          \n          \u5efa\u6811\u5177\u4f53\u8fc7\u7a0b\u89c1\u4ee3\u7801\uff1a\n```cpp\n#pragma g++ opitmize(3)\n#include<vector>\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(register int i=a;i<=b;i++)\n#define per(i,b,a) for(register int i=b;i>=a;i--)\ntypedef long long ll;\nusing namespace std;\nint n,tot,m,dfn[250010],t,a[500010],_top,s[250010];\nll mn[250010];\nnamespace T{\n\tint head[250010],fa[250010],top[250010],d[250010],sz[250010],son[250010],k;\n\tstruct node{\n\t\tint to,nt,w;\n\t} edge[500010];\n\tinline void add(int u,int v,int w){\n\t\tedge[++k].nt=head[u];head[u]=k;\n\t\tedge[k].to=v;edge[k].w=w;\n\t}\n\tinline void dfs1(int u,int f){\n\t\tfa[u]=f;sz[u]=1;d[u]=d[f]+1;\n\t\tfor(register int i=head[u];i;i=edge[i].nt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(v==f) continue;\n\t\t\tmn[v]=min(mn[u],(ll)edge[i].w);\n\t\t\tdfs1(v,u);sz[u]+=sz[v];\n\t\t\tif(!son[u]||sz[v]>sz[son[u]]) son[u]=v;\n\t\t}\n\t}\n\tinline void dfs2(int u,int tp){\n\t\ttop[u]=tp;dfn[u]=++tot;\n\t\tif(!son[u]) return ; dfs2(son[u],tp);\n\t\tfor(register int i=head[u];i;i=edge[i].nt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(v==fa[u]||v==son[u]) continue;\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n\tinline int LCA(int x,int y){\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(d[top[x]]<d[top[y]]) x^=y^=x^=y;\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\treturn d[x]>d[y]?y:x;\n\t}\n}\nusing namespace T;\nnamespace FT{\n\tvector<int> v[250010];\n\tinline void add(int x,int y){\n\t\tv[x].push_back(y);\n\t}\n\tinline void ins(int x) {\n\t    if(_top == 1) {s[++_top] = x; return ;}\n\t    int lca = T::LCA(x, s[_top]);\n\t    if(lca == s[_top]) return ;\n\t    while(_top > 1 && dfn[s[_top - 1]] >= dfn[lca]) add(s[_top - 1], s[_top]), _top--;\n\t    if(lca != s[_top]) add(lca, s[_top]), s[_top] = lca;\n\t    s[++_top] = x;\n\t}\n\tinline ll pr(int x){\n\t\tif(v[x].size()==0) return mn[x];\n\t\tll ans=0;\n\t\tfor(register int i=0;i<v[x].size();i++){\n\t\t\tans+=pr(v[x][i]);\n\t\t}\n\t\tv[x].clear();\n\t\treturn min(ans,mn[x]);\n\t}\n\tinline bool cmp(int a,int b){\n\t\treturn dfn[a]<dfn[b];\n\t}\n}\nusing namespace FT;\nint main(){\n\tscanf(\"%d\",&n);\n\tmemset(mn,0x3f,sizeof(mn));\n\tint u,v,w;\n\trep(i,1,n-1) scanf(\"%d%d%d\",&u,&v,&w),T::add(u,v,w),T::add(v,u,w);\n\tT::dfs1(1,0);T::dfs2(1,1);\n\tint x,y;\n\tscanf(\"%d\",&m);\n\twhile(m--) {\n        int K;scanf(\"%d\",&K);\n        for(int i = 1; i <= K; i++) scanf(\"%d\",&a[i]);\n        sort(a + 1, a + K + 1, FT::cmp);\n        s[_top = 1] = 1;\n        for(int i = 1; i <= K; i++) FT::ins(a[i]);\n        while(_top > 0)  FT::add(s[_top - 1], s[_top]), _top--;\n        printf(\"%lld\\n\",FT::pr(1)); \n    }\n    return 0;\n}\n\n```\n\n------------\n\n\t**update:**\n    \u8fd8\u662f\u8bf4\u4e00\u4e0b\u5efa\u6811\u8fc7\u7a0b\u5427\uff08**\u6808\u4e2d\u7ef4\u62a4\u7684\u662f\u4e00\u6761\u94fe**\uff09\uff1a\n```cpp\n\tinline void ins(int x) {\n\t    if(_top == 1) {s[++_top] = x; return ;}\n\t    int lca = T::LCA(x, s[_top]);\n\t    if(lca == s[_top]) return ;\n\t    while(_top > 1 && dfn[s[_top - 1]] >= dfn[lca]) add(s[_top - 1], s[_top]), _top--;\n\t    if(lca != s[_top]) add(lca, s[_top]), s[_top] = lca;\n\t    s[++_top] = x;\n\t}\n```\n    \t\u9996\u5148\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u6808\u9876\u5143\u7d20\u662f\u4ed6\u6240\u5728\u94fe\u4e0a\u7684\u70b9\uff0c\u90a3\u4e48\u5c31\u53ef\n        \u4ee5\u4e0d\u52a0\u8fd9\u4e2a\u70b9\uff0c\u8fd9\u4e2a\u753b\u753b\u56fe\u5c31\u77e5\u9053\u4e86\uff1b\n        \u7136\u540e\uff0c\u5982\u679c\u4f60\u65b0\u52a0\u5165\u4e86\u4e00\u4e2a\u70b9\uff0c\u4e14\u6808\u9876\u5143\u7d20\u7684dfn\u6bd4lca\u7684dfn\u5927\u90a3\u4e48\n        \u8bf4\u660e\u6808\u9876\u5143\u7d20\u5728\u6240\u5728\u5b50\u6811\u5df2\u7ecf\u6784\u5efa\u5b8c\u4e86\uff08\u5982\u679c\u6ca1\u6709\uff0c\u5373x\u7684\u5b50\u6811\u4e2d\u8fd8\n        \u6709\u4e00\u4e2a\u672a\u52a0\u5165\u7684\u70b9y\uff0c\u4f46\u662fdfn[y]<dfn[p]\uff0c\u5373\u5e94\u5148\u8bbf\u95eey\uff09\uff0c\u5f39\u51fa\u90a3\n        \u68f5\u5b50\u6811\uff1b\n        \u5f39\u5b8c\u540e\uff0c\u5982\u679c\u6808\u9876\u7684\u70b9\u4e0d\u7b49\u4e8elca\uff0c\u90a3\u4e48\u8bf4\u660e\u4ed6\u5728lca\u4e0a\u9762\uff0c\u8fd9\u65f6\u5c31\n        \u9700\u8981\u52a0\u5165lca\u4e86\u3002\n        \u6700\u540e\u7684\u65f6\u5019\uff0c\u4f60\u6808\u91cc\u8fd8\u6709\u4e00\u6761\u94fe\uff0c\u4e0d\u8981\u5fd8\u4e86\u8fde\u8fb9\u3002\n        \uff08\u753b\u753b\u56fe\u6a21\u62df\u6a21\u62df\u5427\uff0c\u5e94\u8be5\u5c31\u61c2\u4e86\uff09\n\n------------\n\n\t\u5982\u679c\u4ecd\u7136\u770b\u4e0d\u61c2\u7684\u8bdd\uff0c\u5c31\u501f\u9274\u501f\u9274dalao\u535a\u5ba2\u5427\uff1a\n    \u6bd5\u7adf\u6211\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u8bb2\u6e05\u695a\uff0cdalao\u535a\u5ba2\u8fd8\u662f\u8bf4\u5f97\u633a\u5bb9\u6613\u61c2\u7684\n[dalao\u535a\u5ba2](https://www.cnblogs.com/zwfymqz/p/9175152.html)\n\n------------\n\n\t\u8bdd\u8bf4\u6211\u7adf\u7136\u4e00\u6b21\u5c31A\u4e86\uff0c\u81ea\u5df1\u90fd\u96be\u4ee5\u7f6e\u4fe1\uff0c\u795d\u4f60\u4eec\u4e00\u904dAC\u5427\uff0c\u61c2\u4e86\u8bdd\uff0c\u8fd8\n    \u662f\u633a\u597d\u5199\u7684",
        "postTime": 1539784720,
        "uid": 85715,
        "name": "ACalgorithm",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u7bc7\u865a\u6811\u5165\u95e8\u9898\u89e3\u3002\n\n\u8003\u8651\u9898\u76ee\u4e2d $m=1$ \u7684\u60c5\u51b5\u3002\u6811\u4e0a\u52a8\u89c4\uff0c\u5b9a\u4e49\u72b6\u6001 $f[u]$ \u8868\u793a\u5207\u65ad\u8282\u70b9 $u$ \u4e0e\u8be5\u5b50\u6811\u5185\u6240\u6709\u5173\u952e\u70b9\u7684\u8def\u5f84\uff0c\u6700\u5c0f\u603b\u4ee3\u4ef7\u3002\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n$$\nf[u]=w(u,v)\\ \\ (h[v]=1)\n$$\n\n$$\nf[u]=\\min(w(u,v),f[v])\\ \\ (h[v]=0)\n$$\n\n\u52a8\u6001\u89c4\u5212\u90e8\u5206\u4e0d\u518d\u8d58\u8ff0\u3002\u8be5\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a $O(n)$ \u3002\n\n\u8003\u8651\u9898\u76ee\u4e2d $m\\not= 1$ \u7684\u60c5\u51b5\u3002\u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u67e5\u8be2\uff0c\u90fd\u8fdb\u884c\u4e00\u6b21 $O(n)$ \u590d\u6742\u5ea6\u7684\u904d\u5386\u663e\u7136\u65e0\u6cd5\u63a5\u53d7\u3002\u89c2\u5bdf\u5230\u9898\u76ee\u4e2d $\\Sigma{k}$ \u7684\u53d6\u503c\u4e0d\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u9488\u5bf9\u6ca1\u4e2a\u8be2\u95ee\uff0c**\u820d\u5f03\u6811\u4e0a\u7684\u4e00\u4e9b\u975e\u5173\u952e\u70b9\uff0c\u4ec5\u4fdd\u7559\u4e00\u68f5\u5305\u542b\u539f\u6811\u4e0a\u90e8\u5206\u8282\u70b9\u7684\u865a\u6811**\uff0c\u5e76\u5728**\u865a\u6811**\u4e0a\u8fdb\u884c\u52a8\u6001\u89c4\u5212\u3002\n\n\u90a3\u4e48\uff0c\u5728\u865a\u6811\u4e0a\u5e94\u8be5\u4fdd\u7559\u539f\u6811\u4e0a\u7684\u54ea\u4e9b\u70b9\u5462\uff1f\n\n\u9996\u5148\uff0c\u6bcf\u6b21\u8baf\u95ee\u4e2d\u7ed9\u51fa\u7684 $k$ \u4e2a\u5173\u952e\u70b9\uff08\u8d44\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\uff09\u663e\u7136\u5e94\u8be5\u5305\u542b\u5728\u865a\u6811\u4e2d\u3002\u5176\u6b21\uff0c\u4efb\u610f\u4e24\u4e2a\u5173\u952e\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e5f\u5e94\u8be5\u5305\u542b\u5728\u865a\u6811\u4e2d\uff1b\u56e0\u4e3a\u5728\u672c\u9898\u4e2d\uff0c\u5207\u65ad\u4e00\u6761\u8fb9\u53ef\u4ee5\u540c\u65f6\u5207\u65ad\u6839\u8282\u70b9\u4e0e\u591a\u4e2a\u5173\u952e\u70b9\u95f4\u7684\u8def\u5f84\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b58\u5728\u4e3a\u52a8\u6001\u89c4\u5212\u63d0\u4f9b\u4e86\u8fd9\u79cd\u72b6\u6001\u8f6c\u79fb\u3002\u6700\u540e\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 $1$ \u53f7\u8282\u70b9\uff08\u5373\u6839\u8282\u70b9\uff09\u4e5f\u52a0\u5165\u5230\u865a\u6811\u4e2d\u3002\n\n\u6784\u9020\u865a\u6811\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u7528**\u6808**\u5efa\u6811\u7684\u7b97\u6cd5\u6d41\u7a0b\u3002\n\n\u4ee4 $1$ \u53f7\u8282\u70b9\u4e3a\u865a\u6811\u7684\u6839\u3002\n\n\u5c06\u6240\u6709\u5173\u952e\u70b9\u6309\u7167\u5176\u5728\u539f\u6811\u4e2d\u7684 dfs \u5e8f\u5347\u5e8f\u6392\u5e8f\u3002\u5047\u8bbe\u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u5173\u952e\u70b9\u4e3a $u$ \u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u4f7f\u5f97\u6808\u5e95\u5230\u6808\u9876\u7684\u5143\u7d20\u4f9d\u6b21\u4e3a\u865a\u6811\u4e0a**\u4ece\u6839\u8282\u70b9\u5230\u8282\u70b9 $u$ \u7684\u4e00\u6761\u94fe**\u3002\n\n\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u7ef4\u62a4\u4e00\u4e2a\u6808\u5462\uff1f\n\n![1.jpg](https://i.loli.net/2019/08/30/qTkLb1Wca4yvwJ9.jpg)\n\n\u5982\u56fe\uff1a\u5728\u5904\u7406\u5b8c $3$ \u53f7\u5173\u952e\u70b9\u540e\uff0c\u865a\u6811\u4e2d\u53ea\u6709 $1$ \u3001 $3$ \u4e24\u4e2a\u8282\u70b9\uff0c\u6808\u4e2d\u7684\u5143\u7d20\u4f9d\u6b21\u4e3a $1$ \u3001 $3$ \u3002\u4f46\u662f\u8fd9\u6761\u94fe\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u5904\u7406 $4$ \u53f7\u5173\u952e\u70b9\u65f6\uff0c\u8fd8\u9700\u8981\u5c06 $2$ \u53f7\u8282\u70b9\u6dfb\u52a0\u5230\u865a\u6811\u4e2d\u3002\u5229\u7528\u6808\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u4e00\u6761\u865a\u6811\u4e0a\u7684\u94fe\uff0c\u5e76\u5728\u5fc5\u8981\u7684\u65f6\u5019\u6dfb\u52a0\u8282\u70b9\u3002\n\n\u56de\u5230\u521a\u624d\u7684\u53d9\u8ff0\uff0c\u5f53\u524d\u6b63\u5728\u5904\u7406\u5173\u952e\u70b9 $u$ \u3002\u6839\u636e\u6808\u7684\u5b9a\u4e49\uff0c\u4e0a\u4e00\u4e2a\u5904\u7406\u7684\u5173\u952e\u70b9\u4e00\u5b9a\u4e3a $stack.top()$ \u3002\n\n\u7531\u4e8e\u8fdb\u884c\u8fc7\u6392\u5e8f\uff0c\u5373\u8282\u70b9 $u$  \u7684 dfs \u5e8f\u5927\u4e8e\u4e0a\u4e00\u4e2a\u5173\u952e\u70b9\u7684 dfs \u5e8f\uff0c\u56e0\u6b64\u8282\u70b9 $u$ \u8981\u4e48\u662f\u4e0a\u4e00\u4e2a\u5173\u952e\u70b9\u7684\u540e\u4ee3\uff0c\u8981\u4e48\u4e0e\u5176\u6ca1\u6709\u7956\u5148-\u540e\u4ee3\u7684\u5173\u7cfb\u3002\n\n\u663e\u7136\uff0c\u5982\u679c\u8282\u70b9 $u$ \u662f $stack.top()$ \u7684\u540e\u4ee3\uff0c\u90a3\u4e48\u53ea\u9700\u5c06\u8282\u70b9 $u$ \u5165\u6808\u5373\u53ef\uff0c\u56e0\u4e3a $u$ \u5728\u865a\u6811\u4e2d\uff0c\u4e00\u5b9a\u662f\u4e0a\u4e00\u4e2a\u5173\u952e\u70b9\u7684\u513f\u5b50\u3002\n\n\u4f46\u662f\u5982\u679c\u8282\u70b9 $u$ \u4e0e $stack.top()$ \u6ca1\u6709\u7956\u5148-\u540e\u4ee3\u7684\u5173\u7cfb\uff0c\u90a3\u4e48\u6b64\u65f6\u7684\u8ba8\u8bba\u5c06\u6bd4\u8f83\u590d\u6742\u3002\n\n\u53ef\u4ee5\u7ed3\u5408\u4e0a\u56fe\u89c2\u5bdf\uff0c\u5047\u8bbe\u5f53\u524d\u6b63\u5728\u5904\u7406 $4$ \u53f7\u5173\u952e\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u56e0\u4e3a $stack.top()$ \u4e00\u5b9a\u4e0d\u5728\u6839\u8282\u70b9\u5230\u8282\u70b9 $u$ \u7684\u94fe\u4e0a\u3002\u6b64\u65f6\uff0c\u6808\u4e2d\u5269\u4f59\u7684\u5143\u7d20\u53ea\u6709 $1$ \u3002\u7136\u800c\uff0c $3$ \u4e0e $4$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 $2$ \u53f7\u8282\u70b9\u8fd8\u4e0d\u5728\u6808\u4e2d\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u628a $2$ \u53f7\u8282\u70b9\u5165\u6808\uff0c\u5e76\u5c06**\u521a\u521a\u5f39\u51fa\u7684\u8282\u70b9\u4e0e\u65b0\u7684\u6808\u9876**\u5728\u865a\u6811\u4e2d\u8fde\u8fb9\u3002\u5904\u7406\u7ed3\u675f\u540e\uff0c\u5c06 $4$ \u5165\u6808\u3002\n\n\u63a5\u4e0b\u6765\u5904\u7406 $5$ \u53f7\u5173\u952e\u70b9\uff0c\u6b64\u65f6\u6808\u4e2d\u7684\u5143\u7d20\u4f9d\u6b21\u4e3a $1$ \u3001$2$ \u3001$4$ \u3002\u9996\u5148\u5c06\u6808\u9876\u5f39\u51fa\uff0c\u4f46\u7531\u4e8e\u6211\u4eec\u63a5\u4e0b\u6765\u9700\u8981\u7ef4\u62a4\u7684\u94fe\u4e3a $1->5$ \uff0c\u6808\u4e2d\u4ecd\u7136\u6709\u8282\u70b9 $2$ \uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06 $2$ \u548c\u521a\u521a\u5f39\u51fa\u7684\u8282\u70b9 $4$ \u8fde\u8fb9\uff0c\u5e76\u4e14\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002\u5c06\u65b0\u7684\u6808\u9876 $2$ \u5f39\u51fa\u540e\uff0c\u6808\u4e2d\u53ea\u5269\u4e0b\u8282\u70b9 $1$ \u3002\u8fd9\u65f6\u53d1\u73b0 $1$ \u53f7\u8282\u70b9\u6070\u597d\u4e3a $5$ \u4e0e\u4e0a\u4e00\u6b21\u5904\u7406\u7684\u5173\u952e\u70b9 $4$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u56e0\u6b64\u5c06 $1$ \u4e0e $2$ \u8fde\u8fb9\u540e\uff0c\u5f39\u6808\u53ef\u4ee5\u4e2d\u6b62\u4e86\u3002\u5904\u7406\u7ed3\u675f\u540e\uff0c\u5c06 $5$ \u5165\u6808\u3002\n\n\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u5b8c\u4e86\u6240\u6709\u5173\u952e\u70b9\uff0c\u4f46\u662f\u6808\u4e2d\u7684\u5143\u7d20\u95f4\u8fd8\u6ca1\u6709\u8fde\u8fb9\u3002\u5c06\u6808\u4e2d\u7684\u8282\u70b9\u4f9d\u6b21\u8fde\u8fb9\u540e\uff0c\u865a\u6811\u7684\u6784\u5efa\u5c31\u5b8c\u6210\u4e86\u3002\n\n\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n\u5c06\u5173\u952e\u70b9\u6309\u7167 dfs \u5e8f\u6392\u5e8f\nstack.push(1)\nfor u = 1 ~ k: // \u5047\u8bbe\u5f53\u524d\u6b63\u5728\u5904\u7406\u8282\u70b9 u\n\tlca = Lca(u, stack.top())\n\twhile stack.top() != lca:\n\t\ttmp = stack.top()\n\t\tstack.pop()\n\t\tif dfn[stack.top()] < dfn[lca]\n\t\t\tstack.push(lca)\n\t\tAddEdge(stack.top(), tmp)\n\tstack.push(u)\nwhile stack.top() != 1:\n\ttmp = stack.top()\n\tstack.pop()\n\tAddEdge(stack.top(), tmp)\n```\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u5bf9\u4e8e\u672c\u9898\uff0c\u865a\u6811\u4e0a\u7684\u8fb9\u6743\u4e00\u5b9a\u5bf9\u5e94\u539f\u6811\u4e0a\u4e24\u8282\u70b9\u4e4b\u95f4\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002\u8bc1\u660e\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nstruct Edge {int v;ll w;Edge(int a, ll b) {v = a, w = b;}};\nstruct Key {int u, dfn;}keys[250005];\nint keys_cnt;\ninline bool cmp(Key a, Key b) {\n    return a.dfn < b.dfn;\n}\nint N, M;\nvector<Edge> G[250005], VT[250005];\nint f[250005][19], g[250005][19], dep[250005];\nll d[250005];\nbool h[250005];\nint dfn[250005], dfn_idx;\nint lg[250005];\n\nvoid dfs(int u, int fa, ll w) {\n    dep[u] = dep[fa] + 1;\n    dfn[u] = ++dfn_idx;\n    f[u][0] = fa, g[u][0] = w;\n    for (int i = 1; i <= 18; ++i)\n        f[u][i] = f[f[u][i - 1]][i - 1],\n        g[u][i] = min(g[f[u][i - 1]][i - 1], g[u][i - 1]);\n    for (vector<Edge>::iterator it = G[u].begin(); it != G[u].end(); it++) {\n        int v = it -> v;\n        ll w = it -> w;\n        if (v == fa) continue;\n        dfs(v, u, w);\n    }\n}\n\nvoid dp(int u) {\n    for (vector<Edge>::iterator it = VT[u].begin(); it != VT[u].end(); it++) {\n        int v = it -> v;\n        ll w = it -> w;\n        dp(v);\n        if (h[v]) d[u] += w;\n        else d[u] += min(w, d[v]);\n        h[v] = 0; d[v] = 0;\n    }\n    VT[u].clear();\n}\n\ninline int Lca(int u, int v) {\n    if (dep[u] < dep[v]) swap(u, v);\n    while (dep[u] > dep[v]) {\n        u = f[u][lg[dep[u] - dep[v]]];\n    }\n    if (u == v) return u;\n    for (int i = lg[dep[u]]; i >= 0; --i)\n        if (f[u][i] != f[v][i])\n            u = f[u][i], v = f[v][i];\n    return f[u][0];\n}\n\ninline int query(int u, int v) {\n    int ans = 0x3f3f3f3f;\n    while (dep[u] > dep[v]) {\n        ans = min(ans, g[u][lg[dep[u] - dep[v]]]);\n        u = f[u][lg[dep[u] - dep[v]]];\n    }\n    return ans;\n}\n\ninline void AddEdge(int u, int v) {\n    int w = query(v, u);\n    VT[u].push_back(Edge(v, w));\n}\n\nint main() {\n    for (register int i = 2; i <= 250000; ++i)\n        lg[i] = lg[i >> 1] + 1;\n    memset(g, 0x3f, sizeof(g));\n    scanf(\"%d\", &N);\n    for (register int i = 1; i < N; ++i) {\n        int u, v;\n        ll w;\n        scanf(\"%d%d%lld\", &u, &v, &w);\n        G[u].push_back(Edge(v, w));\n        G[v].push_back(Edge(u, w));\n    }\n    dfs(1, 0, 0);\n    scanf(\"%d\", &M);\n    while (M--) {\n        int k;\n        keys_cnt = 0;\n        scanf(\"%d\", &k);\n        for (register int i = 1; i <= k; ++i) {\n            scanf(\"%d\", &keys[++keys_cnt].u);\n            h[keys[keys_cnt].u] = 1;\n            keys[keys_cnt].dfn = dfn[keys[keys_cnt].u];\n        }\n        stack<int> s;\n        sort(keys + 1, keys + keys_cnt + 1);\n        s.push(1);\n        for (register int i = 1; i <= keys_cnt; ++i) {\n            int u = keys[i].u;\n            int lca = Lca(u, s.top());\n            while (s.top() != lca) {\n                int tmp = s.top(); s.pop();\n                if (dfn[s.top()] < dfn[lca])\n                    s.push(lca);\n                AddEdge(s.top(), tmp);\n            }\n            s.push(u);\n        }\n        while (s.top() != 1) {\n            int tmp = s.top(); s.pop();\n            AddEdge(s.top(), tmp);\n        }\n        dp(1);\n        printf(\"%lld\\n\", d[1]);\n        d[1] = 0;\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1567177238,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684dp\u601d\u60f3\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u60f3\u7684\uff0c\u5173\u952e\u662f\u5982\u4f55\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8fd9\u65f6\u5c31\u7528\u5230\u4e86\u865a\u6811\u7684\u6280\u5de7\u3002\n\n## 1.\u865a\u6811\u662f\u4ec0\u4e48\uff1f\uff08\u865a\u6811\u7684\u6027\u8d28\uff09\n\n\u4e0d\u59a8\u8bbe\u73b0\u5728\u8be2\u95ee\u7ed9\u51fa\u4e86$k$\u4e2a\u70b9\uff0c\u6211\u4eec\u547d\u540d\u8fd9\u4e9b\u8282\u70b9\u4e3a\u5173\u952e\u8282\u70b9\u3002\n\n\u90a3\u4e48\u5728\u6211\u7684\u5efa\u8fb9\u65b9\u5f0f\u4e2d\uff0c\u865a\u6811\u5c31\u662f\uff1a\n\n1. \u4ec5\u5305\u62ec\u8fd9\u4e9b\u5173\u952e\u8282\u70b9\u3001\u5b83\u4eec\u4e24\u4e24\u4e4b\u95f4\u7684$lca$\u4ee5\u53ca\u539f\u6811\u7684\u6839\u7684\u4e00\u68f5\u6709\u5411\u6811\u3002\n2. \u4f46\u4ecd\u7136\u4fdd\u6301\u539f\u6811\u7684\u5f62\u6001\u548c\u7956\u5148\u5173\u7cfb\u3002\u5373\u82e5\u5173\u952e\u8282\u70b9$a$\u5728\u539f\u6811\u4e2d\u662f\u5173\u952e\u8282\u70b9$b$\u7684\u7956\u5148\uff0c\u5219\u5728\u865a\u6811\u4e2d\uff0c$a$\u4ecd\u662f$b$\u7684\u7956\u5148\u3002\uff08\u8fd9\u91cc\u7684\u7956\u5148\u5305\u62ec\u7236\u4eb2\uff09\n\n\u6545\u53ea\u8981\u6211\u4eec\u6309\u8fd9\u4e2a\u65b9\u6cd5\u5efa\u51fa\u865a\u6811\uff0c\u5c31\u4f1a\u6709\uff1a$\\text{\u865a\u6811\u7684\u70b9\u6570}<=2\\times k$\u3002\u4e0d\u592a\u4e25\u8c28\u7684\u8bc1\u660e\uff1a\u6211\u4eec\u5c06\u5176\u6309$dfn$\u6392\u5e8f\uff0c\u90a3\u4e48\u76f8\u90bb\u70b9\u7684$lca$\u4e00\u5b9a\u6bd4\u8f83\u8fdc\u70b9\u7684$lca$\u6df1\uff0c\u4e5f\u5c31\u662f\u66f4\u63a5\u8fd1\u90a3\u4e24\u4e2a\u70b9\u3002\u90a3\u4e48\u8fd9\u6837\u6700\u591a\u4e5f\u5c31\u4f1a\u65b0\u52a0\u5165\u4e00\u4e2a$lca$,\u6240\u4ee5\u603b\u5171\u6700\u591a\u5c31$2\\times k$\u4e2a\u70b9\u3002\n\n## 2.\u600e\u4e48\u5efa\u865a\u6811\uff1f\n\n\u6211\u4eec\u5148\u5c06\u539f\u6811\u7684$dfn$\u9884\u5904\u7406\u51fa\u6765\uff0c\u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u7684\u5173\u952e\u8282\u70b9\u6309$dfn$\u5e8f\u6392\u5e8f\u3002\u6392\u5b8c\u5e8f\u540e\u6309\u987a\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\uff08\u63a5\u4e0b\u6765\u8bb2\u7684$insert()$\u51fd\u6570\uff09\u3002\n\n\u540c\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a$stack$\uff0c\u521d\u59cb\u53ea\u6709\u4e00\u4e2a\u70b9$root$\uff08$1$\u53f7\u8282\u70b9\uff09\uff0c$top=1$\u3002\n\n\u8fd9\u4e2a\u6808\u7528\u6765\u7ef4\u62a4\u4ec0\u4e48\u5462\uff1f\u4e0d\u59a8\u8bbe\u6211\u4eec\u73b0\u5728$insert(u)$\u3002\u90a3\u4e48\u6211\u4eec\u628a$insert(u)$\u51fd\u6570\u6267\u884c\u5b8c\u540e\uff0c\u9700\u8981\u4fdd\u8bc1\u8fd9\u4e2a\u6808\u7684\u6808\u9876\u662f$u$\uff0c\u7136\u540e\u7ef4\u62a4\u7684\u662f**\u539f\u6811\u4e2d**\u4ece\u6839\u5230\u6808\u9876\uff08$u$\uff09\u8def\u5f84\u4e0a\u9700\u8981\u52a0\u5165\u865a\u6811\u7684\u8282\u70b9\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a**\u865a\u6811\u4e2d**\u4ece\u6839\u5230\u6808\u9876\uff08u\uff09\u7684\u8def\u5f84\u4e0a\u7684\u70b9\uff0c\u6240\u4ee5\u82e5\u628a\u8fd9\u4e2a\u6808\u4e2d\u7684\u70b9\u4f9d\u6b21\u4e24\u4e24\u8fde\u8d77\u8fb9\u6765\uff0c\u4fbf\u662f\u4e00\u6761\u94fe\uff0c\u4f46\u662f\u73b0\u5728\u8fd8\u672a\u8fde\u8fb9\u3002\u800c\u4e14\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u9664\u4e86\u6808\u4e2d\u7684\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4e4b\u5916\uff0c\u5df2\u7ecf$insert$\u7684\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u90fd\u5df2\u8fde\u597d\u4e86\u3002\n\n\u4e0d\u59a8\u8bbe\u6211\u4eec\u73b0\u5728\u8981$insert(u)$\uff0c\u90a3\u4e48\u6211\u4eec\u5148\u6c42\u51fa$lca(u,st[top])$\uff0c\u7136\u540e\u6211\u4eec\u8bbe\u539f\u6765\u7684\u6808\u957f\u4ec0\u4e48\u6837\uff1a\n$stack=\\{1,...,st[k-1],st[k],...,st[top]\\}$\u3002\n\n\u7136\u540e\u6211\u4eec\u627e\u5230$lca$\u5728\u8fd9\u6761\u94fe\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5373$deep[st[k-1]]<deep[lca]\\leqslant deep[st[k]]$\uff0c\u90a3\u4e48$st[k]$\u3001$st[k+1]$...$st[top]$\u5fc5\u7136\u662f$lca$\u7684\u5b50/\u5b59\uff08\u56e0\u4e3a$lca$\u662f$st[top]$\u548c$u$\u7684\u7956\u5148\uff09\u3002\n\n\u90a3\u4e48\u6211\u4eec\u8003\u8651\u65b0\u5efa\u51fa\u6765\u7684\u6808\u957f\u4ec0\u4e48\u6837\uff1a$stack=\\{1,...,st[k-1],lca,u\\}$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981$lca$\u3001$st[k]$\u3001$st[k+1]$\u3001\u2026\u3001$st[top]$\u8fde\u8d77\u6765\u5e76\u5f39\u51fa\u6808\u3002\n\n\u7136\u540e\u518d\u5c06$lca$\u548c$u$\u5165\u6808\u3002\n\n\u6700\u540e$insert$\u5b8c\u6240\u6709\u70b9\u540e\uff0c\u6211\u4eec\u5c06\u6808\u4e2d\u5269\u4e0b\u7684\u70b9\u8fde\u8d77\u6765\u5e76\u6e05\u7a7a\u6808\u3002\n\n\u4e3a\u4ec0\u4e48\u8981\u6309$dfn$\u6392\u5e8f\uff1f\u56e0\u4e3a\u6309$dfn$\u6392\u5e8f\u540e\uff0c\u5bf9\u4e8e\u76f8\u90bb\u7684\u4e24\u4e2a\u5173\u952e\u8282\u70b9$a$\u3001$b$\uff0c$lca(a,b)$\u4e00\u5b9a\u6bd4$a$\u548c\u5176\u5b83\u70b9\u7684$lca$\u6df1\u5ea6\u6df1\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u5efa\u7684\u70b9\u548c\u8fb9\u4e0d\u91cd\u4e0d\u6f0f\u3002\n\n\u7136\u540e\u770b\u4ee3\u7801\uff1a\n\n```cpp\nvoid insert(int u)\n{\n    if(top==1)//\u7279\u5224top=1\n    {\n        if(st[top]!=u)st[++top]=u;//\u7279\u5224u=1\n        return;\n    }\n    int lca=LCA(u,st[top]);\n    for(;top>1&&dfn[st[top-1]]>=dfn[lca];top--)//\u5efa\u8fb9\uff0c\u56e0\u4e3astack\u4e2d\u5b58\u7684\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5dfn[st[top-1]]>=dfn[lca]\u5176\u5b9e\u548cdeep[st[top-1]]>=deep[lca]\u662f\u7b49\u4ef7\u7684\n        add_edge(st[top-1],st[top]);\n    //\u505a\u5b8c\u4e0a\u9762\u8fd9\u6bb5\u5faa\u73af\u540e\uff0c\u80fd\u4fdd\u8bc1dfn[st[top-1]]<dfn[lca]<=dfn[st[top]]\n    if(st[top]!=lca)//\u5224\u65ad\u4e00\u4e0b\uff0c\u9632\u6b62\u81ea\u73af\n    {\n        add_edge(lca,st[top]);\n        st[top]=lca;\n    }\n    st[++top]=u;\n}\n```\n\n\u4e0d\u7406\u89e3\uff1f\u6765\u770b\u56fe\u6a21\u62df\u4e00\u4e0b\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2019113011293844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n\u4e0d\u59a8\u8bbe\u73b0\u5728$k=5$\uff0c\u5173\u952e\u8282\u70b9\u4e3a$4$\u3001$7$\u3001$9$\u3001$10$\u3001$13$\uff08\u5df2\u6807\u7ea2\uff09\uff0c$stack=\\{1\\}$\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u5148$insert(4)$\uff0c\u53d1\u73b0$top=1$\uff0c\u4e8e\u662f$stack=\\{1,4\\}$\u3002\n\n\u7136\u540e$insert(7)$\uff0c\u53d1\u73b0$lca(7,4)=1$\uff0c\u4e8e\u662f\u5efa\u8fb9$(1,4)$\uff0c$stack=\\{1,7\\}$\u3002\n\n\u7136\u540e$insert(9)$\uff0c\u53d1\u73b0$lca(7,9)=6$\uff0c\u4e8e\u662f\u5efa\u8fb9$(6,7)$\uff0c$stack=\\{1,6,9\\}$\u3002\n\n\u7136\u540e$insert(10)$\uff0c\u53d1\u73b0$lca(9,10)=9$\uff0c\u4e8e\u662f$stack=\\{1,6,9,10\\}$\u3002\n\n\u7136\u540e$insert(13)$\uff0c\u53d1\u73b0$lca(10,13)=8$\uff0c\u4e8e\u662f\u5efa\u8fb9$(9,10)$\u3001$(8,9)$\uff0c$stack=\\{1,6,8,13\\}$\u3002\n\n\u6700\u540e\u5c06\u6808\u6e05\u7a7a\uff1a\u5efa\u8fb9$(8,13)$\u3001$(6,8)$\u3001$(1,6)$\uff0c$stack=\\{\\}$\u3002\n\n\u6240\u4ee5\u5efa\u51fa\u6765\u7684\u865a\u6811\u957f\u8fd9\u4e2a\u6837\uff1a\n\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20191130113626729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2V6X2xjdw==,size_16,color_FFFFFF,t_70)\n\n~~\u73b0\u5728\u5e94\u8be5\u7406\u89e3\u4e86\u5427~~\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u70b9\u5c0f\u4f18\u5316\uff1a\u82e5\u5173\u952e\u8282\u70b9$a$\u662f\u5173\u952e\u8282\u70b9$b$\u7684\u7956\u5148\uff0c\u90a3\u4e48\u663e\u7136\u53ea\u8981\u8ba9$a$\u548c\u6839\u65ad\u6389\uff0c$b$\u5c31\u7edd\u5bf9\u4f1a\u548c\u6839\u65ad\u6389\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565$b$\u3002\n\n## 3.\u600e\u4e48dp\uff1f\n\n\u4e0d\u59a8\u8bbe$minn[u]$\u4e3a\u539f\u6811\u4e2d\u4ece\u6839\u8282\u70b9\u5230$u$\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5c0f\u503c\uff0c$dp[u]$\u4e3a\u628a\u4ee5$u$\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u5173\u952e\u8282\u70b9\u90fd\u4e0e\u6839\u8282\u70b9\u5207\u65ad\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\n\n\u90a3\u4e48\u8981\u4e48\u662f\u5728$u$\u7684\u5b50\u6811\u4e2d\u5c31\u5207\u65ad\uff0c\u6216\u8005\u81ea\u5df1\u5207\u65ad\uff1a\n\n$$dp[u]=min(\\sum_{v=son[u]}dp[v],minn[u])$$\n\n\u90a3\u4e48\u76f4\u63a5\u6811\u5f62$dp$\u5c31\u597d\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n \n#define LN 18\n#define N 250010\n#define ll long long\n#define INF 0x7fffffffffffffff\n \nusing namespace std;\n \nstruct Tree\n{\n    int cnt,head[N],nxt[N<<1],to[N<<1],w[N<<1];\n    void init()\n    {\n        cnt=0;\n        memset(head,0,sizeof(head));\n    }\n    void adde(int u,int v,int c=0)\n    {\n        to[++cnt]=v;\n        w[cnt]=c;\n        nxt[cnt]=head[u];\n        head[u]=cnt;\n    }\n}e1,e2;\n \nint n,m,idx;\nint top,st[N];\nint a[N];\nint d[N],dfn[N],fa[N][LN];\nll minn[N],dp[N];\n \nvoid dfs(int u)\n{\n    dfn[u]=++idx;\n    for(int i=1;i<=17;i++)\n        fa[u][i]=fa[fa[u][i-1]][i-1];\n    for(int i=e1.head[u];i;i=e1.nxt[i])\n    {\n        int v=e1.to[i];\n        if(v!=fa[u][0])\n        {\n            fa[v][0]=u;\n            d[v]=d[u]+1;\n            minn[v]=min(minn[u],(ll)e1.w[i]);\n            dfs(v);\n        }\n    }\n}\n \nint LCA(int a,int b)\n{\n    if(d[a]<d[b])swap(a,b);\n    for(int i=17;i>=0;i--)\n        if(d[fa[a][i]]>=d[b])\n            a=fa[a][i];\n    if(a==b)\n        return a;\n    for(int i=17;i>=0;i--)\n        if(fa[a][i]!=fa[b][i])\n            a=fa[a][i],b=fa[b][i];\n    return fa[a][0];\n}\n \nbool cmp(int a,int b)\n{\n    return dfn[a]<dfn[b];\n}\n \nvoid insert(int u)\n{\n    if(top==1)\n    {\n        if(u!=1)st[++top]=u;\n        return;\n    }\n    int lca=LCA(u,st[top]);\n    if(lca==st[top])\n        return;\n    for(;top>1&&dfn[st[top-1]]>=dfn[lca];top--)\n        e2.adde(st[top-1],st[top]);\n    if(st[top]!=lca)\n    {\n        e2.adde(lca,st[top]);\n        st[top]=lca;\n    }\n    st[++top]=u;\n}\n \nvoid dfs2(int u)\n{\n    if(!e2.head[u])\n    {\n        dp[u]=minn[u];\n        return;\n    }\n    dp[u]=0ll;\n    for(int i=e2.head[u];i;i=e2.nxt[i])\n    {\n        int v=e2.to[i];\n        dfs2(v);\n        dp[u]+=dp[v];\n    }\n    dp[u]=min(dp[u],minn[u]);\n    e2.head[u]=0;\n}\n \nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<n;i++)\n    {\n        int u,v,w;\n        scanf(\"%d%d%d\",&u,&v,&w);\n        e1.adde(u,v,w),e1.adde(v,u,w);\n    }\n    d[1]=1,minn[1]=INF;\n    dfs(1);\n    scanf(\"%d\",&m);\n    while(m--)\n    {\n        int k;\n        scanf(\"%d\",&k);\n        for(int i=1;i<=k;i++)\n            scanf(\"%d\",&a[i]);\n        sort(a+1,a+k+1,cmp);\n        e2.cnt=0;\n        st[top=1]=1;\n        for(int i=1;i<=k;i++)\n            insert(a[i]);\n        for(;top>1;top--)\n            e2.adde(st[top-1],st[top]);\n        dfs2(1);\n        printf(\"%lld\\n\",dp[1]);\n    }\n    return 0;\n}\n```",
        "postTime": 1576898838,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\u65b0\u5b66\u865a\u6811\u3002\n\n\u5148\u770b\u770b\u5bf9\u5355\u4e2a\u8be2\u95ee\u600e\u4e48\u505a\u3002\n\n\u6709\u4e2a\u5f88\u5de7\u5999\u7684\u505a\u6cd5\uff0c\u9884\u5904\u7406\u51fa\u6839\u5230\u6bcf\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u7684min\u8fb9\u6743w[i]\u3002\n\ndp[i]\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u7b54\u6848\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5:1 w[i] 2 dp[\u513f\u5b50]\u7684\u548c\n\n\uff08\u5f53\u7136\uff0c\u8fd8\u8981\u8003\u8651i\u662f\u4e0d\u662f\u9009\u4e2d\u70b9\u7b49\uff0c\u81ea\u5df1\u601d\u8003\u5427\uff09\n\n\u8fd9\u9898\u8be2\u95ee\u5f88\u591a\uff0c\u663e\u7136\u6bcf\u6b21\u8be2\u95ee\u6211\u4eec\u5fc5\u987b\u7528\u8ddfk\u76f8\u5173\u7684\u65f6\u95f4\u89e3\u51b3\uff0c\u800c\u4e0d\u80fd\u8ddfn\u76f8\u5173\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8981\u5efa\u4e00\u4e2a\u865a\u6811\uff0c\u53ea\u5305\u542b\u90a3k\u4e2a\u70b9\u548c\u4ed6\u4eec\u7684lca\u3002\u76f4\u63a5\u5728\u8fd9\u68f5\u6811\u4e0adp\u5373\u53ef\u3002\n\n\u600e\u4e48\u5efa\u865a\u6811?\n\n\u9996\u5148\u628a\u70b9\u6309dfs\u5e8f\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u63d2\u5165\u3002\n\n\u4e4b\u540e\u4e00\u76f4\u7528\u6808\u7ef4\u62a4\u6700\u540e\u7684\u4e00\u6761\u6811\u94fe\uff0c\u6bcf\u52a0\u5165\u4e00\u4e2a\u70b9now\uff0c\u6c42\u51fanow\u548c\u6700\u540e\u4e00\u4e2a\u70b9pre\u7684lca\u3002\n\n\u5982\u679clca\u5c31\u662fpre\uff0c\u90a3\u4e48\u5c06now\u5165\u6808\uff0c\u9000\u51fa\u3002\n\n\u5426\u5219lca\u5c31\u662fpre\u7684\u7238\u7238\uff0c\u90a3\u4e48\u5982\u679clca\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u70b9fx\u7684\u513f\u5b50\uff0c\u5c06pre\u51fa\u6808\uff0clca\u548cnow\u5165\u6808\uff0c\u9000\u51fa\u3002\n\n\u5426\u5219\u5c06pre\u51fa\u6808\uff0clca\u4f5c\u4e3apre\u9012\u5f52\u5904\u7406\u3002\n\n(\u5728\u6b64\u8fc7\u7a0b\u4e2d\u8981\u5efa\u8fb9\uff0c\u81ea\u5df1\u601d\u8003)\n\n\uff08\u6b64\u4ee3\u7801\u5728bzoj\u4e0a\u62ff\u4e86rank1,\u5e76\u8d85\u8fc7rank2 500ms\uff09\n\nupd:\u4eca\u5929\u7a81\u7136\u60f3\u5230\uff0c\u5982\u679c\u79bb\u7ebf\u8bfb\u8fdb\u6765\u6bcf\u7ec4\u8be2\u95ee\u7684\u70b9\uff0c\u7531\u4e8edfn\u5e8f\u7684\u503c\u57df\u662f1-n\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u70b9\u6309dfs\u5e8f\u5148\u63d2\u5230\u503c\u57df\u7684\u6570\u7ec4\u91cc\uff0c\u8bb0\u5f55\u6240\u5c5e\u8be2\u95ee\u7f16\u53f7\u3002\n\n\u4e4b\u540e\u518d\u904d\u5386\u4e00\u904d\u628a\u4ed6\u4eec\u63d2\u56de\u8be2\u95ee\u91cc\u3002\u8fd9\u6837\u6392\u5e8f\u65f6\u95f4\u5c31\u4eceO(NlogN)\u53d8\u6210O(N)\u4e86\u3002\n\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u79bb\u7ebf\u7528tarjan\u5c06\u6c42lca\u7684\u65f6\u95f4\u4f18\u5316\u5230O(N)\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5O(n)\u5efa\u865a\u6811\u4e86\u3002\u8fd9\u9898\u4e5f\u5c31\u53ef\u4ee5O(N)\u4e86\u3002\n\n\u7136\u800c\u6211\u52a0\u4e86\u7b2c\u4e00\u4e2a\u6392\u5e8f\u7684\u4f18\u5316\u540e\u53cd\u800c\u53d8\u6162\u4e86\u3002\u3002\u5e94\u8be5\u662f\u6570\u636e\u95ee\u9898\u5427\u3002\u3002(\u800c\u4e14\u6211\u8fd8\u53d1\u73b0\u6211\u7684rank1\u6ca1\u4e86)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ch_top 20000000\nchar ch[ch_top],*now_r=ch;\nvoid read(int &x)\n{\n    while (*now_r<48) ++now_r;\n    for (x=*now_r-48;*++now_r>=48;)\n     x=(x<<1)+(x<<3)+*now_r-48;\n}\n\n#define ll long long \nll min(ll &x,ll &y) \n{\n return x<y?x:y;\n}\nvoid chmin(int &x,int y)\n{\n    if (x>y) x=y;\n}\n#define N 250100\nint n,x,y,w;\nint t[N];\nstruct edge\n{\n    int to,w,next;\n}l[N<<1];int e;\nvoid add_e(int x,int y,int w) \n{\n  l[++e]={y,w,t[x]};t[x]=e;\n}\nvoid _add(int x,int y) \n{\n l[y].next=t[x];t[x]=y;\n}\n\nstruct tree\n{\n    int f,deep,sz,top,c;\n    int dfn,w;//dfs\u5e8f\uff1b\u5230\u6839\u7684min\u8fb9\u6743 \n}T[N];\n\nvoid dfs(int x,int deep,int f,int w)\n{\n    T[x].sz=1;T[x].deep=deep;T[x].f=f;T[x].w=w;\n    ++deep;\n    int i,y,c=0;\n    for (i=t[x];i;i=l[i].next)\n    if ((y=l[i].to)!=f)\n    {\n        dfs(y,deep,x,min(w,l[i].w));\n        T[x].sz+=T[y].sz;\n        if (T[y].sz>T[c].sz) c=y;\n    }\n    T[x].c=c;\n}\n\nint i,j,len;\n\nint tot;\nvoid dfs2(int x,int top)\n{\n    T[x].dfn=++tot;\n    T[x].top=top;\n    int c=T[x].c;\n    if (!c) return;\n    dfs2(c,top);\n\n    int i,y;\n    for (i=t[x];i;i=l[i].next)\n    if ((y=l[i].to)!=T[x].f&&y!=c)\n     dfs2(y,y);\n}\n\nint q[N],k;\nbool dfn_xiao(int x,int y)\n{\n    return T[x].dfn<T[y].dfn;\n}\n\nint fx,fy;\nint get_lca(int x,int y)\n{\n    fx=T[x].top;fy=T[y].top;\n    while (fx!=fy)\n    if (T[fx].deep>T[fy].deep) {x=T[fx].f;fx=T[x].top;}\n    else {y=T[fy].f;fy=T[y].top;}\n    return T[x].deep<T[y].deep?x:y;\n}\n\nint st[N],top,pre,lca;\nint have[N],num;\nvoid push(int now)\n{\n    pre=st[top];\n    if (pre==1) {st[++top]=now;return;}\n\n    lca=get_lca(now,pre);if (lca==pre) return ;//\u526a\u679d\n    while (lca!=pre)\n    {\n        fx=st[--top];\n        if (T[fx].dfn<T[lca].dfn) \n        {\n         _add(lca,pre);\n         st[++top]=lca;\n         break;\n        }\n        _add(fx,pre);\n        pre=fx; \n    }\n    st[++top]=now;\n} \n\nll dp(int x)\n{\n    if (!t[x]) return T[x].w;\n\n    ll ans=0;\n    for (int i=t[x];i;i=l[i].next) \n     ans+=dp(i);\n    t[x]=0;\n\n    return min(ans,(ll)T[x].w);\n}\n\nint main()\n{ freopen(\"1.in\",\"r\",stdin);freopen(\"1.out\",\"w\",stdout);\n    fread(ch,1,ch_top,stdin);\n    int n;\n    read(n);\n    for (i=1;i<n;++i)\n    {\n        read(x);read(y);read(w);\n        add_e(x,y,w); add_e(y,x,w);\n    }\n\n    dfs(1,0,0,1<<30);\n    dfs2(1,1);\n\n    for (i=1;i<=n;++i) t[i]=0;\n    int m;ll ans;\n    read(m);\n    while (m--)\n    {\n        read(k);\n        for (i=1;i<=k;++i) read(q[i]);\n        sort(q+1,q+k+1,dfn_xiao);\n\n        st[top=1]=1;\n        for (i=1;i<=k;++i) \n         push(q[i]);\n\n        while (--top) _add(st[top],st[top+1]);\n\n        ans=0;\n        for (int i=t[1];i;i=l[i].next) \n          ans+=dp(i);\n        t[1]=0;\n        printf(\"%lld\\n\",ans);\n    }\n}\n```",
        "postTime": 1484813140,
        "uid": 9168,
        "name": "kczno1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "### \u8bf4\u5728\u524d\u9762\u7684\u8bdd\n\u5176\u5b9e\u8fd9\u9053\u9898\u4f5c\u4e3a\u865a\u6811\u7684\u5165\u95e8\u9898\u6709\u5f88\u591a\u5751\u70b9\uff0c\u4e3b\u8981\u662f\u7531\u4e8e\u8fd9\u9053\u9898\u7684dp\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u6027\u8d28\uff0c\u4f7f\u5f97\u8bb8\u591ajulao\u5728\u6b63\u5e38\u7684\u865a\u6811\u6784\u5efa\u8fc7\u7a0b\u4e4b\u5916\u5220\u6539\u4e86\u4e00\u4e9b\uff08\u4f3c\u4e4e\u662f\u5947\u602a\u7684\u4f18\u5316\uff1f\uff09\u50cf\u6211\u8fd9\u79cd\u6e23\u6e23\u5f53\u7136\u53ea\u4f1a\u628a\u865a\u6811\u5b8c\u6574\u5730\u5efa\u51fa\u6765\u518d\u66b4\u529bdp\u554a\uff0c\u8f7b\u8f7b\u677e\u677e\u5012\u6570rank1\u5462\u3002\n### \u4e3a\u4ec0\u4e48\u8981\u5efa\u865a\u6811\uff1f\n\u4f3c\u4e4e\u5927\u5bb6\u90fd\u77e5\u9053\u4e86\n### \u600e\u4e48\u5efa\u865a\u6811\uff1f\n#### \u539f\u7406\uff1a\u5229\u7528\u6808\u548c\u6811\u7684\u5173\u7cfb\uff0c\u7ed3\u5408dfs\u5e8f\u8fd8\u539f\u51fa\u4e00\u68f5\u6811\u6765\n#### \u5b9e\u73b0\uff1a\n##### 1. \u6e05\u7a7a\u56fe\n\n```cpp\nNew.clear();\n\u8fd9\u91ccNew\u662f\u865a\u6811\u6240\u5728\u7684\u56fe\u7ed3\u6784\u4f53\u7684\u540d\u5b57\uff0c\u6e05\u9664\u65f6\u4e0d\u80fd\u66b4\u529bmemset\uff0c\u5426\u5219\u590d\u6742\u5ea6\u4f1a\u9000\u5316\n```\n##### 2.\u8bfb\u5165&\u9884\u5904\u7406\n```cpp\nfor(int i=1;i<=K;++i) {\n    scanf(\"%d\",seq+i);\n    New.import[seq[i]]=true;\n    //\u6807\u8bb0\u54ea\u4e9b\u70b9\u771f\u6b63\u91cd\u8981\uff08\u662f\u9898\u76ee\u91cc\u8981\u5207\u65ad\u7684\u70b9\uff09\n}\n    sort(seq+1,seq+K+1,cmp);   //\u6309\u7167dfs\u5e8f\u6392\u5e8f\n    top=0;\u6e05\u7a7a\u6808\n    stk[++top]=1;   //\u56e0\u4e3a1\u53f7\u6839\u8282\u70b9\u80af\u5b9a\u8981\u63d2\u5165\uff0c\u6240\u4ee5\u9884\u5148\u63d2\u5165\n```\n##### 3.\u7528\u6808\u5efa\u51fa\u865a\u6811\n\u9884\u5148\u8bf4\u660e\uff1a\n\tG\u662f\u539f\u56fe\uff0c\u5728\u539f\u56feG\u4e0a\u6c42LCA\uff0cG.minval(u,v)\u8868\u793au\u5230v\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\u3002\n    \u56e0\u4e3a\u865a\u6811\u4e0a\u4e24\u70b9\u7684\u8fb9\u6743\u4e00\u5b9a\u662f\u539f\u56fe\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u503c\uff08\u5728\u8fd9\u9053\u9898\u76ee\u91cc\uff09\n```cpp\nfor(int i=1;i<=K;++i) {\n    int now=seq[i],f=G.lca(now,stk[top]);\n    /*\n    \u73b0\u5728dfs\u6808\u91cc\u9762\u5b58\u50a8\u4e86\u4e00\u6761dfs\u94fe\uff0c\n    \u4e0b\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u5ef6\u7eed\u4e86\u8fd9\u4e00\u6761\u94fe\uff0c\u4e5f\u6709\u53ef\u80fd\u8df3\u51fa\u8fd9\u6761\u94fe\u518d\u9020\u65b0\u94fe\uff0c\n    \u5bf9\u4e8e\u94fe\u4e0a\u70b9\u4e4b\u95f4\u8fb9\u7684\u8fde\u63a5\u8981\u7b49\u5230\u8df3\u51fa\u8fd9\u6761\u94fe\u65f6\u518d\u8fdb\u884c\uff0c\u4ee5\u9632\u51fa\u73b0\u4e0d\u8be5\u6709\u7684\u5206\u53c9\u3002\n    \u53e6\u6ce8\uff0c\u8fd9\u91cc\u52a0\u7684\u662f\u5355\u5411\u8fb9\uff0c\u6ce8\u610f\u52a0\u8fb9\u6309u->v\u987a\u5e8f\n    \u53e6\u5916\uff0c\u8fd9\u6837\u7684\u52a0\u8fb9\u8fc7\u7a0b\u8fd8\u6709\u758f\u6f0f\uff0c\u6240\u4ee5\u8981\u5bf9\u4e8e\u81ea\u73af\u3001\u548c\u96f6\u8282\u70b9\u6709\u5173\u7684\u8fb9\u8981\u7279\u5224\u6389\n    */\n    while(true) {\n        if(G.depth[f]>=G.depth[stk[top-1]]) {\n        //\u8fd9\u662f\u6700\u4e3a\u5173\u952e\u7684\u4e00\u4e2a\u5224\u65ad\uff0c\u4e5f\u5c31\u662f\u5f53\u4e00\u6761\u94fe\u8981\u201c\u62d0\u5f2f\u201d\u5230\u53e6\u4e00\u6761\u94fe\u4e0a\u7684\u64cd\u4f5c\n        //\u94fe\u4e0a\u63a5\u7eed\u7684\u662f\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff08\u62d0\u5f2f\u5230\u81ea\u5df1\uff09\n        //\u4e4b\u524d\u63d0\u5230\u7684\u52a0\u8fb9\u8fc7\u7a0b\u7684\u758f\u6f0f\u662f\u4e3a\u4e86\u7b80\u5316\u8fd9\u91cc\u7684\u4ee3\u7801\uff08\u4e0d\uff0c\u662f\u56e0\u4e3a\u6211\u83dc\uff09\n            New.addEdge(f,stk[top],G.minval(f,stk[top]));\n            //\u73b0\u5728\u6709\u8fd9\u6837\u7684\u60c5\u51b5\n            /*\n            \tstk[top-1]\n                 /\n                f\n               / \\\n              /  now\n              stk[top]\n            */\n            /*\n            \t\u90a3\u4e48\uff0c\u6211\u4eec\u8981\u5148\u5efa\u51faf->stk[top]\u7684\u90a3\u6761\u8fb9\uff0c\n                \u518d\u56de\u64a4\u5230stk[top-1]->f->now\u7684\u90a3\u6761\u94fe\u4e0a\n                \u6ce8\u610f\u53ef\u80fd\u6709\u4ee5\u4e0b\u60c5\u51b5\n            \t\n                f==stk[top-1]\n               / \\\n              /  now\n              stk[top]\n              \t\u6240\u4ee5\u8981\u7279\u5224\n            */\n            --top;\n            if(stk[top]!=f) stk[++top]=f;\n            break;\n    \t}\n    New.addEdge(stk[top-1],stk[top],G.minval(stk[top-1],stk[top]));--top;\n    /*\n    \u8fd9\u4e00\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u662f\u56de\u9000\uff0c\n    \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0a\u9762\u7684\u5224\u65ad\u4e0d\u6210\u7acb\uff0c\u65b0\u52a0\u5165\u7684\u5143\u7d20\u4e0d\u80fd\u76f4\u63a5\u52a0\u5728dfs\u94fe\u7684\u672b\u5c3e\u65f6\uff0c\n    \u5c31\u8981\u4e0d\u65ad\u56de\u9000\uff0c\u540c\u65f6\u5efa\u51fa\u8fd9\u4e00\u6761\u94fe\u4e0a\u8fb9\u3002\n    */\n    }\n    if(stk[top]!=now) stk[++top]=now;\n    //\u5c06\u65b0\u5143\u7d20\u52a0\u5165dfs\u94fe\u7684\u672b\u5c3e\n}\nwhile(--top) New.addEdge(stk[top],stk[top+1],G.minval(stk[top],stk[top+1]));\n//\u5904\u7406\u6700\u540e\u6808\u4e2d\u7684\u90a3\u4e00\u6761dfs\u94fe\n```\n### \u8fd9\u6837\uff0c\u865a\u6811\u5c31\u5efa\u5b8c\u4e86\uff01\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nconst int MAXN=3e5;\nconst ll INF=1e17;\nusing namespace std;\n//defs================================================\nint N,M,K;\n\n//edge================================================\nstruct edge {\n\tint ed,nxt,vv;\n};\nstruct _Graph{\n\tbool _dbg;\n    int head[MAXN],Ecnt;\n\tedge E[MAXN*3];\n\tint fa[MAXN][20],depth[MAXN],dfn[MAXN],dfsid;\n\tll minv[MAXN][20],edf[MAXN];//\u7236\u8fb9\n\tint import[MAXN];//\u662f\u5426\u91cd\u8981\n    map<int,int> inseq;//\u865a\u6811\u4e0a\u70b9\u7684\u5408\u96c6\n    ll f[MAXN];\n\t_Graph() {\n        memset(minv,0x3f,sizeof minv);\n        depth[1]=1;\n        edf[1]=INF;\n\t}\n    void addEdge(int st,int ed,int vv) {\n    \tif(st==ed||!st||!ed) return;\n    \tif(_dbg) {\n\t\t\tprintf(\"add %d->%d vv=%d\\n\",st,ed,vv);\n    \t}\n    \t++inseq[st],++inseq[ed];\n\t\tE[++Ecnt].ed=ed,E[Ecnt].nxt=head[st],head[st]=Ecnt;\n\t\tE[Ecnt].vv=vv;\n    }\n\n\tvoid dfs(int st) {\n\t\tdfn[st]=++dfsid;\n\t\tfor(int i=1;i<=20;++i) {\n\t\t\tif(fa[ fa[st][i-1] ][i-1]) {\n\t\t\t\tfa[st][i]=fa[ fa[st][i-1] ][i-1];\n\t\t\t\tminv[st][i]=min(minv[st][i-1],minv[ fa[st][i-1] ][i-1]);\n\t\t\t}\n\t\t}\n        for(int i=head[st];i;i=E[i].nxt) {\n\t\t\tint ed=E[i].ed,vv=E[i].vv;\n\t\t\tif(ed!=fa[st][0]) {\n                fa[ed][0]=st;depth[ed]=depth[st]+1;\n                edf[ed]=minv[ed][0]=vv;\n                dfs(ed);\n\t\t\t}\n        }\n\t}\n\tint lca(int x,int y) {\n\t\tif(depth[x]<depth[y]) swap(x,y);\n\t\tfor(int i=19;i>=0;--i) if(depth[fa[x][i]]>=depth[y]) x=fa[x][i];\n\t\tfor(int i=19;i>=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];\n\t\tif(x==y) return x;\n\t\telse    return fa[x][0];\n\t}\n\tll minval(int x,int y) {\n        ll ret=INF;\n\t\tif(depth[x]<depth[y]) swap(x,y);\n\t\tfor(int i=19;i>=0;--i)\n\t\t\tif(depth[fa[x][i]]>=depth[y]) {\n\t\t\t\tret=min(ret,minv[x][i]);\n\t\t\t\tx=fa[x][i];\n\t\t}\n\t\tfor(int i=19;i>=0;--i)\n\t\t\tif(fa[x][i]!=fa[y][i]) {\n\t\t\t\tret=min(ret,minv[x][i]);\n\t\t\t\tret=min(ret,minv[y][i]);\n\t\t\t\tx=fa[x][i],y=fa[y][i];\n\t\t\t}\n\t\tif(x!=y) {\n            ret=min(ret,minv[x][0]),ret=min(ret,minv[y][0]);\n\t\t}\n\t\treturn ret;\n\t}\n\tvoid clear() {\n        Ecnt=0;\n        map<int,int>::iterator it=inseq.begin();\n        for(;it!=inseq.end();++it) {\n\t\t\tint t=it->first;\n\t\t\thead[t]=f[t]=import[t]=0;\n\t\t\tedf[t]=INF;\n\t\t\t//printf(\"erased %d\\n\",t);\n        }\n        inseq.clear();\n\t}\n    ll dp(int x=1) {\n    \t//printf(\"dp in %d\\n\",x);\n        if(import[x]) {\n\t\t\t//printf(\"%d ret=%d\\n\",x,edf[x]);\n\t\t\treturn edf[x];\n\t\t}\n        ll sum=0;\n        for(int i=head[x];i;i=E[i].nxt) {\n\t\t\tint ed=E[i].ed,vv=E[i].vv;\n\t\t\tedf[ed]=vv;\n            sum+=dp(ed);\n        }\n        //printf(\"%d ret=%d\\n\",x,min(edf[x],sum));\n        return min((ll)edf[x],sum);\n    }\n}G,New;\n//virtual tree=========================================\nint stk[MAXN],top;\nint seq[MAXN];\nbool cmp(int x,int y) {\n    return G.dfn[x]<G.dfn[y];\n}\n//main================================================\nint main() {\n\t//New._dbg=true;\n\tfreopen(\"E:/lydsy/2286/6.in\",\"r\",stdin);\n\tfreopen(\"E:/lydsy/2286/my.out\",\"w\",stdout);\n\n\tscanf(\"%d\",&N);\n    for(int i=1;i<N;++i) {\n\t\tint x,y,v;\n\t\tscanf(\"%d%d%d\",&x,&y,&v);\n\t\tG.addEdge(x,y,v),G.addEdge(y,x,v);\n    }\n    G.dfs(1);\n\tscanf(\"%d\",&M);\n\twhile(M--) {\n\t\tNew.clear();\n        scanf(\"%d\",&K);\n        for(int i=1;i<=K;++i) {\n\t\t\tscanf(\"%d\",seq+i);\n\t\t\tNew.import[seq[i]]=true;\n        }\n        sort(seq+1,seq+K+1,cmp);\n        top=0;\n        stk[++top]=1;\n        for(int i=1;i<=K;++i) {\n            int now=seq[i],f=G.lca(now,stk[top]);\n            while(true) {\n\t\t\t\tif(G.depth[f]>=G.depth[stk[top-1]]) {\n                    New.addEdge(f,stk[top],G.minval(f,stk[top]));\n                    --top;\n                    if(stk[top]!=f) stk[++top]=f;\n                    break;\n\t\t\t\t}\n                New.addEdge(stk[top-1],stk[top],G.minval(stk[top-1],stk[top]));--top;\n            }\n            if(stk[top]!=now) stk[++top]=now;\n        }\n        while(--top) New.addEdge(stk[top],stk[top+1],G.minval(stk[top],stk[top+1]));\n        cout<<New.dp(1)<<endl;\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1533265169,
        "uid": 20565,
        "name": "wzj423",
        "ccfLevel": 7,
        "title": "\u3010\u9898\u89e3\u3011\u3010\u865a\u6811\u521d\u6d89\u3011SDOI2011-\u6d88\u8017\u6218-\u865a\u6811-dp"
    },
    {
        "content": "\u770b\u5230\u9898\u76ee\u7684\u6761\u4ef6\uff0c\u5bb9\u6613\u60f3\u5230\u662f\u4e00\u9053\u6811\u5f62DP\u9898\uff0c\u8bbe$f[u]$\u4e3a\u8ba9$u$\u4e0d\u80fd\u5230\u8fbe$u$\u7684\u5b50\u6811\u5185\uff08\u4e0d\u5305\u62ec$u$\uff09\u7684\u4efb\u610f\u5173\u952e\u70b9\uff08\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\uff09\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u5982\u679c$u$\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48$f[u]=0$\u3002\n\n\u8f6c\u79fb\u5c31\u662f\u679a\u4e3e\u5b50\u8282\u70b9$v$\uff0c\u8bbe$val(u,v)$\u4e3a\u8fb9$(u,v)$\u7684\u6743\u503c\uff0c\u5219\u8f6c\u79fb\u4e3a\uff1a\n\n\u5982\u679c$v$\u662f\u5173\u952e\u70b9\uff0c\u90a3\u4e48$f[u]+=val(u,v)$\u3002\n\n\u5426\u5219$f[u]+=\\min(val(u,v),f[v])$\u3002\n\n\u8003\u8651\u5230\u8be2\u95ee\u6b21\u6570\u8f83\u5927\uff0c\u4f46\u7ed9\u51fa\u5173\u952e\u70b9\u7684\u603b\u6570\u5f88\u5c11\uff0c\u56e0\u6b64\u53ef\u4ee5\u6784\u5efa\u51fa\u4e00\u4e2a**\u865a\u6811**\u3002\u6ce8\u610f\u628a$1$\u53f7\u8282\u70b9\u52a0\u5165\u5173\u952e\u70b9\u3002\n\n\u5982\u679c\u5bf9\u865a\u6811\u4e0d\u4e86\u89e3\uff0c\u53ef\u53c2\u8003\u795e\u7287zzq\u7684\u535a\u5ba2\uff1ahttps://www.cnblogs.com/zzqsblog/p/5560645.html\n\n\u6784\u5efa\u5b8c\u865a\u6811\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u865a\u6811\u4e0aDP\u4e86\u3002\u6ce8\u610f\u865a\u6811\u4e0a\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a\u539f\u6811\u4e0a\u8fd9\u4e24\u70b9\u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u7684\u6700\u5c0f\u503c\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ninline int read() {\n    int res = 0; bool bo = 0; char c;\n    while (((c = getchar()) < '0' || c > '9') && c != '-');\n    if (c == '-') bo = 1; else res = c - 48;\n    while ((c = getchar()) >= '0' && c <= '9')\n        res = (res << 3) + (res << 1) + (c - 48);\n    return bo ? ~res + 1 : res;\n}\ntypedef long long ll;\nconst int N = 25e4 + 5, LogN = 23, INF = 0x3f3f3f3f;\nint n, m, ecnt, nxt[N << 1], adj[N], go[N << 1], val[N << 1], dep[N], dfn[N],\ntimes, top, stk[N], fa[N][LogN], mv[N][LogN], vir[N], vn, par[N], vi[N], tm,\nyy[N]; ll ans[N]; bool isvir[N];\nvoid add_edge(int u, int v, int w) {\n    nxt[++ecnt] = adj[u]; adj[u] = ecnt; go[ecnt] = v; val[ecnt] = w;\n    nxt[++ecnt] = adj[v]; adj[v] = ecnt; go[ecnt] = u; val[ecnt] = w;\n}\nvoid dfs(int u, int fu) {\n    int i; fa[u][0] = fu; dep[u] = dep[fu] + 1;\n    for (i = 0; i <= 19; i++)\n        fa[u][i + 1] = fa[fa[u][i]][i],\n        mv[u][i + 1] = min(mv[u][i], mv[fa[u][i]][i]);\n    dfn[u] = ++times;\n    for (int e = adj[u], v; e; e = nxt[e])\n        if ((v = go[e]) != fu)\n            mv[v][0] = val[e], dfs(v, u);\n}\nint lca(int u, int v) {\n    int i; if (dep[u] < dep[v]) swap(u, v);\n    for (i = 20; i >= 0; i--) {\n        if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];\n        if (u == v) return u;\n    }\n    for (i = 20; i >= 0; i--)\n        if (fa[u][i] != fa[v][i])\n            u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\nint dis(int u, int v) {\n    int i, ans = INF;\n    for (i = 20; i >= 0; i--) {\n        if (dep[fa[u][i]] >= dep[v])\n            ans = min(ans, mv[u][i]), u = fa[u][i];\n        if (u == v) return ans;\n    }\n    return ans;\n}\nbool comp(int u, int v) {\n    return dfn[u] < dfn[v];\n}\nvoid build() {\n    int i, tmp = vn; top = 0;\n    sort(vir + 1, vir + vn + 1, comp);\n    for (i = 1; i <= tmp; i++) {\n        int u = vir[i];\n        if (!top) {\n            par[u] = 0;\n            stk[++top] = u;\n            continue;\n        }\n        int w = lca(stk[top], u);\n        while (dep[stk[top]] > dep[w]) {\n            if (dep[stk[top - 1]] < dep[w]) par[stk[top]] = w;\n            top--;\n        }\n        if (w != stk[top]) {\n            vir[++vn] = w;\n            par[w] = stk[top];\n            stk[++top] = w;\n        }\n        par[u] = w; stk[++top] = u;\n    }\n    sort(vir + 1, vir + vn + 1, comp);\n}\nvoid DP() {\n    int i; for (i = 1; i <= vn; i++) ans[vir[i]] = 0;\n    for (i = vn; i >= 2; i--) {\n        int u = vir[i];\n        if (isvir[u]) ans[par[u]] += 1ll * vi[u];\n        else ans[par[u]] += min(1ll * vi[u], ans[u]);\n    }\n}\nll solve() {\n    int i; for (i = 2; i <= vn; i++)\n        vi[vir[i]] = dis(vir[i], par[vir[i]]);\n    return DP(), ans[1];\n}\nint main() {\n    int i, x, y, z; n = read();\n    for (i = 1; i < n; i++) {\n        x = read(); y = read(); z = read();\n        add_edge(x, y, z);\n    }\n    dfs(1, 0); m = read(); while (m--) {\n        vn = read() + 1; vir[1] = 1; tm = vn - 1;\n        for (i = 2; i <= vn; i++) vir[i] = yy[i - 1] = read(),\n            isvir[vir[i]] = 1; build();\n        printf(\"%lld\\n\", solve());\n        for (i = 1; i <= tm; i++) isvir[yy[i]] = 0;\n    }\n    return 0;\n}\n```",
        "postTime": 1512306441,
        "uid": 29936,
        "name": "xyz32768",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "~~\u865a\u6811\u7684\u9898\u4e3a\u4ec0\u4e48\u8981\u7528\u865a\u6811\u505a\uff1f~~\n\n\u5047\u5982\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\uff0c\u8003\u8651\u5982\u4f55 dp \u3002\n\n\u8bbe $f_u$ \u8868\u793a\u5c06\u5b50\u6811 $u$ \u5185\u7684\u6240\u6709\u5173\u952e\u70b9\u5230 $u$ \u7684\u8def\u5f84\u5207\u65ad\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u90a3\u4e48\u8f6c\u79fb\u4e3a $f_u=\\sum_{v}\\min(f_v,w(u,v))$\uff0c\u5373\u9009\u62e9\u662f\u5426\u65ad\u6389\u513f\u5b50 $v$ \u5230 $u$ \u7684\u8fd9\u6761\u8fb9\u3002\u7279\u522b\u7684\uff0c\u5982\u679c $u$ \u672c\u8eab\u662f\u5173\u952e\u70b9\uff0c\u90a3\u4e48 $f_u=\\inf$ \uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u901a\u8fc7\u65ad\u8fb9\u6d88\u9664 $u\\rightarrow u$ \u7684\u8fd9\u6761\u8def\u5f84\u3002\n\n\u4ee5 1 \u4e3a\u6839\u5f00\u59cb\u505a\u7684\u8bdd\uff0c\u7b54\u6848\u5c31\u662f$f_1$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a dp \u7684\u8fc7\u7a0b\u975e\u5e38\u7b80\u6d01\uff0c\u7531\u51e0\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u7ec4\u6210\uff1a\u6c42\u548c\uff0c\u53d6 $\\min$\u3002\n\n\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u7ef4\u62a4\uff0c\u8ba9\u7ebf\u6bb5\u6811\u4e0a\u7b2c $i$ \u4e2a\u53f6\u5b50\u8868\u793a\u7b2c $i$ \u6b21\u8be2\u95ee\u7684 dp \u503c\uff0c\u90a3\u4e48\u53d6 $\\min$ \u5c31\u662f\u5168\u5c40\u53d6 $\\min$\uff0c\u6c42\u548c\u5c31\u662f\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\u3002\n\n\u90a3\u4e48\u5199\u4e00\u4e2a\u7ebf\u6bb5\u6811\u5408\u5e76\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u9053\u9898\u4e86\uff0c\u590d\u6742\u5ea6\u4e3a$O(n+mlogm)$\uff0c\u8dd1\u8d77\u6765\u6bd4\u60f3\u8c61\u4e2d\u6162\uff0c\u4f46\u662f\u601d\u7ef4\u91cf\u548c\u4ee3\u7801\u91cf\u90fd\u6bd4\u865a\u6811\u5c11\u4e0a\u4e0d\u5c11\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define lc t[p].ls\n#define rc t[p].rs\n#define I inline int\n#define V inline void\n#define lson lc,L,mid\n#define rson rc,mid+1,R\n#define ll long long int\n#define root(x) rt[x],1,m\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define REP(u,e) for(int i=e##h[u],v;v=e[i].t,i;i=e[i].n)\n#define add(x,y,w,e) e[++tot]=(edge){y,e##h[x],w},e##h[x]=tot\nconst int N=5e5+1;\nint n,m,tot,eh[N],qh[N],rt[N];\nstruct edge{int t,n,w;}e[N],q[N];\nstruct ele{\n\tint ls,rs;ll v;\n\tV upd(ll x){if(v>x)v=x;}\n}t[N<<5];\nV input(){\n\tscanf(\"%d\",&n);int x,y,w;\n\tFOR(i,2,n)scanf(\"%d%d%d\",&x,&y,&w),add(x,y,w,e),add(y,x,w,e);\n\tscanf(\"%d\",&m),tot=w=0;\n\tFOR(i,1,m)for(scanf(\"%d\",&n);n--;)scanf(\"%d\",&x),add(x,i,w,q);\n}\nV ins(int&p,int L,int R,int x){\n\tif(x<L||x>R)return;\n\tif(!p)t[p=++tot].v=1ll<<40;\n\tif(L==R)return;int mid=L+R>>1;\n\tins(lson,x),ins(rson,x);\n}\nV solve(int p){t[lc].upd(t[p].v),t[rc].upd(t[p].v),t[p].v=1ll<<40;}\nI merge(int x,int y){\n\tif(!x||!y)return x|y;\n\tif(!t[x].ls&&!t[x].rs)return t[x].v+=t[y].v,x;\n\tsolve(x),solve(y);\n\tt[x].ls=merge(t[x].ls,t[y].ls);\n\tt[x].rs=merge(t[x].rs,t[y].rs);\n\treturn x;\n}\nV dfs(int u,int fa){\n\tREP(u,q)ins(rt[u],1,m,v);\n\tREP(u,e)if(v^fa)\n\t\tdfs(v,u),t[rt[v]].upd(e[i].w),rt[u]=merge(rt[u],rt[v]);\n}\nV output(int p,int L,int R){\n\tif(L==R)return void(cout<<t[p].v<<'\\n');\n\tint mid=L+R>>1;solve(p),output(lson),output(rson);\n}\nV work(){tot=0,dfs(1,0),output(rt[1],1,m);}\nint main(){\n\tinput();\n\twork();\n\treturn 0;\n}\n```",
        "postTime": 1580106327,
        "uid": 109236,
        "name": "Fuyuki",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\u4f8b\uff1a[luogu2495](https://www.luogu.org/problem/P2495)\n\n\u865a\u6811\u662f\u4e00\u79cd\u628a\u6811\u4e0a\u65e0\u7528\u4fe1\u606f\u6d53\u7f29\u7684\u60f3\u6cd5\uff0c\u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c\uff1f\uff1f\u4e00\u822c\u7528\u4e8e\u53ea\u4e0e\u90e8\u5206\u70b9\u6709\u5173\u7684\u6811\u72b6dp\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1\u4f8b\u9898\uff0c\u6211\u53ea\u9700\u6811\u4e0a\u7684\u8be2\u95ee\u70b9\u7684\u5b83\u4eec\u7684lca\u6765\u505adp\u5373\u53ef\uff0c\u53ef\u4ee5\u8bc1\u660e\u6bcf\u4e2a\u8be2\u95ee\u70b9\u6700\u591a\u751f\u6210\u4e00\u4e2alca\uff0c\u4e8e\u662f\u590d\u6742\u5ea6\u4e0d\u5c31\u5c0f\u4e86\n\n\u8bc1\u660e\u590d\u6742\u5ea6\u5f88\u7b80\u5355\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u4e0e\u524d\u9762\u7684\u70b9$y$\uff0c$z$\u90fd\u751f\u6210\u4e86\u65b0\u7684lca\uff0c\u8bb0\u4e3a$ly$,$lz$,\u90a3\u4e48$lca(y,z)$\u7b49\u4e8e$ly$\uff0c$lz$\u4e2d\u6df1\u5ea6\u8f83\u5c0f\u7684\u4e00\u4e2a\uff0c\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u4e8e\u662f\u53ef\u8bc1\u4e00\u68f5\u865a\u6811\u7684\u5927\u5c0f\u6700\u5927\u53ea\u6709\u5173\u952e\u70b9\u6570\u91cf\u7684\u4e24\u500d\n\n------------\n\n\u4e0b\u9762\u5230\u6700\u91cd\u8981\u7684\u5730\u65b9\u4e86\uff1a**\u600e\u4e48\u6784\u5efa\u865a\u6811**\uff1a\n\n\u6784\u5efa\u865a\u6811\uff0c\u5373\u662f\u628a\u4e00\u4e9b\u6307\u5b9a\u70b9\u548c\u5b83\u4eec\u7684lca\u4ece\u539f\u6811\u4e2d\u62bd\u51fa\u6765\u3002\n\n\u5148\u628a\u5173\u952e\u70b9\u6309dfs\u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e86\uff1a\n\n\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u5176\u4e2d\u662f\u6240\u6709\u5b50\u6811\u4e2d\u8fd8\u53ef\u80fd\u4ea7\u751f\u65b0\u70b9\u7684\u70b9\uff0c\u4f7f\u4ece\u6808\u9876\u5230\u6808\u5e95\u7684\u6df1\u5ea6\u662f\u9012\u51cf\u7684\uff08\u5176\u5b9e\u5c31\u662f\u6808\u9876\u5143\u7d20\u5230\u6839\u7684\uff0c\u5f53\u524d\u5df2\u52a0\u5165\u865a\u6811\u7684\u70b9\u7684\u4e00\u6761\u94fe\uff09\uff0c\u4e00\u5f00\u59cb\u5148\u628a\u6839\u4e22\u8fdb\u53bb\u3002\n\n\u8bb0\u5f53\u524d\u8981\u52a0\u7684\u5173\u952e\u70b9\u4e3a$now$\uff0c\u6808\u9876\u4e3a$x$\uff0c\u4ed6\u4eec\u7684$lca$\u4e3a$lc$,\u5982\u679c$dep_{lc}=dep_{x}$\uff0c\u538bnow\u5165\u6808\u7ed3\u675f\uff0c**\u56e0\u4e3a\u6211\u4e0d\u77e5\u5230now\u5b50\u6811\u4e2d\u8fd8\u6709\u6ca1\u6709\u65b0\u70b9**\n\n\u5982\u679c$dep_{lc}<dep_{x}$,\u6211\u5c31\u77e5\u9053$x$\u7684\u5b50\u6811\u4e2d\u4e0d\u53ef\u80fd\u6709\u4efb\u4f55\u65b0\u70b9\u4e86\uff08\u522b\u5fd8\u4e86\u5173\u952e\u70b9\u662f\u6309dfs\u5e8f\u6392\u8fc7\u5e8f\uff09\uff0c\u4f46\u6211\u60f3\u77e5\u9053\u6808\u91cc\u5176\u4ed6\u5143\u7d20\u662f\u4e0d\u662f\u4e5f\u4e0d\u53ef\u80fd\u4e86\uff0c\u5f88\u7b80\u5355\u6211\u5148\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u6808\u4e2d\u70b9$y$\uff0c\u4e00\u6837\u5982\u679c$dep_{lc}<dep_{y}$,\u90a3y\u7684\u5b50\u6811\u91cc\u4e5f\u4e0d\u53ef\u80fd\u6709\u65b0\u70b9\u4e86,\u90a3\u6211\u5c31\u628ax\u548cy\u8fde\u8d77\u6765\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u7136\u540e\u7528y\u4ee3\u66ffx\u7ee7\u7eed\u6b64\u8fc7\u7a0b\uff0c**\u5728\u8fc7\u7a0b\u4e2d**\uff1a\n\n\u5982\u679c\u51fa\u73b0$dep_{lc}=dep_y$\u5373\u5c31\u662f$lc=y$\uff0cx\u5b50\u6811\u4e0d\u53ef\u80fdy\u8fd8\u6709\u53ef\u80fd\uff0c\u4f46\u65b0\u70b9\u4e0d\u4f1a\u51fa\u73b0\u5728x\u81f3y\u4e2d\u7684\u70b9\uff08\u4e0d\u7136lca\u5c31\u4e0d\u662flc\u4e86\uff09\uff0c\u90a3x\u8fdey\uff0c\u5f39\u51fax\u538b\u8fdbnow\uff0c**\u56e0\u4e3a\u4e0d\u77e5\u9053now\u5b50\u6811\u4e2d\u8fd8\u6709\u6ca1\u6709\u65b0\u70b9**\uff0c\u7ed3\u675f\uff1b\n\n\u5982\u679c\u51fa\u73b0$dep_{lc}=dep_y$\uff0c\u6211\u4eec\u5148\u628alc\u52a0\u5165\u865a\u6811\uff0c\u7136\u540e\u8fde\u8fb9lc\u4e0ex\uff08\u4e0e\u524d\u4e00\u79cd\u4e00\u6837\u7684\u9053\u7406\uff09\uff0c\u5f39\u51fax\uff0c\u538b\u5165now\uff0c**\u56e0\u4e3a\u4e0d\u77e5\u9053now\u5b50\u6811\u4e2d\u8fd8\u6709\u6ca1\u6709\u65b0\u70b9**\n\n\u505a\u5b8c\u4ee5\u540e\u522b\u5fd8\u628a\u6808\u91cc\u5143\u7d20\u4f9d\u6b21\u8fde\u63a5\n\n\u6784\u5efa\u8fc7\u7a0b\u6709\u70b9\u62bd\u8c61\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u53cd\u590d\u5f3a\u8c03\u7684\u9ed1\u4f53\uff0c\u4e3a\u4ec0\u4e48\u8981\u628a\u5143\u7d20\u538b\u5165\uff0c\u4e3a\u4ec0\u4e48\u8981\u5f39\u51fa\uff0c\u8fd9\u6837\u624d\u80fd\u7406\u89e3\uff0c\u4ee3\u7801\u8fd8\u6709\u89e3\u91ca\n\n------------\n\n\u4f8b\u9898\u7684\u6811\u4e0adp\u65b9\u7a0b\u6211\u5c31\u76f4\u63a5\u7ed9\u4e86\uff08$dp[i]$\u8868\u793a\u5904\u7406\u5b8ci\u7684\u5b50\u6811\uff0c\u5373\u4f7fi\u81ea\u8eab\u4e3a\u5173\u952e\u70b9\u4e5f\u4e0d\u8ba1\u5165$dp[i]$\uff09\uff1a\n\n1. $dp[fa]+=len(fa,son)$ (son\u4e3a\u5173\u952e\u70b9)\n2. $dp[fa]+=min(dp[son],len(fa,son))$ (son\u4e0d\u662f\u5173\u952e\u70b9)\n\n\u505a\u7684\u65f6\u5019\u8981\u5c0f\u5fc3\u4e0d\u8981\u89e6\u53ca\u539f\u6811\u5927\u5c0f\u7684\u590d\u6742\u5ea6\uff0c\u4e0d\u7136\u3002\u3002\u5c31\u767d\u505a\u4e86\n\n\u4ee3\u7801\u7b97\u6211\u6062\u590d\u4ee5\u6765\u6253\u7684\u6700\u957f\u7684\u4e86\u3002\u3002\u3002\n\n## \u4f8b\u9898\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <vector>\n#include <string.h>\n#include <stack>\nusing namespace std;\n#define lowbit(x) (x&-x)\ntypedef pair<int,int> pii;\ntypedef long long ll;\nconst int N=3e5+50;\nint n,m,now,dfncnt,ki;\nvector<pii > gg[N],xs[N];\nint dep[N],req[N],dfn[N],fa[N][20];\nll dis[N],dp[N];\nbool xu[N];\nstack<int> ss;\nvector<int> xuf;\n\nvoid dfs(int now,int pre){\n\tfor(int a=1;a<=18;a++)\n\t\tfa[now][a]=fa[fa[now][a-1]][a-1];\n\tdfn[now]=++dfncnt;\n\tint sz=gg[now].size();\n\tfor(int i=0;i<sz;i++)\n\t{\n\t\tint nex=gg[now][i].first;\n\t\tll len=gg[now][i].second;\n\t\tif(nex==pre) continue;\n\t\tdep[nex]=dep[now]+1;\n\t\tdis[nex]=min(dis[now],len);\n\t\tfa[nex][0]=now;\n\t\tdfs(nex,now);\n\t}\n}\n\nint lca(int x,int y)\n{\n\tif(dep[y]>dep[x]) swap(x,y);\n\tfor(int a=18;a>=0;a--)\n\t\tif(dep[fa[x][a]]>=dep[y])\n\t\t\tx=fa[x][a];\n\tif(x==y) return x;\n\tfor(int a=18;a>=0;a--)\n\t\tif(fa[x][a]!=fa[y][a]){\n\t\t\tx=fa[x][a];\n\t\t\ty=fa[y][a];\n\t\t}\n\treturn fa[x][0];\n}\n\nbool cmp(int a,int b){\n\treturn dfn[a]<dfn[b];\n}\n\nvoid addedge(int x,int y){\n\tif(dep[x]>dep[y]) swap(x,y);\n\txs[x].push_back(make_pair(y,dis[y]));\n\txs[y].push_back(make_pair(x,dis[y]));\n}\n\nvoid buildxs()\n{\n\txuf.push_back(1);\n\tss.push(1);\n\tfor(int id=1;id<=ki;id++)\n\t{\n\t\tint now=req[id],x=ss.top(),lc=lca(x,now);\n\t\txuf.push_back(now);\n\t\tss.pop();\n\t\tif(dep[lc]==dep[x]){\n\t\t\tss.push(x);\n\t\t\tss.push(now);\n\t\t\tcontinue;\n\t\t}//x\u5b50\u6811\u672a\u5904\u7406\u5b8c\uff0c\u538b\u8fdb\u53bb\u5904\u7406now\u5b50\u6811\n\t\twhile(!ss.empty())//x\u5b50\u6811\u5df2\u5904\u7406\u5b8c\uff0c\u95ee\u94fe\u6808\u4e2d\u8fd8\u6709\u6ca1\u6709\u5df2\u5904\u7406\u5b8c\u7684\uff0c\u5982\u6709\uff0c\u5219\u8fde\u63a5\u524d\u4e00\u4e2a\u5143\u7d20\uff0c\u66f4\u65b0x\n\t\t{\n\t\t\tint y=ss.top();\n\t\t\tif(dep[y]<=dep[lc]) {\n\t\t\t\tif(dep[lc]!=dep[y]){\n\t\t\t\t\tss.push(lc);\n\t\t\t\t\txuf.push_back(lc);\n\t\t\t\t}//\u5982\u6ca1\u6709\uff0c\u5219\u5224\u65ad\u5982\u679clca\uff01=x\uff0c\u5c31\u538b\u8fdb\u6808\u91cc\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tss.pop();\n\t\t\taddedge(x,y);\n\t\t\tx=y;\n\t\t}\n\t\tss.push(now);\n\t\taddedge(x,lc);//\u7ed3\u7b97x\n\t}\n\tif(!ss.empty())\n\t{\n\t\tint x=ss.top();\n\t\tss.pop();\n\t\twhile(!ss.empty())\n\t\t{\n\t\t\tint y=ss.top();\n\t\t\tss.pop();\n\t\t\taddedge(x,y);\n\t\t\tx=y;\n\t\t}\n\t}\n}\n\nvoid Outxs(){\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint sz=xs[i].size();\n\t\tif(sz)\n\t\tcout<<i<<\": \";\n\t\tfor(int j=0;j<sz;j++)\n\t\t{\n\t\t\tcout<<xs[i][j].first<<\" \";\n\t\t}\n\t\tif(sz)\n\t\tcout<<endl;\n\t}\n}\n\nvoid Init(){\n\tint sz=xuf.size();\n\tfor(int i=0;i<sz;i++)\n\t\tdp[xuf[i]]=0,xs[xuf[i]].clear();\n\txuf.clear();\n}\n\nvoid Dp(int now,int pre)\n{\n\tint sz=xs[now].size();\n\tif(sz==1 && pre!=-1) return;\n\tfor(int i=0;i<sz;i++)\n\t{\n\t\tint nex=xs[now][i].first;\n\t\tll len=xs[now][i].second;\n\t\tif(nex==pre) continue;\n\t\tDp(nex,now);\n\t\tif(xu[nex]) dp[now]+=len;\n\t\telse dp[now]+=min(len,dp[nex]);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint ui,vi,wi;\n\t\tscanf(\"%d%d%d\",&ui,&vi,&wi);\n\t\tgg[ui].push_back(make_pair(vi,wi));\n\t\tgg[vi].push_back(make_pair(ui,wi));\n\t}\n\tscanf(\"%d\",&m);\n\tdep[1]=1;\n\tdis[1]=99999999;\n\tdfs(1,-1);\n\twhile(m--)\n\t{\n\t\tscanf(\"%d\",&ki);\n\t\tfor(int i=1;i<=ki;i++)\n\t\t\tscanf(\"%d\",&req[i]);\n\t\tsort(req+1,req+1+ki,cmp);\n\t\tfor(int id=1;id<=ki;id++) xu[req[id]]=1;\n\t\tbuildxs();\n\t\tDp(1,-1);\n\t\tprintf(\"%lld\\n\",dp[1]);\n\t\tInit();\n\t\tfor(int id=1;id<=ki;id++) xu[req[id]]=0;\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1569627622,
        "uid": 41271,
        "name": "\u59a9\u5a9a\u7684ak\u841d\u8389",
        "ccfLevel": 9,
        "title": "\u865a\u6811"
    },
    {
        "content": "/\\*\n\n    luogu P2495 [SDOI2011]\u6d88\u8017\u6218\n\n\u865a\u6811+\u6811\u5f62dp\n\n\n\u9996\u5148\u5bf9\u539f\u56fe\u6784\u5efa\u51fa\u865a\u6811\n\n\n\u5728\u5efa\u56fe\u7684\u65f6\u5019\u5904\u7406\u51fa\u6700\u5c0f\u503c\n\n\u8f6c\u79fb\u5373\u53ef\n\n\n\u5c0f\u6280\u5de7\n\n\u5728dp\u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u987a\u4fbf\u628a\u8fb9\u8868\u6e05\u7a7a\n\n\u5c06\u8fb9\u7ed3\u6784\u4f53\u5c01\u88c5\u53ef\u65b9\u4fbf\u7684\u5efa\u591a\u5f20\u56fe\n\n\\*/\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <algorithm>\n\n#define INF 1e17\n\nconst int BUF = 10000010;\nchar Buf[BUF], *buf = Buf;\n\nvoid read (int &now)\n{\n    for (now = 0; !isdigit (*buf); ++ buf);\n    for (; isdigit (*buf); now = now * 10 + *buf - '0', ++ buf);\n}\n\n#define Max 1000010\n\nstruct Edge\n{\n    int to, next, w; \n    Edge (int _x, int _y, int _z) : to (_x), next (_y), w (_z) {}\n    Edge () {}\n};\n\nint N, M;\nlong long value[Max];\nint dfn[Max], Count;\nstruct Graph\n{\n    Edge e[Max << 1];\n    int C;\n    Graph () { C = 0;}\n\n    int list[Max];\n    inline void Clear ()\n    {\n        C = 0;\n    }\n    inline void Add_Edge (int from, int to, int dis)\n    {\n        if (from == to) return ;\n        e[++ C].to = to;\n        e[C].next = list[from];\n        list[from] = C;\n        e[C].w = dis; \n    }\n    inline void Add_Edge (int from, int to)\n    {\n        if (from == to) return ;\n        e[++ C].to = to;\n        e[C].next = list[from];\n        list[from] = C;\n    }\n};\n\ninline void swap (int &x, int &y)\n{\n    int now = x;\n    x = y;\n    y = now;\n}\n\ninline long long min (int x, long long y)\n{\n    return x < y ? x : y;\n}\n\nclass Tree_Chain_Get\n{\n    private : \n        Graph G;\n        int  size[Max], chain[Max], father[Max], son[Max];\n\n    public :\n\n        int deep[Max];\n\n        void Dfs_1 (int now, int Father)\n        {\n            size[now] = 1;\n            father[now] = Father;\n            dfn[now] = ++ Count;\n            deep[now] = deep[Father] + 1;\n            for (int i = G.list[now]; i; i = G.e[i].next)\n                if (G.e[i].to != Father)\n                {\n                    value[G.e[i].to] = min (G.e[i].w, value[now]); \n                    Dfs_1 (G.e[i].to, now);\n                    size[now] += size[G.e[i].to];\n                    if (size[son[now]] < size[G.e[i].to])\n                       son[now] = G.e[i].to; \n                }\n        }       \n        \n        void Dfs_2 (int now, int point)\n        {\n           chain[now] = point;\n           if (son[now])\n              Dfs_2 (son[now], point);\n           else return ;\n           for (int i = G.list[now]; i; i = G.e[i].next)\n              if (G.e[i].to != son[now] && G.e[i].to != father[now])\n                 Dfs_2 (G.e[i].to, G.e[i].to);\n        }\n        \n        int Get_Lca (int x, int y)\n        {\n            for (; chain[x] != chain[y]; )\n            {\n                if (deep[chain[x]] < deep[chain[y]])\n                    swap (x, y);\n                x = father[chain[x]];\n            }\n            return deep[x] < deep[y] ? x : y;\n        }\n        \n        inline void Insert_edges (const int L)\n        {\n            for (int i = 1, x, y, z; i <= L; ++ i)\n            {\n                read (x), read (y), read (z);\n                G.Add_Edge (x, y, z);\n                G.Add_Edge (y, x, z);\n            }\n            value[1] = INF;\n            deep[1] = 0;\n            Dfs_1 (1, 0);\n            Dfs_2 (1, 1);\n        }\n};\nTree_Chain_Get Lca;\n\ninline bool Comp (const int &x, const int &y)\n{\n    return dfn[x] < dfn[y];\n}\n\nclass Virtual_Tree\n{\n    private : Graph T; int Stack[Max], top;\n            long long dp[Max];\n            int queue[Max];\n\n    public :\n\n        Virtual_Tree () {top = 0;}\n\n        void Build_Tree ()\n        {\n            int M;\n            read (M);\n            for (int i = 1; i <= M; ++ i)\n                read (queue[i]);\n            std :: sort (queue + 1, queue + 1 + M, Comp);\n            int cur = 0;\n            queue[++ cur] = queue[1];\n            for (int i = 2; i <= M; ++ i)\n                if (Lca.Get_Lca (queue[i], queue[cur]) != queue[cur])\n                    queue[++ cur] = queue[i];\n            int top = 0;\n            Stack[++ top] = 1;\n            int __lca;\n            T.Clear ();\n            for (int i = 1; i <= cur; ++ i)\n            {\n                __lca = Lca.Get_Lca (Stack[top], queue[i]);\n                for (; ; )\n                {\n                    if (Lca.deep[Stack[top - 1]] <= Lca.deep[__lca])\n                    {\n                        T.Add_Edge (__lca, Stack[top]);\n                        -- top;\n                        if (Stack[top] != __lca)\n                            Stack[++ top] = __lca;\n                        break;\n                    }\n                    T.Add_Edge (Stack[top - 1], Stack[top]);\n                    -- top;\n                }\n                if (Stack[top] != queue[i])\n                    Stack[++ top] = queue[i];\n            }\n            top --;\n            for (; top; -- top)\n                T.Add_Edge (Stack[top], Stack[top + 1]);\n            Dp (1);\n            printf (\"%lld\\n\", dp[1]);\n        }\n               \n\n        void Dp (int now)\n        {\n            long long res = 0; dp[now] = value[now];\n            for (int i = T.list[now]; i; i = T.e[i].next)\n            {\n                Dp (T.e[i].to);\n                res += dp[T.e[i].to];\n            }\n            T.list[now] = 0;\n            if (!res)\n                dp[now] = value[now];\n            else if (res < dp[now])\n                dp[now] = res;\n        }\n\n        void Doing (const int &K)\n        {\n            for (int i = 1; i <= K; ++ i)\n                Build_Tree ();\n        }\n};\n\nVirtual_Tree V_T;\n\nint Main ()\n{\n    fread (buf, 1, BUF, stdin);\n    read (N);\n\n    Lca.Insert_edges (N - 1);\n    int K;\n    read (K);\n    V_T.Doing (K);\n\n    return 0;\n}\nint ZlycerQan = Main ();\nint main (int argc, char *argv[]){;}\n```",
        "postTime": 1502612909,
        "uid": 21123,
        "name": "ZlycerQan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "#\u865a\u6811dp\n\n\u865a\u6811\u7684\u4e3b\u8981\u601d\u60f3\uff1a\n\n- \u4e0d\u904d\u5386\u6ca1\u7528\u7684\u7684\u8282\u70b9\u4ee5\u53ca\u6ca1\u7528\u7684\u5b50\u6811\uff0c\u4ece\u800c\u4f7f\u590d\u6742\u5ea6\u964d\u4f4e\u5230$\\sum\\limits k$(k\u4e3a\u8be2\u95ee\u7684\u8282\u70b9\u7684\u603b\u6570)\u3002\n\n\u6240\u4ee5\u600e\u4e48\u529e\uff1a\n\n- \u53ea\u628a\u8be2\u95ee\u8282\u70b9\u548c\u5176LCA\u653e\u5165\u8be2\u95ee\u7684\u6570\u7ec4\u4e2d\u3002\n## 1\u3001\u5efa\u865a\u6811\n\n```cpp\nq.clear();\nint m;\nscanf(\"%d\",&m);\nfor(int i=1;i<=m;++i){\n    int x;\n    scanf(\"%d\",&x);\n    v[x]=1;\n    q.push_back(x);\n}\nsort(q.begin(),q.end(),cmp);\nfor(int i=0;i<m-1;++i){\n    q.push_back(LCA(q[i],q[i+1]));\n}\nq.push_back(1);\nsort(q.begin(),q.end());\nq.erase(unique(q.begin(),q.end()),q.end());\nsort(q.begin(),q.end(),cmp);\n```\n\nq\u662f\u4e00\u4e2avector\uff0c\u6211\u4eec\u5f00\u59cb\u5148\u5bf9\u6240\u6709\u8282\u70b9\u6309\u6b27\u62c9\u5e8f\uff08\u5373**\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u8bbf\u95ee\u7684\u987a\u5e8f**\uff09\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684\u8282\u70b9\u5c06LCA\u653e\u5165q\u4e2d\uff08**\u53ef\u77e5\u8fd9\u6837\u4e00\u5b9a\u4f1a\u5c06\u6240\u6709\u6709\u6548\u8282\u70b9\u653e\u5165q\u4e2d**\uff09\u3002\u7136\u540e\u4e00\u6ce2\u53bb\u91cd\uff0c\u518d\u6309\u6b27\u62c9\u5e8f\u6392\u5e8f\u5373\u53ef\u3002\n\n~~\u5982\u679c\u4f60\u8fd8\u4e0d\u4f1aLCA\u7684\u8bdd\u8bf7\u5230[\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P3379)~~\n\n## 2.\u904d\u5386\u865a\u6811\n\n\u7136\u540e\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u904d\u5386\u8868\uff0c\u5411\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4e00\u6837\u641c\u4e00\u904d\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\u6bcf\u4e2a\u8282\u70b9x\u53ea\u6709\u5f53\u4ed6\u4e0b\u4e00\u4e2a\u8282\u70b9y\u662f\u4ed6\u7684\u5b50\u8282\u70b9\u65f6\uff08\u5373$dfn[x]+size[x]>=dfn[y]$\u65f6\uff0c\u5176\u4e2d$dfn$\u4e3a\u6b27\u62c9\u5e8f\uff0c$size$\u4e3a\u5b50\u6811\u5927\u5c0f\uff09\u624d\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u7528\u4e0b\u4e00\u4e2a\u70b9\u7684\u4fe1\u606f\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u3002\n\n\u5bf9\u4e8e\u4e24\u70b9\u95f4\u7684\u6700\u77ed\u6811\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u6765\u5bfb\u627e\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528st\u8868$O(1)$\u6c42\uff0c\u4f46\u8fd9\u9898\u5e76\u4e0d\u8981\u6c42\uff09\u3002\n\n```cpp\nlong long getmin(int x,int lca){\n    int ret=1e18;\n    for(int i=t-1;~i;--i){\n        if(dep[x]-(1<<i)>=dep[lca]){\n            ret=min(ret,c[x][i]);\n            x=fa[x][i];\n\t}\n    }\n    return ret;\n}\n\n```\n\n## 3.\u6811\u578bDP\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u4ed6\u4e00\u5b9a\u8981\u88ab\u5272\u6389\uff0c\u5219\u5f53\u524d\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u4e3a**\u5f53\u524d\u70b9\u5230\u7236\u4eb2\u8282\u70b9\u7684\u6700\u5c0f\u6811\u8fb9**\uff0c\u5426\u5219\u4e3a**\u6240\u6709\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u548c**\u548c**\u5f53\u524d\u70b9\u5230\u7236\u4eb2\u8282\u70b9\u7684\u6700\u5c0f\u6811\u8fb9**\u7684\u6700\u5c0f\u503c\u3002\n\n```cpp\nvoid dfs1(){\n\tint x=q[it];\n\tlong long ret=0;\n\twhile(1){\n\t\tif(it+1==q.size())break;\n\t    if(dfn[q[it+1]]<=dfn[x]+sz[x]-1){\n\t         int y=q[++it];\n\t         if(v[y]==1){\n\t         \t dfs1();\n\t\t\t     dp[y]=getmin(y,x);\n\t\t\t }\n\t         else dp[y]=1e18,dfs1(),dp[y]=min(dp[y],getmin(y,x));\n\t\t\t ret+=dp[y];\n\t\t}else break;\n\t}\n\tif(ret)dp[x]=min(dp[x],ret);\n}\n```\n\n\u4ee3\u7801\u4e2d\u7684it\u4e3a\u5f53\u524d\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u5728q\u4e2d\u7684\u7f16\u53f7\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u4e86,\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u7ec6\u8282\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=600010,t=20;\nint n;\nint tot,bian[N<<1],nxt[N<<1],zhi[N<<1],head[N];\nvoid add(int x,int y,int z){\n    tot++,bian[tot]=y,zhi[tot]=z,nxt[tot]=head[x],head[x]=tot;\n}\nint dfn[N],cnt;\nint fa[N][t],c[N][t],dep[N],sz[N];\nvector<int>q;\nbool cmp(int x,int y){\n    return dfn[x]<dfn[y];\n}\nvoid dfs(int x,int f){\n\tsz[x]=1;\n    dfn[x]=++cnt;\n    dep[x]=dep[f]+1;\n    fa[x][0]=f;\n    for(int i=1;i<t;++i){\n        fa[x][i]=fa[fa[x][i-1]][i-1];\n        c[x][i]=min(c[x][i-1],c[fa[x][i-1]][i-1]);\n\t}\n\tfor(int i=head[x];i;i=nxt[i]){\n\t    int y=bian[i];\n\t    if(y==f)continue;\n\t    c[y][0]=zhi[i];\n\t    dfs(y,x);\n\t    sz[x]+=sz[y];\n\t}\n}\nint LCA(int x,int y){\n    if(dep[x]<dep[y])swap(x,y);\n    for(int i=t-1;~i;--i){\n        if(dep[x]-(1<<i)>=dep[y]){\n            x=fa[x][i];\n\t\t}\n\t}\n\tif(x==y)return x;\n\tfor(int i=t-1;~i;--i){\n\t    if(fa[x][i]!=fa[y][i]){\n\t    \tx=fa[x][i],y=fa[y][i];\n\t\t}\n\t}\n\treturn fa[x][0];\n}\nlong long getmin(int x,int lca){\n    int ret=1e18;\n    for(int i=t-1;~i;--i){\n        if(dep[x]-(1<<i)>=dep[lca]){\n            ret=min(ret,c[x][i]);\n            x=fa[x][i];\n\t\t}\n\t}\n\treturn ret;\n}\n#define IT vector<int>::iterator\nlong long dp[N];\nint it,v[N];\nvoid dfs1(){\n\tint x=q[it];\n\tlong long ret=0;\n\twhile(1){\n\t\tif(it+1==q.size())break;\n\t    if(dfn[q[it+1]]<=dfn[x]+sz[x]-1){\n\t         int y=q[++it];\n\t         if(v[y]==1){\n\t         \t dfs1();\n\t\t\t     dp[y]=getmin(y,x);\n\t\t\t }\n\t         else dp[y]=1e18,dfs1(),dp[y]=min(dp[y],getmin(y,x));\n\t\t\t ret+=dp[y];\n\t\t}else break;\n\t}\n\tif(ret)dp[x]=min(dp[x],ret);\n}\nint main(){\n\tdfn[0]=1e9;\n    cin>>n;\n    for(int i=1;i<n;++i){\n        int x,y,z;\n        scanf(\"%d%d%d\",&x,&y,&z);\n        add(x,y,z);\n        add(y,x,z);\n\t}\n\tdfs(1,0);\n\tint T;\n\tcin>>T;\n\twhile(T--){\n\t\tq.clear();\n\t\tint m;\n\t\tscanf(\"%d\",&m);\n\t\tfor(int i=1;i<=m;++i){\n\t\t    int x;\n\t\t    scanf(\"%d\",&x);\n\t\t    v[x]=1;\n\t\t    q.push_back(x);\n\t\t}\n\t\tsort(q.begin(),q.end(),cmp);\n\t\tfor(int i=0;i<m-1;++i){\n\t\t    q.push_back(LCA(q[i],q[i+1]));\n\t\t}\n\t\tq.push_back(1);\n\t\tsort(q.begin(),q.end());\n\t\tq.erase(unique(q.begin(),q.end()),q.end());\n\t\tsort(q.begin(),q.end(),cmp);\n\t\tm=q.size();it=0;\n\t\tdp[q[0]]=1e18;\n\t\tdfs1();\n\t\tfor(int i=0;i<m;++i){\n\t\t    v[q[i]]=0;\n\t\t}\n\t\tprintf(\"%lld\\n\",dp[*q.begin()]);\n\t}\n}\n```\n",
        "postTime": 1553849270,
        "uid": 48143,
        "name": "zhenglier",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\u58f0\u660e\uff1a\u8fd9\u662f\u7ed9\u7ec3\u4e60\u865a\u6811\u7684\u4eba\u5199\u7684\u9898\u89e3\uff0c\u4e0d\u662f\u7ed9\u5b66\u4e60\u865a\u6811\u7684\u4eba\u5199\u7684\u9898\u89e3qwq\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u4e00\u68f5\u6811\uff0c\u6709\u8fb9\u6743\uff0c\u6c42\u8ba9\u6240\u6709\u6307\u5b9a\u70b9\u90fd\u4e0e $ 1 $ \u53f7\u8282\u70b9\u4e0d\u8054\u901a\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u591a\u6b21\u8be2\u95ee\u3002\n\n\u9996\u5148\u6211\u4eec\u5148\u60f3\u60f3\u5047\u5982\u662f\u5355\u6b21\u8be2\u95ee\u8be5\u600e\u4e48\u505a\u3002\n\n\u5f88\u7b80\u5355\u7684\u6811\u5f62 $ \\rm DP $\uff1a\n\n$\ndp[u]=\\sum_{v \\in \\text {u son}}\n\\begin{Bmatrix}\nval \\text{\uff08vis[v] = true\uff09}\\\\\n\\min(dp[v],val)\n\\end{Bmatrix}\n$\n\n~~\u56e0\u4e3a\u4e0d\u4f1a\u5199 $ \\LaTeX $ \u5c31\u8fd9\u4e48\u5c06\u5c31\u770b\u5427\u3002\u3002\u3002~~\n\n\u5176\u4e2d $ val $ \u662f\u8fb9\u6743\uff0c $ vis[u] $ \u8868\u793a $ u $ \u662f\u5426\u4e3a\u6307\u5b9a\u7684\u70b9\u3002\n\n\u663e\u7136\u6bcf\u6b21\u590d\u6742\u5ea6\u662f $ O(n) $\uff0c\u603b\u590d\u6742\u5ea6\u662f $ O(nm) $\u3002\n\n\u4f46\u662f\u6bcf\u4e00\u6b21\u5e76\u4e0d\u9700\u8981\u6240\u6709\u7684\u70b9\uff0c\u53ea\u9700\u8981\u4e00\u4e9b\u7279\u5b9a\u7684\u70b9\u5c31\u884c\u4e86\uff0c\u4e8e\u662f\u6709\u4e86\u865a\u6811\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u6307\u5b9a\u7684\u70b9\u548c\u4e00\u4e9b\u91cd\u8981\u7684\u70b9\uff08\u5982 $ \\rm LCA $\uff09\u3002\n\n\u6784\u5efa\u865a\u6811\u5c31\u4e0d\u8bf4\u4e86\uff0c\u56e0\u4e3a\u8fd9\u662f\u7ed9\u6765\u7ec3\u4e60\u865a\u6811\u800c\u4e0d\u662f\u5b66\u4e60\u865a\u6811\u7684\u4eba\u5199\u7684\u9898\u89e3qwq\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u6784\u5efa\u865a\u6811\u6765\u505a\u8fd9\u9053\u9898\u4e86\uff0c\u590d\u6742\u5ea6 $ O(n+(\\sum k)log(\\sum k)) $\n\n\u81ea\u5df1\u8e29\u8fc7\u4e00\u4e2a\u5751\uff0c\u5c31\u662f\u6bcf\u4e00\u6b21\u9012\u5f52\u5b50\u6811\u7ed3\u675f\u540e\u56e0\u4e3a $ dp $ \u503c\u5927\u4e8e\u8fb9\u6743\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u5bfc\u81f4\u5176\u4ed6\u5b50\u6811\u6ca1\u6709\u6e05\u7a7a $ head $ \u6570\u7ec4\u3002\u3002\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<algorithm>\n#include<cstdio>\nconst int M=250005;\nstruct Edge{\n    int to,val;\n    Edge*nx;\n}e[M<<1],*h[M],*cnt=e;\nint n,q,m,tot,dis,d[M],id[M],log[M],f[M][20],len[M][20];\nint top,a[M],stk[M];bool vis[M];\ninline int min(const int a,const int b){\n    return a>b?b:a;\n}\ninline bool cmp(const int u,const int v){\n    return id[u]<id[v];\n}\nvoid init(int u){\n    id[u]=++tot;\n    d[u]=d[f[u][0]]+1;\n    for(int i=1;(1<<i)<=d[u];++i){\n        f[u][i]=f[f[u][i-1]][i-1];\n        len[u][i]=min(len[u][i-1],len[f[u][i-1]][i-1]);\n    }\n    for(Edge*E=h[u];E;E=E->nx){\n        int v=E->to;\n        if(d[v])continue;\n        f[v][0]=u;len[v][0]=E->val;\n        init(v);\n    }\n    h[u]=NULL;\n}\ninline int LCA(int u,int v){\n    dis=0x7fffffff;\n    if(d[u]<d[v])u^=v^=u^=v;\n    while(d[u]!=d[v]){\n        int l=log[d[u]-d[v]];\n        dis=min(dis,len[u][l]);\n        u=f[u][l];\n    }\n    if(u==v)return u;\n    for(int i=log[d[u]];i>=0;--i){\n        if(f[u][i]!=f[v][i]){\n            dis=min(dis,min(len[u][i],len[v][i]));\n            u=f[u][i];v=f[v][i];\n        }\n    }\n    return f[u][0];\n}\nlong long DFS(int u,long long val){\n    long long dp=0;\n    for(Edge*E=h[u];E;E=E->nx){\n        int v=E->to;\n        dp+=min(E->val,DFS(v,E->val));\n    }\n    return h[u]=NULL,vis[u]?val:dp;\n}\ninline void Add(int u,int v,int val=0){\n    if(!val)LCA(u,v),val=dis;\n    *cnt=(Edge){v,val,h[u]};h[u]=cnt++;\n}\ninline void Insert(int u){\n    if(!top)return void(stk[++top]=u);\n    int v=LCA(stk[top],u);\n    for(;top>1&&d[v]<d[stk[top-1]];--top)Add(stk[top-1],stk[top]);\n    if(d[stk[top]]>d[v])Add(v,stk[top--]);\n    if(!top||stk[top]!=v)stk[++top]=v;\n    if(stk[top]!=u)stk[++top]=u;\n}\nsigned main(){\n    int i,x,y,z;\n    scanf(\"%d\",&n);log[0]=-1;\n    for(i=1;i<=n;++i)log[i]=log[i>>1]+1;\n    for(i=1;i<n;++i){ \n        scanf(\"%d%d%d\",&x,&y,&z);\n        Add(x,y,z);Add(y,x,z);\n    }\n    init(1);\n    scanf(\"%d\",&q);\n    while(q--){\n        cnt=e;top=0;\n        scanf(\"%d\",&m);\n        for(i=1;i<=m;++i)scanf(\"%d\",a+i),vis[a[i]]=true;\n        std::sort(a+1,a+m+1,cmp);\n        m=std::unique(a+1,a+m+1)-a-1;\n        stk[++top]=1;\n        for(i=1;i<=m;++i)Insert(a[i]);\n        while(--top)Add(stk[top],stk[top+1]);\n        printf(\"%lld\\n\",DFS(1,0x7fffffffffffffff));\n        for(i=1;i<=m;++i)vis[a[i]]=false;\n    }\n}\n```",
        "postTime": 1600053627,
        "uid": 160839,
        "name": "Prean",
        "ccfLevel": 7,
        "title": "\u6811\u8bba \u865a\u6811 P2495\u9898\u89e3"
    },
    {
        "content": "\n\u770b\u5230\u5927\u5bb6\u5b9a\u4e49\u72b6\u6001\u90fd\u57fa\u672c\u4e00\u81f4\uff0c\u672c\u9898\u89e3\u63d0\u4f9b\u4e00\u4e2a\u72b6\u6001\u5b9a\u4e49\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\n\n# \u77e5\u8bc6\u70b9\uff1a\u865a\u6811\n\n## 1 \u89e3\u51b3\u7684\u95ee\u9898\n\n- \u5bf9\u4e8e$T$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u5173\u952e\u70b9\u7684\u6570\u76ee\u4e3a$k$\uff0c\u4e14$\\sum k\\le 1e6$, \u5982\u679c\u6bcf\u6b21\u8be2\u95ee\u90fd\u904d\u5386\u6240\u6709\u7684\u70b9\uff0c\u5219\u4f1a\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230$O(TN)$\uff0c\u5f80\u5f80\u4e0d\u80fd\u627f\u53d7\uff0c\u865a\u6811\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4e3a$O(\\sum k)$\u6216\u8005$O(\\sum k \\log( k))$\n\n## 2 \u865a\u6811\u7684\u6027\u8d28\n\n- \u865a\u6811\u7ec4\u6210\uff1a\u4fdd\u7559\u6839\u8282\u70b9\uff0c\u6240\u6709\u7684\u5173\u952e\u70b9\u548c\u5173\u952e\u70b9\u7684$LCA$, \u5176\u4ed6\u8282\u70b9\u5220\u6389\u3002\n- \u5982\u679c\u5173\u952e\u8282\u70b9\u6709$k$\u4e2a\uff0c\u90a3\u4e48\u865a\u6811\u7684\u8282\u70b9\u4e0d\u4f1a\u8d85\u8fc7$2\\times k$\n  - \u6bcf\u6b21\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9\uff0c\u6700\u591a\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a$LCA$,\n  - \u8bbe\u6709\u4e24\u4e2a\u70b9$x,y$\uff0c\u73b0\u5728\u52a0\u5165\u8282\u70b9$z$,\u6211\u4eec$lca1=LCA(x,z), lca2=LCA(y,z)$\n    - \u82e5$dep[lca1]>dep[lca2]$\uff0c\u90a3\u4e48$LCA(x,y)=lca2$\n    - \u82e5$dep[lca1]<dep[lca2]$\uff0c\u90a3\u4e48$LCA(x,y)=lca1$\n    - \u82e5$dep[lca1]=dep[lca2]$\uff0c\u90a3\u4e48$LCA(x,y)=lca1=lca2$\n    - \u6545\u6700\u591a\u53ea\u4f1a\u589e\u52a01\u4e2a$LCA$, \u6700\u591a\u53ea\u6709$2k$\u4e2a\u8282\u70b9 \n\n## 3 \u865a\u6811\u7684\u6784\u5efa\n\n- \u5982\u679c\u6808\u4e3a\u7a7a,\u6216\u8005\u6808\u4e2d\u53ea\u6709\u4e00\u4e2a\u5143\u7d20,\u90a3\u4e48\u663e\u7136\u5e94\u8be5$stk[top++]=u,$\n- \u53d6$lca=LCA(u,stk[top - 1])$,\u5982\u679c$lca=stk[top - 1]$,\u5219\u8bf4\u660e$u$\u70b9\u5e94\u8be5\u63a5\u7740$stk[top - 1]$\u70b9\u5ef6\u957f\u5f53\u524d\u7684\u6811\u94fe, \u505a\u64cd\u4f5c$stk[top++] = u$\n- \u5982\u679c$lca\\not = stk[top]$,\u5219\u8bf4\u660e$u$\u4e0e$stk[top - 1] $\u5206\u5c5e$lca$\u7684\u4e24\u9897\u4e0d\u540c\u7684\u5b50\u6811, \u4e14\u5305\u542b$stk[top  -1]$\u7684\u8fd9\u9897\u5b50\u6811\u5e94\u8be5\u5df2\u7ecf\u6784\u5efa\u5b8c\u6210\u4e86,\u6211\u4eec\u9700\u8981\u505a\u7684\u662f:\u5c06$lca$\u7684\u5305\u542b$stk[top - 1]$\u5b50\u6811\u7684\u90a3\u90e8\u5206\u9000\u6808,\u5e76\u5c06\u8fd9\u90e8\u5206\u5efa\u8fb9\u5f62\u6210\u865a\u6811.\u5982\u679c$lca$\u4e0d\u5728\u6808(\u6811\u94fe)\u4e2d,\u90a3\u4e48\u8981\u628a$lca$\u4e5f\u52a0\u5165\u6808\u4e2d,\u4fdd\u8bc1\u865a\u6811\u7684\u7ed3\u6784\u4e0d\u51fa\u73b0\u95ee\u9898,\u968f\u540e\u5c06$u$\u52a0\u5165\u6808\u4e2d,\u4ee5\u8868\u5ef6\u957f\u6811\u94fe.\n\n## 4 \u9898\u76ee\u5206\u6790\n* \u5982\u679c\u6bcf\u6b21\u8be2\u95ee\u90fd\u5bf9n\u4e2a\u70b9\u8fdb\u884cdp\uff0c\u5219\u4f1a\u9020\u6210\u590d\u6742\u5ea6\u7206\u70b8\uff0c\u770b\u5230\u6761\u4ef6$\\sum k \\le 5e5$, \u6240\u4ee5\u91c7\u7528\u865a\u6811\n* \u5176\u4ed6\u9898\u89e3\u5b9a\u4e49\u7684\u72b6\u6001\u4e3a$dp(x)$\u8868\u793a\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u5173\u952e\u8282\u70b9\u548c\u70b91\u65ad\u5f00\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0c\u672c\u9898\u89e3\u5b9a\u4e49\u7684\u72b6\u6001$dp(x)$\u8868\u793a\uff0c\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u5185\uff0c\u5173\u952e\u8282\u70b9\u548c\u70b9$x$\u65ad\u5f00\u7684\u6700\u5c0f\u4ee3\u4ef7\n* \u5b9a\u4e49$D$\u4e3a\u5173\u952e\u8282\u70b9\u7684\u96c6\u5408\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\n$$\ndp(x) = \\sum_{j \\in son(x)} l(x, j)\n$$\n$$\nl(x, j) = \\left\\{\n\\begin{matrix}\nEdge(x,j), x\\in D\\\\\nmin(Edge(x,j), dp(j))), x \\not \\in D\n\\end{matrix}\n\\right.\n$$\n* \u5173\u952e\u518d\u53bb\u5982\u4f55\u6c42\u8fd9\u4e2a$Edge(x,j)$\uff0c\u7531\u4e8e\u5728\u865a\u6811\u6784\u5efa\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u8fdb\u884c\u7f29\u8fb9\uff0c\u6211\u4eec\u53d6$Edge(x,j)$\u4e3a\u4ece$x$\u5230$j$\u7684\u8def\u5f84\u4e0a\u8fb9\u7684\u6700\u5c0f\u503c\uff0c\u8fd9\u91cc\u91c7\u7528\u6811\u4e0a\u500d\u589e\u7ef4\u62a4\u6700\u5c0f\u503c, $Edge(x,j) = Enquiry(x, j)$\n  ```cpp\n  int Enquiry(int u, int pa){\n      int ret = INF;\n      int deltaDep = Dep[u] - Dep[pa];\n      for(int i = 0; i <= MAXH; ++i){\n          if((1 << i)&deltaDep){\n              ret = min(ret, valMin[u][i]);\n              //cout << u <<\" ... \" << i << valMin[u][i] << endl;\n              u = Pa[u][i];\n          }\n      }\n      return ret;\n  }\n  ```\n* \u5b8c\u6574\u4ee3\u7801\uff1a\n  ```cpp\n  #include <cstdio>\n    #include <cmath>\n    #include <cstring>\n    #include <iostream>\n    #include <algorithm>\n    using namespace std;\n    const int MAXN = 250005;\n    const int MAXE = 2500005;\n    const int INF = 0x3f3f3f3f;\n    int MAXH = 0;\n    struct Arcnode {\n      int u, v, w;\n      int next;\n    }Arcs[MAXE];\n    int Head[2][MAXN], aTop = -1;\n    int myStack[MAXN], sTop = 0;\n    int Mark[MAXN], QNode[MAXN];\n    int Dep[MAXN], Pa[MAXN][20], valMin[MAXN][20], Dfn[MAXN], Idx = 0;\n    void Init() { \n        memset(Head, -1, sizeof(Head));\n        aTop = -1; \n        return;\n    }\n    void Insert(int u, int v, int w, int flag = 0) {\n      Arcs[++aTop].u = u; Arcs[aTop].v = v; Arcs[aTop].w = w; Arcs[aTop].next = Head[flag][u]; Head[flag][u] = aTop;\n      Arcs[++aTop].u = v; Arcs[aTop].v = u; Arcs[aTop].w = w; Arcs[aTop].next = Head[flag][v]; Head[flag][v] = aTop;\n      return;\n    }\n    void Dfs(int u, int pa, int dep) {\n      Dfn[u] = ++Idx;\n        Pa[u][0] = pa;\n      Dep[u] = dep;\n      for (int i = Head[0][u]; ~i; i = Arcs[i].next) {\n          if (Arcs[i].v != pa) {\n                valMin[Arcs[i].v][0] = Arcs[i].w;\n                Dfs(Arcs[i].v, u, dep + 1);\n            }\n      }\n      return;\n    }\n\n    int Lca(int u, int v) {\n      if (Dep[u] < Dep[v])  swap(u, v);\n      int deltaDep = Dep[u] - Dep[v];\n      for (int i = 0; i <= MAXH; i++) {\n          if ((1 << i) & deltaDep) {\n              u = Pa[u][i];\n          }\n      }\n      if (u == v) { return u; }\n      else {\n          for (int i = MAXH; i >= 0; --i) {\n              if (Pa[u][i] != Pa[v][i]) {\n                  u = Pa[u][i];\n                  v = Pa[v][i];\n              }\n          }\n      }\n      return Pa[u][0];\n    }\n    bool Comp(int u, int v)\n    {\n        return Dfn[u] < Dfn[v];\n    }\n    int Enquiry(int u, int pa){\n      int ret = INF;\n      int deltaDep = Dep[u] - Dep[pa];\n      for(int i = 0; i <= MAXH; ++i){\n          if((1 << i)&deltaDep){\n              ret = min(ret, valMin[u][i]);\n                //cout << u <<\" ... \" << i << valMin[u][i] << endl;\n                u = Pa[u][i];\n          }\n      }\n        return ret;\n    }\n\n    void VirInsert(int u)\n    {\n        //cout << \"?\" << u << endl;\n        if(sTop == 1){\n            myStack[sTop ++] = u;\n            return;\n        }\n        //cout << \"??\" << endl;\n        int lca = Lca(u, myStack[sTop - 1]);\n        //cout << u << \" , \" << myStack[sTop - 1] << \" = \" << lca << endl;\n        if(lca == myStack[sTop - 1]){\n            myStack[sTop ++] = u;\n            return;\n        }\n        //cout << \"???\" << endl;\n        while(sTop > 1 && Dfn[lca] <= Dfn[myStack[sTop - 2]]){\n            //cout << myStack[sTop - 2] << \" * \" << myStack[sTop - 1] << \" = \" << Enquiry(myStack[sTop - 1], myStack[sTop - 2]) << endl;\n            Insert(myStack[sTop - 2], myStack[sTop - 1], Enquiry(myStack[sTop - 1], myStack[sTop - 2]), 1);\n            --sTop;\n        }\n        if(lca != myStack[sTop - 1]){\n            //cout << lca << \" * \" << myStack[sTop - 1] << \" = \" << Enquiry(myStack[sTop - 1], lca) << endl;\n            Insert(lca, myStack[sTop - 1], Enquiry(myStack[sTop - 1], lca), 1);\n            myStack[sTop - 1] = lca;\n        }\n        myStack[sTop ++] = u;\n        return;\n    }\n\n    long long TreeDp(int u, int pa)\n    {\n        //cout << \"!! \" << u << endl;\n        long long ret = 0;\n        for(int i = Head[1][u]; ~i; i = Arcs[i].next){\n            int v = Arcs[i].v;\n            if(v != pa){\n                if(Mark[v]){\n                    ret += (long long)(Arcs[i].w);\n                }\n                else{\n                    ret += min((long long)(Arcs[i].w), TreeDp(v, u));\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    void RemoveHead(int u, int pa)\n    {\n        for(int i = Head[1][u]; ~i; i = Arcs[i].next){\n            int v = Arcs[i].v;\n            if(v != pa){\n                RemoveHead(v, u);\n            }\n        }\n        Head[1][u] = -1;\n        return;\n    }\n    int main() {\n      int N, M;\n      scanf(\"%d\", &N);\n        Init();\n      MAXH = log(N) / log(2) + 1;\n      for (int i = 1; i < N; i++) {\n            //cout << i << \"#\" << endl;\n          int u, v, w;\n          scanf(\"%d%d%d\", &u, &v, &w);\n          Insert(u, v, w);\n      }\n      Dfs(1, 0, 0);\n        Pa[1][0] = 0;\n        valMin[1][0] = INF;\n      for (int i = 1; i <= MAXH; i++) {\n            for (int j = 1; j <= N; j++) {\n              Pa[j][i] = Pa[Pa[j][i - 1]][i - 1];\n                valMin[j][i] = min(valMin[j][i - 1], valMin[Pa[j][i - 1]][i - 1]);\n          }\n      }\n        scanf(\"%d\", &M);\n        for(int i = 1; i <= M; ++i){\n            //cout << i << \"*\" << endl;\n            int num;\n            scanf(\"%d\", &num);\n            for(int j = 0; j < num; ++j){\n                scanf(\"%d\", &QNode[j]);\n                //cout << QNode[j] << \" \";\n                Mark[QNode[j]] = 1;\n            }\n            //cout << endl;\n            sort(QNode, QNode + num, Comp);\n            sTop = 0;\n            myStack[sTop ++] = 1;\n            for(int j = 0; j < num; ++j){\n                VirInsert(QNode[j]);\n            }\n            while(sTop > 1) {\n                //cout << myStack[sTop - 2] << \" * \" << myStack[sTop - 1] << \" = \" << Enquiry(myStack[sTop - 1], myStack[sTop - 2]) << endl;\n                Insert(myStack[sTop - 2], myStack[sTop - 1], Enquiry(myStack[sTop - 1], myStack[sTop - 2]), 1);\n                sTop--;\n            }\n            printf(\"%lld\\n\", TreeDp(1, 0));\n            RemoveHead(1, 0);\n            for(int j = 0; j < num; ++j){\n                Mark[QNode[j]] = 0;\n            }\n        }\n      return 0;\n    }\n  ```\n\n\n## Reference\uff1a\nhttps://blog.csdn.net/weixin_37517391/article/details/82744605\nhttps://blog.csdn.net/ouqingliang/article/details/81669281\n",
        "postTime": 1587364254,
        "uid": 19009,
        "name": "bxd1998",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "# P2495 [SDOI2011] \u6d88\u8017\u6218 \u9898\u89e3\r\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2495)\r\n\r\n\u672c\u849f\u84bb\u7b2c\u4e00\u7bc7\u9898\u89e3\u3002\r\n\r\n\u672c\u9898\u4e3a\u865a\u6811\u7684\u6a21\u677f\u9898\u3002\r\n\u770b\u9898\u89e3\u533a\u7684\u5927\u4f6c\u90fd\u662f\u7528\u624b\u5199\u6808\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u865a\u6811\uff0c\u4e0b\u9762\u63d0\u4f9b\u4e00\u79cd\u4f7f\u7528 STL \u4e2d\u7684 stack \u5b9e\u73b0\u865a\u6811\u5efa\u7acb\u7684\u5f62\u5f0f\u3002\u5e76\u4e14\u4ee5\u5c3d\u91cf\u901a\u4fd7\u6613\u61c2\u7684\u65b9\u5f0f\u8bb2\u89e3\u865a\u6811\u7684\u5efa\u7acb\u8fc7\u7a0b\u3002\r\n## \t\u4ec0\u4e48\u662f\u865a\u6811\r\n\u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u68f5\u65e0\u6839\u6811\uff0c\u5b83\u7684\u8fde\u901a\u5b50\u56fe\u5c31\u662f\u4e00\u68f5\u865a\u6811\u3002\r\n\r\n\u6211\u4eec\u53ef\u80fd\u4f1a\u78b0\u5230\u4e00\u7c7b\u95ee\u9898\uff0c\u95ee\u9898\u7684\u7b54\u6848\u53ea\u4e0e\u7ed9\u5b9a\u7684\u6811\u4e0a\u7684\u67d0\u4e9b\u5173\u952e\u8282\u70b9\u6709\u5173\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u865a\u6811\uff0c\u4ec5\u4ec5\u7ef4\u62a4\u90e8\u5206\u5173\u952e\u8282\u70b9\uff0c\u4f7f\u5f97\u5904\u7406\u4e00\u6b21\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u964d\u3002\r\n\r\n\u90a3\u4e48\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u5efa\u7acb\u5305\u542b\u5173\u952e\u70b9\u7684**\u6700\u5c0f\u7684**\u4e00\u68f5\u865a\u6811\u3002\r\n## \t\u600e\u6837\u5efa\u7acb\u865a\u6811\r\n\u4e3a\u4e86\u4f7f\u5f97\u6211\u4eec\u7684\u865a\u6811\u6700\u5c0f\uff0c\u6211\u4eec\u5c31\u8981\u5ffd\u7565\u6389\u5173\u952e\u70b9\u4e4b\u95f4\u7684\u82e5\u5e72\u975e\u5173\u952e\u70b9\uff0c\u4f46\u4e5f\u81f3\u5c11\u8981\u6ee1\u8db3\u5efa\u7acb\u6811\u7684\u57fa\u672c\u5f62\u6001\u8fd9\u4e00\u6761\u4ef6\u3002\r\n\r\n\u57fa\u4e8e\u8fd9\u6837\u4e00\u79cd\u9700\u6c42\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u5bfb\u627e $lca$ \u4f5c\u4e3a\u5173\u952e\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u70b9\u3002\r\n\r\n\u5e76\u4e14\uff0c\u4e3a\u4e86\u5728\u5efa\u7acb\u865a\u6811\u7684\u8fc7\u7a0b\u4e2d\u6709\u5e8f\u5730\u5904\u7406\u8282\u70b9\uff0c\u6211\u4eec\u5148\u8fdb\u884c\u4e00\u6b21 dfs \u5f97\u5230\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684 dfs \u5e8f\u3002\u4e8e\u6b64\u540c\u65f6\u8fdb\u884c\u4e00\u4e9b\u9884\u5904\u7406\u7684\u5de5\u4f5c\u3002\r\n## \t\u865a\u6811\u7684\u5b9e\u73b0\u5de5\u5177\r\n\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6808\u6765\u7ef4\u62a4\u70b9\u7684\u961f\u5217\uff0c\u6808\u7684\u610f\u4e49\u662f\u5f88\u91cd\u8981\u7684\uff1a\u70b9\u5728\u6808\u4e2d\uff0c\u8bf4\u660e\u5b83\u4e0e\u5b83**\u4e4b\u524d\u7684\u70b9**\u5177\u6709**\u76f4\u63a5\u7684\u7236\u5b50\u5173\u7cfb**\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u524d\u9762\u7684\u70b9\u662f\u540e\u9762\u8282\u70b9\u7684\u7236\u8282\u70b9\u3002\r\n\r\n\u7136\u540e\uff0c\u5bf9\u6240\u6709\u5173\u952e\u70b9\u6309 dfs \u5e8f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6709\u5e8f\u5730\u5904\u7406\u8fd9\u4e9b\u5173\u952e\u70b9\u4e86\u3002\r\n## \t\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\r\n\u9996\u5148\uff0c\u53d6\u51fa\u4e00\u4e2a\u5173\u952e\u70b9\u8bb0\u4e3a $now$\uff0c\u5c06\u5176\u4e0e\u6808\u9876\u5143\u7d20\u6c42\u4e00\u4e2a $lca$\u3002\r\n\r\n\u5982\u679c $lca$ \u5c0f\u4e8e\u6808\u9876\u5143\u7d20\u7684 dfs \u5e8f\uff0c\u4e00\u76f4\u5f39\u6808\uff0c\u76f4\u81f3\u6808\u9876\u5143\u7d20 dfs \u5e8f**\u4e0d\u5c0f\u4e8e**\u5b83\u3002\r\n\r\n\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u6709\u4e24\u4e2a\u52a0\u8fb9\u64cd\u4f5c\uff1a\r\n\r\n\u7b2c\u4e00\uff0c\u5f39\u6808\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u5c06**\u5f39\u51fa\u5143\u7d20**\u4e0e\u6808\u9876\u5143\u7d20\u8fde\u8fb9\u3002\r\n\r\n\u7b2c\u4e8c\uff0c\u5f39\u6808\u7ed3\u675f\u65f6(\u6b64\u65f6\u6808\u9876\u5143\u7d20 dfs \u5e8f\u4e0d\u5c0f\u4e8e $lca$)\uff0c\u5c06 $lca$ \u4e0e**\u521a\u521a\u5f39\u51fa\u7684\u5143\u7d20**\u52a0\u8fb9\u3002\r\n\r\n\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u64cd\u4f5c\u6a21\u5f0f\uff1a\r\n\r\n\u4e3a\u4ec0\u4e48\u8981\u5f39\u6808\uff1f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u628a $lca$ \u52a0\u5165\u961f\u5217\uff0c\u800c\u6b64\u65f6 $lca$ \u7684 dfs \u5e8f\u66f4\u5c0f\uff0c\r\n\u8fd8\u8bb0\u5f97\u6808\u7684\u610f\u4e49\u5417\uff0c\u8fd9\u5c31\u8868\u660e\u8fd9\u4e2a $lca$ \u662f\u6808\u9876\u5143\u7d20\u7684**\u7236\u8282\u70b9**\uff0c\u672c\u6765\u5e94\u8be5\u662f\u628a\u5b83\u63d2\u5230\u6808\u9876\u5143\u7d20**\u524d\u9762**\u7684\u3002\r\n\r\n\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u65ad\u5f39\u6808\uff0c\u4ee5\u4fbf\u8ba9 $lca$ \u5230\u8fbe\u5408\u9002\u7684\u4f4d\u7f6e\u3002\u8fd9\u671f\u95f4\uff0c\u5f53\u7136\u8981\u4e0d\u505c\u52a0\u8fb9\uff0c\u56e0\u4e3a**\u672c\u6765**\u6808\u4e2d\u7684\u5143\u7d20\u5c31\u5efa\u7acb\u4e86\u7236\u5b50\u5173\u7cfb\uff0c\u65e2\u7136\u8981\u628a\u5b83\u4eec\u5f39\u51fa\uff0c\u5c31\u5fc5\u987b\u5f97\u52a0\u8fb9\u6765\u7ef4\u62a4\u5b83\u4eec\u7684\u5173\u7cfb\u3002\r\n\r\n\u5f39\u6808\u7ed3\u675f\u65f6\u7684\u52a0\u8fb9\u4e5f\u662f\u540c\u7406\uff0c\u5f53 $lca$ \u5165\u6808\u65f6\uff0c\u5b83\u7684\u5b50\u8282\u70b9\u5df2\u7ecf\u5f39\u51fa\u4e86\uff0c\u5f97\u628a\u4e8c\u8005\u52a0\u8fb9\u624d\u884c\u3002\r\n\r\n\u8bb2\u5b8c\u4e86\u5c0f\u4e8e\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u7684\u5c31\u5f88\u597d\u7406\u89e3\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u4f59\u7684\u60c5\u51b5\u672c\u8d28\u4e0a**\u90fd\u662f\u5f39\u6808\u7ed3\u675f\u540e**\u51fa\u73b0\u7684\u60c5\u51b5\uff1a\r\n\r\n\u5982\u679c\u7b49\u4e8e\uff0c\u8bf4\u660e $lca$ \u5df2\u7ecf\u5728\u6808\u4e2d\uff0c\u4e0d\u52a0\u5165 $lca$\u3002\r\n\r\n\u5982\u679c\u5927\u4e8e\uff0c\u8bf4\u660e\u6808\u9876\u5143\u7d20\u5c31\u662f $lca$ \u7684\u7236\u8282\u70b9\uff0c\u76f4\u63a5\u5165\u6808\u5c31\u53ef\u4ee5\u6ee1\u8db3\u6808\u4e2d\u7684\u7236\u5b50\u5173\u7cfb\uff08\u5f53\u7136\u4e5f\u8981\u5982\u524d\u6587\u6240\u8ff0\uff0c\u628a\u5b83\u4e0e\u521a\u521a\u5f39\u51fa\u7684\u5143\u7d20\u8fde\u8fb9\uff09\u3002\r\n\r\n**\u6700\u540e\u522b\u5fd8\u4e86\u8ba9 $now$ \u5165\u6808**\u3002\r\n\r\n\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u81f3\u5904\u7406\u5b8c\u6240\u6709\u5173\u952e\u70b9\u3002\r\n\r\n\u6700\u540e\u4e0d\u65ad\u5f39\u6808\uff0c\u540c\u6837\u7684\uff0c\u76f8\u90bb\u7684\u70b9\u5efa\u7acb\u7236\u5b50\u8fb9\uff0c\u76f4\u81f3\u6808\u53ea\u7559\u4e0b\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u865a\u6811\u5c31\u5efa\u597d\u4e86\u3002\r\n\r\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u4ee5\u6700\u540e\u7559\u4e0b\u7684\u5143\u7d20\u4e3a\u6839\u8fdb\u884c dp\u3002\r\n### \t\u5c0f\u7ed3\r\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u6837\u4e00\u4e2a\u5efa\u6811\u7684\u8fc7\u7a0b\u548c\u6bcf\u6b21\u52a0\u8fb9\u7684\u539f\u5219\uff0c\u5176\u5b9e\u8bf4\u767d\u4e86\uff0c\u5c31\u662f**\u59cb\u7ec8\u4fdd\u6301**\u6808\u4e2d\u524d\u540e\u5143\u7d20\u7684\u7236\u5b50\u5173\u7cfb\u6210\u7acb\uff0c\u5982\u679c\u4e0d\u6210\u7acb\uff0c\u6211\u4eec\u5c31\u8981\u901a\u8fc7\u5f39\u6808\u7b49\u64cd\u4f5c\u4f7f\u5176\u6210\u7acb\u3002\r\n## \t\u4e00\u4e9b\u7ec6\u8282\r\n\u5047\u5982\u6211\u4eec\u9ed8\u8ba4 dfs \u4ece$1$\u5f00\u59cb\uff0c\u90a3\u4e48\u5728\u521d\u59cb\u7684\u6808\u4e2d\u6211\u4eec\u901a\u5e38\u4e60\u60ef\u5c06$1$\u52a0\u5165\u6808\uff0c\u4f7f\u521d\u59cb\u7684\u6808\u4e0d\u4e3a\u7a7a\u3002\r\n\r\n\u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u5f97\u6808**\u6c38\u4e0d\u4e3a\u7a7a**\uff08\u56e0\u4e3a$1$\u7684 dfs \u5e8f\u6700\u5c0f\uff09\uff0c\u9632\u6b62\u5728\u5904\u7406\u6808\u4e2d\u5143\u7d20\u8fc7\u7a0b\u4e2d\u56e0\u4e3a\u6808\u4e3a\u7a7a\u5bfc\u81f4\u4e00\u4e9b\u64cd\u4f5c\u6210\u4e3a\u672a\u5b9a\u4e49\u7684**\u975e\u6cd5\u64cd\u4f5c**\u3002\r\n\r\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u7684\u8bdd\u6700\u540e\u5f39\u6808\u65f6\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5c31\u662f$1$\u4e86\uff0c\u53ef\u4ee5\u4ece$1$\u5f00\u59cb\u8fdb\u884c dp\u3002\r\n\r\n\u7136\u540e\u518d\u63d0\u4e00\u63d0\u624b\u5199\u6808\u4e0e STL \u7684 stack \u5728\u5b9e\u73b0\u865a\u6811\u4e0a\u7684\u5dee\u5f02\uff1a\r\n\r\n\u4ed4\u7ec6\u89c2\u5bdf\u6211\u4eec\u7684\u5177\u4f53\u5efa\u7acb\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684\u52a0\u8fb9\u64cd\u4f5c\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\uff0c\u5373**\u521a\u5f39\u51fa\u7684\u5143\u7d20\u548c\u6808\u9876\u5143\u7d20**\uff0c\u5982\u679c\u4f7f\u7528 stack\uff0c\u90a3\u4e48\u9700\u8981\u4e24\u4e2a\u53d8\u91cf\uff0c\u5148\u7ef4\u62a4\u524d\u8005\uff0c\u5f39\u6808\u4e4b\u540e\u518d\u7ef4\u62a4\u540e\u8005\u3002\r\n\r\n\u800c\u624b\u5199\u6808\u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4 $sta[top]$ \u548c $sta[top-1]$ \u5c31\u66f4\u4e3a\u5feb\u6377\u7b80\u4fbf\u3002\u4f46\u662f\u5bf9\u4e8e\u624b\u5199\u6808\u4e0d\u719f\u6089\u7684\u540c\u5b66~~\u6bd4\u5982\u672c\u849f\u84bb~~\uff0c\u4f7f\u7528 stack \u6765\u5b9e\u73b0\u5219\u66f4\u4e3a\u76f4\u89c2\u3002\r\n\r\n## \t\u5728\u672c\u9898\u7684\u5e94\u7528\r\n\u56de\u5230\u672c\u9898\uff0c\u6211\u4eec\u4e4b\u6240\u4ee5\u8981\u5e94\u7528\u865a\u6811\uff0c\u662f\u56e0\u4e3a\u6240\u8981\u89e3\u51b3\u7684\u95ee\u9898\u53ea\u4e0e\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\u6709\u5173\uff0c\u800c\u4e0e\u5176\u4ed6\u5c9b\u5c7f\u65e0\u5173\uff0c\u5e76\u4e14\u5c9b\u5c7f\u4e4b\u95f4\u7684\u5173\u7cfb\u6ee1\u8db3\u6811\u5f62\u8fde\u63a5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\u5f53\u505a\u6211\u4eec\u7684\u5173\u952e\u70b9\uff0c\u7528\u865a\u6811\u6765\u7ef4\u62a4\u3002\r\n\r\n\u70b8\u6bc1\u6865\u6881\u5c31\u76f8\u5f53\u4e8e\u5728\u865a\u6811\u4e0a\u5c06\u5173\u952e\u70b9\u5272\u6389\u3002\r\n\r\n\u4e3a\u4e86\u5f97\u5230\u6700\u5c0f\u4ee3\u4ef7\uff0c\u6211\u4eec\u9700\u8981\u5728\u865a\u6811\u4e0a\u8fdb\u884c\u6811\u5f62 dp \u6c42\u89e3\u3002\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4f7f\u7528\u673a\u5668\uff0c\u91cd\u65b0\u7ef4\u62a4\u4e00\u68f5\u865a\u6811\u5373\u53ef\u3002\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u4e00\u8f6e dfs \u4e2d\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9\u7684 $minn$ \u503c\uff0c\u8fd9\u4e2a\u503c\u8868\u793a\u5272\u53bb\u8fd9\u4e2a\u70b9\u6240\u9700\u8981\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\r\n\r\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $u$\uff0c\u8bbe\u5b83\u7684\u5b50\u8282\u70b9\u4e3a $v$\uff0c\u6709 $minn(v)=\\min(minn(u),w(u,v))$ \r\n\r\n$minn$ \u503c\u76f8\u5f53\u4e8e\u4ece\u6839\u5230\u67d0\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u3002\r\n\r\n\u90a3\u4e48\uff0c\u6211\u4eec\u6709\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a\r\n$$\r\ndp(u) =\r\n\\begin{cases}\r\nminn(u), & \\text{\u5982\u679c $u$ \u662f\u5173\u952e\u70b9} \\\\\r\n\\min(minn(u),\\sum\\limits_{v\\in Son(u)} dp(v)), & \\text{\u5982\u679c $u$ \u4e0d\u662f\u5173\u952e\u70b9}\r\n\\end{cases}\r\n$$\r\n## \t\u9644\u4e0a\u4ee3\u7801\r\n```cpp\r\n#include<bits/stdc++.h>\r\n#define int long long\r\n#define LINF LLONG_MAX\r\n#define maxn 500000+10\r\nusing namespace std;\r\nint n,m;\r\nstruct line{int to,pre,w;};\r\nline b[2*maxn],b1[2*maxn];\r\nint head[maxn],t,head1[maxn],t1;\r\nint dfn[maxn],f[maxn],d[maxn],anc[maxn][33],maxlog,cnt,minn[maxn];\r\nint a[maxn];\r\nset<int>s;//\u7528\u4e8e\u6807\u8bb0\u70b9\u662f\u5426\u662f\u5173\u952e\u70b9\uff0c\u4e5f\u53ef\u4ee5\u7528\u6807\u8bb0\u6570\u7ec4 \r\nstack<int>q;\r\ninline bool cmp(const int &x,const int &y){return dfn[x]<dfn[y];}\r\nvoid ad(int x,int y,int z)\r\n{\r\n\tt++;\r\n\tb[t].to=y;\r\n\tb[t].w=z;\r\n\tb[t].pre=head[x];\r\n\thead[x]=t;\r\n}\r\n\r\n//\u52a0\u865a\u6811\u8fb9 \r\nvoid ad1(int x,int y)\r\n{\r\n\tt1++;\r\n\tb1[t1].to=y;\r\n\tb1[t1].pre=head1[x];\r\n\thead1[x]=t1;\r\n}\r\n\r\n\r\nvoid dfs(int u,int fa)\r\n{\r\n\tdfn[u]=++cnt;\r\n\tf[u]=fa;\r\n\td[u]=d[fa]+1;\r\n\tanc[u][0]=fa;\r\n\tfor(int i=1;i<=maxlog;++i) \r\n\tif(anc[u][i-1]!=-1)\r\n\tanc[u][i]=anc[anc[u][i-1]][i-1];\r\n\tfor(int i=head[u];i;i=b[i].pre)\r\n\t{\r\n\t\tint v=b[i].to;\r\n\t\tif(v!=fa)\r\n\t\t{\r\n\t\t\tminn[v]=min(minn[u],b[i].w);\r\n\t\t\tdfs(v,u);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nint dp(int u)\r\n{\r\n\tint temp=0,sum=0;\r\n\tfor(int i=head1[u];i;i=b1[i].pre)\r\n\t{\r\n\t\tint v=b1[i].to;\r\n\t\tsum+=dp(v);\r\n\t}\r\n\tif(s.find(u)!=s.end())temp=minn[u];\r\n\telse temp=min(minn[u],sum);\r\n\thead1[u]=0;//\u56de\u6eaf\u65f6\u987a\u4fbf\u5c06\u865a\u6811\u6e05\u7a7a \r\n\treturn temp;\r\n}\r\n\r\n//\u500d\u589e\u6c42lca \r\nint getlca(int x,int y)\r\n{\r\n\tif(d[x]<d[y])swap(x,y);\r\n\tfor(int i=maxlog;i>=0;--i)\r\n\tif(d[anc[x][i]]>=d[y]) x=anc[x][i];\r\n\tif(x==y)return x;\r\n\tfor(int i=maxlog;i>=0;i--)\r\n\t{\r\n\t\tif(anc[x][i]!=anc[y][i])\r\n\t\t{\r\n\t\t\tx=anc[x][i];\r\n\t\t\ty=anc[y][i];\r\n\t\t}\r\n\t}\r\n\treturn anc[x][0];\r\n}\r\n\r\n\r\nsigned main()\r\n{\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n\tmemset(anc,-1,sizeof(anc));\r\n\tmaxlog=(int)(log(maxn)/log(2));\r\n\tminn[1]=LINF;\r\n\tcin>>n;\r\n\tfor(int i=1;i<=n-1;++i)\r\n\t{\r\n\t\tint x,y,z;\r\n\t\tcin>>x>>y>>z;\r\n\t\tad(x,y,z);\r\n\t\tad(y,x,z);\r\n\t}\r\n\tdfs(1,0);\r\n\tcin>>m;\r\n\twhile(m--)\r\n\t{\r\n\t\ts.clear();\r\n\t\tint k;\r\n\t\tcin>>k;\r\n\t\tt1=0;\r\n\t\tfor(int i=1;i<=k;++i)cin>>a[i],s.insert(a[i]);\r\n\t\tsort(a+1,a+1+k,cmp);\r\n\t\tq.push(1);\r\n\t\tint u,v;\r\n\t\tfor(int i=1;i<=k;++i)\r\n\t\t{\r\n\t\t\tif (a[i]==1) continue;\r\n\t\t\tint now=a[i];\r\n\t\t\tint lca=getlca(now,q.top());\r\n\t\t\tint u,v;//\u8fd9\u91ccv\u7528\u6765\u5b58\u50a8\u521a\u5f39\u51fa\u7684\u5143\u7d20\uff0cu\u7528\u6765\u5b58\u50a8\u6808\u9876\u5143\u7d20 \r\n\t\t\tif (lca!=q.top()){\r\n\t\t\t\tv=q.top(); q.pop();\r\n\t\t\t\twhile(dfn[lca]<dfn[q.top()])\r\n\t\t\t\t{\r\n\t\t\t\t\tu=q.top(); ad1(u,v);\r\n\t\t\t\t\tv=q.top(); q.pop();\r\n\t\t\t\t}\r\n\t\t\t\tif (lca!=q.top()){\r\n\t\t\t\t\tad1(lca,v); q.push(lca);\r\n\t\t\t\t}\r\n\t\t\t\telse ad1(lca,v);\r\n\t\t\t}\r\n\t\t\tq.push(now);\r\n\t\t}\r\n\t\twhile(1)\r\n\t\t{\r\n\t\t\tv=q.top(); q.pop();\r\n\t\t\tif(q.empty())break;//\u7531\u4e8e\u5728\u8fd9\u4e00\u6b65break\uff0c\u53ef\u4ee5\u8bc1\u660e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u88ab\u5b58\u5728\u4e86u\u91cc \r\n\t\t\tu=q.top();\r\n\t\t\tad1(u,v);\r\n\t\t}\r\n\t\tcout<<dp(u)<<endl;\r\n\t\t//cout<<u<<endl; \r\n\t\t//for(int i=head1[u];i;i=b1[i].pre)cout<<b1[i].to<<\" \";\r\n\t\t//while(!q.empty())cout<<q.top()<<\" \",q.pop();\r\n\t}\r\n\treturn 0;\r\n}\r\n```\r\n",
        "postTime": 1658238475,
        "uid": 625380,
        "name": "FriedrichC",
        "ccfLevel": 0,
        "title": "\u7528 STL stack \u5b9e\u73b0\u865a\u6811"
    },
    {
        "content": "\u672c\u9898\u662f\u865a\u6811\u7684\u5165\u95e8\u7ea7\u7ec3\u4e60\u9898, \u5c31\u8bb2\u4e00\u4e0b\u865a\u6811...?\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u9897\u6811, m \u6b21\u8be2\u95ee, \u53ef\u4ee5\u5272\u65ad\u4e00\u4e9b\u8fb9, \u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa$c_i$\u4e2a\u5173\u952e\u70b9$d_{i, 1}, d_{i, 2}, \\cdots d_{i, c_i}$, \u6c42\u5272\u65ad\u4e00\u4e9b\u8fb9\u7684\u6700\u5c0f\u4ee3\u4ef7, \u4f7f\u5f97\u5272\u65ad\u8fd9\u4e9b\u8fb9\u540e 1 \u53f7\u8282\u70b9\u4e0d\u4e0e\u4efb\u4f55\u5173\u952e\u70b9\u76f8\u8fde.\n\n### \u89e3\u6cd5\n\n\u5efa\u7acb\u865a\u6811\u5e76\u4e14\u5728\u5176\u4e0a DP. \u4ee4$c_i$\u8868\u793a$i$\u5230\u6839\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743, \u7279\u522b\u7684, $c_1 = -\\infty$. \u8bbe$f_i$\u8868\u793a\u865a\u6811\u4e0a\u5272\u65ad$i$\u8282\u70b9\u5b50\u6811\u4e2d\u6240\u6709\u5173\u952e\u70b9\u7684\u6700\u5c0f\u4ee3\u4ef7, \u6709$f_i = \\min\\{\\sum\\limits_{j \\in son(i)} f_j, c_i\\}$\n\n\u5927\u591a\u6570\u795e\u4ed9\u5199\u865a\u6811\u65f6\u90fd\u662f\u5efa\u6811\u7684, \u8fd9\u91cc\u53ef\u4ee5\u5229\u7528 SI \u795e\u4ed9\u7684\u4e00\u79cd\u601d\u8def: \u6c42\u51fa\u6b27\u62c9\u5e8f. \u6211\u4eec\u6c42\u51fa\u6b27\u62c9\u5e8f\u4e4b\u540e\u5f88\u660e\u663e\u53ef\u4ee5\u76f4\u63a5\u7528\u4e00\u4e2a\u6808\u6a21\u62df dfs \u7684\u8fc7\u7a0b. \u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5173\u952e\u70b9\u548c dfs \u5e8f\u76f8\u90bb\u7684\u8282\u70b9\u7684 lca \u7ef4\u62a4\u51fa\u6765. \u90a3\u4e48\u5f88\u660e\u663e\u539f\u6811\u4e0a\u7684\u6b27\u62c9\u5e8f\u5927\u5c0f\u5173\u7cfb\u5728\u65b0\u6811\u4e0a\u8fd8\u662f\u6709\u7528\u7684, \u56e0\u6b64\u6211\u4eec\u6392\u4e00\u904d\u5e8f\u5c31\u53ef\u4ee5\u6392\u51fa\u6bcf\u4e2a\u8282\u70b9\u6b27\u62c9\u5e8f\u7684\u5927\u5c0f\u5173\u7cfb\u4e86\u5c31\u53ef\u4ee5\u77e5\u9053\u5982\u4f55\u5165\u6808\u5f39\u6808\u4e86. \u5224\u65ad\u4e00\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\u662f\u5426\u5df2\u7ecf\u5168\u90e8\u88ab\u904d\u5386\u4e86\u53ef\u4ee5\u7528\u6b27\u62c9\u5e8f.\n\n\u672c\u9898\u6709\u591a\u7ec4\u8be2\u95ee, \u5f88\u660e\u663e\u76f4\u63a5\u6e05\u7a7a\u6570\u7ec4\u662f\u4f1a\u7206\u7684. \u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u4e0d\u4e00\u6837\u7684\u65b9\u6cd5(\u53ef\u80fd\u53ea\u7528\u6211\u8fd9\u6837\u7684\u83dc\u9e21\u6e05\u7a7a\u6570\u7ec4\u7684\u65f6\u5019\u4f1a\u60f3\u4e86 /kk): \u4f7f\u7528\u65f6\u95f4\u6233. \u6bcf\u6b21\u8981\u6539\u6570\u7ec4\u7684\u65f6\u5019\u770b\u65f6\u95f4\u6233\u76f8\u4e0d\u76f8\u540c\u6765\u5224\u65ad\u662f\u4e0d\u662f\u4f7f\u7528\u4ee5\u524d\u7684\u503c, \u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca.\n\n\u4ee3\u7801:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define f(i,x,y) for(int i=x,i##end=y;i<=i##end;++i)\n#define d(i,x,y) for(int i=x,i##end=y;i>=i##end;--i)\n#define ri register int\n#define ll long long\n#define int long long\n#define il inline\n#define _ 500005\nnamespace imt {\n\tint head[_], ver[_], Next[_], edge[_], tot, cnt;\n\tint dep[_], val[_], mn[_], in[_], out[_], fa[_][21], n, x, y, z;\n\tvoid add(int u, int v, int w) {\n\t\tver[++tot]=v, edge[tot]=w, Next[tot]=head[u], head[u]=tot;\n\t} \n\tvoid dfs(int u, int f) {\n\t\tin[u]=++cnt; fa[u][0]=f; dep[u]=dep[f]+1;\n\t\tfor(int i=head[u], v, w; i; i=Next[i]) {\n\t\t\tv=ver[i]; w=edge[i];\n\t\t\tif(v==f) continue;\n\t\t\tmn[v]=min(mn[u], w); dfs(v, u);\n\t\t}\n\t\tout[u]=++cnt;\n\t}\n\tint lca(int x, int y) {\n\t\tif(dep[x]<dep[y]) swap(x, y);\n\t\td(i,20,0) if(dep[fa[x][i]]>=dep[y]) x=fa[x][i];\n\t\tif(x==y) return x;\n\t\td(i,20,0) if(fa[x][i]!=fa[y][i]) x=fa[x][i], y=fa[y][i];\n\t\treturn fa[x][0];\n\t}\n\tvoid init() {\n\t\tscanf(\"%lld\", &n);\n\t\tf(i,1,n-1) {\n\t\t\tscanf(\"%lld%lld%lld\", &x, &y, &z);\n\t\t\tadd(x, y, z); add(y, x, z);\n\t\t}\n\t\tmn[1] = (1LL)<<(60LL); dfs(1, 0);\n\t\tf(t,1,20) f(i,1,n) fa[i][t]=fa[fa[i][t-1]][t-1];\n\t\tprint();\n\t} /*\u500d\u589e\u677f\u5b50, \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684*/\n\tstack<int> stk; // \u7528\u6765\u6a21\u62df dfs\n\tint cmp(int x, int y) {\n\t\treturn ((x>0)?in[x]:out[-x])<((y>0)?in[y]:out[-y]);\n\t} // \u7528\u6765\u7ed9\u865a\u6811\u4e0a\u7684\u6b27\u62c9\u5e8f\u6392\u5e8f\n\ttypedef pair<long long, int> arr;\n\tarr f[_], tag[_];\n\tlong long gv(arr x, int tim) {\n\t\treturn x.second==tim?x.first:0;\n\t} // \u5982\u679c\u8fd9\u4e2a\u6570\u7684\u65f6\u95f4\u6233\u7b49\u4e8e\u73b0\u5728\u7684\u65f6\u95f4\u6233\u5c31\u7528\u73b0\u5728\u7684\u6743\u503c, \u5426\u5219\u7528 0\n\tvoid addval(arr& x, int v, int tim) {\n\t\tif(x.second!=tim) x.first=0, x.second=tim;\n\t\tx.first += v;\n\t} // \u5982\u679c\u8fd9\u4e2a\u6570\u7684\u65f6\u95f4\u6233\u7b49\u4e8e\u73b0\u5728\u7684\u65f6\u95f4\u6233\u5c31\u76f4\u63a5\u4fee\u6539, \u5426\u5219\u5148\u6e05\u7a7a\u518d\u6539\u65f6\u95f4\u6233\n\tvoid solve(int len, int dot[], int tim) {\n\t\tf(i,1,len) {tag[dot[i]]=make_pair(1, tim); f[dot[i]]=make_pair(mn[dot[i]], tim);}\n\t\tsort(dot+1, dot+1+len, cmp);\n\t\tf(i,1,len-1) {\n\t\t\tint r=lca(dot[i], dot[i+1]);\n\t\t\tif(!gv(tag[r], tim)) {dot[++len]=r; tag[r]=make_pair(1, tim);}\n\t\t}\n\t\tif(!gv(tag[1], tim)) {dot[++len]=1; tag[1]=make_pair(1, tim);} // \u6c42\u51fa\u865a\u6811\u4e2d\u7684\u8282\u70b9\n\t\tf(i,1,len) dot[++len]=-dot[i]; sort(dot+1, dot+1+len, cmp); // \u6c42\u51fa\u865a\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u6b27\u62c9\u5e8f\n\t\twhile(stk.size()) stk.pop();\n\t\tf(i,1,len) {\n\t\t\tif(dot[i]>0) stk.push(dot[i]);\n\t\t\telse {\n\t\t\t\tint p=stk.top(); stk.pop();\n\t\t\t\tif(p!=1) {\n\t\t\t\t\taddval(f[stk.top()], gv(f[p], tim), tim); // DP \u8f6c\u79fb\n\t\t\t\t\tif(dot[i+1]==-stk.top()) f[stk.top()].first = min(f[stk.top()].first, mn[stk.top()]); // \u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u4e0b\u4e00\u4e2a\u5c06\u4f1a\u88ab\u5f39\u51fa (\u5c31\u662f\u5df2\u7ecf\u904d\u5386\u5b8c\u4e86\u5b83\u7684\u6240\u6709\u5b50\u8282\u70b9)\n\t\t\t\t}\n\t\t\t\telse printf(\"%lld\\n\", gv(f[1], tim));\n\t\t\t}\n\t\t}\n\t}\n} ;\nint m, l, qwq[_];\nsigned main() {\n\timt::init();\n\tscanf(\"%lld\", &m);\n\twhile(m--) {\n\t\tscanf(\"%lld\", &l); f(i,1,l) scanf(\"%lld\", &qwq[i]);\n\t\timt::solve(l, qwq, m); // \u76f4\u63a5\u7528\u6b64\u65f6\u7684 m \u5f53\u65f6\u95f4\u6233\u5c31\u53ef\u4ee5\u4e86\n\t}\n\treturn 0;\n}\n/*\n10\n1 5 13\n1 9 6\n2 1 19\n2 4 8\n2 3 91\n5 6 8\n7 5 4\n7 8 31\n10 7 9\n3\n2 10 6\n4 5 7 8 3\n3 9 4 6\n*/\n```",
        "postTime": 1589878152,
        "uid": 133345,
        "name": "lightup37",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "\n\u9898\u76ee\u5927\u610f\n\n\u82e5\u6709\u4e00\u9897\u5e26\u8fb9\u6743\u7684\u6811\uff0c\u4e14\u6bcf\u6b21\u8be2\u95ee$k$\u4e2a\u8282\u70b9\uff0c\u95ee$k$\u4e2a\u8282\u70b9\u5747\u4e0d\u4e0e1\u53f7\u8282\u70b9\u76f8\u8fde\u7684\u6700\u5c0f\u8fb9\u6743\u3002\n\n\u8bd5\u9898\u5206\u6790\n\n\u8003\u8651\u66b4\u529b$dp$,\u8bbe$dp_i$\u4e3a\u5904\u7406\u597di\u7684\u5b50\u6811\u7684\u6700\u5c0f\u8fb9\u6743\uff0c\u6211\u4eec\u5b9a\u4e49$val_i$\u4e3a\u4ece$i$\u5230\u6839\u7684\u6700\u5c0f\u8fb9\u6743\uff0c\u5219$dp_i=min(\\sum dp_v,val_i)$\u3002\n\n\u4f46\u662f\u53d1\u73b0\u5176\u5b9e\u6709\u4e00\u4e9b\u8282\u70b9\u662f\u6ca1\u6709\u7528\u7684\uff0c\u6709\u7528\u7684\u5176\u5b9e\u662f$lca$\u3002\u5e76\u4e14\u53d1\u73b0$\\sum k_i  \\leq 5\\times 10^5$\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u5c06\u6811\u8fdb\u884c\u7b80\u5316\u3002\n\n\u6240\u4ee5\u5c31\u6709\u4e00\u4e2a\u7b97\u6cd5\u8bde\u751f\u4e86\uff0c\u865a\u6811\u3002\u6211\u4eec\u7528\u6b27\u62c9\u5e8f\u5efa\u51fa\u4e00\u9897\u53ea\u5305\u542b\u6709\u7528\u8282\u70b9\u7684\u6811\uff0c\u7136\u540e\u518d\u66b4\u529b$dp$\u5c31\u884c\u3002\n```\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<stack>\n#define int long long\n#include<climits>\nusing namespace std;\ninline int read(){\n    int f=1,ans=0;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){ans=ans*10+c-'0';c=getchar();}\n    return f*ans;\n}\nconst int N=500001;\nstruct node{\n    int u,v,w,nex;\n}x[N<<1];\nint val[N],head[N],n,fa[N][21],deep[N],num,in[N],out[N],cnt,q;\nvoid dfs(int f,int fath,int W){\n    val[f]=min(val[fath],W);\n    deep[f]=deep[fath]+1,in[f]=++num;\n    fa[f][0]=fath;\n    for(int i=1;(1<<i)<=deep[f];i++) fa[f][i]=fa[fa[f][i-1]][i-1];\n    for(int i=head[f];i!=-1;i=x[i].nex){\n        if(x[i].v==fath) continue;\n        dfs(x[i].v,f,x[i].w);\n    }\n    out[f]=++num;\n}\nvoid add(int u,int v,int w){\n    x[cnt].u=u,x[cnt].v=v,x[cnt].w=w,x[cnt].nex=head[u],head[u]=cnt++;\n}\nint book[N],sta[N];\nbool cmp(int x,int y){\n    int s1,s2;\n    if(x>0) s1=in[x];else s1=out[-x];\n    if(y>0) s2=in[y];else s2=out[-y];\n    return s1<s2;\n}\nint lca(int u,int v){\n    if(deep[u]<deep[v]) swap(u,v);\n    for(int i=20;i>=0;i--)\n        if(deep[u]-(1<<i)>=deep[v]) u=fa[u][i];\n    if(u==v) return u;\n    for(int i=20;i>=0;i--){\n        if(fa[u][i]==fa[v][i]) continue;\n        u=fa[u][i],v=fa[v][i];\n    }return fa[u][0];\n}\nstack<int> s;\nint dp[N];\nsigned main(){\n    memset(head,-1,sizeof(head));\n    n=read();val[0]=LLONG_MAX;\n    for(int i=1;i<n;i++){\n        int u=read(),v=read(),w=read();\n        add(u,v,w),add(v,u,w);\n    }q=read();\n    dfs(1,0,LLONG_MAX);\n    while(q--){\n         int st=read();\n         for(int i=1;i<=st;i++) sta[i]=read(),book[sta[i]]=1,dp[sta[i]]=val[sta[i]];\n         sort(sta+1,sta+st+1,cmp);\n         for(int i=1;i<st;i++){\n             int Lca=lca(sta[i],sta[i+1]);\n             if(!book[Lca]){book[Lca]=1;sta[++st]=Lca;}\n         }\n         int Now=st;\n         for(int i=1;i<=Now;i++) sta[++st]=-sta[i];\n         if(!book[1]) sta[++st]=1,sta[++st]=-1;\n         sort(sta+1,sta+st+1,cmp);\n         for(int i=1;i<=st;i++){\n             if(sta[i]>0) s.push(sta[i]);\n             else{\n                 int f=s.top();s.pop();\n                 if(f!=1){int fath=s.top();dp[fath]+=min(dp[f],val[f]);}\n                 else{printf(\"%lld\\n\",dp[1]);}\n                 dp[f]=book[f]=0;\n             }\n        }\n    }\n}\n```",
        "postTime": 1546008526,
        "uid": 87382,
        "name": "_sry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    },
    {
        "content": "```cpp\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <ctime>\n#include <vector>\n#include <queue>\n#include <map>\n#include <set>\n#ifdef WIN32\n#define OT \"%I64d\"\n#else\n#define OT \"%lld\"\n#endif\nusing namespace std;\ntypedef long long LL;\nconst int MAXN = 250011;\nLL inf;//inf\u4e0d\u80fd\u5f00\u5c0f\u4e86\nint n,m,ecnt,tot,id[MAXN],k;\nint first[MAXN],next[MAXN*2],to[MAXN*2],w[MAXN*2];\nLL val[MAXN];//\u8fd9\u4e2a\u70b9\u5230\u6839\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\nint jump[MAXN][19],deep[MAXN];\nint que[MAXN],top,Stack[MAXN];\nint head[MAXN];\nLL f[MAXN];\n\ninline int getint() {\n\tint w=0,q=0;\n\tchar c=getchar();\n\twhile((c<'0' || c>'9') && c!='-') c=getchar();\n\tif (c=='-')  q=1, c=getchar();\n\twhile (c>='0' && c<='9') w=w*10+c-'0', c=getchar();\n\treturn q ? -w : w;\n}\n\nstruct edge {\n\tint to,next;\n} e[MAXN];\n\ninline LL min(LL x,LL y) {\n\tif(x<y) return x;\n\treturn y;\n}\n\ninline void dfs(int x,int fa) {\n\tjump[x][0]=fa;\n\tid[x]=++ecnt;//\u4f5c\u51fadfs\u5e8f\n\tfor(int i=1; i<=18; i++) jump[x][i]=jump[jump[x][i-1]][i-1];\n\tfor(int i=first[x]; i; i=next[i]) {\n\t\tint v=to[i];\n\t\tif(v==fa) continue;\n\t\tval[v]=min(w[i],val[x]);\n\t\tdeep[v]=deep[x]+1;\n\t\tdfs(v,x);\n\t}\n}\n\ninline bool cmp(int a,int b) {\n\treturn id[a]<id[b];\n}\n\ninline int lca(int x,int y) {\n\tif(deep[x]<deep[y]) swap(x,y);\n\tint t=0;\n\twhile((1<<t) <= deep[x]) t++;\n\tt--;\n\tfor(int i=t; i>=0; i--) if(deep[x]-(1<<i)>=deep[y]) x=jump[x][i];\n\tif(x==y) return y;\n\tfor(int i=t; i>=0; i--) if(jump[x][i]!=jump[y][i]) {\n\t\t\tx=jump[x][i];\n\t\t\ty=jump[y][i];\n\t\t}\n\treturn jump[x][0];\n}\n\ninline void link(int x,int y) {\n\tif(x==y) return ;\n\te[++ecnt].next=head[x];\n\thead[x]=ecnt;\n\te[ecnt].to=y;\n}\n\ninline void dp(int x) {\n\tLL lin=0;\n\tf[x]=val[x];\n\tfor(int i=head[x]; i; i=e[i].next) {\n\t\tdp(e[i].to);\n\t\tlin+=f[e[i].to];\n\t}\n\thead[x]=0;//\u9000\u51fa\u7684\u65f6\u5019\u987a\u4fbf\u6e05\u7a7a\n\tif(!lin) f[x]=val[x];\n\telse if(lin<f[x]) f[x]=lin;\n}\n\ninline void solve() { //\u65ad\u7edd\u5230\u6839\u7ed3\u70b91\u7684\u8def\u5f84\n\tm=getint();\n\tfor(int i=1; i<=m; i++) que[i]=getint();\n\tsort(que+1,que+m+1,cmp);//\u6309dfs\u5e8f\u6392\u5e8f\n\ttot=0;\n\tque[++tot]=que[1];\n\tfor(int i=2; i<=m; i++) if(lca(que[i],que[tot])!=que[tot]) que[++tot]=que[i]; //\u5e94\u8be5\u662f\u548ctot\u6bd4\u8f83\n\t//\u5728\u4e0b\u9762\u7684\u80af\u5b9a\u4e0d\u7528\u8ba1\u7b97\uff0c\u53ea\u8981\u5207\u65ad\u4e0a\u90e8\u7684\u5373\u53ef\n\ttop=0;\n\tStack[++top]=1;\n\tint grand;//\u6700\u8fd1\u516c\u5171\u7956\u5148\n\tecnt=0;\n\tfor(int i=1; i<=tot; i++) { //\u5206\u7c7b\u8ba8\u8bba\n\t\tgrand=lca(Stack[top],que[i]);\n\t\twhile(1) {\n\t\t\tif(deep[Stack[top-1]]<=deep[grand]) {//\u5206\u522b\u5904\u5728\u4e24\u4e2a\u5b50\u6811\uff0cgrand\u6df1\u5ea6\u66f4\u5927\uff01\uff01\uff01\n\t\t\t\tlink(grand,Stack[top]);\n\t\t\t\ttop--;\n\t\t\t\tif(Stack[top]!=grand) Stack[++top]=grand;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlink(Stack[top-1],Stack[top]);\n\t\t\ttop--;\n\t\t}\n\t\tif(Stack[top]!=que[i]) Stack[++top]=que[i];//\u5728\u540c\u4e00\u5b50\u6811\n\t}\n\ttop--;\n\twhile(top) link(Stack[top],Stack[top+1]),top--;//\u5269\u4f59\u7684\u8bb0\u5f97\u8fde\u4e0a\n\tdp(1);\n\tprintf(OT\"\\n\",f[1]);\n}\n\ninline void work() {\n\tn=getint();\n\tint x,y,z;\n\tinf=1;\n\tfor(int i=1; i<=60; i++) inf*=2;\n\tfor(int i=1; i<n; i++) {\n\t\tx=getint();\n\t\ty=getint();\n\t\tz=getint();\n\t\tnext[++ecnt]=first[x];\n\t\tfirst[x]=ecnt;\n\t\tto[ecnt]=y;\n\t\tw[ecnt]=z;\n\t\tnext[++ecnt]=first[y];\n\t\tfirst[y]=ecnt;\n\t\tto[ecnt]=x;\n\t\tw[ecnt]=z;\n\t}\n\tval[1]=inf;\n\tecnt=0;\n\tdeep[1]=0;\n\tdfs(1,0);\n\tk=getint();\n\tfor(int i=1; i<=k; i++) solve();\n}\n\nint main() {\n\twork();\n\treturn 0;\n}\n```\n",
        "postTime": 1555848111,
        "uid": 155661,
        "name": "\u5c71\u6c34\u4e00\u7a0b_",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2495 \u3010[SDOI2011]\u6d88\u8017\u6218\u3011"
    }
]