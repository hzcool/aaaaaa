[
    {
        "content": "\u6839\u672c\u4e0d\u9700\u8981\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u8fd9\u662f\u4e00\u4e2a\u65e0\u6743\u56fe\u6700\u77ed\u8def\uff0c\u6240\u4ee5\u76f4\u63a5 BFS \u5c31\u884c\u3002\n\n\u4e5f\u4e0d\u9700\u8981\u663e\u5f0f\u5efa\u56fe\uff0c\u76f4\u63a5 BFS \u8f6c\u79fb\u5373\u53ef\u3002\n\n\u72b6\u6001 $(i,j)$ \u8868\u793a\uff0c\u5f53\u524d\u5728\u7b2c $i$ \u4e2a\u70b9\uff0c\u5f53\u524d\u7684 doge \u8df3\u8dc3\u80fd\u529b\u4e3a $j$\u3002\n\n\u5f53 $j \\le \\sqrt{n}$ \u65f6\uff0c\u53ea\u6709 $n \\sqrt{n}$ \u4e2a\u72b6\u6001\u3002\n\n\u5f53 $j \\gt \\sqrt{n}$ \u65f6\uff0c\u53ea\u6709 $m \\sqrt{n}$ \u4e2a\u72b6\u6001\uff08\u6700\u591a\u6709 $m$ \u53ea doge\uff0c\u6bcf\u53ea doge \u53ea\u6709 $\\frac{n}{j}\\lt \\sqrt{n}$ \u4e2a\u53ef\u884c\u4f4d\u7f6e\uff09\u3002\n\n$(i,j)$ \u53ef\u4ee5\u8f6c\u79fb\u5230 $(i-j, j)(i-j\\ge0)$ \u548c $(i+j,j) (i+j\\lt n)$\uff0c\u540c\u65f6\u5bf9\u4e8e\u7b2c\u4e00\u6b21\u8bbf\u95ee\u5230\u7684 $i$\uff0c\u628a\u521d\u59cb\u5728 $i$ \u7684\u6240\u6709 doge \u52a0\u5165\u961f\u5217\u3002\n\n\u72b6\u6001\u5224\u91cd\u65f6\u4f7f\u7528 `std::set` \u4f1a TLE\uff0c\u53ef\u4ee5\u7528 hash \u6216\u8005 `std::bitset`\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O((n+m)\\sqrt{n})$\u3002\n\n\u53e6\u5916\u539f\u9898\u6570\u636e\u6709\u70b9\u6c34\uff0c\u540c\u65f6\u6d1b\u8c37\u53ea\u53d6\u4e86\u539f\u9898\u7684\u5f88\u5c11\u4e00\u90e8\u5206\u6570\u636e\u6240\u4ee5\u66f4\u6c34\uff0c\u5efa\u8bae\u5927\u5bb6\u53bb [UOJ](http://uoj.ac/problem/111) \u63d0\u4ea4\u6b64\u9898\u4ee5\u8fdb\u4e00\u6b65\u68c0\u9a8c\u7a0b\u5e8f\u6b63\u786e\u6027\u3002\n\n```cpp\n#include <queue>\n#include <tuple>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nconst int maxN = 30005;\n\nint N, M, S, T;\nstd::vector<int> Doge[maxN];\nstd::queue<std::tuple<int, int, int>> Q;\nstd::bitset<maxN> vis[maxN];\nbool Vis[maxN];\n\nvoid insert(int i, int p, int step)\n{\n\tif (!Vis[i])\n\t{\n\t\tVis[i] = true;\n\t\tfor (auto x : Doge[i])\n\t\t\tif (!vis[i].test(x))\n\t\t\t\tvis[i].set(x), Q.emplace(i, x, step);\n\t}\n\tif (!vis[i].test(p))\n\t\tvis[i].set(p), Q.emplace(i, p, step);\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &N, &M);\n\tfor (int i = 0, b, p; i != M; ++i)\n\t{\n\t\tscanf(\"%d%d\", &b, &p);\n\t\tif (i == 0)\n\t\t\tS = b;\n\t\tif (i == 1)\n\t\t\tT = b;\n\t\tDoge[b].push_back(p);\n\t}\n\n\tif (S == T)\n\t{\n\t\tputs(\"0\");\n\t\treturn 0;\n\t}\n\n\tVis[S] = true;\n\tfor (auto x : Doge[S])\n\t\tif (!vis[S].test(x))\n\t\t{\n\t\t\tvis[S].set(x);\n\t\t\tQ.emplace(S, x, 0);\n\t\t}\n\n\twhile (!Q.empty())\n\t{\n\t\tint i, p, step;\n\t\tstd::tie(i, p, step) = Q.front();\n\t\tQ.pop();\n\t\tif (i - p == T || i + p == T)\n\t\t{\n\t\t\tprintf(\"%d\\n\", step + 1);\n\t\t\treturn 0;\n\t\t}\n\t\tif (i - p >= 0)\n\t\t\tinsert(i - p, p, step + 1);\n\t\tif (i + p < N)\n\t\t\tinsert(i + p, p, step + 1);\n\t}\n\n\tputs(\"-1\");\n\n\treturn 0;\n}\n```",
        "postTime": 1553007545,
        "uid": 3144,
        "name": "\u6d6e\u5c18ii",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "## \u4e00\u79cd\u5efa\u6a21\u65b9\u6cd5\uff08\u76f4\u63a5\u8fde\u8fb9\uff09\r\n\r\n\u5bf9\u4e8e\u6bcf\u4e2a doge \u6240\u5728\u70b9\uff0c\u6211\u4eec\u76f4\u63a5\u4ece\u51fa\u53d1\u70b9\u5411\u5176\u53ef\u8fbe\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a\u9700\u8981\u8df3\u7684\u6b65\u6570\u3002\r\n\r\n\u5728\u5efa\u6210\u7684\u56fe\u4e0a\u76f4\u63a5\u8dd1\u6700\u77ed\u8def\u5373\u53ef\u3002\r\n\r\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56fe\u4e0a\u7684\u8fb9\u89c4\u6a21\u6700\u5927\u53ef\u80fd\u8fbe\u5230 $O(n^2)$\uff08\u672c\u6587\u9ed8\u8ba4 $n,m$ \u540c\u9636\uff09\u3002\r\n\r\n## \u53e6\u4e00\u79cd\u5efa\u6a21\u65b9\u6cd5\uff08\u5206\u5c42\u56fe\uff09\r\n\r\n\u6211\u4eec\u53d1\u73b0\u76f4\u63a5\u8fde\u8fb9\u8fc7\u7a0b\u4e2d\uff0c\u8fb9\u53ef\u4ee5\u62c6\u5206\u3002\r\n\r\n\u4f8b\u5982 $u \\to p \\to v$ \u8fd9\u6761\u8def\u5f84\uff0c\u6211\u4eec\u8fde\u4e86 $u \\to p$\uff0c$u \\to v$ \u4e24\u6761\u8fb9\uff0c\u4e8b\u5b9e\u4e0a\u6211\u4eec\u53ef\u4ee5\u8fde $u \\to p$\uff0c$p \\to v$ \u8fd9\u4e24\u6761\u8fb9\uff0c\u8fbe\u5230\u540c\u6837\u7684\u76ee\u7684\u3002\r\n\r\n\u4f46\u662f\u76f4\u63a5\u5728\u539f\u56fe\u4e0a\u8fde\u8fb9\u4f1a\u51fa\u95ee\u9898\u3002\u539f\u56e0\u5728\u4e8e\u6211\u4eec\u5230\u67d0\u4e2a\u4e2d\u95f4\u70b9\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u4e00\u5b9a\u80fd\u5c31\u5730\u66f4\u6362 doge\u3002\r\n\r\n\u8003\u8651\u5efa\u7acb\u5206\u5c42\u56fe\u3002\u5bf9\u4e8e\u6bcf\u4e2a doge \u5efa\u7acb $n$ \u4e2a\u70b9\uff0c\u8fd9 $n$ \u4e2a\u70b9\u4e4b\u95f4\u6309\u4e0a\u6587\u7684\u65b9\u5f0f\u8fde\u8fb9\uff0c\u540c\u65f6\u8fd9 $n$ \u4e2a\u70b9\u53ef\u4ee5\u5411\u539f\u56fe\u76f8\u5bf9\u5e94\u7684\u70b9\uff0c\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u5355\u5411\u8fb9\uff08\u8868\u793a\u53ef\u4ee5\u66f4\u6362 doge\uff09\uff0c\u4ece\u539f\u56fe\u4e2d doge \u6240\u5728\u7684\u51fa\u53d1\u4f4d\u7f6e\u5411\u5176\u6240\u5728\u7684\u5c42\u4e2d\u7684\u5bf9\u5e94\u70b9\uff0c\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u5355\u5411\u8fb9\uff08\u610f\u4e49\u540c\u4e0a\uff09\u3002\r\n\r\n\u4e8b\u5b9e\u4e0a\u8fd9\u79cd\u5efa\u6a21\u65b9\u5f0f\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u8fde\u8fb9\u7684\u6570\u91cf\u4ecd\u7136\u4e3a $O(n^2)$\u3002\r\n\r\n## \u6ee1\u5206\u505a\u6cd5\r\n\r\n\u8054\u60f3\u5230\u6839\u53f7\u5206\u6cbb\uff0c\u6211\u4eec\u60f3\u5230\u4e00\u79cd\u5229\u7528\u5206\u5757\u601d\u60f3\uff0c\u7ed3\u5408\u4e0a\u9762\u4e24\u79cd\u5efa\u56fe\u65b9\u5f0f\uff0c\u5b9e\u73b0\u4f18\u5316\u7684\u65b9\u6cd5\uff1a\u8bbe\u7f6e\u4e00\u4e2a\u5206\u754c\u70b9 $k$\uff0c\u5bf9\u4e8e $p \\leq k$ \u7684 doge\uff0c\u91c7\u7528\u5206\u5c42\u56fe\u65b9\u5f0f\u5efa\u56fe\uff0c\u800c\u5bf9\u4e8e $p \\geq k$ \u7684 doge\uff0c\u5219\u91c7\u7528\u76f4\u63a5\u8fde\u8fb9\u7684\u65b9\u5f0f\u5efa\u56fe\u3002\r\n\r\n\u95ee\u9898\u5728\u4e8e\u8fd9\u4e2a\u5206\u754c\u70b9 $k$ \u8be5\u53d6\u5230\u591a\u5c11\uff1f\r\n\r\n\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u5f53 $k=\\sqrt{\\dfrac{n}{3}}$ \u65f6\uff0c\u56fe\u4e0a\u7684\u8fb9\u6570\u8fbe\u5230\u6700\u5c11\u3002\r\n\r\n\u4e0b\u9762\u662f\u8bc1\u660e\uff1a\r\n\r\n- \u5bf9\u4e8e\u91c7\u7528\u5206\u5c42\u56fe\u5efa\u56fe\u7684\u90e8\u5206\uff0c\u6bcf\u4e2a\u5c42\u7684\u70b9\u9700\u8981\u8fde\u4e09\u6761\u8fb9\uff08\u4e00\u6761\u5411\u5de6\uff0c\u4e00\u6761\u5411\u53f3\uff0c\u8fd8\u6709\u4e00\u6761\u8fde\u5411\u539f\u56fe\u4e0a\u7684\u76f8\u5e94\u70b9\uff09\uff0c\u56e0\u4e3a\u4e00\u5171\u6709 $k$ \u5c42\uff0c\u6545\u6700\u591a\u9700\u8981 $3kn$ \u6761\u8fb9\u3002\r\n- \u5bf9\u4e8e\u76f4\u63a5\u8fde\u8fb9\u5efa\u56fe\u7684\u90e8\u5206\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u9700\u8981\u5bf9\u5916\u8fde $\\dfrac{n}{k}$ \u6761\u8fb9\uff0c\u6545\u6700\u591a\u6709 $\\dfrac{n^2}{k}$ \u6761\u8fb9\u3002\r\n- \u5373\u603b\u8fb9\u6570\u4e3a $3kn+\\dfrac{n^2}{k}$ \u6761\u8fb9\u3002\r\n- \u7531\u5747\u503c\u4e0d\u7b49\u5f0f\u53ef\u77e5\uff0c\u5f53 $3kn=\\dfrac{n^2}{k}$\uff0c\u5373 $k=\\sqrt{\\dfrac{n}{3}}$ \u65f6\uff0c\u56fe\u4e0a\u7684\u8fb9\u6570\u8fbe\u5230\u6700\u5c0f\u503c $2n\\sqrt{3n}$\u3002\r\n\r\n## \u7ec6\u8282\r\n\r\n1. \u628a\u56fe\u5efa\u51fa\u6765\u9700\u8981\u7684\u5185\u5b58\u7a7a\u95f4\u8f83\u5927\uff08\u867d\u7136\u6ce8\u610f\u5b9e\u73b0\u7ec6\u8282\u7684\u8bdd\uff0c\u5e76\u4e0d\u4f1a\u8d85\u8fc7\u5185\u5b58\u9650\u5236\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4e0d\u663e\u5f0f\u8fde\u8fb9\uff0c\u800c\u662f\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u8fdb\u884c\u8ba8\u8bba\u3002\r\n2. \u603b\u70b9\u6570\u548c\u8fb9\u6570\u8f83\u5927\uff0c\u6ce8\u610f\u5e38\u6570\u3002\r\n\r\n```cpp\r\n// Problem: P3645 [APIO2015] \u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\r\n// Contest: Luogu\r\n// URL: https://www.luogu.com.cn/problem/P3645\r\n// Author : StudyingFather\r\n// Site : https://studyingfather.com\r\n// Memory Limit: 256 MB\r\n// Time Limit: 1000 ms\r\n//\r\n// Powered by CP Editor (https://cpeditor.org)\r\n\r\n#include <cmath>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <queue>\r\nusing namespace std;\r\ntypedef pair<int, int> pii;\r\nconst int INF = 0x3f3f3f3f;\r\nstruct edge {\r\n  int v, w, next;\r\n} e[18000005];\r\nint head[3100005], id[105][30005], dis[3100005], cnt;\r\nbool vis[3100005];\r\nint n, m;\r\nvoid addedge(int u, int v, int w) {\r\n  e[++cnt].v = v;\r\n  e[cnt].w = w;\r\n  e[cnt].next = head[u];\r\n  head[u] = cnt;\r\n}\r\nint dijkstra(int s, int t) {\r\n  priority_queue<pii, vector<pii>, greater<pii> > pq;\r\n  memset(dis, INF, sizeof(dis));\r\n  dis[s] = 0;\r\n  pq.push(make_pair(0, s));\r\n  while (!pq.empty()) {\r\n    int u = pq.top().second;\r\n    pq.pop();\r\n    if (vis[u]) continue;\r\n    vis[u] = true;\r\n    for (int i = head[u]; i; i = e[i].next) {\r\n      int v = e[i].v;\r\n      if (dis[v] > dis[u] + e[i].w) {\r\n        dis[v] = dis[u] + e[i].w;\r\n        pq.push(make_pair(dis[v], v));\r\n      }\r\n    }\r\n  }\r\n  return dis[t] != INF ? dis[t] : -1;\r\n}\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin >> n >> m;\r\n  int maxp = sqrt(n / 3);\r\n  int s, t;\r\n  for (int i = 1; i <= maxp; i++)\r\n    for (int j = 0; j < n; j++) id[i][j] = i * n + j;\r\n  for (int i = 1; i <= maxp; i++)\r\n    for (int j = 0; j < n; j++) {\r\n      addedge(id[i][j], j, 0);\r\n      if (i + j >= n) break;\r\n      addedge(id[i][j], id[i][j + i], 1);\r\n      addedge(id[i][j + i], id[i][j], 1);\r\n    }\r\n  for (int i = 0; i < m; i++) {\r\n    int b, p;\r\n    cin >> b >> p;\r\n    if (p <= maxp)\r\n      addedge(b, id[p][b], 0);\r\n    else {\r\n      for (int j = 1; b + j * p < n; j++) addedge(b, b + j * p, j);\r\n      for (int j = 1; b - j * p >= 0; j++) addedge(b, b - j * p, j);\r\n    }\r\n    if (i == 0) s = b;\r\n    if (i == 1) t = b;\r\n  }\r\n  for (int i = 1; i <= maxp; i++)\r\n    for (int j = 0; j < n; j++)\r\n      if (head[id[i][j]]) addedge(id[i][j], j, 0);\r\n  cout << dijkstra(s, t) << endl;\r\n  return 0;\r\n}\r\n```",
        "postTime": 1596372403,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p3645-apio2015%E9%9B%85%E5%8A%A0%E8%BE%BE%E7%9A%84%E6%91%A9%E5%A4%A9%E6%A5%BC/)\n\n---\n# Solution\n\u4e0e\u5176\u8bf4\u8fd9\u9898\u662f\u5206\u5757\u5999\u9898\uff0c\u6211\u66f4\u503e\u5411\u4e8e\u628a\u8fd9\u9898\u79f0\u4e3a\u5206\u5c42\u56fe\u5999\u9898\u3002\n\n\u8fd9\u9898\u6709\u4e00\u4e2a\u4e00\u773c\u8d2a\u5fc3\u505a\u6cd5\uff1a**\u5bf9\u4e8e\u6bcf\u53eadoge\uff0c\u6211\u4eec\u90fd\u66b4\u529b\u5730\u53bb\u5efa\u5b83\u8fde\u5411\u5b83\u80fd\u8df3\u5230\u7684\u70b9\u7684\u8fb9\uff0c\u8fb9\u6743\u4e3a\u8df3\u7684\u6b21\u6570\u3002\u7136\u540e\u76f4\u63a5\u6c42\u4e00\u904d\u5355\u5143\u6700\u77ed\u8def\u5373\u53ef**\u3002\n\n\u5f88\u663e\u7136\uff0c\u8fd9\u73a9\u610f\u7684\u8fb9\u7684\u6570\u91cf\u662f$O(n^2)$\u7684\uff0c\u6c42\u4e00\u904d\u6700\u77ed\u8def\u7684\u590d\u6742\u5ea6\u8fbe\u5230\u4e86\u60ca\u4eba\u7684$n^2logn^2$\n\n\u8fd9\u663e\u7136\u662f\u8981T\u98de\u7684\uff0c\u4f46\u662f\u6211\u4eec\u4f1a\u4ece\u4e2d\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u65e2\u7136\u4e00\u4e2adoge\u7684\u8df3\u8dc3\u662f\u591a\u6b65\u7684\uff0c\u90a3\u6211\u4eec\u80fd\u5426\u76f4\u63a5\u628a\u51e0\u6b65\u62c6\u5f00\u6765\uff0c\u7136\u540e\u7701\u7565\u91cd\u590d\u7684\u8fb9\uff1f\n\u4f8b\u5982\uff1a\n![Au13S1.png](https://s2.ax1x.com/2019/03/19/Au13S1.png)\n\u4f18\u5316\u4e3a\uff1a\n![Au8AbT.png](https://s2.ax1x.com/2019/03/19/Au8AbT.png)\n\n\u8fd9\u6837\u505a\u770b\u8d77\u6765\u5f88\u661f\uff0c\u5f88\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u6837\u662f\u4e0d\u884c\u7684\u3002\u56e0\u4e3a\u6211\u4eec\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6709\u53ef\u80fd\u76f4\u63a5\u4ece\u4e2d\u95f4\u67d0\u4e2a\u70b9\u51fa\u53d1\uff0c\u4f46\u662f\u5f88\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u6837\u662f\u4e0d\u53ef\u884c\u7684\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u7f51\u7edc\u6d41\u7684\u5206\u5c42\u56fe\u90a3\u4e00\u5957\u642c\u51fa\u6765\u3002\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u201c\u62c6\u70b9\u201d\u7684\u505a\u6cd5\u6765\u9650\u5236\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\u53bb\u66f4\u65b0\u522b\u7684\u70b9\u7684\u6700\u77ed\u8def\u3002\n\u8003\u8651\u628a\u4e00\u4e2a\u70b9\u62c6\u5206\u4e3asize\u4e2a\u70b9\uff0c**\u6bcf\u4e2a\u62c6\u5206\u70b9\u7684\u542b\u4e49\u4e3a\u6240\u6709\u4e00\u6b21\u8df3x\u6b65\u7684\u90fd\u4ece\u5b83\u51fa\u53d1\uff0c\u5e76\u5230\u8fbe\u5b83\u90a3\u91cc**\u3002\n\n**\u4ece\u6bcf\u4e2a\u70b9\u7684\u62c6\u5206\u70b9\u51fa\u53d1\uff0c\u5411\u5b83\u7684\u539f\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u6709\u5411\u8fb9**\n\n**\u5982\u679c\u80fd\u4ece\u67d0\u4e2a\u70b9\u51fa\u53d1\uff0c\u5219\u5bf9\u5e94\u7684\u4ece\u539f\u70b9\u8fde\u5411\u90a3\u4e2a\u8df3x\u683c\u8fdc\u7684\u5206\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a0\u7684\u8fb9**\n\n**\u63a5\u4e0b\u6765\u6211\u4eec\u4ece\u6bcf\u4e2a\u70b9\u7684\u5bf9\u5e94\u7684\u8df3x\u683c\u8fdc\u7684\u7684\u70b9\u8fde\u5411\u5176\u4ed6\u7684\u70b9\u7684\u8df3x\u683c\u7684\u70b9\uff0c\u8fb9\u6743\u4e3a1**\n\n\u4e00\u56fe\u80dc\u5343\u8a00\uff1a\n![AuUNi8.png](https://s2.ax1x.com/2019/03/19/AuUNi8.png)\n\u53d8\u4e3a\n**\u6700\u540e\u4e00\u884c\u7684\u6240\u6709\u70b9\u5373\u4e3a\u539f\u6765\u7684\u70b9**\n**\u4ece\u4e0b\u5f80\u4e0a\u7b2cx\u884c\u7684\u70b9\u5373\u4e3a\u67d0\u4e2a\u539f\u70b9\u7684\u7b2cx\u4e2a\u5206\u70b9**\n[![AuaFfS.png](https://s2.ax1x.com/2019/03/19/AuaFfS.png)](https://imgchr.com/i/AuaFfS)\n\n\u901a\u8fc7\u8fd9\u6837\u4e00\u8f6e\u62c6\u5206\uff0c\u6211\u4eec\u5c31\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\u5566\u3002\n\n\u5565\uff1f\u4f60\u8bf4\u8fd9\u6837\u4f1a\u6709$n^2$\u4e2a\u70b9\uff1f\u8fd9\u662f\u5c31\u5f97\u7528\u5230\u5206\u5757\u601d\u60f3\u5566\u3002\u4f60\u60f3\uff0c\u5982\u679c\u4e00\u4e2adoge\u4e00\u6b21\u80fd\u8df3\u7684\u8ddd\u79bb\u8d85\u8fc7$\\sqrt n$\u683c\u8fdc\uff0c\u90a3\u603b\u5171\u8fde\u51fa\u6765\u7684\u8fb9\u4e0d\u4f1a\u8d85\u8fc7$\\sqrt n$\u6761\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u539f\u70b9\u8fde\u5c31\u597d\u5566qwq\u3002\n\n\n~~\u6839\u636e\u7384\u5b66\u8bc1\u660e\uff0c\u8fd9\u91cc\u7684\u5757\u5927\u5c0f\u53d6100\u662f\u6700\u597d\u7684\uff08\u6211\u5e76\u4e0d\u4f1a\u8bc1\uff09~~\n\u65f6\u95f4\u590d\u6742\u5ea6O(\u80fd\u8fc7)\n\n---\n# Code\n```cpp\n// luogu-judger-enable-o2\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cmath>\n#include<cstring>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=30000+100;\nconst int M=100+20;\nstruct edge\n{\n    int to,w;\n    edge (int x,int y)\n    {\n        to=x,w=y;\n    }\n};\nvector <edge> e[N*M];\nint n,m,size,dis[N*M],S,T;\nvoid spfa()\n{\n    static int InQueue[N*M],mqueue[N*M*10],front,tail;\n    memset(dis,0x3f,sizeof dis);\n    front=tail=0;\n    mqueue[tail++]=S*size,dis[S*size]=0;\n    while(tail>front)\n    {\n        int now=mqueue[front++];\n        InQueue[now]=false;\n        for(int i=0;i<int(e[now].size());i++)\n            if(dis[e[now][i].to]>dis[now]+e[now][i].w)\n            {\n                dis[e[now][i].to]=dis[now]+e[now][i].w;\n                if(InQueue[e[now][i].to]==false)\n                {\n                    InQueue[e[now][i].to]=true;\n                    mqueue[tail++]=e[now][i].to;\n                }\n            }\n    }\n}\nint main()\n{\n    //freopen(\"3645.in\",\"r\",stdin);\n    //freopen(\"3645.out\",\"w\",stdout);\n    \n    int t=clock();\n    n=read(),m=read();\n    size=min(int(sqrt(n)),50);\n    int to=n*size;\n    for(int i=1;i<=to;i++)\n        e[i].reserve(4);\n    for(int i=0;i<n;i++)\n        for(int j=1;j<size;j++)\n            e[i*size+j].push_back(edge(i*size,0));\n    for(int i=1;i<=m;i++)\n    {\n        int b=read(),p=read();\n        if(i==1) S=b;\n        if(i==2) T=b;\n        if(p>=size)\n        {\n            for(int j=b+p,k=1;j<n;j+=p,k++)\n                e[b*size].push_back(edge(j*size,k));\n            for(int j=b-p,k=1;j>=0;j-=p,k++)\n                e[b*size].push_back(edge(j*size,k));\n        }\n        else\n        {\n            e[b*size].push_back(edge(b*size+p,0));\n            for(int j=b;j<n-p;j+=p)\n            {\n                bool OK=false;\n                for(int k=0;k<int(e[j*size+p].size());k++)\n                    if(e[j*size+p][k].to==(j+p)*size+p)\n                    {\n                        OK=true;\n                        break;\n                    }\n                if(OK==true) break;\n                e[j*size+p].push_back(edge((j+p)*size+p,1));\n            }\n            for(int j=b;j>=p;j-=p)\n            {\n                bool OK=false;\n                for(int k=0;k<int(e[j*size+p].size());k++)\n                    if(e[j*size+p][k].to==(j-p)*size+p)\n                    {\n                        OK=true;\n                        break;\n                    }\n                if(OK==true) break;\n                e[j*size+p].push_back(edge((j-p)*size+p,1));\n            }\n        }\n    }\n    \n    spfa();\n    \n    if(dis[T*size]<0x3f3f3f3f)\n        printf(\"%d\",dis[T*size]);\n    else\n        printf(\"-1\");\n    cerr<<clock()-t;\n    return 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1553001451,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "\u4e8b\u5b9e\u4e0a,\u5757\u7684\u5927\u5c0f\u4e0d\u662fsqrt(n)\uff0c\u5bf9sqrt(n)\u548c100\u53d6min\u4e5f\u4e0d\u662f\u4ec0\u4e48\u4e25\u8c28\u7684\u505a\u6cd5\uff0c\u4ec5\u4ec5\u662f\u78b0\u5de7\u5361\u8fc7\u53bb\u4e86\u800c\u5df2\u3002\r\n\r\n\u5173\u4e8e\u5206\u5757\u4f18\u5316\u5efa\u56fe\u4e4b\u524d\u7684\u9898\u89e3\u90fd\u8bf4\u4e86\uff0c\u4f46\u5206\u5757\u5e38\u5e38\u8981\u6839\u636e\u5b9e\u9645\u8c03\u6574\u5757\u7684\u5927\u5c0f\uff0c\u6bd4\u5982\u5728\u8fd9\u9053\u9898\u5f53\u4e2d\uff0c\u8bbe\u8fd9\u4e2a\u754c\u9650\u4e3ak,\u5bf9\u4e8e>k\u7684\u66b4\u529b\u8fde\u8fb9\uff0c\u6bcf\u4e2a\u70b9\u6700\u591a\u8df3n/k\u6b21,\u6700\u591a\u6709n*(n/k)\u6761\u8fb9\uff0c<k\u7684\u5728k\u5c42\u201c\u865a\u201d\u56fe\u9884\u5904\u7406\u8fde\u8fb9\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u201c\u865a\u201d\u70b9\u5f80\u5de6\u53f3\u4e0b\u8fde\u4e09\u6761\u8fb9\uff0c\u6bcf\u5c42n\u4e2a\u70b9\uff0c\u5171\u67093nk\u6761\u8fb9\uff0c\u6240\u4ee5\u8fb9\u6570m=3kn+n*n/k.\r\n\r\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u5bf9\u52fe\u51fd\u6570\uff0c\u57283k^2=n\u5373k=sqrt(n/3)\u65f6\u53d6\u6700\u5c0f\u503c\uff0c\u800c\u6211\u4eec\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u548c\u8fb9\u6570\u6210\u6b63\u6bd4\uff0c\u6240\u4ee5\u6309\u7167\u8fd9\u4e2a\u5927\u5c0f\u5206\u5757\u4e3a\u6700\u4f18\u3002\r\n\r\n\u5f53\u5927\u5bb6\u628an=30000\u5e26\u8fdb\u53bb,\u4f1a\u53d1\u73b0k=sqrt(n/3)=100\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u524d\u9762\u7684\u9898\u89e3\u901a\u8fc7\u5bf9100\u53d6min\u5361\u8fc7\u53bb\u4e86\u3002\r\n\r\n\u53e6\u5916\u8fd9\u6837\u7b97m\u6700\u591a\u4e3a18000000,\u662f\u53ef\u4ee5\u5f00\u7684\u4e0b\u7684\uff0c\u867d\u7136\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7528\u771f\u7684\u5f00\u51fa\u6765\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5c42\u7684\u5efa\u56fe\u89c4\u5219\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u662f\u56fa\u5b9a\u7684,\u90a3\u4e48\u53ef\u4ee5\u5728\u8fc7\u7a0b\u4e2d\u52a0\u4e0a\u5224\u65ad\u76f4\u63a5\u8df3\u8fc7\u53bb\u800c\u4e0d\u771f\u7684\u8fde\u8fb9\u3002\uff08~~\u7136\u800c\u61d2\u60f0\u7684\u6211\u8fd8\u662f\u8fde\u4e86~~\uff09\r\n\r\n\u6700\u540e\u8bf4\u4e00\u70b9\uff1aspfa\u8bc8\u5c38\u4e86\uff0c\u4f46djikstra\u5438\u6c27\u4e5f\u6ca1\u6709\u95ee\u9898\u3002\r\n```cpp\r\n#include<cstdio>\r\n#include<iostream>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<queue>\r\nusing namespace std;\r\nstatic char buf[100000],*pa,*pd;\r\n#define gc pa==pd&&(pd=(pa=buf)+fread(buf,1,100000,stdin),pa==pd)?EOF:*pa++\r\ninline int read(){\r\n    register int x(0);register char c(gc);\r\n    while(c>'9'||c<'0')c=gc;\r\n    while(c>='0'&&c<='9')x=x*10+c-48,c=gc;\r\n    return x;\r\n}\r\nconst int N=3100000; \r\nstruct edge{\r\n    int to,w,next;\r\n}e[18100000];\r\nint head[N],tot;\r\nvoid add(int x,int y,int z){\r\n    e[++tot].to=y;e[tot].next=head[x];e[tot].w=z;head[x]=tot;\r\n} \r\nint block,m,n,dis[N];\r\n#define get(a,b) (a*n+b)\r\nvoid build(int Floor){\r\n    register int i;\r\n    for(i=get(Floor,Floor);i<=get(Floor,n-1-Floor);i++){\r\n        add(i,i+Floor,1);\r\n        add(i,i-Floor,1);\r\n    }\r\n    for(i=get(Floor,0);i<=get(Floor,Floor-1);i++)\r\n        add(i,i+Floor,1);\r\n    for(i=get(Floor,n-Floor);i<=get(Floor,n-1);i++)\r\n        add(i,i-Floor,1);\r\n    for(i=0;i<n;i++)add(get(Floor,i),i,0);\r\n}\r\nint S,T;\r\nvoid init(){\r\n    register int i,x,p;\r\n    for(i=1;i<=block;i++)\r\n        build(i);\r\n    for(i=1;i<=m;i++){\r\n        x=read();p=read();\r\n        if(i==1)S=x;\r\n        if(i==2)T=x;\r\n        if(p<=block)add(x,get(p,x),0);\r\n        else{\r\n            int cnt=1;\r\n            while(x+cnt*p<n){\r\n                add(x,x+cnt*p,cnt);\r\n                cnt++;\r\n            }\r\n            cnt=1;\r\n            while(x-cnt*p>=0){\r\n                add(x,x-cnt*p,cnt);\r\n                cnt++;\r\n            }\r\n        }\r\n    }\r\n}\r\nqueue<int> q;\r\nbool vis[N];\r\nvoid spfa(){\r\n\tregister int i;\r\n\tmemset(dis,127,sizeof(dis));\r\n\tdis[S]=0;vis[S]=1;q.push(S);\r\n\twhile(!q.empty()){\r\n\t\tint u=q.front();q.pop();vis[u]=0;\r\n\t\tfor(i=head[u];i;i=e[i].next)\r\n\t\t\tif(dis[u]+e[i].w<dis[e[i].to]){\r\n\t\t\t\tdis[e[i].to]=dis[u]+e[i].w;\r\n\t\t\t\tif(!vis[e[i].to]){\r\n\t\t\t\t\tvis[e[i].to]=1;\r\n\t\t\t\t\tq.push(e[i].to);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\tif(dis[T]<2000000000)\r\n    cout<<dis[T];\r\n    else cout<<-1; \r\n}\r\nint main(){\r\n    n=read();m=read();\r\n    block=sqrt(n/3);\r\n    init();\r\n    spfa();\r\n}\r\n```",
        "postTime": 1550386942,
        "uid": 130060,
        "name": "TopCarry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "# Problem\n\n\u6709 $m$ \u53ea $doge$ \u5206\u5e03\u5728 $n$ \u4e2a\u6469\u5929\u5927\u697c\u4e0a\u3002\u697c\u548c $doge$ \u90fd\u662f\u4ece $0$ \u5f00\u59cb\u7f16\u53f7\u3002\n\n\u6bcf\u53ea $doge$ \u521d\u59cb\u4f4d\u7f6e $b[i]$ \uff0c\u5f39\u8df3\u529b $p[i]$\u3002\n\u5b83\u6bcf\u4e00\u6b21\u8df3\u4f1a\u6070\u597d\u8df3 $p[i]$ \u4e2a\u5927\u697c\u3002\u6bd4\u5982\u4ece $x$ \u53ef\u4ee5\u5230 $x \u00b1 p[i]$\u3002\n\n\u73b0\u5728\uff0c $0$ \u53f7 $doge$ \u8981\u628a\u67d0\u4fe1\u606f\u4f20\u7ed9 $1$ \u53f7 $doge$ \u3002\n\u5bf9\u4e8e\u4e00\u53ea $doge$ \uff0c\u82e5\u5b83\u5c1a\u672a\u77e5\u9053\u4fe1\u606f\uff0c\u5c31\u4e0d\u80fd\u52a8\u3002\n\u5bf9\u4e8e\u4e00\u53ea $doge$ \uff0c\u82e5\u5b83\u5df2\u7ecf\u77e5\u9053\u4fe1\u606f\uff0c\u53ef\u4ee5\u9009\u62e9\u628a\u4fe1\u606f\u544a\u8bc9\u5904\u4e8e\u540c\u4e00\u4f4d\u7f6e\u7684 $doge$ \u4eec\uff0c\u6216\u8005\u8df3\u53bb\u522b\u7684\u4f4d\u7f6e\u3002\n\n\u6c42\u6700\u5c11\u8df3\u7684\u6b65\u6570\u3002\n\n# Solution\n### \u00b7 \u76f4\u89c2\u66b4\u529b\n\u5bf9\u4e8e\u6bcf\u4e00\u53ea $doge$ \uff0c\u6211\u4eec\u4ece $b[i]$ \u8fde\u8fb9\u5230\u6240\u6709\u5b83\u53ef\u4ee5\u8df3\u5230\uff08\u53ef\u4ee5\u8df3\u597d\u591a\u6b65\uff09\u7684\u4f4d\u7f6e\uff0c\u8fb9\u6743\u4e3a\u9700\u8981\u8df3\u7684\u6b21\u6570\u3002\n\n\u4ece $b[0]$ \u8dd1\u4e00\u4e0b\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n**Obviously\uff0c\u8fd9\u4e2a\u8fb9\u6570\u6709\u70b9\u591a\u3002**\n\n\n### \u00b7 \u8ffd\u9010\u68a6\u60f3\n\u8003\u8651\u4e00\u4e2a\u95ee\u9898\u3002\n\u4e00\u53ea $doge$ \u53ef\u4ee5\u8df3\u5230\u7684\u4f4d\u7f6e\uff0c\u663e\u7136\u662f\u4e00\u4e2a\u516c\u5dee\u4e3a $p[i]$ \u7684\u7b49\u5dee\u6570\u5217\u3002\n\u6211\u4eec\u5982\u679c\u628a\u76f8\u90bb\u4e24\u9879\u7528\u6743\u4e3a $1$ \u7684\u8fb9\u8fde\u8d77\u6765\uff0c\u53ef\u884c\u5417\uff1f\n\n**\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4f60\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\u3002**\n\n![title](https://leanote.com/api/file/getImage?fileId=5b9a47b3ab644172f600392a)\n\n\u5982\u679c\u4f60\u8fd9\u6837\u8fde\u8fb9\uff0c\u4f60\u7684\u7b54\u6848\u662f $2$ \u3002\u800c $3$ \u53f7\u70b9\u6ca1 $doge$ \uff0c\u5e76\u4e0d\u53ef\u4ee5\u8df3\u3002\n\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u53d8\u6210\u8fd9\u6837\u3002\n\n![title](https://leanote.com/api/file/getImage?fileId=5b9a493aab644172f6003981)\n\n\n\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u5b50\u56fe\u7684\u6982\u5ff5\uff0c\u5373\uff0c\u7531 $n$ \u4e2a\u70b9\u6784\u6210\uff0c\u6bcf\u4e2a\u70b9 $i$ \u90fd\u8fde\u5411 $i + d$ \u4e0e $i - d$ \u3002\n\n\u8fd9\u6837\u8fde\u8fb9\u80af\u5b9a\u662f\u6ca1\u95ee\u9898\u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u7528\u4e00\u6ce2\u5206\u5757\u601d\u60f3\u3002\u5bf9\u4e8e $d\\in[1,\\sqrt n$ $]$\uff0c\u6211\u4eec\u5efa\u7acb\u5b50\u56fe\uff0c\u90a3\u4e48 $d_i \u2264 \\sqrt n$ \u7684\u6bcf\u4e2a\u70b9\u5c31\u53ea\u9700\u8981\u8fde\u4e00\u6761\u8fb9\u6307\u5411\u5b50\u56fe\u4e2d\u7684\u81ea\u5df1\u3002\n\n\u5bf9\u4e8e$d_i > \\sqrt n$ \u7684\u90e8\u5206\uff0c\u6211\u4eec\u91c7\u7528\u201c\u76f4\u89c2\u66b4\u529b\u201d\u90e8\u5206\u7684\u8fde\u8fb9\u65b9\u5f0f\uff0c\u663e\u7136\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 $\\sqrt n$ \u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u6109\u5feb\u7684\u8dd1\u6700\u77ed\u8def\u4e86\u3002\n\n\u6ce8\u610f\u5361\u4e00\u4e0b\u7a7a\u95f4\u95ee\u9898\u3002\n\n# Trick\n\n1$^~$. dijkstra\u6709\u53ef\u80fd\u4f1a tle \uff0c\u4f46 spfa \u4e0d\u4f1a\u3002\n\n2$^~$. \u5206\u5757\u65f6\u4e0d\u8981\u771f\u7684\u6309\u7167 $\\sqrt n$ \uff0c\u8981 $min(\\sqrt n$ $,100 )$\u3002\n\n3$^*$. \u4f60\u53ef\u4ee5\u4e0d\u5fc5\u8fde\u8fb9\u3002\u56e0\u4e3a\u8fde\u8fb9\u7684\u903b\u8f91\u4f60\u662f\u77e5\u9053\u7684\uff0c\u5728\u8dd1 $spfa$ \u7684\u65f6\u5019\u5206\u60c5\u51b5\u73b0\u5199\u4e00\u6ce2\u5c31\u597d\u3002\n\n4$^*$. UOJ Extra Test #8\u3002\n# Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define M 30010\ninline char gc() {\n    static char now[1<<16], *S, *T;\n    if(S == T) {T = (S = now) + fread(now, 1, 1<<16, stdin); if(S == T) return EOF;}\n    return *S++;\n}\ninline int read() {\n    int x = 0, f = 1; char c = gc();\n    while(c < '0' || c > '9') {if(c == '-') f = -1; c = gc();}\n    while(c >= '0' && c <= '9') {x = x * 10 + c - 48; c = gc();}\n    return x * f;\n}\nstruct adj {int to, val, nxt;}e[M*500];\nint n, m, b[M], p[M], hd[M*200], cnt = 1, blank;\ninline void addedge(int x, int y, int z) {\n    e[++cnt] = (adj){y, z, hd[x]}; hd[x] = cnt;\n}\nint dis[M*200]; queue<int> Q; bool inq[M*200];\ninline int dijk(int st, int ed) {\n    memset(dis, 63, sizeof(dis));\n    memset(inq, 0, sizeof(inq));\n    Q.push(st); inq[st] = 1; dis[st] = 0;\n    while(!Q.empty()) {\n        int u = Q.front(); Q.pop(); inq[u] = 0;\n        for(int i = hd[u]; i; i = e[i].nxt) {\n            int v = e[i].to;\n            if(dis[v] > dis[u] + e[i].val) {\n                dis[v] = dis[u] + e[i].val;\n                if(!inq[v]) Q.push(v);\n            }\n        }\n    }\n    return dis[ed];\n}\ninline int id(int i, int k) {\n    return n * k + i;\n}\nint main() {\n    n = read(); m = read();\n    int blank = min(100, (int)sqrt(n));\n    for(int i = 1; i <= blank; ++i) {\n        for(int j = 0; j + i < n; ++j) {\n            addedge(id(j, i), id(j + i, i), 1);\n            addedge(id(j + i, i), id(j, i), 1);\n        }\n        for(int j = 0; j < n; ++j) addedge(id(j, i), j, 0);\n    }\n    for(int i = 0; i <= m - 1; ++i) {\n        b[i] = read(); p[i] = read();\n        if(p[i] <= blank) {\n            addedge(b[i], id(b[i], p[i]), 0);\n        }else {\n            for(int j = b[i] - p[i]; j >= 0; j-= p[i]) {\n                addedge(b[i], j, (b[i] - j)/p[i]);\n            }\n            for(int j = b[i] + p[i]; j < n; j+= p[i]) {\n                addedge(b[i], j, (j - b[i])/p[i]);\n            }\n        }\n    }\n    int ans = dijk(b[0], b[1]);\n    printf(\"%d\", (ans != 0x3f3f3f3f) ? ans : (-1));\n    return 0;\n}\n```\n\n\n\n\n",
        "postTime": 1536838984,
        "uid": 31537,
        "name": "RichardSong",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "\u4e00\u770b\u6c42\u6700\u77ed\u5148\u60f3dp\uff0c\u53d1\u73b0\u8981\u8003\u8651\u7684\u72b6\u6001\u548c\u8f6c\u79fb\u592a\u591a\u6ca1\u6cd5\u505a\u3002\n\u518d\u4e00\u770b\u662f\u4ece\u4e00\u4e2a\u70b9\u5f80\u53e6\u4e00\u4e2a\u70b9\u8df3\uff0c\u53ef\u4ee5\u8003\u8651\u6700\u77ed\u8def\u3002\n\n\u76f4\u63a5\u5efa\u8fb9\u4f1aO(n^2)\n\n\u4f18\u5316\uff1a\u672c\u9898\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u5404\u79cd\u5404\u6837\u3002\u53ef\u4ee5\u5148\u5efan\u4e2a\u865a\u56fe\u3002\n\u5176\u4e2d\u7b2ci\u4e2a\u865a\u56fe\u5305\u542bn\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u8fd9n\u5ea7\u5927\u697c\u3002\n\u8fd9n\u5ea7\u5927\u697c\u4efb\u610f\u4e24\u4e2a\u5982\u679c\u76f8\u5dee\u8ddd\u79bb\u4e3ai\uff0c\u5219\u8fde\u8fb9\uff0c\u8fb9\u957f\u4e3a1.\u3002\n\u4f46\u8fd9\u6837\u8fd8\u662fn^2\u3002\n\n\u53d1\u73b0\u5f53\u8ddd\u79bb\u5927\u4e8esqrt(n)\u65f6\uff0c\u8fb9\u5c31\u5f88\u5c11\u4e86\u3002\u6b64\u65f6\u5e72\u8106\u76f4\u63a5\u53bb\u6389sqrt(n)\u5230n\u7684\u865a\u56fe\u3002\n\u8fd9\u4e9b\u70b9\u7684\u8fb9\u5728\u539f\u56fe\u4e2d\u66b4\u529b\u8fde\u63a5\u3002\n\n\u53ea\u5efa\u7acb\u8ddd\u79bb<=sqrt(n)\u7684\u865a\u56fe\u3002 \n\n\u603b\u7ed3\uff1a\n**\u8fb9\u591a\u5219\u60f3\u865a\u70b9**\n**\u5148\u60f3\u66b4\u529b\u56fe,\u518d\u6839\u636e\u66b4\u529b\u56fe\u7684\u6761\u4ef6\uff0c\u8bbe\u7f6e\u865a\u70b9\uff0c\n\u4f7f\u5f97\u5b9e\u70b9\u5230\u8be5\u5b9e\u70b9\u7684\u5bf9\u5e94\u865a\u70b9\u8ddd\u79bb\u4e3a0\uff0c\n\u865a\u70b9\u95f4\u6839\u636e\u6761\u4ef6\u8bbe\u8ba1\u8ddd\u79bb\uff0c\u8fbe\u5230\u51cf\u5c11\u8fb9\u7684\u6570\u91cf\u7684\u76ee\u7684\u3002** \n\n\u6ce8\u610f\uff1a\n\u6709\u65f6\u5019\u8981**\u8c03\u6574\u5206\u5757\u7684\u5927\u5c0f**\u3002\u4f8b\u5982\u672c\u9898\u4e2d\u865a\u70b9\u5f80\uff1a\n\u5de6\u53f3\u548c\u5b83\u8ddd\u79bb\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u8fde\u8fb9\uff0c\u540c\u65f6\u6b64\u5e97\u8fd8\u4f1a\u548c\u539f\u6765\u7684\u5b9e\u70b9\u8fde\u8fb9\n\u8bbet=sqrt(n)\n\u6b64\u65f6\u5df2\u7ecf\u6709\u67093nt\u6761\u8fb9\u3002\n\u800c\u5bf9\u4e8ep[i]>t\u7684\u60c5\u51b5\uff0c\u6709nn/t\u6761\u8fb9\u3002\n\u6240\u4ee5\u8fb9\u6570m=3tn+nn/t.\uff08t=sqrt(n)\uff09\n\u53d1\u73b0\u5f53n\u53d6\u6700\u5927\u65f6\uff0c\u4ec5\u5f53t=100\u65f6\u53ef\u4ee5\u4f7f\u5f97\u8fb9\u7684\u6570\u91cf\u6700\u5c0f\u3002\n\u56e0\u6b64blank\u8981\u53d6min(100,sqrt(n))\uff0c\u5df2\u8fbe\u5230\u4f7f\u8fb9\u7684\u6570\u91cf\u5c3d\u91cf\u5c0f\u7684\u76ee\u7684\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<stack>\n#include<algorithm>\n#include<cstring>\n#include<vector>\n#include<ctime>\n#include<map>\n#include<cstdlib>\n#include<cmath>\n#define rel(a) a=readl()\n#define r(i,a,b) for(int i=a;i<=b;i++)\n#define rr(i,a,b) for(int i=a;i>=b;i--)\n#define inf 0x3f3f3f3f\n#define mem(a) memset(a,0x3f,sizeof(a))\n#define re(a) a=read()\n#define pr(a) printf(\"%d\\n\",a)\n#define me(a) memset(a,0,sizeof(a))\n#define in inline\n#define ll long long\n#define db double\n#define id(i,j) (n*j)+i\nusing namespace std;\nconst int N=30007;\nconst int M=207;\ninline int read(){\n    char ch=getchar();\n    int w=1,x=0;\n    while(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+ch-'0',ch=getchar();}\n    return x*w;\n}\nint n,m,head[N*300],b[N],p[N],blank,cnt=0,vis[N*300],d[N*300];\nstruct edge{\n    int v,nxt,w;\n}e[N*600];\nin void add(int u,int v,int w){\n    e[++cnt].v=v;\n    e[cnt].w=w;\n    e[cnt].nxt=head[u];\n    head[u]=cnt;\n}\nqueue<int> q;\nin void bfs(int S){\n    mem(d),me(vis);\n    q.push(S),vis[S]=1,d[S]=0;\n    int u,v,w;\n    while(!q.empty()){\n        u=q.front(),v,w;\n        vis[u]=0;\n        q.pop();\n        for(int i=head[u];i;i=e[i].nxt){\n            v=e[i].v,w=e[i].w;\n            if(d[v]>d[u]+w){\n                d[v]=d[u]+w;\n                if(!vis[v]){\n                    q.push(v);vis[v]=1;\n                }\n            }\n        }\n    }\n}\nint main(){\n    re(n),re(m);\n    blank=min((int)sqrt(n),100);\n    r(i,1,blank){\n        r(j,0,n-i-1){\n            add(id(j,i),id(j+i,i),1);\n            add(id(j+i,i),id(j,i),1);\n        }\n        r(j,0,n-1)add(id(j,i),j,0);\n    }\n    r(i,0,m-1){\n        re(b[i]),re(p[i]);\n        if(p[i]<=blank)add(b[i],id(b[i],p[i]),0);\n        else{\n            for(int j=b[i]-p[i];j>=0;j-=p[i])add(b[i],j,(b[i]-j)/p[i]);\n            for(int j=b[i]+p[i];j<=n-1;j+=p[i])add(b[i],j,(j-b[i])/p[i]);\n        }\n    }\n    bfs(b[0]);\n    printf(\"%d\\n\",d[b[1]]<inf?d[b[1]]:-1);\n    return 0;\n}\n\n```\n\n\n",
        "postTime": 1561454897,
        "uid": 112856,
        "name": "yangshurong",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u672c\u8d28\u5c31\u662f\u4e2a bfs \u554a\u3002\n\n\u8003\u8651\u6839\u53f7\u5206\u6cbb\u3002\u5bf9\u4e8e $p > \\sqrt{n}$ \uff0c\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u4e0d\u8d85\u8fc7 $\\sqrt{n} $ \u4e2a\uff1b\u5bf9\u4e8e $p \\leq \\sqrt{n}$ \uff0c\u53ef\u4ee5\u8d70\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $\\sqrt{n}$ \u3002\n\n\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u53d6 $(b,p)$ \u4f5c\u4e3a\u72b6\u6001\uff0c\u8868\u793a\u6211\u4eec\u7684 doge \u5728 $b$ \u70b9\uff0c\u53ef\u4ee5\u8d70\u7684\u8ddd\u79bb\u4e3a $p$ \uff0c\u8fd9\u4e2a\u72b6\u6001\u6570\u91cf\u80af\u5b9a\u4e0d\u8d85\u8fc7 $n \\sqrt{n}$ \u4e2a\u3002\n\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u72b6\u6001\u76f4\u63a5\u53bb bfs\uff0c\u7528 bitset \u5224\u91cd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal{O}(n\\sqrt{n})$ \u6216 $\\mathcal{O}(\\frac{nm}{w})$\n\n$n \\leq 3 \\times 10^4$\uff0c\u56e0\u6b64 bitset \u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=30000+5;\nbitset<N> vis[N];\nvector<int> p[N];\nstruct node{\n\tint pos,jump,dep;\n\tnode(){\n\t}\n\tnode(int _p,int _j,int _d){\n\t\tpos=_p;jump=_j;dep=_d;\n\t}\n};\ndeque<node> q;\nint n,B[N],P[N];\nvoid bfs(){\n\tnode u;\n\twhile(!q.empty()){\n\t\tu=q.front();q.pop_front();\n\t\t//cout<<u.pos<<\" \"<<u.jump<<endl;\n\t\tif(u.pos==B[1]) cout<<u.dep,exit(0);\n\t\tif(vis[u.pos][u.jump]) continue;\n\t\tvis[u.pos][u.jump]=1;\n\t\tfor(int i=0;i<p[u.pos].size();++i)\n\t\t\tq.push_front(node(u.pos,p[u.pos][i],u.dep));\n\t\tif(u.pos-u.jump>=0) q.push_back(node(u.pos-u.jump,u.jump,u.dep+1));\n\t\tif(u.pos+u.jump<n) q.push_back(node(u.pos+u.jump,u.jump,u.dep+1));\n\t}\n\tcout<<-1;\n}\nint main(){\n\tint m;\n\tcin>>n>>m;\n\tfor(int i=0;i<m;++i){\n\t\tcin>>B[i]>>P[i];\n\t\tp[B[i]].push_back(P[i]);\n\t}\n\tq.push_back(node(B[0],P[0],0));\n\tbfs();\n\treturn 0;\n}\n \n```\n",
        "postTime": 1596198313,
        "uid": 344016,
        "name": "wurzang",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    },
    {
        "content": "\u601d\u8def{\n\n\n\u5bf9\u4e8e\u4e00\u6761\u697c\u4e0a\u7684\u6bcf\u4e00\u6761\u72d7.\u6700\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u628a\u4e00\u4e2a\u70b9\u62c6\u6210N\u6761\u72d7\u7684\u70b9\uff0c\u7136\u540e\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n\u7136\u800c\u70b8\u7a7a\u95f4\u6211\u4e5f\u662f\u9189\u4e86\u3002\n\n\u56e0\u6b64\u6211\u4eec\u8981\u7528\u5230\u4e00\u4e2a\u8c03\u8c03\u7684\u5206\u5757\u4f18\u5316\u3002\n\n\u5e94\u5f53\u662f\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u72b6\u6001\u3002\u610f\u4f1a\u4e00\u4e0b\u3002\n\n\u628a\u4e00\u5ea7\u697c\u5206\u62101-\u5757\u957f\u5c42\uff0c\u90a3\u5bf9\u4e8e\u4efb\u610f\u76f8\u540c\u5c42\u6570\u7684\u72d7\u53ef\u4ee5\u5728\u9ad8\u7a7a\u4e71JB\u8d70\u3002\n\n\u4f46\u8fde\u901a\u957f\u5ea6p>\u5757\u957f\u7684\u5462\uff1f------\u76f4\u63a5\u8fde\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540eYY\u4e00\u4e0b\uff0c\u5904\u7406\u6bcf\u6761\u72d7\u7684\u6fc0\u6d3b\u5173\u7cfb\u3002SPFA\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n}\n#include<bits/stdc++.h>\n#define RG register\n#define il inline \n#define N 5500000\n#define Inf 2\n#define U unsigned short\n#define pos(i,j) (i*n+j)\nusing namespace std;\nstruct ed{int nxt,to,c;}e[30005*500];\nint head[30005*105],dis[30005*105],n,m,q,b,s,t;bool in[30005*105];int tot;\nvoid add(int u,int v,int c){e[tot].nxt=head[u];e[tot].to=v;e[tot].c=c;head[u]=tot++;}\nvoid ADD(int u,int v,int c){add(u,v,c),add(v,u,c);}\nvoid spfa(){\n  queue<int>que;memset(dis,Inf,sizeof(dis));int SS=dis[t];\n  que.push(s),in[s]=true,dis[s]=0;\n  while(!que.empty()){\n    int u=que.front();que.pop();in[u]=false;\n    for(int i=head[u];i!=-1;i=e[i].nxt)if(dis[e[i].to]>dis[u]+e[i].c){\n    int v=e[i].to;dis[v]=dis[u]+e[i].c;\n    if(!in[v])que.push(v),in[v]=true;\n      }\n  }if(dis[t]==SS)cout<<\"-1\";\n  else cout<<dis[t];\n}\nint main(){\n  freopen(\"skyscraper.in\",\"r\",stdin);\n  freopen(\"skyscraper.out\",\"w\",stdout);\n  memset(head,-1,sizeof(head));\n  cin>>n>>m;U int len=min((int)sqrt(n),100);\n  for(RG int i=1;i<=len;++i)for(int j=1;j<=n;++j)add(pos(i,j),j,0);\n  for(RG int i=1;i<=len;++i)for(int j=1;j<=n-i;++j)ADD(pos(i,j),pos(i,j+i),1);\n  for(RG int i=1;i<=m;++i){int b,p;\n    cin>>b>>p;b++;\n    if(i==1)s=b;if(i==2)t=b;\n    if(p<=len)add(b,pos(p,b),0);\n    else {\n      for(int j=1;j*p+b<=n;++j)add(b,b+j*p,j);\n      for(int j=1;b-j*p>0;++j)add(b,b-j*p,j);\n    }\n  }spfa();\n  return 0;\n}\n```",
        "postTime": 1501497548,
        "uid": 23122,
        "name": "\u57c3\u7f57\u8292\u963f\u8001\u5e08\u00b7",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3645 \u3010[APIO2015]\u96c5\u52a0\u8fbe\u7684\u6469\u5929\u697c\u3011"
    }
]