[
    {
        "content": "\u4f60\u8981\u76f8\u4fe1\u4e00\u4ef6\u4e8b\uff0cdinic\u7684\u6e10\u8fdb\u590d\u6742\u5ea6**\u4e0b\u754c**\u662fO(V^2E)\u4e0d\u662f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u8dd1\u7684\u6bd4\u9999\u6e2f\u8bb0\u8005\u8fd8\u5feb\u2026\u2026\uff0c\u6bd4\u5982\u8fd9\u9053\u9898\u7684\u6e10\u8fdb\u590d\u6742\u5ea6\u662fO(V^2E^2)\u2026\u2026\u4f46\u662f\u4f60\u53ef\u4ee5\u51ed\u501f\u4fe1\u4ef0\u8fc7\u53bb\n\n## \u6700\u5c0f\u5272\u6811\n\n\u6700\u77ed\u8def\u6709\u6700\u77ed\u8def\u5f84\u6811\uff0c\u90a3\u4e48\u6700\u5c0f\u5272\u4e5f\u6709\u6700\u5c0f\u5272\u6811\uff0c\u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u6211\u4eec\u73b0\u5728\u505a\u5b8c\u4e86\u4e00\u4e2a\u6700\u5c0f\u5272\uff0c\u90a3\u4e48\u6211\u4eec\u6839\u636e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u6765\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5982\u679c\u539f\u6765\u7684\u56fe\u662f\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6574\u4e2a\u56fe\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u800c\u4e14\u53ea\u80fd\u5206\u4e3a\u4e24\u4e2a\u8054\u901a\u5757\n\n\u90a3\u4e48\u8fd9\u79cd\u505a\u4e00\u4e2a\u64cd\u4f5c\u4f7f\u5f97\u8054\u901a\u5757\u4e00\u5206\u4e3a\u4e8c\u7684\u60f3\u6cd5\uff0c\u8ba9\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u6811\u7684\u4e00\u4e2a\u6027\u8d28\uff0c\u5220\u4e00\u6761\u8fb9\uff0c\u6574\u68f5\u6811\u5206\u4e3a\u4e24\u4e2a\u8054\u901a\u5757\n\n\u90a3\u4e48\u6211\u4eec\u4f3c\u4e4e\u53d1\u73b0\u4e00\u4ef6\u4e8b\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6700\u5c0f\u5272\u89c6\u4e3a\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5\u4e00\u79cd\u5947\u5999\u7684\u65b9\u5f0f\u5c06\u65e0\u5411\u56fe\u6700\u5c0f\u5272\u95f4\u7684\u903b\u8f91\u5173\u7cfb\u6620\u5c04\u5230\u4e00\u53ea\u6811\u4e0a\n\n\u5177\u4f53\u6765\u8bb2\uff0c\u5bf9\u4e8e\u6811\u4e0a**\u4efb\u610f**\u4e24\u4e2a\u76f8\u90bb\u7684\u8282\u70b9S\uff0cT\uff0c\u6211\u4eec\u6ee1\u8db3\u5220\u53bb\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u4e4b\u540e\u4e24\u4e2a**\u4e0d\u8054\u901a\u70b9\u96c6**\u5206\u5e03\u60c5\u51b5\u548c\u5bf9\u8fd9\u4e2a\u56fe\u6267\u884c\u4e00\u4e2aS-T\u6700\u5c0f\u5272\u4e4b\u540e\uff0c\u65e0\u5411\u56fe\u5206\u88c2\u4e3a\u7684\u4e24\u4e2a**\u4e0d\u8054\u901a\u70b9\u96c6**\u7684\u70b9\u5206\u5e03\u60c5\u51b5\u76f8\u7b49\uff0c\u5e76\u4e14\u8fd9\u4e2a\u8fb9\u7684\u8fb9\u6743\u7b49\u4e8e\u6700\u5c0f\u5272\n\n(\u901a\u4fd7\u4e00\u70b9\u8bb2\uff0c\u6700\u5c0f\u5272\u64cd\u4f5c\u4e4b\u540e\u56fe\u5206\u4e3a\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u5220\u8fb9\u64cd\u4f5c\u540e\u6811\u5206\u88c2\u4e3a\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e9b\u6280\u5de7\u4fdd\u8bc1\u8fd94\u4e2a\u8054\u901a\u5757\u5728\u70b9\u96c6\u610f\u4e49\u4e0a\u76f8\u7b49)\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u81f3\u5c11\u5bf9\u4e8eN-1\u4e2a\u70b9\uff0c\u6211\u4eec\u5df2\u7ecf\u786e\u4fdd\u4e86\u5bf9\u5b83\u4eec\u6267\u884c\u5220\u8fb9\u64cd\u4f5c\u5b8c\u5168\u7b49\u4ef7\u4e8e\u6267\u884c\u6700\u5c0f\u5272\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u6811\u4e0a\u4efb\u610f\u4e24\u70b9u-v\uff0c\u6211\u4eec\u679a\u4e3e\u5220\u9664\u8def\u5f84\u4e0a\u7684\u968f\u610f\u4e00\u6761\u8fb9\uff0c\u4f1a\u53d1\u73b0\u8fd9\u6837\u76f8\u5f53\u4e8e\u679a\u4e3e\u5220\u9664\u540e\u8054\u901a\u5757\u60c5\u51b5\uff0c\u56e0\u6b64**\u9009\u53d6\u6700\u5c0f\u7684\u8fb9**\u5272\u6389\u5373\u53ef\n\n(\u4e5f\u53ef\u7528\u53cd\u8bc1\u6cd5\uff0c\u5982\u679c\u8def\u5f84\u4e0a\u7684\u6240\u6709\u503c\u90fd\u5c0f\u4e8eu-v\u6700\u5c0f\u5272\uff0c\u7531\u4e8e\u5272\u540e\u5fc5\u7136\u5206\u5f00\u4e86\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u70b9\uff0c\u56e0\u6b64\u4e5f\u5c31\u627e\u51fa\u4e86\u65b0\u7684\u6700\u5c0f\u5272\uff0c\u4e0e\u539f\u6765\u4efb\u610f\u76f8\u90bb\u70b9\u7684\u8fb9\u6743\u90fd\u662f\u6700\u5c0f\u5272\u77db\u76fe\uff0c\u5f97\u8bc1)\n\n\u73b0\u5728\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u6700\u5c0f\u5272\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\uff0c\u6700\u5c0f\u5272\u603b\u662f\u7b49\u4e8e\u6811\u4e0a\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\uff0c\u6b64\u65f6\u6211\u4eec\u4e0d\u8981\u72af\u50bb\u53bb\u5199\u4e2a\u500d\u589e\uff0c\u800c\u662f\u91c7\u53d6**\u679a\u4e3e\u6700\u5c0f\u503c**\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8fb9\u6743\u90fd\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5462\u53ea\u9700unique\u4e00\u4e0b\u8fd9\u4e2a\u8fb9\u6743\u5c31\u597d\uff0c\u6216\u8005\u53ef\u4ee5\u76f4\u63a5set\u5728\u7ebf\u7ef4\u62a4\n\n## \u6c42\u6700\u5c0f\u5272\u6811\n\n\u7b54\u6848\u5f88\u7b80\u5355\uff0c\u5206\u6cbb\n\n\u4e3a\u4ec0\u4e48\u662f\u5206\u6cbb\uff1f\uff0c\u8bf7\u6ce8\u610f\u6211\u4eec\u5728\u6620\u5c04\u7684\u65f6\u5019\u662f\u5982\u4f55\u6620\u5c04\u7684\uff0c\u6211\u4eec\u8981\u6c42\u5220\u6389\u8fd9\u6761\u8fb9\u540e\u8054\u901a\u5757\u5206\u5e03\u662f\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5272\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u968f\u4fbf\u9009\u4e24\u4e2a\u70b9\uff0c\u4e4b\u540e\u8dd1\u4e00\u4e2a\u6700\u5c0f\u5272\uff0c\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5206\u88c2\u4e3a\u4e24\u4e2a\u70b9\u96c6\uff0c\u7531\u4e8e\u6811\u7684\u7279\u70b9\uff0c\u6211\u4eec\u4e0d\u53ef\u4ee5\u5728\u4e24\u4e2a\u70b9\u96c6\u4e4b\u95f4\u518d\u6b21\u8fde\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u6b21\u5728\u4e24\u4e2a\u70b9\u96c6\u95f4\u4efb\u610f\u9009\u62e9\u70b9\u8fde\u8fb9\u5373\u53ef\uff0c\u4ee5\u540e\u6bcf\u6b21\u9012\u5f52\u5904\u7406\u95ee\u9898\uff0c\u53ea\u8981\u4fdd\u8bc1\u5206\u5f00\u7684\u70b9\u96c6\u4e0d\u4f1a\u88ab\u518d\u6b21\u8fde\u8fb9\u5373\u53ef\n\n\u786e\u5b9a\u5206\u5f00\u70b9\u96c6\u7684\u65b9\u5f0f\uff0c\u6b8b\u91cf\u7f51\u7edc\u4e0a\u548cs\u76f8\u8fde\u7684\u5f52\u5230\u4e00\u4e2a\u70b9\u96c6\uff0c\u7136\u540e\u8865\u96c6\u5f52\u5230T\u7684\u70b9\u96c6\uff0c\u53ef\u4ee5\u8bc1\u660e\u8fd9\u603b\u662f\u4e00\u79cd\u53ef\u884c\u65b9\u6848\n\n\u8fde\u8fb9\u64cd\u4f5c\u662f\u5728\u539f\u56fe\u4e0a\u8dd1\u6700\u5c0f\u5272\uff0c\u56e0\u4e3a**\u6211\u4eec\u8fde\u8fb9\u672c\u6765\u662f\u6ca1\u6709\u6b21\u5e8f\u7684**\uff0c\u6211\u4eec\u7684\u6620\u5c04\u4fdd\u8bc1\u7684\u76f8\u90bb\u70b9\u5220\u8fb9\u5728\u70b9\u96c6\u610f\u4e49\u4e0a\u7b49\u4ef7\u4e8e\u76f8\u90bb\u70b9\u6700\u5c0f\u5272\uff0c\u800c\u8fd9\u4e2a\u6700\u5c0f\u5272\u660e\u663e\u662f\u5168\u56fe\u610f\u4e49\u7684\u3002\n\n\u90a3\u4e48\u5177\u4f53\u6765\u8bb2\u80af\u5b9a\u6709\u4e00\u4e9btrick\u5566\uff0c\u6bd4\u5982\u5199\u4ee3\u7801\u7684\u65f6\u5019\u6bcf\u6b21\u6309\u6df1\u5ea6\u6392\u4e00\u4e0b\u5e8f\uff0c\u90a3\u4e48\u6211\u4eec\u5462\u4f1a\u53d1\u73b0\u4e24\u4e2a\u70b9\u96c6\u4ee5\u6df1\u5ea6\u662f\u5426\u4e3a\u221e\u5206\u6210\u4e86\u4e24\u4e2a\u533a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u50cfCDQ\u5206\u6cbb\u4e00\u6837\u5199\u8fd9\u4e2a\u7a0b\u5e8f\u4e86\n\n\u672c\u4f53\u4e2d\u7531\u4e8e\u53ea\u662f\u7edf\u8ba1\u8fb9\u7684\u503c\u79cd\u7c7b\uff0c\u4e0d\u9700\u8981\u771f\u7684\u628a\u6811\u5efa\u51fa\u6765\n\n\u5269\u4e0b\u7684\u7ec6\u8282\u5c31\u4ea4\u7ed9\u4ee3\u7801\u597d\u4e86233\n\n\u4e0a\u4ee3\u7801~\n\n```C\n#include<cstdio>\n#include<algorithm>\n#include<set>\n#include<queue>\nusing namespace std;\nconst int N=900;const int M=9000;\nstruct data{int v;int nxt;int cot;}edge[2*M];\nint alist[N];int cnt=1;int reset[2*M];int n;int m;\ninline void add(int u,int v,int cot)\n{\n    edge[++cnt].v=v;edge[cnt].nxt=alist[u];alist[u]=cnt;edge[cnt].cot=cot;reset[cnt]=cot;\n    edge[++cnt].v=u;edge[cnt].nxt=alist[v];alist[v]=cnt;edge[cnt].cot=cot;reset[cnt]=cot;\n}int dep[N];queue <int> q;int a[N];//\u6309\u6df1\u5ea6\u6392\u5e8f \ninline bool cmp(int a,int b){return dep[a]<dep[b];}\ninline bool bfs(int s,int t)//dinic\u677f\u5b50 \n{\n    for(int i=1;i<=n;i++){dep[i]=0x3f3f3f3f;}\n    dep[s]=0;q.push(s);\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();int nxt=alist[now];\n        while(nxt)\n        {\n            int v=edge[nxt].v;int cot=edge[nxt].cot;\n            if(dep[v]==0x3f3f3f3f&&cot!=0)\n            {dep[v]=dep[now]+1;q.push(v);}\n            nxt=edge[nxt].nxt;\n        }\n    }return dep[t]!=0x3f3f3f3f;\n}\nint dfs(int x,int t,int lim)\n{\n    if(x==t){return lim;}int nxt=alist[x];int nowflow=0;\n    while(nxt)\n    {\n        if(lim==0)break;\n        int v=edge[nxt].v;int cot=edge[nxt].cot;\n        if(dep[v]==dep[x]+1&&cot!=0)\n        {\n            int del=dfs(v,t,min(lim,cot));lim-=del;nowflow+=del;\n            edge[nxt].cot-=del;edge[nxt^1].cot+=del;\n        }nxt=edge[nxt].nxt;\n    }if(nowflow==0){dep[x]=0x3f3f3f3f;}\n    return nowflow;\n}set <int> se;\ninline void solve(int l,int r)//\u7531\u4e8e\u6309\u6df1\u5ea6\u6392\u5e8f\u4e86\uff0c\u4e00\u4e2a\u70b9\u96c6\u5c31\u662f\u4e00\u4e2a\u533a\u95f4 \n{\n    if(r==l){return;}int res=0;int s=a[l];int nxt=alist[a[l]];\n    while(bfs(a[l],a[r])){res+=dfs(a[l],a[r],0x3f3f3f3f);}//\u8ba1\u7b97\u8fb9\u6743 \n    se.insert(res);sort(a+l,a+r+1,cmp);int cut;//\u66b4\u529b\u627e\u5206\u5272\u70b9\u4e86\uff0c\u61d2\u5f97\u5199lower_bound \n    for(int i=l;i<=r;i++){if(dep[a[i]]==0x3f3f3f3f){cut=i;break;}}\n    for(int i=1;i<=cnt;i++){edge[i].cot=reset[i];}//\u8bb0\u5f97\u590d\u4f4d\u6574\u4e2a\u56fe \n\tsolve(l,cut-1);solve(cut,r);//\u7136\u540e\u5206\u6cbb\u5c31\u597d\u4e86 \n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++)\n    {int u;int v;int cot;scanf(\"%d%d%d\",&u,&v,&cot);add(u,v,cot);}\n    for(int i=1;i<=n;i++){a[i]=i;}solve(1,n);//\u521d\u59cb\u5316\u70b9\u96c6 \n    printf(\"%d\",se.size());return 0;//\u62dc\u62dc\u7a0b\u5e8f~ \n}\n```\n",
        "postTime": 1521014615,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4123 \u3010[CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3011"
    },
    {
        "content": "update:\u5728 2021 \u5e74 1 \u6708 4 \u65e5\u66f4\u65b0\u6302\u6389\u7684\u56fe\u50cf\u3002\n\n[\u70b9\u6b64\u98df\u7528\u66f4\u4f73](https://www.lu-anlai.com/oi/solution/luogu-p4123/)\n\n\u9898\u76ee\u94fe\u63a5\uff1a[Luogu P4123](https://www.luogu.com.cn/problem/P4123)/[BZOJ 4519](https://www.lydsy.com/JudgeOnline/problem.php?id=4519)/[LibreOJ 2042](https://loj.ac/problem/2042)/CQOI D1T1\n\n# \u9898\u76ee\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u56fe\uff0c\u6bcf\u4e00\u5bf9\u70b9\u7684\u6700\u5c0f\u5272\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u4e92\u4e0d\u76f8\u540c\u3002\n\n## \u6570\u636e\u8303\u56f4\n\n$$1\\leq n\\leq 850$$\n$$1\\leq m\\leq 8500$$\n$$1\\leq w\\leq 10^5$$\n\n## \u65f6\u7a7a\u9650\u5236\n\n$$\\text{Luogu}:3\\text{s}/500\\text{MiB}$$\n$$\\text{BZOJ}:20\\text{s}/512\\text{MiB}$$\n$$\\text{LibreOJ}:1\\text{s}/256\\text{MiB}$$\n\n# \u9898\u89e3\n\n## \u601d\u8def\n\n\u4e0b\u9762\u5148\u4ecb\u7ecd**\u6700\u5c0f\u5272\u6811**\u3002\n\n\u663e\u7136\uff0c\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u70b9\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u5c06\u5b83\u4e0e\u53e6\u5916\u4e00\u4e2a\u70b9\u5148\u6c42\u4e00\u904d\u6700\u5c0f\u5272\uff0c\u90a3\u4e48\u6574\u4e2a\u56fe\u5c06\u4f1a\u53d8\u6210\u5177\u6709\u4e24\u4e2a\u6b8b\u7559\u7f51\u7edc\uff08\u5982\u679c\u539f\u56fe\u4e0d\u8fde\u901a\u5c06\u4f1a\u6709\u66f4\u591a\uff09\u3002\n\n\u5f62\u5982\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![Luogu-P4123-Z1.webp](https://www.lu-anlai.com/wp-content/uploads/2020/05/Luogu-P4123-Z1.webp)\n\n\u5176\u4e2d $1$ \u548c $2$ \u7684\u6700\u5c0f\u5272\u4e3a $4$\uff0c\u6709\u4e24\u79cd\u5272\u6cd5\uff08\u7528\u7ea2\u3001\u84dd\u6807\u8bc6\uff09\u3002\u800c\u6b8b\u4f59\u7684\u8fb9\u5219\u5206\u522b\u5c5e\u4e8e\u4e24\u4e2a\u8054\u901a\u5757\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u84dd\u7ec4\u5272\u6cd5\u4e3a\u4f8b\u3002\n\n![Luogu-P4123-Z2.webp](https://www.lu-anlai.com/wp-content/uploads/2020/05/Luogu-P4123-Z2.webp)\n\n\u4e3a\u4e86\u751f\u6210\u6700\u5c0f\u5272\u6811\uff0c\u6211\u4eec\u5e94\u8be5\u5411\u6700\u5c0f\u5272\u6811\u4e2d\u7684 $1$ \u548c $2$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $4$ \u7684\u8fb9\u3002\n\n\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\n\n![Luogu-P4123-Z3.webp](https://www.lu-anlai.com/wp-content/uploads/2020/05/Luogu-P4123-Z3.webp)\n\n$1$ \u548c $3$ \u7684\u6700\u5c0f\u5272\u4e3a $9$\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5411\u6700\u5c0f\u5272\u6811\u4e2d\u7684 $1$ \u548c $3$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $9$ \u7684\u8fb9\u3002\n\n\u6700\u540e\u751f\u6210\u7684\u6700\u5c0f\u5272\u6811\u957f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u3002\n\n![Luogu-P4123-Z4.webp](https://www.lu-anlai.com/wp-content/uploads/2020/05/Luogu-P4123-Z4.webp)\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c**\u6bcf\u5bf9\u70b9\u95f4\u8def\u5f84\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u5373\u4e3a\u5b83\u4eec\u4e4b\u95f4\u7684\u6700\u5c0f\u5272**\u3002\n\n\u5f53\u7136\u672c\u9898\u5e76\u4e0d\u9700\u8981\u751f\u6210\u6700\u5c0f\u5272\u6811\uff0c\u53ea\u9700\u8981\u6309\u5c42\u6b21\u6765\u6784\u9020\u8fd9\u68f5\u6811\u5373\u53ef\uff0c\u4fdd\u7559\u8fb9\u6743\uff0c\u7528 `std::set` \u7edf\u8ba1\u7b54\u6848\u3002\n\n\u6700\u540e\u63d0\u9192\u4e00\u4e0b\uff0c\u56e0\u4e3a\u672c\u9898\u662f\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u53cd\u5411\u8fb9\u6d41\u91cf\u76f4\u63a5\u8bbe\u6210 $w_i$ \u5373\u53ef\uff0c\u9632\u6b62\u52a0\u66f4\u591a\u7684\u8fb9\u6d6a\u8d39\u7a7a\u95f4\u3002\n\n## \u4ee3\u7801\n\n\u9274\u4e8e\u4f7f\u7528\u4e86\u7f51\u7edc\u6d41\uff0c\u672c\u9898\u4e0d\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define INF 0X3F3F3F3F\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nstatic char buf[100000],*p1=buf,*p2=buf;\ninline int read(void){ //\u8bfb\u5165\u4f18\u5316\n\treg bool f=false;\n\treg char ch=getchar();\n\treg int res=0;\n\twhile(ch<'0'||'9'<ch)f|=(ch=='-'),ch=getchar();\n\twhile('0'<=ch&&ch<='9')res=10*res+ch-'0',ch=getchar();\n\treturn f?-res:res;\n}\n\nconst int MAXN=850+5; //\u70b9\u6570\u6570\u636e\u8303\u56f4\nconst int MAXM=8500+5; //\u8fb9\u6570\u6570\u6570\u636e\u8303\u56f4\n\ninline void Read(void);\ninline void Work(void);\n\nint main(void){\n\tRead();\n\tWork();\n\treturn 0;\n}\n\nint n,m;\nint cnt=1,head[MAXN],to[MAXM<<1],w[MAXM<<1],W[MAXM<<1],Next[MAXM<<1]; //\u90bb\u63a5\u8868\u5b58\u8fb9\n\ninline void Add_Edge(reg int u,reg int v,reg int len){\n\tNext[++cnt]=head[u];\n\tto[cnt]=v;\n\tw[cnt]=len;\n\tW[cnt]=len; //\u7528 W[] \u5b58\u50a8\u539f\u56fe\u7684\u8fb9\u6743\uff0c\u9632\u6b62 Dinic \u540e\u8fb9\u6743\u51fa\u73b0\u53d8\u5316\n\thead[u]=cnt;\n\treturn;\n}\n\ninline void Add_Tube(reg int u,reg int v,reg int len){\n\tAdd_Edge(u,v,len); //\u6b63\u5e38\u7684\u8fb9\n\tAdd_Edge(v,u,len); //\u672c\u9898\u662f\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u53cd\u5411\u8fb9\u6d41\u91cf\u76f4\u63a5\u8bbe\u4e3a w\uff0c\u9632\u6b62\u52a0\u66f4\u591a\u7684\u8fb9\u6d6a\u8d39\u7a7a\u95f4\u3002\n\treturn;\n}\n\ninline void Read(void){\n\tn=read(),m=read();\n\tfor(reg int i=1;i<=m;++i){ //\u6309\u7167\u8981\u6c42\u8bfb\u5165\n\t\tstatic int u,v,w;\n\t\tu=read(),v=read(),w=read();\n\t\tAdd_Tube(u,v,w); //\u52a0\u8fb9\n\t}\n\treturn;\n}\n\nint dep[MAXN];\nqueue<int> Q;\n\ninline bool BFS(int s,reg int t){ //BFS \u5224\u65ad\u662f\u5426\u8054\u901a\n\tmemset(dep,-1,sizeof(dep));\n\twhile(!Q.empty())Q.pop();\n\tdep[s]=1,Q.push(s);\n\twhile(!Q.empty()){\n\t\treg int ID=Q.front();\n\t\tQ.pop();\n\t\tfor(reg int i=head[ID];i;i=Next[i])\n\t\t\tif(dep[to[i]]==-1&&w[i]>0){\n\t\t\t\tdep[to[i]]=dep[ID]+1;\n\t\t\t\tQ.push(to[i]);\n\t\t\t}\n\t}\n\treturn dep[t]!=-1; //\u8fd4\u56de\u6c47\u70b9\u662f\u5426\u53ef\u8fbe\n}\n\nint cur[MAXN]; //\u7528\u4e8e\u5f53\u524d\u5f27\u4f18\u5316\n\ninline int DFS(reg int ID,reg int t,reg int lim){\n\tif(ID==t)\n\t\treturn lim;\n\treg int flow=0;\n\tfor(reg int &i=cur[ID];i;i=Next[i])\n\t\tif(dep[to[i]]==dep[ID]+1&&w[i]>0){\n\t\t\treg int f=DFS(to[i],t,min(lim-flow,w[i]));\n\t\t\tif(f){\n\t\t\t\tflow+=f;\n\t\t\t\tw[i]-=f;\n\t\t\t\tw[i^1]+=f;\n\t\t\t\tif(flow==lim)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\treturn flow;\n}\n\ninline int Dinic(reg int s,reg int t){\n\treg int res=0;\n\twhile(BFS(s,t)){\n\t\tmemcpy(cur,head,sizeof(head)); //\u590d\u5236\u90bb\u63a5\u8868\u8868\u5934\n\t\tres+=DFS(s,t,INF);\n\t}\n\treturn res;\n}\n\nbool vis[MAXN];\n\ninline void DFS(reg int ID){\n\tvis[ID]=true;\n\tfor(reg int i=head[ID];i;i=Next[i])\n\t\tif(!vis[to[i]]&&w[i]>0)\n\t\t\tDFS(to[i]);\n\treturn;\n}\n\nint fa[MAXN];\nset<int> S;\n\ninline void Work(void){\n\tfor(reg int i=2;i<=n;++i)\n\t\tfa[i]=1; //\u521d\u59cb\u5316\n\tfor(reg int i=2;i<=n;++i){\n\t\treg int s=i,t=fa[i]; //\u6c42\u6700\u5c0f\u5272\u7684\u70b9\u5bf9\n\t\tmemcpy(w,W,sizeof(W)); //\u62f7\u8d1d\u8fb9\u6743\n\t\tint ans=Dinic(s,t); //\u8bb0\u5f55\u6700\u5c0f\u5272\n\t\tS.insert(ans); //\u63d2\u5165 set\n\t\tmemset(vis,false,sizeof(vis)); //\u6e05\u7a7a\u6807\u8bb0\n\t\tDFS(s); //\u5f00\u59cb\u5bfb\u627e\u88ab\u9694\u5f00\u7684\u70b9\u5bf9\n\t\tfor(reg int j=i;j<=n;++j)\n\t\t\tif(fa[j]==t&&vis[j])\n\t\t\t\tfa[j]=s;\n\t}\n\tprintf(\"%d\\n\",(int)S.size()); //\u8f93\u51fa\u591a\u5c11\u79cd\uff0cset \u81ea\u52a8\u53bb\u91cd\n\treturn;\n}\n```",
        "postTime": 1581857492,
        "uid": 38502,
        "name": "agicy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4123 \u3010[CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3011"
    },
    {
        "content": "# \u5e7f\u544a\n\n[\u849f\u84bb\u306eblog](http://www.cnblogs.com/dedicatus545/p/8760390.html)\n\n# \u6b63\u6587\n\n\u9996\u5148\u6211\u4eec\u660e\u786e\u4e00\u70b9\uff1a\u8fd9\u9053\u9898\u4e0d\u662f\u8ba9\u4f60\u628a$n^2$\u4e2a\u6700\u5c0f\u5272\u8dd1\u4e00\u904d\u3010\u5e9f\u8bdd\u3011\n\n\u4f46\u662f\u6700\u5c0f\u5272\u8fc7\u7a0b\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6700\u5c0f\u5272\u5e76\u6ca1\u6709\u522b\u7684\u6548\u7387\u66f4\u9ad8\u7684\u7b97\u6cd5(Stoer-Wagner\u4e4b\u7c7b\u7684\uff1f)\n\n\u90a3\u6211\u4eec\u5c31\u8981\u5c3d\u91cf\u627e\u529e\u6cd5\u51cf\u5c11\u505a\u6700\u5927\u6d41\uff08\u6c42\u6700\u5c0f\u5272\uff09\u7684\u6b21\u6570\n\n# \u6700\u5c0f\u5272\u6811\n\n\u5c31\u50cf\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\uff0c\u6700\u5c0f\u5272\u4e5f\u6709\u81ea\u5df1\u7684\u751f\u6210\u6811\n\n\u6211\u4eec\u65b0\u5efa\u7acb\u4e00\u4e2a\u6709n\u4e2a\u70b9\uff0c\u6ca1\u6709\u8fb9\u7684\u65e0\u5411\u56fe\n\n\u6211\u4eec\u5728\u539f\u65e0\u5411\u56fe\u4e2d\u4efb\u9009\u4e24\u4e2a\u70b9S,T\uff0c\u6c42\u51faS-T\u6700\u5c0f\u5272\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728S-T\u4e2d\u95f4\u52a0\u4e00\u6761\u6743\u503c\u7b49\u4e8e\u6700\u5c0f\u5272\u503c\u5f97\u65e0\u5411\u8fb9\n\n\u7136\u540e\uff0c\u5206\u522b\u5bf9S\u5c5e\u4e8e\u7684\u70b9\u96c6\u5408\u548cT\u5c5e\u4e8e\u7684\u70b9\u96c6\u5408\u9012\u5f52\u505a\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u5f53\u524d\u5904\u7406\u7684\u96c6\u5408\u53ea\u5269\u4e0b\u4e00\u4e2a\u70b9\u4e86\n\n\u73b0\u5728\uff0c\u5bf9\u4e8e\u8fd9\u68f5\u65b0\u6811\uff08\u663e\u7136\u662f\u4e00\u68f5\u6811\uff0c\u53ef\u4ee5\u81ea\u5df1\u9000\u4e00\u4e0b\u4e3a\u4ec0\u4e48\uff09\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\n\n\u6811\u4e0a\u4efb\u610f\u4e24\u4e2a\u70b9\u5728\u539f\u56fe\u4e2d\u7684\u5bf9\u5e94\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u503c\u7b49\u4e8e\u8fd9\u4e24\u4e2a\u70b9\u7684\u6811\u4e0a\u8def\u5f84\u4e2d\u8fb9\u6743\u7684\u6700\u5c0f\u503c\n\n\u8bc1\u660e\uff1f\u6211\u4e5f\u4e0d\u77e5\u9053\u554a\uff01\n\n\u4f46\u662f\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u662f\u53ef\u4ee5\u4fdd\u8bc1\u7684\uff08\u4f60\u4e5f\u53ef\u4ee5\u611f\u6027\u7406\u89e3\u4e00\u4e0bqwq\uff09\n\n# \u505a\u6cd5\n\n\u6709\u4e86\u8fd9\u4e2a\u201c\u5927\u6740\u5668\u201d\u4ee5\u540e\uff0c\u8fd9\u9053\u9898\u4e5f\u5c31\u8fce\u5203\u800c\u89e3\u4e86~\n\n\u56e0\u4e3a\u5b83\u9700\u8981\u6c42\u4e0d\u540c\u7684\u79cd\u7c7b\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u628a\u6240\u6709\u641e\u51fa\u6765\u7684\u6700\u5c0f\u5272\u503c\u653e\u5230\u4e00\u4e2aset\u91cc\u9762\uff0c\u6700\u540eset\u7684size\u5c31\u662f\u79cd\u7c7b\u6570\uff08\u7b54\u6848\uff09\u4e86\n\n# Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#define inf 1e9\ninline int read(){\n\tint re=0,flag=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){\n\t\tif(ch=='-') flag=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') re=(re<<1)+(re<<3)+ch-'0',ch=getchar();\n\treturn re*flag;\n}\nint n,m,cnt=-1,dep[1010],first[1010],cur[1010],vis[1010];\nstd::set<int>s;\nstruct edge{\n\tint to,next,w,W;\n}a[20010];\ninline void add(int u,int v,int w){\n\ta[++cnt]=(edge){v,first[u],w,w};first[u]=cnt;\n\ta[++cnt]=(edge){u,first[v],w,w};first[v]=cnt;\n}\nvoid clear(){\n\tfor(int i=0;i<=cnt;i++) a[i].w=a[i].W;\n}\nbool bfs(int s,int t){\n\tint q[1010],head=0,tail=1,i,u,v;\n\tfor(i=1;i<=n;i++) dep[i]=-1,cur[i]=first[i];\n\tq[0]=s;dep[s]=0;\n\twhile(head<tail){\n\t\tu=q[head++];\n\t\tfor(i=first[u];~i;i=a[i].next){\n\t\t\tv=a[i].to;\n\t\t\tif(~dep[v]||!a[i].w) continue;\n\t\t\tdep[v]=dep[u]+1;q[tail++]=v;\n\t\t}\n\t}\n\treturn ~dep[t];\n}\nint _min(int l,int r){return (l>r)?r:l;}\nint dfs(int u,int t,int limit){\n\tif(u==t||!limit) return limit;\n\tint i,v,f,flow=0;\n\tfor(i=cur[u];~i;i=a[i].next){\n\t\tv=a[i].to;cur[u]=i;\n\t\tif(dep[v]==dep[u]+1&&(f=dfs(v,t,_min(limit,a[i].w)))){\n\t\t\ta[i].w-=f;a[i^1].w+=f;\n\t\t\tflow+=f;limit-=f;\n\t\t\tif(!limit) return flow;\n\t\t}\n\t}\n\treturn flow;\n}\nint dinic(int s,int t){\n\tint re=0;\n\twhile(bfs(s,t)) re+=dfs(s,t,inf);\n\treturn re;\n}\nvoid find(int u){\n\tint i,v;vis[u]=1;\n\tfor(i=first[u];~i;i=a[i].next){\n\t\tv=a[i].to;\n\t\tif(!vis[v]&&a[i].w) find(v);\n\t}\n}\nvoid check(int ss,int tt){\n\tclear();\n\ts.insert(dinic(ss,tt));\n\tmemset(vis,0,sizeof(vis));\n\tfind(ss);\n}\nint p[1010];\nint main(){\n\tmemset(first,-1,sizeof(first));memset(vis,1,sizeof(vis));\n\tint i,t1,t2,t3,ss,tt,j;\n\tn=read();m=read();\n\tfor(i=1;i<=m;i++){\n\t\tt1=read();t2=read();t3=read();\n\t\tadd(t1,t2,t3);\n\t}\n\tfor(i=2;i<=n;i++) p[i]=1;\n\tfor(i=2;i<=n;i++){\n\t\tss=i;tt=p[i];\n\t\tcheck(ss,tt);\n\t\tfor(j=i;j<=n;j++)\n\t\t\tif(p[j]==tt&&vis[j]) p[j]=ss;\n\t}\n\tstd::cout<<s.size();\n}\n```",
        "postTime": 1523351766,
        "uid": 27753,
        "name": "Orion545",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4123 \u3010[CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3011"
    },
    {
        "content": "\u9996\u5148\u660e\u786e\u6700\u5c0f\u5272\u6811\u7684\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u4efb\u610f\u6811\u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u5220\u9664\u56fe\u4e0a\u7684\u70b9 $u,v$\uff0c\u6811\u4e0a\u7684\u8fb9 $(u,v)$\uff0c\u4e4b\u540e\uff0c\u56fe\u4f1a\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5728\u6811\u4e0a\u4e0e $u$ \u8fde\u901a\uff0c\u53e6\u4e00\u90e8\u5206\u5728\u6811\u4e0a\u4e0e $v$ \u8fde\u901a\uff0c\u6811\u4e0a\u8fb9 $(u,v)$ \u7684\u8fb9\u6743\u4e3a\u56fe\u4e0a $u,v$ \u4e4b\u95f4\u7684\u6700\u5c0f\u5272\u3002\n\n\u540c\u65f6\uff0c\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u7684\u6700\u5c0f\u5272\u662f\u5b83\u4eec\u7684\u6811\u4e0a\u8def\u5f84\u8fb9\u6743\u6700\u5c0f\u503c\u3002\n\n\u4e8e\u662f\uff0c\u53ea\u8981\u5c06\u6811\u5efa\u51fa\u6765\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0 $O(1)$ \u67e5\u8be2\u6700\u5c0f\u5272\u5566\uff01\n\n\u95ee\u9898\u6765\u4e86\uff1a\u600e\u4e48\u5efa\u6811\uff1f\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6700\u5c0f\u5272\u6811\u7684\u6027\u8d28\u544a\u8bc9\u6211\u4eec\uff0c\u5176\u5b9e\u53ea\u8981\u4e0d\u65ad\u52a0\u8fb9\u5c31\u53ef\u4ee5\u4e86\uff0c\u5177\u4f53\u505a\u6cd5\u662f\uff1a\n\n1. \u5b9a\u4e49 $build(l,r)$ \u4e3a\u5c06\u533a\u95f4 $[l,r]$\u7684\u8282\u70b9\u5efa\u6811\uff1b\n2. \u6c42\u51fa $MinCut(a_l,a_r)$\uff1b\n3. \u5224\u65ad $[l,r]$ \u4e2d\u90a3\u4e9b\u70b9\u4e0e $a_l$ \u8fde\u901a\uff0c\u90a3\u4e9b\u70b9\u4e0e $a_r$ \u8fde\u901a\uff0c\u5e76\u5c06\u5176\u5212\u5206\u4e3a $[l,lc],[rc,r]$\uff0c\u53ef\u4ee5\u7528\u6700\u540e\u4e00\u6b21\u5e7f\u641c\u8282\u70b9\u662f\u5426\u88ab\u641c\u5230\u4e3a\u6807\u51c6\u5224\u65ad\uff1b\n4. \u9012\u5f52\uff1a$build(l,lc),build(rc,r)$\uff1b\n5. $n$ \u904d\u6df1\u641c\u6c42\u51fa\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u8fb9\u6743\u3002\n\n\u7136\u540e\u67e5\u8be2\u5c31\u53ef\u4ee5\u5566\uff01\n\n##   code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1005,M=30005;\nchar buf[M+5],*p1,*p2,c;\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,M,stdin),p1==p2)?EOF:*p1++)\ninline int read(){\n\tint x=0;while(!isdigit(c=gc));\n\tdo x=x*10+(48^c);while(isdigit(c=gc));return x;\n}\nint ed[M],w[M],tot,n,m,s,t,a[N],b[N];\nvector<int>lk[N];\nint q[N],l,r,d[N],now[N],sz[N],gt;\nstruct Eg{int u,v,w;}eg[N]; \ninline bool bfs(){\n\tint x,y;\n\tfor(x=1;x<=n;++x)d[x]=now[x]=0;\n\td[q[l=r=1]=t]=1;\n\twhile(l<=r){\n\t\tx=q[l++];\n\t\tfor(int i:lk[x])\n\t\t\tif(w[i^1]&&!d[y=ed[i]]){\n\t\t\t\td[q[++r]=y]=d[x]+1;\n\t\t\t\tif(y==s)return 1;\n\t\t\t}\n\t}return 0;\n} \nint disp(int x,int fl){\n\tif(x==t)return fl;\n\tint i,y,k,rs=fl;\n\tfor(int &g=now[x];g<sz[x];++g)\n\t\tif(w[i=lk[x][g]]&&d[y=ed[i]]==d[x]-1)\n\t\t\tif(k=disp(y,min(w[i],rs))){\n\t\t\t\tw[i]-=k,w[i^1]+=k;\n\t\t\t\tif(!(rs-=k))return fl;\n\t\t\t}\n\td[x]=0;return fl-rs;\n}\nvoid build(int l,int r){\n\tif(l>=r)return;int i,lc=l-1,rc=r+1;\n\teg[++gt]={s=a[l],t=a[r]};\n\twhile(bfs())eg[gt].w+=disp(s,INT_MAX);\n\tfor(i=l;i<=r;++i)\n\t\tb[d[a[i]]?--rc:++lc]=a[i];\n\tfor(i=l;i<=r;++i)a[i]=b[i];\n\tfor(i=1;i<=m;++i)\n\t\tw[i+i]+=w[i+i+1]-w[i+i]>>1,w[i+i+1]=w[i+i];\n\treturn build(l,lc),build(rc,r);\n}\nset<int>ans;\nvoid dfs(int x,int pr,int mc){\n\tint y;ans.insert(mc);\n\tfor(int i:lk[x])\n\t\tif((y=ed[i])!=pr)\n\t\t\tdfs(y,x,min(w[i],mc));\n}\nint main(){\n\tn=read(),m=read();int i;\n\tfor(i=1;i<=m;++i){\n\t\tlk[ed[i+i]=read()].push_back(i+i+1);\n\t\tlk[ed[i+i+1]=read()].push_back(i+i);\n\t\tw[i+i]=w[i+i+1]=read();\n\t}\n\tfor(i=1;i<=n;++i)sz[a[i]=i]=lk[i].size();\n\tbuild(1,n);\n\tfor(i=1;i<=n;++i)lk[i].clear();\n\tfor(i=1;i<n;++i){\n\t\tw[i+i]=w[i+i+1]=eg[i].w;\n\t\tlk[ed[i+i]=eg[i].v].push_back(i+i+1);\n\t\tlk[ed[i+i+1]=eg[i].u].push_back(i+i);\n\t}\n\tfor(i=1;i<=n;++i)dfs(i,0,INT_MAX);\n\tprintf(\"%llu\\n\",ans.size()-1);\n\treturn 0;\n}\n```",
        "postTime": 1646009109,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "P4123 [CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272 \u9898\u89e3"
    },
    {
        "content": "~~\u4ec0\u4e48\u5e74\u4ee3\u4e86\u8fd8\u5728\u7528\u77ed\u5c0f\u7cbe\u608d\u7684 Gusfield\uff1f\u5feb\u4f7f\u7528\u53c8\u81ed\u53c8\u957f\u7684 Gomory-Hu\uff01~~\n\n\u5177\u4f53\u7ec6\u8282\u53c2\u89c1[\u6211\u7684\u53e6\u4e00\u7bc7\u535a\u5ba2](/blog/_post/537433)\u3002\n\n\u5bf9\u4e8e\u6b64\u9898\uff0c\u6c42\u51fa\u6700\u5c0f\u5272\u6811\u540e\u5bf9\u4e8e\u6811\u8fb9 `std::sort` \u518d `std::unique` \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2+n\\tau)$\uff08$\\tau$ \u4e3a\u6c42\u6700\u5c0f\u5272\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff09\u3002\n\nGomory-Hu \u5361\u5230\u6700\u4f18\u89e3\u7b2c\u4e8c\u4e0d\u5728\u8bdd\u4e0b\uff08\u5ffd\u7565\u63d0\u4ea4\u7b54\u6848\u7684\uff09\u3002\n```cpp\n#include<assert.h>\n#include<stdio.h>\n#include<stdlib.h>\n#include<algorithm>\n#include<vector>\nconst int N=2001,M=100001;\nbool vis[N],C[N][N];\nint f,s,t,len,las[N],nex[M],en[M],vol[M],he,ta,q[N],dis[N],cnt[N],maxfl,sh[N],fa[N],ans[N][N];\n#define addedg(e,d,g) (nex[len]=las[e],las[e]=len,en[len]=d,vol[len++]=g)\n#define addfl(e,d,g) (addedg(e,d,g),addedg(d,e,g))\nstd::vector<int>rs[N];\nbool bfs()\n{\n\tint x;\n\tfor(int i=he=ta=0;i<f;i++)\n\t\tvis[sh[i]]=0,cnt[sh[i]]=dis[sh[i]]=0;\n\tvis[q[ta++]=sh[t]]=1,dis[sh[t]]=0;\n\twhile(he<ta)\n\t{\n\t\tcnt[dis[x=q[he++]]]++;\n\t\tfor(int _:rs[x])\n\t\t\tfor(int i=las[_];~i;i=nex[i])\n\t\t\t\tif(!vis[sh[en[i]]])\n\t\t\t\t\tvis[sh[en[i]]]=1,dis[sh[en[i]]]=dis[x]+1,q[ta++]=sh[en[i]];\n\t}\n\tassert(sh[s]!=sh[t]);\n\treturn vis[sh[s]];\n}\nint dfs(int x,int fl)\n{\n\tif(x==sh[t])\n\t\treturn maxfl+=fl,fl;\n\tint d=0;\n\tfor(int _:rs[x])\n\t\tfor(int i=las[_],j;~i;i=nex[i])\n\t\t\tif(vol[i]&&dis[sh[en[i]]]==dis[x]-1)\n\t\t\t{\n\t\t\t\td+=j=dfs(sh[en[i]],vol[i]<fl-d?vol[i]:fl-d),vol[i]-=j,vol[i^1]+=j;\n\t\t\t\tif(d==fl)\n\t\t\t\t\treturn d;\n\t\t\t}\n\tcnt[dis[x]]--;\n\tif(!cnt[dis[x]])\n\t\tdis[sh[s]]=f;\n\treturn cnt[++dis[x]]++,d;\n}\nvoid tag(int x)\n{\n\tvis[x]=1;\n\tfor(int _:rs[x])\n\t\tfor(int i=las[_];~i;i=nex[i])\n\t\t\tif(vol[i^1]&&!vis[sh[en[i]]])\n\t\t\t\ttag(sh[en[i]]);\n\treturn;\n}\nint mf(int S,int T)\n{\n\ts=S,t=T;\n\tfor(int i=maxfl=0;i<len;i+=2)\n\t\tvol[i]=vol[i^1]=vol[i]+vol[i^1]>>1;\n\tif(bfs())\n\t\twhile(dis[sh[s]]<f)\n\t\t\tdfs(sh[s],1000000000);\n\tfor(int i=0;i<f;i++)\n\t\tvis[sh[i]]=0;\n\treturn tag(sh[t]),maxfl;\n}\nstd::vector<std::pair<std::pair<int,int>,int>>GomoryHu(std::vector<int>R)\n{\n\tfor(int i:R)\n\t\tassert(sh[i]==i);\n\tif(R.size()==1)\n\t{\n\t\tfor(int i=0;i<f;i++)\n\t\t\tC[R[0]][sh[i]]=1;\n\t\treturn std::vector<std::pair<std::pair<int,int>,int>>();\n\t}\n\tstd::vector<int>R1,R2;\n\tstd::vector<std::pair<std::pair<int,int>,int>>T,T1,T2;\n\tbool v[N];\n\tint r1=R[0],r2=R[1],d=mf(r1,r2),tmp[N],rp,rpp;\n\tfor(int i=0;i<f;i++)\n\t\ttmp[i]=-1,v[i]=vis[i];\n\tfor(int i:R)\n\t\tif(vis[sh[i]])\n\t\t\tR2.emplace_back(i);\n\t\telse\n\t\t\tR1.emplace_back(i);\n\tfor(int i=0,k;i<f;i++)\n\t\tif(v[k=sh[i]]&&k!=r2)\n\t\t\tfor(int j=rs[k].size()-1;~j;j--)\n\t\t\t\ttmp[rs[k][j]]=sh[rs[k][j]],sh[rs[k][j]]=r2,rs[r2].emplace_back(rs[k][j]),rs[k].pop_back();\n\tT1=GomoryHu(R1),T.insert(T.end(),T1.begin(),T1.end());\n\tfor(int i=0;i<f;i++)\n\t\tif(~tmp[i])\n\t\t\tsh[i]=tmp[i],tmp[i]=-1,rs[sh[i]].emplace_back(i);\n\tfor(int i=rs[r2].size()-1;~i&&sh[rs[r2][i]]!=r2;i--)\n\t\trs[r2].pop_back();\n\tfor(int i=0,k;i<f;i++)\n\t\tif(!v[k=sh[i]]&&k!=r1)\n\t\t\tfor(int j=rs[k].size()-1;~j;j--)\n\t\t\t\ttmp[rs[k][j]]=sh[rs[k][j]],sh[rs[k][j]]=r1,rs[r1].emplace_back(rs[k][j]),rs[k].pop_back();\n\tT2=GomoryHu(R2),T.insert(T.end(),T2.begin(),T2.end());\n\tfor(int i=0;i<f;i++)\n\t\tif(~tmp[i])\n\t\t\tsh[i]=tmp[i],tmp[i]=-1,rs[sh[i]].emplace_back(i);\n\tfor(int i=rs[r1].size()-1;~i&&sh[rs[r1][i]]!=r1;i--)\n\t\trs[r1].pop_back();\n\tfor(int i:R1)\n\t\tif(C[i][r2])\n\t\t{\n\t\t\trp=i,C[i][r2]=0;\n\t\t\tbreak;\n\t\t}\n\tfor(int i:R2)\n\t\tif(C[i][r1])\n\t\t{\n\t\t\trpp=i,C[i][r1]=0;\n\t\t\tbreak;\n\t\t}\n\treturn T.emplace_back(std::make_pair(rp,rpp),d),T;\n}\nint main()\n{\n\tint n,m,u,v,w;\n\tstd::vector<int>R;\n\tscanf(\"%d%d\",&n,&m),f=n;\n\tfor(int i=0;i<f;i++)\n\t\tlas[i]=-1,R.emplace_back(i),sh[i]=i,rs[i].emplace_back(i);\n\twhile(m--)\n\t\tscanf(\"%d%d%d\",&u,&v,&w),addfl(u-1,v-1,w);\n\tauto T=GomoryHu(R);\n\tstd::sort(T.begin(),T.end(),[](std::pair<std::pair<int,int>,int>a,std::pair<std::pair<int,int>,int>b){return a.second<b.second;}),printf(\"%d\",std::unique(T.begin(),T.end(),[](std::pair<std::pair<int,int>,int>a,std::pair<std::pair<int,int>,int>b){return a.second==b.second;})-T.begin());\n\treturn 0;\n}\n```",
        "postTime": 1681659452,
        "uid": 335096,
        "name": "Eznibuil",
        "ccfLevel": 7,
        "title": "\u9898\u89e3\uff1aP4123 [CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272"
    },
    {
        "content": "# \u672c\u9898\u89e3\u9700\u8981\u5f00O2\uff01\uff01\uff01\n# \u90bb\u63a5\u77e9\u9635\u9898\u89e3\n\u7528Gomory-Hu Tree\u6c42\u51fa\u6240\u6709\u7684\u70b9\u5bf9\u7684\u6700\u5c0f\u5272\uff0c\u518d\u7edf\u8ba1\u5373\u53ef\uff1b\n\n#### \u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<iostream>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=855,INF=0x7fffffff/2;\nint N,M,S,T,map[maxn][maxn],g[maxn][maxn],dis[maxn],gap[maxn],vst[maxn],Q,f[maxn][maxn],fa[maxn];\nint DFS(int x,int maxf)//SAP\n{if(x==T)return maxf;\n int ret=0;\n for(int i=1;i<=N;i++)\n    {if(g[x][i]>0&&dis[x]==dis[i]+1)\n       {int dlt=DFS(i,min(maxf,g[x][i]));\n        maxf-=dlt;\n        ret+=dlt;\n        g[x][i]-=dlt;\n        g[i][x]+=dlt;\n        if(dis[S]==N||!maxf)return ret;\n       }\n    }\n if(!(--gap[dis[x]]))dis[S]=N;\n gap[++dis[x]]++;\n return ret;\n}\nvoid DFS(int x)\n{vst[x]=1;\n for(int i=1;i<=N;i++)\n    if(g[x][i]&&!vst[i])DFS(i);\n}\nvoid Gusfield()\n{for(int i=1;i<=N;i++)\n    for(int j=1;j<=N;j++)\n\t   f[i][j]=INF;\n for(int i=2;i<=N;i++)fa[i]=1;\n for(int i=2;i<=N;i++)\n    {memcpy(g,map,sizeof(map));\n     memset(gap,0,sizeof(gap));\n     memset(dis,0,sizeof(dis));\n     memset(vst,0,sizeof(vst));\n     S=fa[i];\n     T=i;\n     int ans=0;\n     gap[0]=N;\n     while(dis[S]<N)ans+=DFS(S,INF);\n     DFS(S);\n     for(int j=i+1;j<=N;j++)\n        if(vst[j]==0&&fa[j]==fa[i])fa[j]=i;\n     for(int j=1;j<i;j++)\n        f[i][j]=f[j][i]=min(f[fa[i]][j],ans);\n    }\n}\nint main()\n{scanf(\"%d%d\",&N,&M);\n memset(map,0,sizeof(map));\n for(int i=1;i<=M;i++)\n    {int u,v,w;\n\t scanf(\"%d%d%d\",&u,&v,&w);\n\t map[u][v]+=w;//\u53ef\u80fd\u6709\u91cd\u8fb9 \n\t map[v][u]+=w; \n    }\n Gusfield();\n int *c=new int [N*(N-1)+1];\n c[0]=0;\n for(int i=1;i<=N;i++)\n    for(int j=i+1;j<=N;j++)\n       {c[++c[0]]=f[i][j];\n       }\n sort(c+1,c+c[0]+1);\n cout<<unique(c+1,c+1+c[0])-c-1;//\u53bb\u91cd\u540e\u4e2a\u6570 \n delete[]c;\n}\n```",
        "postTime": 1550112449,
        "uid": 132394,
        "name": "chenzizai2021",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4123 \u3010[CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3011"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5206\u6790\u4e0e\u9898\u89e3\uff1a**\u8fd9\u9053\u9898\u662f\u6700\u5c0f\u5272\u6811\u7684\u6a21\u677f\u9898\uff0c\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u56fe\uff0c\u6211\u4eec\u6c42\u51fa\u8fd9\u4e2a\u56fe\u7684\u6700\u5c0f\u5272\u6811\uff0c\u5728\u6c42\u51fa\u6700\u5c0f\u5272\u6811\u7684\u540c\u65f6\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u5c0f\u5272\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u901a\u8fc7\u6392\u5e8f\u6765\u6c42\u5f97\u4e00\u5171\u6709\u591a\u5c11\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3002\n\n```c++\n// luogu-judger-enable-o2\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define N 1000\n#define M 10000\n#define inf 1000000000\nint n,m,s,t,mincut,ans,point[N],tmp[N],dis[N],cut[N][N],number[N*N],cnt;\nint cur[N],head[N],to[M<<1],val[M<<1],nxt[M<<1],idx=1;bool vis[N];\nvoid add(int a,int b,int c)\n    {nxt[++idx]=head[a],to[idx]=b,val[idx]=c,head[a]=idx;}\nbool bfs() \n{\n    memset(dis,-1,sizeof dis);\n    queue <int> q;q.push(s),dis[s]=0;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        if(p==t) return true;\n        for(int i=head[p];i;i=nxt[i])\n            if(val[i]>0&&dis[to[i]]==-1)\n                dis[to[i]]=dis[p]+1,q.push(to[i]);\n    } return false;\n}\nint dfs(int p,int flow)\n{\n    int now,temp=flow;\n    if(p==t) return flow;\n    for(int i=cur[p];i;i=nxt[i])\n        if(val[i]>0&&dis[to[i]]==dis[p]+1)\n        {\n            now=dfs(to[i],min(val[i],temp));\n            if(!now) dis[to[i]]=-1;\n            temp-=now,val[i]-=now,val[i^1]+=now;\n            if(val[i]) cur[p]=i;\n            if(!temp) break;\n        } return flow-temp;\n}\nvoid dinic() {while(bfs()) memcpy(cur,head,sizeof head),mincut+=dfs(s,inf);}\nvoid dfs1(int p)\n{\n    vis[p]=true;\n    for(int i=head[p];i;i=nxt[i])\n        if(val[i]&&vis[to[i]]==false) dfs1(to[i]);\n}\nvoid build(int l,int r)\n{\n    if(l==r) return;\n    for(int i=2;i<=idx;i+=2) val[i]=val[i^1]=(val[i]+val[i^1])/2;\n    int lx=l,rx=r;s=point[l],t=point[r];\n    mincut=0,dinic(),memset(vis,0,sizeof vis),dfs1(s);\n    for(int i=1;i<=n;i++) if(vis[i])\n        for(int j=1;j<=n;j++) if(!vis[j])\n            cut[i][j]=cut[j][i]=min(cut[i][j],mincut);\n    for(int i=l;i<=r;i++)\n        if(vis[point[i]]) tmp[lx++]=point[i]; else tmp[rx--]=point[i];\n    for(int i=l;i<=r;i++) point[i]=tmp[i];\n    build(l,lx-1),build(rx+1,r);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m),memset(cut,0x7f7f,sizeof cut);\n    for(int i=1,a,b,c;i<=m;i++)\n        scanf(\"%d%d%d\",&a,&b,&c),add(a,b,c),add(b,a,c);\n    for(int i=1;i<=n;i++) point[i]=i; build(1,n);\n    for(int i=1;i<=n;i++) for(int j=1;j<=n;j++)\n        if(i!=j) number[++cnt]=cut[i][j];\n    sort(number+1,number+cnt+1);\n    for(int i=1,tmp=0;i<=cnt;i+=tmp,ans++,tmp=0)\n        while(number[i]==number[i+tmp]&&i+tmp<=cnt) tmp++;\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1545618954,
        "uid": 52851,
        "name": "ysy20021208",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4123 \u3010[CQOI2016]\u4e0d\u540c\u7684\u6700\u5c0f\u5272\u3011"
    }
]