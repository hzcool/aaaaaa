[
    {
        "content": "[My Blog](https://www.cnblogs.com/clover4/p/15521885.html)\n### \u9898\u76ee\u5927\u610f\n>  [Problem Link](https://loj.ac/p/3278)\n\n> IOI \u519c\u573a\u662f\u4e00\u4e2a\u79cd\u690d\u82f9\u679c\u7684\u519c\u573a\uff0c\u4ee5\u4f4d\u4e8e\u4e00\u4e2a\u5de8\u5927\u7684\u73af\u5f62\u6e56\u5468\u8fb9\u800c\u95fb\u540d\u3002\n> \u5728 IOI \u519c\u573a\uff0c\u5171\u6709 $N$ \u4e2a\u5458\u5de5\uff0c\u4ece $1$ \u5230 $N$ \u6807\u53f7\u3002\u5171\u6709 $M$ \u68f5\u82f9\u679c\u6811\uff0c\u4ece $1$ \u5230 $M$ \u6807\u53f7\u3002\u6e56\u7684\u5468\u957f\u4e3a $L$ \u7c73\u3002\n> \u5728\u521d\u59cb\u65f6\u523b\uff0c\u7b2c $i$ ($1 \\leq i \\leq N$) \u4f4d\u5458\u5de5\u7ad9\u5728\u79bb\u6e56\u6700\u5317\u7aef\u987a\u65f6\u9488 $A_i \\,\\mathrm m$ \u7c73\u7684\u4f4d\u7f6e\uff0c\u7b2c $j$ ($1 \\leq j \\leq M$) \u68f5\u82f9\u679c\u6811\u5728\u79bb\u6e56\u6700\u5317\u7aef\u987a\u65f6\u9488 $B_i \\,\\mathrm m$ \u7684\u4f4d\u7f6e\u3002\u4fdd\u8bc1\u8fd9 $N + M$ \u4e2a\u6574\u6570 $A_i, B_i$ \u4e92\u4e0d\u76f8\u540c\u3002\n> \u7531\u4e8e IOI \u519c\u573a\u82f9\u679c\u6811\u662f\u7ecf\u8fc7\u6539\u826f\u7684\u7279\u6b8a\u54c1\u79cd\uff0c\u4e00\u68f5\u6811\u540c\u65f6\u53ea\u80fd\u7ed3\u4e00\u4e2a\u82f9\u679c\u3002\u540c\u65f6\uff0c\u5982\u679c\u4e00\u68f5\u6811\u4e0a\u7684\u82f9\u679c\u88ab\u6458\u6389\u4e86\uff0c\u5728\u6070\u597d $C \\,\\mathrm s$ \u540e\u4f1a\u957f\u51fa\u4e00\u4e2a\u82f9\u679c\u3002\n> \u5728\u521d\u59cb\u65f6\u523b\uff0c\u6bcf\u68f5\u6811\u4e0a\u90fd\u6709\u4e00\u4e2a\u82f9\u679c\uff0c\u540c\u65f6\u6bcf\u4e2a\u5458\u5de5\u5f00\u59cb\u6cbf\u7740\u987a\u65f6\u9488\u65b9\u5411\u79fb\u52a8\u3002\u5458\u5de5\u7684\u79fb\u52a8\u901f\u5ea6\u662f $1 \\,\\mathrm{m/s}$\u3002\u5982\u679c\u4e00\u4e2a\u5458\u5de5\u5728\u67d0\u4e00\u65f6\u523b\u5230\u8fbe\u4e86\u4e00\u9897\u957f\u6709\u82f9\u679c\u7684\u82f9\u679c\u6811\uff0c\u4ed6\u4f1a\u6458\u6389\u8fd9\u4e2a\u82f9\u679c (\u5982\u679c\u5728\u5230\u8fbe\u65f6\u6070\u597d\u957f\u51fa\u82f9\u679c\uff0c\u5458\u5de5\u4e5f\u4f1a\u6458\u6389)\u3002\u8fd9\u91cc\u6211\u4eec\u5ffd\u7565\u5458\u5de5\u6458\u82f9\u679c\u7684\u65f6\u95f4\u3002\n> K \u4e3b\u5e2d\u662f IOI \u519c\u573a\u7684\u80a1\u4e1c\u3002\u56e0\u4e3a\u4f60\u662f IOI \u519c\u573a\u7684\u4e00\u540d\u7ba1\u7406\u4eba\u5458\uff0cK \u4e3b\u5e2d\u4f1a\u4e0d\u65ad\u95ee\u4f60\u6bcf\u4e2a\u5458\u5de5\u7684\u5de5\u4f5c\u6548\u7387\u3002\u66f4\u4e00\u822c\u7684\uff0cK \u4e3b\u5e2d\u4f1a\u6709 $Q$ \u4e2a\u95ee\u9898\uff0c\u7b2c $k$ ($1 \\leq k \\leq Q$) \u4e2a\u95ee\u9898\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a\n> \u8be2\u95ee\u524d $T_k \\,\\mathrm s$ \u4e2d\uff0c\u7b2c $V_k$ \u4e2a\u5458\u5de5\u4e00\u5171\u6536\u83b7\u4e86\u591a\u5c11\u4e2a\u82f9\u679c (\u6ce8\u610f\u5305\u542b\u7b2c $T_k \\,\\mathrm s$ \u672b\u6536\u83b7\u7684\u82f9\u679c)\u3002\n> \u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u56de\u7b54\u8fd9\u4e9b\u8be2\u95ee\u3002\n\n### \u9898\u89e3\n\u5f88\u9707\u64bc\u7684\u9898\u3002\n\n\u9996\u5148\u9ed8\u8ba4\u628a $A, B$ \u6392\u5e8f\u3002\n\n#### \u95ee\u9898\u8f6c\u5316\n\n\u89c2\u5bdf\u5230\u8fd9\u4e2a $C$ \u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u4e5f\u5c31\u662f\u82f9\u679c\u7684**\u751f\u957f\u5468\u671f**\u662f\u4e00\u4e2a\u5b9a\u503c\u3002\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u5b9a\u503c\u5e26\u7ed9\u4e86\u6211\u4eec\u4ec0\u4e48\u60f3\u6cd5\u3002\n\n\u56e0\u4e3a\u4eba\u7684\u79fb\u52a8\u901f\u5ea6\u662f\u76f8\u540c\u7684\uff0c $C$ \u4e3a\u5b9a\u503c\uff0c\u90a3\u4e48\u4e00\u4e2a\u4eba\u6458\u4e0b\u8fd9\u4e2a\u82f9\u679c\u4ee5\u540e\uff0c\u4e0b\u4e00\u4e2a\u6458\u8fd9\u4e2a\u82f9\u679c\u7684\u4eba\u662f\u56fa\u5b9a\u7684\u3002\u4e0d\u59a8\u6211\u4eec\u4ee4\u67d0\u4e2a\u4eba $i$ \u6458\u5b8c\u4ee5\u540e\u4e0b\u4e00\u4e2a\u6458\u8fd9\u4e2a\u82f9\u679c\u7684\u4eba\u7684\u7f16\u53f7\u662f $p_i$ \u3002\u90a3\u4e48\u6211\u4eec\u8fde\u8fb9 $i \\rightarrow p_i $ \u3002 \n\n\u90a3\u4e48\u6211\u4eec\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u68f5\u5173\u4e8e\u4eba\u7684\u57fa\u73af\u5185\u5411\u6811\u3002\n\n\u8003\u8651 $p_i$ \u5982\u4f55\u8ba1\u7b97\u3002\u5728 $A$ \u4e2d\u67e5\u627e\u5728 $\\mod L$ \u610f\u4e49\u4e0b $A_i - C$ \u524d\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u4e0b\u6807\u5c31\u662f $p_i$\uff0c \u7528\u4e00\u4e2a $\\text{set}$ \u7ef4\u62a4\u5373\u53ef\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u786e\u5b9a\u8fd9\u68f5\u6811\u7684\u8fb9\u6743\uff0c \u4e0d\u59a8\u4ee4\u8fb9\u6743 $w_i$ \u8868\u793a\u4e24\u4e2a\u4eba\u4e4b\u95f4\u6458\u5230\u82f9\u679c\u7684\u65f6\u95f4\u5dee\uff0c \u90a3\u4e48 $w_i$ \u662f\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u6700\u5c0f\u6b63\u6574\u6570\u3002\n\n+ $w_i \\geq C$\n+ $w_i \\equiv A_i - A_{p_i} \\pmod L$\n\n\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u5f97\u51fa $w_i = \\lfloor\\frac{C + L - ((A_i - A_{p_i} + L) \\mod L) - 1}{L}\\rfloor \\times L + A_i - A_{p_i}$ \u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c \u4e00\u4e2a\u82f9\u679c\u7684\u8def\u5f84\u53ea\u4f1a\u5728\u4e00\u68f5\u57fa\u73af\u6811\u4e0a\u9762\u8dd1\uff0c \u6211\u4eec\u73b0\u5728\u5bf9\u6bcf\u68f5\u57fa\u73af\u6811\u5206\u5f00\u8003\u8651\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4eba\uff0c \u6211\u4eec\u5bf9\u4e8e\u5176\u662f\u5426\u5728\u57fa\u73af\u6811\u7684\u73af\u4e0a\u5206\u5f00\u8ba8\u8bba\u3002\n\n#### \u5bf9\u4e8e\u4e0d\u5728\u73af\u4e0a\u7684\u4eba\u7684\u5904\u7406\n\n\u4e0d\u59a8\u5bf9\u6bcf\u68f5\u82f9\u679c\u6811\u5904\u7406\u51fa\u4e00\u4e2a\u6570\u5bf9 $(v_0, t_0)$ \u8868\u793a $t_0$ \u65f6\u523b $v_0$ \u53f7\u4eba\u7b2c\u4e00\u6b21\u6458\u4e0b\u4e86\u8fd9\u4e2a\u82f9\u679c\u3002\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u5c31\u662f\u6c42\u67d0\u4e2a\u70b9 $v$ \u7684\u5b50\u6811\u91cc\u6709\u591a\u5c11\u6570\u5bf9 $(v_0, t_0)$ \u6ee1\u8db3 $t_0 + \\text{dist}(v_0, v) \\leq t$ \uff0c \u4e5f\u5c31\u662f $t_0 + dep_{v_0} \\leq t + dep_v$ \u3002\u52a0\u4e0a $\\text{dfs}$ \u5e8f\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u5728\u79bb\u6563\u5316\u4ee5\u540e\u4e8c\u7ef4\u6570\u70b9\u6c42\u51fa\u3002\n\n#### \u5bf9\u4e8e\u5728\u73af\u4e0a\u7684\u4eba\u7684\u5904\u7406\n\n\u540c\u6837\u8003\u8651\u5904\u7406\u4e00\u4e2a\u6570\u5bf9 $(v_0, t_0)$ \u8868\u793a $t_0$ \u65f6\u523b $v_0$ \u53f7\u4eba\u7b2c\u4e00\u6b21**\u5728\u73af\u4e0a**\u6458\u4e0b\u4e86\u8fd9\u4e2a\u82f9\u679c\u3002\u6211\u4eec\u53ef\u4ee5\u500d\u589e\u5904\u7406\u8fd9\u4e2a\u4e1c\u897f\u3002\u7136\u540e\u6211\u4eec\u5f00\u59cb\u8ba8\u8bba\u8fd9\u68f5\u57fa\u73af\u6811\u7684\u73af\u3002\u4e0d\u59a8\u8bbe\u8fd9\u4e2a\u73af\u7684\u5f62\u6001\u662f $c_0 \\leftarrow c_1 \\leftarrow c_2 \\leftarrow \\cdots \\leftarrow c_{s - 1} \\leftarrow c_s(c_0)$ \u3002\u8bb0 $dep_i$ \u8868\u793a\u73af\u4e0a\u8fb9\u957f\u7684\u524d\u7f00\u548c\uff0c  $P$ \u8868\u793a\u73af\u957f\u3002\n\n\u8bbe\u8fd9\u4e2a\u6570\u5bf9\u4e3a $(c_i, t0)$ \uff0c \u4eba\u7684\u4f4d\u7f6e\u4e3a $c_j$\uff0c \u4e0d\u59a8\u8bbe $i \\geq j$ \u3002\u90a3\u4e48\u8fd9\u4e2a\u82f9\u679c\u5bf9\u8fd9\u4e2a\u4eba\u7684\u8d21\u732e\u5982\u4e0b\n\n$$\\max\\{0, \\lfloor \\frac{t - (t_0 + dep_i - dep_j}{P} \\rfloor + 1\\}$$\n\n\u8003\u8651\u5bf9\u8d21\u732e\u53f3\u8fb9\u8fdb\u884c\u53d8\u5316\n\n$$\\lfloor \\frac{t + dep_j - (t_0 + dep_i)}{P} \\rfloor + 1$$\n\n\u8fd9\u6837\u4e00\u68f5\u82f9\u679c\u6811\u5bf9\u5e94\u4e00\u4e2a\u53c2\u6570 $\\delta_t = t_0 + dep_i$ \uff0c \u4e00\u4e2a\u4eba\u5bf9\u5e94\u4e00\u4e2a\u53c2\u6570 $\\delta_y = t + dep_j$ \u3002\u7531\u4e8e\u6709\u5bf9 $P$ \u505a\u9664\u6cd5\u7684\u64cd\u4f5c\uff0c \u4e0d\u59a8\u6309\u7167\u5957\u8def\uff0c\u8bbe $\\delta_t = P \\times q_t + r_t, \\delta_y = P \\times q_y + r_y$ \u3002\u5e26\u8fdb\u539f\u5f0f\u5f97\n$$\\lfloor\\frac{\\delta_y - \\delta_t}{P}\\rfloor = \\lfloor \\frac{P\\times(q_y - q_t) + (r_y - r_t)}{P}\\rfloor + 1 = q_y - q_t + [r_y \\geq r_t]$$\n\n\u90a3\u4e48\u53ef\u4ee5\u5148\u5bf9\u4e8e $q_y \\geq q_t$ \u7684\u70b9\uff0c \u6c42\u51fa$q_y - q_t$\u4e4b\u548c\uff0c \u7136\u540e\u6bcf\u6b21\u6c42\u6709\u591a\u5c11\u70b9\u6ee1\u8db3 $r_y \\geq r_t$ \u3002\u540c\u6837\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u70b9\u3002\n\n\u7136\u540e\u518d\u8003\u8651 $i < j$ \u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u628a\u5f0f\u5b50\u5316\u7b80\u4ee5\u540e\u5c31\u662f\u6240\u6709\u7b54\u6848\u4e3a\u6b63\u6570\u7684\u60c5\u51b5\u4e0b\u7b54\u6848\u51cf\u5c11\u4e86$1$\u3002 \u90a3\u4e48\u6211\u4eec\u628a $i < j$ \u7684\u60c5\u51b5\u548c\u524d\u9762\u540c\u7b49\u8003\u8651\uff0c \u7136\u540e\u51cf\u53bb\u6ee1\u8db3 $i < j, t_0 + dep_i \\leq t + dep_j$ \u7684\u70b9\u5bf9\u4e2a\u6570\u5373\u53ef\u3002\n\n\u6240\u6709\u8be2\u95ee\u5168\u90e8\u79bb\u7ebf\u6811\u72b6\u6570\u7ec4\u5904\u7406\uff0c \u65f6\u95f4\u590d\u6742\u5ea6 $O(N \\log N)$ \u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define lep(i, l, r) for(int i = (l); i <= (r); i ++)\n#define rep(i, l, r) for(int i = (l); i >= (r); i --)\n#define Lep(i, l, r) for(int i = (l); i <  (r); i ++)\n#define Rep(i, l, r) for(int i = (l - 1); i >= (r); i --)\n#define pb push_back\n#define fi first\n#define se second\n\nusing i64 = long long;\nusing uint = unsigned int;\nusing ui64 = unsigned long long;\nusing pii = pair<int, int>;\nusing vi = vector<int>;\n\nnamespace io {\n\tstruct io {\n\t\tio() {\n            ios :: sync_with_stdio(false); \n            cin.tie(0); cout.tie(0);\n        }\n\t} unname;\n    struct read {\n        operator int () { int x; cin >> x; return x; }\n        operator i64 () { i64 x; cin >> x; return x; }\n        operator char () { char x; cin >> x; return x; }\n        operator double () { double x; cin >> x; return x; }\n        operator string () { string x; cin >> x; return x; }\n    } rd;\n} ;\n\nusing io :: rd;\n\nconst int N = 4e5 + 10;\n\nnamespace Unique {\n    vector<i64> unique(vector<i64> &vec) {\n        sort(vec.begin(), vec.end());\n        auto end = unique(vec.begin(), vec.end());\n        vector<i64> res;\n        for (auto it = vec.begin(); it != end; ++ it) res.push_back(* it);\n        return res;\n    }\n} ;\n\n#define lowbit(x) (x & -x)\n\nstruct Bit {\n    i64 c[N];\n    vector<int> bck;\n    void upd(int x, i64 y) {\n        bck.push_back(x);\n        for (; x < N; x += lowbit(x)) c[x] += y;\n    }\n    i64 qry(int x) {\n        i64 ans = 0;\n        for (; x; x -= lowbit(x)) ans += c[x];\n        return ans;\n    }\n    i64 qry(int l, int r) { return qry(r) - qry(l - 1); }\n    void clr(int x) {\n        for (; x < N; x += lowbit(x)) c[x] = 0;\n    }\n    void clr() {\n        for (auto x : bck) clr(x); bck.clear(); //n = 0;\n    }\n} bt;\n\n#undef lowbit\n\nint n, m, L, C;\n\ninline int reduce(int x, int mod) { return (x % mod + mod) % mod; }\n\nint A[N], B[N];\nint p[N];\nvector<pair<int, int> > e[N];\n\nint bel[N], tree_number, root[N], sz[N], number, dfn[N], oncir[N], fa[N][20], lg[N];\ni64 dep[N], ew[N];\n\nvoid dfs(int x, int fx) {\n    dfn[x] = ++ number; sz[x] = 1; bel[x] = tree_number; fa[x][0] = fx;\n    Lep (i, 1, 20) fa[x][i] = fa[fa[x][i - 1]][i - 1];\n    for(auto p : e[x]) {\n        int y = p.first, w = p.second;\n        if(y == root[tree_number]) oncir[y] = 1, oncir[x] = 1;\n        else dep[y] = dep[x] + w, dfs(y, x), oncir[x] |= oncir[y], sz[x] += sz[y];\n    }\n}\n\ni64 Ans[N];\nstruct Three { i64 a, b, c; } ;\nstruct Qry {\n    int v; i64 t; int id;\n} ;\nvector<Qry> qrys1, qrys2;\n\nstruct Point { i64 x, y; } ;\nstruct Line { i64 l1, r1, h, id, type; } ;\nstruct Mat { i64 l1, r1, l2, r2; } ;\n\n/* Two-side count nodes */\n\nnamespace Count {\n    vector<i64> twoside_count(vector<Mat> &mt, vector<Point> &pt) {\n        vector<Line> lns;\n        vector<i64> ans(mt.size());\n        lep (i, 0, (int) mt.size() - 1) {\n            lns.push_back( {mt[i].l1, mt[i].r1, mt[i].l2 - 1, i, -1} );\n            lns.push_back( {mt[i].l1, mt[i].r1, mt[i].r2, i, 1} );\n        }\n        sort(lns.begin(), lns.end(), [] (Line a, Line b) { return a.h == b.h ? a.type < b.type : a.h < b.h; } );\n        sort(pt.begin(), pt.end(), [] (Point a, Point b) { return a.y < b.y; } );\n        int j = 0;\n        bt.clr();\n        for (auto p : lns) {\n            while (j < pt.size() && pt[j].y <= p.h) {\n                bt.upd(pt[j].x, 1); j ++;\n            }\n            ans[p.id] += p.type * bt.qry(p.l1, p.r1);\n        }\n        return ans;\n    }\n} \n\nsigned main() {\n#ifdef FILEIN\n    freopen(\"1.in\", \"r\", stdin);\n#endif\n    n = rd; m = rd; L = rd; C = rd;\n    lep (i, 1, n) A[i] = rd;\n    lep (i, 1, m) B[i] = rd;\n    /* Build Tree */\n    lep (i, 1, n) {\n        auto it = upper_bound(A + 1, A + 1 + n, reduce(A[i] - C, L)) - A - 1;\n        if(! it) it = n;\n        p[i] = it;\n        int w = (C + L - reduce(A[i] - A[p[i]], L) - 1) / L * L + reduce(A[i] - A[p[i]], L);\n        e[p[i]].push_back( {i, w} );\n        ew[i] = w;\n    }\n    lep (i, 2, n) lg[i] = lg[i >> 1] + 1;\n    lep (i, 1, n) if (! bel[i]) {\n        ++ tree_number;\n        int j = i;\n        while(! bel[j]) { bel[j] = tree_number; j = p[j]; }\n        root[tree_number] = j;\n        dfs(j, 0);\n    } \n    int q = rd;\n    lep (i, 1, q) {\n        int v = rd; i64 t = rd;\n        if(! oncir[v]) qrys1.push_back( {v, t, i} );\n        else qrys2.push_back( {v, t, i} );\n    }\n    /* Not on circle */\n    vector<pair<int, i64> > pairs;\n    lep (i, 1, m) {\n        auto it = upper_bound(A + 1, A + 1 + n, B[i]) - A;\n        if (it == 1) it = n; else it --;\n        int v0 = it, t0 = reduce(B[i] - A[it], L);\n        pairs.push_back( {v0, t0} );\n    }\n    vector<Mat> mat;\n    vector<Point> pnt;\n    vector<i64> values, record;\n    for (auto p : pairs) pnt.push_back( {dfn[p.first], p.second + dep[p.first]} ), values.push_back(p.second + dep[p.first]);\n    for (auto p : qrys1) {\n        mat.push_back( {dfn[p.v], dfn[p.v] + sz[p.v] - 1, 1, dep[p.v] + p.t} ), values.push_back(dep[p.v] + p.t);\n    }\n    values.push_back(1);\n    values = Unique :: unique(values);\n    for (auto &p : pnt) p.y = lower_bound(values.begin(), values.end(), p.y) - values.begin() + 1;\n    for (auto &p : mat) \n        p.l2 = lower_bound(values.begin(), values.end(), p.l2) - values.begin() + 1, \n        p.r2 = lower_bound(values.begin(), values.end(), p.r2) - values.begin() + 1;\n    record = Count :: twoside_count(mat, pnt); \n    int cnt = 0;\n    for (auto &p : qrys1) Ans[p.id] = record[cnt], cnt ++;\n\n    /* Is on circle */\n    for (auto &p : pairs) {\n        int &v0 = p.first;\n        i64 &t0 = p.second;\n        if (! oncir[v0]) {\n            rep (i, 19, 0) if (fa[v0][i] && ! oncir[fa[v0][i]]) {\n                t0 += dep[v0] - dep[fa[v0][i]];\n                v0 = fa[v0][i];\n            }\n            t0 += ew[v0];\n            v0 = fa[v0][0];\n        }\n    }\n    static int vis[N], loc[N];\n    memset(dep, 0, sizeof(dep));\n    static vector<Qry> link_qry[N];\n    static vector<pair<i64, i64> > link_pair[N];\n    for (auto p : qrys2) link_qry[bel[p.v]].push_back(p);\n    for (auto p : pairs) link_pair[bel[p.first]].push_back(p);\n    lep (now, 1, tree_number) {\n        int rt = root[now];\n        int i = rt;\n        vector<int> cir;\n        while (! vis[i]) {\n            cir.push_back(i);\n            vis[i] = 1;\n            i = p[i];\n        }    \n        cir.push_back(cir[0]);\n        reverse(cir.begin(), cir.end());\n        dep[cir[0]] = 0;\n        lep (i, 1, (int) cir.size() - 1) dep[cir[i]] = dep[cir[i - 1]] + ew[cir[i]];\n        lep (i, 0, (int) cir.size() - 2) loc[cir[i]] = i;\n        i64 P = dep[cir[0]];dep[cir[0]] = 0;\n        vector<pair<i64, i64> > tree_node;\n        vector<Three> people_node;\n        for (auto p : link_pair[now]) tree_node.push_back( {(p.second + dep[p.first]) / P, (p.second + dep[p.first]) % P} );\n        for (auto p : link_qry[now]) {\n            i64 delta = p.t + dep[p.v];\n            people_node.push_back( {delta / P, delta % P, p.id} );\n        }\n        sort(tree_node.begin(), tree_node.end(), [] (pair<i64, i64> a, pair<i64, i64> b) { return a.first < b.first; } );\n        sort(people_node.begin(), people_node.end(), [] (Three a, Three b) { return a.a < b.a; } );\n        values.clear();\n        for (auto p : tree_node) values.push_back(p.second);\n        for (auto p : people_node) values.push_back(p.b);\n        values = Unique :: unique(values);\n        for (auto &p : tree_node) p.second = lower_bound(values.begin(), values.end(), p.second) - values.begin() + 1;\n        for (auto &p : people_node) p.b = lower_bound(values.begin(), values.end(), p.b) - values.begin() + 1;\n        bt.clr();\n        i64 sum = 0; i = 0;\n        for (auto p : people_node) {\n            i64 qy = p.a, ry = p.b, id = p.c;\n            while (i < tree_node.size() && tree_node[i].first <= qy) {\n                sum += tree_node[i].first; \n                bt.upd(tree_node[i].second, 1);\n                i ++;\n            }\n            Ans[id] += 1ll * i * qy - sum + bt.qry(ry);\n        }\n        tree_node.clear();\n        people_node.clear();\n        for (auto p : link_pair[now]) tree_node.push_back( {loc[p.first], p.second + dep[p.first]} );\n        for (auto p : link_qry[now]) {\n            i64 delta = p.t + dep[p.v];\n            people_node.push_back( {loc[p.v], p.t + dep[p.v], p.id} );\n        }\n        values.clear();\n        for (auto p : tree_node) values.push_back(p.second);\n        for (auto p : people_node) values.push_back(p.b);\n        values = Unique :: unique(values);\n        for (auto &p : tree_node) p.second = lower_bound(values.begin(), values.end(), p.second) - values.begin() + 1;\n        for (auto &p : people_node) p.b = lower_bound(values.begin(), values.end(), p.b) - values.begin() + 1;\n        sort(tree_node.begin(), tree_node.end(), [] (pair<i64, i64> a, pair<i64, i64> b) { return a.first < b.first; } );\n        sort(people_node.begin(), people_node.end(), [] (Three a, Three b) { return a.a < b.a; } );\n        bt.clr(); i = 0;\n        for (auto p : people_node) {\n            i64 cj = p.a, vj = p.b, id = p.c;\n            while (i < tree_node.size() && tree_node[i].first < cj) {\n                bt.upd(tree_node[i].second, 1);\n                i ++;\n            }\n            Ans[id] -= bt.qry(vj);\n        }\n    }\n\n    lep (i, 1, q) printf(\"%lld\\n\", Ans[i]);\n\treturn 0;\n} \n```\n",
        "postTime": 1636355481,
        "uid": 139012,
        "name": "______OvO______",
        "ccfLevel": 8,
        "title": "[JOISC2020] \u53ce\u7a6b"
    },
    {
        "content": "\u5f88\u9707\u64bc\u7684\u9898\u3002\n\n\u6211\u7528\u4e86 20min \u72ec\u7acb\u60f3\u5230\u4e86\u8fd9\u9898\u5b8c\u6574\u89e3\u6cd5\uff0c\u7b49\u6211\u5f00\u59cb\u5199\u7684\u65f6\u5019\u6211\u624d\u77e5\u9053\u771f\u6b63\u7684\u9669\u6076\u3002\n\n\u8fd9\u9898\u6211\u4e00\u5171\u82b1\u4e86\u4e09\u4e2a\u4e0b\u5348\uff0c\u91cd\u6784\u4e86\u4e00\u6b21\uff0c\u91cd\u6784\u524d\u540e\u7801\u91cf\u52a0\u8d77\u6765 > 15k\u3002\n\n\u4e0d\u8fc7\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u9053\u65e5\u672c\u9898\u5999\u5c31\u5999\u5728\u60f3\u6cd5\u90fd\u5f88\u81ea\u7136\uff0c\u800c\u6700\u540e\u5c42\u5c42\u5d4c\u5957\u5c31\u6210\u4e86\u4e00\u9053\u5404\u65b9\u9762\u78be\u538b noip t4\u7684 DS\uff08\uff09\u3002\n\n#### Part1\uff1a\n\n\u5176\u5b9e\u6211\u6700\u521d\u7684\u60f3\u6cd5\u5462\uff0c\u662f\u5bf9\u4e8e\u67d0\u4e00\u9897\u786e\u5b9a\u7684\u6811\uff0c\u6458\u5230\u5b83\u679c\u5b50\u7684\u4eba\u6309\u7167 $a$ \u6392\u5e8f\u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u8fd9\u6837\u6bd4\u8f83\u597d\u505a\u3002\u4f46\u662f\u5b83\u663e\u7136\u662f\u9519\u8bef\u7684\u3002\n\n\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u4e00\u4e2a $f_{i}$\uff0c\u4ee3\u8868\u5f53\u7b2c $i$ \u4e2a\u4eba\u7ecf\u8fc7\u4e00\u9897\u6811\u5e76\u6458\u5230\u679c\u5b9e\u540e\uff0c\u4e0b\u4e00\u6b21\u8c01\u4f1a\u6458\u5230\u8fd9\u68f5\u6811\u7684\u679c\u5b9e\uff08\u6ce8\u610f\u4e0d\u662f\u4e0b\u6b21\u8c01\u7b2c\u4e00\u4e2a\u8d70\u5230\uff0c\u8d70\u5230\u4e0d\u610f\u5473\u7740\u80fd\u6458\uff0c\u540c\u65f6\u53ef\u80fd\u6709 $f_i=i$\uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u6c42\u51fa\u8fd9\u4e2a\u8fc7\u7a0b\u7ecf\u8fc7\u4e86\u591a\u5c11\u65f6\u95f4\uff0c\u8bb0\u4f5c $w_i$\u3002\n\n\u90a3\u4e48 $i\\rightarrow f_i$ \uff0c\u8fb9\u6743 $w_i$ \u8fde\u8fb9\u540e\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a**\u5185\u5411\u57fa\u73af\u6811\u68ee\u6797**\uff08\u6ce8\u610f\u6709\u4e9b\u57fa\u73af\u6811\u7684\u57fa\u73af\u53ef\u80fd\u662f\u4e00\u4e2a\u81ea\u73af\uff0c\u4e0d\u8fc7\u672c\u9898\u4e2d\u8fd9\u79cd\u60c5\u51b5\u6ca1\u5565\u7279\u6b8a\u6027\uff09\u3002\n\n\u5bf9\u4e8e\u6bcf\u9897\u679c\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u5b83\u7b2c\u4e00\u6b21\u88ab\u54ea\u4e2a\u4eba\u6458\u4ee5\u53ca\u4ec0\u4e48\u65f6\u523b\u88ab\u6458\u5230\uff0c\u8bb0\u4f5c $x$ \u548c $t$\u3002\u90a3\u4e48\u4e00\u5f00\u59cb\u6709\u4e00\u9897\u679c\u6811\u5728\u8282\u70b9 $x$\uff0c\u7136\u540e\u5b83\u4f1a\u5728\u57fa\u73af\u6811\u4e0a\uff0c\u4e0d\u65ad\u8d70\u5230 $f_x$\uff0c\u7136\u540e $x\\leftarrow f_x$ \u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u8d70\u4e00\u6b21\u82b1\u8d39\u7684\u65f6\u95f4\u662f\u8fb9\u6743\u3002\u8fd9\u91cc\u7684\u8f6c\u6362\u662f\u81ea\u7136\u7684\u3002\n\n\u8fd9\u662f\u672c\u9898\u601d\u7ef4\u96be\u5ea6\u6700\u5927\u7684\u90e8\u5206\u4e86\uff0c\u4ee5\u4e0b\u90fd\u662f\u70e6\u4eba\u7684 DS\u3002\n\n#### Part2\uff1a\n\n\u6211\u4eec\u81ea\u7136\u5730\u4f1a\u628a\u57fa\u73af\u6811\u7684\u57fa\u73af\u548c\u6811\u5206\u5f00\u6765\u8003\u8651\u3002\n\n\u6211\u4eec\u6765\u8003\u8651\u6811\u7684\u90e8\u5206\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5173\u4e8e\u70b9 $u$ \u7684\u8be2\u95ee\uff0c\u53ea\u6709\u4e00\u5f00\u59cb\u4f4d\u4e8e $u$ \u7684\u5b50\u6811\u5185\u7684\u679c\u6811\uff0c\u53ef\u80fd\u4f1a\u5bf9\u5f53\u6b21\u8be2\u95ee\u9020\u6210\u8d21\u732e\u3002\u5f62\u5f0f\u5316\u5730\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u70b9 $u$ \u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u5b83\u7684\u7b80\u5355\u8def\u5f84\u7684\u8fb9\u6743\u548c\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u5728\u5e26\u6743\u6811\u4e0a\u4e5f\u662f\u81ea\u7136\u7684\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u5173\u4e8e\u70b9 $u$\uff0c\u65f6\u95f4\u4e3a $t$ \u7684\u8be2\u95ee\uff0c\u548c\u4e00\u4e2a\u5f00\u59cb\u4f4d\u4e8e\u70b9 $v$\uff0c\u4e14\u5728\u65f6\u523b $t'$ \u88ab $v$ \u6458\u7684\u679c\u6811\uff0c\u8fd9\u9897\u679c\u6811\u80fd\u5bf9\u8fd9\u4e2a\u8be2\u95ee\u9020\u6210 $1$ \u7684\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n$$\\begin{cases}\nv\\in subtree(u) \\\\\nt'+(depth_v-depth_u)\\le t\n\\end{cases}$$\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\uff0c\u53ef\u4ee5\u53d8\u4e3a $t'+depth_v\\le t+depth_u$\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u65b9\u4fbf\u5904\u7406\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u7c7b\u4f3c\u504f\u5e8f\u7684\u95ee\u9898\uff0c\u8003\u8651\u628a**\u8be2\u95ee\u548c\u679c\u6811**\u7684 $t-depth$ \u9884\u5148\u79bb\u6563\u5316\u7136\u540e\u7528 BIT \u89e3\u51b3\u3002\u6709\u4e00\u4e2a\u5957\u8def\uff0c\u5c31\u662f\u8be2\u95ee\u5b50\u6811\u5185\u4e00\u6bb5\u533a\u95f4\u91cc\u7684\u70b9\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5 dfs\uff0c\u7136\u540e\u628a dfs \u8fdb\u5b50\u6811\u524d\u548c\u56de\u6eaf\u7684\u65f6\u5019\u7684\u7b54\u6848\u4f5c\u4e2a\u5dee\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5b50\u6811\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u6570\u3002\u8fd9\u4e2a\u5957\u8def\u597d\u50cf\u5929\u5929\u7231\u8dd1\u6b65\u90a3\u9898\u5c31\u6709\uff0c\u6240\u4ee5\u4e0d\u591a\u8bb2\u4e86\uff08\u96fe\uff09\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u6811\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f $O((n+m+q) \\log n)$ \u7684\u3002\n\n#### Part3\uff1a\n\n\u57fa\u73af\u90e8\u5206\u662f\u672c\u9898\u6700\u5927\u96be\u70b9\u3002\u9996\u5148\u6211\u4eec\u628a\u5f00\u59cb\u4f4d\u7f6e\u5728\u6811\u90e8\u5206\u7684\u679c\u6811\u5411\u4e0a\u79fb\u52a8\u5230\u57fa\u73af\u4e0a\uff0c\u6b64\u65f6\u6240\u6709\u679c\u6811\u90fd\u4f4d\u4e8e\u57fa\u73af\u4e0a\uff0c\u7136\u540e\u6211\u4eec\u53ea\u8003\u8651\u8fd9\u4e00\u4e2a\u73af\u672c\u8eab\u7684\u8be2\u95ee\u3002\n\n\u5904\u7406\u73af\u7684\u5957\u8def\u6709\u5f88\u591a\uff0c\u672c\u9898\u91cc\u6709\u4e00\u4e2a\u81ea\u7136\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u679a\u4e3e\u4e00\u4e2a\u70b9 $i$ \u7684\u8be2\u95ee\uff0c\u7136\u540e\u505a\u4e24\u6b21\u8ba1\u7b97\uff0c\u7b2c\u4e00\u6b21\u8ba1\u7b97\u7684\u662f\u4f4d\u4e8e\u4f4d\u7f6e $j<=i$ \u7684\u679c\u6811\u5bf9\u70b9 $i$ \u7684\u8be2\u95ee\u7684\u8d21\u732e\uff0c\u7b2c\u4e8c\u6b21\u8ba1\u7b97\u7684\u662f\u4f4d\u4e8e\u4f4d\u7f6e $j>i$ \u7684\u679c\u6811\u5bf9\u70b9 $i$ \u7684\u8be2\u95ee\u7684\u8d21\u732e\u3002\u8fd9\u4e24\u6b21\u8ba1\u7b97\u80af\u5b9a\u662f\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u8003\u8651\u7b2c\u4e00\u6b21\u8ba1\u7b97\u600e\u4e48\u641e\u3002\uff08\u6ce8\uff1a\u4e0a\u9762\u8bf4\u7684\u70b9\u90fd\u662f\u540c\u4e00\u4e2a\u57fa\u73af\u4e0a\u7684\u70b9\u3002\u4e3a\u4e86\u65b9\u4fbf\u8bf4\u660e\uff0c\u5f53\u6211\u8bf4\u70b9 $i$ \u7684\u65f6\u5019\uff0c\u5b9e\u9645\u610f\u4e49\u662f\u8bf4\u73af\u4e0a\u7684\u7b2c $i$ \u4e2a\u70b9\u3002\u800c\u8fd9\u91cc\u662f\u5b9e\u73b0\u4e0a\u7684\u4e00\u4e2a\u5bb9\u6613\u9519\u8bef\u7684\u7ec6\u8282\u3002\uff09\n\n\u7531\u4e8e\u8981\u6c42 $j<i$ \u6240\u4ee5\u53ef\u4ee5\u628a\u73af\u770b\u6210\u94fe\u4e86\uff0c\u7136\u540e\u8bbe $dis_i$ \u662f\u7b2c\u4e00\u4e2a\u70b9\u8d70\u5230\u7b2c $i$ \u4e2a\u70b9\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u4ece\u7b2c $j$ \u4e2a\u70b9\u8d70\u5230\u7b2c $i$ \u4e2a\u70b9\u7684\u957f\u5ea6\u5c31\u662f $dis_i-dis_j$\uff0c\u8fd9\u4e0d\u7528\u8bf4\u90fd\u4f1a\uff08\uff09\u3002\n\n\u8bbe\u73af\u957f\u4e3a $len$\uff0c\u5bf9\u4e8e\u5728\u70b9 $j$ \u7684\u4e00\u9897\u679c\u6811\uff0c\u5176\u5230\u8fbe\u70b9 $j$ \u7684\u65f6\u95f4\u4e3a $t_j$\uff0c\u548c\u5bf9\u4e8e\u4e00\u6b21\u5728\u70b9 $i$ \u7684\uff0c\u8be2\u95ee\u65f6\u95f4\u4e3a $t_i$ \u7684\u8be2\u95ee\uff0c\u8fd9\u9897\u679c\u6811\u5bf9\u8fd9\u4e2a\u8be2\u95ee\u7684\u8d21\u732e\u4e3a\uff1a\n\n$$\\left\\lfloor \\frac{t_i-t_j-(dis_i-dis_j)}{len} \\right\\rfloor+1$$\n\n\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u81ea\u7136\uff0c\u4f46\u662f\u5f88\u4e11\uff0c\u800c\u4e14\u6709\u4e00\u4e2a\u9690\u542b\u6761\u4ef6\u662f\u5206\u5b50\u5f97\u975e\u8d1f\u3002\n\n\u8fd8\u662f\u628a\u5206\u5b50\u5316\u6210 $(t_i-dis_i)-(tj-dis_j)$\uff0c\u5206\u522b\u8bb0\u4f5c $A_i$ \u548c $A_j$\uff0c\u7136\u540e\u5c31\u662f \n\n$$\\left\\lfloor \\frac{A_i-A_j}{len} \\right\\rfloor+1$$\n\n\u4e0d\u7ba1\u90a3\u4e2a $+1$\uff0c\u56e0\u4e3a\u5bb9\u6613\u641e\uff0c\u641e\u4e2a\u4e8c\u7ef4\u6570\u70b9\u597d\u4e86\uff08\u96fe\uff09\u3002\u8003\u8651\u8fd9\u4e2a\u4e0b\u53d6\u6574\uff0c\u5f88\u81ea\u7136\u5730\u60f3\u5230\u8f6c\u6210\uff1a\n\n$$\\left\\lfloor\\frac{A_i}{len} \\right\\rfloor-\\left\\lfloor\\frac{A_j}{len}\\right\\rfloor$$\n\n\u4f46\u662f\u4e0a\u4e0b\u5e76\u4e0d\u76f8\u7b49\uff0c\u53ef\u80fd\u4e0b\u9762\u6bd4\u4e0a\u9762\u5c11 $1$\uff0c\u53d1\u73b0\u8bb0 $A_i$ \u9664\u4ee5 $len$ \u7684\u4f59\u6570\u4e3a $r_i$\uff0c$A_j$ \u7684\u4e3a $r_j$\uff0c\u90a3\u4e48\u663e\u7136 $r_i<r_j$ \u7684\u65f6\u5019\u4e0b\u9762\u8981\u51cf\u4e00\u3002\n\n\u5148\u4e0d\u7ba1\u51cf\u4e00\uff0c\u6700\u540e\u7edf\u4e00\u7b97\u3002\u90a3\u4e48\u5c31\u662f\u7b80\u5355\u7684\u4e8c\u7ef4\u6570\u70b9\uff0c\u79bb\u6563\u5316 BIT \u5c31\u80fd\u89e3\u51b3\u3002\u6700\u540e\u6765\u770b\u8fd9\u90e8\u5206\u51cf\u4e00\uff0c\u540c\u6837\u5148\u79bb\u6563\u5316\uff0c\u7136\u540e\uff1a\n\n$$\n\\begin{cases}\nj<i \\\\\nA_j<=A_i \\\\\nr_j>r_i\n\\end{cases}\n$$\n\n\u4e09\u7ef4\u6570\u70b9\uff0ccdq\u5206\u6cbb\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002\n\n\u90a3\u4e48\u7b2c\u4e8c\u6b21\u8ba1\u7b97\u540c\u7406\uff0c\u6240\u4ee5\u4f60\u5f97\u4e24\u6b21\u4e8c\u7ef4\u6570\u70b9\uff0c\u4e24\u6b21\u4e09\u7ef4\u6570\u70b9\uff08\u96fe\uff09\u3002\n\n\u8fd9\u90e8\u5206\u590d\u6742\u5ea6\u663e\u7136\u662f $O((n+m+q)\\log^2 n)$ \u7684\n\n\u6ce8\u610f\u672c\u9898\u7684\u4e0b\u53d6\u6574\u548c\u53d6\u6a21\uff0c\u88ab\u9664\u6570\u662f\u53ef\u80fd\u4e3a\u8d1f\u7684\uff0c\u6240\u4ee5\u81ea\u5df1\u8003\u8651\u548b\u529e\u5427\uff08\u7b11\uff09\uff08\u6211\u8c03\u4e861h\u624d\u53d1\u73b0\uff09\u3002\n\n\u597d\u50cf\u8fd9\u4e2a\u4e09\u7ef4\u6570\u70b9\u90fd\u8bf4\u662f\u5047\u7684\uff0c\u4f46\u662f\u6211\u8fd8\u662f\u4e0d\u77e5\u9053\u548b\u8f6c\u6210\u4e8c\u7ef4\u6570\u70b9\uff0c\u6240\u4ee5\u6211\u7684\u7a0b\u5e8f\u4e0d\u5f00 O2 \u5728 Luogu \u4f1a\u88ab T \u51e0\u4e2a\u70b9\uff08\u6d41\u6cea\uff09\uff08\u662f\u4e0d\u662f\u6211\u81ea\u5e26\u5927\u5e38\u6570\u554a\uff09\u3002\n\n```cpp\n//JOISC,2020\n#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define op(x) ((x&1)?x+1:x-1)\n#define odd(x) (x&1)\n#define even(x) (!odd(x))\n#define lc(x) (x<<1)\n#define rc(x) (lc(x)|1)\n#define lowbit(x) (x&-x)\n#define Max(a,b) (a>b?a:b)\n#define Min(a,b) (a<b?a:b)\n#define next Cry_For_theMoon\n#define il inline\n#define pb(x) push_back(x)\n#define is(x) insert(x)\n#define sit set<int>::iterator\n#define mapit map<int,int>::iterator\n#define pi pair<int,int>\n#define ppi pair<int,pi>\n#define pp pair<pi,pi>\n#define fr first\n#define se second\n#define vit vector<int>::iterator\n#define mp(x,y) make_pair(x,y)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int uint;\ntypedef double db;\nusing namespace std;\nconst int MAXN=2e5+10;\nll n,m,q,l,c;\nint a[MAXN],b[MAXN];\nll ans[MAXN],depth[MAXN];\nstruct Qry{ll t;int idx;};vector<Qry>qry[MAXN];\nvector<ll>ret[MAXN];\nvector<pi>g[MAXN],e[MAXN];\nint to[MAXN],tag[MAXN],rt[MAXN],tow[MAXN];\nll dis(ll x,ll y){if(x<y)return y-x;return y+l-x;}\nnamespace DSU{int fa[MAXN];};\nnamespace D{\n    ll val[MAXN*4],tot;\n    void clr(){tot=0;}\n    void add(ll v){val[++tot]=v;}\n    void process(){if(!tot)return;sort(val+1,val+1+tot);tot=unique(val+1,val+1+tot)-val-1;}\n    int qry(ll v){return lower_bound(val+1,val+1+tot,v)-val;}\n} \nstruct BIT{\n    ll t[MAXN*4],lim=8e5;\n    void clr(){lim=D::tot;rep(i,1,lim)t[i]=0;}\n    void upd(int pos,ll val){for(;pos<=lim;pos+=lowbit(pos))t[pos]+=val;}\n    ll qry(int pos){ll ret=0;for(;pos;pos-=lowbit(pos))ret+=t[pos];return ret;}\n    ll qry(int l,int r){if(l>r)return 0;if(!l)return qry(r);return qry(r)-qry(l-1);}\n}tree;\nstruct BIT2{\n    int t[MAXN*4],lim=8e5;\n    void clr(){lim=D::tot;rep(i,1,lim)t[i]=0;}\n    void upd(int pos,ll val){for(;pos<=lim;pos+=lowbit(pos))t[pos]+=val;}\n    ll qry(int pos){ll ret=0;for(;pos;pos-=lowbit(pos))ret+=t[pos];return ret;}\n    ll qry(int l,int r){if(l>r)return 0;if(!l)return qry(r);return qry(r)-qry(l-1);}\n}\ntree2;\nll Div(ll n,ll m){\n    if(n>=0)return n/m;\n    return n/m-1;\n}\nll M(ll n,ll m){return (n%m+m)%m;}\nnamespace PRE{\n    vector<ll>preans[MAXN];\n    int dfs1(int u,int to,int fa){\n        if(u==to)return (tag[u]=1);\n        for(auto p:e[u]){\n            int v=p.fr;if(fa==v)continue;\n            if(dfs1(v,to,u))return (tag[u]=1);\n        }\n        return 0;\n    }  \n    void dfs2(int u,int fa){\n        rt[u]=rt[fa];\n        for(auto p:e[u]){\n            int v=p.fr;if(tag[v] || v==fa)continue;\n            depth[v]=depth[u]+p.se;\n            dfs2(v,u);\n        }\n    }\n    void dfs3(int u,int fa){\n        if(!tag[u])for(auto tmp:qry[u])preans[u].pb(tree.qry(D::qry(tmp.t+depth[u])));\n        for(auto p:e[u]){\n            int v=p.fr;if(tag[v] || v==fa)continue;\n            dfs3(v,u);\n        }\n        if(!tag[u])for(auto tmp:ret[u])tree.upd(D::qry(tmp+depth[u]),1);\n        int sz=qry[u].size();\n        if(!tag[u])rep(i,0,sz-1)ans[qry[u][i].idx]+=tree.qry(D::qry(qry[u][i].t+depth[u]))-preans[u][i];\n        preans[u].clear();\n    }\n    ll dis[MAXN],len;\n    int b[MAXN],vis[MAXN],tot,cnt;\n    struct Node{ll b,r;int tp,idx;}node[MAXN*2];\n    bool cmp(const Node& n1,const Node& n2){\n        if(n1.b!=n2.b)return n1.b<n2.b;\n        else if(n1.tp!=n2.tp)return n1.tp<n2.tp;\n        else return n1.r<n2.r;\n    }\n    void cdq(int l,int r){\n        if(l>=r)return;\n        int mid=(l+r)>>1;cdq(l,mid);cdq(mid+1,r);\n        rep(i,l,mid)node[i].tp=1;rep(i,mid+1,r)node[i].tp=2;\n        sort(node+l,node+r+1,cmp);\n        rep(i,l,r){\n            if(node[i].idx!=-1 && node[i].tp==2)ans[node[i].idx]-=tree2.qry(node[i].r);\n        }\n        rep(i,l,r){\n            if(node[i].idx==-1 && node[i].tp==1)tree2.upd(node[i].r,1);\n            else if(node[i].idx!=-1 && node[i].tp==2)ans[node[i].idx]+=tree2.qry(node[i].r);\n        }\n    }\n    void solve(int u){\n        if(vis[u])return;\n        tot=0;\n        while(1){if(vis[u])break;vis[u]=1;b[++tot]=u;u=to[u];}\n        dis[1]=0;rep(i,2,tot)dis[i]=dis[i-1]+tow[b[i-1]];\n        len=dis[tot]+tow[b[tot]];\n        //\u6b63\u7740\u505a\u4e00\u6b21\u4e09\u7ef4\u6570\u70b9\n        D::clr();\n        rep(idx,1,tot){\n            int i=b[idx];\n            for(auto tmp:qry[i])D::add(tmp.t-dis[idx]),D::add(M(tmp.t-dis[idx],len));\n            for(auto tmp:ret[i])D::add(tmp-dis[idx]),D::add(M(tmp-dis[idx],len));\n        }\n        D::process();tree.clr();tree2.clr();\n        rep(idx,1,tot){\n            int i=b[idx];\n            for(auto tmp:ret[i]){\n                tree.upd(D::qry(tmp-dis[idx]),Div((tmp-dis[idx]),len));\n                tree2.upd(D::qry(tmp-dis[idx]),1);\n            }\n            for(auto tmp:qry[i]){\n                ans[tmp.idx]+=tree2.qry(D::qry(tmp.t-dis[idx]))*(Div(tmp.t-dis[idx],len));\n                ans[tmp.idx]-=tree.qry(D::qry(tmp.t-dis[idx]));\n            }\n        }tree.clr();tree2.clr();\n        cnt=0;\n        rep(idx,1,tot){\n            int i=b[idx];\n            for(auto tmp:ret[i])node[++cnt]=(Node){D::qry(tmp-dis[idx]),D::qry(M(tmp-dis[idx],len)),-1,-1};\n            for(auto tmp:qry[i])node[++cnt]=(Node){D::qry(tmp.t-dis[idx]),D::qry(M(tmp.t-dis[idx],len)),-1,tmp.idx};\n        }\n        cdq(1,cnt);\n        //\u53cd\u7740\u505a\u4e00\u6b21\u4e09\u7ef4\u6570\u70b9\n        D::clr();\n        rep(idx,1,tot){\n            int i=b[idx];\n            for(auto tmp:qry[i])D::add(tmp.t-dis[idx]-len),D::add(M(tmp.t-dis[idx],len));\n            for(auto tmp:ret[i])D::add(tmp-dis[idx]),D::add(M(tmp-dis[idx],len));\n        }\n        D::process();tree.clr();tree2.clr();\n        per(idx,tot,1){\n            int i=b[idx];\n            for(auto tmp:qry[i]){\n                ans[tmp.idx]+=tree2.qry(D::qry(tmp.t-dis[idx]-len))*(Div(tmp.t-dis[idx]-len,len));\n                ans[tmp.idx]-=tree.qry(D::qry(tmp.t-dis[idx]-len));\n            }\n            for(auto tmp:ret[i]){ \n                tree.upd(D::qry(tmp-dis[idx]),Div((tmp-dis[idx]),len));\n                tree2.upd(D::qry(tmp-dis[idx]),1);\n            }\n        }tree.clr();tree2.clr();\n        cnt=0;\n        per(idx,tot,1){\n            int i=b[idx];\n            for(auto tmp:qry[i])node[++cnt]=(Node){D::qry(tmp.t-dis[idx]-len),D::qry(M(tmp.t-dis[idx],len)),-1,tmp.idx};\n            for(auto tmp:ret[i])node[++cnt]=(Node){D::qry(tmp-dis[idx]),D::qry(M(tmp-dis[idx],len)),-1,-1};\n        }\n        cdq(1,cnt);\n        \n    }\n};\nint Find(int x){\n    if(DSU::fa[x]==x)return x;\n    return DSU::fa[x]=Find(DSU::fa[x]);\n}\nvoid Merge(int x,int y){\n    int p=Find(x),q=Find(y);\n    DSU::fa[q]=p;\n}\nvoid build(){\n    rep(i,1,n)DSU::fa[i]=i;\n    rep(i,1,m){\n        ll tmp;\n        if(a[1]<b[i])tmp=upper_bound(a+1,a+1+n,b[i])-a-1;\n        else tmp=n;\n        ret[tmp].pb(dis(a[tmp],b[i]));\n    }\n    rep(i,1,n){\n        ll d=c%l,rest=c-d;\n        if(a[1]<=a[i]-d)to[i]=upper_bound(a+1,a+1+n,a[i]-d)-a-1; \n        else to[i]=upper_bound(a+1,a+1+n,a[i]+l-d)-a-1;\n        ll w=rest+dis(a[to[i]],a[i]);\n        if(d==0)w=rest,to[i]=i;\n        tow[i]=w;\n        g[i].pb(mp(to[i],w));\n        if(Find(i)!=Find(to[i]))Merge(i,to[i]);\n        else PRE::dfs1(i,to[i],i);\n        e[i].pb(mp(to[i],w));e[to[i]].pb(mp(i,w));\n    }\n    rep(i,1,n)if(tag[i])rt[i]=i,PRE::dfs2(i,i);\n}\nvoid pre(){\n    D::clr();\n    rep(i,1,n){\n        for(auto tmp:ret[i])D::add(tmp+depth[i]);\n        for(auto tmp:qry[i])D::add(tmp.t+depth[i]);\n    }\n    D::process();\n    tree.clr();\n    rep(i,1,n)if(tag[i])PRE::dfs3(i,i);\n    rep(i,1,n){if(tag[i])continue;\n        for(auto tmp:ret[i])ret[rt[i]].pb(tmp+depth[i]);\n        ret[i].clear();\n    }\n    rep(i,1,n)e[i].clear(),g[i].clear();\n    rep(i,1,n)if(tag[i])PRE::solve(i);\n}\nint main(){\n    scanf(\"%lld%lld%lld%lld\",&n,&m,&l,&c);\n    rep(i,1,n)scanf(\"%d\",&a[i]);\n    rep(i,1,m)scanf(\"%d\",&b[i]);\n    scanf(\"%lld\",&q);\n    rep(i,1,q){\n        ll v,t;scanf(\"%lld%lld\",&v,&t);\n        qry[v].pb(((Qry){t,i}));\n    }\n    build();\n    pre();\n    rep(i,1,q)printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1643551172,
        "uid": 340632,
        "name": "Cry_For_theMoon",
        "ccfLevel": 8,
        "title": "\u3010JOISC2020 \u6536\u83b7\u3011"
    },
    {
        "content": "\u6709\u5220\u51cf\uff0c\u539f\u6587\u89c1[**\u6211\u7684\u535a\u5ba2**](https://www.cnblogs.com/SharpnessV/p/14882215.html)\n\n\u4e00\u4e2a\u73af\u4e0a\u6709 $N$ \u4e2a\u4eba\uff0c$M$ \u4e2a\u82f9\u679c\u6811\uff0c\u6bcf\u4e00\u79d2\u6bcf\u4e2a\u4eba\u987a\u65f6\u9488\u8d70\u4e00\u7c73\uff0c\u6bcf\u9694 $C$ \u79d2\u957f\u4e00\u4e2a\u82f9\u679c\uff0c$Q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7b2c $V_i$ \u4e2a\u4eba\u5728 $T_i$ \u79d2\u5185\u80fd\u6458\u591a\u5c11\u82f9\u679c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u5982\u679c\u76f8\u90bb\u4e24\u4e2a\u4eba\u95f4\u9694 $\\ge C$ \uff0c\u90a3\u4e48\u4e0a\u4e00\u4e2a\u6458\u7684\u82f9\u679c\u8fd9\u4e2a\u4eba\u4e00\u5b9a\u80fd\u6458\u5230\uff0c\u5426\u5219\u4e0a\u4e00\u4e2a\u4eba\u6458\u5f97\u82f9\u679c\u8fd9\u4e2a\u4eba\u80af\u5b9a\u6458\u4e0d\u5230\u3002\n\n\u6240\u4ee5\u4e0d\u96be\u5b8c\u6210\u7b2c\u4e00\u6b65\u8f6c\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4eba $i$ \u5411\u5b83\u540e\u9762\u8ddd\u79bb $\\ge C$ \u7c73\u7684\u7b2c\u4e00\u4e2a\u4eba\u8fde\u8fb9\uff0c\u8bb0\u4f5c $p_i$\u3002\u8868\u793a\u7b2c $i$ \u4e2a\u4eba\u5403\u4e86\u4e00\u4e2a\u82f9\u679c\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5728\u8fd9\u91cc\u5403\u82f9\u679c\u7684\u4eba\u662f $p_i$ \u3002\u6ce8\u610f\u53ef\u4ee5\u81ea\u5df1\u5411\u81ea\u5df1\u8fde\u8fb9\u3002\n\n\u6bcf\u4e2a\u4eba\u53ea\u6709\u4e00\u6761\u51fa\u8fb9\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u57fa\u73af\u5185\u5411\u6811\u68ee\u6797\u3002\n\n\u57fa\u73af\u6811\u6bd4\u8f83\u5957\u8def\u7684\u505a\u6cd5\u662f\u65ad\u5f00\u4e00\u6761\u8fb9\u4f7f\u5f97\u53d8\u6210\u4e00\u68f5\u6811\uff0c\u7136\u540e\u8ba1\u7b97\u4e0d\u7ecf\u8fc7\u65ad\u5f00\u8fb9\u548c\u7ecf\u8fc7\u65ad\u5f00\u8fb9\u7684\u8d21\u732e\u3002\n\n\u4e0d\u7ecf\u8fc7\u65ad\u5f00\u8fb9\uff0c\u90a3\u4e48\u5c31\u662f\u5b50\u6811\u67e5\u8be2\u6df1\u5ea6\u5728\u4e00\u5b9a\u533a\u95f4\u5185\u7684\u82f9\u679c\u6811\uff0c\u7ecf\u5178\u4e8c\u7ef4\u6570\u70b9\uff0c\u76f4\u63a5\u79bb\u7ebf\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\n\n\u7ecf\u8fc7\u65ad\u5f00\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u82f9\u679c\u6811\u79fb\u52a8\u5230\u6839\u8282\u70b9\uff0c\u8bbe\u79fb\u52a8\u7684\u8ddd\u79bb\u4e3a $x_i$ \u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee $(V_i,T_i)$ \uff0c\u8bbe\u73af\u4e0a\u6839\u8282\u70b9\u5230 $V_i$ \u7684\u8ddd\u79bb\u4e3a $y_i$ \uff0c\u5982\u679c $V_i$ \u5c31\u662f\u6839\u8282\u70b9\uff0c\u5219\u8ddd\u79bb\u8bbe\u4e3a\u73af\u7684\u957f\u5ea6 $Len $\u3002\u6ce8\u610f\u8fd9\u91cc\u662f\u57fa\u73af\u6811\u7684\u73af\u957f\uff0c\u4e0d\u662f\u6e56\u7684\u5468\u957f\u3002\n\n\u90a3\u4e48\u7b54\u6848\u663e\u7136\u4e3a $\\sum \\max\\{0,\\left\\lfloor\\dfrac{T_i-y_i-x_j}{Len}\\right\\rfloor+1\\}$\u3002 \n\n\u8fd9\u4e2a\u5f0f\u5b50\u975e\u5e38\u4e11\uff0c\u8003\u8651\u8ba1\u7b97\u504f\u5e8f\uff0c\u4ee4 $T_i-y_i\\ge x_j$ \uff0c\u90a3\u4e48\u53ef\u4ee5\u53bb\u6389 $\\max$ \u3002\u518d\u628a $1$ \u585e\u8fdb\u53bb\uff0c\u5f97\u5230\u4e00\u4e2a\u597d\u770b\u4e00\u70b9\u7684\u5f0f\u5b50\u3002\n\n$$Ans=\\sum\\left\\lfloor\\dfrac{T_i-y_i+Len-x_j}{Len}\\right\\rfloor$$ \n\n$Len $ \u662f\u4e00\u4e2a\u5b9a\u503c\uff0c\u53ef\u4ee5\u5f0f\u5b50\u53ef\u4ee5\u5199\u4f5c $\\sum\\limits_{w_i\\ge x_j}\\left\\lfloor\\dfrac{w_i-x_j}{k}\\right\\rfloor$ \u3002\n\n\u76f4\u63a5\u62c6\u5f00\u505a\u5373\u53ef\uff0c\u672c\u8d28\u8fd8\u662f\u4e8c\u7ef4\u6570\u70b9\uff0c\u79bb\u7ebf\u6811\u72b6\u6570\u7ec4\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}((N+M)\\log (N+M))$ \u3002 ",
        "postTime": 1623643441,
        "uid": 119261,
        "name": "7KByte",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[JOISC2020] \u53ce\u7a6b"
    }
]