[
    {
        "content": "\u9898\u76ee\u8bf4\u5176add\u548cfind\u7684\u65b9\u5411\u53cd\u4e86\uff0c\u5373\u6c42\u6210\u4e86\u540e\u7f00\u548c\uff1b\n\n\u5bf9\u4e8e\u8be2\u95eel~r\u7684\u533a\u95f4\u548c\uff0c\u6b63\u5e38\u662f sum[r] - sum[l - 1];\n\n\u4f46\u662f\u4e5d\u6761\u8bef\u5f04\u6210\u4e86 sum[r - 1] - sum[l - 2];(\u56e0\u4e3a\u53d6\u6a21\u8f6c\u6b63 \u6240\u4ee5\u65e0\u8d1f\u6570 \u53d8\u4e00\u4e0b\u7b26\u53f7)\n\n\u6240\u4ee5\u9898\u76ee\u7684\u8be2\u95ee\u5373\u4e3aval[r] == val[l - 1] \u7684\u6982\u7387\uff1b\n\n\u8bbe\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff08l,r\uff09,\u8bb0\u5f55val[l] == val[r] \u7684\u6982\u7387\uff1b\n\n\u56e0\u6b64\u4fee\u6539\u53ef\u4ee5\u770b\u4f5c\u662f\u533a\u95f4\u4fee\u6539\uff0c\u67e5\u8be2\u4e3a\u5355\u70b9\u67e5\u8be2\uff1b\u53c8\u56e0\u4e3a\u8981\u7ef4\u62a4\u4e8c\u5143\u7ec4\n\n\u6240\u4ee5\u6811\u5957\u6811\u6ca1\u5f97\u8dd1\u4e86QAQ\uff0c\u53d1\u73b0\u6ca1\u6709\u533a\u95f4\u67e5\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\u4e00\u4e0b\uff1b\n\n\u5177\u4f53\u8003\u8651\u7684\u8bdd\uff0c\u5916\u5c42\u7ef4\u62a4l\uff0c\u5185\u5c42\u7ef4\u62a4r\u3002\n\n\u5982\u679c\u4ee5\u524dval[l] == val[r] \u76f8\u540c\u7684\u6982\u7387\u4e3aP\uff0c\u5bf9\u4e8e\u4e00\u6b21\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u4f7f\u5176\u53d8\u5316\u7684\u6982\u7387\u4e3aQ\n\n\u5219\u65b0\u7684\u6982\u7387\u4e3a P * Q + \uff081 - P\uff09 * \uff081 - Q\uff09\uff1b\n\n\u63a5\u4e0b\u6765\u5927\u529b\u8ba8\u8bba\u3002\u3002\u3002 \u8bbe\u4fee\u6539\u533a\u95f4\u4e3a L ~ R\n\n<1> l \u5728 [1,L - 1] ,r\u5728[L,R],\u4f7f\u5176\u53d8\u5316\u7684\u6982\u7387\u4e3a1 /\uff08R - L + 1\uff09;\n\n<2> l \u5728[L,R] ,r \u5728[R + 1,n],\u4f7f\u5176\u53d8\u5316\u7684\u6982\u7387\u4e3a 1 / (R - L + 1);\n\n<3> l \u5728[L\uff0cR]\uff0cr \u5728[L,R] \u4f7f\u5176\u53d8\u5316\u7684\u6982\u7387\u4e3a 2 / (R - L + 1)\uff1b\n\n~~\n\n\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5: l == 1 \u53d1\u73b0 \u662f \u524d\u7f00\u548c\u7b49\u4e8e\u540e\u7f00\u548c\uff0c\uff08\u5177\u4f53\u4f60\u770b\uff08\u6a21\u62df\uff09\u4e00\u4e0b\u5c31\u77e5\u9053\uff09\n\n\u4e8e\u662f\u6211\u4eec\u5728\u7b2c\u4e00\u7ef4\u4e0a\u5355\u72ec\u5f00\u4e00\u4e2a0\u70b9\uff0c\u7ef4\u62a4\u524d\u7f00\u7b49\u4e8e\u540e\u7f00\u7684\u60c5\u51b5\uff1b\n\n\u5927\u529b\u8ba8\u8bba\uff1a\n\n<1> r < L \u548c r > R \u5219\u4e00\u5b9a\u4f1a\u6709\u5f71\u54cd\uff1b\n\n<2> L <= r <= R \u5219\u6709 1 / (R - L + 1) \u7684\u6982\u7387\u4e0d\u4f1a\u6709\u5f71\u54cd\uff1b\n\nCODE\uff1a\n```cpp\n#include<set>\n#include<map>\n#include<queue>\n#include<cstdio>\n#include<string>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define R register\n#define ll long long\nusing namespace std;\ninline int read()\n{\n\tint x=0,f=1;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\n\treturn x*f;\n}\nconst int N = 1e5 + 1000,mod = 998244353;\nint n,T,cnt;\nint rt[(N << 2) + 1000];\nstruct node{int ls,rs,v;} tr[N * 400];\nll ksm(ll x,ll y){ll res = 1; for(;y;y >>= 1,x = x * x % mod) if(y & 1) res = res * x % mod; return res;}\nll mul(ll p,ll q){ll res = p * q % mod; res = (res + (1 - p) * (1 - q) % mod) % mod; return (res + mod) % mod;}\nvoid changey(int &k,int l,int r,int x,int y,ll p)\n{\n\tif(!k){k = ++ cnt; tr[k].v = 1;}\n\tif(x <= l && y >= r) {tr[k].v = mul(tr[k].v,p); return;}\n\tint mid = (l + r) >> 1;\n\tif(x <=  mid) changey(tr[k].ls,l,mid,x,y,p);\n\tif(y > mid)   changey(tr[k].rs,mid + 1,r,x,y,p);\n}\nvoid changex(int k,int l,int r,int lx,int rx,int ly,int ry,ll p)\n{\n\tif(lx <= l && rx >= r){changey(rt[k],1,n,ly,ry,p); return ;}\n\tint mid = (l + r) >> 1;\n\tif(lx <= mid) changex(k << 1,l,mid,lx,rx,ly,ry,p);\n\tif(rx > mid)  changex(k << 1 | 1,mid + 1,r,lx,rx,ly,ry,p);\n}\n\nll asky(int k,int l,int r,int pos)\n{\n\tif(!k) return 1;\n\tif(l == r) return tr[k].v;\n\tint mid = (l + r) >> 1;\n\tif(pos <= mid) return mul(tr[k].v,asky(tr[k].ls,l,mid,pos));\n\telse return mul(tr[k].v,asky(tr[k].rs,mid + 1,r,pos));\n}\n\nll askx(int k,int l,int r,int posx,int posy)\n{\n\tif(l == r) return asky(rt[k],1,n,posy);\n\tint mid = (l + r) >> 1;\n\tif(posx <= mid) return mul(askx(k << 1,l,mid,posx,posy),asky(rt[k],1,n,posy));\n\telse return mul(askx(k << 1 | 1,mid + 1,r,posx,posy),asky(rt[k],1,n,posy));\n}\n\nint main()\n{\n\tn = read(); T = read();\n\tll p; int opt,l,r;\n\twhile(T --)\n\t{\n\t\topt = read(); l = read(); r = read();\n\t\tif(opt == 1)\n\t\t{\n\t\t\tp = ksm(r - l + 1,mod - 2);\n\t\t\tif(l > 1) changex(1,0,n,1,l - 1,l,r,(1 - p + mod) % mod),changex(1,0,n,0,0,1,l - 1,0);\n\t\t\tif(r < n) changex(1,0,n,l,r,r + 1,n,(1 - p + mod) % mod),changex(1,0,n,0,0,r + 1,n,0);\n\t\t\tchangex(1,0,n,l,r,l,r,(1 - 2ll * p + mod) % mod); changex(1,0,n,0,0,l,r,p);\n\t\t}\n\t\telse cout << askx(1,0,n,l - 1,r) << \"\\n\";\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1579400699,
        "uid": 153776,
        "name": "\u9b3c\u00b7\u70e8\u5f11",
        "ccfLevel": 0,
        "title": "P3688 [ZJOI2017]\u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u795e\u9898......\n\n\n\u9996\u5148\u6211\u4eec\u53d1\u73b0\u5982\u679creverse\u4e0b\u6811\u72b6\u6570\u7ec4\u6240\u64cd\u4f5c\u7684\u6570\u7ec4\u7684\u8bdd\uff0c\u5b83\u5199\u7684\u4ee3\u7801\u662f\u5b8c\u5168**\u6b63\u786e\u7684**\uff0c\u4f46\u662freverse\u4e4b\u540e\u524d\u7f00\u53d8\u6210\u4e86\u540e\u7f00\uff0c\u6240\u4ee5\uff0c\u5b83\u5199\u4e86\u4e00\u4e2a\u6b63\u786e\u7684\u5355\u70b9\u4fee\u6539\u6c42**\u540e\u7f00\u548c**\u7684\u6570\u636e\u7ed3\u6784\n\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u901a\u5e38\u7684\u8be2\u95ee\uff0c\u5176\u5b9e\u662f\u5728\u8be2\u95ee(l-1,r)\u8fd9\u4e24\u4e2a\u70b9\u76f8\u540c\u7684\u6982\u7387\n\n\uff0c\u7136\u540e\u4e00\u4e2a\u9519\u8bef\u7684\u601d\u8def\u662f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u88ab\u4fee\u6539\u7684\u6982\u7387\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u6b21\u64cd\u4f5c\uff0c\u4fee\u6539\u4e14\u53ea\u4fee\u6539**\u4e00\u4e2a\u70b9**\uff0c\u5982\u679c\u6309\u7167\u7ebf\u6bb5\u6811\u6765\u505a\uff0c\u5176\u5b9e\u662f\u4f1a\u5bfc\u81f4\u4e00\u6b21\u64cd\u4f5c\u4fee\u6539\u591a\u4e2a\u70b9\u7684\n\n\n\u90a3\u600e\u4e48\u529e\u5462\uff0c\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u597d\u4e86\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u540c\u65f6\u7ef4\u62a4\u4e24\u7ef4\u7684\u4fe1\u606f\n\n\n\u8bbe\u4e8c\u5143\u7ec4(x,y)\u7684\u503c\u8868\u793a\u4f4d\u7f6e\u4e3ax\u7684\u70b9\u548c\u4f4d\u7f6e\u4e3ay\u7684\u70b9\u76f8\u540c\u7684\u6982\u7387\n\n\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c(l,r)\uff0c\u8bbe\u8fd9\u6b21\u64cd\u4f5c\u7684\u533a\u95f4\u957f\u5ea6\u4e3alen\n\n\n\u4ed6\u4f1a\u5bf9\u4e09\u79cd\u7c7b\u578b\u7684\u4e8c\u5143\u7ec4\u4ea7\u751f\u5f71\u54cd\n\n\n1.\u5de6\u7aef\u70b9\u5728(l,r)\u5185\u4e14\u53f3\u7aef\u70b9\u4e0d\u5728(l,r)\u7684\u4e8c\u5143\u7ec4\n\n\n2.\u53f3\u7aef\u70b9\u5728(l,r)\u5185\u4e14\u5de6\u7aef\u70b9\u4e0d\u5728(l,r)\u7684\u4e8c\u5143\u7ec4\n\n\n3.\u5de6\u53f3\u7aef\u70b9**\u540c\u65f6**\u5728(l,r)\u5185\u7684\u4e8c\u5143\u7ec4\n\n\n\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u4e8c\u5143\u7ec4\uff0c\u8fd9\u6b21\u4fee\u6539\u67091/len\u7684\u6982\u7387\u53d6\u53cd\u5b83\u4eec\uff0c\u5bf9\u4e8e\u7b2c3\u79cd\u4e8c\u5143\u7ec4\u8fd9\u6b21\u4fee\u6539\u67092/len\u7684\u6982\u7387\u53d6\u53cd\u5b83\u4eec\uff08\u56e0\u4e3a\u4e0d\u5b58\u5728\u540c\u65f6\u843d\u5728x\u548cy\u4e0a\u7684\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u4fee\u6539\u4e00\u4e2a\u70b9\uff09\n\n\n\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u77e9\u5f62\u4fee\u6539\u95ee\u9898\uff0c\u7247\u6539\u70b9\u67e5\n\n\u8003\u8651\u7528\u4e8c\u4f4d\u7ebf\u6bb5\u6811\u5b58\u50a8\u4fee\u6539\uff0c\u4e5f\u5c31\u662f\u5927\u5bb6\u901a\u5e38\u8bf4\u7684\uff0c\u6807\u8bb0\u6c38\u4e45\u5316\n\n#### \u6807\u8bb0\u6c38\u4e45\u5316\n\n\u8fd9\u662f\u4e00\u79cd\u5904\u7406\u7247\u6539\u70b9\u67e5\u7684\u6280\u672f\n\n\u5355\u70b9\u67e5\u8be2\u7684\u672c\u8d28\u5c31\u662f\u628a\u5305\u542b\u8fd9\u4e2a\u70b9\u7684\u533a\u95f4\u5168\u90e8\u5e76\u8d77\u6765\n\n\n\u6bd4\u5982\u50cf\u8fd9\u6837\u4e00\u9897\u7ebf\u6bb5\u6811\n\n\n\\----------------------------------------------\n\n\n\\-------------------- \\------------------------\n\n\n\\---------- \\--------- \\------------ \\-----------\n\n\n\\---- \\----- \\--- \\----- \\----- \\------ \\----- \\-----\n\n\n\\*\n        \n\u6253\u578b\u53f7\u7684\u70b9\u8868\u793a\u6211\u4eec\u8981\u67e5\u8be2\u7684\u70b9\uff0c\u90a3\u4e48\u4ed6\u4f1a\u201c\u7a7f\u8fc7\u201d\u56db\u4e2a\u533a\u95f4\uff0c\u5982\u679c\u8fd9\u4e9b\u533a\u95f4\u4e0a\u5305\u542b\u4e86\u6240\u6709\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u6839\u672c\u4e0d\u9700\u8981\u6807\u8bb0\uff0c\u76f4\u63a5\u5728\u9012\u5f52\u7684\u65f6\u5019\u628a\u6bcf\u4e00\u4e2a\u533a\u95f4\u4e0a\u7684\u503c\u5e76\u8d77\u6765\u5c31\u597d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u4fee\u6539\u7684\u65f6\u5019\u8fd0\u7528\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u62c6\u5206\u6cd5\uff0c\u5728\u6bcf\u4e00\u4e2a\u521a\u521a\u597d\u7684\u533a\u95f4\u505a\u4fee\u6539\uff0c\u800c\u5728\u67e5\u8be2\u7684\u65f6\u5019\u4e00\u8def\u5e76\u4e0a\u53bb\u5c31\u597d\u4e86\n\n\n# \u7279\u5224\n\n\u53d1\u73b0l==1\u7684\u65f6\u5019\u8be2\u95ee\u7684\u662f\u524d\u7f00\u548c\u662f\u5426\u7b49\u4e8e\u540e\u7f00\u548c\n\n\n\u5355\u5f00\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8bb0\u5f55\u5373\u53ef\uff0c\u6ce8\u610f\u7279\u5224\n\n\n\u4e0a\u4ee3\u7801~\n\n\n```C\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\nll mod=998244353;\nconst int N=100010;\nint n;int m;\ninline ll inv(ll a){ll r=1;for(ll p=mod-2;p;p>>=1,a=(a*a)%mod)if(p&1)r=(r*a)%mod;return r;}\ninline ll mg(ll a,ll b){return (((1+mod-a)*b)%mod+((1+mod-b)*a)%mod)%mod;}//\u6982\u7387\u5408\u5e76\u51fd\u6570 \nstruct sqr_linetree\n{\n    ll val[360*N];int s[2][360*N];int root[4*N];int cnt;\n    inline void newnode(int p,int tp){s[tp][p]=++cnt;}\n    inline void newtree(int p){root[p]=++cnt;}//\u52a8\u6001\u5f00\u70b9 \n    inline void add(int p,int l,int r,int dl,int dr,ll plus)\n    {\n        if(dl==dr)return;  \n        if(dl==l&&dr==r){val[p]=mg(val[p],plus);return;}//\u76f4\u63a5\u505a\u64cd\u4f5c\uff0c\u65e0\u9700\u6253\u6807\u8bb0 \n        int mid=(l+r)/2;\n        if(dl<mid){if(s[0][p]==0)newnode(p,0);add(s[0][p],l,mid,dl,min(dr,mid),plus);}\n        if(mid<dr){if(s[1][p]==0)newnode(p,1);add(s[1][p],mid,r,max(dl,mid),dr,plus);}\n    }\n    inline ll sum(int p,int l,int r,int x)\n    {\n        if(p==0)return 0;\n        if(r-l==1){return val[p];}int mid=(l+r)/2;\n        if(x<=mid)return mg(val[p],sum(s[0][p],l,mid,x));//\u4e00\u8def\u5e76\u4e0a\u6240\u6709\u6d89\u53ca\u8fd9\u4e2a\u70b9\u7684\u4fee\u6539 \n        else return mg(val[p],sum(s[1][p],mid,r,x));\n    }\n    inline void sqadd(int p,int l,int r,int xl,int xr,int dl,int dr,ll plus)\n    {\n        if(dl==dr)return;\n        if(dl==l&&dr==r){if(root[p]==0)newtree(p);add(root[p],0,n,xl,xr,plus);return;}\n        //\u7b2c\u4e8c\u7ef4\u4e5f\u662f\u5982\u6b64 \n        int mid=(l+r)/2;\n        if(dl<mid)sqadd(2*p,l,mid,xl,xr,dl,min(dr,mid),plus);\n        if(mid<dr)sqadd(2*p+1,mid,r,xl,xr,max(dl,mid),dr,plus);\n    }\n    inline ll sqsum(int p,int l,int r,int x,int y)\n    {\n        if(r-l==1){return sum(root[p],0,n,x);}\n        int mid=(l+r)/2;//\u540c\u6837\u7b2c\u4e8c\u7ef4\u4e5f\u662f\u4e00\u8def\u5e76\u4e0a\u53bb \n        if(y<=mid){return mg(sum(root[p],0,n,x),sqsum(2*p,l,mid,x,y));}\n        else return mg(sum(root[p],0,n,x),sqsum(2*p+1,mid,r,x,y));\n    }\n}sqlt;\nstruct linetree\n{\n    ll val[4*N];//\u4e00\u7ef4\u7ebf\u6bb5\u6811\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u4e3a\u4e86\u5077\u61d2\u4e5f\u5199\u4e86\u6807\u8bb0\u6c38\u4e45\u5316 \n    inline void add(int p,int l,int r,int dl,int dr,ll plus)\n    {\n        if(dl==dr)return;int mid=(l+r)/2;//\u89c1\u4e8c\u7ef4\u7684\u5427\uff0c\u8fd9\u4fe9\u4ee3\u7801\u51e0\u4e4e\u4e00\u819c\u4e00\u6837 \n        if(dl==l&&dr==r){val[p]=mg(plus,val[p]);return;}\n        if(dl<mid)add(2*p,l,mid,dl,min(dr,mid),plus);\n        if(mid<dr)add(2*p+1,mid,r,max(dl,mid),dr,plus);\n    }\n    inline ll sum(int p,int l,int r,int x)\n    {\n        if(r-l==1){return val[p];}int mid=(l+r)/2;\n        if(x<=mid)return mg(val[p],sum(2*p,l,mid,x));\n        else return mg(val[p],sum(2*p+1,mid,r,x));\n    }\n}lt;\nint main()\n{\n    scanf(\"%d%d\",&n,&m);n+=1;\n    for(int i=1;i<=m;i++)\n    {\n        int opt;int l;int r;\n        scanf(\"%d%d%d\",&opt,&l,&r);\n        if(opt==1)\n        {\n            sqlt.sqadd(1,0,n,0,l-1,l-1,r,inv(r-l+1));//\u53ea\u6539\u53f3\u7aef\u70b9\u7684 \n            sqlt.sqadd(1,0,n,l-1,r,r,n,inv(r-l+1));//\u53ea\u6539\u5de6\u7aef\u70b9\u7684 \n            sqlt.sqadd(1,0,n,l-1,r,l-1,r,(2*inv(r-l+1))%mod);//\u4e24\u4e2a\u90fd\u6539\u7684 \n            lt.add(1,0,n,0,l-1,1);lt.add(1,0,n,r,n,1);//\u4fee\u6539\u53ea\u843d\u5728\u5de6\u8fb9\u6216\u53f3\u8fb9 \n            lt.add(1,0,n,l-1,r,((r-l)*inv(r-l+1))%mod);//\u4fee\u6539\u843d\u5728\u4e2d\u95f4 \n        }\n        else if(l==1)\n        {\n            printf(\"%lld\\n\",mg(1,lt.sum(1,0,n,r)));//\u7279\u5224 \n        }\n        else printf(\"%lld\\n\",mg(1,sqlt.sqsum(1,0,n,l-1,r)));//\u5982\u679c\u662f\u4e00\u822c\u7684\u76f4\u63a5\u67e5\u597d\u4e86 \n    }return 0;//\u62dc\u62dc\u7a0b\u5e8f \n}\n```",
        "postTime": 1516782220,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3688 \u3010[ZJOI2017]\u6811\u72b6\u6570\u7ec4\u3011"
    },
    {
        "content": "\u849f\u84bb\u8868\u793a\u4e0d\u4f1a\u5199\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u548c\u6807\u8bb0\u6c38\u4e45\u5316\u4ec0\u4e48\u7684\uff0c\u8fd9\u91cc\u6765\u4e00\u4e2a~~\u81ea\u5df1\u778eyy\u7684~~\u7b80\u5355\u7c97\u66b4\u7684\u6811\u5957\u6811\u7ef4\u62a4\u77e9\u9635\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u90a3\u4e2a\u5047\u7684\u6811\u72b6\u6570\u7ec4\u662f\u7ef4\u62a4\u540e\u7f00\u548c\u7684\uff0c\u6240\u4ee5\u5979\u4e4b\u6240\u4ee5\u8f93\u51fa\u9519\u8bef\u7b54\u6848\u7684\u5173\u952e\u5728\u4e8e\uff0c\u8fd9\u6bb5\u533a\u95f4\u7684\u548c\u5982\u679c\u7528\u540e\u7f00\u548c\u8868\u793a\u5c31\u662f$S_l-S_{r+1}$\uff0c\u4f46\u662f\u5979\u5199\u7684\u662f$S_{r}-S_{l-1}$\u3002\u90a3\u4e48\u54b1\u4eec\u4e0d\u59a8\u5c31\u627e\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u5dee\u5728\u4e86\u54ea\uff1a\n\n$S_l-S_{r+1}=S_l-S_r+A_{r}$\n\n$S_r-S_{l-1}=S_r-S_l-A_{l-1}$\n\n\u6211\u4eec\u5e94\u8be5\u7262\u8bb0\u54b1\u4eec\u7684\u6240\u6709\u8fd0\u7b97\u90fd\u5728\u6a212\u610f\u4e49\u4e0b\u5b8c\u6210\uff0c\u663e\u7136\u6b64\u65f6\u52a0\u6cd5\u548c\u51cf\u6cd5\u90fd\u4e00\u6837\uff0c\u8d1f\u53f7\u6ca1\u6709\u5565\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u51fa$A_r=A_{l-1}$\uff0c\u6211\u4eec\u6c42\u7684\u5c31\u662f\u8fd9\u4e2a\u7684\u6982\u7387\u3002\n\n\u54e6\u5bf9\u4e86\u6211\u4eec\u5982\u679c\u4ed4\u7ec6\u8bfb\u9898\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0\u53ef\u601c\u5728$Find(x)$\u7684\u4e00\u5f00\u5934\u4e13\u95e8\u7279\u5224\u4e86$if(x==0)return(0);$\uff08\u5410\u69fd\u4e00\u53e5\uff1a\u771f\u7684\u6811\u72b6\u6570\u7ec4\u53ef\u4e0d\u4f1a\u7279\u5224\u8fd9\u79cd\u60c5\u51b5\u7684\u2026\u2026\u8fd9\u6015\u4e0d\u662f\u5409\u7237\u201c\u6545\u610f\u201d\u9632\u6b62\u9519\u8bef\u5199\u6cd5\u6b7b\u5faa\u73af\u7684\u2026\u2026\uff09\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u662f\uff1a\n\n$S_r=S-S_r+A_r$\n\n$S+A_r=0$\n\n$A_r=S$\n\n\uff08\u5982\u679c\u4f60\u5bf9\u4e0a\u9762\u7684\u5f0f\u5b50\u611f\u5230\u83ab\u540d\u5176\u5999\uff0c\u5343\u4e07\u522b\u5fd8\u4e86\u8fd9\u662f\u6a212\u7684\u8fd0\u7b97\uff01\uff09\n\n\u5176\u4e2d$S$\u4e3a\u8fd9\u4e2a\u5e8f\u5217\u7684\u603b\u548c\uff08\u4e5f\u5c31\u662f\u6267\u884c\u4e86\u591a\u5c11\u6b21add\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u79cd\u60c5\u51b5\u5373$l=1$\u4e0b\u6211\u4eec\u9700\u8981\u6c42\u51fa$A_r=0/1$\u7684\u6982\u7387\uff0c\u5148\u6682\u4e14\u4e0d\u63d0\u8fd9\u4e2a\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u6709\u4e24\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u54b1\u4eec\u662f\u60f3\u6c42\u4ed6\u4eec\u4e24\u4e2a\u76f8\u7b49\u7684\u6982\u7387\u5bf9\u5427\uff0c\u5728\u8fd9\u4e4b\u524d\u4f1a\u6709\u4e00\u4e9badd\u64cd\u4f5c\u7684\u533a\u95f4\u8986\u76d6\u4f4f\u8fd9\u4e24\u4e2a\u70b9\uff0c\u5c31\u4f1a\u5bf9\u4ed6\u4eec\u662f\u5565\u7684\u6982\u7387\u4ea7\u751f\u5f71\u54cd\u3002\u5047\u8bbe\u73b0\u5728\u6765\u4e86\u4e00\u4e2a\u533a\u95f4$[l,r]$\uff0c\u90a3\u4e48\u88ab\u4ed6\u8986\u76d6\u7684\u70b9\u6539\u53d8\u7684\u6982\u7387\u5c31\u662f$\\frac 1 {r-l+1}$\uff0c\u4e0d\u6539\u53d8\u7684\u6982\u7387\u5c31\u662f$\\frac {r-l}{r-l+1}$\uff0c\u800c\u8fd9\u4e9b\u503c\u4e4b\u524d\u662f1\u6216\u80050\uff0c\u4e8e\u662f\u6211\u4eec\u5f88\u81ea\u7136\u7684\u5c31\u80fd\u60f3\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\u77e9\u9635\uff0c\u6211\u4eec\u5047\u8bbe\u6709\u4e00\u4e2a$dp[i][0/1]$\u8868\u793a\u8fd9\u4e2a\u70b9\u73b0\u5728\u662f0/1\u7684\u6982\u7387\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u4e58\u4e00\u4e2a\u8fd9\u6837\u7684\u77e9\u9635\uff08\u62b1\u6b49\u849f\u84bb\u4e0d\u4f1alatex\u6253\u77e9\u9635\uff09\uff1a\n\n```cpp\n(r-l)/(r-l+1)    1/(r-l+1)\n\n1/(r-l+1)        (r-l)/(r-l+1)\n```\n\n\u5e76\u4e14\u8fd9\u4e2a\u77e9\u9635\u4ed6\u662f\u6709\u4ea4\u6362\u5f8b\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u4e58\u4e00\u4e2a\u77e9\u9635\u5bf9\u5e94\u4e00\u6b21\u52a0\u6cd5\uff0c\u800c\u52a0\u6cd5\u5c31\u6709\u4ea4\u6362\u5f8b\uff0c\u8fd9\u7ed9\u6211\u4eec\u89e3\u9898\u5e26\u6765\u4e86\u6781\u5927\u65b9\u4fbf\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230**\u4e00\u4e2a\u70b9**\u662f\u5565\u7684\u6982\u7387\uff0c\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd9\u6837\u505a\u4e86\u5462\uff1f\n\n\u8fd9\u663e\u7136\u4e0d\u5bf9\u554a\uff0c\u56e0\u4e3a\u4f60\u73b0\u5728\u6d89\u53ca\u5230\u7684\u662f\u4e24\u4e2a\u70b9\uff0c\u4ed6\u4eec\u662f\u5565\u7684\u6982\u7387\u5e76\u4e0d\u4e00\u5b9a\u72ec\u7acb\uff0c\u5c31\u662f\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u533a\u95f4**\u540c\u65f6\u8986\u76d6**\u5230\u4e86\u8fd9\u4e24\u4e2a\u70b9\uff0c\u663e\u7136\u8fd9\u5c31\u4e0d\u80fd\u51fa\u73b0\u540c\u65f6\u7ed9\u4e24\u4e2a\u70b9\u52a0\u7684\u60c5\u51b5\uff0c\u4ed6\u53ea\u53ef\u80fdadd\u4e00\u4e2a\u70b9\uff0c\u4e8e\u662f\u8fd9\u6837\u5c31\u53ef\u80fd\u4e24\u4e2a\u70b9\u90fd\u4e0dadd\uff0c\u6982\u7387\u4e3a$\\frac{r-l-1}{r-l+1}$\uff08\u5f53\u7136\u5982\u679c$r==l$\u8fd9\u79cd\u533a\u95f4\u5f53\u7136\u5c31\u4e0d\u4f1a\u540c\u65f6\u8986\u76d6\u4e24\u4e2a\u70b9\u5c31\u4e0d\u7528\u8003\u8651\u2026\u2026\uff09\uff0c\u6216\u8005add\u5176\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u90a3\u6837\u4e00\u4e2a\u70b9\u5c31\u662f$\\frac 1{r-l+1}$\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u8fd9\u6837\u4e00\u4e2a\u60f3\u6cd5\uff1a\u5148\u628a\u53ea\u8986\u76d6A\u7684\u533a\u95f4\u548c\u53ea\u8986\u76d6B\u7684\u533a\u95f4\u7684\u77e9\u9635\u7edf\u8ba1\u51fa\u6765\uff08\u8fd9\u6837\u5c31\u72ec\u7acb\u4e86\uff09\uff0c\u6211\u4eec\u4ee4$dp[0/1][0/1]$\u8868\u793a\u5f53\u524dA\u662f\u5565B\u662f\u5565\u7684\u6982\u7387\uff0c\u6211\u4eec\u5c31\u8981\u8003\u8651\u540c\u65f6\u8986\u76d6AB\u7684\u533a\u95f4\u5bf9\u8fd9\u4e2adp\u7684\u8f6c\u79fb\uff0c\u663e\u7136\u8fd9\u4e5f\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u9762\u7684\u77e9\u9635\u7684\u5f62\u5f0f\uff0c\u4e5f\u6709\u4ea4\u6362\u5f8b\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u77e9\u9635\u662f4\u00d74\u7684\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u968f\u4fbf\u505a\u4e86\uff0c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e9b\u533a\u95f4\u5bf9\u5e94\u7684\u77e9\u9635\uff0c\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u533a\u95f4\u5c31\u5728\u5916\u5c42\u7ebf\u6bb5\u6811\u4e0a\u6309\u7167\u5de6\u7aef\u70b9\u63d2\u5165\uff0c\u6bcf\u4e00\u5c42\u90fd\u5728\u4ee5\u53f3\u7aef\u70b9\u4e3a\u5173\u952e\u503c\u7684\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u77e9\u9635\u7684\u4e58\u79ef\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u67e5\u5de6\u7aef\u70b9\u5728\u4e00\u5b9a\u533a\u95f4\u5185\u5e76\u4e14\u53f3\u7aef\u70b9\u4e5f\u5728\u4e00\u5b9a\u533a\u95f4\u5185\u7684\u77e9\u9635\u4e58\u79ef\u4e86\uff0c\u7b80\u5355\u7c97\u66b4\u3002\n\n\u7136\u540e\u6211\u4eec\u4e00\u4ea4\u53d1\u73b0T\u7684\u6bd4\u66b4\u529b\u8fd8\u6162\uff0c\u8fd9\u663e\u7136\u554a\u2026\u2026\u4f60\u8981\u5728\u6811\u5957\u6811\u4e0a\u7ef4\u62a4\u4e00\u4e2a4\u00d74\u7684\u77e9\u9635\uff0c\u505a\u4e2a\u4e58\u6cd5\u8981\u505a64\u6b21\u2026\u2026\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u628a\u8fd9\u4e2a\u5927\u77e9\u9635\u4f18\u5316\u6389\uff0c\u5176\u5b9e\u6211\u4eec\u5e76\u4e0d\u7528\u523b\u610f\u7684\u8f6c\u79fb\u8fd9\u4e24\u4e2a\u70b9\u5206\u522b\u662f\u5565\u7684\u72b6\u6001\uff0c\u4e8b\u5b9e\u4e0a**\u6211\u4eec\u4ec5\u5173\u5fc3\u8fd9\u4e24\u4e2a\u70b9\u662f\u5426\u76f8\u540c**\uff0c\u6211\u4eec\u540c\u65f6\u8986\u76d6\u8fd9\u4e24\u4e2a\u70b9\u7684\u533a\u95f4\u6700\u591a\u53ea\u4f1aadd\u4e00\u4e2a\u5173\u952e\u70b9\u5427\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u53d1\u73b0\u5c31\u4f1a\u4f7f\u8fd9\u4e24\u4e2a\u70b9\u662f\u5426\u76f8\u540c\u7684\u72b6\u6001\u53d6\u53cd\uff0c\u8fd9\u4e2a\u6982\u7387\u662f$\\frac 2{r-l+1}$\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u4e00\u4e2a$dp[0/1]$\u8868\u793a\u8fd9\u4e24\u4e2a\u70b9\u662f\u5426\u76f8\u540c\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u75282\u00d72\u7684\u77e9\u9635\u8fdb\u884c\u8f6c\u79fb\u4e86\u3002\u5e38\u6570\u5927\u5927\u4f18\u5316\u4e86\u3002\n\n\u7136\u540e**\u5343\u4e07\u4e0d\u8981\u7528Splay\uff01\u5343\u4e07\u4e0d\u8981\u7528Splay\uff01\u5343\u4e07\u4e0d\u8981\u7528Splay\uff01**\u6211\u7528Splay\u7136\u540eT\u98de\u4e86\uff0c\u7528\u66ff\u7f6a\u7f8a\u5c31\u8dd1\u7684\u98de\u8d77\u2026\u2026\uff08\u56e0\u4e3aSplay\u8981\u8fdb\u884c\u591a\u6b21\u7684pushup\uff0c\u5c31\u5f97\u505a\u597d\u591a\u6b21\u77e9\u4e58\uff0c\u5728\u5e73\u8861\u6811\u4e0a\u533a\u95f4\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u5728\u8282\u70b9\u4e0a\u7ef4\u62a4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7136\u540e\u50cfkdtree\u4e00\u6837\u7684\u66b4\u67e5\uff0c\u663e\u7136\u548c\u7ebf\u6bb5\u6811\u4e00\u6837\u662f$O(logn)$\u7684\uff09\u3002\n\n\u4e0a\u4ee3\u7801~\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#define ll unsigned long long\n#define p 998244353\n#define idiv(_a,_b) (((_a)*ny[_b])%p)\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\n\t\t}\n\t}\n\tvoid print(int num){\n\t\tif(num>=10)print(num/10);\n\t\tputchar(num%10+'0');\n\t}\n\ttypedef struct _mx{\n\t\tint v[2][2];\n\t\tfriend _mx operator *(const _mx &a,const _mx &b){\n\t\t\t_mx c;\n\t\t\tc.v[0][0]=((ll)a.v[0][0]*b.v[0][0]+(ll)a.v[0][1]*b.v[1][0])%p;\n\t\t\tc.v[1][1]=((ll)a.v[1][0]*b.v[0][1]+(ll)a.v[1][1]*b.v[1][1])%p;\n\t\t\tc.v[1][0]=((ll)a.v[1][0]*b.v[0][0]+(ll)a.v[1][1]*b.v[1][0])%p;\n\t\t\tc.v[0][1]=((ll)a.v[0][0]*b.v[0][1]+(ll)a.v[0][1]*b.v[1][1])%p;return(c);\n\t\t}\n\t}mx;\n\tmx dk1,dk2;\n\tnamespace phs{\n\t\tint data[8000001],ch[8000001][2],maxn[8000001],minn[8000001];\n\t\tmx dp1[8000001],tot1[8000001];\n\t\tmx dp2[8000001],tot2[8000001];\n\t\tint gn=1;mx me1;mx me2;\n\t\tint gptr=1,tmp[1000001],size[8000001];\n\t\tinline void up(int tree){\n\t\t\ttot1[tree]=dp1[tree];tot2[tree]=dp2[tree];\n\t\t\tsize[tree]=1+size[ch[tree][0]]+size[ch[tree][1]];\n\t\t\tmaxn[tree]=max(data[tree],max(maxn[ch[tree][0]],maxn[ch[tree][1]]));\n\t\t\tminn[tree]=min(data[tree],min(minn[ch[tree][0]],minn[ch[tree][1]]));\n\t\t\tif(ch[tree][0])tot1[tree]=tot1[tree]*tot1[ch[tree][0]],tot2[tree]=tot2[tree]*tot2[ch[tree][0]];\n\t\t\tif(ch[tree][1])tot1[tree]=tot1[tree]*tot1[ch[tree][1]],tot2[tree]=tot2[tree]*tot2[ch[tree][1]];\n\t\t}\n\t\tvoid dfs(int pt){\n\t\t\tif(!pt)return;dfs(ch[pt][0]);\n\t\t\ttmp[gptr]=pt;gptr++;dfs(ch[pt][1]);\n\t\t}\n\t\tint build(int l,int r){\n\t\t\tif(l>r)return(0);int mid=(l+r)>>1,tree=tmp[mid];\n\t\t\tch[tree][0]=build(l,mid-1);\n\t\t\tch[tree][1]=build(mid+1,r);\n\t\t\tup(tree);return(tree);\n\t\t}\n\t\tvoid find1(int tree,int pt){//\u67e5\u8be2tree\u4e0a\u5927\u4e8e\u7b49\u4e8ept\u7684\u4f4d\u7f6e \n\t\t\tif(!tree||maxn[tree]<pt)return;\n\t\t\tif(minn[tree]>=pt){\n\t\t\t\tme1=me1*tot1[tree];return;\n\t\t\t}\n\t\t\tif(pt>data[tree]){\n\t\t\t\tfind1(ch[tree][1],pt);return;\n\t\t\t}\n\t\t\tme1=me1*dp1[tree];\n\t\t\tif(ch[tree][1])me1=me1*tot1[ch[tree][1]];\n\t\t\tif(pt==data[tree])return;\n\t\t\tfind1(ch[tree][0],pt);\n\t\t}\n\t\tvoid find2(int tree,int pt){//\u67e5\u8be2tree\u4e0a\u5927\u4e8e\u7b49\u4e8ept\u7684\u4f4d\u7f6e \n\t\t\tif(!tree||maxn[tree]<pt)return;\n\t\t\tif(minn[tree]>=pt){\n\t\t\t\tme2=me2*tot2[tree];return;\n\t\t\t}\n\t\t\tif(pt>data[tree]){\n\t\t\t\tfind2(ch[tree][1],pt);return;\n\t\t\t}\n\t\t\tme2=me2*dp2[tree];\n\t\t\tif(ch[tree][1])me2=me2*tot2[ch[tree][1]];\n\t\t\tif(pt==data[tree])return;\n\t\t\tfind2(ch[tree][0],pt);\n\t\t}\n\t\tint need=-1,op;\n\t\tvoid insert(int &tree,int dat){\n\t\t\tif(!tree){\n\t\t\t\ttree=gn;gn++;dp1[tree]=me1;\n\t\t\t\tdp2[tree]=me2;size[tree]=1;\n\t\t\t\tmaxn[tree]=minn[tree]=data[tree]=dat;up(tree);return;\n\t\t\t}\n\t\t\tif(data[tree]==dat){\n\t\t\t\tdp1[tree]=dp1[tree]*me1;dp2[tree]=dp2[tree]*me2;\n\t\t\t\ttot1[tree]=tot1[tree]*me1;\n\t\t\t\ttot2[tree]=tot2[tree]*me2;return;\n\t\t\t}\n\t\t\ttot1[tree]=tot1[tree]*me1;\n\t\t\ttot2[tree]=tot2[tree]*me2;\n\t\t\tmaxn[tree]=max(maxn[tree],dat);\n\t\t\tminn[tree]=min(minn[tree],dat);\n\t\t\tinsert(ch[tree][dat>data[tree]],dat);\n\t\t\tint er=ch[tree][dat>data[tree]];size[tree]++;\n\t\t\tif((double)max(size[ch[er][0]],size[ch[er][1]])>=(double)size[er]*0.66)need=tree,op=(dat>data[tree]);\n\t\t}\n\t\tvoid query(int l,int r,int tree){\n\t\t\tif(!tree||maxn[tree]<l||minn[tree]>r)return;\n\t\t\tif(maxn[tree]<=r&&minn[tree]>=l){\n\t\t\t\tme1=me1*tot1[tree];return;\n\t\t\t}\n\t\t\tif(data[tree]>=l&&data[tree]<=r)me1=me1*dp1[tree];\n\t\t\tquery(l,r,ch[tree][0]);query(l,r,ch[tree][1]);\n\t\t}\n\t\ttypedef struct _set{\n\t\t\tint root;_set(){root=0;}\n\t\t\tinline void insert(int dat){\n\t\t\t\tneed=-1;phs::insert(root,dat);\n\t\t\t\tif((double)max(size[ch[root][0]],size[ch[root][1]])>=(double)size[root]*0.66){\n\t\t\t\t\tgptr=1;dfs(root);root=build(1,gptr-1);return;\n\t\t\t\t}\n\t\t\t\tif(need==-1)return;\n\t\t\t\tgptr=1;dfs(ch[need][op]);\n\t\t\t\tch[need][op]=build(1,gptr-1);\n\t\t\t}\n\t\t\tinline void query(int l,int r){//\u53ea\u67e51\uff01 \n\t\t\t\tif(l>r)return;phs::query(l,r,root);\n\t\t\t}\n\t\t}set;\n\t}\n\tphs::set sets[200001];\n\tinline ll mi(int a,int b){\n\t\tll ans=1,tmp=a;while(b){\n\t\t\tif(b&1)ans=(ans*tmp)%p;\n\t\t\ttmp=(tmp*tmp)%p;b>>=1;\n\t\t}\n\t\treturn(ans);\n\t}\n\tll ny[100001];int lef[200001],rgh[200001],gn=1,size[200001];\n\tint build(int l,int r){\n\t\tint tree=gn;gn++;\n\t\tif(l==r)return(tree);\n\t\tint mid=(l+r)>>1;\n\t\tlef[tree]=build(l,mid);\n\t\trgh[tree]=build(mid+1,r);return(tree);\n\t}//\u8b66\u544a\uff1aphs::me1\u548cphs::me2\u7686\u4e3a\u7ebf\u6bb5\u6811\u548c\u5e73\u8861\u6811\u7684public \n\tvoid setpt(int l,int r,int tree,int pt,int dat){\n\t\tsets[tree].insert(dat);\n\t\tsize[tree]++;if(l==r)return;\n\t\tint mid=(l+r)>>1;\n\t\tif(pt<=mid)setpt(l,mid,lef[tree],pt,dat);\n\t\telse setpt(mid+1,r,rgh[tree],pt,dat);\n\t}\n\tvoid qsuf1(int rl,int rr,int l,int r,int tree,int pt,int l1,int r1){//A\u5de6\u8fb9\u7684 \uff0c\u5305\u62ec\u77e9\u96352 \n\t\tif(!size[tree])return;\n\t\tif(rl>rr)return;\n\t\tif(rl==l&&rr==r){\n\t\t\tphs::find2(sets[tree].root,pt);sets[tree].query(l1,r1);return;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(rl>mid)qsuf1(rl,rr,mid+1,r,rgh[tree],pt,l1,r1);\n\t\telse{\n\t\t\tif(rr<=mid)qsuf1(rl,rr,l,mid,lef[tree],pt,l1,r1);\n\t\t\telse{\n\t\t\t\tqsuf1(rl,mid,l,mid,lef[tree],pt,l1,r1);\n\t\t\t\tqsuf1(mid+1,rr,mid+1,r,rgh[tree],pt,l1,r1);\n\t\t\t}\n\t\t}\n\t}\n\tvoid qsuf2(int rl,int rr,int l,int r,int tree,int pt){//AB\u4e4b\u95f4\u7684\uff0c \u53ea\u5305\u542bB\u7684 \n\t\tif(!size[tree])return;\n\t\tif(rl>rr)return;\n\t\tif(rl==l&&rr==r){\n\t\t\tphs::find1(sets[tree].root,pt);return;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(rl>mid)qsuf2(rl,rr,mid+1,r,rgh[tree],pt);\n\t\telse{\n\t\t\tif(rr<=mid)qsuf2(rl,rr,l,mid,lef[tree],pt);\n\t\t\telse{\n\t\t\t\tqsuf2(rl,mid,l,mid,lef[tree],pt);\n\t\t\t\tqsuf2(mid+1,rr,mid+1,r,rgh[tree],pt);\n\t\t\t}\n\t\t}\n\t}\n\tinline ll mul(ll a,ll b,ll c){\n\t\ta*=b;a%=p;a*=c;return(a%p);\n\t}\n\tvoid ywymain(){\n\t\tdk1.v[0][0]=dk1.v[1][1]=1;\n\t\tdk2=dk1;phs::maxn[0]=-1234567890;phs::minn[0]=1234567890;\n\t\tphs::dp1[0]=phs::tot1[0]=dk1;\n\t\tphs::dp2[0]=phs::tot2[0]=dk1;\n\t\tint n=get(),m=get();ny[0]=1;\n\t\tfor(register int i=1;i<=n;i++)ny[i]=mi(i,p-2);\n\t\tint rt=build(1\uff0cn);int tot=0;\n\t\twhile(m){\n\t\t\tm--;int cmd=get();\n\t\t\tif(cmd==1){\n\t\t\t\tint l=get(),r=get();\n\t\t\t\tphs::me1.v[0][0]=phs::me1.v[1][1]=idiv(r-l,r-l+1);\n\t\t\t\tphs::me1.v[0][1]=phs::me1.v[1][0]=ny[r-l+1];\n\t\t\t\tphs::me2.v[0][0]=phs::me2.v[1][1]=idiv(r-l-1,r-l+1);\n\t\t\t\tphs::me2.v[1][0]=phs::me2.v[0][1]=idiv(2,r-l+1);\n\t\t\t\tsetpt(1,n,rt,l,r);tot++;tot&=1;\n\t\t\t}else{\n\t\t\t\tint l=get()-1,r=get();\n\t\t\t\tif(!l){\n\t\t\t\t\tphs::me1=dk1;qsuf2(1,r,1,n,rt,r);\n\t\t\t\t\tprint(phs::me1.v[0][tot]);putchar('\\n');continue\uff1b\n\t\t\t\t}\n\t\t\t\tphs::me1=dk1;\n\t\t\t\tphs::me2=dk2;qsuf1(1,l,1,n,rt,r,l,r-1);\n\t\t\t\tll l0=phs::me1.v[0][0],l1=phs::me1.v[0][1];\n\t\t\t\tphs::me1=dk1;qsuf2(l+1,r,1,n,rt,r);\n\t\t\t\tll r0=phs::me1.v[0][0],r1=phs::me1.v[0][1];\n\t\t\t\tll ans=mul(l0,r0,phs::me2.v[0][0])+mul(l1,r1,phs::me2.v[0][0]);\n\t\t\t\tans+=mul(l1,r0,phs::me2.v[1][0]);ans+=mul(l0,r1,phs::me2.v[1][0]);\n\t\t\t\tprint(ans%p);putchar('\\n')\uff1b\n\t\t\t}\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();return(0);//\u518d\u89c1\u7a0b\u5e8f\n}\n```",
        "postTime": 1547647871,
        "uid": 125124,
        "name": "ywy_c_asm",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3688 \u3010[ZJOI2017]\u6811\u72b6\u6570\u7ec4\u3011"
    },
    {
        "content": "## \u5206\u6790:\n\u201c\u5982\u679c\u4f60\u5bf9\u6811\u72b6\u6570\u7ec4\u6bd4\u8f83\u719f\u6089\uff0c\u4e0d\u96be\u53d1\u73b0\u53ef\u601c\u6c42\u7684\u662f\u540e\u7f00\u548c\u201d\n\n\u8bbe\u6570\u5217\u4e3a$A$\uff0c\u90a3\u4e48\u53ef\u601c\u6c42\u7684\u5c31\u662f$A_{l-1}$\u5230$A_{r-1}$\u7684\u548c\uff08\u5373$l-1$\u7684\u540e\u7f00\u51cf$r$\u7684\u540e\u7f00\uff0c$\\sum_{i=l-1}^{r-1}A_i$\uff09,\u800c\u7b54\u6848\u4e3a$A_l$\u5230$A_r$\u7684\u548c\uff08\u5373$\\sum_{i=l}^{r}A_i$\uff09\u8fd9\u4e24\u79cd\u7b54\u6848\u90fd\u5305\u542b$A_l$\u5230$A_{r-1}$\u7684\u548c\uff0c\u56e0\u6b64\u53ea\u9700\u5224\u65ad$A_{l-1}$\u4e0e$A_r$\u76f8\u7b49\u7684\u6982\u7387\u5c31\u884c\u4e86\n\n\u90a3\u4e48\u600e\u4e48\u7b97\uff1f\n\n\u8003\u8651\u8bb0\u4e0b\u6bcf\u6b21\u4fee\u6539\u7684\u5f71\u54cd\uff0c\u5047\u8bbe\u5df2\u77e5\u5de6\u7aef\u70b9$a$\u548c\u53f3\u7aef\u70b9$b$\uff0c\u90a3\u4e48\u5bf9\u4e8e\u67d0\u4e00\u6b21\u4fee\u6539\u533a\u95f4$l$~$r$\uff0c\u5219\u53ea\u6709\u5f53$a\\in[l,r]$\u6216$b\\in[l,r]$\u65f6\u624d\u6709\u5f71\u54cd\uff0c\u8bbe$p$\u4e3a\u4efb\u9009\u533a\u95f4\u5185\u4e00\u4e2a\u6570\u7684\u6982\u7387\uff0c\u8fd9\u91cc\u5206\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba:\n\n- $a\\in[1,l-1]$,$b\\in[l,r]$\u65f6\uff0c\u6709$1-p$\u7684\u6982\u7387\u4e0d\u5f71\u54cd\n- $a\\in[l,r]$,$b\\in[l,r]$\u65f6\uff0c\u6709$1-2*p$\u7684\u6982\u7387\u4e0d\u5f71\u54cd\n- $a\\in[l,r]$,$b\\in[r+1,n]$\u65f6\uff0c\u6709$1-p$\u7684\u6982\u7387\u4e0d\u5f71\u54cd\n\n\u90a3\u4e48\u53ea\u8981\u628a\u6240\u6709\u7684\u5f71\u54cd\u90fd\u5408\u5e76\u8d77\u6765\u5c31\u884c\u4e86\uff0c\u8bbe\u5f53\u524d\u76f8\u540c\u6982\u7387\u4e3a$p$\uff0c\u5f53\u524d\u4fee\u6539\u4e0d\u5f71\u54cd\u7684\u6982\u7387$q$\uff0c\u5219\u76f8\u540c\u6982\u7387\u66f4\u65b0\u4e3a$p*q+(1-p)*(1-q)$\n\n\u4f46\u662f\u76f4\u63a5\u6734\u7d20\u5fc5\u7136TLE\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5bfb\u627e\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c~~\u55ef\uff0c\u6807\u7b7e\u662f\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u90a3\u5c31\u7528\u5b83\u4e86~~\n\n\u8003\u8651\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u8bbe\u70b9$(x,y)$\u8868\u793a$A_x$\u4e0e$A_y$\u76f8\u7b49\u7684\u6982\u7387\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u60ca\u5947\u7684\u53d1\u73b0\uff1a\n#### \u8fd9\u4e0d\u5c31\u662f\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\u5417\uff01\n\n\u6bcf\u8bfb\u5165\u4e00\u4e2a\u4fee\u6539\uff0c\u5c31\u7528\u4e0a\u9762\u6240\u8bf4\u7684\u5f71\u54cd\u66f4\u65b0\u533a\u95f4\uff0c\u5373$[1,l-1,l,r],[l,r,l,r],[l,r,r+1,n]$\u4e09\u4e2a\u533a\u95f4\uff0c\u7528\u4e0a\u8ff0\u5f0f\u5b50\u5408\u5e76\u533a\u95f4\n\n\u8be2\u95ee\u5373\u67e5\u8be2\u70b9$(l-1,r)$\u7684\u503c\n\n### \u8fd8\u6709\u4e00\u4e2a\u5751\u70b9\uff01\uff01$l$\u53ef\u80fd\u4e3a$1$\uff01\uff01\n\n$l=1$\u65f6\uff0c\u53ef\u601c\u6c42\u7684\u662f$r$\u7684\u540e\u7f00\u548c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6c42$r$\u7684\u540e\u7f00\u548c\u4e0e\u524d\u7f00\u548c\u76f8\u7b49\u7684\u6982\u7387\n\n\u8fd9\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u65b9\u6cd5\uff0c\u7b2c\u4e00\u7ef4\u6211\u4eec\u65b0\u589e\u4e00\u4e2a\u5143\u7d20$0$\uff0c\u7528$[0,x]$\u8868\u793a$x$\u7684\u540e\u7f00\u548c\u4e0e\u524d\u7f00\u548c\u76f8\u7b49\u7684\u6982\u7387\uff0c\u90a3\u4e48\u5f53\u4fee\u6539\u533a\u95f4$[l,r]$\u65f6\uff0c\u533a\u95f4$[1,l-1]$,$[r+1,n]$\u4e2d\u5143\u7d20\u7684\u540e\u7f00\u548c\u4e0e\u524d\u7f00\u548c\u4e00\u5b9a\u4f1a\u88ab\u5f71\u54cd\uff0c\u5373\u4e0d\u88ab\u5f71\u54cd\u6982\u7387\u4e3a$0$\uff1b\u800c\u533a\u95f4$[l,r]$\u4e2d\u5143\u7d20\u6709$p$\u7684\u6982\u7387\u4e0d\u88ab\u5f71\u54cd\uff08\u5373\u6b63\u597d\u9009\u5230\u5b83\uff0c$p$\u7684\u610f\u4e49\u5373\u4e3a\u4e0a\u8ff0\uff09\uff0c\u8fd9\u65f6\u6211\u4eec\u4e5f\u8981\u66f4\u65b0\u3002\u8fd9\u6837\u5f53$l=1$\u65f6\uff0c\u76f4\u63a5\u67e5\u8be2\u70b9$(l-1,r)$\u7684\u503c\u5373\u53ef\n\n### \u8fd8\u6709\u5c31\u662f\u5361\u5361\u5e38\u6570\uff0c\u5361\u5361\u7a7a\u95f4\uff01\uff01\n#### \u4ee5\u53ca\u7ebf\u6bb5\u6811\u8981\u52a8\u6001\u5f00\u70b9\n\n## Code:\n\uff08\u4ee3\u7801\u4e11\u4e0d\u8981\u602a\u6211\uff09\n```cpp\n//\u5f00O2\u80fd\u8fc7\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<cmath>\n#include<string>\n#include<iostream>\n#include<queue>\n#include<iomanip>\n#include<algorithm>\nusing namespace std;\nconst int N=100010;\nconst int MOD=998244353;\nint rt[N*21],n,cnt;\nstruct tree\n{\n    int l,r;\n    int v;//\u5361\u7a7a\u95f4\uff0c\u5f00int\n}tr[N*402];\n\ninline long long mul(long long p,long long q)//p*q+(1-p)*(1-q)\n{\n    long long res=p*q%MOD;\n    res=(res+(1-p+MOD)*(1-q+MOD)%MOD)%MOD;\n    return res;\n}\n\ninline long long power(long long x,long long y)//\u5feb\u901f\u5e42\n{\n    long long ans=1;\n    while(y)\n    {\n        if(y&1) ans=ans*x%MOD;\n        x=x*x%MOD,y>>=1;\n    }\n    return ans;\n}\n\ninline void updatay(int l,int r,int &id,int ly,int ry,long long p)//\u4fee\u6539\u533a\u95f4\u4e8c\u7ef4\n{\n    if(id==0)\n    {\n        cnt++;\n        id=cnt;\n        tr[id].v=1;//\u521d\u59cb\u65f6\u90fd\u662f0\uff0c\u56e0\u6b64\u76f8\u7b49\u6982\u7387\u4e3a1\n    }\n    if(l>=ly&&r<=ry)\n    {\n        tr[id].v=mul(p,tr[id].v);\n        return;\n    }\n    int mid=l+r>>1;\n    if(ly<=mid) updatay(l,mid,tr[id].l,ly,ry,p);\n    if(ry>mid) updatay(mid+1,r,tr[id].r,ly,ry,p);\n}\n\ninline void updatax(int l,int r,int id,int lx,int rx,int ly,int ry,long long p)//\u4fee\u6539\u533a\u95f4\u4e00\u7ef4\n{\n    if(l>=lx&&r<=rx)\n    {\n        updatay(1,n,rt[id],ly,ry,p);\n        return;\n    }\n    int mid=l+r>>1;\n    if(lx<=mid) updatax(l,mid,id<<1,lx,rx,ly,ry,p);\n    if(rx>mid) updatax(mid+1,r,id<<1|1,lx,rx,ly,ry,p);\n}\n\nlong long quey(int l,int r,int id,int y)//\u67e5\u8be2\u4e8c\u7ef4\n{\n    if(id==0) return 1;//\u521d\u59cb\u65f6\u90fd\u662f0\uff0c\u56e0\u6b64\u76f8\u7b49\u6982\u7387\u4e3a1\n    if(l==r) return tr[id].v;\n    int mid=l+r>>1;\n    long long res;\n    if(y<=mid) res=mul(tr[id].v,quey(l,mid,tr[id].l,y));\n    else res=mul(tr[id].v,quey(mid+1,r,tr[id].r,y));\n    //\u5408\u5e76\u6cbf\u9014\u6240\u6709\u533a\u95f4\u5f71\u54cd\u503c\n    return res;\n}\n\nlong long quex(int l,int r,int id,int x,int y)//\u67e5\u8be2\u4e00\u7ef4\n{\n    if(l==r) return quey(1,n,rt[id],y);\n    int mid=l+r>>1;\n    if(x<=mid) return mul(quey(1,n,rt[id],y),quex(l,mid,id<<1,x,y));\n    else return mul(quey(1,n,rt[id],y),quex(mid+1,r,id<<1|1,x,y));\n    //\u5408\u5e76\u6cbf\u9014\u6240\u6709\u533a\u95f4\u5f71\u54cd\u503c\n}\n\nint main()\n{\n    int i,j,k,q,op,l,r;\n    long long p;\n    scanf(\"%d%d\",&n,&q);\n    cnt=0;\n    while(q--)\n    {\n        scanf(\"%d%d%d\",&op,&l,&r);\n        if(op==1)\n        {\n            p=power(r-l+1,MOD-2);//\u6c42\u9006\u5143\uff0c\u5373\u9009\u67d0\u4e00\u4e2a\u5143\u7d20\u7684\u6982\u7387\n            if(l>1) updatax(0,n,1,1,l-1,l,r,(1-p+MOD)%MOD),updatax(0,n,1,0,0,1,l-1,0);\n            if(r<n) updatax(0,n,1,l,r,r+1,n,(1-p+MOD)%MOD),updatax(0,n,1,0,0,r+1,n,0);\n            updatax(0,n,1,l,r,l,r,(1-p*2%MOD+MOD)%MOD),updatax(0,n,1,0,0,l,r,p);\n        }\n        else printf(\"%lld\\n\",quex(0,n,1,l-1,r));\n    }\n    return 0;\n}\n```",
        "postTime": 1550050109,
        "uid": 147391,
        "name": "lyh0313",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3688 \u3010[ZJOI2017]\u6811\u72b6\u6570\u7ec4\u3011"
    },
    {
        "content": "## Description \n\n\u73b0\u6709\u4e00\u4e2a\u9519\u8bef\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u4e24\u4e2a\u64cd\u4f5c\uff1a\n1. \u533a\u95f4\u5f02\u6216 $1$\n2. \u8be2\u95ee\u533a\u95f4\u5f02\u6216\u548c\n\n\u6bcf\u6b21\u8be2\u95ee $2$ \u64cd\u4f5c\u6b63\u786e\u7684\u6982\u7387\u662f\u591a\u5c11\u3002\n\n## Solution\n\n\u663e\u7136\u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u5c31\u662f\u628a\u8be2\u95ee\u524d\u7f00\u548c\u53d8\u6210\u4e86\u8be2\u95ee\u540e\u7f00\u548c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8be2\u95ee $[l, r]$ \u7b49\u4ef7\u4e8e\u8be2\u95ee $[l-1, r-1]$\u3002\u90a3\u4e48\u8fd9\u4e2a\u8be2\u95ee\u6b63\u786e\u7b49\u4ef7\u4e8e $a_l=a_r$\u3002\n\n\u770b\u89c1\u6570\u636e\u8303\u56f4\u4e2d\u5199\u5230 \u201c\u6240\u6709\u8be2\u95ee\u90fd\u5728\u4fee\u6539\u540e\u201d\uff0c\u7ed3\u5408\u8be5\u95ee\u9898\u4e0e\u533a\u95f4\u4ea4\u5e76\u76f8\u5173\uff0c\u6211\u4eec\u81ea\u7136\u60f3\u5230 CDQ \u5206\u6cbb\u3002\uff08\u4e3a\u4ec0\u4e48\u9898\u89e3\u533a\u90fd\u662f\u6811\u5957\u6811\uff1f\uff09\n\n\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u6b63\u786e\u7684\u6982\u7387\uff1f\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u8bb0\u5f55\u4e00\u4e2a $dp_{0,1}$ \u8868\u793a\u7ecf\u8fc7\u4e00\u4e9b\u4fee\u6539\u64cd\u4f5c\u4e4b\u540e $a_l$ \u5f02\u6216 $a_r$ \u7b49\u4e8e $0$ \u6216 $1$ \u7684\u6982\u7387\u3002\n\n\u7ed3\u5408 CDQ \u5206\u6cbb\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5904\u7406\u5de6\u533a\u95f4\u7684\u4fee\u6539\u5bf9\u53f3\u8fb9\u8be2\u95ee\u7684 $dp$ \u503c\u7684\u5f71\u54cd\u3002\u5047\u8bbe\u4fee\u6539\u4e3a $[L, R]$\uff0c\u8be2\u95ee\u662f $[l, r]$ (\u8be2\u95ee $a_l = a_r$ \u7684\u6982\u7387)\u3002\u518d\u8bbe $R-L+1=len$\uff0c\u90a3\u4e48\u8f6c\u79fb\u5206\u6210\u4e09\u79cd\u60c5\u51b5\uff1a\n\n1. $[L, R]$ \u4e0d\u542b $l$ \u4e5f \u4e0d\u542b $r$\uff0c\u90a3\u4e48\u5bf9 $dp$ \u503c\u6ca1\u6709\u5f71\u54cd\u3002\n2. $[L, R]$ \u542b $l$ \u6216 $r$ \u4e2d\u7684\u6070\u597d\u4e00\u4e2a\u3002\u90a3\u4e48\u6709 $dp[i][0]=dp[i-1][0]\\cdot \\frac{len-1}{len}+dp[i-1][1] \\cdot\\frac{1}{len};dp[i][1] = dp[i-1][0]\\cdot \\frac{1}{len}+dp[i-1][1] \\cdot\\frac{len-1}{len}$\u3002\n3. $[L, R]$ \u542b $l$ \u4e5f\u542b $r$ \u3002\u90a3\u4e48\u6709 $dp[i][0]=dp[i-1][0]\\cdot \\frac{len-2}{len}+dp[i-1][1] \\cdot\\frac{2}{len};dp[i][1] = dp[i-1][0]\\cdot \\frac{2}{len}+dp[i-1][1] \\cdot\\frac{len-2}{len}$\u3002\n\n\u663e\u7136\uff0c\u8fd9\u79cd\u8f6c\u79fb\u65b9\u5f0f\u53ef\u4ee5\u7528\u77e9\u9635\u4e58\u6cd5\u6765\u63cf\u8ff0\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u6362\u6210\u4e00\u4e2a\u77e9\u9635\uff0c\u5728\u5904\u7406\u8be2\u95ee\u65f6\u5c31\u662f\u628a\u7b26\u5408\u6761\u4ef6\u7684\u77e9\u9635\u76f8\u4e58\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u7b49\u4ef7\u4e8e $[L, R]$ \u4e0e $[l, r]$ \u4e0d\u76f8\u4ea4\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7b49\u4ef7\u4e8e $[L, R]$ \u548c $[l, r]$ \u76f8\u4ea4\u4f46\u4e0d\u5305\u542b\u3002\u7b2c\u4e09\u79cd\u60c5\u51b5\u7b49\u4ef7\u4e8e $[L, R]$ \u5305\u542b $[l, r]$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728 CDQ \u5206\u6cbb\u65f6\u6309\u7167\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u3002\u5bf9\u5e94\u7684\u628a\u4fee\u6539\u7684\u4fe1\u606f\uff08\u4e00\u4e2a\u77e9\u9635\uff09\u7528\u6570\u636e\u7ed3\u6784\u52a0\u5728\u5bf9\u5e94\u7684\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9\u4e0a\u3002\u6700\u540e\u8be2\u95ee\u65f6\u7528\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u533a\u95f4\u67e5\u8be2\u5373\u53ef\u3002\u8fd9\u91cc\u6211\u9009\u62e9\u4e86\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\u3002\uff08\u76f8\u4fe1\u4f1a\u4e00\u70b9 CDQ\u5206\u6cbb \u7684\u4eba\u770b\u5f97\u61c2\u6211\u8fd9\u6bb5\u5728\u8bf4\u5565\uff09\n\n\u4e5f\u8bb8\u4f60\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u77e9\u9635\u4e58\u6cd5\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3002\u4f46\u662f\u7531\u4e8e\u6b64\u9898\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u628a\u4e24\u4e2a\u4fee\u6539\u4ea4\u6362\u663e\u7136\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u7684\u3002\n\n\u6700\u540e\u4e0d\u8981\u5fd8\u8bb0\u4e00\u4e2a\u7ec6\u8282\uff1a\u8be2\u95ee\u4e2d $l=1$ \u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u51fa\u9898\u4eba\u5728\u5199\u9519\u8bef\u7684\u6811\u72b6\u6570\u7ec4\u65f6\u628a\u8fd9\u4e00\u60c5\u51b5\u7279\u5224\u4e86\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u8be2\u95ee\u6b63\u786e\u7b49\u4ef7\u4e8e\u4e3a $r$ \u7684\u524d\u7f00\u5f02\u6216\u548c\u7b49\u4e8e $r$ \u7684\u540e\u7f00\u5f02\u6216\u548c\u3002\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7\u77e9\u9635\u4e58\u6cd5\u7684\u65b9\u5f0f\u63cf\u8ff0\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(2^3 n \\log^2 n)$ \u3002\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std; \n\nconst int maxn = 1e5, mod = 998244353;\n\nint n, m, s[(maxn << 2) + 5], inv[maxn + 5]; \nint fenmu[maxn + 5]; \n\nstruct BIT {\n    int c[maxn + 5]; \n    int lb(int x) {\n        return x & (-x); \n    }\n    void add(int x, int d) {\n        for (int i = x; i <= n; i += lb(i)) {\n            c[i] += d; \n        }\n    }\n    int sum(int x) {\n        int ret = 0; \n        for (int i = x; i; i -= lb(i)) {\n            ret += c[i]; \n        }\n        return ret; \n    } \n} B[2]; \n\n// \u8fd9\u4e2a\u6811\u72b6\u6570\u7ec4\u662f\u4e3a\u4e86\u7ef4\u62a4\u6211\u8bf4\u7684\u6700\u540e\u4e00\u79cd\u7ec6\u8282\u60c5\u51b5\u7684\u3002\n\nint add(int x, int y) {\n    return (x += y) >= mod ? x - mod : x; \n} \n\nint fpw(int x, int k, int p = mod) {\n    int ret = 1; \n    while (k) {\n        if (k & 1) ret = 1ll * ret * x % p; \n        x = 1ll * x * x % p; k >>= 1; \n    }\n    return ret; \n}\n\nstruct Query {\n    int l, r, op, id, len;  \n} q[maxn + 5]; \n\nbool cmpl(Query x, Query y) {\n    return x.l < y.l; \n}\n\nbool cmpr(Query x, Query y) {\n    return x.r < y.r; \n}\n\nbool cmpid(Query x, Query y) {\n    return x.id < y.id; \n}\n \nstruct matrix {\n    int a[2][2]; \n    matrix() {\n        memset(a, 0, sizeof(a)); \n    }\n    matrix operator * (const matrix &x) const {\n        matrix ret;\n        ret.a[0][0] = add(1ll * a[0][0] * x.a[0][0] % mod, 1ll * a[0][1] * x.a[1][0] % mod); \n        ret.a[0][1] = add(1ll * a[0][0] * x.a[0][1] % mod, 1ll * a[0][1] * x.a[1][1] % mod); \n        ret.a[1][0] = add(1ll * a[1][0] * x.a[0][0] % mod, 1ll * a[1][1] * x.a[1][0] % mod); \n        ret.a[1][1] = add(1ll * a[1][0] * x.a[0][1] % mod, 1ll * a[1][1] * x.a[1][1] % mod); \n        return ret; \n    }\n} dp[maxn + 5];\n\nstruct node {\n    int s; matrix x; \n    node() {\n        s = 1; \n        x.a[0][0] = x.a[1][1] = 1; \n        x.a[0][1] = x.a[1][0] = 0; \n    }\n    node operator + (const node &t) const {\n        node ret; \n        ret.s = 1ll * s * t.s % mod; \n        ret.x = x * t.x; \n        return ret;  \n    }\n} a[(maxn << 2) + 5]; \n\nvoid modify(int p, int l, int r, int pos, matrix x, int len, int op) {\n    if (op == -1) {\n        a[p].s = 1; \n        a[p].x.a[0][0] = a[p].x.a[1][1] = 1;\n        a[p].x.a[0][1] = a[p].x.a[1][0] = 0;  \n    }\n    if (l == r) {\n        if (op == -1) {\n            return ; \n        }\n        else {\n            a[p].s = 1ll * a[p].s * len % mod; \n            a[p].x = a[p].x * x; \n        }\n        return ; \n    }\n    int mid = (l + r) >> 1; \n    if (pos <= mid) modify(p + p, l, mid, pos, x, len, op); \n    else modify(p + p + 1, mid + 1, r, pos, x, len, op); \n    if (op == 1) {\n        a[p] = a[p + p] + a[p + p + 1]; \n    }\n}\n\nnode query(int p, int l, int r, int ql, int qr) {\n    if (l == ql && r == qr) return a[p]; \n    int mid = (l + r) >> 1; \n    if (qr <= mid) return query(p + p, l, mid, ql, qr); \n    if (mid < ql)  return query(p + p + 1, mid + 1, r, ql, qr); \n    return query(p + p, l, mid, ql, mid) + query(p + p + 1, mid + 1, r, mid + 1, qr); \n}\n\nvoid CDQ(int l, int r) {\n    if (l >= r) return ; \n    int mid = (l + r) >> 1; \n    CDQ(l, mid); CDQ(mid + 1, r); \n    sort(q + l, q + mid + 1, cmpl); \n    sort(q + mid + 1, q + r + 1, cmpl); \n    // ([)] \u8fb9\u754c\u4e25\u683c\n    int pos = l; \n    for (int i = mid + 1; i <= r; i++) {\n        while (pos <= mid && q[pos].l <= q[i].l) {\n            if (q[pos].op == 1) {\n                matrix t; \n                t.a[0][0] = q[pos].len - 1, t.a[0][1] = 1; \n                t.a[1][0] = 1, t.a[1][1] = q[pos].len - 1; \n                modify(1, 0, n, q[pos].r, t, q[pos].len, 1); \n            }\n            pos++; \n        }\n        if (q[i].op == 2 && q[i].l != 0) {\n            node t = query(1, 0, n, q[i].l, q[i].r - 1); \n            dp[q[i].id] = dp[q[i].id] * t.x; \n            if (q[i].id == 5) {\n                \n            }\n            fenmu[q[i].id] = 1ll * fenmu[q[i].id] * t.s % mod; \n        }\n    }\n    for (int i = l; i < pos; i++) {\n        if (q[i].op == 1) {\n            modify(1, 0, n, q[i].r, dp[0], q[i].len, -1); \n        }\n    }\n    pos = l; \n    for (int i = mid + 1; i <= r; i++) {\n        while (pos <= mid && q[pos].l <= q[i].l) {\n            if (q[pos].op == 1) {\n                matrix t; \n                t.a[0][0] = q[pos].len - 2, t.a[0][1] = 2; \n                t.a[1][0] = 2, t.a[1][1] = q[pos].len - 2; \n                modify(1, 0, n, q[pos].r, t, q[pos].len, 1); \n            }\n            pos++; \n        }\n        if (q[i].op == 2 && q[i].l) {\n            node t = query(1, 0, n, q[i].r, n); \n            dp[q[i].id] = dp[q[i].id] * t.x; \n\n            fenmu[q[i].id] = 1ll * fenmu[q[i].id] * t.s % mod; \n        }\n    }\n    for (int i = l; i < pos; i++) {\n        if (q[i].op == 1) {\n            modify(1, 0, n, q[i].r, dp[0], q[i].len, -1); \n        }\n    }\n    // [(]) \u8fb9\u754c\u4e25\u683c\n    sort(q + l, q + mid + 1, cmpr); \n    sort(q + mid + 1, q + r + 1, cmpr); \n    pos = mid; \n    for (int i = r; i >= mid + 1; i--) {\n        while (pos >= l && q[pos].r >= q[i].r) {\n            if (q[pos].op == 1) {\n                matrix t; \n                t.a[0][0] = q[pos].len - 1, t.a[0][1] = 1; \n                t.a[1][0] = 1, t.a[1][1] = q[pos].len - 1; \n                modify(1, 0, n, q[pos].l, t, q[pos].len, 1);\n            }\n            pos--; \n        }\n        if (q[i].op == 2 && q[i].l != 0) {\n            node t = query(1, 0, n, q[i].l + 1, q[i].r); \n            dp[q[i].id] = dp[q[i].id] * t.x; \n            fenmu[q[i].id] = 1ll * fenmu[q[i].id] * t.s % mod; \n        }\n    }\n    for (int i = pos + 1; i <= mid; i++) {\n        if (q[i].op == 1) {\n            modify(1, 0, n, q[i].l, dp[0], q[i].len, -1); \n        }\n    }\n    pos = mid; \n    for (int i = r; i >= mid + 1; i--) {\n        while (pos >= l && q[pos].r >= q[i].r) {\n            if (q[pos].op == 1) {\n                matrix t; \n                t.a[0][0] = 1, t.a[0][1] = q[pos].len - 1; \n                t.a[1][0] = q[pos].len - 1, t.a[1][1] = 1; \n                modify(1, 0, n, q[pos].l, t, q[pos].len, 1);\n            }\n            pos--; \n        }\n        if (q[i].op == 2 && q[i].l == 0) {\n            node t = query(1, 0, n, q[i].l + 1, q[i].r); \n            dp[q[i].id] = dp[q[i].id] * t.x; \n            fenmu[q[i].id] = 1ll * fenmu[q[i].id] * t.s % mod; \n        }\n    }\n    for (int i = pos + 1; i <= mid; i++) {\n        if (q[i].op == 1) {\n            modify(1, 0, n, q[i].l, dp[0], q[i].len, -1); \n        }\n    }\n}\n\nint main() {\n    scanf(\"%d %d\", &n, &m); \n    inv[1] = 1; \n    for (int i = 2; i <= n + 1; i++) {\n        inv[i] = 1ll * (mod - mod / i) * inv[mod % i] % mod;\n    }\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d %d %d\", &q[i].op, &q[i].l, &q[i].r);\n        if (q[i].op == 2) {\n            q[i].l = q[i].l - 1; \n        } \n        dp[i].a[0][0] = 1; dp[i].a[0][1] = 0; \n        fenmu[i] = 1; \n        q[i].id = i, q[i].len = q[i].r - q[i].l + 1; \n    }\n    CDQ(1, m); \n    sort(q + 1, q + m + 1, cmpid); \n    for (int i = 1; i <= m; i++) {\n        if (q[i].op == 2) {\n            int fz = dp[i].a[0][0];\n            int fm = fenmu[i], ans;\n            if (q[i].l == 0) {\n                int s1 = B[1].sum(q[i].r - 1); \n                int s2 = B[0].sum(n) - B[0].sum(q[i].r); \n                // cout << s1 << ' ' << s2 << '\\n'; \n                if ((s1 + s2) & 1) {\n                    fz = dp[i].a[0][1]; \n                }\n            }\n            ans = 1ll * fz * fpw(fm, mod - 2, mod) % mod; \n            printf(\"%d\\n\", ans); \n        }\n        else {\n            B[0].add(q[i].l, 1); \n            B[1].add(q[i].r, 1); \n        }\n    }\n    return 0; \n}\n```\n",
        "postTime": 1589766780,
        "uid": 54745,
        "name": "Gypsophila",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3688 \u3010[ZJOI2017]\u6811\u72b6\u6570\u7ec4\u3011"
    },
    {
        "content": "\u770b\u5230\u8fd8\u6ca1\u6709\u4eba\u5177\u4f53\u8bc1\u660e\u8fc7\uff0c\u4e3a\u4ec0\u4e48\u9898\u76ee\u4e2d\u63cf\u8ff0\u7684\u64cd\u4f5c\u662f\u6c42\u540e\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u6765\u7b80\u7565\u8bc1\u660ey\u4e00\u4e0b\uff1a\n\n\u8003\u8651\u5230\u6211\u4eec\u6709\u4e00\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u5728\u4f4d\u7f6e $a$ \u4e0a\u4fee\u6539\uff1b\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u5728 $b$ \u4f4d\u7f6e\u4e0a\u3002\n\n\u6211\u4eec\u5148\u5c06\u4e24\u4e2a\u64cd\u4f5c\u7684\u4ee3\u7801\u6446\u5728\u4e0b\u9762\uff1a\n\n```cpp\nvoid Mdf(int x) {\n    for (; x; x -= lowbit(x))\n        s[x] += 1;\n}\n\nint Qry(int x) {\n    int ret = 0;\n    for (; x <= n; x += lowbit(x))\n        ret += s[x];\n    return ret;\n}\n```\n\n\n\n1\u3001\u5f53 $a<b$ \u65f6\uff1a\n\n\u6211\u4eec\u8003\u8651\u4fee\u6539\u64cd\u4f5c\u4f1a\u6d89\u53ca\u5230\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5747 $\\leq a$ \uff0c\u800c\u67e5\u8be2\u64cd\u4f5c\u4e2d\u4f1a\u6d89\u53ca\u5230\u7684\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5747 $\\geq b$ \uff0c\u6240\u4ee5\u8fd9\u6b21\u4fee\u6539\u64cd\u4f5c\u4e0d\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u6b21\u67e5\u8be2\u64cd\u4f5c\u6709\u8d21\u732e\u3002\n\n2\u3001\u5f53 $a = b$ \u65f6\uff1a\n\n\u6b64\u65f6\u5fc5\u7136\u5728 $s[x]$ \u5904\u4fee\u6539\u64cd\u4f5c\u4f1a\u5bf9\u67e5\u8be2\u64cd\u4f5c\u6709\u8d21\u732e\u3002\n\n3\u3001\u5f53 $a>b$ \u65f6\uff1a\n\n\u6211\u4eec\u8003\u8651\u5b83\u4eec\u7684\u4e8c\u8fdb\u5236\u7684\u6837\u5b50\uff1a\n\n\n$$\n\\begin{aligned}\na:0110 \\dots 01x \\\\\nb:0110 \\dots 01y\n\\end{aligned}\n$$\n\n\u5047\u8bbe\u4e8c\u8fdb\u5236\u603b\u957f $M$ \uff0c\u5b83\u4eec\u524d\u9762\u6709k\u4f4d\u76f8\u540c $k \\in [0,M)$ \uff0c\u629b\u53bb$a$ \u548c $b$ \u524d $k$ \u4f4d\uff0c\u5269\u4e0b\u7684\u5206\u522b\u662f $x,y$ \uff0c\u56e0\u4e3a $a>b$\uff0c\u6240\u4ee5 $x$ \u7684\u7b2c\u4e00\u4f4d\u662f $1$ \uff0c$y$ \u7684\u7b2c\u4e00\u4f4d $0$\u3002\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u518d\u5206\u7c7b\u8ba8\u8bba\n\n+ 1\u3001\u5f53 $y$ \u5168\u662f\u96f6\u7684\u65f6\u5019\uff0c\u4e00\u76f4\u6267\u884c\u4fee\u6539\u64cd\u4f5c\u7684 $-=lowbit(x)$ \u6709\u4e00\u4e2a\u65f6\u523b\u4f1a\u628a $x$ \u5168\u53d8\u6210 $0$ \uff0c\u6b64\u65f6 $a,b$ \u76f8\u540c\uff0c\u800c\u4e14\u4e4b\u540e\u7684\u64cd\u4f5c $a$ \u4e0d\u4f1a\u53d8\u5927\uff0c$b$ \u4e0d\u4f1a\u53d8\u5c0f\uff0c\u6240\u4ee5\u5b83\u4eec\u5f53\u4e14\u4ec5\u5f53\u4f1a\u5728 $\\lfloor \\frac{x}{2^{M-k}} \\rfloor \\times 2^{M-k}$ \u8fd9\u4e00\u4e2a\u4f4d\u7f6e\u4ea7\u751f\u8d21\u732e\u3002\n+ 2\u3001\u5f53 $y$ \u4e0d\u5168\u662f\u96f6\u7684\u65f6\u5019\uff0c\u56e0\u4e3a $x>y$\uff0c\u800c\u4e14\u7b2c\u4e00\u4f4d\u5c31\u5df2\u7ecf\u4e0d\u540c\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u76f4\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u7684 $+=lowbit(x)$ \u76f4\u5230 $y$ \u7684\u7b2c\u4e00\u4f4d\u53d8\u6210 $1$ \uff0c\u6b64\u65f6 $y$ \u9664\u4e86\u7b2c\u4e00\u4f4d\u90fd\u662f $0$ \u3002\u518d\u4e00\u76f4\u6267\u884c\u4fee\u6539\u64cd\u4f5c\u7684 $-=lowbit(x)$ \u76f4\u5230 $x$ \u7684\u7b2c\u4e00\u4f4d\u4ee5\u5916\u90fd\u53d8\u6210 $0$ \u4e3a\u6b62\uff0c\u6b64\u65f6 $x=y$\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d $x$ \u4e00\u76f4\u51cf\u5c0f\uff0c$y$ \u4e00\u76f4\u589e\u5927\uff0c\u6240\u4ee5\u5728\u6267\u884c\u64cd\u4f5c\u7684\u8fc7\u7a0b\u4e2d\u4e00\u76f4\u6709 $a>b$ \uff0c\u540c\u7406\u4e4b\u540e\u518d\u4e00\u76f4\u8fdb\u884c\u64cd\u4f5c\u4f1a\u4e00\u76f4\u6709 $a<b$\uff0c\u6240\u4ee5\u6b64\u65f6\u5b83\u4eec\u5f53\u4e14\u4ec5\u5f53\u4f1a\u5728$\\lfloor \\frac{x}{2^{M-k-1}} \\rfloor \\times 2^{M-k-1}$ \u8fd9\u4e00\u4e2a\u4f4d\u7f6e\u4ea7\u751f\u8d21\u732e\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u8bc1\u660e\u4e86\u5f53\u4e14\u4ec5\u5f53\u4fee\u6539\u64cd\u4f5c\u7684\u4f4d\u7f6e $\\ge$ \u67e5\u8be2\u64cd\u4f5c\u7684\u4f4d\u7f6e\u662f\u624d\u4f1a\u5bf9\u67e5\u8be2\u64cd\u4f5c\u4ea7\u751f\u8d21\u732e\u3002\n\n\u4e4b\u540e\u5c31\u53ea\u5269\u4e0b\u6811\u5957\u6811\u7ef4\u62a4\u4e24\u70b9\u4e4b\u95f4\u540c\u65f6\u5b58\u5728\u7684\u6982\u7387\uff0c\u548c\u559c\u95fb\u4e50\u89c1\u7684\u5361\u5e38\u73af\u8282\u4e86\u3002QAQ\n\n",
        "postTime": 1615204565,
        "uid": 111892,
        "name": "Cherished",
        "ccfLevel": 9,
        "title": "[ZJOI2017] \u6811\u72b6\u6570\u7ec4"
    },
    {
        "content": "\u4f5c\u8005\u505a\u8fc7\u65f6\u95f4\u8de8\u5ea6\u6700\u957f\u7684\u9898...\n\n\u7136\u800c\u6700\u7ec8\u8fd8\u662f\u88ab\u5361\u5e38\u4e86\uff0c88 pts \u662f\u6781\u9650\u4e86...\n\n\u8fd9\u7bc7\u9898\u89e3\u4f1a\u8bb2\u8ff0\u5e38\u89c1\u7684\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u89e3\u6cd5\uff0c\u4e0e**\u4e00\u79cd**\u5927\u6982\u6bd4\u8f83\u53e6\u7c7b\u7684 CDQ \u5206\u6cbb\u89e3\u6cd5\u3002\n\n---\n\n## \u9898\u76ee\u89e3\u8bfb\n\n\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u5199\u53cd\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u901a\u8fc7\u5b9e\u8df5\u53d1\u73b0\u5b83\u6b63\u786e\u5730\u5b9e\u73b0\u4e86\u5355\u70b9\u52a0\uff0c\u6c42\u540e\u7f00\u548c\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u8bb0\u540e\u7f00\u548c\u4e3a $\\{P_i\\}_{i=0}^n$\uff0c\u5219\u53d1\u73b0\u6211\u4eec\u9700\u8981\u6c42\u7684\u662f $P_l - P_{r+1}$\uff0c\u4f46\u662f\u6c42\u51fa\u4e86 $P_r - P_{l-1} = P_{l-1} - P_r$ \uff08\u5728 $\\pmod 2$ \u610f\u4e49\u4e0b\uff09\u3002\n\n\u6240\u4ee5\u95ee\u7b54\u6848\u6b63\u786e\u7684\u6982\u7387\uff0c\u5373\u4e3a $A_{l-1} = A_r$ \u7684\u6982\u7387\u3002\n\n---\n\n## \u5927\u4f53\u5206\u6790\n\n\u5c06\u7b54\u6848\u8868\u793a\u4e3a\u4e8c\u5143\u7ec4 $(i,j)$\uff0c$i,j\\in[1,n]$\uff0c\u5e76\u8003\u8651\u4e00\u4e2a\u4fee\u6539 $[l,r]$ \u5bf9\u4e00\u4e9b\u7b54\u6848\u7684\u5f71\u54cd\u3002\n\n\u8bb0 $\\dfrac1{r - l + 1} = p$\u3002\n\n1. \u5f53 $[l,r]\\cap[i,j] = \\varnothing$ \u65f6\u4e0d\u5f71\u54cd\uff1b\n2. \u5f53 $i\\in[1,l-1],j\\in[l,r]$ \u6216 $i\\in[l,r],j\\in[r+1,n]$ \u65f6\uff0c\u6709 $1-p$ \u7684\u6982\u7387\u4e0d\u5f71\u54cd\u3002\n3. \u5f53 $i,j\\in[l,r]$ \u65f6\uff0c\u6709 $1-2p$ \u7684\u6982\u7387\u4e0d\u5f71\u54cd\u3002\n\n\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff1a$i = 1$\u3002\u6b64\u65f6\u6c42\u7684\u662f $j$ \u7684\u524d\u7f00\u7b49\u4e8e\u540e\u7f00\u7684\u6982\u7387\u3002\n\n\u5728 $i$ \u7684\u4e00\u7ef4\u4e0a\u989d\u5916\u6dfb\u52a0 $0$ \u70b9\u7ef4\u62a4\u8be5\u60c5\u51b5\uff08\u5982\u679c\u8be5\u7ef4\u662f\u6811\u72b6\u6570\u7ec4\uff0c\u9700\u8981\u5e73\u79fb\u4e00\u4f4d\uff09\uff1a\n\n1. $j\\in[1,l-1]$ \u6216 $j\\in[r+1,n]$\uff0c\u4e00\u5b9a\u4f1a\u5f71\u54cd\uff0c\u5373\u6709 $0$ \u7684\u6982\u7387\u4e0d\u5f71\u54cd\uff1b\n2. $j\\in[l,r]$\uff0c\u6709 $p$ \u7684\u6982\u7387\u4e0d\u5f71\u54cd\uff08\u4fee\u6539\u5728 $j$ \u70b9\u4e0a\uff09\u3002\n\n\u53e6\u5916\uff0c\u5bf9\u4e8e\u7ef4\u62a4\u597d\u7684 $(i,j)$ \u7b54\u6848\u4e3a $p$\uff0c\u5f53\u524d\u4fee\u6539\u5bf9\u5176\u4e0d\u5f71\u54cd\u7684\u6982\u7387\u662f $q$\uff0c\u5219\u65b0\u7684\u6982\u7387\u8bb0\u4e3a $p*q$\uff1a\n\n$$ p*q = pq + (1-p)(1-q) $$\n\n\u5373\u6b63\u786e\u7b54\u6848\u4e14\u4e0d\u4fee\u6539\u6216\u9519\u8bef\u7b54\u6848\u4e14\u4fee\u6539\u90fd\u53ef\u4ee5\u3002\n\n---\n\n## \u4e8c\u7ef4\u7ebf\u6bb5\u6811\n\n\u5bb9\u6613\u53d1\u73b0\uff0c$*$ \u8fd0\u7b97\u5177\u6709\u7ed3\u5408\u5f8b\u3002\n\n\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u7b54\u6848 $(i,j)$\uff0c\u4fee\u6539\u4e00\u4e2a\u77e9\u5f62\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u67e5\u8be2\u53ea\u6709\u5355\u70b9\u7684\uff0c\u6240\u4ee5\u5728\u5185\u5916\u5c42\u7ebf\u6bb5\u6811\u4e0a\u53ea\u9700\u6c38\u4e45\u6807\u8bb0\u6240\u6709\u4fee\u6539\u7684\u5f71\u54cd\u5373\u53ef\u3002\n\n\u65f6\u95f4\u3001\u7a7a\u95f4 $\\mathcal O(n\\log^2n)$\u3002\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nconst int N = 100001;\nconst int LOGN = 17;\nconst int NODE = N * LOGN * LOGN;\nconst int p = 998244353;\n\ninline int read() {\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(ch > '9' || ch < '0') { if(ch == '-') f = -1; ch = getchar(); }\n\tdo x = x * 10 + ch - 48, ch = getchar(); while(ch >= '0' && ch <= '9');\n\treturn x * f;\n}\n\ninline int fastpow(int a,int b) {\n\tint res = 1;\n\twhile(b) {\n\t\tif(b & 1) res = 1ll * res * a % p;\n\t\ta = 1ll * a * a % p;\n\t\tb >>= 1;\n\t}\n\treturn res; \n}\n\nint n,m,rt[N << 2];\nint lc[NODE],rc[NODE],cnt;\nint s[NODE];\n\n#define lc(k) k << 1\n#define rc(k) k << 1 | 1\n\nint Calc(int a,int b) {\n\treturn (1ll * a * b % p + 1ll * (p - a + 1) * (p - b + 1) % p) % p;\n}\n\nvoid Modify(int &k,int l,int r,int x,int y,int t) {\n\tif(!k) k = ++cnt, s[k] = 1;\n\tif(l >= x && r <= y) return void(s[k] = Calc(s[k],t));\n\tint m = (l + r) >> 1;\n\tif(x <= m) Modify(lc[k],l,m,x,y,t);\n\tif(y > m) Modify(rc[k],m + 1,r,x,y,t);\n\treturn;\n}\n\nvoid Update(int k,int l,int r,int lx,int rx,int ly,int ry,int t) {\n\tif(l >= lx && r <= rx) return Modify(rt[k],1,n,ly,ry,t);\n\tint m = (l + r) >> 1;\n\tif(lx <= m) Update(lc(k),l,m,lx,rx,ly,ry,t);\n\tif(rx > m) Update(rc(k),m + 1,r,lx,rx,ly,ry,t);\n}\n\nint Sum(int k,int l,int r,int x) {\n\tif(!k) return 1;\n\tif(l == r) return s[k];\n\tint m = (l + r) >> 1;\n\tif(x <= m) return Calc(s[k],!lc[k] ? 1 : Sum(lc[k],l,m,x));\n\telse return Calc(s[k],!rc[k] ? 1 : Sum(rc[k],m + 1,r,x));\n}\n\nint Query(int k,int l,int r,int x,int y) {\n\tif(l == r) return Sum(rt[k],1,n,y);\n\tint m = (l + r) >> 1;\n\tif(x <= m) return Calc(Sum(rt[k],1,n,y),Query(lc(k),l,m,x,y));\n\telse return Calc(Sum(rt[k],1,n,y),Query(rc(k),m + 1,r,x,y));\n}\n\nint main() {\n\tn = read(), m = read();\n\tint op,l,r,t;\n\twhile(m--) {\n\t\top = read(), l = read(), r = read();\n\t\tif(op == 1) {\n\t\t\tt = fastpow(r - l + 1,p - 2);\n\t\t\tif(l > 1) Update(1,0,n,1,l - 1,l,r,p - t + 1), Update(1,0,n,0,0,1,l - 1,0);\n\t\t\tif(r < n) Update(1,0,n,l,r,r + 1,n,p - t + 1), Update(1,0,n,0,0,r + 1,n,0);\n\t\t\tUpdate(1,0,n,l,r,l,r,p - 2 * t % p + 1), Update(1,0,n,0,0,l,r,t);\n\t\t} else std::printf(\"%d\\n\",Query(1,0,n,l - 1,r));\n\t}\n\treturn 0;\n}\n```\n\n---\n\n## CDQ \u5206\u6cbb\n\n\u77e9\u5f62\u8fd0\u7b97\uff0c\u5355\u70b9\u6c42\u503c\uff0c\u53ef\u4ee5\u60f3\u5230\u7528 CDQ \u5206\u6cbb\u505a\u3002\u5176\u5b9e\u5c31\u662f\u4e09\u7ef4\u504f\u5e8f\u3002\n\n\u5177\u4f53\u5730\uff0c\u628a\u77e9\u5f62\u5728\u67d0\u4e00\u7ef4\u4e0a\u62c6\u6210\u4e24\u4e2a\u7ebf\u6bb5\uff0c\u6240\u6709\u8be2\u95ee\u6309\u65f6\u95f4\u6392\u653e\u540e\u5206\u6cbb\uff0c\u6309\u7167\u8be5\u7ef4\u5927\u5c0f\u5f52\u5e76\uff0c\u5e76\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6700\u540e\u4e00\u7ef4\u7684\u4fe1\u606f\uff0c\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4ec5\u4ec5\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u5df2\u7ecf\u638c\u63e1\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\u3002\n\n\u4f46\u662f\u548c\u5728\u7ebf\u505a\u6cd5\u4e0d\u540c\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u9700\u8981\u4e00\u4e2a\u53ef\u5dee\u5206\u7684\u4fe1\u606f\u3002\n\n\u56de\u987e\u4e00\u4e9b\u4e1c\u897f\uff1a$x*y = xy+(1-x)(1-y)$ \u662f\u6211\u4eec\u8981\u652f\u6301\u7684\u4e8c\u5143\u8fd0\u7b97\u3002\n\n\u8be5\u8fd0\u7b97\u6709\u5355\u4f4d\u5143 $1$\u3002\n\n\u8003\u8651\u9006\u5143\uff1a$x*y=1$\uff0c\u5219 $y = \\dfrac x{2x-1}$\u3002\n\n\u8fd9\u6837\u76f4\u63a5\u5199\u7684\u8bdd\uff0c\u6837\u4f8b\u80fd\u8fc7\uff0c\u4f46\u662f\u5bf9\u4e8e\n\n```\n2 3\n1 1 2\n1 2 2\n2 2 2\n```\n\n\u8f93\u51fa\u5e94\u4e3a $1$\uff0c\u4f46\u662f\u8fd9\u6837\u5199\u51fa\u6765\u662f $499122177$ \u5373 $\\dfrac 12$\u3002\n\n\u63a2\u8ba8\u540e\u53d1\u73b0\uff0c\u6211\u4eec\u60f3\u5f53\u7136\u4e3a\u8ba4\u4e3a\u6bcf\u4e2a\u6570\u5b58\u5728\u552f\u4e00\u7684\u9006\u5143\uff0c\u4f46\u662f\u5bf9\u4e8e $1/2$ \u5176\u5b9e\u662f\u65e0\u9006\u5143\u7684\uff0c\u540c\u65f6\uff0c\u5bf9\u4e8e\u8be5\u8fd0\u7b97\u4efb\u4f55\u6570 $*1/2$ \u90fd\u662f $1/2$\u3002\n\n\u7c7b\u6bd4 $1/2$ \u4e0e\u666e\u901a\u4e58\u6cd5\u4e2d $0$ \u7684\u4f5c\u7528\uff0c\u8bf7\u7406\u89e3\u6b64\u65f6\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u7684\u5b9e\u9645\u4f5c\u7528\uff1a\n\n\u5728\u652f\u6301\u666e\u901a $*$ \u8fd0\u7b97\u540c\u65f6\uff0c\u652f\u6301 $*1/2$ \u5f3a\u5236\u5c06\u6570\u8f6c\u4e3a $1/2$\uff0c\u5e76\u652f\u6301 $*(1/2)^{-1}$ \uff08\u6b64\u5904\u7684\u9006\u5143\u662f $*$ \u610f\u4e49\u4e0b\u7684\uff09\uff0c\u4e14\u7b49\u91cf\u7684 $1/2$ \u4e0e $(1/2)^{-1}$ \u53ef\u4ee5\u62b5\u6d88\u3002\n\n~~\u5bb9\u6613\u60f3\u5230~~\u5bf9\u6bcf\u4e2a\u6570\u7ef4\u62a4\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(x,y)$ \u8868\u793a\u5f53\u524d\u7684\u6570\u662f $x*(1/2)^y$\u3002\n\n\u5219\uff1a\n\n$$(x_1,y_1)*(x_2,y_2)=(x_1*x_2,y_1+y_2)$$\n\n$$(x_1,y_1)^{-1}=(x_1^{-1},-y_1)$$\n\n\u6700\u540e\u8f93\u51fa\u771f\u5b9e\u503c\uff0c\u56e0\u4e3a\u6240\u6709\u7684 $(1/2)^{-1}$ \u4e00\u5b9a\u88ab\u64a4\u6d88\u4e86\uff0c\u6700\u540e\u7684\u7ed3\u679c\u4e2d\u5982\u679c $y > 0$ \u5219\u4e3a $1/2$\uff1b\u5426\u5219\u4e3a $x$\u3002\n\n\u6709\u4e00\u70b9\u6ce8\u610f\uff0c\u5c31\u662f\u9700\u4fdd\u8bc1 $x$ \u4e0d\u662f $(1/2)^k$\uff0c\u9700\u8981\u6bcf\u6b21\u8fd0\u7b97\u3001\u6c42\u9006\u65f6\u68c0\u9a8c\u5e76\u628a $1/2$ \u8f6c\u79fb\u5230 $y$ \u4e0a\u3002\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e86\u3002\n\n~~\u4f46\u662f\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u80fd\u8fc7\u7684\u70b9 CDQ \u53cd\u800c\u8fc7\u4e0d\u4e86\u4e86~~\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nconst int N = 100001;\nconst int OPT = N * 12;\nconst int p = 998244353;\nconst int half = 499122177;\n\ninline int read() {\n\tint x = 0, f = 1; char ch = getchar();\n\twhile(ch > '9' || ch < '0') { if(ch == '-') f = -1; ch = getchar(); }\n\tdo x = x * 10 + ch - 48, ch = getchar(); while(ch >= '0' && ch <= '9');\n\treturn x * f;\n}\n\ninline void print(int x) {\n\tif(x > 9) print(x / 10);\n\tstd::putchar(x % 10 + 48);\n}\n\ninline int fastpow(int a,int b) {\n\tint res = 1;\n\twhile(b) {\n\t\tif(b & 1) res = 1ll * res * a % p;\n\t\ta = 1ll * a * a % p;\n\t\tb >>= 1;\n\t}\n\treturn res;\n}\n\ninline int inv(int x) { return 1ll * x * fastpow(2 * x % p - 1,p - 2) % p; }\ninline int f(int x,int y) { return (1ll * x * y % p + 1ll * (1 - x + p) * (1 - y + p) % p) % p; }\nstruct Number {\n\tint x,y;\n\tNumber(int _x = 1,int _y = 0) : x(_x), y(_y) {}\n\tvoid Set() { if(x == half) x = 1, ++y; }\n\tfriend Number operator *(Number x,Number y) {\n\t\tx.Set(), y.Set();\n\t\treturn Number(f(x.x,y.x),x.y + y.y);\n\t}\n\tfriend Number operator *(const int x,Number y) {\n\t\treturn Number(1ll * x * y.x % p);\n\t}\n\tfriend Number operator -(const int x,Number y) {\n\t\treturn Number((p - y.x + x) % p);\n\t}\n\tNumber Inv() {\n\t\treturn Set(), Number(inv(x),-y);\n\t}\n\tint Real() { return y > 0 ? half : x; }\n};\n\nint n,m; Number fn[N + 5],ans[N];\ninline void Add(int l,int r,Number t) {\n\tfor(l++;l <= n + 2;l += l & (-l)) fn[l] = fn[l] * t;\n\tNumber _t = t.Inv();\n\tfor(r+=2;r <= n + 2;r += r & (-r)) fn[r] = fn[r] * _t;\n}\ninline Number Sum(int x) {\n\tNumber res;\n\tfor(x++;x;x -= x & (-x)) res = res * fn[x];\n\treturn res;\n}\nstruct Node {\n\tint tp,x,l,r; Number t;\n\tNode() {}\n\tNode(int _tp,int _x,int _l,int _r,Number _t) :\n\t\ttp(_tp), x(_x), l(_l), r(_r), t(_t) {}\n} a[OPT],a1[OPT]; int t;\n\nbool leq(const Node &x,const Node &y) {\n\tif(x.x != y.x) return x.x < y.x;\n\treturn x.tp < y.tp;\n}\n\nvoid Solve(int l,int r) {\n\tif(l == r) return;\n\tint m = (l + r) >> 1;\n\tSolve(l,m), Solve(m + 1,r);\n\tint i = l, j = m + 1, c = 0;\n\twhile(i <= m && j <= r) if(leq(a[i],a[j])) {\n\t\tif(a[i].tp == 1) Add(a[i].l,a[i].r,a[i].t);\n\t\ta1[++c] = a[i++];\n\t} else {\n\t\tif(a[j].tp == 2) ans[a[j].l] = ans[a[j].l] * Sum(a[j].r);\n\t\ta1[++c] = a[j++];\n\t} while(i <= m) {\n\t\tif(a[i].tp == 1) Add(a[i].l,a[i].r,a[i].t);\n\t\ta1[++c] = a[i++];\n\t} while(j <= r) {\n\t\tif(a[j].tp == 2) ans[a[j].l] = ans[a[j].l] * Sum(a[j].r);\n\t\ta1[++c] = a[j++];\n\t}\n\tfor(int i = l;i <= m;i++) if(a[i].tp == 1) Add(a[i].l,a[i].r,a[i].t.Inv());\n\tfor(int i = l;i <= r;i++) a[i] = a1[i - l + 1];\n\treturn;\n}\n\nint main() {\n\tn = read(), m = read(); int qt = 0;\n\tfor(int i = 1,op,l,r;i <= m;i++) {\n\t\top = read(), l = read(), r = read();\n\t\tif(op == 1) {\n\t\t\tNumber q(fastpow(r - l + 1,p - 2));\n\t\t\tif(l > 1) {\n\t\t\t\ta[++t] = Node(1,1,l,r,1-q), a[++t] = Node(1,l,l,r,(1-q).Inv());\n\t\t\t\ta[++t] = Node(1,0,1,l - 1,Number(0)), a[++t] = Node(1,1,1,l - 1,Number(0));\n\t\t\t} if(r < n) {\n\t\t\t\ta[++t] = Node(1,l,r + 1,n,1-q), a[++t] = Node(1,r + 1,r + 1,n,(1-q).Inv());\n\t\t\t\ta[++t] = Node(1,0,r + 1,n,Number(0)), a[++t] = Node(1,1,r + 1,n,Number(0));\n\t\t\t}\n\t\t\ta[++t] = Node(1,l,l,r,1-2*q), a[++t] = Node(1,r + 1,l,r,(1-2*q).Inv());\n\t\t\ta[++t] = Node(1,0,l,r,q), a[++t] = Node(1,1,l,r,q.Inv());\n\t\t} else a[++t] = Node(2,l - 1,++qt,r,Number());\n\t}\n\tSolve(1,t);\n\tfor(int i = 1;i <= qt;i++) print(ans[i].Real()), std::putchar('\\n');\n\treturn 0;\n}\ncpp\n```",
        "postTime": 1601039930,
        "uid": 219595,
        "name": "Vocalise",
        "ccfLevel": 9,
        "title": "\u4e09\u7ef4\u504f\u5e8f---\u9898\u89e3 P3688 \u3010[ZJOI2017]\u6811\u72b6\u6570\u7ec4\u3011"
    },
    {
        "content": "[\u9898\u9762](https://www.luogu.com.cn/problem/P3688)\n\n~~\u7531\u9898\u76ee\u6807\u9898\u5f97\u6b63\u89e3\u80af\u5b9a\u4e0d\u662f\u6811\u72b6\u6570\u7ec4~~\n\n\u624b\u6478\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u53ef\u601c\u7684\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u662f\u540e\u7f00\u548c\uff0c\u518d\u52a0\u4e0a\u5bf9 2 \u53d6\u6a21\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5f97\u51fa\u53ef\u601c\u6240\u6c42\u51fa\u7684\u662f $[l-1,r-1]$ \u7684\u533a\u95f4\u548c\u3002\n\n\u90a3\u4e48\u7b54\u6848\u6b63\u786e\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f $a_{l-1} = a_{r} $\u3002\n\n\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5e73\u9762\u5185\u70b9\u5bf9 $(x,y)$\uff0c\u8868\u793a $a_x$ \u4e0e $a_y$ \u76f8\u7b49\u7684\u6982\u7387\u3002\n\n\u663e\u7136\u53ea\u9700\u8981\u7ef4\u62a4 $x \\le y$ \u7684\u90e8\u5206\u3002\uff08\u5176\u5b9e $x\\ge y$ \u7684\u90e8\u5206\u4e5f\u53ef\u4ee5\u7ef4\u62a4\uff0c\u53ea\u662f\u67e5\u8be2\u65f6\u7528\u4e0d\u5230\uff09\n\n\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u4fee\u6539 $[l,r]$\uff0c\u53ef\u4ee5\u770b\u505a\u628a\u6574\u4e2a\u5e73\u9762\u5206\u6210\u4e86 9 \u4efd\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dhoikmy9.png)\n\n\u5176\u4e2d\u56db\u6761\u7ebf\u5206\u522b\u4e3a $x=l$\uff0c$x=r$\uff0c$y=l$\uff0c$y=r$\u3002\n\n\u5176\u4e2d 6\u30018\u30019 \u4e09\u4e2a\u5757 $x \\ge y$\uff0c\u4e0d\u9700\u8981\u7ef4\u62a4\u3002\n\n\u800c 1\u30013\u30017 \u4e09\u4e2a\u5757\u4e0d\u4f1a\u53d7\u5230\u8fd9\u6b21\u4fee\u6539\u7684\u5f71\u54cd\u3002\uff08\u5de6\u53f3\u7aef\u70b9\u90fd\u6ca1\u6709\u88ab $[l,r]$ \u8986\u76d6\uff09\n\n\u8bbe $len=r-l+1$\u3002\n\n\u800c 2\u30014 \u4e24\u4e2a\u5757\u5185\u7684\u70b9\u5bf9\u6ee1\u8db3\u5176\u4e2d\u4e00\u4e2a\u70b9\u5728 $[l,r]$ \u4e2d\uff0c\u6709 $\\frac{1}{len}$ \u7684\u6982\u7387\u88ab\u4fee\u6539\u5bfc\u81f4\u4e24\u9879\u4e0d\u7b49\u3002\n\n5 \u5757\u5185\u70b9\u5bf9\u4e2d\u7684\u4e24\u4e2a\u70b9\u90fd\u5728 $[l,r]$ \u4e2d\uff0c\u6709 $\\frac{2}{len}$ \u7684\u6982\u7387\u4e24\u4e2a\u70b9\u4e2d\u7684\u4e00\u4e2a\u88ab\u4fee\u6539\u800c\u5bfc\u81f4\u4e24\u9879\u4e0d\u7b49\u3002\n\n\u8003\u8651\u6982\u7387\u7684\u5408\u5e76\u95ee\u9898\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u5bf9 $(x,y)$ \u5148\u6709 $p$ \u7684\u6982\u7387\u76f8\u7b49\uff0c\u518d\u6709 $q$ \u7684\u6982\u7387\u76f8\u7b49\uff0c\u90a3\u4e48\u603b\u7684\u76f8\u7b49\u7684\u6982\u7387\u5c31\u662f $pq+(1-p)(1-q)$\u3002\n\n1. \u4e0d\u7b49\u7684\u60c5\u51b5\u53ea\u6709 $(1,0)$ \u548c $(0,1)$ \u4e24\u79cd\uff0c\u5982\u679c\u518d\u6765\u4e00\u6b21\u4e0d\u7b49\u4fee\u6539\u5c31\u4f1a\u6539\u56de\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u201c\u8d1f\u8d1f\u5f97\u6b63\u201d\u4e24\u6b21\u4e0d\u7b49\u4f1a\u5bfc\u56de\u76f8\u7b49\u3002\n\n2. \u8fd9\u4e5f\u7b97\u662f\u8bc1\u660e\u4e86\u6982\u7387\u5408\u5e76\u8fd9\u4e2a\u64cd\u4f5c\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u3002\uff08\u5177\u4f53\u8bc1\u660e\u5efa\u8bae\u81ea\u5df1\u624b\u6478\u4e00\u4e0b\uff09\n\n\u8fd8\u6709\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u7b2c\u4e8c\u7ef4\u8981\u52a8\u6001\u5f00\u70b9\uff0c\u56e0\u4e3a\u662f\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u8981\u6807\u8bb0\u6c38\u4e45\u5316\u3002\n\n\u6700\u540e\u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u8fd4\u56de\u9898\u76ee\u53ef\u4ee5\u770b\u5230\u9898\u4e2d\u7684 query \u51fd\u6570\u6709\u4e00\u4e2a $x=0$ \u8fd4\u56de 0 \u7684\u7279\u5224\uff0c\u8fd9\u4f7f\u5f97\u5f53 $l=1$ \u65f6\u6b63\u786e\u7b54\u6848\u662f $[1,r]$ \u7684\u533a\u95f4\u548c\u800c\u53ef\u601c\u6c42\u51fa\u7684\u662f $[r,n]$ \u7684\u533a\u95f4\u548c\uff0c\u6240\u4ee5\u53ef\u4ee5\u5355\u72ec\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\u8bb0\u5f55\u4e00\u4e2a\u8282\u70b9 $i$ \u7684\u524d\u7f00\u548c\u540e\u7f00\u548c\u662f\u5426\u76f8\u7b49\u3002\n\n\u5bf9\u4e8e\u4e00\u6b21\u4fee\u6539 $(l,r)$\uff1a\n\n\u5982\u679c $i \\le l $ \u6216 $i \\ge r$\uff0c\u90a3\u4e48\u524d\u7f00\u540e\u7f00\u80af\u5b9a\u4e0d\u7b49\u3002\n\n\u5982\u679c $ l \\le i \\le r$\uff0c\u90a3\u4e48\u6709 $\\frac{len-1}{len}$ \u7684\u6982\u7387\u524d\u7f00\u540e\u7f00\u4e0d\u7b49\u3002\n \n~~\u82b1\u4e86\u597d\u4e45\u65f6\u95f4\u624d\u5f04\u61c2\u8fd9\u9898\uff0c\u5e0c\u671b\u80fd\u7ed9\u4f60\u4e9b\u5e2e\u52a9\u3002~~\n\n[CODE](https://www.luogu.com.cn/paste/t9vmrghe) ",
        "postTime": 1616745845,
        "uid": 63743,
        "name": "DrBit",
        "ccfLevel": 6,
        "title": "P3688 [ZJOI2017] \u6811\u72b6\u6570\u7ec4 \uff08\u6982\u7387+\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "\u4e22\u4e2a[\u535a\u5ba2](https://www.zgz233.xyz/2017/12/05/bzoj-4785-zjoi2017%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/ \"\u535a\u5ba2\")\u94fe\u63a5\n\n\u9898\u610f\uff1a\u4e00\u4e2a\u4eba\u7684\u6811\u72b6\u6570\u7ec4\u5199\u9519\u4e86\uff0c\u5177\u4f53\u9519\u5728\u5c06\u4fee\u6539\u64cd\u4f5c\u548c\u67e5\u8be2\u64cd\u4f5c\u8df3 $lowbit$ \u7684\u987a\u5e8f\u5199\u53cd\u4e86\uff0c\u652f\u6301\u533a\u95f4\u5185\u968f\u673a\u5355\u70b9\u53d6\u53cd\uff0c\u533a\u95f4\u5f02\u6216\u548c\u67e5\u8be2\uff0c\u8be2\u95ee\u8fd9\u4e2a\u4eba\u7684\u7b54\u6848\u6ca1\u9519\u7684\u6982\u7387\u3002\n\n\n\u5982\u679c\u719f\u6089\u6811\u72b6\u6570\u7ec4\u6216\u8005\u6253\u4e00\u4e0b\u8868\u53ef\u4ee5\u7b80\u5355\u7684\u53d1\u73b0\u8fd9\u4e2a\u4eba\u5199\u9519\u7684\u540e\u679c\u5c31\u662f\u67e5\u8be2\u662f\u540e\u7f00\u548c\u4e0d\u662f\u524d\u7f00\u548c\u4e86\u3002\n\n\n\u90a3\u4e48\u4ed6\u7684\u7b54\u6848\u4f1a\u9519\u5f53\u4e14\u4ec5\u5f53 $l-1$ \u548c $r$ \u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u88ab\u4fee\u6539\u7684\u6b21\u6570\u5728\u6a21 $2$ \u7684\u610f\u4e49\u4e0b\u4e0d\u540c\u3002\u5c06\u5e73\u9762\u4e0a\u7684\u70b9 $(l,r)$ \u89c6\u4f5c\u5e8f\u5217\u4e0a\u7684 $l$ \u548c $r$ \u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4fee\u6539\u6b21\u6570\u5728\u6a21 $2$ \u610f\u4e49\u4e0b\u76f8\u540c\u7684\u6982\u7387\u3002\n\n\n\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff0c\u5b9e\u9645\u4e0a\u662f\u4e09\u4e2a\u77e9\u5f62\u8986\u76d6\u3002\u6982\u7387\u53ef\u4ee5\u7b80\u5355\u5408\u5e76\uff0c\u5373\u5206\u522b\u8ba8\u8bba\u90fd\u53d8\u548c\u90fd\u4e0d\u53d8\u7684\u60c5\u51b5\u5373\u53ef\uff0c\u6240\u4ee5\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u4e2a\u4fee\u6539\u3002\n\n\n\u5982\u679c\u53ea\u89c2\u5bdf\u5230\u8fd9\u91cc\u5c31\u6b7b\u5b9a\u4e86\uff0c\u6811\u72b6\u6570\u7ec4\u5982\u679c\u8bbf\u95ee\u4e86 $0$ \u4e0b\u6807\u4f1a\u70b8\uff0c\u6240\u4ee5\u89c2\u5bdf\u4f2a\u4ee3\u7801\uff0c\u53d1\u73b0\u8bbf\u95ee $0$ \u4e0b\u6807\u7684\u65f6\u5019\u8fd4\u56de\u4e86 $0$\uff0c\u4e0d\u53ef\u4ee5\u7b80\u5355\u5957\u7528\u4e0a\u8ff0\u505a\u6cd5\uff0c\u5355\u72ec\u7ef4\u62a4\u4e0b\u5c31\u597d\u4e86\u3002\n\n\n\u4e8c\u7ef4\u7ebf\u6bb5\u6811\u7684\u8bdd\u5916\u5c42\u53ea\u9700\u8981\u7ef4\u62a4\u4e0a\u4f20\u6807\u8bb0\u5373\u53ef\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5185\u5c42\u4e5f\u5199\u4e86\u6807\u8bb0\u6c38\u4e45\u5316\uff0c\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u3002\n\n\n    \n    \n    \n    \n    \n```cpp\n    #include <cmath>\n    #include <queue>\n    #include <cstdio>\n    #include <iomanip>\n    #include <cstdlib>\n    #include <cstring>\n    #include <iostream>\n    #include <algorithm>\n    #define N 100010\n    #define ll long long\n    #define mod 998244353\n    using namespace std;\n    char xB[1<<15],*xS=xB,*xT=xB;\n    #define getchar() (xS==xT&&(xT=(xS=xB)+fread(xB,1,1<<15,stdin),xS==xT)?0:*xS++)\n    inline int read()\n    {\n        int x=0,f=1;char ch=getchar();\n        while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n        while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n        return x*f;\n    }\n    ll quickmod(ll a,ll b)\n    {\n        ll ret=1;\n        while(b)\n        {\n            if(b&1)ret=ret*a%mod;\n            a=a*a%mod,b>>=1;\n        }\n        return ret;\n    }\n    ll merge(ll a,ll b)\n    {return (a*b%mod+(1-a+mod)*(1-b+mod)%mod)%mod;}\n    ll p[N<<8];\n    int ch[N<<8][2],tot;\n    int root[N<<2];\n    int n,m;\n    struct ins_seg\n    {\n        void modify(int &x,int l,int r,int L,int R,ll v)\n        {\n            if(!x)x=++tot,p[x]=1;\n            if(l>=L&&r<=R)\n            {\n                p[x]=merge(p[x],v);\n                return ;\n            }\n            int mid=(l+r)>>1;\n            if(L<=mid) modify(ch[x][0],l,mid,L,R,v);\n            if(R>mid)  modify(ch[x][1],mid+1,r,L,R,v);\n        }\n        ll ask(int x,int l,int r,int pos)\n        {\n            if(!x)return 1;\n            if(l==r)return p[x];\n            int mid=(l+r)>>1;\n            if(pos<=mid)return merge(p[x],ask(ch[x][0],l,mid,pos));\n            else return merge(p[x],ask(ch[x][1],mid+1,r,pos));\n        }\n    };\n    struct out_seg\n    {\n        ins_seg p;\n        void modify(int x,int l,int r,int L,int R,int c,int d,ll v)\n        {\n            if(l>=L&&r<=R)\n            {\n                p.modify(root[x],1,n,c,d,v);\n                return ;\n            }\n            int mid=(l+r)>>1;\n            if(L<=mid) modify(x<<1,l,mid,L,R,c,d,v);\n            if(R>mid)  modify(x<<1|1,mid+1,r,L,R,c,d,v);\n        }\n        ll ask(int x,int l,int r,int a,int b)\n        {\n            if(l==r)return p.ask(root[x],1,n,b);\n            int mid=(l+r)>>1;\n            if(a<=mid) return merge(p.ask(root[x],1,n,b),ask(x<<1,l,mid,a,b));\n            else return merge(p.ask(root[x],1,n,b),ask(x<<1|1,mid+1,r,a,b));\n        }\n    }T;\n    int main()\n    {\n        n=read(),m=read();\n        while(m--)\n        {\n            int opt=read(),l=read(),r=read();\n            if(opt==1)\n            {\n                ll p=quickmod(r-l+1,mod-2);\n                if(l>1) T.modify(1,0,n,1,l-1,l,r,(1-p+mod)%mod),T.modify(1,0,n,0,0,0,l-1,0);\n                if(r<n) T.modify(1,0,n,l,r,r+1,n,(1-p+mod)%mod),T.modify(1,0,n,0,0,r+1,n,0);\n                T.modify(1,0,n,l,r,l,r,(1-2*p%mod+mod)%mod);\n                T.modify(1,0,n,0,0,l,r,p);\n            }\n            else printf(\"%lld\\n\",T.ask(1,0,n,l-1,r));\n        }\n}\n```",
        "postTime": 1515765574,
        "uid": 30459,
        "name": "\u6d88\u5931\u7684\u6d77\u5cb8\u7ebf",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3688 \u3010[ZJOI2017]\u6811\u72b6\u6570\u7ec4\u3011"
    }
]