[
    {
        "content": "~~\u7531\u4e8e\u6211\u592a\u83dc\uff0c\u4e0d\u4f1a\u8bc1\u660e\u548c\u66f4\u4f18\u7684\u505a\u6cd5\uff0c\u53ea\u80fd\u6253\u7b80\u5355\u7684\u66b4\u529b\u3002~~\n\n\u901a\u8fc7\u66b4\u529b\u6a21\u62df\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u9898\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u5e76\u4e0d\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4e0d\u80fd\u4f7f\u7528\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u8981\u5bfb\u627e\u5176\u4ed6\u529e\u6cd5\u3002\n\n\u6570\u636e\u8303\u56f4\u4e2d\u7684 $m$ \u5f88\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u662f\u5426\u5b58\u5728\u4e00\u5b9a\u89c4\u5f8b\u53ef\u4ee5\u7f29\u5c0f $m$ \u7684\u8303\u56f4\uff0c\u518d\u5229\u7528\u66b4\u529b\u8ba1\u7b97\u3002  \n\u901a\u8fc7\u5c0f\u6570\u636e\u6253\u8868\u53d1\u73b0\u9898\u4e2d\u8fd0\u7b97\u6709\u5faa\u73af\u8282\uff0c\u4e14\u5faa\u73af\u8282\u5f88\u5c0f\uff08\u4ee5 $2$ \u4e3a\u5faa\u73af\u8282\u53ef\u4ee5\u62ff\u5230\u5f88\u9ad8\u5206\u6570\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u8ba1\u7b97\u627e\u5faa\u73af\u8282\uff0c\u627e\u5230 $m$ \u5728\u5bf9\u5e94\u4f4d\u7f6e\u7684\u7b54\u6848\u5373\u53ef\u3002  \n\u4ee3\u7801\u4e0d\u662f\u5f88\u96be\uff0c\u5982\u679c\u53d1\u73b0\u89c4\u5f8b\u9898\u76ee\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\n\n\u6211\u7684\u4ee3\u7801\u4e2d\u7528 map \u6765\u5224\u65ad\u5faa\u73af\u8282\uff0c\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u77e9\u9635\u95f4\u7684\u6bd4\u8f83\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\nstruct Matrix {\n\tint x[502][502];\n} A, ans;\ninline void print(const Matrix &a) {\n\tfor (register int i = 1; i <= n; ++i) {\n\t\tfor (register int j = 1; j <= n; ++j) {\n\t\t\tprintf(\"%d \", a.x[i][j]);\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn;\n}\n//map \u7528\u7684\u6bd4\u8f83\uff0c\u80fd\u5224\u51fa\u4e0d\u540c\u5c31\u53ef\u4ee5\ninline bool operator<(const Matrix &a, const Matrix &b) {\n\tfor (register int i = 1; i <= n; ++i) {\n\t\tfor (register int j = 1; j <= n; ++j) {\n\t\t\tif (a.x[i][j] != b.x[i][j]) {\n\t\t\t\treturn a.x[i][j] < b.x[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n//\u4e0b\u9762\u662f\u6839\u636e\u9898\u610f\u5199\u7684\u66b4\u529b\u77e9\u9635\u4e58\u6cd5\ninline Matrix mult(const Matrix &a, const Matrix &b) {\n\tMatrix C;\n\tmemset(C.x, 0, sizeof(C.x));\n\tfor (register int k = 1; k <= n; ++k) {\n\t\tfor (register int i = 1; i <= n; ++i) {\n\t\t\tfor (register int j = 1; j <= n; ++j) {\n\t\t\t\tC.x[i][j] |= (a.x[i][k] ^ b.x[k][j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn C;\n}\nnamespace solve {\n\tmap<Matrix, int> mp;  //\u5224\u5faa\u73af\u8282\n    //key->\u77e9\u9635\uff0cval->\u7f16\u53f7\n\tMatrix fmp[10];  //\u5b58\u50a8\u4e0a\u9762 map \u91cc\u5bf9\u5e94\u7f16\u53f7\u7684\u77e9\u9635\n    //key->\u7f16\u53f7\uff0cval->\u77e9\u9635\n\tvoid work() {\n\t\tmp.clear();  memset(fmp, 0, sizeof(fmp));\n\t\tmp[ans] = 1;\n\t\tfmp[1] = ans;\n\t\tfor (int i = 2; i <= m; ++i) {\n\t\t\tans = mult(ans, A);\n\t\t\tif (mp.count(ans)) {//\u51fa\u73b0\u8fc7\uff0c\u627e\u5230\u4e86\u5faa\u73af\u8282\n\t\t\t\tint xx = mp[ans];\n\t\t\t\tm = (m - xx) % (i - xx) + xx;\n                //\u5c06 m \u7f29\u5c0f\u627e\u5230\u5bf9\u5e94\u77e9\u9635\n\t\t\t\tans = fmp[m];\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmp[ans] = i;\n\t\t\t\tfmp[i] = ans;\n\t\t\t}\n\t\t}\n\t\tprint(ans);\n\t\treturn;\n\t}\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (register int i = 1; i <= n; ++i) {\n\t\tfor (register int j = 1; j <= n; ++j) {\n\t\t\tscanf(\"%d\", &A.x[i][j]);\n\t\t}\n\t}\n\tans = A;\n\tsolve::work();\n\treturn 0;\n}\n```\n",
        "postTime": 1578559075,
        "uid": 37539,
        "name": "_Qer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3890 \u3010[GDOI2014]\u6bd4\u7279\u77e9\u9635\u3011"
    }
]