[
    {
        "content": "\u9996\u5148\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5faa\u73af\u957f\u5ea6\u4e0d\u6574\u9664 $8$\uff0c\u4e00\u5b9a\u65e0\u89e3\uff0c\u731c\u6d4b\u5269\u4e0b\u7684\u60c5\u51b5\u4e00\u5b9a\u6709\u89e3\u3002\n\n\u5c06\u9694\u677f\u4e4b\u95f4\u53ef\u4ee5\u4e00\u6b65\u5230\u8fbe\u7684\u5173\u7cfb\u5efa\u51fa\u540e\uff0c\u8003\u8651\u5982\u4f55\u67d3\u8272\u3002\n\n\u76f4\u63a5\u67d3\u8272\u4e0d\u6613\u5904\u7406\u3002\u6211\u4eec\u9996\u5148\u53cd\u8f6c\u70b9\u8fb9\u5173\u7cfb\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5faa\u73af\u5efa\u865a\u70b9\uff0c\u539f\u56fe\u4e2d\u7684\u9694\u677f\u89c6\u4e3a\u8fb9\uff0c\u5f88\u663e\u7136\u6bcf\u4e00\u6761\u8fb9\u4e0e\u4e24\u4e2a\u865a\u70b9\u76f8\u5173\u8054\uff08\u9694\u677f\u7684\u4e24\u9762\u5404\u5bf9\u5e94\u4e00\u4e2a\u865a\u70b9\uff09\u3002\u73b0\u5728\u5c31\u8f6c\u6362\u4e3a\u5bf9\u4e8e\u8fb9\u67d3\u8272\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u865a\u70b9\u76f8\u8fde\u7684\u8fb9\u6bcf\u79cd\u989c\u8272\u6570\u91cf\u76f8\u540c\u3002\n\n\u53ef\u4ee5\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\u5c06\u8fb9\u4ea4\u66ff\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408\uff0c\u6bcf\u4e2a\u96c6\u5408\u5185\u90e8\u518d\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\u8fdb\u4e00\u6b65\u62c6\u5206\u3002\u5bf9\u4e8e\u62c6\u5206\u51fa\u7684\u56db\u79cd\u96c6\u5408\u5404\u67d3\u4e00\u79cd\u989c\u8272\u5373\u53ef\u3002\n\n\u7b80\u5355\u8bf4\u660e\u4e00\u4e0b\uff1a\u7b2c\u4e00\u904d\u8dd1\u6b27\u62c9\u56de\u8def\uff0c\u5c06\u8fb9\u62c6\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408\uff0c\u8003\u8651\u6bcf\u4e00\u4e2a\u5b50\u56fe\uff0c\u6bcf\u4e2a\u70b9\u5ea6\u6570\u4e00\u5b9a\u6574\u9664 $4$\uff0c\u90a3\u4e48\u518d\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def\u4e5f\u53ef\u4ee5\u6070\u597d\u5b8c\u6210\u62c6\u5206\uff08\u4e00\u8fdb\u4e00\u51fa\u6070\u597d\u62b5\u6d88\uff09\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mp make_pair\n#define inf 1e9\n#define pii pair <int, int>\nconst int mod = 1e9 + 7;\ninline int read () {\n\tint x = 0, f = 1;\n\tchar ch = getchar ();\n\twhile (ch < '0' || ch > '9') f = ((ch == '-') ? -1 : f), ch = getchar ();\n\twhile (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar ();\n\treturn x * f;\n}\ninline void write (int x) {\n\tif (x < 0) x = -x, putchar ('-');\n\tif (x >= 10) write (x / 10);\n\tputchar (x % 10 + '0');\n}\nint n;\nstruct st {\n\tint x, y, op, id;\n}a[500005];\n\nint ans[500005];\nvector <int> G[1000005];\n\nvoid add1(int x, int opx, int y, int opy) {\n\tx += opx * n, y += (opy ^ 1) * n;\n\tG[x].push_back(y);\n\tG[y].push_back(x);\n}\nvoid add2(int x, int opx, int y, int opy) {\n\tx += n;\n\tG[x].push_back(y);\n\tG[y].push_back(x);\n}\n\nint head[1000005], cur[1000005], tot = 1;\nstruct Edge {\n\tint v, e, nxt;\n}edge[8000005];\nvoid addedge(int u, int v, int e) {\n\tedge[++tot].v = v, edge[tot].e = e;\n\tedge[tot].nxt = head[u], head[u] = tot;\n}\nint du[1000005];\nvoid Addedge(int u, int v, int e) {\n\tdu[u]++, du[v]++;\n\taddedge(u, v, e);\n\taddedge(v, u, e);\n}\nint N, fa[1000005], vis[2000005], tag[1000005];\npii p[1000005];\nvoid dfs(int x) {\n\tvis[x] = ++tot;\n\tfor(auto y : G[x]) {\n\t\tif(y == fa[x]) continue;\n\t\tif(vis[y]) {\n\t\t\tif(vis[y] > vis[x]) {\n\t\t\t\tN++;\n\t\t\t\tint now = y;\n\t\t\t\twhile(1) {\n\t\t\t\t\tint id = (now > n) ? (now - n) : now;\n\t\t\t\t\tif(!p[id].first) p[id].first = N;\n\t\t\t\t\telse p[id].second = N;\n\t\t\t\t\tif(now == x) break;\n\t\t\t\t\tnow = fa[now];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse fa[y] = x, dfs(y);\n\t}\n}\nvoid build() {\n\tfor(int i = 1; i <= 2 * n; i++) if(!vis[i]) dfs(i);\n\ttot = 1;\n\tfor(int i = 1; i <= n; i++) Addedge(p[i].first, p[i].second, i);\n}\nint col;\nvoid dfs1(int x) {\n\tfor(int i = cur[x]; i; ) {\n\t\tif(vis[i >> 1]) {\n\t\t\ti = cur[x] = edge[i].nxt;\n\t\t\tcontinue;\n\t\t}\n\t\tvis[i >> 1] = 1;\n\t\tdfs1(edge[i].v);\n\t\tans[edge[i].e] = col;\n\t\tcol ^= 1;\n\t\ti = cur[x];\n\t}\n}\nvoid dfs2(int x, int tar) {\n\ttag[x] = 1;\n\tfor(int i = cur[x]; i; ) {\n\t\tif(vis[i >> 1] || ans[edge[i].e] != tar) {\n\t\t\tvis[i >> 1] = 1;\n\t\t\ti = cur[x] = edge[i].nxt;\n\t\t\tcontinue;\n\t\t}\n\t\tvis[i >> 1] = 1;\n\t\tdfs2(edge[i].v, tar);\n\t\tans[edge[i].e] += col;\n\t\tcol ^= 2;\n\t\ti = cur[x];\n\t}\n}\nvoid solve() {\n//    printf(\"N:%lld %lld\\n\", N, du[1]);\n\tfor(int i = 1; i <= N; i++) if(du[i] % 8) puts(\"-1\"), exit(0);\n\twhile(du[0] % 8) Addedge(0, 0, 0);\n//\tprintf(\"%lld\\n\", tot);\n\tmemset(vis, 0, sizeof vis);\n\tfor(int i = 0; i <= N; i++) cur[i] = head[i];\n\tdfs1(0);\n\tmemset(vis, 0, sizeof vis), memset(tag, 0, sizeof tag);\n\tfor(int i = 0; i <= N; i++) cur[i] = head[i];\n\tcol = 0;\n\tfor(int i = 0; i <= N; i++) dfs2(i, 0);\n\tmemset(vis, 0, sizeof vis), memset(tag, 0, sizeof tag);\n\tfor(int i = 0; i <= N; i++) cur[i] = head[i];\n\tcol = 0;\n\tfor(int i = 0; i <= N; i++) dfs2(i, 1);\n}\nsigned main () {\n//\tfreopen (\"1.in\", \"r\", stdin);\n//\tfreopen (\"mine.out\", \"w\", stdout);\n\tn = read();\n\tfor(int i = 1; i <= n; i++) {\n\t\ta[i].x = read(), a[i].y = read();\n\t\tchar op[2];\n\t\tscanf(\"%s\", op);\n\t\ta[i].op = (op[0] == '/') ? 0 : 1;\n\t\ta[i].id = i;\n\t}\n\t\n\tsort(a + 1, a + 1 + n, [&] (st A, st B) {return A.x < B.x || (A.x == B.x && A.y < B.y);});\n\tfor(int i = 2; i <= n; i++) if(a[i-1].x == a[i].x) add1(a[i-1].id, a[i-1].op, a[i].id, a[i].op);\n\tsort(a + 1, a + 1 + n, [&] (st A, st B) {return A.y < B.y || (A.y == B.y && A.x < B.x);});\n\tfor(int i = 2; i <= n; i++) if(a[i-1].y == a[i].y) add2(a[i-1].id, a[i-1].op, a[i].id, a[i].op);\n\t\n\tbuild(), solve();\n\t\n\tfor(int i = 1; i <= n; i++) write(ans[i] + 1), putchar(' ');\n\tputchar('\\n');\n\treturn 0;\n}\n/*\n*/\n```",
        "postTime": 1674818229,
        "uid": 161847,
        "name": "Para",
        "ccfLevel": 0,
        "title": "P8326 [COCI2021-2022#5] Fliper"
    }
]