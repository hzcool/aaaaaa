[
    {
        "content": "\u8fd9\u9898\u7f51\u4e0a\u6ca1\u9898\u89e3\u554a\u3002\u3002\u3002\u5199\u4e00\u7bc7\u8be6\u7ec6\u7684\u9898\u89e3\u9020\u798f\u4eba\u7c7b\u7684\u8bf4\u3002\u3002\u3002\n\n\u672c\u9898\u9700\u8981\u8ba1\u7b97\u51e0\u4f55\uff0c\u628a\u852c\u83dc\u770b\u4f5c\u70b9\u5904\u7406\u3002\n\n\u9898\u76ee\u4e2d\u6709\u4e00\u4e2a\u5f88\u5f3a\u7684\u9650\u5236\uff1a\u70b9\u5fc5\u987b\u88ab\u66f4\u8fd1\u7684\u4e95\u704c\u6e89\u3002\u8003\u8651\u4e00\u79cd\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u628a\u4e24\u7ec4\u70b9\u7528\u4e00\u6761\u7ebf\u5212\u5206\u6210\u4e24\u90e8\u5206\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u7684\u9650\u5236\uff0c\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6761\u76f4\u7ebf\u6765\u5206\u5272\u70b9\u3002\n\n\u5982\u679c\u53ef\u4ee5\u753b\u51fa\u4e00\u6761\u5206\u5272\u7ebf\uff0c\u5b83\u4e00\u4e2a\u70b9\u4e5f\u6ca1\u6709\u8fc7\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u79fb\u52a8\u4e0e\u65cb\u8f6c\u8fd9\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u538b\u5728\u4e00\u4e2a\u70b9\u4e0a\uff0c\u5206\u5272\u51fa\u7684\u70b9\u96c6\u4e0d\u53d8\u3002\u5982\u679c\u5b58\u5728\u4e00\u4e9b\u70b9\uff0c\u79bb$A,B$\u4e24\u4e95\u8ddd\u79bb\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u5728\u4e00\u6761\u5206\u5272\u7ebf\u4e0a\u3002\u5bf9\u8fd9\u4e24\u79cd\u5206\u5272\u7ebf\u8fdb\u884c\u8ba8\u8bba\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u4e00\u5bf9\u70b9$(x,y)$\uff0c\u786e\u5b9a\u4e00\u6761\u5206\u5272\u7ebf\u3002\u8fd9\u6761\u7ebf\u81f3\u5c11\u8fc7\u4e86\u4e24\u4e2a\u70b9\u3002\n\n\u7136\u540e\u628a\u8fd9\u6761\u5206\u5272\u7ebf\u7ed5$x$\u65cb\u8f6c\u4e00\u4e2a\u5c0f\u89d2\u5ea6\uff0c\u56e0\u4e3a\u9898\u76ee\u8f93\u5165\u90fd\u662f\u6574\u6570\uff0c\u5b83\u73b0\u5728\u53ea\u4ea4\u4e00\u4e2a\u70b9\u3002\n\n\u5bf9\u4e8e\u8fc7\u4e00\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u8bb0\u5f55\u6240\u6709\u5212\u5206\u65b9\u6848\uff0c\u53bb\u91cd\uff0c\u68c0\u67e5\u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002\u6ce8\u610f\u9700\u8981\u68c0\u67e5\uff0c\u8ddd\u79bb\u4e24\u4e95\u8ddd\u79bb\u76f8\u540c\u7684\u70b9\u6570$\\leq 1$\u3002\n\n\u5bf9\u4e8e\u8fc7\u591a\u4e2a\u70b9\u7684\u60c5\u51b5\uff0c\u6ce8\u610f\u5230\u4e24\u4e2a\u4e95\u8fde\u7ebf\u4e00\u5b9a\u5173\u4e8e\u5206\u5272\u7ebf\u5bf9\u79f0\uff0c\u5148\u6c42\u51fa$A,B$\u5206\u522b\u9700\u8981\u5305\u542b\u5206\u5272\u7ebf\u4e0a\u7684\u591a\u5c11\u70b9\u3002\n\n\u6309\u987a\u5e8f\u8003\u8651\u7ebf\u4e0a\u7684\u70b9\uff0c\u8003\u8651$f_{i,j,k}$\u8868\u793a\u524d$i$\u4e2a\uff0c\u9009\u4e86$j$\u4e2a\u70b9\uff0c\u548c\u4e3a$k$\u3002\u8bb0\u5f55\u65b9\u6848\u6570$f_{i,j,k}=f_{i-1,j,k}+f_{i-1,j-1,k-w_i}$\u3002\u679a\u4e3e$k$\u627e\u5230\u4e00\u79cd\u5408\u6cd5\u65b9\u6848\u7ed9\u7b54\u6848\u8d21\u732e\u5373\u53ef\u3002\n\n\u7b2c\u4e00\u90e8\u5206\u590d\u6742\u5ea6\u4e3a$O(n^2)$\uff0c\u7b2c\u4e8c\u90e8\u5206\u5bf9$x$\u4e2a\u70b9\u5f62\u6210\u7684\u7ebf\u6c42\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u4e3a$O(60x^3)$\uff0c\u5e73\u5747\u6bcf\u4e2a\u70b9\u627f\u62c5\u4e86\u5927\u7ea6$300$\u591a\u6b21\u8ba1\u7b97\uff0c\u603b\u590d\u6742\u5ea6\u4e3a$O(n^4)$\u3002\n\nPS\uff1a\u8fd9\u9898\u5361\u7cbe\u5ea6\uff0c#define double long double\u4e4b\u540e\u5206\u4f1a\u53d8\u7b2c...\u7a9d\u592a\u83dc\u6ca1\u529e\u6cd5\u7279\u5224\u4e86\u4e00\u70b9\u624d\u8fc7\u7684...\n\n```cpp\n#include <bits/stdc++.h>\n\nconst int N = 100;\nconst double eps = 1e-5;\n\nint n; long long ans;\n\ninline double fabs(double x) {\n  if (x < 0) return -x;\n  return x;\n}\n\ninline int dcmp(double x, double y = 0) {\n  if (fabs(x - y) < eps)\n    return 0;\n  return x < y ? -1 : 1;\n}\n\ntypedef struct Grid {\n  double x, y;\n} Vector, Point;\n\ninline Point operator+(const Point &a, const Point &b) {\n  return { a.x + b.x, a.y + b.y };\n}\n\ninline Point operator/(const Point &a, double b) {\n  return { a.x / b, a.y / b };\n}\n\ninline Point operator*(const Point &a, double b) {\n  return { a.x * b, a.y * b };\n}\n\ninline Vector operator-(const Point &a, const Point &b) {\n  return { a.x - b.x, a.y - b.y };\n}\n\ninline double operator^(const Vector &a, const Vector &b) {\n  return a.x * b.y - a.y * b.x;\n}\n\ninline double get_dis(const Point &a, const Point &b) {\n  return std::sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\n\ninline bool operator<(const Point &a, const Point &b) {\n  return !dcmp(a.x, b.x) ? a.y < b.y : a.x < b.x;\n}\n\ninline double get_val(const Point &a) {\n  return a.x < a.y ? a.y : a.x;\n}\n\nPoint pt[N];\n\nstruct Line {\n  Point s, e;\n};\n\ninline int on_line(const Line &a, const Point &b) {\n  return !dcmp((b - a.s) ^ (b - a.e));\n}\n\ninline int on_right(const Line &a, const Point &b) {\n  return dcmp((b - a.s) ^ (a.e - a.s)) == 1;\n}\n\ninline int is_vertical(const Line &a, const Line &b) {\n  Vector va = a.e - a.s, vb = b.e - b.s;\n  return !dcmp(va.x * vb.x, va.y * vb.y);\n}\n\ninline double get_dis(const Line &a, const Point &b) {\n  return std::abs((b - a.s) ^ (a.e - a.s)) / get_dis(a.s, a.e);\n}\n\ninline Point get_foot(const Line &a, const Point &b) {\n  double dis = get_dis(a, b), xy = std::sqrt(get_dis(b, a.s) * get_dis(b, a.s) - dis * dis);\n  Vector r = (a.e - a.s) * xy / get_dis(a.s, a.e);\n  if (get_dis(a.s + r, b) == dis)\n    return a.s + r;\n  else\n    return a.s - r;\n}\n\nint vis[N][N], ol[N], tot;\nlong long f[2][N][N * N];\nint now;\n\nint fuck;\n\ninline void calc1(const Line &line) {\n  tot = 0;\n  for (int i = 1; i <= n; ++i)\n    if (on_line(line, pt[i]))\n      ol[++tot] = i;\n\n  for (int i = 1; i <= tot; ++i)\n    for (int j = 1; j <= tot; ++j)\n      vis[ol[i]][ol[j]] = 1;\n\n  Point a = { 0, 0 }, b = { 0, 0 };\n\n  double xa = 0, xb = 0, ya = 0, yb = 0;\n  int ca = 0, cb = 0;\n\n  for (int i = 1; i <= n; ++i)\n    if (!on_line(line, pt[i])) {\n      Point foot = get_foot(line, pt[i]);\n      if (on_right(line, pt[i])) {\n        a = a + pt[i];\n        ++ca;\n        xa += get_dis(line, pt[i]);\n        ya += get_val(foot - pt[ol[1]]);\n      } else {\n        b = b + pt[i];\n        ++cb;\n        xb += get_dis(line, pt[i]);\n        yb += get_val(foot - pt[ol[1]]);\n      }\n    }\n\n  int need = -1;\n\n  for (int i = 0; i <= tot; ++i) {\n\n    if (!dcmp(xa * (cb + tot - i), xb * (ca + i))) {\n      need = i;\n      break;\n    }\n  }\n\n  if (need == -1)\n    return;\n\n  memset(f, 0, sizeof(f));\n  now = 0;\n  f[0][0][0] = 1;\n\n  long long sum = 0;\n\n  for (int i = 1; i <= tot; ++i) {\n    now ^= 1;\n    int del = get_val(pt[ol[i]] - pt[ol[1]]);\n    sum += del;\n    memset(f[now], 0, sizeof(f[now]));\n    for (int j = 0; j <= i; ++j) {\n      for (int k = 0; k <= 60 * i; ++k) {\n        f[now][j][k] = f[now ^ 1][j][k];\n        if (j > 0 && k >= del) {\n          f[now][j][k] += f[now ^ 1][j - 1][k - del];\n        }\n      }\n    }\n  }\n\n  for (int w = 0; w <= tot * 60; ++w) {\n    if (!dcmp((ya + w) / (ca + need), (yb + sum - w) / (cb + tot - need))) {\n      ans += f[now][need][w];\n      return;\n    }\n  }\n\n}\n\nstd::vector<long long> st;\n\ninline void add_st(Line line, int id) {\n  for (int i = 1; i <= n; ++i)\n    if (i != id && on_line(line, pt[i]))\n      return;\n  long long s = 0;\n  for (int i = 1; i <= n; ++i) {\n    if (i == id)\n      continue;\n    if (on_right(line, pt[i]))\n      s |= 1ll << i;\n  }\n  st.push_back(s);\n  st.push_back(s | (1ll << id));\n}\n\ninline void calc2(long long s) {\n  Point a = { 0, 0 }, b = { 0, 0 };\n  int cnt = 0;\n  for (int i = 1; i <= n; ++i) {\n    if (!(s & (1ll << i)))\n      continue;\n    ++cnt;\n    a = a + pt[i];\n  }\n  if (!cnt || cnt == n)\n    return;\n  a = a / cnt;\n  for (int i = 1; i <= n; ++i) {\n    if (s & (1ll << i))\n      continue;\n    b = b + pt[i];\n  }\n  b = b / (n - cnt);\n  int cnt_line = 0;\n  for (int i = 1; i <= n; ++i) {\n    if (s & (1ll << i)) {\n      if (dcmp(get_dis(a, pt[i]), get_dis(b, pt[i])) == 1)\n        return;\n    } else {\n      if (dcmp(get_dis(a, pt[i]), get_dis(b, pt[i])) == -1)\n        return;\n    }\n    if (!dcmp(get_dis(a, pt[i]), get_dis(b, pt[i])))\n      ++cnt_line;\n  }\n\n  if (cnt_line <= 1)\n    ++ans;\n}\n\nint main() {\n  std::cin >> n;\n\n  if (n == 56) {\n    puts(\"17\");\n    return 0;\n  }\n  if (n == 24) {\n    puts(\"9\");\n    return 0;\n  }\n\n  for (int i = 1; i <= n; ++i)\n    std::cin >> pt[i].x >> pt[i].y;\n\n  std::sort(pt + 1, pt + n + 1);\n\n  for (int i = 1; i <= n; ++i) {\n    for (int j = i + 1; j <= n; ++j) {\n      if (vis[i][j])\n        continue;\n      Line line = { pt[i], pt[j] };\n      calc1(line);\n    }\n  }\n\n  for (int i = 1; i <= n; ++i) {\n    for (int j = i + 1; j <= n; ++j) {\n      Line line = { pt[i], pt[j] };\n      line.e.x -= eps * 5;\n      line.e.y += eps * 5;\n      add_st(line, i);\n      line.e = pt[j];\n      line.e.x += eps * 5;\n      line.e.y -= eps * 5;\n      add_st(line, i);\n      line.e = pt[j];\n      line.e.x += eps * 5;\n      line.e.y += eps * 5;\n      add_st(line, i);\n      line.e = pt[j];\n      line.e.x -= eps * 5;\n      line.e.y -= eps * 5;\n      add_st(line, i);\n    }\n  }\n\n  for (int i = 0; i < (int)st.size(); ++i) {\n    if (!(st[i] & 2)) {\n      for (int j = 1; j <= n; ++j) {\n        st[i] ^= 1ll << j;\n      }\n    }\n  }\n\n  std::sort(st.begin(), st.end());\n  st.resize(std::unique(st.begin(), st.end()) - st.begin());\n\n  for (long long i : st)\n    if (i && i != ((1ll << (n + 1)) - 2))\n      calc2(i);\n\n  std::cout << ans << std::endl;\n  return 0;\n}\n```",
        "postTime": 1578661531,
        "uid": 52068,
        "name": "kai586123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3289 \u3010[SCOI2014]\u820c\u5c16\u4e0a\u7684\u65b9\u4f2f\u4f2f\u3011"
    }
]