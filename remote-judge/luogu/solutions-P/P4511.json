[
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/HN-wrp/p/12804454.html)\n## \u6b63\u9898\n\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u663e\u7136\u7b2c$i$\u5929\u4ee5\u524d\u53ef\u4ee5\u653e$i$\u4e2a\u4efb\u52a1\u662f\u5427\uff0c\u7136\u540e\u8003\u8651\u7528\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u6570\u91cf\uff0c\u8bbe\u6bcf\u5929\u7684\u8fd9\u4e2a\u503c\u4e3a$lev(i)$\n\u8003\u8651\u5728$t$\u8fd9\u4e2a\u622a\u6b62\u65f6\u95f4\u4f4d\u7f6e\u653e\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u90a3$(t,n)$\u8fd9\u4e2a\u533a\u95f4\u7684$ lev(i)$ \u90fd\u8981\u51cf\u53bb$1$\u3002\u3000  \u3000\n### \u63d2\u5165\n\u8bbe\u63d2\u5165\u7684\u7ec8\u6b62\u65f6\u95f4\u4e3a$t$,\u8fd9\u4e2a\u4efb\u52a1\u7684\u4ef7\u503c\u4e3a$p$\u3002\u90a3\u5982\u4f55\u63d2\u5165\u5462\uff1f\n+ \u5f53\u8fd9\u4e2a\u4efb\u52a1\u4e0e\u5176\u4ed6\u7684\u4efb\u52a1\u4e0d\u51b2\u7a81\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a0\u5165\u5b8c\u4e8b\u3002\u4e5f\u5c31\u662f\u5f53$min(lev(t\\rightarrow n))>0$\u7684\u65f6\u5019\u4e0d\u4f1a\u51b2\u7a81\uff0c\u7136\u540e\u76f4\u63a5\u52a0\u8fdb\u53bb\u5c31\u5b8c\u4e8b\u4e86 \n+ \u5f53\u8fd9\u4e2a\u4efb\u52a1\u4e0e\u5176\u4ed6\u4efb\u52a1\u51b2\u7a81\u7684\u65f6\u5019\uff0c\u4e00\u4e2a\u663e\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u66ff\u6362\u6389\u6700\u5c0f\u7684\uff0c\u6216\u8005\u4e0d\u66ff\u6362\u3002\u90a3\u8fd9\u4e2a\u6700\u5c0f\u7684\u503c\u5728\u54ea\u91cc\u627e\u5462\u3002\u4e3a\u4e86\u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u7684\u4efb\u52a1\u52a0\u8fdb\u53bb\uff0c\u90a3\u539f\u6765\u7684\u8fd9\u4e2a\u6700\u5c0f\u503c\u7684$t2$\u5fc5\u987b\u8981\u6bd4\u521a\u521a\u6240\u8bf4\u7684$(t,n)$\u7684\u6700\u5de6\u8fb9\u7684$lev(i)=0$\u7684$i$\u8981\u5c0f\u624d\u53ef\u4ee5\u91ca\u653e\u7a7a\u95f4\u8ba9\u5f53\u524d\u7684\u4efb\u52a1\u53ef\u4ee5\u63d2\u5165\u3002\u6240\u4ee5\u5c31\u5728\u533a\u95f4 $ (1,id) $ ($id$\u5c31\u662f\u521a\u521a\u8bf4\u7684\u90a3\u4e2a\u4f4d\u7f6e\uff09\u627e\u4e00\u4e2a\u4ef7\u503c\u6700\u5c0f\u7684\u4efb\u52a1\u66ff\u6362\u6389\uff0c\u7136\u540e\u628a\u66ff\u6362\u6389\u7684\u90a3\u4e2a\u4efb\u52a1\u4e22\u5230\u6ca1\u6709\u7528\u7684\u4e00\u4e2a\u96c6\u5408\u3002\u4e3a\u4ec0\u4e48\u662f\u5bf9\u7684\u5462\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u66ff\u6362\u8fd9\u4e2a\u4efb\u52a1\uff0c\u90a3\u5c31\u8981\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u4efb\u52a1\u6765\u66ff\u6362\u8fd9\u4e2a\u4efb\u52a1\uff0c\u800c\u8fd9\u4e2a\u4efb\u52a1\u6bd4\u539f\u6765\u7684\u8981\u5927\uff0c\u6240\u4ee5\u5c31\u8981\u5728\u4e2d\u95f4\u989d\u5916\u63d2\u5165\u4e00\u4e2a\u4efb\u52a1\uff0c\u800c\u663e\u7136\u8fd9\u662f\u505a\u4e0d\u5230\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5c31\u662f\u6700\u4f18\u7684\u4e86\u3002\u3000\u3000\n### \u5220\u9664\n+ \u663e\u7136\u8981\u662f\u6ca1\u7528\u8fd9\u4e2a\u4efb\u52a1\u76f4\u63a5\u5220\u6389\u5b8c\u4e8b\n+ ~~\u5176\u5b9e\u8fd9\u91cc\u4f60\u4e0d\u7528\u7ba1\u5c31\u6709$20$\u5206\u4e86\uff0c\u5c82\u4e0d\u7f8e\u54c9\uff1f~~\u3000\u5982\u679c\u7528\u4e86\u7684\u8bdd\uff0c\u5c31\u5728\u6ca1\u6709\u7528\u7684\u91cc\u9762\u53bb\u627e\u4e2a\u6700\u5927\u7684\u66ff\u6362\u8981\u5220\u6389\u7684\u90a3\u4e2a\u4efb\u52a1\u5c31\u884c\u4e86\u3002\u4e07\u4e00\u627e\u4e0d\u5230\u7684\u8bdd\u5c31\u4e0d\u7528\u7ba1\u4e86\u5457\u3002\u3000\u7136\u540e\u5269\u4e0b\u7684\u81ea\u5df1YY\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3000\u6211\u8fd9\u4e48\u5f31\u90fdYY\u51fa\u6765\u4e86\u60a8\u4eec\u80af\u5b9a\u968f\u4fbf\u5c31\u641e\u51fa\u6765\u4e86\n\n\u81f3\u4e8e\u8fd9\u4e2a\u96c6\u5408\u600e\u4e48\u7ef4\u62a4\uff0c\u663e\u7136\u7ebf\u6bb5\u6811\u5957\u4e2amultiset\u5c31\u884c\u4e86\n### \u4ee3\u7801\n\u81f3\u4e8e\u4ee3\u7801\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u957f   \n\u5f53\u7136\u662f\u4e3a\u4e86\u66f4\u597d\u5730~~\u88c5\u903c~~\u8bf4\u660e\u5566\uff01\u3000\u3000  \n\u8bb0\u5f97\u70b9\u8d5e\u554a\uff0c\u6211\u5c31\u6ca1\u6536\u8fc7\u8d5e\u3002\u3002\u3002\u3000\u3000  \n~~\u4e0b\u6b21\u4e00\u5b9a\u7684\u8d70\u5f00(bushi~~\n``` cpp\n#include <set>\n#include <cstdio>\n#include <utility>\n#include <algorithm>\n\nusing namespace std;\n\n#define R register\n#define LL long long\n#define IT multiset<int>::iterator\n\nconst int MAXN = 3e5 + 10;\nconst int inf = 1e9 + 10;\n\ninline int read()\n{\n\tchar a = getchar();\n\tint x = 0, f = 1;\n\tfor (; a > '9' || a < '0'; a = getchar())\n\t\tif (a == '-')\n\t\t\tf = -1;\n\tfor (; a >= '0' && a <= '9'; a = getchar())\n\t\tx = x * 10 + a - '0';\n\treturn x * f;\n}\n\ninline char getc()\n{\n\tchar a = getchar();\n\twhile (a != 'A' && a != 'D')\n\t\ta = getchar();\n\treturn a;\n}\n\nint n, m;\nLL Ans;\n\nstruct Round\n{\n\tint l, r, va;\n};\n\nclass Tree_for_value\n{\nprivate:\n\tint tag[MAXN << 2];\n\tRound mn[MAXN << 2];\n\tinline int ls(int x);\n\tinline int rs(int x);\n\tinline void update(int x);\n\tinline void get(int x, int k);\n\tinline void pushdown(int x);\n\npublic:\n\tinline Round ask(int x, int l, int r, int Le, int Ri);\n\tinline void chg(int x, int l, int r, int Le, int Ri, int k);\n\tinline void build(int x, int l, int r);\n} T1;\n\nclass Tree_for_mintask\n{\nprivate:\n\tmultiset<int> st[MAXN << 2];\n\tpair<int, int> mn[MAXN << 2];\n\tinline int ls(int x);\n\tinline int rs(int x);\n\tinline void update(int x);\n\npublic:\n\tinline void build(int x, int l, int r);\n\tinline void insert(int x, int l, int r, int ad, int p);\n\tinline void del(int x, int l, int r, int ad, int p);\n\tinline pair<int, int> ask(int x, int l, int r, int Le, int Ri);\n\tinline int have(int x, int l, int r, int ad, int p);\n} T2;\n\nclass Tree_for_maxtask\n{\nprivate:\n\tmultiset<int> st[MAXN << 2];\n\tpair<int, int> mx[MAXN << 2];\n\tinline int ls(int x);\n\tinline int rs(int x);\n\tinline void update(int x);\n\npublic:\n\tinline void build(int x, int l, int r);\n\tinline void insert(int x, int l, int r, int ad, int p);\n\tinline void del(int x, int l, int r, int ad, int p);\n\tinline pair<int, int> ask(int x, int l, int r, int Le, int Ri);\n} T3;\n\nint main()\n{\n\tfreopen(\"d.in\", \"r\", stdin);\n\tfreopen(\"d.out\", \"w\", stdout);\n\tn = read();\n\tm = read();\n\tT1.build(1, 1, n);\n\tT2.build(1, 1, n);\n\tT3.build(1, 1, n);\n\tchar op;\n\tint t, p;\n\twhile (m--)\n\t{\n\t\top = getc();\n\t\tt = read();\n\t\tp = read();\n\t\tif (op == 'A')\n\t\t{\n\t\t\tRound pir = T1.ask(1, 1, n, t, n);\n\t\t\tif (pir.va > 0)\n\t\t\t{\n\t\t\t\tAns += p;\n\t\t\t\tT1.chg(1, 1, n, t, n, -1);\n\t\t\t\tT2.insert(1, 1, n, t, p);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint id = pir.l;\n\t\t\t\tpair<int, int> tmp = T2.ask(1, 1, n, 1, id);\n\t\t\t\tif (tmp.first > p)\n\t\t\t\t\tT3.insert(1, 1, n, t, p);\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tAns += p - tmp.first;\n\t\t\t\t\tT2.del(1, 1, n, tmp.second, tmp.first);\n\t\t\t\t\tT3.insert(1, 1, n, tmp.second, tmp.first);\n\t\t\t\t\tT1.chg(1, 1, n, tmp.second, n, 1);\n\t\t\t\t\tT2.insert(1, 1, n, t, p);\n\t\t\t\t\tT1.chg(1, 1, n, t, n, -1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (T2.have(1, 1, n, t, p) == 0)\n\t\t\t\tT3.del(1, 1, n, t, p);\n\t\t\telse\n\t\t\t{\n\t\t\t\tAns -= p;\n\t\t\t\tT2.del(1, 1, n, t, p);\n\t\t\t\tT1.chg(1, 1, n, t, n, 1);\n\t\t\t\tRound tmp = T1.ask(1, 1, n, 1, n);\n\t\t\t\tint id = tmp.va <= 0 ? tmp.r : 0;\n\t\t\t\tif (id != n)\n\t\t\t\t{\n\t\t\t\t\tpair<int, int> tmp = T3.ask(1, 1, n, id + 1, n);\n\t\t\t\t\tif (tmp.first != -inf)\n\t\t\t\t\t{\n\t\t\t\t\t\tT3.del(1, 1, n, tmp.second, tmp.first);\n\t\t\t\t\t\tT2.insert(1, 1, n, tmp.second, tmp.first);\n\t\t\t\t\t\tT1.chg(1, 1, n, tmp.second, n, -1);\n\t\t\t\t\t\tAns += tmp.first;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld\\n\", Ans);\n\t}\n\treturn 0;\n}\n\ninline int Tree_for_value::ls(int x) { return x << 1; }\ninline int Tree_for_value::rs(int x) { return x << 1 | 1; }\ninline void Tree_for_value::update(int x)\n{\n\tif (mn[ls(x)].va == mn[rs(x)].va)\n\t{\n\t\tmn[x].va = mn[ls(x)].va;\n\t\tmn[x].l = mn[ls(x)].l;\n\t\tmn[x].r = mn[rs(x)].r;\n\t}\n\tif (mn[ls(x)].va < mn[rs(x)].va)\n\t\tmn[x] = mn[ls(x)];\n\tif (mn[ls(x)].va > mn[rs(x)].va)\n\t\tmn[x] = mn[rs(x)];\n}\ninline void Tree_for_value::get(int x, int k)\n{\n\ttag[x] += k;\n\tmn[x].va += k;\n}\ninline void Tree_for_value::pushdown(int x)\n{\n\tif (tag[x])\n\t{\n\t\tget(ls(x), tag[x]);\n\t\tget(rs(x), tag[x]);\n\t\ttag[x] = 0;\n\t}\n}\ninline void Tree_for_value::build(int x, int l, int r)\n{\n\tif (l == r)\n\t{\n\t\tmn[x] = {l, l, l};\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tbuild(ls(x), l, mid);\n\tbuild(rs(x), mid + 1, r);\n\tupdate(x);\n}\ninline void Tree_for_value::chg(int x, int l, int r, int Le, int Ri, int k)\n{\n\tif (l >= Le && r <= Ri)\n\t{\n\t\tget(x, k);\n\t\treturn;\n\t}\n\tpushdown(x);\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (Le <= mid)\n\t\tchg(ls(x), l, mid, Le, Ri, k);\n\tif (Ri > mid)\n\t\tchg(rs(x), mid + 1, r, Le, Ri, k);\n\tupdate(x);\n}\ninline Round Tree_for_value::ask(int x, int l, int r, int Le, int Ri)\n{\n\tif (l >= Le && r <= Ri)\n\t\treturn mn[x];\n\tpushdown(x);\n\tint mid = l + r;\n\tmid >>= 1;\n\tRound ans;\n\tif (Le > mid)\n\t\tans = ask(rs(x), mid + 1, r, Le, Ri);\n\telse if (Ri <= mid)\n\t\treturn ans = ask(ls(x), l, mid, Le, Ri);\n\telse\n\t{\n\t\tRound lef = ask(ls(x), l, mid, Le, Ri), rig = ask(rs(x), mid + 1, r, Le, Ri);\n\t\tif (lef.va < rig.va)\n\t\t\tans = lef;\n\t\tif (lef.va > rig.va)\n\t\t\tans = rig;\n\t\tif (lef.va == rig.va)\n\t\t{\n\t\t\tans.l = lef.l;\n\t\t\tans.r = rig.r;\n\t\t\tans.va = lef.va;\n\t\t}\n\t}\n\tupdate(x);\n\treturn ans;\n}\n\ninline int Tree_for_mintask::ls(int x) { return x << 1; }\ninline int Tree_for_mintask::rs(int x) { return x << 1 | 1; }\ninline void Tree_for_mintask::update(int x)\n{\n\tif (mn[ls(x)].first <= mn[rs(x)].first)\n\t\tmn[x] = mn[ls(x)];\n\telse\n\t\tmn[x] = mn[rs(x)];\n}\ninline void Tree_for_mintask::build(int x, int l, int r)\n{\n\tif (l == r)\n\t{\n\t\tmn[x] = make_pair(inf, l);\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tbuild(ls(x), l, mid);\n\tbuild(rs(x), mid + 1, r);\n\tupdate(x);\n}\ninline void Tree_for_mintask::insert(int x, int l, int r, int ad, int p)\n{\n\tif (l == r)\n\t{\n\t\tst[x].insert(p);\n\t\tmn[x].first = min(mn[x].first, p);\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (ad <= mid)\n\t\tinsert(ls(x), l, mid, ad, p);\n\telse\n\t\tinsert(rs(x), mid + 1, r, ad, p);\n\tupdate(x);\n}\ninline void Tree_for_mintask::del(int x, int l, int r, int ad, int p)\n{\n\tif (l == r)\n\t{\n\t\tst[x].erase(st[x].find(p));\n\t\tif (st[x].size())\n\t\t\tmn[x].first = *st[x].begin();\n\t\telse\n\t\t\tmn[x].first = inf;\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (ad <= mid)\n\t\tdel(ls(x), l, mid, ad, p);\n\tif (ad > mid)\n\t\tdel(rs(x), mid + 1, r, ad, p);\n\tupdate(x);\n}\ninline pair<int, int> Tree_for_mintask::ask(int x, int l, int r, int Le, int Ri)\n{\n\tif (l >= Le && r <= Ri)\n\t\treturn mn[x];\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (Le > mid)\n\t\treturn ask(rs(x), mid + 1, r, Le, Ri);\n\tif (Ri <= mid)\n\t\treturn ask(ls(x), l, mid, Le, Ri);\n\tpair<int, int> lef = ask(ls(x), l, mid, Le, Ri), rig = ask(rs(x), mid + 1, r, Le, Ri);\n\tif (lef.first <= rig.first)\n\t\treturn lef;\n\treturn rig;\n}\ninline int Tree_for_mintask::have(int x, int l, int r, int ad, int p)\n{\n\tif (l == r)\n\t\treturn st[x].find(p) != st[x].end();\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (ad <= mid)\n\t\treturn have(ls(x), l, mid, ad, p);\n\telse\n\t\treturn have(rs(x), mid + 1, r, ad, p);\n}\n\ninline int Tree_for_maxtask::ls(int x) { return x << 1; }\ninline int Tree_for_maxtask::rs(int x) { return x << 1 | 1; }\ninline void Tree_for_maxtask::update(int x)\n{\n\tif (mx[ls(x)].first > mx[rs(x)].first)\n\t\tmx[x] = mx[ls(x)];\n\telse\n\t\tmx[x] = mx[rs(x)];\n}\ninline void Tree_for_maxtask::build(int x, int l, int r)\n{\n\tif (l == r)\n\t{\n\t\tmx[x] = make_pair(-inf, l);\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tbuild(ls(x), l, mid);\n\tbuild(rs(x), mid + 1, r);\n\tupdate(x);\n}\ninline void Tree_for_maxtask::insert(int x, int l, int r, int ad, int p)\n{\n\tif (l == r)\n\t{\n\t\tst[x].insert(p);\n\t\tmx[x].first = max(mx[x].first, p);\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (ad <= mid)\n\t\tinsert(ls(x), l, mid, ad, p);\n\telse\n\t\tinsert(rs(x), mid + 1, r, ad, p);\n\tupdate(x);\n}\ninline void Tree_for_maxtask::del(int x, int l, int r, int ad, int p)\n{\n\tif (l == r)\n\t{\n\t\tst[x].erase(st[x].find(p));\n\t\tif (st[x].size())\n\t\t{\n\t\t\tIT it = st[x].end();\n\t\t\tit--;\n\t\t\tmx[x].first = *it;\n\t\t}\n\t\telse\n\t\t\tmx[x].first = -inf;\n\t\treturn;\n\t}\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (ad <= mid)\n\t\tdel(ls(x), l, mid, ad, p);\n\tif (ad > mid)\n\t\tdel(rs(x), mid + 1, r, ad, p);\n\tupdate(x);\n}\ninline pair<int, int> Tree_for_maxtask::ask(int x, int l, int r, int Le, int Ri)\n{\n\tif (l >= Le && r <= Ri)\n\t\treturn mx[x];\n\tint mid = l + r;\n\tmid >>= 1;\n\tif (Le > mid)\n\t\treturn ask(rs(x), mid + 1, r, Le, Ri);\n\tif (Ri <= mid)\n\t\treturn ask(ls(x), l, mid, Le, Ri);\n\tpair<int, int> lef = ask(ls(x), l, mid, Le, Ri), rig = ask(rs(x), mid + 1, r, Le, Ri);\n\tif (lef.first > rig.first)\n\t\treturn lef;\n\treturn rig;\n}\n```\n",
        "postTime": 1587900387,
        "uid": 139012,
        "name": "______OvO______",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P4511 \u3010[CTSC2015]\u65e5\u7a0b\u7ba1\u7406\u3011"
    },
    {
        "content": "## \u76f8\u5173\u9898\u76ee\uff1a\n[P4511 [CTSC2015]\u65e5\u7a0b\u7ba1\u7406](https://www.luogu.com.cn/problem/P4511)\n\n----\n### \u5199\u5728\u524d\u9762\uff1a\n\n\u672c\u9898\u53ea\u662f\u4e00\u9053\u8d2a\u5fc3\u9898\uff0c\u800c\u8d2a\u5fc3\u7b56\u7565\u4e5f\u5e76\u4e0d\u662f\u5f88\u96be\u60f3\u5230\u3002\u4f46\u5176\u6b63\u786e\u6027\u5374\u4e0d\u662f\u7279\u522b\u663e\u7136\uff0c\u5e76\u4e14\u8d2a\u5fc3\u7b56\u7565\u4e5f\u4e0d\u662f\u80fd\u4e00\u6b65\u5230\u4f4d\u7684\uff08\u53ef\u80fd\u662f\u56e0\u4e3a\u672c\u4eba\u592a\u83dc\u4e86\uff09\u3002\n\n\u7b14\u8005\u53d1\u73b0\uff0c\u501f\u52a9\u62df\u9635\u53bb\u601d\u8003\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5176\u8d2a\u5fc3\u7b56\u7565\u4e0e\u5176\u6b63\u786e\u6027\u53d8\u5f97\u987a\u7406\u6210\u7ae0\uff0c\u5927\u5927\u7b80\u5316\u4e86\u601d\u8003\uff0c\u4e14\u4f7f\u95ee\u9898\u53d8\u5f97\u5341\u5206\u4f18\u96c5\uff0c\u6545\u5199\u4e00\u7bc7\u535a\u5ba2\u603b\u7ed3\u3002\uff08\u5c3d\u7ba1\u8fd9\u4e0d\u662f\u672c\u9898\u6240\u5fc5\u8981\u7684\uff09\n\n\u5f53\u7136\u5566\u672c\u6587\u4e0d\u4e00\u5b9a\u4e25\u8c28\uff0c\u6709\u95ee\u9898\u6b22\u8fce\u6307\u51fa\n\n----\n\n### \u9898\u610f\uff1a\n- \u6709$n$\u5929\u53ef\u4ee5\u7528\u6765\u5b8c\u6210\u4efb\u52a1\uff0c\u6bcf\u5929\u53ea\u80fd\u5b8c\u6210\u81f3\u591a\u4e00\u4e2a\u4efb\u52a1\n\n- \u6709\u82e5\u5e72\u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u8868\u793a\u4e3a$(p_i,t_i)$\uff0c\u610f\u4e3a\u8be5\u4efb\u52a1\u5b8c\u6210\u65f6\u95f4\u4e0d\u80fd\u665a\u4e8e$t_i$\uff0c\u53ef\u83b7\u5f97\u6536\u76ca\u4e3a$p_i$\u3002\u4efb\u52a1\u53ef\u4ee5\u9009\u62e9\u4e0d\u5b8c\u6210\n\n- \u8981\u6c42\u652f\u6301\u52a8\u6001\u589e\u52a0\u6216\u5220\u9664\u4efb\u52a1\uff0c\u4ee5\u53ca\u67e5\u8be2\u5f53\u524d\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u6536\u76ca\n\n- $n,Q\\le3*10^5$\n\n### solution\uff1a\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e2a\u5c0f$Trick$\uff1a\u5224\u65ad\u5f53\u524d\u4efb\u52a1\u96c6\u5408\u662f\u5426\u5408\u6cd5\u53ef\u4ee5\u501f\u52a9\u7ebf\u6bb5\u6811\uff1a\n\n\u5148\u628a\u7b2c$i$\u4e2a\u4f4d\u7f6e\u521d\u503c\u8d4b\u4e3a$i$\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a$t_i$\uff0c\u5c06$[t_i,n]$\u533a\u95f4\u51cf$1$\uff0c\u6700\u540e\u67e5\u8be2\u5168\u5c40\u6700\u5c0f\u503c\u662f\u5426\u975e\u8d1f\u5373\u53ef\uff0c\u6b63\u786e\u6027\u663e\u7136\uff08\u53c2\u8003[CF338E](https://www.luogu.com.cn/problem/CF338E)\uff09\n\n\u6b64\u9898\u6709\u4e00\u4e9b\u660e\u663e\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u4f8b\u5982\u4e0d\u5e26\u4fee\u6539\u65f6\u53ef\u4ee5\u6309$p_i$\u4ece\u5927\u5230\u5c0f\u628a\u4efb\u52a1\u52a0\u5165\u7b49\u3002\u4f46\u6b63\u5982\u524d\u8a00\u6240\u8bf4\uff0c\u8fd9\u4e9b\u505a\u6cd5\u7684\u6b63\u786e\u6027\u5e76\u4e0d\u662f\u975e\u5e38\u663e\u7136\uff08\u5c3d\u7ba1\u611f\u89c9\u4e0a\u662f\u5bf9\u7684\uff09\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6362\u4e2a\u89d2\u5ea6\u770b\u95ee\u9898\n\n\u8bb0$U$\u8868\u793a\u5168\u90e8\u4efb\u52a1\u6784\u6210\u7684\u96c6\u5408\uff0c$\\mathscr F$\u8868\u793a\u6240\u6709\u53ef\u4ee5\u5b8c\u6210\u7684\u4efb\u52a1\u96c6\u5408\u6784\u6210\u7684\u96c6\u65cf\uff0c\u6211\u4eec\u5c1d\u8bd5\u8bf4\u660e$(U,\\mathscr F)$\u662f\u4e00\u4e2a\u62df\u9635\n\n\u9057\u4f20\u6027\u8d28\u663e\u7136\uff0c\u8003\u8651\u8bc1\u660e\u5176\u4ea4\u6362\u6027\u8d28\uff1a\n\n\u8bbe$A,B\\in \\mathscr F$\uff0c\u4e14$|A|<|B|$\uff0c\u6b32\u8bc1$\\exists x \\in B,x\\notin A$\uff0c\u4f7f$A \\bigcup \\{ x \\} \\in \\mathscr F$\n\n\u7531\u4e8e\u5c06\u67d0\u4e2a\u4efb\u52a1\u5b8c\u6210\u65f6\u95f4\u63d0\u524d\u540e\u663e\u7136\u66f4\u6709\u53ef\u80fd\u5408\u6cd5\uff0c\u8003\u8651\u5148\u5b89\u6392$A$\u548c$B$\u4e2d\u7684\u4efb\u52a1\u7684\u5b8c\u6210\u65f6\u95f4\u4f7f\u5176\u5c3d\u53ef\u80fd\u63d0\u65e9\u5b8c\u6210\uff0c\u5373\u505a\u5230\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a\u4efb\u52a1\u80fd\u66f4\u65e9\u5730\u5b8c\u6210\n\n\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/m9p22427.png)\n\n\u8003\u8651$A$\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u4efb\u52a1\u5360\u7528\u7684\u65f6\u95f4$t$\uff08\u6bd4\u5982\u56fe\u4e2d\u7684\u7b2c\u4e94\u4e2a\u4f4d\u7f6e\uff09\uff0c\u5bf9\u4e8e$B$\u5728\u8be5\u4f4d\u7f6e\u4e4b\u540e\u7684\u6240\u6709\u4efb\u52a1\u7684\u96c6\u5408$S$\uff0c\u5206\u60c5\u51b5\uff1a\n\n- \u5982\u679c$S$\u4e2d\u5b58\u5728\u5143\u7d20\u4e0d\u5c5e\u4e8e$A$\uff0c\u5219\u663e\u7136\u53ef\u4ee5\u5c06\u90a3\u4e2a\u5143\u7d20\u653e\u5230\u8fd9\u4e2a\u7a7a\u4f4d\u4e0a\n\n- \u5982\u679c$S$\u4e2d\u6240\u6709\u5143\u7d20\u5747\u5c5e\u4e8e$A$\uff0c\u53ef\u4ee5\u5c06$A$\u4e2d\u4efb\u610f\u4e00\u4e2a\u5c5e\u4e8e$S$\u7684\u5143\u7d20\u62c9\u5230\u4f4d\u7f6e$5$\u5e76\u9012\u5f52\u5730\u8003\u8651\u8be5\u4f4d\u7f6e\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/io2ts0ej.png)\n\n\u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7ecf\u8fc7\u82e5\u5e72\u6b21\u9012\u5f52\u540e\u603b\u80fd\u56de\u5230\u60c5\u51b5\u4e00\n\n\u81f3\u6b64\uff0c\u4ea4\u6362\u6027\u8d28\u5f97\u8bc1\uff0c$(U,\\mathscr F)$\u662f\u4e00\u4e2a\u62df\u9635\n\n\u63a5\u4e0b\u6765\u7684\u505a\u6cd5\u5c31\u5f88\u5bb9\u6613\u60f3\u4e86\u3002\n\n\u9996\u5148\u662f\u4e0d\u5e26\u4fee\u6539\u64cd\u4f5c\u65f6\u7684\u66b4\u529b\uff0c\u8fd9\u76f8\u5f53\u4e8e\u662f\u6c42\u62df\u9635\u5e26\u6743\u6700\u5927\u72ec\u7acb\u96c6\uff0c\u8bf4\u7684\u901a\u4fd7\u70b9\uff0c\u5c31\u662f$kruskal$\u2014\u2014\u8fd9\u95ee\u9898\u5df2\u7ecf\u53d8\u5f97\u8ddf\u6700\u5c0f\u751f\u6210\u6811\u6ca1\u4ec0\u4e48\u533a\u522b\u4e86\n\n\u8fdb\u4e00\u6b65\u8003\u8651\u53ea\u6709\u52a0\u5165\u64cd\u4f5c\u65f6\u600e\u4e48\u505a\u3002\u4ece\u62df\u9635\u7684\u89d2\u5ea6\uff0c\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e\u52a8\u6001\u52a0\u8fb9\u6700\u5c0f\u751f\u6210\u6811\uff1a\n\n\u5148\u5f3a\u5236\u52a0\u5165\u5f53\u524d\u7684\u8fb9\uff0c\u518d\u5224\u65ad\u6709\u6ca1\u6709\u6210\u73af\u3002\u5982\u679c\u6210\u73af\uff0c\u5c31\u5220\u53bb\u73af\u4e0a\u6700\u5c0f\u8fb9\u3002\n\n\u8003\u8651\u672c\u9898\u4e2d\u73af\u662f\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f\u6240\u6709\u5220\u53bb\u540e\u80fd\u4f7f\u4efb\u52a1\u96c6\u5408\u5408\u6cd5\u7684\u6240\u6709\u4efb\u52a1\u3002\n\n\u8fd8\u8bb0\u5f97\u5f00\u59cb\u65f6\u7684\u90a3\u4e2a\u7ebf\u6bb5\u6811\u5417\uff1f\u6211\u4eec\u5148\u627e\u5230\u6700\u5de6\u8fb9\u7684$<0$\u7684\u4f4d\u7f6e$pos$\uff0c\u7136\u540e\u6240\u6709\u6ee1\u8db3$t_i \\in [1,pos]$\u7684\u4efb\u52a1\u5c31\u662f\u73af\u4e0a\u7684\u4efb\u52a1\u4e86\uff0c\u5220\u53bb\u5176\u4e2d\u6700\u5c0f\u7684\u5373\u53ef\n\n\u81f3\u4e8e\u5220\u9664\uff0c\u7531\u4e8e\u62df\u9635\u4e2d\u7684\u57fa\u5927\u5c0f\u76f8\u540c\uff0c\u5220\u6389\u4e00\u4e2a\u4efb\u52a1\u540e\u6211\u4eec\u81f3\u591a\u53ea\u80fd\u518d\u52a0\u5165\u4e00\u4e2a\u4efb\u52a1\uff0c\u90a3\u5c31\u627e\u80fd\u52a0\u5165\u7684\u4efb\u52a1\u4e2d\u6700\u5927\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5f53\u524d\u7ebf\u6bb5\u6811\u4e0a\u6700\u53f3\u7684$0$\u7684\u4f4d\u7f6e$pos'$\uff0c\u7136\u540e\u627e\u6ee1\u8db3$t_i \\in (pos',n]$\u7684\u5143\u7d20\u3002\u7531\u4e8e\u5220\u6389\u4e86\u4e00\u4e2a\u4efb\u52a1\u540e\u62df\u9635\u7684\u79e9\u53ef\u80fd\u51cf\u5c0f\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u5143\u7d20\u3002\u627e\u4e0d\u5230\u5c31\u4e0d\u52a0\u5165\u4e86\u5457\uff09\n\n\u81f3\u4e8e\u600e\u4e48\u5b9e\u73b0\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5957set\u5b9e\u73b0\u67e5\u627e$t_i$\u5728\u67d0\u4e00\u533a\u95f4\u5185\u7684$p_i$\u6700\u5927\u6216\u6700\u5c0f\uff08\u6216\u8005\u6811\u5957\u6811\u4e5f\u884c\uff1f\uff09\u53cd\u6b63\u8fd9\u5c31\u662f\u5177\u4f53\u5b9e\u73b0\u7684\u95ee\u9898\u4e86\uff0c\u4e0d\u5728\u672c\u6587\u8303\u56f4\u5185\n\n\u53e6\u5916\u5410\u69fd\u4e00\u53e5\uff0c\u5f00\u59cb\u65f6\u6211\u6ca1\u53bb\u60f3\u5220\u9664\u600e\u4e48\u505a\uff0c\u56e0\u4e3a\u5220\u9664\u53ef\u4ee5\u4ee51\u4e2a$log$\u7684\u4ee3\u4ef7\u8f6c\u4e3a\u64a4\u9500\uff0c\u5916\u9762\u5957\u4e2a\u65f6\u95f4\u7ebf\u6bb5\u6811\u5c31\u884c\u4e86\u3002\u4e0d\u8fc7\u611f\u89c9\u4f1a\u88ab\u5361\u6389\u8fc7\u4e0d\u53bb\u3002\u540e\u6765\u53c8\u60f3\u4e86\u4e00\u4e0b\u53d1\u73b0\u5220\u9664\u597d\u50cf\u4e5f\u4e0d\u96be\u554a\u3002\u3002\u3002\n\n### \u603b\u7ed3\uff1a\n\u4ece\u672c\u6587\u4e2d\u53ef\u4ee5\u53d1\u73b0\uff0c\u62df\u9635\u5e76\u6ca1\u6709\u7ed9\u51fa\u4ec0\u4e48\u72ec\u7279\u7684\u601d\u8def\uff08\u90a3\u4e9b\u8d2a\u5fc3\u7b56\u7565\u5373\u4f7f\u4e0d\u77e5\u9053\u62df\u9635\u4e5f\u80fd\u60f3\u5230\uff09\uff0c\u4f46\u5374\u4f7f\u672c\u9898\u7cfb\u7edf\u5316\uff0c\u5e76\u4e14\u4f7f\u601d\u8003\u8d2a\u5fc3\u7b56\u7565\u65f6\u4e0d\u7528\u62c5\u5fc3\u5176\u6b63\u786e\u6027\uff0c\u5bf9\u4e8e\u7b80\u5316\u601d\u8def\u65b9\u9762\u8d77\u5230\u4e86\u5f88\u5927\u7684\u4f5c\u7528\uff0c\u4e5f\u4f7f\u95ee\u9898\u53d8\u5f97\u66f4\u52a0\u4f18\u7f8e\u3002\u53ef\u89c1\u62df\u9635\u786e\u5b9e\u4e3a\u4e00\u79cd\u597d\u7684\u5de5\u5177\u3002\n\n### AC\u4ee3\u7801\uff1a\uff08\u4eba\u50bb\u5e38\u6570\u5927\uff0c\u5f00O2\u624d\u80fd\u8fc7\uff0c\u5f00O2\u80fd\u5feb5\u500d\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\uff09\n```cpp\n#include <bits/stdc++.h>\n#define LL int\nusing namespace std;\n\nconst LL maxn=1200000+10;\nconst LL inf=1e9;\n\nLL n,Q;\n\nstruct legal{\n\tLL sp[maxn],add[maxn];\n\tinline void up(LL id){sp[id]=min(sp[id*2],sp[id*2+1]);}\n\tvoid build(LL id,LL l,LL r){\n\t\tadd[id]=0;\n\t\tif (l==r) {sp[id]=l; return;}\n\t\tLL mid=(l+r)/2;\n\t\tbuild(id*2,l,mid); build(id*2+1,mid+1,r);\n\t\tup(id);\n\t}\n\tvoid init(){ build(1,1,n);}\n\tinline void down(LL id){\n\t\tif (add[id]){\n\t\t\tsp[id*2]+=add[id]; sp[id*2+1]+=add[id];\n\t\t\tadd[id*2]+=add[id]; add[id*2+1]+=add[id];\n\t\t\tadd[id]=0; \n\t\t}\n\t}\n\tvoid updata(LL id,LL l,LL r,LL x,LL y,LL v){\n\t\tif (x<=l && r<=y){\n\t\t\tsp[id]+=v; add[id]+=v;\n\t\t\treturn;\n\t\t}\n\t\tdown(id);\n\t\tLL mid=(l+r)/2;\n\t\tif (x<=mid) updata(id*2,l,mid,x,y,v);\n\t\tif (y>mid) updata(id*2+1,mid+1,r,x,y,v);\n\t\tup(id);\n\t}\n\tinline void ins(LL t){updata(1,1,n,t,n,-1);}\n\tinline void del(LL t){updata(1,1,n,t,n,1);}\n\tbool ok(){return sp[1]>=0;}\n\tbool full(){return sp[1]<=0;}\n\tLL query_l(LL id,LL l,LL r,LL mi){\n\t\tif (l==r) return l;\n\t\tdown(id);\n\t\tLL mid=(l+r)/2;\n\t\tif (sp[id*2]==mi) return query_l(id*2,l,mid,mi);\n\t\telse return query_l(id*2+1,mid+1,r,mi);\n\t}\n\tLL query_r(LL id,LL l,LL r,LL mi){\n\t\tif (l==r) return l;\n\t\tdown(id);\n\t\tLL mid=(l+r)/2;\n\t\tif (sp[id*2+1]==mi) return query_r(id*2+1,mid+1,r,mi);\n\t\telse return query_r(id*2,l,mid,mi);\n\t}\n\tinline LL lpos(){\n\t\tif (sp[1]>=0) return n;\n\t\treturn query_l(1,1,n,sp[1]);\n\t}\n\tinline LL rpos(){\n\t\tif (sp[1]>0) return 0;\n\t\treturn query_r(1,1,n,sp[1]);\n\t}\n}L;\n\nstruct Pair{\n\tLL first,second;\n\tbool operator<(const Pair&p) const{\n\t\treturn first==p.first?second<p.second:first<p.first;\n\t}\n\tbool operator>(const Pair&p) const{\n\t\treturn first==p.first?second>p.second:first>p.first;\n\t}\n\tbool operator==(const Pair&p) const{\n\t\treturn first==p.first && second==p.second;\n\t}\n};\n\nstruct dque{\n\tpriority_queue<Pair > q,dq;\n\tinline void push(const Pair&x){\n\t\tq.push(x);\n\t}\n\tinline void del(const Pair&x){\n\t\tdq.push(x);\n\t}\n\tinline Pair top(){\n\t\twhile (!q.empty() && !dq.empty() && q.top()==dq.top()){\n\t\t\tq.pop(); dq.pop();\n\t\t}\n\t\tif (q.empty()) return (Pair){-inf,0};\n\t\treturn q.top();\n\t}\n\tinline bool empty(){\n\t\twhile (!q.empty() && !dq.empty() && q.top()==dq.top()){\n\t\t\tq.pop(); dq.pop();\n\t\t}\n\t\treturn q.empty();\n\t}\n};\n\ninline void max(Pair &x,const Pair &y){\n\tif (y>x) x=y;\n}\n\nstruct segmentree{\n\tLL sp[maxn];\n\tlong long sum;\n\tunordered_map<unsigned long long,LL> mp;\n\tdque val[maxn];\n\tsegmentree(){sum=0;}\n\tinline void up(LL id){\n\t\tsp[id]=val[sp[id*2]].top()>val[sp[id*2+1]].top()?sp[id*2]:sp[id*2+1];\n\t}\n\tvoid build(LL id,LL l,LL r){\n\t\tif (l==r) {sp[id]=l; return;}\n\t\tLL mid=(l+r)/2;\n\t\tbuild(id*2,l,mid); build(id*2+1,mid+1,r);\n\t\tup(id);\n\t}\n\tvoid updata(LL id,LL l,LL r,LL t,LL p){\n\t\tif (l==r){\n\t\t\tval[t].push((Pair){p,t});\n\t\t\treturn;\n\t\t}\n\t\tLL mid=(l+r)/2;\n\t\tif (t<=mid) updata(id*2,l,mid,t,p);\n\t\telse updata(id*2+1,mid+1,r,t,p);\n\t\tup(id);\n\t}\n\tvoid del(LL id,LL l,LL r,LL t,LL p){\n\t\tif (l==r){\n\t\t\tval[t].del((Pair){p,t});\n\t\t\treturn;\n\t\t}\n\t\tLL mid=(l+r)/2;\n\t\tif (t<=mid) del(id*2,l,mid,t,p);\n\t\telse del(id*2+1,mid+1,r,t,p);\n\t\tup(id);\n\t}\n\tinline void ins(LL t,LL p) {updata(1,1,n,t,p); mp[12345678ull*p+t]++; sum+=p;}\n\tinline void del(LL t,LL p){del(1,1,n,t,p);mp[12345678ull*p+t]--; sum-=p;}\n\tinline bool exist(LL t,LL p){return mp[12345678ull*p+t];}\n\tPair query(LL id,LL l,LL r,LL x,LL y){\n\t\tif (val[sp[id]].empty()) return (Pair){-inf,0};\n\t\tif (x<=l && r<=y) return val[sp[id]].top();\n\t\tLL mid=(l+r)/2; Pair ans=(Pair){-inf,0};\n\t\tif (x<=mid) max(ans,query(id*2,l,mid,x,y));\n\t\tif (y>mid) max(ans,query(id*2+1,mid+1,r,x,y));\n\t\treturn ans;\n\t}\n\tinline Pair qry(LL x,LL y){return query(1,1,n,x,y);}\n}T1,T2;\n\nvoid add(LL t,LL p){\n\tL.ins(t); T1.ins(t,-p);\n\tif (L.ok()) return;\n\tLL pos=L.lpos();\n\tPair P=T1.qry(1,pos);\n\tLL pp=-P.first,tt=P.second;\n\tif (pp<-1e8) return;\n\tT1.del(tt,-pp); T2.ins(tt,pp);\n\tL.del(tt);\n}\n\nvoid del(LL t,LL p){\n\tif (T2.exist(t,p)) {\n\t\tT2.del(t,p); return;\n\t}\n\tT1.del(t,-p); L.del(t);\n\tLL pos=L.rpos();\n\tPair P=T2.qry(pos+1,n);\n\tLL pp=P.first,tt=P.second;\n\tif (pp<-1e8) return;\n\tT2.del(tt,pp); T1.ins(tt,-pp);\n\tL.ins(tt);\n}\ninline LL read(){\n    LL x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\ninline string reads(){\n\tstring res; char ch=getchar();\n\twhile (ch!=' ') res=res+ch,ch=getchar();\n\treturn res;\n}\n\nint main(){\n\tn=read(),Q=read(); L.init(); \n\tT1.build(1,1,n); T2.build(1,1,n);\n\tfor (LL i=1;i<=Q;i++){\n\t\tstring op;LL x,y;\n\t\top=reads();\n\t\tx=read(),y=read();\n\t\tif (op[0]=='A') add(x,y);\n\t\telse del(x,y);\n\t\tprintf(\"%lld\\n\",-T1.sum);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1647501719,
        "uid": 86589,
        "name": "\u5e73\u8861\u6811\u68ee\u6797",
        "ccfLevel": 8,
        "title": "\u62df\u9635\u7684\u4e00\u6b21\u5b9e\u9645\u8fd0\u7528\u53ca\u601d\u8003"
    },
    {
        "content": "### \u95ee\u9898\u8f6c\u5316\n\n\u6700\u76f4\u89c2\u7684\u505a\u6cd5\u663e\u7136\u662f\u7ef4\u62a4\u6bcf\u4e2a\u65f6\u523b\u6267\u884c\u7684\u4efb\u52a1\u7684\u4ef7\u503c\uff0c\u53ef\u60dc\u6211\u4e0d\u4f1a\u3002\u56e0\u6b64\u8003\u8651\u8f6c\u5316\u7ef4\u62a4\u7684\u4fe1\u606f\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a\n\n> \u5982\u679c\u5df2\u77e5\u82e5\u5e72\u4e2a\u4efb\u52a1\u5fc5\u987b\u5b8c\u6210\uff0c\u600e\u6837\u5224\u65ad\u662f\u5426\u65e0\u89e3\uff1f\n\n\u663e\u7136\uff0c\u5982\u679c\u5bf9\u4e8e\u4efb\u610f $t$\uff0c\u5fc5\u987b\u5728 $t$ \u4e4b\u524d\u5b8c\u6210\u7684\u4efb\u52a1\u4e2a\u6570 $\\le t$ \u5373\u53ef\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5728\u6bcf\u4e2a $t$ \u4e0a\u7ef4\u62a4 $t-[\\text{\u5fc5\u987b\u5728}t\\text{\u4e4b\u524d\u5b8c\u6210\u7684\u4efb\u52a1\u4e2a\u6570}]$\u3002\u5982\u679c\u7ebf\u6bb5\u6811\u7684\u6700\u5c0f\u503c\u975e\u8d1f\uff0c\u5219\u76ee\u524d\u51b3\u7b56\u662f\u5408\u6cd5\u7684\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u679c\u8981\u5728 $t$ \u63d2\u5165\u4e00\u4e2a\u4efb\u52a1\uff0c\u5c31\u8ba9 $[t,n]$ \u533a\u95f4 $-1$\u3002\n\n---\n\n### \u63d2\u5165\u4e00\u4e2a\u4efb\u52a1 $(t,p)$\n\n#### \u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\n\n\u5f53 $[t,n]$ \u7684\u6700\u5c0f\u503c $>0$ \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4efb\u52a1\u662f\u53ef\u4ee5\u5b8c\u6210\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u7d2f\u52a0\u7b54\u6848\uff0c\u7136\u540e\u5728\u7ebf\u6bb5\u6811\u4e0a\u66f4\u6539\u3002\n\n#### \u4e0d\u80fd\u76f4\u63a5\u63d2\u5165\n\n\u5f53 $[t,n]$ \u7684\u6700\u5c0f\u503c $=0$ \u7684\u65f6\u5019\uff08\u7531\u4e8e\u524d\u9762\u7684\u51b3\u7b56\u5fc5\u5b9a\u90fd\u5408\u6cd5\uff0c\u56e0\u6b64\u4e0d\u4f1a $<0$\uff09\uff0c\u6211\u4eec\u8003\u8651\u627e\u51fa**\u53ef\u4ee5\u66ff\u4ee3\u7684**\u4ef7\u503c\u6700\u5c0f\u7684\u4efb\u52a1\uff0c\u5e76\u8ba9\u8fd9\u4e2a\u4efb\u52a1\u88ab\u5f53\u524d\u4efb\u52a1\u66ff\u4ee3\u6389\u3002\u5f53\u7136\uff0c\u5982\u679c\u8fd9\u4e2a\u4efb\u52a1\u7684\u4ef7\u503c\u6bd4\u5f53\u524d\u4efb\u52a1\u7684\u5927\uff0c\u90a3\u5c31\u4e0d\u7528\u66ff\u6362\u4e86\u3002\n\n\u54ea\u4e9b\u4efb\u52a1\u662f\u53ef\u4ee5\u66ff\u4ee3\u7684\u5462\uff1f\u5047\u8bbe $t_1$ \u662f $[t,n]$ \u4e2d\u6700\u5c0f\u7684 $=0$ \u7684\u503c\u3002\u90a3\u4e48\uff0c\u622a\u6b62\u65f6\u95f4\u4e3a $t_2\\le t_1$ \u7684\u4efb\u52a1\u90fd\u662f\u53ef\u4ee5\u88ab\u5f53\u524d\u4efb\u52a1\u66ff\u6362\u6389\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u518d\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u5185\u4ef7\u503c\u6700\u5c0f\u7684\u4efb\u52a1\u5373\u53ef\u3002\n\n### \u5220\u9664\u4e00\u4e2a\u4efb\u52a1 $(t,p)$\n\n#### \u8fd9\u4e2a\u4efb\u52a1\u6ca1\u88ab\u7528\u5230\n\n\u90a3\u5c31\u76f4\u63a5\u5220\u9664\u5b8c\u4e8b\u3002\n\n#### \u8fd9\u4e2a\u4efb\u52a1\u88ab\u7528\u5230\u4e86\n\n\u9996\u5148\u5728\u4e0a\u6587\u63d0\u5230\u7684\u4e24\u68f5\u7ebf\u6bb5\u6811\u4e2d\u5220\u9664\u6b64\u4efb\u52a1\u3002\u5220\u9664\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5728\u6ca1\u6709\u7528\u5230\u7684\u4efb\u52a1\u4e2d\u9009\u51fa\u4e00\u4e2a\u52a0\u5165\uff08\u5bb9\u6613\u8bc1\u660e\u5fc5\u7136\u53ea\u6709\u4e00\u4e2a\uff09\u3002\n\n\u54ea\u4e9b\u4efb\u52a1\u662f\u53ef\u4ee5\u52a0\u5165\u7684\u5462\uff1f\u5047\u8bbe $t_1$ \u662f\u7b2c\u4e00\u68f5\u7ebf\u6bb5\u6811\u4e0a $[1,n]$ \u4e2d\u6700\u5927\u7684 $=0$ \u7684\u4f4d\u7f6e\uff08\u82e5\u6ca1\u6709\u5219 $t_1=0$\uff09\u3002\u622a\u6b62\u65f6\u95f4\u5728 $[t_1+1,n]$ \u4e2d\u7684\u6ca1\u6709\u7528\u5230\u7684\u4efb\u52a1\u5c31\u662f\u53ef\u4ee5\u52a0\u5165\u7684\uff0c\u6211\u4eec\u627e\u5230\u6700\u5927\u503c\u52a0\u8fdb\u6765\u5c31\u53ef\u4ee5\u4e86\u3002\n\n---\n\n\u600e\u4e48\u7ef4\u62a4\u6ca1\u6709\u7528\u5230\u7684\u4efb\u52a1\uff1f\u518d\u5f00\u7b2c\u4e09\u68f5\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4efb\u52a1\u7684\u622a\u6b62\u65f6\u95f4\u53ef\u80fd\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5728\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a `multiset`\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u800c\u4e14\u65e0\u751a\u8981\u70b9\uff0c\u5c31\u4e0d\u653e\u4e86\u3002",
        "postTime": 1667622430,
        "uid": 233462,
        "name": "Umbrella_Leaf",
        "ccfLevel": 8,
        "title": "\u9898\u89e3P4511 [CTSC2015]\u65e5\u7a0b\u7ba1\u7406"
    },
    {
        "content": "# \u65e5\u7a0b\u7ba1\u7406\n\n## $Problem$\n\n\u5e7d\u9999\u662f\u5e7b\u60f3\u4e61\u4e2d\u4e00\u4e2a\u975e\u5e38\u6709\u5730\u4f4d\u7684\u4eba\u3002\u5979\u65e5\u7406\u4e07\u673a\uff0c\u4e8b\u52a1\u7e41\u591a\uff0c\u53cd\u5012\u81ea\u5df1\u5df2\u7ecf\u5feb\u7ba1\u7406\u4e0d\u8fc7\u6765\u4e86\u3002\u4e8e\u662f\u4ed6\u51b3\u5b9a\u5f00\u53d1\u4e00\u4e2a\u65e5\u7a0b\u7ba1\u7406\u8f6f\u4ef6\u6765\u5e2e\u52a9\u81ea\u5df1\u7ba1\u7406\u4efb\u52a1\u3002 \n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4efb\u52a1 $i$ \u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u622a\u6b62\u65e5\u671f $t_i$ \u4ee5\u53ca\u6536\u76ca $p_i$\uff0c\u8868\u793a\u82e5\u5e7d\u9999\u80fd\u5728\u4e0d\u665a\u4e8e\u7b2c $t_i$ \u5929\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u4fbf\u53ef\u4ee5\u5f97\u5230 $p_i$ \u7684\u6536\u76ca\u3002\u5e7d\u9999\u529e\u4e8b\u7684\u80fd\u529b\u975e\u5e38\u5f3a\uff0c\u4efb\u4f55\u4efb\u52a1\u90fd\u53ef\u4ee5\u7528\u6070\u597d\u4e00\u5929\u7684\u65f6\u95f4\u505a\u5b8c\u3002\u4f46\u7531\u4e8e\u4efb\u52a1\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u6709\u65f6\u5019\u5e76\u4e0d\u80fd\u5b8c\u6210\u6240\u6709\u4efb\u52a1\uff0c\u4e8e\u662f\u5e7d\u9999\u4f1a\u60f3\u77e5\u9053\u8fd9\u4e2a\u60c5\u51b5\u4e0b\uff0c\u5b8c\u6210\u4efb\u52a1\u53ef\u4ee5\u7ed9\u5979\u5e26\u6765\u7684\u6700\u5927\u7684\u7d2f\u79ef\u6536\u76ca\u662f\u591a\u5c11\u3002\n \n\u7531\u4e8e\u5e7b\u60f3\u4e61\u7684\u4eba\u4eec\u5341\u5206\u5584\u53d8\uff0c\u4efb\u52a1\u603b\u662f\u4e0d\u65ad\u53d1\u751f\u7740\u53d8\u5316\u3002\u5e7d\u9999\u5e0c\u671b\u8fd9\u4e2a\u7ba1\u7406\u8f6f\u4ef6\u8fd8\u80fd\u591f\u652f\u6301\u63d2\u5165\u4e00\u4e2a\u4efb\u52a1\uff0c\u548c\u5220\u9664\u4e00\u4e2a\u4efb\u52a1\u7684\u64cd\u4f5c\u3002 \n\n\u5177\u4f53\u7684\u8bf4\uff0c\u5e7d\u9999\u5e0c\u671b\u652f\u6301\u4ee5\u4e0b $2$ \u4e2a\u64cd\u4f5c\uff1a \n\n- $\\text{ADD t p}$\uff1a\u8868\u793a\u65b0\u6dfb\u4e00\u4e2a\u622a\u6b62\u65e5\u671f\u4e3a $t$\uff0c\u6536\u76ca\u4e3a $p$ \u7684\u4efb\u52a1\u3002 \n\n- $\\text{DEL t p}$\uff1a\u8868\u793a\u5220\u9664\u4e00\u4e2a\u622a\u6b62\u65e5\u671f\u4e3a $t$\uff0c\u6536\u76ca\u4e3a $p$ \u7684\u4efb\u52a1\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u4efb\u52a1\uff0c\u53ea\u5220\u9664\u4e00\u4e2a\u3002\u6570\u636e\u4fdd\u8bc1\u8fd9\u6837\u7684\u4efb\u52a1\u4e00\u5b9a\u5b58\u5728\u3002 \n\n\u5728\u6bcf\u6b21\u64cd\u4f5c\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u4f60\u90fd\u9700\u8981\u8f93\u51fa\u80fd\u591f\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u6700\u5927\u6536\u76ca\u548c\u3002 \n\n\u5e7d\u9999\u4e00\u5171\u6709 $T$ \u5929\u9700\u8981\u5b89\u6392\uff0c\u4ece\u7b2c $1$ \u5929\u5230\u7b2c $T$ \u5929\u3002\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5199\u51fa\u8fd9\u4e2a\u9ad8\u6548\u7387\u7684\u8f6f\u4ef6\u5417\uff1f\n\n**\u6570\u636e\u8303\u56f4**\n\n$T\\leq 3\\times 10 ^ 5,Q\\leq 3\\times 10 ^ 5$\n\n## $Sol$\n\n\u5206\u522b\u8003\u8651\u6dfb\u52a0\u548c\u5220\u9664\uff1a\n\n- **\u6dfb\u52a0**\uff1a\u5efa\u7acb\u4e00\u68f5**\u7ebf\u6bb5\u6811**\uff0c\u53f6\u5b50\u7ed3\u70b9\u50a8\u5b58**\u6bcf\u4e2a\u65f6\u523b\u5b8c\u6210\u4efb\u52a1\u7684\u4ef7\u503c**\u3002\u6bcf\u6b21\u67e5\u8be2 $1$ \u81f3 $t$ \u8303\u56f4\u5185\u5143\u7d20\u7684\u6700\u5c0f\u503c\uff0c\u5982\u679c\u5c0f\u4e8e $p$\uff0c\u5219\u5c06\u5176\u66ff\u6362\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u3002\u8003\u8651\u5982\u4e0b\u60c5\u51b5\uff0c\u82e5\u8303\u56f4 $1$ \u81f3 $t$ \u5916\u6709\u4e00\u4e2a\u66f4\u5c0f\u7684\u503c\uff0c\u4e14\u53ef\u4ee5\u548c\u8303\u56f4\u5185\u7684\u67d0\u4e2a\u503c\u5408\u6cd5\u66ff\u6362\uff0c\u90a3\u6211\u4eec\u663e\u7136\u5e94\u8be5\u9009\u62e9\u66f4\u5c0f\u7684\u503c\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u5efa\u4e00\u68f5**\u7ebf\u6bb5\u6811**\uff0c\u50a8\u5b58**\u6bcf\u4e2a\u65f6\u523b\u5b8c\u6210\u4efb\u52a1\u7684\u622a\u6b62\u65f6\u95f4**\uff0c\u6bcf\u6b21\u67e5\u8be2 $1$ \u81f3 $t$ \u5185\u6240\u5b8c\u6210\u4efb\u52a1\u7684\u622a\u6b62\u65f6\u95f4\u7684\u6700\u5927\u503c\uff0c\u8bbe\u8fd9\u4e2a\u503c\u4e3a $\\mathit{far}$\uff0c\u518d\u67e5\u8be2 $1$ \u81f3 $\\mathit{far}$ \u8303\u56f4\u5185\u5b8c\u6210\u4efb\u52a1\u7684\u622a\u6b62\u65f6\u95f4\u7684\u6700\u5927\u503c\uff0c\u82e5\u8fd9\u4e2a\u503c\u6bd4 $\\mathit{far}$ \u5927\uff0c\u5219\u4ea4\u6362\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5e76\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u627e\u5230\u6700\u5927\u7684\u8fb9\u754c\u3002\u518d\u7528\u8fd9\u4e2a\u6700\u5927\u7684\u8fb9\u754c\u8fdb\u884c\u6700\u5c0f\u503c\u67e5\u8be2\uff0c\u6b64\u65f6\uff0c\u624d\u662f\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u66ff\u6362\u7684**\u6700\u5c0f\u503c**\u3002\u800c\u6dfb\u52a0\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u6709\u53ef\u80fd\u6211\u4eec\u65e0\u6cd5\u8fdb\u884c\u66ff\u6362\uff0c\u6216\u8005\u6709\u4efb\u52a1\u88ab\u66ff\u6362\u4e86\u4e0b\u6765\uff0c\u8fd9\u4e9b\u4efb\u52a1\u6211\u4eec\u8be5\u5982\u4f55\u50a8\u5b58\u3002\u6211\u4eec\u5148\u6682\u4e14\u5c06\u5b83\u4eec\u6309\u7167\u622a\u6b62\u65f6\u95f4\u5b58\u5165\u82e5\u5e72\u4e2a $\\text{multiset}$ \u4e2d\u5373\u53ef\u3002\n\n- **\u5220\u9664**\uff1a\u5982\u679c\u5220\u9664\u7684\u6811\u4e0d\u5728\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5219\u5341\u5206\u7b80\u5355\uff0c\u76f4\u63a5\u5728 $\\text{multiset}$ \u4e2d\u5c06\u5176\u5254\u9664\u5373\u53ef\u3002\u82e5\u5728\u7ebf\u6bb5\u6811\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4e4b\u524d\u50a8\u5b58\u5728 $\\text{multiset}$ \u4e2d\u7684\u4efb\u52a1\u9009\u51fa\u4e00\u4e2a\u5c06\u5176\u66ff\u6362\u6389\u3002\u6211\u4eec\u5efa\u7acb**\u7b2c\u4e09\u68f5\u7ebf\u6bb5\u6811**\uff0c\u53f6\u5b50\u8282\u70b9\u50a8\u5b58**\u6bcf\u4e2a\u622a\u6b62\u65f6\u523b\u5bf9\u5e94\u7684 $\\text{multiset}$ \u4e2d\u7684\u6700\u5927\u5143\u7d20**\u3002\u8bbe\u88ab\u5220\u9664\u7684\u4efb\u52a1\u5728\u65f6\u523b $t$ \u5b8c\u6210\uff0c\u6211\u4eec\u53ea\u9700\u5728\u8fd9\u68f5\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u533a\u95f4 $t$ \u5230 $T$ \u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u518d\u66ff\u6362\u4e0a\u53bb\uff0c\u540c\u65f6\u66f4\u65b0 $\\text{multiset}$ \u548c\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u8fd9\u540c\u6837\u662f\u6bd4\u8f83\u81ea\u7136\u7684\u60f3\u6cd5\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u88ab\u5220\u9664\u7684\u4efb\u52a1\u76ee\u524d\u88ab\u5b8c\u6210\u7684\u65f6\u95f4\u4e0d\u4e00\u5b9a\u662f\u5b83**\u6700\u65e9**\u53ef\u4ee5\u88ab\u5b8c\u6210\u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u786e\u5b9a\u8fd9\u4e2a\u6700\u65e9\u7684\u65f6\u95f4\uff0c\u6269\u5927\u67e5\u8be2\u8303\u56f4\u3002\u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u5b9e\u73b0\uff0c$l = 1,r = t - 1$\uff0c\u4e8c\u5206\u51fa\u4e00\u4e2a $\\mathit{mid}$ \u5728\u7b2c\u4e8c\u68f5\u7ebf\u6bb5\u6811\u4e0a\u67e5\u8be2\u8303\u56f4 $1$ \u5230 $\\mathit{mid}$ \u8303\u56f4\u5185\u5b8c\u6210\u4efb\u52a1\u622a\u6b62\u65f6\u95f4\u7684\u6700\u5927\u503c\uff0c\u5018\u82e5\u5927\u4e8e\u7b49\u4e8e $t$\uff0c\u5219\u4ee3\u8868\u8fd9\u4e2a\u4efb\u52a1\u53ef\u4ee5\u88ab\u66ff\u6362\u5230\u66f4\u9760\u524d\u7684\u4f4d\u7f6e\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u77e5\u9053\u5f53\u524d\u4efb\u52a1\u4e0d\u518d\u80fd\u524d\u79fb\u4e3a\u6b62\uff0c\u4e4b\u540e\u7684\u8fc7\u7a0b\u5373\u5982\u4e0a\u3002\n\n\u8fd9\u5c31\u662f\u8fd9\u9053\u9898\u7684\u6574\u4f53\u601d\u8def\uff0c\u53ef\u80fd\u4e0d\u662f\u5341\u5206\u96be\u60f3\u5230\uff0c\u4f46\u5374\u6bd4\u8f83\u96be\u5b9e\u73b0\uff0c\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e0d\u8d58\u8ff0\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5b8c\u5168\u4e00\u81f4\u7684\u4efb\u52a1\u53ef\u80fd\u4f1a\u51fa\u73b0\u591a\u4e2a\uff0c\u5199\u4ee3\u7801\u65f6\u53ef\u80fd\u8981\u6ce8\u610f\u8fd9\u4e2a\u95ee\u9898\u3002\n\n## $code$\n\n```cpp\n#include <bits/stdc++.h>\n#define st first\n#define nd second\n#define mk make_pair\n#define int long long \n#define pii pair<int, pair<int, int> >\nusing namespace std;\nconst int N = 3e5 + 10, INF = 1e15;\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread (buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\ninline int read()\n{\n  register int x = 0, f = 0;\n  register char c = getchar();\n  while (!isdigit(c)) { if (c == '-') f = 1;c = getchar(); }\n  while (isdigit(c)) { x = (x << 3) + (x << 1) + c - 48;c = getchar(); }\n  return f ? -x : x;\n}\nstruct Tree{\n\tint v, p, c;\n\tbool operator < (const Tree &x) const{ return v < x.v; } \n}tr[N << 2]; //\u8be5\u7ebf\u6bb5\u6811\u8bb0\u5f55 1~T \u65f6\u95f4\u8303\u56f4\u5185\u65f6\u523b p \u5b8c\u6210\u7684\u4efb\u52a1\u7684\u4ef7\u503c\npii lv[N << 2]; //\u8be5\u7ebf\u6bb5\u6811\u8bb0\u5f55 1~T \u65f6\u95f4\u8303\u56f4\u5185\u7ed3\u675f\u65f6\u95f4\u4e3a nd \u4e14\u672a\u88ab\u5b8c\u6210\u4efb\u52a1\u7684\u6700\u5927\u4ef7\u503c \npii tim[N << 2]; //\u8be5\u7ebf\u6bb5\u6811\u8bb0\u5f55 1~T \u65f6\u95f4\u8303\u56f4\u5185\u65f6\u523b nd \u5b8c\u6210\u7684\u4efb\u52a1\u7684\u622a\u6b62\u65f6\u95f4\nint T, Q, ans, id[N];\n#define lson k << 1\n#define rson k << 1 | 1\n#define mid ((l + r) >> 1)\ninline void build(int k, int l, int r)\n{\n\tif(l == r) { tr[k].p = lv[k].nd.st = tim[k].nd.st = l; id[l] = k; return; }\n\tbuild(lson, l, mid), build(rson, mid + 1, r);\n\ttr[k] = min(tr[lson], tr[rson]);\n}\ninline void change(int k, int l, int r, int x, int v, int t, int c)\n{\n\tif(l == r && l == x) { tr[k].v = v, tim[k].st = t; tr[k].c = c, tim[k].nd.nd = c; return; }\n\tif(x <= mid) change(lson, l, mid, x, v, t, c);\n\telse change(rson, mid + 1, r, x, v, t, c);\n\ttr[k] = min(tr[lson], tr[rson]), tim[k] = max(tim[lson], tim[rson]);\n}\ninline void update(int k, int l, int r, int x, int v, int c)\n{\n\tif(l == r && l == x) { lv[k].st = v, lv[k].nd.nd = c; return; }\n\tif(x <= mid) update(lson, l, mid, x, v, c);\n\telse update(rson, mid + 1, r, x, v, c);\n\tlv[k] = max(lv[lson], lv[rson]);\n}\ninline Tree query(int k, int l, int r, int x, int y) //\u67e5\u8be2 [x,y] \u65f6\u95f4\u8303\u56f4\u5185\u5b8c\u6210\u4efb\u52a1\u4ef7\u503c\u7684\u6700\u5c0f\u503c \n{\n\tif(x > y) return (Tree){INF, 0, 0}; \n\tif(l >= x && r <= y) return tr[k];\n\tif(y <= mid) return query(lson, l, mid, x, y);\n\telse if(x > mid) return query(rson, mid + 1, r, x, y);\n\telse return min(query(lson, l, mid, x, mid), query(rson, mid + 1, r, mid + 1, y));\n}\ninline pii ask(int k, int l, int r, int x, int y) //\u67e5\u8be2 [x,y] \u65f6\u95f4\u8303\u56f4\u5185\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u622a\u6b62\u65f6\u95f4\u7684\u6700\u5927\u503c \n{\n\tif(x > y) return mk(-INF, mk(0, 0));\n\tif(l >= x && r <= y) return tim[k];\n\tif(y <= mid) return ask(lson, l, mid, x, y);\n\telse if(x > mid) return ask(rson, mid + 1, r, x, y);\n\telse return max(ask(lson, l, mid, x, mid), ask(rson, mid + 1, r, mid + 1, y));\n}\ninline pii Get_mx(int k, int l, int r, int x, int y) //\u67e5\u8be2 [x,y] \u65f6\u95f4\u8303\u56f4\u5185\u672a\u88ab\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u6700\u5927\u4ef7\u503c \n{\n\tif(x > y) return mk(-INF, mk(0, 0));\n\tif(l >= x && r <= y) return lv[k];\n\tif(y <= mid) return Get_mx(lson, l, mid, x, y);\n\telse if(x > mid) return Get_mx(rson, mid + 1, r, x, y);\n\telse return max(Get_mx(lson, l, mid, x, mid), Get_mx(rson, mid + 1, r, mid + 1, y));\n}\nmultiset<pair<int, int> > s[N];\nmap<pii, int> mp;\nmap<pair<int, int>, int> cnt;\ninline pii sub(int t, int p, int c) { return mk(t, mk(p, c)); }\ninline void exchange(int x, int y) //\u4ea4\u6362\u5728\u65f6\u523b x \u548c\u65f6\u523b y \u5b8c\u6210\u7684\u4efb\u52a1 \n{\n\tint recv = tr[id[x]].v, rect = tim[id[x]].st, recc = tr[id[x]].c;\n\tmp[sub(tim[id[y]].st, tr[id[y]].v, tr[id[y]].c)] = x, change(1, 1, T, x, tr[id[y]].v, tim[id[y]].st, tr[id[y]].c); //\u5c06 y \u6362\u5230 x \n\tmp[sub(rect, recv, recc)] = y, change(1, 1, T, y, recv, rect, recc); //\u5c06 x \u6362\u5230 y \n}\ninline void add(int t, int p, int c)\n{\n\tif(!s[t].size()) update(1, 1, T, t, p, c), s[t].insert(mk(p, c));\n\telse{\n\t\tauto mx = s[t].end(); mx--;\n\t\tif((*mx).st < p) update(1, 1, T, t, p, c);\n\t\ts[t].insert(mk(p, c));\n\t}\n}\ninline void del(int t, int p, int c)\n{\n\ts[t].erase(s[t].lower_bound(mk(p, c)));\n\tif(!s[t].size()) update(1, 1, T, t, 0, 0);\n\telse{\n\t\tauto mx = s[t].end(); mx--;\n\t\tupdate(1, 1, T, t, (*mx).st, (*mx).nd);\n\t}\n}\ninline void replace(int x, int t, int p, int c) //\u4ee3\u66ff\u65f6\u523b x \u7684\u4efb\u52a1 \n{\n\tint nt = tim[id[x]].st, np = tr[id[x]].v, nc = tr[id[x]].c;\n\tmp[sub(nt, np, nc)] = 0, mp[sub(t, p, c)] = x, change(1, 1, T, x, p, t, c);\n\tif(np) add(nt, np, nc); //\u82e5\u7f6e\u6362\u7684\u4e0d\u662f\u7a7a\u4f4d\u7f6e \n}\nsigned main()\n{\n\tT = read(), Q = read(), build(1, 1, T);\n\twhile(Q--){\n\t\tstring opt;\n\t\tfor(register int i = 0; i <= 2; i++) { char ch = getchar(); opt.push_back(ch); }\n\t\tint t = read(), p = read();\n\t\tif(opt == \"ADD\"){ //\u6dfb\u52a0\u64cd\u4f5c\n\t\t\tcnt[mk(t, p)]++;\n\t\t\twhile(1){\n\t\t\t\tpii far = ask(1, 1, T, 1, t), New = ask(1, 1, T, 1, far.st);\n\t\t\t\tif(New.st > far.st) exchange(New.nd.st, far.nd.st);\n\t\t\t\telse break;\n\t\t\t}\n\t\t\tpii far = ask(1, 1, T, 1, t);\n\t\t\tTree res = query(1, 1, T, 1, far.st);\n\t\t\tif(res.p > t) exchange(res.p, far.nd.st);\n\t\t\tres = query(1, 1, T, 1, t);\n\t\t\tif(res.v < p) ans += (p - res.v), replace(res.p, t, p, cnt[mk(t, p)]);\n\t\t\telse add(t, p, cnt[mk(t, p)]);\n\t\t}\n\t\telse{ //\u5220\u9664\u64cd\u4f5c\n\t\t\tint c = cnt[mk(t, p)];\n\t\t\tif(mp[sub(t, p, c)]){\n\t\t\t\tans -= p;\n\t\t\t\twhile(1){\n\t\t\t\t\tint l = 1, r = mp[sub(t, p, c)] - 1, res = -1;\n\t\t\t\t\twhile(l <= r){\n\t\t\t\t\t\tif(ask(1, 1, T, 1, mid).st >= mp[sub(t, p, c)]) res = mid, r = mid - 1;\n\t\t\t\t\t\telse l = mid + 1; \n\t\t\t\t\t}\n\t\t\t\t\tif(res != -1) exchange(res, mp[sub(t, p, c)]);\n\t\t\t\t\telse break;\n\t\t\t\t}\n\t\t\t\tpii res = Get_mx(1, 1, T, mp[sub(t, p, c)], T);\n\t\t\t\tif(res.st){ //\u5220\u9664 mp[mk(t, p)]\uff0c\u63d2\u5165 res.nd res.st \n\t\t\t\t\tmp[sub(res.nd.st, res.st, res.nd.nd)] = mp[sub(t, p, c)];\n\t\t\t\t\tchange(1, 1, T, mp[sub(t, p, c)], res.st, res.nd.st, res.nd.nd), mp[sub(t, p, c)] = 0;\n\t\t\t\t\tdel(res.nd.st, res.st, res.nd.nd), ans += res.st;\n\t\t\t\t}\n\t\t\t\telse change(1, 1, T, mp[sub(t, p, c)], 0, 0, 0), mp[sub(t, p, c)] = 0;\n\t\t\t}\n\t\t\telse del(t, p, c);\n\t\t\tcnt[mk(t, p)]--;\n\t\t}\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1657026828,
        "uid": 258460,
        "name": "Booksnow",
        "ccfLevel": 0,
        "title": "[CTSC2015]\u65e5\u7a0b\u7ba1\u7406[\u9898\u89e3]"
    }
]