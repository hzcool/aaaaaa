[
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u5bf9\u7b2c$i$\u4e2a\u8282\u70b9\u8fdb\u884c\u8ba8\u8bba\n\n\u5047\u5982$i$\u4e0d\u662f\u5272\u70b9\uff08\u5373\u628a$i$\u548c\u5b83\u6709\u5173\u7684\u6240\u6709\u8fb9\u90fd\u53bb\u9664\u540e\u56fe\u4f9d\u7136\u8054\u901a\uff09\u90a3\u4e48\u8fd9\u4e2a\u56fe\u53ea\u6709$i$\u662f\u72ec\u7acb\u5728\u5916\u9762\u7684\uff0c\u7531\u4e8e\u6c42\u7684\u662f\u6709\u5e8f\u70b9\u5bf9\uff0c\u6240\u4ee5\u9664\u4e86$i$\u4ee5\u5916\u7684$n-1$\u4e2a\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u5927\u7684\u8fde\u901a\u56fe\u5bf9$i$\u52a0\u8fb9\uff0c\u5373\u4e3a$2*(n-1)$\u5bf9\n\n\u5047\u5982$i$\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u4f1a\u628a\u56fe\u5206\u4e3a$a$\u4e2a\u8fde\u901a\u5757\u4ee5\u53ca$i$\u672c\u8eab,\u7531\u4e8etarjan\u5728\u6c42\u5272\u70b9\u7684\u8fc7\u7a0b\u4e2d\u662f\u4e00\u68f5\u641c\u7d22\u6811\u5f80\u4e0b\u904d\u5386\uff0c\u6240\u4ee5\u9664\u4e86\u5b83\u548c\u5b83\u7684\u5b50\u6811\u5916\uff0c\u8fd8\u4f1a\u6709\u5176\u4ed6\u5269\u4f59\u70b9\u5171\u540c\u6784\u6210\u53e6\u4e00\u4e2a\u8fde\u901a\u5757\uff08\u6709\u70b9\u7c7b\u4f3c\u6811\u7684\u91cd\u5fc3\u7684\u6c42\u6cd5\uff09\u8bbe$i$\u6240\u6709\u5b50\u6811\u7684\u548c\u4e3a$sum$,\u7b2c$i$\u4e2a\u5b50\u6811\u7684\u8282\u70b9\u603b\u6570\u4e3a$t[i]$\uff0c\u70b9\u5bf9\u7684\u6570\u91cf\u4fbf\u4e3a$$t[1]*(n-t[1])+t[2]*(n-t[2])+\\cdots+t[a]*(n-t[a])+(n-1)+(1+sum)*(n-sum-1)$$\n\n\u6240\u4ee5\u5728\u6c42\u5272\u70b9\u7684\u8fc7\u7a0b\u4e2d\u6bcf\u9047\u5230\u4e00\u4e2a$low[v]>=dfn[u]$\u4fbf\u628a\u5bf9\u6570\u52a0\u4e0a$t[i]*(n-t[i])$\u6700\u540e\u5047\u5982\u4e0d\u662f\u5272\u70b9\u90a3\u76f4\u63a5\u628a\u5bf9\u6570\u66f4\u65b0\u4e3a$2*(n-1)$\u662f\u5272\u70b9\u5219\u52a0\u4e0a$n-1+(n-sum-1)*(sum+1)$\n\u6700\u540e\u904d\u5386\u8f93\u51fa\u7b54\u6848\u5373\u53ef\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1000010;\ninline int read()\n{\n\tint x=0,t=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')t=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn x*t;\n}\nint n,m,head[maxn],num=0;\nint dfn[maxn],low[maxn],size[maxn],tot=0;\nlong long ans[maxn];\nbool cut[maxn];\nstruct node{\n\tint v,nex;\n}e[maxn];\nvoid add(int u,int v)\n{\n\te[++num].v=v;\n\te[num].nex=head[u];\n\thead[u]=num;\n}\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++tot;\n\tsize[u]=1;\n\tint flag=0,sum=0;\n\tfor(int i=head[u];i;i=e[i].nex)\n\t{\n\t\tint v=e[i].v;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tsize[u]+=size[v];\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif(low[v]>=dfn[u])\n\t\t\t{\n\t\t\t\tans[u]+=(long long)size[v]*(n-size[v]);\n\t\t\t\tsum+=size[v];\n\t\t\t\tflag++;\n\t\t\t\tif(u!=1||flag>1) cut[u]=true;\n\t\t\t}\n\t\t}\n\t\telse low[u]=min(low[u],dfn[v]);\n\t}\n\tif(!cut[u]) ans[u]=2*(n-1);\n\telse ans[u]+=(long long)(n-sum-1)*(sum+1)+(n-1);\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tx=read(),y=read();\n\t\tadd(x,y),add(y,x);\n\t}\n\ttarjan(1);\n\tfor(int i=1;i<=n;i++) printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1527346550,
        "uid": 50976,
        "name": "songhn",
        "ccfLevel": 0,
        "title": "[POI2008] BLO-Blockade"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/9173703.html)\n\n------------\n\n### Solution\n\n\u5148\u8ddf\u6211\u5927\u58f0\u5ff5\uff1a\n\n** poi\uff01**\n \n.\n\n\u7136\u540e\u5f00\u59cb\u5e72\u6b63\u4e8b\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u628a\u9898\u76ee\u4e2d\u7684\u70b9\u5206\u4e3a\u4e24\u7c7b\uff1a**\u53bb\u9664\u8fd9\u4e2a\u70b9\u80fd\u628a\u56fe\u5206\u4e3a\u51e0\u4e2a\u90e8\u5206\u7684\uff0c\u53bb\u9664\u8fd9\u4e2a\u70b9\u4e0d\u5f71\u54cd\u6574\u4e2a\u56fe\u7684\u8fde\u901a\u6027\u7684\u3002**\n\n\u5982\u4e0b\u56fe\uff1a\n\n\u70b9\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8fd9\u4e2a\u70b9\u7684\u641c\u7d22\u5e8f\u3002\n![QAQ](https://cdn.luogu.com.cn/upload/pic/20991.png)\n\n\n.\n\n\u6211\u4eec\u79f0\u8fd9\u4e9b\u5bf9\u8fde\u901a\u6027\u6709\u5f71\u54cd\u7684\u70b9\u4e3a**\u5272\u70b9**\u3002\n\n\u5148\u5047\u8bbe\u6211\u4eec\u80fd\u6c42\u51fa\u8fd9\u4e9b\u70b9\u4ee5\u53ca\u5176\u51fa\u53bb\u540e\u628a\u56fe\u5206\u4e3a\u51e0\u5757\u4e4b\u540e\u90a3\u51e0\u5757\u5206\u522b\u7684\u5927\u5c0f\u3002\n\n.\n\n \n\n\u662f\u4e0d\u662f\u53d1\u73b0\u4e86\u4ec0\u4e48\uff1f\n\n**\u5bf9\u4e8e\u975e\u5272\u70b9\uff0c\u7b54\u6848\u663e\u7136\u662f2*(n-1) **(\u56e0\u4e3a\u5b83\u4e0d\u80fd\u5f71\u54cd\u522b\u7684\u70b9\u5bf9\u8fde\u901a\u6027\uff0c\u80fd\u5f71\u54cd\u7684\u53ea\u662f\u522b\u4eba\u5230\u5b83\u4ee5\u53ca\u5b83\u5230\u522b\u4eba)\n\n\u5bf9\u4e8e\u5272\u70b9\uff0c**\u5b83\u628a\u90a3\u51e0\u5757\u5f04\u5f97\u65e0\u6cd5\u8054\u901a\uff0c\u5373\u90a3\u51e0\u5757\u4e2d\u4e0d\u540c\u5757\u7684\u4e24\u4e2a\u70b9\u80af\u5b9a\u5c31\u65e0\u6cd5\u8054\u901a\u4e86\uff0c\u7b54\u6848\u4e5f\u5c31\u662f\u6bcf\u7ec4\u5757\u7684\u70b9\u7684\u6570\u91cf\u4e92\u76f8\u4e58\u51fa\u6765\uff0c\u518d\u52a0\u4e0a2*(n-1)**\u3002\n\n \n.\n\n\n \n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5982\u4f55\u6c42\u5272\u70b9\u4e86\u3002\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u53c8\u5f97\u8bf7\u51fa\u4f1f\u5927\u7684Tarjan\u4e86\u3002\n\n\u5148\u56de\u5fc6\u4e00\u4e0b\u6c42\u5f3a\u8fde\u901a\u5206\u5757\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u8fd9\u91cc\u6c42\u5272\u70b9\u7684\u505a\u6cd5\u4e0e\u5176\u7c7b\u4f3c\u3002\n\n\u4f46\u6709\u4ee5\u4e0b\u51e0\u70b9\u4e0d\u540c\uff1a\n\n**1.\u6211\u4eec\u5728\u6c42low\u7684\u65f6\u5019\u4e0d\u7528\u8ba8\u8bba\u6240\u8fde\u5411\u7684\u70b9\u662f\u5426\u5728\u6808\u4e2d\u4e86\uff0c\u56e0\u4e3a\u65e0\u5411\u56fe\u4e2d\u6ca1\u6709\u6a2a\u63d2\u8fb9\u7684\u8bf4\u6cd5\uff08\u4f46\u662f\u8981\u8bb0\u5f55\u5f53\u524d\u7684\u7236\u4eb2\uff0c\u9632\u6b62\u6211\u4eec\u7684low\u76f4\u63a5\u8ba1\u7b97\u56de\u53bb\uff09**\n\n**2.\u5f53\u4e00\u4e2a\u70b9\u7684\u67d0\u4e00\u4e2a\u5b69\u5b50\u7684low>=\u6b64\u70b9\u7684dfn\u65f6\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u5c31\u662f\u5272\u70b9\u3002\u56e0\u4e3a\u5b69\u5b50\u7684low\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684dfn\uff0c\u8bf4\u660e\u5b83\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u4ece\u5f53\u524d\u8282\u70b9\u56de\u5230\u641c\u7d22\u6811\u641c\u8fc7\u7684\u8282\u70b9\u3002\u5982\u679c\u5f53\u524d\u8282\u70b9\u5220\u9664\u4e86\uff0c\u6b64\u5b69\u5b50\u5c06\u4f1a\u5206\u5272\u5f00\u6765\uff09\n**\n \n\n \n\n\u81f3\u4e8e\u600e\u4e48\u6c42\u6bcf\u4e2a\u5b69\u5b50\u7684size........\n\n~~\uff08\u6211\u60f3\u8fd9\u4e2a\u5e94\u8be5\u4e0d\u7528\u8bf4\u4e86\u5427\uff09~~\n\n\u5c31\u662f\u641c\u7684\u65f6\u5019\u52a0\u4e0a\u53bb\u5c31\u597d\uff0c\u5982\u679c\u4e0d\u6e05\u695a\u7684\u8bdd\u770b\u4e00\u4e0b\u4ee3\u7801\u5c31\u61c2\u4e86\u3002\n\n \n.\n\n**\u65f6\u95f4\u590d\u6742\u5ea6O(n)\n**\n\n\u5b8c\u5168OjbK\n\n\n------------\n\n### Code\n```cpp\n//Luogu P3469 [POI2008]BLO-Blockade\n//June,11th,2018\n//\u7384\u5e7b\u5272\u70b9\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000+100;\nvector <long long> e[N],nd_size[N];\nint n,m;\nint dfn[N],low[N],IsGD[N],nd_to,size[N];\nvoid Tarjan(int now,int fa)\n{\n\tdfn[now]=low[now]=++nd_to;\n\tsize[now]++;\n\tint temp=0;\n\tfor(int i=0;i<int(e[now].size());i++)\n\t\tif(dfn[e[now][i]]==0)\n\t\t{\n\t\t\tTarjan(e[now][i],now);\n\t\t\tsize[now]+=size[e[now][i]];\n\t\t\tlow[now]=min(low[now],low[e[now][i]]);\n\t\t\tif(low[e[now][i]]>=dfn[now])\n\t\t\t{\n\t\t\t\ttemp+=size[e[now][i]];\n\t\t\t\tIsGD[now]=true;\n\t\t\t\tnd_size[now].push_back(size[e[now][i]]);\n\t\t\t}\n\t\t}\n\t\telse if(e[now][i]!=fa)\n\t\t\tlow[now]=min(low[now],low[e[now][i]]);\n\tif(IsGD[now]==true and n-temp-1!=0)\n\t\tnd_size[now].push_back(n-temp-1);\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\te[i].reserve(4);\n\t\tnd_size[i].reserve(4);\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint s=read(),t=read();\n\t\te[s].push_back(t);\n\t\te[t].push_back(s);\n\t}\n\t\n\tTarjan(1,0);\n\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tlong long ans=2*(n-1);\n\t\tif(nd_size[i].size()!=0 and nd_size[i].size()!=1)\n\t\t{\n\t\t\tfor(int j=0;j<int(nd_size[i].size());j++)\n\t\t\t\tfor(int k=j+1;k<int(nd_size[i].size());k++)\n\t\t\t\t\tans+=2*nd_size[i][j]*nd_size[i][k];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n\n```\n",
        "postTime": 1528792314,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u9053\u9898\u3002\n\n\u601d\u8003\u4e00\u4e0b\u6211\u4eec\u8981\u600e\u6837\u505a\u5462\uff1f\uff1f\n\n\u770b\u5230\u9898\u76ee\uff1a\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u56fe\uff0c\u6c42\u6bcf\u4e2a\u70b9\u88ab\u5c01\u9501\u4e4b\u540e\u6709\u591a\u5c11\u4e2a\u6709\u5e8f\u70b9\u5bf9(x,y)(x!=y,1<=x,y<=n)\u6ee1\u8db3x\u65e0\u6cd5\u5230\u8fbey\u4ee5\u540e\u5927\u4f6c\u4eec\u5c31\u5e94\u8be5\u731c\u5230\u4e86\u8fd9\u9053\u9898\u7684\u5927\u81f4\u505a\u6cd5\uff1a\u56fe\u8bba\u3002\n\n\u6211\u4eec\u770b\u5230\u6837\u4f8b\u4ee5\u540e\u80af\u5b9a\u4e8b\u5148\u4e0d\u7ba1\u4ed6\u4e09\u4e03\u4e8c\u5341\u4e00\uff0c\u5148\u8fde\u8d77\u8fb9\u6765\u518d\u8bf4\u3002\u3002\n\n\u4f46\u662f\u8fde\u5b8c\u8fb9\u4ee5\u540e\u5462\uff1f\uff1f\n\n\u6709\u4f4d\u5927\u4f6c\u8bf4\uff1a\u6211\u4eec\u8fde\u8d77\u8fb9\u4ee5\u540e\u5148\u628a\u4e0e\u8fd9\u4e2a\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u8fb9\u5220\u6389\uff0c\u7136\u540e\u518d\u5224\u65ad\u6709\u51e0\u5757\u8054\u901a\u5feb\uff0c\u53c8\u56e0\u4e3a\u6bcf\u4e00\u5757\u8054\u901a\u5feb\u5185\u7684\u6240\u6709\u70b9\u53c8\u90fd\u662f\u8054\u901a\u7684\uff0c\u6240\u4ee5\u6bcf\u4e00\u5757\u8054\u901a\u5757\u6240\u4e0d\u80fd\u5230\u8fbe\u7684\u5c31\u662f\u4e0e\u4ed6\u4e0d\u8fde\u901a\u7684\u6bcf\u4e00\u5757\u7684\u70b9\u6570\uff0c\u7d2f\u52a0\u5c31\u597d\u4e86\uff0c\u4f46\u7531\u4e8e\u6570\u636e\u592a\u5927\uff0c\u6211\u4eec\u5c31\u8981\u7528\u6811\u5f62dp\u6765\u4f18\u5316\u3002\u3002\u3002\u3002\n\n\u4f46\u849f\u84bb\u8868\u793a\u5e76\u4e0d\u4f1a\u6811\u5f62dp\u554a\u3002\u3002\u3002\u3002\n\n\u54ce\uff0c\u65e0\u5948\u53ea\u80fd\u8003\u8651\u522b\u7684\u505a\u6cd5\u4e86\u3002\u3002\u3002\u3002\n\n\u6211\u4eec\u5148\u6765\u770b\u5bf9\u4e8e\u88ab\u5272\u6389\u7684\u8fd9\u4e2a\u70b9\u6765\u8bf4\u4ed6\u6240\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u6070\u597d\u662f\u6574\u5f20\u56fe\u4e0a\u6240\u6709\u7684\u70b9\uff08\u9664\u5979\u81ea\u5df1\u4e4b\u5916\uff08\u5e9f\u8bdd\uff0c\u4ed6\u80af\u5b9a\u80fd\u81ea\u5df1\u5230\u8fbe\u81ea\u5df1\u4e86\uff01\uff01\uff09\uff09\u8fd9\u6837\u4ed6\u6240\u4e0d\u80fd\u8054\u901a\u7684\u5171\u6709\uff1a\u4ece\u4ed6\u51fa\u53bb\u5230\u6240\u6709\u7684\u70b9\uff0c\u4ece\u6240\u6709\u7684\u70b9\u51fa\u53bb\u5230\u4ed6\uff0c\u4e5f\u5c31\u662f\u8bf4\u5171\u6709\uff1a\uff08n-1\uff09\\*2\u5bf9\u3002\n\n\u518d\u5c31\u662f\u5bf9\u4e8e\u5176\u4ed6\u7684\u8054\u901a\u5feb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u70b9\u51fa\u53d1\u5230\u8fbe\u7684\u70b9\u7136\u540e\u518d\\*2\u5c31\u597d\u4e86\u3002\u3002\n\n\u53c8\u6709\u4eba\u8981\u95ee\u4e86\uff1a\u600e\u6837\u9884\u5904\u7406\uff1f\uff1f\uff1f\uff01\uff01\n\n\u6211\u4eec\u6765\u6837\u4f8b\u6765\u770b\u4e00\u4e0b\uff1b\uff1b\n\n\u5bf9\u4e8e\u5272\u6389\u70b93\u6765\u8bf4\uff1a\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u662f\u8fd9\u6837\u6765\u7684\u5462\uff1f\uff1f\n\n\u5272\u6389\u70b9\u4e09\u4e4b\u540e\uff1a\u6211\u4eec\u628a\u6574\u5f20\u56fe\u5206\u6210\u4e86\u8fd9\u6837\u4e09\u90e8\u5206\uff1a\uff081,2\uff09\uff0c\uff083\uff09\uff0c\uff084,5\uff09\u3002\n\n\u70b91\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u5c31\u662f\uff081\uff0c3\uff09\uff081,4\uff09\uff081\uff0c5\uff09\uff1b\n\n\u70b92\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u4e3a\uff082,3\uff09\uff0c\uff082,4,\uff09\uff082,5\uff09\n\n\u70b93\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u4e3a\uff08\uff083,1\uff09\uff0c\uff083,2\uff09\uff0c\uff083,4,\uff09\uff0c\uff083,5\uff09\n\n\u70b94.\u3002\u3002\u3002\u3002\u3002\u3002\u3002\uff08\uff084\uff0c1\uff09\uff084,2\uff09\uff084,3\uff09\n\n\u70b95.\u3002\u3002\u3002\u3002\u3002\u3002\u3002\uff085,1\uff09\uff085,2\uff09\uff085,3\uff09\n\n\u7531\u4e8e\u6211\u4eec\u8981\\*2\u561b\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5730\u65b9\u6211\u4eec\u53ea\u80fd\u51fa\u5df2\u6210\u4e00\u5bf9\u7684\u5f62\u5f0f\n\n\u8fd9\u6837\u5c31\u8fd8\u5269\u4e0b\uff081,3\uff09\uff081,4\uff09\uff081,5\uff09\uff082,3\uff09\uff082,4\uff09\uff082,5\uff09\uff083,4\uff09\uff083,5\uff09\n\n\u770b\u770b\u8fd9\u4e9b\uff0c\u4f60\u80fd\u53d1\u73b0\u4ec0\u4e48\uff1f\uff01\n\n\u662f\u4e0d\u662f\u8fd9\u6837\u5bf9\u4e8e\u8fd9\u4e2a\u56fe\u6765\u8bf4\u597d\u7406\u89e3\u4e00\u4e9b\n\n\uff08\u53cd\u638c\u6211\u662f\u6ca1\u592a\u7406\u89e3\u3002\u3002\u3002\uff09\n\n\n\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528\u522b\u7684\u6765\u505a\uff1a\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u51fa\u53bb\u4ed6\u6240\u5230\u8fbe\u7684\u548c\u80fd\u5230\u8fbe\u5b83\u7684\u4e4b\u5916\u3002\u5269\u4e0b\u7684\u5c31\u662f\u4ed6\u76f8\u8fde\u7684\u8054\u901a\u5757\u4e4b\u95f4\u7684\u76f8\u8fde\u7684\u4e86\u3002\n\n\u6211\u4eec\u5728\u6765\u5904\u7406\u8fd9\u4e00\u90e8\u5206\u3002\u5728tarjan\u91cc\u9762\uff0c\u6211\u4eec\u5904\u7406\u51fa\u8fd9\u4e2a\u70b9\u6240\u80fd\u5230\u8fbe\u4e14\u662f\u4ed6\u7684\u5b50\u6811\u7684\u7684\u8054\u901a\u5757\u7684\u5927\u5c0f\uff0c\u8fd9\u6837\u4ed6\u7684\u7236\u4eb2\u6811\u7684\u5927\u5c0f\u5c31\u4e3a\u603b\u70b9\u6570\u51cf\u53bb\u8fd9\u4e2a\u70b9\u51cf\u53bb\u4ed6\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5373n-1-size[i]   i\u4e3a\u5f53\u524d\u70b9\u3002 \u8fd9\u6837\u6211\u4eec\u53c8\u80fd\u5f97\u77e5\u4ed6\u4eec\u4e4b\u95f4\u4e0d\u80fd\u76f8\u8fde\u7684\u70b9\u6570\u5c31\u662f\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u5185\u7684\u4e2a\u6570\\*\u5854\u5b50\u6811\u8282\u70b9\u5185\u7684\u4e2a\u6570\u3001\u3002\u5373ans\u3010i\u3011=t\\*\uff08n-t-1\uff09 t=size[i]  \u8fd9\u6837\u6211\u4eec\u6c42\u51fa\u4e86\u4ece\u8be5\u70b9\u5916\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\u7684\u5bf9\u6570\n\n\u518d\u52a0\u4e0a\u5b83\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u5bf9\u6570\u5c31\u662f\u4e86\u3002\u4e0d\u8fc7\u8fd9\u91cc\u6211\u4eec\u5904\u7406\u51fa\u6765\u7684\u662f\u5355\u5411\u5230\u8fbe\uff0c\u6211\u4eec\u5728\u8f93\u51fa\u65f6\u518d\u4e58\u4ee5\u4e8c\u5c31\u597d\u4e86\uff01\uff01\n\n\n\u770b\u770b\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define N 100005\n#define ll long long \nusing namespace std;\nint n,m,x,y,tot,tim;\nint dfn[N],low[N],size[N],head[N],cut_point[N];\nll ans[N];\nint read()\n{\n    int x=0,f=1; char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') f=-1; ch=getchar();}\n    while(ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nstruct Edge\n{\n    int from,next,to;\n}edge[1000005];\nvoid add(int x,int y)\n{\n    tot++;\n    edge[tot].to=y;\n    edge[tot].next=head[x];\n    head[x]=tot;\n}\nint tarjan(int now)\n{\n    int z=0;size[now]=1;\n    dfn[now]=low[now]=++tim;\n    for(int i=head[now];i;i=edge[i].next)\n    {\n        int t=edge[i].to;\n        if(!dfn[t])\n        {\n            tarjan(t);\n            size[now]+=size[t];\n            low[now]=min(low[now],low[t]);\n            if(dfn[now]<=low[t])\n            {\n                ans[now]+=(ll)z*size[t];\n                z+=size[t];\n            }\n        }\n        else low[now]=min(low[now],dfn[t]);\n    }\n    ans[now]+=(ll)z*(n-z-1);\n}\nint main()\n{\n    n=read();m=read();\n    for(int i=1;i<=m;i++)\n     x=read(),y=read(),add(x,y),add(y,x);\n    tarjan(1);\n    for(int i=1;i<=n;i++)\n      printf(\"%lld\\n\",(ans[i]+n-1)<<1);\n    return 0;\n}\n\n```",
        "postTime": 1498270513,
        "uid": 43615,
        "name": "QwQ_operator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u597d\u50cf\u91cd\u70b9\u8bb2\u6570\u5b66\u548c\u56fe\u8bba\u7684\u90fd\u6709\uff0c\u7136\u800c\u5e76\u6ca1\u6709\u4e24\u4e2a\u90fd\u8be6\u7ec6\u8bb2\u7684\u3002\u3002\u3002  \n\n\u6240\u4ee5\u4f5c\u4e3a\u6211\u5c11\u6709\u7684\u4e0d\u770b\u9898\u89e3A\u6389\u7684\u7d2b\u9898\uff0c\u5341\u5206\u6709\u5fc5\u8981\u5199\u4e00\u7bc7\u9898\u89e3\u65b9\u4fbf\u81ea\u5df1\u548c\u5404\u4f4d\u5927\u4f6c\u3002\u3002\u3002\n\n------\n\n### \u9898\u610f\uff1a  \n\n\u200b\t\t\u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u8054\u901a\u56fe$(V,E)$\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9$P\\in V$\uff0c\u6c42\u5f53$P$\u4e0d\u80fd\u88ab\u7ecf\u8fc7\u65f6\u6ee1\u8db3$u,v$\u4e0d\u8fde\u901a\u7684\u6709\u5e8f\u70b9\u5bf9\u6570\u3002  \n\n------\n\n### \u9898\u89e3\uff1a  \n\n\u4e00\u9053\u5341\u5206\u9002\u5408\u7ec3\u4e60$Tarjan$\u7684\u56fe\u8bba\u9898\u3002  \n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8003\u8651\u5c06\u5176\u5220\u9664\u5bf9\u56fe\u4f1a\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\uff0c\u8fdb\u800c\u8ba1\u7b97\u7b54\u6848\u3002  \n\n------\n\n\u4e0d\u662f\u5272\u70b9\uff1a~~\u663e\u7136\u53ea\u662f\u5c11\u4e86\u4e2a\u70b9\u800c\u5df2\uff0c~~\u7b54\u6848\u5c31\u662f$2(n-1)$\u3002  \n\n\u662f\u5272\u70b9\uff1a~~\u8fd8\u662f\u5c11\u4e86\u4e00\u4e2a\u70b9~~  \n\n\u5220\u9664\u5272\u70b9\u5c06\u4f1a\u5bfc\u81f4\u6574\u4e2a\u56fe\u53d8\u6210\u591a\u4e2a\u8054\u901a\u5757\u3002\u5bb9\u6613\u53d1\u73b0\u4e0d\u540c\u8054\u901a\u5757\u5185\u7684\u70b9\u4e4b\u95f4\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\u3002  \n\n\u5373\u5927\u5c0f\u4e3a$size_a,size_b$\u7684\u4e24\u4e2a\u8054\u901a\u5757\u5bf9\u7b54\u6848\u4ea7\u751f$2 size_a size_b$\u7684\u8d21\u732e\u3002\n\n\u90a3\u4e48\u8bbe\u5168\u56fe\u6709$n$\u4e2a\u70b9\uff0c\u5220\u9664\u8be5\u5272\u70b9\u4ea7\u751f$k$\u4e2a\u8054\u901a\u5757\uff0c\u5219\u7b54\u6848\u5c31\u662f\u8054\u901a\u5757\u4e24\u4e24\u914d\u5bf9\u4ea7\u751f\u7684\u8d21\u732e\u4e4b\u548c\u3002  \n\n\u5373$2(n-1)+\\sum_{i=1}^k \\sum_{j=1,j\\neq i}^{k}size_i \\times size_j$  \n\n\u8fd9\u91cc\u9700\u8981$O(n^2)$\u5377\u8d77\u6765\uff0c\u9047\u5230\u83ca\u82b1\u56fe\u5c31\u51c9\u4e86\u3002\u3002\u3002  \n\n\u8003\u8651\u4f18\u5316\uff0c\u663e\u7136$\\sum_{j=1,j\\neq i}^k size_j =n-size_i-1$  \n\n\u6240\u4ee5\u4e0a\u5f0f\u5316\u4e3a$2(n-1)+\\sum_{i=1}^k size_i \\times( n-size_i-1 )$  \n\n\u4e0d\u662f\u5272\u70b9\u53ef\u4ee5\u8ba4\u4e3a\u5272\u6389\u4ee5\u540e\u4ea7\u751f\u4e00\u4e2a\u5927\u5c0f\u4e3a$1$\u7684\u8054\u901a\u5757\uff0c\u4e0d\u5fc5\u5355\u72ec\u5904\u7406\u3002\n\n------\n\n\u8003\u8651$Tarjan$\u5982\u4f55\u6c42\u8054\u901a\u5757\u5927\u5c0f\u3002  \n\n$Tarjan$\u5b9e\u9645\u4e0a\u662f\u5728$dfs$\u751f\u6210\u6811\u4e0a\uff0c\u5229\u7528$dfn$\u548c$low$\u5bf9\u8fd4\u7956\u8fb9\u8fdb\u884c\u6807\u8bb0\u3002  \n\n\u6240\u4ee5\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u53ef\u4ee5\u5206\u6210\u4e24\u7c7b\uff1a\u5b58\u5728\u8fd4\u7956\u8fb9\u6216\u4e0d\u5b58\u5728\u3002  \n\n\u5bf9\u4e8e\u524d\u8005\uff0c\u5272\u6389\u8be5\u70b9\u5e76\u4e0d\u5f71\u54cd\u8fde\u901a\u6027\uff0c\u6240\u4ee5\u548c\u7956\u5148\u7b97\u4f5c\u4e00\u4e2a\u8054\u901a\u5757\uff1b  \n\n\u5bf9\u4e8e\u540e\u8005\uff0c\u5272\u6389\u8be5\u70b9\u5c06\u4f7f\u5f97\u5176\u53d8\u4e3a\u72ec\u7acb\u7684\u8054\u901a\u5757\uff0c\u6240\u4ee5\u5728\u641c\u7d22\u65f6\u987a\u4fbf\u8ba1\u7b97$size$\u3002  \n\n\u4e8e\u662f\u53ef\u4ee5\u65b9\u4fbf\u5730\u7b97\u51fa\u540e\u8005\u7684$size$\u4e4b\u548c$sum$\uff0c\u800c\u524d\u8005\u603b\u5927\u5c0f\u5373\u4e3a$n-sum-1$\u3002  \n\n\u5728\u641c\u7d22\u65f6\u4e00\u8fb9\u7d2f\u52a0$sum$\uff0c\u4e00\u8fb9\u7d2f\u52a0\u7b54\u6848\uff0c\u6700\u540e\u52a0\u4e0a$n-1$\uff0c\u5f97\u5230\u7684\u662f\u65e0\u5e8f\u70b9\u5bf9\u7684\u4e2a\u6570\u3002  \n\n\u8f93\u51fa\u65f6\u4e58\u4ee5\u4e8c\u5373\u53ef\u3002\u3002\u3002  \n\n------\n\n### \u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing std::freopen;\nusing std::fread;\nusing std::scanf;\nusing std::printf;\nusing std::min;\n\nchar gc()\n{\n\tstatic char buf[1<<18],*p1=buf,*p2=buf;\n\tif(p1==p2)\n\t{\n\t\tp2=(p1=buf)+fread(buf,1,1<<18,stdin);\n\t\tif(p1==p2)return EOF;\n\t}\n\treturn *p1++;\n}\ntemplate<typename _Tp>\nvoid read(_Tp& x)\n{\n\tx=0;\n\tchar c=gc();\n\twhile(c<'0'||c>'9')c=gc();\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+(c^48);\n\t\tc=gc();\n\t}\n}\ntemplate<typename _Tp>\nvoid write(_Tp x)\n{\n\tif(x>=10)write(x/10);\n\tputchar((x%10)^48);\n}\n\nconst int N=100005,M=500005;\n\nint n,m;\n\nint head[N],dfn[N],low[N];\nint size[N];\nlong long ans[N];\n\nstruct Edge\n{\n\tint next,to;\n};\nEdge E[M<<1];\n\n\nint tot;\nvoid add(int u,int v)\n{\n\tE[++tot].next=head[u];\n\tE[tot].to=v;\n\thead[u]=tot;\n}\n\nint cnt;\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++cnt;\n\tlong long sum=0;\n\tsize[u]=1;\n\tfor(int i=head[u];i;i=E[i].next)\n\t{\n\t\tint v=E[i].to;\n\t\tif(!dfn[v])\n\t\t{\n\t\t\ttarjan(v,u);\n\t\t\tsize[u]+=size[v];\n\t\t\tif(low[v]>=dfn[u])//\u5224\u65ad\u4e0d\u5b58\u5728\u8fd4\u7956\u8fb9\u7684\u60c5\u51b5\n\t\t\t{\n\t\t\t\tans[u]+=size[v]*sum;//\u8ba1\u7b97\u8fd9\u4e00\u68f5\u5b50\u6811\u7684\u8d21\u732e\n\t\t\t\tsum+=size[v];\n\t\t\t}\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t\t}\n\t}\n\tans[u]+=(n-sum-1)*sum;//\u522b\u5fd8\u4e86\u8ba1\u7b97\u5269\u4e0b\u7684\u70b9\u4ea7\u751f\u7684\u8d21\u732e\uff01\n\tans[u]+=n-1;\n}\n\nint main()\n{\n\tread(n),read(m);\n\tfor(int i=0;i<m;++i)\n\t{\n\t\tint u,v;\n\t\tread(u),read(v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\ttarjan(1);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\twrite(ans[i]*2);//\u4e4b\u524d\u6c42\u51fa\u65e0\u5e8f\u70b9\u5bf9\uff0c\u8fd9\u91cc\u4e582\n\t\tputchar('\\n');\n\t}\n}\n```\n\n------\n\nP.S. \u8fd9\u9898\u88ab\u6211\u6821ZJOI2018 rk2\u795e\u4ed9\u62ff\u6765\u51fa\u6a21\u62df\u8d5b\uff0c\u7ed3\u679c\u6570\u636e\u51fa\u73b0\u8d1f\u6570\u5bfc\u81f4\u51e0\u4e4e\u6240\u6709\u539f\u672cA\u6389\u8fd9\u9898\u7684\u4eba\u720650\u3002\u3002\u3002",
        "postTime": 1556448323,
        "uid": 60489,
        "name": "\u5c0f\u83dc\u9e1f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3469"
    },
    {
        "content": "[${\\color{orange}\\text{\u6b22\u8fce\u62dc\u8bbf\u6211\u8fd9\u4e2a\u849f\u84bb\u7684\u535a\u5ba2}}$](https://www.luogu.org/blog/wzc-wwwwd/)\n\n[P3469 \u3010\\[POI2008\\]BLO-Blockade\u3011](https://www.luogu.org/problem/P3469)\n\n\n\u6837\u4f8b\u2193\n\n![](https://s2.ax1x.com/2019/10/04/uD0bdA.jpg)\n\n### \u6b64\u9898\u7b97\u6cd5:tarjan\u5272\u70b9\n\n~~\u6b64\u9898\u96be\u96be~~\u5927\u81f4\u601d\u8def:\n\n>1.$ $\u8f93\u5165\u53cc\u5411\u8fb9\uff0c\u5e76\u4f9d\u6b21tarjan(i,1)\n\n```cpp\nvoid tarjan(int x,int r){\n//r\u8868\u793a\u6839\uff0c\u5224\u65ad\u5272\u70b9\u65f6\u9700\u8981\n```\n\n>2.$ $\u4f20\u7edftarjan\u5272\u70b9\n\n```cpp\n\tdfn[x]=low[x]=++ind;\n\tint sub=0; //\u5b50\u6811\u6570\u76ee\n\tong tmp=0; //\u53d8\u91cf\u8bb0\u5f55\u65e0\u6cd5\u4e0e\u7956\u5148\u8282\u70b9\u76f8\u8fde\u7684\"\u771f\u5b50\u8282\u70b9\"\u603b\u6570\n\tsize[x]=1;\n\tfor(int i=g[x];i;i=e[i].nex){\n\t\tint to=e[i].adj;\n\t\tif(!dfn[to]){\n\t\t\tfa[to]=x; //\u8bb0\u5f55\u7236\u4eb2\u8282\u70b9\n\t\t\ttarjan(to,r);\n\t\t\tsize[x]+=size[to]; \u8be5dfs\u5b50\u6811\u5927\u5c0f\n\t\t\tlow[x]=min(low[x],low[to]);\n\t\t\tif(low[to]>=dfn[x]&&x!=r){ //x\u4e3a\u5272\u70b9\n\t\t\t\tcut[x]=1;\n\t\t\t\ttmp+=size[to]; \n\t\t\t} if(x==r)\n\t\t\t\tsub++;\n\t\t} low[x]=min(low[x],dfn[to]);\n\t} if(sub>=2&&x==r) //x\u4e3a\u5272\u70b9\n\t\tcut[x]=1;\n```\n\n\n>3.$ $\u5728tarjan\u4e2d\u8ba1\u7b97\u7b54\u6848\u3002\n\n```cpp\n\tans[x]=2*(n-1); //\u672c\u8eab\u51cf\u5c11\u7684\u8bbf\u95ee\u6b21\u6570\n\tif(cut[x]){\n\t\tif(x==r)\n\t\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\t\tint to=e[i].adj;\n\t\t\t\tif(fa[to]==x)\n\t\t\t\t\tans[x]+=size[to]*(n-size[to]-1);\n\t\t\t} //\u5982\u679cx\u4e3a\u6839\u8282\u70b9\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u5b50\u6811\u5c11\u62dc\u8bbf\u6b21\u6570\uff0c\u4e0b\u56fe1\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u6709\u4e9b\u8ddf\u6839\u8054\u901a\u7684\u8282\u70b9\u4e0d\u662f\u4ed6\u7684\u5b50\u6811\n\t\telse {\n\t\t\tans[x]+=tmp*(n-tmp-1)*2;\n\t\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\t\tint to=e[i].adj;\n\t\t\t\tif(low[to]>=dfn[x]&&fa[to]==x) //\u771f\u5b50\u6811\n\t\t\t\t\tans[x]+=size[to]*\n\t\t\t\t\t(tmp-size[to]);\n\t\t\t}\n\t\t} //\u5982\u56fe2\uff0c\u5982\u679cx\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u7b54\u6848\u8981\u52a0\u4e0a(1)\u6240\u6709\u771f\u5b50\u6811\u548c\u5176\u4f59\u70b9\u7684\u4e58\u79ef(\u53bb\u6389x)*2,(2)\u771f\u5b50\u6811\u4e4b\u95f4\u51cf\u5c11\u7684\u8bbf\u95ee\u6b21\u6570\n\t}\n}\n```\n\u56fe1\n![](https://s2.ax1x.com/2019/10/04/uDDJNn.jpg)\n\n\u56fe2\n![](https://s2.ax1x.com/2019/10/04/uDy910.jpg)\n\n\n>4.$ $\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9$i$\u5bf9\u5e94\u7684\u7b54\u6848$ans[i]$\u3002\n\n>\u203b$ $\u6570\u7ec4$ans$\u548c$size$\u8981\u5f00$long\\space long$\n\n## \u4ee5\u4e0b\u662f\u5168\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define ong long long \nconst int N=1e5+10,M=N*10;\nint n,m;\nint top,g[N],fa[N];\nstruct edge{\n\tint adj,nex;\n}e[M];\nvoid add(int x,int y){\n\te[++top]=(edge){\n\t\ty,g[x]\n\t}; g[x]=top;\n} int ind,dfn[N],low[N];\nong size[N],ans[N];\nbool cut[N];\nvoid tarjan(int x,int r){\n\tdfn[x]=low[x]=++ind;\n\tint sub=0; ong tmp=0;\n\tsize[x]=1;\n\tfor(int i=g[x];i;i=e[i].nex){\n\t\tint to=e[i].adj;\n\t\tif(!dfn[to]){\n\t\t\tfa[to]=x;\n\t\t\ttarjan(to,r);\n\t\t\tsize[x]+=size[to];\n\t\t\tlow[x]=min(low[x],low[to]);\n\t\t\tif(low[to]>=dfn[x]&&x!=r){\n\t\t\t\tcut[x]=1;\n\t\t\t\ttmp+=size[to];\n\t\t\t} if(x==r)\n\t\t\t\tsub++;\n\t\t} low[x]=min(low[x],dfn[to]);\n\t} if(sub>=2&&x==r)\n\t\tcut[x]=1;\n\tans[x]=2*(n-1);\n\tif(cut[x]){\n\t\tif(x==r)\n\t\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\t\tint to=e[i].adj;\n\t\t\t\tif(fa[to]==x)\n\t\t\t\t\tans[x]+=size[to]*(n-size[to]-1);\n\t\t\t}\n\t\telse {\n\t\t\tans[x]+=tmp*(n-tmp-1)*2;\n\t\t\tfor(int i=g[x];i;i=e[i].nex){\n\t\t\t\tint to=e[i].adj;\n\t\t\t\tif(low[to]>=dfn[x]&&fa[to]==x)\n\t\t\t\t\tans[x]+=size[to]*\n\t\t\t\t\t(tmp-size[to]);\n\t\t\t}\n\t\t}\n\t}\n} int main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b); add(b,a);\n\t} for(int i=1;i<=n;i++)\n\t\tif(!dfn[i])\n\t\t\ttarjan(i,1);\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%lld\\n\",ans[i]);\n\treturn 0;\n} \n```\n\n\u4e0d\u5f00$long \\space long$\u89c1\u7956\u5b97\n\n\u8c22\u8c22\u5927\u5bb6! !\n",
        "postTime": 1570178631,
        "uid": 118365,
        "name": "George1123",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u5728\u8fd9\u91cc\u7ed9\u4e07\u5343OIER tarjan\u7b97\u6cd5\u7684\u4e00\u4e2a\u89e3\u91ca\uff08~~\u5305\u62ec\u6211\u81ea\u5df1~~\uff09\n\n\u4ee5\u4e0b\u601d\u8def\u6765\u6e90\u4e8e\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\uff1a\n\n## \u65f6\u95f4\u6233\n\n\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u4e2d\u7b2c\u4e00\u6b21\u8bbf\u95ee\u7684\u65f6\u95f4\u987a\u5e8f\n\n## \u641c\u7d22\u6811\n\n\u4efb\u9009\u4e00\u70b9dfs\u904d\u5386\uff0c\u6240\u6709\u9012\u5f52\u7684\u8fb9\u7ec4\u6210\u4e00\u68f5\u641c\u7d22\u6811\n\n\u5982\u56fe\uff1a[\u4f5c\u56fe\u5de5\u5177](https://csacademy.com/app/graph_editor/)\n\n\u539f\u56fe\uff08~~\u5947\u5947\u602a\u602a\u4e0d\u8981\u602a\u6211~~\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/r23jwl64.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u641c\u7d22\u6811\uff08\u770b\u8d77\u6765\u4f1a\u597d\u5f88\u591a\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/2jwu0phu.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n## \u8ffd\u6eaf\u503c\uff08low\uff09\n\n1.\u82e5\u641c\u7d22\u6811\u4e0ax\u662fy\u7684\u7236\u8282\u70b9\uff1alow[x]=min(lox[x],low[x])\n\n2.\u82e5\u65e0\u5411\u56fe\u4e2d\uff08x,y\uff09\u4e0d\u662f\u641c\u7d22\u6811\u7684\u8fb9\uff1alow[x]=min(lox[x],dfn[y])\n\n# \u4e0b\u9762\u6b65\u5165\u6b64\u9898\u6b63\u89e3\n\n\u5f15\u5165\u65b0\u6982\u5ff5\uff1a\u5272\u70b9\n\n\u5272\u70b9\u7684\u610f\u601d\u662f\u53ea\u8981\u628a\u8fd9\u70b9\u6d88\u53bb\uff0c\u6b64\u56fe\u5c31\u4f1a\u4e0d\u8fde\u901a\n\n\u548c\u8fd9\u9898\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\uff0c\u9898\u91cc\u5e94\u8be5\u4e5f\u7ed9\u7684\u5f88\u660e\u767d\n\n\u5272\u70b9\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define Maxn 200005\n#define next Next\nusing namespace std;\nll read()\n{\n\tll r=0,f=1;char c=getchar();\n\twhile((c<'0'||c>'9')&&(c!='-')) c=getchar();\n\tif(c=='-') f=-1,c=getchar();\n\twhile(c>='0'&&c<='9') r=(r<<1)+(r<<3)+c-'0',c=getchar();\n\treturn r*f;\n}\nll tot,n,m,ver[Maxn],next[Maxn],head[Maxn],dfn[Maxn],low[Maxn],stac[Maxn];\nbool cut[Maxn];\nvoid add(ll x,ll y,ll z)\n{\n\tver[++tot]=y;\n\tnext[tot]=head[x];\n\thead[x]=tot;\n}\nvoid tarjan(ll x)\n{\n\tdfn[x]=low[x]=++num;\n\tll flag=0;\n\tfor(int i=head[x];i;i=next[i])\n\t{\n\t\tll y=ver[i];\n\t\tif(!dfn[y])\n\t\t{\n\t\t\ttarjan(y);\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t\tif(low[y]>=dfn[x])\n\t\t\t{\n\t\t\t\tflag++;\n\t\t\t\tif(x!=root||flag>1) cut[x]=true;\n\t\t\t}\n\t\t}\n\t\telse low[x]=min(low[x],dfn[y]);\n\t}\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t if(!dfn[i]) root=i,tarjan(i);//\u8bb0\u5f97\u8981root=i\n\tfor(int i=1;i<=n;i++)\n\t\tif(cut[i]) printf(\"%d \",i);\n\tputs(\"are cut vertexes\");\n\treturn 0;\n}\n```\n\n\u5728\u6b64\u9898\u4e2d\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\n\n1.\u6b64\u70b9\u4e0d\u662f\u5272\u70b9\uff1a\u6211\u4eec\u628a\u6240\u6709\u4e0e\u8fd9\u70b9\u6709\u5173\u7684\u8fb9\u5168\u90e8\u5220\u9664\uff0c\u603b\u8ba1n-1\uff0c\u53c8\u56e0\u4e3a(x,y)\u548c(y,x)\u7b97\u4e24\u79cd\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u662f$2*(n-1)$\n\n2.\u6b64\u70b9\u662f\u5272\u70b9\uff0c\u5220\u6389\u8fd9\u4e2a\u5272\u70b9\u540e\uff0c\u4e0d\u8fde\u901a\u7684\u6709\u5e8f\u6570\u91cf\u4e3a\uff08\u8fd9\u4e2a\u5f0f\u5b50\u662f\u770b\u4e66\u4f1a\u7684\uff09\uff1a\n\n\u5047\u8bbesize[x]\u4e3a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff1a\n\n\u90a3\u4e48$size[s1]*(n-size[s1])+size[s2]*(n-size[s2])+......$\n\n\u5982\u6b64\u7d2f\u52a0\uff0c\u7528\u4e00\u4e2asum\u8bb0\u5f55\u5373\u53ef\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define Maxn 1000005\n#define next Next\nusing namespace std;\nll read()\n{\n\tll r=0,f=1;char c=getchar();\n\twhile((c<'0'||c>'9')&&(c!='-')) c=getchar();\n\tif(c=='-') f=-1,c=getchar();\n\twhile(c>='0'&&c<='9') r=(r<<1)+(r<<3)+c-'0',c=getchar();\n\treturn r*f;\n}\nll ans[Maxn],size[Maxn],num,root,tot,n,m,ver[Maxn],next[Maxn],head[Maxn],dfn[Maxn],low[Maxn],stac[Maxn];\nbool cut[Maxn];\nvoid add(ll x,ll y)\n{\n\tver[++tot]=y;\n\tnext[tot]=head[x];\n\thead[x]=tot;\n}\nvoid tarjan(ll x)\n{\n\tdfn[x]=low[x]=++num;\n\tll flag=0,sum=0;\n\tsize[x]=1;\n\tfor(int i=head[x];i;i=next[i])\n\t{\n\t\tll y=ver[i];\n\t\tif(!dfn[y])\n\t\t{\n\t\t\ttarjan(y);\n\t\t\tsize[x]+=size[y];\n\t\t\tlow[x]=min(low[x],low[y]);\n\t\t\tif(low[y]>=dfn[x])\n\t\t\t{\n\t\t\t\tflag++;\n\t\t\t\tans[x]+=size[y]*(n-size[y]);\n\t\t\t\tsum+=size[y];\n\t\t\t\tif(x!=root||flag>1) cut[x]=true;\n\t\t\t}\n\t\t}\n\t\telse low[x]=min(low[x],dfn[y]);\n\t}\n\tif(cut[x]) ans[x]+=(n-sum-1)*(sum+1)+(n-1);\n\telse ans[x]=2*(n-1);\n}\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tll x=read(),y=read();\n\t\tif(x==y) continue;\n\t\tadd(x,y);\n\t\tadd(y,x);\n\t}\n\ttarjan(1);\n\tfor(int i=1;i<=n;i++)\n\t printf(\"%lld\\n\",ans[i]);\n\treturn 0;\n}\n```\n\n\u6ce8\u610f\u4e8b\u9879\uff1a\n\n1.\u6570\u7ec4\u5f00\u5927\uff08\u4e0d\u713680\uff0c\u4eb2\u8eab\u8bd5\u9a8c\uff09\n\n2.\u6ce8\u610flong long\uff08\u6700\u597d\u5f00\u7740\uff0c\u9664\u975e\u7a7a\u95f4\u70b8\u4e86\uff09\n\n# \u5b8c\u7ed3\u6492\u82b1\uff01\uff01\uff01",
        "postTime": 1573609621,
        "uid": 138649,
        "name": "\u7237\uff0c\u65e0\u9650\u9738\u6c14",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u521a\u5199\u5b8c\u6a21\u677f\u9898\u6765\u5237\u8fd9\u9898\uff0c\u987f\u65f6\u8fde\u9898\u89e3\u90fd\u6ca1\u770b\u5c31\u6709\u601d\u8def\u4e86\n\n\u53ea\u4e0d\u8fc7wa\u4e86\u597d\u591a\u53d1\uff0c\u5176\u5b9e\u53ef\u80fd\u56e0\u4e3a\u6570\u636e\u5f31\uff0c\u6211\u8fd9\u4e2a\u5bf9\u4e8e\u91cd\u8fb9\u5176\u5b9e\u662f\u6ca1\u6cd5\u5f88\u597d\u7684\u5904\u7406\u7684\n\n\u6211\u5982\u679c\u8981\u4e0d\u662f\u5272\u70b9\u7684\u8bdd \u90a3\u4e48\u53d6\u7f14\u6211\u9020\u6210\u7684\u5f71\u54cd\u53ea\u4f1a\u662fn-1\n\n\u5982\u679c\u6211\u662f\u5272\u70b9\uff08\u5272\u70b9\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff09 1\u3001\u6211\u662f\u7236\u8282\u70b9\uff0c\u6211\u7684\u513f\u5b50\u8d85\u8fc7\u4e86\u4e24\u4e2a\n\n2\u3001\u6211\u4e0d\u662f\u7236\u8282\u70b9\uff0c\u6211\u513f\u5b50\u7684Low\u503c\u5c0f\u4e8e\u6211\u7684dfn\u503c\n\n\u8bb0\u5f55dep\n\n\u5bf9\u4e8e\u6211\u662f\u7236\u8282\u70b9\uff0c\u4e14\u6211\u7684\u513f\u5b50\u6570\u8d85\u8fc7\u4e24\u4e2a\u7684\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u53ea\u6709\u5728dep[\u513f\u5b50]=dep[\u6211]+1\u7684\u60c5\u51b5\u4e0b\u624d\u505a\uff0c\u5426\u5219\u4f1a\u91cd\u590d\n\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define N 110000\n#define M 550000\ninline int read(){\n    int x=0;char ch=getchar();\n    while (ch<'0'||ch>'9') ch=getchar();\n    while (ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\nlong long ans[N];\nstruct node{\n    int y,next;\n}data[M<<1];\nint size[N],dfn[N],low[N],h[N],num,n,fa[N],m,dep[N];\nvoid tarjan(int x){\n    dfn[x]=low[x]=++num;int child=0;size[x]++;int z=0;ans[x]+=n-1;\n    for (int i=h[x];i;i=data[i].next){\n        int y=data[i].y;\n        if (fa[x]==y) continue;\n        if (!dfn[y]){dep[y]=dep[x]+1;\n            fa[y]=x;child++;tarjan(y);low[x]=min(low[x],low[y]);\n            size[x]+=size[y];\n            if (fa[x]&&low[y]>=dfn[x]) {\n                z+=size[y];ans[x]+=(long long)size[y]*(n-z-1);\n            }\n        }else low[x]=min(low[x],dfn[y]);\n    }\n    \n    if (!fa[x]&&child>=2){\n        for (int i=h[x];i;i=data[i].next){\n            int y=data[i].y;\n            if (fa[y]==x&&dep[y]-dep[x]==1){\n                for (int j=data[i].next;j;j=data[j].next){\n                    int y1=data[j].y;\n                    if (dep[y1]-dep[x]==1)ans[x]+=(long long)size[y]*size[y1];\n                }\n            }\n        }\n    }\n}\nint main(){\n    freopen(\"3469.in\",\"r\",stdin);\n    n=read();m=read();\n    for (int i=1;i<=m;++i){\n        int x=read(),y=read();\n        data[++num].y=y;data[num].next=h[x];h[x]=num;\n        data[++num].y=x;data[num].next=h[y];h[y]=num;\n    }num=0;dep[1]=1;\n    tarjan(1);\n    for (int i=1;i<=n;++i) printf(\"%lld\\n\",ans[i]<<1);\n    return 0;\n}\n```",
        "postTime": 1506169924,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "# \u5199\u5728\u524d\u9762\n\u8fd9\u662f\u4e00\u9053\u5256\u6790\u7b97\u6cd5\u672c\u8d28\u7684\u9898\u76ee\n\n# \u5173\u4e8e`Tarjan`\n\n> `Tarjan`\u7684\u672c\u8d28\u5c31\u662f\u4e00\u4e2a`DFS`\n>                 \u2014\u2014\u82df\u65b0\u6770\u8001\u5e08\n\n\u65e2\u7136\u662f`DFS`\uff0c\u90a3\u4e48\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u5f62\u6210\u4e00\u9897`DFS`\u6811\u3002\n\u5982\u679c\u8fd9\u4e2a\u6811\u70b9\u662f\u4e00\u4e2a\u5272\u70b9\uff0c\u90a3\u4e48\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u70b9\u7684\u51e0\u4e2a\u5b69\u5b50\u662f\u4ec0\u4e48\uff1f\n> `Tarjan`\u8fc7\u7a0b\u4e2d\u5f62\u6210\u7684`DFS`\u6811\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u5b69\u5b50\u4eec\u5c31\u662f\u5220\u53bb\u8fd9\u4e2a\u70b9\u540e\u65ad\u5f00\u7684\u51e0\u90e8\u5206\u3002\n\n\u4e3a\u4ec0\u4e48\uff1f\t\n\u5047\u8bbe\u8fd9\u4e2a\u70b9\u7684\u5b69\u5b50\uff08\u5b50\u6811\uff09\u5206\u522b\u6709`SonTree1`\u3001`SonTree2` \u548c`SonTree3`\u3002\t\n`SonTree1`\u3001`SonTree2` \u548c`SonTree3`\u4e0d\u4f1a\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002\t\n\u56e0\u4e3a\u5982\u679c\u8fd9\u4e9b\u513f\u5b50\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u5728\u904d\u5386\u7b2c\u4e00\u4e2a\u513f\u5b50(`SonTree1`)\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u513f\u5b50(`SonTree2` \u548c`SonTree3`)\u4e00\u5b9a\u80fd\u88ab\u4fbf\u5229\u5230\uff0c\u800c\u7edd\u5bf9\u4e0d\u4f1a\u6210\u4e3a\u5f53\u524d\u70b9\u7684\u5b50\u6811\u3002\n\n# \u5173\u4e8e\u672c\u9898\n\n\u4e24\u79cd\u60c5\u51b5\uff1a\n - \u5982\u679c\u5f53\u524d\u70b9\u4e0d\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u5220\u53bb\u4e4b\u540e\u5f71\u54cd\u4e0d\u5927\uff0c\u53ea\u80fd\u5bfc\u81f4\u5f53\u524d\u88ab\u5c01\u9501\u7684\u70b9\u5230\u4e0d\u4e86\u5176\u4ed6\u70b9\uff0c\u5176\u4ed6\u70b9\u4e5f\u5230\u4e0d\u4e86\u5f53\u524d\u88ab\u5c01\u9501\u7684\u70b9\u3002\n - \u5982\u679c\u5f53\u524d\u70b9\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u5220\u53bb\u4e4b\u540e\u4f1a\u65ad\u6210\u51e0\u5927\u5757\u513f\u3002\u5bf9\u4e8e\u6bcf\u4e00\u5757\uff0c\u5230\u5269\u4e0b\u7684\u6bcf\u4e00\u4e2a\u4e0d\u5c5e\u4e8e\u8fd9\u4e00\u5757\u513f\u7684\u70b9\u90fd\u4e0d\u80fd\u7ee7\u7eed\u62dc\u8bbf\uff0c\u8bbe\u8fd9\u4e00\u5757\u5927\u5c0f\u4e3a$S$\uff0c\u603b\u70b9\u6570\u4e3a$n$\uff0c\u90a3\u4e48\u8fd9\u4e00\u5757\u513f\u4ea7\u751f\u7684\u4e0d\u80fd\u62dc\u8bbf\u6570\u4e3a\uff1a\n    $$Ans += S \\times (n - s)$$\n   \u5bf9\u6bcf\u4e00\u5757\u513f\u90fd\u8981\u8fd9\u4e48\u505a\u3002\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002\u6ce8\u610f\uff1a\u8fd9\u4e2a\u70b9\u4e0a\u9762\u7684\u6240\u6709\u4e5f\u662f\u4e00\u5757\u513f\uff0c\u5927\u5c0f\u8ba1\u7b97\u65b9\u6cd5\u4e0e\u6c42`\u6811\u7684\u91cd\u5fc3`\u7c7b\u4f3c\u3002\u5c31\u662f\u7528\u603b\u70b9\u6570\u51cf\u53bb\u5f53\u524d\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u3002\n\n# \u5173\u4e8e\u4ee3\u7801\n\n```cpp\n/*!\n * FileName: luogu-3469.cpp\n * This Problem is on luogu. The ID of the problem is 3469. \n * Copyright(c) 2019 Shu_Yu_Mo\n * MIT Licensed\n * Luogu: https://www.luogu.org/space/show?uid=44615\n * Github: https://github.com/oldsuold/\n * Gitee: https://gitee.com/Shu_Yu_Mo/\n * These words were created by an amazing tool on 2019-08-13 08:29:07 written by Shu_Yu_Mo.\n */\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<cstring>\n#include<iostream>\n#include<cmath>\n#include<vector>\n#include<queue>\n#include<algorithm>\n#define inf 0x7fffffff\n#define int long long\nusing namespace std;\nconst int _N = 110000;\nconst int _M = 1010000 ;\ninline int read()\n{\n    char c = getchar(); int sign = 1; int x = 0;\n    while(c > '9' || c < '0') { if(c=='-')sign = -1; c = getchar(); } \n    while(c <= '9' && c >= '0') { x *= 10; x += c - '0'; c = getchar(); }\n    return x * sign;\n}\nint head[_N];\nint tot = 0;\nstruct edges{\n\tint node;\n\tint nxt;\n}edge[_M];\nvoid add(int u, int v)\n{\n\tedge[++tot].nxt = head[u];\n\thead[u] = tot;\n\tedge[tot].node = v;\n}\nint n, m;\nint dfn[_N];\nint low[_N];\nint dfnClock = 0; \nbool isCut[_N];\nint size[_N];\nint Ans[_N];\nvoid tarjan(int now, int fa)\n{\n\tlow[now] = dfn[now] = ++dfnClock;\n\tsize[now] = 1;\n\tint child = 0;\n\tAns[now] = 0;\n\tint SumForSon = 0;\n\tfor(register int i = head[now];i;i = edge[i].nxt)\n\t{\n\t\tint exNode = edge[i].node;\n\t\tif(dfn[exNode] == 0)\n\t\t{\n\t\t\tchild ++;\n\t\t\ttarjan(exNode, now);\n\t\t\tsize[now] += size[exNode];\n\t\t\tlow[now] = min(low[now], low[exNode]);\n\t\t\tif(low[exNode] >= dfn[now])\n\t\t\t{\n\t\t\t\tSumForSon += size[exNode];\n\t\t\t\tAns[now] += (size[exNode] * (n - size[exNode]));\n\t\t\t\tisCut[now] = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tlow[now] = min(low[now], dfn[exNode]);\n\t}\n\tif(child < 2 && fa < 0) isCut[now] = false;\n\tif(!isCut[now]) Ans[now] = (n - 1) << 1;\n\telse Ans[now] += (n - SumForSon - 1) * (SumForSon + 1) + (n - 1);\n}\n\nsigned main()\n{\n\tn = read(), m = read();\n\tfor(register int i = 1;i <= m;i++)\n\t{\n\t\tint tmpx = read(), tmpy = read();\n\t\tadd(tmpx, tmpy);\n\t\tadd(tmpy, tmpx);\n\t}\n\tmemset(isCut, false, sizeof(isCut));\n\ttarjan(1, -1);\n\tfor(register int i = 1;i <= n;i++)\n\t\t\tprintf(\"%lld\\n\", Ans[i]);\n    return 0;\n}\n```",
        "postTime": 1565850920,
        "uid": 44615,
        "name": "ShuYuMo",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u6839\u636e\u5706\u65b9\u6811\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5f97\u77e5\u6bcf\u4e2a\u5706\u70b9\u90fd\u662f\u4e00\u4e2a\u5272\u70b9\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5706\u70b9 $u$\uff0c\u5982\u679c\u539f\u6765 $(x, y)$ \u8fde\u901a\u4e14\u7ecf\u8fc7 $u$\uff0c\u90a3\u4e48\u5220\u6389 $u$ \u540e\u5b83\u4eec\u5c31\u4e0d\u5728\u8fde\u901a\u4e86\n\n\u4e8e\u662f\u95ee\u9898\u5c31\u6210\u4e86\u6811\u4e0a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6c42\u6709\u591a\u5c11\u6761\u7ecf\u8fc7\u5b83\u7684\u8def\u5f84\n\n\u8ba1\u7b97\u5b50\u6811\u5927\u5c0f\u5c31\u884c\u4e86\n\n~~\u5706\u65b9\u6811\u771f\u65e0\u8111\u66b4\u529b\u554a~~\n\n```\n#include \"bits/stdc++.h\"\nusing namespace std;\ntypedef long long ll;\n\nconst int N = 3e6 + 10;\n\nint n, m, head[N], rest[N], to[N], tot, sta[N], top, cnt, dfn[N], low[N], clk, sz[N];\nll ans[N];\nvector<int> g[N];\nvoid add(int u, int v) {\n    to[++ tot] = v, rest[tot] = head[u], head[u] = tot;\n}\nvoid lk(int u, int v) {\n    g[u].push_back(v);\n    g[v].push_back(u);\n}\n\nvoid tarj(int u, int fa) {\n    dfn[u] = low[u] = ++ clk;\n    sta[++ top] = u;\n    for(int i = head[u] ; i ; i = rest[i]) {\n        int v = to[i];\n        if(!dfn[v]) {\n            tarj(v, u);\n            low[u] = min(low[u], low[v]);\n            if(low[v] >= dfn[u]) {\n                ++ cnt;\n                lk(u, cnt);\n                int tmp;\n                do {\n                    tmp = sta[top --];\n                    lk(tmp, cnt);\n                } while(tmp != v);\n            }\n        } else if(v != fa) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n}\n\nvoid dfs(int u, int fa) {\n    for(int i = 0 ; i < g[u].size() ; ++ i) {\n        int v = g[u][i];\n        if(v == fa) continue;\n        dfs(v, u);\n        ans[u] += 2ll * sz[v] * sz[u];\n        sz[u] += sz[v];\n    }\n    sz[u] += u <= n;\n    ans[u] += 2ll * (sz[u] - 1) * (n - sz[u]);\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 1 ; i <= m ; ++ i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        add(u, v), add(v, u);\n    }\n    cnt = n;\n    tarj(1, 0);\n    dfs(1, 0);\n    for(int i = 1 ; i <= n ; ++ i) {\n        printf(\"%lld\\n\", ans[i] + 2 * (n - 1));\n    }\n}\n```",
        "postTime": 1549977574,
        "uid": 47111,
        "name": "nekko",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u597d\u4e45\u6ca1\u6709\u6253\u8fc7\u9898\u89e3\u4e86\uff0c\u78b0\u5230\u8fd9\u9053\u4e0d\u9519\u7684\u9898\uff0c\u51b3\u5b9a\u518d\u6765\u7ec3\u7ec3\u624b\u3002\n\u5bf9\u4e8e\u9898\u610f\uff0c\u7ffb\u8bd1\u5176\u5b9e\u5df2\u7ecf\u8868\u8fbe\u7684\u5341\u5206\u6e05\u695a\u4e86\uff1a**\u6c42\u6bcf\u4e2a\u70b9\u88ab\u5220\u9664\u4e4b\u540e\u6709\u591a\u5c11\u70b9\u5bf9\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\uff08\u5305\u62ec\u88ab\u5220\u6389\u7684\u70b9\uff09**\u3002\u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a\u70b9\u7684\u8fd9\u4e00\u6570\u503c\u79f0\u4f5c$ans[i]$\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u8981\u5904\u7406\u4e00\u4e2a\u4e1c\u897f\uff1a**\u5373\u4f7f\u4e0d\u5220\u9664\u4efb\u4f55\u4e00\u4e2a\u70b9\u4e5f\u4f1a\u5b58\u5728\u7684\u4e0d\u80fd\u4e92\u76f8\u5230\u8fbe\u7684\u70b9\u5bf9\u7684\u6570\u91cf\uff08\u79f0\u5176\u4e3a$left$\uff09**\u3002\u4e3a\u4ec0\u4e48\u4f1a\u6709$left$\u5b58\u5728\u5462\uff1f\u662f\u56e0\u4e3a**\u539f\u56fe\u4e0d\u4e00\u5b9a\u662f\u8054\u901a\u7684\uff01\uff08\u55ef\u2026\u2026\u7ecf\u672c\u4eba\u5b9e\u9a8c\uff0c\u6570\u636e\u91cc\u5176\u5b9e\u5e76\u6ca1\u6709\u4e0d\u8fde\u901a\u7684\u6570\u636e\u70b9\u2026\u2026\u6216\u8bb8\u662f\u6211\u6ca1\u770b\u61c2\u9898\uff1f\uff09**\u800c\u5904\u7406\u51fa\u8fd9\u4e00\u90e8\u5206\u7684\u70b9\u5bf9\u6570\u91cf\u5219\u6bd4\u8f83\u7b80\u5355\u3002\u53ef\u4ee5\u7528dfs\u5904\u7406\u6bcf\u4e00\u4e2a\u8fde\u540c\u5757\u4e2d\u542b\u6709\u7684\u8282\u70b9\u6570\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4e00\u4e00\u76f8\u4e58\uff0c\u5f97\u51fa\u603b\u548c\u3002\u7136\u800c\u8fd9\u6837\u505a\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f$O(N^2)$\u7684\u4e86\uff0c\u80af\u5b9a\u4f1a\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5bf9\u6b64\u8fdb\u884c\u6539\u8fdb\uff1a\u4f7f\u7528\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\u6bcf\u5904\u7406\u51fa\u4e00\u4e2a\u8fde\u540c\u5757\u7684\u8282\u70b9\u6570\uff0c\u5c31\u7528\u4e4b\u524d\u6240\u6709\u8fde\u540c\u5757\u8282\u70b9\u6570\u4e4b\u548c\u4e58\u5b83\uff0c\u6c47\u603b\u5230\u603b\u548c\u91cc\u9762\uff0c\u7136\u540e\u5c06\u5b83\u518d\u52a0\u5165\u8fde\u540c\u5757\u8282\u70b9\u6570\u4e4b\u548c\u3002\u5982\u6b64\uff0c\u4fbf\u53ef\u4ee5\u7528$O(N)$\u6c42\u51fa\u3002\n\n\u90a3\u4e48\u5220\u9664\u70b9\u4e4b\u540e\u7684\u90e8\u5206\u8be5\u5982\u4f55\u6c42\u5462\uff1f\u663e\u7136\uff0c\u8fd9\u9053\u9898\u4e0e\u5272\u70b9\u6709\u5341\u5206\u660e\u663e\u7684\u5173\u8054\u3002\uff08\u4e0d\u77e5\u9053\u5272\u70b9\u7684\u540c\u5b66\u8bf7\u52a1\u5fc5\u5148\u505a[\u3010\u6a21\u677f\u3011\u5272\u70b9\uff08\u5272\u9876\uff09](https://www.luogu.org/problemnew/show/P3388)\uff09\u5982\u679c\u8282\u70b9$i$\u4e0d\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u5220\u9664\u5b83\u540e\u8fd9\u4e00\u4e2a\u56fe\u5fc5\u4ecd\u7136\u662f\u8054\u901a\u7684\uff0c\u56e0\u6b64\u5176\u5b83\u70b9\u5bf9\u4e92\u76f8\u4e4b\u95f4\u90fd\u4e0d\u4f1a\u7ec4\u6210\u7b26\u5408\u8981\u6c42\u7684\u70b9\u5bf9\u3002\u6240\u4ee5\u5c31\u53ea\u6709\u8282\u70b9$i$\u4e0e\u5176\u4ed6\u6240\u6709\u70b9\u5bf9\u7ec4\u6210\u7684\u8fd9$n-1$\u4e2a\u70b9\u5bf9\u7b26\u5408\u8981\u6c42\u3002\u5f53\u7136\uff0c\u5982\u679c\u8282\u70b9$i$\u662f\u5272\u70b9\uff0c\u4e5f\u540c\u6837\u4f1a\u5305\u542b\u8fd9$n-1$\u4e2a\u70b9\u5bf9\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u975ei\u7684\u8282\u70b9\u76f4\u63a5\u4e5f\u4f1a\u4ea7\u751f\u4e00\u4e9b\u70b9\u5bf9\u3002**\u90a3\u4e48\u8fd9\u4e9b\u70b9\u5bf9\u53c8\u8be5\u5982\u4f55\u7edf\u8ba1\u5462\uff1f**\n\n\u8fd9\u4e00\u90e8\u5206\u7684\u5904\u7406\u5c31\u4f1a\u7a0d\u6709\u4e9b\u590d\u6742\u3002\u9996\u5148\uff0c\u5982\u679c$i$\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u6c42\u5272\u6389$i$\u4e4b\u540e**\u88ab\u5206\u79bb**\u7684\u90a3\u4e9b\u8fde\u540c\u5757\u7684\u70b9\u6570\u3002\u6700\u96be\u5904\u7406\u7684\u5c31\u662f\u5b58\u5728$i$\u7236\u8282\u70b9\u7684\u90a3\u4e00\u4e2a\u8fde\u540c\u5757\uff0c\u6bd4\u8f83\u96be\u7edf\u8ba1\u6570\u91cf\u3002\u8fd9\u91cc\u7528\u4e86\u4e00\u4e2a\u6bd4\u8f83\u50bb\u7684\uff0c\u4f46\u662f\u5bb9\u6613\u7406\u89e3\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5148\u8bb0\u5f55\u4e0b\u5728\u539f\u56fe\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u70b9\u6240\u5c5e\u7684\u8fde\u540c\u5757\u7684\u8282\u70b9\u6570\u91cf$sum[i]$\u3002\u7136\u540e\u5bf9\u4e8e\u5272\u70b9$i$\u8fdb\u884c\u5904\u7406\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u5b58\u5728$i$\u7236\u8282\u70b9\u7684\u8fde\u540c\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u5728tarjan\u65f6\u540c\u65f6\u4f7f\u7528dfs\u8bb0\u5f55\u8fde\u540c\u5757\u70b9\u6570\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u8fd9\u4e9b\u8fde\u540c\u5757\u6240\u5305\u542b\u7684\u70b9\u6570\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u52a0\u548c\u5f97\u5230$he[i]$\u3002\u4e8e\u662f\uff0c\u5b58\u5728$i$\u7236\u8282\u70b9\u7684\u8fde\u540c\u5757\u7684\u70b9\u6570\u6613\u5f97\u4e86\uff1a$sum[i]-he[i]-1$\u3002\n\n\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u6765\u4e00\u904ddfs\u3002\u6b64\u65f6\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5272\u70b9\u5df2\u7ecf\u77e5\u9053\u5b83\u6240\u6709\u5272\u51fa\u7684\u8fde\u540c\u5757\u7684\u70b9\u6570\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u7528\u4e58\u6cd5\u7ed3\u5408\u5f8b\u5bf9\u4ed6\u4eec\u8fdb\u884c\u7edf\u8ba1\uff0c\u5f97\u51fa\u6bcf\u4e00\u4e2a\u5272\u70b9\u4ea7\u751f\u7684\u4e0d\u8fde\u901a\u70b9\u5bf9\u6570\u91cf\u3002\n\n\u6700\u540e\u5bf9\u4ee5\u4e0a\u6240\u6709\u5f97\u51fa\u7684\u7ed3\u679c\u8fdb\u884c\u52a0\u548c\u8f93\u51fa\u5373\u53ef\u3002\n\n**\u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u8fd8\u662f\u6709\u5751\u7684\u3002**\u9700\u8981\u6ce8\u610f\u7684\u70b9\u5982\u4e0b:\n\n1. \u9700\u8981\u4f7f\u7528long long\uff08\u4e0d\u9700\u8981\u9ad8\u7cbe\u5ea6\uff0c\u7ecf\u8fc7\u7b80\u5355\u6781\u503c\u8ba1\u7b97\u53ef\u5f97\u51fa\uff09\uff01\n\n2. \u6ce8\u610f\u7edf\u8ba1\u65f6\u91cd\u590d\u88ab\u8ba1\u7b97\u7684\u70b9\u5bf9\u2014\u2014\u5bf9\u4e8e\u8282\u70b9$i$\uff0c$i$\u4e0e\u4e0d\u5c5e\u4e8e\u81ea\u5df1\u8fde\u540c\u5757\u7684\u70b9\u4e4b\u95f4\u7684\u70b9\u5bf9\u6570\u91cf\u88ab\u91cd\u590d\u8ba1\u7b97\u4e86\u4e24\u6b21\uff0c\u9700\u8981\u51cf\u6389\u3002\n\n3. \u56e0\u4e3a\u662f\u6709\u5e8f\u70b9\u5bf9\uff0c\u6240\u4ee5\u8f93\u51fa\u8981\u4e582\uff01\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<iostream>\n#include<algorithm>\n#include<string>\nusing namespace std;\nstruct Edge//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n\tint t,nexty;\n}edge[1500000];\nint head[500000]={0};\nint cnt=0;\nvoid add(int a,int b)\n{\n\tcnt++;\n\tedge[cnt].t=b;\n\tedge[cnt].nexty=head[a];\n\thead[a]=cnt;\n}\nint dfn[500000]={0},low[500000]={0};\nbool iscut[500000]={0};long long fads[500000]={0};\nlong long jhds[500000]={0};\nlong long ans[500000]={0};\nint js=0,visjs=0;\nint vis[500000]={0};\nlong long zds;\nvoid dfs1(int node)//\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u8fde\u540c\u5757\u8282\u70b9\u6570\n{\n\tvis[node]=visjs;zds++;\n\tfor(int i=head[node];i;i=edge[i].nexty)if(vis[edge[i].t]!=visjs)dfs1(edge[i].t);\n}\nvoid dfs2(int node)//\u5c06\u6bcf\u4e00\u4e2a\u8282\u70b9\u6240\u5728\u8fde\u540c\u5757\u8282\u70b9\u6570\u201c\u544a\u8bc9\u201d\u6bcf\u4e00\u4e2a\u8282\u70b9\n{\n\tvis[node]=visjs;jhds[node]=zds;\n\tfor(int i=head[node];i;i=edge[i].nexty)if(vis[edge[i].t]!=visjs)dfs2(edge[i].t);\n}\nlong long tj(int node,int fa)//tarjan\n{\n\tdfn[node]=low[node]=++js;\n\tint child=0;\n\tlong long sum=0,sl=1,lc;\n\tfor(int i=head[node];i;i=edge[i].nexty)\n\t{\n\t\tif(edge[i].t==fa)continue;\n\t\tif(!dfn[edge[i].t])\n\t\t{\n\t\t\tchild++;\n\t\t\tsl+=lc=tj(edge[i].t,node);\n\t\t\tlow[node]=min(low[node],low[edge[i].t]);\n\t\t\tif(low[edge[i].t]>=dfn[node]){iscut[node]=true;sum+=lc;}\n\t\t}\n\t\telse low[node]=min(low[node],dfn[edge[i].t]);\n\t}\n\tif(fa==-1&&child==1)iscut[node]=false;\n\tif(iscut[node])fads[node]=jhds[node]-sum-1;//\u6c42\u5b58\u5728\u7236\u8282\u70b9\u7684\u8fde\u540c\u5757\u7684\u70b9\u6570\n\treturn sl;\n}\nlong long cal(int node)//\u7edf\u8ba1\u7b54\u6848\n{\n\tvis[node]=visjs;\n\tlong long sl=1,lc,timnum=fads[node];\n\tfor(int i=head[node];i;i=edge[i].nexty)\n\t{\n\t\tif(vis[edge[i].t]==visjs)continue;\n\t\tsl+=lc=cal(edge[i].t);\n\t\tif(!iscut[node])continue;\n\t\tif(low[edge[i].t]>=dfn[node]){ans[node]+=timnum*lc;timnum+=lc;}\n\t}\n\treturn sl;\n}\nint main()\n{\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tint a,b;\n\twhile(m--)\n\t{\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b);add(b,a);\n\t}\n\tlong long xqadd=0,xqsum=0;\n\tfor(int i=1;i<=n;i++)\n\tif(!vis[i])\n\t{\n\t\tzds=0;\n\t\tvisjs++;\n\t\tdfs1(i);\n\t\tvisjs++;\n\t\tdfs2(i);\n\t\txqadd+=xqsum*zds;xqsum+=zds;//\u5bf9\u521d\u59cb\u7684\u70b9\u5bf9\u6570\u91cf\u8fdb\u884c\u8ba1\u7b97\n\t}\n\tfor(int i=1;i<=n;i++)if(!dfn[i])tj(i,-1);\n\tfor(int i=1;i<=n;i++)vis[i]=0;visjs=0;\n\tfor(int i=1;i<=n;i++)\n\tif(!vis[i])\n\t{\n\t\tvisjs++;\n\t\tcal(i);\n\t}\n\tfor(int i=1;i<=n;i++)printf(\"%lld\\n\",ans[i]*2+(long long)n*2-2+xqadd*2-(long long)n*2+jhds[i]*2);//\u7edf\u8ba1\u6700\u7ec8\u7b54\u6848\uff0c\u8bb0\u5f97*2\n\treturn 0;\n}\n```",
        "postTime": 1523274970,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u5f3a\u8fde\u901a\u5206\u91cf+\u5272\u70b9\n\u5728\u65e0\u5411\u56fe\u4e2d\n\u5272\u70b9\u5c31\u662f\u53bb\u6389\u8be5\u70b9\u540e\u5bf9\u56fe\u8fde\u901a\u6027\u6709\u5f71\u54cd\u7684\u70b9\n\n![\u6837\u4f8b](https://cdn.luogu.com.cn/upload/image_hosting/gk4w5rvo.png)\n\n\n\n\uff08\u5047\u8bbe\u6837\u4f8b\u8bbf\u95ee\u987a\u5e8f\u662f1-3-4-5  3-2 1-2\uff09\n\n\u53ef\u628atarjan\u8fc7\u7a0b\u770b\u4f5cdfs\u4e00\u9897\u6811\n\n\u6211\u4eec\u5728\u6bcf\u5c42dfs\u8ba1\u7b97\u8be5\u5c42\u70b9u\u7684\u7b54\u6848\n\u5f53\u904d\u5386\u5230\u70b9u\u65f6\n\n\u82e5u\u5bf9\u4e8e\u70b9v1\u662f\u5272\u70b9 \u5c31\u8bf4\u660e\u628au\u5230v1\u7684\u8fb9\u53bb\u6389\u540ev1\u53ca\u5176\u5b50\u6811\u88ab\u9694\u7edd\u5f00\u4e86    \u7b54\u6848ans[u]+=size[v1]*(n-size[v1]-1) \u610f\u601d\u8be5\u5b50\u6811\u4e0e\u5176\u4f59\u7684\u70b9\uff08\u9664u\uff09\u90fd\u4e0d\u80fd\u914d\u5bf9\u4e86   \u5982\u6837\u4f8b3\u52304\n\n\u82e5\u5bf9\u4e8ev2\u4e0d\u662f\u5272\u70b9\u5219\u8bf4\u660e\u5c31\u662f\u53bb\u6389u\u5230v2\u7684\u8fb9\uff0cv2\u4e5f\u6709\u5176\u5b83\u9014\u5f84\u8fde\u5411u\uff0c\u90a3\u4e48\u4e0d\u7ba1 \u5982\u6837\u4f8b3\u52302\n\n\u5728\u6700\u540eu\u7684\u7956\u5b97\u4e2a\u6570\u662fhead=n-size[v1]size[v2]-........size[vn]\n\nans[u]+=head*(size[v1]+size[v2]+....size[vn])\n\u610f\u601d\u662fu\u7684\u7956\u5b97\u80af\u5b9a\u914d\u5bf9\u4e0d\u4e0au\u7684\u5b50\u6811\u4eec\n\nans[u]+=2*(n-1)\n\u610f\u601d\u662f\u70b9u\u88ab\u9694\u7edd\u540e\u4e0e\u5176\u5b83\u7684\u70b9\u90fd\u4e0d\u53ef\u4ee5\u914d\u5bf9\n\n\u5230\u73b0\u5728u\u7684\u60c5\u51b5+\u5b8c\u4e86\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=5e6+100;\nint n,m;\nint head[4*5000100],next[4*5000100],go[4*5000100],ecnt;\nvoid add(int u,int v){go[++ecnt]=v;next[ecnt]=head[u];head[u]=ecnt;}\nint dfn[100000+100],low[100000+100],tot=0;\nlong long f[100000+100];\nint tarjan(int u,int fa)\n{\n\tdfn[u]=low[u]=++tot;\n\tint sum=0;\n\tint son=0;\n\tfor(int e=head[u],v;e;e=next[e])\n\t{\n\t\tv=go[e];\n\t\tif(fa==v)continue;\n\t\tif(dfn[v]==0)\n\t\t{\n\t\t\tint size=tarjan(v,u);\n\t\t\tson+=size;\t  \n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif(low[v]>=dfn[u])\n\t\t\t{\n\t\t\t   sum+=size;\n\t\t\t   f[u]+=(long long)size*(n-size-1);\n\t\t\t}\n\t\t}low[u]=min(low[u],dfn[v]);\n\t} \n\n\tf[u]+=(long long)(n-sum-1)*sum;\n\tf[u]+=2*(n-1);\n\treturn son+1;\t\n}\nint main()\n{\n #ifndef ONLINE_JUDGE\n\tfreopen(\"cin.txt\",\"r\",stdin);\n//\tfreopen(\"cout.txt\",\"w\",stdout);\n\t#endif\t\n\tcin>>n>>m;\n\tfor(int i=1,u,v;i<=m;i++)\n\t{\n\t\tscanf(\"%d %d\",&u,&v);//\t\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\n\ttarjan(1,0);\n\n    for(int i=1;i<=n;i++)\n    {\n    \tprintf(\"%lld\\n\",f[i]);\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1572686262,
        "uid": 90562,
        "name": "\u6211\u8981\u8003\u5317\u5927",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u4e00\u770b\u5c31\u662f\u5230\u597d\uff08shui\uff09\u9898\uff0c~~\u6bd5\u7adf\u81ea\u5df1\u56e0long long\u7684\u95ee\u9898\u7684\u9519\u4e86\u51e0\u6b21~~\u3002\u597d\u5427\uff0c\u4e0d\u5e9f\u8bdd\uff0c\u5f00\u59cb\u8bb2\u89e3\uff1a\n\n\u8fd9\u9053\u9898\u4e00\u770b\u5c31\u662f\u6c42**\u65e0\u5411\u56fe**\u4e2d\uff0c**\u53bb\u6389\u4e00\u4e2a\u70b9\u540e\u65e0\u6cd5\u8fde\u901a\u7684\u70b9\u5bf9**\uff0c\u4f46\u6ce8\u610f\uff1a\n\n1. $( x , y )$ \u548c$ ( y , x )$\u7b97\u4f5c\u4e0d\u540c\u7684\u70b9[](https://cdn.luogu.com.cn/upload/pic/62965.png)\u5bf9\n2. \u5373\u4f7f\u70b9\u88ab\u5220\u9664\u540e\uff0c\u4e5f\u8981\u8ba1\u5165\u65e0\u6cd5\u8fde\u901a\u6570\uff0c\u4f46\u663e\u7136\u4ed6\u4eec\u662f\u4e0d\u8054\u901a\u7684\n\n\n\u9996\u5148 $i$ \u8ddf\u5176\u4ed6$n-1$\u4e2a\u70b9\u80af\u5b9a\u4e0d\u80fd\u4e92\u901a\u3002\u5982\u679c$i$\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u53bb\u6389$i$\u4e4b\u540e\u7684\u51e0\u4e2a\u4e0d\u540c\u8fde\u901a\u5206\u91cf\u5c31\u4e0d\u80fd\u4e92\u901a,\u90a3\u6211\u4eec\u73b0\u5728\u5c31\u60f3\u529e\u6cd5\u6c42\u4e00\u4e0b\u53bb\u6389$i$\u540e\u88ab\u5207\u65ad\u7684\u8fde\u901a\u5206\u91cf\u3002\u5148\u89c2\u5bdf\u4e00\u4e0b\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/61297.png)\n\n\n\u9ec4\u70b9\u662f\u4e00\u4e2a\u5272\u70b9\uff0c\u6211\u4eec\u5148\u8003\u8651\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8054\u901a\u60c5\u51b5\uff1a\n\n\u6211\u4eec\u7528$child[u]$\u8868\u793a\u4ee5$u$\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u663e\u7136\n$$\nchild[u]=\\sum_{v \\in u}child[v]\n$$\n\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5728$Tarjan$\u4e2d\u7b97\u51fa\u3002\n\n\u6211\u4eec\u518d\u5b9a\u4e49$sum$\u4e3a\u5f53\u524du\u5df2\u7ecf\u904d\u5386\u5230\u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\uff0c$s$\u4e3a\u53bb\u6389$u$\u70b9\u540e\u5b50\u6811\u4e2d\u7684\u70b9\u65e0\u6cd5\u8fde\u901a\u7684\u60c5\u51b5\u3002\n\n\u90a3\u4e48\uff0c\u6bcf\u6b21\u904d\u5386\u5b50\u8282\u70b9$v$  ,  $s=s+sum*child[v]$  , $sum=sum+child[v]$\n\n\n\n\u73b0\u5728\u5728\u8003\u8651\u5b50\u6811\u5185\u90e8\u4e0e\u5916\u90e8\u7684\u8054\u901a\u60c5\u51b5\uff0c$u$\u7684\u5b50\u6811\u5927\u5c0f\u4e3a$sum$,\u5916\u90e8\u8282\u70b9\u4e3a$n-sum-1$,\u53bb\u6389\u70b9$u$\u540e\uff0c\u8fd9\u4e9b\u70b9\u4e5f\u662f\u65e0\u6cd5\u8fde\u901a\u7684\uff0c$t$\u4e3a\u53bb\u6389u\u70b9\u540e\u5b50\u6811\u4e2d\u7684\u70b9\u4e0e\u5916\u90e8\u7684\u70b9\u65e0\u6cd5\u8fde\u901a\u7684\u60c5\u51b5\u3002\n\n\u90a3\u4e48\uff0c$t=sum*(n-sum-1)$\n\n\u7ed3\u5408\u6ce8\u610f\u4e8b\u98791,2\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a$Ans[u]=[s+t+(n-1)]*2$\uff0c\u8fd9\u5c31\u662f\u6700\u540e\u7684\u7b54\u6848\u4e86\u3002\n\n\n\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <vector>\nusing namespace std;\n\nconst int MAXN = 100000;\nint n,m,x,y;\nvector< int > Graph[ MAXN + 5 ];\n\nvoid Read( int &x ) {\n\tint f = 1;\n\tx = 0;\n\tchar s = getchar( );\n\t\n\twhile( s < '0' || s > '9' ) {\n\t\tif( s == '-' ) f = -1;\n\t\ts = getchar( );\n\t}\n\twhile( s >= '0' && s <= '9' ) {\n\t\tx = x * 10 + s - 48;\n\t\ts = getchar( );\n\t}\n\tx *= f;\n}\nvoid Write( long long x ) {\n\tif( x < 0 ) {\n\t\tx = -x;\n\t\tputchar('-');\n\t}\n\tif( x >= 10 ) Write( x / 10 );\n\tputchar( x % 10 + 48 );\n}\nint Max( int x , int y ) {\n\treturn x > y ? x : y;\n}\nint Min( int x , int y ) {\n\treturn x < y ? x : y;\n}\n\nint dfn[ MAXN + 5 ] , low[ MAXN + 5 ] , child[ MAXN + 5 ] , depth;\nlong long Ans[ MAXN + 5 ];\n\nvoid Tarjan( int u , int fa ) {\n\tdfn[ u ] = low[ u ] = ++ depth;\n\tchild[ u ] = 1;\n\t//printf(\"%d %d\\n\",u,depth);\n\tlong long sum = 0;\n\tfor( int i = 0 ; i < Graph[ u ].size( ) ; i ++ ) {\n\t\tint v = Graph[ u ][ i ];\n\t\tif( v == fa ) continue;\n\t\t\n\t\tif( !dfn[ v ] ) {\n\t\t\tTarjan( v , u );\n\t\t\tchild[ u ] += child[ v ];\n\t\t\t\n\t\t\tif( low[ v ] >= dfn[ u ] ) {\n\t\t\t\tAns[ u ] += child[ v ] * sum;\n\t\t\t\tsum += child[ v ];\n\t\t\t}\n\t\t\tlow[ u ] = Min( low[ u ] , low[ v ] );\n\t\t}\n\t\t\n\t\telse if( v != fa && dfn[ u ] > dfn[ v ] )\n\t\t\tlow[ u ] = Min( low[ u ] , dfn[ v ] );\n\t}\n\tAns[ u ] = ( Ans[ u ] + sum * ( n - sum - 1 ) + n - 1 ) * 2;\n}\n\nint main( ) {\n\tRead( n ) , Read( m );\n\tfor( int i = 1 ; i <= m ; i ++ ) {\n\t\tRead( x ) , Read( y );\n\t\tGraph[ x ].push_back( y );\n\t\tGraph[ y ].push_back( x );\n\t}\n\tTarjan( 1 , -1 );\n\t\n\tfor( int i = 1 ; i <= n ; i ++ )\n\t\tWrite( Ans[ i ] ) , putchar('\\n');\n\treturn 0;\n}\n```",
        "postTime": 1561011112,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "P3469 BLO-Blockade"
    },
    {
        "content": "\u5728[\u535a\u5ba2](https://blog.csdn.net/zsyzClb/article/details/85171497) \n\u4e2d\u98df\u7528\u5473\u9053\u66f4\u4f73\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\n\n1.\n\n\u8fd9\u4e2a\u70b9\u4e0d\u662f\u662f\u5272\u70b9\uff08\u53bb\u6389\u8fd9\u4e2a\u70b9\u4ee5\u540e\u539f\u56fe\u4e0d\u8054\u901a\uff09\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u4e3a (n-1) * 2 \uff0c \u5c31\u662f\u8fd9\u4e2a\u70b9\u7684\u5c45\u6c11\u4e0d\u80fd\u8bbf\u95ee\u522b\u7684\u4eba\uff0c\u522b\u7684\u4eba\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u8fd9\u4e2a\u4eba\n\n2.\n\n\u5982\u679c\u8fd9\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u53bb\u6389\u4ee5\u540e\u5c31\u4f1a\u652f\u79bb\u7834\u788e\n\n\u5148\u5b9a\u4e49\u4e00\u4e2asize[u]\u8868\u793a\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u8282\u70b9\n\n\u90a3\u4e48\u5728u\u4e3a\u5272\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\uff0c\u6211\u4eec\u90fd\n\n```cpp\n\nans[i] = ans[i] + size[v] * ( n - size[v] ) ;\n\n```\n\n\u8bf4\u660e\u8fd9\u4e00\u4e2a\u5b50\u6811\u4e2d\u7684\u5c45\u6c11\uff08\u4e0d\u5305\u62ecu\uff09\u90fd\u4e0d\u80fd\u548c\u975e\u5b50\u6811\uff08\u8fd9\u91cc\u5305\u62ecu\uff0c\u56e0\u4e3au\u88ab\u5173\u5728\u91cc\u9762\u4e86\u561b\uff09\u7684\u5c45\u6c11\u4e0d\u80fd\u6765\u5f80\n\n\u5e76\u4e14\u987a\u4fbf\u5224\u65ad\u5272\u70b9\n\n\u5982\u679c\u8fd9\u6837\u505a\uff0c\u90a3\u662f\u80af\u5b9a\u4f1a\u9519\u7684\n\n\u00a0\n\n\u56e0\u4e3a\u6211\u4eec\u53ea\u8003\u8651\u5230\u4e86\u975e\u5272\u70b9\u7684\u60c5\u51b5\n\n\u548c\n\n\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u5bf9\u5916\u754c\u7684\u6765\u5f80\n\n\u800c\u6ca1\u6709\u8003\u8651\u5230\u5916\u754c\u5bf9\u8fd9\u53ef\u6811\u7684\u6765\u5f80\n\n\u4e8e\u662f\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2ass\u6570\u7ec4\uff0c\u8868\u793a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u7684\u70b9\u7684\u6570\u91cf-1\uff08\u4e0d\u5305\u62ecu\uff0c\u5e76\u4e14\u5f53\u4e14\u4ec5\u5f53u\u5bf9\u4e8e\u8fd9\u68f5\u5b50\u6811\u6765\u8bf4\u662f\u5272\u70b9\u7684\u60c5\u51b5\uff09\n\n\u8fd9\u91cc\u8981\u6ce8\u610f\u4e00\u70b9\uff0css != size[u] \uff0c\u60f3\u60f3\u8fd9\u662f\u4e3a\u4ec0\u4e48\n\n\u6240\u4ee5\u5916\u754c\u5bf9\u8fd9\u53ef\u6811\u7684\u6765\u5f80\u5c31\u8981\n\n\n```cpp\nans[u] =  ans[u] + ( n - ss - 1 ) * ( ss + 1 ) + ( n - 1 )\n \n// ( n - ss - 1 ) * ( ss + 1 ) \u8868\u793a\u6811\u4e4b\u5916\u7684\u70b9\u5bf9\u5b50\u6811\u7684\u6765\u5f80\n \n// ( n - 1 ) \u8868\u793au\u5bf9\u5176\u4ed6\u70b9\u7684\u6765\u5f80\n\n```\n\n\u56e0\u4e3a\u5168\u90e8\u70b9\u90fd\u662f\u8054\u901a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528Tarjan\uff081\uff09\u5c31ok\u4e86\n\n\u4ee3\u7801 ( \u5e0c\u671b\u80fd\u591f\u5e2e\u5230\u60a8 )\n\n```cpp\n#include <iostream>\n#include <cstring>\n \nusing namespace std ;\n \ntypedef long long LL ;\n \nconst int N = 1e5 + 10 ;\nconst int M = 5e5 + 10 ;\n \nstruct edge { \n\tint v , nxt ;\n}e[M<<1] ; int tot , last[N] ;\ninline void add ( int u , int v ) {\n\te[++tot] = (edge){ v , last[u] } ;\n\tlast[u] = tot ;\n\te[++tot] = (edge){ u , last[v] } ;\n\tlast[v] = tot ;\n}\n\t\nint n , m ;\n \nint id , dfn[N] , low[N] ;\nint size[N] ; LL ans[N] ;\nbool gedian[N] ; \n \nvoid Tarjan ( int u ) {\n\tdfn[u] = low[u] = ++id ;\n\tsize[u] = 1 ; int cnt = 0 , ss = 0 ;\n\tfor ( int i = last[u] ; i != -1 ; i = e[i].nxt ) {\n\t\tint v = e[i].v ;\n\t\tif ( dfn[v] == 0 ) {\n\t\t\tTarjan( v ) ; size[u] += size[v] ;\n\t\t\tlow[u] = min ( low[u] , low[v] ) ;\n\t\t\tif ( dfn[u] <= low[v] ) {\n\t\t\t\tcnt ++ ; ss += size[v] ;\n\t\t\t\tans[u] += (LL)size[v] * ( n - size[v] ) ;\n\t\t\t\tif ( u != 1 || cnt > 1 ) gedian[u] = 1 ;\n\t\t\t}\t\t\n\t\t}\n\t\telse low[u] = min ( low[u] , dfn[v] ) ;\n\t}\n\tif ( gedian[u] == 0 ) ans[u] = 2 * ( n-1 ) ;\n\telse ans[u] += (LL)( n - ss - 1 ) * ( ss + 1 ) + ( n - 1 ) ;\n}\nint main() {\n\tcin >> n >> m ; int u , v ;\n\ttot = -1 , memset ( last , -1 , sizeof( last ) ) ;\n\tfor ( int i = 1 ; i <= m ; i ++ )\n\t\tcin >> u >> v , add( u , v ) ;\n\tmemset ( gedian , 0 , sizeof( gedian ) ) ;\n\tTarjan( 1 ) ;\n\tfor ( int i = 1 ; i <= n ; i ++ ) \n\t\tcout << ans[i] << endl ;\n\treturn 0 ;\n}\n\n```\n",
        "postTime": 1545395440,
        "uid": 66181,
        "name": "Celebrate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u5bb9\u6613\u60f3\u5230\u7528$\\text{Tarjan}$\u6c42\u5272\u70b9\u3002\u5bf9\u4e8e\u975e\u5272\u70b9\uff0c\u4f1a\u635f\u5931$2\\times(n-1)$\u6b21\u8bbf\u95ee\uff08\u6ce8\u610f\u662f\u4e92\u76f8\u8bbf\u95ee\uff0c\u6240\u4ee5\u8981\u4e582\uff09\uff1b\u5bf9\u4e8e\u5272\u70b9\uff0c\u635f\u5931\u7684\u8bbf\u95ee\u6b21\u6570\u5373\u4e3a$\\sum^{k}_{i=1}sz[i]\\times(n-sz[i])$\uff08\u5272\u70b9\u88ab\u5220\u540e\uff0c\u4ea7\u751f$k$\u4e2a\u8054\u901a\u5757\uff0c\u7b2c$i$\u4e2a\u8054\u901a\u5757\u5927\u5c0f\u4e3a$sz[i]$\uff09\u3002\u5728\u6c42\u5272\u70b9\u65f6\u987a\u4fbf\u5b89\u88c5\u4e0a\u8ff0\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff1a\u6c42\u5b8c$u$\u7684\u5b50\u6811\u4e2d\u6240\u6709\u5272\u70b9\u540e\uff0c\u8fd8\u8981\u52a0\u4e0a\u5269\u4e0b\u6765\u7684\u5927\u8054\u901a\u5757$(n-sum-1)\\times(sum+1)$\u548c\u81ea\u5df1$1\\times(n-1)$\u6b21\u8bbf\u95ee\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#define MAXN 100010\n#define MAXM 500010*2\n#define MIN(A,B) ((A)<(B)?(A):(B))\n#define MAX(A,B) ((A)>(B)?(A):(B))\n#define ll long long\nusing namespace std;\nint head[MAXN],vv[MAXM],nxt[MAXM],tot;\nint read(){\n    int w=1,q=0;char ch=' ';\n    while(ch!='-'&&(ch<'0'||ch>'9'))ch=getchar();\n    if(ch=='-')w=-1,ch=getchar();\n    while(ch>='0'&&ch<='9')q=q*10+ch-'0',ch=getchar();\n    return w*q;\n}\nvoid add_edge(int u, int v){\n    vv[++tot]=v;\n    nxt[tot]=head[u];\n    head[u]=tot;\n}\nint n,m;\nll ans[MAXN];\nint dfn[MAXN],cnt,low[MAXN],sz[MAXN];\nvoid tarjan(int u){\n    dfn[u]=++cnt;\n    low[u]=dfn[u];\n    sz[u]=1;\n    int son_sz=0,sum=0;\n    bool cut=0;\n    for(int i=head[u];i;i=nxt[i]){\n        int v=vv[i];\n        ++son_sz;\n        if(dfn[v]==0){\n            tarjan(v);\n            low[u]=MIN(low[u], low[v]);\n            sz[u]+=sz[v];\n            if(low[v]>=dfn[u]){\n                sum+=sz[v];\n                ans[u]+=(ll)sz[v]*(n-sz[v]);\n                if(u!=1) cut=1;\n            }\n        }else low[u]=MIN(low[u], dfn[v]);\n    }\n    if(u==1&&son_sz>1) cut=1;\n    if(!cut) ans[u]=(n-1)*2;\n    else ans[u]+=(ll)(n-sum-1)*(sum+1)+n-1;\n}\nint main() {\n    n=read(),m=read();\n    while(m--){\n        int a=read(),b=read();\n        add_edge(a,b);\n        add_edge(b,a);\n    }\n    tarjan(1);\n    for(int i=1;i<=n;++i) printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\n\n",
        "postTime": 1563804024,
        "uid": 63896,
        "name": "Santiego",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u5f88\u597d\u7684\u4e00\u9053tarjan\u9898\u554a\u3002\n\n\u770b\u5230\u9898\u9762\u5c31\u77e5\u9053\u662f**\u7f29\u70b9\u53cc\u8054\u901a\u5206\u91cf**\u5c31\u6216\u8005**\u627e\u5272\u70b9**\u4e86\u3002\n\n\u81f3\u4e8e\u4e0a\u8ff0\u4e24\u4e2a\u4e1c\u897f\u5982\u5904\u7406\uff0c\u8bf7\u53f3\u8f6c[\u6a21\u677f\u533a](https://www.luogu.org/problemnew/show/P3388)\n\n**\u7f29\u70b9\u53cc\u8054\u901a\u5206\u91cf**\u6216**\u627e\u5272\u70b9**\u90fd\u53ef\u4ee5\u89e3\u51b3\u672c\u9898\u3002\n\n\u4e24\u8005\u5176\u5b9e\u672c\u8d28\u662f\u4e00\u6837\u7684\uff0c\u533a\u522b\u5c31\u5728\u4e8e\u524d\u8005\u5e38\u6570\u5927\uff0c\u7801\u91cf\u5927\uff0c\u601d\u60f3\u590d\u6742\uff0c\u6ca1\u6709\u5f88\u597d\u7684**\u5229\u7528$tarjan$\u7b97\u6cd5\u7684\u6027\u8d28**\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6765\u8bb2\u5229\u7528\u5272\u70b9\u6765\u6c42\u89e3\u7684(~~\u590d\u6742\u5ea6\u4e25\u683cO(n+m)\u7684~~)\u7b97\u6cd5\u3002\n\n\u5047\u5982\u60a8\u5c01\u9501\u4e00\u4e2a\u57ce\u9547,\u53ef\u4ee5\u89c6\u4e3a\u628a\u6240\u6709\u4e0e\u8fd9\u4e2a\u70b9\u76f8\u5173\u7684\u8fb9\u90fd\u65ad\u5f00(\u4e5f\u5c31\u662f**\u963b\u6b62\u4eba\u4eec\u8fdb\u5165\uff0c\u79bb\u5f00\u6216\u8005\u8def\u8fc7\u90a3\u91cc**)\u3002\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5fc5\u7136\u628a\u56fe\u5206\u6210\u51e0\u90e8\u5206\uff0c\u8fd9\u8fd9\u4e9b\u90e8\u5206\u7684\u5927\u5c0f\u8bbe\u4e3a$\\Large{c_1,c_2,c_3...c_n}$\u3002\n\n\u6bd4\u5982\u8bf4\u8fd9\u5f20\u56fe(\u8c01\u77e5\u9053\u51fa\u5904?)\n\n![](http://img.blog.csdn.net/20130505212216043)\n\nhttp://img.blog.csdn.net/20130505212216043\n\n\u53ef\u4ee5\u770b\u523047\u8282\u70b9\u88ab\u5c01\u9501\u4e4b\u540e\u6574\u4e2a\u56fe\u53d8\u4e3a\u4e86\u56db\u90e8\u5206\u3002\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u7b2ci\u5806\u7684\u6240\u6709\u4eba\uff0c\u8bbf\u95ee\u5176\u4ed6\u5806\u7684\u613f\u671b\u90fd\u4e0d\u80fd\u6ee1\u8db3\uff0c\u8bbf\u95ee\u81ea\u5df1\u4eba\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\n\n\u6240\u4ee5\u7b2ci\u5806\u7684\u8d21\u732e\u4e3a$\\Large{c_i(n(\\text{\u6240\u6709c\u7684\u603b\u548c})-c_i})$\n\n\u600e\u4e48\u77e5\u9053\u6bcf\u4e2a\u70b9\u7684$\\Large{c}$\u6570\u7ec4\u5462\uff1f$tarjan$\u7b97\u6cd5\u53ef\u4ee5\u505a\u5230\u3002\n\n```\n\u522b\u5c0f\u770bdfs.\n                             \u2014\u2014\u7b97\u6cd5\u5bfc\u8bba\n```\n\n$tarjan$\u8fd9\u4e2a\u7b97\u6cd5\u6709\u5f88\u591a\u7684\u4f18\u79c0\u6027\u8d28\u3002\n\n\u6c42\u5272\u70b9\u7684\u65f6\u5019\uff0c\u5229\u7528\u4e86$\\large{low[sun]<=dfn[u]}$\u8fd9\u4e2a\u5224\u522b\uff0c\u8fd9\u4e2a\u5224\u522b\u7684\u610f\u601d\u5c31\u662f\uff1a\u8fd9\u4e2a\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u8dd1\u4e0d\u51fa\u5272\u70b9\u7684\u9b54\u638c\uff0c\u88ab\u5206\u5272\u4e86\u51fa\u53bb\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u76f8\u5f53\u4e8e\u4e00\u5806\u3002(\u4e0d\u61c2\u770b\u4ee3\u7801)\n\n\u628a\u8fd9\u4e9b\u5806\u90fd\u6c42\u51fa\u6765\u4e86\u4e4b\u540e\uff0c\u522b\u5fd8\u8bb0\uff1a\n\n1.\u8fd9\u4e2a\u70b9\u672c\u8eab\u4e5f\u7b97\u4e00\u5806\u3002\n\n2.\u9664\u6b64\u4e4b\u5916\u5269\u4e0b\u7684\u90fd\u7b97\u4e00\u5806\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u867d\u7136\u6bcf\u4e2a\u8282\u70b9\u7684${total_c}$\u4e0d\u540c\uff0c\u4f46\u662f${total_c}$\u7684\u603b\u91cf\u4e3a$O(m)$\u6240\u4ee5\u590d\u6742\u5ea6\u6b63\u786e\u3002\n\n**P.S** long long\u8981\u5f00\u8db3!!WA\u00b780-90\u7684\u6ce8\u610f\u4e00\u4e0b\n\nCode\uff1a\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<vector>\nusing namespace std;\nvector<int> g[100500];\nint n,m,from,to,tim,\n    dfn[100500],low[100500];\nlong long c[100500],ans[100500];\nvoid dfs(int num,int fa)\n{\n  low[num]=dfn[num]=++tim;\n  ans[num]=0;c[num]=1;\n  long long tmp=1;//\u81ea\u5df1\u5728\u81ea\u5df1\u7684\u5b50\u6811\u4e2d\n  //tmp: \u5b50\u6811\u8282\u70b9\u548c \n  for (int i=0,v;i<g[num].size();i++)\n   if (!dfn[v=g[num][i]]){\n     dfs(v,num);\n     c[num]+=c[v];\n     low[num]=min(low[num],low[v]);\n     if (low[v]>=dfn[num]){\n\t   ans[num]+=c[v]*((long long)n-c[v]);\n\t   tmp+=c[v];//\u67d0\u4e2a\u53ef\u4ee5\u88ab\u963b\u65ad\u7684\u5b50\u6811 \n\t }\n   }else if (g[num][i]!=fa)\n     low[num]=min(low[num],dfn[v]);\n  ans[num]+=1*(n-1);//\u7b97\u8fd9\u4e2a\u70b9\u672c\u8eab\u6210\u4e00\u5757\n  ans[num]+=((long long)n-tmp)*tmp;//\u5269\u4e0b\u4e0d\u5728dfs\u641c\u7d22\u6811\u5b57\u6811\u4e2d\u7684 \n}\nvoid t(int root)\n{\n  //\u5bf9\u6839\u7684\u7279\u6b8a\u5904\u7406\uff0c\u7c7b\u4f3c\u4e0a\u9762\n  low[root]=dfn[root]=++tim;\n  ans[root]=0;\n  int tmp=0;\n  for (int i=0,v;i<g[root].size();i++)\n   if (!dfn[v=g[root][i]])\n    {tmp++;dfs(v,root);ans[root]+=((long long)n-c[v])*c[v];}\n  ans[root]+=1*(n-1); \n}\nint main()\n{\n  scanf(\"%d%d\",&n,&m);\n  for (int i=1;i<=m;i++){\n    scanf(\"%d%d\",&from,&to);\n    g[from].push_back(to);\n    g[to].push_back(from);\n  }t(1);\n  for (int i=1;i<=n;i++)\n   printf(\"%lld\\n\",ans[i]);\n}\n```\n\n[AC\u8bb0\u5f55](https://www.luogu.org/recordnew/show/15031747)",
        "postTime": 1545912068,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "# [P3469[POI2008]BLO-Blockade](https://www.luogu.org/problemnew/show/P3469)\n~~\u8fd9\u6b21\u662fBLO\u3002\u3002\u3002\u4e0d\u662fLO\u4e86QAQ~~ ---\u81f4\u7ba1\u7406\u5458\n\n------\n\n# \u7b97\u6cd5\n\nTarjan\u627e\u5272\u70b9\n\n# \u601d\u8def\n\n> I.\u8bbe\u5728\u641c\u7d22\u6811T\u4e2d\u4ee5x\u4e3a\u6839\u7684\u6811\u5305\u542b\u7684\u70b9\u96c6\u4e3aSubTree(x)\u3002\n>\n> II.\u8fd9\u91cc\u53bb\u9664\u5272\u70b9\u53ef\u4ee5\u7406\u89e3\u4e3a\u5220\u9664\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u6240\u6709\u8fb9\u3002\n>\n> III.\u8fd9\u91cc\u63d0\u5230\u7684\u8fde\u901a\u5757\u662f\u6307\u5f53\u67d0\u4e00\u5272\u70b9\u53bb\u9664\u65f6\uff1a1.\u5176\u4e2d\u4efb\u4f55\u4e24\u4e2a\u70b9\u90fd\u80fd\u76f8\u4e92\u5230\u8fbe 2.\u6ca1\u6709\u66f4\u5927\u7684\u8fde\u901a\u5757\u5305\u542b\u8be5\u5757 \u5f53\u7136\uff0c\u6839\u636eII\uff0c\u6211\u4eec\u628a\u5355\u72ec\u7684X\u4e5f\u770b\u505a\u4e00\u4e2a\u8fde\u901a\u5757\n>\n> IV.\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u76f4\u63a5\u5c06(x,y)(\u6ee1\u8db3x\u4e0d\u80fd\u5230y)\u6210\u4e3a\u201c\u70b9\u5bf9\u201d\n>\n> V. ~S\uff1aS\u7684\u8865\u96c6\uff0cA^B\uff1a\u5728A\u4e2d\u4e0d\u5305\u62ec\u70b9B\u7684\u6240\u6709\u70b9\u6784\u6210\u7684\u96c6\u5408\n\n\u5229\u7528Tarjan\u67e5\u627e\u5272\u70b9\u7684\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u8be5\u5272\u70b9X\u53bb\u9664\u540e\u5269\u4f59\u7684\u8fde\u901a\u5757\uff08\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u5728SubTree(X)^X\u4e2d\uff0c\u53e6\u4e00\u79cd\u662f~SubTree(X)\uff09\u3002\n\n\u53ea\u8981\u80fd\u591f\u7406\u89e3\u5272\u70b9\u7684\u6c42\u89e3\u8fc7\u7a0b\uff0c\u8fd9\u8fd8\u662f\u5f88\u597d\u7406\u89e3\u7684\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u7136\u540e\u8981\u6c42\u201c\u70b9\u5bf9\u201d\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9X\uff0c\u4e0d\u7ba1\u662f\u5426\u4e3a\u5272\u70b9\uff0c\u70b9\u5bf9(i,j)\u4e3a\u201c\u70b9\u5bf9\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\n\n> i != j\u4e14i\u3001j\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u8fde\u901a\u5757\n\n\u6839\u636e\u5b9a\u4e49\uff0c\u5f88\u5bb9\u6613\u8bc1\u660e\u8fd9\u4e2a\u63a8\u8bba\u3002\n\n\u4ee3\u7801\u6709\u591a\u79cd\u5199\u6cd5\uff0c\u8fd9\u91cc\u9009\u53d6**\u6211\u80fd\u60f3\u5230\u7684**\u6700\u7b80\u5355\u7684\u5199\u6cd5\u3002\n\n\u5728\u679a\u4e3e\u8fde\u901a\u5757\u65f6\uff0cans\u52a0\u4e0a`s[to[i]] * ( n - s[to[i]] )`\uff0c\u5373\u4e00\u6b21\u6027\u5904\u7406\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u6240\u6709\u70b9\uff0c\u5b83\u4eec\u4e0e\u5176\u4ed6\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u70b9\u90fd\u6784\u6210\u201c\u70b9\u5bf9\u201d\u3002\u5f53\u7136\uff0c\u522b\u5fd8\u4e86X\u4e0e~SubTree(X)\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define LL long long\n#define MAXN 100005\n#define MAXM 1000005\n\nint n, m;\nint hd[MAXN], nxt[MAXM], to[MAXM], tot;\nint dfn[MAXN], low[MAXN], root, num;\nLL ans[MAXN];\nint s[MAXN];\n\nvoid Add( int x, int y ){ nxt[++tot] = hd[x]; hd[x] = tot; to[tot] = y; }\n\nvoid DFS( int x ){\n\ts[x] = 1;\n\tlow[x] = dfn[x] = ++num;\n\tLL b(0);\n\tfor ( int i = hd[x]; i; i = nxt[i] ){\n\t\tif ( !dfn[to[i]] ){\n\t\t\tDFS( to[i] ); s[x] += s[to[i]];\n\t\t\tlow[x] = min( low[x], low[to[i]] );\n\t\t\tif ( dfn[x] <= low[to[i]] ) ans[x] += (long long)s[to[i]] * ( n - s[to[i]] ), b += s[to[i]];//\u53d1\u73b0\u65b0\u7684\u8fde\u901a\u5757\uff01\n\t\t} else low[x] = min( low[x], dfn[to[i]] );\n\t}\n\tans[x] += (long long)( n - b - 1 ) * ( b + 1 ) + ( n - 1 );//\u7b97\u4e0a~SubTree(X)\u4e0eX\n}\n\nint main(){\n\tscanf( \"%d%d\", &n, &m );\n\tfor ( int i = 1; i <= m; ++i ){\n\t\tint x, y; scanf( \"%d%d\", &x, &y ); Add( x, y ); Add( y, x );\n\t}\n\tDFS( 1 );\n\tfor ( int i = 1; i <= n; ++i ) printf( \"%lld\\n\", ans[i] );\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1544797662,
        "uid": 70786,
        "name": "_louhc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u8fd9\u4e2a\u6e23\u6e23\u770b\u4e0d\u61c2\u4efb\u4f55\u4e00\u4e2a\u9898\u89e3\n\n\u6240\u4ee5\u81ea\u5df1\u6765\u5199\u4e00\u4e2a\n\n\u8bf4\u4e00\u4e0b\u8fd9\u9898\u7684\u601d\u8def\u5427\n\n\u9996\u5148\u975e\u5e38\u663e\u7136\uff0c\u8fd9\u9898\u548c\u5272\uff08\u9e3d\uff09\u70b9\u7684\u8fc7\u7a0b\u6709\u5173\u3002\uff08\u4f46\u662f\u5e76\u4e0d\u9700\u8981\u771f\u6b63\u6c42\u51fa\u6765\uff09\n\n\u5272\u70b9\u7684\u539f\u7406\u76f8\u4fe1\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u4e0d\u77e5\u9053\u7684\u5efa\u8bae\u5148\u505a\u5272\u70b9\u6a21\u677f\n\n\u8fdb\u884ctarjan\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u5728\u641c\u7d22\u6811\u4e0a\uff0c\u4e00\u4e2a\u70b9\u7684\u4e00\u68f5\u5b50\u6811\u7684low>=dfn\uff0c\u90a3\u4e48\u5728\u8be5\u70b9\u65ad\u5f00\u540e\uff0c\u8fd9\u68f5\u5b50\u6811\u5c06\u4e0d\u80fd\u5230\u8fbe\u8be5\u70b9\u7684\u7956\u5148\u548c\u5144\u5f1f\u4eec\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u8981\u8fdb\u884c\u8ba1\u6570\u3002\n\n\u4f46\u662f\uff0c\u8ba1\u6570\u7684\u6700\u5927\u96be\u70b9\u5c31\u5728\u4e8e\u600e\u4e48\u80fd\u4e0d\u91cd\u4e0d\u6f0f\u7684\u8ba1\u7b97\u5230\u6240\u6709\u60c5\u51b5\u3002\n\n\u4e3a\u4e86\u4e0d\u6570\u91cd\uff0c\u8bb0size[i]\u4e3ai\u6240\u5728\u5b50\u6811\u5927\u5c0f\uff0cua\u4e3a\u5728\u8003\u8651x\u8fd9\u4e2a\u70b9\u6240\u5728\u5b50\u6811\u662f\uff0c\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u65e0\u6cd5\u5230\u8fbex\u7684\u7956\u5148\uff0c\u5144\u5f1f\u7684\u5b50\u6811\u7684\u5927\u5c0f\u4e4b\u548c\uff08\u7406\u89e3\u4e00\u4e0b\u8fd9\u53e5\u8bdd\uff09\n\n\u8003\u8651\u7b2ck\u68f5\u5b50\u6811\u65f6\uff0c\u5982\u679c\u5b83\u7684low<dfn\uff0c\u4e0d\u7ba1\u4ed6\uff0c\u5426\u5219\u8bb0\n```\nua+=size[x.son[k]]; ans[x]+=2*size[x.son[k]]*(n-ua-1) \n\n```\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981*2\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u5bf9\n\n\u5f53\u7136\u628a\u4e00\u4e2a\u70b9\u65ad\u5f00\u540e\uff0c\u5176\u4ed6\u5e97\u90fd\u4e0d\u80fd\u5230\u5b83\uff0c\u5b83\u4e5f\u4e0d\u80fd\u5230\u5176\u4ed6\u70b9\uff0c\u6240\u4ee5:\n```\nans[i]+=2*(n-1)\n```\n\u6b64\u9898\u4fdd\u8bc1\u539f\u56fe\u8054\u901a\uff0c\u6240\u4ee5\u76f4\u63a5tarjan(1,0)\u5c31\u884c\u4e86\n\n\u5982\u679c\u770b\u4e0d\u61c2\u516c\u5f0f\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u4ee3\u7801\uff0c\u611f\u89c9\u4ee3\u7801\u66f4\u5bb9\u6613\u7406\u89e3\u4e00\u70b9\u3002\n\n\n\n```\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint n;\nint dfn[100005], low[100005], sz[100005], cnt;\nlong long ans[100005];\nvector <int> V[100005];\nvoid tarjan(int x, int f)\n{\n  int i, r, SZ = 1, ua = 0;//SZ\u662f\u6b64\u6811\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\uff0cua\u662f\u76ee\u524d\u5df2\u7ecf\u679a\u4e3e\u5230\u7684\u5728x\u65ad\u5f00\u540e\u4e0d\u80fd\u4e0e\u7956\u5148\u76f8\u8fde\u7684\u70b9\u96c6\u5927\u5c0f \n  dfn[x] = low[x] = ++cnt;\n  for(i = 0; i < V[x].size(); i++)\n  {\n    r = V[x][i];\n    if(r == f) continue;\n    if(!dfn[r])\n    {\n      tarjan(r, x);\n      SZ += sz[r];\n      low[x] = min(low[x], low[r]);\n      if(low[r] >= dfn[x])//\u8fd9\u68f5\u5b50\u6811\u56de\u4e0d\u53bb\n\t  {\n\t    ua += sz[r];\n\t\tans[x] += (long long)2 * sz[r] * (n - ua - 1);\n\t  }\n\t}\n\telse\n\t  low[x] = min(low[x], dfn[r]);\n  }\n  sz[x] = SZ;\n  ans[x] += 2 * (n - 1);\n}\nint main(int argc, char **argv)\n{\n\tint m, a, b, i;\n\tscanf(\"%d %d\", &n, &m);\n\tfor(i = 1; i <= m; i++)\n\t{\n\t  scanf(\"%d %d\", &a, &b);\n\t  V[a].push_back(b);\n\t  V[b].push_back(a);\n\t}\n\ttarjan(1, 0);\n\tfor(i = 1; i <= n; i++)\n\t  printf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n\n```",
        "postTime": 1538715949,
        "uid": 47140,
        "name": "\u65af\u8302",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "## \u9898\u76ee\u94fe\u63a5\uff1a\n\n[[POI2008]BLO-Blockade](<https://www.luogu.org/problem/P3469>)\n\n## \u9898\u76ee\u63cf\u8ff0\uff1a\n\n\u6709 $n$ \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u56fe\uff0c\u5b9a\u4e49\u5c01\u9501\u4e00\u4e2a\u70b9\u4e3a\u5207\u65ad\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u8fde\u8fb9\u3002\u6c42\u6bcf\u4e2a\u8282\u70b9\u88ab\u5c01\u9501\u540e\u56fe\u5185\u7684\u4e0d\u8fde\u901a\u6709\u5e8f\u70b9\u5bf9\u4e2a\u6570\u3002\n\n## \u89e3\u9898\u601d\u8def\uff1a\n\nTarjan\u3002\n\n\u9996\u5148\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u5c01\u9501\u4e00\u4e2a\u70b9\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\n1. \u4e0d\u662f\u5272\u70b9\n\n   \u8fd9\u79cd\u60c5\u51b5\u597d\u641e\uff0c\u4ece\u56fe\u4e2d\u663e\u7136\u53ef\u4ee5\u770b\u51fa\u53ea\u6709\u81ea\u5df1\u548c\u5176\u4ed6 $n - 1 $ \u4e2a\u8282\u70b9\u4e0d\u8fde\u901a\uff0c\u56e0\u4e3a\u662f\u6709\u5e8f\u8282\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a $2 \\times (n-1)$\n\n   ![](https://s2.ax1x.com/2019/09/08/n3Muo8.png)\n\n2. \u662f\u5272\u70b9\n\n   \u8fd9\u79cd\u60c5\u51b5\u5c31\u6709\u610f\u601d\u4e86\u3002\n\n   \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u70b9 i \u4e3a\u5272\u70b9\uff0c\u663e\u7136\u53bb\u6389\u8fd9\u4e2a\u70b9\u4e4b\u540e\u6574\u4e2a\u56fe\u4f1a\u53d8\u6210\u51e0\u4e2a\u8054\u901a\u5757\uff0c\u5982\u4e0b\u56fe\uff1a\n\n   ![](https://s2.ax1x.com/2019/09/08/n3MWFO.png)\n\n   \u8fd9\u79cd\u60c5\u51b5\u6211\u4eec\u4e5f\u5f88\u597d\u53d1\u73b0\uff0c\u628a\u8054\u901a\u5757\u7684\u5927\u5c0f\u4e24\u4e24\u76f8\u4e58\u53ef\u5f97\u7b54\u6848\u3002\n\n   \u8bb0\u7b2c i \u4e2a\u8054\u901a\u5757\u4e3a$s_i$\n\n   \u4f46\u662f\u628a\u8054\u901a\u5757\u5927\u5c0f\u4e24\u4e24\u76f8\u4e58\u7684\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \u4e0d\u80fd\u63a5\u53d7\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 dfs \u65f6\u628a\u641c\u7d22\u6811\u5b50\u6811\u5927\u5c0f\u7b97\u51fa\u6765\uff0c\u8bb0\u4e3a $siz[i]$\n\n   \u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a\uff1a \n\n   $(n - 1 - \\sum_{i=1}^{t}siz[s_k])*(1+\\sum_{i=1}^{t}siz[s_k])$ \n\n## \u4ee3\u7801\uff1a\n\n```cp\n#include <cstdio>\n#include <cctype>\n#include <algorithm>\nusing namespace std;\nconst int N = 100010;\nconst int M = 500010<<1;\ninline int read() {\n\tint x = 0,f = 1;char v = getchar();\n\twhile (!isdigit(v)) {if (v =='-') f = -1;v = getchar();}\n\twhile (isdigit(v)) {x = x * 10 + v - 48;v = getchar();}\n\treturn x * f;\n}\nint nxt[M],hd[N],to[M],tot = 1,cnt,dfn[N],low[N],siz[N],n,m;\nlong long ans[N];\nbool cut[N];\n\ninline void adde(int u,int v) {\n\tto[++tot] = v;nxt[tot] = hd[u];hd[u] = tot;\n}\n\ninline void addedge(int u,int v) {\n\tadde(u,v);adde(v,u);\n}\n\nvoid tarjan(int x) {\n\tdfn[x] = low[x] = ++cnt;\n\tsiz[x] = 1;\n\tint flag = 0,sum = 0;\n\tfor (int i = hd[x];i;i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[x] = min(low[x],low[v]);\n\t\t\tsiz[x] += siz[v];\n\t\t\tif (low[v] >= dfn[x]) {\n\t\t\t\tflag++;\n\t\t\t\tans[x] += (long long)siz[v]*(n - siz[v]);\n\t\t\t\tsum += siz[v];\n\t\t\t\tif (x != 1 || flag > 1) {\n\t\t\t\t\tcut[x] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t\telse {\n\t\t\tlow[x] = min(low[x],dfn[v]);\n\t\t}\n\t}\n\tif (cut[x]) {\n\t\tans[x] += (long long)(n - sum - 1) * (sum + 1) + (n - 1);\n\t}\n\telse {\n\t\tans[x] = 2*(n-1);\n\t}\n}\n\nint main() {\n\tn = read(),m = read();\n\tfor (int i = 1;i <= m;++i) {\n\t\tint x = read(),y = read();\n\t\tif (x == y) {\n\t\t\tcontinue;\n\t\t}\n\t\taddedge(x,y);\n\t\t\n\t}\n\ttarjan(1);\n\tfor (int i = 1;i <= n;++i) {\n\t\tprintf(\"%lld\\n\",ans[i]);\n\t}\n\treturn 0;\n}\n```\n\n## \u53c2\u8003\uff1a\n\n\u90e8\u5206\u601d\u8def\u6765\u81ea\u4e8elyd\u7684\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\n\n",
        "postTime": 1567873180,
        "uid": 105230,
        "name": "Retired_Doubeecat",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "- \u65e2\u7136\u521a\u5b66\u4e86\u5272\u8fb9\u5272\u70b9\uff0c\u6211\u5c31\u6765\u5199\u4e00\u6ce2\u9898\u89e3\u3002\u3002\n1. \u6839\u636e\u5272\u70b9\u7684\u5b9a\u4e49\uff0c\u82e5\u8282\u70b9$i$\u4e0d\u662f\u5272\u70b9\uff0c\u5c31\u628a\u8282\u70b9i\u5173\u8054\u7684\u6240\u6709\u8fb9\u90fd\u53bb\u6389\u540e\uff0c\u53ea\u6709\u4e0e\u5176\u4ed6$n - 1$\u4e2a\u8282\u70b9\u4e4b\u95f4\u662f\u8054\u901a\u7684\u3002\u4f46\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d$(x,y)$\u4e0e$(y,x)$\u7b97\u4e0d\u540c\u7684\u70b9\u5bf9\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a$2*(n - 1)$\u3002\n2. \u82e5\u8282\u70b9$i$\u662f\u5272\u70b9\uff0c\u5219\u628a\u8282\u70b9$i$\u5173\u8054\u7684\u8fb9\u53bb\u6389\u540e\uff0c\u56fe\u4f1a\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002\u6211\u4eec\u9700\u8981\u6c42\u51fa\u8fde\u901a\u5757\u7684\u5927\u5c0f\uff0c\u4e24\u4e24\u76f8\u4e58\u518d\u76f8\u52a0\u3002\u8bbe\u5728\u641c\u7d22\u6811\u4e0a\uff0c\u8282\u70b9$i$\u7684\u5b50\u8282\u70b9\u96c6\u5408\u4e2d\uff0c\u6709$t$\u4e2a\u70b9$s_{1},s_{2},s_{3},...,s_{t}$\u6ee1\u8db3\u5272\u70b9\u7684\u5224\u5b9a\u6cd5\u5219$dfn[i]\\leq low[s_{k}]$\u3002\u6700\u540e\u4f1a\u53d8\u6210\u81f3\u591a$t + 2$\u4e2a\u8fde\u901a\u5757\u3002\n3. \u6211\u4eec\u53ef\u4ee5\u5728tarjan\u7b97\u6cd5\u6df1\u641c\u7684\u65f6\u5019\uff0c\u987a\u4fbf\u6c42\u51fa\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u3002\u82e5$size[x]$\u4e3a\u4ee5$x$\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u3002\u6700\u540e\u7684\u7b54\u6848\u5f88\u660e\u663e\u5c31\u662f\n$\\sum_{k = 1}^{t}size[s_{k}]*(n - size[s_{k}]])+1*(n-1)+(n-1-\\sum_{k = 1}^{t}size[s_{k}])*(1+\\sum_{k = 1}^{t}size[s_{k}])$\n# Code:\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\n\nconst int N = 1e5 + 10, M = 5e5 + 10;\nstruct edge {\n\tint y, nxt;\n}e[M * 2];\nint lin[M], len = 1;\nint dfn[N], low[N], num, size[N];\nint n, m;\nll ans[N];\nbool cut[N];\ninline ll read() {\n\tll s = 0, f = 1;\n\tchar ch;\n\tfor(; ch < '0' || ch > '9'; ch = getchar())\tif(ch == '-')\tf = -1;\n\tfor(; ch >= '0' && ch <= '9'; ch = getchar())\ts = (s << 1) + (s << 3) + ch -'0';\n\treturn s * f;\n}\n\ninline void insert(int xx, int yy) {\n\te[++len] = {yy, lin[xx]};\n\tlin[xx] = len;\n\te[++len] = {xx, lin[yy]};\n\tlin[yy] = len;\n}\n\ninline void tarjan(int x) {\n\tdfn[x] = low[x] = ++num;\n\tsize[x] = 1;\n\tint flag = 0, sum = 0;\n\tfor(int i = lin[x]; i; i = e[i].nxt) {\n\t\tint y = e[i].y;\n\t\tif(!dfn[y]) {\n\t\t\ttarjan(y);\n\t\t\tsize[x] += size[y];\n\t\t\tlow[x] = min(low[x], low[y]);\n\t\t\tif(low[y] >= dfn[x]) {\n\t\t\t\tflag++;\n\t\t\t\tans[x] += (ll)size[y] * (n - size[y]);\n\t\t\t\tsum += size[y];\n\t\t\t\tif(x != 1 || flag > 1)\tcut[x] = 1;\n\t\t\t}\n\t\t} else low[x] = min(low[x], dfn[y]);\n\t}\n\tif(cut[x])\tans[x] += (ll)(n - sum - 1) * (sum + 1) + (n - 1);\n\telse\tans[x] = 2 * (n - 1);\n}\n\nint main() {\n\tn = read();\n\tm = read();\n\tfor(int i = 1; i <= m; ++i)\t{\n\t\tint xx = read(), yy = read();\n\t\tif(xx == yy)\tcontinue;\n\t\tinsert(xx, yy);\n\t}\n\ttarjan(1);\n\tfor(int i = 1; i <= n; ++i)\tprintf(\"%lld\\n\", ans[i]);\n\treturn 0;\n}\n```\n\u6c42\u8fc7",
        "postTime": 1566728569,
        "uid": 197658,
        "name": "dread",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u6548\u679c\u66f4\u4f73](https://www.luogu.org/blog/oldherd/solution-p3469)\n### tarjan\u5272\u70b9ex\n\u7531\u9898\u610f\u53ef\u77e5\uff0c\u6211\u4eec\u6240\u6c42\u7684\u662f\u5272\u6389\u70b9\u4e4b\u540e\u4ea7\u751f\u7684\u975e\u8fde\u901a\u5757\u4e4b\u95f4\u7684\u5173\u7cfb\u3002  \n\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u5272\u70b9\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u5b64\u7acb\u7136\u800c\u5269\u4e0b\u7684n-1\u4e2a\u70b9\u4ecd\u7136\u8fde\u901a\u3002\u6240\u4ee5\u4e00\u5171\u589e\u52a0\u4e862(n-1)\u4e2a\u975e\u8fde\u901a\u6709\u5e8f\u70b9\u5bf9\u3002  \n\u5224\u65ad\u5272\u70b9\u5f88\u5bb9\u6613\u60f3\u5230tarjan\u7b97\u6cd5\u3002\u4e0d\u662f\u5272\u70b9\u7684\u70b9\u81ea\u7136\u53ef\u4ee5\u76f4\u63a5\u5224\u65ad\u7b54\u6848\u4e3a2(n-1)\u3002  \n\u65e2\u7136\u7528\u5230\u4e86tarjan\uff0c\u6211\u4eec\u4e0d\u59a8\u6df1\u5165\u6316\u6398\u5176\u6027\u8d28\uff0c\u770b\u770b\u80fd\u5426\u6c42\u5f97\u5220\u9664\u5272\u70b9\u540e\u7684\u7b54\u6848\u3002  \n\u4e00\u4e2a\u7ed3\u70b9x\u662f\u5272\u70b9\uff0c\u5f53\u5b83\u4e0d\u4e3a\u6839\u7ed3\u70b9\u4e14\u6709\u81f3\u5c11\u4e00\u4e2a\u5b50\u8282\u70b9y\u6ee1\u8db3dfn[y]>=low[x]\u6216\u8005\u5b83\u4e3a\u6839\u8282\u70b9\u4f46\u6709\u81f3\u5c11\u4e24\u4e2a\u7ed3\u70b9\u6ee1\u8db3\u4e0a\u8ff0\u5272\u70b9\u5224\u5b9a\u5f0f\u3002  \n\u7531\u6b64\u8054\u60f3\u5230\uff0c\u5982\u679c\u5220\u9664\u4e86\u4e00\u4e2a\u5272\u70b9x\uff0c\u90a3\u4e48\u6ee1\u8db3\u4e0a\u8ff0\u5224\u522b\u5f0f\u7684\u5b50\u6811\u5747\u72ec\u7acb\u6210\u4e3a\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4e14\u4e0d\u4e0e\u5b50\u6811\u5916\u7684\u7ed3\u70b9\u8fde\u901a\u3002  \n\u6240\u4ee5\u5220\u9664\u5272\u70b9\u540e\u7684\u5c40\u9762\u5c31\u662f\uff0c\u5404\u6ee1\u8db3\u5224\u522b\u5f0f\u7684\u5b50\u6811\u6210\u72ec\u7acb\u7684\u8fde\u901a\u5757\uff0c\u8be5\u5272\u70b9\u6210\u72ec\u7acb\u8fde\u901a\u5757\uff0c\u5269\u4f59\u7ed3\u70b9\u6784\u6210\u72ec\u7acb\u7684\u8fde\u901a\u5757\u3002\u53ea\u8981\u6211\u4eec\u6c42\u51fa\u6bcf\u5757\u7684\u5927\u5c0f\uff0c\u7531\u6570\u5b66\u65b9\u6cd5\u5f88\u5bb9\u6613\u63a8\u51fa\u8ba1\u7b97\u516c\u5f0f\u6765\u3002  \n\u7531\u4e8e\u6211\u4eec\u505atarjan\u7b97\u6cd5\u662f\u6cbf\u7740\u641c\u7d22\u6811\u7684\uff0c\u6545\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u9012\u63a8\u7edf\u8ba1\u51fa\u5b50\u6811\u7684\u5927\u5c0f\u3002\n```\n\u5220\u6389\u5272\u70b9\u7684\u7b54\u6848\uff1a t[1]*(n-t[1])+t[2]*(n-t[2])+... + (n-1) + (1+sum)*(n-sum-1)\n\u5220\u6389\u975e\u5272\u70b9\u7684\u7b54\u6848\uff1a 2*(n-1)\n```\n\u9644\u4e0aac\u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int maxn = 100010, maxm = 500010;\nint n;\n\n#define min(x, y) (x) < (y) ? (x) : (y)\n\nint head[100010], ver[maxm<<1], nex[maxm<<1], tot;\n\ninline void addedge(int u, int v) {\n    ver[tot] = v; nex[tot] = head[u]; head[u] = tot++;\n}\n\nlong long ans[maxn];\nint dfn[maxn], low[maxn], cut[maxn], size[maxn], dfs_clock = 1;\n\ninline void tarjan(int cur) {\n    dfn[cur] = low[cur] = dfs_clock++; size[cur] = 1;\n    int flag = 0, sum = 1;\n    for(int i = head[cur]; i != -1; i = nex[i]) {\n        if(!dfn[ver[i]]) {\n            tarjan(ver[i]);\n            low[cur] = min(low[cur], low[ver[i]]);\n            size[cur] += size[ver[i]];\n            if(dfn[cur] <= low[ver[i]]) {\n                flag++;\n                sum += size[ver[i]];\n                ans[cur] += (long long)(n - size[ver[i]]) * size[ver[i]];\n                if(cur != 1 || flag > 1) cut[cur] = 1;\n            }\n        } else {\n            low[cur] = min(low[cur], dfn[ver[i]]);\n        }\n    }\n    if(cut[cur]) ans[cur] += (n - 1) + (long long)(n - sum) * sum;\n    else ans[cur] = 2 * (n - 1);\n}\n\nint main() {\n    int m, u, v;\n    scanf(\"%d %d\", &n, &m);\n    memset(head, -1, sizeof(head));\n    while(m--) {\n        scanf(\"%d %d\", &u, &v);\n        addedge(u, v); addedge(v, u);\n    }\n    tarjan(1);\n    for(int i = 1; i <= n; i++)\n        printf(\"%lld\\n\", ans[i]);\n    return 0;\n}\n```\n\u6b22\u8fce\u4e92\u76f8\u5173\u6ce8(\u7136\u800c\u5728oi\u754c\u849f\u84bb\u7684\u5708\u5f88\u5c0f)\u3002  \n\u6700\u540e\u518d\u6b21\u5b89\u5229\u4e00\u4e0b[\u849f\u84bb\u7684\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.org/blog/oldherd/)",
        "postTime": 1557327842,
        "uid": 88735,
        "name": "\u5bd2\u9e3d\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3469 \u3010[POI2008]BLO-Blockade\u3011"
    }
]