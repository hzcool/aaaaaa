[
    {
        "content": "\u8fd9\u9898\u4e0d\u662f\u56de\u6587\u81ea\u52a8\u673a\u7684\u677f\u5b50\u4e48\u2026\u2026\u4e3a\u5565\u6ca1\u4eba\u7528\u56de\u6587\u81ea\u52a8\u673a\u5199\u554a\u2026\u2026\n\n\u849f\u84bb\u5c31\u5927\u8a00\u4e0d\u60ed\u7684\u6765\u8bb2\u4e00\u8bb2\u8fd9\u73a9\u610f\u513f\u597d\u4e86->[\u5e7f\u544a](https://www.cnblogs.com/bztMinamoto/p/9630617.html)\n\n# \u524d\u8a00\n\n\u521a\u5b66\u5b8cmanacher\u5c31\u6765\u5b66\u56de\u6587\u81ea\u52a8\u673a\u2026\u2026\n\n\u611f\u89c9\u597d\u50cf\uff08\u677f\u5b50\uff09\u4e5f\u4e0d\u662f\u5f88\u96be\uff08\u80cc\uff09\uff1f\n\n\u524d\u7f6e\u77e5\u8bc6\uff1aManacher\uff08\u4e5f\u4e0d\u4e00\u5b9a\u975e\u8981\u56e0\u4e3a\u548c\u8fd9\u4e2a\u6ca1\u5565\u5173\u7cfb\uff09\uff0c\u77e5\u9053\u81ea\u52a8\u673a\u662f\u4e2a\u5565\u4ee5\u53ca\u600e\u4e48\u5efa\n\n# \u7b80\u8ff0\n\n\u56de\u6587\u6811\u548c\u56de\u6587\u81ea\u52a8\u673a\u6307\u7684\u662f\u540c\u4e00\u4e2a\u4e1c\u897f\n\n\u662f\u7531\u67d0\u897f\u4f2f\u5229\u4e9a\u4eba\u4e8e2014\u590f\u53d1\u660e\u7684\n\n\u8fd9\u4e1c\u897f\u4e3b\u8981\u662f\u7528\u4e8e\u8ba1\u6570\uff0c\u8ba1\u7b97\u56de\u6587\u4e32\u7684\u4e2a\u6570\u4ee5\u53ca\u79cd\u7c7b\u5565\u7684\n\n# \u5efa\u6811\n\n\u56fe\u6211\u5c31\u4e0d\u653e\u4e86\uff08\u592a\u4e71\u4e86\u653e\u4e86\u4e5f\u770b\u4e0d\u61c2\uff09\uff0c\u8981\u770b\u56fe\u7684\u8bdd\u53ef\u4ee5\u53bb\u8fd9\u4f4d\u5927\u795e\u7684blog\u91cc\u770b\u4e00\u4e0b->[\u8fd9\u91cc](https://blog.csdn.net/Clove_unique/article/details/53750322)\n\n\u4e0d\u8fc7\u4e2a\u4eba\u611f\u89c9\u770b\u6587\u5b57\u63cf\u8ff0\u5e94\u8be5\u5c31\u4f1a\u4e86\u2026\u2026\u5427\u2026\u2026\n\n\u9996\u5148\uff0c\u56de\u6587\u6811\u91cc\u6709\u4e24\u68f5\u6811\uff0c\u5206\u522b\u8bb0\u5f55\u957f\u5ea6\u4e3a\u5947\u6570\u548c\u5076\u6570\u7684\u56de\u6587\u4e32\n\n\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u8bb0\u5f55\u8f6c\u79fb$x$\uff0c\u8868\u793a\u5982\u679c\u5728\u8fd9\u4e2a\u56de\u6587\u4e32\u524d\u540e\u90fd\u52a0\u4e0a\u5b57\u7b26$x$\u5f62\u6210\u7684\u56de\u6587\u4e32\u662f\u5b50\u8282\u70b9\u7684\u5b50\u4e32\n\n\u7136\u540e\u6bcf\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2afail\u6307\u9488\uff0c\u6307\u5411\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u6700\u957f\u540e\u7f00\u56de\u6587\u4e32\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u5efa\u6811\uff0c\u5047\u8bbe\u5df2\u7ecf\u5efa\u597d\u4e86\u4e32$s[1...i-1]$\uff0c\u8981\u628a\u5b57\u7b26$s[i]$\u63d2\u5165\u8fd9\u68f5\u6811\n\n\u90a3\u4e48\u6bcf\u4e00\u6b21\u53ea\u4f1a\u628a$s[1...i]$\u7684\u6700\u957f\u540e\u7f00\u56de\u6587\u4e32\u52a0\u8fdb\u6811\u91cc\u3002\n\n\u8bc1\u660e\uff1a\uff08\u6284[\u8fd9\u91cc](https://www.cnblogs.com/nietzsche-oier/p/6935081.html)\u7684\uff09\n\n\u6211\u4eec\u8bbe\u540e\u7f00\u56de\u6587$i$\u662f\u6700\u957f\u540e\u7f00\u56de\u6587$k$\u7684\u5b50\u4e32\uff0c\u90a3\u4e48$i$\u80af\u5b9a\u5173\u4e8e$k$\u7684\u56de\u6587\u4e2d\u5fc3\u6709\u4e00\u4e2a\u5bf9\u79f0\u4e32$j$\uff0c\u7531\u4e8e$k$\u672c\u8eab\u662f\u5bf9\u79f0\u7684\uff0c\u6240\u4ee5$j$\u548c$i$\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48$j$\u5df2\u7ecf\u88ab\u52a0\u5165\u5230\u56de\u6587\u6811\u4e2d\uff0c\u6240\u4ee5$i$\u4e0d\u5fc5\u518d\u52a0\u5165\n\n\u7136\u540e\u5c31\u6ca1\u95ee\u9898\u4e86\u3002\u6211\u4eec\u8bbe\u6700\u957f\u56de\u6587\u540e\u7f00\u4e3a$k$\uff0c\u52a0\u5165\u5b57\u7b26$c$\uff0c\u90a3\u4e48\u5982\u679c\u53ef\u4ee5\uff0c\u6700\u957f\u56de\u6587\u540e\u7f00\u4f1a\u53d8\u6210$ckc$\n\n\u7136\u800c\u5982\u679c$k$\u4e4b\u524d\u7684\u5b57\u6bcd\u4e0d\u662f$c$\u600e\u4e48\u529e\uff1f\u8fd9\u4e2a\u65f6\u5019$fail$\u6307\u9488\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\u6211\u4eec\u7528$fail$\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u6700\u957f\u540e\u7f00\u56de\u6587\uff0c\u5982\u679c$k$\u4e0d\u884c\uff0c\u6211\u4eec\u770b\u770b$k$\u7684\u6700\u957f\u540e\u7f00\u56de\u6587\u662f\u5426\u53ef\u884c\uff08\u5c31\u662f\u770b$k$\u7684\u6700\u957f\u540e\u7f00\u56de\u6587\u7684\u524d\u4e00\u4e2a\u5b57\u6bcd\u662f\u5426\u7b49\u4e8e$c$\uff09\uff0c\u7136\u540e\u5c31\u8fd9\u6837\u4e00\u76f4\u8df3$fail$\u6307\u9488\u76f4\u5230\u627e\u5230\u4e3a\u6b62\uff08\u5982\u679c\u4e00\u76f4\u6ca1\u6709\u627e\u5230\u4f1a\u8df3\u5230\u6839\u8282\u70b9\uff0c\u4e0b\u9762\u518d\u8bf4\uff09\n\n\u7136\u540e\u5982\u4f55\u7ef4\u62a4$fail$\u5462\uff1f\u6211\u4eec\u53ea\u8981\u627e\u5230\u4e86\u5f53\u524d\u8282\u70b9\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u5c31\u5c31\u597d\u4e86\n\n\u7136\u540e\u5b57\u7b26\u8981\u63a5\u5728\u4e4b\u524d\u7684\u4e32\u7684\u540e\u9762\uff0c\u8bb0\u5f55\u4e00\u4e0b$last$\u8868\u793a\u4e0a\u4e00\u4e2a\u4e32\u7684\u8282\u70b9\n\n\u7136\u540e\u6ce8\u610f\u7279\u6b8a\u5904\u7406\u4e24\u4e2a\u6839\u8282\u70b9\uff0c$0$\u4ee3\u8868\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u540e\u7f00\u7684\u6839\uff0c$1$\u4ee3\u8868\u957f\u5ea6\u4e3a$1$\u7684\u540e\u7f00\u7684\u6839\uff0c\u6211\u4eec\u4ee4$fail[0]$\u6307\u5411$1$\uff0c$len[1]=-1$\uff0c\u7136\u540e\u4ee4$s[0]=-1$\uff08\u6216\u4efb\u4f55\u4e00\u4e2a\u4e0d\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u7684\u5b57\u7b26\uff09\uff08$len$\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u4e32\u957f\uff09\n\n\u5c31\u6bd4\u5982\u8bf4\u5982\u679c\u8df3\u7684\u65f6\u5019\u4e00\u76f4\u627e\u4e0d\u5230\u56de\u6587\u600e\u4e48\u529e\uff1f\u8fd9\u4e2a\u65f6\u5019\u8fd9\u4e2a\u8282\u70b9\u5c31\u5355\u72ec\u5f62\u6210\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5224\u65ad$s[i-len[x]-1]==s[i]$\u7684\u65f6\u5019\uff0c\u56e0\u4e3a$len[1]=-1$\uff0c\u6240\u4ee5\u5fc5\u5b9a\u4f1a\u505c\u6b62\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u62c5\u5fc3\u4f1a\u65e0\u9650\u8df3\u4e0b\u53bb\u4e86\n\n\u7136\u540e\u6765\u51e0\u9053\u9898\u5427\n\n[\u6d1b\u8c37P3649 [APIO2014]\u56de\u6587\u4e32](https://www.luogu.org/problemnew/show/P3649)\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u677f\u5b50\uff0c\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u51fa\u73b0\u6b21\u6570\u5c31\u597d\u4e86\n\n\u7136\u540e\u8be5\u6709\u7684\u6ce8\u89e3\u90fd\u4f1a\u5199\u5728\u4ee3\u7801\u91cc\n```\n//minamoto\n#include<cstdio>\n#include<cstring>\n#define ll long long\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\nconst int N=3e5+5;\nchar s[N];\nint n,p,q,fail[N],cnt[N],len[N],tot,last,ch[N][26];\nll ans;\ninline int newnode(int x){\n\t//\u5efa\u7acb\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u957f\u5ea6\u4e3ax \n    len[++tot]=x;return tot;\n}\ninline int getfail(int x,int n){\n\t//\u8df3fail\u6307\u9488\u77e5\u9053\u627e\u5230\u540e\u7f00\u56de\u6587\u4e3a\u6b62 \n    while(s[n-len[x]-1]!=s[n]) x=fail[x];\n    return x;\n}\nint main(){\n    scanf(\"%s\",s+1);\n    //\u4e00\u5806\u4e71\u4e03\u516b\u7cdf\u7684\u521d\u59cb\u5316 \n    s[0]=-1,fail[0]=1,last=0;\n    len[0]=0,len[1]=-1,tot=1;\n    for(int i=1;s[i];++i){\n        s[i]-='a';\n        //\u627e\u5230\u53ef\u4ee5\u56de\u6587\u7684\u4f4d\u7f6e \n        p=getfail(last,i);\n        if(!ch[p][s[i]]){\n        \t//\u5982\u679c\u6709\u4e86\u8f6c\u79fb\u5c31\u4e0d\u7528\u5efa\u4e86\uff0c\u5426\u5219\u8981\u65b0\u5efa \n            //\u524d\u540e\u90fd\u52a0\u4e0a\u65b0\u5b57\u7b26\uff0c\u6240\u4ee5\u65b0\u56de\u6587\u4e32\u957f\u5ea6\u8981\u52a02 \n            q=newnode(len[p]+2);\n            //\u56e0\u4e3afail\u6307\u5411\u7684\u5f97\u662f\u539f\u4e32\u7684\u4e25\u683c\u540e\u7f00\uff0c\u6240\u4ee5\u8981\u4ecep\u7684fail\u5f00\u59cb\u627e\u8d77 \n            fail[q]=ch[getfail(fail[p],i)][s[i]]; \n            //\u8bb0\u5f55\u8f6c\u79fb \n            ch[p][s[i]]=q;\n        }\n        ++cnt[last=ch[p][s[i]]];\n    }\n    for(int i=tot;i;--i)\n    cnt[fail[i]]+=cnt[i],cmax(ans,1ll*cnt[i]*len[i]);\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n[\u6d1b\u8c37P4287 [SHOI2011]\u53cc\u500d\u56de\u6587](https://www.luogu.org/problemnew/show/P4287)\n\n\u6211\u4eec\u80af\u5b9a\u8981\u5148\u5efa\u51fa\u56de\u6587\u81ea\u52a8\u673a\u7684\n\n\u7136\u540e\u5982\u679c\u662f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u8282\u70b9\u66b4\u8df3fail\u6307\u9488\u80af\u5b9a\u5f97T\n\n\u90a3\u4e48\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a$trans[i]$\uff0c\u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u957f\u5ea6\u4e00\u534a\u7684\u8282\u70b9\n\n\u8fd9\u4e2a\u53ef\u4ee5\u5728\u5efa\u81ea\u52a8\u673a\u7684\u65f6\u5019\u987a\u4fbf\u6c42\u51fa\u6765\uff0c\u5177\u4f53\u770b\u4ee3\u7801\n\n\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9\u5224\u65ad\u957f\u5ea6\u662f\u5426\u6a214\u4e3a0\u4e14$trans[i]$\u7684\u957f\u5ea6\u662f\u5b83\u7684\u4e00\u534a\u5c31\u597d\u4e86\n```\n//minamoto\n#include<cstdio>\n#include<cstring>\ntemplate<class T>inline bool cmax(T&a,const T&b){return a<b?a=b,1:0;}\nconst int N=500005;\nint fail[N],ch[N][26],cnt[N],len[N],trans[N];\nint n,m,tot,last,p,q,ans;\nchar s[N];\ninline int newnode(int x){\n    len[++tot]=x;return tot;\n}\ninline int getfail(int x,int n){\n    while(s[n-1-len[x]]!=s[n]) x=fail[x];return x;\n}\nvoid build(){\n    for(int i=1;s[i];++i){\n        int x=s[i]-'a';\n        p=getfail(last,i);\n        if(!ch[p][x]){\n            q=newnode(len[p]+2);\n            fail[q]=ch[getfail(fail[p],i)][x];\n            ch[p][x]=q;\n            if(len[q]<=2) trans[q]=fail[q];\n            else{\n                int tmp=trans[p];\n                while(s[i-1-len[tmp]]!=s[i]||(len[tmp]+2)*2>len[q]) tmp=fail[tmp];\n                trans[q]=ch[tmp][x];\n            }\n        }\n        cnt[last=ch[p][x]]++;\n    }\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n    scanf(\"%d\",&n);\n    scanf(\"%s\",s+1);\n    s[0]=-1,fail[0]=1,last=0;\n    len[0]=0,len[1]=-1,tot=1;\n    build();\n    for(int i=tot;i>=2;--i) cnt[fail[i]]+=cnt[i];\n    for(int i=2;i<=tot;++i)\n    if((len[trans[i]]<<1)==len[i]&&len[i]%4==0) cmax(ans,len[i]);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```\n[\u6d1b\u8c37P4762 [CERC2014]Virus synthesis](https://www.luogu.org/problemnew/show/P4762)\n\n\u5148\u5efa\u4e00\u4e2a\u56de\u6587\u81ea\u52a8\u673a\uff0c\u7136\u540e\u8bb0$dp[i]$\u8868\u793a\u8f6c\u79fb\u5230$i$\u8282\u70b9\u4ee3\u8868\u7684\u56de\u6587\u4e32\u7684\u6700\u5c11\u7684\u9700\u8981\u6b21\u6570\n\n\u9996\u5148\u80af\u5b9a2\u64cd\u4f5c\u8d8a\u591a\u8d8a\u597d\uff0c\u7ecf\u8fc72\u64cd\u4f5c\u4e4b\u540e\u7684\u4e32\u5fc5\u5b9a\u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u80af\u5b9a\u662f\u7531\u4e00\u4e2a\u56de\u6587\u4e32+\u4e0d\u65ad\u66b4\u529b\u6dfb\u52a0\u5f97\u6765\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f$min(ans,dp[i]+n-len[i])$\n\n\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u4e32$i$\uff0c\u5982\u679c\u5b83\u5728\u524d\u9762\u548c\u540e\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u5f62\u6210\u56de\u6587\u4e32$j$\uff0c\u5219$dp[j]=dp[i]+1$\n\n\u4e3a\u5565\u561e\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u5728\u5f62\u6210$i$\u7684\u4e4b\u524d\u4e00\u6b65\u628a\u8fd9\u4e2a\u5b57\u6bcd\u52a0\u4e0a\u53bb\uff0c\u6267\u884c2\u64cd\u4f5c\u540e\u5c31\u53ef\u4ee5\u53d8\u6210$j$\u4e86\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5fail\u6307\u9488\u627e\u5230\u6700\u957f\u7684\u56de\u6587\u4e32$x$\u6ee1\u8db3$len[x]<=len[i]/2$\uff0c\u90a3\u4e48$dp[i]=min(dp[i],dp[x]+1+len[i]/2-len[x])$\uff08\u5148\u66b4\u529b\u586b\u597d\u4e00\u534a\uff0c\u5269\u4e0b\u7684\u75282\u64cd\u4f5c\uff09\n\n\u7136\u540e\u53ef\u4ee5\u7528\u961f\u5217\u8bb0\u5f55\u72b6\u6001\uff0c\u4fdd\u8bc1\u8f6c\u79fb\u81f3\u6709\u5e8f\u7684\n\n\u81f3\u4e8e\u600e\u4e48\u627e$x$\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u5efa\u81ea\u52a8\u673a\u7684\u65f6\u5019\u987a\u4fbf\u6c42\u51fa\u6765\uff0c\u5c31\u662f\u591a\u8df3\u51e0\u6b21\u3002\u8fd9\u4e2a\u770b\u4ee3\u7801\u597d\u4e86\n```\n//minamoto\n#include<cstring>\n#include<cstdio>\ntemplate<class T>inline bool cmin(T&a,const T&b){return a>b?a=b,1:0;}\nconst int N=2e5+5,M=5;\nchar s[N];int dp[N],len[N],fail[N],ch[N][M];\nint trans[N],last,p,q,str[N],tot,ans,n,qu[N];\nint val[105];\ninline int newnode(int x){\n    len[++tot]=x;memset(ch[tot],0,sizeof(ch[tot])*5);return tot;\n}\ninline int getfail(int x,int n){\n    while(s[n-len[x]-1]!=s[n]) x=fail[x];return x;\n}\ninline void init(){\n    val['A']=0,val['T']=1,val['C']=2,val['G']=3;\n    s[0]=-1,fail[0]=1,last=0;\n    len[0]=0,len[1]=-1,tot=1;\n    memset(ch[0],0,sizeof(int)*5),memset(ch[1],0,sizeof(int)*5);\n}\nvoid ins(int c,int i){\n    p=getfail(last,i);\n    if(!ch[p][c]){\n        q=newnode(len[p]+2);\n        fail[q]=ch[getfail(fail[p],i)][c];\n        ch[p][c]=q;\n        if(len[q]<=2) trans[q]=fail[q];\n        else{\n            int tmp=trans[p];\n            while(s[i-1-len[tmp]]!=s[i]||(len[tmp]+2)*2>len[q]) tmp=fail[tmp];\n            trans[q]=ch[tmp][c];\n        }\n    }\n    last=ch[p][c];\n//    printf(\"%d\\n\",last);\n}\nint main(){\n//    freopen(\"testdata.in\",\"r\",stdin);\n    int T;scanf(\"%d\",&T);\n    while(T--){\n        scanf(\"%s\",s+1);\n        init(),ans=n=strlen(s+1);\n        for(int i=1;i<=n;++i) ins(val[s[i]],i);\n        for(int i=2;i<=tot;++i) dp[i]=len[i];\n        int h=1,t=0;qu[++t]=0,dp[0]=1;\n        while(h<=t){\n            int u=qu[h++];\n            for(int i=0;i<4;++i){\n                int x=ch[u][i];\n                if(!x) continue;\n                dp[x]=dp[u]+1;\n                int y=trans[x];\n                cmin(dp[x],dp[y]+1+len[x]/2-len[y]);\n                cmin(ans,dp[x]+n-len[x]);\n                qu[++t]=x;\n            }\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n```\n\u5988\u8036\u6211\u611f\u89c9\u6211\u6574\u4e2a\u4eba\u90fd\u81ea\u52a8\u673a\u4e86\u2026\u2026",
        "postTime": 1536674483,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u597d\u50cf\u662f\u4e00\u9053\u56de\u6587\u6811\u88f8\u9898\n\n~~\u4f46\u662f\u6211\u5e76\u4e0d\u4f1a\u56de\u6587\u6811~~\n\n\u53ef\u4ee5\u7528SA\uff0bmanacher\u6216SAM+manacher\n\n\u6700\u8fd1\u521a\u5b66$SAM$\uff0c\u6240\u4ee5\u7528$SAM+manacher$\u8fc7\u6389\u4e86\u8fd9\u9053\u9898\n\n\u9996\u5148\u5148\u5bf9\u539f\u4e32\u5efa\u7acb$SAM$\n\n\u7136\u540e\u8dd1$manacher$\uff0c\u4e00\u65e6\u6709\u56de\u6587\u4e32\u5c31\u5728SAM\u4e0a\u8fdb\u884c\u67e5\u8be2\n\n\u67e5\u8be2$S(l , r)$\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u591a\u5c11\u6b21\n\n\u66b4\u529b\u67e5\u8be2\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u662f$O(n)$\n\n\u603b\u590d\u6742\u5ea6$O(n^2)$\n\n\u663e\u7136\u4e0d\u80fd\u901a\u8fc7\u6b64\u9898\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u500d\u589e\u5feb\u901f\u67e5\u8be2\u51fa$S(l,r)$\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u6b21\u6570\n\n\u8bbe$st[i][j]$\u8868\u793a$SAM$\u4e0a\u7684\u8282\u70b9i\u5411\u4e0a\u8df3$2^j$\u6b65\u80fd\u5230\u8fbe\u54ea\u4e2a\u8282\u70b9\n\n\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684$step >= r - l + 1$\u5c31\u8bf4\u660e\u8981\u67e5\u8be2\u7684\u56de\u6587\u4e32\u4ecd\u7136\u662f\u5f53\u524d\u8282\u70b9\u7684\u4e00\u4e2a\u540e\u7f00\n\n\u5c31\u4e00\u76f4\u5f80\u4e0a\u8df3\u5230\u4e0d\u80fd\u518d\u8df3\u4e3a\u6b62\n\n\u6b64\u65f6\u7684\u8282\u70b9\u6240\u4ee3\u8868\u7684\u5b50\u4e32\u7684$right$\u96c6\u5408\u5927\u5c0f\u5c31\u662f$S(l,r)$\u5728\u539f\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u8fa3\n\n\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\n\n\u4e0a\u4ee3\u7801\u2193\n\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n# define LL long long\nconst int M = 600005 ;\nusing namespace std ;\nchar s[M] ;\nint n , m ;\nLL Ans ;\nint Last , cnt ;\nint size[M] , son[M][26] , fa[M] , step[M] , c[M] , b[M] ;\nint p[M] , r[M] , fir[M] ;\nint pos[M] , lg[M] , dep[M] , st[M][20] ;\ninline void Insert(int c , int id){\n    int np = ++cnt , p = Last ;  step[np] = step[p] + 1 ; \n    Last = cnt ; size[np] = 1 ; pos[id] = np ;\n    while(!son[p][c] && p) son[p][c] = np , p = fa[p] ;\n    if(!p) fa[np] = 1 ;\n    else {\n        int q = son[p][c] ;\n        if(step[q] == step[p] + 1) fa[np] = q ;\n        else{\n            int nq = ++cnt ; step[nq] = step[p] + 1 ;\n            memcpy(son[nq] , son[q] , sizeof(son[q])) ;\n            fa[nq] = fa[q] ; fa[q] = fa[np] = nq ;\n            while(son[p][c] == q) son[p][c] = nq , p = fa[p] ;\n        }\n    }\n}\ninline void Build(){\n    Last = cnt = 1 ;\n    for(int i = 1 ; i <= n ; i ++) Insert(s[i] - 'a' , i) ;\n    for(int i = 1 ; i <= cnt; i ++) c[step[i]] ++ ;\n    for(int i = 1 ; i <= n ; i ++) c[i] += c[i - 1] ;\n    for(int i = 1 ; i <= cnt; i ++) b[c[step[i]]--] = i ;\n    for(int i = cnt , p ; i ; i --) {\n        p = b[i] ;\n        size[fa[p]] += size[p] ;\n    }\n    for(int i = 1 , p ; i <= cnt ; i ++) {\n    \tp = b[i] ;\n    \tdep[p] = dep[fa[p]] + 1 ;\n    \tst[p][0] = fa[p] ;\n    \tfor(int j = 1 ; (1<<j) <= dep[p] ; j ++)\n    \t  st[p][j] = st[st[p][j - 1]][j - 1] ;\n\t}\n}\ninline void Check(int l , int r){\n    if(l < 1 || r > n) return ;\n    int now = pos[r] ;\n    for(int i = lg[dep[now]] ; i >= 0 ; i --) {\n    \tint temp = st[now][i] ;\n    \tif(step[temp] >= r - l + 1) now = temp ;\n\t}\n\tAns = max(Ans , 1LL * size[now] * (r - l + 1)) ;\n}\ninline void Manacher() {\n    p[++m] = '@' ;\n    for(int i = 1 ; i <= n ; i ++) p[++m] = '#' , p[++m] = s[i] , fir[m] = i ;\n    p[++m] = '#' ; p[++m] = '$' ;\n    int pos = 0 , mx = 0 ;\n    for(int i = 1 ; i <= m ; i ++) {\n        if(i < mx) r[i] = min(mx - i , r[pos * 2 - i]) ;\n        else r[i] = 1 ;\n        Check(fir[i - r[i] + 2] , fir[i + r[i] - 2]) ;\n        while(p[i - r[i]] == p[i + r[i]]) ++r[i] , Check(fir[i - r[i] + 2] , fir[i + r[i] - 2]) ;\n        if(i + r[i] > mx) \n          mx = i + r[i] , pos = i ;\n    }\n}\nint main(){\n    scanf(\"%s\",s + 1) ; n = strlen(s + 1) ;\n    for(int i = 2 ; i <= n ; i ++) lg[i] = lg[i >> 1] + 1 ;\n\tBuild() ; Manacher() ;\n    printf(\"%lld\\n\",Ans) ;\n    return 0 ;\n}\n```",
        "postTime": 1533741129,
        "uid": 53884,
        "name": "beretty",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u770b\u697c\u4e0a\u5404\u4f4dDalao\u90fd\u662f\u7528\u7684\u56de\u6587\u6811\u7b49\u6570\u636e\u7ed3\u6784\u505a\u7684\uff0c\u771f\u662f\u592a\u795e\u4e86\u3002\n\n\n\u8fd9\u9053\u9898\u7f51\u4e0a\u666e\u904d\u67093\u79cd\u505a\u6cd5\uff1a\n\n1.\u56de\u6587\u6811\u88f8\u9898 2.SAM+manacher 3.SA+manacher\n\n\n\u540e\u4e24\u8005\u7684\u5927\u4f53\u601d\u8def\u90fd\u662f\u7ed3\u5408manacher\u6027\u8d28\u627e\u51fa\u6240\u6709\u56de\u6587\u4e32\uff0c\u7136\u540e\u4e0a\u6570\u636e\u7ed3\u6784\u7edf\u8ba1\u6b21\u6570\u7684\u3002\n\n\n\u6211\u6765\u4ecb\u7ecd\u4e00\u79cd\u53ea\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7684\u505a\u6cd5\u3002\n\n\n\u8fd9\u79cd\u505a\u6cd5\u662f\u4ece2015\u5e74\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\u4e2d\u770b\u6765\uff0c\u5f20\u5929\u626c\u4e5f\u6ca1\u6709\u8fdb\u884c\u8be6\u7ec6\u5730\u89e3\u7b54\uff0c\u4e5f\u627e\u4e0d\u5230\u300aAPOI2014 \u56de\u6587\u4e32 \u89e3\u9898\u62a5\u544a\u300b\uff0c\u53ea\u80fd\u9760\u81ea\u5df1\u5bf9\u7740\u6807\u7a0b\u4e00\u70b9\u4e00\u70b9\u7406\u89e3\u3002\n\n\n\u8fd9\u79cd\u505a\u6cd5\u7684\u5927\u4f53\u662f\u8fd9\u6837\u7684\uff1a\u5bf9\u4e8e\u539f\u4e32\u5efa\u7acbSAM\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\u6211\u4eec\u4fdd\u5b58\u5176endpos\u7684maxpos\u3002\u7136\u540e\u5c06\u53cd\u4e32\u653e\u4e0a\u53bb\u8dd1\uff08\u6211\u4eec\u901a\u8fc7\u4ece\u53f3\u5f80\u5de6\u626b\u6765\u5b9e\u73b0\uff0c\u6240\u4ee5\u4e0b\u8ff0\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u662f\u6307\u7684\u539f\u4e32\u7684\u4f4d\u7f6e\uff09\u3002\u5982\u679c\u5f53\u524d\u53cd\u4e32\u4e2d\u7684\u5339\u914d\u4e32[l,r]\u8986\u76d6\u4e86\u5f53\u524d\u8282\u70b9\u7684maxpos\uff0c\u90a3\u4e48[l,maxpos]\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u3002\n\n\n  \u3000\u3000\n    ![](http://i1.bvimg.com/629163/48b4c06eeaa99623s.png)\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u72b6\u6001\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8f7b\u677e\u5730\u7b97\u51fa\u8d21\u732e\u4e86\u3002\n\n  \n\u63a5\u7740\u6211\u4eec\u8981\u4e0d\u65ad\u8df3link\u8fb9\uff08\u4e5f\u5c31\u662f\u8df3\u540e\u7f00\u6811\u4e0a\u7684\u8fb9\uff09\uff0c\u518d\u6b21\u7edf\u8ba1\u7b54\u6848\u3002\u5e76\u6807\u8bb0\u7ecf\u8fc7\u7684\u70b9\uff0c\u4e4b\u540e\u4e0d\u518d\u7ecf\u8fc7\u5df2\u6807\u8bb0\u7684\u70b9\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u4f1a\u6709\u51e0\u4e2a\u7591\u60d1\u3002\n\n\n1.\u4e3a\u4ec0\u4e48\u8981\u8bb0\u5f55maxpos\uff1f\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684\uff1f\n\n\n![](http://i1.bvimg.com/629163/f78149666825ddc9s.png)\n\n\u6211\u4eec\u5047\u8bbe\u7eff\u8272\u4f4d\u7f6e\u4e5f\u5c5e\u4e8e\u8be5\u72b6\u6001\u7684endpos\uff0c\u540c\u65f6\u7ea2\u7eff\u4e24\u70b9\u95f4\u5f62\u6210\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u800c\u53cd\u4e32\u4f4d\u7f6e\u548cmaxpos\u95f4\u65e0\u6cd5\u5f62\u6210\u56de\u6587\u3002\n\n\n\u8bbe\u53cd\u4e32\u4f4d\u7f6e\u4e3ai\uff0c\u7eff\u8272\u4f4d\u7f6e\u4e3apos\uff0c\u5339\u914d\u957f\u5ea6\u4e3alen\n\n\n\u5df2\u77e5pos-len<i\uff0c\u7531\u4e8e\u8be5\u72b6\u6001\u7684maxlen\u4e00\u5b9a\u5927\u4e8elen,[i,pos]\u662f\u4e2a\u56de\u6587\u4e32\n\n\u6240\u4ee5[maxpos-len,maxpos]\u8fd9\u4e2a\u533a\u95f4\u4e5f\u662f\u4e2a\u56de\u6587\u4e32\u3002\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u7b54\u6848\u4f1a\u5728maxpos-len\u7684\u65f6\u5019\u8d21\u732e\u3002\n\n\n\u6240\u4ee5\u8bb0\u5f55maxpos\u4e00\u5b9a\u662f\u5bf9\u7684\u3002\n\n\n2.\u4e3a\u4ec0\u4e48\u8981\u8df3link\u8fb9\uff1f\n\n\n\u5df2\u77e5\uff0clink\u8fb9\u6307\u5411\u7684\u8282\u70b9\uff0c\u4ee3\u8868\u7740\u8be5\u540e\u7f00\u7684\u6700\u957f\u4e0d\u540cendpos\u7684\u540e\u7f00\uff0c\u540c\u65f6link\u8fb9\u6307\u5411\u7684\u8282\u70b9\u7684maxpos\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684maxpos\u3002\u4e5f\u5c31\u662f\u8bf4\u5728link\u8fb9\u6307\u5411\u7684\u8282\u70b9\u53ef\u80fd\u5b58\u5728\u66f4\u4f18\u89e3\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u66f4\u65b0\u7684\u7b54\u6848\u3002\u4f46\u6ce8\u610f\u5f53\u4f60\u8df3link\u7684\u65f6\u5019\uff0c\u5339\u914d\u7684\u957f\u5ea6\u5c31\u4e0d\u518d\u662flen\u4e86\uff0c\u800c\u662f\u8be5\u72b6\u6001\u7684maxlen\u3002\n\n\n\u6253\u6807\u8bb0\u662f\u4e3a\u4e86\u4f18\u5316\u5e38\u6570\u3002\n\n\n\u8fd9\u6837\u8fd9\u4e2a\u9898\u5c31\u89e3\u51b3\u4e86\u3002\n\n\n\u81f3\u4e8e\u6253\u6807\u8bb0\u4e3a\u4ec0\u4e48\u4e0d\u4f1a\u6f0f\u89e3\u7684\u95ee\u9898\uff0c\u6211\u73b0\u5728\u4e5f\u6ca1\u60f3\u660e\u767d\u3002\u7b49\u660e\u767d\u4e86\u518d\u66f4\u65b0\u3002\n\n\n\u770b\u770b\u4ee3\u7801\u53ef\u80fd\u5927\u5bb6\u5c31\u61c2\u4e86\u3002\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define o 1000011\n#define ll long long\nusing namespace std;\n\nstruct node{\n    int link,len,nxt[26],maxpos;\n    void clear(){\n        link=-1;len=0;maxpos=0;\n        for(int i=0;i<26;i++) nxt[i]=0;\n    }\n}st[o];\nchar s[o];\nint size,last,len,b[o],cc[o];\nll dp[o],ans;\nbool vis[o];\nvoid init(){\n    st[0].clear();\n    size=last=0;\n}\nvoid insert(char c,int pos){\n    int cur=++size;\n    st[cur].clear();\n    st[cur].len=st[last].len+1;\n    st[cur].maxpos=pos;\n    dp[cur]=1;\n    int p,x=c-'a';\n    for(p=last;p!=-1&&!st[p].nxt[x];p=st[p].link) st[p].nxt[x]=cur;\n    if(p==-1)\n        st[cur].link=0;\n    else{\n        int q=st[p].nxt[x];\n        if(st[p].len+1==st[q].len)\n            st[cur].link=q;\n        else{\n            int clone=++size;\n            st[clone].clear();\n            st[clone].len=st[p].len+1;\n            st[clone].link=st[q].link;\n            st[clone].maxpos=st[q].maxpos;\n            for(int i=0;i<26;i++) st[clone].nxt[i]=st[q].nxt[i];\n            for(;p!=-1&&st[p].nxt[x]==q;p=st[p].link) st[p].nxt[x]=clone;\n            st[q].link=st[cur].link=clone;\n        }\n    }\n    last=cur;\n}\nint main(){\n    init();\n    scanf(\"%s\",s);\n    len=strlen(s);\n    for(int i=0;i<len;i++) insert(s[i],i);\n    for(int i=0;i<=size;i++) cc[st[i].len]++;\n    for(int i=1;i<=len;i++) cc[i]+=cc[i-1];\n    for(int i=0;i<=size;i++) b[--cc[st[i].len]]=i; \n    for(int i=size;i;i--){\n        st[st[b[i]].link].maxpos=max(st[st[b[i]].link].maxpos,st[b[i]].maxpos);\n        dp[st[b[i]].link]+=dp[b[i]];\n    }\n    int now=0,l=0;\n    for(int i=len-1;i>=0;i--){\n        while(now&&!st[now].nxt[s[i]-'a']){\n            now=st[now].link;\n            l=st[now].len;\n        }\n        if(st[now].nxt[s[i]-'a']){\n            now=st[now].nxt[s[i]-'a'];\n            l++;\n        }\n        if(st[now].maxpos<i+l){\n            if(i<=st[now].maxpos)\n                ans=max(ans,(ll)(st[now].maxpos-i+1)*dp[now]);\n            for(int p=st[now].link;p!=-1&&!vis[p];p=st[p].link){\n                vis[p]=true;\n                if(i<=st[p].maxpos&&st[p].maxpos<=i+st[p].len-1)\n                    ans=max(ans,(ll)(st[p].maxpos-i+1)*dp[p]);\n            }    \n        }        \n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1516582357,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u770b\u4e86\u9898\u89e3\u533a\uff0c\u9664\u4e86\u7b2c\u4e00\u7bc7\uff08\u90a3\u4e2a\u770b\u4e0d\u61c2\uff09\u51e0\u4e4e\u6ca1\u6709\u7eaf\u7528\u540e\u7f00\u81ea\u52a8\u673a\u7684\u9898\u89e3\u3002\u672c\u4eba\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd$O(n\\log n)$\u7684\u540e\u7f00\u81ea\u52a8\u673a\u9898\u89e3\u3002\n\n\u770b\u5230\u56de\u6587\u4e32\uff0c\u9996\u5148\u60f3\u5230\u5c06\u6b63\u4e32\u548c\u53cd\u4e32\u63a5\u5728\u4e00\u8d77\uff08\u6ce8\u610f\u4e2d\u95f4\u8981\u52a0\u7279\u6b8a\u5b57\u7b26\uff0c\u4e14\u56e0\u4e3a\u662f\u5224\u65ad\u56de\u6587\u4e32\uff0c\u8981\u52a0\u4e24\u4e2a\u4e0d\u540c\u5b57\u7b26\uff09\uff0c\u7136\u540e\u8dd1\u540e\u7f00\u81ea\u52a8\u673a\u3002\u5efa\u5b8c\u540e\u7f00\u81ea\u52a8\u673a\u540e\uff0c\u8003\u8651\u5982\u4f55\u5904\u7406\u56de\u6587\u4e32\u7684\u95ee\u9898\u3002\n\n\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u56de\u6587\u4e32\u5fc5\u5b9a\u6709\u4e00\u4e2a\u56de\u6587\u4e2d\u5fc3\uff08\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u4e32\u56de\u6587\u4e2d\u5fc3\u5728\u4e8c\u5b57\u7b26\u4e4b\u95f4\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u679a\u4e3e\u5b83\u3002\u4e00\u4e2a\u56de\u6587\u4e2d\u5fc3\u5fc5\u5b9a\u5728\u6b63\u53cd\u4e32\u91cc\u6709\u4e24\u4e2a\u5bf9\u5e94\u7684\u51fa\u73b0\u4f4d\u7f6e\u3002\u5982\u679c\u4e00\u4e2a\u4e32\u5728\u540e\u7f00\u81ea\u52a8\u673a\u7684$endpos$\u5305\u542b\u4e86\u4e24\u4e2a\u5bf9\u5e94\u7684\u51fa\u73b0\u4f4d\u7f6e\uff0c\u90a3\u4e48\u7b49\u4e8e\u8fd9\u4e2a\u4e32\u6269\u5c55\u51fa\u6765\u7684\u56de\u6587\u4e32\uff08$ab$\u53ef\u62d3\u5c55\u51fa$aba$\u6216$abba$\uff09\u5728\u539f\u4e32\u4e0a\u51fa\u73b0\u4e86\u4e00\u6b21\u3002\n\n\u57fa\u4e8e\u4ee5\u4e0a\u7684\u539f\u7406\uff0c\u6211\u4eec\u5206\u56de\u6587\u4e32\u957f\u5ea6\u4e3a\u5947\u6570\u6216\u5076\u6570\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\u3002\u5bf9\u4e8e\u4e00\u79cd\u60c5\u51b5\uff0c$O(n)$\u679a\u4e3e\u4e24\u4e2a\u5bf9\u5e94\u51fa\u73b0\u4f4d\u7f6e\uff0c\u5e76\u627e\u5230\u5b83\u4eec\u5728$parent\\space tree$\u7684$lca$\u3002\u4e8e\u662f\uff0c\u4ece\u8fd9\u4e2a$lca$\u5230\u6839\u7684\u8def\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u72b6\u6001\uff08\u8282\u70b9\uff09\u7684\u6269\u5c55\u56de\u6587\u4e32\u90fd\u5c06\u5728\u539f\u4e32\u91cc\u591a\u51fa\u73b0\u4e00\u6b21\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728$lca$\u7684\u4f4d\u7f6e\u4e0a\u52a0\u4e0a\u4e00\u4e2a$1$\u3002\u679a\u4e3e\u5b8c\u4e4b\u540e\uff0c\u4ece\u6839\u5f00\u59cb$dfs$\uff0c\u90a3\u4e48\u8bb0$val[i]$\u8868\u793a\u72b6\u6001$i$\u6269\u5c55\u51fa\u7684\u56de\u6587\u4e32\u5728\u539f\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5219$val[i]=\\sum _j val[j]$\uff0c\u5176\u4e2d$j$\u4e3a$i$\u7684\u5b50\u8282\u70b9\u3002\u7136\u540e\u57fa\u4e8e\u5206\u7684\u7c7b\uff0c\u72b6\u6001$i$\u6269\u5c55\u51fa\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6\u4e3a$newlen=len*2$\u6216$newlen=len*2-1$\u3002\u6700\u540e\u7684\u7b54\u6848\u5373\u4e3a$\\{newlen[i]*val[i]\\}_{max}$\u3002\n\n\u5f88\u9ad8\u5174\u5730\u89c9\u5f97\u80fd$AC$\uff0c\u7ed3\u679c\u4e00\u4ea4\u4e0a\u53bb\u53d1\u73b0$80$\u5206 $MLE$ qaq\u3002\u8003\u8651\u5982\u4f55\u4f18\u5316\u7a7a\u95f4\u3002$lca$\u4e0d\u80fd\u7528\u500d\u589e\uff0c\u53ea\u80fd\u6811\u5256\u3002\u7136\u540e\u5c3d\u91cf\u7528\u91cd\u590d\u7684\u6570\u7ec4\uff0c\u4e0d\u8981\u591a\u5f00\u7a7a\u95f4\u3002\u6700\u96be\u4f18\u5316\u7684\u662f$SAM$\u91cc\u7684\u8fb9\uff0c\u56e0\u4e3a\u7a7a\u95f4\u662f$O(n*26)$\u7684\u3002\u6613\u53d1\u73b0\u8fb9\u5b58\u50a8\u7684\u6570\u90fd\u662f\u5c0f\u4e8e$2^{21}$\u7684\uff08\u56e0\u4e3a\u8282\u70b9\u6570\u91cf\u4e0d\u8d85\u8fc7$2000000$\uff09\u3002\u663e\u7136\u6709\u7a7a\u95f4\u6d6a\u8d39\u3002\u4e8e\u662f\u6211\u4eec\u7528$3$\u4e2a$char$\u66ff\u4ee3\u4e00\u4e2a$int$\uff0c\u7528\u7c7b\u4f3c\u9ad8\u7cbe\u5ea6\u7684\u65b9\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u6837\u7a7a\u95f4\u5c31\u53ef\u4ee5\u521a\u597d\u5361\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<iostream>\n#include<map>\nusing namespace std;\nconst int SIZE=1000100;\nint aadd;\nstruct NODE\n{\n    int fa,len;\n\tunsigned char bian[28][3];\n\tint lb(int&a)\n\t{\n\t\taadd=bian[a][0];aadd*=255;\n        aadd+=bian[a][1];aadd*=255;\n        aadd+=bian[a][2];return aadd;\n\t}\n\tvoid zh(int&a,int&node)\n\t{\n\t\taadd=node;\n        bian[a][2]=aadd%255;aadd/=255;\n        bian[a][1]=aadd%255;aadd/=255;\n        bian[a][0]=aadd%255;\n\t}\n}dian[SIZE];\nint las=1,js=1;\nint val[SIZE]={0};\nint la[SIZE],zs=0;\nvoid ins(int a)\n{\n    int p=las,np=las=++js;\n    la[++zs]=las;dian[np].len=dian[p].len+1;\n\tfor(;p&&dian[p].lb(a)==0;p=dian[p].fa)dian[p].zh(a,np);\n    if(!p)dian[np].fa=1;\n    else\n    {\n\t\tint q=dian[p].lb(a);\n        if(dian[q].len==dian[p].len+1)dian[np].fa=q;\n        else\n        {\n            int nq=++js;\n            dian[nq]=dian[q];\n            dian[nq].len=dian[p].len+1;dian[np].fa=dian[q].fa=nq;\n\t\t\tfor(;p&&dian[p].lb(a)==q;p=dian[p].fa)dian[p].zh(a,nq);\n        }\n    }\n}\nchar dr[400000];int len;\nstruct Edge\n{\n    int t,nexty;\n}edge[SIZE];\nint head[SIZE],cnt=0;\nvoid add(int a,int b)\n{\n    cnt++;\n    edge[cnt].t=b;\n    edge[cnt].nexty=head[a];\n    head[a]=cnt;\n}\nint son[SIZE],fa[SIZE],dep[SIZE],lianfa[SIZE],sl=0;\nvoid dfs1(int node)\n{\n    lianfa[node]=1;son[node]=0;\n    for(int i=head[node];i;i=edge[i].nexty)\n    {\n        dep[edge[i].t]=dep[node]+1;\n        fa[edge[i].t]=node;\n        dfs1(edge[i].t);\n        lianfa[node]+=lianfa[edge[i].t];\n        if(lianfa[edge[i].t]>lianfa[son[node]])son[node]=edge[i].t;\n    }\n}\nvoid dfs2(int node,int lf)\n{\n    lianfa[node]=lf;\n    if(son[node])dfs2(son[node],lf);\n    for(int i=head[node];i;i=edge[i].nexty)\n    {\n        if(edge[i].t==son[node])continue;\n        dfs2(edge[i].t,edge[i].t);\n    }\n}\nint kt[400000],jw[400000];\nlong long ans=0,aa,bb;\nvoid dfs3(int node,long long ty)\n{\n    for(int i=head[node];i;i=edge[i].nexty)\n    {\n        dfs3(edge[i].t,ty);\n        val[node]+=val[edge[i].t];\n    }\n    aa=val[node],bb=dian[node].len*2-1+ty;\n    ans=max(ans,aa*bb);\n}\nint lca(int a,int b)\n{\n    while(lianfa[a]!=lianfa[b])\n    {\n        if(dep[lianfa[a]]>dep[lianfa[b]])a=fa[lianfa[a]];\n        else b=fa[lianfa[b]];\n    }\n    if(dep[a]<dep[b])return a;\n    else return b;\n}\nint main()\n{\n    scanf(\"%s\",dr);len=strlen(dr);\n    for(int i=0;i<len;i++)ins(dr[i]-'a'+2);\n    ins(0);ins(1);for(int i=len-1;i>=0;i--)ins(dr[i]-'a'+2);\n    for(int i=2;i<=js;i++)add(dian[i].fa,i);\n    fa[1]=0;dep[1]=1;dfs1(1);dfs2(1,1);\n    for(int i=1;i<=len;i++)kt[i]=la[i],jw[i]=la[zs-i+1];\n    int lc;\n    memset(val,0,sizeof(val));\n    for(int i=1;i<=len;i++)\n    {\n        lc=lca(kt[i],jw[i]);\n        val[lc]++;\n    }\n    dfs3(1,0);\n    memset(val,0,sizeof(val));\n    for(int i=2;i<=len;i++)\n    {\n        lc=lca(kt[i-1],jw[i]);\n        val[lc]++;\n    }\n    dfs3(1,1);\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1556181027,
        "uid": 32275,
        "name": "KesdiaelKen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u518d\u6b64\u5b89\u5229\u4e00\u79cd\u5341\u5206\u6709\u8da3\u7684\u6570\u636e\u7ed3\u6784\uff1a\n\n\u56de\u6587\u81ea\u52a8\u673a\uff08\u6216\u79f0\u56de\u6587\u6811\uff09\n\n\u4ed6\u4e3b\u8981\u7528\u4e8e\u5bf9\u5355\u4e32\u8ba1\u6570\uff08\u56de\u6587\u5b50\u4e32\u79cd\u7c7b\u53ca\u51fa\u73b0\u6b21\u6570\uff0c\u5373\u5176\u4ed6\u5468\u8fb9\u4fe1\u606f\uff09\n\n\u4e8e\u662f\u8be5\u9898\uff0c\u5c31\u53d8\u6210\u4e00\u9053\u6a21\u677f\u9898\uff1b\n\n\u5bf9\u6bcf\u4e2a\u70b9\u7ef4\u62a4cnt\u8868\u793a\u5979\u662f\u51e0\u4e2a\u5b57\u7b26\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff1b\n\n\u90a3\u4e48\u4ed6\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u662f\u5979\u4f5c\u4e3a\u81ea\u5df1\u7684\u672b\u7aef\u5b57\u7b26\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4ee5\u53ca\u5979\u4f5c\u4e3a\u81ea\u5df1\u7684\u672b\u7aef\u5b57\u7b26\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u7684\u56de\u6587\u540e\u7f00\uff08\u4e5f\u4e0d\u6bd4\u662f\u9664\u5979\u5916\u6700\u957f\u7684\uff09\u51fa\u73b0\u7684\u6b21\u6570\uff1b\n\n\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\n\n\u6709\u5173\u56de\u6587\u6811\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u770b\n\n2017\u5e74\u56fd\u5bb6\u961f\u5019\u9009\u961f\u8bba\u6587\u300a\u56de\u6587\u6811\u53ca\u5176\u5e94\u7528\u300b\u4f5c\u8005\uff1a\u7fc1\u6587\u6d9b\n\n\u6216\u76f4\u63a5\u9605\u8bfb\u7b14\u8005\u7684blog\uff0c\u4ee5\u7a0d\u7a0d\u5165\u95e8:\n\n[http://www.cnblogs.com/nietzsche-oier/p/6935081.html](http://www.cnblogs.com/nietzsche-oier/p/6935081.html)\n\n\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\u300a\n\n\u4ee3\u7801\uff1a\n\n\u00b7\u00b7\u00b7\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nchar s[300010];\nstruct Pld_T{\n    int ch[26],fail,len,cnt;\n};\nPld_T pld_t[300010];\nint tot;\nint main()\n{\n    int i,j,k,len;\n    long long ans=0;\n    scanf(\"%s\",s+1);\n    len=strlen(s+1);s[0]='#';\n    pld_t[0].fail=1;k=0;pld_t[1].len=-1;tot=1;\n    for(i=1;i<=len;i++){\n        while(s[i-pld_t[k].len-1]!=s[i])k=pld_t[k].fail;\n        if(!pld_t[k].ch[s[i]-'a']){\n            pld_t[++tot].len=pld_t[k].len+2;\n            j=pld_t[k].fail;\n            while(s[i-pld_t[j].len-1]!=s[i])j=pld_t[j].fail;\n            pld_t[tot].fail=pld_t[j].ch[s[i]-'a'];\n            pld_t[k].ch[s[i]-'a']=tot;\n        }\n        k=pld_t[k].ch[s[i]-'a'];\n        pld_t[k].cnt++;\n    }\n    for(i=tot;i>=2;i--){\n        pld_t[pld_t[i].fail].cnt+=pld_t[i].cnt;\n        if((long long)pld_t[i].cnt*pld_t[i].len>ans)\n            ans=(long long)pld_t[i].cnt*pld_t[i].len;\n    }\n    printf(\"%lld\",ans);\n    return 0; \n}\n\u00b7\u00b7\u00b7\n```",
        "postTime": 1505978080,
        "uid": 17671,
        "name": "djy213",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u4f5c\u4e3a\u4e00\u4e2a\u4e0d\u4f1amanacher\u548c\uff53\uff41\uff4d\u7684\u849f\u84bb\u8fd9\u4e2a\u9898\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002\n\u7528\u4e8c\u5206\u54c8\u5e0c\u627e\u56de\u6587\u4e32\uff0c\u6839\u636e\u672c\u8d28\u4e0d\u540c\u56de\u6587\u5b50\u4e32\u6570\u91cf\u4e0d\u8d85\u8fc7O(n)\u7ea7\u522b\u7684\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e2d\u95f4\u4f4d\u7f6e\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\u957f\u5ea6\uff0c\u5c06\u679a\u4e3e\u8fc7\u7684\u4e32\u6254\u8fdb\u54c8\u5e0c\u8868\u53bb\u91cd\uff0c\u5982\u679c\u9047\u5230\u4e00\u4e2a\u4e32\u5df2\u7ecf\u679a\u4e3e\u8fc7\uff0c\u8be5\u4f4d\u7f6e\u4e0d\u4f1a\u518d\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u56de\u6587\u5b50\u4e32\u4e86\u3002\u4e0d\u91cd\u4e0d\u6f0f\u5730\u679a\u4e3e\u56de\u6587\u5b50\u4e32\u540e\uff0c\u7528\u540e\u7f00\u6570\u7ec4\uff52\uff4d\uff51\u4e8c\u5206\u5feb\u901f\u7edf\u8ba1\u5b50\u4e32\u51fa\u73b0\u6b21\u6570\u3002\u603b\u590d\u6742\u5ea6O(nlogn)\n\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4\")\n#include <stdio.h>\n#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int maxn=300000*2+100;\nchar s2[maxn],s[maxn];\nint n,len;\ntypedef long long ll;\nconst ll P=307;\nconst ll Q=311;\nconst ll R=257;\nll hash1[maxn],hash2[maxn],f[maxn];\nll hash3[maxn],hash4[maxn],f2[maxn];\nll hash5[maxn],hash6[maxn],f3[maxn];\nint cntsum[maxn];\nconst long long ha=1e9+79;\nconst long long ha2=1e9+9;\nconst long long ha3=1004535809;\ninline ll getphash(int x,int y)\n{\n    long long qq=(hash1[y]-hash1[x-1]*f[y-x+1])%ha;\n    return (qq>=0)?qq:qq+ha;\n}\ninline ll getshash(int x,int y)\n{\n    long long qq=(hash2[x]-hash2[y+1]*f[y-x+1])%ha;\n    return (qq>=0)?qq:qq+ha;\t\n}\n\ninline long long getphash2(int x,int y)\n{\n    long long qq=(hash3[y]-hash3[x-1]*f2[y-x+1])%ha2;\n    return (qq>=0)?qq:qq+ha2;\n}\ninline long long getshash2(int x,int y)\n{\n    long long qq=(hash4[x]-hash4[y+1]*f2[y-x+1])%ha2;\n    return (qq>=0)?qq:qq+ha2;\n}\ninline ll getphash3(int x,int y)\n{\n    long long qq=(hash5[y]-hash5[x-1]*f3[y-x+1])%ha3;\n    return (qq>=0)?qq:qq+ha3;\n}\ninline ll getshash3(int x,int y)\n{\n    long long qq=(hash6[x]-hash6[y+1]*f3[y-x+1])%ha3;\n    return (qq>=0)?qq:qq+ha3;\t\n}\nconst int mod=1e7+19;\nstruct Hashtable\n{\n    ll v1,v2;\n    int next;\n}e[(int)1e6];\nint head[mod]={0},ecnt=0;\ninline bool insert(ll v1,ll v2)\n{\n    int h=v1%mod;\n    for(int k=head[h];k;k=e[k].next)\n    {\n        if(e[k].v1==v1&&e[k].v2==v2)\n            return false;\n    }\t\n    ++ecnt;\n    e[ecnt].v1=v1;\n    e[ecnt].v2=v2;\n\n    e[ecnt].next=head[h];\n    head[h]=ecnt;\n    return true;\n}\nint sa[maxn],x[maxn],y[maxn],height[maxn],rnk[maxn],c[maxn];\nvoid buildsa(int m)\n{\n    x[n]=y[n]=-1;\n    for(int i=1;i<=m;i++)\n        c[i]=0;\n    for(int i=0;i<n;i++)\n        c[x[i]=s[i]]++;\n    for(int i=1;i<=m;i++)\n        c[i]+=c[i-1];\n    for(int i=n-1;i>=0;i--)\n        sa[--c[x[i]]]=i;\n    for(int k=1;k<n;k<<=1)\n    {\n        int p=0;\n        for(int i=n-k;i<n;i++)\n            y[p++]=i;\n        for(int i=0;i<n;i++)\n        {\t\n            if(sa[i]>=k)\n                y[p++]=sa[i]-k;\n        }\n        for(int i=0;i<=m;i++)\n            c[i]=0;\n        for(int i=0;i<n;i++)\n            c[x[y[i]]]++;\n        for(int i=1;i<=m;i++)\n            c[i]+=c[i-1];\n        for(int i=n-1;i>=0;i--)\n            sa[--c[x[y[i]]]]=y[i];\n        swap(x,y);\n        x[sa[0]]=m=0;\n        for(int i=1;i<n;i++)\n        {\n            if(y[sa[i]]==y[sa[i-1]]&&y[sa[i]+k]==y[sa[i-1]+k])\n                x[sa[i]]=m;\n            else\n                x[sa[i]]=++m;\n        }\n        ++m;\n        if(n==m)\n            break;\n    }\n}\nvoid buildheight()\n{\n    for(int i=0;i<n;i++)\n        rnk[sa[i]]=i;\n    int k=0;\t\n    for(int i=0;i<n;i++)\n    {\t\n        if(!rnk[i])\n            continue;\n        int j=sa[rnk[i]-1];\n        if(k)\n            --k;\n        while(s[i+k]==s[j+k])\n            ++k;\n        height[rnk[i]]=k;\n    }\n}\nint rmq[(int)3e5+100][20];\nint log[(int)3e5+100];\nvoid buildrmq()\n{\n    log[1]=0;\n    for(int i=2;i<=n;i++)\n        log[i]=log[i>>1]+1;\n    for(int i=1;i<n;i++)\n        rmq[i][0]=height[i];\n    for(int j=1;j<20;j++)\n    for(int i=1;(1<<j)+i-1<n;i++)\n        rmq[i][j]=min(rmq[i][j-1],rmq[i+(1<<(j-1))][j-1]);\n}\ninline int queryrmq(int l,int r)\n{\n    int lg=log[r-l+1];\n    return min(rmq[l][lg],rmq[r-(1<<lg)+1][lg]);\n}\ninline int count(int x,int y)\n{\n    int l=0,r=rnk[x];\n    while(r>l)\n    {\n        int mid=(l+r)>>1;\n        if(queryrmq(mid+1,rnk[x])>=y-x+1)\n            r=mid;\n        else\n            l=mid+1;\n    }\n    int lb=l,rb;\n    if(height[rnk[x]+1]<y-x+1)\n        rb=rnk[x];\n    else\n    {\n        l=rnk[x]+1,r=n;\n        while(r-l>1)\n        {\n            int mid=(l+r)>>1;\n            if(queryrmq(rnk[x]+1,mid)>=y-x+1)\n                l=mid;\n            else\n                r=mid;\n        }\n        rb=l;\n    }\n    return rb-lb+1;\n}\n\nint main()\n{\n//\tfreopen(\"palindrome.in\",\"r\",stdin);\n//\tfreopen(\"palindrome.out\",\"w\",stdout);\n    scanf(\"%s\",s);\n    n=strlen(s);\n    buildsa(300);\n    buildheight();\n    buildrmq();\n\n    char* t=s2;\n    *t++='#';\n    for(char* x=s;*x;x++)\n        *t++=*x,*t++='#';\n    len=2*n+1;\n    f[0]=1;\n    f2[0]=1;\n    for(int i=1;i<maxn;i++)\n    {\n        f[i]=f[i-1]*P%ha; \n        f2[i]=f2[i-1]*Q%ha2;\n    }\n    hash3[0]=hash1[0]=s2[0];\n    for(int i=1;i<len;i++)\n    {\n        hash1[i]=(hash1[i-1]*P+s2[i])%ha;\n        hash3[i]=(hash3[i-1]*Q+s2[i])%ha2;\n    }\n    hash4[len-1]=hash2[len-1]=s2[len-1];\t\n    for(int i=len-2;i>=0;i--)\n    {\n        hash2[i]=(hash2[i+1]*P+s2[i])%ha;\n        hash4[i]=(hash4[i+1]*Q+s2[i])%ha2;\n    }\n    for(int i=1;i<len;i++)\n    {\n        if(s2[i]!='#')\n            cntsum[i]=cntsum[i-1]+1;\n        else\n            cntsum[i]=cntsum[i-1];\n    }\n    ll ans=0;\n    for(int i=0;i<len;i++)\n    {\n        int l=1,r=min(i+1,len-i)+1;\n        while(r-l>1)\n        {\n            int mid=(l+r)>>1;\n            if(getphash(i-mid+1,i)==getshash(i,i+mid-1)&&getphash2(i-mid+1,i)==getshash2(i,i+mid-1))\n                l=mid;\n            else\n                r=mid;\n        }\n\n        if(l==1&&s2[i]=='#')\n            continue;\n        \n        int le,st,ed;\n        if(s2[i]=='#')\n        {\n            le=(l-1)/2;\n            st=i/2-1-le+1;\t\n            ed=st+le*2-1;\n        }\n        else\n        {\n            le=l/2;\n            st=i/2-le+1;\t\t\n            ed=st+le*2-2;\n        }\n        for(int j=0;;j++)\n        {\n            int p=st+j;\n            int q=ed-j;\n            int pp=p*2+1,qq=q*2+1;\n            if(p<=q&&insert(getphash(pp,qq),getphash2(pp,qq)))\n                ans=max(ans,(ll)count(p,q)*(q-p+1));\n            else\n                break;\n        }\n    }\t\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1530786972,
        "uid": 70833,
        "name": "\u82cf\u8054\u5143\u5e05",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u505a\u5230\u628amanacher\u548cSA\u7ed3\u5408\u7684\u9898\u76ee......\n#### \u57fa\u672c\u601d\u8def\n\u7528Manacher\u7edf\u8ba1\u51fa\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32,\u518d\u4f7f\u7528\u540e\u7f00\u6570\u7ec4SA\u7edf\u8ba1\u51fa\u6240\u6709\u6b64\u7c7b\u5b50\u4e32\u7684\u51fa\u73b0\u6b21\u6570,\u7edf\u8ba1\u7b54\u6848.\n#### \u7ec6\u5316\u601d\u8def-manacher\n\u7531\u4e8e\u56de\u6587\u5b50\u4e32\u53ef\u80fd\u6709\u5f88\u591a(\u6240\u4ee5\u53ef\u80fd\u7206int),\u6240\u4ee5\u4e0d\u80fd\u66b4\u529b\u7edf\u8ba1,\u5fc5\u987b\u5229\u7528Manacher\u7b97\u6cd5\u7684\u4e00\u4e2a\u6027\u8d28:\n```cpp\n\tfor(int i=1;i<len;++i) {\n\t\tif(mx>i) p[i]=min(p[id*2-i],mx-i);\n\t\telse p[i]=1;\n\t\twhile(ms[i+p[i]]==ms[i-p[i]]) {\n\t\t\t++p[i];\t\n\t\t\tif(i+p[i]>mx) {\n\t\t\t\t//\u53ea\u6709\u5728\u8fd9\u91cc\u7a81\u7834\u4e86mx\u7684\u5b50\u4e32\u624d\u662f\u4e4b\u524d\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u56de\u6587\u5b50\u4e32.\n                //\u7b97\u5165\u5206\u9694\u7b26#\u7684\u9650\u5236\u7684\u8bdd.\n\t\t\t\tcalc(i-p[i]+1,i+p[i]-1);\n\t\t\t}\n\t\t}\n\t\tif(p[i]+i>mx) {\n\t\t\tmx=i+p[i],id=i;\n\t\t}\n\t}\t\n```\n\u5b9e\u6d4b\u53d1\u73b0,Manacher\u7b97\u6cd5\u7684\u6b64\u7c7b\u62d3\u5c55\u4e0d\u4e00\u5b9a\u63d0\u4ea4\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u5b50\u4e32(\u4e0d\u7b97#),\u56e0\u4e3a\u4f1a\u6709#\u7684\u9650\u5236,\n\n\u4f46\u662f\u7ed3\u5408Manacher\u7b97\u6cd5\u5bf9\u79f0\u6027(\u5173\u4e8eid\u5bf9\u79f0)\u7684\u539f\u7406\u53ef\u4ee5\u53d1\u73b0,\u4e0d\u5728\u6b64\u7c7b\u62d3\u5c55\u4e2d\u63d0\u4ea4(calc)\u7684\u5b50\u4e32\u4e00\u5b9a\u5728\u4e4b\u524d\u63d0\u5230\u8fc7.\n\n\u800cManacher\u603b\u590d\u6742\u5ea6O(n),\u6240\u4ee5\u662f\u5b8c\u5168\u80fd\u591f\u63a5\u53d7\u7684.\n#### \u7ec6\u5316\u601d\u8def-SA\n\u7136\u540e\u95ee\u9898\u5c31\u6362\u6210\u4e86\u5982\u4f55\u7edf\u8ba1\u4e00\u4e2a\u56de\u6587\u5b50\u4e32(\u4e5f\u5c31\u662f\u4e00\u4e2a\u5b50\u4e32)\u7684\u51fa\u73b0\u6b21\u6570.\n\n\u8fd9\u91cc\u4f7f\u7528\u540e\u7f00\u6570\u7ec4\u89e3\u51b3.\n\n\u4e00\u4e2a\u5b50\u4e32\u662f\u67d0\u4e00\u4e2a\u540e\u7f00\u7684\u524d\u7f00,\u56e0\u800c,\u5982\u679c\u4e00\u4e2a\u5b50\u4e32\u5728K\u4e2a\u540e\u7f00\u4e2d\u51fa\u73b0\u8fc7,\u90a3\u4e48\u8be5\u5b50\u4e32\u4e00\u5b9a\u662f\u8fd9K\u4e2a\u540e\u7f00Lcs\u7684\u524d\u7f00.\n\n\u4e5f\u5c31\u6709len(LCS)>=len(\u5b50\u4e32)\n\n\u6613\u77e5\u8fd9K\u4e2a\u540e\u7f00\u6392\u5e8f\u540e\u6784\u6210\u8fde\u7eed\u7684\u4e00\u6bb5,\u6240\u4ee5\u53ef\u4ee5\u7528\u540e\u7f00\u6570\u7ec4\u89e3\u51b3.\n\n\u6bcf\u6b21\u5728Height\u6570\u7ec4\u4e0a\u4e8c\u5206,\u5411\u524d\u540e\u5206\u522b\u62d3\u5c55,rmq\u67e5\u8be2\u5224\u65adLcs\u957f\u5ea6\u662f\u5426\u6ee1\u8db3\u8981\u6c42\u5373\u53ef.\n**\u603b\u590d\u6742\u5ea6O(nlogn)**\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\n//defs=====================================\nvoid calc(int x,int y);\nconst int MAXN=5e5+10;\ntypedef int arr[MAXN];\nint a[MAXN],N,M,T;\nchar s[MAXN];\nll ANS;\n//vector<int> pos;//\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u5b50\u4e32\u5f00\u5934\u70b9 \n//manacher================================\nchar ms[MAXN*4];\nint p[MAXN];\nvoid do_manacher() {\n\tms[0]=ms[1]='#';\n\tfor(int i=1;i<=N;++i) ms[i<<1]=s[i],ms[i<<1|1]='#';\n\tint len=strlen(ms+1),mx=0,id=0;\n\tfor(int i=1;i<len;++i) {\n\t\tif(mx>i) p[i]=min(p[id*2-i],mx-i);\n\t\telse p[i]=1;\n\t\twhile(ms[i+p[i]]==ms[i-p[i]]) {\n\t\t\t++p[i];\t\n\t\t\tif(i+p[i]>mx) {\n\t\t\t\tcalc(i-p[i]+1,i+p[i]-1);\n\t\t\t}\n\t\t}\n\t\tif(p[i]+i>mx) {\n\t\t\tmx=i+p[i],id=i;\n\t\t}\n\t}\t\n}\n//SA=======================================\narr sa,tax,rak,tp,height;\nvoid Qsort() {\n\tfor(int i=0;i<=M;++i) tax[i]=0;\n\tfor(int i=1;i<=N;++i) tax[rak[i]]++;\n\tfor(int i=1;i<=M;++i) tax[i]+=tax[i-1];\n\tfor(int i=N;i>=1;--i) sa[ tax[rak[tp[i]]]-- ]=tp[i]; \n} \nvoid Ssort() {\n\tfor(int i=1;i<=N;++i) a[i]=s[i];\n\tM=127;\n\tfor(int i=1;i<=N;++i) {\n\t\trak[i]=a[i];\n\t\ttp[i]=i;\n\t}\n\tQsort();\n\tfor(int w=1,p=1;p<N;M=p,w<<=1) {\n\t\tp=0;\n\t\tfor(int i=1;i<=w;++i) tp[++p]=N-w+i;\n\t\tfor(int i=1;i<=N;++i) if(sa[i]>w) tp[++p]=sa[i]-w;\n\t\tQsort();\n\t\tswap(rak,tp);\n\t\trak[sa[1]]=1;p=1;\n\t\tfor(int i=2;i<=N;++i) \n\t\t\tif(\ttp[sa[i-1]]==tp[sa[i]]\n\t\t\t\t&&tp[sa[i-1]+w]==tp[sa[i]+w])\n\t\t\t\trak[sa[i]]=p;\n\t\t\telse\trak[sa[i]]=++p;\n\t}\n\tint i,j,k=0;\n\tfor(i=1;i<=N;++i) rak[sa[i]]=i;\n\tfor(i=1;i<=N;height[rak[i++]]=k)\n\t\tfor(k=k?k-1:k,j=sa[rak[i]-1];a[i+k]==a[j+k];++k);\n}\n//rmq======================================\nint st[MAXN][20];\nint Log2[MAXN];\nvoid init_rmq() {//\u6700\u5c0f\u503c \n\tfor(int i=1;i<=N;++i) st[i][0]=height[i];\n\tfor(int i=2;i<=N;++i) Log2[i]=Log2[i/2]+1;\n\tfor(int j=1;j<=19;++j)\n\t\tfor(int i=1;i+(1<<j)-1<=N;++i) {\n\t\t\tst[i][j]=min(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n\t\t}\n}\nint qry_rmq(int L,int R) {\n\tint x=Log2[R-L+1];\n\treturn min(st[L][x],st[R-(1<<x)+1][x]);\n}\nint lcs(int L,int R) {//\u67e5\u8be2rak L,R\u4e4b\u95f4lcs\u957f\u5ea6 \n\tif(L==R)\treturn 1e9;\n\treturn qry_rmq(L+1,R); \n}\n//modules==================================\nvoid calc(int x,int y) {//\u67e5\u8be2[x,y]\u5b50\u4e32\u7684\u8d21\u732e \n\tx=(x+1)/2,y>>=1;\n\tint len=y-x+1;\n\tint pos=rak[x];//\u6392\u540d,\u5728height\u6570\u7ec4\u4e0a\u5411\u524d\u548c\u5411\u540e\u62d3\u5c55.\n\tll tim=1;\n\t//\u5411\u540e \n\tint L,R,ans=0;\n\tL=0,R=N-pos;\n\twhile(L<=R) {\n\t\tint mid=(L+R)>>1;\n\t\tif(lcs(pos,pos+mid)>=len) {\n\t\t\tans=mid;\n\t\t\tL=mid+1;\n\t\t} else R=mid-1;\n\t} \n\ttim+=ans;\n\t//\u5411\u524d \n\tL=0,R=pos-1;\n\twhile(L<=R) {\n\t\tint mid=(L+R)>>1;\n\t\tif(lcs(pos-mid,pos)>=len) {\n\t\t\tans=mid;\n\t\t\tL=mid+1;\n\t\t} else R=mid-1;\n\t}\n\ttim+=ans;\n\tANS=max(ANS,(ll)tim*len);\n}\n//main=====================================\nsigned main(){\n\tscanf(\"%s\",s+1);N=strlen(s+1);\n\tSsort();\n\tinit_rmq();\n\tdo_manacher();\n\tprintf(\"%lld\\n\",ANS);\n\treturn 0;\n}\n\n```",
        "postTime": 1534232076,
        "uid": 20565,
        "name": "wzj423",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011-SA-Manacher"
    },
    {
        "content": "# [Portal](https://www.luogu.com.cn/problem/P3649)\r\n\r\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd**\u5168\u65b0\u7684\u540e\u7f00\u6570\u7ec4\u89e3\u6cd5**\u3002\r\n\r\n\u5b9a\u4e49\uff1a$sa$\u3001$rk$\u3001$ht$\u6570\u7ec4\uff0c\u5373\u4e3aSA\u91cc\u7684\u5e38\u89c4\u6570\u7ec4\u3002\r\n\r\n\u6211\u4eec\u4f9d\u65e7\u6c42\u51fa$ht$\u6570\u7ec4\uff0c\u5e76\u5229\u7528**\u5355\u8c03\u6808**\uff08\u53ef\u4ee5\u53c2\u89c1[[AHOI2013]\u5dee\u5f02](https://www.luogu.com.cn/problem/P4248)\u7684\u9898\u89e3\u6216\u8005\u672c\u4eba\u7684[\u540e\u7f00\u6570\u636e\u7ed3\u6784\u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/Troverld/hou-zhui-shuo-ju-jie-gou-xue-xi-bi-ji)\uff09\u6c42\u51fa\u6bcf\u4e2a\u4f4d\u7f6e\u6700\u591a\u53ef\u4ee5\u5411\u5de6\u5411\u53f3\u5206\u522b\u5ef6\u4f38\u5230\u591a\u8fdc\u3002\u5373\uff0c$(L_i,R_i)$\u4e3a\u6ee1\u8db3$(\\min\\limits_{j=L_i+1}^{R_i-1}ht_j)\\geq ht_i$\u7684\u6700\u5927\u533a\u95f4\u3002\u5219\u4e32$s[sa_i,\\dots,sa_i+ht_i-1]$\u5171\u51fa\u73b0\u4e86$R_i-L_i$\u6b21\u3002\r\n\r\n\u8fd9\u91cc\u662f\u6c42\u51fa$(L_i,R_i)$\u7684\u4ee3\u7801:\r\n\r\n```cpp\r\nL[0]=stk[0]=1;\r\nfor(int i=2;i<=n;i++){\r\n\twhile(tp&&ht[stk[tp]]>ht[i])R[stk[tp--]]=i;\r\n\tif(ht[stk[tp]]==ht[i])L[i]=L[stk[tp]];\r\n\telse L[i]=stk[tp];\r\n\tstk[++tp]=i;\r\n}\r\nwhile(tp)R[stk[tp--]]=n+1;\r\n```\r\n\uff08\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u7684\u76ee\u7684\uff0c\u5c31\u662f\u4e3a\u4e86\u5f97\u5230$R_i-L_i$\uff0c\u5373\u5b83\u7684\u51fa\u73b0\u6b21\u6570\uff09\r\n\r\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a$i$\uff0c\u6211\u4eec**HASH+\u4e8c\u5206**\u51fa\u6765$s[sa_i,\\dots,sa_i+ht_i-1]$\u7684**\u524d\u7f00**\u4e2d\uff0c\u6700\u957f\u7684**\u56de\u6587\u4e32**\u957f\u5ea6\u3002\u5219\uff08\u957f\u5ea6*\u51fa\u73b0\u6b21\u6570\uff09\uff0c\u5373\u53ef\u4e0e\u7b54\u6848\u53d6$\\max$\u3002\r\n\r\n\u8fd9\u91cc\u6211\u4eec\u5148\u89e3\u7b54\u51e0\u4e2a\u95ee\u9898\uff1a\r\n\r\nQ1\uff1a\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u662f**\u524d\u7f00\u56de\u6587\u4e32**\uff1f$s[sa_i,\\dots,sa_i+ht_i-1]$\u7684\u4efb\u4f55\u5b50\u4e32\u4e0d\u90fd\u51fa\u73b0\u4e86$R_i-L_i$\u6b21\u5417\uff1f\r\n\r\nA1:\u786e\u5b9e\uff0c\u8fd9\u91cc\u662f\u5e94\u8be5\u7528\u5b83\u7684\u5168\u90e8\u5b50\u4e32\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u8981\u5fd8\u8bb0\uff0c\u5b83\u7684\u6bcf\u4e2a\u5b50\u4e32\uff0c\u90fd\u662f**\u67d0\u4e00\u6761\u540e\u7f00\u7684\u524d\u7f00**\uff01\u6240\u4ee5\uff0c\u603b\u6709\u4e00\u6761\u540e\u7f00\uff0c\u4f1a\u8ba1\u7b97\u5b83\u7684\u975e\u524d\u7f00\u5b50\u4e32\u7684\u3002\u5e76\u4e14\uff0c\u5728\u8fd9\u91cc\u8ba1\u7b97\u7684\u8bdd\uff0c\u5b83\u51fa\u73b0\u7684\u6b21\u6570\u4e5f\u4f1a\u5c11\u4e8e\u5b83\u771f\u5b9e\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u6bd5\u7adf\u8fd9\u91cc\u662f\u8981\u6c42$s[sa_i,\\dots,sa_i+ht_i-1]$\u8fd9**\u4e00\u6574\u4e2a\u5b57\u7b26\u4e32**\u5168\u90fd\u51fa\u73b0\uff0c\u4f46\u662f\u5982\u679c\u53ea\u8ba8\u8bba\u8be5\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u7684\u8bdd\uff0c\u51fa\u73b0\u6b21\u6570\u4e5f\u4f1a\u66f4\u591a\u3002\r\n\r\nQ2\uff1a\u90a3\u65e2\u7136\u8ba8\u8bba\u5b50\u4e32\u65f6\u6b21\u6570\u4f1a\u66f4\u591a\uff0c\u4e3a\u4ec0\u4e48\u8981\u5728\u8fd9\u91cc\u8ba8\u8bba\u5b83\u7684\u524d\u7f00\u5462\uff1f\u8bf4\u4e0d\u5b9a\u5b83\u7684\u524d\u7f00\u7684\u51fa\u73b0\u6b21\u6570\u4e5f\u4f1a\u66f4\u591a\u5462\uff1f\r\n\r\nA2\uff1a\u786e\u5b9e\uff0c\u5b83\u7684\u6b21\u6570\u786e\u5b9e\u4f1a\u66f4\u591a\u3002\u6211\u4eec\u628a\u524d\u7f00\u7684\u5408\u6cd5\u533a\u95f4\u8bbe\u4e3a$(L',R')$\uff0c\u5219\u5fc5\u6709$(L_i,R_i)\\subset(L',R')$\u3002\u4f46\u662f\uff0c\u6211\u4eec\u8bbe$(L',R')$\u4e2d$\\min$\u7684\u4f4d\u7f6e\u4e3a$p$\uff0c\u5219\u5fc5\u6709$(L_p,R_p)=(L',R')$\uff01\u56e0\u6b64\uff0c\u8fd9\u4e2a\u524d\u7f00\u7684\u8d21\u732e\uff0c\u4f1a\u5728$p$\u5904\u88ab\u8ba1\u7b97\uff0c\u5728\u90a3\u65f6\u7684$(L_p,R_p)$\u5373\u662f\u5b83\u771f\u5b9e\u7684\u51fa\u73b0\u6b21\u6570\u3002\r\n\r\n\u8fd9\u91cc\u662f\u4e8c\u5206+HASH\u7684\u5199\u6cd5\uff1a\r\n\r\n```cpp\r\nfor(int i=2;i<=n;i++){\r\n\tint tms=R[i]-L[i];\r\n\tint l=0,r=ht[i];\r\n\twhile(l<r){\r\n\t\tint mid=(l+r+1)>>1;\r\n\t\tif((pre[sa[i]+mid-1]-pre[sa[i]-1])==(suf[sa[i]+ht[i]-mid]-suf[sa[i]+ht[i]]))l=mid;\r\n\t\telse r=mid-1;\r\n\t}\r\n\tres=max(res,1ll*tms*l);\r\n}\r\n```\r\n\r\n\u5f53\u7136\uff0c\u4ee5\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u5934\u7684\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\uff0c\u662f\u53ef\u4ee5\u4f7f\u7528Manacher$O(1)$\u6c42\u51fa\u7684\uff0c\u8fd9\u91cc\u56e0\u4e3a~~\u61d2\u5f97\u63a8\u4e86~~\u5c31\u4f7f\u7528HASH\u5427\u3002\r\n\r\n\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5e26\u5165\u7b2c\u4e00\u7ec4\u6837\u4f8b\u7b97\u7684\u8bdd\uff0c\u4f1a\u53d1\u73b0\u7b97\u51fa\u6765\u7684\u7ed3\u679c\u662f$6$\uff0c\u800c\u975e$7$\u3002\r\n\r\n\u4e3a\u4ec0\u4e48\u5462\uff1f\r\n\r\n\u56e0\u4e3a\u6240\u6709\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u56de\u6587\u4e32\u90fd\u4e0d\u4f1a\u88ab\u7edf\u8ba1\u4e0a\uff01\r\n\r\n\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u518d\u8dd1\u4e00\u904dManacher\u6c42\u56de\u6587\u4e32\u6700\u5927\u957f\u5ea6\u5373\u53ef\u3002\u4e0d\u4f1a\u7684\u53ef\u4ee5\u53c2\u89c1\u672c\u4eba\u7684[Manacher\u611f\u6027\u778e\u626f](https://www.luogu.com.cn/blog/Troverld/manacher-gan-xing-xia-che)\u3002\r\n\r\n\u590d\u6742\u5ea6$O(n\\log n)$\u3002\r\n\r\n\u4ee3\u7801\uff08~~SA+HASH+Manacher\u6a21\u677f\u4e09\u5408\u4e00\uff0c\u4f60\u503c\u5f97\u62e5\u6709~~\uff09\uff1a\r\n\r\n```cpp\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nint x[400100],y[400100],sa[400100],ht[400100],rk[400100],buc[400100],n,m;\r\nint L[400100],R[400100],stk[400100],tp;\r\nchar s[400100],str[800100];\r\nll res;\r\nbool mat(int a,int b,int k){\r\n\tif(y[a]!=y[b])return false;\r\n\tif((a+k<=n)^(b+k<=n))return false;\r\n\tif((a+k<=n)&&(b+k<=n))return y[a+k]==y[b+k];\r\n\treturn true;\r\n}\r\nvoid SA(){\r\n\tfor(int i=1;i<=n;i++)buc[x[i]=s[i]]++;\r\n\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\r\n\tfor(int i=n;i;i--)sa[buc[x[i]]--]=i;\r\n\tfor(int k=1;k<=n;k<<=1){\r\n\t\tint num=0;\r\n\t\tfor(int i=n-k+1;i<=n;i++)y[++num]=i;\r\n\t\tfor(int i=1;i<=n;i++)if(sa[i]>k)y[++num]=sa[i]-k;\r\n\t\tfor(int i=1;i<=m;i++)buc[i]=0;\r\n\t\tfor(int i=1;i<=n;i++)buc[x[y[i]]]++;\r\n\t\tfor(int i=1;i<=m;i++)buc[i]+=buc[i-1];\r\n\t\tfor(int i=n;i;i--)sa[buc[x[y[i]]]--]=y[i],y[i]=0;\r\n\t\tswap(x,y);\r\n\t\tx[sa[1]]=num=1;\r\n\t\tfor(int i=2;i<=n;i++)x[sa[i]]=mat(sa[i],sa[i-1],k)?num:++num;\r\n\t\tm=num;\r\n\t}\r\n\tfor(int i=1;i<=n;i++)rk[sa[i]]=i;\r\n\tfor(int i=1,k=0;i<=n;i++){\r\n\t\tif(rk[i]==1)continue;\r\n\t\tif(k)k--;\r\n\t\tint j=sa[rk[i]-1];\r\n\t\twhile(j+k<=n&&i+k<=n&&s[j+k]==s[i+k])k++;\r\n\t\tht[rk[i]]=k;\r\n\t}\r\n}\r\ntypedef unsigned long long ull;\r\null sd1=998244353,sd2=666623333,pov1[401000],pov2[401000];\r\nstruct HASH{\r\n\tull val1,val2;\r\n\tint len;\r\n\tHASH(){\r\n\t\tval1=val2=0ull;\r\n\t\tlen=0;\r\n\t}\r\n\tHASH(char ip){\r\n\t\tval1=val2=ip;\r\n\t\tlen=1;\r\n\t}\r\n\tfriend HASH operator +(const HASH &x,const HASH &y){\r\n\t\tHASH z;\r\n\t\tz.val1=x.val1*pov1[y.len]+y.val1;\r\n\t\tz.val2=x.val2*pov2[y.len]+y.val2;\r\n\t\tz.len=x.len+y.len;\r\n\t\treturn z;\r\n\t}\r\n\tfriend HASH operator -(const HASH &x,const HASH &y){\r\n\t\tHASH z;\r\n\t\tz.val1=x.val1-y.val1*pov1[x.len-y.len];\r\n\t\tz.val2=x.val2-y.val2*pov2[x.len-y.len];\r\n\t\tz.len=x.len-y.len;\r\n\t\treturn z;\r\n\t}\r\n\tfriend bool operator ==(const HASH &x,const HASH &y){\r\n\t\tif(x.len!=y.len)return false;\r\n\t\tif(x.val1!=y.val1)return false;\r\n\t\tif(x.val2!=y.val2)return false;\r\n\t\treturn true;\r\n\t}\r\n}pre[401000],suf[800100];\r\nint Centre,Rpos,rad[800100],S;\r\nvoid prep(){\r\n\tstr[S++]='#';\r\n\tfor(int i=1;i<=n;i++)str[S++]=s[i],str[S++]='#';\r\n}\r\nvoid Manacher(){\r\n    Centre=Rpos=-1;\r\n    for(register int i=0;i<S;i++){\r\n        rad[i]=(i<Rpos)?min(Rpos-i,rad[Centre*2-i]):1;\r\n        while(i+rad[i]<S&&i-rad[i]>=0)if(str[i+rad[i]]==str[i-rad[i]])rad[i]++;else break;\r\n        if(i+rad[i]>Rpos)Rpos=i+rad[i],Centre=i;\r\n        res=max(res,1ll*rad[i]-1);\r\n    }\r\n}\r\nint main(){\r\n\tscanf(\"%s\",s+1),n=strlen(s+1),m='z',pov1[0]=pov2[0]=1;\r\n\tfor(int i=1;i<=n;i++)pov1[i]=pov1[i-1]*sd1,pov2[i]=pov2[i-1]*sd2;\r\n\tfor(int i=1;i<=n;i++)pre[i]=pre[i-1]+HASH(s[i]);\r\n\tfor(int i=n;i>=1;i--)suf[i]=suf[i+1]+HASH(s[i]);\r\n\tSA();\r\n//\tfor(int i=1;i<=n;i++)printf(\"%d \",rk[i]);puts(\"\");\r\n//\tfor(int i=1;i<=n;i++)printf(\"%d \",ht[i]);puts(\"\");\r\n\tL[0]=stk[0]=1;\r\n\tfor(int i=2;i<=n;i++){\r\n\t\twhile(tp&&ht[stk[tp]]>ht[i])R[stk[tp--]]=i;\r\n\t\tif(ht[stk[tp]]==ht[i])L[i]=L[stk[tp]];\r\n\t\telse L[i]=stk[tp];\r\n\t\tstk[++tp]=i;\r\n\t}\r\n\twhile(tp)R[stk[tp--]]=n+1;\r\n\tfor(int i=2;i<=n;i++){\r\n\t\tint tms=R[i]-L[i];\r\n\t\tint l=0,r=ht[i];\r\n\t\twhile(l<r){\r\n\t\t\tint mid=(l+r+1)>>1;\r\n\t\t\tif((pre[sa[i]+mid-1]-pre[sa[i]-1])==(suf[sa[i]+ht[i]-mid]-suf[sa[i]+ht[i]]))l=mid;\r\n\t\t\telse r=mid-1;\r\n\t\t}\r\n\t\tres=max(res,1ll*tms*l);\r\n\t}\r\n\tprep();\r\n\tManacher();\r\n//\tfor(int i=0;i<S;i++)printf(\"%c \",str[i]);puts(\"\");\r\n//\tfor(int i=0;i<S;i++)printf(\"%d \",rad[i]);puts(\"\");\r\n\tprintf(\"%lld\\n\",res);\r\n\treturn 0;\r\n} \r\n```\r\n",
        "postTime": 1595854251,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\n\u4e0d\u61c2\u56de\u6587\u81ea\u52a8\u673a\u7684[\u70b9\u8fd9\u91cc](https://www.luogu.com.cn/blog/chihik/hui-wen-zi-dong-ji)\n\n\u5982\u679c\u5355\u7eaf\u7684\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7ed3\u675f\u56de\u6587\u4e32\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u6211\u4eec\u7528\u7684\u589e\u91cf\u6cd5 \uff0c$ww$ \u53ea\u4f1a\u88ab\u8ba1\u7b97\u4e00\u6b21 \uff0c \u7b2c\u4e8c\u4e2a\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\u3002\n\n\u6240\u4ee5\u5728\u6784\u5efa\u56de\u6587\u81ea\u52a8\u673a\u540e \uff0c \u6211\u4eec\u5c06\u6bcf\u4e00\u4e2a $Cnt[Link[u]]+=Link[u]$ , \u5c31\u53ef\u4ee5\u907f\u514d\u7531\u4e0a\u8ff0\u65b9\u6cd5\u5e26\u6765\u7684\u5f71\u54cd\u4e86\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\nusing namespace std;\n#define Mod 51123987\n\nconst int MAXN = 300000 , MAXK = 26;\nchar str[ MAXN + 5 ];\nstruct Palindromes_Automaton {\n    int Size , Last , Root0 , Root1 , Trans[ MAXN + 5 ][ MAXK + 5 ] , Link[ MAXN + 5 ];\n    int Len[ MAXN + 5 ] , Cnt[ MAXN + 5 ];\n\n    Palindromes_Automaton( ) {\n        Root0 = Size ++ , Root1 = Size ++; Last = Root1;\n        Len[ Root0 ] = 0  , Link[ Root0 ] = Root1;\n        Len[ Root1 ] = -1 , Link[ Root1 ] = Root1; \n    }\n\n    void Extend( int ch , int dex ) {\n        int u = Last;\n        for( ; str[ dex ] != str[ dex - Len[ u ] - 1 ] ; u = Link[ u ] );\n        if( !Trans[ u ][ ch ] ) {\n            int Newnode = ++ Size , v = Link[ u ];\n            Len[ Newnode ] = Len[ u ] + 2;\n            for( ; str[ dex ] != str[ dex - Len[ v ] - 1 ] ; v = Link[ v ] );\n            Link[ Newnode ] = Trans[ v ][ ch ]; Trans[ u ][ ch ] = Newnode;\n        }\n        Last = Trans[ u ][ ch ];\n        Cnt[ Last ] ++;\n    }\n    void Build( char *str ) {\n        int len = strlen( str );\n        for( int i = 0 ; i < len ; i ++ )\n            Extend( str[ i ] - 'a' + 1 , i );\n    }\n    long long Calc( ) {\n        long long Ans = 0;\n        for( int i = Size ; i >= 0 ; i -- )\n            Cnt[ Link[ i ] ] += Cnt[ i ] , Ans = max( Ans , 1ll * Cnt[ i ] * Len[ i ] );\n        return Ans;\n    }\n}PAM;\n\nint main() {\n    scanf(\"%s\", str );\n    PAM.Build( str );\n    printf(\"%lld\", PAM.Calc( ) );\n    return 0;\n}\n\n```\n",
        "postTime": 1575294132,
        "uid": 123802,
        "name": "chihik",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u7528manacher o(n)\u590d\u6742\u5ea6\u627e\u51fa\u4e32\u4e2d\u7684\u56de\u6587\uff0c\u7136\u540e\u7528\u540e\u7f00\u6570\u7ec4\u5904\u7406\uff0c+rmq \u6700\u540e\u518d\u7528\u4e8c\u5206\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b50\u4e32\u5728\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\n\n\u5c31\u662f\u627e\u5230\u6700\u957f\u7684\u6ee1\u8db3\u533a\u95f4\u5185height\u90fd\u5927\u4e8e\u7b49\u4e8eLen \u6c42\u8fd9\u4e2a\u6700\u5927\u957f\u5ea6\uff0c\u5206\u522b\u5728\u5de6\u53f3\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\n\n\u6700\u540e\u518d\u7528\u51fa\u73b0\u6b21\u6570\u4e58\u4ee5\u957f\u5ea6\u5373\u53ef\uff0c\u5728\u6d1b\u8c37\u6211\u662f\u5927\u725b\u5206\u7ad9\u4ea4\u8fc7\u7684bzoj\u53ef\u4ee5\u8fc7\n\n\u53c2\u8003\u4e0bbzoj3172 \u00a0(http://www.elijahqi.win/2017/08/27/bzoj-3172/)\n\n\u8fd8\u6709manacher\u7684\u677f\u5b50\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#define N 330000\nchar s[N<<1];\nint a[N],height[N],sa[N],tmp[N],count[N],rank[N<<1],rank1[N],n,Log[N],fmin[N][20],p[N<<1];\nlong long ans;\ninline int min(int x,int y){\n    return x<y?x:y;\n}\ninline long long max(long long x,long long y){\n    return x>y?x:y;\n}\ninline int lcp(int l,int r){\n    l++;int t=Log[r-l+1];\n    return min(fmin[l][t],fmin[r-(1<<t)+1][t]);\n}\ninline long long calc(int x,int len){\n    x=rank[x];int l1,r1;\n    if (height[x]<len) l1=x;else{\n        int l=1,r=x-1;\n        while (l<=r){\n            int mid=(l+r)>>1;\n            if(lcp(mid,x)>=len) r=mid-1;else l=mid+1;\n        }l1=l;\n    }\n    if (height[x+1]<len) r1=x;else{\n        int l=x+1,r=n;\n        while (l<=r){\n            int mid=(l+r)>>1;\n            if (lcp(x,mid)>=len) l=mid+1;else r=mid-1;\n        }r1=r;\n    }\n    return (long long)len*(r1-l1+1);\n}\nint main(){\n    freopen(\"3649.in\",\"r\",stdin);\n    scanf(\"%s\",s+1);n=strlen(s+1);\n    for (int i=1;i<=n;++i) a[i]=s[i]-'a'+1;\n    //sa\n    int m=30;\n    for (int i=1;i<=n;++i) count[a[i]]=1;\n    for (int i=1;i<=m;++i) count[i]+=count[i-1];\n    for (int i=1;i<=n;++i) rank[i]=count[a[i]];\n    int k=0;\n    for (int p1=1;k!=n;p1<<=1,m=k){\n        for (int i=1;i<=m;++i) count[i]=0;\n        for (int i=1;i<=n;++i) count[rank[i+p1]]++;\n        for (int i=1;i<=m;++i) count[i]+=count[i-1];\n        for (int i=n;i>=1;--i) tmp[count[rank[i+p1]]--]=i;\n        for (int i=1;i<=m;++i) count[i]=0;\n        for (int i=1;i<=n;++i) count[rank[i]]++;\n        for (int i=1;i<=m;++i) count[i]+=count[i-1];\n        for (int i=n;i>=1;--i) sa[count[rank[tmp[i]]]--]=tmp[i];\n        memcpy(rank1,rank,sizeof(rank)>>1);\n        rank[sa[1]]=k=1;\n        for (int i=2;i<=n;++i){\n            if (rank1[sa[i]]!=rank1[sa[i-1]]||rank1[sa[i]+p1]!=rank1[sa[i-1]+p1]) ++k;\n            rank[sa[i]]=k;\n        }\n    }\n    k=0;\n    for (int i=1;i<=n;++i) {\n        if (rank[i]==1) continue;\n        k=k==0?0:k-1;\n        while (a[i+k]==a[sa[rank[i]-1]+k]) ++k;\n        height[rank[i]]=k;\n    }Log[0]=-1;\n    for (int i=1;i<=n;++i) Log[i]=Log[i>>1]+1;\n    for (int i=1;i<=n;++i) fmin[i][0]=height[i];\n    for (int j=1;j<=Log[n];++j){\n        for (int i=1;i<=n-(1<<j)+1;++i){\n            fmin[i][j]=min(fmin[i][j-1],fmin[i+(1<<(j-1))][j-1]);\n        }\n    }\n//    for (int i=1;i<=n;++i){\n//        for (int j=sa[i];j<=n;++j) printf(\"%c\",s[j]);printf(\"\\n\");\n//    }\n//    for (int i=1;i<=n;++i) printf(\"%d \",height[i]);printf(\"\\n\");\n    for (int i=1;i<=n;++i){s[(i<<1)-1]='#';s[i<<1]=a[i]+'a'-1;}\n    n<<=1;n++;s[n]='#';\n    //printf(\"%s\",s+1);printf(\"\\n\");\n    int id=0;\n    for (int i=1;i<=n;++i){\n        if (i<id+p[id]) p[i]=min(id+p[id]-i,p[(id<<1)-i]);else p[i]=1;\n        while (i+p[i]<=n&&i-p[i]>0&&s[i+p[i]]==s[i-p[i]]){\n            if (s[i-p[i]]=='#') ++p[i];else{++p[i];continue;}\n            if (i+p[i]>id+p[id]) ans=max(ans,calc(i/2-p[i]/2+1,p[i]-1));\n        }\n        if (i+p[i]>id+p[id]) id=i;\n    }\n    //for (int i=1;i<=n;++i) printf(\"%d \",p[i]);printf(\"\\n\");\n    printf(\"%lld\",ans);\n    return 0;\n}\n```\n(http://www.elijahqi.win/2017/07/16/hdu3068/)\n\n\u672c\u6587\u5730\u5740\uff1a(http://www.elijahqi.win/2017/09/02/bzoj3676luogu3649-apio2014%e5%9b%9e%e6%96%87%e4%b8%b2/)\n\n\u849f\u84bb\u7684blog(elijahqi.win)\n",
        "postTime": 1504334748,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "#Brief Description\n\n\u4e00\u4e2a\u56de\u6587\u4e32\u7684value\u5b9a\u4e49\u4e3a\u8fd9\u4e2a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u4e58\u4ee5\u51fa\u73b0\u6b21\u6570\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42$value_{max}$\u3002\n\n\n#Algorithm Design\n\n\u6211\u4eec\u4f7f\u7528Manacher\u66b4\u529b\u7b97\u51fa\u6240\u6709\u7684\u56de\u6587\u5b50\u4e32\uff0c\u653e\u5728SAM\u91cc\u500d\u589e\uff0c\u5927\u529b\u7b97\u8d21\u732e\u5c31\u597d\u4e86\u3002\n\n\n#Code\n```cpp\n#include <algorithm>\n#include <cstdio>\n#define ll long long\n#include <cstring>\nconst int maxn = 600010;\nint n;\nll ans;\nint p[maxn];\nchar str[maxn];\nstruct Suffix_Automaton {\n  int trans[maxn][26], fa[maxn][20], pos[maxn], len[maxn], size[maxn];\n  int last, root, sz;\n  int v[maxn], q[maxn], dep[maxn];\n  void init() {\n    sz = 0;\n    last = root = ++sz;\n  }\n  void insert(int x, int id) {\n    int p = last, np = last = ++sz;\n    len[np] = len[p] + 1;\n    pos[id] = np;\n    size[np] = 1;\n    for (; !trans[p][x]; p = fa[p][0])\n      trans[p][x] = np;\n    if (p == 0)\n      fa[np][0] = root;\n    else {\n      int q = trans[p][x];\n      if (len[q] == len[p] + 1) {\n        fa[np][0] = q;\n      } else {\n        int nq = ++sz;\n        for (int i = 0; i < 26; i++)\n          trans[nq][i] = trans[q][i];\n        fa[nq][0] = fa[q][0];\n        len[nq] = len[p] + 1;\n        fa[q][0] = fa[np][0] = nq;\n        for (; trans[p][x] == q; p = fa[p][0])\n          trans[p][x] = nq;\n      }\n    }\n  }\n  void pre() {\n    for (int i = 1; i <= sz; i++)\n      v[len[i]]++;\n    for (int i = 1; i <= n; i++)\n      v[i] += v[i - 1];\n    for (int i = sz; i >= 1; i--)\n      q[v[len[i]]--] = i;\n    for (int i = sz; i >= 1; i--) {\n      int t = q[i];\n      size[fa[t][0]] += size[t];\n    }\n    for (int i = 1; i <= sz; i++) {\n      int t = q[i];\n      dep[t] = dep[fa[t][0]] + 1;\n      for (int j = 1; (1 << j) <= dep[t]; j++)\n        fa[t][i] = fa[fa[t][i - 1]][i - 1];\n    }\n  }\n  void query(int l, int r) {\n    int ret = pos[r];\n    for (int i = 19; i >= 0; i--) {\n      int t = fa[ret][i];\n      if (len[t] >= r - l + 1)\n        ret = t;\n    }\n    ans = std::max(ans, (ll)size[ret] * (r - l + 1));\n  }\n} sam;\nvoid manacher() {\n  int mx = 0, id;\n  for (int i = 1; i <= n; i++) { // even\n    if (mx > i)\n      p[i] = std::min(mx - i, p[2 * id - i - 1]);\n    else\n      p[i] = 0;\n    for (; str[i + p[i] + 1] == str[i - p[i]];\n         sam.query(i - p[i] + 1, i + p[i]))\n      p[i]++;\n    if (p[i] + i > mx)\n      mx = p[i] + i, id = i;\n  }\n  mx = 0;\n  for (int i = 1; i <= n; i++) { // odd\n    if (mx > i)\n      p[i] = std::min(mx - i - 1, p[2 * id - i]);\n    else {\n      p[i] = 1;\n      sam.query(i - p[i] + 1, i + p[i] - 1);\n    }\n    for (; str[i + p[i]] == str[i - p[i]];\n         sam.query(i - p[i] + 1, i + p[i] - 1))\n      p[i]++;\n    if (p[i] + i > mx)\n      mx = p[i] + i, id = i;\n  }\n}\nint main() {\n#ifndef ONLINE_JUDGE\n// freopen(\"input\", \"r\", stdin);\n#endif\n  scanf(\"%s\", str + 1);\n  n = strlen(str + 1);\n  str[0] = '+', str[n + 1] = '-';\n  sam.init();\n  for (int i = 1; i <= n; i++) {\n    sam.insert(str[i] - 'a', i);\n  }\n  sam.pre();\n  manacher();\n  printf(\"%lld\\n\", ans);\n}\n```",
        "postTime": 1489562654,
        "uid": 7429,
        "name": "MrMorning",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    },
    {
        "content": "\u697c\u4e0bdalao\u5199\u7684\u7b80\u77ed\u6211\u7684\u56de\u6587\u81ea\u52a8\u673a\u53ef\u80fd\u6bd4\u8f83\u7e41\u7410\u3002\n\n\u56de\u6587\u6811\uff0c\u4e5f\u53eb\u56de\u6587\u81ea\u52a8\u673a\uff0c\u662f2014\u5e74\u88ab\u897f\u4f2f\u5229\u4e9a\u6c11\u65cf\u53d1\u660e\u7684\uff0c\u5176\u529f\u80fd\u5982\u4e0b\uff1a\n\n1\u3001\u6c42\u524d\u7f00\u5b57\u7b26\u4e32\u4e2d\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32\u79cd\u7c7b\n\n2\u3001\u6c42\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u7684\u4e2a\u6570\n\n3\u3001\u4ee5\u4e0b\u6807i\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2a\u6570/\u79cd\u7c7b\n\n4\u3001\u6bcf\u4e2a\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u5305\u542b\u7684\u672c\u8d28\u4e0d\u540c\u56de\u6587\u4e32\u79cd\u7c7b\n\n\uff08\u672c\u6587\u53c2\u8003\u81eaPalindromic Tree\u2014\u2014\u56de\u6587\u6811\u3010\u5904\u7406\u4e00\u7c7b\u56de\u6587\u4e32\u95ee\u9898\u7684\u5f3a\u529b\u5de5\u5177\u3011\uff0cPalindromic Tree \u56de\u6587\u81ea\u52a8\u673a-\u56de\u6587\u6811 \u89e3\u51b3\u56de\u6587\u4e32\u7684\u795e\u5668\uff09\n\n\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e9b\u6570\u7ec4\u7684\u610f\u4e49\n\nnext[][]\u7c7b\u4f3c\u4e8e\u5b57\u5178\u6811\uff0c\u6307\u5411\u5f53\u524d\u5b57\u7b26\u4e32\u5728\u4e24\u6bb5\u540c\u65f6\u52a0\u4e0a\u4e00\u4e2a\u5b57\u7b26\n\nfail[] fail\u6307\u9488\uff0c\u7c7b\u4f3c\u4e8eAC\u81ea\u52a8\u673a\uff0c\u8fd4\u56de\u5931\u914d\u540e\u4e0e\u5f53\u524di\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u4e32\u672c\u8d28\u4e0a\u4e0d\u540c\u7684\u6700\u957f\u56de\u6587\u540e\u7f00\n\ncnt[] \u5728\u6700\u540e\u7edf\u8ba1\u540e\u5b83\u53ef\u4ee5\u8868\u793a\u5f62\u5982\u4ee5i\u4e3a\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u4e2d\u6700\u957f\u7684\u90a3\u4e2a\u4e32\u4e2a\u6570\n\nnum[] \u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u56de\u6587\u4e32\u7684\u79cd\u7c7b\u6570\n\nlen[] \u8868\u793a\u4ee5i\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u56de\u6587\u4e32\u957f\u5ea6\n\ns[] \u5b58\u653e\u6dfb\u52a0\u7684\u5b57\u7b26\n\nlast \u8868\u793a\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\n\nn \u8868\u793a\u5b57\u7b26\u6570\u7ec4\u7684\u7b2c\u51e0\u4f4d\n\np \u8868\u793a\u6811\u4e2d\u8282\u70b9\u7684\u6307\u9488\n\n\u672c\u9898\u7528cnt \\* len\u53d6max\u5373\u53ef\n\n\u5b89\u5229\u535a\u5ba2\uff1ahttp://www.cnblogs.com/nbwzyzngyl/p/8260921.html\n\n    \n    \n    \n    \n    \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+5;\nconst int M=26;\ntypedef long long ll;\nstruct Palindromic_Tree{\n    int nex[N][M];\n    int fail[N];\n    int cnt[N];\n    int num[N];\n    int len[N];\n    int S[N];\n    int last;\n    int n;\n    int p;\n    int newnode(int l)\n    {\n        for(int i=0;i<M;++i)nex[p][i]=0;\n        cnt[p]=0;\n        num[p]=0;\n        len[p]=l;\n        return p++;\n    }\n    void init()\n    {\n        p=0;\n        newnode(0);\n        newnode(-1);\n        last=0;\n        n=0;\n        S[n]=-1;\n        fail[0]=1;\n    }\n    int get_fail(int x){\n        while(S[n-len[x]-1]!=S[n])x=fail[x];\n        return x;\n    }\n    void add(int c){\n        c-='a';\n        S[++n]=c;\n        int cur=get_fail(last);\n        if(!nex[cur][c]){\n            int now=newnode(len[cur]+2);\n            fail[now]=nex[get_fail(fail[cur])][c];\n            nex[cur][c]=now;\n            num[now]=num[fail[now]]+1;\n        }\n        last=nex[cur][c];\n        cnt[last]++;\n    }\n    long long count(){\n        long long ans=0;\n        for(int i=p-1;i>=0;--i)cnt[fail[i]]+=cnt[i],ans=max(ans,1ll*cnt[i]*len[i]);\n        return ans;\n    }\n}T;\nchar s[N];\nint main()\n{\n    scanf(\"%s\",s);\n    int n=strlen(s);\n    T.init();\n    for(int i=0;i<n;++i)\n    {\n        T.add(s[i]);\n    }\n    printf(\"%lld\",T.count());\n    return 0;\n}\n```",
        "postTime": 1515593026,
        "uid": 25438,
        "name": "\u5927\u5955\u54e5",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3649 \u3010[APIO2014]\u56de\u6587\u4e32\u3011"
    }
]