[
    {
        "content": "**\u6ce8\u610f\uff1a**\n\n\u9898\u89e3\u4e2d\u7b97\u590d\u6742\u5ea6\u6240\u63d0\u5230\u7684$q$\u5747\u4e3a\u5982\u4e0b\u516c\u5f0f\uff1a\n\n$$q=\\sum_{i=1}^{k-1}C_k^i\\times \\sum_{j=1}^{k-i}C_{k-i}^j$$\n\n#### \u7b97\u6cd51\uff1a\n\n\u66b4\u529b\u641c\u7d22\u6240\u6709\u60c5\u51b5\uff0c\u867d\u7136\u770b\u8d77\u6765\u590d\u6742\u5ea6\u4e3a$2^{35}$\uff0c\u4f46\u662f\u5f88\u591a\u72b6\u6001\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u5b9e\u9645\u4e0a\u5408\u6cd5\u65b9\u6848\u6570\u4e0d\u4f1a\u8d85\u8fc7$5\u00d710^7$\uff0c\u90a3\u4e48\u66b4\u529b\u641c\u7d22\u7684\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f1a\u592a\u591a\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(\\text{\u80fd\u8fc7})$\uff0c\u671f\u671b\u5f97\u5206\uff1a$20$\u5206\u3002\n\n#### \u7b97\u6cd52\uff1a\n\n\u8bfb\u9898\u53d1\u73b0$m$\u5f88\u5c0f\uff0c\u53ef\u4ee5\u60f3\u5230\u72b6\u538b\uff0c\u8003\u8651\u5b9a\u4e49$\\rm DP$\u8f6c\u79fb\uff0c\u4ee4$f[i][S]$\u8868\u793a\u8003\u8651\u5230\u7b2c$i$\u5929\uff0c\u5f53\u5929\u5403\u7684\u83dc\u54c1\u96c6\u5408\u4e3a$S$\u65f6\u7684\u5408\u6cd5\u65b9\u6848\u6570\uff0c\u4ee4$S'$\u4e3a\u524d\u4e00\u5929\u5403\u7684\u83dc\u54c1\u96c6\u5408\uff0c\u90a3\u4e48$\\rm DP$\u8f6c\u79fb\u53ef\u4ee5\u5982\u4e0b\u8868\u793a\uff1a\n\n$$f[i][S]=\\sum_{S',S'\\cap S=\\varnothing}f[i-1][S']$$\n\n\u91c7\u7528\u5b50\u96c6\u679a\u4e3e\uff0c\u5219\u8f6c\u79fb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$q$\uff0c\u5f53$k=7$\u65f6\u53d6\u5230\u4e0a\u754c\u4e3a$1932$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(nq)$\uff0c\u671f\u671b\u5f97\u5206\uff1a$45$\u5206\u3002\n\n#### \u7b97\u6cd53\uff1a\n\n\u89c2\u5bdf\u5230$m,k$\u5f88\u7279\u6b8a\uff0c\u5982\u679c\u4ee4$p$\u4e3a\u90a3\u4e00\u5929\u63d0\u4f9b\u7684\u83dc\u54c1\u6570\u91cf\uff0c\u89c4\u5f8b\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4ee5\u4e0b$3$\u79cd\u60c5\u51b5\uff1a\n\n$$ans=\\begin{cases}2\\ (n\\geq1,p=2)\\\\0\\ (n>1,p<2)\\\\1\\ (n=1,p=1)\\end{cases}$$\n\n\u7279\u5224\u56de\u7b54\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(1)$\uff0c\u52a0\u4e0a\u7b97\u6cd5$2$\uff0c\u671f\u671b\u5f97\u5206\uff1a$55$\u5206\u3002\n\n\n\n#### \u7b97\u6cd54\uff1a\n\n\u89c2\u5bdf\u540e\u9762\u7684\u6d4b\u8bd5\u70b9\uff0c\u770b\u8d77\u6765\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\u7684\u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u51fa\u9898\u4eba\u7684\u9677\u9631\uff0c\u56e0\u4e3a\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u5df2\u7ecf\u4e0d\u80fd\u518d\u4f18\u5316\u4e86~~\u53ea\u662f\u51fa\u9898\u4eba\u4e0d\u77e5\u9053\u600e\u4e48\u4f18\u5316\u4e86~~\uff0c\u6211\u4eec\u9700\u8981\u60f3\u522b\u7684\u529e\u6cd5\u3002\u89c2\u5bdf\u6240\u6709\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u5982\u679c\u4ee5$k$\u5929\u4e3a\u5355\u4f4d\uff0c\u53ef\u4ee5\u53d1\u73b0\u8f6c\u79fb\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u60f3\u5230\u6784\u9020\u77e9\u9635\u8fdb\u884c\u4f18\u5316\u3002\u5bf9\u4e8e\u5236\u5b9a\u4e86$k$\u5929\u7684\u83dc\u8c31\uff0c\u6bcf\u4e00\u5929\u90fd\u82b1$q$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6784\u9020\u4e00\u4e2a$2^m\u00d72^m$\u8f6c\u79fb\u77e9\u9635\uff0c\u5148\u5c06\u8fd9$k$\u5929\u7684\u77e9\u9635\u4e58\u8d77\u6765\uff0c\u7136\u540e\u6c42\u4e58\u5b8c\u540e\u77e9\u9635\u7684$\\left\\lfloor\\frac{n}{k}\\right\\rfloor$\u6b21\u65b9\uff0c\u5bf9\u4e8e\u5269\u4f59\u7684$n{\\ \\rm mod\\ }k$\u5929\uff0c\u56e0\u4e3a\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684$k$\u5929\uff0c\u6240\u4ee5\u5728\u4e4b\u524d\u5408\u5e76\u77e9\u9635\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e0b\u524d$n{\\ \\rm mod\\ }k$\u5929\u7684\u77e9\u9635\u5408\u5e76\u540e\u7684\u6837\u5b50\uff0c\u6700\u540e\u518d\u5c06\u8bb0\u5f55\u7684\u77e9\u9635\u4e58\u4e0a\u53bb\uff0c\u5c06\u6240\u6709\u65b9\u6848\u7d2f\u52a0\u5c31\u662f\u7b54\u6848\u3002\n\n\u9884\u5904\u7406\u65f6\u95f4\u590d\u6742\u5ea6$O(kq+k2^{3m})$\uff0c\u8f6c\u79fb\u65f6\u95f4\u590d\u6742\u5ea6$O(2^{3m}log\\left\\lfloor\\frac{n}{k}\\right\\rfloor+2^{2m})$\uff0c\u671f\u671b\u5f97\u5206\uff1a$70$\u5206\u3002\n\n~~\u5b9e\u9645\u4e0a\u52a0\u4e2a\u5faa\u73af\u5c55\u5f00\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002~~\n\n#### \u7b97\u6cd55\uff1a\n\n\u7531\u4e8e\u5408\u5e76\u77e9\u9635\u7684\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u6211\u4eec\u5f97\u6362\u4e00\u79cd\u65b9\u5f0f\u6784\u9020\u4e00\u4e2a\u5468\u671f\u7684\u8f6c\u79fb\u77e9\u9635\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528$\\rm DP$\u6784\u9020\uff0c\u6211\u4eec\u679a\u4e3e\u5f00\u5934\u90a3\u4e00\u5929\u7684\u6240\u6709\u60c5\u51b5$S$\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u60c5\u51b5$S$\u5355\u72ec\u8fdb\u884c\u4e00\u6b21$k$\u5929\u7684\u7b97\u6cd5$4$\u7684$\\rm DP$\uff0c\u8fd9\u6837\u5c31\u80fd\u6c42\u51fa\u5f53\u72b6\u6001\u4e3a$S$\u7684\u65f6\u5019\uff0c\u7ecf\u8fc7$k$\u5929\u540e\u80fd\u5bf9\u54ea\u4e9b\u72b6\u6001\u6709\u8d21\u732e\u4e14\u8d21\u732e\u4e3a\u591a\u5c11\uff0c\u8fd9\u6837\u80fd\u5728$O(k2^mq)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6784\u9020\u51fa\u8f6c\u79fb\u77e9\u9635\uff0c\u5bf9\u4e8e\u5269\u4e0b\u7684$n{\\ \\rm mod\\ }k$\u5929\uff0c\u5728$\\rm DP$\u4e2d\u9014\u8bb0\u5f55\u4e00\u4e0b\u53ea\u8f6c\u79fb$n{\\ \\rm mod\\ }k$\u5929\u7684\u77e9\u9635\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5728\u6700\u540e\u518d\u4e58\u4e0a\u5b83\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u7b54\u6848\u3002\n\n\u9884\u5904\u7406\u65f6\u95f4\u590d\u6742\u5ea6$O(k2^mq)$\uff0c\u8f6c\u79fb\u65f6\u95f4\u590d\u6742\u5ea6$O(2^{3m}log\\left\\lfloor\\frac{n}{k}\\right\\rfloor+2^{2m})$\uff0c\u671f\u671b\u5f97\u5206\uff1a$100$\u5206\u3002\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nconst int N=130,M=310,mod=1e9+7;\nint n,m,k,S,l1,l2,out,have[M],ans[N];\nint tran[N][N],tem[N][N],day[N][N],dp[2][N];\nvoid merge1()\n{\n    memset(tem,0,sizeof(tem));\n    for(int i=1;i<=S;i++)\n     for(int j=1;j<=S;j++)\n      for(int p=1;p<=S;p++)\n       (tem[i][j]+=1ll*tran[i][p]*tran[p][j]%mod)%=mod;\n    for(int i=1;i<=S;i++)\n     for(int j=1;j<=S;j++)\n      tran[i][j]=tem[i][j];\n}\nvoid merge2()\n{\n    memset(tem[0],0,sizeof(tem[0]));\n    for(int i=1;i<=S;i++)\n     for(int j=1;j<=S;j++)\n      (tem[0][i]+=1ll*ans[j]*tran[j][i]%mod)%=mod;\n    for(int i=1;i<=S;i++)\n     ans[i]=tem[0][i];\n}\nvoid merge3()\n{\n    memset(tem[0],0,sizeof(tem[0]));\n    for(int i=1;i<=S;i++)\n     for(int j=1;j<=S;j++)\n      (tem[0][i]+=1ll*ans[j]*day[j][i]%mod)%=mod;\n    for(int i=1;i<=S;i++)\n     ans[i]=tem[0][i];\n}\nvoid power(int p)\n{\n    for(;p;p>>=1,merge1())\n     if(p&1)merge2();\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&k);S=(1<<m)-1;\n    for(int i=1;i<=k;i++)\n    {\n        scanf(\"%d\",&l1);\n        for(int j=1;j<=l1;j++)\n        {\n            scanf(\"%d\",&l2);\n            have[i]|=1<<(l2-1);\n        }\n    }\n    for(int i=have[1];i;i=(i-1)&have[1])\n    {\n        int now=0;\n\t\tmemset(dp,0,sizeof(dp));dp[now][i]=1;\n        for(int j=2;j<=k;j++)\n        {\n            memset(dp[now^1],0,sizeof(dp[now^1]));\n            for(int p=have[j];p;p=(p-1)&have[j])\n             for(int q=(have[j-1]|p)^p;q;q=(q-1)&((have[j-1]|p)^p))\n              (dp[now^1][p]+=dp[now][q])%=mod;\n            now^=1;if((n-1)%k==j-1)\n             for(int p=1;p<=S;p++)\n              day[i][p]=dp[now][p];\n        }\n        memset(dp[now^1],0,sizeof(dp[now^1]));\n        for(int p=have[1];p;p=(p-1)&have[1])\n         for(int q=(have[k]|p)^p;q;q=(q-1)&((have[k]|p)^p))\n          (dp[now^1][p]+=dp[now][q])%=mod;\n        now^=1;for(int j=1;j<=S;j++)\n         tran[i][j]=dp[now][j];\n    }\n    for(int i=have[1];i;i=(i-1)&(have[1]))ans[i]=1;\n    power((n-1)/k);if((n-1)%k!=0)merge3();\n    for(int i=1;i<=S;i++)(out+=ans[i])%=mod;\n    printf(\"%d\\n\",out);\n    return 0;\n}\n```\n\n\u987a\u4fbf\u5410\u69fd\u6d1b\u8c37\u7684$\\rm O2$\u597d\u731b...",
        "postTime": 1539325796,
        "uid": 61423,
        "name": "hdxrie",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4982 \u3010\u89c4\u5212\u3011"
    }
]