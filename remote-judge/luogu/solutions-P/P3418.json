[
    {
        "content": "\u3010POI\u8865\u5168\u8ba1\u5212#2 POI2005 PUN\u3011\n\n\u5148\u8bf4\u9898\u76ee\u5927\u610f\uff1a\n\n\u7ed9\u5b9a\u4e24\u4e2a\u70b9\u96c6\uff0c\u5224\u65ad\u662f\u5426\u76f8\u4f3c\uff0c\u76f8\u4f3c\u8f93\u51faTAK\uff0c\u4e0d\u76f8\u4f3c\u8f93\u51faNIE\n\n\u76f8\u4f3c\u7684\u5b9a\u4e49\u662f\u53ef\u4ee5\u7ecf\u8fc7\u56db\u79cd\u64cd\u4f5c\u540e\u91cd\u5408\uff08\u5e73\u79fb\uff0c\u65cb\u8f6c\uff0c\u7ffb\u8f6c\uff0c\u9632\u7f29\uff09\n\n\u591a\u7ec4\u6570\u636e\uff08\u5177\u4f53\u8f93\u5165\u65b9\u5f0f\u89c1\u9898\u76ee\uff09\n\n\n----------------\u9898\u89e3\u5206\u5272\u7ebf-------------------\n\n\n\u8fd9\u9898\u672c\u6765\u662f\u4e2a\u5f88\u6c34\u7684\u9898\uff0c\u4f46\u662f\u5361\u6211\u7cbe\u5ea6\u5361\u4e86\u597d\u4e45\u3002\u3002\u53ef\u80fd\u662f\u6211\u592a\u83dc\u4e86\u3002\u3002\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u627e\u5230\u70b9\u96c6\u7684\u91cd\u5fc3\uff08\u6240\u6709\u70b9\u52a0\u8d77\u6765\u9664\u4ee5\u70b9\u7684\u4e2a\u6570\uff09\uff0c\n\n\u7136\u540e\u5c06\u6240\u6709\u70b9\u6807\u51c6\u5316\u81f3\u3010\u6700\u957f\u7684\u7ebf\u6bb5\u957f\u5ea6\u4e3a1\uff0c\u91cd\u5fc3\u5728\u539f\u70b9\u4e0a\u3011\n\n\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u5e73\u79fb\u548c\u9632\u7f29\u7684\u95ee\u9898\n\n\u63a5\u4e0b\u6765\u5bf9\u6781\u89d2\u6392\u5e8f\u540e\u5dee\u5206\u4e00\u4e0b\uff08**\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a\u957f\u5ea6**\uff09\n\n\u6700\u540e\u7531\u4e8e\u5706\u4e0a\u7684\u6574\u70b9\u4e2a\u6570\u6bd4\u8f83\u5c11\uff0c\u53ea\u9700\u8981\u66b4\u529b\u5224\u65ad\u5176\u4e2d\u4e00\u4e2a\u70b9\u96c6\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u65cb\u8f6c/\u7ffb\u8f6c\u540e\u7684\u7ed3\u679c\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981KMP\n\n**\u6ce8\u610f\u8981\u7279\u5224\u6709\u53ef\u80fd\u6709\u70b9\u548c\u91cd\u5fc3\u91cd\u5408**\n\n**\u6ce8\u610f\u4efb\u4f55\u53ef\u80fd\u4f1a\u88ab\u5361\u7cbe\u5ea6\u7684\u5730\u65b9**\n\n\u798f\u5229\uff1a[\u539f\u9898\u5730\u5740](http://oi.edu.pl/old/php/show.php?ac=e180702)\n\n\u8d34\u4ee3\u7801\u65f6\u95f4\uff08\u4e0d\u8981\u5410\u69fd\u6211\u4e0d\u5c0f\u5fc3\u9762\u5411\u5bf9\u8c61\u4e86QWQ\uff09\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nconst double eps=1e-10,PI=3.1415926535897932384626;\nconst int MAXN=25050;\nstruct point\n{\n    double x,y;\n    inline point(){}\n    inline point(double xx,double yy){x=xx,y=yy;}\n    inline point(const point &p){x=p.x,y=p.y;}\n    inline point operator=(const point &p){x=p.x,y=p.y;return *this;}\n    inline point operator+(const point &p)const{return point(x+p.x,y+p.y);}\n    inline point operator+=(const point &p){return *this=*this+p;}\n    inline point operator-(const point &p)const{return point(x-p.x,y-p.y);}\n    inline point operator-=(const point &p){return *this=*this-p;}\n    inline double operator*(const point &p)const{return x*p.x+y*p.y;}\n    inline point operator/(const double &n)const{return point(x/n,y/n);}\n    inline point operator/=(const double &n){return *this=*this/n;}\n    inline bool operator==(const point &p)const{return abs(x-p.x)<eps&&abs(y-p.y)<eps;}\n}set1[MAXN],set2[MAXN];\nstruct atom\n{\n    double len,deg;\n    inline bool operator==(const atom &a)const\n    {\n        return abs(len-a.len)<eps&&abs(deg-a.deg)<eps;\n    }\n    inline bool operator!=(const atom &a)const\n    {\n        return !(*this==a);\n    }\n    inline bool operator<(const atom &a)const\n    {\n        return abs(deg-a.deg)<eps?len<a.len:deg<a.deg;\n    }\n}revarr1[MAXN],arr1[MAXN],arr2[MAXN];\ninline bool cmp(const atom &a,const atom &b)\n{\n    return a.len<b.len;\n}\ninline bool cmp2(const atom &a,const atom &b)\n{\n    return abs(a.deg-b.deg)<eps?a.len<b.len:a.deg>b.deg;\n}\ninline double sqr(const double &x){return x*x;}\ninline bool match(const atom arr1[],const atom arr2[],int len)\n{\n    static int tt=0;\n    ++tt;\n    for(int delta=0;delta<len;delta++)\n    {\n        bool flag=true;\n        for(int i=1;i<=len;i++)\n        {\n            if(arr1[i]!=arr2[(i+delta-1)%len+1])\n            {\n                flag=false;\n                break;\n            }\n        }\n        if(flag)return true;\n    }\n    return false;\n}\nint main()\n{\n    int n,t,n2;\n    bool havecenter=false,havecenter2;\n    scanf(\"%d\",&n);\n    point c1(0,0);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%lf%lf\",&set1[i].x,&set1[i].y);\n        c1+=set1[i];\n    }\n    c1/=n;\n    for(int i=1;i<=n;i++)\n    {\n        if(!havecenter)set1[i]-=c1;\n        else set1[i]=set1[i+1]-c1;\n        if(set1[i]==point(0,0))\n        {\n            havecenter=true;\n            n--;i--;\n            continue;\n        }\n        arr1[i].len=sqrt(sqr(set1[i].x)+sqr(set1[i].y));\n        arr1[i].deg=acos(set1[i].x/arr1[i].len);\n        if(set1[i].y<0)arr1[i].deg=2*PI-arr1[i].deg;\n    }\n    sort(arr1+1,arr1+n+1,cmp);\n    double maxlen=arr1[n].len;\n    for(int i=1;i<=n;i++)\n    {\n        arr1[i].len/=maxlen;\n        revarr1[i]=arr1[i];\n    }\n    sort(arr1+1,arr1+n+1);\n    sort(revarr1+1,revarr1+n+1,cmp2);\n    double maxdeg=arr1[n].deg;\n    for(int i=n;i>=2;i--)\n    {\n        revarr1[n-i+2].deg=(arr1[i].deg-=arr1[i-1].deg);\n    }\n    revarr1[1].deg=arr1[1].deg+=2*PI-maxdeg;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        havecenter2=false;\n        scanf(\"%d\",&n2);\n        for(int i=1;i<=n2;i++)\n        {\n            scanf(\"%lf%lf\",&set2[i].x,&set2[i].y);\n        }\n        point c2(0,0);\n        for(int i=1;i<=n2;i++)\n        {\n            c2+=set2[i];\n        }\n        c2/=n2;\n        for(int i=1;i<=n2;i++)\n        {\n            if(!havecenter2)set2[i]-=c2;\n            else set2[i]=set2[i+1]-c2;\n            if(set2[i]==point(0,0))\n            {\n                havecenter2=true;\n                n2--;i--;\n                continue;\n            }\n            arr2[i].len=sqrt(sqr(set2[i].x)+sqr(set2[i].y));\n            arr2[i].deg=acos(set2[i].x/arr2[i].len);\n            if(set2[i].y<0)arr2[i].deg=2*PI-arr2[i].deg;\n        }\n        if(n2!=n)\n        {\n            printf(\"NIE\\n\");\n            continue;\n        }\n        else if(n==0)\n        {\n            printf(\"TAK\\n\");\n            continue;\n        }\n        sort(arr2+1,arr2+n2+1,cmp);\n        double maxlen=arr2[n2].len;\n        for(int i=1;i<=n2;i++)\n        {\n            arr2[i].len/=maxlen;\n        }\n        sort(arr2+1,arr2+n2+1);\n        double maxdeg=arr2[n2].deg;\n        for(int i=n2;i>=2;i--)\n        {\n            arr2[i].deg-=arr2[i-1].deg;\n        }\n        arr2[1].deg+=2*PI-maxdeg;\n        bool f1=match(arr1,arr2,n),f2=match(revarr1,arr2,n);\n        if(havecenter==havecenter2&&(f1||f2))printf(\"TAK\\n\");\n        else printf(\"NIE\\n\");\n    }\n    return 0;\n}\n```",
        "postTime": 1505064394,
        "uid": 3346,
        "name": "oscar",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3418 \u3010[POI2005]PUN-Points\u3011"
    }
]