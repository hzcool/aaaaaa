[
    {
        "content": "\u7ecf\u5178\u7684\u5e26\u4fee\u6811\u94fe\u7b2ck\u5927\u95ee\u9898\u3002\n\n\u5148\u8bf4\u8bf4\u51e0\u79cd\u9053\u542c\u9014\u8bf4\u7684\u505a\u6cd5:\n\n1\u3001\u6811\u5256+\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff0c\u67e5\u8be2\u65f6\u9700\u8981\u4e8c\u5206\u7b54\u6848\u3002\n\n\u590d\u6742\u5ea6\u8fbe\u5230\u4e86\u60ca\u4eba\u76844\u4e2alog\uff0c\u66f4\u60ca\u4eba\u7684\u662f\u636e\u8bf4\u59a5\u59a5\u80fd\u8fc7\u3002\uff08\u5b9e\u5728\u61d2\u5f97\u5199\u5199\u8bd5\u8bd5\u4e86qwq\uff09\n\n2\u3001\u6811\u5256+\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff08\u6216\u8005\u6811\u72b6\u6570\u7ec4\u5957trie\u4e4b\u7c7b\u7684\uff09\uff0c\u8fd9\u6837\u597d\u5904\u5728\u4e8e\uff1a\u4e3b\u5e2d\u6811\u5929\u751f\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u7b2ck\u5927\u800c\u4e0d\u7528\u50cf\u5e73\u8861\u6811\u90a3\u6837\u4e8c\u5206\u7b54\u6848\u3002\n\n\uff08\u770b\u4f3c\u5e73\u8861\u6811\u53ef\u4ee5\u76f4\u63a5\u6c42\u7b2ck\u5927\uff0c\u5b9e\u9645\u4e0a\u8fd9\u6837\u6ca1\u6cd5\u5408\u5e76\u591a\u68f5\u5e73\u8861\u6811\u7684\u7b54\u6848\uff0c\u5fc5\u987b\u5f97\u4e8c\u5206\uff0c\u800c\u4e3b\u5e2d\u6811\u4e0d\u7528\u3002\uff09\n\n\u603b\u4e4b\u5c31\u662f\u7528\u6811\u5256\u82b11\u4e2alog\u7684\u4ee3\u4ef7\u628a\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u6210\u5e8f\u5217\u95ee\u9898\uff0c\u7136\u540e\u505a\u6cd5\u5c31\u591a\u79cd\u591a\u6837\u4e86\u3002\n\n\u8fd9\u6837\u662f3\u4e2alog\u7684\uff0c\u540c\u6837\u80fd\u8fc7\u3002\n\n\u7136\u540e\u5c31\u662f\u6211\u5199\u7684\u505a\u6cd5\uff1a\u76f4\u63a5\u5199\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u3002\n\n\u524d\u9762\u51e0\u79cd\u505a\u6cd5\u90fd\u907f\u4e0d\u5f00\u6811\u5256\u8fd9\u4e00\u73af\uff0c\u5982\u679c\u80fd\u7701\u53bb\u8fd9\u4e00\u6b65\u7684\u8bdd\u5c31\u80fd\u505a\u5230\u66f4\u4f18\u7684\u590d\u6742\u5ea6\u3002\n\n\u8003\u8651\u4e0d\u5e26\u4fee\u7684\u6811\u94fe\u7b2ck\u5927\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u67e5\u8be24\u6761\u94fe\uff1a\u6839\u5230u\u7684\u7b54\u6848+\u6839\u5230v\u7684\u7b54\u6848-\u6839\u5230lca\u7684\u7b54\u6848-\u6839\u5230lca\u7236\u4eb2\u7684\u7b54\u6848\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u50cf\u5e8f\u5217\u4e0a\u90a3\u6837\u5efa\u51fa\u524d\u7f00\u4e3b\u5e2d\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e3b\u5e2d\u6811\u5b58\u50a8\u7684\u662f\u6839\u5230\u5b83\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u7136\u540e\u540c\u65f6\u67e5\u8be24\u68f5\u4e3b\u5e2d\u6811\u5c31\u884c\u4e86\u3002\n\n\u7136\u800c\u8fd9\u6837\u7684\u8bdd\u4fee\u6539\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4f1a\u5f71\u54cd\u5230\u5b83\u7684\u5b50\u6811\u5185\u6240\u6709\u7684\u8282\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u5f97\u4e0d\u66b4\u529b\u4fee\u6539O\uff08n\uff09\u68f5\u4e3b\u5e2d\u6811\u3002\n\n\u4e0d\u8fc7\u65e2\u7136\u4e00\u4e2a\u70b9\u7684\u4fee\u6539\u53ea\u4f1a\u5bf9\u5b50\u6811\u5185\u7684\u8282\u70b9\u4ea7\u751f\u6574\u4f53\u5f71\u54cd\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ef4\u62a4dfs\u5e8f\uff0c\u56e0\u4e3a\u4e00\u68f5\u5b50\u6811\u5728dfs\u5e8f\u4e0a\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u6240\u4ee5\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1adfs\u5e8f\u4e0a\u7684\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u3002\u8fd9\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n\u5177\u4f53\u64cd\u4f5c\u662f\uff1a\u628a\u6240\u6709\u7684\u4e3b\u5e2d\u6811\u8fdb\u884c\u5dee\u5206\uff0c\u5dee\u5206\u540e\u6bcf\u68f5\u4e3b\u5e2d\u6811\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u503c\u76f8\u5f53\u4e8e\u539f\u6765\u5b83\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c-\u539f\u6765\u5b83\u5728dfs\u5e8f\u4e0a\u7684\u524d\u4e00\u68f5\u4e3b\u5e2d\u6811\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u4ea7\u751f\u8d1f\u6570\u4e0d\u8fc7\u6211\u4eec\u4e0d\u7528\u7ba1\u3002\n\n\u4fee\u6539\u65f6\u5c31\u662f\u628a\u533a\u95f4\u4fee\u6539\u8f6c\u5316\u6210\u4e24\u4e2a\u5355\u70b9\u4fee\u6539\uff0c\u67e5\u8be2\u65f6\u4e00\u6b21\u6027\u67e5\u8be24\u6761\u94fe\u5bf9\u5e94\u7684\u524d\u7f00\u4e3b\u5e2d\u6811\u3002\n\n\u4e8e\u662f\u8fd9\u4e2a\u9898\u53d8\u6210\u4e86\u4e24\u4e2alog\u3002\n\n\uff08\u4e0d\u8fc7\u636e\u8bf4\u8fd9\u4e2a\u9898\u67091\u4e2alog\u7684\u795e\u5947\u89e3\u6cd5\uff0c\u4e0d\u8fc7\u6211\u4e0d\u4f1a\u554aqwq\uff09\n\n\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n//ctsc2008 network:\u6811\u4e0a\u5e26\u4fee\u94fe\u4e0a\u7b2ck\u5927\n#include<bits/stdc++.h>\nusing namespace std;\n#define gc getchar()\n#define pc putchar\n#define f(i) st[0][i]\n#define md int mid = l + r >> 1\n#define ln t[q].ls,l,mid\n#define rn t[q].rs,mid + 1,r\n#define md int mid = l + r >> 1\nint r(){\n\tint x = 0;\n\tchar c;\n\tc = gc;\n\twhile(!isdigit(c)) c = gc;\n\twhile(isdigit(c)){\n\t\tx = (x << 1) + (x << 3) + c - '0';\n\t\tc = gc;\n\t}\n\treturn x;\n}\nvoid p(int q){\n\tif(q >= 10) p(q / 10);\n\tpc(q % 10 + '0');\n}\nint n,m;\nstruct edge{\n\tint to,nxt;\n}e[200010];\nint fir[100010],cnt;\nvoid ins(int u,int v){\n\te[++cnt].to = v;e[cnt].nxt = fir[u];fir[u] = cnt;\n\te[++cnt].to = u;e[cnt].nxt = fir[v];fir[v] = cnt;\n}\nstruct qry{\n\tint k,u,v;\n}b[100010];\nstruct lsh{\n\tint a,id;\n\tbool bh;\n}l[200010];\nint ct,ct2,mx;\nint dy[200010];\nint fsts[100010],nxt[100010],dpt[100010],a[100010],st[20][100010];\nint dfsx[100010],wz[100010],nw,sz[100010];\nvoid dfs(int q){//\u6253\u51fadfs\u5e8f \n\tdfsx[++nw] = q;\n\twz[q] = nw;\n\tsz[q] = 1;\n\tfor(int i = fir[q];i;i = e[i].nxt){\n\t\tint j = e[i].to;\n\t\tif(f(q) == j) continue;\n\t\tf(j) = q;\n\t\tnxt[j] = fsts[q];\n\t\tfsts[q] = j;\n\t\tdpt[j] = dpt[q] + 1;\n\t\tdfs(j);\n\t\tsz[q] += sz[j];\n\t}\n}\ninline void buildst(){\n\tfor(register int i = 1;i <= 17;++i){\n\t\tfor(register int j = 1;j <= n;++j) st[i][j] = st[i - 1][st[i - 1][j]];\n\t}\n} \nbool cp(lsh q,lsh w){\n\treturn q.a < w.a;\n}\nint lca(int u,int v){\n\tif(dpt[u] < dpt[v]) swap(u,v);\n\tint z = dpt[u] - dpt[v],i = 0;\n\twhile(z){\n\t\tif(z & 1) u = st[i][u];\n\t\tz >>= 1;\n\t\t++i;\n\t}\n\tif(u == v) return u;\n\tfor(i = 17;i >= 0;--i){\n\t\tif(st[i][u] == st[i][v]) continue;\n\t\tu = st[i][u];\n\t\tv = st[i][v];\n\t}\n\treturn f(u);\n}\nint rt[100010];\nstruct tree{\n\tint a,ls,rs;\n}t[20000010];\nvoid mdf(int &q,int l,int r,int x,int fx){//\u5bf9\u4e00\u68f5\u4e3b\u5e2d\u6811\u8fdb\u884c\u4fee\u6539 \n\tif(!q) q = ++ct;\n\tt[q].a += fx;\n\tif(l == r) return;\n\tmd;\n\tif(x <= mid) mdf(ln,x,fx);\n\telse mdf(rn,x,fx);\n}\nvoid xg(int q,int x,int fx){//\u4e00\u4e2a\u5355\u70b9\u4fee\u6539\u64cd\u4f5c \n\tfor(int i = q;i <= n;i += (i & -i)) mdf(rt[i],1,mx,x,fx);\n}\nint now[100010];\nint ts[100010],ft;\nbool vst[100010];\nint cx(int u,int v,int w,int p,int x){//\u67e5\u8be2\u64cd\u4f5c\uff0c\u6ce8\u610f4\u6761\u94fe\u7684\u8d21\u732e\u662fu + v - w - p\n\tint i;\n\tft = 0;\n\tfor(i = u;i;i -= (i & -i)) {\n\t\tif(vst[i]) continue;\n\t\tts[++ft] = i;\n\t\tvst[i] = 1;\n\t}\n\tfor(i = v;i;i -= (i & -i)) {\n\t\tif(vst[i]) continue;\n\t\tts[++ft] = i;\n\t\tvst[i] = 1;\n\t}\n\tfor(i = w;i;i -= (i & -i)) {\n\t\tif(vst[i]) continue;\n\t\tts[++ft] = i;\n\t\tvst[i] = 1;\n\t}\n\tfor(i = p;i;i -= (i & -i)) {\n\t\tif(vst[i]) continue;\n\t\tts[++ft] = i;\n\t\tvst[i] = 1;\n\t}//\u63d0\u524d\u5b58\u4e00\u4e0b4\u6761\u94fe\u4f1a\u7ecf\u8fc7\u7684\u6811\u72b6\u6570\u7ec4\u8282\u70b9\u7684\u96c6\u5408\u4fbf\u4e8e\u5904\u7406 \n\tfor(i = 1;i <= ft;++i) now[ts[i]] = rt[ts[i]];\n\tint l = 1,r = mx,mid,as;\n\twhile(l < r){\n\t\tmid = l + r >> 1;\n\t\tas = 0;\n\t\tfor(i = u;i;i -= (i & -i)) as += t[t[now[i]].ls].a;\n\t\tfor(i = v;i;i -= (i & -i)) as += t[t[now[i]].ls].a;\n\t\tfor(i = w;i;i -= (i & -i)) as -= t[t[now[i]].ls].a;\n\t\tfor(i = p;i;i -= (i & -i)) as -= t[t[now[i]].ls].a;\n\t\tif(as >= x){\n\t\t\tfor(i = 1;i <= ft;++i) now[ts[i]] = t[now[ts[i]]].ls;\n\t\t\tr = mid;\n\t\t} \n\t\telse{\n\t\t\tx -= as;\n\t\t\tfor(i = 1;i <= ft;++i) now[ts[i]] = t[now[ts[i]]].rs;\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\tfor(i = 1;i <= ft;++i) vst[ts[i]] = 0;\n\treturn l;\n}\nvoid init(){//\u521d\u59cb\u5316 \n\tfor(int i = 1;i <= n;++i){\n\t\txg(wz[i],a[i],1);\n\t\txg(wz[i] + sz[i],a[i],-1);\n\t}\n}\nint main(){\n\tint k,u,v,i,w;\n\tn = r();\n\tm = r();\n\tfor(i = 1;i <= n;++i) {\n\t\ta[i] = r();\n\t\tl[++ct2].a = a[i];\n\t\tl[ct2].\tbh = 0;\n\t\tl[ct2].id = i;\n\t}\n\tfor(i = 1;i < n;++i){\n\t\tu = r();\n\t\tv = r();\n\t\tins(u,v);\n\t}\n\t//\u4ee5\u4e0b\u662f\u79bb\u6563\u5316\u90e8\u5206\uff0c\u4e0d\u8fc7\u4e0d\u79bb\u6563\u5316\u5e94\u8be5\u4e5f\u884c \n\tfor(i = 1;i <= m;++i){\n\t\tb[i].k = r();\n\t\tb[i].u = r();\n\t\tb[i].v = r();\n\t\tif(b[i].k) continue;\n\t\tl[++ct2].a = b[i].v;\n\t\tl[ct2].bh = 1;\n\t\tl[ct2].id = i;\n\t}\n\tsort(l,l + ct2 + 1,cp);\n\tl[0].a = -1;\n\tfor(i = 1;i <= ct2;++i){\n\t\tif(l[i].a != l[i - 1].a) ++mx;\n\t\tif(!l[i].bh) a[l[i].id] = mx;\n\t\telse b[l[i].id].v = mx;\n\t\tdy[mx] = l[i].a;\n\t}\n\tdfs(1);\n\tbuildst();\n\tinit();\n\tfor(i = 1;i <= m;++i){\n\t\tu = b[i].u,v = b[i].v,k = b[i].k;\n\t\tif(!k){\n\t\t\txg(wz[u],a[u],-1);\n\t\t\txg(wz[u] + sz[u],a[u],1);\n\t\t\ta[u] = v;\n\t\t\txg(wz[u],a[u],1);\n\t\t\txg(wz[u] + sz[u],a[u],-1);\n\t\t}\n\t\telse{\n\t\t\tw = lca(u,v);\n\t\t\tk = dpt[u] + dpt[v] - 2 * dpt[w] - k + 2;//\u8fd9\u91cc\u628a\u7b2ck\u5927\u53d8\u6210\u4e86\u7b2ck\u5c0f \n\t\t\tif(k <= 0){\n\t\t\t\tprintf(\"invalid request!\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\t\n\t\t\tp(dy[cx(wz[u],wz[v],wz[w],wz[f(w)],k)]);\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1520170234,
        "uid": 45775,
        "name": "liuzhangfeiabc",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406Network\u3011"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u3002](https://www.cnblogs.com/DRPLANT/p/P4175_solution.html)\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[P2633 Count on a tree](https://www.luogu.com.cn/problem/P2633) & [P2617 Dynamic Rankings](https://www.luogu.com.cn/problem/P2617) \u3002\u5982\u679c\u5bf9\u672c\u9898\u4e00\u70b9\u601d\u8def\u90fd\u6ca1\u6709\u7684\u8bdd\u5efa\u8bae\u5148\u505a\u4ee5\u4e0a\u4e24\u9898\u3002\n\n---\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u5728\u5e8f\u5217\u4e0a\u5b9e\u73b0\u672c\u9898\u64cd\u4f5c\uff0c\u5373\u5355\u70b9\u4fee\u6539\u533a\u95f4 kth\u3002\u5982\u679c\u4e0d\u8003\u8651\u4fee\u6539\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u7528\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u505a\u3002\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u5b9e\u73b0\u4fee\u6539\u64cd\u4f5c\u3002\u5982\u679c\u66b4\u529b\u5730\u505a\uff0c\u5219\u8981\u5bf9\u540e\u7f00\u4e2d\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8fdb\u884c\u4fee\u6539\uff0c\u5fc5 T\u3002\u6240\u4ee5\u8981\u5bf9\u6b64\u8fdb\u884c\u4f18\u5316\u3002\n\n\u56de\u60f3\u4e00\u4e0b [\u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 2](https://www.luogu.com.cn/problem/P3834)\u3002\u8fd9\u9053\u9898\u6211\u4eec\u5728\u67e5\u8be2 $[l, r]$ \u65f6\u5e76\u4e0d\u5355\u72ec\u5728\u67d0\u68f5\u7ebf\u6bb5\u6811\u4e0a\u9762\u8dd1\uff0c\u800c\u662f\u5c06 $r$ \u548c $l-1$ \u7684\u4e24\u68f5\u7ebf\u6bb5\u6811\u76f8\u51cf\u3002\u628a\u6bcf\u68f5\u7ebf\u6bb5\u6811\u5f53\u505a\u4e00\u4e2a\u8bb0\u5f55\u4ece 1 \u5230 $i$ \u8fd9\u4e2a\u524d\u7f00\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u7684\u96c6\u5408\uff0c\u8bb0\u4f5c $precnt_i$\u3002\u628a $[l, r]$ \u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u7684\u96c6\u5408\u8bb0\u4f5c $cnt(l,r)$\uff0c\u5219 $cnt(l,r)=precnt_r-precnt_{l-1}$\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u79cd\u5f62\u5f0f\u5c31\u662f\u67e5\u8be2\u524d\u7f00\u548c\u518d\u5dee\u5206\u5f97\u5230\u7b54\u6848\u3002\u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u5728\u5355\u70b9\u4fee\u6539\u548c\u67e5\u8be2\u524d\u7f00\u548c\u4e0a\u6709\u7740\u4f18\u79c0\u7684\u590d\u6742\u5ea6\u548c\u5e38\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u7ebf\u6bb5\u6811\u5957\u5728 BIT \u91cc\u9762\u3002\u5177\u4f53\u5730\uff0c\u5373\u6bcf\u4e2a BIT \u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\uff08\u52a8\u6001\u5f00\u70b9\uff09\u7ebf\u6bb5\u6811\u7684\u6839\u3002\n\n\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u6bcf\u6b21\u4fee\u6539\u65f6\u4f7f\u7528\u7c7b\u4f3c BIT \u7684\u65b9\u5f0f\uff0c\u5728 $\\log$ \u68f5\u7ebf\u6bb5\u6811\u4e0a\u66f4\u65b0\u3002\u67e5\u8be2\u65f6\u540c\u6837\u7c7b\u4f3c\u6811\u72b6\u6570\u7ec4\uff0c\u9996\u5148\u8bb0\u4e0b $l-1$ \u548c $r$ \u5404\u81ea\u5bf9\u5e94\u7684 $\\log$ \u68f5\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u8ba1\u7b97\u65f6\u7528\u6240\u6709 $r$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u51cf\u53bb\u6240\u6709 $l-1$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log^2 n)$\u3002\n\n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\u3002\uff08\u4e3a [P2617 Dynamic Rankings](https://www.luogu.com.cn/problem/P2617) \u4ee3\u7801\u7247\u6bb5\u3002\uff09\n\n```cpp\n// \u8fd9\u4e2a\u4ee3\u7801\u73b0\u5728\u770b\u6765\u592a\u5c4e\u5c71\u4e86\u3002\u4f46\u6211\u61d2\u5f97\u91cd\u6784\u4e86\uff0c\u80fd\u8fc7\u5c31\u884c\u3002\nint query(vector<int> &r1, vector<int> &r2, int k, int left, int right) {\n  int mid = (left + right) >> 1;\n  if (left == right)\n    return left;\n  int left_val = 0;\n  for (int it : r1)  //\u7528\u6240\u6709 r \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7684\u5f53\u524d\u8282\u70b9\u7684\u5de6\u513f\u5b50\u51cf\u53bb l-1 \u5bf9\u5e94\u7684\n    left_val -= (segTree[it].lson != -1 ? segTree[segTree[it].lson].val : 0);\n  for (int it : r2)\n    left_val += (segTree[it].lson != -1 ? segTree[segTree[it].lson].val : 0);\n  if (left_val >= k) {\n    for (int &it : r1) {\n      if (segTree[it].lson == -1) {\n        int new_id       = new_node();\n        segTree[it].lson = new_id;\n      }\n      it = segTree[it].lson;\n    }\n    for (int &it : r2) {\n      if (segTree[it].lson == -1) {\n        int new_id       = new_node();\n        segTree[it].lson = new_id;\n      }\n      it = segTree[it].lson;\n    }\n    return query(r1, r2, k, left, mid);\n  } else {\n    for (int &it : r1) {\n      if (segTree[it].rson == -1) {\n        int new_id       = new_node();\n        segTree[it].rson = new_id;\n      }\n      it = segTree[it].rson;\n    }\n    for (int &it : r2) {\n      if (segTree[it].rson == -1) {\n        int new_id       = new_node();\n        segTree[it].rson = new_id;\n      }\n      it = segTree[it].rson;\n    }\n    return query(r1, r2, k - left_val, mid + 1, right);\n  }\n}\n\nvoid update(int r, int id, int up, int left, int right) {\n  if (left == id && right == id) {\n    segTree[r].val += up;\n    return;\n  }\n  int mid = (left + right) >> 1;\n  if (id <= mid) {\n    if (segTree[r].lson == -1) {\n      int new_id = new_node();\n      segTree[r].lson = new_id;\n    }\n    update(segTree[r].lson, id, up, left, mid);\n  } else {\n    if (segTree[r].rson == -1) {\n      int new_id      = new_node();\n      segTree[r].rson = new_id;\n    }\n    update(segTree[r].rson, id, up, mid + 1, right);\n  }\n  segTree[r].val = (segTree[r].lson != -1 ? segTree[segTree[r].lson].val : 0) +\n                   (segTree[r].rson != -1 ? segTree[segTree[r].rson].val : 0);\n}\n\ninline int QUERY(int l, int r, int k) {\n  vector<int> r1, r2;  //\u5b58 l-1 \u548c r \u5404\u81ea\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u3002\n  for (int i = l - 1; i; i -= lowbit(i))\n    if (root[i] != -1)\n      r1.push_back(root[i]);\n  for (int i = r; i; i -= lowbit(i))\n    if (root[i] != -1)\n      r2.push_back(root[i]);\n  return query(r1, r2, k, 1, kind);\n}\n\ninline void UPDATE(int id, int num, int up, int n) {\n  for (int i = id; i <= n; i += lowbit(i)) {\n    if (root[i] == -1)\n      root[i] = new_node();\n    update(root[i], num, up, 1, kind);\n  }\n}\n```\n\n---\n\n\u73b0\u5728\u53ea\u9700\u8981\u628a\u4e0a\u9762\u7684\u4e1c\u897f\u642c\u5230\u6811\u4e0a\u5c31\u884c\u4e86\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u548c\u5728\u5e8f\u5217\u4e0a\u662f\u672c\u8d28\u76f8\u540c\u7684\u3002\u6811\u4e0a\u5dee\u5206\u5373\u53ef\u3002\u8bbe $chain\\_sum(a,b)$ \u4e3a\u4ece $a$ \u5230 $b$ \u7684\u6743\u503c\u548c\uff0c$sum_i$ \u4e3a\u4ece\u6839\u8282\u70b9\u5230 $i$ \u7684\u6743\u503c\u548c\u3002\u7531\u4e8e\u6811\u4e0a\u5dee\u5206\u7684\u516c\u5f0f $chain\\_sum(a, b) = sum_a + sum_b - sum_{lca} - sum_{fa_{lca}}$\u3002\u67e5\u8be2\u65f6\u7528\u6240\u6709 $a$ \u548c $b$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u51cf\u53bb $lca$ \u548c $fa_{lca}$ \u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u6ce8\u610f\u4fee\u6539\u65f6\u56e0\u4e3a\u4fee\u6539\u67d0\u4e2a\u8282\u70b9\u53ea\u4f1a\u5f71\u54cd\u5230\u81ea\u8eab\u53ca\u5176\u5b50\u6811\uff0c\u6240\u4ee5\u8981\u6d88\u9664\u5bf9\u65e0\u5173\u8282\u70b9\u7684\u5f71\u54cd\u3002\n\u4e3a\u6b64\u9700\u8981\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 DFS \u5e8f\u4f5c\u4e3a\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u53ca\u5176\u5b50\u6811\u4e2d\u8282\u70b9\u7684\u4e0b\u6807\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u4fbf\u4e8e\u5dee\u5206\u6765\u6d88\u9664\u5bf9\u65e0\u5173\u8282\u70b9\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd8\u8981\u6c42 LCA\uff0c\u6240\u4ee5\u53ef\u7528\u6811\u94fe\u5256\u5206\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u9700\u6c42\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u540c\u4e0a\uff0c\u4e3a $O(n \\log^2 n)$\u3002\n\nCode\uff1a\n\n```cpp\nconst int maxn = 80010;\nint a[maxn], MAP[maxn << 1], kind;\nstruct OPERATION {\n  int a, b, k;\n} op[maxn];  //\u8bb0\u5f55\u64cd\u4f5c\nvector<int> edge[maxn];\nint fa[maxn], dep[maxn], Size[maxn], son[maxn];\nint id[maxn], top[maxn], Index;\n\nvoid dfs1(int u, int FA) {  //\u6811\u5256\u3002\n  fa[u]   = FA;\n  dep[u]  = dep[FA] + 1;\n  Size[u] = 1;\n  son[u]  = 0;\n  for (int v : edge[u]) {\n    if (v == FA)\n      continue;\n    dfs1(v, u);\n    Size[u] += Size[v];\n    if (Size[v] > Size[son[u]])\n      son[u] = v;\n  }\n}\nvoid dfs2(int u, int TOP) {\n  id[u]  = ++Index;\n  top[u] = TOP;\n  if (!son[u])\n    return;\n  dfs2(son[u], TOP);\n  for (int v : edge[u]) {\n    if (v == fa[u] || v == son[u])\n      continue;\n    dfs2(v, v);\n  }\n}\ninline int get_LCA(int a, int b) {\n  while (top[a] != top[b]) {\n    if (dep[top[a]] < dep[top[b]])\n      swap(a, b);\n    a = fa[top[a]];\n  }\n  return dep[a] < dep[b] ? a : b;\n}\nvoid disc(int MAP[], int n, int q, int len, int &m) {  //\u79bb\u6563\u5316\u3002\n  sort(MAP + 1, MAP + len + 1);\n  m = unique(MAP + 1, MAP + len + 1) - (MAP + 1);\n  for (int i = 1; i <= n; i++)\n    a[i] = lower_bound(MAP + 1, MAP + m + 1, a[i]) - MAP;\n  for (int i = 1; i <= q; i++)\n    if (!op[i].k)\n      op[i].b = lower_bound(MAP + 1, MAP + m + 1, op[i].b) - MAP;\n}\n\ninline int lowbit(int x) {\n  return x & (-x);\n}\nstruct segTreeType {\n  struct segTreeNode {\n    int val;\n    int lson, rson;\n    segTreeNode() {\n      lson = rson = -1, val = 0;\n    }\n  };\n  vector<segTreeNode> segTree;\n  int root[maxn];\n  segTreeType() {\n    memset(root, -1, sizeof(root));\n  }\n  inline int new_node() {\n    segTree.push_back(segTreeNode());\n    return segTree.size() - 1;\n  }\n  void change_to_lson(vector<int> &r) {\n    for (int &it : r) {\n      if (segTree[it].lson == -1) {\n        int new_id       = new_node();\n        segTree[it].lson = new_id;\n      }\n      it = segTree[it].lson;\n    }\n  }\n  template <class T, class... Args>\n  void change_to_lson(T &head, Args &...args) {\n    change_to_lson(head), change_to_lson(args...);\n  }\n  void change_to_rson(vector<int> &r) {\n    for (int &it : r) {\n      if (segTree[it].rson == -1) {\n        int new_id       = new_node();\n        segTree[it].rson = new_id;\n      }\n      it = segTree[it].rson;\n    }\n  }\n  template <class T, class... Args>\n  void change_to_rson(T &head, Args &...args) {\n    change_to_rson(head), change_to_rson(args...);\n  }\n\n  int query(vector<int> &r1, vector<int> &r2, vector<int> &r3, vector<int> &r4, int k, int left, int right) {\n    int mid = (left + right) >> 1;\n    if (left == right) {\n      int val = 0;  //\u8981\u5224\u65ad\u4e2a\u6570\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\uff08>=k\uff09\uff0c<k \u5219\u65e0\u89e3\u3002\n      for (int it : r1)\n        val += segTree[it].val;\n      for (int it : r2)\n        val += segTree[it].val;\n      for (int it : r3)\n        val -= segTree[it].val;\n      for (int it : r4)\n        val -= segTree[it].val;\n      if (k <= val)\n        return left;\n      return -1;\n    }\n    int right_val = 0;\n    for (int it : r1)  //\u56e0\u4e3a\u672c\u9898\u6c42\u7b2c k \u201c\u5927\u201d\u503c\u6240\u4ee5\u8981\u628a\u524d\u4e00\u4efd\u4ee3\u7801\u4e2d\u7684\u5de6\u513f\u5b50\u6539\u6210\u53f3\u513f\u5b50\u3002\n      right_val += (segTree[it].rson != -1 ? segTree[segTree[it].rson].val : 0);\n    for (int it : r2)\n      right_val += (segTree[it].rson != -1 ? segTree[segTree[it].rson].val : 0);\n    for (int it : r3)\n      right_val -= (segTree[it].rson != -1 ? segTree[segTree[it].rson].val : 0);\n    for (int it : r4)\n      right_val -= (segTree[it].rson != -1 ? segTree[segTree[it].rson].val : 0);\n    if (right_val >= k) {\n      change_to_rson(r1, r2, r3, r4);\n      return query(r1, r2, r3, r4, k, mid + 1, right);\n    } else {\n      change_to_lson(r1, r2, r3, r4);\n      return query(r1, r2, r3, r4, k - right_val, left, mid);\n    }\n  }\n  void update(int r, int id, int up, int left, int right) {\n    if (left == id && right == id) {\n      segTree[r].val += up;\n      return;\n    }\n    int mid = (left + right) >> 1;\n    if (id <= mid) {\n      if (segTree[r].lson == -1) {\n        int new_id      = new_node();\n        segTree[r].lson = new_id;\n      }\n      update(segTree[r].lson, id, up, left, mid);\n    } else {\n      if (segTree[r].rson == -1) {\n        int new_id      = new_node();\n        segTree[r].rson = new_id;\n      }\n      update(segTree[r].rson, id, up, mid + 1, right);\n    }\n    segTree[r].val = (segTree[r].lson != -1 ? segTree[segTree[r].lson].val : 0) +\n                     (segTree[r].rson != -1 ? segTree[segTree[r].rson].val : 0);\n  }\n\n  inline int QUERY(int a, int b, int k) {  //\u8981\u6ce8\u610f\u7528 DFS \u5e8f\u4f5c\u4e3a\u4e0b\u6807\u800c\u4e0d\u662f\u539f\u672c\u7f16\u53f7\u3002\n    vector<int> r1, r2, r3, r4;\n    int lca = get_LCA(a, b), lcafa = fa[lca];\n    for (int i = id[a]; i; i -= lowbit(i))\n      if (root[i] != -1)\n        r1.push_back(root[i]);\n    for (int i = id[b]; i; i -= lowbit(i))\n      if (root[i] != -1)\n        r2.push_back(root[i]);\n    for (int i = id[lca]; i; i -= lowbit(i))\n      if (root[i] != -1)\n        r3.push_back(root[i]);\n    for (int i = id[lcafa]; i; i -= lowbit(i))\n      if (root[i] != -1)\n        r4.push_back(root[i]);\n    return query(r1, r2, r3, r4, k, 1, kind);\n  }\n\n  inline void UPDATE(int id, int num, int up, int n) {\n    for (int i = id; i <= n; i += lowbit(i)) {\n      if (root[i] == -1)\n        root[i] = new_node();\n      update(root[i], num, up, 1, kind);\n    }\n  }\n} segTree;\n\nint main() {\n  int n, q, len = 0;\n  in(n, q);\n  for (int i = 1; i <= n; i++)\n    in(a[i]), MAP[++len] = a[i];\n  for (int i = 1; i < n; i++) {\n    int a, b;\n    in(a, b);\n    edge[a].push_back(b);\n    edge[b].push_back(a);\n  }\n  for (int i = 1; i <= q; i++) {\n    in(op[i].k, op[i].a, op[i].b);\n    if (!op[i].k)\n      MAP[++len] = op[i].b;\n  }\n  disc(MAP, n, q, len, kind);\n  dfs1(1, 0);\n  dfs2(1, 1);\n\n  for (int i = 1; i <= n; i++)\n    segTree.UPDATE(id[i], a[i], 1, n), segTree.UPDATE(id[i] + Size[i], a[i], -1, n);  //\u8981\u6d88\u9664\u5bf9\u65e0\u5173\u8282\u70b9\u5f71\u54cd\u3002\n  for (int i = 1; i <= q; i++) {\n    if (op[i].k) {\n      int res = segTree.QUERY(op[i].a, op[i].b, op[i].k);\n      if (res != -1)\n        out(MAP[res]), enter;\n      else\n        puts(\"invalid request!\");\n    } else {\n      segTree.UPDATE(id[op[i].a], a[op[i].a], -1, n);\n      segTree.UPDATE(id[op[i].a] + Size[op[i].a], a[op[i].a], 1, n);\n      a[op[i].a] = op[i].b;\n      segTree.UPDATE(id[op[i].a], a[op[i].a], 1, n);\n      segTree.UPDATE(id[op[i].a] + Size[op[i].a], a[op[i].a], -1, n);\n    }\n  }\n}\n```\nUPD\uff1a\u4fee\u6539\u90e8\u5206\u63cf\u8ff0\u4f7f\u5176\u66f4\u52a0\u4e25\u8c28\u3002\n",
        "postTime": 1663179294,
        "uid": 111789,
        "name": "DRPLANT",
        "ccfLevel": 5,
        "title": "P4175 [CTSC2008]\u7f51\u7edc\u7ba1\u7406 \u9898\u89e3"
    },
    {
        "content": "\u4ee4\u4eba\u6293\u72c2\u7684\u6574\u4f53\u4e8c\u5206\u9898\u3002\u6839\u672c\u539f\u56e0\u8fd8\u662f\u6211\u592a\u83dc\u4e86\u3002\n\n\u5728\u5b66\u6821\u5199\u4e86\u4e00\u4e2a\u4e0b\u5348\u5199\u5f97\u5934\u6655\uff0c\u56de\u5bb6\u91cc\u91cd\u5199\u4e86\u4e00\u904d\uff0c\u4e00\u4e2a\u5c0f\u65f6\u5c31\u5199\u5b8c\u4e86\u2026\u2026\u4e0d\u8fc7\u8fd8\u662f\u592a\u6162\u3002\n\n## \u9898\u610f\u7b80\u8ff0\uff1a\n\n\u4e00\u68f5 $n$ \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\u3002\n\n\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u8981\u4e48\u662f\u66f4\u6539\u5355\u70b9\u70b9\u6743\uff0c\u8981\u4e48\u662f\u67e5\u8be2\u6811\u94fe\u4e0a\u7b2c $k$ \u5927\u70b9\u6743\u3002\n\n## \u9898\u89e3\uff1a\n\n\u6811\u5957\u6811\u56fa\u7136\u53ef\u4ee5\uff0c\u4f46\u662f\u6574\u4f53\u4e8c\u5206\u4e5f\u5f88\u597d\u3002\n\n\u6574\u4f53\u4e8c\u5206\u5c31\u662f\u5bf9\u4e8e\u6240\u6709\u7684\u8be2\u95ee\u4e00\u8d77\u4e8c\u5206\u7b54\u6848\uff0c\u5728\u4e8c\u5206\u533a\u95f4\u8303\u56f4\u5185\u7684\u67e5\u8be2\u548c\u4fee\u6539\u4e00\u5e76\u4e0b\u4f20\u3002\n\n\u8fd9\u9898\u628a\u6574\u4f53\u4e8c\u5206\u57fa\u7840\u9898\u7684\u64cd\u4f5c\u642c\u5230\u4e86\u94fe\u4e0a\uff0c\u4f46\u662f\u5b9e\u73b0\u65b9\u6cd5\u5e76\u6ca1\u6709\u592a\u5927\u4e0d\u540c\u3002\n\n\u521d\u59cb\u70b9\u6743\u770b\u6210\u589e\u52a0\u70b9\u6743\uff0c\u63d2\u5165\u5728\u6240\u6709\u64cd\u4f5c\u7684\u6700\u524d\u9762\u5373\u53ef\u3002  \n\u66f4\u6539\u70b9\u6743\u53ef\u4ee5\u770b\u6210\u5220\u9664\u70b9\u6743\u518d\u589e\u52a0\u70b9\u6743\uff0c\u53d8\u6210\u4e24\u6b21\u4fee\u6539\u5373\u53ef\u3002\n\n\u8fd9\u9898\u6574\u4f53\u4e8c\u5206\u8981\u6c42\u7b2c $k$ \u5927\uff0c\u8003\u8651\u4e8c\u5206\u51fa\u7684\u7b54\u6848 $mid$\uff0c\u5c06**\u5927\u4e8e** $mid$ \u7684\u4fee\u6539\u8f6c\u6210\u5355\u70b9\u6743\u503c $\\pm 1$\uff0c  \n\u800c\u5bf9\u4e8e\u6811\u94fe\u67e5\u8be2\u7b2c $k$ \u5927\uff0c\u5219\u8f6c\u5316\u6210\u94fe\u4e0a\u6743\u503c\u4e4b\u548c\u662f\u5426\u7b49\u4e8e $k$\u3002\n\n\u5199\u6574\u4f53\u4e8c\u5206\u9898\u6c38\u8fdc\u8981\u6ce8\u610f\u4e8c\u5206\u7684\u6761\u4ef6\uff0c\u6211\u7684\u6761\u4ef6\u662f\uff0c\u94fe\u4e0a**\u5927\u4e8e** $mid$ \u7684\u70b9\u6570**\u5c0f\u4e8e** $k$ \u4e2a\u5219\u7b54\u6848**\u5c0f\u4e8e\u7b49\u4e8e** $mid$\uff0c\u5426\u5219\u7b54\u6848**\u5927\u4e8e** $mid$\u3002\n\n\u5355\u70b9\u4fee\u6539\uff0c\u6811\u94fe\u67e5\u8be2\u8981\u662f\u8fd8\u7528\u6811\u5256\u5c31\u592anaive\u4e86\uff0c\u5957\u8def\u8f6c\u5316\uff1a\n\n\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5355\u70b9\u4fee\u6539\u5c31\u53d8\u6210\u5b50\u6811\u4fee\u6539\uff0c\u94fe\u67e5\u5c31\u53d8\u6210\u56db\u4e2a\u5355\u70b9\u67e5\u4e86\uff08\u9700\u8981\u6c42LCA\uff09\u3002\n\n\u800c\u5b50\u6811\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u533a\u95f4\u52a0\u6cd5\uff0c\u5355\u70b9\u67e5\u8be2\uff1b\u518d\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u5dee\u5206\u6280\u5de7\u8f6c\u5316\u6210\u5355\u70b9\u5dee\u5206\uff0c\u533a\u95f4\u524d\u7f00\u548c\u3002\n\n\u6ce8\u610f\u5230\u8fd8\u8981\u6c42LCA\uff0c\u76f4\u63a5\u5728DFS\u7684\u65f6\u5019\u7528Tarjan\u5904\u7406\u5c31\u597d\u4e86\u3002\n\n\u5173\u4e8e\u5224\u65ad\u65e0\u89e3\uff1a\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u6389\u2026\u2026\u4e0d\u8fc7\u8fd9\u6837\u5c31\u5fc5\u987b\u6c42\u6811\u94fe\u957f\u5ea6\u4e86\u3002  \n\u6211\u7684\u65b9\u6cd5\u662f\uff0c\u5f80\u6743\u503c\u91cc\u9762\u52a0\u4e00\u4e2a-1\uff0c\u5982\u679c\u7b54\u6848\u662f-1\uff0c\u5219\u771f\u5b9e\u7b54\u6848\u5e94\u8be5\u662f\u65e0\u89e3\u3002\n\n\u6211\u7684\u4ee3\u7801\u8fd8\u79bb\u6563\u5316\u4e86\u6743\u503c\uff0c\u5176\u5b9e\u6ca1\u7528\u2026\u2026\n\n\u5176\u4ed6\u6076\u5fc3\u7684\u5730\u65b9\u5c31\u662f\u6574\u4f53\u4e8c\u5206\u57fa\u672c\u529f\u4e86\uff0c\u592a\u5f31\u4e86\u8c03\u4e86\u597d\u4e45\u2026\u2026\u6ce8\u610f\u5faa\u73af\u53d8\u91cf\u662f\u6307\u5411\u771f\u5b9e\u64cd\u4f5c\u7684\u4e0b\u6807\u7684\u6307\u9488\u8fd8\u662f\u771f\u5b9e\u64cd\u4f5c\u7684\u4e0b\u6807\uff0c\u5982\u679c\u4f60\u5199\u7ed3\u6784\u4f53\u5f53\u6211\u6ca1\u8bf4\u3002\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<algorithm>\nusing namespace std;\nconst int MN=80005;\nconst int MM=110005;\nconst int MQ=140005;\nint n,m,q,w[MN],d[MQ],c;\nint o[MQ],a[MQ],b[MQ],p[MQ],lc[MQ],ans[MQ];\nint eh[MN],qh[MN],nxt[MM*2],to[MM*2],tot;\ninline void ins(int*h,int x,int y){nxt[++tot]=h[x],to[tot]=y,h[x]=tot;}\nint ld[MN],rd[MN],faz[MN],dfc;\nint fa[MN];int ff(int x){return fa[x]?fa[x]=ff(fa[x]):x;}\nvoid dfs(int u,int f){\n\tfaz[u]=f,ld[u]=++dfc;\n\tfor(int i=eh[u];i;i=nxt[i])if(to[i]!=f)dfs(to[i],u),fa[to[i]]=u;\n\tfor(int i=qh[u];i;i=nxt[i])if(lc[to[i]])lc[to[i]]=ff(lc[to[i]]);else lc[to[i]]=u;\n\trd[u]=dfc;\n}\nint B[MN];\ninline void I(int i,int x){for(;i<=n;i+=i&-i)B[i]+=x;}\ninline int Q(int i){int a=0;for(;i;i-=i&-i)a+=B[i];return a;}\nint t[MQ];\nvoid s(int l,int r,int L,int R){\n\tif(l>r)return;\n\tif(L==R){for(int i=l;i<=r;++i)ans[p[i]]=L;return;}\n\tint m=L+R>>1,p1=l-1,p2=r+1;\n\tfor(int j=l,i;j<=r;++j){\n\t\tif(o[i=p[j]]>0){\n\t\t\tint x=Q(ld[a[i]])+Q(ld[b[i]])-Q(ld[lc[i]])-Q(ld[faz[lc[i]]]);\n\t\t\tif(x<o[i])o[i]-=x,t[++p1]=i;\n\t\t\telse t[--p2]=i;\n\t\t}\n\t\telse if(b[i]>m){\n\t\t\tI(ld[a[i]],o[i]?-1:1),I(rd[a[i]]+1,o[i]?1:-1);\n\t\t\tt[--p2]=i;\n\t\t}\n\t\telse t[++p1]=i;\n\t}\n\tfor(int i=l;i<=r;++i)if(o[p[i]]<=0&&b[p[i]]>m)I(ld[a[p[i]]],o[p[i]]?1:-1),I(rd[a[p[i]]]+1,o[p[i]]?-1:1);\n\treverse(t+p2,t+r+1),memcpy(p+l,t+l,r-l+1<<2);\n\ts(l,p1,L,m),s(p2,r,m+1,R);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&w[i]),o[++q]=0,a[q]=i,b[q]=w[i],p[q]=q;\n\tfor(int i=1,x,y;i<n;++i)scanf(\"%d%d\",&x,&y),ins(eh,x,y),ins(eh,y,x);\n\tfor(int i=1;i<=m;++i){\n\t\t++q,scanf(\"%d%d%d\",&o[q],&a[q],&b[q]),p[q]=q;\n\t\tif(!o[q])o[++q]=-1,a[q]=a[q-1],b[q]=w[a[q-1]],p[q]=q,w[a[q-1]]=b[q-1];\n\t}\n\tfor(int i=1;i<=q;++i)if(o[i]>0)ins(qh,a[i],i),ins(qh,b[i],i);else d[++c]=b[i];\n\td[++c]=-1;sort(d+1,d+c+1);c=unique(d+1,d+c+1)-d-1;\n\tfor(int i=1;i<=q;++i)if(o[i]<=0)b[i]=lower_bound(d+1,d+c+1,b[i])-d;\n\tdfs(1,0),s(1,q,1,c);\n\tfor(int i=1;i<=q;++i)if(o[i]>0)ans[i]==1?puts(\"invalid request!\"):printf(\"%d\\n\",d[ans[i]]);\n\treturn 0;\n}\n// 20:08 - 21:03\n```",
        "postTime": 1545832265,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u90fd\u662f\u7528\u6570\u636e\u7ed3\u6784\u6216\u8005\u6574\u4f53\u4e8c\u5206\u641e\u7684\uff0c\u90fd\u5e26$1\\sim 4$\u53ea$\\log$~~\u592a\u795e\u4e86\u5199\u4e0d\u52a8~~\u3002\u5176\u5b9e\u8fd9\u9898\u53ef\u4ee5\u5e26\u4fee\u6811\u4e0a\u83ab\u961f\uff08\u6a21\u677f\u89c1[WC2013\u7cd6\u679c\u516c\u56ed](https://www.luogu.org/problemnew/show/P4074)\uff09\u3002\n\n\u5176\u4ed6\u7684\u57fa\u672c\u90fd\u662f\u5957\u8def\uff0c\u5173\u952e\u662f\u7b2c$k$\u5927\u600e\u4e48\u6c42\u3002\n\n\u8003\u8651\u5bf9\u6743\u503c\u8fdb\u884c\u5206\u5757\uff08\u5206\u5757\u4e4b\u524d\u5148\u79bb\u6563\u5316\uff09\uff0c\u8bb0\u5f55\u5f53\u524d\u533a\u95f4\u5185\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u548c\u6bcf\u4e2a\u5757\u5185\u7684\u603b\u5143\u7d20\u4e2a\u6570\u3002\u8fd9\u4e2a\u7684\u4fee\u6539\u662f$O(1)$\u7684\u3002\n\n\u7136\u540e\uff0c\u6bcf\u6b21\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u9996\u5148\u904d\u5386\u6240\u6709\u5757\uff0c\u627e\u5230\u7b2c$k$\u5927\u6570\u6240\u5728\u7684\u5757\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\u8fd9\u4e2a\u5757\uff0c\u627e\u5230\u7b2c$k$\u5927\u7684\u6570\u7684\u5177\u4f53\u503c\u5373\u53ef\u3002\u5355\u6b21\u67e5\u8be2\u4e3a$O(\\sqrt n)$\u3002\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5e26\u4fee\u83ab\u961f\u7684$O(n^{\\frac 5 3})$\u3002\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<cctype>\n#include<algorithm>\n#include<vector>\n#define N 80008\n#define blo 1888\n#define P 400\nstruct istream{\n    template<typename T>\n    inline istream&operator>>(T&d){\n        static int c;\n        for(c=getchar();!isdigit(c);c=getchar());\n        for(d=0;isdigit(c);c=getchar())\n        d=(d<<3)+(d<<1)+(c&15);return*this;\n    }\n}cin;\nstd::vector<int>v;\nstruct edge{\n    int to,nxt;\n}e[N<<1];\nstruct que{\n    int l,r,lca,tim,id,k;\n    bool addlca;\n    inline bool operator<(const que&rhs)const{\n        return(l/blo!=rhs.l/blo)?(l<rhs.l):((r/blo!=rhs.r/blo)?r<rhs.r:tim<rhs.tim);\n    }\n}q[N];\nstruct tims{\n    int id,to,from;\n}T[N];\nint n,Q,head[N],cntt=0,a[N],top[N],sz[N],dep[N],son[N],fa[N],idx=0,in[N],out[N],idfn[N<<1],ans[N];\nint cnt[N];\nint qs=0,tms=0;\nint tot[166666],all[666],L[666],R[666],bel[166666];\nvoid dfs(int now){\n    sz[now]=1,son[now]=0;\n    for(int i=head[now];i;i=e[i].nxt)\n    if(!dep[e[i].to]){\n        dep[e[i].to]=dep[now]+1;\n        fa[e[i].to]=now;\n        dfs(e[i].to);\n        sz[now]+=sz[e[i].to];\n        if(!son[now]||sz[son[now]]<sz[e[i].to])son[now]=e[i].to;\n    }\n}\nvoid dfs2(int now){\n    idfn[in[now]=++idx]=now;\n    if(son[now])top[son[now]]=top[now],dfs2(son[now]);\n    for(int i=head[now];i;i=e[i].nxt)\n    if(e[i].to!=son[now]&&dep[e[i].to]>dep[now])dfs2(top[e[i].to]=e[i].to);\n    idfn[out[now]=++idx]=now;\n}\ninline int LCA(int x,int y){\n    while(top[x]!=top[y])\n    if(dep[top[x]]>dep[top[y]])x=fa[top[x]];else y=fa[top[y]];\n    return dep[x]<dep[y]?x:y;\n}\nvoid T_init(){\n    static int b[N];\n    memcpy(b,a,sizeof b);\n    for(int i=1;i<=tms;++i){\n        int&x=b[T[i].id];\n        T[i].from=x;\n        x=T[i].to;\n    }\n}\ninline void BLOCK_init(){\n    for(int i=1;i<=P;++i){\n        L[i]=(i-1)*P+1,R[i]=i*P;\n        for(int j=L[i];j<=R[i];++j)bel[j]=i;\n    }\n}\ninline void ins(int id){\n    ++tot[a[idfn[id]]];\n    ++all[bel[a[idfn[id]]]];\n}\ninline void del(int id){\n    --tot[a[idfn[id]]];\n    --all[bel[a[idfn[id]]]];\n}\nint main(){\n    v.push_back(-1);\n    cin>>n>>Q;\n    for(int i=1;i<=n;v.push_back(a[i++]))cin>>a[i];\n    for(int i=1;i<n;++i){\n        int u,v;cin>>u>>v;\n        e[++cntt]=(edge){v,head[u]};head[u]=cntt;\n        e[++cntt]=(edge){u,head[v]};head[v]=cntt;\n    }\n    dep[1]=1;\n    dfs(1),dfs2(1);\n    for(int i=1;i<=Q;++i){\n        int k,l,r;\n        cin>>k>>l>>r;\n        if(k){\n            ++qs;\n            if(in[l]>in[r])std::swap(l,r);\n            int&lca=q[qs].lca;lca=LCA(l,r);\n            if(l==lca)l=in[l],r=in[r];else l=out[l],r=in[r],q[qs].addlca=1;\n            q[qs].l=l,q[qs].r=r;\n            q[qs].id=qs;\n            q[qs].tim=tms;\n            q[qs].k=k;\n        }else{\n            T[++tms]=(tims){l,r};\n            v.push_back(r);\n        }\n    }\n    std::sort(v.begin(),v.end());\n    v.erase(std::unique(v.begin(),v.end()),v.end());\n    for(int i=1;i<=n;++i)a[i]=std::lower_bound(v.begin(),v.end(),a[i])-v.begin();\n    for(int i=1;i<=tms;++i)T[i].to=std::lower_bound(v.begin(),v.end(),T[i].to)-v.begin();\n    T_init();\n    BLOCK_init();\n    std::sort(q+1,q+qs+1);\n    int l=1,r=0,tim=0;\n    for(int i=1;i<=qs;++i){\n        while(tim<q[i].tim){\n            ++tim;\n            if(cnt[T[tim].id]==1){\n                ++tot[T[tim].to];\n                ++all[bel[T[tim].to]];\n                --tot[T[tim].from];\n                --all[bel[T[tim].from]];\n            }\n            a[T[tim].id]=T[tim].to;\n        }\n        while(tim>q[i].tim){\n            if(cnt[T[tim].id]==1){\n                --tot[T[tim].to];\n                --all[bel[T[tim].to]];\n                ++tot[T[tim].from];\n                ++all[bel[T[tim].from]];\n            }\n            a[T[tim].id]=T[tim].from;\n            --tim;\n        }\n        while(r<q[i].r)\n        if(!cnt[idfn[++r]]++)ins(r);else del(r);\n        while(r>q[i].r)\n        if(!--cnt[idfn[r]])del(r--);else ins(r--);\n        while(l>q[i].l)\n        if(!cnt[idfn[--l]]++)ins(l);else del(l);\n        while(l<q[i].l)\n        if(!--cnt[idfn[l]])del(l++);else ins(l++);\n        if(q[i].addlca)++tot[a[q[i].lca]],++all[bel[a[q[i].lca]]];\n        int k=q[i].k,&s=ans[q[i].id];\n        s=-1;\n        for(int ii=P;ii;--ii)\n        if(all[ii]<k)k-=all[ii];else{\n            for(int j=R[ii];j>=L[ii];--j)\n            if(tot[j]<k)k-=tot[j];else{\n                s=j;break;\n            }\n            break;\n        }\n        if(q[i].addlca)--tot[a[q[i].lca]],--all[bel[a[q[i].lca]]];\n    }\n    for(int i=1;i<=qs;++i)\n    if(ans[i]==-1)puts(\"invalid request!\");else\n    printf(\"%d\\n\",v[ans[i]]);\n    return 0;\n}\n\n```",
        "postTime": 1540900798,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u7ec8\u4e8e\u628a3\u4e2a\u6708\u524d\u5495\u6389\u7684\u6570\u636e\u7ed3\u6784\u4f53\u8865\u4e86\uff0c~~\u5b9e\u9645\u4e0a\u662f\u6211\u5199\u7684\u6811\u5957\u6811\u5e38\u6570\u592a\u592740\u5206\u6ca1\u5f97\u5361\u8fdb\u53bb~~\uff0c\u7136\u800c\u518d\u6b21\u5199\u7684\u65f6\u5019\u8fd8\u662f\u82b1\u4e861.5\u5c0f\u65f6\u7801\u4ee3\u7801+0.5\u5c0f\u65f6\u591a\u7684debug\u3002\n\n\u770b\u5230\u6ca1\u6709\u6574\u4f53\u4e8c\u5206\u7684\u9898\u89e3\uff0c\n\n\u4e8e\u662f\u8fc7\u6765\u53d1\u4e00\u4e0bqaq\u3002\n\n### Solution\n\n\u89c2\u5bdf\u5230\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u5728\u7ebf\uff0c\u4e14\u95ee\u9898\u662f\uff0c\n\n\u7c7b\u4f3c\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\u7b2cK\u5927\u7684\u6837\u5b50\u3002\n\n\u8003\u8651\u6574\u4f53\u4e8c\u5206\u3002\uff08\u4ec0\u4e48\uff1f\u4f60\u544a\u8bc9\u6211\u4e0d\u4f1a\u6574\u4f53\u4e8c\u5206qaq\uff0c\u81ea\u884c\u53f3\u8f6c\u4e3b\u5e2d\u6811\u9898\u89e3\uff09\n\n\u7c7b\u4f3c\u4e8e[Dynamic Rankings](https://www.luogu.org/problemnew/show/P2617)\n\n\u5bf9\u4e8e\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u62c6\u6210\u4e24\u4e2a\u64cd\u4f5c\uff0c\n\n```cpp\nq[++tot]=(node){0,-1,val[y],y,1};//\u52a0\u4e00\u4e2a\u51cf\u53bb\u539f\u5148\u8d21\u732e\u7684\u64cd\u4f5c\nval[y]=z;//val[i]\u8868\u793ai\u7684\u70b9\u6743\uff0c\u4fee\u6539\nq[++tot]=(node){0,1,val[y],y,1};\n```\n\n\u4f46\u662f\u8fd9\u9053\u9898\u662f\u6811\u4e0a\u7684\u95ee\u9898...\n\n**\u6811\u5256\uff01**\n\n\u6811\u5256\u80af\u5b9a\u662f\u8981\u7684\uff0c\u8fd9\u8f88\u5b50\u90fd\u4e0d\u4f1a\u629b\u5f03\u6811\u5256\u7684\u3002\n\n\u4e3b\u5e2d\u6811\u53c8\u4e0d\u4f1a\uff0c\u53ea\u80fd\u6253\u6253\u6811\u5256\u624d\u80fd\u8f6c\u6362\u4e3a\u533a\u95f4\u4e0a\u7684\u95ee\u9898\u7684\u6837\u5b50\u5462\u3002\n\nqaq\n\n\u4e8e\u662f\u5c31\u53ef\u4ee5\u6309\u7167\u6574\u4f53\u4e8c\u5206\u7684\u5957\u8def\u6109\u5feb\u7684\u5199\u4e0b\u53bb\u4e86\uff01~~\uff08\u5b9e\u9645\u4e0a\u5c31\u53d8\u6210\u4e86\u677f\u5b50\u9898..\uff09~~\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^3n)$\n\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n//struct Tree_Chain;\ninline int read(){\n    char c=getchar();int x=0,f=1;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int maxn=5e5+10;\nstruct E{\n    int next,to;\n}tu[maxn*2];\nint head[maxn],cnt,tot;\nint n,m,qwq;\nlong long val[maxn];\nvoid add(int next,int to){\n    tu[cnt].next=head[next];\n    tu[cnt].to=to;\n    head[next]=cnt++;\n}\nint top[maxn],rnk[maxn],sz[maxn],son[maxn],fa[maxn],tid[maxn],dep[maxn],tim;\nvoid dfs1(int x,int father,int deep){//\u6811\u5256\n    sz[x]=1;\n    fa[x]=father;\n    dep[x]=deep;\n    for(int i=head[x];~i;i=tu[i].next){\n        int u=tu[i].to;\n        if(u==father)continue;\n        dfs1(u,x,deep+1);\n        sz[x]+=sz[u];\n        if(son[x]==-1||sz[son[x]]<sz[u]){\n            son[x]=u;\n        }\n    }\n}\nvoid dfs2(int x,int tp){\n    top[x]=tp;\n    tid[x]=++tim;\n    rnk[tim]=x;\n    if(son[x]==-1)return;\n    dfs2(son[x],tp);\n    for(int i=head[x];~i;i=tu[i].next){\n        int u=tu[i].to;\n        if(u==fa[x]||u==son[x])continue;\n        dfs2(u,u);\n    }\n}\nint sumv[maxn*4];//\u7ebf\u6bb5\u6811\n#define lson (o<<1)\n#define rson (o<<1|1)\nvoid pushup(int o){\n    sumv[o]=sumv[lson]+sumv[rson];\n}\nvoid change(int o,int l,int r,int x,int v){\n    if(l==r){\n        sumv[o]+=v;\n        return;\n    }\n    int mid=(l+r)>>1;\n    if(x<=mid)change(lson,l,mid,x,v);\n    else change(rson,mid+1,r,x,v);\n    pushup(o);\n}\nint query(int o,int l,int r,int l1,int r1){\n    if(l>=l1&&r<=r1){\n        return sumv[o];\n    }\n    if(l>r1||r<l1)return 0;\n    int mid=(l+r)>>1;\n    return query(lson,l,mid,l1,r1)+query(rson,mid+1,r,l1,r1);\n}\nint query_path(int x,int y){\n    int ans=0;\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])swap(x,y);\n        ans+=query(1,1,n,tid[top[x]],tid[x]);\n        x=fa[top[x]];\n    }\n    if(tid[x]>tid[y])swap(x,y);\n    ans+=query(1,1,n,tid[x],tid[y]);\n    return ans;\n}//\u6811\u5256\nstruct node{\n    long long x,y,k,id,type;\n}q[maxn],q1[maxn],q2[maxn];\nlong long ans[maxn];\nvoid solve(int L,int R,int l,int r){//q1\u8868\u793a\u7b54\u6848\u5728l~mid\uff0cq2\u8868\u793a\u7b54\u6848\u5728mid+1~r\u5185\n    if(L>R)return;\n    if(l==r){\n        for(int i=L;i<=R;i++)if(q[i].type==2)ans[q[i].id]=l;\n        return;\n    }\n    int mid=(l+r)>>1;\n    int cnt1=0,cnt2=0;\n    for(int i=L;i<=R;i++){\n        if(q[i].type==1){\n            if(q[i].k>mid){\n                change(1,1,n,tid[q[i].id],q[i].y);\n                q2[++cnt2]=q[i];\n            }\n            else q1[++cnt1]=q[i];\n        }\n        else{\n            int ret=query_path(q[i].x,q[i].y);\n            if(ret>=q[i].k)q2[++cnt2]=q[i];//\u5927\u4e8emid\u7684\u6570\u5b57\u4e2a\u6570>=q[i].k\uff0c\u8bf4\u660e\u5b9e\u9645\u7b54\u6848\u6bd4mid\u5927\n            else{\n                q[i].k-=ret;//\u51cf\u53bb\u8d21\u732e\n                q1[++cnt1]=q[i];\n            }\n        }\n    }\n    for(int i=1;i<=cnt2;i++){\n        if(q2[i].type==1)change(1,1,n,tid[q2[i].id],-q2[i].y);\n    }//\u6e05\u9664\n    for(int i=1;i<=cnt1;i++)q[L+i-1]=q1[i];\n    for(int i=1;i<=cnt2;i++)q[L+cnt1+i-1]=q2[i];\n    solve(L,L+cnt1-1,l,mid);\n    solve(L+cnt1,R,mid+1,r);\n}//\u6574\u4f53\u4e8c\u5206\nint num;\nlong long a[maxn],map_rnk[maxn],pos;//a\u6570\u7ec4\u7528\u6765\u5b58\u5c06\u8981\u88ab\u79bb\u6563\u5316\u7684\u6570\u5b57,pos\u5b58\u8be2\u95ee\u4e2a\u6570...\u5f88\u4e71sry\nint main(){\n    memset(head,-1,sizeof(head));\n    memset(son,-1,sizeof(son));\n    n=read(),m=read();\n    for(int i=1;i<=n;i++){\n        val[i]=read();\n        q[++tot]=(node){0,1,val[i],i,1};\n        a[++num]=val[i];\n    }\n    for(int i=1;i<n;i++){\n        int x=read(),y=read();\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(1,0,0);\n    dfs2(1,1);\n    for(int i=1;i<=m;i++){\n        int x=read(),y=read(),z=read();\n        if(x==0){\n            q[++tot]=(node){0,-1,val[y],y,1};\n            val[y]=z;\n            q[++tot]=(node){0,1,val[y],y,1};\n            a[++num]=z;\n        }\n        else{\n            q[++tot]=(node){y,z,x,++pos,2};//\u8d3c\u5751\u7684\u6570\u636e\u8f93\u5165\u683c\u5f0f...\n        }\n    }/*\u4ee5\u4e0b\u4e3a\u79bb\u6563\u5316*/\n    sort(a+1,a+1+num);\n    int qaq=unique(a+1,a+1+num)-a-1;\n    for(int i=1;i<=tot;i++)\n        if(q[i].type!=2){\n            int tmp=lower_bound(a+1,a+1+qaq,q[i].k)-a;\n            map_rnk[tmp]=q[i].k;\n            q[i].k=tmp;\n        }\n    solve(1,tot,0,qaq+1);\n    for(int i=1;i<=pos;i++){\n        if(ans[i]==0)puts(\"invalid request!\");\n        else printf(\"%lld\\n\",map_rnk[ans[i]]);\n    }\n    return 0;\n}\n```\n\n\u7528\u7ebf\u6bb5\u6811\u6bd4\u8f83\u65b9\u4fbf~~\u5b9e\u9645\u4e0a\u662f\u6211\u6811\u72b6\u6570\u7ec4\u5199\u9505\u4e86~~",
        "postTime": 1537953307,
        "uid": 46750,
        "name": "DefFrancis",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u4e00\u4e07\u5e74\u4e86\u3002\n\n\u5c0f\u849f\u84bbJf\u7ec8\u4e8e\u66f4\u535a\u5566>_<  \n\n\n\u611f\u89c9\u81ea\u5df1\u5df2\u7ecf\u5f7b\u5e95\u53d8\u6210\u4e00\u4e2a\u9e3d\u5b50\u4e86\u5462qwq\u3002  \n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u4ee5\u4e0a\u662f\u95f2\u8bdd\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\n## \u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u6811\u5206\u5757\u7684\u9898\u89e3\u3002 \u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a(m+n) sqrt (n)  \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3an sqrt (n)\n\n**\u524d\u7f6e\u829d\u58eb**\uff1a O1lca(\u8fd9\u4e2a\u633a\u57fa\u7840\u7684\u5427)  \u503c\u57df\u5206\u5757\uff08\u53ef\u4ee5\u53c2\u8003[\u5c0f\u849f\u84bb\u4e4b\u524d\u7684blog](https://www.luogu.org/blog/Juan-feng/solution-p3834)\uff09\n\n\u90a3\u4e48\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c \u76f4\u63a5\u5f00\u59cb\u8bb2\u5b9e\u73b0\u65b9\u6cd5\u3002\n\n\u5728\u6811\u4e0a\u9009\u51faT\u4e2a\u5173\u952e\u70b9\uff08\u9009\u53d6\u7684\u65b9\u6cd5\u548c\u6027\u8d28\u540e\u9762\u4f1a\u8bf4\uff09\uff0c \u5728\u628a\u8fd9\u4e9b\u5173\u952e\u70b9\u4e4b\u95f4\u7684LCA\u4e5f\u8bbe\u6210\u5173\u952e\u70b9\uff0c\u7136\u540e\u5c06\u503c\u57df\u5206\u5757\uff0c\u5904\u7406\u51fa\u8fd9\u4e9b\u5173\u952e\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e2d\u7684\u4e00\u4e9b\u4fe1\u606f\uff1a \n> cnt1\uff08i, j\uff09\u8868\u793a\u7b2ci\u4e2a\u5173\u952e\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e2d\uff0c \u6743\u503c\u5728\u7b2cj\u4e2a\u503c\u57df\u5757\u4e2d\u7684\u70b9\u7684\u6570\u91cf\n \n> cnt2\uff08i, j) \u8868\u793a\u7b2ci\u4e2a\u5173\u952e\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e2d\uff0c \u6743\u503c\u4e3aj\u7684\u70b9\u7684\u6570\u91cf\n\n\u663e\u7136\u4e0a\u9762\u7684\u4e24\u4e2a\u6570\u7ec4\u53ef\u4ee5\u5728T * n \u7684\u65f6\u95f4\u5185\u5904\u7406\u5b8c\u6210\u3002  \u7136\u540e\u5173\u4e8e\u8fd9T\u4e2a\u70b9\u7684\u9009\u53d6\uff0c \u6211\u4eec\u60f3\u8ba9\u5176\u62e5\u6709\u8fd9\u6837\u7684\u6027\u8d28\uff1a \u4ece\u6811\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u51fa\u53d1\u5411\u6839\u8df3\u6700\u591a\u8df3T*(\u5e38\u6570\uff09\u6b21\u5c31\u53ef\u4ee5\u8df3\u5230\u4e00\u4e2a\u5173\u952e\u70b9\u3002\n\n\u663e\u7136\u53ef\u4ee5\u901a\u8fc7\u8d2a\u5fc3\u6765\u9009\u53d6\u8fd9T\u4e2a\u70b9\uff0c \u7136\u540e\u5c0fJf\u6bd4\u8f83\u61d2\uff0c \u5c31\u968f\u673a\u4e86T\u4e2a\u70b9\uff0c \u636e\u67d0\u6bd2\u7624\u8bf4\u590d\u6742\u5ea6\u4e5f\u662f\u6b63\u786e\u7684qwq\u3002\uff08\u8d2a\u5fc3\u7684\u5177\u4f53\u65b9\u6cd5\u672c\u6587\u4e0d\u8fdb\u884c\u5177\u4f53\u4ecb\u7ecd\uff0c \u53ef\u4ee5\u53c2\u80032015\u5e74\u90b9\u900d\u9065\u7684\u56fd\u5bb6\u96c6\u8bad\u961f\u8bba\u6587\uff09\n\n\u6709\u4e86\u4e0a\u9762\u7684\u6027\u8d28\uff0c \u95ee\u9898\u5c31\u7b80\u5355\u4e86\u3002  \u6211\u4eec\u5148\u5bf9\u6811\u8fdb\u884c\u67d3\u8272\u3002 \u5c06\u6811\u4e0a\u5411\u6839\u4e0a\u8df3**\u7b2c\u4e00\u4e2a**\u9047\u5230\u7684**\u5173\u952e\u70b9\u76f8\u540c**\u7684**\u70b9** \u67d3\u4e0a\u76f8\u540c\u7684\u989c\u8272\u3002 \u90a3\u4e48\u5bf9\u4e8e\u8be2\u95eex\uff0cy\uff0ck\u3002 \u5982\u679cxy\u7684\u989c\u8272**\u76f8\u540c**\uff0c \u90a3\u4e48\u663e\u7136\u53ef\u4ee5\u5728O\uff08T\uff09\u7684\u5b9e\u73b0\u5185\u66b4\u529b\u8fdb\u884c\u67e5\u8be2\uff08\u8bb0\u5f55\u4e0b\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u70b9\u7528\u503c\u57df\u5206\u5757\u8fdb\u884c\u67e5\u8be2\uff09\u3002  \u5bf9\u4e8e\u989c\u8272**\u4e0d\u540c**\u7684x\uff0cy\uff0c \u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u8ba8\u8bba\uff1a\n\n![pic1.jpg](https://i.loli.net/2019/08/19/ELoWRh9za7f6TDN.png)\n\n\u60c5\u51b51: \u5982\u4e0a\u56fe\uff0c\u8bb0x\u7684\u989c\u8272\u4e3axx\uff0c y\u7684\u989c\u8272\u4e3ayy\uff0c xx\u548cyy\u5e76\u975e\u7956\u5148-\u540e\u4ee3\u5173\u7cfb\u3002 \u8fd9\u79cd\u60c5\u51b5\u662f\u6700\u7b80\u5355\u7684\uff0c \u76f4\u63a5\u5904\u7406\u4e00\u4e0b\u6563\u5757\uff08x\u5230xx\uff0c y\u5230yy)\u7684\u4fe1\u606f\uff08\u84dd\u8272\uff09 \u7136\u540exx\u5230yy\u7684\u4fe1\u606f\uff08\u7ea2\u8272\uff09 \u53ef\u4ee5\u901a\u8fc7**xx\u5230\u6839\u7684\u4fe1\u606f** + **yy\u5230\u6839\u7684\u4fe1\u606f** - **2*lca(xx, yy)\u5230\u6839\u7684\u4fe1\u606f** \u6765\u5f97\u5230\u3002 \u7136\u540e\u503c\u57df\u5206\u5757\u6765\u6c42k\u5927\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n![pic2.png](https://i.loli.net/2019/08/19/YJyUZRCelbtjOrq.png)\n\n\n\u60c5\u51b52\uff1a\u5982\u4e0a\u56fe\uff0c\u8bb0x\u7684\u989c\u8272\u4e3axx\uff0c y\u7684\u989c\u8272\u4e3ayy, xx\u548cyy\u662f\u7956\u5148=\u540e\u4ee3\u5173\u7cfb\uff0c **\u4e14**lca\uff08x,y\uff09 \u662fxx,yy\u4e2d\u7684\u4e00\u4e2a\u70b9\u7684\u7956\u5148\uff0c \u540c\u65f6\u662f\u5176\u4e2d\u53e6\u5916\u4e00\u4e2a\u70b9\u7684\u540e\u4ee3\u3002\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c \u5982\u679c\u6211\u4eec\u548c\u4e4b\u524d\u4e00\u6837\u5904\u7406\u6563\u5757\uff08x\u5230xx\uff0cy\u5230yy\uff09\u7684\u4fe1\u606f\uff08\u84dd\u8272\uff09\u548cxx\u5230yy\u7684\u4fe1\u606f\uff08\u7ea2\u8272\uff09\u7684\u8bdd\uff0c \u5c31\u4f1a\u53d1\u73b0\u591a\u5904\u7406\u4e86\u56fe\u4e0a<\u7ea2\u84dd\u8272>\u7684\u90e8\u5206, \u800c\u4e14\u591a\u5904\u7406\u4e86\u4e24\u6b21\u3002 \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u5728\u5904\u7406\u6563\u5757\u4fe1\u606f\u7684\u65f6\u5019\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\u5c31\u884c\u4e86\u3002\n\n\u6069\u3002 \u90a3\u4e48\u67e5\u8be2\u5c31\u8bb2\u5b8c\u4e86qwq \u5176\u5b9e\u4fee\u6539\u4e5f\u5f88\u7b80\u5355\uff0c \u76f4\u63a5\u5224\u65ad\u4e00\u4e0b\u6240\u6709\u5173\u952e\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e2d\u662f\u5426\u7ecf\u8fc7\u4fee\u6539\u7684\u70b9\uff0c \u5982\u679c\u7ecf\u8fc7\u7684\u8bdd\u5c31\u5728\u5904\u7406\u7684\u4fe1\u606f\u4e2d\u5355\u6b21O1\u8fdb\u884c\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86>_< (\u6ce8\u610f\u8fd9\u91cc\u9700\u8981O1\u67e5\u8be2\u7684lca\uff0c \u4e0d\u7136\u590d\u6742\u5ea6\u5e26log\uff09\u6548\u7387\u4e3aO\uff08T\uff09\n\n\u5f53T\u53d6sqrt(n)\u65f6\uff0c \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a(n+m)sqrt(n)  \u7a7a\u95f4\u590d\u6742\u5ea6\u4e3an sqrt(n) \n\n\u8c8c\u4f3c\u5c31\u6ca1\u6709\u4ec0\u4e48\u5566qwq \u6709\u4ec0\u4e48\u95ee\u9898\u7684\u8bdd\u6b22\u8fce\u6765\u79c1\u4fe1\u5c0f\u849f\u84bb\u554aqwqwq\n\n\n**\u90a3\u4e48\u4ee3\u7801\u5982\u4e0b\uff1a**\n```\n\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#include <cstdio>\n#include <algorithm>\n#include <ctime>\n#define maxn 400010\n#define maxs 330\n#define re register\n#define FOR(i, l, r) for(re int i = l; i <= r; ++i)\n#define DFR(i, l, r) for(re int i = l; i >= r; --i)\nusing namespace std;\n\nint n, m, c, r, t, x, y, k, tot;\nint sq1, sq2, num, cnt, col, theone, fh, lastans;\nint a[maxn], b[maxn], depth[maxn], cnt1[maxs*2][maxs], cnt2[maxs*2][maxn];\nint qwq[maxn], san1[maxn], san2[maxn], dis[maxn], head[maxn], numb[maxn];\nint fa[maxn], near[maxn], z[maxn], z1[maxn], q[maxn][3];\nint f[maxn][20], lg[maxn], id[maxn], vis[maxn], Depth[maxn];\nstruct hz {\n    int next;\n    int to;\n}h[maxn*2];\n\ninline int read(){\n    int x=0;int f=1;char c=getchar();\n    while(c<'0'||c>'9'){\n        if(c==-1) return 0;\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        x=(x<<1)+(x<<3)+(c^'0');\n        c=getchar();\n    }\n    return x*f;\n}\n\ninline void add(int from, int to) {\n    h[++num].next = head[from];\n    h[num].to = to;\n    head[from] = num;\n}\n\nvoid dfs(int x, int ff, int dep) {\n    fa[x] = ff;\n    id[x] = ++tot;\n\tdepth[x] = depth[ff]+1;\n    vis[tot] = x;\n    Depth[tot] = dep;\n    for(re int i = head[x]; i != 0; i = h[i].next) {\n    \tif(h[i].to == ff)\n    \t  continue;\n    \tdfs(h[i].to, x, dep+1);\n    \tvis[++tot] = x;\n    \tDepth[tot] = dep;\n\t}\n}\n\nvoid RMQ() {\n\tFOR(i, 1, tot)\n      lg[i] = lg[i-1]+(1 << lg[i-1] == i);\n    FOR(i, 1, tot)\n      f[i][0] = i;\n    for(int i = 1; (1<<i) <= tot; i++) {\n        for(int j = 1; j+(1 << i)-1 <= tot; j++) {\n            int A = f[j][i-1];\n            int B = f[j+(1 << (i-1))][i-1];\n            if(Depth[A] <= Depth[B])\n              f[j][i] = A;\n            else\n              f[j][i] = B;\n        }\n    }\n}\n\nint lca(int x, int y) {\n    int r = id[x];\n    int l = id[y];\n    if(r < l)\n      swap(r, l);\n    int k = lg[r-l+1]-1;\n    int A = f[l][k];\n    int B = f[r-(1<<k)+1][k];\n    if(Depth[A] <= Depth[B])\n      return vis[A];\n    else\n      return vis[B];\n}\n\n\nvoid dfs3(int x, int color) { //\u67d3\u8272 \n    if(numb[x] != 0)\n      color = numb[x];\n    near[x] = color; //\u5c5e\u4e8e\u4ec0\u4e48\u7ba1\u8f96\u8303\u56f4 \n    for(re int i = head[x]; i != 0; i = h[i].next) {\n        if(h[i].to == fa[x]) \n          continue;\n        dfs3(h[i].to, color);\n    }\n} \n\ninline void deal(int x, int times) {\n    while(x != 0) {\n        ++cnt1[times][b[a[x]]];\n        ++cnt2[times][a[x]];\n        x = fa[x];  \n    }\n} \n\nint query(int x, int y, int k) { //\u6c42k\u5927 \n    //xy\u5728\u4e00\u4e2a\u989c\u8272\u5757\u91cc, \u5219\u76f4\u63a5\u66b4\u529b\u8df3\u5230lca\n    //xy\u4e0d\u5728\u4e00\u4e2a\u989c\u8272\u5757\u91cc\uff0c \u4e14\u4e00\u90e8\u5206\u8def\u5f84\u91cd\u590d\u8ba1\u7b97-> \u7ecf\u8fc7lca\u540e\u8f6c\u5316\u52a0\u51cf\u6cd5 \n    if(near[x] == near[y]) {  \n        int lc = lca(x, y), xx = x, yy = y, anss = 0;\n        while(x != lc) \n          ++san1[b[a[x]]], ++san2[a[x]], x = fa[x]; \n        while(y != fa[lc]) \n          ++san1[b[a[y]]], ++san2[a[y]], y = fa[y];\n        int tot = 0, now = 1;\n        while(tot+san1[now] < k)\n          tot += san1[now], ++now;\n        FOR(j, (now-1)*sq1+1, now*sq1) \n          if((tot += san2[j]) >= k) {\n              anss = z[j];\n              break;\n          }\n        while(xx != lc) \n          --san1[b[a[xx]]], --san2[a[xx]], xx = fa[xx]; \n        while(yy != fa[lc]) \n          --san1[b[a[yy]]], --san2[a[yy]], yy = fa[yy];\n        return anss;\n    } \n\n    int lc = lca(x, y), LC = lca(z1[near[x]], z1[near[y]]), xx = x, yy = y;\n    theone = -1, fh = 1;\n    if(lca(z1[near[x]], z1[near[y]]) == LC && (lca(lc, z1[near[x]]) == lc || lca(lc, z1[near[y]])) && lc != LC) { //\u9700\u8981\u8f6c\u5316\u52a0\u51cf\u7b54\u6848 \n        theone = lc;\n        san1[b[a[LC]]]--, san2[a[LC]]--;\n\t}\n    while(near[fa[xx]] == near[x]) {\n        if(xx == theone) {\n\t\t    fh *= -1;\n\t\t}\n\t\telse {\n\t\tsan1[b[a[xx]]] += fh, san2[a[xx]] += fh;   \n\t\t}\n\t\tif(xx == 0)\n\t\t  exit(0);\n        xx = fa[xx];\n    }\n    fh = 1;\n    while(near[fa[yy]] == near[y]) {\n        if(yy == theone) {\n        \tfh *= -1;\t\n        \tyy = fa[yy];\n        \tcontinue;\n\t\t} \n        san1[b[a[yy]]] += fh, san2[a[yy]] += fh, yy = fa[yy]; \n    }\n    \n    ++san1[b[a[LC]]];\n    ++san2[a[LC]]; \n    int tot = 0, now = 1, anss = 0;\n    while(tot+san1[now]+cnt1[near[x]][now]+cnt1[near[y]][now]-2*cnt1[numb[LC]][now] < k)\n      tot += san1[now]+cnt1[near[x]][now]+cnt1[near[y]][now]-2*cnt1[numb[LC]][now], ++now;\n    FOR(j, (now-1)*sq1+1, now*sq1)  \n      if((tot += san2[j]+cnt2[near[x]][j]+cnt2[near[y]][j]-2*cnt2[numb[LC]][j]) >= k) {\n          anss = z[j];\n          break;\n      }\n    fh = -1, xx = x, yy = y;\n    while(near[fa[xx]] == near[x]) {\n        if(xx == theone) {\n        \tfh *= -1;\n        \txx = fa[xx];\n        \tcontinue;\n\t\t}  \n        san1[b[a[xx]]] += fh, san2[a[xx]] += fh, xx = fa[xx];   \n    }\n    fh = -1;\n    while(near[fa[yy]] == near[y]) {\n        if(yy == theone) {\n        \tfh *= -1;\n        \tyy = fa[yy];\n        \tcontinue;\n\t\t} \n        san1[b[a[yy]]] += fh, san2[a[yy]] += fh, yy = fa[yy]; \n    }\n    --san1[b[a[LC]]];\n    --san2[a[LC]]; \n    if(lca(z1[near[x]], z1[near[y]]) == LC && (lca(lc, z1[near[x]]) == lc || lca(lc, z1[near[y]])) && lc != LC) { //\u9700\u8981\u8f6c\u5316\u52a0\u51cf\u7b54\u6848 \n        san1[b[a[LC]]]++, san2[a[LC]]++;\n\t}\n    return anss;\n}\n\nsigned main() {\n    srand(19260817);\n    srand(rand());\n    srand(rand());\n    n = read(), m = read();\n    FOR(i, 1, n) {\n        a[i] = read(), z[++z[0]] = a[i];\n        qwq[i] = i;\n    }\n    FOR(i, 1, n-1) {\n        x = read(), y = read();\n        add(x, y);\n        add(y, x);\n    } \n\tdfs(1, 0, 1);\n    RMQ();\n    FOR(i, 1, m) {\n    \tq[i][0] = read(), q[i][1] = read(), q[i][2] = read();\n    \tif(q[i][0] == 0)\n    \t  z[++z[0]] = q[i][2];\n\t}\n\t\n    sort(z+1, z+z[0]+1);\n    z[0] = unique(z+1, z+z[0]+1)-z-1;\n    FOR(i, 1, n) \n      a[i] = lower_bound(z+1, z+z[0]+1, a[i])-z;\n    sq1 = sqrt(z[0]); //\u503c\u57df\u5206\u5757 \n    FOR(i, 1, z[0])\n      b[i] = (i-1)/sq1+1; \n\n    random_shuffle(qwq+1, qwq+n+1); //\u9009\u53d6\u524dsq\u4e2a\u70b9 \n    sq2 = sqrt(n); //\u5173\u952e\u70b9\u7684\u6570\u91cf \n    FOR(i, 1, sq2) \n      z1[++z1[0]] = qwq[i];  \n    FOR(i, 1, sq2) \n      FOR(j, i+1, sq2)\n        z1[++z1[0]] = lca(qwq[i], qwq[j]);\n    sort(z1+1, z1+z1[0]+1); //\u5173\u952e\u70b9\u6392\u5e8f\u5e76\u53bb\u91cd \n    z1[0] = unique(z1+1, z1+z1[0]+1)-z1-1;\n    FOR(i, 1, z1[0]) \n      numb[z1[i]] = i; //\u5173\u952e\u70b9\u7684\u65b0\u5e8f\u53f7 \n    dfs3(1, -2); //\u67d3\u8272\n\n    FOR(i, 1, z1[0]) //\u679a\u4e3e\u6240\u6709\u65b0\u5173\u952e\u70b9(sq\u4e2a) \u8fdb\u884c\u5904\u7406\uff1b\n      deal(z1[i], i);  \n      \n    FOR(i, 1, m) {\n    \tk = q[i][0], x = q[i][1], y = q[i][2];\n    \tint sizz = depth[x]+depth[y]-2*depth[lca(x, y)]+1;\n    \tif(k == 0) {\n    \t\ty = lower_bound(z+1, z+z[0]+1, q[i][2])-z;\n    \t\tFOR(j, 1, z1[0]) {\n    \t\t\tif(lca(z1[j], x) != x)\n    \t\t\t  continue;\n    \t\t\t--cnt1[j][b[a[x]]];\n    \t\t\t--cnt2[j][a[x]];\n    \t\t\t++cnt1[j][b[y]];\n    \t\t\t++cnt2[j][y];\n\t\t\t}\n\t\t\ta[x] = y;\n\t\t\tcontinue;\n\t\t}\n\t\tif(sizz < k) {\n\t\t\tputs(\"invalid request!\");\n\t\t\tcontinue;\n\t\t}\n        printf(\"%d\\n\", query(x, y, sizz-k+1));\n    }\n}\n```",
        "postTime": 1566171195,
        "uid": 66965,
        "name": "Juan_feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "# \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u68f5\u6811,\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c,\u652f\u6301\u67e5\u8be2\u6811\u94fe\u4e0a\u7b2c $k$ \u5927\u6570\u548c\u5355\u70b9\u4fee\u6539.\n\n# \u5206\u6790\n\n\u5148\u628a\u4fee\u6539\u64cd\u4f5c\u53bb\u6389\u5f00\u59cb([\u9898\u76ee](https://www.luogu.com.cn/problem/P2633)),\u4e0d\u5e26\u4fee\u6539\u6811\u94fe\u7b2c $k$ \u5927,\u8981\u67e5\u8be2\u7b2c $k$ \u5927\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u7528\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u7ef4\u62a4(~~\u5e9f\u8bdd~~),\u4f8b\u5982\u6743\u503c\u7ebf\u6bb5\u6811,\u5e73\u8861\u6811\u7b49\u7b49.\n\n\u5148\u4ece\u4e00\u4e2a\u770b\u4f3c\u4e0d\u76f8\u5173\u7684\u95ee\u9898\u5f00\u59cb\u8003\u8651,\u8ba1\u7b97\u4e00\u6761\u6811\u94fe\u4e0a\u6240\u6709\u6570\u7684\u548c\u9700\u8981\u600e\u4e48\u529e?\n\n\u5f88\u663e\u7136\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u6811\u5256\u4e00\u4e0b,\u518d\u7528\u524d\u7f00\u548c\u4f18\u5316,\u53ef\u4ee5\u505a\u5230 $\\mathcal{O}(log_2N)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5355\u8bcd\u67e5\u8be2.\n\n\u7528\u8fd9\u4e2a\u65b9\u6cd5\u505a\u8fd9\u9053\u9898\u53ef\u4ee5\u60f3\u5230\u6811\u5256\u4e4b\u540e\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u5728DFS\u5e8f\u4e2d\u524d\u7f00\u6bcf\u4e2a\u6570\u51fa\u73b0\u6b21\u6570,\u518d\u53ef\u4ee5\u8ba1\u7b97\u533a\u95f4\u6bcf\u4e2a\u6570\u51fa\u73b0\u6b21\u6570,\u627e\u51fa\u8fd9\u6761\u6811\u94fe\u4e2d\u7684\u7684\u6bcf\u4e00\u6bb5\u8ba1\u7b97\u7684\u533a\u95f4\u7684\u5f00\u548c\u7ed3\u5c3e\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u7f16\u53f7,\u518d\u901a\u8fc7\u7c7b\u4f3c\u524d\u7f00\u548c\u8ba1\u7b97\u533a\u95f4\u548c\u7684\u65b9\u6cd5\u8ba1\u7b97,\u5728\u6811\u4e0a\u4e8c\u5206\u67e5\u8be2\u7b2c $k$ \u5927\u6570,\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a $\\mathcal{O}(log_2^2N)$.\n\n\u4f46\u662f\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u5f88\u4f18\u79c0,\u53ef\u4ee5\u518d\u7ed3\u5408\u5bb9\u65a5\u7684\u601d\u60f3,$sum_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u8fd9\u4e00\u6761\u94fe\u4e0a\u6240\u6709\u6570\u7684\u548c,\u90a3\u4e48\u4e00\u6761 $u$ \u5230 $v$ \u6811\u94fe\u7684\u548c\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a $sum_u+sum_v-sum_{LCA(u,v)}*2+val_{LCA(u,v)}$,\u5176\u4e2d $-sum_{LCA(u,v)}+val_{LCA(u,v)}$ \u53ef\u4ee5\u8868\u793a\u4e3a $sum_{father_{LCA(u,v)}}$.\n\n\u901a\u8fc7\u4e0a\u9762\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u60f3\u5230\u7528\u4e3b\u5e2d\u6811\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u8fd9\u4e00\u6761\u94fe\u4e0a\u9762\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570,\u6700\u540e\u53ea\u9700\u8981\u5c06\u8fd9\u6837\u56db\u9897\u4e3b\u5e2d\u6811\u8fdb\u884c\u52a0\u51cf\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u6811\u4e0a\u4e8c\u5206,\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal{O}(log_2N)$ \u7684.\n\n\u518d\u56de\u5230\u672c\u9898,\u672c\u9898\u6709\u4fee\u6539,\u4f46\u662f\u4e3b\u5e2d\u6811\u663e\u7136\u662f\u6ca1\u6cd5\u76f4\u63a5\u505a\u5230\u4fee\u6539\u7684.\u90a3\u4e48\u53ef\u4ee5\u4ece\u6bcf\u4e2a\u4fee\u6539\u6240\u9020\u6210\u7684\u5f71\u54cd\u6765\u770b,\u4ecd\u7136\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u8fd9\u4e00\u6761\u6811\u94fe\u4e0a\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570,\u90a3\u4e48\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u503c\u6d88\u5931\u4f1a\u9020\u6210\u7684\u5f71\u54cd\u53ea\u4f1a\u5728\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u4e2d,\u5b83\u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9(\u5305\u62ec\u81ea\u5df1)\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e2d\u51cf\u53bb $val_{now}$,\u6dfb\u52a0\u4e00\u4e2a\u6570\u540c\u7406\u52a0\u4e0a.\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u7ed9\u4e00\u9897\u5b50\u6811\u52a0\u4e0a\u4e00\u4e2a\u503c,\u5728DFS\u5e8f\u4e2d,\u6bcf\u4e00\u9897\u5b50\u6811\u7684\u8282\u70b9\u7684\u7f16\u53f7\u90fd\u662f\u8fde\u7eed\u7684,\u6240\u4ee5\u5c31\u53d8\u6210\u4e86\u533a\u95f4\u52a0,\u7136\u540e\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u5c31\u597d\u4e86.\n\n# \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define REP(i,first,last) for(int i=first;i<=last;++i)\n#define DOW(i,first,last) for(int i=first;i>=last;--i)\nusing namespace std;\nconst int MAXN=4e5+7;\nconst int MAX_NUM=1e8;\nint N,M,val[MAXN];\nint edge_head[MAXN];\nint edge_cnt=0;\nstruct Edge\n{\n\tint to,next;\n}edge[MAXN];\n#define FOR(now) for(int i_edge=edge_head[now];i_edge;i_edge=edge[i_edge].next)\n#define TO edge[i_edge].to\nvoid AddEdge(int form,int to)\n{\n\tedge[++edge_cnt].to=to;\n\tedge[edge_cnt].next=edge_head[form];\n\tedge_head[form]=edge_cnt;\n}\n\nint kth_father[MAXN][25];//\u6bd4\u8f83\u61d2,\u76f4\u63a5\u7528\u4e86\u500d\u589eLCA,\u4e00\u4e2a\u88f8\u7684LCA,\u5982\u679c\u4e0d\nbool visit[MAXN];\nint deep[MAXN],father[MAXN];\nint tree_size[MAXN];\nint dfs[MAXN],dfs_cnt=0;\nint id[MAXN];\nvoid DFS(int now)\n{\n\tdeep[now]=deep[father[now]]+1;\n\tkth_father[now][0]=father[now];\n\ttree_size[now]=1;//\u9700\u8981\u8bb0\u5f55\u5b50\u6811\u5927\u5c0f\n\tdfs[++dfs_cnt]=now;//\u8bb0\u5f55\u4e0bdfs\u5e8f\n\tid[now]=dfs_cnt;\n\tREP(i,0,22)\n\t{\n\t\tkth_father[now][i+1]=kth_father[kth_father[now][i]][i];\n\t}\n\tFOR(now)\n\t{\n\t\tif(father[now]!=TO)\n\t\t{\n\t\t\tfather[TO]=now;\n\t\t\tDFS(TO);\n\t\t\ttree_size[now]+=tree_size[TO];\n\t\t}\n\t}\n}\nint LCA(int x,int y)\n{\n\tif(deep[x]<deep[y])\n\t{\n\t\tswap(x,y);\n\t}\n\tDOW(i,22,0)\n\t{\n\t\tif(deep[kth_father[x][i]]>=deep[y])\n\t\t{\n\t\t\tx=kth_father[x][i];\n\t\t}\n\t\tif(x==y)\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t}\n\tDOW(i,22,0)\n\t{\n\t\tif(kth_father[x][i]!=kth_father[y][i])\n\t\t{\n\t\t\tx=kth_father[x][i];\n\t\t\ty=kth_father[y][i];\n\t\t}\n\t}\n\treturn father[x];\n}\nstruct SegmentTree//\u7ebf\u6bb5\u6811\u90e8\u5206\n{\n\tint sum,lson,rson;\n}sgt[MAXN*32];\nint sgt_cnt=0;\nint root[MAXN];\nint Lowbit(int now)\n{\n\treturn now&-now;\n}\n#define LSON sgt[now].lson\n#define RSON sgt[now].rson\n#define MIDDLE ((left+right)>>1)\n#define LEFT LSON,left,MIDDLE\n#define RIGHT RSON,MIDDLE+1,right\nvoid PushUp(int now)\n{\n\tsgt[now].sum=sgt[LSON].sum+sgt[RSON].sum;\n}\nvoid Updata(int num,int val,int &now,int left=1,int right=MAX_NUM)//\u4fee\u6539\u64cd\u4f5c\u4e0d\u591a\u8bf4\u4e86\n{\n\tif(num<left||right<num)\n\t{\n\t\treturn;\n\t}\n\tif(!now)\n\t{\n\t\tnow=++sgt_cnt;\n\t}\n\tif(left==right)\n\t{\n\t\tsgt[now].sum+=val;\n\t\treturn;\n\t}\n\tUpdata(num,val,LEFT);\n\tUpdata(num,val,RIGHT);\n\tPushUp(now);\n}\nvoid Change(int p,int w,int check=1)//\u66ff\u6362\u64cd\u4f5c\n{\n\tint left=id[p],right=id[p]+tree_size[p]-1;//\u8ba1\u7b97\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\n\tif(check)//\u5f00\u59cb\u52a0\u6570\u65f6\u4e0d\u9700\u8981\u5220\u6570\n\t{\n\t\tfor(int i=left;i<=N;i+=Lowbit(i))//\u5c06\u8fd9\u4e2a\u6570\u5220\u53bb,\u540c\u533a\u95f4\u4fee\u6539\u6811\u72b6\u6570\u7ec4\n\t\t{\n\t\t\tUpdata(val[p],-1,root[i]);\n\t\t}\n\t\tfor(int i=right+1;i<=N;i+=Lowbit(i))\n\t\t{\n\t\t\tUpdata(val[p],1,root[i]);\n\t\t}\n\t\tval[p]=w;\n\t}\n\tfor(int i=left;i<=N;i+=Lowbit(i))//\u540c\u7406\u52a0\u4e0a\u65b0\u7684\u6570\n\t{\n\t\tUpdata(val[p],1,root[i]);\n\t}\n\tfor(int i=right+1;i<=N;i+=Lowbit(i))\n\t{\n\t\tUpdata(val[p],-1,root[i]);\n\t}\n}\nint add_cnt;\nint dec_cnt;\nint add_root[MAXN];//\u8bb0\u5f55\u52a0\u4e0a/\u5220\u6389\u7684\u6811\u7684\u5f53\u524d\u8282\u70b9\nint dec_root[MAXN];\nint GetSum()//\u8ba1\u7b97\u5f53\u524d\u8303\u56f4\u7684\u6570\u7684\u4e2a\u6570\n{\n\tint result=0;\n\tREP(i,1,add_cnt)\n\t{\n\t\tresult+=sgt[add_root[i]].sum;\n\t}\n\tREP(i,1,dec_cnt)\n\t{\n\t\tresult-=sgt[dec_root[i]].sum;\n\t}\n\treturn result;\n}\nint GetSumRight()//\u8ba1\u7b97\u53f3\u5b50\u6811\u7684\u6570\u7684\u4e2a\u6570\n{\n\tint result=0;\n\tREP(i,1,add_cnt)\n\t{\n\t\tresult+=sgt[sgt[add_root[i]].rson].sum;\n\t}\n\tREP(i,1,dec_cnt)\n\t{\n\t\tresult-=sgt[sgt[dec_root[i]].rson].sum;\n\t}\n\treturn result;\n}\nvoid GetRootLeft()//\u5c06\u5f53\u524d\u8282\u70b9\u53d8\u4e3a\u53f3\u5b50\u8282\u70b9\n{\n\tREP(i,1,add_cnt)\n\t{\n\t\tadd_root[i]=sgt[add_root[i]].lson;\n\t}\n\tREP(i,1,dec_cnt)\n\t{\n\t\tdec_root[i]=sgt[dec_root[i]].lson;\n\t}\n}\nvoid GetRootRight()//\u53d8\u4e3a\u5de6\u5b50\u8282\u70b9\n{\n\tREP(i,1,add_cnt)\n\t{\n\t\tadd_root[i]=sgt[add_root[i]].rson;\n\t}\n\tREP(i,1,dec_cnt)\n\t{\n\t\tdec_root[i]=sgt[dec_root[i]].rson;\n\t}\n}\nint QueryKth(int k,int left=1,int right=MAX_NUM)//\u67e5\u8be2\u90e8\u5206\n{\n\tif(left==right)\n\t{\n\t\treturn left;\n\t}\n\tint sum=GetSumRight();\n\tif(sum>=k)//\u5982\u679c\u53f3\u8fb9\u591f\u5c31\u67e5\u8be2\u53f3\u8fb9\n\t{\n\t\tGetRootRight();\n\t\treturn QueryKth(k,MIDDLE+1,right);\n\t}\n\tGetRootLeft();\n\treturn QueryKth(k-sum/*\u9700\u8981\u51cf\u53bb\u53f3\u5b50\u6811\u4e2d\u6570\u7684\u4e2a\u6570*/,left,MIDDLE);\n}\nvoid Kth(int u,int v,int k)\n{\n\tint lca=LCA(u,v);\n\t//\u6309\u516c\u5f0f\u8ba1\u7b97\n\tint add_1=id[u];\n\tint add_2=id[v];\n\tint dec_1=id[lca];\n\tint dec_2=id[father[lca]];\n\tadd_cnt=0;\n\tdec_cnt=0;\n\tfor(int i=add_1;i;i-=Lowbit(i))\n\t{\n\t\tadd_root[++add_cnt]=root[i];\n\t}\n\tfor(int i=add_2;i;i-=Lowbit(i))\n\t{\n\t\tadd_root[++add_cnt]=root[i];\n\t}\n\tfor(int i=dec_1;i;i-=Lowbit(i))\n\t{\n\t\tdec_root[++dec_cnt]=root[i];\n\t}\n\tfor(int i=dec_2;i;i-=Lowbit(i))\n\t{\n\t\tdec_root[++dec_cnt]=root[i];\n\t}\n\tif(GetSum()<k)//\u5982\u679c\u603b\u5171\u4e5f\u6ca1\u6709k\u5c31\u662f\u4e0d\u5b58\u5728\n\t{\n\t\tprintf(\"invalid request!\\n\");\n\t\treturn;\n\t}\n\tprintf(\"%d\\n\",QueryKth(k));\n}\nint main()\n{\n\tscanf(\"%d%d\",&N,&M);\n\tREP(i,1,N)\n\t{\n\t\tscanf(\"%d\",&val[i]);\n\t}\n\tint fa,son;\n\tREP(i,1,N-1)\n\t{\n\t\tscanf(\"%d%d\",&fa,&son);\n\t\tAddEdge(fa,son);\n\t\tAddEdge(son,fa);\n\t}\n\tDFS(1);//\u5904\u7406\u6811\u4e0a\u7684\u4fe1\u606f\n\tREP(i,1,N)//\u628a\u6570\u52a0\u5165\n\t{\n\t\tChange(i,val[i],0);\n\t}\n\tint k,x,y;\n\tREP(i,1,M)\n\t{\n\t\tscanf(\"%d%d%d\",&k,&x,&y);\n\t\tif(k==0)\n\t\t{\n\t\t\tChange(x,y);//\u4fee\u6539\n\t\t}\n\t\tif(k)\n\t\t{\n\t\t\tKth(x,y,k);//\u67e5\u8be2\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1583840729,
        "uid": 86625,
        "name": "Limit",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u4e00\u4e9b\u5957\u8def\u7684\u7efc\u5408\u5e94\u7528:\n\n\u8981\u6c42\u7b2ck\u5927,\u4e3b\u5e2d\u6811\u3002\n\n\u8981\u67e5\u4e24\u70b9\u95f4\u8def\u5f84,\u5904\u7406\u5230\u6839\u7684\u524d\u7f00\u548c,\u6c42\u51falca\u540e\u5dee\u5206\u3002\n\n\u8981\u5e26\u4fee,\u53d1\u73b0\u6bcf\u6b21\u6539\u7684\u662f\u5b50\u6811\u3002\u90a3\u4e48\u53ef\u4ee5\u8003\u8651dfs\u5e8f,\u5c31\u6210\u4e86\u6bcf\u6b21\u6539\u533a\u95f4\u3002\n\n\u6539\u533a\u95f4,\u518d\u5dee\u5206\u4e00\u4e0b\u5c31\u6210\u4e86\u5355\u70b9\u4fee\u6539\u67e5\u8be2\u524d\u7f00\u3002\u76f4\u63a5\u4e0a\u6811\u5957\u6811\u5373\u53ef\u3002\n\n(\u5176\u5b9e\u5199\u8fd9\u7bc7\u9898\u89e3\u662f\u56e0\u4e3a\u88ab\u6211\u81ea\u5df1\u5199\u7684\u6811\u5957\u6811\u4f18\u7f8e\u5230\u4e86,\u8c01\u8bf4\u6811\u5957\u6811\u53ea\u80fd\u6076\u5fc3\u7801\u91cf\u5927?)\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=8e4+50,M=2e7+50,K=1e8;\nint n,q,a[N],ver[N*2],nxt[N*2],head[N],tot,f[N][17],d[N],dfn[N],rr[N],cnt,r[N];\nint lc[M],rc[M],sum[M];\nstruct node{\n    int n,a[N];\n    int calc(){int ret=0;for(int i=1;i<=n;i++)ret+=sum[rc[a[i]]];return ret;}\n    void L(){for(int i=1;i<=n;i++)a[i]=lc[a[i]];}\n    void R(){for(int i=1;i<=n;i++)a[i]=rc[a[i]];}\n    void init(int x){n=0;for(;x;x-=x&-x)a[++n]=r[x];}\n}A,B,C,D;\nint in(){\n    int x=0,c;\n    while(!isdigit(c=getchar()));\n    while(isdigit(c))x=x*10+(c^48),c=getchar();\n    return x;\n}\nvoid add(int x,int y){ver[++tot]=y;nxt[tot]=head[x];head[x]=tot;}\nvoid dfs(int x,int ff){\n    f[x][0]=ff;d[x]=d[ff]+1;dfn[x]=++cnt;\n    for(int i=0;i<16;i++)f[x][i+1]=f[f[x][i]][i];\n    for(int i=head[x],y;i;i=nxt[i])if((y=ver[i])!=ff)dfs(y,x);\n    rr[x]=cnt;\n}\nint lca(int x,int y){\n    if(d[x]<d[y])swap(x,y);\n    for(int i=16;~i;i--)if(d[f[x][i]]>=d[y])x=f[x][i];\n    if(x==y)return x;\n    for(int i=16;~i;i--)if(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n    return f[x][0];\n}\nvoid change(int &x,int l,int r,int p,int d){\n    if(!x)x=++cnt;sum[x]+=d;\n    if(l==r)return;int mid=(l+r)>>1;\n    if(p<=mid)change(lc[x],l,mid,p,d);\n    else change(rc[x],mid+1,r,p,d);\n}\nvoid change(int x,int p,int d){for(;x<=n;x+=x&-x)change(r[x],1,K,p,d);}\nint query(int l,int r,int d){\n    if(l==r)return l;\n    int mid=(l+r)>>1,dat=A.calc()+B.calc()-C.calc()-D.calc();\n    if(dat>=d){A.R(),B.R(),C.R(),D.R();return query(mid+1,r,d);}\n    A.L(),B.L(),C.L(),D.L();return query(l,mid,d-dat);\n}\nint main(){\n    n=in();q=in();\n    for(int i=1;i<=n;i++)a[i]=in();\n    for(int i=1,x,y;i<n;i++)add(x=in(),y=in()),add(y,x);\n    dfs(1,0);cnt=0;\n    for(int i=1;i<=n;i++)change(dfn[i],a[i],1),change(rr[i]+1,a[i],-1);\n    for(int i=1,k,x,y;i<=q;i++){\n        k=in();x=in();y=in();\n        if(k){\n            int z=lca(x,y);if(d[x]+d[y]-2*d[z]+1<k){puts(\"invalid request!\");continue;}\n            A.init(dfn[x]);B.init(dfn[y]);C.init(dfn[z]);D.init(dfn[f[z][0]]);\n            printf(\"%d\\n\",query(1,K,k));\n        }\n        else change(dfn[x],a[x],-1),change(rr[x]+1,a[x],1),change(dfn[x],a[x]=y,1),change(rr[x]+1,y,-1);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1574948265,
        "uid": 142099,
        "name": "jiqimao",
        "ccfLevel": 0,
        "title": "P4175\u9898\u89e3"
    },
    {
        "content": "\u65e2\u7136\u5927\u5bb6\u90fd\u8bf4\u6709$4$\u4e2a$log$\u7684\u505a\u6cd5\uff0c\u90a3\u6211\u5c31\u6765\u8865\u4e00\u53d1\u9898\u89e3\u8ddf\u4e0a\u5427\u3002\n\n\u6ca1\u6709\u4ec0\u4e48\u82b1\u6837\uff0c\u4e8c\u5206\u7b54\u6848+\u6811\u5256+\u6811\u5957\u6811\u3002\u8fd9\u91cc\u7684\u6811\u5957\u6811\u6211\u5199\u7684\u662f\u6811\u72b6\u6570\u7ec4\u5957\u503c\u57df\u7ebf\u6bb5\u6811\uff0c\u5c3d\u91cf\u8ba9\u5e38\u6570\u5c0f\u4e00\u70b9\uff08\u800c\u4e14\u4e5f\u6bd4splay\u597d\u6253\uff09\n\n\u7136\u800c\u6211\u4e00\u5f00\u59cb\u8fd9\u6837\u4ea4\u4e0a\u53bb\u662fT\u4e86\u7b2c6\u4e2a\u70b9\u7684\uff0c\u5f00\u4e86O2\u4e5fT\n\n\u540c\u65f6\u56e0\u4e3a\u4e00\u4e9b\u777f\u667a\u539f\u56e0\u6211\u8fd8WA\u4e86\u7b2c9\u4e2a\u70b9\n\n\u6211\u4e00\u7b97\u590d\u6742\u5ea64\u4e2alog\uff0c\u611f\u89c9\u8ddf\u4e00\u4e2an\u5dee\u522b\u4e0d\u5927\u554a\u3002\u3002\u3002\n\n\u8981\u4e0d\u6211\u5199\u4e2a\u8be2\u95ee$O(n)$\u7684\u66b4\u529b\u4ea4\u4e0a\u53bb\u770b\u770b\uff1f\n\n\uff08\u66b4\u529b\u7684\u5199\u6cd5\u5c31\u662f$O(n)$\u628a\u8def\u5f84\u4e0a\u7684\u70b9\u5168\u90fd\u53d6\u51fa\u6765\uff0c\u7136\u540e\u7528STL\u7684std::nth_element\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u4e5f\u662f$O(n)$\uff09\n\n\u4e8b\u5b9e\u8bc1\u660e\u5dee\u522b\u8fd8\u662f\u5f88\u5927\u7684\uff0c\u66b4\u529b\u53ea\u8fc7\u4e86\u7b2c1\u548c6\u4e24\u4e2a\u70b9\u3002\n\n\u51b7\u9759\u5206\u6790\uff0c\u6211\u610f\u8bc6\u5230\u7b2c6\u4e2a\u70b9\u5fc5\u6709\u7384\u673a\u3002\n\n\u4e8e\u662f\u6211\u628a\u4e24\u4e2a\u7a0b\u5e8f\u62fc\u5728\u4e86\u4e00\u8d77\u3002\u8bbe$all$\u662f\u503c\u57df\u5927\u5c0f\uff0c\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee\u7684\u65f6\u5019\u5148\u6570\u4e00\u4e0b\u8def\u5f84\u4e0a\u4e00\u5171\u591a\u5c11\u4e2a\u7ed3\u70b9\uff0c\u8bbe\u4e3a$cnt$\n\n\u5982\u679c$c*cnt<log^2(all)*log^2(n)$\uff0c\u5c31\u8dd1\u66b4\u529b\uff0c\u5426\u5219\u5c31\u8dd14\u4e2alog\u3002\u5176\u4e2d$c$\u662f\u5e38\u6570\uff0c\u6211\u53d67\u53d610\u90fd\u8bd5\u4e86\u4e00\u4e0b\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u53d6\u5c0f\u4e86\u5c31\u4f1aT\u6210\u5b8c\u5168\u66b4\u529b\n\n## \u6ca1\u5f00O2\u8fc7\u4e86\uff0c\u4f60\u6ca1\u6709\u770b\u9519\n\n```cpp\n#include <cctype>\n#include <cstdio>\n#include <climits>\n#include <algorithm>\n#include <cmath>\n#include <functional>\n\ntemplate <typename T> inline void read(T& t) {\n    int f = 0, c = getchar(); t = 0;\n    while (!isdigit(c)) f |= c == '-', c = getchar();\n    while (isdigit(c)) t = t * 10 + c - 48, c = getchar();\n    if (f) t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T& t, Args&... args) {\n    read(t); read(args...);\n}\ntemplate <typename T> inline bool chkMin(T& x, const T& y) { return y < x ? (x = y, true) : false; }\ntemplate <typename T> inline bool chkMax(T& x, const T& y) { return x < y ? (x = y, true) : false; }\n\n#ifdef WIN32\n#define LLIO \"%I64d\"\n#else\n#define LLIO \"%lld\"\n#endif\t// WIN32 long long\n#define rep(I, A, B) for (int I = (A); I <= (B); ++I)\n#define rrep(I, A, B) for (int I = (A); I >= (B); --I)\n#define erep(I, X) for (int I = head[X]; I; I = next[I])\n\nconst int maxn = 8e4 + 207;\nint v[maxn << 1], head[maxn], next[maxn << 1], a[maxn];\nint dep[maxn], son[maxn], top[maxn], size[maxn], fa[maxn], dfn[maxn], b[maxn];\nint n, m, etot, xys;\n\ninline void ae(int x, int y) {\n    v[++etot] = y; next[etot] = head[x]; head[x] = etot;\n    v[++etot] = x; next[etot] = head[y]; head[y] = etot;\n}\nvoid dfs(int x) {\n    size[x] = 1; dep[x] = dep[fa[x]] + 1;\n    erep(i, x) if (v[i] ^ fa[x]) {\n        fa[v[i]] = x;\n        dfs(v[i]);\n        size[x] += size[v[i]];\n        if (size[v[i]] > size[son[x]]) son[x] = v[i];\n    }\n}\nvoid dfs(int x, int t) {\n    top[x] = t; dfn[x] = ++xys; b[xys] = a[x];\n    if (son[x]) dfs(son[x], t);\n    erep(i, x) if (v[i] ^ fa[x] && v[i] ^ son[x])\n        dfs(v[i], v[i]);\n}\n\nint sum[maxn << 8], left[maxn << 8], right[maxn << 8];\nint tot, all, logall, logn;\n\nvoid insert(int &curr, int l, int r, int pos, int val) {\n    if (!curr) curr = ++tot;\n    sum[curr] += val;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    if (pos <= mid) insert(left[curr], l, mid, pos, val);\n    else insert(right[curr], mid + 1, r, pos, val);\n}\nint querySum(int curr, int lb, int rb, int l, int r) {\n    if (!curr || l > rb || r < lb) return 0;\n    if (l <= lb && r >= rb) return sum[curr];\n    int mid = (lb + rb) >> 1;\n    return querySum(left[curr], lb, mid, l, r) + querySum(right[curr], mid + 1, rb, l, r);\n}\n\nint root[maxn];\ninline int greaterBit(int l, int r, int x) {\n    int ret = 0;\n    for (; r; r -= r & -r) ret += querySum(root[r], 0, all, x + 1, all);\n    for (--l; l; l -= l & -l) ret -= querySum(root[l], 0, all, x + 1, all);\n    return ret;\n}\ninline void modify(int x, int val, int cnt) {\n    for (; x <= n; x += x & -x) insert(root[x], 0, all, val, cnt);\n}\n\ninline void modify(int x, int y) {\n    int ov = b[dfn[x]];\n    a[x] = b[dfn[x]] = y;\n    modify(dfn[x], ov, -1);\n    modify(dfn[x], y, 1);\n}\ninline int queryGreater(int x, int y, int val) {\n    int ans = 0;\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) {\n            ans += greaterBit(dfn[top[y]], dfn[y], val);\n            y = fa[top[y]];\n        } else {\n            ans += greaterBit(dfn[top[x]], dfn[x], val);\n            x = fa[top[x]];\n        }\n    }\n    if (dep[x] < dep[y]) ans += greaterBit(dfn[x], dfn[y], val);\n    else ans += greaterBit(dfn[y], dfn[x], val);\n    return ans;\n}\ninline int lca(int x, int y) {\n    if (x == y) return x;\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]]) y = fa[top[y]];\n        else x = fa[top[x]];\n    }\n    return dep[x] < dep[y] ? x : y;\n}\nint tmp[maxn];\ninline int force(int x, int y, int l, int k) {\n    int tp = 0;\n    for (; x ^ l; x = fa[x]) tmp[++tp] = a[x];\n    for (; y ^ l; y = fa[y]) tmp[++tp] = a[y];\n    tmp[++tp] = a[l];\n    std::nth_element(tmp + 1, tmp + k, tmp + tp + 1, std::greater<int>());\n    return tmp[k];\n}\ninline int queryKth(int x, int y, int k) {\n    int l = lca(x, y);\n    int cnt = dep[x] + dep[y] - 2 * dep[l] + 1;\n    if (cnt < k) return -1;\n    if (10 * cnt < logall * logall * logn * logn) return force(x, y, l, k);\n    int left = 0, right = all;\n    while (left <= right) {\n        int mid = (left + right) >> 1;\n        int g = queryGreater(x, y, mid);\n        if (g < k) right = mid - 1;\n        else left = mid + 1;\n    }\n    return right + 1;\n}\n\nstruct Query {\n    int k, x, y;\n};\nQuery qs[maxn];\n\nint main() {\n    read(n, m);\n    rep(i, 1, n) read(a[i]), chkMax(all, a[i]);\n    rep(i, 1, n - 1) {\n        int x, y; read(x, y); ae(x, y);\n    }\n    rep(i, 1, m) {\n        read(qs[i].k, qs[i].x, qs[i].y);\n        if (!qs[i].k) chkMax(all, qs[i].y);\n    }\n    ++all;\n    double lg2 = log(2);\n    logn = log(n) / lg2;\n    logall = log(all) / lg2;\n    dfs(1); dfs(1, 1);\n    rep(i, 1, n) modify(i, b[i], 1);\n    rep(i, 1, m) {\n        int k = qs[i].k, x = qs[i].x, y = qs[i].y;\n        if (!k) modify(x, y);\n        else {\n            int ans = queryKth(x, y, k);\n            if (~ans) printf(\"%d\\n\", ans);\n            else puts(\"invalid request!\");\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1538676276,
        "uid": 72071,
        "name": "GKxx",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "```cpp\n//\u6c42\u53ef\u4fee\u6539\u7684\u591a\u4e2a\u533a\u95f4\u7b2ck\u5927  \n//\u5173\u952e\u8bcd:\u6811\u94fe\u5256\u5206\uff0c\u4e3b\u5e2d\u6811\uff0c\u6811\u72b6\u6570\u7ec4(bit)\u5957\u6743\u503c\u7ebf\u6bb5\u6811\n//\u4e0d\u540c\u7684\u5ef6\u8fdf\u65f6\u95f4\u6700\u591a160000\u4e2a\uff0c\u5148\u79bb\u6563\u5316\u624d\u80fd\u641e\u6743\u503c\u7ebf\u6bb5\u6811\n//\u4e3b\u5e2d\u6811\u5b58\u4e00\u5f00\u59cb\u6bcf\u4e2a\u70b9\u7684\u503c\uff08\u5fc5\u987b\u8981\uff0c\u4e0d\u7136MLE\uff0cQAQ\uff09\n//n\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u4fee\u6539\u503c\uff0c\u70b9\u4e0a\u6743\u503c\u8868\u793a\u542b\u4e49\u4e0e\u6811\u72b6\u6570\u7ec4\u7c7b\u4f3c\n//\u6bcf\u6b21\u4fee\u6539lgn\u4e2a\u7ebf\u6bb5\u6811\uff08\u5176\u5b9e\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u53ea\u8981\u6539\u4e00\u6761\u94fe\uff09\n//\u67e5\u8be2\u5c31\u662f\u539f\u6765\u7684\u503c\u52a0\u4e0a\u4fee\u6539\u7684\u503c\n//\u603b\u4e4b\u6240\u6709\u7684\u67e5\u8be2\u90fd\u53ef\u4ee5\u770b\u6210\u4e24\u4e2a\u524d\u7f00\u548c\u7684\u5dee\n//\u67e5\u8be2\u65f6\u6240\u6709\u67e5\u8be2\u6d89\u53ca\u7684\u7ebf\u6bb5\u6811\u540c\u65f6\u5411\u5de6/\u53f3\u5b69\u5b50\u79fb\u52a8\n//\u5199\u6210\u4e86\u6c42\u7b2ck\u5c0fwa\u4e86\u597d\u591a\u53d1\u6211\u662f\u4e2a\u667a\u969c\n#include<cstdio>\n#include<algorithm>\nint head[80005],n,m,t[80005],k[80005],a[80005],b[80005],num,cnt,tot;\nstruct node{int to,next;}e[160005];\nint dep[80005],fa[80005],T,c[160005];\nvoid add(int u,int v){e[++num]=(node){v,head[u]},head[u]=num;}\nint find(int x)\n{\n\tint l=1,r=tot;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(c[mid]==x)return mid;\n\t\tif(c[mid]<x)l=mid+1;else r=mid-1;\n\t}\n}\nint top[80005],son[80005],s[80005];\nvoid dfs1(int u)\n{\n\tdep[u]=dep[fa[u]]+1;s[u]=1;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;if(v==fa[u])continue;\n\t\tfa[v]=u;dfs1(v);\n\t\tif(s[v]>s[son[u]])son[u]=v;\n\t}\n}\nint p[80005],dfn[80005];\nvoid dfs2(int u,int root)\n{\n\ttop[u]=root;dfn[u]=++T;p[T]=u;\n\tif(son[u])dfs2(son[u],root);else return;\n\tfor(int i=head[u];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]||v==son[u])continue;\n\t\tdfs2(v,v);\n\t}\n}\nint lowbit(int x){return x&(-x);}\nint sum[6400005],lc[6400005],rc[6400005];\nvoid insert(int&id,int l,int r,int x,int val)\n{\n\tif(!id)id=++T;\n\tsum[id]+=val;\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tif(x<=mid)insert(lc[id],l,mid,x,val);\n\telse insert(rc[id],mid+1,r,x,val);\n}\nvoid build(int&id,int last,int l,int r,int x)\n{\n\tid=++T;sum[id]=sum[last]+1;\n\tif(l==r)return;\n\tint mid=l+r>>1;\n\tlc[id]=lc[last],rc[id]=rc[last];\n\tif(x<=mid)build(lc[id],lc[last],l,mid,x);\n\telse build(rc[id],rc[last],mid+1,r,x);\n}\nint len1,len2,ql[160005],qr[160005];\nint trquery(int l,int r,int k)\n{\n\tif(l==r)return l;\n\tint mid=l+r>>1;long long sum1=0,sum2=0;\n\tfor(int i=1;i<=len1;i++)sum1+=sum[rc[ql[i]]];\n\tfor(int i=1;i<=len2;i++)sum2+=sum[rc[qr[i]]];\n\t//\u7b97\u53f3\u5b69\u5b50\u7684\u503c\n\tif(sum2-sum1>=k)\n\t{\n\t\tfor(int i=1;i<=len1;i++)ql[i]=rc[ql[i]];\n\t\tfor(int i=1;i<=len2;i++)qr[i]=rc[qr[i]];\n\t\treturn trquery(mid+1,r,k);\n\t}else \n\t{\n\t\tfor(int i=1;i<=len1;i++)ql[i]=lc[ql[i]];\n\t\tfor(int i=1;i<=len2;i++)qr[i]=lc[qr[i]];\n\t\treturn trquery(l,mid,k-sum2+sum1);\n\t}\n}\nint root[160005];\nint query(int x,int y,int k)\n{\n\tint fx=top[x],fy=top[y];len1=len2=0;\n\twhile(fx!=fy)\n\t{\n\t\tif(dep[fx]>dep[fy])\n\t\t x^=y,y^=x,x^=y,fx^=fy,fy^=fx,fx^=fy;\n\t\t//\u533a\u95f4[dfn[fy],dfn[y]]\n\t\tfor(int i=dfn[fy]-1;i>=1;i-=lowbit(i))ql[++len1]=root[i];\n\t\tfor(int i=dfn[y];i>=1;i-=lowbit(i))qr[++len2]=root[i];\n\t\tif(dfn[fy]>1)ql[++len1]=root[dfn[fy]-1+n];\n\t\tqr[++len2]=root[dfn[y]+n];\n\t\ty=fa[fy],fy=top[y];\n\t}\n\tif(dep[x]>dep[y])x^=y,y^=x,x^=y;//[dfn[x],dfn[y]]\n\tfor(int i=dfn[x]-1;i>=1;i-=lowbit(i))ql[++len1]=root[i];\n\tfor(int i=dfn[y];i>=1;i-=lowbit(i))qr[++len2]=root[i];\n\tif(dfn[x]>1)ql[++len1]=root[dfn[x]-1+n];qr[++len2]=root[dfn[y]+n];\n\tlong long tmp=0;\n\tfor(int i=1;i<=len1;i++)tmp-=sum[ql[i]];\n\tfor(int i=1;i<=len2;i++)tmp+=sum[qr[i]];\n\tif(tmp<k)return -1;\n\treturn trquery(1,tot,k); \n}\nint main()\n{\n\t//freopen(\"network_network2.in\",\"r\",stdin);\n\t//freopen(\"0.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&t[i]),c[++cnt]=t[i];\n\tfor(int i=1,u,v;i<n;i++)scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&k[i],&a[i],&b[i]);\n\t\tif(!k[i])c[++cnt]=b[i];\n\t}\n\tstd::sort(c+1,c+1+cnt);tot=1;\n\tfor(int i=2;i<=cnt;i++)if(c[i]!=c[tot])c[++tot]=c[i];//\u79bb\u6563\u5316\n\tfor(int i=1;i<=n;i++)t[i]=find(t[i]);\n\tdfs1(1),dfs2(1,1);T=0;\n\tfor(int i=1;i<=n;i++)\n\t build(root[i+n],root[i+n-1],1,tot,t[p[i]]);//\u4e3b\u5e2d\u6811\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(!k[i])\n\t\t{\n\t\t\tfor(int j=dfn[a[i]];j<=n;j+=lowbit(j))\n\t\t\t insert(root[j],1,tot,t[a[i]],-1);\n\t\t\tt[a[i]]=find(b[i]);\n\t\t\tfor(int j=dfn[a[i]];j<=n;j+=lowbit(j))\n\t\t\t insert(root[j],1,tot,t[a[i]],1);\n\t\t}else \n\t\t{\n\t\t\tint ans=query(a[i],b[i],k[i]);\n\t\t\tif(ans==-1)printf(\"invalid request!\\n\");\n\t\t\telse printf(\"%d\\n\",c[ans]);\n\t\t}\n\t}\n}\n```",
        "postTime": 1525506646,
        "uid": 13183,
        "name": "\u58a8\u5c14",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "# \u9898\u5916\u8bdd\n\u8bdd\u8bf4\u521a\u5f00\u59cb\u5199\u4e86\u4e2a\u94fe\u5256\uff0c\u53d1\u73b0\u590d\u6742\u5ea6\u662f$O(nlog^3n)$\uff0c\u6709\u70b9\u65b9\u5c31\u5168\u5220\u4e86~~\uff0c\u540e\u6765\u9898\u89e3\u8bf4\u8fdelog^4\u7684splay\u90fdA\u6389\u4e86~~\u3002\n\n\u7136\u540e\u5199\u4e86\u4e2a\u6811\u4e0a\u4e3b\u5e2d\u6811\uff0c\u53d1\u73b0\u590d\u6742\u5ea6\u641e\u9519\u4e86\uff0c\u53c8\u91cd\u5199\u4e86\uff0c\u624d\u6539\u6210\u73b0\u5728\u8fd9\u4e2a\u6837\u5b50\u3002\u3002\u8352\u5e9f\u4e86\u4e00\u4e0a\u5348qwqqq\n# Solution\n\u8bf4\u6b63\u7ecf\u7684\u5427\uff0c\u5c31\u662f\u52a8\u6001\u67e5\u8be2\u8def\u5f84\u4e0a\u6743\u503c\u7b2ck\u5927\u3002\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\u6811\u4e0a\u4e3b\u5e2d\u6811\uff0c\u90a3\u4e48\u7b54\u6848\u7edf\u8ba1\u8fd8\u662fsum[x]+sum[y]-sum[lca]-sum[f[lca]]\u3002\u6211\u4eec\u4f1a\u53d1\u73b0\u5982\u679c\u66f4\u65b0\u4e86\u4e00\u4e2a\u70b9\u6743\uff0c\u5219\u5176\u5b50\u6811\u5185\u7684\u6240\u6709\u4e3b\u5e2d\u6811\u90fd\u8981\u66f4\u65b0\uff0c\u66f4\u65b0\u7684\u590d\u6742\u5ea6\u662f$O(nlogn)$\uff0c\u8fd9\u663e\u7136\u662f\u627f\u53d7\u4e0d\u8d77\u7684~~\uff0c\u5176\u5b9e\u670980\u5206~~\u3002\n\n\u6ce8\u610f\u5230\u5b50\u6811\u5728dfs\u5e8f\u4e2d\u662f\u6210\u6bb5\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u8003\u8651\u7ef4\u62a4dfs\u5e8f\u3002\u5219\u95ee\u9898\u53d8\u6210\u4e86\u533a\u95f4\u66f4\u65b0\u548c\u5355\u70b9\u67e5\u8be2\uff0c\u5957\u8def\u5dee\u5206\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5355\u70b9\u66f4\u65b0\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u4e0aBIT\u6a21\u677f\u3002\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$\n\n\u4e0d\u8fc7\u5728dfs\u5e8f\u4e0a\uff0c\u5176\u5b9e\u8fd9\u4e2a\u524d\u7f00\u5e76\u4e0d\u662f\u5b8c\u5168\u90fd\u662f\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u4e4b\u524d\u641c\u5230\u7684\u5176\u4ed6\u5b50\u6811\uff0c\u4f46\u662f\u5176\u5b9e\u8fd9\u4e2a\u5bf9\u6211\u4eec\u7edf\u8ba1\u7b54\u6848\u7684\u65b9\u5f0f\u5e76\u65e0\u5f71\u54cd\uff0c\u56e0\u4e3asum[x]\u548csum[y]\u5206\u522b\u5bf9\u8fd9\u4e9b\u5197\u4f59\u4fe1\u606f\u8ba1\u7b97\u4e86\u4e00\u6b21\uff0c\u800csum[lca]\u548csum[f[lca]]\u5374\u53c8\u5206\u522b\u51cf\u53bb\u4e86\u5b83\u4eec\u7684\u8d21\u732e\u3002\n\n\u53e6\u5916\u6ce8\u610f\u5728update\u65f6\u4e0d\u5fc5\u6bcf\u6b21\u8bbf\u95ee\u90fd\u91cd\u65b0\u5f00\u8282\u70b9\uff0c\u4e0d\u7136\u4f1aMLE\u3002\u56e0\u4e3a\u8fd9\u4e2a\u8282\u70b9\u5e76\u6ca1\u6709\u4e0e\u65b0\u8282\u70b9\u51b2\u7a81\uff0c\u9664\u4e86sum\u8981\u4fee\u6539\u4e4b\u5916\uff0c\u5176\u4ed6\u4fe1\u606f\u4ecd\u7136\u53ef\u4ee5\u5229\u7528\u3002\n# Code\n```cpp\n#include <algorithm>\n#include <cstdio>\n#define lowbit(x) ((x)&(-(x)))\nusing namespace std;\nconst int maxn=80010,maxm=10000010;\nstruct data{int v,nxt;}edge[maxn<<1];\nstruct operation{int k,a,b;}opr[maxn];\nint n,m,p,dfc,tot,len,cnt[2],tmp[2][40];\nint head[maxn],a[maxn],b[maxn<<1],f[maxn][20],deep[maxn],pre[maxn],nxt[maxn];\nint rt[maxn],lc[maxm],rc[maxm],sum[maxm];\ntemplate <typename Tp> inline void read(Tp &x)\n{\n\tx=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9') ch=getchar();\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n}\ninline void insert(int u,int v)\n{\n\tedge[++p]=(data){v,head[u]};head[u]=p;\n\tedge[++p]=(data){u,head[v]};head[v]=p;\n}\nvoid input()\n{\n\tint k,x,y;\n\tread(n);read(m);len=n;\n\tfor(int i=1;i<=n;i++){read(a[i]);b[i]=a[i];}\n\tfor(int i=1;i<n;i++){read(x);read(y);insert(x,y);}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tread(opr[i].k);read(opr[i].a);read(opr[i].b);\n\t\tif(!opr[i].k) b[++len]=opr[i].b;\n\t}\n\tsort(b+1,b+len+1);len=unique(b+1,b+len+1)-b-1;\n\tfor(int i=1;i<=n;i++) a[i]=lower_bound(b+1,b+len+1,a[i])-b;\n}\nvoid update(int l,int r,int pos,int val,int& rt)\n{\n\tif(!rt) rt=++tot;\n\tsum[rt]+=val;\n\tif(l==r) return ;\n\tint m=(l+r)>>1;\n\tif(pos<=m) update(l,m,pos,val,lc[rt]);\n\telse update(m+1,r,pos,val,rc[rt]);\n}\nint query(int l,int r,int k)\n{\n\tif(l==r) return l;\n\tint m=(l+r)>>1,s=0;\n\tfor(int i=1;i<=cnt[0];i++) s+=sum[lc[tmp[0][i]]];\n\tfor(int i=1;i<=cnt[1];i++) s-=sum[lc[tmp[1][i]]];\n\tif(k<=s)\n\t{\n\t\tfor(int i=1;i<=cnt[0];i++) tmp[0][i]=lc[tmp[0][i]];\n\t\tfor(int i=1;i<=cnt[1];i++) tmp[1][i]=lc[tmp[1][i]];\n\t\treturn query(l,m,k);\n\t}\n\telse\n\t{\n\t\tfor(int i=1;i<=cnt[0];i++) tmp[0][i]=rc[tmp[0][i]];\n\t\tfor(int i=1;i<=cnt[1];i++) tmp[1][i]=rc[tmp[1][i]];\n\t\treturn query(m+1,r,k-s);\n\t}\n}\nvoid dfs(int x)\n{\n\tfor(int i=1;i<20;i++) f[x][i]=f[f[x][i-1]][i-1];\n\tdeep[x]=deep[f[x][0]]+1;pre[x]=++dfc;\n\tfor(int i=head[x];i;i=edge[i].nxt)\n\t  if(edge[i].v!=f[x][0])\n\t  {\n\t  \tf[edge[i].v][0]=x;\n\t  \tdfs(edge[i].v);\n\t  }\n\tnxt[x]=dfc;//\u4e24\u6b21dfs\u5e8f\u90fd\u8981\u5b58\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u5355\u70b9\u66f4\u65b0\n}\nint getlca(int x,int y)\n{\n\tif(deep[x]<deep[y]) swap(x,y);\n\tint t=deep[x]-deep[y];\n\tfor(int i=0;i<20;i++)\n\t  if(t&(1<<i)) x=f[x][i];\n\tif(x==y) return x;\n\tfor(int i=19;~i;i--)\n\t  if(f[x][i]!=f[y][i])\n\t    x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nvoid change(int pos,int val,int op)\n{\n\tfor(;pos<=n;pos+=lowbit(pos)) update(1,len,val,op,rt[pos]);\n}\nint main()\n{\n\t#ifndef ONLINE_JUDGE\n\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\tint x,y,k,lca,flca,s;\n\tinput();dfs(1);\n\tfor(int i=1;i<=n;i++) change(pre[i],a[i],1),change(nxt[i]+1,a[i],-1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tx=opr[i].a;y=opr[i].b;k=opr[i].k;\n\t\tif(k)\n\t\t{//\u7531\u4e8e\u8981\u5408\u5e76\u7b54\u6848\uff0c\u6240\u4ee5\u5148\u628a\u9700\u8981\u7528\u5230\u7684\u8282\u70b9\u90fd\u9884\u5904\u7406\u5b58\u8d77\u6765\n\t\t\tlca=getlca(x,y);flca=f[lca][0];cnt[0]=cnt[1]=0;\n\t\t\ts=deep[x]+deep[y]-deep[lca]-deep[flca];\n\t\t\tfor(int i=pre[x];i;i-=lowbit(i)) tmp[0][++cnt[0]]=rt[i];\n\t\t\tfor(int i=pre[y];i;i-=lowbit(i)) tmp[0][++cnt[0]]=rt[i];\n\t\t\tfor(int i=pre[lca];i;i-=lowbit(i)) tmp[1][++cnt[1]]=rt[i];\n\t\t\tfor(int i=pre[flca];i;i-=lowbit(i)) tmp[1][++cnt[1]]=rt[i];\n\t\t\tif(k>s) puts(\"invalid request!\");\n\t\t\telse printf(\"%d\\n\",b[query(1,len,s-k+1)]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tchange(pre[x],a[x],-1);change(nxt[x]+1,a[x],1);\n\t\t\ta[x]=lower_bound(b+1,b+len+1,y)-b;\n\t\t\tchange(pre[x],a[x],1);change(nxt[x]+1,a[x],-1);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1524888057,
        "uid": 20602,
        "name": "Rayment",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406Network\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9898\u7528\u6574\u4f53\u4e8c\u5206\u4e5f\u662f\u53ef\u4ee5 2log \u7684\u2026\u2026\n\n\u52a8\u6001\u6811\u94fe\u7b2c k \u5c0f\u95ee\u9898\u3002\u8003\u8651\u4e8c\u5206 + \u52a8\u6001\u4e8c\u7ef4\u6570\u70b9\uff0c\u7528\u6811\u5256 + \u6811\u5957\u6811\u7ef4\u62a4\u3002\u6811\u5256 1log\uff0c\u6811\u5957\u6811 2log\uff0c\u52a0\u4e0a\u4e8c\u5206\u7684 1log\uff0c\u4e00\u5171\u662f 4log\u3002\u4e0d\u8fc7\u53ef\u4ee5\u505a\u5230\u628a\u4e8c\u5206\u8f6c\u5230\u6811\u4e0a\uff0c\u8fd9\u6837\u6811\u5957\u6811\u5916\u5c42 BIT \u8981\u662f\u6743\u503c\uff0c\u800c\u4e14\u4e8c\u5206\u5e94\u5f53\u662f\u6700\u5916\u5c42\u7684\uff0c\u6bd4\u6811\u5256\u8fd8\u8981\u5916\u5c42\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cBIT \u500d\u589e\u6bcf\u6b21 chk \u662f\u5728\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a\u627e\u6811\u5256\u7684 log \u6bb5\u6765\u67e5\u503c\uff0c\u5b9e\u73b0\u7684\u8bdd\u53ef\u4ee5\u63d0\u524d\u628a log \u6bb5\u5b58\u4e0b\u6765\uff0c\u4ee3\u7801\u5199\u8d77\u6765\u5e94\u8be5\u975e\u5e38\u6bd2\u7624\u3002\u8fd9\u6837\u5b50\u662f 3log \u7684\u3002\n\n\u7136\u540e\u6211\u4eec\u60f3\u8d77 COT \u90a3\u9898\u9759\u6001\u6811\u94fe\u7b2c k \u5c0f\u5229\u7528\u6811\u4e0a\u524d\u7f00\u548c\uff08\u6811\u4e0a\u524d\u7f00\u4e3b\u5e2d\u6811\uff09\u505a\u5230\u4e86\u548c\u7ebf\u6027\u7ed3\u6784\u4e00\u6837\u4f18\u79c0\u7684 1log\uff0c\u800c\u6ca1\u6709\u4f7f\u7528\u6811\u5256\u3002\u770b\u770b\u8fd9\u9898\u80fd\u4e0d\u80fd\u5e94\u7528\u3002\u4f9d\u7136\u8003\u8651\u7ef4\u62a4\u6811\u4e0a\u524d\u7f00\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u6709\u5355\u70b9\u4fee\u6539\u600e\u4e48\u529e\u5462\uff0c\u53d1\u73b0\u4e00\u6b21\u5355\u70b9\u4fee\u6539\u76f8\u5f53\u4e8e\u4fee\u6539\u5b83\u5b50\u6811\u5185\u6240\u6709\u7ebf\u6bb5\u6811\uff0c\u90a3\u5c31\u7528\u4e2a BIT \u5957\u5728\u7ebf\u6bb5\u6811\u5916\u9762\u5dee\u5206\u7ef4\u62a4\u3002\u672c\u6765\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u65f6\u5019\u53ea\u9700\u8981\u53d6 $x,y,lca,fa[lca]$ \u56db\u4e2a\u4f4d\u7f6e\uff0c\u73b0\u5728\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7531\u4e8e\u88ab BIT \u7ef4\u62a4\u4e86\uff0c\u5bf9\u5e94\u4e86 BIT \u4e0a log \u4e2a\u4f4d\u7f6e\u3002\u6240\u4ee5\u79c9\u6301\u4e8c\u5206\u5728\u6700\u5916\u7684\u539f\u5219\uff0c\u8981\u628a BIT \u4e0a 4 \u500d log \u4e2a\u7ebf\u6bb5\u6811\u4f4d\u7f6e\u63d0\u524d\u9884\u5904\u7406\u4e0b\u6765\uff0c\u867d\u7136\u662f 2log \u590d\u6742\u5ea6\u4e86\uff0c\u4f46\u611f\u89c9\u4e0d\u662f\u4e00\u822c\u7684\u96be\u5199\uff0c\u5c31\u6ca1\u5199\u4e86 2333\n\n\u8003\u8651\u6574\u4f53\u4e8c\u5206\u7684\u505a\u6cd5\uff0c\u4f1a\u597d\u5199\u5f88\u591a\u3002\u5728\u6574\u4f53\u4e8c\u5206\u5185\u90e8\u8981\u505a\u7684\u5c31\u662f\u52a8\u6001\u6811\u4e0a\u4fee\u6539\u6811\u94fe\u6c42\u548c\u3002\u8fd9\u4e2a\u5bb9\u6613\u60f3\u5230\u6811\u5256\uff0c\u5185\u90e8 2log\uff0c\u5957\u4e0a\u6574\u4f53\u4e8c\u5206\u5c31\u662f 3log\u3002\u4f46\u662f\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u7528\u6811\u4e0a\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u5c31\u7ef4\u62a4\u6811\u4e0a\u524d\u7f00\u548c\uff0c\u6bcf\u6b21\u5355\u70b9\u52a0\u5f71\u54cd\u5b50\u6811\uff0c\u7136\u540e\u5355\u70b9\u67e5\u524d\u7f00\u548c\uff0c\u4e5f\u5c31\u7528 BIT \u5c31\u53ef\u4ee5\u5dee\u5206\u8f6c\u5316\u7ef4\u62a4\u4e86\uff0c\u590d\u6742\u5ea6 2log\u3002\u4e0d\u4ec5\u597d\u5199\uff0c\u5e38\u6570\u8fd8\u6bd4\u5728\u7ebf\u505a\u6cd5\u5c0f\u5f88\u591a\u3002\n\ncode\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\nint lowbit(int x){return x&-x;}\nconst int N=300010,LOG_N=20;\nint n,qu;\nvector<int> nums;\nvector<int> nei[N];\nint a[N];\nstruct query{int tp,x,y,id;}qry[N];\nvoid discrete(){\n\tsort(nums.begin(),nums.end());\n\tnums.resize(unique(nums.begin(),nums.end())-nums.begin());\n\tfor(int i=1;i<=n;i++)a[i]=lower_bound(nums.begin(),nums.end(),a[i])-nums.begin()+1;\n\tfor(int i=1;i<=qu;i++)if(!qry[i].tp)qry[i].y=lower_bound(nums.begin(),nums.end(),qry[i].y)-nums.begin()+1;\n}\nint dfn[N],mxdfn[N],nowdfn,dep[N],fa[N][LOG_N];\nvoid dfs(int x=1){\n\tdfn[x]=mxdfn[x]=++nowdfn;\n\tfor(int i=1;i<LOG_N;i++)fa[x][i]=fa[fa[x][i-1]][i-1];\n\tfor(int i=0;i<nei[x].size();i++){\n\t\tint y=nei[x][i];\n\t\tif(y==fa[x][0])continue;\n\t\tfa[y][0]=x;\n\t\tdep[y]=dep[x]+1;\n\t\tdfs(y);\n\t\tmxdfn[x]=mxdfn[y];\n\t}\n}\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\tfor(int i=LOG_N-1;~i;i--)if(dep[fa[x][i]]>=dep[y])x=fa[x][i];\n\tif(x==y)return x;\n\tfor(int i=LOG_N-1;~i;i--)if(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\nstruct bitree{\n\tint cnt[N];\n\tbitree(){memset(cnt,0,sizeof(cnt));}\n\tvoid _add(int x,int v){\n\t\twhile(x<=n)cnt[x]+=v,x+=lowbit(x);\n\t}\n\tvoid add(int l,int r,int v){\n\t\t_add(l,v),_add(r+1,-v);\n\t}\n\tint at(int x){\n\t\tint res=0;\n\t\twhile(x)res+=cnt[x],x-=lowbit(x);\n\t\treturn res;\n\t}\n}bit;\nint ans[N];\nvoid solve(int l,int r,vector<query> v){\n\tif(l==r){\n\t\tfor(int i=0;i<v.size();i++){\n\t\t\tint tp=v[i].tp,id=v[i].id;\n\t\t\tif(tp>0)ans[id]=l;\n\t\t}\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tvector<query> lft,rit;\n\tfor(int i=0;i<v.size();i++){\n\t\tint tp=v[i].tp,x=v[i].x,y=v[i].y;\n\t\tif(tp<=0){\n\t\t\tif(y<=mid)bit.add(dfn[x],mxdfn[x],tp==0?1:-1),lft.pb(v[i]);\n\t\t\telse rit.pb(v[i]);\n\t\t}\n\t\telse{\n\t\t\tint _lca=lca(x,y),fd=bit.at(dfn[x])+bit.at(dfn[y])-bit.at(dfn[_lca])-bit.at(dfn[fa[_lca][0]]);\n\t\t\tif(tp<=fd)lft.pb(v[i]);\n\t\t\telse v[i].tp-=fd,rit.pb(v[i]);\n\t\t}\n\t}\n\tfor(int i=0;i<v.size();i++){\n\t\tint tp=v[i].tp,x=v[i].x,y=v[i].y;\n\t\tif(tp<=0)if(y<=mid)bit.add(dfn[x],mxdfn[x],tp==0?-1:1);\n\t}\n\tsolve(l,mid,lft),solve(mid+1,r,rit);\n}\nint main(){\n//\tfreopen(\"C:\\\\Users\\\\chenx\\\\AppData\\\\Local\\\\Temp\\\\Rar$DIa6624.14836\\\\5.in\",\"r\",stdin);\n\tcin>>n>>qu;\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",a+i),a[i]*=-1,nums.pb(a[i]);\n\tfor(int i=1;i<n;i++){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tnei[x].pb(y),nei[y].pb(x);\n\t}\n\tfor(int i=1;i<=qu;i++){\n\t\tscanf(\"%d%d%d\",&qry[i].tp,&qry[i].x,&qry[i].y),qry[i].id=i;\n\t\tqry[i].tp||(qry[i].y*=-1,nums.pb(qry[i].y),0);\n\t}\n\tdiscrete();\n\tdep[1]=1,dfs();\n\tvector<query> v;\n\tfor(int i=1;i<=n;i++)v.pb(query({0,i,a[i],0}));\n\tfor(int i=1;i<=qu;i++)\n\t\tif(qry[i].tp>0)v.pb(qry[i]);\n\t\telse{\n\t\t\tv.pb(query({-1,qry[i].x,a[qry[i].x],0}));\n\t\t\ta[qry[i].x]=qry[i].y;\n\t\t\tv.pb(qry[i]);\n\t\t}\n\tsolve(1,nums.size()+1,v);\n\tfor(int i=1;i<=qu;i++)if(qry[i].tp>0){\n\t\tif(ans[i]>nums.size())puts(\"invalid request!\");\n\t\telse printf(\"%d\\n\",-nums[ans[i]-1]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1630223101,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "P4175 - \u7f51\u7edc\u7ba1\u7406 \u9898\u89e3"
    },
    {
        "content": "\u505a\u8fd9\u9898\u4e4b\u524d\u53ef\u4ee5\u5148\u770b\u770b[P4074](https://www.luogu.com.cn/problem/P4074)\uff0c\u505a\u4e2a\u70ed\u8eab\u518d\u6765\u3002\n# \u9898\u76ee\u5927\u610f\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a\n- \u4fee\u6539\u67d0\u4e2a\u8282\u70b9\u7684\u6743\u503c\n- \u67e5\u8be2\u4e00\u6bb5\u8def\u5f84\u5185\u7b2c k **\u5927**\u7684\u6570\n# \u601d\u8def\n\u8fd9\u9898\u662f\u4e00\u4e2a\u5e26\u4fee\u7684\u6811\u4e0a\u83ab\u961f\uff0c\u4e3b\u8981\u662f\u770b\u6c42\u7b2c k \u5927\u600e\u4e48\u6c42\u3002\n\n\u4f60\u4e0d\u4f1a\u5e73\u8861\u6811\uff1f\n\n\u6ca1\u4e8b~~\u6211\u4e5f\u4e0d\u4f1a~~\u3002\n\n\u4f60\u4e0d\u4f1a\u5206\u5757\uff1f\n\n~~\u90a3\u4f60\u6ca1\u6551\u4e86~~\n\n\u8fd9\u9898\u7684\u601d\u8def\u5e94\u8be5\u6709\u4e24\u79cd\uff0c\u4e00\u4e2a\u662f\u5e73\u8861\u6811\uff0c\u4e00\u4e2a\u662f\u5206\u5757\uff0c\u5e73\u8861\u6811\u677f\u677f\u6211\u81f3\u4eca 8pts... \u6240\u4ee5\u6211\u53ea\u597d\u5199\u5206\u5757\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5229\u7528[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/CF220B)\u7684\u601d\u60f3\uff08\u8fd9\u662f\u9053\u666e\u901a\u83ab\u961f...\u5176\u5b9e\u90fd\u4e00\u6837\uff09\uff0c\u5bf9 $cnt$ \u6570\u7ec4\u5206\u5757\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u679a\u4e3e\u5230\u7b2c k \u5927\u7684\u6570\u6240\u5728\u7684\u5757\uff0c\u518d\u5728\u5757\u5185\u679a\u4e3e\u3002\n\n\u4f60\u95ee\u6211\u600e\u4e48\u679a\u4e3e\u7b2c k \u5927\u6570\u6240\u5728\u5757...\u4f60\u771f\u7684\u6ca1\u6551\u4e86...\n\n\u5269\u4e0b\u7684\u5c31\u662f\u677f\u677f\u4e86\uff0c\u5c31\u76f4\u63a5\u5957\u7bc7\u9996\u90a3\u9053\u9898\u7684\u677f\u677f\u5c31\u884c\u4e86\u3002\n\n\u6709\u95ee\u9898\u5417\uff1f----\u6ca1\u6709\u95ee\u9898\u3002\n\n\u4ee3\u7801\u91cc\u7684\u6ce8\u91ca\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879....\u90fd\u662f\u6cea\u7684\u7ecf\u9a8c....\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int MAXN=80005;\ninline void qr(register int &ret){register int x=0,f=0;register char ch=getchar();while(ch<'0'||ch>'9')f|=ch=='-',ch=getchar();while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();ret=f?-x:x;}\nint n,m,q,w[MAXN],v[MAXN],c[MAXN],ttt,fr,op,x,y,LCA,flag[MAXN<<1],tpt,lenlen;\nint fa[MAXN],ord[MAXN<<1],fir[MAXN],las[MAXN],son[MAXN],sze[MAXN],head[MAXN],nxt[MAXN<<1],to[MAXN<<1],dep[MAXN],top[MAXN],ccnt,nord;\nint cntr,cntp,idx[MAXN<<1],s,l,r,t,tot,cnt[MAXN],vis[MAXN],L,R,T,K,ans[MAXN],block[MAXN],idxn[MAXN<<1],sn,ll[MAXN],yy[MAXN];//\u8fd9\u4e00\u6bb5\u5176\u5b9e\u53ef\u4ee5\u8df3\u8fc7... \nstruct node1{\n\tint l,r,id,ti,lca,k;\n\tbool operator<(const node1 x)const{//\u53cc\u91cd\u5947\u5076\u6392\u5e8f\uff0c\u6b27~~~~\u8036! \n\t\treturn idx[l]==idx[x.l]?(idx[l]&1?(idx[r]==idx[x.r]?(idx[r]&1?ti<x.ti:ti>x.ti):idx[r]<idx[x.r]):(idx[r]==idx[x.r]?(idx[r]&1?ti<x.ti:ti>x.ti):r>x.r)):l<x.l;\n\t}\n}p[MAXN];\nstruct node2{\n\tint i,from,to;\n}ch[MAXN];\nvoid add(int x){//\u8981\u5bf9\u6743\u503c\u7684\u5757\u4e0b\u624b \n\t++cnt[x];\n\t++block[idxn[x]];\n}\nvoid del(int x){\n\t--cnt[x];\n\t--block[idxn[x]];\n}\nvoid work(int x){\n\tvis[x]?del(c[x]):add(c[x]);\n\tvis[x]^=1;\n}\nvoid dealadd(int x){\n\tif(vis[ch[x].i]) add(ch[x].to),del(ch[x].from);\n\tc[ch[x].i]=ch[x].to;\n}\nvoid dealdel(int x){\n\tif(vis[ch[x].i]) del(ch[x].to),add(ch[x].from);\n\tc[ch[x].i]=ch[x].from;\n}\nvoid adde(int fr,int To){\n\tnxt[++ccnt]=head[fr],head[fr]=ccnt,to[ccnt]=To;\n}\nvoid dfs1(int i){//\u6811\u5256\u6c42 LCA \u4e0d\u4f1a\u7684\u8df3\u8fc7 \n\tdep[i]=dep[fa[i]]+1;\n\tsze[i]=1;\n\tord[++nord]=i;\n\tfir[i]=nord;\n\tfor(int j=head[i];j;j=nxt[j]){\n\t\tif(to[j]==fa[i]) continue;\n\t\tfa[to[j]]=i;\n\t\tdfs1(to[j]);\n\t\tsze[i]+=sze[to[j]];\n\t\tif(son[i]==1||sze[to[j]]>sze[son[i]]) son[i]=to[j];\n\t}\n\tord[++nord]=i;\n\tlas[i]=nord;\n\treturn;\n}\nvoid dfs2(int i,int Top){\n\ttop[i]=Top;\n\tif(son[i]) dfs2(son[i],Top);\n\tfor(int j=head[i];j;j=nxt[j]){\n\t\tif(to[j]==fa[i]||to[j]==son[i]) continue;\n\t\tdfs2(to[j],to[j]);\n\t}\n\treturn;\n}\nint getlca(int x,int y){\n\twhile(top[x]^top[y]){\n\t\tif(dep[top[x]]>=dep[top[y]]) x=fa[top[x]];\n\t\telse y=fa[top[y]];\n\t}\n\treturn dep[x]>dep[y]?y:x;\n}\nsigned main() {\n\tqr(n),qr(m);\n\tfor(int i=1;i<=n;++i) {\n\t\tqr(c[i]);\n\t\tflag[++tpt]=c[i];\n\t}\n\tfor(int i=1;i<n;++i){\n\t\tqr(fr),qr(ttt);\n\t\tadde(fr,ttt),adde(ttt,fr);\n\t}\n\tfa[1]=1;\n\tdfs1(1),dfs2(1,1);\n\ts=pow(nord,2.0/3);//\u8fd9\u91cc\u662f 2/3 \u6b21\u65b9!!! \n\tfor(int i=1;i<=nord;++i) idx[i]=(i+s-1)/s;\n\tfor(int i=1;i<=m;++i){\n\t\tqr(op),qr(x),qr(y);\n\t\tif(op){\n\t\t\t++cntp;\n\t\t\tp[cntp].k=op;//\u8fd9\u4e2a\u70b9\u6211\u8c03\u4e86 1min(\u6807\u51c6\u306e\u4e0d\u8bfb\u8f93\u5165\u683c\u5f0f\u306e\u9009\u624b) \n\t\t\tif(fir[x]>fir[y]) swap(x,y);\n\t\t\tLCA=getlca(x,y);\n\t\t\tif(LCA==x){\n\t\t\t\tp[cntp].l=fir[x],p[cntp].r=fir[y];\n\t\t\t\tp[cntp].id=cntp,p[cntp].ti=cntr;\n\t\t\t}else{\n\t\t\t\tp[cntp].l=las[x],p[cntp].r=fir[y];\n\t\t\t\tp[cntp].id=cntp,p[cntp].ti=cntr;\n\t\t\t\tp[cntp].lca=LCA;\n\t\t\t}\n\t\t}else{\n\t\t\t++cntr;\n\t\t\tch[cntr].i=x,ch[cntr].from=c[x],ch[cntr].to=c[x]=y;\n\t\t\tflag[++tpt]=y;\n\t\t}\n\t}\n\tfor(int i=cntr;i>=1;--i) c[ch[i].i]=ch[i].from;\n\tsort(flag+1,flag+tpt+1);\n\tlenlen=unique(flag+1,flag+tpt+1)-flag-1;\n\tfor(int i=1;i<=n;++i) c[i]=lower_bound(flag+1,flag+lenlen+1,c[i])-flag;\n\tfor(int i=1;i<=cntr;++i) ch[i].from=lower_bound(flag+1,flag+lenlen+1,ch[i].from)-flag,ch[i].to=lower_bound(flag+1,flag+lenlen+1,ch[i].to)-flag; \n\tsn=sqrt(lenlen);\n\tfor(int i=1;i<=lenlen;++i){//\u5bf9\u6743\u503c\u5206\u5757 \n\t\tidxn[i]=(i+sn-1)/sn;\n\t\tif(idxn[i]!=idxn[i-1]) ll[(i+sn-1)/sn]=i,yy[(i+sn-1)/sn-1]=i-1;//\u8bb0\u5f55\u5757\u7684\u5de6\u53f3\u7aef\u70b9 \n\t}\n\tyy[(lenlen+sn-1)/sn]=lenlen;\n\tsort(p+1,p+cntp+1);\n\tl=1,r=t=0;\n\tfor(int i=1;i<=cntp;++i){\n\t\tL=p[i].l,R=p[i].r,T=p[i].ti,K=p[i].k;\n\t\twhile(t>T) dealdel(t--);\n\t\twhile(t<T) dealadd(++t);\n\t\twhile(l>L) work(ord[--l]);\n\t\twhile(r<R) work(ord[++r]);\n\t\twhile(l<L) work(ord[l++]);\n\t\twhile(r>R) work(ord[r--]);\n\t\tif(p[i].lca) work(p[i].lca);//\u8981\u5904\u7406 LCA \n\t\tans[p[i].id]=-1;\n\t\tfor(int j=(lenlen+sn-1)/sn;j>0;--j){\n\t\t\tif(block[j]<K){//\u5982\u4f55\u6392\u9664\u7b2c k \u5927\u6570\u4e0d\u5728\u7684\u5757 \n\t\t\t\tK-=block[j];\n\t\t\t}else{\n\t\t\t\tfor(int pos=yy[j];pos>=ll[j];--pos){\n\t\t\t\t\tif(cnt[pos]<K) K-=cnt[pos];\n\t\t\t\t\telse {\n\t\t\t\t\t\tans[p[i].id]=pos;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(p[i].lca) work(p[i].lca);\n\t}\n\tfor(int i=1;i<=cntp;++i) {\n\t\tif(ans[i]!=-1)\n\t\tprintf(\"%lld\\n\",flag[ans[i]]);//\u6ce8\u610f\u8fd9\u91cc\u662f\u79bb\u6563\u5316\u524d\u7684\u503c\uff01\uff01 \n\t\telse \n\t\tprintf(\"invalid request!\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1627541016,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "P4175\u9898\u89e3"
    },
    {
        "content": "$\u8fd9\u9898\u672c\u849f\u84bb\u8c03\u4e86\u5f88\u4e45\uff0c\u6700\u540e\u53d1\u73b0\u662f\u5757\u6ca1\u6709\u9884\u5904\u7406\u5b8c...$\n\n$\u5148\u8bf4\u4e00\u4e0b\u601d\u8def$\n\n$\u524d\u7f6e\u829d\u58eb\uff1a$\n\n- $\u6811\u5256\u6c42LCA$\n- $\u5e26\u4fee\u83ab\u961f\u6c42\u533a\u95f4k\u5927$\n\n$\u9996\u5148\u8bb2\u4e00\u4e0b\u6b27\u62c9\u5e8f\uff1a$\n\n$\u6b27\u62c9\u5e8f\u662f\u5728\u8bbf\u95ee\u67d0\u4e2a\u8282\u70b9\u65f6\u548c\u9000\u51fa\u67d0\u4e2a\u8282\u70b9\u65f6\u90fd\u628a\u8282\u70b9\u653e\u8fdb\u5e8f\u5217\u7684\u4e00\u79cd\u5e8f$\n\n$\u4e0edfs\u5e8f\u6700\u5927\u7684\u4e0d\u540c\u5c31\u5728\u4e8e\u56de\u6eaf\u65f6\u4e5f\u628a\u8282\u70b9\u653e\u8fdb\u5e8f\u5217$\n\n![](https://s2.ax1x.com/2019/03/16/AZnnsA.png)\n\n$\u50cf\u8fd9\u9897\u6811\u7684\u6b27\u62c9\u5e8f\u5c31\u662f \\text{1 3 3 2 4 4 5 5 2 1}$\n\n$\u90a3\u8fd9\u4e1c\u897f\u6709\u4ec0\u4e48\u7528\u5462$\n\n$\u6811\u4e0a\u83ab\u961f\u662f\u57fa\u4e8e\u6b27\u62c9\u5e8f\u7684$\n\n$\u6211\u4eec\u8fd9\u6837\u5904\u7406\u51fast[]\u548ced[]\u4e24\u4e2a\u6570\u7ec4\uff0cst\u8868\u793a\u8fd9\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\uff0ced\u8868\u793a\u8fd9\u4e2a\u70b9\u88ab\u56de\u6eaf\u5230\u65f6\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4$\n\n$LCA\u4e0d\u4e3a\u4e24\u4e2a\u70b9\u4e2d\u4efb\u610f\u4e00\u4e2a\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u94fe\u4e0a\u7684\u70b9\u8d21\u732e\uff08\u597d\u7ed5\u53e3\uff09\uff0c\u5c31\u662f\u6df1\u5ea6\u5c0f\u7684\u90a3\u4e2a\u70b9\u7684ed\u5230\u5927\u7684\u90a3\u4e2a\u70b9\u7684st\u8d21\u732e\u518d\u52a0\u4e0aLCA\u7684\u8d21\u732e$\n\n$\u82e5LCA\u4e3a\u4e24\u4e2a\u70b9\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u90a3\u4e48\u8d21\u732e\u5c31\u662f\u6df1\u5ea6\u5c0f\u7684\u90a3\u4e2a\u70b9\u7684st\u5230\u5927\u7684\u90a3\u4e2a\u70b9\u7684st\u7684\u8d21\u732e\uff08\u56e0\u4e3a\u8981\u7b97\u5b50\u6811\uff09$\n\n$\u82e5\u5728\u6b27\u62c9\u5e8f\u5217\u4e2d\u4e24\u6b21\u8bbf\u95ee\u540c\u4e00\u70b9\uff0c\u8981\u6e05\u9664\u8be5\u70b9\u8d21\u732e\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2abool\u6570\u7ec4\u8bb0\u5f55\u8be5\u70b9\u662f\u5426\u88ab\u8bbf\u95ee$\n\n$\u6b27\u62c9\u5e8f\uff1a$\n\n```c++\ninl void dfs1(int x) {\n\tsiz[x] = 1, dep[x] = dep[fa[x]] + 1, euler[++node] = x, st[x] = node;\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (e[i].to != fa[x]) {\n\t\t\tfa[e[i].to] = x, dfs1(e[i].to);\n\t\t\tsiz[x] += siz[e[i].to], siz[e[i].to] > siz[h[x]] ? h[x] = e[i].to : 0;\n\t\t}\n\t}\n\teuler[++node] = x, ed[x] = node;\n}//\u56e0\u4e3a\u6811\u5256\u8981dfs\u6240\u4ee5\u548c\u6811\u5256\u4e00\u8d77\u628a\u6b27\u62c9\u5e8f\u7ed9\u5904\u7406\u4e86\n```\n\n$\u5904\u7406\u8d21\u732e\uff1a$\n\n```c++\nfor (re i = 1; i <= m; i++) {\n\t\top = read<int>();\n\t\tif (op) {\n\t\t\tq[++qnum].k = cnum, q[qnum].id = qnum, x = read<int>(), y = read<int>(), q[qnum].w = op;\n\t\t\tif (dep[x] > dep[y])swap(x, y);\n\t\t\tf = lca(x, y);\n\t\t\tif (x == f) q[qnum].l = st[x], q[qnum].r = st[y];\n\t\t\telse q[qnum].l = ed[x], q[qnum].r = st[y], q[qnum].lca = f;\n\t\t}\n\t\telse c[++cnum].pos = read<int>(), d[++si] = c[cnum].w = read<int>();\n\t}//c\u662f\u4fdd\u5b58\u4fee\u6539\u7684\u6570\u7ec4\uff0cq\u662f\u4fdd\u5b58\u8be2\u95ee\u7684\u6570\u7ec4\n```\n\n$\u56e0\u4e3a\u503c\u57df\u662f1e8\u6570\u7ec4\u663e\u7136\u5f00\u4e0d\u4e0b\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316$\n\n$\\large\\color{Red}\\text{\u6ce8\u610f\u79bb\u6563\u5316\u7684\u65f6\u5019\u8981\u79bb\u6563\u4fee\u6539\u7684\u503c}$\n\n$\u8fd8\u6709\u5c31\u662f\u56e0\u4e3a\u6b27\u62c9\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u539f\u5e8f\u5217\u7684\u4e24\u500d\uff0c\u6240\u4ee5\u5728\u5206\u5757\u65f6\u8981\u5904\u7406\\text{((n<<1)+cnum)}\u4e2a\u70b9$\n\n$\u4e4b\u540e\u5c31\u662f\u83ab\u961f\u7684\u677f\u5b50\u4e86$\n\n$\u6ce8\u610f\u4e00\u4e0b\u7edf\u8ba1\u8d21\u732e\u7684\u65b9\u6cd5\uff0c\u6bd4\u8f83\u5de7\u5999\uff0c\u662f\u5bf9\u79bb\u6563\u540e\u7684\u503c\u57df\u8fdb\u884c\u5206\u5757\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u7167$[P2617](https://www.luogu.org/problemnew/show/P2617)\n\n[\u6211\u7684\u9898\u89e3](https://www.luogu.org/blog/zi-o/p2617-dynamic-rankings-ti-xie-dai-xiu-mu-dui-post)\u200b\n\n$\u5f53\u7136\u8fd9\u9898\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u6c42\u7684\u662fk\u5927\u503c\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u540e\u5f80\u524d\u626b$\n\n$\u5b8c\u6574\u4ee3\u7801\uff1a$\n\n```c++\n#pragma region prepare\n#pragma will be the king\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<set>\n#include<bitset>\n#define inl inline\n#define re register int\nusing namespace std;\ntemplate <class Read>\ninl Read read() {\n\tRead x = 0;\n\tbool w = 0;\n\tchar c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-')w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0'&&c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\n#pragma endregion\nint n, m, num, si, qnum, cnum, all, op, smax, cnt[2000001], a[1000001], d[2000001], mp[2000001], s[2000001], head[1000001], tot, ans[1000001];\nint st[1000001], ed[1000001], euler[2000001], node, siz[1000001], h[1000001], top[1000001], dep[1000001], fa[1000001], sum[100001];\nbool vis[1000001];\nstruct quiz {\n\tint l, r, id, k, w, lca;\n\tbool operator <(const quiz& poi)const {\n\t\treturn s[l] ^ s[poi.l] ? s[l] < s[poi.l] : s[r] ^ s[poi.r] ? s[r] < s[poi.r] : s[r] & 1 ? k > poi.k : k < poi.k;\n\t}\n}q[200001];\nstruct modify {\n\tint pos, w;\n}c[200001];\nstruct edge {\n\tint next, to;\n}e[5000001];\ninl void adde(int x, int y) {\n\te[++tot] = edge{ head[x],y }, head[x] = tot;\n}\ninl void dfs1(int x) {\n\tsiz[x] = 1, dep[x] = dep[fa[x]] + 1, euler[++node] = x, st[x] = node;\n\tfor (re i = head[x]; i; i = e[i].next) {\n\t\tif (e[i].to != fa[x]) {\n\t\t\tfa[e[i].to] = x, dfs1(e[i].to);\n\t\t\tsiz[x] += siz[e[i].to], siz[e[i].to] > siz[h[x]] ? h[x] = e[i].to : 0;\n\t\t}\n\t}\n\teuler[++node] = x, ed[x] = node;\n}\ninl void dfs2(int x) {\n\tif (h[x]) top[h[x]] = top[x], dfs2(h[x]);\n\tfor (re i = head[x]; i; i = e[i].next) if (!top[e[i].to])top[e[i].to] = e[i].to, dfs2(e[i].to);\n}\ninl int lca(int x, int y) {\n\twhile (top[x] != top[y]) {\n\t\tif (dep[top[x]] < dep[top[y]])swap(x, y);\n\t\tx = fa[top[x]];\n\t}\n\treturn dep[x] < dep[y] ? x : y;\n}\ninl void add(int x) {\n\tcnt[x]++, sum[s[x]]++, op++, smax = max(s[x], smax);\n}\ninl void del(int x) {\n\tcnt[x]--, sum[s[x]]--, op--;\n}\ninl void oper(int x) {\n\t(vis[x] ^= 1) ? add(a[x]) : del(a[x]);\n}\ninl void change(int x) {\n\tif (vis[c[x].pos]) {\n\t\tcnt[c[x].w]++, sum[s[c[x].w]]++;\n\t\tcnt[a[c[x].pos]]--, sum[s[a[c[x].pos]]]--;\n\t\tsmax = max(max(s[c[x].w], smax), s[a[c[x].pos]]);\n\t}\n\tswap(c[x].w, a[c[x].pos]);\n}\nsigned main() {\n\ttop[1] = 1, n = read<int>(), m = read<int>(), num = (int)sqrt(n);\n\tfor (re i = 1; i <= n; i++) a[i] = d[++si] = read<int>(), s[i] = (i - 1) / num + 1;\n\tfor (re i = 1, x, y; i < n; i++)x = read<int>(), y = read<int>(), adde(x, y), adde(y, x);\n\tdfs1(1), dfs2(1);\n\tre f, x, y;\n\tfor (re i = 1; i <= m; i++) {\n\t\top = read<int>();\n\t\tif (op) {\n\t\t\tq[++qnum].k = cnum, q[qnum].id = qnum, x = read<int>(), y = read<int>(), q[qnum].w = op;\n\t\t\tif (dep[x] > dep[y])swap(x, y);\n\t\t\tf = lca(x, y);\n\t\t\tif (x == f) q[qnum].l = st[x], q[qnum].r = st[y];\n\t\t\telse q[qnum].l = ed[x], q[qnum].r = st[y], q[qnum].lca = f;\n\t\t}\n\t\telse c[++cnum].pos = read<int>(), d[++si] = c[cnum].w = read<int>();\n\t}\n\tint cn = (n << 1) + cnum;\n\tfor (re i = n + 1; i <= cn; i++)s[i] = (i - 1) / num + 1;\n\tsort(d + 1, d + 1 + si), si = unique(d + 1, d + 1 + si) - d - 1;\n\tfor (re i = 1; i <= n; i++)op = a[i], mp[a[i] = lower_bound(d + 1, d + 1 + si, a[i]) - d] = op;\n\tfor (re i = 1; i <= cnum; i++)op = c[i].w, mp[c[i].w = lower_bound(d + 1, d + 1 + si, c[i].w) - d] = op;\n\tsort(q + 1, q + 1 + qnum);\n\tre l = 1, r = 0, k = 0, res, now, tmp;\n\top = 0;\n\tfor (re i = 1; i <= qnum; i++) {\n\t\twhile (l > q[i].l)oper(euler[--l]);\n\t\twhile (r < q[i].r)oper(euler[++r]);\n\t\twhile (l < q[i].l)oper(euler[l++]);\n\t\twhile (r > q[i].r)oper(euler[r--]);\n\t\twhile (k < q[i].k)change(++k);\n\t\twhile (k > q[i].k)change(k--);\n\t\tif (q[i].lca)oper(q[i].lca);\n\t\tif (op < q[i].w) {\n\t\t\tif (q[i].lca)oper(q[i].lca);\n\t\t\tans[q[i].id] = -1;\n\t\t\tcontinue;\n\t\t}\n\t\tres = now = 0;\n\t\ttmp = smax, smax = 0;\n\t\tfor (now = tmp; now; now--) {\n\t\t\tif (sum[now])smax = max(now, smax);\n\t\t\tif (res + sum[now] < q[i].w)res += sum[now];\n\t\t\telse break;\n\t\t}\n\t\tfor (re j = now * num; j; j--) {\n\t\t\tif ((res += cnt[j]) >= q[i].w) {\n\t\t\t\tans[q[i].id] = mp[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (q[i].lca)oper(q[i].lca);\n\t}\n\tfor (re i = 1; i <= qnum; i++) {\n\t\tif (ans[i] != -1)printf(\"%d\\n\", ans[i]);\n\t\telse puts(\"invalid request!\");\n\t}\n    return 0;\n}\n```\n\n$\u4e0d\u5438\u6c27\u8fd8\u662f\u4f1aT\u4e00\u4e2a\u70b9\u7684\uff0c\u6bd5\u7adf\u6811\u4e0a\u83ab\u961f\u590d\u6742\u5ea6\\Theta(n^{5/3}+mlog_n)\u518d\u5e26\u4e0a\u5927\u5e38\u6570\u8fd8\u662f\u592a\u9ad8\u4e86$\n\n$\u5438\u6c27\u540e\u603b\u5171\u8017\u65f6$[1710ms](https://www.luogu.org/recordnew/show/17285828)$\u8fd8\u7b97\u53ef\u4ee5$\n\n",
        "postTime": 1552737337,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4175 CTSC2008 \u7f51\u7edc\u7ba1\u7406 \u6811\u4e0a\u5e26\u4fee\u83ab\u961f"
    },
    {
        "content": "# P4175\n\n\u5927\u5bb6\u597d\uff0c\u6211\u975e\u5e38\u559c\u6b22\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u7528\u6811\u4e0a\u83ab\u961f+\u503c\u57df\u5206\u5757\u8fc7\u4e86\u672c\u9898\u3002\n\n### \u9898\u76ee\u5206\u6790\n\u9898\u76ee\u8981\u6c42\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5355\u70b9\u4fee\u6539\u548c\u8def\u5f84\u4e0a\u7684\u7b2c $k$ \u5927\u6743\u503c\u67e5\u8be2\u3002\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u8fd9\u65f6\u6211\u4eec\u81ea\u7136\u80fd\u60f3\u5230\u83ab\u961f\u3002\n\n\u8981\u628a\u83ab\u961f\u653e\u5230\u6811\u4e0a\u8dd1\u5f88\u7b80\u5355\uff0c\u672c\u9898\u6c42\u7684\u662f\u8def\u5f84\u4e0a\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u5c31\u7528\u6b27\u62c9\u5e8f\uff08\u62ec\u53f7\u5e8f\uff09\u5373\u53ef\u628a\u6811\u6b63\u786e\u5730\u8f6c\u5316\u4e3a\u5e8f\u5217\u3002\u81f3\u4e8e\u6811\u4e0a\u83ab\u961f\u7684\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002\u91cd\u70b9\u8bb2\u4e00\u8bb2\u5982\u4f55\u7ef4\u62a4\u7b2c $k$ \u5927\u3002\n\n\u4e00\u79cd\u663e\u7136\u7684\u65b9\u5f0f\u662f\u5957\u4e00\u4e2a\u5e73\u8861\u6811\u3002\u7136\u800c\u8fd9\u6837\u4e0d\u4ec5\u5e38\u6570\u7206\u70b8\uff0c\u5b9e\u73b0\u4e5f\u975e\u5e38\u56f0\u96be\u3002\u6211\u4eec\u8003\u8651\u627e\u5230\u66f4\u4f18\u79c0\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u56e0\u4e3a\u83ab\u961f\u5b9e\u8d28\u662f\u591a\u6b21\u4fee\u6539\u3001\u5c11\u91cf\u67e5\u8be2\uff0c\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u800c\u7136\u60f3\u5230\u8981\u7528\u4e00\u4e2a\u9ad8\u901f\u4fee\u6539\u3001\u4f4e\u901f\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\u53bb\u7ef4\u62a4\u5b83\u3002\n\n\u8003\u8651\u5206\u5757\u3002\u6211\u4eec\u5c06\u6240\u6709\u7684\u4fee\u6539\u548c\u539f\u672c\u7684\u6743\u503c\u79bb\u6563\u5316\u4e4b\u540e\uff0c\u5bf9\u503c\u57df\u8fdb\u884c\u5206\u5757\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6b21\u6570\u548c\u6bcf\u4e00\u5757\u5185\u51fa\u73b0\u6570\u7684\u4e2a\u6570\u3002\u5f53\u6211\u4eec\u67e5\u8be2\u65f6\uff0c\u5148\u4ece\u5927\u5230\u5c0f\u66b4\u529b\u8df3\u5757\uff0c\u5f53 $k$ \u5c0f\u4e8e\u5757\u5185\u4e2a\u6570\u65f6\u518d\u5728\u8fd9\u4e00\u5757\u5185\u66b4\u529b\u67e5\u8be2\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u5206\u5757\u7684\u4fee\u6539\u662f $O(1)$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^{\\frac{5}{3}}+q\\sqrt{n})$ \u7684\u3002\n\n~~\u6240\u4ee5\u6211\u4eec\u8fd8\u53ef\u4ee5\u52a0\u4e0a\u8def\u5f84\u4e0a\u7684\u6743\u503c\u67e5\u6392\u540d\u3001\u67e5\u524d\u9a71\u3001\u67e5\u540e\u7ee7......~~\n\n\u53e6\u5916\uff0c\u8be5\u7b97\u6cd5\u5728\u5b9e\u9645\u8fd0\u884c\u4e2d\u8fdc\u8fdc\u8fbe\u4e0d\u5230\u4e0a\u754c\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u662f\u540a\u6253\u6811\u5957\u6811\u548c\u6574\u4f53\u4e8c\u5206\u7684\u3002~~\u4e0b\u9762\u8fd9\u4efd\u4ee3\u7801\u53d6\u5f97\u4e86\u6700\u4f18\u89e3 rk2\u3002~~\n\nCode\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=8e4+10;\nint n,m,ti[N],lst[N],v[N<<1],maxn,tt,ans[N];\nint tot,h[N];\nstruct edge\n{\n\tint v,nxt;\n}e[N<<1];\nvoid add(int u,int v)\n{\n\te[++tot]=(edge){v,h[u]};\n\th[u]=tot;\n}\nint cntq,cntu,unit;\nstruct update\n{\n\tint x,y,t;\n}u[N];\nstruct query\n{\n\tint l,r,t,k,Lca,id;\n\tbool operator < (query b) const\n\t{\n\t\tif(l/unit!=b.l/unit)return l<b.l;\n\t\tif(r/unit!=b.r/unit)\n\t\t{\n\t\t\tif((l/unit)&1)return r>b.r;\n\t\t\treturn r<b.r;\n\t\t}\n\t\tif((r/unit)&1)return t>b.t;\n\t\treturn t<b.t;\n\t}\n}q[N];\nint st[N],ed[N],id[N<<1],cnt;\nint f[N][20],dep[N];\nvoid dfs(int u,int fa)\n{\n\tid[st[u]=++cnt]=u;\n\tf[u][0]=fa,dep[u]=dep[fa]+1;\n\tfor(int i=h[u];i;i=e[i].nxt)\n\t{\n\t\tint v=e[i].v;\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\n\t}\n\tid[ed[u]=++cnt]=u;\n}\nint lca(int x,int y)\n{\n\tif(dep[x]<dep[y])swap(x,y);\n\tint stp=dep[x]-dep[y];\n\tfor(int i=19;i>=0;i--)\n\t\tif(stp>=(1<<i))stp-=(1<<i),x=f[x][i];\n\tif(x==y)return y;\n\tfor(int i=19;i>=0;i--)\n\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\treturn f[x][0];\n}\nbool vis[N];\nstruct block\n{\n\tint sz,L[410],R[410],bcnt[410],cnt[N<<1],pos[N<<1];\n\tvoid init()\n\t{\n\t\tsz=sqrt(maxn);\n\t\tfor(int i=1;i<=sz;i++)L[i]=(i-1)*sz+1,R[i]=i*sz;\n\t\tif(R[sz]<maxn)sz++,L[sz]=R[sz-1]+1,R[sz]=maxn;\n\t\tfor(int i=1;i<=sz;i++)for(int j=L[i];j<=R[i];j++)pos[j]=i;\n\t}\n\tvoid add(int x)\n\t{\n\t\tint y=ti[x];\n\t\tif(vis[x])cnt[y]--,bcnt[pos[y]]--;\n\t\telse cnt[y]++,bcnt[pos[y]]++;\n\t\tvis[x]^=1;\n\t}\n\tint query(int k)\n\t{\n\t\tint i;\n\t\tfor(i=sz;i>=1;i--)\n\t\t\tif(k>bcnt[i])k-=bcnt[i];\n\t\t\telse break;\n\t\tfor(int j=R[i];j>=L[i];j--)\n\t\t\tif(k>cnt[j])k-=cnt[j];\n\t\t\telse return j;\n\t\treturn -1;\n\t}\n}B;\nvoid upd(int x,int y)\n{\n\tif(vis[x])B.add(x),ti[x]=y,B.add(x);\n\telse ti[x]=y;\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%d\",&ti[i]),lst[i]=ti[i],v[++tt]=ti[i];\n\tfor(int i=1,x,y;i<n;i++)\n\t\tscanf(\"%d%d\",&x,&y),add(x,y),add(y,x);\n\tdfs(1,0);\n\tfor(int i=1;i<=19;i++)for(int u=1;u<=n;u++)f[u][i]=f[f[u][i-1]][i-1];\n\tfor(int i=1,k,a,b;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&k,&a,&b);\n\t\tif(!k)\n\t\t{\n\t\t\tu[++cntu]=(update){a,lst[a]},lst[a]=u[cntu].t=b;\n\t\t\tv[++tt]=b;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcntq++;\n\t\t\tif(st[a]>st[b])swap(a,b);\n\t\t\tint Lca=lca(a,b);\n\t\t\tif(a==Lca)q[cntq]=(query){st[a],st[b],cntu,k,0,cntq};\n\t\t\telse q[cntq]=(query){ed[a],st[b],cntu,k,Lca,cntq};\n\t\t}\n\t}\n\tunit=max(1,(int)(n/pow(m,1.0/3)));\n\tsort(q+1,q+cntq+1);sort(v+1,v+tt+1);\n\tmaxn=unique(v+1,v+tt+1)-(v+1);\n\tfor(int i=1;i<=n;i++)ti[i]=lower_bound(v+1,v+maxn+1,ti[i])-v;\n\tfor(int i=1;i<=cntu;i++)\n\t\tu[i].y=lower_bound(v+1,v+maxn+1,u[i].y)-v,\n\t\tu[i].t=lower_bound(v+1,v+maxn+1,u[i].t)-v;\n\tB.init();\n\tfor(int i=1,l=1,r=0,t=0;i<=cntq;i++)\n\t{\n\t\twhile(l>q[i].l)B.add(id[--l]);\n\t\twhile(r<q[i].r)B.add(id[++r]);\n\t\twhile(l<q[i].l)B.add(id[l++]);\n\t\twhile(r>q[i].r)B.add(id[r--]);\n\t\twhile(t<q[i].t)++t,upd(u[t].x,u[t].t);\n\t\twhile(t>q[i].t)upd(u[t].x,u[t].y),t--;\n\t\tif(q[i].Lca)B.add(q[i].Lca),ans[q[i].id]=B.query(q[i].k),B.add(q[i].Lca);\n\t\telse ans[q[i].id]=B.query(q[i].k);\n\t}\n\tfor(int i=1;i<=cntq;i++)\n\t\tif(ans[i]==-1)puts(\"invalid request!\");\n\t\telse printf(\"%d\\n\",v[ans[i]]);\n\treturn 0;\n}\n```",
        "postTime": 1640778997,
        "uid": 333574,
        "name": "Tyyyyyy",
        "ccfLevel": 7,
        "title": "P4175\u9898\u89e3"
    },
    {
        "content": "\u52a8\u6001\u6811\u4e0a\u8def\u5f84\u7b2ck\u5927\uff0c~~\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u6811\u5256\u5957\u6811\u5957\u6811\u4e71\u641e~~\n\n\u52a8\u6001\u533a\u95f4\u7b2ck\u5927\u4e3b\u8981\u5c31\u662f\u4e24\u79cd\u5199\u6cd5\uff1a\u6811\u5957\u6811\u548c\u6574\u4f53\u4e8c\u5206\u3002\n\n\u90a3\u4e48\u6811\u4e0a\u8def\u5f84\u7b2ck\u5927\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6574\u4f53\u4e8c\u5206\u3002\n\n\u6211\u4eec\u5bf9\u503c\u57df\u8fdb\u884c\u6574\u4f53\u4e8c\u5206\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u6c42\u4e00\u6761\u8def\u5f84\u4e0a\u503c\u5728 $[l,r]$ \u4e0a\u7684\u70b9\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u4e0a\u5dee\u5206\u7684\u601d\u60f3\uff0c\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4ece $i$ \u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6709\u51e0\u4e2a\u503c\u5728 $[l,r]$ \u4e0a\u7684\u70b9\u3002\n\n\u90a3\u4e48\u5f53\u6211\u4eec\u8981\u5728 $i$ \u5904\u52a0\u5165\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6240\u6709\u5728 $i$ \u5b50\u6811\u91cc\u7684\u70b9\uff0c\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u90fd\u4f1a\u589e\u52a01\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6c42\u4e00\u4e0bdfn\u4e4b\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\uff0c\u6811\u72b6\u6570\u7ec4\u5b9e\u73b0\u3002\n\n\u4ee3\u7801\u96be\u5ea6\u4e5f\u4e0d\u5927\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log^2n)$\n\n```cpp\n# include <bits/stdc++.h>\nusing namespace std;\n\n# define Rep(i,a,b) for(register int i=a;i<=b;i++)\n# define _Rep(i,a,b) for(register int i=a;i>=b;i--)\n# define RepG(i,u) for(int i=head[u];~i;i=e[i].next)\n\ntypedef long long ll;\n\nconst int N=2e5+5;\n\ntemplate<typename T> void read(T &x){\n   x=0;int f=1;\n   char c=getchar();\n   for(;!isdigit(c);c=getchar())if(c=='-')f=-1;\n   for(;isdigit(c);c=getchar())x=(x<<1)+(x<<3)+c-'0';\n    x*=f;\n}\n\nint n,m,q;\nint head[N],cnt;\nint a[N],faz[N];\nint dfn[N],dfsxu,siz[N];\nint f[N][20],dep[N];\nint bit[N];\nint del[N];\nint out[N],qc;\n\nstruct Edge{\n\tint to,next;\t\n}e[N<<1];\n\nvoid addedge(int x,int y){\n\te[++cnt]=(Edge){y,head[x]},head[x]=cnt;\t\n}\n\nstruct misaka{\n\tint x,y,z,k,id;\n}T[N],T1[N],T2[N];\n\nvoid add(int o,int x){\n\tfor(;o<=n;o+=o&-o)bit[o]+=x;\t\n}\n\nint ask(int o){\n\tint res=0;\n\tfor(;o;o-=o&-o)res+=bit[o];\n\treturn res;\t\n}\n\nvoid dfs(int u,int fa){\n\tdfn[u]=++dfsxu;\n\tsiz[u]=1;\n\tf[u][0]=fa;\n\tRep(i,1,19)f[u][i]=f[f[u][i-1]][i-1];\n\tdep[u]=dep[fa]+1;\n\tfaz[u]=fa;\n\tRepG(i,u){\n\t\tint v=e[i].to;\n\t\tif(v==fa)continue;\n\t\tdfs(v,u);\n\t\tsiz[u]+=siz[v];\n\t}\n}\n\nint lca(int x,int y){\n\tif(dep[x]<dep[y])swap(x,y);\n\t_Rep(i,19,0)if(dep[f[x][i]]>=dep[y])x=f[x][i];\n\tif(x==y)return x;\n\t_Rep(i,19,0)if(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\treturn f[x][0];\t\n}\n\nvoid solve(int l,int r,int L,int R){\n\tif(l==r){\n\t\tRep(i,L,R)\n\t\t\tif(T[i].k)\n\t\t\t\tout[T[i].id]=l;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tint cnt1=0,cnt2=0,top=0;\n\tRep(i,L,R)\n\t\tif(!T[i].k)\n\t\t\tif(T[i].y<=mid){\n\t\t\t\tadd(dfn[T[i].x],T[i].z);\n\t\t\t\tadd(dfn[T[i].x]+siz[T[i].x],-T[i].z);\n\t\t\t\tT1[++cnt1]=T[i];\n\t\t\t\tdel[++top]=i;\n\t\t\t}\n\t\t\telse T2[++cnt2]=T[i];\n\t\telse{\n\t\t\tint lft=ask(dfn[T[i].x])+ask(dfn[T[i].y])-ask(dfn[T[i].z]);\n\t\t\tif(faz[T[i].z])lft-=ask(dfn[faz[T[i].z]]);\n\t\t\tif(T[i].k<=lft)T1[++cnt1]=T[i];\n\t\t\telse{\n\t\t\t\tT[i].k-=lft;\n\t\t\t\tT2[++cnt2]=T[i];\t\n\t\t\t}\n\t\t}\n\tRep(i,1,top){\n\t\tint x=T[del[i]].x,z=T[del[i]].z;\n\t\tadd(dfn[x],-z),add(dfn[x]+siz[x],z);\t\n\t}\n\tRep(i,1,cnt1)T[L+i-1]=T1[i];\n\tRep(i,1,cnt2)T[L+cnt1+i-1]=T2[i];\n\tsolve(l,mid,L,L+cnt1-1);\n\tsolve(mid+1,r,L+cnt1,R); \n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tread(n),read(q);\n\tRep(i,1,n){\n\t\tread(a[i]);\n\t\tT[++m]=(misaka){i,a[i],1,0,0};\n\t}\n\tRep(i,1,n-1){\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\taddedge(x,y),addedge(y,x);\t\n\t}\n\tdfs(1,0);\n\twhile(q--){\n\t\tint opt,x,y;\n\t\tread(opt),read(x),read(y);\n\t\tif(!opt){\n\t\t\tT[++m]=(misaka){x,a[x],-1,0,0};\n\t\t\ta[x]=y;\n\t\t\tT[++m]=(misaka){x,a[x],1,0,0};\t\n\t\t}\n\t\telse{\n\t\t\tint z=lca(x,y);\n\t\t\tint len=dep[x]+dep[y]-2*dep[z]+1;\n\t\t\tif(len<opt)out[++qc]=-1;\n\t\t\telse T[++m]=(misaka){x,y,z,len-opt+1,++qc};\n\t\t} \t\n\t}\n\tsolve(1,1e8,1,m);\n\tRep(i,1,qc)\n\t\tif(~out[i])printf(\"%d\\n\",out[i]);\n\t\telse puts(\"invalid request!\");\n\treturn 0;\n}\n```\n",
        "postTime": 1603972801,
        "uid": 97344,
        "name": "devout",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u601d\u8def\uff1a\u6811\u94fe\u5256\u5206+\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\n\n\u8003\u8651\u5230\u6743\u503c\u7ebf\u6bb5\u6811\u81ea\u5e26buff\u2014\u2014\u6574\u4f53\u4e8c\u5206\uff0c\u4e0d\u96be\u60f3\u5230\u5bf9\u6811\u94fe\u4e0a\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u6c42\u548c\uff0c\u5e76\u5728\u5408\u5e76\u540e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u6c42\u7b2c $k$ \u5927\u5373\u53ef\u6109\u5feb\u5730\u89e3\u51b3\u672c\u9898\u3002\n\n\u5728\u6811\u94fe\u4e0a\u7684\u6c42\u548c\u64cd\u4f5c\u53ef\u4ee5\u7528\u6811\u5256\u52a0\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002\u672c\u9898\u9700\u8981\u652f\u6301\u7684\u64cd\u4f5c\u53ea\u6709\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\u7ef4\u62a4 dfs \u5e8f\u4e0a\u7684\u4fe1\u606f\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define id(x) (lower_bound(b + 1, b + L + 1, x) - b)\n#define rid(x) (b[x])\n#define lson(x) (node[x].l)\n#define rson(x) (node[x].r)\n#define sum(x) (node[x].sum)\n#define lowbit(x) (x & (-x))\nconst int MAXN = 80005 * 2;\nvector<int> G[MAXN];\nstruct opt {int k, a, b;} op[MAXN];\nstruct Node {\n    int l, r, sum;\n    Node() {l = r = sum = 0;}\n} node[MAXN * 80];\nint c[MAXN], cnt;\nint N, Q, L;\nint t[MAXN], b[MAXN];\nint q1[MAXN], q2[MAXN], len1, len2;\nint dep[MAXN], dfn[MAXN], f[MAXN], son[MAXN], top[MAXN], size[MAXN], dfn_idx;\nvoid insert(int& u, int l, int r, int p, int val) {\n    if (u == 0) u = ++cnt;\n    sum(u) += val;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    if (p <= mid) insert(lson(u), l, mid, p, val);\n    else insert(rson(u), mid + 1, r, p, val);\n}\nvoid modify(int u, int p, int val) {\n    for (; u <= N; u += lowbit(u)) insert(c[u], 1, L, p, val);\n}\nvoid dfs1(int u, int fa) {\n    dep[u] = dep[fa] + 1;\n    f[u] = fa;\n    size[u] = 1;\n    for (vector<int>::iterator it = G[u].begin(); it != G[u].end(); it++) {\n        int v = *it;\n        if (v == fa) continue;\n        dfs1(v, u);\n        if (size[v] > size[son[u]]) son[u] = v;\n        size[u] += size[v];\n    }\n}\nvoid dfs2(int u, int topc) {\n    dfn[u] = ++dfn_idx;\n    top[u] = topc;\n    modify(dfn[u], t[u], 1);\n    if (son[u]) dfs2(son[u], topc);\n    for (vector<int>::iterator it = G[u].begin(); it != G[u].end(); it++) {\n        int v = *it;\n        if (v == son[u] || v == f[u]) continue;\n        dfs2(v, v);\n    }\n}\nvoid pre_bin(int u, int* a, int& len) {\n    for (; u >= 1; u -= lowbit(u)) a[++len] = c[u];\n}\nint pre(int u, int v) {\n    len1 = len2 = 0;\n    while (top[u] != top[v]) {\n        if (dep[top[u]] < dep[top[v]]) swap(u, v);\n        pre_bin(dfn[u], q1, len1);\n        pre_bin(dfn[top[u]] - 1, q2, len2);\n        u = f[top[u]];\n    }\n    if (dep[u] < dep[v]) swap(u, v);\n    pre_bin(dfn[u], q1, len1);\n    pre_bin(dfn[v] - 1, q2, len2);\n    return v;\n}\nint query(int l, int r, int k) {\n    if (l == r) return l;\n    int mid = (l + r) >> 1, rsum = 0;\n    for (int i = 1; i <= len1; ++i) rsum += sum(rson(q1[i]));\n    for (int i = 1; i <= len2; ++i) rsum -= sum(rson(q2[i]));\n    if (k <= rsum) {\n        for (int i = 1; i <= len1; ++i) q1[i] = rson(q1[i]);\n        for (int i = 1; i <= len2; ++i) q2[i] = rson(q2[i]);\n        return query(mid + 1, r, k);\n    }\n    else {\n        for (int i = 1; i <= len1; ++i) q1[i] = lson(q1[i]);\n        for (int i = 1; i <= len2; ++i) q2[i] = lson(q2[i]);\n        return query(l, mid, k - rsum);\n    }\n}\nint main() {\n    scanf(\"%d%d\", &N, &Q);\n    for (register int i = 1; i <= N; ++i) scanf(\"%d\", &t[i]), b[++L] = t[i], c[i] = ++cnt;\n    for (register int i = 1; i < N; ++i) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v), G[v].push_back(u);\n    }\n    for (register int i = 1; i <= Q; ++i) {\n        scanf(\"%d%d%d\", &op[i].k, &op[i].a, &op[i].b);\n        if (op[i].k == 0) b[++L] = op[i].b;\n    }\n    sort(b + 1, b + L + 1);\n    L = unique(b + 1, b + L + 1) - b - 1;\n    for (register int i = 1; i <= N; ++i) t[i] = id(t[i]);\n    dfs1(1, 0);\n    dfs2(1, 1);\n    for (register int i = 1; i <= Q; ++i) {\n        int k = op[i].k, a = op[i].a, b_ = op[i].b;\n        if (k == 0) {\n            b_ = id(b_);\n            modify(dfn[a], t[a], -1);\n            t[a] = b_;\n            modify(dfn[a], t[a], 1);\n        }\n        else {\n            int lca = pre(a, b_);\n            int maxk = dep[a] + dep[b_] - dep[lca] * 2 + 1;\n            if (maxk < k) {\n                puts(\"invalid request!\");\n                continue;\n            }\n            printf(\"%d\\n\", rid(query(1, L, k)));\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1563720918,
        "uid": 116851,
        "name": "_\u98ce\u4f11\u4f4f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u6574\u4f53\u4e8c\u5206+\u6811\u94fe\u5256\u5206+\u5dee\u5206\u6811\u72b6\u6570\u7ec4+\u6811\u4e0a\u5dee\u5206\n\n\u8fd9\u9053\u9898\u548c[\u3010HNOI2016\u3011\u7f51\u7edc](https://www.luogu.org/problemnew/show/P3250) \u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u4fee\u6539\u53d8\u6210\u4e86\u5355\u70b9\u7684\uff0c\u8be2\u95ee\u53d8\u6210\u4e86\u94fe\u4e0a\u7684\uff0c\u6700\u5927\u503c\u53d8\u6210\u4e86\u7b2ck\u5927\u3002\n\n\u8003\u8651\u7b2ck\u5927\u7684\u89e3\u6cd5\uff0c\u65e0\u975e\u662f\u4e3b\u5e2d\u6811\u5212\u5206\u6811\u7b49\u6570\u636e\u7ed3\u6784\u6216\u6574\u4f53\u4e8c\u5206\u3002\u8fd9\u9898\u53ef\u4ee5\u79bb\u7ebf\uff0c\u8003\u8651\u79bb\u7ebf\u4e4b\u540e\u6574\u4f53\u4e8c\u5206\u3002\n\n\u548c\u5e8f\u5217\u7b2ck\u5927\u76f8\u4f3c\uff0c\u6bcf\u6b21\u4fee\u6539\u62c6\u6210\u4e24\u4e2a\uff0c\u7136\u540e\u53c2\u7167\u697c\u4e0a\u89e3\u6cd5\u53ef\u4ee5\u505a\u5230$O(qlog_2^3n)$\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6811\u5256\u8fdb\u884c\u4fee\u6539\u548c\u8be2\u95ee\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u9898\u5176\u5b9e\u53ef\u4ee5\u505a\u5230$O(qlog_2^2n)$\u3002\u53c2\u8003\u3010\u7f51\u7edc\u3011\u90a3\u9898\u4e2d\u7684\u94fe\u4fee\u6539\u548c\u5355\u70b9\u8be2\u95ee\u53ef\u4ee5\u901a\u8fc7\u6811\u4e0a\u5dee\u5206\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4dfs\u5e8f\u6765\u6d88\u53bb\u4e00\u4e2alog\uff0c\u8fd9\u9898\u540c\u6837\u53ef\u4ee5\u91c7\u7528\u8fd9\u4e2a\u6280\u5de7\u3002\u8003\u8651\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u6709\u591a\u5c11\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u70b9$g(x)$\uff0c\u5219\u4fee\u6539\u5355\u70b9\u76f8\u5f53\u4e8e\u5bf9\u4e00\u68f5\u5b50\u6811\u8fdb\u884c\u4fee\u6539\uff0c\u8be2\u95ee\u94fe$(x,y)$\u53ef\u4ee5\u901a\u8fc7\u6811\u4e0a\u5dee\u5206\u5b9e\u73b0\uff0c\u5373$g(x)+g(y)-g(lca(x,y))-g(fa(lca(x,y)))$\u3002\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u5e8f\u5217\u4e0a\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u6c42\u548c\u3002\n\n\u666e\u901a\u7684\u6811\u72b6\u6570\u7ec4\u662f\u5355\u70b9\u4fee\u6539\u533a\u95f4\u6c42\u548c\uff0c\u8003\u8651\u7ef4\u62a4\u539f\u6570\u7ec4\u7684\u5dee\u5206\u6570\u7ec4\uff0c\u5219\u533a\u95f4\u4fee\u6539\u7b49\u540c\u4e8e\u533a\u95f4\u9996\u7aef+1\uff0c\u672b\u7aef-1\uff0c\u5355\u70b9\u6c42\u548c\u5c31\u7b49\u540c\u4e8e\u6c42\u5dee\u5206\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u4e8e\u662f\u628a\u533a\u95f4\u4fee\u6539\u5355\u70b9\u6c42\u548c\u4e5f\u8f6c\u5316\u4e3a\u4e86\u5355\u70b9\u4fee\u6539\u533a\u95f4\u6c42\u548c\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e86\u3002\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\nusing namespace std;\nconst int N=8e4+2,M=2.4e5+2;\nstruct Q\n{\n\tint x,y,v,t;\n};\nQ q[M],st1[M],st2[M];\nint lj[M],nxt[M],fir[N],dfn[N],a[M],ans[N],top[N],fa[N];\nint siz[N],hc[N],dep[N],b[M],f[N],dy[N],g[N],cs[N];\nint n,m,qs,cnt,i,x,y,c,bs,gs,ggs,tp1,tp2;\ninline void read(int &x)\n{\n\tc=getchar();\n\twhile ((c<48)||(c>57)) c=getchar();\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n}\ninline void add()\n{\n\tlj[++bs]=y;\n\tnxt[bs]=fir[x];\n\tfir[x]=bs;\n\tlj[++bs]=x;\n\tnxt[bs]=fir[y];\n\tfir[y]=bs;\n}\nvoid dfs1(int x)\n{\n\tsiz[x]=1;\n\tint i;\n\tfor (i=fir[x];i;i=nxt[i]) if (lj[i]!=f[x])\n\t{\n\t\tdep[lj[i]]=dep[f[lj[i]]=x]+1;\n\t\tdfs1(lj[i]);siz[x]+=siz[lj[i]];\n\t\tif (siz[lj[i]]>siz[hc[x]]) hc[x]=lj[i];\n\t}\n}\nvoid dfs2(int x)\n{\n\tdfn[x]=++bs;\n\tif (hc[x])\n\t{\n\t\ttop[hc[x]]=top[x];\n\t\tdfs2(hc[x]);\n\t\tint i;\n\t\tfor (i=fir[x];i;i=nxt[i]) if ((lj[i]!=f[x])&&(lj[i]!=hc[x])) dfs2(top[lj[i]]=lj[i]);\n\t}\n}\ninline int lca(int x,int y)\n{\n\twhile (top[x]!=top[y]) if (dep[top[x]]<dep[top[y]]) y=f[top[y]]; else x=f[top[x]];\n\tif (dep[x]<dep[y]) return x; return y;\n}\ninline void add(register int x,register int y)\n{\n\t++y;\n\twhile (x<=n) {++g[x];x+=x&(-x);}\n\twhile (y<=n) {--g[y];y+=y&(-y);}\n}\ninline void del(register int x,register int y)\n{\n\t++y;\n\twhile (x<=n) {--g[x];x+=x&(-x);}\n\twhile (y<=n) {++g[y];y+=y&(-y);}\n}\ninline int sum(register int x)\n{\n\tregister int r=0;\n\twhile (x)\n\t{\n\t\tr+=g[x];x^=x&(-x);\n\t}\n\treturn r;\n}\nvoid ztef(int l,int r,int ql,int qr)\n{\n\tif ((l>r)||(ql>qr)) return;\n\tif (l==r)\n\t{\n\t\t--ql;\n\t\twhile (++ql<=qr) ans[q[ql].t]=b[l];\n\t\treturn;\n\t}\n\tint i,mid=l+r>>1,qmid;tp1=tp2=0;\n\tfor (i=ql;i<=qr;i++) if (q[i].t) {tp1=1;break;}\n\tif (tp1==0) return;tp1=0;\n\tfor (i=ql;i<=qr;i++) if (q[i].t)\n\t{\n\t\tc=sum(dfn[q[i].x])+sum(dfn[q[i].y])-(sum(dfn[fa[q[i].t]])<<1)+cs[fa[q[i].t]];\n\t\tif (c>=q[i].v) st2[++tp2]=q[i]; else\n\t\t{\n\t\t\tq[i].v-=c;\n\t\t\tst1[++tp1]=q[i];\n\t\t}\n\t}\n\telse if (q[i].y>0)\n\t{\n\t\tif (q[i].y<=mid) st1[++tp1]=q[i]; else\n\t\t{\n\t\t\tadd(dfn[q[i].x],dfn[q[i].x]+siz[q[i].x]-1);++cs[q[i].x];\n\t\t\tst2[++tp2]=q[i];\n\t\t}\n\t} else\n\t{\n\t\tif (-q[i].y<=mid) st1[++tp1]=q[i]; else\n\t\t{\n\t\t\tdel(dfn[q[i].x],dfn[q[i].x]+siz[q[i].x]-1);--cs[q[i].x];\n\t\t\tst2[++tp2]=q[i];\n\t\t}\n\t}\n\tfor (i=1;i<=tp2;i++) if ((st2[i].t==0)&&(st2[i].v==0))\n\t{\n\t\tdel(dfn[st2[i].x],dfn[st2[i].x]+siz[st2[i].x]-1);--cs[st2[i].x];\n\t}\n\tfor (i=1;i<=tp1;i++) q[i+ql-1]=st1[i];qmid=ql+tp1-1;\n\tfor (i=1;i<=tp2;i++) q[i+qmid]=st2[i];\n\tztef(l,mid,ql,qmid);ztef(mid+1,r,qmid+1,qr);\n}\nint main()\n{\n\tread(n);read(m);cnt=n;\n\tfor (i=1;i<=n;i++)\n\t{\n\t\tread(q[i].y);a[i]=g[i]=q[i].y;q[i].x=i;dy[i]=i;\n\t}ggs=n;\n\tfor (i=1;i<n;i++)\n\t{\n\t\tread(x);read(y);add();\n\t}bs=0;\n\tdfs1(dep[1]=1);dfs2(top[1]=1);\n\twhile (m--)\n\t{\n\t\tread(x);read(q[++cnt].x);read(q[cnt].y);\n\t\tif (x)\n\t\t{\n\t\t\tq[cnt].v=x;q[cnt].t=++qs;fa[qs]=lca(q[cnt].x,q[cnt].y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tq[cnt+1]=q[cnt];\n\t\t\tq[cnt].y=-g[q[cnt].x];q[cnt].v=q[dy[q[cnt].x]].v=1;\n\t\t\tdy[q[cnt].x]=cnt+1;\n\t\t\ta[++ggs]=g[q[cnt].x]=q[cnt+1].y;++cnt;\n\t\t}\n\t}\n\tsort(a+1,a+ggs+1);\n\tmemset(g,0,sizeof(g));\n\tb[gs=1]=a[1];b[0]=-1;\n\tfor (i=2;i<=ggs;i++) if (a[i]!=a[i-1]) b[++gs]=a[i];\n\tfor (i=1;i<=cnt;i++) if (!q[i].t)\n\t{\n\t\tif (q[i].y>0) q[i].y=lower_bound(b+1,b+gs+1,q[i].y)-b; else q[i].y=b-lower_bound(b+1,b+gs+1,-q[i].y);\n\t}\n\tztef(0,gs,1,cnt);\n\tfor (i=1;i<=qs;i++) if (~ans[i]) printf(\"%d\\n\",ans[i]); else puts(\"invalid request!\");\n}\n```\n",
        "postTime": 1555169121,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a\u5e26\u5355\u70b9\u4fee\u6539 \u8def\u5f84\u7b2ck\u5927\n\n\u63d0\u4f9b\u6811\u5256+\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\n\nO(log^4 n) ~~\u5438\u6c27\u624d\u8fc7\u7684~~\n\n```cpp\n#include<cstdio>\n#include<utility>\n#include<algorithm>\nusing namespace std;\nconst int N=8e4+10,INF=1e8+1;\ntypedef pair<pair<int,int>,int>piii;\nint w[N];\ntemplate<class type>inline void read(type &in)\n{\n    in=0;char ch=getchar();short fh=1;\n    while (ch<48||ch>57)fh=ch=='-'?-1:fh,ch=getchar();\n    while (ch>47&&ch<58)in=(in<<3)+(in<<1)+ch-48,ch=getchar();\n    in*=fh;\n}\nnamespace Edge\n{\n    int head[N],cnt;\n    struct edge{int to,next;}e[N*2];\n    inline void add(int a,int b)\n    {\n        e[++cnt].next=head[a];\n        head[a]=cnt;\n        e[cnt].to=b;\n    }\n}using namespace Edge;\nnamespace Splay\n{\n    struct tree\n    {\n        int value,size,cnt;\n        tree *fa,*son[2];\n        inline tree(int key)\n        {\n            cnt=size=1;\n            value=key;\n            fa=son[0]=son[1]=NULL;\n        }\n        inline int lsize()\n        {\n            return son[0]?son[0]->size:0;\n        }\n        inline void pushup()\n        {\n            size=lsize()+cnt;\n            if (son[1])size+=son[1]->size;\n        }\n        inline bool relation()\n        {\n            return fa?fa->son[1]==this:0;\n        }\n    };\n    inline void connect(tree *&p,tree *&fa,bool which)\n    {\n        if (p)p->fa=fa;\n        if (fa)fa->son[which]=p,fa->pushup();\n    }\n    inline void rotate(tree *&p)\n    {\n        bool lr=p->relation();\n        tree *fa=p->fa;\n        connect(p,fa->fa,fa->relation());\n        connect(p->son[lr^1],fa,lr);\n        connect(fa,p,lr^1);\n    }\n    inline void splay(tree *&root,tree *&p)\n    {\n        for (tree *fa;fa=p->fa;rotate(p))\n            if (fa->fa)\n                rotate(p->relation()^fa->relation()?p:fa);\n        root=p;\n    }\n    inline void insert(tree *&root,int key)\n    {\n        if (root==NULL){root=new tree(key);return;}\n        tree *now=root;\n        while (1)\n            if (key==now->value)\n                return now->cnt++,now->pushup(),splay(root,now);\n            else\n            {\n                tree *fa=now;\n                bool which=now->value>key; //\u7b2ck\u5927 \u63d2\u5165\u65f6\u4e0d\u7b49\u53f7\u65b9\u5411\u76f8\u53cd \n                now=now->son[which];\n                if (now==NULL)\n                    return now=new tree(key),connect(now,fa,which),splay(root,now);\n            }\n    }\n    inline void find(tree *&root,int key) //\u627e\u5230\u503c\u4e3akey\u7684\u6570\u7684\u8282\u70b9 splay\u81f3\u6839 \n    {\n        tree *now=root;\n        if (now==NULL)return;\n        while (now->son[now->value>key]&&now->value!=key)\n            now=now->son[now->value>key];\n        splay(root,now);\n    }\n    inline tree *precursor(tree *p) //\u627e\u524d\u9a71 \u53ea\u662f\u65b9\u4fbf\u5220\u9664\u64cd\u4f5c \n    {\n        tree *now=p->son[0];\n        while (now->son[1])now=now->son[1];\n        return now;\n    }\n    inline void Delete(tree *&root,int key)\n    {\n        find(root,key);tree *p=root;\n        if (p->son[0]==NULL&&p->son[1]==NULL)return root=NULL,delete p;\n        if (p->son[0]==NULL)return (root=p->son[1])->fa=NULL,delete p;\n        if (p->son[1]==NULL)return (root=p->son[0])->fa=NULL,delete p;\n        tree *pre=precursor(p);splay(root,pre);connect(p->son[1],pre,1);delete p;\n    }\n    inline int get_rank(tree *&root,int key) //\u627e\u6839\u4e3aroot\u7684Splay\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u6bd4key\u5927 \n    {\n        tree *now=root;int ranking=0;\n        while (now)\n            if (now->value<key)now=now->son[0]; //\u6b64\u65f6\u7b26\u53f7\u4e3a< \n            else\n            {\n                ranking+=now->lsize();\n                if (now->value==key)return ranking;\n                ranking+=now->cnt;\n                now=now->son[1];\n            }\n        return ranking;\n    }\n}using namespace Splay;\nnamespace Segment_Tree\n{\n    int num[N];\n    struct tree\n    {\n        int l,r,mx,mn; //\u5b58\u533a\u95f4\u6700\u5927\u6700\u5c0f\u503c \u65b9\u4fbf\u4e8c\u5206(\u7136\u800c\u5e76\u6ca1\u6709\u5feb\u591a\u5c11233 \n        tree *lson,*rson;\n        Splay::tree *root;\n        inline tree(int L,int R)\n        {\n            mx=-INF;mn=INF;\n            l=L;r=R;\n            root=NULL;\n            lson=rson=NULL;\n        }\n        inline void pushup()\n        {\n            mx=max(lson->mx,rson->mx);\n            mn=min(lson->mn,rson->mn);\n        }\n        void update(int pos,int key) //\u5355\u70b9\u4fee\u6539 \n        {\n            Delete(root,w[num[pos]]);insert(root,key); //\u5148\u5220\u6389\u65e7\u7684\u518d\u63d2\u5165\u65b0\u7684 \n            if (l==r){mx=mn=key;return;}\n            int mid=l+r>>1;\n            if (pos<=mid)lson->update(pos,key);\n            else rson->update(pos,key);\n            pushup();\n        }\n        int query_max(int L,int R)\n        {\n            if (l>R||r<L)return -INF;\n            if (l>=L&&r<=R)return mx;\n            return max(lson->query_max(L,R),rson->query_max(L,R));\n        }\n        int query_min(int L,int R)\n        {\n            if (l>R||r<L)return INF;\n            if (l>=L&&r<=R)return mn;\n            return min(lson->query_min(L,R),rson->query_min(L,R));\n        }\n        int get_rank(int L,int R,int key) //\u67e5\u8be2[L,R] \u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u6bd4key\u5927 \n        {\n            if (l>R||r<L)return 0;\n            if (l>=L&&r<=R)return Splay::get_rank(root,key);\n            return lson->get_rank(L,R,key)+rson->get_rank(L,R,key);\n        }\n    }*root;\n    void build(tree *&p,int l,int r)\n    {\n        p=new tree(l,r);\n        for (int i=l;i<=r;i++)insert(p->root,w[num[i]]);\n        if (l==r){p->mx=p->mn=p->root->value;return;}\n        int mid=l+r>>1;\n        build(p->lson,l,mid);\n        build(p->rson,mid+1,r);\n        p->pushup();\n    }\n}using namespace Segment_Tree;\nnamespace HeavyLight_Decomposition //\u6811\u5256 \n{\n    int cnt,dfn[N],top[N],wson[N],dep[N],fa[N],size[N];\n    void dfs1(int p)\n    {\n        size[p]=1;\n        for (int i=head[p];i;i=e[i].next)\n        {\n            int son=e[i].to;\n            if (son==fa[p])continue;\n            dep[son]=dep[p]+1;fa[son]=p;\n            dfs1(son);size[p]+=size[son];\n            if (size[son]>size[wson[p]])wson[p]=son;\n        }\n    }\n    void dfs2(int p,int tp)\n    {\n        top[p]=tp;dfn[p]=++cnt;num[cnt]=p;\n        if (wson[p])dfs2(wson[p],tp);\n        for (int son,i=head[p];i;i=e[i].next)\n            if ((son=e[i].to)!=fa[p]&&son!=wson[p])\n                dfs2(son,son);\n    }\n    inline piii get_extreme(int a,int b) //\u5148\u627e\u6700\u503c\u65b9\u4fbf\u4e8c\u5206 \u540c\u65f6\u7edf\u8ba1\u4e24\u70b9\u95f4\u8ddd\u79bb\u65b9\u4fbf\u5224\u65adk\u8fc7\u5927\u7684\u60c5\u51b5 \n    {\n        int maxw=-INF,minw=INF,x=a,y=b;\n        while (top[a]!=top[b])\n        {\n            if (dep[top[a]]<dep[top[b]])swap(a,b);\n            maxw=max(maxw,root->query_max(dfn[top[a]],dfn[a]));\n            minw=min(minw,root->query_min(dfn[top[a]],dfn[a]));\n            a=fa[top[a]];\n        }\n        if (dep[a]>dep[b])swap(a,b);\n        maxw=max(maxw,root->query_max(dfn[a],dfn[b]));\n        minw=min(minw,root->query_min(dfn[a],dfn[b]));\n        return make_pair(make_pair(maxw,minw),dep[x]+dep[y]-2*dep[a]+1);\n    }\n    inline int attempt(int a,int b,int c) //\u4e00\u6b21check \u7edf\u8ba1a->b\u8def\u5f84\u4e2d\u6bd4c\u5927\u7684\u6570\u7684\u4e2a\u6570 \n    {\n        int tot=0;\n        while (top[a]!=top[b])\n        {\n            if (dep[top[a]]<dep[top[b]])swap(a,b);\n            tot+=root->get_rank(dfn[top[a]],dfn[a],c);\n            a=fa[top[a]];\n        }\n        if (dep[a]>dep[b])swap(a,b);\n        return tot+root->get_rank(dfn[a],dfn[b],c);\n    }\n}using namespace HeavyLight_Decomposition;\ninline int query(int a,int b,int k)\n{\n    piii ex=get_extreme(a,b);\n    int l=ex.first.second,r=ex.first.first+1;\n    if (ex.second<k)return INF; //\u5982\u679ck\u6bd4\u4e24\u70b9\u95f4\u8ddd\u79bb\u8fd8\u8981\u5927 \u62a5\u9519 \n    while (l<r) \n    {\n        int mid=l+r>>1;\n        if (attempt(a,b,mid)<k)r=mid; //\u5982\u679c\u8def\u5f84\u95f4\u6bd4mid\u5927\u7684\u4e2a\u6570\u5c11\u4e8ek\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u653e\u5c0fmid \n        else l=mid+1;\n    }\n    return r;\n}\nint n,q;\nint main()\n{\n    read(n);read(q);\n    for (int i=1;i<=n;i++)read(w[i]);\n    for (int a,b,i=1;i<n;i++)\n        read(a),read(b),add(a,b),add(b,a);\n    dfs1(1);dfs2(1,1);build(root,1,n);\n    while (q--)\n    {\n        int k,a,b,ans;\n        read(k);read(a);read(b);\n        if (!k)root->update(dfn[a],b),w[a]=b;\n        else ans=query(a,b,k),ans<INF?printf(\"%d\\n\",ans):puts(\"invalid request!\");\n    }\n    return 0;\n}\n```",
        "postTime": 1539253616,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\n\n\u52a8\u6001\u94fe\u4e0a\u7b2c $k$ \u5927\u3002\u8003\u8651\u6811\u72b6\u6570\u7ec4 $+$ \u4e3b\u5e2d\u6811\u3002\n\n\u6811\u72b6\u6570\u7ec4\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u68f5\u4e3b\u5e2d\u6811\u3002\n\n\u5bf9\u4e8e\u4fee\u6539\uff0c\u6811\u72b6\u6570\u7ec4\u4e0a\u533a\u95f4\u4fee\u6539\u5373\u53ef\uff0c$\\mathcal O(\\log^2 n)$\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\uff0c\u5dee\u5206\uff0c\u4e3b\u5e2d\u6811\u6c42\u7b2c $k$ \u5927\uff0c$\\mathcal O(\\log^2 n)$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log^2 n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nnamespace Fread {\n\tconst int SIZE = 1 << 23;\n\tchar buf[SIZE], *S, *T;\n\tinline char getchar() {\n\t\tif (S == T) {\n\t\t\tT = (S = buf) + fread(buf, 1, SIZE, stdin);\n\t\t\tif (S == T)\n\t\t\t\treturn '\\n';\n\t\t}\n\t\treturn *S++;\n\t}\n}\nnamespace Fwrite {\n\tconst int SIZE = 1 << 23;\n\tchar buf[SIZE], *S = buf, *T = buf + SIZE;\n\tinline void flush() {\n\t\tfwrite(buf, 1, S - buf, stdout);\n\t\tS = buf;\n\t}\n\tinline void putchar(char c) {\n\t\t*S++ = c;\n\t\tif (S == T)\n\t\t\tflush();\n\t}\n\tstruct NTR {\n\t\t~NTR() {\n\t\t\tflush();\n\t\t}\n\t} ztr;\n}\n\n#ifdef ONLINE_JUDGE\n\t#define getchar Fread::getchar\n\t#define putchar Fwrite::putchar\n#endif\n\ninline int read() {\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t\tx = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\ninline void write(int x) {\n\tif (x < 0) {\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int _ = 1e5 + 10;\n\nint n, m, cnt, len, a[_], b[_];\n\nint tot, head[_], to[_ << 1], nxt[_ << 1];\n\nint lc[_ * 200], rc[_ * 200], sum[_ * 200];\n\nint rt[_], dep[_], fa[_][20], dfc, st[_], ed[_];\n\nint c[2], tmp[2][_];\n\nstruct que {\n\tint k, a, b;\n} q[_];\n\ninline void add(int u, int v) {\n\tto[++tot] = v, nxt[tot] = head[u], head[u] = tot;\n\tto[++tot] = u, nxt[tot] = head[v], head[v] = tot;\n}\n\nvoid update(int &u, int l, int r, int pos, int val) {\n\tif (!u) u = ++cnt;\n\tsum[u] += val;\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) update(lc[u], l, mid, pos, val);\n\telse update(rc[u], mid + 1, r, pos, val);\n}\n\nint query(int l, int r, int k) {\n\tif (l == r) return l;\n\tint mid = (l + r) >> 1, s = 0;\n\tfor (int i = 1; i <= c[0]; ++i) s += sum[lc[tmp[0][i]]];\n\tfor (int i = 1; i <= c[1]; ++i) s -= sum[lc[tmp[1][i]]];\n\tif (k <= s) {\n\t\tfor (int i = 1; i <= c[0]; ++i) tmp[0][i] = lc[tmp[0][i]];\n\t\tfor (int i = 1; i <= c[1]; ++i) tmp[1][i] = lc[tmp[1][i]];\n\t\treturn query(l, mid, k);\n\t} else {\n\t\tfor (int i = 1; i <= c[0]; ++i) tmp[0][i] = rc[tmp[0][i]];\n\t\tfor (int i = 1; i <= c[1]; ++i) tmp[1][i] = rc[tmp[1][i]];\n\t\treturn query(mid + 1, r, k - s);\n\t}\n}\n\nvoid dfs(int x) {\n\tfor (int i = 1; i < 20; ++i) fa[x][i] = fa[fa[x][i - 1]][i - 1];\n\tdep[x] = dep[fa[x][0]] + 1, st[x] = ++dfc;\n\tfor (int i = head[x]; i; i = nxt[i]) {\n\t\tint v = to[i];\n\t\tif (v == fa[x][0]) continue;\n\t\tfa[v][0] = x;\n\t\tdfs(v);\n\t}\n\ted[x] = dfc;\n}\n\nint LCA(int x, int y) {\n\tif (dep[x] < dep[y]) swap(x, y);\n\tint t = dep[x] - dep[y];\n\tfor (int i = 0; i < 20; ++i)\n\t\tif (t & (1 << i)) x = fa[x][i];\n\tif (x == y) return x;\n\tfor (int i = 19; ~i; --i)\n\t\tif (fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];\n\treturn fa[x][0];\n}\n\ninline int lowbit(int x) {\n\treturn x & (-x);\n}\n\ninline void change(int pos, int val, int op) {\n\tfor (; pos <= n; pos += lowbit(pos)) update(rt[pos], 1, len, val, op);\n}\n\nsigned main() {\n\tn = read(), m = read(), len = n;\n\tfor (int i = 1; i <= n; ++i) a[i] = b[i] = read();\n\tfor (int i = 1; i < n; ++i) add(read(), read());\n\tfor (int i = 1; i <= m; ++i) {\n\t\tq[i].k = read(), q[i].a = read(), q[i].b = read();\n\t\tif (!q[i].k) b[++len] = q[i].b;\n\t}\n\tsort(b + 1, b + len + 1), len = unique(b + 1, b + len + 1) - b - 1;\n\tfor (int i = 1; i <= n; ++i) a[i] = lower_bound(b + 1, b + len + 1, a[i]) - b;\n\tdfs(1);\n\tfor (int i = 1; i <= n; ++i) change(st[i], a[i], 1), change(ed[i] + 1, a[i], -1);\n\tfor (int i = 1; i <= m; ++i) {\n\t\tint x = q[i].a, y = q[i].b, k = q[i].k, lca, flca, s;\n\t\tif (k) {\n\t\t\tlca = LCA(x, y), flca = fa[lca][0], c[0] = c[1] = 0;\n\t\t\ts = dep[x] + dep[y] - dep[lca] - dep[flca];\n\t\t\tif (k > s) {\n\t\t\t\tprintf(\"invalid request!\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (int i = st[x]; i; i -= lowbit(i)) tmp[0][++c[0]] = rt[i];\n\t\t\tfor (int i = st[y]; i; i -= lowbit(i)) tmp[0][++c[0]] = rt[i];\n\t\t\tfor (int i = st[lca]; i; i -= lowbit(i)) tmp[1][++c[1]] = rt[i];\n\t\t\tfor (int i = st[flca]; i; i -= lowbit(i)) tmp[1][++c[1]] = rt[i];\n\t\t\tprintf(\"%d\\n\", b[query(1, len, s - k + 1)]);\n\t\t} else {\n\t\t\tchange(st[x], a[x], -1), change(ed[x] + 1, a[x], 1);\n\t\t\ta[x] = lower_bound(b + 1, b + len + 1, y) - b;\n\t\t\tchange(st[x], a[x], 1), change(ed[x] + 1, a[x], -1);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1669857049,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "P4175 [CTSC2008]\u7f51\u7edc\u7ba1\u7406"
    },
    {
        "content": "\u6570\u636e\u7ed3\u6784\u9898.\n\n# \u65b9\u6cd51\n\u6811\u72b6\u6570\u7ec4+\u4e3b\u5e2d\u6811+\u6811\u5256->$O(n\\log^3 n)$\n\n\u5148\u7528\u6811\u5256\u5256\u51fa\u6811\u7684\u91cd\u94fe,\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u91cd\u94fe\u63a8\u6210\u4e00\u4e2a\u533a\u95f4.\n\n\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u904d\u5386\u4f4d\u7f6e,\u4e3b\u5e2d\u6811\u7ef4\u62a4\u6570.\n\n\u4fee\u6539->$O(n*\\log^2 n)$.\n\n\u67e5\u8be2->\u7528\u6811\u5256\u627e\u51fa\u5bf9\u5e94\u7684\u533a\u95f4($\\log n$\u4e2a),\u5265\u79bb\u51fa\u6811\u72b6\u6570\u7ec4\u7684\u8282\u70b9($\\log^2n$\u4e2a),\u6700\u540e\u6574\u4f53\u4e8c\u5206($\\log n)$.\n\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<cstring>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#define gc getchar()//(p1==p2&&(p2=(p1=buf)+fread(buf,1,size,stdin),p1==p2)?EOF:*p1++)\n#define lc tr[x].l\n#define rc tr[x].r\nusing namespace std;\nconst int N=1e5+10,size=1<<20;\n\n//char buf[size],*p1=buf,*p2=buf;\ntemplate<class o> void qr(o &x) {\n\tx=0; int f=1; char c=gc;\n\twhile(!isdigit(c)){if(c=='-')f=-1; c=gc;}\n\twhile(isdigit(c))x=x*10+c-'0',c=gc;\n\tx*=f;\n}\ntemplate<class o> void qw(o x) {\n\tif(x<0) putchar('-'),x=-x;\n\tif(x>9) qw(x/10);\n\tputchar(x%10+'0');\n}\ntemplate<class o> void pr2(o x) {qw(x); puts(\"\");}\n\nint n,m,t[N],b[N<<1],num,fa[N],dep[N],son[N],sz[N];\nstruct edge{int y,next;}a[N<<1]; int len,last[N];\nvoid ins(int x,int y) {a[++len]=(edge){y,last[x]};last[x]=len;}\n\nvoid dfs1(int x) {\n\tsz[x]=1;\n\tfor(int k=last[x],y;k;k=a[k].next)\n\t\tif((y=a[k].y)^fa[x]) {\n\t\t\tfa[y]=x;\n\t\t\tdep[y]=dep[x]+1;\n\t\t\tdfs1(y);\n\t\t\tif(sz[y]>sz[son[x]]) son[x]=y;\n\t\t\tsz[x]+=sz[y];\n\t\t}\n}\n\nint z,id[N],top[N];\nvoid dfs2(int x,int tp) {\n\tid[x]=++z; top[x]=tp;\n\tif(son[x]) dfs2(son[x],tp);\n\tfor(int k=last[x],y;k;k=a[k].next)  {\n\t\ty=a[k].y;\n\t\tif(y!=fa[x]&&y!=son[x]) dfs2(y,y);\n\t}\n}\n\nstruct node{int l,r,s;}tr[N*150]; int cnt,root[N],sta[N],tp;\nvoid update(int &x,int l,int r,int pos,int d) {\n\tif(!x) x=tp?sta[tp--]:++cnt;\n\ttr[x].s+=d;\n\tif(l^r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(pos<=mid) update(lc,l,mid,pos,d);\n\t\telse \t\t update(rc,mid+1,r,pos,d);\n\t}\n\tif(!tr[x].s) sta[++tp]=x,x=0;\n}\nvoid add(int x,int pos,int d) {for(\t;x<=n;x+=x&-x) update(root[x],1,num,pos,d);}\n\nint u[444],v[444];\nvoid get(int x,int y) {//dep[x]>dep[y],\u4e14\u4e24\u70b9\u5728\u540c\u4e00\u94fe\u4e0a\n\tfor(int i=id[x]\t ;i;i&=i-1) u[++u[0]]=root[i];\n\tfor(int i=id[y]-1;i;i&=i-1) v[++v[0]]=root[i];\n}\n\nvoid left (int *a) {for(int i=1;i<=a[0];i++) a[i]=tr[a[i]].l;}\nvoid right(int *a) {for(int i=1;i<=a[0];i++) a[i]=tr[a[i]].r;}\n\nvoid solve(int x,int y,int k) {\n\tint z=0; u[0]=v[0]=0;\n\twhile(top[x]^top[y]) {\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tget(x,top[x]); z+=dep[x];\n\t\tx=fa[top[x]];  z-=dep[x];\n\t}\n\tif(id[x]<id[y]) swap(x,y);\n\tget(x,y); z+=dep[x]-dep[y]+1;\n\tif(k>z) puts(\"invalid request!\");\n\telse {\n\t\tint l=1,r=num,mid;\n\t\twhile(l<r) {\n\t\t\tmid=(l+r)>>1; z=0;\n\t\t\tfor(int i=1;i<=u[0];i++) z+=tr[tr[u[i]].r].s;\n\t\t\tfor(int i=1;i<=v[0];i++) z-=tr[tr[v[i]].r].s;\n\t\t\tif(k<=z) right(u),right(v),l=mid+1;\n\t\t\telse k-=z,left(u),left(v),r=mid;\n\t\t}\n\t\tpr2(b[l]);\n\t}\n}\n\nstruct rec {\n\tint k,x,y;\n} q[N]; \n\nint main() {\n\tqr(n); qr(m); for(int i=1;i<=n;i++) qr(t[i]),b[++num]=t[i];\n\tfor(int i=1,x,y;i<n;i++) qr(x),qr(y),ins(x,y),ins(y,x);\n\tfor(int i=1;i<=m;i++) {\n\t\tqr(q[i].k); qr(q[i].x); qr(q[i].y);\n\t\tif(!q[i].k) b[++num]=q[i].y;\n\t}\n\tsort(b+1,b+num+1); num=unique(b+1,b+num+1)-(b+1);\n\tfor(int i=1;i<=n;i++) t[i]=lower_bound(b+1,b+num+1,t[i])-b;\n\tdep[1]=1; fa[1]=0; dfs1(1); dfs2(1,1); \n\tfor(int i=1;i<=n;i++) add(id[i],t[i],1);\n\tfor(int i=1,k,x,y;i<=m;i++) {\n\t\tk=q[i].k; x=q[i].x; y=q[i].y;\n\t\tif(!k) add(id[x],t[x],-1),add(id[x],t[x]=lower_bound(b+1,b+num+1,y)-b,1);\n\t\telse solve(x,y,k);\n\t}\n\treturn 0;\n}\n\n```\n# \u65b9\u6cd52\n\u6811\u4e0a\u5e26\u4fee\u83ab\u961f->$O(n^\\frac 3 5)$.\n\n\u8d44\u74f7\u67e5\u8be2\u64cd\u4f5c\u7684\u53ef\u7528\u6811\u72b6\u6570\u7ec4\u500d\u589e,\u4ea6\u53ef\u7528\u5206\u5757\u66b4\u529b(\u603b\u5171\u624d$m\\sqrt n$).\n\n\u4ee3\u7801\u61d2\u5f97\u6253\u4e86.",
        "postTime": 1589432604,
        "uid": 118826,
        "name": "2018LZY",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u9898\u76ee\u9700\u8981\u7ef4\u62a4\u652f\u6301\u5355\u70b9\u4fee\u6539\u7684\u6811\u4e0a\u8def\u5f84\u7b2cK\u5927\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u8def\u5f84\u95ee\u9898\u53ea\u9700\u8981\u5c06\u5176\u7528\u6811\u5256\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\uff0c\u7136\u540e\u76f4\u63a5\u5229\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u533a\u95f4\u5e8f\u5217\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7528\u4e8c\u5206+\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u5957\u5e73\u8861\u6811\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5e26\u56db\u4e2alog\uff0c\u52c9\u5f3a\u53ef\u4ee5\u5361\u8fc7\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e00\u5b9a\u8981\u5bf9\u6743\u503c\u8fdb\u884c\u54c8\u5e0c\u6765\u79bb\u6563\u5316\uff0c\u4ee5\u6b64\u51cf\u5c11\u679a\u4e3e\u8303\u56f4\u3002\n\n\u4ee3\u7801\u91cf\u4e0d\u7b97\u5c0f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\u6bd4\u8f83\u591a\u3002\n\n\u8fd9\u91cc\u4f7f\u7528vector\u5b58\u56fe+treap\u7ef4\u62a4\u6811\u5957\u6811\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ninline int read()\n{\n\tint x=0; int f=1; char ch=getchar();\n\twhile(!isdigit(ch)) {if(ch=='-')f=-1; ch=getchar();}\n\twhile(isdigit(ch)) {x=x*10+ch-'0'; ch=getchar();}\n\treturn x*f;\n}\n\nconst int MAXM = 5000005;\nconst int MAXN = 100005;\nstd::vector<int> G[MAXN];\nint tree[MAXN],mp[MAXN],f[MAXN],a[MAXN],b[MAXN];\nint fa[MAXN][17],son[MAXN],dep[MAXN],top[MAXN],dfn[MAXN];\nint root[MAXN<<2],w[MAXM],v[MAXM],s[MAXM],rnd[MAXM];\nint ls[MAXM],rs[MAXM];\nint bin[20],vis[MAXN];\nint n,q,tot,cnt,size,tmp;\n\ninline void addedge(int u,int v)\n{\n\tG[u].push_back(v);\n\tG[v].push_back(u);\n}\n\ninline int find(int x)\n{\n\tint l=1,r=tot;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1;\n\t\tif(mp[mid]<x) l=mid+1;\n\t\telse if(mp[mid]==x) return mid;\n\t\telse r=mid-1;\n\t}\n\treturn l;\n}\n\nvoid dfs_getson(int x)\n{\n\tson[x]=1; vis[x]=1;\n\tfor(int i = 1; i <= 16; ++i)\n\t{\n\t\tif(bin[i]<=dep[x])\n\t\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\t\telse break;\n\t}\n\tint sz=G[x].size();\n\tfor (int i = 0; i < sz; ++i)\n\t{\n\t\tint y=G[x][i];\n\t\tif(vis[y])continue;\n\t\tdep[y]=dep[x]+1; fa[y][0]=x;\n\t\tdfs_getson(y);\n\t\tson[x]+=son[y];\n\t}\n}\n\nvoid dfs_rewrite(int x,int tp)\n{\n\tdfn[x]=++cnt; top[x]=tp;\n\tint sz=G[x].size(),k=0;\n\tfor (int i = 0; i < sz; ++i)\n\t{\n\t\tint y=G[x][i];\n\t\tif(son[y]>son[k] && dep[y]>dep[x]) k=y;\n\t}\n\tif(!k) return;\n\tdfs_rewrite(k,tp);\n\tfor (int i = 0; i < sz; ++i)\n\t{\n\t\tint y=G[x][i];\n\t\tif(y!=k && dep[y]>dep[x])\n\t\t\tdfs_rewrite(y,y);\n\t}\n}\n\ninline int lca(int x,int y)\n{\n\tif(dep[x]<dep[y]) swap(x,y);\n\tint t=dep[x]-dep[y];\n\tfor(int i = 0; i <= 16; i++)\n\t\tif(bin[i]&t) x=fa[x][i];\n\tfor(int i = 16; i >= 0; i--)\n\t\tif(fa[x][i]!=fa[y][i])\n\t\t\tx=fa[x][i],y=fa[y][i];\n\tif(x==y) return x;\n\treturn fa[x][0];\n}\n\ninline void update(int k)\n{s[k]=s[ls[k]]+s[rs[k]]+w[k];}\n\ninline void rturn(int &k)\n{\n\tint t=ls[k]; ls[k]=rs[t]; rs[t]=k;\n\tupdate(k); update(t); k=t;\n}\n\ninline void lturn(int &k)\n{\n\tint t=rs[k]; rs[k]=ls[t]; ls[t]=k;\n\tupdate(k); update(t); k=t;\n}\n\nvoid insert(int &k,int val)\n{\n\tif(!k)\n\t{\n\t\tk=++size; rnd[k]=rand();\n\t\tw[k]=s[k]=1; v[k]=val;\n\t\treturn;\n\t}\n\ts[k]++;\n\tif(val==v[k]) { w[k]++; return;}\n\telse if(val<v[k])\n\t{\n\t\tinsert(ls[k],val);\n\t\tif(rnd[ls[k]]<rnd[k]) rturn(k);\n\t}\n\telse\n\t{\n\t\tinsert(rs[k],val);\n\t\tif(rnd[rs[k]]<rnd[k]) lturn(k);\n\t}\n}\n\nvoid del(int &k,int val)\n{\n\tif(!k) return;\n\tif(val==v[k])\n\t{\n\t\tif(w[k]>1) { w[k]--,s[k]--; return;}\n\t\tif(ls[k]*rs[k]==0) k=ls[k]+rs[k];\n\t\telse if(rnd[ls[k]]<rnd[rs[k]])\n\t\t\trturn(k),del(k,val);\n\t\telse lturn(k),del(k,val);\n\t}\n\telse if(val<v[k])\n\t\tdel(ls[k],val),s[k]--;\n\telse del(rs[k],val),s[k]--;\n}\n\nvoid askrank(int k,int val)\n{\n\tif(!k)return;\n\tif(val==v[k]) { tmp+=s[rs[k]]; return;}\n\telse if(val<v[k])\n\t\ttmp+=s[rs[k]]+w[k],askrank(ls[k],val);\n\telse askrank(rs[k],val);\n}\n\nvoid change(int k,int l,int r,int p,int ql,int qr)\n{\n\tdel(root[k],ql); insert(root[k],qr);\n\tif(l==r) return;\n\tint mid=l+r>>1;\n\tif(p<=mid) change(k<<1,l,mid,p,ql,qr);\n\telse change(k<<1|1,mid+1,r,p,ql,qr);\n}\n\nvoid ask(int k,int l,int r,int ql,int qr,int val)\n{\n\tif(ql==l&&qr==r) {askrank(root[k],val); return;}\n\tint mid=l+r>>1;\n\tif(qr<=mid) ask(k<<1,l,mid,ql,qr,val);\n\telse if(ql>mid) ask(k<<1|1,mid+1,r,ql,qr,val);\n\telse\n\t{\n\t\task(k<<1,l,mid,ql,mid,val);\n\t\task(k<<1|1,mid+1,r,mid+1,qr,val);\n\t}\n}\n\ninline void query_rank(int x,int f,int val)\n{\n\twhile(top[x]!=top[f])\n\t{\n\t\task(1,1,n,dfn[top[x]],dfn[x],val);\n\t\tx=fa[top[x]][0];\n\t}\n\task(1,1,n,dfn[f],dfn[x],val);\n}\n\ninline void solve(int x,int y,int rank)\n{\n\tint t=lca(x,y),ans=-1; tmp=0;\n\tquery_rank(y,t,0); query_rank(x,t,0);\n\tif(tmp-1<rank) {puts(\"invalid request!\"); return;}\n\tint l=1,r=tot;\n\twhile(l<=r)\n\t{\n\t\tint mid=l+r>>1; tmp=0;\n\t\tquery_rank(x,t,mid); query_rank(y,t,mid);\n\t\tif(tree[t]>mid) tmp--;\n\t\tif(tmp<=rank-1) r=mid-1,ans=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",mp[ans]);\n}\n\nint main(int argc, char const *argv[])\n{\n\tn=read(); q=read(); bin[0]=1;\n\tfor(int i = 1; i <= 16; ++i)\n\t\tbin[i]=(bin[i-1]<<1);\n\tfor(int i = 1; i <= n; ++i)\n\t\ttree[i]=read(),mp[++tot]=tree[i];\n\tfor(int i = 1; i < n; ++i)\n\t{\n\t\tint u=read(),v=read();\n\t\taddedge(u,v);\n\t}\n\tdfs_getson(1);\n\tdfs_rewrite(1,1);\n\tfor(int i = 1; i <= q; ++i)\n\t{\n\t\tf[i]=read(),a[i]=read(),b[i]=read();\n\t\tif(!f[i]) mp[++tot]=b[i];\n\t}\n\tsort(mp+1,mp+tot+1);\n\tint top=1;\n\tfor(int i = 2; i <= tot; ++i)\n\t\tif(mp[i]!=mp[i-1])\n\t\t\tmp[++top]=mp[i];\n\ttot=top;\n\tfor(int i = 1; i <= n; ++i)\n\t\ttree[i]=find(tree[i]);\n\tfor(int i = 1; i <= q; ++i)\n\t\tif(!f[i]) b[i]=find(b[i]);\n\tfor(int i = 1; i <= n; ++i)\n\t\tchange(1,1,n,dfn[i],0,tree[i]);\n\tfor(int i = 1; i <= q; ++i)\n\t{\n\t\tif(!f[i])\n\t\t{\n\t\t\tchange(1,1,n,dfn[a[i]],tree[a[i]],b[i]);\n\t\t\ttree[a[i]]=b[i];\n\t\t}\n\t\telse solve(a[i],b[i],f[i]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1574760124,
        "uid": 107735,
        "name": "shiroi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "\u66f4\u597d\uff08zao\uff09\u7684\u9605\u8bfb\u4f53\u9a8c\uff0c\u8bf7\u731b\u6233\uff1a\n[link](https://thomasguo666.github.io/post/solution-P4175/)\n\n\u9996\u5148\uff0c\u770b\u5230\u8fd9\u79cd\u533a\u95f4 $k$ \u5927\u503c\u67e5\u8be2\u7684\u9898\uff0c\u8fd8\u4e0d\u5f3a\u5236\u5728\u7ebf\uff0c\u90a3\u4e00\u822c\u53ef\u4ee5\u6574\u4f53\u4e8c\u5206~~\u4e71\u641e~~\u3002\n\n\u5982\u679c\u4f60\u4e0d\u4f1a\u6574\u4f53\u4e8c\u5206\uff0c\u51fa\u95e8\u53f3\u8f6c Dynamic Rankings\uff08\u5f53\u7136\u4e0b\u9762\u4e5f\u4f1a\u5c31\u8fd9\u9898\u5177\u4f53\u8bf4\u660e\u4e00\u4e0b\uff09\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6a21\u62df\u4e00\u904d\u6240\u6709\u7684\u4fee\u6539\uff0c\u540c\u65f6\u628a\u6bcf\u4e2a\u4fee\u6539\u64cd\u4f5c\u6539\u6210\u5220\u53bb\u4e00\u4e2a\u6570\u518d\u52a0\u4e0a\u4e00\u4e2a\u6570\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u9898\u662f\u6811\u4e0a\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8981\u4e2a\u6811\u94fe\u5256\u5206\u3002\n\n\u56e0\u4e3a\u6211\u5199\u4e60\u60ef\u4e86 $k$ \u5c0f\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528 $1e8$ \u51cf\u53bb\u6bcf\u4e2a\u6743\u503c\u3002\n\n\u7136\u540e\u6211\u4eec\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5c0f\u4e8e\u7b49\u4e8e $mid$ \u7684\u6570\u6709\u591a\u5c11\u4e2a\u3002\u5982\u679c\u4e00\u4e2a\u4fee\u6539\u64cd\u4f5c\u4fee\u6539\u6210\u7684\u6570\u4e0d\u8d85\u8fc7 $mid$ \uff0c\u90a3\u4e48\u5c31\u6267\u884c\u8fd9\u6b21\u64cd\u4f5c\uff0c\u5e76\u4e14\u628a\u5b83\u52a0\u5230\u64cd\u4f5c\u5e8f\u5217 $q_1$ \u91cc\u53bb\uff0c\u5426\u5219\u52a0\u5230 $q_2$ \u91cc\u53bb\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\u64cd\u4f5c ${k,l,r}$ \uff0c\u5982\u679c $[l,r]$ \u4e2d\u4e0d\u8d85\u8fc7 $mid$ \u7684\u6570\u5927\u4e8e\u7b49\u4e8e $k$ \u4e2a\uff0c\u5c31\u628a\u5b83\u653e\u5230 $q_1$ \u91cc\u53bb\uff0c\u5426\u5219\u628a $k$ \u51cf\u53bb\u4e0d\u8d85\u8fc7 $mid$ \u7684\u6570\u7684\u4e2a\u6570\uff0c\u518d\u52a0\u5230 $q_2$ \u91cc\u53bb\u3002\u8fd9\u6837 $q_1$ \u4e0e $q_2$ \u5b9e\u9645\u4e0a\u53d8\u4e3a\u4e86\u4e24\u4e2a\u89c4\u6a21\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u5904\u7406\u6389\u5c31\u597d\u4e86\uff08\u5f53\u7136\u8fdb\u5165\u4e0b\u4e00\u5c42\u9012\u5f52\u4e4b\u524d\u8981\u628a\u8fd9\u4e00\u5c42\u9012\u5f52\u4e2d\u505a\u7684\u64cd\u4f5c\u64a4\u9500\u6389\uff09\n\n\u4ee3\u7801\uff1a\uff08\u590d\u6742\u5ea6 $O(nlog^3n)$ \uff09\n\n```cpp\n#include <bits/stdc++.h>\n#define debug printf(\"Running %s on line %d...\\n\",__FUNCTION__,__LINE__)\n#define in inline\n#define re register\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nin int read()\n{\n    int ans=0,f=1;char c=getchar();\n    for (;!isdigit(c);c=getchar()) if (c=='-') f=-1;\n    for (;isdigit(c);c=getchar()) ans=(ans<<3)+(ans<<1)+(c^48);\n    return ans*f;\n}\nint a[300005];\nint n,m;\nint head[100005],tail[200005],nex[200005];\nin void addedge(int u,int v,int k)\n{\n    nex[k]=head[u];\n    head[u]=k;\n    tail[k]=v;\n}\nint fa[100005],sz[100005],son[100005],top[100005],l[100005],dep[100005];\nvoid dfs1(int u)\n{\n    sz[u]=1;\n    for (int e=head[u];e;e=nex[e])\n    {\n        int v=tail[e];\n        if (v==fa[u]) continue;\n        fa[v]=u,dep[v]=dep[u]+1;\n        dfs1(v),sz[u]+=sz[v];\n        if (sz[v]>sz[son[u]]) son[u]=v;\n    }\n}\nint tot;\nvoid dfs2(int u,int topf)\n{\n    top[u]=topf,l[u]=++tot;\n    if (!son[u]) return;\n    dfs2(son[u],topf);\n    for (int e=head[u];e;e=nex[e])\n    {\n        int v=tail[e];\n        if (v==fa[u]||v==son[u]) continue;\n        dfs2(v,v);\n    }\n}\nstruct data\n{\n    int l,r,v,p,id;\n    data () {}\n    data (int l,int r,int v,int p,int id):l(l),r(r),v(v),p(p),id(id) {}\n} q[400005],q1[400005],q2[400005];\nint ans[100005];\nint cnt1,cnt2;\nint t[400005];\nvoid add(int x,int v)\n{\n    for (;x<=n;x+=x&(-x)) t[x]+=v;\n}\nint sum(int x)\n{\n    int s=0;\n    for (;x;x-=x&(-x)) s+=t[x];\n    return s;\n}\nint query(int x,int y)\n{\n    int ans=0;\n    while (top[x]!=top[y])\n    {\n        if (dep[top[x]]<dep[top[y]]) swap(x,y);\n        ans+=sum(l[x])-sum(l[top[x]]-1);\n        x=fa[top[x]];\n    }\n    if (dep[x]>dep[y]) swap(x,y);\n    ans+=sum(l[y])-sum(l[x]-1);\n    return ans;\n}\nvoid solve(int tl,int tr,int ql,int qr)\n{\n    if (ql>qr) return;\n    if (tl==tr)\n    {\n        for (int i=ql;i<=qr;i++) ans[q[i].id]=tl;\n        return ;\n    }\n    int mid=tl+tr>>1,j=0,k=0;\n    for (int i=ql;i<=qr;i++)\n    {\n        if (!q[i].id)\n        {\n            if (q[i].v<=mid)\n            {\n                add(l[q[i].l],q[i].p);\n                q1[++j]=q[i];\n            }\n            else q2[++k]=q[i];\n        }\n        else\n        {\n            int s=query(q[i].l,q[i].r);\n            if (s<q[i].v) q[i].v-=s,q2[++k]=q[i];\n            else q1[++j]=q[i];\n        }\n    }\n    for (int i=1;i<=j;i++) if (!q1[i].id) add(l[q1[i].l],-q1[i].p);\n    for (int i=1;i<=j;i++) q[ql+i-1]=q1[i];\n    for (int i=1;i<=k;i++) q[ql+i+j-1]=q2[i];\n    solve(tl,mid,ql,ql+j-1),solve(mid+1,tr,ql+j,qr);\n}\nint main()\n{\n    n=read(),m=read();\n    for (int i=1;i<=n;i++) a[i]=read();\n    for (int i=1;i<n;i++)\n    {\n        int u=read(),v=read();\n        addedge(u,v,i<<1);\n        addedge(v,u,i<<1|1);\n    }\n    dfs1(1);\n    dfs2(1,0);\n    for (int i=1;i<=n;i++) q[++cnt1]=data(i,0,1e8-a[i],1,0);\n    for (int i=1;i<=m;i++)\n    {\n        int k=read(),l=read(),r=read();\n        if (k)\n        {\n            q[++cnt1]=data(l,r,k,0,++cnt2);\n        }\n        else\n        {\n            q[++cnt1]=data(l,0,1e8-a[l],-1,0);\n            q[++cnt1]=data(l,0,1e8-(a[l]=r),1,0);\n        }\n    }\n    solve(0,1e8,1,cnt1);\n    for (int i=1;i<=cnt2;i++) ((1e8-ans[i])?cout<<int(1e8-ans[i])<<endl:cout<<\"invalid request!\"<<endl);\n    return 0;\n}\n\n```\n\n\n\n",
        "postTime": 1565515925,
        "uid": 107935,
        "name": "Thomasguo666",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    },
    {
        "content": "1. \u6807\u7b7e: \u6811\u5957\u6811, \u6811\u4e0a\u5dee\u5206.\n\n2. \u8fd9\u9053\u9898\u5207\u5165\u70b9\u5728\u4e8e\u4e00\u4e2a\u6811\u4e0a\u5dee\u5206, \u8003\u8651\u4e00\u4e2a\u7b80\u5355\u4e9b\u7684\u95ee\u9898:\u5728\u70b9\u6570\u4e3a$n$\u6811\u4e0a\u652f\u6301\u67e5\u8be2\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\u70b9\u7684\u6743\u503c\u548c.\u4e0d\u9700\u8981\u652f\u6301\u4fee\u6539\n\t\n    \u8003\u8651\u7528dfs\u6c42\u70b9\u5230\u6839\u8def\u5f84\u957f\u5ea6\u7684\u8fc7\u7a0b:\u4ece\u6839\u5f00\u59cbdfs, \u5230\u8fbe\u67d0\u4e2a\u70b9\u65f6\u7b54\u6848\u52a0\u4e0a\u5f53\u524d\u70b9\u7684\u6743\u503c$v$. \u5982\u679c\u5f53\u524d\u70b9\u4e3a\u8be2\u95ee\u70b9, \u8fd4\u56de\u6848; \u5426\u5219\u5728\u8be5\u70b9\u7684\u5b50\u6811\u5185\u7ee7\u7eed\u641c\u7d22, \u5982\u679c\u8be2\u95ee\u70b9\u4e0d\u5728\u5b50\u6811\u5185, \u7b54\u6848\u51cf\u53bb$v$\u5e76\u8fd4\u56de.\n\n\t\u53d1\u73b0\u7b54\u6848\u5c31\u662f\u4e00\u4e2a\u8fdb\u52a0-\u8fd4\u51cf\u7684\u8fc7\u7a0b, \u5982\u679c\u6211\u4eec\u628a\u6240\u6709\u70b9\u62c6$pre$\u70b9\u548c$pst$\u70b9, \u5206\u522b\u8868\u793a\u8fdb\u5165\u548c\u8fd4\u56de\u7684\u72b6\u6001, \u6743\u503c\u5206\u522b$v,-v$, \u6309\u7167\u8fdb\u5165/\u8fd4\u56de\u7684\u53d1\u751f\u987a\u5e8f\u6392\u5e8f(\u5b9e\u9645\u4e0a\u5c31\u662f\u6811\u7684**\u6b27\u62c9\u5e8f**), \u7ef4\u62a4\u524d\u7f00\u548c, \u6613\u5f97\u4e2a\u70b9\u5230\u6839\u7684\u6743\u503c\u548c.\n\n3. \u9700\u8981\u652f\u6301\u4fee\u6539\u7684\u8bdd, \u5c31\u7528\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e0b\u5c31\u4e86. \u82e5\u8981\u652f\u6301\u4efb\u610f\u8def\u5f84\u6743\u503c\u548c\u4e5f\u53ea\u9700\u8981\u6c42\u4e00\u4e0b\u8def\u5f84\u4e24\u7aef\u7684LCA,\u7b80\u5355\u641e\u4e00\u4e0b\u5c31\u597d.\n4. \u8003\u8651\u5982\u4f55\u7ef4\u62a4\u8def\u5f84\u7b2c$K$\u5927.\u4e0d\u4fee\u6539.\n\n\t\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u7ef4\u62a4\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811, \u56e0\u4e3a$pre$\u70b9\u8868\u793a\u5f53\u524d\u70b9\u6743\u51fa\u6b21\u6570(\u5373\u6743\u503c)$+1$, $pst$\u70b9\u8868\u793a$-1$, \u6240\u4ee5\u5bf9\u5e94\u503c\u7684\u6743\u503c\u5206\u4e3a$+1$\u548c$-1$.\u90a3\u4e48\u540c\u6837\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u524d\u7f00(\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u9897\u4e3b\u6811)\u5c31\u53ef\u4ee5\u505a\u4e86.\n    \n\t\u60f3\u652f\u6301\u4fee\u6539\u7684\u8bdd\u540c\u6837\u7528\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u5957\u4e00\u4e0b\u5c31\u597d\u4e86.(\u6e29\u99a8\u63d0\u793a, \u5916\u5c42\u7528\u7ebf\u6bb5\u6811\u4f1aMLE).\n5. \u590d\u6742\u5ea6$\\mathcal O(nlog^2n)$.\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <map>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9') {\n        if (c == '-') f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x * f;\n}\n\nint head[200005], nxt[400005], to[400005], cnt;\nvoid add(int f, int t) {\n    nxt[++cnt] = head[f];\n    head[f] = cnt;\n    to[cnt] = t;\n    return ;\n}\n\nint fa[200005][20], dep[200005], pre[200005], pst[200005], dfn;\nvoid dfs(int u) {\n    pre[u] = ++dfn;\n    for (int i = head[u]; i; i = nxt[i]) {\n        int v = to[i];\n        if (v == fa[u][0]) continue;\n        fa[v][0] = u;\n        dep[v] = dep[u] + 1;\n        dfs(v);\n    }\n    pst[u] = ++dfn;\n    return ;\n}\n\nmap<int, int> mp;\nint a[200005], st[400005], stcnt;\n\nint root[400005], idcnt;\nint ls[15000007], rs[15000007], tval[15000007];\nint v[4][102], cv[4];\n\nstruct Pseg {\n    int isrt(int l, int r, int k, int pos, int val) {\n        if (!k) k = ++idcnt;\n        tval[k] += val;\n        if (l == r) return k;\n        int mid = l + r >> 1;\n        if (pos <= mid) ls[k] = isrt(l, mid, ls[k], pos, val);\n        else rs[k] = isrt(mid + 1, r, rs[k], pos, val);\n        return k;\n    }\n} t[400005];\n\nvoid isrt(int k, int pos, int val) {\n    for (; k <= dfn; k += (-k) & k) root[k] = t[k].isrt(1, stcnt, root[k], pos, val);\n    return ;\n}\n\nint lca(int u, int v) {\n    if (dep[u] < dep[v]) swap(u, v);\n    for (int i = 18; i >= 0; --i) if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];\n    if (u == v) return u;\n    for (int i = 18; i >= 0; --i) if (fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];\n    return fa[u][0];\n}\n\nstruct P {\n    int k, a, b;\n} p[200005];\n\nint gt(int i) {\n    return i < 2 ? 1 : -1;\n}\n\nint main() {\n    int n = read(), Q = read();\n    for (int i = 1; i <= n; ++i) {\n        a[i] = read();\n        if (!mp[a[i]]) st[++stcnt] = a[i], mp[a[i]] = 1;\n    }\n    for (int i = 1; i < n; ++i) {\n        int u = read(), v = read();\n        add(u, v);\n        add(v, u);\n    }\n\n    for (int i = 1; i <= Q; ++i) {\n        p[i].k = read(), p[i].a = read(), p[i].b = read();\n        if (!p[i].k && !mp[p[i].b]) st[++stcnt] = p[i].b, mp[p[i].b] = 1;\n    }\n    sort(st + 1, st + 1 + stcnt);\n    for (int i = 1; i <= stcnt; ++i) mp[st[i]] = i;\n\n    dep[1] = 1;\n    dfs(1);\n    for (int i = 1; i <= 18; ++i)\n        for (int j = 1; j <= n; ++j)\n            fa[j][i] = fa[fa[j][i - 1]][i - 1];\n\n    for (int i = 1; i <= n; ++i) {\n        int tmp = mp[a[i]];\n        isrt(pre[i], tmp, 1);\n        isrt(pst[i], tmp, -1);\n    }\n\n    for (int id = 1; id <= Q; ++id) {\n        int u[4] = {p[id].a, p[id].b};\n        int k = p[id].k;\n        if (!k) {\n            int v1 = mp[a[u[0]]], v2 = mp[u[1]];\n            isrt(pre[u[0]], v1, -1);\n            isrt(pre[u[0]], v2, 1);\n            isrt(pst[u[0]], v1, 1);\n            isrt(pst[u[0]], v2, -1);\n            a[u[0]] = u[1];\n            continue;\n        }\n        u[2] = lca(u[0], u[1]);\n        u[3] = fa[u[2]][0];\n        k--;\n        for (int i = 0; i < 4; ++i) {\n            cv[i] = 0;\n            for (int j = pre[u[i]]; j; j -= (-j) & j) v[i][++cv[i]] = root[j];\n        }\n        int tmp = 0;\n        for (int i = 0; i < 4; ++i) {\n            for (int j = 1; j <= cv[i]; ++j) tmp += tval[v[i][j]] * gt(i);\n        }\n        if (tmp <= k) {\n            puts(\"invalid request!\");\n            continue;\n        }\n\n        int l = 1, r = stcnt;\n        while (l != r) {\n            tmp = 0;\n            int mid = l + r >> 1;\n            for (int i = 0; i < 4; ++i) for (int j = 1; j <= cv[i]; ++j) tmp += tval[rs[v[i][j]]] * gt(i);\n\n            if (tmp > k) {\n                l = mid + 1;\n                for (int i = 0; i < 4; ++i) for (int j = 1; j <= cv[i]; ++j) v[i][j] = rs[v[i][j]];\n            } else {\n                r = mid, k -= tmp;\n                for (int i = 0; i < 4; ++i) for (int j = 1; j <= cv[i]; ++j) v[i][j] = ls[v[i][j]];\n            }\n        }\n        printf(\"%d\\n\", st[l]);\n    }\n    return 0;\n}\n```\n",
        "postTime": 1550634696,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4175 \u3010[CTSC2008]\u7f51\u7edc\u7ba1\u7406\u3011"
    }
]