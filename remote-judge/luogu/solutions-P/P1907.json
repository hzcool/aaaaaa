[
    {
        "content": "- \u9898\u76ee\u94fe\u63a5\uff1a[P1907 \u8bbe\u8ba1\u9053\u8def](https://www.luogu.com.cn/problem/P1907)\n\n\n\u8fd9\u9898\u5f88\u660e\u663e\u662f\u4e00\u4e2adijkstra\u7684\u57fa\u7840\u7ec3\u624b\u9898\uff0c\u4e00\u770b\u6570\u636e\u8303\u56f4\u5c31\u77e5\u9053\uff0c\u8fd9\u9898\u8fde\u5806\u4f18\u5316\u90fd\u4e0d\u7528\u3002\n\n\n\u6211\u4eec\u628a $0$ \u53f7\u70b9\u4f5c\u4e3a\u7801\u5934\uff0c\u628a $n+1$ \u53f7\u70b9\u8bbe\u4e3a\u6700\u540e\u8981\u5230\u8fbe\u7684\u5730\u65b9\uff08\u5bb6\uff09\uff0c\u6240\u4ee5\u8fd9\u9898\u6700\u7ec8\u6c42\u7684\u5c31\u662f $0$ \u53f7\u70b9\u5230 $n+1$ \u53f7\u70b9\u7684\u6700\u77ed\u8def\u3002\n\n\u90a3\u4e48\u600e\u4e48\u5efa\u56fe\u5462\uff1f\n\n\u9996\u5148\uff0c\u5199\u4e00\u4e2a\u51fd\u6570`dis`\u6765\u6c42\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\n\u8fd9\u6837\u5199\uff1a\n\n`double dis(double x1,double y1,double x2,double y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}`\n\n\u5efa\u56fe\u5c31\u662f\u5148\u5efa`Rome Road`\uff0c\u4e4b\u540e\u53cc\u91cd\u5faa\u73af\u5efa`Dirt Road`\u5373\u53ef\uff0c\u6ce8\u610f**\u4e0d\u8981\u5efa\u91cd\u8fb9\u4e86**\u3002\n\n**\u6ce8\u610f\u5efa\u8fb9\u7684\u957f\u5ea6\u662f\u8ddd\u79bb\u4e58\u4ee5\u4e0d\u6ee1\u5ea6\uff01**\n\n\u5efa`Dirt Road`\u7684\u65f6\u5019\u53cc\u91cd\u5faa\u73af\u5efa\u8fb9\u5373\u53ef\uff0c\u7b2c\u4e00\u573a\u5faa\u73af $i$ \u4ece $0 \\rightarrow n+1$ \uff0c\u7b2c\u4e8c\u5c42\u5faa\u73af $j$ \u4ece $0 \\rightarrow i-1$ \uff0c\u4e4b\u540e\u8fb9\u6743\u5c31\u5efa\u6210\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e58\u4ee5\u4e0d\u6ee1\u5ea6\u5373\u53ef\u3002\n\n\u4e4b\u540e\u8dd1\u4e00\u904d`dijkstra`\u5c31\u884c\u4e86\uff0c\u4e0d\u4f1a`dijkstra`\u7684\u770b[\u8fd9\u91cc](https://blog.csdn.net/user_qym/article/details/104086809)\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u4e0a\u4ee3\u7801\u5427\uff0c\u4e0d\u61c2\u7684\u770b\u6ce8\u91ca\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\nconst int N=1010,M=N*2;\nint n,a,b;\ndb g[N][N],x[N],y[N],dist[N],A,B;\nbool st[N],vis[N][N];\ndb dis(db x1,db y1,db x2,db y2){return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));}//\u8ddd\u79bb\u51fd\u6570\nvoid dijkstra()//\u8fd9\u4e2a\u7684\u8be6\u7ec6\u89e3\u91ca\u770b\u6211\u4e0a\u9762\u7684\u90a3\u4e2a\u94fe\u63a5\n{\n    dist[0]=0;\n    for(int i=1;i<=n+1;i++) dist[i]=0x3f3f3f3f;\n    for(int i=0;i<=n+1;i++)\n    {\n        int t=-1;\n        for(int j=0;j<=n+1;j++)\n            if(!st[j] && (t==-1 || dist[t]>dist[j]))\n                t=j;\n        for(int j=0;j<=n+1;j++)\n            dist[j]=min(dist[j],dist[t]+g[t][j]);\n        st[t]=true;\n    }\n    cout<<fixed<<setprecision(4)<<dist[n+1];\n    //\u4fdd\u7559\u56db\u4f4d\u5c0f\u6570\n}\n\nint main()\n{\n    cin>>A>>B;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n        cin>>x[i]>>y[i];\n    while(cin>>a>>b,a!=0,b!=0)//\u8f93\u5165\u5230(0,0)\u4e3a\u6b62\n    {\n        vis[a][b]=vis[b][a]=true;//\u6807\u8bb0\u6709\u6ca1\u6709\n        g[a][b]=g[b][a]=B*dis(x[a],y[a],x[b],y[b]);//\u5efa\u8fb9\n    }\n    int sx,sy,fx,fy;\n    cin>>sx>>sy>>fx>>fy;//\u8f93\u5165\u8d77\u70b9\u7ec8\u70b9\n    x[0]=sx,y[0]=sy,x[n+1]=fx,y[n+1]=fy;\n    //\u8d4b\u503c\u52300\u53f7\u70b9\u548cn+1\u53f7\u70b9\n    for(int i=0;i<=n+1;i++)\n        for(int j=0;j<=i;j++)\n            if(!vis[i][j])\n                g[i][j]=g[j][i]=A*dis(x[i],y[i],x[j],y[j]);//\u5efa\u8fb9\n    dijkstra();\n    return 0;\n}\n```\n\n\u5982\u679c\u8fd8\u6709\u4e0d\u61c2\u7684\u6216\u8005\u6587\u7ae0\u9519\u8bef\u6b22\u8fce\u518d\u4e0b\u9762\u6216\u8005\u79c1\u4fe1\u63d0\u51fa\uff01\n",
        "postTime": 1587713491,
        "uid": 270120,
        "name": "xhQYm",
        "ccfLevel": 0,
        "title": "Solution P1907"
    },
    {
        "content": "### Solve\n\nDijkstra\u7b97\u6cd5\u5bfb\u627e\u6700\u77ed\u8def\u5f84\n\n1.\u8def\u53e3\uff0c\u7801\u5934\uff0c\u5bb6\u90fd\u4f5c\u4e3a\u8282\u70b9\u3002\u8282\u70b90\u4e3a\u7801\u5934\uff0c\u8282\u70b9n+1\u4e3a\u5bb6\uff08\u5efa\u56fe\u5173\u952e\uff09\u3002\n\n2.\u8dd1\u4e00\u904dDijkstra\u3002\n\n### Tips\n\n1.\u672c\u9898\u6570\u636e\u8303\u56f4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\n\n2.\u6700\u5927\u8ddd\u79bb\u6700\u597d\u5f00\u5927\u4e9b\uff0c\u5f000x3fff\u5c31WA\u4e86\u4e24\u4e2a\u70b9\uff0c\u5f001e6\u5c31A\u4e86\n\n### Code\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cmath>\nusing namespace std;  //\u6807\u51c6\u5f00\u5934\nconst int N=5000;\ndouble m[N][N];  //\u90bb\u63a5\u77e9\u9635\u5b58\u8fb9\nint n;  //\u8def\u53e3\u6570\ndouble e,r;  //e\u2014\u2014Dirt Road\uff0cr\u2014\u2014Rome Road\ndouble x[N],y[N];  //\u8282\u70b9\u4fe1\u606f\ndouble d[N];  //\u79bb\u7801\u5934\u7684\u6700\u77ed\u8ddd\u79bb\nbool vis[N][N];  //vis[i][j]==true\u2014\u2014i\u5230j\u4e4b\u95f4\u6709Rome Road\uff0cfalse\u2014\u2014\u6ca1\u6709\nbool f[N];  //Dijkstra\u904d\u5386\u65f6\u662f\u5426\u8bbf\u95ee\u8fc7\uff0ctrue\u2014\u2014\u662f\uff0cfalse\u2014\u2014\u5426\nint dx,dy;  //dx\u5230dy\u6709Rome Road\nint main()\n{\n\tcin>>e>>r>>n;\n\tfor(int i=1;i<=n;i++) cin>>x[i]>>y[i];\n\twhile(cin>>dx>>dy&&dx!=0&&dy!=0){  //\u5efa\u7acbRome Road\n\t\tvis[dx][dy]=vis[dy][dx]=true;\n\t\tm[dx][dy]=m[dy][dx]=r*sqrt((x[dx]-x[dy])*(x[dx]-x[dy])+(y[dx]-y[dy])*(y[dx]-y[dy]));\n\t}\n\tcin>>x[0]>>y[0]>>x[n+1]>>y[n+1];\n\tfor(int i=0;i<=n+1;i++){  //\u5efa\u7acbDirt Road\n\t\tfor(int j=0;j<=i;j++){ \n\t\t\tif(!vis[i][j]) m[i][j]=m[j][i]=e*sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));\n\t\t}\n\t}\n\td[0]=0;\n\tfor(int i=1;i<=n+1;i++) d[i]=1e6;\n\tfor(int i=0;i<=n+1;i++){  //\u6838\u5fc3Dijkstra\n\t\tint k;\n\t\tdouble maxn=1e6;\n\t\tfor(int j=0;j<=n+1;j++){\n\t\t\tif(!f[j]&&d[j]<maxn){\n\t\t\t\tmaxn=d[j];\n\t\t\t\tk=j;\n\t\t\t}\n\t\t}\n\t\tif(maxn==1e6) break;\n\t\tf[k]=true;\n\t\tfor(int j=0;j<=n+1;j++){\n\t\t\tif(d[k]+m[k][j]<d[j]) d[j]=d[k]+m[k][j];\n\t\t}\n\t}\n\tprintf(\"%.4lf\",d[n+1]);  //\u5b8c\u7f8e\u8f93\u51fa\n\treturn 0;\n}\n```",
        "postTime": 1561022352,
        "uid": 70151,
        "name": "\u52a0\u52d2\u6bd4\u00b7\u53f2\u52aa\u6bd4",
        "ccfLevel": 0,
        "title": "P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    },
    {
        "content": "# P1907 \u8bbe\u8ba1\u9053\u8def\u9898\u89e3\n\n## \u524d\u8a00\uff1a\n\n\u672c\u9898\u89e3\u5f00\u4e86\u9632\u6284\u88ad(freopen)\uff0c\u6587\u4ef6\u540d\u662f\u6b4c\u540d\uff0c\u6709\u5174\u8da3\u7684\u542c\u542c\u3002\n\n## \u9898\u610f\uff1a\n\n\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u9053\u8def\uff0c\u4e0d\u540c\u9053\u8def\u7684\u82b1\u8d39\u4e0d\u540c\uff0c\u544a\u8bc9\u4f60\u6bcf\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u4ee5\u53ca\u544a\u8bc9\u4f60\u54ea\u6761\u8def\u662f\u54ea\u4e2a\u82b1\u8d39\uff0c\u6c42\u51fa\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002\n\n## \u601d\u8def\uff1a\n\n\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\uff0c\u989d\uff0c\u88f8\u7684dijkstra\u3002\n\n\u8c8c\u4f3c\u90bb\u63a5\u77e9\u9635\u90fd\u53ef\u4ee5\u3002\n\n\u4e3b\u8981\u662f\u5361\u7cbe\u5ea6\uff0c\u4f46\u662f\u4e0d\u8981\u614c\uff0c\u5168\u90e8\u8bbe\u6210double\u5373\u53ef\u3002\n\n\u6211\u4eec\u770b\u770b\u8f93\u5165\u5427\uff08\u4e3b\u8981\u662f\u8f93\u5165\u628a\u672c\u83dc\u9e21\u5751\u4e86\u4e00\u624b\uff09\u3002\n\n\u5148\u8f93\u5165\u4e24\u79cd\u4e0d\u540c\u9053\u8def\u7684\u52a0\u6210\uff0c\u518d\u8f93\u5165\u70b9\u7684\u5750\u6807\u3002\n\n\u63a5\u4e0b\u6765\u5904\u7406\u82b1\u8d39\uff0c\u82b1\u8d39\u597d\u5904\u7406\uff0c\u7528\u8ddd\u79bb\u516c\u5f0f\u7b97\u4e00\u4e0b\u8ddd\u79bb\u4e58\u4e00\u4e0b\u52a0\u6210\u5373\u53ef\u3002\n\n\u4f46\u6211\u4eec\u8981\u7528\u4e00\u4e2a $f[x][y]$ \u7684\u6570\u7ec4\u6807\u8bb0\uff0c\u4fbf\u4e8e\u4e0b\u6b21\u5982\u679c\u662f\u4e0d\u540c\u9053\u8def\u7684\u65f6\u5019\u7684\u82b1\u8d39\u3002\n\n\u8fd9\u6761\u9053\u8def\u7684\u82b1\u8d39\u641e\u5b9a\uff0c\u6211\u4eec\u8f93\u5165\u8d77\u70b9\u7ec8\u70b9\uff0c\u5e76\u5b58\u5165 0 \u548c n + 1 \u7684\u4f4d\u7f6e\u4e0a\u3002\n\n\u7136\u540e\u904d\u5386\u770b\u770bf\u6570\u7ec4\u6ca1\u904d\u5386\u5230\u7684\uff0c\u7b97\u51fa\u82b1\u8d39\u3002\n\ndij\u8dd1\u4e00\u904d\uff0c\u8f93\u51fa\uff0c\u7ed3\u675f\u3002\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <cmath>\n#define inf 0x3f3f3f3f\n\nconst int N = 1e3 + 7;\n\nusing namespace std;\n\nint n;\n\ndouble D, R;\n\ndouble x[N], y[N];\n\ndouble sx, sy, fx, fy;\n\ndouble g[N][N], dis[N];\n\nbool flag[N], f[N][N];\n\nint xx, yy;\n\ninline double distance(double x1, double x2, double y1, double y2) {\n\treturn sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\ninline double mina(double a, double b) {\n\tif (a < b)\n\t\treturn a;\n\treturn b;\n}\n\ninline void dijkstra() {\n\tdis[0] = 0;\n\tfor (int i = 1; i <= n + 1; i ++) dis[i] = inf; \n\t\n\tfor (int i = 0; i <= n + 1; i ++) {\n\t\tint k = -1;\n\t\tdouble tmp = inf;\n\t\t\n\t\tfor (int j = 0; j <= n + 1; j ++) {\n\t\t\tif (! flag[j]) {\n\t\t\t\tif (tmp > dis[j]) {\n\t\t\t\t\ttmp = dis[j];\n\t\t\t\t\tk = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tflag[k] = 1;\n\t\t\n\t\tfor (int j = 0; j <= n + 1; j ++)\n\t\t\tdis[j] = mina(dis[j], dis[k] + g[k][j]);\n\t}\n}\n\nint main() {\n\tfreopen(\"starsky.in\", \"r\", stdin);\n\tfreopen(\"starsky.out\", \"w\", stdout);\n\t\n\tscanf(\"%lf %lf\", &D, &R);\n\tscanf(\"%d\", &n);\n\t\n\tfor (int i = 1; i <= n; i ++)\n\t\tscanf(\"%lf %lf\", &x[i], &y[i]);\n\t\n\twhile (1) {\n\t\tscanf(\"%d %d\", &xx, &yy);\n\t\t\n\t\tif (! xx && ! yy) break;\n\t\t\n\t\tf[xx][yy] = f[yy][xx] = 1;\n\t\tg[xx][yy] = g[yy][xx] = R * distance(x[xx], x[yy], y[xx], y[yy]);\n\t}\n\t\n\tscanf(\"%lf %lf\", &x[0], &y[0]);\n\tscanf(\"%lf %lf\", &x[n + 1], &y[n + 1]);\n\t\n\tfor (int i = 0; i <= n + 1; i ++) {\n\t\tfor (int j = 0; j <= i; j ++) {\n\t\t\tif (! f[i][j])\n\t\t\t\tg[i][j] = g[j][i] = D * distance(x[i], x[j], y[i], y[j]);\n\t\t}\n\t}\n\t\n\tdijkstra();\n\t\n\tprintf(\"%0.4lf\\n\", dis[n + 1]);\n\t\n\tfclose(stdin);\n\tfclose(stdout);\n\t\n\treturn 0;\n}\n```\n\n$Atlantic.$",
        "postTime": 1618627313,
        "uid": 328170,
        "name": "Kalium",
        "ccfLevel": 0,
        "title": "P1907 \u8bbe\u8ba1\u9053\u8def\u9898\u89e3"
    },
    {
        "content": "# \u9898\u610f\n\u8bbe $dis(p1, p2)$ \u4e3a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u70b9 $p1$ \u5230\u70b9 $p2$ \u7684\u8ddd\u79bb\u3002\n- $n+2$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\uff1b\n\n- \u5f53\u4e24\u4e2a\u70b9 $p1, p2$ \u5728\u8f93\u5165\u4e2d\u63d0\u5230\uff08\u5373\u8f93\u5165\u6574\u6570\u6570\u5bf9 $(i, j)$\uff09\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e24\u6761\u70b9\u7684\u8fb9\u6743\u4e3a $rome\\_road\\times dis(p1, p2)$\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u63d0\u5230\uff0c\u4e24\u4e2a\u70b9 $p1, p2$ \u7684\u8ddd\u79bb\u4e3a $dis(p1, p2)\\times dirt\\_road$\uff1b\n\n- \u6c42\u70b9 $S$ \u5230\u70b9 $E$ \u7684\u6700\u77ed\u8def\u5f84\u3002\n\n# \u601d\u8def\n\u7531\u9898\u610f\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u6700\u77ed\u8def\u95ee\u9898\u3002\u7531\u4e8e $n\\leq 1000$\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528**\u90bb\u63a5\u77e9\u9635**\u6765\u5b58\u56fe\uff0c\u53c8\u7531\u4e8e**\u4e0d\u4f1a\u62e5\u6709\u8d1f\u6743\u8fb9**\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528**\u672a\u7ecf\u4f18\u5316**\u7684 $Dijkstra$ \u6765\u89e3\u8fd9\u9053\u9898\u3002\u800c\u672c\u9898\u552f\u4e00\u7684\u96be\u70b9\u5c31\u662f\u5b58\u8fb9\uff0c\u5b58\u8fb9\u53ef\u4ee5\u8003\u8651\u53cc\u91cd\u5faa\u73af\u6765\u679a\u4e3e\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u6765\u89e3\u3002\n\n# AC Code\n```c++\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <vector>\n\nusing namespace std;\n\n#define MAXN 1010\n#define INF 1919810114.514\n#define abs(x) (x < 0 ? -x : x)\n#define power(x) ((x) * (x))\n\nstruct point {\n    double x, y;\n};\n\nint n, m, i, tmpx, tmpy;\ndouble mud, stone, sx, sy, ex, ey; \ndouble g[MAXN][MAXN], dis[MAXN];\nbool found[MAXN];\npoint arr[MAXN];\n\ndouble Distance (point x, point y) {\n    return abs (sqrt (abs (power ((x.x - y.x))) + abs (power ((x.y - y.y)))));\n} // \u8ddd\u79bb\u516c\u5f0f\u3002\n\nvoid dij (int st) {\n    for (int i = 0; i <= n + 1; i++) {\n        dis[i] = INF;\n    }\n    memset (found, false, sizeof (found));\n    dis[st] = 0.0;\n\n    while (true) {\n        int u = -1;\n        for (int i = 0; i <= n + 1; i++) {\n            if (!found[i] && (u == -1 || dis[i] < dis[u])) {\n                u = i;\n            }\n        }\n        \n        if (u == -1) { break ; }\n        found[u] = true;\n\n        for (int i = 0; i <= n + 1; i++) {\n            dis[i] = min (dis[i], dis[u] + g[u][i]);\n        }\n    }\n} // \u6a21\u677f\u3002\n\nint main (void) {\n\n    for (int i = 0; i < MAXN; i++) {\n        for (int j = 0; j < MAXN; j++) {\n            g[i][j] = INF;\n        }\n    } // \u521d\u59cb\u5316\u3002\n\n    scanf (\"%lf %lf\\n%d\", &mud, &stone, &n);\n    for (int i = 1; i <= n; i++) {\n        double u, v;\n        scanf (\"%lf %lf\", &u, &v);\n        arr[i] = {u, v};\n    }\n    while (~scanf (\"%d %d\", &tmpx, &tmpy) && tmpx && tmpy) {\n        double tmp = Distance (arr[tmpx], arr[tmpy]) * stone;\n        g[tmpx][tmpy] = g[tmpy][tmpx] = tmp;\n    }\n    scanf (\"%lf %lf\\n%lf %lf\", &sx, &sy, &ex, &ey);\n    \n    for (int i = 1; i <= n; i++) {\n        g[0][i] = g[i][0] = Distance ({sx, sy}, arr[i]) * mud;\n        g[i][n + 1] = g[n + 1][i] = Distance ({ex, ey}, arr[i]) * mud;\n        for (int j = 1; j < i; j++) {\n            g[i][j] = g[j][i] = min (g[i][j], Distance (arr[i], arr[j]) * mud);\n        }\n    } \n    g[0][n + 1] = g[n + 1][0] = Distance ({sx, sy}, {ex, ey}) * mud;\n    // \u5b58\u8fb9\n    dij (0);\n\n    printf (\"%.4f\\n\", dis[n + 1]);\n\n    return 0;\n}\n```",
        "postTime": 1643120866,
        "uid": 188850,
        "name": "_Toorean_",
        "ccfLevel": 4,
        "title": "P1907 \u8bbe\u8ba1\u9053\u8def \u9898\u89e3"
    },
    {
        "content": "\u4e00\u4e2a\u6708\u6ca1\u4e0a\u6d1b\u8c37\uff0c\u76f4\u63a5\u7ea2\u6389\u84dd\uff0c\u5e76\u53d1\u7bc7\u9898\u89e3\u719f\u6089\u4e0b~~\u8865rating~~\u3002\n\n--------------\n\n## \u9898\u610f\u7b80\u8ff0\n\n\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u6709$n$\u4e2a\u70b9\uff0c\u6784\u6210\u4e00\u4e2a\u5f3a\u8fde\u901a\u56fe\u3002\u5373\u6bcf\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u8fb9\u7684\u7c7b\u578b\u4e0d\u662f$\\texttt{Rome}$\u5c31\u662f$\\texttt{Dirt}$\u3002\n\n**\u8fb9\u957f**\u5373\u4e3a\u4e24\u70b9\u76f4\u7ebf\u8ddd\u79bb\uff08\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff09\u3002**\u8fb9\u6743**\u4e3a\u8fb9\u957f$\\times$\u76f8\u5e94\u4e0d\u6ee1\u503c\u3002\n\n\u6c42\u6700\u77ed\u8ddd\u79bb\u3002\n\n## \u89e3\u9898\u601d\u8def\n\n\u663e\u7136\u8dd1\u6700\u77ed\u8def\uff0c\u8fd9\u91cc\u9009\u53d6$\\texttt{Dijkstra}$\u3002\n\n\u9ebb\u70e6\u4e00\u70b9\u7684\u53ef\u80fd\u662f\u5efa\u56fe\u3002\n\n\u8f93\u5165\u65f6\u628a$\\texttt{Rome}$\u7684\u8fb9\u5efa\u597d\uff0c\u7528\u77e9\u9635\u6807\u8bb0\u5df2\u5efa\u8fb9\u3002\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u662f$\\texttt{Dirt}$\u3002\u7ec6\u8282\u81ea\u5df1\u5b9e\u8df5\u5c31\u80fd\u6ce8\u610f\u5230\uff0c\u601d\u7ef4\u96be\u5ea6\u4e0d\u5927\u3002\n\n## \u6ce8\u610f\u4e8b\u9879\n\n- \u65e0\u5411\u56fe\u3002\n\n- \u8dd1$\\texttt{Dijkstra}$\u65f6\uff0c\u5165\u961f\u7684\u4e0d\u662f`(next,val)`\u800c\u662f`(next,dis[next])`\u3002\u76f8\u4fe1\u4f60\u77e5\u9053\u4ec0\u4e48\u610f\u601d\uff08\u6211\u88ab\u8fd9\u4e2a\u5751\u4e86\u51e0\u6b21\uff09\u3002\n\n- \u6ce8\u610f\u7cbe\u5ea6\u5efa\u8bae`double`\u3002\n\n- \u6ce8\u610f\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\n\n\n## \u5947\u5f02\u7801\u98ce\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n#include <vector>\n#include <climits>\n#include <queue>\nusing namespace std;\n\nconst int MAXN=5005;\nint n;\ndouble dirt,rome;\nstruct point\n{\n\tdouble x,y;\n\tfriend istream& operator >>(istream& is,point& a)\n\t{\n\t\tis>>a.x>>a.y;\n\t\treturn is;\n\t}//\u65b9\u4fbf\u8f93\u5165\n}a[MAXN];\nstruct node\n{\n\tint to;\n\tdouble v;\n\tbool operator<(const node& a)const\n\t{\n\t\treturn v>=a.v;//\u5806\u4f18\u5316\u7b26\u53f7\u522b\u53cd\n\t}\n};\nvector <node> edge[MAXN];\ndouble dis[MAXN];\nbool visit[MAXN];\nbool f[MAXN][MAXN];\n\ndouble calc(const point u,const point v,const double cost)\n{\n\treturn sqrt((u.x-v.x)*(u.x-v.x)+(u.y-v.y)*(u.y-v.y))*cost;//\u6ce8\u610f\u8fb9\u957f\u4e0e\u8fb9\u6743\n}\n\nvoid input(void)\n{\n\tcin>>dirt>>rome>>n;\n\tfor(int i=1;i<=n;i++)\n\t cin>>a[i];\n\tint u=0,v=0;\n\tdo//\u5efaRome\u8fb9\n\t{\n\t\tcin>>u>>v;\n\t\tedge[u].push_back(node{v,calc(a[u],a[v],rome)});\n\t\tedge[v].push_back(node{u,calc(a[v],a[u],rome)});\n\t\tf[u][v]=f[v][u]=true;//\u6807\u8bb0\n\t}while(u && v);\n\tcin>>a[0]>>a[n+1];\n}\n\nvoid build(void)\n{\n\tfor(int i=0;i<=n+1;i++)\n\t for(int j=i+1;j<=n+1;j++)\n\t  if(!f[i][j])//\u5269\u4e0b\u7684\u5c31\u662fDirt\n\t  {\n\t\t  edge[i].push_back(node{j,calc(a[i],a[j],dirt)});\n\t\t  edge[j].push_back(node{i,calc(a[j],a[i],dirt)});\n\t  }\n}\n\nvoid dijkstra(void)//\u6a21\u677f\u4e86\n{\n\tpriority_queue <node> q;\n\tfor(int i=0;i<=n+1;i++)\n\t dis[i]=1.00*INT_MAX;\n\tdis[0]=0.0;//\u6ce8\u610f\u8d77\u70b9\n\tq.push(node{0,0.0});\n\twhile(!q.empty())\n\t{\n\t\tconst int tmp=q.top().to;\n\t\tq.pop();\n\t\tif(visit[tmp])\n\t\t continue;\n\t\tvisit[tmp]=true;\n\t\tfor(auto it:edge[tmp])\n\t\t\tif(dis[it.to]>dis[tmp]+it.v)\n\t\t\t{\n\t\t\t\tdis[it.to]=dis[tmp]+it.v;\n\t\t\t\tif(!visit[it.to])\n\t\t\t\t q.push(node{it.to,dis[it.to]});//\u5751\n\t\t\t}\n\t}\n}\n\nint main()\n{\n\tinput();\n\tbuild();\n\tdijkstra();\n\tprintf(\"%.4lf\\n\",dis[n+1]);//\u6ce8\u610f\u7ec8\u70b9\n\treturn 0;\n}\n```",
        "postTime": 1572705766,
        "uid": 80049,
        "name": "Hexarhy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u6700\u77ed\u8def\u9898\u89e3\u548c\u8ba8\u8bba\u91cc\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\uff0c\u53ea\u8981\u628a\u6bcf\u4e2a\u7ed3\u70b9\uff08\u5305\u62ec\u8d77\u70b9\u548c\u7ec8\u70b9\uff09\u4e4b\u95f4\u90fd\u8fde\u8d77\u6765\uff0c\u8dd1\u4e00\u904d\u6709\u5b9e\u6570\u7684\u6700\u77ed\u8def\u5c31\u884c\u4e86\u3002\u6ce8\u610f\u4e0b\u54ea\u4e9b\u5730\u65b9\u8981\u7528\u5b9e\u6570\uff0c\u8fb9\u6743\u662f\u5982\u4f55\u7b97\u51fa\u6765\u7684\uff08\u6839\u53f7\u8ddd\u79bb\u4e58\u5355\u4f4d\u957f\u5ea6\u7684\u82b1\u8d39\uff09\u3002\n\n\u8fd9\u9898\u7684\u8f93\u5165\u7279\u522b\u591a\uff0c\u8fd8\u5f88\u70e6\uff0c\u7528scanf\u7684\u8981\u6ce8\u610f`%d`\u548c`%lf`\u7684\u533a\u5206\u3002\u8fd8\u6709\uff0c\u8fd9\u9898\u7684\u8fb9\u662f\u53cc\u5411\u8fb9\uff0c\u5efa\u8fb9\u7684\u65f6\u5019\u8981\u53cc\u5411\u5efa\u8fb9\uff08\u4e0d\u8fc7\u5e94\u8be5\u4e0d\u7528\u5efa\u7ec8\u70b9\u5230\u8d77\u70b9\u7684\u8fb9\u5427\uff09\u3002\n\n\u6b63\u5982\u67d0\u7247\u9898\u89e3\u6240\u8bf4\uff0c\u8fd9\u9898\u8f93\u51fa\u8c03\u8bd5\u7279\u522b\u9ebb\u70e6\uff0c\u6ce8\u610f\u628a\u8c03\u8bd5\u5220\u5e72\u51c0\uff08\u6211\u4e5f\u56e0\u4e3a\u6ca1\u5220\u5b8cwa\u4e86\u4e00\u6b21\uff09\n\n\u7136\u540e\u5c31\u662f\u4e00\u901a\u6700\u77ed\u8def\u3002**\u6700\u77ed\u8def\uff0c\u6211\u9009dijstra\u3002dijstra\uff0c\u6211\u9009\u5806\u4f18\u5316**\uff0c\u770b\u5230\u9898\u89e3\u91cc\u8fde\u5806\u4f18\u5316dij\u90fd\u6ca1\u6709\uff0c\u6211\u8865\u4e00\u7bc7\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nstruct edge\n{\n\tint v,next;\n\tdouble w;\n} p[4000001];//\u90bb\u63a5\u8868\u7684\u8fb9\nint front[1010],n,i,j,M,_x,_y;\nbool v[1010];\ndouble dis[1010],x[1010],y[1010],x_1,x_2;\nvoid add(int u,int v,double w)\n{\n\tp[++M].v=v;\n\tp[M].w=w;\n\tp[M].next=front[u];\n\tfront[u]=M;\n}//\u52a0\u8fb9\nstruct point\n{\n\tint a,b;\n} q;\nbool operator <(const point &x,const point &y)\n{\n\treturn x.a>y.a;\n}\npriority_queue<point> dui;//\u5806\u4f18\u5316\ndouble dijstra(int st,int ed)\n{\n\tq.a=0;\n\tq.b=st;\n\tdui.push(q);\n\tint ii;\n\tfor (ii=1;ii<=n+2;ii++) dis[ii]=1999999999;\n\tdis[st]=0;\n\twhile (!dui.empty())\n\t{\n\t\tint x=dui.top().b;\n\t\tdui.pop();\n\t\tif (v[x]) continue;\n\t\tv[x]=true;\n\t\tfor (ii=front[x];ii;ii=p[ii].next)\n\t\t{\n\t\t\tif (dis[x]+p[ii].w<dis[p[ii].v])\n\t\t\t{\n\t\t\t\tdis[p[ii].v]=dis[x]+p[ii].w;\n\t\t\t\tif (!v[p[ii].v])\n\t\t\t\t{\n\t\t\t\t\tq.a=dis[p[ii].v];\n\t\t\t\t\tq.b=p[ii].v;\n\t\t\t\t\tdui.push(q);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[ed];\n}//\u6700\u77ed\u8def\ndouble juli(double i1,double j1,double i2,double j2)\n{\n\treturn sqrt((i1-i2)*(i1-i2)+(j1-j2)*(j1-j2));\n}//\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\nint main()\n{\n\tscanf(\"%lf%lf\",&x_1,&x_2);\n\tscanf(\"%d\",&n);\n\tfor (i=1;i<=n;i++)\n\t scanf(\"%lf%lf\",&x[i],&y[i]);\n\tfor (i=1;i<=n;i++)\n\t for (j=i+1;j<=n;j++)\n\t {\n\t \tadd(i,j,x_1*juli(x[i],y[i],x[j],y[j]));\n\t \tadd(j,i,x_1*juli(x[i],y[i],x[j],y[j]));\n\t }//\u8fd9\u91cc\u7528\u5230\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5bf9\u4e8eromeroad\uff0c\u6211\u4eec\u8fd9\u91cc\u4e5f\u6309\u7167dirtroad\u8fb9\u6743\u5efa\u8fb9\u3002\u56e0\u4e3aromeroad\u8fb9\u6743\u4e00\u5b9a\u66f4\u5c0f\uff0c\u540e\u9762romeroad\u5efa\u8fb9\u540e\uff0c\u6700\u77ed\u8def\u6700\u7ec8\u4f1a\u7528\u77ed\u8fb9\u9020\u6210\u5f71\u54cd\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e8b\uff0c\u5c31\u662f\u65f6\u95f4\u8d39\u4e86\u70b9\uff08\u53cd\u6b63\u6709\uff0c\u5927\u628a\u65f6\u5149\uff1f\uff09\n\tscanf(\"%d%d\",&_x,&_y);\n\twhile (_x!=0 && _y!=0)\n\t{\n\t\tadd(_x,_y,x_2*juli(x[_x],y[_x],x[_y],y[_y]));\n\t\tadd(_y,_x,x_2*juli(x[_x],y[_x],x[_y],y[_y]));\n\t\tscanf(\"%d%d\",&_x,&_y);\n\t}\n\tscanf(\"%lf%lf%lf%lf\",&x[n+1],&y[n+1],&x[n+2],&y[n+2]);\n\tfor (i=1;i<=n;i++)\n\t{\n\t\tadd(n+1,i,x_1*juli(x[i],y[i],x[n+1],y[n+1]));\n\t\tadd(i,n+1,x_1*juli(x[i],y[i],x[n+1],y[n+1]));\n\t\tadd(i,n+2,x_1*juli(x[i],y[i],x[n+2],y[n+2]));\n\t\tadd(n+2,i,x_1*juli(x[i],y[i],x[n+2],y[n+2]));\n\t}\n\tadd(n+1,n+2,x_1*juli(x[n+1],y[n+1],x[n+2],y[n+2]));//\u4ee5\u4e0a\u5168\u662f\u8bfb\u5165\u5efa\u8fb9\n\tprintf(\"%.4lf\\n\",dijstra(n+1,n+2));\n\tn+=2;//\u8ffd\u6c42\u5b8c\u7f8e\n\treturn 0;\n}\n```",
        "postTime": 1563848934,
        "uid": 52315,
        "name": "\u6d1b\u8c37\u662f\u5927\u4f6c",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    },
    {
        "content": "\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6700\u77ed\u8def\uff0c\u4e0d\u6ee1\u610f\u503c\u53ca\u4e3a\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u9898\u76ee\u8981\u6211\u4eec\u6c42\u6700\u5c11\u7684\u4e0d\u6ee1\u610f\u503c\u5373\u6c42\u8d77\u70b9\u4e0e\u7ec8\u70b9\u95f4\u7684\u6700\u77ed\u8def\uff1b\n\n\u7528\u7ed3\u6784\u4f53\u5b58\u8def\u53e3\u7684\u5750\u6807\uff0ca[0]\u5b58\u8d77\u70b9\uff0ca[n+1]\u5b58\u7ec8\u70b9\uff1b\uff08\u6ca1\u6709C++\u7684\u9898\u89e3\u6765\u6c34\u4e00\u6ce2\uff09\uff1b\n\n\uff08\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u8010\u5fc3\u770b\u662f\u4f1a\u6709\u6536\u83b7\u7684\uff09\uff1b\n\n\n\n\n\n\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nconst int maxn=1005;\nusing namespace std;\ndouble dirty,roma;\nint beg[maxn*100],nex[maxn*100],vis[maxn*100],to[maxn*100],q[maxn*100],e;\ndouble dis[maxn*100],w[maxn*100];//\u6570\u7ec4\u5f00\u5927\u70b9TAT\uff08\u60e8\u75db\u7684\u6559\u8bad\uff09\nbool flag[maxn][maxn];\nvoid add(int x,int y,double z)//\u94fe\u5f0f\u524d\u5411\u661f\u50a8\u5b58 \uff1b \n{\n    e++;\n    nex[e]=beg[x];\n    beg[x]=e;\n    to[e]=y;\n    w[e]=z;\n}\nstruct Node{\n    double x,y;\n}a[maxn];\ndouble path1(int aa,int bb)//\u8ba1\u7b97Dirt Road\u7684\u4e0d\u6ee1\u503c \uff1b \n{\n    return sqrt((a[aa].x-a[bb].x)*(a[aa].x-a[bb].x)+(a[aa].y-a[bb].y)*(a[aa].y-a[bb].y))*dirty;\n}\ndouble path2(int aa,int bb)//\u8ba1\u7b97Rome Road\u7684\u4e0d\u6ee1\u503c\uff1b \n{\n    return sqrt((a[aa].x-a[bb].x)*(a[aa].x-a[bb].x)+(a[aa].y-a[bb].y)*(a[aa].y-a[bb].y))*roma;\n}\nvoid SPFA(int x) \n{\n    int head=0,tail=1;\n    dis[x]=0;q[1]=x;vis[x]=1;\n    while(head<tail)\n    {\n        head++;\n        int u=q[head];\n        vis[u]=0;//\u8bb0\u5f97\u53bb\u6807\u8bb0\uff1b \n        for(int i=beg[u];i;i=nex[i])\n        {\n            int v=to[i];\n            if(dis[v]>dis[u]+w[i])\n            {\n                dis[v]=dis[u]+w[i];\n                if(!vis[v])\n                {\n                    vis[v]=1;\n                    q[++tail]=v;\n                }\n            }\n        }\n    }\n}\nint main(){\n    cin>>dirty>>roma; //Dirty road\u548cRome road\u7684\u4e0d\u6ee1\u610f\u503c;\n    int n;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i].x>>a[i].y;\n    }\n    int x,y;\n    memset(dis,127,sizeof(dis));//\u521d\u59cb\u5316\u6700\u5927\u503c\uff1b \n    while(1)\n    {\n        cin>>x>>y;if(x*y==0)break;\n        flag[x][y]=1;flag[y][x]=1;//\u8bb0\u5f55\u4e24\u70b9\u95f4\u7684\u9053\u8def\u7c7b\u578b\u65b9\u4fbf\u6dfb\u52a0 Dirt Road\uff1b \n        add(x,y,path2(x,y));//\u6dfb\u52a0Rome Road \n        add(y,x,path2(x,y));\n    }\n    for(int i=1;i<n;i++)\n    {\n        for(int j=i+1;j<=n;j++)\n        {\n            if(!flag[i][j])//\u4e0d\u662fRome road;\n            {\n                add(i,j,path1(i,j));//\u5f80\u6ca1\u505a\u6807\u8bb0\u7684\u4e24\u4e2a\u8def\u53e3\u95f4\u6dfb\u52a0Dirt Road\uff1b \n                add(j,i,path1(i,j));\n            }\n        }\n    }\n    cin>>a[0].x>>a[0].y>>a[n+1].x>>a[n+1].y;//\u8d77\u70b9\u8bbe\u4e3a0\uff0c\u7ec8\u70b9n+1\uff1b \n    for(int i=1;i<=n+1;i++)\n    {\n        add(0,i,path1(0,i));//\u5f80\u5404\u4e2a\u8def\u53e3\uff08\u548c\u7ec8\u70b9\uff09\u4e0e\u8d77\u70b9\u95f4\u6dfb\u52a0 Dirt Road\uff1b\n        add(i,0,path1(i,0));\n    }\n    for(int i=0;i<=n;i++)\n    {\n        add(n+1,i,path1(i,n+1));//\u540c\u4e0a\uff0c\u6dfb\u7ec8\u70b9\u7684Dirt Road\uff1b \n        add(i,n+1,path1(i,n+1));\n    }\n    SPFA(0);//\u4ece\u8d77\u70b9\u641c\u8d77 \n    printf(\"%.4lf\\n\",dis[n+1]);//\u8f93\u51fa\u7ec8\u70b9\u8ddd\u79bb \n    return 0;\n}\n```",
        "postTime": 1500703882,
        "uid": 44806,
        "name": "Checkmate",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    },
    {
        "content": "\u9898\u76ee\u4f20\u9001\u95e8\uff1a[P1907 \u8bbe\u8ba1\u9053\u8def](https://www.luogu.com.cn/problem/P1907)\u3002\n# \u524d\u7f6e\u77e5\u8bc6\n\n**\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u516c\u5f0f\uff1a**\n\n\u8bbe\u4e24\u70b9\u5206\u522b\u4e3a\uff1a$(x1,y1)(x2,y2)$\uff0c\u5219\u4e24\u70b9\u7684\u8ddd\u79bb\u4e3a\uff1a$\\sqrt{(x2-x1)^2+(y2-y1)^2}$\u3002\n\n**\u6700\u77ed\u8def [dijkstra](https://blog.csdn.net/qq_45776662/article/details/107177424?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167331261916800188551470%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167331261916800188551470&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-107177424-null-null.142^v70^control,201^v4^add_ask&utm_term=dijkstra%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187) \u7b97\u6cd5\u3002**\n# \u601d\u8def\n\n\u8fd9\u9053\u9898\u4e3b\u8981\u662f\u8003\u8651\u600e\u4e48\u5efa\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8def\u53e3\u6765\u7f16\u53f7\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u7279\u6b8a\u5904\u7406\u5206\u522b\u4e3a $0$ \u548c $n+1$\u3002\n\n\u6211\u4eec\u518d\u8003\u8651\u4e24\u79cd\u8def\uff0c\u9996\u5148\u9898\u76ee\u544a\u8bc9\u4e86\u6211\u4eec Rome Road \u7684\u8fb9\uff0c\u6211\u4eec\u53ea\u8981\u628a\u6bcf\u4e2a\u8def\u53e3\u8fde\u8fb9\u5373\u53ef\uff0c\u8fb9\u6743\u5c31\u4e3a\u76f4\u7ebf\u8def\u5f84\u518d\u4e58\u4e0a\u4ee3\u4ef7\uff0c\u7136\u540e\u8003\u8651 Dirt Road\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u5982\u679c\u6ca1\u6709 Rome Road \u90a3\u4e00\u5b9a\u5c31\u662f Dirt Road\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e2a\u8def\u53e3\u5efa\u8fb9\u3002\n\n\u6700\u540e\u628a $s$ \u8fde\u5411\u6240\u6709\u7684\u8def\u53e3\uff0c\u628a\u6240\u6709\u7684\u8def\u53e3\u90fd\u8fde\u5411 $t$\uff0c\u5373\u53ef\u3002\n\n\u6700\u540e\u7684\u6700\u540e\u8dd1\u4e00\u904d dijkstra \u7b97\u6cd5\u5373\u53ef\u3002\n\n**\u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u6ce8\u610f double \u4e0d\u8981 int \u4e0d\u7136\u7cbe\u5ea6\u4e22\u5931**\u3002\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=1010;\nvector<pair<int,double> >a[N];\npriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >q;\ndouble hx[N],hy[N];\ninline double dis(double x1,double y1,double x2,double y2){//\u6c42\u8ddd\u79bb\n\treturn sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n}\nvoid add(int u,int v,double w){//\u52a0\u8fb9\u51fd\u6570\n\ta[u].push_back({v,w});\n\ta[v].push_back({u,w});\n}\nbool vis[N][N];\nint b[N];\ndouble d[N];\ndouble dij(int s,int t){//\u6c42\u6700\u77ed\u8def\u7b97\u6cd5\n\tq.push({0,s});\n\tfor (int i=0;i<=t;i++) d[i]=1e9;\n\td[s]=0;\n\twhile(!q.empty()){\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif (b[u]) continue;\n\t\tb[u]=1;\n\t\tfor (auto i:a[u]){\n\t\t\tint v=i.first;\n\t\t\tdouble w=i.second;\n\t\t\tif (d[v]>d[u]+w){\n\t\t\t\td[v]=d[u]+w;\n\t\t\t\tq.push({d[v],v});\n\t\t\t}\n\t\t}\n\t}\n\treturn d[t];\n}\nmain(){\n\tdouble a,b;\n\tcin>>a>>b;\n\tint n;\n\tcin>>n;\n\tfor (int i=1;i<=n;i++) cin>>hx[i]>>hy[i];\n\tint x,y;\n\twhile(cin>>x>>y&&x&&y) vis[x][y]=vis[y][x]=1,add(x,y,dis(hx[x],hy[x],hx[y],hy[y])*b);//\u5efa Rome Road \u7684\u8fb9 \n\tfor (int i=1;i<=n;i++)\n\t\tfor (int j=i+1;j<=n;j++)\n\t\t\tif (!vis[i][j]) add(i,j,dis(hx[i],hy[i],hx[j],hy[j])*a);//\u679a\u4e3e\u5efa Dirt Road \u7684\u8fb9\n\tdouble sx,sy,tx,ty;\n\tcin>>sx>>sy>>tx>>ty;\n\tfor (int i=1;i<=n;i++) add(0,i,dis(sx,sy,hx[i],hy[i])*a);//\u8d77\u70b9\u5411\u5404\u4e2a\u70b9\u8fde\u8fb9 \n\tfor (int i=1;i<=n;i++) add(i,n+1,dis(hx[i],hy[i],tx,ty)*a);//\u6bcf\u4e2a\u70b9\u90fd\u8fde\u5411\u7ec8\u70b9\n\tprintf(\"%.4lf\",dij(0,n+1));\n    return 0;\n}\n\n```\n\n",
        "postTime": 1673358573,
        "uid": 658198,
        "name": "gesong",
        "ccfLevel": 4,
        "title": "P1907 \u8bbe\u8ba1\u9053\u8def \u9898\u89e3"
    },
    {
        "content": "\u4e00\u770b\u5c31\u662fSPFA\uff0c\u672c\u849f\u84bb\u521a\u597d\u5728\u5237\u56fe\u8bba\u7684\u6c34\u9898\uff0c\u5c31\u628a\u8fd9\u9053\u9898AC\u4e86\n\u6e29\u99a8\u63d0\u793a\uff1a\u8fd9\u6761\u9053\u8def\u662f\u76f4\u7684\uff0c\u6c42\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u518d\u4e58rome\u6216dirt\n```pascal\nvar a:array[1..1002,1..2]of extended;//\u5750\u6807\n    w:array[1..1002,1..1002]of extended;//\u662f\u5426\u662fRome\n    dist:array[1..1002]of extended;//\u6700\u5c0f\u503c\n    f:array[1..1002]of boolean;//\u5224\u65ad\u6709\u6ca1\u6709\u5165\u961f\n    h:array[1..1002]of longint;//\u961f\u5217\n    i,j,n,x,y,t,ww:longint;\n    x1,y1,x2,y2,dirt,rome:extended;\nbegin\n  read(dirt,rome);\n  read(n);\n  for i:=1 to n do\n   read(a[i,1],a[i,2]);\n  read(x,y);\n  while (x<>0)and(y<>0) do\n  begin\n   w[x,y]:=rome*sqrt(sqr(a[x,1]-a[y,1])+sqr(a[x,2]-a[y,2]));//\u5982\u679c\u662fRome\u5c31\u5728w\u6570\u7ec4\u4e2d\u5b58\u50a8\u8fd9\u6761\u8def\n   w[y,x]:=w[x,y];//\u53cc\u5411\u8def\n   read(x,y);\n  end;\n  read(x2,y2);//\u7801\u5934\u5750\u6807\n  read(x1,y1);//\u5bb6\u7684\u5750\u6807\n  n:=n+2;//\u5efa\u65b0\u7684\u70b9\n  a[n-1,1]:=x2;//\u5efa\u7801\u5934\u70b9\n  a[n-1,2]:=y2;\n  a[n,1]:=x1;//\u5efa\u5bb6\u70b9\n  a[n,2]:=y1;\n  h[1]:=n;\n  t:=0;ww:=1;\n  for i:=1 to n do dist[i]:=maxlongint;//\u521d\u59cb\u6700\u5927\n  dist[n]:=0;\n  while ww<>t do\n  begin\n   t:=t mod n+1;\n   x:=h[t];\n   f[x]:=false;\n   for i:=1 to n do\n   begin\n    if (dist[x]<maxlongint)and(w[x,i]<>0)and(dist[x]+w[x,i]<dist[i]) then//\u5982\u679c\u662fRome\uff0c\u8d70w\u6570\u7ec4\u7684\u8def\n    begin\n     dist[i]:=dist[x]+w[x,i];\n     if f[i]=false then\n     begin\n      f[i]:=true;\n      ww:=ww mod n+1;\n      h[ww]:=i;\n     end;\n    end;\n    if (dist[x]<maxlongint)and(w[x,i]=0)and(dist[x]+dirt*sqrt(sqr(a[x,1]-a[i,1])+sqr(a[x,2]-a[i,2]))<dist[i]) then//dirt\u8def\n    begin\n     dist[i]:=dist[x]+dirt*sqrt(sqr(a[x,1]-a[i,1])+sqr(a[x,2]-a[i,2]));\n     if f[i]=false then\n     begin\n      f[i]:=true;\n      ww:=ww mod n+1;\n      h[ww]:=i;\n     end;\n    end;\n   end;\n  end;\n  writeln(dist[n-1]:0:4);//\u4fdd\u7559\u56db\u4f4d\u5c0f\u6570\nend.\n```",
        "postTime": 1538183445,
        "uid": 110420,
        "name": "Weakest_Konjac",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    },
    {
        "content": "\u5df2\u77e5\u6240\u6709\u8def\u53e3\u3001\u8d77\u70b9\u3001\u7ec8\u70b9\u7684\u5750\u6807\u4ee5\u53ca\u6240\u6709\u6709rome road\u8fde\u63a5\u7684\u8def\u53e3\uff0c\u6c42\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\n\n\u5f88\u660e\u663e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e26\u6743\u7684\u6700\u77ed\u8def\uff0crome road\u7684\u6743\u4e3arome\uff0cdirt road\u7684\u6743\u4e3adirt\uff08\u89c1\u7a0b\u5e8f\uff09\uff0c\u518d\u5df2\u77e5\u6240\u6709\u8def\u53e3\u7684\u5750\u6807\u5c31\u77e5\u9053\u4e86\u6240\u6709\u8def\u53e3\u95f4\u7684\u8ddd\u79bb\uff08\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f\uff09\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53ef\u4ee5\u7528dijkstra\u6216bellman-ford\u505a\u4e86\n\n\u4e0b\u9762\u8d34\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int SIZE=1000;\ntypedef double db;\n\nstruct aa\n{\n\tdb x,y;\n} crossing[SIZE+10];//\u6240\u6709\u8def\u53e3\u7684\u5750\u6807 \n\ndb sqr(db x)  //\u5e73\u65b9 \n{\n\treturn x*x;\n}\n\ndb dist(int i,int j)  //\u8ba1\u7b97\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb \n{\n\treturn sqrt(sqr(crossing[i].x-crossing[j].x)+sqr(crossing[i].y-crossing[j].y));//\u4e24\u70b9\u95f4\u8ddd\u79bb\u516c\u5f0f\n}\n\nstruct aaa\n{\n\tint start,end;\n} romeroad[SIZE*10+10];//rome road\u8fde\u63a5\u7684\u4e24\u4e2a\u8def\u53e3 \n\ndb dis[SIZE+10][SIZE+10];//\u90bb\u63a5\u8868\u5b58\u50a8\u4efb\u610f\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb \ndb mincount[SIZE+10];//dijkstra\u7684\u6700\u77ed\u8ddd\u79bb \nbool visit[SIZE+10];//\u662f\u5426\u5df2\u7ecf\u8bbf\u95ee\u8fc7 \n\ndb dbmin(db x,db y)  //\u6700\u5c0f\u503c \n{\n\tif(x>y) return y;\n\telse return x;\n}\n\nint main()\n{\n\tdb dirt,rome;\n\tscanf(\"%lf%lf\",&dirt,&rome);\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%lf%lf\",&crossing[i].x,&crossing[i].y);//\u8bfb\u5165\u6240\u6709\u70b9\u7684\u5750\u6807 \n\tint m=0;\n\tfor(int i=1;i<=n+2;i++)\n\t{\n\t\tfor(int j=1;j<=n+2;j++) dis[i][j]=0x3f3f3f3f;\n\t\tmincount[i]=0x3f3f3f3f;\n\t}\n\tfor(;;)  //\u8bfb\u5165\u6709\u9a6c\u8def\u7684\u4e24\u70b9 \n\t{\n\t\tm++;\n\t\tscanf(\"%d%d\",&romeroad[m].start,&romeroad[m].end);\n\t\tif(romeroad[m].start==0&&romeroad[m].end==0)\n\t\t{\n\t\t\tm--;\n\t\t\tbreak;\n\t\t}\n\t}\n\tscanf(\"%lf%lf%lf%lf\",&crossing[n+1].x,&crossing[n+1].y,&crossing[n+2].x,&crossing[n+2].y);//\u8bfb\u5165\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u5750\u6807 \n\tn+=2;\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=1;j<=n;j++) dis[i][j]=dirt*dist(i,j);//\u8ba1\u7b97dirt road\u7684\u8ddd\u79bb \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tdb x=dis[romeroad[i].start][romeroad[i].end]*rome/dirt;//\u8ba1\u7b97rome road\u7684\u8ddd\u79bb \n\t\tdis[romeroad[i].start][romeroad[i].end]=x;\n\t\tdis[romeroad[i].end][romeroad[i].start]=x;\n\t}\n\tint k=n-1;\n\tdb minn;\n\tdb cnt=0;\n\tmincount[k]=0;\n\tfor(int i=1;i<n;i++)   //dijkstra\uff08\u8fd9\u91cc\u662fn^2\u7b97\u6cd5\uff0c\u56e0\u4e3an<=1000\uff0c\u6240\u4ee5\u672c\u4eba\u61d2\u5f97\uff08\u5212\uff09\u5c31\u4e0d\u7528\u4f18\u5148\u961f\u5217\u4f18\u5316\u4e86\uff09\n\t{\n\t\tvisit[k]=true;\n\t\tminn=0x3f3f3f3f;\n\t\tint b=-1;\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tif(visit[j]) continue;\n\t\t\tmincount[j]=dbmin(mincount[j],mincount[k]+dis[k][j]);\n\t\t\tif(mincount[j]<minn)\n\t\t\t{\n\t\t\t\tminn=mincount[j];\n\t\t\t\tb=j;\n\t\t\t}\n\t\t}\n\t\tk=b;\n\t\tif(k==-1)\n\t\t{\n\t\t\tprintf(\"fuck\\n\");//\u5ffd\u7565\u8fd9\u91cc \n\t\t\treturn 0;\n\t\t}\n\t\tif(k==n) break;//\u82e5\u6ca1\u6709\u6bd4\u5230\u7ec8\u70b9\u66f4\u77ed\u7684\u8def\u5f84\u5219\u63a8\u51fa \n\t}\n\tprintf(\"%.4lf\\n\",mincount[n]);//\u8f93\u51fa\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84 \n\treturn 0;\n}\n```",
        "postTime": 1524913843,
        "uid": 54728,
        "name": "wangxuye",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    },
    {
        "content": "\u9898\u89e3\uff1a\n\n\u8fd9\u9898\u662f\u5178\u578b\u7684\u6700\u77ed\u8def\uff0c\u901a\u8fc7\u5bf9\u8f93\u5165\u6570\u636e\u7684\u5904\u7406\uff0c\u8f6c\u5316\u4e3a1-n\u7684\u6700\u77ed\u8def\u95ee\u9898\uff0c\u5c31\u662f\u9700\u8981\u7528\u5b9e\u6570\uff0c\u7528\u51fd\u6570\u7b97\u51fa\u4e24\u70b9\u95f4\u8ddd\u79bb\uff0c\u7136\u540edijkstra\u8dd1\u4e00\u904d\u5373\u53ef\n\npascal code:\n\n```cpp\nvar\n  x,y:real;\n  n,i,j,t,k,min:longint;\n  d,a,b:array[-1..1002] of real;\n  c:array[-1..1002] of boolean;\n  f:array[-1..1002,-1..1002] of boolean;\nfunction ccc(p,q:longint):real;//\u8ba1\u7b97p,q\u95f4\u7684\u8ddd\u79bb\nbegin\n  if f[p,q] then exit(y*sqrt(sqr(a[p]-a[q])+sqr(b[p]-b[q])))\n             else exit(x*sqrt(sqr(a[p]-a[q])+sqr(b[p]-b[q])));\nend;\nbegin\n  readln(x,y);\n  readln(n);\n  for i:=2 to n+1 do readln(a[i],b[i]);\n  readln(t,k);\n  while (t>0) or (k>0) do\n    begin\n      f[t+1,k+1]:=true;//\u53cc\u5411\uff0c\u4e0d\u77e5\u9053\u5355\u5411\u5bf9\u4e0d\u5bf9\n      f[k+1,t+1]:=true;\n      readln(t,k);\n    end;\n  readln(a[1],b[1]);\n  readln(a[n+2],b[n+2]);//\u8fd9\u91cc\u8f6c\u5316\u4e86\u4e00\u4e0b\u628a\u8d77\u70b9\u7ec8\u70b9\u653e\u5230\u524d\u540e\uff08\u6240\u4ee5\u524d\u9762t,k\u7b49\u90fd+1\uff09\n  n:=n+2;\n  c[1]:=true;\n  for i:=2 to n do d[i]:=ccc(1,i);//d\u4fdd\u5b58\u5f53\u524d\u6700\u77ed\u8def\n  d[0]:=10000000;\n  for i:=2 to n do\n    begin\n      min:=0;//\u6700\u77ed\u7684\u53ef\u62d3\u5c55\u70b9\n      for j:=2 to n do if not c[j] then if d[j]<d[min] then min:=j;\n      c[min]:=true;\n      for j:=2 to n do if not c[j] then if d[min]+ccc(min,j)<d[j] then d[j]:=d[min]+ccc(min,j);//\u91cd\u7f6e\u70b9\u7684\u6700\u77ed\u8def\u5f84\n    end;\n  write(d[n]:0:4);//\u8f93\u51fa\u4e0d\u8bb2\u4e86\nend.\n```",
        "postTime": 1477402432,
        "uid": 20505,
        "name": "tututu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1907 \u3010\u8bbe\u8ba1\u9053\u8def\u3011"
    }
]