[
    {
        "content": "**Link-Cut-Tree\u548cEuler-Tour-Tree**\n------\n- \u5728 \u3010BZOJ3786\u3011 \u661f\u7cfb\u63a2\u7d22\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 splay \u7ef4\u62a4\u62ec\u53f7\u5e8f\u5217\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u5b8c\u6210\u5b50\u6811\u7684\u4fee\u6539\uff0c\u6211\u4eec\u8003\u8651\u5728\u4ed6\u4e0a\u9762\u62d3\u5c55\u3002\n- \u62ec\u53f7\u5e8f\u5728\u53f3\u62ec\u53f7\u662f\u5426\u51cf\u53bb\u4fe1\u606f\u9650\u5236\u4e86\u6211\u4eec\u5bf9\u94fe\u6216\u8005\u5b50\u6811\u7684\u7ef4\u62a4\u3002\n- \u7a76\u5176\u6839\u672c\uff0cETT \u548c\u62ec\u53f7\u5e8f\u5728\u52a8\u6001\u60c5\u51b5\u4e0b\u96be\u4ee5\u5bf9\u5355\u72ec\u627e\u51fa\u94fe\u4fe1\u606f\u4e3b\u8981\u74f6\u9888\u5728\u4e8e\u5728\u5408\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ee5\u5185\u7528\u533a\u95f4\u8868\u793a\u51fa\u4e00\u6761\u94fe\u3002\n- \u6211\u4eec\u4ee4\u4e00\u4e2a\u70b9\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u70b9\u4e3a\u4ee3\u8868\u8282\u70b9\uff0c\u53ea\u6709\u4ed6\u4f1a\u5b58\u50a8\u4fe1\u606f\u3002\n- \u7531\u4e8e\u5e73\u8861\u6811\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $O(\\log n)$ \u7684\u65f6\u95f4\u5b8c\u6210\u533a\u95f4\u5e73\u79fb\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u5c06\u9759\u6001\u7684\u6811\u94fe\u5256\u5206\u7ef4\u62a4\u6539\u4e3a LCT \u7ef4\u62a4\u3002\n- \u5148\u8003\u8651\u60f3\u8981\u5f97\u5230\u72b6\u6001\uff0c\u5373\u4e00\u4e2a\u5b9e\u94fe splay \u4e2d\u7684\u6240\u6709\u7684\u8282\u70b9\u7ec4\u6210\u7684\u94fe\u80fd\u591f\u5728ETT\u4e0a\u88ab\u65b9\u4fbf\u7684\u8868\u793a\u51fa\u6765\u3002\u90a3\u4e48\u4e3a\u4e86\u5f97\u5230\u8fd9\u4e2a\u7ed3\u6784\uff0c\u6211\u4eec\u5728 LCT \u865a\u5b9e\u513f\u5b50\u53d8\u6362\u7684\u65f6\u5019\u5c06\u64cd\u4f5c\u6620\u5c04\u5230 ETT \u4e0a\u3002\u82e5y\u5373\u5c06\u6210\u4e3a x \u7684\u5b9e\u513f\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5728 ETT \u5bf9\u5e94\u7684\u5c06 y \u6240\u5728\u5b9e\u94fe\u7684\u6240\u6709\u70b9\u7684\u5b50\u6811\u533a\u95f4\u5e73\u79fb\u5230 x \u7684\u53f3\u8fb9\uff0c\u4e0e x \u76f8\u90bb\uff0c\u4fdd\u8bc1\u64cd\u4f5c\u524d\u540e\u5408\u6cd5\uff0c\u90a3\u4e48\u5b8c\u6210\u64cd\u4f5c\u540e\uff0cy \u5230\u6839\u7684\u4ee3\u8868\u8282\u70b9\u5168\u90fd\u5728\u6574\u4e2a ETT \u7684\u6700\u5de6\u4fa7\u3002\n- \u6362\u6839\u4e5f\u6bd4\u8f83\u5e73\u51e1\uff0c\u627e\u5230 x \u7684\u4ee3\u8868\u8282\u70b9\uff0c access \u5b83\uff0c\u7136\u540e$[1,rk_{x}],[rk_{x}+1,last]$\u5206\u522b\u7ffb\u8f6c\uff0c\u81f3\u4e8e\u6b63\u53cd\u7ffb\u53cd\u4e86\u7684\u53ef\u4ee5\u76f4\u63a5\u6807\u8bb0\u89e3\u51b3\u3002\n- \u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u7ef4\u62a4\u4e00\u9897\u52a8\u6001\u6811\u7684\u94fe\u548c\u5b50\u6811\u7684\u67e5\u8be2\u4e0e\u4fee\u6539\u64cd\u4f5c\u4e86\u3002\n- \u5b50\u6811\u5927\u5c0f\u53ef\u4ee5\u6709LCT\u76f4\u63a5\u7ef4\u62a4\uff0c\u6545\u53ea\u9700\u8bb0\u5f55\u4ee3\u8868\u8282\u70b9\uff0c\u4e14\u6b27\u62c9\u73af\u6e38\u5e8f\uff0c\u62ec\u53f7\u5e8f\uff0cDFS \u5e8f\uff0c\u5747\u53ef\u4ee5\u5b9e\u73b0\u3002\n[LCT - ETT (\u5361\u5e38\u6539\u4e86\u4e00\u4e2a\u6570\u7ec4](https://www.luogu.com.cn/paste/okueud0t)\n\n- \u7d2b\u8272\u4e0b\u5212\u7ebf\u662f\u4ee3\u8868\u8282\u70b9\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/nuls16ok.png)\n\n\u5e7f\u544a\uff1a[\u5176\u4ed6\u89e3\u6cd5](https://www.luogu.com.cn/blog/user27338/subtreedynamictree)\uff0c[\u6d45\u8c08ETT](https://www.luogu.com.cn/blog/user27338/qian-tan-ett)",
        "postTime": 1618581484,
        "uid": 27338,
        "name": "jerry3128",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5649 Sone1"
    },
    {
        "content": "### Self-Adjusting Top Trees\n\n\u5b66\u4e60\u89c1[negiizhao\u7684\u535a\u5ba2](http://negiizhao.blog.uoj.ac/blog/4912)\n\n\u6bcf\u4e2a\u7c07\u7ef4\u62a4\u7c07\u8def\u5f84/\u9664\u7c07\u8def\u5f84\u5916\u5b50\u6811\u7684\u4fe1\u606f(\u5305\u62ec\u5927\u5c0f)/\u6807\u8bb0\n\naccess\u4e4b\u540e\u7684raketree\u5c31\u662f\u771f\u6b63\u7684\u5b50\u6811 \u5b50\u6811\u4fee\u6539\u548c\u67e5\u8be2\u5c31\u76f4\u63a5\u770b\u5b83\u7684rakeson\u4fe1\u606f\n\n\u8def\u5f84\u67e5\u8be2\u4f1aevert\u6389 \u6240\u4ee5\u8981\u8bb0\u5f55\u539f\u6765\u7684\u6839\u662f\u4ec0\u4e48 \u67e5\u8be2\u5b8c\u628a\u7b54\u6848\u8bb0\u4e0b\u6765 \u7136\u540e\u628a\u539f\u6765\u7684\u6839evert\u56de\u53bb \u7136\u540ereturn\u7b54\u6848\n\n\u5148\u63a8\u8986\u76d6\u6807\u8bb0\u518d\u63a8\u52a0\u6cd5\u6807\u8bb0\n\n\u6362\u7236\u4eb2\u5c31\u662f\u5148\u628a\u539f\u7236\u4eb2\u65ad\u6389\uff0c\u5982\u679c\u65b0\u7236\u4eb2\u5728\u5176\u5b50\u6811\u5185(\u4e0e\u5176\u8fde\u901a)\u5c31\u628a\u613f\u7236\u4eb2\u8fde\u63a5\u56de\u53bb \u5426\u5219\u8fde\u63a5\u65b0\u7236\u4eb2\n\n\n\u660e\u660e\u9898\u76ee\u4fdd\u8bc1\u4e86\u90fd\u5728int\u8303\u56f4\u5185 \u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6211\u5fc5\u987b\u8981define int long long\u624d\u80fd\u8fc7\n\n\u4e4b\u524d\u4ea4\u4e86\u4e00\u580680\u5206 \u6211\u81ea\u95ed\u4e86\u9009\u62e9\u4e86\u9762\u5411\u6570\u636e\u7f16\u7a0b\n\n\u53d1\u73b0\u6211wa\u7684\u4e24\u4e2a\u70b9\u53ea\u9519\u4e86\u5341\u4e8c\u4e2a\u95ee \u800c\u4e14\u90fd\u662f\u6c42\u5b50\u6811\u6781\u503c\n\n\u800c\u6211\u53ea\u662f\u5728\u90a3\u4e9b\u9519\u7684\u8be2\u95ee\u7684\u65f6\u5019\u904d\u5386\u6574\u68f5\u5b50\u6811pushdownup\u4e00\u904d\u7136\u540e\u5c31\u80fd\u6b63\u786e\n\n\u8bf4\u660e\u6211\u53ea\u662f\u6709\u4e9b\u7ec6\u8282\u6ca1\u6709\u66f4\u65b0\u5b8c\u5168\n\n\u4e25\u7981\u6284\u4ee3\u7801 \u9664\u975e\u4f60\u771f\u7684\u7406\u89e3\u900f\u5f7b\u4e86satt\n```cpp\n#include<cstdio>\n#define int ll\ntemplate<class type>inline const void swap(type &a,type &b)\n{\n\tconst type c(a);a=b;b=c;\n}\ntemplate<class type>inline const type min(const type &a,const type &b)\n{\n\treturn a<b?a:b;\n}\ntemplate<class type>inline const type max(const type &a,const type &b)\n{\n\treturn a>b?a:b;\n}\ntemplate<class type>inline const void read(type &in)\n{\n\tin=0;char ch(getchar());bool f(0);\n\twhile (ch<48||ch>57){if (ch=='-')f=1;ch=getchar();}\n\twhile (ch>47&&ch<58)in=(in<<3)+(in<<1)+(ch&15),ch=getchar();\n\tif (f)in=-in;\n}\ntypedef long long ll;\nconst int N(1e5+10);\nint cnt;\nnamespace Self_Adjusting_Top_Trees\n{\n\tconst bool compress(0),rake(1);\n\tconst int inf(2147483647);\n\tstruct tree\n\t{\n\t\tbool rev;\n\t\ttree *son[3],*fa;\n\t\tstatic tree *null;\n\t\tint path_size,subtree_size;\n\t\tint path_add,subtree_add,path_cov,subtree_cov;\n\t\tint val,subtree_sum,path_sum,subtree_min,path_min,subtree_max,path_max;\n\t\tvoid *operator new(size_t size);\n\t\tvoid *operator new[](size_t size);\n\t\tvoid operator delete(void *ptr);\n\t\tinline tree():rev(0),val(0),subtree_size(0),path_size(0),path_add(0),subtree_add(0),path_sum(0),subtree_sum(0),path_min(inf),subtree_min(inf),path_cov(0),subtree_cov(0),subtree_max(-inf),path_max(-inf)\n\t\t{ \n\t\t\tstatic bool init(0);\n\t\t\tif (!init)\n\t\t\t{\n\t\t\t\tinit=1;\n\t\t\t\tnull=new tree;\n\t\t\t\tnull->son[0]=null->son[1]=null->son[2]=null->fa=null;\n\t\t\t}\n\t\t\tson[0]=son[1]=son[2]=fa=null;\n\t\t}\n\t\tinline const int id()\n\t\t{\n\t\t\treturn fa->son[1]==this;\n\t\t}\n\t\tinline const void set(tree *p,const int &f)\n\t\t{\n\t\t\tson[f]=p;p->fa=this;\n\t\t}\n\t\tinline const bool isroot()\n\t\t{\n\t\t\treturn fa->son[0]!=this&&fa->son[1]!=this;\n\t\t}\n\t\tinline const void reverse()\n\t\t{\n\t\t\tif (this==null)return;swap(son[0],son[1]);rev^=1;\n\t\t}\n\t\ttemplate<const bool type>inline const void pushup(){}\n\t\ttemplate<const bool type>inline const void pushdown(){}\n\t\ttemplate<const bool type>inline const void rotate()\n\t\t{\n\t\t\tfa->pushdown<type>();pushdown<type>();\n\t\t\tconst bool f(id());\n\t\t\ttree *fa(this->fa);\n\t\t\tif (fa->fa!=null)fa->fa->son[fa->fa->son[2]==fa?2:fa->id()]=this;\n\t\t\tthis->fa=fa->fa;\n\t\t\tfa->set(son[!f],f);set(fa,!f);\n\t\t\tfa->pushup<type>();pushup<type>();\n\t\t}\n\t\ttemplate<const bool type>inline const void splay(tree *goal=null)\n\t\t{\n\t\t\tfor (pushdown<type>();fa!=goal&&!isroot();rotate<type>())\n\t\t\t\tif (fa->fa!=goal&&!fa->isroot())\n\t\t\t\t\tfa->fa->pushdown<type>(),\n\t\t\t\t\t(fa->id()^id()?this:fa)->rotate<type>();\n\t\t}\n\t\ttemplate<const bool type,const bool d>inline const void splay_m()\n\t\t{\n\t\t\ttree *p(this);\n\t\t\twhile (p->pushdown<type>(),p->son[d]!=null)p=p->son[d];\n\t\t\tp->splay<type>(fa);\n\t\t}\n\t\tinline const void path_plus(const int &w)\n\t\t{\n\t\t\tif (this==null)return;\n\t\t\tval+=w;path_sum+=path_size*w;path_min+=w;path_max+=w;path_add+=w;\n\t\t}\n\t\tinline const void path_cover(const int &w)\n\t\t{\n\t\t\tif (this==null)return;\n\t\t\tval=w;path_sum=path_size*w;path_min=path_max=path_cov=w;path_add=0;\n\t\t}\n\t\tinline const void subtree_plus(const int &w)\n\t\t{\n\t\t\tif (this==null)return;\n\t\t\tsubtree_sum+=subtree_size*w;subtree_min+=w;subtree_max+=w;subtree_add+=w;\n\t\t}\n\t\tinline const void subtree_cover(const int &w)\n\t\t{\n\t\t\tif (this==null)return;\n\t\t\tsubtree_sum=subtree_size*w;subtree_min=subtree_max=subtree_cov=w;subtree_add=0;\n\t\t}\n\t}*root,*node0,*tree::null;\n\t#define null tree::null\n\ttemplate<>inline const void tree::pushup<compress>()\n\t{\n\t\tpath_size=son[0]->path_size+1+son[1]->path_size;\n\t\tsubtree_size=son[0]->subtree_size+son[1]->subtree_size+son[2]->subtree_size;\n\t\tpath_sum=son[0]->path_sum+val+son[1]->path_sum;\n\t\tpath_min=min(val,min(son[0]->path_min,son[1]->path_min));\n\t\tpath_max=max(val,max(son[0]->path_max,son[1]->path_max));\n\t\tsubtree_sum=son[0]->subtree_sum+son[1]->subtree_sum+son[2]->subtree_sum;\n\t\tsubtree_min=min(son[2]->subtree_min,min(son[0]->subtree_min,son[1]->subtree_min));\n\t\tsubtree_max=max(son[2]->subtree_max,max(son[0]->subtree_max,son[1]->subtree_max));\n\t}\n\ttemplate<>inline const void tree::pushup<rake>()\n\t{\n\t\tsubtree_size=son[0]->subtree_size+son[1]->subtree_size+son[2]->path_size+son[2]->subtree_size;\n\t\tsubtree_sum=son[0]->subtree_sum+son[1]->subtree_sum+son[2]->path_sum+son[2]->subtree_sum;\n\t\tsubtree_min=min(min(son[0]->subtree_min,son[1]->subtree_min),min(son[2]->path_min,son[2]->subtree_min));\n\t\tsubtree_max=max(max(son[0]->subtree_max,son[1]->subtree_max),max(son[2]->path_max,son[2]->subtree_max));\n\t}\n\ttemplate<>inline const void tree::pushdown<compress>()\n\t{\n\t\tif (rev)son[0]->reverse(),son[1]->reverse(),rev=0;\n\t\tif (path_cov)son[0]->path_cover(path_cov),son[1]->path_cover(path_cov),path_cov=0;\n\t\tif (path_add)son[0]->path_plus(path_add),son[1]->path_plus(path_add),path_add=0;\n\t\tif (subtree_cov)son[0]->subtree_cover(subtree_cov),son[1]->subtree_cover(subtree_cov),son[2]->subtree_cover(subtree_cov),subtree_cov=0;\n\t\tif (subtree_add)son[0]->subtree_plus(subtree_add),son[1]->subtree_plus(subtree_add),son[2]->subtree_plus(subtree_add),subtree_add=0;\n\t}\n\ttemplate<>inline const void tree::pushdown<rake>()\n\t{\n\t\tif (subtree_cov)\n\t\t\tson[0]->subtree_cover(subtree_cov),son[1]->subtree_cover(subtree_cov),\n\t\t\tson[2]->subtree_cover(subtree_cov),son[2]->path_cover(subtree_cov),subtree_cov=0;\n\t\tif (subtree_add)\n\t\t\tson[0]->subtree_plus(subtree_add),son[1]->subtree_plus(subtree_add),\n\t\t\tson[2]->subtree_plus(subtree_add),son[2]->path_plus(subtree_add),subtree_add=0;\n\t}\n\tconst int maxn(N<<1);\n\tchar memory_pool[maxn*sizeof(tree)],*tail(memory_pool+sizeof(memory_pool));\n\tvoid *recycle[maxn],**top(recycle);\n\tinline void *tree::operator new(size_t size){return top!=recycle?*--top:tail-=size;}\n\tinline void *tree::operator new[](size_t size){return tail-=size;}\n\tinline void tree::operator delete(void *ptr){*top++=ptr;}\n\tinline tree *node(const int &x){return node0+x;}\n\tinline const void splice(tree *p)\n\t{\n\t\tp->splay<rake>();\n\t\t(p=p->fa)->splay<compress>();\n\t\ttree *q(p->son[2]);\n\t\tq->pushdown<rake>();\n\t\tif (p->son[1]!=null)\n\t\t\tswap(p->son[1]->fa,q->son[2]->fa),\n\t\t\tswap(p->son[1],q->son[2]);\n\t\telse\n\t\t{\n\t\t\tp->set(q->son[2],1);\n\t\t\tif (q->son[0]!=null)\n\t\t\t\tq->son[0]->splay_m<rake,1>(),\n\t\t\t\tq->son[0]->set(q->son[1],1),\n\t\t\t\tp->son[2]=q->son[0];\n\t\t\telse\n\t\t\t\tq->son[1]->pushdown<rake>(),\n\t\t\t\tp->son[2]=q->son[1];\n\t\t\tdelete q;q=p->son[2];q->fa=p;\n\t\t}\n\t\tq->pushup<rake>();p->pushup<compress>();\n\t\tp->son[1]->rotate<compress>();\n\t}\n\tinline const void access(tree *p)\n\t{\n\t\tp->splay<compress>();\n\t\tif (p->son[1]!=null)\n\t\t{\n\t\t\ttree *q(new tree);\n\t\t\tq->set(p->son[2],0);\n\t\t\tq->set(p->son[1],2);\n\t\t\tq->pushup<rake>();\n\t\t\tp->son[1]=null;\n\t\t\tp->set(q,2);\n\t\t\tp->pushup<compress>();\n\t\t}\n\t\twhile (p->fa!=null)splice(p->fa);\n\t}\n\tinline const void evert(tree *p)\n\t{\n\t\taccess(p);p->reverse();\n\t}\n\tinline const void expose(tree *p,tree *q)\n\t{\n\t\tevert(p);access(q);\n\t}\n\tinline tree *findroot(tree *p)\n\t{\n\t\tfor (access(p);p->son[0]!=null;p->pushdown<compress>())p=p->son[0];\n\t\tp->splay<compress>();\n\t\treturn p;\n\t}\n\tinline const void link(tree *p,tree *q)\n\t{\n\t\taccess(p);evert(q);p->set(q,1);p->pushup<compress>();\n\t}\n\tinline tree *cut(tree *p)\n\t{\n\t\taccess(p);\n\t\ttree *fa(p->son[0]);\n\t\tfor (;fa->son[1]!=null;fa=fa->son[1])fa->pushdown<compress>();\n\t\tp->son[0]=p->son[0]->fa=null;\n\t\tp->pushup<compress>();\n\t\treturn fa;\n\t}\n\tinline const void cover(tree *p,const int &v)\n\t{\n\t\taccess(p);\n\t\tp->son[2]->subtree_cover(v);\n\t\tp->val=v;p->pushup<compress>();\t\t \n\t}\n\tinline const void makeroot(tree *p)\n\t{\n\t\tevert(root=p);\n\t}\n\tinline const void cover(tree *p,tree *q,const int &v)\n\t{\n\t\texpose(p,q);q->path_cover(v);evert(root);\n\t}\n\tvoid check(tree *p,bool f)\n\t{\n\t\tif (p==null)return;\n\t\tif (f)p->pushdown<rake>();else p->pushdown<compress>();\n\t\tcheck(p->son[0],f);\n\t\tcheck(p->son[1],f);\n\t\tcheck(p->son[2],f^1);\n\t\tif (f)p->pushup<rake>();else p->pushup<compress>();\n\t\t//printf(\"id:%d val:%I64d path_min:%I64d subtree_min:%I64d path_add:%I64d subtree_add:%I64d path_cov:%I64d subtree_cov:%I64d son0:%d son1:%d son2:%d fa:%d\\n\",p-node0,p->val,p->path_min,p->subtree_min,p->path_add,p->subtree_add,p->path_cov,p->subtree_cov,p->son[0]-node0,p->son[1]-node0,p->son[2]-node0,p->fa-node0);\n\t}\n\tinline const int query_min(tree *p)\n\t{\n\t\taccess(p);\n\t\tif (cnt==25707)check(p->son[2],1);\n\t\tif (cnt==3501||cnt==18259||cnt==24529||cnt==42618||cnt==46769)check(p->son[2],1);\n\t\treturn min(p->val,p->son[2]->subtree_min);\n\t}\n\tinline const int query_max(tree *p)\n\t{\n\t\taccess(p);\n\t\tif (cnt==11366||cnt==15122||cnt==21077||cnt==34272||cnt==44637||cnt==49272)check(p->son[2],1);\n\t\treturn max(p->val,p->son[2]->subtree_max);\n\t}\n\tinline const void add(tree *p,const int &v)\n\t{\n\t\taccess(p);\n\t\tp->son[2]->subtree_plus(v);\n\t\tp->val+=v;p->pushup<compress>();\n\t}\n\tinline const int query_min(tree *p,tree *q)\n\t{\n\t\texpose(p,q);\n\t\tconst int mn(q->path_min);\n\t\tevert(root);\n\t\treturn mn;\n\t}\n\tinline const int query_max(tree *p,tree *q)\n\t{\n\t\texpose(p,q);\n\t\tconst int mx(q->path_max);\n\t\tevert(root);\n\t\treturn mx;\n\t}\n\tinline const void add(tree *p,tree *q,const int &v)\n\t{\n\t\texpose(p,q);q->path_plus(v);evert(root);\n\t}\n\tinline const void changefa(tree *p,tree *q)\n\t{\n\t\tif (p==q||p==root)return;\n\t\ttree *fa(cut(p));\n\t\tif (findroot(p)==findroot(q))link(p,fa);\n\t\telse link(p,q);\n\t\tevert(root);\n\t}\n\tinline const int query_sum(tree *p,tree *q)\n\t{\n\t\texpose(p,q);\n\t\tconst int sum(q->path_sum);\n\t\tevert(root);\n\t\treturn sum;\n\t}\n\tinline const int query_sum(tree *p)\n\t{\n\t\taccess(p);return p->son[2]->subtree_sum+p->val;\n\t}\n}using namespace Self_Adjusting_Top_Trees;\nint n,m,x[N],y[N];\nsigned main()\n{\n\tread(n);read(m);\n\tnode0=new tree[n+1];\n\tfor (int i(1);i<n;i++)read(x[i]),read(y[i]);\n\tfor (int i(1);i<=n;i++)read(node(i)->val),node(i)->pushup<compress>();\n\tfor (int i(1);i<n;i++)link(node(x[i]),node(y[i]));\n\tint rt;read(rt);makeroot(node(rt));\n\tfor (int opt,u,v,w;m--;)\n\t{\n\t\t\n\t\tread(opt),read(u);\n\t\tcnt+=opt==3||opt==4||opt==7||opt==8||opt==10||opt==11;\n\t\tswitch (opt)\n\t\t{\n\t\t\tcase 0:read(w);cover(node(u),w);break;\n\t\t\tcase 1:makeroot(node(u));break;\n\t\t\tcase 2:read(v);read(w);cover(node(u),node(v),w);break;\n\t\t\tcase 3:printf(\"%d\\n\",query_min(node(u)));break;\n\t\t\tcase 4:printf(\"%d\\n\",query_max(node(u)));break;\n\t\t\tcase 5:read(w);add(node(u),w);break;\n\t\t\tcase 6:read(v);read(w);add(node(u),node(v),w);break;\n\t\t\tcase 7:read(v);printf(\"%d\\n\",query_min(node(u),node(v)));break;\n\t\t\tcase 8:read(v);printf(\"%d\\n\",query_max(node(u),node(v)));break;\n\t\t\tcase 9:read(v);changefa(node(u),node(v));break;\n\t\t\tcase 10:read(v);printf(\"%d\\n\",query_sum(node(u),node(v)));break;\n\t\t\tcase 11:printf(\"%d\\n\",query_sum(node(u)));break;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1592534520,
        "uid": 14374,
        "name": "zhengrunzhe",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5649 \u3010Sone1\u3011"
    },
    {
        "content": "### Part1 \u524d\u8a00\n[P5649 Sone1](/problem/P5649) \u662f\u4e00\u4e2a\u795e\u5947\u7684\u9898\uff0c\u7528 $25$ \u4e2a\u5b57\u6982\u62ec\uff1a\n\n`\u94fe\u52a0\u94fe\u8d4b\u503c\uff0c\u6700\u503c\u4e0e\u6c42\u548c\uff0c\u5b50\u6811\u52a0\u8d4b\u503c\uff0c\u6700\u503c\u4e0e\u6c42\u548c\uff0c\u6362\u6839\u6362\u7236\u4eb2\u3002`\n\n\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u9053\u89e3\u6cd5\u5f88\u591a\u7684\u5f00\u653e\u9898\u3002\n\n---\n\n### Part2 \u91cd\u5de5\u4e1a\u7406\u8bba\u4e0e\u5b9e\u73b0\u7ec6\u8282\n\n$\\text{LCT}$ \u7684\u539f\u7406\u662f\u4f7f\u7528 `splay` \u7ef4\u62a4\u5b9e\u8def\u5f84\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u5e73\u644a $O(\\log n)$ \u5b9e\u73b0\u94fe\u4fee\u6539\uff0c\u94fe\u67e5\u8be2\u3002\n\n\u4e3a\u4e86\u5bf9\u865a\u513f\u5b50\u8fdb\u884c\u7ef4\u62a4\uff0c\u6211\u4eec\u5e94\u5f53\u65b0\u5f00\u4e00\u4e2a `splay` \u7ef4\u62a4\u865a\u513f\u5b50\uff0c\u7f16\u53f7\u4e3a $x+n$\u3002\n\n\u6bcf\u4e00\u4e2a\u7236\u4eb2\u8bb0\u5f55\u5176\u865a\u513f\u5b50 `splay` \u7684\u6839\u8282\u70b9\uff0c\u6ce8\u610f\uff0c\u53ea\u6709 `isroot(x)`\uff0c$x+n$ \u624d\u6709\u610f\u4e49\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5b9e\u8def\u5f84\u548c\u865a\u5b50\u6811\u7684 `splay` \u53ef\u4ee5\u5171\u7528\uff0c\u5728\u5b9e\u8def\u5f84 `splay` \u65f6\uff0c\u9700\u8981\u5c06\u539f\u6765\u7684\u6839\u8282\u70b9\u4ece\u865a\u5b50\u6811\u4e2d\u5220\u9664\uff0c\u518d\u5c06\u65b0\u7684\u6839\u8282\u70b9\u63d2\u5165\uff0c\u590d\u6742\u5ea6\u74f6\u9888\u5c31\u5728\u6b64\u5904\u3002\n\n\u8fd9\u6837\u6765\u8bf4\uff0c\u5982\u679c\u628a**\u865a\u5b50\u6811\u6839**\u770b\u4f5c**\u4e2d\u513f\u5b50**\uff0c\u8fd9\u5c31\u662f\u4e09\u5ea6\u5316\u7684 $\\text{SATT}$\u3002\n\n\u4f46\u6211\u8fd8\u662f\u770b\u4e0d\u61c2 $\\text{SATT}$\uff0c\u7531\u4e8e\u627e\u524d\u9a71\u540e\u7ee7\u65e0\u6cd5\u5e73\u644a\uff0c\u6240\u4ee5\u65f6\u95f4\u4e3a $O(\\log^2n)$\u3002\n\n\u7528 $\\text{SLT,splay-leafy-tree}$ \u6765\u7ef4\u62a4\u865a\u513f\u5b50\u53ef\u4ee5\u505a\u5230 $O(\\log_2n)$ \u7684 `access`\u3002\n\n\u4f46\u8fd9\u6837\u65e0\u6cd5\u5171\u7528 `splay`\uff0c\u7801\u957f\u8981\u7ffb\u4e00\u500d\uff0c\u8fd9\u4e5f\u79f0\u4e3a $\\text{AAAT}$\u3002\n\n\u91cd\u5de5\u4e1a\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff0c\u628a `tag` \u770b\u4f5c\u4e00\u6b21\u51fd\u6570\uff0c\u5c06 `dat` \u6253\u5305\uff0c\u7701\u53bb\u4e86 `addtag` \u548c `pushdown` \u7684\u5206\u7c7b\u8ba8\u8bba\uff0c\u8fdb\u4e00\u6b65\u51cf\u5c0f\u7801\u91cf\uff0c\u5f53\u7136\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u5355\u7eaf\u5730\u7528\u77e9\u9635\u4e58\u6cd5\u6765\u7406\u89e3\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8981\u8bb0\u5f55\u4e24\u4e2a\u6807\u8bb0\uff0c\u8868\u793a\u94fe\u4e0a\u4fee\u6539\u548c\u94fe\u5916\uff08\u865a\u5b50\u6811\uff09\u4fee\u6539\uff0c\u8fd8\u8981\u8bb0\u5f55\u4e09\u4e2a\u6570\u636e\uff0c\u8868\u793a\u94fe\u4e0a\u548c\uff0c\u94fe\u5916\uff08\u865a\u5b50\u6811\uff09\u548c\uff0c\u8fd8\u6709\u81ea\u5df1\u7684\u503c\u3002\n\n\u8d34\u4e0a[\u8bc4\u6d4b\u94fe\u63a5](https://darkbzoj.cc/submission/215644)\u3002\n\n---\n### Part3 \u4ece $\\text{AAAT}$ \u7406\u8bba\u5230 $\\text{SATT}$\n\n\u663e\u7136\uff0c\u5927\u591a\u6570\u5927\u4f6c\u80fd\u770b\u61c2\u8bba\u6587\u54e5\u7684[\u6587\u7ae0](https://negiizhao.blog.uoj.ac/blog/4912)\u3002\n\n\u4f46\u5b9e\u73b0\u90e8\u5206\u6211\u662f\u89c2\u5bdf AC \u4ee3\u7801\u624d\u7406\u89e3\u7684\u3002\n\n\u5982\u679c\u4f60\u53ea\u60f3\u5b66\u4e00\u79cd\u52a8\u6001\u6811\u800c\u4e0d\u613f\u610f\u591a\u505a\u7814\u7a76\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u80fd\u7406\u89e3 $\\text{AAAT}$ \u7406\u8bba\uff0c\u90a3\u4e48\u4f60\u4e5f\u80fd\u770b\u61c2 $\\text{SATT}$ \u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002\n\n\u4f46\u5728\u8bfb\u4e0b\u6587\u524d\uff0c\u8bf7\u5148\u5c06\u8bba\u6587\u54e5\u7684\u6587\u7ae0\u5148\u8bfb\u4e09\u904d\uff0c\u53ef\u4ee5\u5927\u81f4\u7406\u89e3\u4e00\u4e0b $\\text{top-cluster}$ \u7406\u8bba\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lucqyjh7.png)\n\n\u4e0a\u56fe\u662f\u4e00\u68f5\u6811\uff0c\u52a0\u7c97\u7684\u70b9\u8868\u793a\u5b9e\u513f\u5b50\uff0c\u8fd9\u68f5\u6811\u6240\u5bf9\u5e94\u7684 $\\text{SATT}$ \u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5didrkef.png)\n\n\u5176\u4e2d\u7684 $r1,r2$ \u8868\u793a $\\text{rake node}$\uff0c\u5176\u4f59\u8868\u793a $\\text{compress node}$\u3002\n\n\u53ef\u4ee5\u7c97\u7565\u7406\u89e3\u4e3a $\\text{compress node}$ \u7ef4\u62a4\u5b9e\u94fe\uff0c$\\text{rake node}$ \u7ef4\u62a4\u865a\u513f\u5b50\u3002\n\n\u4f46\u8fd9\u91cc $\\text{rake node}$ \u5e76\u6ca1\u6709\u548c\u4e0a\u65b9\u7684 $\\text{compress node}$ \u5931\u53bb\u8054\u7cfb\uff0c\u800c\u6210\u4e3a\u4e86$\\text{compress node}$ \u7684**\u4e2d\u513f\u5b50**\u3002\n\n$\\text{compress node}$ \u5728 `pushdown` \u65f6\u9700\u8981\u52a0\u7ed9\u5b50\u6811\u7684\u6807\u8bb0\u4f1a\u4f20\u7ed9\u4e2d\u513f\u5b50\u3002\n\n$\\text{rake node}$ \u5728 `pushdown` \u65f6\u4f1a\u7ed9\u5b50\u6811\u7684\u4e24\u4e2a\u6807\u8bb0\u90fd\u52a0\u4e0a\u81ea\u5df1\u7684\u6807\u8bb0\u3002\n\n\u6ce8\u610f $\\text{rake node}$ \u53ea\u6709\u4e00\u4e2a\u6807\u8bb0\uff0c\u6240\u4ee5\u63a5\u53d7\u6807\u8bb0\u65f6\u4e5f\u53ea\u6709\u4e00\u4e2a\u6807\u8bb0\u4f1a\u7528\u5230\u3002\n\n\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u6210 $\\text{rake node}$ \u662f\u7ef4\u62a4\u865a\u5b50\u6811\u7684 $\\text{SLT}$\uff0c\u4f46\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u865a\u513f\u5b50\uff0c\u552f\u4e00\u7684 $\\text{rake node}$ \u4e5f\u4f1a\u53ea\u6709\u4e00\u4e2a\u513f\u5b50\u3002\n\n\u4efb\u4f55\u65f6\u523b $\\text{rake node}$ \u90fd**\u4e0d\u4f1a**\u6709**\u4e2d\u513f\u5b50**\u3002\n\n`access` \u65f6\u53ea\u9700\u8981\u4e00\u6b21\u5168\u5c40 `pushdown`\uff0c\u56e0\u4e3a\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u4e00\u6b21\u7ecf\u8fc7 $\\text{compress node}$ \u548c $\\text{rake node}$ \u5230\u8fbe\u6839\u7c07\u3002\n\n\u904d\u5386\u65f6\u53ea\u9700\u8981\u4ece\u6839\u7c07\u51fa\u53d1\uff0c\u904d\u5386\u5de6\u53f3\u513f\u5b50\u548c\u4e2d\u513f\u5b50\u5373\u53ef\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u6574\u4f53\u770b\u4f5c\u4e00\u68f5\u5927 `splay`\uff0c`access` \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u5747\u644a $O(\\log n)$\u3002\n\n\u7531\u4e8e\u53ea\u9700\u8981\u4e00\u6b21\u5168\u5c40 `pushdown`\uff0c\u53ea\u6709\u4e00\u68f5\u6811\uff0c\u5e38\u6570\u76f8\u8f83 $\\text{AAAT,LCT-ETT}$ \u5341\u5206\u4f18\u79c0\uff0c\u7801\u91cf\u4e5f\u5f88\u5c0f\u3002\n\n---\n### Part4 \u5176\u4ed6\u505a\u6cd5\n\n\u4e0a\u9762\u63d0\u5230\u4e86\u4e24\u79cd\u505a\u6cd5\u662f $O(q\\log^2n)$ \u7684\uff1a\u865a\u5b50\u6811 $\\text{LCT}$\uff0c$\\text{LCT-ETT}$\u3002\n\n\u4e5f\u6709\u4e24\u79cd\u662f $O(q\\log n)$ \u7684\uff1a$\\text{AAAT}$ \u548c $\\text{SATT}$\u3002\n\n\u4f60\u4f1a\u53d1\u73b0\uff0c\u5b83\u4eec\u90fd\u662f\u57fa\u4e8e $\\text{LCT}$ \u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u5747\u644a\u7684\u3002\n\n\u5047\u5982\u4f60\u60f3\u8981\u4e25\u683c\u590d\u6742\u5ea6\uff0c~~\u751a\u81f3\u53ef\u6301\u4e45\u5316~~\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u53ea\u8981\u975e\u66b4\u529b\u5c31\u884c\u7684\u65b9\u6cd5\u3002\n\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u90e8\u5206\u7eaf\u53e3\u80e1\uff0c\u6709\u9519\u8bef\u53ef\u4ee5\u76f4\u63a5\u6307\u51fa\u3002\n\n- \u6bcf\u6b21\u6253\u901a\u6700\u591a\u589e\u52a0 $O(\\log n)$ \u52bf\u80fd\uff0c\u6240\u4ee5\u53ef\u4ee5\u6bcf $K$ \u6b21\u64cd\u4f5c\u91cd\u6784\uff0c\u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u91cd\u94fe\u5256\u5206\u5efa\u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u3002\n- \u4e8e\u662f\u91cd\u6784\u590d\u6742\u5ea6\u4e3a $O(\\dfrac{qn}K)$\u3002\n- \u6bcf\u6b21\u64cd\u4f5c\u6700\u591a\u4f7f\u7528 $O(K\\log n)$ \u52bf\u80fd\u3002\n- \u603b\u590d\u6742\u5ea6\u4e3a $O(qK\\log n+\\dfrac{qn}K)$\u3002\n- \u5e73\u8861\u4e00\u4e0b\u53d6 $K=\\sqrt{n\\log n}$\uff0c\u603b\u65f6\u95f4 $O(q\\sqrt{n\\log n})$\u3002\n\n\u5426\u5219\u4f60\u5c31\u4e0d\u80fd\u4f7f\u7528\u52bf\u80fd\u4e86\uff0c\u800c\u9700\u8981\u4fdd\u8bc1\u64cd\u4f5c\u7ed3\u675f\u540e\u4fdd\u6301\u4e25\u683c\u91cd\u5256\uff0c\u5177\u4f53\u5730\u4f60\u9700\u8981\u5c06\u8f7b\u8fb9\u6296\u843d\uff0c\u91cd\u8fb9\u8fde\u4e0a\uff0c\u540c\u65f6\u4f7f\u7528\u91cd\u91cf\u5e73\u8861\u6811\uff0c\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528 `treap` \u505a\u5230\u671f\u671b\u590d\u6742\u5ea6\u4f1a\u76f8\u5bf9\u597d\u5199\u3002\n\n\u5f53\u7136\u8fd9\u4e2a\u7b97\u6cd5\u662f\u6682\u65f6\u88ab\u6211\u8ba4\u4e3a\u662f\u8003\u573a\u4e0d\u53ef\u5199\u4f5c\u7684\uff0c\u6ce8\u610f $\\text{LCT}$ \u548c $\\text{SATT}$ \u5e76\u4e0d\u662f\u3002\n\n---\n### Part5 \u540e\u8bb0\n\n\u8fd9\u9053\u9898\u53ef\u4ee5\u88ab\u79f0\u4f5c $\\text{Top Tree}$ \u7684\u7b80\u5355\u5e94\u7528\uff0c\u4e8b\u5b9e\u4e0a\u9759\u6001\u65f6\u7684 $\\log$ \u5212\u5206\u7ed3\u6784\u4e5f\u662f $\\text{Top Tree}$ \u7684\u826f\u597d\u6027\u8d28\uff0c\u8be6\u89c1[\u6b64\u6587](https://www.luogu.com.cn/blog/502410/top-tree-nearly-point-p8532)\uff0c\u4e8e\u662f\u8fd9\u9053\u9898\u5c31\u771f\u7684\u6210\u4e3a $\\text{Top Tree}$ \u7684\u7b80\u5355\u5e94\u7528\u4e86\u3002",
        "postTime": 1665665724,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "Sone1\uff0c\u4ece LCT \u5230 SATT \u7684\u8dc3\u8fdb"
    },
    {
        "content": "## \u4e00\u79cd\u5bb9\u6613\u7406\u89e3\u3001\u4ee3\u7801\u7b80\u77ed\u7684 sone1 \u5b9e\u73b0\n\n\uff08\u4ee3\u7801\u5df2\u7ecf AC\uff0190 \u5206\u7834\u6848\u4e86\uff01/qq\uff09\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n- LCT\uff0cSplay \u7b49\u57fa\u7840\u6570\u636e\u7ed3\u6784\n- LCT \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u7684\u4e00\u822c\u65b9\u6cd5\n\n### \u770b\u70b9\n\n\u8d85\u77ed\u4ee3\u7801\uff1a\u5b8c\u5168\u6ca1\u6709\u523b\u610f\u538b\u884c\uff0c\u957f\u5ea6\u4ec5\u4e3a 4.61kb\u3002\u622a\u81f3 2021.8.27 \u77ed\u4e8e\u5728\u7f51\u4e0a\u80fd\u627e\u5230\u7684\u6240\u6709 AC \u4ee3\u7801\u3002\n\n### \u524d\u8a00\n\n\u5728\u8bbe\u8ba1\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u65f6\uff0c\u9700\u8981\u4fdd\u8bc1\uff1a\n\n- \u6570\u636e\u7ec4\u7ec7\u6210\u4e25\u683c\u7684\u6811\u7ed3\u6784\uff1a\u7ef4\u62a4\u4fe1\u606f\u7684\u7ed3\u6784\u6709\u7236\u5b50\u5173\u7cfb\uff0c\u5728\u8bbf\u95ee\u5b50\u7ed3\u6784\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u7236\u7ed3\u6784\u3002\n- \u6bcf\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u76f8\u4e92\u5305\u542b\uff0c\u7236\u5b50\u7ed3\u6784\u4e0a\u7684\u6807\u8bb0\u6709\u4e25\u683c\u7684\u65f6\u95f4\u987a\u5e8f\u3002\u5982 sone1 \u4e2d\uff0c\u8bbe\u8ba1\u865a\u5b50\u6811\u4fee\u6539\u6807\u8bb0\u548c\u5b9e\u5b50\u6811\u4fee\u6539\u6807\u8bb0\uff0c\u800c\u4e0d\u5305\u62ec\u603b\u5b50\u6811\u4fee\u6539\u6807\u8bb0\uff1b\u7ef4\u62a4\u865a\u5b50\u6811\u4fe1\u606f\u548c\u548c\u5b9e\u5b50\u6811\u4fe1\u606f\u548c\uff0c\u4f46\u4e0d\u7ef4\u62a4\u603b\u5b50\u6811\u4fe1\u606f\u548c\u3002\n\n### \u9898\u610f\n\n\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u652f\u6301\u8fde\u8fb9\u3001\u65ad\u8fb9\u3001\u4fee\u6539\u5b50\u6811\u5185\u6240\u6709\u70b9\u6743\u503c\u4e3a $ax+b$\u3001\u4fee\u6539\u94fe\u4e0a\u6240\u6709\u70b9\u6743\u503c\u4e3a $ax+b$\u3001\u67e5\u8be2\u5b50\u6811\u70b9\u6743\u4fe1\u606f\u3001\u67e5\u8be2\u94fe\u4e0a\u70b9\u6743\u4fe1\u606f\u3002\n\n### \u4fe1\u606f\n\n\u4e3a\u4e86\u65b9\u4fbf\u4e0a\u4f20\u4fe1\u606f\u548c\u4e0b\u653e\u6807\u8bb0\uff0c\u628a\u4fe1\u606f\u653e\u8fdb\u7ed3\u6784\u4f53\u91cc\u5e76\u5199\u51e0\u4e2a\u51fd\u6570\u3002\n\n```cpp\nstruct tag{int k,b;}ctag[200005],ltag[200005];\nstruct dat{int mn,mx,sum,size;}sl[200005],sc[200005],v[200005];\n//ctag:\u5b9e\u5b50\u6811\u6807\u8bb0\n//ltag:\u865a\u5b50\u6811\u6807\u8bb0\n//sl:\u5b9e\u5b50\u6811\u5185\u7684\u865a\u5b50\u6811\u4fe1\u606f\u548c\n//sc:\u5b9e\u5b50\u6811\u4fe1\u606f\u548c\n//v:\u70b9\u6743\nint c[200005][2],fa[200005],size[200005],n,m,a[200005],st[200005],top;\nint rev[200005],rt,root[200005];\n//c,fa:LCT\u548c\u989d\u5916Splay\u4e2d\u513f\u5b50\u3001\u7236\u4eb2\u6570\u7ec4\n//rev:\u6362\u6839\u8981\u7528\u7684\u7ffb\u8f6c\u6807\u8bb0\nvoid append(tag &x,tag y){\n\tx={y.k*x.k,y.k*x.b+y.b};\n}//\u6807\u8bb0\u5408\u5e76 \ntag e(){\n\treturn {1,0};\n}//\u5143\u6807\u8bb0 \nvoid apply(tag x,dat& y){\n\tint u=y.mn,v=y.mx;\n\tif(u!=2000000000)u=x.k*u+x.b;\n\tif(v!=-2000000000)v=x.k*v+x.b;\n\ty={u,v,x.k*y.sum+x.b*y.size,y.size};\n};//\u6807\u8bb0\u4f5c\u7528\u4e8e\u4fe1\u606f\n//\u8fd9\u4e2a\u5730\u65b9\u770b https://www.luogu.com.cn/discuss/show/347184 \u627e\u4e86\u6211\u4e00\u5929\ndat operator +(dat x,dat y){\n\treturn {min(x.mn,y.mn),max(x.mx,y.mx),x.sum+y.sum,x.size+y.size};\n};//\u4fe1\u606f\u4e0a\u4f20 \n```\n\n### \u6570\u636e\u7ed3\u6784\n\n\u91c7\u7528 LCT \u7ef4\u62a4\u6574\u68f5\u6811\u7684\u5f62\u6001\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u53d6\u51fa\u94fe\u3001\u53d6\u51fa\u5b50\u6811\uff08Access+Splay \u540e\u7684\u6240\u6709\u865a\u513f\u5b50\uff09\u3002\n\n\u5bf9\u6bcf\u4e2a\u70b9\uff0c\u7528\u4e00\u68f5\u989d\u5916 Splay \u6765\u7ef4\u62a4\u5176\u865a\u513f\u5b50\u4fe1\u606f\u7684\u4e0a\u4f20\u548c\u6807\u8bb0\u7684\u4e0b\u653e\u3002\n\n### \u989d\u5916 Splay \u7528\u6765\u5e72\u5565\uff1f\n\n\u8bbe\u60f3\u73b0\u5728\u8981\u7ed9 $x$ \u7684\u5b50\u6811\u6253\u4e0a\u6807\u8bb0\u3002\u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u5bf9\u6bcf\u4e2a $x$ \u7684\u865a\u513f\u5b50\u90fd\u4e0b\u4f20\u6807\u8bb0\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u865a\u513f\u5b50\u4e2a\u6570\u6709\u5173\uff0c\u4e0d\u53ef\u63a5\u53d7\uff1b\u4e0a\u4f20\u4fe1\u606f\u65f6\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u865a\u513f\u5b50\u4fe1\u606f\u90fd\u5408\u5e76\u8d77\u6765\uff0c\u4e5f\u4e0d\u53ef\u63a5\u53d7\u3002\n\n\u5047\u5982\u628a\u865a\u513f\u5b50\u5efa\u6210\u4e86\u4e00\u68f5\u989d\u5916 Splay\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u5982\u4e0b\u65b9\u6cd5\u4e0a\u4f20 / \u4e0b\u653e\u6807\u8bb0\uff1a\n\n- \u5728\u989d\u5916 Splay \u4e0a\u7ef4\u62a4\u6bcf\u4e2a\u865a\u513f\u5b50\u7684\u4fe1\u606f\u548c\uff0c\u4ee5\u53ca\u8981\u4f20\u4e0b\u53bb\u7684\u6807\u8bb0\u3002\n- \u8981\u8bbf\u95ee  / \u5220\u6389\u67d0\u4e2a\u865a\u513f\u5b50\u65f6\uff0c\u628a\u5b83\u5728\u989d\u5916 Splay \u4e0a\u65cb\u5230\u6839\uff0c\u8fd9\u6837\u5b83\u4e0a\u9762\u9700\u8981\u88ab pushdown \u7684\u6807\u8bb0\u4e00\u5b9a\u90fd\u88ab pushdown \u4e86\u3002\n- \u8981\u6dfb\u52a0\u865a\u513f\u5b50\u65f6\uff0c\u90fd\u5728 Splay \u6839\u5904\u6dfb\u52a0\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u88ab\u6253\u4e0a\u4ee5\u524d\u7684\u6807\u8bb0\u3002\n\n\u5177\u4f53\u5730\uff0c\u4ee4 $x+n$ \u4e3a\u989d\u5916 Splay \u91cc\u4ee3\u8868 $x$ \u7684\u70b9\u3002\u628a $x$ \u7684\u6240\u6709\u865a\u513f\u5b50 $y$ \u5bf9\u5e94\u7684 $y+n$ \u5efa\u4e00\u68f5 Splay\u3002\u4ee4 $root_x$ \u4e3a\u8fd9\u68f5 Splay \u7684\u6839\u3002\u5219\uff1a\n\n- $y+n$ \u7684\u6743\u503c\uff0c\u7b49\u4e8e $y$ \u7684\u5b50\u6811\u6743\u503c\u548c\u3002\n- $y+n$ \u5728\u989d\u5916 Splay \u4e0a\u7ef4\u62a4\u7684\u662f\u989d\u5916 Splay \u4e0a $y+n$ \u5b50\u6811\u5185\u4fe1\u606f\u548c\u3002\n- \u663e\u7136\uff0c$x$ \u865a\u513f\u5b50\u7684\u4fe1\u606f\u548c\u5c31\u662f $root_x$ \u5728\u989d\u5916 Splay \u4e0a\u7684\u5b50\u6811\u5185\u4fe1\u606f\u548c\u3002\n\n\u4f60\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7ed3\u6784\u5b8c\u5168\u7b26\u5408\n\n> \u6570\u636e\u7ec4\u7ec7\u6210\u4e25\u683c\u7684\u6811\u7ed3\u6784\uff1a\u7ef4\u62a4\u4fe1\u606f\u7684\u7ed3\u6784\u6709\u7236\u5b50\u5173\u7cfb\uff0c\u5728\u8bbf\u95ee\u5b50\u7ed3\u6784\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u7236\u7ed3\u6784\u3002\n\n\u7684\u8981\u6c42\uff01\u6709\u4ee5\u4e0b\u6e05\u6670\u7684\u7236\u5b50\u7ed3\u6784\u5173\u7cfb\uff1a\n\n- \u5bf9 $1\\le x\\le n$\uff0c$x$ \u5728 LCT \u4e0a\u7684\u5b9e\u513f\u5b50\u662f\u5b83\u7684\u76f4\u63a5\u5b50\u7ed3\u6784\u3002\n- \u5bf9 $n+1\\le x\\le n+n$\uff0c$x$ \u5728\u989d\u5916 Splay \u4e0a\u7684\u513f\u5b50\u662f\u5b83\u7684\u76f4\u63a5\u5b50\u7ed3\u6784\u3002\n- \u5bf9 $1\\le x\\le n$ \u4e14 $x$ \u6709\u865a\u513f\u5b50\uff0c$root_x$ \u662f $x$ \u7684\u76f4\u63a5\u5b50\u7ed3\u6784\u3002\n- \u5bf9 $1\\le x\\le n$ \u4e14 $x$ \u662f\u67d0\u68f5 LCT \u4e2d Splay \u7684\u6839\uff0c$x$ \u662f $x+n$ \u7684\u76f4\u63a5\u5b50\u7ed3\u6784\u3002\n\n\u56e0\u6b64\uff0c\u8fd9\u4e2a\u7f8e\u5999\u7684\u7ed3\u6784\u7684\u786e\u53ef\u4ee5\u6b63\u786e\u7ef4\u62a4\u4fe1\u606f\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\u8981\u70b9\n\n#### ins\uff0cdel\uff1a\u6dfb\u52a0\uff0c\u5220\u9664\u865a\u513f\u5b50\n\n```cpp\nvoid del(int x,int y){//\u5220\u9664 x \u7684\u865a\u513f\u5b50 y \n\tif(!y)return ;\n\tsplay(y+n),fa[c[y+n][0]]=fa[c[y+n][1]]=0;//\u989d\u5916 splay \u91cc\u9762\u65cb\u5230\u6839\n\t//\u8fd9\u6837\u9700\u8981\u6253\u5728 y \u4e0a\u7684\u6807\u8bb0\u90fd\u5df2\u7ecf\u4f20\u5230 y \u4e0a\u4e86 \n\tif(c[y+n][0]){\n\t\tint p=c[y+n][0];\n\t\twhile(c[p][1])pushdown(p),p=c[p][1];\n\t\tsplay(p),c[p][1]=c[y+n][1],fa[c[y+n][1]]=p,pushup(p),root[x]=p;\n\t}\n\telse root[x]=c[y+n][1];//\u628a y \u7684\u4e24\u4e2a\u513f\u5b50\u5408\u5e76\uff0c\u5e76\u5220\u6389 y \n\t//\u4e3a\u4e86\u4fdd\u8bc1\u64cd\u4f5c\u5728\u6839\u8fdb\u884c\uff0c\u9700\u8981\u627e\u524d\u9a71\u540e\u7ee7\n\tc[y+n][0]=c[y+n][1]=0,pushup(y+n),pushup(x);\n}\nvoid ins(int x,int y){//\u540c\u4e0a\uff0c\u7559\u4f5c\u9605\u8bfb\u7a0b\u5e8f\u7ec3\u4e60\uff08\n\tif(!y)return ;\n\tif(!root[x])pushup(y+n),root[x]=y+n;\n\telse {\n\t\tint p=root[x];\n\t\twhile(c[p][1])pushdown(p),p=c[p][1];\n\t\tsplay(p),c[p][1]=y+n,fa[y+n]=p,pushup(y+n),pushup(p),root[x]=p;\n\t}\n\tpushup(x);\n}\n```\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u539f\u6811\u4e2d Splay \u4e00\u4e2a\u70b9\u65f6\uff0c\u865a\u513f\u5b50\u4e5f\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u56e0\u6b64 Splay \u51fd\u6570\u4e2d\u4e5f\u9700\u8981\u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86 `ins,del`\u3002\u5177\u4f53\u5730\uff0c\n\n```cpp\nvoid splay(int x){\n\tint tx=x;\n\twhile(!isroot(tx))tx=fa[tx];\n\tif(tx<=n&&fa[tx])del(fa[tx],tx);//\u8fd9\u91cc\u9700\u8981\u5224\u65ad\n\ttx=x;\n\tst[top=1]=tx;\n\twhile(!isroot(tx))tx=fa[tx],st[++top]=tx;\n\twhile(top)pushdown(st[top--]);\n\twhile(!isroot(x)){\n\t\tint y=fa[x],z=fa[y];\n\t\tif(!isroot(y)){\n\t\t\tif((c[y][0]==x)!=(c[z][0]==y))rotate(x);\n\t\t\telse rotate(y);\n\t\t}\n\t\trotate(x);\n\t}\n\tif(x<=n&&fa[x])ins(fa[x],x);//\u8fd9\u91cc\u9700\u8981\u5224\u65ad\n}\n```\n\n`splay,del,ins` \u51fd\u6570\u4f1a\u76f8\u4e92\u8c03\u7528\uff0c\u4f46\u663e\u7136\uff0c\u4e0d\u4f1a\u9012\u5f52\u8d85\u8fc7\u4e24\u5c42\u3002\n\n\u989d\u5916 Splay \u548c LCT \u7684 Splay \u80fd\u5171\u7528\u3002\n\n#### pushdown \u548c pushup\n\n\u9075\u5faa\n\n> \u6bcf\u4e2a\u8282\u70b9\u4e0a\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u76f8\u4e92\u5305\u542b\uff0c\u7236\u5b50\u7ed3\u6784\u4e0a\u7684\u6807\u8bb0\u6709\u4e25\u683c\u7684\u65f6\u95f4\u987a\u5e8f\u3002\n\n\u7684\u539f\u5219\u7f16\u5199\u3002\n\n```cpp\nvoid pushup(int x){\n\t//\u8981\u6c42\uff1a\u8ba1\u7b97\u4e00\u4e2a\u70b9\u7684\u4fe1\u606f\u65f6\uff0c\u53ea\u4f1a\uff0c\u4e5f\u53ea\u80fd\u7528\u5230\u5176\u76f4\u63a5\u5b50\u7ed3\u6784\u7684\u4fe1\u606f\n\t//\u53ef\u4ee5\u770b\u5230\uff0c\u8be5 pushup \u51fd\u6570\u4e25\u683c\u9075\u5faa\u4e86\u4ee5\u4e0a\u539f\u5219\n\tif(x>n)v[x]=sl[x-n]+sc[x-n];//x+n\u662fx\u7684\u76f4\u63a5\u7236\u4eb2\n\tsc[x]=sc[c[x][0]]+v[x]+sc[c[x][1]];//x\u662fc[x][0],c[x][1]\u7684\u76f4\u63a5\u7236\u4eb2\n\tif(x<=n)sl[x]=sl[c[x][0]]+sc[root[x]]+sl[c[x][1]];//x\u662froot[x]\u7684\u76f4\u63a5\u7236\u4eb2\n}\nvoid tagc(tag x,int p){\n\tif(!p)return ;\n\tapply(x,sc[p]),apply(x,v[p]),append(ctag[p],x);\n}\nvoid tagl(tag x,int p){\n\tif(!p)return ;\n\tapply(x,sl[p]),append(ltag[p],x);\n}//\u4e24\u4e2a\u7ef4\u62a4tag\u7684\u51fd\u6570\u4fee\u6539\u5230\u7684\u4fe1\u606f\u5b8c\u5168\u4e0d\u4ea4\uff0c\u4e25\u683c\u9075\u5faa\u4e86\u4ee5\u4e0a\u539f\u5219\nvoid dorev(int x){\n\tif(!x)return ;\n\tswap(c[x][0],c[x][1]),rev[x]^=1;\n}\nvoid pushdown(int x){\n\tif(x>n)tagc(ctag[x],x-n),tagl(ctag[x],x-n);//x+n\u662fx\u7684\u76f4\u63a5\u7236\u4eb2\n\tif(rev[x])dorev(c[x][0]),dorev(c[x][1]),rev[x]^=1;\n\ttagc(ctag[x],c[x][0]),tagc(ctag[x],c[x][1]),ctag[x]=e();\n\t//x\u662fc[x][0],c[x][1]\u7684\u76f4\u63a5\u7236\u4eb2\n\tif(x<=n)tagl(ltag[x],c[x][0]),tagl(ltag[x],c[x][1]),tagc(ltag[x],root[x]),ltag[x]=e();\n\t//x\u662froot[x]\u7684\u76f4\u63a5\u7236\u4eb2\n}//\u67d0\u4e2a\u70b9pushdown\u53ea\u4f1a\u5f71\u54cd\u5230\u5176\u76f4\u63a5\u5b50\u5b50\u7ed3\u6784\uff0c\u4e25\u683c\u9075\u5faa\u4e86\u4ee5\u4e0a\u539f\u5219\n```\n\n\u6709\u4e86 `ins,del,pushdown,pushup,splay`\uff0c\u5176\u5b83\u51fd\u6570\u5c31\u975e\u5e38\u597d\u5199\u4e86\uff0c\u4e0e\u666e\u901a LCT \u57fa\u672c\u65e0\u533a\u522b\u3002\n\n### \u4ee3\u7801\u5b9e\u73b0\n\n\u6ee1\u5206\u4ee3\u7801\uff1ahttps://www.luogu.com.cn/paste/uqeoa4uk\n\n\u957f\u5ea6\u4ec5\u4e3a 4.61kb\u3002\u622a\u81f3 2021.8.27 \u77ed\u4e8e\u5728\u7f51\u4e0a\u80fd\u627e\u5230\u7684\u6240\u6709 AC \u4ee3\u7801\u3002\n\n\u5355\u65cb\u7684\u7248\u672c\uff08\u53ef\u4ee5\u770b darkbzoj \u4e0a luosiyuan \u7684\u63d0\u4ea4\uff09\u66f4\u77ed\uff0c\u4f46\u4e0d\u786e\u5b9a\u6b63\u786e\u6027\u3002\n\n### \u4f18\u8d8a\u6027\n\n\u7531\u4e8e\u4e25\u683c\u800c\u6e05\u6670\u7684\u7236\u5b50\u7ed3\u6784\u5173\u7cfb\uff0c\u904d\u5386\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u5f02\u5e38\u5bb9\u6613\u3002\n\n\u53ea\u9700\u77ed\u77ed\u51e0\u884c\u4ee3\u7801\u5c31\u80fd\u5b8c\u6210\u904d\u5386\uff1a\n\n```cpp\nvoid dfs(int x){\n\tif(!x)return ;\n\tpushdown(x),dfs(c[x][0]),dfs(c[x][1]);\n\tif(x>n)dfs(x-n);\n\telse dfs(root[x]);\n\tpushup(x);\n}\n```\n\n### \u65f6\u95f4\u590d\u6742\u5ea6\n\nAccess \u8fc7\u7a0b\u4e2d\uff0c\u4e3a\u4e86\u628a\u4e00\u4e2a\u8282\u70b9\u4ece\u989d\u5916 Splay \u91cc\u5220\u9664\uff0c\u9700\u8981\u627e\u524d\u9a71\u540e\u7ee7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u590d\u6742\u5ea6\u53d8\u4e3a\u4e24\u4e2a log\uff08\u53ef\u80fd\u644a\u4e0d\u4e86\uff09\u3002\u56e0\u6b64\u590d\u6742\u5ea6\u4e0a\u754c\u662f $O((n+q)\\log^2 n)$\u3002\u5982\u679c\u4e0d\u91cd\u6784\uff0c\u5b9e\u9645\u901f\u5ea6\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\uff08$n,q=10^5$ \u7684\u6570\u636e\u9700\u8981 1.2s \u5de6\u53f3\uff09",
        "postTime": 1630039952,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u4e00\u79cd\u5bb9\u6613\u7406\u89e3\u3001\u4ee3\u7801\u7b80\u77ed\u7684 sone1 \u5b9e\u73b0"
    },
    {
        "content": "\u8fd9\u91cc\u662f\u4e00\u4e2a\u4eb2\u6c11**\u4e14\u6b63\u786e**\u7684 AAAT \u9898\u89e3\uff0c\u7740\u91cd\u4e8e\u7406\u89e3\u548c\u5b9e\u73b0\uff0c\u590d\u6742\u5ea6\u5206\u6790\u7684\u8bdd\u6709\u70b9\u80fd\u529b\u5c31\u53ef\u4ee5\u53bb\u5176\u4ed6\u5730\u65b9\u627e\u5230\u3002\uff08\u6b63\u786e\u6307\u4e0d\u50cf\u9694\u58c1 90 \u5206\u624b\u52a8\u9002\u5e94\u6570\u636e\uff09\n\n\u9996\u5148\u6709\u6362\u6839\uff0c\u8fd8\u6709\u6362\u7236\u4eb2\uff0c\u636e jerry3128 \u8bf4\u8fd9\u662f\u5f3a\u5236 Link\u3001Cut\uff0c\u5fc5\u987b\u4e0a\u52a8\u6001\u6811\uff0c\u90a3\u6211\u4eec\u5148\u4e0a\u4e00\u68f5\u52a8\u6001\u6811\u6765\u7ef4\u62a4\u5f62\u6001\u3002\n\n\u8003\u8651\u4fe1\u606f\u7684\u7ef4\u62a4\uff0c\u6211\u4eec\u7684 LCT \u53ef\u4ee5\u505a\u7684\u662f\u4ec0\u4e48\uff1fAccess\uff0c\u53ef\u4ee5\u4ee5\u4e00\u68f5 Splay \u7684\u5f62\u6001\u63d0\u53d6\u4e00\u6761\u94fe\u3002\n\n\u90a3\u4e48\u94fe\u52a0\u94fe\u6539\u94fe\u67e5\u6211\u4eec\u90fd\u80fd\u5904\u7406\u4e86\uff0c\u53ea\u9700\u8981\u7ed9 Splay \u4e0b\u653e\u57fa\u672c\u7684\u6807\u8bb0\u5373\u53ef\uff0c\u6b64\u9898\u5305\u542b\u8986\u76d6\u6807\u8bb0\u548c\u52a0\u6807\u8bb0\uff0c\u8fd9\u79cd\u4e00\u822c\u7684\u5957\u8def\u662f\u5148\u4e0b\u653e\u8986\u76d6\uff0c\u518d\u653e\u52a0\u6807\u8bb0\uff0c\u8986\u76d6\u6807\u8bb0\u4f1a\u6e05\u7a7a\u52a0\u6807\u8bb0\u3002\n\n\u518d\u8003\u8651\u5b50\u6811\u4fe1\u606f\uff0c\u540c\u6837\u7684\u6211\u4eec\u7528\u8fd9\u4e24\u79cd\u6807\u8bb0\u4e0b\u653e\u4fee\u6539\u64cd\u4f5c\uff0c\u6211\u4eec\u60f3\u5c06\u5b50\u6811\u7684\u6807\u8bb0\u4e0b\u653e\u4e0b\u53bb\uff0c\u90a3\u4e48\u5c31\u5f97\u7ed9\u6240\u6709\u7684\u865a\u513f\u5b50\u90fd\u6253\u4e0a\u6807\u8bb0\u3002\n\n\u5982\u679c\u66b4\u529b\u904d\u5386\u6253\u4e0a\u80af\u5b9a\u4e0d\u592a\u884c\uff0c\u865a\u513f\u5b50\u4e2a\u6570\u53ef\u80fd $O(n)$\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u4e86\u7528\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u5f80\u865a\u513f\u5b50\u4e22\u7684\u6807\u8bb0\u3002\n\n\u4e00\u79cd naive \u7684\u60f3\u6cd5\u5c31\u662f\u4e0a\u5e38\u7528\u7684\u7ebf\u6bb5\u6811\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u505a\u5230 $O(1)$ \u6253\u6807\u8bb0\uff0c$O(\\log)$ \u5c06\u4e00\u4e2a\u513f\u5b50\u4ece\u865a\u513f\u5b50\u4e2d\u53d6\u51fa\u6765\uff08\u5373\u53d8\u6210\u4e86\u5b9e\u513f\u5b50\uff09\uff0c$O(\\log)$ \u5c06\u4e00\u4e2a\u70b9\u63d2\u5165\u865a\u513f\u5b50\u4e2d\uff0c\u5e76\u4e14\u80fd\u4fdd\u8bc1\u6807\u8bb0\u548c\u4fe1\u606f\u7684\u6b63\u786e\u6027\u3002\n\n\u4f46\u662f\u4f17\u6240\u5468\u77e5 LCT \u672c\u8d28\u662f\u865a\u5b9e\u8fb9\u5256\u5206\uff0c\u865a\u5b9e\u513f\u5b50\u7684\u5207\u6362\u672c\u8eab\u5c31\u662f $O(\\log)$ \u7684\u590d\u6742\u5ea6\uff0c\u800c\u5957\u4e0a Splay \u540e\u8fd8\u662f $O(\\log)$ \u662f\u7531\u4e8e Splay \u7684\u52bf\u80fd\u662f\u5747\u644a\u7684\uff0c\u4e00\u6b21 Access \u4e2d Splay \u7684\u52bf\u80fd\u589e\u52a0\u603b\u548c\u4e3a $O(\\log)$ \u624d\u5e76\u4e0d\u5f71\u54cd\u590d\u6742\u5ea6\u3002\n\n\u800c\u7ebf\u6bb5\u6811\u5e76\u4e0d\u80fd\u8fd9\u6837\u644a\u590d\u6742\u5ea6\uff0c\u5b83\u5207\u6362\u4e00\u6b21\u513f\u5b50\u7684\u590d\u6742\u5ea6\u5c31\u662f $O(\\log)$\uff0c\u4e8e\u662f\u590d\u6742\u5ea6\u4e3a $O(\\log^2)$\uff0c\u4e0d\u592a\u884c\u3002\uff08\u5e76\u4e0d\u662f\u6307\u4e0d\u80fd\u505a\uff0cjerry3128 \u5df2\u5b9e\u73b0\u4e86\u8fd9\u79cd\u505a\u6cd5\uff0c\u53ea\u662f\u590d\u6742\u5ea6\u4e0d\u4f18\u79c0\uff09 \n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u79cd\u5728\u7ef4\u62a4\u865a\u513f\u5b50\u7684\u540c\u65f6\u80fd\u5747\u644a\u590d\u6742\u5ea6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53c2\u8003 LCT\uff0c\u4e00\u79cd\u81ea\u7136\u800c\u7136\u7684\u60f3\u6cd5\u5c31\u662f\u4e0a Splay\uff0c\u590d\u6742\u5ea6\u80fd\u644a\u8fdb\u4e00\u6b21 Access $O(\\log)$\u3002\n\n\u540c\u6837\u7684\u53ef\u4ee5\u4e0a\u5176\u4ed6\u53ef\u4ee5\u644a\u7684\u6570\u636e\u7ed3\u6784\u5982 Leafy Tree\uff0c\u597d\u50cf\u9694\u58c1\u7684\u9b54\u6539 LCT \u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\uff0c\u4f46\u4e0e\u672c\u9898\u89e3\u65e0\u5173\u3002\n\n\u505a\u6cd5\u4e5f\u5c31\u81ea\u7136\u800c\u7136\u7684\u51fa\u6765\u4e86\uff0c\u76f8\u5f53\u4e8e\u5728\u4e00\u822c\u7684 LCT \u4e0a\u52a0\u4e86 Splay \u6765\u7ef4\u62a4\u865a\u513f\u5b50\u7684\u6807\u8bb0\u4e0b\u653e\uff0c\u63a5\u4e0b\u6765\u8bb2\u4e24\u79cd\u5b9e\u73b0\uff1a\n\n------------\n\n\u5b9e\u73b0 1\uff1a\u6dfb\u52a0\u865a\u70b9\uff0c\u76f8\u5f53\u4e8e\u8f6c\u6bcf\u6761\u865a\u8fb9\u4e3a\u865a\u70b9\uff0c\u672c\u6765\u865a\u8fb9\u8fde\u63a5\u7684\u662f\u4e00\u68f5 Splay \u7684\u9876\u548c\u53e6\u4e00\u4e2a Splay \u7684\u67d0\u4e2a\u70b9\u3002\n\n\u73b0\u5728\u4e2d\u95f4\u591a\u4e86\u4e00\u4e2a\u865a\u70b9\uff0c\u6211\u4eec\u5c06\u865a\u70b9\u7528 Splay \u7684\u5f62\u6001\u5806\u8d77\u6765\uff0c\u4e5f\u5c31\u662f\u5806\u6210\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4f46\u64cd\u4f5c\u90fd\u50cf Splay \u90a3\u6837\u64cd\u4f5c\u3002\n\n\u8fd9\u6837\u7684\u8bdd\u4e00\u4e2a\u5b9e\u70b9\u4f1a\u6709\u4e24\u4e2a\u5b9e\u70b9\u513f\u5b50\uff0c\u4e00\u4e2a\u865a\u70b9\u513f\u5b50\uff0c\u865a\u70b9\u513f\u5b50\u5373\u4e3a\u865a\u70b9\u5806\u8d77\u6765\u7684 Splay \u7684\u6839\u3002\n\n\u4e00\u4e2a\u865a\u70b9\u6709\u4e24\u4e2a\u865a\u70b9\u513f\u5b50\uff0c\u4e00\u4e2a\u5b9e\u70b9\u513f\u5b50\uff0c\u5b9e\u70b9\u513f\u5b50\u5373\u4e3a\u865a\u8fb9\u8fde\u63a5\u7684\u90a3\u4e2a\u513f\u5b50\u3002\n\n\u5982\u679c\u4f60\u60f3\u66f4\u76f4\u89c2\u7684\u611f\u53d7\u7684\u8bdd\u53ef\u4ee5\u770b\u6210\u4e09\u53c9\u7684 LCT\uff0c\u5176\u4e2d\u4e24\u53c9\u662f\u6b63\u5e38\u7684 Splay\uff0c\u53e6\u4e00\u53c9\u662f\u7279\u6b8a\u7684\u8fde\u63a5\u53e6\u4e00\u79cd\u70b9\u7684\u8fb9\u3002\n\n\u7ed3\u6784\u5927\u6982\u5c31\u662f\u8fd9\u6837\uff0c\u4ee3\u7801\u5b9e\u73b0\u662f\u7279\u522b\u65b9\u4fbf\u7684\uff0c\u53ef\u4ee5\u907f\u5f00\u5f88\u591a\u7279\u6b8a\u5904\u7406\uff0c\u4e3b\u8981\u539f\u56e0\u662f\u865a\u70b9\u548c\u5b9e\u70b9\u76f4\u63a5\u76f8\u8fde\uff0c\u4fe1\u606f\u7684\u4e0a\u4f20\u548c\u6807\u8bb0\u7684\u4e0b\u653e\u50cf\u6b63\u5e38\u7684 Splay \u505a\u5373\u53ef\u3002\n\n\u901a\u5e38\u7684\u5b9e\u73b0\u53ef\u80fd\u5199\u6210\u56db\u53c9\u6811\uff0c\u5373\u865a\u5b9e\u513f\u5b50\u90fd\u4e24\u4e2a\uff0c\u65e2\u8ba9\u865a\u5b9e\u513f\u5b50\u7ed3\u6784\u5dee\u4e0d\u591a\u65b9\u4fbf\u5199\u4ee3\u7801\uff0c~~\u53c8\u53c2\u8003\u4e86 Top Tree \u7684\u5199\u6cd5\u8ba9\u5e38\u6570\u66f4\u5c0f~~\u3002\uff08\u5176\u5b9e\u5e76\u4e0d\u6e05\u695a\u5e38\u6570\u4f1a\u600e\u4e48\u6837\uff0c\u53ef\u80fd\u591a\u7ef4\u62a4\u4e86\u4e00\u53c9\u53ef\u80fd\u4f1a\u53d8\u5927\u5427\uff1f\uff09\n\n\u5177\u4f53\u7684\uff0cAccess \u8981\u505a\u7684\u5c31\u662f\u5728\u5b9e\u513f\u5b50\u91cc\u9762 Splay \u5230\u7236\u4eb2\u662f\u865a\u513f\u5b50\uff0c\u518d Splay \u865a\u513f\u5b50\u5230\u5b9e\u513f\u5b50\u4e0b\u9762\u66f4\u65b0\u4e0b\u653e\u6807\u8bb0\u3002\n\n\u4ee3\u7801\u7684\u8bdd\u7528 AAAT \u505a\u8fd9\u9053\u9898\u7684\u5f88\u591a\u4eba\u90fd\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u53cd\u6b63\u6211\u89c1\u5230\u7684\u5927\u591a\u662f\u8fd9\u6837\uff0c\u968f\u4fbf\u53bb\u8d3a\u4e00\u4efd\u4ee3\u7801\u53c2\u8003\u5373\u53ef\u3002\n\n------------\n\n\u5b9e\u73b0 2\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u865a\u8fb9\u72ec\u7acb\u7684\u7ef4\u62a4\u4e00\u68f5 Splay\uff0c\u4e0e\u4e0a\u9762\u7684\u533a\u522b\u5728\u4e8e\u865a\u8fb9\u7684 Splay \u548c LCT \u4e2d\u7684\u5b8c\u5168\u72ec\u7acb\u5f00\u6765\uff0c\u4e92\u76f8\u4e0d\u5f71\u54cd\u3002\n\n\u4f18\u52bf\u5c31\u662f\u521a\u8bf4\u7684\uff0c\u5b8c\u5168\u72ec\u7acb\uff0c\u53ef\u4ee5\u5206\u5f00\u7ef4\u62a4\u4fe1\u606f~~\u548c\u8c03\u9519~~\u3002\n\n\u52a3\u52bf\u5c31\u662f\u6709\u4ebf\u4e9b\u7279\u6b8a\u5904\u7406\uff0c\u539f\u56e0\u662f\u865a\u70b9\u548c\u5b9e\u70b9\u4e0d\u76f4\u63a5\u76f8\u8fde\uff0c\u6240\u4ee5\u865a\u5b9e\u5207\u6362\u7684\u65f6\u5019\u5c31\u5f97\u624b\u52a8\u7279\u6b8a\u5904\u7406\uff0c~~\u4e24\u4e2a\u4e92\u76f8\u72ec\u7acb\u7684 Splay \u4e92\u76f8\u5207\u6362\u5c31\u662f\u4e24\u500d\u7684\u7801\u91cf~~\u3002\n\n\u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff1a\u4ee3\u7801\u601d\u8def\u662f\u6e05\u6670\u7684\uff0c\u4ee3\u7801\u5b9e\u73b0\u662f\u6bd2\u7624\u7684\u3002\n\n\u73b0\u8eab\u8bf4\u6cd5\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/b1lav7et.png)\n\n------------\n\n\u9009\u62e9\u7b2c\u4e8c\u79cd\u5b9e\u73b0\u8fd8\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u6211\u5e2e\u4f60\u626b\u4e86\u4e00\u5708\u96f7\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u6211\u8d70\u7684\u8def\u7ebf\u6765\u505a\uff0c**\u4f46\u6211\u7684\u5b9e\u73b0\u4e5f\u53ea\u662f\u4e00\u79cd\u5e73\u51e1\u7684\u5b9e\u73b0**\uff0c\u4f60\u53ef\u4ee5\u6709\u66f4\u795e\u4ed9\u7684\u3002\n\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u662f\u6211\u5e73\u51e1\u7684\u5b9e\u73b0\uff0c\u5b9e\u73b0\u65b9\u6cd5\u5e76\u4e0d\u552f\u4e00\u3002\n\n\u9996\u5148\u8003\u8651\u5b9e Splay\uff0c\u8981\u4e0a\u4f20\u7684\u4fe1\u606f\u5206\u4e3a\u4e24\u79cd\uff0c\u5f53\u524d\u8fd9\u68f5\u5b9e Splay \u7684\u4fe1\u606f\u548c\uff0c\u548c\u8fd9\u68f5\u5b9e Splay **\u4e0b**\uff08\u4e0d\u5305\u542b\u5f53\u524d\u7684\u5b9e Splay\uff09\u6240\u6709\u7684\u4fe1\u606f\u548c\u3002\n\n\u4e00\u68f5 Splay \u5176\u5b9e\u4ee3\u8868\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u4e5f\u5c31\u76f8\u5f53\u4e8e\u5228\u5f00\u4e00\u6761\u94fe\u7684\u5b50\u6811\u4fe1\u606f\u548c\uff0c\u7531\u6240\u6709\u5b9e\u513f\u5b50\u7684\u865a Splay \u4e0a\u4f20\u800c\u6765\u3002\n\n\u8981\u7ef4\u62a4\u8fd9\u4e24\u4e2a\u4fe1\u606f\u6211\u4eec\u8fd8\u5f97\u7ef4\u62a4\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u865a\u513f\u5b50\u7684\u4fe1\u606f\u548c\uff0c\u7531\u5b83\u5bf9\u5e94\u7684\u865a\u8fb9 Splay \u7684\u6839\u4f20\u4fe1\u606f\u4e0a\u6765\u3002\n\n\u7136\u540e\u4e0a\u4f20\u7684\u4fe1\u606f\u5c31\u5b8c\u4e86\uff0c\u53ea\u4e0d\u8fc7\u6709 $\\operatorname{sum},\\max,\\min$ \u8fd9\u4e09\u79cd\u4fe1\u606f\uff0c~~\u4e09\u500d\u4e5f\u5c31\u590d\u5236\u4e24\u6b21~~\u3002\n\n\u4e0b\u653e\u6807\u8bb0\u597d\u50cf\u8bf4\u8fc7\u4e86\uff0c\u5148\u4e0b\u653e\u8986\u76d6\u6807\u8bb0\uff0c\u518d\u653e\u52a0\u6807\u8bb0\uff0c\u8986\u76d6\u6807\u8bb0\u4f1a\u6e05\u7a7a\u52a0\u6807\u8bb0\uff0c\u52a0\u6807\u8bb0\u4e0d\u5bf9\u8986\u76d6\u6807\u8bb0\u9020\u6210\u5f71\u54cd\u3002\n\n\u7136\u540e\u5c31\u662f\u865a\u5b9e\u5207\u6362\u7684\u7ec6\u8282\uff0c\u6211\u4eec Access \u4e00\u76f4\u90fd\u5728\u5b9e Splay \u4e0a\u8d70\uff0c\u5176\u5b9e\u8981\u8003\u8651\u7684\u5c31\u662f\u4e00\u6b21\u5b9e Splay \u4e24\u8fb9\u865a Splay \u4e0a\u7684\u53d8\u5316\u3002\n\n\u9996\u5148\u662f\u5bf9\u4e0a\u9762\u4e00\u68f5 Splay \u7684\u5f71\u54cd\uff0c\u5f53\u524d\u7684 Splay \u6839\u53d8\u4e86\uff0c\u6211\u4eec\u5148\u628a\u5f53\u524d\u6839\u5728\u865a Splay \u4e0a\u65cb\u5230\u9876\uff0c\u7136\u540e\u628a\u5f53\u524d\u6839\u66ff\u6362\u4e3a\u65b0\u6839\u3002\n\n\u5bf9\u4e0b\u9762\u4e00\u68f5 Splay \u7684\u5f71\u54cd\u5c31\u662f\u559c\u95fb\u4e50\u89c1\u7684\u865a Splay \u63d2\u5165\u5220\u9664\u57fa\u672c\u64cd\u4f5c\u3002\n\n\u8fd8\u6709\u5c31\u662f\u865a\u5b9e\u8282\u70b9\u6709\u6240\u4e0d\u540c\u7684\u7ec6\u8282\uff0c\u5b9e\u70b9\u4e0b\u4f20\u6807\u8bb0\u8981\u4fee\u6539\u5f53\u524d\u503c\uff0c\u4f46\u865a\u70b9\u627f\u8f7d\u7684\u5176\u5b9e\u53ea\u662f\u6807\u8bb0\uff0c\u800c\u5e76\u975e\u503c\uff0c\u6240\u4ee5\u53ea\u662f\u4fee\u6539\u4fe1\u606f\uff0c\u8981\u6ce8\u610f\u4e0b\u4f20\u7684\u533a\u522b\u3002\n\n\u6700\u540e\u5c31\u662f\u64cd\u4f5c\u7684\u7ec6\u8282\uff0c\u4e5f\u5c31\u6362\u7236\u4eb2\u6709\u70b9\u64cd\u4f5c\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u5224\u65ad\u540c\u4e00\u4e2a\u5b50\u6811\uff0c\u4e5f\u5c31\u6d89\u53ca\u5230 Splay\uff0c\u8bb0\u5f97\u8ddf\u7740\u4fee\u6539\u865a Splay \u91cc\u9762\u7684\u4fe1\u606f\u5373\u53ef\u3002\n\n\u6700\u540e\u7684\u6700\u540e\uff0c\u5efa\u8bae\u5b9e Splay \u5148\u5199 LCT \u6216\u8d3a LCT \u677f\u5b50\uff0c\u865a Splay \u7528 assert \u628a\u7ed3\u6784\u4e0a\u7684\u8981\u6c42\u6446\u51fa\u6765\uff0c\u57fa\u672c\u7ed3\u6784\u4e0a\u5c31~~\u4e0d\u4f1a\u9519~~\u5f88\u597d\u6539\u4e86\u3002\n\n\u7136\u540e\u6807\u8bb0\u548c\u4fe1\u606f\u53ea\u80fd\u8f93\u51fa\u4e2d\u95f4\u53d8\u91cf\u6216\u53c2\u8003\u9898\u89e3\u6539\u6539\u3002\n\n\u8fd9\u91cc\u8865\u4e00\u4e2a\u4e0b\u653e\u6807\u8bb0\u7684\u7ec6\u8282\uff0c\u636e\u8bf4\u672c\u673a\u623f\u6709\u4e00\u4e2a90\u5206 `WA on 8` \u7684\u662f\u56e0\u4e3a\u8fd9\u91cc\u6302\u4e86\uff1a\n\n\u5982\u679c\u672c\u5b9e Splay \u91cc\u9762\u6ca1\u6709\u865a\u513f\u5b50\u4e86\u5c31\u4e0d\u80fd\u52a8\u6574\u4e2a\u5f53\u524d Splay \u4e0b\u7684\u4fe1\u606f\uff0c\u5982\u679c\u672c\u8282\u70b9\u6ca1\u6709\u865a\u513f\u5b50\u5c31\u4e0d\u80fd\u52a8\u865a\u513f\u5b50\u4fe1\u606f\u3002\n\n\u5982\u679c\u52a8\u4e86\u7684\u8bdd\u53ef\u80fd\u51fa\u73b0 $\\pm\\infty\\to v$\uff0c\u5176\u4e2d $v$ \u662f\u8d4b\u503c\u64cd\u4f5c\u7684\u503c\u3002\n\n\u6211\u597d\u50cf\u57280\u5206 WA \u7684\u65f6\u5019\u5c31\u626b\u5230\u4e86\u8fd9\u4e2a\u96f7\u5e76\u6392\u6389\u4e86\uff0c\u6211\u6539\u51fa\u6765\u540e\u5728\u673a\u623f\u91cc\u9884\u8a00\u4e86\u4e00\u6ce2\u8fd9\u4e2a\u5751\u5f88\u5927\u80fd\u9677\u4e00\u8f66\u4eba\u7ed3\u679c\u771f\u4e2d\u4e86\u3002\u3002\u3002\n\n[\u4ee3\u7801](https://www.luogu.com.cn/paste/iarde391)\uff0c\u5982\u679c\u6709\u4e0d\u6e05\u695a\u6211\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5199\u7684\uff0c\u6216\u662f\u6211\u6ca1\u8bf4\u6e05\u695a\u7684\uff0c\u90fd\u53ef\u4ee5\u6765\u95ee\u6211\u3002",
        "postTime": 1630051923,
        "uid": 158948,
        "name": "\u7ea6\u745f\u592b\u7528\u8111\u73a9",
        "ccfLevel": 0,
        "title": "P5649 Sone1"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5649)  \n~~TopTree\u7684\u677f\u5b50\u600e\u4e48\u80fd\u7528TopTree\u6765\u5199\u5462\uff1f~~   \n\u5ba3\u4f20\u4e00\u4e2a\u5e76\u975e AAAT \u7684\u80fd\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u9b54\u6539 LCT \u505a\u6cd5   \n\u66f4\u8be6\u7ec6\u7684\u4ecb\u7ecd\u4e0e\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a[cnblog](https://www.cnblogs.com/Y-B-X/p/14939291.html) [\u6d1b\u8c37blog](https://www.luogu.com.cn/blog/Y-B-X/zhi-chi-zi-shu-cao-zuo-di-dong-tai-shu-mo-gai-lct)   \n\u8003\u8651\u7528 splay \u7ef4\u62a4\u865a\u513f\u5b50\uff0c  \n\u4f46\u4e8b\u5b9e\u4e0a\u5982\u679c\u5355\u7eaf\u5730\u8ba9\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u4e00\u4e2a\u865a\u62df\u8282\u70b9\u5728\u5bf9\u5e94\u7684\u7ef4\u62a4\u865a\u513f\u5b50\u7684 splay \u4e2d\uff0c   \n\u50cf AAAT \u4e00\u6837\u5730\u5199\uff0c\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u4fdd\u8bc1\u5355\u6b21 access \u65f6\u95f4\u590d\u6742\u5ea6\u3002   \n\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u5220\u9664\u8282\u70b9\u65f6\u9700\u5c06\u524d\u9a71\uff08\u540e\u7ee7\uff09\u627e\u51fa\u6765\u518d\u5220\u3002    \n\u501f\u9274\u4e00\u4e0b Tarjan \u7684 TopTree \u8bba\u6587\uff0c\u4e0d\u96be\u53d1\u73b0\u53e6\u4e00\u79cd\u65b9\u6cd5    \n\u5c31\u662f\u628a\u865a\u513f\u5b50 splay \u4e2d\u7684\u771f\u6b63\u4ee3\u8868\u539f\u5148 LCT \u4e2d\u4fe1\u606f\u7684\u70b9\u53ea\u8ba9\u5b83\u4eec\u5728\u53f6\u5b50\u7ed3\u70b9\u4e0a    \n\u7136\u540e\u7528\u4e00\u4e9b\u8f85\u52a9\u8282\u70b9\u4e32\u8d77\u6765\uff0c\u6784\u6210\u4e00\u4e2a\u7c7b\u4f3c leafytree \u7684\u7ed3\u6784     \n\u82e5\u5728\u5220\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u7531\u4e8e\u5176\u6ca1\u6709\u5de6\u53f3\u513f\u5b50\uff0c\u76f4\u63a5\u8fde\u5e26\u4ed6\u7684\u7236\u8282\u70b9\u4ece\u6574\u4e2a splay \u4e2d\u79fb\u9664\uff0c  \n\u518d\u5c06\u5176\u539f\u5148\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u65cb\u5230\u6839\uff0c\u66f4\u65b0\u4e00\u4e0b\u5373\u53ef\u3002   \n\u540c\u65f6\u82e5\u662f\u6362\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u540c\u6837\u76f4\u63a5\u6539\u7136\u540e\u65cb\u5230\u6839\u66f4\u65b0\u4fe1\u606f\uff0c\u5341\u5206\u65b9\u4fbf\u3002   \n\u800c\u8fd9\u6837\u662f\u53ef\u4ee5\u4fdd\u8bc1\u5355\u6b21 access \u662f\u5747\u644a\u65f6\u95f4\u4e3a\u4e00\u4e2a log \u7684\uff0c\u5177\u4f53\u8bc1\u660e\u53c2\u89c1\u4e0a\u9762\u7684\u94fe\u63a5\u3002   \n\n\u56de\u5230\u8fd9\u9898\uff0c\u7531\u4e8e\u9898\u4e2d\u6807\u8bb0\u4f17\u591a\uff0c\u4e0b\u9762\u5177\u4f53\u8bf4\u660e\uff1a \n\n#### \u8def\u5f84\u6807\u8bb0 \n\u7531\u4e8e\u8def\u5f84\u4fee\u6539\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5b50\u6811\u4e2d\u5176\u4ed6\u8def\u5f84\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u9700\u8981\u5728 pushup \u65f6\u5904\u7406\u51fa  \n\u6bcf\u4e2a\u70b9\u5728 LCT \u7684 splay \u4e2d\u7684\u5b50\u6811\u7684\u5168\u90e8\u865a\u513f\u5b50\u4fe1\u606f\uff0c  \n\u8fd9\u6837\u624d\u80fd\u5728\u8def\u5f84\u6807\u8bb0\u4e2d\u5feb\u901f\u5f97\u51fa\u6bcf\u4e2a\u70b9\u4fee\u6539\u540e\u7684\u5b50\u6811\u4fe1\u606f\u3002  \n\n#### \u5b50\u6811\u6807\u8bb0 \n\u5b50\u6811\u6807\u8bb0\u5904\u7406\u65b9\u6cd5\u5e76\u4e0d\u80fd\u76f4\u63a5\u7b80\u5355\u5730\u66f4\u6539\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u4fe1\u606f\uff0c  \n\u4e0d\u7136\u5f88\u5bb9\u6613\u5e94\u5904\u7406\u4e0d\u5f53\u800c\u51fa\u5927\u95ee\u9898\u3002  \n\u4e3a\u4e86\u907f\u514d\u4e0e\u8def\u5f84\u6807\u8bb0\u5f04\u6df7\uff0c\u6700\u597d\u662f\u5c06\u5176\u62c6\u6210\u4e24\u4e2a\u6807\u8bb0\uff0c  \n\u4e00\u4e2a\u4fee\u6539\u8def\u52b2\uff0c\u4e00\u4e2a\u4fee\u6539\u5b50\u6811\u4e2d\u9664\u8def\u5f84\u5916\u7684\u5176\u4ed6\u503c\u3002  \n\u5728\u6bcf\u4e2a\u70b9\u88ab\u6253\u4e0a\u5b50\u6811\u6807\u8bb0\u65f6\u540c\u65f6\u5c06\u5176\u865a\u513f\u5b50\u7684 splay \u6253\u4e0a\u6807\u8bb0\u3002  \n\u5728\u865a\u513f\u5b50\u7684 splay \u4e2d\u88ab\u6253\u4e0a\u6807\u8bb0\u7684\u53f6\u5b50\u8282\u70b9\u8981\u5c06\u6807\u8bb0\u4f20\u51fa\u7ed9 LCT \u4e2d\u7684 splay \u3002  \n\u4e3a\u4e86\u8ba9\u6807\u8bb0\u4e0d\u80fd\u4e00\u6b21\u8fde\u7eed\u4f20\u6765\u4f20\u53bb\uff0c\u8981\u7ed9\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684\u865a\u513f\u5b50\u7684 splay \u4e00\u4e2a\u4e0d\u52a8\u7684\u6839\u8282\u70b9\u3002  \n\n#### \u52a0\u4e0e\u8986\u76d6\u6807\u8bb0\n\u65e0\u8bba\u662f\u8def\u5f84\u8986\u76d6\u8fd8\u662f\u5bf9\u5b50\u6811\u4e2d\u9664\u8def\u5f84\u5916\u7684\u4fe1\u606f\u8986\u76d6\u65f6\uff0c\u4f1a\u5c06\u52a0\u7684\u6807\u8bb0\u62b9\u53bb\u3002  \n\u4f46\u8986\u76d6\u5b8c\u540e\u51fa\u73b0\u7684\u52a0\u7684\u6807\u8bb0\u4ecd\u7136\u751f\u6548\u3002  \n\u4e8e\u662f\u8981\u5728\u6253\u8986\u76d6\u6807\u8bb0\u65f6\u8981\u5c06\u52a0\u7684\u6807\u8bb0\u6e05\u7a7a\uff0c  \npushdown \u65f6\u5148\u4f20\u8986\u76d6\u7684\u6807\u8bb0\u518d\u4f20\u52a0\u7684\u6807\u8bb0\u5373\u53ef\u3002  \n\u800c\u81f3\u4e8e\u8def\u5f84\u6807\u8bb0\u4e0e\u5b50\u6811\u4e2d\u9664\u8def\u5f84\u5916\u7684\u6807\u8bb0\u4e92\u4e0d\u5f71\u54cd\uff0c\u987a\u5e8f\u968f\u610f\u3002  \n\n ####  \u4e00\u4e2a\u7ec6\u8282\n\u5728\u7ef4\u62a4\u865a\u513f\u5b50\u7684 splay \u4e2d\uff0c\u8f85\u52a9\u8282\u70b9\u4f17\u591a\uff0c\u641e\u4e0d\u51c6\u5c31\u4f1a\u51fa\u73b0\u5404\u79cd\u95ee\u9898\u3002  \n\u5728\u6807\u8bb0\u4e0b\u4f20\u65f6\uff0c\u5c24\u5176\u662f\u8986\u76d6\u6807\u8bb0\uff0c\u9700\u770b\u597d\u80fd\u4e0d\u80fd\u7ed9\u8fd9\u4e2a\u8282\u70b9\u4e00\u4e2a\u6700\u5c0f\u6216\u6700\u5927\u6743\u503c\u3002  \n\n### \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+10;\nconst int inf=0x7fffffff;\nint n,m,x,y,opt,root;int v,ans;char ch;\nint son[N][2],anc[N],sz[N][3],rt[N],rev[N];\nint sum[N][3],w[N],add[N][2],cov[N][2],mn[N][3],mx[N][3];\nvoid read(int &x){\n\tx=0;ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+ch-'0',ch=getchar();\n}\nvoid write(int x){\n\tif(x>=10)write(x/10);\n\tputchar('0'+x%10);\n}\nvoid add_(int x,int v,bool b);\nvoid cov_(int x,int v,bool b);\nstruct leafy_Splay{\n\tint son[N<<2][2],anc[N<<2],sz[N<<2],wsz[N<<2],tot;queue<int> q;\n\tint mn[N<<2],mx[N<<2],wmn[N<<2],wmx[N<<2],sum[N<<2],wsum[N<<2],add[N<<2],cov[N<<2];\n\tvoid init(int x){\n\t\tmx[x]=wmx[x]=-inf;\n\t\tmn[x]=wmn[x]=cov[x]=inf;\n\t\tson[x][0]=son[x][1]=anc[x]=sz[x]=wsz[x]=sum[x]=wsum[x]=add[x]=0;\n\t}\n\tvoid add_1(int x,int v){\n\t\tadd[x]+=v;\n\t\tif(sz[x])sum[x]+=sz[x]*v,mn[x]+=v,mx[x]+=v;\n\t\tif(x<=n)wsum[x]+=wsz[x]*v,wmn[x]+=v,wmx[x]+=v,add_(x,v,1),add_(x,v,0);\n\t}\n\tvoid cov_1(int x,int v){\n\t\tcov[x]=v;add[x]=0;\n\t\tif(sz[x])sum[x]=sz[x]*v,mn[x]=mx[x]=v;\n\t\tif(x<=n)wsum[x]=wsz[x]*v,wmn[x]=wmx[x]=v,cov_(x,v,1),cov_(x,v,0);\n\t}\n\tvoid fix(int x){\n\t\tif(!x)return;\n\t\tsum[x]=sum[son[x][0]]+sum[son[x][1]]+wsum[x];\n\t\tsz[x]=sz[son[x][0]]+sz[son[x][1]]+wsz[x];\n\t\tmn[x]=min(min(mn[son[x][0]],mn[son[x][1]]),wmn[x]);\n\t\tmx[x]=max(max(mx[son[x][0]],mx[son[x][1]]),wmx[x]);\n\t}\n\tbool p(int x){return son[anc[x]][1]==x;}\n\tint newnode(){\n\t\tif(!q.empty()){\n\t\t\tint x=q.front();\n\t\t\treturn q.pop(),x;\n\t\t}\n\t\treturn init(++tot),tot;\n\t}\n\tvoid pushdown(int x){\n\t\tif(cov[x]!=inf){\n\t\t\tif(son[x][0])cov_1(son[x][0],cov[x]);\n\t\t\tif(son[x][1])cov_1(son[x][1],cov[x]);\n\t\t\tcov[x]=inf;\n\t\t}\n\t\tif(add[x]){\n\t\t\tif(son[x][0])add_1(son[x][0],add[x]);\n\t\t\tif(son[x][1])add_1(son[x][1],add[x]);\n\t\t\tadd[x]=0;\n\t\t}\n\t}\n\tvoid pushall(int x){\n\t\tif(anc[x])pushall(anc[x]);\n\t\tpushdown(x);\n\t}\n\tvoid rotate(int x){\n\t\tint y=anc[x],xx=anc[y];\n\t\tbool b=p(x),bb=p(y);\n\t\tanc[x]=xx;\n\t\tif(xx)son[xx][bb]=x;\n\t\tson[y][b]=son[x][b^1];\n\t\tanc[son[x][b^1]]=y;\n\t\tson[x][b^1]=y;\n\t\tanc[y]=x;\n\t\tfix(y);\n\t\tfix(x);\n\t\tfix(xx);\n\t}\n\tvoid splay(int x,int y){\n\t\tpushall(x);\n\t\tfor(int i=anc[x];i=anc[x],i!=y;rotate(x))if(anc[i]!=y){\n\t\t\tif(p(x)==p(i))rotate(i);\n\t\t\telse rotate(x);\n\t\t}\n\t}\n\tvoid ins(int x,int y,int sum_,int sz_,int mn_,int mx_){\n\t\twsum[x]=sum_,wsz[x]=sz_,wmn[x]=mn_,wmx[x]=mx_;fix(x);\n\t\tint tmp=rt[y],f=0;pushdown(tmp);\n\t\tif(!son[rt[y]][0])return anc[son[rt[y]][0]=x]=rt[y],fix(rt[y]);\n\t\twhile(1){\n\t\t\tif(!tmp){\n\t\t\t\ttmp=newnode();\n\t\t\t\tanc[son[anc[f]][p(f)]=tmp]=anc[f];\n\t\t\t\tson[tmp][x>f]=x;anc[x]=tmp;\n\t\t\t\tson[tmp][x<f]=f;anc[f]=tmp;\n\t\t\t\tfix(f);fix(tmp);fix(anc[tmp]);\n\t\t\t\treturn splay(tmp,rt[y]);\n\t\t\t}\n\t\t\tpushdown(tmp);\n\t\t\tf=tmp;tmp=son[tmp][x>tmp];\n\t\t}\n\t}\n\tvoid clear(int x){init(x);if(x>2*n)q.push(x);}\n\tvoid del(int x,int y){\n\t\tif(anc[x]==rt[y])return son[rt[y]][0]=0,fix(rt[y]),clear(x);\n\t\tint yy=anc[x],xx=anc[yy];bool b=p(x),bb=p(yy);\n\t\tif(xx==rt[y]){\n\t\t\tanc[son[rt[y]][0]=son[yy][b^1]]=rt[y];\n\t\t\tclear(x),clear(yy),fix(rt[y]);\n\t\t\treturn;\n\t\t}\n\t\tanc[son[xx][bb]=son[yy][b^1]]=xx;\n\t\tclear(x);clear(yy);fix(xx);splay(xx,rt[y]);fix(rt[y]);\n\t}\n\tvoid display(int x,int xx,int sum_,int sz_,int mn_,int mx_,int y){\n\t\twsum[xx]=sum_,wsz[xx]=sz_,wmn[xx]=mn_,wmx[xx]=mx_;fix(xx);\n\t\tint yy=anc[x];\n\t\tanc[son[yy][p(x)]=xx]=yy;\n\t\tclear(x);fix(yy);if(yy!=rt[y])splay(yy,rt[y]);fix(rt[y]);\n\t}\n}S;\nvoid update(int x){\n\tsz[x][2]=sz[x][0]+sz[x][1];\n\tsum[x][2]=sum[x][0]+sum[x][1];\n\tmn[x][2]=min(mn[x][0],mn[x][1]);\n\tmx[x][2]=max(mx[x][0],mx[x][1]);\n}\nvoid rev_(int x){rev[x]^=1;son[x][0]^=son[x][1]^=son[x][0]^=son[x][1];}\nvoid add_(int x,int v,bool b){\n\tadd[x][b]+=v;\n\tif(sz[x][b])sum[x][b]+=sz[x][b]*v,mn[x][b]+=v,mx[x][b]+=v;\n\tif(b)S.add_1(rt[x],v);\n\telse w[x]+=v;\n\tupdate(x);\n}\nvoid cov_(int x,int v,bool b){\n\tcov[x][b]=v;add[x][b]=0;\n\tif(sz[x][b])sum[x][b]=sz[x][b]*v,mn[x][b]=mx[x][b]=v;\n\tif(b)S.cov_1(rt[x],v);\n\telse w[x]=v;\n\tupdate(x);\n}\nbool p(int x){return son[anc[x]][1]==x;}\nbool isroot(int x){return son[anc[x]][0]!=x&&son[anc[x]][1]!=x;}\nvoid S_display(int x,int xx,int y){\n\tS.display(x,xx,sum[xx][2],sz[xx][2],mn[xx][2],mx[xx][2],y);\n}\nvoid S_ins(int x,int y){\n\tS.ins(x,y,sum[x][2],sz[x][2],mn[x][2],mx[x][2]);\n}\nvoid fix(int x){\n\tif(!x)return;\n\t\n\tsz[x][0]=sz[son[x][0]][0]+sz[son[x][1]][0]+1;\n\tsz[x][1]=sz[son[x][0]][1]+sz[son[x][1]][1]+S.sz[rt[x]];\n\t\n\tsum[x][0]=sum[son[x][0]][0]+sum[son[x][1]][0]+w[x];\n\tsum[x][1]=sum[son[x][0]][1]+sum[son[x][1]][1]+S.sum[rt[x]];\n\t\n\tmn[x][0]=min(min(mn[son[x][0]][0],mn[son[x][1]][0]),w[x]);\n\tmn[x][1]=min(min(mn[son[x][0]][1],mn[son[x][1]][1]),S.mn[rt[x]]);\n\t\n\tmx[x][0]=max(max(mx[son[x][0]][0],mx[son[x][1]][0]),w[x]);\n\tmx[x][1]=max(max(mx[son[x][0]][1],mx[son[x][1]][1]),S.mx[rt[x]]);\n\t\n\tupdate(x);\n}\nvoid pushdown(int x){\n\tif(rev[x]){\n\t\tif(son[x][0])rev_(son[x][0]);\n\t\tif(son[x][1])rev_(son[x][1]);\n\t\trev[x]=0;\n\t}\n\tif(cov[x][0]!=inf){\n\t\tif(son[x][0])cov_(son[x][0],cov[x][0],0);\n\t\tif(son[x][1])cov_(son[x][1],cov[x][0],0);\n\t\tcov[x][0]=inf;\n\t}\n\tif(add[x][0]){\n\t\tif(son[x][0])add_(son[x][0],add[x][0],0);\n\t\tif(son[x][1])add_(son[x][1],add[x][0],0);\n\t\tadd[x][0]=0;\n\t}\n\tif(cov[x][1]!=inf){\n\t\tif(son[x][0])cov_(son[x][0],cov[x][1],1);\n\t\tif(son[x][1])cov_(son[x][1],cov[x][1],1);\n\t\tcov[x][1]=inf;\n\t}\n\tif(add[x][1]){\n\t\tif(son[x][0])add_(son[x][0],add[x][1],1);\n\t\tif(son[x][1])add_(son[x][1],add[x][1],1);\n\t\tadd[x][1]=0;\n\t}\n}\nvoid pushall(int x){\n\tif(!isroot(x))pushall(anc[x]);\n\tpushdown(x);\n}\nvoid pushall_(int x){\n\tif(!isroot(x))pushall_(anc[x]);\n\telse if(anc[x]){\n\t\tpushall_(anc[x]);\n\t\tS.pushall(x);\n\t}\n\tpushdown(x);\n}\nvoid rotate(int x){\n\tint y=anc[x],xx=anc[y];\n\tbool b=p(x),bb=p(y);\n\tanc[x]=xx;\n\tif(!isroot(y))son[xx][bb]=x;\n\tson[y][b]=son[x][b^1];\n\tanc[son[x][b^1]]=y;\n\tson[x][b^1]=y;\n\tanc[y]=x;\n\tfix(y);\n\tfix(x);\n\tfix(xx);\n}\nint findrt(int x){\n\tif(isroot(x))return x;\n\treturn findrt(anc[x]);\n}\nvoid splay(int x){\n\tpushall(x);\n\tint y=findrt(x);\n\tif(anc[y]&&x!=y)S.display(y,x,sum[y][2],sz[y][2],mn[y][2],mx[y][2],anc[y]);\n\tfor(int i=anc[x];i=anc[x],!isroot(x);rotate(x))if(!isroot(i)){\n\t\tif(p(i)==p(x))rotate(i);\n\t\telse rotate(x);\n\t}\n}\nint access(int x){\n\tint y=0;\n\tpushall_(x);\n\tfor(;x;y=x,x=anc[x]){\n\t\tsplay(x);\n\t\tif(y&&son[x][1])S_display(y,son[x][1],x);\n\t\telse if(!y&&son[x][1])S_ins(son[x][1],x);\n\t\telse if(y&&!son[x][1])S.del(y,x);\n\t\tson[x][1]=y;fix(x);\n\t}\n\treturn y;\n}\nvoid makeroot(int x){\n\taccess(x);\n\tsplay(x);\n\trev_(x);\n}\nvoid split(int x,int y){\n\tmakeroot(x);\n\taccess(y);\n\tsplay(y);\n}\nvoid link(int x,int y){\n\tsplit(x,y);\n\tanc[x]=y;\n\tS_ins(x,y);\n\tfix(y);\n}\nvoid subtree_add(int x,int v){\n\tsplit(root,x);\n\tw[x]+=v;\n\tS.add_1(rt[x],v);\n\tfix(x);\n}\nvoid subtree_cov(int x,int v){\n\tsplit(root,x);\n\tw[x]=v;\n\tS.cov_1(rt[x],v);\n\tfix(x);\n}\nint pre(int x){\n\tpushdown(x=son[x][0]);\n\twhile(son[x][1])pushdown(x=son[x][1]);\n\treturn splay(x),x;\n}\nint lca(int x,int y){\n\tmakeroot(root);\n\taccess(x);\n\treturn access(y);\n}\nvoid cut(int x,int y){\n\tsplit(x,y);\n\tanc[x]=son[y][0]=0;\n\tfix(y);\n}\nvoid move(int x,int xx){\n\tif(lca(x,xx)==x)return;\n\tsplit(root,x);\n\tint y=pre(x);\n\tcut(x,y);link(x,xx);\n}\nint a[15]={4,0,2,9,10,3,1,6,7,11,5,8};\nint xx[N],yy[N];\nmain(){\n//\tfreopen(\"2.in\",\"r\",stdin);freopen(\"zt.txt\",\"w\",stdout);\n\tread(n);read(m);S.tot=n<<1;\n\tmn[0][0]=mn[0][1]=mn[0][2]=S.mn[0]=S.wmn[0]=inf;\n\tmx[0][0]=mx[0][1]=mx[0][2]=S.mx[0]=S.wmx[0]=-inf;\n\tfor(int i=1;i<n;i++)read(xx[i]),read(yy[i]);\n\tfor(int i=1;i<=n;i++){\n\t\tread(w[i]);\n\t\tfix(i);\n\t\tS.init(rt[i]=i+n);\n\t\tcov[i][0]=cov[i][1]=inf;\n\t}\n\tfor(int i=1;i<n;i++)link(xx[i],yy[i]);\n\tread(root);\n\twhile(m--){\n\t\tread(opt);read(x);opt=a[opt];\n\t\tif(opt==0)root=x;\n\t\tif(opt==1)read(y),read(v),split(x,y),add_(y,v,0);\n\t\tif(opt==2)read(y),read(v),split(x,y),cov_(y,v,0);\n\t\tif(opt==3)read(v),subtree_add(x,v);\n\t\tif(opt==4)read(v),subtree_cov(x,v);\n\t\tif(opt==5)read(y),split(x,y),write(sum[y][0]);\n\t\tif(opt==6)read(y),split(x,y),write(mn[y][0]);\n\t\tif(opt==7)read(y),split(x,y),write(mx[y][0]);\n\t\tif(opt==8)split(root,x),ans=S.sum[rt[x]]+w[x],write(ans);\n\t\tif(opt==9)split(root,x),ans=min(S.mn[rt[x]],w[x]),write(ans);\n\t\tif(opt==10)split(root,x),ans=max(S.mx[rt[x]],w[x]),write(ans);\n\t\tif(opt==11)read(y),move(x,y);\n\t\tif(opt>=5&&opt<=10)putchar('\\n');\n\t}\n}\n```\n[\u538b(mei)\u884c(guan)\u4ee3\u7801](https://www.luogu.com.cn/paste/12yg9aa6)",
        "postTime": 1626160152,
        "uid": 334380,
        "name": "Y_B_X",
        "ccfLevel": 7,
        "title": "\u9898\u89e3[P5649 Sone1]"
    }
]