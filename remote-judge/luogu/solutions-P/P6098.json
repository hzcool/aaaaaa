[
    {
        "content": "# Solution For P6098  \n$By\\text{ }ShadderLeave$  \n\u8fd9\u9053\u9898\u76ee\u662f\u4e00\u9053\u70b9\u6743\u6811\u94fe\u5256\u5206\u53e0\u7ebf\u6bb5\u6811\u7684\u9898\u76ee\uff0c\u7801\u91cf\u76f8\u5bf9\u4e0d\u9ad8\uff0c\u9002\u5408\u5165\u95e8\u7ec3\u624b\u3002  \n\u6bd4\u8d77\u6700\u6700\u6734\u7d20\uff08\u7ef4\u62a4\u70b9\u6743\u548c/\u6700\u5927\u503c\uff09\u7684\u6811\u94fe\u5256\u5206\u6765\u8bf4\uff0c\u7565\u7565\u6709\u4e00\u70b9\u70b9\u53d8\u5316\uff0c\u5c31\u662f\u9700\u8981\u7ef4\u62a4\u7684\u64cd\u4f5c\u6709\u4e9b\u5947\u602a\u662f[\u5f02\u6216](https://baike.baidu.com/item/%E5%BC%82%E6%88%96/10993677?fr=aladdin)\uff0c\u4f46\u662f\u6ca1\u4ec0\u4e48\u5f71\u54cd\uff0c\u6709\u7684\u76c6\u53cb\u62c5\u5fc3\u5f02\u6216\u4e0d\u80fd\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c~~\u4e0d\u8981\u5bb3\u6015\uff0c\u7ef4\u62a4\u5f02\u6216\u7684\u6700\u597d\u65b9\u6cd5\u662f\u9762\u5bf9\u5f02\u6216~~\uff0c\u56e0\u4e3a\u5f02\u6216\u53ef\u4ee5\u770b\u505a\u662f\u6bcf\u4e00\u4e2a\u6570\u53d8\u6210\u4e86 $31(int)$ \u4e2a $01$ \u7136\u540e\u6392\u6210\u4e00\u5f20\u8868\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\u53ea\u7528\u5173\u5fc3\u6709\u5947\u6570\u4e2a\u8fd8\u662f\u5076\u6570\u4e2a $1$ \u5c31\u884c\u4e86\uff08\u7ffb\u8bd1\uff1a**\u5f02\u6216\u8fd0\u7b97\u6ee1\u8db3\u4ea4\u6362\u5f8b\u4e0e\u7ed3\u5408\u5f8b**\uff09  \n\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u53d8\u6210\u677f\u5b50\u9898\u76ee\u4e86\uff0c\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u8868\u793a\u5176\u4ee3\u8868\u533a\u95f4\u5185\u6240\u6709\u8282\u70b9\u7684\u5f02\u6216\u503c\uff0c\u521a\u521a\u5df2\u7ecf\u8bf4\u8fc7\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u56de\u7b54\u8be2\u95ee\u7684\u65f6\u5019\u76f4\u63a5\u6309\u7167\u4e00\u822c\u7684\u6811\u94fe\u5256\u5206\u65b9\u6cd5\u6765\u5c31\u884c\u3002  \n\u6362\u53e5\u8bdd\u8bf4 \u5c06\u4e00\u6761\u8def\u5f84\u6839\u636e\u5212\u5206\u7684\u8f7b\u91cd\u94fe\u6765\u5206\u6210\u51e0\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5f02\u6216\u503c\uff0c\u7531\u4e8e\u6ee1\u8db3\u7ed3\u5408\u5f8b\u6240\u4ee5\u5148\u8ba1\u7b97**\u4e00\u4e2a\u4e2a\u7684\u533a\u95f4\u5f02\u6216\u503c\u6700\u540e\u5f02\u6216\u5728\u4e00\u8d77\u7684\u7ed3\u679c \u548c \u8981\u6c42\u7684\u8def\u5f84\u5f02\u6216\u503c\u76f8\u7b49**\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u7684\u7ef4\u62a4\u662f\u6b63\u786e\u7684\u3002  \n\uff08\u522b\u6253\u7740\u6253\u7740\u8ff7\u8def\u4e86\uff0c**\u8fd0\u7b97\u7b26\u90fd\u662f\u5f02\u6216**\uff09  \n\u90a3\u4e48....\u4e0a\u4ee3\u7801\uff1f  \n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=100007;\nint N,Q,ix;\nstruct E{\n\tint u,v;\n}e[maxn<<1];\nint first[maxn],nt[maxn<<1],ES;\nint TREE[maxn<<2];\nint depth[maxn],sz[maxn],top[maxn],A[maxn];\n//A\u6570\u7ec4\u662f\u70b9\u6743\nint son[maxn],id[maxn],anti[maxn],fa[maxn];\n//id\u662f\u8282\u70b9->\u7ebf\u6bb5\u6811\u7f16\u53f7\u7684\u6620\u5c04 anti\u662f\u7ebf\u6bb5\u6811\u7f16\u53f7->\u8282\u70b9\u7684\u6620\u5c04(\u53cd\u5411\u6620\u5c04)\ninline void addE(int u,int v)\n{\n\te[++ES]=(E){u,v};\n\tnt[ES]=first[u];\n\tfirst[u]=ES;\n\te[ES+N]=(E){v,u};\n\tnt[ES+N]=first[v];\n\tfirst[v]=ES+N;\n\treturn ;\n}\ninline int Re()\n{\n\tchar c;\n\tint re,f=1;\n\twhile((c=getchar())>'9'||c<'0')\n\tif(c=='-') f=-1;\n\tre=c-48;\n\twhile((c=getchar())>='0'&&c<='9')\n\tre=re*10+c-48;\n\treturn re*f;\n}\ninline void DFS(int u)\n{\n\tsz[u]=1;\n\tint v;\n\tfor(int i=first[u];i;i=nt[i])\n\t{\n\t\tv=e[i].v;\n\t\tif(v!=fa[u])\n\t\t{\n\t\t\tdepth[v]=depth[u]+1;\n\t\t\tfa[v]=u;\n\t\t\tDFS(v);\n\t\t\tsz[u]+=sz[v];\n\t\t\tif(sz[v]>sz[son[u]]) son[u]=v;\n\t\t}\n\t}\n\treturn ;\n}\ninline void dfs(int u,int tp)\n{\n\ttop[u]=tp;\n\tid[u]=++ix;anti[ix]=u;\n\tif(son[u]) dfs(son[u],tp);\n\tint v;\n\tfor(int i=first[u];i;i=nt[i])\n\t{\n\t\tv=e[i].v;\n\t\tif(v!=fa[u]&&v!=son[u])\n\t\t\tdfs(v,v);\n\t}\n\treturn ;\n}\n#define mid (L+R>>1)//\u4e60\u60ef\u52a0\u4e0a\u62ec\u53f7\u56e0\u4e3a\u4f4d\u8fd0\u7b97\u4f18\u5148\u7ea7\u4f4e\u8c01\u4e5f\u4e0d\u77e5\u9053\u4f1a\u53d1\u751f\u4ec0\u4e48qwq\ninline void Build(int L,int R,int i)\n{\n\tif(L==R)\n\t{\n\t\tTREE[i]=A[anti[L]];\n\t\treturn ;\n\t}\n\tBuild(L,mid,i<<1);\n\tBuild(mid+1,R,i<<1|1);\n\tTREE[i]=TREE[i<<1]^TREE[i<<1|1];\n\treturn ;\n}\ninline void Update(int L,int R,int x,int i,int k)\n{\n\tif(L==R)//\u5355\u70b9\u4fee\u6539 [L,R]\u662f\u5f53\u524d\u533a\u95f4\n\t{\n\t\tTREE[i]=k;\n\t\treturn ;\n\t}\n\tif(x<=mid) Update(L,mid,x,i<<1,k);\n\telse Update(mid+1,R,x,i<<1|1,k);//\u5355\u70b9\u4fee\u6539\u975e\u6b64\u5373\u5f7c\u76f4\u63a5else\u5373\u53ef\n\tTREE[i]=TREE[i<<1]^TREE[i<<1|1];//\u4f7f\u7528\u5f02\u6216\u8fd0\u7b97\u7b26\u66f4\u65b0\n\treturn ;\n}\ninline int QwQ(int L,int R,int l,int r,int i)\n{//[L,R]\u662f\u5f53\u524d\u533a\u95f4\uff0c[l,r]\u662f\u5f85\u67e5\u533a\u95f4\n\tif(l<=L&&R<=r)\n\t\treturn TREE[i];\n\tint ans=0;//\u5207\u8bb0\u521d\u59cb\u5316\u4e3a0\n\tif(l<=mid) ans^=QwQ(L,mid,l,r,i<<1);//\u5168\u90e8\u662f\u5f02\u6216\n\tif(r>mid) ans^=QwQ(mid+1,R,l,r,i<<1|1);\n\treturn ans;\n}\ninline int Query_Path(int x,int y)\n{\n\tint ans=0;//\u5207\u8bb0\u521d\u59cb\u5316\u4e3a0\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\tans^=QwQ(1,N,id[top[x]],id[x],1);\n\t\tx=fa[top[x]];\n\t}\n\tif(depth[x]>depth[y]) swap(x,y);\n\tans^=QwQ(1,N,id[x],id[y],1);\n\treturn ans;\n}\nint main()\n{\n\tN=Re();Q=Re();\n\tint u,v,s;\n\tfor(int i=1;i<=N;i++)\n\t\tA[i]=Re();\n\tfor(int i=1;i<N;i++)\n\t{\n\t\tu=Re();v=Re();\n\t\taddE(u,v);\n\t}\n\tDFS(1);dfs(1,1);\n\tBuild(1,N,1);\n\tfor(int i=1;i<=Q;i++)\n\t{\n\t\ts=Re();u=Re();v=Re();\n\t\tif(s==1)\n\t\t\t Update(1,N,id[u],1,v);\n\t\telse printf(\"%d\\n\",Query_Path(u,v));\n\t}\n\treturn 0;\n}\n```\n\u8fd9\u662f\u8f83\u4e3a\u7b80\u5355\u7684\u4e00\u9053\u6811\u94fe\u5256\u5206\u9898\u76ee\uff0c\u6ca1\u6709\u61d2\u60f0\u6807\u8bb0\uff0c\u4e5f\u6ca1\u6709\u5927\u7684\u53d8\u5f62\uff0c\u5927\u5bb6\u5728\u719f\u7ec3\u638c\u63e1\u70b9\u6743\u6811\u94fe\u5256\u5206\u4e4b\u540e\u53ef\u4ee5\u5f00\u59cb\u4e86\u89e3\u7ef4\u62a4\u8fb9\u6743\u6811\u94fe\u5256\u5206\u4ee5\u53ca\u4e00\u4e9b\u5728\u539f\u6709\u7684\u7b97\u6cd5\u4e0a\u5de7\u5999\u53d8\u5f62\u7684\u9898\u76ee\u3002[\u8fb9\u6743\u6811\u94fe\u5256\u5206\u677f\u5b50](https://www.luogu.com.cn/blog/ShadderLeave/solution-p3038)\uff0c\u53e6\u5916\u56e0\u4e3a\u6709\u4e9b\u6811\u94fe\u5256\u5206\u9898\u76ee\u5b9e\u5728\u592a\u6bd2\u7624\uff0c\u7a9d\u5efa\u7acb\u4e86\u4e00\u4e2a\u9898\u5355\u6765\u5de9\u56fa\u4ee3\u7801\u719f\u7ec3\u7a0b\u5ea6\uff0c[\u6b22\u8fce\u5927\u5bb6\u6765van](https://www.luogu.com.cn/training/1654#problems)\u3002  \n\u8c22\u8c22\u7ba1\u7406\u5927\u5927\u5ba1\u6838^_^",
        "postTime": 1584518899,
        "uid": 215697,
        "name": "LeavingZ",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u3001\u6811\u4e0a\u8def\u5f84\u5f02\u6216\u548c\u67e5\u8be2\u3002\n\n## \u9898\u89e3\n\n\u8fd9\u662f\u4e00\u9053[\u91cd\u94fe\u5256\u5206](https://www.luogu.com.cn/problem/P3384)\u7684\u88f8\u9898\u3002\n\n**\u91cd\u94fe\u5256\u5206**\u662f\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684**\u5b50\u6811\u5927\u5c0f\u6700\u5927**\u7684\u513f\u5b50\u8282\u70b9\u4f5c\u4e3a**\u91cd\u513f\u5b50**\uff0c\u5176\u4f59\u4f5c\u4e3a\u8f7b\u513f\u5b50\u3002\n\n\u7236\u8282\u70b9\u4e0e\u5176\u91cd\u513f\u5b50\u7684\u8fde\u8fb9\u79f0\u4e3a**\u91cd\u8fb9**\u3002\n\n\u7136\u540e\u5c06\u6574\u68f5\u6811\u91cd\u65b0\u7f16\u53f7\uff0c\u628a\u6574\u68f5\u6811\u62c6\u6210\u8bb8\u591a**\u91cd\u94fe**\uff08\u7531\u91cd\u8fb9\u76f8\u8fde\u5f97\u5230\u7684\u94fe\uff09\u548c **\u8f7b\u94fe**\uff08\u7531\u975e\u91cd\u8fb9\u76f8\u8fde\u5f97\u5230\u7684\u94fe\uff09\u3002\n\n\u91cd\u65b0\u7f16\u53f7\u4e4b\u540e\uff0c\u4f7f\u7528**\u6811\u72b6\u6570\u7ec4**\u6216**\u7ebf\u6bb5\u6811**\u7ef4\u62a4\u5373\u53ef\u3002\u5982\u679c\u4e0d\u4e86\u89e3\u91cd\u94fe\u5256\u5206\uff0c\u4e0d\u59a8\u770b\u770b[\u8fd9\u7bc7\u535a\u5ba2](https://www.cnblogs.com/zwfymqz/p/8094500.html)\u3002\n\n\u672c\u9898\u9700\u8981\u652f\u6301\u5355\u70b9\u4fee\u6539\u3001\u6811\u4e0a\u8def\u5f84\u5f02\u6216\u548c\u67e5\u8be2\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u590d\u6742\u5ea6$\\mathcal{O}(q\\log ^2n)$\n\n\u6ce8\u610f\u5f02\u6216\u64cd\u4f5c\u5728C++\u4e2d\u8868\u793a\u4e3a```^```\n\n## \u4ee3\u7801\n```cpp\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\n#define in __inline__\ntypedef long long ll;\nin ll max(ll x, ll y){return x > y ? x : y;}\nin ll min(ll x, ll y){return x < y ? x : y;}\nin void swap(ll &x, ll &y){x ^= y ^= x ^= y;}\n#define rei register int\n#define FOR(i, l, r) for(rei i = l; i <= r; ++i)\n#define FOL(i, r, l) for(rei i = r; i >= l; --i)\nchar inputbuf[1 << 23], *p1 = inputbuf, *p2 = inputbuf;\n#define getchar() (p1 == p2 && (p2 = (p1 = inputbuf) + fread(inputbuf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\nin ll read() {\n\tll res = 0; char ch = getchar(); bool f = true;\n\tfor(; ch < '0' || ch > '9'; ch = getchar())\n\t\tif(ch == '-') f = false;\n\tfor(; ch >= '0' && ch <= '9'; ch = getchar())\n\t\tres = res * 10 + (ch ^ 48);\n\treturn f ? res : -res;\n}\nconst int N = 1e5 + 15;\n\nint a[N], v[N], sum[N << 2], fr[N << 1], to[N << 1], nxt[N << 1], head[N], cnt;\nint dep[N], id[N], top[N], fa[N], siz[N], son[N], tot, n, x, y;\n/*\ndep[i]\uff1a\u8282\u70b9i\u7684\u6df1\u5ea6\nid[i]\uff1a\u91cd\u65b0\u7f16\u53f7\u540e\u8282\u70b9i\u7684\u7f16\u53f7\ntop[i]\uff1a\u5305\u62ec\u8282\u70b9i\u7684\u91cd\u94fe\u9876\u7aef\nsiz[i]\uff1a\u4ee5i\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\nson[i]\uff1a\u8282\u70b9i\u7684\u91cd\u513f\u5b50\nfa[i]\uff1a\u8282\u70b9i\u7684\u7236\u4eb2\nv[i]\uff1a\u91cd\u65b0\u7f16\u53f7\u540e\u7f16\u53f7\u4e3ai\u7684\u8282\u70b9\u7684\u503c\n*/\n\nin void add(int x, int y) {to[++cnt] = y, nxt[cnt] = head[x], head[x] = cnt;}\nin void upd(int k) {sum[k] = sum[k << 1] ^ sum[k << 1 | 1];}\n\nvoid dfs1(int u, int f) {//\u5904\u7406\u5404\u79cd\u4fe1\u606f\uff0c\u5305\u62ec\u6df1\u5ea6\u3001\u7236\u8282\u70b9\u3001\u5b50\u6811\u5927\u5c0f\u3001\u91cd\u513f\u5b50\n\tint v; fa[u] = f, dep[u] = dep[f] + 1, siz[u] = 1;\n\tfor(rei i = head[u]; i; i = nxt[i]) if((v = to[i]) ^ f) {\n\t\tdfs1(v, u); siz[u] += siz[v]; if(siz[v] > siz[son[u]]) son[u] = v;\n\t}\n}\nvoid dfs2(int u, int tf) {//\u91cd\u65b0\u7f16\u53f7\n\tid[u] = ++tot, v[tot] = a[u]; top[u] = tf;\n\tif(!son[u]) return; dfs2(son[u], tf);\n\tfor(rei i = head[u]; i; i = nxt[i]) if(!id[to[i]]) dfs2(to[i], to[i]);\n}\n\nvoid bd(int k, int l, int r) {\n\tif(l == r) {sum[k] = v[l]; return;}\n\tint m = l + r >> 1;\n\tbd(k << 1, l, m); bd(k << 1 | 1, m + 1, r); upd(k);\n}\nvoid cg(int k, int l, int r) {\n\tif(l == r) {sum[k] = y; return;}\n\tint m = l + r >> 1;\n\tid[x] <= m ? cg(k << 1, l, m) : cg(k << 1 | 1, m + 1, r); upd(k);\n}\nint qr(int k, int l, int r, int x, int y) {\n\tif(x <= l && r <= y) return sum[k];\n\tint m = l + r >> 1, res = 0;\n\tif(x <= m) res ^= qr(k << 1, l, m, x, y);\n\tif(m < y) res ^= qr(k << 1 | 1, m + 1, r, x, y);\n\treturn res;\n}\nint query(int x, int y, int res = 0) {//\u6811\u4e0a\u8def\u5f84\u67e5\u8be2\n\tfor(; top[x] ^ top[y]; y = fa[top[y]]) {\n\t\tif(dep[top[x]] > dep[top[y]]) x ^= y ^= x ^= y;\n\t\tres ^= qr(1, 1, n, id[top[y]], id[y]);\n\t}\n\tif(id[x] > id[y]) x ^= y ^= x ^= y;\n\treturn (res ^= qr(1, 1, n, id[x], id[y]));\n}\n\nsigned main() {\n\tint q, opt;\n\tn = read(); q = read();\n\tFOR(i, 1, n) a[i] = read();\n\tFOR(i, 1, n - 1) x = read(), y = read(), add(x, y), add(y, x);\n\tdfs1(1, 0);\n\tdfs2(1, 1);\n\tbd(1, 1, n);\n\tfor(; q; --q) {\n\t\topt = read(), x = read(), y = read();\n\t\tif(opt == 1) cg(1, 1, n);\n\t\telse printf(\"%d\\n\", query(x, y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1586734966,
        "uid": 214437,
        "name": "IntrepidStrayer",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u9898\u89e3\u91cc\u9762\u5168\u90fd\u662f\u6811\u94fe\u5256\u5206\u554a\u3002\u3002\u3002\u4e3a\u4ec0\u4e48\u6811\u94fe\u5256\u5206\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u7528\u6811\u94fe\u5256\u5206\u6765\u505a\u5462\uff1f\n\n\u63d0\u4f9b\u4e00\u79cd **DFS\u5e8f** \u7684\u5199\u6cd5\uff0c\u5728\u6b64\u6211\u628a\u8fd9\u9053\u9898\u5f53\u4f5c **DFS\u5e8f** \u677f\u5b50\u9898\u8be6\u7ec6\u8bb2\u4e00\u4e0b\u3002\n\n### \u6ce8\u610f\uff1a\u4ee5\u4e0b\u5185\u5bb9\u4ec5\u4ee3\u8868\u4e2a\u4eba\u7406\u89e3\uff0c\u82e5\u6709\u9519\u8bef\u8bf7\u5404\u4f4d\u4e00\u5b9a\u8981\u53ca\u65f6\u6307\u6b63\uff0c\u591a\u8c22\uff01\n\n# \u3010DFS\u5e8f\u3011\uff08\u4f1a\u7684\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u90e8\u5206\uff09\n## \u3010\u524d\u7f6e\u77e5\u8bc6\u3011\n- DFS\uff08\u90fd\u53eb**DFS\u5e8f**\u4e86\u80af\u5b9a\u8981\u4f1aDFS\u554a\uff09\n- \u7ebf\u6bb5\u6811\uff08\u4e0eDFS\u5e8f\u914d\u5957\u4f7f\u7528\uff09\n- LCA (\u4ec5\u9650\u4e8e\u672c\u9898\uff0c\u5f53\u7136\u5f88\u591a\u7c7b\u4f3c\u7684\u9898\u76ee\u4e5f\u90fd\u7528\u5f97\u4e0a)\n\n## \u3010\u662f\u4ec0\u4e48\u3011\n\u9996\u5148\u6211\u4eec\u8981\u4e86\u89e3 **DFS\u5e8f** \u662f\u4ec0\u4e48\u3002\n\n\u987e\u540d\u601d\u4e49\uff0c **DFS\u5e8f** \u5c31\u662f **\u5bf9\u4e00\u68f5\u6811DFS\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u5e8f\u5217**\u3002\n\n\u5927\u6982\u7531\u8fd9\u6837\u4e24\u4e2a\u6570\u7ec4\u6784\u6210\uff1a\uff08\u4ee5\u4e0b\u79f0\u547c\u53d7 $tarjan$ \u7b97\u6cd5\u5f71\u54cd\u4e25\u91cd\uff0c\u6b63\u5f0f\u79f0\u547c\u672c\u4eba\u4e0d\u592a\u6e05\u695a\uff0c\u77e5\u9053\u7684\u5927\u4f6c\u53ef\u4ee5\u5728\u8bc4\u8bba\u91cc\u8bf4\u4e00\u58f0\uff09\uff1a\n\n- $dfn[i]$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u662f **\u7b2c\u51e0\u4e2a** \u5165\u641c\u7d22\u6808\u7684\u3002\n- $low[i]$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u51fa\u641c\u7d22\u6808\u65f6\uff0c\u6700\u665a\u5165\u641c\u7d22\u6808\u7684\u8282\u70b9\u7684 $dfn$ \u503c\uff0c\u5373\u6b64\u65f6\u7684 $dfn$ \u6700\u5927\u503c\u3002\n\n\u8fd9\u4e48\u8bf4\u53ef\u80fd\u6709\u4e9b\u96be\u61c2\uff0c\u6211\u4eec\u6362\u4e00\u79cd\u8bf4\u6cd5\uff1a\n- $dfn[i]$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u662f **\u7b2c\u51e0\u4e2a** \u88ab\u641c\u5230\u7684\u3002\n- $low[i]$ \u8868\u793a\u7b2c $i$ \u4e2a\u8282\u70b9\u51fa\u641c\u7d22\u6808\u65f6\uff0c**\u6709\u591a\u5c11\u4e2a** \u8282\u70b9\u5df2\u7ecf\u88ab\u641c\u8fc7\u4e86\uff08\u5176\u5b9e\u8fd8\u662f $dfn$ \u6700\u5927\u503c\uff09\u3002\n\n\u8fd9\u6837\u4f3c\u4e4e\u4ec0\u4e48\u4e5f\u770b\u4e0d\u51fa\u6765\uff0c\u90a3\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u6027\u8d28\u3002\n\n## \u3010\u6027\u8d28\u3011\n\u9996\u5148\uff0c\u5728\u6811\u4e0a**DFS**\u5148\u5929\u6709\u4e00\u4e2a\u5341\u5206\u4f18\u7f8e\u7684\u6027\u8d28\uff1a\u641c\u5b8c\u4e00\u4e2a\u8282\u70b9 $root$ \u540e\uff0c\u4e00\u5b9a\u4f1a\u5148\u641c\u5b8c\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9 $node$\uff0c\u7136\u540e\u5b83\u518d\u51fa\u641c\u7d22\u6808\u3002\u5373 $low[root] \\geq dfn[node]$ \u3002\n\n\u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u5f88\u5e9f\u8bdd\u7684\u6027\u8d28\uff0c\u641c\u7d22\u5230\u4e00\u4e2a\u8282\u70b9\u4e4b\u524d\uff0c\u5176\u7236\u4eb2\u8282\u70b9\u4e00\u5b9a\u88ab\u641c\u7d22\u8fc7\uff0c\u5373 $dfn[father] < dfn[son]$ \uff0c\u90a3\u4e48\u53cd\u8fc7\u6765\u8bf4\uff0c\u4e00\u4e2a\u8282\u70b9 $root$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9 $node$ \u90fd\u6ee1\u8db3\uff1a$dfn[root] \\leq dfn[node]$ \uff08\u4e00\u4e2a\u8282\u70b9\u672c\u8eab\u4e5f\u5728\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff09\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $root$ \uff0c\u5b83\u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u7684 $dfn$ \u90fd\u6ee1\u8db3 $dfn\\in[dfn[root],low[root]]$\n\n\u800c\u4e14\u6211\u4eec\u80fd\u8fdb\u4e00\u6b65\u53d1\u73b0\uff0c**\u540c\u4e00\u68f5\u5b50\u6811\u4e0a\u7684\u8282\u70b9\u7684** $dfn$ **\u503c\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\uff01** \uff08\u6bd5\u7adf\u662f\u8fde\u7740\u641c\u7d22\u5230\u7684\uff09\n\n\u4e8e\u662f\u6211\u4eec\u6210\u529f\u628a\u6811\u4e0a\u95ee\u9898\uff08\u5b50\u6811\u95ee\u9898\uff09\u8f6c\u5316\u4e3a\u4e86\u533a\u95f4\u95ee\u9898\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5b50\u6811\u95ee\u9898\u4e86\u3002\n\n## \u3010\u7ef4\u62a4\u3011\n\u4e0d\u96be\u53d1\u73b0DFS\u5e8f\u7684\u5c40\u9650\u6027\uff1a\u53ea\u80fd\u8fdb\u884c\u5b50\u6811\u7684\u7ef4\u62a4\uff08\u5f53\u7136\u53ef\u80fd\u4e5f\u6709\u5176\u4ed6\u9ad8\u79d1\u6280\u7684\u65b9\u6cd5\u4f7f\u5f97DFS\u5e8f\u53ef\u4ee5\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\uff0c\u4f46\u6211\u4e0d\u4f1a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8bb2\u4e86\uff09\u3002\n\n\u90a3\u6211\u4eec\u5c31\u8ba4\u771f\u8003\u8651\u5bf9\u5b50\u6811\u64cd\u4f5c\u7684\u7ef4\u62a4\u4e86\uff1a\n\n### \u3010\u5bf9\u5e94\u5173\u7cfb\u3011\n\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u5b50\u6811\u95ee\u9898\uff0c\u90a3\u6211\u4eec\u5c31\u5f97\u77e5\u9053\u7ebf\u6bb5\u6811\u4e0e\u5b50\u6811\u4e0a\u4fe1\u606f\u7684\u5bf9\u5e94\u5173\u7cfb\u3002\n\n\u8fd9\u91cc\u6211\u4eec\u8bbe\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u5e8f\u5217\u4e3a $a$ \uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5bf9\u5e94\u5173\u7cfb\u5f88\u663e\u7136\u5e94\u8be5\u662f\u8fd9\u6837\uff1a\n\n\u5bf9\u4e8e\u8282\u70b9 $i$\uff0c\u8bbe $val[i]$ \u8868\u793a\u5b83\u7684\u6743\u503c\uff0c\u90a3\u4e48\u7ebf\u6bb5\u6811\u4e0a\u5c31\u6709 $a[dfn[i]] = val[i]$ \u3002\n\n\u7528 $dfn$ \u503c\u6765\u8fdb\u884c\u5bf9\u5e94\u66f4\u5229\u4e8e\u6211\u4eec\u5229\u7528DFS\u5e8f\u7684\u6027\u8d28\u8fdb\u884c\u7ef4\u62a4\u3002\u56e0\u4e3a\u6b64\u65f6\uff0c\u4ee5 $root$ \u4e3a\u6839\u7684\u5b50\u6811\u5c31\u5f88\u597d\u8868\u793a\u4e86\uff1a\n\n$a$ \u4e0a\u7684\u533a\u95f4 $[dfn[root],low[root]]$ \u8868\u793a\u4ee5 $root$ \u4e3a\u6839\u7684\u5b50\u6811\u3002\n\n### \u3010\u533a\u95f4\u4fee\u6539\u3011\n\u4fee\u6539\u4ee5 $root$ \u4e3a\u6839\u7684\u5b50\u6811\u6b64\u65f6\u7b49\u540c\u4e8e\u4fee\u6539 $a$ \u4e0a\u7684\u533a\u95f4 $[dfn[root],low[root]]$   \uff0c\u5373 $modify(dfs[root],low[root])$\n\n### \u3010\u533a\u95f4\u6c42\u503c\u3011\n\u540c\u7406\uff0c$query(dfs[root],low[root)$ \u3002\n\n# \u3010\u672c\u9898\u3011\n## \u3010\u601d\u8def\u3011\n\u4f7f\u7528DFS\u5e8f\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u3002\n\n\u6709\u4eba\u53ef\u80fd\u4f1a\u95ee\u4e86\uff1a\u201c\u8bf6\uff1f\u8fd9\u9053\u9898\u4e0d\u662f\u95ee\u6211\u4eec\u8def\u5f84\u4fe1\u606f\u5417\uff1f\u548c\u5b50\u6811\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u201d\n\n\u522b\u6025\uff0c\u6211\u4eec\u5148\u5bf9\u95ee\u9898\u8fdb\u884c\u4e00\u4e0b\u8f6c\u5316\u3002\n\n\u9996\u5148\uff0c\u4f17\u6240\u5468\u77e5\u6709\u6839\u6811\u4e0a\u7684\u4e00\u6761\u8def\u5f84\u7684\u6743\u503c\u548c\u53ef\u4ee5\u7528 $LCA$ \u548c**\u524d\u7f00\u548c**\u6765\u5b8c\u6210\u3002\n\n\u5176\u5927\u4f53\u601d\u8def\uff08\u4ee5\u672c\u9898\u4e3a\u60c5\u5883\uff0c\u4e0b\u540c\uff09\u5c31\u662f\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\uff0c\u5bf9\u4e8e\u6bcf\u4e24\u4e2a\u70b9 $u, v$ \uff0c\u7528\u7c7b\u4f3c\u524d\u7f00\u548c\u7684\u601d\u60f3\u6c42\u51fa $u, v$ \u5230\u5b83\u4eec\u7684 $LCA$ \u7684\u5f02\u6216\u548c\uff0c\u6700\u540e\u518d\u628a\u8fd9\u4e24\u4e2a\u503c\u5f02\u6216\u4e00\u4e0b\u5e76\u5f02\u6216\u4e0a $LCA$ \u7684\u6743\u503c\u5c31\u662f $u$ \u5230 $v$ \u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u5f02\u6216\u548c\u3002\uff08\u5f02\u6216\u4e0a $LCA$ \u7684\u503c\u662f\u7531\u4e8e\u672c\u9898\u8bb0\u5f55\u7684\u662f\u70b9\u6743\uff0c $u,v$ \u5230\u5176 $LCA$ \u7684\u8def\u5f84\u4e0a\u90fd\u4e0d\u5305\u542b $LCA$ \u7684\u70b9\u6743\uff0c\u6240\u4ee5\u6700\u540e\u8981\u5f02\u6216\u4e0a\uff09 \u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $i$ \uff0c\u6211\u4eec\u8981\u7ef4\u62a4\u8fd9\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u5f02\u6216\u548c $val[i]$ \u3002\n\n\u4e8e\u662f\u5355\u70b9\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e0b\u9762\u8003\u8651\u4fee\u6539\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u4fee\u6539\u4e00\u4e2a\u70b9\u4e0a\u7684\u6570\uff0c\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u5f02\u6216\u548c\u90fd\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u7531\u4e8e\u4e00\u4e2a\u70b9\u4ece $e[i]$ \u53d8\u4e3a\u4e86 $v$ \uff0c\u76f8\u5f53\u4e8e\u5f02\u6216\u503c\u5f02\u6216\u4e0a\u4e86 $e[i]~xor~v$ \uff08\u4e00\u4e2a\u6570\u5f02\u6216\u5176\u672c\u8eab\u521a\u597d\u4e3a $0$ \uff0c\u76f8\u5f53\u4e0e\u539f\u5148\u8be5\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u90fd**\u5f02\u6216\u8fc7** $e[i]$ \uff0c\u73b0\u5728\u6d88\u9664\u8be5\u5f71\u54cd\u5e76\u6539\u4e3a**\u5f02\u6216\u8fc7** $v$\uff09\uff0c\u7136\u540e $e[i]=v$ \u5373\u53ef\u3002\n\n\u6700\u540e\u7a0d\u5fae\u8bb2\u4e00\u4e0b\u5b9e\u73b0\u4e0a\u7684\u7ec6\u8282\uff0c\u67e5\u8be2 $u,v$ \u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u65f6\uff0c\u7531\u4e8e\u4e00\u4e2a\u70b9\u5230\u5176 $LCA$ \u7684\u8def\u5f84\u4e0a\u7684\u5f02\u6216\u548c\u521a\u597d\u4e3a $val[u/v]~xor~val[LCA]$ \uff0c\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u4e3a\uff1a\n\n$$\nval[u]~xor~val[v]~xor~val[LCA]~xor~val[LCA]~xor~e[LCA]\n$$\n\n$$\n=val[u]~xor~val[v]~xor~e[LCA]\n$$\n\n\u53ef\u4ee5\u5c11\u4e00\u6b21\u8be2\u95ee\u3002\n\n## \u3010\u4ee3\u7801\u3011\n\uff08\u6ce8\u610f\uff1a\u8fd9\u91cc\u4ee3\u7801\u4e2d\u7684 $val$ \u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u9898\u9762\u4e2d\u7684 $e$ \uff0c\u4e0d\u7528 $e$ \u7684\u539f\u56e0\u662f\u5efa\u56fe\u7684\u65f6\u5019\u7528\u8fc7\u4e86\u3002\uff09\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <typename T>\ninline void read(T &x){\n    x = 0;int fu = 1;\n    char c = getchar();\n    while(c > 57 || c < 48){\n        if(c == 45) fu = -1;\n        c = getchar();\n    }\n    while(c <= 57 && c >= 48){\n        x = (x << 3) + (x << 1) + c - 48;\n        c = getchar();\n    }\n    x *= fu;\n}\ntemplate <typename T>\ninline void fprint(T x){\n    if(x < 0) putchar(45), x = -x;\n    if(x > 9) fprint(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void fprint(T x, char ch){\n    fprint(x);putchar(ch);\n}\n//\u4ee5\u4e0a\u662f\u65e0\u5173\u7d27\u8981\u7684\u5feb\u8bfb\u4ec0\u4e48\u7684\nint dfn[100005], low[100005], tot, val[100005];//dfs\u5e8f\nint n, Q;\nint head[100005], nxt[200005], e[200005], cnt;//\u94fe\u5f0f\u524d\u5411\u661f\n\ninline void add(int u, int v){\n    nxt[++ cnt] = head[u];\n    head[u] = cnt;\n    e[cnt] = v;\n}\n//\u4ee5\u4e0b\u662f\u7ebf\u6bb5\u6811\uff0c\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u6ca1\u6709\u4efb\u4f55\u533a\u522b\n#define LSON rt << 1, l, mid\n#define RSON rt << 1 | 1, mid + 1, r\n\nint num[400005], lazy[400005];\ninline void pushup(int rt){num[rt] = num[rt << 1] ^ num[rt << 1 | 1];}\ninline void update(int rt, int l, int r, int w){\n    if((r - l + 1) & 1) num[rt] ^= w;\n    lazy[rt] ^= w;\n}\ninline void pushdown(int rt, int l, int r){\n    if(lazy[rt]){\n        int mid = (l + r) >> 1;\n        update(LSON, lazy[rt]);\n        update(RSON, lazy[rt]);\n        lazy[rt] = 0;\n    }\n}\nvoid modify(int rt, int l, int r, int x, int y, int w){\n    if(x <= l && r <= y) return update(rt, l, r, w);\n    pushdown(rt, l, r);\n    int mid = (l + r) >> 1;\n    if(x <= mid) modify(LSON, x, y, w);\n    if(y > mid) modify(RSON, x, y, w);\n    pushup(rt);\n}\nint query(int rt, int l, int r, int x){\n    if(x == l && l == r) return num[rt];\n    pushdown(rt, l, r);\n    int mid = (l + r) >> 1;\n    if(x <= mid) return query(LSON, x);\n    else return query(RSON, x);\n}\n\nint fa[100005][21], dep[100005];\n\nvoid build(int x, int pre){//\u5efa\u6811+\u500d\u589eLCA\u521d\u59cb\u5316\n    dfn[x] = ++ tot;\n    for (register int i = head[x];i;i = nxt[i]){\n        if(pre == e[i]) continue;\n        dep[e[i]] = dep[x] + 1;\n        fa[e[i]][0] = x;\n        for (register int j = 1;j <= 20;j ++) fa[e[i]][j] = fa[fa[e[i]][j - 1]][j - 1];\n        build(e[i], x);\n    }\n    low[x] = tot;\n}\n\ninline int LCA(int x, int y){//\u500d\u589e\u6c42LCA\n    if(dep[x] < dep[y]) swap(x, y);\n    for (register int i = 20;i >= 0;i --){\n        if(dep[fa[x][i]] >= dep[y]) x = fa[x][i];\n        if(dep[x] == dep[y]) break;\n    }\n    if(x == y) return x;\n    for (register int i = 20;i >= 0;i --){\n        if(fa[x][i] ^ fa[y][i]){\n            x = fa[x][i];\n            y = fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\n\nint main(){\n    read(n);read(Q);\n    for (register int i = 1;i <= n;i ++) read(val[i]);\n    for (register int i = 1;i < n;i ++){\n        int u, v;read(u);read(v);\n        add(u, v);add(v, u);\n    }\n    dep[1] = 1;\n    build(1, 0);\n    for (register int i = 1;i <= n;i ++) modify(1, 1, n, dfn[i], low[i], val[i]);\n    while(Q --){\n        int opt, x, y;read(opt);read(x);read(y);\n        if(opt == 1){//\u4fee\u6539\n            int tmp = val[x] ^ y;\n            val[x] = y;\n            modify(1, 1, n, dfn[x], low[x], tmp);\n        }\n        else{//\u8be2\u95ee\n            int lca = LCA(x, y);\n            int tmp1 = query(1, 1, n, dfn[x]);\n            int tmp2 = query(1, 1, n, dfn[y]);\n            fprint(tmp1 ^ tmp2 ^ val[lca], 10);\n        }\n    }\n}\n```",
        "postTime": 1599388628,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011\uff08\u3010\u6a21\u677f\u3011DFS\u5e8f\uff09\uff09"
    },
    {
        "content": "**\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u88f8\u7684\u6811\u5256\u9898\u4e86\u3002**\n\n[$\\color{red}\\text{\u91cd\u94fe\u5256\u5206\u597d\u6587\u63a8\u8350}$](https://www.cnblogs.com/ivanovcraft/p/9019090.html)\n\n## Part 1 \u7b80\u8ff0\u9898\u610f\n\n\u6709\u4e00\u68f5\u70b9\u6743\u6811\uff0c\u8981\u6c42\u4f60\u5efa\u7acb\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u6765\u7ef4\u62a4\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u6743\u503c\u5f02\u6216\u503c\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002\n\n\u901a\u8fc7**\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u70b9\u6743\u5f02\u6216\u503c**\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u6811\u5256\u7684\u65b9\u5f0f\u3002\u5177\u4f53\u4e00\u70b9\uff0c\u53ef\u4ee5\u91c7\u7528\u91cd\u94fe\u5256\u5206\u3002~~\u6bd5\u7adf\u4eba\u5bb6\u66f4\u7b80\u5355~~\n\n## Part 2 \u6b65\u9aa4\u9610\u8ff0\n\n**\u91cd\u94fe\u5256\u5206\u57fa\u7840\u6b65\u9aa4\uff1a**\n\n1. \u8f93\u5165\u6570\u636e\uff0c\u5efa\u8fb9\u3002\n\n2. \u4e24\u6b21 $\\text{dfs}$ \u5efa\u7acb\u91cd\u94fe\u5256\u5206\u4fe1\u606f\u3002\n\n3. \u7ef4\u62a4\u64cd\u4f5c\u3002\n\n**\u800c\u8fd9\u9053\u9898\u7684\u6b65\u9aa4\u5f53\u7136\u4e0e\u8fd9\u4e2a\u5dee\u4e0d\u591a\u5566\uff01**\n\n### \u4f46\u662f\uff0c\u5207\u8bb0\uff1a\n\n\u5728\u91cd\u94fe\u5256\u5206\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u7684\u70b9\u6743\u6709\u4e24\u4e2a\u5e8f\uff0c\u4e00\u4e2a\u662f\u8f93\u5165\u987a\u5e8f\uff0c\u4e00\u4e2a\u662f\u5efa\u7acb\u5256\u5206\u4fe1\u606f\u65f6\u7684 $\\text{dfs}$ \u5e8f\u3002\u800c\u4e3a\u4e86\u8ba9\u6839\u8282\u70b9\u5230\u5b83\u7684\u91cd\u513f\u5b50\u4e4b\u95f4\u5728\u7ef4\u62a4\u65f6\u53ef\u4ee5\u76f4\u63a5\u533a\u95f4\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u5efa\u7acb\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6811\u5256\u7684\u65f6\u5019**\u4e0b\u6807\u4e00\u5b9a\u8981\u7528 $\\text{dfs}$ \u5e8f**\uff0c\u800c\u5728**\u7531\u8f93\u5165\u987a\u5e8f\u8f6c\u5165\u6570\u636e\u7ed3\u6784\u8ba1\u7b97\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u5c06\u8f93\u5165\u5e8f\u8f6c\u6362\u4e3a $\\text{dfs}$ \u5e8f**\uff0c\u8fd9\u6837\u624d\u80fd\u5728\u6811\u5256\u8fc7\u7a0b\u4e2d\u533a\u95f4\u5904\u7406\uff01\uff01\uff01\u5207\u8bb0\uff01\uff01~~\u6bcf\u6b21\u505a\u91cd\u94fe\u5256\u5206\u9898\u7684\u65f6\u5019\u90fd\u4f1a\u9519\u51e0\u6b21~~\n\n## Part 3 AC code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<string.h>\nusing namespace std;\n#define N 100005 \nint n,q,in[N],tot,head[N],rk[N];\nstruct node{\n\tint to,next;\n\tnode (int to=0,int next=0):to(to),next(next){}\n}bian[N<<1];//\u6bcf\u4e00\u6761\u8fb9\nstruct node1{\n\tint fa,zson,w,top,size,d,id;\n}e[N];//\u6811\u5256\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\nstruct node2{\n\tint l,r,sum;\n}t[N<<2];//\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\nint read(){//\u5feb\u8bfb\n\tint w=0,f=1;\n\tchar c=getchar();\n\twhile (c>'9'||c<'0'){\n\t\tc=getchar();\n\t\tif (c=='-') f=-1;\n\t}\n\twhile (c>='0'&&c<='9'){\t\n\t\tw=(w<<3)+(w<<1)+(c^48);\n\t\tc=getchar(); \n\t} \n\treturn w*f;\n}\nvoid adde(int u,int v){//\u52a0\u8fb9\n\tbian[++tot]=node(v,head[u]);\n\thead[u]=tot;\n}\nvoid dfs1(int u){\n\te[u].d=e[e[u].fa].d+1,e[u].size=1;\n\tfor (int i=head[u];i;i=bian[i].next){\n\t\tint v=bian[i].to;\n\t\tif (v!=e[u].fa){\n\t\t\te[v].fa=u;\n\t\t\tdfs1(v);\n\t\t\te[u].size+=e[v].size;\n\t\t\tif (e[v].size>e[e[u].zson].size)\n\t\t\t\te[u].zson=v;\n\t\t}\n\t}\n}\nvoid dfs2(int u,int tp){\n\te[u].top=tp,e[u].id=++tot,rk[tot]=u;\n\tif (e[u].zson) dfs2(e[u].zson,tp);\n\tfor (int i=head[u];i;i=bian[i].next){\n\t\tint v=bian[i].to;\n\t\tif (v!=e[u].fa&&v!=e[u].zson) dfs2(v,v);\n\t}\n}\nvoid update(int i){\n\tt[i].sum=t[i<<1].sum^t[i<<1|1].sum;\n} \nvoid build(int i,int l,int r){\n\tt[i].l=l,t[i].r=r;\n\tif (l==r){\n\t\tt[i].sum=in[rk[l]];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(i<<1,l,mid);\n\tbuild(i<<1|1,mid+1,r);\n\tupdate(i);\n}\nvoid change(int i,int dis,int k){\n\tif (t[i].l==t[i].r){\n\t\tt[i].sum=k;\n\t\treturn;\n\t}\n\tif (t[i<<1].r>=dis) change(i<<1,dis,k);\n\telse change(i<<1|1,dis,k);\n\tupdate(i);\n}\nint query(int i,int l,int r){\n\tif (t[i].l>=l&&t[i].r<=r) return t[i].sum;\n\tint ans=0;\n\tif (t[i<<1].r>=l) ans^=query(i<<1,l,r);\n\tif (t[i<<1|1].l<=r) ans^=query(i<<1|1,l,r);\n\treturn ans; \n}\nint query_(int x,int y){\n\tint ans=0;\n\twhile (e[x].top!=e[y].top){\n\t\tif (e[e[x].top].d<e[e[y].top].d) swap(x,y);\n\t\tans^=query(1,e[e[x].top].id,e[x].id);\n\t\tx=e[e[x].top].fa;\n\t}\n\tif (e[x].id>e[y].id) swap(x,y);\n\tans^=query(1,e[x].id,e[y].id);\n\treturn ans;\n}\nint main(){\n\tn=read(),q=read();\n\tfor (int i=1;i<=n;i++) in[i]=read();\n\tfor (int i=1;i<n;i++){\n\t\tint u=read(),v=read();\n\t\tadde(u,v),adde(v,u);\n\t}\n\tdfs1(1),tot=0,dfs2(1,1);\n\tbuild(1,1,n);//\u5efa\u6811\n\twhile (q--){//\u5904\u7406\u8be2\u95ee\n\t\tint op=read(),l=read(),r=read();\n\t\tif (op==1) change(1,e[l].id,r); \n\t\telse printf(\"%d\\n\",query_(l,r)); \n\t}\n\treturn 0;\n} \n```\n\n\u5b8c\u7ed3\u6492\u82b1\uff01\u5bf9\u4e86\uff0c\u518d\u6b21\u63d0\u9192\uff0c\u4e00\u5b9a\u8981**\u8f6c\u5e8f**\u54e6QwQ\uff01\n\n",
        "postTime": 1598452374,
        "uid": 257621,
        "name": "\u7ffc\u5fb7\u5929\u5c0a",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "__\u505a\u6cd5__\n\n\u8fd9\u662f\u4e00\u9053\u6811\u94fe\u5256\u5206\u6a21\u677f\u9898\uff0c\u8981\u6ce8\u610f\u7684\u5c31\u662f\u662f\u5f02\u6216\u4e0d\u662f\u6c42\u548c\n\n\u5728c++\u4e2d\u5f02\u6216\u7684\u7b26\u53f7\u662f```^```\n\n\u7136\u540e\u5199\u7ebf\u6bb5\u6811\u7684\u65f6\u5019\u6709\u4e24\u4e2a\u64cd\u4f5c\uff1a\u533a\u95f4\u67e5\u8be2\u5f02\u6216+\u5355\u70b9\u4fee\u6539\n\n\u5982\u679c\u6811\u94fe\u5256\u5206\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b\u6211\u7684\u8fd9\u7247[\u6587\u7ae0](https://s-y-c.top/2020/03/04/%E6%B5%85%E8%B0%88%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/)\n\n\u6ce8\u91ca\u4e5f\u6765\u81ea\u4e8e\u8fd9\u4e00\u7247\u6587\u7ae0\n\n__\u4ee3\u7801\uff1a__\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2147283647\nusing namespace std;\nconst int maxn=100005; \nint son[maxn],fa[maxn],n,tot,cnt,id[maxn],a[maxn],b[maxn],siz[maxn],top[maxn],lazy[maxn<<2],dep[maxn],head[maxn<<1],sum[maxn<<2];\nstruct nofe{\n    int u,v,next;\n}e[maxn<<1];\nvoid add(int u,int v)\n{\n    e[++cnt].u=u;\n    e[cnt].v=v;\n    e[cnt].next=head[u];\n    head[u]=cnt;\n}\nint dfs1(int now,int f,int d)//now\u662f\u73b0\u5728\u7684\u8282\u70b9\uff0cf\u662fnow\u7684\u7236\u4eb2\u8282\u70b9\uff0cd\u662f\u73b0\u5728\u7684\u6df1\u5ea6\n{\n    dep[now]=d;\n    fa[now]=f;\n    siz[now]=1;//\u5927\u5c0f\u521d\u59cb\u4e3a1\uff0c\u4e5f\u5c31\u662f\u672c\u8eab\n    int ma=-1;//ma\u4e3a\u73b0\u5728\u513f\u5b50\u4e2d\u6700\u5927\u7684siz\n    for(int i=head[now];i;i=e[i].next)//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n    {\n        if(e[i].v==f)//\u8fd9\u6837\u5c31\u662f\u6807\u8bb0\u8fc7\u4e86\uff0c\u56e0\u4e3a\u662f\u65e0\u5411\u8fb9\n            continue;\n        siz[now]+=dfs1(e[i].v,now,d+1);//\u81ea\u5df1\u7684\u5927\u5c0f=\u81ea\u5df1\u6240\u6709\u513f\u5b50\u7684\u5927\u5c0f\n        if(siz[e[i].v]>ma)//\u8fd9\u91cc\u662f\u627e\u91cd\u513f\u5b50\n            ma=siz[e[i].v],son[now]=e[i].v;\n    }\n    return siz[now];\n}\nvoid dfs2(int now,int t)//t\u4e3a\u73b0\u5728\u7684\u94fe\u5934\n{\n    id[now]=++tot;//\u7f16\u53f7\n    a[tot]=b[now];\n    top[now]=t;//\u94fe\u5934\n    if(!son[now])//\u8fd9\u662f\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u5c31\u4e0d\u9700\u8981\u7ee7\u7eed\u6267\u884c\u4e86\n        return;\n    dfs2(son[now],t);//\u4f18\u5148\u6807\u8bb0\u91cd\u513f\u5b50\n    for(int i=head[now];i;i=e[i].next)//\u904d\u5386\u6bcf\u4e00\u4e2a\u513f\u5b50\n    {\n    \tif(e[i].v==fa[now]||e[i].v==son[now])//\u8fd9\u5c31\u4ee3\u8868\u5904\u7406\u8fc7\u4e86\uff0c\u8df3\u8fc7\n    \t\tcontinue;\n            dfs2(e[i].v,e[i].v);//\u6bcf\u4e2a\u8f7b\u513f\u5b50\uff0c\u662f\u5355\u72ec\u7684\u4e00\u6761\u94fe\n    }\n}\nvoid build(int l,int r,int rt)//\u5efa\u6811\n{\n    if(l==r)\n    {\n        sum[rt]=a[l];\n        return;\n    }\n    int mid=l+r>>1;\n    build(l,mid,rt<<1);\n    build(mid+1,r,rt<<1|1);\n    sum[rt]=sum[rt<<1]^sum[rt<<1|1];\n    \n}\nvoid update(int l,int r,int rt,int i,int k)//\u5355\u70b9\u4fee\u6539\n{\n    if(l==r)\n    {\n        sum[rt]=k; \n\t    return;\n    }\n    int mid=l+r>>1;\n    if(i<=mid)\n    update(l,mid,rt<<1,i,k);\n    else \n    update(mid+1,r,rt<<1|1,i,k);\n    sum[rt]=sum[rt<<1]^sum[rt<<1|1];\n}\nint query(int l,int r,int rt,int i,int j)//\u533a\u95f4\u67e5\u8be2\u5f02\u6216\n{\n    if(i<=l&&r<=j)\n    {\n        return sum[rt];\n    }\n    int ans=0,mid=l+r>>1;\n    if(i<=mid)\n        ans^=query(l,mid,rt<<1,i,j);\n    \n    if(mid<j)\n        ans^=query(mid+1,r,rt<<1|1,i,j);\n    return ans;     \n}\nint treesum(int u,int v)\n{\n    int s=0;\n    int tu=top[u];\n\tint tv=top[v];\n\twhile(tu!=tv){\n\t\tif(dep[tu]<dep[tv]){\n\t\t\tswap(tu,tv);\n\t\t\tswap(u,v);\n\t\t}\n\t\ts^=query(1,n,1,id[tu],id[u]);\n                u=fa[tu];\n\t\ttu=top[u];\n\t}\n\tif(dep[u]>dep[v])swap(u,v);\n\ts^=query(1,n,1,id[u],id[v]);\n    return s;\n}\nint main(){\n    int q;\n    cin>>n>>q;\n    for(int i=1;i<=n;i++)\n        cin>>b[i];\n    for(int i=1;i<=n-1;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n        add(x,y);\n        add(y,x);\n    }\n    dfs1(1,0,1);\n    dfs2(1,1);\n    build(1,n,1);\n    for(int i=1;i<=q;i++)\n    {\n        int c,x,y;\n        cin>>c>>x>>y;\n        if(c==1)\n        {\n            update(1,n,1,id[x],y);\n        }\n        if(c==2)\n            cout<<treesum(x,y)<<endl;\n    }\n    return 0;\n}\n```",
        "postTime": 1587551499,
        "uid": 151647,
        "name": "sycqwq",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "\n# \u9898\u76ee\u5927\u610f\n\n\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u4ea6\u6216\u3002\n\n\n\u5f88\u591a\u540c\u5b66\u62c5\u5fc3\u53ef\u80fd\u7ebf\u6bb5\u6811\u65e0\u6cd5\u7ef4\u62a4\u533a\u95f4\u4ea6\u6216\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ed6\u53ef\u4ee5\u652f\u6301\u5f88\u591a\u64cd\u4f5c\n\n\u4f8b\u5982\u533a\u95f4\u5f00\u65b9\uff0c\u533a\u95f4\u6700\u5927\u503c\uff0c\u533a\u95f4\u4f17\u6570\u7b49\u7b49\u3002\n\n# \u89e3\u6cd5\n\n\u5148\u5bf9\u539f\u6765\u7684\u6811\u8fdb\u884c\u6811\u5256\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u6761\u91cd\u94fe\u548c\u8f7b\u94fe\uff0c\u7136\u540e\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4ea6\u6216\u3002\n\n\u4fee\u6539\u662f\u5bf9\u7ecf\u8fc7\u7684\u6bcf\u4e00\u6761\u94fe\u4fee\u6539\uff0c\u8f6c\u5316\u4e3a\u533a\u95f4\u4fee\u6539\uff0c\u67e5\u8be2\u540c\u7406\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\nusing namespace std;\nconst int N = 1e5+10;\n#define LL long long\nint n , m , opt , x , y ,tot , num;\nint dfn[N] , size[N] , top[N] , head[N] ;\nint fa[N] , a[N] , w[N] ,dep[N] , son[N]; \nstruct bian{int to , net ;}e[N*2];\nvoid add_(int x,int y)\n{\n\ttot++;\n\te[tot].to = y;\n\te[tot].net = head[x];\n\thead[x] = tot;\n}\nvoid get_tree(int x)//\u6811\u5256\u5e38\u89c4\u64cd\u4f5c\n{\n\tdep[x] = dep[fa[x]] + 1;\n\tsize[x] = 1;\n\tfor(int i = head[x]; i; i = e[i].net)\n\t{\n\t\tint to = e[i].to;\n\t\tif(to == fa[x]) continue;\n\t\tfa[to] = x;\n\t\tget_tree(to);\n\t\tsize[x] += size[to];\n\t\tif(size[to] > size[son[x]]) son[x] = to;\n\t}\n}\nvoid dfs(int x , int topp)\n{\n\ttop[x] = topp;\n\tdfn[x] = ++num ; w[dfn[x]] = a[x];\n\tif(son[x]) dfs(son[x] , topp);\n\tfor(int i = head[x]; i; i = e[i].net)\n\t{\n\t\tint to = e[i].to;\n\t\tif(to == fa[x] || to == son[x]) continue;\n\t\tdfs(to , to);\n\t}\n}\nstruct tree{//\u5c01\u88c5\u7ebf\u6bb5\u6811\n\tstruct node{\n\t\tint lc , rc ;\n\t\tLL sum;\n\t}tr[N<<2];\n\t#define l(o) tr[o].lc\n\t#define r(o) tr[o].rc\n\t#define sum(o) tr[o].sum\n\tvoid up(int o)\n\t{\n\t\tsum(o) = sum(o*2) ^ sum(o*2+1);\n\t}\n\tvoid build(int o , int L , int R)\n\t{\n\t\tl(o) = L , r(o) = R;\n\t\tif(L == R)\n\t\t{\n \t\t\tsum(o) = w[L]; return ;\n\t\t}\n\t\tint mid = (L + R) / 2;\n\t\tbuild(o*2, L , mid);\n\t\tbuild(o*2+1 , mid+1 , R);\n\t\tup(o);\n\t}\n\tvoid chenge(int o , int L , int R , int val)\n\t{\n\t\tif(L <= l(o) && R >= r(o))\n\t\t{\n\t\t\tsum(o) = val; return ;\n\t\t}\n\t\tint mid = (l(o) + r(o) ) / 2;\n\t\tif(L <= mid) chenge(o*2 , L , R , val);\n\t\tif(R > mid) chenge(o*2+1 , L , R , val);\n\t\tup(o);\n\t}\n\tLL ask(int o , int L , int R)\n\t{\n\t\tLL ans = 0;\n\t\tif(L <= l(o) && R >= r(o))\n\t\t{\n\t\t\treturn sum(o);\n\t\t}\n\t\tint mid = (l(o) + r(o)) / 2;\n\t\tif(L <= mid) ans = ans ^ ask(o*2 , L ,R);\n\t\tif(R > mid) ans = ans ^ ask(o*2+1 , L , R);\n\t\treturn ans;\n\t}\n}tree;\nLL query(int x , int y)//\u8f6c\u5316\u4e3a\u533a\u95f4\u95ee\u9898\n{\n\tLL ans = 0;\n\twhile(top[x] != top[y])\n\t{\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x , y);\n\t\tans = ans ^ tree.ask(1 , dfn[top[x]] , dfn[x]);//\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u4ea6\u6216\n\t\tx = fa[top[x]];\n\t}\n\tif(dep[x] > dep[y]) swap(x , y);\n\tans = ans ^ tree.ask(1 , dfn[x] , dfn[y]);//\u6700\u540e\u5904\u7406\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u60c5\u51b5\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i = 1; i <= n; i++) scanf(\"%d\",&a[i]);\n\tfor(int i = 1; i <= n-1; i++)\n\t{\n\t\tscanf(\"%d%d\" , &x,&y);\n\t\tadd_(x,y); add_(y,x);\n\t}\n\tget_tree(1);//\u5904\u7406\u51fa\u91cd\u513f\u5b50\n\tdfs(1 , 1);//\u627e\u6bcf\u6761\u94fe\u7684\u94fe\u7aef\n\ttree.build(1 , 1 , n);\n\tfor(int i = 1; i <= m; i++)\n\t{\n\t\tscanf(\"%d%d%d\",&opt,&x,&y);\n\t\tif(opt == 1)tree.chenge(1 , dfn[x] , dfn[x] , y);\n\t        if(opt==2)printf(\"%lld\\n\",query(x,y));\n\t}\n\treturn 0;\n}\n```\n\n\u672c\u4eba\u7801\u98ce\u8fc7\u4e11\uff0c\u52ff\u55b7\u3002\u3002\u3002\u3002",
        "postTime": 1595283848,
        "uid": 248896,
        "name": "genshy",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "~~\u5b66\u6811\u5256\u7684\u7b2c\u4e8c\u5929~~\u3002\n\n\u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743\u3002\n\n\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\u5355\u70b9\u4fee\u6539\u4e0e\u8be2\u95ee\u8def\u5f84\u4e0a\u70b9\u7684\u6743\u503c\u7684\u5f02\u6216\u503c\u3002\n\n### \u601d\u8def\n\u663e\u7136\u6811\u5256\u677f\u5b50\u3002\n\n\u5355\u70b9\u4fee\u6539\u4e0d\u89e3\u91ca\u3002\n\n\u8be2\u95ee\u8def\u5f84\u4e0a\u70b9\u7684\u6743\u503c\u7684\u5f02\u6216\u503c\uff0c\u7531\u4e8e\u5f02\u6216\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u76f4\u63a5\u6bcf\u6bb5\u7684\u5f02\u6216\u503c\u5f02\u6216\u8d77\u6765\u5c31\u597d\u4e86\u3002\n\n### \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n#define N 100010\n\nusing namespace std;\n\ninline int read() {\n\tint x=0,w=1;\n\tchar ch=0;\n\twhile(ch<'0'||ch>'9') {if(ch=='-') w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n\treturn w*x;\n}\n\nint n,q,e[N],head[N],fa[N],tot=0,depth[N],size[N],son[N],top[N],id[N],rk[N],cnt=0;\nstruct graph{\n\tint v,next;\n}edge[N<<1];\nclass SegmentTree{\n  private:\n  \tint data[N<<2];\n  \t#define d(x) data[x]\n  \t#define ls (p<<1)\n  \t#define rs (ls|1)\n  \t#define mid (l+r>>1)\n    inline void update(int p) {\n    \td(p)=d(ls)^d(rs);\n    }\n  public:\n  \tvoid build(int p,int l,int r) {\n  \t\tif(l==r) {\n  \t\t\td(p)=e[rk[l]];\n  \t\t\treturn ;\n  \t\t}\n  \t\tbuild(ls,l,mid);\n  \t\tbuild(rs,mid+1,r);\n  \t\tupdate(p);\n  \t}\n  \tvoid change(int p,int l,int r,int x,int y) {\n  \t\tif(l==r) {\n  \t\t\td(p)=y;\n  \t\t\treturn ;\n  \t\t}\n  \t\tif(x<=mid) change(ls,l,mid,x,y);\n  \t\telse change(rs,mid+1,r,x,y);\n  \t\tupdate(p);\n  \t}\n  \tint ask(int p,int l,int r,int L,int R) {\n  \t\tif(l>R||r<L) return 0;\n  \t\tif(l>=L&&r<=R) return d(p);\n  \t\treturn ask(ls,l,mid,L,R)^ask(rs,mid+1,r,L,R);\n  \t}\n}T;\n\nvoid add(int u,int v) {\n\tedge[++tot].v=v;\n\tedge[tot].next=head[u];\n\thead[u]=tot;\n}\n\nvoid dfs_first(int u) {\n\tdepth[u]=depth[fa[u]]+1;\n\tsize[u]=1;\n\tfor(int i=head[u];i;i=edge[i].next) {\n\t\tint v=edge[i].v;\n\t\tif(v==fa[u]) continue;\n\t\tfa[v]=u;\n\t\tdfs_first(v);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]]) son[u]=v;\n\t}\n}\n\nvoid dfs_second(int u,int t) {\n\tif(!u) return ;\n\ttop[u]=t;\n\tid[u]=++cnt;\n\trk[cnt]=u;\n\tdfs_second(son[u],t);\n\tfor(int i=head[u];i;i=edge[i].next) {\n\t\tint v=edge[i].v;\n\t\tif(v!=fa[u]&&v!=son[u]) dfs_second(v,v);\n\t}\n}\n\nvoid init() {\n\tdfs_first(1);\n\tdfs_second(1,1);\n\tT.build(1,1,n);\n}\n\nint ask(int x,int y) {\n\tint ans=0;\n\twhile(top[x]!=top[y]) {\n\t\tif(depth[top[x]]<depth[top[y]]) swap(x,y);\n\t\tans^=T.ask(1,1,n,id[top[x]],id[x]);\n\t\tx=fa[top[x]];\n\t}\n\tif(id[x]>id[y]) swap(x,y);\n\tans^=T.ask(1,1,n,id[x],id[y]);\n\treturn ans;\n}\n\t\t\nint main() {\n\tn=read(),q=read();\n\tfor(int i=1;i<=n;i++) e[i]=read();\n\tfor(int i=1;i<n;i++) {\n\t\tint u,v;\n\t\tu=read(),v=read();\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\t\n\tinit();\n\tfor(int i=1;i<=q;i++) {\n\t\tint ins,x,y;\n\t\tins=read(),x=read(),y=read();\n\t\tswitch(ins) {\n\t\t\tcase 1:T.change(1,1,n,id[x],y);break;\n\t\t\tcase 2:printf(\"%d\\n\",ask(x,y));break;\n\t\t}\n\t}\n\t\n\treturn 0;\n}\n```",
        "postTime": 1594905200,
        "uid": 71936,
        "name": "HoshiuZ",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n1 i v\uff0c\u8868\u793a\u5c06 e_ie i\u4fee\u6539\u4e3a vv \u3002\n\n2 i j\uff0c\u8868\u793a\u8be2\u95ee\u4ece\u666f\u70b9 i\u5230\u666f\u70b9 j\u7684\u8def\u7ebf\u7684\u4eab\u53d7\u503c\u4e3a\u591a\u5c11\u3002\n## solution\n\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\uff08\u5355\u7ebf\u4fee\u6539+\u533a\u95f4\u5f02\u6216\uff09\n\n\u6ce8\u610f^\u7684\u4f18\u5148\u7ea7\u6bd4=\u5c0f\n\n\u8981\u5199\u6210\u8fd9\u6837\n\n>tree[rt].sum = (tree[lson].sum ^ tree[rson].sum);\n\n## code\n```cpp\n/*\n\tAuther:_Destiny\n\ttime:2020.5.4\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define N 100010\n#define M 1010\n\nusing namespace std;\nint n, m;\nint pre[N], w[N], dep[N], top[N], siz[N], fath[N], son[N], dfn[N];\n\nint read() {\n\tint s = 0, f = 0; char ch = getchar();\n\twhile (!isdigit(ch)) f |= (ch == '-'), ch = getchar();\n\twhile (isdigit(ch)) s = s * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -s : s;\n}\n\nnamespace Seg {\n\t#define lson rt << 1\n\t#define rson rt << 1 | 1\n\tstruct node {\n\t\tint sum;\n\t}tree[N << 2];\n\tvoid push_up(int rt) {\n\t\ttree[rt].sum = (tree[lson].sum ^ tree[rson].sum);\n\t}\n\tvoid build(int rt, int l, int r) {\n\t\tif (l == r) {\n\t\t\ttree[rt].sum = w[pre[l]];\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(lson, l, mid);\n\t\tbuild(rson, mid + 1, r);\n\t\tpush_up(rt);\n\t}\n\tvoid update(int rt, int c, int l, int r, int pow) {\n\t\tif (l == r) {\n\t\t\ttree[rt].sum = c;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tif (pow <= mid) update(lson, c, l, mid, pow);\n\t\telse update(rson, c, mid + 1, r, pow);\n\t\tpush_up(rt);\n\t}\n\tint query(int rt, int l, int r, int L, int R) {\n\t\tif (L <= l && r <= R) return tree[rt].sum;\n\t\tint mid = (l + r) >> 1, ans = 0;\n\t\tif (L <= mid) ans ^= query(lson, l, mid, L, R);\n\t\tif (R > mid) ans ^= query(rson, mid + 1, r, L, R);\n\t\treturn ans;\n\t}\n}\n\nnamespace Cut {\n\tint head[N << 1], add_edge, cnt;\n\tstruct node {\n\t\tint next, to;\n\t}edge[N << 1];\n\tvoid add(int from, int to) {\n\t\tedge[++add_edge].next = head[from];\n\t\tedge[add_edge].to = to;\n\t\thead[from] = add_edge;\n\t}\n\tvoid dfs(int x, int fa) {\n\t\tfath[x] = fa, dep[x] = dep[fa] + 1, siz[x] = 1;\n\t\tfor (int i = head[x]; i; i = edge[i].next) {\n\t\t\tint to = edge[i].to;\n\t\t\tif (to == fa) continue;\n\t\t\tdfs(to, x), siz[x] += siz[to];\n\t\t\tif (siz[son[x]] < siz[to]) son[x] = to;\n\t\t}\n\t}\n\tvoid dfs2(int x, int tp) {\n\t\tdfn[x] = ++cnt, pre[cnt] = x, top[x] = tp;\n\t\tif (son[x]) dfs2(son[x], tp);\n\t\tfor (int i = head[x]; i; i = edge[i].next) {\n\t\t\tint to = edge[i].to;\n\t\t\tif (to == fath[x] || to == son[x]) continue;\n\t\t\tdfs2(to, to);\n\t\t}\n\t}\n\tint ask(int x, int y) {\n\t\tint ans = 0;\n\t\twhile (top[x] != top[y]) {\n\t\t\tif (dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\t\tans ^= Seg::query(1, 1, n, dfn[top[x]], dfn[x]);\n\t\t\tx = fath[top[x]];\n\t\t}\n\t\tif (dfn[x] > dfn[y]) swap(x, y);\n\t\tans ^= Seg::query(1, 1, n, dfn[x], dfn[y]);\n\t\treturn ans;\n\t}\n}\n\nint main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) \n\t\tw[i] = read();\n\tfor (int i = 1, x, y; i <= n - 1; i++) {\n\t\tx = read(), y = read();\n\t\tCut::add(x, y), Cut::add(y, x);\n\t}\n\tCut::dfs(1, 1), Cut::dfs2(1, 1), Seg::build(1, 1, n);\n\tfor (int i = 1, opt, x, y; i <= m; i++) {\n\t\topt = read();\n\t\tif (opt == 1) {\n\t\t\tx = read(), y = read();\n\t\t\tSeg::update(1, y, 1, n, dfn[x]);\n\t\t}\n\t\tif (opt == 2) {\n\t\t\tx = read(), y = read();\n\t\t\tprintf(\"%d\\n\", Cut::ask(x, y));\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1588688902,
        "uid": 188155,
        "name": "K2sen",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "\u6c34\u7bc7\u9898\u89e3\uff0c\u4e0d\u7136\u5495\u503c\u6389\u6ca1\u4e86\u3002/kk\n\n### \u9898\u76ee\n[P6098 \u3010[USACO19FEB]Cow Land G\u3011](https://www.luogu.com.cn/problem/P6098)\n\n### \u601d\u8def\n\u6811\u94fe\u5256\u5206\u3002\u9700\u8981\u7528\u5230\u7684\u64cd\u4f5c\u6709\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\u3002\n\n0.\u5355\u70b9\u4fee\u6539\n```cpp\nvoid update(int x,int k,int now) {//\u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\u3002\n\tif(tree[now].l==tree[now].r) {//\u627e\u5230\u4e86\u8981\u6539\u7684\u70b9\n\t\ttree[now].w=k;return;\n\t}\n\tint mid=(tree[now].l+tree[now].r)>>1;\n\tif(x<=mid) update(x,k,lson);//\u8981\u6539\u7684\u70b9\u5728\u5f53\u524d\u533a\u95f4\u7684\u5de6\u8fb9\n\telse update(x,k,rson);//\u5728\u53f3\u8fb9\n\ttree[now].w=(tree[lson].w^tree[rson].w);//\u5408\u5e76\u4e00\u4e0b\u5c0f\u533a\u95f4\u7684\u5230\u5927\u533a\u95f4\u7684\u503c\u3002\n}\n```\n\n0.\u533a\u95f4\u67e5\u8be2\n```cpp\nint ask(int x,int y) {//\u7528\u4e8e\u5c06\u4e00\u6761\u8def\u5f84\u5206\u6210\u597d\u51e0\u4e2a\u5728\u7ebf\u6bb5\u6811\u4e0a\u8fde\u7eed\u7684\u94fe\u3002\n\tint ans=0;\n\twhile(top[x]!=top[y]) {//\u5f53\u4e24\u70b9\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\n\t\tif(dep[top[x]]<dep[top[y]]) std::swap(x,y);//\u5148\u8df3\u94fe\u9876\u6df1\u5ea6\u5927\u7684\u70b9\u3002\n\t\tans^=Seg::query(dfn[top[x]],dfn[x],1);//\u7b54\u6848\u5f02\u6216\u4e0a\u8fd9\u6761\u94fe\u7684\u503c\u3002\n\t\tx=fa[top[x]];//\u8df3\u5230\u8fd9\u6761\u94fe\u7684\u94fe\u9876\u7684\u7236\u4eb2\n\t}\n\tif(dep[x]>dep[y]) std::swap(x,y);//\u4e24\u4e2a\u70b9\u5728\u4e00\u6761\u94fe\u4e0a\u5904\u7406\u4e00\u4e0b\u8fd9\u6761\u94fe\u3002\n\tans^=Seg::query(dfn[x],dfn[y],1);\n\treturn ans;\n}\nint query(int x,int y,int now) {//\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\n\tif(tree[now].l>=x&&tree[now].r<=y) return tree[now].w;\n\tint mid=(tree[now].l+tree[now].r)>>1,ans=0;\n\tif(x<=mid) ans^=query(x,y,lson);\n\tif(y>mid) ans^=query(x,y,rson);\n\treturn ans;\n}\n```\n### Code\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<string>\n#include<iostream>\n#include<algorithm>\n#define MAXN 100001\n\ninline void read(int &T) {\n\tint x=0;bool f=0;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=!f;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n\tT=f?-x:x;\n}\n\nint n,q,dfn[MAXN],pre[MAXN],w[MAXN],size[MAXN];\n\nnamespace Seg {\n\t#define lson now<<1\n\t#define rson now<<1|1\n\tstruct Node {\n\t\tint l,r,w;\n\t}tree[MAXN<<2];\n\tvoid build(int l,int r,int now) {\n\t\ttree[now].l=l,tree[now].r=r;\n\t\tif(tree[now].l==tree[now].r) {\n\t\t\ttree[now].w=w[pre[l]];return;\n\t\t}\n\t\tint mid=(tree[now].l+tree[now].r)>>1;\n\t\tbuild(l,mid,lson),build(mid+1,r,rson);\n\t\ttree[now].w=(tree[lson].w^tree[rson].w);\n\t}\n\tvoid update(int x,int k,int now) {\n\t\tif(tree[now].l==tree[now].r) {\n\t\t\ttree[now].w=k;return;\n\t\t}\n\t\tint mid=(tree[now].l+tree[now].r)>>1;\n\t\tif(x<=mid) update(x,k,lson);\n\t\telse update(x,k,rson);\n\t\ttree[now].w=(tree[lson].w^tree[rson].w);\n\t}\n\tint query(int x,int y,int now) {\n\t\tif(tree[now].l>=x&&tree[now].r<=y) return tree[now].w;\n\t\tint mid=(tree[now].l+tree[now].r)>>1,ans=0;\n\t\tif(x<=mid) ans^=query(x,y,lson);\n\t\tif(y>mid) ans^=query(x,y,rson);\n\t\treturn ans;\n\t}\n}\n\nnamespace Cut {\n\tint cnt,pthn,head[MAXN],dep[MAXN];\n\tint top[MAXN],son[MAXN],fa[MAXN];\n\tstruct Edge {\n\t\tint next,to;\n\t}pth[MAXN<<1];\n\tvoid add(int from,int to) {\n\t\tpth[++pthn].to=to,pth[pthn].next=head[from];\n\t\thead[from]=pthn;\n\t}\n\tvoid dfs1(int u,int father) {\n\t\tdep[u]=dep[father]+1,fa[u]=father,size[u]=1;\n\t\tfor(int i=head[u];i;i=pth[i].next) {\n\t\t\tint x=pth[i].to;\n\t\t\tif(x!=father) {\n\t\t\t\tdfs1(x,u),size[u]+=size[x];\n\t\t\t\tif(size[son[u]]<size[x]) son[u]=x;\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs2(int u,int tp) {\n\t\ttop[u]=tp,dfn[u]=++cnt,pre[cnt]=u;\n\t\tif(son[u]) dfs2(son[u],tp);\n\t\tfor(int i=head[u];i;i=pth[i].next) {\n\t\t\tint x=pth[i].to;\n\t\t\tif(x!=fa[u]&&x!=son[u]) dfs2(x,x);\n\t\t}\n\t}\n\tint ask(int x,int y) {\n\t\tint ans=0;\n\t\twhile(top[x]!=top[y]) {\n\t\t\tif(dep[top[x]]<dep[top[y]]) std::swap(x,y);\n\t\t\tans^=Seg::query(dfn[top[x]],dfn[x],1);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]>dep[y]) std::swap(x,y);\n\t\tans^=Seg::query(dfn[x],dfn[y],1);\n\t\treturn ans;\n\t}\n}\n\nint main() {\n\tread(n);read(q);\n\tfor(int i=1;i<=n;++i) read(w[i]);\n\tfor(int i=1,u,v;i<n;++i) {\n\t\tread(u),read(v);\n\t\tCut::add(u,v),Cut::add(v,u);\n\t}\n\tCut::dfs1(1,1),Cut::dfs2(1,1),Seg::build(1,n,1);\n\tfor(int i=1,opt,x,y;i<=q;++i) {\n\t\tread(opt),read(x),read(y);\n\t\tif(opt==1) Seg::update(dfn[x],y,1);\n\t\telse printf(\"%d\\n\",Cut::ask(x,y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1588684936,
        "uid": 142110,
        "name": "yu__xuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "\u4e0d\u7528\u6811\u5256\uff0c\u4f46\u662f\u7801\u7684\u4e11\uff0c\u52c9\u5f3a\u770b\u770b\n\n\u8fd9\u9053\u9898\u6734\u7d20\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5c9b\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u5f02\u6216\u7684\u7ed3\u679c\uff0c\u8bbe\u5176\u4e3a$dis[i]$\uff0c\u4fee\u6539\u7684\u65f6\u5019\u66b4\u529b\u7ef4\u62a4$dis$\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u77e5\u9053$dis[u]$, $dis[v]$\u548c$e[lca(u,v)]$\u3002\n\n\u8003\u8651\u4f18\u5316\uff0c\u53d1\u73b0\u4e00\u4e2a\u70b9\u7684$e$\u503c\u6709\u66f4\u6539\uff0c\u5f71\u54cd\u5230\u7684\u662f\u6574\u4e2a\u5b50\u6811\u7684$dis$\u3002  \n\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7ef4\u62a4\u5355\u70b9\u67e5\u8be2\uff0c\u5b50\u6811\u4fee\u6539\uff08\u96fe\uff09\n\n\u8003\u8651\u628a\u4e00\u68f5\u6811\u62c9\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7ed3\u8bba\u662f\u4e00\u68f5\u5b50\u6811\u91cc\u9762\u7684\u70b9\u7684$dfs$\u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u5c31\u53ef\u4ee5\u6839\u636e$dfs$\u5e8f\u5f00\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\uff0c\u4e0b\u6807\u4e3a\u6bcf\u4e2a\u70b9\u7684$dfs$\u5e8f\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\uff0c\u4e5f\u8bb8\u6bd4\u6811\u5256\u5feb\u3002\n\n```cpp\n#include <cstdio>\n#define N 100010\n#define fo(i, a, b) for(int i = (a); i <= (b); ++i)\n#define fd(i, a, b) for(int i = (a); i >= (b); --i)\nstruct Edge\n{\n\tint v, x;\n}edge[N << 1];\nint n, q, d, len, t[N], dep[N], f[N][20], a[N], e[N], head[N], dfn[N], siz[N];\nvoid add(int u, int v)\n{\n\tedge[++len] = (Edge){v, head[u]};\n\thead[u] = len;\n}\nint tree[N << 2], tag[N << 2];\ninline int ck(int l, int r){return (r - l + 1) & 1;}\ninline int ls(int t){return t << 1;}\ninline int rs(int t){return t << 1 | 1;}\nvoid pushdown(int t, int l, int r)\n{\n\tint lt = ls(t), rt = rs(t);\n\ttag[lt] ^= tag[t], tag[rt] ^= tag[t];\n\tint mid = (l + r) >> 1;\n\ttree[lt] ^= (ck(l, mid) * tag[t]);\n\ttree[rt] ^= (ck(mid + 1, r) * tag[t]);\n\ttag[t] = 0;\n}\nvoid pushup(int t){tree[t] = tree[ls(t)] ^ tree[rs(t)];}\nvoid update(int t, int l, int r, int fl, int fr, int val)\n{\n\tif(fl <= l && r <= fr)\n\t{\n\t\ttree[t] ^= (ck(l, r) * val); tag[t] ^= val;\n\t\treturn ;\n\t}\n\tpushdown(t, l, r);\n\tint mid = (l + r) >> 1;\n\tif(fl <= mid)\tupdate(ls(t), l, mid, fl, fr, val);\n\tif(fr > mid)\tupdate(rs(t), mid + 1, r, fl, fr, val);\n\tpushup(t);\n}\nint query(int t, int l, int r, int w)\n{\n\tif(l == r)\treturn tree[t];\n\tpushdown(t, l, r);\n\tint mid = (l + r) >> 1;\n\tif(w <= mid)\treturn query(ls(t), l, mid, w);\n\telse\treturn query(rs(t), mid + 1, r, w);\n}\nvoid dfs(int u, int fat)\n{\n\tsiz[u] = 1;\n\tdfn[u] = ++d;\n\ta[u] ^= a[fat];\n\tdep[u] = dep[fat] + 1;\n\tf[u][0] = fat;\n\tfo(i, 1, 19)\n\t\tf[u][i] = f[f[u][i - 1]][i - 1];\n\tfor(int i = head[u]; i; i = edge[i].x)\n\t{\n\t\tint v = edge[i].v;\n\t\tif(v == fat)\tcontinue ;\n\t\tdfs(v, u);\n\t\tsiz[u] += siz[v];\n\t}\n}\nvoid build(int t, int l, int r)\n{\n\tif(l == r)\n\t{\n\t\ttree[t] = e[l];\n\t\treturn ;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(t), l, mid); build(rs(t), mid + 1, r);\n\tpushup(t);\n}\nint lca(int u, int v)\n{\n\tif(dep[u] < dep[v]){int t = u; u = v; v = t;}\n\tfd(i, 19, 0)\n\t\tif(dep[f[u][i]] >= dep[v])\n\t\t\tu = f[u][i];\n\tif(u == v)\treturn u;\n\tfd(i, 19, 0)\n\t\tif(f[u][i] != f[v][i])\n\t\t\tu = f[u][i], v = f[v][i];\n\treturn f[u][0];\n}\nint main()\n{\n\tfreopen(\"cowland.in\", \"r\", stdin);\n\tfreopen(\"cowland.out\", \"w\", stdout);\n\tscanf(\"%d %d\", &n, &q);\n\tint u, v;\n\tfo(i, 1, n)\tscanf(\"%d\", &a[i]), t[i] = a[i];\n\tfo(i, 2, n)\n\t{\n\t\tscanf(\"%d %d\", &u, &v);\n\t\tadd(u, v); add(v, u);\n\t}\n\tdfs(1, 0);\n\tfo(i, 1, n)\te[dfn[i]] = a[i];\n\tbuild(1, 1, n);\n\tfo(i, 1, n)\te[dfn[i]] = t[i];\n\tfo(i, 1, q)\n\t{\n\t\tint tp;\n\t\tscanf(\"%d\", &tp);\n\t\tif(tp == 1)\n\t\t{\n\t\t\tscanf(\"%d\", &u);\n\t\t\tupdate(1, 1, n, dfn[u], dfn[u] + siz[u] - 1, e[dfn[u]]);\n\t\t\tscanf(\"%d\", &e[dfn[u]]);\n\t\t\tupdate(1, 1, n, dfn[u], dfn[u] + siz[u] - 1, e[dfn[u]]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tscanf(\"%d %d\", &u, &v);\n\t\t\tint fkw = lca(u, v);\n\t\t\tu = query(1, 1, n, dfn[u]);\n\t\t\tv = query(1, 1, n, dfn[v]);\n\t\t\tprintf(\"%d\\n\", u ^ v ^ e[dfn[fkw]]);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\u522b\u95ee\u6211\u4e3a\u4ec0\u4e48\u53d8\u91cf\u540d\u53ebfkw\uff0c\u95ee\u5c31\u662f\u67d0\u6e38\u67d0\u6c60\u6c89\u4e86",
        "postTime": 1588641166,
        "uid": 112395,
        "name": "Martin_MHT",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6098)  \n# \u9898\u610f\n\u7ed9\u4f60\u4e00\u4e2a\u6709$N$\u4e2a\u8282\u70b9\u7684\u6811\uff0c \u5176\u4e2d\u6bcf\u4e2a\u70b9$i$\u90fd\u6709\u4e00\u4e2a\u503c$ei$\uff0c\u73b0\u5728\u7ed9\u51fa$M$\u4e2a\u64cd\u4f5c\uff0c\u8981\u6c42\u4f60\u5b8c\u6210\u8fd9\u4e9b\u64cd\u4f5c\n\n\u4e00\u5171\u6709\u4e24\u79cd\u64cd\u4f5c:  \n$\\qquad$\t\u7b2c\u4e00\u79cd\uff1a$1$ $x$ $y$ \u8868\u793a\u5c06\u7b2c$i$\u4e2a\u70b9\u7684\u503c\u6539\u4e3a$y$  \n$\\qquad$   \u7b2c\u4e8c\u79cd\uff1a$2$ $x$ $y$ \u8868\u793a\u8be2\u95ee\u7b2c$x$\u4e2a\u70b9\u5230\u7b2c$y$\u4e2a\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684\u5f02\u6216\u503c  \n# \u601d\u8def\n\u770b\u5230\u533a\u95f4\u67e5\u8be2\u548c\u5355\u70b9\u4fee\u6539\uff0c\u5f88\u5bb9\u6613\u5c31\u53ef\u4ee5\u60f3\u5230\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\uff0c\u5e76\u4e14\u662f\u5728\u4e00\u68f5\u6811\u7684\u67e5\u8be2\u548c\u4fee\u6539\uff0c\u6b63\u89e3\u663e\u7136\u5c31\u662f\u6811\u94fe\u5256\u5206\u3002\n\n\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u6bd4\u8f83\u5947\u602a\u7684\u4e1c\u897f\uff0c\u5c31\u662f\u533a\u95f4\u67e5\u8be2\u7684\u4e0d\u662f\u548c\uff0c\u800c\u662f\u5f02\u6216\u503c\u3002\u6709\u7684\u4eba\u53ef\u80fd\u4f1a\u4ee5\u4e3a\u4e0d\u80fd\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4f46\u5176\u5b9e\u662f\u53ef\u4ee5\u7684\uff01  \n\n\u56e0\u4e3a\u5f02\u6216\u503c\u662f\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u7684  \n\u4e5f\u5c31\u662f\u8bf4\n\n$a$ $xor$ $b$ = $b$ $xor$ $a$ \u5e76\u4e14  $a\\; xor\\; \\left(b\\; xor\\; c\\right)$ = $\\left(a\\; xor\\; b\\right)\\; xor\\; c$  \n\n\u611f\u6027\u8bc1\u660e\u4e00\u4e0b\uff1a  \n\n\u670910010\u300111001\u300101100\u4e09\u4e2a\u6570\uff0c\u8981\u6c42\u4ed6\u4eec\u7684\u5f02\u6216\u503c\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u7b54\u6848\u4e0a\u7684\u6bcf\u4e00\u4f4d\u53ea\u8ddf\u539f\u6765\u6bcf\u4e00\u4f4d\u4e0a\u6709\u5947\u6570\u4e2a1\u8fd8\u662f\u5076\u6570\u4e2a1\u76f8\u5173\uff0c\u5f88\u663e\u7136\u6bcf\u4e00\u4f4d\u4e0a\u76841\u7684\u5947\u5076\u6027\u662f\u4e0d\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5\u65e0\u8bba\u600e\u4e48\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7b54\u6848\u4e5f\u4e0d\u4f1a\u53d8\uff0c\u4e5f\u5c31\u662f\u6ee1\u8db3\u4ea4\u6362\u5f8b\u548c\u7ed3\u5408\u5f8b\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u597d\u529e\u4e86\uff0c\u53ea\u9700\u8981\u628a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c\u6539\u6210\u5f02\u6216\u503c\u5c31OK\u4e86\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u88f8\u7684\u6811\u5256\u4e86\n# \u4ee3\u7801\n~~\u53c8\u5230\u4e86\u5927\u5bb6\u559c\u95fb\u4e50\u89c1\u7684\u653e\u4ee3\u7801\u73af\u8282~~\n```\n#include <cstdio>\n#include <algorithm>\n#define maxn 100010\nusing namespace std;\nstruct EDGE\n{\n\tint to, next;\n}edge[maxn << 1];\nint t[maxn << 2];\nint n, m;\nint head[maxn], cxk, cnt, ans;\nint a[maxn], w[maxn], son[maxn], dep[maxn], f[maxn], id[maxn], top[maxn], size[maxn];\nvoid add(int u, int v)\n{\n\tedge[++cxk].next = head[u];\n\tedge[cxk].to = v;\n\thead[u] = cxk;\n\treturn;\n}\nvoid build(int wz, int l, int r)\n{\n\tif (l == r)\n\t{\n\t\tt[wz] = w[l];\n\t\treturn;\n\t}\n\tint mid = (l + r) /2;\n\tbuild(wz * 2, l, mid);\n\tbuild(wz * 2 + 1, mid + 1, r);\n\tt[wz] = t[wz * 2] ^ t[wz * 2 + 1];\n\treturn;\n}\nvoid update(int wz, int l, int r, int x, int kkk)\n{\n\tif (l == x && r == x)\n\t{\n\t\tt[wz] = kkk;\n\t\treturn;\n\t}\n\tint mid = (l + r) / 2;\n\tif (mid + 1 <= x)\n\t\tupdate(wz * 2 + 1, mid + 1, r, x, kkk);\n\telse\n\t\tupdate(wz * 2, l, mid, x, kkk);\n\tt[wz] = t[wz * 2] ^ t[wz * 2 + 1];\n\treturn;\n}\nvoid sum(int wz, int l, int r, int x, int y)\n{\n\tif (l >= x && r <= y)\n\t{\n\t\tans ^= t[wz];\n\t\treturn;\n\t}\n\tint mid = (l + r) / 2;\n\tif (mid + 1 <= y)\n\t\tsum(wz * 2 + 1, mid + 1, r, x, y);\n\tif (mid >= x)\n\t\tsum(wz * 2, l, mid, x, y);\n\treturn;\n}\nvoid query(int x, int y)\n{\n\tans = 0;\n\twhile (top[x] != top[y])\n\t{\n\t\tif (dep[top[x]] < dep[top[y]])\n\t\t\tswap(x, y);\n\t\tsum(1, 1, n, id[top[x]], id[x]);\n\t\tx = f[top[x]];\n\t}\n\tif (dep[x] > dep[y])\n\t\tswap(x, y);\n\tsum(1, 1, n, id[x], id[y]);\n\treturn;\n}\nvoid dfs1(int u, int fa)\n{\n\tint mx = -1, d = 0;\n\tdep[u] = dep[fa] + 1;\n\tf[u] = fa;\n\tsize[u] = 1;\n\tfor (int i = head[u]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tif (v == fa)\n\t\t\tcontinue;\n\t\tdfs1(v, u);\n\t\tsize[u] += size[v];\n\t\tif (size[v] > mx)\n\t\t{\n\t\t\tmx = size[v];\n\t\t\td = v;\n\t\t}\n\t}\n\tson[u] = d;\n\treturn;\n}\nvoid dfs2(int u, int tf)\n{\n\ttop[u] = tf;\n\tid[u] = ++cnt;\n\tw[cnt] = a[u];\n\tif (son[u] == 0)\n\t\treturn;\n\tdfs2(son[u], tf);\n\tfor (int i = head[u]; i; i = edge[i].next)\n\t{\n\t\tint v = edge[i].to;\n\t\tif (v == f[u] || v == son[u])\n\t\t\tcontinue;\n\t\tdfs2(v, v);\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; ++i)\n\t\tscanf(\"%d\", &a[i]);\n\tfor (int i = 1; i < n; ++i)\n\t{\n\t\tint u, v;\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tadd(u, v);\n\t\tadd(v, u);\n\t}\n\tdfs1(1, 0);\n\tdfs2(1, 1);\n\tbuild(1, 1, n);\n\tfor (int i = 1; i <= m; ++i)\n\t{\n\t\tint op, x, y;\n\t\tscanf(\"%d%d%d\", &op, &x, &y);\n\t\tif (op == 1)\n\t\t\tupdate(1, 1, n, id[x], y);\n\t\telse\n\t\t{\n\t\t\tquery(x, y);\n\t\t\tprintf(\"%d\\n\", ans);\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n## \u6700\u540e\u7684\u8bdd\n\u8fd9\u662f\u672c\u849f\u84bb\u7b2c\u4e8c\u6b21\u5199\u7684\u9898\u89e3\uff0c\u53ef\u80fd\u4f1a\u6709\u5f88\u591a\u4e0d\u8db3\u7684\u5730\u65b9\uff0c\u4e0d\u559c\u52ff\u55b7\u3002  \n\u5982\u679c\u6211\u6709\u4ec0\u4e48\u8bf4\u9519\u4e86\uff0c\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u8bf4\u51fa\u6765\u6216\u8005\u79c1\u4fe1\u6211\u4e5f\u53ef\u4ee5\u3002  \n\u6700\u540e\u653e\u4e0a\u4e00\u4e2a[\u6811\u5256\u7684\u6559\u5b66](https://www.cnblogs.com/chinhhh/p/7965433.html)\uff0c\u6211\u5c31\u662f\u5728\u8fd9\u91cc\u5b66\u4f1a\u7684\uff0c\u4e0d\u4f1a\u6811\u5256\u7684\u5c0f\u76c6\u53cb\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b",
        "postTime": 1588477788,
        "uid": 122000,
        "name": "Samuel_YHL",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "#### \u524d\u8a00\n\n\u6bd4\u8f83\u5e38\u89c1\u7684\u6811\u94fe\u5256\u5206\u9898\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811 + \u6811\u94fe\u5256\u5206\n\n\u8fd9\u7c7b\u7ef4\u62a4\u533a\u95f4\u4f4d\u8fd0\u7b97\u7684\u9898\u76ee\u5f80\u5f80\u91c7\u7528\uff1a\u62c6\u4f4d\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n#### \u601d\u8def\n\n\u7b14\u8005\u9ed8\u8ba4\u505a\u9898\u8005\u4f1a\u6811\u94fe\u5256\u5206\uff0c\u8fd9\u91cc\u5c31\u7b80\u5355\u8bb2\u8bb2\u62c6\u4f4d\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u5230\u533a\u95f4\u5f02\u6216\u548c\uff0c\u5f71\u54cd\u7b54\u6848\u7684\u53ea\u6709\u533a\u95f4\u5185\u7684\u6570\u4e8c\u8fdb\u5236\u4e0b\u7684\u67d0\u51e0\u4f4d\u662f\u5426\u4e3a$1$\uff0c\u4e8e\u662f\u6211\u4eec\u5f88\u81ea\u7136\u7684\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\uff1a\n\n+ \u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u4e2d\uff0c\u4e8c\u8fdb\u5236\u4e0b\u7b2c $i$ \u4f4d\u4e3a $1$ \u7684\u6570\u4e00\u5171\u6709\u591a\u5c11\u4e2a\uff1f\n\n\u77e5\u9053\u4e86\u8fd9\u4e2a\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5f97\u5230\u6700\u540e\u7684\u7b54\u6848\u4e86\u3002\n\n\u5f88\u663e\u7136\u7684\u4e00\u70b9\uff0c\u5047\u8bbe\u533a\u95f4\u5185\u7b2c $i$ \u4e3a $1$ \u7684\u6570\u4e00\u5171\u6709\u5947\u6570\u4e2a\uff0c\u90a3\u4e48\u8fd9\u4e00\u4f4d\u662f\u53ef\u4ee5\u8d21\u732e\u7ed9\u6700\u7ec8\u7b54\u6848\u7684\uff0c\u7b54\u6848\u5c31\u52a0\u4e0a $1 << i$ \u3002\u5982\u679c\u662f\u5076\u6570\u5b83\u7684\u8d21\u732e\u4f1a\u88ab\u5f02\u6216\u6d88\u9664\u4e3a $0$ \uff0c\u5bf9\u6700\u7ec8\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u3002\n\n+ \u4fee\u6539\u64cd\u4f5c\n\n\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5355\u70b9\u4fee\u6539\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u7ebf\u6bb5\u6811\u503c\u5373\u53ef\u3002\n\n\u4e8e\u662f\u5c31\u76f4\u63a5\u6e05\u7a7a\u7ebf\u6bb5\u6811\u4e0a\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u503c\uff0c\u6309\u7167\u7ed9\u51fa\u7684\u6570\u6765\u8fdb\u884c\u6309\u4f4d\u5206\u89e3\u540e\u7edf\u8ba1\u5373\u53ef\u3002\n\n#### \u5177\u4f53\u505a\u6cd5\uff1a\n\n\u7ebf\u6bb5\u6811\u4e2d\u5b58\u50a8\u533a\u95f4 $[L,R]$ \u4e2d\u7b2c $i$ \u4f4d\u4e3a $1$ \u7684\u6570\u7684\u4e2a\u6570\uff0c\u8bb0\u4f5c $cnt[i]$\n\n\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u67e5\u8be2\uff0c\u6211\u4eec\u5c31\u5f00\u4e00\u4e2a\u5168\u5c40\u6570\u7ec4\uff08\u7528\u4e00\u6b21\u5c31\u5f97\u6e05\u7a7a\u4e00\u6b21\uff09\uff0c\u6309\u7167\u7ebf\u6bb5\u6811\u7684\u4f20\u7edf\u505a\u6cd5\uff0c\u5bf9\u4e8e\u5b8c\u5168\u88ab\u5305\u542b\u7684\u5c31\u5c06\u7ebf\u6bb5\u6811\u4e2d\u7684\u503c\u52a0\u5165\u5230\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u3002\u4f20\u7edf\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u627e\u5230 $pos$(\u4fee\u6539\u7684\u70b9) \uff0c\u7136\u540e\u5c06\u5f53\u524d\u70b9\u7684\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u7684$cnt$ \u6570\u7ec4\u6e05\u7a7a\uff0c\u7136\u540e\u5c06\u7ed9\u5b9a\u7684\u503c\u8f6c\u4e3a\u4e8c\u8fdb\u5236\uff0c\u66b4\u529b\u7edf\u8ba1\u7b2c $i$ \u4f4d\u662f\u5426\u4e3a $1$ \u5373\u53ef\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u53ef\u4ee5\u770b\u4e0b\u9762\u7684 \"$Code$\" \u90e8\u5206\uff0c\u6709\u6ce8\u91ca\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO($nlog^2n * 32$)(\u5176\u5b9e\u662f\u8dd1\u4e0d\u6ee1\u7684\uff0c\u6548\u7387\u8fd8\u86ee\u9ad8\u7684)\n\n#### $Code$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e5 + 5;\nint start[MAXN],n,tot = 0,Q,now = 0;\nint dep[MAXN],siz[MAXN],son[MAXN],fa[MAXN];\nint dfn[MAXN],dfn_id[MAXN],tp[MAXN],val[MAXN],Ans[35];//Ans\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\u5168\u5c40\u6570\u7ec4\n\nstruct Edge {\n    int to,next;\n} edge[MAXN * 2];\n\nstruct SegmentTree {\n    int l,r;\n    int cnt[33];\n} T[MAXN * 4];\n\ninline int read()\n{\n    int x = 0 , flag = 1;\n    char ch = getchar();\n    for( ; ch > '9' || ch < '0' ; ch = getchar()) if(ch == '-') flag = -1;\n    for( ; ch >= '0' && ch <= '9' ; ch = getchar()) x = (x << 3) + (x << 1) + ch - '0';\n    return x * flag;\n}\n\nvoid add(int from,int to)\n{\n    tot ++;\n    edge[tot].to = to;\n    edge[tot].next = start[from];\n    start[from] = tot;\n    return ;\n}\n\nint DFS1(int x,int from)//\u6811\u94fe\u5256\u5206DFS1\n{\n    siz[x] = 1 , dep[x] = dep[from] + 1;\n    son[x] = 0 , fa[x] = from;\n    for(int i = start[x] ; i ; i = edge[i].next)\n    {\n        int to = edge[i].to;\n        if(to == from) continue;\n        int v = DFS1(to,x);\n        if(v > siz[son[x]]) son[x] = to;\n        siz[x] += v;\n    }\n    return siz[x];\n}\n\nvoid DFS2(int x,int top)//\u6811\u94fe\u5256\u5206DFS2\n{\n    tp[x] = top , dfn[x] = ++now , dfn_id[now] = x;\n    if(son[x]) DFS2(son[x],top);\n    for(int i = start[x] ; i ; i = edge[i].next)\n    {\n        int to = edge[i].to;\n        if(to == fa[x] || to == son[x]) continue;\n        DFS2(to, to);\n    }\n    return ;\n}\n\nvoid build(int x,int l,int r)\n{\n    T[x].l = l , T[x].r = r;\n    if(l == r)\n    {\n        int D = val[dfn_id[l]],len = 0;\n        while(D)//\u8fdb\u884c\u4e8c\u8fdb\u5236\u5206\u89e3\n        {\n            T[x].cnt[++len] += (D & 1);\n            D >>= 1;\n        }\n        return ;\n    }\n    int mid = (l + r) >> 1;\n    build(x << 1 , l , mid);\n    build(x << 1 | 1 , mid + 1 , r);\n    for(int i = 1 ; i <= 32 ; i ++)//\u76f4\u63a5\u66b4\u529b\u7684\u5c06\u4e24\u4e2a\u513f\u5b50\u7684\u503c\u7ed9\u83b7\u53d6\u6389\n        T[x].cnt[i] = T[x << 1].cnt[i] + T[x << 1 | 1].cnt[i];\n    return ;\n}\n\nvoid change(int x,int pos,int k)\n{\n    if(T[x].l == dfn[pos] && T[x].r == dfn[pos])\n    {\n        int D = val[pos],len = 0;\n        while(D)//\u5e38\u6570\u4f18\u5316\uff0c\u56e0\u4e3a\u76f4\u63a5\u5168\u90e8\u6e05\u7a7a\u592a\u6d6a\u8d39\u4e86\uff0c\u6709\u4e9b\u672c\u6765\u5c31\u6ca1\u88ab\u8bbf\u95ee\n        {\n            T[x].cnt[++len] -= (D & 1);\n            D >>= 1;\n        }\n        D = k;\n        len = 0;\n        while(D)\n        {\n            T[x].cnt[++len] += (D & 1);\n            D >>= 1;\n        }\n        val[pos] = k;//\u4e0a\u9762\u7684\u5e38\u6570\u4f18\u5316\u9700\u8981\u77e5\u9053\u5f53\u524d\u70b9\u7684\u88ab\u4fee\u6539\u524d\u7684\u503c\u4e3a\u591a\u5c11\uff0c\u6240\u4ee5\u8981\u4fdd\u5b58\n        return ;\n    }\n    int mid = (T[x].l + T[x].r) >> 1;\n    if(dfn[pos] <= mid) change(x << 1 , pos , k);\n    else change(x << 1 | 1 , pos , k);\n    for(int i = 1 ; i <= 32 ; i ++)\n        T[x].cnt[i] = T[x << 1].cnt[i] + T[x << 1 | 1].cnt[i];\n    return ;\n}\n\nvoid Get(int x,int l,int r)\n{\n    if(T[x].l >= l && T[x].r <= r)\n    {\n        for(int i = 1 ; i <= 32 ; i ++) \n        Ans[i] += T[x].cnt[i];//\u4e0a\u6587\u63d0\u5230\u7684\u5c06\u7ebf\u6bb5\u6811\u4e2d\u7684\u503c\u66b4\u529b\u52a0\u5165\u7b54\u6848\u4e2d\n        return ;\n    }\n    int mid = (T[x].l + T[x].r) >> 1;\n    if(l <= mid) Get(x << 1 , l , r);\n    if(r  > mid) Get(x << 1 | 1 , l , r);\n    return ;\n}\n\nvoid GetAns(int x,int y)//\u6811\u94fe\u5256\u5206\u6a21\u677f\n{\n    while(tp[x] != tp[y])\n    {\n        if(dep[tp[x]] < dep[tp[y]]) swap(x,y);\n        Get(1 , dfn[tp[x]] , dfn[x]);\n        x = fa[tp[x]];\n    }\n    if(dfn[x] < dfn[y]) Get( 1 , dfn[x] , dfn[y]);\n    else Get(1 , dfn[y] , dfn[x]);\n    return ;\n}\n\nint main()\n{\n    n = read() , Q = read();\n    for(int i = 1 ; i <= n ; i ++) val[i] = read();\n    for(int i = 1 ; i <= n - 1 ; i ++)\n    {\n        int u = read() , v = read();\n        add(u,v); add(v,u);\n    }\n    DFS1(1,0);\n    DFS2(1,1);\n    build(1 , 1 , n);\n    while(Q -- )\n    {\n        int op = read() , l = read() , r = read();\n        if(op == 1) change( 1 , l , r);\n        else \n        {\n            memset(Ans,0,sizeof(Ans));//\u6bcf\u6b21\u7528\u90fd\u8981\u6e05\u7a7a\n            GetAns( l , r );\n            int sum = 0;\n            for(int j = 1 ; j <= 32 ; j ++)\n            if(Ans[j] & 1) sum += (1 << (j - 1));//\u662f\u5947\u6570\u7684\u8bdd\u5c31\u5bf9\u7b54\u6848\u6709\u8d21\u732e\n            //\u6ce8\u610f\u8fd9\u91cc\u8981\u51cf\u4e00\uff0c\u56e0\u4e3a\u5206\u89e3\u7684\u65f6\u5019\u7b2c1\u4f4d\u76f8\u5f53\u4e8e2\u76840\u6b21\u65b9\n            printf(\"%d\\n\",sum);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1609509499,
        "uid": 67817,
        "name": "MuYC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "## Subject\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6098)\n \n## Analysis\n\u6811\u94fe\u5256\u5206\u677f\u5b50+\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539+\u533a\u95f4\u5f02\u6216\n\n## Solution\n\u6811\u5256\u677f\u5b50\u548c\u5355\u70b9\u4fee\u6539\u5c31\u4e0d\u4e86\u8bb2\uff0c\u533a\u95f4\u5f02\u6216\u5176\u5b9e\u5c31\u662f\u5728\u6bcf\u6b21\u66f4\u65b0\u548c\u67e5\u8be2\u65f6\u53d6\u5f02\u6216\u503c\uff0c\u4e5f\u662f\u4e2a\u677f\u5b50\uff0c\u5177\u4f53\u89c1\u4ee3\u7801\n\n## Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define M 5000010\n#define int long long\ninline int read(){\n\tint s=0,f=1;char c=getchar();\n\twhile(!isdigit(c)){if(c=='-')f=-1;c=getchar();}\n\twhile(isdigit(c)){s=s*10+c-48;c=getchar();}\n\treturn s*f;\n}\nstruct node{\n\tint u,v;\n}Edge[M];\nstruct SegTree{\n\tint lson,rson,x;\n}tree[M<<2];\nint n,m,u,v,opt,cnt,tot,head[M];\nint siz[M],son[M],fat[M],dep[M],top[M],idx[M],rk[M],value[M];\nvoid addEdge(int u,int v){\n\tEdge[++cnt]=(node){head[u],v};\n\thead[u]=cnt;\n\treturn;\n}\nvoid dfs1(int u,int dad){\n\tsiz[u]=1;fat[u]=dad;\n\tdep[u]=dep[dad]+1;\n\tfor(int i=head[u];i;i=Edge[i].u){\n\t\tint v=Edge[i].v;\n\t\tif(v==dad) continue;\n\t\tdfs1(v,u);\n\t\tsiz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]])\n\t\t\tson[u]=v;\n\t}\n\treturn;\n}\nvoid dfs2(int u,int dad){\n\ttop[u]=dad;\n\tidx[u]=++tot;\n\trk[tot]=u;\n\tif(!son[u]) return;\n\tdfs2(son[u],dad);\n\tfor(int i=head[u];i;i=Edge[i].u){\n\t\tint v=Edge[i].v;\n\t\tif(v!=son[u]&&v!=fat[u])\n\t\t\tdfs2(v,v);\n\t}\n\treturn;\n}\nvoid UpDate(int index){\n\ttree[index].x=tree[index<<1].x^tree[index<<1|1].x;\n\treturn;\n}\nvoid BuildTree(int index,int lson,int rson){\n\ttree[index]=(SegTree){lson,rson};\n\tif(lson==rson){\n\t\ttree[index].x=value[rk[lson]];\n\t\treturn;\n\t}\n\tint mid=(lson+rson)>>1;\n\tBuildTree(index<<1,lson,mid);\n\tBuildTree(index<<1|1,mid+1,rson);\n\tUpDate(index);\n\treturn;\n}\nvoid Change(int index,int lson,int rson,int x,int k){\n\tif(lson==rson){\n\t\ttree[index].x=k;\n\t\treturn;\n\t}\n\tint mid=(lson+rson)>>1;\n\tif(x<=mid) Change(index<<1,lson,mid,x,k);\n\telse Change(index<<1|1,mid+1,rson,x,k);\n\tUpDate(index);\n\treturn;\n}\nint Query(int index,int lson,int rson){\n\tif(lson<=tree[index].lson&&tree[index].rson<=rson)\n\t\treturn tree[index].x;\n\tint mid=(tree[index].lson+tree[index].rson)>>1,ans=0;\n\tif(lson<=mid) ans^=Query(index<<1,lson,rson);\n\tif(rson>mid) ans^=Query(index<<1|1,lson,rson);\n\treturn ans;\n}\nint TreeQuery(int u,int v){\n\tint ans=0;\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tans^=Query(1,idx[top[u]],idx[u]);\n\t\tu=fat[top[u]];\n\t}\n\tif(dep[u]>dep[v]) swap(u,v);\n\tans^=Query(1,idx[u],idx[v]);\n\treturn ans;\n}\nsigned main(void){\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++) value[i]=read();\n\tfor(int i=1;i<n;i++){\n\t\tu=read();v=read();\n\t\taddEdge(u,v);\n\t\taddEdge(v,u);\n\t}\n\tdfs1(1,0);dfs2(1,1);\n\tBuildTree(1,1,n);\n\twhile(m--){\n\t\topt=read();u=read();v=read();\n\t\tif(opt==1) Change(1,1,n,idx[u],v);\n\t\telse printf(\"%lld\\n\",TreeQuery(u,v));\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1597898898,
        "uid": 246005,
        "name": "StupidSeven",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "\u770b\u5230\u5404\u4f4d\u5927\u4f6c\u4eec\u5df2\u7ecf\u628a\u5176\u4ed6\u7684\u4e1c\u897f\u8bb2\u7684\u5f88\u660e\u767d\u4e86\uff0c\u6211\u8fd9\u4e2a juruo \u5c31\u8bb2\u4e00\u8bb2\u6700\u57fa\u672c\u7684\u6811\u94fe\u5256\u5206\u5427\u3002\n\n## 0.\u6811\u5256\u662f\u4ec0\u4e48\uff1f~~\u80fd\u5403\u5417\uff1f~~\n\n~~\u4e0d\u80fd\u5403~~\n\n\u6811\u5256\u662f\u6811\u94fe\u5256\u5206\u7684\u7b80\u79f0\uff0c\u6211\u4eec\u4e00\u822c\u8bf4\u7684\u6811\u5256\u5176\u5b9e\u6307**\u91cd\u94fe\u5256\u5206**\u3002\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u79cd\u957f\u94fe\u5256\u5206~~\u6211\u4e0d\u4f1a~~\uff0c\u4f46\u662f\u636e\u8bf4\u4e0d\u5e38\u7528\u3002\n\n\u6811\u94fe\u5256\u5206\u80fd\u591f\u628a\u6811\u5256\u5206\u6210\u8bb8\u591a\u94fe\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u7ef4\u62a4\u533a\u95f4\u7684\u65b9\u5f0f\u7ef4\u62a4\u4e00\u68f5\u6811\u3002\n\n## 1.\u600e\u4e48\u5256\u5206\n\n\u5148\u5f15\u5165\u4e00\u4e9b\u6982\u5ff5\uff1a\n\n1. **\u91cd\u513f\u5b50**\uff1a\u4e00\u68f5\u6811\u6700\u5927\u7684\u5b50\u6811\u53eb\u91cd\u513f\u5b50\u3002\u4f8b\u5982\u8fd9\u68f5\u6811\u4e2d3\u5c31\u662f1\u7684\u91cd\u513f\u5b50\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/wvcn1s57.png)\u5f88\u660e\u663e\uff0c\u4e00\u68f5\u6811\u7684\u91cd\u513f\u5b50\u662f\u552f\u4e00\u7684\u3002\u4ec0\u4e48\uff1f\u6709\u591a\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u76f8\u540c\uff1f\u90a3\u5c31\u968f\u4fbf\u9009\u4e00\u4e2a\u5457\u3002\n2. **\u8f7b\u513f\u5b50**\uff1a\u9664\u4e86\u91cd\u513f\u5b50\u90fd\u662f\u8f7b\u513f\u5b50\u3002~~\u5e9f\u8bdd~~\n3. **\u91cd\u8fb9**\uff1a\u8fde\u63a5\u7236\u4eb2\u548c\u91cd\u513f\u5b50\u7684\u8fb9\u5c31\u662f\u91cd\u8fb9\u3002\n4. **\u8f7b\u8fb9**\uff1a\u9664\u4e86\u91cd\u8fb9\u90fd\u662f\u8f7b\u8fb9\u3002\n5. **\u91cd\u94fe**\uff1a\u8bb8\u591a\u91cd\u8fb9\u8fde\u8d77\u6765\u5c31\u53eb\u91cd\u94fe\u3002\u4f8b\u5982\uff1a![](https://cdn.luogu.com.cn/upload/image_hosting/sa0fpyz9.png)\n\n\u8fd9\u68f5\u6811\u91cc\u8282\u70b9 $\\{1,3,5,6\\}$ \u53ef\u4ee5\u6784\u6210\u4e00\u9897\u91cd\u94fe\u3002~~\u5f88\u663e\u7136~~  \uff0c**\u6bcf\u4e2a\u91cd\u94fe\u7684\u8d77\u70b9\u4e00\u5b9a\u662f\u4e00\u4e2a\u8f7b\u513f\u5b50\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe\u3002**<-\u5f88\u91cd\u8981\uff0c\u4e00\u5b9a\u8981\u8bb0\u4f4f\uff01\n\n\u7136\u540e\u5c31\u5f00\u59cb\u5256\u5206\u4e86\u3002\n\n\u5177\u4f53\u7684\u5256\u5206\u8fc7\u7a0b\uff0c\u5c31\u662f\u7ef4\u62a4\u4e00\u4e9b\u6570\u7ec4\uff1a\n* $deep[i]$ \u4ee3\u8868\u8282\u70b9 $i$ \u7684\u6df1\u5ea6\u3002\n* $top[i]$ \u4ee3\u8868\u8282\u70b9 $i$ \u6240\u5c5e\u91cd\u94fe\u7684\u94fe\u9876\u3002\uff08\u4e5f\u5c31\u662f\u91cd\u94fe\u91cc\u6df1\u5ea6\u6700\u5c0f\u7684\u90a3\u4e2a\u8282\u70b9\uff09\n* $size[i]$ \u4ee3\u8868\u4ee5 $i$ \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u3002\n* $son[i]$ \u4ee3\u8868\u8282\u70b9 $i$ \u7684\u552f\u4e00\u4e00\u4e2a\u91cd\u513f\u5b50\u662f\u8c01\u3002\n* $f[i]$ \u4ee3\u8868\u8282\u70b9 $i$ \u7684\u7236\u4eb2\u662f\u8c01\u3002\n* $dfn[i]$ \u4ee3\u8868\u8282\u70b9 $i$ \u7684\u201d\u904d\u5386\u987a\u5e8f\u201c\u3002\n\n\u5256\u5206\u65f6\u8981\u8dd1\u4e24\u4e2adfs\u3002~~\u7ecf\u5178\u64cd\u4f5c~~\n\n\u7b2c\u4e00\u4e2adfs\u8981\u7ef4\u62a4 $size$ \u3001$son$ \u3001$f$\u3001$deep$ \u8fd9\u51e0\u4e2a\u6570\u7ec4\u3002\n\n\u63d0\u793a\uff1a\u6811\u8981\u7528\u65e0\u5411\u56fe\u5b58\uff01\n\n```cpp\nvoid dfs1(int u,int fa/*\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u7236\u4eb2\u662f\u8c01*/){\n    size[u]=1;//\u56e0\u4e3a\u81ea\u5df1\u4e5f\u662f\u5b50\u6811\u7684\u4e00\u90e8\u5206\n    f[u]=fa;\n    deep[u]=deep[fa]+1;//\u5f88\u660e\u663e\uff0c\u5f53\u524d\u6df1\u5ea6=\u7236\u4eb2\u6df1\u5ea6+1\n    for(int i=0;i<g[u].size();i++){\n        int v=g[u][i];//\u904d\u5386\u6bcf\u4e2a\u51fa\u8fb9\n        if(v!=fa){//\u5982\u679c\u5f53\u524d\u51fa\u8fb9\u7ec8\u70b9\u662f\u513f\u5b50\u800c\u4e0d\u662f\u7236\u4eb2\n            dfs1(v,u);//\u641c\n            size[u]+=size[v];//\u52a0\u4e0a\u513f\u5b50\u5927\u5c0f\n            if(size[v]>size[son[u]]){//\u627e\u5230\u6700\u5927\u7684\u513f\u5b50\u4f5c\u4e3a\u91cd\u513f\u5b50\n                son[u]=v;\n            }\n        }\n    }\n}\n```\n\u7136\u540e\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6bcf\u4e2a\u8282\u70b9\u7684\u91cd\u513f\u5b50\uff0c\u73b0\u5728\u5e94\u8be5\u628a\u5b83\u4eec\u8fde\u8d77\u6765\u6210\u4e3a\u4e00\u6761\u91cd\u94fe\u4e86\uff1a\n```cpp\nvoid dfs2(int u,int tp/*\u5f53\u524d\u94fe\u9876*/){\n    top[u]=tp;\n    dfn[u]=++step;\n    if(son[u]){//\u5982\u679c\u6ca1\u6709\u91cd\u513f\u5b50\uff0c\u90a3\u4e48\u4e00\u4e2a\u513f\u5b50\u4e5f\u6ca1\u6709\n        dfs2(son[u],tp);//\u4f18\u5148\u904d\u5386\u91cd\u513f\u5b50\uff0c\u4e3a\u4ec0\u4e48\u4e4b\u540e\u518d\u8bf4\n        for(int i=0;i<g[u].size();i++){\n            int v=g[u][i];\n            if(son[u]!=v&&f[u]!=v){//\u904d\u5386\u8f7b\u513f\u5b50\n                dfs2(v,v);//\u8f7b\u513f\u5b50\u4e00\u5b9a\u662f\u4e00\u6761\u91cd\u94fe\u7684\u94fe\u9876\n            }\n        }\n    }\n}\n```\n**\u5982\u679c\u4f18\u5148\u904d\u5386\u91cd\u513f\u5b50\uff0c\u90a3\u4e48\u91cd\u94fe\u7684$dfn$\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u3002**\u4f8b\u5982\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3w1daj6g.png)\n\n\u56e0\u4e3a\u91cd\u94fe\u7684$dfn$\u662f\u8fde\u7eed\u7684\uff0c\u800c\u6bcf\u4e2a\u70b9\u90fd\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u7684\u65b9\u5f0f\u7ef4\u62a4\u70b9\u6743\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u66b4\u529b\u7684\u4e00\u4e2a\u4e2a\u67e5\uff0c\u4e00\u4e2a\u4e2a\u6539\u4e86\u3002\n\n\u4e00\u4e9b\u5e38\u89c1\u7684\u7528\u6cd5\uff1a\n```cpp\nquery(1,1,n,dfn[top[u]],dfn[u])//\u67e5\u8be2u\u5230\u94fe\u9876\u7684\u70b9\u6743\u548c\nmodify(1,1,n,dfn[top[u]],dfn[u],3)//\u628au\u5230\u94fe\u9876\u7684\u70b9\u6743\u90fd\u52a03\n```\n\n\u5177\u4f53\u5230\u9898\u76ee\u4e0a\uff0c\u53ef\u4ee5\u53d1\u73b0\u751a\u81f3\u8fde\u61d2\u60f0\u6807\u8bb0\u90fd\u4e0d\u9700\u8981\uff0c\u6ca1\u6709\u533a\u95f4\u4fee\u6539\u7684\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\uff0c\u600e\u4e48\u8ba1\u7b97\u4ece\u4e00\u4e2a\u70b9\u5230\u53e6\u5916\u4e00\u4e2a\u70b9\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u548c\uff1f\n```cpp\nint query_ans(int u,int v){\n    int ret=0;\n    while(top[u]!=top[v]){\n        if(deep[top[u]]<deep[top[v]]){//\u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u6bd4\u8f83\u94fe\u9876\u6df1\u5ea6\uff01\u5751\u4e86\u6211\u597d\u51e0\u6b21\n            swap(u,v);\n        }\n        ret^=query(1,1,n,dfn[top[u]],dfn[u]);//\u8fd9\u9053\u9898\u8981\u6c42\u5f02\u6216\n        u=f[top[u]];\n    }//\u5c31\u662f\u5f53uv\u4e0d\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u8ba9\u94fe\u9876\u6df1\u5ea6\u5c0f\u7684\u5f80\u4e0a\u8df3\n    if(deep[u]>deep[v]){\n        swap(u,v);\n    }\n    ret^=query(1,1,n,dfn[u],dfn[v]);//\u5f53\u5728\u540c\u4e00\u6761\u94fe\u4e0a\u65f6\uff0c\u628a\u5b83\u4eec\u4e4b\u95f4\u7684\u70b9\u52a0\u8d77\u6765\n    return ret;\n}\n```\n\n\u77e5\u9053\u4e86\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u8fd9\u9898\u5c31\u975e\u5e38\u597d\u5199\u4e86\u3002\u5c31\u662f\u76f4\u63a5\u628a\u677f\u5b50\u5957\u4e0a\u53bb\u561b\uff01\n\nAC Code\uff1a\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define MAXN 200005\nint n,q,e[MAXN];\nvector<int> g[MAXN];\nint dfn[MAXN],step,top[MAXN],size[MAXN],son[MAXN],f[MAXN],deep[MAXN];\nvoid dfs1(int u,int fa){\n    size[u]=1;\n    f[u]=fa;\n    deep[u]=deep[fa]+1;\n    for(int i=0;i<g[u].size();i++){\n        int v=g[u][i];\n        if(v!=fa){\n            dfs1(v,u);\n            size[u]+=size[v];\n            if(size[v]>size[son[u]]){\n                son[u]=v;\n            }\n        }\n    }\n}\nvoid dfs2(int u,int tp){\n    top[u]=tp;\n    dfn[u]=++step;\n    if(son[u]){\n        dfs2(son[u],tp);\n        for(int i=0;i<g[u].size();i++){\n            int v=g[u][i];\n            if(son[u]!=v&&f[u]!=v){\n                dfs2(v,v);\n            }\n        }\n    }\n}\nint tree[MAXN*4];\nvoid push_up(int rt){\n    tree[rt]=tree[rt*2]^tree[rt*2+1];\n}\nvoid modify(int rt,int l,int r,int x,int k){\n    if(l==r){\n        tree[rt]=k;\n    }else{\n        int mid=(l+r)/2;\n        if(x<=mid){\n            modify(rt*2,l,mid,x,k);\n        }else{\n            modify(rt*2+1,mid+1,r,x,k);\n        }\n        push_up(rt);\n    }\n}\nint query(int rt,int l,int r,int L,int R){\n    if(L>R){return 0;}\n    if(L<=l&&R>=r){\n        return tree[rt];\n    }else{\n        int mid=(l+r)/2,ret=0;\n        if(L<=mid){\n            ret^=query(rt*2,l,mid,L,R);\n        }\n        if(R>mid){\n            ret^=query(rt*2+1,mid+1,r,L,R);\n        }\n        return ret;\n    }\n}\nint query_ans(int u,int v){\n    int ret=0;\n    while(top[u]!=top[v]){\n        if(deep[top[u]]<deep[top[v]]){\n            swap(u,v);\n        }\n        ret^=query(1,1,n,dfn[top[u]],dfn[u]);\n        u=f[top[u]];\n    }\n    if(deep[u]>deep[v]){\n        swap(u,v);\n    }\n    ret^=query(1,1,n,dfn[u],dfn[v]);\n    return ret;\n}\nint main(){\n    scanf(\"%d%d\",&n,&q);\n    for(int i=1;i<=n;i++){\n        scanf(\"%d\",e+i);\n    }\n    for(int i=1;i<=n-1;i++){\n        int u,v,w;\n        scanf(\"%d%d\",&u,&v);\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    for(int i=1;i<=n;i++){\n        modify(1,1,n,dfn[i],e[i]);\n    }\n    for(int i=1;i<=q;i++){\n        int op;\n        scanf(\"%d\",&op);\n        if(op==1){\n            int x,k;\n            scanf(\"%d%d\",&x,&k);\n            modify(1,1,n,dfn[x],k);\n        }else{\n            int u,v;\n            scanf(\"%d%d\",&u,&v);\n            printf(\"%d\\n\",query_ans(u,v));\n        }\n    }\n    return 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1~",
        "postTime": 1597272652,
        "uid": 125018,
        "name": "ztxcsl",
        "ccfLevel": 6,
        "title": "\u6811\u94fe\u5256\u5206\u8be6\u89e3&\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "# P6098 \u9898\u89e3\n```\n              \u91cd\u94fe\u5256\u5206\u88f8\u9898\n```\n## \u9898\u610f\u6982\u8ff0\n\u4e00\u68f5\u6811\uff0c\u52a8\u6001\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\uff0c\u67e5\u627e\u4e00\u6761\u8def\u5f84\u7684\u5f02\u6216\u548c\uff0c\u6ca1\u6709\u66f4\u591a\u4e86~\n## \u89e3\u7b54\n\u7b80\u7b80\u7b80\u7b80\u5316\u95ee\u9898\uff1a  \n\u5982\u679c\u53ea\u6709\u4e00\u6761\u94fe\uff0c**\u6ca1**\u6709\u4fee\u6539\uff1f  \n$$\\huge{\u524d\u7f00\u548c\uff01}$$\n\n\u7b80\u7b80\u7b80\u5316\u95ee\u9898\uff1a\n\u5982\u679c\u53ea\u6709\u4e00\u6761\u94fe\uff0c**\u6709**\u4fee\u6539\uff1f\n$$\\huge{\u7ebf\u6bb5\u6811\uff01}$$\n##### ~~\u8fd8\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u7684\u81ea\u5df1\u53bb\u6572\u677f\u5b50\u5427~~\n\n\u7b80\u7b80\u5316\u95ee\u9898\uff1a\n\u5982\u679c\u662f\u4e00\u68f5\u6811\uff0c**\u6ca1**\u6709\u4fee\u6539\uff1f\n$$\\huge{\u500d\u589e+LCA\uff01}$$\n\n\u90a3\u4e48\uff0c\u5982\u679c**\u662f\u4e00\u68f5\u6811\uff0c\u53c8\u6709\u4fee\u6539\u5462\uff1f**\n$$\\huge{\u7ebf\u6bb5\u6811+\u500d\u589e+LCA\uff01}$$\n\u5373\u4e3a  \n$$\\huge{\u91cd\u94fe\u5256\u5206\uff01}$$\n\n![](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2266815608,1859947537&fm=26&gp=0.jpg)\n$$\\huge{\u91cd\u94fe\u5256\u5206\u662f\u4e2a\u5565\uff1f\uff1f\uff1f}$$\n\n### \u4ee5\u4e0b\u4e3a\u91cd\u94fe\u5256\u5206\u57fa\u7840\n\u7236\u4eb2\u7ed3\u70b9\u7684\u6240\u6709\u513f\u5b50\u4e2d\u5b50\u6811\u7ed3\u70b9\u6570\u76ee\u6700\u591a\uff08$size$\u6700\u5927\uff09\u7684\u4e00\u4e2a\u7ed3\u70b9\u53eb\u505a\u91cd\u513f\u5b50\uff0c\u8fb9\u53eb\u505a\u91cd\u8fb9\uff1b\u5176\u4f59\u7684\u662f\u8f7b\u513f\u5b50\uff0c\u8fb9\u53eb\u505a\u8f7b\u8fb9\u3002\u91cd\u8fb9\u7ec4\u6210\u91cd\u94fe\u3002  \n\n\u5b9a\u7406\uff1a\u4efb\u610f\u4e00\u4e2a\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e0a\uff0c\u4e0d\u8d85\u8fc7$\\log n$\u6761\u8f7b\u8fb9\uff0c\u4e5f\u4e0d\u8d85\u8fc7$\\log n$\u6761\u91cd\u94fe  \n\n**\u663e\u7136\uff1a\u91cd\u94fe\u662f\u4e0d\u4f1a\u5206\u53c9\u7684\uff01**  \n**\u91cd\u94fe\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684**  \n\u5efa\u6811\u7684\u65f6\u5019\u6309\u7167\u91cd\u94fe\u5fc5\u987b\u8fde\u7eed\u7684\u539f\u5219\u6765\u5efa\u6811  \n\u7ef4\u62a4\u91cd\u94fe==\u7ef4\u62a4\u533a\u95f4\u2192\u7ebf\u6bb5\u6811\u7ef4\u62a4  \n\n\u8fd9\u91cc\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u662f$\\color{red}{\\large\u5f02\u6216}$\n\n$So\\ what?$\n\n\u4e8e\u662f\u4ee3\u7801\u519b\u6765\u4e86  \n\u53d8\u91cf\u542b\u4e49\u4ec0\u4e48\u7684\u5e94\u8be5\u5f88\u6e05\u695a\u4e86(\u770b\u53d8\u91cf\u540d)\n```cpp\n#include<bits/stdc++.h>\nusing namespace sstd;\nconst int SZ_N=100000;\nint st[4*SZ_N];\nvoid stUpdate(int idx,int l,int r,int i,int v){\n\tif(l==r)st[idx]=v;\n\telse{\n\t\tint m=(l+r)/2;\n\t\tif(i<=m)stUpdate(2*idx,l,m,i,v);\n\t\telse stUpdate(2*idx+1,m+1,r,i,v);\n\t\tst[idx]=st[2*idx]^st[2*idx+1];\n\t}\n}\nvoid stUpdate(int i,int v){\n\tstUpdate(1,0,SZ_N-1,i,v);\n}\nint stQuery(int idx,int l,int r,int lhs,int rhs){\n\tif(l>=lhs&&r<=rhs)return st[idx];\n\tint ret=0;\n\tint m=(l+r)/2;\n\tif(m>=lhs)ret^=stQuery(2*idx,l,m,lhs,rhs);\n\tif(m+1<=rhs)ret^=stQuery(2*idx+1,m+1,r,lhs,rhs);\n\treturn ret;\n}\nint stQuery(int l,int r){\n\treturn stQuery(1,0,SZ_N-1,l,r);\n}\nconst int SZ_D=17;\nint lca[SZ_N][SZ_D];\nint depth[SZ_N];\nint getLCA(int a,int b){\n\tif(depth[a]<depth[b])swap(a,b);\n\tfor(int d=SZ_D-1;d>=0;d--)\n\t\tif(depth[a]-(1<<d)>=depth[b])\n\t\t\ta=lca[a][d];\n\tfor(int d=SZ_D-1;d>=0;d--)\n\t\tif(lca[a][d]!=lca[b][d]){\n\t\t\ta=lca[a][d];\n\t\t\tb=lca[b][d];\n\t\t}\n\tif(a!=b)a=lca[a][0],b=lca[b][0];\n\treturn a;\n}\nvoid initLCA(){\n\tfor(int d=1;d<SZ_D;d++)\n\t\tfor(int i=0;i<SZ_N;i++)\n\t\t\tlca[i][d]=lca[lca[i][d-1]][d-1];\n}\nvector<int> edges[SZ_N];\nint treesz[SZ_N];\nint vtxtoSt[SZ_N];\nint tpch[SZ_N];\nint vals[SZ_N];\nvoid dfsForHLD(int curr,int topPtr,int par,int& itnSt_idx){\n\tvtxtoSt[curr]=itnSt_idx++;\n\tstUpdate(vtxtoSt[curr],vals[curr]);\n\ttpch[curr]=topPtr;\n\tint lgstchl=-1;\n\tint lgstsz=-1;\n\tfor(int out:edges[curr]){\n\t\tif(out==par)continue;\n\t\tif(treesz[out]>lgstsz){\n\t\t\tlgstsz=treesz[out];\n\t\t\tlgstchl=out;\n\t\t}\n\t}\n\tif(lgstchl<0)return;\n\tdfsForHLD(lgstchl,topPtr,curr,itnSt_idx);\n\tfor(int out:edges[curr]){\n\t\tif(out==par||out==lgstchl)continue;\n\t\tdfsForHLD(out,out,curr,itnSt_idx);\n\t}\n}\nvoid dfsForSize(int curr,int par){\n\ttreesz[curr]++;\n\tfor(int out:edges[curr]){\n\t\tif(out==par)continue;\n\t\tdepth[out]=depth[curr]+1;\n\t\tlca[out][0]=curr;\n\t\tdfsForSize(out,curr);\n\t\ttreesz[curr]+=treesz[out];\n\t}\n}\nvoid initHLD(){\n\tdfsForSize(0,-1);\n\tinitLCA();\n\tint itnSt_idx=0;\n\tdfsForHLD(0,0,-1,itnSt_idx);\n}\nint pathQuery(int chl,int par){\n\tint ret=0;\n\twhile(chl!=par){\n\t\tif(tpch[chl]==chl){\n\t\t\t//\u8f7b\u8fb9\n\t\t\tret^=vals[chl];\n\t\t\tchl=lca[chl][0];\n\t\t}\n\t\telse if(depth[tpch[chl]]>depth[par]){\n\t\t\tret^=stQuery(vtxtoSt[tpch[chl]],vtxtoSt[chl]);\n\t\t\tchl=lca[tpch[chl]][0];\n\t\t}\n\t\telse{\n\t\t\tret^=stQuery(vtxtoSt[par]+1,vtxtoSt[chl]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ret;\n}\nint query(int a,int b){\n\tint r=getLCA(a,b);\n\treturn pathQuery(a,r)^pathQuery(b,r)^vals[r];\n}\nint main(){\n\tint n,q;\n\tcin>>n>>q;\n\tfor(int i=0;i<n;i++)cin>>vals[i];\n\tfor(int i=1;i<n;i++){\n\t\tint a,b;\n\t\tcin>>a>>b;\n\t\ta--;b--;\n\t\tedges[a].push_back(b);\n\t\tedges[b].push_back(a);\n\t}\n\tinitHLD();\n\twhile(q--){\n\t\tint t;\n\t\tcin>>t;\n\t\tif(t==1){\n\t\t\tint i,v;\n\t\t\tcin>>i>>v;\n\t\t\tvals[--i]=v;\n\t\t\tstUpdate(vtxtoSt[i],v);\n\t\t}else{\n\t\t\tint a,b;\n\t\t\tcin>>a>>b;\n\t\t\tcout<<query(a-1,b-1)<<\"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c```for(int out:edge[curr])```\u4e0d\u77e5\u9053\u4ec0\u4e48\u610f\u601d\u7684\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\n```cpp\nfor(int i=0;i<edge[curr].size();i++)\n{\n    int out=edge[curr][i];\n    ...\n}\n```\n\u6ce8\u610f\uff0c\u4e24\u79cd\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u662f\u6700\u5f00\u59cb\u8d34\u7684\u90a3\u79cd\u5199\u6cd5\u6709\u53ef\u80fd\u65e0\u6cd5\u672c\u5730\u7f16\u8bd1\u901a\u8fc7\u3002",
        "postTime": 1592919397,
        "uid": 291706,
        "name": "GspTools",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\u5982\u679c\u663e\u793a\u6709\u95ee\u9898\u5c31\u5230\u672c\u849f\u84bb\u7684[\u535a\u5ba2](https://www.luogu.com.cn/blog/bzlz-zdx/solution-p6098)\u6765\u770b\u770b\u5427\u3002  \n\n\u5b66\u6811\u5256\u8fd9\u4e48\u4e45\u4e00\u76f4\u6ca1\u4e13\u95e8\u4e3a\u5b83\u5199\u4e00\u7bc7\u535a\u5ba2\uff0c\u8fd9\u7bc7\u5c31\u6743\u5f53\u5b66\u4e60\u7b14\u8bb0\u5566\u3002\n\n## \u9898\u610f\u7b80\u8ff0\n\u7ef4\u62a4\u6811\u4e0a\u4e24\u79cd\u64cd\u4f5c\uff1a\u4e24\u70b9\u8def\u5f84\u95f4\u5f02\u6216\u548c\u67e5\u8be2\u4e0e\u5355\u70b9\u4fee\u6539\u3002\n\n## \u9898\u76ee\u5206\u6790\n\u5982\u679c\u5b66\u8fc7\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u53ea\u9700\u8981\u628a\u6a21\u677f\u7684\u8def\u5f84\u6c42\u548c\u6539\u4e3a\u5f02\u6216\u548c\uff0c\u4e5f\u5c31\u662f\u53ea\u9700\u8981\u628a\u52a0\u53f7\u6539\u6210\u5f02\u6216\u7b26\u53f7\u3002  \n\n\u5982\u679c\u6ca1\u5b66\u8fc7\uff0c\u5c31\u8bf7\u5f80\u4e0b\u770b\u5427\u3002  \n\n\u8f7b\u91cd\u94fe\u5256\u5206\u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u6811\u4e0a\u7684\u5355\u70b9\u3001\u8def\u5f84\u6216\u5b50\u6811\u4fee\u6539\u4e0e\u67e5\u8be2\u7684\u95ee\u9898\u3002\u5b83\u7684\u601d\u60f3\u662f\u5c06\u6811\u5256\u5206\u6210\u94fe\uff0c\u4ece\u800c\u5c06\u6811\u4e0a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e8f\u5217\u95ee\u9898\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5\u7528\u7ef4\u62a4\u533a\u95f4\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u6216\u7b97\u6cd5\u6765\u7ef4\u62a4\u8fd9\u4e9b\u64cd\u4f5c\u4e86\uff0c    \n\n\u5982\u4f55\u8fdb\u884c\u5256\u5206\u5462\uff1f\u8f7b\u91cd\u94fe\u5256\u5206\u662f\u6839\u636e\u5b50\u6811\u7684\u5927\u5c0f\u6765\u5256\u5206\u7684\u3002\u6bcf\u4e2a\u7ed3\u70b9\u4e0e\u5b83\u7684\u5b50\u7ed3\u70b9\u4e2d\u5b50\u6811\u7ed3\u70b9\u6570\u76ee\u6700\u5927\u7684\u4e00\u4e2a\u7ed3\u70b9\uff08\u79f0\u4e3a\u91cd\u513f\u5b50\uff09\u5728\u4e00\u6761\u94fe\u4e0a\uff0c\u800c\u5176\u4ed6\u5b50\u7ed3\u70b9\u5219\u662f\u4ee5\u5b83\u4eec\u4e3a\u7236\u7ed3\u70b9\u91cd\u65b0\u5efa\u7acb\u4e00\u6761\u94fe\u3002~~\u6211\u4e0d\u4f1a\u8bc1\u660e\u7684\u662f~~\u53ef\u4ee5\u8bc1\u660e\u7684\u662f\uff0c\u8fd9\u6837\u5256\u5206\u51fa\u6765\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u7684\u8def\u5f84\u4e0a\u6700\u591a\u6709 $\\log n$ \u6761\u94fe\u3002  \n\n\u90a3\u4e48\u5982\u4f55\u5bf9\u94fe\u8fdb\u884c\u6807\u8bb0\u5462\uff1f\u7b54\u6848\u662f\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u6240\u5728\u94fe\u7684\u9876\u7aef\u7ed3\u70b9\u3002\u4e4b\u540e\uff0c\u4e3a\u6bcf\u4e2a\u7ed3\u70b9\u9644\u52a0\u4e00\u4e2a\u7f16\u53f7\uff0c\u6bcf\u6761\u94fe\u7684\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff1b\u540c\u65f6\uff0c\u6bcf\u68f5\u5b50\u6811\u4e0a\u7684\u7f16\u53f7\u4e5f\u662f\u8fde\u7eed\u7684\u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u94fe\u6216\u5b50\u6811\uff0c\u6211\u4eec\u5747\u53ef\u4ee5\u6839\u636e\u7f16\u53f7\u5c06\u5176\u89c6\u4e3a\u4e00\u6bb5\u533a\u95f4\uff0c\u5bf9\u8fd9\u6bb5\u533a\u95f4\u8fd0\u7528\u6811\u72b6\u6570\u7ec4\u548c\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002  \n\n\u5bf9\u4e8e\u8def\u5f84\u67e5\u8be2\uff0c\u6211\u4eec\u4e0d\u65ad\u5730\u7edf\u8ba1\u8f83\u6df1\u7684\u7ed3\u70b9\u6240\u5728\u7684\u94fe\u7684\u8d21\u732e\u5e76\u5c06\u5176\u8df3\u5230\u5176\u6240\u5728\u94fe\u7684\u9876\u7aef\u7684\u7236\u7ed3\u70b9\uff08\u610f\u5373\u6362\u6210\u6df1\u5ea6\u66f4\u5c0f\u7684\u4e0b\u4e00\u6761\u94fe\uff09\uff0c\u76f4\u5230\u4e24\u70b9\u5728\u540c\u4e00\u6761\u94fe\u4e0a\uff0c\u518d\u7edf\u8ba1\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u90e8\u5206\u7684\u8d21\u732e\u3002\u8def\u5f84\u4fee\u6539\u7c7b\u4f3c\u3002\u5bf9\u4e8e\u5b50\u6811\u4fee\u6539\u6216\u67e5\u8be2\uff0c\u53ea\u9700\u8981\u6839\u636e\u5b50\u6811\u7684\u5927\u5c0f\u8ba1\u7b97\u51fa\u5b50\u6811\u6240\u5360\u533a\u95f4\u7684\u5c3e\u90e8\uff0c\u8fdb\u884c\u4e00\u6b21\u4fee\u6539\u6216\u67e5\u8be2\u5373\u53ef\u3002  \n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u4ee5\u4e0a\u7684\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u7528\u5230\u5b50\u6811\u7684\u5927\u5c0f\u3001\u6df1\u5ea6\u548c\u7236\u7ed3\u70b9\u4e09\u4e2a\u6570\u636e\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e00\u904d dfs \u8fdb\u884c\u5904\u7406\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6240\u5728\u7684\u94fe\u7684\u9876\u7aef\u548c\u7f16\u53f7\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e8c\u904d dfs \u8fdb\u884c\u5904\u7406\u3002\u7f16\u53f7\u53ef\u4ee5\u901a\u8fc7\u65f6\u95f4\u6233\u6765\u89e3\u51b3\u3002\u7531\u4e8e\u6bcf\u6761\u94fe\u7684\u7f16\u53f7\u5e94\u8be5\u8fde\u7eed\uff0c\u8fdb\u884c\u641c\u7d22\u65f6\u5e94\u5148\u641c\u7d22\u91cd\u513f\u5b50\u3002  \n\n\u7531\u4e8e\u901a\u5e38\u60c5\u51b5\u4e0b\u8f7b\u91cd\u94fe\u5256\u5206\u9700\u8981\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\uff0c\u4e14\u6bcf\u6b21\u7ef4\u62a4\u6700\u591a\u8fdb\u5165 $\\operatorname O(\\log n)$ \u6761\u94fe\uff0c\u6bcf\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\operatorname{O}( \\log^2 n)$\u3002  \n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u7531\u4e8e\u5f02\u6216\u8fd0\u7b97\u5177\u6709\u7ed3\u5408\u5f8b\uff0c\u6545\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ef4\u62a4\u3002\u7531\u4e8e\u53ea\u9700\u8981\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\uff0c\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\n## \u4ee3\u7801\n\u624b\u5199 `swap` \u4e00\u5b9a\u8981\u52a0 `&` \u7b26\u53f7\u554a\uff01\uff01\uff01\uff08\u5927\u96fe\u3002\n```cpp\n#include<cstdio>\nusing namespace std;\nint n,q,x,y,dir,tot,e[100001],head[100001],suc[200001],go[200001],sum[100001],\n\ttag,depth[100001],son[100001],father[100001],size[100001],top[100001],no[100001];\ninline void swap(int &x,int &y)\n{\n\tx^=y^=x^=y;\n\treturn;\n}\ninline void add_edge(int x,int y)\n{\n\tsuc[++tot]=head[x];\n\tgo[tot]=y;\n\thead[x]=tot;\n\treturn;\n}\ninline int lowbit(int x)\n{\n\treturn x&(-x);\n}\nvoid add(int x,int value)\n{\n\twhile(x<=n)\n\t{\n\t\tsum[x]^=value;\n\t\tx+=lowbit(x);\n\t}\n\treturn;\n}\nint query(int x)\n{\n\tint res=0;\n\twhile(x)\n\t{\n\t\tres^=sum[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn res;\n}\nvoid dfs1(int x)\n{\n\tsize[x]=1;\n\tfor(int i=head[x];i;i=suc[i])\n\t\tif(go[i]!=father[x])\n\t\t{\n\t\t\tdepth[go[i]]=depth[x]+1;\n\t\t\tfather[go[i]]=x;\n\t\t\tdfs1(go[i]);\n\t\t\tsize[x]+=size[go[i]];\n\t\t\tif(size[son[x]]<size[go[i]])\n\t\t\t\tson[x]=go[i];\n\t\t}\n\treturn;\n}\nvoid dfs2(int x,int loc)\n{\n\ttop[x]=loc;\n\tno[x]=++tag;\n\tif(!son[x])\n\t\treturn;\n\tdfs2(son[x],loc);\n\tfor(int i=head[x];i;i=suc[i])\n\t\tif(go[i]!=father[x]&&go[i]!=son[x])\n\t\t\tdfs2(go[i],go[i]);\n\treturn;\n}\nint query(int x,int y)\n{\n\tint res=0;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(depth[top[x]]<depth[top[y]])\n\t\t\tswap(x,y);\n\t\tres^=query(no[x])^query(no[top[x]]-1);\n\t\tx=father[top[x]];\n\t}\n\tif(depth[x]>depth[y])\n\t\tswap(x,y);\n\treturn res^query(no[y])^query(no[x]-1);\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&q);\n\tfor(int i=1;i<=n;++i)\n\t\tscanf(\"%d\",&e[i]);\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tdfs1(1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=n;++i)\n\t\tadd(no[i],e[i]);\n\twhile(q--)\n\t{\n\t\tscanf(\"%d%d%d\",&dir,&x,&y);\n\t\tif(dir==1)\n\t\t{\n\t\t\tadd(no[x],y^e[x]);\n\t\t\te[x]=y;\n\t\t}\n\t\telse printf(\"%d\\n\",query(x,y));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1586655347,
        "uid": 67952,
        "name": "\u767d\u9c9f",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011& \u8f7b\u91cd\u94fe\u5256\u5206\u5b66\u4e60\u7b14\u8bb0"
    },
    {
        "content": "~~\u9707\u60ca,\u849f\u84bb\u5b66\u6811\u5256\u7b2c\u4e8c\u5929\u5c31\u6253\u9898\u89e3~~\n\n\u6240\u4ee5\u8bf4,\u7406\u89e3\u4e4b\u540e\u6811\u5256\u8fd9\u79cd\u4e1c\u897f\u5176\u5b9e\u96be\u5ea6\u771f\u5fc3\u4e0d\u5927.\u81f3\u5c11\u8fd9\u79cd\u6a21\u677f\u9898\u90fd\u53ef\u4ee5\u79d2\u5207\u7684\n\n\u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u535a\u5ba2: [\u6811\u5256\u8be6\u89e3](https://www.cnblogs.com/chinhhh/p/7965433.html)\n\u849f\u84bb\u5c31\u662f\u5728\u8fd9\u4e2a\u535a\u5ba2\u4e0a\u5b66\u5230\u7684\n\n\u5982\u679c\u60f3\u770b\u6211\u81ea\u5df1\u5199\u7684\u603b\u7ed3,\u8bf7\u70b9 [\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/DannyXu/p/12372291.html)\n\u8fd9\u4e2a\u94fe\u63a5(~~\u867d\u7136\u8fd9\u4e2a\u662f\u5199\u7ed9\u81ea\u5df1\u770b\u7684,\u7406\u89e3\u96be\u5ea6\u5e94\u8be5\u4e0d\u5c0f~~)\n\n\u6811\u5256\u7684\u65b9\u6cd5\u5728\u535a\u5ba2\u4e0a\u90fd\u6709\u4e86,\u5728\u8fd9\u91cc\u4e0d\u7ec6\u8bb2,\u4e13\u6ce8\u8bb2\u4e00\u4e0b\u8fd9\u9898\u7684\u5b9e\u73b0:\n\n$dfs$ \u8bf7\u4f7f\u7528\u535a\u5ba2\u4e0a\u7684\u65b9\u6cd5,\u8fd9\u9898\u9700\u8981\u505a\u7684\u53ea\u662f\u7167\u642c\n\n\u9996\u5148,\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0,\u8fd9\u9898\u8ddf\u666e\u901a\u7684\u6811\u5256\u57fa\u672c\u4e0a\u4e00\u6837.\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u4ed6\u8981\u4f7f\u7528 $xor$ .\u90a3\u4e48,\u6211\u4eec\u53d1\u73b0, $xor$ \u7684\u64cd\u4f5c\u5176\u5b9e\u8ddf\u52a0\u51cf\u6ca1\u6709\u4efb\u4f55\u533a\u522b.\u4e8e\u662f,\u6211\u4eec\u53ea\u9700\u8981\u5c06\u52a0\u51cf\u6cd5\u6362\u6210 $xor$, \u8fd9\u9898\u7684\u64cd\u4f5c\u5c31\u5b9e\u73b0\u4e86\n\n1.update\nupdate\u8ddf\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811update\u6ca1\u6709\u533a\u522b,\u800c\u4e14\u4ed6\u4e0d\u9700\u8981lazy,\u56e0\u4e3a\u4ed6\u53ea\u9700\u8981update\u4e00\u4e2a\u70b9.\u6240\u4ee5\u6211\u4eec\u4ecd\u7136\u662f\u4e8c\u5206\u67e5\u627e,\u627e\u5230\u5c31\u4e8c\u5206,\u7136\u540e\u4ed6\u7684\u7236\u4eb2\u5c31\u66f4\u65b0\u4e3a\u5de6\u513f\u5b50 $xor$ \u53f3\u513f\u5b50.\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u89c2\u5bdf\u5230,\u5982\u679c\u66f4\u65b0\u53f3\u513f\u5b50,\u90a3\u4e48\u5de6\u513f\u5b50\u5c31\u4e0d\u7528\u66f4\u65b0\u4e86.\u56e0\u6b64,\u8fd9\u4e2a\u66f4\u65b0\u901f\u5ea6\u662f\u6052\u5b9a\u7684 $O(logn)$\n\n```cpp\nvoid update(int way, int l, int r, int q, int val){\n  if (q<l || q>r) return;//\u4e0d\u5728\u8303\u56f4\u5185(\u5176\u5b9e\u7528\u5904\u4e0d\u5927)\n  if (l==r && r==q) {seg[way]=val;return;}//\u521a\u597d\u662f\u8fd9\u4e2a\u6570\u5c31\u66f4\u65b0\n  if (l==r) return;//\u5426\u5219\u4e0d\u66f4\u65b0\n  int mid = (l+r)/2;\n  if (q<=mid)update(way*2,l,mid,q,val);//\u5728\u5de6\u513f\u5b50\u7684\u533a\u95f4\n  if (q>mid)update(way*2+1,mid+1,r,q,val);//\u5728\u53f3\u513f\u5b50\u7684\u533a\u95f4\n  seg[way]  =seg[way*2]^seg[way*2+1];//\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\n}\n```\n\n2.query\n\n\u8fd9\u9898\u7684\u96be\u70b9\u6765\u4e86:\u600e\u4e48\u62ff\u8def\u5f84\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0,\u53d6\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u76f8\u5f53\u4e8e\u5206\u522b\u53d6\u4e24\u70b9\u5230\u4ed6\u4fe9 $lca$ \u7684\u503c.\n\n\u518d\u89c2\u5bdf,\u6211\u4eec\u53d1\u73b0,\u5728\u53d6 $lca$ \u9014\u4e2d\u7b54\u6848\u53ef\u4ee5\u76f4\u63a5\u66f4\u65b0,\u56e0\u4e3a\u53bblca\u7684\u8def\u5f84\u53ea\u6709\u4e00\u6761,\u6240\u4ee5,\u6211\u4eec\u6bcf\u6b21query\u7684\u65f6\u5019\u5148\u5c06\u7b54\u6848\u8bbe\u62100,\u6bcf\u6b21\u7f51\u4e0a\u8df3\u533a\u95f4\u7684\u65f6\u5019\u7b54\u6848\u5c31\u662f $ans^\u533a\u95f4$\n\n```cpp\nint query_up(int way, int l, int r, int qlow, int qhigh){\n  if (qlow<= l && r<=qhigh) return seg[way];//\u5b8c\u5168\u5305\u56f4\n  if (l>qhigh || r<qlow) return 0;//\u4e0d\u5728\u8303\u56f4\n\n  int mid = (l+r)/2;\n  return (query_up(way*2,l,mid,qlow,qhigh) ^ query_up(way*2+1,mid+1,r,qlow,qhigh));//\u5de6\u513f\u5b50^\u53f3\u513f\u5b50\n}\nint query(int x, int y){\n  int ans = 0;//\u8bbe\u7b54\u6848\u4e3a0\n  while(top[x]!=top[y]){//\u5982\u679c\u4e0d\u5728\u540c\u4e00\u6761\u94fe\n    if (dep[top[x]]<dep[top[y]]) swap(x,y);//\u8c01\u9ad8\u8c01\u4f4e\n    ans ^= query_up(1,1,n,id[top[x]],id[x]);//\u66f4\u65b0\u7b54\u6848\n    x = fat[top[x]];//\u8df3\u5230\u4e0a\u9762\u90a3\u6761\u94fe\n  }\n  if (dep[x]>dep[y]) swap(x,y);\n  ans ^= query_up(1,1,n,id[x],id[y]);//\u627e\u672c\u94fe\u7684\u503c\n  return ans;\n}\n```\n\n\u5b8c\u6574\u4ee3\u7801:\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <fstream>\nusing namespace std;\nconst int MAXN = 1e5+5;\nint res = 0;\nint n,m,r,p,dep[MAXN],fat[MAXN],son[MAXN],sz[MAXN],num[MAXN],id[MAXN],top[MAXN],wt[MAXN],cnt=0,head[MAXN],tot = 0;\nint seg[MAXN*4],lazy[MAXN*4];\nvector<int> adj[MAXN];\nvoid dfs1(int pos, int f, int depth){\n  dep[pos] = depth;\n  fat[pos] = f;\n  sz[pos] = 1;\n  int maxi = -1;\n  for (int v : adj[pos]){\n    if (v == f) continue;\n    dfs1(v,pos,depth+1);\n    sz[pos]+=sz[v];\n    if (maxi<sz[v]) {maxi = sz[v];son[pos] = v;}\n  }\n}\nbool vis[MAXN];\nvoid dfs2(int pos, int top_pos){\n  id[pos] = ++cnt;\n  wt[cnt] = num[pos];\n  top[pos] = top_pos;\n  if (!son[pos]) return;\n  dfs2(son[pos],top_pos);\n  for (int v : adj[pos]){\n    if (v==fat[pos] || v==son[pos])  continue;\n    dfs2(v,v);\n  }\n}//\u6811\u5256\u7684\u57fa\u7840dfs\nvoid make_tree(int way, int l, int r){\n  if (l==r) {seg[way] = wt[l];return;}\n  int mid = (l+r)/2;\n  make_tree(way*2,l,mid);\n  make_tree(way*2+1,mid+1,r);\n  seg[way] = seg[way*2] ^seg[way*2+1] ;\n}//\u5efa\u6811\nvoid update(int way, int l, int r, int q, int val){\n  if (q<l || q>r) return;\n  if (l==r && r==q) {seg[way]=val;return;}\n  if (l==r) return;\n  int mid = (l+r)/2;\n  if (q<=mid)update(way*2,l,mid,q,val);\n  if (q>mid)update(way*2+1,mid+1,r,q,val);\n  seg[way]  =seg[way*2]^seg[way*2+1];\n}//\u66f4\u65b0\nint query_up(int way, int l, int r, int qlow, int qhigh){\n  if (qlow<= l && r<=qhigh) return seg[way];\n  if (l>qhigh || r<qlow) return 0;\n\n  int mid = (l+r)/2;\n  return (query_up(way*2,l,mid,qlow,qhigh) ^ query_up(way*2+1,mid+1,r,qlow,qhigh));\n}//\u6c42\u533a\u95f4\nint query(int x, int y){\n  int ans = 0;\n  while(top[x]!=top[y]){\n    if (dep[top[x]]<dep[top[y]]) swap(x,y);\n    ans ^= query_up(1,1,n,id[top[x]],id[x]);\n    x = fat[top[x]];\n  }\n  if (dep[x]>dep[y]) swap(x,y);\n  ans ^= query_up(1,1,n,id[x],id[y]);\n  return ans;\n}//\u6c42\u94fe\nint main(){\n  cin >> n >> m;\n  for (int i=1;i<=n;i++) cin >> num[i];\n  for (int i=0;i<n-1;i++){\n    int a,b; cin >> a  >> b;\n    adj[a].push_back(b);\n    adj[b].push_back(a);\n  }\n  dfs1(1,0,1);\n  dfs2(1,1);\n  make_tree(1,1,n);\n  //\u521d\u59cb\u5316\n  for (int i=0;i<m;i++){\n    int ind,a,b; cin >> ind >> a >> b;\n    if (ind==1){\n      update(1,1,n,id[a],b);\n    }else{\n      cout << query(a,b) << endl;\n    }//\u64cd\u4f5c\n  }\n}\n```\n\u590d\u6742\u5ea6 $O(nlog^2n)$ \u53ef\u4ee5\u8fc7\n\n\u505a\u5b8c\u5efa\u8bae\u53bb\u505aP3384,\u672c\u849f\u84bb\u5c31\u662f\u505a\u4e86\u90a3\u9898\u624d\u604d\u7136\u5927\u609f\u7684\n",
        "postTime": 1582834568,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6098 \u3010[USACO19FEB]Cow Land G\u3011"
    }
]