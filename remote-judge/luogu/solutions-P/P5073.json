[
    {
        "content": "# \u7ba1\u7406\u5458\u5907\u6ce8\uff1a\u672c\u9898\u89e3\u5f53\u524d\u6570\u636e\u4e0b\u4f1a WA+MLE\uff0c\u4f46\u4ecd\u6709\u4e00\u5b9a\u4ef7\u503c\uff0c\u73b0\u4fdd\u7559\u4f9b\u53c2\u8003\r\n\r\n\u8fd9\u4e0d\u5c31\u662f[P4680](https://www.luogu.org/blog/ShadowassIIXVIIIIV/solution-p4680)\u7684\u4e00\u90e8\u5206\u5417\u2026\u2026\r\n\r\n\u4f30\u8ba1\u5199\u4e864680\u5c31\u53ef\u4ee5\u53bb\u62ff\u53cc\u500d\u7ecf\u9a8c\u4e86\r\n\r\n(ynoi\u4e2d\u7f55\u89c1\u7684\u4e0d\u662f\u5206\u5757\u7684\u9898)\r\n_____________\r\n\r\n### \u524d\u7f6e\u829d\u58eb\uff1a\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305\r\n\r\n\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u53bb\u628aP4680,P4557\u5199\u4e86\u7136\u540e\u60a8\u5c31\u77e5\u9053\u8fd9\u4e1c\u897f\u662f\u4ec0\u4e48\u4e86\r\n\r\n\u6838\u5fc3\u4ee3\u7801\u5c31\u4e09\u884c\u53ef\u4ee5\u53bb\u770b\u6211\u4ee3\u7801\u91cc\u7684linetree::hull_mg\u8fd9\u4e2a\u51fd\u6570\r\n\r\n### \u524d\u7f6e\u829d\u58eb:\u7ebf\u6bb5\u6811\r\n\r\n\u86e4\uff1f\u7ebf\u6bb5\u6811\u90fd\u4e0d\u4f1a\u5c31\u6562\u6de6ynoi\u9898\uff1f\u6211\u5efa\u8bae\u4f60\u6362\u9053\u9898\u505a\u4e00\u505a\r\n\r\n\r\n## \u672c\u9898\u9898\u89e3\r\n\r\n\u90a3\u4e48\u6211\u4eec\u53d1\u73b0\u8981\u6c42\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u90a3\u4e48\u76f4\u89c9\u544a\u8bc9\u6211\u4eec\u9700\u8981\u7ebf\u6bb5\u6811\r\n\r\n\u800c\u4e14\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u9700\u8981\u7ef4\u62a44\u4e2a\u503c\r\n\r\n\u5206\u522b\u662f\r\n\r\n\u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\uff0c\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\uff0c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u533a\u95f4\u548c\r\n\r\n\u5408\u5e76\u5de6\u53f3\u513f\u5b50\u81ea\u5df1\u63a8\u4e00\u4e0b\u5f0f\u5b50\u5c31\u884c\u4e86\uff0c\u5e94\u8be5\u80a5\u80a0\u7b80\u5355\u5c31\u63a8\u51fa\u6765\u4e86\r\n\r\n\u73b0\u5728\u6211\u4eec\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6574\u4f53\u88ab\u52a0\u4e0a\u4e86$mrk$\uff0c\u60f3\u8981\u8be2\u95ee\u8fd9\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u548c\u533a\u95f4\u548c\r\n\r\n\u90a3\u663e\u7136\u533a\u95f4\u548c\u5341\u5206\u597d\u505a\uff0c\u76f4\u63a5$mrk$\u4e58\u533a\u95f4\u957f\u5ea6+\u4e00\u5f00\u59cb\u7684\u533a\u95f4\u548c\u5c31\u80fd\u7b97\u51fa\u6765\u4e86\r\n\r\n\u800c\u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\u548c\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\u7684\u7ef4\u62a4\u96be\u5ea6\u4f3c\u4e4e\u662f\u5dee\u4e0d\u591a\u4e86\r\n\r\n\u6211\u4eec\u5c06$(x,pre(x))$\u548c$(x,suf(x))$\u770b\u6210\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u4e00\u4e2a\u70b9\uff0c\u5176\u4e2d$pre(x)$\u8868\u793a\u957f\u5ea6\u4e3ax\u7684\u524d\u7f00\u7684\u548c\uff0c$suf(x)$\u8868\u793a\u957f\u5ea6\u4e3ax\u7684\u540e\u7f00\u7684\u548c\r\n\r\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5176\u5b9e\u5c31\u662f\u8981\u6700\u5927\u5316$mrk\u00d7x+y$\u7684\u503c\u54af\r\n\r\n\u5982\u679c\u60a8\u5bf9\u659c\u7387\u4f18\u5316\u90a3\u4e00\u5957\u7406\u8bba\u76f8\u5f53\u719f\u6089\u7684\u8bdd,\u4f60\u4f1a\u53d1\u73b0\u53ea\u9700\u8981\u5bf9\u524d\u7f00\u548c\u548c\u540e\u7f00\u548c\u5206\u522b\u7ef4\u62a4\u4e00\u4e2a\u51f8\u5305\uff0c\u7136\u540e\u5728\u51f8\u5305\u4e0a\u4e8c\u5206\u4e00\u4e0b\u5c31\u80fd\u6c42\u51fapre\u548csuf\u7684\u503c\u4e86\r\n\r\n\u90a3\u4e48\u8ba9\u6211\u4eec\u5c06\u7cbe\u529b\u96c6\u4e2d\u5230\u5982\u4f55\u6c42\u51fa\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u4e0a\r\n\r\n\u501f\u52a9\u7ef4\u62a4\u6700\u5927\u524d\u7f00\u548c\u548c\u6700\u5927\u540e\u7f00\u548c\u7684\u7ecf\u9a8c\uff0c\u6211\u4eec\u5e0c\u671b\u6784\u9020\u51fa\u4e00\u4e2a\u4e8c\u7ef4\u7ebf\u6027\u89c4\u5212\u7684\u5f62\u5f0f\u7136\u540e\u8fd9\u6837\u5c31\u53ef\u4ee5\u51f8\u5305\u4e0a\u4e8c\u5206\u505a\u8fd9\u9898\u4e86\r\n\r\n\u90a3\u4e48\u5047\u5982\u6211\u4eec\u8981\u6700\u5927\u5316$mrk\u00d7x+ans(x)$\u7684\u503c\uff0c\u6211\u4eec\u7684$ans(x)$\u662f\u4ec0\u4e48\u5462\r\n\r\n**\u957f\u5ea6\u6070\u597d\u4e3ax\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c**\r\n\r\n~~\u8fd9\u4e2a\u4e1c\u897f,\u4e0d\u597d\u610f\u601d\uff0c\u53ea\u80fd$O(n^2)$\u6c42~~\r\n\r\n\u770b\u8d77\u6765\u6211\u4eec\u7684\u601d\u8def\u9677\u5165\u4e86\u50f5\u5c40\uff1f\r\n\r\n\u51b7\u9759\u4e00\u4e0b\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u6c42\u7684\u5176\u5b9e\u662f$(x,ans(x))$\u5bf9\u5e94\u7684\u51f8\u5305\r\n\r\n\u8fd9\u4e2a\u4e1c\u897f\u8fd8\u662f\u6709\u529e\u6cd5\u6c42\u7684\r\n\r\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5c06\u5de6\u53f3\u4e24\u4e2a\u5b69\u5b50\u7684\u51f8\u5305\u53d6\u4e00\u4e2amax\uff0c\u7136\u540e\u73b0\u5728\u5c31\u662f\u9700\u8981\u6c42\u51fa\u8de8\u8d8amid\u7684\u51f8\u5305\uff0c\u6700\u540e\u628a\u8fd93\u4e2a\u4e1c\u897f\u5408\u5e76\u5230\u4e00\u8d77\u5c31\u6c42\u51fa\u5f53\u524d\u8282\u70b9\u7684ans\u51f8\u5305\u4e86\r\n\r\n\u8de8\u8d8amid\u7684\u51f8\u5305\u7684\u8bdd\u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b\u5c31\u53ef\u4ee5\u53d1\u73b0\u662f\u5de6\u5b69\u5b50\u7684suf\u51f8\u5305\u548c\u53f3\u5b69\u5b50\u51f8\u5305\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u76f4\u63a5$O(n)$\u6c42\r\n\r\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u6c42\u51fa\u6765\u8fd9\u4e2a\u8282\u70b9\u7684ans\u51f8\u5305\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51f8\u5305\u4e0a\u4e8c\u5206\u4e00\u4e0b\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u5f53\u524d\u8282\u70b9\u7684ans\u4e86\r\n\r\n\u597d\u4e86\u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u505a\u5b8c\u4e86\u8fd9\u9898\uff1f\r\n\r\n\u4e0d\u4e0d\u4e0d,\u4f60\u53d1\u73b0\u6211\u4eec\u9700\u8981\u63d0\u53d6log\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\uff0c\u6bcf\u6b21\u63d0\u53d6\u4fe1\u606f\u7684\u65f6\u5019\u90fd\u9700\u8981\u4e8c\u5206\uff0c\u5355\u6b21\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u8fbe\u5230\u4e86\u6050\u6016\u7684$O(log^2n)$\u662f\u7edd\u5bf9\u8fc7\u4e0d\u53bb\u7684\r\n\r\n~~\u770b\u8d77\u6765\u6211\u4eec\u53c8\u53cc\u53d2\u53d5\u8981\u5728ynoi\u9898\u91cc\u5361log\u4e86~~\uff0c\u76f4\u89c9\u544a\u8bc9\u6211\u4eec\u80af\u5b9a\u662f\u7528\u4e00\u4e2a\u5747\u644a\u7684\u7b97\u6cd5\u5361\u6389log\r\n\r\n\u600e\u4e48\u529e\u5462\uff1f\r\n\r\n\u6211\u4eec\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u7136\u540e\u6c42\u51fa\u56de\u7b54\u6bcf\u4e2a\u8be2\u95ee\u5168\u5c40\u88ab\u52a0\u7684\u503c\u662f\u591a\u5c11\uff0c\u8bbe\u8fd9\u4e2a\u503c\u4e3aval\uff0c\u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u8be2\u95ee\u6309\u7167val\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\r\n\r\n\u6b64\u65f6\u6211\u4eec\u63a5\u7740\u53bb\u56de\u7b54\u8fd9\u4e9b\u8be2\u95ee\uff0c\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u4e8c\u5206\u7684\u659c\u7387\u5c06\u4f1a\u662f\u5355\u8c03\u7684,\u8fd9\u610f\u5473\u7740\u6700\u4f18\u51b3\u7b56\u70b9\u5355\u8c03\u53f3\u79fb,\u6b64\u65f6\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u4e8c\u5206\u4e86\u800c\u662f\u6bcf\u4e2a\u51f8\u5305\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\u8868\u793a\u5f53\u524d\u7684\u6700\u4f18\u51b3\u7b56\u70b9\u7136\u540e\u66b4\u529b\u7684\u5411\u53f3\u722c\u8fd9\u4e2a\u6307\u9488\u5c31ok\u4e86\r\n\r\n\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u632a\u52a8\u6307\u9488\u7684\u5747\u644a\u590d\u6742\u5ea6\u5c31\u662f$O(n)$\u7684\u4e0d\u4f1a\u6210\u4e3a\u590d\u6742\u5ea6\u7684\u74f6\u9888\r\n\r\n\u5982\u6b64\u8fd9\u822c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a$O(nlogn+n+mlogn)$\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u672c\u9898(\u4e0b\u9762\u7684\u4ee3\u7801\u6ca1\u6709\u52a0\u5feb\u8bfb\u7167\u6837\u80fd\u8fc7\u8fd9\u9898)\r\n\r\n\u987a\u4fbf\u8bf4\u4e00\u53e5\u4f60\u53ef\u80fd\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u4e00\u4e9btrick\uff0c\u6bd4\u5982\u5904\u7406\u6bcf\u4e2a\u8282\u70b9\u4e0a\u50a8\u5b58\u7684\u51f8\u5305\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u6bcf\u4e00\u5c42\u7684\u51f8\u5305\u5206\u914d\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u4f1a\u51cf\u5c11\u4e00\u4e9b\u8bbf\u5b58\u7684\u538b\u529b\uff0c\u8fd8\u6709\u5c31\u662f\u8981\u6ce8\u610f\u5c01\u88c5~~\u4e0d\u7136\u8fd9\u9898\u53ef\u80fd\u4f1a\u628a\u4f60\u5199\u6b7b~~\r\n\r\n\u4e0a\u4ee3\u7801~\r\n\r\n```C\r\n#include<cstdio>\r\n#include<algorithm>\r\nusing namespace std;const int N=3*1e5+10;typedef long long ll;const ll inf=-(1LL<<50);\r\nstruct poi//\u70b9\u7684\u7ed3\u6784\u4f53\r\n{\r\n    ll x;ll y;\r\n    friend poi operator +(poi a,poi b){return (poi){a.x+b.x,a.y+b.y};}\r\n    friend poi operator -(poi a,poi b){return (poi){a.x-b.x,a.y-b.y};}\r\n    friend bool operator <=(poi a,poi b){return a.y*b.x<=a.x*b.y;}\r\n};ll mrk;int n;int m;\r\nstruct hull//\u51f8\u5305\u7684\u7ed3\u6784\u4f53\r\n{\r\n    poi* st;int tp;int nw;\r\n    inline poi& operator [](const int& x){return st[x];}\r\n    inline void ins(const poi& a){st[a.x].y=max(st[a.x].y,a.y);}\r\n    inline void sis(const poi& a){st[++tp]=a;}\r\n    inline void ih(int lim){for(int i=1;i<=lim;i++)st[i]=(poi){i,inf};tp=lim;}\r\n    inline void build()\r\n    {\r\n\t\tif(tp<=2)return;int i,lim;\r\n        for(i=3,lim=tp,tp=2;i<=lim;i++)\r\n        {\r\n\t\t\tif(st[i].y==inf)continue;\r\n\t\t\twhile(tp>1&&(st[tp]-st[tp-1])<=(st[i]-st[tp-1]))tp--;st[++tp]=st[i];\r\n\t\t}nw=1;\r\n    }\r\n    inline ll cbst()\r\n    {while(nw!=tp&&(-mrk)*(st[nw+1].x-st[nw].x)<(st[nw+1].y-st[nw].y))nw++;return mrk*st[nw].x+st[nw].y;}\r\n};\r\nstruct data//\u6700\u5927\u5b50\u6bb5\u548c\u7684\u7ed3\u6784\u4f53\r\n{\r\n    ll pre;ll suf;ll ans;ll sum;\r\n    friend data operator +(data a,data b)\r\n    {\r\n        return (data){max(a.pre,a.sum+b.pre),max(a.suf+b.sum,b.suf),max(max(a.ans,b.ans),a.suf+b.pre)\r\n        ,a.sum+b.sum};\r\n    }\r\n};ll a[N];\r\nstruct linetree\r\n{\r\n    poi pre_bas[20][N<<1];poi suf_bas[20][N<<1];poi ans_bas[20][N<<1];\r\n    poi* tp_pre[20];poi* tp_suf[20];poi* tp_ans[20];//\u5206\u914d\u5185\u5b58\u7684\u6307\u9488\r\n    hull pre[4*N];hull suf[4*N];hull ans[4*N];ll sum[4*N];\r\n    linetree()\r\n    {\r\n        for(int i=0;i<20;i++)tp_pre[i]=pre_bas[i];for(int i=0;i<20;i++)tp_suf[i]=suf_bas[i];\r\n        for(int i=0;i<20;i++)tp_ans[i]=ans_bas[i];\r\n    }\r\n    inline void smpmg(hull& c,hull& a,hull& b,const poi& sf)//\u5408\u5e76\u524d\u7f00\u548c\u540e\u7f00\u7684\u51f8\u5305\r\n    {for(int i=1;i<=a.tp;i++)c.sis(a[i]);for(int i=1;i<=b.tp;i++)c.sis(sf+b[i]);c.build();}\r\n    inline void hull_mg(hull& c,hull& a,hull& b)//\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305\r\n    {\r\n        int i=1;int j=1;c.ins(a[i]+b[j]);\r\n        while(i!=a.tp&&j!=b.tp)(((a[i+1]-a[i])<=(b[j+1]-b[j]))?j:i)++,c.ins(a[i]+b[j]);\r\n        while(i!=a.tp)i++,c.ins(a[i]+b[j]);while(j!=b.tp)j++,c.ins(a[i]+b[j]);\r\n    }\r\n    inline void build(int p,int l,int r,int dep)//\u5efa\u6811\uff0c\u5c31\u662f\u65e0\u8111\u5408\u5e76\u4e00\u4e0b\u51f8\u5305\u5c31\u6ca1\u4e86\r\n    {\r\n        pre[p].st=tp_pre[dep];suf[p].st=tp_suf[dep];ans[p].st=tp_ans[dep];int mid;\r\n        if(r-l==1)\r\n        {\r\n            pre[p][2]=suf[p][2]=ans[p][2]=(poi){1,a[r]};sum[p]=a[r];\r\n            pre[p][1]=suf[p][1]=ans[p][1]=(poi){0,0};pre[p].tp=suf[p].tp=ans[p].tp=2;goto ed;\r\n        }mid=(l+r)/2;build(p<<1,l,mid,dep+1);build(p<<1|1,mid,r,dep+1);sum[p]=sum[p<<1]+sum[p<<1|1];\r\n        smpmg(pre[p],pre[p<<1],pre[p<<1|1],(poi){mid-l,sum[p<<1]});\r\n        smpmg(suf[p],suf[p<<1|1],suf[p<<1],(poi){r-mid,sum[p<<1|1]});ans[p].st++;ans[p].ih(r-l);\r\n        for(int i=1;i<=ans[p<<1].tp;i++)ans[p].ins(ans[p<<1][i]);\r\n        for(int i=1;i<=ans[p<<1|1].tp;i++)ans[p].ins(ans[p<<1|1][i]);\r\n        hull_mg(ans[p],suf[p<<1],pre[p<<1|1]);ans[p].st--;ans[p][1]=(poi){0,0};ans[p].tp++;ans[p].build();\r\n        ed:pre[p].nw=suf[p].nw=ans[p].nw=1;tp_pre[dep]=pre[p].st+pre[p].tp;\r\n        tp_suf[dep]=suf[p].st+suf[p].tp;tp_ans[dep]=ans[p].st+ans[p].tp;\r\n    }\r\n    inline data qry(int p,int l,int r,int dl,int dr)//\u8be2\u95ee\u76f4\u63a5\u5957\u7ebf\u6bb5\u6811\u677f\u5b50\u5c31\u884c\u4e86\r\n    {\r\n        if(dl==l&&dr==r)\r\n        {data ret=(data){pre[p].cbst(),suf[p].cbst(),ans[p].cbst(),sum[p]+(r-l)*mrk};return ret;}\r\n\t\tint mid=(l+r)/2;\r\n        if(dr<=mid)return qry(p<<1,l,mid,dl,dr);if(dl>=mid)return qry(p<<1|1,mid,r,dl,dr);\r\n        return qry(p<<1,l,mid,dl,mid)+qry(p<<1|1,mid,r,mid,dr);\r\n    }\r\n}lt;\r\nstruct qry\r\n{\r\n    ll mrv;int l;int r;int fr;\r\n    friend bool operator <(qry a,qry b){return a.mrv<b.mrv;}\r\n}qr[N<<1];int tp;ll ans[N<<1];\r\nint main()\r\n{\r\n    scanf(\"%d%d\",&n,&m);\r\n    for(int i=1;i<=n;i++)scanf(\"%lld\",&a[i]);\r\n    for(int i=1,typ,l,r;i<=m;i++)//\u79bb\u7ebf\u8be2\u95ee\r\n    {\r\n        scanf(\"%d%d\",&typ,&l);\r\n        if(typ==1)mrk+=l;else scanf(\"%d\",&r),++tp,qr[tp]=(qry){mrk,l,r,tp};\r\n    }\r\n\tsort(qr+1,qr+tp+1);mrk=qr[1].mrv;\r\n    for(int i=1;i<=tp;i++)qr[i].mrv-=mrk;for(int i=1;i<=n;i++)a[i]+=mrk;lt.build(1,0,n,0);\r\n    for(int i=1;i<=tp;i++)\r\n        mrk=qr[i].mrv,ans[qr[i].fr]=lt.qry(1,0,n,qr[i].l-1,qr[i].r).ans;\r\n    for(int i=1;i<=tp;i++)printf(\"%lld\\n\",ans[i]);return 0;//\u62dc\u62dc\u7a0b\u5e8f~\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "postTime": 1544332825,
        "uid": 56384,
        "name": "shadowice1984",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5073 \u3010[Ynoi2015]\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\u3011"
    },
    {
        "content": "\u795e\u4ed9\u8ba1\u7b97\u51e0\u4f55\u9898\u2026\u2026\n\n~~\u5e0c\u671b\u8fd9\u9053 Ynoi2015 \u7684\u538b\u8f74\u9898\u4e0d\u4f1a\u8ba9\u4f60\u5bf9\u73c2\u5b66\u7684\u70ed\u7231\u4e27\u5931\u6b86\u5c3d\u3002~~\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a\u7ebf\u6bb5\u6811\u3001\u51f8\u5305\u3001Minkowski Sum\n\n\u9996\u5148\u6211\u4eec\u6765\u770b\u4e0d\u5e26\u4fee\u6539\u600e\u4e48\u505a\u8fd9\u4e2a\u9898\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u9762\u7ef4\u62a4\u533a\u95f4\u548c\u3001\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\u3001\u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\u3001\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5408\u5e76\u7684\u65f6\u5019\u76f4\u63a5\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\n\n\u7136\u540e\u5982\u679c\u52a0\u4e0a\u5168\u5c40\u52a0\uff0c\u6211\u4eec\u8fd8\u662f\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u4e0a\u9762\u7684\u56db\u4e2a\u4fe1\u606f\u3002\n\n\u9996\u5148\u533a\u95f4\u548c\u76f4\u63a5\u505a\u5c31\u53ef\u4ee5\u3002\n\n\u533a\u95f4\u524d\u7f00\u548c\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u51f8\u51fd\u6570 $f(x)$ \u8868\u793a\u957f\u5ea6\u4e3a $x$ \u7684\u524d\u7f00\u548c\u3002\n\n\u540e\u7f00\u548c\u540c\u7406\uff0c\u8bb0\u8fd9\u4e2a\u51fd\u6570\u4e3a $g(x)$\u3002\n\n\u5168\u5c40\u52a0 $d$ \u7136\u540e\u63d0\u53d6\u6700\u5927\u7684\u65f6\u5019\u662f\u6700\u5927\u5316 $f(x)+dx$\uff08$g(x)+dx$\uff09\uff0c\u663e\u7136\u53ef\u4ee5\u51f8\u5305\u4e8c\u5206\u3002\n\n\u7136\u540e\u6211\u4eec\u53bb\u8003\u8651\u5982\u4f55\u6c42\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n\u8fd8\u662f\u7ef4\u62a4\u51f8\u5305\u7684\u601d\u8def\uff0c\u7ef4\u62a4\u4e00\u4e2a\u51f8\u51fd\u6570 $h(x)$\uff0c\u8868\u793a\u957f\u5ea6\u6070\u597d\u4e3a $x$ \u7684\u5b50\u6bb5\u548c\u6700\u5927\u4e3a\u591a\u5c11\u3002\n\n\u7136\u800c\u8fd9\u4e2a\u4e1c\u897f\u662f\u6ca1\u6cd5\u76f4\u63a5\u6c42\u7684\u2026\u2026\n\n\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u53d6\u5728\u7ebf\u6bb5\u6811\u4e0a\u4e24\u4e2a\u5b50\u8282\u70b9\u7684 $g_L(x)$ \u548c $f_R(y)$\uff0c\u7136\u540e\u6709\u5173\u7cfb\u5f0f $h(x+y)=g_L(x)+f_R(y)$\u3002\n\n\u6240\u4ee5\u8fd9\u4e2a $h$ \u5b9e\u9645\u4e0a\u5c31\u662f $g_L$ \u548c $f_R$ \u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\u518d\u5bf9 $h_L$ \u548c $h_R$ \u53d6 $\\max$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e3a $s$ \u7684\u8282\u70b9\u53ef\u4ee5 $O(s)$ \u6c42\u51fa\u8fd9\u4e2a\u70b9\u4e0a\u9762\u7684\u6240\u6709\u51f8\u5305\u3002\n\n\u65e2\u7136\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5 $O(n\\log n)$ \u5efa\u51fa\u7ebf\u6bb5\u6811\u3002\n\n\u7136\u800c\u63d0\u53d6\u7b54\u6848\u7684\u65f6\u5019\u51f8\u5305\u4e8c\u5206\u4e0a\u8fd8\u6709\u4e00\u4e2a $\\log$\uff0c$O(m\\log ^2 n)$ \u5bf9\u6211\u8fd9\u79cd\u4eba\u50bb\u5e38\u6570\u5927\u7684\u9009\u624b\u662f\u522b\u60f3\u8fc7\u7684\u3002\n\n\u7531\u4e8e\u53ef\u4ee5\u52a0\u8d1f\u6570\uff0c\u6240\u4ee5\u79bb\u7ebf\u4e0b\u6765\uff0c\u6240\u6709\u8be2\u95ee\u6309\u7167\u5f53\u524d\u6574\u4f53\u52a0\u7684\u503c\u5347\u5e8f\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u53d8\u6210\u4e86\u53ea\u52a0\u6b63\u6570\uff0c\u800c\u6b64\u65f6\u51b3\u7b56\u70b9\u4e00\u5b9a\u662f\u5355\u8c03\u53f3\u79fb\u7684\uff0c\u6240\u4ee5\u6b64\u65f6\u5728\u51f8\u5305\u4e0a\u9762\u641e\u4e2a\u6307\u9488\u5728\u8be2\u95ee\u7684\u65f6\u5019\u5f80\u53f3\u722c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u662f $O((n+m)\\log n)$\u3002\n\n\u4f46\u662f\u56e0\u4e3a\u6211\u662f\u7528 vector \u5b9e\u73b0\u7684\u51f8\u5305\uff0c\u6240\u4ee5\u8dd1\u5f97\u7279\u522b\u6162\uff0c\u4e0d\u4fdd\u8bc1\u80fd\u5728\u4efb\u610f\u65f6\u5019\u901a\u8fc7\u672c\u9898\u3002\n\n\u4e0d\u8fc7\u7801\u98ce\u81f3\u5c11\u662f\u6bd4 shadow \u5927\u795e\u4ed9\u7684\u53cb\u597d\u4e0d\u5c11\u7684\u5427\u2026\u2026\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline long long qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline long long Abs(const long long& x) {return (x > 0 ? x : -x);}\ninline long long Max(const long long& x, const long long& y) {return (x > y ? x : y);}\ninline long long Min(const long long& x, const long long& y) {return (x < y ? x : y);}\n\nconst int N = 300005, M = 600005;\nconst long long MINF = -0x3f3f3f3f3f3f3f3f;\n\nstruct Point {\n\tlong long x, y;\n\tPoint(long long x = 0, long long y = 0) : x(x), y(y) {}\n\tinline Point operator + (const Point& b) const {return Point(x + b.x, y + b.y);}\n\tinline Point operator - (const Point& b) const {return Point(x - b.x, y - b.y);}\n\tinline long long operator * (const Point& b) const {return x * b.y - y * b.x;}\n\tinline bool operator <= (const Point& b) const {return (*this) * b >= 0;}\n};\n\nlong long addv, a[N], ans[M];\n\nstruct Hull {\n\tvector <Point> vc;\n\tint pnt;\n\tHull() {pnt = 0;}\n\tinline Point operator [](const int& idx) const {return vc[idx];}\n\tinline void Insert(const Point& a) {vc[a.x].y = Max(vc[a.x].y, a.y);}\n\tinline void Pushback(const Point& a) {vc.push_back(a);}\n\tinline void Empty(int len) {\n\t\tvc.clear();\n\t\tvc.push_back(Point(0, 0));\n\t\tfor (register int i = 1;i <= len;i++) vc.push_back(Point(i, MINF));\n\t}\n\tinline void Convex() {\n\t\tregister int siz = vc.size();\n\t\tif (siz <= 2) return;\n\t\tregister int top = 1;\n\t\tfor (register int i = 2;i < siz;i++) {\n\t\t\tif (vc[i].y == MINF) continue;\n\t\t\twhile (top > 0 && vc[top] - vc[top - 1] <= vc[i] - vc[top - 1]) top--;\n\t\t\tvc[++top] = vc[i];\n\t\t}\n\t\tfor (register int i = 1;i < siz - top;i++) vc.pop_back();\n\t}\n\tinline long long Maxv() {\n\t\tregister int siz = vc.size();\n\t\twhile (pnt < siz - 1 && addv * (vc[pnt + 1].x - vc[pnt].x) + vc[pnt + 1].y - vc[pnt].y > 0) pnt++;\n\t\treturn addv * vc[pnt].x + vc[pnt].y;\n\t}\n};\n\nstruct Result {\n\tlong long lmax, rmax, midmax, sum;\n\tResult(long long lmax = 0, long long rmax = 0, long long midmax = 0, long long sum = 0)\n\t\t: lmax(lmax), rmax(rmax), midmax(midmax), sum(sum) {}\n\tResult operator + (const Result& b) const {\n\t\treturn Result(Max(lmax, sum + b.lmax), Max(b.rmax, b.sum + rmax), Max(Max(midmax, b.midmax), rmax + b.lmax), sum + b.sum);\n\t}\n};\n\nstruct Segtree {\n\tHull lmax[N << 2], rmax[N << 2], ans[N << 2];\n\tlong long sum[N << 2];\n\tinline void preSufMerge(Hull& c, Hull& a, Hull& b, Point addb) {\n\t\tregister int siza = a.vc.size(), sizb = b.vc.size();\n\t\tfor (register int i = 0;i < siza;i++) c.Pushback(a[i]);\n\t\tfor (register int i = 0;i < sizb;i++) c.Pushback(addb + b[i]);\n\t\tc.Convex();\n\t}\n\tinline void Minkowski(Hull& c, Hull& a, Hull& b) {\n\t\tregister int i = 0, j = 0, siza = a.vc.size(), sizb = b.vc.size();\n\t\tc.Insert(a[i] + b[j]);\n\t\twhile (i < siza - 1 && j < sizb - 1) {\n\t\t\tif (a[i + 1] - a[i] <= b[j + 1] - b[j]) {\n\t\t\t\tj++;\n\t\t\t\tc.Insert(a[i] + b[j]);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t\tc.Insert(a[i] + b[j]);\n\t\t\t}\n\t\t}\n\t\twhile (i < siza - 1) {\n\t\t\ti++;\n\t\t\tc.Insert(a[i] + b[j]);\n\t\t}\n\t\twhile (j < sizb - 1) {\n\t\t\tj++;\n\t\t\tc.Insert(a[i] + b[j]);\n\t\t}\n\t}\n\tinline void Build(int p, int l, int r) {\n\t\tif (l == r) {\n\t\t\tlmax[p].Pushback(Point(0, 0));\n\t\t\tlmax[p].Pushback(Point(1, a[l]));\n\t\t\trmax[p].Pushback(Point(0, 0));\n\t\t\trmax[p].Pushback(Point(1, a[l]));\n\t\t\tans[p].Pushback(Point(0, 0));\n\t\t\tans[p].Pushback(Point(1, a[l]));\n\t\t\tsum[p] = a[l];\n\t\t\treturn;\n\t\t}\n\t\tregister int mid = l + r >> 1;\n\t\tBuild(p << 1, l, mid);\n\t\tBuild(p << 1 | 1, mid + 1, r);\n\t\t// Calculate Prefix\n\t\tpreSufMerge(lmax[p], lmax[p << 1], lmax[p << 1 | 1], Point(mid - l + 1, sum[p << 1]));\n\t\t// Calculate Suffix\n\t\tpreSufMerge(rmax[p], rmax[p << 1 | 1], rmax[p << 1], Point(r - mid, sum[p << 1 | 1]));\n\t\t// Calculate Ans\n\t\tans[p].Empty(r - l + 1);\n\t\tregister int siz = ans[p << 1].vc.size();\n\t\tfor (register int i = 0;i < siz;i++) ans[p].Insert(ans[p << 1][i]);\n\t\tsiz = ans[p << 1 | 1].vc.size();\n\t\tfor (register int i = 0;i < siz;i++) ans[p].Insert(ans[p << 1 | 1][i]);\n\t\tMinkowski(ans[p], rmax[p << 1], lmax[p << 1 | 1]);\n\t\tans[p].Convex();\n\t\t// Calculate Sum\n\t\tsum[p] = sum[p << 1] + sum[p << 1 | 1];\n\t}\n\tinline Result Query(int p, int pl, int pr, int l, int r) {\n\t\tif (pl == l && pr == r) return Result(lmax[p].Maxv(), rmax[p].Maxv(), ans[p].Maxv(), sum[p] + 1ll * (r - l + 1) * addv);\n\t\tregister int mid = pl + pr >> 1;\n\t\tif (mid >= r) return Query(p << 1, pl, mid, l, r);\n\t\telse if (mid + 1 <= l) return Query(p << 1 | 1, mid + 1, pr, l, r);\n\t\telse return Query(p << 1, pl, mid, l, mid) + Query(p << 1 | 1, mid + 1, pr, mid + 1, r);\n\t}\n};\n\nstruct Query {\n\tint l, r, idx;\n\tlong long addv;\n\tbool operator < (const Query& b) const {return addv < b.addv;}\n};\n\nint n, m, q;\nSegtree sgt;\nQuery qry[M];\n\ninline void Read() {\n\tn = qread(); m = qread();\n\tfor (register int i = 1;i <= n;i++) a[i] = qread();\n\tfor (register int i = 1;i <= m;i++) {\n\t\tregister int opt = qread();\n\t\tif (opt == 1) addv += qread();\n\t\telse {q++; qry[qry[q].idx = q].l = qread(); qry[q].r = qread(); qry[q].addv = addv;}\n\t}\n\tm = q;\n}\n\ninline void Solve() {\n\tsort(qry + 1, qry + m + 1);\n\tfor (register int i = 1;i <= n;i++) a[i] += qry[1].addv;\n\tfor (register int i = m;i >= 1;i--) qry[i].addv -= qry[1].addv;\n\tsgt.Build(1, 1, n);\n\tfor (register int i = 1;i <= m;i++) {\n\t\taddv = qry[i].addv;\n\t\tans[qry[i].idx] = sgt.Query(1, 1, n, qry[i].l, qry[i].r).midmax;\n\t}\n\tfor (register int i = 1;i <= m;i++) printf(\"%lld\\n\", ans[i]);\n}\n\nint main() {\n\tRead();\n\tSolve();\n\treturn 0;\n}\n```\n\n\u6700\u540e\u7559\u4e2a[\u7eaa\u5ff5](https://www.luogu.com.cn/paste/qi4znhbq)\u3002",
        "postTime": 1593314396,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5073 \u3010[Ynoi2015]\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6211\u7b2c\u4e00\u7bc7\u4fe1\u4ef0\u9898\u7684\u9898\u89e3\u3002\n\n## \u4e00\u4e9b\u524d\u8a00\n\n\u4f60\u662f\u4e00\u4e2a\u849f\u84bb\u3002\n\n\u4f60\u6253\u5f00\u4e86\u8fd9\u9053\u9898\u3002\n\n\u4f60\u53d1\u73b0\u4e0d\u4f1a\u505a\uff0c\u70b9\u5f00\u9898\u89e3\u3002\n\n\u56e0\u4e3a\u4f60\u592a\u5f31\u4e86\uff0c\u6240\u4ee5\u6839\u672c\u5b66\u4e0d\u61c2\u95f5\u53ef\u592b\u65af\u57fa\u548c\u3002\n\n\u4f60\u4e00\u6012\u4e4b\u4e0b\u5f00\u59cb\u62ff\u9519\u89e3\u5361\u3002\n\n\u5361\u4e86\u4e24\u5929\u5361\u8fc7\u53bb\u4e86\u3002\n\n\u55ef\uff0c\u9519\u89e3\u5361 Ynoi \u633a\u597d\u73a9\u7684\uff08\n\n## \u5177\u4f53\u601d\u8def\uff1a\n\n\u5176\u5b9e\u6211\u662f\u5148\u505a\u7684\u672b\u65e5\u4e09\u95ee\uff0c\u7136\u540e\u53d1\u73b0\u67d0\u4e9b\u601d\u8def\u53ef\u4ee5\u5957\u7528\u8fdb\u6765\u3002\n\n\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u8003\u8651\u5206\u5757\uff0c\u5bf9\u4e8e\u6700\u5927\u5b50\u6bb5\u548c\u7684\u7ecf\u5178\u65b9\u6cd5\u662f\u7ef4\u62a4\u5757\u5185\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n\u90a3\u4e48\uff0c\u5982\u679c\u7528\u5206\u5757\u7ef4\u62a4\u8fd9\u4e2a\u5462\uff1f\n\n\u524d\u7f00\u548c\u4e0e\u540e\u7f00\u548c\u7b49\u4ef7\uff0c\u6682\u65f6\u53ea\u8003\u8651\u4e00\u4e2a\uff0c\u5bf9\u4e8e\u957f\u5ea6\u4e3a $i$ \u7684\u524d\u7f00\uff0c\u5b9e\u9645\u8d21\u732e\u662f $sum_i+tag\\times i$\u3002\n\n\u8fd9\u5176\u5b9e\u53ef\u4ee5\u8f6c\u5316\u4e3a $y=kx+b$\uff0c\u7136\u540e\u5efa\u51fa\u51f8\u5305\uff0c\u67e5\u8be2\u7684\u65f6\u5019\u4e8c\u5206\u3002\n\n\u90a3\u4e48\u6700\u5927\u5b50\u6bb5\u548c\u5462\uff1f\n\n\u53d1\u73b0\u5982\u679c\u56fa\u5b9a\u533a\u95f4\u957f\u5ea6\uff0c\u5373 $num_{i,j}$ \u4ee3\u8868\u7b2c $i$ \u4e2a\u5757\u5185\u533a\u95f4\u957f\u5ea6\u4e3a $j$ \u7684\u6700\u5927\u548c\uff0c\u90a3\u4e48\uff0c\u7b54\u6848\u53c8\u80fd\u88ab\u8f6c\u5316\u4e3a $y=kx+b$\u3002\n\n\u82e5 $B$ \u662f\u5757\u957f\uff0c\u5219\u8fd9\u4e9b\u80fd\u5728 $O(nB)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u9884\u5904\u7406\uff0c\u800c\u56e0\u4e3a\u4fee\u6539\u662f\u5168\u5c40\u4fee\u6539\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u91cd\u6784\u3002\n\n\u4f46\u73b0\u5728\uff0c\u590d\u6742\u5ea6\u662f $O(\\dfrac{nm}{B}\\log_2 B+mB)$\uff0c\u4e0d\u7528\u60f3\u4e86\uff0c\u8fc7\u4e0d\u53bb\u3002\n\n\u597d\uff0c\u8ba9\u6211\u4eec\u53d1\u6325\u4f20\u7edf\u827a\u80fd\u3002\n\n**\u5f00\u59cb\u5361\u5e38\uff01**\n\n\u9996\u5148\uff0c\u901a\u8fc7\u8c03\u5757\u957f\u80fd\u5e73\u8861\u590d\u6742\u5ea6\uff0c\u8c03\u6210 $1000$ \u5373\u53ef\u3002\n\n\u8003\u8651\u5982\u4f55\u4f18\u5316\u6574\u5757\u67e5\u8be2\u3002\n\n\u663e\u800c\u6613\u89c1\u7684\uff0c\u5982\u679c\u6574\u4e2a\u5757\u5168\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\uff0c\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\u5c31\u90fd\u76f8\u5f53\u4e8e $\\max(\\text{sum},0)$\uff0c\u8fd9\u4e2a\u4f18\u5316\u770b\u8d77\u6765\u5f88\u5783\u573e\u4f46\u5b9e\u6d4b\u633a\u7ba1\u7528\u7684\u3002\n\n\u800c\u7ef4\u62a4\u5b83\u4e5f\u5f88\u65b9\u4fbf\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u5757\u5185\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u5c31\u597d\u4e86\u3002\n\n\u5176\u6b21\uff0c\u6211\u4eec\u60f0\u6027\u4fee\u6539\uff0c\u5e76\u4e0d\u662f\u53ea\u8981\u4e00\u4fee\u6539\u5c31\u7acb\u523b\u7ef4\u62a4\u5168\u90e8\u5757\u7684\u4fe1\u606f\uff0c\u800c\u662f\u7b49\u5230\u67e5\u8be2\u4e86\u8fd9\u4e2a\u5757\u518d\u7ef4\u62a4\uff0c\u8fd9\u6837\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\u96c6\u4e2d\u7684\u6570\u636e\u5f88\u6709\u6548\u3002\n\n\u6574\u5757\u67e5\u8be2\u5df2\u7ecf\u5dee\u4e0d\u591a\u4e86\uff0c\u5b9e\u9645\u6700\u6162\u7684\u70b9\u53ea\u9700\u8981\u8dd1 $400\\text{ms}$\u3002\n\n\u8003\u8651\u4f18\u5316\u6563\u5757\u3002\n\n\u53d1\u73b0\uff0c\u6563\u5757\u957f\u5ea6\u592a\u5927\u4e86\uff0c~~\u6240\u4ee5\u6211\u4eec\u518d\u628a\u5757\u957f\u8c03\u56de\u53bb~~\u3002\n\n\u518d\u6b21\u53d1\u6325\u4f20\u7edf\u827a\u80fd\uff0c\u91c7\u7528\u5faa\u73af\u5c55\u5f00\u3002\n\n\u4f46\u8fd9\u6837\u8fd8\u662f\u4e0d\u591f\uff0c\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u9020\u6570\u636e\u7684\u4eba\u5176\u5b9e\u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u7684\u5757\u957f\uff0c\u90a3\u4e48\uff0c\u5982\u4f55\u8ba9\u6563\u5757\u7684\u590d\u6742\u5ea6\u8fbe\u5230\u6700\u9ad8\u5462\uff1f\n\n\u5373\uff0c\u6bcf\u6b21\u67e5\u8be2\u533a\u95f4 $[1,n]$\uff0c\u5f53\u7136\uff0c\u6bcf\u6b21\u90fd $[1,n]$ \u4f1a\u88ab\u7279\u5224\u6389\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u5e26\u4e00\u4e2a\u5f88\u5c0f\u7684\u589e\u91cf\uff0c\u4f8b\u5982 $[10,n-5]$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u9762\u5411\u6570\u636e\u7f16\u7a0b\uff0c\u5c06\u7b2c\u4e00\u4e2a\u5757\u548c\u6700\u540e\u4e00\u4e2a\u5757\u7684\u957f\u5ea6\u8bbe\u4e3a $50$\uff0c\u5176\u4f59\u4e0d\u53d8\u3002\n\n\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u4e2a\u66f4\u9760\u8c31\u4e00\u70b9\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u8ba9\u5757\u957f\u4e3a $100$\uff0c\u5904\u7406\u7b2c\u4e8c\u4e2a\u5206\u5757\uff0c\u5176\u5b9e\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6df1\u5ea6\u53ea\u6709 $2$ \u7684\u7ebf\u6bb5\u6811\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4e0a\u8ff0\u7684\u601d\u8def\u7a7a\u95f4\u662f $O(n)$ \u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u7384\u5b66\uff0c\u4f46\u662f\u5361\u4e00\u5361\u80fd\u8fc7\u3002\n\n## \u4ee3\u7801\uff1a\n\n\u559c\u63d0\u6700\u52a3\u89e3\u3002\n\n\u8fd9\u91cc\u53ea\u6302\u90e8\u5206\u6bd4\u8f83\u91cd\u8981\u7684\u51fd\u6570\u3002\n\n```cpp\n//This code is written by hmz,ans hmz is cute!!!\ninline void solve(int l,int r,long long&now,long long&ans){\n\tint i=l;for(;i<=r-7;i+=8){//\u4f20\u7edf\u827a\u80fd\u4e4b\u5faa\u73af\u5c55\u5f00\n\t\tnow=(now<0?0:now)+val[i]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+1]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+2]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+3]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+4]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+5]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+6]+ALLTAG,ans=(ans<now?now:ans),\n\t\tnow=(now<0?0:now)+val[i+7]+ALLTAG,ans=(ans<now?now:ans);\n\t}while(i<=r)now=(now<0?0:now)+val[i]+ALLTAG,ans=(ans<now?now:ans),++i;\n}inline void maintain(int id){\n    if(tree[id].TTT!=ALLTAG){//\u60f0\u6027\u4fee\u6539\n\t\ttree[id].TTT=ALLTAG;tree[id].sum=tree[id].SUM+(R[id]-L[id]+1)*ALLTAG;tree[id].maxx=tree[id].MAXX+ALLTAG;\n\t\ttree[id].minn=tree[id].MINN+ALLTAG;\n\t\tif(tree[id].minn>=0||tree[id].maxx<=0){//\u5982\u679c\u533a\u95f4\u5185\u7684\u6570\u5168\u90e8\u4e3a\u6b63\u6570\u6216\u8005\u8d1f\u6570\n\t\t\ttree[id].l=tree[id].r=tree[id].mid=max(tree[id].sum,0ll);\n\t\t}else{//\u5426\u5219\u7528\u4e8c\u5206\u6765\u7ef4\u62a4\n\t\t\ttree[id].l=check_val(1,id),tree[id].r=check_val(0,id);\n\t\t\ttree[id].mid=check_val(id);\n\t\t}\n\t}\n}\n```\n",
        "postTime": 1678442010,
        "uid": 355640,
        "name": "_HMZ_",
        "ccfLevel": 7,
        "title": "P5073 [Ynoi2015] \u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69 \u9898\u89e3"
    },
    {
        "content": "\u7531\u4e8e\u67d0\u6bd2\u7624\u8ba9\u6bd2\u7624\u628a\u8fd9\u9898\u7a7a\u95f4\u5f00\u6210\u4e86 $128M$\uff0c\u6210\u529f\u5361\u6389\u4e86 $O(n\\log n)$ \u7a7a\u95f4\u7684\u505a\u6cd5\uff0c\u6240\u4ee5\u6765\u5177\u4f53\u8bb2\u4e00\u4e0b\u5361\u7a7a\u95f4\u7684\u65b9\u6cd5\u3002\n\n\u601d\u8def\u80a5\u80a0\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7\u79bb\u7ebf\u3002\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\uff0c\u53d1\u73b0\u662f\u5b58\u50a8\u6240\u6709\u51f8\u5305\u7684\u8fc7\u7a0b\u4e2d\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u60f3\u628a\u8fd9\u91cc\u8fd9\u4e2a $\\log$ \u7ed9\u5361\u6389\uff1a\u5982\u679c\u80fd\u6bcf\u6b21\u53ea\u5b58\u50a8\u4e00\u5c42\u51f8\u5305\u7684\u8bdd\uff0c\u90a3\u5c31\u6ca1\u4ec0\u4e48\u538b\u529b\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u53ea\u5efa\u51fa\u7ebf\u6bb5\u6811\uff0c\u9884\u5148\u628a\u6240\u6709\u8be2\u95ee\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4e0a\uff0c\u4e00\u8fb9\u5408\u5e76\u51f8\u5305\u4e00\u8fb9\u8be2\u95ee\uff0c\u5c31\u53ef\u4ee5\u5361\u6389\u8fd9\u4e2a\u5b58\u51f8\u5305\u7684 $\\log$ \u4e86\u3002\n\n\u4e0d\u8fc7\u6211\u4eec\u5f88\u5feb\u53d1\u73b0\uff0c\u8fd9\u6837\u5c31\u662f\u641e\u7b11\u7684\uff0c\u56e0\u4e3a\u8be2\u95ee\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u533a\u95f4\u4e0a\u7684\u65f6\u5019\u4f1a\u591a\u4e2a $\\log$\uff0c\u76f8\u5f53\u4e8e\u628a\u778e\u5b50\u6cbb\u6210\u804b\u5b50\u3002\u4e0d\u8fc7\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u5bb9\u6613\u5904\u7406\u4e86\uff0c\u6211\u4eec\u7528\u5355\u94fe\u8868\u8bb0\u5f55\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u70b9\u9700\u8981\u5904\u7406\u54ea\u4e9b\u8be2\u95ee\uff0c\u7136\u540e\u5904\u7406\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u7684\u65f6\u5019\u5206\u88c2\uff0c\u8fd4\u56de\u7684\u65f6\u5019\u5f52\u5e76\u4e00\u4e0b\u3002\u7531\u4e8e\u6bcf\u5c42\u6bcf\u4e2a\u8be2\u95ee\u6700\u591a\u5bf9\u5e94\u4e24\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(n+m)$ \u7684\u3002\n\n\u6211\u7528 vector \u7684\u90a3\u4efd\u4ee3\u7801\u88ab\u5361\u4e86 $0.2s$ \u7684\u5e38\u6570\uff0c\u7136\u540e\u5199\u4e86\u4e2a\u9759\u6001\u5206\u914d\u7a7a\u95f4\uff0c\u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=3e5+5; \ninline int read(){\n\tregister char ch;register int x=0;register bool f=0;\n\twhile(ch=getchar(),ch<'!'&&ch!='-');\n\tch=='-'?f=1:x=ch-48;\n\twhile(ch=getchar(),ch>'!')x=(x<<3)+(x<<1)+ch-48;\n\treturn f?-x:x;\n}\ninline void write(ll x){\n    register char ch[11];register int cc=0;\n    if(!x){putchar('0'),putchar('\\n');return;}\n    while(x)ch[cc++]=x%10+48,x/=10;\n    while(cc)putchar(ch[--cc]);putchar('\\n');\n}\nint n,m,a[N],cntq,nq,hd[N<<2],tl[N<<2],nxt[N<<2];\nstruct vec{\n\tll x,y;\n\tinline vec operator+(vec v){return (vec){x+v.x,y+v.y};}\n\tinline vec operator-(vec v){return (vec){x-v.x,y-v.y};}\n\tinline bool operator*(vec v){return y*v.x>=v.y*x;}\n} p0,vl[N<<1],vr[N<<1],vt[N<<1],tmp[N],m1[N],m2[N],m3[N];\nstruct hull{\n\tint h,ptr;vec* s;\n\tinline void copy(hull b){\n\t\th=b.h,ptr=b.ptr;\n\t\tfor(register int i=1;i<=h;i++)s[i]=b.s[i];\n\t}\n\tinline hull operator+(hull b){\n\t\thull res;res.s=tmp,res.h=1,res.s[1]=s[1]+b.s[1];\n\t\tregister int i=1,j=1;vec s1,s2;\n\t\twhile(i<h&&j<b.h)\n\t\t\tres.s[res.h+1]=res.s[res.h]+((s1=s[i+1]-s[i])*(s2=b.s[j+1]-b.s[j])?i++,s1:(j++,s2)),res.h++;\n\t\twhile(i<h)res.s[res.h+1]=res.s[res.h]+s[i+1]-s[i],i++,res.h++;\n\t\twhile(j<b.h)res.s[res.h+1]=res.s[res.h]+b.s[j+1]-b.s[j],j++,res.h++;\n\t\treturn res;\n\t}\n\tinline hull operator+(vec p){\n\t\thull res;res.s=m3,res.h=h;\n\t\tfor(register int i=1;i<=h;i++)res.s[i]=s[i]+p;\n\t\treturn res;\n\t}\n\tinline void insrt(vec p){while(h>1&&(p-s[h])*(p-s[h-1]))h--;s[++h]=p;}\n\tinline ll maxb(ll k){\n\t\twhile(ptr<h&&s[ptr+1].y-s[ptr].y>=k*(s[ptr+1].x-s[ptr].x))ptr++;\n\t\treturn s[ptr].y-k*s[ptr].x;\n\t}\n};\ninline hull merge(hull b,hull c){\n\thull res;res.s=m1,res.h=0,res.ptr=1;\n\tregister int i=1,j=1;\n\twhile(i<=b.h&&j<=c.h){\n\t\tif(b.s[i].x==c.s[j].x)p0=(vec){b.s[i].x,max(b.s[i].y,c.s[j].y)},i++,j++;\n\t\telse if(b.s[i].x<c.s[j].x)p0=b.s[i],i++;\n\t\telse p0=c.s[j],j++;\n\t\tres.insrt(p0);\n\t}\n\twhile(i<=b.h)res.insrt(b.s[i]),i++;\n\twhile(j<=c.h)res.insrt(c.s[j]),j++;\n\treturn res;\n}\nstruct answ{\n\tll rl,rr,rt,sum;\n\tinline answ operator*(answ b){\n\t\treturn (answ){max(rl,b.rl+sum),max(b.rr,rr+b.sum),max(max(rt,b.rt),rr+b.rl),sum+b.sum};\n\t}\n} ansl[N<<1],ansr[N<<1];\nstruct node{ll l,r,sum;hull hl,hr,ht;};\nstruct Query{ll l,r,d,id,typ;} q[N<<2];\ninline bool cmp(Query u,Query v){return u.d<v.d;}\ninline void insrt(int x,int i){hd[x]?nxt[tl[x]]=i,tl[x]=i:hd[x]=tl[x]=i;}\ninline void mergelink(int x){\n\thd[x]=tl[x]=0;\n\tregister int i=hd[x<<1],j=hd[x<<1|1];\n\twhile(i&&j)q[i].d<q[j].d?insrt(x,i),i=nxt[i]:(insrt(x,j),j=nxt[j]);\n\twhile(j)insrt(x,j),j=nxt[j];\n\twhile(i)insrt(x,i),i=nxt[i];\n\tnxt[tl[x]]=0;\n}\nnode solve(int l,int r,int x){\n\tif(l==r){\n\t\thull res1,res2,res3;\n\t\tres1.h=2,res1.ptr=1,res1.s=vl+(l<<1);res1.s[1]=(vec){0,0},res1.s[2]=(vec){1,a[l]};\n\t\tres2.h=2,res2.ptr=1,res2.s=vr+(l<<1);res2.s[1]=(vec){0,0},res2.s[2]=(vec){1,a[l]};\n\t\tres3.h=2,res3.ptr=1,res3.s=vt+(l<<1);res3.s[1]=(vec){0,0},res3.s[2]=(vec){1,a[l]};\n\t\treturn (node){l,r,a[l],res1,res2,res3};\n\t}\n\tregister int mid=l+r>>1;\n\tfor(register int i=hd[x];i;i=nxt[i]){\n\t\tif(q[i].typ==0){\n\t\t\tif(q[i].l<=mid&&q[i].r>mid)q[i].typ=1,q[++cntq]=q[i],q[cntq].typ=2,insrt(x<<1,i),insrt(x<<1|1,cntq);\n\t\t\telse if(q[i].l>mid)insrt(x<<1|1,i);\n\t\t\telse insrt(x<<1,i);\n\t\t}\n\t\telse if(q[i].typ==1)q[i].l<=mid?insrt(x<<1,i):insrt(x<<1|1,i);\n\t\telse q[i].r>mid?insrt(x<<1|1,i):insrt(x<<1,i);\n\t}\n\tnxt[tl[x<<1]]=nxt[tl[x<<1|1]]=0;\n\tnode xl=solve(l,mid,x<<1),xr=solve(mid+1,r,x<<1|1);\n\tfor(register ll i=hd[x<<1],d=q[i].d;i;i=nxt[i],d=q[i].d)if(q[i].typ==1&&q[i].r>r)\n\t\tansl[q[i].id]=ansl[q[i].id]*(answ){xr.hl.maxb(-d),xr.hr.maxb(-d),xr.ht.maxb(-d),xr.sum+d*(r-mid)};\n\tfor(register ll i=hd[x<<1|1],d=q[i].d;i;i=nxt[i],d=q[i].d)if(q[i].typ==2&&q[i].l<l)\n\t\tansr[q[i].id]=(answ){xl.hl.maxb(-d),xl.hr.maxb(-d),xl.ht.maxb(-d),xl.sum+d*(mid-l+1)}*ansr[q[i].id];\n\tmergelink(x);\n\thull res1,res2,res3;res1.s=vl+(l<<1),res2.s=vr+(l<<1),res3.s=vt+(l<<1);\n\tres3.copy(merge(xl.ht,xr.ht)),res3.copy(merge(res3,xl.hr+xr.hl));\n\tres1.copy(merge(xl.hl,xr.hl+(vec){mid-l+1,xl.sum}));\n\tres2.copy(merge(xr.hr,xl.hr+(vec){r-mid,xr.sum}));\n\treturn (node){l,r,xl.sum+xr.sum,res1,res2,res3};\n}\nint main(){\n\tn=read(),m=read();\n\tfor(register int i=1;i<=n;i++)a[i]=read();\n\tll td=0;\n\tfor(register int i=1,op,l,r;i<=m;i++){\n\t\top=read();\n\t\tif(op==1)l=read(),td+=l;\n\t\telse l=read(),r=read(),cntq++,q[cntq]=(Query){l-1,r+1,td,cntq,0};\n\t}\n\tsort(q+1,q+cntq+1,cmp),nq=cntq;\n\thd[1]=1,tl[1]=cntq;\n\tfor(register int i=1;i<cntq;i++)nxt[i]=i+1;\n\tsolve(0,n+1,1); \n\tfor(register int i=1;i<=nq;i++)write(max(max(ansl[i].rt,ansr[i].rt),ansl[i].rr+ansr[i].rl));\n\treturn 0;\n}\n```",
        "postTime": 1617889088,
        "uid": 77174,
        "name": "FunnyCreatress",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P5073\u3010[Ynoi2015] \u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\u3011"
    },
    {
        "content": "\u5982\u679c\u4f60\u5176\u4ed6$\\text{Ynoi}$\u8fd8\u6ca1\u6709\u5237\u5b8c\u5efa\u8bae\u4e0d\u8981\u6765\u5237\u8fd9\u9053\u9898\uff0c\u56e0\u4e3a\uff1a\n\n\u5b9e\u9645\u4e0a\uff0c**\u8fd9\u662f\u4e00\u9053\u6b63\u5b97\u7684\u8ba1\u7b97\u51e0\u4f55\u9898**\u3002\n\n### Part.1\n\n\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u65e2\u7136\u90fd\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u8ba1\u7b97\u51e0\u4f55\u9898\uff0c\u8bf7\u5148\u81ea\u884c\u5b66\u4e60\u8ba1\u7b97\u51e0\u4f55\u7684\u57fa\u7840\u77e5\u8bc6\u3002\n\n\u4f60\u9700\u8981\u638c\u63e1\u7684\u6709\uff1a\u5411\u91cf\u7684\u52a0\uff0c\u51cf\uff0c\u53c9\u79ef\uff0c\u51f8\u5305\u7684\u6c42\u6cd5\uff08\u6781\u89d2\u6392\u5e8f\uff09\u3002\n\n\u4ee5\u4e0b\u662f\u4e0b\u6587\u4e2d\u70b9\uff08\u6216\u5411\u91cf\uff09\u7684\u5b9a\u4e49\uff1a\n\n```cpp\nstruct Point    //\u70b9\n{\n    ll x,y;\n    Point(ll x=0,ll y=0) : x(x),y(y) {}\n    Point operator + (const Point &a) const {return Point(x+a.x,y+a.y);}    //\u52a0\n    Point operator - (const Point &a) const {return Point(x-a.x,y-a.y);}    //\u51cf\n    ll operator * (const Point &a) const {return x*a.y-y*a.x;}    //\u53c9\u79ef\n};\n```\n\n\u51f8\u5305\u7684\u5b9a\u4e49\uff1a\n\n```cpp\nstruct Hull    //\u51f8\u5305\n{\n    Point *st;\n    int now,top;\n    Point& operator [] (const int &x) const {return st[x];}\n    inline void insert(const Point &a) const{st[a.x].y=max(st[a.x].y,a.y);}    //\u66f4\u65b0\u6700\u4f18\u70b9\n    inline void push(const Point &a) {st[++top]=a;}    //\u52a0\u5165\u4e00\u4e2a\u70b9\n    inline void init(int x)    //\u9884\u5904\u7406\uff0c\u957f\u5ea6\u4e3ax\u7684\u7b54\u6848\u5bf9\u5e94\u5176\u4f4d\u7f6e\uff0c\u65b9\u4fbfinsert\n    {\n        for(int i=1;i<=x;++i)\n            st[i]=Point(i,-inf);\n        top=x;\n    }\n    inline void Convex()    //\u6c42\u65b0\u51f8\u5305\n    {\n        if(top<=2) return;\n        int lim=top;top=2;\n        for(int i=3;i<=lim;++i)\n        {\n            if(st[i].y==-inf) continue;\n            while(top>1&&(st[top]-st[top-1])*(st[i]-st[top-1])>=0) --top;\n            st[++top]=st[i];\n        }\n    }\n    inline ll Getnow()\n    {\n        while(now!=top&&add*st[now].x+st[now].y<add*st[now+1].x+st[now+1].y) ++now;    //\u79bb\u7ebf\u4fdd\u8bc1\u5355\u589e\uff0c\u79fb\u52a8\u6307\u9488\u5373\u53ef\n        return st[now].x*add+st[now].y;\n    }\n};\n```\n\n\u770b\u4e0d\u61c2\u53ef\u4ee5\u5148\u8df3\u8fc7\uff0c\u4e0b\u9762\u8981\u7528\u4e86\u518d\u6765\u770b\uff0c\u4e3b\u8981\u4e00\u4e9b\u5c0f\u51fd\u6570\u4e0b\u9762\u53ef\u80fd\u6ca1\u6709\u8bb2\u3002\n\n\u8fd9\u4e2a\u9898\u7684\u7684\u65b0\u77e5\u8bc6\u6709\uff1a**\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305**\u3002\n\n\u95ee\u9898\uff1a\u7ed9\u4f60\u4e24\u4e2a\u70b9\u96c6A,B\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u70b9\u96c6C,\u6ee1\u8db3\u5bf9\u4efb\u610f\u70b9$(x_1,y_1)\\in A$\uff0c$(x_2,y_2)\\in B$\uff0c\u5f97\u5230\u4e00\u4e2a$(x_1+x_2,y_1+y_2)\\in C$\u3002\n\n\u7136\u540e\u77e5\u9053A\uff0cB\u7684\u51f8\u5305\uff0c\u6c42C\u7684\u51f8\u5305\u3002\n\n~~\u8fd9\u4e0d\u662f\u5f88\u7b80\u5355\u5417\uff0c\u66b4\u529b\u679a\u4e3e\u76f4\u63a5\u505a\u3002~~\n\n\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a$O(n)$\u7684\u7b97\u6cd5\u3002\n\n\u6211\u4eec\u753b\u4e2a\u56fe\u624b\u73a9\u4e00\u4e0b\uff0c\u53d1\u73b0\u65b0\u7684\u51f8\u5305\u5c31\u662f\u539f\u6765\u7684\u4e24\u4e2a\u51f8\u5305\u7684\u8fb9\u91cd\u65b0\u6781\u89d2\u6392\u5e8f\u4e00\u8fb9\uff08\u7f51\u4e0a\u6709\u56fe\u6211\u5c31\u4e0d\u653e\u4e86\uff09\u3002\n\n~~\u8bc1\u660e\u6211\u4e0d\u4f1a\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b[\u8fd9\u4e2a\u9898](https://www.luogu.com.cn/problem/solution/P4557)\uff0c\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u6bd5\u7adf\u8fd9\u91cc\u662f\u8bb2\u6570\u636e\u7ed3\u6784\u7684\u3002~~\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u7ed3\u8bba\uff0c\u6c42\u51f8\u5305\u53ea\u9700\u8981\u6c42\u539f\u6765\u7684\u51f8\u5305\uff0c\u7136\u540e\u5728\u4e00\u8d77\u91cd\u65b0\u6392\u5e8f\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u4f46\u76f4\u63a5\u91cd\u6392\u6709\u70b9\u6d6a\u8d39\uff0c\u7531\u4e8e\u539f\u6765\u4e24\u4e2a\u51f8\u5305\u90fd\u5df2\u7ecf\u6c42\u597d\u4e86\uff0c\u4e8e\u662f\u53ef\u4ee5\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\uff0c\u91cd\u65b0\u5f52\u5e76\u4e00\u6b21\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\ninline void Minkowski(Hull &c,Hull &a,Hull &b)    //\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305\n{\n    int i=1,j=1;c.insert(a[1]+b[1]);\n    while(i!=a.top&&j!=b.top)\n    {\n        ((a[i+1]-a[i])*(b[j+1]-b[j])<0)?++i:++j;\n        c.insert(a[i]+b[j]);\n    }\n    while(i!=a.top) ++i,c.insert(a[i]+b[j]);\n    while(j!=b.top) ++j,c.insert(a[i]+b[j]);\n}\n```\n\n\n\n\u51f8\u5305\u5b58\u7684\u662f\u70b9\uff0c\u6211\u4eec\u6bd4\u8f83a\u4e2d\u5f53\u524d\u7684\u8fb9\u4e0eb\u4e2d\u5f53\u524d\u7684\u8fb9\uff0c\u770b\u4e00\u4e0b\u8c01\u89d2\u5ea6\u66f4\u5c0f\uff0c\u7136\u540e\u52a0\u5165\u5373\u53ef\uff0c\u4e14\u52a0\u5165\u70b9\u7684\u539f\u6765\u7684\u70b9\u7684\u548c\u3002\n\n~~\u5f88\u7b80\u5355\u662f\u4e0d\u662f\uff1f~~\n\n\u4e0b\u9762\u5f00\u59cb\u6211\u4eec\u4eca\u5929\u7684\u6570\u636e\u7ed3\u6784\u90e8\u5206\u3002\n\n### Part.2\n\n\u6700\u5927\u5b50\u6bb5\u548c\uff1f\n\n\u5f88\u7b80\u5355\u554a\uff0c$O(n)$\u626b\u4e00\u904d\u3002\n\n\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5355\u70b9\u4fee\u6539\uff1f\n\n\u505a\u8fc7\u5c0f\u767d\u901b\u516c\u56ed\u7684\u90fd\u77e5\u9053\uff08\u6ca1\u505a\u8fc7\u8fd8\u6765$\\text{Ynoi}$\uff09\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u3002~~\u54ea\u6765\u90a3\u4e48\u591a\u7ecf\u5178\u95ee\u9898~~\n\n\u7ebf\u6bb5\u6811\u3002\n\n\u6bcf\u4e2a\u70b9\u7ef4\u62a4\u4e00\u4e2a$lmx,rmx,mmx,sum$\uff0c\u5373\u6700\u5927\u5de6\u5b50\u6bb5\u548c\uff0c\u6700\u5927\u53f3\u5b50\u6bb5\u548c\uff0c\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u533a\u95f4\u548c\u3002\n\n\u5408\u5e76\u5f88\u7b80\u5355\u5427\uff08\u9ed8\u8ba4\u5927\u5bb6\u90fd\u4f1a\uff09\u3002\n\n\u4e00\u4e2a\u5c01\u88c5\u597d\u7684\u7ed3\u6784\u4f53\u957f\u8fd9\u6837\uff1a\n\n```cpp\nstruct Node    //\u7b54\u6848\u8282\u70b9\n{\n    ll lmx,rmx,mmx,sum;\n    Node(ll lmx,ll rmx,ll mmx,ll sum) : lmx(lmx),rmx(rmx),mmx(mmx),sum(sum) {}\n    Node() {}\n    Node operator + (const Node &x) const\n    {\n        return Node(max(lmx,sum+x.lmx),max(x.rmx,x.sum+rmx),max(rmx+x.lmx,max(mmx,x.mmx)),sum+x.sum);\n    }\n};\n```\n\n\u4e0b\u9762\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u5373\u662f\u5408\u5e76\u4e24\u4e2a\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlogn)$\n\n\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5168\u5c40\u52a0\uff1f\n\n\u5148\u8003\u8651\u6253\u6807\u8bb0\u3002\n\n~~\u663e\u7136\u4e0d\u884c~~\n\n\u4e3b\u8981\u539f\u56e0\u662f\u65e0\u6cd5\u901a\u8fc7\u65b0\u7684\u6807\u8bb0\u5feb\u901f\u66f4\u65b0\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u3002\n\n~~\u7136\u540e\u5c31\u6ca1\u6cd5\u505a\uff1f~~\n\n\u6362\u4e2a\u601d\u8def\u3002\n\n### Part.3\n\n\u7ebf\u6bb5\u6811\u7684\u56db\u4e2a\u4fe1\u606f\u80af\u5b9a\u8fd8\u662f\u5fc5\u987b\u8981\u7ef4\u62a4\u7684\u3002\n\n$sum$\u7167\u65e7\u7ef4\u62a4\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u7ef4\u62a4\u957f\u5ea6\u4e3a$x$\u7684$lmx,rmx,mmx$\uff0c\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u4e00\u4e9b\u4e8c\u7ef4\u70b9$(x,ans(x))$\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u7ed9\u8fd9\u4e2a\u8282\u70b9\u6574\u4f53\u52a0\u4e86\u4e00\u4e2a\u6570$add$\uff0c\u90a3\u4e48$ans(x)$\u5c31\u53d8\u6210\u4e86$ans(x)+x*add$\uff0c\u4f46\u663e\u7136\u5bf9\u4e8e\u6211\u4eec\u7684\u8fd9\u4e9b\u4e8c\u7ef4\u7684\u70b9\uff0c\u80af\u5b9a\u53ea\u6709\u4e00\u90e8\u5206\u662f\u6709\u7528\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u53e6\u4e00\u4e2a\u70b9\u538b\u5236\uff0c\u90a3\u4e48\u5b83\u5c31\u80af\u5b9a\u6ca1\u6709\u7528\u3002\u90a3\u4e48\u54ea\u4e9b\u70b9\u662f\u6709\u7528\u7684\u5462\uff1f\u76f8\u4fe1\u770b\u5230\u8fd9\u91cc\u5927\u6982\u90fd\u660e\u767d\u4e86\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e9b\u70b9\u7684**\u51f8\u5305\u4e0a\u7684\u70b9**\u3002\n\n\u6240\u4ee5\u6211\u4eec\u6539\u6210\u7ef4\u62a4$lmx,rmx,mmx$\u4e09\u4e2a\u51f8\u5305\u3002\n\n### Part.4\n\n\u9996\u5148\u5148\u89e3\u51b3$lmx,rmx$\u4e24\u4e2a\u51f8\u5305\uff0c\u7531\u4e8e\u4e24\u4e2a\u7b49\u4ef7\uff0c\u53ea\u8003\u8651$lmx$\u3002\n\n\u5148\u770b\u4e00\u4e0b\u6211\u4eec\u539f\u6765\u7684$lmx$\u7684\u8f6c\u79fb\u65b9\u7a0b\n\n```cpp\nlmx[u]=max(lmx[u<<1],sum[u<<1]+lmx[u<<1|1]);\n```\n\n\u6539\u6210\u51f8\u5305\u540e\uff0c\u6211\u4eec\u5c31\u662f\u5148\u7ed9\u53f3\u513f\u5b50\u7684$lmx$\u51f8\u5305\u52a0\u4e0a\u4e00\u4e2a\u70b9$(len_{lson},sum_{lson})$\uff0c\u7136\u540e\u4e0e\u53f3\u51f8\u5305\u5408\u5e76\uff0c\u4ee3\u7801\u957f\u8fd9\u6837\uff1a\n\n```cpp\n inline void merge(Hull &c,Hull &a,Hull &b,const Point &now)    //\u5408\u5e76\u524d\u540e\u7f00\u7684\u51f8\u5305\n {\n     for(int i=1;i<=a.top;++i) c.push(a[i]);\n     for(int i=1;i<=b.top;++i) c.push(b[i]+now);\n     c.Convex();    //\u6c42\u65b0\u51f8\u5305\n }\n```\n\n$now$\u5c31\u662f$(len_{lson},sum_{lson})$\uff0c\u4ee3\u7801\u5c31\u662f\u5148\u628a\u4e24\u4e2a\u51f8\u5305\u52a0\u8fdb\u53bb\uff0c\u7136\u540e\u6c42\u65b0\u51f8\u5305\u3002\n\n```cpp\ninline void Convex()    //\u6c42\u65b0\u51f8\u5305\n{\n    if(top<=2) return;\n    int lim=top;top=2;\n    for(int i=3;i<=lim;++i)\n    {\n        if(st[i].y==-inf) continue;\n        while(top>1&&(st[top]-st[top-1])*(st[i]-st[top-1])>=0) --top;\n        st[++top]=st[i];\n    }\n}\n```\n\n\u7531\u4e8e\u539f\u6765\u5c31\u6709\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u6c42\u4e0d\u7528\u6392\u5e8f\u3002\n\n\u6ce8\u610f$st$\u6570\u7ec4\u4e2d\u59cb\u7ec8$top\\le i$\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u8f85\u52a9\u7a7a\u95f4\u3002\n\n### Part.5\n\n\u89c2\u5bdf$mmx$\u7684\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n```cpp\nmmx[u]=max(max(mmx[u<<1],mmx[u<<1|1]),rmx[u<<1]+lmx[u<<1|1]);\n```\n\n\n\n\u5bf9\u4e8e$mmx$\u7684\u51f8\u5305\uff0c\u6211\u4eec\u5148\u7528\u5de6\u53f3\u513f\u5b50\u7684$mmx$\u66f4\u65b0\u4e00\u4e0b\uff1a\n\n```cpp\nmmx[u].st++;mmx[u].init(r-l+1);\nfor(int i=1;i<=mmx[u<<1].top;++i) mmx[u].insert(mmx[u<<1][i]);\nfor(int i=1;i<=mmx[u<<1|1].top;++i) mmx[u].insert(mmx[u<<1|1][i]);\n```\n\n\u7136\u540e$lmx[u<<1]+rmx[u<<1|1]$\uff0c\u600e\u4e48\u5904\u7406\u5462\uff1f\n\n\u662f\u4e0d\u662f\u89c9\u5f97\u8fd8\u6709\u4ec0\u4e48\u6ca1\u6709\u767b\u573a\uff1f\n\n\u6ca1\u9519\uff0c\u6211\u4eec\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\uff01\n\n\u4ed4\u7ec6\u60f3\u4e00\u60f3\uff0c\u5047\u8bbe\u6709$(x_1,ans(x_1))\\in lmx[u<<1]\\;\\;(x_2,ans(x_2))\\in rmx[u<<1|1]$\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u70b9$x_1+x_2,ans(x_1+x_2))\\in mmx[u]$\uff01\n\n\u4e8e\u662f\u6211\u4eec\u4e00\u6b21\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ee3\u7801\u957f\u8fd9\u6837\uff1a\n\n```cpp\ninline void Minkowski(Hull &c,Hull &a,Hull &b)    //\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305\n{\n    int i=1,j=1;c.insert(a[1]+b[1]);\n    while(i!=a.top&&j!=b.top)\n    {\n        ((a[i+1]-a[i])*(b[j+1]-b[j])<0)?++i:++j;\n        c.insert(a[i]+b[j]);\n    }\n    while(i!=a.top) ++i,c.insert(a[i]+b[j]);\n    while(j!=b.top) ++j,c.insert(a[i]+b[j]);\n}\n```\n\n\u7136\u540e\u5c31\u5b8c\u4e86\u3002\n\n### Part.6\n\n~~\u4e0d\u8fd8\u6ca1\u5b8c~~\n\n\u6211\u4eec\u5149\u6c42\u4e86\u4e00\u5806\u51f8\u5305\uff0c\u600e\u4e48\u7528\u554a\uff1f\n\n\u8fd9\u8fd8\u4e0d\u7b80\u5355\uff0c\u76f4\u63a5\u5728\u51f8\u5305\u4e0a\u4e8c\u5206\u5373\u53ef\u3002\n\n\u7136\u800c\u4f60\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\n\n$O(nlog^2n)$\n\n\u7531\u4e8e\u8fd9\u662f$\\text{Ynoi}$\uff0c\u4e0d\u662f\u8ba9\u4f60$AC$\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4f18\u5316\u3002\n\n\u600e\u4e48\u4f18\u5316\uff1f\n\n\u6211\u4eec\u8003\u8651\u79bb\u7ebf\uff0c\u60f3\u4e00\u60f3\uff0c\u51f8\u5305\u6709\u4e00\u4e2a\u597d\u7684\u6027\u8d28\uff0c\u5b83\u4e0a\u9762\u7684\u70b9\u662f\u5355\u8c03\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ece\u4e00\u5f00\u59cb\u5230\u8fd9\u4e2a\u70b9\u4e00\u5171\u5168\u5c40\u52a0\u4e86\u591a\u5c11\uff0c\u7136\u540e\u6211\u4eec\u6309\u8fd9\u4e2a\u628a\u8be2\u95ee\u6392\u5e8f\uff0c\u7531\u4e8e\u6211\u4eec\u52a0\u7684\u503c\u662f\u5355\u589e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u6bcf\u6b21\u4ece\u4e0a\u6b21\u7684\u4f4d\u7f6e\u5f00\u59cb\u5411\u53f3\u626b\u51f8\u5305\uff0c\u56e0\u4e3a\u7b54\u6848\u7edd\u5bf9\u4e0d\u53ef\u80fd\u5411\u524d\u8d70\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u5747\u644a\u65f6\u95f4\u5c31\u53d8\u6210\u4e86$O(nlogn)$\u3002\n\n~~\u4e8e\u662f\u4f60\u5c31\u53ef\u4ee5\u5feb\u4e50\u7684\u53bb$AC$\u6b64\u9898\u4e86\uff01~~\n\n\u5177\u4f53\u5b9e\u73b0\u501f\u9274\u4e86shadowice1984\u5927\u4f6c\u7684\u65b9\u6cd5\uff0c\u628a\u540c\u4e00\u5c42\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u7a7a\u95f4\u5206\u914d\u5728\u4e00\u8d77\uff0c\u51cf\u5c0f\u8bbf\u95ee\u538b\u529b\u3002\n\n\u51f8\u5305\u4f7f\u7528\u4e86\u6307\u9488\uff0c\u4e5f\u53ef\u4ee5\u7528$vector$\u3002\n\n### $\\text{Code}$\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=3e5+5;\nconst ll inf=0x3f3f3f3f3f3f3f3f;\n\nll add,a[maxn];\nint n,m;\n\nstruct Point    //\u70b9\n{\n    ll x,y;\n    Point(ll x=0,ll y=0) : x(x),y(y) {}\n    Point operator + (const Point &a) const {return Point(x+a.x,y+a.y);}    //\u52a0\n    Point operator - (const Point &a) const {return Point(x-a.x,y-a.y);}    //\u51cf\n    ll operator * (const Point &a) const {return x*a.y-y*a.x;}    //\u53c9\u79ef\n};\n\nstruct Hull    //\u51f8\u5305\n{\n    Point *st;\n    int now,top;\n    Point& operator [] (const int &x) const {return st[x];}\n    inline void insert(const Point &a) const{st[a.x].y=max(st[a.x].y,a.y);}    //\u66f4\u65b0\u6700\u4f18\u70b9\n    inline void push(const Point &a) {st[++top]=a;}    //\u52a0\u5165\u4e00\u4e2a\u70b9\n    inline void init(int x)    //\u9884\u5904\u7406\uff0c\u957f\u5ea6\u4e3ax\u7684\u7b54\u6848\u5bf9\u5e94\u5176\u4f4d\u7f6e\uff0c\u65b9\u4fbfinsert\n    {\n        for(int i=1;i<=x;++i)\n            st[i]=Point(i,-inf);\n        top=x;\n    }\n    inline void Convex()    //\u6c42\u65b0\u51f8\u5305\n    {\n        if(top<=2) return;\n        int lim=top;top=2;\n        for(int i=3;i<=lim;++i)\n        {\n            if(st[i].y==-inf) continue;\n            while(top>1&&(st[top]-st[top-1])*(st[i]-st[top-1])>=0) --top;\n            st[++top]=st[i];\n        }\n    }\n    inline ll Getnow()\n    {\n        while(now!=top&&add*st[now].x+st[now].y<add*st[now+1].x+st[now+1].y) ++now;    //\u79bb\u7ebf\u4fdd\u8bc1\u5355\u589e\uff0c\u79fb\u52a8\u6307\u9488\u5373\u53ef\n        return st[now].x*add+st[now].y;\n    }\n};\n\nstruct Node    //\u7b54\u6848\u8282\u70b9\n{\n    ll lmx,rmx,mmx,sum;\n    Node(ll lmx,ll rmx,ll mmx,ll sum) : lmx(lmx),rmx(rmx),mmx(mmx),sum(sum) {}\n    Node() {}\n    Node operator + (const Node &x) const\n    {\n        return Node(max(lmx,sum+x.lmx),max(x.rmx,x.sum+rmx),max(rmx+x.lmx,max(mmx,x.mmx)),sum+x.sum);\n    }\n};\n\nstruct SegmentTree    //\u7ebf\u6bb5\u6811\n{\n    Point lmx_base[20][maxn<<1],rmx_base[20][maxn<<1],mmx_base[20][maxn<<1];\n    Point *lmx_top[20],*rmx_top[20],*mmx_top[20];\n    Hull lmx[maxn<<2],rmx[maxn<<2],mmx[maxn<<2];    //\u51f8\u5305\u7ef4\u62a4\u53ef\u80fd\u7684\u7b54\u6848\n    ll sum[maxn<<2];\n    SegmentTree()\n    {\n        for(int i=0;i<20;++i)\n            lmx_top[i]=lmx_base[i],rmx_top[i]=rmx_base[i],mmx_top[i]=mmx_base[i];\n    }\n    inline void merge(Hull &c,Hull &a,Hull &b,const Point &now)    //\u5408\u5e76\u524d\u540e\u7f00\u7684\u51f8\u5305\n    {\n        for(int i=1;i<=a.top;++i) c.push(a[i]);\n        for(int i=1;i<=b.top;++i) c.push(b[i]+now);\n        c.Convex();    //\u6c42\u65b0\u51f8\u5305\n    }\n    inline void Minkowski(Hull &c,Hull &a,Hull &b)    //\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5408\u5e76\u51f8\u5305\n    {\n        int i=1,j=1;c.insert(a[1]+b[1]);\n        while(i!=a.top&&j!=b.top)\n        {\n            ((a[i+1]-a[i])*(b[j+1]-b[j])<0)?++i:++j;\n            c.insert(a[i]+b[j]);\n        }\n        while(i!=a.top) ++i,c.insert(a[i]+b[j]);\n        while(j!=b.top) ++j,c.insert(a[i]+b[j]);\n    }\n    void build(int u,int l,int r,int dep=0)\n    {\n        lmx[u].st=lmx_top[dep];rmx[u].st=rmx_top[dep];mmx[u].st=mmx_top[dep];\n        if(l==r)\n        {\n            lmx[u][1]=rmx[u][1]=mmx[u][1]=Point(0,0);    //\u4e0d\u9009\u5219\u4e3a0\n            lmx[u][2]=rmx[u][2]=mmx[u][2]=Point(1,a[l]);sum[u]=a[l];\n            lmx[u].top=rmx[u].top=mmx[u].top=2;\n        }\n        else\n        {\n            int mid=(l+r)>>1;\n            build(u<<1,l,mid,dep+1);build(u<<1|1,mid+1,r,dep+1);\n            sum[u]=sum[u<<1]+sum[u<<1|1];    //\u7ef4\u62a4\u548c\n            merge(lmx[u],lmx[u<<1],lmx[u<<1|1],Point(mid-l+1,sum[u<<1]));\n            merge(rmx[u],rmx[u<<1|1],rmx[u<<1],Point(r-mid,sum[u<<1|1]));    //\u5408\u5e76\u524d\u540e\u7f00\u51f8\u5305\n            mmx[u].st++;mmx[u].init(r-l+1);    //\u4e3a\u4e0d\u9009\u9884\u7559\u4f4d\u7f6e\n            for(int i=1;i<=mmx[u<<1].top;++i) mmx[u].insert(mmx[u<<1][i]);\n            for(int i=1;i<=mmx[u<<1|1].top;++i) mmx[u].insert(mmx[u<<1|1][i]);\n            Minkowski(mmx[u],rmx[u<<1],lmx[u<<1|1]);    //\u5408\u5e76\u5b50\u6bb5\u548c\u51f8\u5305\n            mmx[u].st--;mmx[u][1]=Point(0,0);mmx[u].top++;mmx[u].Convex();   //\u4e0d\u9009\u5219\u4e3a0\n        }\n        lmx[u].now=rmx[u].now=mmx[u].now=1;\n        lmx_top[dep]=lmx[u].st+lmx[u].top;\n        rmx_top[dep]=rmx[u].st+rmx[u].top;\n        mmx_top[dep]=mmx[u].st+mmx[u].top;\n    }\n    Node query(int u,int l,int r,int x,int y)\n    {\n        if(x<=l&&r<=y) return Node(lmx[u].Getnow(),rmx[u].Getnow(),mmx[u].Getnow(),sum[u]+(r-l+1)*add);\n        int mid=(l+r)>>1;\n        if(y<=mid) return query(u<<1,l,mid,x,y);\n        if(x>mid) return query(u<<1|1,mid+1,r,x,y);\n        return query(u<<1,l,mid,x,y)+query(u<<1|1,mid+1,r,x,y);\n    }\n}wife;\n\nstruct Query\n{\n    int l,r,id;\n    ll val;\n    Query(int l=0,int r=0,int id=0,ll val=0) : l(l),r(r),id(id),val(val) {}\n    bool operator < (const Query &x) const {return val<x.val;}\n}q[maxn<<1];\nint tot;\nll ans[maxn<<1];\n\ntemplate<typename T>\ninline void read(T &x)\n{\n    char c;int f=1;\n    while(!isdigit(c=getchar())) (c=='-')&&(f=-1);\n    x=c^48;\n    while(isdigit(c=getchar())) x=x*10+(c^48);\n    x*=f;\n}\n\nint main()\n{\n    read(n);read(m);\n    for(int i=1;i<=n;++i) read(a[i]);\n    for(int i=1,opt,l,r;i<=m;++i)\n    {\n        read(opt);read(l);\n        if(opt==1) add+=l;\n        else read(r),++tot,q[tot]=Query(l,r,tot,add);\n    }\n    sort(q+1,q+tot+1);\n    add=q[1].val;\n    for(int i=1;i<=tot;++i) q[i].val-=add;\n    for(int i=1;i<=n;++i) a[i]+=add;    //\u8fd9\u91cc\u4f7f\u5f97\u6240\u6709\u7684q[i].val\u5747\u4e3a\u6b63\u6574\u6570\n    wife.build(1,1,n);\n    for(int i=1;i<=tot;++i)\n        add=q[i].val,ans[q[i].id]=wife.query(1,1,n,q[i].l,q[i].r).mmx;\n    for(int i=1;i<=tot;++i)\n        printf(\"%lld\\n\",ans[i]);\n    return 0,QAQ;\n}\n```\n\n~~\u505a\u5b8c\u4e86\u73c2\u4ee5\u53bb\u505a\u4e00\u4e0b[\u8fd9\u4e2a](https://www.luogu.com.cn/problem/P4118)\uff08\u4e0d\u662f~~",
        "postTime": 1602161297,
        "uid": 199750,
        "name": "\u8bd5\u8bd5\u4e8b\u5b9e\u4e0a\u5417",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5073 \u3010[Ynoi2015]\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\u3011"
    },
    {
        "content": "\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u9053\u9898\u6210\u4e86\u6211\u7684\u7b2c\u4e00\u9053\u9ed1 Ynoi\u3002\n\n[[Ynoi2015] \u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69](/problem/P5073)\uff0c\u5199\u4e86\u534a\u5929\uff0c\u8c03\u4e86\u534a\u5929\uff08\u56e0\u4e3a\u7a7a\u95f4\u9650\u5236\uff09\u3002\n\n\u7531\u4e8e\u662f\u5168\u5c40\u52a0\uff0c\u5c06\u5f53\u524d\u52a0\u7684\u603b\u6570\u8bb0\u4e0b\uff0c\u6392\u5e8f\u540e\u53d8\u4e3a\u5168\u5c40\u52a0\u6b63\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e0d\u540c\u957f\u5ea6\u5206\u522b\u6c42\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u8bbe\u957f\u5ea6\u4e3a $x$\uff0c\u6700\u5927\u548c\u4e3a $y$ \u5f53\u52a0\u7684\u6570\u5b57\u4e3a $k$ \u65f6\uff0c\u5b9e\u9645\u5f97\u5230\u7684\u662f $kx+y$\uff0c\u800c $k$ \u5177\u6709\u5355\u8c03\u6027\uff0c\u4e8e\u662f\u53ef\u4ee5\u6c42\u51fa\u4e00\u4e2a\u4e0a\u51f8\u58f3\uff0c\u5f53 $k$ \u53d8\u5927\u65f6\uff0c\u8003\u8651\u957f\u5ea6\u662f\u5426\u53ef\u4ee5\u53d8\u5927\u3002\n\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\uff0c\u8fd9\u662f\u5e73\u51e1\u7684\uff0c\u5e94\u4e3a\u957f\u5ea6\u4e3a $x$ \u53ea\u6709\u552f\u4e00\u4e00\u79cd\u65b9\u6848\u3002\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\uff0c\u8003\u8651\u5982\u4f55\u6c42\u51fa\u6700\u5927\u5b50\u6bb5\u548c\u6240\u5bf9\u5e94\u7684\u4e0a\u51f8\u58f3\uff0c\u53d1\u73b0\u53ef\u4ee5\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a\n\n1. \u533a\u95f4\u4e0d\u7a7f\u8fc7\u4e2d\u70b9\uff0c\u8fd9\u65f6\u53ef\u4ee5\u770b\u4f5c\u5c06\u5de6\u53f3\u5b50\u6811\u53d6\u6700\u5927\u503c\uff0c\u5f52\u5e76\u4e00\u4e0b\u5728\u6c42\u4e00\u4e2a\u51f8\u5305\uff1b\n2. \u533a\u95f4\u4e0d\u7a7f\u8fc7\u4e2d\u70b9\uff0c\u8fd9\u65f6\u7b54\u6848\u51f8\u5305\u5c31\u662f\u5de6\u8fb9\u540e\u7f00\u548c\u4e0e\u53f3\u8fb9\u524d\u7f00\u548c\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\u3002\n\n\u5f52\u5e76\u548c\u95f5\u53ef\u592b\u65af\u57fa\u548c\u90fd\u662f $O(n)$ \u7684\uff0c\u7531\u4e8e\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e00\u5c42\u603b\u957f\u5ea6\u90fd\u4e3a $O(n)$ \u6545\u590d\u6742\u5ea6\u4e3a $O(n\\log_2n)$\n\n\u67e5\u8be2\u65f6\uff0c\u627e\u5230\u533a\u95f4\u5bf9\u5e94\u7684\u6240\u6709\u8282\u70b9\uff0c\u6c42\u51fa\u6700\u5927\u524d\u7f00\u548c\uff0c\u5b50\u6bb5\u548c\uff0c\u540e\u7f00\u548c\uff0c\u6700\u540e\u5408\u5e76\u5c31\u53ef\u4ee5\u4e86\uff0c\u603b\u590d\u6742\u5ea6 $O((n+m)\\log_2n)$\n\n\u7136\u540e\u4f60\u53d1\u73b0\uff0c128MB \u7a7a\u95f4\u5e76\u4e0d\u4f1a\u8ba9\u4f60\u8fd9\u4e2a\u7a7a\u95f4 $O(n\\log_2n+m)$ \u7684\u901a\u8fc7\u3002\n\n\u770b\u4e86\u4e00\u5806\u795e\u5947\u7684\u94fe\u8868\u505a\u6cd5\uff0c\u6709\u4e9b\u770b\u61c2\u4e86\uff0c\u4f46\u662f\u4e0d\u6562\u53bb\u5b9e\u73b0\u3002\n\n\u6709\u4e00\u7bc7[\u9898\u89e3](/blog/HailToTheFunnyGod/solution-p5073)\u8bf4\uff1a\n```\n\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u53ea\u5efa\u51fa\u7ebf\u6bb5\u6811\uff0c\u9884\u5148\u628a\u6240\u6709\u8be2\u95ee\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4e0a\uff0c\u4e00\u8fb9\u5408\u5e76\u51f8\u5305\u4e00\u8fb9\u8be2\u95ee\uff0c\u5c31\u53ef\u4ee5\u5361\u6389\u8fd9\u4e2a\u5b58\u51f8\u5305\u7684 log \u4e86\u3002\n\n\u4e0d\u8fc7\u6211\u4eec\u5f88\u5feb\u53d1\u73b0\uff0c\u8fd9\u6837\u5c31\u662f\u641e\u7b11\u7684\uff0c\u56e0\u4e3a\u8be2\u95ee\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u533a\u95f4\u4e0a\u7684\u65f6\u5019\u4f1a\u591a\u4e2a log\uff0c\u76f8\u5f53\u4e8e\u628a\u778e\u5b50\u6cbb\u6210\u804b\u5b50\u3002\n```\n\u7531\u4e8e\u67e5\u8be2\u662f\u4ece\u4e0a\u5230\u4e0b\u7684\uff0c\u5408\u5e76\u662f\u4ece\u4e0b\u5230\u4e0a\u7684\uff0c\u8fb9\u5408\u5e76\u8fb9\u67e5\u8be2\u4f3c\u4e4e\u4e0d\u53ef\u884c\uff0c\u4f46\u662f\u5982\u679c\u4ece\u4e0b\u5f80\u4e0a\u67e5\u8be2\u5c31\u53ef\u4ee5\u4e86\uff0c\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b zkw \u7ebf\u6bb5\u6811\u3002\n\n\u5c31\u662f\u5f3a\u884c\u5c06 $n$ \u52a0\u5230 $2^k$\uff0c\u8fd9\u6837\u7b2c $i$ \u4e2a\u6570\u6240\u5bf9\u5e94\u7684\u53f6\u5b50\u8282\u70b9\u5c31\u662f $2^k-1+i$\uff0c\u8282\u70b9 $x$ \u7684\u7236\u4eb2\u5c31\u662f $x>>1$\uff0c\u5bf9\u4e8e\u8be2\u95ee $l,r$ \u53ef\u4ee5\u4ece $l-1,r+1$ \u6240\u5bf9\u5e94\u7684\u8282\u70b9\u5f80\u4e0a\u8df3\uff0c\u6ce8\u610f\u8981\u5728\u524d\u540e\u5404\u5f3a\u884c\u8865\u4e00\u4e2a\u6570\u5b57\u4fdd\u8bc1 $1\\le l-1<r+1\\le n$\u3002\n\n\u5982\u679c $l$ \u662f\u5de6\u513f\u5b50\uff0c\u5c31\u5c06\u5176\u5144\u5f1f\u52a0\u5165\uff1b\u5982\u679c $r$ \u662f\u53f3\u513f\u5b50\uff0c\u4ea6\u5c06\u5176\u5144\u5f1f\u52a0\u5165\uff0c\u6bcf\u6b21\u5148\u5c06\u6240\u6709\u8be2\u95ee\u5f80\u4e0a\u8df3\uff08\u5982\u679c $l,r$ \u7684\u7236\u4eb2\u76f8\u540c\u5373 $l\\otimes r=1$ \u5c31\u4e0d\u5728\u5904\u7406\uff09\uff0c\u518d\u5f80\u4e0a\u5904\u7406\u4e00\u5c42\uff0c\u65f6\u95f4 $O((n+m)\\log_2n)$\uff0c\u7a7a\u95f4 $O(n+m)$\u3002\u4e0d\u4f18\u79c0\uff0c\u9700\u8981\u5361\u5e38\u3002\n\n3.77KB\uff0c4.60s \u7684 AC \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+5,M=6e5+5,P=(1<<19)+5;\nusing ll=long long;\nnamespace fast_io{\n    char buf[N+5],*p1,*p2,c;\n    #define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,N,stdin),p1==p2)?EOF:*p1++)\n    inline int read(){\n        int an=0,f=1;while(!isdigit(c=gc))if(c=='-')f=-f;\n        do an=an*10+(48^c);while(isdigit(c=gc));return an*f;\n    }int ot;char ob[N+20],stk[20],t;\n    inline void fls(){\n        fwrite(ob,1,ot,stdout),ot=0;\n    }inline void write(ll x){\n        if(x<0)ob[ot++]='-',x=-x;\n        while(x>9)stk[++t]=48^(x%10),x/=10;\n        for(ob[ot++]=48^x;t;ob[ot++]=stk[t--]);\n        ob[ot++]='\\n';if(ot>N)fls();\n    }\n}\nusing fast_io::read;\nusing fast_io::write;\nstruct ast{\n\tll l,m,r,sm;\n\tinline ast operator+(const ast &y){\n\t\treturn{max(l,sm+y.l),max({m,y.m,r+y.l}),max(y.r,r+y.sm),sm+y.sm};\n\t}\n}ps[M],ns[M];\nstruct V{\n\tll x,y;\n\tinline bool operator<(const V &z)\n\tconst{return x==z.x?y<z.y:x<z.x;}\n\tinline bool operator==(const V &z)\n\tconst{return x==z.x&&y==z.y;}\n\tinline V operator-(const V &z)\n\tconst{return V(x-z.x,y-z.y);}\n\tinline V operator+(const V &z)\n\tconst{return V(x+z.x,y+z.y);}\n\tinline ll operator*(const V &z)\n\tconst{return x*z.y-y*z.x;}\n\tV(){}\n\ttemplate<typename _Tp1,typename _Tp2>\n\tV(_Tp1 a,_Tp2 b){x=a,y=b;}\n}_f_[3][N<<1],*_my,*_p;\nint n,m,p,rn,a[N],sn;\nll sm[N+P],nw;\nstruct Q{\n\tint l,r,id;ll ad;\n\tinline bool operator<(const Q &z)\n\tconst{return ad<z.ad;}\n}q[M];\nstruct Hu{\n\tV *f;int sz,t;\n\tinline void operator~(){f[sz=t=1]={0,0};}\n\tinline void operator+=(const V &p){\n\t\twhile(sz>1&&(f[sz]-f[sz-1])*(p-f[sz-1])>=0)--sz;\n\t\tf[++sz]=p;\n\t} \n\tinline void build(V *g,int n){\n\t\tint i;sz=0,t=1;\n\t\tfor(i=1;i<=n;++i)*this+=g[i];\n\t}\n\tinline void operator()(const Hu &x,const Hu &y){\n\t\tint i,j;sz=0;\n\t\tfor(i=j=1;i<x.sz&&j<y.sz;){\n\t\t\tf[++sz]=x.f[i]+y.f[j];\n\t\t\t++((x.f[i+1]-x.f[i])*(y.f[j+1]-y.f[j])>0?j:i);\n\t\t}if(i==x.sz)while(j<=y.sz)f[++sz]=x.f[i]+y.f[j++];\n\t\telse while(i<=x.sz)f[++sz]=x.f[i++]+y.f[j];\n\t}\n\tinline ll operator-(const ll &k){\n\t\twhile(t<sz&&f[t+1].x*k+f[t+1].y>f[t].x*k+f[t].y)++t;\n\t\treturn f[t].x*k+f[t].y;\n\t}\n\tinline V* begin(){return f+1;}\n\tinline V* end(){return f+sz+1;}\n}h[N+P],pr[N+P],nx[N+P],my;\nvoid build(int x=1,int l=1,int r=rn){ \n\tif(r<=n){\n\t\th[x].f=_f_[0]+(l<<1);\n\t\tpr[x].f=_f_[1]+(l<<1);\n\t\tnx[x].f=_f_[2]+(l<<1);\n\t\tif(l==r){\n\t\t\t~h[x],h[x]+={1,a[l]},sm[x]=a[l];\n\t\t\t~pr[x],pr[x]+={1,a[l]};\n\t\t\t~nx[x],nx[x]+={1,a[l]};\n\t\t}\n\t}if(l<r){\n\t\tint md=l+r>>1,a=x<<1;\n\t\tbuild(a,l,md);\n\t\tbuild(a|1,md+1,r);\n\t\tif(r<=n)sm[x]=sm[a]+sm[a|1];\n\t}\n}\nint main(){\n\tn=read(),m=read(),n+=2;\n\tint i,k,l,r,mt=0,md,I,R,x;\n\tfor(i=2;i<n;++i)a[i]=read();\n\tfor(p=2;(1<<p)<=n;++p);\n\trn=1<<p,build();\n\tfor(i=1;i<=m;++i)\n\t\tif(read()&1)nw+=read();\n\t\telse ++mt,q[mt]={read()+rn-1,read()+rn+1,mt,nw};\n\tm=mt,stable_sort(q+1,q+m+1);\n\tfor(k=0;k<p;++k){\n\t\tfor(i=1;i<=m;++i){\n\t\t\tif(q[i].l^q[i].r^1){\n\t\t\t\tnw=q[i].ad;\n\t\t\t\tif((q[i].l&1)^1){\n\t\t\t\t\tl=q[i].l^1;\n\t\t\t\t\tps[q[i].id]=ps[q[i].id]+\n\t\t\t\t\t(ast){pr[l]-nw,h[l]-nw,nx[l]-nw,sm[l]+(nw<<k)};\n\t\t\t\t}if(q[i].r&1){\n\t\t\t\t\tr=q[i].r^1;\n\t\t\t\t\tns[q[i].id]=(ast){pr[r]-nw,h[r]-nw,nx[r]-nw,sm[r]+(nw<<k)}\n\t\t\t\t\t+ns[q[i].id];\n\t\t\t\t}q[i].l>>=1,q[i].r>>=1;\n\t\t\t}\n\t\t}\n\t\tmd=1<<k,R=md<<1,mt=1<<p-k-1;\n\t\tfor(I=0,x=mt,_my=pr[x].f,_p=nx[x].f;(I+1<<k+1)<=n;++I,++x){\n\t\t\tl=I<<k+1,~h[x],my.f=_my;\n\t\t\tl=x<<1,r=l|1;my(nx[l],pr[r]);\n\t\t\tmerge(h[l].begin(),h[l].end(),my.begin(),my.end(),_p+1);\n\t\t\tsn=h[l].sz+my.sz;\n\t\t\tmerge(h[r].begin(),h[r].end(),_p+1,_p+sn+1,_my+1);\n\t\t\th[x].build(_my,sn+h[r].sz);\n\t\t}\n\t\tfor(I=0,x=mt;(I+1<<k+1)<=n;++I,++x){\n\t\t\tl=I<<k+1,~pr[x],~nx[x];\n\t\t\tfor(i=1,nw=0;i<=R;++i)\n\t\t\t\tnw+=a[l+i],pr[x]+={i,nw};\n\t\t\tfor(i=R,nw=0;i;--i)\n\t\t\t\tnw+=a[l+i],nx[x]+={R-i+1,nw};\n\t\t}\n\t}for(i=1;i<=m;++i)\n\t\twrite((ps[i]+ns[i]).m);\n\tfast_io::fls();\n\treturn 0;\n}\n```",
        "postTime": 1660901901,
        "uid": 502410,
        "name": "EnofTaiPeople",
        "ccfLevel": 0,
        "title": "\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c"
    },
    {
        "content": "~~\u8017\u65f6 $23$ \u4e2a\u5c0f\u65f6\uff0c\u6211\u7ec8\u4e8e\u8fc7\u4e86\uff01\uff01~~\n\n- \u9898\u610f\n\n\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217 $a$\uff0c$m$ \u6b21\u64cd\u4f5c\uff1a\n\n1. \u5168\u5c40\u52a0 $x$\u3002\n2. \u67e5\u8be2\u533a\u95f4 $[l,r]$ \u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n- \u5206\u6790\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n1. \u95f5\u53ef\u592b\u65af\u57fa\u548c\uff0c\u4e0d\u4f1a\u7684\u8bdd\u51fa\u95e8\u53f3\u8f6c [P4557 [JSOI2018]\u6218\u4e89](https://www.luogu.com.cn/problem/P4557)\uff0c[\u6211\u7684\u5b66\u4e60\u7b14\u8bb0](https://www.luogu.com.cn/blog/BingAD/min-ke-fu-si-ji-hu)\u3002\n2. \u7ebf\u6bb5\u6811\uff0c\u4e0d\u4f1a\u7684\u8bdd\u5efa\u8bae\u95ed\u5173\u4e09\u5e74\u5728\u6765\u6253\u8fd9\u9898\u3002\n3. \u6781\u9ad8\u8d85\u7684\u5361\u5e38\u6280\u672f\uff0c\u4e0d\u5177\u5907\u7684\u8bdd\u5efa\u8bae\u591a\u6253\u51e0\u9053 Ynoi\u3002\n4. \u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u4e0d\u4f1a\u7684\u8bdd\u51fa\u95e8\u53f3\u8f6c [P4513 \u5c0f\u767d\u901b\u516c\u56ed](https://www.luogu.com.cn/problem/P4513)\u3002\n\n### \u6b63\u9898\n\n\u8003\u8651\u53bb\u6389\u5168\u5c40\u52a0\u5c31\u662f\u7b80\u5355\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4f46\u662f\u52a0\u4e0a\u5168\u5c40\u52a0\u540e\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u5c31\u8ddf\u5b50\u6bb5\u957f\u5ea6\u6709\u5173\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u5fc5\u987b\u8003\u8651\u7ef4\u62a4\u8ddf\u957f\u5ea6\u6709\u5173\u7684\u51e0\u4e2a\u51fd\u6570\u3002\n\n\u4ee4 $lmx(x)$\uff0c\u8868\u793a\u957f\u5ea6\u4e3a $x$ \u7684\u65f6\u5019\u7684\u6700\u5927\u524d\u7f00\uff0c$rmx(x)$ \u548c $ans(x)$ \u540c\u7406\u3002\n\n\u663e\u7136\u6839\u636e\u6700\u5927\u5b50\u6bb5\u548c\u7684\u7ecf\u5178\u5957\u8def\uff0c\u6709\uff1a\n\n$$lmx(x) = \\max(lmx_{ls}(x),sum_{ls} + lmx_{rs}(x))$$\n$$rmx(x) = \\max(rmx_{rs}(x),sum_{rs} + rmx_{ls}(x))$$\n$$ans(x) \\leftarrow \\max(ans_{ls}(x),ans_{rs}(x))$$\n\n\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\u8fd8\u6f0f\u4e86\u4e00\u90e8\u5206\uff1a\n\n$$rmx_{ls}(x)+lmx_{rs}(x) \\rightarrow ans(x+y)$$\n\n\u4e3a\u4e86\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u770b\u6210\u4e8c\u4f4d\u5e73\u9762\u4e0a\u7684\u70b9 $(x,f(x))$\uff0c\u8fd9\u91cc $f$ \u53ef\u4ee5\u662f $lmx,rmx,ans$\u3002\n\n\u90a3\u4e48\u8fd9\u79cd\u7279\u6b8a\u7684\u8f6c\u79fb\u53ef\u4ee5\u88ab\u770b\u6210\u662f\u4e24\u4e2a\u5411\u91cf\u76f8\u52a0\uff0c\u505a\u8fc7\u95f5\u53ef\u592b\u65af\u57fa\u548c\u5c31\u80fd\u4e00\u773c\u770b\u51fa\u6765 $ans = rmx_{ls}+lmx_{rs}$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5168\u5c40\u52a0\u7684 $k$ \u5c31\u53ef\u4ee5\u770b\u6210\u6700\u5927\u5316 $k\\times x + y$ \u7684\u5f62\u5f0f\uff0c\u90a3\u76f4\u63a5\u5728\u51f8\u5305\u4e0a\u4e8c\u5206\u5c31\u597d\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5982\u679c\u5c06\u6240\u6709\u5168\u5c40\u52a0\u7d2f\u52a0\u5230\u6bcf\u4e00\u4e2a\u8be2\u95ee\u4e0a\uff0c\u6211\u4eec\u5c31\u80fd\u4fdd\u8bc1 $k$ \u5355\u8c03\u9012\u589e\uff0c\u90a3\u5728\u51f8\u5305\u4e0a\u8bb0\u4e00\u4e0b\u4e0a\u6b21\u7684\u51b3\u7b56\u5728\u4ec0\u4e48\u5730\u65b9\uff0c\u8ba9\u540e\u7ee7\u7eed\u5f80\u4e0b\u8dd1\u5c31\u884c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u8ba9\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u8fd9\u4efd\u4ee3\u7801 (\u7528 vector \u5b9e\u73b0)\u3002\n\u8fd8\u6ca1\u7ed3\u675f\uff01\uff01\uff01\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\nusing namespace std;\n\nnamespace IO{\n\tchar ibuf[(1 << 20) + 1], *iS, *iT;\n\t#if ONLINE_JUDGE\n\t#define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n\t#else\n\t#define gh() getchar()\n\t#endif\n\t#define reg register\n\tinline long long read () {\n\t\treg char ch = gh();\n\t\treg long long x = 0;\n\t\treg char t = 0;\n\t\twhile (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n\t\twhile (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n\t\treturn t ? -x : x;\n\t}\n\tinline void write(long long x) {\n\t\tif (x < 0) {\n\t\t\tx = ~(x - 1);\n\t\t\tputchar('-');\n\t\t}\n\t\tif (x > 9)\n\t\t\twrite(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\n\nusing IO::read;\nusing IO::write;\n\nconst int maxn(3e5 + 500), maxm(6e5 + 500);\nconst ll inf(1e16 + 233);\n\nstruct Point {\n\tll x, y;\n\tinline Point operator + (const Point &rhs) const {\n\t\treturn {x + rhs.x, y + rhs.y};\n\t}\n\tinline Point operator - (const Point &rhs) const {\n\t\treturn {x - rhs.x, y - rhs.y};\n\t}\n\tinline ll operator * (const Point &rhs) const {\n\t\treturn x * rhs.y - rhs.x * y;\n\t}\n\tinline bool operator < (const Point &rhs) const {\n\t\treturn (*this) * rhs >= 0;\n\t}\n};\n\nll tg, a[maxn], ans[maxm];\n\nstruct Hull {\n\tvector <Point> a;\n\tint pnt;\n\tHull () { pnt = 0; }\n\tinline Point operator [] (const int& pos) const {\n\t\treturn a[pos];\n\t}\n\tinline void insert (const Point &rhs) {\n\t\ta[rhs.x].y = max(a[rhs.x].y, rhs.y);\n\t}\n\tinline void pb (const Point &rhs) {\n\t\ta.push_back(rhs);\n\t}\n\tinline void reset (const int len) {\n\t\ta.clear();\n\t\ta.push_back({0, 0});\n\t\tfor (int i = 1; i <= len; i++) a.push_back({i, -inf});\n\t}\n\tinline void Convex () {\n\t\tint sz = a.size();\n\t\tif (sz <= 2) return;\n\t\tint top = 1;\n\t\tfor (int i = 2; i < sz; i++) {\n\t\t\tif (a[i].y == -inf) continue;\n\t\t\twhile (top > 0 && a[top] - a[top - 1] < a[i] - a[top - 1]) top--;\n\t\t\ta[++top] = a[i];\n\t\t}\n\t\tfor (int i = 1; i < sz - top; i++) a.pop_back();\n\t}\n\tinline ll maxv () {\n\t\tint sz = a.size();\n\t\twhile (pnt < sz - 1 && tg * (a[pnt + 1].x - a[pnt].x) + (a[pnt + 1].y - a[pnt].y) > 0) pnt++;\n\t\treturn tg * a[pnt].x + a[pnt].y;\n\t}\n};\n\nstruct Node {\n\tll l, r, mid, s;\n\tinline Node operator + (const Node &rhs) const {\n\t\treturn {max(l, s + rhs.l), max(rhs.r, rhs.s + r), max({mid, rhs.mid, r + rhs.l}), s + rhs.s};\n\t}\n};\n\nstruct SGT {\n\tHull lmx[maxn << 2], rmx[maxn << 2], ans[maxn << 2];\n\tll sum[maxn << 2];\n#define ls (p << 1)\n#define rs (p << 1 | 1)\n\tinline void preMerge (Hull &c, const Hull &a, const Hull &b, const Point &addv) {\n\t\tint sza = a.a.size(), szb = b.a.size();\n\t\tfor (int i = 0; i < sza; i++) c.pb(a[i]);\n\t\tfor (int i = 0; i < szb; i++) c.pb(b[i] + addv);\n\t\tc.Convex();\n\t}\n\tinline void Minkowski (Hull &c, const Hull &a, const Hull &b) {\n\t\tint i = 0, j = 0, sza = a.a.size(), szb = b.a.size();\n\t\tc.insert(a[i] + b[j]);\n\t\twhile (i < sza - 1 && j < szb - 1) {\n\t\t\tif (a[i + 1] - a[i] < b[j +  1] - b[j]) j++;\n\t\t\telse i++;\n\t\t\tc.insert(a[i] + a[j]);\n\t\t}\n\t\twhile (i < sza - 1) ++i, c.insert(a[i] + b[j]);\n\t\twhile (j < szb - 1) ++j, c.insert(a[i] + b[j]);\n\t}\n\tinline void build (int l, int r, int p) {\n\t\tif (l == r) {\n\t\t\tlmx[p].pb({0, 0});\n\t\t\tlmx[p].pb({1, a[l]});\n\t\t\tans[p].pb({0, 0});\n\t\t\tans[p].pb({1, a[l]});\n\t\t\trmx[p].pb({0, 0});\n\t\t\trmx[p].pb({1, a[l]});\n\t\t\tsum[p] = a[l];\n\t\t\treturn;\n\t\t}\n\t\tconst int mid = (l + r) >> 1;\n\t\tbuild(l, mid, ls);\n\t\tbuild(mid + 1, r, rs);\n\t\tpreMerge(lmx[p], lmx[ls], lmx[rs], {mid - l + 1, sum[ls]});\n\t\tpreMerge(rmx[p], rmx[rs], rmx[ls], {r - mid, sum[rs]});\n\t\tans[p].reset(r - l + 1);\n\t\tint sz = ans[ls].a.size();\n\t\tfor (int i = 0; i < sz; i++) ans[p].insert(ans[ls][i]);\n\t\tsz = ans[rs].a.size();\n\t\tfor (int i = 0; i < sz; i++) ans[p].insert(ans[rs][i]);\n\t\tMinkowski(ans[p], rmx[ls], lmx[rs]);\n\t\tans[p].Convex();\n\t\tsum[p] = sum[ls] + sum[rs];\n\t}\n\tinline Node query (int s, int t, int l, int r, int p) {\n\t\tif (s <= l && r <= t) return {lmx[p].maxv(), rmx[p].maxv(), ans[p].maxv(), sum[p] + 1ll * (r - l + 1) * tg};\n\t\tconst int mid = (l + r) >> 1;\n\t\tif (mid < s) return query(s, t, mid + 1, r, rs);\n\t\telse if (t <= mid) return query(s, t, l, mid, ls);\n\t\telse return query(s, t, l, mid, ls) + query(s, t, mid + 1, r, rs);\n\t}\n} s;\n\nint n, m, tot;\n\nstruct Query {\n\tint l, r, id;\n\tll tg;\n\tinline bool operator < (const Query &rhs) const {\n\t\treturn tg < rhs.tg;\n\t}\n} q[maxm];\n\nint main () {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) a[i] = read();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint opt = read();\n\t\tif (opt == 1) tg += read();\n\t\telse q[++tot] = {read(), read(), tot, tg};\n\t}\n\tm = tot;\n\tsort(q + 1, q + m + 1);\n\tfor (int i = 1; i <= n; i++) a[i] += q[1].tg;\n\tfor (int i = m; i; i--) q[i].tg -= q[1].tg;\n\ts.build(1, n, 1);\n\tfor (int i = 1; i <= m; i++) {\n\t\ttg = q[i].tg;\n\t\tans[q[i].id] = s.query(q[i].l, q[i].r, 1, n, 1).mid;\n\t}\n\tfor (int i = 1; i <= m; i++) write(ans[i]), puts(\"\");\n}\n```\n\n\u8ba9\u540e\u5c31\u53ef\u4ee5\u5f00\u5fc3\u7684 MLE\u3002\n\n### \u7a7a\u95f4\u4f18\u5316\n\n1. \u7b2c\u4e00\u79cd\u4f18\u5316\uff0c\u4f60\u53ef\u4ee5\u7528\u6307\u9488\u7684\u5199\u6cd5\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u53ef\u4ee5\u5c11\u91cf\u4f18\u5316\u7a7a\u95f4\uff0c\u4f46\u662f\u65e0\u6cd5\u89e3\u51b3\u95ee\u9898\u3002\n2. \u63a5\u4e0b\u6765\u4f60\u53d1\u73b0\u53ef\u4ee5\u4e00\u8fb9\u5efa\u6811\uff0c\u4e00\u8fb9\u67e5\u8be2\uff0c\u8fd9\u6837\u59cb\u7ec8\u53ea\u9700\u8981\u4e00\u5c42\u7a7a\u95f4\uff0c\u5f53\u524d\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u53ef\u4ee5\u4ece build  \u91cc\u9762\u8fd4\u56de\u3002\u5177\u4f53\u7684\uff0c\u5bf9\u4e8e\u5f53\u524d\u533a\u95f4 $[l,r]$ \u53ea\u9700\u8981\u7528\u5230\u5185\u5b58\u4e2d $[l,r]$ \u7684\u90e8\u5206\uff0c\u5e94\u4e3a\u957f\u5ea6\u4e0d\u53ef\u80fd\u8d85\u8fc7 $r-l+1$\uff0c\u5411\u4e0b\u9012\u5f52\u65f6\u4f7f\u7528\u7a7a\u95f4 $[l,mid]$\uff0c$[mid+1,r]$ \u5373\u53ef\u3002\n3. \u5982\u679c\u4f60\u7528 vector \u5bf9\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u8be2\u95ee\uff0c\u90a3\u4f60\u4ecd\u7136\u4f1a\u796d\uff0c\u4e8e\u662f\u4f60\u60f3\u5230\uff0c\u8be2\u95ee\u53ef\u4ee5\u5728 build \u7684\u8fc7\u7a0b\u4e2d\u9012\u5f52\u4f20\u4e0b\u53bb\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5b58\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a\u4e86 $O(n)$\u3002\n\n\u5982\u679c\u5b8c\u6210\u4e86\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u606d\u559c\u4f60\u901a\u8fc7\u4e86\u6b64\u9898\uff01\n\n- AC code\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2\")\nusing namespace std;\n\nnamespace IO{\n\tchar ibuf[(1 << 20) + 1], *iS, *iT;\n\t#if ONLINE_JUDGE\n\t#define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n\t#else\n\t#define gh() getchar()\n\t#endif\n\t#define reg register\n\tinline long long read () {\n\t\treg char ch = gh();\n\t\treg long long x = 0;\n\t\treg char t = 0;\n\t\twhile (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n\t\twhile (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n\t\treturn t ? -x : x;\n\t}\n\tinline void write(long long x) {\n\t\tif (x < 0) {\n\t\t\tx = ~(x - 1);\n\t\t\tputchar('-');\n\t\t}\n\t\tif (x > 9)\n\t\t\twrite(x / 10);\n\t\tputchar(x % 10 + '0');\n\t}\n}\n\nusing IO::read;\nusing IO::write;\n\nconst int maxn(3e5 + 5), maxm(6e5 + 5);\nconst ll inf(1e16 + 233);\n\nstruct Point {\n\tll x, y;\n\tinline Point operator + (const Point &rhs) const {\n\t\treturn {x + rhs.x, y + rhs.y};\n\t}\n\tinline Point operator - (const Point &rhs) const {\n\t\treturn {x - rhs.x, y - rhs.y};\n\t}\n\tinline ll operator * (const Point &rhs) const {\n\t\treturn x * rhs.y - rhs.x * y;\n\t}\n\tinline bool operator < (const Point &rhs) const {\n\t\treturn (*this) * rhs >= 0;\n\t}//\u5224\u65ad\u5de6\u53f3\u5173\u7cfb \n};//\u5b9a\u4e49\u5411\u91cf \n\nll tg, a[maxn];\n\nstruct Hull {\n\tPoint* a;\n\tint sz, pnt;\n\tHull () { sz = pnt = 0;\t}\n\tinline Point& operator [] (const int &pos) const {\n\t\treturn a[pos];\n\t}\n\tinline void insert (const Point &rhs) {\n\t\ta[rhs.x].y = max(a[rhs.x].y, rhs.y);\n\t}\n\tinline void pb (const Point &rhs) {\n\t\ta[++sz] = rhs;\n\t}\n\tinline void reset (const int len) {\n\t\tfor (int i = 1; i <= len; i++) a[i] = {i, -inf};\n\t\tsz = len;\n\t}\n\tinline void Convex () {\n\t\tif (sz <= 2) return;\n\t\tint top = 2;\n\t\tfor (int i = 3; i <= sz; i++) {\n\t\t\tif (a[i].y == -inf) continue;\n\t\t\twhile (top > 1 && a[top] - a[top - 1] < a[i] - a[top - 1]) top--;\n\t\t\ta[++top] = a[i];\n\t\t}\n\t\tsz = top;\n\t\tpnt = 1;\n\t}\n\tinline ll maxv () {\n\t\twhile (pnt < sz && tg * (a[pnt + 1].x - a[pnt].x) + (a[pnt + 1].y - a[pnt].y) > 0) pnt++;\n\t\treturn tg * a[pnt].x + a[pnt].y;\n\t}\n};//\u5bf9\u4e8e\u4e00\u4e2a\u51f8\u51fd\u6570\uff0c\u9700\u8981\u652f\u6301\u6c42\u51f8\u5305\uff0c\u5355\u70b9\u53d6 max\uff0c\u548c\u63d2\u5165 \n\nstruct Node {\n\tll l, r, mid, s;\n\tinline Node operator + (const Node &rhs) const {\n\t\tNode res = {max(l, s + rhs.l), max(rhs.r, rhs.s + r), max({mid, rhs.mid, r + rhs.l}), s + rhs.s};\n\t\treturn res;\n\t}\n} ans[maxm];\n\nvector <int> qry;\n\nstruct Query {\n\tint l, r, id;\n\tll tg;\n\tinline bool operator < (const Query &rhs) const {\n\t\treturn tg < rhs.tg;\n\t}\n} q[maxm];\n\nstruct SGT {\n\tstruct SGTNode { Hull lmx, rmx, ans; ll sum; };\n\tPoint bl[maxn << 1], br[maxn << 1], bm[maxn << 1], tl[maxn], tr[maxn], tm[maxn];\n\tPoint *tmpl = bl, *tmpr = br, *tmpm = bm;//\u8fd9\u91cc\u52a8\u6001\u7684\u7ef4\u62a4\u7a7a\u95f4 \n\tinline void preMerge (Hull &c, const Hull &a, const Hull &b, const Point &addv) {\n\t\tfor (int i = 1; i <= a.sz; i++) c.pb(a[i]);\n\t\tfor (int i = 1; i <= b.sz; i++) c.pb(b[i] + addv);\n\t\tc.Convex();\n\t}//lmx \u548c rmx \u7684\u7ef4\u62a4 \n\tinline void Minkowski (Hull &c, const Hull &a, const Hull &b) {\n\t\tint i = 1, j = 1;\n\t\tc.insert(a[i] + b[j]);\n\t\twhile (i < a.sz && j < b.sz) c.insert((a[i + 1] - a[i] < b[j + 1] - b[j]) ? a[i] + b[++j] : a[++i] + b[j]);\n\t\twhile (i < a.sz) c.insert(a[++i] + b[j]);\n\t\twhile (j < b.sz) c.insert(a[i] + b[++j]);\n\t}//\u95f5\u53ef\u592b\u65af\u57fa\u548c \n#define ls (p << 1)\n#define rs (p << 1 | 1)\n\tinline SGTNode build (int l, int r, int p) {\n\t\tconst int mid = (l + r) >> 1;\n\t\tSGTNode lc, rc, now;\n\t\tvector <int> tmp, whq;//\u8fd9\u91cc\u5206\u522b\u5b58\u50a8\u8981\u60f3\u4e0b\u4f20\u7684\u8be2\u95ee\uff0c\u548c\u9700\u8981\u5728\u8fd9\u91cc\u67e5\u8be2\u7684\u8be2\u95ee \n\t\tnow.lmx.a = tl, now.rmx.a = tr, now.ans.a = tm;\n\t\tfor (int x : qry) {\n\t\t\tif (q[x].r < l || q[x].l > r) continue;\n\t\t\tif (q[x].l <= l && r <= q[x].r) whq.push_back(x);//\u67e5\u8be2\u7684\u533a\u95f4\u6ca1\u6709\u7ee7\u7eed\u9012\u5f52\u7684\u5fc5\u8981 \n\t\t\telse tmp.push_back(x);\n\t\t}\n\t\tif (l == r) {\n\t\t\tnow.lmx.a[1] = now.rmx.a[1] = now.ans.a[1] = {0, 0};\n\t\t\tnow.lmx.a[2] = now.rmx.a[2] = now.ans.a[2] = {1, a[l]};\n\t\t\tnow.lmx.sz = now.rmx.sz = now.ans.sz = 2;\n\t\t\tnow.sum = a[l];\n\t\t\tlc.lmx.a = tmpl, lc.rmx.a = tmpr, lc.ans.a = tmpm;\n\t\t\ttmpl += 2, tmpr += 2, tmpm += 2;\n\t\t\tgoto end;\n\t\t}\n\t\tqry = tmp;\n\t\tlc = build(l, mid, ls);\n\t\tqry = tmp;\n\t\trc = build(mid + 1, r, rs);\n\t\tpreMerge(now.lmx, lc.lmx, rc.lmx, {mid - l + 1, lc.sum});\n\t\tpreMerge(now.rmx, rc.rmx, lc.rmx, {r - mid, rc.sum});//\u8f6c\u79fb 1\uff0c2 \n\t\tnow.ans.a++;\n\t\tnow.ans.reset(r - l + 1);//\u533a\u95f4\u957f\u5ea6 [1, r - l + 1]\n\t\tfor (int i = 1; i <= lc.ans.sz; i++) now.ans.insert(lc.ans[i]);\n\t\tfor (int i = 1; i <= rc.ans.sz; i++) now.ans.insert(rc.ans[i]);//\u8f6c\u79fb 3 \n\t\tMinkowski(now.ans, lc.rmx, rc.lmx);// \u8f6c\u79fb 4 \n\t\tnow.ans.a--;\n\t\tnow.ans[1] = {0, 0};//\u53ef\u4ee5\u4e0d\u9009 \n\t\tnow.ans.sz++;\n\t\tnow.ans.Convex();\n\t\tnow.sum = lc.sum + rc.sum;\n\t\tend:\n\t\t\tnow.lmx.pnt = now.rmx.pnt = now.ans.pnt = 1;\n\t\t\tfor (int i : whq) {\n\t\t\t\ttg = q[i].tg;\n\t\t\t\tNode res = {now.lmx.maxv(), now.rmx.maxv(), now.ans.maxv(), now.sum + (r - l + 1) * tg};\n\t\t\t\tans[q[i].id] = ans[q[i].id] + res;\n\t\t\t}\n\t\t\tPoint *xl = lc.lmx.a, *xr = lc.rmx.a, *xm = lc.ans.a;\n\t\t\tfor (int i = 1; i <= now.lmx.sz; i++) xl[i] = now.lmx.a[i];\n\t\t\tfor (int i = 1; i <= now.rmx.sz; i++) xr[i] = now.rmx.a[i];\n\t\t\tfor (int i = 1; i <= now.ans.sz; i++) xm[i] = now.ans.a[i];\n\t\t\tnow.lmx.a = xl, now.rmx.a = xr, now.ans.a = xm;//\u7531\u4e8e\u53ef\u4ee5\u4e0d\u9009\uff0c\u7a7a\u95f4\u5e76\u975e\u7d27\u5bc6\u76f8\u8fde\uff0c\u6240\u4ee5\u4ece\u505a\u513f\u5b50\u7684\u4f4d\u7f6e\u5f00\u59cb\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u7684\u7b54\u6848 \n\t\t\treturn now;\n\t}\n} s;\n\nint n, m, tot;\n\nint main () {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) a[i] = read();\n\tfor (int i = 1; i <= m; i++) {\n\t\tint opt = read();\n\t\tif (opt == 1) tg += read();\n\t\telse q[++tot] = {read(), read(), tot, tg};\n\t}\n\tm = tot;\n\tsort(q + 1, q + m + 1);\n\tfor (int i = 1; i <= m; i++) qry.push_back(i);\n\ts.build(1, n, 1);\n\tfor (int i = 1; i <= m; i++) write(ans[i].mid), puts(\"\");\n}\n// I love WHQ!\n```",
        "postTime": 1666773789,
        "uid": 317495,
        "name": "JWRuixi",
        "ccfLevel": 7,
        "title": "Solution P5073"
    },
    {
        "content": "## \u9898\u610f\n\n\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\uff0c\u6709 $m$ \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6709\u4ee5\u4e0b\u4e24\u7c7b\uff1a\n\n1. \u5168\u5c40\u52a0 $x$\uff1b\n2. \u67e5\u8be2\u533a\u95f4 $[l, r]$ \u5185\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n\u6570\u636e\u8303\u56f4 $n\u22643 \u00d7 10^5, m\u22646 \u00d7 10^5$\u3002\u7a7a\u95f4\u9650\u5236 128MB\u3002\n\n## \u601d\u8def\n\n\u5982\u679c\u8fd9\u9898\u8981\u6c42\u7684\u662f\u5355\u70b9\u52a0\u548c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u67e5\u8be2\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u548c\u3001\u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\u3001\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\u3001\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u8fd9\u56db\u4e2a\u503c\u5373\u53ef\u3002\n\n\u73b0\u5728\u8fd9\u9898\u8981\u6c42\u5168\u5c40\u4fee\u6539\uff0c\u90a3\u5c31\u6ca1\u6cd5\u6309\u7167\u4e4b\u524d\u7684\u65b9\u5f0f\u7ef4\u62a4\u4e86\u3002\u4f46\u662f\u7531\u4e8e\u8fd9\u9898\u53ea\u6709\u5168\u5c40\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u4fee\u6539\u7684\u603b\u91cf\u8bb0\u5f55\u4e0b\u6765\uff0c\u8bbe\u8fd9\u4e2a\u603b\u91cf\u662f x\uff0c\u5219\u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4 $[l, r]$\uff0c\u533a\u95f4\u548c\u5373\u4e3a $(r-l+1)x+\\sum_{i=l}^r a_i$\u3002\u8fd8\u662f\u8003\u8651\u8bb0\u5f55\u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\u3001\u533a\u95f4\u6700\u5927\u540e\u7f00\u548c\u4e0e\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u4f46\u662f\u7531\u4e8e\u73b0\u5728\u533a\u95f4\u548c\u4e5f\u4e0e\u533a\u95f4\u7684\u957f\u5ea6\u76f8\u5173\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8bb0\u5f55\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u9700\u8981\u5bf9\u6bcf\u4e2a\u957f\u5ea6\u90fd\u8bb0\u5f55\u8be5\u957f\u5ea6\u4e0b\u6700\u5927\u7684\u548c\u3002\u5728\u4e24\u4e2a\u533a\u95f4\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u9700\u8981\u76f8\u52a0\u7684\u6570\u636e\uff08\u5982\u5de6\u533a\u95f4\u7684\u6700\u5927\u540e\u7f00\u548c\u4e0e\u53f3\u533a\u95f4\u7684\u6700\u5927\u524d\u7f00\u548c\uff09\uff0c\u53ea\u9700\u8981\u505a\u4e00\u6b21 $(\\max, +)$ \u5377\u79ef\u5373\u53ef\u3002\u76f4\u63a5\u505a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\mathcal O(len^2 )$\uff0c\u663e\u7136\u4e0d\u53ef\u53d6\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u4e0d\u5728\u51f8\u58f3\u4e0a\u7684\u70b9\u4e00\u5b9a\u4e0d\u4f1a\u8ba9\u7b54\u6848\u66f4\u4f18\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5b58\u50a8\u8fd9\u4e9b\u6570\u636e\u70b9\u7ec4\u6210\u7684\u51f8\u58f3\uff0c\u8fd9\u6837\u5728 $(\\max, +)$ \u5377\u79ef\u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\u505a\u4e00\u6b21\u95f5\u53ef\u592b\u65af\u57fa\u548c\uff0c\u6bcf\u4e00\u6b21\u5408\u5e76\u5c31\u53ea\u6709 $\\mathcal O(len)$ \u4e86\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u5b8c\u6240\u6709\u4fe1\u606f\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $[l, r]$ \u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u7684\u8be2\u95ee\uff0c\u76f4\u63a5\u50cf\u666e\u901a\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u95ee\u9898\u4e00\u6837\u67e5\u8be2\u5373\u53ef\uff0c\u8bbe\u5230\u8fbe\u8fd9\u4e2a\u8be2\u95ee\u7684\u65f6\u5019\u5df2\u7ecf\u5168\u5c40\u52a0\u4e86 $x$\uff0c\u5728\u67e5\u8be2\u5230\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u533a\u95f4\u6700\u5927\u524d\u7f00\u548c\u3001\u6700\u5927\u540e\u7f00\u548c\u3001\u6700\u5927\u5b50\u6bb5\u548c\u8fd9\u4e09\u4e2a\u503c\uff0c\u5728\u51f8\u5305\u4e0a\u4e09\u5206\u51fa\u4f7f\u5f97 $Lx+V$ \u6700\u5927\u7684\u70b9 $(L, V)$\uff0c\u5219 $Lx+V$ \u5373\u4e3a\u8be5\u503c\u3002\u6bcf\u6b21\u67e5\u8be2\u4f1a\u6d89\u53ca\u5230 $O(\\log n)$ \u4e2a\u70b9\uff0c\u800c\u6bcf\u4e2a\u70b9\u4e0a\u6c42\u51fa\u8fd9\u4e09\u4e2a\u503c\u53c8\u9700\u8981 $\\mathcal O(\\log n)$ \u7684\u65f6\u95f4\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(q\\log^2 n)$\uff0c\u57fa\u672c\u8fc7\u4e0d\u53bb\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\n\n\u5c06\u6240\u6709\u7684\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u6309\u7167\u5230\u8fbe\u8be5\u8be2\u95ee\u65f6\u5168\u5c40\u52a0\u7684\u503c $x$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7531\u4e8e $x$ \u8d8a\u5927\u51f8\u5305\u4e0a\u7684\u51b3\u7b56\u70b9\u8d8a\u9760\u540e\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u4e2a\u51f8\u5305\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u53ea\u9700\u8981\u50cf Two pointers \u4e00\u6837\u4e0d\u65ad\u5c06\u51f8\u5305\u4e0a\u7684\u6307\u9488\u5f80\u540e\u63a8\u5373\u53ef\u3002\u7531\u4e8e\u6240\u6709\u51f8\u5305\u4e2d\u5171\u6709 $\\mathcal O(n \\log n)$  \u4e2a\u70b9\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O((q+n)\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O(n\\log n)$\uff0c\u53ef\u4ee5\u901a\u2026\u2026\n\n\u7b49\u4e00\u4e0b\uff0c\u6bd2\u7624\u7684\u51fa\u9898\u4eba\u5c06\u7a7a\u95f4\u9650\u5236\u5f00\u5230\u4e86 128MB\uff0c\u4e8e\u662f\u5199\u4e86\u4e00\u53d1\u5c31 MLE \u4e86\uff08\u800c\u4e14\u76f4\u63a5\u5361\u7a7a\u95f4\u662f\u5361\u4e0d\u8fdb\u53bb\u7684\uff09\u3002\u4e0b\u9762\u7684\u95ee\u9898\u5c31\u662f\uff0c\u600e\u4e48\u5c06\u7a7a\u95f4\u4f18\u5316\u5230\u7ebf\u6027\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5982\u679c\u6211\u4eec\u9884\u5904\u7406\u8fd9\u4e2a\u8be2\u95ee\u5728\u7ebf\u6bb5\u6811\u4e0a\u5bf9\u5e94\u7684\u6240\u6709\u70b9\uff0c\u5c31\u53ea\u9700\u8981\u626b\u63cf\u4e00\u904d\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u9996\u5148\u6c42\u51fa\u5176\u4e0b\u9762\u7684\u70b9\u5bf9\u6240\u6709\u8be2\u95ee\u7b54\u6848\u7684\u8d21\u732e\uff0c\u5c06\u4e24\u4e2a\u513f\u5b50\u7684\u4fe1\u606f\u5408\u5e76\uff0c\u63a5\u7740\u6c42\u51fa\u5f53\u524d\u70b9\u5bf9\u8be5\u70b9\u4e0a\u6240\u6709\u8be2\u95ee\u7b54\u6848\u7684\u8d21\u732e\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee\uff0c\u7ef4\u62a4\u8be5\u8be2\u95ee\u533a\u95f4\u76ee\u524d\u7684\u524d\u7f00\u4fe1\u606f\u548c\u540e\u7f00\u4fe1\u606f\uff0c\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5f53\u524d\u70b9\u5bf9\u8fd9\u4e2a\u8be2\u95ee\u7684\u8d21\u732e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u7ebf\u6bb5\u6811\u4e0a $l\u22121$ \u548c $r+1$ \u5bf9\u5e94\u7684\u70b9\u7684 LCA \u4e0e\u5f53\u524d\u70b9\u7684\u5173\u7cfb\uff08\u5728 LCA \u7684\u5de6\u513f\u5b50\u7684\u5b50\u6811\u4e2d\uff0c\u6216\u8005\u5728 LCA \u7684\u53f3\u513f\u5b50\u7684\u5b50\u6811\u4e2d\uff09\uff0c\u5373\u53ef\u77e5\u9053\u5f53\u524d\u8d21\u732e\u9700\u8981\u52a0\u5230\u524d\u7f00\u4fe1\u606f\u4e2d\u8fd8\u662f\u9700\u8981\u52a0\u5230\u540e\u7f00\u4fe1\u606f\u4e2d\uff08\u5982\u679c\u5728\u5de6\u513f\u5b50\u7684\u5b50\u6811\u4e2d\uff0c\u5219\u52a0\u5230\u524d\u7f00\u4fe1\u606f\uff0c\u5426\u5219\u52a0\u5230\u540e\u7f00\u4fe1\u606f\uff09\u3002\u6700\u540e\uff0c\u5c06\u6bcf\u4e2a\u8be2\u95ee\u7684\u524d\u7f00\u4fe1\u606f\u4e0e\u540e\u7f00\u4fe1\u606f\u52a0\u8d77\u6765\uff0c\u5373\u53ef\u5f97\u5230\u8be5\u8be2\u95ee\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u8be5\u4fe1\u606f\u4e2d\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u5373\u4e3a\u8be5\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u8fd9\u4e48\u505a\uff0c\u867d\u7136\u5b58\u50a8\u7ebf\u6bb5\u6811\u4e0a\u51f8\u5305\u7684\u7a7a\u95f4\u53d8\u6210\u7ebf\u6027\u4e86\uff0c\u4f46\u662f\u603b\u7a7a\u95f4\u4f9d\u7136\u662f $\\mathcal O(n\\log n)$\uff0c\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u7a7a\u95f4\u3002\u6211\u4eec\u901a\u8fc7\u94fe\u8868\u7ef4\u62a4\u4e00\u4e2a\u70b9\u4e0a\u9762\u7684\u6240\u6709\u8be2\u95ee\uff0c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5206\u6210\u4e09\u7c7b\uff1a\u8be5\u8be2\u95ee\u8986\u76d6\u5f53\u524d\u533a\u95f4\u7684\u524d\u7f00\u3001\u8be5\u8be2\u95ee\u8986\u76d6\u5f53\u524d\u533a\u95f4\u7684\u540e\u7f00\u3001\u8be5\u8be2\u95ee\u88ab\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u5305\u542b\u3002\u5982\u679c\u5f53\u524d\u533a\u95f4\u5b8c\u5168\u88ab\u4e00\u4e2a\u8be2\u95ee\u5305\u542b\uff0c\u5219\u4e0d\u9700\u8981\u7ef4\u62a4\u8fd9\u4e2a\u8be2\u95ee\uff0c\u53ea\u9700\u8981\u5728\u5f53\u524d\u8fd9\u4e00\u5c42\u7684\u4fe1\u606f\u8ba1\u7b97\u51fa\u6765\u4e4b\u540e\u76f4\u63a5\u8d21\u732e\u5230\u8be5\u8be2\u95ee\u7684\u7b54\u6848\u4e2d\u5373\u53ef\u3002\u5728\u4ece\u8fd9\u4e2a\u70b9\u5f80\u4e0b\u9012\u5f52\u4e4b\u524d\uff0c\u9700\u8981\u6839\u636e\u5f53\u524d\u70b9\u4e0a\u7684\u8be2\u95ee\u6c42\u51fa\u4e24\u4e2a\u513f\u5b50\u4e0a\u7684\u8be2\u95ee\u3002\u7531\u4e8e\u524d\u4e24\u7c7b\u8be2\u95ee\u5728\u5f80\u4e0b\u4f20\u9012\u7684\u65f6\u5019\u6700\u591a\u53ea\u4f1a\u4f20\u9012\u5230\u4e00\u4e2a\u513f\u5b50\u4e0a\uff0c\u800c\u7b2c\u4e09\u7c7b\u8be2\u95ee\u4e5f\u6700\u591a\u53ea\u4f1a\u5728\u67d0\u4e2a\u70b9\u4e0a\u5206\u88c2\u4e00\u6b21\uff0c\u5411\u5de6\u513f\u5b50\u5206\u88c2\u51fa\u4e00\u4e2a\u7b2c\u4e8c\u7c7b\u8be2\u95ee\uff0c\u5411\u53f3\u513f\u5b50\u5206\u88c2\u51fa\u4e00\u4e2a\u7b2c\u4e00\u7c7b\u8be2\u95ee\uff0c\u6545\u6bcf\u4e2a\u8be2\u95ee\u6700\u591a\u53ea\u4f1a\u5728\u6240\u6709\u94fe\u8868\u4e2d\u51fa\u73b0\u4e24\u6b21\uff0c\u603b\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n)$ \u4e86\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define SZ(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define loop(i, a) for (int i = 0; i < (a); ++i)\n#define cont(i, a) for (int i = 1; i <= (a); ++i)\n#define circ(i, a, b) for (int i = (a); i <= (b); ++i)\n#define range(i, a, b, c) for (int i = (a); (c) > 0 ? i <= (b) : i >= (b); i += (c))\n#define parse(it, x) for (auto &it : (x))\n#define pub push_back\n#define pob pop_back\n#define emb emplace_back\n#define mak make_pair\n#define mkt make_tuple\ntypedef long long ll;\ntypedef long double lf;\nconst int Inf = 0x3f3f3f3f;\nconst ll INF = 0x3f3f3f3f3f3f3f3fll;\n \nconst int maxn = 600005, maxm = maxn << 2;\n \nconst int Maxn = 1 << 20;\nchar buff[Maxn + 1];\nint buff_id = Maxn;\n \nchar inline gech() {\n    if (buff_id == Maxn) {\n        buff_id = 0;\n        fread(buff, 1, Maxn, stdin);\n    }\n    return buff[buff_id++];\n}\n \nint inline readint() {\n    char ch = 233;\n    int res = 0, foo = 0;\n    while(ch != '-' && (ch < '0' || ch > '9')) ch = gech();\n    if (ch == '-') foo = 1, ch = gech();\n    while(ch >= '0' && ch <= '9') {\n        res = (res << 3) + (res << 1) + (ch & 15);\n        ch = gech();\n    }\n    return foo ? -res : res;\n}\n \nvoid inline floosh() {\n    fwrite(buff, 1, buff_id, stdout);\n    buff_id = 0;\n}\n \nvoid inline puch(char ch) {\n    if (buff_id == Maxn) floosh();\n    buff[buff_id++] = ch;\n}\n \nvoid inline writeint(ll x) {\n    static char ds[20];\n    int len = 0;\n    if (!x) ds[len++] = '0';\n    while (x) ds[len++] = x % 10 + '0', x /= 10;\n    reverse(ds, ds + len);\n    loop(i, len) puch(ds[i]);\n}\n \nstruct Query {\n    int l, r, id, tp;\n    ll d;\n} q[maxm];\n \nstruct Point {\n        int x; ll y;\n        Point() : x(0), y(0) {}\n        Point(ll x, ll y) : x(x), y(y) {}\n        Point inline operator + (const Point &p) const { return Point(x + p.x, y + p.y); }\n        Point inline operator - (const Point &p) const { return Point(x - p.x, y - p.y); }\n        ll inline operator * (const Point &p) const { return x * p.y - y * p.x; }\n        ll inline operator % (const Point &p) const { return x * p.x + y * p.y; }\n    bool operator < (const Point &p) const { return y * p.x > x * p.y; }\n};\n \nstruct Hull {\n    vector<Point> ps;\n    int ptr;\n    Hull() : ptr(0) {}\n    void init() { ps.clear(); ps.emb(0, 0); }\n    void init(Point p) { ps.clear(); ps.emb(0, 0); ps.pub(p); }\n    void inline append(Point p) {\n        while(SZ(ps) > 1 && (ps[SZ(ps) - 2] - ps.back()) * (p - ps.back()) <= 0) ps.pob();\n        ps.pub(p);\n    }\n    void inline merge(const Hull &h) {\n        vector<Point> x1, x2;\n        cont(i, SZ(ps) - 1) x1.pub(ps[i] - ps[i - 1]);\n        cont(i, SZ(h.ps) - 1) x2.pub(h.ps[i] - h.ps[i - 1]);\n        init();\n        int pt1 = 0, pt2 = 0;\n        Point pre(0, 0);\n        while (pt1 < SZ(x1) && pt2 < SZ(x2)) {\n            if (x1[pt1] < x2[pt2]) ps.pub(pre = pre + x1[pt1++]);\n            else ps.pub(pre = pre + x2[pt2++]);\n        }\n        while (pt1 < SZ(x1)) ps.pub(pre = pre + x1[pt1++]);\n        while (pt2 < SZ(x2)) ps.pub(pre = pre + x2[pt2++]);\n    }\n    void inline chmax(const Hull &h) {\n        vector<Point> pts; ps.swap(pts);\n        int pt1 = 0, pt2 = 0;\n        while (pt1 < SZ(pts) && pt2 < SZ(h.ps)) {\n            if (pts[pt1].x < h.ps[pt2].x) append(pts[pt1++]);\n            else append(h.ps[pt2++]);\n        }\n        while (pt1 < SZ(pts)) append(pts[pt1++]);\n        while (pt2 < SZ(h.ps)) append(h.ps[pt2++]);\n    }\n    ll inline getval(ll k) {\n        while (ptr < SZ(ps) - 1 && k * (ps[ptr].x - ps[ptr + 1].x) + ps[ptr].y < ps[ptr + 1].y) ++ptr;\n        return k * ps[ptr].x + ps[ptr].y;\n    }\n};\n \nstruct Answer {\n    ll pre, suf, mxs, sum;\n    Answer operator + (const Answer &a) {\n        return Answer{max(pre, sum + a.pre), max(a.suf, suf + a.sum), max(max(mxs, a.mxs), suf + a.pre), sum + a.sum};\n    }\n} ansl[maxn], ansr[maxn];\n \nint n, m, qs;\nint a[maxn];\nint hd[maxm], tl[maxm], nxt[maxm];\nbool is[maxn];\n \nstruct Node {\n    ll sum;\n    Hull pre, suf, mxs;\n};\n \nvoid inline inst(int a, int x) {\n    if (hd[a]) nxt[tl[a]] = x, tl[a] = x;\n    else hd[a] = tl[a] = x;\n}\n \nvoid inline merge(int h1, int h2, int to) {\n    hd[to] = 0;\n    while (h1 && h2) {\n        if (q[h1].d < q[h2].d) inst(to, h1), h1 = nxt[h1];\n        else inst(to, h2), h2 = nxt[h2];\n    }\n    while (h1) inst(to, h1), h1 = nxt[h1];\n    while (h2) inst(to, h2), h2 = nxt[h2];\n}\n \nNode solve(int now, int nl, int nr) {\n    if (nl == nr) {\n        Hull r1, r2, r3;\n        r1.init(Point(1, a[nl]));\n        r2.init(Point(1, a[nl]));\n        r3.init(Point(1, a[nl]));\n        return Node{a[nl], r1, r2, r3};\n    }\n    int m = (nl + nr) >> 1;\n    for (int i = hd[now]; i; i = nxt[i]) {\n        if (!q[i].tp) {\n            if (q[i].l <= m && q[i].r > m) {\n                q[i].tp = 1; q[++qs] = q[i];\n                q[qs].tp = 2;\n                inst(now << 1, i);\n                inst(now << 1 | 1, qs);\n            }\n            else if (q[i].l <= m) inst(now << 1, i);\n            else inst(now << 1 | 1, i);\n        }\n        else if (q[i].tp == 1) q[i].l <= m ? inst(now << 1, i) : inst(now << 1 | 1, i);\n        else q[i].r > m ? inst(now << 1 | 1, i) : inst(now << 1, i);\n    }\n    nxt[tl[now << 1]] = nxt[tl[now << 1 | 1]] = 0;\n    Node ln = solve(now << 1, nl, m), rn = solve(now << 1 | 1, m + 1, nr);\n    for (int i = hd[now << 1]; i; i = nxt[i]) if (q[i].tp == 1 && q[i].r > nr) {\n        ansl[q[i].id] = ansl[q[i].id] + Answer{rn.pre.getval(q[i].d), rn.suf.getval(q[i].d), rn.mxs.getval(q[i].d), rn.sum + q[i].d * (nr - m)};\n    }\n    for (int i = hd[now << 1 | 1]; i; i = nxt[i]) if (q[i].tp == 2 && q[i].l < nl) {\n        ansr[q[i].id] = Answer{ln.pre.getval(q[i].d), ln.suf.getval(q[i].d), ln.mxs.getval(q[i].d), ln.sum + q[i].d * (m - nl + 1)} + ansr[q[i].id];\n    }\n    merge(hd[now << 1], hd[now << 1 | 1], now);\n    Hull r1, r2, r3;\n    loop(i, SZ(ln.pre.ps)) r1.ps.pub(ln.pre.ps[i]);\n    cont(i, SZ(rn.pre.ps) - 1) r1.append(rn.pre.ps[i] + Point(m - nl + 1, ln.sum));\n    loop(i, SZ(rn.suf.ps)) r2.ps.pub(rn.suf.ps[i]);\n    cont(i, SZ(ln.suf.ps) - 1) r2.append(ln.suf.ps[i] + Point(nr - m, rn.sum));\n    Hull tmp = ln.mxs; tmp.chmax(rn.mxs);\n    r3 = ln.suf;\n    r3.merge(rn.pre);\n    r3.chmax(tmp);\n    r3.ptr = 0;\n    return Node{ln.sum + rn.sum, r1, r2, r3};\n}\n \nint main() {\n    n = readint(); m = readint();\n    cont(i, n) a[i] = readint();\n    ll ad = 0;\n    cont(i, m) {\n        int mode = readint();\n        if (mode == 1) {\n            int x = readint();\n            ad += x;\n        }\n        else {\n            int l, r; l = readint(); r = readint();\n            q[++qs] = Query{l - 1, r + 1, i, 0, ad};\n            is[i] = 1;\n        }\n    }\n    sort(q + 1, q + qs + 1, [&] (const Query &a, const Query &b) { return a.d < b.d; });\n    hd[1] = 1; tl[1] = qs;\n    cont(i, qs - 1) nxt[i] = i + 1;\n    solve(1, 0, n + 1);\n    buff_id = 0;\n    cont(i, m) if (is[i]) writeint((ansl[i] + ansr[i]).mxs), puch('\\n');\n    floosh();\n    return 0;\n}\n```",
        "postTime": 1623116408,
        "uid": 60845,
        "name": "Acetyl",
        "ccfLevel": 9,
        "title": "P5073 [Ynoi2015] \u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69 \u9898\u89e3"
    },
    {
        "content": "**P5073**\u9898\u89e3\u3002\n\n\u611f\u89c9\u96be\u70b9\u5728\u4e8e\u5361\u5e38\u548c\u5361\u7a7a\u95f4\u3002\n\n\u9996\u5148\u4e00\u4e2a\u5f88\u6709\u75c5\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u6211\u5361\u5e38\u751a\u81f3\u57fa\u56e0\u5bf9\u7167\u5230\u8981\u5361\u5230 getchar\uff0c\u6ca1\u60f3\u5230\u5427\uff0c\u7a7a\u95f4\u65f6\u95f4\u7a0d\u5fae\u5927\u4e00\u70b9\u5c31\u8fc7\u4e0d\u53bb\u4e86\uff0c\u6240\u4ee5\u8111\u762b\u3002\n\n\u6211\u4eec\u90fd\u77e5\u9053\u6734\u7d20\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u56db\u5143 tuple $(sum,lmax,rmax,mx)$ \u5373\u533a\u95f4\u548c\uff0c\u533a\u95f4\u6700\u5927\u524d\u7f00\uff0c\u533a\u95f4\u6700\u5927\u540e\u7f00\uff0c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5408\u5e76\u4e24\u4e2a\u533a\u95f4\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nstruct tuple\n{\n\tlong long sum,lmax,rmax,mx;\n\ttuple(){sum = lmax = rmax = mx = 0;}\n\ttuple(long long SUM,long long LMAX,long long RMAX,long long MX){sum = SUM , lmax = LMAX , rmax = RMAX , mx = MX;}\n\ttuple operator + (const tuple &R) const\n\t{\n\t\ttuple z;\n\t\tz.sum = (sum + R.sum);\n\t\tz.lmax = max(lmax , sum + R.lmax);\n\t\tz.rmax = max(R.rmax , R.sum + rmax);\n\t\tz.mx = max(mx , R.mx , rmax + R.lmax);\n\t\treturn z;\n\t}\n};\n```\n\u8003\u8651\u5230\u5168\u5c40\u52a0\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684\u8d21\u732e\u4ec5\u7528\u6570\u7684\u6570\u91cf\uff0c\u533a\u95f4\u548c\u4e24\u4e2a\u91cf\u6765\u523b\u753b\uff0c\u6295\u5f71\u5230\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5206\u522b\u8bb0\u4f5c\u7b2c\u4e00\u7ef4\u548c\u7b2c\u4e8c\u7ef4\uff0c\u5219\u4e00\u4e2a\u533a\u95f4\u5bf9\u5e94\u4e00\u4e2a\u70b9\u3002\n\n\u533a\u95f4\u6700\u5927\u548c\u6734\u7d20\u505a\uff0c\u5bf9\u4e8e\u533a\u95f4\u6700\u5927\u524d\u7f00\uff0c\u533a\u95f4\u6700\u5927\u540e\u7f00\uff0c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u6211\u4eec\u90fd\u662f\u76f8\u5f53\u4e8e\u7ed9\u5b9a\u4e00\u4e2a\u6570 $k$\uff0c\u4ece\u4e00\u4e2a\u70b9\u96c6\u91cc\u9762\u9009\u4e00\u4e2a\u70b9 $(x,y)$ \u51fa\u6765\u95ee\u6700\u5927\u7684 $kx + y$\u3002\n\n\u628a\u70b9\u6362\u6210\u76f4\u7ebf\u7cfb\u6570\u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u672c\u8d28\u5c31\u662f\u51f8\u58f3\u7684\u76f8\u5173\u5f62\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u8fd9\u4e09\u4e2a\u4fe1\u606f\u4e0b\u638c\u7ba1\u7684\u70b9\u96c6\u5bf9\u5e94\u7684\u51f8\u58f3\u5c31\u597d\u4e86\u3002\n\n\u5bf9\u4e8e\u524d\u7f00\u4fe1\u606f\u548c\u540e\u7f00\u4fe1\u606f\uff0c\u672c\u8d28\u5c31\u662f\u4e24\u4e2a\u51f8\u5305\u76f4\u63a5\u5408\u5e76\uff0c\u5728\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u5408\u5e76\u5c31\u597d\u4e86\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u4fe1\u606f\uff0c\u53d1\u73b0\u4e2d\u95f4\u6709\u4e00\u4e2a```rmax + R.lmax```\uff0c\u6240\u6709\u70b9\u90fd\u9700\u8981\u8d21\u732e\u4e00\u4e2a\u548c\u53e6\u4e00\u4e2a\u51f8\u5305\u7684\u70b9\u76f8\u52a0\u5f97\u5230\u7684\u65b0\u7684\u70b9\uff0c\u8fd9\u4e2a\u4e1c\u897f\u672c\u8d28\u5c31\u662f\u95f5\u53ef\u592b\u65af\u57fa\u548c\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5408\u5e76\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u4e00\u9053\u4e2a\u4eba\u5f53\u6210\u6a21\u677f\u9898\u5199\u7684\u95f5\u53ef\u592b\u65af\u57fa\u548c\u7684[\u9898\u76ee](https://www.luogu.com.cn/problem/P4557)\u3002\n\n\u7136\u540e\u5c31\u662f\u6700\u56f0\u96be\u7684\u5361\u5e38\u2026\u2026\n\n\u5bf9\u4e8e\u5408\u5e76\u51f8\u5305\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7531\u4e8e\u4e00\u76f4\u4fdd\u8bc1\u5408\u51fa\u6765\u7684\u51f8\u5305\u6709\u5e8f\uff0c\u6240\u4ee5\u6bcf\u6b21\u5408\u5e76\u90fd\u662f $O(|V|)$\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n \\log n)$\u3002\n\n\u5bf9\u4e8e\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u79bb\u7ebf\u4e0b\u6765\u6302\u5230\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0a\uff0c\u505a\u53cc\u6307\u9488\u5c31\u53c8\u7701\u4e86\u4e8c\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u7b2c\u5c31\u662f $O(q \\log n)$\u3002\n\n\u5bf9\u4e8e\u51f8\u5305\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u5f97\u6309\u6df1\u5ea6\u4ece\u4e0b\u81f3\u4e0a\u5904\u7406\u8be2\u95ee\uff0c\u6bcf\u6b21\u56de\u7b54\u5b8c\u4e00\u4e2a\u8282\u70b9\u7684\u8be2\u95ee\u5c31\u6254\u4e86\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f $O(n)$ \u4e86\u3002\u5b9e\u73b0\u5efa\u8bae\u5199\u6210\u51fd\u6570\u8fd4\u56de\u51f8\u5305\uff0c\u6bd4\u8f83\u65b9\u4fbf\u3002\n\n\u5bf9\u4e8e\u8be2\u95ee\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u9996\u5148\u5f97\u7528\u5230\u4e00\u4e2a\u6027\u8d28\u5c31\u662f\u6211\u4eec\u7ef4\u62a4\u7684\u4e1c\u897f\u5177\u6709\u7ed3\u5408\u5f8b\u4e0d\u5177\u6709\u4ea4\u6362\u5f8b\uff0c\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u5f00\u4e24\u4e2a\u6570\u7ec4\uff0c\u5b58\u50a8\u5de6\u534a\u4fe1\u606f\u548c\u53f3\u534a\u4fe1\u606f\uff0c\u6700\u540e\u628a\u4e24\u90e8\u5206\u7b54\u6848\u7b97\u5728\u4e00\u8d77\u5c31\u662f\u603b\u7b54\u6848\uff0c\u8fd9\u4e48\u505a\u7684\u539f\u7406\u662f\u6211\u4eec\u603b\u80fd\u5bf9\u4efb\u610f\u8be2\u95ee $(l,r)$ \u5728\u7ebf\u6bb5\u6811\u4e0a\u627e\u5230\u4e00\u4e2a\u8282\u70b9 $(L,R,mid)$ \u6ee1\u8db3 $l \\leq mid$ \u4e14 $r > mid$\uff0c\u7136\u540e\u4ece\u8fd9\u4e2a\u8282\u70b9\u4e0b\u53bb\u7684\u5de6\u5b50\u6811\u91cc\uff0c\u88ab\u8be2\u95ee\u5b8c\u5168\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u6df1\u5ea6\u4ece\u5de6\u5230\u53f3\u79f0\u9012\u51cf\uff1b\u4ece\u8fd9\u4e2a\u8282\u70b9\u4e0b\u53bb\u7684\u53f3\u5b50\u6811\u91cc\uff0c\u88ab\u8be2\u95ee\u5b8c\u5168\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u6df1\u5ea6\u4ece\u53f3\u5230\u5de6\u5448\u9012\u51cf\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u8fd9\u4e2a\u505a\u6cd5\u7684\u6b63\u786e\u6027\u3002\n\n\u6bd4\u8f83\u7b80\u5355\u7684\u5b9e\u73b0\u662f\u7528\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u8be5\u5206\u7684\u65f6\u5019\u5206\u5f00\u4e0b\u653e\u5230\u5b50\u6811\u7684\u94fe\u8868\u7cfb\u91cc\u9762\u53bb\uff0c\u6bcf\u6b21\u9012\u5f52\u5904\u7406\u5b50\u6811\u8fc7\u540e\u628a\u8be2\u95ee\u4ece\u5b50\u6811\u7684\u94fe\u8868\u7cfb\u91cc\u9762\u62ff\u51fa\u6765\u5411\u4e0a\u5408\u5e76\u7136\u540e\u518d\u67e5\u5c31\u597d\u4e86\u3002\n\n\u6700\u540e\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $O((n + q) \\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u7ebf\u6027\u3002\n\n\u5f88\u5361\u5e38\uff0c\u5f88\u5361\u5e38\uff0c\u5f88\u5361\u5e38\u3002\u5f88\u5361\u7a7a\u95f4\uff0c\u5f88\u5361\u7a7a\u95f4\uff0c\u5f88\u5361\u7a7a\u95f4\u3002\u5efa\u8bae\u8c03\u4e0d\u51fa\u6765\u5c31\u57fa\u56e0\u5bf9\u7167\u5427\uff0c\u6446\u3002",
        "postTime": 1654155630,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u552f\u523b\u9aa8\u94ed\u5fc3\u7684\u601d\u5ff5\uff0c\u4f59\u97f3\u7ed5\u6881\u4e0d\u7edd\u4e8e\u8033"
    },
    {
        "content": "\u7ed9 shadowice \u5927\u4ed9\u7684\u9898\u89e3\u505a\u4e00\u4e9b\u5fae\u5c0f\u7684\u8865\u5145\n\n\u4f9d\u8d56\u4e8e\u6781\u89d2\u6392\u5e8f\u7684\u51f8\u5305\u6784\u5efa\u65b9\u6cd5\u9700\u8981 $O(nlogn)$ \u8fdb\u884c\u6392\u5e8f\uff0c\u5219\u603b\u590d\u6742\u5ea6 $T(n)=2T(\\frac{n}{2})+2O(nlogn)=O(nlog^2n)$ \u662f\u8fc7\u4e0d\u53bb\u7684\uff0c\u53ea\u80fd\u4f7f\u7528\u6392\u5e8f\u540e $O(n)$ \u7684 Jarris \u6b65\u8fdb\u6cd5\u3002\n\n\u6b63\u5e38\u60c5\u51b5\u4e0b\u95f5\u53ef\u592b\u65af\u57fa\u548c\u8dd1\u51fa\u6765\u7684\u51f8\u5305\u4e0d\u4e00\u5b9a\u662f\u6309\u7167 $x$ \u5750\u6807\u5927\u5c0f\u7684\u987a\u5e8f\u7684\uff0c\u8fd9\u65f6\u53ef\u4ee5\u901a\u8fc7 $x$ \u5750\u6807\u5b9e\u9645\u542b\u4e49\uff08\u957f\u5ea6\uff09\u5f97\u5230 $x$ \u7684\u8303\u56f4\uff0c\u7c7b\u4f3c\u4e8e\u57fa\u6570\u6392\u5e8f\u3002\n\n\u6ce8\u610f\u5230\u8fd9\u9898\u51f8\u5305\u7684\u5b9e\u9645\u542b\u4e49\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u4e0a\u51f8\u58f3\u5373\u53ef\u3002\n\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=3e5+2,M=1.2e6+2,K=20,O=6e5+2;\nconst ll inf=-9e18;\nstruct Q\n{\n\tint z,y,wz;\n\tll tot;\n\tbool operator<(Q &o) {return tot<o.tot;}\n};\nstruct pt\n{\n\tint x;\n\tll y;\n\tpt(int a=0,ll b=inf):x(a),y(b){}\n\tbool operator<(register pt o) {return ((ll)x*o.y<(ll)y*o.x)||((ll)x*o.y==(ll)y*o.x)&&(x+y<o.x+o.y);}//\u987a\u65f6\u9488\n\tpt operator+(register pt &o) {return pt(x+o.x,y+o.y);}\n\tpt operator-(register pt &o) {return pt(x-o.x,y-o.y);}\n\tll operator*(register pt o) {return (ll)x*o.y-(ll)y*o.x;}\n\tvoid operator+=(register pt &o) {x+=o.x;y+=o.y;}\n\tvoid operator-=(register pt &o) {x-=o.x;y-=o.y;}\n};\nQ q[O];\nll lz,na,lans;\npt sl[K][N],sr[K][N],ss[K][N];\npt st[N],la[N],lb[N],snc[M],lnc[M],rnc[M],o,p;\nll a[N],ans[O],sa[N],ts[M];\nint l[M],r[M],cs[M],lcd[M],rcd[M],scd[M],syd[M],lyd[M],ryd[M];\nint n,m,qs,c,fh,i,x,y,z;\ninline void mx(register ll &x,const ll y)\n{\n\tif (x<y) x=y;\n}\ninline void read(int &x)\n{\n\tc=getchar();fh=1;\n\twhile ((c<48)||(c>57)) \n\t{\n\t\tif (c=='-') {c=getchar();fh=-1;break;}\n\t\tc=getchar();\n\t}\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n\tx*=fh;\n}\nvoid tb(register pt *a,int pre,register int &n)\n{\n\tregister int i,tp=pre;\n\tfor (i=tp+1;i<=n;i++)\n\t{\n\t\twhile (tp)\n\t\t{\n\t\t\tif (a[tp].y<=a[i].y) --tp;\n\t\t\telse if ((tp>1)&&(a[i]-a[tp-1]<a[tp]-a[tp-1])) --tp;\n\t\t\telse break;\n\t\t}\n\t\ta[++tp]=a[i];\n\t}\n\tn=tp;\n}\nvoid maintain(register pt *a,const int n,const int m)\n{\n\tregister int i;\n\tfor (i=m;i>n;i--) a[a[i].x=i].y=inf;\n\tfor (i=n;i;i--) {a[a[i].x]=a[i];a[a[i].x=i].y=inf;}\n}\nvoid spemaintain(register pt *a,const int n,const int m)\n{\n\tregister int tp=0,i;\n\tfor (i=1;i<=m;i++) st[st[i].x=i].y=inf;\n\tfor (i=1;i<=n;i++) mx(st[a[i].x].y,a[i].y);\n\tmemcpy(a+1,st+1,m*sizeof(pt));\n}\nint order(register pt *a,register int n)\n{\n\tregister int i=1,tp=0;\n\tfor (i=1;i<=n;i++) if (a[i].y>inf) a[++tp]=a[i];\n\ttb(a,1,tp);return tp;\n}\nint sum(pt *a,pt *b,pt *c,int n,int m,int len)//a+b=c\n{\n\tint i,j,tp=2;\n\tc[1]=a[1]+b[1];\n\tfor (i=1;i<n;i++) la[i]=a[i+1]-a[i];la[n]=a[1]-a[n];\n\tfor (i=1;i<m;i++) lb[i]=b[i+1]-b[i];lb[m]=b[1]-b[m];\n\tfor (i=j=1;(i<=n)||(j<=m);++tp) {if ((j>m)||(i<=n)&&(la[i]<lb[j])) c[tp]=c[tp-1]+la[i++]; else c[tp]=c[tp-1]+lb[j++];}\n\t--tp;spemaintain(c,tp,len);tp=order(c,len);tb(c,1,tp);return tp;\n}\nvoid build(int x)\n{\n\tlyd[x]=ryd[x]=syd[x]=1;\n\tif (l[x]==r[x])\n\t{\n\t\tlcd[x]=rcd[x]=scd[x]=1;sl[cs[x]][l[x]]=sr[cs[x]][l[x]]=ss[cs[x]][l[x]]=pt(1,ts[x]=a[l[x]]);\n\t\treturn;\n\t}\n\tl[c=x<<1]=l[x];r[c]=l[x]+r[x]>>1;\n\tl[c|1]=r[c]+1;r[c|1]=r[x];\n\tcs[c]=cs[c|1]=cs[x]+1;\n\tbuild(c);build(x<<1|1);c=x<<1;\n\tscd[x]=sum(sr[cs[c]]+l[c]-1,sl[cs[c]]+l[c|1]-1,ss[cs[x]]+l[x]-1,rcd[c],lcd[c|1],r[x]-l[x]+1);\n\tmaintain(ss[cs[x]]+l[x]-1,scd[x],r[x]-l[x]+1);\n\tfor (register int i=0;i<scd[c];i++) mx(ss[cs[x]][l[x]+ss[cs[c]][l[c]+i].x-1].y,ss[cs[c]][l[c]+i].y);\n\tmemcpy(sl[cs[x]]+l[x],sl[cs[c]]+l[c],lcd[c]*sizeof(pt));lcd[x]=lcd[c];\n\tfor (register int i=l[c|1];i<=r[x];i++) sl[cs[x]][l[x]+(lcd[x]++)]=pt(i-l[x]+1,sa[i]-sa[l[x]-1]);\n\ttb(sl[cs[x]]+l[x]-1,lcd[c],lcd[x]);c|=1;\n\tfor (register int i=0;i<scd[c];i++) mx(ss[cs[x]][l[x]+ss[cs[c]][l[c]+i].x-1].y,ss[cs[c]][l[c]+i].y);\n\tscd[x]=order(ss[cs[x]]+l[x]-1,r[x]-l[x]+1);\n\tmemcpy(sr[cs[x]]+l[x],sr[cs[c]]+l[c],rcd[c]*sizeof(pt));rcd[x]=rcd[c];\n\tfor (register int i=r[c^1];i>=l[x];i--) sr[cs[x]][l[x]+(rcd[x]++)]=pt(r[x]-i+1,sa[r[x]]-sa[i-1]);\n\ttb(sr[cs[x]]+l[x]-1,rcd[c],rcd[x]);\n\tsnc[x]=ss[cs[x]][l[x]+1]-ss[cs[x]][l[x]];lnc[x]=sl[cs[x]][l[x]+1]-sl[cs[x]][l[x]];\n\trnc[x]=sr[cs[x]][l[x]+1]-sr[cs[x]][l[x]];ts[x]=ts[c]+ts[c^1];\n}\nvoid sol(int x)\n{\n\tif ((z<=l[x])&&(r[x]<=y))\n\t{\n\t\twhile ((syd[x]<scd[x])&&(lz*snc[x].x+snc[x].y>0)) {++syd[x];snc[x]=ss[cs[x]][l[x]+syd[x]]-ss[cs[x]][l[x]+syd[x]-1];}\n\t\twhile ((lyd[x]<lcd[x])&&(lz*lnc[x].x+lnc[x].y>0)) {++lyd[x];lnc[x]=sl[cs[x]][l[x]+lyd[x]]-sl[cs[x]][l[x]+lyd[x]-1];}\n\t\twhile ((ryd[x]<rcd[x])&&(lz*rnc[x].x+rnc[x].y>0)) {++ryd[x];rnc[x]=sr[cs[x]][l[x]+ryd[x]]-sr[cs[x]][l[x]+ryd[x]-1];}\n\t\tmx(na,max(ss[cs[x]][l[x]+syd[x]-1].x*lz+ss[cs[x]][l[x]+syd[x]-1].y,lans+sl[cs[x]][l[x]+lyd[x]-1].x*lz+sl[cs[x]][l[x]+lyd[x]-1].y));\n\t\tlans=max(lans+lz*(r[x]-l[x]+1)+ts[x],sr[cs[x]][l[x]+ryd[x]-1].x*lz+sr[cs[x]][l[x]+ryd[x]-1].y);\n\t\treturn;\n\t}\n\tif (z<=r[x<<1]) sol(x<<1);\n\tif (y>r[x<<1]) sol(x<<1|1);\n}\nint main()\n{\n\tread(n);read(m);\n\tfor (i=1;i<=n;i++) {read(x);a[i]=x;}\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tread(x);\n\t\tif (x==1) {read(y);lz+=y;}\n\t\telse {read(q[++qs].z);read(q[q[qs].wz=qs].y);q[qs].tot=lz;}\n\t}m=qs;\n\tsort(q+1,q+m+1);\n\tfor (i=1;i<=n;i++) a[i]+=q[1].tot;\n\tfor (i=1;i<=n;i++) sa[i]=sa[i-1]+a[i];\n\tfor (i=2;i<=m;i++) q[i].tot-=q[1].tot;q[1].tot=0;\n\tr[l[1]=1]=n;build(1);\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tlans=na=0;z=q[i].z;y=q[i].y;lz=q[i].tot;\n\t\tsol(1);\n\t\tans[q[i].wz]=na;\n\t}\n\tfor (i=1;i<=m;i++) printf(\"%lld\\n\",ans[i]);\n}\n```",
        "postTime": 1601830813,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5073 \u3010[Ynoi2015]\u4e16\u4e0a\u6700\u5e78\u798f\u7684\u5973\u5b69\u3011"
    }
]