[
    {
        "content": "* \u8fd9\u662f\u6211\u6700\u540e\u4e00\u6b21\u4ea4\u9898\u89e3\uff0c\u4ea4\u9898\u89e3\u7eaf\u5c5e\u56e0\u4e3a\u9898\u89e3\u533a\u6839\u672c\u6ca1\u6709\u6b63\u786e\u7684\u8bc1\u660e\uff0c\u5b9e\u5728\u662f\u61d2\u5f97\u6539\u4ec0\u4e48 Latex \u4e86\uff0c\u7231\u8fc7\u4e0d\u8fc7\u5427\u3002\r\n\r\n\u611f\u89c9\u8fd9\u9898\u975e\u5e38\u795e\u4ed9\uff0c\u9898\u89e3\u533a\u51e0\u4e4e\u6ca1\u6709\u4ee4\u4eba\u6ee1\u610f\u7684 \u201c\u5dee\u5206\u5efa\u56fe\u201d \u6b63\u786e\u6027\u7684\u8bc1\u660e\uff0c\u611f\u8c22 @p_b_p_b \u548c @\u7cbe\u795e\u5c0f\u706b \u6307\u5bfc\u3002\r\n\r\n\u5148\u7528\u4e00\u4e9b\u5957\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u628a\u86cb\u7cd5\u51fa\u73b0\u7684\u65f6\u95f4\u79bb\u6563\u5316\uff0c\u628a\u8001\u9f20\u5206\u6210\u82e5\u5e72\u4e2a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u3002\r\n\r\n\u6b64\u65f6\u552f\u4e00\u7684\u95ee\u9898\u662f \u600e\u4e48\u89e3\u51b3\u4e0d\u80fd\u8ba9\u5f88\u591a\u8001\u9f20\u540c\u65f6\u5403\u4e00\u4e2a\u86cb\u7cd5\u3002\r\n\r\n\u9996\u5148\u8003\u8651\u4e00\u4e2a\u7ed3\u8bba \uff1a \u5728\u6240\u6709\u5976\u916a\u80fd\u88ab\u5403\u7684\u65f6\u95f4\u76f8\u7b49\u7684\u60c5\u51b5\u4e0b\uff0c\u8bbe\u4ed6\u4eec\u80fd\u5403\u7684\u65f6\u95f4\u662f $time$ \uff0c \u6211\u4eec\u628a\u8001\u9f20\u6309\u901f\u5ea6 $v$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5976\u916a\u4ece\u5927\u5230\u5c0f\u6309 $p$ \u6392\u5e8f\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8001\u9f20\u53ef\u4ee5\u6309\u7167\u9898\u76ee\u8981\u6c42\u5403\u6389\u8fd9\u4e9b\u5976\u916a\uff0c\u5f53\u4e14\u4ec5\u5f53 $\\forall i , time (\\sum_{j=1} ^i v_j) \\geq \\sum_{j=1}^i p_j$ \u3002\r\n\r\n\u8003\u8651\u5982\u679c\u8fd9\u4e2a\u7ed3\u8bba\u6210\u7acb\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u5efa\u56fe\uff0c \u5148\u628a $v$ \u6309\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\r\n\r\n$\\sum_{j=1}^i v_j=\\sum_{j=1}^i \\sum_{k=j}^i(v_k-v_{k+1}) = \\sum_{k=1}^i (v_k - v_{k+1}) \\times k $\r\n\r\n\u6211\u4eec\u628a\u4e00\u4e2a\u70b9\u7684\u610f\u4e49\u8bbe\u7f6e\u4e3a $v_k-v_{k+1}$ \uff0c\u4ece\u8fd9\u4e2a\u70b9\u5411\u6bcf\u4e2a\u5976\u916a\u8fde $(v_k-v_{k+1}) \\times time$ \uff0c\u539f\u70b9\u5411\u7b2c $k$ \u4e2a\u70b9\u8fde $k \\times (v_k-v_{k+1}) \\times time$ \u3002\r\n\r\n\u6b64\u65f6\uff0c\u8003\u8651\u4e00\u79cd\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u7ed3\u8bba\u7684\u5976\u916a\uff0c\u5047\u8bbe\u524d $t$ \u7684\u65f6\u5019\u4ed6\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u5728\u8fd9 $t$ \u4e2a\u7684\u65f6\u5019\uff0c\u6240\u6709\u70b9\u5411\u8fd9\u524d $t$ \u4e2a\u70b9\u7684\u96c6\u5408\u8fde\u7684\u603b\u6d41\u91cf\u662f $\\sum_{i=1}^n (v_{i}-v_{i+1}) \\times \\min(i,t)=\\sum_{i=1}^t v_i$ \uff0c\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\u3002\r\n\r\n\r\n\u518d\u6765\u8003\u8651\u7ed3\u8bba\u7684\u6b63\u786e\u6027\uff0c\u53ef\u80fd\u7565\u5fae\u6709\u70b9\u62bd\u8c61\u3002\r\n\r\n\u8003\u8651\u5728\u53ef\u4ee5\u88ab\u65e0\u7ebf\u5212\u5206\u7684\u65f6\u95f4\u8f74\u4e0a\u4e00\u4e2a\u7c7b\u4f3c\u5f52\u7eb3\u7684\u8fc7\u7a0b\uff0c\u8bb0 $\\Delta$ \u4e3a\u6700\u5c0f\u7684\u65f6\u95f4\u5355\u4f4d\u3002\r\n\r\n\u9996\u5148\u660e\u786e\u4e00\u4e2a\u4e8b\u60c5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba9 $v_a$ \u5403 $\\Delta$ \u7684 $p_a$ , \u8ba9 $v_b$ \u5403 $\\Delta$ \u7684 $p_b$ \uff0c\u518d\u8ba9 $v_a$ \u5403 $\\Delta$ \u7684 $p_b$ , \u8ba9 $v_b$ \u5403 $\\Delta$ \u7684 $p_a$ \uff0c\u8fd9\u6837\u6211\u4eec\u8fbe\u5230\u4e86\u4e00\u4e2a\u76ee\u7684\uff1a\u8ba9\u4e24\u53ea $\\frac{v_a+v_b}{2}$ \u7684\u8001\u9f20\u5403\u4e86 $2 \\Delta$ \u7684 $p_a, p_b$ \u3002\r\n\r\n\u6269\u5c55\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u8c03\u6574 $\\Delta$ \u7684\u7cfb\u6570\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u5230\u628a\u8001\u9f20\u52a0\u6743\u5e73\u5747\u3002\r\n\r\n\u518d\u8003\u8651\u53bb\u5f52\u7eb3\uff0c\u5982\u679c $\\Delta$ \u4e4b\u540e\uff0c\u6240\u6709\u7684\u8001\u9f20\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u547d\u9898\u5c31\u5f97\u8bc1\u4e86\uff0c\u4e0b\u6587\u7684 $v_i, p_i$ \u90fd\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u4e4b\u540e\u7684\u3002\r\n\r\n\u6211\u4eec\u53ea\u9700\u8981\u8ba9 $v_i$ \u5403 $p_i$ $\\Delta$ \u7684\u65f6\u95f4\uff0c\u7136\u540e\u53bb\u52a0\u6743\u5e73\u5747\u8c03\u6574\u8fd9\u4e9b\u8001\u9f20\uff0c\u4f7f\u4ed6\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\uff0c \u6211\u4eec\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u8c03\u6574\uff1a\r\n\r\n\u628a $v_1$ \u548c $v_2$ \u52a0\u6743\u8c03\u6574\u4f7f\u5f97\u6070\u597d\u6ee1\u8db3 $v_1 \\times left \\geq p_1 , left$ \u662f\u5269\u4e0b\u7684\u65f6\u95f4\u3002\r\n\r\n\u518d\u628a $v_2$ \u548c $v_3$ \u52a0\u6743\u8c03\u6574\u4f7f\u5f97\u6070\u597d\u6ee1\u8db3 $v_2 \\times left \\geq p_2 , left$ \u662f\u5269\u4e0b\u7684\u65f6\u95f4\u3002\r\n\r\n\u4e0d\u65ad\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u4e00\u5b9a\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\r\n\r\n\u4e00\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\u662f $v_1,v_2$ \u65e0\u8bba\u5982\u4f55\u52a0\u6743\u90fd\u5927\u4e8e $p_1$ \uff0c\u6211\u4eec\u627e\u5230\u4ed6\u540e\u9762\u7b2c\u4e00\u4e2a\u53ef\u4ee5\u52a0\u6743\u6070\u597d\u7b49\u4e8e $p_1$ \u7684 $v_i$ \u7136\u540e\u8c03\u6574\u5373\u53ef\u3002",
        "postTime": 1656237499,
        "uid": 365246,
        "name": "YksKuusiTAlv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2570 [ZJOI2010]\u8d2a\u5403\u7684\u8001\u9f20"
    },
    {
        "content": "# \u5ba3\u4f20\n\u9996\u5148\u5ba3\u4f20\u4e00\u6ce2\uff1a[\u6211\u7684\u535a\u5ba2](https://www.cnblogs.com/CreeperLKF/p/9175053.html)\n# \u9898\u9762\n\u539f\u9898\u9762\u8fd8\u662f\u6bd4\u8f83\u7b80\u6d01\u7684\uff0c\u4e0d\u63cf\u8ff0\u4e86\n# \u9898\u89e3\n\u8fd9\u4efd\u9898\u89e3\u4e3b\u8981\u5728\u4e8e\u8bc1\u660e\uff0c\u89e3\u6cd5\u4e5f\u4f1a\u63d0\u5230\uff0c\u5982\u679c\u6709\u7591\u95ee\u53ef\u4ee5\u53c2\u8003\u5176\u5b83DL\u7684\u9898\u89e3\u3002 \n\n## \u4e8c\u5206\u7b54\u6848+\u6700\u5927\u6d41\n\n\u5efa\u56fe\u65b9\u5f0f\uff1a\n\n1. \u9996\u5148\u5bf9\u6240\u6709\u65f6\u95f4\u70b9\u79bb\u6563\u5316\uff0c\u8bb0\u4e24\u4e2a\u65f6\u95f4\u70b9\u4e4b\u95f4\u7684\u65f6\u95f4\u6bb5\u957f\u5ea6\u4e3a$tim$\uff0c\u7136\u540e\u628a\u8001\u9f20\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u6700\u540e\u52a0\u4e2a\u6570\u5b570\uff0c\u5dee\u5206\u5f97\u5230$m$\u4e2a\u5dee\u5206\u503c\uff0c\u8bb0\u4e3a$d$\uff0c\u4f9d\u6b21\u7f16\u53f7\u4e3a$1,2,3...$  \n1. \u5bf9\u5976\u916a\u5efa\u70b9\uff0c\u5bf9\u65f6\u95f4\u70b9\u95f4\u7684\u65f6\u95f4\u6bb5\u62c6\u70b9\uff0c\u62c6\u6210m\u4e2a\u8001\u9f20\u5dee\u5206\u503c  \n1. \u6e90\u70b9\u8fde\u5411\u5976\u916a\uff0c\u5bb9\u91cf *p*  \n1. \u5976\u916a\u8fde\u5411\u5976\u916a\u4fdd\u8d28\u671f\u5185\u7684\u65f6\u95f4\u6bb5\u7684\u8001\u9f20\u5dee\u5206\u70b9\uff0c\u5bb9\u91cf\u4e3a *\u8001\u9f20\u5dee\u5206\u503c$*$\u65f6\u95f4\u6bb5\u957f\u5ea6*  \n1. \u8001\u9f20\u5dee\u5206\u70b9\u8fde\u5411\u7ec8\u70b9\uff0c\u5bb9\u91cf\u4e3a *\u8001\u9f20\u5dee\u5206\u503c$*$\u65f6\u95f4\u6bb5\u957f\u5ea6$*$\u8001\u9f20\u5dee\u5206\u70b9\u7f16\u53f7\uff08\u6392\u5e8f\u540e\u4ece\u5927\u5230\u5c0f\uff09*  \n1. \u7136\u540e\u8dd1\u6700\u5927\u6d41\uff0c\u5976\u916a\u6ee1\u6d41\u5373\u4e3a\u5408\u6cd5  \n--------\u4e0b\u9762\u914d\u5408\u4e00\u4e2a\u5b9e\u4f8b\u6765\u8bb2\u89e3\u8bc1\u660e\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684\uff08\u53cd\u6b63\u6211\u662f\u60f3\u4e0d\u5230\u7684\uff09  \n--------\u4e3a\u4e86\u533a\u5206\u8001\u9f20\u901f\u5ea6\u548c\u5dee\u5206\u540e\u7684\u901f\u5ea6\uff0c\u6211\u4eec\u5c06\u62c6\u51fa\u6765\u7684\u70b9\u79f0\u4e3a\u201c\u8001\u9f20\u5dee\u5206\u70b9\u201c\u6216\u201d\u8001\u9f20\u70b9\u201c\u6216\u6307\u4ee3\u610f\u4e49\u7684\u201d\u70b9\u201c\n![\u56fe\u4f8b](https://cdn.luogu.com.cn/upload/pic/21011.png)\n## \u4e3e\u4e2a\u4f8b\u5b50  \n\u8001\u9f20\u5206\u522b\u6709\u901f\u5ea67,4,2  \n\u5dee\u5206\u5f97\u52303,2,2  \n\u7136\u540e\u6211\u4eec\u5047\u8bbe\u65f6\u95f4\u6bb5\u957f\u5ea6\u4e3a2  \n\u7136\u540e\u8001\u9f20\u5230t\u7684\u6d41\u91cf\u9650\u5236\u4e3a6,8,12  \n\u7136\u540e\u548c\u5976\u916a\u7684\u6d41\u91cf\u9650\u5236\u4e3a6,4,4\n\n## \u8bc1\u660e\n\n- --------\u5f53\u4e14\u4ec5\u5f53\u8fd9\u5f20\u56fe\u6240\u6709\u5976\u916a\u5230\u8d77\u70b9\u7684\u8fb9\u6ee1\u6d41\u7684\u65f6\u5019\u6709\u89e3\uff0c\u5176\u4e2d\u5982\u679c\u4e00\u4e2a\u8001\u9f20$x$\u5728\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5185\u5403\u4e86\u5976\u916a$y$\uff0c\u90a3\u4e48\u4ece\u8be5\u65f6\u95f4\u6bb5$m-x$\u5230$m$\u7684\u8001\u9f20\u5dee\u5206\u70b9\u5230\u5976\u916a$y$\u90fd\u4f1a\u6709\u6d41\u91cf$t*d_i$\u3002\u8fd9\u5f20\u56fe\u7684\u5de5\u4f5c\u539f\u7406\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff08\u5982\u679c\u770b\u4e0d\u61c2\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u5176\u5b83DL\u7684\u535a\u5ba2\uff09  \n- \u6700\u4e3b\u8981\u96be\u4ee5\u8bc1\u660e\u7684\u662f\u9898\u76ee\u9700\u8981\u6ee1\u8db3\u7684\u4e24\u4e2a\u8981\u6c42\u3002\n\n\n------------\n\n\u9996\u5148\u8bc1\u660e\u8fd9\u5f20\u56fe\u6ee1\u8db3\u4e00\u4e2a\u8001\u9f20\u540c\u4e00\u65f6\u95f4\u53ea\u5403\u4e00\u4e2a\u5976\u916a  \n\n- --------\u5982\u679c\u4e00\u4e2a\u4ece\u5927\u5230\u5c0f\u6392\u540d\u7b2c$k$\u7684\u8001\u9f20\u5403\u4e86\u540c\u4e00\u65f6\u95f4\u6bb5\u7684$x$\u5757\u5976\u916a\uff08\u5982\u679c\u4e0d\u5728\u540c\u4e00\u65f6\u95f4\u6bb5\u7684\u8bdd\u5c31\u4e0d\u4f1a\u6709\u975e\u6cd5\u72b6\u6001\uff0c\u5982\u679c\u6709\u91cd\u53e0\u5219\u91cd\u53e0\u90e8\u5206\u548c\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\uff09\uff0c\u8bbe\u7b2c$i$\u5757\u5976\u916a\u5403\u4e86\u65f6\u95f4$t_i$\uff0c\u90a3\u4e48\u6211\u4eec\u5047\u8bbe\u4e00\u4e2a\u975e\u6cd5\u72b6\u6001\uff0c\u4e5f\u5c31\u662f$(\\Sigma{t_i}) > tim$\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8001\u9f20\u540c\u65f6\u5403\u591a\u5757\u5976\u916a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65f6\u5019k\u53f7\u8001\u9f20\u5dee\u5206\u70b9\u4ea7\u751f\u7684\u6d41\u91cf\u81f3\u5c11\u4e3a$\\Sigma{(t_i)}*d_k$\uff0c\u6211\u4eec\u8bb0\u4e3a\u6d41\u91cf\uff0c\u4f46\u662f\u6211\u4eec\u5bf9\u8be5\u8001\u9f20\u7684\u9650\u5236\u6709$k*tim*d_k$\uff0c\u6211\u4eec\u8bb0\u4e3a\u5bb9\u91cf\uff0c\u6211\u4eec\u8981\u8bc1\u660e\u975e\u6cd5\u72b6\u6001\u7684$\u6d41\u91cf > \u5bb9\u91cf$\uff0c\u5728\u7f51\u7edc\u6d41\u4e2d\u4e0d\u5b58\u5728\u3002  \n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n\t1. --------\u901f\u5ea6\u66f4\u5feb\u7684\u8001\u9f20\u8fd8\u53ef\u4ee5\u5403\u4e14\u53ef\u4ee5\u5403\u8d85\u989d\u90e8\u5206\uff08\u8d85\u989d\u90e8\u5206\u5c31\u662f\u5f15\u8d77\u4e00\u53ea\u8001\u9f20\u9700\u8981\u5728\u540c\u4e00\u65f6\u95f4\u5403\u4e24\u4e2a\u5976\u916a\u7684\u90e8\u5206\uff09\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5206\u62c5\u8fd9\u4e2a\u8001\u9f20\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u975e\u6cd5\u72b6\u6001\n\t2. ---------\u901f\u5ea6\u66f4\u5feb\u7684\u8001\u9f20\u5403\u4e0d\u5b8c\u8d85\u989d\u90e8\u5206\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8001\u9f20\u4e00\u5b9a\u662f\u5df2\u7ecf\u5403\u8fc7\u4e86\uff0c\u6240\u4ee5\u6839\u636e\u5dee\u5206\u4e0a\u9762$k-1$\u4e2a\u8001\u9f20\u5dee\u5206\u70b9\u5bf9\u8fd9\u4e2a\u8001\u9f20\u5dee\u5206\u70b9\u4ea7\u751f\u4e86\u6d41\u91cf\u8d1f\u62c5\uff0c\u8fd9\u4e2a\u8d1f\u62c5\u52a0\u4e0a\u539f\u6709\u7684\u6d41\u91cf\u4e3a$\\Sigma{(t_i)}*d_k+(k-1)*d_k*tim=k*tim*t_k+(\\Sigma{(t_i)}-tim)$\uff0c\u7531\u4e8e$(\\Sigma{(t_i)}-tim)>0$\uff0c\u6240\u4ee5$\\Sigma{(t_i)}*d_k+(k-1)*d_k*tim>k*d_k*tim$\uff0c\u6240\u4ee5$\u6d41\u91cf > \u5bb9\u91cf$\uff0c\u5728\u7f51\u7edc\u6d41\u4e2d\u65e0\u6cd5\u5b9e\u73b0  \n\n\n\n------------\n\n\n\u7136\u540e\u8bc1\u660e\u8fd9\u5f20\u56fe\u6ee1\u8db3\u4e00\u4e2a\u5976\u916a\u540c\u65f6\u53ea\u88ab\u4e00\u53ea\u8001\u9f20\u5403  \n\n- --------\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e00\u6837\u5047\u8bbe\u4e00\u5171\u6709x\u53ea\u8001\u9f20\u5403\u4e86\u5976\u916a\uff0c\u6bcf\u4e00\u4e2a\u5403\u4e86\u65f6\u95f4$t_i$\uff0c\u7136\u540e\u5047\u8bbe\u975e\u6cd5\u72b6\u6001$(\\Sigma{t_i}) > tim$\uff0c\u7136\u540e\u7531\u4e8e\u6392\u540d\u9760\u524d\u7684\u8001\u9f20\u5403\u4e86\u7684\u8bdd\u90a3\u4e48\u5728\u5dee\u5206\u70b9\u4e2d\u5bf9\u6392\u540d\u8f83\u540e\u7684\u8001\u9f20\u4e5f\u4f1a\u6709\u65f6\u95f4\u4e0a\u7684\u5f71\u54cd\uff0c\u4e5f\u5c31\u662f\u5403\u4e86\u540c\u4e00\u4e2a\u5976\u916a\u7684\u6392\u540d\u6700\u540e\u7684\u8001\u9f20\u6d41\u91cf\u4e3a$\\Sigma{(t_i)}*d_k$\uff0c\u5927\u4e8e\u8fb9\u7684\u5bb9\u91cf$ti*d_k$\uff0c\u6240\u4ee5\u72b6\u6001\u4e0d\u5b58\u5728\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <iostream>\n\n//User's Lib\n\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\n#define DEBUG_PORT\n#define DEBUG\n\n#ifdef ONLINE_JUDGE\n#undef DEBUG_PORT\n#undef DEBUG\n#endif\n\n#ifdef DEBUG_PORT\n#if __cplusplus >= 201103L\n#ifdef DEBUG\ntemplate<typename T>\nextern inline void Debug(T tar){\n    cerr << tar << endl;\n}\ntemplate<typename Head, typename T, typename... Tail>\nextern inline void Debug(Head head, T mid, Tail... tail){\n    cerr << head << ' ';\n    Debug(mid, tail...);\n}\n#else\n# pragma GCC diagnostic push\n# pragma GCC diagnostic ignored \"-Wunused-parameter\"\ntemplate<typename Head, typename T, typename... Tail>\nextern inline void Debug(Head head, T mid, Tail... tail){\n    return ;\n}\n# pragma GCC diagnostic pop\n# pragma message \"Warning : pragma used\"\n#endif\n#else\n# pragma message \"Warning : C++11 Not Use\"\n#ifdef DEBUG\ntemplate <typename T>\nextern inline void Debug(T tar){\n    cerr << tar << endl;\n}\n#else\n# pragma GCC diagnostic push\n# pragma GCC diagnostic ignored \"-Wunused-parameter\"\ntemplate <typename T>\nextern inline void Debug(T tar){\n    return ;\n}\n# pragma GCC diagnostic pop\n# pragma message \"Warning : pragma used\"\n#endif\n#endif\n#else\n# pragma GCC diagnostic push\n# pragma GCC diagnostic ignored \"-Wunused-parameter\"\ntemplate<typename Head, typename T, typename... Tail>\nextern inline void Debug(Head head, T mid, Tail... tail){\n    return ;\n}\ntemplate <typename T>\nextern inline void Debug(T tar){\n    return ;\n}\n# pragma GCC diagnostic pop\n# pragma message \"Warning : pragma used\"\n#endif\n\nchar buf[11111111], *pc = buf;\n\nextern inline void Main_Init(){\n    static bool INITED = false;\n    if(INITED) fclose(stdin), fclose(stdout);\n    else {\n        fread(buf, 1, 11111111, stdin); \n        INITED = true;           \n    }\n}\n\nstatic inline int read(){\n    int num = 0;\n    char c, sf = 1;\n    while(isspace(c = *pc++));\n    if(c == 45) sf = -1, c = *pc ++;\n    while(num = num * 10 + c - 48, isdigit(c = *pc++));\n    return num * sf;\n}\n\nnamespace LKF{\n    template <typename T>\n    extern inline T abs(T tar){\n        return tar < 0 ? -tar : tar;\n    }\n    template <typename T>\n    extern inline void swap(T &a, T &b){\n        T t = a;\n        a = b;\n        b = t;\n    }\n    template <typename T>\n    extern inline void upmax(T &x, const T &y){\n        if(x < y) x = y;\n    }\n    template <typename T>\n    extern inline void upmin(T &x, const T &y){\n        if(x > y) x = y;\n    }\n    template <typename T>\n    extern inline T max(T a, T b){\n        return a > b ? a : b;\n    }\n    template <typename T>\n    extern inline T min(T a, T b){\n        return a < b ? a : b;\n    }\n}\n\n//Source Code\n\nconst int MAXK = 33;\nconst int MAXN = 2018;\nconst int MAXM = 99999;\nconst double INF = 1e16;\nconst double eps = 1e-6;\n\ninline bool comp(const double &a, const double &b){\n    double tmp = a - b;//int???\n    if(fabs(tmp) < eps) return 0;\n    return a > b ? 1 : -1;\n}\n\nint s = MAXN - 10, t = s + 1;\n\nstruct Queue{\n    int s, t;\n    int q[MAXN];\n    Queue(){s = 1, t = 0;}\n    inline void clear(){\n        s = 1, t = 0;\n    }\n    inline bool empty(){\n        return s > t;\n    }\n    inline int size(){\n        return t - s + 1;\n    }\n    inline void push(int tar){\n        q[++ t] = tar;\n    }\n    inline int front(){\n        return q[s];\n    }\n    inline void pop(){\n        s ++;\n    }\n};\n\nstruct Graph{\n    int tot;\n    int beginx[MAXN], endx[MAXM], nxt[MAXM];\n    double res[MAXM];\n    Graph(){\n        tot = 1;\n    }\n    inline void Init(){\n        tot = 1;\n        memset(beginx, 0, sizeof(beginx));\n    }\n    inline void add_edge(int u, int v, double r){\n        // Debug(u, \"->\", v, \"[label = \\\"\", r, \"\\\"]\");//Debug...\n        nxt[++ tot] = beginx[u], beginx[u] = tot, endx[tot] = v, res[tot] = r;\n        nxt[++ tot] = beginx[v], beginx[v] = tot, endx[tot] = u, res[tot] = 0;\n    }\n};\n\nstruct ISap{\n    Graph g;\n    Queue mession;\n    double max_f;\n    int cur[MAXN], d[MAXN], num[MAXN], pre[MAXN];\n    inline void bfs(){\n        mession.clear();\n        mession.push(t);\n        memset(d, 0, sizeof(d));\n        memset(num, 0, sizeof(num));\n        d[t] = 1;\n        int u, v;\n        while(!mession.empty()){\n            u = mession.front();\n            mession.pop();\n            num[d[u]] ++;\n            for(int i = g.beginx[u]; i; i = g.nxt[i]){\n                v = g.endx[i];\n                if(!d[v] && comp(g.res[i ^ 1], 0)){\n                    d[v] = d[u] + 1;\n                    mession.push(v);\n                }\n            }\n        }\n    }\n    inline double dfs(int u, double now_f){\n        if(u == t) return now_f;\n        double ret_f = 0;\n        for(int &i = cur[u]; i; i = g.nxt[i]){\n            int v = g.endx[i];\n            if(comp(g.res[i], 0) && d[u] == d[v] + 1){\n                double ret = dfs(v, min(g.res[i], now_f));\n                ret_f += ret, now_f -= ret;\n                g.res[i] -= ret, g.res[i ^ 1] += ret;\n                if(d[s] >= MAXN - 4 || !comp(now_f, 0)) return ret_f;\n            }\n        }\n        if(-- num[d[u]] == 0) d[s] = MAXN - 4;\n        ++ num[++ d[u]];\n        cur[u] = g.beginx[u];\n        return ret_f;\n    }\n    inline double ISAP(){\n        bfs();\n        max_f = 0;\n        memcpy(cur, g.beginx, sizeof(cur));\n        while(d[s] < MAXN - 5)\n            max_f += dfs(s, INF);\n        return max_f;\n    }\n}isap;\n\nint n, m, sum;\nint p[MAXK], r[MAXK], d[MAXK], ss[MAXK];\ndouble tmp_arr[MAXK << 1];\nint cnt;\n\ninline bool check(double tar){\n    cnt = 0;\n    isap.g.Init();\n    for(int i = 1; i <= n; i++)\n        tmp_arr[++ cnt] = r[i], tmp_arr[++ cnt] = d[i] + tar;\n    sort(tmp_arr + 1, tmp_arr + 1 + cnt);\n    cnt = unique(tmp_arr + 1, tmp_arr + 1 + cnt) - tmp_arr - 1;\n    for(int i = 1; i <= n; i++)\n        isap.g.add_edge(s, i, p[i]);\n    for(int i = 2; i <= cnt; i++){\n        double lst = tmp_arr[i - 1], tim = tmp_arr[i] - lst;\n        for(int j = 1; j <= m; j++)\n            isap.g.add_edge(n + (i - 2) * m + j, t, j * tim * ss[j]);\n        for(int j = 1; j <= n; j++)\n            if(r[j] <= lst && d[j] + tar >= tmp_arr[i])\n                for(int k = 1; k <= m; k++)\n                    isap.g.add_edge(j, n + (i - 2) * m + k, tim * ss[k]);\n    }\n    return !comp(isap.ISAP(), sum);\n}\n\nint main(){\n    Main_Init();\n    int T = read();\n    while(T --){\n        n = read(), m = read();\n        sum = 0;\n        for(int i = 1; i <= n; i++)\n            sum += (p[i] = read()), r[i] = read(), d[i] = read();\n        for(int i = 1; i <= m; i++)\n            ss[i] = read();\n        ss[m + 1] = 0;\n        int tmp = ss[1];\n        sort(ss + 1, ss + 1 + m, greater<int>());\n        for(int i = 1; i <= m; i++)\n            ss[i] -= ss[i + 1];\n        double l = 0, r = 1.0 * sum / tmp, mid;\n        while(fabs(r - l) > eps){\n            mid = (l + r) / 2.0;\n            if(check(mid)) r = mid;\n            else l = mid;\n        }\n        printf(\"%.5lf\\n\", mid);\n    }\n    Main_Init();\n    return 0;\n}\n```",
        "postTime": 1528821589,
        "uid": 43464,
        "name": "Creeper_LKF",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2570 \u3010[ZJOI2010]\u8d2a\u5403\u7684\u8001\u9f20\u3011"
    },
    {
        "content": "\u6b22\u8fce\u6765[\u6211\u7684\u535a\u5ba2](https://blog.bill.moe/ZJOI2010-mouse)\u5750\u5750\u3002  \n## \u9898\u76ee\u5206\u6790\n\u672c\u9898\u7684\u5efa\u56fe\u65b9\u5f0f\u975e\u5e38\u7384\u5b66\uff0c\u7136\u800c\u770b\u672c\u9898\u65f6\u6211\u6839\u672c\u6ca1\u60f3\u5230\u662f\u7f51\u7edc\u6d41\uff0c\u5f53\u6210DP\u60f3\u4e86\u534a\u5929\uff08~~\u5b8c\u4e86\u6211\u73b0\u5728\u770bDP\u662f\u7f51\u7edc\u6d41\uff0c\u770b\u7f51\u7edc\u6d41\u662fDP~~\uff09\u3002  \n\n\u9996\u5148\u4e8c\u5206\u7b54\u6848\u548c\u5c06\u65f6\u95f4\u79bb\u6563\u5316\u662f\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u3002  \n\n\u73b0\u5728\u5148\u4e0d\u8003\u8651\u5728\u4e00\u4e2a\u65f6\u523b\uff0c\u6bcf\u4e00\u5757\u5976\u916a\u53ea\u80fd\u88ab\u4e00\u53ea\u8001\u9f20\u5403\u3002  \n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5efa\u56fe\u65b9\u6cd5\uff1a  \n- \u6e90\u70b9\u5411\u5976\u916a\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u5976\u916a\u5927\u5c0f\u3002  \n- \u5c06\u8001\u9f20\u6309\u7167\u79bb\u6563\u5316\u540e\u7684\u65f6\u95f4\u6bb5\u62c6\u70b9\uff0c\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5411\u5bf9\u5e94\u7684\u53ef\u4ee5\u5403\u7684\u5976\u916a\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8001\u9f20\u7684\u901f\u5ea6$v\\times dur$\uff0c\u5176\u4e2d$dur$\u662f\u65f6\u95f4\u6bb5\u5927\u5c0f\u3002  \n- \u8001\u9f20\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cfINF\u3002  \n\n\u73b0\u5728\u6211\u4eec\u6765\u8003\u8651\u6bcf\u4e00\u5757\u5976\u916a\u53ea\u80fd\u88ab\u4e00\u53ea\u8001\u9f20\u5403\u3002  \n\u5c06\u8001\u9f20\u6309\u901f\u5ea6\u6392\u5e8f\u540e\u505a\u4e2a\u5dee\u5206\u3002  \n\u59829 4 1\u6539\u4e3a5 3 1\u3002  \n\u4fee\u6539\u5efa\u56fe\u65b9\u5f0f\uff1a  \n- \u6e90\u70b9\u5411\u5976\u916a\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u5976\u916a\u5927\u5c0f\u3002  \n- \u5c06\u8001\u9f20\u6309\u7167\u79bb\u6563\u5316\u540e\u7684\u65f6\u95f4\u6bb5\u62c6\u70b9\uff0c\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5411\u5bf9\u5e94\u7684\u53ef\u4ee5\u5403\u7684\u5976\u916a\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8001\u9f20\u7684\u5dee\u5206\u540e\u901f\u5ea6$v\\times dur$\uff0c\u5176\u4e2d$dur$\u662f\u65f6\u95f4\u6bb5\u5927\u5c0f\u3002  \n- \u7f16\u53f7\u4e3a$i$\u7684\u8001\u9f20\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u5dee\u5206\u540e\u901f\u5ea6$i\\times v[i]\\times dur$\u3002  \n\n\u6211\u4eec\u6765\u89e3\u91ca\u4e00\u4e0b\u8fd9\u6837\u5efa\u56fe\u7684\u539f\u56e0\u3002  \n\u5148\u8003\u8651\u6bcf\u4e00\u5757\u5976\u916a\u53ea\u80fd\u88ab\u4e00\u53ea\u8001\u9f20\u5403\u3002  \n\u9996\u5148\uff0c\u53ef\u4ee5\u5403\u7684\u5976\u916a\u91cf\u53ef\u4ee5\u770b\u505a\u5404\u4e2a\u8001\u9f20\u901f\u5ea6\u7684\u7ebf\u6027\u7ec4\u5408\u3002  \n\u800c\u5dee\u5206\u540e\u7ebf\u6027\u57fa\u6ca1\u6709\u6539\u53d8\uff0c\u6240\u4ee5\u5f20\u91cf\u4e0d\u53d8\u3002  \n\u5176\u6b21\uff0c\u7531\u4e8e\u65f6\u95f4\u53ef\u4ee5\u65e0\u9650\u62c6\u5206\uff0c\u90a3\u4e48\u5f20\u91cf\u6700\u5927\u503c\u5373\u4e3a\u8001\u9f20\u5dee\u5206\u540e\u901f\u5ea6\u4e4b\u548c\uff0c\u5373\u4e3a\u5403\u7684\u6700\u5feb\u7684\u8001\u9f20\u539f\u901f\u5ea6\uff0c\u56e0\u6b64\u5f20\u91cf$=0\\sim$ \u6700\u5927\u503c\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u9650\u5236\u6700\u5927\u503c\u5373\u53ef\uff0c\u5728\u7b2c\u4e8c\u79cd\u5efa\u8fb9\u7684\u65f6\u5019\u5df2\u7ecf\u9650\u5236\uff0c\u5168\u90e8\u6ee1\u6d41\u65f6\u6700\u5927\u3002  \n\u7136\u540e\uff0c\u8003\u8651\u6bcf\u4e00\u53ea\u8001\u9f20\u53ea\u80fd\u5403\u4e00\u5757\u5976\u916a\u3002  \n\u7c7b\u4f3c\u4e0a\u9762\u6240\u8bf4\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8001\u9f20\u5403\u4e0d\u540c\u7684\u5976\u916a\u4e5f\u770b\u505a\u7ebf\u6027\u7ec4\u5408\uff0c\u540c\u6837\u53ea\u9700\u8981\u9650\u5236\u6700\u5927\u503c\uff0c\u5373\u4e3a\u6240\u6709\u8001\u9f20\u4e00\u8d77\u5403\u5976\u916a\uff0c\u5728\u7b2c\u4e09\u79cd\u5efa\u8fb9\u65f6\u5df2\u7ecf\u9650\u5236\uff0c\u5168\u90e8\u6ee1\u6d41\u65f6\u6700\u5927\u3002  \n\n-----\n## \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\ninline int Get_Int() {\n\tint num=0,bj=1;\n\tchar x=getchar();\n\twhile(!isdigit(x)) {if(x=='-')bj=-1;x=getchar();}\n\twhile(isdigit(x)) {num=num*10+x-'0';x=getchar();}\n\treturn num*bj;\n}\n\nconst int maxn=3005;\nconst double eps=1e-6;\n\nint dcmp(double x) {\n\tif(fabs(x)<=eps)return 0;\n\treturn x>eps?1:-1;\n}\n\nstruct Edge {\n\tint from,to;\n\tdouble cap,flow;\n\tEdge(int x=0,int y=0,double c=0,double f=0):from(x),to(y),cap(c),flow(f) {}\n};\n\nstruct Dinic {\n\tint n,m,s,t;\n\tvector<Edge> edges;\n\tvector<int> G[maxn];\n\tbool vst[maxn];\n\tint dist[maxn],cur[maxn];\n\tvoid init(int n) {\n\t\tthis->n=n;\n\t\tedges.clear();\n\t\tfor(int i=1; i<=n; i++)G[i].clear();\n\t}\n\tvoid AddEdge(int x,int y,double v) {\n\t\tedges.push_back(Edge(x,y,v,0));\n\t\tedges.push_back(Edge(y,x,0,0));\n\t\tm=edges.size();\n\t\tG[x].push_back(m-2);\n\t\tG[y].push_back(m-1);\n\t}\n\tbool bfs() {\n\t\tfill(vst+1,vst+n+1,0);\n\t\tqueue<int> Q;\n\t\tQ.push(t);\n\t\tvst[t]=1;\n\t\twhile(!Q.empty()) {\n\t\t\tint Now=Q.front();\n\t\t\tQ.pop();\n\t\t\tfor(int id:G[Now]) {\n\t\t\t\tEdge& e=edges[id^1];\n\t\t\t\tint Next=e.from;\n\t\t\t\tif(!vst[Next]&&dcmp(e.cap-e.flow)>0) { \n\t\t\t\t\tvst[Next]=1;\n\t\t\t\t\tdist[Next]=dist[Now]+1;\n\t\t\t\t\tif(Next==s)return 1;\n\t\t\t\t\tQ.push(Next);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn vst[s];\n\t}\n\tdouble dfs(int Now,double a) {\n\t\tif(Now==t||dcmp(a)==0)return a;\n\t\tdouble flow=0;\n\t\tfor(int &i=cur[Now]; i<G[Now].size(); i++) {\n\t\t\tint id=G[Now][i];\n\t\t\tEdge &e=edges[id];\n\t\t\tint Next=e.to;\n\t\t\tif(dist[Now]-1!=dist[Next])continue;\n\t\t\tdouble nextflow=dfs(Next,min(a,e.cap-e.flow));\n\t\t\tif(dcmp(nextflow)>0) {\n\t\t\t\te.flow+=nextflow;\n\t\t\t\tedges[id^1].flow-=nextflow;\n\t\t\t\tflow+=nextflow;\n\t\t\t\ta-=nextflow;\n\t\t\t\tif(a==0)break;\n\t\t\t}\n\t\t}\n\t\treturn flow;\n\t}\n\tdouble maxflow(int s,int t) {\n\t\tthis->s=s;\n\t\tthis->t=t;\n\t\tdouble flow=0;\n\t\twhile(bfs()) {\n\t\t\tmemset(cur,0,sizeof(cur));\n\t\t\tflow+=dfs(s,1e18);\n\t\t}\n\t\treturn flow;\n\t}\n} dinic;\n\nstruct Cheese {\n\tint p,x,y;\n} a[maxn];\n\nint n,m,v[maxn],sum=0;\ndouble Time[maxn];\n\nbool Check(double t) {\n\tint S=n+n*m*2+1,T=n+n*m*2+2;\n\tdinic.init(T);\n\tfor(int i=1; i<=n; i++) {\n\t\tdinic.AddEdge(S,i,a[i].p);\n\t\tTime[i]=a[i].x;\n\t\tTime[n+i]=a[i].y+t;\n\t}\n\tsort(Time+1,Time+2*n+1);\n\tfor(int i=2; i<=2*n; i++) {\n\t\tdouble x=Time[i]-Time[i-1];\n\t\tif(x<eps)continue;\n\t\tfor(int j=1; j<=m; j++) {\n\t\t\tint y=n+(i-1)*m+j;\n\t\t\tdinic.AddEdge(y,T,j*v[j]*x);\n\t\t\tfor(int k=1; k<=n; k++)\n\t\t\t\tif(dcmp(Time[i-1]-a[k].x)>=0&&dcmp(Time[i]-a[k].y-t)<=0)dinic.AddEdge(k,y,v[j]*x);\n\t\t}\n\t}\n\treturn dcmp(dinic.maxflow(S,T)-sum)>=0;\n}\n\nint main() {\n\tint t=Get_Int();\n\twhile(t--) {\n\t\tn=Get_Int();\n\t\tm=Get_Int();\n\t\tsum=0;\n\t\tfor(int i=1; i<=n; i++) {\n\t\t\ta[i].p=Get_Int();\n\t\t\ta[i].x=Get_Int();\n\t\t\ta[i].y=Get_Int();\n\t\t\tsum+=a[i].p;\n\t\t}\n\t\tfor(int i=1; i<=m; i++)v[i]=Get_Int();\n\t\tdouble Left=0,Right=sum/v[1]+1;\n\t\tsort(v+1,v+m+1,greater<int>());\n\t\tfor(int i=1; i<m; i++)v[i]-=v[i+1];\n\t\twhile(Right-Left>eps) {\n\t\t\tdouble mid=(Left+Right)/2;\n\t\t\tif(Check(mid))Right=mid;\n\t\t\telse Left=mid;\n\t\t}\n\t\tprintf(\"%0.4lf\\n\",(Left+Right)/2);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1520557261,
        "uid": 31877,
        "name": "BillYang",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2570 \u3010[ZJOI2010]\u8d2a\u5403\u7684\u8001\u9f20\u3011"
    },
    {
        "content": "\u8fd9\u9898\u592a\u795e\u4ed9\u4e86\uff0c\u5fc5\u987b\u5199\u7bc7\u9898\u89e3\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u9996\u5148\uff0c\u4e00\u773c\u80fd\u770b\u51fa\u7684\u662f\u9700\u8981\u4e8c\u5206\u4fdd\u8d28\u671f$T$\u3002\u7136\u540e\u5462\uff1f\n\n\u7136\u540e\u5c31\u662f\u5341\u5206\u795e\u4ed9\u7684\u5efa\u56fe\u4e86\u3002\n\n\u9996\u5148\uff0c\u5bf9\u4e8e\u65f6\u95f4\u79bb\u6563\u5316\u662f\u5fc5\u987b\u7684\u3002\u4e00\u5171$n$\u5757\u5976\u916a\uff0c\u6bcf\u5757\u6709\u51fa\u73b0\u548c\u6d88\u5931\u4e24\u4e2a\u65f6\u95f4\u70b9\uff0c\u6545\u5171\u6709$2n$\u4e2a\u65f6\u95f4\u70b9\u3002\u79bb\u6563\u5316\u540e\uff0c\u6211\u4eec\u5171\u5f97\u5230$2n-1$\u5757\u65f6\u95f4\u5757\u3002\n\n\u7136\u540e\uff0c\u6700\u795e\u4ed9\u7684\u4e00\u70b9\u6765\u4e86\uff1a\n\n\u6211\u4eec\u5c06\u8001\u9f20\u6309\u7167\u901f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5e76\u5728\u6700\u540e\u6dfb\u52a0\u4e00\u53ea\u901f\u5ea6\u4e3a$0$\u7684\u8001\u9f20\u3002\u4e4b\u540e\uff0c\u8fdb\u884c\u5dee\u5206\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a$2\\ 9\\ 4\\ 5\\xrightarrow{\\text{\u6392\u5e8f\u5e76\u52a00}}9\\ 5\\ 4\\ 2\\ 0\\xrightarrow{\\text{\u5dee\u5206}}4\\ 1\\ 2\\ 2$\u3002\n\n\u8fd9\u6837\u5dee\u5206\u6709\u4ec0\u4e48\u7528\u5462\uff1f\n\n\u9898\u9762\u4e2d\u6709\u5982\u4e0b\u9650\u5236\uff1a\n$\\text{(1)\u5728\u4efb\u4e00\u65f6\u523b,\u4e00\u53ea\u8001\u9f20\u6700\u591a\u53ef\u4ee5\u5403\u4e00\u5757\u5976\u916a;}$\n$\\text{(2)\u5728\u4efb\u4e00\u65f6\u523b\uff0c\u4e00\u5757\u5976\u916a\u6700\u591a\u88ab\u4e00\u53ea\u8001\u9f20\u5403\u3002}$\n\n\u4e3a\u4e86\u6ee1\u8db3\u5982\u4e0a\u9650\u5236\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u62c6\u70b9\u3002\u73b0\u5728\u6211\u4eec\u770b\u770b\u62c6\u70b9\u662f\u5982\u4f55\u5b9e\u73b0\u5982\u4e0a\u9650\u5236\u7684\uff1a\n\n\u8fd9\u6bb5\u662f\u4e8c\u5206\u7684$check$\u51fd\u6570\u3002\n\n$sz$\u662f\u5976\u916a\u5927\u5c0f\uff1b$s$\u548c$t$\u662f\u5976\u916a\u51fa\u73b0\u548c\u6d88\u5931\u7684\u65f6\u95f4\u70b9\uff1b$v$\u662f\u4e00\u4e2a$vector\uff0c\u7528\u6765\u79bb\u6563\u5316$\uff1b$CC$\u662f\u8ba1\u6570\u5668\uff0c\u7528\u6765\u7f16\u53f7\uff1b$head$\u4e0e$cnt$\u662f\u524d\u5411\u661f\uff1b$ae$\u7528\u6765\u8fde\u8fb9\uff1b$EPS$\u662f\u7cbe\u5ea6\uff1b$S$\u662f\u6e90\u70b9\uff0c$T$\u662f\u6c47\u70b9\uff1b$sp$\u662f\u5dee\u5206\u540e\u7684\u8001\u9f20\u3002\n\n```cpp\nbool che(double ip){\n\tmemset(head,-1,sizeof(head)),cnt=0,res=0,v.clear();\n\tfor(register int i=1;i<=n;i++)ae(S,i,sz[i]),v.push_back(s[i]),v.push_back(ip+t[i]);\n\tsort(v.begin(),v.end()),CC=n;\n\tfor(register int i=1;i<=m;i++){\n\t\tfor(register int j=1;j<v.size();j++){\n\t\t\tif(v[j]-v[j-1]<EPS)continue;\n\t\t\tCC++,ae(CC,T,(v[j]-v[j-1])*sp[i]*i);\n\t\t\tfor(register int k=1;k<=n;k++)if(((double)s[k]-v[j-1])<EPS&&ip+t[k]-v[j]>-EPS)ae(k,CC,sp[i]*(v[j]-v[j-1]));\n\t\t}\n\t}\n\tDinic();\n\treturn sum-res<EPS;\n}\n```\n\n\n------------\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u5757\u5976\u916a\uff0c\u90fd\u4ece\u6e90\u70b9\u8fde\u6765$sz$\u5355\u4f4d\u7684\u6d41\u91cf\u3002\u5982\u679c\u6d41\u91cf\u8dd1\u6ee1\uff0c\u5c31\u610f\u5473\u7740\u5408\u6cd5\u3002\u540c\u65f6\uff0c\u6211\u4eec\u8fdb\u884c\u4e86\u79bb\u6563\u5316\u3002\u5c31\u662f\u8fd9\u4e24\u884c\u7684\u5185\u5bb9\u3002\n```cpp\nfor(register int i=1;i<=n;i++)ae(S,i,sz[i]),v.push_back(s[i]),v.push_back(ip+t[i]);\nsort(v.begin(),v.end()),CC=n;\n```\n\n\n------------\n\n\u7136\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u679a\u4e3e\u8001\u9f20\uff08\u5faa\u73af$i$\uff09\uff0c\u518d\u679a\u4e3e\u65f6\u95f4\u6bb5\uff08\u5faa\u73af$j$\uff09\u3002\u5982\u679c\u76f8\u90bb\u7684\u4e24\u4e2a\u65f6\u95f4\u70b9\u662f\u76f8\u540c\u7684\uff08\u5373\u5dee$<EPS$\uff09\uff0c\u5c31\u8df3\u8fc7\u3002\n\n\u5c31\u662f\u8fd9\u4e09\u884c\u3002\n```cpp\nfor(register int i=1;i<=m;i++){\n\t\tfor(register int j=1;j<v.size();j++){\n\t\t\tif(v[j]-v[j-1]<EPS)continue;\n```\n\n\n------------\n\n\u7136\u540e\uff0c\u6211\u4eec\u4e3a\uff08\u5728$j$\u65f6\u95f4\u6bb5\u5185\u7684\u8001\u9f20$i$\uff09\u63d0\u4f9b\u4e00\u4e2a\u7f16\u53f7\uff08$CC$\uff09\uff0c\u5e76\u5411\u6c47\u70b9\u8fde\u53bb$((v[j]-v[j-1])*sp[i]*i)$\u7684\u6d41\u91cf\u3002\n\n\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e48\u591a\u5462\uff1f\n\n\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u542b\u4e49\uff1a\n\n$(v[j]-v[j-1])$\uff1a\u8be5\u65f6\u95f4\u6bb5\u7684\u957f\u5ea6\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u540e\u9762\u4e58\u4e0a\u7684\u4e1c\u897f\u5e94\u8be5\u662f\u8001\u9f20\u6bcf\u79d2\u7684\u901f\u5ea6\uff0c\u8fd9\u6837\u5f97\u5230\u5728\u8fd9\u4e48\u957f\u7684\u65f6\u95f4\u6bb5\u91cc\u8001\u9f20\u53ef\u4ee5\u5403\u6389\u591a\u5c11\u5976\u916a\u3002\n\n\n\u6211\u4eec\u770b\u4e00\u4e0b\u540e\u9762\u7684\u4e1c\u897f\uff1a\n\n$sp[i]*i$\n\n\u8fd9\u4e2a\u4e1c\u897f\u7684\u610f\u601d\u662f\uff0c\u5dee\u5206\u503c\u4e58\u4e0a\u5b83\u7684\u7f16\u53f7\u3002\n\n\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e2a\u5462\uff1f\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u5dee\u5206\u8fc7\u7a0b\u3002\u8bbe$diff$\u4e3a\u5dee\u5206\u6570\u7ec4\uff0c$org$\u4e3a\u539f\u6570\u7ec4\u3002\n\n\u5219\u6709$\\Sigma diff_i*i=\\Sigma org_i$\u3002\n\n\u6216\u8005\u770b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ah8628a3.png)\n\n\n------------\n\n\u6211\u4eec\u4ee5\u4e0a\u9762\u4e3e\u7684\u5dee\u5206\u4f8b\u5b50\u4e3a\u4f8b\uff1a\n\n$4\\ 1\\ 2\\ 2\\xrightarrow{sp[i]*i}4\\ 2\\ 6\\ 8$\n\n\u8fd9\u6837\u8fde\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u524d\u9762\u90a3\u4e24\u6761\u9650\u5236\u3002\u8fd9\u5c31\u76f8\u5f53\u4e8e\u5728\u6bcf\u4e00\u6a2a\u6761\u4e0a\u53d6\u8d70\u4e00\u90e8\u5206\u3002\u5982\u679c\u4ece\u7ad6\u5411\u6765\u770b\u7684\u8bdd\uff0c\u5c31\u662f\u6bcf\u53ea\u8001\u9f20\u5de5\u4f5c\u4e00\u90e8\u5206\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gn8wtqdl.png)\n\n\u8fd9\u6837\u5b50\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u4e3a\u4ec0\u4e48\u8981\u8fde\u8fd9\u4e48\u591a\u6d41\u91cf\u3002\n\n\n------------\n\u4e4b\u540e\u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002\n\n\u8fd9\u6bb5\u662f\u5bf9\u4e8e\u65f6\u95f4\u6bb5$j$\u7684$i$\u8001\u9f20\uff0c\u6211\u4eec\u679a\u4e3e\u6bcf\u5757\u5976\u916a\uff0c\u5982\u679c\u8fd9\u5757\u5976\u916a\u5b58\u5728\u7684\u65f6\u95f4\u5305\u542b\u4e86\u8fd9\u5757\u5976\u916a\uff0c\u5219\u8fde\u8fb9\uff0c\u8fde\u7684\u662f\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u8fd9\u53ea\u8001\u9f20\u6700\u591a\u80fd\u5728\u4e00\u5757\u5976\u916a\u4e0a\u4ed8\u51fa\u7684\u52aa\u529b\uff0c\u5373$(sp[i]*(v[j]-v[j-1]))$\u3002\n\n\u5c31\u662f\u8fd9\u6bb5\u4ee3\u7801\uff1a\n```cpp\nfor(register int k=1;k<=n;k++)if(((double)s[k]-v[j-1])<EPS&&ip+t[k]-v[j]>-EPS)ae(k,CC,sp[i]*(v[j]-v[j-1]));\n```\n\n\n------------\n\u7136\u540e\uff0c\u6700\u6076\u5fc3\u7684$check$\u51fd\u6570\u90e8\u5206\u5c31\u8bb2\u5b8c\u4e86\u3002\u6211\u4eec\u6700\u540e\u518d\u68b3\u7406\u4e00\u4e0b\u8fc7\u7a0b\uff1a\n\n#### 1.\u5dee\u5206\u8001\u9f20\u901f\u5ea6\n\n#### 2.\u5f00\u59cb\u4e8c\u5206\n\n##### 2.1.\u79bb\u6563\u5316\u65f6\u95f4\u70b9\uff0c\u6c42\u51fa\u65f6\u95f4\u6bb5\uff0c\u5e76\u7531\u6e90\u70b9\u8fde\u6765\uff08\u5976\u916a\u5927\u5c0f\uff09\u5355\u4f4d\u7684\u6d41\u91cf\n\n##### 2.2.\u6c42\u51fa\u67d0\u65f6\u95f4\u6bb5\u7684\u67d0\u8001\u9f20\u6700\u591a\u53ef\u4ee5\u8d21\u732e\u591a\u5c11\u6d41\u91cf\uff0c\u5e76\u5411\u6c47\u70b9\u8fde\u8fd9\u4e48\u591a\u7684\u6d41\u91cf\n\n##### 2.3.\u6c42\u51fa\u6240\u6709\u5305\u542b\u8fd9\u4e00\u65f6\u95f4\u6bb5\u7684\u5976\u916a\uff0c\u5e76\u8fde\u5411\u8be5\u8001\u9f20\n\n##### 2.4.\u6c42\u6700\u5927\u6d41\n\n\n\n------------\n\u4ee5\u4e0a\u5c31\u662f\u8fd9\u9053\u795e\u4ed9\u53c8\u5de7\u5999\u7684\u9898\u7684\u5168\u8fc7\u7a0b\u3002\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\u3002\n\n**\u6765\u90fd\u6765\u4e86\uff0c\u70b9\u4e2a\u8d5e\u5457~~~**\n\n\u9644:\u6ce8\u610f\u7f51\u7edc\u6d41\u8981\u5199\u5b9e\u6570\u7f51\u7edc\u6d41\uff0c\u800c\u975e\u6574\u6570\u7f51\u7edc\u6d41\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(3)\n#include<bits/stdc++.h>\nusing namespace std;\nconst double EPS=1e-7;\nint TT,n,m,sz[50],s[50],t[50],sp[50],sum,CC;\nnamespace MaxFlow{\n\tconst int N=10000,M=200000;\n\tint head[N],cur[N],dep[N],cnt,S,T;\n\tdouble res;\n\tstruct node{\n\t\tint to,next;\n\t\tdouble val;\n\t}edge[M];\n\tinline void ae(int u,int v,double w){\n\t\tedge[cnt].next=head[u],edge[cnt].to=v,edge[cnt].val=w,head[u]=cnt++;\n\t\tedge[cnt].next=head[v],edge[cnt].to=u,edge[cnt].val=0,head[v]=cnt++;\n\t}\n\tqueue<int>q;\n\tinline bool bfs(){\n\t\tmemset(dep,0,sizeof(dep)),q.push(S),dep[S]=1;\n\t\twhile(!q.empty()){\n\t\t\tregister int x=q.front();q.pop();\n\t\t\tfor(register int i=cur[x]=head[x];i!=-1;i=edge[i].next)if(edge[i].val>EPS&&!dep[edge[i].to])dep[edge[i].to]=dep[x]+1,q.push(edge[i].to);\n\t\t}\n\t\treturn dep[T]>0;\n\t}\n\tbool reach;\n\tinline double dfs(int x,double flow){\n//\t\tprintf(\"%d %lf\\n\",x,flow);\n\t\tif(x==T){\n\t\t\tres+=flow;\n\t\t\treach=true;\n\t\t\treturn flow;\n\t\t}\n\t\tdouble used=0;\n\t\tfor(register int &i=cur[x];i!=-1;i=edge[i].next){\n\t\t\tif(edge[i].val<EPS||dep[edge[i].to]!=dep[x]+1)continue;\n\t\t\tregister double ff=dfs(edge[i].to,min(edge[i].val,flow-used));\n\t\t\tif(ff>EPS){\n\t\t\t\tedge[i].val-=ff;\n\t\t\t\tedge[i^1].val+=ff;\n\t\t\t\tused+=ff;\n\t\t\t\tif(abs(flow-used)<EPS)break;\n\t\t\t}\n\t\t}\n\t\treturn used;\n\t}\n\tinline void Dinic(){\n\t\twhile(bfs()){\n\t\t\treach=true;\n\t\t\twhile(reach)reach=false,dfs(S,1e9);\n\t\t}\n\t}\n}\nusing namespace MaxFlow;\ndouble L,R;\nvector<double>v;\nbool che(double ip){\n\tmemset(head,-1,sizeof(head)),cnt=0,res=0,v.clear();\n\tfor(register int i=1;i<=n;i++)ae(S,i,sz[i]),v.push_back(s[i]),v.push_back(ip+t[i]);\n\tsort(v.begin(),v.end()),CC=n;\n\tfor(register int i=1;i<=m;i++){\n\t\tfor(register int j=1;j<v.size();j++){\n\t\t\tif(v[j]-v[j-1]<EPS)continue;\n\t\t\tCC++,ae(CC,T,(v[j]-v[j-1])*sp[i]*i);\n\t\t\tfor(register int k=1;k<=n;k++)if(((double)s[k]-v[j-1])<EPS&&ip+t[k]-v[j]>-EPS)ae(k,CC,sp[i]*(v[j]-v[j-1]));\n\t\t}\n\t}\n\tDinic();\n\treturn sum-res<EPS;\n}\nvoid solve(){\n\twhile(R-L>EPS){\n\t\tdouble mid=(L+R)/2;\n\t\tif(che(mid))R=mid;\n\t\telse L=mid;\n\t}\n}\nint main(){\n\tscanf(\"%d\",&TT);\n\twhile(TT--){\n\t\tscanf(\"%d%d\",&n,&m),sum=0,L=R=0,S=2*n*m+n+1,T=2*n*m+n+2;\n\t\tfor(register int i=1;i<=n;i++)scanf(\"%d%d%d\",&sz[i],&s[i],&t[i]),sum+=sz[i];\n\t\tR=sum;\n\t\tfor(register int i=1;i<=m;i++)scanf(\"%d\",&sp[i]);\n\t\tsort(sp+1,sp+m+1);\n\t\tfor(register int i=m;i;i--)sp[i]-=sp[i-1];\n\t\treverse(sp+1,sp+m+1);\n//\t\tfor(int i=1;i<=m;i++)printf(\"%d \",sp[i]);puts(\"\");\n\t\tsolve();\n\t\tprintf(\"%lf\\n\",L);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1580130325,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2570 \u3010[ZJOI2010]\u8d2a\u5403\u7684\u8001\u9f20\u3011"
    },
    {
        "content": "myblog: http://blog.csdn.net/miaomiao\\_ymxl/article/details/54849702\n\n\u601d\u8def\uff1a\n\n\u7f51\u7edc\u6d41\u597d\u9898\n\n\u5e94\u8be5\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u548c\u79bb\u6563\u5316\u5976\u916a\u7684\u65f6\u95f4\u70b9\n\n\n\u5148\u8003\u8651\u6734\u7d20\u7684\u5efa\u56fe\uff0c\u4e5f\u5c31\u662f\u4e0d\u8003\u8651\u6bcf\u4e2a\u65f6\u523b\u53ef\u4ee5\u6709\u591a\u53ea\u8001\u9f20\u5728\u4e0d\u540c\u7684\u5c0f\u65f6\u523b\u5403\u540c\u4e00\u4e2a\u5976\u916a\n\n1.\u6211\u4eec\u5c06\u6e90\u70b9\u6bcf\u4e2a\u5976\u916a\u94fe\u6d41\u91cf\u4e3ap[i]\u7684\u8fb9\n\n2.\u7136\u540e\u628a\u6bcf\u53ea\u8001\u9f20\u7684\u6bcf\u4e2a\u65f6\u95f4\u6bb5\u62c6\u4e3a\u4e00\u4e2a\u70b9\uff0c\u518d\u5c06\u5176\u4e0e\u5bf9\u5e94\u7684\u5976\u916a\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u8fd9\u53ea\u8001\u9f20\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u5403\u591a\u5c11\u5976\u916a\n\n3.\u6240\u6709\u7684\u8001\u9f20\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u65e0\u9650\u6d41\u91cf\n\n\n\u7136\u800c\u9898\u76ee\u6709\u9650\u5236\uff0c\u6bcf\u4e2a\u65f6\u523b\u53ef\u4ee5\u6709\u591a\u53ea\u8001\u9f20\u5728\u4e0d\u540c\u7684\u5c0f\u65f6\u523b\u5403\u540c\u4e00\u4e2a\u5976\u916a\uff0c\u505a\u6cd5\u5f88\u5de7\u5999\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8001\u9f20\u7684\u901f\u5ea6\u518d\u8fdb\u884c\u62c6\u70b9\uff0c\u628as[]\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7136\u540e\u4e0e\u4e0b\u4e00\u4e2a\u4f5c\u5dee\uff0c\u5982\u201d9 6 2 1\u201d -> \u201c3 4 1 1\u201d\uff0c\u7136\u540e\u518d\u5c06\u5176\u4e0e\u6c47\u70b9\u8fde\u8fb9\u7684\u6d41\u91cf\u6539\u4e3a\uff08rat\u4e3a\u8001\u9f20\u7f16\u53f7\uff0cdur\u4e3a\u65f6\u95f4\u6bb5\u5927\u5c0f\uff0cs\u4e3a\u4f5c\u5dee\u540e\u7684\u6570\u7ec4\uff09rat\\*s[rat]\\*dur\u5373\u53ef\n\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\n\n\u53ef\u4ee5\u53d1\u73b0\u901f\u5ea6\u8fdb\u884c\u8fc7\u5982\u6b64\u5904\u7406\u4e4b\u540e\uff0c\n\n```cpp\n9 = 3+4+1+1\n6 = 4+1+1\n2 = 1+1\n1 = 1\n9+6+2+1 = 3*1 + 4*2 + 1*3 + 1*4\n```\n(\u4e0b\u9762\u6240\u6709\u7684s\u6570\u7ec4\u5747\u4e3a\u4f5c\u5dee\u540e\u7684\u6570\u7ec4)\n1.\u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u628a\u8001\u9f20\u70b9\u5230\u6c47\u70b9\u7684\u6d41\u91cf\u9650\u5236\u8bbe\u4e3arat\\*s[rat]\\*dur\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u53ea\u8001\u9f20\uff0c\u5b83\u2018\u5403\u2019\u7684\u91cf\u4e0d\u8d85\u8fc7\u5b9e\u9645\u53ef\u4ee5\u2018\u5403\u2019\u7684\u91cf\u3002\uff08\u4e0a\u8ff0\u5f0f\u5b50\u89e3\u91ca\u4e86\uff0c\u5b9e\u9645\u5305\u62ec\u7f16\u53f7\u6bd4\u5b83\u5c0f\u7684\u8001\u9f20\u7684\u5403\u7684\u91cf\uff09\n\n2.\u6bcf\u4e2a\u8001\u9f20\u70b9\u4e0e\u5976\u916a\u7684\u8fde\u8fb9\u4e3as[rat]\\*dur\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u53ea\u8001\u9f20\u5b9e\u9645\u4e0d\u53ef\u4ee5\u8d85\u8fc7\u81ea\u5df1\u8fd9\u6bb5\u65f6\u95f4\u53ef\u4ee5\u5403\u7684\u5976\u916a\u3002\n\n3.\uff08\u5bf9\u4e8e\u7b2c2\u70b9\u7684\u89e3\u91ca\uff09\u5b9e\u9645\u8fd9\u6bb5\u65f6\u95f4\u5976\u916a\u88ab\u5403\u7684\u91cf\u4e0d\u8d85\u8fc7\u6700\u5feb\u7684\u8001\u9f20\u7684\u901f\u5ea6\u5728\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u53ef\u4ee5\u5403\u7684\u91cf\uff0c\u5982\u679c\u6bcf\u53ea\u8001\u9f20\u57282\u70b9\u6240\u8ff0\u7684\u8fb9\u6ee1\u6d41\uff0c\u90a3\u4e48\u5b9e\u9645\u76f8\u5f53\u4e8e\u5403\u7684\u6700\u5feb\u7684\u8001\u9f20\u5403\u4e86\u8fd9\u4e00\u6574\u4e2a\u65f6\u95f4\u6bb5\u3002\u800c\u4efb\u4f55\u5176\u5b83\u7684\u60c5\u51b5\u5747\u53ef\u4ee5\u7528\u522b\u7684\u8001\u9f20\u51d1\u51fa\u6765\uff0c\u4e14\u7531\u4e8e\u7b2c\u4e00\u70b9\u4e0d\u4f1a\u4e0d\u5408\u6cd5\n\n\n\u6700\u540e\uff0c\u6bcf\u6b21\u4e8c\u5206\u7b54\u6848\uff0c\u91cd\u65b0\u6784\u56fe\u8dd1\u6700\u5927\u6d41\uff0c\u68c0\u67e5\u662f\u5426\u6ee1\u6d41\u5373\u53ef\u3002\n\n\n\u4ee3\u7801\uff1a\n\n\u2018\u2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n//miaomiao 2017.2.3\n#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\nusing namespace std;\n#define pb push_back\n#define Set(a, v) memset(a, v, sizeof(a))\n#define For(i, a, b) for(int i = (a); i <= (int)(b); i++)\n#define MN (30+5)\n#define N (3000+5)\n#define eps (1e-6)\nstruct Edge{\n    int from, to;\n    double cap, flow;\n};\nstruct Dinic{\n    vector<int> G[N];\n    vector<Edge> edges;\n    int m, s, t;\n    int cur[N], d[N]; \n    void init(){\n        For(i, 0, N-1) G[i].clear();\n        edges.clear(); \n    }\n    void AddEdge(int u, int v, double cap){\n        edges.pb((Edge){u, v, cap, 0});    \n        edges.pb((Edge){v, u, 0, 0});\n        m = edges.size();\n        G[u].pb(m-2); G[v].pb(m-1);\n    }\n    bool Bfs(){\n        queue<int> q;\n        q.push(s); Set(d, 0);\n        d[s] = 1; \n        int now;\n        while(!q.empty()){\n            now = q.front(); q.pop();\n            For(i, 0, G[now].size()-1){\n                Edge &e = edges[G[now][i]];\n                if(!d[e.to] && e.cap-e.flow > eps){\n                    d[e.to] = d[now]+1;\n                    q.push(e.to);\n                }\n            }\n        }\n        return d[t];\n    }\n    double dfs(int now, double Mint){\n        if(Mint < eps || now == t) return Mint;\n        double f;\n        double ret = 0.0;\n        for(int &i = cur[now]; i < G[now].size(); i++){\n            Edge &e = edges[G[now][i]];\n            if(d[e.to]==d[now]+1 && (f=dfs(e.to, fmin(Mint, e.cap-e.flow)))>eps){\n                e.flow += f; Mint -= f;\n                edges[G[now][i]^1].flow -= f;\n                ret += f;\n                if(Mint < eps) return ret;\n            }\n        }\n        return ret;\n    }\n    double Maxflow(){\n        double ret = 0.0;\n        while(Bfs()){\n            Set(cur, 0);\n            ret += dfs(s, (1LL<<60)*1.0);\n        }\n        return ret;\n    }\n}Din;\nint n, m;\ndouble L, R, rp[MN], rr[MN], rd[MN], rs[MN], Ti[MN*2];\nvoid solve(){\n    double mid, la, sum = 0;\n    int pn;\n    For(i, 1, n) sum += rp[i];\n    while(R-L > eps){\n        mid = (L+R)/2.0;\n        Din.init();\n        For(i, 1, n) Din.AddEdge(0, i, rp[i]);\n        For(i, 1, n){\n            Ti[2*i-1] = rr[i]; Ti[2*i] = rd[i]+mid;            \n        }\n        sort(Ti+1, Ti+2*n+1);\n        Din.s = 0; Din.t = m*2*n+n+1; pn = n;\n        For(rat, 1, m){\n            la = Ti[1];\n            For(i, 2, 2*n){\n                if(Ti[i]-la < eps) continue;\n                ++pn; Din.AddEdge(pn, Din.t, rat*rs[rat]*(Ti[i]-la));\n                For(j, 1, n)\n                    if(rr[j]-la < eps && (rd[j]+mid)-Ti[i] > -eps)\n                        Din.AddEdge(j, pn, rs[rat]*(Ti[i]-la));\n                la = Ti[i];\n            }\n        }\n        if(sum-Din.Maxflow() < eps) R = mid;\n        else L = mid;\n    }\n    printf(\"%lf\\n\", L);\n}\nint main(){\n    int T;\n    double tot;\n    scanf(\"%d\", &T);\n    while(T--){\n        tot = 0.0;\n        scanf(\"%d%d\", &n, &m);\n        For(i, 1, n) scanf(\"%lf%lf%lf\", &rp[i], &rr[i], &rd[i]), tot += rp[i];\n        For(i, 1, m) scanf(\"%lf\", &rs[i]); sort(rs+1, rs+m+1, greater<int>());\n        R = tot/rs[1] + 1.0; L = 0;\n        For(i, 1, m-1) rs[i] -= rs[i+1];\n        solve();\n    }\n    return 0;\n}\n\u2018\u2019\n```",
        "postTime": 1486136704,
        "uid": 8925,
        "name": "miaowey",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2570 \u3010[ZJOI2010]\u8d2a\u5403\u7684\u8001\u9f20\u3011"
    }
]