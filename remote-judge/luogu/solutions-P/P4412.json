[
    {
        "content": "\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u6811\u8fb9\u80af\u5b9a\u8981\u51cf\u5c0f\u5b83\u7684\u6743\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u8981\u589e\u52a0\u5b83\u7684\u6743\u503c\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9$j$\uff0c\u4ed6\u80af\u5b9a\u4e0e\u67d0\u4e9b\u6811\u8fb9\u6784\u6210\u4e86\u4e00\u4e2a\u73af\uff0c\u90a3\u4e48\u5b83\u7684\u8fb9\u6743\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u73af\u4e0a\u7684\u6240\u6709\u8fb9\n\n\u8bbe\u5176\u4e2d\u4e00\u6761\u8fb9\u4e3a$i$\uff0c\u53d8\u5316\u91cf\u4e3a$x$\uff0c\u90a3\u4e48\u5c31\u8981\u6ee1\u8db3$w_i-x_i\\leq w_j+x_j$\uff0c\u5373$x_i+x_j\\geq w_i-w_j$\n\n\u7136\u540e\u5b83\u5c31\u662f\u4e00\u4e2a\u7ebf\u6027\u89c4\u5212\u4e86\uff0c\u957f\u8fd9\u4e2a\u6837\u5b50\n$$Min\\sum_i x_i+\\sum_jx_j$$\n$$x_i+x_j\\geq w_i-w_j$$\n$$x_i\\geq 0$$\n\u7136\u540e\u56e0\u4e3a\u8fd9\u73a9\u610f\u513f\u662f\u6c42\u76ee\u6807\u51fd\u6570\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u628a\u5b83\u5bf9\u5076\u4e4b\u540e\u53d8\u6210\u6c42\u5b83\u7684\u6700\u5927\u503c\uff0c\u7136\u540e\u5b83\u957f\u6210\u4e86\u8fd9\u4e2a\u6837\u5b50\uff08\u4ee4$y_k$\u4e3a\u7b2c$k$\u4e2a\u7ea6\u675f\u6761\u4ef6\u5bf9\u5076\u540e\u7684\u53d8\u91cf\uff0c$d_{k,i}$\u8868\u793a\u7b2c$k$\u4e2a\u7ea6\u675f\u4e2d\u662f\u5426\u6709$x_i$\u8fd9\u4e2a\u53d8\u91cf\uff09\n$$Max\\sum (w_i-w_j)y_k$$\n$$\\sum_k y_kx_{ki}\\leq 1$$\n$$y_i\\geq 0$$\n\u7136\u540e\u76f4\u63a5\u4e0a\u5355\u7eaf\u5f62\n\n\u56e0\u4e3a\u4e00\u4e9b\u7cbe\u5ea6\u539f\u56e0\uff0c\u5982\u679c\u6700\u540e\u7684\u7b54\u6848\u5728$-eps$\u5230$eps$\u4e4b\u95f4\u624b\u52a8\u8f93\u51fa$0$\u5426\u5219\u5b83\u7684\u7b54\u6848\u4f1a\u662f\u4e2a\u8d1f\u6570\u2026\u2026\n```\n//minamoto\n#include<bits/stdc++.h>\n#define R register\n#define Loli true\n#define fp(i,a,b) for(R int i=a,I=b+1;i<I;++i)\n#define fd(i,a,b) for(R int i=a,I=b-1;i>I;--i)\n#define go(u) for(int i=head[u],v=e[i].v;i;i=e[i].nx,v=e[i].v)\nusing namespace std;\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline char getc(){return p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++;}\nint read(){\n    R int res,f=1;R char ch;\n    while((ch=getc())>'9'||ch<'0')(ch=='-')&&(f=-1);\n    for(res=ch-'0';(ch=getc())>='0'&&ch<='9';res=res*10+ch-'0');\n    return res*f;\n}\nconst int N=1005,M=10005;const double eps=1e-8,inf=1e18;\nstruct eg{int v,nx,id;}e[N<<1];int head[N],tot;\ninline void add(R int u,R int v,R int id){e[++tot]={v,head[u],id},head[u]=tot;}\nint n,m,nn,mm,u,v,x,dep[N],fa[N],id[N],U[N],V[N],W[N],F[N],G[N][N];\ndouble a[N][M];\nvoid dfs(int u){go(u)if(v!=fa[u])fa[v]=u,id[v]=e[i].id,dep[v]=dep[u]+1,dfs(v);}\nvoid pivot(int l,int e){\n    double t=a[l][e];a[l][e]=1;fp(i,0,m)a[l][i]/=t;\n    fp(i,0,n)if(i!=l&&fabs(a[i][e])>eps){\n        t=a[i][e],a[i][e]=0;\n        fp(j,0,m)a[i][j]-=t*a[l][j];\n    }\n}\nvoid simplex(){\n    while(Loli){\n        int l=0,e=0;double mn=inf;\n        fp(i,1,m)if(a[0][i]>eps){e=i;break;}if(!e)return;\n        fp(i,1,n)if(a[i][e]>eps&&a[i][0]/a[i][e]<mn)mn=a[i][0]/a[i][e],l=i;\n        pivot(l,e);\n    }\n}\nint main(){\n//\tfreopen(\"testdata.in\",\"r\",stdin);\n    nn=read(),mm=read();\n    fp(i,1,mm)U[i]=read(),V[i]=read(),W[i]=read(),G[U[i]][V[i]]=G[V[i]][U[i]]=i;\n    fp(i,1,nn-1)u=read(),v=read(),x=G[u][v],add(U[x],V[x],x),add(V[x],U[x],x);\n    dfs(1),n=mm;\n    fp(i,1,mm)if(F[i])a[i][0]=1;\n    else{\n        a[i][0]=1,u=U[i],v=V[i];\n        while(u!=v){\n            if(dep[u]<dep[v])swap(u,v);\n            x=id[u];if(W[x]>W[i])++m,a[x][m]=a[i][m]=1,a[0][m]=W[x]-W[i];\n            u=fa[u];\n        }\n    }simplex();if(a[0][0]<eps&&a[0][0]>-eps)puts(\"0\");\n\telse printf(\"%.0lf\\n\",-a[0][0]);return 0;\n}\n```",
        "postTime": 1544531221,
        "uid": 41781,
        "name": "bztMinamoto",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4412 \u3010[SHOI2004]\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "**\u5217\u51fa\u6811\u8fb9\u548c\u975e\u6811\u8fb9\u7684\u5173\u7cfb\uff0c\u5e76\u4e14\u53d8\u6362\u51fa\u6700\u5c0f\u9876\u6807\u548c\u7684\u5f62\u5f0f\n\u6ce8\u610f\u4e0d\u4e00\u5b9a\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff08\u4e0d\u4e00\u5b9a\u6bcf\u4e2a\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff09\uff0c\u6240\u4ee5\u6bcf\u5bf9\u4e24\u4fa7\u70b9\u4e4b\u95f4\u8fde0\u6743\u503c\u8fb9**\n\u7a0b\u5e8f\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\n \nconst int MAXN = 1000, MAXM = 200000, INF = 0x3f3f3f3f, OFST = 1000000;\n \nnamespace KM {\n    struct Edge {\n        int v, len, next;\n    };\n    int e_ptr, lcnt, rcnt, head[MAXN+10]; Edge E[(MAXM+10)<<1]; \n    int L[MAXN+10], vis[MAXN+10], slack[MAXN+10], mat[MAXN+10];\n    void AddEdge(int u, int v, int len) {\n        // cerr << u << ' ' << v << ' ' << len << endl;\n        E[++e_ptr] = (Edge) { v, len, head[u] }; head[u] = e_ptr;\n    }\n    void AddPair(int u, int v, int len) {\n        AddEdge(u, v, len); AddEdge(v, u, len);\n    }\n    bool augment(int u) {\n        vis[u] = true;\n        for(int j=head[u]; j; j=E[j].next) {\n            int v=E[j].v, len=E[j].len;\n            if(vis[v]) continue;\n            int t = L[u] + L[v] - len;\n            if(t == 0) {\n                vis[v] = true;\n                if(!mat[v] || augment(mat[v])) {\n                    mat[v] = u; return true;\n                }\n            } else slack[v] = min(slack[v], t);\n        }\n        return false;\n    }\n    inline void update() {\n        int d = INF;\n        for(int v = lcnt+1; v <= lcnt+rcnt; v++)\n            if(!vis[v]) d = min(d, slack[v]);\n        for(int u = 1; u <= lcnt; u++)\n            if(vis[u]) L[u] -= d;\n        for(int v = lcnt+1; v <= lcnt+rcnt; v++)\n            if(vis[v]) L[v] += d;\n    }\n    inline void KM() {\n        if(rcnt < lcnt) rcnt = lcnt;\n        for(int i = 1; i <= lcnt; i++) {\n            for(int j = 1; j <= rcnt; j++)\n                AddPair(i, j+lcnt, 0);\n        }\n        for(int u = 1; u <= lcnt; u++) \n            for(int j=head[u]; j; j=E[j].next)\n                L[u] = max(L[u], E[j].len);\n        for(int v = lcnt+1; v <= lcnt+rcnt; v++) \n            L[v] = 0;\n \n        for(int u = 1; u <= lcnt; u++) {\n            memset(slack, 0x3f, sizeof(slack));\n            while(true) {\n                memset(vis, 0, sizeof(vis));\n                if(augment(u)) break;\n                else update();\n            }\n        }\n    }\n}\n \nnamespace Graph {\n    struct Edge {\n        int u, v, len, id;\n        inline bool operator<(const Edge& rhs) const { \n            return u == rhs.u ? v < rhs.v : u < rhs.u;\n        }\n    };\n    int n, m, nl, nr, vis[MAXN+10], M[MAXN+10];\n    vector<Edge> G[MAXN+10]; \n    vector<Edge> E0, ToAdd;\n    void Init() {\n        E0.push_back(Edge());\n        int u, v, len;\n        scanf(\"%d%d\", &n, &m);\n        for(int i = 1; i <= m; i++) {\n            scanf(\"%d%d%d\", &u, &v, &len);\n            if(u > v) swap(u, v); // u < v !\n            E0.push_back((Edge){ u, v, len, i });\n        }\n        sort(E0.begin(), E0.end());\n        for(int i = 1; i <= m; i++)\n            E0[i].id = i;\n        for(int i = 1; i <= n-1; i++) {\n            scanf(\"%d%d\", &u, &v);\n            if(u > v) swap(u, v);\n            vector<Edge>::iterator cur = lower_bound(E0.begin(), E0.end(), (Edge){ u, v, 0, 0 });\n            G[u].push_back((Edge) { cur->u, cur->v, cur->len, cur->id }); \n            G[v].push_back((Edge) { cur->v, cur->u, cur->len, cur->id });\n            cur->id = -1; // marked as tree edge\n        }\n    }\n    bool EditPath(int u, int t, int id) {\n        // cerr << u << '~' << t << ' ' << id << ' ' << E0[id].len << endl;\n        vis[u] = true;\n        if(u == t) return true;\n        for(int j = 0; j < int(G[u].size()); j++) {\n            Edge e = G[u][j];\n            if(vis[e.v]) continue;\n            if(EditPath(e.v, t, id)) {\n                // cerr << \"back:\" << E0[id].len << ' ' << e.len << endl;\n                if(E0[id].len < e.len) {\n                    if(!M[e.id]) M[e.id] = ++nl;\n                    // cerr << nr << \"adding\" << e.id << endl;\n                    ToAdd.push_back((Edge){ M[e.id], nr, e.len - E0[id].len, 0 });\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    void BuildGraph() {\n        for(int i = 0; i < int(E0.size()); i++) {\n            Edge& cur = E0[i];\n            if(cur.id < 0) continue; \n            ++nr;\n            // cerr << nr << \":\" << cur.u << ' ' << cur.v << ' ' << cur.len << ' ' << cur.id << endl;\n            memset(vis, 0, sizeof(vis));\n            EditPath(cur.u, cur.v, cur.id);\n        }\n        KM::lcnt = nl; KM::rcnt = nr;\n        for(int i = 0; i < int(ToAdd.size()); i++) {\n            Edge& cur = ToAdd[i];\n            KM::AddEdge(cur.u, nl + cur.v, cur.len);\n        }\n    }\n}\n \nvoid Init() {\n    Graph::Init(); Graph::BuildGraph();\n}\n \nvoid Work() {\n    int Ans = 0;\n    KM::KM();\n    for(int u = 1; u <= KM::lcnt + KM::rcnt; u++) {\n        // fprintf(stderr, \"L[%d] = %d\\n\", u, KM::L[u]);\n        Ans += KM::L[u];\n    }\n    cout << Ans;\n}\n \nint main() {\n    Init(); Work();\n    return 0;\n}\n```\n",
        "postTime": 1532911062,
        "uid": 67424,
        "name": "FLWLW",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4412 \u3010[SHOI2004]\u6700\u5c0f\u751f\u6210\u6811\u3011"
    },
    {
        "content": "\u6d1b\u8c37 P4412 \u9898\u89e3\n\n\u7b80\u8981\u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u5f20\u5e26\u6743\u56fe\uff0c\u94a6\u5b9a\u4e86\u4e00\u68f5\u6811\uff0c\u8bf7\u4f60\u4fee\u6539\u4e00\u4e9b\u8fb9\u6743\uff0c\u4f7f\u5f97\u8fd9\u68f5\u6811\u662f $\\texttt{MST}$ \u4e4b\u4e00\uff0c\u6700\u5c0f\u5316\u8fb9\u6743\u7684\u6539\u53d8\u603b\u91cf.\n\n\u6211\u4eec\u505a\u9898\u603b\u5f52\u8981\u6709\u4e00\u4e9b\u76f4\u89c9\uff0c\u90a3\u4e48\u770b\u5230\u8fd9\u9053\u9898\u4e4b\u540e\u6211\u4eec\u7b2c\u4e00\u773c\u60f3\u5230\u7684\u53ef\u80fd\u662f\u5148\u53bb\u6c42\u51fa\u539f\u56fe\u771f\u6b63\u7684 $\\texttt{MST}$\uff0c\u7136\u540e\u53bb\u6bd4\u5bf9\u4e4b\u7c7b\u7684\uff0c\u53ef\u60dc\u8fd9\u4e2a\u601d\u8def\u5927\u6982\u884c\u4e0d\u901a\uff0c\u7a76\u5176\u539f\u56e0\uff0c\u6211\u4eec\u628a $\\texttt{MST}$ \u6539\u6389\u4e4b\u540e\u53ef\u80fd\u4f1a\u4ea7\u751f\u65b0\u7684\u975e\u94a6\u5b9a\u8fb9\u5bfc\u81f4\u65b0\u7684\u9ebb\u70e6.\n\n\u6240\u4ee5\u6211\u4eec\u6700\u597d\u76f4\u63a5\u5bf9\u7740\u94a6\u5b9a\u6811\u53bb\u601d\u8003\uff0c**\u600e\u4e48\u628a\u94a6\u5b9a\u6811\u53d8\u6210\u4e00\u68f5 $\\texttt{MST}$**\uff0c\u6216\u8005\u8bf4\uff0c**\u4fdd\u8bc1\u4e86\u4ec0\u4e48\u6027\u8d28**\uff0c\u5c31\u53ef\u4ee5\u628a\u94a6\u5b9a\u6811\u53d8\u6210\u4e00\u68f5 $\\texttt{MST}$.\n\n\u8fd9\u4e2a\u6027\u8d28\u6700\u597d\u662f\u548c\u5feb\u901f\u5904\u7406\u6811\u7684\u7b97\u6cd5\u6709\u5f88\u5927\u5173\u8054\u7684\uff0c\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u5c31\u662f\u4e00\u4e2a\u597d\u7528\u7684\u6027\u8d28\uff0c\u90a3\u4e48\u751f\u6210\u6811\u4e0a\u6700\u597d\u7528\u7684\u6027\u8d28\u5927\u6982\u5c31\u662f**\u8003\u8651\u975e\u94a6\u5b9a\u6811\u8fb9\u548c\u94a6\u5b9a\u6811\u8fb9\u6784\u6210\u7684\u73af**\u4e86.\n\n\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a $n$ \u4e2a\u70b9 $n$ \u6761\u8fb9\u7684\u73af\u8fde\u901a\u4e86 $n$ \u4e2a\u70b9\uff0c\u4efb\u610f\u5207\u65ad\u4e00\u6761\u8fb9\u4e5f\u540c\u6837\u80fd\u591f\u8fde\u901a $n$ \u4e2a\u70b9\uff0c\u56e0\u6b64\u5728 $\\texttt{MST}$ \u4e0a\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u73af\uff0c**\u5207\u65ad\u7684\u53ea\u53ef\u80fd\u662f\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u4e4b\u4e00**.\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u6761\u975e\u94a6\u5b9a\u6811\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u94a6\u5b9a\u6811\u4e0a\u8fd9\u6761\u8fb9\u4e24\u7aef\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u6761\u975e\u94a6\u5b9a\u6811\u8fb9\u548c\u8fd9\u6761\u8def\u5f84\u4f1a\u6784\u6210\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u8bc1**\u8fd9\u6761\u975e\u94a6\u5b9a\u6811\u8fb9\u662f\u73af\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9\u4e4b\u4e00**\u5373\u53ef\uff0c\u7b49\u4ef7\u4e8e\u53ea\u9700\u8981\u4fdd\u8bc1**\u8fd9\u6761\u975e\u94a6\u5b9a\u6811\u8fb9\u7684\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e\u8def\u5f84\u4e0a\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u8fb9\u6743**\u5373\u53ef.\n\n\u50cf\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u6781\u5927\u7a0b\u5ea6\u4e0a\u5168\u5c40\u65e0\u5173\u7684\u4e00\u4e2a\u95ee\u9898\uff1a\u4fee\u6539\u6bcf\u6761\u8fb9\u7684\u6743\u503c\uff0c\u4f7f\u5f97\u6240\u6709**\u67d0\u4e24\u6761\u8fb9\u4e4b\u95f4\u7684\u5927\u5c0f\u5173\u7cfb\u8981\u6c42\u5f97\u4ee5\u6ee1\u8db3**\uff0c\u8fd9\u5c31\u548c\u6811\u5f62\u6001\u4ec0\u4e48\u4e71\u4e03\u516b\u7cdf\u7684\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u4e86.\n\n\u8003\u8651\u600e\u4e48\u53bb\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\uff0c\u6211\u4eec\u628a\u8fb9\u67d3\u6210\u84dd\u7c89\u4e24\u8272\uff0c\u5176\u4e2d\u84dd\u8272\u8868\u793a\u975e\u94a6\u5b9a\u6811\u8fb9\uff0c\u7c89\u8272\u8868\u793a\u94a6\u5b9a\u6811\u8fb9\uff0c\u90a3\u4e48\u6240\u6709\u8981\u6c42\u90fd\u5f62\u4e3a**\u67d0\u6761\u84dd\u8272\u8fb9\u7684\u8fb9\u6743\u5927\u4e8e\u7b49\u4e8e\u67d0\u6761\u7c89\u8272\u8fb9\u7684\u8fb9\u6743**.\n\n\u8d2a\u5fc3\u5730\u60f3\uff0c**\u6211\u4eec\u4e0d\u4f1a\u53bb\u964d\u4f4e\u84dd\u8272\u8fb9\u7684\u8fb9\u6743\uff0c\u4e5f\u4e0d\u4f1a\u53bb\u589e\u5927\u7c89\u8272\u8fb9\u7684\u8fb9\u6743**\uff0c\u8fd9\u662f\u5f88\u663e\u7136\u7684.\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u8bbe\u5b9a\u4e00\u4e2a\u6743\u503c\u6539\u53d8\u91cf $\\Delta$\uff0c\u5bf9\u4e8e\u6bcf\u6761\u9650\u5236\u7684\u84dd\u8272\u8fb9 $x$ \u548c\u7c89\u8272\u8fb9 $y$ \u6765\u8bf4\uff0c\u4e5f\u5c31\u662f $w_x+\\Delta_x\\geq w_y+\\Delta_y$\uff0c\u663e\u7136 $\\Delta_x\\geq0$\uff0c$\\Delta_y\\leq0$\uff0c\u6545\u800c $w_x+|\\Delta_x|\\geq w_y-|\\Delta_y|$\uff0c\u7136\u800c\u8fd9\u5e38\u91cf\u548c\u76ee\u6807\u91cf\u6df7\u6742\u7684\u5f0f\u5b50\u65e0\u6cd5\u5bb9\u5fcd\uff0c\u6211\u4eec\u79fb\u5411\uff0c\u53ef\u4ee5\u5f97\u5230 $|\\Delta_x|+|\\Delta_y|\\geq w_y-w_x$\uff0c**\u5176\u4e2d\u53f3\u8fb9\u7684\u5f0f\u5b50\u662f\u4e2a\u5e38\u6570\uff0c\u4e0d\u662f\u6211\u4eec\u7684\u76ee\u6807\u91cf**.\n\n~~\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0a\u5355\u7eaf\u5f62\u7b97\u6cd5\u4e86~~.\n\n\u5176\u5b9e\u6709\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684 ```Trick```\uff0c\u867d\u7136\u590d\u6742\u5ea6\u597d\u50cf\u540c\u6837\u662f $\\Theta(n^6)$ \u7684\uff0c\u4f46\u662f\u56e0\u4e3a\u5e38\u6570\u6781\u5c0f\u800c\u4e14\u503c\u5f97\u5bfb\u5473\uff0c\u6240\u4ee5\u8fd8\u662f\u4f7f\u7528\u4e00\u4e0b\u6bd4\u8f83\u597d.\n\n\u6211\u4eec\u5bf9\u6bcf\u6761\u84dd\u8272\u8fb9\u5efa\u84dd\u8272\u70b9\uff0c\u6bcf\u6761\u7c89\u8272\u8fb9\u5efa\u7c89\u8272\u70b9\uff0c\u5e76\u4e14\u4ee4**\u70b9\u6743\u7b49\u4e8e\u8fb9\u6743\u7684\u6539\u53d8\u91cf**\uff0c\u4e5f\u5373 $a_i=\\Delta_x$\uff0c$b_j=\\Delta_y$\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5**\u5728\u84dd\u8272\u70b9\u548c\u7c89\u8272\u70b9\u4e4b\u95f4\u8fde\u8fb9**\uff0c\u8fb9\u6743 $w'$ \u7b49\u4e8e $w_y-w_x$\uff0c\u8fd9\u6761\u8fb9\u7ea6\u675f\u7740 $a_i$ \u548c $b_j$\uff0c\u9700\u8981\u8ba9 $a_i+b_j\\geq w'$.\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u4e24\u8fb9\u5404\u6709 $O(n)$ \u548c $O(n^2)$ \u4e2a\u7ed3\u70b9\u7684\u56fe\uff0c\u56fe\u4e0a\u6709 $O(n^3)$ \u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u662f\u4e00\u4e2a\u7ea6\u675f\uff0c\u6211\u4eec**\u53ea\u9700\u8981\u8bbe\u8ba1\u975e\u8d1f\u70b9\u6743\u6ee1\u8db3\u8fd9\u4e9b\u7ea6\u675f\uff0c\u5e76\u6700\u5c0f\u5316\u70b9\u6743\u7684\u548c\u5c31\u53ef\u4ee5\u4e86**.\n\n\u8003\u8651 $a_i+b_j\\geq w'$ \u8fd9\u4e2a\u5f0f\u5b50\uff0c\u6211\u4eec\u628a\u6ee1\u8db3 $a_i+b_j=w'$ \u7684\u8fb9\u67d3\u6210\u9ed1\u8272\uff0c\u5176\u4ed6\u8fb9\u67d3\u6210\u767d\u8272\uff0c\u6211\u4eec\u8003\u8651**\u4e8c\u5206\u56fe\u4e0a\u8fd9\u4e9b\u9ed1\u8272\u7684\u8fb9\u6ee1\u8db3\u4ec0\u4e48\u6027\u8d28**.\n\n- **\u6bcf\u4e2a\u70b9\u90fd\u81f3\u5c11\u6709\u4e00\u6761\u90bb\u63a5\u7684\u9ed1\u8272\u8fb9**\n> \u663e\u7136\uff0c\u5982\u679c\u67d0\u4e2a\u70b9\u6ca1\u6709\u90bb\u63a5\u7684\u9ed1\u8272\u8fb9\uff0c\u8fd8\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u7684\u70b9\u6743\u53ef\u4ee5\u4e00\u70b9\u4e00\u70b9\u51cf\u5c0f\uff0c\u76f4\u5230\u51fa\u73b0\u9ed1\u8272\u8fb9\u4e3a\u6b62.\n- \u5982\u679c\u5c06\u8fd9\u5f20\u56fe\u6309\u7167**\u865a\u8fb9\u6743\u503c\u4e3a\u96f6\u3001\u865a\u70b9\u70b9\u6743\u4e0d\u9650**\u7684\u65b9\u5f0f\u8865\u5168\u4e3a**\u84dd\u7c89\u70b9\u6570\u76f8\u7b49\u7684\u5b8c\u5168\u4e8c\u5206\u56fe**\uff0c\u90a3\u4e48\u5982\u679c\u80fd\u591f\u627e\u5230\u4e00\u7ec4**\u9ed1\u8272\u8fb9\u6784\u6210\u7684\u5b8c\u7f8e\u5339\u914d**\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u4e0d\u4f18\u4e8e(\u4e0d\u5c0f\u4e8e)\u8fd9\u7ec4\u5339\u914d\u4e0a\u8fb9\u6743\u4e4b\u548c.\n> \u663e\u7136\uff0c\u8fd9\u4e9b\u9650\u5236\u672c\u8eab\u662f\u5fc5\u987b\u6ee1\u8db3\u7684.\n- \u6700\u7ec8\u7684\u7b54\u6848\u4e0d\u4f18\u4e8e\u8fd9\u5f20\u4e8c\u5206\u56fe\u7684**\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d**.\n> \u6240\u6709\u4e0a\u8ff0\u7684\u5b8c\u7f8e\u5339\u914d\u4e0a\u8fb9\u6743\u4e4b\u548c\u7684\u9650\u5236\u90fd\u662f\u5fc5\u987b\u6ee1\u8db3\u7684.\n- \u6700\u7ec8\u7684\u7b54\u6848\u53ef\u4ee5\u53d6\u8fd9\u5f20\u4e8c\u5206\u56fe\u7684**\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d**.\n> \u5426\u5219\u7684\u8bdd\uff0c\u8bf4\u660e\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d\u5c0f\u4e8e\u7b54\u6848\uff0c\u4e5f\u5c31\u662f\u8bf4**\u7b54\u6848\u7ed9\u51fa\u4e86\u4e00\u79cd\u5206\u914d\u70b9\u6743\u7684\u65b9\u5f0f\u5927\u4e8e\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d**\uff0c\u8fd9\u65f6\u9ed1\u8fb9\u4e00\u5b9a\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c**\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u6761\u9ed1\u8fb9\u3001\u767d\u8fb9\u4ea4\u66ff\u7684\uff0c\u4e14\u7531\u767d\u8fb9\u6784\u6210\u5f00\u59cb\u548c\u7ed3\u5c3e\u7684\u8def\u5f84**\uff0c\u5c06\u5947\u6570\u70b9\u70b9\u6743 $-1$\uff0c\u5076\u6570\u70b9\u70b9\u6743 $+1$\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u66f4\u5c0f\u7684\u7b54\u6848\uff0c\u8fd9\u5c31\u77db\u76fe\u4e86.\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528 $\\texttt{Kuhn-Munkres}$ \u7b97\u6cd5\u6c42\u89e3**\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d**\u5373\u53ef.\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u5f97 $100$ \u5206\u7684\u6210\u7ee9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(n^8)$\uff0c\u5e38\u6570\u6781\u5c0f\uff0c\u74f6\u9888\u5728\u6c42\u89e3\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5b8c\u7f8e\u5339\u914d.\n\n\u53ef\u4ee5\u4f7f\u7528 ```BFS``` \u7248\u4f18\u5316\u5230 $\\Theta(n^6)$\uff0c\u4e0d\u8fc7\u672c\u9898\u6570\u636e\u975e\u5e38\u4e4b\u6c34\uff0c\u6240\u4ee5\u901a\u8fc7\u672c\u9898\u5df2\u7ecf\u5f88\u5145\u88d5.\n\n\u53ef\u4ee5\u53c2\u8003\u672c\u4eba\u5199\u7684\u8fd9\u4efd~~\u4e11\u964b\u7684~~\u4ee3\u7801\uff0c\u5171 ```158``` \u884c\uff0c\u6700\u5927\u6d4b\u8bd5\u70b9\u7528\u65f6 ```29ms(C++)/15ms(O2)```.\n\n```\n#include<bits/stdc++.h>\n#define rep(a,b,c) for(register int a=(b);a<=(c);++a)\n#define dow(a,b,c) for(register int a=(b);a>=(c);--a)\nusing namespace std;\nconst int MaxN=50+5,MaxK=3000+5,Inf=(1<<24)-1;\nint val[MaxK][MaxK],cdx[MaxK],cdy[MaxK],mat[MaxK];\nbool inx[MaxK],iny[MaxK];\ninline void CastLightUpon(const register int u,const register int v,const register int w)\n\t{val[u][v]=w;}\ninline bool Dfs(const register int len,const register int u)\n{\n\tinx[u]=true;\n\trep(i,1,len)\n\t{\n\t\tif(iny[i]) continue;\n\t\tif(cdx[u]+cdy[i]==val[u][i])\n\t\t{\n\t\t\tiny[i]=true;\n\t\t\tif(!mat[i]||Dfs(len,mat[i]))\n\t\t\t{\n\t\t\t\tmat[i]=u;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\ninline int KuhnMunkres(const register int len)\n{\n\trep(i,1,len)\n\t{\n\t\tcdx[i]=-Inf;\n\t\trep(j,1,len)\n\t\t\tcdx[i]=max(cdx[i],val[i][j]);\n\t}\n\trep(u,1,len)\n\t{\n\t\twhile(!Dfs(len,u))\n\t\t{\n\t\t\tregister int Delta=+Inf;\n\t\t\trep(i,1,len)\n\t\t\t{\n\t\t\t\tif(!inx[i]) continue;\n\t\t\t\trep(j,1,len)\n\t\t\t\t{\n\t\t\t\t\tif(iny[j]) continue;\n\t\t\t\t\tDelta=min(Delta,(cdx[i]+cdy[j])-val[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\trep(i,1,len) if(inx[i]) cdx[i]-=Delta;\n\t\t\trep(i,1,len) if(iny[i]) cdy[i]+=Delta;\n\t\t\trep(i,1,len) inx[i]=false;\n\t\t\trep(i,1,len) iny[i]=false;\n\t\t}\n\t}\n\tregister int Sum=0;\n\trep(i,1,len) Sum+=val[mat[i]][i];\n\treturn Sum;\n}\nstruct Vertex\n{\n\tint dep,fa;\n\tint Rev;\n\tint head;\n};\nVertex vt[MaxN];\nstruct Edge\n{\n\tint u;\n\tint v;\n\tint w;\n\tint next;\n};\nEdge ed[MaxN<<1];\ninline void add_edge(const register int u,const register int v,const register int w,const register int pos)\n{\n\ted[pos].u=u;\n\ted[pos].v=v;\n\ted[pos].w=w;\n\ted[pos].next=vt[u].head;\n\tvt[u].head=pos;\n}\ninline void Dfs_Basics(const register int u)\n{\n\tregister int v;\n\tfor(register int e=vt[u].head;e;e=ed[e].next)\n\t{\n\t\tv=ed[e].v;\n\t\tif(v==vt[u].fa)\n\t\t\tcontinue;\n\t\tvt[v].dep=(vt[u].dep+1);\n\t\tvt[v].fa=u,vt[v].Rev=e;\n\t\tDfs_Basics(v);\n\t}\n}\nvector<int> vec;\ninline void LeastCommonAncestor(const register int u,const register int v)\n{\n\tvec.clear(),vec.push_back(0);\n\tregister int tu=u,tv=v;\n\twhile(tu!=tv)\n\t{\n\t\tif(vt[tu].dep<vt[tv].dep)\n\t\t\tswap(tu,tv);\n\t\t++vec[0],vec.push_back(vt[tu].Rev);\n\t\ttu=vt[tu].fa;\n\t}\n}\nint Disk[MaxN][MaxN],Loadx[MaxN][MaxN],Loady[MaxN][MaxN];\nbool flag[MaxN][MaxN];\nint main()\n{\n\tregister int n,m,k;\n\tscanf(\"%d%d\",&n,&m);\n\tregister int u,v,w,tot=1;\n\trep(i,1,m)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tDisk[u][v]=Disk[v][u]=w;\n\t}\n\trep(i,2,n)\n\t{\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd_edge(u,v,Disk[u][v],++tot),flag[u][v]=true;\n\t\tadd_edge(v,u,Disk[v][u],++tot),flag[v][u]=true;\n\t}\n\tregister int TreeRoot=1;\n\tDfs_Basics(TreeRoot);\n\tregister int cntx=0,cnty=0;\n\trep(i,1,n)\n\t\trep(j,i,n)\n\t\t{\n\t\t\tif(Disk[i][j]==0)\n\t\t\t\tcontinue;\n\t\t\tif(flag[i][j])\n\t\t\t\tLoady[i][j]=Loady[j][i]=++cnty;\n\t\t\telse\n\t\t\t\tLoadx[i][j]=Loadx[j][i]=++cntx;\n\t\t}\n\tk=max(cntx,cnty);\n\trep(i,1,n)\n\t\trep(j,i,n)\n\t\t{\n\t\t\tif(Disk[i][j]==0)\n\t\t\t\tcontinue;\n\t\t\tif(flag[i][j])\n\t\t\t\tcontinue;\n\t\t\tLeastCommonAncestor(i,j);\n\t\t\trep(z,1,vec[0])\n\t\t\t{\n\t\t\t\tu=ed[vec[z]].u,v=ed[vec[z]].v;\n\t\t\t\tCastLightUpon(Loadx[i][j],Loady[u][v],Disk[u][v]-Disk[i][j]);\n\t\t\t}\n\t\t}\n\tregister int Answer=KuhnMunkres(k);\n\tprintf(\"%d\\n\",Answer);\n\treturn 0;\n}\n```",
        "postTime": 1617112038,
        "uid": 130897,
        "name": "\u7480\u74a8\u661f\u7a7a1",
        "ccfLevel": 9,
        "title": "\u3010\u521d\u4e8c\u3011\u6d1b\u8c37 P4412 \u9898\u89e3"
    },
    {
        "content": "\u6b63\u9898\n      \n      [https://blog.csdn.net/Deep_Kevin/article/details/84786736](\u539f\u6587)\n\n\u00a0 \u00a0 \u00a0 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u8def\uff1a\n\n\u00a0 \u00a0 \u00a0 1.\u6211\u4eec\u4e0d\u53ef\u80fd\u7ed9\u4e00\u6761\u751f\u6210\u6811\u8fb9\u589e\u52a0\u4e00\u4e2a\u6570\u3002\u8fd9\u6837\u53ea\u4f1a\u4f7f\u7684\u751f\u6210\u6811\u7684\u6743\u503c\u53d8\u5927\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e0d\u9009\u6811\u8fb9\u7684\u751f\u6210\u6811\uff0c\u76f8\u5bf9\u6765\u8bf4\u53d8\u5f97\u53ef\u80fd\u66f4\u5c0f\u3002\n\n\u00a0 \u00a0 \u00a02.\u6211\u4eec\u4e5f\u4e0d\u53ef\u80fd\u7ed9\u4e00\u6761\u975e\u751f\u6210\u6811\u8fb9\u51cf\u53bb\u4e00\u4e2a\u6570\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u4f7f\u5f97\u4e0d\u9009\u6811\u8fb9\u7684\u751f\u6210\u6811\u6743\u503c\u53d8\u5c0f\uff0c\u4ece\u800c\u53d8\u5f97\u6ca1\u6709\u90a3\u4e48\u4f18\u79c0\u3002\n\n\u00a0 \u00a0 \u00a0\u90a3\u4e48\u5f88\u597d\u7406\u89e3\u4e0a\u9762\u7684\u4e24\u6761\u8d2a\u5fc3\u201c\u6cd5\u5219\u201d\u4e4b\u540e\uff0c\u6211\u4eec\u8981\u6784\u9020\u51e0\u7ec4\u7ea6\u675f\uff0c\u4f7f\u5f97\u7b54\u6848\u4f7f\u6211\u4eec\u6240\u9700\u8981\u7684\u3002\n\n\u00a0 \u00a0 \u00a0\u6211\u4eec\u5047\u8bbe\u662f\u7b2ci\u6761\u7684\u8fb9\u7684\u53d8\u5316\u91cf\uff08\u5f53\u7136\uff0c\u751f\u6210\u6811\u8fb9\u8868\u793a\u51cf\u5c11\u7684\uff0c\u975e\u751f\u6210\u6811\u8fb9\u662f\u589e\u52a0\u7684\uff09\u3002\n\n\u00a0 \u00a0 \u00a0\u5bf9\u4e8e\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u80af\u5b9a\u5bf9\u5e94\u7740\u751f\u6210\u6811\u8fb9\u4e0a\u7684\u4e00\u4e2a\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u6761\u8def\u5f84\u4e0e\u8fd9\u6761\u975e\u6811\u8fb9\u6210\u4e3a\u4e00\u4e2a\u73af\u3002\n\n\u00a0 \u00a0 \u00a0\u5bf9\u4e8e\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u4efb\u4f55\u4e00\u6761\u8fb9i\uff0c\u6743\u503c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u975e\u6811\u8fb9j\u7684\u6743\u503c\u3002\n\n\u00a0 \u00a0 \u00a0\u6240\u4ee5\u3002\n\n\u00a0 \u00a0 \u00a0\u53d8\u5f62\u91d1\u521a\n\n\u00a0 \u00a0 \u00a0\u8fd9\u4e2a\u65f6\u5019\uff0c\u5f88\u591a\u4eba\u5c31\u4f1a\u9009\u62e9\u7528\u6700\u5c0f\u9876\u6807\u548c(KM\uff0c\u4e8c\u5206\u56fe\u6700\u4f18\u5339\u914d)\u6765\u89e3\u51b3\u3002\n\n\u00a0 \u00a0 \u00a0\u5176\u5b9e\uff0c\u7ebf\u6027\u89c4\u5212\u4e5f\u662f\u5f88\u597d\u505a\u7684\u3002\n\n\u00a0 \u00a0 \u00a0\u90a3\u4e48\u5c31\u4e00\u5171\u6700\u591a\u6709\u6761\u7ea6\u675f\uff0c\u6bcf\u6761\u7ea6\u675f\u6709m\u4e2a\u975e\u57fa\u53d8\u91cf\uff08\u987a\u4fbf\u544a\u8bc9\u60a8\u4eec\u6d1b\u8c37\u7684\u8fb9\u6570\u662f\u5047\u7684\uff09\u3002\n\n\u00a0 \u00a0 \u00a0\u4f46\u662f\u53ef\u80fd\u4f1a\u7206\u7a7a\u95f4\uff08\u6d1b\u8c37\u7684\u7f16\u8bd1\u5668\u5341\u5206\u4f18\u79c0\uff0c\u4e0d\u4f1a\u7206\uff09\u3002\n\n\u00a0 \u00a0 \u00a0\u6211\u4eec\u5c31\u7528map\u6765\u8fdb\u884c\u5b58\u50a8\uff0c\u5728\u505a\u5355\u7eaf\u5f62\u7b97\u6cd5\u4e4b\u524d\u5bf9\u5076\u4e00\u4e0b\u5373\u53ef\u3002\n\n\u4ee3\u7801<\u5438\u53e3\u6c27\u6c14416ms>\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<iostream>\n#include<map>\n#include<cmath>\nusing namespace std;\n\nint n,m;\nint num[55][55],d[1555];\nbool tf[1555];\nbool we=false;\nmap<int , double> a[1555];\ndouble eps=1e-8;\nint tot=0;\n\nvoid find_loop(int x,int fa,int end,int T){\n    if(x==end){\n        we=true;\n        return ;\n    }\n    for(int i=1;i<=n;i++){\n        if(tf[num[x][i]] && i!=fa){\n            find_loop(i,x,end,T);\n            if(we){\n                tot++;a[num[x][i]][tot]=a[T][tot]=1;a[0][tot]=d[num[x][i]]-d[T];\n                break;\n            }\n        }\t\n    }\n}\n\nvoid pivot(int x,int y){\n    double temp=a[x][y];a[x][y]=1;\n    for(int i=0;i<=tot;i++) if(fabs(a[x][i])>eps)a[x][i]/=temp;\n    for(int i=0;i<=m;i++) if(x!=i){\n    \tif(fabs(a[i][y])<=eps) continue;\n        temp=a[i][y];a[i][y]=0;\n        for(int j=0;j<=tot;j++) \n            if(fabs(a[x][j])>eps) a[i][j]-=temp*a[x][j];\n            else a[x].erase(j);\n    }\n}\n\nvoid simplex(){\n    double mmin;\n    int x,y;\n    while(true){\n        x=y=0;\n        for(int i=1;i<=tot;i++) if(a[0][i]>eps && (y==0 || a[0][i]>a[0][y])) y=i;\n        if(y==0) break;\n        mmin=(double)1e15;\n        for(int i=1;i<=m;i++) if(a[i][y]>eps && a[i][0]/a[i][y]<mmin) x=i,mmin=a[i][0]/a[i][y];\n        if(x==0) break;\n        pivot(x,y);\t\n    }\n}\n\nint main(){\n    scanf(\"%d %d\",&n,&m);\n    int x,y;\n    for(int i=1;i<=m;i++){\n        scanf(\"%d %d %d\",&x,&y,&d[i]);\n        num[x][y]=num[y][x]=i;\n    }\n    for(int i=1;i<=n-1;i++){\n        scanf(\"%d %d\",&x,&y);\n        tf[num[x][y]]=true;\n    }\n    for(int i=1;i<=m;i++) a[i][0]=1;\n    for(int i=1;i<=n;i++)\n        for(int j=1;j<i;j++){\n            if(!num[i][j]) continue;\n            if(!tf[num[i][j]]){\n                we=false;\n                find_loop(i,0,j,num[i][j]);\n            }\n        }\n    simplex();\n    if(fabs(a[0][0])>eps)printf(\"%.0lf\",-a[0][0]);\n    else printf(\"0\");\n}\n```",
        "postTime": 1543900912,
        "uid": 29093,
        "name": "Deep_Kevin",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4412 \u3010[SHOI2004]\u6700\u5c0f\u751f\u6210\u6811\u3011"
    }
]