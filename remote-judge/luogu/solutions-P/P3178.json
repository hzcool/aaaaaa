[
    {
        "content": "\u6811\u94fe\u5256\u5206\u56fa\u7136\u53ef\u4ee5\u641e\u3002\n\n\u4f46\u8fd8\u6709\u53e6\u4e00\u79cd\u505a\u6cd5\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u589e\u52a0\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u4f1a\u5bf9\u4ee5\u5b83\u4e3a\u6839\u7684\u6574\u68f5\u5b50\u6811\u90fd\u6709\u5f71\u54cd\uff0c\u76f8\u5f53\u4e8e\u7ed9\u6574\u68f5\u5b50\u6811\u589e\u52a0\u4e00\u4e2a\u503c\u3002\n\n\u800c\u7ed9\u4ee5\u67d0\u4e00\u8282\u70b9 x \u4e3a\u6839\u7684\u5b50\u6811\u589e\u52a0\u4e00\u4e2a\u6743\u503c\u4e5f\u4f1a\u5f71\u54cd\u5f53\u524d\u5b50\u6811\uff0c\u8282\u70b9 y \u6240\u589e\u52a0\u7684\u503c\u4e3a dis[y] \\* z - (dis[x] - 1) \\* z\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u589e\u52a0 -(dis[x] - 1) \\* z \uff0c\u8be2\u95ee\u65f6\u53ea\u7528\u52a0\u4e0a dis[y] \\* y \u548c\u5f53\u524d\u8282\u70b9 y \u7684\u6743\u503c\u3002\n\n\u7ed9\u6574\u68f5\u5b50\u6811\u589e\u52a0\u4e00\u4e2a\u6743\u503c\u53ef\u4ee5\u7528 dfs \u5e8f + \u7ebf\u6bb5\u6811\u641e\uff0c dis \u6570\u7ec4\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\u3002\n\n\u2014\u2014\u4ee3\u7801\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define LL long long\n#define root 1, 1, n\n#define ls now << 1, l, mid\n#define rs now << 1 | 1, mid + 1, r\nusing namespace std;\nconst int MAXN = 100001;\nint n, m, cnt, tot;\nint head[MAXN], next[MAXN << 1], to[MAXN << 1], tid[MAXN], size[MAXN];\nLL a[MAXN << 2], b[MAXN << 2], val[MAXN], dis[MAXN];\ninline void add(int x, int y)\n{\n    to[cnt] = y;\n    next[cnt] = head[x];\n    head[x] = cnt++;\n} \ninline void dfs(int u)\n{\n    int i, v; \n    tid[u] = ++tot;\n    size[u] = 1;\n    for(i = head[u]; i != -1; i = next[i])\n    {\n        v = to[i];\n        if(!size[v])\n        {\n            dis[v] = dis[u] + 1;\n            dfs(v);\n            size[u] += size[v];\n        }\n    }\n}\ninline void push_down(int now)\n{\n    a[now << 1] += a[now];\n    a[now << 1 | 1] += a[now];\n    b[now << 1] += b[now];\n    b[now << 1 | 1] += b[now];\n    a[now] = b[now] = 0;\n}\ninline void update(LL x, LL y, int ql, int qr, int now, int l, int r)\n{\n    if(ql <= l && r <= qr)\n    {\n        a[now] += x;\n        b[now] += y;\n        return;\n    }\n    push_down(now);\n    int mid = (l + r) >> 1;\n    if(ql <= mid) update(x, y, ql, qr, ls);\n    if(mid < qr) update(x, y, ql, qr, rs);\n}\ninline LL query(int u, int x, int now, int l, int r)\n{\n    if(l == r) return dis[u] * a[now] + b[now];\n    push_down(now);\n    int mid = (l + r) >> 1;\n    if(x <= mid) return query(u, x, ls);\n    else return query(u, x, rs);\n}\nint main()\n{\n    int i, x, z;\n    LL y;\n    scanf(\"%d %d\", &n, &m);\n    for(i = 1; i <= n; i++)    scanf(\"%lld\", &val[i]);\n    memset(head, -1, sizeof(head));\n    for(i = 1; i < n; i++)\n    {\n        scanf(\"%d %d\", &x, &y);\n        add(x, y);\n        add(y, x);\n    }\n    dis[1] = 1;\n    dfs(1);\n    for(i = 1; i <= n; i++) update(0, val[i], tid[i], tid[i] + size[i] - 1, root);\n    for(i = 1; i <= m; i++)\n    {\n        scanf(\"%d %d\", &z, &x);\n        if(z == 1)\n        {\n            scanf(\"%lld\", &y);\n            update(0, y, tid[x], tid[x] + size[x] - 1, root);\n        }\n        else if(z == 2)\n        {\n            scanf(\"%lld\", &y);\n            update(y, -((dis[x] - 1) * y), tid[x], tid[x] + size[x] - 1, root);\n        }\n        else printf(\"%lld\\n\", query(x, tid[x], root));\n    }\n    return 0;\n}\n```",
        "postTime": 1493945593,
        "uid": 8220,
        "name": "zht467",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u849f\u84bb\u6211\u53c8\u5f00\u59cb\u5199\u9898\u89e3\u4e86\n\n> \u662f\u65f6\u5019\u5b89\u5229\u535a\u5ba2\u4e86\uff1a<https://yjzoier.gitee.io/hexo/p/1d27.html>\n\n## \u9898\u76ee\u63cf\u8ff0\n\n\u6709\u4e00\u68f5\u70b9\u6570\u4e3a N \u7684\u6811\uff0c\u4ee5\u70b9 1 \u4e3a\u6839\uff0c\u4e14\u6811\u70b9\u6709\u8fb9\u6743\u3002\u7136\u540e\u6709 M \u4e2a\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e09\u79cd\uff1a\n\n- \u64cd\u4f5c 1 \uff1a\u628a\u67d0\u4e2a\u8282\u70b9 x \u7684\u70b9\u6743\u589e\u52a0 a \u3002\n- \u64cd\u4f5c 2 \uff1a\u628a\u67d0\u4e2a\u8282\u70b9 x \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u90fd\u589e\u52a0 a \u3002\n- \u64cd\u4f5c 3 \uff1a\u8be2\u95ee\u67d0\u4e2a\u8282\u70b9 x \u5230\u6839\u7684\u8def\u5f84\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c\u3002\n\n<https://www.luogu.org/problemnew/show/P3178>\n\n## Solution\n\n\u8fd9\u662f\u4e00\u9053\u6570\u636e\u7ed3\u6784\u7684\u9898\u76ee\uff0c\u5f53\u7136\u4f1a**\u6811\u5256**\u7684\u540c\u5b66\u53ef\u4ee5\u76f4\u63a5\u770b\u4f5c\u6a21\u677f\u9898\uff1b\n\n\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u4e0d\u540c\u4e8e\u6811\u5256\u7684\u65b9\u6cd5\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u6982\u5ff5\uff1a**\u6b27\u62c9\u5e8f**\uff0c\u8fd9\u662f *DFS* \u5e8f\u7684\u4e00\u79cd\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n> ![tree](https://i.loli.net/2019/01/13/5c3acf8ac094b.jpg)\n>\n> \u8fd9\u6837\u7684\u4e00\u68f5\u6811\uff0c\u5b83\u7684\u6b27\u62c9\u5e8f\u5c31\u662f ***1 2 4 4 5 5 2 3 6 6 7 7 8 8 3 1***\n\n\u663e\u7136\uff0c\u6bcf\u4e2a\u70b9\u5728\u6b27\u62c9\u5e8f\u4e2d\u51fa\u73b0\u4e86 $2$ \u6b21\uff1b\u6b27\u62c9\u5e8f\u6709\u4e00\u4e2a\u975e\u5e38\u4f18\u8d8a\u7684\u6027\u8d28\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u51fa\u73b0\u8bb0\u4f5c `+`\uff0c\u7b2c\u4e8c\u6b21\u51fa\u73b0\u8bb0\u4f5c `-`\uff0c\u90a3\u4e48**\u6839\u8282\u70b9\u5230\u4efb\u610f\u8282\u70b9\u7684\u6743\u503c\u548c\u5728\u6b27\u62c9\u5e8f\u4e0a\u5bf9\u5e94\u4e00\u4e2a\u524d\u7f00\u548c**\uff0c\u8fd9\u4e2a\u6027\u8d28\u975e\u5e38\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u6b27\u62c9\u5e8f\u5176\u5b9e\u53c8\u53eb\"\u51fa\u6808\u5165\u6808\u5e8f\"\uff0c\u6240\u4ee5\u524d\u7f00\u4e2d\u5c1a\u672a\u62b5\u6d88\u6389\u7684\u70b9\u5728 DFS \u5230\u5f53\u524d\u70b9\u65f6\u5728\u6808\u4e2d\uff0c\u90a3\u4e48\u5176\u80af\u5b9a\u5728\u5f53\u524d\u70b9\u5230\u6839\u7684\u8def\u5f84\u4e2d\u3002\n\n> \u8fd9\u4e00\u6bb5\u63cf\u8ff0\u6709\u70b9\u62bd\u8c61\uff0c\u4ee5\u521a\u624d\u90a3\u68f5\u6811\u2191\u4e3a\u4f8b\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6807\u4e0a\u7b26\u53f7\uff0c\u90a3\u4e48\u6b64\u65f6\u6b27\u62c9\u5e8f\u5176\u5b9e\u5c31\u662f\u8fd9\u6837\u7684\uff08\u8bbe\u6743\u503c\u4e3a $a_i$\uff09\n>\n> $+a_1, +a_2, +a_4, -a_4, +a_5, -a_5, -a_2, +a_3, +a_6, -a_6, +a_7, -a_7, +a_8, -a_8, -a_3, -a_1$\n>\n> \u5982\u679c\u6211\u4eec\u8981\u8ba1\u7b97\u70b9 5 \u5230\u6839\u8282\u70b9\u7684\u6743\u503c\u548c\uff0c\u5176\u5b9e\u5c31\u662f\n>\n> $+a_1, +a_2, +a_4, -a_4, +a_5$\n\n\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b8c\u6210\u64cd\u4f5c 1 \u548c\u64cd\u4f5c 3.\u53ef\u662f\u64cd\u4f5c 2 \u5c31\u6bd4\u8f83\u9ebb\u70e6\u4e86\uff0c\u56e0\u4e3a\u6709\u4e9b\u662f\u8981 $+a$ \u7684\uff0c\u6709\u4e9b\u662f\u8981 $-a$ \u7684\uff0c\u65e0\u6cd5\u76f4\u63a5\u5feb\u901f\u8ba1\u7b97\u51fa $+a$ \u5bf9\u4e8e\u67d0\u4e2a\u533a\u95f4\u7684\u5f71\u54cd\uff1b\u8fd9\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u5c0f\u5c0f\u7684\u53d8\u5316\uff0c\u5176\u5b9e\u4e00\u4e2a\u533a\u95f4\u53d7\u5230 $+a$ \u7684\u5f71\u54cd\u5c31\u662f $a \\times$ (\u8be5\u533a\u95f4\u5185 + \u7684\u4e2a\u6570 - \u8be5\u533a\u95f4\u5185 - \u7684\u4e2a\u6570)\n\n\u6700\u540e\u662f\u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 100007;\n\nint n, m, a[N], tid[N], tif[N], num[N << 1], stamp;\nint ecnt, head[N], vet[N << 1], nxt[N << 1];\nll val[N << 3], tag[N << 3];\nstruct DFN{int f, v;} dfspath[N << 1];\n\nvoid eadd(int u, int v){\n    vet[++ecnt] = v;\n    nxt[ecnt] = head[u];\n    head[u] = ecnt;\n}\n\nvoid dfs(int u, int f){\n    dfspath[ tid[u] = ++stamp].f = 1;\n    dfspath[stamp].v = u;\n    for (int e = head[u]; e; e = nxt[e])   \n        if (vet[e] != f) dfs(vet[e], u);\n    dfspath[ tif[u] = ++stamp].f = -1;\n    dfspath[stamp].v = u;\n}\n\nvoid pushdown(int rt, int l, int m, int r){\n    if (tag[rt]){\n        val[rt << 1] += tag[rt] * (num[m] - num[l-1]);\n        val[rt << 1 | 1] += tag[rt] * (num[r] - num[m]);\n        tag[rt << 1] += tag[rt]; \n        tag[rt << 1 | 1] += tag[rt];\n        tag[rt] = 0;\n    }\n}\n\nvoid build(int rt, int l, int r){\n    if (l == r) {\n        val[rt] = dfspath[l].f * a[dfspath[l].v];\n        return;\n    }\n    int m = (l + r) >> 1;\n    build(rt << 1, l, m);\n    build(rt << 1 | 1, m+1, r);\n    val[rt] = val[rt << 1] + val[rt << 1 | 1];\n}\n\nvoid Update(int rt, int l, int r, int x, int c){\n    val[rt] += c;\n    if (l == r) return;\n    int m = (l + r) >> 1;\n    if (x <= m) Update(rt << 1, l, m, x, c);\n    else Update(rt << 1 | 1, m+1, r, x, c);\n}\n\nvoid Change(int rt, int l, int r, int p, int q, int c){\n    if (p <= l && r <= q){\n        tag[rt] += c;\n        val[rt] += (ll)c * (num[r] - num[l-1]);\n        return;\n    }\n    int m = (l + r) >> 1;\n    pushdown(rt, l, m, r);\n    if (p <= m) Change(rt << 1, l, m, p, q, c);\n    if (q > m) Change(rt << 1 | 1, m+1, r, p, q, c);\n    val[rt] = val[rt << 1] + val[rt << 1 | 1];\n}\n\nll Query(int rt, int l, int r, int p, int q){\n    if (p <= l && r <= q) return val[rt];\n    int m = (l + r) >> 1; ll res = 0;\n    pushdown(rt, l, m, r);\n    if (p <= m) res += Query(rt << 1, l, m, p, q);\n    if (q > m) res += Query(rt << 1 | 1, m+1, r, p, q);\n    return res;\n}\n\nint main(){\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) scanf(\"%d\", &a[i]);\n    for (int i = 1; i < n; ++i){\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        eadd(u, v); eadd(v, u);\n    }\n    dfs(1, 0);\n    for (int i = 1; i <= stamp; ++i)\n        num[i] = num[i-1] + dfspath[i].f;\n    build(1, 1, n + n);\n    while (m--){\n        int opt, x, a; scanf(\"%d\", &opt);\n        if (opt == 1) {\n            scanf(\"%d%d\", &x, &a);\n            Update(1, 1, n + n, tid[x], +a);\n            Update(1, 1, n + n, tif[x], -a);\n        } else if (opt == 2) {\n            scanf(\"%d%d\", &x, &a);\n            Change(1, 1, n + n, tid[x], tif[x], a);\n        } else {\n            scanf(\"%d\", &x);\n            printf(\"%lld\\n\", Query(1, 1, n + n, 1, tid[x]));\n        }\n    }\n\n    return 0;\n}\n```\n\n",
        "postTime": 1547359160,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "# \u6811\u94fe\u5256\u5206\u88f8\u4f53\n### Solution :\n1. \u6811\u5256\n   \n   \u8fd9\u4e2a\u5927\u5bb6\u5e94\u8be5\u90fd\u4f1a\u5427\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u770b\u535a\u5ba2\n   [https://www.cnblogs.com/ivanovcraft/p/9019090.html](https://www.cnblogs.com/ivanovcraft/p/9019090.html)\n\t```cpp\n    void dfs1(int u,int fa,int d){\n        f[u] = fa;\n        size[u] = 1;\n        dep[u] = d;\n        for(int i = head[u];i != -1;i = e[i].next){\n            int v = e[i].to;\n            if(v == fa)\n                continue;\n            dfs1(v,u,d + 1);\n            size[u] += size[v];\n            if(size[v] > size[son[u]])\n                son[u] = v;\n        }\n    }\n    void dfs2(int u,int t){\n        top[u] = t;\n        id[u] = ++ind;\n        a[ind] = w[u];\n        if(!son[u])\n            return;\n        dfs2(son[u],t);\n        for(int i = head[u];i != -1;i = e[i].next){\n            int v = e[i].to;\n            if(v != f[u] && v != son[u])\n                dfs2(v,v);\n        }\n    }\n   ```\n\n   \n2. \u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u533a\u95f4\u548c\n\t \n     (1). \u5bf9\u4e8e\u64cd\u4f5c1\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u7ebf\u6bb5\u6811\u7684\u5355\u70b9\u4fee\u6539\n     ```cpp\n    void addInterval(int k,int l,int r,ll val){\n        if(tree[k].l >= l && tree[k].r <= r){\n            tree[k].f += val;\n            tree[k].sum += val * (tree[k].r - tree[k].l + 1);\n            return;\n        }\n        if(tree[k].f)\n            down(k);\n        int mid = (tree[k].l + tree[k].r) / 2;\n        if(l <= mid)\n            addInterval(k * 2,l,r,val);\n        if(r > mid)\n            addInterval(k * 2 + 1,l,r,val);\n        update(k);\n    }\n    ```\n    \u6ce8\u610f\u61d2\u6807\u8bb0\u7684\u4e0b\u4f20\u4e0d\u8981\u5199\u9519\u4e86\n    ```cpp\n    void down(int k){\n        tree[k * 2].sum += tree[k].f * (tree[k * 2].r - tree[k * 2].l + 1);\n        tree[k * 2 + 1].sum += tree[k].f * (tree[k * 2 + 1].r - tree[k * 2 + 1].l + 1);\n        tree[k * 2].f += tree[k].f;\n        tree[k * 2 + 1].f += tree[k].f;\n        tree[k].f = 0;\n    }\n\t```\n    \n    (2).\u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u6211\u4eec\u77e5\u9053\u6811\u5256\u4e2d\u5df2\u7ecf\u5904\u7406\u4e86\u4e00\u4e2a\u8282\u70b9\u5b50\u6811\u7684\u5927\u5c0f(size)\u4e14\u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u7684\u7f16\u53f7(id)\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u60f3\u5230\u5bf9\u4e8eid[x]\u5230id[x]+size[x] - 1\u8fdb\u884c\u533a\u95f4\u4fee\u6539\n    ```cpp\n\tvoid addInterval(int k,int l,int r,ll val){\n      if(tree[k].l >= l && tree[k].r <= r){\n          tree[k].f += val;\n          tree[k].sum += val * (tree[k].r - tree[k].l + 1);\n          return;\n      }\n      if(tree[k].f)\n          down(k);\n      int mid = (tree[k].l + tree[k].r) / 2;\n      if(l <= mid)\n          addInterval(k * 2,l,r,val);\n      if(r > mid)\n          addInterval(k * 2 + 1,l,r,val);\n      update(k);\n  \t}\n\t```\n\t(3).\u5bf9\u4e8e\u64cd\u4f5c3\uff0c\u5c31\u662f\u5e38\u89c4\u7684\u6811\u5256\u64cd\u4f5c\u4e86\uff0c\u5bf9\u6bcf\u4e00\u6761\u94fe\u4e0a\u505a\u533a\u95f4\u6c42\u548c\u5373\u53ef\n    ```cpp\n    ll sumInterval(int k,int l,int r){\n        ll cnt = 0;\n        if(tree[k].l >= l && tree[k].r <= r)\n            return tree[k].sum;\n        if(tree[k].f)\n            down(k);\n        int mid = (tree[k].l + tree[k].r) / 2;\n        if(l <= mid)\n            cnt += sumInterval(k * 2,l,r);\n        if(r > mid)\n            cnt += sumInterval(k * 2 + 1,l,r);\n        return cnt;\n    }\n\n    ll sumTree(int x,int y){\n        int fx = top[x],fy = top[y];\n        ll ans = 0;\n        while(fx != fy){\n            if(dep[fx] >= dep[fy]){\n                ans += sumInterval(1,id[fx],id[x]);\n                x = f[fx];\n                fx = top[x];\n            }else{\n                ans += sumInterval(1,id[fy],id[y]);\n                y = f[fy];\n                fy = top[y];\n            }\n        }\n        if(id[x] <= id[y])\n            ans += sumInterval(1,id[x],id[y]);\n        else\n            ans += sumInterval(1,id[y],id[x]);\n        return ans;\n    }\n    ```\n3. \u6700\u540e\u9644\u4e0a\u5b8c\u6574\u4ee3\u7801,\u4f9b\u5404\u4f4d\u53c2\u8003\n    ```cpp\n    /*\n    Problem : luogu P3178\n    Algorithm : \u00ca\u00f7\u00c6\u00ca + \u00cf\u00df\u00b6\u00ce\u00ca\u00f7 \n    Status : AC\n    */\n    #include <bits/stdc++.h>\n    #include <cstring>\n    #include <vector>\n    #include <algorithm>\n    #include <cstdio>\n    #include <iostream>\n    using namespace std;\n    typedef long long ll;\n\n    const int INF = 0x3f3f3f3f;\n    const int MAXN = 100005;\n\n    int n,m,len,ind;\n    int head[MAXN],f[MAXN],top[MAXN],id[MAXN],size[MAXN],son[MAXN],dep[MAXN];\n    ll w[MAXN],a[MAXN];\n\n    struct Edge{\n        int to,next;\n    } e[MAXN * 2];\n\n    struct Tree{\n        int l,r;\n        ll sum,f;\n    } tree[MAXN * 4];\n\n    void add(int u,int v){\n        e[++len].to = v;\n        e[len].next = head[u];\n        head[u] = len;\n    }\n\n    void dfs1(int u,int fa,int d){\n        f[u] = fa;\n        size[u] = 1;\n        dep[u] = d;\n        for(int i = head[u];i != -1;i = e[i].next){\n            int v = e[i].to;\n            if(v == fa)\n                continue;\n            dfs1(v,u,d + 1);\n            size[u] += size[v];\n            if(size[v] > size[son[u]])\n                son[u] = v;\n        }\n    }\n\n    void dfs2(int u,int t){\n        top[u] = t;\n        id[u] = ++ind;\n        a[ind] = w[u];\n        if(!son[u])\n            return;\n        dfs2(son[u],t);\n        for(int i = head[u];i != -1;i = e[i].next){\n            int v = e[i].to;\n            if(v != f[u] && v != son[u])\n                dfs2(v,v);\n        }\n    }\n\n    void update(int k){\n        tree[k].sum = tree[k * 2].sum + tree[k * 2 + 1].sum;\n    }\n\n    void down(int k){\n        tree[k * 2].sum += tree[k].f * (tree[k * 2].r - tree[k * 2].l + 1);\n        tree[k * 2 + 1].sum += tree[k].f * (tree[k * 2 + 1].r - tree[k * 2 + 1].l + 1);\n        tree[k * 2].f += tree[k].f;\n        tree[k * 2 + 1].f += tree[k].f;\n        tree[k].f = 0;\n    }\n\n    void build(int k,int l,int r){\n        tree[k].l = l;\n        tree[k].r = r;\n        if(l == r){\n            tree[k].sum = a[l];\n            return;\n        }\n        int mid = (l + r) / 2;\n        build(k * 2,l,mid);\n        build(k * 2 + 1,mid + 1,r);\n        update(k);\n    }\n\n    void addInterval(int k,int l,int r,ll val){\n        if(tree[k].l >= l && tree[k].r <= r){\n            tree[k].f += val;\n            tree[k].sum += val * (tree[k].r - tree[k].l + 1);\n            return;\n        }\n        if(tree[k].f)\n            down(k);\n        int mid = (tree[k].l + tree[k].r) / 2;\n        if(l <= mid)\n            addInterval(k * 2,l,r,val);\n        if(r > mid)\n            addInterval(k * 2 + 1,l,r,val);\n        update(k);\n    }\n\n    ll sumInterval(int k,int l,int r){\n        ll cnt = 0;\n        if(tree[k].l >= l && tree[k].r <= r)\n            return tree[k].sum;\n        if(tree[k].f)\n            down(k);\n        int mid = (tree[k].l + tree[k].r) / 2;\n        if(l <= mid)\n            cnt += sumInterval(k * 2,l,r);\n        if(r > mid)\n            cnt += sumInterval(k * 2 + 1,l,r);\n        return cnt;\n    }\n\n    void addPoint(int k,int x,ll val){\n        if(tree[k].l == tree[k].r){\n            tree[k].sum += val;\n            return;\n        }\n        if(tree[k].f)\n            down(k);\n        int mid = (tree[k].l + tree[k].r) / 2;\n        if(x <= mid)\n            addPoint(k * 2,x,val);\n        else\n            addPoint(k * 2 + 1,x,val);\n        update(k);\n    }\n\n    ll sumTree(int x,int y){\n        int fx = top[x],fy = top[y];\n        ll ans = 0;\n        while(fx != fy){\n            if(dep[fx] >= dep[fy]){\n                ans += sumInterval(1,id[fx],id[x]);\n                x = f[fx];\n                fx = top[x];\n            }else{\n                ans += sumInterval(1,id[fy],id[y]);\n                y = f[fy];\n                fy = top[y];\n            }\n        }\n        if(id[x] <= id[y])\n            ans += sumInterval(1,id[x],id[y]);\n        else\n            ans += sumInterval(1,id[y],id[x]);\n        return ans;\n    }\n\n    int main(){\n        //freopen(\".in\",\"r\",stdin);\n        //freopen(\".out\",\"w\",stdout);\n        memset(head,-1,sizeof(head));\n        scanf(\"%d%d\",&n,&m);\n        for(int i = 1;i <= n;i++)\n            scanf(\"%lld\",&w[i]);\n        for(int i = 1;i < n;i++){\n            int x,y;\n            scanf(\"%d%d\",&x,&y);\n            add(x,y);\n            add(y,x);\n        }\n        dfs1(1,0,1);\n        dfs2(1,1);\n        build(1,1,n);\n        while(m--){\n            int op,x;\n            ll y;\n            scanf(\"%d%d\",&op,&x);\n            if(op == 1){\n                scanf(\"%lld\",&y);\n                addPoint(1,id[x],y);\n            }else if(op == 2){\n                scanf(\"%lld\",&y);\n                addInterval(1,id[x],id[x] + size[x] - 1,y);\n            }else if(op == 3)\n                printf(\"%lld\\n\",sumTree(1,x)); \n        }\n        return 0;\n    }\n\n    ```\n### \u6ce8\u610f\u5f00long long\n## \u795d\u5927\u5bb6\u4e00\u904dAC\n",
        "postTime": 1552139242,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "Solution\n---\n\u6811\u94fe\u5256\u5206\u677f\u5b50\u9898\n\u5728\u6811\u4e0a\u652f\u6301\u5355\u70b9\u4fee\u6539,\u5b50\u6811\u4fee\u6539,\u8def\u5f84\u6c42\u548c\u4e09\u79cd\u64cd\u4f5c\n\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\u4e00\u5b9a\u8981\u5f00long long!!!!\n```\n#include<bits/stdc++.h> \nusing namespace std;\n#define LL long long\nconst int maxn=500000+10;\ninline LL gi(){\n    char ch=getchar();LL x=0,q=0;\n    while(ch<'0' || ch>'9') ch=='-'?q=1:0,ch=getchar();\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\n    return q?(-x):x;\n}\n#define mid ((l+r)>>1)  \n#define lson rt<<1,l,mid\n#define rson rt<<1|1,mid+1,r\n#define len (r-l+1)\nLL n,m;\nstruct Edge{\n\tLL next,to;\n\t\n}h[maxn<<1];\nLL head[maxn<<1];\nLL tot,to[maxn],w[maxn],wt[maxn];\nLL a[maxn<<2],laz[maxn<<2];\nLL son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn]; \nLL res=0;\ninline void Add(LL u,LL v){\n\th[++tot].next=head[u];\n\th[tot].to=v;\n\thead[u]=tot;\n}\ninline void pushdown(LL rt,LL lenn){\n    laz[rt<<1]+=laz[rt];\n    laz[rt<<1|1]+=laz[rt];\n    a[rt<<1]+=laz[rt]*(lenn-(lenn>>1));\n    a[rt<<1|1]+=laz[rt]*(lenn>>1);\n    laz[rt]=0;\n}\ninline void build(LL rt,LL l,LL r){\n    if(l==r){\n        a[rt]=wt[l];\n        return;\n    }\n    build(lson);\n    build(rson);\n    a[rt]=(a[rt<<1]+a[rt<<1|1]);\n}\ninline void query(LL rt,LL l,LL r,LL L,LL R){\n    if(L<=l&&r<=R){\n\t\tres+=a[rt];\n\t\treturn;\n\t}\n    else{\n        if(laz[rt])pushdown(rt,len);\n        if(L<=mid)query(lson,L,R);\n        if(R>mid)query(rson,L,R);\n    }\n}\ninline void update(LL rt,LL l,LL r,LL L,LL R,LL k){\n    if(L<=l&&r<=R){\n        laz[rt]+=k;\n        a[rt]+=k*len;\n    }\n    else{\n        if(laz[rt])pushdown(rt,len);\n        if(L<=mid)update(lson,L,R,k);\n        if(R>mid)update(rson,L,R,k);\n        a[rt]=(a[rt<<1]+a[rt<<1|1]);\n    }\n}\ninline LL qRange(LL x,LL y){\n    LL ans=0;\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])swap(x,y);\n        res=0;\n        query(1,1,n,id[top[x]],id[x]);\n        ans+=res; \n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y])swap(x,y);\n    res=0;\n    query(1,1,n,id[x],id[y]);\n    ans+=res;\n    return ans;\n}\ninline void updSon(LL x,LL k){\n    update(1,1,n,id[x],id[x]+siz[x]-1,k);\n}\n\ninline void dfs1(LL x,LL f,LL deep){\n    dep[x]=deep; \n    fa[x]=f;\n    siz[x]=1; \n    LL maxson=-1;\n    for(LL i=head[x];i;i=h[i].next){\n        LL y=h[i].to;\n        if(y==f)continue;\n        dfs1(y,x,deep+1); \n        siz[x]+=siz[y]; \n        if(siz[y]>maxson)son[x]=y,maxson=siz[y];\n    }\n}\n\ninline void dfs2(LL x,LL topf){\n    id[x]=++cnt;\n    wt[cnt]=w[x];\n    top[x]=topf;\n    if(!son[x])return;\n    dfs2(son[x],topf);\n    for(LL i=head[x];i;i=h[i].next){\n        LL y=h[i].to;\n        if(y==fa[x]||y==son[x])continue;\n        dfs2(y,y);\n    }\n}\n\nint main(){\n    n=gi();m=gi();\n    for(LL i=1;i<=n;i++)w[i]=gi();\n    for(LL i=1;i<n;i++){\n        LL a,b;\n\t\ta=gi();b=gi();\n        Add(a,b);\n\t\tAdd(b,a);\n    }\n    dfs1(1,0,1);\n    dfs2(1,1);\n    build(1,1,n);\n    while(m--){\n        LL k,x,y,z;\n        k=gi();\n        if(k==1){\n            x=gi();y=gi();\n\t\t\tupdate(1,1,n,id[x],id[x],y);\n\t\t}\n        else if(k==2){\n            x=gi();y=gi();\n            updSon(x,y);\n        }\n        else{\n            x=gi();\n            printf(\"%ld\\n\",qRange(1,x));\n        }\n    }\n\treturn 0;\n}\n\n\n```",
        "postTime": 1519558946,
        "uid": 61360,
        "name": "KingBenQi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u6765\u4e00\u6ce2**\u6811\u5256+\u8d85(du)\u7ea7(liu)\u6811\u72b6\u6570\u7ec4**\u7684\u9898\u89e3\uff0c\u4ee3\u7801\u77ed\uff0c\u4e0b\u9762\u8be6\u7ec6\u4ecb\u7ecd\n\n\n\n------------\n# \u4ec0\u4e48\u662f\u6811\u5256\uff1f\n\u4f17\u6240\u5468\u77e5\uff0c\u5728\u4e00\u9897\u6811\u4e2d\uff0c\u6bcf\u4e2a\u975e\u6839\u8282\u70b9\u90fd\u6709**\u552f\u4e00\u7684\u7236\u4eb2**\uff0c\u5374\u6709\u53ef\u80fd\u6709**\u5f88\u591a\u7684\u513f\u5b50**\u3002\u6240\u8c13\u6811\u5256\uff0c\u662f\u8ba9\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\uff0c\u90fd\u6311\u9009\u4e00\u4e2a**\u6700\u504f\u7231\u7684\u513f\u5b50**\uff0c\u5e76\u4e14dfs\u4f18\u5148\u641c\u7d22\u5b83\n\n\u56e0\u4e3a\u5177\u4f53\u600e\u4e48\u504f\u7231\u7684\u4e0d\u540c\uff0c\n\u4e00\u9897\u6811\u6709\u5f88\u591a\u79cd\u5256\u5206\u65b9\u5f0f\uff0c\u50cf\u8fd9\u6837\n\n![\u4e00\u9897\u6811\u76843\u79cd\u5256\u5206](https://cdn.luogu.com.cn/upload/pic/46897.png)\n\n\u522b\u5fd8\u4e86\u6211\u4eec\u4f18\u5148\u641c\u7d22\u6700\u504f\u7231\u7684\u513f\u5b50\uff0c\u6bcf\u4e2a\u70b9\u8d4b\u4e88\u5c5e\u6027dfn\u4e3a\u65f6\u95f4\u6233\n![\u52a0\u4e0a\u65f6\u95f4\u6233](https://cdn.luogu.com.cn/upload/pic/46898.png)\n\n\u89c2\u5bdf\u5230\uff0c\u65e0\u8bba\u600e\u4e48\u5256\u5206\uff0c\u6709\uff1a\n1. \u6bcf\u4e2a\u70b9\u88ab\u552f\u4e00\u5730\u653e\u5728\u4e00\u6839\u94fe\u4e2d\uff08\u4e00\u4e2a\u70b9\u4e5f\u7b97\u94fe\uff09\n1. \u6240\u6709\u94fe\u7684\u603b\u957f\u5ea6\uff08\u957f\u5ea6\u5b9a\u4e49\u4e3a\u94fe\u7684\u9876\u70b9\u4e2a\u6570\uff09\u4e3an\n1. \u540c\u4e00\u6839\u94fe\u4e0a\u7684dfn\u5177\u6709**\u8fde\u7eed\u6027**\uff01\uff01\uff01\uff08\u8fd9\u4e00\u70b9\u7528\u4e8e\u672c\u9898\u64cd\u4f5c3\uff09\n1. \u5b9a\u4e49\u4e00\u4e2a\u70b9c\u7684\u91cd\u91cf\u4e3a\u5b83\u5b50\u6811\u4e2d\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u5b83\u5b50\u5b59\u7684dfn\uff0c\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u5de6\u7aef\u70b9\u662fdfn[c],\u957f\u5ea6\u4e3a\u201cc\u7684\u91cd\u91cf\u201d\u3002\u522b\u5fd8\u4e86\uff0c\u533a\u95f4\u4e5f\u6709**\u8fde\u7eed\u6027**\n\n\u662f\u4e0d\u662f\u6709\u70b9\u4e71\uff1f\u6211\u4eec\u68b3\u7406\u4e00\u4e0b\u3002\u5bf9\u4e8e\u6811\u4e2d\u7684\u6bcf\u4e2a\u70b9c\uff0c\u6211\u4eec\u4f9d\u6b21\u8d4b\u4e88\u4e86\u4e00\u4e9b\u795e\u79d8\u7684\u5c5e\u6027\uff1a\n\n- \u5b83\u7684\u7236\u4eb2fa\n- \u5b83\u7684\u6df1\u5ea6de,\u53ef\u4ee5\u4ee4de[c]=de[fa[c]]+1\n- \u91cd\u91cfwei\uff0c\u7b49\u4e8e\u5b83\u513f\u5b50\u7684\u603b\u91cd\u91cf\uff0c\u518d\u52a01\n- \u5b83\u6700\u504f\u7231\u7684\u513f\u5b50son\uff0c\u5177\u4f53\u600e\u4e48\u5b9a\u4e49**\u5f85\u4f1a\u518d\u8bae**\n- \u5b83\u7684dfn\uff0c\u6ce8\u610f\u662f\u4f9d\u636eson\u7684\n- \u5b83\u6240\u5728\u7684\u94fe\u7684\u9876\u7aef\uff08\u663e\u7136\u662f\u5b83\u7684\u4e00\u4e2a\u7956\u5148\uff09\uff0c\u8bb0\u4f5cg\ng[c]=son[fa[c]]==c?g[fa[c]]:c\u5373\u5982\u679c\u5b83\u662f\u7236\u4eb2\u7684\u5ba0\u513f\uff0c\u90a3\u4e48\u5b83\u7684\u94fe\u9876\u7b49\u4e8e\u5b83\u7236\u4eb2\u7684\u94fe\u9876\uff0c\u5426\u5219\u5c31\u662f\u5b83\u81ea\u5df1\n\n## \u4f60\u80af\u5b9a\u4e0d\u8010\u70e6\u4e86\uff0c\u8fd9\u6837\u5256\u5206\u6709\u4ec0\u4e48\u7528\uff1f\n\n\n\u5f88\u6709\u7528\u3002\u6211\u4eec\u5982\u679c\u8981\u4fee\u6539\u6216\u8be2\u95ee\u6811\u4e2d\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff0c\u5b9e\u8d28\u4e0a\u662f\u4fee\u6539\u6216\u8be2\u95ee**\u8bb8\u8bb8\u591a\u591a\u6761\u94fe\u7684\u4fe1\u606f**\uff0c\u66f4\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e9b\u94fe\u4e0a\u7684dfn\u662f**\u8fde\u7eed\u7684**\uff0c\u53ef\u8f6c\u5316\u4e3a**\u533a\u95f4\u64cd\u4f5c**\u3002\u9664\u6b64\u4e4b\u5916\uff0c\n\u6211\u4eec\u6709**\u91cd\u94fe\u5256\u5206**\u548c**\u957f\u94fe\u5256\u5206**\u4e24\u5927\u5229\u5668\uff0c\u662f\u975e\u5e38\u975e\u5e38\u975e\u5e38\u6709\u7528\u7684\uff0c\u672c\u9898\u5c31\u9700\u8981\u91cd\u94fe\u5256\u5206\n\n## \u4ec0\u4e48\u662f\u91cd\u94fe\u5256\u5206\n\n\u6211\u4eec\u5b9a\u4e49son[c]\u4e3ac**\u6700\u91cd\u7684\u4e00\u4e2a\u513f\u5b50\u4e4b\u4e00**\u3002\u4f1a\u53d1\u73b0\u4e00\u4e2a\u795e\u5947\u7684\u6027\u8d28\n\n\u867d\u7136\u4e00\u9897\u6811\u88ab\u91cd\u94fe\u5256\u5206\u4f1a\u4ea7\u751f\u5f88\u591a\u6761\u94fe\uff0c\u4f46\u662f\u5bf9\u4e8e\u6811\u4e2d\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5b83\u5230\u6839\u8282\u70b9\u7684\u8def\u4e0a\uff0c\u7ecf\u5386\u7684\u94fe\u7684\u6761\u6570\u662f**\u5f88\u5c11\u7684**\u3001**\u6709\u9650\u7684**\u3001\u751a\u81f3\u7684**lg\u7ea7\u522b\u7684**\n\n\u554a\uff0c\u53bb\u6839\u8282\u70b9\u7684\u8def\u4e0a\uff0c\u90a3\u4e9b\u94fe\u53c8\u5c11\u53c8\u957f\n\n![\u91cd\u94fe\u5256\u52061](https://cdn.luogu.com.cn/upload/pic/46905.png)\n\n![](https://cdn.luogu.com.cn/upload/pic/46906.png)\n\n\n\u6700\u6df1\u768411\u52301\u4e5f\u53ea\u67091\u6761\u94fe\u3002\u90a3\u4e48\u600e\u4e48\u8bc1\u660e\u94fe\u7684\u6761\u6570\u4e00\u5b9a\u662flg\u7ea7\u522b\u5462\uff1f\u5047\u8bbe\u6709\u4e00\u4e2a\u574f\u86cb\uff0c\u60f3\u8ba911\u5230\u6839\u8282\u70b9\u7684\u8def\u53d8\u5f97\u5f88\u591a\uff0c\u4ed6\u8981\u600e\u4e48\u505a\uff1f\u4ed6\u8981\u901a\u8fc7**\u589e\u52a0\u8282\u70b9**\u6765\u8ba911\uff08\u548c\u5b83\u7684\u7956\u5148\uff09\u4e0d\u5728\u662f\u5ba0\u513f\uff0c\u4ece\u800c\u5c06\u94fe**\u5207\u65ad**\u3002\u6bd4\u5982\u4ed6\u53ef\u4ee5\u8ba911\u4e0d\u662f\u5ba0\u513f\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/46908.png)\n\n\u4ece\u800c\u8ba9\u8def\u5f84\u6761\u6570\u589e\u52a0\u52302\n\n\u5f88\u53ef\u60dc\uff0c\u8fd9\u4e2a\u574f\u86cb\u662f\u4e0d\u80fd\u5f97\u901e\u7684\uff0c\u56e0\u4e3a\u4ed6\u9700\u8981\u52a0**\u5f88\u591a\u5f88\u591a\u7684\u8282\u70b9**\uff0c\u624d\u80fd\u7565\u6709\u6536\u76ca\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/46909.png)\n\n\u4ee5\u4e0a\u662f\u91cd\u94fe\u5256\u5206\u7684\u6027\u8d28\uff0c\u5e0c\u671b\u4f60\u80fd\u611f\u6027\u7406\u89e3\u3002\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n\nvoid dfs1(LL c,LL from)//\u7b2c\u4e00\u904ddfs\uff0c\u7f6e\u597dfa,de,wei,son \n{\n    LL i,y;\n    fa[c]=from;\n    de[c]=de[from]+1;\n    wei[c]=1;\n    son[c]=0;wei[0]=0;\n    for(i=hea[c];i;i=nex[i])\n    {\n        y=poi[i];\n        if(y==from) continue;\n        dfs1(y,c);\n        wei[c]+=wei[y];\n        if(wei[y]>wei[son[c]])\n            son[c]=y;//\u6700\u91cd\u7684\u513f\u5b50 \n    }\n}\nvoid dfs2(LL c,LL from)//\u7b2c\u4e8c\u904ddfs\uff0c\u7f6e\u597ddfn\u548cg \n{\n    LL i,y;\n    //printf(\"%lld\\n\",c);\n    dfn[c]=++dfn[0];\n    g[c]=son[from]==c?g[from]:c;//g\u5b9a\u4e49\u4e3a\u94fe\u9876 \n    if(son[c])dfs2(son[c],c);//\u4f18\u5148\u8bbf\u95ee\u91cd\u513f\u5b50\uff08\u6700\u504f\u7231\u7684\u513f\u5b50\uff09 \n    for(i=hea[c];i;i=nex[i])\n    {\n        y=poi[i];\n        if(y==from||y==son[c]) continue;\n        dfs2(y,c);\n    }\n}\n```\n\u5728\u91cd\u94fe\u5256\u5206\u4e2d\n\u6700\u504f\u7231\u7684\u513f\u5b50\u662f\u201c\u91cd\u513f\u5b50\u201d\uff0c\u94fe\u662f\u91cd\u94fe\n## \u91cd\u94fe\u5256\u5206\u6709\u4ec0\u4e48\u7528\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6211\u4eec\u6709\u4e866\u5927\u5c5e\u6027\uff0c\u548c\u4e00\u6761\u516c\u7406\u3002\u53ef\u4ee5\u7325\u7410\u6b32\u4e3a\u4e86\u3002\n\n- \u4e24\u70b9(u\u548cv)\u6700\u8fd1\u516c\u5171\u7956\u5148LCA(\u672c\u9898\u4e0d\u9700\u8981):\u8fd8\u8bb0\u5f97g\u662f\u4e00\u4e2a\u70b9\u7684\u94fe\u9876\u5417\uff1f\u4e0d\u65ad\u4ee4u=fa[g[u]],v=fa[g[v]],\u4e0d\u65ad\u5730\u8df3\u6700\u7ec8\u5b83\u4eec\u4f1a\u5728LCA\u5904\u76f8\u9047\n\n\u5982\u679c\u6211\u4eec\u8981\u4fee\u6539\u6216\u8be2\u95eeu\u5230v\u8def\u5f84\u4e0a\u7684\u70b9\u7684\u6240\u6709\u5173\u952e\u503c\uff0c\u5b9e\u9645\u4e0a\u662f\u4fee\u6539\u6216\u8be2\u95ee\u5f88\u5c11(lg)\u7684\u533a\u95f4\u3002\n\n- \u5177\u4f53\u6765\u8bf4\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217a\uff0c\u5176\u4e0b\u6807\u662fdfn\uff0c\u5b58\u7684\u662f\u5173\u952e\u503c\u3002\n- \u64cd\u4f5c\uff08\u5305\u62ec\u4fee\u6539\u548c\u8be2\u95ee\uff09\u8282\u70b9u\u7684\u5173\u952e\u503c\uff0c\u5c31\u662f\u5728\u64cd\u4f5ca[dfn[u]]\n- \u64cd\u4f5c\u4e00\u6761\u91cd\u94fe(u->v,u\u662fv\u7684\u7956\u5148)\u4e0a\u7684\u6240\u6709\u5173\u952e\u503c\uff0c\u5b9e\u9645\u4e0a\u5728\u64cd\u4f5c:a[dfn[u]], a[dfn[u]+1], a[dfn[u]+2]..a[dfn[v]]\n- \u64cd\u4f5c\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5173\u952e\u503c\uff0c\u672c\u8d28\u4e0a\u662f\u5728\u64cd\u4f5clg\u6761\u91cd\u94fe\uff08\u4e0a\u4e00\u6b65\uff09\n- \u64cd\u4f5c\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u6240\u6709\u7684\u5173\u952e\u503c\uff08\u672c\u9898\u4e0d\u9700\u8981\uff09\uff0c\u5982\u679c\u80fd\u5904\u7406LCA\uff0c\u672c\u8d28\u4e0a\u4e5f\u662flg\u6761\u91cd\u94fe\n- \u64cd\u4f5cc\u7684\u5b50\u6811\uff0c\u8bb0wei\u4e3ac\u7684\u91cd\u91cf\uff0c\u672c\u8d28\u4e0a\u5728\u64cd\u4f5c\na[dfn[c]],a[dfn[c]+1],a[dfn[c]+2],...a[dfn[c]+wei-1]\n\n\u806a\u660e\u7684\u4f60\u4e00\u5b9a\u4e0d\u4f1a\u50bb\u50bb\u7684\u4e00\u4e2a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u800c\u662f\u7528\u7ebf\u6bb5\u6811\u55bd\uff0c\u4f46\u672c\u9898\u6211\u8fd8\u4f1a\u8bb2\u6811\u72b6\u6570\u7ec4\u89e3\u6cd5\u3002\n\n## \u4ec0\u4e48\u662f\u957f\u94fe\u5256\u5206\n\u957f\u94fe\u5256\u5206\u4e0d\u5982\u91cd\u94fe\u5256\u5206\u5e94\u7528\u5e7f\u6cdb\uff0c\u672c\u9898\u4e0d\u9700\u8981\n\n\u91cd\u65b0\u5b9a\u4e49son[c]\u4e3a\u6700\u957f\uff08\u6216\u8005\u53eb\u6df1\uff09\u7684\u90a3\u4e2a\u513f\u5b50\uff0c\u79f0\u4f5c\u91cd(chang)\u513f\u5b50\u3002\n\n\u5f88\u53ef\u60dc\uff0c\u957f\u94fe\u5256\u5206\u6ca1\u6709\u91cd\u94fe\u5256\u5206\u201c\u94fe\u5c11\u201d\u7684\u6027\u8d28\uff0c\u5b83\u6709\u65f6\u5019\u94fe\u4f1a\u591a\u5230\u6839\u53f7n\n\n![](https://cdn.luogu.com.cn/upload/pic/46912.png)\n\n\u4f46\u662f\uff0c\u6709\u4e00\u4e2a\u597d\u6d88\u606f\uff0c\u957f\u94fe\u5256\u5206\u6709\u5176\u7279\u6709\u7684\u6027\u8d28\n\n\u8bbec\u7684k\u7ea7\u7956\u5148\u4e3ay\uff0c\uff08\u5373y\u662fc\u7684\u7956\u5148\u4e14\u4e24\u70b9\u8ddd\u79bb\u4e3ak\uff09\uff0c\u8bb0len[y]\u4e3ay\u6240\u5728\u957f\u94fe\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u6709\uff1a\n\nlen[y]>=k\n\n\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u6b64\u6027\u8d28\u5c24\u4e3a\u660e\u663e\uff0c\u4f7f\u91cd\u94fe\u5256\u5206\u53ef\u53f9\u800c\u4e0d\u53ef\u53ca!\n![](https://cdn.luogu.com.cn/upload/pic/46943.png)\n\n## \u957f\u94fe\u5256\u5206\u6709\u4ec0\u4e48\u7528\n\n\u7ed3\u5408\u500d\u589enlgn\u9884\u5904\u7406\uff0c\u4ed6\u53ef\u4ee5O(1)\u6c42\u8282\u70b9c\u7684k\u7ea7\u7956\u5148\n\n1. \u9884\u5904\u7406lg[x],\u8868\u793a\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570\u4e0b\u53d6\u6574\n1. \u9884\u5904\u7406\u9876\u70b9\u7684\u5c5e\u6027\uff1afa,de,len,son,g,dfn,\u5176\u4e2dlen\u8868\u793a\u8282\u70b9\u6240\u5728\u957f\u94fe\u7684\u957f\u5ea6\n1. \u9884\u5904\u7406st\u8868\uff0cst[c][k]\u662f\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u8868\u793ac\u7684\"2\u7684k\u6b21\u65b9\"\u7ea7\u7956\u5148\u7684\u7f16\u53f7\uff0c\u663e\u7136k\u662flg\u7ea7\u7684\uff0c\u800c\u4e14\u6709\u9012\u63a8\u5f0f\n\n st[c][k]=st[st[c][k-1]][k-1]\n \n1. \u9884\u5904\u7406\u4e24\u4e2a\n\t\n    vector<int> getup[maxn],\n  \n  \tvector<int> getdown[maxn].\n  \t\n    \u5b83\u4eec\u662f\u4e8c\u7ef4\u7684\u52a8\u6001\u7a7a\u95f4\uff0c\u542b\u4e49\u5982\u4e0b\u3002\n    \n    \u4ec5\u5728c\u5904\u4e8e\u94fe\u9876\u65f6\uff08\u5176\u4ed6\u60c5\u51b5getup[c],getdown[c]\u4e3a\u7a7a\uff09\n    \n    getup[c][i]\u8868\u793ac\u7684i\u7ea7\u7956\u5148\uff0c\u4fdd\u8bc1i<=len[c]\n    \n    getdown[c][i]\u8868\u793a\u5728c\u94fe\u4e2d\u7684i\u7ea7\u5b50\u5b59,\u4fdd\u8bc1i<=len[c]\n    \n    \u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3alen\u7684\u548c\uff0c\u4e5f\u5c31\u662fn\u3002\n\n1. **\"\u8fc7\u534a\u8df3\"**,\u6bcf\u6b21\u8be2\u95eec\u7684k\u7ea7\u7956\u5148\uff0c\u9996\u5148\u8bbey=st[c][lg[k]], r=c\u548cy\u7684\u8ddd\u79bb\u3002r\u53ef\u4ee5\u7528\u6df1\u5ea6\u6765\u51cf\uff0c\u4e5f\u53ef\u4ee5\u662f2\u7684lg[k]\u6b21\u65b9\uff0c\u90a3\u4e48\n\n  r>=k/2,\u5373\n  \n  r>=k-r  \n1. **\"\u8df3\u94fe\u9876\"**,\n\n\ttot=r+de[y]-de[g[y]],\u8bb0\u5f55\u8df3\u4e86\u591a\u5c11\u6b65\n    \n    \u8bbez=g[y]\u8df3\u5230\u94fe\u9876\n  \n1. **\u4e0d\u7528\u5199\u5728\u7a0b\u5e8f\u91cc\u7684\u5c0f\u8bc1\u660e**\n\n\t\u6211\u65ad\u8a00\uff0cc\u7684k\u7ea7\u7956\u5148\u4e00\u5b9a\u5728\u5411\u91cfgetup[z]\u6216getdown[z]\u91cc\uff0c\u7406\u7531\u5982\u4e0b\u3002\n \n \t\u6839\u636e\u957f\u94fe\u7684\u6027\u8d28,len[y]>=r\n    \n    \u53c8r>=k-r\n    \n    \u6240\u4ee5\n    \n    len[z]=len[y]>=r>=r-k>=dis(z,c\u7684k\u7ea7\u7956\u5148),\n    \n    \u5982\u4e0b\u56fe\uff0c\u989c\u8272\u8d8a\u7c97\u8868\u793a\u8d8a\u957f\n    ![](https://cdn.luogu.com.cn/upload/pic/46929.png)\n    \n    \u6b64\u65f6c\u7684k\u7ea7\u7956\u5148\u5728 getup[z]\u4e2d\n    \n    \u5f53\u7136\u8fd8\u6709c\u7684k\u7ea7\u7956\u5148\u5728getdown[z]\u7684\u60c5\u51b5\n    \n1. **\u76f4\u63a5\u8df3**\uff0c\u8fd4\u56degetup[z][k-tot]\u3002\u6216\u8005\u8fd4\u56degetdown[z][tot-k]\n\n\n\n------------\n# \u4ec0\u4e48\u662f\u8d85\u7ea7\u6811\u72b6\u6570\u7ec4\n\n\u8d85\u7ea7\u6811\u72b6\u6570\u7ec4\u6709\uff0c\n\n2\u79cd\u57fa\u672c\u64cd\u4f5c\uff1a\u533a\u95f4\u7d2f\u52a0\u3001\u524d\u7f00\u6c42\u548c\n\n1\u79cd\u5ef6\u4f38\u64cd\u4f5c\uff1a\u533a\u95f4\u6c42\u548c\uff08\u7528\u524d\u7f00\u548c\u51cf\uff09\n\n\u7684nlgn\u6570\u636e\u7ed3\u6784\uff0c\u672c\u8d28\u4e0a\u662f\u7ef4\u62a42\u4e2a\u6811\u72b6\u6570\u7ec4\u3002\u867d\u7136\u5e94\u7528\u4e0d\u5982\u7ebf\u6bb5\u6811\u5e7f\u6cdb\uff0c\u4f46\u662f\u4ee3\u7801\u77ed\u3001\u7ec6\u8282\u5c11\u3002\n\n## \u4ec0\u4e48\u662f\u6811\u72b6\u6570\u7ec4\n\n\u6811\u72b6\u6570\u7ec4\u672c\u8d28\u4e0a\u67092\u79cd\u57fa\u672c\u64cd\u4f5c:\u5355\u70b9\u7d2f\u52a0\uff0c\u524d\u7f00\u6c42\u548c\u30021\u79cd\u5ef6\u4f38\u64cd\u4f5c:\u533a\u95f4\u6c42\u548c\uff08\u7528\u524d\u7f00\u548c\u51cf\uff09\u3002\u7b80\u5355\u5730\u53d1\u4e00\u4e0b\u4ee3\u7801\uff1a\n\n\n```cpp\nvoid ADD(LL *a,LL i,LL x)//\u5355\u70b9\u52a0 \n{\n    if(i>n) return;\n    a[i]+=x;\n    ADD(a,i+lowbit(i),x);\n}\n\nLL ASK(LL *a,LL i)//\u524d\u7f00\u6c42\u548c \n{\n    if(i==0) return 0;\n    return ASK(a,i-lowbit(i))+a[i];\n}\n\n```\n\n\u5047\u8bbe\u5404\u4f4d\u5927\u4f6c\u5df2\u7ecf\u4f1a\u6811\u72b6\u6570\u7ec4\u4e86\uff0c\u6211\u4eec\u7ee7\u7eed\u8ba8\u8bba\n\n## \u5f00\u59cb\u63a8\u516c\u5f0f\n\n![](https://cdn.luogu.com.cn/upload/pic/46937.png)\n\n## \u4ee3\u7801\n\n\u6ce8\u610f\u6211\u7528\u5927\u5c0f\u5199\u533a\u5206\u5c42\u6b21\n```cpp\nLL lowbit(LL x){return x&(-x);}\nvoid ADD(LL *a,LL i,LL x)//\u5355\u70b9\u52a0 \n{\n    if(i>n) return;\n    a[i]+=x;\n    ADD(a,i+lowbit(i),x);\n}\n\nLL ASK(LL *a,LL i)//\u524d\u7f00\u6c42\u548c \n{\n    if(i==0) return 0;\n    return ASK(a,i-lowbit(i))+a[i];\n}\nvoid Add(LL l,LL r,LL x)//\u533a\u95f4\u52a0 \n{\n    //printf(\"Add %lld %lld %lld\\n\",l,r,x);\n    ADD(d,l,x);\n    ADD(d,r+1,-x);\n    ADD(fd,l,x*(l-1));\n    ADD(fd,r+1,-x*r);\n}\n\nLL Ask_(LL r)//\u524d\u7f00\u6c42\u548c \n{\n    return r*ASK(d,r)-ASK(fd,r); \n}\nLL Ask(LL l,LL r)//\u533a\u95f4\u6c42\u548c \n{\n    //printf(\"Ask %lld %lld\\n\",l,r);\n    return Ask_(r)-Ask_(l-1);\n}\n```\n\n\n\n------------\n# \u603b\u4ee3\u7801\n\n\u4e2a\u4eba\u89c9\u5f97\u7801\u98ce\u4e0d\u9519\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\nconst LL maxn=200001;\nconst LL maxm=2*maxn;\n\nLL hea[maxn],nex[maxm],poi[maxm];\nLL w[maxn];\nLL fa[maxn],de[maxn],wei[maxn],son[maxn];\nLL g[maxn],dfn[maxn];\nLL d[maxn],fd[maxn];\nLL n,Q,i,j,k,t,x,y,type,u;\n\nLL max(LL x,LL y){return x>y?x:y;}\nLL lowbit(LL x){return x&(-x);}\nvoid ADD(LL *a,LL i,LL x)//\u5355\u70b9\u52a0 \n{\n    if(i>n) return;\n    a[i]+=x;\n    ADD(a,i+lowbit(i),x);\n}\n\nLL ASK(LL *a,LL i)//\u524d\u7f00\u6c42\u548c \n{\n    if(i==0) return 0;\n    return ASK(a,i-lowbit(i))+a[i];\n}\nvoid Add(LL l,LL r,LL x)//\u533a\u95f4\u52a0 \n{\n    //printf(\"Add %lld %lld %lld\\n\",l,r,x);\n    ADD(d,l,x);\n    ADD(d,r+1,-x);\n    ADD(fd,l,x*(l-1));\n    ADD(fd,r+1,-x*r);\n}\n\nLL Ask_(LL r)//\u524d\u7f00\u6c42\u548c \n{\n    return r*ASK(d,r)-ASK(fd,r); \n}\nLL Ask(LL l,LL r)//\u533a\u95f4\u6c42\u548c \n{\n    //printf(\"Ask %lld %lld\\n\",l,r);\n    return Ask_(r)-Ask_(l-1);\n}\nLL ask(LL u)\n{\n    //printf(\"ask %lld\\n\",u);\n    if(g[u]==g[1]) return Ask(dfn[1],dfn[u]);else\n    return\n        Ask(dfn[g[u]],dfn[u])+ask(fa[g[u]]);\n}\nvoid PW(LL i,LL j)\n{\n    k++;\n    poi[k]=j;nex[k]=hea[i];hea[i]=k;\n}\n\nvoid PW2(LL i,LL j)\n{\n    PW(i,j);PW(j,i);\n}\n\nvoid dfs1(LL c,LL from)//\u7b2c\u4e00\u904ddfs\uff0c\u7f6e\u597dfa,de,wei,son \n{\n    LL i,y;\n    fa[c]=from;\n    de[c]=de[from]+1;\n    wei[c]=1;\n    son[c]=0;wei[0]=0;\n    for(i=hea[c];i;i=nex[i])\n    {\n        y=poi[i];\n        if(y==from) continue;\n        dfs1(y,c);\n        wei[c]+=wei[y];\n        if(wei[y]>wei[son[c]])\n            son[c]=y;//\u6700\u91cd\u7684\u513f\u5b50 \n    }\n}\nvoid dfs2(LL c,LL from)//\u7b2c\u4e8c\u904ddfs\uff0c\u7f6e\u597ddfn\u548cg \n{\n    LL i,y;\n    //printf(\"%lld\\n\",c);\n    dfn[c]=++dfn[0];\n    g[c]=son[from]==c?g[from]:c;//g\u5b9a\u4e49\u4e3a\u94fe\u9876 \n    if(son[c])dfs2(son[c],c);//\u4f18\u5148\u8bbf\u95ee\u91cd\u513f\u5b50\uff08\u6700\u504f\u7231\u7684\u513f\u5b50\uff09 \n    for(i=hea[c];i;i=nex[i])\n    {\n        y=poi[i];\n        if(y==from||y==son[c]) continue;\n        dfs2(y,c);\n    }\n}\n\nint main()\n{\n    scanf(\"%lld%lld\",&n,&Q);\n    for(i=1;i<=n;i++) scanf(\"%lld\",&w[i]);\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%lld%lld\",&j,&t);\n        PW2(j,t);\n    }\n    dfs1(1,0);\n    dfs2(1,0);\n    //for(i=1;i<=n;i++)\n    //\tprintf(\"i=%lld dfn=%lld fa=%lld son=%lld g=%lld\\n\",i,dfn[i],fa[i],son[i],g[i]);\n    for(i=1;i<=n;i++)\n        Add(dfn[i],dfn[i],w[i]);\n    while(Q--)\n    {\n        scanf(\"%lld%lld\",&type,&u);\n        if(type==1)\n        {\n            scanf(\"%lld\",&x);\n            Add(dfn[u],dfn[u],x);\n        }else\n        if(type==2)\n        {\n            scanf(\"%lld\",&x);\n            Add(dfn[u],dfn[u]+wei[u]-1,x);\n        }else\n        {\n            printf(\"%lld\\n\",ask(u));\n        }\n    }\n}\n```\n",
        "postTime": 1545486038,
        "uid": 44356,
        "name": "benny",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u9996\u5148\u8bf4\u8bf4\u91cd\u94fe\u5e8f\uff1a\n\n\u7b2c\u4e00\u6b21dfs\uff0c\u7b97\u51fadep[]\u3001fa[N]\u3001size[N]\u3001son[N]\uff0c\u5176\u4e2dson[x]\u901a\u8fc7size[y]\u8ba1\u7b97\u6700\u5927\u503c\u5f97\u5230\u3002\n\n\u7b2c\u4e8c\u6b21dfs\uff0c\u4f20\u5165x\u548c\u94fe\u9996\u5143\u7d20tp\uff1a\n\n\u5bf9\u5176\u513f\u5b50\u5217\u8868\uff0c\u9996\u5148\u9012\u5f52son[x]\uff0c\u7136\u540e\u518d\u9012\u5f52\u5176\u5b83\u513f\u5b50\uff08\u8f7b\u513f\u5b50\uff09\n\u91cd\u513f\u5b50\u9012\u5f52\uff0ctp\u5143\u7d20\u4e0d\u53d8\uff0c\u8f7b\u513f\u5b50\u9012\u5f52\uff0ctp\u6539\u6210\u8f7b\u513f\u5b50\u81ea\u5df1\n\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u50a8\u5230o[++last]=x\u91cc\uff0c\u540c\u65f6\u5b58\u50a8p[x]=last\n\u6700\u540e\uff0c\u8f93\u51fao[N]\u5373\u4e3a\u91cd\u94fe\u5256\u5206\u4ee5\u540e\u7684\u5e8f\u3002\n\n\u9996\u5148\u6811\u94fe\u5256\u5206\u5f97\u5230\u91cd\u94fe\u5e8f\uff0c\u7136\u540e\u8003\u8651\u64cd\u4f5c\uff1a\n\n\n1-\u5355\u70b9\u66f4\u65b0\uff1a\n\n2-\u533a\u95f4\u66f4\u65b0\uff1a\u4ee5\u67d0\u70b9\u4e3a\u6839\u7684\u533a\u95f4\u662fp[x]\u548cp[x]+size[x]-1\uff0c\u521a\u597d\u8fde\u7eed\n\n3-\u6c42\u8def\u5f84\uff1a\u67d0\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u6309\u91cd\u94fe\u3001\u8df3\u3001\u91cd\u94fe\u2026\u7684\u7ec4\u5408\u6765\u5b9e\u73b0\uff0c\u4e5f\u5373\u591a\u4e2a\u533a\u95f4\u7684\u548c\u7ec4\u5408\u8d77\u6765\u3002\n\n\u663e\u7136\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u64cd\u4f5c\u548c\u67e5\u8be2\u3002\n\nAC\u4ee3\u7801\uff1a\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <vector>\nusing namespace std;\nconst int N = 1e5 + 1;\ntypedef long long ll;\nll n, m, fa[N], top[N], siz[N], son[N], o[N], las, p[N], v[N];\nbool vis[N];\nvector<ll> g[N];\ninline ll read()\n{\n    ll x = 0, f = 1;\n    char ch = getchar();\n    while (ch < '0' || ch > '9')\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (ch >= '0' && ch <= '9')\n    {\n        x = (x << 3) + (x << 1) + (ch ^ 48);\n        ch = getchar();\n    }\n    return x * f;\n}\nvoid dfs1(ll x, ll fat, ll len)\n{\n    fa[x] = fat;\n    siz[x] = 1;\n    for (ll i = 0; i < g[x].size(); ++i)\n    {\n        ll y = g[x][i];\n        if (y == fat)\n            continue;\n        dfs1(y, x, len + 1);\n        siz[x] += siz[y];\n        if (siz[y] > siz[son[x]])\n            son[x] = y;\n    }\n}\nvoid dfs2(ll x, ll dp)\n{\n    top[x] = dp;\n    o[++las] = v[x];\n    p[x] = las;\n    if (son[x] == 0)\n        return;\n    dfs2(son[x], dp);\n    for (ll i = 0; i < g[x].size(); ++i)\n    {\n        ll y = g[x][i];\n        if (y == fa[x] || y == son[x])\n            continue;\n        dfs2(y, y);\n    }\n}\nstruct node\n{\n    ll l, r, sum, tag;\n    ll len()\n    {\n        return r - l + 1;\n    }\n};\nnode tree[4 * N];\nvoid bud(ll l, ll r, ll k)\n{\n    tree[k].l = l;\n    tree[k].r = r;\n    if (l == r)\n    {\n        tree[k].sum = o[l];\n        return;\n    }\n    ll mid = (l + r) / 2;\n    bud(l, mid, 2 * k);\n    bud(mid + 1, r, 2 * k + 1);\n    tree[k].sum = tree[2 * k].sum + tree[2 * k + 1].sum;\n}\nvoid but(ll k, ll tag)\n{\n    tree[k].sum += tree[k].len() * tag;\n    tree[k].tag += tag;\n}\nvoid pud(ll k)\n{\n    but(2 * k, tree[k].tag);\n    but(2 * k + 1, tree[k].tag);\n    tree[k].tag = 0;\n}\nvoid upd(ll x, ll y, ll a, ll k)\n{\n    ll l = tree[k].l, r = tree[k].r;\n    if (x <= l && y >= r)\n    {\n        but(k, a);\n        return;\n    }\n    if (tree[k].tag)\n        pud(k);\n    ll mid = (l + r) / 2;\n    if (x <= mid)\n        upd(x, y, a, 2 * k);\n    if (y >= mid + 1)\n        upd(x, y, a, 2 * k + 1);\n    tree[k].sum = tree[2 * k].sum + tree[2 * k + 1].sum;\n}\nll que(ll x, ll y, ll k)\n{\n    ll l = tree[k].l, r = tree[k].r;\n    if (x <= l && y >= r)\n        return tree[k].sum;\n    if (tree[k].tag)\n        pud(k);\n    ll mid = (l + r) / 2, ans = 0;\n    if (x <= mid)\n        ans += que(x, y, 2 * k);\n    if (y >= mid + 1)\n        ans += que(x, y, 2 * k + 1);\n    return ans;\n}\nint main()\n{\n    n = read();\n    m = read();\n    for (ll i = 1; i <= n; ++i)\n        v[i] = read();\n    for (ll i = 1; i <= n - 1; ++i)\n    {\n        ll x, y;\n        x = read();\n        y = read();\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n    dfs1(1, 0, 1);\n    dfs2(1, 1);\n    bud(1, n, 1);\n    for (ll i = 1; i <= m; ++i)\n    {\n        ll cmd, x, a;\n        cmd = read();\n        x = read();\n        if (cmd == 1)\n        {\n            a = read();\n            upd(p[x], p[x], a, 1);\n        }\n        if (cmd == 2)\n        {\n            a = read();\n            upd(p[x], p[x] + siz[x] - 1, a, 1);\n        }\n        if (cmd == 3)\n        {\n            ll sum = 0;\n            while (top[x] != 1)\n            {\n                sum += que(p[top[x]], p[x], 1);\n                x = fa[top[x]];\n            }\n            sum += que(1, p[x], 1);\n            printf(\"%lld\\n\", sum);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1582532836,
        "uid": 152341,
        "name": "\u5c0f\u7cef\u7c73",
        "ccfLevel": 0,
        "title": "P3178\u9898\u89e3"
    },
    {
        "content": "\u9898\u89e3\uff1a\u672c\u9898\u4e3b\u8981\u8003\u5bdf\u6811\u94fe\u5256\u5206\n- \u7b80\u8981\u9898\u610f\uff1a\u6811\u4e0a\u64cd\u4f5c\uff1a\n- \u64cd\u4f5c 1 \uff1a\u628a\u67d0\u4e2a\u8282\u70b9$x$\u7684\u70b9\u6743\u589e\u52a0$a$\u3002\n- \u64cd\u4f5c 2 \uff1a\u628a\u67d0\u4e2a\u8282\u70b9$x$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u90fd\u589e\u52a0$a$\u3002\n- \u64cd\u4f5c 3 \uff1a\u8be2\u95ee\u67d0\u4e2a\u8282\u70b9$x$ \n- 1.\u6811\u94fe\u5256\u5206\uff1a\u7ebf\u6bb5\u6811\u6c42\u533a\u95f4\u548c\u4e0e\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6811\u94fe\u5256\u5206\u7684\u6a21\u677f\n- \u4e09\u5e74OI\u4e00\u573a\u7a7a\uff0c\u4e0d\u5f00$longlong$\u89c1\u7956\u5b97\n- \u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define ll long long\nstruct N\n{\n\tll ans,lazy;\n}t[866006];\nstruct E\n{\n\tll start,to;\n}e[866006];\nll a[666666];\nll siz[200005],d[200005],f[200005],h[200005];\nll top[200005],rk[200005],son[200005],id[200005];\nll n,m,P,num;\nvoid pushup(ll p)\n{\n\tt[p].ans=t[p*2].ans+t[p*2+1].ans;\n\treturn ;\n}\nvoid build(ll p,ll l,ll r)\n{\n\tif(l==r){t[p].ans=rk[l];t[p].lazy=0;return ;}\n\tll mid=l+r>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n\tpushup(p);\n}\nvoid lai(ll p,ll l,ll r)\n{\n\tll mid=l+r>>1;\n\tif(t[p].lazy)\n\t{\n\t\tt[p*2].ans+=t[p].lazy*(mid-l+1);\n\t\tt[p*2+1].ans+=t[p].lazy*(r-mid);\n\t\tt[p*2].lazy+=t[p].lazy;\n\t\tt[p*2+1].lazy+=t[p].lazy;\n\t\tt[p].lazy=0;\n\t}\n\treturn ;\n}\nvoid change(ll p,ll l,ll r,ll x,ll y,ll z)\n{\n\tif(x<=l&&y>=r)\n\t{\n\t\tt[p].ans+=z*(r-l+1);\n\t\tt[p].lazy+=z;\n\t\treturn ;\n\t}\n\tlai(p,l,r);\n\tll mid=l+r>>1;\n\tif(x<=mid)change(p*2,l,mid,x,y,z);\n\tif(y>mid)change(p*2+1,mid+1,r,x,y,z);\n\tpushup(p);\n}\nlong long ask(ll p,ll l,ll r,ll x,ll y)\n{\n\tif(x<=l&&y>=r)return t[p].ans;\n\tlai(p,l,r);\n\tint mid=l+r>>1;\n\tlong long ans=0;\n\tif(x<=mid)ans+=ask(p*2,l,mid,x,y);\n\tif(y>mid)ans+=ask(p*2+1,mid+1,r,x,y);\n\treturn ans;\n}\nvoid add(ll start,ll to)\n{\n\te[++P].to=to;\n\te[P].start=h[start];\n\th[start]=P;\n}\nvoid dfs1(ll p,ll fa,ll deep)\n{\n    f[p]=fa;siz[p]=1;d[p]=deep;\n    for(ll i=h[p];i;i=e[i].start)\n\t{\n        ll k=e[i].to;\n        if(k==fa)continue;\n        dfs1(k,p,deep+1);\n        siz[p]+=siz[k];\n        if(siz[k]>siz[son[p]])son[p]=k;\n    }\n}\nvoid dfs2(ll p,ll tp)\n{\n    id[p]=++num;rk[num]=a[p];top[p]=tp;\n    if(!son[p]) return;\n    dfs2(son[p],tp);\n    for(ll i=h[p];i;i=e[i].start)\n\t{\n        ll k=e[i].to;\n        if(k==f[p]||k==son[p]) continue;\n        dfs2(k,k);\n    }\n}\nlong long sum(ll x,ll y)\n{\n    long long ans=0;\n    while(top[x]!=top[y])\n\t{\n        if(d[top[x]]<d[top[y]])swap(x,y);\n        ans+=ask(1,1,n,id[top[x]],id[x]);\n        x=f[top[x]];\n    }\n    if(d[x]>d[y])swap(x,y);\n    ans+=ask(1,1,n,id[x],id[y]);\n    return ans;\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(ll i=1;i<=n;i++)cin>>a[i];\n\tfor(ll i=1;i<=n-1;i++)\n\t{\n\t\tll x,y;\n\t\tcin>>x>>y;\n\t\tadd(x,y);add(y,x);\n\t}\n\td[1]=1;\n\tdfs1(1,0,1);dfs2(1,1);\n\tbuild(1,1,n);\n\twhile(m--)\n\t{\n\t\tll q,x,y;\n\t\tcin>>q;\n\t\tif(q==1)\n\t\t{\n\t\t\tcin>>x>>y;\n\t\t\tchange(1,1,n,id[x],id[x],y);\n\t\t}\n\t\tif(q==2)\n\t\t{\n\t\t\tcin>>x>>y;\n\t\t\tchange(1,1,n,id[x],id[x]+siz[x]-1,y);\n\t\t}\n\t\tif(q==3)\n\t\t{\n\t\t\tcin>>x;\n\t\t\tcout<<sum(x,1)<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1573120889,
        "uid": 120734,
        "name": "wshl",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u79cd\u5206\u6cbb\u505a\u6cd5\n\n\uff08\u8fd9\u4e2a\u505a\u6cd5\u5177\u4f53\u53eb\u4ec0\u4e48\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u6b22\u8fcedalao\u6307\u51fa\uff09\n\n\u57fa\u672c\u601d\u8def\u662f\uff1a\u9012\u5f52\u5904\u7406\u5de6\u53f3\u4e24\u8fb9\u540e\uff0c\u7528\u5de6\u8fb9\u6240\u6709\u4fee\u6539\u64cd\u4f5c\u66f4\u65b0\u53f3\u8fb9\u6240\u6709\u67e5\u8be2\u64cd\u4f5c\n\n\u9996\u5148\u4e00\u904dDFS\u6c42\u51faDFS\u5e8f\uff0c\u6c42\u51fa\u5bf9\u5e94\u5b50\u6811\u7684\u8303\u56f4\uff0c\u5e76\u634e\u5e26\u628a\u521d\u59cb\u6570\u503c\u548c\u6df1\u5ea6\u6c42\u51fa\u6765\u4ee5\u5907\u4e4b\u540e\u4f7f\u7528\n\n\u6c42\u51faDFS\u5e8f\u540e\uff0c\u6811\u7684\u7ed3\u6784\u5c31\u57fa\u672c\u6ca1\u7528\u4e86\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u70b9\u8585\u4e0b\u6765\uff08\u70b9\uff1a\u4e3a\u4ec0\u4e48\u8981\u628a\u6211\u8585\u4e0b\u6765\uff09\uff0c\u628a\u6811\u62cd\u6241\n\n\u8003\u8651\u4e00\u4e2a\u4fee\u6539\u5bf9\u4e00\u4e2a\u8be2\u95ee\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u4ea7\u751f\u8d21\u732e\uff0c\u4f1a\u4ea7\u751f\u591a\u5927\u8d21\u732e\n\n\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u53d7\u5230\u5f71\u54cd\u7684\u53ea\u6709\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u70b9\n\n\u5355\u70b9\u4fee\u6539\u4f1a\u4f7f\u6574\u68f5\u5b50\u6811\u5185\u7684\u8be2\u95ee\u589e\u52a0\u4e00\u4e2a\u56fa\u5b9a\u503c\n\n\u4fee\u6539\u6574\u68f5\u5b50\u6811\u5219\u4f1a\u4f7f\u8be5\u5b50\u6811\u5185\u7684\u8be2\u95ee\u589e\u52a0\u4e0d\u540c\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u4e0e\u70b9\u7684\u6df1\u5ea6\u6709\u5173\uff0c\u6570\u503c\u4e0e\u6df1\u5ea6\u7684\u5173\u7cfb\u662f\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\n\n\u4fee\u6539\u4e4b\u95f4\u5f7c\u6b64\u72ec\u7acb\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u66f4\u65b0\n\n\u5f88\u660e\u663e\uff0c\u5904\u7406\u65f6\u53ef\u4ee5\u8ba9\u5de6\u53f3\u4e24\u8fb9\u6309DFS\u5e8f\u6392\u5e8f\n\n\u7136\u540e\u8003\u8651\u600e\u6837\u66f4\u65b0\n\n\u5148\u7ed9\u51fa\u6837\u4f8b\u7684\u4e00\u79cdDFS\u5e8f\uff0c\u5982\u679c\u540e\u9762\u4e0d\u597d\u7406\u89e3\uff0c\u53ef\u4ee5\u56de\u6765\u770b\u770b\u8fd9\u4e2a\n\n```\n[1[2[3][5]][4]]\n```\n\n\u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u8bb0\u5f55\u80fd\u5f71\u54cd\u5230\u5f53\u524d\u70b9\u7684\u64cd\u4f5c\n\n\u6bcf\u6b21\u66f4\u65b0\u65f6\uff0c\u6839\u636e\u70b9\u7684\u6df1\u5ea6\u548c\u6808\u91cc\u7684\u60c5\u51b5\u66f4\u65b0\n\n\u5982\u679c\u53ea\u6709\u5355\u70b9\u4fee\u6539\uff0c\u53ea\u8981\u8bb0\u5f55\u6808\u5185\u4fee\u6539\u64cd\u4f5c\u6570\u503c\u4e4b\u548c\u5c31\u53ef\u4ee5\n\n\u4f46\u662f\u4fee\u6539\u5b50\u6811\u5c31\u6709\u4e9b\u9ebb\u70e6\n\n\u56e0\u4e3a\u8d21\u732e\u4e0e\u6df1\u5ea6\u6709\u5173\uff0c\u8003\u8651\u7ef4\u62a4\u53d7\u6df1\u5ea6\u5f71\u54cd\u7684\u90e8\u5206\uff0c\u66f4\u65b0\u65f6\u5c06\u8fd9\u90e8\u5206\u4e58\u4ee5\u6df1\u5ea6\uff0c\u52a0\u4e0a\u5c31\u53ef\u4ee5\n\n\u8fd9\u6837\u4f1a\u591a\u7b97\u4e00\u4e9b\uff0c\u53ea\u8981\u628a\u591a\u7b97\u7684\u90e8\u5206\u4ece\u4e0d\u53d7\u6df1\u5ea6\u5f71\u54cd\u7684\u90e8\u5206\u51cf\u53bb\u5c31\u53ef\u4ee5\n\n\u5f53\u64cd\u4f5c\u88ab\u5f39\u51fa\u6808\u65f6\uff0c\u628a\u5bf9\u8fd9\u4e24\u4e2a\u6570\u503c\u8fdb\u884c\u7684\u64cd\u4f5c\u64a4\u9500\u5c31\u53ef\u4ee5\n\n\u4f46\u662f\uff0c\u600e\u4e48\u5b9e\u73b0\uff1f\n\n\u6bcf\u6b21\u679a\u4e3e\u53f3\u8fb9\u7684\u70b9\n\n\u5f53\u9700\u8981\u66f4\u65b0\u6570\u503c\u4e0d\u540c\u7684\u70b9\u65f6\uff0c\u628a\u5df2\u7ecf\u4e0d\u80fd\u5f71\u54cd\u5230\u5b83\u7684\u64cd\u4f5c\u4ece\u6808\u91cc\u5f39\u51fa\n\n\u968f\u540e\uff0c\u628a\u80fd\u5f71\u54cd\u5230\u5b83\u7684\u64cd\u4f5c\u538b\u5165\u6808\n\n\u6ce8\u610f\uff1a\u6709\u4e9b\u64cd\u4f5c\u53ef\u80fd\u6c38\u8fdc\u4e0d\u80fd\u66f4\u65b0\u53f3\u8fb9\u7684\u70b9\n\n\u8fd9\u90e8\u5206\u70b9\u76f4\u63a5\u8df3\u8fc7\u5c31\u53ef\u4ee5\uff0c~~\u6216\u8005\u4e5f\u538b\u6808\u4ee5WA~~ ~~\uff08\u6211\u5f00\u59cb\u5c31\u8fd9\u4e48\u5e72\u7684\uff09~~\n\n\u63a5\u4e0b\u6765\uff0c\u628a\u76f8\u540c\u6570\u503c\u7684\u70b9\u5168\u90e8\u66f4\u65b0\n\n\u5f53\u7136\uff0c\u5982\u679c\u4e00\u6b21\u53ea\u66f4\u65b0\u4e00\u4e2a\u4e5f\u53ef\u4ee5\uff0c\u8fd9\u6837\u8fd9\u4e9b\u70b9\u90fd\u88ab\u66f4\u65b0\u5b8c\u6bd5\u524d\u4e0d\u4f1a\u5f71\u54cd\u6808\u5185\u7684\u60c5\u51b5\n\n\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u66f4\u65b0\u5b8c\u6bd5\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u66f4\u65b0\u53ef\u4ee5\uff1a\n\n\u9996\u5148\uff0c\u4fdd\u8bc1\u6709\u5e8f\u65f6\uff0c\u64cd\u4f5c\u7684\u5f71\u54cd\u8303\u56f4\u662f\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\uff0c\u4e14\u5de6\u7aef\u70b9\u662f\u5355\u8c03\u7684\uff08\u8fd9\u4e2a\u70b9\u5c31\u662f\u5b83\u81ea\u8eab\uff09\n\n\u4e0d\u540c\u64cd\u4f5c\u7684\u5f71\u54cd\u8303\u56f4\u53ea\u80fd\u5305\u542b\u6216\u76f8\u79bb\n\n\u53ef\u4ee5\u8003\u8651\u626b\u63cf\u7ebf\n\n\u5f53\u626b\u5230\u4e00\u4e2a\u533a\u95f4\u8d77\u70b9\u65f6\uff0c\u5165\u6808\n\n\u5f53\u626b\u5230\u7ec8\u70b9\u65f6\u51fa\u6808\n\n\u8fd9\u6837\u4f1a\u53d1\u73b0\uff0c\u6808\u9876\u59cb\u7ec8\u662f\u4e0d\u5305\u542b\u4efb\u4f55\u6808\u5185\u533a\u95f4\u7684\u64cd\u4f5c\n\n\u80fd\u4fdd\u8bc1\u6b63\u786e\n\n\u5982\u679c\u4e0d\u597d\u7406\u89e3\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u4f1a\u591a\u4e00\u4e2a$\\log m$\uff0c\u4e5f\u8bb8\u80fd\u8fc7\n\n\u6bcf\u66f4\u65b0\u5b8c\u4e00\u5c42\uff0c\u4f1a\u53d1\u73b0\u4e24\u8fb9\u5206\u522b\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u628a\u4e24\u8fb9\u5f52\u5e76\u4e00\u4e0b\u5c31\u80fd\u4f7f\u6574\u4f53\u6709\u5e8f\uff08\u6309DFS\u5e8f\uff09\n\n\u66f4\u65b0\u5b8c\u540e\uff0c\u628a\u6240\u6709\u64cd\u4f5c\u6309\u8f93\u5165\u987a\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u8f93\u51fa\u5c31\u53ef\u4ee5\n\n\u8fd9\u6837\uff0c\u6bcf\u5c42\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6\u662f$O(m)$\uff0c\u4e00\u5171$O(\\log m)$\u5c42\n\n\u6700\u540e\u590d\u6742\u5ea6\u662f$O(n+m \\log m)$\u7684\n\n\u4f46\u662f\u8fd9\u6837\u5199\u7ec6\u8282\u5f88\u591a\uff0c\u5bb9\u6613WA,TLE,MLE,RE(qwq)\n\n\u6240\u4ee5\u4e00\u5b9a\u8981\u7ec6\u5fc3\n\n\u6700\u540e\u662f\u7801\u4e86\u4e00\u4e0a\u5348\u624dAC\u7684\u4ee3\u7801\uff1a\n\n\uff08\u65e2\u7136\u524d\u9762\u5df2\u7ecf\u5199\u5f52\u5e76\u4e86\uff0c\u6700\u540e\u5904\u7406\u65f6\u4e5f\u5f04\u4e2a\u5f52\u5e76\u6392\u5e8f\u5427\uff09\n```cpp\n#include<iostream>\n#define next orz\nusing namespace std;\nconst int N=100007;\nint head[N],next[N*2],ver[N*2],tot;\nlong long v[N];\nint pid[N],cur=1;\nlong long dis[N];\nlong long dep[N];\nint rb[N];\nvoid add(int a,int b){\n\ttot++;\n\tver[tot]=b;\n\tnext[tot]=head[a];\n\thead[a]=tot;\n\ttot++;\n\tver[tot]=a;\n\tnext[tot]=head[b];\n\thead[b]=tot;\n}\nvoid dfs(int id,int pa){\n\tpid[id]=cur++;\n\tdis[id]=dis[pa]+v[id];\n\tdep[id]=dep[pa]+1;\n\tfor(int i=head[id];i;i=next[i]){\n\t\tif(ver[i]==pa)continue;\n\t\tdfs(ver[i],id);\n\t}\n\trb[id]=cur-1;\n}\nstruct opt{\n\tchar type;\n\tint id;\n\tlong long num;\n\tint order;\n};\ninline bool cmp(int a,int b){\n\treturn pid[a]<pid[b];\n}\ninline bool operator<(opt a,opt b){\n\treturn cmp(a.id,b.id);\n}\ninline bool cmp2(opt a,opt b){\n\treturn a.order<b.order;\n}\nopt qlist[N];int cnt;\nopt slist[N];\nlong long sum[N],dsum[N];\nint n,m;\nint st[N],top;\nvoid calc(int l,int r){\n\tif(l==r)return;\n\tint mid=((l+r)>>1);\n\tcalc(l,mid);\n\tcalc(mid+1,r);\n\tint i=l,j=mid+1,p;\n\tint cur;\n\tlong long csum=0,cdsum=0;\n\ttop=0;\n\twhile(j<=r){\n\t\tp=pid[qlist[j].id];\n\t\twhile(top&&rb[qlist[st[top-1]].id]<p){\n\t\t\tcur=st[--top];\n\t\t\tif(qlist[cur].type==1){\n\t\t\t\tcsum-=qlist[cur].num;\n\t\t\t}else if(qlist[cur].type==2){\n\t\t\t\tcdsum-=qlist[cur].num;\n\t\t\t\tcsum+=qlist[cur].num*(dep[qlist[cur].id]-1);\n\t\t\t}\n\t\t}\n\t\twhile(i<=mid&&pid[qlist[i].id]<=p){\n\t\t\tif(i<=mid&&rb[qlist[i].id]<p){\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(qlist[i].type==1){\n\t\t\t\tcsum+=qlist[i].num;\n\t\t\t\tst[top++]=i;\n\t\t\t}else if(qlist[i].type==2){\n\t\t\t\tcdsum+=qlist[i].num;\n\t\t\t\tcsum-=qlist[i].num*(dep[qlist[i].id]-1);\n\t\t\t\tst[top++]=i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\twhile(j<=r&&pid[qlist[j].id]==p){\n\t\t\tif(qlist[j].type==3){\n\t\t\t\tqlist[j].num=qlist[j].num+csum+cdsum*(dep[qlist[j].id]);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t}\n\ti=l;j=mid+1;p=l;\n\twhile(i<=mid&&j<=r){\n\t\tif(qlist[i]<qlist[j]){\n\t\t\tslist[p++]=qlist[i++];\n\t\t}else{\n\t\t\tslist[p++]=qlist[j++];\n\t\t}\n\t}\n\twhile(i<=mid){\n\t\tslist[p++]=qlist[i++];\n\t}\n\twhile(j<=r){\n\t\tslist[p++]=qlist[j++];\n\t}\n\tfor(i=l;i<=r;i++)qlist[i]=slist[i];\n}\nvoid msort(int l,int r){\n\tif(l==r)return;\n\tint mid=((l+r)>>1);\n\tmsort(l,mid);\n\tmsort(mid+1,r);\n\tint i=l,j=mid+1,p=l;\n\twhile(i<=mid&&j<=r){\n\t\tif(cmp2(qlist[i],qlist[j])){\n\t\t\tslist[p++]=qlist[i++];\n\t\t}else{\n\t\t\tslist[p++]=qlist[j++];\n\t\t}\n\t}\n\twhile(i<=mid){\n\t\tslist[p++]=qlist[i++];\n\t}\n\twhile(j<=r){\n\t\tslist[p++]=qlist[j++];\n\t}\n\tfor(i=l;i<=r;i++)qlist[i]=slist[i];\n}\nint main(){\n\t//freopen(\"3178.in\",\"r\",stdin);\n\tios::sync_with_stdio(false);\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>v[i];\n\t}\n\tfor(int i=1,a,b;i<n;i++){\n\t\tcin>>a>>b;\n\t\tadd(a,b);\n\t}\n\tdfs(1,0);\n\tpid[n+1]=0x7fffffff;\n\tfor(int i=0,a;i<m;i++){\n\t\tcin>>a;\n\t\tqlist[i].type=a;\n\t\tcin>>qlist[i].id;\n\t\tif(a!=3){\n\t\t\tcin>>qlist[i].num;\n\t\t}else{\n\t\t\tqlist[i].num=dis[qlist[i].id];\n\t\t}\n\t\tqlist[i].order=i;\n\t}\n\tcalc(0,m-1);\n\tmsort(0,m-1);\n\tfor(int i=0;i<m;i++){\n\t\tif(qlist[i].type==3){\n\t\t\tcout<<qlist[i].num<<endl;\n\t\t}\n\t}\n}\n```\n\n\u7528\u65f61243ms(\u65e0\u6c27) 970ms(\u6c27\u5316)\n\n\u5982\u679c\u4f18\u5316\u5f52\u5e76\u8fc7\u7a0b\uff0c\u53ef\u80fd\u4f1a\u66f4\u5feb",
        "postTime": 1554281271,
        "uid": 86649,
        "name": "Hope2075",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "### \u611f~~\u53d7\u4e00\u4e0b\u795e\u9a6c\u662f\u771f\u6b63\u7684\u6076\u5fc3~~\n#### \u8fd9\u9053\u9898\u8fd8\u7b97\u662f\u6bd4\u8f83\u88f8\u7684\u6811\u94fe\u5256\u5206\uff0c\u9898\u9762\u5f53\u4e2d\u76843\u79cd\u64cd\u4f5c\u6bd4\u8f83\u7b26\u5408\u6811\u94fe\u5256\u5206\u7684\u7528\u9014\uff1a\n\u5c06\u4e8c\u7ef4\u7684\u6811\u5316\u6210\u4e00\u7ef4\u7684\u94fe\uff0c\u5229\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u6570\u636e\u7ef4\u62a4\n\u8bdd\u4e0d\u591a\u8bf4\uff0c\u5949\u4e0a\u849f\u84bb\u7684code\uff1a\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\n#define int long long\nconst int maxn=2e5+10;\ninline int read()\n{\n\tint s=0,w=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tw=-w;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\ts=s*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn s*w;\n}\nint n,m;\nint e,beg[maxn],nex[maxn],to[maxn],w[maxn],wt[maxn];\nint a[maxn<<2],laz[maxn<<2];\nint son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn]; \nint res=0;\n//id[]\u8868\u793a\u65f6\u95f4\u6233\uff08\u5373\u5728\u94fe\u5f53\u4e2d\u7684\u7f16\u53f7\uff09\n//dep[]\u8868\u793a\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\n//siz[]\u8868\u793a\u8be5\u8282\u70b9\u5b50\u6811\u7684\u5927\u5c0f\u3010\u65b9\u4fbf\u4fee\u6539\u5b50\u6811\u6570\u503c\u65f6\u8c03\u7528\u7ebf\u6bb5\u6811\u3011\n//top[]\u8868\u793a\u91cd\u91cf\u5f00\u7aef \n#define mid ((l+r)>>1)\n#define lson rt<<1,l,mid\n#define rson rt<<1|1,mid+1,r\n#define len (r-l+1)\ninline void add(int x,int y)//\u94fe\u5f0f\u524d\u5411\u661f \n{\n    to[++e]=y;\n    nex[e]=beg[x];\n    beg[x]=e;\n}\n//-----------------------\u4ee5\u4e0b\u4e3a\u7ebf\u6bb5\u6811----------------------------------- \ninline void build(int rt,int l,int r)\n{\n    if(l==r)\n\t{\n        a[rt]=wt[l];\n        return;\n    }\n    build(lson);\n    build(rson);\n    a[rt]=(a[rt<<1]+a[rt<<1|1]);\n}\ninline void pushdown(int rt,int lenn)\n{\n    laz[rt<<1]+=laz[rt];\n    laz[rt<<1|1]+=laz[rt];\n    a[rt<<1]+=laz[rt]*(lenn-(lenn>>1));\n    a[rt<<1|1]+=laz[rt]*(lenn>>1);\n    laz[rt]=0;\n}\ninline void query(int rt,int l,int r,int L,int R)\n{\n    if(L<=l&&r<=R)\n\t{\n\t    res+=a[rt];\n\t\treturn;\n\t}\n    else\n\t{\n        if(laz[rt])\n\t\t    pushdown(rt,len);\n        if(L<=mid)\n\t\t    query(lson,L,R);\n        if(R>mid)\n\t\t    query(rson,L,R);\n    }\n}\nvoid update(int node,int left,int right,int pos,int v)\n{\n\tif(left==right)\n\t{\n\t\ta[node]+=v;\n\t\treturn ;\n\t}\n\tint midn=(left+right)/2;\n    if(laz[node])//\u6ce8\u610f\uff1a\u5355\u70b9\u4fee\u6539\u53ef\u80fd\u4f1a\u5f71\u54cdlazy\u6807\u8bb0\uff0c\u9700\u8981\u5904\u7406\u4e00\u4e0b \n\t\tpushdown(node,right-left+1);\n\tif(pos<=midn)\n\t{\n\t\tupdate(2*node,left,midn,pos,v);\n\t}\n\telse\n\t{\n\t\tupdate(2*node+1,midn+1,right,pos,v);\n\t}\n\ta[node]=a[2*node]+a[2*node+1];\n}\ninline void updata(int rt,int l,int r,int L,int R,int k)\n{\n    if(L<=l&&r<=R)\n\t{\n        laz[rt]+=k;\n        a[rt]+=k*len;\n    }\n    else\n\t{\n        if(laz[rt])\n\t\t    pushdown(rt,len);\n        if(L<=mid)\n\t\t    updata(lson,L,R,k);\n        if(R>mid)\n\t\t    updata(rson,L,R,k);\n        a[rt]=(a[rt<<1]+a[rt<<1|1]);\n    }\n}\n//-----------------------\u4ee5\u4e0a\u4e3a\u7ebf\u6bb5\u6811----------------------------------- \ninline void dfs1(int x,int f,int deep)\n{\n    dep[x]=deep;\n    fa[x]=f;\n    siz[x]=1;\n    int maxson=-1;\n    for(register int i=beg[x];i;i=nex[i])\n\t{\n        int y=to[i];\n        if(y==f)\n\t\t    continue;\n        dfs1(y,x,deep+1);\n        siz[x]+=siz[y];\n        if(siz[y]>maxson)\n\t\t\tson[x]=y,maxson=siz[y];\n    }\n}\ninline void dfs2(int x,int topf)\n{\n    id[x]=++cnt;\n    wt[cnt]=w[x];\n    top[x]=topf;\n    if(!son[x])\n\t    return;\n    dfs2(son[x],topf);\n    for(register int i=beg[x];i;i=nex[i])\n\t{\n        int y=to[i];\n        if(y==fa[x]||y==son[x])\n\t\t\tcontinue;\n        dfs2(y,y);\n    }\n}\ninline int qRange(int x,int y)\n{\n    int ans=0;\n    while(top[x]!=top[y])\n\t{\n        if(dep[top[x]]<dep[top[y]])\n\t\t    swap(x,y);\n        res=0;\n        query(1,1,n,id[top[x]],id[x]);\n        ans+=res;\n        x=fa[top[x]];\n    }\n    if(dep[x]>dep[y])\n\t    swap(x,y);\n    res=0;\n    query(1,1,n,id[x],id[y]);\n    ans+=res;\n    return ans;\n}\nsigned main()\n{\n\tn=read();\n\tm=read();\n\tfor(int i=1;i<=n;i++)\n\t\tw[i]=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint a,b;\n\t\ta=read();\n\t\tb=read();\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tdfs1(1,0,1);\n    dfs2(1,1);\n    build(1,1,n);\n\twhile(m--)\n\t{\n\t\tint k,x,y;\n        k=read();\n        if(k==1)\n        {\n        \tx=read();\n        \ty=read();\n        \tupdate(1,1,n,id[x],y);\n\t\t}\n\t\tif(k==2)\n\t\t{\n\t\t\tx=read();\n\t\t\ty=read();\n\t\t\tupdata(1,1,n,id[x],id[x]+siz[x]-1,y);\n\t\t}\n\t\tif(k==3)\n\t\t{\n\t\t\tx=read();\n\t\t\tprintf(\"%lld\\n\",qRange(1,x));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c\u5927\u4f6c\u5bf9\u849f\u84bb\u7684\u89c1\u89e3\u8868\u793a\u6000\u7591\u6216\u4e0d\u89e3\uff0c\u8bf7\u79c1\u4fe1\u672c\u4eba\uff0c48\u5c0f\u65f6\u4e4b\u5185\u56de\u590d\uff01",
        "postTime": 1575739665,
        "uid": 124311,
        "name": "Nice\u5361\u5361\u897f",
        "ccfLevel": 0,
        "title": "\u6811\u4e0a\u64cd\u4f5c"
    },
    {
        "content": "\n>> \u9898\u76ee\u94fe\u63a5\uff1a[\u6d1b\u8c37P3178 [HAOI2015]\u6811\u4e0a\u64cd\u4f5c](https://www.luogu.org/problem/P3178)\n\n\u8fd9\u7bc7\u9898\u89e3\u539f\u53d1\u4e8e[\u6211\u7684blog](https://wangjunrui.netlify.com/2019/10/23/%E6%B4%9B%E8%B0%B7-p3178-haoi2015-%E6%A0%91%E4%B8%8A%E6%93%8D%E4%BD%9C/)\n\n\u8fd9\u662f\u4e00\u9053\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50\u9898\uff0c\u7eaf\u7cb9\u7684\u6a21\u677f\u9898~~\u4e8b\u5b9e\u4e0a\u6a21\u677f\u9898\u6bd4\u4ed6\u96be~~\n\u4e8b\u5b9e\u4e0a\u53ea\u8981\u505a\u8fc7\u8fd9\u9053\u9898[P3384 \u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206](https://www.luogu.org/problem/P3384)\u5c31\u53ef\u4ee5~~\u6211\u628a\u9898\u76ee\u96be\u5ea6\u63d0\u5347\u4e86~~\n\n\u6bd5\u7adf\u6211\u662f\u521a\u5207\u5b8c\u677f\u5b50\u9898\u7684\u4eba\uff0c\u521d\u751f\u725b\u728a\u4e0d\u6015\u864e\uff0c\u76f4\u63a5\u518d\u6253\u4e00\u904d\u7ec3\u7ec3\u624b~~\u88ab\u903c\u7684~~\n\n\u8bb0\u4f4f\u56e0\u4e3a\u8fd9\u9898\u6ca1\u6709\u63d0\u4f9b\u53d6\u6a21\u7684\u6570\uff0c\u56e0\u4e3a$10^6 \\times10^5>2^{31}-1$\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u7206$int$~~\u60a8\u8981\u662f\u60f3\u4f5c\u6b7b\u7684\u8bdd\u4e5f\u53ef\u4ee5~~\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u53ea\u8981\u61d2\u6807\u8bb0\u548c\u7ebf\u6bb5\u6811\u4e0a\u7684\u7d2f\u52a0$long\\ long$\u4f7f\u7528\u5373\u53ef\uff0c\u8fd9\u6837\u6211\u5c31\u8fc7\u4e86\u8fd9\u9053~~\u5047\u7d2b\u9898~~\u96be\u9898\n\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define ll long long\n#define re register\n#define ls (k<<1)\n#define rs (k<<1|1)\ntemplate<typename T>\ninline void read(T&x)\n{\n\tx=0;\n\tchar s=getchar();\n\tbool f=false;\n\twhile(!(s>='0'&&s<='9'))\n\t{\n\t\tif(s=='-')\n\t\t\tf=true;\n\t\ts=getchar();\n\t}\n\twhile(s>='0'&&s<='9')\n\t{\n\t\tx=(x<<1)+(x<<3)+s-'0';\n\t\ts=getchar();\n\t}\n\tif(f)\n\t\tx=(~x)+1;\n\treturn;\n}\nconst int N=1e5+10;\n#define M (N<<1)\nstruct Edge\n{\n\tint next,to;\n} edge[M];\nint num_edge,head[N];\nint n,m,cnt,rk[N],id[N],dep[N],fa[N],top[N],son[N],size[N],num[N];\nll res;\nstruct Tree\n{\n\tint l,r,size;\n\tll lazy,sum;\n} tree[N<<2];\ninline void add_edge(int from,int to)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\thead[from]=num_edge;\n}\ninline void dfs1(int u,int f)\n{\n\tdep[u]=dep[f]+1;\n\tfa[u]=f;\n\tsize[u]=1;\n\tfor(re int i=head[u]; i; i=edge[i].next)\n\t{\n\t\tint &v=edge[i].to;\n\t\tif(v==f)\n\t\t\tcontinue;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]])\n\t\t\tson[u]=v;\n\t}\n}\ninline void dfs2(int u,int tp)\n{\n\tid[u]=++cnt;\n\trk[cnt]=u;\n\ttop[u]=tp;\n\tif(!son[u])\n\t\treturn;\n\tdfs2(son[u],tp);\n\tfor(re int i=head[u]; i; i=edge[i].next)\n\t{\n\t\tint &v=edge[i].to;\n\t\tif(id[v])\n\t\t\tcontinue;\n\t\tdfs2(v,v);\n\t}\n\treturn;\n}\ninline void pushup(int k)\n{\n\ttree[k].sum=tree[ls].sum+tree[rs].sum;\n}\ninline void pushdown(int k)\n{\n\tif(!tree[k].lazy)\n\t\treturn;\n\ttree[ls].lazy+=tree[k].lazy;\n\ttree[rs].lazy+=tree[k].lazy;\n\ttree[ls].sum+=tree[k].lazy*tree[ls].size;\n\ttree[rs].sum+=tree[k].lazy*tree[rs].size;\n\ttree[k].lazy=0;\n}\ninline void build(int k,int l,int r)\n{\n\ttree[k].l=l;\n\ttree[k].r=r;\n\ttree[k].size=r-l+1;\n\tif(l==r)\n\t{\n\t\ttree[k].sum=num[rk[l]];\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\tpushup(k);\n\treturn;\n}\ninline void update(int k,int l,int r,int val)\n{\n\tif(l<=tree[k].l&&tree[k].r<=r)\n\t{\n\t\ttree[k].sum+=(ll)val*tree[k].size;\n\t\ttree[k].lazy+=val;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid=(tree[k].l+tree[k].r)>>1;\n\tif(l<=mid)\n\t\tupdate(ls,l,r,val);\n\tif(mid<r)\n\t\tupdate(rs,l,r,val);\n\tpushup(k);\n\treturn;\n}\ninline void query(int k,int l,int r)\n{\n\tif(l<=tree[k].l&&tree[k].r<=r)\n\t{\n\t\tres+=tree[k].sum;\n\t\treturn;\n\t}\n\tpushdown(k);\n\tint mid=(tree[k].l+tree[k].r)>>1;\n\tif(l<=mid)\n\t\tquery(ls,l,r);\n\tif(mid<r)\n\t\tquery(rs,l,r);\n}\ninline ll ask(int x,int y)\n{\n\tll ans=0ll;\n\twhile(top[x]!=top[y])\n\t{\n\t\tif(dep[top[x]]<dep[top[y]])\n\t\t\tswap(x,y);\n\t\tres=0;\n\t\tquery(1,id[top[x]],id[x]);\n\t\tans+=res;\n\t\tx=fa[top[x]];\n\t}\n\tif(dep[x]>dep[y])\n\t\tswap(x,y);\n\tres=0;\n\tquery(1,id[x],id[y]);\n\tans+=res;\n\treturn ans;\n}\nint main()\n{\n\tread(n),read(m);\n\tfor(re int i=1; i<=n; ++i)\n\t\tread(num[i]);\n\tfor(re int i=1,x,y; i<n; ++i)\n\t{\n\t\tread(x),read(y);\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tfor(re int i=1,opt,x,y; i<=m; ++i)\n\t{\n\t\tread(opt);\n\t\tif(opt==1)\n\t\t{\n\t\t\tread(x),read(y);\n\t\t\tupdate(1,id[x],id[x],y);\n\t\t}\n\t\telse if(opt==2)\n\t\t{\n\t\t\tread(x),read(y);\n\t\t\tupdate(1,id[x],id[x]+size[x]-1,y);\n\t\t}\n\t\telse if(opt==3)\n\t\t{\n\t\t\tread(x);\n\t\t\tprintf(\"%lld\\n\",ask(1,x));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n~~\u9a6c\u8702\u5dee\u8bc4~~",
        "postTime": 1571836902,
        "uid": 133322,
        "name": "QwQ\u849f\u84bbwjr",
        "ccfLevel": 7,
        "title": "P3178 [HAOI2015]\u6811\u4e0a\u64cd\u4f5c"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206\u56fa\u7136\u53ef\u4ee5\u641e\uff0c\u4f46\u662f.......\n\n#      ~~\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u90a3\u5c31\u5c31\u7528\u4ed6\u554a~~\n\n\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100010;\nstruct edge{\n\tint v,next;\n}e[N*4];\nstruct tree{\n\tint l,r;\n\tlong long val,add;\n}t[N*4];//\u7528\u7ed3\u6784\u4f53\u5b58\u8fb9\u548c\u7ebf\u6bb5\u6811. \nint n,m,a[N],cnt,sum,head[N];\nint size[N],fath[N],dep[N],id[N],w[N],top[N],son[N];\n//\u5404\u4e2a\u6570\u7ec4,\u610f\u4e49\u4e0b\u9762\u6709. \nvoid add(int u,int v){\n\te[++cnt].v=v;\n\te[cnt].next=head[u];\n\thead[u]=cnt;\n}//\u5efa\u8fb9. \nvoid spread(int p){\n\tif(t[p].add){\n\t\tt[p*2].val+=t[p].add*(t[p*2].r-t[p*2].l+1);\n\t\tt[p*2+1].val+=t[p].add*(t[p*2+1].r-t[p*2+1].l+1);\n\t\tt[p*2].add+=t[p].add;\n\t\tt[p*2+1].add+=t[p].add;\n\t\tt[p].add=0;\n\t}\n}//\u4e0b\u653e\u6807\u8bb0. \nvoid dfs1(int u,int fa){\n\tfath[u]=fa;\n\tsize[u]=1;\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(v==fa) continue;\n\t\tdep[v]=dep[u]+1;\n\t\tdfs1(v,u);\n\t\tsize[u]+=size[v];\n\t\tif(size[v]>size[son[u]])\n\t\t\tson[u]=v;\n\t}\n}//\u7b2c\u4e00\u4e2aDFS\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u7236\u4eb2(fath[i]),\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u6570(size[i]),\n //\u5f53\u524d\u70b9\u7684\u91cd\u513f\u5b50(\u5373\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u4e2d\u8282\u70b9\u6570\u6700\u591a\u7684\u5b50\u6811\u7684\u6839,son[i]),\u5f53\u524d\u70b9\u7684\u6df1\u5ea6(dep[i]). \nvoid dfs2(int u,int topf){\n\tid[u]=++sum;\n\tw[sum]=a[u];\n\ttop[u]=topf;\n\tif(!son[u]) return;\n\tdfs2(son[u],topf);\n\tfor(int i=head[u];i;i=e[i].next){\n\t\tint v=e[i].v;\n\t\tif(v==fath[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}//\u7b2c\u4e8c\u4e2aDFS\u6c42\u51fa\u6bcf\u4e2a\u70b9\u6240\u5728\u94fe\u7684\u9876\u70b9(top[i]),\u5e76\u628a\u70b9\u7684\u503c\u9644\u4e0a\u65b0\u7684\u7f16\u53f7\u4ee5\u4fbf\u8fdb\u5165\u7ebf\u6bb5\u6811\u4e2d(id[i],w[i]). \nvoid build(int p,int l,int r){\n\tt[p].l=l;t[p].r=r;\n\tif(l==r){\n\t\tt[p].val=w[l];\n\t\tt[p].add=0;\n\t\treturn;\n\t}\n\tint mid=l+r>>1;\n\tbuild(p*2,l,mid);\n\tbuild(p*2+1,mid+1,r);\n\tt[p].val=t[p*2].val+t[p*2+1].val;\n}//\u5efa\u6811 \nvoid change(int p,int l,int r,int v){\n\tif(t[p].l>=l&&t[p].r<=r){\n\t\tt[p].val+=(long long)v*(t[p].r-t[p].l+1);\n\t\tt[p].add+=v;\n\t\treturn;\n\t}\n\tspread(p);\n\tint mid=(t[p].l+t[p].r)>>1;\n\tif(mid>=l) change(p*2,l,r,v);\n\tif(mid<r) change(p*2+1,l,r,v);\n\tt[p].val=t[p*2].val+t[p*2+1].val;\n}//\u5355\u70b9\u67e5\u8be2\u548c\u533a\u95f4\u67e5\u8be2\u53ef\u4ee5\u653e\u5230\u4e00\u8d77\u505a. \nlong long query(int p,int l,int r){\n\tif(t[p].l>=l&&t[p].r<=r)\n\t\treturn t[p].val;\n\tspread(p);\n\tlong long ans=0,mid=(t[p].l+t[p].r)>>1;\n\tif(mid>=l) ans+=query(p*2,l,r);\n\tif(mid<r) ans+=query(p*2+1,l,r);\n\treturn ans;\n}\nlong long qiuzhi(int x,int y){\n\tlong long ans=0;\n\twhile(top[x]!=top[y]){\n\t\tif(dep[top[x]]<dep[top[y]]) swap(x,y);\n\t\tans+=query(1,id[top[x]],id[x]);\n\t\tx=fath[top[x]];\n\t}\n\tif(dep[x]>dep[y])swap(x,y);\n\tans+=query(1,id[x],id[y]);\n\treturn ans;\n}//\u5e38\u89c4\u64cd\u4f5c,\u8ba1\u7b97\u4e24\u4e2a\u70b9\u6240\u8fde\u6210\u7684\u8def\u5f84\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c. \nint main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);//\u672c\u4eba\u6d4b\u8bd5\u6570\u636e\u7684\u65f6\u5019\u6253\u7684 \n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tint u,v;\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d %d\",&u,&v);\n\t\tadd(u,v);\n\t\tadd(v,u);\n\t}\n\tdep[1]=1;\n\tdfs1(1,-1);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tint opt,x;\n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d\",&opt);\n\t\tif(opt==1){\n\t\t\tscanf(\"%d %d\",&x,&v);\n\t\t\tchange(1,id[x],id[x],v);\n\t\t}\n\t\telse if(opt==2){\n\t\t\tscanf(\"%d %d\",&x,&v);\n\t\t\tchange(1,id[x],id[x]+size[x]-1,v);\n\t\t\t//\u533a\u95f4id[x]\u5230id[x]+size[x]-1\u5c31\u53ef\u4ee5\u8868\u793a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811,\u60f3\u60f3\u4e3a\u4ec0\u4e48\u53ef\u4ee5. \n\t\t}\n\t\telse if(opt==3){\n\t\t\tscanf(\"%d\",&x);\n\t\t\tcout<<qiuzhi(x,1)<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1566967972,
        "uid": 203825,
        "name": "\u5207\u683c\u74e6\u00b7\u661f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "# \u8fd9\u9053\u9898\u662f\u88f8\u7684\u6811\u94fe\u5256\u5206\u7b97\u6cd5\n\n# \u8fd9\u9053\u9898\u662f\u88f8\u7684\u6811\u94fe\u5256\u5206\u7b97\u6cd5\n\n# \u8fd9\u9053\u9898\u662f\u88f8\u7684\u6811\u94fe\u5256\u5206\u7b97\u6cd5\n\n\u6211\u89c9\u5f97\u8fd8\u53ef\u4ee5\u3002\u56e0\u4e3a\u6211\u8bfb\u4f18\u5fd8\u8bb0\u5199\u8d1f\u6570\u4e86\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u70b9\u64cd\u4f5c\uff0c\u7ebf\u6bb5\u6811\u4ece\u81ea\u5df1\u5230\u81ea\u5df1\u589e\u52a0\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u548c P3384 \u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206 \u4e00\u6a21\u4e00\u6837\u7684\u505a\u6cd5\uff0c\u7b80\u76f4\u5c31\u662f\u53cc\u500d\u7ecf\u9a8c\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\n\nstruct edge{\n    long long to,next;\n}e[200010];\nlong long n,m,len,tot;\nlong long a[100010],tree[400010],lazy[400010];\nlong long head[100010],real[100010],id[100010],fa[100010],hson[100010],dep[100010],size[100010],top[100010];\n\nlong long v_in(){//\u5feb\u8bfb \n    long long sum=0,f=1;\n    char ch=getchar();\n    while (ch<'0'||ch>'9'){\n        if (ch=='-') f*=-1;\n        ch=getchar();\n    }\n    while (ch>='0'&&ch<='9'){\n        sum=sum*10+ch-'0';\n        ch=getchar();\n    }\n    return sum*f;\n}\n\nvoid add(long long u,long long v){//\u52a0\u8fb9 \n    e[++len].to=v;\n    e[len].next=head[u];\n    head[u]=len;\n}\n\n/*\u7ebf\u6bb5\u6811(Segment Tree)*/ \n\nvoid pushup(long long rt){//\u4e0a\u63a8 \n    tree[rt]=tree[rt<<1]+tree[rt<<1|1];\n}\n\nvoid pushdown(long long rt,long long ln,long long rn){//\u4e0b\u63a8 \n    if (lazy[rt]){\n        tree[rt<<1]+=lazy[rt]*ln;\n        tree[rt<<1|1]+=lazy[rt]*rn;\n        lazy[rt<<1]+=lazy[rt];\n        lazy[rt<<1|1]+=lazy[rt];\n        lazy[rt]=0;\n    }\n}\n\nvoid build(long long l,long long r,long long rt){//\u5efa\u6811 \n    if (l==r){\n        tree[rt]=a[real[l]];\n        return;\n    }\n    long long mid=(l+r)>>1;\n    build(l,mid,rt<<1);\n    build(mid+1,r,rt<<1|1);\n    pushup(rt);\n}\n\nvoid update(long long l,long long r,long long rt,long long left,long long right,long long c){//\u4fee\u6539\u64cd\u4f5c \n    if (l>=left&&r<=right){\n        tree[rt]+=c*(r-l+1);\n        lazy[rt]+=c;\n        return;\n    }\n    long long mid=(l+r)>>1;\n    pushdown(rt,mid-l+1,r-mid);\n    if (mid>=left) update(l,mid,rt<<1,left,right,c);\n    if (mid+1<=right) update(mid+1,r,rt<<1|1,left,right,c);\n    pushup(rt);\n}\n\nlong long query(long long l,long long r,long long rt,long long left,long long right){//\u8be2\u95ee\u64cd\u4f5c \n    if (l>=left&&r<=right) return tree[rt];\n    long long mid=(l+r)>>1,ans=0;\n    pushdown(rt,mid-l+1,r-mid);\n    if (mid>=left) ans+=query(l,mid,rt<<1,left,right);\n    if (mid+1<=right) ans+=query(mid+1,r,rt<<1|1,left,right);\n    pushup(rt);\n    return ans;\n}\n\n/*\u6811\u94fe\u5256\u5206*/\n\nvoid dfs1(long long u,long long f){//\u7b2c\u4e00\u904d\u6df1\u641c(\u5efa\u6811,\u8bb0\u5f55fa,size,dep,hson) \n    fa[u]=f;\n    size[u]=1;\n    for (long long i=head[u];i!=0;i=e[i].next){\n        long long v=e[i].to;\n        if (fa[u]!=v){\n            dep[v]=dep[u]+1;\n            dfs1(v,u);\n            if (hson[u]==0||size[hson[u]]<size[v]) hson[u]=v;\n            size[u]+=size[v];\n        }\n    }\n}\n\nvoid dfs2(long long u,long long anc){//\u7b2c\u4e8c\u904d\u6df1\u641c(\u5206\u94fe,\u91cd\u65b0\u7f16\u53f7,\u8bb0\u5f55top,id,real) \n    top[u]=anc;\n    id[u]=++tot;\n    real[tot]=u;\n    if (hson[u]==0) return;\n    dfs2(hson[u],anc);\n    for (long long i=head[u];i!=0;i=e[i].next){\n        long long v=e[i].to;\n        if (v!=fa[u]&&v!=hson[u]) dfs2(v,v);\n    }\n}\n\nvoid point_add(){//1\u64cd\u4f5c \n    long long x=v_in(),w=v_in();\n    update(1,n,1,id[x],id[x],w);\n}\n\nvoid tree_add(){//2\u64cd\u4f5c \n    long long x=v_in(),w=v_in();\n    update(1,n,1,id[x],id[x]+size[x]-1,w);\n}\n\nvoid chain_query(){//3\u64cd\u4f5c \n    long long u=v_in();\n    long long tu=top[u],ans=0;\n    while (tu!=1){\n        ans+=query(1,n,1,id[tu],id[u]);\n        u=fa[tu];\n        tu=top[u];\n    }\n    ans+=query(1,n,1,id[1],id[u]);\n    printf(\"%lld\\n\",ans);\n}\n\nmain(){\n    n=v_in();\n    m=v_in();\n    for (long long i=1;i<=n;i++) a[i]=v_in();\n    for (long long i=1;i<n;i++){\n        long long u=v_in(),v=v_in();\n        add(u,v);//\u65e0\u5411\u8fb9 \n        add(v,u);\n    }\n    dep[1]=1;\n    dfs1(1,0);\n    dfs2(1,1);\n    build(1,n,1);\n    for (long long i=1;i<=m;i++){\n        long long q=v_in();\n        if (q==1) point_add();\n        else if (q==2) tree_add();\n        else chain_query();\n    }\n    return 0;\n}\n```",
        "postTime": 1507814475,
        "uid": 37781,
        "name": "\u6211\u4e0d\u662f\u67f3\u6a59\u6c41",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u9898\u76ee\u94fe\u63a5[\u6811\u4e0a\u64cd\u4f5c](https://www.luogu.com.cn/problem/P3178)\n#### \u9898\u610f\n- \u6709\u4e00\u68f5\u70b9\u6570\u4e3a n \u7684\u6811\uff0c\u4ee5\u70b9 1 \u4e3a\u6839\uff0c\u4e14\u70b9\u6709\u70b9\u6743\u3002\u7136\u540e\u6709 m \u4e2a\u64cd\u4f5c\uff0c\u5206\u4e3a\u4e09\u79cd\uff1a\n\n- \u64cd\u4f5c 1 \uff1a\u628a\u67d0\u4e2a\u70b9 x \u7684\u70b9\u6743\u589e\u52a0 a \u3002\n\n- \u64cd\u4f5c 2 \uff1a\u628a\u67d0\u4e2a\u70b9 x \u7684\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u90fd\u589e\u52a0 a \u3002\n\n- \u64cd\u4f5c 3 \uff1a\u8be2\u95ee\u67d0\u4e2a\u70b9 x \u5230\u6839\u7684\u8def\u5f84\u4e2d\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c\u3002\n\n- n,m<=100000\n\n\n------------\n\u8fd9\u9898\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u6811\u5256\u7684\u6a21\u677f\u9898\u3002\n\n\u518d\u4ecb\u7ecd\u4e00\u79cd\u505a\u6cd5\u3002\n\n\u5148\u666e\u53ca\u4e00\u4e2a\u6982\u5ff5\uff1a \u6811\u7684\u62ec\u53f7\u5e8f\u5217\n- \u5728 $dfs $\u8fc7\u7a0b\uff0c\u8fdb\u5165\u4e00\u4e2a\u70b9\uff0c\u5c31\u5c06\u4e00\u4e2a\u5de6\u62ec\u53f7\u52a0\u5165\u5e8f\u5217\uff0c\u9000\u51fa\u4e00\u4e2a\u70b9\uff0c\u5c31\u5c06\u4e00\u4e2a\u53f3\u62ec\u53f7\u52a0\u5165\u5e8f\u5217\u3002\u8fd9\u4e2a\u5e8f\u5217\uff0c\u79f0\u4e3a\u6811\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n#### \u601d\u8def\n- \u8bbe l[x]\u4e3ax\u7684\u5de6\u62ec\u53f7\u6240\u5728\u4f4d\u7f6e\uff0cr[x]\u4e3ax\u7684\u53f3\u62ec\u53f7\u6240\u5728\u4f4d\u7f6e\u3002\n\n- \u7ed9\u4e00\u4e2a\u70b9 x \u7684\u70b9\u6743\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u5c31\u662f\u7ed9x\u5b50\u6811\u4e2d\u6240\u6709\u70b9\u5230\u6839\u8def\u5f84\u7684\u6743\u503c\u548c\u52a0\u4e0a\u8fd9\u4e2a\u6570\uff0c\u5373\u4e3a\u7ed9[l[x],r[x]-1] \u52a0\u4e0a\u8fd9\u4e2a\u6570\u3002\u5728\u67e5\u8be2\u65f6\u8be2\u95ee l[x] \u5904\u7684\u503c\u3002\n\n- \u901a\u8fc7\u5dee\u5206\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7ed9 l[x]\u52a0\u4e0a\u8fd9\u4e2a\u6570\uff0c\u7ed9 r[x] \u51cf\u53bb\u8fd9\u4e2a\u6570\u3002\u5728\u67e5\u8be2\u65f6\u8be2\u95ee [1,l[x]] \u7684\u548c\u3002\n\n- \u90a3\u4e48\uff0c\u7ed9\u4e00\u4e2a\u70b9x\u5b50\u6811\u91cc\u7684\u6240\u6709\u70b9\u52a0\u4e0a\u4e00\u4e2a\u6570\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0\u5165\u4e00\u4e2a\u6570\uff0c\u8d21\u732e\u7cfb\u6570\u662f\u533a\u95f4\u91cc\u5de6\u62ec\u53f7\u4e2a\u6570-\u53f3\u62ec\u53f7\u4e2a\u6570\u3002\n\n- \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n\n\n------------\n\n#### \u4ee3\u7801\n~~\u81ea\u5df1\u6253~~",
        "postTime": 1576228635,
        "uid": 176990,
        "name": "Celtic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u9996\u5148\u6811\u94fe\u5256\u5206\u5f97\u5230\u91cd\u94fe\u5e8f\uff0c\u7136\u540e\u8003\u8651\u64cd\u4f5c\uff1a\n\n\n1-\u5355\u70b9\u66f4\u65b0\uff1a\n\n2-\u533a\u95f4\u66f4\u65b0\uff1a\u4ee5\u67d0\u70b9\u4e3a\u6839\u7684\u533a\u95f4\u662fp[x]\u548cp[x]+size[x]-1\uff0c\u521a\u597d\u8fde\u7eed\n\n3-\u6c42\u8def\u5f84\uff1a\u67d0\u70b9\u5230\u6839\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u6309\u91cd\u94fe\u3001\u8df3\u3001\u91cd\u94fe\u2026\u7684\u7ec4\u5408\u6765\u5b9e\u73b0\uff0c\u4e5f\u5373\u591a\u4e2a\u533a\u95f4\u7684\u548c\u7ec4\u5408\u8d77\u6765\u3002\n\n\u663e\u7136\uff0c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u64cd\u4f5c\u548c\u67e5\u8be2\u3002\n### \u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\nconst int N = 1e5 + 5;\nvector<int> g[N];\nint n, m, last,\n    o[N],w[N],\n    p[N], dep[N], fa[N], son[N], size[N], top[N];\nstruct Node {\n    int L, R;\n    long long sum, tag;\n    void save_tag(long long w) {\n        sum += (R+1-L) * w;\n        tag += w;\n    }\n} tree[4*N];\n\nvoid build(int L, int R, int k) {\n    tree[k].L = L;\n    tree[k].R = R;\n    if(L == R) {\n        tree[k].sum = o[L];\n        return;\n    }\n    int mid = (L+R) / 2;\n    build(L, mid, 2*k);\n    build(mid+1, R, 2*k+1);\n    tree[k].sum = tree[2*k].sum + tree[2*k+1].sum;\n}\n\nvoid push_down(int k) {\n    tree[2*k].save_tag(tree[k].tag);\n    tree[2*k+1].save_tag(tree[k].tag);\n    tree[k].tag = 0;\n}\n\nvoid update(int k, int x, int y, int w) {\n    int L = tree[k].L, R = tree[k].R;\n    if(y<L || x>R)\n        return;\n    if(x<=L && y>=R) {\n        tree[k].save_tag(w);\n        return;\n    }\n    if(tree[k].tag)\n        push_down(k);\n    int mid = (L+R) / 2;\n    if(x <= mid)\n        update(2*k, x, y, w);\n    if(y >= mid+1)\n        update(2*k+1, x, y, w);\n    tree[k].sum = tree[2*k].sum + tree[2*k+1].sum;\n}\n\nlong long query(int k, int x, int y) {\n    int L = tree[k].L, R = tree[k].R;\n    if(x<=L && y>=R)\n        return tree[k].sum;\n    if(tree[k].tag)\n        push_down(k);\n    long long ans = 0;\n    int mid = (L+R)/2;\n    if(x <= mid)\n        ans += query(2*k, x, y);\n    if(y >= mid+1)\n        ans += query(2*k+1, x, y);\n    return ans;\n}\n\nvoid dfs1(int x, int father, int len) {\n    dep[x] = len;\n    fa[x] = father;\n    size[x] = 1;\n    for(int i = 0; i < g[x].size(); i++) {\n        int y = g[x][i];\n        if(y == father) continue;\n        dfs1(y, x, len + 1);\n        size[x] += size[y];\n        if(size[y] > size[son[x]])\n            son[x] = y;\n    }\n}\n\nvoid dfs2(int x, int tp) {\n    o[++last] = w[x];\n    p[x] = last;\n    top[x] = tp;\n    if(son[x] == 0)\n        return;\n    dfs2(son[x], tp);\n    for(int i = 0; i < g[x].size(); i++) {\n        int y = g[x][i];\n        if(y==fa[x] || y==son[x])\n            continue;\n        dfs2(y, y);\n    }\n}\n\nint main() {\n    cin>>n>>m;\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", w+i);\n    for(int i = 1; i < n; i++) {\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        g[x].push_back(y);\n        g[y].push_back(x);\n    }\n    dfs1(1, 0, 1);\n    dfs2(1, 1);\n    build(1, n, 1);\n    for(int i = 1; i <=m; i++) {\n        int opt, x, y;\n        cin>>opt>>x;\n        switch(opt) {\n        case 1:\n            scanf(\"%d\", &y);\n            update(1, p[x], p[x], y);\n            break;\n        case 2:\n            scanf(\"%d\", &y);\n            update(1, p[x], p[x]+size[x]-1, y);\n            break;\n        default:\n            long long sum = 0;\n            while(top[x] != 1) {\n                sum += query(1, p[top[x]], p[x]);\n                x = fa[top[x]];\n            }\n            sum += query(1, p[1], p[x]);\n            cout<<sum<<endl;\n        }\n    }\n    return 0;\n}\n```\n",
        "postTime": 1566352337,
        "uid": 179983,
        "name": "59percent",
        "ccfLevel": 0,
        "title": "\u6811\u4e0a\u64cd\u4f5c"
    },
    {
        "content": "\u8fd9\u662f\u6811\u94fe\u5256\u5206\u6a21\u677f\u9898\u3002\n\n\u4e2a\u4eba\u89c9\u5f97\u552f\u4e00\u5751\u7684\u5730\u65b9\u5c31\u662f\uff0c\u8f93\u5165\u662f\u6709\u8d1f\u6570\u7684\uff08~~\u81ea\u5df1\u5199\u5feb\u8bfb\u6ca1\u52a0\u5224\u8d1f\uff0c\u8c03\u4e86\u6211\u8d3c\u4e45~~\uff09\n\n\u8fd9\u9898\u663e\u7136\u662f\u6a21\u677f\u7684\u5f31\u5316\u7248\uff0c\u6bd4\u6a21\u677f\u5c11\u4e86\u4e24\u4e2a\u64cd\u4f5c\u3002\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define pushup(o) t[o]=t[o<<1]+t[o<<1|1]\n#define wxp 100001\nll n,m,to[200000],fa[wxp],next[200000],head[wxp],son[wxp],siz[wxp],top[wxp],w[wxp],wt[wxp],t[400001],tag[400001],tot,cnt,id[wxp],dep[wxp];\nll read(){\n    ll x=0,f=1;\n    char c=getchar();\n    while(c>'9'||c<'0'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();\n    return x*f;\n}\nvoid build(ll o,ll l,ll r){\n    tag[o]=0;\n    if(l==r)t[o]=w[l];\n    else{\n        ll mid=l+r>>1;\n        build(o<<1,l,mid);\n        build(o<<1|1,mid+1,r);\n        pushup(o);\n    }\n}\nvoid pushdown(ll o,ll l,ll r){\n    ll mid=l+r>>1;\n    tag[o<<1]+=tag[o];\n    tag[o<<1|1]+=tag[o];\n    t[o<<1]+=tag[o]*(mid-l+1);\n    t[o<<1|1]+=tag[o]*(r-mid);\n    tag[o]=0;\n}\nll query(ll o,ll l,ll r,ll x,ll y){\n    if(x<=l&&r<=y)return t[o];\n    pushdown(o,l,r);\n    ll ans=0,mid=l+r>>1;\n    if(x<=mid)ans=query(o<<1,l,mid,x,y);\n    if(mid<y)ans+=query(o<<1|1,mid+1,r,x,y);\n    return ans;\n}\nvoid update(ll o,ll l,ll r,ll x,ll y,ll wwxp){\n    if(x<=l&&r<=y){\n        t[o]+=wwxp*(r-l+1);\n        tag[o]+=wwxp;\n    }\n    else{\n        pushdown(o,l,r);\n        ll mid=l+r>>1;\n        if(x<=mid)update(o<<1,l,mid,x,y,wwxp);\n        if(mid<y)update(o<<1|1,mid+1,r,x,y,wwxp);\n        pushup(o);\n    }\n}\nvoid add(ll u,ll v){\n    to[++tot]=v,next[tot]=head[u],head[u]=tot;\n}\nvoid dfs1(ll s,ll f){\n    fa[s]=f;\n    dep[s]=dep[f]+1;\n    siz[s]=1;\n    for(int i=head[s];i;i=next[i]){\n        if(to[i]==f)continue;\n        dfs1(to[i],s);\n        siz[s]+=siz[to[i]];\n        if(siz[son[s]]<siz[to[i]])son[s]=to[i];\n    }\n}\nvoid dfs2(ll s,ll t){\n    id[s]=++cnt;\n    top[s]=t;\n    w[cnt]=wt[s];\n    if(!son[s])return;\n    dfs2(son[s],t);\n    for(int i=head[s];i;i=next[i]){\n        if(to[i]==fa[s]||to[i]==son[s])continue;\n        dfs2(to[i],to[i]);\n    }\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=n;i++)wt[i]=read();\n    for(int i=1;i<n;i++){\n        int u=read(),v=read();\n        add(u,v),add(v,u);\n    }\n    dfs1(1,0);\n    dfs2(1,1);\n    build(1,1,n);\n    while(m--){\n        int k=read();\n        if(k==1){\n            ll x=read(),y=read();\n            update(1,1,n,id[x],id[x],y);\n        }\n        if(k==2){\n            ll x=read(),y=read();\n            update(1,1,n,id[x],id[x]+siz[x]-1,y);\n        }\n        if(k==3){\n            ll x=read(),ans=0;\n            while(top[x]!=1){\n                ans+=query(1,1,n,id[top[x]],id[x]);\n                x=fa[top[x]];\n            }\n            printf(\"%lld\\n\",ans+query(1,1,n,1,id[x]));\n        }\n    }\n}\n```\n\u4ee3\u7801\u4e2dwt\u6570\u7ec4\u662f\u9898\u76ee\u8bfb\u5165\u7684n\u4e2a\u6570\uff0cw\u6570\u7ec4\u662f\u6309\u7167\u7f16\u53f7\u6392\u5e8f\u8fc7\u540e\u7684n\u4e2a\u6570\n\n~~wxp\u662f\u6211\u6559\u7ec3~~\n\n\u8c03\u9898\u4e0d\u6613\uff0c\u671b\u7ba1\u7406\u5458\u5927\u5927\u901a\u8fc7QwQ",
        "postTime": 1551851445,
        "uid": 79711,
        "name": "Sunqi666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u9898\u5176\u5b9e\u53ef\u4ee5\u5728\u51fa\u6808\u5165\u6808\u5e8f\u4e0a\u5efa\u7acb\u6811\u72b6\u6570\u7ec4\n\n\u7531\u4e8e\u4e00\u9897\u6811\u6839\u8282\u70b9\u5165\u6808\u4e0e\u51fa\u6808\u5e8f\u4e4b\u95f4\u5939\u5f97\u662f\u5b83\u7684\u5b50\u6811\u6240\u4ee5\u6211\u4eec\u5728\u8be5\u8282\u70b9\u5165\u6808\u7684\u5730\u65b9\u52a0\u4e0a\u5b83\u7684$val$\u51fa\u6808\u7684\u65f6\u5019\u51cf\u53bb\u5b83\u7684$val$ \u4e4b\u540e\u67e5\u8be2$x$\u5165\u6808\u5230$1$\u7684\u524d\u7f00\u548c\u5c31\u662f$x$\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\n\n\u7ed9\u4ee5\u67d0\u4e00\u8282\u70b9 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u5728$x$\u8282\u70b9\u4e0a\u589e\u52a0$val$\u4f1a\u4f7f\u8be5\u5b50\u6811\u4e0a\u6240\u6709\u7684\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u90fd\u589e\u52a0$val$\n\n\u4f46\u662f\u7ed9\u4ee5$x$\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u7684\u70b9\u90fd\u589e\u52a0\u4e00\u4e2a$val$, \u6bcf\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8ddd\u79bb\u589e\u52a0\u7684\u503c\u4e0d\u540c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u7b2c\u4e8c\u4e2a\u6811\u72b6\u6570\u7ec4\u6765\u7ef4\u62a4\u8f93\u51fa$t2.ask(x) * dis[x] + t1.ask(x)$\n\n\u5177\u4f53\u64cd\u4f5c\u8bf7\u770b\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstdlib>\n#include<cstring>\n#include<string>\n#include<queue>\n#include<ctime>\n#include<deque>\n#include<set>\n#include<bitset>\n#include<vector>\n#include<list>\n#include<stack>\n#include<map>\n#include<cmath>\n#include<cctype>\n#include<ctime>\n#define ll long long\n#define inf 99999999\n#define int long long\n#define N 101000\nusing namespace std;\ninline ll read()\n{\n \tll res=0,bo=1;\n \tchar ch=getchar();\n \twhile(ch<'0'||ch>'9'){if(ch=='-')bo=-1;ch=getchar();}\n \twhile(ch>='0'&&ch<='9'){res=(res<<1)+(res<<3)+ch-'0';ch=getchar();}\n \treturn bo*res;\n}\nstruct Eage{\n    int to, nxt;\n}eage[N << 1];//\u94fe\u5f0f\u524d\u5411\u661f \nint head[N], n, m, cnt, p, in[N], out[N], z[N], dis[N];\t\nvoid add(int a, int b){\n    eage[++cnt].to = b;\n    eage[cnt].nxt = head[a];//\u52a0\u8fb9 \n    head[a] = cnt;\n    return;\n}\nvoid dfs(int x, int fa){\n    in[x] = ++p;// \u6c42\u51fa\u5165\u6808\u51fa\u6808\u5e8f \n    dis[x] = dis[fa] + 1; //dis[x]\u6307 x\u8282\u70b9\u5230\u6839\u4e4b\u95f4\u6709\u591a\u5c11\u4e2a\u8282\u70b9 \n    for(int i = head[x]; i; i = eage[i].nxt){\n        if(eage[i].to == fa) continue;\n        dfs(eage[i].to, x); \n    } \n    out[x] = ++p;\n}\nstruct Tree{\n    ll tree[N << 1];//\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u4e00\u6b21\u5165\u6808\u4e00\u6b21\u51fa\u6808\u6240\u4ee5\u8981\u5f00\u53cc\u500d\u7a7a\u95f4 \n    inline void bulid(){\n        for(int i = 1; i <= n; ++i){\n            for(int j = in[i]; j <= n << 1; j += j & -j)//\u5efa\u6811\u5728\u5b83\u5165\u6808\u65f6\u52a0\u4e0a\u5b83\u7684\u6743\u503c \n                tree[j] += z[i];\n            for(int j = out[i]; j <= n << 1; j += j & -j)//\u51fa\u6808\u65f6\u51cf\u53bb\u5b83\u7684\u6743\u503c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u53ea\u6709\u5b83\u7684\u5b50\u6811\u624d\u80fd\u52a0\u4e0a\u5b83\u7684\u6743\u503c \n                tree[j] -= z[i]; \n        }\n    }\n    inline ll ask(int x){\n        ll ans = 0;\n        for(int i = in[x]; i; i -= i & -i)//\u67e5\u8be2\u524d\u7f00\u548c\u5c31\u662f\u5b83\u5230root\u7684\u8ddd\u79bb \n            ans += tree[i];\n        return ans;\n    } \n    inline void change(int x, int k){\n        for(int i = in[x]; i <= n << 1; i += i & -i)\n            tree[i] += k; \n        for(int i = out[x]; i <= n << 1; i += i & -i)\n            tree[i] -= k;\n    }\n}t1, t2; //\u5f00\u4e24\u6811\u72b6\u6570\u7ec4 \nsigned main()\n{\n    n = read(); \n    m = read();\n    for(int i = 1; i <= n; ++i)\n        z[i] = read();\n    for(int i = 1; i < n; ++i){\n        int a = read();\n        int b = read();\n        add(a, b);//\u53cc\u5411\u8fb9 \n        add(b, a);\n    }\n    dfs(1, 0);\n    t1.bulid(); \n    for(int i = 1; i <= m; ++i){\n        int a = read(), x = read();\n        if(a == 1) t1.change(x, read());//\u76f4\u63a5\u52a0\u5728\u50a8\u5b58\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u7684\u6811\u72b6\u6570\u7ec4\u4e0a\n        if(a == 2) {\n            int y = read();\n            t1.change(x, (ll)-y * ((ll)dis[x] - 1));//\u7531\u4e8e\u5b50\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u51cf\u53bb\u7684\u6743\u503c\u90fd\u662f\u4e00\u6837\u7684 \n\t\t\t\t//\u6015\u7206int\n            t2.change(x, (ll)y);//\u6bcf\u4e2a\u8282\u70b9\u52a0\u7684\u6743\u503c\u4e0d\u4e00\u6837\u7684\u52a0\u5728\u7b2c\u4e8c\u4e2a\u6811\u72b6\u6570\u7ec4\u4e0a \n        }\n        if(a == 3){\n            ll ans = 0;\n            ans += t1.ask(x);\n            ans += t2.ask(x) * (ll)dis[x];//\u7531\u4e8e\u5df2\u7ecf\u51cf\u8fc7 y * (dis[x] - 1)\u6240\u4ee5\u67e5\u8be2\u65f6\u76f4\u63a5\u52a0\u4e0a t2.ask(x) * dis[x] \u5373\u53ef \n            printf(\"%lld\\n\", ans);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1550227473,
        "uid": 162451,
        "name": "__wfx",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "~~NOIP\u524d\u4e00\u5929\u8fd8\u6765\u6c34\u9898\u89e3~~\n\n\u7adf\u7136\u6709\u4e00\u6837\u8111\u56de\u8def\u65b0\u5947\u7684\u9898\u89e3\u3002\u3002\u53ea\u662f\u4e0d\u592a\u660e\u767d\u4e3a\u5565\u8981\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4~~Fenwicktree\u543c\u554a~~\n\n\u9996\u5148\u628a\u8fd9\u4e2a\u6811\u7684euler tour\u8dd1\u51fa\u6765\u3002\u9996\u5148\u8003\u8651\u5355\u70b9\u4fee\u6539\uff1a\n\n\u6211\u4eec\u77e5\u9053\u5728\u6b27\u62c9\u5e8f\u4e0a\u4e00\u4e2a\u70b9\u521a\u521a\u88ab\u8bbf\u95ee\u8981\u8bb0\u5f55\u4e00\u6b21\uff0c\u79bb\u5f00\u4f1a\u8bb0\u5f55\u4e00\u6b21\uff0c\u4e8e\u662f\u6211\u4eec\u5728\u521a\u521a\u8bbf\u95ee\u7684\u4f4d\u7f6e+c\uff0c\u79bb\u5f00\u4f4d\u7f6e-c\uff1b\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8def\u5f84\u67e5\u8be2\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u4e00\u4e0b1-\u8fd9\u4e2a\u70b9\u7684\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u8003\u8651\u6811\u72b6\u6570\u7ec4\u3002\u67e5\u8be2\u662f\u8fdb\u5165\u8fd8\u662f\u79bb\u5f00\u7684\u70b9\u5462\uff1f\u5b9e\u9645\u4e0a\u90fd\u4e00\u6837\uff0c\u56e0\u4e3a\u8fdb\u5165\u79bb\u5f00\u4e4b\u95f4\u6240\u6709\u70b9\u5fc5\u5b9a\u662f\u4e24\u4e24\u914d\u5bf9\u7684\uff0c\u6240\u4ee5\u7b97\u51fa\u6765\u80af\u5b9a\u662f0.\n\n\u8003\u8651\u5b50\u6811\u4fee\u6539\u7a0d\u663e\u9ebb\u70e6\uff0c\u5728\u4e00\u4e2a\u70b9\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u8bb0\u5f55+(dep[x]-1)*c\uff08\u8fdb\u5165\u65f6\u52a0\u79bb\u5f00\u65f6\u51cf\uff09\uff0c\n\n\u540c\u65f6\u7528\u4e00\u4e2a\u7b49\u540c\u4e8e\u5355\u70b9\u4fee\u6539\u7684\u8bb0\u5f55\u4e00\u4e0b+c\uff0c\n\n\u5f53\u6211\u4eec\u67e5\u8be2\u65f6\uff0c\u8003\u8651\u6240\u6709\u52a0\u5b50\u6811\u7684\u8d21\u732e\uff0c\u5c31\u662f  \n\uff08u\u67e5\u8be2\u70b9\uff09sum1\u662f+c,sum0\u662f+c*(dep[x-1])\n\n$sum1(in[u])*dep[u] - sum0(in[u])$\n\n\u7136\u540e\u8003\u8651\u5b8c\u6240\u6709\u5355\u70b9\u52a0\u548c\u5b50\u6811\u52a0\u7684\u8d21\u732e\uff0c\u5c31\u4ec5\u4ec5\u9700\u8981\u518d\u8ba1\u7b97\u4e00\u4e0b\u521d\u59cb\u5230\u6839\u7684\u6743\u503c\u548c\u5c31\u597d\u3002\n\n\u4ee3\u7801\u975e\u5e38\u7b80\u6d01QWQ1.6k\u901f\u5ea6\u78be\u538b\u6811\u5256\uff08\u5b9e\u9645\u4e0a\u5728\u6b64\u4e4b\u524d\u4e5f\u5199\u8fc7\u4e00\u4e2a\u6811\u5256\uff09\n\n```cpp\n/*Heroes Never Die!*/\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\ntypedef long long ll;\n#define MAXN 100006\nstruct edge{\n\tll u;edge* next;\n\tedge( ll u = 0 , edge* next = NULL ):u(u),next(next) {}\n\tvoid insert( ll u ) {\n\t\tif( this->next == NULL ) this->next = new edge(u,NULL);\n\t\telse this->next = new edge( u,this->next );\n\t}\n}e[MAXN];\nll in[MAXN],out[MAXN] , n , N , m , sdep[MAXN] , w[MAXN] , dep[MAXN];\nll S[3][MAXN<<1];//0 : \u5355\u70b9\u66f4\u503c \uff0c 1 \u503c*dep 2 \u4e2a\u6570\nvoid add( ll x , ll c , ll p ) { while( x <= N ) S[p][x] += c , x += x&-x; }\nll sum( ll x , ll p ) { ll res = 0; while( x > 0 ) res += S[p][x], x -= x & -x; return res; }\nvoid addpoint( ll x ,ll c ) {\n\tadd( in[x] , c , 0 ) , add( out[x] , -c , 0 );\n}\nvoid add_sub( ll x , ll c ) {\n\tadd( in[x] , c*(dep[x]-1) , 1 ) , add( out[x] , -c*(dep[x]-1) , 1 ),\n\tadd( in[x] , c , 2 ) , add( out[x] , -c , 2 );\n}\nll query( ll x ) {\n\treturn sdep[x] + sum(in[x],0) + dep[x] * sum( in[x],2 ) - sum(in[x],1);\n}\nvoid dfs( ll u , ll fa ) {\n\tin[u] = ++N;\n\tfor( edge* n = e[u].next;n!=NULL;n=n->next ) {\n\t\tll v = n->u;\n\t\tif( v == fa ) continue;\n\t\tsdep[v] = w[v] + sdep[u] , dep[v] = dep[u] + 1;\n\t\tdfs(v , u);\n\t}\n\tout[u] = ++N;\n}\nint main() {\n\tfreopen(\"input\",\"r\",stdin);\n\tfreopen(\"o\",\"w\",stdout);\n\tcin >> n >> m;\n\tfor( ll i = 1  ; i <= n ; ++ i ) scanf(\"%lld\",&w[i]);\n\tfor( ll i = 0 ,u,v ; i < n - 1 ; ++ i )\n\t\tscanf(\"%lld%lld\",&u,&v),e[u].insert(v),e[v].insert(u);\n\tsdep[1] = w[1] , dep[1] = 1;\n\tdfs( 1 , 1 );\n\tfor( ll i = 0,opt,u,v ; i < m ; ++ i ){\n\t\tscanf(\"%lld%lld\",&opt,&u);\n\t\tif( opt == 1 ) scanf(\"%lld\",&v) , addpoint(u,v);\n\t\telse if( opt == 2 ) scanf(\"%lld\",&v) , add_sub(u,v);\n\t\telse printf(\"%lld\\n\",query(u));\n\t}\t\n}\n//qwq\n```\n\n\u8003\u8651\u6811\u5256\u7684\u8bdd\uff0c\u5982\u679c\u4e0d\u6284\u677f\u5b50\u6211\u4eec\u77e5\u9053\u53ea\u9700\u8981\u7edf\u8ba1\u5230\u6839\u3002\u3002\u6240\u4ee5\u67e5\u8be2\u4e00\u4e2awhile\u5c31\u591f\u4e86\uff0c\u5177\u4f53\u770b\u4ee3\u7801\uff1a\n\n```cpp\n/*Heroes Never Die!*/\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\ntypedef long long ll;\nusing namespace std;\n#define MAXN 100006\nstruct edge{\n    ll u;edge* next;\n    edge(ll u=0,edge* next=NULL):u(u),next(next) {}\n    void insert( ll u ) {\n        if(this->next == NULL) this->next = new edge(u,NULL);\n        else this->next = new edge(u,this->next);\n    }\n}e[MAXN];\nll siz[MAXN] , hea[MAXN] , pre[MAXN] , top[MAXN] , tig[MAXN] , bac[MAXN] , dep[MAXN],cnt;\nll w[MAXN] ;\nll n , m;\nvoid dfs(ll u,ll fa) {\n    siz[u] = 1;\n    for( edge* n = e[u].next;n!=NULL;n=n->next ) {\n        ll v = n->u;\n        if(v == fa) continue;\n        dep[v] = dep[u] + 1 , pre[v] = u;\n        dfs(v,u);\n        siz[u] += siz[v];\n        if(!hea[u]||siz[hea[u]] < siz[v]) hea[u] = v;\n    }\n}\nvoid dfs2(ll u,ll to) {\n    tig[u] = ++cnt , bac[cnt] = u , top[u] = to;\n    if( !hea[u] )return;\n    dfs2(hea[u] , to);\n    for( edge* n = e[u].next;n!=NULL;n=n->next ) {\n        ll v = n->u;\n        if( v == pre[u] || v == hea[u] ) continue;\n        dfs2(v,v);\n    }\n}\nll S[MAXN<<2] , lazy[MAXN<<2];\nvoid pushup( ll rt ) {\n    S[rt] = S[rt<<1] + S[rt<<1|1];\n}\nvoid pushdown( ll rt , ll m ) {\n    if( lazy[rt] ) {\n        S[rt<<1] += lazy[rt] * ( m - (m>>1) ), \n        S[rt<<1|1] += lazy[rt] * ( m >> 1 ),\n        lazy[rt<<1] += lazy[rt] , \n        lazy[rt<<1|1] += lazy[rt],\n        lazy[rt] = 0;\n    }\n}\nvoid build( ll rt ,ll l ,ll r ) {\n    if( l == r ) { S[rt] = w[bac[l]] ; return; }\n    ll m = l + r >> 1;\n    build(rt<<1 , l , m);\n    build(rt<<1|1 , m+1 , r);\n    pushup( rt );\n}\nvoid update(ll rt,ll l,ll r,ll L,ll R,ll c){\n    if( L <= l && R >= r ) { S[rt] += c*(r-l+1) , lazy[rt] += c; return; }\n    ll m = l + r >> 1;\n    pushdown(rt , r - l + 1);\n    if( L <= m ) update( rt<<1 , l , m, L ,R, c );\n    if( R >  m ) update( rt<<1|1, m+1 , r , L , R , c );\n    pushup(rt);\n}\nll query( ll rt, ll l,ll r,ll L,ll R ) {\n    if( L <= l && R >= r ) return S[rt];\n    pushdown(rt , r - l + 1);\n    ll m = l + r >> 1, res = 0;\n    if( L <= m ) res += query( rt<<1 , l , m , L , R );\n    if( R >  m ) res += query( rt<<1|1 , m + 1, r , L, R );\n    return res;\n}\nll up( ll u ){\n    ll res = 0;\n    while( u ) {\n        res += query( 1 , 1 , n , tig[top[u]] , tig[u] );\n        u = pre[top[u]];\n    }\n    return res;\n}\nvoid add_point( ll u , ll c ) {\n    update( 1 , 1 , n , tig[u] , tig[u] , c );\n}\nvoid add_sub( ll u , ll c ) {\n    update( 1 , 1 , n , tig[u] , tig[u] + siz[u] - 1 , c );\n}\nint main() {\n   // freopen(\"input\",\"r\",stdin);\n//\tfreopen(\"o\",\"w\",stdout);\n    cin >> n >> m;\n    ll res = 0;\n    for( ll i = 1 ; i <= n ; ++ i ) scanf(\"%lld\",&w[i]),res += w[i];\n    for( ll i = 0,u,v ; i < n-1 ; ++ i ) \n        scanf(\"%lld%lld\",&u,&v) , e[u].insert(v), e[v].insert(u);\n    dfs(1,1) , dfs2(1,1);\n    build(1,1,n);\n    for( ll i = 0,u,v,op ; i < m ; ++ i ) {\n        scanf(\"%lld\",&op);\n        if( op == 1 ) scanf(\"%lld%lld\",&u,&v),add_point(u,v);\n        else if( op == 2 ) scanf(\"%lld%lld\",&u,&v) , add_sub( u , v );\n        else scanf(\"%lld\",&u) , printf(\"%lld\\n\",up(u));\n \t}\n}\n\n\n\n```",
        "postTime": 1541720950,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u7528\u6307\u9488\u7684\u9898\u89e3\u5c31\u6765\u53d1\u4e00\u6ce2\u3002\u3002\u3002\n\n\u8fd9\u4e00\u9898\u4e5f\u662f\u6811\u94fe\u5256\u5206\u7684\u677f\u5b50\u9898\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c1\uff1a\u76f4\u63a5\u5728\u70b9\u7684dfn\u5728\u7ebf\u6bb5\u6811\u7684\u4f4d\u7f6e\u4fee\u6539\u5373\u53ef\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c2\uff1a\u6211\u4eec\u8003\u8651\u5728\u8bb0\u5f55\u6bcf\u4e2a\u4ee5\u8be5\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f\u65f6\uff0c\u7531\u4e8edfn\u7684\u987a\u5e8f\u4e00\u5b9a\u662f\u5b50\u6811\u7684dfn\u5c0f\u4e8e\u6839\u7684\uff0c\u6240\u4ee5\u4fee\u6539\u5b50\u6811\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4fee\u6539\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e2d\u8be5\u70b9\u7684$ dfn $\u4e0e$ dfn + size - 1 $(\u8bfb\u8005\u53ef\u4ee5\u81ea\u5df1\u6a21\u62df\u4e00\u4e0b\uff09\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c3:\u67e5\u8be21\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u5373\u53ef\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```c++\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <climits>\n#include <cstdlib>\n#include <cstdio>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\n#define LL long long  //\u4e00\u5b9a\u8981\u52a0long long\n#define DEBUG(x) std::cerr << #x << '=' << x << std::endl\n\nconst int MAXN = 100000 + 5;\n\nLL N,M;\n\nstruct Data{\n    LL u,v,w;\n}d[MAXN];\n\ninline void Read(LL &x){\n    char ch = getchar();\n    x = 0;int flag = 1;\n    for(;!isdigit(ch);ch = getchar())\n        if(ch == '-') flag = -1;\n    for(;isdigit(ch);ch = getchar())\n        x = (x << 1) + (x << 3) + ch - '0';\n    x *= flag;\n}  //\u5feb\u8bfb\n\nstruct Node{\n    LL dfn,size,depth;\n    bool vis;\n    struct Edge *firstEdge;\n    struct Chain *chain;\n    Node *fa,*maxChild;\n}node[MAXN];\n\nstruct Edge{\n    Node *s,*t;\n    Edge *next;\n}pool1[MAXN * 2],*frog1 = pool1;\n\nEdge *New(Node *u,Node *v){\n    Edge *ret = ++frog1;\n    ret->s = u;ret->t = v;\n    ret->next = u->firstEdge;\n    return ret;\n}\n\ninline void add(LL u,LL v){\n    node[u].firstEdge = New(&node[u],&node[v]);\n    node[v].firstEdge = New(&node[v],&node[u]);\n}\n\nstruct Chain{\n    Node *top;\n}pool2[MAXN],*frog2 = pool2;\n\nChain *New2(Node *top){\n    Chain *ret = ++frog2;\n    ret->top = top;\n    return ret;\n}\n\nvoid dfs1(Node *v){\n    v->vis = true;\n    v->size = 1;\n    for(Edge *e = v->firstEdge;e;e = e->next){\n        if(!e->t->vis){\n            e->t->fa = v;\n            e->t->depth = v->depth + 1;\n            dfs1(e->t);\n            v->size += e->t->size;\n            if(!v->maxChild || e->t->size > v->maxChild->size)\n                v->maxChild = e->t;\n        }\n    }\n}\n\nvoid dfs2(Node *v){\n    static LL ts = 0;\n    v->dfn = ++ts;\n    \n    if(!v->fa || v->fa->maxChild != v)\n        v->chain = New2(v);\n    else v->chain = v->fa->chain;\n    if(v->maxChild) dfs2(v->maxChild);\n    for(Edge *e = v->firstEdge;e;e = e->next){\n        if(e->t->fa == v && e->t != v->maxChild)\n            dfs2(e->t);\n    }\n}\n\ninline void split(){\n    node[1].depth = 1;\n    dfs1(&node[1]);\n    dfs2(&node[1]);\n}  //\u6811\u5256\u7ecf\u5178\u4e24\u6b21dfs\n\nstruct SegmentTree;\nSegmentTree *New3(LL,LL,SegmentTree *,SegmentTree *);\n\nstruct SegmentTree{\n    LL l,r;\n    LL sum,tag;\n    SegmentTree *lc,*rc;\n    \n    static SegmentTree *build(LL l,LL r){\n        LL mid = (l + r) / 2;\n        return (l == r) ? New3(l,r,NULL,NULL) : New3(l,r,build(l,mid),build(mid + 1,r));\n    }\n    \n    void pushup(){\n        sum = lc->sum + rc->sum;\n    }\n    \n    void cover(LL delta){\n        sum += (r - l + 1) * delta;\n        tag += delta;\n    }\n    \n    void pushdown(){\n        if(tag){\n            lc->cover(tag);\n            rc->cover(tag);\n            tag = 0;\n        }\n    }\n    \n    void update(LL pos,LL x){\n        if(l == r){\n            sum = x;\n            tag = 0;\n            return;\n        }\n        pushdown();\n        LL mid = (l + r) / 2;\n        if(pos <= mid) lc->update(pos,x);\n        else rc->update(pos,x);\n        pushup();\n    }\n    \n    void modify(LL left,LL right,LL delta){\n        if(left == l && right == r){\n            cover(delta);\n            return;\n        }\n        pushdown();\n        LL mid = (l + r) >> 1;\n        if(right <= mid) lc->modify(left,right,delta);\n        else if(left > mid) rc->modify(left,right,delta);\n        else{\n            lc->modify(left,mid,delta);\n            rc->modify(mid + 1,right,delta);\n        }\n        pushup();\n    }\n    \n    LL query(LL left,LL right){\n        if(left > r || right < l) return 0;\n        if(left == l && right == r) return sum;\n        pushdown();\n        LL mid = (l + r) >> 1;\n        if(right <= mid) return lc->query(left,right);\n        else if(left > mid) return rc->query(left,right);\n        else{\n            return lc->query(left,mid) + rc->query(mid + 1,right);\n        }\n    }\n}pool3[MAXN * 4],*frog3 = pool3,*segt;\n\nSegmentTree *New3(LL l,LL r,SegmentTree *lc,SegmentTree *rc){\n    SegmentTree *ret = ++frog3;\n    ret->l = l;ret->r = r;\n    ret->lc = lc;ret->rc = rc;\n    ret->sum = ret->tag = 0;\n    return ret;\n}\n\ninline void modify(LL x,LL y,LL delta){\n    Node *u = &node[x],*v = &node[y];\n    while(u->chain != v->chain){\n        if(u->chain->top->depth < v->chain->top->depth) std::swap(u,v);\n        segt->modify(u->chain->top->dfn,u->dfn,delta);\n        u = u->chain->top->fa;\n    }\n    if(u->depth > v->depth) std::swap(u,v);\n    segt->modify(u->dfn,v->dfn,delta);\n}\n\ninline LL query(LL x,LL y){\n    LL ret = 0;\n    Node *u = &node[x],*v = &node[y];\n    while(u->chain != v->chain){\n        if(u->chain->top->depth < v->chain->top->depth) std::swap(u,v);\n        ret += segt->query(u->chain->top->dfn,u->dfn);\n        u = u->chain->top->fa;\n    }\n    if(u->depth > v->depth) std::swap(u,v);\n    return ret + segt->query(u->dfn,v->dfn);\n}\n\nint main(){\n    LL w[MAXN];\n    Read(N);Read(M);\n    segt = SegmentTree::build(1,N);\n    for(LL i = 1;i <= N;i++){\n        Read(w[i]);\n    }\n    for(LL u,v,i = 1;i < N;i++){\n        Read(u);Read(v);\n        add(u,v);\n    }\n    split();\n    for(LL i = 1;i <= N;i++)\n        segt->update(node[i].dfn,w[i]);\n    for(LL opt,x,a,i = 1;i <= M;i++){\n        Read(opt);Read(x);\n        if(opt == 1){\n            Read(a);\n            modify(x,x,a);\n        }\n        if(opt == 2){\n            Read(a);\n            segt->modify(node[x].dfn,node[x].dfn + node[x].size - 1,a);\n        }\n        if(opt == 3)\n            printf(\"%lld\\n\",query(1,x));\n        \n    }\n    return 0;\n}\n\n```",
        "postTime": 1531358940,
        "uid": 50075,
        "name": "RainAir",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u7a0d\u5fae\u7ffb\u4e86\u4e0b\u63d0\u4ea4\u8bb0\u5f55\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u7528\u6811\u72b6\u6570\u7ec4\u5462\uff1f\n\n\u6811\u94fe\u5256\u5206+\u6811\u72b6\u6570\u7ec4\u3002\n\n\u56e0\u4e3a\u8fd9\u9053\u9898\u662f\u53ea\u8981\u533a\u95f4\u6c42\u548c\uff0c\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u4fee\u6539\n\n\u6240\u4ee5\u679c\u65ad\u653e\u5f03\u7ebf\u6bb5\u6811\uff0c\u4e0a\u4e00\u6ce2\u6811\u72b6\u6570\u7ec4\u3002\n\n\u60f3\u77e5\u9053\u539f\u7406\u770b\u8fd9\u4e2a\u535a\u5ba2http://www.cnblogs.com/lcf-2000/p/5866170.html\n\n\u8fd9\u91cc\u662f\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#define re register int\nconst int N=1e5+9;\ntypedef int array[N];\ntypedef long long ll;\nstruct edges{int nx,to;}e[N<<1];\nint n,m,tot,tmp;array a,b,fi,top,size,son,id,real,fa,depth;ll c1[N],c2[N];\nvoid dfs1(re u){\n    depth[u]=depth[fa[u]]+(size[u]=1);\n    for(re i=fi[u],v;i;i=e[i].nx)\n        if((v=e[i].to)!=fa[u]){\n            fa[v]=u;dfs1(v);size[u]+=size[v];\n            if(size[v]>size[son[u]])son[u]=v;\n        }\n}\nvoid dfs2(re u){\n    if(son[fa[u]]==u)top[u]=top[fa[u]];\n    else top[u]=u;\n    real[id[u]=++tmp]=u;\n    if(son[u])dfs2(son[u]);\n    for(re v,i=fi[u];i;i=e[i].nx)\n        if((v=e[i].to)!=fa[u]&&v!=son[u])\n            dfs2(v);\n}\ninline void insert(re x,ll w){for(re i=x;i<=n;i+=i&(-i))c1[i]+=w,c2[i]+=(ll)x*w;}\ninline ll sigma(re x){ll sum=0;for(re i=x;i;i-=i&(-i))sum+=(ll)(x+1)*c1[i]-c2[i];return sum;}\ninline void swap(re&x,re&y){re t=x;x=y;y=t;}\ninline ll sum(re u,re v){\n    ll sum=0;\n    while(top[u]!=top[v]){\n        if(depth[top[u]]<depth[top[v]])swap(u,v);\n        sum+=sigma(id[u])-sigma(id[top[u]]-1);\n        u=fa[top[u]];\n    }\n    if(depth[u]>depth[v])swap(u,v);\n    sum+=sigma(id[v])-sigma(id[u]-1);\n    return sum;\n}\ninline void add(re u,re v){e[++tot]=(edges){fi[u],v};fi[u]=tot;}\nint main(){\nscanf(\"%d%d\",&n,&m);\n    for(re i=1;i<=n;++i)scanf(\"%d\",&a[i]);\n    for(re i=1,u,v;i<n;++i)scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);\n    dfs1(1);dfs2(1);\n    for(re i=1;i<=n;++i)b[i]=a[real[i]];\n    for(re i=1;i<=n;++i)insert(i,b[i]-b[i-1]);\n    re op,x,y;\n    while(m--){\nscanf(\"%d%d\",&op,&x);\n        if(op==1)scanf(\"%d\",&y),insert(id[x],y),insert(id[x]+1,-y);\n        else if(op==2)scanf(\"%d\",&y),insert(id[x],y),insert(id[x]+size[x]-1+1,-y);\n        else printf(\"%lld\\n\",sum(1,x));\n    }\nreturn 0;\n}\n```",
        "postTime": 1497000933,
        "uid": 20156,
        "name": "Kelin",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u5c31\u662f\u4e2a\u6811\u5256\u7684\u6a21\u677f\u9898\u561b\u3002\u3002\u3002\n\n\u4e24\u8fb9dfs\u628a\u6811\u5272\u6210\u94fe, \u7136\u540e\u5728\u94fe\u4e0a\u7ebf\u6bb5\u6811\u7ef4\u62a4\n\n\u505a\u5b8c\u4e86\u3002\u3002\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n\nconst int MaxN = 100010;\n\nstruct edge\n{\n    int next, to;\n};\n\nstruct node\n{\n    int l, r;\n    int sum, tag;\n};\n\nedge e[MaxN << 1];\nint n, m, cnt, dfscnt;\nint a[MaxN], head[MaxN], dfn[MaxN], pre[MaxN];\nint top[MaxN], dep[MaxN], hson[MaxN], fa[MaxN], size[MaxN];\n\nstruct SegmentTree\n{\n    node t[MaxN << 2];\n    inline void pushup(int id) { t[id].sum = t[id << 1].sum + t[id << 1 | 1].sum; }\n    void build(int id, int l, int r)\n    {\n        t[id].l = l, t[id].r = r;\n        if (l == r)\n        {\n            t[id].sum = a[pre[l]];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(id << 1, l, mid);\n        build(id << 1 | 1, mid + 1, r);\n        pushup(id);\n    }\n    inline void pushdown(int id)\n    {\n        if (t[id].tag)\n        {\n            t[id << 1].sum += t[id].tag * (t[id << 1].r - t[id << 1].l + 1);\n            t[id << 1 | 1].sum += t[id].tag * (t[id << 1 | 1].r - t[id << 1 | 1].l + 1);\n\n            t[id << 1].tag += t[id].tag, t[id << 1 | 1].tag += t[id].tag;\n\n            t[id].tag = 0;\n        }\n    }\n    void modify(int id, int l, int r, int delta)\n    {\n        if (l > t[id].r || r < t[id].l)\n            return;\n        if (l <= t[id].l && t[id].r <= r)\n        {\n            t[id].sum += delta * (t[id].r - t[id].l + 1);\n            t[id].tag += delta;\n            return;\n        }\n        if (t[id].l == t[id].r)\n            return;\n        pushdown(id);\n        modify(id << 1, l, r, delta);\n        modify(id << 1 | 1, l, r, delta);\n        pushup(id);\n    }\n    int query(int id, int l, int r)\n    {\n        if (l > t[id].r || r < t[id].l)\n            return 0;\n        if (l <= t[id].l && t[id].r <= r)\n            return t[id].sum;\n        if (t[id].l == t[id].r)\n            return 0;\n        pushdown(id);\n        return query(id << 1, l, r) + query(id << 1 | 1, l, r);\n    }\n} T;\n\ninline void add_edge(int u, int v)\n{\n    ++cnt;\n    e[cnt].to = v;\n    e[cnt].next = head[u];\n    head[u] = cnt;\n}\n\nvoid dfs1(int u, int f)\n{\n    size[u] = 1;\n    for (int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].to;\n        if (v == f)\n            continue;\n        dep[v] = dep[u] + 1, fa[v] = u;\n        dfs1(v, u);\n        size[u] += size[v];\n        if (size[v] > size[hson[u]])\n            hson[u] = v;\n    }\n}\n\nvoid dfs2(int u, int Top)\n{\n    ++dfscnt;\n    dfn[u] = dfscnt;\n    pre[dfscnt] = u;\n    top[u] = Top;\n    if (hson[u])\n        dfs2(hson[u], Top);\n    for (int i = head[u]; i; i = e[i].next)\n    {\n        int v = e[i].to;\n        if (v == fa[u] || v == hson[u])\n            continue;\n        dfs2(v, v);\n    }\n}\n\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while (ch > '9' || ch < '0')\n    {\n        if (ch == '-')\n            f = 0;\n        ch = getchar();\n    }\n    while (ch <= '9' && ch >= '0')\n        x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\n    return f ? x : (-x);\n}\n\ninline int query(int u, int v)\n{\n    int ans = 0;\n    while (top[u] != top[v])\n    {\n        if (dep[u] < dep[v])\n            std::swap(u, v);\n        ans += T.query(1, dfn[top[u]], dfn[u]);\n        u = fa[top[u]];\n    }\n    if (dep[u] < dep[v])\n        std::swap(u, v);\n    ans += T.query(1, dfn[v], dfn[u]);\n    return ans;\n}\n\nsigned main()\n{\n    n = read(), m = read();\n    for (int i = 1; i <= n; i++)\n        a[i] = read();\n    for (int i = 1; i < n; i++)\n    {\n        int u = read(), v = read();\n        add_edge(u, v);\n        add_edge(v, u);\n    }\n    dep[1] = 1, fa[1] = 0;\n    dfs1(1, 0), dfs2(1, 1);\n    T.build(1, 1, n);\n    for (int i = 1; i <= m; i++)\n    {\n        int op = read();\n        if (op == 1)\n        {\n            int u = read(), x = read();\n            T.modify(1, dfn[u], dfn[u], x);\n        }\n        if (op == 2)\n        {\n            int u = read(), x = read();\n            T.modify(1, dfn[u], dfn[u] + size[u] - 1, x);\n        }\n        if (op == 3)\n        {\n            int u = read();\n            printf(\"%lld\\n\", query(u, 1));\n        }\n    }\n    return 0;\n}\n\n```\n\n",
        "postTime": 1550844754,
        "uid": 61966,
        "name": "little_sun",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5178\u578b\u7684\u6811\u94fe\u5256\u5206\u7684\u6a21\u677f\u9898\u76ee\uff0c\u7136\u800c\u6211\u8fd8\u662f\u8017\u4e86\u4e00\u6bb5\u65f6\u95f4\u624d\u505a\u5b8c\u7684\n\n\u64cd\u4f5c1\u5176\u5b9e\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u7136\u540e\u64cd\u4f5c\u4e8c\u5c31\u662f\u5c06\u8fd9\u4e2a\u70b9\u7684\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u7f16\u53f7\u5230\u8fd9\u4e2a\u70b9\u7684\u7f16\u53f7\u52a0\u4e0a\u5b50\u6811\u4e2d\u6240\u542b\u7684\u8282\u70b9\u4e2a\u6570\u51cf\u4e00\uff0c\u5c31\u662fseg[x],seg[x]+size[x]-1;\n\n\u4e4b\u540e\u8f93\u51fa\u5c31\u884c\u4e86\n\n\u4ee3\u7801\u4e0b\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<iomanip>\n#include<ctime>\n#include<cstdlib>\n#include<queue>\n#include<vector>\n#include<map>\n#include<stack>\n#include<cmath>\n#define ll long long\nusing namespace std;\ninline ll read()\n{\n\tll x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c<'0' || c>'9')\n\t{\n\t\tif (c == '-')\n\t\t{\n\t\t\tf = -1;\n\t\t}\n\t\tc = getchar();\n\t}\n\twhile (c >= '0'&&c <= '9')\n\t{\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\nll fa[100001], d[100001], seg[100001], sizea[100001], son[100001], top[100001], res[100001];\nll wt[100001];\nll n, m, t;\nstruct node\n{\n\tll val, lazy;\n}tree[800001];\nvector<ll>a[100001];\ninline void dfs1(ll u)\n{\n\tsizea[u] = 1;\n\tson[u] = 0;\n\td[u] = d[fa[u]] + 1;\n\tfor (unsigned ll i = 0;i < a[u].size();i++)\n\t{\n\t\tif (a[u][i] != fa[u])\n\t\t{\n\t\t\tfa[a[u][i]] = u;\n\t\t\tdfs1(a[u][i]);\n\t\t\tsizea[u] += sizea[a[u][i]];\n\t\t\tif (sizea[a[u][i]] > sizea[son[u]])\n\t\t\t{\n\t\t\t\tson[u] = a[u][i];\n\t\t\t}\n\t\t}\n\t}\n}\nll tot;\ninline void dfs2(ll v, ll topa)\n{\n\ttot++;\n\tseg[v] = tot;\n\tres[tot] = v;\n\ttop[v] = topa;\n\tif (son[v] != 0)\n\t{\n\t\tdfs2(son[v], topa);\n\t}\n\tfor (unsigned ll i = 0;i < a[v].size();i++)\n\t{\n\t\tif (a[v][i] != son[v] && a[v][i] != fa[v])\n\t\t{\n\t\t\tdfs2(a[v][i], a[v][i]);\n\t\t}\n\t}\n}\ninline void build(ll v, ll l, ll r)\n{\n\tif (l == r)\n\t{\n\t\ttree[v].val = wt[res[l]];\n\t\treturn;\n\t}\n\tll mid = (l + r) >> 1;\n\tbuild(v << 1, l, mid);\n\tbuild(v << 1 | 1, mid + 1, r);\n\ttree[v].val = tree[v << 1].val + tree[v << 1 | 1].val;\n}\ninline void pushdown(ll v, ll l, ll r)\n{\n\tif (tree[v].lazy != 0)\n\t{\n\t\tll mid = (l + r) >> 1;\n\t\ttree[v << 1].val += tree[v].lazy*(mid - l + 1);\n\t\ttree[v << 1 | 1].val += tree[v].lazy*(r - mid);\n\t\ttree[v << 1].lazy += tree[v].lazy;\n\t\ttree[v << 1 | 1].lazy += tree[v].lazy;\n\t\ttree[v].lazy = 0;\n\t}\n}\ninline ll query(ll v, ll l, ll r, ll nl, ll nr)\n{\n\tif (nl >= l && nr <= r)\n\t{\n\t\treturn tree[v].val;\n\t}\n\tif (nl > r || nr < l)\n\t{\n\t\treturn 0;\n\t}\n\tll mid = (nl + nr) >> 1;\n\tpushdown(v, nl, nr);\n\treturn query(v << 1, l, r, nl, mid) + query(v << 1 | 1, l, r, mid + 1, nr);\n}\ninline void add(ll v, ll l, ll r, ll nl, ll nr, ll sum)\n{\n\tif (nl >= l && nr <= r)\n\t{\n\t\ttree[v].val += sum * (nr - nl + 1);\n\t\ttree[v].lazy += sum;\n\t\treturn;\n\t}\n\tif (nl > r || nr < l)\n\t{\n\t\treturn;\n\t}\n\tll mid = (nl + nr) >> 1;\n\tpushdown(v, nl, nr);\n\tadd(v << 1, l, r, nl, mid, sum);\n\tadd(v << 1 | 1, l, r, mid + 1, nr, sum);\n\ttree[v].val = tree[v << 1].val + tree[v << 1 | 1].val;\n}\ninline ll tquery(ll x, ll y)\n{\n\tll ans = 0;\n\twhile (top[x] != top[y])\n\t{\n\t\tif (d[top[x]] > d[top[y]])\n\t\t{\n\t\t\tans += query(1, seg[top[x]], seg[x], 1, n);\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans += query(1, seg[top[y]], seg[y], 1, n);\n\t\t\ty = fa[top[y]];\n\t\t}\n\t}\n\tif (seg[x] < seg[y])\n\t{\n\t\tans += query(1, seg[x], seg[y], 1, n);\n\t}\n\telse\n\t{\n\t\tans += query(1, seg[y], seg[x], 1, n);\n\t}\n\treturn ans;\n}\ninline void tadd(ll x, ll y, ll sum)\n{\n\twhile (top[x] != top[y])\n\t{\n\t\tif (d[top[x]] > d[top[y]])\n\t\t{\n\t\t\tadd(1, seg[top[x]], seg[x], 1, n, sum);\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tadd(1, seg[top[y]], seg[y], 1, n, sum);\n\t\t\ty = fa[top[y]];\n\t\t}\n\t}\n\tif (seg[x] < seg[y])\n\t{\n\t\tadd(1, seg[x], seg[y], 1, n, sum);\n\t}\n\telse\n\t{\n\t\tadd(1, seg[y], seg[x], 1, n, sum);\n\t}\n}\nint main()\n{\n\tn = read(), m = read();\n\tfor (ll i = 1;i <= n;i++)\n\t{\n\t\twt[i] = read();\n\t}\n\tfor (ll i = 1;i < n;i++)\n\t{\n\t\tll x = read(), y = read();\n\t\ta[x].push_back(y);\n\t\ta[y].push_back(x);\n\t}\n\tdfs1(1);\n\tdfs2(1, 1);\n\tbuild(1, 1, n);\n\tfor (ll i = 1;i <= m;i++)\n\t{\n\t\tll judge = read();\n\t\tif (judge == 1)\n\t\t{\n\t\t\tll x = read(), z = read();\n\t\t\tadd(1, seg[x], seg[x], 1, n, z);\n\t\t}\n\t\telse if(judge == 2)\n\t\t{\n\t\t\tll x = read(), z = read();\n\t\t\tadd(1, seg[x], seg[x] + sizea[x] - 1, 1, n, z);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tll x = read();\n\t\t\tprintf(\"%lld\\n\", tquery(1, x));\n\t\t}\n\t}\n\treturn 20030711;\n}\n\n```\n\n\u6211\u8fd9\u91cc\u6545\u610f\u7528\u7684\u591a\u70b9\u4fee\u6539\u8fdb\u884c\u5355\u70b9\u4fee\u6539\uff0c\u867d\u8bf4\u65f6\u95f4\u6709\u70b9\u957f\uff0c\u4f46\u662f\u9632\u6284\u88ad\u554a",
        "postTime": 1545487020,
        "uid": 38427,
        "name": "Mr_\u6d53\u6c28",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u9996\u5148\u770b\u5230\u64cd\u4f5c\u4e09\u5c31\u80fd\u60f3\u5230\u6811\u94fe\u5256\u5206\u5427\uff1f\n\n\u518d\u770b\u770b\u9898\u9762\u5c31\u80fd\u60f3\u5230\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5427\uff1f\n\n\u7136\u540e\u5c31\u6ca1\u96be\u5ea6\u4e86\u5427\uff1f\n\n\u8003\u8651\u4e00\u4e0b\u6bcf\u4e2a\u64cd\u4f5c\u7684\u505a\u6cd5\uff1a\n\n\u64cd\u4f5c1\uff1a\u5355\u70b9\u4fee\u6539\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u9762\u4fee\u6539\u5c31\u597d\n\n\u64cd\u4f5c2\uff1a\u628a\u4ee5x\u4e3a\u6839\u7684\u5b50\u6811+a\uff0c\u8fd9\u662f\u552f\u4e00\u6709\u96be\u5ea6\u7684\u4e00\u4e2a\u5730\u65b9\u3002\u90a3\u4e48\u60f3\u4e00\u60f3\u6211\u4eec\u662f\u600e\u4e48\u5256\u5206\u8fd9\u68f5\u6811\u7684\u2014\u2014\u4e24\u6b21dfs\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684\u6811\u662f\u6309dfs\u5e8f\u6765\u6784\u5efa\u7684\uff0c\u518d\u60f3\u60f3dfs\u5e8f\uff0c\u5b83\u6709\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u6027\u8d28\uff1a\n\n**\u4e00\u4e2a\u5b50\u6811\u7684\u7f16\u53f7\u4e00\u5b9a\u662f\u8fde\u7eed\u7684**\n\n\u8bc1\u660e\u53ef\u4ee5\u81ea\u5df1\u53bb\u627e\u627e\u3002\u7f51\u4e0a\u6709\u7684\u3002\n\n\u90a3\u4e48\u5f53\u6211\u4eec\u60f3\u5230\u8fd9\u4e2a\u6027\u8d28\u4e4b\u540e\u64cd\u4f5c2\u5c31\u4e0d\u96be\u4e86\uff0c\u7b2c\u4e00\u6b21dfs\u7684\u65f6\u5019\u6211\u4eec\u5df2\u7ecf\u7ef4\u62a4\u51fa\u6765\u4e00\u4e2asiz\u6570\u7ec4\u8868\u793a\u8be5\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9pos[x],pos[x]+siz[x]-1\u8fd9\u4e2a\u533a\u95f4\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\uff08pos\u6570\u7ec4\u662f\u6811\u4e0a\u7684\u8282\u70b9\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u7f16\u53f7\uff09\n\n\u64cd\u4f5c3\uff1a\u6811\u94fe\u5256\u5206\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u722c\u5230\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7136\u540e\u533a\u95f4\u4fee\u6539\u5c31\u597d\u4e86\n\n[\u7136\u540e\u8bf4\u4e86\u8fd9\u4e48\u591a\u4e00\u5b9a\u662f\u8981\u5b89\u5229\u4e00\u4e0b\u81ea\u5df1\u535a\u5ba2\u7684\u5bf9\u4e0d\u5bf9](https://www.cnblogs.com/henry-1202/p/9129614.html)\n\nCode\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#define ll long long\n#define inf 1<<30\n#define il inline \nil ll max(ll x,ll y){return x>y?x:y;}\nil ll min(ll x,ll y){return x<y?x:y;}\nil ll abs(ll x){return x>0?x:-x;}\nil void swap(ll &x,ll &y){ll t=x;x=y;y=t;}\nil void read(ll &x){\n    x=0;ll f=1;char c=getchar();\n    while(c<'0'||c>'9'){if(c=='-')f=-f;c=getchar();}\n    while(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}\n    x*=f;\n}\nil void print(ll x){if(x<0)putchar('-');x=abs(x);if(x>9)print(x/10);putchar(x%10+'0');}\nil void writeln(ll x){if(x<0)putchar('-');x=abs(x);print(x);putchar('\\n');}\nil void write(ll x){if(x<0)putchar('-');x=abs(x);print(x);putchar(' ');}\nusing namespace std;\n/*===================Header Template=====================*/\n#define N 100010\nstruct tree{ll l,r,sum,tag;}t[N<<2];\nstruct data{ll to,next;}e[N<<1];\nll n,m,root,pos[N],sz;\nll cnt,head[N],v[N],v1[N];\nll fa[N],siz[N],top[N],dep[N];\nvoid insert(ll u,ll v){\n    e[++cnt].to=v;e[cnt].next=head[u];head[u]=cnt;\n    e[++cnt].to=u;e[cnt].next=head[v];head[v]=cnt;\n}\nvoid dfs1(ll x){\n    siz[x]=1;\n    for(ll i=head[x];i;i=e[i].next){\n        if(e[i].to==fa[x])continue;\n        fa[e[i].to]=x;\n        dep[e[i].to]=dep[x]+1;\n        dfs1(e[i].to);\n        siz[x]+=siz[e[i].to];\n    }\n}\nvoid dfs2(ll x,ll topf){\n    top[x]=topf;\n    pos[x]=++sz;\n    v1[sz]=v[x];\n    ll k=0;\n    for(ll i=head[x];i;i=e[i].next){\n        if(dep[e[i].to]>dep[x]&&siz[e[i].to]>siz[k])k=e[i].to;\n    }\n    if(!k)return;\n    dfs2(k,topf);\n    for(ll i=head[x];i;i=e[i].next){\n        if(k!=e[i].to&&dep[e[i].to]>dep[x])dfs2(e[i].to,e[i].to);\n    }\n}\nvoid build(ll l,ll r,ll rt){\n    t[rt].l=l;t[rt].r=r;\n    ll mid=(l+r)>>1;\n    if(l==r){return;}\n    build(l,mid,rt<<1);\n    build(mid+1,r,rt<<1|1);\n    t[rt].sum=t[rt<<1].sum+t[rt<<1|1].sum;\n}\nvoid pushdown(ll ln,ll rn,ll rt){\n    if(t[rt].tag){\n        ll &x=t[rt].tag;\n        t[rt<<1].tag+=x;\n        t[rt<<1|1].tag+=x;\n        t[rt<<1].sum+=x*ln;\n        t[rt<<1|1].sum+=x*rn;\n        x=0;\n    }\n}\nvoid upd1(ll L,ll c,ll rt){\n    ll l=t[rt].l,r=t[rt].r,mid=(l+r)>>1;\n    if(l==r){t[rt].sum+=c;return;}\n    pushdown(mid-l+1,r-mid,rt);\n    if(L<=mid)upd1(L,c,rt<<1);\n    else upd1(L,c,rt<<1|1);\n    t[rt].sum=t[rt<<1].sum+t[rt<<1|1].sum;\n}\nvoid upd2(ll L,ll R,ll c,ll rt){\n    ll l=t[rt].l,r=t[rt].r,mid=(l+r)>>1;\n    if(L<=l&&r<=R){t[rt].sum+=(r-l+1)*c;t[rt].tag+=c;return;}\n    pushdown(mid-l+1,r-mid,rt);\n    if(L<=mid)upd2(L,R,c,rt<<1);\n    if(R>mid)upd2(L,R,c,rt<<1|1);\n    t[rt].sum=t[rt<<1].sum+t[rt<<1|1].sum;\n}\nll query(ll L,ll R,ll rt){\n    ll l=t[rt].l,r=t[rt].r,mid=(l+r)>>1,ans=0;\n    if(L<=l&&r<=R)return t[rt].sum;\n    pushdown(mid-l+1,r-mid,rt);\n    if(L<=mid)ans+=query(L,R,rt<<1);\n    if(R>mid)ans+=query(L,R,rt<<1|1);\n    return ans; \n}\nll solve_query(ll x,ll y){\n    ll sum=0;\n    while(top[x]!=top[y]){\n        if(dep[top[x]]<dep[top[y]])swap(x,y);\n        sum+=query(pos[top[x]],pos[x],1);\n        x=fa[top[x]];\n    }\n    if(pos[x]>pos[y])swap(x,y);\n    sum+=query(pos[x],pos[y],1);\n    return sum;\n}\nint main(){\n    read(n);read(m);\n    for(ll i=1;i<=n;i++)read(v[i]);\n    for(ll i=1;i<n;i++){\n        ll x,y;\n        read(x);read(y);\n        insert(x,y);\n    }\n    dfs1(1);dfs2(1,1);\n    build(1,n,1);\n    for(ll i=1;i<=n;i++)upd1(pos[i],v[i],1);\n    while(m--){\n        ll pd,x,y;\n        read(pd);read(x);\n        if(pd==1){\n            read(y);\n            upd1(pos[x],y,1);\n        }else if(pd==2){\n            read(y);\n            upd2(pos[x],pos[x]+siz[x]-1,y,1);\n        }else if(pd==3){\n            writeln(solve_query(x,1));\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1528015165,
        "uid": 36526,
        "name": "henry_y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\n\u535a\u5ba2\u94fe\u63a5[http://blog.csdn.net/waduan2/article/details/77657761](http://blog.csdn.net/waduan2/article/details/77657761)\n\n\n\n>\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u5b50\u6811\u4fee\u6539\u548c\u533a\u95f4\u6c42\u548c\n\n\u6811\u4e0a\u533a\u95f4\u548c\uff0c\u6811\u5256\u4e00\u4e0b\u5957\u4e2a\u7ebf\u6bb5\u6811\u5c31\u53ef\u4ee5\u4e86...\n\n\n#####\u6ce8\u610f\u7b54\u6848\u7206int\n\n\u4ee3\u7801\u5982\u4e0b:\n\n```cpp\n#include<cstdio>\n#define N 100500\n#define int long long\nusing namespace std;\nint n,x,T,top,m,k,y,z;\nint fir[N],dep[N],Top[N],tree[N],pre[N],son[N],size[N],fa[N],w[N];\nstruct Edge{\n    int to,nex;\n    Edge(){}\n    Edge(int _to,int _nex):to(_to),nex(_nex){}\n}nex[N*2];\nstruct Seg{\n    int l,r,sum,lazy;\n}a[N*8];\ninline void swap(int&a,int&b){int c=a;a=b;b=c;}\ninline void add(int x,int y){\n    nex[++top]=Edge(y,fir[x]);\n    fir[x]=top;\n}\nvoid dfs1(int x,int Dep,int Fa){\n    fa[x]=Fa;dep[x]=Dep;\n    size[x]=1;\n    for(int i=fir[x];i;i=nex[i].nex){\n        if(nex[i].to==Fa) continue;\n        dfs1(nex[i].to,Dep+1,x);\n        size[x]=size[x]+size[nex[i].to];\n        if(size[nex[i].to]>size[son[x]]) son[x]=nex[i].to;\n    }\n}\nvoid dfs2(int x,int topp){\n    Top[x]=topp;\n    tree[x]=++T;\n    pre[T]=x;\n    if(!son[x]) return;\n    dfs2(son[x],topp);\n    for(int i=fir[x];i;i=nex[i].nex){\n        if(nex[i].to==fa[x] || nex[i].to==son[x]) continue;\n        dfs2(nex[i].to,nex[i].to);\n    }\n}\nvoid Pushdown(int x){\n    a[2*x].lazy+=a[x].lazy;\n    a[2*x+1].lazy+=a[x].lazy;\n    a[2*x].sum=a[2*x].sum+(a[2*x].r-a[2*x].l+1)*a[x].lazy;\n    a[2*x+1].sum=a[2*x+1].sum+(a[2*x+1].r-a[2*x+1].l+1)*a[x].lazy;\n    a[x].lazy=0;\n}\nvoid maketree(int l,int r,int k){\n    a[k].l=l;a[k].r=r;a[k].lazy=0;\n    if(l==r){\n        a[k].sum=w[pre[l]];\n        return;\n    }\n    int mid=(l+r)>>1;\n    maketree(l,mid,2*k);maketree(mid+1,r,2*k+1);\n    a[k].sum=a[k*2].sum+a[k*2+1].sum;\n}\nint Query_Sum(int x,int y,int k){\n    if(x==a[k].l && y==a[k].r){\n        return a[k].sum;\n    }\n    Pushdown(k);\n    int mid=(a[k].l+a[k].r)>>1;\n    if(y<=mid){return Query_Sum(x,y,2*k);}\n    if(x>mid){return Query_Sum(x,y,2*k+1);}\n    return Query_Sum(x,mid,2*k)+Query_Sum(mid+1,y,2*k+1);\n}\nint Find_Sum(int x,int y){\n    int sum=0;\n    while(Top[x]!=Top[y]){\n        if(dep[Top[x]]<dep[Top[y]]) swap(x,y);\n        sum=sum+Query_Sum(tree[Top[x]],tree[x],1);\n        x=fa[Top[x]];\n    }\n    if(tree[y]>tree[x]) swap(x,y);\n    sum=sum+Query_Sum(tree[y],tree[x],1);\n    return sum;\n}\nvoid Add(int x,int y,int val,int k){\n    if(x>y) swap(x,y);\n    if(a[k].r<x || a[k].l>y) return;\n    if(x<=a[k].l && y>=a[k].r){\n        a[k].lazy+=val;\n        a[k].sum+=val*(a[k].r-a[k].l+1);\n        return;\n    }\n    Pushdown(k);\n    Add(x,y,val,2*k);\n    Add(x,y,val,2*k+1);\n    a[k].sum=a[2*k].sum+a[2*k+1].sum;\n}\nmain(){\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++) scanf(\"%lld\",w+i);\n    for(int i=2;i<=n;i++){\n        scanf(\"%lld%lld\",&x,&y);\n        add(x,y);add(y,x);\n    }\n    dfs1(1,1,0);dfs2(1,1);\n    maketree(1,n,1);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d\",&k);\n        switch(k){\n            case 1: scanf(\"%lld%lld\",&x,&y);Add(tree[x],tree[x],y,1);break;\n            case 2: scanf(\"%lld%lld\",&x,&y);Add(tree[x],tree[x]+size[x]-1,y,1);break;\n            case 3: scanf(\"%lld\",&x);printf(\"%lld\\n\",Find_Sum(x,1));break;\n        }\n    }\nreturn 0;\n}\n\n```",
        "postTime": 1504097513,
        "uid": 21682,
        "name": "Duan2baka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u6811\u94fe\u5256\u5206+\u7ebf\u6bb5\u6811\u6a21\u677f\u9898\u3002\n\n\u7136\u800c\u533a\u95f4\u4fee\u6539\u4f9d\u65e7\u7ec6\u8282\u91cd\u91cd\uff0c\n\n\u4e00\u4e2a+=\u5751\u4e86\u6211\u597d\u4e45\u3002\n\n\u8bbe\u539f\u6570\u7ec4\u7b2ci\u4f4d\u7684\u503c\u4e3aa\\_i\uff0cd\\_i=a\\_i-a\\_{i-1}\uff0c\u5219\u6709(\u8fd9\u91cc\u8ba4\u4e3aa\\_0=0)\uff1a\n\na\\_x=\\sum\\_{i=1}^x d\\_i\n\n\u6240\u4ee5\u6709\uff1a\n\n\\sum\\_{i=1}^x a\\_i= \\sum\\_{i=1}^x \\sum\\_{j=1}^i d\\_j =\\sum\\_{i=1}^x(x-i+1)d\\_i\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\uff1a\n\n\\sum\\_{i=1}^x a\\_i=(x+1)\\sum\\_{i=1}^x d\\_i-\\sum\\_{i=1}^x d\\_i \\times i\n\n\u4e8e\u662f\u6211\u4eec\u628a\u539f\u6570\u7ec4\u5dee\u5206\u540e\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4d\\_i\uff0c\u4e00\u4e2a\u7ef4\u62a4d\\_i \\times i\u3002\n\n\u8fd9\u6837\u533a\u95f4\u6c42\u548c\u65f6\u53ef\u4ee5\u5728\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u4e2d\u67e5\u8be2\u5f97\u5230\u524d\u7f00\u548c\uff0c\u533a\u95f4\u4fee\u6539\u65f6\u5c31\u662f\u5dee\u5206\u6570\u7ec4\u7684\u4fee\u6539\uff0c\u6bcf\u6b21\u4fee\u6539\u4e24\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u591a\u7801\u4e00\u7801\u5427\u3002\n\n\u6ce8\u610f\u8981\u5f00long long\n\n```cpp\n  1 #include <stdio.h>\n  2 #include <algorithm>\n  3 #define N 100001\n  4 #define lson l , mid , x << 1\n  5 #define rson mid + 1 , r , x << 1 | 1\n  6 using namespace std;\n  7 int fa[N] , deep[N] , bl[N] , si[N] , pos[N] , tot , endp[N] , n , val[N];\n  8 int head[N] , to[N << 1] , next[N << 1] , cnt;\n  9 long long sum[N << 3] , mark[N << 3];\n 10 void add(int x , int y)\n 11 {\n 12     to[++cnt] = y;\n 13     next[cnt] = head[x];\n 14     head[x] = cnt;\n 15 }\n 16 void dfs1(int x)\n 17 {\n 18     int y , i;\n 19     si[x] = 1;\n 20     for(i = head[x] ; i ; i = next[i])\n 21     {\n 22         y = to[i];\n 23         if(y != fa[x])\n 24         {\n 25             fa[y] = x;\n 26             deep[y] = deep[x] + 1;\n 27             dfs1(y);\n 28             si[x] += si[y];\n 29         }\n 30     }\n 31 }\n 32 void dfs2(int x , int c)\n 33 {\n 34     int y , i , k = 0;\n 35     pos[x] = ++tot;\n 36     bl[x] = c;\n 37     endp[x] = pos[x];\n 38     for(i = head[x] ; i ; i = next[i])\n 39     {\n 40         y = to[i];\n 41         if(y != fa[x] && si[y] > si[k])\n 42             k = y;\n 43     }\n 44     if(k)\n 45     {\n 46         dfs2(k , c);\n 47         endp[x] = max(endp[x] , endp[k]);\n 48         for(i = head[x] ; i ; i = next[i])\n 49         {\n 50             y = to[i];\n 51             if(y != fa[x] && y != k)\n 52             {\n 53                 dfs2(y , y);\n 54                 endp[x] = max(endp[x] , endp[y]);\n 55             }\n 56         }\n 57     }\n 58 }\n 59 void pushup(int x)\n 60 {\n 61     sum[x] = sum[x << 1] + sum[x << 1 | 1];\n 62 }\n 63 void pushdown(int x , int l , int r)\n 64 {\n 65     if(mark[x])\n 66     {\n 67         int mid = (l + r) >> 1;\n 68         mark[x << 1] += mark[x];\n 69         mark[x << 1 | 1] += mark[x];\n 70         sum[x << 1] += (long long)mark[x] * (mid - l + 1);\n 71         sum[x << 1 | 1] += (long long)mark[x] * (r - mid);\n 72         mark[x] = 0;\n 73     }\n 74 }\n 75 void update(int b , int e , int a , int l , int r , int x)\n 76 {\n 77     pushdown(x , l , r);\n 78     if(b <= l && r <= e)\n 79     {\n 80         sum[x] += (long long)a * (r - l + 1);\n 81         mark[x] = a;\n 82         return;\n 83     }\n 84     int mid = (l + r) >> 1;\n 85     if(b <= mid)\n 86         update(b , e , a , lson);\n 87     if(e > mid)\n 88         update(b , e , a , rson);\n 89     pushup(x);\n 90 }\n 91 long long query(int b , int e , int l , int r , int x)\n 92 {\n 93     pushdown(x , l , r);\n 94     if(b <= l && r <= e)\n 95         return sum[x];\n 96     int mid = (l + r) >> 1;\n 97     long long ans = 0;\n 98     if(b <= mid)\n 99         ans += query(b , e , lson);\n100     if(e > mid)\n101         ans += query(b , e , rson);\n102     return ans;\n103 }\n104 long long solvequery(int x)\n105 {\n106     long long ans = 0;\n107     while(bl[x] != 1)\n108     {\n109         ans += query(pos[bl[x]] , pos[x] , 1 , n , 1);\n110         x = fa[bl[x]];\n111     }\n112     ans += query(1 , pos[x] , 1 , n , 1);\n113     return ans;\n114 }\n115 int main()\n116 {\n117     int m , i , x , y , opt;\n118     scanf(\"%d%d\" , &n , &m);\n119     for(i = 1 ; i <= n ; i ++ )\n120         scanf(\"%lld\" , &val[i]);\n121     for(i = 1 ; i < n ; i ++ )\n122     {\n123         scanf(\"%d%d\" , &x , &y);\n124         add(x , y);\n125         add(y , x);\n126     }\n127     dfs1(1);\n128     dfs2(1 , 1);\n129     for(i = 1 ; i <= n ; i ++ )\n130         update(pos[i] , pos[i] , val[i] , 1 , n , 1);\n131     while(m -- )\n132     {\n133         scanf(\"%d\" , &opt);\n134         switch(opt)\n135         {\n136             case 1: scanf(\"%d%d\" , &x , &y); update(pos[x] , pos[x] , y , 1 , n , 1); break;\n137             case 2: scanf(\"%d%d\" , &x , &y); update(pos[x] , endp[x] , y , 1 , n , 1); break;\n138             default: scanf(\"%d\" , &x); printf(\"%lld\\n\" , solvequery(x));\n139         }\n140     }\n141     return 0;\n142 }\n```",
        "postTime": 1502846297,
        "uid": 41490,
        "name": "qscqesze_lca",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u663e\u7136\u4e00\u6ce2\u6811\u94fe\u5256\u5206\u3002\n\n\u5173\u4e8e\u4ee5XXX\u4e3a\u6839\u7684\u5b50\u6811\uff0c\u8bb0\u5f55\u65f6\u95f4\u6233\uff0c\u6539\u8d77\u6765\u6bd4\u94fe\u723d\u591a\u4e86\uff08\u76f4\u63a5\u6539\uff09\n\n\u8fd8\u6709\uff0c\u6ce8\u610f\u6570\u7ec4\u8303\u56f4\uff08MLE\u4e00\u6b21\uff09\uff0c\u8fd8\u6709long long\uff08WA\u4e00\u6b21\uff09\uff0c\u8fd8\u8981\u6ce8\u610f\u67d0\u4e9b\u7ec6\u8282\u548c\u8fb9\u6743\u7684\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <vector>\n#include <map>\n#include <stack>\n#include <queue>\n#include <set>\n#include <cmath>\n#include <algorithm>\n#include <ctime>\n#define ll long long\nusing namespace std ;\nconst ll maxn = 500000 ;\ninline void Read ( ll &x ) {\n    char c = getchar() ; bool f = 0 ; x = 0 ;\n    while ( !isdigit(c) ) {\n        if ( c == '-' ) f = 1 ;\n        c = getchar() ;\n    }\n    while ( isdigit(c) ) {\n        x = 10 * x + c - '0' ;\n        c = getchar() ;\n    } if (f) x = -x ;\n}\nll n, m, size[maxn], son[maxn], fa[maxn], w[maxn], val[maxn], top[maxn], dep[maxn], zhf[maxn] ;\nll e, be[maxn], nxt[maxn<<1], to[maxn<<1], tree[maxn<<2], lzy[maxn<<2], cnt, in[maxn], out[maxn] ;\n\nvoid init() {\n    memset ( son, -1, sizeof(son) ) ;\n}\n\nvoid add ( ll x, ll y ) {\n    to[++e] = y ;\n    nxt[e] = be[x] ;\n    be[x] = e ;\n}\n\nll dfs1 ( ll x, ll father, ll deep ) {\n    size[x] = 1 ;\n    fa[x] = father ;\n    dep[x] = deep ;\n    ll i, u ;\n    for ( i = be[x] ; i ; i = nxt[i] ) {\n        u = to[i] ;\n        if ( u == father ) continue ;\n        size[x] += dfs1 ( u, x, deep+1 ) ;\n        if ( son[x] == -1 || size[u] > size[son[x]] ) son[x] = u ;\n    }\n    return size[x] ;\n}\n\nvoid dfs2 ( ll x, ll Top ) {\n    w[x] = ++cnt ;\n    zhf[cnt] = val[x] ;\n    top[x] = Top ;\n    in[x] = cnt ;\n    ll i, u ;\n    if ( son[x] != -1 ) dfs2 ( son[x], Top ) ;\n    else goto End ;\n    for ( i = be[x] ; i ; i = nxt[i] ) {\n        u = to[i] ;\n        if ( u == fa[x] || u == son[x] ) continue ;\n        dfs2 ( u, u ) ;\n    }\n    End : \n    out[x] = cnt ;\n}\n\nvoid push_up ( ll h ) { tree[h] = tree[h<<1]+tree[h<<1|1] ; }\nvoid push_down ( ll h, ll len ) {\n    if ( lzy[h] ) {\n        lzy[h<<1] += lzy[h] ;\n        lzy[h<<1|1] += lzy[h] ;\n        tree[h<<1] += lzy[h] * ( len-(len>>1) ) ;\n        tree[h<<1|1] += lzy[h] * (len>>1) ;\n        lzy[h] = 0 ;\n    }\n}\n\nvoid create_tree ( ll h, ll l, ll r ) {\n    if ( l == r ) {\n        tree[h] = zhf[l] ;\n        return ; \n    }\n    ll mid = l+r >> 1 ;\n    create_tree ( h<<1, l, mid ) ;\n    create_tree ( h<<1|1, mid+1, r ) ;\n    push_up(h) ;\n}\n\nvoid update ( ll h, ll l, ll r, ll x, ll y, ll k ) {\n    if ( x <= l && r <= y ) {\n        tree[h] += (r-l+1) * k ;\n        lzy[h] += k ;\n        return ; \n    }\n    push_down ( h, r-l+1 ) ;\n    ll mid = l+r >> 1 ;\n    if ( y <= mid ) update ( h<<1, l, mid, x, y, k ) ;\n    else if ( x > mid ) update ( h<<1|1, mid+1, r, x, y, k ) ;\n    else {\n        update ( h<<1, l, mid, x, mid, k ) ;\n        update ( h<<1|1, mid+1, r, mid+1, y, k ) ;\n    } push_up(h) ;\n}\n\nll query ( ll h, ll l, ll r, ll x, ll y ) {\n    if ( x <= l && r <= y ) return tree[h] ;\n    push_down ( h, r-l+1 ) ;\n    ll mid = l+r >> 1 ;\n    if ( y <= mid ) return query ( h<<1, l, mid, x, y ) ;\n    else if ( x > mid ) return query ( h<<1|1, mid+1, r, x, y ) ;\n    else return \n        query ( h<<1, l, mid, x, mid ) +\n        query ( h<<1|1, mid+1, r, mid+1, y ) ;\n}\n\nll Query ( ll u, ll v ) {\n    ll rec = 0 ;\n    while ( top[u] != top[v] ) {\n        if ( dep[top[u]] > dep[top[v]] ) swap ( u, v ) ;\n        rec += query ( 1, 1, n, w[top[v]], w[v] ) ;\n        v = fa[top[v]] ;\n    }\n    if ( dep[u] > dep[v] ) swap ( u, v ) ;\n    rec += query ( 1, 1, n, w[u], w[v] ) ;\n    return rec ;\n}\n\nvoid UPDATE ( ll x, ll value ) { update ( 1, 1, n, in[x], out[x], value ) ; }\n\nvoid Update ( ll u, ll v, ll value ) {\n    while ( top[u] != top[v] ) {\n        if ( dep[top[u]] > dep[top[v]] ) swap ( u, v ) ;\n        update ( 1, 1, n, w[top[v]], w[v], value ) ;\n        v = fa[top[v]] ;\n    }\n    if ( dep[u] > dep[v] ) swap ( u, v ) ;\n    update ( 1, 1, n, w[u], w[v], value ) ;\n}\n\nint main() {\n    ll i, j, k, u, v, op ;\n    Read(n) ; Read(m) ;\n    init() ;\n    for ( i = 1 ; i <= n ; i ++ ) \n        Read(val[i]) ;\n    for ( i = 1 ; i < n ; i ++ ) {\n        Read(u) ; Read(v) ;\n        add ( u, v ) ;\n        add ( v, u ) ;\n    }\n    dfs1 ( 1, 1, 1 ) ;\n    dfs2 ( 1, 1 ) ;\n    create_tree ( 1, 1, n ) ;\n    while (m--) {\n        Read(op) ;\n        if ( op == 1 ) {\n            Read(u) ; Read(v) ;\n            Update ( u, u, v ) ; \n        } else if ( op == 2 ) {\n            Read(u) ; Read(v) ;\n            UPDATE ( u, v ) ;\n        } else {\n            Read(u) ;\n            printf ( \"%lld\\n\", Query ( 1, u ) ) ;\n        }\n    }\n    return 0 ;\n}\n```",
        "postTime": 1484990290,
        "uid": 17941,
        "name": "Vasily",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    },
    {
        "content": "\u660e\u663e\u5957\u8def\u9898\uff0c\u5f3a\u884c\u6811\u5256\u4e00\u6ce2\uff0c\u9898\u76ee\u7684\u64cd\u4f5c\u90fd\u662f\u6811\u5256\u652f\u6301\u7684\u57fa\u672c\u64cd\u4f5c\n\n```cpp\n#include <bits/stdc++.h>\n#define mid ((l+r)>>1)\nusing namespace std;\nint n,m,N,NN,p,q,ca,x,y;\n```\nint size[100001],fa[100001],fir[100001],nex[200001],to[200001],\n```cpp\n    pos[100001],top[100001],a[100001],end[100001];\nlong long sum,tr[400001],flag[400001];\nvoid Add(int p,int q)\n{\n    to[++NN]=q;nex[NN]=fir[p];fir[p]=NN;\n}\nint build(int now,int fat)\n{\n    size[now]=1;fa[now]=fat;\n    for(int i=fir[now];i;i=nex[i])\n        if(to[i]!=fat) size[now]+=build(to[i],now);\n    return size[now];\n}\nvoid pou(int now,int To)\n{\n    pos[now]=++N;top[now]=To;int Max=0,ans=0;\n    for(int i=fir[now];i;i=nex[i])\n        if(to[i]!=fa[now] && size[to[i]]>Max)\n            Max=size[to[i]],ans=to[i];\n    if(ans)\n        pou(ans,To);\n    for(int i=fir[now];i;i=nex[i])\n            if(to[i]!=fa[now] && to[i]!=ans) pou(to[i],to[i]);\n    end[now]=N;\n}\nvoid push(int now,int l,int r)\n{\n    if(flag[now])\n        tr[now*2]+=flag[now]*(mid-l+1),\n        tr[now*2+1]+=flag[now]*(r-mid),\n        flag[now*2]+=flag[now],flag[now*2+1]+=flag[now],flag[now]=0;\n}\nvoid add(int now,int l,int r,int x,int y,int z)\n{\n    if(l==x && r==y)\n    {\n        tr[now]+=(long long)(r-l+1)*z;flag[now]+=z;\n        return;\n    } \n    push(now,l,r);\n    if(x<=mid) add(now*2,l,mid,x,min(y,mid),z);\n    if(y>mid) add(now*2+1,mid+1,r,max(x,mid+1),y,z);\n    tr[now]=tr[now*2]+tr[now*2+1];\n}\nlong long que(int now,int l,int r,int x,int y)\n{\n    if(l==x && r==y)\n        return tr[now];\n    push(now,l,r);\n    long long ans=0;\n    if(x<=mid) ans+=que(now*2,l,mid,x,min(y,mid));\n    if(y>mid) ans+=que(now*2+1,mid+1,r,max(x,mid+1),y);\n    return ans;\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    for(int i=1;i<n;i++)\n        scanf(\"%d%d\",&p,&q),Add(p,q),Add(q,p);\n    build(1,0);pou(1,1);\n    for(int i=1;i<=n;i++)\n        add(1,1,N,pos[i],pos[i],a[i]);\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%d%d\",&ca,&x);\n        if(ca<3) scanf(\"%d\",&y);\n        if(ca==1) add(1,1,N,pos[x],pos[x],y);\n        if(ca==2) add(1,1,N,pos[x],end[x],y);\n        if(ca==3)\n        {\n            for(sum=0;x;x=fa[top[x]])\n                sum+=que(1,1,N,pos[top[x]],pos[x]);\n            printf(\"%lld\\n\",sum);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1478938107,
        "uid": 885,
        "name": "wanglichao1121",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3178 \u3010[HAOI2015]\u6811\u4e0a\u64cd\u4f5c\u3011"
    }
]