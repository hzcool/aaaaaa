[
    {
        "content": "[QAQ](https://www.luogu.org/problem/show?pid=1875)\n\n\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\n\ncost[i]\u8868\u793a\u83b7\u5f97i\u836f\u6c34\u6240\u9700\u8981\u7684\u6700\u5c0f\u4ee3\u4ef7\uff0cf[i]\u8868\u793ai\u836f\u6c34\u662f\u5426\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u5c0f\u82b1\u8d39\uff0cans[i]\u8868\u793ai\u836f\u6c34\u5728\u5f53\u524d\u6700\u5c0f\u82b1\u8d39\u7684\u65b9\u6848\u6570\uff0cf[i][j]\u8868\u793ai\u836f\u6c34\u4e0ej\u836f\u6c34\u80fd\u591f\u5408\u6210\u7684\u836f\u6c34\n\n\u7c7b\u4f3c\u4e8e\u8fea\u6770\u65af\u7279\u62c9\uff0c\u6bcf\u6b21\u627e\u4e00\u4e2a\u503c\u6700\u5c0f\u4f46\u5374\u6ca1\u6709\u786e\u5b9a\u6700\u5c0f\u503c\u7684\u836f\u6c34\uff0c\u5c06\u5176\u6807\u8bb0\u4e3a\u6700\u5c0f\u503c\uff0c\u7136\u540e\u679a\u4e3e\u80fd\u4e0e\u6b64\u836f\u6c34\u5408\u6210\u836f\u6c34\u7684\u836f\u6c34\uff0c\u7528\u627e\u5230\u7684\u836f\u6c34\u4e0e\u914d\u5bf9\u7684\u836f\u6c34\u66f4\u65b0\u5408\u6210\u836f\u6c34\u7684\u6700\u5c0f\u503c\n\n\u81f3\u4e8e\u65b9\u6848\u6570\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\n\n1\uff1a\u4e24\u4e2a\u539f\u6599\u836f\u6c34\u5408\u6210\u7684\u836f\u6c34\u7684\u539f\u672c\u6700\u5c0f\u82b1\u8d39\u7b49\u4e8e\u539f\u6599\u836f\u6c34\u7684\u603b\u82b1\u8d39\uff0c\u90a3\u4e48\u5408\u6210\u836f\u6c34\u7684\u65b9\u6848\u6570\u5c31\u9700\u8981\u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e24\u4e2a\u539f\u6599\u836f\u6c34\u65b9\u6848\u7684\u4e58\u79ef\n\n2\uff1a\u4e24\u4e2a\u539f\u6599\u836f\u6c34\u5408\u6210\u7684\u836f\u6c34\u7684\u539f\u672c\u6700\u5c0f\u82b1\u8d39\u7b49\u4e8e\u539f\u6599\u836f\u6c34\u7684\u603b\u82b1\u8d39\uff0c\u90a3\u4e48\u5408\u6210\u836f\u6c34\u7684\u65b9\u6848\u6570\u5c31\u7b49\u4e8e\u4e24\u4e2a\u539f\u6599\u836f\u6c34\u65b9\u6848\u7684\u4e58\u79ef\n\n\u7136\u540e\u8f93\u51fa\u5c31\u884c\u4e86\uff01\n\n\u987a\u4fbf\u5410\u69fd\u4e00\u4e0b\uff0c\u9898\u76ee\u4e0a\u6ca1\u6709\u6570\u636e\u8303\u56f4\uff0c\u5bb3\u6211RE\u4e86\u4e00\u6b21\uff01\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nint cost[9999],ans[9999];\nint soc[3000][3000];\nbool f[3000];\nint main()\n{\n    int n;\n    \n    scanf(\"%d\",&n);\n    \n    for(int i=1;i<=n;i++)\n     scanf(\"%d\",&cost[i]),ans[i]=1;\n    int a,b,c; \n    while(scanf(\"%d%d%d\",&a,&b,&c)!=EOF) \n     soc[a+1][b+1]=soc[b+1][a+1]=c+1;\n    \n    for(int i=1;i<n;i++)\n     {\n         int maxn=0x7fffffff;\n         for(int j=1;j<=n;j++)\n          if(!f[j]&&cost[j]<maxn) \n          b=j,maxn=cost[j];\n        \n        f[b]=1;\n        \n        for(int j=1;j<=n;j++)\n        if(f[j]&&soc[b][j])\n         {\n             if(cost[b]+cost[j]==cost[soc[b][j]])\n              ans[soc[b][j]]+=ans[b]*ans[j];\n            if(cost[b]+cost[j]<cost[soc[b][j]]) \n             cost[soc[b][j]]=cost[b]+cost[j],ans[soc[b][j]]=ans[b]*ans[j];\n         }\n     }\n     \n     printf(\"%d %d\",cost[1],ans[1]);\n     \n     return 0;\n}\n```",
        "postTime": 1501903789,
        "uid": 19842,
        "name": "\u534a\u4ed9\u80e1\u5c0f\u6843",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1875 \u3010\u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u672c\u6765\u60f3\u6c42\u51fa\u62d3\u6251\u5e8f\u5217\u7136\u540e\u52a8\u5f52\u7684\uff0c\u7136\u800c\u5b83\uff01\u5b58\uff01\u5728\uff01\u73af\uff01\n\n\u5c31\u7528dijkstra\u6765\u505a\u3002\n\n\u4e0d\u8fc7\u5b83\u5728\u66f4\u65b0\u6700\u77ed\u8def\u7684\u65f6\u5019\u6709\u4e9b\u4e0d\u540c\uff0c\u666e\u901a\u7684dijkstra\u662f\u5728\u6ca1\u6709\u786e\u5b9a\u6700\u77ed\u8def\u7684\u8282\u70b9\u627e\u51fa\u65b0\u7684\u8def\u66f4\u65b0\uff0c\n\n\u8fd9\u91cc\u8981\u5728\u5df2\u7ecf\u6c42\u51fa\u6700\u5c0f\u836f\u4ef7\u7684\u836f\u6c34\u4e2d\u67e5\u627e\u3002\n\n\u4e0d\u7136\u5728\u914d\u836f\u6c34\u65b9\u6cd5\u7684\u6570\u91cf\u4e0a\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u672a\u6c42\u51fa\u6700\u5c0f\u836f\u4ef7\u7684\u836f\u6c34\u7684\u914d\u65b9\u6570\u91cf\u4ee5\u540e\u53ef\u80fd\u4f1a\u66f4\u65b0\u3002\n\n\uff08\u4e5f\u4e0d\u77e5\u81ea\u5df1\u7684\u8868\u8ff0\u662f\u5426\u51c6\u786e\u3002\u3002\u3002\uff09\n",
        "postTime": 1471659422,
        "uid": 14990,
        "name": "\u949b\u6218\u673a",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1875 \u3010\u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34\u3011"
    },
    {
        "content": "\u5927\u81f4\u601d\u8def\u5176\u4ed6\u9898\u89e3\u90fd\u8bb2\u5f97\u633a\u6e05\u695a\u4e86\uff0c\u4f46\u4ed6\u4eec\u7684djikstra\u90fd\u597d\u91ce\u86ee...\n\n\u5c0f\u6839\u5806\u4f18\u5316+\u94fe\u5f0f\u524d\u5411\u661f\u7167\u8bf4\u5e94\u8be5\u662f\u6bcf\u4e2adjikstra\u7684\u6807\u914d \u554a...\u5f00\u4e86\u8fd9\u4fe9\u4f18\u5316\uff0c\u5438\u4e2a\u6c2750ms\uff0c\u4f18\u8d8a\u611f\u6cb9\u7136\u800c\u751f~~\u597d\u50cf\u4e5f\u6ca1\u6bd4\u5176\u4ed6\u5f00O2\u7684\u5feb\u4e86\u591a\u5c11~~\u3002~~\u54fc\uff0c\u90a3\u662f\u6211\u4e0d\u4f1a\u5361\u5e38~~\n\n\u672c\u9898\u89e3\u5c31\u6765\u7740\u91cd\u8bb2\u4e00\u4e0b**\u8fd9\u9053\u9898**\u7684**\u5c0f\u6839\u5806\u4f18\u5316**\u4e0e**\u94fe\u5f0f\u524d\u5411\u661f**\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e9b\u95ee\u9898\u3002\n\nemmmmm\u8fd8\u6709\u8fd9\u9898\u4ee4\u4eba\u70e6\u8e81\u7684\u8bfb\u5165\u65b9\u5f0f\n\n\u4e0d\u4f1a\u5199\u6807\u9898\u884c\uff0c\u9898\u89e3\u5c31\u4f4e\u7aef\u4e86\u5f88\u591a\n\n------------\n\nPart.0 \u8fd9\u9053\u9898\u4e0edjikstra\u6a21\u677f\u6709\u4f55\u4e0d\u540c\uff1a\n\ndjikstra\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7279\u5f81\u662f**\u6bcf\u5f53\u6211\u8981\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u66f4\u65b0\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\u65f6\uff0c\u8fd9\u4e2a\u70b9\u5fc5\u987b\u5df2\u7ecf\u786e\u5b9a\u4e86\u6700\u77ed\u8def\u5f84\u7684\u503c\uff0c\u4e0d\u4f1a\u518d\u6539\u4e86\uff0c\u5373vis[i]=1\uff0c\u800c\u5f53\u524d\u961f\u5217\u4e2d\u5df2\u77e5\u8ddd\u79bb\u8d77\u70b9\u6700\u8fd1\u7684\u70b9\u4e00\u5b9a\u662f\u5df2\u7ecf\u786e\u5b9a\u4e86\u6700\u77ed\u8def\u5f84\u7684\u70b9\uff0c\u56e0\u4e3a\u5df2\u7ecf\u4e0d\u53ef\u80fd\u6709\u67d0\u79cd\u518d\u62d0\u4e00\u4e0b\u7684\u65b9\u6cd5\u4f7f\u8be5\u8ddd\u79bb\u66f4\u8fd1\u4e86\u3002**\uff08\u8fd9\u73a9\u610f\u5728\u6211\u521a\u5b66djikstra\u7684\u65f6\u5019\u56f0\u6270\u4e86\u6211\u597d\u4e45~~\u5176\u5b9e\u4e5f\u5c31\u662f\u6628\u5929~~\uff09\u3002\n\n\u4f46\u5bf9\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u8d70\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u4ece**\u4e24\u4e2a**\u8d77\u70b9\u51fa\u53d1\uff0c\u800c\u975e\u4e00\u4e2a\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0cdjikstra\u8981\u6c42\u6211\u4eec\u5fc5\u987b\u4ece\u5df2\u786e\u5b9a\u6700\u77ed\u8def\u5f84\u7684\u70b9\u51fa\u53d1\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e24\u4e2a\u8d77\u70b9\u8be5\u600e\u4e48\u529e\u5462\uff1f~~\u5f88\u7b80\u5355~~\uff0c\u53ea\u8981\u7b49\u4e24\u4e2a\u8d77\u70b9\u90fd\u662f\u5df2\u77e5\u6700\u77ed\u8def\u5f84\u4e0d\u5c31\u884c\u4e86\n\n\u5728\u66f4\u65b0\u4e4b\u524d\uff0c\u6211\u4eec\u5224\u65ad\u4e00\u4e0b\u53e6\u4e00\u4e2a\u9700\u8981\u7684\u836f\u6c34\u662f\u5426\u5df2\u77e5\u6700\u4f4e\u6d88\u8d39\u5373\u53ef\u3002\u4e0d\u7528\u62c5\u5fc3\u8fd9\u6837\u4f1a\u4e0d\u4f1a\u6f0f\u6389\u914d\u65b9\uff0c\u53cd\u6b63\u6211\u4eec\u7684\u524d\u5411\u661f\u662f\u5b58\u4e86\u4e24\u904d\u7684\u3002\n```cpp\nfor(int i=head[u]; i; i=edg[i].nxt){\n\tint x=edg[i].u2,v=edg[i].v;\n\tif(ptn[x].v){\n\t\tif(ptn[v].cst>c+ptn[x].cst){\n\t\t\tptn[v].ans=ptn[u].ans*ptn[x].ans;\n\t\t\tptn[v].cst=c+ptn[x].cst;\n\t\t\tq.push(make_pair(ptn[v].cst,v));\n\t\t}\n\t\telse if(ptn[v].cst==c+ptn[x].cst){\n\t\t\tptn[v].ans+=ptn[u].ans*ptn[x].ans;\n\t\t}\n\t}\n}\n```\n\n\n------------\n\nPart.2 \u94fe\u5f0f\u524d\u5411\u661f\uff1a\n\n\u8fd9\u5e94\u8be5\u662f\u79cd\u5341\u5206\u666e\u53ca\u7684\u65b9\u6cd5\u4e86\u3002\u76f8\u6bd4\u76f4\u63a5\u7528\u77e9\u9635\u5b58\u56fe\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f46\u5feb\uff0c\u5360\u5185\u5b58\u8fd8\u5c0f\uff0c\u7406\u89e3\u96be\u5ea6\u3001\u7801\u91cf\u4e5f\u4e0d\u5927\u3002\u8bb2\u771f\uff0c\u8fd9\u9053\u9898\u662f\u6570\u636e\u5c11\u3002\u8981\u6570\u636e\u518d\u5927\u70b9\uff0c\u77e9\u9635\u76f4\u63a5MLE\uff0c\u524d\u5411\u661f\u5012\u8fd8\u80fd\u6491\u5f88\u4e45\n\n\u53ea\u4e0d\u8fc7\u8fd9\u9898\u6211\u4eec\u5728\u5b58\u8fb9\u7684\u65f6\u5019\u8fd8\u5f97\u5b58\u4e00\u4e0b\u5b83\u6240\u9700\u7684\u53e6\u4e00\u79cd\u836f\n\n\u4e5f\u5c31\u662f\u8fd9\u6837:\n\n```cpp\nvoid add_edg(int u1,int u2,int v){\n\tedg[++tot_edg].u2=u2;\n\tedg[tot_edg].v=v;\n\tedg[tot_edg].nxt=head[u1];\n\thead[u1]=tot_edg;\n}\n```\n\n------------\n\n\n\u5341\u5206\uff0c\u5c31\u5bf9\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u540c\u5fd7\u4eec\u770b\u8fd9\u91cc\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\n\u4f46\u8fd9\u9053\u9898\u4e2d\uff0c\u6709\u4e00\u4e2a\u9898\u9762\u4e2d\u672a\u63d0\u5230\u7684\u5751\u70b9\uff0c\u4e24\u74f6\u76f8\u540c\u7684\u836f\u662f\u53ef\u4ee5\u6df7\u6210\u4e00\u74f6\u65b0\u836f\u7684\uff0c\u5373A+A=C\u3002\n\n\u6240\u4ee5\uff0c\u5728\u524d\u5411\u661f\u5b58\u56fe\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5bf9\u4ee3\u7801\u4f5c\u4e00\u4e0b\u6539\u52a8\uff1a\n```cpp\n\t\tadd_edg(u1,u2,v);\n\t\tif(u1==u2)continue;\n\t\tadd_edg(u2,u1,v);\n```\n\u4ee5\u9632\u6b62\u91cd\u590d\u5b58\u8def\u3002\n\n------------\n\n\u6b64\u5916\uff0c\u6709\u5173\u8be5\u9898\u7684\u8bfb\u5165\u65b9\u5f0f\uff1a\n\n```cpp\n\twhile(scanf(\"%d%d%d\",&A,&B,&C)!=EOF){\n```\n\u8fd9\u6837\u65e2\u53ef\u5728\u63d0\u4ea4\u65f6\u901a\u8fc7\u3002\u4f46\u5728\u81ea\u5df1\u8f93\u5165\u65f6\uff0c\u5b8c\u6210\u540e\u9700\u8981\u518d\u8f93\u5165 \u2018\u56de\u8f66\u2019 \u7136\u540e\u662f \u2018ctrl+z\u2019\u65e2\u53ef\u5b8c\u6210\u8f93\u5165\u3002\n\n\u5e0c\u671b\u8003\u8bd5\u7684\u65f6\u5019\u522b\u8003\u8fd9\u79cd\u5947\u602a\u7684\u8f93\u5165\u65b9\u5f0f\u3002\n\n------------\n\n\u9644\u5b8c\u6574\u4ee3\u7801\uff08\u611f\u89c9\u610f\u4e49\u4e0d\u5927\uff09\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<vector>\nusing namespace std;\nstruct Eg{\n\tint u2,v,nxt; \n}edg[1000001];\nint head[1001],tot_edg;\nvoid add_edg(int u1,int u2,int v){\n\tedg[++tot_edg].u2=u2;\n\tedg[tot_edg].v=v;\n\tedg[tot_edg].nxt=head[u1];\n\thead[u1]=tot_edg;\n}\n\nstruct P{\n\tint cst,ans;\n\tbool v;\n}ptn[1001];\n\ntypedef pair<int,int>pr;\npriority_queue<pr,vector<pr>,greater<pr> >q;\n\nint main(){\n\tint n;\n\tcin>>n;\n\tfor(int i=0; i<n; i++){\n\t\tcin>>ptn[i].cst;\n\t\tptn[i].ans=1;\n\t\tq.push(make_pair(ptn[i].cst,i));\n\t}\n\t\n\tint u1,u2,v;\n\twhile(scanf(\"%d%d%d\",&u1,&u2,&v)!=EOF){\n\t\tadd_edg(u1,u2,v);\n\t\tif(u1==u2)continue;\n\t\tadd_edg(u2,u1,v);\n\t}\n\twhile(!q.empty()){\n\t\tint c=q.top().first,u=q.top().second;\n\t\tq.pop();\n\t\tif(c!=ptn[u].cst)continue;\n\t\tptn[u].v=1;\n\t\tfor(int i=head[u]; i; i=edg[i].nxt){\n\t\t\tint x=edg[i].u2,v=edg[i].v;\n\t\t\tif(ptn[x].v){\n\t\t\t\tif(ptn[v].cst>c+ptn[x].cst){\n\t\t\t\t\tptn[v].ans=ptn[u].ans*ptn[x].ans;\n\t\t\t\t\tptn[v].cst=c+ptn[x].cst;\n\t\t\t\t\tq.push(make_pair(ptn[v].cst,v));\n\t\t\t\t}\n\t\t\t\telse if(ptn[v].cst==c+ptn[x].cst){\n\t\t\t\t\tptn[v].ans+=ptn[u].ans*ptn[x].ans;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ptn[0].cst<<\" \"<<ptn[0].ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1570238866,
        "uid": 249736,
        "name": "Seg_Tree",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1875 \u3010\u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34\u3011"
    },
    {
        "content": "\u6b63\u89e3\uff1a\u7c7b\u4f3c\u6700\u77ed\u8def\u7684\u601d\u60f3\n\n\u5c06x+y==z\u770b\u6210\u4e00\u6761\u8fb9\n\n\u6bcf\u6b21\u4ece\u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a\u5df2\u7ecf\u88ab\u66f4\u65b0\u8fc7\u7684\u82b1\u8d39\u6700\u5c0f\u7684\u70b9x,\n\n\u7528x\u53bb\u66f4\u65b0\u80fd\u66f4\u65b0\u7684\u70b9\n\n\u76f4\u5230\u4fdd\u7559\u6700\u4f18\u89e3\n\n \n\n\u5b98\u65b9\u9898\u89e3\uff1a\n\n\u505a\u6cd5\uff1a\u6211\u4eec\u53ef\u4ee5\u7528Dijkstra\u7684\u601d\u60f3\uff0c\u7528\u5df2\u77e5\u6765\u66f4\u65b0\u672a\u77e5\u3002\n\n\u6211\u4eec\u7528\u4e00\u4e2av\u6570\u7ec4\u6765\u6807\u8bb0\u4e00\u79cd\u836f\u6c34\u7684\u6700\u5c0f\u82b1\u8d39\u662f\u5426\u786e\u5b9a\uff0c\u5982\u679cv[i]\u4e3a\u771f\uff0c\u5219\u8868\u793ai\u53f7\u836f\u6c34\u7684\u6700\u5c0f\u82b1\u8d39\u5df2\u7ecf\u786e\u5b9a\uff0c\u5426\u5219\u53cd\u4e4b\u3002\n\n\u540c\u65f6\uff0c\u7528cost[i]\u548cans[i]\u8bb0\u5f55\u5f53\u524d\u6c42\u51fa\u7684i\u53f7\u836f\u6c34\u7684\u6700\u5c0f\u82b1\u8d39\u548c\u6ee1\u8db3\u6700\u5c0f\u82b1\u8d39\u7684\u65b9\u6848\u4e2a\u6570\uff0c\n\nf[i][j]\u8bb0\u5f55\u4e00\u4e2ai\u53f7\u836f\u6c34\u548c\u4e00\u4e2aj\u53f7\u836f\u6c34\u80fd\u591f\u5408\u6210\u7684\u836f\u6c34\u7f16\u53f7\uff08\u662f\u4e0d\u662f\u5f88\u50cf\u90bb\u63a5\u77e9\u9635\uff1f\uff09\uff0c\n\ncost[i]\u521d\u59cb\u5316\u4e3a\u836f\u6c34\u5728\u5546\u5e97\u4e2d\u7684\u4ef7\u683c\uff0cans[i]\u521d\u59cb\u5316\u4e3a1\u3002\n\n\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2av[k]\u4e3a\u5047\u5e76\u4e14cost[k]\u6700\u5c0f\u7684k\uff0c\n\n\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2ak\u53f7\u836f\u6c34\u518d\u6ca1\u6709\u5176\u4ed6\u65b9\u6848\u4f7f\u5f97\u5b83\u7684\u6700\u5c0f\u82b1\u8d39\u66f4\u5c0f\u4e86\uff0c\u7136\u540e\u5bfb\u627e\u4e0e\u5b83\u76f8\u5173\u8054\u7684\u914d\u65b9\uff0c\u5982\u679ck\u53f7\u836f\u6c34\u53ef\u4ee5\u8ddf\u53e6\u4e00\u4e2a\u6700\u5c0f\u82b1\u8d39\u5df2\u7ecf\u786e\u5b9a\u7684j\u53f7\u836f\u6c34\u5408\u6210\u4e00\u79cd\u836f\u6c34\uff0c\n\n\u5219\u66f4\u65b0cost[f[j][k]]\u548cans[f[j][k]]\uff1a\u5982\u679ccost[j]+cost[k]<cost[f[j][k]]\uff0c\n\n\u5219\u5c06cost[f[j][k]]\u66f4\u65b0\u4e3acost[j]+cost[k]\uff0c\u5e76\u5c06ans[i]\u66f4\u65b0\u4e3a1\uff1b\n\n\u5982\u679ccost[j]+cost[k]=cost[f[j][k]]\uff0c\u5219\u5c06ans[f[j][k]]\u52a0\u4e0aans[j]*ans[k]\u3002\n\n\u66f4\u65b0\u5b8c\u6240\u6709\u548ck\u53f7\u836f\u6c34\u6709\u5173\u7684\u914d\u65b9\u4e4b\u540e\uff0c\u5c06v[k]\u8d4b\u503c\u4e3a\u771f\uff0c\n\n\u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u76f4\u5230\u6240\u6709\u836f\u6c34\u90fd\u66f4\u65b0\u8fc7\u4e3a\u6b62\u3002\n\n\u6700\u540e\u8f93\u51facost[0]\u548cans[0]\u5373\u53ef\u3002\n\n[hello](https://www.cnblogs.com/adelalove/p/9134982.html)",
        "postTime": 1528111141,
        "uid": 83546,
        "name": "\u4f9d\u4f9d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1875 \u3010\u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u6211\u4eec\u53ef\u4ee5\u4ece DP \u7684\u89d2\u5ea6\u6765\u8003\u8651\u8fd9\u9053\u9898\u3002\n\n\u8bbe $f[c]$ \u4ee3\u8868\u836f\u54c1 $C$ \u9700\u8981\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a$f[c]=\\min(w[c],f[a]+f[b])$\uff0c\u7b80\u5355\u5206\u6790\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u72b6\u6001\u4e0e\u72b6\u6001\u4e4b\u95f4\u53ef\u80fd\u4f1a\u5b58\u5728\u73af\u5f62\u7684\u4f9d\u8d56\u5173\u7cfb\uff08\u5373\u4e0d\u662f\u4e00\u5f20 DAG\uff0c\u6ca1\u6709\u76f4\u63a5\u7684\u62d3\u6251\u5e8f\u6765\u4f9b\u6211\u4eec\u8f6c\u79fb\uff09\u3002\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5728\u201c\u56fe\u72b6\u201d\u7684 DP \u65f6\uff0c\u9047\u5230\u73af\u5f62\u4f9d\u8d56\uff0c\u6709\u4e24\u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a\n- \u5229\u7528 Dijkstra \u7684\u8d2a\u5fc3\u601d\u60f3\uff0c\u5373\u72b6\u6001\u4e4b\u95f4\u8f6c\u79fb\u65f6\uff0c\u4ee3\u4ef7\u90fd\u662f\u6b63\u7684\uff0c\u6240\u4ee5\u80fd\u628a\u76ee\u524d\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u4ee3\u4ef7\u7684\u72b6\u6001\u786e\u5b9a\u4e3a\u4e00\u4e2a\u6700\u4f18\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cDijkstra \u662f\u5728\u201c\u6709\u5355\u8c03\u6027\u7684\u56fe\u4e0a\u201d\uff0c\u5229\u7528\u5355\u8c03\u6027\u53ef\u4ee5\u786e\u5b9a\u51fa\u4e00\u4e2a\u62d3\u6251\u5e8f\uff0c\u6309\u7167\u8fd9\u4e2a\u5e8f\u5217\u8fdb\u884c\u8f6c\u79fb\u5c31\u80fd\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002\n- \u501f\u52a9 SPFA \u7b97\u6cd5\u8fdb\u884c\u52a8\u6001\u89c4\u5212\uff0c\u5373\u5728\u8fd9\u5f20\u56fe\u4e0a\u591a\u6b21\u8fed\u4ee3\uff0c\u6700\u540e\u628a\u7b54\u6848\u6536\u655b\u51fa\u6765\u3002\n\n\u672c\u9898\u4e24\u79cd\u65b9\u6cd5\u90fd\u80fd\u505a\uff0c\u4f46\u5927\u90e8\u5206\u9898\u89e3\u90fd\u7528\u7684\u662f Dijkstra\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 SPFA \u6765\u8fdb\u884c\u8fed\u4ee3\u6c42\u89e3\u3002\n\n\u5148\u89e3\u51b3\u6700\u5c0f\u503c\u600e\u4e48\u6c42\uff1a\n\n\u6211\u4eec\u5c06\u836f\u6c34\u62bd\u8c61\u4e3a\u70b9\uff0c\u5c06\u201c$1$ \u4efd $A$ \u836f\u6c34\u6df7\u5408 $1$ \u4efd $B$ \u836f\u6c34\u5c31\u53ef\u4ee5\u5f97\u5230 $1$ \u4efd $C$ \u836f\u6c34\u201d\u62bd\u8c61\u4e3a\u201c$C$ \u6709\u4e00\u7ec4\u8fb9\u80fd\u8fbe\u5230\u5b83\u7684\u8fb9\uff0c\u5206\u522b\u4e3a $A$ \u5230 $C$ \u548c $B$ \u5230 $C$\u201d\uff0c\u7136\u540e\u679a\u4e3e\u66f4\u65b0\u65f6\u6309\u7167\u7ec4\u7684\u5355\u4f4d\u6765\u66f4\u65b0\u3002\n\n\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e2a\u57fa\u7840\u72b6\u6001\uff0c\u5373\u82b1\u8d39\u4e3a $w[i]$ \u7684\u72b6\u6001\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u77e5\u9053\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u66f4\u65b0\u6700\u597d\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u6240\u6709\u70b9\u90fd\u5165\u961f\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u679a\u4e3e\u80fd\u5230\u8fbe\u5b83\u7684\u8fb9\uff08\u4ee5\u7ec4\u4e3a\u5355\u4f4d\uff09\uff0c\u8ba1\u7b97\u5f53\u524d\u70b9 $u$ \u662f\u5426\u80fd\u88ab\u66f4\u65b0\uff0c\u5982\u679c\u70b9 $u$ \u80fd\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u836f\u6c34 $u$ \u7684\u6700\u5c0f\u82b1\u8d39\u53d8\u5c0f\u4e86\uff0c\u6240\u4ee5**\u6240\u6709\u4ee5\u836f\u6c34 $u$ \u4e3a\u539f\u6599\u7684\u836f\u6c34\u7684\u82b1\u8d39**\u90fd\u53ef\u80fd\u53d8\u5c0f\uff0c\u6240\u4ee5\u90fd\u8981\u5165\u961f\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u5f97\u5230 $0$ \u53f7\u836f\u6c34\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u6211\u4eec\u518d\u6765\u8003\u8651\u600e\u4e48\u6837\u8ba1\u7b97\u6700\u77ed\u8def\u5f84\u7684\u6761\u6570\uff1a\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u6709\u7591\u95ee\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5728\u8ba1\u7b97\u6700\u77ed\u8def\u7684\u540c\u65f6\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u6761\u6570\u5462\uff1f\u56e0\u4e3a\u90a3\u79cd\u8bb0\u5f55\u6700\u77ed\u8def\u7684\u6761\u6570\u7684\u601d\u60f3\u4e5f\u662f\u57fa\u4e8e DP \u7684\u601d\u60f3\uff0c\u53ea\u6709\u5728\u62d3\u6251\u5e8f\u4e0b\u8f6c\u79fb\u624d\u80fd\u88ab\u6b63\u786e\u7684\u6c42\u51fa\u6765\uff0c\u7136\u800c SPFA \u4e0d\u662f\u6309\u7167\u62d3\u6251\u5e8f\u8fdb\u884c\u8f6c\u79fb\u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\uff0c\u56e0\u4e3a\u6574\u4e2a\u6700\u77ed\u8def\u5f84\u7684 DAG \u56fe\u5df2\u7ecf\u88ab\u6784\u9020\u51fa\u6765\u4e86\uff0c\u9012\u5f52\u56de\u53bb\u8ba1\u7b97\u5c31\u884c\u3002\n\n\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 1010, M = 1000001;\nint n, cnt = 0;\nint f[N], head[N], w[N], tot[N];\nbool vis[N];\n\nstruct Edge {\n    int a, b, next;\n};\nEdge e[M];\nvector<int> belongs[N];\n\nvoid add(int a, int b, int v) {\n    e[++cnt] = {a, b, head[v]};\n    head[v] = cnt;\n}\n\nvoid spfa() {\n    queue<int> q;\n    // \u5c06\u6bcf\u4e2a\u70b9\u5165\u961f\n    for (int i = 0; i <= n - 1; i++) {\n        q.push(i);\n        f[i] = w[i];\n        vis[i] = 1;\n    }\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        vis[u] = 0;\n        for (int i = head[u]; i != -1; i = e[i].next) {\n            // \u679a\u4e3e\u6bcf\u7ec4\u8fb9\n            int a = e[i].a, b = e[i].b;\n            if (f[u] > f[a] + f[b]) {\n                f[u] = f[a] + f[b];\n                // \u5982\u679c\u836f\u6c34u\u7684\u82b1\u8d39\u80fd\u591f\u964d\u4f4e\uff0c\u90a3\u4e48\u7531\u836f\u6c34u\u5408\u6210\u51fa\u6765\u7684\u836f\u6c34\u7684\u82b1\u8d39\u90fd\u6709\u53ef\u80fd\u964d\u4f4e\n                // \u6240\u4ee5\u8981\u628a\u8fd9\u4e9b\u70b9\u90fd\u653e\u56de\u961f\u5217\u91cc\n                for (auto v: belongs[u])\n                    if (vis[v] == 0)\n                        vis[v] = 1, q.push(v);\n            }\n        }\n    }\n}\n\nint dfs(int u) {\n    if (tot[u] != 0) return tot[u];\n    if (f[u] == w[u]) tot[u]++;\n    for (int i = head[u]; i != -1; i = e[i].next) {\n        int a = e[i].a, b = e[i].b;\n        if (f[u] == f[a] + f[b]) {\n            tot[a] = dfs(a);\n            tot[b] = dfs(b);\n            tot[u] += tot[a] * tot[b];\n        }\n    }\n    return tot[u];\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cout.tie(0);\n    cin.tie(0);\n    cin >> n;\n\n    for (int i = 0; i < n; i++) cin >> w[i], head[i] = -1;\n    int a, b, c;\n    while (cin >> a >> b >> c) {\n        add(a, b, c);\n        if (a == b) continue;\n        // \u8fd9\u91cc\u8bb0\u5f55a\u548cb\u5206\u522b\u80fd\u5408\u6210\u54ea\u4e9b\u836f\u6c34\uff0c\u7b49\u4f1a\u513f\u72b6\u6001\u66f4\u65b0\u65f6\u4f1a\u7528\u5230\n        belongs[a].push_back(c);\n        belongs[b].push_back(c);\n    }\n    spfa();\n    dfs(0);\n    cout << f[0] << \" \" << tot[0] << endl;\n    return 0;\n}\n```\n\n## \u603b\u7ed3\n\n+ \u4ee5 DP \u7684\u601d\u60f3\u6765\u601d\u8003\u56fe\u8bba\u95ee\u9898\u5176\u5b9e\u5f88\u5e38\u89c1\uff0c\u6bd4\u5982\u5206\u5c42\u56fe\u95ee\u9898\u4ece DP \u89d2\u5ea6\u770b\u5c31\u662f\uff0c\u662f\u4e8c\u7ef4 DP \u95ee\u9898\uff08\u4e00\u7ef4\u4e3a\u70b9\uff0c\u4e8c\u7ef4\u4e3a\u9644\u52a0\u72b6\u6001\uff0c\u6bd4\u5982\u7528\u4e86\u51e0\u6b21\u514d\u8d39\uff09\uff0c\u5982\u679c\u8fd9\u9053\u9898\u4f60\u4f1a\u4e86\uff0c\u90a3\u4e48[\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P4042)\u4f60\u4e5f\u4e00\u5b9a\u4f1a\u505a\u5566\uff0c\u5feb\u53bb\u8bd5\u8bd5\u5427\uff01\n",
        "postTime": 1683641484,
        "uid": 60925,
        "name": "KKKZOZ",
        "ccfLevel": 4,
        "title": "LG P1875 \u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34 \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u5176\u5b9e\u662f\u4e00\u9053\u6bd4\u8f83\u88f8\u7684dijkstra\uff0c\u5c31\u662f\u6ce8\u610f\u4e00\u4e0b \u5f53\u4e24\u79cd\u6750\u6599\u5408\u6210\u4e00\u79cd\u4e1c\u897f\u65f6\uff0c\u5176\u4e2d\u4e00\u4e2a\u5fc5\u987b\u5df2\u7ecf\u88ab\u66f4\u65b0\u5230\u6700\u4f18\u65b9\u6848\u624d\u80fd\u66f4\u65b0\u5408\u6210\u7684\u4e1c\u897f\uff0c\u53e6\u5916\u6570\u91cf\u5f88\u5c11\uff0c\u90bb\u63a5\u77e9\u9635\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4e5f\u4e0d\u56de\u7206\u7a7a\u95f4\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nint n;\nint dist[1001];\nint f[1001][1001];\nbool vis[1001];\nint cnt[1001];\nvoid dijkstra()\n{\n    for(int i=1;i<=n;i++)\n    {\n        int u,t=2100000000;\n        for(int j=1;j<=n;j++)\n        {\n            if(!vis[j]&&dist[j]<t)\n            {\n                u=j;\n                t=dist[j];\n            }\n        }\n        if(t==2100000000)break;\n        vis[u]=true;\n        for(int j=1;j<=n;j++)\n        {\n            if(!f[u][j])continue;\n            if(!vis[j])continue;\n            if(dist[f[u][j]]>t+dist[j])\n            {\n                dist[f[u][j]]=t+dist[j];\n                cnt[f[u][j]]=cnt[u]*cnt[j];\n            }\n            else if(dist[f[u][j]]==t+dist[j])\n            cnt[f[u][j]]+=cnt[u]*cnt[j];\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    scanf(\"%d\",&dist[i]),cnt[i]=1;\n    int u,v,t;\n    while(scanf(\"%d%d%d\",&u,&v,&t)!=EOF)\n    {\n        f[u+1][v+1]=t+1;\n        f[v+1][u+1]=t+1;\n    }\n    dijkstra();\n    printf(\"%d %d\",dist[1],cnt[1]);\n    return 0;\n}\n```",
        "postTime": 1478009568,
        "uid": 25799,
        "name": "Alexerny",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1875 \u3010\u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34\u3011"
    },
    {
        "content": "\u611f\u89c9\u8fd9\u9898\u597d\u795e\u554a,\u8bb0\u5f55i j\u7684\u7236\u8282\u70b9\u4e3aa[i][j]\uff0c\u7136\u540edijkstra\uff1a\u5148\u9009\u51fa\u4e00\u4e2a\u6700\u4fbf\u5b9c\u7684\uff0c\u5c06\u5b83\u6807\u8bb0\u4e3a\u786e\u5b9a\u4e86\u6700\u5c0f\u4ef7\u503c\u7684\u70b9\uff0c\u518d\u6839\u636e\u8fd9\u4e2a\u642d\u914d\u5176\u4ed6\u786e\u5b9a\u4e86\u6700\u5c0f\u4ef7\u503c\u7684\u70b9\u66f4\u65b0\u522b\u7684\u70b9\uff08\u65b9\u6848\u6570\uff1f\u66f4\u65b0\u65f6\u4e58\u6cd5\u52a0\u6cd5\u539f\u7406\u5373\u53ef\uff09PS\uff1aEOF\u5c4f\u5e55\u7ec8\u6b62\u56de\u8f66\u540ectrl + z\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int INF = 10000000;\nint a[1010][1010],N,dis[1010],head[1010],num_edge = 0,v[1010];\nint cnt[1010];\nstruct node\n{\n    int dis;\n    int to;\n    int next;\n}edge[1010];\nint add_edge(int from,int dis,int to)\n{\n    edge[++num_edge].next = head[from];\n    head[from] = num_edge;\n    edge[num_edge].dis = dis;    \n    edge[num_edge].to = to;\n}\nint getin()\n{\n    int x = 0,f = 1;\n    char ch = getchar();\n    while(ch > '9'||ch < '0') {if(ch == '-') f = -1; ch = getchar(); }\n    while(ch >= '0'&&ch <= '9') {x = x * 10 + ch - '0'; ch = getchar(); }\n    return x * f;\n}\nint dijkstra()\n{\n    for(int i = 0;i < N; i++) cnt[i] = 1;\n    for(int i = 1;i <= N; i++)\n    {\n      int mark,MIN = INF;\n      for(int j = 0;j < N; j++)\n           if(MIN > dis[j]&&!v[j])\n        {\n          MIN = dis[j];\n          mark = j;\n        }\n       v[mark] = 1;\n      for(int j = 0;j < N; j++)\n       if(a[mark][j] != -1&&v[j])\n       { \n         if(dis[a[mark][j]] > dis[mark] + dis[j])\n         {\n          dis[a[mark][j]] = dis[mark] + dis[j];\n          cnt[a[mark][j]] = cnt[mark] * cnt[j];\n         }\n         else if(dis[a[mark][j]] == dis[mark] + dis[j]) \n         cnt[a[mark][j]]+= cnt[mark] * cnt[j];\n       } \n    }\n    printf(\"%d %d\",dis[0],cnt[0]);\n}\nint main()\n{\n    N = getin();\n    for(int i = 0;i < N; i++)\n     dis[i] = getin();\n    int A,B,C;\n    memset(a,-1,sizeof(a));\n    while(scanf(\"%d%d%d\",&A,&B,&C)!=EOF)\n    {\n     a[A][B] = C; a[B][A] = C;\n    }\n    dijkstra();\n    return 0;\n}\n```",
        "postTime": 1476349124,
        "uid": 9174,
        "name": "VitualDieties",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1875 \u3010\u4f73\u4f73\u7684\u9b54\u6cd5\u836f\u6c34\u3011"
    }
]