[
    {
        "content": "~~\u4eba\u751f\u4e2d\u7b2c\u4e00\u6b21\u5199\u6d1b\u8c37\u9898\u89e3\u3002~~\n\n\u662f\u4e00\u9053\u677f\u5b50+\u7ec6\u8282\u9898\uff0c\u5982\u679c\u60f3\u8981\u8c03\u8bd5\u7684\u53ef\u4ee5\u53bb\u6700\u4e0b\u65b9\u83b7\u5f97 Hack \u6570\u636e\u3002\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u4f60\u4e00\u4e2a\u62ec\u53f7\u6811\uff0c\u6c42\u5339\u914d\u62ec\u53f7\u4e2d\u7684\u6700\u5927\u5d4c\u5957\u3002\n\n### \u9898\u89e3\n\n\u6700\u5927\u5d4c\u5957\u662f\u975e\u5e38\u7ecf\u5178\u7684\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\uff0c\u6bcf\u4e2a `(` \u770b\u4f5c `+1`\uff0c\u6bcf\u4e2a `)` \u770b\u4f5c `-1`\uff0c\u90a3\u4e48\u6700\u5927\u5d4c\u5957\u5c31\u662f\u8fd9\u4e2a\u62ec\u53f7\u5e8f\u5217\u7684\u524d\u7f00\u6700\u5927\u503c\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u8def\u5f84\u7edf\u8ba1\u95ee\u9898\uff0c\u53ef\u4ee5\u9009\u7528\u7684\u5de5\u5177\u6709\u70b9\u5206\u6cbb\u3001dsu on tree \u4ee5\u53ca\u7ebf\u6bb5\u6811\u5408\u5e76\uff0c\u6b64\u9898\u4f7f\u7528\u70b9\u5206\u6cbb\u3002\n\n\u6bcf\u6b21\u8003\u8651\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u8def\u5f84\uff0c\u4e00\u5b9a\u53ef\u4ee5\u62c6\u6210\u5de6\u8fb9\u7684\u4e00\u6bb5\u4ee5\u53ca\u53f3\u8fb9\u7684\u4e00\u6bb5\u3002\n\n\u90a3\u4e48\u6240\u8c13\u201c\u6700\u5927\u524d\u7f00\u548c\u201d\u5728\u8fd9\u6761\u94fe\u4e0a\u4f53\u73b0\u7684\u5c31\u662f\u201c\u5de6\u8fb9\u94fe\u7684\u6700\u5927\u524d\u7f00\u548c\u201d\u4e0e\u201c\u53f3\u8fb9\u94fe\u7684\u6700\u5927\u524d\u7f00\u548c\u52a0\u4e0a\u5de6\u8fb9\u7684\u548c\u201d\u3002\uff08\u53ef\u4ee5\u7406\u89e3\u6210\u7ebf\u6bb5\u6811\u7684\u7ecf\u5178\u5957\u8def\u3002\uff09\n\n\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u5230\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u4e0d\u5206\u5de6\u53f3\uff0c\u4e5f\u5c31\u662f\u524d\u540e\u7f00\u65e0\u6cd5\u533a\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5b9a\u5411\uff1a**\u4ece\u6839\u5230\u5404\u4e2a\u8282\u70b9**\u3002\n\n\u597d\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u660e\u786e\u4e86\uff1a\u5728\u7edf\u8ba1\u6bcf\u4e2a\u5b50\u6811\u65f6\uff0c\u8bb0\u5f55\u6bcf\u4e00\u6761**\u6839\u5230\u8282\u70b9\u7684\u94fe**\u7684\u540e\u7f00\u6700\u5927\u503c\uff08\u4f9b\u7ed9\u5de6\u8fb9\u7684\u94fe\uff0c\u4e0b\u79f0\u5de6\u94fe\uff09\uff0c\u4ee5\u53ca\u524d\u7f00\u6700\u5927\u503c\uff08\u5171\u7ed9\u53f3\u94fe\uff09\u3002\n\n\u6211\u4eec\u7684\u601d\u8def\u65f6\uff1a\u5728 dfs \u8fc7\u7a0b\u4e2d\u7edf\u8ba1\u6bcf\u79cd\u94fe\u4f5c\u4e3a\u5de6\u94fe\u6216\u8005\u53f3\u94fe\u7684\u8d21\u732e\uff08\u5373\u6700\u5927\u503c\uff09\u3002\n\n\u5c31\u8fd9\u6837\u5f00\u59cb\u4e86\uff0c\u95ee\u9898\u4e5f\u6765\u4e86\u3002\n\n\u4e00\u4e9b\u5b9a\u4e49\uff1a\n\n**Warning\uff1a\u5efa\u8bae\u5728\u81ea\u5df1\u753b\u62ec\u53f7\u6298\u7ebf\u56fe+\u7406\u89e3\u3002**\n\n`ldis`:\u8868\u793a\u5f53\u524d\u8fd9\u6761\u94fe\u4ee5\u5de6\u7aef\u70b9\u4f5c\u4e3a\u57fa\u51c6\u70b9\uff0c\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\uff08\u53ef\u80fd\u4e3a\u8d1f\uff09\u3002\n\n`rdis`:\u8868\u793a\u5f53\u524d\u8fd9\u6761\u94fe\u4ee5\u53f3\u7aef\u70b9\u4f5c\u4e3a\u57fa\u51c6\u70b9\uff0c\u5de6\u7aef\u70b9\u7684\u4f4d\u7f6e\uff08\u53ef\u80fd\u4e3a\u8d1f\uff09\u3002\n\n`lmx`:\u8868\u793a\u5f53\u524d\u8fd9\u6761\u94fe\u7684\u6700\u5927**\u540e\u7f00**\u3002\n\n`rmx`:\u8868\u793a\u5f53\u524d\u8fd9\u6761\u94fe\uff08\u5305\u62ec\u6839\u8282\u70b9\uff09\u7684\u6700\u5927**\u524d\u7f00**\u3002\n\n`lmn`:\u8868\u793a\u5f53\u524d\u8fd9\u6761\u94fe\u4ee5\u5de6\u7aef\u70b9\u4f5c\u4e3a\u57fa\u51c6\u70b9\uff0c\u6700\u4f4e\u70b9\u7684\u4f4d\u7f6e\u3002\n\n`rmn`:\u8868\u793a\u5f53\u524d\u8fd9\u6761\u94fe\u4ee5\u53f3\u7aef\u70b9\u4f5c\u4e3a\u57fa\u51c6\u70b9\uff0c\u6700\u4f4e\u70b9\u7684\u4f4d\u7f6e\u3002\n\n**\u7b2c\u4e00\u4e2a\u7ec6\u8282\uff1a\u6839\u8282\u70b9**\n\n\u8fd9\u662f\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u9ed8\u8ba4\u6839\u8282\u70b9\u7ed9\u53f3\u94fe\uff0c\u4e5f\u5c31\u662f\u5728dfs\u7684\u521d\u59cb\u503c\u8bbe\u5b9a\u65f6\u653e\u4e0a\u6839\u8282\u70b9\uff0c\u800c\u4f5c\u4e3a\u5de6\u94fe\u7684\u65f6\u5019\u4e0d\u53d8\n\n**\u7b2c\u4e8c\u4e2a\u7ec6\u8282\uff1a\u5224\u65ad\u662f\u5426\u5408\u6cd5**\n\n\u5176\u5b9e\u70b9\u5206\u6cbb\u7684\u6838\u5fc3\u4e5f\u5728\u4e8e\u6b64\uff1a\u5f00\u4e00\u4e2a\u6876 $b_i$\uff0c\u8868\u793a\u5de6\u94fe\u5931\u914d\u62ec\u53f7\u4e2a\u6570\u4e3a $i$ \u7684\u6700\u5927\u524d\u7f00\u548c\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u4f7f\u7528\u4e00\u6761\u53f3\u94fe\u6765\u548c\u5de6\u94fe\u5339\u914d\uff0c\u90a3\u4e48\u7b54\u6848\u7528 $\\max(b[ldis_i],ldis_i+rmx_j)$ \u66f4\u65b0\u3002\n\n\u90a3\u4e48\u5982\u679c\u5de6\u94fe\u6216\u53f3\u94fe\u751a\u81f3\u81ea\u5df1\u90fd\u4e0d\u5408\u6cd5\u4e86\u600e\u4e48\u529e\uff1f\n\n\u4ea4\u7ed9 dfs\uff01\n\n**\u7b2c\u4e09\u4e2a\u7ec6\u8282\uff1adfs\u600e\u4e48\u5199**\n\n\u597d\u95ee\u9898\u3002 lmn \u548c rmn \u4f1a\u53d1\u6325\u7528\u573a\u4e86\u3002\n\n\u663e\u7136\uff0c\u53ea\u6709\u5728\u4ed6\u4eec\u90fd =0 \u7684\u65f6\u5019\uff08\u4e3a\u4ec0\u4e48\u4e0d\u662f\u5927\u4e8e\u7b49\u4e8e?\uff09\u624d\u6210\u7acb\u3002\n\n\u90a3\u4e48\u5728 dfs \u7684\u8fc7\u7a0b\u4e2d\u8bb0\u5f55\u6bcf\u4e00\u6761\u5408\u9002\u505a\u5de6\u94fe\u548c\u53f3\u94fe\u7684 mx \u4e0e dis \u5373\u53ef\u3002\n\n\u90a3\u4e48\u513f\u5b50\u7684\u8f6c\u79fb\u65f6\u6bd4\u8f83\u663e\u7136\u7684\uff0c\u4e0d\u8bf4\u4e86\u3002\n\n\u4e0d\u8fc7\u6ce8\u610f\u5728\u8f6c\u79fb rmx \u7684\u65f6\u5019\u6ce8\u610f\u4e0d\u662f\u548c 0 \u53d6 max \uff0c\u56e0\u4e3a\u6b64\u65f6\u8868\u793a\u7684\u65f6\u513f\u5b50\u7684\u72b6\u6001\uff0c\u5e76\u975e\u7236\u4eb2\u7684\u3002\n\n### \u4ee3\u7801\n\n```cpp\nvoid Grt(ll u,ll fa){\n\tsz[u]=1;ll mx=0;\n\tgo(u)if(v!=fa&&!vis[v])Grt(v,u),sz[u]+=sz[v],mx=max(mx,sz[v]);\n\tmx=max(mx,TRsz-sz[u]);\n\tif(mx<szRT)szRT=mx,RT=u;\n}\nvoid dfs(ll u,ll fa,ll ldis,ll rdis,ll lmx,ll rmx,ll lmn,ll rmn){\n\tif(lmn>=0)tmp1[++kkk1]=ldis,tmpp1[kkk1]=lmx;\n\tif(rmn>=0)tmp2[++kkk2]=rdis,tmpp2[kkk2]=rmx;\n\tgo(u)if(!vis[v]&&v!=fa)dfs(v,u,ldis+a[v],rdis-a[v],max(lmx+a[v],a[v]),max(rmx,-rdis+a[v]),min(lmn+a[v],0ll),min(rmn-a[v],0ll));\n}\nvoid calc(ll u){\n\tkkk1=0;kkk2=0;\n\tvector<ll>son;\n\tgo(u)if(!vis[v]){\n\t\tson.push_back(v);\n\t\tll lst1=kkk1,lst2=kkk2;\n\t\tdfs(v,0,a[v],-a[u]-a[v],a[v],max(max(a[u],a[u]+a[v]),0ll),min(a[v],0ll),min(-a[u]-a[v],0ll));\n\t\trep(j,lst2+1,kkk2)if(viss[tmp2[j]])ans=max(ans,max(bl[tmp2[j]],tmp2[j]+tmpp2[j]));\n\t\trep(j,lst1+1,kkk1)bl[tmp1[j]]=max(bl[tmp1[j]],tmpp1[j]),viss[tmp1[j]]=1;\n\t}\n\tif(a[u]==-1)ans=max(ans,bl[1]);\n\telse rep(i,1,kkk2)if(tmp2[i]==0)ans=max(ans,tmpp2[i]);\n\trep(i,1,kkk1)bl[tmp1[i]]=0,viss[tmp1[i]]=0;\n\tkkk1=0;kkk2=0;\n\tfor(ll i=son.size()-1;i>=0;i--){\n\t\tll v=son[i];\n\t\tll lst1=kkk1,lst2=kkk2;\n\t\tdfs(v,0,a[v],-a[u]-a[v],a[v],max(max(a[u],a[u]+a[v]),0ll),min(a[v],0ll),min(-a[u]-a[v],0ll));\n\t\trep(j,lst2+1,kkk2)if(viss[tmp2[j]])ans=max(ans,max(bl[tmp2[j]],tmp2[j]+tmpp2[j]));\n\t\trep(j,lst1+1,kkk1)bl[tmp1[j]]=max(bl[tmp1[j]],tmpp1[j]),viss[tmp1[j]]=1;\n\t}\n\tif(a[u]==-1)ans=max(ans,bl[1]);\n\telse rep(i,1,kkk2)if(tmp2[i]==0)ans=max(ans,tmpp2[i]);\n\trep(i,1,kkk1)bl[tmp1[i]]=0,viss[tmp1[i]]=0;\n}\nvoid solve(ll u){\n\tvis[u]=1;calc(u);\n\tgo(u)if(!vis[v]){\n\t\tszRT=inf;TRsz=sz[v];Grt(v,0);solve(RT);\n\t}\n}\nint main(){\n\tn=read();rep(i,2,n)x=read(),add(i,x),add(x,i);\n\trep(i,1,n)a[i]=(get()=='('?1:-1);\n\tszRT=inf;TRsz=n;Grt(1,0);solve(RT);\n\twriteln(ans);\n}\n```\n### [Hacks](https://www.luogu.com.cn/paste/4dve91d4)\n\n\u795d\u5927\u5bb6\u505a\u9898\u8c03\u9898\u6109\u5feb\u3002",
        "postTime": 1638801279,
        "uid": 237541,
        "name": "___balalida___",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011P3060 Balanced Trees G"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](/problem/P3060)\n\n$\\Theta(n)$ \u505a\u6cd5\uff0c\u6765\u81ea[\u5b98\u65b9\u9898\u89e3](http://usaco.org/current/data/sol_btree.html)\u3002\n\n\u5bf9\u4e8e\u70b9 $i$\uff0c\u5982\u679c $i$ \u4e0a\u662f\u5de6\u62ec\u53f7\uff0c\u6211\u4eec\u4ee4 $a_i=1$\uff0c\u5426\u5219 $a_i=-1$\u3002\n\n\u5148\u8003\u8651\u5e8f\u5217\u4e0a\u9009\u5b50\u4e32\u7684\u95ee\u9898\u3002\n\n\u73b0\u5728\uff0c\u8bbe $f_n$ \u8868\u793a $\\sum_{i=1}^na_i$\u3002\u5f88\u660e\u663e\uff0c\u533a\u95f4 $[a,b]$ \u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 $f_{a-1}=f_b=\\min\\{f_x|x\\in [a-1,b]\\}$\u3002\u6b21\u6570\uff0c\u7b54\u6848\u4e3a $\\max\\{f_x|x\\in[a,b]\\}-f_{a-1}$\u3002\n\n\u6211\u4eec\u679a\u4e3e $x$ \u8ba1\u7b97\u8d21\u732e\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u4e0b\u6807 $x$\uff0c\u6211\u4eec\u60f3\u8981\u627e\u5230\u5b83\u5728\u4e00\u4e2a\u5408\u6cd5\u5b50\u4e32\u4e2d\u80fd\u8fbe\u5230\u7684\u6700\u5927\u7b54\u6848\u3002\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u9996\u5148\u4ee4 $g=\\max(\\min\\{f_y|y\\in[0,z)\\}, \\min\\{f_y|y\\in[z,n]\\})$\uff0c\u5176\u4e2d $f_0=0$\u3002\u4e00\u5b9a\u5b58\u5728\u4e00\u5bf9 $a,b$ \u4f7f\u5f97 $g=f_a=f_b=\\min\\{f_y|y\\in[a,b]\\}$\uff0c\u90a3\u4e48 $x$ \u8d21\u732e\u7684\u7b54\u6848\u5c31\u662f $f_x-g$\u3002\u6ce8\u610f\u6b64\u5904\u5bf9\u5e94\u7684\u5408\u6cd5\u4e32\u4e3a $(a,b]$\u3002\u5177\u4f53\u6765\u8bf4\uff0c$a$ \u662f $x$ \u5de6\u8fb9\u79bb\u5b83\u6700\u8fd1\u7684 $f_a=g$\uff0c$b$ \u5219\u662f\u53f3\u8fb9\u6700\u8fd1\u7684\u3002\n\n\u56e0\u4e3a $f$ \u76f8\u90bb\u4e24\u9879\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a $1$\uff0c\u6240\u4ee5\u5de6\u53f3\u4e24\u4fa7\u4e00\u5b9a\u90fd\u5305\u542b\u8fd9\u4e2a\u503c\uff08\u5728\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u91cc\uff0c$x$ \u4e00\u4fa7\u7684\u6700\u5c0f\u503c $ < g$ \u7531\u4e8e\u53d8\u5316\u91cf\u4e3a $1$\uff0c$z$ \u548c\u6700\u5c0f\u503c\u4e2d\u95f4\u4e00\u5b9a\u7ecf\u8fc7 $g$\uff09\u3002\u540c\u65f6 $[a,b]$ \u4e2d\u4e0d\u53ef\u80fd\u6709 $<g$ \u7684\u503c\uff0c\u5426\u5219\u5728\u8fbe\u5230\u8fd9\u4e2a\u66f4\u5c0f\u7684\u503c\u4e4b\u524d\uff0c\u4e00\u5b9a\u4f1a\u5148\u9047\u5230 $g$\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u8bc1\u660e\u4e86\u7ed3\u8bba\u3002\n\n\u4e3a\u4e86\u5728\u6811\u4e0a\u505a\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u8fdb\u884c\u4e00\u4e2a\u8f6c\u5316\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$\uff0c\u5b83\u7684\u8d21\u732e\u4e3a\u5b83\u7ed3\u5c3e\u7684\u4e00\u4e2a\u5b50\u4e32\u7684\u6700\u5927\u6743\u503c\u548c\uff0c\u548c\u5b83\u4e0b\u4e00\u4e2a\u6570\u5f00\u5934\u7684\u4e00\u4e2a\u5b50\u4e32\u7684\u6700\u5c0f\u6743\u503c\u548c\u7684\u76f8\u53cd\u6570\uff0c\u53d6\u66f4\u5c0f\u7684\u90a3\u4e2a\u3002\u8bc1\u660e\u7c7b\u4f3c\u4e0a\u9762\u3002\u8fd9\u91cc\u7684\u503c\u6307 $a$\u3002\n\n\u642c\u5230\u6811\u4e0a\u5c31\u662f\uff0c\u6211\u4eec\u679a\u4e3e\u4e00\u4e2a\u70b9\u548c\u5b83\u7684\u4e0b\u4e00\u4e2a\u70b9\uff08\u5373\uff0c\u8bb0\u65e0\u5411\u8fb9\u4e3a\u4e24\u6761\u6709\u5411\u8fb9\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u6761\u8fb9\uff09\uff0c\u8bbe\u4e3a $u,v$\uff0c\u7b54\u6848\u5c31\u662f $u$ \u5f00\u5934\u7684\u4e0d\u7ecf\u8fc7 $v$ \u7684\u3001\u70b9\u6743\u548c\u6700\u5927\u7684\u4e00\u6761\u8def\u5f84\uff0c\u548c $v$ \u5f00\u5934\u7684\u4e0d\u7ecf\u8fc7 $u$ \u7684\u3001\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u4e00\u6761\u8def\u5f84\u7684\u76f8\u53cd\u6570\uff0c\u8fd9\u4e24\u4e2a\u53d6\u8f83\u5c0f\u503c\u3002\n\n\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\uff0c\u6c42\u6bcf\u4e2a\u70b9\u4e0d\u7ecf\u8fc7\u76f8\u90bb\u7684\u53e6\u5916\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u548c\u6700\u5927/\u6700\u5c0f\u8def\u5f84\u3002\u8fd9\u4e2a\u53ef\u4ee5\u6362\u6839 DP \u6c42\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5747\u4e3a $\\Theta(n)$\uff0c\u5341\u5206\u4f18\u79c0\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define all(awa) awa.begin(),awa.end()\nconstexpr int N{40000};\n// \u540e\u7f00\uff1a[m]\u6700\u5927\u503c\uff0c[n]\u6700\u5c0f\u503c\uff0c\u524d\u7f00\uff1a[f]\u5b50\u6811\u5185\uff0c[g]\u5b50\u6811\u5916\nint fm[N+5],fn[N+5],gm[N+5],gn[N+5],fa[N+5],a[N+5];\nvector<int> e[N+5];\nvoid solve(int u) {\n    for (auto v:e[u]) {\n        solve(v);\n        fm[u]=max(fm[u],fm[v]);\n        fn[u]=min(fn[u],fn[v]);\n    }\n    fm[u]+=a[u];fn[u]+=a[u];\n}\nvoid sulve(int u) {\n    gm[u]+=a[u];gn[u]+=a[u];\n    for (auto v:e[u]) gm[v]=max(a[u],gm[u]),gn[v]=min(a[u],gn[u]);\n    if (e[u].size()>1) {\n        int mx{0},mt{0},mn{0},mp{0};\n        for (auto v:e[u]) {\n            if (fm[v]>mx) mt=mx,mx=fm[v];\n            else mt=max(mt,fm[v]);\n            if (fn[v]<mn) mp=mn,mn=fn[v];\n            else mp=min(mp,fn[v]);\n        }\n        for (auto v:e[u]) {\n            gm[v]=max(gm[v],(fm[v]==mx?mt:mx)+a[u]);\n            gn[v]=min(gn[v],(fn[v]==mn?mp:mn)+a[u]);\n        }\n    }\n    for (auto v:e[u]) sulve(v);\n}\nint main() {\n    cin.tie(nullptr)->sync_with_stdio(false);\n    int n;cin>>n;\n    for (int i{2};i<=n;++i) {\n        cin>>fa[i];\n        e[fa[i]].push_back(i);\n    }\n    for (int i{1};i<=n;++i) {\n        char c;while (isspace(c=getchar()));\n        a[i]=(c=='('?1:-1);\n    }\n    solve(1);\n    sulve(1);\n    int ans{0};\n    for (int i{2};i<=n;++i) ans=max({ans,min(fm[i],a[i]-gn[i]),min(-fn[i],gm[i]-a[i])});\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1678177478,
        "uid": 374433,
        "name": "ppip",
        "ccfLevel": 7,
        "title": "P3060 [USACO12NOV]Balanced Trees G \u9898\u89e3"
    },
    {
        "content": "\u7cbe\u795e\u6c61\u67d3\u9898\u3002\u3002\u3002\u4e0d\u8fc7\u8981\u662f\u7528\u7ed3\u6784\u4f53\u5199\u5c31\u8fd8\u597d\u3002\n\n\u62ec\u53f7\u5e73\u8861\u663e\u7136\u53ef\u4ee5\u4ee3\u6570\u5316\uff0c\u5c31\u628a `(` \u5f53 $1$\u200b \u628a `)` \u5f53 $-1$\u200b\u200b\u200b\u3002\u8003\u8651\u70b9\u5206\u6cbb\uff0c\u9700\u8981\u8ba1\u7b97\u8fde\u901a\u5757\u4e2d\u6bcf\u4e2a\u70b9\u5230\u91cd\u5fc3\u3001\u4ee5\u53ca\u91cd\u5fc3\u5230\u6bcf\u4e2a\u70b9\u7684\u4ee3\u6570\u548c\u3001\u6700\u5c0f / \u6700\u5927\u524d\u7f00\u548c\u7b49\u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u5f88\u8f7b\u677e\u5730\u66f4\u65b0\u3002\u5982\u4e0b\u4ee3\u7801\u7ed9\u51fa\u4e86\u62ec\u53f7\u5e8f\u5217\u63a5\u4e0a\u4e00\u6bb5\u62ec\u53f7\u5e8f\u5217\u7684\u66f4\u65b0\u65b9\u6cd5\uff1a\n\n```cpp\nstruct Tuple{\n\tint sum,mx,mn;\n\tTuple(int x=0,int y=0,int z=0){sum=x,mx=y,mn=z;}\n\tfriend Tuple operator+(Tuple x,Tuple y){return Tuple(x.sum+y.sum,max(x.mx,x.sum+y.mx),min(x.mn,x.sum+y.mn));}\n};\n```\n\n\u7136\u540e\u6c42\u6700\u5927\u503c\u4e0d\u80fd\u4e00\u9636\u5dee\u5206\uff0c\u53ea\u80fd\u52a8\u6001\u66f4\u65b0\u3002\u8003\u8651\u5f53\u524d\u5b50\u6811\u5185\u6240\u6709\u70b9\u4e0e\u4e4b\u524d\u5b50\u6811\u7684\u6240\u6709\u70b9\u8fdb\u884c\u5339\u914d\uff0c\u7684\u6240\u6709\u8def\u5f84\u4e4b\u548c\u3002\u6211\u4eec\u5148\u8003\u8651\u524d\u9762\u7684\u70b9\u5230\u5f53\u524d\u70b9\u8fd9\u4e2a\u65b9\u5411\u600e\u4e48\u505a\u3002\u679a\u4e3e\u5f53\u524d\u70b9 $y$\uff0c\u6784\u6210\u5408\u6cd5\u62ec\u53f7\u4e32\u5f53\u4e14\u4ec5\u5f53 $sum_x+sum_y=0$ \u4e14 $\\min(mn_x,sum_x+mn_y)\\geq 0$\u3002\u6839\u636e\u524d\u8005\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 $sum_y$\uff0c\u90a3\u4e48\u552f\u4e00\u7684\u5408\u6cd5 $sum_x$ \u53ef\u4ee5\u5f88\u8f7b\u677e\u89e3\u51fa\u6765\uff0c\u8fd9\u6837 $sum_x$ \u4e5f\u662f\u5e38\u6570\u4e86\u3002\u5bf9\u540e\u8005\uff0cmin \u7684\u53f3\u5143\u662f\u5e38\u6570\u53ef\u4ee5\u76f4\u63a5\u5224\uff0c\u5de6\u5143\u7684\u8bdd\uff0c\u8bf4\u660e $x$ \u5165\u9009\u5fc5\u987b\u6ee1\u8db3 $mn_x\\geq 0$\u3002\u8003\u8651\u66f4\u65b0\u7684\u503c $\\max(mx_x,sum_x+mx_y)$\uff0c\u53f3\u5143\u662f\u5e38\u6570\uff0c\u6700\u5927\u5316\u5de6\u5143\u7684\u8bdd\uff0c\u5bb9\u6613\u77e5\u9053\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6240\u6709 $sum_x=v$ \u7684 $x$ \u6c42\u6700\u5927\u7684 $mx_x$ \u5373\u53ef\uff0c\u7528\u6876\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u8003\u8651\u53cd\u65b9\u5411\u8def\u5f84\uff1f\u4e0d\u60f3\u5206\u7c7b\u8ba8\u8bba\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u91cd\u5fc3\u7684\u513f\u5b50\u5e8f\u5217\u53cd\u8fc7\u6765 CV \u4e00\u904d\u5c31\u884c\u4e86\u3002\u603b\u590d\u6742\u5ea6\u7ebf\u5bf9\u3002",
        "postTime": 1632554139,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "p3060"
    },
    {
        "content": "\u9898\u610f\uff1a\u6c42\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u4f7f\u5d4c\u5957\u6700\u591a\n\n\u9996\u5148\u5bf9\u4e8e\u6811\u4e0a\u8def\u5f84\u6c42\u65b9\u6848\u7684\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u70b9\u5206\u6cbb\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u5e8f\u5217\u5e94\u8be5\u662f\u600e\u4e48\u6837\u7684\uff0c\u628a`(`\u770b\u4f5c`+1` `)`\u770b\u4f5c`-1`\u5bf9\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684\u62ec\u53f7\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4ed6\u7684\u4efb\u610f\u524d\u7f00\u548c\u90fd\u662f\u5927\u4e8e0\u7684\u6240\u4ee5\uff0c\u6700\u591a\u5d4c\u5957\u4e2a\u6570\u5c31\u662f\u62ec\u53f7\u5e8f\u5217\u524d\u7f00\u7684\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u5982\u4f55\u62fc\u63a5\u4e24\u6761\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u62c6\u6210\u4ee5\u4e0b\u4e24\u6761\u8def\u5f84![](https://cdn.luogu.com.cn/upload/image_hosting/01czhu9a.png)\n\n\n\u53d1\u73b0\u7ea2\u8272\u8def\u5f84+\u84dd\u8272\u8def\u5f84\u548c\u4e3a0\uff0c\u6240\u4ee5\u5bf9\u4e8e\u679a\u4e3e\u5230\u84dd\u8272\u8def\u5f84\u6c42\u7b54\u6848\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7ea2\u8272\u8def\u5f84\u7684\u548c\u3002\n\n\u9996\u5148\u7ea2\u8272\u8def\u5f84\u5408\u6cd5\u76f4\u63a5\u5224\u65ad\u524d\u7f00min\u5927\u4e8e0\u5373\u53ef\n\n\u8003\u8651\u84dd\u8272\u8def\u5f84\u4ec0\u4e48\u65f6\u5019\u5408\u6cd5\uff0c\u53d1\u73b0\u84dd\u8272\u5230\u91cd\u5fc3\u7684\u524d\u7f00\u548c\u7684\u6700\u5c0f\u503c\uff08`r_min`\uff09+\u7ea2\u8272\u6743\u503c(`-sum`)\u5927\u4e8e\u7b49\u4e8e0\uff0c\u56e0\u4e3a`r_min`\u6052\u5c0f\u4e8e`sum`\u6240\u4ee5\u8981\u6c42`r_min=sum`\n\n\u8003\u8651\u7b54\u6848\u7684\u4ea7\u751f\uff0c\u4e00\u5b9a\u662f\u5728\u84dd\u8272\u90e8\u5206\uff0c\u7ea2\u8272\u90e8\u5206\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5904\u7406\u7684\u7ea2\u8272\u90e8\u5206\uff0c\u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u8bb0\u5f55\u6bcf\u4e2a\u7ea2\u8272\u548c\u7684\u6700\u5927\u503c\uff0c\u84dd\u8272\u90e8\u5206\u5728`dfs`\u7684\u65f6\u5019\u8bb0\u5f55\n\n\u6574\u7406\u4e00\u4e0b\u6211\u4eec\u9700\u8981\u8bb0\u5f555\u4e2a\u4e1c\u897f\uff1a\u5230\u91cd\u5fc3\u6700\u5c0f\u503c\uff08\u84dd\u5408\u6cd5\uff09\uff0c\u5230\u91cd\u5fc3\u6700\u5927\u503c\uff08\u84dd\u7b54\u6848\uff09\uff0c\u5230\u5f53\u524d\u679a\u4e3e\u70b9\u6700\u5c0f\u503c\uff08\u7ea2\u5408\u6cd5\uff09\uff0c\u5230\u5f53\u524d\u679a\u4e3e\u70b9\u6700\u5927\u503c\uff08\u7ea2\u7b54\u6848\uff09\uff0c\u5230\u91cd\u5fc3\u548c\uff08\u66f4\u65b0\u4e0a\u9762\u51e0\u4e2a\u503c\uff09\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nint read()\n{\n\tchar c;\n\tint w=1;\n\twhile((c=getchar())>'9'||c<'0')if(c=='-')w=-1;\n\tint ans=c-'0';\n\twhile((c=getchar())>='0'&&c<='9')ans=(ans<<1)+(ans<<3)+c-'0';\n\treturn ans*w;\n}\nint n;\nconst int xx=4e4+5;\nstruct node\n{\n\tint next,to;\n}e[xx<<1];\nint cnt;\nint h[xx];\nint val[xx];\nvoid add(int x,int y)\n{\n\tcnt++;\n\te[cnt].next=h[x];\n\te[cnt].to=y;\n\th[x]=cnt;\n}\nint tot,cur,size[xx],maxx[xx],vis[xx];\nvoid findc(int x,int y)\n{\n\tsize[x]=1;maxx[x]=0;\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==y||vis[e[i].to])continue;\n\t\tfindc(e[i].to,x);\n\t\tsize[x]+=size[e[i].to];\n\t\tmaxx[x]=max(maxx[x],size[e[i].to]);\n\t}\n\tmaxx[x]=max(maxx[x],tot-size[x]);\n\tif(!cur||maxx[x]<maxx[cur])cur=x;\n}\nint t_n[xx],ans;\nvector<int>v;\nvoid clear()\n{\n\tfor(int i=0;i<v.size();i++)t_n[v[i]]=-1;\n\tv.clear();\n}\nvoid get(int x,int y,int r_min,int r_max,int n_min,int n_max,int sum,int op)\n{\n\tsum+=val[x];\n\tn_max+=val[x];\n\tn_min+=val[x];\n\tr_min=min(r_min,sum);\n\tr_max=max(r_max,sum);\n\tn_max=max(n_max,0);\n\tn_min=min(n_min,0);\n\tif(!op)\n\t{\n\t\tif(r_min==sum)//r_min\u6700\u5c0f\u662f0\uff0c\u6240\u4ee5sum\u4e00\u5b9a<=0 \n\t\t{\n\t\t\tif(t_n[-sum]!=-1)//\u6709\u7ea2\u8272\u90e8\u5206\u624d\u884c \n\t\t\t{\n\t\t\t\tans=max(ans,-sum+r_max);\n\t\t\t\tans=max(ans,t_n[-sum]);\n\t\t\t}\n\t\t}\n\t}\n\telse \n\t{\n\t\tif(n_min>=0)//\u7ea2\u8272\u524d\u7f00\u5927\u4e8e0 \n\t\t{\n\t\t\tif(t_n[sum]==-1)v.push_back(sum);\n\t\t\tt_n[sum]=max(t_n[sum],n_max);\n\t\t}\n\t}\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==y||vis[e[i].to])continue;\n\t\tget(e[i].to,x,r_min,r_max,n_min,n_max,sum,op);\n\t}\n}\nint sss=0;\nvoid dfz(int x,int y)\n{\n\tassert(sss<2000);\n\tif(tot==1)return;\n\tcur=0;findc(x,y);\n\tx=cur;findc(x,y);//\u8c03\u6574size \n\tvis[x]=1;\n\tif(val[x]==1)t_n[1]=1,v.push_back(1);//\u76f4\u4e0b \n\tvector<int>v;\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==y||vis[e[i].to])continue;\n\t\tv.push_back(e[i].to);\n\t\tget(e[i].to,x,0,0,0,0,0,0);//\u6c42\u7b54\u6848 \n\t\tget(e[i].to,x,min(0,val[x]),max(0,val[x]),min(0,val[x]),max(0,val[x]),val[x],1);\n\t}\n\tans=max(ans,t_n[0]);//\u76f4\u4e0a \n\tclear();\n\tfor(int i=v.size()-1;i>=0;i--)\n\t{\n\t\tget(v[i],x,0,0,0,0,0,0);//\u6c42\u7b54\u6848 \n\t\tget(v[i],x,min(0,val[x]),max(0,val[x]),min(0,val[x]),max(0,val[x]),val[x],1);\n\t}\n\tclear();\n\tfor(int i=h[x];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==y||vis[e[i].to])continue;\n\t\ttot=size[e[i].to];\n\t\tsss++;\n\t\tdfz(e[i].to,x);\n\t\tsss--;\n\t}\n}\nsigned main(){\n\tmemset(t_n,-1,sizeof(t_n));\n\tn=read();\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tint a=read();\n\t\tadd(a,i);\n\t\tadd(i,a);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tchar c;while((c=getchar())!='('&&c!=')');\n\t\tif(c=='(')val[i]=1;\n\t\telse val[i]=-1;\n\t}\n\ttot=n;\n\tdfz(1,0);\n\tcout<<ans<<\"\\n\";\n\treturn 0;\n}\n```\n",
        "postTime": 1620047103,
        "uid": 371852,
        "name": "\u4e00\u5ff5\u4e4b\u95f4\u3001\u3001",
        "ccfLevel": 0,
        "title": "P3060 [USACO12NOV]Balanced Trees G"
    },
    {
        "content": "*tag:\u70b9\u5206\u6cbb\uff0c\u62ec\u53f7\u5e8f\u5217*\n\n---\n~~\u600e\u4e48\u4e24\u7bc7\u9898\u89e3\u90fd\u6ca1\u4e86\uff0c\u6211\u6765\u8865\u4e00\u7bc7~~\n\n\u8fd9\u79cd\u6811\u4e0a\u8def\u5f84\u95ee\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u662f\u70b9\u5206\u6cbb\uff0c\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u4e24\u6761\u8def\u5f84\u62fc\u8d77\u6765\u7684\u7b54\u6848\u3002\n\n\u9996\u5148\u4e00\u5b9a\u662f(...(...(...(...\u8fd9\u6837\u4e00\u6761\u8def\u5f84\u548c...)...)...)\u8fd9\u6837\u4e00\u6761\u8def\u5f84\u62fc\u8d77\u6765\uff0c\u7136\u540e\u56e0\u4e3a\u662f\u6c42 $\\max$\uff0c\u6240\u4ee5\u6c42\u51fa\u4e24\u8fb9\u7684\u6700\u5927\u6df1\u5ea6\u518d\u53d6 $\\max$ \u5c31\u884c\u4e86\u3002\u8fd9\u91cc\u4ee5\u5de6\u8fb9\u4e3a\u4f8b\u3002\n\n---\n\u5047\u8bbe\u5f53\u524d\u662f\u4e00\u6761\u5408\u6cd5\u8def\u5f84\uff0c\u90a3\u4e48\u5f53\u524d\u7684\u7b54\u6848\u5c31\u662f\u5904\u7406\u62ec\u53f7\u5e8f\u5217\u65f6\u7528\u7684\u90a3\u4e2a\u6808\u7684\u5386\u53f2\u6700\u5927\u503c\uff0c\u6240\u4ee5\u5728dfs\u7684\u65f6\u5019\u62ff\u4e2a`mx`\u53d8\u91cf\u8bb0\u5f55\u4e00\u4e0b\u3002\n\n\u5982\u679c\u5f53\u524d\u662f\u4e00\u4e2a\u201c(\u201d\uff0c\u800c\u4e14\u6808\u4e3a\u7a7a\uff0c\u5c31\u8981\u628a`mx`\u53d8\u91cf\u52a0\u4e00\uff0c\u7136\u540e\u53ef\u4ee5\u5ffd\u7565\u6389\u8fd9\u4e2a\u201c(\u201d\u3010\u56e0\u4e3a\u62fc\u8d77\u6765\u7684\u8def\u5f84\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u9ed8\u8ba4\u53f3\u8fb9\u6709\u4e00\u4e2a\u201c)\u201d\u628a\u5b83\u5339\u914d\u6389\u4e86\u3011\u3002\n\n\u6bd4\u5982\u8bf4\u5f53\u524d\u662f\u201c(\u201d\uff0c\u7236\u4eb2\u5230\u91cd\u5fc3\u662f\u201c()(())\u201d\uff0c`mx`\u4e3a $2$\uff0c\u7531\u4e8e\u53f3\u8fb9\u8def\u5f84\u4e00\u5b9a\u6709\u4e00\u4e2a\u201c)\u201d\u4e0e\u5f53\u524d\u7684\u201c(\u201d\u5339\u914d\uff0c\u6240\u4ee5\u4e24\u6bb5\u8def\u5f84\u62fc\u8d77\u6765\u662f\u201c( ()(()) ... )\u201d\u3002\n\n\u76f8\u5f53\u4e8e\u4e2d\u95f4\u90a3\u90e8\u5206\u62ec\u53f7\u7684\u6df1\u5ea6\u6574\u4f53+1\uff0c\u6240\u4ee5\u8ba9`mx+1`\u5c31\u884c\u3002\n\n\u5bf9\u4e8e\u53f3\u8fb9\u8def\u5f84\u7684\u5904\u7406\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u4e00\u4e0b\uff1a\n```cpp\n/*\nup\u4e3a\u62ec\u53f7\u5e8f\u5217\u6808\u9876\nmxup\u4e3a\u5386\u53f2\u6700\u5927\u503c\ncntl\u4e3a\u591a\u4f59\u51fa\u6765\u7684\uff0c\u9700\u8981\u7528\u53f3\u8fb9\u7684\")\"\u53bb\u5339\u914d\u7684\"(\"\n*/\nif(a[x]=='(') val[x].up++;\nelse val[x].up--;\nval[x].mxup = max(val[x].mxup,-val[x].up);\nif(val[x].up>0)\n    val[x].cntl++,\n    val[x].mxup++,\n    val[x].up = 0;\n```\n\n\u7136\u540e\u53ef\u4ee5\u7528\u4e00\u4e2a\u6876\u53bb\u8bb0\u5f55\u6700\u5927\u503c\uff0c\u4ee5 `cntl/cntr` \u4e3a\u4e0b\u6807\u3002\n\n---\n\u6ce8\u610f\u4e00\u4e9b\u5c0f\u7ec6\u8282\n\n- \u5728dfs\u7684\u65f6\u5019\u6700\u597d\u4ee4\u4e00\u8fb9\u5305\u542b\u91cd\u5fc3\uff0c\u53e6\u4e00\u8fb9\u4e0d\u5305\u542b\u91cd\u5fc3\n\n- \u4e0d\u8981\u6f0f\u4e86\u5230\u91cd\u5fc3\u7684\u672c\u8eab\u5c31\u5408\u6cd5\u7684\u94fe\n- \u5728\u62fc\u8def\u5f84\u7684\u65f6\u5019\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u5bf9\u5e94\u7684\u8def\u5f84\n\n---\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntemplate<typename T>\ninline void Read(T &n){\n\tchar ch; bool flag=0;\n\twhile(!isdigit(ch=getchar()))if(ch=='-')flag=1;\n\tfor(n=ch^48;isdigit(ch=getchar());n=((n<<1)+(n<<3)+(ch^48)));\n\tif(flag)n=-n;\n}\n\nenum{\n    MAXN = 40005\n};\n\nint n;\n\nstruct _{\n    int nxt, to;\n    _(int nxt=0, int to=0):nxt(nxt),to(to){}\n}edge[MAXN<<1];\nint fst[MAXN], tot;\n\ninline void Add_Edge(int f, int t){\n    edge[++tot] = _(fst[f], t); fst[f] = tot;\n    edge[++tot] = _(fst[t], f); fst[t] = tot;\n}\n\nchar a[MAXN];\n\ninline void upd(int &x, int y){x = max(x,y);}\n\nint sz[MAXN], Size, Weight, Center;\nchar vis[MAXN], Vis[MAXN];\nvoid Get_Center(int x){\n    vis[x] = true;\n    sz[x] = 1;\n    int w=0;\n    for(register int u=fst[x]; u; u=edge[u].nxt){\n        int v=edge[u].to;\n        if(vis[v] or Vis[v]) continue;\n        Get_Center(v);\n        sz[x] += sz[v];\n        upd(w,sz[v]);\n    }   \n    upd(w,Size-sz[x]);\n    if(w < Weight)\n        Weight = w, Center = x;\n    vis[x] = false;\n}\n\nstruct ele{int mxup, mxdown, up, down, cntl, cntr;}val[MAXN];\n\nint q[MAXN], top;\nint mxl[MAXN], mxr[MAXN];\nvoid dfs(int x){\n    vis[x] = true; q[++top] = x; sz[x] = 1;\n\n    if(a[x]=='(') val[x].up++; else val[x].up--;\n    upd(val[x].mxup,-val[x].up);\n    if(val[x].up>0)\n        val[x].cntl++,\n        val[x].mxup++,\n        val[x].up = 0;\n\n    if(a[x]=='(') val[x].down++; else val[x].down--;\n    upd(val[x].mxdown,val[x].down);\n    if(val[x].down<0)\n        val[x].cntr++,\n        val[x].mxdown++,\n        val[x].down = 0;\n\n    for(register int u=fst[x]; u; u=edge[u].nxt){\n        int v=edge[u].to;\n        if(vis[v] or Vis[v]) continue;\n        val[v] = val[x]; dfs(v);\n        sz[x] += sz[v];\n    }\n    vis[x] = false;\n}\n\nint ans, dep;\nvoid solve(int x){\n    Weight = Size; Get_Center(x); x = Center; Vis[x] = true;\n\n    ele base = (ele){0,0,0,0,0,0};\n    if(a[x]=='(') base.cntl = 1; else base.up = -1; base.mxup = 1;\n    if(!base.up) mxl[base.cntl] = base.mxup;\n    mxr[0] = 0;\n\n    int prv; top = 0;\n    int ml=0, mr=0;\n    for(register int u=fst[x]; u; u=edge[u].nxt){\n        int v=edge[u].to;\n        if(Vis[v]) continue;\n        val[v] = base; prv = top+1;\n        dfs(v);\n        for(register int i=prv; i<=top; i++){\n            ele cur = val[q[i]];\n            upd(ml,cur.cntl); upd(mr,cur.cntr);\n            if(!cur.up and ~mxr[cur.cntl]) upd(ans,max(mxr[cur.cntl],cur.mxup));\n            if(!cur.down and ~mxl[cur.cntr]) upd(ans,max(mxl[cur.cntr],cur.mxdown));\n        }\n        for(register int i=prv; i<=top; i++){\n            ele cur = val[q[i]];\n            if(!cur.up) upd(mxl[cur.cntl],cur.mxup);\n            if(!cur.down) upd(mxr[cur.cntr],cur.mxdown);\n        }\n    }\n    fill(mxl,mxl+ml+1,-1); fill(mxr,mxr+mr+1,-1);\n\n    for(register int u=fst[x]; u; u=edge[u].nxt){\n        int v=edge[u].to;\n        if(Vis[v]) continue;\n        Size = sz[v]; solve(v);\n    }\n}\n\nchar tmp[10];\n\nint main(){\n    freopen(\"1.in\",\"r\",stdin);\n\tfreopen(\"2.out\",\"w\",stdout);\n    // double tt=clock();\n    Read(n);\n    for(register int i=2; i<=n; i++){\n        int fa; scanf(\"%d\",&fa);\n        Add_Edge(i,fa);\n    }\n    memset(mxl,-1,sizeof mxl);\n    memset(mxr,-1,sizeof mxr);\n    for(register int i=1; i<=n; i++) scanf(\"%s\",tmp), a[i] = tmp[0];\n    Size = n; solve(1);\n    cout<<ans<<endl;\n    // printf(\"%.6lf\\n\",(clock()-tt)/CLOCKS_PER_SEC);\n    return 0;\n}\n```",
        "postTime": 1620030765,
        "uid": 56825,
        "name": "oisdoaiu",
        "ccfLevel": 9,
        "title": "[USACO12NOV]Balanced Trees G"
    },
    {
        "content": "### P.S.\nupd on May 3th: \u589e\u52a0\u4e86\u4e24\u4e2a\u5b57\u7b26  \n[\u7531\u4e8e command_block \u795e\u4ed9\u597d\u50cf\u72af\u4e86\u70b9\u5c0f\u9519\u8bef\uff0c\u6240\u4ee5\u4ed6\u7684\u795e\u4ed9\u9898\u89e3\u88ab\u64a4\u4e86\u3010\u60b2\u3011](https://www.luogu.com.cn/discuss/show/312924)  \n\u5176\u5b9e\u6211\u89c9\u5f97\u4ed6\u539f\u6765\u5199\u5730\u633a\u597d\u7684\uff0c\u81f3\u5c11\u5e94\u8be5\u6bd4\u6211\u597d\u3002![](//xn--9zr.tk/wq)  \n\u73b0\u5728\u8d1f\u8d77\u53c9\u4ebaer\u7684\u8d23\u4efb\u6765\u8865\u4e00\u7bc7\u9898\u89e3\u3002  \n**\u8fd9\u7bc7\u535a\u5ba2\u7684\u4ee3\u7801\u90e8\u5206\u53c2\u8003\u4e86 command_block \u795e\u4ed9\u7684\u4ee3\u7801\u3002**  \n\u771f\u00b7\u8d8a\u8c03\u5206\u8d8a\u4f4e  \n![](https://cdn.luogu.com.cn/upload/image_hosting/7tts19pb.png)\n\n### Description.\n\u5b9a\u4e49\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\u7684\u6743\u503c\u4e3a\u5b83\u7684\u6700\u5927\u5d4c\u5957\u5c42\u6570\u3002  \n\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6811\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u62ec\u53f7\u3002  \n\u95ee\u6bcf\u6761\u94fe\u4e2d\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u7684\u6700\u5927\u6743\u503c\u3002  \n\n### Solution.\n\u5173\u4e8e\u6811\u4e0a\u94fe\u7684\u95ee\u9898\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u70b9\u5206\u3001\u8fb9\u5206\u8fd9\u79cd\u7b97\u6cd5\u3002  \n\u8003\u8651\u70b9\u5206\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5728\u4e00\u4e2a\u5206\u6cbb\u4e2d\u5fc3\u7684\u7b54\u6848\u3002  \n\u5f88\u663e\u7136\uff0c\u4e00\u6761\u8def\u7531\u5411\u4e0a\u7684\u548c\u5411\u4e0b\u7684\u4e24\u90e8\u5206\u7ec4\u6210\u3002  \n\u800c\u5bf9\u4e8e\u53ef\u80fd\u4f5c\u4e3a\u7b54\u6848\u4e00\u534a\u7684\u4e00\u6761\u5411\u4e0a\u7684\u8def\u5f84\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a `)`\uff0c\u80af\u5b9a\u6709\u4e00\u4e2a `(` \u548c\u5b83\u5339\u914d\u3002  \n\u6211\u4eec\u628a\u5b83\u4eec\u90fd\u6d88\u6389\uff0c\u8fd9\u6837\u5411\u4e0a\u8def\u5f84\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u4e9b `(`\u3002  \n\u540c\u7406\uff0c\u5411\u4e0b\u8def\u5f84\u6700\u540e\u53ea\u5269\u4e0b `)`\uff0c\u4e14\u6570\u91cf\u548c\u5411\u4e0a\u8def\u5f84\u7684\u76f8\u540c\u3002  \n\u6211\u4eec\u53ef\u4ee5\u5f00\u6876\u8bb0\u5f55\u6bcf\u4e00\u6761\u8def\u5f84\u4f5c\u4e3a\u5411\u4e0a\u8def\u5f84\u65f6\u6700\u540e\u6709\u591a\u5c11 `(`\uff0c\u800c\u5bf9\u6bcf\u6761\u4f5c\u4e3a\u5411\u4e0b\u8def\u5f84\u65f6\u67e5\u8be2\u6876\u91cc\u6811\u7684\u6700\u5927\u503c\u3002  \n\u7136\u540e\u4e3b\u8981\u70b9\u5206\u6cbb\u90e8\u5206\u5c31\u7ed3\u675f\u4e86\u3002  \n\n\u540c\u65f6\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u8ba1\u7b97\u7b54\u6848\u3002  \n\u6709\u4e00\u4e2a\u5f88\u57fa\u672c\u7684\u7ed3\u8bba\uff0c\u5c31\u662f\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\u7684\u6700\u5927\u5d4c\u5957\u6b21\u6570\u662f\u628a `(` \u5f53\u4f5c 1 \u628a `)` \u5f53\u4f5c -1 \u540e\u524d\u7f00\u548c\u7684\u6700\u5927\u503c\u3002  \n\u90a3\u4e48\u6211\u4eec\u4ece\u4e2d\u95f4\u628a\u8fd9\u4e2a\u62ec\u53f7\u5e8f\u5217\u62c6\u6210\u4e24\u6bb5\u540e\uff0c\u53ef\u4ee5\u8f6c\u5316\u6210\u5de6\u6bb5\u540e\u7f00\u6700\u5927\u503c\u548c\u53f3\u6bb5\u524d\u7f00\u6700\u5927\u503c\u52a0\u4e0a\u5de6\u8fb9\u7684\u548c\u3002  \n\u7136\u540e\u5c31\u53ef\u4ee5 $O(1)$ \u7edf\u8ba1\u7b54\u6848\u3002  \n\u7136\u540e\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\uff0c\u603b\u590d\u6742\u5ea6 $O(n\\log n)$\u3002  \n\n### Attantion.\n\u6ce8\u610f\u8981\u7edf\u8ba1\u4ec5\u4ec5\u662f\u4e00\u6761\u94fe\u7684\u60c5\u51b5\uff0ccommand_block \u795e\u4ed9\u5c31\u662f\u6ca1\u6709\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u3002  \n\u6ce8\u610f\u6e05\u7a7a\u65f6\u4e0d\u80fd `memset` \u5426\u5219\u590d\u6742\u5ea6\u4f1a\u9000\u5316\u6210 $O(n^2)$\uff0c~~\u7ed3\u679c\u53ea TLE \u4e24\u4e2a\u70b9~~  \n\u4e0d\u77e5\u9053\u8fd9\u7bc7\u9898\u89e3\u662f\u5426\u6709\u9519\u8bef\uff0c\u5982\u679c\u6709\u6b22\u8fce\u6765 Hack\u3002![](//xn--9zr.tk/wq)  \n\n### Coding.\n```cpp\n//\u662f\u554a\u2026\u2026\u4f60\u5c31\u662f\u90a3\u53ea\u9b3c\u4e86\u2026\u2026\u6240\u4ee5\u88ab\u4f60\u78b0\u5230\u4ee5\u540e\uff0c\u5c31\u8f6e\u5230\u6211\u53d8\u6210\u9b3c\u4e86{{{\n#include<bits/stdc++.h>\n#define ri register int\nusing namespace std;typedef long long ll;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<'0'||c>'9';c=getchar()) if(c=='-') f=1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tif(f) x=-x;\n}/*}}}*/\nconst int N=100005;struct edge{int to,nxt;}e[N<<1];int et,head[N],rs=0;\nint n,sz[N],mnd,rt,tp,nmp[N],md[N],d[N],sn[N],snt;char a[N],st[N],v[N];\ninline void adde(int x,int y) {e[++et]=(edge){y,head[x]},head[x]=et;}\ninline void init(int x,int fa)\n{//init the size of subtree\n\tsz[x]=1;for(int i=head[x];i;i=e[i].nxt)\n\t\tif(!v[e[i].to]&&e[i].to!=fa) init(e[i].to,x),sz[x]+=sz[e[i].to];\n}\ninline void getrt(int x,int fa,int tot)\n{//find the root\n\tint mx=tot-sz[x];for(int i=head[x];i;i=e[i].nxt)\n\t\tif(!v[e[i].to]&&e[i].to!=fa) mx=max(mx,sz[e[i].to]),getrt(e[i].to,x,tot);\n\tif(mx<=mnd) mnd=mx,rt=x;\n}\ninline void dfs2(int x,int fa)\n{//find the up path\n\tchar fg=0;st[++tp]=a[x],d[x]=d[fa]+(a[x]?1:-1);\n\tif(!a[x]) fg=1;else if(tp>1&&!st[tp-1]) ----tp;else fg=1;\n\tmd[x]=max(md[fa],-d[x]);if(!tp||st[tp]) nmp[tp]=max(nmp[tp],md[x]+tp);\n\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa&&!v[e[i].to]) dfs2(e[i].to,x);\n\tif(fg) tp--;else st[++tp]=0;\n}\ninline void dfs1(int x,int fa)\n{//find the down path\n\tchar fg=0;st[++tp]=a[x],d[x]=d[fa]+(a[x]?1:-1);\n\tif(a[x]) fg=1;else if(tp>1&&st[tp-1]) ----tp;else fg=1;\n\tmd[x]=max(md[fa],d[x]);if((!tp||!st[tp])&&nmp[tp]>=0) rs=max(rs,max(nmp[tp],md[x]+tp));\n\tfor(int i=head[x];i;i=e[i].nxt) if(e[i].to!=fa&&!v[e[i].to]) dfs1(e[i].to,x);\n\tif(fg) tp--;else st[++tp]=1;\n}\ninline void calc(int x)\n{//calc when x is the center.\n\tsnt=0,nmp[0]=0;for(int i=1;i<=sz[x];i++) nmp[i]=-1e9-5;\n\tfor(int i=head[x];i;i=e[i].nxt) if(!v[e[i].to])\n\t{\n\t\tsn[++snt]=e[i].to,st[tp=1]=a[x],md[x]=d[x]=a[x]?1:-1;\n\t\tdfs1(e[i].to,x),tp=md[x]=d[x]=0,dfs2(e[i].to,x),rs=max(rs,nmp[0]);\n\t}\n\tnmp[0]=0;for(int i=1;i<=sz[x];i++) nmp[i]=-1e9-5;\n\tfor(;snt;snt--)\n\t{\n\t\tst[tp=1]=a[x],md[x]=d[x]=a[x]?1:-1;\n\t\tdfs1(sn[snt],x),tp=md[x]=d[x]=0,dfs2(sn[snt],x),rs=max(rs,nmp[0]);\n\t}\n}\ninline void solve(int x)\n{\n\tv[x]=1,calc(x),init(x,0);for(int i=head[x];i;i=e[i].nxt)\n\t\tif(!v[e[i].to]) mnd=1e9,getrt(e[i].to,x,sz[e[i].to]),solve(rt);\n}\nint main()\n{\n\tread(n);for(int i=2,f;i<=n;i++) read(f),adde(i,f),adde(f,i);\n\tfor(int i=1;i<=n;i++) scanf(\"%s\",a+i),a[i]^=41;\n\treturn mnd=1e9,init(1,0),getrt(1,0,n),solve(rt),printf(\"%d\\n\",rs),0;\n}\n```",
        "postTime": 1619433567,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "P3060 [USACO12NOV]Balanced Trees G\uff08\u9898\u89e3\uff09"
    }
]