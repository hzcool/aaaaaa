[
    {
        "content": "> \u5e7f\u544a\uff1a\u63a8\u9500[$\\texttt{BLOG}$](https://stevebraveman.github.io/)\n\n\u8fd9\u9053\u9898\u6709\u4e2a\u6bd4\u8f83\u76f8\u4f3c\u7684\u9898\u76ee\uff1a[[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication](https://www.luogu.org/problemnew/show/P1345)\n\n\u5148\u628a\u8fd9\u9053\u9898\u88c5\u6362\u6210\u4eba\u8bdd\uff1a\u6709n\u4e2a\u70b9\u4e0d\u80fd\u5272\uff0c\u8bf7\u95ee\u4ece\u8fd9n\u4e2a\u70b9\u52301\u4e4b\u95f4\u81f3\u5c11\u5f97\u6254\u6389\u591a\u5c11\u4e2a\u70b9\u4f7f\u8fd9n\u4e2a\u70b9\u4e0d\u80fd\u548c1\u53f7\u70b9\u8fde\u901a\u3002\n\n\u76f4\u63a5\u4e0a\u6700\u5c0f\u5272\u3002\n\n\u9996\u5148\u6211\u4eec\u8fdb\u884c\u62c6\u70b9\uff0c\u628a\u7b2c $i$ \u4e2a\u70b9\u62c6\u6210 $i$ \u548c $i+n$ \u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u80fd\u5272\uff0c\u90a3\u4e48\u5c31\u5728 $i$ \u548c $i + n$ \u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u5982\u679c\u4e0d\u80fd\uff0c\u5219\u8fde\u5bb9\u91cf\u4e3a $INF$ \u7684\u8fb9\u3002\n\n\u7136\u540e\u6211\u4eec\u6839\u636e\u9053\u8def\u8fde\u63a5\u60c5\u51b5\u8fde\u63a5\u6b63\u53cd\u4e24\u6761\u5bb9\u91cf\u4e3a $INF$ \u7684\u8fb9\u3002\n\n\u4e4b\u540e\u6211\u4eec\u518d\u628a\u8d85\u7ea7\u6e90\u70b9\u548c\u4e0d\u80fd\u5272\u7684\u70b9\u76f8\u8fde\uff0c\u5bb9\u91cf\u4e3a$INF$\uff0c\u628a $1$ \u53f7\u70b9\u5b9a\u4f4d\u8d85\u7ea7\u6c47\u70b9\u3002\n\n\u6700\u540e\u6211\u4eec\u518d\u8dd1Dinic\u5c31\u884c\u4e86\u3002\n\nCode\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n#include <cstring>\n#define MAXN 1000002\n#define INF 2000000000\nint min(int a, int b) {\n    if (a < b) return a;\n    else return b;\n}\nstruct Edge {\n    int v, nx, w;\n} e[MAXN];\nstd::queue <int> q;\nint n, m, head[MAXN], ecnt = 1, x, y, z, r, k, dep[MAXN], cur[MAXN], cnt = 1, totp = 0, tot, xi, yi, c;\nbool dest[MAXN];\nvoid add(int f, int t, int w) {\n    e[++ecnt] = (Edge) {t, head[f], w};\n    head[f] = ecnt;\n    e[++ecnt] = (Edge) {f, head[t], 0};\n    head[t] = ecnt;\n}\nbool bfs(int s, int t) {\n    memset(dep, 0x7f, sizeof(dep));\n    while (!q.empty()) q.pop();\n    for (int i = 1; i <= 2 * n + 1; i++) {\n        cur[i] = head[i];\n    }\n    dep[s] = 0;\n    q.push(s);\n    while (!q.empty()) {\n        int v = q.front();\n        q.pop();\n        for (int i = head[v]; i; i = e[i].nx) {\n            int to = e[i].v;\n            if (dep[to] > INF && e[i].w) {\n                dep[to] = dep[v] + 1;\n                q.push(to);\n            }\n        }\n    }\n    if (dep[t] < INF) return 1;\n    else return 0;\n}\nint dfs(int u, int t, int l) {\n    if (!l || u == t) return l;\n    int fl = 0, f;\n    for (int i = cur[u]; i; i = e[i].nx) {\n        cur[u] = i;\n        int to = e[i].v;\n        if (dep[to] == dep[u] + 1 && (f = dfs(to, t, min(l, e[i].w)))) {\n            fl += f;\n            l -= f;\n            e[i ^ 1].w += f;\n            e[i].w -= f;\n            if (!l) break;\n        }\n    }\n    return fl;\n}\nint Dinic(int s, int t) {\n    int maxf = 0;\n    while (bfs(s, t)) {\n        maxf += dfs(s, t , INF);\n    }\n    return maxf;\n}\nint a[MAXN], b[MAXN];\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &c);\n    r = 2 * n + 1;\n    k = 1;\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d\", &x, &y);\n        add(x + n, y, INF);\n        add(y + n, x, INF);\n    }\n    for (int i = 1; i <= c; i++) {\n        scanf(\"%d\", &x);\n        dest[x] = 1;\n        add(r, x, INF);\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dest[i] != 1) {\n            add(i, i + n, 1);\n        }\n        else {\n            add(i, i + n, INF);\n        }\n    }\n    tot = Dinic(r, k);\n    printf(\"%d\\n\", tot);\n    return 0;\n}\n```",
        "postTime": 1546832731,
        "uid": 96570,
        "name": "RiverFun",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2944 \u3010[USACO09MAR]\u5730\u9707\u635f\u59312Earthquake Damage 2\u3011"
    },
    {
        "content": "update\uff1a2022/4/17 \u589e\u52a0\u4e86\u535a\u5ba2\u5730\u5740\n\n\u770b\u5230\u9898\u89e3\u91cc\u9762\u8fd8\u6ca1\u6709\u7528STL vector\u505a\u7684\uff0c\u6240\u4ee5\u6211\u5c31\u6765\u4ea4\u4e00\u53d1\u3002\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P2944)\n\n[\u535a\u5ba2](https://ttzytt.com/2021/08/P2944/)\u4e2d\u89c2\u770b\u4f53\u9a8c\u66f4\u4f73\n\n# 1\uff1a\u8f6c\u5316\u9898\u610f\n\u5728\u4e00\u5f20\u56fe\u4e2d\uff0c\u4e00\u5171\u6709 $p$ \u4e2a\u8282\u70b9\uff0c$c$ \u6761\u53cc\u5411\u8fb9\uff0c\u6709 $n$ \u4e2a\u8282\u70b9\u4e0d\u80fd\u5220\u9664\uff0c\u6c42\u51fa\u6700\u5c11\u9700\u8981\u5220\u9664\u591a\u5c11\u4e2a\u8282\u70b9\u624d\u80fd\u4f7f\u5f97\u8fd9 $n$ \u4e2a\u56fa\u5b9a\u70b9**\u90fd\u5230\u8fbe\u4e0d\u4e86**$1$\u53f7\u8282\u70b9\u3002\n\n# 2\uff1a\u5206\u6790\u548c\u5efa\u6a21\n\u5728\u5b8c\u6210\u9898\u610f\u7684\u8f6c\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u53d1\u73b0\u9898\u76ee\u8981\u8ba9\u6211\u4eec\u5220\u9664\u4e00\u4e9b\u70b9\uff08\u5c3d\u91cf\u5c11\uff09\uff0c\u4f7f\u5f97\u6574\u5f20\u56fe\u53d8\u6210\u4e24\u4e2a\u4e0d\u8fde\u901a\u7684\u90e8\u5206\uff0c\u7f51\u7edc\u6d41\u7b97\u6cd5\u4e2d\u7684\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u8fd9\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u3010\u4e0d\u719f\u6089\u6700\u5927\u6d41\u7b97\u6cd5\u7684\u540c\u5b66\u53ef\u4ee5\u5148\u505a\u4e00\u4e0b\u6a21\u677f\u9898\u3011\n[\u6700\u5927\u6d41\u6a21\u677f](https://www.luogu.com.cn/problem/P3376)\n\n\u4f46\u662f\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u4e00\u822c\u7684\u6700\u5c0f\u5272\u5904\u7406\u7684\u662f \u201c\u5220\u9664\u56fe\u7684\u4e00\u90e8\u5206\u8fb9\u4f7f\u5f97\u56fe\u7684\u4e24\u90e8\u5206\u53d8\u5f97\u4e0d\u8fde\u901a\u201d \u800c\u8fd9\u9053\u9898\u76ee\u8ba9\u6211\u4eec\u5220\u9664\u7684\u662f\u56fe\u4e2d\u4e00\u90e8\u5206\u8282\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u9700\u8981\u628a\u8282\u70b9\u8f6c\u6362\u6210\u8fb9\u3002\n\n\u6211\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u628a\u6bcf\u4e00\u4e2a\u8282\u70b9\u62c6\u5206\u6210\u4e24\u4e2a\u8282\u70b9\uff08\u51fa\u70b9\u548c\u5165\u70b9\uff09\uff0c\u5177\u4f53\u7684\u505a\u6cd5\u53ef\u4ee5\u53c2\u8003 \n[P1345 \u5976\u725b\u7684\u7535\u4fe1Telecowmunication](https://www.luogu.com.cn/problem/P1345)\n\u8fd9\u9053\u9898\u4e2d\u7684\u9898\u89e3\u3002\n\n\u8fd9\u91cc\u6765\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\u8fd9\u79cd\u505a\u6cd5\uff1a\u9996\u5148\uff0c\u6211\u4eec\u628a\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u62c6\u5206\u6210\u4e24\u4e2a\u70b9\uff1a\u51fa\u548c\u5165\u70b9\u3002\n\n\u5e76\u4e14\u8fd9\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6709\u4e00\u6761\u5355\u5411\u8fb9\u8fde\u63a5\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/bwz3xg8l.png)\n\n\u6bcf\u6761\u6307\u5411\u8fd9\u4e2a\u70b9\u7684\u6709\u5411\u8fb9\u90fd\u53ea\u80fd\u8fde\u63a5\u8fd9\u4e2a\u70b9\u7684\u5165\u70b9\u3002\u5e76\u4e14\u4ece\u8fd9\u4e2a\u8282\u70b9\u51fa\u53d1\u7684\u6709\u5411\u8fb9\u90fd\u53ea\u80fd\u4ece\u5b83\u7684\u51fa\u70b9\u51fa\u53d1\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/0jw7wfno.png)\n\n\u90a3\u4e48\uff0c\u628a\u6bcf\u4e2a\u8282\u70b9\u5206\u6210\u51fa\u70b9\u548c\u5165\u70b9\u4e4b\u540e\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5728\u4e00\u822c\u7684\u6700\u5c0f\u5272\u95ee\u9898\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u60f3\u77e5\u9053\u8981\u53d6\u6d88\u6389\u591a\u5c11\u6761\u8fb9\uff0c\u53ef\u4ee5\u4f7f\u5f97\u8fd9\u5f20\u56fe\u7684\u6c47\u70b9\u548c\u6e90\u70b9\u4e0d\u8fde\u901a\uff0c\u5c31\u53ef\u4ee5\u628a\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u8bbe\u7f6e\u4e3a$1$\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ed8\u51fa$1$\u7684\u4ee3\u4ef7\u5220\u9664\u8fd9\u6761\u8fb9\u3002\n\n\u5728\u4ee5\u5272\u70b9\u4e3a\u57fa\u7840\u7684\u6700\u5c0f\u5272\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u8282\u70b9\u4e2d\u8fde\u63a5\u51fa\u70b9\u548c\u5165\u70b9\u7684\u90a3\u6761\u8fb9\u7684\u6743\u503c\u8bbe\u7f6e\u4e3a$1$\u3002\u8fd9\u6837\u5b50\u5982\u679c\u6211\u4eec\u60f3\u8981\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u4ed8\u51fa$1$\u7684\u4ee3\u4ef7\uff0c\u628a\u8fd9\u6761\u8fb9\u5207\u65ad\uff0c\u8fd9\u4e2a\u70b9\u4e5f\u5c31\u88ab\u5220\u9664\u4e86\u3002\n\n\u90a3\u4e48\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u8fd9\u9053\u9898\u76ee\u4e2d\u660e\u786e\u7684\u8bf4\u660e\u4e86\u6709\u4e00\u4e9b\u8282\u70b9\u662f\u4e0d\u80fd\u5220\u9664\u7684\uff0c\u5982\u679c\u90fd\u628a\u6743\u503c\u8bbe\u7f6e\u6210$1$\uff0c\u5982\u4f55\u5904\u7406\u4e0d\u80fd\u5220\u9664\u7684\u8282\u70b9\u5462\uff1f\n\n\u5bf9\u4e8e\u8fd9\u4e9b\u5173\u952e\u8282\u70b9\uff08\u4e0d\u80fd\u5220\u9664\u7684\u70b9\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4ed6\u4eec\u7684\u5185\u90e8\u6743\u503c\u8bbe\u7f6e\u6210 $INF$\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u628a\u8fd9\u4e9b\u70b9\u5220\u6389\u4e86\uff08\u6700\u5c0f\u5272\u7b97\u6cd5\u8ba1\u7b97\u7684\u662f\u4ed8\u51fa\u6700\u5c0f\u7684\u4ee3\u4ef7\u4f7f\u56fe\u53d8\u5f97\u4e0d\u8fde\u901a\uff0c**\u800c\u8bbe\u7f6e\u6210 $INF$ \u4f1a\u8ba9\u5220\u6389\u8fd9\u4e2a\u70b9\u53d8\u5f97\u5f88\u4e0d\u5408\u7b97**\uff09\u3002\n\n\u53e6\u5916\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\uff0c\u9664\u4e86\u9898\u76ee\u4e2d\u8bf4\u7684\u5173\u952e\u70b9\uff0c\u6e90\u70b9\u548c\u6c47\u70b9\u4e5f\u662f\u4e0d\u80fd\u5220\u9664\u7684\uff0c\u6240\u4ee5\u5728\u5efa\u56fe\u7684\u65f6\u5019\u9700\u8981\u5904\u7406\u4e00\u4e0b\u3002\u5e76\u4e14\u9898\u76ee\u8ba9\u6211\u4eec\u6c42\u7684\u662f\u6700\u5c11\u5220\u53bb\u591a\u5c11\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u8fde\u63a5\u8fd9\u4e9b\u8282\u70b9\u7684\u8fb9\u4e5f\u662f\u4e0d\u80fd\u5220\u9664\u7684\uff0c\u9700\u8981\u628a\u5bb9\u91cf\u8bbe\u7f6e\u6210 $INF$\u3002\n\n\u89e3\u51b3\u4e86\u8fb9\u7684\u5bb9\u91cf\u95ee\u9898\u540e\u6211\u4eec\u518d\u6765\u8003\u8651\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a$1$\u53f7\u8282\u70b9\u8bbe\u7f6e\u6210\u6e90\u70b9\uff0c\u628a\u6240\u6709\u5173\u952e\u70b9\u8fde\u63a5\u5230\u6c47\u70b9\u4e0a\uff0c\u8fd9\u6837\u5b50\u6c42\u51fa\u7684\u7b54\u6848\u5c31\u662f\u8ba9\u6240\u6709\u5173\u952e\u70b9\u90fd\u5230\u8fbe\u4e0d\u4e86$1$\u53f7\u8282\u70b9\u7684\u6700\u5c0f\u5220\u9664\u8282\u70b9\u6570\uff08\u5982\u679c\u4efb\u4f55\u4e00\u4e2a\u5173\u952e\u70b9\u53ef\u4ee5\u5230\u8fbe\u4e00\u53f7\u8282\u70b9\uff0c\u90a3\u4e48\u6c47\u70b9\u4e5f\u53ef\u4ee5\u5230\u8fbe$1$\u53f7\u8282\u70b9\uff09\u3002\n\n## \u5efa\u56fe\u6b65\u9aa4\u603b\u7ed3\uff1a\n1. \u628a\u6bcf\u4e2a\u8282\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u4e2d\u95f4\u8fde\u4e00\u6761\u5185\u90e8\u8fb9\n2. \u5bf9\u4e8e\u80fd\u5220\u9664\u7684\u70b9\uff0c\u5185\u90e8\u8fb9\u7684\u5bb9\u91cf\u8bbe\u7f6e\u6210$1$\n3. \u5bf9\u4e8e\u4e0d\u80fd\u5220\u9664\u7684\u70b9\uff0c\u5185\u90e8\u8fb9\u5bb9\u91cf\u8bbe\u7f6e\u6210 $INF$\n4. \u4e0d\u80fd\u5220\u9664\u7684\u8fb9\u5305\u62ec\uff1a\n\t1. \u6e90\u70b9\u7684\u5185\u90e8\u8fb9\n   2. \u6c47\u70b9\u7684\u5185\u90e8\u8fb9\n   3. \u8fde\u63a5\u6bcf\u4e2a\u8282\u70b9\u7684\u8fb9\n   4. \u5173\u952e\u70b9\u7684\u5185\u90e8\u8fb9\n5. \u6e90\u70b9\u8bbe\u7f6e\u6210$1$\u53f7\u8282\u70b9\uff0c\u6c47\u70b9\u8fde\u63a5\u6240\u6709\u7684\u5173\u952e\u70b9\n\n# 3\uff1a\u7b97\u6cd5\n\u6211\u91c7\u7528\u7684\u662fdinic\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6bcf\u6b21\u589e\u5e7f\u53ef\u4ee5\u627e\u5230\u591a\u6761\u589e\u5e7f\u8def\uff0c\u6240\u4ee5\u7b97\u6cd5\u7684\u901f\u5ea6\u4f1a\u6bd4EK\u7b97\u6cd5\u9ad8\u4e00\u4e9b\uff0c\u4e0d\u719f\u6089\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540c\u5b66\u53ef\u4ee5\u53bb\u770b\u4e00\u4e0b\u4e4b\u524d\u63d0\u5230\u7684\u6700\u5927\u6d41\u6a21\u677f\u9898\u7684\u9898\u89e3\u3002\n\n# 4.\u4ee3\u7801\u5b9e\u73b0\u53ca\u7ec6\u8282\n\u5728\u5b9e\u73b0\u62c6\u5206\u8282\u70b9\u8fd9\u4e2a\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e00\u4e2a\u8282\u70b9\u7684\u5165\u70b9\u7684\u7f16\u53f7\u8bbe\u7f6e\u6210\u5b83\u672c\u8eab\u7684\u7f16\u53f7\uff0c\u800c\u51fa\u70b9\u7684\u7f16\u53f7\u5c31\u8bbe\u7f6e\u6210\u672c\u8eab\u7684\u7f16\u53f7 + $p$\uff08\u8282\u70b9\u603b\u6570\uff09\uff0c\u8fd9\u6837\u5b50\u53ef\u4ee5\u786e\u4fdd\u4e0d\u4f1a\u91cd\u590d\u3002\n\n\u5728\u5b9e\u73b0dinic\u7b97\u6cd5\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u5bf9\u53cd\u5411\u8fb9\u7684\u64cd\u4f5c\uff0c\u6211\u4f7f\u7528\u7684\u662fSTL vector\u6765\u5b58\u8fb9\uff0c\u56e0\u6b64\u9700\u8981\u5728node\u7ed3\u6784\u4f53\u4e2d\u52a0\u5165rev\uff08reverse\uff09\u53d8\u91cf\uff0c\u8bb0\u5f55\u5f53\u524d\u8fb9\u7684\u53cd\u5411\u8fb9\u7684\u4e0b\u6807\u3002\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXM = 100000;\nconst int INF = 0x3f3f3f3f;\nstruct node\n{\n    int to, mflow, rev; //to\u8fde\u63a5\u7684\u4e0b\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\n                        //mflow(maxflow)\u8bb0\u5f55\u5f53\u524d\u8fb9\u7684\u5bb9\u91cf\n                        //rev(reverse)\u8bb0\u5f55\u5f53\u524d\u8fb9\u7684\u53cd\u5411\u8fb9\u7684\u4e0b\u6807\n};\nint p, c, n, s, t;\nvector<node> edge[MAXM];\nint g_farm[MAXM];                            //\u5b8c\u597d\u7684\u519c\u573a\uff08\u5173\u952e\u70b9\uff09\nint layer[MAXM];                             //\u6bcf\u4e2a\u8282\u70b9\u7684\u5c42\u6570\nnode assign_node(int to, int mflow, int rev) //\u8d4b\u503c\u51fd\u6570\n{\n    node temp;\n    temp.to = to, temp.mflow = mflow, temp.rev = rev;\n    return temp;\n}\n\nvoid add_edge(int from, int to, int mflow) //\u52a0\u8fb9\n{\n    edge[from].push_back(assign_node(to, mflow, edge[to].size()));   //\u4e0d\u9700\u8981-1\u662f\u56e0\u4e3aedge[to]\u8fd8\u6ca1\u6709push\u8fc7 from\u8fd9\u4e2a\u8282\u70b9\n    edge[to].push_back(assign_node(from, 0, edge[from].size() - 1)); //-1\u662f\u56e0\u4e3avector\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u800c.size()\u4f1a\u8fd4\u56de\u5143\u7d20\u7684\u6570\u91cf\n}\n\nnamespace dinic\n{\n    bool layering() //\u5206\u5c42\n    {\n        bool vis[MAXM];\n        memset(vis, false, sizeof(vis));\n        memset(layer, 0, sizeof(layer));\n        queue<int> q;\n        vis[s] = true;\n        layer[s] = 1;\n        q.push(s);\n        while (!q.empty())\n        {\n            int cur = q.front();\n            q.pop();\n            for (auto nex : edge[cur]) //c++11\u7684\u65b0\u7279\u6027\uff0c\u610f\u601d\u662f\u7528nex\u904d\u5386edge[cur]\u4e2d\u7684\u6240\u6709\u5143\u7d20\n            {\n                if (nex.mflow > 0 && vis[nex.to] == false)\n                {\n                    layer[nex.to] = layer[cur] + 1;\n                    q.push(nex.to);\n                    vis[nex.to] = true;\n                }\n            }\n        }\n        return (layer[t] != 0); //\u8fd4\u56de\u5206\u5c42\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff08\u662f\u5426\u80fd\u4ece\u6e90\u70b9\u5230\u8fbe\u6c47\u70b9\uff09\n    }\n\n    int find_aug_path(int cur, int cur_flow) //\u5bfb\u627e\u589e\u5e7f\u8def\n    {\n        if (cur == t)\n        {\n            return cur_flow;\n        }\n        int ans = 0;\n        for (int i = 0; i < int(edge[cur].size()); i++)\n        {\n            if (edge[cur][i].mflow > 0 && layer[edge[cur][i].to] == layer[cur] + 1)\n            {\n                int nex_flow = find_aug_path(edge[cur][i].to, min(cur_flow, edge[cur][i].mflow));\n                edge[cur][i].mflow -= nex_flow;                            //\u6b63\u5411\u8fb9\n                edge[edge[cur][i].to][edge[cur][i].rev].mflow += nex_flow; //\u53cd\u5411\u8fb9\n                cur_flow -= nex_flow;\n                ans += nex_flow;\n                if (cur_flow <= 0) //\u5982\u679c\u5f53\u524d\u7684\u5bb9\u91cf\u5df2\u7ecf\u4e0d\u591f\u4e86\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u6765\u8282\u7701\u65f6\u95f4\n                {\n                    return ans;\n                }\n            }\n        }\n        return ans;\n    }\n\n    int find_maxflow()\n    {\n        int ans = 0;\n        while (layering())\n        {\n            ans += find_aug_path(s, INF);\n        }\n        return ans;\n    }\n}\n\nvoid input_creat() //\u8f93\u5165\u548c\u5efa\u56fe\n{\n    scanf(\"%d%d%d\", &p, &c, &n);\n    s = 0, t = 2 * p + 1;\n    add_edge(0, 1, INF);     //\u518d\u641e\u4e00\u4e2a\u70b9\u63a5\u5165\u6e90\u70b9\u7684\u5165\u70b9\uff0c\u5bb9\u91cf\u4e5f\u8981\u8bbe\u6210INF\n    add_edge(1, 1 + p, INF); //\u6e90\u70b9\u7684\u5165\u70b9\u548c\u51fa\u70b9\u8bbe\u7f6e\u6210INF\n    for (int i = 1; i <= c; i++)\n    {\n        int from, to;\n        scanf(\"%d%d\", &from, &to);\n        add_edge(from + p, to, INF); //from\u7684\u51fa\u70b9\u548cto\u7684\u5165\u70b9\u76f8\u8fde\n        add_edge(to + p, from, INF); //to\u7684\u51fa\u70b9\u548cfrom\u7684\u5165\u70b9\u76f8\u8fde\n    }\n    for (int i = 1; i <= n; i++)\n    { //n\u662f\u4e0d\u80fd\u5272\u7684\u70b9\n        int point;\n        scanf(\"%d\", &point);\n        add_edge(point + p, t, INF);     //\u628a\u6240\u6709\u5173\u952e\u70b9\u8fde\u63a5\u5230\u6c47\u70b9\n        add_edge(point, point + p, INF); //\u6240\u6709\u5173\u952e\u70b9\u7684\u5185\u90e8\u8fb9\u7684\u5bb9\u91cf\u90fd\u8981\u8bbe\u6210INF\n        g_farm[point] = 1;               //\u6807\u8bb0\u5173\u952e\u70b9\n    }\n    for (int i = 2; i <= p; i++)\n    {\n        if (!g_farm[i])\n        {\n            add_edge(i, i + p, 1); //\u9664\u4e86\u5173\u952e\u70b9\u7684\u5176\u4ed6\u70b9\u53ef\u4ee5\u5220\uff0c\u6240\u4ee5\u5185\u90e8\u8fb9\u7684\u5bb9\u91cf\u8bbe\u62101\n        }\n    }\n}\n\nmain()\n{\n    input_creat();\n    printf(\"%d\", dinic::find_maxflow());\n    system(\"pause\");\n}\n```\n\n\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u95ee\u9898\u53ef\u80fd\u6bd4\u8f83\u591a\uff0c\u5982\u679c\u770b\u5230\u9898\u89e3\u6709\u4ec0\u4e48\u4e0d\u5bf9\u7684\u6b22\u8fce\u5728\u8bc4\u8bba\u533a\u63d0\u51fa\uff0c\u6216\u8005\u79c1\u4fe1\u6211\uff0c\u6709\u770b\u4e0d\u61c2\u7684\u5730\u65b9\u4e5f\u6b22\u8fce\u63d0\u95ee\u3002\u6700\u540e\uff0c\u5982\u679c\u8fd9\u7bc7\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\u5c31\u70b9\u4e2a\u8d5e\u5427\uff0c\u6216\u8005\u5728\u8bc4\u8bba\u533a\u4e2d\u4ea4\u6d41\u4f60\u7684\u770b\u6cd5\u3002",
        "postTime": 1630344352,
        "uid": 394488,
        "name": "tzyt",
        "ccfLevel": 0,
        "title": "P2944\u9898\u89e3"
    },
    {
        "content": "[P2944 [USACO09MAR]Earthquake Damage 2 G](https://www.luogu.com.cn/problem/P2944)\n\n~~\u6c34\u9898\u89e3ing~~\n\n\u9898\u610f\uff1a$ P $ \u4e2a\u70b9\uff0c$ N $ \u4e2a\u56fa\u5b9a\u70b9\uff0c\u7ed9\u51fa\u4e00\u4e9b\u53cc\u5411\u8fb9\uff0c\u6c42\u6700\u5c11\u5272\u6389\u591a\u5c11\u70b9\u4f7f\u5f97 $ 1 $ \u53f7\u70b9\u4e0e\u5176\u4ed6\u70b9\u4e0d\u8fde\u901a\u3002\n\n\u9996\u5148\u5e38\u89c4\u5957\u8def\uff0c\u5272\u70b9\u5c31\u4e00\u5b9a\u9700\u8981\u62c6\u70b9\uff0c\u6240\u4ee5\u5c06\u6bcf\u4e2a\u70b9\u62c6\u4e3a\u4e24\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\uff08\u8bbe\u4e3a $ x $\uff09\u662f\u56fa\u5b9a\u70b9\uff08\u4e0d\u53ef\u5272\u70b9\uff09\uff0c\u8fde\u8fb9\uff1a$ x \\rightarrow x + p $\uff0c\u5bb9\u91cf\u4e3a $ \\infty $\uff0c\u548c\u8fd9\u4e2a\u70b9\u7684\u51fa\u70b9 $ x + p \\rightarrow $ \u6c47\u70b9 $ T $\uff0c\u5bb9\u91cf\u4e3a $ \\infty $\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u70b9\u4e0d\u662f\u56fa\u5b9a\u70b9\uff0c\u8fde\u8fb9\uff1a$ x \\rightarrow x + p $\uff0c\u5bb9\u91cf\u4e3a $ 1 $\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u8fb9\uff0c\u7531\u4e8e\u8fb9\u4e0d\u53ef\u5272\uff0c\u6240\u4ee5\u6bcf\u6761\u8fb9\u7684\u8d77\u70b9\u7684\u51fa\u70b9\u5411\u7ec8\u70b9\u7684\u5165\u70b9\u8fde\u8fb9\uff0c\u8868\u793a\uff1a $ x + p \\rightarrow y $\uff0c\u5bb9\u91cf\u4e3a $ \\infty $\uff0c\u8bb0\u4f4f\u662f\u53cc\u5411\uff0c\u6240\u4ee5\u90fd\u8981\u8fde\u3002\n\n\u6700\u540e\u8003\u8651\u6e90\u70b9\uff0c\u76f4\u63a5\u5411 $ 1 $ \u53f7\u70b9\u8fde\u5bb9\u91cf\u4e3a $ \\infty $ \u5373\u53ef\u3002\n\n\u81f3\u4e8e\u8fd9\u6837\u8fde\u8fb9\u7684\u539f\u7406\uff0c\u975e\u5e38\u5957\u8def\u3002$ \\infty $ \u8868\u793a\u4e3a\u4e0d\u53ef\u5272\uff0c$ 1 $ \u8868\u793a\u53ef\u4ee5\u5272\u3002\n\n\u6700\u540e\u5229\u7528\u6700\u5c0f\u5272\u6700\u5927\u6d41\u5b9a\u7406\u6c42\u51fa\u6700\u5c0f\u5272\u3002\n\nCode\n```cpp\n# include <iostream>\n# include <cstdio>\n# include <cstring>\n# include <queue>\n\nusing namespace std;\nconst int N = 1e6 + 5;\nconst int M = 2e6 + 5;\nconst int inf = 0x3f3f3f3f;\n\ntypedef struct {\n\tint x , y , z , next;\n} Edge;\nEdge edge[M];\nint elast[N] , E = 1;\nvoid add(int x , int y , int z) {\n\tE ++;\n\tedge[E].x = x;\n\tedge[E].y = y;\n\tedge[E].z = z;\n\tedge[E].next = elast[x];\n\telast[x] = E;\n}\nint S , T;\nint dis[N] , cnt[N];\nvoid bfs(int start) {\n\tqueue<int> q;\n\tq.push(start);\n\tdis[start] = 0;\n\tcnt[S] = 1;\n\twhile (!q.empty()) {\n\t\tint cur = q.front();\n\t\tq.pop();\n\t\tfor (int i = elast[cur] ; i ; i = edge[i].next) {\n\t\t\tint v = edge[i].y;\n\t\t\tif (dis[v] != -1) continue;\n\t\t\tdis[v] = dis[cur] + 1;\n\t\t\tq.push(v);\n\t\t\tcnt[dis[v]] ++;\n\t\t}\n\t}\n}\nint cur[N];\nint dfs(int u , int flow) {\n\tif (u == T) return flow;\n\tint delta = 0;\n\tfor (int i = cur[u] ; i ; i = edge[i].next) {\n\t\tcur[u] = i;\n\t\tint v = edge[i].y;\n\t\tif (edge[i].z > 0 && dis[u] == dis[v] + 1) {\n\t\t\tint temp = dfs(v , min(flow - delta , edge[i].z));\n\t\t\tedge[i].z -= temp;\n\t\t\tedge[i ^ 1].z += temp;\n\t\t\tdelta += temp;\n\t\t\tif (delta == flow) return delta;\n\t\t}\n\t}\n\tif (dis[S] >= T + 1) return delta;\n\tcur[u] = elast[u];\n\tif (-- cnt[dis[u]] == 0) dis[S] = T + 1;\n\tcnt[++ dis[u]] ++;\n\treturn delta;\n}\nint Isap() {\n\tint ans = 0;\n\tmemset(cnt , 0 , sizeof cnt);\n\tmemset(dis , -1 , sizeof dis);\n\tbfs(T);\n\tfor (int i = 0 ; i <= T ; i ++) {\n\t\tcur[i] = elast[i];\n\t}\n\twhile (dis[S] < T + 1) ans += dfs(S , inf);\n\treturn ans;\n}\nint p , n , m;\nint x , y;\nbool st[N];\nint main() {\n\tcin >> p >> m >> n;\n\tS = 0 , T = p << 1 | 1;\n\tadd(S , 1 , inf);\n\tadd(1 , S , 0);\n\tadd(1 , p + 1 , inf);\n\tadd(p + 1 , 1 , 0);\n\tfor (int i = 1 ; i <= m ; i ++) {\n\t\tscanf(\"%d%d\" , &x , &y);\n\t\tadd(x + p , y , inf) , add(y , x + p , 0);\n\t\tadd(y + p , x , inf) , add(x , y + p , 0);\n\t}\n\tfor (int i = 1 ; i <= n ; i ++) {\n\t\tscanf(\"%d\" , &x);\n\t\tst[x] = true;\n\t\tadd(x , x + p , inf) , add(x + p , x , 0);\n\t\tadd(x + p , T , inf) , add(T , x + p , 0);\n\t}\n\tfor (int i = 2 ; i <= p ; i ++) {\n\t\tif (!st[i]) add(i , i + p , 1) , add(i + p , i , 0); \n\t}\n\tprintf(\"%d\\n\" , Isap());\n\treturn 0;\n}\n```",
        "postTime": 1628756863,
        "uid": 335477,
        "name": "ker_xyxyxyx_xxs",
        "ccfLevel": 0,
        "title": "P2944 [USACO09MAR]Earthquake Damage 2 G"
    },
    {
        "content": "> 11.29 \u4fee\u6539\u6392\u7248\n\n\u95ee\u9898\u8f6c\u5316\uff1a\u5df2\u786e\u5b9a\u51e0\u4e2a\u70b9\u4e0d\u5272\uff0c\u95ee\u6700\u5c11\u5272\u51e0\u4e2a\u70b9\u4f7f\u56fe\u5206\u6210\u4e24\u90e8\u5206\n\n\u4e8e\u662f\u8003\u8651\u6700\u5c0f\u5272\n\n\u5efa\u56fe\uff0c\u56e0\u4e3a\u6700\u5c0f\u5272\u662f\u5272\u8fb9\uff0c\u6240\u4ee5\u62c6\u70b9\n\n\u5373\u628a\u6bcf\u4e2a\u70b9\u62c6\u4e3a\u5165\u70b9\u548c\u51fa\u70b9\n\n\u786e\u5b9a\u7684\u70b9\uff0c\u5165\u70b9\u51fa\u70b9\u4e4b\u95f4\u8fde\u8fb9\u4e3a$\u221e$\n\n\u4fdd\u8bc1\u6700\u5c0f\u5272\u96c6\u5408\u4e2d\u4e0d\u5305\u542b\u8fd9\u4e2a\u70b9\uff0c\u5e76\u4e14\u4e0e\u8d85\u6c47\u70b9\u8fde\u8fb9\u4e3a$\u221e$\n\n\u4fdd\u8bc1\u7ecf\u8fc7\u786e\u5b9a\u70b9\n\n\u672a\u786e\u5b9a\u70b9\uff0c\u5165\u70b9\u51fa\u70b9\u4e4b\u95f4\u8fde\u8fb9\u4e3a$1$\n\n\u6700\u5c0f\u5272\u96c6\u5408\u4e2d\u53ef\u4ee5\u5305\u542b\u8fd9\u4e2a\u70b9\n\n\u6ce8\u610f\u662f\u53cc\u5411\u8fb9\uff0c\u8fd8\u6709$1$\u70b9\u4e5f\u662f\u786e\u5b9a\u70b9\n\n\u4ee3\u7801\uff1a\n```cpp\n# include<iostream>\n# include<cstdio>\n# include<cstring>\n# include<queue>\nusing namespace std;\nconst int t=500000;\nstruct q{\n    int x,y,dis;\n}c[6000001];\nint p,C,n,num;\nint h[600001],d[600001];\nbool use[3001];\nvoid add(int x,int y,int dis)\n{\n    c[num].x=h[x];\n    c[num].y=y;\n    c[num].dis=dis;\n    h[x]=num++;\n}\nbool bfs()\n{\n    queue<int> qu;\n    qu.push(0);\n    memset(d,0,sizeof(d));\n    d[0]=1;\n    while(!qu.empty())\n    {\n        int tt=qu.front();\n        qu.pop();\n        for(int i=h[tt];i;i=c[i].x)\n          if(!d[c[i].y]&&c[i].dis)\n          {\n              d[c[i].y]=d[tt]+1;\n              qu.push(c[i].y);\n          }\n    }\n    return d[t];\n}\nint dfs(int x,int dix)\n{\n    if(x==t) return dix;\n    int sum=0;\n    for(int i=h[x];i;i=c[i].x)\n      if(d[c[i].y]==d[x]+1&&c[i].dis)\n      {\n          int dis=dfs(c[i].y,min(dix,c[i].dis));\n          if(dis)\n          {\n              sum+=dis;\n              dix-=dis;\n              c[i].dis-=dis;\n              c[i^1].dis+=dis;\n              if(!dix) break;\n        }\n      }\n    return sum;\n}\nint dinic()\n{\n    int tot=0;\n    while(bfs())\n    tot+=dfs(0,1e8);\n    return tot;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&p,&C,&n);\n    add(1,0,0);\n    add(0,1,1e8);\n    add(1+p,1,0);\n    add(1,1+p,1e8);\n    for(int i=1;i<=C;i++)\n      {\n          int x,y;\n          scanf(\"%d%d\",&x,&y);\n          add(x,y+p,0);\n          add(y+p,x,1e8);\n          add(y,x+p,0);\n          add(x+p,y,1e8);\n      }\n    for(int i=1;i<=n;i++)\n      {\n          int x;\n          scanf(\"%d\",&x);\n          use[x]=1; \n          add(x+p,x,0);\n          add(x,x+p,1e8);\n        add(t,x+p,0);\n          add(x+p,t,1e8);\n      }\n    for(int i=2;i<=p;i++)\n      if(!use[i])\n      {\n          add(i+p,i,0);\n          add(i,i+p,1);\n      }\n    printf(\"%d\",dinic());\n    return 0;\n}\n```",
        "postTime": 1513854330,
        "uid": 49206,
        "name": "Dispwnl",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2944 \u3010[USACO09MAR]\u5730\u9707\u635f\u59312Earthquake Damage 2\u3011"
    },
    {
        "content": "\u518d\u6b21\u52a0\u6df1\u5bf9\u6700\u5c0f\u5272\u7684\u7406\u89e3\u3002\n\n### \u601d\u8def\n\n\u9996\u5148\u8003\u8651\u5982\u4f55\u53bb\u5efa\u6a21\u3002\n\n\u5bf9\u4e8e\u6700\u5c11\u5272\u70b9\u7684\u95ee\u9898\uff0c\u9996\u5148\u80af\u5b9a\u8981\u60f3\u5230\u7528\u6700\u5c0f\u5272\u53bb\u505a\uff0c\u7ecf\u9a8c\u544a\u8bc9\u6211\u4eec\uff0c\u5fc5\u987b\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u8bb2\u6700\u5c11\u5272\u70b9\u95ee\u9898\u8f6c\u5316\u4e3a\u6700\u5c0f\u5272\u8fb9\u5373\u6700\u5c0f\u5272\u95ee\u9898\u3002\n\n\u4e0d\u8fc7\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u4e0d\u540c\u4e4b\u5904\uff1a\u6709\u4e9b\u70b9\u662f\u4e0d\u80fd\u88ab\u5220\u9664\u7684\u3002\n\u8fd9\u53c8\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u8003\u8651\u6700\u5c0f\u5272\u6a21\u578b\u4e2d\uff0c\u6e90\u70b9\u5411\u8282\u70b9 $1$ \u8fde\u8fb9\u7684\u65b9\u5f0f\uff1a\n\n```cpp\nadd(s,1,INF),add(1,s,0);\n```\n\n\u6ca1\u9519\uff0c\u53ea\u8981\u628a\u8fb9\u6743\u8bbe\u7f6e\u4e3a $\\infty$ \u5c31\u53ef\u4ee5\u4ee3\u8868\u8fd9\u4e2a\u70b9\u4e0d\u80fd\u88ab\u5272\u6389\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u6765\u8003\u8651\u56fe\u4e2d\u7684\u8fb9\u7684\u95ee\u9898\u3002\u65e2\u7136\u95ee\u9898\u8981\u6c42\u7684\u662f\u5272\u70b9\u800c\u4e0d\u662f\u5272\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u628a\u56fe\u4e2d\u7684\u8fb9\u8fb9\u6743\u540c\u6837\u8bbe\u7f6e\u6210\u4e3a $\\infty$ \u5c31\u53ef\u4ee5\u4e86\uff0c\u8868\u793a\u8fd9\u6761\u8fb9\u53ea\u662f\u8d77\u5230\u4e86\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9\u7684\u4f5c\u7528\uff0c\u6ce8\u610f\u5e94\u8be5\u662f\u4e00\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde\u5411\u53e6\u5916\u4e00\u4e2a\u70b9\u7684\u5165\u70b9\u3002\n\n\u53e6\u5916\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\uff0c\u8282\u70b9 $1$\u3001\u6e90\u70b9\u4ee5\u53ca\u6c47\u70b9\u662f\u4e0d\u80fd\u88ab\u5272\u6389\u7684\u3002\n\n### \u5efa\u56fe\u7684\u65b9\u5f0f\n\n1. \u6e90\u70b9\u4e0e $1$ \u53f7\u8282\u70b9\u76f8\u8fde\uff0c$1$ \u8282\u70b9\u7684\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\uff0c\u8fb9\u6743\u4e3a $\\infty$\uff0c\u8868\u793a\u8282\u70b9 $1$ \u4e0d\u80fd\u88ab\u5272\u6389\u3002\n2. \u6309\u7167\u56fe\u4e2d\u7ed9\u5b9a\u7684\u8fb9\uff0c\u8fde\u8fb9\u6743\u4e3a $\\infty$ \u7684\u8fb9\u3002\n3. \u5bf9\u4e8e\u4e0d\u80fd\u5272\u6389\u7684\u70b9\uff0c\u4ece\u8fd9\u4e2a\u8282\u70b9\u7684\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\u6743\u4e3a $\\infty$ \u7684\u8fb9\uff0c\u540c\u65f6\u51fa\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\u6743\u4e3a $\\infty$ \u7684\u8fb9\u3002\n4. \u53ef\u4ee5\u88ab\u5272\u6389\u7684\u8fb9\uff0c\u4ece\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n\n### \u6b63\u786e\u6027\n\n\u6211\u4eec\u53ea\u5c06\u6e90\u70b9\u548c\u8282\u70b9 $1$ \u8fde\u63a5\uff0c\u53ea\u5c06\u4e0d\u80fd\u88ab\u5272\u6389\u7684\u70b9\u548c\u6c47\u70b9\u8fde\u63a5\uff0c\u7531\u4e8e\u4ed6\u4eec\u4e4b\u95f4\u7684\u8fb9\u6743\u4e3a $\\infty$\uff0c\u6240\u4ee5\u8bf4\u8282\u70b9 $1$ \u548c\u90a3\u4e9b\u4e0d\u80fd\u88ab\u5272\u6389\u7684\u70b9\u4e00\u5b9a\u662f\u4f1a\u88ab\u5212\u5206\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u96c6\u5408\u4e2d\u7684\u3002\n\nCode\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint sss=0,www=1;\n\tchar chh=getchar();\n\twhile(chh<'0'||chh>'9'){\n\t\tif(chh=='-') www=-1;\n\t\tchh=getchar();\n\t}\n\twhile(chh>='0'&&chh<='9'){\n\t\tsss=sss*10+chh-'0';\n\t\tchh=getchar();\n\t}\n\treturn sss*www;\n}\nint n,m,q,s,t;\nbool iscut[6005];\nint depth[6005];\nint head[6005],to[1000005],nxt[1000005],val[1000005],tot=1;\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tval[tot]=w;\n\tnxt[tot]=head[u];\n\thead[u]=tot;\n}\nbool bfs(){\n\tmemset(depth,0,sizeof depth); depth[s]=1;\n\tqueue<int> q; q.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front(); q.pop();\n\t\tfor(register int i=head[x];i;i=nxt[i]){\n\t\t\tint u=to[i];\n\t\t\tif(val[i]&&!depth[u]){\n\t\t\t\tdepth[u]=depth[x]+1;\n\t\t\t\tq.push(u);\n\t\t\t}\n\t\t}\n\t}\n\treturn depth[t];\n}\nint dfs(int now,int flow){\n\tif(now==t) return flow;\n\tint out_flow=0;\n\tfor(register int i=head[now];i&&flow;i=nxt[i]){\n\t\tint u=to[i];\n\t\tif(val[i]&&depth[u]==depth[now]+1){\n\t\t\tint tmp=dfs(u,min(val[i],flow));\n\t\t\tval[i]-=tmp; val[i^1]+=tmp;\n\t\t\tflow-=tmp; out_flow+=tmp;\n\t\t}\n\t}\n\tif(out_flow==0) depth[now]=0;\n\treturn out_flow;\n}\nint Dinic(){\n\tint ans=0;\n\twhile(bfs()) ans+=dfs(s,1e9);\n\treturn ans;\n}\nint main(){\n\tn=read(),m=read(),q=read();\n\ts=0,t=2*n+1;\n\tadd(s,1,1e9); add(1,s,0);//\u6e90\u70b9\u4e0d\u80fd\u88ab\u5272\u6389 \n\tadd(1,n+1,1e9); add(n+1,1,0);//1\u8282\u70b9\u4e0d\u80fd\u88ab\u5272\u6389 \n\tint u,v;\n\tfor(register int i=1;i<=m;i++){\n\t\t//\u56fe\u4e2d\u6240\u7ed9\u7684\u8fb9 \n\t\tu=read(),v=read();\n\t\tadd(u+n,v,1e9); add(v,u+n,0);\n\t\tadd(v+n,u,1e9); add(u,v+n,0);\n\t}\n\tfor(register int i=1;i<=q;i++){\n\t\tu=read(); iscut[u]=true;\n\t\tadd(u,u+n,1e9); add(u+n,u,0);\n\t\tadd(u+n,t,1e9); add(t,u+n,0);\n\t}\n\tfor(register int i=1;i<=n;i++){\n\t\tif(!iscut[i]){//\u53ef\u4ee5\u88ab\u5272\u6389 \n\t\t\tadd(i,i+n,1); add(i+n,i,0);\n\t\t}\n\t}\n\tprintf(\"%d\",Dinic());\n    return 0;\n}\n```",
        "postTime": 1646731536,
        "uid": 367316,
        "name": "Foreverxxx",
        "ccfLevel": 0,
        "title": "P2944 [USACO09MAR]Earthquake Damage 2 G \u9898\u89e3"
    },
    {
        "content": "## \u3010\u9898\u610f\u3011\n\n\u7ed9\u51fa\u56fe\uff0c\u4e00\u4e9b\u70b9\u88ab\u6467\u6bc1\uff0c\u5df2\u77e5\u67d0\u4e9b\u70b9\u4e0e1\u53f7\u70b9\u4e0d\u8054\u901a\u4e14\u6ca1\u6709\u88ab\u6467\u6bc1\uff0c\u95ee\u6700\u5c11\u6709\u51e0\u4e2a\u70b9\u88ab\u6467\u6bc1\u3002\n\n## \u3010\u5206\u6790\u3011\n\n\u628a $1$ \u53f7\u70b9\u548c\u5931\u53bb\u8054\u7cfb\u7684\u70b9\u770b\u6210\u4e24\u4e2a\u70b9\u96c6\u3002\n\n\u5176\u5b9e\u5c31\u662f\u6c42\u5c06\u4e24\u4e2a\u70b9\u96c6\u5206\u5f00\u7684\u6700\u5c0f\u5272\u3002\n\n\u6700\u5c0f\u5272 $=$ \u6700\u5927\u6d41\u3002\n\n\u8003\u8651\u5982\u4f55\u5efa\u56fe\u3002\n\n------------\n\n\u9996\u5148\uff0c\u88ab\u6467\u6bc1\u7684\u662f\u70b9\uff0c\u975e\u5e38\u5957\u8def\u5730\uff0c\u5c06\u6bcf\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\u3002\n\n\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\uff0c\u82e5\u8be5\u70b9\u53ef\u4ee5\u88ab\u6467\u6bc1\uff0c\u5219\u6d41\u91cf\u662f $1$\uff0c\u5426\u5219\u662f $\\inf$\uff0c\u8868\u793a\u6467\u6bc1\u8fd9\u4e2a\u70b9\u7684\u4ee3\u4ef7\u3002\n\n\u7136\u540e\u6839\u636e\u539f\u56fe\u8fde\u8fb9\uff0c\u82e5\u5b58\u5728\u8fb9 $(x,y)$\uff0c\u5219\u8fde\u63a5 $(x_{out},y_{in},\\inf)$ \u548c $(y_{out},x_{in},\\inf)$\u3002\n\n\u6e90\u70b9 $S$ \u8bbe\u4e3a $1$ \u53f7\u70b9\u7684\u51fa\u70b9\uff0c\u5931\u8054\u70b9\u7684\u51fa\u70b9\u5411\u6c47\u70b9 $T$ \u8fde\u8fb9\uff0c\u6d41\u91cf\u4e5f\u90fd\u4e3a $\\inf$\u3002\n\n\u7528Dinic\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n## \u3010\u7b97\u6cd5\u3011\n\n\u6700\u5c0f\u5272\u6700\u5927\u6d41\n\n## \u3010\u4ee3\u7801\u3011\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=3005,maxt=maxn*2,maxm=2e4+5,maxe=maxn*2+maxm*4,INF=1<<30;\nint p,c,n;\nint read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nstruct Dinic{\n    int S,T;\n    struct edge{\n        int to,nxt,f;\n    }e[maxe];\n    int tot,lnk[maxt];\n    void add_e(int x,int y,int f){\n        e[++tot]=(edge){y,lnk[x],f};\n        lnk[x]=tot;\n    }\n    void ADD(int x,int y,int f){\n        add_e(x,y,f),add_e(y,x,0);\n    }\n    int que[maxt],cur[maxt],dep[maxt];\n    bool BFS(){\n        int hed=0,til=1;\n        for(int i=1;i<=T;i++) cur[i]=lnk[i],dep[i]=INF;\n        que[1]=S,dep[S]=0;\n        while(hed!=til){\n            int x=que[++hed];\n            for(int j=lnk[x];j;j=e[j].nxt){\n                int y=e[j].to;\n                if(dep[y]==INF&&e[j].f){\n                    dep[y]=dep[x]+1;\n                    que[++til]=y;\n                }\n            }\n        }\n        return dep[T]!=INF;\n    }\n    int DFS(int x,int limit){\n        if(!limit||x==T) return limit;\n        int flow=0,f;\n        for(int j=cur[x];j;j=e[j].nxt){\n            cur[x]=j;\n            int y=e[j].to;\n            if(dep[y]==dep[x]+1&&(f=DFS(y,min(limit,e[j].f)))){\n                e[j].f-=f;\n                e[j^1].f+=f;\n                flow+=f;\n                limit-=f;\n            }\n            if(!limit) return flow;\n        }\n        return flow;\n    }\n    int calc(){\n        int ans=0;\n        while(BFS()) ans+=DFS(S,INF);\n        return ans;\n    }\n}D;\nbool vis[maxn];\nint main(){\n \tfreopen(\"P2944.in\",\"r\",stdin);\n \tfreopen(\"P2944.out\",\"w\",stdout);\n\tp=read(),c=read(),n=read(); //\u6ce8\u610fn\u3001p\n\tD.S=1+p,D.T=2*p+1,D.tot=1;\n\tfor(int i=1;i<=c;i++){\n\t\tint x=read(),y=read();\n\t\tD.ADD(x+p,y,INF),D.ADD(y+p,x,INF);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint x=read();\n\t\tD.ADD(x+p,D.T,INF); \n\t\tvis[x]=1;\n\t}\n\tfor(int i=2;i<=p;i++){\n\t\tif(vis[i]) D.ADD(i,i+p,INF);\n\t\telse D.ADD(i,i+p,1); \n\t}\n\tprintf(\"%d\\n\",D.calc());\n\treturn 0;\n} \n```\n",
        "postTime": 1626865979,
        "uid": 116251,
        "name": "\u7834\u5fc6",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2944 \u3010[USACO09MAR]Earthquake Damage 2 G\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u4f60\u4e00\u4e2a\u542b\u6709 $n$ \u4e2a\u70b9\uff0c $m$ \u6761\u8fb9\uff0c $num$ \u4e2a\u5173\u952e\u70b9\u3002\u7136\u540e\u5220\u53bb\u4e00\u90e8\u5206\u70b9\u8bd5\u8282\u70b9 $1$ \u4e0e\u8fd9 $num$ \u4e2a\u5173\u952e\u70b9\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5176\u4e2d\u5173\u952e\u70b9\u5e76\u4e0d\u53ef\u4ee5\u5220\u53bb\u3002\u6c42\u6700\u5c11\u4ee3\u4ef7\u3002[QWQ](https://www.luogu.com.cn/blog/xzc/solution-p2944)\n## \u5206\u6790\n\u8fd9\u4e2a\u662f\u4e00\u5f20\u56fe\uff0c\u5e76\u975e\u662f\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u5e76\u4e0d\u80fd\u91c7\u7528 [\u8fd9\u9053\u9898](https://www.luogu.com.cn/problem/P3931) \u7684 $dp$ \u65b9\u6cd5\u5904\u7406\u3002\n\n- \u65b9\u6cd5\u9009\u62e9\n\n\u53ef\u4ee5\u8003\u8651\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u3002\u8ba9\u8d85\u7ea7\u6c47\u70b9\u8fde\u63a5\u8282\u70b9 $1$ \uff0c\u8d85\u7ea7\u6e90\u8fde\u63a5\u8fd9\u51e0\u4e2a\u5173\u952e\u70b9\u3002\u8dd1\u6700\u5927\u6d41\u5c31\u597d\u4e86\u3002\n\n- \u56fe\u5f62\u5efa\u6a21\n\n\u62c6\u70b9\u65f6\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\u3002\u800c\u5bf9\u4e8e\u5173\u952e\u70b9\u4e0d\u53ef\u4ee5\u5220\u53bb\uff0c\u76f4\u63a5\u5728\u62c6\u70b9\u7684\u65f6\u5019\uff0c\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $inf$ \u7684\u8fb9\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n\tint x = 0,f = 0;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='0')f=1;ch=getchar();}\n\twhile(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n\treturn f?-x:x;\n}\nconst int N = 101010;\nstruct Edge{int to,nxt,flow,cap;}e[N<<1];\nint head[N],cur[N],S,T,n,m,dis[N],cnt = 1;\nqueue<int> Q;\nvoid add(int x,int y,int cap)\n{\n\te[++cnt].cap = cap;e[cnt].flow = 0;e[cnt].nxt = head[x];e[cnt].to = y;head[x] = cnt;\n\te[++cnt].cap = 0;  e[cnt].flow = 0;e[cnt].nxt = head[y];e[cnt].to = x;head[y] = cnt;\n}\nbool Bfs(int s,int t)\n{\n\twhile(Q.size()) Q.pop();\n\tmemset(dis,0,sizeof(dis));\n\tdis[s] = 1;Q.push(s);\n\twhile(Q.size())\n\t{\n\t\tint x = Q.front();Q.pop();\n\t\tfor(int i = head[x];i;i = e[i].nxt)\n\t\t{\n\t\t\tint y = e[i].to;\n\t\t\tif(!dis[y] && e[i].cap > e[i].flow)\n\t\t\t{\n\t\t\t\tdis[y] = dis[x] + 1;\n\t\t\t\tQ.push(y);\n\t\t\t\tif(dis[t]){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint Dfs(int x,int a,int t)\n{\n\tif(x == t || a == 0) return a;\n\tint flow = 0,f = 0;\n\tfor(int i = cur[x];i;i = e[i].nxt)\n\t{\n\t\tint y = e[i].to;\n\t\tif(dis[y] == dis[x] + 1 && ((f = (Dfs(y,min(a,e[i].cap - e[i].flow),t))) > 0))\n\t\t{\n\t\t\ta -= f;\n\t\t\tflow += f;\n\t\t\te[i].flow += f;\n\t\t\te[i^1].flow -= f;\n\t\t\tif(a == 0) break;\n\t\t\tcur[x] = e[i].nxt;\n\t\t}\n\t}\n\treturn flow;\n}\nint main()\n{\n\tfreopen(\"P2944_2.in\",\"r\",stdin);\n\tn = read();m = read();\n\tint num = read();\n\tT = 1+n;S = n+n+1;\n\tfor(int i = 1;i <= n;i++) \n\t{\n\t\tif(i != 1) add(i,i+n,1);\n\t\telse add(i,i+n,0x3f3f3f3f);\n\t}\n\tfor(int i = 1;i <= m;i++)\n\t{\n\t\tint a = read(),b = read();\n\t\tadd(a+n,b,1);\n\t\tadd(b+n,a,1);\n\t}\n\tfor(int i = 1;i <= num;i++)\n\t{\n\t\tint a = read();\n\t\tadd(S,a,0x3f3f3f3f);\n\t\tadd(a,a+n,0x3f3f3f3f);\n\t}\n\tint maxflow = 0;\n\twhile(Bfs(S,T))\n\t{\n\t\tfor(int i = 1;i <= S;i++) cur[i] = head[i]; \n\t\tmaxflow += Dfs(S,0x3f3f3f3f,T);\n\t}\n\tcout<<maxflow<<endl;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1596020182,
        "uid": 227824,
        "name": "JK_LOVER",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2944 \u3010[USACO09MAR]Earthquake Damage 2 G\u3011"
    },
    {
        "content": "\u8be6\u89c1\u672c\u4eba\u535a\u5ba2\uff1a<http://www.cnblogs.com/huangdalaofighting/p/6915555.html\n\n\u4e00\u9053\u6bd4\u8f83\u7ecf\u5178\u7684\u6700\u5c0f\u5272\uff0c\u9996\u5148\u56e0\u4e3a\u6bcf\u6b21\u5220\u9664\u7684\u662f\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u8981\u5c06\u6bcf\u4e2a\u70b9\u62c6\u5f00\uff0c\u5c061\u8282\u70b9\u548c\u6253\u7535\u8bdd\u8fc7\u6765\u7684\u51e0\u4e2a\u8282\u70b9\u6b8b\u91cf\u8bbe\u4e3a\u6700\u5927\u503c\uff0c\u5176\u4f59\u7684\u4e3a1\u3002\uff08\u4e3a\u4e86\u8ba9\u5272\u8fb9\u843d\u5728\u53ef\u4ee5\u53bb\u6389\u7684\u70b9\u4e0a\uff09\u8fd9\u6837\u5c31\u53ef\u4ee5\u5c06\u53bb\u70b9\u8f6c\u5316\u4e3a\u5272\u8fb9\u3002\n\n\u7136\u540e\u6839\u636e\u56fe\u7684\u8fde\u63a5\u65b9\u5f0f\uff0c\u82e5\u8282\u70b9x\u88ab\u5206\u4e3ax1\u548cx2\uff0c\u8282\u70b9y\u88ab\u5206\u4e3ay1\u548cy2\u3002\u82e5x\u548cy\u8fde\u63a5\uff0c\u5219\u5c06x2\u8fdey1\uff0cy2\u8fdex1\uff0c\u6b8b\u91cf\u90fd\u4e3a\u6700\u5927\u503c\u3002\n\n\u7136\u540e\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<cmath>\n#include<algorithm>\n#include<queue>\n#include<stack>\n#include<ctime>\n#include<vector>\n#define inf (2e8)\nusing namespace std;\nint n,m,l;\nstruct node\n{\n    int next,to,cap;\n}edge[200001];\nint head[100001],size=1,a[190001];\nvoid putin(int from,int to,int cap)\n{\n    size++;\n    edge[size].next=head[from];\n    edge[size].to=to;\n    edge[size].cap=cap;\n    head[from]=size;\n}\nvoid in(int from,int to,int cap)\n{\n    putin(from,to,cap);\n    putin(to,from,0);\n}\nint dist[100001],numbs[100001];\nvoid bfs(int src,int des)\n{\n    int i;\n    queue<int>mem;\n    mem.push(des);\n    dist[des]=0;numbs[0]++;\n    while(!mem.empty())\n    {\n        int x=mem.front();mem.pop();\n        for(i=head[x];i!=-1;i=edge[i].next)\n        {\n            int y=edge[i].to;\n            if(edge[i].cap==0&&dist[y]==0&&y!=des)\n            {\n                dist[y]=dist[x]+1;\n                numbs[dist[y]]++;\n                mem.push(y);\n            }\n        }\n    }\n    return;\n}\nint dfs(int src,int flow,int des)\n{\n    if(src==des)return flow;\n    int i,low=0,mindist=n*2+2;\n    for(i=head[src];i!=-1;i=edge[i].next)\n    {\n        int y=edge[i].to;\n        if(edge[i].cap)\n        {\n            if(dist[y]==dist[src]-1)\n            {\n                int t=dfs(y,min(flow-low,edge[i].cap),des);\n                edge[i].cap-=t;\n                edge[i^1].cap+=t;\n                low+=t;\n                if(dist[src]>=n*2+2)return low;\n                if(low==flow)break;\n            }\n            mindist=min(mindist,dist[y]+1);\n        }\n    }\n    if(!low)\n    {\n        if(!(--numbs[dist[src]]))dist[0]=n*2+2;\n        ++numbs[dist[src]=mindist];\n    }\n    return low;\n}\nint ISAP(int src,int des)\n{\n    int ans=0;\n    bfs(src,des);\n    while(dist[0]<n*2+2)ans+=dfs(src,2e8,des);\n    return ans;\n}\nint main()\n{\n    int i,j;\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d%d\",&n,&m,&l);\n    for(i=1;i<=m;i++)\n    {\n        int from,to;\n        scanf(\"%d%d\",&from,&to);\n        in(n+from,to,inf);\n        in(n+to,from,inf);\n    }\n    for(i=1;i<=l;i++){scanf(\"%d\",&j);a[j]=1;}\n    in(1,n+1,inf);\n    for(i=2;i<=n;i++)\n    {\n        if(a[i]==1){in(i,n+i,inf);in(n+i,2*n+1,inf);}\n        else in(i,n+i,1);\n    }\n    in(0,1,inf);\n    int maxflow=ISAP(0,n*2+1);\n    cout<<maxflow;\n    return 0;\n}\n```",
        "postTime": 1495949551,
        "uid": 36357,
        "name": "kakakaka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2944 \u3010[USACO09MAR]\u5730\u9707\u635f\u59312Earthquake Damage 2\u3011"
    },
    {
        "content": "# \u601d\u8def\n\n\u7531\u4e8e\u662f\u5220\u70b9\uff0c\u5bb9\u6613\u60f3\u5230\u7528\u62c6\u70b9\u7684\u65b9\u6cd5\u3002\n\n\u5c06\u4e00\u4e2a\u70b9\u62c6\u4e3a\u4e24\u4e2a\u70b9\u2014\u2014\u5165\u70b9\u548c\u51fa\u70b9\u3002\n\n\u6240\u6709\u8fde\u5411\u8be5\u70b9\u7684\u8fb9\u8fde\u5411\u8be5\u70b9\u5bf9\u5e94\u7684\u5982\u70b9\uff0c\u800c\u4ece\u8be5\u70b9\u8fde\u51fa\u7684\u8fb9\u7531\u8be5\u70b9\u5bf9\u5e94\u7684\u51fa\u70b9\u8fde\u51fa\u3002\n\n\u7136\u540e\u8fde\u5165\u70b9\u548c\u51fa\u70b9\u3002\n\n\u9898\u76ee\u4e2d\u8bf4\u660e $1$ \u70b9\u4e3a\u7ec8\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06 $1$ \u70b9\u7684\u51fa\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\u6743\u4e3a $+\\infty$ \u7684\u8fb9\u3002\n\n\u800c\u4e0d\u80fd\u5230\u8fbe $1$ \u70b9\u7684\u70b9\uff0c\u5219\u7531\u6e90\u70b9\u5411\u5176\u5165\u70b9\u8fde\u8fb9\u6743\u4e3a $+\\infty$ \u7684\u8fb9\u3002\n\n\u7136\u540e\u6240\u7ed9\u8fb9\u8fde\u7684\u65f6\u5019\u8fb9\u6743\u4e3a $+\\infty$\u3002\n\n\u5bf9\u4e8e\u53ef\u4ee5\u786e\u5b9a\u672a\u88ab\u6467\u6bc1\u7684\u70b9\uff0c\u5165\u70b9\u4e0e\u51fa\u70b9\u95f4\u8fde\u8fb9\u6743\u4e3a $+\\infty$ \u7684\u8fb9\uff0c\u5426\u5219\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n\n\u8fd9\u6837\u4ee5\u6765\uff0c\u5728\u6c42\u6700\u5c0f\u5272\u65f6\uff0c\u5272\u6389\u7684\u8fb9\u4e00\u5b9a\u662f\u4e0d\u786e\u5b9a\u662f\u5426\u88ab\u6467\u6bc1\u7684\u70b9\u7684\u51fa\u5165\u70b9\u95f4\u7684\u8fb9\uff0c\u5373\u6b64\u65f6\u6700\u5c0f\u5272\u5373\u4e3a\u7b54\u6848\uff0c\u6b64\u65f6\u5728\u5efa\u597d\u7684\u56fe\u4e0a\u8dd1\u6700\u5c0f\u5272\uff08\u6700\u5927\u6d41\uff09\u5373\u53ef\u3002\n\n# \u4ee3\u7801\n\n\u56e0\u4e3a\u62c6\u70b9\u7684\u539f\u56e0\uff0c\u7a7a\u95f4\u8981\u5f00\u5927\u70b9\u3002\n\n\u4ee3\u7801\u4e2d\u6bcf\u4e00\u6b65\u7684\u4f5c\u7528\u6ce8\u91ca\u4e2d\u5e94\u8be5\u5199\u7684\u633a\u8be6\u7ec6\u7684\u4e86\u3002\n\n## AC Code\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e4+5,M=1e6+5,inf=0x3f3f3f3f;\nint p,c,n,s,t,val,hd[N],ver[M],nxt[M],w[M],idx=1,dis[N],sum;\nbool mk[N];\nvoid add(int u,int v,int val){\n\tver[++idx]=v,w[idx]=val,nxt[idx]=hd[u],hd[u]=idx;\n\tver[++idx]=u,w[idx]=0,nxt[idx]=hd[v],hd[v]=idx;\n}\nbool bfs(){\n\tqueue<int>q;\n\tmemset(dis,0,sizeof dis),q.push(s),dis[s]=1;\n\twhile(q.size()){\n\t\tint p=q.front();\n\t\tq.pop();\n\t\tfor(int i=hd[p];i;i=nxt[i])\n\t\t\tif(!dis[ver[i]]&&w[i])\n\t\t\t\tdis[ver[i]]=dis[p]+1,q.push(ver[i]);\n\t}\n\treturn dis[t];\n}\nint dfs(int pos,int fl){\n\tif(pos==t||!fl) return fl;\n\tint used=0;\n\tfor(int i=hd[pos];i;i=nxt[i]){\n\t\tint d;\n\t\tif(dis[ver[i]]==dis[pos]+1&&w[i]){\n\t\t\td=dfs(ver[i],min(fl-used,w[i]));\n\t\t\tused+=d,w[i]-=d,w[i^1]+=d;\n\t\t\tif(fl==used) return fl;\n\t\t}\n\t}\n\tdis[pos]=0;\n\treturn used;\n}\nint main(){\n\tscanf(\"%d%d%d\",&p,&c,&n);\n\ts=0,t=p*2+1;\n\tadd(1,t,inf),add(1+p,1,inf);//1\u70b9\u5411\u6c47\u70b9\u8fde\u8fb9\n\tfor(int i=1,u,v;i<=c;i++)\n\t\tscanf(\"%d%d\",&u,&v),add(u,v+p,inf),add(v,u+p,inf);//\u8fde\u8fb9\n\tfor(int i=1,u;i<=n;i++)\n\t\tscanf(\"%d\",&u),add(s,u+p,inf),mk[u]=1;//\u672a\u88ab\u6467\u6bc1\u7684\u70b9\u5411\u6e90\u70b9\u8fde\u8fb9\uff0c\u5e76\u6807\u8bb0\n\tfor(int i=2;i<=p;i++)\n\t\tmk[i]?add(i+p,i,inf):add(i+p,i,1);//\u5224\u65ad\u80fd\u5426\u5272\u6389\uff0c\u5982\u679c\u80fd\u5272\u6389\u5219\u8fde1\uff0c\u5426\u5219\u8fdeinf\n\twhile(bfs())\n\t\tsum+=dfs(s,inf);//\u6c42\u6700\u5c0f\u5272\n\tprintf(\"%d\",sum);\n\treturn 0;\n}\n```",
        "postTime": 1683556292,
        "uid": 696106,
        "name": "Leowang2009",
        "ccfLevel": 0,
        "title": "[USACO09MAR]Earthquake Damage 2 G \u9898\u89e3"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u6743\u65e0\u5411\u56fe\u548c $p$ \u4e2a\u70b9\uff0c\u9700\u8981\u5728\u56fe\u4e2d\u5220\u53bb\u4e00\u4e9b\u70b9\u4f7f\u5f97\u8fd9 $p$ \u4e2a\u70b9\u548c\u70b9 $1$ \u5747\u4e0d\u8fde\u901a\u4e14\u8fd9 $p$ \u4e2a\u70b9\u548c $1$ \u90fd\u6ca1\u6709\u88ab\u5220\u9664\u3002\u95ee\u81f3\u5c11\u5220\u9664\u591a\u5c11\u4e2a\u70b9\u3002\n\n## \u89e3\u6cd5\n\n\u9996\u5148\u5148\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff1a\u9898\u76ee\u8981\u6c42\u5220\u70b9\uff0c\u4f46\u662f\u7f51\u7edc\u6d41\u6700\u5c0f\u5272\u662f\u8fb9\u6743\uff0c\u8003\u8651\u8f6c\u5316\u3002\n\n\u5bf9\u6bcf\u4e2a\u70b9 $u$ \u5206\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5165\u70b9\u4e3a $u$\uff0c\u51fa\u70b9\u4e3a $u+n$\uff0c\u5165\u70b9\u5b58\u50a8\u5165\u8fb9\uff0c\u51fa\u70b9\u5b58\u50a8\u51fa\u8fb9\u3002\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u8868\u793a\u5220\u9664\u8fd9\u6761\u8fb9\u4ee3\u4ef7\u4e3a $1$\u3002\u5220\u9664\u8fd9\u6761\u8fb9\u5c31\u610f\u5473\u5220\u9664\u8fd9\u4e2a\u70b9\uff0c\u672c\u8eab\u6709\u5411\u56fe\u7684\u8fb9\u90fd\u7531\u5165\u70b9\u8fde\u5411\u51fa\u70b9\uff0c\u8fb9\u6743\u4e3a $\\inf$\uff0c\u8868\u793a\u8fb9\u4e0d\u53ef\u5220\u3002\n\n\u8003\u8651\u548c\u666e\u901a\u6700\u5c0f\u5272\u7684\u8f6c\u5316\u3002\n\n\u666e\u901a\u6700\u5c0f\u5272\u8981\u6c42 $s$ \u548c $t$ \u4e0d\u8fde\u901a\uff0c\u663e\u7136\u8fd9\u91cc $s=1$\uff0c\u800c $t$ \u662f\u8fd9 $p$ \u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u4e0d\u597d\u76f4\u63a5\u5199\u3002\n\n\u8003\u8651\u628a\u8fd9 $p$ \u4e2a\u70b9\u90fd\u8fde\u5230\u4e00\u4e2a\u8d85\u7ea7\u6c47\u70b9 $t=2n+1$\uff0c\u7136\u540e $p$ \u4e2a\u70b9\u7684\u51fa\u70b9\u90fd\u5411 $t$ \u8fde\u63a5\u4e00\u6761\u8fb9\u6743\u4e3a $\\inf$\uff0c\u8868\u793a $t$ \u548c $p$ \u7684\u6bcf\u4e2a\u70b9\u90fd\u8fde\u5728\u4e00\u8d77\u3002\n\n\u6ce8\u610f $p$ \u4e2a\u70b9\u662f\u4e0d\u80fd\u5220\u7684\uff0c\u6240\u4ee5 $p$ \u4e2a\u70b9\u7684\u5165\u70b9\u548c\u51fa\u70b9\u8fde\u8fb9\u53d8\u8fc1\u4e3a $\\inf$\u3002\n\n\u6700\u5c0f\u5272\uff0c\u505a\u5b8c\u4e86\u3002",
        "postTime": 1665979799,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P2944 [USACO09MAR]Earthquake Damage 2 G"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P2944)\u3002\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.cnblogs.com/UperFicial/p/16034059.html)\u3002\n\n### $\\texttt{Description}$\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u56fa\u5b9a\u4e00\u4e9b\u70b9\uff0c\u6c42\u6700\u5c0f\u5272\u3002\n\n### $\\texttt{Solution}$\n\n\u5982\u679c\u6ca1\u89c1\u8fc7\u8fd9\u4e2a\u5957\u8def\uff0c\u5206\u6790\u4e00\u4e0b\u4e5f\u5f88\u5bb9\u6613\u505a\u51fa\u6765\u3002\n\n\u9898\u610f\u5df2\u7ecf\u4e0d\u662f\u5272\u8fb9\uff0c\u800c\u662f\u5272\u70b9\u4e86\uff0c\u8003\u8651\u62c6\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u62c6\u51fa\u4e24\u4e2a\u70b9 $u$ \u548c $u'$\u3002\uff0c\u8fd9\u6837\u5c31\u80fd\u8868\u793a\u51fa\u5bf9\u4e8e\u70b9\u7684\u9650\u5236\u3002\n\n\u82e5\u4e00\u4e2a\u70b9\u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48\u8fde $u\\to u'$\uff0c\u5bb9\u91cf\u4e3a $\\infty$\uff0c\u6700\u5c0f\u5272\u4e0d\u4f1a\u5272\u6389\u5bb9\u91cf\u4e3a $\\infty$ \u7684\u70b9\u3002$1$ \u53f7\u70b9\u540c\u6837\u4e5f\u9700\u5982\u6b64\u5904\u7406\uff0c\u56e0\u4e3a $1$ \u4e0d\u4f1a\u88ab\u5272\u6389\u3002\n\n\u6ca1\u56fa\u5b9a\u7684\u70b9\u76f4\u63a5\u8fde $u\\to u'$\uff0c\u5bb9\u91cf\u4e3a $1$\u3002\n\n\u5bf9\u4e8e\u539f\u56fe\u4e0a\u7684\u8fb9\uff0c\u662f\u4e0d\u4f1a\u88ab\u5272\u6389\u7684\uff0c\u8fde $u'\\to v$\uff0c\u7531\u4e8e\u662f\u53cc\u5411\u8fb9\uff0c\u8fde $v'\\to u$\uff0c\u5bb9\u91cf\u5747\u4e3a $\\infty$\u3002\n\n\u7136\u540e\u6e90\u70b9\u8fde $1$\uff0c\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u8fde $t$\uff0c\u5bb9\u91cf\u540c\u6837\u4e3a $\\infty$\u3002\n\n\u4e4b\u540e\u6c42\u6700\u5927\u6d41\u5373\u53ef\u3002",
        "postTime": 1647835206,
        "uid": 360511,
        "name": "UperFicial",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010P2944 [USACO09MAR]Earthquake Damage 2 G\u3011"
    }
]