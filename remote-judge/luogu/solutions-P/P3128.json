[
    {
        "content": "LCA+\u6811\u4e0a\u5dee\u5206\n\n\u6211\u4eec\u8981\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u51e0\u6b21\uff0c\u4e5f\u5c31\u662f\u5728\u6bcf\u4e00\u6761\u8def\u5f84\u4e0a\uff0c\u7ed9\u8def\u5f84\u4e0a\u7684\u70b9+1\uff0c\u6240\u4ee5\u6211\u4eec\u6b64\u9898\u7528\u6811\u4e0a\u5dee\u5206\u5c31\u53ef\u4ee5\u5f88\u5feb\u5f97\u5f97\u5230\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u7684\u6b21\u6570\n\n\u5177\u4f53\u662f\u8fd9\u6837\u7684\uff1a\u5047\u8bbe\u4e00\u6761u\u5230v\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u662fu--->lca(u,v)--->v\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u628au--->lca(u,v)\u4e0elca(u,v)--->v\u4e24\u6761\u8def\u5f84\u5404\u81ea\u52a0\u4e00\uff0c\u4e5f\u5c31\u662f++power[u],++power[v],power[lca(u,v)]-=2\n\n\u4f46\u662f\u8fd9\u6837\u4e00\u6765\uff0clca(u,v)\u4e0a+2\u53c8-2\u7b49\u4e8e0\uff0c\u4e5f\u5c31\u662fu--->v\u6574\u6761\u8def\u7ecf\u4e0a\u9664\u4e86lca(u,v)\u90fd\u52a0\u4e861\uff0c\u4e3a\u4e86\u6392\u9664\u8fd9\u4e2a\u5e72\u6270\uff0c\u6211\u4eec\u628apower[lca(u,v)]-=2\u6539\u6210- -power[lca(u,v)],- -power[lca(u,v)\u7684\u7236\u4eb2]\n\nLCA\u7528\u500d\u589e\u6bd4\u8f83\u65b9\u4fbf\uff0c\u6700\u540e\u904d\u5386\u6574\u68f5\u6811\u7edf\u8ba1\u548c\n\nCode:\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define maxn 50010\n#define ll long long\n#define res register int\nstruct Node{\n\tint to,next;\n};\nNode edge[maxn<<2]; //\u94fe\u5f0f\u524d\u5411\u661f\u8981\u591a\u5f00\u51e0\u500d\u6570\u7ec4\nint head[maxn<<2],power[maxn],n,m,d[maxn],fa[maxn][30],ans,num;\n\ninline int read(){ //\u5feb\u8bfb\n\tint s=0;\n\tchar c=getchar();\n\twhile (c<'0' || c>'9') c=getchar();\n\twhile (c>='0' && c<='9') s=s*10+c-'0',c=getchar();\n\treturn s;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f\ninline void add(int x,int y){edge[++num].to=y,edge[num].next=head[x],head[x]=num;}\n//\u63a5\u4e0b\u6765\u662f\u521d\u59cb\u5316\ninline void work(int u,int fath){\n\td[u]=d[fath]+1,fa[u][0]=fath;\n\tfor (res i=0;fa[u][i];++i) fa[u][i+1]=fa[fa[u][i]][i];\n\tfor (res i=head[u];i;i=edge[i].next){\n\t\tint e=edge[i].to;\n\t\tif (e!=fath) work(e,u);\n\t}\n}\n//\u500d\u589e\u6c42LCA\ninline int Lca(int u,int v){\n\tif (d[u]>d[v]) swap(u,v);\n\tfor (res i=20;i>=0;--i) if (d[u]<=d[v]-(1<<i)) v=fa[v][i];\n\tif (u==v) return u;\n\tfor (res i=20;i>=0;--i) if (fa[u][i]!=fa[v][i]) u=fa[u][i],v=fa[v][i];\n\treturn fa[u][0];\n}\n//\u7d2f\u8ba1\ninline void Get(int u,int fath){\n\tfor (res i=head[u];i;i=edge[i].next){\n\t\tint e=edge[i].to;\n\t\tif (e==fath) continue;\n\t\tGet(e,u);\n\t\tpower[u]+=power[e];\n\t}\n\tans=max(ans,power[u]);\n}\n\nint main(){\n\tn=read(),m=read();\n\tint x,y;\n\tfor (res i=1;i<n;++i){\n\t\tx=read(),y=read();\n\t\tadd(x,y); add(y,x);\n\t}\n\twork(1,0);\n\tfor (res i=1; i<=m; ++i){\n\t\tx=read(),y=read();\n\t\tint lca=Lca(x,y);\n\t\t++power[x];++power[y];--power[lca];--power[fa[lca][0]]; //\u6811\u4e0a\u5dee\u5206\n\t}\n\tGet(1,0);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1532788522,
        "uid": 51719,
        "name": "ModestCoder_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "[\u3010\u6811\u4e0a\u5dee\u5206\u6a21\u677f\u9898\u3011](https://www.luogu.org/problemnew/show/P3128)\n\n\u77e9\u9635\u7684\u5dee\u5206\u5e94\u8be5\u5f88\u7b80\u5355\uff0c\u5178\u578b\u9898\u76ee\u662f\u8fd9\u6837\u7684\uff1a\n\n\u7ed9\u4f60\u4e00\u5806\u6570\uff0c\u6709n\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u6bcf\u6b21\u7ed9i..j\u8fd9\u4e2a\u533a\u95f4\u52a0\u4e0ax\u3002\u6700\u540e\u95ee\u6240\u6709\u6570\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002\n\n\u5dee\u5206\uff0c\u901a\u4fd7\u4e00\u70b9\u5c31\u662f\u628a\u533a\u95f4\u7684\u64cd\u4f5c\u6539\u4e3a\u70b9\u64cd\u4f5c\uff0c\u5728\u70b9\u4e0a\u8bb0\u5f55\u53d8\u5316\u91cf\u3002\u4e0a\u9898\u53ea\u9700\u8bb0\u5f55dlt[i]+=x,dlt[j+1]-=x\uff0c\u6700\u540e\u7528\u524d\u7f00\u548c\u626b\u4e00\u904d\u5373\u53ef\u3002\n\n\u6811\u4e0a\u5dee\u5206\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u5728\u6811\u4e0a\u641e\u5dee\u5206\u3002\u6709\u4e24\u79cd\u5178\u578b\u9898\u578b\uff0c\u4e00\u79cd\u662f\u8fb9\u5dee\u5206\uff0c\u4e00\u79cd\u662f\u70b9\u5dee\u5206\u3002\u8fb9\u5dee\u5206\u88f8\u9898\u957f\u8fd9\u6837\uff1a\n\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6709n\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u6bcf\u6b21\u628au..v\u7684\u8def\u5f84\u6743\u503c\u52a0x\uff0c\u6700\u540e\u95ee\u4ecex..y\u7684\u8def\u5f84\u6743\u503c\u548c\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/25763.png)\n\n\u4f8b\u5982\u6709\u4e00\u6b21\u64cd\u4f5c\u662f\u628a\u7ea2\u70b9\uff08u\uff09\u5230\u7eff\u70b9\uff08v\uff09\u4e4b\u95f4\u7684\u8def\u5f84\u5168\u90e8\u52a0x\u3002\u90a3\u4e48\u6211\u5c31\u6807\u8bb0dlt[u]+=x,dlt[v]+=x\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/25764.png)\n\n\u8fd9\u6837\u5728\u6700\u540e\u6c42\u89e3\u7684\u65f6\u5019\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u987a\u4fbf\u7b97\u4e00\u4e0b\u7b54\u6848\u5c31\u51fa\u6765\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u8981\u5728lca(u,v)\u5904\u6807\u8bb0dlt[lca(u,v)]-=2x\u3002\u8fd9\u6837\u5c31\u4f7f\u5f97\u52a0x\u7684\u6548\u679c\u53ea\u5c40\u9650\u5728u..v\uff0c\u4e0d\u4f1a\u5411lca(u,v)\u7684\u7238\u7238\u8513\u5ef6\u3002\n\n\u70b9\u5dee\u5206\u548c\u8fb9\u5dee\u5206\u7a0d\u6709\u5dee\u522b\uff1a\n\n\u6709n\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u6bcf\u6b21\u628au..v\u7684\u6240\u6709\u70b9\u6743\u90fd\u52a0x\uff0c\u6700\u540e\u95ee\u70b9\u6743\u6700\u5927\u7684\u4e3a\u591a\u5c11\u3002\u8fd9\u9053\u9898\u5c31\u662f\u6700\u4e0a\u65b9\u94fe\u63a5\u7684\u90a3\u9898\u4e86\u3002\n\n\u505a\u6cd5\u4e5f\u662f\u548c\u8fb9\u5dee\u5206\u7a0d\u6709\u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u5728dlt[lca(u,v)]-=2x\uff0c\u800c\u662f\u628adlt[lca(u,v)]-=x\u5e76\u628adlt[fa[lca(u,v)]]-=x\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3alca(u,v)\u4e5f\u5728u..v\u8fd9\u6761\u8def\u5f84\u4e0a\uff0c\u5b83\u540c\u6837\u9700\u8981\u88ab\u52a0x\u3002\u56de\u6eaf\u7684\u65f6\u5019\u4f1a\u4eceu\u548cv\u4e24\u4e2a\u65b9\u5411\u90fd\u7ed9lca(u,v)\u52a0\u4e00\u4e2ax\uff0c\u800c\u5b83\u53ea\u80fd\u52a0\u4e00\u4e2a\uff0c\u56e0\u6b64dlt[lca(u,v)]-=x\u3002\u800clca(u,v)\u7684\u7238\u7238\u5219\u6839\u672c\u65e0\u6cd5\u88ab\u52a0\uff0c\u5728lca(u,v)\u5df2\u7ecf\u53ea\u52a0\u4e00\u4e2ax\u4e86\uff0c\u56e0\u6b64dlt[fa[lca(u,v)]]-=x\u5c31\u80fd\u8ba9lca(u,v)\u7684\u7238\u7238\u4e0d\u52a0x\u3002\n\n\u5177\u4f53\u770b\u4ee3\u7801\uff1a\n\n```\n#include<bits/stdc++.h>\n#define fsb(a,b,c) for (int a=b;a<=c;a++)\n#define maxn 50100\n#define maxm 100100\n#define mem(a,b) memset(a,b,sizeof(a))\n#define max(a,b) ((a)>(b)?(a):(b))\nusing namespace std;\nstruct edge{\n\tint p,nt;\n}a[maxn*2];\nint n,m,x,y,head[maxn],cnt=0,cntb=0,headb[maxn],fa[maxn],vis[maxn],dlt[maxn],faa[maxn],maxx=0;\nstruct qus{\n\tint p,nt,mark;\n}b[maxm*2];\nstruct ablca{\n\tint x,y,z;\n}ans[maxm];\ninline void adda(int x,int y){\n\ta[++cnt].p=y;a[cnt].nt=head[x];head[x]=cnt;\n}\ninline void addb(int x,int y,int z){\n\tb[++cntb].p=y;b[cntb].mark=z;b[cntb].nt=headb[x];headb[x]=cntb;\n}\ninline int getf(int x){\n\treturn x==fa[x]?x:fa[x]=getf(fa[x]);\n}\ninline void dfs1(int u,int f){//tarjan\u6c42lca\n\tfaa[u]=f;\n\tfor (int t=headb[u];t!=-1;t=b[t].nt){\n\t\tint v=b[t].p;\n\t\tif (vis[v]) ans[b[t].mark].z=getf(v);\n\t}\n\t// printf(\"%d \",u);\n\tvis[u]=1;\n\tfor (int t=head[u];t!=-1;t=a[t].nt){\n\t\tint v=a[t].p;if (v==f) continue;\n\t\tdfs1(v,u);\n\t\tint fau=getf(u),fav=getf(v);\n\t\tif (fau!=fav) fa[fav]=fau;\n\t}\n}\ninline int dfs2(int u){\n\tint now=dlt[u],ans=0;\n\tfor (int t=head[u];t!=-1;t=a[t].nt){\n\t\tint v=a[t].p;if (v==faa[u]) continue;\n\t\tnow+=dfs2(v);//now\u8bb0\u5f55\u70b9u\u7684\u4fee\u6539\u540e\u70b9\u6743\n\t}\n\tmaxx=max(maxx,now);\n\treturn now;\n}\nint main(){\n\t// freopen(\"std.in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&m);\n\tmem(head,255);\n\tfsb(i,1,n-1){\n\t\tscanf(\"%d%d\",&x,&y);adda(x,y);adda(y,x);\n\t}\n\tmem(headb,255);\n\tfsb(i,1,m){\n\t\tscanf(\"%d%d\",&ans[i].x,&ans[i].y);\n\t\taddb(ans[i].x,ans[i].y,i);addb(ans[i].y,ans[i].x,i);\n\t}\n\tfsb(i,1,n) fa[i]=i;mem(vis,0);\n\tdfs1(1,0);mem(dlt,0);\n\tfsb(i,1,m){\n\t\tdlt[ans[i].x]++;dlt[ans[i].y]++;dlt[ans[i].z]--;dlt[faa[ans[i].z]]--;\n\t}\n\t// printf(\"!!!\\n\");\n\tn=dfs2(1);\n\tprintf(\"%d\\n\",maxx);\n\treturn 0;\n}\n```\n\n\u5dee\u5206\u9002\u7528\u4e8e\u4fee\u6539\u591a\u800c\u8be2\u95ee\u5c11\u7684\u60c5\u51b5\uff0c\u672c\u9898\u4e2d\u53ea\u6709\u4e00\u6b21\u8be2\u95ee\uff0c\u975e\u5e38\u9002\u5408\u3010\u522b\u548c\u6211\u8bf4\u7ebf\u6bb5\u6811\uff0c\u6811\u94fe\u5256\u5206\uff0cLCT\u4e91\u4e91\uff0c\u8d5b\u573a\u4e0a\u5199\u4e861\u4e2a\u5c0f\u65f6\u8c03\u4e861\u4e2a\u5c0f\u65f6\u7ed3\u679c\u70b8\u4e86\u5c82\u4e0d\u5fc3\u6001\u8981\u5d29orz\u4e00\u5b9a\u662f\u6211\u592a\u83dc\u4e86\u8c03\u4e0d\u51fa\u6765orz",
        "postTime": 1532848950,
        "uid": 17655,
        "name": "Sagittarius",
        "ccfLevel": 0,
        "title": "\u5dee\u5206|\u6811\u4e0a\u5dee\u5206\u5b66\u4e60\u7b14\u8bb0|P3128 [USACO15DEC]\u6700\u5927\u6d41Max Flow\u9898\u89e3"
    },
    {
        "content": "\u7b2c\u4e00\u6b21\u8d34\u4ee3\u7801\uff0c\u4e0d\u77e5\u9053\u8981\u6c42QWQ\n\n\n\u6700\u8fd1\u65b0\u5b66\u4e86\u500d\u589e\u548c\u6811\u5256\uff0c\u56e0\u6b64\u7528\u4e24\u79cd\u65b9\u6cd5\u90fd\u5199\u4e86\u3002\n\n\n**\u8fd9\u9053\u9898\u6ca1\u4ec0\u4e48\u590d\u6742\u7684\uff0c\u8bfb\u5165\u5c31\u4e0d\u7528\u8bf4\u4e86\uff0c\u7528\u90bb\u63a5\u8868\u5b58\u50a8\u8fd9\u68f5\u6811\uff08\u6211\u624d\u5b66\u4f1a\u554a\u597d\u4e22\u4eba\uff0c\u771f\u5fc3\u89c9\u5f97\u81ea\u5df1\u597d\u61d2\uff09\uff0c\u4ece1~k\u8ba1\u7b97\u51fa\uff08u\uff0cv\uff09\u7684LCA\u503c\uff0c\u6839\u636e\u4e66\u4e0a\u5dee\u5206\u7684\u601d\u60f3\uff0cw[u]\u548cw[v]\u5206\u522b\u52a01\uff0c\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09\u548cLCA\u7684\u7236\u4eb2\u5404\u51cf1\uff0c\u6700\u540e\u518d\u8dd1\u4e00\u904dDFS\u7d2f\u8ba1\u4e00\u4e0b\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u90bb\u63a5\u8868\u5148\u653e\u51fa\u6765\uff08\u662f\u4e0d\u662f\u591a\u4f59\u4e86QWQ\uff0c\u522b\u5410\u69fd\uff09***\n\n```cpp\nint Head[N],Next[N],adj[N],tot;    //\u592a\u7b80\u5355\u4e0d\u89e3\u91ca\nvoid add(int i,int j)\n{\n    tot++;\n    Next[tot]=Head[i];\n    Head[i]=tot;\n    adj[tot]=j;\n}\n```\n**1.\u500d\u589e\u6c42LCA**\n\n\u7b2c\u4e00\u4e2adfs\u7528\u6765\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u6df1\u5ea6\u53ca\u5176\u7236\u8282\u70b9\n\n```cpp\nvoid dfs(int a)\n{\n    for(int i=Head[a];i;i=Next[i])        //\u90bb\u63a5\u8868\u7684\u5177\u4f53\u7528\u6cd5\n    {\n        int k=adj[i];\n        if(k==p[a][0])\n            continue;\n        deep[k]=deep[a]+1;            //deep\u6570\u7ec4\u5b58\u50a8\u7ed3\u70b9\u7684\u6df1\u5ea6\uff08\u663e\u800c\u6613\u89c1\uff09\n        p[k][0]=a;                           //p[i][j]\u8868\u793ai\u7684j\u6b21\u65b9\u500d\u7956\u5148\n        dfs(k);\n    }\n}\n```\n\u63a5\u4e0b\u6765\u7528\u7b80\u5355\u7684\u4e24\u5c42for\u5faa\u73af\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684j\u6b21\u65b9\u500d\u7956\u5148\n\n```cpp\nvoid init()\n{\n    for(int j=1;(1<<j)<=n;j++)\n        for(int i=1;i<=n;i++)\n            p[i][j]=p[p[i][j-1]][j-1];\n}\n```\n\u7136\u540e\u5c31\u662fLCA\u7684\u8fc7\u7a0b\u4e86\n\n```cpp\nint lca(int a,int b)\n{\n    if(deep[a]>deep[b])               //\u4fdd\u6301b\u5728a\u4e0b\u9762\n    {\n        int t=a;\n        a=b;\n        b=t;\n    }\n    int f=deep[b]-deep[a];\n    for(int i=0;(1<<i)<=f;i++)       //\u8c03\u6574b\u4f7fa\u4e0eb\u6df1\u5ea6\u76f8\u540c\n        if((1<<i)&f)\n            b=p[b][i];\n    if(a!=b)\n    {\n        for(int i=100;i>=0;i--)\n            if(p[a][i]!=p[b][i])\n                a=p[a][i],b=p[b][i];  //\u6bcf\u6b21\u8df3\u8f6c\u81f3\u5b83\u4eec\u7684i\u6b21\u65b9\u500d\u7956\u5148\n        a=p[a][0];                               //a\u7684\u7236\u4eb2\u5c31\u662f\u6700\u7ec8\u7b54\u6848\n    }\n    return a;\n}\n```\n\u7b2c\u4e8c\u6b21dfs\u8fdb\u884c\u7b80\u5355\u7684\u7edf\u8ba1\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7d2f\u52a0\u5176\u6240\u6709\u5b69\u5b50\u7ed3\u70b9\u7684\u6743\u503c\uff0c\u518d\u53d6\u6700\u5927\u503c\n\n```cpp\nvoid dfs2(int a)\n{\n    for(int i=Head[a];i;i=Next[i])\n    {\n        int k=adj[i];\n        if(k==p[a][0])\n            continue;\n        dfs2(k);\n        d[a]+=d[k];\n    }\n    ans=max(ans,d[a]);\n}\n```\n\u4e3b\u51fd\u6570\u5c31\u662f\u7528\u6765\u8bfb\u5165\u548c\u7b80\u5355\u8c03\u7528\u4e0e\u8ba1\u7b97\u7684\uff0c\u56e0\u4e3a\u4ee3\u7801\u592a\u62d9\u52a3\u4e86\uff0c\u5c31\u4e0d\u8d34\u4e86\uff0c\u5927\u4f6c\u4eec\u81ea\u884c\u8111\u8865\u54c8~\n\n\n**2.\u6811\u94fe\u5256\u5206\u6c42LCA**\n\n\u7b2c\u4e00\u6b21dfs\u521d\u59cb\u5316\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u6df1\u5ea6\uff0c\u7236\u4eb2\uff0c\u91cd\u5b69\u5b50\u53ca\u5b50\u8282\u70b9\u7684\u4e2a\u6570\n\n```cpp\nvoid dfs1(int u,int fa,int d)\n{\n    deep[u]=d,father[u]=fa,size[u]=1;\n    for(int e=Head[u];e;e=Next[e])\n    {\n        int v=adj[e];\n        if(v==fa)\n            continue;\n        dfs1(v,u,d+1);\n        size[u]+=size[v];\n        if(size[v]>size[son[u]])\n            son[u]=v;\n    }\n}\n```\n\u7b2c\u4e8c\u6b21dfs\u521d\u59cb\u5316\u5404\u7ed3\u70b9\u6240\u5728\u91cd\u94fe\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u7ed3\u70b9top\uff08\u5982\u679c\u4e0d\u5728\u91cd\u94fe\u4e0atop\u5c31\u4e3a\u5b83\u81ea\u5df1\uff09\n\n```cpp\nvoid dfs2(int u,int tp)\n{\n    top[u]=tp;\n    if(!son[u])\n        return;\n    dfs2(son[u],tp);\n    for(int e=Head[u];e;e=Next[e])\n    {\n        int v=adj[e];\n        if(v!=son[u]&&v!=father[u])\n            dfs2(v,v);\n    }\n}\n```\n\u7d27\u63a5\u7740lca,\u6bd4\u8f83a\uff0cb\u7684top\u7684\u5927\u5c0f\uff0c\u5e76\u4e0d\u65ad\u4e0a\u8c03\n\n```cpp\nint LCA(int a,int b)\n{\n    while(top[a]!=top[b])\n        deep[top[a]]>deep[top[b]]?a=father[top[a]]:b=father[top[b]];\n    return deep[a]>deep[b]?b:a;\n}\n```\n\u6700\u540e\u4e00\u6b21dfs\u8ddf\u4e0a\u8fb9\u4e00\u6837\uff0c\u7528\u6765\u7edf\u8ba1\u4e00\u4e0b\n\n```cpp\nvoid dfs3(int u)\n{\n    for(int e=Head[u];e;e=Next[e])\n    {\n        int v=adj[e];\n        if(v==father[u])\n            continue;\n        dfs3(v);\n        weight[u]+=weight[v];\n    }\n    ans=max(ans,weight[u]);\n}\n```\n\u4e3b\u51fd\u6570\u8fd8\u662f\u4e00\u6837\u7684\u62d9\u52a3\uff0c\u50b2\u5a07\u4e0d\u8d34\uff01\u6211\u5f88\u61d2\u6240\u4ee5\u4e0d\u60f3\u6253\u6ce8\u91ca\u4e86\uff0c\u53cd\u6b63\u4e0d\u6253\u4f60\u4eec\u4e5f\u80fd\u770b\u5f97\u61c2\uff0c\u4f55\u5fc5\u8ba9\u6211\u715e\u8d39\u82e6\u5fc3\u546223333\n\n\n**\u5c31\u8fd9\u4e48\u591a\u4e86\uff0c\u65b9\u6cd5\u53ef\u80fd\u6bd4\u8f83\u9648\u65e7\u6216\u8005\u8bf4\u5f88\u590d\u6742\uff0c\u5e0c\u671b\u5927\u4f6c\u6307\u51fa\u5e76\u6307\u5bfc\u6211\u4fee\u6539\uff0c\u8c22\u8c22\u4f60\u4eec\uff01**\n",
        "postTime": 1504965114,
        "uid": 22569,
        "name": "Niki_C_U",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "[\u539f\u9898\u94fe\u63a5\u00b7[USACO15DEC]\u6700\u5927\u6d41Max Flow](https://www.luogu.org/problem/P3128)\n\n\u6700\u8fd1\u5728\u5b66\u4e60\u6811\u94fe\u5256\u5206\uff0c\n\n\u8fd9\u9898\u4e00\u770b\u5c31\u77e5\u9053\u662f\u6811\u94fe\u5256\u5206\uff0c\n\n\u800c\u4e14\u662f\u975e\u5e38\u7b80\u5355\u7684\u6811\u94fe\u5256\u5206\uff0c\n\n\u4f17\u6240\u5468\u77e5\uff0c\u6811\u5256\u9898\u6700\u96be\u7684\u5c31\u662f\u6a21\u677f\uff08~~\u6ed1\u7a3d~~\uff09\u3002\n\n\u672c\u9898\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9\uff1a\n\n\t\t1\u3001\u8bfb\u9898\uff0c\u672c\u9898\u8bfb\u9898\u65f6\u6211\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff1a\n        \n\t\t     \u6211\u628a\u70b9\u4fee\u6539\u7406\u89e3\u6210\u4e86\u8fb9\u4fee\u6539\uff0c\u65e0\u8111\u5730\u8c03\u4e86\u56db\u5341\u5206\u949f\uff0c\n             \n\t\t     \u6240\u4ee5\u5ba1\u9898\u8981\u8ba4\u771fQwQ\u3002\n                 \n\t\t2\u3001\u5173\u4e8e\u5199\u51fa\u9ad8\u6548\u4ee3\u7801\u800c\u4e0d\u662f\u5199\u51fa\u5e38\u7528\u4ee3\u7801\u7684\u95ee\u9898\uff1a\n        \n\t\t     \u6811\u5256\uff0c\u6211\u76f8\u4fe1\u5927\u5bb6\u5199\u7684\u65f6\u5019\u90fd\u662f\u7528\u7684\u7ebf\u6bb5\u6811\uff0c\n                 \n\t\t     \u4f46\u662f\uff0c\u672c\u9898\u7684\u6811\u5256\uff0c\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u6c34\u8fc7\u53bb\uff0c\n             \n\t\t     \u800c\u4e14\u6811\u72b6\u6570\u7ec4\u5e38\u6570\u8fd8\u5c0fQwQ\u3002\n             \n\uff08\u6211\u76f8\u4fe1\u4f1a\u6811\u5256\u7684\u4eba\u4e00\u5b9a\u77e5\u9053\u6811\u72b6\u6570\u7ec4\u5dee\u5206\u4e0b\u5c31\u80fd\u5b9e\u73b0\u533a\u95f4\u52a0\u7684\u65b9\u6cd5\uff0c\u6ed1\u7a3d\u6ed1\u7a3d\uff09\n\n\u672c\u6765\u6211\u4e5f\u662f\u5199\u7ebf\u6bb5\u6811\uff0c\n\n\u56f0\u7684\u4e0d\u884c\uff0c\u8c03\u4e86\u8fd1\u4e00\u4e2a\u5c0f\u65f6\uff0c\u8fd8\u662f\u6b7b\u5728\u4e86\u7ebf\u6bb5\u6811\u4e0a\uff0c\n\n\u5c3d\u7ba1\u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\uff0c\u600e\u4e48\u90fd\u6b7b\uff0c\uff08~~\u5509\u6211\u592a\u83dc\u4e86~~\uff09\n\n\u4e2d\u9014\uff0c\u6211\u7a81\u7136\u60f3\u5230\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199\u6811\u72b6\u6570\u7ec4\u5462\uff1f\n\n\u662f\u554a\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199\u6811\u72b6\u6570\u7ec4\u5462\uff1f\n\n\u5982\u679c\u6211\u4e00\u5f00\u59cb\u5c31\u60f3\u5230\u53bb\u5199\u6811\u72b6\u6570\u7ec4\u7684\u8bdd\uff0c\n\n\u5199\u8fd9\u9898\uff0c\u6839\u672c\u5c31\u7528\u4e0d\u4e8620min\uff08\u53ef\u80fd\u8bf4\u591a\u4e86\uff09\u3002\n\n\u6240\u4ee5\u8bf4\uff0c\u5c3d\u7ba1\u5927\u5bb6\u7528\u7ebf\u6bb5\u6811\u7528\u7684\u975e\u5e38\u8212\u670d\uff0c\n\n\u5f53\u6811\u72b6\u6570\u7ec4\u80fd\u76f4\u63a5\u5b8c\u6210\u7ebf\u6bb5\u6811\u6240\u9700\u64cd\u4f5c\u65f6\uff0c\n\n\u5f53\u7136\u4f18\u5148\u9009\u62e9\u6811\u72b6\u6570\u7ec4\u554a\uff01\n\n\u9644\u4e0a\u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\nconst int maxn = 1e5 + 10;\n\nint max (int a, int b) {\n    return a > b ? a : b;\n}\n\ninline int read() {\n    char c = getchar(); int x = 0, f = 1;\n    for (; c > '9' || c < '0'; c = getchar()) if (c == '-') f = -1;\n    for (; c >='0' && c <='9'; c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n    return x * f;\n}\n\nint dep[maxn], fa[maxn], size[maxn], son[maxn];\nint ver[maxn], nxt[maxn], head[maxn], tot;\nint id[maxn], top[maxn], cnt;\nint n, m, x, y;\n\nvoid add (int u, int v) {\n    ver[++ tot] = v;\n    nxt[tot] = head[u];\n    head[u] = tot;\n}\n\nstruct shuzhuangshuzu {\n    int z[maxn];\n    void add (int i, int x) {\n        for (; i <= n; i += i & -i)\n            z[i] += x;\n    }\n    void change (int l, int r) {\n        add (l, 1), add (r + 1, -1);\n    }\n    int ask (int i) {\n        int ans = 0;\n        for (; i; i -= i & -i)\n            ans += z[i];\n        return ans;\n    }\n} t;\n\nvoid dfs1 (int x, int f, int deep) {\n    fa[x] = f;\n    size[x] = 1;\n    dep[x] = deep;\n    int maxson = -1;\n    for (register int i = head[x]; i; i = nxt[i]) {\n        if (ver[i] == f)\n            continue;\n        dfs1 (ver[i], x, deep + 1);\n        size[x] += size[ver[i]];\n        if (size[ver[i]] > maxson)\n            maxson = size[ver[i]], son[x] = ver[i];\n    }\n}\n\nvoid dfs2 (int x, int topf) {\n    top[x] = topf;\n    id[x] = ++ cnt;\n    if (!son[x])\n        return ;\n    dfs2 (son[x], topf);\n    for (register int i = head[x]; i; i = nxt[i]) {\n        if (ver[i] == fa[x] || ver[i] == son[x])\n            continue;\n        dfs2 (ver[i], ver[i]);\n    }\n}\n\nvoid update (int x, int y) {\n    while (top[x] != top[y]) {\n        if (dep[top[x]] < dep[top[y]])\n            swap (x, y);\n        t.change (id[top[x]], id[x]);\n        x = fa[top[x]];\n    }\n    if (dep[x] > dep[y])\n        swap (x, y);\n    t.change (id[x], id[y]);\n}\n\nvoid djj () {\n    n = read(), m = read();\n    for (register int i = 1; i < n; i ++) {\n        x = read(), y = read();\n        add (x, y), add (y, x);\n    }\n    dfs1 (1, 1, 1);\n    dfs2 (1, 1);\n    for (; m; m --) {\n        x = read(), y = read();\n        update (x, y);\n    }\n}\n\nvoid lxy () {\n    int ans = 0;\n    for (register int i = 1; i <= n; i ++)\n        ans = max (ans, t.ask (i));\n    printf (\"%d\\n\", ans);\n}\n\nvoid djj_lxy () {\n    djj ();\n    lxy ();\n    exit (0);\n}\n\nint main () {\n    djj_lxy ();\n}\n//\u6837\u4f8b\uff0c\u672c\u9898\u6837\u4f8b\u7b97\u662f\u826f\u5fc3\u4e86\uff0c\u4e0d\u50cf\u4ec0\u4e48\u4ec0\u4e48Qtree1\u554a\u6837\u4f8b\u6c34\u6b7b\u4e86\n/*\n5 10\n3 4\n1 5\n4 2\n5 4\n5 4\n5 4\n3 5\n4 3\n4 3\n1 3\n3 5\n5 4\n1 5\n3 4\n\n9\n*/\n\n```\n\u7801\u98ce\u9b3c\u755c\uff0c\u4f46\u8bf7\u52ff\u590d\u5236\u7c98\u8d34\n\n\u6811\u72b6\u6570\u7ec4\u4e5f\u662f\u4e00\u4e2a\u975e\u5e38\u4f18\u79c0\u7684\u6570\u636e\u7ed3\u6784\uff1a\n\n\u5e38\u6570\u5c0f\uff0c\u597d\u5199\uff0c\n\n\u5f53\u7136\u5b83\u4f5c\u7528\u6709\u9650\u4e5f\u662f\u4e0d\u4e89\u7684\u4e8b\u5b9e\uff0c\n\n\u6240\u4ee5\u6570\u636e\u7ed3\u6784\u7684\u9009\u7528\u5e94\u8be5\u662f\u4ece\u9898\u76ee\u51fa\u53d1\u7684\u3002\n\n\u6700\u540e\u5f3a\u8c03\u5173\u4e8e\u6811\u72b6\u6570\u7ec4\u7684\u4e00\u70b9\u2014\u2014\n\n\u4e0d\u8981\u5199\u4e00\u4e2a\u540d\u4e3alowbit\u7684\u51fd\u6570\uff0c\n\n\u51fd\u6570\u8c03\u7528\u9700\u8981\u65f6\u95f4\u5427\uff0clowbit \u5b57\u7b26\u6bd4 i & -i \u591a\u5427\uff0c\n\n\u65e0\u8bba\u600e\u4e48\u770b\u5199\u4e00\u4e2a\u540d\u4e3alowbit\u7684\u51fd\u6570\u90fd\u975e\u5e38\u50bb\uff0c\u975e\u5e38\u7684\u6ca1\u6709\u6548\u7387\u3002\n\n\u79bb\u65b0Noip\u53ea\u5269\u51e0\u5341\u5929\u4e86\uff0c\u795d\u5927\u5bb6rp++\uff0c\n\n\u4e5f\u5e0c\u671b\u81ea\u5df1\u80fd\u66f4\u52aa\u529b\u4e00\u4e9b\uff0c\u52a0\u6cb9\uff01\uff01",
        "postTime": 1566915039,
        "uid": 162867,
        "name": "shame_djj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "- \u9898\u76ee\u94fe\u63a5\uff1a\n\n   https://www.luogu.org/problemnew/show/P3128\n   \n- \u5206\u6790\n\n   \u6211\u60f3\u8bf4\u6211\u6bd4\u8f83\u50bb\uff0c\u5728\u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\u6211\u5e76\u6ca1\u6709\u60f3\u5230\u6811\u4e0a\u5dee\u5206\uff0c\u800c\u662f\u76f4\u63a5\u66b4\u529b\u7684\u8fdb\u884c\u6811\u94fe\u5256\u5206\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u7ed9\u51fa\u7684\u6811\u4e0a\u8def\u5f84\u8fdb\u884c\u4fee\u6539\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u6700\u540e\u628a\u6240\u6709\u6807\u8bb0\u4e0b\u4f20\uff0c\u540c\u65f6\u7edf\u8ba1\u6700\u5927\u503c\u3002\n   \n   \u65f6\u95f4\u590d\u6742\u5ea6 $O(K \\log^2N)$,\u6bd4\u4e0d\u4e0a\u4f17\u5927\u4f6c\u7684\u6811\u4e0a\u5dee\u5206\uff0c\u4f46\u4e5f\u662f\u4e00\u79cd\u8f83\u66b4\u529b\u7684\u65b9\u6cd5\n   \n- \u4ee3\u7801\uff1a\n\n  ```\n#include <iostream>\n#include <vector>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cctype>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#define ll long long \n#define ri register int \nusing namespace std;\nconst int maxn=50005;\nconst int inf=0x7fffffff;\ntemplate <class T>inline void read(T &x){\n      x=0;int ne=0;char c;\n      while(!isdigit(c=getchar()))ne=c=='-';\n      x=c-48;\n      while(isdigit(c=getchar()))x=(x<<3)+(x<<1)+c-48;\n      x=ne?-x:x;\n      return ;\n}\nint n,k;\nstruct Edge{\n      int ne,to;\n}edge[maxn<<1];\nint h[maxn],num_edge=0;\ninline void add_edge(int f,int to){\n       edge[++num_edge].ne=h[f];\n       edge[num_edge].to=to;\n       h[f]=num_edge;\n       return ;\n}\nint cnt=0;\nint dep[maxn],fa[maxn],son[maxn],top[maxn],dfn[maxn],rnk[maxn],size[maxn];\nint L,R,dta;\nvoid dfs_1(int now){\n       int  v;\n       size[now]=1;\n       for(ri i=h[now];i;i=edge[i].ne){\n           v=edge[i].to;\n           if(v==fa[now])continue;\n           dep[v]=dep[now]+1,fa[v]=now;\n           dfs_1(v);\n           size[now]+=size[v];\n           if(!son[now]||size[son[now]]<size[v])son[now]=v;\n       }\n       return ;\n} \nvoid dfs_2(int now,int t){\n       int v;\n       top[now]=t,dfn[now]=++cnt,rnk[cnt]=now;\n       if(!son[now])return ;\n       dfs_2(son[now],t);\n       for(ri i=h[now];i;i=edge[i].ne){\n             v=edge[i].to;\n             if(v==fa[now]||v==son[now])continue;\n             dfs_2(v,v);\n       }\n       return ;\n}\nint sum[maxn<<2],mx[maxn<<2],tag[maxn<<2];\nvoid build(int now,int l,int r){\n       if(l==r){\n              sum[now]=mx[now]=0;\n              return ;\n       }\n       int mid=(l+r)>>1;\n       build(now<<1,l,mid);\n       build(now<<1|1,mid+1,r);\n       sum[now]=sum[now<<1]+sum[now<<1];\n       mx[now]=max(mx[now<<1],mx[now<<1|1]);\n       return ;\n}\nvoid pushdown(int now,int ln,int rn){\n       if(tag[now]){\n             sum[now<<1]+=tag[now]*ln;\n             sum[now<<1|1]+=tag[now]*rn;\n             mx[now<<1]+=tag[now];\n             mx[now<<1|1]+=tag[now];\n             tag[now<<1]+=tag[now];\n             tag[now<<1|1]+=tag[now];\n             tag[now]=0;\n       }\n       return ;\n}\nvoid update(int now,int l,int r){\n       if(L<=l&&r<=R){\n               sum[now]+=dta*(r-l+1);\n               mx[now]+=dta;\n               tag[now]+=dta;\n               return ;\n       }\n       int mid=(l+r)>>1;\n       if(L<=mid)update(now<<1,l,mid);\n       if(mid<R)update(now<<1|1,mid+1,r);\n       sum[now]=sum[now<<1]+sum[now<<1|1];\n       mx[now]=max(mx[now<<1],mx[now<<1|1]);\n       return ;\n}\nint query_mx(int now,int l,int r){\n       if(L<=l&&r<=R){\n               return mx[now];\n       }\n       int mid=(l+r)>>1,ans=-inf;\n       pushdown(now,mid-l+1,r-mid);\n       if(L<=mid)ans=max(ans,query_mx(now<<1,l,mid));\n       if(mid<R)ans=max(ans,query_mx(now<<1|1,mid+1,r));\n       sum[now]=sum[now<<1]+sum[now<<1|1];\n       mx[now]=max(mx[now<<1],mx[now<<1|1]);\n       return ans;\n}\nint all_push(int now,int l,int r){\n       if(l==r){\n              return mx[now];\n       }\n       int mid=(l+r)>>1,ans=-inf;\n       pushdown(now,mid-l+1,r-mid);\n       ans=max(ans,all_push(now<<1,l,mid));\n       ans=max(ans,all_push(now<<1|1,mid+1,r));\n       return ans;\n}\nvoid update_path(int x,int y,int k){\n        dta=k;\n        while(top[x]!=top[y]){\n                if(dep[top[x]]<dep[top[y]])swap(x,y);\n                L=dfn[top[x]],R=dfn[x];\n                update(1,1,n);\n                x=fa[top[x]];\n        }\n        if(dfn[x]>dfn[y])swap(x,y);\n        L=dfn[x],R=dfn[y];\n        update(1,1,n);\n        return ;\n}\nint main(){\n     int x,y,z;\n     //double st=clock();\n     read(n),read(k);\n     for(ri i=1;i<n;i++){\n             read(x),read(y);\n             add_edge(x,y);\n             add_edge(y,x);\n     }  \n     dep[1]=1,fa[1]=1;\n     dfs_1(1);\n     dfs_2(1,1);\n     for(ri i=1;i<=k;i++){\n             read(x),read(y);\n             update_path(x,y,1);\n     }\n     //double ed=clock();\n     printf(\"%d\\n\",all_push(1,1,n));\n     //printf(\"%lf\\n\",ed-st);\n     return 0;\n}\n```",
        "postTime": 1530803571,
        "uid": 61382,
        "name": "Rye_Catcher",
        "ccfLevel": 6,
        "title": "luogu\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011\u6811\u94fe\u5256\u5206\u7248"
    },
    {
        "content": "1. \u9996\u5148\uff0c\u6211\u4eec\u901a\u8fc7\u9605\u8bfb\u9898\u5e72\u7684\u5efa\u8fb9\u4e0d\u96be\u53d1\u73b0\u8fd9\u9053\u9898\u662f\u4ee5**\u6811\u5f62\u7ed3\u6784**\u4e3a\u80cc\u666f\u7684\u3002\n\n2. \u7ee7\u7eed\u5f80\u4e0b\u770b\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u9694\u95f4u,v\uff0c\u4f7f\u5f97u->v\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u9694\u95f4\u7684\u538b\u529b\uff08\u70b9\u6743\uff09\u52a0\u4e00\uff0c\u5c0f\u8111\u74dc~~\u75af\u72c2\u8f6c\u52a8~~\uff0c\u8fd9\u4e0d\u662f\u533a\u95f4\u4fee\u6539\u5417\uff01\u90a3\u4e48\u662f\u65f6\u5019\u8fd0\u7528\u849f\u84bb\u6211~~\u552f\u4e00\u4f1a\u7684~~\u4fee\u6539\u533a\u95f4\u7b97\u6cd5\u2014\u2014\u2014**\u5dee\u5206**\u4e86\uff01\n\n\u6211\u4eec\u63d0\u53d6\u8fd9\u4e24\u6bb5\u7684\u4e24\u4e2a\u5173\u952e\u8bcd \u201c**\u6811\u5f62\u7ed3\u6784**\u201d\uff0c\u201c**\u5dee\u5206**\u201d\uff0c~~\u5df4\u5566\u5566\u6478\u4ed9\u5168\u8eab\u53d8~~ \u6811\u4e0a\u5dee\u5206\uff01\n\n\n\u56e0\u6b64\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u975e\u5e38\u6e05\u6670\u4e86\uff1a\n\n1. ~~\u5efa\u6811~~\n2. \u6811\u4e0a\u5dee\u5206\uff08\u7528lca\u8f85\u52a9\u5176\u5b9e\u73b0\uff0c\u5982\u679c\u8fd8\u6709\u5bf9lca\u4e0d\u719f\u7684\u540c\u5b66\u53ef\u4ee5\u524d\u5f80[**P3379 \u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08LCA\uff09**](https://www.luogu.org/problem/P3379)\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e2a\u5728\u6811\u4e0a\u5de8\u6709\u7528\u7684\u7b97\u6cd5\uff09\n\n# Code\uff1a\n```cpp\n/*Coded By Lxhao*/\n/*Full Of Stars*/\n#pragma GCC optimize(2)\n#include <bits/stdc++.h>\nusing namespace std;\n#define re register\n#define r(x) x=read()\n#define c getchar()\n#define ll long long\ninline int read()\n{\n    int w=1,s=0;\n    char ch=c;\n    while(ch>'9'||ch<'0'){if(ch=='-')w=-1;ch=c;}\n    while(ch>='0'&&ch<='9')s=(s<<1)+(s<<3)+ch-'0',ch=c;\n    return s*w;\n}\nconst int maxn=5e4+10;\nint n,k,cnt,x,y,fnl;\nint f[maxn][21],depth[maxn],head[maxn],sum[maxn];\n//f[i][j]\u8868\u793a\u4ee5i\u4e3a\u8d77\u70b9\u5f80\u4e0a\u8df32^j\u4e2a\u70b9\uff0cdepth\u8868\u793a\u6df1\u5ea6\uff0csum\u4e3a\u524d\u7f00\u548c\u6570\u7ec4\nstruct node\n{\n    int to,next,dis;\n}edge[maxn<<1];\ninline void add(int from,int to)\n{\n    edge[++cnt].next=head[from];\n    edge[cnt].to=to;\n    head[from]=cnt;\n}\ninline int max(int a,int b){return a>b?a:b;}\ninline void dfs(int u,int fa)\n{\n    f[u][0]=fa;//2^0=1,\u6240\u4ee5f[u][0]\u5b58\u7684\u662f\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\n    depth[u]=depth[fa]+1;//\u53f6\u5b50\u7ed3\u70b9\u7684\u6df1\u5ea6\u6bd4\u7236\u4eb2\u8282\u70b9\u5927\u4e00\n    for(re int i=1;(1<<i)<=depth[u];++i)f[u][i]=f[f[u][i-1]][i-1];//\u5f80\u4e0a\u8df3\uff08\u500d\u589e\u601d\u60f3\uff09\n    for(re int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if(v!=fa) dfs(v,u);\n    }\n}//\u5efa\u6811\ninline int lca(int u,int v)\n{\n    if(depth[u]<depth[v])swap(u,v);\n    for(re int i=20;i>=0;--i)\n    {\n        if((1<<i)<=depth[u]-depth[v])\n            u=f[u][i];\n    }//u\u4e3a\u6df1\u5ea6\u8f83\u6df1\u7684\u4e00\u70b9\uff0c\u5148\u8df3u\u4f7fu\uff0cv\u8fbe\u5230\u540c\u4e00\u6df1\u5ea6\n    if(u==v) return u;\n    for(re int i=20;i>=0;--i)\n    {\n        if(f[u][i]!=f[v][i])\n        {\n            u=f[u][i];\n            v=f[v][i];\n        }\n    }//\u8fbe\u5230\u540c\u4e00\u6df1\u5ea6\u540e\u4e00\u8d77\u8df3\n    return f[u][0];\n}\ninline void Gmax(int u,int fa)\n{\n    for(re int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if(v!=fa)\n        {\n            Gmax(v,u);\n            sum[u]+=sum[v];\n        }\n    }\n    fnl=max(fnl,sum[u]);\n}//\u7528dfs\u6765\u6c42\u4ee5\u6811\u4e3a\u57fa\u7840\u7684\u67e5\u5206\u6570\u7ec4\u7684\u6700\u5927\u503c\nint main()\n{\n    r(n),r(k);\n    for(re int i=1,u,v;i<=n-1;++i)\n    {\n        r(u),r(v);\n        add(u,v),add(v,u);\n    }//\u5efa\u53cc\u5411\u8fb9\n    dfs(1,0);\n    for(;k;k--)\n    {\n        r(x),r(y);\n        int fa=lca(x,y);\n        ++sum[x],++sum[y];\n        --sum[fa],--sum[f[fa][0]];\n    }//\u6811\u4e0a\u5dee\u5206\u4fee\u6539\u533a\u95f4\u503c\n    Gmax(1,0);//\u6c42\u6700\u503c\n    printf(\"%d\",fnl);\n}\n```\n\u8c22\u8c22\u89c2\u770b\uff0c\u5982\u6709\u4e0d\u8db3\u8bf7\u591a\u6307\u51faqwq",
        "postTime": 1566400551,
        "uid": 133977,
        "name": "Segmentree",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "# \u7b80\u5355\u6811\u5256\n\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\uff0c\u53ea\u628a\u51e0\u4e2a\u64cd\u4f5c\u8bf4\u4e00\u4e0b\uff1a\n\n1\u3001\u6bcf\u4e00\u6b21\u64cd\u4f5c\u90fd\u628ax\u5230y\u7684\u70b9\u6743\u90fd\u52a01\n\n2\u3001\u6700\u540e\u67e5\u4e00\u4e0b\u6574\u4e2a\u6811\u7684\u70b9\u6743\u6700\u5927\u503c\n\n\u53ea\u9700\u8981\u5bf9\u3010\u6a21\u677f\u3011\u6811\u94fe\u5256\u5206 \u7684\u7ebf\u6bb5\u6811\u90e8\u5206\u7565\u52a0\u4fee\u6539\u5c31OK\u4e86\uff0c\u4fee\u6539\u5c31\u662f\u628a\u7d2f\u52a0\u53d8\u6210\u6c42\u6700\u5927\u503c\uff0c\u7b80\u5355\u5f97\u4e0d\u884c\u4e86\u3002\n\n# \u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define maxn 4000001\n#define L(x) (x<<1)\n#define R(x) ((x<<1)|1)\nusing namespace std;\nint tree[maxn],tag[maxn];\nint rev[maxn],dep[maxn],size[maxn],seg[maxn],top[maxn],son[maxn],father[maxn];\nint n,m,root,x,y,z,a[maxn],visx[maxn],visy[maxn],tot;\nint cnt,from[maxn],to[maxn],Next[maxn],head[maxn];\nchar mode;\nvoid add(int x,int y){\n    cnt++;\n    from[cnt]=x;to[cnt]=y;\n    Next[cnt]=head[x];head[x]=cnt;\n}\nvoid pushdown(int node,int begin,int end){\n    if(tag[node]){\n        tag[L(node)]+=tag[node];\n        tag[R(node)]+=tag[node];\n        int mid=(begin+end)>>1;\n        tree[L(node)]+=tag[node];\n        tree[R(node)]+=tag[node];\n        tag[node]=0;\n    }\n}\nvoid update(int node,int begin,int end,int x,int y,int val){\n    if(begin>y||end<x)return;\n    if(begin>=x&&end<=y){\n        tag[node]+=val;\n        tree[node]+=val;\n        return;\n    }else{\n        pushdown(node,begin,end);\n        int mid=(begin+end)>>1;\n        if(x<=mid)update(L(node),begin,mid,x,y,val);\n        if(y>mid) update(R(node),mid+1,end,x,y,val);\n        tree[node]=max(tree[L(node)],tree[R(node)]);\n    }\n}\nint query(int node,int begin,int end,int x,int y){\n    if(begin>=x&&end<=y){\n        return tree[node];\n    }else{\n        pushdown(node,begin,end);\n        int mid=(begin+end)>>1,sum=0;\n        if(x<=mid)sum=max(query(L(node),begin,mid,x,y),sum);\n        if(y>mid) sum=max(query(R(node),mid+1,end,x,y),sum);\n        return sum;\n    }\n}\nint dfs1(int x){\n    size[x]=1;\n    dep[x]=dep[father[x]]+1;\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int v=to[i],big=0;\n        if(father[x]==v)continue;\n        father[v]=x;\n        big=dfs1(v);\n        size[x]+=big;\n        if(big>size[son[x]])son[x]=v;\n    }\n    return size[x]; \n}\nvoid dfs2(int x){\n    if(son[x]){\n        seg[son[x]]=++seg[0];\n        top[son[x]]=top[x];\n        rev[seg[0]]=son[x];\n        dfs2(son[x]);\n    }\n    for(int i=head[x];i!=-1;i=Next[i]){\n        int v=to[i];\n        if(!top[v]){\n            seg[v]=++seg[0];\n            top[v]=v;\n            rev[seg[0]]=v;\n            dfs2(v);\n        }\n    }\n}\nint treequery(int x){\n    return query(1,1,seg[0],seg[x],seg[x]+size[x]-1);\n}\nvoid linkadd(int x,int y,int z){\n    int fx=top[x],fy=top[y];\n    while(fx!=fy){\n        if(dep[fx]<dep[fy])swap(x,y),swap(fx,fy);\n        update(1,1,seg[0],seg[fx],seg[x],z);\n        x=father[fx];fx=top[x];\n    }\n    if(dep[x]>dep[y])swap(x,y);\n    update(1,1,seg[0],seg[x],seg[y],z);\n}\nint main(){\n    memset(head,-1,sizeof(head));\n    scanf(\"%d%d\",&n,&m);root=1;\n    for(int i=1;i<=n-1;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);add(y,x);\n    }\n    dfs1(root);\n    seg[root]=++seg[0];\n    rev[seg[0]]=root;\n    top[root]=root;\n    dfs2(root);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&x,&y);\n        linkadd(x,y,1);\n    }\n    printf(\"%d\\n\",treequery(root));\n}\n```",
        "postTime": 1550838811,
        "uid": 58711,
        "name": "hyfhaha",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u770b\u505a[P3258 [JLOI2014]\u677e\u9f20\u7684\u65b0\u5bb6](https://www.luogu.org/problemnew/show/P3258)\u7684\u7b80\u5316\u7248\u3002\n\n\u601d\u8def\u663e\u7136\uff0c\u6811\u5256LCA+\u5dee\u5206\n\n\u53e6\u5916\uff0c$a[b[c[d]]]=d[c][b][a]$\n```\n#include<cstdio>\nconst int N=50050;\nint to[N<<1],la[N<<1],fi[N<<1],CNT;\ninline void add_edge(int u,int v){ //\u5b58\u8fb9\n\tto[++CNT]=v;la[CNT]=fi[u];fi[u]=CNT;\n\tto[++CNT]=u;la[CNT]=fi[v];fi[v]=CNT;\n}\nint dep[N],fa[N],siz[N],son[N]; //\u7b2c\u4e00\u904ddfs\u9700\u8981\nint rnk[N],bh[N],top[N],BH; //\u7b2c\u4e8c\u904ddfs\u9700\u8981\nvoid dfs1(int u,int v,int depth){\n\tdep[u]=depth;fa[u]=v;siz[u]=1; //\u8bbe\u7f6e\u6df1\u5ea6\uff0c\u7236\u4eb2\uff0c\u5927\u5c0f\n\tfor(int i=fi[u];i;i=la[i])\n\tif(to[i]!=v){\n\t\tdfs1(to[i],u,depth+1);siz[u]+=siz[to[i]]; //\u5b50\u6811\u6700\u5927\u7684\u4e3a\u513f\u5b50\n\t\tif(i[to][siz]>u[son][siz]) son[u]=to[i];\n\t}\n}\nvoid dfs2(int u,int v){\n\ttop[u]=v;bh[u]=BH;rnk[BH]=u;BH++; //\u8bbe\u7f6etop\uff0c\u7f16\u53f7\uff0c\u7f16\u53f7\u5bf9\u5e94\u8282\u70b9\n\tif(son[u]) dfs2(son[u],v); //\u4f18\u5148\u641c\u7d22\u91cd\u513f\u5b50\n\tfor(int i=fi[u];i;i=la[i])\n\tif(to[i]!=fa[u]&&to[i]!=son[u])\n\tdfs2(to[i],to[i]);\n}\nint lca(int u,int v){ //\u6811\u5256LCA\n\twhile(top[u]!=top[v]){\n\t\tif(u[top][dep]<v[top][dep]) u^=v^=u^=v;\n\t\tu=u[top][fa];\n\t}\n\treturn dep[u]<dep[v]?u:v;\n}\nint n,m,p,q,f[N],ans;\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<n;i++)\n\tscanf(\"%d%d\",&p,&q),add_edge(p,q);\n\tdfs1(1,0,1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++){//\u663e\u7136\uff0c\u4e24\u8282\u70b9+1\uff0cLCA\u53ca\u5176\u7236\u4eb2-1\n\t\tscanf(\"%d%d\",&p,&q);int lc=lca(p,q);\n\t\tp[bh][f]++;q[bh][f]++;lc[bh][f]--;lc[fa][bh][f]--;\n\t}\n\tfor(int i=n;i>=1;i--){\n\t\tans=ans<f[i]?f[i]:ans;//\u66f4\u65b0\u7b54\u6848\n\t\ti[rnk][fa][bh][f]+=f[i];\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1525576004,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "GPP\u6811\u94fe\u5256\u5206\n\n\u50a8\u5b58\uff1a\n\ne~\u8fb9\u76f8\u5173\uff1b\n\np~ \u70b9\u76f8\u5173\uff1b\n\nt~\u7ebf\u6bb5\u6811\u76f8\u5173\uff1b\n\n\u51fd\u6570\uff1a\n\nDFS1 get \u70b9\u7684\u6df1\u5ea6\uff0c\u7236\u4eb2\uff0c\u91cd\u513f\u5b50\uff0c\u5b50\u6811\u5927\u5c0f\uff1b\n\nDFS2 get \u70b9\u7684dfs\u5e8f\uff0c\u94fe\u9996\u8282\u70b9\uff1b\n\nchange \u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff1b\n\n```cpp\ndown \u7ebf\u6bb5\u6811\u6807\u8bb0\u4e0b\u4f20\uff1b\n#include<cstdio>\nconst int maxn=5e4+10;\ninline int min_(int x,int y){return x<y?x:y;}\ninline int max_(int x,int y){return x>y?x:y;}\ninline int swap_(int&x,int&y){x^=y,y^=x,x^=y;}\nint n,k;\nint a,b;\nint eh[maxn],hs,et[maxn<<1],en[maxn<<1];\nint pd[maxn],pf[maxn],pws[maxn],psz[maxn],pps,pp[maxn],pt[maxn];\nint ts[maxn<<2],tf[maxn<<2];\nvoid dfs1(int k,int f,int d){\n    psz[k]=1,pd[k]=d,pf[k]=f;\n    for(int i=eh[k];i;i=en[i])\n    if(et[i]!=f){\n        dfs1(et[i],k,d+1);\n        psz[k]+=psz[et[i]];\n        if(psz[et[i]]>psz[pws[k]]) pws[k]=et[i];\n    }\n}\nvoid dfs2(int k,int t){\n    pp[k]=++pps,pt[k]=t;\n    if(pws[k]) dfs2(pws[k],t);\n    for(int i=eh[k];i;i=en[i])\n    if(et[i]!=pf[k]&&et[i]!=pws[k])\n    dfs2(et[i],et[i]);\n}\nvoid down(int k){\n    int ls=k<<1,rs=ls|1;\n    ts[ls]+=tf[k],ts[rs]+=tf[k];\n    tf[ls]+=tf[k],tf[rs]+=tf[k];\n    tf[k]=0;\n}\nvoid change(int k,int l,int r,int al,int ar){\n    if(l==al&&r==ar){ts[k]++,tf[k]++;return;}\n    if(tf[k]) down(k);\n    int mid=l+r>>1,ls=k<<1,rs=ls|1;\n    if(al<=mid) change(ls,l,mid,al,min_(ar,mid));\n    if(ar>mid) change(rs,mid+1,r,max_(al,mid+1),ar);\n    ts[k]=max_(ts[ls],ts[rs]);\n}\nint main(){\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<n;i++){\n        scanf(\"%d%d\",&a,&b);\n        ++hs,et[hs]=b,en[hs]=eh[a],eh[a]=hs;\n        ++hs,et[hs]=a,en[hs]=eh[b],eh[b]=hs;\n    }\n    dfs1(1,0,1);\n    dfs2(1,1);\n    while(k--){\n        scanf(\"%d%d\",&a,&b);\n        while(pt[a]!=pt[b]){\n            if(pd[pt[a]]<pd[pt[b]]) swap_(a,b);\n            change(1,1,n,pp[pt[a]],pp[a]);\n            a=pf[pt[a]];\n        }\n        if(pd[a]<pd[b]) swap_(a,b);\n        change(1,1,n,pp[b],pp[a]);\n    }\n    printf(\"%d\\n\",ts[1]);\n    return 0;\n}\n```\n\u5410\u69fd\u4e00\u4e0b\uff0c\u697c\u4e0b\u5bf9\u7ebf\u6bb5\u4e0a\u503c\u7684\u5904\u7406\u6709\u95ee\u9898\uff0c\u65b9\u6cd5\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u903b\u8f91\u6709\u95ee\u9898\uff0c\u4e0d\u4fe1\u5404\u4f4d\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u8fd9\u7ec4\u6570\u636e\uff1a\n2 4\n1 2\n\n2 1\n2 2\n2 2\n2 1",
        "postTime": 1496996497,
        "uid": 21020,
        "name": "Long\u00b7J\u00b7William",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u771f\u7684\u4e0d\u9700\u8981\u6811\u5256\u5566\n\nLCA\u88f8\u9898\n\n\u8fd9\u662f\u4e00\u4e2a\u6807\u51c6\u7684\u6811\u4e0a\u5dee\u5206\u95ee\u9898\n\n\u505a\u6cd5\u662f\u8fd9\u6837\u7684\n\n\u5bf9\u4e8e\u4e00\u4e2a\u8def\u5f84(u,v)\n\n\u4f7f\u5f97u v \u6743\u503c\u5404+1\n\nlca(u,v)\u548clca(u,v)\u7684\u7236\u4eb2 \u6743\u503c\u90fd-1\n\n\u7136\u540e\u6700\u540e\u505a\u4e00\u904ddfs \u4ece\u53f6\u5b50\u5f00\u59cb \u4f7f\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u7b49\u4e8e\u5176\u5b50\u6811\u7684\u6743\u503c\u548c\n\n\u90a3\u4e48\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u5c31\u662f\u4ed6\u7684\u7b54\u6848\u4e86\n\n\u8bb2\u9053\u7406\u5f88\u591aUSACO\u9898\u771f\u7684\u975e\u5e38\u975e\u5e38\u7b80\u5355\u5566 \u800c\u4e14\u90fd\u6709\u4e2d\u6587\u7ffb\u8bd1\n\n\u6d1b\u8c37\u7684\u5e7f\u5927OIER\u4eec \u662f\u4e0d\u662f\u770b\u89c1\u82f1\u6587\u5c31\u6253\u6035\u554a\u2026\u2026\n\n\u5176\u5b9e\u8fd9\u4e9b\u9898\u5b8c\u5168\u53ef\u4ee5\u505a\u4e00\u505a\u561b QAQ\n\n\u4e0a\u4ee3\u7801\n\n[codec]\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\nconst int N=50005;\nint n=0,k=0;\nint head[N*2],next[N*2],to[N*2],edge=0;\nint fa[N][20],depth[N],w1[N],w2[N];\nint ans=0;\ninline void addEdge(int u,int v) {\n    to[edge]=v,next[edge]=head[u],head[u]=edge++;\n    to[edge]=u,next[edge]=head[v],head[v]=edge++;\n}\nvoid dfs1(int x,int f,int d) {\n    depth[x]=d;\n    fa[x][0]=f;\n    for (int e=head[x];~e;e=next[e]) {\n        int& v=to[e];\n        if (v!=f)\n            dfs1(v,x,d+1);\n    }    \n}\ninline void init() {\n    for (int j=1;(1<<j)<=n;++j)\n        for (int i=1;i<=n;++i)\n            if (fa[i][j-1]!=-1)\n                fa[i][j]=fa[fa[i][j-1]][j-1];\n}\ninline int lca(int u,int v) {\n    if (depth[u]<depth[v])\n        swap(u,v);    \n    int i=0;\n    for (;(1<<i)<=n;++i)\n        ;\n    --i;\n    for (int j=i;j>=0;--j)\n        if (depth[u]-(1<<j)>=depth[v])\n            u=fa[u][j];\n    if (u==v)\n        return u;\n    for (int j=i;j>=0;--j)\n        if (fa[v][j]!=fa[u][j] && fa[u][j]!=-1) {\n            u=fa[u][j];\n            v=fa[v][j];\n        }\n    return fa[u][0];\n}\ninline void plus(int x,int y) {\n    int z=lca(x,y);\n    ++w1[x],++w1[y];\n    --w1[z];\n    if (fa[z][0]!=-1)\n        --w1[fa[z][0]];\n}\nvoid dfs2(int x,int f) {\n    w2[x]=w1[x];\n    for (int e=head[x];~e;e=next[e]) {\n        int& v=to[e];\n        if (v!=f) {\n            dfs2(v,x);\n            w2[x]+=w2[v];\n        }\n    }        \n    ans=max(ans,w2[x]);\n}\nint main(void) {\n    memset(head,-1,sizeof(head));\n    memset(fa,-1,sizeof(fa));\n    scanf(\"%d %d\",&n,&k);\n    for (int i=1;i<=n-1;++i) {\n        int u=0,v=0;\n        scanf(\"%d %d\",&u,&v);\n        addEdge(u,v);\n    }    \n    dfs1(1,-1,1);\n    init();\n    while (k--) {\n        int x=0,y=0;\n        scanf(\"%d %d\",&x,&y);\n        plus(x,y);\n    } \n    dfs2(1,-1);\n    printf(\"%d\\n\",ans);\n    return 0;\n} \n[codec/]\n```",
        "postTime": 1478674800,
        "uid": 13433,
        "name": "QwQ2000",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "1\u3001\u6811\u4e0a\u5dee\u5206\u677f\u5b50\u9898\uff08\u53ef\u4ee5\u7528\u6765\u6811\u4e0a\u5dee\u5206\u5165\u95e8\u3002\n \n2\u3001\u6811\u4e0a\u5dee\u5206\uff1a\u901a\u4fd7\u7406\u89e3\u4e3a\u628a\u4e00\u6761\u6811\u94fe\u4e0a\u7684\u6574\u4f53\u4fee\u6539\u64cd\u4f5c\u8f6c\u5316\u4e3a\u8fd9\n\n\u6761\u94fe\u4e24\u7aef\u7aef\u70b9\u7684\u4fee\u6539\u64cd\u4f5c\u6765\u4f18\u5316\u65f6\u95f4\u3002\n\n3\u3001\u5206\u7c7b\uff1a\uff081\uff1a\u70b9\u5dee\u5206\n\n\t\t\uff082\uff1a\u8fb9\u5dee\u5206\n         \n4\u3001\u5b9e\u73b0\uff1a\u70b9\u5dee\u5206\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u4e00\u4e2a\u8ba1\u6570\u7684\u6570\u7ec4 \u4f8b\u5982 cnt[x] \u6765\u8bb0\u5f55\n\n\u5dee\u5206\u7684\u6743\u503c\u3002\u800c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6240\u6709\u8282\u70b9\uff08\u5305\u62ec\u8fd9\u4e2a\u70b9\uff09\u7684\n\ncnt[i]\u4e4b\u548c\u5373\u4e3a\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\u3002\n\n5\u3001\u4fee\u6539\uff1a\u4fee\u6539\u4e00\u6761\u6811\u94fe\u65f6\u9700\u8981\u77e5\u9053\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9 \u548c \u4e24\u7aef\u70b9\u7684\n\nlca\uff08\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09,\u4e24\u7aef\u70b9cnt\u6570\u7ec4\u5404\u52a0\u4e0a\u8981\u4fee\u6539\u7684\u6743\u503c k(\u6b63\u8d1f\n\n\u90fd\u53ef\u4ee5)\uff0ccnt[lca]\u51cf\u53bb\u8981\u4fee\u6539\u7684\u6743\u503ck,\u5bf9\u4e8elca\u7684\u7236\u4eb2\u8282\u70b9\n\nfa[lca]\u5176\u5bf9\u5e94\u7684cnt[fa[lca]]\u4e5f\u8981\u51cf\u53bbk\u3002\n\n6\u3001\u67e5\u8be2\uff1a\u65e0\u6839\u6811\u53ef\u4ee5\u89c6\u4f5c\u4e00\u9897\u6709\u6839\u6811\uff0c\u4ee5\u4efb\u4e00\u70b9\u4e3a\u6839\u53bb\u904d\u5386\u6574\u9897\n\n\u6811\u7684\u65f6\u5019\uff0c\u5728\u56de\u6eaf\u8fc7\u7a0b\u4e2d\u53bb\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u5b50\u6811\u7684cnt\u548c\uff0c\u5e76\u4e14\u987a\u4fbf\u66f4\n\n\u65b0ans\u7684\u6700\u5927\u503c\u3002\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\nusing namespace std;\ntypedef long long ll;\n\nstruct Edge{int next,to;}ed[200100];\nint n,m,head[100100],num_edge;\nint fa[100100][22],dep[100100];\nll ans,cnt[100100];\nbool vis[100100];\n\nvoid Pre(int x,int dept)\n\t{\n\t\tvis[x]=1;\n\t\tdep[x]=dept;\n\t\tfor(int i=1;i<=20;i++)\n\t\t{\n\t\t\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\t\t}\n\t\tfor(int i=head[x];i;i=ed[i].next)\n\t\t{\n\t\t\tint t=ed[i].to;\n\t\t\tif(vis[t]) continue;\n\t\t\tfa[t][0]=x;\n\t\t\tPre(t,dept+1);\n\t\t}\n\t}\nll LCA(int x,int y)\n\t{\n\t\tif(dep[x]<dep[y])\n\t\t{\n\t\t\tswap(x,y);\n\t\t}\n\t\tfor(int i=20;i>=0;i--)\n\t\t{\n\t\t\tif(dep[fa[x][i]]>=dep[y]) x=fa[x][i];\n\t\t\tif(x==y) return x;\n\t\t}\n\t\tfor(int i=20;i>=0;i--)\n\t\t{\n\t\t\tif(fa[x][i]!=fa[y][i]) \n\t\t\t{\n\t\t\t\tx=fa[x][i];\n\t\t\t\ty=fa[y][i];\n\t\t\t}\n\t\t}\n\t\treturn fa[x][0];\n\t}\nvoid DFS(int x)\n\t{\n\t\tvis[x]=1;\n\t\tfor(int i=head[x];i;i=ed[i].next)\n\t\t{\n\t\t\tint t=ed[i].to;\n\t\t\tif(vis[t]) continue;\n\t\t\tDFS(t);\n\t\t\tcnt[x]+=cnt[t];\n\t\t}\n\t\tans=max(cnt[x],ans);\n\t}\nvoid Add(int f,int t)\n\t{\n\t\ted[++num_edge].next=head[f];\n\t\ted[num_edge].to=t;\n\t\thead[f]=num_edge;\n\t}\nint main()\n\t{\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(int i=1;i<=n-1;i++)\n\t\t{\n\t\t\tint f,t;\n\t\t\tscanf(\"%d%d\",&f,&t);\n\t\t\tAdd(f,t);\n\t\t\tAdd(t,f);\t\n\t\t}\t\n\t\tPre(1,0);\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint f,t;\n\t\t\tscanf(\"%d%d\",&f,&t);\n\t\t\tcnt[f]++;\n\t\t\tcnt[t]++;\n\t\t\tint lca=LCA(f,t);\n\t\t\tcnt[lca]--;\n\t\t\tcnt[fa[lca][0]]--;\n\t\t}\n\t\tmemset(vis,0,sizeof(vis));\n\t\tDFS(1);\n\t\tprintf(\"%lld\",ans);\n\t\treturn 0;\n\t } \n```\n",
        "postTime": 1573053190,
        "uid": 158279,
        "name": "Margoo\u221a",
        "ccfLevel": 0,
        "title": "P3128 [USACO15DEC]\u6700\u5927\u6d41Max Flow"
    },
    {
        "content": "$$\\color{cornflowerblue}{\\mathcal{Treaker}}$$\n# \u6811\u94fe\u5256\u5206\n\u8fd9\u4e0d\u5c31\u662f\u4e2a\u6811\u5256\u88f8\u9898\u561b\u3002\n\n\u4ed6\u7684\u6bcf\u6b21\u8fd0\u8f93\u8def\u7ebf\u5c31\u76f8\u5f53\u4e8e\u7ed9\u6811\u4e0a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u52a0\u4e0a1\u3002\n\n\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u6253\u4e2a\u6807\u8bb0\u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 \n\n\u6700\u540e\u67e5\u8be2\u65f6\uff0c\u76f4\u63a5\u8f93\u51faroot\u7684\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u6307\u9488\u5927\u6cd5\u543c\u554a\uff01\uff01\uff01\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <cstring>\nusing namespace std;\nconst int N = 50005;\ninline int read()\n{\n\tint x = 0 , f = 1;\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9')\t{if(ch == '-')\tf = -1; ch = getchar();}\n\twhile(ch >= '0' && ch <= '9') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\n\treturn x * f;\n}\nint n , m , cnt;\nint size[N] , dep[N] , fa[N] , top[N] , hs[N] , dfn[N] , id[N];\nstruct Tree_Div\n{\n\tstruct Edge\n\t{\n\t\tint to; Edge *nxt;\n\t\tEdge(int to,Edge *nxt) : to(to) , nxt(nxt) {}\n\t}*head[N];\n\tinline void add(int u,int v) {head[u] = new Edge(v,head[u]);}\n\tvoid get_tree(int x)\n\t{\n\t\tsize[x] = 1;\n\t\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tif(dep[to]) continue;\n\t\t\tdep[to] = dep[x] + 1;\n\t\t\tfa[to] = x;\n\t\t\tget_tree(to);\n\t\t\tsize[x] += size[to];\n\t\t\tif(size[to] > size[hs[x]]) hs[x] = to;\n\t\t}\n\t}\n\tvoid dfs(int x,int topfa)\n\t{\n\t\ttop[x] = topfa;\n\t\tdfn[x] = ++cnt;\n\t\tid[cnt] = x;\n\t\tif(hs[x]) dfs(hs[x],topfa);\n\t\tfor(Edge *i = head[x];i;i = i -> nxt)\n\t\t{\n\t\t\tint to = i -> to;\n\t\t\tif(to == hs[x] || to == fa[x]) continue;\n\t\t\tdfs(to,to);\n\t\t}\n\t}\n\t#define mid ((p -> l + p -> r) >> 1)\n\tstruct node\n\t{\n\t\tnode *ls , *rs;\n\t\tint l , r , tag , maxn;\n\t\tnode(int l,int r) : l(l) , r(r) {ls = rs = NULL;tag = maxn = 0;}\n\t\tinline void up() {maxn = max(ls -> maxn,rs -> maxn);}\n\t\tinline void down() \n\t\t{\n\t\t\tls -> tag += tag; ls -> maxn += tag;\n\t\t\trs -> tag += tag; rs -> maxn += tag;\n\t\t\ttag = 0;\n\t\t}\n\t}*root;\n\tvoid build(node *&p,int l,int r)\n\t{\n\t\tp = new node(l,r);\n\t\tif(l == r) return ;\n\t\tbuild(p -> ls,l,mid); build(p -> rs,mid+1,r);\n\t}\n\tvoid chenge(node *p,int x,int y)\n\t{\n\t\tif(x <= p -> l && p -> r <= y) return (void)(p -> tag ++ , p -> maxn ++);\n\t\tif(p -> tag) p -> down();\n\t\tif(x <= mid) chenge(p -> ls,x,y);\n\t\tif(y > mid) chenge(p -> rs,x,y);\n\t\tp -> up();\n\t}\n\tinline void sec_chenge(int x,int y)\n\t{\n\t\tif(dep[x] < dep[y]) swap(x,y);\n\t\twhile(top[x] != top[y])\n\t\t{\n\t\t\tif(dep[top[x]] < dep[top[y]]) swap(x,y);\n\t\t\tchenge(root,dfn[top[x]],dfn[x]);\n\t\t\tx = fa[top[x]];\n\t\t}\n\t\tif(dep[x] < dep[y]) swap(x,y);\n\t\tchenge(root,dfn[y],dfn[x]);\n\t}\n\tinline void LOL()\n\t{\n\t\tn = read(); m = read();\n\t\tfor(int i = 1 , u , v;i < n;i ++)\n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\tadd(u,v); add(v,u);\n\t\t} dep[1] = 1;\n\t\tget_tree(1); dfs(1,1);\n\t\tbuild(root,1,n);\n\t\tfor(int i = 1 , u , v;i <= m;i ++)\n\t\t{\n\t\t\tu = read(); v = read();\n\t\t\tsec_chenge(u,v);\n\t\t}\n\t\tprintf(\"%d\\n\",root->maxn);\n\t}\n}CF;\nint main(){CF.LOL();}\n```\n",
        "postTime": 1570578995,
        "uid": 153898,
        "name": "Treaker",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "## \u601d\u8def\n\n\u5b9e\u9645\u4e0a\u5c31\u662f\u6c42\u88ab\u6bcf\u4e2a\u70b9\u88ab\u4e0d\u540c\u7684\u8def\u5f84\u8986\u76d6\u4e86\u51e0\u6b21\u3002\u53ea\u8981\u628a\u6bcf\u6761\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u7684\u7b54\u6848\u52a01\u5373\u53ef\u3002\u6811\u5256\u548c\u6811\u72b6\u6570\u7ec4\u6216\u7ebf\u6bb5\u6811\u53ef\u4ee5\u8f7b\u677e\u641e\u5b9a\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u7528LCA\u548c\u6811\u4e0a\u67e5\u5206\u66f4\u52a0\u4f18\u7f8e\u800c\u5feb\u901f\u5730\u89e3\u51b3\u3002\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\uff0c\u5c06\u4e24\u4e2a\u7aef\u70b9\u7684\u503c\u52a01\uff0c\u5b83\u4eec\u7684LCA\u548cLCA\u7684\u7236\u4eb2\u5206\u522b\u51cf1\uff0c\u6700\u540eDFS\u7d2f\u52a0\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\uff0c\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n\u4e0d\u540c\u7684\u6a21\u5757\u5199\u5f97\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u53d8\u91cf\u548c\u51fd\u6570\u89e3\u91ca\u5982\u4e0b\uff1a\n\n- $l$\u6570\u7ec4\u548c$head$\u6570\u7ec4\uff1a\u524d\u5411\u661f\u5b58\u8fb9\u3002\n- $s$\u6570\u7ec4\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\u3002\n- $d$\u6570\u7ec4\uff1a\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6\u3002\n- $p[i][j]$\uff1a\u7b2cj\u4e2a\u70b9\u5411\u4e0a\u8d70i^2\u6b65\u5230\u8fbe\u7684\u70b9\u3002\n- $Pre$_$Work$\u51fd\u6570\uff1a\u9884\u5904\u7406\u51fad\u548cp\u3002\n- $Solve$\u51fd\u6570\uff1a\u6c42LCA\uff0c\u5355\u70b9\u4fee\u6539\u3002\n- $Sum$\u51fd\u6570\uff1a\u7d2f\u52a0\u3002\n```\n#include <bits/stdc++.h>\n#define maxn 50001\nusing namespace std;\nstruct Edge{\n    int to,next;\n    Edge(int a=0,int b=0){\n        to=a,next=b;\n    }\n}l[maxn*4];\nint head[maxn],s[maxn],n,k,t1,t2;\nint d[maxn],p[30][maxn],cnt,ans;\nvoid Add(int x,int y){\n    l[++cnt]=Edge(y,head[x]);\n    head[x]=cnt;\n}\nvoid Pre_Work(int u,int f){\n    d[u]=d[f]+1;\n    p[0][u]=f;\n    for (int i=1;(1<<i)<=d[u];i++)\n    p[i][u]=p[i-1][p[i-1][u]];\n    for (int i=head[u];i;i=l[i].next){\n        int v=l[i].to;\n        if (v!=f) Pre_Work(v,u);\n    }\n}\nvoid Solve(int a,int b){\n    int lca;s[a]++,s[b]++;\n    if (d[a]<d[b]) swap(a,b);\n    for (int i=28;i>=0;i--)\n    if (d[p[i][a]]>=d[b]) a=p[i][a];\n    if (a==b) lca=a;\n    else {\n        for (int i=28;i>=0;i--)\n        if (p[i][a]!=p[i][b])\n        a=p[i][a],b=p[i][b];\n        lca=p[0][a];\n    }\n    s[lca]--;\n    s[p[0][lca]]--;\n}\nvoid Sum(int u,int f){\n    for (int i=head[u];i;i=l[i].next){\n        int v=l[i].to;\n        if (v==f) continue;\n        Sum(v,u);\n        s[u]+=s[v];\n    }\n    ans=max(s[u],ans);\n}\nint main(){\n    ios::sync_with_stdio(false);\n    cin>>n>>k;\n    for (int i=1;i<n;i++){\n        cin>>t1>>t2;\n        Add(t1,t2);\n        Add(t2,t1);\n    }\n    Pre_Work(1,0);\n    for (int i=1;i<=k;i++){\n        cin>>t1>>t2;\n        Solve(t1,t2);\n    }\n    Sum(1,0);\n    cout<<ans<<endl;\n}\n```",
        "postTime": 1523504998,
        "uid": 37158,
        "name": "XG_Zepto",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u975e\u5e38\u5f00\u5fc3\uff0c\u56e0\u4e3a1A\u8fc7\u4e86...\u4e4b\u524d\u505aNOIP2015\u8fd0\u8f93\u8ba1\u5212\u65f6\uff0c\u81ea\u5df1YY\u51fa\u4e86\u8fb9\u4e0a\u5dee\u5206\uff08\u8fd0\u6c14....\uff09\uff0c\u7136\u540e\u5c31\u60f3\u6765\u8bd5\u4e00\u8bd5\u70b9\u4e0a\u5dee\u5206\uff0c\u7ed3\u679c\u8ba9\u6211\u9ad8\u5174...\n\n\u5982\u679c\u4e0d\u7406\u89e3\u6811\u4e0a\u5dee\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u8bb2\u4e2a\u5927\u6982\uff1a\u5bf9\u4e8e\u6b64\u9898\u6765\u8bf4\uff0c\u5c31\u662f\u8981\u6c42\u7ecf\u8fc7\u6b21\u6570\u6700\u591a\u7684\u70b9\u7684\u6b21\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u6765\u8bf4,\u5982\u679c\u8981\u60f3\u7ecf\u8fc7\u5b83\u7684\u8bdd\uff0c\u5fc5\u987b\u7b26\u5408\u67d0\u6761\u8def\u5f84\u7684\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u70b9\u5728\u5176\u5b50\u6811\u5185,\u6240\u4ee5\u5bf9\u4e0e\u67d0\u6761\u8def\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u90fd\u5728\u5176\u5b50\u6811\u5185\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u662f\u7ecf\u8fc7\u8be5\u70b9\u7684,\u4f46\u4e0d\u7ecf\u8fc7\u8be5\u70b9\u7684\u7236\u8282\u70b9.\u6240\u4ee5\u6211\u4eec\u5f97\u4ee4value[s[i]]++,value[t[i]]--;\uff08\u56e0\u4e3a\u7aef\u70b9\u8868\u793as[i],t[i]\u7684\u5b50\u6811\u7684\u672b\u7aef\uff08\u5927\u6982\u8fd9\u610f\u601d\uff0c\u8bf4\u4e0d\u592a\u6e05\u695a...2333\u7406\u89e3\u4e00\u4e0b...\u5c31\u662f\u8fd9\u4e24\u70b9\u4ee3\u8868\u8fd9\u4e24\u70b9\u7684\u5b50\u6811\u8d70\u5b8c\u4e86.\u6240\u4ee5\u5f97\u76f4\u63a5+1\uff0c\u56e0\u4e3a\u540e\u9762\u6ca1\u6cd5\u66f4\u65b0\u4e86\uff09\uff09value[lca(s[i],t[i])]--,value[fa[lca(s[i],t[i])]]--;\u5173\u4e8e\u4e3a\u4ec0\u4e48\u8981\u4f7flca\u7684\u7236\u8282\u70b9-1\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u4e00\u68f5\u6811\uff0c1\u4e3a\u6839\u8282\u70b9\uff0c2\u4e3a1\u7684\u552f\u4e00\u5b50\u8282\u70b9\uff0c3\uff0c4\u4e3a2\u7684\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u4e14\u8def\u5f84\u4e3a3->4.\u90a3\u4e48\u4e0d-1\u7684\u8bdd\uff0c\u5f97\u51fa\u7684\u7b54\u6848\u5c31\u6709value[1]=1,\u663e\u7136\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684,\u672c\u6765\u662f\u8be5value[lca]-2\u7684\uff0c\u4f46\u662flca\u5b58\u5728\u6b64\u6761\u8def\u5f84\u4e0a\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5269\u4e0b\u7684-1\u5ef6\u540e\u5904\u7406\u5728lca\u7684\u7236\u8282\u70b9\u4e0a\uff0c\u5bf9\u7b54\u6848\u65e0\u5f71\u54cd...\n\n\u73b0\u5728\u8003\u8651\u8ba1\u7b97\uff0c\u5982\u679c\u6211\u4eec\u6309\u7167\u79fb\u52a8\u7684\u987a\u5e8f\u6765\u8ba1\u7b97\uff0c\u663e\u7136\u9000\u5316\u4e3a\u6734\u7d20\u7b97\u6cd5.\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62DP\u4fdd\u5b58\u72b6\u6001,\n\nvalue[i]\u8868\u793a\u5305\u542bi\u70b9\u7684\u5b50\u6811\u4e2d\u53ea\u5b58\u5728\u4e00\u6761\u8def\u5f84\u7684\u4e00\u4e2a\u7aef\u70b9\u4ee5\u53ca\u4ee5\u8be5\u5e97\u4e3alca\u7684\u8def\u5f84\u7ecf\u8fc7i\u70b9\u7684\u6b21\u6570\uff0c\u7ecf\u5178\u7684DP\u65b9\u7a0b\uff1avalue[i]+=value[j],j\u4e3ai\u7684\u5b50\u8282\u70b9\uff0c\u518d\u6c42\u51fa\u6700\u5927\u503c\u5373\u53ef..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<stdio.h>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nchar ch;\ninline void read(int & x)\n{\n    x=0;\n    ch=getchar();\n    while(ch<'0'||ch>'9') ch=getchar();\n    while(ch>='0'&&ch<='9') x=x*10+ch-'0',ch=getchar();\n}\nstruct Edge\n{\n    int to,next;\n}edge[100001];\nint cnt,head[50001];\nvoid Addedge(int u,int v)\n{\n    edge[++cnt].to=v;\n    edge[cnt].next=head[u];\n    head[u]=cnt;\n}\nint s[100001],t[100001];\nint deep[50001];\nint p[50001][20];\nvoid dfs(int u,int fa)\n{\n    for(int i=head[u];i;i=edge[i].next)\n    {\n        Edge & e=edge[i];\n        if(e.to==fa) continue;\n        deep[e.to]=deep[u]+1;\n        p[e.to][0]=u;\n        dfs(e.to,u);\n    }\n}\nint lca(int a,int b)\n{\n    int i,j;\n    if(deep[a]<deep[b]) swap(a,b);\n    for(i=0;(1<<i)<=deep[a];i++);\n    i--;\n    for(j=i;j>=0;j--)\n    {\n        if(deep[a]-(1<<j)>=deep[b])\n        {\n            a=p[a][j];\n        }\n    }\n    if(a==b) return a;\n    for(j=i;j>=0;j--)\n    {\n        if(p[a][j]!=p[b][j])\n        {\n            a=p[a][j];\n            b=p[b][j];\n        }\n    }\n    return p[a][0];\n}\nint size[100001];\nint value[100001];\nint index[100001];\nint main()\n{\n    int n,k;\n    read(n),read(k);\n    int x,y;\n    for(int i=1;i<=n-1;i++)\n    {\n        read(x);read(y);\n        size[x]++;\n        size[y]++;\n        Addedge(x,y);\n        Addedge(y,x);\n    }\n    for(int i=1;i<=k;i++)\n    {\n        read(s[i]);read(t[i]);\n    }\n    dfs(1,0);\n    for(int j=1;(1<<j)<=n;j++)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            if(p[i][j-1]) p[i][j]=p[p[i][j-1]][j-1];\n        }\n    }\n    int LCA;\n    for(int i=1;i<=k;i++)\n    {\n        LCA=lca(s[i],t[i]);\n        value[LCA]--;\n        value[p[LCA][0]]--;\n        value[s[i]]++;value[t[i]]++;\n    }\n    index[1]=size[1];\n    queue<int> Q;\n    for(int i=2;i<=n;i++)\n    {\n        if(size[i]==1)\n        {\n            Q.push(i);\n            continue;\n        }\n        index[i]=size[i]-1;\n    }\n    while(!Q.empty())\n    {\n        int u=Q.front();\n        Q.pop();\n        value[p[u][0]]+=value[u];\n        index[p[u][0]]--;\n        if(!index[p[u][0]]) Q.push(p[u][0]);\n    }\n    int maxn=-1;\n    for(int i=1;i<=n;i++) maxn=max(maxn,value[i]); \n    printf(\"%d\",maxn);\n    return 0;\n}\n```",
        "postTime": 1509973089,
        "uid": 22233,
        "name": "\u6885\u5ddd\u4e18\u5e93",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u8be5\u9898\u9996\u5148\u4e00\u770b\uff0c\u5c5e\u4e8e\u5728\u6811\u4e0a\u89e3\u51b3\u6700\u5927\u503c\u95ee\u9898\u3002\u4ee5\u53ca\u5bf9\u4e8e\u8def\u5f84\u95f4\u7684\u70b9\u6743\u8fdb\u884c\u4fee\u6539\u3002\n\n\u6734\u7d20\u7684\u66b4\u529b\u53bb\u4fee\u6539\u663e\u7136\u8d85\u65f6\u3002\u90a3\u4e48\uff0c\u5982\u4f55\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u7684\u70b9\u5c31\u884c\u4fee\u6539\u5462\uff1f\u6211\u4eec\u9996\u5148\u5c06\u5176\u7b80\u5316\u4e3a\u4e00\u6761\u7ebf\uff0c\u5c06\u4e00\u4e2a\u5e8f\u5217\u7684\u67d0\u4e2a\u5b50\u533a\u95f4\u8fdb\u884c\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7ef4\u62a4\u5dee\u5206\u5b9e\u73b0o\uff081\uff09\u4fee\u6539\uff0co\uff08\u67e5\u8be2\uff09\u3002\u63a8\u5e7f\u5230\u6811\u4e0a\u5373\u4e3a\u6811\u4e0a\u5dee\u5206\u3002\u8d77\u70b9\uff0c\u7ec8\u70b9++\uff0clca\uff0c\u53cafa[lca]++\uff0c\u7136\u540e\u9012\u5f52\u5bf9\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u524d\u7f00\u548c\u7684\u6c42\u53d6\u5c31\u597d\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\u3002\n\n\n\n    \n\n\n```cpp\n#include \"iostream\"\n#include \"cstdio\"\n#include \"cmath\"\n#include \"cctype\"\n#include \"vector\"\nusing namespace std;\nvoid read(int &x)\n{\n    x = 0;\n    char c = getchar();\n    while(c<'0' || c>'9')\n    {\n        c = getchar();\n    }\n    while(isdigit(c))\n    {\n        x = (x<<3) + (x<<1) + c - '0';\n        c = getchar();\n    }\n    return ;\n}\nconst int maxn = 500005;\nvector<int>s[maxn];\nint anc[maxn][30] ,maxx ,cha[maxn] ,deep[maxn] ,a[maxn];\nint n ,k ,son[maxn] ,tot;\nvoid dfs(int x)\n{\n    for(int i=1; i<=19; i++)\n        anc[x][i] = anc[anc[x][i-1]][i-1];\n    for(int i=0; i<s[x].size(); i++)\n        if(!deep[s[x][i]])\n        {\n            deep[s[x][i]] = deep[x]+1;\n            anc[s[x][i]][0] = x;\n            dfs(s[x][i]); \n        }\n}\nvoid lca(int x,int y)\n{\n    cha[x]++;\n    cha[y]++;\n    int fa;\n    if(deep[x] != deep[y])\n    {\n        if(deep[x] < deep[y])\n            swap(x ,y);\n        for(int i=19; i>=0; i--)\n            if(deep[anc[x][i]] >= deep[y])\n                x = anc[x][i];\n    }\n    if(x == y)\n        fa = x;\n    else{\n    for(int i=19; i>=0; i--)\n        if(anc[x][i] != anc[y][i])\n        {\n            x = anc[x][i];\n            y = anc[y][i];\n        }\n        fa = anc[x][0];\n    }\n    cha[fa]--;\n    cha[anc[fa][0]]--;\n}\nvoid solve(int x ,int y)\n{\n    for(int i=0; i<s[x].size(); i++)\n        if(s[x][i]!=y)\n        {\n            solve(s[x][i] ,x);\n            cha[x] += cha[s[x][i]];\n        }\n    maxx = max(maxx ,cha[x]);\n}\nint m;\nint main()\n{\n    int x ,y;\n    read(n);read(k);\n            deep[1] = 1;\n    for(int i=1; i<n; i++)\n    {\n        read(x),read(y);\n        s[x].push_back(y);\n        s[y].push_back(x);\n    }\n    dfs(1);\n    for(int i=1; i<=k; i++)\n    {\n        read(x),read(y);\n        lca(x ,y);\n    }\n    solve(1 ,0);\n    printf(\"%d\" ,maxx);\n}\n```",
        "postTime": 1508930192,
        "uid": 55197,
        "name": "fengtube",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u849f\u84bb\u4e5f\u80fd\u5199\u51fa\u6765\u7684AC\u4ee3\u7801\uff01\u5bf9\u4e8e\u4eces\u5230t\u7684\u8def\u5f84\uff0c\u4e00\u79cd\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u628a\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u70b9\u90fd+1\uff0c\u4f46\u8fd9\u6837\u590d\u6742\u5ea6\u4f1a\u8d77\u98de\u3002\n\n\u6211\u4eec\u4fbf\u8054\u60f3\u5230**\u6811\u4e0a\u5dee\u5206**\u3002\u5bf9\u4e8e\u4eces\u5230t\u7684\u8def\u5f84\uff0c\u5b83\u7684lca\u53ef\u6c42\uff0c\u90a3\u4e48\u5c31\u8981\n\n- c[s]++\n\n- c[t]++\n\n- c[lca]--\uff08\u56e0\u4e3a\u91cd\u590d\u4e86\uff09\n\n- c[fa[lca][0]]--\uff08\u56e0\u4e3alca\u7684\u503c\u4e5f\u662f\u8981+1\u7684\uff09\n\n\u5982\u679c\u4e0d\u7406\u89e3\u624b\u753b\u4e00\u68f5\u6811\u5c31\u884c\u5566\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\nusing namespace std;\nint n, k, hea[50005], cnt, c[50005], uu, vv, fa[50005][16], lca, depth[50005];\nint sum[50005], maxn=0;\nstruct Edge{\n    int too, nxt;\n}edge[100005];\nvoid add_edge(int fro, int too){\n    edge[++cnt].nxt = hea[fro];\n    edge[cnt].too = too;\n    hea[fro] = cnt;\n}\nvoid build(int u){\n    for(int i=hea[u]; i; i=edge[i].nxt){\n        int t=edge[i].too;\n        if(!depth[t]){\n            depth[t] = depth[u] + 1;\n            fa[t][0] = u;\n            build(t);\n        }\n    }\n}\nint getLca(int u, int v){\n    if(depth[u]<depth[v]){\n        int temp=u;\n        u = v;\n        v = temp;\n    }\n    for(int i=15; i>=0; i--)\n        if(depth[fa[u][i]]>=depth[v])\n            u = fa[u][i];\n    if(u==v)    return u;\n    for(int i=15; i>=0; i--)\n        if(fa[u][i]!=fa[v][i]){\n            u = fa[u][i];\n            v = fa[v][i];\n        }\n    return fa[u][0];\n}\nvoid getSum(int u){\n    sum[u] = c[u];\n    for(int i=hea[u]; i; i=edge[i].nxt){\n        int t=edge[i].too;\n        if(t!=fa[u][0]){\n            getSum(t);\n            sum[u] += sum[t];\n        }\n    }\n    maxn = max(maxn, sum[u]);\n}\nint main(){\n    cin>>n>>k;\n    for(int i=1; i<n; i++){\n        scanf(\"%d %d\", &uu, &vv);\n        add_edge(uu, vv);\n        add_edge(vv, uu);\n    }\n    depth[1] = 1;\n    build(1);\n    for(int i=1; i<=15; i++)\n        for(int j=1; j<=n; j++)\n            fa[j][i] = fa[fa[j][i-1]][i-1];\n    for(int i=1; i<=k; i++){\n        scanf(\"%d %d\", &uu, &vv);\n        c[uu]++;\n        c[vv]++;\n        lca = getLca(uu, vv);\n        c[lca]--;\n        if(fa[lca][0])c[fa[lca][0]]--;\n    }\n    getSum(1);\n    cout<<maxn;\n    return 0;\n}\n```",
        "postTime": 1508814755,
        "uid": 44733,
        "name": "poorpool",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "[\u5e7f\u544a\uff08\u9a97\u8bbf\u95ee\u91cf\uff09](http://www.cnblogs.com/wawcac-blog/p/6869850.html)\n\n\u611f\u8c22@j\\_william \u6307\u51fa\u6211\u7684\u9519\u8bef\uff0c\u62b1\u6b49\u2026\u2026\u6539\u6b63\u4e86\u91cd\u53d1\u4e00\u4e2a\n\n\u6211\u4e4b\u524d\u5e76\u6ca1\u6709\u542c\u8bf4\u8fc7\u6811\u4e0a\u5dee\u5206\u8fd9\u4e48\u9ad8\u7ea7\u7684\u4e1c\u4e1c\uff0c\u4e3a\u4e86\u7ec3\u624b\u901f\u82b1\u4e8640min\u6572\u4e86\u4e00\u4e2a\u6811\u5256\u5957\u7ebf\u6bb5\u6811(\u849f\u84bb\u7801\u529b\u4e0d\u8db3)\uff0c\u5199\u597d\u4e86\u7ebf\u6bb5\u6811\u7684\u4e00\u5806\u51fd\u6570\u5b9a\u4e49\uff08maketree() pushdown() query() update()\uff09\uff0c\u5269\u7740\u51fd\u6570\u5185\u90e8\u7b49\u5f85\u586b\u5145\uff0c\u611f\u89c9\u5230\u4e00\u79cd\u7edd\u671b\uff1a\u8fd8\u6709\u90a3\u4e48\u591a\uff0c\u8981\u6572\u5230\u5565\u65f6\u5019\u554a\u3002\u3002\u3002\u6b63\u5728\u8c03\u6574\u5fc3\u6001\u51c6\u5907\u6572\u7ebf\u6bb5\u6811\u65f6\uff0c\u7a81\u7136\u60f3\u5230\uff0c\u8fd9\u9898\u597d\u50cf\u53ea\u662f\u533a\u95f4\u4fee\u6539\u3001\u5355\u70b9\u67e5\u8be2\uff1f\u5dee\u5206\u7684\u6811\u72b6\u6570\u7ec4\uff01\n\n\u4e8e\u662f\u5185\u5fc3\u4e00\u7247\u6109\u60a6\u554a\uff0c\u6109\u5feb\u5730\u6572\u5b8c\u77ed\u5f97\u591a\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u987a\u52291A\uff01\n\n\u6b63\u7ecf\u7684\u9898\u89e3\n\n\u589e\u52a0\u4e00\u6761x\u5230y\u7684\u8def\u5f84\uff0c\u5c31\u662f\u628ax\u5230y\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u52a01\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u662f\u6811\u5256\u677f\u9898\u7684\u7b2c\u4e00\u4e2a\u64cd\u4f5c,\u53c8\u7531\u4e8e\u8fd9\u9898\u53ea\u7528\u5355\u70b9\u67e5\u8be2\uff0c\u4e8e\u662f\u518d\u5957\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u67e5\u8be2\u7684\u6811\u72b6\u6570\u7ec4\u5373\u53ef\n\n\n```cpp\n#include<bits/stdc++.h>\n#define lson(x) ((x)<<1)\n#define rson(x) (((x)<<1)|1)\n#define lowbit(x) (x)&(-(x))\nusing namespace std;\nint n,k;\nstruct Edge{\n    int next,to;\n}e[100010];\nint cnt=1,head[50010];\nvoid add_e(int u,int v)\n{\n    e[cnt].to=v;\n    e[cnt].next=head[u];\n    head[u]=cnt++;\n}\nstruct tree{\n    int fa;\n    vector<int> son;\n    int dep;\n    int num_to;\n    int wson;\n    int top;\n    int new_id;\n}t[50010];\nbool vis[50010];\nint dfs1(int u,int fa,int depth)\n{\n    vis[u]=1;\n    t[u].fa=fa;\n    t[u].dep=depth;\n    t[u].num_to=1;\n    for(int i=head[u],weightest=-1,w;i;i=e[i].next)\n    {\n        int v=e[i].to;\n        if(vis[v]) continue;\n        t[u].son.push_back(v);\n        w=dfs1(v,u,depth+1);\n        if(w>weightest)\n        {\n            t[u].wson=v;\n            weightest=w;\n        }\n        t[u].num_to+=w;\n    }\n    return t[u].num_to;\n}\nint num_id=1;\nvoid dfs2(int u,int top)\n{\n    t[u].top=top;\n    t[u].new_id=num_id++;\n    int sz=t[u].son.size();\n    if(sz==0)\n        return;\n    dfs2(t[u].wson,top);\n    for(int i=0;i<sz;i++)\n    {\n        int v=t[u].son[i];\n        if(v==t[u].wson) continue;\n        dfs2(v,v);\n    }\n}\nint s[50010]={0};\nvoid add(int node,int w)\n{\n    while(node<=n)//\u5c31\u662f\u8fd9\u91cc\u9519\u4e86\uff0c\u6211\u539f\u6765\u7684\u9898\u89e3\u6ca1\u5199'='\uff0c\u6570\u636e\u6c34\u6ca1\u88ab\u5361\uff0c\uff0c\uff0c\n    {\n        s[node]+=w;\n        node+=lowbit(node);\n    }\n}\nint ask(int node)\n{\n    int ans=0;\n    while(node)\n    {\n        ans+=s[node];\n        node-=lowbit(node);\n    }\n    return ans;\n}\nvoid up(int x,int y)//////////////////////////////////////\n{\n    while(t[x].top!=t[y].top)//x\u5411y\u4e0a\u9760 \u5373y.top \u66f4\u9ad8 \n    {\n        if(t[t[x].top].dep<t[t[y].top].dep) swap(x,y);\n        add(t[x].new_id-1,-1);\n        add(t[t[x].top].new_id,1);\n        x=t[t[x].top].fa;\n    }\n    if(t[x].new_id>t[y].new_id) swap(x,y);\n    add(t[x].new_id,1);\n    add(t[y].new_id+1,-1);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for(int i=1,x,y;i<n;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        add_e(x,y);\n        add_e(y,x);\n    }\n    dfs1(1,1,1);\n    dfs2(1,1);\n    for(int i=0,x,y;i<k;i++)\n    {\n        scanf(\"%d%d\",&x,&y);\n        up(x,y);\n    }\n    int maxn=s[1];\n    for(int i=2;i<=n+1;i++)//\u8fd8\u6709\u8fd9\u91cc\uff0c\u6211\u4e0d\u77e5\u9053\u5f53\u65f6\u548b\u60f3\u7684\uff0c\u5199\u4e86\u4e2ai<=50001\n    {\n        maxn=max(maxn,ask(i));\n    }\n    printf(\"%d\",maxn);\n    return 0;\n}\n```",
        "postTime": 1499596471,
        "uid": 15429,
        "name": "wawcac",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "###\u4e3a\u8fd9\u4e2a\u9898\u901a\u8fc7\u7387\u7684\u964d\u4f4e\u505a\u51fa\u4e86\u5de8\u5927\u7684\u8d21\u732e\u2026\u2026\n\n\u8fd9\u9898\uff0c\u8bf4\u767d\u4e86\uff0c\u88f8\u6811\u4e0a\u5dee\u5206\u3002\u3002\u3002\n\n###**\u6811\u4e0a\u5dee\u5206**\uff1a\u5bf9\u4e8e\u6811\u4e0ax,y\u4e4b\u95f4\u7684\u8def\u5f84\u533a\u95f4\u4fee\u6539\u65f6\uff0c\u8bbe\u6570\u7ec4\u4e3ac\uff0c\u5219c[x]+1,c[y]+1,c[lca(x,y)]-1,c[father[lca(x,y)]-1.\n\n###\u6700\u540edfs\u4e00\u4e0b\uff0c\u4f7f\u6bcf\u4e2a\u8282\u70b9c[x]+=\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684c\u503c\u5c31ok\u4e86..\n\n\u5c31\u662f\u7528\u8fd9\u4e2a\u6027\u8d28\u3002\u3002\u3002\u91cd\u70b9\u5c31\u662f\u5728\u4e8e\u6c42LCA\u7684\u5730\u65b9\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u7528\u7684Tarjan\uff0c\u8bdd\u8bf4\u662f\u771f\u5feb\u3002\u3002\n\n\u7b2c\u4e00\u904d\uff1a\u6211\u8bd5\u56fe\u5728Tarjan\u8fc7\u7a0b\u4e2d\u5c31\u5dee\u5206\uff0c\u7ed3\u679c\u2026\u20266\u5206\uff08\u5c31\u8fc7\u4e86\u6837\u4f8b\uff09\uff0c\u540e\u6765\u8c03\u4e86\u4e00\u665a\u4e0a\u4e0d\u884c\uff0c\u7136\u540e\u2026\u2026\u5fd8\u4e86\u3002\u3002\u3002\n\n\u4eca\u5929\u5b66\u4e86\u7f51\u7edc\u6d41\uff0c\u7136\u540eluogu\u641c\u6700\u5927\u6d41\uff0c\u53d1\u73b0\u4e86\u8fd9\u9053\u9898\uff0c\u7136\u540e6\u5206\u6302\u7740\u4e0d\u723d\uff0c\u5c31\u6765\u505a\u554a\u3002\u3002\n\n\u7b2c\u4e8c\u904d\uff1a\u53d1\u73b0\u81ea\u5df1\u53ef\u4ee5\u5148\u7aef\u70b9\u90fd\u52a0\u4e0a\uff0c\u5904\u7406\u51fa\u6240\u6709\u7684LCA\uff0c\u987a\u4fbf\u6c42\u7236\u4eb2\uff0c\u7136\u540e\u518d\u5dee\u5206\u3002\u3002\u7ed3\u679c\u4ea4\u7684\u65f6\u5019\u628a\u8c03\u8bd5\u8f93\u51fa\u7684c\u6570\u7ec4\u8f93\u51fa\u4e86orz...\n\n\u7b2c\u4e09\u904d\uff1a\u7ec8\u4e8eA\u4e86\uff0c\u6765\u5199\u9898\u89e3\u3002\u3002\n\n\u597d\u5427\uff0c\u95f2\u8bdd\u8bf4\u4e86\u4e0d\u5c11\uff0c\u4e0b\u9762\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#define N 50005\n#define M 100005\n#define gc getchar //\u8db3\u53ef\u89c1\u6211\u61d2\u5f97\u76ae\u75bc\nstruct edge\n{\n    int to,next;\n}e[N<<1];\nstruct ques\n{\n    int to,next,id;\n}f[M<<1];\nint n,m,u[N],v[N],c[N],fa[N],up[N],ans[M],tot,tit=0,maxn=0;\nbool vis[N],vis2[N];\nint find(int x)\n{\n    return fa[x]==x?x:fa[x]=find(fa[x]); //\u636e\u8bf4\u8fd9\u6837\u5199\u5e76\u67e5\u96c6\u7684find\u6bd4\u8f83\u4f18\u7f8e..\n}\nvoid qin(int &a)                                   //\u81c3\u80bf\u7684\u5feb\u8bfb\n{\n    a=0;char c=gc();bool f=0;\n    for(;(c<'0'||c>'9')&&c!='-';c=gc());\n    if(c=='-') f=1,c=gc();\n    for(;c>='0'&&c<='9';c=gc()) a=a*10+c-'0';\n    if(f) a=-a;\n}\nvoid build(int x,int y)\n{\n    e[++tot].to=y; e[tot].next=v[x]; v[x]=tot;\n    e[++tot].to=x; e[tot].next=v[y]; v[y]=tot;\n}\nvoid quest(int x,int y,int z)\n{\n    f[++tit].to=y; f[tit].next=u[x]; u[x]=tit; f[tit].id=z;\n    f[++tit].to=x; f[tit].next=u[y]; u[y]=tit; f[tit].id=z;\n}\nvoid dfs(int x)                                          //Tarjan\n{\n    vis[x]=1; fa[x]=x;\n    for(int i=v[x];i;i=e[i].next)\n        if(!vis[e[i].to])\n            up[e[i].to]=x,dfs(e[i].to),fa[e[i].to]=x;\n    for(int i=u[x];i;i=f[i].next)\n        if(vis[f[i].to])\n            ans[f[i].id]=find(f[i].to);\n}\nvoid dfs2(int x)                                      //\u5dee\u5206\uff0c\u904d\u5386\u6811\n{\n    vis2[x]=1;\n    for(int i=v[x];i;i=e[i].next)\n    {\n        int y=e[i].to;\n        if(!vis2[y]) dfs2(y),c[x]+=c[y];\n    }\n    if(c[x]>maxn) maxn=c[x];\n}\nint main()\n{\n    qin(n);qin(m);\n    for(int i=1;i<n;i++)\n    {\n        int a,b;qin(a),qin(b);\n        build(a,b);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int a,b;qin(a),qin(b);\n        c[a]++;c[b]++;\n        quest(a,b,i);\n    }\n    dfs(1);\n    for(int i=1;i<=m;i++)\n        c[ans[i]]--,c[up[ans[i]]]--;    \n    dfs2(1);\n    printf(\"%d\\n\",maxn);\n}\n```\n//\u5c31\u662f\u8fd9\u6837\u4e86\u3002\u3002\n",
        "postTime": 1485255872,
        "uid": 18455,
        "name": "Enzymii",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u6811\u4e0a\u5dee\u5206\u5373\u53ef\u3002\u672c\u849f\u84bb\u4e0d\u4f1a\u4ec0\u4e48a[lca(a,b)]-=2\u4e4b\u7c7b\u7684\uff0c\u6240\u4ee5\u91c7\u7528\u4e86\u6811\u94fe\u5256\u5206\uff0c\u4ee5\u6295\u5c04\u6210\u8fde\u7eed\u533a\u95f4\n\ntype\n bi=record\n\ngo,next:longint\n\n\n\n```cpp\n end;\nvar\n e:array[0..100000] of bi;\n a,h,dad,dfn,id,size,ma,dep,top:array[0..50000] of longint;\n n,k,i,u,v,xb:longint;\nprocedure adde(u,v:longint);\nbegin\n inc(xb);\n e[xb].go:=v;\n e[xb].next:=h[u];\n h[u]:=xb\nend;\nprocedure dfs1(x:longint);\nvar\n i,m,id:longint;\nbegin\n if x=6 then\n begin\n  i:=i\n end;\n i:=h[x];\n m:=0;\n id:=0;\n while i>0 do\n begin\n  if dep[e[i].go]=0 then\n  begin\n   dep[e[i].go]:=dep[x]+1;\n   dad[e[i].go]:=x;\n   dfs1(e[i].go);\n   inc(size[x],size[e[i].go]);\n   if size[e[i].go]>m then\n   begin\n    m:=size[e[i].go];\n    id:=e[i].go\n   end\n  end;\n  i:=e[i].next\n end;\n ma[x]:=id\nend;\nprocedure dfs2(x:longint);\nvar\n i:longint;\nbegin\n inc(xb);\n dfn[xb]:=x;\n id[x]:=xb;\n if ma[x]=0 then exit;\n top[ma[x]]:=top[x];\n dfs2(ma[x]);\n i:=h[x];\n while i>0 do\n begin\n  if (e[i].go<>ma[x])and(dep[x]=dep[e[i].go]-1) then\n  begin\n   top[e[i].go]:=e[i].go;\n   dfs2(e[i].go)\n  end;\n  i:=e[i].next\n end\nend;\nprocedure swap(var x,y:longint);\nvar\n t:longint;\nbegin\n t:=x;\n x:=y;\n y:=t\nend;\nprocedure add(x,y:longint);\nvar\n u,v:longint;\nbegin\n u:=x;\n v:=y;\n while top[u]<>top[v] do\n begin\n  if dep[top[u]]>dep[top[v]] then swap(u,v);//u is qian\n  inc(a[id[top[v]]+1]);\n  dec(a[id[v]+1]);\n  v:=dad[top[v]]\n end;\n if dep[u]>dep[v] then swap(u,v);\n inc(a[id[u]]);\n dec(a[id[v]+1])\nend;\nbegin\n filldword(size,sizeof(size) shr 2,1);\n readln(n,k);\n for i:=1 to n-1 do\n begin\n  readln(u,v);\n  adde(u,v);\n  adde(v,u)\n end;\n dep[1]:=1;\n dad[1]:=1;\n dfs1(1);\n xb:=0;\n top[1]:=1;\n dfs2(1);\n for i:=1 to k do\n begin\n  readln(u,v);\n  add(u,v)\n end;\n u:=0;\n v:=0;\n for i:=1 to n do\n begin\n  inc(u,a[i]);\n  if u>v then v:=u\n end;\n writeln(v)\nend.\n```\n\u6811\u5256\u7ec3\u624b\u9898\uff0c\u4e0d\u77e5\u4e3a\u4f55\u6ca1\u4ec0\u4e48\u4eba\u505a",
        "postTime": 1474609891,
        "uid": 19567,
        "name": "zx2003",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\n\u8fd9\u4e2a\u9898\u54ea\u91cc\u6709\u90a3\u4e48\u8d39\u8111\u7b4b\n\n\u6211\u4eec\u53ef\u4ee5\u6811\u94fe\u5256\u5206\u561b~~LCT\u6628\u5929\u5b66\u7684\u65f6\u5019\u7761\u7740\u4e86\uff0c\u4e0d\u662f\u592a\u4f1a~~\n\n\u4e24\u904ddfs+\u4e00\u4e2a5\u884c\u7684BIT\n\n\u5176\u5b9e\u6811\u94fe\u5256\u5206\u5b66\u597d\u4e86\u5bf9\u500d\u589e\u548cLCT\u7406\u89e3\u4e0a\u90fd\u6709\u597d\u5904\n\n\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u4fee\u6539\n\n\u7531\u4e8e\u4e00\u6761\u5256\u51fa\u6765\u7684\u94fe\u662f\u8fde\u7eed\u7684\uff0c\u6211\u4eec\u8981\u9009\u62e9\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\n\n\u4e0d\u8fc7\u8fd9\u91cc\u4e0d\u7528\u7ef4\u62a4\u592a\u591a\u4e1c\u897f\uff0c\u53ea\u662f\u533a\u95f4+1\n\n\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5e38\u6570\u5c0f\uff0c\u597d\u5199\u7684\u6811\u72b6\u6570\u7ec4(\u4ece50\u884c\u7684\u7ebf\u6bb5\u6811\u53d8\u62105\u884c\u7684\nBIT)\n\n\u800c\u4e14\u4f7f\u5f97$O(nlog_{2})$\u7684\u7b97\u6cd5\u8dd1\u7684\u5e76\u4e0d\u6162\n\n\u5177\u4f53\u5c31\u662f\u7528\u5dee\u5206\u601d\u60f3\uff0c\u4fee\u6539\u533a\u95f4[L,R]\u65f6\n\n$[1,R] +1 $ $[1,L-1] -1$\u8fbe\u5230\u4fee\u6539\u7684\u76ee\u7684\n\n\u6700\u540e\u67e5\u8be2\u65f6\n\n\u76f4\u63a5\u6bcf\u6b21\u67e5\u8be2[1,i]\u7684\u503c\u5c31\u53ef\u5f97\u5230i\u7684\u6700\u7ec8\u538b\u529b\u503c\n\n```cpp\n#include <bits/stdc++.h>\n#define FOR(i,a,b) for(int i=a;i<=b;++i)\nusing namespace std;\nconst int maxn=2e5+7;\nint read() {\n    int x=0,f=1;char s=getchar();\n    for(;s>'9'||s<'0';s=getchar()) if(s=='-') f=-1;\n    for(;s>='0'&&s<='9';s=getchar()) x=x*10+s-'0';\n    return x*f;\n}\nvector<int> G[maxn];\nint n,m,top[maxn],f[maxn],siz[maxn],idx[maxn],cnt,son[maxn],dep[maxn];\nvoid dfs1(int u,int fa) {\n    f[u]=fa;\n    siz[u]=1;\n    dep[u]=dep[fa]+1;\n    for(vector<int>::iterator it=G[u].begin();it!=G[u].end();++it) {\n        if(*it==fa) continue;\n        dfs1(*it,u);\n        siz[u]+=siz[*it];\n        if(siz[son[u]] < siz[*it]) son[u]=*it;\n    }\n}\nvoid dfs2(int u,int topf) {\n    idx[u]=++cnt;\n    top[u]=topf;\n    if(!son[u]) return;\n    dfs2(son[u],topf);\n    for(std::vector<int>::iterator it=G[u].begin();it!=G[u].end();++it)\n        if(!idx[*it]) dfs2(*it,*it);\n}\nnamespace BIT {\n    int sum[maxn];\n    int lowbit(int x) {return x&-x;}\n    void add(int x,int k) {for(int i=x;i<=n;i+=lowbit(i)) sum[i]+=k;}\n    int query(int x) {int ans=0;for(int i=x;i>=1;i-=lowbit(i)) ans+=sum[i];return ans;}\n    void modify(int x,int y) {if(x!=n)add(y+1,-1);add(x,1);}\n}\nvoid change(int x,int y) {\n    while(top[x]!=top[y]) {\n        if(dep[top[x]] < dep[top[y]]) swap(x,y);\n        BIT::modify(idx[top[x]],idx[x]);\n        x=f[top[x]];\n    }\n    if(dep[x] > dep[y]) swap(x,y);\n    BIT::modify(idx[x],idx[y]);\n}\nint main() {\n    n=read(),m=read();\n    FOR(i,2,n) {\n        int x=read(),y=read();\n        G[x].push_back(y),G[y].push_back(x);\n    }\n    dfs1(1,0);dfs2(1,1);\n    FOR(i,1,m) change(read(),read());\n    int ans=0;\n    FOR(i,1,n) ans=max(ans,BIT::query(i));\n    cout<<ans<<\"\\n\";\n    return 0;\n}\n```\n",
        "postTime": 1545741070,
        "uid": 92100,
        "name": "\u590d\u6742\u7684\u54c8\u76ae\u72d7",
        "ccfLevel": 7,
        "title": "P3128 [USACO15DEC]\u6700\u5927\u6d41Max Flow"
    },
    {
        "content": "\u6b64\u7c7b\u578b\u9898\u76ee\u6709\u4e24\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u505a\u6cd5\uff1a\u6811\u94fe\u5256\u5206\u548c\u6811\u4e0a\u5dee\u5206\u3002\n\n\u672c\u9898\u6709\u591a\u7ec4\u4fee\u6539\u4e00\u7ec4\u8be2\u95ee\uff0c\u56e0\u6b64\u6811\u4e0a\u5dee\u5206\u4f1a\u6bd4\u6811\u94fe\u5256\u5206\u4f18\u79c0\u5f88\u591a\u3002\n\n\u8fd9\u91cc\u4e24\u79cd\u65b9\u6cd5\u90fd\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n------------\n\n\u6811\u94fe\u5256\u5206\u548c\u6811\u4e0a\u5dee\u5206\u7684\u672c\u8d28\u90fd\u662f\u5c06\u4e00\u9897\u6811\u8f6c\u6362\u4e3a\u4e00\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5148\u5c06\u4e00\u9897\u6811\u53d8\u6210\u533a\u95f4\uff0c\u7136\u540e\u5957\u7528\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u548c\u5dee\u5206\u3002\n\n------------\n\n\u6811\u94fe\u5256\u5206\u7684\u5177\u4f53\u6d41\u7a0b\u4e0d\u591a\u52a0\u53d9\u8ff0\uff0c\u53ef\u4ee5\u81ea\u5df1\u53bb\u7ffb\u5b83\u7684\u6a21\u677f\u9898\u3002\n\n\u672c\u9898\u7ef4\u62a4\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2\u5c31OK\u4e86\uff0c\u6700\u540e\u8f93\u51fa\u7b54\u6848\u7684\u65f6\u5019\u76f4\u63a5\u904d\u5386\u6240\u6709\u8282\u70b9\u53d6\u6700\u5927\u503c\u3002\n\n1956ms,9805kb\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define qwq int\n#define re register\nusing namespace std;\nnamespace Solve{\n\t#define N 200200\n\tqwq n,m;\n\tqwq cnt;\n\tqwq head[N];\n\tstruct node{\n\t\tqwq to,next;\n\t}edge[N<<1];\n\tinline void add(qwq a,qwq b){\n\t\tedge[++cnt].to=b,edge[cnt].next=head[a],head[a]=cnt;\n\t}\n\tqwq dfn;\n\tqwq dep[N],fa[N],size[N],son[N],top[N],id[N];\n\tinline void dfs1(qwq now,qwq father,qwq deep){\n\t\tdep[now]=deep,fa[now]=father,size[now]=1;qwq max_son=-1;\n\t\tfor(re qwq i=head[now];i;i=edge[i].next){\n\t\t\tqwq to=edge[i].to;\n\t\t\tif(to==father)continue;\n\t\t\tdfs1(to,now,deep+1);\n\t\t\tsize[now]+=size[to];\n\t\t\tif(size[to]>max_son)max_son=size[to],son[now]=to;\n\t\t}\n\t}\n\tinline void dfs2(qwq now,qwq topf){\n\t\tid[now]=++dfn,top[now]=topf;\n\t\tif(!son[now])return;\n\t\tdfs2(son[now],topf);\n\t\tfor(re qwq i=head[now];i;i=edge[i].next){\n\t\t\tqwq to=edge[i].to;\n\t\t\tif(to==son[now]||to==fa[now])continue;\n\t\t\tdfs2(to,to);\n\t\t}\n\t}\n\tstruct tnode{\n\t\tqwq l,r,val,tag;\n\t}tree[N<<2];\n\tinline void pushup(qwq pos){\n\t\ttree[pos].val=tree[pos<<1].val+tree[pos<<1|1].val;\n\t}\n\tinline void pushdown(qwq pos){\n\t\tif(tree[pos].tag){\n\t\t\ttree[pos<<1].tag+=tree[pos].tag,tree[pos<<1|1].tag+=tree[pos].tag;\n\t\t\ttree[pos<<1].val+=tree[pos].tag*(tree[pos<<1].r-tree[pos<<1].l+1);\n\t\t\ttree[pos<<1|1].val+=tree[pos].tag*(tree[pos<<1|1].r-tree[pos<<1|1].l+1);\n\t\t\ttree[pos].tag=0;\n\t\t}\n\t}\n\tinline void build(qwq l,qwq r,qwq pos){\n\t\ttree[pos].l=l,tree[pos].r=r;\n\t\tif(l==r){\n\t\t\ttree[pos].val=0;\n\t\t\treturn;\n\t\t}\n\t\tqwq mid=(l+r)>>1;\n\t\tbuild(l,mid,pos<<1),build(mid+1,r,pos<<1|1);\n\t\tpushup(pos);\n\t}\n\tinline void update(qwq l,qwq r,qwq v,qwq pos){\n\t\tif(l<=tree[pos].l&&tree[pos].r<=r){\n\t\t\ttree[pos].val+=v*(tree[pos].r-tree[pos].l+1);\n\t\t\ttree[pos].tag+=v;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(pos);\n\t\tqwq mid=(tree[pos].l+tree[pos].r)>>1;\n\t\tif(l<=mid)update(l,r,v,pos<<1);\n\t\tif(mid<r)update(l,r,v,pos<<1|1);\n\t\tpushup(pos);\n\t}\n\tinline qwq query(qwq l,qwq r,qwq pos){\n\t\tif(l<=tree[pos].l&&tree[pos].r<=r){\n\t\t\treturn tree[pos].val;\n\t\t}\n\t\tpushdown(pos);\n\t\tqwq mid=(tree[pos].l+tree[pos].r)>>1,ans=0;\n\t\tif(l<=mid)ans=max(ans,query(l,r,pos<<1));\n\t\tif(mid<r)ans=max(ans,query(l,r,pos<<1|1));\n\t\treturn ans;\n\t}\n\tinline qwq queryRange(qwq x,qwq y){\n\t\tqwq ans=0;\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\t\tans=max(ans,query(id[top[x]],id[x],1));\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]>dep[y])swap(x,y);\n\t\tans=max(ans,query(id[x],id[y],1));\n\t\treturn ans;\n\t}\n\tinline void updateRange(qwq x,qwq y,qwq v){\n\t\twhile(top[x]!=top[y]){\n\t\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\n\t\t\tupdate(id[top[x]],id[x],v,1);\n\t\t\tx=fa[top[x]];\n\t\t}\n\t\tif(dep[x]>dep[y])swap(x,y);\n\t\tupdate(id[x],id[y],v,1);\n\t}\n\tinline void solve(){\n\t\tscanf(\"%d%d\",&n,&m);\n\t\tfor(re qwq i=1;i<=n-1;++i){\n\t\t\tqwq x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tadd(x,y),add(y,x);\n\t\t}\n\t\tdfs1(1,1,1);\n\t\tdfs2(1,1);\n\t\tbuild(1,n,1);\n\t\twhile(m--){\n\t\t\tqwq x,y;\n\t\t\tscanf(\"%d%d\",&x,&y);\n\t\t\tupdateRange(x,y,1);\n\t\t}\n\t\tqwq ans=0;\n\t\tfor(re qwq i=1;i<=n;++i)ans=max(ans,query(id[i],id[i],1));\n\t\tcout<<ans;\n\t}\n}\nusing namespace Solve;\nqwq main(){\n\tsolve();\n}\n\n```\n\n------------\n\n\u5f88\u660e\u663e\uff0c\u6811\u94fe\u5256\u5206\u7801\u91cf\u6bd4\u8f83\u9ad8\uff0c\u5728\u8d5b\u573a\u4e0a\u7801\u529b\u4e0d\u8db3\u7684\u9009\u624b\u5bb9\u6613\u9677\u5165\u8c03\u8bd5\u7684\u5de8\u5751\uff0c\u56e0\u6b64\u8fd8\u662f\u9996\u63a8\u7801\u91cf\u5c0f\u5e76\u4e14\uff08\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff09\u901f\u5ea6\u5feb\u7684\u6811\u4e0a\u5dee\u5206\u3002\n\n\u9700\u6ce8\u610f\u7684\u662f\uff1a\u6811\u4e0a\u5dee\u5206\u9002\u7528\u4e8e\u591a\u7ec4\u4fee\u6539\u5355\u7ec4\u8be2\u95ee\u7684\u9898\u76ee\uff0c\u5176\u4ed6\u60c5\u51b5\u4f1aT\u4e0a\u5929\u3002\n\n\u5bf9\u4e8e\u8981\u66f4\u65b0\u7684\u4e24\u4e2a\u70b9\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u8981\u5728\u4ed6\u4eec\u4e0a\u9762\u5404\u6807\u8bb0+1\uff0c\u7136\u540e\u5728\u4ed6\u4eec\u7684lca\u548clca\u7684\u7236\u4eb2\u4e0a\u5404\u6807\u8bb0-1\u5373\u53ef\u3002\n\n\u7136\u540e\u5728\u8be2\u95ee\u7684\u65f6\u5019\u8dd1\u4e00\u4e0bdfs\u7edf\u8ba1\u4e00\u4e0b\u5c31\u51fa\u7b54\u6848\u4e86\u3002\n\n\uff08lca\u7528\u500d\u589e\uff0c\u5f53\u7136tarjan\u6811\u5256\u90fd\u884c\uff0c\u53cd\u6b63\u522b\u88f8\u7684\u76f4\u63a5\u5957\u4e0a\u53bb\uff09\n\n\u61d2\u5f97\u6253\u4ee3\u7801\u4e86\u3002~~\u5149\u901f\u9003~~",
        "postTime": 1536980378,
        "uid": 38859,
        "name": "Nero_Claudius",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u6700\u8fd1\u65b0\u5b66\u4e86\u6811\u5256\u3002\u3002\u3002\u660e\u660e\u77e5\u9053\u53ef\u4ee5\u7528\u6811\u4e0a\u5dee\u5206\u3002\u3002\u3002\u4f46\u662f\u6211\u8fd8\u662f\u82b1\u4e8630min\u5199\u4e86\u4e2a\u7b80\u5355\u7684\u7ebf\u6bb5\u6811+\u6811\u5256\u3002\u3002\u3002\n\n\n\u7b2c\u4e00\u6b21\u4ea4\u7684\u65f6\u5019\u5c45\u7136\u7ebf\u6bb5\u6811\u91cc\u7684down\u5199\u4e86++\u3002\u3002\u3002\u7136\u540e\u6ca1\u6709\u72060\u662f\u6700\u9a9a\u7684\u3002\u3002\u5199\u7684\u65f6\u5019\u4e5f\u662f\u77f3\u4e50\u5fd7\u660e\u660e\u60f3\u7740\u8981\u5199+=lazy\u5374\u5199\u4e86++\u3002\u3002\u3002~~\u611f\u89c9\u6211\u5df2\u7ecf\u662f\u6761\u5e9f\u9c7c\u4e86~~\n\n\n\u597d\u4e86\u4e0d\u591axjb\u54d4\u54d4\u4e86\uff0c\u8fd8\u662f\u8bb2\u601d\u8def\u3002\n\n\n**\u534e\u4e3d\u4e3d\u7684\u5206\u5272\u7ebf--------------------------------------------------------------------**\n\n\n~~\u597d\u50cf\u6ca1\u4ec0\u4e48\u597d\u8bb2\u7684\u3002\u3002\u3002~~\u88f8\u7684\u6811\u5256\u5957\u4e2a\u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u7684sum\u8868\u793a\u5f53\u524d\u7ed3\u70b9\u6240\u8868\u793a\u7684\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\n\n\n\u4e0d\u96be\u53d1\u73b0\u6bcf\u6b21\u7684\u64cd\u4f5c\u90fd\u662f\u6574\u6bb5\u533a\u95f4\u6240\u6709\u7684\u6570+1\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u5927\u503c\u80af\u5b9a\u662f\u4e4b\u524d\u7684\u6700\u5927\u503c+1\uff0c\u800c\u4e00\u5f00\u59cb\u5168\u4e3a0\u3002\u3002\u3002~~\u90a3\u4e0d\u5c31\u5f88\u7b80\u5355\u4e86\u5417~~\n\n\n\u8fd8\u662f\u518d\u7ed9\u540c\u5b66\u4eec\u7559\u4e0b\u70b9\u601d\u8003\u7a7a\u95f4\u5427\u3002\u3002\u3002\n\n\n\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a\n\n```cpp\n#include<cstdio>\n#define For(i,x,y) for (int i=x;i<=y;i++)\n#define cross(i,k) for (int i=first[k];i!=0;i=last[i])\n#define N 50010\nusing namespace std;\nstruct tree{\n    int sum,lazy;\n}a[8*N];\nint to[2*N],last[2*N],first[N];\nint n,m,x,y,tot;\nvoid add(int u,int v){tot++,to[tot]=v,last[tot]=first[u],first[u]=tot;}\nint size[N],son[N],fa[N],dep[N];\nvoid dfs1(int k){\n    size[k]=1,dep[k]=dep[fa[k]]+1;\n    cross(i,k){\n        int v=to[i];\n        if (v==fa[k]) continue;\n        fa[v]=k,dfs1(v);\n        size[k]+=size[v];\n        if (!son[k]||size[son[k]]<size[v]) son[k]=v;\n    }\n}\nint idc,tree[N],idx[N],top[N];\nvoid dfs2(int k,int tp){\n    top[k]=tp,idc++,idx[k]=idc,tree[idc]=k;\n    if (!son[k]) return;\n    dfs2(son[k],tp);\n    cross(i,k){\n        int v=to[i];\n        if (v==son[k]||v==fa[k]) continue;\n        dfs2(v,v);\n    }\n```\n}//\u7b80\u5355\u7684\u6811\u5256\n\n```cpp\nvoid down(int k){\n    if (!a[k].lazy) return;\n    a[k << 1].lazy+=a[k].lazy,a[k << 1^1].lazy+=a[k].lazy;\n    a[k << 1].sum+=a[k].lazy,a[k << 1^1].sum+=a[k].lazy;\n    a[k].lazy=0;\n}\nint max(int x,int y){\n    if (x>y) return x;\n        else return y;\n}\nvoid ud(int k,int l,int r,int ql,int qr){\n    if (l>qr||ql>r) return;\n    if (l>=ql&&r<=qr){\n        a[k].lazy++,a[k].sum++;\n        down(k);\n        return;    \n    }\n    down(k);\n    int mid=l+r >> 1;\n    ud(k << 1,l,mid,ql,qr),ud(k << 1^1,mid+1,r,ql,qr);\n    a[k].sum=max(a[k << 1].sum,a[k << 1^1].sum);\n```\n}//\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\n\n```cpp\nvoid swap(int &x,int &y) {int t;t=x,x=y,y=t;}\nvoid change(int x,int y){\n    while (top[x]!=top[y]){\n        if (dep[top[x]]>=dep[top[y]]) ud(1,1,n,idx[top[x]],idx[x]),x=fa[top[x]]; \n            else ud(1,1,n,idx[top[y]],idx[y]),y=fa[top[y]];\n    }\n    if (dep[x]>dep[y]) swap(x,y);\n    ud(1,1,n,idx[x],idx[y]);\n```\n}//\u7b80\u5355\u7684\u4fee\u6539\n\n```cpp\nint main(){\n    freopen(\"1.in\",\"r\",stdin);\n    freopen(\"1.out\",\"w\",stdout);\n    scanf(\"%d%d\",&n,&m);\n    For(i,1,n-1){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y),add(y,x);\n    }\n    dfs1(1);\n    dfs2(1,1);\n    For(i,1,m){\n        scanf(\"%d%d\",&x,&y);\n        change(x,y);\n    }\n    printf(\"%d\",a[1].sum);\n    return 0;\n}\n\n```",
        "postTime": 1514280970,
        "uid": 25355,
        "name": "\u590f\u8272\u796d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "\u8fd9\u9898\uff0c\u9996\u5148\u5e94\u8be5\u770b\u51fa\u8fd9\u662f\u4e00\u68f5\u6811\u3002\u3002\u3002\n\n\u5176\u6b21\uff0c\u624d\u662f LCA+\u6811\u4e0a\u5dee\u5206 \u7684\u7b97\u6cd5\u3002\u3002\u3002\n\n\u6811\u4e0a\u5dee\u5206\u7684\u6838\u5fc3\u662f\uff1a\u8d77\u70b9++\uff0c\u7ec8\u70b9++\uff0cLCA\uff08\u8d77\u70b9\uff0c\u7ec8\u70b9\uff09--\uff0cfather[ LCA\uff08\u8d77\u70b9\uff0c\u7ec8\u70b9\uff09 ]--\n\nLCA \u5efa\u8bae\u7528\u500d\u589e\uff0c\u56e0\u4e3a\u8981\u7528\u5230 LCA \u7684 \u7236\u4eb2\uff08\u672c\u4eba\u4e0d\u4f1a\u7528 Tarjan \u540c\u65f6\u6c42 LCA \u4e0e LCA \u7684\u7236\u4eb2\uff0c\u5403\u67a3\u836f\u4e38\uff09\u3002\u3002\u3002\n\n\u5982\u679c\u4e0a\u8ff0\u7b97\u6cd5\u8fd8\u662f\u770b\u4e0d\u61c2\uff0c\u8fd8\u6709\u6700\u540e\u4e00\u62db\uff0c\u4e0a\u4ee3\u7801\uff01\uff01\uff01\n\n\u9644\u6ce8\u91ca\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#define MAXN 100010//\u9632\u6b62 MLE \nusing namespace std;\nint n,m,ans=0,c=1;\nint head[MAXN<<1],f[MAXN][20],deep[MAXN],s1[MAXN],s2[MAXN];\nstruct node{\n       int next,to;\n}a[MAXN<<1];//\u524d\u5411\u661f\u5b58\u56fe\ninline int read(){//\u8bfb\u4f18\u3002\u3002\u3002\n       int date=0,w=1;char c=0;\n       while(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n       while(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n       return date*w;\n}\nvoid add(int x,int y){//\u5728 x \u4e0e y \u4e4b\u95f4\u52a0\u5165\u4e00\u6761\u53cc\u5411\u8fb9\n     a[c].to=y;\n     a[c].next=head[x];\n     head[x]=c++;\n     a[c].to=x;\n     a[c].next=head[y];\n     head[y]=c++;\n}\nvoid buildtree(int rt){//\u5efa\u6811\uff0c\u987a\u4fbf\u5904\u7406\u4e86 \u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6 \u4e0e \u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2 \u3002\u3002\u3002\n     int will;\n     for(int i=head[rt];i;i=a[i].next){\n             will=a[i].to;//\u6bcf\u6761\u8fb9\u7684\u7ec8\u70b9\n             if(!deep[will]){\n                             deep[will]=deep[rt]+1;\n                             f[will][0]=rt;\n                             buildtree(will);//\u904d\u5386\u5b50\u8282\u70b9\uff08\u5f53\u521d\u5c31\u662f\u56e0\u4e3a\u624b\u6b8b\uff0c\u5c06 will \u6572\u6210\u4e86 rt \uff0c\u77ac\u95f4\u7206\u70b8\uff0c\u4e8e\u662f\u8c03\u4e86\u534a\u5c0f\u65f6\u3002\u3002\u3002\uff09\n                             }\n             }\n}\nvoid step(){//\u8df3\u8dc3\u6b65\u6570\n     for(int i=1;i<=19;i++)\n     for(int j=1;j<=n;j++)\n     f[j][i]=f[f[j][i-1]][i-1];//\u500d\u589e\u601d\u60f3\u5e94\u8be5\u90fd\u7406\u89e3\u5427\u3002\u3002\u3002\n}\nint LCA(int x,int y){//\u6c42LCA\n    if(deep[x]<deep[y])swap(x,y);//\u603b\u662f\u5c06 x \u8bbe\u4e3a\u6df1\u5ea6\u8f83\u6df1\u7684\u8282\u70b9\n    for(int i=19;i>=0;i--)//\u5c06 x \u4e0e y \u62c9\u81f3\u540c\u4e00\u6df1\u5ea6\n    if(deep[f[x][i]]>=deep[y])\n    x=f[x][i];\n    if(x==y)return x;\n    for(int i=19;i>=0;i--)//\u5bfb\u627e\u6df1\u5ea6\u6bd4 LCA\u59271 \u7684\u8282\u70b9\n    if(f[x][i]!=f[y][i]){\n                         x=f[x][i];\n                         y=f[y][i];\n                         }\n    return f[x][0];//\u8fd4\u56de \u6df1\u5ea6\u6bd4 LCA\u59271 \u7684\u8282\u70b9 \u7684\u4e0a\u4e00\u5c42\uff0c\u5373LCA\n}\nvoid work(int x,int y){//\u5dee\u5206\n     int fa=LCA(x,y);\n     s1[x]++;s1[y]++;s1[fa]--;\n     if(f[fa][0]!=0)s1[f[fa][0]]--;\n}\nvoid getsum(int now,int rt){//\u6c42\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u538b\u529b\u3002\u3002\u3002\n     int t;\n     s2[now]=s1[now];\n     for(int i=head[now];i;i=a[i].next){\n             t=a[i].to;\n             if(t!=rt){\n                       getsum(t,now);\n                       s2[now]+=s2[t];\n                       }\n             }\n     ans=max(ans,s2[now]);//\u6bd4\u8f83\u5927\u5c0f\u5e76\u66f4\u65b0\u3002\u3002\u3002\n}\nint main(){//\u4e3b\u51fd\u6570 So easy!\n    int x,y;\n    n=read();m=read();\n    for(int i=1;i<n;i++){\n            x=read();y=read();\n            add(x,y);//\u5efa\u8fb9\n            s1[i]=deep[i]=0;//\u8868\u793a\u4e0d\u60f3\u7528 memset,\u5df2\u7ecf\u88ab\u5751\u8fc7\u65e0\u6570\u6b21\u3002\u3002\u3002\n            }\n    deep[1]=1;\n    buildtree(1);\n    step();\n    while(m--){\n               x=read();y=read();\n               work(x,y);\n               }\n    getsum(1,0);\n    printf(\"%d\\n\",ans);//\u8f93\u51fa\u7b54\u6848\u3002\u3002\u3002\n    return 0;//\u7ed3\u675f\uff0c\u6492\u82b1~~~\n}\n\n```",
        "postTime": 1508646608,
        "uid": 49998,
        "name": "\u65af\u5fb7\u54e5\u5c14\u6469",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "# \u849f\u84bb\u7684\u7b2c\u4e00\u4e2a\u9898\u89e3 \uff0c\u5404\u4f4dDALAO\u52ff\u55b7\n## \u7eaa\u5ff5A\u7684~~\u7b2c\u4e8c\u9053\u84dd\u9898~~\uff08\u5c0f\u849f\u84bb\u60f6\u6050\uff09\n~~\u4e00\u9053\u88f8\u7684\u6811\u5256\u9898~~\uff0c\u8fc7\u4e86\u6a21\u677f\u7684\u4eba\u5e94\u8be5\u90fd\u77e5\u9053\u600e\u4e48\u505a\u3002\n\n\u8fd9\u91cc\u76f4\u63a5\u8d34\u4ee3\u7801\uff0c\u5177\u4f53\u7684\u8bb2\u89e3\u770b\u4ee3\u7801\u5c31\u884c\u3002\n\n\u8fde\u7ebf\u6bb5\u6811\u90fd\u4e0d\u77e5\u9053\u7684\u8bf7\u79fb\u6b65\uff08\u849f\u84bb\u7684\u6210\u957f\u4e4b\u8def\uff08\u6ed1\u7a3d\uff09\uff09[\u6d45\u8c08\u7ebf\u6bb5\u6811](https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html)\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,tot,s,cnt,a,b,x,y=1,p=1,mod=200000000,ans1=0;\nint ans[5],son[50010],f[50010],top[50010],id[50010];\nint d[50010],head[50010],size[50010],q[50010];\nstruct tree\n{\n\tint l,r,w,f;\n}tree[200010];//\u7ebf\u6bb5\u6811 \ninline void build(int k,int ll,int rr)//\u5efa\u6811\n{\n\ttree[k].l=ll;tree[k].r=rr;\n\tif(tree[k].l==tree[k].r)\n\t{\n\t\ttree[k].w=0;//\u521d\u503c\u4e3a0\n\t\treturn;\n\t}\n\tbuild(2*k,ll,(ll+rr)/2);\n\tbuild(2*k+1,(ll+rr)/2+1,rr);\n\ttree[k].w=(tree[2*k].w+tree[2*k+1].w)%mod;\n    //\u76f4\u63a5CV\u7684\u6a21\u677f\uff0c\u628amod\u8bbe\u4e3a\u6700\u5927\u5c31\u884c\uff0c\u53ef\u4ee5\u53bb\u6389\n}\ninline void down(int k)//\u4e0b\u4f20\n{\n\t(tree[2*k].f+=tree[k].f)%=mod;\n\t(tree[2*k+1].f+=tree[k].f)%=mod;\n\t(tree[2*k].w+=(tree[2*k].r-tree[2*k].l+1)*tree[k].f)%=mod;\n\t(tree[2*k+1].w+=(tree[2*k+1].r-tree[2*k+1].l+1)*tree[k].f)%=mod;\n\ttree[k].f=0;\n}\ninline void check1(int k)\n{\n\tif(tree[k].l==tree[k].r)\n\t{\n\t\t(ans[p]+=tree[k].w)%=mod;\n\t\treturn;\n\t}\n\tif(tree[k].f)down(k);\n\tint mid=(tree[k].l+tree[k].r)/2;\n\tif(x<=mid)check1(2*k);\n\telse check1(2*k+1);\n}\ninline void add1(int k)\n{\n\tif(tree[k].l==tree[k].r)\n\t{\n\t\t(tree[k].w+=y)%=mod;\n\t\treturn;\n\t}\n\tif(tree[k].f)down(k);\n\tint mid=(tree[k].l+tree[k].r)/2;\n\tif(x<=mid)add1(2*k);\n\telse add1(2*k+1);\n\ttree[k].w=(tree[2*k].w+tree[2*k+1].w)%mod;\n}\ninline void add2(int k)\n{\n\tif(a<=tree[k].l&&b>=tree[k].r)\n\t{\n\t\t(tree[k].w+=(tree[k].r-tree[k].l+1)*y)%=mod;\n\t\t(tree[k].f+=y)%=mod;\n\t\treturn;\n\t}\n\tif(tree[k].f)down(k);\n\tint m=(tree[k].l+tree[k].r)/2;\n\tif(a<=m)add2(2*k);\n\tif(b>m)add2(2*k+1);\n\ttree[k].w=(tree[2*k].w+tree[2*k+1].w)%mod;\n}\nstruct edge \n{\n\tint to,next;//\u90bb\u63a5\u8868\u6807\u914d \n}e[100010];\nvoid add(int f,int t)\n{\n\te[++tot].to=t;\n\te[tot].next=head[f];\n\thead[f]=tot;//\u90bb\u63a5\u8868\u52a0\u8fb9\u51fd\u6570 \n}\nvoid dfs(int k)//\u8fd9\u4e2aDFS\u7528\u6765\u6c42\u6700\u5927\u503c\n{\n\tx=id[k];\n\tcheck1(1);\n\tans1=max(ans1,ans[p]);\n\tans[p]=0;\n\tfor(int i=head[k];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==f[k])continue;\n\t\tdfs(e[i].to);\n\t}\n}\nvoid dfs1(int k)//\u786e\u5b9asize,d,f,son; \n{\n\tsize[k]=1;\n\td[k]=d[f[k]]+1;\n\tfor(int i=head[k];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==f[k])continue;//\u7236\u8282\u70b9\u8fc7\u6ee4 \n\t\tf[e[i].to]=k;\n\t\tdfs1(e[i].to);\n\t\tsize[k]+=size[e[i].to];\n\t\tif(!son[k]||size[e[i].to]>size[son[k]])//\u786e\u5b9a\u91cd\u513f\u5b50 \n\t\tson[k]=e[i].to;\n\t}\n}\nvoid dfs2(int k,int t)//\u786e\u5b9aid,top \n{\n\tid[k]=++cnt;//DFS\u5e8f \n\ttop[k]=t;\n\tif(!son[k])return;//\u53f6\u8282\u70b9\u8fc7\u6ee4 \n\tdfs2(son[k],t);//\u5148\u904d\u5386\u91cd\u94fe\uff0c\u4fdd\u8bc1\u91cd\u94fe\u7684DSF\u5e8f\u8fde\u7eed\uff0c\u65b9\u4fbf\u7ebf\u6bb5\u6811\u7ef4\u62a4 \n\tfor(int i=head[k];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==f[k]||e[i].to==son[k])//\u7236\u8282\u70b9\u548c\u91cd\u513f\u5b50\u8fc7\u6ee4\uff08\u5f88\u91cd\u8981\uff09 \n\t\tcontinue;\n\t\tdfs2(e[i].to,e[i].to);//\u8f7b\u8fb9\u7684\u94fe\u9876\u8981\u6539\u53d8 \n\t}\n}\nvoid tree_add1(int u,int v)//\u4e24\u70b9\u95f4\u8def\u5f84\u4fee\u6539 \n{\n\twhile(top[u]!=top[v])\n\t{\n\t\tif(d[top[u]]<d[top[v]])swap(u,v);\n\t\t//\u5207\u8bb0\u662fd[top[u]]\u800c\u4e0d\u662fd[u] \u849f\u84bb\u7b2c\u4e00\u6b21\u5b66\u6811\u5256\u65f6\u5c31\u4e00\u76f4\u5361\u5728\u8fd9\u91cc \n\t\ta=id[top[u]];b=id[u];\n\t\tadd2(1);\n\t\tu=f[top[u]];\n\t}\n\tif(u==v){x=id[u];add1(1);return;}//u=v\u65f6\u7279\u5224\uff0c\u52a0\u4e0aV\u7684\u6743 \n\tif(d[u]<d[v])\n\t{a=id[u];b=id[v];}\n\telse {a=id[v];b=id[u];}\n\tadd2(1);\n}\nint main()\n{ \n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b);\n\t\tadd(b,a);\n        //\u5982\u679c\u60f3\u66f4\u5feb\u4e00\u70b9\uff0c\u52a0\u4e2a\u5feb\u8bfb\uff0c\u8fd9\u91cc\u5c31\u4e0d\u6253\u4e86\u3002\n\t}\n\tdfs1(1);\n\tdfs2(1,1);\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\ttree_add1(u,v);\n\t}\n\tdfs(1);\n\tcout<<ans1;\n}\n\n```\n\u7528\u65f6\u7ea62.3s\u3002\uff08\u6bd5\u7adf\u662f\u849f\u84bb\uff09\n\n### \u73b0\u5728\u4ecb\u7ecd\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\uff1a\u4f1f\u5927\u7684\u6811\u4e0a\u5dee\u5206\n\n\u987e\u540d\u601d\u4e49\uff0c\u6811\u4e0a\u5dee\u5206\uff0c\u5373\u6811\u7684\u5dee\u5206\u3002\n\n\u4e0d\u77e5\u9053\u5dee\u5206\u7684\u79fb\u6b65[\u5dee\u5206\u548c\u524d\u7f00\u548c](https://www.cnblogs.com/MS903/p/11244969.html)\n\n\u771f\u7684\u662f\u4e00\u79cd\u8d3c\u5389\u5bb3\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u628aO(n)\u7684\u590d\u6742\u5ea6\u53d8\u6210O\uff081\uff09\uff0c\u5feb\u4e86n\u500d\u3002\n\n\u5982\u679c\u8981\u5c06u,v\u95f4\u7684\u8def\u5f84\u6bcf\u4e00\u4e2a\u6743\u503c\u90fd\u52a0\u4e0ax\n\n\u8bbea=lca\uff08u\uff0cv\uff09\uff0cb\u4e3aa\u7684\u7236\u4eb2\u3002\n\n\u5219\u5c06v+x,u+x,a-x,b-x\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4e00\u6b21\u6811\u4e0a\u5dee\u5206\n\n\u600e\u4e48\u6837\uff1f\u662f\u4e0d\u662f\u5f88\u7b80\u6d01?~~\u5c31\u50cf\u55d1\u4e86\u91d1\u5777\u5783\u3002~~\n\n\u5728\u6700\u540e\u7edf\u8ba1\u4e00\u6b21DFS\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u548c\u5c31\u5b8c\u6210\u5566\uff01\u4e0d\u7406\u89e3\u7684\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u8bd5\u8bd5\u3002\n\n\u53ef\u4ee5\u987a\u4fbf\u5728DFS\u4e2d\u6c42\u51fa\u6700\u5927\u503c\n\n\u6109\u5feb\u7684\u8d34\u4e0a\u4ee3\u7801\n\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint n,m,tot,s,ans=-1;\nint son[50010],f[50010],top[50010];\nint d[50010],head[50010],size[50010],q[50010],ve[50010];\nstruct edge \n{\n\tint to,next;//\u90bb\u63a5\u8868\u6807\u914d \n}e[100010];\nvoid add(int f,int t)\n{\n\te[++tot].to=t;\n\te[tot].next=head[f];\n\thead[f]=tot;//\u90bb\u63a5\u8868\u52a0\u8fb9\u51fd\u6570 \n}\nvoid dfs1(int k)//\u786e\u5b9asize,d,f,son; \n{\n\tsize[k]=1;\n\td[k]=d[f[k]]+1;\n\tfor(int i=head[k];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==f[k])continue;//\u7236\u8282\u70b9\u8fc7\u6ee4 \n\t\tf[e[i].to]=k;\n\t\tdfs1(e[i].to);\n\t\tsize[k]+=size[e[i].to];\n\t\tif(!son[k]||size[e[i].to]>size[son[k]])//\u786e\u5b9a\u91cd\u513f\u5b50 \n\t\tson[k]=e[i].to;\n\t}\n}\nvoid dfs2(int k,int t)//\u786e\u5b9aid,top \n{\n\ttop[k]=t;\n\tif(!son[k])return;//\u53f6\u8282\u70b9\u8fc7\u6ee4 \n\tdfs2(son[k],t);//\u5148\u904d\u5386\u91cd\u94fe\uff0c\u4fdd\u8bc1\u91cd\u94fe\u7684DSF\u5e8f\u8fde\u7eed\uff0c\u65b9\u4fbf\u7ebf\u6bb5\u6811\u7ef4\u62a4 \n\tfor(int i=head[k];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==f[k]||e[i].to==son[k])//\u7236\u8282\u70b9\u548c\u91cd\u513f\u5b50\u8fc7\u6ee4\uff08\u5f88\u91cd\u8981\uff09 \n\t\tcontinue;\n\t\tdfs2(e[i].to,e[i].to);//\u8f7b\u8fb9\u7684\u94fe\u9876\u8981\u6539\u53d8 \n\t}\n}\nint lca(int u,int v)//\u6811\u5256\u6c42LCA\n{\n\twhile(top[u]!=top[v])\n\t{\n\t if(d[top[u]]>d[top[v]])\n\t u=f[top[u]];\n\t else v=f[top[v]];\n\t}\n\tif(d[u]<d[v])return u;\n\telse return v;\n}\nvoid cf(int u,int v)//\u5dee\u5206\u51fd\u6570\n{\n\tq[u]+=1;\n\tq[v]+=1;\n\tint k=lca(u,v);\n\tq[k]-=1;\n\tq[f[k]]-=1;\n}\nvoid dfs(int k)\n{\n\tve[k]=q[k];\n\tfor(int i=head[k];i;i=e[i].next)\n\t{\n\t\tif(e[i].to==f[k])continue;\n\t\tdfs(e[i].to);\n\t\tve[k]+=ve[e[i].to];\n\t}\n\tans=max(ans,ve[k]);//\u6c42\u6700\u5927\u503c\n}\nint main()\n{ \n\tcin>>n>>m;\n\tfor(int i=1;i<=n-1;i++)\n\t{\n\t\tint a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tadd(a,b);\n\t\tadd(b,a);\n\t}\n\tdfs1(1);\n\tdfs2(1,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tcf(u,v); \n\t}\n\tdfs(1);\n\tcout<<ans;\n}\n\n```\n\n\u7ea6500ms\uff0c\u5b8c\u7f8e\uff01\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1581860612,
        "uid": 234582,
        "name": "zpl__hhd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u98df\u7528\u66f4\u4f73](https://tle666.github.io/2019/02/23/[USACO15DEC]%20%E6%9C%80%E5%A4%A7%E6%B5%81/)\n\n# **Description**\n\n\u7ed9\u4f60\u4e00\u9897$n$\u4e2a\u7ed3\u70b9\u7684\u6811\u3002\n\n\u6709$k$\u4e2a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u6709\u4e24\u4e2a\u6570$u$\u548c$v$\uff0c\u4f7f$u$\u5230$v$\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u6743\u90fd\u52a0\u4e00\u3002\n\n\u6700\u540e\u8f93\u51fa\u6700\u5927\u7684\u70b9\u6743\u503c\u3002\n\n\u5bf9\u4e8e$100$%\u7684\u7684\u6570\u636e\uff0c\u6ee1\u8db3$2 \\leq n \\leq 50000,\\ 1 \\leq k \\leq 100000$\n\n[\u9898\u76ee\u94fe\u63a5\u6233\u8fd9\u91cc](https://www.luogu.org/problemnew/show/P3128)\n\n# **Solution**\n\n\u6811\u94fe\u5256\u5206\u6a21\u677f\u9898\uff01~~[\u6ca1\u5b66\u8fc7\u7684\u6233\u8fd9\u91cc](https://tle666.github.io/2019/02/02/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E8%AF%A6%E8%A7%A3/)~~\n\n\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c$u$\uff0c$v$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6267\u884c\u4e00\u6b21\u6811\u94fe\u5256\u5206\u91cc\u6700\u57fa\u672c\u7684\u4fee\u6539\u64cd\u4f5c\uff1a\u8def\u5f84\u4fee\u6539\u5373\u53ef\u3002\n\n\u6700\u540e\u4f60\u518d\u7528\u57fa\u672c\u64cd\u4f5c$query$\u6c42\u4e00\u6b21\u533a\u95f4\u70b9\u6743\u6700\u5927\u503c\u5c31A\u4e86\u554a\uff01\n\n~~\u8be6\u89c1\u4ee3\u7801~~\n\n# **Code**\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <iostream>\nusing namespace std;\n#define MAXN 100100\nint n, k, tot, wson[MAXN], dep[MAXN], fa[MAXN], dfn[MAXN], pre[MAXN], size[MAXN], top[MAXN];\nstruct edge { // \u5b58\u56fe\n    int v;\n    edge *next;\n} epool[MAXN << 1], *h[MAXN], *ecnt = epool;\nstruct node { // \u5b58\u6811\n    int left, right, Max, tag;\n    node *ls, *rs;\n    inline void seta(int x) { tag += x, Max += x;}\n    inline void upd() { Max = max(ls->Max, rs->Max);}\n    inline void push() {\n        if(tag) {\n            if(ls) ls->seta(tag);\n            if(rs) rs->seta(tag);\n            tag = 0;\n        }\n    }\n} pool[MAXN << 3], *root, *cnt = pool;\ninline void addedge(int u, int v) { // \u52a0\u8fb9\n    edge *p = ++ecnt, *q = ++ecnt;\n    p->v = v, p->next = h[u], h[u] = p;\n    q->v = u, q->next = h[v], h[v] = q;\n}\ninline void dfs1(int u, int f) {\n    int v; size[u] = 1;\n    for(edge *p = h[u]; p; p = p->next)\n        if((v = p->v) != f) {\n            fa[v] = u,\n            dep[v] = dep[u] + 1;\n            dfs1(v, u);\n            size[u] += size[v];\n            if(size[wson[u]] < size[v]) wson[u] = v;\n        }\n}\ninline void dfs2(int u, int tp) {\n    int v; top[u] = tp;\n    dfn[u] = ++tot, pre[tot] = u;\n    if(wson[u]) dfs2(wson[u], tp);\n    for(edge *p = h[u]; p; p = p->next)\n        if((v = p->v) != fa[u] && v != wson[u])\n            dfs2(v, v);\n}\ninline void build(node *r, int left, int right) {\n    r->left = left, r->right = right;\n    if(left == right) {\n        r->Max = 0;\n        return ;\n    }\n    int mid = (left + right) >> 1;\n    node *ls = ++cnt, *rs = ++cnt;\n    r->ls = ls, r->rs = rs;\n    build(ls, left, mid), build(rs, mid + 1, right);\n    r->upd();\n}\ninline void change(node *r, int left, int right) {\n    if(r->left == left && r->right == right) {\n        r->seta(1); return ;\n    } r->push();\n    if(r->ls->right >= right) change(r->ls, left, right);\n    else if(r->rs->left <= left) change(r->rs, left, right);\n    else change(r->ls, left, r->ls->right),\n         change(r->rs, r->rs->left, right);\n    r->upd();\n}\ninline int query(node *r, int left, int right) { // \u533a\u95f4\u6c42 max\n    r->push();\n    if(r->left == left && r->right == right) return r->Max;\n    if(r->ls->right >= right) return query(r->ls, left, right);\n    else if(r->rs->left <= left) return query(r->rs, left, right);\n    else return max(query(r->ls, left, r->ls->right),\n                    query(r->rs, r->rs->left, right));\n}\ninline void Qchange(int u, int v) { // \u8def\u5f84\u70b9\u6743\u52a0\u4e00\n    int left, right;\n    while(top[u] != top[v]) {\n        if(dep[top[u]] > dep[top[v]]) swap(u, v);\n        change(root, dfn[top[v]], dfn[v]);\n        v = fa[top[v]];\n    } left = dfn[u], right = dfn[v];\n    if(left > right) swap(left, right);\n    change(root, left, right);\n}\nint main() {\n    int u, v;\n    scanf(\"%d%d\", &n, &k);\n    for(int i = 1; i < n; i++) {\n        scanf(\"%d%d\", &u, &v);\n        addedge(u, v);\n    } dep[1] = 1;\n    dfs1(1, 0), dfs2(1, 1);\n    build(root = cnt, 1, n);\n    while(k--) {\n        scanf(\"%d%d\", &u, &v);\n        Qchange(u, v);\n    } printf(\"%d\\n\", query(root, 1, n)); // \u6700\u540e\u8f93\u51fa\u6700\u5927\u503c\n    return 0;\n}\n```\n\n",
        "postTime": 1550890235,
        "uid": 54628,
        "name": "eros1on",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P3128\u6700\u5927\u6d41"
    },
    {
        "content": "### \u9898\u76ee\u63cf\u8ff0\n\nFJ\u7ed9\u4ed6\u7684\u725b\u68da\u7684N(2\u2264N\u226450,000)\u4e2a\u9694\u95f4\u4e4b\u95f4\u5b89\u88c5\u4e86N-1\u6839\u7ba1\u9053\uff0c\u9694\u95f4\u7f16\u53f7\u4ece1\u5230N\u3002\u6240\u6709\u9694\u95f4\u90fd\u88ab\u7ba1\u9053\u8fde\u901a\u4e86\u3002\n\nFJ\u6709K(1\u2264K\u2264100,000)\u6761\u8fd0\u8f93\u725b\u5976\u7684\u8def\u7ebf\uff0c\u7b2ci\u6761\u8def\u7ebf\u4ece\u9694\u95f4si\u8fd0\u8f93\u5230\u9694\u95f4ti\u3002\u4e00\u6761\u8fd0\u8f93\u8def\u7ebf\u4f1a\u7ed9\u5b83\u7684\u4e24\u4e2a\u7aef\u70b9\u5904\u7684\u9694\u95f4\u4ee5\u53ca\u4e2d\u95f4\u9014\u5f84\u7684\u6240\u6709\u9694\u95f4\u5e26\u6765\u4e00\u4e2a\u5355\u4f4d\u7684\u8fd0\u8f93\u538b\u529b\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u538b\u529b\u6700\u5927\u7684\u9694\u95f4\u7684\u538b\u529b\u662f\u591a\u5c11\u3002\n\n### \u4e3b\u8981\u601d\u8def \uff1a LCA + \u6811\u4e0a\u5dee\u5206\n\n\u5982\u679c\u60a8\u8fd8\u4e0d\u4f1a\u5dee\u5206\uff0c\u90a3\u5c31\u53bb\u8fd9\u4e2a[\u795e\u5947\u7684\u7f51\u7ad9](www.baidu.com)\u53bb\u627e\u4e00\u627e\u5dee\u5206\u5427\uff08\u9003\n\n\u8fd9\u662f\u9053\u6811\u4e0a\u5dee\u5206\u88f8\u9898\u3002\n\n\u8bba\u5982\u4f55\u6811\u4e0a\u505a\u5dee\u5206\uff0c\uff0c\uff0c\n\n\u8fd8\u8bb0\u5f97\u5e8f\u5217\u4e0a\u5dee\u5206\u662f\u600e\u4e48\u505a\u7684\u5417$QAQ$\uff1f\n\n\u5047\u5982\u6211\u4eec\u8981\u628a\u4e00\u6bb5\u533a\u95f4\u7684\u6570\u636e+1\uff0c\u6211\u4eec\u6839\u636e\u5dee\u7684\u6027\u8d28\u628a\u5de6\u7aef\u70b9\u7ef4\u62a4\u5dee\u5206\u7684\u6570\u7ec4\u76f8\u5e94\u4f4d\u7f6e+1\uff0c\u53f3\u7aef\u70b9-1\u3002\n\n\u6811\u4e0a\u5dee\u5206\u4e5f\u7c7b\u4f3c\u3002\u6211\u4eec\u53ea\u9700\u8981\u628a\u4e24\u4e2a\u7aef\u70b9-1\uff0c\u4e24\u4e2a\u7aef\u70b9\u7684lca -2,\uff08\u4e3a\u5565-2\uff0cemmm\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u7aef\u70b9\u8981+1\u554a\uff09\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5c31\u4f1a\u53d1\u73b0lca\u5904\u6c42\u51fa\u7684\u5e76\u6ca1\u6709+1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97lca\u5904-1\u5c31\u597d\uff0c\u4fdd\u8bc1\u4e4b\u540e\u7684\u70b9\u52a0\u7684\u65f6\u5019\u4f1a\u6709+1\u7684\u6548\u679c\uff0c\u6211\u4eec\u5728lca\u7684\u7236\u8282\u70b9\u5904\u4e5f-1\uff0c\u4fdd\u8bc1lca\u5904\u662f\u6709+1\u6548\u679c\u7684\u3002\n\n\u6240\u4ee5\u5c31\u8fd9\u4e48\u641e\u5566\uff01\n\n### code \uff1a\n\nP.S. \uff1a \uff08\u6811\u5256LCA\u6253\u4e60\u60ef\u4e86QAQ\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#include <map>\n#include <vector>\nusing namespace std;\n#define go(i, j, n, k) for(int i = j; i <= n; i += k)\n#define fo(i, j, n, k) for(int i = j; i >= n; i -= k)\n#define rep(i, x) for(int i = h[x]; i; i = e[i].nxt)\n#define mn 100010\n#define inf 1 << 30\n#define ll long long\ninline int read() {\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch>'9'||ch<'0'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x * f;\n}\nstruct edge{\n\tint v, nxt;\n}e[mn << 1];\nint h[mn], p;\ninline void add(int a, int b) {\n\te[++p].nxt = h[a], h[a] = p, e[p].v = b;\n}\nint dep[mn], sze[mn], fa[mn], son[mn], top[mn], cnt, n, m, _minus[mn], ans = -1;\nvoid dfs1(int x, int f, int deep) {\n\tdep[x] = deep;\n\tsze[x] = 1;\n\tfa[x] = f;\n\tint maxson = -1;\n\trep(i, x) {\n\t\tint v = e[i].v;\n\t\tif(v == f) continue;\n\t\tdfs1(v, x, deep + 1);\n\t\tsze[x] += sze[v];\n\t\tif(sze[v] > maxson)\n\t\t\tmaxson = sze[v], son[x] = v;\n\t}\n}\nvoid dfs2(int x, int topf) {\n\ttop[x] = topf;\n\tif(!son[x]) return;\n\tdfs2(son[x], topf);\n\trep(i, x) {\n\t\tint v = e[i].v;\n\t\tif(v == fa[x] || v == son[x]) continue;\n\t\tdfs2(v, v);\n\t}\n}\ninline int LCA(int x, int y) {\n\twhile(top[x] != top[y]) {\n\t\tif(dep[top[x]] < dep[top[y]]) swap(x, y);\n\t\tx = fa[top[x]];\n\t}\n\treturn dep[x] > dep[y] ? y : x;\n}\ninline void dfs(int x, int f) {\n\trep(i, x) {\n\t\tint v = e[i].v;\n\t\tif(v == f) continue;\n\t\tdfs(v, x);\n\t\t_minus[x] += _minus[v];\n\t}\n\tans = max(ans, _minus[x]);\n}\nint main() {\n\tn = read(), m = read();\n\tgo(i, 1, n - 1, 1) {\n\t\tint a = read(), b = read();\n\t\tadd(a, b), add(b, a);\n\t}\n\tdfs1(1, 0, 1); // \u6811\u5256\u9884\u5904\u7406\u7684\u54e6QAQ\n\tdfs2(1, 1);    // \u6811\u5256\u9884\u5904\u7406\u7684\u54e6QAQ\n\tgo(i, 1, m, 1) {\n\t\tint a = read(), b = read(), lca = LCA(a, b);\n\t\t_minus[a]++, _minus[b]++, _minus[lca]--, _minus[fa[lca]]--; \n        // \u4e0d\u8981\u95ee\u6211\u7684\u6570\u7ec4\u53d8\u91cf\u540d\u4e4b\u524d\u52a0\u2018_\u2019\uff0c\u4f60\u53ef\u4ee5\u8bd5\u4e00\u4e0b\u4e0d\u52a0 \n\t}\n\tdfs(1, 0);     // \u5dee\u5206\u5b8c\u4e86\u5c31\u505a\u4e2a\u6811\u4e0a\u524d\u7f00\u548c\u5c31\u597d\u8fa3\uff01~\\(\u2267\u25bd\u2266)/~\n\tcout << ans << \"\\n\";\n\treturn 0;\n}\n```",
        "postTime": 1540990757,
        "uid": 71168,
        "name": "yizimi\u8fdc\u6b23",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3128 \u3010[USACO15DEC]\u6700\u5927\u6d41Max Flow\u3011"
    }
]