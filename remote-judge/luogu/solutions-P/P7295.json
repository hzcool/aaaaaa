[
    {
        "content": "[\u5e7f\u544a](https://m-sea-blog.com/)\n\n---\n\n\u5982\u679c\u6211\u4eec\u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u76f8\u540c\u5b57\u7b26\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5f97\u5230\u7684\u56fe\u4e3a\u5e73\u9762\u56fe\u3002\n\n\u5bf9\u4e8e\u5e73\u9762\u56fe\uff0c\u6211\u4eec\u6709\u6b27\u62c9\u516c\u5f0f\n\n$$\nF + V - E = C + 1\n$$\n\n\u5176\u4e2d $F$ \u4e3a\u533a\u57df\u6570\uff08\u65e0\u754c\u57df\u4e5f\u7b97\u4e00\u4e2a\u533a\u57df\uff09\u3001$V$ \u4e3a\u70b9\u6570\u3001$E$ \u4e3a\u8fb9\u6570\u3001$C$ \u4e3a\u8fde\u901a\u5757\u6570\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u60f3\u529e\u6cd5\u6c42\u51fa $F, V, E$\u3002\n\n$V$ \u662f\u597d\u6c42\u7684\uff0c\u5373\u4e3a $(x_2 - x_1 + 1)(y_2 - y_1 + 1)$\uff1b$E$ \u4e5f\u662f\u597d\u6c42\u7684\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e8c\u7ef4\u524d\u7f00\u548c\u5373\u53ef\u3002\u4e0b\u9762\u8003\u8651\u5982\u4f55\u6c42 $F$\u3002\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5 BFS \u627e\u5230\u6240\u6709\u7684\u533a\u57df\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u57df\uff0c\u6211\u4eec\u7ed9\u5b83\u9009\u62e9\u4e00\u4e2a\u6807\u8bb0\u70b9\uff0c\u7136\u540e\u4e8c\u7ef4\u524d\u7f00\u548c\u7b97\u51fa\u77e9\u5f62\u4e2d\u6807\u8bb0\u70b9\u7684\u4e2a\u6570\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u904d\u5386\u5176\u8fb9\u754c\uff0c\u5982\u679c\u8fb9\u754c\u6240\u5c5e\u533a\u57df\u7684\u6807\u8bb0\u70b9\u5728\u8be2\u95ee\u77e9\u5f62\u4e2d\uff0c\u8bf4\u660e\u8fd9\u4e2a\u533a\u57df\u5728\u8fd9\u4e2a\u8be2\u95ee\u4e2d\u5c5e\u4e8e\u65e0\u754c\u57df\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5176\u51cf\u53bb\u3002\u8fd9\u91cc\u6ce8\u610f\u4e0d\u8981\u91cd\u590d\u51cf\u53bb\u67d0\u4e2a\u533a\u57df\u3002\n\n\u8fd9\u6837\u5b50\u5c31\u505a\u5b8c\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(nm + nq + mq)$\u3002\n\n```cpp\n// ====================================\n//   author: M_sea\n//   website: https://m-sea-blog.com/\n// ====================================\n#include <bits/stdc++.h>\n#define file(x) freopen(#x\".in\", \"r\", stdin), freopen(#x\".out\", \"w\", stdout)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\ntypedef long long ll;\n\nint read() {\n\tint X = 0, w = 1; char c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') w = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') X = X * 10 + c - '0', c = getchar();\n\treturn X * w;\n}\n\nconst int N = 1000 + 10;\nconst int dx[4] = {0, 1, 0, -1}, dy[4] = {1, 0, -1, 0};\n\nint n, m, Q;\nchar s[N][N];\nint se[2][N][N], sf[N][N];\nint bl[N][N], tot = 0;\nstd::pair<int, int> pos[N * N];\nint vis[N * N];\n\nvoid bfs(int sx, int sy) {\n\tstd::queue<std::pair<int, int>> Q; Q.emplace(sx, sy);\n\tbl[sx][sy] = ++tot, ++sf[sx][sy], pos[tot] = std::make_pair(sx, sy);\n\tauto isconnected = [](int x1, int y1, int x2, int y2) -> bool {\n\t\tif (x1 == x2) return s[x1][std::max(y1, y2)] != s[x1 + 1][std::max(y1, y2)];\n\t\telse return s[std::max(x1, x2)][y1] != s[std::max(x1, x2)][y1 + 1];\n\t};\n\tint flag = 0;\n\twhile (!Q.empty()) {\n\t\tint x = Q.front().first, y = Q.front().second; Q.pop();\n\t\tfor (int d = 0; d < 4; ++d) {\n\t\t\tint X = x + dx[d], Y = y + dy[d];\n\t\t\tif (!isconnected(x, y, X, Y)) continue;\n\t\t\tif (X < 1 || X > n || Y < 1 || Y > m) { flag = 1; continue; }\n\t\t\tif (!bl[X][Y]) bl[X][Y] = tot, Q.emplace(X, Y);\n\t\t}\n\t}\n\tif (flag) --sf[sx][sy], pos[tot] = std::make_pair(0, 0);\n}\n\nint main() {\n\tn = read(), m = read(), Q = read();\n\tfor (int i = 1; i <= n; ++i) scanf(\"%s\", s[i] + 1);\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j) {\n\t\t\tif (i < n && s[i][j] == s[i + 1][j]) se[0][i][j] = 1;\n\t\t\tif (j < m && s[i][j] == s[i][j + 1]) se[1][i][j] = 1;\n\t\t}\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j)\n\t\t\tfor (int k = 0; k < 2; ++k)\n\t\t\t\tse[k][i][j] += se[k][i - 1][j] + se[k][i][j - 1] - se[k][i - 1][j - 1];\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j)\n\t\t\tif (!bl[i][j]) bfs(i, j);\n\tfor (int i = 1; i <= n; ++i)\n\t\tfor (int j = 1; j <= m; ++j)\n\t\t\tsf[i][j] += sf[i - 1][j] + sf[i][j - 1] - sf[i - 1][j - 1];\n\tauto S = [](int s[][N], int lx, int ly, int rx, int ry) -> int {\n\t\treturn s[rx][ry] - s[lx - 1][ry] - s[rx][ly - 1] + s[lx - 1][ly - 1];\n\t};\n\tauto in = [](int p, int lx, int ly, int rx, int ry) -> bool {\n\t\tint x = pos[p].first, y = pos[p].second;\n\t\treturn lx <= x && x <= rx && ly <= y && y <= ry;\n\t};\n\twhile (Q--) {\n\t\tint lx = read(), ly = read(), rx = read(), ry = read();\n\t\tint V = (rx - lx + 1) * (ry - ly + 1);\n\t\tint E = S(se[0], lx, ly, rx - 1, ry) + S(se[1], lx, ly, rx, ry - 1);\n\t\tint F = S(sf, lx, ly, rx - 1, ry - 1);\n\t\tfor (int i = lx; i <= rx; ++i)\n\t\t\tif (!vis[bl[i][ly - 1]] && in(bl[i][ly - 1], lx, ly, rx - 1, ry - 1))\n\t\t\t\tvis[bl[i][ly - 1]] = 1, --F;\n\t\tfor (int i = lx; i <= rx; ++i)\n\t\t\tif (!vis[bl[i][ry]] && in(bl[i][ry], lx, ly, rx - 1, ry - 1))\n\t\t\t\tvis[bl[i][ry]] = 1, --F;\n\t\tfor (int i = ly; i <= ry; ++i)\n\t\t\tif (!vis[bl[lx - 1][i]] && in(bl[lx - 1][i], lx, ly, rx - 1, ry - 1))\n\t\t\t\tvis[bl[lx - 1][i]] = 1, --F;\n\t\tfor (int i = ly; i<= ry; ++i)\n\t\t\tif (!vis[bl[rx][i]] && in(bl[rx][i], lx, ly, rx - 1, ry - 1))\n\t\t\t\tvis[bl[rx][i]] = 1, --F;\n\t\tprintf(\"%d\\n\", V - E + F); // \u8fd9\u91cc\u7684 F \u6ca1\u6709\u7b97\u65e0\u754c\u57df\n\n\t\tfor (int i = lx; i <= rx; ++i) vis[bl[i][ly - 1]] = 0;\n\t\tfor (int i = lx; i <= rx; ++i) vis[bl[i][ry]] = 0;\n\t\tfor (int i = ly; i <= ry; ++i) vis[bl[lx - 1][i]] = 0;\n\t\tfor (int i = ly; i<= ry; ++i) vis[bl[rx][i]] = 0;\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1614585686,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P7295 \u3010[USACO21JAN] Paint by Letters P\u3011"
    },
    {
        "content": "Update on 2022.4.7\uff1a\u611f\u8c22 @2b7e151628ae\u3002\n\n\u524d\u7f6e\u829d\u58eb\uff1a[\u53ef\u64a4\u9500\u5e76\u67e5\u96c6](https://www.cnblogs.com/brady12/p/15489195.html)\u3001[\u5206\u5757](https://oi-wiki.org/ds/block-array/)\n\n\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u66b4\u529b\uff1a$ans$ \u521d\u503c\u4e3a\u5b50\u77e9\u5f62\u5927\u5c0f\uff0c\u5c06\u5b50\u77e9\u5f62\u5185\u6240\u6709\u76f8\u90bb\u4e14\u989c\u8272\u76f8\u540c\u7684\u70b9\u5728\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u4e2d\u8fde\u8fb9\uff0c\u6bcf\u9047\u5230\u4e00\u5bf9\u989c\u8272\u76f8\u540c\u4e14\u6b64\u524d\u5df2\u5728\u540c\u4e00\u8054\u901a\u5757\u4e2d\u7684\u70b9\u5c06 $ans$ \u51cf\u4e00\u3002\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u540e\u64a4\u9500\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u4e24\u4e2a\u76f8\u90bb\u4e14\u76f8\u90bb\u7684\u8fb9\u957f\u76f8\u540c\u7684\u5b50\u77e9\u5f62\u7684\u4fe1\u606f\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u7b54\u6848\u4e3a\u4e24\u4e2a\u5b50\u77e9\u5f62\u5355\u72ec\u7684\u7b54\u6848\u4e4b\u548c\u51cf\u53bb\u5408\u5e76\u76f8\u90bb\u8fb9\u4e0a\u7684\u6240\u6709\u70b9\u4ea7\u751f\u7684\u8d21\u732e\u3002\n\n\u4e8e\u662f\u4e0d\u96be\u60f3\u5230\u4e8c\u7ef4\u5206\u5757\u3002\u8bbe\u6a2a\u8f74\u5757\u957f\u4e3a $\\sqrt{n}$\uff0c$bel_{1, x}$ \u8868\u793a\u6a2a\u8f74\u4e0a $x$ \u70b9\u6240\u5c5e\u5757\uff0c\u7eb5\u8f74\u5757\u957f\u4e3a $\\sqrt{m}$\uff0c$bel_{2, x}$ \u8868\u793a\u7eb5\u8f74\u4e0a $x$ \u70b9\u6240\u5c5e\u5757\u3002\n\n\u5f53 $bel_{1, x1} + 1 \\geq bel_{1, x2}$ \u6216 $bel_{1, x1} + 1 \\geq bel_{1, x2}$\uff0c\u76f4\u63a5\u66b4\u529b\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q \\log nm (n \\sqrt{m} + m \\sqrt{n}))$\u3002\n\n\u5426\u5219\uff0c\u8003\u8651\u5408\u5e76\u6574\u5757\u4fe1\u606f\uff0c\u5e76\u5bf9\u6563\u5757\u5355\u72ec\u5904\u7406\u3002\n\n1. \u6574\u5757\u5408\u5e76\n\n\u76f4\u63a5\u6309\u524d\u8ff0\u65b9\u5f0f\u64cd\u4f5c\u5373\u53ef\u3002\n\n2. \u5de6\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0a\u3001\u53f3\u4e0b\u56db\u4e2a\u6563\u5757\n\n\u8003\u8651\u5efa $nm$ \u4e2a\u865a\u70b9\u8868\u793a\u5408\u5e76\u8fc7\u7a0b\u4e2d\u4e34\u65f6\u4f7f\u7528\u7684\u70b9\uff0c\u76f4\u63a5\u5408\u5e76\u865a\u70b9\u5373\u53ef\u3002\n\n3. \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u6563\u5757\n\n\u5bf9\u4e8e\u6563\u5757\u5185\u5230\u6563\u5757\u5185\u7684\u8fde\u8fb9\uff0c\u5408\u5e76\u865a\u70b9\u5373\u53ef\uff1b\u5bf9\u4e8e\u6563\u5757\u5185\u5230\u6574\u5757\u5185\u7684\u8fde\u8fb9\uff0c\u5408\u5e76\u6563\u5757\u5185\u7684\u865a\u70b9\u548c\u6574\u5757\u5185\u7684\u5b9e\u70b9\u5373\u53ef\u3002\n\n\u7efc\u4e0a\uff0c\u8be5\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e3a $O(q \\log nm (n \\sqrt{m} + m \\sqrt{n}))$\u3002\n\n\u7531\u4e8e\u6700\u5f00\u59cb\u8981\u9884\u5904\u7406\u6574\u5757\u4fe1\u606f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(q \\log nm (n \\sqrt{m} + m \\sqrt{n}) + nm \\log nm)$\u3002\n\n\u672c\u9898\u8f83\u4e3a\u5361\u5e38\uff0c\u6211\u5757\u957f\u53d6\u7684\u662f $0.9 \\sqrt{n}$\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <stdio.h>\n#include <math.h>\n\n#define check(new_x, new_y) if (mp[j][y] == mp[new_x][new_y]) dsu.merge2(id[j][y], id[new_x][new_y])\n\ntypedef struct Node_tag {\n\tint x;\n\tint y;\n\tNode_tag(){}\n\tNode_tag(int x_, int y_){\n\t\tx = x_;\n\t\ty = y_;\n\t}\n} Node;\n\ntypedef struct {\n\tint top = 0;\n\tint root[2000007], size[2000007];\n\tNode s[2000007];\n\t\n\tinline void init(int n){\n\t\tfor (register int i = 1; i <= n; i++){\n\t\t\troot[i] = i;\n\t\t\tsize[i] = 1;\n\t\t}\n\t}\n\t\n\tint get_root1(int x){\n\t\twhile (root[x] != x) x = root[x] = root[root[x]];\n\t\treturn x;\n\t}\n\t\n\t#define swap(x, y) x ^= y ^= x ^= y\n\t\n\tinline bool merge1(int x, int y){\n\t\tint x_root = get_root1(x), y_root = get_root1(y);\n\t\tif (x_root == y_root) return false;\n\t\tif (size[x_root] > size[y_root]) swap(x_root, y_root);\n\t\troot[x_root] = y_root;\n\t\tsize[y_root] += size[x_root];\n\t\treturn true;\n\t}\n\t\n\tint get_root2(int x){\n\t\twhile (root[x] != x) x = root[x];\n\t\treturn x;\n\t}\n\t\n\tinline void merge2(int x, int y){\n\t\tint x_root = get_root2(x), y_root = get_root2(y);\n\t\tif (x_root != y_root){\n\t\t\tif (size[x_root] > size[y_root]) swap(x_root, y_root);\n\t\t\troot[x_root] = y_root;\n\t\t\tsize[y_root] += size[x_root];\n\t\t\ts[++top] = Node(x_root, y_root);\n\t\t}\n\t}\n\t\n\tinline void undo(){\n\t\twhile (top > 0){\n\t\t\tNode cur = s[top--];\n\t\t\troot[cur.x] = cur.x;\n\t\t\tsize[cur.y] -= size[cur.x];\n\t\t}\n\t}\n} DSU;\n\nDSU dsu;\nint belong1[1007], lft1[37], rt1[37], belong2[1007], lft2[37], rt2[37], id[1007][1007], pre_ans[37][37];\nchar mp[1007][1007];\n\ninline int read(){\n\tint ans = 0;\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9'){\n\t\tch = getchar();\n\t}\n\twhile (ch >= '0' && ch <= '9'){\n\t\tans = ans * 10 + (ch ^ 48);\n\t\tch = getchar();\n\t}\n\treturn ans;\n}\n\ninline int min(int a, int b){\n\treturn a < b ? a : b;\n}\n\ninline int f(int x, int y, int n){\n\treturn n * (x - 1) + y;\n}\n\ninline int get_sum(int l1, int r1, int l2, int r2){\n\treturn pre_ans[r1][r2] - pre_ans[l1 - 1][r2] - pre_ans[r1][l2 - 1] + pre_ans[l1 - 1][l2 - 1];\n}\n\nint main(){\n\tint n = read(), m = read(), q = read(), size = n * m, block1 = sqrt(n) * 0.9, k = (n - 1) / block1 + 1, block2 = sqrt(m) * 0.9, x = (m - 1) / block2 + 1;\n\tdsu.init(size * 2);\n\tfor (register int i = 1; i <= n; i++){\n\t\tbelong1[i] = (i - 1) / block1 + 1;\n\t}\n\tfor (register int i = 1; i <= k; i++){\n\t\tlft1[i] = block1 * (i - 1) + 1;\n\t\trt1[i] = min(i * block1, n);\n\t}\n\tfor (register int i = 1; i <= m; i++){\n\t\tbelong2[i] = (i - 1) / block2 + 1;\n\t}\n\tfor (register int i = 1; i <= x; i++){\n\t\tlft2[i] = block2 * (i - 1) + 1;\n\t\trt2[i] = min(i * block2, m);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tfor (register int j = 1; j <= m; j++){\n\t\t\tid[i][j] = f(i, j, m);\n\t\t}\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tscanf(\"%s\", &mp[i][1]);\n\t}\n\tfor (register int i = 1; i <= k; i++){\n\t\tfor (register int j = 1; j <= x; j++){\n\t\t\tpre_ans[i][j] = (rt1[i] - lft1[i] + 1) * (rt2[j] - lft2[j] + 1);\n\t\t\tfor (register int y = lft1[i]; y <= rt1[i]; y++){\n\t\t\t\tfor (register int z = lft2[j]; z <= rt2[j]; z++){\n\t\t\t\t\tif (z < rt2[j] && mp[y][z] == mp[y][z + 1] && dsu.merge1(id[y][z] + size, id[y][z + 1] + size)) pre_ans[i][j]--;\n\t\t\t\t\tif (y < rt1[i] && mp[y][z] == mp[y + 1][z] && dsu.merge1(id[y][z] + size, id[y + 1][z] + size)) pre_ans[i][j]--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpre_ans[i][j] += pre_ans[i][j - 1] + pre_ans[i - 1][j] - pre_ans[i - 1][j - 1];\n\t\t}\n\t}\n\tfor (register int i = 1; i <= q; i++){\n\t\tint x1 = read(), y1 = read(), x2 = read(), y2 = read(), a = belong1[x1], b = belong1[x2], c = belong2[y1], d = belong2[y2], ans = (x2 - x1 + 1) * (y2 - y1 + 1);\n\t\tif (a + 1 >= b || c + 1 >= d){\n\t\t\tfor (register int j = x1; j <= x2; j++){\n\t\t\t\tfor (register int y = y1; y <= y2; y++){\n\t\t\t\t\tif (y < y2 && mp[j][y] == mp[j][y + 1]) dsu.merge2(id[j][y], id[j][y + 1]);\n\t\t\t\t\tif (j < x2 && mp[j][y] == mp[j + 1][y]) dsu.merge2(id[j][y], id[j + 1][y]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tint ai = a + 1, bd = b - 1, ci = c + 1, dd = d - 1, rt1bd = rt1[bd], lft1ai = lft1[ai], rt2dd = rt2[dd], lft2ci = lft2[ci], rt1a = rt1[a], lft1b = lft1[b], rt2c = rt2[c], lft2d = lft2[d];\n\t\t\tans += get_sum(ai, bd, ci, dd) - (rt1bd - lft1ai + 1) * (rt2dd - lft2ci + 1);\n\t\t\tfor (register int j = lft2ci; j <= rt2dd; j++){\n\t\t\t\tif (mp[rt1a][j] == mp[lft1ai][j]) dsu.merge2(id[rt1a][j], id[lft1ai][j] + size);\n\t\t\t}\n\t\t\tfor (register int j = ai; j < bd; j++){\n\t\t\t\tint rt1j = rt1[j], lft1ji = rt1j + 1;\n\t\t\t\tfor (register int y = lft2ci; y <= rt2dd; y++){\n\t\t\t\t\tif (mp[rt1[j]][y] == mp[lft1[j + 1]][y]) dsu.merge2(id[rt1j][y] + size, id[lft1ji][y] + size);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (register int j = lft2ci; j <= rt2dd; j++){\n\t\t\t\tif (mp[rt1bd][j] == mp[lft1b][j]) dsu.merge2(id[rt1bd][j] + size, id[lft1b][j]);\n\t\t\t}\n\t\t\tfor (register int j = lft1ai; j <= rt1bd; j++){\n\t\t\t\tif (mp[j][rt2c] == mp[j][lft2ci]) dsu.merge2(id[j][rt2c], id[j][lft2ci] + size);\n\t\t\t}\n\t\t\tfor (register int j = ci; j < dd; j++){\n\t\t\t\tint rt2j = rt2[j], lft2ji = rt2j + 1;\n\t\t\t\tfor (register int y = lft1ai; y <= rt1bd; y++){\n\t\t\t\t\tif (mp[y][rt2j] == mp[y][lft2ji]) dsu.merge2(id[y][rt2j] + size, id[y][lft2ji] + size);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (register int j = lft1ai; j <= rt1bd; j++){\n\t\t\t\tif (mp[j][rt2dd] == mp[j][lft2d]) dsu.merge2(id[j][rt2dd] + size, id[j][lft2d]);\n\t\t\t}\n\t\t\tfor (register int j = x1; j <= rt1a; j++){\n\t\t\t\tfor (register int y = y1; y <= rt2c; y++){\n\t\t\t\t\tcheck(j, y + 1);\n\t\t\t\t\tcheck(j + 1, y);\n\t\t\t\t}\n\t\t\t\tfor (register int y = lft2d; y <= y2; y++){\n\t\t\t\t\tcheck(j, y - 1);\n\t\t\t\t\tcheck(j + 1, y);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (register int j = lft1b; j <= x2; j++){\n\t\t\t\tfor (register int y = y1; y <= rt2c; y++){\n\t\t\t\t\tcheck(j, y + 1);\n\t\t\t\t\tcheck(j - 1, y);\n\t\t\t\t}\n\t\t\t\tfor (register int y = lft2d; y <= y2; y++){\n\t\t\t\t\tcheck(j, y - 1);\n\t\t\t\t\tcheck(j - 1, y);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (register int j = lft1ai; j <= rt1bd; j++){\n\t\t\t\tfor (register int y = y1; y <= rt2c; y++){\n\t\t\t\t\tif (mp[j][y] == mp[j][y + 1]) dsu.merge2(id[j][y], y == rt2c ? id[j][y + 1] + size : id[j][y + 1]);\n\t\t\t\t\tif (mp[j][y] == mp[j + 1][y]) dsu.merge2(id[j][y], id[j + 1][y]);\n\t\t\t\t}\n\t\t\t\tfor (register int y = lft2d; y <= y2; y++){\n\t\t\t\t\tif (mp[j][y] == mp[j][y - 1]) dsu.merge2(id[j][y], y == lft2d ? id[j][y - 1] + size : id[j][y - 1]);\n\t\t\t\t\tif (mp[j][y] == mp[j + 1][y]) dsu.merge2(id[j][y], id[j + 1][y]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (register int j = lft2ci; j <= rt2dd; j++){\n\t\t\t\tfor (register int y = x1; y <= rt1a; y++){\n\t\t\t\t\tif (mp[y][j] == mp[y][j + 1]) dsu.merge2(id[y][j], id[y][j + 1]);\n\t\t\t\t\tif (mp[y][j] == mp[y + 1][j]) dsu.merge2(id[y][j], y == rt1a ? id[y + 1][j] + size : id[y + 1][j]);\n\t\t\t\t}\n\t\t\t\tfor (register int y = lft1b; y <= x2; y++){\n\t\t\t\t\tif (mp[y][j] == mp[y][j + 1]) dsu.merge2(id[y][j], id[y][j + 1]);\n\t\t\t\t\tif (mp[y][j] == mp[y - 1][j]) dsu.merge2(id[y][j], y == lft1b ? id[y - 1][j] + size : id[y - 1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tans -= dsu.top;\n\t\tdsu.undo();\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1649246259,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7295 \u3010[USACO21JAN] Paint by Letters P\u3011"
    },
    {
        "content": "\u5982\u679c\u5c06\u76f8\u90bb\u540c\u8272\u70b9\u4e4b\u95f4\u8fde\u4e0a\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a\u5e73\u9762\u56fe\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u4e00\u4e2a\u5b50\u77e9\u5f62\u5185\u7684\u8fde\u901a\u5757\u4e2a\u6570\n\n\u90a3\u4e48\u6839\u636e\u5e73\u9762\u56fe\u6b27\u62c9\u5b9a\u7406\uff0c\u70b9\u6570+\u533a\u57df\u6570-\u8fb9\u6570=\u8fde\u901a\u5757\u6570\uff08\u9664\u6389\u65e0\u754c\u57df\uff09\n\n\u70b9\u6570\u5c31\u662f\u77e9\u5f62\u9762\u79ef\uff0c\u8fb9\u6570\u7684\u8bdd\uff0c\u6211\u4eec\u7ed9\u8fb9\u5b9a\u4e2a\u5411\uff0c\u5728\u9760\u53f3\u6216\u8005\u9760\u4e0b\u7684\u683c\u5b50\u4e0a\u628a\u8fd9\u6761\u8fb9\u7edf\u8ba1\u5165\u603b\u6570\uff0c\u95ee\u9898\u5728\u4e8e\u6c42\u533a\u57df\u6570\n\n\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u5e73\u9762\u56fe\u7684\u5bf9\u5076\u56fe\u6c42\u51fa\u6765\u7684\u8bdd\uff0c\u5c31\u76f8\u5f53\u4e8e\u6c42\u51fa\u5728\u8be2\u95ee\u77e9\u5f62\u5185\u90e8\u7684\u70b9\u7684\u6570\u91cf\n\n\u90a3\u4e48\u6211\u4eec\u77e5\u9053\u5bf9\u5076\u56fe\u4e0a\u4e00\u4e2a\u70b9\u5bf9\u5e94\u7684\u662f\u539f\u56fe\u4e0a\u7684\u4e00\u4e2a\u8fde\u901a\u5757\n\n\u770b\u8d77\u6765\u4e0d\u662f\u5f88\u597d\u7edf\u8ba1\uff0c\u5b9e\u9645\u4e0a\u7531\u4e8e\u6211\u4eec\u67e5\u8be2\u7684\u662f\u5b50\u77e9\u5f62\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fde\u901a\u5757\u6269\u6210\u4e00\u4e2a\u77e9\u5f62\uff0c\u5373\u6070\u597d\u5305\u542b\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u6700\u5c0f\u77e9\u5f62\n\n\u7136\u540e\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u7ed9\u5b9a $O(nm)$ \u4e2a\u77e9\u5f62\uff0c$Q$ \u6b21\u8be2\u95ee\u88ab\u4e00\u4e2a\u77e9\u5f62\u5b8c\u5168\u5305\u542b\u7684\u77e9\u5f62\u6570\u91cf\uff0c\u8fd9\u4e2a\u95ee\u9898\u660e\u663e\u5c31\u662f\u4e00\u4e2a\u56db\u7ef4\u504f\u5e8f\u3002\n\n\u6211\u4eec\u5148\u901a\u8fc7\u6392\u5e8f\u6d88\u6389\u4e00\u7ef4\uff0c\u518d\u901a\u8fc7 CDQ \u5206\u6cbb\u6d88\u6389\u4e00\u7ef4\uff0c\u590d\u6742\u5ea6\u4e58\u4e2a $\\log$\u3002\n\n\u6309\u7167\u4e00\u822c\u7684\u6b65\u9aa4\uff0c\u8fd9\u65f6\u5019\u5e94\u8be5\u8981\u4e48\u518d\u5957\u4e00\u4e2a CDQ\uff0c\u8981\u4e48\u5c31\u76f4\u63a5\u7528\u6811\u5957\u6811\u3002\n\n\u8fd9\u663e\u7136\u8fc7\u4e0d\u53bb\u554a\u662f\u4e0d\u662f\u3002\n\n\u6ce8\u610f\u5230\u4fee\u6539\u64cd\u4f5c\u9ad8\u8fbe $10^6$ \u6b21\uff0c\u800c\u8be2\u95ee\u6b21\u6570\u53ea\u6709 $10^3$ \u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u6811\u5957\u6811\u6362\u6210\u4e8c\u7ef4\u5206\u5757\uff0c\u7136\u540e\u6839\u53f7\u5e73\u8861\u4e00\u4e0b\uff0c\u505a\u5230 $O(1)$ \u4fee\u6539\uff0c$O(\\sqrt{nm})$ \u67e5\u8be2\uff0c\u5373\u6bcf\u5c42\u4fee\u6539\u590d\u6742\u5ea6\u4e3a $O(nm)$\uff0c\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a $O(q\\sqrt{nm})$\uff0c$\\log$ \u5c42\u7684\u603b\u590d\u6742\u5ea6\u5c31\u662f $O((nm+q\\sqrt{nm})\\log n)$\uff0c\u53ef\u4ee5\u8fc7\u5f97\u53bb\u3002\n\n\u4ee3\u7801\u6bd4\u8f83\u597d\u5199\uff0c\u6ca1\u6709\u4ec0\u4e48\u7ec6\u8282\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n\ntypedef long long ll;\n\ninline int read() {\n\tint res=0,f=1;char ch;\n\twhile(ch=getchar(),ch<'0'||ch>'9') if(ch=='-') f=-1;\n\twhile(ch>='0'&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res*f;\n}\n\ninline ll readll() {\n\tll res=0,f=1;char ch;\n\twhile(ch=getchar(),ch<'0'||ch>'9') if(ch=='-') f=-1;\n\twhile(ch>='0'&&ch<='9') res=res*10+ch-'0',ch=getchar();\n\treturn res*f;\n}\n\nconst int N=1005,M=35;\n\nll tot;\nint n,m,q,bn,bm;\nint dx[N],dy[N],ux[N],uy[N];\nchar s[N][N];\n\nint deg[N][N],DX,DY,UX,UY,px[4]={0,1,0,-1},py[4]={1,0,-1,0};\nint sum[N][N],id[N][N],w;\n\ninline int calc(int dx,int dy,int ux,int uy) {\n\treturn sum[ux][uy]-sum[ux][dy-1]-sum[dx-1][uy]+sum[dx-1][dy-1];\n}\n\nstruct node {\n\tint x,y;\n\tinline node (int X=0,int Y=0) : x(X),y(Y) {}\n\tinline node operator - (const node &a) const {return node(x-a.x,y-a.y);}\n\tinline double ang() {return atan2(y,x);}\n};\n\ninline ll cross(const node &a,const node &b) {return 1ll*a.x*b.y-a.y*b.x;}\n\nstruct Edge {\n\tnode s,t;int id;\n\tdouble ang;\n\tinline Edge (node S=node(),node T=node(),int I=0) : s(S),t(T),id(I),ang((T-S).ang()) {}\n\tinline bool operator < (const Edge &a) const {return ang<a.ang;}\n}e[N*N*4];\n\nbool vis[N][N][4];\n\nstruct Query {\n\tint a,b,c,d,id;\n\tinline Query(int A=0,int B=0,int C=0,int D=0,int I=0) : a(A),b(B),c(C),d(D),id(I) {}\n}p[N*N],tmp[N*N];\n\ninline bool cmp1(const Query &a,const Query &b) {return a.a!=b.a?a.a>b.a:a.id<b.id;}\n\nint l;\n\nint sze=1,vst[N*N*4],nxt[N*N*4],num[N];\n\ninline void add(node s,node t) {e[++sze]=Edge(s,t),e[sze].id=sze;}\n\ninline int ID(node x) {return id[x.x][x.y];}\n\nvector <Edge> vec[N*N];\n\nstruct BLOCK {\n\tint c1[M][M],c2[M][N],c3[N][M],c4[N][N];\n\tinline void add(int x,int y,int v) {\n\t\tint bx=(x-1)/bn+1,by=(y-1)/bm+1;\n\t\tc1[bx][by]+=v,c2[bx][y]+=v,c3[x][by]+=v,c4[x][y]+=v;\n\t}\n\tinline int sum(int x,int y) {\n\t\tint bx=(x-1)/bn+1,by=(y-1)/bm+1,res=0;\n\t\tfor(int i=1 ; i<bx ; ++i)\n\t\t\tfor(int j=1 ; j<by ; ++j)\n\t\t\t\tres+=c1[i][j];\n\t\tfor(int i=1 ; i<bx ; ++i)\n\t\t\tfor(int j=(by-1)*bm+1 ; j<=y ; ++j)\n\t\t\t\tres+=c2[i][j];\n\t\tfor(int i=(bx-1)*bn+1 ; i<=x ; ++i)\n\t\t\tfor(int j=1 ; j<by ; ++j)\n\t\t\t\tres+=c3[i][j];\n\t\tfor(int i=(bx-1)*bn+1 ; i<=x ; ++i)\n\t\t\tfor(int j=(by-1)*bm+1 ; j<=y ; ++j)\n\t\t\t\tres+=c4[i][j];\n\t\treturn res;\n\t}\n}B;\n\nvoid CDQ(int l,int r) {\n\tif(l==r) return ;\n\tint mid=(l+r)>>1;\n\tCDQ(l,mid),CDQ(mid+1,r);\n\tint i=l,j=mid+1,k=l;\n\twhile(j<=r) {\n\t\twhile(i<=mid&&p[i].b>=p[j].b) {\n\t\t\tif(!p[i].id) B.add(p[i].c,p[i].d,1);\n\t\t\ttmp[k++]=p[i],++i;\n\t\t}\n\t\tif(p[j].id) num[p[j].id]+=B.sum(p[j].c,p[j].d);\n\t\ttmp[k++]=p[j],++j;\n\t}\n\tfor(int w=l ; w<i ; ++w) if(!p[w].id) B.add(p[w].c,p[w].d,-1);\n\twhile(i<=mid) tmp[k++]=p[i],++i;\n\tfor(int k=l ; k<=r ; ++k) p[k]=tmp[k];\n}\n\ninline void solve() {\n\tfor(int x=1 ; x<=n ; ++x)\n\t\tfor(int y=1 ; y<=m ; ++y)\n\t\t\tid[x][y]=++w;\n\tfor(int x=1 ; x<=n ; ++x)\n\t\tfor(int y=1 ; y<=m ; ++y) {\n\t\t\tfor(int i=0 ; i<4 ; ++i) {\n\t\t\t\tint nx=x+px[i],ny=y+py[i];\n\t\t\t\tif(s[x][y]==s[nx][ny]) {\n\t\t\t\t\t++deg[x][y];\n\t\t\t\t\tif(vis[x][y][i]) continue ;\n\t\t\t\t\tvis[x][y][i]=vis[nx][ny][i^2]=1;\n\t\t\t\t\tadd(node(x,y),node(nx,ny)),vec[id[x][y]].push_back(e[sze]);\n\t\t\t\t\tadd(node(nx,ny),node(x,y)),vec[id[nx][ny]].push_back(e[sze]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsum[x][y]=sum[x-1][y]+sum[x][y-1]-sum[x-1][y-1]+deg[x][y];\n\t\t}\n\tfor(int i=1 ; i<=w ; ++i) sort(vec[i].begin(),vec[i].end());\n\tfor(int i=2 ; i<=sze ; ++i) {\n\t\tint Id=ID(e[i].t);\n\t\tvector <Edge>::iterator it=lower_bound(vec[Id].begin(),vec[Id].end(),e[i^1]);\n\t\tif(it==vec[Id].begin()) it=vec[Id].end();\n\t\t--it;\n\t\tnxt[i]=(*it).id;\n\t}\n\tfor(int i=2 ; i<=sze ; ++i) {\n\t\tif(vst[i]) continue ;\n\t\tint mx=e[i].s.x,my=e[i].s.y,nx=mx,ny=my;\n\t\tmx=max(mx,e[i].t.x),my=max(my,e[i].t.y);\n\t\tnx=min(nx,e[i].t.x),ny=min(ny,e[i].t.y);vst[i]=1;\n\t\tll S=cross(e[i].s,e[i].t);\n\t\tfor(int j=nxt[i] ; j!=i ; j=nxt[j]) {\n\t\t\tvst[j]=1;\n\t\t\tif(j==(i^1)) {S=-1;break ;} \n\t\t\tmx=max(mx,e[j].t.x),my=max(my,e[j].t.y);\n\t\t\tnx=min(nx,e[j].t.x),ny=min(ny,e[j].t.y);\n\t\t\tS+=cross(e[j].s,e[j].t);\n\t\t}\n\t\tif(S>0) p[++l]=Query(nx,ny,mx,my,0);\n\t}\n\tfor(int i=1 ; i<=q ; ++i) p[++l]=Query(dx[i],dy[i],ux[i],uy[i],i);\n\tsort(p+1,p+l+1,cmp1);\n\tCDQ(1,l);\n\tfor(int i=1 ; i<=q ; ++i) {\n\t\tDX=dx[i],DY=dy[i],UX=ux[i],UY=uy[i];\n\t\tint tot=calc(DX,DY,UX,UY);\n\t\t/*for(int p=DX ; p<=UX ; ++p) {\n\t\t\tif(s[p][DY]==s[p][DY-1]) --tot;\n\t\t\tif(s[p][UY]==s[p][UY+1]) --tot;\n\t\t}\n\t\tfor(int p=DY ; p<=UY ; ++p) {\n\t\t\tif(s[DX][p]==s[DX-1][p]) --tot;\n\t\t\tif(s[UX][p]==s[UX+1][p]) --tot;\n\t\t}\u8fd9\u4e00\u5806\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u4f18\u5316*/\n\t\tprintf(\"%d\\n\",(UX-DX+1)*(UY-DY+1)-tot/2+num[i]);\n\t}\n}\n\nint main() {\n\tn=read(),m=read(),q=read(),bn=sqrt(n),bm=sqrt(m);\n\tfor(int i=1 ; i<=n ; ++i) scanf(\"%s\",s[i]+1);\n\tfor(int i=1 ; i<=q ; ++i) dx[i]=read(),dy[i]=read(),ux[i]=read(),uy[i]=read(),tot+=(ux[i]-dx[i]+1)*(uy[i]-dy[i]+1);\n\tsolve();\n\treturn 0;\n}\n```",
        "postTime": 1633696149,
        "uid": 79075,
        "name": "mzgwty",
        "ccfLevel": 7,
        "title": "P7295 [USACO21JAN] Paint by Letters P \u9898\u89e3"
    },
    {
        "content": "# Paint by Letters P-\u9898\u89e3\n\n### \u9898\u610f\n\n\u4e00\u4e2a $n\\times m$ \u7684\u77e9\u5f62\u65b9\u9635\uff0c\u6bcf\u4e00\u65b9\u683c\u6709\u4e00\u79cd\u76ee\u6807\u989c\u8272\uff0c\u989c\u8272\u76f8\u540c\u76f8\u90bb\u7684\u65b9\u683c\u53ef\u4ee5\u4e00\u8d77\u88ab\u67d3\u8272\uff0c$q$ \u6b21\u8be2\u95ee\uff0c\u6c42\u51fa\u7ed9\u4e14\u53ea\u7ed9\u67d0\u4e00\u5b50\u77e9\u5f62\u65b9\u9635\u67d3\u8272\u9700\u8981\u67d3\u51e0\u6b21\u3002\n\n### \u524d\u7f6e\u77e5\u8bc6\n\n\u6b27\u62c9\u5e73\u9762\u56fe\u5b9a\u7406\uff1a$K=|V|-|E|+R-1$\uff0c$K$ \u4e3a\u8fde\u901a\u5757\u4e2a\u6570\uff0c$V$ \u4e3a\u70b9\u96c6\uff0c$E$ \u4e3a\u8fb9\u96c6\uff0c$R$ \u4e3a\u533a\u57df\u6570\u3002\n\n### \u5b9e\u73b0\u6b65\u9aa4\n\n\u5c06\u53ef\u4ee5\u4e00\u8d77\u67d3\u7684\u8fde\u8fb9\uff0c\u9898\u76ee\u5c31\u662f\u6c42\u8054\u901a\u5757\u4e2a\u6570 $K$\u3002\n\n\u70b9\u548c\u8fb9\u7684\u6570\u91cf\u5f88\u597d\u6c42\uff0c\u4e8c\u7ef4\u524d\u7f00\u548c\u5c31\u80fd\u529e\u5230\uff0c\u74f6\u9888\u5728\u6c42\u533a\u57df\u6570 $R$\u3002\n\n\u6211\u4eec\u5148 $bfs$ \u627e\u5230\u6574\u4e2a\u56fe\u7684\u72ec\u7acb\u533a\u57df\uff0c\u6807\u8bb0\u597d\u6bcf\u4e00\u4e2a\u7a7a\u683c\u6240\u5728\u7684\u533a\u57df\u7f16\u53f7\uff0c\u7136\u540e\u7ed9\u6bcf\u4e00\u4e2a\u533a\u57df\u4e00\u4e2a\u6807\u8bb0\u70b9\uff08\u5f53\u7136\u5728\u533a\u57df\u5185\uff09\uff0c\u5982\u679c\u73b0\u5728\u7684\u5b50\u56fe\u5305\u542b\u4e86\u8fd9\u4e2a\u6807\u8bb0\u70b9\uff0c\u6211\u4eec\u5c31\u5148\u6682\u65f6\u8ba4\u4e3a\u8fd9\u4e2a\u533a\u57df\u662f\u5b58\u5728\u4e8e\u56fe\u4e2d\u7684\u3002\u5982\u679c\u4e8b\u5b9e\u4e0a\u5b83\u4e0d\u5b58\u5728\uff0c\u90a3\u552f\u4e00\u7684\u60c5\u51b5\u662f\u5b83\u7684\u8fb9\u7f18\u5728\u8fd9\u4e2a\u5b50\u56fe\u4e4b\u5916\uff0c\u5bfc\u81f4\u8fd9\u4e2a\u533a\u57df\u6210\u4e3a\u4e86\u6700\u5916\u5708\u7684\u65e0\u9650\u533a\u57df\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u77e9\u5f62\u7684\u8fb9\u7f18\uff0c\u67e5\u627e\u90e8\u5206\u5728\u8fb9\u7f18\u5185\u800c\u90e8\u5206\u5728\u8fb9\u7f18\u5916\u7684\u533a\u57df\uff0c\u63a5\u7740\u68c0\u9a8c\u8fd9\u4e2a\u533a\u57df\u7684\u6807\u8bb0\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5185\uff0c\u82e5\u662f\uff0c\u5c06\u7b54\u6848\u51cf\u4e00\u5373\u53ef\u3002\n\n\u566b\uff01\u597d\uff01\u6211\u4eec\u8fc7\u4e86\uff01\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define  Int  long long int\n#define  Pub  public\n\nusing std::min;using std::max;\n\nint n,m,q;\nchar p[1005][1005];\nstd::pair<int,int> s[1005][1005][5];\n\nbool vis[1005][1005],siv[2000005];\nint v[1005][1005],e1[1005][1005],e2[1005][1005],r[1005][1005];\nint rid[1005][1005],cnt;\nstd::pair<int,int> t[1000005];\nvoid dfs(int x,int y){\n    if(x<0||x>n||y<0||y>m)return;\n    if(vis[x][y])return;\n    else vis[x][y]=1;\n    if(s[x][y][3]==std::pair<int,int>{0,0})rid[x][y-1]=rid[x][y],dfs(x,y-1);\n    if(s[x][y][4]==std::pair<int,int>{0,0})rid[x-1][y]=rid[x][y],dfs(x-1,y);\n    if(s[x+1][y+1][1]==std::pair<int,int>{0,0})rid[x][y+1]=rid[x][y],dfs(x,y+1);\n    if(s[x+1][y+1][2]==std::pair<int,int>{0,0})rid[x+1][y]=rid[x][y],dfs(x+1,y);\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for(int i=1;i<=n;++i)\n        for(int j=(getchar(),1);j<=m;++j)\n            p[i][j]=getchar();\n    for(int i=1;i<=n;++i){\n        for(int j=1;j<=m;++j){\n            int vvv=1,ee1=0,ee2=0;\n            if(p[i][j]==p[i-1][j])s[i][j][1]={i-1,j},++ee2;\n            if(p[i][j]==p[i][j-1])s[i][j][2]={i,j-1},++ee1;\n            if(p[i][j]==p[i+1][j])s[i][j][3]={i+1,j};\n            if(p[i][j]==p[i][j+1])s[i][j][4]={i,j+1};\n            v[i][j]=v[i-1][j]+v[i][j-1]-v[i-1][j-1]+vvv;\n            e1[i][j]=e1[i-1][j]+e1[i][j-1]-e1[i-1][j-1]+ee1;\n            e2[i][j]=e2[i-1][j]+e2[i][j-1]-e2[i-1][j-1]+ee2;         \n        }\n    }\n    for(int i=0;i<=n;++i){\n        for(int j=0;j<=m;++j){\n            if(i==0&&j==0)r[i][j]=0;\n            else if(i==0||j==0)r[i][j]=1;\n            else r[i][j]+=r[i-1][j]+r[i][j-1]-r[i-1][j-1];\n            if(vis[i][j])continue;\n            else{\n                ++cnt;\n                rid[i][j]=cnt;\n                t[cnt]=std::pair<int,int>{i,j};\n                ++r[i][j];\n                dfs(i,j);\n            }\n        }\n    }\n    \n    while(~--q){\n        memset(siv,0,sizeof(siv));\n        int x_,y_,_x,_y;\n        scanf(\"%d%d%d%d\",&x_,&y_,&_x,&_y);\n        int ans=0;\n        ans+=v[_x][_y]+v[x_-1][y_-1]-v[x_-1][_y]-v[_x][y_-1];\n        ans-=e1[_x][_y]+e1[x_-1][y_]-e1[x_-1][_y]-e1[_x][y_];\n        ans-=e2[_x][_y]+e2[x_][y_-1]-e2[x_][_y]-e2[_x][y_-1];\n        ans+=r[_x-1][_y-1]+r[x_-1][y_-1]-r[x_-1][_y-1]-r[_x-1][y_-1];\n        for(int i=x_;i<_x;++i)\n            if(s[i][y_][3]==std::pair<int,int>{0,0})\n                if(t[rid[i][y_]].first>=x_&&t[rid[i][y_]].first<_x&&t[rid[i][y_]].second>=y_&&t[rid[i][y_]].second<_y&&!siv[rid[i][y_]])\n                    siv[rid[i][y_]]=1,--ans;\n        for(int i=y_;i<_y;++i)\n            if(s[x_][i][4]==std::pair<int,int>{0,0})\n                if(t[rid[x_][i]].first>=x_&&t[rid[x_][i]].first<_x&&t[rid[x_][i]].second>=y_&&t[rid[x_][i]].second<_y&&!siv[rid[x_][i]])\n                    siv[rid[x_][i]]=1,--ans;\n        for(int i=x_;i<_x;++i)\n            if(s[i][_y][3]==std::pair<int,int>{0,0})\n                if(t[rid[i][_y]].first>=x_&&t[rid[i][_y]].first<_x&&t[rid[i][_y]].second>=y_&&t[rid[i][_y]].second<_y&&!siv[rid[i][_y]])\n                    siv[rid[i][_y]]=1,--ans;\n        for(int i=y_;i<_y;++i)\n            if(s[_x][i][4]==std::pair<int,int>{0,0})\n                if(t[rid[_x][i]].first>=x_&&t[rid[_x][i]].first<_x&&t[rid[_x][i]].second>=y_&&t[rid[_x][i]].second<_y&&!siv[rid[_x][i]])\n                    siv[rid[_x][i]]=1,--ans;\n        printf(\"%d\\n\",ans);\n    }\n    \n    return 0;\n}\n```",
        "postTime": 1661522164,
        "uid": 492662,
        "name": "Endt_or_endt",
        "ccfLevel": 5,
        "title": "Paint by Letters P-\u9898\u89e3"
    }
]