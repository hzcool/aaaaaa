[
    {
        "content": "\u4f5c\u4e3aNOIp2012D2T3\uff0c\u8fd9\u9053\u9898\u53ef\u4ee5\u8bf4\u662f\u6bd4\u8f83\u590d\u6742\u4e86\u3002\u601d\u8def\u867d\u7136\u4e0d\u4f1a\u592a\u96be\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u6bd4\u8f83\u590d\u6742\uff0c\u7ec6\u8282\u5f88\u591a\u3002\u867d\u7136\u6bd4\u4e0d\u4e0a\u5f88\u591a\u5de8\u4f6c\u9898\u76ee\uff0c\u4f46\u8eab\u4e3a\u7d2b\u9898\u4e5f\u53ef\u4ee5\u8bf4\u662f\u5f53\u4e4b\u65e0\u6127\u4e86\u3002\u4e0d\u8fc7\u867d\u8bf4\u590d\u6742\uff0c\u7406\u89e3\u4e86\u601d\u8def\u4e4b\u540e\u5b9e\u73b0\u8d77\u6765\u4e5f\u4e0d\u4f1a\u96be\u3002\n\n\u672c\u849f\u84bb\u5b8c\u5168\u770b\u4e0d\u61c2\u9898\u89e3\u4e2d\u5404\u4f4d\u5927\u4f6c\u7684\u4ee3\u7801\uff0c\u4e8e\u662f\u51b3\u5b9a\u5199\u4e00\u7bc7\u9898\u89e3\u3002\u672c\u6587\u7684\u601d\u8def\u548c\u4ee3\u7801\u4f1a\u5c3d\u91cf\u6e05\u6670\uff0c\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u6709\u5e2e\u52a9\u3002\n\n\u672c\u6587\u7684\u601d\u8def\u548c\u5927\u90e8\u5206\u5927\u4f6c\u7684\u601d\u8def\u57fa\u672c\u76f8\u540c\uff0c\u4e3b\u8981\u662f\u4e3a\u5927\u5bb6\u5e26\u6765\u66f4\u5177\u4f53\u7684\u8bb2\u89e3\u548c\u66f4\u6e05\u6670\u7684\u5b9e\u73b0\u3002\n\n------------\n\u5b9e\u73b0\u6d41\u7a0b\uff1a\u6811\u4e0a\u500d\u589e\u9884\u5904\u7406+\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3\n\n\u601d\u8def\uff1a\n\n\u56e0\u4e3a\u82e5\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\u6ee1\u8db3\u9898\u610f\uff0c\u5219\u6240\u6709\u6bd4\u5b83\u5927\u7684\u65f6\u95f4\u9650\u5236\u4e00\u5b9a\u90fd\u6ee1\u8db3\u9898\u610f\uff0c\u56e0\u6b64\u672c\u9898\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u53ef\u4ee5\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u6c42\u89e3\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u91cd\u70b9\u5c31\u662fcheck\u51fd\u6570\u4e86\uff0c\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\u7b26\u4e0d\u7b26\u5408\u6761\u4ef6\u5462\uff1f\u663e\u7136\uff0c\u5bf9\u4e8e\u6240\u6709\u519b\u961f\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u6700\u540e\u505c\u7559\u7684\u8282\u70b9\u6df1\u5ea6\u8d8a\u5c0f\u8d8a\u597d\uff0c\u8fd9\u6837\u53ef\u4ee5\u63a7\u5236\u6700\u591a\u7684\u8def\u5f84\u3002\u56e0\u6b64\u6211\u4eec\u8ba9\u6240\u6709\u7684\u519b\u961f\u5c3d\u91cf\u5730\u5411\u4e0a\u8d70\uff0c\u82e5\u4e00\u4e2a\u519b\u961f\u53ef\u4ee5\u8d70\u5230\u6839\u8282\u70b9\uff0c\u5219\u4ee4\u5176\u6682\u65f6\u505c\u5728\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff1b\u5426\u5219\u8d70\u5230\u65f6\u95f4\u9650\u5236\u5185\u80fd\u591f\u8d70\u5230\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9\u3002\u8fd9\u4e2a\u6b65\u9aa4\u53ef\u4ee5\u7528\u6811\u4e0a\u500d\u589e\u8fdb\u884c\u4f18\u5316\u3002\n\n\u7ecf\u8fc7\u8fd9\u6b65\u5904\u7406\u540e\uff0c\u6211\u4eec\u5148\u627e\u51fa\u6240\u6709\u4ee5\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u662f\u5426\u6709\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u8fd8\u672a\u88ab\u9a7b\u624e\uff0c\u5e76\u8bb0\u5f55\u4e0b\u8fd8\u6709\u8def\u5f84\u672a\u88ab\u9a7b\u624e\u7684\u8fd9\u4e9b\u5b50\u6811\u7684\u6839\u8282\u70b9\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u8282\u70b9\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u82e5\u8be5\u8282\u70b9\u4e0a\u505c\u7559\u6709\u519b\u961f\uff0c\u5219\u5269\u4f59\u65f6\u95f4\u6700\u5c0f\u7684\u519b\u961f\u9a7b\u624e\u5728\u8be5\u8282\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\u8fd9\u6837\u5904\u7406\u8fc7\u8fd9\u4e9b\u8282\u70b9\u540e\uff0c\u628a\u5269\u4e0b\u7684\u8282\u70b9\u6309\u7167\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u73b0\u5728\u53ef\u80fd\u8fd8\u4f1a\u6709\u4e00\u4e9b\u519b\u961f\u672a\u786e\u5b9a\u6700\u540e\u7684\u9a7b\u624e\u8282\u70b9\uff0c\u628a\u8fd9\u4e9b\u519b\u961f\u6309\u7167\u5269\u4f59\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u548c\u4e0a\u4e00\u6b65\u5904\u7406\u51fa\u6765\u7684\u8fd9\u4e9b\u8282\u70b9\u4e00\u4e00\u8fdb\u884c\u5339\u914d\u3002\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u8bc1\u660e\u6b63\u786e\u6027\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\u82e5\u6240\u6709\u672a\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u90fd\u6709\u519b\u961f\u9a7b\u624e\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7684\u65f6\u95f4\u9650\u5236\u53ef\u884c\uff1b\u53cd\u4e4b\u5219\u4e0d\u53ef\u884c\u3002\n\n\u63a5\u4e0b\u6765\u4f1a\u5bf9\u5b9e\u73b0\u6d41\u7a0b\u8fdb\u884c\u5177\u4f53\u5730\u8bb2\u89e3\u3002\n\n------------\n\u5177\u4f53\u5b9e\u73b0\u6d41\u7a0b\uff1a\n\n**1.\u8f93\u5165** \n\n\u8f93\u5165\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5efa\u8bae\u7528\u90bb\u63a5\u8868\u5b58\u56fe\uff0c\u904d\u5386\u65f6\u66f4\u65b9\u4fbf\u3002\u56e0\u4e3a\u8def\u5f84\u662f\u53cc\u5411\u7684\uff0c\u56e0\u6b64\u8981\u53cc\u5411\u5b58\u8fb9\u3002\u5728\u8f93\u5165\u7684\u540c\u65f6\u7edf\u8ba1\u6240\u6709\u8def\u5f84\u7684\u957f\u5ea6\u4e4b\u548c\uff0c\u4ee5\u4f5c\u4e3a\u4e8c\u5206\u7684\u53f3\u8fb9\u754c\u3002\n\n```cpp\nint ver[2*N],edge[2*N],Next[2*N],head[N],query[N];\n\nvoid add(int x,int y,int z)\n{\n\tver[++tot]=y,edge[tot]=z,Next[tot]=head[x],head[x]=tot;\n}//\u90bb\u63a5\u8868\u63d2\u5165\u64cd\u4f5c\n\ncin>>n;\n\nfor(int i=1;i<n;i++)\n{\n\tint x,y,z;\n\tscanf(\"%d%d%d\",&x,&y,&z);\n\tadd(x,y,z),add(y,x,z);\n\tr+=z;//\u7edf\u8ba1\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\n}\n\ncin>>m;\nfor(int i=1;i<=m;i++)\n\tscanf(\"%d\",&query[i]);//\u8f93\u5165\u519b\u961f\n```\n\n\n**2. \u6811\u4e0a\u500d\u589e\u9884\u5904\u7406**\n\n\u8fd9\u4e2a\u6b65\u9aa4\u7684\u5b9e\u73b0\u548c\u6c42LCA\u57fa\u672c\u76f8\u540c\uff0c\u7528\u5230\u4e86\u4e8c\u8fdb\u5236\u62c6\u5206\u7684\u601d\u60f3\u3002\u5173\u4e8e\u6811\u4e0a\u500d\u589e\u6cd5\u6c42LCA\uff0c\u4e0d\u61c2\u7684\u53ef\u4ee5[\u70b9\u51fb\u98df\u7528](https://www.cnblogs.com/TEoS/p/11376616.html)~~\uff08\u867d\u7136\u548c\u8fd9\u9898\u6ca1\u6709\u592a\u5927\u5173\u7cfb\uff09~~\uff0c\u63a5\u4e0b\u6765\u4e5f\u4f1a\u8be6\u7ec6\u8bb2\u89e3\u3002\n\n\u5728\u8fd9\u91cc\u7528$f_{i,j}$\u5b58\u50a8$i$\u8282\u70b9\u7684\u7b2c$2^j$\u4e2a\u7956\u5148\u7684\u8282\u70b9\u7f16\u53f7\uff0c$dist_{i,j}$\u5b58\u50a8$i$\u8282\u70b9\u5230\u5b83\u7684\u7b2c$2^j$\u4e2a\u7956\u5148\u7684\u8def\u5f84\u957f\u5ea6\u3002\u5728\u9884\u5904\u7406\u8fc7\u7a0b\u4e2d\u540c\u65f6\u4e5f\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u7528$d_i$\u8868\u793a\u3002\n\n\u4ee5\u4e0a\u4e09\u4e2a\u6570\u7ec4\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u9012\u63a8\u5f97\u51fa\uff0c\u5bf9\u4e8e$f$\u6570\u7ec4\u548c$dist$\u6570\u7ec4\uff0c\u6709\u4ee5\u4e0b\u9012\u63a8\u5f0f\uff1a\n```cpp\nf[i][j]=f[f[i][j-1]][j-1];\ndist[i][j]=dist[i][j-1]+dist[f[i][j-1]][j-1];\n```\n\u8fd9\u4e2a\u9012\u63a8\u5f0f\u6839\u636e\u6570\u7ec4\u7684\u5b9a\u4e49\u5f88\u5bb9\u6613\u63a8\u51fa\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u601d\u8003\u3002\n\nd\u6570\u7ec4\u7684\u9012\u63a8\u5f0f\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5f85\u4e0b\u9762\u7ed9\u51fa\u5b9e\u73b0\u8fc7\u7a0b\u65f6\u8bfb\u8005\u81ea\u7136\u6e05\u695a\u3002\n\n\u672c\u6587\u8fd9\u4e2a\u6b65\u9aa4\u7528bfs\u5b9e\u73b0\uff0c\u5f53\u7136\u7528dfs\u5b9e\u73b0\u4e5f\u53ef\u4ee5\u3002\n\n\u63a5\u4e0b\u6765\u7ed9\u51fa\u5177\u4f53\u5b9e\u73b0\u8fc7\u7a0b\uff1a\n\n1. \u5efa\u7acb\u4e00\u4e2a\u7a7a\u961f\u5217\uff0c\u5e76\u5c06\u6839\u8282\u70b9\u5165\u961f\uff0c\u540c\u65f6\u5b58\u50a8\u6839\u8282\u70b9\u7684\u6df1\u5ea6\n1. \u53d6\u51fa\u961f\u5934\uff0c\u904d\u5386\u5176\u6240\u6709\u51fa\u8fb9\u3002\u7531\u4e8e\u5b58\u50a8\u7684\u65f6\u5019\u662f\u6309\u7167\u65e0\u5411\u56fe\u5b58\u50a8\uff0c\u56e0\u6b64\u8981\u8fdb\u884c\u6df1\u5ea6\u5224\u5b9a\uff0c\u5bf9\u4e8e\u8fde\u63a5\u5230\u5b83\u7236\u4eb2\u8282\u70b9\u7684\u8fb9\uff0c\u76f4\u63a5continue\u5373\u53ef\u3002\u8bb0\u5f53\u524d\u8def\u5f84\u7684\u53e6\u4e00\u7aef\u8282\u70b9\u4e3a$y$\uff0c\u5904\u7406\u51fa$y$\u7684$d$\u3001$f$\u3001$dist$\u4e09\u4e2a\u6570\u7ec4\u7684\u503c\uff0c\u7136\u540e\u5c06$y$\u5165\u961f\u3002\n1. \u91cd\u590d\u7b2c2\u6b65\uff0c\u76f4\u5230\u961f\u5217\u4e3a\u7a7a\n\n$f$\u6570\u7ec4\u548c$dist$\u6570\u7ec4\u7684\u9012\u63a8\u521d\u503c\u662f\u591a\u5c11\u5462\uff1f\u663e\u7136\uff0c$f_{i,0}$\u8868\u793a\u7684\u5c31\u662f$i$\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u5f97\u51fa$f_{i,0}$\u548c$dist_{i,0}$\u7684\u503c\uff0c\u5176\u4f59\u4e3a0\uff0c\u63a5\u4e0b\u6765\u8fdb\u884c\u9012\u63a8\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\nint d[N],f[N][20];\nll dist[N][20];\n\nqueue<int> q;\n\nt=log2(n)+1;//f\u6570\u7ec4\u548cdist\u6570\u7ec4\u7b2c\u4e8c\u7ef4\u4e0b\u6807\u7684\u6700\u5927\u503c\n\nvoid bfs()\n{\n\tq.push(1);\n\td[1]=1;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=Next[i])//\u904d\u5386x\u7684\u51fa\u8fb9\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(d[y])\n\t\t\t\tcontinue;//\u82e5\u6df1\u5ea6\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\uff0c\u8bf4\u660e\u662f\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\n\t\t\td[y]=d[x]+1;//\u8fd9\u6b65\u4e0d\u7528\u89e3\u91ca\u4e86\u5427\n\t\t\tf[y][0]=x,dist[y][0]=edge[i];//\u9012\u63a8\u521d\u503c\n\t\t\tfor(int j=1;j<=t;j++)\n\t\t\t{\n\t\t\t\tf[y][j]=f[f[y][j-1]][j-1];\n\t\t\t\tdist[y][j]=dist[y][j-1]+dist[f[y][j-1]][j-1];\n\t\t\t}//\u9012\u63a8\n\t\t\tq.push(y);\n\t\t}\n\t}\n}\n```\n\n**3. \u4e8c\u5206\u7b54\u6848**\n\n\u7ecf\u8fc7\u9884\u5904\u7406\u540e\uff0c\u5c31\u5f00\u59cb\u4e8c\u5206\u7b54\u6848\u4e86\u3002\u4e8c\u5206\u65f6\uff0c\u82e5\u5f53\u524d\u7684\u65f6\u95f4\u9650\u5236\u6ee1\u8db3\u9898\u610f\uff0c\u5219\u66f4\u65b0\u7b54\u6848\u3002\u8fd9\u4e2a\u6b65\u9aa4\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002\n\n```cpp\nwhile(l<=r)\n{\n\tmid=(l+r)>>1;\n\tif(check(mid))\n\t{\n\t\tr=mid-1;\n\t\tans=mid;\n\t\tok=1;//\u6709\u89e3\u6807\u8bb0\n\t}\n\telse\n\t\tl=mid+1;\n}\n```\n\n\u4e0b\u9762\u7ed9\u51facheck\u51fd\u6570\u7684\u5b9e\u73b0\n\n**4. \u4e0a\u79fb\u519b\u961f\u5e76\u5b58\u50a8\u95f2\u7f6e\u519b\u961f**\n\n\u4e0e\u6c42LCA\u7c7b\u4f3c\uff0c\u5229\u7528\u6811\u4e0a\u500d\u589e\u5b9e\u73b0\u4e0a\u79fb\u3002\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\u7684\u601d\u60f3\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u4f9d\u6b21\u5c1d\u8bd5\u5411\u4e0a\u8d70$2^{logn},...,2^1,2^0$\u6b65\uff0c\u5e76\u4fdd\u8bc1\u7ec8\u70b9\u5728\u6839\u8282\u70b9\u4e4b\u524d\uff0c\u4e14\u65f6\u95f4\u4e0d\u8d85\u8fc7\u5f53\u524d\u7684\u65f6\u95f4\u9650\u5236\u3002\n\n\u5c06\u519b\u961f\u4e0a\u79fb\u5230\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6216\u8005\u80fd\u591f\u8fbe\u5230\u7684\u6700\u6d45\u8282\u70b9\u540e\uff0c\u82e5\u8be5\u519b\u961f\u8fd8\u80fd\u5411\u4e0a\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u8bf4\u660e\u5b83\u8fd8\u6709\u8f6c\u79fb\u5230\u5176\u5b83\u5b50\u6811\u53bb\u9a7b\u624e\u7684\u53ef\u80fd\uff0c\u56e0\u6b64\u5c06\u5b83\u8bb0\u4e3a\u6682\u65f6\u95f2\u7f6e\uff0c\u7528\u4e00\u4e2a\u4e8c\u5143\u7ec4\u5b58\u50a8\u8d77\u6765\uff1b\u5426\u5219\u5c31\u5c06\u8be5\u519b\u961f\u9a7b\u624e\u5728\u5f53\u524d\u8282\u70b9\uff0c\u5e76\u5c06\u5f53\u524d\u8282\u70b9\u6807\u8bb0\u4e3a\u5df2\u9a7b\u624e\u3002\n\n\u4e8c\u5143\u7ec4\u6392\u5e8f\u65f6\u4f1a\u4ee5\u7b2c\u4e00\u7ef4\u7684\u5927\u5c0f\u6392\u5e8f\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u7b2c\u4e00\u7ef4\u5b58\u50a8\u8be5\u519b\u961f\u5230\u8fbe\u6839\u8282\u70b9\u540e\u5269\u4f59\u7684\u65f6\u95f4\uff0c\u7b2c\u4e8c\u7ef4\u5b58\u50a8\u8be5\u519b\u961f\u5f53\u524d\u6240\u5728\u7684\u8282\u70b9\u7f16\u53f7\u3002\n\n```cpp\nint ctot=0;\npair<ll,int> h[N];\nbool sta[N];\n\n//lim\u8868\u793a\u5f53\u524d\u7684\u65f6\u9650\uff0c\u5373check\u51fd\u6570\u4f20\u5165\u7684\u53c2\u6570\nfor(int i=1;i<=m;i++)\n{\n\tll x=query[i],cnt=0;//cnt\u7edf\u8ba1\u65f6\u95f4\u82b1\u8d39\n\tfor(int j=t;j>=0;j--)//\u4ecelogn\u52300\u679a\u4e3e\n\t\tif(f[x][j]>1 && cnt+dist[x][j]<=lim)//\u82e5\u7ec8\u70b9\u5728\u6839\u8282\u70b9\u4e4b\u524d\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u65f6\u9650\n\t\t{\n\t\t\tcnt+=dist[x][j];\n\t\t\tx=f[x][j];\n\t\t}\n\tif(f[x][0]==1 && cnt+dist[x][0]<=lim)//\u82e5\u5f53\u524d\u8282\u70b9\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e14\u8be5\u519b\u961f\u53ef\u4ee5\u5728\u65f6\u9650\u5185\u5230\u8fbe\u6839\u8282\u70b9\n\t\th[++ctot]=make_pair(lim-cnt-dist[x][0],x);//\u5b58\u50a8\u95f2\u7f6e\u519b\u961f\n\telse\n\t\tsta[x]=1;//\u5df2\u9a7b\u624e\u6807\u8bb0\n}\n```\n\n**5. dfs\u5bfb\u627e\u8def\u5f84\u672a\u88ab\u9a7b\u624e\u7684\u53f6\u5b50\u8282\u70b9**\n\n\u8fd9\u91cc\u7684\u601d\u60f3\u6bd4\u8f83\u7b80\u5355\uff0c\u4ece\u6bcf\u4e2a\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u5f00\u59cb\u641c\u7d22\uff0c\u82e5\u641c\u7d22\u65f6\u9047\u5230\u5df2\u9a7b\u624e\u8282\u70b9\uff0c\u5219\u8fd4\u56de1\uff1b\u82e5\u4e00\u76f4\u641c\u7d22\u5230\u67d0\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u6ca1\u6709\u9047\u5230\u5df2\u9a7b\u624e\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u6839\u8282\u70b9\u7684\u8fd9\u4e2a\u5b50\u8282\u70b9\u9700\u8981\u519b\u961f\u9a7b\u624e\uff0c\u8fd4\u56de0\u3002\n\n\u548c\u4e0a\u9762\u7684bfs\u9884\u5904\u7406\u4e00\u6837\uff0c\u5f53\u9047\u5230\u8fde\u63a5\u7236\u8282\u70b9\u7684\u8fb9\u65f6\uff0ccontinue\u5373\u53ef\u3002\n\ndfs\u67e5\u627e\u7ed3\u675f\u540e\uff0c\u5b58\u50a8\u9700\u8981\u6839\u8282\u70b9\u7684\u9700\u8981\u88ab\u9a7b\u624e\u7684\u5b50\u8282\u70b9\u3002\n\n```cpp\nbool need[N];\n\nbool dfs(int x)\n{\n\tbool pson=0;//\u5224\u65ad\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\n\tif(sta[x])\n\t\treturn 1;//\u82e5\u5f53\u524d\u8282\u70b9\u5df2\u88ab\u9a7b\u624e\uff0c\u5219\u8fd4\u56de1\n\tfor(int i=head[x];i;i=Next[i])//\u904d\u5386x\u7684\u51fa\u8fb9\n\t{\n\t\tint y=ver[i];\n\t\tif(d[y]<d[x])\n\t\t\tcontinue;//\u9047\u5230\u7236\u8282\u70b9\n\t\tpson=1;//\u82e5\u6709\u4e00\u6761\u4e0d\u662f\u8fde\u63a5\u7740\u7236\u8282\u70b9\u7684\u8fb9\uff0c\u8bf4\u660e\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\n\t\tif(!dfs(y))//\u82e5\u67d0\u4e2a\u5b50\u8282\u70b9\u641c\u7d22\u65f6\u9047\u5230\u8def\u5f84\u672a\u88ab\u9a7b\u624e\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de0\n\t\t\treturn 0;\n\t}\n\tif(!pson)//\u5f53\u524d\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\u4e14\u672a\u88ab\u9a7b\u624e\n\t\treturn 0;\n\treturn 1;//\u6ca1\u6709\u9047\u5230\u8def\u5f84\u672a\u88ab\u9a7b\u624e\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u8fd4\u56de1\n}\n\nfor(int i=head[1];i;i=Next[i])//\u904d\u5386\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\n\tif(!dfs(ver[i]))//\u82e5\u9700\u8981\u88ab\u9a7b\u624e\n\t\tneed[ver[i]]=1;\n```\n\n**6. \u5bf9\u6839\u8282\u70b9\u7684\u9700\u8981\u88ab\u9a7b\u624e\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u521d\u6b65\u5904\u7406**\n\n\u5728\u8bb2\u89e3\u8fd9\u4e2a\u6b65\u9aa4\u4e4b\u524d\u5148\u8bf4\u660e\u4e00\u4e2a\u5f15\u7406\uff1a\u5bf9\u4e8e\u7b2c5\u6b65\u4e2d\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\uff0c\u82e5\u8be5\u8282\u70b9\u4e0a\u6709\u519b\u961f\u505c\u7559\uff0c\u5219\u5bf9\u4e8e\u8fd9\u4e9b\u519b\u961f\u4e2d\u5269\u4f59\u65f6\u95f4\u6700\u5c0f\u7684\u519b\u961f\uff0c\u82e5\u8be5\u519b\u961f\u7684\u5269\u4f59\u65f6\u95f4\u4e0d\u8db3\u591f\u4ee4\u5b83\u4ece\u6839\u8282\u70b9\u518d\u8fd4\u56de\u73b0\u5728\u505c\u7559\u7684\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u9a7b\u624e\u5728\u8be5\u8282\u70b9\u662f\u6700\u4f18\u7684\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u8be5\u519b\u961f\u65e0\u6cd5\u4ece\u5f53\u524d\u7684\u8282\u70b9\u5230\u8fbe\u6839\u8282\u70b9\u518d\u8fd4\u56de\uff0c\u8bf4\u660e\u82e5\u5b83\u9a7b\u624e\u5728\u6839\u8282\u70b9\u7684\u5176\u5b83\u5b50\u6811\uff0c\u53ea\u80fd\u9a7b\u624e\u5728\u4e00\u4e2a\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u7684\u8282\u70b9\u3002\u800c\u8fd9\u4e2a\u8282\u70b9\u6240\u6709\u5269\u4f59\u65f6\u95f4\u6bd4\u5b83\u591a\u7684\u519b\u961f\u4e00\u5b9a\u4e5f\u53ef\u4ee5\u53bb\u9a7b\u624e\uff0c\u751a\u81f3\u8fd8\u53ef\u80fd\u9a7b\u624e\u5230\u5176\u5b83\u66f4\u591a\u7684\u8282\u70b9\u3002\u56e0\u6b64\u4e0d\u5982\u8ba9\u5269\u4f59\u65f6\u95f4\u591a\u7684\u8282\u70b9\u53bb\u9a7b\u624e\uff0c\u800c\u81ea\u5df1\u7559\u5728\u5f53\u524d\u8282\u70b9\u5373\u53ef\u3002\n\n\u8eab\u4e3a\u4e00\u4e2a\u849f\u84bb\uff0c\u4e5f\u6ca1\u529e\u6cd5\u7ed9\u51fa\u591a\u4e48\u4e25\u5bc6\u7684\u89e3\u91ca\uff0c\u4e0d\u8fc7\u603b\u4e4b\uff0c\u4e0a\u9762\u7ed9\u51fa\u7684\u5f15\u7406\u53ef\u4ee5\u8bc1\u660e\u662f\u6210\u7acb\u7684\u3002\u56e0\u6b64\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\uff0c\u82e5\u5b83\u4e0a\u9762\u505c\u7559\u7740\u4e00\u652f\u519b\u961f\u4e0d\u80fd\u5230\u8fbe\u6839\u8282\u70b9\u5e76\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u5219\u4ee4\u5176\u9a7b\u624e\u5728\u8be5\u8282\u70b9\uff1b\u53e6\u5916\u7684\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u4e00\u652f\u519b\u961f\u9a7b\u624e\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9\u5269\u4f59\u65f6\u95f4\u6700\u5c0f\u7684\u8282\u70b9\u3002\u6240\u4ee5\u5728\u5904\u7406\u524d\u8981\u5148\u5c06$h$\u6570\u7ec4\u6309\u7167\u5269\u4f59\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u5bf9\u4e8e\u5904\u7406\u8fc7\u540e\u4ecd\u95f2\u7f6e\u7684\u519b\u961f\uff0c\u5c06\u5b83\u4eec\u7684\u5269\u4f59\u65f6\u95f4\u5b58\u50a8\u8d77\u6765\u5907\u7528\u3002\u56e0\u4e3a\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u4e0d\u5173\u5fc3\u5b83\u5f53\u524d\u505c\u7559\u5728\u54ea\u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u53ea\u8981\u5b58\u50a8\u5269\u4f59\u65f6\u95f4\u5c31\u597d\u3002\n\n```cpp\nint atot=0;\nll tim[N];\n\nsort(h+1,h+ctot+1);//\u6392\u5e8f\uff0c\u4e8c\u5143\u7ec4\u6309\u7167\u7b2c\u4e00\u7ef4\u5927\u5c0f\u6392\u5e8f\nfor(int i=1;i<=ctot;i++)//\u904d\u5386\u6240\u6709\u95f2\u7f6e\u7684\u519b\u961f\n\tif(need[h[i].second] && h[i].first<dist[h[i].second][0])//\u82e5\u8be5\u519b\u961f\u6240\u5904\u7684\u8282\u70b9\u9700\u8981\u88ab\u9a7b\u624e\u4e14\u8be5\u519b\u961f\u65e0\u6cd5\u5230\u8fbe\u6839\u8282\u70b9\u5e76\u8fd4\u56de\n\t\tneed[h[i].second]=0;//\u53bb\u9664\u6807\u8bb0\n\telse\n\t\ttim[++atot]=h[i].first;//\u5b58\u50a8\u519b\u961f\u7684\u5269\u4f59\u65f6\u95f4\n```\n\n**7. \u627e\u5230\u4ecd\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u5e76\u5b58\u50a8**\n\n\u7ecf\u8fc7\u7b2c6\u6b65\u7684\u521d\u6b65\u5904\u7406\uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u8282\u70b9\u9700\u8981\u88ab\u9a7b\u624e\uff0c\u6b64\u65f6\u904d\u5386\u4e00\u904d\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u627e\u5230\u8fd9\u4e9b\u8282\u70b9\u5e76\u5b58\u50a8\u8d77\u6765\u5907\u7528\u3002\u4e0e\u7b2c6\u6b65\u76f8\u540c\uff0c\u8fd9\u91cc\u53ea\u8981\u5b58\u50a8\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u5fc5\u5b58\u50a8\u8282\u70b9\u7f16\u53f7\u3002\n\n```cpp\nint btot=0;\nll ned[N];\n\nfor(int i=head[1];i;i=Next[i])\n\tif(need[ver[i]])//\u5982\u679c\u4ecd\u9700\u8981\u88ab\u9a7b\u624e\n\t\tned[++btot]=dist[ver[i]][0];\n```\n\n**8. \u5229\u7528\u8d2a\u5fc3\u7b56\u7565\u5b8c\u6210\u6700\u540e\u7684\u5339\u914d**\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\uff1a\u5bf9\u4e8e\u73b0\u5728\u95f2\u7f6e\u7684\u519b\u961f\u548c\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\uff0c\u8ba9\u5269\u4f59\u65f6\u95f4\u5c0f\u7684\u519b\u961f\u4f18\u5148\u9a7b\u624e\u5728\u8ddd\u79bb\u6839\u8282\u70b9\u8fd1\u7684\u8282\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u51b3\u7b56\u6700\u4f18\u3002\u5339\u914d\u8fc7\u540e\uff0c\u82e5\u6240\u6709\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u90fd\u5df2\u6709\u519b\u961f\u9a7b\u624e\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u7684\u65f6\u9650\u53ef\u884c\uff1b\u53cd\u4e4b\u5219\u4e0d\u53ef\u884c\u3002\n\n```cpp\nif(atot<btot)\n\treturn 0;//\u5982\u679c\u5269\u4f59\u7684\u519b\u961f\u6bd4\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u8fd8\u5c11\uff0c\u663e\u7136\u4e0d\u53ef\u884c\uff0c\u76f4\u63a5\u8fd4\u56de0\nsort(tim+1,tim+atot+1),sort(ned+1,ned+btot+1);//\u5206\u522b\u5bf9\u519b\u961f\u7684\u5269\u4f59\u65f6\u95f4\u548c\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\nint i=1,j=1;//\u6307\u9488\nwhile(i<=btot && j<=atot)\t//\u626b\u63cf\u6574\u4e2atim\u548cned\u6570\u7ec4\t\n\tif(tim[j]>=ned[i])//\u82e5\u53ef\u884c\n\t{\n\t\ti++,j++;//\u90fd\u626b\u63cf\u5230\u4e0b\u4e00\u4f4d\n\t}\n\telse\n\t\tj++;//\u5426\u5219\u626b\u63cf\u4e0b\u4e00\u652f\u519b\u961f\nif(i>btot)//\u8bf4\u660e\u6240\u6709\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u90fd\u5df2\u88ab\u9a7b\u624e\n\treturn 1;\nreturn 0;\n```\n\u81f3\u6b64\uff0ccheck\u51fd\u6570\u5c31~~\u6109\u5feb\u5730~~\u7ed3\u675f\u4e86\u3002\n\n**9. \u7279\u5224\u5e76\u8f93\u51fa**\n\n\u9898\u76ee\u4e2d\u8981\u6c42\u5bf9\u65e0\u89e3\u7684\u60c5\u51b5\u8fdb\u884c\u7279\u5224\uff0c\u82e5\u4e8c\u5206\u65f6\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u65f6\u9650\u6ee1\u8db3\u6761\u4ef6\uff0c\u81ea\u7136\u5c31\u8bf4\u660e\u65e0\u89e3\u3002\u5426\u5219\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002~~\u867d\u7136\u5e76\u6ca1\u6709\u65e0\u89e3\u7684\u6570\u636e~~\n\n```cpp\nif(!ok)\n\tcout<<-1;\nelse\n\tcout<<ans;\n```\n\u5b8c\u7ed3\u6492\u82b1\uff01\n\n\u6574\u9053\u9898\u76ee\u4e3b\u8981\u8fd8\u662f\u7ec6\u8282\u591a\uff0c\u5728\u5199\u8fd9\u7c7b\u8f83\u4e3a\u590d\u6742\u7684\u9898\u76ee\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u7ec6\u8282\uff0c\u9632\u6b62\u4f1a\u5199\u7684\u9898\u7206\u96f6\u3002\n\n\n------------\n\u5982\u679c\u4ee5\u4e0a\u8bb2\u89e3\u6ca1\u6709\u542c\u61c2\uff0c\u53ef\u4ee5\u501f\u52a9\u4e0b\u9762\u8fd9\u7ec4\u6570\u636e\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\uff1a\n\n```\n10 5\n2 1 3\n2 3 4\n1 4 7\n5 1 9\n6 1 2\n4 7 9\n7 8 8\n9 8 8\n1 10 2\n2 8 5 4 2 \n```\n\u8fd9\u7ec4\u6570\u636e\u6784\u9020\u51fa\u6765\u5c31\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/58652.png)\n\n\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u4e8c\u5206\u5230\u7684\u65f6\u95f4\u9650\u5236\u4e3a9\uff0c\u6a21\u62df\u4e0a\u9762\u7684\u6b65\u9aa4\u8fdb\u884c\u4e00\u904d\u3002\n\n1. \u4e0a\u79fb\u519b\u961f\uff1a\u53ea\u6709\u5904\u4e8e\u8282\u70b98\u7684\u519b\u961f\u4e0a\u79fb\u5230\u4e86\u8282\u70b97\uff0c\u5176\u4f59\u8282\u70b9\u7531\u4e8e\u90fd\u5728\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e0a\uff0c\u4e0d\u52a8\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/58653.png)\n\n\n2. \u627e\u51fa\u95f2\u7f6e\u519b\u961f\u4e0e\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u3002\u663e\u7136\uff0c\u95f2\u7f6e\u519b\u961f\u4e3a\u76ee\u524d\u5904\u4e8e4\u30012\u30015\u8282\u70b9\u4e0a\u76844\u652f\u519b\u961f\uff0c\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u4e3a10\u30012\u30015\u30016\u8282\u70b9\u3002\n1. \u521d\u6b65\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u3002\u7531\u4e8e5\u53f7\u8282\u70b9\u4e0a\u7684\u519b\u961f\u65e0\u6cd5\u5230\u8fbe\u6839\u8282\u70b9\u518d\u8fd4\u56de\uff0c\u4e14\u8be5\u8282\u70b9\u9700\u8981\u88ab\u9a7b\u624e\uff0c\u56e0\u6b64\u8be5\u519b\u961f\u9a7b\u624e\u5728\u4e94\u53f7\u8282\u70b9\uff1b\u540c\u7406\uff0c7\u53f7\u8282\u70b9\u4e0a\u7684\u519b\u961f\u9a7b\u624e\u5728\u4e03\u53f7\u8282\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/58654.png)\n\n4. \u627e\u51fa\u76ee\u524d\u7684\u95f2\u7f6e\u519b\u961f\u548c\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u3002\u5269\u4f59\u7684\u95f2\u7f6e\u519b\u961f\u4e3a\u76ee\u524d\u5904\u4e8e4\u30012\u8282\u70b9\u4e0a\u76843\u652f\u519b\u961f\uff0c\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u4e3a2\u30016\u300110\u53f7\u8282\u70b9\u3002\n\n1. \u5229\u7528\u8d2a\u5fc3\u7b56\u7565\u8fdb\u884c\u6700\u540e\u7684\u5339\u914d\u3002\u6700\u540e\uff0c4\u53f7\u8282\u70b9\u4e0a\u7684\u519b\u961f\u9a7b\u624e\u52306\u53f7\u8282\u70b9\uff0c2\u53f7\u8282\u70b9\u4e0a\u7684\u4e24\u652f\u519b\u961f\u5206\u522b\u9a7b\u624e\u52302\u300110\u53f7\u8282\u70b9\u3002\u8be5\u65b9\u6848\u662f\u53ef\u884c\u7684\u3002\n\n![](https://cdn.luogu.com.cn/upload/pic/58655.png)\n\n------------\n\n\u6700\u540e\u7ed9\u51fa\u5b8c\u6574\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nconst int N=6e4;\nint n,m,t,tot=0,atot=0,btot=0,ctot=0;\nint d[N],query[N],f[N][20];\nint ver[2*N],edge[2*N],Next[2*N],head[N];\nbool ok,sta[N],need[N];\nll ans,tim[N],ned[N],dist[N][20];\npair<ll,int> h[N];\nqueue<int> q;\nvoid add(int x,int y,int z)\n{\n\tver[++tot]=y,edge[tot]=z,Next[tot]=head[x],head[x]=tot;\n}//1\u3001\u8f93\u5165\nvoid bfs()\n{\n\tq.push(1);\n\td[1]=1;\n\twhile(q.size())\n\t{\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=Next[i])\n\t\t{\n\t\t\tint y=ver[i];\n\t\t\tif(d[y])\n\t\t\t\tcontinue;\n\t\t\td[y]=d[x]+1;\n\t\t\tf[y][0]=x,dist[y][0]=edge[i];\n\t\t\tfor(int j=1;j<=t;j++)\n\t\t\t{\n\t\t\t\tf[y][j]=f[f[y][j-1]][j-1];\n\t\t\t\tdist[y][j]=dist[y][j-1]+dist[f[y][j-1]][j-1];\n\t\t\t}\n\t\t\tq.push(y);\n\t\t}\n\t}\n}//2\u3001\u6811\u4e0a\u500d\u589e\u9884\u5904\u7406\nbool dfs(int x)\n{\n\tbool pson=0;\n\tif(sta[x])\n\t\treturn 1;\n\tfor(int i=head[x];i;i=Next[i])\n\t{\n\t\tint y=ver[i];\n\t\tif(d[y]<d[x])\n\t\t\tcontinue;\n\t\tpson=1;\n\t\tif(!dfs(y))\n\t\t\treturn 0;\n\t}\n\tif(!pson)\n\t\treturn 0;\n\treturn 1;\n}//5\u3001dfs\u5bfb\u627e\u8def\u5f84\u672a\u88ab\u9a7b\u624e\u7684\u53f6\u5b50\u8282\u70b9\nbool check(ll lim)\n{\n\tmemset(sta,0,sizeof(sta));\n\tmemset(tim,0,sizeof(tim));\n\tmemset(ned,0,sizeof(ned));\n\tmemset(h,0,sizeof(h));\n\tmemset(need,0,sizeof(need));\n\tatot=0,btot=0,ctot=0;//\u521d\u59cb\u5316\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tll x=query[i],cnt=0;\n\t\tfor(int j=t;j>=0;j--)\n\t\t\tif(f[x][j]>1 && cnt+dist[x][j]<=lim)\n\t\t\t{\n\t\t\t\tcnt+=dist[x][j];\n\t\t\t\tx=f[x][j];\n\t\t\t}\n\t\tif(f[x][0]==1 && cnt+dist[x][0]<=lim)\n\t\t\th[++ctot]=make_pair(lim-cnt-dist[x][0],x);\n\t\telse\n\t\t\tsta[x]=1;\n\t}//4\u3001\u4e0a\u79fb\u519b\u961f\u5e76\u5904\u7406\u95f2\u7f6e\u519b\u961f\n\tfor(int i=head[1];i;i=Next[i])\n\t\tif(!dfs(ver[i]))\n\t\t\tneed[ver[i]]=1;//5\u3001dfs\u5bfb\u627e\u8def\u5f84\u672a\u88ab\u9a7b\u624e\u7684\u53f6\u5b50\u8282\u70b9\n\tsort(h+1,h+ctot+1);\n\tfor(int i=1;i<=ctot;i++)\n\t\tif(need[h[i].second] && h[i].first<dist[h[i].second][0])\n\t\t\tneed[h[i].second]=0;\n\t\telse\n\t\t\ttim[++atot]=h[i].first;//6\u3001\u5bf9\u6839\u8282\u70b9\u7684\u9700\u8981\u88ab\u9a7b\u624e\u7684\u5b50\u8282\u70b9\u8fdb\u884c\u521d\u6b65\u5904\u7406\n\tfor(int i=head[1];i;i=Next[i])\n\t\tif(need[ver[i]])\n\t\t\tned[++btot]=dist[ver[i]][0];//7\u3001\u627e\u5230\u4ecd\u9700\u8981\u88ab\u9a7b\u624e\u7684\u8282\u70b9\u5e76\u5b58\u50a8\n\tif(atot<btot)\n\t\treturn 0;\n\tsort(tim+1,tim+atot+1),sort(ned+1,ned+btot+1);\n\tint i=1,j=1;\n\twhile(i<=btot && j<=atot)\n\t\tif(tim[j]>=ned[i])\n\t\t{\n\t\t\ti++,j++;\n\t\t}\n\t\telse\n\t\t\tj++;\n\tif(i>btot)\n\t\treturn 1;\n\treturn 0;//8\u3001\u5229\u7528\u8d2a\u5fc3\u7b56\u7565\u5b8c\u6210\u6700\u540e\u7684\u5339\u914d\n}\nint main()\n{\n\tll l=0,r=0,mid;\n\tcin>>n;\n\tt=log2(n)+1;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\tadd(x,y,z),add(y,x,z);\n\t\tr+=z;\n\t}//1\u3001\u8f93\u5165\n\tbfs();//2\u3001\u6811\u4e0a\u500d\u589e\u9884\u5904\u7406\n\tcin>>m;\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d\",&query[i]);\n\twhile(l<=r)\n\t{\n\t\tmid=(l+r)>>1;\n\t\tif(check(mid))\n\t\t{\n\t\t\tr=mid-1;\n\t\t\tans=mid;\n\t\t\tok=1;\n\t\t}\n\t\telse\n\t\t\tl=mid+1;//1\u3001\u8f93\u5165\n\t}//3\u3001\u4e8c\u5206\u7b54\u6848\n\tif(!ok)\n\t\tcout<<-1;\n\telse\n\t\tcout<<ans;//9\u3001\u7279\u5224\u5e76\u8f93\u51fa\n\treturn 0;\n}\n```\n\u8be5\u89e3\u91ca\u7684\u90fd\u89e3\u91ca\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u5b8c\u6574\u4ee3\u7801\u91cc\u5c31\u4e0d\u518d\u5177\u4f53\u89e3\u91ca\u4e86\u3002\n\n------------\n\u5e0c\u671b\u80fd\u5bf9\u5927\u5bb6\u6709\u6240\u5e2e\u52a9\uff0c\u6709\u4e0d\u8db3\u4e4b\u5904\u8bf7\u6307\u51fa",
        "postTime": 1557322685,
        "uid": 91534,
        "name": "TEoS",
        "ccfLevel": 6,
        "title": "P1084 \u75ab\u60c5\u63a7\u5236"
    },
    {
        "content": "# \u9898\u76ee\u5206\u6790\n\n[\u5b89\u5229\u4e2a\u4eba\u535a\u5ba2](http://blog.csdn.net/litble/article/details/78219618)\n\n\u6211\u4eec\u8981\u660e\u786e\u6211\u4eec\u505a\u4ec0\u4e48\uff0c\u4e00\u6b65\u4e00\u6b65\u6162\u6162\u6765\uff0c\u5426\u5219\u4f1a\u88ab\u8fd9\u9898\u903c\u75af\u3002\n\n## 1.\u9884\u5904\u7406\u500d\u589e\n\n\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u79bb\u6839\u8282\u70b9\u8d8a\u8fd1\u7684\u8282\u70b9\uff0c\u63a7\u5236\u7684\u8282\u70b9\u66f4\u591a\u3002\u6240\u4ee5\u7531\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6240\u6709\u7684\u519b\u961f\u90fd\u8981\u5c3d\u53ef\u80fd\u5730\u5f80\u6839\u8282\u70b9\u8d70\u3002\n\n\n> \u201d\u5f80\u4e0a\u63d0\u201c\u7c7b\u578b\u95ee\u9898\u4e00\u822c\u4f7f\u7528\u500d\u589e\u4f18\u5316\u3002\u2014\u2014xzy\u795e\u7287\n\n[xzy\u7684\u535a\u5ba2](http://www.k-xzy.xyz)\n\n\u597d\u5927\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5dfs\u4e00\u904d\uff0c\u5c06\u500d\u589e\u8981\u7528\u7684\u4e00\u4e9b\u503c\u90fd\u5904\u7406\u597d\uff08\u89c1\u4ee3\u7801\uff09\n\n\n## 2.\u4e8c\u5206\u7b54\u6848\n\n\u519b\u961f\u53ef\u4ee5\u540c\u65f6\u79fb\u52a8\uff0c\u8bf4\u660e\u6211\u4eec\u8981\u63a7\u5236\u4f20\u67d3\u75c5\u7684\u65f6\u95f4\u662f\u519b\u961f\u79fb\u52a8\u5230\u4f4d\u65f6\uff0c\u79fb\u52a8\u65f6\u95f4\u6700\u957f\u7684\u519b\u961f\u7684\u79fb\u52a8\u65f6\u95f4\u3002\u800c\u6211\u4eec\u8981\u6c42\u6700\u5c0f\u503c\uff0c\u5373\u8981\u6c42\u6700\u5927\u5316\u6700\u5c0f\u503c\u3002\n\n\n> \u4e8c\u5206\u7b54\u6848\u4e00\u822c\u7528\u4e8e\u6c42\u6700\u5927\u5316\u6700\u5c0f\u503c\uff0c\u6700\u5c0f\u5316\u6700\u5927\u503c\u3002\u2014\u2014jyf\u795e\u7287\n\n[jyf\u7684\u535a\u5ba2](http://www.cnblogs.com/1-1-1-1/)\n\n\u6240\u4ee5\u5c31\u662f\u4e8c\u5206\u5566\uff0c\u4e8c\u5206\u4e00\u4e2a\u7b54\u6848\uff0c\u4e8b\u60c5\u5c31\u4f1a\u66f4\u6709\u65b9\u5411\u3002\n\n## 3.\u201d\u4e0a\u63d0\u201c\u519b\u961f\n\n\u4f7f\u7528\u500d\u589e\u7684\u65b9\u6cd5\u5c06\u519b\u961f\u5728\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u9650\u5236\u5185\u5c3d\u529b\u5f80\u4e0a\u201d\u63d0\u201c\uff0c\u4e0d\u8fc7\u4e0d\u53ef\u4ee5\u5230\u6839\u8282\u70b9\u3002\n\n## 4.\u5904\u7406\u5269\u4f59\u8def\u7a0b\n\n\u5982\u679c\u5f53\u524d\u519b\u961f\u53ef\u4ee5\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u8bb0\u5f55\u4e00\u4e0b\u5b83\u7684\u7f16\u53f7\u548c\u5b83\u5230\u8fbe\u6839\u8282\u70b9\u540e\u8fd8\u53ef\u4ee5\u8d70\u7684\u65f6\u95f4rest\u3002\u5982\u679c\u8fd9\u4e2a\u519b\u961fi\u5728\u6839\u8282\u70b9\u7684\u5b50\u6811x\u4e2d\uff0c\u90a3\u4e48\u8bb0\u5f55\u4e00\u4e0b\u5b50\u6811x\u7684\u7b26\u5408\u8fd9\u4e2a\u6761\u4ef6\u7684\u70b9\u4e2d\uff0c\u5230\u6839\u8282\u70b9\u540e\u5269\u4f59\u8def\u7a0b\u6700\u77ed\u7684\u70b9\u3002\n\n\u5982\u679c\u4e0d\u53ef\u4ee5\u5230\u8fbe\uff0c\u8bb0\u5f55\u5b83\u88ab\u201d\u63d0\u201c\u5230\u7684\u8282\u70b9\u88ab\u519b\u961f\u8bbe\u7f6e\u4e86\u68c0\u67e5\u70b9\u3002\n\n## 5.dfs\u627e\u672a\u88ab\u201d\u5c01\u6b7b\u201c\u7684\u5b50\u6811\n\n\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5efa\u7acb\u4e86\u68c0\u67e5\u70b9\u6216\u8005\u5b83\u7684\u6240\u6709\u5b50\u6811\u90fd\u8bbe\u7acb\u4e86\u68c0\u67e5\u70b9\uff0c\u5219\u8bf4\u660e\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5df2\u7ecf\u88ab\u201c\u5c01\u6b7b\u201d\u3002\u8bb0\u5f55\u6839\u8282\u70b9\u7684\u6240\u6709\u5b50\u6811\u4e2d\uff0c\u672a\u88ab\u201c\u5c01\u6b7b\u201d\u7684\u5b50\u6811\u3002\n\n## 6.\u519b\u961f\u5728\u5b50\u6811\u95f4\u8f6c\u79fb\n\n\u5c06\u6211\u4eec\u5df2\u7ecf\u8bb0\u5f55\u597d\u4e86\u7684**\u53ef\u4ee5\u5230\u6839\u8282\u70b9\u7684\u519b\u961f**\u6309\u7167**\u5269\u4f59\u8def\u7a0b\u4ece\u5927\u5230\u5c0f**\u6392\u5e8f\u3002\n\n\u5c06**\u672a\u88ab\u201c\u5c01\u6b7b\u201d\u7684\u5b50\u6811**\u6309\u7167**\u5230\u5b50\u6811\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u4ece\u5927\u5230\u5c0f**\u6392\u5e8f\u3002\n\n\u7136\u540e\u4f9d\u6b21\u5904\u7406**\u672a\u88ab\u201c\u5c01\u6b7b\u201d\u7684\u5b50\u6811**\u8981\u7531\u54ea\u652f\u519b\u961f\u6765\u7ba1\u8f96\u3002\n\n\u5f53\u7136\u79bb\u6839\u8282\u70b9\u8fdc\u7684\u519b\u961f\u7531\u5269\u4f59\u8def\u7a0b\u5927\u7684\u519b\u961f\u6765\u7ba1\u8f96\u662f\u543c\u6ef4\u5566\uff0c\u4e0d\u8fc7\u7f00\u543c\u6ef4\u8fd8\u662f\u5c31\u7531\u672c\u6765\u5c31\u5728\u8fd9\u68f5\u5b50\u6811\u4e0a\u7684\u519b\u961f\u6765\u7ba1\u8f96\u3002\u6240\u4ee5\u6211\u4eec\u5148\u67e5\u770b\u6211\u4eec\u4e8b\u5148\u8bb0\u5f55\u7684(**\u5728\u5b50\u6811x\u4e2d\uff0c\u53ef\u4ee5\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u4e14\u5230\u6839\u8282\u70b9\u540e\u5269\u4f59\u8def\u7a0b\u6700\u5c0f\u7684\u519b\u961f**)\u662f\u5426\u88ab\u4f7f\u7528\uff0c\u5982\u679c\u88ab\u4f7f\u7528\uff0c\u518d\u770b\u5f53\u524d\u6ca1\u6709\u88ab\u4f7f\u7528\u7684\u519b\u961f\u91cc\u5269\u4f59\u8def\u7a0b\u6700\u5927\u7684\u53ef\u5426\u5230\u8fbe\u8fd9\u68f5\u5b50\u6811\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5224\u65ad\u5f53\u524d\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u662f\u5426\u53ef\u884c\u4e86\u3002\n\n# \u4ee3\u7801\n\n\u7531\u4e8e\u6211\u6253\u5b8c\u8fd9\u9898\u5df2\u7ecf\u5fc3\u529b\u6194\u60b4\uff0c\u6240\u4ee5\u6ca1\u65f6\u95f4\u8be6\u89e3\u4ee3\u7801\u4e86.....\u4ee5\u4e0a6\u6b65\u5df2\u5728\u4ee3\u7801\u91cc\u5b9a\u4f4d\n\n\u6211\u4e0a\u6b21\u5199\u7684\u9898\u89e3\u5fd8\u8bb0\u65e0\u89e3\u8981\u8f93\u51fa-1\u4e86QAQ\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\nusing namespace std;\n#define LL long long\nint read(){\n    int q=0;char ch=' ';\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9')q=q*10+ch-'0',ch=getchar();\n    return q;\n}\nconst int N=50005;\nint n,m,tot,na,nb;\nint h[N],ne[N<<1],to[N<<1];LL w[N<<1];\nint f[N][18],army[N];LL dis[N][18];\nvoid add(int x,int y,int z)\n{to[++tot]=y,ne[tot]=h[x],h[x]=tot,w[tot]=z;}\nvoid dfs(int x,int las,LL havego){//1.\u9884\u5904\u7406\u500d\u589e\n    f[x][0]=las,dis[x][0]=havego;\n    for(int i=1;i<=17;++i){\n        f[x][i]=f[f[x][i-1]][i-1];\n        dis[x][i]=dis[x][i-1]+dis[f[x][i-1]][i-1];\n    }\n    for(int i=h[x];i!=-1;i=ne[i])\n        if(to[i]!=las)dfs(to[i],x,w[i]);\n}\nstruct node{LL rest;int id;}a[N],b[N];\nint vis[N],used[N],restbj[N];LL restmin[N];\nint checkok(int x,int las){//5.dfs\u627e\u672a\u88ab\u201c\u5c01\u6b7b\u201d\u7684\u5b50\u6811\n    int bj=1,i,bbj=0;\n    if(vis[x])return 1;\n    for(i=h[x];i!=-1;i=ne[i]){\n        if(to[i]==las)continue;bbj=1;\n        if(!checkok(to[i],x)){\n            bj=0;\n            if(x==1) b[++nb].id=to[i],b[nb].rest=w[i];\n            else return 0;\n        }\n    }\n    if(!bbj)return 0;\n    return bj;\n}\nbool cmp(node x,node y){return x.rest>y.rest;}\nint check(LL lim){\n    int i,j,x,now;LL num;na=nb=0;\n    for(i=1;i<=n;++i)vis[i]=restbj[i]=0;\n    for(i=1;i<=m;++i)used[i]=0;\n    for(i=1;i<=m;++i){\n        x=army[i],num=0;\n        for(j=17;j>=0;--j)//3.\u4e0a\u63d0\u519b\u961f\n            if(f[x][j]>1&&num+dis[x][j]<=lim)\n            num+=dis[x][j],x=f[x][j];\n        if(f[x][0]==1&&num+dis[x][0]<=lim){//4.\u5904\u7406\u5269\u4f59\u8def\u7a0b\n            a[++na].rest=lim-num-dis[x][0],a[na].id=i;\n            if(!restbj[x]||a[na].rest<restmin[x])\n                restmin[x]=a[na].rest,restbj[x]=i;\n        }\n        else vis[x]=1;\n    }\n    if(checkok(1,0))return 1;\n    sort(a+1,a+1+na,cmp),sort(b+1,b+1+nb,cmp);//6.\u519b\u961f\u5728\u5b50\u6811\u95f4\u8f6c\u79fb\n    now=1;used[0]=1;\n    for(i=1;i<=nb;++i){\n        if(!used[restbj[b[i].id]]){used[restbj[b[i].id]]=1;continue;}\n        while(now<=na&&(used[a[now].id]||a[now].rest<b[i].rest))++now;\n        if(now>na)return 0;used[a[now].id]=1;\n    }\n    return 1;\n}\nint main()\n{\n    int i,x,y,z;LL l=0,r=500000,mid,ans=-1;\n    n=read();\n    for(i=1;i<=n;++i)h[i]=-1;\n    for(i=1;i<n;++i){\n        x=read(),y=read(),z=read();\n        add(x,y,z),add(y,x,z);\n    }\n    dfs(1,0,0);m=read();\n    for(i=1;i<=m;++i)army[i]=read();\n    while(l<=r){//2.\u4e8c\u5206\u7b54\u6848\n        mid=(l+r)>>1;\n        if(check(mid))r=mid-1,ans=mid;\n        else l=mid+1;\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1508309266,
        "uid": 20604,
        "name": "litble",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "emm,~~\u8fd9\u9898\u771f\u6076\u5fc3~~\n\n\u4ece\u65e9\u4e0a\u5f00\u59cb\u5199\uff0c\uff0c\u60f3\u51fa\u601d\u8def\uff08\u7ecfRefun\u795e\u7684\u6307\u70b9\uff09\u540e\u6162\u6162\u5199\uff0c\u5199\u4e861\u4e2a\u591a\u5c0f\u65f6\u624d\u5199\u5b8c\uff0c\u7136\u540e\u4e00\u76f4\u8c03\u5230\u4e0b\u5348\u624dA\uff0c~~\u5fc3\u529b\u4ea4\u7601~~\n\n\u500d\u589e+\u8d2a\u5fc3\n\n\u5176\u5b9e\u601d\u8def\u5e76\u4e0d\u662f\u5f88\u96be\uff0c\u4f46\u662f\u5b9e\u73b0\u8d77\u6765\u7684\u7ec6\u8282\u3002\u3002\u3002\n\n\n## \u5927\u81f4\u601d\u8def \uff1a \n \n  \u9898\u76ee\u8981\u6c42\u6211\u4eec\u8981\u7528m\u4e2a\u70b9\u201c\u5c01\u6b7b\u201d\u8fd9\u68f5\u6811\n  \n  \u90a3\u4e48\u663e\u7136 ** \u4e00\u4e2a\u519b\u961f\u8d8a\u5f80\u4e0a\u8df3\u63a7\u5236\u7684\u70b9\u5c31\u4f1a\u8d8a\u591a**\n  \n  \u7136\u540e\u9898\u76ee\u95ee\u8981\u201c\u5c01\u6b7b\u201d\u8fd9\u68f5\u6811\u7684\u8bdd\uff0c\u79fb\u52a8\u8ddd\u79bb\u6700\u5927\u7684\u70b9\u79fb\u52a8\u7684\u6700\u5c0f\u8ddd\u79bb\u662f\u591a\u5c11 \u2014\u2014\u2014\u2014\u663e\u7136\u662f**\u4e8c\u5206\u65f6\u95f4**\n  \n## \u5177\u4f53\u505a\u6cd5 \uff1a    \n  \n  \u6211\u4eec\u5c31\u8ba9\u6bcf\u4e2a\u519b\u961f\u5728\u4e8c\u5206\u7684\u65f6\u95f4\u5185\u5c3d\u91cf\u5411\u4e0a\u8df3\uff0c\u770b\u80fd\u4e0d\u80fd\u5728\u7ed9\u5b9a\u7684\u65f6\u95f4\u5185\u8df3\u5230\u8282\u70b91\n  \n  \u5982\u679c\u80fd\uff0c\u5c31\u5148\u8ba9\u8fd9\u4e2a\u519b\u961f\u8df3\u4e0a\u53bb\uff0c\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u519b\u961f\u5230\u8282\u70b91\u65f6\u7684\u5269\u4f59\u65f6\u95f4Rest\u548c\u5b83\u5728\u5411\u4e0a\u8df3\u7684\u8def\u5f84\u4e2d1\u7684\u513f\u5b50Top\uff0c\u4fbf\u4e8e\u540e\u6765\u7684\u5904\u7406\u3002\n  \n  \u5982\u679c\u4e0d\u80fd\uff0c\u5c31\u8ba9\u8fd9\u4e2a\u519b\u961f\u5c3d\u91cf\u5f80\u4e0a\u8df3\uff0c\u5e76\u5728\u7ec8\u70b9\u6253\u4e0a\u63a7\u5236\u6807\u8bb0\uff08\u6bd5\u7adf\u8d8a\u5f80\u4e0a\u8df3\u63a7\u5236\u7684\u8282\u70b9\u80af\u5b9a\u4e0d\u4f1a\u6bd4\u5728\u539f\u6765\u7684\u70b9\u5c11\uff09\n  \n  \u5904\u7406\u5b8c\u6240\u6709\u7684\u519b\u961f\u540e\uff0c\u6211\u4eec\u518d\u5c06\u6240\u6709\u80fd\u8e66\u5230\u8282\u70b91\u7684\u519b\u961f\u6309\u7167Rest\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\n  \n  \u7136\u540e\u5982\u679c\u8fd9\u4e2a\u70b9\u7684Rest\u5df2\u7ecf\u4e0d\u80fd\u518d\u4ece1\u8e66\u56deTop\u4e86\u5e76\u4e14Top\u8fd8\u6ca1\u6709\u88ab\u63a7\u5236\uff0c\u90a3\u5c31\u8ba9\u8fd9\u4e2a\u70b9\u522b\u5728\u8282\u70b91\u5446\u7740\u4e86\uff0c\u76f4\u63a5\u56de\u5230Top\u987a\u4fbf\u628aTop\u8282\u70b9\u63a7\u5236\u4e86\u5c31\u884c\u5566\uff0c\u56e0\u4e3a\u5982\u679c\u5b83\u4e0d\u56de\u53bb\uff0c\u80af\u5b9a\u8fd8\u8981\u6709\u522b\u7684\u5730\u65b9\u7684\u519b\u961f\u6765\u63a7\u5236Top\uff0c\u90a3\u6837\u663e\u7136\u8ddd\u79bb\u66f4\u8fdc\u3002\n  \n  \u6700\u540e\u518d\u628a\u6240\u6709\u6ca1\u6709\u88ab\u63a7\u5236\u7684\u8282\u70b91\u7684\u513f\u5b50\uff08**\u6ce8\u610f\uff1a \u5982\u679c\u8fd9\u4e2a\u70b9\u7684\u6240\u6709\u5b50\u6811\u7684\u53f6\u5b50\u8282\u70b9\u88ab\u63a7\u5236\u4e86\uff0c\u90a3\u8fd9\u4e2a\u70b9\u4e5f\u7b97\u662f\u88ab\u63a7\u5236\u4e86**\uff09\u52a0\u5165\u961f\u5217\uff0c\u7136\u540e\u518d\u6309\u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\u3002\n  \n  \u6700\u540e\u628a\u73b0\u5728\u4ecd\u5728\u8282\u70b91\u7684\u519b\u961f\u6309\u7167Rest\u4ece\u5927\u5230\u5c0f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u548c\u6ca1\u88ab\u63a7\u5236\u7684\u8282\u70b9\u4e00\u4e00\u6bd4\u5bf9\u5c31\u597d\u8fa3\n  \n  \n  \u5177\u4f53\u505a\u6cd5\u8bf4\u5b8c\u4e86\uff0c\u7136\u540e\u6211\u4eec\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff0cn,m<=50000,\u66b4\u529b\u5411\u4e0a\u8df3\u80af\u5b9a\u662f\u4f1aT\u7684\n  \n  **\u6240\u4ee5\u6211\u4eec\u4f7f\u7528\u500d\u589e\u8fdb\u884c\u4f18\u5316**\n  \n  _f[i][j]\u8868\u793a\u4ecei\u8fd9\u4e2a\u70b9\u8df3 2^j \u6b65\u80fd\u8df3\u5230\u7684\u8282\u70b9_\n  \n  _st[i][j]\u8868\u793a\u4ecei\u8fd9\u4e2a\u70b9\u8df3 2^j \u6b65\u7684\u8ddd\u79bb_\n  \n  \u7136\u540e\u519b\u961f\u5411\u4e0a\u63d0\u7684\u65f6\u5019\u5c31\u548c\u500d\u589e\u6c42LCA\u7c7b\u4f3c\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5A\u6389\u6b64\u9898\n  \n  ~~\u7136\u800c\uff0c\u8fd9\u9898\u7ec6\u8282\u5f88\u591a\u554a\u554a~~\n  \n  \u5404\u4f4ddalao\u5982\u6709\u4e0d\u61c2\u4e4b\u5904\u4e5f\u53ef\u4ee5\u770b\u4e00\u770b\u4ee3\u7801\uff0c\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\u2193\n\n  ****\n\n```\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<iostream>\nconst int M = 50005 ;\nconst int N = 20 ;\nusing namespace std;\ninline int read(){\n    int x=0,w=1; char c=getchar(); \n    while(c>'9'||c<'0'){ if(c=='-') w=-1 ;c=getchar() ;}\n    while(c>='0'&&c<='9'){ x=x*10+c-'0'; c=getchar() ; }\n    return x*w;\n}\nint hea[M],num;\nint n,m;\nint p[M];\nint st[M][N],f[M][N],Ans;\nint top[M],tdis[M];\nint rnum=0;\nint q[M],tail=0;\nbool lea[M];\nbool vis[M];\nbool fs=0;\nstruct E{\n    int nex,to;\n    int dis;\n}edge[M<<2];\nstruct Army{\n    int Rest;\n    int Top;\n}army[M];\ninline bool cmp(int a,int b){ return a>b; }\ninline bool cmpmin(Army a,Army b){ return a.Rest<b.Rest; }\ninline bool cmpmax(Army a,Army b){ return a.Rest>b.Rest; }\ninline void add_edge(int from,int to,int dis){\n    edge[++num].nex=hea[from];\n    edge[num].to=to;\n    edge[num].dis=dis;\n    hea[from]=num;\n}\nvoid Dfs(int u,int father){\n    for(int i=hea[u];i;i=edge[i].nex){\n        int v=edge[i].to;\n        if(v==father) continue ;\n        f[v][0]=u; \n        st[v][0]=edge[i].dis;\n        Dfs(v,u);\n    }\n}\nvoid RMQ(){\n    for(int j=1;j<=18;j++)\n      for(int i=1;i<=n;i++){\n      \tf[i][j]=f[f[i][j-1]][j-1];\n      \tst[i][j]=st[i][j-1]+st[f[i][j-1]][j-1];\n      }\n}\nvoid Dfs1(int u,int father,int topf,int dist){\n    top[u]=topf;\n    tdis[u]=dist;\n    bool ft=0;\n    for(int i=hea[u];i;i=edge[i].nex){\n        int v=edge[i].to;\n        if(v==father) continue ;\n        ft=1;\n        Dfs1(v,u,topf,dist);\n    }\n    if(!ft)  lea[u]=1;\n}\nvoid Dfs2(int u,int father){\n    if(lea[u]){\n        fs=1;\n        return ;\n    }\n    for(int i=hea[u];i;i=edge[i].nex){\n        int v=edge[i].to;\n        if(v==father) continue ;\n        else if(vis[v]) continue ;\n        Dfs2(v,u);\n        if(fs) return ;\n    }\n}\ninline bool Look(int v){\n    fs=0;\n    Dfs2(v,f[v][0]);\n    return fs;\n}\ninline bool judge(int mid){\n    memset(vis,0,sizeof(vis));\n    memset(q,0,sizeof(q));\n    memset(army,0,sizeof(army));\n    rnum=0;\n    tail=0;\n    for(int i=1;i<=m;i++){\n        int tim=mid;\n        int now=p[i];\n        bool syst=0;\n        while(1){\n            for(int j=18;j>=0;j--){\n              if(f[now][j]&&st[now][j]<=tim){\n              \ttim-=st[now][j];\n              \tnow=f[now][j];\n                break;\n              }\n              if(j==0||now==1){\n                syst=1;\n                break;\n\t\t\t  }\n            }\n            if(syst) break;\n        }\n        if(now==1){\n            army[++rnum].Top=top[p[i]];\n            army[rnum].Rest=tim;\n        }\n        else vis[now]=1;\n    }\t\n    sort(army+1,army+m+1,cmpmin);\n    for(int i=1;i<=m;i++) \n      if(army[i].Rest<tdis[army[i].Top]){\n        if(!vis[army[i].Top]&&Look(army[i].Top)){\n        \tvis[army[i].Top]=1;\n        \tarmy[i].Rest=-1;\n        }\n      }\n    sort(army+1,army+m+1,cmpmax);\n    for(int i=hea[1];i;i=edge[i].nex){\n        int v=edge[i].to;\n        if(!vis[v]&&Look(v))\n          q[++tail]=edge[i].dis;\n    }\n    sort(q+1,q+tail+1,cmp);\n    for(int i=1;i<=tail;i++)\n      if(army[i].Rest<q[i])\n        return false;\n    return true; \n}\nint main(){\n    n=read();\n    int R=0;\n    for(int i=1;i<n;i++){\n        int u = read(),v = read();\n        int w = read();\n        add_edge(u,v,w);\n        add_edge(v,u,w);\n        R+=w;\n    }\n    Dfs(1,0);\n    for(int i=hea[1];i;i=edge[i].nex){\n        int v=edge[i].to;\n        Dfs1(v,1,v,edge[i].dis);\n    }\n    RMQ();\n    m=read();\n    for(int i=1;i<=m;i++) p[i]=read();\n    int tmp=0;\n    for(int i=hea[1];i;i=edge[i].nex) tmp++;\n    if(tmp>m){\n    \tprintf(\"-1\\n\");\n    \treturn 0;\n    }\n    int L=0;\n    while(L<=R){\n        int mid=(L+R)>>1;\n        if(judge(mid)) Ans=mid,R=mid-1;\n        else L=mid+1;\n    }\n    printf(\"%d\\n\",Ans);\n    return 0;\n```",
        "postTime": 1524387677,
        "uid": 53884,
        "name": "beretty",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8d39\u4e86\u51e0\u4e2a\u5c0f\u65f6\u6760\u6389\u6b64\u9898\uff0c\u5982\u679c\u4e0d\u662f\u90a3\u6c34\u6c34\u7684\u6570\u636e\u7684\u8bdd\uff0c\u8ddf\u5929\u5929\u7231\u8dd1\u6b65\u7684\u96be\u5ea6\u771f\u7684\u662f\u6709\u5f97\u4e00\u6bd4\u3002\u3002\u3002\n\n\u8bdd\u8bf4\u849f\u84bb\u4ed4\u7ec6\u7ffb\u4e86\u6240\u6709\u7684\u9898\u89e3\uff0c\u53d1\u73b0\u5de8\u4f6c\u5199\u7684\u90fd\u662f\u500d\u589e\uff0c\u590d\u6742\u5ea6\u662f$O(n\\log n\\log nw)$\u7684\uff0c\u8c8c\u4f3c\u8fd8\u4e0d\u591f\u4f18\u79c0\u3002\n\n\u5176\u5b9e\u6211\u4eec\u4e0e\u5176\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u90fd\u901a\u8fc7\u500d\u589e\u5411\u4e0a\u627e\u5230\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u8fd8\u4e0d\u5982\u76f4\u63a5\u4ece\u4e0a\u5230\u4e0bdfs\u4e00\u904d\uff0c\u5224\u65ad\uff1a\u5982\u679c\u5f53\u524d\u70b9\u5b50\u6811\u5185\u521d\u59cb\u4f4d\u7f6e\u6700\u6d45\u7684\u519b\u961f\u4e0e\u5f53\u524d\u70b9\u8ddd\u79bb\u4e0d\u8d85\u8fc7$mid$\uff0c\u6216\u8005\u6240\u6709\u5b50\u6811\u90fd\u88ab\u5c01\u9501\uff0c\u90a3\u4e48\u5f53\u524d\u70b9\u4e5f\u88ab\u5c01\u9501\u3002\n\n\u8fd9\u6837\u4ee5\u540e\u518d\u4e8c\u5206\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u81f3$O(n\\log nw)$\u3002\u5176\u5b83\u90e8\u5206\u7684\u601d\u8defDalao\u4eec\u7684\u9898\u89e3\u91cc\u90fd\u8bb2\u6e05\u695a\u4e86\uff0c\u849f\u84bb\u4e5f\u4e0d\u591a\u8bf4\u4e86qwq\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define RG register\n#define R RG int\nusing namespace std;\nconst int N=5e4+9,M=1e5+9;\nint p,he[N],ne[M],to[M],w[M],top[N],at[N],t[N],mn[N];\nLL mid,d[N],dis[N];\nbool cov[N],use[N];\ninline bool cmp(R x,R y){\n    return d[x]>d[y];\n}\nvoid dp(R x,R f){\n    top[x]=p;\n    if(mid<d[x])mid=d[x];//\u63a7\u5236\u4e8c\u5206\u4e0a\u754c\n    if(to[he[x]]==f)he[x]=ne[he[x]];//\u6084\u6084\u628a\u53cd\u8fb9\u5220\u6389\n    for(R i=he[x];i;i=ne[i]){\n        if(to[ne[i]]==f)ne[i]=ne[ne[i]];\n        d[to[i]]=d[x]+w[i];\n        dp(to[i],x);\n    }\n}\nvoid dfs(R x){\n    if(cov[x]){dis[x]=0;return;}\n    dis[x]=1ll<<60;\n    if(!(cov[x]=he[x]))return;//\u5230\u8fbe\u53f6\u5b50\u8282\u70b9\u8fd8\u6ca1\u6709\u88ab\u5c01\u9501\n    for(R y,i=he[x];i;i=ne[i]){\n        dfs(y=to[i]);\n        cov[x]&=cov[y];\n        dis[x]=min(dis[x],dis[y]+w[i]);\n    }\n    if(dis[x]<=mid)cov[x]=1;//\u5b50\u6811\u5185\u519b\u961f\u80fd\u591f\u8d76\u5230\n}\nint main(){\n    R n,m,cnt=0,i,u,v;\n    cin>>n;\n    for(i=1;i<n;++i){\n        cin>>u>>v>>w[++p];w[p+1]=w[p];\n        ne[p]=he[u];to[he[u]=p]=v;++p;\n        ne[p]=he[v];to[he[v]=p]=u;\n    }\n    for(i=he[1];i;i=ne[i])\n        d[p=to[i]]=w[i],dp(t[++cnt]=to[i],1);\n    cin>>m;\n    if(cnt>m)return cout<<\"-1\"<<endl,0;//\u65e0\u89e3\n    for(i=1;i<=m;++i)cin>>at[i];\n    sort(t+1,t+cnt+1,cmp);//\u6392\u5e8f\uff0c\u65b9\u4fbf\u63a5\u4e0b\u6765\u8d2a\u5fc3\n    sort(at+1,at+m+1,cmp);\n    RG LL l=0,r=mid+d[t[1]];\n    while(l<r){\n        mid=(l+r)>>1;\n        memset(cov,0,n+1);\n        memset(use,0,n+1);\n        for(i=1;i<=cnt;++i)mn[t[i]]=0;//\u6e05\u7a7a\n        for(i=1;d[at[i]]>mid;++i)\n            cov[at[i]]=1;//\u5230\u4e0d\u4e86\u6839\u8282\u70b9\uff0c\u76f4\u63a5\u7559\u5728\u5b50\u6811\u5185\n        for(p=i;i<=m;++i)\n            if(!mn[top[at[i]]])mn[top[at[i]]]=i;\n            //\u6bcf\u4e2a\u5b50\u6811\u9884\u7559\u4e00\u4e2a\u8d21\u732e\u6700\u5c0f\u7684\u519b\u961f\n        use[0]=1;u=m+1;\n        for(i=1;i<=cnt;++i){\n            dfs(t[i]);\n            if(cov[t[i]])continue;\n            if(use[mn[t[i]]]){//\u9884\u7559\u5df2\u7528\uff0c\u53ea\u597d\u62ff\u5176\u5b83\u5b50\u6811\u7684\n                for(--u;u>=p&&(d[at[u]]+d[t[i]]>mid||use[u]);--u);\n                if(u<p)break;\n                use[u]=1;\n            }\n            else use[mn[t[i]]]=1;//\u9884\u7559\u76f4\u63a5\u7528\n        }\n        u>=p?r=mid:l=mid+1;\n    }\n    cout<<l<<endl;\n    return 0;\n}\n```",
        "postTime": 1537887461,
        "uid": 61325,
        "name": "FlashHu",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1084)\n\n\u8fd9\u9898\u5f00\u59cb\u770b\u4e86\u5f88\u591a\u9898\u89e3\uff0c\u4e5f\u6ca1\u6709\u770b\u61c2\uff0c\u8981\u4e48\u592a\u957f\uff0c\u8981\u4e48\u53d8\u91cf\u5947\u602a\uff0c\u6240\u6709\u6211\u5199\u4e86\u7bc7\u798f\u5229\u6587\uff0c\u770b\u4e0d\u61c2\u627e\u6211\u7b97\u8d26\u3002\n\n## \u9898\u9762\u7b80\u8ff0\n\n\u6709\u4e00\u9897\u6811\uff0c\u521d\u59cb\u7ed9\u4f60\u4e00\u4e9b\u677f\u5b50\u6765\u6321\u4f4f\u6c34\u6d41\uff0c\u8ba9\u4f60\u628a\u677f\u5b50\u5f80\u4e0a\u63d0\uff08\u63d0\u7684\u65f6\u95f4\u4e3a\u8fb9\u7684\u957f\u5ea6\uff09\uff0c\u6c34\u4f1a\u4ece\u6839\u8282\u70b9\u6d41\u51fa\uff0c\u6700\u77ed\u9700\u8981\u591a\u957f\u65f6\u95f4\u624d\u4e0d\u4f1a\u4f7f\u6c34\u6d41\u5230\u53f6\u8282\u70b9\u5916\uff08\u5373\u677f\u5b50\u4e5f\u53ef\u4ee5\u653e\u5728\u53f6\u8282\u70b9\u4e0a\uff09\uff1f\n\n## \u601d\u8def\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a \u90bb\u63a5\u8868\u3001LCA\n\n1. \u7c7b\u4f3c\u4e8e`lca`\u7684\u65b9\u6cd5\uff0c\u500d\u589e\u9884\u5904\u7406\u51fa`f`\u7236\u4eb2\u8282\u70b9\u548c`dis`\u5230\u7236\u4eb2\u8282\u70b9\u7684\u957f\u5ea6\u6570\u7ec4\u3002\n\n2. \u4e8c\u5206\u7b54\u6848\u3002\n\n3. \u5bf9\u4e8e\u6bcf\u4e2a\u5f53\u524d\u7684`lim`\uff0c\u628a\u6bcf\u4e2a\u519b\u961f\u4e0a\u63d0\u5230\u80fd\u591f\u8fbe\u5230\u7684\u6700\u9ad8\u4f4d\u7f6e\uff08\u6700\u9ad8\u4e0a\u63d0\u5230\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff09\uff0c\u56e0\u4e3a\u8d8a\u5f80\u4e0a\uff0c\u80fd\u5835\u4f4f\u7684\u5b50\u6811\u5927\u5c0f\u5c31\u8d8a\u5927\u3002\n\n4. \u5bf9\u4e8e\u53ef\u4ee5\u4e0a\u63d0\u5230\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u518d\u7ecf\u8fc7\u6839\u8282\u70b9\u540e\u8fd8\u80fd\u884c\u8d70\u7684\u519b\u961f\uff0c\u5b58\u5165`rest_army`\u6570\u7ec4\u4e2d\uff0c\u540c\u65f6\u6c42\u51fa\u6839\u6bcf\u4e2a\u5b50\u8282\u70b9\u7a7a\u95f2\u519b\u961f\u8d70\u5230\u6839\u8282\u70b9\u540e\u5269\u4f59\u884c\u7a0b\u6700\u5c0f\u7684\u7f16\u53f7\uff08`restnum`\u548c`restmin`\uff09\u3002\n\n5. \u5224\u65ad\u6839\u7684\u5b50\u8282\u70b9\u7684\u7a7a\u9699\u60c5\u51b5\uff0c\u5b58\u5230`gap`\u6570\u7ec4\u4e2d\u3002\n\n6. \u8d2a\u5fc3\u3002\u5bf9\u4e8e`rest_army`\u548c`gap`\u6570\u7ec4\u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u3002\n\n\u8be6\u89c1\u7a0b\u5e8f\n\n```cpp\n#include <bits/stdc++.h>\n\n#define MAXN 100010\n#define ll long long\n\nusing namespace std;\n\nint n, m, tot;\nll restarmy_num, gap_num;\n\nstruct edge {\n\tint to, next;\n\tint w;\n}e[MAXN];//\u90bb\u63a5\u8868\n\nint head[MAXN];\n\nint f[MAXN][22];\n\nint garrison[MAXN];//\u662f\u5426\u9a7b\u5b88\nint restnum[MAXN];\n\nll restmin[MAXN], dis[MAXN][22];\n\nint used[MAXN], army[MAXN]; \n\nvoid add(int x, int y, int z) {\n\te[++tot].to = y;\n\te[tot].w = z;\n\te[tot].next = head[x];\n\thead[x] = tot;\n}\n\nvoid dfs(int x, int fath, ll len) {\n\tf[x][0] = fath;\n\tdis[x][0] = len;\n\t\n\tfor (int i = 1; i <= 17; i++) {\n\t\tf[x][i] = f[f[x][i - 1]][i - 1];\n\t\tdis[x][i] = dis[x][i - 1] + dis[f[x][i - 1]][i - 1];\n\t}\n\t\n\tfor (int i = head[x]; i; i = e[i].next) {\n\t\tif (e[i].to != fath) dfs(e[i].to, x, e[i].w);\n\t}\n}//\u8fd9\u91cc\u770b\u4e0d\u61c2\u53ef\u4ee5\u53bb\u5b66\u4e00\u4e0bLCA\u6700\u8fd1\u516c\u5171\u7956\u5148\n\nstruct node {\n\tint id;\n\tll rest;\n}rest_army[MAXN], gap[MAXN];\n\nint checkok(int x, int fath) {\n\tbool no_gap = 1;//\u5224\u65ad\u6709\u6ca1\u6709\u7a7a\u9699\n    bool have_son = 0;//\u5224\u65ad\u6709\u6ca1\u6709\u5b50\u8282\u70b9\n\tif (garrison[x]) return 1;//\u82e5\u5df2\u88ab\u9a7b\u5b88\uff0c\u8fd4\u56detrue\n\t\n\tfor (int i = head[x]; i; i = e[i].next) {\n\t\tif (e[i].to == fath) continue;\n\t\thave_son = 1;//\u6709\n\t\tif (!checkok(e[i].to, x)) {\n\t\t\tno_gap = 0;//\u6709\u7a7a\u9699\n\t\t\tif (x == 1) {\n\t\t\t\tgap[++gap_num].id = e[i].to;\n\t\t\t\tgap[gap_num].rest = e[i].w;\n\t\t\t}\n\t\t\telse return 0;\n\t\t}\n\t}\n\t\n\tif (!have_son) return 0;\n\telse return no_gap;\n    //\u5982\u679c\u6ca1\u6709\u5b69\u5b50\u4e14\u6ca1\u6709\u519b\u961f\u5728\u6b64\u9a7b\u5b88\uff0c\u8fd4\u56defalse\n    //\u6709\u5b69\u5b50\uff0c\u6709\u4e00\u6761\u7a7a\u9699\u5219\u8fd4\u4f1afalse\n}\n\nbool cmp(node x, node y) {\n\treturn x.rest > y.rest;\n}\nbool check(ll lim) {\n\trestarmy_num = 0;\n\tgap_num = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tgarrison[i] = 0;\n\t\trestnum[i] = 0;\n\t}\n\tfor (int i = 1; i <= m; i++) {\n\t\tused[i] = 0;\n\t}\n    //\u521d\u59cb\u5316\n    \n\tint num, x; \n\t\n\tfor (int i = 1; i <= m; i++) {\n\t\tx = army[i];\n\t\tnum = 0;\n\t\tfor (int j = 17; j >= 0; j--) {//3. \u4e0a\u63d0\n\t\t\tif (f[x][j] > 1 && num + dis[x][j] <= lim) {\n\t\t\t\tnum += dis[x][j];\n\t\t\t\tx = f[x][j];\n\t\t\t}\n\t\t}\n\t\tif (f[x][0] == 1 && lim - num - dis[x][0] >= 0) {//4. \u7a7a\u95f2\u519b\u961f\u7684\u5904\u7406\n\t\t\trest_army[++restarmy_num].id = i;\n\t\t\trest_army[restarmy_num].rest = lim - num - dis[x][0];//\u7ecf\u8fc7\u6839\u8282\u70b9\u540e\u8fd8\u80fd\u8d70\u591a\u8fdc\n\t\t\tif (!restnum[x] || restmin[x] > rest_army[restarmy_num].rest) {\n\t\t\t\trestnum[x] = i;\n\t\t\t\trestmin[x] = rest_army[restarmy_num].rest;\n\t\t\t}\n\t\t}\n\t\telse garrison[x] = 1;//\u5426\u5219\u5c31\u5728\u6b64\u8282\u70b9\u9a7b\u5b88\n\t}\n\t\n\tif (checkok(1, 0)) return 1;//5. \u6c42\u51fa\u6839\u8282\u70b9\u4e2d\u6709\u54ea\u4e9b\u5b50\u8282\u70b9\u662f\u6709\u7a7a\u9699\u5230\u53f6\u8282\u70b9\u7684\uff0c\u5b58\u5165gap\u6570\u7ec4\uff0c\n\t\n    //6. \u8d2a\u5fc3\n\tsort(rest_army + 1, rest_army + restarmy_num + 1, cmp);\n\tsort(gap + 1, gap + gap_num + 1, cmp);//\u5bf9\u4e24\u4e2a\u6570\u7ec4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u6765\u4fdd\u8bc1\u6bcf\u4e00\u6b65\u6700\u4f18\n    \n\tused[0] = 1;\n\tint now = 1;\n\tfor (int i = 1; i <= gap_num; i++) {\n\t\tif (!used[restnum[gap[i].id]]) {\n\t\t\tused[restnum[gap[i].id]] = 1;\n\t\t\tcontinue;\n\t\t}//\u5982\u679c\u6b64\u8282\u70b9\u884c\u7a0b\u6700\u5c0f\u7684\u7a7a\u95f2\u519b\u961f\u6ca1\u6709\u88ab\u53ea\u7528\uff0c\u90a3\u4e48\u8fd9\u4e2a\u519b\u961f\u76f4\u63a5\u5728\u6b64\u9a7b\u5b88\n        \n\twhile (now <= restarmy_num && (used[rest_army[now].id] || rest_army[now].rest < gap[i].rest)) now++;\n        //\u82e5\u4e0d\u884c\u5219\u904d\u5386\u4e00\u904d\uff0c\u5bfb\u627e\u53ef\u4ee5\u7ecf\u8fc7\u6839\u8282\u70b9\u6765\u5230\u6b64\u8282\u70b9\u7684\u7a7a\u95f2\u519b\u961f\u3002\n\t\tif (now > restarmy_num) return 0;//\u82e5\u904d\u5386\u5b8c\u8fd8\u6ca1\u6709\uff0c\u5219\u8fd4\u56defalse\n\t\tused[rest_army[now].id] = 1;//\u6807\u8bb0\u5df2\u4f7f\u7528\n\t}\n\treturn 1;\n}\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n - 1; i++) {\n\t\tint u, v, w;\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\n\t\tadd(u, v, w);\n\t\tadd(v, u, w);\n\t}\n\tdfs(1, 0, 0);\n\tscanf(\"%d\", &m);\n\tfor (int i = 1; i <= m; i++) scanf(\"%d\", &army[i]);\n\t\n\tint l = 1, r = 500000;\n\tll ans = 0;\n\tint mid;\n\twhile (l <= r) {//2. \u4e8c\u5206\u7b54\u6848\n\t\tmid = (l + r) >> 1;\n\t\tif (check(mid)) {\n\t\t\tr = mid - 1;\n\t\t\tans = mid;\n\t\t}\n\t\telse l = mid + 1;\n\t}\n\t\n\tcout << ans << endl;\n\treturn 0;\n} \n```\n",
        "postTime": 1569895424,
        "uid": 18673,
        "name": "ctq1999",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1084 \u75ab\u60c5\u63a7\u5236"
    },
    {
        "content": "\u601d\u8def\u6bd4\u8f83\u597d\u60f3\uff0c \u4f46\u662f\u849f\u84bb\u7801\u529b\u4e0d\u884c\u554a\n\n## \u9898\u610f:\n#### \u7ed9\u5b9a\u4e00\u4e9b\u969c\u788d\uff0c\u7528\u8fd9\u4e9b\u969c\u788d\u6765\u5207\u65ad\u6839\u8282\u70b9\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u79fb\u52a8\u969c\u788d\uff0c\u6c42\u603b\u65f6\u95f4\u6700\u5c11\n\n## \u601d\u8def\uff1a\n#### \u56e0\u4e3a\u58eb\u5175\u4eec\u53ef\u4ee5\u540c\u65f6\u79fb\u52a8\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\u6240\u6709\u519b\u961f\u4e2d\u6240\u7528\u65f6\u95f4\u6700\u957f\u7684\u65f6\u95f4\u662f\u591a\u5c11\uff0c\u663e\u7136\u8981\u6700\u5c0f\u5316\u8fd9\u4e2a\u503c\uff0c\u4e8e\u662f\u4e8c\u5206\uff01\uff01\uff01\n\n#### \u5982\u4f55\u5224\u5b9a\u5462\uff1f\uff1f\uff1f\n#### \u8bd5\u60f3\u662f\u4e0d\u662f\u4e00\u4e2a\u70b9\u7684\u6df1\u5ea6\u8d8a\u6d45\uff0c\u90a3\u4e48\u5b83\u63a7\u5236\u7684\u8282\u70b9\u4e00\u5b9a\u4e0d\u6bd4\u6df1\u5ea6\u6df1\u7684\u5dee\n#### \u90a3\u4e48\uff0c\u53ef\u4ee5\u5c06\u7ed9\u5b9a\u7684m\u4e2a\u58eb\u5175\u5728\u6709\u9650\u65f6\u95f4\u5185(mid)\u5f80\u4e0a\u8df3\uff0c\u8df3\u4e00\u4e2a\u8d5a\u4e00\u4e2a\n#### \u76ee\u7684\u5219\u662f\u63a7\u5236\u6839\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\n \n### \u7136\u540e\u5c31\u4f1a\u51fa\u7ebf\u8fd92\u4e2d\u60c5\u51b5\n### - 1.\u8df3\u4e0d\u5230\u6839\u8282\u70b9\n### - 2.\u8df3\u5f97\u5230\u6839\u8282\u70b9\n\n#### \u5bf9\u4e8e\u60c5\u51b51\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u70b9\u505a\u4e00\u4e2a\u6807\u8bb0\n#### \u5bf9\u4e8e\u60c5\u51b52\uff0c\u6211\u4eec\u8bb0\u5f55\u5b83\u8fd8\u6709\u591a\u5c11\u5269\u4f59\u65f6\u95f4\uff0c\u7136\u540e\u8fd9\u4e9b\u70b9\u6709\u7684\u662f\u53ef\u4ee5\u5230\u6839\u8282\u70b9\u5f97\u53e6\u4e00\u9897\u5b50\u6811\u53bb\u7684\u3002\n\n\u5982\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/22945.png)\n\n#### \u7eff\u8272\u8282\u70b9\u53ef\u4ee5\u8df3\u5230\u6839\u8282\u70b9\u7136\u540e\u5230\u7ea2\u8272\u8282\u70b9\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u7ea2\u8272\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\n\n#### \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u5230\u6839\u8282\u70b9\u7684\u70b9\uff0c\u5c06\u5b83\u5269\u4f59\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f(\u8fd9\u6837\u7684\u70b9\u8bb0\u4e3aa)\n#### \u518d\u5c06\u672a\u63a7\u5236\u7684\u6839\u8282\u70b9\u7684\u513f\u5b50\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u6392\u5e8f (\u70b9\u8bb0\u4e3ab)\n##### \u7136\u540e\u770ba\u662f\u5426\u80fd\u8986\u76d6b\u5373\u53ef\n\n### \u7528\u500d\u589e\u6765\u4f18\u5316\n### \u590d\u6742\u5ea6O(nlognlogn)\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define LL long long\nconst int maxn = 5e5 + 7;\nint head[maxn], cnt = 1, n, m, st[maxn], tot;\nint dep[maxn], f[maxn], F[maxn][22], ds[maxn][22];\nstruct Node {int v, nxt, w;} G[maxn << 1];\nstruct DATA {LL v; int id;} a[maxn], b[maxn];\nbool vis[maxn]; int tt;\n\nvoid ins(int u, int v, int w) {\n\tG[cnt] = (Node) {v, head[u], w}; head[u] = cnt++;\n}\nvoid dfs(int x, int fa, int deep, int w) {\n\tdep[x] = deep; f[x] = fa; ds[x][0] = w; F[x][0] = fa;\n\tfor (int i = 1; i <= 20 && F[F[x][i - 1]][i - 1]; ++i) {\n\t\tF[x][i] = F[F[x][i - 1]][i - 1];\n\t\tds[x][i] = ds[F[x][i - 1]][i - 1] + ds[x][i - 1];\n\t}\n\tfor (int i = head[x]; i; i = G[i].nxt) {\n\t\tint v = G[i].v; if(v == fa) continue;\n\t\tdfs(v, x, deep + 1, G[i].w);\n\t}\n}\nvoid put_tag(int x) {\n\tbool p = 1, q = 0;\n\tfor (int i = head[x]; i; i = G[i].nxt) {\n\t\tint v = G[i].v; if(v == f[x]) continue;\n\t\tput_tag(v); p &= vis[v]; q = 1;\n\t} if(x != 1 && p && q) vis[x] = 1;\n}\nvoid init() {\n    tot = tt = 0;\n\tmemset(vis, 0, sizeof vis);\n}\nbool cmp(DATA a, DATA b) {\n\treturn a.v < b.v;\n}\nbool check(int res) {\n\tinit();\n\tfor (int i = 1; i <= m; ++i) {\n\t\tint x = st[i], t = 0;\n\t\tfor (int j = 20; j >= 0; --j) if(F[x][j] && t + ds[x][j] <= res) { t += ds[x][j]; x = F[x][j];}\n\t\tif(x != 1) vis[x] = 1;\n\t\telse {\n\t\t\tx = st[i]; a[++tot].v = res - t;\n\t\t\tfor (int j = 20; j >= 0; --j) if(F[x][j] > 1) x = F[x][j];\n\t\t    a[tot].id = x;\n\t\t}\n\t} put_tag(1);\n\tfor (int i = head[1]; i; i = G[i].nxt) {\n\t\tint v = G[i].v; if(vis[v]) continue;\n\t\tb[++tt].v = G[i].w; b[tt].id = v; \n\t}\n\tsort(a + 1, a + tot + 1, cmp);\n\tsort(b + 1, b + tt + 1, cmp); int j = 1;\n\tfor (int i = 1; i <= tot; ++i) {\n\t\tif(!vis[a[i].id]) vis[a[i].id] = 1;\n\t\telse if(a[i].v >= b[j].v) vis[b[j].id] = 1;\n\t\twhile(vis[b[j].id] && j <= tt) ++j;\n\t} return j > tt;\n}\n\nint main() {\n\tscanf(\"%d\", &n); int res = 0;\n\tfor (int i = 1; i <= n - 1; ++i) {\n\t\tint u, v, w; scanf(\"%d%d%d\", &u, &v, &w);\n\t\tins(u, v, w); ins(v, u, w); res += w;\n\t} dfs(1, 0, 1, 0);\n\tscanf(\"%d\", &m);\n\tfor (int i = 1; i <= m; ++i) scanf(\"%d\", &st[i]);\n\tint l = 0, r = res, ans = 0, ret = 0;\n\tfor (int i = 1; i <= n; ++i) ret += (dep[i] == 2);\n\tif(m < ret) {puts(\"-1\"); return 0;}\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid)) {ans = mid; r = mid - 1;}\n\t\telse l = mid + 1; \n\t} printf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n\n\n\n\n\n",
        "postTime": 1531290296,
        "uid": 62054,
        "name": "JACKLOVEONE",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io)\n\n---\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 1084](https://www.luogu.org/problemnew/show/P1084)\n\nH \u56fd\u6709 $n$ \u4e2a\u57ce\u5e02\u7531 $n\u22121$ \u6761\u53cc\u5411\u9053\u8def\u8fde\u901a\u6210\u4e00\u68f5\u6811\uff0c$1$ \u53f7\u57ce\u5e02\u662f\u9996\u90fd\uff0c\u4e5f\u5c31\u662f\u6839\u8282\u70b9\u3002H \u56fd\u7684\u9996\u90fd\u7206\u53d1\u4e86\u4f20\u67d3\u75c5\u3002\u4e3a\u4e86\u63a7\u5236\u75ab\u60c5\uff0c\u4e0d\u8ba9\u75ab\u60c5\u6269\u6563\u5230\u8fb9\u5883\u57ce\u5e02\uff08\u53f6\u5b50\u8282\u70b9\u6240\u8868\u793a\u7684\u57ce\u5e02\uff09\uff0c\u5f53\u5c40\u51b3\u5b9a\u8ba9\u519b\u961f\u5728\u4e00\u4e9b\u57ce\u5e02\u5efa\u7acb\u68c0\u67e5\u70b9\uff0c\u4f7f\u5f97\u4ece\u9996\u90fd\u5230\u8fb9\u5883\u57ce\u5e02\u7684\u6bcf\u4e00\u6761\u8def\u5f84\u4e0a\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u68c0\u67e5\u70b9\u3002\u9664\u4e86\u9996\u90fd\uff0c\u4efb\u4f55\u4e00\u4e2a\u57ce\u5e02\u90fd\u53ef\u4ee5\u5efa\u7acb\u68c0\u67e5\u70b9\u3002\n\n\u73b0\u5728\uff0c\u5728 H \u56fd\u7684\u4e00\u4e9b\u57ce\u5e02\u4e2d\u5df2\u7ecf\u9a7b\u624e\u6709\u519b\u961f\uff0c\u4e14\u4e00\u4e2a\u57ce\u5e02\u53ef\u4ee5\u9a7b\u624e\u591a\u4e2a\u519b\u961f\u3002\u4e00\u652f\u519b\u961f\u53ef\u4ee5\u5728\u6709\u9053\u8def\u8fde\u63a5\u7684\u57ce\u5e02\u95f4\u79fb\u52a8\uff0c\u5e76\u5728\u6700\u591a\u4e00\u4e2a\u57ce\u5e02\u5efa\u7acb\u68c0\u67e5\u70b9\u3002\u519b\u961f\u79fb\u52a8\u9700\u8981\u7684\u65f6\u95f4\u7b49\u4e8e\u7ecf\u8fc7\u7684\u9053\u8def\u7684\u957f\u5ea6 $w$\u3002\u8bf7\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a\u5c0f\u65f6\u624d\u80fd\u63a7\u5236\u75ab\u60c5\u3002\u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u519b\u961f\u53ef\u4ee5\u540c\u65f6\u79fb\u52a8\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$2\\leqslant m\\leqslant n\\leqslant 5\\times 10^4$\uff0c$0<w<10^9$\n\n------\n\n## Solution\n\n### \u9884\u5904\u7406\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8282\u70b9\u7684\u6df1\u5ea6\u8d8a\u5c0f\uff0c\u63a7\u5236\u7684\u8282\u70b9\uff08\u5b50\u6811\u5185\u7684\u8282\u70b9\uff09\u8d8a\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u5730\u628a\u519b\u961f\u5c3d\u91cf\u5411\u4e0a\u63d0\u3002\u636e\u6b64\uff0c\u6211\u4eec\u9700\u8981\u628a\u6bcf\u4e2a\u70b9\u5f80\u4e0a\u7684\u8ddd\u79bb\u9884\u5904\u7406\uff0c\u7528\u500d\u589e\u4f18\u5316\u3002\n\n### \u4e8c\u5206\u7b54\u6848\n\n\u9898\u76ee\u8981\u6c42\u7684\u662f\uff1a\u519b\u961f\u6700\u5927\u7684\u79fb\u52a8\u65f6\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u81ea\u7136\u5730\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\uff08\u5373\u662f\u5426\u53ef\u4ee5\u5728\u786e\u5b9a\u7684\u65f6\u95f4\u5185\u5b8c\u6210\uff09\u3002\n\n### \u5224\u65ad\u5408\u6cd5\n\n\u6839\u636e\u524d\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u5728 $\\texttt{check}$ \u7684\u65f6\u5019\u8981\u5c3d\u91cf\u628a\u519b\u961f\u5f80\u4e0a\u8d70\u3002\u5f53\u4e8c\u5206\u7b54\u6848\u540e\uff0c\u8bbe\u7b54\u6848\u4e3a $x$\uff0c\u8fd9\u91cc\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u519b\u961f\u5728 $x$ \u7684\u65f6\u95f4\u5185\u53ef\u4ee5\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u519b\u961f\u5728 $x$ \u7684\u65f6\u95f4\u5185\u65e0\u6cd5\u5230\u8fbe\u6839\u8282\u70b9\u3002\n\n1. \u9996\u5148\u89e3\u51b3\u519b\u961f\u7684\u4e0a\u63d0\u95ee\u9898\n   - \u5982\u679c\u4e00\u4e2a\u519b\u961f\u65e0\u6cd5\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u4ed6\u6700\u9ad8\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u8ba9\u4ed6\u5f85\u5728\u90a3\u91cc\u5c31\u53ef\u4ee5\u4e86\uff01\n   - \u5982\u679c\u4e00\u4e2a\u519b\u961f\u53ef\u4ee5\u5f97\u5230\u6839\u8282\u70b9\uff0c\u90a3\u6211\u4eec\u6c42\u51fa\u4ed6\u5230\u8fbe\u540e\u8fd8\u53ef\u4ee5\u8d70\u591a\u5c11\u65f6\u95f4 $rest$ \u4ee5\u53ca\u5230\u8fbe $1$ \u524d\u7684\u513f\u5b50 $id$\uff0c\u4ee5\u4fbf\u63a5\u4e0b\u6765\u7684\u5904\u7406\u3002\n2. \u5982\u679c\u8fd8\u6709\u53f6\u5b50\u6ca1\u6709\u88ab\u63a7\u5236\uff0c\u90a3\u6211\u4eec\u80af\u5b9a\u662f\u628a\u519b\u961f\u8c03\u5230 $1$ \u7684\u67d0\u4e2a\u513f\u5b50\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5904\u7406\u51fa $1$ \u7684\u513f\u5b50\u6709\u591a\u5c11\u4e2a\u9700\u8981\u88ab\u63a7\u5236\uff0c\u8bb0\u5f55\u5b83\u4eec\u548c\u6839\u8282\u70b9\u7684\u8ddd\u79bb $dist$\u3002\n3. \u6700\u540e\u5904\u7406\u53ef\u4ee5\u5230\u8fbe $1$ \u7684\u519b\u961f\u7684\u53bb\u5411\u3002\n   - \u5148\u5c06\u8fd9\u4e9b\u519b\u961f\u6309\u7167 $rest$ \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u5982\u679c\u67d0\u4e00\u4e2a\u519b\u961f\u7684 $id$ \u9700\u8981\u88ab\u63a7\u5236\uff0c\u90a3\u4e48\u5c31\u8ba9\u4ed6\u4e0d\u8981\u5230\u8fbe $1$ \u800c\u76f4\u63a5\u5f85\u5728 $id$ \u5c31\u884c\u4e86\u3002\u56e0\u4e3a\u5982\u679c\u4ed6\u4e0d\u56de\u53bb\uff0c\u80af\u5b9a\u9700\u8981\u522b\u7684\u519b\u961f\u8fc7\u6765\u63a7\u5236\u8fd9\u4e2a $id$\uff0c\u8fd9\u6837\u663e\u7136\u82b1\u8d39\u65f6\u95f4\u66f4\u5927\u3002\n   - \u518d\u5c06\u8fd9\u4e9b\u519b\u961f\u6309\u7167 $rest$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u628a\u9700\u8981\u88ab\u63a7\u5236\u7684\u70b9\u6309\u7167 $dist$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u628a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u4ece\u524d\u5f80\u540e\u4e00\u4e00\u5bf9\u6bd4\u5c31\u884c\u4e86\uff01\n4. \u662f\u5426\u5408\u6cd5\u7684\u5224\u65ad\uff1a\u5982\u679c\u6b65\u9aa4 $3$ \u4e2d\u519b\u961f\u7528\u5b8c\u4e86\u53ef\u8fd8\u6709\u8282\u70b9\u9700\u8981\u88ab\u63a7\u5236\uff0c\u90a3\u4e48\u4e0d\u5408\u6cd5\uff1b\u5426\u5219\u5408\u6cd5\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n\\log^2 n)$\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int N=5e4+5,M=1e5+5;\nint n,m,tot,a[N],lnk[N],ter[M],nxt[M],val[M],f[N][16];\nlong long g[N][16];\nbool tag[N];\nstruct data {\n    long long val;\n    int id;\n    bool operator < (const data &rhs) const {\n        return val<rhs.val;\n    }\n} army[N],rest[N];\n\nvoid add(int u,int v,int w) {\n    ter[++tot]=v,nxt[tot]=lnk[u],val[tot]=w,lnk[u]=tot;\n}\nvoid dfs(int u,int fa) {\n    for(int i=lnk[u];i;i=nxt[i]) {\n        int v=ter[i];\n        if(v^fa) f[v][0]=u,g[v][0]=val[i],dfs(v,u);\n    }\n}\nvoid putTag(int u,int fa) {\n    bool res=1,flg=0;\n    for(int i=lnk[u];i;i=nxt[i]) {\n        int v=ter[i];\n        if(v^fa) putTag(v,u),res&=tag[v],flg=1;\n    }\n    if(u!=1&&res&&flg) tag[u]=1;\n}\nvoid RMQ() {\n    for(int j=1;j<=15;++j) for(int i=1;i<=n;++i) {\n        f[i][j]=f[f[i][j-1]][j-1];\n        g[i][j]=g[i][j-1]+g[f[i][j-1]][j-1];\n    }\n}\nbool check(long long lim) {\n    memset(tag,0,sizeof(tag));\n    int cntArmy=0,cntRest=0;\n    for(int i=1;i<=m;++i) {\n        int x=a[i];\n        long long sum=0;\n        for(int j=15;~j;--j) if(f[x][j]>1&&sum+g[x][j]<=lim) sum+=g[x][j],x=f[x][j];\n        if(f[x][0]==1&&sum+g[x][0]<=lim) army[++cntArmy]=data{lim-sum-g[x][0],x};\n        else tag[x]=1;\n    }\n    putTag(1,0);\n    for(int i=lnk[1];i;i=nxt[i]) {\n        int v=ter[i];\n        if(!tag[v]) rest[++cntRest]=data{val[i],v};\n    }\n    std::sort(army+1,army+cntArmy+1);\n    std::sort(rest+1,rest+cntRest+1);\n    int j=1;\n    for(int i=1;i<=cntArmy;++i) {\n        if(!tag[army[i].id]) tag[army[i].id]=1;\n        else if(army[i].val>=rest[j].val) tag[rest[j].id]=1;\n        while(tag[rest[j].id]&&j<=cntRest) ++j;\n    }\n    return j>cntRest;\n}\nint main() {\n    scanf(\"%d\",&n);\n    long long sum=0;\n    for(int u,v,w,i=1;i<n;++i) {\n        scanf(\"%d%d%d\",&u,&v,&w);\n        add(u,v,w),add(v,u,w),sum+=w;\n    }\n    dfs(1,0),RMQ();\n    scanf(\"%d\",&m);\n    for(int i=1;i<=m;++i) scanf(\"%d\",&a[i]);\n    long long l=0,r=sum,ans=-1;\n    while(l<=r) {\n        long long mid=(l+r)>>1;\n        check(mid)?(ans=mid,r=mid-1):l=mid+1;\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1543030308,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "### \u63d0\u4f9b\u4e00\u79cd\u53ef\u80fd\u4e0d\u592a\u6076\u5fc3\u7684\u4e8c\u5206+$set$\u505a\u6cd5\u3002\n\n$\\quad$ **\u5927\u4f53\u601d\u8def:** \u56e0\u4e3a\u7528\u66f4\u591a\u7684\u65f6\u95f4\u80af\u5b9a\u4e5f\u53ef\u4ee5\u5b8c\u6210\u8981\u6c42\uff0c\n\u6240\u4ee5\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\u5bf9\u4e8e\u6bcf\u6b21\u7684\u7b54\u6848$mid$,\u628a\u6240\u6709\n\u519b\u961f\u5728$mid$\u7684\u65f6\u95f4\u5185\u5c3d\u91cf\u5f80\u4e0a\u63d0,\u53ef\u4ee5\u7528\u500d\u589e\u5728\u5355\u6b21$O(logn)$\u7684\u65f6\u95f4\u91cc\u505a\u5230\u3002\u5982\u679c\u80fd\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u5f80$set$\u4e2d\u63d2\u5165\u8be5\u519b\u961f\u5230\u6839\u8282\u70b9\u540e\u8fd8\u80fd\u79fb\u52a8\u7684\u8ddd\u79bb\uff08\u4e0b\u6587\u79f0\u4e4b\u4e3a\u53ef\u79fb\u52a8\u8ddd\u79bb\uff09\uff0c\u8fd9\u4e9b\u519b\u961f\u53ef\u4ee5\u8fdb\u9a7b\u5728\u81ea\u8eab\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb\u5185\u7684\u4efb\u610f\u8282\u70b9\u3002\n\n$\\quad$\u6240\u6709\u8282\u70b9\u90fd\u5c3d\u91cf\u5411\u4e0a\u79fb\u52a8\u540e,\u7edf\u8ba1\u6839\u8282\u70b9\u5404\u4e2a\u5b50\u8282\u70b9\u662f\u5426\u9700\u8981\u519b\u961f\u9a7b\u624e\u3002\u5982\u679c\u67d0\u4e2a\u5b50\u8282\u70b9$a$\u6ca1\u6709\u519b\u961f\u4e0a\u5230\u6839\u8282\u70b9\u4e14\u9700\u8981\u519b\u961f\uff0c\u90a3\u4e48\u76f4\u63a5\u5728set\u4e2d\u627e\u5230\u53ef\u79fb\u52a8\u8ddd\u79bb\u5c3d\u91cf\u5c0f\u4f46\u80fd\u5230\u8fbe$a$\u7684\u519b\u961f\u9a7b\u624e\u5e76\u5728$set$\u4e2d\u5220\u9664\u8be5\u519b\u961f\u3002\n\n$\\quad$\u5982\u679c\u67d0\u4e2a\u8282\u70b9$b$\u6709\u519b\u961f\u5230\u4e86\u6839\u8282\u70b9\u4f46\u662f\u9700\u8981\u9a7b\u624e\uff0c\u6211\u4eec\u8bbe\u6839\u5230\u8be5\u8282\u70b9\u8ddd\u79bb\u4e3a$w$\uff0c\u8be5\u70b9\u5f80$set$\u4e2d\u63d2\u5165\u7684\u7684\u519b\u961f\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb\u4e3a$v$\uff08\u6709\u591a\u4e2a\u53d6\u8f83\u5c0f\u503c\uff09\uff0c\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\uff1a\n\n- $w>v$\uff0c\u5982\u679c\u7528\u6839\u8282\u70b9\u50a8\u5b58\u7684\u519b\u961f\u9a7b\u624e\uff0c\u5c31\u662f\u7528\u5927\u4e8e$w$\u7684\u503c\u53d8\u6210$v$\u660e\u663e\u4e0d\u5212\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\"\u64a4\u56de\"\uff0c\u8ba9\u8fd9\u4e2a\u8282\u70b9\u7684\u519b\u961f\u9000\u56de\u53bb\uff0c\u5728set\u4e2d\u5220\u9664\u8be5\u519b\u961f\u3002\n\n- $w<v$\uff0c\u7528$set$\u50a8\u5b58\u7684\u519b\u961f\u9a7b\u624e\uff0c\u53ef\u80fd\u4f7f\u7528\u7684\u519b\u961f\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb$<v$\uff0c\u8fd9\u6837\u6211\u4eec\u662f\u8cfa\u4e86\u7684\uff0c\u800c\u7528\u5927\u4e8e$v$\u7684\u4e5f\u4e0d\u4f1a\u66f4\u52a3\uff08\u56e0\u4e3a$v$\u5df2\u7ecf\u63d2\u5165$set$\u4e2d\u4e86\uff0c\u5982\u679c\u5f53\u524d$\\ge v$\uff0c\u8bf4\u660e\u8fd9\u4e2a\u519b\u961f\u5728\u8fdb\u9a7b\u4e86\u5176\u5b83\u8282\u70b9\uff0c\u5982\u679c\u8ba9\u8fd9\u4e2a\u519b\u961f\u56de\u6765\u5c31\u8981\u8ba9\u53ef\u79fb\u52a8\u8ddd\u79bb\u66f4\u5927\u7684\u519b\u961f\u53bb\u539f\u6765\u8fd9\u4e2a\u519b\u961f\u8fdb\u9a7b\u7684\u70b9\uff0c\u4e0d\u4f1a\u8ba9\u7ed3\u679c\u66f4\u4f18\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u7528$set$\u4e2d\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb\u6700\u5c0f\u4e14\u80fd\u79fb\u52a8\u5230$b$\u7684\u519b\u961f\u9a7b\u624e\u5728$b$\u70b9\u3002\n\n$\\quad$\u5982\u679c\u6240\u6709\u6839\u8282\u70b9\u5b50\u8282\u70b9\u90fd\u6709\u9a7b\u624e\uff0c\u90a3\u4e48\u8fd9\u4e2a$mid$\u662f\u5408\u6cd5\u7684\u3002\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(nlog^2n)$\u3002\u5e38\u6570\u7565\u5927\uff0c\u4ec5\u4f9b\u5a31\u4e50\u3002\n\n\u53e6\u5916\u5982\u679c\u519b\u961f\u6570\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\uff0c\u90a3\u4e48\u65e0\u89e3\uff0c\u8f93\u51fa-1\u3002\n\n### \u4ee3\u7801&\u6ce8\u91ca\n```cpp\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\n#define MN 50005\n#define INF 1e16\n#define Lg 17\n#define LL long long\n#define itset multiset<LL>::iterator\ninline int max(int a,int b){if(a>b)return a;return b;}//\u63d0\u9192\u4e00\u4e0b\uff0c\u4e09\u76ee\u8fd0\u7b97\u7b26\u901f\u5ea6\u6bd4if\u2026\u2026else\u5feb\uff0c\u4f46\u662f\u6ca1\u67091\u4e2aif\u5feb\ninline int read(){\n\tint a=0;char c=getchar();\n\twhile(c>57 or c<48)c=getchar();\n\twhile(47<c and c<58){\n\t\ta=a*10+c-48;\n\t\tc=getchar();\n\t}\n\treturn a;\n}\nstruct Edge{\n\tint to,v;\n\tEdge(int TO,int V){to=TO;v=V;}\n};//vector\u5efa\u8fb9\u7684\u7ed3\u6784\u4f53\nvector<Edge>edge[MN];\nmultiset<LL>cnt;//\u8bb0\u5f55\u6839\u8282\u70b9\u50a8\u5b58\u7684\u8282\u70b9\nint fa[Lg][MN],tag[MN],n,m,u,v,w,loc[MN];\nLL UP[MN],cost[Lg][MN],lon[MN];\n//fa\u3001cost\uff1a\u500d\u589e\u7684\u7236\u4eb2\u6570\u7ec4\u548c\u82b1\u8d39\u7684\u65f6\u95f4\n//loc\uff1a\u519b\u961f\u521d\u59cb\u4f4d\u7f6e\n//tag\uff1a\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u6709\u519b\u961f\n//UP\uff1a\u4ece\u8fd9\u4e2a\u8282\u70b9\u4e0a\u5230\u6839\u8282\u70b9\u7684\u519b\u961f\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb\n//lon\uff1a\u4e00\u68f5\u6811\u7684\u6700\u957f\u94fe\nvoid dfs(int x){\n\tfor(int i=1;i<Lg;++i){\n\t\tfa[i][x]=fa[i-1][fa[i-1][x]];\n\t\tcost[i][x]=cost[i-1][x]+cost[i-1][fa[i-1][x]];\n\t}//\u500d\u589e\u9884\u5904\u7406\n\tfor(int i=0;i<edge[x].size();++i)\n\t\tif(edge[x][i].to!=fa[0][x]){\n\t\t\tfa[0][edge[x][i].to]=x;\n\t\t\tcost[0][edge[x][i].to]=edge[x][i].v;\n\t\t\tdfs(edge[x][i].to);\n\t\t\tlon[x]=max(lon[x],lon[edge[x][i].to]+(LL)edge[x][i].v);\n\t\t}\n}\nvoid up(int x,LL T){//\u5c3d\u91cf\u5411\u4e0a\u8df3\n\tint tmp=x;\n\tfor(int i=Lg-1;i>=0;--i)\n\t\tif(cost[i][x]<=T&&fa[i][x]>1){\n        //\u8981\u8bb0\u5f55\u7531\u54ea\u4e2a\u8282\u70b9\u8df3\u52301\uff0c\u6240\u4ee5\u5148\u4e0d\u80fd\u8df3\u52301\n\t\t\tT-=cost[i][x];x=fa[i][x];\n            //\u6ce8\u610f\u8fd9\u91cc\uff01\u5148\u51cf\u82b1\u8d39\u7684\u65f6\u95f4\u518d\u8df3\u5411\u7236\u4eb2\uff01\n\t\t}\n\tif(T<cost[0][x]){tag[x]=1;return;}//\u8df3\u4e0d\u4e86\u4e86\uff0c\u6253\u4e2a\u6807\u8bb0\n\tUP[x]=min(UP[x],T-cost[0][x]);\n    //\u8bb0\u5f55\u7531\u8fd9\u4e2a\u8282\u70b9\u8df3\u4e0a\u53bb\u7684\u519b\u961f\u7684\u6700\u5c0f\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb\n\tcnt.insert(T-cost[0][x]);\n    //\u63d2\u5165\u8be5\u519b\u961f\u7684\u53ef\u79fb\u52a8\u8ddd\u79bb\n}\nvoid DFS(int x){\n\tif(tag[x])return;//\u8be5\u8282\u70b9\u6709\u519b\u961f\uff0c\u4e0d\u7528\u8fdb\u9a7b\u4e86\n\tif(edge[x].size()!=1)tag[x]=1;//size\u7b49\u4e8e1\u5c31\u662f\u53f6\u5b50\u8282\u70b9\n\tfor(int i=0;i<edge[x].size();++i)\n\t\tif(edge[x][i].to!=fa[0][x]){\n\t\t\tDFS(edge[x][i].to);\n\t\t\tif(!tag[edge[x][i].to]){\n\t\t\t\ttag[x]=0;//\u5b50\u8282\u70b9\u90fd\u6709\u519b\u961f\uff0c\u90a3\u4e48\u4e5f\u4e0d\u7528\u8fdb\u9a7b\u4e86\n\t\t\t}\n\t\t}\n}\nbool chk(LL T){\n\tcnt.clear();\n\tmemset(tag,0,sizeof(tag));\n\tmemset(UP,0x7f7f7f,sizeof(UP));\n\tfor(int i=1;i<=m;++i){\n\t\tup(loc[i],T);//\u8df3\n\t}\n\tDFS(1);//\u7edf\u8ba1\n\tfor(int i=0;i<edge[1].size();++i){\n\t\tif(!tag[edge[1][i].to]){\n\t\t\tif(UP[edge[1][i].to]<edge[1][i].v){\n\t\t\t\tcnt.erase(cnt.find(UP[edge[1][i].to]));\n\t\t\t\ttag[edge[1][i].to]=1;\n\t\t\t}\n\t\t}//\u76f4\u63a5\u628a\u8fd9\u4e2a\u519b\u961f\u64a4\u56de\u6765\n\t}\n\tfor(int i=0;i<edge[1].size();++i){\n\t\tif(!tag[edge[1][i].to]){\n\t\t\titset IT=cnt.lower_bound(edge[1][i].v);\t\n\t\t\tif(IT==cnt.end()) return 0;//\u627e\u4e0d\u5230\u7b26\u5408\u8981\u6c42\u7684\u519b\u961f\uff0c\u4e0d\u5408\u6cd5\n\t\t\tcnt.erase(IT);\n\t\t}\t\n        //\u4e0a\u4e0b2\u4e2a\u64cd\u4f5c\u4e0d\u80fd\u540c\u65f6\u8fdb\u884c\uff0c\u4e0d\u7136\u53ef\u80fd\u628a\u9700\u8981\u64a4\u56de\u7684\u519b\u961f\u62ff\u53bb\u9a7b\u624e\u4e86\uff0c\u6bd4\u8f83\u9ebb\u70e6\n\t}\n\treturn 1;\n}\nsigned main(){\n\tn=read();\t\n\tfor(int i=1;i<n;++i){\n\t\tu=read();v=read();w=read();\n\t\tedge[u].push_back(Edge(v,w));\n\t\tedge[v].push_back(Edge(u,w));\n        //\u5efa\u8fb9\n\t}\n\tdfs(1);\n\tm=read();\n\tfor(int i=1;i<=m;++i)\n\t\tloc[i]=read();\n\tLL l=-1;\n\tLL r=lon[1]<<1;//\u6700\u5927\u9700\u8981\u7684\u65f6\u95f4\u662f\u6700\u957f\u94fe\u76842\u500d\n\twhile(l+1<r){\n\t\tLL mid=(l+r)>>1;\n\t\tif(chk(mid)) r=mid;\n\t\t\telse l=mid;\n\t}//\u5de6\u5f00\u53f3\u95ed\u7684\u5947\u8469\u4e8c\u5206\u5c0f\u5fc3\u54c1\u5c1d\u3002\u3002\u3002\n\tprintf(\"%lld\",r);\n\treturn 0;\n} \n```",
        "postTime": 1566218958,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "[\u4e5f\u8bb8\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c \u535a\u5ba2\u56ed](https://www.cnblogs.com/Morning-Glory/p/11729119.html)\t\n\n[\u4e5f\u8bb8\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c CSDN](https://blog.csdn.net/Morning_Glory_JR)\n\t\n# $\\mathcal{Description}$\t\n[\u539f\u9898\u94fe\u63a5](https://www.luogu.org/problem/P1084)\t\n\t\n**\u4e00\u53e5\u8bdd\u9898\u610f**\t\n\u4e00\u4e2a\u4eba\u53ef\u4ee5\u5835\u4f4f\u4e00\u4e2a\u5b50\u6811\uff0c\u4e0d\u80fd\u4e00\u6b21\u5835\u4f4f\u6574\u68f5\u6811\uff0c\u6c42\u5835\u4f4f\u6bcf\u4e2a\u901a\u5f80\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8d70\u7684\u6700\u8fdc\u7684\u90a3\u4e2a\u4eba\u8d70\u7684\u8def\u7a0b\u6700\u5c11\u662f\u591a\u5c11\uff0c\u82e5\u4e0d\u80fd\u5835\u4f4f\u8f93\u51fa$-1$\t\n\n# $\\mathcal{Solution}$\t\n\n\n\u770b\u4e86\u4e0b\u5176\u4ed6\u9898\u89e3,\u90fd\u8bf4\u5f88\u6bd2\u7624\t\n\u6700\u5f00\u59cb\u6211\u4e5f\u8ba4\u4e3a\u5f88\u6bd2\u7624\t\n\u5c31\u662f\u5728\u51b3\u5b9a\u4e00\u4e2a\u70b9\u662f\u5426\u8981\u8de8\u8fc7\u6839\u8fd9\u4e2a\u5730\u65b9\u6bd4\u8f83\u9ebb\u70e6\t\n\u4f46\u662f\u5728\u7801\u7684\u9014\u4e2d,\u7a81\u7136\u60f3\u5230\u4e00\u4e2a\u65e0\u8111\u7684\u65b9\u6cd5\t\n\u4e8e\u662f\u5199\u8d77\u6765\u5c31\u5f88\u6109\u5feb\u4e86\t\n\t\n\u6700...\u6700..\uff0c\u663e\u7136\u4e8c\u5206\u8def\u7a0b\u662f\u591a\u5c11\t\n\t\n\u518d\u7ee7\u7eed\u60f3\u4e4b\u524d\uff0c\u5148\u770b\u4e00\u4e0b\u6211\u4eec$check$\u51fd\u6570\u8981\u6c42\u5728\u4ec0\u4e48\u590d\u6742\u5ea6\u51b3\u5b9a\t\n$n\\leq 50000$\uff0c\u53ef\u4ee5$nlog^2n$\u89e3\u51b3\uff0c\u4e5f\u5c31\u662f\u8bf4$check$\u7684\u590d\u6742\u5ea6\u53ea\u8981\u5c0f\u4e8e$nlogn$\u5373\u53ef\t\n\t\n\u4e00\u4e2a\u4eba\u5728\u4e8c\u5206\u5230\u7684\u8def\u7a0b\u5185\uff0c\u5c3d\u91cf\u5f80\u4e0a\u8d70\u662f\u6700\u4f18\u7684\t\n\u82e5\u4e00\u4e2a\u4eba\u53ef\u4ee5\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u8981\u8003\u8651\u5176\u8de8\u8fc7\u8fd9\u4e2a\u6839\u8282\u70b9\u53bb\u5835\u5176\u5b83\u5b50\u6811\t\n\u663e\u7136\uff0c\u82e5\u8de8\u8fc7\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u8d70\u5230\u6839\u8282\u70b9\u4e0b\u9762\u7684\u90a3\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\t\n\t\n\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u4ee5\u8de8\u8fc7\u6839\u8282\u70b9\u7684\u4eba\uff0c\u4ed6\u53ef\u80fd\u4e0d\u8981\u8de8\u8fc7\u6839\u8282\u70b9\uff0c\u4e5f\u53ef\u80fd\u8981\u8de8\u8fc7\u6839\u8282\u70b9\t\n\u4e5f\u53ef\u80fd\u4e00\u4e2a\u5b50\u6811\u91cc\u7684\u4eba\u8de8\u8fc7\u6839\u8282\u70b9\u53bb\u5835\u5176\u4ed6\u5b50\u6811\uff0c\u53e6\u5916\u7684\u4e00\u4e2a\u5b50\u6811\u7684\u4eba\u8de8\u8fc7\u6839\u8282\u70b9\u6765\u5835\u4ed6\u7684\u5b50\u6811\uff0c\u8fd9\u662f\u56e0\u4e3a\u539f\u6765\u8fd9\u4e2a\u5b50\u6811\u7684\u4eba\u6bd4\u8f83\u9760\u8fd1\u6839\u8282\u70b9\uff0c\u8de8\u8fc7\u6839\u8282\u70b9\u540e\u8d70\u7684\u8f83\u8fdc\uff0c\u800c\u4ed6\u6240\u5728\u5b50\u6811\u4e0e\u6839\u8282\u70b9\u7684\u8def\u5f84\u53c8\u6bd4\u8f83\u77ed\t\n\u60f3\u60f3\u597d\u50cf\u6709\u70b9\u9ebb\u70e6\uff0c\u60f3\u5230\u8fd9\u987f\u65f6\u89c9\u5f97\u8fd9\u9898\u5f88\u6bd2\u7624\t\n\t\n\u4f46\u5176\u5b9e\uff0c\u6211\u4eec\u4e0d\u7528\u60f3\u90a3\u4e48\u591a\t\n\u6211\u4eec\u628a\u6240\u6709\u80fd\u8de8\u8fc7\u6839\u8282\u70b9\u7684\u4eba\u90fd\u8d70\u5230\u6839\u8282\u70b9\t\n\u5c06\u5176\u8fd8\u5141\u8bb8\u8d70\u7684\u8def\u7a0b\u5168\u90e8\u8bb0\u4e0b\u6765\t\n\u628a\u6240\u6709\u9700\u8981\u4eba\u53bb\u5835\u7684\u5b50\u6811\u627e\u51fa\u6765\uff0c\u8bb0\u4e0b\u5176\u4e0e\u6839\u8282\u70b9\u7684\u8ddd\u79bb\t\n\u663e\u7136\uff0c\u80fd\u8d70\u5f97\u6700\u8fdc\u7684\u4eba\u53bb\u5835\u8ddd\u79bb\u6839\u8282\u70b9\u6700\u8fdc\u7684\u5b50\u6811\u662f\u6700\u4f18\u7684\t\n\t\n\u4e5f\u5c31\u662f\u8bf4\u8981\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4eec\u7528\u4e00\u4e2a\u5927\u6839\u5806\u7ef4\u62a4\u5373\u53ef\t\n\u5bf9\u4e8e\u4e00\u4e2a\u5230\u5b50\u6811\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u8bb0\u4e0b\u5176\u5b50\u6811\u7684\u7f16\u53f7\uff0c\u5bf9\u4e8e\u6bcf\u68f5\u5b50\u6811\uff0c\u6211\u4eec\u8bb0\u4e0b\u5176\u5185\u53ef\u4ee5\u8de8\u8fc7\u6839\u8282\u70b9\u7684\u4eba\u4e2d\uff0c\u8fd8\u5141\u8bb8\u8d70\u7684\u8def\u7a0b\u6700\u5c11\u7684\u8def\u7a0b\u662f\u591a\u5c11\t\n\t\n\u518d\u8003\u8651\u4e00\u4e2a\u4eba\u53ef\u80fd\u4e0d\u8981\u8de8\u8fc7\u6839\u8282\u70b9\uff0c\u6211\u4eec\u5728\u5f39\u5927\u6839\u5806\u65f6\uff0c\u82e5\u53d1\u73b0\u8fd9\u68f5\u5b50\u6811\u53ef\u4ee5\u7528\u6bd4\u5f53\u524d\u5141\u8bb8\u8d70\u7684\u8def\u7a0b\u6700\u5927\u7684\u4eba\u66f4\u5c0f\u7684\u4eba\u66ff\u4ee3\uff0c\u90a3\u4e48\u90a3\u4e2a\u4eba\u5c31\u4e0d\u9700\u8981\u8de8\u8fc7\u6839\u8282\u70b9\u4e86\t\n\u7531\u4e8e\u90a3\u4e2a\u4eba\u4ecd\u7136\u5728\u5927\u6839\u5806\u5185\uff0c\u6211\u4eec\u628a\u5176\u8bb0\u5728\u4e00\u4e2a\u961f\u5217\u91cc\uff0c\u8868\u793a\u6709\u54ea\u4e9b\u8def\u7a0b\u88ab\u63d0\u524d\u7528\u4e86\t\n\u8fd9\u6837\u5c31\u662f\u6700\u4f18\u7684\t\n\u4ecd\u6709\u4e0d\u61c2\u8bf7\u770b\u4ee3\u7801\uff0c\u6211\u89c9\u5f97\u8fd8\u662f\u5f88\u65e0\u8111\u7684\uff0c\u6bd5\u7adf\u4ec0\u4e48\u7279\u6b8a\u7684\u64cd\u4f5c\u90fd\u6ca1\u6709\uff0c\u4ee3\u7801\u5e94\u8be5\u4e00\u4e0b\u5c31\u770b\u61c2\u4e86\t\n\t\n\t\n\t\n# $\\mathcal{Code}$\t\n\t\n```cpp\t\n/*******************************\t\nAuthor:Morning_Glory\t\nLANG:C++\t\nCreated Time:2019\u5e7410\u670822\u65e5 \u661f\u671f\u4e8c 20\u65f650\u520659\u79d2\t\n*******************************/\t\n#include <cstdio>\n#include <fstream>\n#include <queue>\n#define ll long long\n#define inf 12345678987654\n#define mp make_pair\nusing namespace std;\nconst int maxn = 500005;\nconst int maxm = 1000006;\nconst int lim = 20;\n//{{{cin\nstruct IO{\n\ttemplate<typename T>\n\tIO & operator>>(T&res){\n\t\tres=0;\n\t\tbool flag=false;\n\t\tchar ch;\n\t\twhile((ch=getchar())>'9'||ch<'0')\tflag|=ch=='-';\n\t\twhile(ch>='0'&&ch<='9')\tres=(res<<1)+(res<<3)+(ch^'0'),ch=getchar();\n\t\tif (flag)\tres=~res+1;\n\t\treturn *this;\n\t}\n}cin;\n//}}}\nint n,m,cnt,u,v,val,num;\nint head[maxn],nxt[maxm],to[maxm],w[maxm],hav[maxn],dep[maxn],lg[maxn]={-1};\nint fa[maxn][lim];\nll l,r,mid;\nll d[maxn],f[maxn];\nbool vis[maxn];\npriority_queue <int> qc,qf;\npriority_queue < pair<int,int> >qn;\n//{{{add\nvoid add (int u,int v,int val)\n{\n\tnxt[++cnt]=head[u],head[u]=cnt,to[cnt]=v,w[cnt]=val;\n}\n//}}}\n//{{{dis\nll dis (int x,int y)\n{\n\treturn d[x]>d[y]?d[x]-d[y]:d[y]-d[x];\n}\n//}}}\n//{{{dfs\nvoid dfs (int x)\n{\n\tr=max(r,d[x]);\n\tfor (int i=1;i<=lg[dep[x]];++i)\tfa[x][i]=fa[fa[x][i-1]][i-1];\n\n\tfor (int e=head[x];e;e=nxt[e])\n\t\tif (to[e]!=fa[x][0]){\n\t\t\tfa[to[e]][0]=x,dep[to[e]]=dep[x]+1;\n\t\t\td[to[e]]=d[x]+w[e];\n\t\t\tdfs(to[e]);\n\t\t}\n}\n//}}}\n//{{{move\nvoid move (int x,int nm)\n{\n\tll t=mid;\n\tfor (int i=lg[dep[x]];~i;--i){\n\t\tll ds=dis(fa[x][i],x);\n\t\tif (fa[x][i]>1&&t>=ds)\tt-=ds,x=fa[x][i];\n\t}\n\tif (t>dis(1,x)){\n\t\tll ds=t-dis(1,x);\n\t\tf[x]=min(f[x],ds);\n\t\twhile (nm--)\tqc.push(ds);\n\t}\n\telse\tvis[x]=true;\n}\n//}}}\n//{{{chk\nbool chk (int x)\n{\n\tif (vis[x])\treturn\tfalse;\n\tbool flag=true;\n\tfor (int e=head[x];e;e=nxt[e])\n\t\tif (to[e]!=fa[x][0]){\n\t\t\tflag=false;\n\t\t\tif (chk(to[e]))\treturn true;\n\t\t}\n\treturn flag;\n}\n//}}}\n//{{{check\nbool check ()\n{\n\twhile (!qc.empty())\tqc.pop();\n\twhile (!qn.empty())\tqn.pop();\n\twhile (!qf.empty())\tqf.pop();\n\tfor (int i=1;i<=n;++i)\tvis[i]=0,f[i]=inf;\n\tfor (int i=1;i<=n;++i)\n\t\tif (hav[i])\tmove(i,hav[i]);\n\n\tfor (int e=head[1];e;e=nxt[e])\n\t\tif (chk(to[e]))\tqn.push(mp(w[e],to[e]));\n\n\twhile (!qn.empty()){\n\t\tval=qn.top().first,v=qn.top().second,qn.pop();\n\t\twhile (!qf.empty()&&qf.top()==qc.top())\tqf.pop(),qc.pop();\n\n\t\tif (qc.empty())\treturn false;\n\t\tif (qc.top()<val){\n\t\t\tif (f[v]>qc.top())\treturn false;\n\t\t\tqf.push(f[v]);\n\t\t}\n\t\telse if (f[v]<=qc.top())\tqf.push(f[v]);\n\t\telse\tqc.pop();\n\t}\n\treturn true;\n}\n//}}}\nint main()\n{\n\tcin>>n;\n\tfor (int i=1;i<=n;++i)\tlg[i]=lg[i>>1]+1;\n\tfor (int i=2;i<=n;++i){\n\t\tcin>>u>>v>>val;\n\t\tif (u==1||v==1)\t++num;\n\t\tadd(u,v,val),add(v,u,val);\n\t}\n\tcin>>m;\n\tif (m<num)\treturn printf(\"-1\\n\"),0;\n\tfor (int i=1;i<=m;++i) cin>>u,++hav[u];\n\n\tdfs(1);\n\n\tr<<=1;\n\twhile (l<r){\n\t\tmid=(l+r)/2;\n\t\tif (check())\tr=mid;\n\t\telse\tl=mid+1;\n\t}\n\n\tprintf(\"%lld\\n\",l);\n\treturn 0;\n}\n\n```\n\n>\u5982\u6709\u54ea\u91cc\u8bb2\u5f97\u4e0d\u662f\u5f88\u660e\u767d\u6216\u662f\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u6307\u6b63\n\n\n",
        "postTime": 1571837808,
        "uid": 89048,
        "name": "Morning_Glory",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u590d\u6742\u7a0b\u5ea6\u5b9e\u5c5e\u5389\u5bb3 \u601d\u8def-\u5bf9\u4e8e\u4e00\u4e2a\u519b\u961f\uff0c\u4ed6\u8981\u4e48\u7ed9\u5b9a\u7684\u65f6\u95f4\u5185\u8d70\u5230\u8be5\u5b50\u6811\u9876(1\u6839\u4e4b\u4e0b\u4e00\u4e2a)\u6216\u8005\u901a\u5173\u68391\u8d70\u5230\u5176\u4ed6\u5b50\u6811\u9876\uff0c\u5982\u679c\u6709\u8db3\u591f\u65f6\u95f4\uff0c\u8fd9\u6837\u7684\u65b9\u6848\u4e4b\u4e00\u4e00\u5b9a\u6700\u4f18\uff0c\u6240\u4ee5\u4e3b\u8981\u5c31\u662f\u5904\u7406\u8fd9\u4e24\u4e2a\uff0c\u6211\u5bfb\u601d\u8fd9\u4e00\u70b9\u5176\u4ed6\u9898\u89e3\u6ca1\u8bf4\u660e\u767d \u4e0b\u9762\u7ed9\u51fa\u505a\u6cd5\u4e0e\u8bc1\u660e \n\u5bf9\u4e8e\u5230\u4e3b\u6839\u7684\u519b\u961f\uff0c\u5bf9\u5176\u5269\u4f59\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u5176\u5269\u4f59\u65f6\u95f4\u5c0f\u4e8e\uff01\u7b49\uff01\uff08\u7279\u522b\u5f3a\u8c03\uff09\u4e8e\u5176\u5230\u539f\u672c\u5b50\u6811\u9876\u65f6\u95f4\u4e14\u8be5\u5b50\u6811\u9700\u8981\u519b\u961f\uff0c\u5c31\u8ba9\u5176\u76d6\u4f4f\u5176\u539f\u5b50\u6811\u9876\u3002\n------------\n\u8bc1\u660e\uff1a\u5982\u679c\u8fd9\u4e2a\u519b\u961f\u4e0d\u53bb\u7684\u8bdd\u4e00\u5b9a\u6709\u5269\u4f59\u65f6\u95f4\u6bd4\u8fd9\u4e2a\u519b\u961f\u591a\u7684\u6765\u5c1d\u8bd5\u963b\u65ad\uff0c\u800c\u591a\u4e86\u4e00\u4e2a\u5269\u4f59\u65f6\u95f4\u8f83\u5c11\u7684\u519b\u961f\uff08\u54ea\u6015\u53e6\u5916\u4e00\u4e2a\u4e5f\u662f\u539f\u5b50\u6811\u7684\uff09\uff0c\u6240\u4ee5\u8fd9\u6837\u5c31\u660e\u663e\u4e0d\u5229\u603b\u4f53\u963b\u65ad\u3002\n\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e8c\u5206O(logn)\uff0c\u500d\u589e\u5224\u65adO(nlogn)\uff0c\u5c31\u53ef\u4ee5\u5728O(nlog\u00b2n)\u65f6\u95f4\u89e3\u51b3\u672c\u9898.\n\u7ecf\u603b\u7ed3 \u67094\u79cd(lca)\u4e00\u79cd\u6734\u7d20lca \u8fd8\u6709\u4e24\u4e2a\u6c42\u4e24\u70b9\u6700\u5927\u503c\u6700\u5c0f\u503c\u7684lca(\u89c1\u8d27\u8f66\u8fd0\u8f93)\uff0c\u8fd8\u6709\u8fd9\u9898\u7684\u6c42\u8fb9\u6743\u548c\u7684lca\u4e86\n\u8fd8\u6709\u4e24\u4e2a\u5751\u70b9\n1.r\u8bbe\u4e3a\u8fdc\u5927\u4e8e50000\u7684\u6570\u3002\n2.\u5728check\u4e2d\u6700\u597d\u5224\u65ad\u52301\u7684\u70b9<\u8981\u963b\u65ad\u7684\u70b9\u65f6return 0\u7684\u60c5\u51b5\uff0c\u6211\u7684\u4ee3\u7801\u4f1a\u51fa\u9505- -\uff0c\u4f46\u662f\u5e0c\u671b\u8bf8\u4f4d\u6253\u7684\u6ca1\u6709\u3002\n\u8fd8\u6709\u4e00\u70b9\u4e0d\u77e5\u9053\u8981\u4e0d\u8981\u8bf4 \u5728\u5224\u65ad\u4ece\u6839\u56de\u5b50\u6811\u9876\u7684\u65f6\u5019\uff0c\u6700\u597d\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\u6765\u8868\u793a\u4ed6\u7684\u5269\u4e0b\u80fd\u52301\u7684\u519b\u961f\uff0c\u5426\u5219\u505a\u8d77\u6765\u7528\u6570\u7ec4\u6bd4\u8f83\u9ebb\u70e6\uff0c\u9884\u8ba1\u7528\u94fe\u8868\u4f1a\u5f88\u65b9\u4fbf\uff0c\u65e0\u5948\u672c\u4eba\u5b9e\u5728\u65e0\u80fd\u638c\u63e1\u6b64\u7b49\u590d\u6742\u6307\u9488\u3002\n\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u6211\u7684\u7a0b\u5e8f\u8bf4\u5b9e\u8bdd\u90fd\u662f\u4e00\u4e9b\u57fa\u7840\u8bed\u6cd5\u5e94\u8be5\u5404\u4f4d\u6ca1\u4ec0\u4e48\u56f0\u96be\u770b\u61c2\n\n\u4ee3\u7801:\n```\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nstruct z{\nint pt,w;\t\n}sw[50001];\nll sign,las[50001],dis[50001][21];\nint orz,vt[50001],k1,cnt,reach[50001],du[50001],suck[50001],rot[50001],snd[50001],jp[50001],ar[50001],tp[50001],m,d[50001],p[50001][21],k,n,head[200010];\nstruct p{\n    int v,w,next;\n}st[100051];\nstruct qq{\n    int v;\n}st1[100001];\nstruct q{\n    int older,biao,v,s,el;\n}ed[50001];\nint add(int a,int b,int c){\nst[++k].v=b;\nst[k].w=c;\nst[k].next=head[a];\nhead[a]=k;\t\n}\nint cmp(z a,z b)\n{\n    return a.w>b.w;\n } \n int cmp2(q a,q b){\n \treturn a.v<b.v;\n }\n int cmp3(qq a,qq b){\n \treturn a.v>b.v;\n }\nint dfs(int u,int fa,ll we)\n{\nd[u]=d[fa]+1;\np[u][0]=fa;\ndis[u][0]=we;\nfor(int i=1;(1<<i)<d[u];i++)\n{\np[u][i]=p[p[u][i-1]][i-1];\ndis[u][i]=dis[p[u][i-1]][i-1]+dis[u][i-1];\n    //printf(\"%d %d %d\\n\",u,i,dis[u][i]);\n    }\n    for(int i=head[u];i;i=st[i].next){\n        int v=st[i].v;\n        if(v==fa)continue;\n        dfs(v,u,st[i].w);\n    }\t\n}\nint dfs2(int u){\n    //printf(\"%d %d\\n\",u,d[u]);\n    if(d[u]==2){\n        return u;\n    }\n    for(int i=head[u];i;i=st[i].next){\n        int v=st[i].v;\n        if(d[v]==d[u]-1)return dfs2(v);\n    }\n}\nint dfs3(int u){\n    //printf(\"%d\\n\",u);\n    if(suck[u])return 0;\n    if(du[u]==1){\n        sign=1;return 0;\n    }\n    for(int i=head[u];i;i=st[i].next){\n        int v=st[i].v;\n        if(d[v]==d[u]+1)\n        dfs3(v);\n    }\n}\nint check(int lim){\n    for(int i=1;i<=50000;i++)\n    ed[i].v=0;\n    memset(reach,0,sizeof(reach));\n    memset(suck,0,sizeof(suck));\n    memset(ar,0,sizeof(ar));\n    for(int i=1;i<=m;i++)\n    jp[i]=tp[i];\n    k1=0;\n    orz=0;\nfor(int i=1;i<=m;i++){\n    int k=lim;\n    for(int j=20;j>=0;j--){\n        if(dis[jp[i]][j]<=k){\n            k-=dis[jp[i]][j];\n            jp[i]=p[jp[i]][j];\n                        //printf(\"%d %d\\n\",jp[i],j);\n        }\n                if(jp[i]==1){\n                k1++,ed[k1].biao=k1,ed[k1].v=k,las[i]=k;\n                ed[k1].older=snd[tp[i]];\n                ed[k1].el=vt[snd[tp[i]]];//printf(\"%d %d %d\\n\",k1,ed[k1].el,ed[k1].v);\n            ar[i]=1;\n            break;\n        }\n    }\n}for(int i=1;i<=m;i++){\n   // printf(\"--%d\\n\",jp[i]);\n    suck[jp[i]]=1;}\n    suck[1]=0;\n    for(int i=1;i<=cnt;i++){\n        sign=0;\n        //printf(\"%d \",sw[i].pt);\n        dfs3(sw[i].pt);\n        if(sign){\n        reach[sw[i].pt]=1;orz++;} \n        //printf(\"%d %d-\\n\",sw[i].pt,reach[sw[i].pt]);\n        //printf(\"%d %d\",sw[i].pt,reach[sw[i].pt]);\n    }\n    if(k1<orz)return 0;\n    int k2=0;\n    sort(ed+1,ed+k1+1,cmp2);\n    for(int i=1;i<=k1;i++)\n    {\n    if(ed[i].v<=ed[i].el&&reach[ed[i].older]){\n    reach[ed[i].older]=0;\t\n    }\n    else{\n        k2++;\n        st1[k2].v=ed[i].v;\n    }\t\n    }\n    //for(int i=1;i<=k2;i++)\n    //printf(\"%d\\n\",st1[i].v);\n    //for(int i=1;i<=k1;i++)\n    //printf(\"%d %d %d %d %d\\n\",ed[i].biao,ed[i].el,ed[i].older,ed[i].s,ed[i].v);\n    sort(st1+1,st1+k2+1,cmp3);\n    //for(int i=1;i<=k2;i++)\n    //printf(\"%d\\n\",st1[i]);\n    //for(int i=1;i<=k1;i++)\n    //printf(\"%d %d %d %d\\n\",ed[i].biao,ed[i].el,ed[i].older,ed[i].v);\nint aim=0;\nfor(int i=1;i<=cnt;i++){\n        //printf(\"%d %d %d\\n\",reach[sw[i].pt],sw[i].pt,sw[i].w);\nif(reach[sw[i].pt]){\naim++;\n//printf(\"%d %d\\n\",sw[i].pt,reach[sw[i].pt]);\nif(st1[aim].v<sw[i].w)\n    return 0;\n}\t\n}\n    return 1;\n//for(int i=1;i<=m;i++)\n//printf(\"%d \",ar[i]);\t\n}\nint main()\n{\n    memset(dis,0x3f,sizeof(dis));\n    int a,b,c;\n    cnt=0;\nscanf(\"%d\",&n);\nfor(int i=1;i<n;i++){\n    scanf(\"%d%d%d\",&a,&b,&c);\n    if(b<a)swap(a,b);\n    add(a,b,c);\n    add(b,a,c);\n    du[a]+=1,du[b]+=1;\n    //printf(\"%d %d %d\\n\",a,b,c);\n    if(a==1){\n        vt[b]=c;\n        cnt++;\n        sw[cnt].pt=b;\n        sw[cnt].w=c;\n        //printf(\"%d %d %d\\n\",cnt,sw[cnt].pt,sw[cnt].w);\n    }\n}\nsort(sw+1,sw+1+cnt,cmp);\ndfs(1,0,0);\nscanf(\"%d\",&m);\nfor(int i=1;i<=m;i++){ \nscanf(\"%d\",&tp[i]);\tsnd[tp[i]]=dfs2(tp[i]);\n//printf(\"snd%d\\n\",snd[i]); \n}\nint l=0,r=150001;\nwhile(l<=r){\n    int mid=(l+r+1)/2;\n    if(check(mid))r=mid-1;\n    else l=mid+1;\n}\ncout<<l;\n//for(int i=1;i<=n;i++)   \n//printf(\"%d \",suck[i]); \n}```",
        "postTime": 1534956672,
        "uid": 56803,
        "name": "VPYEKINDAR",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\n### \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlogn)$\n\n\u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u7528\u500d\u589e\u53cclog\u4e86\u5462\uff1f\uff08\u867d\u7136\u6211\u4e00\u5f00\u59cb\u4e5f\u56e0\u4e3a$n<=50000$\u4ee5\u4e3a\u53ea\u80fd\u53cclog\uff09\n\n\u53d1\u73b0\u6709\u7684\u65f6\u5019\u6211\u4eec\u7684\u601d\u7ef4\u88ab\u6570\u636e\u7ed3\u6784\u7981\u9522\u4e86\uff0c\u518d\u4e00\u770b\u6570\u636e\u8303\u56f4\uff0c\u4e00\u60f3\u6811\u4e0a\u500d\u589e\u80fd\u505a\u5c31\u9a6c\u4e0a\u53bb\u4e86\uff0c\u5176\u5b9e\u76f4\u63a5\u8d2a\u5fc3\u5c31\u884c\n\n~~\u8fd8\u6709\u6211\u5bf9\u7740\u4e00\u68f550\u7684\u6811\u786c\u624b\u8c03\u4e00\u4e2a\u5c0f\u65f6\uff0c\u6700\u540e\u53d1\u73b0\u4e00\u53e5\u8bdd\u5199\u9519\u4f4d\u7f6e\u662f\u4ec0\u4e48\u9b3c\u5440~~\n\n\u8d2a\u5fc3\u57fa\u4e8e\u4e09\u4e2a\u6027\u8d28\uff1a\n\n1. \u6240\u6709\u519b\u961f\u5982\u679c\u6ca1\u6709\u5230\u6839\u8282\u70b9\uff0c\u80fd\u5f80\u4e0a\u8d70\u591a\u5c11\u5c31\u8d70\u591a\u5c11\n\n2. \u519b\u961f\u5982\u679c\u5fc5\u987b\u8de8\u8fc7\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u53ea\u4f1a\u518d\u5f80\u4e0b\u4e00\u4e2a\u8282\u70b9\n\n\u8fd9\u4e24\u4e2a\u6027\u8d28\u663e\u800c\u6613\u89c1\uff0c\u7701\u53bb\u4e00\u4e2alog\u7684\u662f\u6700\u540e\u4e00\u6761\u6027\u8d28\n\n3. \u5982\u679c\u519b\u961f\u5230\u4e0d\u4e86\u6839\u8282\u70b9\uff0c\u6211\u5176\u5b9e\u5e76\u4e0d\u5173\u5fc3\u5b83\u6709\u51e0\u652f\uff0c\u53ea\u5173\u5fc3\u5b83\u6700\u591a\u80fd\u8d70\u591a\u9ad8\n\n\n\n------------\n\n\n\u601d\u8def\u5df2\u7ecf\u5199\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u4ee3\u7801\u8fd8\u6709\u8be6\u5c3d\u7684\u6ce8\u91ca\u6765\u89e3\u91ca\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\uff1a\n\n1. \u628a\u6240\u6709\u519b\u961f\u6309\u79bb1\u53f7\u8282\u70b9\u8fdc\u8fd1\u6392\u5e8f\uff0c\u6807\u8bb0\u519b\u961f\u6240\u5c5e\u5206\u652f\uff0c\u628a1\u53f7\u8282\u70b9\u5468\u56f4\u6240\u6709\u513f\u5b50\u6309\u8fb9\u7684\u5927\u5c0f\u6392\u5e8f $O(nlogn)$\n\n2. $0-2^{55}$\u4e8c\u5206\n\n3. \u4ece\u8fd1\u5230\u8fdc\u679a\u4e3e\u519b\u961f\uff0c\u5982\u679c\u5230\u4e0d\u4e86\u8bb0\u6b64\u9650\u5ea6\u4e3alim\uff0c\u540c\u65f6\u66f4\u65b0\u5f53\u524d\u54ea\u4e9b\u6839\u7684\u5206\u652f\u62e5\u6709\u54ea\u53ea\u6700\u5dee\u519b\u961f $O(n)$\u590d\u6742\u5ea6\n\n4. \u904d\u5386\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\u7684\u513f\u5b50\uff0c\u6311\u51fa\u5bf9\u4e8e\u5f53\u524d\u53ef\u7ee7\u7eed\u7684\u5927\u4e8elim\u7684\u6700\u4f18\u503c\u4f20\u56de\uff0c\u8ba1\u7b97\u54ea\u4e9b\u6839\u7684\u5206\u652f\u4e0d\u7528\u8003\u8651 $O(n)$\u590d\u6742\u5ea6\n\n6. 1\u53f7\u70b9\u7684\u8fb9\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5982\u679c\u4e0d\u7528\u8003\u8651\u76f4\u63a5\u8df3\u8fc7\uff0c\u5426\u5219\u5982\u6709\u6807\u8bb0\u519b\u961f\u76f4\u63a5\u5e94\u7528\u5e76\u5220\u9664\uff0c\u5982\u6ca1\u6709\u7528\u7ef4\u62a4\u7684\u6307\u9488\u770b\u5f53\u524d\u519b\u961f\u662f\u5426\u53ef\u884c $O(n)$\u590d\u6742\u5ea6\n\n\u5171O(55n)\n\n## \u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <stdio.h>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nconst int N=1e5+50;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nconst ll INF=(1ll<<56);\nstruct Node{\n\tint t,w;\n\tNode(){}\n\tNode(int a,int b){t=a,w=b;}\n};\nint n,m;\nvector<Node> gg[N];\nvector<int> zhuar[N];\nint ar[N],bl[N],arbl[N],hav[N];\nll dis[N];\nbool ne[N],vis[N];\n\nbool cmpforbi(Node x,Node y){ return x.w<y.w;}\nbool cmpforar(int x,int y){ return dis[x]<dis[y];}\n\nvoid Init(){\n\tfor(int i=1;i<=n;i++) hav[i]=0;\n\tfor(int i=1;i<=m;i++) vis[i]=0;\n}\n\nll dfs_check(int now,int pre,int lim,ll x) //INF\u4ee3\u8868\u867d\u7136\u5b50\u6811\u91cc\u7684\u519b\u961f\u8d70\u4e0d\u4e0a\u6765\u4e86\uff0c\u4f46\u5230\u8fb9\u5883\u6bcf\u4e00\u6761\u8def\u90fd\u5c01\u4e86\uff0c-1\u4ee3\u8868\u5230\u8fb9\u5883\u7684\u8def\u5c01\u4e0d\u5168\uff0c\u5176\u4ed6\u7684\u8fd4\u56de\u503c\u4ee3\u8868\u4ece\u5b50\u6811\u5347\u4e0a\u6765\u7684\u6700\u5c0f\u4ee3\u4ef7\n{\n\tll ret=INF;\n\tint sddz=zhuar[now].size();\n\tfor(int i=0;i<sddz && now!=1;i++)\n\t\tif(zhuar[now][i]>lim)\n\t\t\treturn 0;\n\tint sz=gg[now].size();\n\tif(sz==1 && now!=1) return -1;\n\tbool ok=0,ok2=1;\n\tfor(int i=0;i<sz;i++){\n\t\tint nex=gg[now][i].t;\n\t\tif(nex==pre) continue;\n\t\tll len=gg[now][i].w,jie=dfs_check(nex,now,lim,x);\n\t\tif(jie>=0 && jie+len<=x) ok=1;\n\t\tif(jie<0) ok2=0; \n\t\tif(jie>=0)\n\t\t\tret=min(jie+len,ret);\n\t\tif(now==1){\n\t\t\tif(jie>=0) ne[nex]=1;\n\t\t\telse ne[nex]=0;\n\t\t}\n\t}\n\tif(ok || ok2) return ret;\n\treturn -1;\n}\n\nbool check(ll x){\n\tInit();\n\tint lim=0;\n\tfor(int i=1;i<=m;i++){\n\t\tif(dis[ar[i]]>x) break;\n\t\thav[arbl[i]]=i;\n\t\tlim=i;\n\t}\n\tdfs_check(1,-1,lim,x); //\u5373\u5904\u7406\u5230\u4e0d\u4e86\u6839\u7684\u519b\u961f\u6700\u591a\u80fd\u5c01\u6839\u7684\u54ea\u4e9b\u5206\u652f\u7684\u8def\n\tint sz=gg[1].size(),k=1;\n\tfor(int i=sz-1;i>=0;i--)\n\t{\n\t\twhile(k<=lim && vis[k]) k++;\n\t\tint nex=gg[1][i].t;\n\t\tll len=gg[1][i].w;\n\t\tif(ne[nex]) continue;\n\t\tif(hav[nex]>=k){\n\t\t\tvis[hav[nex]]=1;\n\t\t\tcontinue;\n\t\t}\n\t\tif(k>lim || dis[ar[k]]+len>x) return 0; //\u6700\u4f18\u7684\u519b\u961f\u90fd\u5c01\u4e0d\u4e86\uff0c\u540e\u9762\u5c31\u6ca1\u6709\u5c01\u5f97\u4e86\u7684\u519b\u961f\uff0c\u8fd9\u6761\u5206\u652f\u5904\u7406\u4e0d\u4e86\u5176\u4ed6\u7684\u4e5f\u4e0d\u7528\u8003\u8651\u4e86\n\t\tvis[k]=1;\n\t}\n\treturn 1;\n}\n\nvoid dfs(int now,int pre,int bll){\n\tint sz=gg[now].size();\n\tfor(int i=0;i<sz;i++){\n\t\tint nex=gg[now][i].t;\n\t\tll len=gg[now][i].w;\n\t\tif(nex==pre) continue;\n\t\tdis[nex]=dis[now]+len;\n\t\tif(now==1) bll=nex;\n\t\tbl[nex]=bll;\n\t\tdfs(nex,now,bll);\n\t}\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint ui,vi,wi;\n\t\tscanf(\"%d%d%d\",&ui,&vi,&wi);\n\t\tgg[ui].push_back((Node){vi,wi});\n\t\tgg[vi].push_back((Node){ui,wi});\n\t}\n\tsort(gg[1].begin(),gg[1].end(),cmpforbi); //\u65b9\u4fbf\u8d2a\u5fc3\n\tdfs(1,-1,-1);\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d\",&ar[i]);\n\tsort(ar+1,ar+1+m,cmpforar);\n\tfor(int i=1;i<=m;i++){\n\t\tarbl[i]=bl[ar[i]]; //\u6bcf\u652f\u519b\u961f\u5c5e\u4e8e\u6839\u7684\u54ea\u4e2a\u5206\u652f\n\t\tzhuar[ar[i]].push_back(i); //\u6bcf\u4e2a\u8282\u70b9\u9a7b\u6709\u54ea\u4e9b\u519b\u961f\n\t}\n\tll l=0,r=(1ll<<55);\n\twhile(l<r){\n\t\tll mid=((l+r)>>1);\n\t\tif(check(mid)) r=mid;\n\t\telse l=mid+1;\n\t}\n\tif(l>r || !check(l)) printf(\"-1\\n\");\n\telse printf(\"%lld\\n\",l);\n\treturn 0;\n}\n```",
        "postTime": 1569863938,
        "uid": 41271,
        "name": "\u59a9\u5a9a\u7684ak\u841d\u8389",
        "ccfLevel": 9,
        "title": "NOIPD2T3\u75ab\u60c5\u63a7\u5236\uff08\u4e8c\u5206+\u8d2a\u5fc3\uff09"
    },
    {
        "content": "# \u8d2a\u5fc3\u795e\u9898\n## \u514d\u8d23\u58f0\u660e\uff0c\u4ee5\u4e0b\u4e3a\u4e2a\u4eba\u6709\u9650\u7684\u7406\u89e3\uff0c\u6b63\u786e\u884c\u4e0d\u80fd100%\u4fdd\u8bc1\uff0c\u5982\u6709hack\u79c1\u4fe1\u7a9d\n***Ps\uff1a80pts\u88abhack\u7684\u6211\u65e0\u6bd4\u5f00\u5fc3\uff08\u64cd\uff01\uff01\uff01\uff01***\n\n***\u50bb\u903c\u9519\u8bef\u96c6\u4e2d\u9898\uff0c\u6211\u6015\u4e0d\u662f\u50bb\u903c\u672c\u50bb***\n\n## \u9996\u5148\u6e05\u695a\u6211\u4eec\u7684\u50bb\u903c\u9519\u8bef:\n**1\uff1a**\n```cpp\nwhile(!q1.empty()&&!q2.empty()){\n\t\tNode x = q1.top();\n\t\tNode y = q2.top();\n\t\tvis[x.pos]--;\n\t\tint tmp = bound(x.pos,root);\n\t\tvis[x.pos]++;\n\t\tif(tmp){\n\t\t\tif(x.val>=y.val){\n\t\t\t\tq1.pop();\n\t\t\t\tq2.pop();\n\t\t\t\tvis[x.pos]--;\n\t\t\t\tvis[y.pos]++;\n\t\t\t}\n\t\t\telse q1.pop();//\u8fd9\u5730\u65b9\u5fd8\u4e86pop\uff08\uff09\u6b7b\u5faa\u8c03\u4e861.5\n\t\t}\n\t\telse q1.pop();\n\t}\n```\n**2\uff1a**\n\u6700\u5f00\u59cb\u53ea\u5728$root$\u7684$Son$\u4e0a\u7edf\u8ba1$vis$\u7684\u503c\uff0c\u6ca1\u60f3\u597d\n\n**3\uff1a** 80$pts$\u88ab$hack$\u771f\u5b9e\u7684\u8fc7\u5206\u3002\n\n**\u4f5c\u4e3a\u4e00\u9053D2T\u7684\u8d2a\u5fc3\u9898\u5c5e\u5b9e\u4e0d\u9519\uff0c\u8d2a\u5fc3\u7b56\u7565\u975e\u5e38\u5bb9\u6613\u51fa\u9505\uff0c\u4f46\u56e0\u4e3a\u5176\u4ed6\u88abhack\u7684\u8d2a\u5fc3\u7b56\u7565\u7684\u6b63\u786e\u884c\u5728\u4e0d\u6784\u9020\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u88ab\u6c34\u8fc750pts\u523080pts\u7684\u5206\u6570\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u9053\u5f88\u597d\u7684\u8d2a\u5fc3\u548c\u4e8c\u5206\u500d\u589e\u7684\u7ec3\u624b\u9898\uff0c\u540c\u4e5f\u53ef\u4ee5\u4e3a\u521d\u5b66\u6811\u5f62Dp\u7684\u540c\u5b66\uff0c\u4e00\u4e2a\u5178\u578b\u4e0d\u80fd\u8fdb\u884cDp\u7684\u4f8b\u5b50\u3002**\n## \u9898\u76ee\u90e8\u5206~\n[\u9898\u9762](https://www.luogu.org/problem/P1084)\n\n\u8bfb\u8fc7\u9898\u76ee\u4e4b\u540e\uff0c\u53ef\u80fd\u6bd4\u8f83\u663e\u773c\u7684\u5c31\u662f$ans$\u662f\u5bf9\u6240\u6709\u519b\u961f\u7684\u884c\u8fdb\u65f6\u95f4\u53d6$Max$\uff0c\u81f3\u4e00\u70b9\u53ef\u8c13\u662f\u6bd4\u8f83\u8ba9\u4eba\u8d77\u601d\u8def\u7684\uff0c\u6211\u4eec\u5c31\u6709\u4e24\u4e2a\u65b9\u5411\u53bb\u8003\u8651\u95ee\u9898\uff0c\u4e00\u4e2a\u662f~~\u79d2\u5929\u79d2\u5730\u79d2\u7a7a\u6c14~~\u7684\u6811\u5f62$Dp$,\u4e00\u4e2a\u662f\u6bd4\u8f83\u6d41\u6c13\u66b4\u529b\u7684\u4e8c\u5206\u505a\u6cd5\u3002\n\n\u4ed4\u7ec6\u601d\u8003\u4e4b\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u6811\u5f62Dp\u7684\u8f6c\u79fb\u5fc5\u8981\u5bf9\u5b50\u6811\u53d6$Max$\u4f46\u662f\u6211\u4eec\u53c8\u8981\u6c42\u6700\u5c0f\u503c\uff0c\u867d\u7136\u849f\u84bb\u89c1\u8fc7\uff0c\u4f7f\u6700\u5927\u503c\u6700\u5c0f\u7684Dp\u4f46\u662f\uff0c\u6211\u4eec\u96be\u4ee5\u53bb\u53d1\u73b0\u4e00\u4e2a\u6709\u6548\u7684\u7ed9Dp\u5212\u5b9a\u95ee\u9898\u7a7a\u95f4\u53bb\u6c42\u6700\u5c0f\u503c\u7684\u65b9\u6cd5\u3002\n\n\u4e8e\u662f**\u8fd9\u9053\u9898\u4e0a\uff0c\u5173\u4e8e\u6811\u5f62Dp\uff0c\u5b83\u6b7b\u4e86**\n\n\u90a3\u5c31\u4e8c\u5206\u5457\uff0c\u6211\u4eec\u518d\u6b21\u4ed4\u7ec6\u601d\u8003\u4e4b\u540e\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e2a\u519b\u961f\u5411\u4e0b\u884c\u8fdb\u662f\u5b8c\u5168\u4e0d\u4f18\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53bb\u9009\u62e9\u4e8c\u5206\u4e00\u4e2a\u8def\u7a0b\uff0c\u7136\u540e\u500d\u589e\u5411\u4e0a\u8df3\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u5224\u65ad\u5c31\u662f\u66b4\u529b\u7684\u53bb$dfs$\uff0c\u8fd9\u662f\u5728\u6211\u4eec\u7684\u70b9\u4e0d\u53bb\u8d8a\u8fc7\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u662f\u4e2aSb\u9898\uff0c\u4f46\u662f\u5728\u8d8a\u8fc7\u6839\u8282\u70b9\u503c\u540e\uff0c\u6e38\u620f\u624d\u521a\u521a\u5f00\u59cb\uff0c\u6b7b\u90fd\u662f\u6b7b\u5728\u6839\u8282\u70b9\u4e4b\u540e\u7684\u5904\u7406\u4e0a\u3002\n\n**\u6211\u4eec\u5217\u51fa\u6839\u8282\u70b9\u4e4b\u540e\u7684\u51e0\u79cd\u5904\u7406\uff0c\u91cc\u9762\u6ca1\u6709\u5217\u4e3e\u53ef\u4ee5\u76f4\u63a5\u4e71\u641e\u8fc7\u53bb\u7684\uff0c\u6bd5\u7adf\u4e71\u641e\u662f\u7384\u5b66\uff0c\u5176\u5b9e\u4e71\u641e\u7684\u672c\u8d28\u5c31\u662f\u4f60\u6bd4\u51fa\u9898\u4eba\u60f3\u7684\u8981\u4e30\u5bcc\uff0c\u5728\u51fa\u9898\u4eba\u7684\u4e3b\u89c2\u9650\u5236\u4e4b\u4e0b\u53ef\u4ee5\u901a\u8fc7\uff0c\u5bf9\u4e8e\u8003\u8bd5\u6765\u8bf4\u8fd9\u6837\u5c31\u8db3\u591f\u4e86\uff0c\u4f46\u5bf9\u4e8e\u5e73\u65f6\u505a\u9898\u6211\u4eec\u8fd8\u662f\u8003\u8651\u7684\u5c3d\u53ef\u80fd\u7684\u5468\u5168\u3002**\n\n**1:\u9996\u5148\u849f\u84bb\u7684\u7b2c\u4e00\u4e2a\u8d2a\u5fc3\u7684\u601d\u8def\u5c31\u662f\u8df3\u8fc7\u8ddf\u8282\u70b9\u7684\u90fd\u5728\u81ea\u5df1\u7684\u5b50\u6811\u6839\u4e0a\u7ed9\u6807\u8bb0$++$,\u4e4b\u540e\u6211\u4eec\u7528\u4e24\u4e2a\u5c0f\u6839\u5806\u53bb\u5206\u522b\u5b58\uff0c\u9700\u8981\u522b\u4eba\u586b\u5751\u7684\uff0c\u548c\u81ea\u5df1\u8df3\u8fc7\u6839\u8282\u70b9\u7684\u3002\u6211\u4eec\u5148\u628a\u6839\u8282\u70b9\u7684\u6807\u8bb0\u505a\u4e00\u4e2a$Sum$,\u76f4\u63a5\u7528\u4e24\u4e2a\u5806\u4e92\u76f8\u5f39\u4e00\u4e0b,\u7528\u4e24\u4e2a\u5806\u7684$Size$\u548c$Sum$\u76d8\u4e00\u4e0b\u5c31\u884c\u4e86\u3002**\n```cpp\nvoid jump(int mid){\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=m;i++){\n\t\tint x = armypos[i],temp = mid;\n\t\tif(x!=root)\n\t\tvis[x] ++;\n\t\tfor(int j=16;j>=0;j--){\n\t\t\tif(temp>=g[x][j]&&f[x][j]!=root)temp -= g[x][j],x = f[x][j],vis[x]++;\n\t\t}\n\t\tif(f[x][0]==root&&temp>rootSonVal[x])q1.push(temp-rootSonVal[x]);\n\t}\n}\nbool Solve(int mid){\n\twhile(!q1.empty())q1.pop();\n\twhile(!q2.empty())q2.pop();\n\tjump(mid);\n\tif(judge(root,root))return true;\n\tint cnt = 0,Sum = 0;\n\tfor(int i=0;i<E[root].size();i++){\n\t\tint to = E[root][i].to;\n\t\tif(!judge(to,root))q2.push(E[root][i].val);\n\t\telse {\n\t\t\tSum += vis[to];\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif(q1.empty())return false;\n\twhile(!q1.empty()&&!q2.empty()){\n\t\tint x = q1.top(),y = q2.top();\n\t\tif(x>=y){\n\t\t\tq1.pop();q2.pop();\n\t\t}\n\t\telse {\n\t\t\tq1.pop();\n\t\t}\n\t\tSum--;\n\t}\n\tif(q2.empty()&&Sum>=cnt)return true;\n\treturn false;\n}\n```\n[50pts](https://www.luogu.org/record/24107149)\n\n***\u4e8e\u662f\u6211\u5f97\u5230\u4e86$50pts$\u7684\u597d\u6210\u7ee9\uff08WTF***\n\u5176\u5b9e\u5927\u4f6c\u4eec\u7528\u811a\u60f3\u4e00\u4e0b\u5c31\u662f\u5230\u8fd9\u662f\u9519\u7684\uff0c\u5f88\u663e\u7136\u6211\u4eec\u7684\u5b50\u6811\u5c01\u9501\uff0c\u4e0d\u4e00\u5b9a\u8981\u9760\u8df3\u8fc7\u6839\u8282\u70b9\u7684\u540c\u5fd7\u53bb\u5c01\uff0c\u5f88\u6709\u53ef\u80fd\u4e0b\u9762\u7684\u540c\u5fd7\u5df2\u7ecf\u628a\u5b50\u6811\u5c01\u9501\u4e86\u3002\n\n**2:\u4e8e\u662f\u849f\u84bb\u5728$50pts$\u7684\u57fa\u7840\u4e0a\u5199\u4e86\u9a97\u81ea\u5df1\u7684$80pts$\u7b97\u6cd5\uff0c\u4e8e\u662f\u6211\u7684\u601d\u8def\u57fa\u4e8e\u4e4b\u524d\uff0c\u8ba4\u4e3a\u8d8a\u8fc7\u6839\u8282\u70b9\u7684\u519b\u961f\uff0c\u53bb\u5e2e\u522b\u4eba\u5c01\u9501\u7684\u6761\u4ef6\u662f\u81ea\u5bb6\u5df2\u7ecf\u5904\u7406\u597d\u4e86\uff0c\u5373\u5728\u6ca1\u6b21$pop()$\u4e4b\u524d\u6211\u4eec\u73b0\u5224\u4e00\u4e0b\u8fd9\u4e2a\u519b\u961f\u80fd\u4e0d\u80fd\u8d70\u3002\u4f46\u662f\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\uff0c\u5176\u5b9e\u672c\u8eab\u662f\u671f\u671bTLE\uff0c\u4e0d\u66fe\u60f3\u81ea\u5df1\u5457hack\u4e86\uff0c\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u9519\u7684\u3002**\n```cpp\nvoid jump(int mid){\n\tmemset(vis,0,sizeof(vis));\n\tfor(int i=1;i<=m;i++){\n\t\tint x = apos[i],temp = mid;\n\t\tfor(int j=16;j>=0;j--){\n\t\t\tif(temp>=g[x][j]&&f[x][j]!=root)temp -= g[x][j],x = f[x][j];\n\t\t}\n\t\tvis[x]++;\n\t\tif(temp>rootSonVal[x]&&f[x][0]==root)q1.push(Node{x,temp-rootSonVal[x]});\n\t}\n}\nbool Solve(int mid){\n\twhile(!q1.empty())q1.pop();\n\twhile(!q2.empty())q2.pop();\n\tjump(mid);\n\tif(bound(root,root))return true;\n\tfor(int i=head[root];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tif(!bound(to,root))q2.push(Node{to,E[i].val});\n\t}\n\twhile(!q1.empty()&&!q2.empty()){\n\t\tNode x = q1.top();\n\t\tNode y = q2.top();\n\t\tvis[x.pos]--;\n\t\tint tmp = bound(x.pos,root);\n\t\tvis[x.pos]++;\n\t\tif(tmp){\n\t\t\tif(x.val>=y.val){\n\t\t\t\tq1.pop();\n\t\t\t\tq2.pop();\n\t\t\t\tvis[x.pos]--;\n\t\t\t\tvis[y.pos]++;\n\t\t\t}\n\t\t\telse q1.pop();\n\t\t}\n\t\telse q1.pop();\n\t}\n\tif(q2.empty()){\n\t\tfor(int i=head[root];i;i=E[i].nxt){\n\t\t\tint to = E[i].to;\n\t\t\tif(!bound(to,root))return false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n[80pts](https://www.luogu.org/record/24112713)\n\n**$80pts$\u8fd9$^{tm}$\u8ba9\u6211\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u4e86\uff0c\u4e4b\u540e\u6211\u5c31\u6eda\u53bb\u770b\u8ba8\u8bba\u8d34\u4e86\uff0c\u770b\u5230\u7ba1\u7406\u7684$hack$\u5fc3\u51c9\u4e86\u4e00\u534a\uff0c**\n\n![](https://cdn.luogu.com.cn/upload/pic/56560.png)\n\n**\u6211\u2122\u5fc3\u91cc\uff0c\u6211\u53bb\uff0c\u6211\u4eec\u519b\u961f\u8f6c\u79fb\u4e0d\u591f\u7075\u6d3b\uff0c\u4e8e\u662f\u6eda\u53bb\u770b\u4e86\u522b\u4eba\u7684\u9898\u89e3\u3002\u6211\u4eec\u5c31\u76f4\u63a5\u628a\u51fa\u53bb\u7684\u519b\u961f\u8ba9\u4ed6\u4eec\u4e0d\u7ba1\u81ea\u5df1\u7684\u5b50\u6811\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f97\u5230\u66f4\u4e3a\u4f18\u79c0\u7684\u89e3\u3002**\n\u4ee3\u7801\u5148\u4e0d\u4ed8\u4e86\uff0c\u6bd5\u7adf\u6284\u7684\u5927\u5927\u7684\u9898\u89e3\uff0c\u6211\u8fd9\u5c31\u6eda\u53bb\u5199\n# $update$\n## \u5199\u5b8c\u4e86\u5462\n***Code\uff1a***\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#define int long long \nusing namespace std;\nint read(){\n\tint w=1,x=0,ch=getchar();\n\tfor(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')w=-1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar())x=x*10+ch-'0';\n\treturn x*w;\n}\nconst int MAXN = (int)5e4+10;\nstruct Edge{\n\tint from,to,val,nxt;\n\tEdge(int from,int to,int val,int nxt){\n\t\tthis->from = from;\n\t\tthis->to = to;\n\t\tthis->val = val;\n\t\tthis->nxt = nxt;\n\t}\n\tEdge(){\n\t}\n}E[MAXN<<1];\nint head[MAXN],tot;\ninline void Add_Edge(int from,int to,int val){\n\tE[++tot] = Edge(from,to,val,head[from]),head[from] = tot;\n}\nint root = 1,n,m,g[MAXN][20],f[MAXN][20],vis[MAXN],army[MAXN],lea[MAXN];\nvoid dfs(int x,int pre){\n\tf[x][0] = pre;\n\tfor(int i=1;i<=17;i++){\n\t\tf[x][i] = f[f[x][i-1]][i-1];\n\t\tg[x][i] = g[f[x][i-1]][i-1]+g[x][i-1];\n\t}\n\tbool flag = true;\n\tfor(int i=head[x];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tif(to==pre)continue;\n\t\tflag = false;\n\t\tg[to][0] = E[i].val;\n\t\tdfs(to,x);\n\t}\n\tif(flag)lea[x] = true;\n\telse lea[x] = false;\n}\nbool judge(int x,int pre){\n\tif(vis[x])return true;\n\tif(lea[x])return false;\n\tfor(int i=head[x];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tif(to==pre)continue;\n\t\tif(!judge(to,x))return false;\n\t}\n\treturn true;\n}\nstruct Node{\n\tint pos,val;\n\tbool operator <(const Node &x)const{\n\t\treturn val>x.val;\n\t}\n};\nNode q1[MAXN],q2[MAXN];\nint minx[MAXN],id[MAXN],na,nb;\nvoid debug(int x,int pre){\n\tprintf(\"%lld %lld\\n\",x,vis[x]);\n\tfor(int i=head[x];i;i=E[i].nxt)\n\t{\n\t\tint to = E[i].to;\n\t\tif(to==pre)continue;\n\t\tdebug(to,x);\n\t}\n}\ninline void jump(int mid){\n\tna = nb = 0;\n\tfor(int i=1;i<=n;i++)minx[i] = vis[i] = 0;\n\tfor(int i=1;i<=m;i++)id[i] = 0;\n\tfor(int i=1;i<=m;i++){\n\t\tint x = army[i],temp = mid;\n\t\tfor(int j=17;j>=0;j--){\n\t\t\tif(f[x][j]!=root&&temp>=g[x][j])\n\t\t\ttemp -= g[x][j],x = f[x][j];\n\t\t}\n\t\tif(temp>=g[x][0]&&f[x][0]==root){\n\t\t\tq1[++na] = Node{i,temp-g[x][0]};\n\t\t\tif(!minx[x]||minx[x]>temp-g[x][0])minx[x] = temp-g[x][0],id[x] = i;\n\t\t}\n\t\telse {\n\t\t\tvis[x] = true;\n\t\t}\n\t}\n}\nbool used[MAXN];\ninline bool Solve(int mid){\n\tjump(mid);\n\tif(judge(root,root))return true;\n\tfor(int i=head[root];i;i=E[i].nxt){\n\t\tint to = E[i].to;\n\t\tif(!judge(to,root))q2[++nb] = Node{to,E[i].val};\n\t}\n\tsort(q1+1,q1+na+1);\n\tsort(q2+1,q2+nb+1);\n\tmemset(used,0,sizeof(used));\n\tused[0] = 1;\n\tint now = 1;\n\tif(judge(root,root))return true;\n\tfor(int i=1;i<=nb;i++){\n\t\tif(!used[id[q2[i].pos]]){\n\t\t\tused[id[q2[i].pos]]=true;\n\t\t\tcontinue;\t\n\t\t}\n\t\twhile(now<=na&&(used[q1[now].pos]||q1[now].val<q2[i].val))now++;\n\t\tif(now>na)return false;\n\t\tused[q1[now].pos] = true;\n\t}\n\treturn true;\n}\nint judge1 = 0;\nsigned main(){\n//\tfreopen(\"Testdata.in\",\"r\",stdin);\n//\tfreopen(\"Testout.out\",\"w\",stdout);\n\tn = read();\n\tint l = 0,r = 0;\n\tfor(int i=1;i<n;i++){\n\t\tint x = read(),y = read(),val = read();\n\t\tif(x==1||y==1)judge1++;\n\t\tAdd_Edge(x,y,val),Add_Edge(y,x,val);\n\t\tr += val;\n\t}\n\tm = read();\n\tif(judge1>m){\n\t\tprintf(\"-1\\n\");\n\t\treturn 0;\n\t}\n\tdfs(root,root);\n\tfor(int i=1;i<=m;i++){\n\t\tarmy[i] = read();\n\t}\n\tint ans = 0;\n\twhile(l<=r){\n\t\tint mid = l+r >> 1;\n\t\tif(Solve(mid))ans = mid,r = mid-1;\n\t\telse l = mid + 1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n# \u5b8c\u7ed3\u6492\u82b1",
        "postTime": 1568971243,
        "uid": 165030,
        "name": "Sweetie_Liu",
        "ccfLevel": 6,
        "title": "P1084 \u75ab\u60c5\u63a7\u5236"
    },
    {
        "content": "\u8fd9\u662fNOIP2012\u7684Day2T3  \n\u9898\u76ee\u7565\u70e6  \n\u6b63\u89e3\u505a\u6cd5\u662f\u6811\u4e0a\u500d\u589e+\u4e8c\u5206\u7b54\u6848+\u8d2a\u5fc3  \n\u5148\u6765\u8bb2\u4e00\u4e0b\u601d\u8def  \n\u9996\u5148\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u65f6\u95f4\u7136\u540echeck  \n\u5f88\u663e\u7136\u4e00\u4e2a\u519b\u961f\u5728\u7236\u4eb2\u8282\u70b9\u660e\u663e\u6bd4\u5728\u5b50\u8282\u70b9\u63a7\u5236\u7684\u6751\u5e84\u6570\u66f4\u591a   \n\u4e8e\u662f\u6211\u4eec\u5c31\u8003\u8651\u5728\u6709\u9650\u65f6\u95f4\u5185\u5c06\u6bcf\u4e2a\u8282\u70b9\u5c3d\u91cf\u5411\u4e0a\u63d0\u4f46\u4e0d\u8981\u63d0\u5230\u6839\u8282\u70b9  \n\u4e0d\u8003\u8651\u53ef\u4ee5\u63d0\u5230\u6839\u8282\u70b9\u7684\u519b\u961f\uff0cdfs\u4e00\u904d\u5bfb\u627e\u672a\u88ab\u5c01\u6b7b\u7684\u6751\u5e84\uff0c\u5b58\u4e0b\u90a3\u4e9b\u6751\u5e84\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9  \n\u8bbe\u4e00\u4e2a\u53ef\u4ee5\u63d0\u5230\u6839\u8282\u70b9\u7684\u519b\u961f\u63d0\u5230\u6839\u8282\u70b9\u540e\u5269\u4f59\u65f6\u95f4\u4e3arest[i]  \n\u5982\u679c\u8be5\u8282\u70b9\u672a\u88ab\u5c01\u6b7b\u4e14\u539f\u5148\u5728\u8be5\u8282\u70b9\u4e0a\u6709\u519b\u961f\uff0c\u5219\u627e\u4e00\u4e2arest[i]\u6700\u5c0f\u7684\u519b\u961f\u7559\u5728\u8be5\u8282\u70b9\u4e0a\uff0c\u5176\u4ed6\u519b\u961f\u5148\u63d0\u5230\u6839\u8282\u70b9  \n\u5982\u679c\u8be5\u8282\u70b9\u5df2\u88ab\u5c01\u6b7b\u5219\u4e5f\u5c06\u5b83\u63d0\u5230\u6839\u8282\u70b9  \n\u6700\u540e\u5c06\u63d0\u5230\u6839\u8282\u70b9\u7684\u519b\u961f\u7684rest\u4ece\u5927\u5230\u5c0f\u6392\uff0c\u5c06\u672a\u5c01\u6b7b\u7684\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u8ddd\u79bb\u4ece\u5927\u5230\u5c0f\u6392  \n\u6700\u540e\u4e00\u8fb9\u626b\u5224\u65ad\u5373\u53ef  \n\u7531\u4e8e\u9700\u8981\u5c06\u8282\u70b9\u5f80\u4e0a\u63d0\uff0c\u6240\u4ee5\u6811\u4e0a\u500d\u589e\u4e00\u4e0b\u5373\u53ef  \nCode:\n```cpp\n#include <algorithm>\n#include <cctype>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <stack>\n#include <vector>\n#define LL long long\n#define P pair<int,int>\nusing namespace std;\nconst int maxn = 50005;\nconst int log_n = 25;\ntemplate <typename T>\ninline void read(T &t)\n{\n    int f = 0, c = getchar();\n    t = 0;\n    while (!isdigit(c))\n        f |= c == '-', c = getchar();\n    while (isdigit(c))\n        t = t * 10 + c - 48, c = getchar();\n    if (f)\n        t = -t;\n}\ntemplate <typename T, typename... Args>\ninline void read(T &t, Args &... args)\n{\n    read(t);\n    read(args...);\n}\nstruct Edge{\n    int from,to,weight;\n    Edge(int f,int t,int w):from(f),to(t),weight(w){}\n};\nvector<Edge> G[maxn];\nint army[maxn];\nint fa[maxn][log_n];\nLL dis[maxn][log_n];\nbool vis[maxn];\nbool used[maxn];\nint restbj[maxn];\nLL restmin[maxn];\nint n,m;\nint l=0, r;\nint LOG=0;\nvoid dfs1(int x,int f,int d){//\u6811\u4e0a\u500d\u589e\n    fa[x][0]=f;\n    dis[x][0]=d;\n    for(int i=1;i<=LOG;i++){\n        fa[x][i] = fa[fa[x][i - 1]][i - 1];\n        dis[x][i] = dis[fa[x][i - 1]][i-1] + dis[x][i - 1];\n    }\n    for(int i=0;i<G[x].size();i++){\n        Edge &e=G[x][i];\n        if(e.to==f)\n            continue;\n        dfs1(e.to, x, e.weight);\n    }\n    return;\n}\nvector<P > rests;\nvector<P > resta;\nbool dfs2(int x,int f){//\u627e\u672a\u88ab\u5c01\u6b7b\u7684\u70b9\n    bool flag=true;\n    if(vis[x])\n        return true;\n    if(G[x].size()==1)\n        flag = false;\n    for(int i=0;i<G[x].size();i++){\n        Edge &e=G[x][i];\n        if(e.to==f)\n            continue;\n        flag=dfs2(e.to,x) && flag;\n    }\n    if(!flag){\n        if(f==1){//\u5982\u679c\u662f1\u7684\u5b50\u8282\u70b9\u5c31\u52a0\u5165\u672a\u88ab\u5c01\u6b7b\u8282\u70b9\u7684\u5217\u8868\n            rests.push_back(P(dis[x][0], x));\n        }\n        return false;\n    }\n    return true;\n}\nbool check(int mid){\n    memset(vis,0,sizeof(vis));\n    memset(used,0,sizeof(used));\n    memset(restbj,0,sizeof(restbj));\n    memset(restmin, 0, sizeof(restmin));\n    rests.clear();\n    resta.clear();\n    for(int i=1;i<=m;i++){\n        int x=army[i];\n        int num=0;\n        for (int j = LOG;j>=0;j--){\n            if(fa[x][j]>1 && num+dis[x][j]<=mid){\n                num += dis[x][j];\n                x = fa[x][j];\n            }\n        }\n        if(fa[x][0]==1 && num+dis[x][0]<=mid){\n            resta.push_back(P(mid - num - dis[x][0], i));\n            if(!restbj[x] || mid - num - dis[x][0]<restmin[x]){\n                restmin[x] = mid - num - dis[x][0];\n                restbj[x] = i;//\u53d6\u5230\u8fbe\u8be5\u8282\u70b9rest\u6700\u5c0f\u7684\u519b\u961f\n            }\n        }else{\n            vis[x] = true;\n        }\n    }\n    if(dfs2(1,0))\n        return true;\n    sort(rests.begin(), rests.end(), greater<P>());\n    sort(resta.begin(), resta.end(), greater<P>());\n    if(rests.size()>resta.size())\n        return 0;\n    int now = 0;\n    used[0] = 1;//\u590d\u6742\u7684\u8ba8\u8bba\n    for(int i=0;i<rests.size();i++){\n        if(!used[restbj[rests[i].second]]){\n            used[restbj[rests[i].second]]=true;\n            continue;//\u5982\u679c\u8be5\u70b9\u6709\u519b\u961f\u5c31\u7528\n        }\n        while(now<resta.size() && (used[resta[now].second] || resta[now].first<rests[i].first))\n            now++;\n        if(now>=resta.size())\n            return 0;\n        used[resta[now].second] = true;\n    }\n    return 1;\n}\nint main(){\n    read(n);\n    while((1<<LOG)<n) LOG++;\n    for(int i=1;i<=n-1;i++){\n        int u,v,w;\n        read(u,v,w);\n        r += w;\n        G[u].push_back(Edge(u, v, w));\n        G[v].push_back(Edge(v, u, w));\n    }\n    read(m);\n    for(int i=1;i<=m;i++){\n        read(army[i]);\n    }\n    dfs1(1,0,0);\n    if(!check(r)){\n        puts(\"-1\");\n        return 0;\n    }\n    while(l+5<r){\n        int mid = (l + r) >> 1;\n        if(check(mid)) \n            r = mid;\n        else\n            l = mid;\n    }\n    for (int i = l; i <= r;i++){\n        if(check(i)){\n            printf(\"%d\",i);\n            return 0;\n        }\n    }\n}\n```",
        "postTime": 1540472077,
        "uid": 31228,
        "name": "ciwomuli",
        "ccfLevel": 0,
        "title": "P1084\u75ab\u60c5\u63a7\u5236"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f$:$\n\n\u7ed9\u4f60$n$\u4e2a\u70b9\u7684\u4e00\u68f5\u6811,\u518d\u7ed9\u4f60$m$\u4e2a\u68c0\u67e5\u70b9\u7684\u4f4d\u7f6e,\u68c0\u67e5\u70b9\u53ef\u4ee5\u540c\u65f6\u79fb\u52a8,\u4e14\u53ef\u505c\u7559\u4e8e\u9664$1$\u53f7\u8282\u70b9\u5916\u7684\u4efb\u4e00\u70b9,\u73b0\u5728\u9700\u8981\u4ece$1$\u5230\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u68c0\u67e5\u70b9,\u6c42\u79fb\u52a8\u6700\u8fdc\u7684\u68c0\u67e5\u70b9\u79fb\u52a8\u8ddd\u79bb\u6700\u5c0f\u4e3a\u591a\u5c11.$n,m<=50000$,$w_i<10^9$.\n\n \u73b0\u5728\u4ece\u9898\u9762\u5c31\u53ef\u4ee5\u770b\u51fa,\u8fd9\u4e2a\u9898\u5f88\u53ef\u80fd\u8981\u7528\u4e8c\u5206\u7b54\u6848,\u6bcf\u6b21\u4e8c\u5206\u4e00\u4e2a\u79fb\u52a8\u8ddd\u79bb,\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u5c06\u53f6\u5b50\u8282\u70b9\u5b8c\u5168\u8986\u76d6.\u73b0\u5728\u5c31\u9700\u8981\u77e5\u9053\u5982\u4f55$check$.\n \n \u9996\u5148,\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u7684\u60f3,\u5bf9\u4e8e\u6709\u68c0\u67e5\u70b9\u7684\u8282\u70b9$i$,\u5982\u679c\u6211\u4eec\u5c06\u4ed6\u7684\u68c0\u67e5\u70b9\u79fb\u5230\u7236\u4eb2\u8282\u70b9\u4e0a,\u5176\u53ef\u8986\u76d6\u7684\u53f6\u5b50\u8282\u70b9\u4e0d\u4f1a\u51cf\u5c11,\u6240\u4ee5\u9996\u5148\u8ba9\u6709\u519b\u961f\u9a7b\u624e\u7684\u70b9\u7684\u519b\u961f\u5c3d\u91cf\u5f80\u6839\u8282\u70b9\u79fb\u52a8,\u5982\u679c\u5728$mid$\u8ddd\u79bb\u5185\u53ef\u4ee5\u79fb\u52a8\u5230\u6839\u8282\u70b9,\u5c31\u5c06\u5176\u653e\u7f6e\u5728\u6839\u8282\u70b9\u7684\u5bf9\u5e94\u7684\u5b50\u8282\u70b9\u4e0a,\u540c\u65f6\u8bb0\u5f55\u4e0b\u5176\u8fd8\u5269\u4e0b\u591a\u5c11\u8ddd\u79bb\u53ef\u4ee5\u8d70,\u8bb0\u4e3a$rest$.\u8fd9\u4e9b\u6709\u5269\u4f59\u65f6\u95f4\u7684\u519b\u961f\u5c31\u662f\u53ef\u4ee5\u53bb\u9a7b\u624e\u5176\u4ed6\u5b50\u6811\u7684\u519b\u961f\u96c6\u5408,\u8bb0\u4e3a$free$.\n \n \u73b0\u5728\u6211\u4eec\u627e\u51fa\u4e86\u53ef\u4ee5\u8986\u76d6\u5176\u4ed6\u8282\u70b9\u7684\u519b\u961f,\u518d\u627e\u51fa\u5176\u4ed6\u9700\u8981\u8986\u76d6\u7684\u70b9\u5373\u53ef.\u6211\u4eec\u518d\u5c06\u519b\u961f\u8df3\u5411\u6839\u8282\u70b9\u8df3\u65f6,\u5c06\u6700\u7ec8\u6709\u519b\u961f\u7684\u8282\u70b9\u6807\u8bb0,\u518d\u5bf9\u6811\u8fdb\u884c\u4e00\u6b21\u904d\u5386,\u540c\u65f6\u5c06\u6807\u8bb0\u4e0b\u4f20,\u5c31\u53ef\u627e\u51fa\u6240\u6709\u7684\u672a\u88ab\u6807\u8bb0\u7684\u53f6\u5b50\u8282\u70b9,\u518d\u5c06\u5176\u6240\u5c5e\u4e8e\u7684\u90a3\u4e2a\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u52a0\u5165\u9700\u8981\u519b\u961f\u7684\u96c6\u5408\u5f53\u4e2d,\u8bb0\u4e3a$need$,\u5982\u56fe:\n \n ![](  https://i.loli.net/2019/08/26/voZ9JQa815fcyEL.png)\n \n \u82e5$3$\u53f7\u8282\u70b9\u672a\u88ab\u6807\u8bb0,\u5219\u9700\u8981\u5c06$2$\u53f7\u8282\u70b9\u52a0\u5165\u9700\u8981\u519b\u961f\u7684\u96c6\u5408.\u4f46\u5728\u904d\u5386\u65f6,\u4e0d\u8981\u5c06\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u6807\u8bb0\u4e0b\u4f20,\u56e0\u4e3a\u5982\u679c\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6709\u6807\u8bb0,\u8bf4\u660e\u8fd9\u91cc\u6709\u519b\u961f,\u4f46\u8fd9\u4e9b\u519b\u961f\u662f\u53ef\u80fd\u9700\u8981\u9a7b\u624e\u5728\u5176\u4ed6\u8282\u70b9\u7684,\u6240\u4ee5\u4e0d\u80fd\u4e0b\u4f20\u5176\u6807\u8bb0.\n \n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u518d\u8d2a\u5fc3\u4e00\u4e0b$:$\n\n\u800c\u5bf9\u4e8e$need$\u96c6\u5408\u5185\u7684\u4e00\u4e2a\u8282\u70b9$i$,\u82e5\u8be5\u70b9\u9a7b\u624e\u4e86\u4e00\u652f\u519b\u961f$s$,\u4e14\u8fd9\u53ea\u519b\u961f\u7684\u5269\u4f59\u8ddd\u79bb\u4e0d\u8db3\u4ee5\u4f7f\u5176\u8d70\u5230\u6839\u8282\u70b9\u5728\u56de\u6765,\u90a3\u4e48\u5f53\u524d\u70b9$i$\u7531\u5176\u5b50\u6811\u5185\u7684\u8282\u70b9\u9a7b\u624e\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u6700\u4f18\u89e3.\n\n\u56e0\u4e3a\u82e5\u5f53\u524d\u8282\u70b9\u7531\u5176\u4ed6\u5b50\u6811\u52a0\u70b9$i'$\u4e0a\u7684\u519b\u961f$s'$\u9a7b\u624e,\u90a3\u4e48\u519b\u961f$s'$\u5728\u5230\u8fbe\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u540e\u7684\u5269\u4f59\u8ddd\u79bb$rest[s']-dis[i']>=dis[i]>=rest[s]-dis[i]$,\u4e5f\u5c31\u662f\u8bf4\u518d\u5230\u8fbe\u6839\u8282\u70b9\u540e,$s'$\u7684\u5269\u4f59\u8ddd\u79bb\u5927\u4e8e$s$,\u6240\u4ee5\u5c06$s'$\u7528\u6765\u8986\u76d6\u5176\u4ed6\u8282\u70b9,\u5c06$s$\u7528\u6765\u8986\u76d6\u5176\u81ea\u8eab\u663e\u7136\u66f4\u4f18\u79c0.\n\n\u6700\u540e\u5c06\u5728\u4e0a\u4e00\u6bb5\u6240\u8bf4\u7684\u70b9\u4e0e\u519b\u961f\u5728\u96c6\u5408\u4e2d\u5220\u53bb,\u5c06$free$\u6309\u5230\u6839\u8282\u70b9\u540e\u7684\u5269\u4f59\u8ddd\u79bb\u6392\u5e8f,\u5c06$need$\u6309\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u6392\u5e8f,\u518d\u68c0\u67e5$need$\u4e2d\u7684\u5e97\u662f\u5426\u53ef\u4ee5\u88ab\u5168\u90e8\u6807\u8bb0\u5373\u53ef.\n\n\u5c06\u519b\u961f\u5411\u6839\u8282\u70b9\u8df3\u7528$\u6811\u4e0a\u500d\u589e\u6cd5$,\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O((nlogn+mlogn)logSum)$.\n\n``` cpp\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nconst int N=5e4+3;\nll sum,dis[N],dist[N];\nint n,m,u,cnt,cont;\nint am[N],lg[N],f[N][17],dp[N],vis[N],fre[N],b[N],pl[N],nee[N];\nint tt,head[N],to[N<<1],nex[N<<1],w[N<<1];\nvector<int>arv[N];\nstruct LCA{//\u76f4\u63a5\u5957\u7684lca\u6a21\u677f\n\tvoid pre(int g,int F){//\u9884\u5904\u7406\u7236\u4eb2;\n\t\tfor(int i=head[g],v;i;i=nex[i]){\n\t\t\tv=to[i];\n\t\t\tif(v==F)continue;\n\t\t\tf[v][0]=g,dp[v]=dp[g]+1,dis[v]=dis[g]+(ll)w[i];\n\t\t\tfor(int j=1;j<=lg[dp[v]];++j)\n\t\t\t\tf[v][j]=f[f[v][j-1]][j-1];\n\t\t\tpre(v,g);\n\t\t}\n\t\treturn ;\n\t}\n\tint get(int x,int y){\n\t\tif(dp[x]>dp[y])swap(x,y);\n\t\tfor(int i=lg[dp[y]-dp[x]];i>=0;--i)\n\t\t\tif(dp[f[y][i]]>=dp[x])y=f[y][i];\n\t\tif(x==y)return x;\n\t\tfor(int i=lg[dp[x]];i>=0;--i)\n\t\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\n\t\treturn f[x][0];\n\t}\n}lca;\ninline void add(int x,int y,int W){\n\tto[++tt]=y,nex[tt]=head[x],w[tt]=W,head[x]=tt;\n\treturn ;\n}\ninline bool dfs(int g,int F){\n\tif(vis[g]&&!pl[g])return true;//\u82e5\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9,\u4e14\u6709\u6807\u8bb0,\u8bf4\u660e\u5f53\u524d\u5b50\u6811\u5df2\u5168\u90e8\u88ab\u6807\u8bb0;\n\tbool flag=0;\n\tfor(int i=head[g],v;i;i=nex[i]){\n\t\tv=to[i];\n\t\tif(v==F)continue;\n\t\tif(!dfs(v,g))return false;//\u6709\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u672a\u88ab\u6807\u8bb0\u5c31\u9700\u8981\u52a0\u5165need\u96c6\u5408;\n\t\tflag=1;\n\t}\n\treturn flag;\n}\ninline bool check(ll mid){\n\tfor(int i=1;i<=cnt;++i)arv[i].clear();\n\tmemset(vis,0,sizeof vis);\n\tfor(int i=1;i<=m;++i){\n\t\tint y=am[i];\n\t\tdist[i]=0;\n\t\tfor(int j=dp[y];j>=0;--j)//;\u5c06\u5176\u5411\u7236\u4eb2\u8df3\n\t\t\tif(f[y][j]>1&&dist[i]+dis[y]-dis[f[y][j]]<=mid){\n\t\t\t\tdist[i]+=dis[y]-dis[f[y][j]];\n\t\t\t\ty=f[y][j];\n\t\t\t}\n\t\tvis[y]=1;//\u5c06\u5f53\u524d\u8282\u70b9\u6807\u8bb0;\n\t\tint j=pl[y];//\u627e\u5230\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u7684\u7f16\u53f7;\n\t\tif(j){\n\t\t\tarv[j].push_back(mid-dist[i]);//\u5c06\u5269\u4f59\u8ddd\u79bb\u52a0\u5165\u7b2cj\u4e2a\u5b50\u8282\u70b9;\n\t\t\tif(arv[j].size()>1&&arv[j][arv[j].size()-2]<arv[j][arv[j].size()-1])\n\t\t\t\tswap(arv[j][arv[j].size()-2],arv[j][arv[j].size()-1]);//\u5c06\u5269\u4f59\u8ddd\u79bb\u6700\u77ed\u7684\u70b9\u653e\u5230\u5c3e\u90e8;\n\t\t}\n\t}\n\tint cnt1=0,cnt2=0;\n\tfor(int i=1;i<=cnt;++i){\n\t\tif(!dfs(to[b[i]],1)){//\u5224\u5b9a\u662f\u5426\u9700\u8981\u519b\u961f\u9a7b\u624e;\n\t\t\tif(arv[i].size()&&arv[i][arv[i].size()-1]<w[b[i]]*2)\n\t\t\t\tarv[i].pop_back();//\u82e5\u5f53\u524d\u70b9\u5b58\u5728\u65e0\u6cd5\u5148\u5230\u8fbe\u6839\u8282\u70b9,\u518d\u8fd4\u56de\u5f53\u524d\u70b9\u7684\u7684\u519b\u961f,\u5c31\u5c06\u5176\u519b\u961f\u7528\u6765\u9a7b\u624e\u5f53\u524d\u70b9;\n\t\t\telse nee[++cnt1]=w[b[i]];//\u5426\u5219\u5c06\u5f53\u524d\u70b9\u52a0\u5165need\u96c6\u5408;\n\t\t}\n\t\tfor(int j=0;j<arv[i].size();++j)\n\t\t\tif(arv[i][j]>=w[b[i]])\n\t\t\t\tfre[++cnt2]=arv[i][j]-w[b[i]];//\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u519b\u961f\u52a0\u5165free\u96c6\u5408;\n\t}\n\tif(cnt1>cnt2)return false;//\u5982\u679c\u519b\u961f\u6570\u5c0f\u4e8e\u8282\u70b9\u6570,\u5c31\u65e0\u6cd5\u5b8c\u5168\u8986\u76d6;\n\tsort(nee+1,nee+1+cnt1);\n\tsort(fre+1,fre+1+cnt2);//\u6392\u5e8f;\n\twhile(cnt1){//\u53cd\u5411\u6bd4\u8f83;\n\t\tif(fre[cnt2]<nee[cnt1])return false;//\u82e5\u5f53\u524d\u70b9\u65e0\u6cd5\u88ab\u5f53\u524d\u519b\u961f\u8986\u76d6,\u90a3\u4e48\u5728\u4ed6\u4e4b\u540e\u7684\u519b\u961f\u4e5f\u65e0\u6cd5\u5c06\u5176\u8986\u76d6;\n\t\t--cnt2,--cnt1;\n\t}\n\treturn true;//\u5c06\u8282\u70b9\u5b8c\u5168\u8986\u76d6;\n}\ninline ll solve(){\n\tll l=0,r=sum+1;\n\twhile(l<r){\n\t\tll mid=l+r>>1;\n\t\tif(check(mid))r=mid;\n\t\telse l=mid+1;\n\t}\n\treturn l;\n}\nint main(){\n\tcin>>n;\n\tlg[0]=-1;\n\tfor(int i=1;i<=n;++i)lg[i]=lg[i>>1]+1;//\u521d\u59cb\u5316lg\u6570\u7ec4;\n\tint x,y,W;\n\tfor(int i=1;i<n;++i)cin>>x>>y>>W,add(x,y,W),add(y,x,W),sum+=W;\n\tfor(int i=head[1],v;i;i=nex[i])v=to[i],b[++cnt]=i,pl[v]=cnt;//b\u8bb0\u5f55\u6839\u8282\u70b9\u7684\u7b2ccnt\u6761\u8fb9,pl\u8bb0\u5f55\u8282\u70b9\u5bf9\u5e94\u7b2c\u51e0\u6761\u8fb9;\n\tcin>>m;\n\tlca.pre(1,0);\n\tfor(int i=1;i<=m;++i)cin>>x,am[i]=x;\n\tif(m<cnt)puts(\"-1\");//\u82e5\u519b\u961f\u6570\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570,\u5219\u4e00\u5b9a\u65e0\u6cd5\u5b8c\u5168\u8986\u76d6;\n\telse cout<<solve()<<'\\n';//\u5426\u5219\u4e00\u5b9a\u53ef\u4ee5\u5b8c\u5168\u8986\u76d6;\n\treturn 0;\n}\n\n```",
        "postTime": 1566783983,
        "uid": 124890,
        "name": "bugaile",
        "ccfLevel": 0,
        "title": "P1084 [NOIp2012\u63d0\u9ad8\u7ec4]\u75ab\u60c5\u63a7\u5236"
    },
    {
        "content": "\u770b\u7740\u4e0b\u9762\u7684\u5946\u4f6c\u4eec\u90fd\u8bb2\u5f97\u5dee\u4e0d\u591a\u4e86\uff0c\u6211\u6765\u8865\u5145\u4e00\u4e9b**\u5c0f\u7ec6\u8282**\u3002  \n#### \uff08\u6bd2\u7624\u7684\u540c\u5fd7\u4eec\u53ef\u4ee5\u5bf9\u7167\u7740\u770b\u770b\uff0c\u8fd9\u662f\u4e00\u4e2a\u665a\u4e0a\u8840\u4e0e\u6cea\u7684\u6559\u8bad\uff09\n\n1.\u5173\u4e8e\u8d2a\u5fc3\u3002\n--\n\u8d2a\u5fc3\u524d\u8981\u5224\u65ad\u4e00\u4e0b\uff0c\u5982\u679c\u7a7a\u95f2\u519b\u961f\u6570\uff1c\u9700\u8981\u519b\u961f\u7684\u57ce\u5e02\u6570\uff0c\u5219~~\u663e\u7136~~\u4e0d\u884c~  \n\u4e0d\u8981\u8ba4\u4e3afor\u4e2d\u5224\u5f97\u51fa\u6765\uff0c\u4e8b\u5b9e\u8bc1\u660e\u5e76\u4e0d\u80fd\u3002\n\n2.\u5173\u4e8e\u521d\u59cb\u5316\u3002\n--\n1>\u8bb0\u5f55\u519b\u961f\u7684vector\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u5f39\u7a7a\u3002  \n2>\u8bb0\u5f55\u519b\u961f\u8d70\u8fc7\u8def\u5f84\u957f\u5ea6\u7684\uff08\u65e0\u8bba\u662f\u6570\u7ec4\u8fd8\u662f\u53d8\u91cf\uff09\u8981\u5728\u6700\u5f00\u59cb\u6e05\u96f6\u3002  \n\n3.\u5173\u4e8e\u7cbe\u5ea6\n--\n\u8981\u5f00long long\uff01  \n\u5185\u5b58\u8bb0\u4f4f\u6709\u7684\u8981\u5f00<<1\u3002\n\n\u989d\uff0c~~\u6709\u70b9~~\u62bd\u8c61\uff0c\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u770b\u4e00\u770b\u3002  \n\u6570\u7ec4\u591a\u800c\u4e14\u5343\u5947\u767e\u602a\uff0c\u6240\u4ee5\u6211\u7ed9\u4e00\u4e9b\u6570\u7ec4\u52a0\u4e86\u6ce8\u91ca\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<vector>\nusing namespace std;\nstruct Edge{int to,next;long long v;\n}a[200001];\nint h[100001],cnt;\nint n,m;\nvoid add(int x,int y,long long z)\n{\n\ta[++cnt].to=y;\n\ta[cnt].v=z;\n\ta[cnt].next=h[x];\n\th[x]=cnt;\n}\nint p[100001][20];\nlong long dis[100001][20];\nvoid Dfs(int x)\n{\n\tfor(int i=h[x];i;i=a[i].next)\n\t\tif(!(~p[a[i].to][0])) p[a[i].to][0]=x,dis[a[i].to][0]=a[i].v,Dfs(a[i].to);\n}\nvoid ST()\n{\n\tfor(int j=1;(1<<j)<=n;j++)\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(~p[i][j-1]) p[i][j]=p[p[i][j-1]][j-1],dis[i][j]=dis[p[i][j-1]][j-1]+dis[i][j-1];\n}\nlong long v[100001];\nint g[100001]/*\u5728\u4e0d\u8d85\u8fc7dat\u7684\u60c5\u51b5\u4e0b\u80fd\u5230\u8fbe\u7684\u6700\u6d45\u8282\u70b9(\u6700\u5927\u4e3a1)*/;\nint st[100001]/*\u5728[]\u70b9\u6709\u519b\u9a7b\u624e(\u5728\u7b2c\u4e00\u6b21\u5224\u65ad\uff0c\u5373\u8fd8\u672a\u5411\u5176\u4ed6\u8282\u70b9\u79fb\u52a8\u65f6)*/;\nlong long t[100001]/*\u5230g[]\u7528\u65f6*/;\nint H[100001],link[100001];\nlong long ar[100001],ci[100001];\nvector<long long> army[100001];\nbool Satisfied(int x)/*\u68c0\u67e5\u662f\u5426\u6709\u8db3\u591f\u68c0\u67e5\u7ad9\uff0c\u662f\u8fd4\u56de1\uff0c\u5426\u8fd4\u56de0*/\n{\n\tif(!H[x]&&st[x]) return 1;\n\tbool flag=0;\n\tfor(int i=h[x];i;i=a[i].next)\n\t\tif(a[i].to!=p[x][0])\n\t\t{\n\t\t\tflag=1;\n\t\t\tif(!Satisfied(a[i].to)) return 0;\n\t\t}\n\treturn flag;\n}\nbool Check(long long dat)\n{\n\tfor(int i=1;i<=H[0];i++)\n\t\twhile(!army[i].empty()) army[i].pop_back();\n\tmemset(st,0,sizeof(st));\n\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tg[i]=v[i];\n\t\tt[i]=0;\n\t\tfor(int j=18;j>=0;j--)\n\t\t\tif(~p[g[i]][j]&&p[g[i]][j]!=1&&t[i]+dis[g[i]][j]<=dat) t[i]+=dis[g[i]][j],g[i]=p[g[i]][j];\n\t\tst[g[i]]=1;\n\t\tif(H[g[i]])\n\t\t{\n\t\t\tint dh=H[g[i]];\n\t\t\tarmy[dh].push_back(dat-t[i]);\n\t\t\tint sh=army[dh].size();\n\t\t\tif(sh>1&&army[dh][sh-1]>army[dh][sh-2]) swap(army[dh][sh-1],army[dh][sh-2]);\n\t\t}\n\t}\n\tar[0]=ci[0]=0;\n\tfor(int i=1;i<=H[0];i++)\n\t{\n\t\tif(!Satisfied(a[link[i]].to))\n\t\t\tif((!army[i].empty())&&army[i][army[i].size()-1]<(a[link[i]].v<<1)) army[i].pop_back();\n\t\t\telse ci[++ci[0]]=a[link[i]].v;\n\t\tfor(int j=0;j<army[i].size();j++)\n\t\t\tif(army[i][j]>=a[link[i]].v) ar[++ar[0]]=army[i][j]-a[link[i]].v;\n\t}\n\tsort(ar+1,ar+1+ar[0]);\n\tsort(ci+1,ci+1+ci[0]);\n\tif(ar[0]<ci[0]) return 0;\n\tfor(int i=ar[0],j=ci[0];j;i--,j--)\n\t\tif(ar[i]<ci[j]) return 0;\n\treturn 1;\n}\nint main()\n{\n\tint x,y;\n\tlong long z,sum=0;\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++) scanf(\"%d %d %lld\",&x,&y,&z),add(x,y,z),add(y,x,z),sum+=z;\n\tmemset(p,-1,sizeof(p));\n\tp[1][0]=0;\n\tDfs(1);\n\tp[1][0]=-1;\n\tST();\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++) scanf(\"%lld\",&v[i]);\n\tfor(int i=h[1];i;i=a[i].next) H[a[i].to]=++H[0],link[H[0]]=i;\n\tlong long l=0,r=sum+1;\n\twhile(l<r)\n\t{\n\t\tlong long mid=l+r>>1;\n\t\tif(Check(mid)) r=mid;\n\t\telse l=mid+1;\n\t}\n\tif(l>sum) puts(\"-1\");\n\telse printf(\"%lld\\n\",l);\n\treturn 0;\n}\n```\n\n$\\color{red} \\text {\u5b9e\u6d4b\uff1a}$\n\n```cpp\n#1 14ms/10.91MB AC\n#2 628ms/23.24MB AC\n#3 14ms/10.94MB AC\n#4 14ms/10.95MB AC\n#5 13ms/10.98MB AC\n#6 17ms/11.06MB AC\n#7 16ms/11.05MB AC\n#8 18ms/12.87MB AC\n#9 21ms/12.92MB AC\n#10 13ms/11.03MB AC\n```\n",
        "postTime": 1564645199,
        "uid": 106182,
        "name": "KaisuoShutong",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7ec6\u8282\u975e\u5e38\u7684\u591a...\n\n\u9996\u5148\u6700\u5927\u503c\u6700\u5c0f\u60f3\u5230\u4e8c\u5206\uff0c\u7136\u540e\u53d8\u6210\u5224\u5b9a\u6027\u95ee\u9898.\n\n\u4e8c\u5206\u4e00\u4e2a\u6700\u5927\u65f6\u95f4$x$\uff0c\u7136\u540e\u8d2a\u5fc3\u5730\u5c3d\u53ef\u80fd\u628a\u5404\u519b\u961f\u5f80\u4e0a\u63d0(\u4f46\u662f\u4e0d\u8981\u63d0\u5230\u6839).\u63d0\u7684\u65f6\u5019\u500d\u589e\u52a0\u901f.\u5904\u7406\u51fa\u63d0\u5230\u6240\u5728\u5b50\u6811\u7684\u6839\u65f6\u5269\u4f59\u7684\u65f6\u95f4.\n\n\u7136\u540e\u5904\u7406\u6839\u7684\u6240\u6709\u5b50\u6811\uff0c\u4ee4\u6240\u6709\u5b50\u6811\u5185(\u975e\u5b50\u6811\u7684\u6839)\u7684\u519b\u961f\u63a7\u5236\u6240\u5728\u57ce\u5e02.$dfs$\u5904\u7406\u51fa\u54ea\u4e9b\u5b50\u6811\u8fd8\u6ca1\u6709\u88ab\u5b8c\u5168\u63a7\u5236.\u6ce8\u610f\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u5b50\u6811\u90fd\u88ab\u63a7\u5236\u4e86\u90a3\u4e48\u8fd9\u4e2a\u70b9\u88ab\u63a7\u5236\u4e86.\n\n\u8003\u8651\u6240\u6709\u5b50\u6811\u7684\u6839\u7684\u519b\u961f\uff0c\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u53d8\u6210\u4e86\u5728\u83ca\u82b1\u56fe\u4e0a\u5224\u5b9a\u8fd9\u4e2a\u95ee\u9898.\u53ef\u4ee5\u5148\u628a\u6240\u6709\u70b9\u63d0\u5230\u6839\uff0c\u7136\u540e\u5339\u914d\u672a\u88ab\u63a7\u5236\u7684\u5b50\u6811.\u4f46\u662f\u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5.\n\n1. \u67d0\u4e2a\u70b9\u63d0\u4e0d\u5230\u6839\uff0c\u90a3\u4e48\u8ba9\u5b83\u63a7\u5236\u8fd9\u68f5\u5b50\u6811;\n\n2. \u67d0\u4e2a\u70b9\u6240\u5728\u5b50\u6811\u5e76\u6ca1\u6709\u5b8c\u5168\u88ab\u63a7\u5236\uff0c\u5e76\u4e14\u5b83\u662f\u8fd9\u68f5\u5b50\u6811\u4e2d\u5269\u4f59\u65f6\u95f4\u6700\u5c0f\u7684.\u5982\u679c\u5b83\u5230\u6839\u4e4b\u540e\u4e0d\u80fd\u56de\u5230\u90a3\u4e2a\u70b9\u5219\u8ba9\u5b83\u63a7\u5236\u8fd9\u68f5\u5b50\u6811.\n\n\u4e3a\u4ec0\u4e48?\u56e0\u4e3a\u5982\u679c\u5b83\u53bb\u63a7\u5236\u5176\u4ed6\u5b50\u6811\uff0c\u90a3\u4e48\u63a7\u5236\u7684\u90a3\u68f5\u5b50\u6811\u9700\u8981\u7684\u65f6\u95f4\u66f4\u5c11\uff0c\u4e0d\u5982\u63a7\u5236\u5f53\u524d\u8fd9\u68f5\u5b50\u6811.\n\n\u7136\u540e\u5c31\u662f\u975e\u5e38\u5e38\u89c4\u7684\u505a\u6cd5\u4e86(\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=1e6+5000;\nconst long long INF=1e18;\nstruct Edge{int v,w;}e[N];\nlong long s[20][N],dep[N];\nint son[N],size,n,m,f[20][N],bl[N],ok[N],lft[N],fst[N],nxt[N],c[N],mm;\nstruct Node{long long w;int id;}tmp[N];\nvoid ade(int u,int v,int w){e[++mm]=(Edge){v,w},nxt[mm]=fst[u],fst[u]=mm;}\nvoid dfs(int u,int fa,int anc)\n{\n\tf[0][u]=fa;dep[u]=fa!=1?dep[fa]+s[0][u]:0;\n\tif(fa==1)anc=u;bl[u]=anc;\n\tfor(int i=1;f[i-1][u];i++)\n\t\tf[i][u]=f[i-1][f[i-1][u]],s[i][u]=s[i-1][u]+s[i-1][f[i-1][u]];\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=e[i].v;\n\t\tif(v!=fa)\n\t\t{\n\t\t\tif(!fa)dep[u]+=e[i].w,son[++size]=v;\n\t\t\ts[0][v]=e[i].w,dfs(v,u,anc);\n\t\t}\n\t}\n}\nint cmp1(const Node &a,const Node &b){return a.id==b.id?a.w>b.w:a.id<b.id;}\nint cmp2(const Node &a,const Node &b){return a.w<b.w;}\nvoid dfs1(int u,int fa)\n{\n\tif(ok[u])return;int flg1=0,flg2=1;\n\tfor(int i=fst[u];i;i=nxt[i])\n\t{\n\t\tint v=e[i].v;if(v==fa)continue;\n\t\tflg1=1;dfs1(v,u);if(!ok[v])flg2=0;\n\t}\n\tok[u]=flg1&&flg2;\n}\nint judge(long long mid)\n{\n\tfor(int i=1;i<=n;i++)ok[i]=0;int cnt=0;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u=c[i];long long ts=0;if(c[i]==1){tmp[++cnt]=(Node){mid,1};continue;}\n\t\tfor(int j=20;j>=0;j--)\n\t\t\tif(f[j][u]>1&&ts+s[j][u]<=mid)\n\t\t\t\tts+=s[j][u],u=f[j][u];//\u500d\u589e\u4e0a\u8df3\n\t\tif(u!=bl[u])ok[u]=1;\n\t\telse tmp[++cnt]=(Node){mid-ts-s[0][u],u};\n\t}\n\tdfs1(1,0);\n\tsort(tmp+1,tmp+cnt+1,cmp1);int cnt1=0;\n\ttmp[cnt+1].id=0;\n\tfor(int i=1;i<=cnt;i++)\n\t{\n\t\tif(tmp[i].w>0&&(tmp[i].id==tmp[i+1].id||tmp[i].w>=s[0][tmp[i].id]||ok[tmp[i].id]))tmp[++cnt1]=tmp[i];//\u6309\u7167\u6761\u4ef6\n\t\telse ok[tmp[i].id]=1;\n\t}\n\tsort(tmp+1,tmp+cnt1+1,cmp2);cnt=0;\n\tfor(int i=1;i<=size;i++)if(!ok[son[i]])lft[++cnt]=s[0][son[i]];\n\tsort(lft+1,lft+cnt+1);//\u628a\u6240\u6709\u6ca1\u88ab\u63a7\u5236\u7684\u5b50\u6811\u62ff\u51fa\u6765\n\tint i=cnt1,j=cnt;\n\tfor(;i&&j;i--)\n\t\tif(tmp[i].w>=lft[j])--j;\n\treturn !j;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tade(u,v,w),ade(v,u,w);\n\t}\n\tscanf(\"%d\",&m);\n\tdfs(1,0,0);if(m<size){puts(\"-1\");return 0;}\n\tlong long l=0,r=0,mid;\n\tfor(int i=1;i<=m;i++)scanf(\"%d\",c+i);\n\tfor(int i=1;i<=n;i++)r+=dep[i];\n\twhile(l<r)\n\t{\n\t\tmid=(l+r)>>1;//cout<<mid<<endl;\n\t\tif(judge(mid))r=mid;\n\t\telse l=mid+1;\n\t}\n\tcout<<l<<endl;\n}\n```",
        "postTime": 1561357480,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "D2T3\u786e\u5b9e\u4e0d\u592a\u5bb9\u6613\n\n\u4e00\u6b65\u4e00\u6b65\u6765\u5427\u3002\n\n\u6211\u7684\u505a\u6cd5\u4ee5**\u4e8c\u5206\u7b54\u6848**\u4e3a\u57fa\u7840\uff08\u4e8c\u5206\u8017\u65f6\uff09\uff1a  \n\u5148\u7b80\u5355\u8bc1\u660e\u4e00\u4e0b\uff1a\n>  \u8bbe\u6700\u4f18\u89e3\u8017\u65f6\u4e3aS\uff0c\u5219\u4efb\u610f\u65f6\u95f4T<=S\u90fd\u4e00\u5b9a\u4e0d\u53ef\u884c\uff0c\u5426\u5219\u4e0eS\u7684\u6700\u4f18\u6027\u8fdd\u80cc\uff1b\u4efb\u610f\u65f6\u95f4T>=S\u90fd\u5b58\u5728\u8017\u65f6\u4e0d\u8d85\u8fc7T\u7684\u89e3\uff0c\u56e0\u4e3aS\u5c31\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002\u6545\u8be5\u95ee\u9898\u6ee1\u8db3\u5355\u8c03\u6027\uff0c\u53ef\u4ee5\u7528\u4e8c\u5206\u7b54\u6848\u6c42\u89e3\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ea\u8981\u80fd\u5feb\u901f\u9a8c\u8bc1\u67d0\u4e2aT\u662f\u5426\u53ef\u884c\uff0c\u5c31\u53ef\u77e5S\u4e86\u3002\n\n\u90a3\u5982\u4f55\u9a8c\u8bc1\u5462\uff1f  \n\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u8d2a\u5fc3\u662f\uff0c\u5728\u8017\u65f6\u4e0d\u8d85\u8fc7T\u548c\u4e0d\u8df3\u5230\u9996\u90fd\u7684\u60c5\u51b5\u4e0b\uff0c**\u62fc\u547d\u5f80\u4e0a\u8df3**\u4e00\u5b9a\u4f1a\u6bd4\u4e0d\u52a8\u6216\u8df3\u5230\u4e2d\u9014\u5c31\u4e0d\u8df3\u63a7\u5236\u66f4\u591a\u7684\u8fb9\u5883\u57ce\u5e02  \n\u7136\u540e\uff0c\u641e\u4e00\u4e0b\u4ece\u53f6\u5230\u6839\u7684bfs\uff0c\u627e\u51fa\u672a\u88ab\u63a7\u5236\u7684\u5b50\u6811\u3002\u5bf9\u4e8e\u80fd\u8d70\u5230\u9996\u90fd\u7684\u90fd\u8d70\u5230\u9996\u90fd\uff0c\u5e76**\u63a7\u5236\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u7684\u672a\u88ab\u63a7\u5236\u7684\u5b50\u6811**\uff08\u7279\u522b\u7684\uff0c\u5982\u679c\u8d70\u5230\u9996\u90fd\u540e\u5269\u4f59\u7684\u8ddd\u79bb\u751a\u81f3\u4e0d\u80fd\u8d70\u56de\u539f\u5b50\u6811\u4e14\u539f\u5b50\u6811\u672a\u88ab\u63a7\u5236\uff0c\u90a3\u4e48\u7559\u5728\u539f\u5b50\u6811\u6700\u4f18\uff09\n\n\u5982\u679c\u66b4\u529b\u5730\u5f80\u4e0a\u8df3/\u9009\u62e9\u5230\u8fbe\u54ea\u68f5\u5b50\u6811\u6700\u4f18\uff0c\u68c0\u9a8c\u4e00\u6b21\u590d\u6742\u5ea6$O(n^2)$\n\n\u5982\u679c\u7528**\u6811\u4e0a\u500d\u589e**\uff08\u7236\u4eb2\u548c\u8def\u7a0b\uff09\uff0c\u5bf9\u4e8e\u63a7\u5236\u5b50\u6811\u7684\u4ee3\u4ef7**\u641e\u4e00\u4e2a\u5806/\u6392\u5e8f**\uff0c\u5c31\u53ef\u4ee5$O(nlogn)$\u5730\u68c0\u9a8c\u4e86\n\n\u603b\u590d\u6742\u5ea6$O(nlog^2n)$\n\n//\u6709\u7591\u95ee\u8bf7\u79c1\u4fe1\u6211,\u8bc4\u8bba\u770b\u4e0d\u5230\n\n\u6211\u7684\u4ee3\u7801\u5f88\u4e11\uff0c\u5404\u4f4d\u5927\u53ef\u4e0d\u770b\u3002\n```cpp\n//\u5934\u6587\u4ef6\uff1f\u4e0d\u5b58\u5728\u7684\nll read();//\u5feb\u8bfb\nll min(ll a,ll b)\n{\n    return a<b?a:b;\n}\nll max(ll a,ll b)\n{\n    return a>b?a:b;\n}\n\n#define MAXN 50011\nll n,m,a[MAXN];\nstruct Edge//\u8fd9\u4e9b\u90fd\u662f\u5b58\u6811\u7684\n{\n    ll v,w,nxt;\n}e[MAXN<<1|1];\nll cnt=0,last[MAXN];\nvoid adde(ll u,ll v,ll w)\n{\n    ++cnt;\n    e[cnt].v=v,e[cnt].w=w;\n    e[cnt].nxt=last[u];last[u]=cnt;\n}\n\nll dep[MAXN],fa[19][MAXN],fw[19][MAXN],lg[MAXN];\nbool del[MAXN],leaf[MAXN],vis[MAXN];\nvoid build(ll u,ll t)//\u5efa\u6811\n{\n    dep[u]=t;\n    bool flag=0;\n    for(ll i=last[u];i;i=e[i].nxt)\n    {\n        ll v=e[i].v;\n        if(v==fa[0][u])continue;\n        flag=1;\n        fa[0][v]=u;fw[0][v]=e[i].w;\n        build(v,t+1);\n    }\n    if(!flag)leaf[u]=1;//leaf[u]=1:u\u662f\u53f6\u5b50/\u8fb9\u5883\u57ce\u5e02\n}\nvoid mul()//\u9884\u5904\u7406\u500d\u589e\n{\n    lg[1]=0;\n    for(unsigned i=2;i<=n;++i)lg[i]=lg[i>>1]+1;\n    for(unsigned i=1;i<=lg[n];++i)\n        for(ll u=1;u<=n;++u)\n        {\n            fa[i][u]=fa[i-1][fa[i-1][u]];//\u500d\u589e\u7236\u4eb2\n            fw[i][u]=fw[i-1][u]+fw[i-1][fa[i-1][u]];//\u500d\u589e\u8ddd\u79bb\n        }\n            \n}\nll q[MAXN],h,t;\nstd::vector<ll>g[MAXN];//\u80fd\u4e00\u6b65\u5230\u8fbe\u9996\u90fd\u7684\u57ce\u5e02\u4e2d\u7684\u519b\u961f\nll q1[MAXN],l1,q2[MAXN],l2;//q1:\u5728\u9996\u90fd\u7684\u519b\u961f\u80fd\u8d70\u7684\u8ddd\u79bb\uff0cl1\u662f\u5176\u6570\u91cf\uff1bq2:\u63a7\u5236\u672a\u88ab\u63a7\u5236\u7684\u5b50\u6811\u7684\u4ee3\u4ef7\uff0cl2\u662f\u5176\u6570\u91cf\nbool check(ll k)\n{\n    l1=l2=0;\n    memset(del,0,sizeof del);\n    memset(vis,0,sizeof vis);//memset\u52ff\u5fd8\uff01\n    for(ll i=1;i<=n;++i)g[i].clear();\n    \n    for(ll i=1;i<=m;++i)\n    {\n        ll s=0,pos=a[i];\n        for(ll j=lg[dep[pos]];j>=0;--j)\n            if(fa[j][pos]!=1&&s+fw[j][pos]<=k)\n                s+=fw[j][pos],pos=fa[j][pos];\n        if(fa[0][pos]!=1)del[pos]=1;//del[pos]=1:pos\u88ab\u63a7\u5236\n        else\n        {//g[pos][0]:pos\u70b9\u7684\u519b\u961f\u91cc\u80fd\u8d70\u7684\u8ddd\u79bb\u6700\u8fd1\u7684\u519b\u961f\n            if(g[pos].size())g[pos][0]=min(g[pos][0],k-s),g[pos].push_back(k-s);\n            else g[pos].push_back(k-s),g[pos].push_back(k-s);\n        }\n    }\n    h=t=1;\n    for(ll i=1;i<=n;++i)\n        if(leaf[i]&&!del[i])q[t++]=i,vis[i]=1;\n    while(h<t)//\u4ece\u53f6\u5230\u6839bfs\n    {\n        ll u=q[h++];\n        for(ll i=last[u];i;i=e[i].nxt)\n        {\n            ll v=e[i].v,w=e[i].w;\n            if(del[v]||vis[v])continue;\n            if(v==1)//\u5230\u4e86\u9996\u90fd\n            {\n                bool flag=0;\n                if(!g[u].size())//\u5f53\u524d\u70b9\u65e0\u519b\u961f,\u9700\u8981\u88ab\u5c01\u9501\n                {\n                \tq2[++l2]=w;continue;\n                }\n                if(g[u][0]<w+w)del[u]=1,flag=1;//\u7559\u5728\u539f\u5b50\u6811\n                else q2[++l2]=w;\n                for(std::vector<ll>::iterator it=g[u].begin()+1;it!=g[u].end();++it)\n                {\n                    if(*it==g[u][0]&&flag)flag=0;//\u90a3\u4e2a\u7559\u5728\u539f\u5b50\u6811\u7684\u519b\u961f\u4e0d\u8981\u5230\u9996\u90fd\u53bb\n                    else q1[++l1]=(*it)-w;\n                }\n            }\n            else q[t++]=v,vis[v]=1;\n        }\n    }\n    for(ll i=1;i<=n;++i)\n    \tif(!vis[i]&&g[i].size())\n    \t{\n    \t\tfor(std::vector<ll>::iterator it=g[i].begin()+1;it!=g[i].end();++it)\n    \t\t\tq1[++l1]=(*it)-fw[0][i];\n\t\t}\n    if(l1<l2)return 0;//\u5728\u9996\u90fd\u7684\u519b\u961f\u6570\u4e0d\u8db3\u672a\u88ab\u5c01\u9501\u7684\u5b50\u6811\u6570\u80af\u5b9a\u6ca1\u5e0c\u671b\n    std::sort(q1+1,q1+l1+1);std::sort(q2+1,q2+l2+1);\n    while(l2>0)//\u56e0\u4e3al1>=l2,\u6240\u4ee5l2>0\u5219l1>0\n    {\n    \tif(q1[l1]<q2[l2])return 0;//\u65e0\u6cd5\u5c01\u9501\n    \t--l1,--l2;\n\t}\n    return 1;\n}\nint main()\n{\n    n=read();\n    ull sum=0;\n    for(ll i=1;i<n;++i)\n    {\n        ll u=read(),v=read(),w=read();\n        sum+=w;\n        adde(u,v,w);\n        adde(v,u,w);\n    }\n    fa[0][1]=1;\n    build(1,1);\n    mul();\n    m=read();\n    for(ll i=1;i<=m;++i)a[i]=read();\n    ull l=0,r=sum,mid;\n    while(l<r)\n    {\n        mid=(l+r)>>1;\n        if(check(mid))r=mid;\n        else l=mid+1;\n    }\n    if(!check(r))printf(\"-1\");//\u65e0\u89e3\n    else printf(\"%llu\",r);\n    return 0;\n}\n```",
        "postTime": 1558762715,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "# \u75ab\u60c5\u63a7\u5236\u9898\u89e3\n\n## \u524d\u8a00\n#### \u524d\u540e\u65ad\u65ad\u7eed\u7eed\u4e00\u4e2a\u661f\u671f\uff0c\u7ec8\u4e8e\u628a\u8fd9\u9898\u7ed3\u679c\u4e86\u3002\u671f\u95f4\u65e0\u6570\u6b21WA\uff0c\u4eca\u5929\u665a\u4e0a\u6211\u7ec8\u4e8e\u628a\u5b83\u60f3\u6e05\u695a\u4e86\u3002\u5728\u6b64\u5199\u7bc7\u9898\u89e3\uff0c\u65e2\u662f\u7eaa\u5ff5\uff0c\u4e5f\u662f\u603b\u7ed3\u3002\n\n## \u9898\u76ee\u5927\u610f\n\n#### \u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u8fd9\u4e00\u9898\u662f\u8981\u6c42\u4e00\u4e2a\u6700\u77ed\u65f6\u95f4t\u3002\u6ee1\u8db3\u519b\u961f\u5728t\u79d2\u5185\u53ef\u4ee5\u79fb\u52a8\u5230\u9664\u4e86\u6839\u7684\u70b9\uff0c\u4f7f\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u90fd\u88ab\u519b\u961f\u8986\u76d6\u3002\n\n## \u5206\u6790\n\n1\uff1a\u65f6\u95f4t\u4e00\u5b9a\u662f\u6ee1\u8db3\u5355\u8c03\u6027\u7684\uff0c\u56e0\u4e3a\u8fb9\u6743\u975e\u8d1f\uff0c\u5982\u679ct\u65f6\u95f4\u5185\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u8bdd\uff0c\u90a3\u4e48\u5927\u4e8et\u7684\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u3002\n\n2\uff1a\u6240\u4ee5\u4e8c\u5206\u65f6\u95f4t\u7406\u6240\u5f53\u7136\u3002\u65e2\u7136\u662f\u4e8c\u5206\uff0c\u90a3t\u4e00\u5b9a\u4e00\u5f00\u59cb\u6709\u4e2a\u754c\u9650\u3002\u4ec0\u4e48\u65f6\u5019\u4f1a\u65e0\u89e3\u5462\uff1f\u90a3\u5c31\u662f\u519b\u961f\u4e2a\u6570\u5c0f\u4e8e\u7b2c\u4e00\u5c42\u5b69\u5b50\u7684\u65f6\u5019\u3002\u4f60\u65e0\u8bba\u591a\u5927\u7684\u65f6\u95f4t\uff0c\u90fd\u4e0d\u53ef\u80fd\u8986\u76d6\u5b8c\u5168\u90e8\u7684\u5b69\u5b50\u3002\n\n3:\u5904\u7406\u5b8c\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u6765\u60f3\u60f3\u4e8c\u5206\u7684\u754c\u9650\u3002\u4e00\u4e2a\u5bbd\u677e\u7684\u6700\u5927\u65f6\u95f4t\u662f\u6240\u6709\u8fb9\u6743\u548c\u3002\u8fd9\u4e2atmax\u4e00\u5b9a\u53ef\u4ee5\u8ba9\u6240\u6709\u519b\u961f\u79fb\u52a8\u5230\u7b2c\u4e00\u5c42\u3002\n\n4\uff1a\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5224\u65ad\u5f53\u524d\u7684t\u662f\u5426\u6ee1\u8db3\u8981\u6c42\u3002\u6211\u4eec\u8bb0\u5f55dep[x]\u8868\u793ax\u8fd9\u4e2a\u70b9\u5230\u6839\u7684\u6df1\u5ea6\uff0c\u53ef\u4ee5\u663e\u7136\u5f97\u77e5\uff0c\u519b\u961f\u4e00\u5b9a\u662f\u5c3d\u529b\u5728t\u65f6\u95f4\u5185\u8df3\u5230dep\u5c0f\u7684\u70b9\u3002\n\n5\uff1a\u90a3\u4e48\u95ee\u9898\u53c8\u6765\u4e86\uff0c\u56e0\u4e3a\u4e0d\u80fd\u9a7b\u624e\u5728\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u679c\u5177\u5907\u8df3\u5230\u6839\u7684\u5b9e\u529b\u7684\u8bdd\uff0c\u4e00\u5b9a\u8981\u9009\u4e00\u4e2a\u7b2c\u4e00\u5c42\u7684\u5b69\u5b50\u4e0b\u653e\u3002\u8fd9\u5c31\u9762\u4e34\u4e00\u4e2a\u519b\u961f\u662f\u5f85\u5728\u5f53\u524d\u5b50\u6811\uff0c\u8fd8\u662f\u9014\u5f84\u6839\u5230\u53e6\u5916\u4e00\u9897\u5b50\u6811\u7684\u6289\u62e9\u3002\n\n6\uff1a\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u4e8c\u5206\u7684\u65f6\u95f4\u662fcurt\u3002\u6211\u4eec\u628a\u5728curt\u65f6\u95f4\u5185\u53ef\u4ee5\u5230\u8fbe\u6839\u7684\u519b\u961f\u62ff\u51fa\u6765\uff0c\u7b97\u51fa\u8fd8\u5269\u4f59\u7684\u65f6\u95f4lst\u3002\u5bf9\u4e8e\u6839\u7684\u6bcf\u4e00\u4e2a\u5b50\u6811x\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2astruct x\u8868\u793a\u5728\u8fd9\u4e2a\u5b50\u6811\u5185\u7684\u519b\u961f\uff0c\u5230\u5b50\u6811\u6839x\u540e\u8fd8\u5269\u4e0b\u7684\u65f6\u95f4\u7684\u6700\u5c0f\u503cmov\u3002\u56e0\u4e3a\u5982\u679c\u8981\u662f\u5f85\u5728\u5b50\u6811\u91cc\u7684\u8bdd\uff0c\u4e00\u5b9a\u662f\u6700\u4e0d\u80fd\u5411\u4e0a\u8dd1\u7684\u5f85\u5728\u5b50\u6811\u91cc\u3002\n\n7\uff1a\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5b50\u6811\u662f\u88ab\u5b83\u81ea\u5df1\u7684c\u7684\u503c\u8986\u76d6\uff0c\u8fd8\u662f\u53e6\u5916\u4e00\u4e2a\u5b50\u6811\u7684\u70b9\u8df3\u8fc7\u6765\u8986\u76d6\u5b83\u5462?\u8fd9\u91cc\u662f\u6700\u4e0d\u597d\u60f3\u7684\u5730\u65b9\u3002\u5148\u8bf4\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u6811x\uff0cx\u4e2d\u7684mov\u5982\u679c<=2*dep[x]\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b50\u6811\u4e00\u5b9a\u662f\u88abmov\u8986\u76d6\uff0c\u800c\u4e0d\u662f\u88ab\u5176\u4ed6\u6811\u7684\u70b9\u8986\u76d6\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5982\u679cmov<=2*dep[x]\u7684\u8bdd\uff0c\u90a3\u4e48mov\u5bf9\u5e94\u7684\u8fd9\u4e2a\u519b\u961f\uff0c\u5982\u679c\u518d\u8df3\u4e0a\u6839\u7684\u8bdd\uff0c\u5b83\u53ea\u80fd\u8986\u76d6dep\u6bd4x\u66f4\u5c0f\u7684\u3002\u76f8\u5f53\u4e8e\u8d44\u6e90\u7684\u6d6a\u8d39\uff0c\u4e0d\u5982\u5c31\u5f85\u5728x\u8ba9\u5b83\u7684\u4ef7\u503c\u80fd\u6700\u88ab\u5229\u7528\u4e0a\u3002\n\n8: \u6211\u4eec\u628a\u4e0d\u80fd\u8df3\u5230\u6839\u7684\u519b\u961f\u7684\u6700\u5927\u63d0\u5347\u7684\u8ddd\u79bb\u5904\u6253\u4e00\u4e2atag, \u4e00\u6b21dfs\u53ef\u4ee5\u6c42\u51fa\u8fd8\u6709\u54ea\u4e9b\u4e00\u5c42\u5b50\u8282\u70b9\u9700\u8981\u88ab\u8986\u76d6\u3002\u518d\u628a\u7b2c7\u6b65\u63d0\u5230\u7684\u70b9\u5355\u72ec\u5904\u7406\u3002\u5bf9\u4e8e\u53ef\u4ee5\u8df3\u5230\u6839\uff0c\u4e14\u6ca1\u6709\u88ab\u7b2c7\u6b65\u4f7f\u7528\u7684\u519b\u961f\u70b9\u3002\u628a\u5b83\u6309lst\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7b2c\u4e00\u5c42\u5b50\u8282\u70b9\u4e5f\u6309dep\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u4f9d\u6b21\u66b4\u529b\u914d\u5bf9\u5c31\u884c\u4e86\u3002\u603b\u7684\u590d\u6742\u5ea6\u662fO\uff08n(logn)^2\uff09\u7684\u6837\u5b50\u3002\n\n9\uff1a\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u89e3\u51b3\u4e86\u8fd9\u9053\u9898\u7684\u6240\u6709\u601d\u7ef4\u96be\u9898\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u4e9b\u7ec6\u8282\u5566\uff01\n\n10:\u5173\u4e8e\u5411\u4e0a\u8df3\u7684\u64cd\u4f5c\u3002\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528\u6811\u4e0a\u500d\u589e\u6765\u5b9e\u73b0\u3002\u8fd9\u9898\u8fd8\u8981\u6ce8\u610f\u7684\u662fsort\u7684\u5148\u540e\uff0c\u56e0\u4e3asort\u8fc7\u540e\uff0c\u519b\u961f\u7684\u6b21\u5e8f\u5c31\u6539\u53d8\u4e86\uff0c\u4e4b\u524d\u7684used\u6807\u8bb0\u5c31\u662f\u9519\u7684\u3002\u88ab\u8fd9\u5751\u4e86\u597d\u51e0\u6b21\u3002\n\n#### \u9644\u4e0a\u672c\u4eba\u5de8\u4e11\u65e0\u6bd4\u7684\u4ee3\u7801\u3002\u5b9e\u5728\u662f\u5220\u5220\u6539\u6539\u6539\u70e6\u4e86\uff0c\u4e00\u76f4\u5728\u8865\u4e01\u8865\u4e01\u3002\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\nconst int N=5e5+5;\nusing namespace std;\ntypedef long long LL;\nint v[N],nxt[N<<1],head[N],w[N<<1],tot;\nint n,m,cnt;\nint f[N][20],dep[N],p[N],fp[N],visv[N],tag[N],ttot;\nint used[N];\nLL L,R,wdep[N];\nstruct poi{\n    int x,lst,pos,mov;\n}a[N],b[N],c[N];\ninline void add(int x,int y,int z){\n    v[++tot]=y;\n    w[tot]=z;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\ninline int read(){\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint opt=0;\ninline void dfs(int x,int fa){\n\tvisv[x]=1;\n    for(int i=1;i<=19;++i){\n        if(dep[x]>=(1<<i))f[x][i]=f[f[x][i-1]][i-1];\n        else break;\n    }\n    for(int i=head[x];i;i=nxt[i]){\n        int y=v[i];\n        if(y!=fa&&!visv[y]){\n            dep[y]=dep[x]+1;\n            wdep[y]=wdep[x]+w[i];\n            f[y][0]=x;\n            dfs(y,x);\n        }\n    }\n}\ninline void dfs3(int x,int fa){\n    int cur=-1;\n    for(int i=head[x];i;i=nxt[i]){\n        int y=v[i];\n        if(y!=fa){\n            dfs3(y,x);\n            if(cur==-1)cur=tag[y];\n            else cur&=tag[y];\n        }\n    }\n    if(cur!=-1)tag[x]|=cur;\n}\ninline int cmp(const poi &a,const poi &b){\n    return a.lst>b.lst;\n}\ninline int check(LL mxt){\n    for(int i=1;i<=m;++i){\n        LL curt=mxt;int curp=p[i],fl=0;\n        for(int j=19;j>=0;--j){\n            if((dep[curp]>=(1<<j))&&(curt>=wdep[curp]-wdep[f[curp][j]])){\n                if(f[curp][j]==1){//can to the capital\n                    a[++ttot].x=i;\n                    a[ttot].pos=curp;\n                    a[ttot].mov=curt-(wdep[curp]-wdep[fp[curp]]);\n                    a[ttot].lst=curt-wdep[curp];\n                    fl=1;\n                    break;\n                }\n                else{//up\n                   curt-=(wdep[curp]-wdep[f[curp][j]]);\n                   curp=f[curp][j];\n                }\n            }\n        }\n        if(!fl){\n            tag[curp]=1;\n        }\n    }\n    dfs3(1,1);\n    int j=1,jj=1;//j\u8868\u793a\u5f53\u524d\u626b\u5230\u4e86\u54ea\u4e2a\u519b\u961f,jj\u5c31\u662f\u4e00\u4e2a\u5224\u65ad\u6807\u5fd7\u3002\n    sort(a+1,a+1+ttot,cmp);//\u4ece\u5927\u5230\u5c0f\u6309lst\u6392\u5e8f\n    for(int i=1;i<=ttot;++i){\n        used[i]=0;\n        if(!c[a[i].pos].x||c[a[i].pos].lst>a[i].mov){//\u8ba1\u7b97\u5b50\u6811\u5185\u7684\u6700\u5c0flst\n            c[a[i].pos].x=i;\n            c[a[i].pos].lst=a[i].mov;\n        }\n    }\n    for(int i=1;i<=cnt;++i){\n        if(!tag[b[i].x]){\n            if(c[b[i].x].x&&c[b[i].x].lst<=2*b[i].lst){//\u5982\u7b2c7\u6b65\n\t\t\t\tused[c[b[i].x].x]=1;\n\t\t\t\tcontinue;\n            }\n            while(j<=ttot&&(a[j].lst<b[i].lst||used[j]))j++;\n            if(j<=ttot&&a[j].lst>=b[i].lst)used[j]=1;\n            else{\n\t\t\t\tjj=0;\n\t\t\t\tbreak;\n            }\n        }\n    }\n    if(jj)return 1;\n    else return 0;\n}\ninline void reset(){\n    ttot=0;\n    for(int i=1;i<=n;++i)tag[i]=0,used[i]=1;\n    for(int i=1;i<=n;++i)c[i].x=0;\n}\ninline void dfs2(int x,int fa,int id){\n    fp[x]=id;\n    for(int i=head[x];i;i=nxt[i]){\n        int y=v[i];\n        if(y!=fa){\n            dfs2(y,x,id);\n        }\n    }\n}\nint main(){\n    n=read();\n    for(int i=1;i<n;++i){\n        int x=read(),y=read(),z=read();\n        add(x,y,z);add(y,x,z);\n        if(x==1||y==1){\n            if(x>y)swap(x,y);\n            b[++cnt].lst=z;\n            b[cnt].x=y;\n        }\n        R+=z;\n    }\n    R++;\n    sort(b+1,b+1+cnt,cmp);\n    dfs(1,1);\n    m=read();\n    for(int i=1;i<=m;++i)p[i]=read();\n    if(cnt>m){puts(\"-1\");return 0;}\n    for(int i=head[1];i;i=nxt[i]){\n        int y=v[i];\n        dfs2(y,1,y);\n    }\n    while(L<R){\n        reset();\n        LL mid=(L+R)/2;\n        if(check(mid))R=mid;\n        else L=mid+1;\n    }\n    printf(\"%lld\\n\",L);\n    return 0;\n}\n\n```\n\n",
        "postTime": 1539425935,
        "uid": 27370,
        "name": "Chasingdreams",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "### \u75ab\u60c5\u63a7\u5236\n#### \u9898\u9762\u63cf\u8ff0\n[luogu\u94fe\u63a5](https://www.luogu.org/problem/P1084)\n#### \u9898\u89e3\n* \u5173\u952e\u8bed\u53e5\uff1a\u8bf7\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a\u5c0f\u65f6\u624d\u80fd\u63a7\u5236\u75ab\u60c5\u3002\u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u519b\u961f\u53ef\u4ee5\u540c\u65f6\u79fb\u52a8\u3002\u7a0d\u5fae\u5b66\u8fc7\u8bed\u6587\u7684\u540c\u5b66\u4e00\u770b\u5c31\u77e5\u9053\uff0c\u8fd9\u662f\u4e00\u9053\u9898\u76ee\u9700\u8981\u4e8c\u5206\u7b54\u6848\u3002\u7a0d\u5fae\u770b\u770b\u4ee3\u7801\uff1a\n* \u6211\u4eec\u4e8c\u5206\u6700\u957f\u65f6\u95f4\u3002\u8d2a\u5fc3\u7684\u60f3\uff0c\u5728\u957f\u5ea6$mid$\u7684\u9650\u5236\u4e0b\uff0c\u6bcf\u4e00\u652f\u519b\u961f\u5c3d\u91cf\u5730\u5f80\u6df1\u5ea6\u6d45\u7684\u5730\u65b9\u8df3\u663e\u7136\u662f\u6700\u4f18\u7684\uff08\u56e0\u4e3a\u53ef\u4ee5\u8986\u76d6\u66f4\u591a\u7684\u8282\u70b9\uff09\u3002\u6211\u4eec\u7528\u500d\u589e\u4f18\u5316\u8fd9\u4e2a\u5411\u4e0a\u8df3\u7684\u8fc7\u7a0b\u3002\u6bcf\u4e2a\u519b\u961f\u8df3\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u6807\u8bb0\u76f8\u5e94\u7684\u8282\u70b9\u5df2\u88ab\u8986\u76d6\u3002\n* \u4f46\u662f\u9898\u76ee\u8fdc\u4e0d\u6b62\u8fd9\u4e48\u7b80\u5355\u3002\u4e00\u652f\u519b\u961f\u82e5\u662f\u5728\u9650\u5236\u5185\u5df2\u7ecf\u8df3\u5230\u4e86\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u4ed6\u4f9d\u7136\u6709\u95f2\u60c5\u9038\u5fd7\u7ed5\u8fc7\u8ddf\u8282\u70b9\u8986\u76d6\u8fd8\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u8ddf\u8282\u70b9\u7684\u5b50\u8282\u70b9\u3002\u6211\u4eec\u53d6\u6d88\u5bf9\u8fd9\u4e9b\u519b\u961f\u7684\u6807\u8bb0\uff0c\u5e76\u4e14\u628a\u4ed6\u4eec\u989d\u5916\u4fdd\u5b58\u4e0b\u6765\uff08\u7528\u4e00\u4e2a\u624b\u5199\u7684\u961f\u5217\u8c8c\u4f3c\u975e\u5e38\u65b9\u4fbf\uff09\u3002\u4fdd\u5b58\u65f6\u8981\u6ce8\u610f\u540c\u65f6\u8bb0\u5f55\u4e0b\u4ed6\u4eec\u989d\u5916\u53ef\u4ee5\u8d70\u7684\u8def\u7a0b\u4e0e\u672c\u6765\u53ef\u4ee5\u8986\u76d6\u7684\u8282\u70b9\uff08\u5728\u4e0d\u8d8a\u8fc7\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff09\u3002\u63a5\u4e0b\u6765\u6709\u4e00\u4e2a\u975e\u5e38\u5de7\u5999\uff08\u4f46\u540c\u65f6\u4e5f\u5f88\u81ea\u7136\uff09\u7684\u64cd\u4f5c\uff0c\u5c06\u90a3\u4e9b\u6709\u95f2\u60c5\u9038\u5fd7\u7684\u519b\u961f\u4ee5\u5269\u4f59\u8def\u7a0b\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57**\u4ece\u5c0f\u5230\u5927**\u6392\u5e8f\u3002\u5e76\u4e14\u8bb0\u5f55\u4e0b\u8fd8\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u6839\u7684\u5b50\u8282\u70b9\u4e0e\u4ed6\u4eec\u548c\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u5e76\u6309\u7167\u8ddd\u79bb\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u6211\u4eec\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u8fd9\u4e9b\u519b\u961f\uff0c\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u8d2a\u5fc3\uff1a\n\n     1. \u5982\u679c\u5f53\u524d\u519b\u961f\u539f\u6765\u7ba1\u8f96\u7684\u8282\u70b9\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u90a3\u4e48\u8fd9\u652f\u519b\u961f\u9009\u62e9\u4e0d\u8d8a\u8fc7\u6839\u8282\u70b9\uff0c\u800c\u662f\u5b88\u5728\u539f\u6765\u7684\u8282\u70b9\u4e0a\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u6309\u7167\u5269\u4f59\u8def\u7a0b\u8fdb\u884c\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u8bc1\u660e\u8fd9\u79cd\u8d2a\u5fc3\u4e00\u5b9a\u6700\u4f18\u3002\n     2. \u5426\u5219\uff0c\u6211\u4eec\u4ece\u672a\u88ab\u8986\u76d6\u7684\u8282\u70b9\u4e2d\u9009\u62e9*\u6700\u5408\u9002*\u7684\u4e0e\u8be5\u519b\u961f\u914d\u5bf9\u3002\n\u8fd9\u4e00\u6bb5\u5b9e\u73b0\u770b\u4ee3\u7801\u3002\n* \u8fdb\u884c\u4e86\u4ee5\u4e0a\u64cd\u4f5c\u4e4b\u540e\uff0c\u626b\u4e00\u904d\uff0c\u82e5\u8fd8\u5b58\u5728\u6ca1\u6709\u88ab\u8986\u76d6\u7684\u6839\u7684\u5b50\u8282\u70b9\uff0c\u5219\u5224\u5b9a\u8fd9\u4e2a$mid$\u4e0d\u5408\u6cd5\u3002\n\n\u770b\u770b\u4ee3\u7801\u5427\uff1a\n```cpp\n#prag\\\nma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\n\nconst int N = 5e4 + 3;\n\ninline int read()\n{\n\tint s = 0,f = 1; char ch;\n\twhile(!isdigit(ch = getchar())) if(ch == '-') f = -1;\n\twhile(isdigit(ch)) s = s * 10 + ch - '0',ch = getchar();\n\treturn s * f;\n}\n\ntypedef std::pair<int,int> pzk;\n\nstd::queue<int> q;\npzk stora0[N],stora1[N]; /*\u4e24\u4e2a\u961f\u5217*/\n\nint ver[N << 1],nxt[N << 1],head[N],edge[N << 1],tot = 0;\n\ninline void add(int x,int y,int z)\n{\n\tver[++tot] = y,edge[tot] = z,nxt[tot] = head[x],head[x] = tot;\n}\n\nint dis[N][20],t,fa[N][20],tag[N],tail0,tail1,n,m,\n    cities[N],ans{-1},left{INT_MAX},right,mid;\n\n/*\u500d\u589e\u9884\u5904\u7406*/\ninline void prepare()\n{\n\tt = log2(n) + 1;\n\tq.push(1);\n\twhile(q.size()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor(int i = head[x];i;i = nxt[i]) {\n\t\t\tif(ver[i] == 1 || dis[ver[i]][0]) continue;\n\t\t\tfa[ver[i]][0] = x,dis[ver[i]][0] = edge[i];\n\t\t\tfor(int j = 1;j <= t;j++) {\n\t\t\t\tfa[ver[i]][j] = fa[fa[ver[i]][j - 1]][j - 1];\n\t\t\t\tdis[ver[i]][j] = dis[fa[ver[i]][j - 1]][j - 1] +\n\t\t\t\t\tdis[ver[i]][j - 1];\n\t\t\t}\n\t\t\tq.push(ver[i]);\n\t\t}\n\t}\n}\n\n/*\u500d\u589e\u5411\u4e0a\u8df3*/\ninline void jump(int idx,int cons)\n{\n\t/*FIXME*/\n\tfor(int i = t;i >= 0;i--)\n\t\tif(fa[idx][i] > 1 && cons - dis[idx][i] >= 0) {\n\t\t\tcons -= dis[idx][i];\n\t\t\tidx = fa[idx][i];\n\t\t}\n\tif(cons - dis[idx][0] > 0 && fa[idx][0] == 1)\n\t\tstora0[++tail0] = {cons - dis[idx][0],idx};\n\telse tag[idx] = 1;\n}\n\n/*\u8fdb\u884c\u521d\u6b65\u67d3\u8272\u4e4b\u540e\uff0c\u4e0a\u4f20\u6807\u8bb0\u5230\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u4ee5\u4fbf\u540e\u9762\u7684\u5224\u5b9a\u3002*/\nvoid paint(int x,int fa)\n{\n\tif(tag[x]) return;\n\n\tbool flag = 1,has = 0;\n\tfor(int i = head[x];i;i = nxt[i]) {\n\t\tif(ver[i] == fa) continue;\n\t\tpaint(ver[i],x);\n\t\thas = 1,flag &= tag[ver[i]];\n\t}\n\ttag[x] = flag & has;\n}\n\n/*\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684*/\ninline bool check(int cons)\n{\n\tfor(int i = 1;i <= n;i++) tag[i] = 0;\n\ttail0 = 0,tail1 = 0;\n\tfor(int i = 1;i <= m;i++) jump(cities[i],cons);\n\n\tpaint(1,0);\n\tfor(int i = head[1];i;i = nxt[i]) if(!tag[ver[i]])\n\t\tstora1[++tail1] = {edge[i],ver[i]};\n\n\tstd::sort(stora0 + 1,stora0 + 1 + tail0);\n\tstd::sort(stora1 + 1,stora1 + 1 + tail1);\n\n\tint ptr = 1;\n\tfor(int i = 1;i <= tail0;i++) {\n\t\tif(!tag[stora0[i].second])\n\t\t\ttag[stora0[i].second] = 1;\n\t\telse if(ptr <= tail1 && stora0[i].first >= stora1[ptr].first)\n\t\t\ttag[stora1[ptr].second] = 1; /*FIXME*/\n\t\twhile(ptr <= tail1 && tag[stora1[ptr].second])\n\t\t\tptr++;\n\t}\n\treturn ptr > tail1;\n}\n\ninline void chkMin(int& x,int y)  {x = std::min(x,y);}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"army.in\",\"r\",stdin);\n\tfreopen(\"army.out\",\"w\",stdout);\n#endif\n\tn = read();\n\tfor(int i = 1,u,v,w;i < n;i++) {\n\t\tu = read(),v = read(),w = read();\n\t\tadd(u,v,w),add(v,u,w);\n\n\t\tchkMin(left,w),right += w;\n\t}\n\n\tm = read();\n\tfor(int i = 1;i <= m;i++) *(cities + i) = read();\n\n\tprepare();\n\n\twhile(left <= right) {\n\t\tmid = (left + right) >> 1;\n\t\tif(check(mid)) right = mid - 1,ans = mid;\n\t\telse left = mid + 1;\n\t}\n\n\tprintf(\"%d\",ans);\n\n\texit(0);\n}\n\n```\n\n",
        "postTime": 1571539575,
        "uid": 28366,
        "name": "tomtom",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u5176\u4ed6\u9898\u89e3\u4e2d\u7684\u601d\u8def\u5df2\u7ecf\u5f88\u6e05\u6670\u4e86\uff0c\u6211\u5c31\u628a\u7ec6\u8282\u7a81\u51fa\u4e00\u4e0b\uff0c\n\u6bd5\u7adf\u662fdebug\u4e86\u4e00\u5929\u7684~~\u60e8\u75db~~\u4f53\u4f1a\n\n- \u82e5\u79bb\u6839\u7684\u513f\u5b50\u6570\u591a\u4e8e\u519b\u961f\u6570\uff0c\u4e00\u5b9a\u65e0\u6cd5\u63a7\u5236\uff0c\u76f4\u63a5\u8f93\u51fa -1\n- \u7b2c\u4e00\u904ddfs\u786e\u5b9a\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\uff08\u9898\u76ee\u4e2d\u7ed9\u7684\u4e0d\u662f\u5355\u5411\u8fb9\uff09\n- \u5efa\u56fe\u65f6\u9700\u8981\u8bb0\u5f55\u53f6\u5b50\u8282\u70b9\n- \u6709\u4e9b\u519b\u961f\u5230\u6839\u4ee5\u540e\u8981\u8003\u8651\u662f\u5426\u9000\u56de\n\n\t1. \u5982\u679c\u5230\u6839\u540e\u7684\u5269\u4f59\u8def\u7a0b\u4e0d\u80fd\u652f\u6301\u5b83\u56de\u53bb \u4e14 \u539f\u672c\u6240\u5728\u7684\u5b50\u6811\u9700\u8981\u63a7\u5236\uff0c\u5c31\u5c06\u5b83\u9000\u56de\u3002$\\color{green}\\text{\u82e5\u8981\u5176\u4ed6\u519b\u961f\u6765\u9a7b\u624e\uff0c\u6b64\u519b\u961f\u53c2\u4e0e\u5206\u914d\uff0c\u90a3\u4e48\u5176\u4ed6\u519b\u961f\u5269\u4f59\u65f6\u95f4\u66f4\u591a}$\n    $\\color{green}\\text{\uff0c\u8fd8\u4e0d\u5982\u7528\u5176\u4ed6\u519b\u961f\u53c2\u4e0e\u5206\u914d\uff0c\u5c06\u8fd9\u4e2a\u519b\u961f\u9000\u56de}$\n   \n   1. \u5982\u679c\u5230\u6839\u540e\u7684\u5269\u4f59\u8def\u7a0b\u80fd\u652f\u6301\u5b83\u56de\u53bb \u4e14 \u539f\u672c\u6240\u5728\u7684\u5b50\u6811\u9700\u8981\u63a7\u5236\uff0c\u5c31\u4ee4\u4e4b\u53c2\u4e0e\u5206\u914d\u3002$\\color{green}\\text{\u53cd\u6b63\u53ef\u4ee5\u56de\u5230\u5b50\u6811\uff0c\u5c31\u5145\u5206\u5229\u7528\u5b83\u7684\u5269\u4f59\u65f6\u95f4}$\n\n------------\n\n```\n#include<bits/stdc++.h>\n#define int long long \nusing namespace std;\nint m,n,u,v,w,l,r;\nint army[50010];      //\u519b\u961f\u9a7b\u624e\u70b9\nint dep[50010];       //\u6df1\u5ea6\nint fa[50010];       //\u7236\u4eb2\nint Fa[50010];       //\u79bb\u6839\u6700\u8fd1\u7684\u7956\u5148\nint f[50010][20];     //\u8df32^j\u6b65\u5230\u8fbe\u7684\u7956\u5148\nint dis[50010][20];    //\u4e0a\u4e00\u884c\u5bf9\u5e94\u8ddd\u79bb\nbool tag[50010];      //\u63a7\u5236\u6807\u8bb0\nint cnt;           //\u6839\u7684\u513f\u5b50\u7684\u4e2a\u6570\nint fri[50010];      //\u4e0e\u67d0\u70b9\u76f8\u8fde\u7684\u8fb9\u7684\u4e2a\u6570\uff081\u662f\u53f6\u5b50\uff09\n\nstruct ty\n{\n\tint next;\n\tint v;\n\tint l;\n}edge[50010*2];\nint head[50010*2];    \n \nint ctt;  \nvoid add(int u,int v,int w)\n{\n\tif(u==1) cnt++;\n\tedge[++ctt].next=head[u];\n\tedge[ctt].l=w;\n\tedge[ctt].v=v;\n\thead[u]=ctt;\n}\n\nvoid dfs1(int x,int fat,int dist,int FA)       //find depth\n{ //cout<<x<<\" \"<<fat<<endl;\n\tif(fat==1) FA=x;\n\tfa[x]=fat;\n\tf[x][0]=fat;\n\tdis[x][0]=dist;\n\tdep[x]=dep[fat]+dist;\n\tFa[x]=FA;\n\tfor(int j=1;j<20;j++)\n\t{\n\t\tf[x][j]=f[f[x][j-1]][j-1];\n\t\tdis[x][j]=dis[x][j-1]+dis[f[x][j-1]][j-1];\n\t} \n\tfor(int i=head[x];i;i=edge[i].next)\n\t{\n\t\tif(edge[i].v==fat) continue;\t\n\t\tdfs1(edge[i].v,x,edge[i].l,FA);\n\t}\n}         //\u627e\u5230\u6bcf\u70b9\u5bf9\u5e94\u7684\u7236\u4eb2\u548c\u7956\u5148\uff0c\u540c\u65f6\u500d\u589e\u9884\u5904\u7406\n\nvoid jump(int pos,int step)\n{\n\tfor(int i=19,j=pos,r=step;i>=0;i--)\n\t{\n\t\tif(f[j][i]>1&&dis[j][i]<=r)\n\t\t{\n\t\t\tr-=dis[j][i];\n\t\t\tj=f[j][i];\n\t\t\ttag[j]=1;\n//\t\t\tcout<<j<<endl;\n\t\t}\t\n\t}\n}                  //\u519b\u961f\u5411\u4e0a\u63d0\n\n\n\ninline bool dfs2(int x)         //1\uff1a\u9700\u8981\u9a7b\u624e \n{\n\tif(tag[x]) return 0;\n\tif(fri[x]==1) return 1;      //\u53f6\u5b50\n\tfor(int i=head[x];i;i=edge[i].next)\n\t{\n\t\tif(tag[edge[i].v]||edge[i].v==fa[x]) continue;\n\t\tif(dfs2(edge[i].v)) return 1;\n\t}\n\treturn 0;\n}\n\nstruct tp           //\u519b\u961f \n{\n\tint from,rest;\n\tbool operator < (const tp y) const\n\t{\n\t\treturn rest>y.rest;\n\t}\n}canmove[50010];\nint num;\n\n\nbool lesstolarge(tp a,tp b)\n{\n\treturn a.rest<b.rest;\n}\n\npriority_queue<int> q;\nbool judge(int step)\n{\n\tmemset(tag,0,sizeof(tag));\n\tmemset(canmove,0,sizeof(canmove));\n\tnum=0;\t\t  //\u80fd\u79fb\u5230\u6839\u7684\u519b\u961f\u4e2a\u6570 \n\twhile(!q.empty()) q.pop();\n    \t\t\t\t\t\t//\u6e05\u7a7a\uff01\uff01\uff01\n\tfor(int i=1;i<=m;i++ )\n\t{\n\t\tint pos=army[i];\n\t\t\n\t\tif(dep[pos]<=step)\n\t\t{\n\t\t\tnum++;   \n\t\t\tcanmove[num].rest=step-dep[pos];\n\t\t\tcanmove[num].from=Fa[pos];\n\t\t}\n\t\tif(dep[pos]>step) \n\t\t{\n\t\t\ttag[pos]=1;     //\u8981\u8bb0\u5f97\u6807\u8bb0\u519b\u961f\uff08\u4e0d\u80fd\u63d0\u5230\u6839\u7684\uff09\u9a7b\u624e\u7684\u4f4d\u7f6e\n\t\t\tjump(pos,step);\n\t\t}\n\t}\n    \n    \n\tsort(canmove+1,canmove+num+1,lesstolarge);\n\tfor(int i=1;i<=num;i++)\n\t{\n\t\tif( dfs2(canmove[i].from) && dep[canmove[i].from]>canmove[i].rest)\n\t\t{\n\t\t\ttag[canmove[i].from]=1;\n\t\t\tcanmove[i].rest=-1;\n\t\t}\n\t}\n         //\u9000\u56de\n    \n\tsort(canmove+1,canmove+num+1);\n\t\n\tfor(int i=head[1];i;i=edge[i].next)\n\t{\t\n\t\tint to=edge[i].v;\n\t\tif(dfs2(to))\n\t\t{//cout<<to<<endl;\n\t\t\tq.push(dep[to]);\n\t\t}\n\t}\n\tint it=1;\n\twhile(!q.empty())\n\t{\n\t\tint dee=q.top();\n\t\tq.pop();\n\t\tif(it>num) return 0;\n\t\tif(canmove[it].rest<dee) return 0;\n\t\tit++; \n\t}\n\treturn 1;\n}\n\n\nsigned main()\n{\n\tscanf(\"%lld\",&n);\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tscanf(\"%lld%lld%lld\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t\tadd(v,u,w);\n\t\tfri[u]++;fri[v]++;\n\t\tr+=w;\n\t}\n\tscanf(\"%lld\",&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%lld\",&army[i]);\n\t} \n//\tfor(int i=head[1];i;i=edge[i].next) cout<<edge[i].v<<endl;\n\tdfs1(1,1,0,1);\n\tif(cnt>m) \n\t{\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\n\twhile(l<=r)\n\t{\n\t\tint mid=l+(r-l)/2;\t\n//\t\tprintf(\"%lld %lld %lld %d\\n\",l,r,mid, judge(mid));\n\t\tif(judge(mid)) r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%lld\",l);\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1562494147,
        "uid": 157489,
        "name": "wwwsy",
        "ccfLevel": 0,
        "title": "\u75ab\u60c5\u63a7\u5236"
    },
    {
        "content": "\u8fd9\u4e2a\u9898\u4ee5\u524d\u5199\u8fc7\u4e00\u904d\uff0c\u73b0\u5728\u518d\u6765\u5199\uff0c\u611f\u89c9\u4ee5\u524d\u611f\u89c9\u7279\u522b\u4e0d\u597d\u5199\u7684\u7ec6\u8282\u73b0\u5728\u597d\u4e9b\u591a\u4e86\uff0c\u8fd8\u662f\u6709\u8fdb\u6b65\u5427\u3002\n\n\u8fd9\u4e2a\u9898\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f**\u8d2a\u5fc3+\u4e8c\u5206**\u3002\u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u65f6\u95f4\uff0c\u76f4\u63a5\u6765\u6c42\u95ee\u9898\u5c06\u4f1a\u53d8\u5f97\u5341\u5206\u9ebb\u70e6\uff0c\u4f46\u662f\u5982\u679c\u8f6c\u6362\u4e3a\u4e8c\u5206\u7b54\u6848\u6765\u5224\u65ad\u53ef\u884c\u6027\uff0c\u95ee\u9898\u5c31\u4f1a\u7b80\u5316\u8bb8\u591a\u3002\n\n\u81f3\u4e8e\u8d2a\u5fc3\u7684\u8bdd\uff0c\u5f88\u5bb9\u6613\u53d1\u73b0\u6bcf\u4e2a\u70b9\u5c3d\u91cf\u5f80\u4e0a\u9762\u8df3\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u91cc\u5411\u4e0a\u8df3\u7684\u8bdd\u6211\u4eec\u7528**\u500d\u589e**\u6765\u641e\u5c31\u662f\u4e86\u3002\u4f46\u9898\u76ee\u4e2d\u6709\u4e2a\u9650\u5236\u6761\u4ef6\u5c31\u662f\uff1a**\u6839\u7ed3\u70b9\u4e0d\u80fd\u9a7b\u624e\u519b\u961f\uff01\uff01**\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u8ba9\u6240\u6709\u70b9\u5c3d\u91cf\u5f80\u4e0a\u9762\u8df3\uff0c\u6700\u591a\u8df3\u5230$deep[x]=2$\u7684\u4f4d\u7f6e\u3002\u4e4b\u540e\u8003\u8651\u9898\u76ee\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u600e\u4e48\u89e3\u51b3\u3002\n\n\u6bd4\u8f83\u76f4\u63a5\u7684\u60f3\u6cd5\u5c31\u662f\u6240\u6709\u70b9\u90fd\u8df3\u5230\u6839\u8282\u70b9\uff0c\u7136\u540e\u8d2a\u5fc3\u8fdb\u884c\u201c\u5206\u914d\u201d\u3002\u4f46\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff0c\u6709\u4e9b\u70b9\u8df3\u5230\u6839\u8282\u70b9\u56de\u4e0d\u6765\u600e\u4e48\u529e?\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u80c6\u731c\u60f3\uff1a**\u7559\u4f4f\u4e00\u4e2a\u56de\u4e0d\u53bb\u7684\u6df1\u5ea6\u4e3a2\u7684\u7ed3\u70b9\uff0c\u5176\u4f59\u70b9\u5c31\u50cf\u4e4b\u524d\u90a3\u6837\u8d2a\u5fc3\u8fdb\u884c\u5206\u914d**\u3002\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u662f\u5bf9\u7684\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7b80\u7565\u8bc1\u660e\uff1a\n\n\u5982\u679c\u4e00\u4e2a\u70b9$x$\u8df3\u5230\u6839\u8282\u70b9\u4f46\u65e0\u6cd5\u56de\u53bb\uff0c\u6b64\u65f6\u53e6\u5916\u4e00\u4e2a\u70b9$y$\u6765\u7ba1\u8f96$x$\u4e4b\u524d\u7684\u6240\u5728\u7684\u5b50\u6811\uff0c$x$\u73b0\u5728\u53ef\u80fd\u53bb\u7ba1\u8f96\u53e6\u5916\u4e00\u4e2a\u4ee5$z$\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\uff0c\u6ee1\u8db3$dis(z,root)<dis(x,root)$\u3002\u6211\u4eec\u5f88\u5bb9\u6613\u77e5\u9053\uff0c$y$\u80af\u5b9a\u4e5f\u80fd\u53bb\u7ba1\u8f96$z$\u6240\u5728\u5b50\u6811\u7684\u3002\u56e0\u4e3a$y$\u80fd\u591f\u79fb\u52a8\u7684\u8ddd\u79bb\u66f4\u957f\uff0c\u6240\u4ee5$y$\u5bf9\u4e8e$x$\u6709\u66f4\u591a\u7684\u53ef\u80fd\u6027~~(\u524d\u9014\u66f4\u52a0\u5149\u660e)~~\n\n\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053\u6211\u4eec\u7684\u8d2a\u5fc3\u7b56\u7565\u4e0d\u4f1a\u4f7f\u7b54\u6848\u53d8\u5dee\u7684\uff0c\u90a3\u601d\u8def\u5c31\u662f\u8fd9\u6837\u4e86\u3002\n\n\u81f3\u4e8e\u4ee3\u7801\u7ec6\u8282\uff0c\u9996\u5148\u7b2c\u4e00\u6b21dfs\u9884\u5904\u7406\u51fa\u500d\u589e\u7684\u4fe1\u606f\uff0c\u4e4b\u540e\u4e8c\u5206\u8fdb\u884ccheck\uff0c\u91cc\u9762\u5d4c\u5957\u4e00\u4e2adfs\u6c42\u51fa\u54ea\u4e9b\u6df1\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u7559\u4f4f\u4e86\u519b\u961f\u3002\u6700\u540e\u5176\u4f59\u7684\u70b9\u8d2a\u5fc3\u53bb\u5206\u914d\u5c31\u884c\u4e86\u3002\u4e2d\u9014\u7ef4\u62a4\u7684\u4fe1\u606f\u53ef\u80fd\u6709\u70b9\u591a\uff0c\u591a\u5f00\u51e0\u4e2a\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b= =\u3002\n\n\u4ee3\u7801\u5982\u4e0b~~(\u81ea\u8ba4\u4e3a\u6bd4\u8f83\u597d\u61c2)~~\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N = 50005;\nint n, m;\nint a[N], c[N];\nint f[N][20], deep[N] ;\nll dis[N][20];\nstruct Edge{\n    int v, next, w;\n}e[N << 1];\nstruct Army{\n    int id;\n    ll res;\n    bool operator < (const Army &A)const {\n        return res < A.res ;\n    }\n}b[N], d[N], k[N];\nint head[N], tot;\nvoid adde(int u, int v, int w) {\n    e[tot].v = v; e[tot].w = w; e[tot].next = head[u]; head[u] = tot++;\n}\nvoid dfs1(int u, int fa) {\n    deep[u] = deep[fa] + 1;\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v;\n        if(v == fa) continue ;\n        dis[v][0] = e[i].w;\n        f[v][0] = u;\n        for(int j = 1; j <= 17; j++) {\n            f[v][j] = f[f[v][j - 1]][j - 1] ;\n            dis[v][j] = dis[v][j - 1] + dis[f[v][j - 1]][j - 1] ;\n        }\n        dfs1(v, u) ;\n    }\n}\nbool vis[N] ;\nvector <int> node[N];\nint cnt, num;\nbool dfs2(int u, int fa) {\n    int sz = node[u].size();\n    bool ok = 1, in = 0;\n    for(int i = head[u]; i != -1; i = e[i].next) {\n        int v = e[i].v;\n        if(v == fa) continue ;\n        in = 1;\n        if(!dfs2(v, u)) ok = 0;\n    }\n    if(!in) ok = 0;\n    if(deep[u] == 2 && ok) vis[u] = 1;\n    if(deep[u] == 2 && sz) {\n        int st = 0;\n        if(!vis[u] && b[node[u][0]].res < 2 * dis[u][0]) st++, vis[u] = 1;\n        for(int i = st; i < sz; i++) {\n            d[++cnt].id = b[node[u][i]].id;\n            d[cnt].res = b[node[u][i]].res;\n        }\n    }\n    return ok || sz;\n}\nbool check(ll x) {\n    for(int i = 1; i <= n; i++) node[i].clear(), vis[i] = 0;\n    for(int i = 1; i <= m; i++) b[i].id = a[i] ;\n    for(int i = 1; i <= m; i++) {\n        ll res = x;\n        int now = b[i].id;\n        for(int j = 17; j >= 0; j--) {\n            if(deep[f[now][j]] >= 2 && dis[now][j] <= res) {\n                res -= dis[now][j] ;\n                now = f[now][j] ;\n            }\n        }\n        b[i].id = now; b[i].res = res ;\n    }\n    num = cnt = 0;\n    sort(b + 1, b + m + 1);\n    for(int i = 1; i <= m; i++) node[b[i].id].push_back(i) ;\n    dfs2(1, 0) ;\n    for(int i = 1; i <= n; i++)\n        if(deep[i] == 2 && !vis[i])\n            k[++num].res = dis[i][0], k[num].id = i;\n    for(int i = 1; i <= cnt; i++) {\n        int now = d[i].id ;\n        if(dis[now][0] < d[i].res) d[i].res -= dis[now][0];\n        else d[i].res = 0;\n    }\n    sort(d + 1, d + cnt + 1) ;\n    sort(k + 1, k + num + 1) ;\n    if(cnt < num) return false;\n    for(int i = 1, j = 1; i <= cnt; i++) {\n        if(d[i].res >= k[j].res) {\n            vis[k[j].id] = 1;\n            j++;\n        }\n    }\n    bool ok = 1;\n    for(int i = 1; i <= n; i++) \n        if(deep[i] == 2 && !vis[i]) ok = 0;\n    return ok;\n}\nint main() {\n    ios::sync_with_stdio(false); cin.tie(0) ;\n    cin >> n;\n    memset(head, -1, sizeof(head)) ;\n    ll l = 0, r = 0, mid;\n    for(int i = 1; i < n; i++) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        adde(u, v, w); adde(v, u, w) ;\n        r += w;\n    }\n    ll tmp = r;\n    dfs1(1, 0) ;\n    cin >> m;\n    for(int i = 1; i <= m; i++) cin >> a[i] ;\n    while(l < r) {\n        mid = (l + r) >> 1;\n        if(check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    if(l == tmp) cout << -1;\n    else cout << r ;\n    return 0;\n}\n\n```",
        "postTime": 1558412661,
        "uid": 29563,
        "name": "heyuhhh",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "[\u9898\u76ee\u94fe\u63a5](https://www.luogu.org/problemnew/show/P1084)\n\n\u8fd9\u9898\u601d\u7ef4\u96be\u5ea6\u8f83\u9ad8 \u6211\u89c9\u5f97\u662f\u597d\u9898 \u6545\u5199\u4e0b\u6b64\u9898\u89e3 \u987a\u4fbf\u52a0\u6df1\u5bf9\u6b64\u9898\u7684\u7406\u89e3\n\n### 0.\u7279\u522b\u8bf4\u660e\n\n\u672c\u7bc7\u9898\u89e3\u4e2d\u201c\u5835\u4f4f\u201d\u662f\u6307\u67d0\u4e00\u7ed3\u70b9\u4e0a\u6709\u519b\u961f\u6216\u8005\u5b83\u7684\u5b50\u7ed3\u70b9\u88ab\u201c\u5835\u4f4f\u201d\u7684\u72b6\u51b5\u3002\n\n\u201c\u5835\u4f4f\u201d\u6574\u68f5\u6811\u5219\u662f\u6839\u8282\u70b9\u88ab\u5835\u4f4f\u7684\u72b6\u51b5\u3002\n\n\u505a\u6b64\u9898\u524d\u9700\u8981\u5148\u638c\u63e1\uff1a\u8d2a\u5fc3 \u4e8c\u5206\u7b54\u6848 \u500d\u589e \u57fa\u672c\u56fe\u8bba\u77e5\u8bc6\n\n### 1.\u9898\u76ee\u5206\u6790\n\n#### (1 \u89e3\u9898\u601d\u8def\n\n\u8fd9\u9898\u4e2d\u6c42\u79fb\u52a8\u65f6\u95f4\u6700\u957f\u7684\u519b\u961f\u7684\u6700\u77ed\u519b\u961f \u6240\u4ee5\u6211\u4eec\u679c\u65ad\u7528\u4e8c\u5206\u7b54\u6848\u3002\u81f3\u4e8e$r$\u7684\u5927\u5c0f...\u628a\u9053\u8def\u957f\u5ea6\u5168\u90fd\u52a0\u4e00\u904d \u5c31\u662f\u4e86\n\n#### (2 \u6709\u5173check\u51fd\u6570\n\n\u5982\u4f55\u5224\u65ad\u5728$mid$\u65f6\u95f4\u5185\u519b\u961f\u80fd\u5835\u4f4f\u6574\u68f5\u6811\uff1f \u9996\u5148\u6211\u4eec\u77e5\u9053\u7684\u662f\uff0c\u519b\u961f\u7684\u5728\u6811\u4e2d\u7684\u6df1\u5ea6\u8d8a\u4f4e\u8d8a\u597d\u3002\u56e0\u4e3a\u6df1\u5ea6\u8d8a\u4f4e\uff0c\u5b50\u6811\u8d8a\u5927\uff0c\u80fd\u63a7\u5236\u7684\u70b9\u5c31\u8d8a\u591a\u3002\u90a3\u4e48\u6211\u4eec\u8ba9\u519b\u961f\u5c3d\u53ef\u80fd\u5730\u5728$mid$\u65f6\u95f4\u5185\u5f80\u4e0a\u8df3\u3002\u7531\u4e8e\u6b64\u9898\u662f$n$\u4e2a\u70b9$n$-$1$\u6761\u8fb9\uff0c\u6240\u4ee5\u6bcf\u4e2a\u70b9\u90fd\u53ea\u6709\u4e00\u4e2a\u7956\u5148\u3002\u5982\u679c\u8981\u5f80\u4e0a\u8df3\u7684\u8bdd\uff0c\u5c31\u662f\u5728\u4e00\u6761\u94fe\u4e0a\u8df3\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u3002\n\n\u8df3\u5b8c\u4e4b\u540e\uff0c\u519b\u961f\u53ef\u4ee5\u5206$2$\u79cd\uff1a$1$.\u65e0\u6cd5\u8df3\u5230\u6839\u7ed3\u70b9\u7684 \u5bf9\u4e8e\u8fd9\u79cd\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u5b83\u6240\u5728\u7684\u70b9\u548c\u5b83\u7684\u5b50\u6811\u201c\u9501\u4f4f\u201d\uff0c\u5c31\u4e0d\u7528\u7ba1\u4e86\u3002 $2$.\u80fd\u8df3\u5230\u6839\u7ed3\u70b9\u7684\u3002\u5f53\u519b\u961f\u8df3\u5230\u6839\u7ed3\u70b9\u65f6\uff0c\u5b83\u53ef\u80fd\u53ef\u4ee5\u53bb\u6839\u7ed3\u70b9\u7684\u5176\u4ed6\u5b50\u7ed3\u70b9\u3002\n\n\u6211\u4eec\u5904\u7406\u5b8c\u519b\u961f\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u5f53\u53ea\u6709\u7b2c$1$\u79cd\u519b\u961f\u65f6\uff0c\u8fd9\u68f5\u6811\u6709\u6ca1\u6709\u88ab\u5835\u4f4f\u3002\u5982\u679c\u88ab\u5835\u4f4f\u7684\u8bdd\uff0c\u5c31\u6ca1\u6709\u7b2c$2$\u79cd\u519b\u961f\u4ec0\u4e48\u4e8b\u4e86\u3002\u4f46\u662f\u5f53\u8fd9\u68f5\u6811\u6ca1\u6709\u88ab\u5835\u4f4f\u65f6...\u6211\u4eec\u53ef\u4ee5\u628a\u6839\u7ed3\u70b9\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u90fd\u770b\u4e00\u4e0b\u6709\u6ca1\u6709\u88ab\u5835\u4f4f\uff0c\u5982\u679c\u6ca1\u6709\u5835\u4f4f\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u6d3e\u7b2c$2$\u79cd\u519b\u961f\u53bb\u5835\u4f4f\u8fd9\u4e9b\u70b9\u3002\u6d3e\u9063\u519b\u961f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8d2a\u5fc3\u7684\u7b56\u7565\uff0c\u5f53\u6839\u7ed3\u70b9\u548c\u5b50\u7ed3\u70b9\u95f4\u7684\u9053\u8def\u6bd4\u8f83\u77ed\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6d3e\u5269\u4f59\u65f6\u95f4\u6bd4\u8f83\u77ed\u7684\u519b\u961f\u53bb\uff0c\u53cd\u4e4b\u5219\u6d3e\u5269\u4f59\u65f6\u95f4\u957f\u7684\u519b\u961f\u53bb\u3002\n\n\u5f53\u7b2c$2$\u79cd\u519b\u961f\u5168\u90e8\u6d3e\u9063\u5b8c\u540e\uff0c\u4f60\u9700\u8981\u770b\u4e00\u4e0b\u662f\u4e0d\u662f\u6839\u8282\u70b9\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u5168\u88ab\u5835\u4f4f\u4e86\u3002\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5728$mid$\u65f6\u95f4\u5185\u519b\u961f\u80fd\u5835\u4f4f\u6574\u68f5\u6811\u3002\n\n#### (3 \u5982\u4f55\u5224\u65ad-1\n\n\u5f88\u7b80\u5355\uff0c\u4f60\u53ea\u9700\u8981\u770b\u4e00\u4e0b\u6df1\u5ea6\u4e3a2\u7684\u70b9\u662f\u5426\u8d85\u8fc7$m$\u4e2a\u3002\u5982\u679c\u662f\u7684\u8bdd\uff0c\u519b\u961f\u592a\u5c11\uff0c\u4e0d\u53ef\u80fd\u5835\u4f4f\u6574\u68f5\u6811\u3002\n\n### 2.\u5751\u70b9\n\n\u5bf9\u4e8e\u6709\u7684\u7b2c\u4e8c\u79cd\u519b\u961f\uff0c\u5b83\u76f4\u63a5\u8df3\u5230\u6839\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u5c31\u597d\u4e86\u3002\uff08\u524d\u63d0\u662f\u5b50\u7ed3\u70b9\u6ca1\u6709\u88ab\u5835\u4f4f\uff09 \u81f3\u4e8e\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ee3\u7801\u7b2c93\u884c\u6709\u5199\u3002\n\n\u6b64\u9898\u7801\u91cf120\u884c\u5de6\u53f3~~\u4f46\u662f\u6211\u5199\u51fa\u4e86140\u884c~~\uff0c\u7c97\u5fc3\u4e00\u70b9\u7684\u8bddbug\u4f1a\u5f88\u591a....\n\n### 3.\u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=50005;\nstruct edge\n{\n\tint next,to,val;\n}e[N*2];\nstruct take\n{\n\tint pos,rest;\n}a[N],b[N];\nint f[N][21],cnt,dis[N][21],head[N],army[N],m,used[N],vis[N],dep[N];\nvoid add(int x,int y,int z)\n{\n\te[++cnt].to=y;\n\te[cnt].val=z;\n\te[cnt].next=head[x];\n\thead[x]=cnt;\n}\nvoid dfs(int x,int fa)\n{\n\tdep[x]=dep[fa]+1;\n\tfor(int i=1;i<=20;++i)\n\t{\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t\tdis[x][i]=dis[f[x][i-1]][i-1]+dis[x][i-1];\n\t}\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v!=fa)\n\t\t{\n\t\t\tf[v][0]=x; dis[v][0]=e[i].val;\n\t\t\tdfs(v,x);\n\t\t}\n\t}\n}\nvoid look(int x,int fa)\n{\n\tint flag=1;\n\tif(used[x]) return;\n\tfor(int i=head[x];i;i=e[i].next)\n\t{\n\t\tint v=e[i].to;\n\t\tif(v!=fa)\n\t\t{\n\t\t\tflag=0;\n\t\t\tlook(v,x);\n\t\t\tif(!used[v]) return;\n\t\t}\n\t}\n\tif(!flag) used[x]=1;\n}\nbool cmp(take x,take y)\n{\n\treturn x.rest<y.rest;\n}\nbool check(int x)\n{\n\tmemset(used,0,sizeof(used));\n\tmemset(vis,0,sizeof(vis));\n\tint sizea=0,sizeb=0;\n\tfor(int i=1;i<=m;++i) //\u7528\u500d\u589e\u8df3 \n\t{\n\t\tint p=army[i],cost=0;\n\t\tfor(int j=20;j>=0;--j)\n\t\t\tif(cost+dis[p][j]<=x && f[p][j]>1)\n\t\t\t{\n\t\t\t\tcost+=dis[p][j];\n\t\t\t\tp=f[p][j];\n\t\t\t}\n\t\tif(f[p][0]==1 && cost+dis[p][0]<=x) //\u7b2c\u4e8c\u79cd\u519b\u961f\n\t\t{\n\t\t\ta[++sizea].pos=p;\n\t\t\ta[sizea].rest=x-cost-dis[p][0];\n\t\t}\n\t\telse used[p]=1;\n\t}\t\n\tsort(a+1,a+sizea+1,cmp);\n \tfor(int i=head[1];i;i=e[i].next) \n\t{\n\t\tlook(e[i].to,1);\n\t\tif(!used[e[i].to])\n\t\t{\n\t\t\tb[++sizeb].pos=e[i].to;\n\t\t\tb[sizeb].rest=e[i].val;\n\t\t}\n\t}\n\tsort(b+1,b+sizeb+1,cmp);//\u8d2a\u5fc3\u7b56\u7565\n\tint j=1;\n\tfor(int i=1;i<=sizea;++i) \n\t{\n\t\tif(!vis[a[i].pos] && !used[a[i].pos]) vis[a[i].pos]=1; //\u7b2c93\u884c\u4ee3\u7801 \u76f4\u63a5\u8df3\u5230\u5b50\u7ed3\u70b9\u4e0a\n\t\telse if(a[i].rest>=b[j].rest)  vis[b[j].pos]=1; \n\t\twhile(j<=sizeb && vis[b[j].pos])\n\t\t\t++j;\n\t\tif(j>sizeb) return 1; \n\t}\n\treturn 0;\n}\nint read()\n{\n\tint x=0; char ch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n\treturn x;\n}\nint main()\n{\n\tint n,l=0,r=0;\n\tn=read();\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tint x,y,z;\n\t\tx=read(); y=read(); z=read();\n\t\tadd(x,y,z); add(y,x,z);\n\t\tr+=z;\n\t}\n\tdfs(1,0);\n\tm=read();\n\tfor(int i=1;i<=m;++i)\n\t\tarmy[i]=read();\n\tint ans=0,sum=0;\n\tfor(int i=1;i<=n;++i)\n\t\tif(dep[i]==2) ++sum;\n\tif(sum>m)\n\t{\n\t\tcout<<-1;\n\t\treturn 0;\n\t}\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)/2;\n\t\tif(check(mid))\n\t\t{\n\t\t\tr=mid-1; ans=mid;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1554480954,
        "uid": 90285,
        "name": "\u2468baka",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "## \u603b\u4f53\u601d\u8def\n\u5148\u8bf4\u8f93\u51fa-1\u7684\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u519b\u961f\u6570\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u65f6\u65e0\u6cd5\u5b8c\u6210\u63a7\u5236\uff0c\u8f93\u51fa-1\n\n\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u6c42\u6700\u5c0f\u65f6\u95f4\u5c31\u60f3\u5230\u4e86\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848\u3002\u4e8c\u5206\u9650\u5236\u7684\u65f6\u95f4t\uff0c\u770b\u662f\u5426\u6240\u6709\u519b\u961f\u662f\u5426\u80fd\u5728t\u65f6\u95f4\u5185\u5b8c\u6210\u79fb\u52a8\u3002\n\n\u90a3\u4e48\u65f6\u5019\u6d89\u53ca\u5230\u6811\u4e0a\u79fb\u52a8\uff0c\u4e3a\u4e86\u4e0d\u8d85\u65f6\uff0c\u6211\u4eec\u663e\u7136\u9700\u8981\u500d\u589e\u6765\u722c\u6811\u3002\n\n\u5269\u4e0b\u7684\u5c31\u662f\u600e\u4e48\u5224\u65ad\u80fd\u5426\u5728t\u65f6\u95f4\u5185\u5b8c\u6210\u79fb\u52a8\u4e86\uff0c\u8fd9\u9053\u9898\u4e3b\u8981\u5c31\u662f\u8fd9\u91cc\u70e6\u4eba\n\n\n------------\n## \u5224\u65ad\u505a\u6cd5\n\n\u5f88\u663e\u7136\u7684\u53ef\u4ee5\u60f3\u5230\uff0c\u6240\u6709\u519b\u961f\u90fd\u8981\u5c3d\u91cf\u5f80\u4e0a\u722c\uff0c\u56e0\u4e3a\u8d8a\u5f80\u4e0a\uff0c\u80fd\u63a7\u5236\u7684\u8282\u70b9\u5c31\u8d8a\u591a\u3002\n\n\u4e3b\u8981\u95ee\u9898\u5728\u4e8e\uff0c\u8981\u4e0d\u8981\u8de8\u5b50\u6811\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u80fd\u722c\u5230\u6839\u8282\u70b9\u7684\u519b\u961f\uff0c\u6211\u4eec\u8bb0\u4e0b\u4ed6\u5269\u4e0b\u7684\u65f6\u95f4\u548c\u539f\u5148\u722c\u4e0a\u6765\u7684\u5b50\u6811\u3002\u5982\u679c\u8fd9\u4e2a\u519b\u961f\u6240\u5728\u7684\u5b50\u6811\u5e76\u6ca1\u6709\u88ab\u63a7\u5236\uff0c\u5e76\u4e14\u4ed6\u5269\u4f59\u65f6\u95f4\u4e0d\u591f\u4ed6\u56de\u5230\u539f\u6765\u7684\u5b50\u6811\uff0c\u90a3\u4ed6\u5c31\u6839\u672c\u4e0d\u7528\u722c\u5230\u6839\u8282\u70b9\uff0c\u8ba9\u4ed6\u56de\u53bb\u63a7\u5236\u539f\u6765\u7684\u5b50\u6811\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3a\u5982\u679c\u4ed6\u4e0d\u56de\u53bb\uff0c\u5fc5\u7136\u9700\u8981\u53e6\u4e00\u4e2a\u5230\u8fbe\u6839\u8282\u70b9\u5e76\u4e14\u5269\u4f59\u65f6\u95f4\u5927\u4e8e\u4ece\u6839\u8282\u70b9\u5230\u4ed6\u539f\u6765\u7684\u5b50\u6811\u8ddd\u79bb\u7684\u519b\u961f\u6765\u4ee3\u66ff\u4ed6\u63a7\u5236\u90a3\u9897\u5b50\u6811\uff0c\u8fd9\u6837\u663e\u7136\u662f\u4e8f\u7684\uff0c\u56e0\u4e3a\u5f53\u524d\u519b\u961f\u7684\u5269\u4f59\u65f6\u95f4\u5c0f\u4e8e\u5b50\u6811\u5230\u6839\u8282\u70b9\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u5c0f\u4e8e\u80fd\u4ee3\u66ff\u4ed6\u63a7\u5236\u5b50\u6811\u7684\u519b\u961f\u7684\u5269\u4f59\u65f6\u95f4\u3002\u8ba9\u4e00\u4e2a\u5269\u4f59\u65f6\u95f4\u5927\u4e8e\u5f53\u524d\u519b\u961f\u7684\u519b\u961f\u4ee3\u66ff\u5f53\u524d\u519b\u961f\u63a7\u5236\u5f53\u524d\u5b50\u6811\u663e\u7136\u4e0d\u5408\u7406\u3002\n\n### SO~\n\u4e0a\u8ff0\u60c5\u51b5\u662f\u8981\u56de\u53bb\u6ef4\n\n\u600e\u4e48\u5199\u5462\uff1f\u628a\u722c\u5230\u6839\u8282\u70b9\u7684\u519b\u961f\u6309\u7167\u5269\u4f59\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u6ee1\u8db3\u4e0a\u8ff0\u60c5\u51b5\u7684\u70b9\uff0c\u628a\u4ed6\u539f\u5148\u6240\u5728\u7684\u5b50\u6811\u505a\u6807\u8bb0\uff0c\u5e76\u628a\u5269\u4f59\u65f6\u95f4\u8d4b\u4e3a-1\u5373\u53ef\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff1a\u5f53\u4e24\u4e2a\u70b9\u539f\u5148\u7684\u5b50\u6811\u4e3a\u540c\u4e00\u68f5\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u7136\u8ba9\u5269\u4f59\u65f6\u95f4\u5c0f\u7684\u90a3\u4e2a\u53bb\u63a7\u5236\u539f\u6765\u90a3\u68f5\u5b50\u6811\u5566\uff0c\u5927\u7684\u90a3\u4e2a\u540e\u626b\u5230\uff0c\u6b64\u65f6\u539f\u6765\u7684\u5b50\u6811\u5df2\u7ecf\u88ab\u5c0f\u7684\u519b\u961f\u63a7\u5236\u4e86\uff0c\u4ed6\u5c31\u4e0d\u7528\u56de\u53bb\u4e86\u3002\n\n### Then~\n\u90a3\u4e48\u5bf9\u4e8e\u4ecd\u7136\u8fd8\u5446\u5728\u6839\u8282\u70b9\u7b49\u4f60\u5b89\u6392\u7684\u519b\u961f\uff0c\u628a\u4ed6\u4eec\u6309\u7167\u5269\u4f59\u65f6\u95f4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u6839\u8282\u70b9\u5230\u6240\u6709\u6ca1\u6709\u88ab\u63a7\u5236\u7684\u5b50\u6811\u7684\u8ddd\u79bb\uff0c\u4e5f\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002\u7136\u540e\uff0c\u8d2a\u5fc3\u6bd4\u8f83\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e00\u4e2a\u6bd4\uff0c\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u6bd4\u2026\u2026\u6bd4\u5230\u4e00\u4e2a\u5269\u4f59\u65f6\u95f4\u5c0f\u4e8e\u5f53\u524d\u8bb0\u5f55\u4e0b\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8fc7\u4e0d\u53bb\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u7684\u9650\u5236\u65f6\u95f4t\u504f\u5c0f\uff0c\u5931\u8d25\u3002\u5982\u679c\u5168\u90e8\u6bd4\u5b8c\u4e86\uff0c\u90fd\u80fd\u591f\u8d70\u5230\uff0c\u90a3\u4e48\u5f53\u524dt\u53ef\u4ee5\u6210\u529f\u63a7\u5236\u75ab\u60c5\u3002\n\n\u7ec8\u4e8e\u8bf4\u5b8c\u4e86.....\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m,cnt=0;\nint d[50100];\nint head[100100],nxt[100100],to[100100],val[100100];\nlong long a[50100],f[22][50100],dis[20][50100];\nlong long tag[50100],rst[50100],q[50100],top[50100];\nstruct army\n{\n\tint rst,bac;\n}arr[50100];\nbool cmp(int x,int y)\n{\n\treturn x>y;\n}\nbool cmp1(army x,army y)\n{\n\treturn x.rst<y.rst;\n}\nbool cmp2(army x,army y)\n{\n\treturn x.rst>y.rst;\n}\nvoid addedge(int x,int y,int z)\n{\n\tcnt++;\n\tnxt[cnt]=head[x];\n\thead[x]=cnt;\n\tto[cnt]=y;\n\tval[cnt]=z;\n}\nvoid dfs(int u,int dep,int t)\n{\n\td[u]=dep,top[u]=t;//top\u8bb0\u5f55\u7684\u662f\u5f53\u524d\u8282\u70b9\u6240\u5728\u7684\u5b50\u6811\u9664\u6839\u8282\u70b9\u6700\u9876\u7aef\u7684\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u7528\u6765\u5224\u65ad\u5c5e\u4e8e\u6839\u8282\u70b9\u7684\u54ea\u68f5\u5b50\u6811\n\tfor(int i=head[u];i!=-1;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(u==1) t=v;\n\t\tif(!d[v]) dfs(v,dep+1,t),f[0][v]=u,dis[0][v]=val[i];\n\t}\n}\nbool can(int x,int fa)\n{\n\tif(tag[x]) return 1;\n\tint res=0;\n\tfor(int i=head[x];i!=-1;i=nxt[i])\n\t{\n\t\tif(to[i]==fa) continue;\n\t\tres++;\n\t\tif(!can(to[i],x)) return 0;\n\t}\n\tif(!res) return 0;\n\treturn 1;\n}\nbool check(long long t)\n{\n\tint num=0,k=0;\n\tmemset(tag,0,sizeof(tag));\n\tfor(int i=1;i<=m;i++)\n\t{ \n\t\tlong long x=a[i],tmp=t;\n\t\tfor(int j=20;j>=0;j--)//\u500d\u589e\u722c\u6811\n\t\t{\n\t\t\tif(!f[j][x]) continue;\n\t\t\tif(dis[j][x]>tmp) continue;\n\t\t\ttmp-=dis[j][x];\n\t\t\tif(f[j][x]==1)//\u5982\u679c\u4e0b\u4e00\u6b65\u8d70\u5230\u6839\u8282\u70b9\u4e86\u8fdb\u884c\u8bb0\u5f55\u5e76\u5f39\u51fa\n\t\t\t{\n\t\t\t\tarr[++num].rst=tmp,arr[num].bac=top[x];\n\t\t\t\tx=f[j][x];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tx=f[j][x];\n\t\t}\n\t\ttag[x]=1;//tag\u662f\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u6709\u6ca1\u6709\u88ab\u63a7\u5236\n\t}\n\ttag[1]=0;//\u8fd9\u4e2a\u4e0d\u6253\u4f1a\u6302\u5149\n\tif(can(1,1)) return 1;\n\tsort(arr+1,arr+num+1,cmp1);//\u6392\u5e8f\n\tfor(int i=1;i<=num;i++)\n\t\tif(arr[i].rst<dis[0][arr[i].bac])\n\t\t\tif(!can(arr[i].bac,1)) arr[i].rst=-1,tag[arr[i].bac]=1;//\u4e0d\u591a\u8bf4\u5df2\u7ecf\u8bf4\u4e86\u4e00\u5806\u4e86\n\tsort(arr+1,arr+num+1,cmp2);//\u518d\u6392\u5e8f\n\tfor(int i=head[1];i!=-1;i=nxt[i])\n\t\tif(!can(to[i],1)) q[++k]=val[i];//\u8bb0\u5f55\u6ca1\u6839\u8282\u70b9\u5230\u88ab\u63a7\u5236\u7684\u5b50\u6811\u8ddd\u79bb\n\tsort(q+1,q+k+1,cmp);//\u6392\u5e8f\n\tarr[num+1].rst=-0x7fffffff;\n\tfor(int i=1;i<=k;i++)\n\t\tif(q[i]>arr[i].rst) return 0;//\u8d2a\u5fc3\u6bd4\u8f83\n\treturn 1;\n}\nint main()\n{\n\tlong long l=0,r=0;\n\tmemset(f,0,sizeof(f));\n\tmemset(dis,0,sizeof(dis));\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d\",&n);\n\tint tmp=0;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint x,y,z;\n\t\tscanf(\"%d%d%d\",&x,&y,&z);\n\t\taddedge(x,y,z);\n\t\taddedge(y,x,z);\n\t\tr+=z;\n\t\tif(x==1 || y==1) tmp++;\n\t}\n\tf[0][1]=0,dfs(1,1,0);\n\tfor(int i=1;i<=20;i++)\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tf[i][j]=f[i-1][f[i-1][j]];\n\t\t\tdis[i][j]=dis[i-1][j]+dis[i-1][f[i-1][j]];\n\t\t}//\u500d\u589e\u9884\u5904\u7406\uff0c\u6c42\u51fa\u6570\u7ec4\n\tscanf(\"%d\",&m);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%d\",&a[i]);\n\tif(tmp>m)\n\t{\n\t\tprintf(\"-1\");\n\t\treturn 0;\n\t}\n\twhile(l<r)//\u4e8c\u5206\u7b54\u6848\n\t{\n\t\tlong long mid=(l+r)/2;\n\t\tif(check(mid)) r=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%lld\",l);\n\treturn 0;\n}\n```",
        "postTime": 1530867060,
        "uid": 21874,
        "name": "hicc0305",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u5982\u679c\u524d\u9762\u8fd9\u4e2a\u90e8\u5206\u8bb2\u7684\u4e0d\u591f\u6e05\u695a\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u5e95\u4e0b\u5404\u4f4ddalao\u4eec\u7684\u9898\u89e3\u3002\u53ef\u60dcdalao\u4eec\u7684\u4ee3\u7801\u90fd\u6ca1\u600e\u4e48\u6ce8\u91ca\uff0c\u6211\u8fd9\u79cd\u849f\u84bb\u8d39\u4e86\u597d\u5927\u52b2\u624d\u770b\u61c2QAQ \u6240\u4ee5\u540e\u9762\u7684\u4ee3\u7801\u6211\u5c3d\u529b\u6ce8\u91ca\u4e86\uff08\u867d\u7136\u7801\u98ce\u8be1\u5f02\uff09\uff0c\u5e0c\u671b\u5404\u4f4d\u80fd\u61c2\u3002\n\n\u672c\u9898\u8981\u6c42\u519b\u961f\u79fb\u52a8\u7684\u6700\u5927\u65f6\u95f4\u6700\u5c0f\uff1b\u800c\u4e8c\u5206\u7b54\u6848\u6cd5\u7ecf\u5e38\u53ef\u4ee5\u7528\u4e8e\u8fd9\u79cd\u95ee\u9898\u4e0a\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u4e8c\u5206\u65f6\u95f4tm\uff0c\u770b\u5728tm\u5185\uff0c\u662f\u5426\u80fd\u63a7\u5236\u75ab\u60c5\u3002\n\n\u663e\u7136\uff0c\u79bb\u6839\u8282\u70b9\u8d8a\u8fd1\uff0c\u6bcf\u4e2a\u519b\u961f\u80fd\u63a7\u5236\u7684\u70b9\u5c31\u8d8a\u591a\uff0c\u4e8e\u662f\u53ef\u4ee5\u5c3d\u53ef\u80fd\u7684\u628a\u519b\u961f\u4e0a\u63d0\u3002\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528lca\u7684\u500d\u589e\u601d\u60f3\uff0c\u4e0d\u9700\u8981\u4e00\u6b65\u4e00\u6b65\u5730\u8d70\u5230\u6839\u8282\u70b9\u3002\n\n\u5f53\u80fd\u8d70\u5230\u6839\u8282\u70b9\u7684\u513f\u5b50\u7684\u70b9\u90fd\u8d70\u5230\u4e86\uff08\u4e0d\u80fd\u505c\u5728\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u53ea\u80fd\u8d70\u5230\u5b83\u7684\u513f\u5b50\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u519b\u961f\u6765\u63a7\u5236\u90a3\u4e9b\u8fd8\u6ca1\u6709\u88ab\u5c01\u9501\u7684\u6839\u8282\u70b9\u7684\u513f\u5b50\u3002\u5bf9\u90a3\u4e9b\u4e0d\u80fd\u8d70\u5230\u6839\u8282\u70b9\u513f\u5b50\u7684\u70b9\uff0c\u53ea\u9700\u8981\u8ba9\u5b83\u505c\u5728\u539f\u5730\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u4e0a\u9762\u8bf4\u4e86\uff0c\u79bb\u6839\u8282\u70b9\u8d8a\u8fd1\uff0c\u6bcf\u4e2a\u519b\u961f\u80fd\u63a7\u5236\u7684\u70b9\u5c31\u8d8a\u591a\u3002\n\n\u5982\u679c\u8981\u627e\u5230\u6ca1\u6709\u88ab\u5c01\u9501\u7684\u6839\u8282\u70b9\u7684\u513f\u5b50\uff0c\u6216\u8005\u8bf4\u662f\u5224\u5b9a\u6240\u6709\u8282\u70b9\u662f\u5426\u88ab\u5c01\u9501\uff0c\u53ea\u9700\u8981\u4e00\u4e2adfs\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002\u4e4b\u540e\uff0c\u5c31\u9700\u8981\u628a\u519b\u961f\u901a\u8fc7\u6839\u8282\u70b9\u8f6c\u79fb\u5230\u672a\u88ab\u63a7\u5236\u7684\u8282\u70b9\u4e86\u3002\n\n\u8bb0\u5f55\u4e00\u4e2a\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u5230\u8fbe\u540e\u6240\u5269\u4f59\u7684\u65f6\u95f4\uff0c\u4e0e\u4e00\u4e2a\u4e0d\u80fd\u5230\u8fbe\u7684\u70b9\u5230\u6839\u8282\u70b9\u6240\u9700\u7684\u65f6\u95f4\u3002\u8fd9\u6837\uff0c\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\uff08\u6216\u8005\u53cd\u8fc7\u6765\uff09\u6392\u5e8f\uff0c\u7136\u540e\u53ea\u9700\u8981\u770b\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u6240\u5269\u4f59\u7684\u65f6\u95f4\u80fd\u4e0d\u80fd\u8fc7\u53bb\u5373\u53ef\u3002\n\n\u4e8e\u662f\u4e0a\u4ee3\u7801\uff1a\n```\n//\u5934\u6587\u4ef6\u5df2\u7701\u7565\n\n//\u9a9a\u64cd\u4f5c\uff0c\u8bb0\u5f97main()\u8981\u50cf\u4e0a\u9762\u90a3\u6837\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\nusing special_int = int;\n#define int long long\n\n//\u8fd9\u91cc\uff0cfa[x][i]\u5c31\u662flca\u7684\u500d\u589e\u6570\u7ec4\uff0c\u8bb0\u5f55\u7684\u662f\u4ecex\u5411\u4e0a\u8df32^i\u4e2a\u8282\u70b9\u6240\u80fd\u8df3\u5230\u7684\u4f4d\u7f6e\n//dist[x][i]\u5219\u662f\u4ecex\u5411\u4e0a\u8df32^i\u4e2a\u8282\u70b9\u6240\u9700\u8981\u7684\u65f6\u95f4\n//at[x]\u662f\u7b2cx\u4e2a\u519b\u961f\u521d\u59cb\u6240\u5728\u7684\u70b9\nint fa[50010][20], dist[50010][20], at[50010], n, m, atop, utop;\n\n//ctrl[x]\u6807\u660e\u4e86\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u63a7\u5236\uff0cvis\u662f\u5728\u500d\u589e\u7684\u65f6\u5019\u6807\u8bb0\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\nbool ctrl[50010], vis[50010];\n\n//\u5bf9\u4e8eable\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u6839\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5728nice()\u6240\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\uff0c\u53ef\u4ee5\u4ece\u522b\u5904\u8df3\u6765\uff08\u6216\u8005\u81ea\u5df1\u6709\uff09\u519b\u961f\n//\u5bf9\u4e8eunable\uff0c\u5c31\u662f\u5728nice()\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\u6ca1\u6cd5\u8df3\u6765\u519b\u961f\nstruct Arrival { int tm, at; } able[50010], unable[50010];\n\nstruct E { int to, w; }; //\u8fb9\nvector<E> vec[50010];\n\ninline bool operator<(const Arrival& a, const Arrival& b) {\n\treturn a.tm < b.tm;\n}\n\nvoid ability(int x = 1) { //\u5bfb\u627e\u6240\u6709\u63a7\u5236\u4e86\u7684\u70b9\n\t//\u5982\u679cvec[x].size() == 1\uff0c\u4e5f\u5c31\u662f\u5b83\u53ea\u4e0e\u5b83\u7236\u4eb2\u8fde\u63a5\u7684\u8bdd\uff0c\u5b83\u7684ctrl\u5e94\u8be5\u4fdd\u6301\u4e0d\u53d8\uff0c\u6b64\u5904\u5c31\u662fctrl[x] |= 0\n\tbool w = vec[x].size() - 1;\n\tfor (int i = 0; i < vec[x].size(); ++i) {\n\t\tconst E& v = vec[x][i]; //\u5199\u8d77\u6765\u65b9\u4fbf\u70b9\n\t\t//\u5982\u679c\u4e0d\u662f\u7236\u4eb2\uff0c\u7ee7\u7eed\u6269\u5c55\uff1b\u5728\u81ea\u5df1\u6ca1\u6709\u88ab\u63a7\u5236\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\u6ca1\u88ab\u63a7\u5236\uff0c\u81ea\u5df1\u5c31\u4e0d\u53ef\u80fd\u88ab\u63a7\u5236\n\t\tif (v.to != fa[x][0])\n\t\t\tability(v.to), w &= (x == 1 || ctrl[v.to]);\n\t}\n    //\u8fd9\u91cc\u8981\u7528\u6216\u7684\u539f\u56e0\u662f\uff0c\u53ef\u4ee5\u4fdd\u7559\u5728nice()\u91cc\u5df2\u7ecf\u5f97\u5230\u7684ctrl\u503c\n\tctrl[x] |= w;\n}\n\nbool nice(int tm) { //\u4e8c\u5206\u5224\u65ad\uff1a\u662f\u5426\u80fd\u5728\u65f6\u95f4tm\u4e4b\u5185\u63a7\u5236\u4f4f\u75ab\u60c5\n\tatop = utop = 0; //\u521d\u59cb\u5316\n\tmemset(ctrl, 0, sizeof(ctrl));\n\tfor (int w = 1; w <= m; ++w) {\n\t\tint x = at[w], usd = 0; //\u5f00\u59cb\u5f80\u4e0a\u63d0\u519b\u961f\uff1busd\u662f\u7528\u65f6\uff0cx\u662f\u5f53\u524d\u519b\u961f\u6240\u5728\u7684\u70b9\n\t\tfor (int i = 19; i >= 0; --i) //\u50cflca\u4e00\u6837\u500d\u589e\n\t\t\tif (fa[x][i] && (usd + dist[x][i]) <= tm)\n\t\t\t\tusd += dist[x][i], x = fa[x][i];\n\t\t//\u5982\u679c\u8fd9\u4e2a\u70b9\u5230\u4e0d\u4e86\u6839\uff0c\u90a3\u5c31\u628a\u5b83\u653e\u5728\u8fd9\u4e2a\u80fd\u5230\u8fbe\u7684\u6700\u9ad8\u70b9\u4e0a\n\t\tif (x != 1) ctrl[x] = 1;\n\t\telse { //\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u5230\u8fbe\u6839\n\t\t\t//\u5bfb\u627e\u5230\u8fbe\u6839\u4e4b\u524d\u7684\u90a3\u4e00\u4e2a\u70b9\uff0c\u5e76\u6807\u8bb0\u5230\u6839\u6240\u7528\u7684\u65f6\u95f4\n\t\t\table[atop].tm = tm - usd;\n\t\t\tfor (int i = (x = at[w], 19); i >= 0; --i)\n\t\t\t\tif (fa[x][i] > 1)\n\t\t\t\t\tx = fa[x][i];\n\t\t\table[atop++].at = x;\n\t\t}\n\t}\n\tability(); //\u6807\u8bb0\u51fa\u6240\u6709\u5df2\u7ecf\u63a7\u5236\u7684\u70b9\n\tfor (int i = 0; i < vec[1].size(); ++i) { //\u627e\u5230\u6240\u6709\u6839\u7684\u513f\u5b50\u91cc\u8fd8\u6ca1\u6709\u88ab\u63a7\u5236\u7684\u8282\u70b9\n\t\tint x = vec[1][i].to;\n\t\tif (!ctrl[x])\n\t\t\tunable[utop].tm = dist[unable[utop].at = x][0], ++utop;\n\t}\n\t//\u5982\u679c\u6839\u7684\u513f\u5b50\u91cc\uff0c\u6ca1\u88ab\u63a7\u5236\u7684\u6bd4\u5df2\u7ecf\u63a7\u5236\u7684\u8fd8\u591a\uff0c\u90a3\u4e00\u5b9a\u4e0d\u53ef\u80fd\u63a7\u5236\u75ab\u60c5\n\tif (utop > atop) return 0;\n\tsort(able, able + atop);\n\tsort(unable, unable + utop); //\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u8986\u76d6\n\tint dlt = 0; //dealt\u7684\u7f29\u5199\uff0c\u8868\u793a\u5df2\u7ecf\u6709dlt\u4e2aunable\u91cc\u7684\u5143\u7d20\u6709\u519b\u961f\u8df3\u6765\n\tfor (int i = 0; i < atop; ++i) {\n\t\t//\u5982\u679cable[i]\u81ea\u5df1\u6ca1\u88ab\u63a7\u5236\uff0c\u90a3\u5b83\u8fd9\u91cc\u7684\u519b\u961f\u9700\u8981\u7559\u7740\u6765\u63a7\u5236\u81ea\u5df1\n\t\tif (!ctrl[able[i].at]) ctrl[able[i].at] = 1;\n\t\t//\u5426\u5219\uff0c \u5c31\u53ef\u4ee5\u628a\u5b83\u8df3\u5230\u522b\u7684\u5730\u65b9\u53bb\n\t\telse if (able[i].tm >= unable[dlt].tm)\n\t\t\tctrl[unable[dlt].at] = 1, ++dlt;\n\t\t//\u8fd9\u4e2a\u771f\u7684\u662f\u767e\u601d\u4e0d\u5f97\u5176\u89e3\uff0c\u53ea\u80fd\u7167\u7740dalao\u4eec\u7684\u4ee3\u7801\u6572\u4e0a\u53bbQAQ\n\t\twhile (ctrl[unable[dlt].at] && dlt < utop) ++dlt;\n\t}\n\treturn dlt >= utop;\n}\n\nvoid doubleup(int x) { //\u9884\u5904\u7406\u500d\u589e\uff0c\u8bf7\u5ffd\u7565\u51fd\u6570\u540d\n\t//\u5c31\u662f\u6b63\u5e38\u7684lca\u9884\u5904\u7406\u6d41\u7a0b\n\tvis[x] = 1;\n\tfor (int i = 1; i < 20; ++i)\n\t\tfa[x][i] = fa[fa[x][i - 1]][i - 1],\n\t\tdist[x][i] = dist[fa[x][i - 1]][i - 1] + dist[x][i - 1];\n\tfor (int i = 0; i < vec[x].size(); ++i) //\u5904\u7406\u4e00\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\n\t\tif (!vis[vec[x][i].to])\n\t\t\tfa[vec[x][i].to][0] = x, dist[vec[x][i].to][0] = vec[x][i].w, doubleup(vec[x][i].to);\n}\n\nspecial_int main() {\n\tscanf(\"%lld\", &n);\n\tfor (int i = 1; i < n; ++i) {\n\t\tint u, v, w; scanf(\"%lld%lld%lld\", &u, &v, &w);\n\t\tvec[u].push_back({ v, w });\n\t\tvec[v].push_back({ u, w });\n\t}\n\tdoubleup(1); scanf(\"%lld\", &m);\n\tfor (int i = 1; i <= m; ++i)\n\t\tscanf(\"%lld\", at + i);\n\t//\u4ee5\u4e0a\uff0c\u8bfb\u5165\u548c\u9884\u5904\u7406\n\t//\u5982\u679c\u519b\u961f\u6570\u6bd4\u6839\u8282\u70b9\u513f\u5b50\u6570\u8fd8\u5c11\uff0c\u80af\u5b9a\u63a7\u5236\u4e0d\u4f4f\u75ab\u60c5\n\tif (m < vec[1].size()) {\n\t\tprintf(\"-1\\n\"); return 0;\n\t}\n\t//r\u7684\u90a3\u4e2a\u795e\u5947\u7684\u5341\u516d\u8fdb\u5236\u6570\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u7b97\u7b97\u770b\uff08\u624b\u52a8\u6ed1\u7a3d\uff09\n\t//a\u8868\u793a\u7b54\u6848\uff0c\u521d\u503c\u662fr\u7684\u4e00\u534a\uff0c\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u8fd9\u6837\n\tint l = 0, r = 0x6d7c2d8af5691, m, a = 0x36be16c57ab48;\n\twhile (l <= r) //\uff08\u53ef\u80fd\u6709\u70b9\u5947\u602a\u7684\uff09\u4e8c\u5206\n\t\t(nice(m = (l + r >> 1)) ? (r = m - 1, a = m) : l = m + 1);\n\tprintf(\"%lld\", a);\n\treturn 0;\n}\n```",
        "postTime": 1527430537,
        "uid": 64757,
        "name": "huang_yue",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u8d2a\u5fc3+\u6811\u4e0a\u500d\u589e\u5b9e\u73b0\u7684\uff0c\u597d\u50cf\u6ca1\u6709\u62ff\u90e8\u5206\u5206\u6570\u7684\u65b9\u6cd5\u3002\n\n\n\u672c\u9898\u9898\u610f\u662f\uff0c\u7ed9\u4e00\u68f5\u6709\u6839\u6811\uff0c\u4ee5\u53ca\u82e5\u5e72\u4e2a\u51fa\u53d1\u70b9\uff0c\u505a\u9898\u7684\u4eba\u81ea\u5df1\u4e3a\u8fd9\u4e9b\u51fa\u53d1\u70b9\u4e00\u4e00\u89c4\u5b9a\u7ec8\u70b9\uff0c\u4f7f\u5f97\uff1a\u6240\u6709\u7ed3\u70b9\u90fd\u88ab\u8fd9\u4e9b\u7ec8\u70b9\u6807\u8bb0\u8fc7\uff08\u89c4\u5b9a\u201c\u88ab\u6807\u8bb0\u8fc7\u201d\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u2460\u8fd9\u4e2a\u8282\u70b9\u672c\u8eab\u5c31\u662f\u7ec8\u70b9\uff0c\u2461\u8fd9\u4e2a\u8282\u70b9\u4f4d\u4e8e\u67d0\u4e2a\u7ec8\u70b9\u7684\u5b50\u6811\u91cc\uff0c\u2462\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u90fd\u88ab\u6807\u8bb0\u8fc7\uff09\uff0c\u5e76\u4e14\u5728\u8fd9\u4e9b\u51fa\u53d1\u70b9\u4e2d\uff0c\u8017\u8d39\u65f6\u95f4\u6700\u957f\u62b5\u8fbe\u7ec8\u70b9\u7684\u8282\u70b9\u8017\u8d39\u7684\u65f6\u95f4\u6700\u77ed\u3002\n\n\n\u4e00\u770b\u8981\u5bfb\u627e\u6700\u5927\u503c\u6700\u5c0f\uff0c\u5c31\u8054\u60f3\u5230\u4e86\u4e8c\u5206\u3002\u8fd9\u6837\uff0c\u95ee\u9898\u5c31\u88ab\u8f6c\u5316\u6210\u5224\u5b9ak\u65f6\u95f4\u4e4b\u5185\uff0c\u662f\u5426\u5b58\u5728\u7740\u4e00\u79cd\u7ec8\u70b9\u65b9\u6848\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u90fd\u88ab\u6807\u8bb0\u8fc7\u3002\n\n\n\u73b0\u5728\u6765\u8d2a\u5fc3\u7684\u601d\u8003\u4e00\u4e0b\u7ec8\u70b9\u600e\u4e48\u9009\u62e9\u662f\u6700\u4f18\u7684\u3002\u753b\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u597d\u662f\u4e0d\u8981\u8de8\u6839\u9009\u62e9\u7ec8\u70b9\uff0c\u5148\u628a\u672c\u5b50\u6811\u641e\u597d\uff0c\u5e76\u4e14\u5f53\u6240\u6709\u7684\u7ec8\u70b9\u5c3d\u53ef\u80fd\u9009\u62e9\u9760\u8fd1\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u80fd\u591f\u6807\u8bb0\u6700\u591a\u7684\u8282\u70b9\uff0c\u5e94\u8be5\u4e00\u76f4\u5f80\u4e0a\u8df3\u3002\u5047\u5982\u4e00\u68f5\u4ee5\u6839\u8282\u70b9\u7684\u513f\u5b50\u4e3a\u6839\u7684\u6811\u5df2\u7ecf\u88ab\u6807\u8bb0\u8fc7\uff0c\u800c\u5728\u8fd9\u68f5\u6811\u91cc\u9762\u6709\u4e00\u4e2a\u8fd8\u6ca1\u6709\u5206\u914d\u7684\u51fa\u53d1\u70b9\u6709\u80fd\u529b\u8d70\u5230\u6839\u8282\u70b9\u751a\u81f3\u8fd8\u6709\u5bcc\u88d5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7684\u7ec8\u70b9\u5c31\u53ef\u4ee5\u53bb\u89e3\u6551\u522b\u7684\u8fd9\u6837\u7684\u6811\uff0c\u53e6\u5f00\u51e0\u4e2a\u6570\u7ec4\u5b58\u50a8\u6709\u80fd\u529b\u6551\u4eba\u7684\u8282\u70b9/\u9700\u8981\u89e3\u6551\u7684\u8282\u70b9\u548c\u5b83\u4eec\u8fd8\u80fd\u8d70\u7684\u8ddd\u79bb/\u8fd8\u5dee\u7684\u8ddd\u79bb\uff0c\u53c8\u8d2a\u5fc3\u7684\u6309\u7167\u4ece\u5c0f\u5230\u5927\u5339\u914d\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u6cd5\nint ecnt, head[50007], to[100007], weight[100007], next[100007];\nvoid add(int u, int v, int w){\n    to[++ecnt]=v;\n    weight[ecnt]=w;\n    next[ecnt]=head[u];\n    head[u]=ecnt;\n    return ;\n}\n//DFS\u6c42\u6811\u4e0a\u500d\u589e\u5230\u8fbe\u7684\u8282\u70b9\uff0c\u9700\u8981\u8017\u8d39\u7684\u65f6\u95f4\nint anc[50007][17], cost[50007][17];\nvoid dfs(int u){\n    for(int i=1; i<17; i++){\n        anc[u][i]=anc[anc[u][i-1]][i-1];\n        cost[u][i]=cost[u][i-1]+cost[anc[u][i-1]][i-1];\n        if(anc[u][i]==0){\n            break;\n        }\n    }\n    for(int i=head[u]; i; i=next[i]){\n        int v=to[i];\n        if(v!=anc[u][0]){\n            anc[v][0]=u;\n            cost[v][0]=weight[i];\n            dfs(v);\n        }\n    }\n    return ;\n}\n//\u5904\u7406\u8fd9\u4e9b\u8282\u70b9\u5230\u5e95\u6709\u6ca1\u6709\u88ab\u6807\u8bb0\nint n, m;\nint army[50007];\nbool isok[50007];\nvoid fisok(int u){\n    bool f=0;\n    for(int i=head[u]; i; i=next[i]){\n        int v=to[i];\n        if(v!=anc[u][0]){\n            fisok(v);\n            if(isok[v]==0 && u!=1){\n                return ;\n            }\n            else{\n                f=1;\n            }\n        }\n    }\n    isok[u]=f;\n    return ;\n}\n//\u6709\u80fd\u529b\u6551\u4eba/\u5f85\u89e3\u6551\nstruct node{\n    int left, x;\n    friend bool operator < (node n1, node n2){\n        return n1.left<n2.left;\n    }\n}arrive[50007], unarrive[50007];\n//\u4e8c\u5206\u7684\u65f6\u5019\u7684\u5224\u5b9a\u51fd\u6570\nbool chk(int k){\n    memset(isok, 0, sizeof(isok));\n    int arrcnt=0, unarrcnt=0;\n    for(int i=1; i<=m; i++){\n        int cur=army[i], t=0;\n        //\u5c3d\u53ef\u80fd\u5f80\u4e0a\u8df3\n        for(int j=16; j>=0; j--){\n            if(anc[cur][j] && cost[cur][j]+t<=k){\n                t+=cost[cur][j];\n                cur=anc[cur][j];\n            }\n        }\n        //\u8d70\u4e0d\u5230\u6839\u5c31\u5230\u6b64\u4e3a\u6b62\u5427\n        if(cur!=1){\n            isok[cur]=1;\n        }\n        //\u627e\u8d70\u5230\u6839\u4e4b\u524d\u7684\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5904\u7406\u5269\u4f59\u80fd\u8d70\u7684\u8def\u7a0b\n        else{\n            arrive[++arrcnt].left=k-t;\n            cur=army[i];\n            for(int j=16; j>=0; j--){\n                if(anc[cur][j]>1){\n                    cur=anc[cur][j];\n                }\n            }\n            arrive[arrcnt].x=cur;\n        }\n    }\n    fisok(1);\n    //\u5904\u7406\u9700\u8981\u89e3\u6551\u7684\u8282\u70b9\u4ecd\u7136\u9700\u8981\u7684\u65f6\u95f4\n    for(int i=head[1]; i; i=next[i]){\n        int v=to[i];\n        if(isok[v]==0){\n            unarrive[++unarrcnt].left=weight[i];\n            unarrive[unarrcnt].x=v;\n        }\n    }\n    //\u65e0\u8bba\u5982\u4f55\u4e5f\u5339\u914d\u4e0d\u6210\u529f\n    if(unarrcnt>arrcnt){\n        return 0;\n    }\n    sort(arrive+1, arrive+1+arrcnt);\n    sort(unarrive+1, unarrive+1+unarrcnt);\n    //\u5c0f\u5bf9\u5c0f\u5927\u5bf9\u5927\u597d\u597d\u5339\u914d\n    int ind=1;\n    for(int i=1; i<=arrcnt; i++){\n        if(isok[arrive[i].x]==0){\n            isok[arrive[i].x]=1;\n        }\n        else{\n            if(unarrive[ind].left<=arrive[i].left){\n                isok[unarrive[ind].x]=1;\n                ind++;\n            }\n        }\n        while(isok[unarrive[ind].x] && ind<=unarrcnt){\n            ind++;\n        }\n    }\n    if(ind<=unarrcnt){\n        return 0;\n    }\n    return 1;\n}\nint main(){\n    scanf(\"%d\", &n);\n    for(int i=1; i<n; i++){\n        int u, v, w;\n        scanf(\"%d%d%d\", &u, &v, &w);\n        add(u, v, w);\n        add(v, u, w);\n    }\n    dfs(1);\n    scanf(\"%d\", &m);\n    for(int i=1; i<=m; i++){\n        scanf(\"%d\", &army[i]);\n    }\n    int chkcnt=0;\n    for(int i=head[1]; i; i=next[i]){\n        chkcnt++;\n    }\n    //\u6c38\u8fdc\u4e5f\u4e0d\u53ef\u80fd\u6210\u529f\n    if(chkcnt>m){\n        printf(\"-1\");\n    }\n    else{\n        int l=0, r=2e9, ans;\n        while(l<=r){\n            int mid=(l+r)>>1;\n            if(chk(mid)){\n                ans=mid;\n                r=mid-1;\n            }\n            else{\n                l=mid+1;\n            }\n        }\n        printf(\"%d\", ans);\n    }\n    return 0;\n}\n```",
        "postTime": 1515041634,
        "uid": 41707,
        "name": "zhuwanman",
        "ccfLevel": 0,
        "title": "\u9898\u89e3P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u9898\u89e3\u592a\u5c11\u4e86....\u6211\u6765\u5145\u4e2a\u6570.....\n\n\u505a\u4e86\u4e24\u5929\u7ec8\u4e8eA\u4e86....\u9898\u89e3\u5199\u4e86\u4e24\u904d...\u7b2c\u4e00\u904d\u6ca1\u4fdd\u5b58...\u8981\u5410\u8840....\n\n\u6b63\u9898....\n\n\u8d2a\u5fc3\uff0b\u4e8c\u5206\uff0b\u500d\u589e\n\n\n\u4e00\u3001\n\n\u2460\u600e\u6837\u8d70\u6700\u4f18\uff1f\u4e0d\u8d70\u6216\u8005\u662f\u5411\u6839\u8d70\u3002\u6df1\u5ea6\u8d8a\u6d45\u8986\u76d6\u7684\u8282\u70b9\u8d8a\u591a\u3002\n\n\n\u2461\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u65f6\u95f4\uff0c\u90a3\u4e48\u8be5\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u53ef\u884c\u6027\u95ee\u9898\uff0c\u5728\u9650\u5b9a\u7684\u65f6\u95f4\u5185\u80fd\u5426\u8986\u76d6\u3002\n\n\n\u2462\u4f55\u65f6\u65e0\u6cd5\u8986\u76d6\uff1f\u5f53\u519b\u961f\u6570\u5c0f\u4e8e\u6839\u7684\u513f\u5b50\u7684\u4e2a\u6570\u65f6\uff0c\u65e0\u6cd5\u8986\u76d6\u3002\n\n\n\u4e8c\u3001\u5982\u4f55\u5206\u914d\u519b\u961f\uff1f\n\n\n\u7531\u4e8e\u6211\u4eec\u4e8c\u5206\u4e86\u4e00\u4e2a\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u519b\u961f\u5728\u9650\u5b9a\u65f6\u95f4\u5185\u5c3d\u91cf\u5411\u6839\u8d70\u3002\u8fd9\u65f6\u6240\u6709\u7684\u519b\u961f\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\u3002\n\n\n\u80fd\u8d70\u5230\u6839\u8282\u70b9\u548c\u4e0d\u80fd\u8d70\u5230\u6839\u8282\u70b9\u7684\u3002\u5bf9\u4e8e\u4e0d\u80fd\u8d70\u5230\u6839\u7684\uff0c\u6211\u4eec\u5c3d\u91cf\u80fd\u8d70\u591a\u8fdc\u5c31\u8d70\u591a\u8fdc\uff0c\u6df1\u5ea6\u5c3d\u91cf\u7684\u6d45\uff0c\u8fd9\n\n\n\u6837\u6700\u4f18\u3002\u80fd\u8d70\u5230\u6839\u8282\u70b9\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u8fd9\u4e2a\u519b\u961f\u5728\u6211\u4eec\u4e8c\u5206\u7684\u65f6\u95f4\u5185\u8fd8\u80fd\u8d70\u591a\u8fdc\uff08\u8fd9\u6837\u4fbf\u4e8e\u4e4b\u540e\u7684\u519b\u961f\u5206\u914d\uff0c\n\n\n\u4e5f\u5c31\u662f\u4e00\u5f00\u59cb\u611f\u89c9\u5f88\u9ebb\u70e6\u7684\u4e00\u4e2a\u5b50\u6811\u7684\u519b\u961f\u8981\u53bb\u6839\u7684\u53e6\u4e00\u4e2a\u5b50\u6811\u7684\u95ee\u9898\u3002\uff09\u53ca\u8fd9\u4e2a\u519b\u961f\u662f\u4ece\u6839\u7684\u54ea\u4e2a\u5b50\u6811\u6765\n\n\n\u7684\u3002\u5e76\u4e14\u6211\u4eec\u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u90fd\u88ab\u5c01\u9501\u7684\u60c5\u51b5\uff0c\u89c6\u4e3a\u8fd9\u4e2a\u70b9\u4e5f\u88ab\u5c01\u9501\uff0c\u8fd9\u4e2a\u64cd\u4f5c\uff44\uff46\uff53\u5c31\u597d\u3002\u63a5\u4e0b\u6765\u6211\u4eec\n\n\n\u8981\u5206\u914d\u805a\u96c6\u5728\u6839\u8282\u70b9\u7684\u519b\u961f\u3002\u8fd9\u4e2a\u5206\u914d\u65b9\u6cd5\u4e3a\uff0c\u7528\u6839\u8282\u70b9\u7684\u80fd\u8d70\u7684\u8ddd\u79bb\u77ed\u7684\u53bb\u8986\u76d6\u8ddd\u79bb\u6839\u8282\u70b9\u8fd1\u7684\uff0c\u8fd9\u6837\u66f4\u4f18\u3002\n\n\n\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6839\u8282\u70b9\u7684\u67d0\u4e2a\u519b\u961f\u5b83\u6765\u7684\u90a3\u4e2a\u5b50\u6811\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u5148\u8ba9\u8fd9\u4e2a\u519b\u961f\u53bb\u8986\u76d6\u5b83\u6765\u7684\u5b50\u6811\uff0c\u8fd9\u6837\u4e0d\u9700\u8981\n\n\n\u4ece\u522b\u7684\u5b50\u6811\u8c03\u7528\u519b\u961f\uff0c\u66f4\u4f18\u3002\u5e76\u4e14\u5bf9\u4e8e\u80fd\u6765\u5230\u6839\u8282\u70b9\u5374\u4e0d\u80fd\u56de\u53bb\u7684\u4e0d\u80fd\u7528\u5b83\u8986\u76d6\u3002\n\n\n\u4e09\u3001\u4ee3\u7801\u5b9e\u73b0\n\n\n\u2460\u7edf\u8ba1\u519b\u961f\u6570\u91cf\u548c\u6839\u7684\u513f\u5b50\u4e2a\u6570\uff0c\u5982\u679c\u519b\u961f\u6570\u91cf\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u513f\u5b50\u4e2a\u6570\uff0c\u4e00\u5b9a\u4e0d\u80fd\u8986\u76d6\u3002\n\n\n\u2461\uff44\uff46\uff53\u500d\u589e\u9884\u5904\u7406\u4ee5\u53ca\u88ab\u5c01\u9501\u7684\u8282\u70b9\u7684\u5904\u7406\u3002\n\n\n\u2462\u4e8c\u5206\u65f6\u95f4\u3002\n\n\n\u2463\u7ed3\u6784\u4f53\u8bb0\u5f55\u6839\u8282\u70b9\u519b\u961f\u7684\u4fe1\u606f\n\n\n\u4ee3\u7801(\u770b\u7684lig2000 orz dalao\u7684\u4ee3\u7801\u7406\u89e3\u7684)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 50005\n#define LL long long\nusing namespace std;\nint n,sumedge,js,cc,cnt,m;\nint head[maxn],dad[maxn][22],g[maxn][22],root[maxn],a[maxn],has[maxn];\nLL ans,l,r,mid;\nLL ecnt,inf;\nstruct B{\n    int root;LL rest;\n}b[maxn];\nstruct C{\n    int pos;LL dis;\n}c[maxn];\nstruct Edge{\n    int x,y,z,nxt;\n    Edge(int x=0,int y=0,int z=0,int nxt=0):\n        x(x),y(y),z(z),nxt(nxt){}\n}edge[maxn<<1];\nvoid add(int x,int y ,int z){\n    edge[++sumedge]=Edge(x,y,z,head[x]);\n    head[x]=sumedge;\n}\nbool cmpb(B a ,B b){\n    return a.rest<b.rest;\n}\nbool cmpc(C a,C b){\n    return a.dis<b.dis;\n}\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar())if(ch=='-')f=-1;\n    for(;isdigit(ch);ch=getchar())x=x*10+ch-'0';\n    return x*f;\n}\nvoid dfs(int x){\n    for(int i=head[x];i;i=edge[i].nxt){\n        int v=edge[i].y;\n        if(v==dad[x][0])continue;\n        dad[v][0]=x;g[v][0]=edge[i].z;\n        if(x==1)root[v]=v;else root[v]=root[x];\n        dfs(v);    \n    }\n}\nvoid dfs_(int x){\n    bool flag=false,all=true;\n    for(int i=head[x];i;i=edge[i].nxt){\n        int v=edge[i].y;\n        if(v==dad[x][0])continue;\n        flag=true;if(!has[v])all=false;\n        dfs_(v);\n    }\n    if(flag&&all&&x!=1)has[x]=1;\n}\nbool check(LL lim){\n    memset(has,0,sizeof(has));\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    cnt=js=0;\n    for(int i=1;i<=m;i++){\n        int u=a[i];LL tot=lim;\n        for(int j=16;j>=0;j--){\n            if(g[u][j]<=tot&&dad[u][j]!=0){\n                tot-=g[u][j];\n                u=dad[u][j];\n            }\n        }\n        if(u==1){\n            b[++cnt].rest=tot;\n            b[cnt].root=root[a[i]];\n        }else has[u]=1;\n    }\n    dfs_(1);\n    for(int i=head[1];i;i=edge[i].nxt){\n        int v=edge[i].y;\n        if(has[v])continue;\n        c[++js].pos=v;c[js].dis=edge[i].z;\n    }\n    if(js>cnt)return false;\n    sort(b+1,b+cnt+1,cmpb);\n    sort(c+1,c+js+1,cmpc);\n    c[js+1].dis=0x7fffffff;\n    int now=1;\n    for(int i=1;i<=cnt;i++){\n        if(has[b[i].root]==0)has[b[i].root]=1;\n        else{\n            while(has[c[now].pos])now++;\n            if(b[i].rest>=c[now].dis)has[c[now++].pos]=1;\n        }\n        while(has[c[now].pos])now++;\n    }\n    return now>js;\n}\nvoid slove(){\n    dfs(1);\n    for(int j=1;j<=18;j++)\n     for(int i=1;i<=n;i++)\n      dad[i][j]=dad[dad[i][j-1]][j-1],\n      g[i][j]=g[i][j-1]+g[dad[i][j-1]][j-1];\n    l=0; r=500000;\n    if(!check(r)) { printf(\"-1\"); return ; }\n    while(l<=r){\n        mid=(l+r)>>1;\n        if(check(mid))ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n}\nint main(){\n    n=read();\n    for(int i=1;i<n;i++){\n        int x,y,z;\n        x=read();y=read();z=read();\n        add(x,y,z);add(y,x,z);\n        if(x==1||y==1)cc++;\n    }\n    m=read();\n    for(int i=1;i<=m;i++)a[i]=read();\n    if(cc>m){printf(\"-1\\n\");return 0;}\n    slove();\n    cout<<ans<<endl;\n    return 0;\n}\n\n```",
        "postTime": 1505473291,
        "uid": 49431,
        "name": "xun\u85b0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\uff1a\n\n\u4e00\u68f5\u6811\u4e0a\u7684\u67d0\u4e9b\u70b9\u4e0a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u519b\u961f \u600e\u6837\u5b89\u6392\u5728\u6700\u5c11\u7684\u65f6\u95f4\u5185\u4f7f\u6839\u8282\u70b9\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u90fd\u6709\u519b\u961f\u3002\n\n### \u9898\u89e3\uff1a\u3000\u8d2a\u5fc3\uff0b\u4e8c\u5206\uff0b\u500d\u589e\n\n\n\n\u4e00\u3001\n\n\u2460\u600e\u6837\u8d70\u6700\u4f18\uff1f\u4e0d\u8d70\u6216\u8005\u662f\u5411\u6839\u8d70\u3002\u6df1\u5ea6\u8d8a\u6d45\u8986\u76d6\u7684\u8282\u70b9\u8d8a\u591a\u3002\n\n\u2461\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u4e8c\u5206\u4e00\u4e2a\u65f6\u95f4\uff0c\u90a3\u4e48\u8be5\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u53ef\u884c\u6027\u95ee\u9898\uff0c\u5728\u9650\u5b9a\u7684\u65f6\u95f4\u5185\u80fd\u5426\u8986\u76d6\u3002\n\n\u2462\u4f55\u65f6\u65e0\u6cd5\u8986\u76d6\uff1f\u5f53\u519b\u961f\u6570\u5c0f\u4e8e\u6839\u7684\u513f\u5b50\u7684\u4e2a\u6570\u65f6\uff0c\u65e0\u6cd5\u8986\u76d6\u3002\n\n\u4e8c\u3001\u5982\u4f55\u5206\u914d\u519b\u961f\uff1f\n\n\u7531\u4e8e\u6211\u4eec\u4e8c\u5206\u4e86\u4e00\u4e2a\u65f6\u95f4\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u8ba9\u519b\u961f\u5728\u9650\u5b9a\u65f6\u95f4\u5185\u5c3d\u91cf\u5411\u6839\u8d70\u3002\u8fd9\u65f6\u6240\u6709\u7684\u519b\u961f\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b\u3002\n\n\u80fd\u8d70\u5230\u6839\u8282\u70b9\u548c\u4e0d\u80fd\u8d70\u5230\u6839\u8282\u70b9\u7684\u3002\u5bf9\u4e8e\u4e0d\u80fd\u8d70\u5230\u6839\u7684\uff0c\u6211\u4eec\u5c3d\u91cf\u80fd\u8d70\u591a\u8fdc\u5c31\u8d70\u591a\u8fdc\uff0c\u6df1\u5ea6\u5c3d\u91cf\u7684\u6d45\uff0c\u8fd9\u6837\u6700\u4f18\u3002\u80fd\u8d70\u5230\u6839\u8282\u70b9\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u8fd9\u4e2a\u519b\u961f\u5728\u6211\u4eec\u4e8c\u5206\u7684\u65f6\u95f4\u5185\u8fd8\u80fd\u8d70\u591a\u8fdc\uff08\u8fd9\u6837\u4fbf\u4e8e\u4e4b\u540e\u7684\u519b\u961f\u5206\u914d\uff0c\n\n\u4e5f\u5c31\u662f\u4e00\u5f00\u59cb\u611f\u89c9\u5f88\u9ebb\u70e6\u7684\u4e00\u4e2a\u5b50\u6811\u7684\u519b\u961f\u8981\u53bb\u6839\u7684\u53e6\u4e00\u4e2a\u5b50\u6811\u7684\u95ee\u9898\u3002\uff09\u53ca\u8fd9\u4e2a\u519b\u961f\u662f\u4ece\u6839\u7684\u54ea\u4e2a\u5b50\u6811\u6765\u7684\u3002\u5e76\u4e14\u6211\u4eec\u5bf9\u4e8e\u67d0\u4e2a\u8282\u70b9\u7684\u513f\u5b50\u90fd\u88ab\u5c01\u9501\u7684\u60c5\u51b5\uff0c\u89c6\u4e3a\u8fd9\u4e2a\u70b9\u4e5f\u88ab\u5c01\u9501\uff0c\u8fd9\u4e2a\u64cd\u4f5c\uff44\uff46\uff53\u5c31\u597d\u3002\u63a5\u4e0b\u6765\u6211\u4eec\n\n\u8981\u5206\u914d\u805a\u96c6\u5728\u6839\u8282\u70b9\u7684\u519b\u961f\u3002\u8fd9\u4e2a\u5206\u914d\u65b9\u6cd5\u4e3a\uff0c\u7528\u6839\u8282\u70b9\u7684\u80fd\u8d70\u7684\u8ddd\u79bb\u77ed\u7684\u53bb\u8986\u76d6\u8ddd\u79bb\u6839\u8282\u70b9\u8fd1\u7684\uff0c\u8fd9\u6837\u66f4\u4f18\u3002\n\n\u8fd8\u6709\u4e24\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6839\u8282\u70b9\u7684\u67d0\u4e2a\u519b\u961f\u5b83\u6765\u7684\u90a3\u4e2a\u5b50\u6811\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u5148\u8ba9\u8fd9\u4e2a\u519b\u961f\u53bb\u8986\u76d6\u5b83\u6765\u7684\u5b50\u6811\uff0c\u8fd9\u6837\u4e0d\u9700\u8981\u4ece\u522b\u7684\u5b50\u6811\u8c03\u7528\u519b\u961f\uff0c\u66f4\u4f18\u3002\u5e76\u4e14\u5bf9\u4e8e\u80fd\u6765\u5230\u6839\u8282\u70b9\u5374\u4e0d\u80fd\u56de\u53bb\u7684\u4e0d\u80fd\u7528\u5b83\u8986\u76d6\u3002\n\n\u4e09\u3001\u4ee3\u7801\u5b9e\u73b0\n\n\u2460\u7edf\u8ba1\u519b\u961f\u6570\u91cf\u548c\u6839\u7684\u513f\u5b50\u4e2a\u6570\uff0c\u5982\u679c\u519b\u961f\u6570\u91cf\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u513f\u5b50\u4e2a\u6570\uff0c\u4e00\u5b9a\u4e0d\u80fd\u8986\u76d6\u3002\n\n\u2461\uff44\uff46\uff53\u500d\u589e\u9884\u5904\u7406\u4ee5\u53ca\u88ab\u5c01\u9501\u7684\u8282\u70b9\u7684\u5904\u7406\u3002\n\n\u2462\u4e8c\u5206\u65f6\u95f4\u3002\n\n\u2463\u7ed3\u6784\u4f53\u8bb0\u5f55\u6839\u8282\u70b9\u519b\u961f\u7684\u4fe1\u606f\n\n\u4ee3\u7801\uff1a\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#define maxn 50005\n#define LL long long\nusing namespace std;\n\nint n,sumedge,js,cc,cnt,m;\nint head[maxn],dad[maxn][22],g[maxn][22],root[maxn],a[maxn],has[maxn];\nLL ans,l,r,mid;\nLL ecnt,inf;\nstruct B{\n    int root;LL rest;\n}b[maxn];\n\nstruct C{\n    int pos;LL dis;\n}c[maxn];\n\nstruct Edge{\n    int x,y,z,nxt;\n    Edge(int x=0,int y=0,int z=0,int nxt=0):\n        x(x),y(y),z(z),nxt(nxt){}\n}edge[maxn<<1];\n\nvoid add(int x,int y ,int z){\n    edge[++sumedge]=Edge(x,y,z,head[x]);\n    head[x]=sumedge;\n}\n\nbool cmpb(B a ,B b){\n    return a.rest<b.rest;\n}\n\nbool cmpc(C a,C b){\n    return a.dis<b.dis;\n}\n\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    for(;!isdigit(ch);ch=getchar())if(ch=='-')f=-1;\n    for(;isdigit(ch);ch=getchar())x=x*10+ch-'0';\n    return x*f;\n}\n\nvoid dfs(int x){\n    for(int i=head[x];i;i=edge[i].nxt){\n        int v=edge[i].y;\n        if(v==dad[x][0])continue;\n        dad[v][0]=x;g[v][0]=edge[i].z;\n        if(x==1)root[v]=v;else root[v]=root[x];\n        dfs(v);    \n    }\n}\n\nvoid dfs_(int x){\n    bool flag=false,all=true;\n    for(int i=head[x];i;i=edge[i].nxt){\n        int v=edge[i].y;\n        if(v==dad[x][0])continue;\n        flag=true;if(!has[v])all=false;\n        dfs_(v);\n    }\n    if(flag&&all&&x!=1)has[x]=1;\n}\n\n\nbool check(LL lim){\n    memset(has,0,sizeof(has));\n    memset(b,0,sizeof(b));\n    memset(c,0,sizeof(c));\n    cnt=js=0;\n    for(int i=1;i<=m;i++){\n        int u=a[i];LL tot=lim;\n        for(int j=16;j>=0;j--){\n            if(g[u][j]<=tot&&dad[u][j]!=0){\n                tot-=g[u][j];\n                u=dad[u][j];\n            }\n        }\n        if(u==1){\n            b[++cnt].rest=tot;\n            b[cnt].root=root[a[i]];\n        }else has[u]=1;\n    }\n    dfs_(1);\n    for(int i=head[1];i;i=edge[i].nxt){\n        int v=edge[i].y;\n        if(has[v])continue;\n        c[++js].pos=v;c[js].dis=edge[i].z;\n    }\n    if(js>cnt)return false;\n    sort(b+1,b+cnt+1,cmpb);\n    sort(c+1,c+js+1,cmpc);\n    c[js+1].dis=0x7fffffff;\n    int now=1;\n    for(int i=1;i<=cnt;i++){\n        if(has[b[i].root]==0)has[b[i].root]=1;\n        else{\n            while(has[c[now].pos])now++;\n            if(b[i].rest>=c[now].dis)has[c[now++].pos]=1;\n        }\n        while(has[c[now].pos])now++;\n    }\n    return now>js;\n}\n\n\nvoid slove(){\n    dfs(1);\n    for(int j=1;j<=18;j++)\n     for(int i=1;i<=n;i++)\n      dad[i][j]=dad[dad[i][j-1]][j-1],\n      g[i][j]=g[i][j-1]+g[dad[i][j-1]][j-1];\n    l=0; r=500000;\n    if(!check(r)) { printf(\"-1\"); return ; }\n    while(l<=r){\n        mid=(l+r)>>1;\n        if(check(mid))ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n}\n\nint main(){\n    n=read();\n    for(int i=1;i<n;i++){\n        int x,y,z;\n        x=read();y=read();z=read();\n        add(x,y,z);add(y,x,z);\n        if(x==1||y==1)cc++;\n    }\n    m=read();\n    for(int i=1;i<=m;i++)a[i]=read();\n    if(cc>m){printf(\"-1\\n\");return 0;}\n    slove();\n    cout<<ans<<endl;\n    return 0;\n}\n```\n",
        "postTime": 1570893420,
        "uid": 240677,
        "name": "123456_zzm",
        "ccfLevel": 0,
        "title": "P1084"
    },
    {
        "content": "# \u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011\n  \n  \n  \u7ed9\u51fa\u4e00\u68f5n\u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6839\u662f1\uff0c\u8981\u5728\u9664\u6839\u8282\u70b9\u4ee5\u5916\u7684\u70b9\u5efa\u7acb\u68c0\u67e5\u70b9\uff0c\u4f7f\u5f97\u4ece\u6bcf\u6761\u6839\u5230\u53f6\u5b50\u7684\u8def\u5f84\u4e0a\u90fd\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u68c0\u67e5\u70b9\u3002\u68c0\u67e5\u70b9\u7531\u519b\u961f\u6765\u5efa\u7acb\u3002\u521d\u59cb\u519b\u961f\u7684\u4f4d\u7f6e\u662f\u7ed9\u5b9a\u7684\uff0c\u79fb\u52a8\u519b\u961f\u8d70\u4e00\u6761\u8fb9\u9700\u8981\u82b1\u8d39\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u7684\u65f6\u95f4\u3002\u73b0\u5728\u8981\u6c42\u4e00\u4e2a\u65b9\u6848\uff0c\u79fb\u52a8\u519b\u961f\u5230\u67d0\u4e2a\u6700\u4f73\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u603b\u7528\u65f6\u6700\u5c11\u3002\n\n\u3010\u6570\u636e\u8303\u56f4\u3011 \n\u4fdd\u8bc1\u519b\u961f\u4e0d\u4f1a\u9a7b\u624e\u5728\u9996\u90fd\u3002\n\u5bf9\u4e8e20%\u7684\u6570\u636e\uff0c2\u2264 n\u2264 10\uff1b\n\u5bf9\u4e8e40%\u7684\u6570\u636e\uff0c2 \u2264n\u226450\uff0c0<w <105\uff1b\n\u5bf9\u4e8e60%\u7684\u6570\u636e\uff0c2 \u2264 n\u22641000\uff0c0<w <106\uff1b\n\u5bf9\u4e8e80%\u7684\u6570\u636e\uff0c2 \u2264 n\u226410,000\uff1b\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c2\u2264m\u2264n\u226450,000\uff0c0<w <109\u3002\n\n\u9996\u5148\u786e\u5b9a\u601d\u8def\u662f\u4e8c\u5206\u3002\n\n\u7136\u540e\u5173\u952e\u662f\u600e\u4e48check\n\n\u6bcf\u4e2a\u519b\u961f\u80af\u5b9a\u662f\u8981\u5c3d\u91cf\u5f80\u4e0a\u8d70\u7684\u3002\u628a\u519b\u961f\u5206\u4e3a\u8d70\u5f97\u5230root\u548c\u8d70\u4e0d\u5230\u4e24\u79cd\u60c5\u51b5\u3002\n\n\u628a\u4ec5\u901a\u8fc7\u8d70\u4e0d\u5230root\u7684\u519b\u961f\u5c31\u80fd\u63a7\u5236\u7684\u7b2c\u4e8c\u5c42\u7684\u7ed3\u70b9\u53bb\u6389\uff0c\u5269\u4e0b\u7684\u5c31\u9700\u8981\u901a\u8fc7\u5269\u4e0b\u7684\u519b\u961f\u6765\u63a7\u5236\u3002\n\n\u6bcf\u4e2a\u519b\u961f\u90fd\u8981\u5339\u914d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6392\u5e8f\u5b8c\u76f4\u63a5\u5339\u914d\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u5c31\u662f\u5982\u679c\u4e00\u4e2a\u519b\u961f\u8981\u63a7\u5236\u81ea\u5df1\u6240\u5c5e\u7684\u7ed3\u70b9\uff0c\u5c31\u4e0d\u9700\u8981\u518d\u989d\u5916\u6dfb\u52a0\u65f6\u95f4\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u6309\u519b\u961f\u5269\u4f59\u65f6\u95f4\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u518d\u6309\u9700\u8981\u7684\u65f6\u95f4\u6392\u5e8f\u6ca1\u63a7\u5236\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u51b3\u5b9a\u6bcf\u4e00\u4e2a\u519b\u961f\u63a7\u5236\u54ea\u4e2a\u7ed3\u70b9\u3002\u7531\u4e8e\u5df2\u7ecf\u6392\u8fc7\u5e8f\u4e86\uff0c\u6240\u4ee5\u5f53\u524d\u519b\u961f\u80af\u5b9a\u662f\u6700\u6ca1\u7528\u7684\u3002\u6240\u4ee5\u5982\u679c\u4ed6\u6240\u5c5e\u7684\u7ed3\u70b9\u672a\u88ab\u63a7\u5236\uff0c\u5c31\u8ba9\u4ed6\u53bb\u80af\u5b9a\u662f\u6700\u597d\u7684\u65b9\u6848\u3002\n\n \n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u600e\u4e48\u5f97\u51fa\u90a3\u4e9b\u7ed3\u70b9\u6ca1\u88ab\u63a7\u5236\uff1f\u8fd9\u4e2a\u6709\u51e0\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u500d\u589e\u76f4\u63a5\u66b4\u529b\u628a\u519b\u961f\u63a8\u4e0a\u53bb\uff0c\u8fd8\u6709\u5c31\u662f\u7528\u62d3\u6251\u6392\u5e8f\u3002\n\n## \u8fd9\u91cc\u4ecb\u7ecd\u4e0b\u62d3\u6251\u7684\u65b9\u6cd5\uff1a\n\n\u3000\u3000\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u8bb0\u5f55\u6240\u6709\u519b\u961f\u5f80\u4e0a\u8d70\u8d70\u5230\u8fd9\u91cc\u5269\u4f59\u65f6\u95f4\u7684\u6700\u5927\u503ctime[]\u3002\u518d\u8bb0\u4e00\u4e2a\u80fd\u5426\u5230\u8fbearr[]\uff0c\u5982\u679ctime[u] >= 0\u5219arr[u] = true\uff1b\u5982\u679cu\u7684\u6240\u6709\u513f\u5b50\u90fd\u53ef\u63a7\u5236\uff0c\u5219arr[u] = true\uff1b\u5426\u5219\u90fd\u662ffalse\n\n \n\n\u7136\u540e\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff01\u65f6\u95f4\u590d\u6742\u5ea6O(n*log2n)\n# O(n*log2n)\n\n# \u4ee3\u7801\u9644\u4e0a\uff1a\n```cpp\n#include<iostream>\n#include<cstdlib>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#define il inline\n#define rg register\n#define ll long long\n#define N 60000\n#define inf 2147483647\nusing namespace std;\n\nint n,m,hd[N],cnt,u,v,w;\nint c,idx[N];\nint le,ri=500000;\nint dis[N][20],up[N][20];\nint ok[N],use[N],vis[N];\nstruct S{\n    int res,idx;\n}ne[N],to[N];\nstruct T{\n    int nt,to,w;\n}edge[N<<1];\nil void re(rg int &x);\nvoid add(rg int fm,rg int to,rg int w);\nvoid ST(rg int i,rg int fa);\nint check(rg int lim);\nint Dfs(rg int u,rg int fa);\nint Cmp(const S &x,const S &y);\n\nint main()\n{\n    re(n);\n    for(rg int i=1;i<n;++i)\n    {\n        re(u),re(v),re(w);\n        add(u,v,w),add(v,u,w);\n        if(u==1||v==1)c++;\n    }\n    re(m);\n    if(m<c){cout<<-1;return 0;}\n    for(rg int i=1;i<=m;++i)\n        re(idx[i]);\n        \n    ST(1,0);\n    for(rg int k=1;k<=19;++k)\n    {\n        for(rg int i=1;i<=n;++i)\n        {\n            up[i][k]=up[up[i][k-1]][k-1];\n            dis[i][k]=dis[up[i][k-1]][k-1]+dis[i][k-1];\n        }\n    }\n    while(le<ri)\n    {\n        rg int mid=((le+ri)>>1);\n        if(check(mid))ri=mid;\n        else le=mid+1;\n    }\n    cout<<le;\n    \n    return 0;\n}\n\nil void re(rg int &x)\n{\n    rg int res=0;rg int w=1;char c=getchar();\n    while((c<'0'||c>'9')&&c!='-')c=getchar();\n    if(c=='-')w=-1,c=getchar();\n    while(c>='0'&&c<='9')res=(res<<3)+(res<<1)+c-'0',c=getchar();\n    x=w*res;\n}\nvoid add(rg int fm,rg int to,rg int w)\n{\n    edge[++cnt].nt=hd[fm];\n    edge[cnt].to=to;\n    edge[cnt].w=w;\n    hd[fm]=cnt;\n}\nvoid ST(rg int i,rg int fa)\n{\n    up[i][0]=fa;\n    for(rg int k=hd[i];k;k=edge[k].nt)\n    {\n        rg int qw=edge[k].to;\n        if(qw==fa)continue;\n        dis[qw][0]=edge[k].w;\n        ST(qw,i);\n    }\n}\nint check(rg int lim){\n    memset(ok,0,sizeof(ok));\n    memset(use,0,sizeof(use));\n    memset(vis,0,sizeof(vis));\n    rg int cnt1=0,cnt2=0;\n    rg int top=1;\n    for(rg int i=1;i<=m;++i){\n        rg int res=lim,u=idx[i];\n        for(rg int k=19;k>=0;--k){\n            if(up[u][k]&&up[u][k]!=1&&res>=dis[u][k])\n                res-=dis[u][k],u=up[u][k];\n        }\n        if(up[u][0]==1&&res>dis[u][0])\n        {\n            to[++cnt1].res=res-dis[u][0];\n            to[cnt1].idx=u;\n        }\n        else ok[u]=1;\n    }\n    Dfs(1,0);\n    for(rg int k=hd[1];k;k=edge[k].nt){\n        rg int qw=edge[k].to;\n        if(!ok[qw]){\n            ne[++cnt2].res=dis[qw][0];\n            ne[cnt2].idx=qw;\n        }\n    }\n    sort(to+1,to+cnt1+1,Cmp);\n    sort(ne+1,ne+cnt2+1,Cmp);\n    if(cnt1<cnt2)return 0;\n    for(rg int i=1;i<=cnt1;++i)\n    {\n        if(!vis[to[i].idx])\n        {\n            vis[to[i].idx]=1;\n            continue;\n        }\n        while(vis[ne[top].idx])top++;\n        if(to[i].res>=ne[top].res)\n        {\n            vis[ne[top].idx]=1,top++;\n            continue;\n        }\n        if(top>cnt2)break;\n    }\n    while(vis[ne[top].idx])top++;\n    if(top<=cnt2)return 0;\n    return 1;\n}\nint Dfs(rg int u,rg int fa)\n{\n    rg int temp=1,flag=0;\n    for(rg int k=hd[u];k;k=edge[k].nt)\n    {\n        rg int qw=edge[k].to;\n        if(qw==fa)continue;\n        flag++,temp&=Dfs(qw,u);\n    }\n    if(!flag)temp=0;\n    ok[u]=(ok[u]|temp);\n    if(ok[u]&&up[u][0]==1)\n        vis[u]=1;\n    return ok[u];\n}\nint Cmp(const S &x,const S &y){return x.res<y.res;}\n```\n",
        "postTime": 1570158380,
        "uid": 99858,
        "name": "DLYJ",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "[\u5b89\u5229$blog$](https://ctz45562.github.io/2019/09/16/%E6%B4%9B%E8%B0%B7-P1084-%E7%96%AB%E6%83%85%E6%8E%A7%E5%88%B6/)\n\n[\u4f20\u9001\u95e8](https://www.luogu.org/problem/P1084)\n\n\u4e0d\u60f3\u500d\u589e\uff1f\u6570\u636e\u7ed3\u6784\u6765\u51d1\uff01\n\n\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\u53ef\u4ee5\u4e8c\u5206\u3002\n\n\u9650\u5236\u4e86\u7b54\u6848\u540e\uff0c\u6709\u4e00\u4e2a\u663e\u7136\u7684\u8d2a\u5fc3\uff1a\u5728\u65f6\u95f4\u5141\u8bb8\u6761\u4ef6\u4e0b\uff0c\u4e00\u652f\u519b\u961f\u7684\u9a7b\u624e\u70b9\u8d8a\u9760\u4e0a\u8d8a\u4f18\uff08\u5c01\u9501\u7684\u70b9\u8d8a\u591a\uff09\u3002\n\n\u90a3\u4e48\u5c3d\u53ef\u80fd\u628a\u519b\u961f\u5f80\u4e0a\u63d0\u3002\n\n\u4e0d\u641e\u500d\u589e\uff0c\u76f4\u63a5\u66b4\u529b\u5411\u4e0a\u5408\u5e76\u3002\n\n\u7ef4\u62a4\u6240\u6709\u4f4d\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u519b\u961f\u4ee5\u53ca\u5b83\u4eec\u5df2\u8017\u8d39\u7684\u65f6\u95f4\u3002\n\n\u628a\u6bcf\u4e2a\u513f\u5b50\u7684\u519b\u961f\u63d0\u4e0a\u6765\uff0c\u5e76\u7ed9\u91cc\u9762\u7684\u519b\u961f\u65f6\u95f4\u90fd\u52a0\u4e0a\u8fb9\u6743\u3002\n\n\u7136\u540e\u5220\u6389\u8017\u8d39\u65f6\u95f4\u5927\u4e8e\u5f53\u524d\u7b54\u6848\u7684\u519b\u961f\u3002\n\n\u4e8e\u662f\u9700\u8981\u4e00\u79cd\u652f\u6301\u5feb\u901f\u5408\u5e76\u3001\u5220\u9664\u5927\u4e8e\u67d0\u4e2a\u6570\u7684\u5143\u7d20\u3001\u6574\u4f53\u52a0\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n\u5de6\u504f\u6811\uff08\u53ef\u5e76\u5806\uff09\uff01\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u4e8e\u6839\u8282\u70b9\u4e0d\u80fd\u9a7b\u624e\u3002\u5bf9\u4e8e\u6839\u8282\u70b9\u4e0d\u80fd\u5c01\u9501\u7684\u513f\u5b50\uff0c\u9700\u8981\u5c06\u5176\u4ed6\u513f\u5b50\u5269\u4f59\u7684\u519b\u961f\u79fb\u52a8\u8fc7\u6765\u3002\u7ef4\u62a4\u6240\u6709\u9700\u8981\u519b\u961f\u7684\u513f\u5b50\u7684\u8fb9\u6743\uff0c\u548c\u5269\u4f59\u519b\u961f\u7684\u5230\u6839\u8282\u70b9\u8017\u8d39\u7684\u65f6\u95f4\u3002\u53cc\u6307\u9488\u626b\u4e00\u904d\uff0c\u628a\u524d\u8005\u8f83\u5927\u7684\u548c\u540e\u8005\u8f83\u5c0f\u7684\u5339\u914d\u68c0\u9a8c\u662f\u5426\u53ef\u884c\u3002\n\n\u3061\u3087\u3063\u3068\u5f85\u3063\u3066\u3002\u3002\u3002\u597d\u50cf\u5ffd\u7565\u4e86\u4e00\u79cd\u60c5\u51b5\uff1a\n\n~~\uff08\u61d2\u5f97\u753b\u56fe\u4e86\uff09~~\u8bbe\u9700\u8981\u519b\u961f\u7684\u70b9\u4e3a$x$\uff0c$y$\u6709\u4e00\u652f\u5269\u4f59\u519b\u961f\uff0c$z$\u8282\u70b9\u9a7b\u624e\u7740\u4e00\u652f\u519b\u961f\u4e14\u6ca1\u6709\u5269\u4f59\u3002\n\n\u53ef\u80fd\u5b58\u5728\u628a$z$\u7684\u519b\u961f\u8c03\u5f80$x$\u9a7b\u624e,$y$\u7684\u519b\u961f\u8c03\u5f80$z$\u9a7b\u624e\u6ee1\u8db3\u7b54\u6848\uff0c\u800c\u76f4\u63a5\u628a$y$\u7684\u519b\u961f\u8c03\u5f80$x$\u9a7b\u624e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u3002\n\n\u7528\u5df2\u8017\u8d39\u65f6\u95f4\u8861\u91cf\u519b\u961f\u7684\u4f18\u52a3\u7684\u8bdd\uff0c\u8fd9\u79cd\u60c5\u51b5\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u8f83\u4f18\u7684$z$\u7684\u519b\u961f\u7528\u8f83\u52a3\u7684$y$\u7684\u519b\u961f**\u201c\u7f6e\u6362\u201d**\u51fa\u6765\u3002\n\n\u7528$multiset$\u5904\u7406\u4e00\u6ce2\uff0c\u628a\u52a3\u7684\u519b\u961f\u7f6e\u6362\u51fa\u4f18\u7684\u519b\u961f\u518d\u68c0\u9a8c\u3002\u8fd8\u8981\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u6709\u5fc5\u8981\u9a7b\u624e\u519b\u961f\uff0c\u5fc5\u8981\u7684\u8bdd\u5c31\u628a\u6700\u52a3\u7684\u519b\u961f\u7559\u4e0b\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(n\\log n\\log \\sum w)$\u3002\n\n\u4ee3\u7801\uff1a\n\n``` cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <queue>\n#include <set>\n\n#define maxn 50005\n\nconst long long inf = 1e18;\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,y=0;\n\tchar ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')y=1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn y?-x:x;\n}\n#define ls(x) ls[x]\n#define rs(x) rs[x]\nlong long dat[maxn],tag[maxn],ex[maxn],mid;\nint in[maxn],h[maxn],root[maxn],ls[maxn],rs[maxn],siz[maxn],deep[maxn],poi[maxn],ar[maxn],cnt,num;\npair<long long,int>ch[maxn];\nmultiset<long long>s;\nbool ok[maxn],mov[maxn];\nstruct edge{\n\tint pre,to,l;\n}e[maxn<<1];\ninline void add(int from,int to,int l){\n\t++in[from];\n\te[++num].pre=h[from],h[from]=num,e[num].to=to,e[num].l=l;\n}\ninline bool cmp(const pair<long long,int> &x,const pair<long long,int>&y){\n\tif(x.first!=y.first)return x.first>y.first;\n\treturn x.second<y.second;\n}\ninline void update(int node){\n\tdeep[node]=deep[rs(node)]+1;\n\tsiz[node]=siz[ls(node)]+siz[rs(node)]+1;\n}\ninline void datadown(int node,int d){\n\ttag[node]+=d,dat[node]+=d;\n}\ninline void pushdown(int node){\n\tif(ls(node))datadown(ls(node),tag[node]);\n\tif(rs(node))datadown(rs(node),tag[node]);\n\ttag[node]=0;\n}\nint merge(int x,int y){\n\tif(!x||!y)return x|y;\n\tif(dat[x]<dat[y])swap(x,y);\n\tif(tag[x])pushdown(x);\n\trs(x)=merge(rs(x),y);\n\tif(deep[ls(x)]<deep[rs(x)])swap(ls(x),rs(x));\n\tupdate(x);\n\treturn x;\n}\nvoid push(int &rt,int x){\n\tdat[++cnt]=x,siz[cnt]=deep[cnt]=1;\n\tls(cnt)=rs(cnt)=tag[cnt]=0;\n\trt=merge(rt,cnt);\n}\nvoid pop(int &rt){\n\tint l=ls(rt),r=rs(rt);\n\tif(tag[rt])pushdown(rt);\n\trt=merge(l,r);\t\n}\nvoid dp(int node,int f=1){\n\tok[node]=mov[node]=in[node]-1;\n\tint x,s;\n\tfor(register int i=h[node];i;i=e[i].pre){\n\t\tx=e[i].to;\n\t\tif(x==f)continue;\n\t\tdp(x,node),datadown(root[x],e[i].l);\n\t\troot[node]=merge(root[node],root[x]);\n\t\tif(root[node]&&dat[root[node]]<=mid)mov[node]=0;\n\t\twhile(root[node]&&dat[root[node]]>mid)pop(root[node]);\n\t\tmov[node]&=ok[x],ok[node]&=ok[x];\n\t}\n\twhile(root[node]&&dat[root[node]]>mid)pop(root[node]);\n\tok[node]|=root[node];\n}\ninline multiset<long long>::iterator pre(int d){\n\tmultiset<long long>::iterator ans=s.lower_bound(d);\n\tif(ans==s.end())return --ans;\n\tif(*ans==d)return ans;\n\treturn --ans;\n}\nint main(){\n\tint n=read(),l1,l2,l3,x;\n\tlong long l=0,r=0;\n\tmultiset<long long>::iterator iter;\n\tfor(register int i=1,y,z;i<n;++i)x=read(),y=read(),z=read(),add(x,y,z),add(y,x,z),r+=z;\n\tint m=read();\n\tfor(register int i=1;i<=m;++i)ar[i]=read();\n\tif(in[1]>m){puts(\"-1\");return 0;}\n\twhile(l<r){\n\t\tmid=l+r>>1,l1=l2=l3=0,cnt=0;\n\t\ts.clear(),s.insert(-inf);\n\t\tfor(register int i=1;i<=n;++i)root[i]=0;\n\t\tfor(register int i=1;i<=m;++i){\n\t\t\tif(ar[i]==1)ch[++l3]=make_pair(0,0);\n\t\t\telse push(root[ar[i]],0);\n\t\t}\n\t\tfor(register int i=h[1];i;i=e[i].pre){\n\t\t\tx=e[i].to,dp(x);\n\t\t\tif(!ok[x])poi[++l1]=e[i].l;\n\t\t\tif(root[x])ch[++l3]=make_pair(dat[root[x]]+e[i].l,mov[x]?0:e[i].l),pop(root[x]);\n\t\t\twhile(root[x])ch[++l3]=make_pair(dat[root[x]]+e[i].l,0),pop(root[x]);\n\t\t}\n\t\tsort(ch+1,ch+1+l3,cmp);\n\t\tfor(register int i=1;i<=l3;++i){\n\t\t\tif(!ch[i].second)s.insert(ch[i].first);\n\t\t\telse {\n\t\t\t\titer=pre(mid-ch[i].second);\n\t\t\t\tif(*iter==-inf)continue;\n\t\t\t\ts.erase(iter);\n\t\t\t\ts.insert(ch[i].first);\n\t\t\t}\n\t\t}\n\t\tfor(iter=s.begin();iter!=s.end();++iter)ex[++l2]=*iter;\n\t\treverse(ex+1,ex+1+l2),--l2;\n\t\tsort(poi+1,poi+1+l1);\n\t\twhile(l1&&l2&&ex[l2]+poi[l1]<=mid)--l1,--l2;\n\t\tif(l1)l=mid+1;\n\t\telse r=mid;\t\n\t}\n\tprintf(\"%lld\\n\",l);\n}\n```\n\n",
        "postTime": 1568630643,
        "uid": 111762,
        "name": "_ctz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "## $\\text{Description}$\n\n\u4e00\u4e2a\u56fd\u5bb6\u6709 $n$ \u4e2a\u57ce\u5e02\uff0c $m$ \u4e2a\u519b\u961f\u3002$n$ \u4e2a\u57ce\u5e02\u4e4b\u95f4\u6709 $(n-1)$ \u6761\u65e0\u5411\u8fb9\uff0c\u901a\u8fc7\u8981\u4e00\u5b9a\u7684\u65f6\u95f4\u3002\u73b0\u5728\u8981\u5c01\u9501\u8fd9\u4e2a\u57ce\u5e02\uff0c\u4f7f\u5f97\u4ece\u6839\u8282\u70b9 $1$ \u8d70\u65e0\u8bba\u5982\u4f55\u90fd\u8d70\u4e0d\u5230\u53f6\u5b50\u8282\u70b9\u3002\u4e00\u4e2a\u519b\u961f\u53ef\u4ee5\u5728\u9664\u9996\u90fd\u7684\u4f4d\u7f6e\u5916\u5efa\u7acb\u68c0\u67e5\u70b9\uff0c\u68c0\u67e5\u70b9\u662f\u4e0d\u80fd\u591f\u88ab\u901a\u8fc7\u7684\u3002\n\n\u73b0\u5728\u8bf7\u4f60\u6c42\u51fa\u5728\u6700\u4f18\u60c5\u51b5\u4e0b\u7684\u5b8c\u6210\u5c01\u9501\u7684\u65f6\u95f4\u3002\n\n$$2\u2264m\u2264n\u226450,000,0<w<10^9$$\n\n\u5176\u4e2d $w$ \u662f\u8fb9\u6743\u3002\n\n## $\\text{Solution}$\n\n\u53c2\u8003\u4e86 ``@litble`` \u548c ``@ruizhangj`` \u7684\u9898\u89e3\u3002\n\n\u56e0\u4e3a\u519b\u961f\u662f\u53ef\u4ee5\u540c\u65f6\u79fb\u52a8\u7684\uff0c\u90a3\u4e48\u7b54\u6848\u5bf9\u4e8e\u4e00\u4e2a\u65b9\u6848\u7684\u7b54\u6848\u5c31\u662f\u8fd9 $m$ \u4e2a\u519b\u961f\u8d70\u5230\u68c0\u67e5\u70b9\u7684\u65f6\u95f4\u7684\u6700\u5927\u503c\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u8ba9\u8fd9\u4e2a\u6700\u5927\u503c\u6700\u5c0f\uff0c\u663e\u7136\u8fd9\u662f\u4e2a\u4e8c\u5206\u3002\n\n\u7136\u540e\u56e0\u4e3a\u4e00\u4e2a\u519b\u961f\u8d8a\u5f80\u4e0a\u80fd\u63a7\u5236\u7684\u70b9\u5c31\u6700\u591a\uff0c\u6240\u4ee5\u8981\u8d2a\u5fc3\u5730\u628a\u5b83\u5c3d\u91cf\u5f80\u4e0a\u63d0\uff0c\u663e\u7136\u8fd9\u662f\u4e2a\u500d\u589e\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u500d\u589e\u6765\u627e\u51fa\u6240\u6709\u7684\u80fd\u591f\u5230\u8fbe\u6839\u8282\u70b9\u7684\u70b9\u4ee5\u53ca\u5b83\u5269\u4e0b\u7684\u65f6\u95f4\u3002\n\n\u7136\u540e\u90a3\u4e9b\u4e0d\u80fd\u5230\u6839\u8282\u70b9\u7684\u70b9\u5c31\u76f4\u63a5\u8d2a\u5fc3\u5730\u8ba9\u5b83\u7ba1\u4ed6\u80fd\u591f\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u8d70\u5230\u7684\u6700\u9760\u8fd1\u6839\u8282\u70b9\u7684\u70b9\u3002\n\n\u6211\u4eec\u5047\u8bbe\u6ca1\u6709\u80fd\u591f\u5230\u8fbe\u6839\u8282\u70b9\u7684\u90a3\u4e9b\u519b\u961f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u770b\u770b\u6839\u8282\u70b9\u6709\u4e9b\u54ea\u4e9b\u513f\u5b50\u662f\u6ca1\u6709\u88ab\u5c01\u9501\u7684\u3002\u6ca1\u6709\u5c01\u9501\u7684\u80af\u5b9a\u662f\u8981\u628a\u90a3\u4e9b\u5df2\u7ecf\u5230\u4e86\u6839\u8282\u70b9\u7684\u70b9\u8c03\u8fc7\u53bb\u3002\n\n\u4f46\u662f\u5982\u679c\u4ece\u6839\u8282\u70b9\u7684\u4e00\u4e2a\u513f\u5b50 $i$ \u6ca1\u6709\u88ab\u5c01\u9501\uff0c\u5e76\u4e14\u6211\u4eec\u6709\u81f3\u5c11\u4e00\u4e2a\u80fd\u591f\u5230\u8fbe\u6839\u8282\u70b9\u7684\u519b\u961f\u662f\u4ece\u8fd9\u4e2a\u513f\u5b50 $i$ \u6765\u7684\uff0c\u90a3\u4e48\u5c31\u6709\u5148\u8ba9\u4ece\u5b50\u6811 $i$ \u6765\u7684\u8fd9\u4e2a\u6839\u8282\u70b9\u6765\u5c01\u9501\u6389\u5b50\u6811 $i$ \u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u6709\u53ef\u80fd\u4e00\u4e2a\u70b9\u4ece\u6839\u8282\u70b9\u7684\u67d0\u4e2a\u513f\u5b50\u5230\u4e86\u6839\u8282\u70b9\u4e4b\u540e\u5c31\u4e0d\u591f\u65f6\u95f4\u56de\u53bb\u4e86\u3002\n\n\u7136\u540e\u6bcf\u4e2a\u519b\u961f\u548c\u6ca1\u6709\u88ab\u5c01\u9501\u7684\u6839\u8282\u70b9\u7684\u67d0\u4e2a\u513f\u5b50\u7684\u5339\u914d\u7684\u8bdd\u5c31\u662f\u628a\u6bcf\u4e2a\u519b\u961f\u5230\u4e86\u6839\u8282\u70b9\u4ee5\u540e\u5269\u4e0b\u7684\u65f6\u95f4\u6392\u5347\u5e8f\u3002\u7136\u540e\u628a\u6839\u7ed3\u70b9\u5230\u8fd9\u4e9b\u513f\u5b50\u7684\u65f6\u95f4\u4e5f\u6392\u5347\u5e8f\u3002\u7136\u540e\u641e\u4e24\u4e2a\u6307\u9488 $i$ \u548c $j$ \u3002\u770b\u770b\u6bcf\u4e2a\u519b\u961f\u662f\u5426\u591f\u65f6\u95f4\u7ba1\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5728\u5339\u914d\u5b8c\u4e4b\u540e\u770b\u770b\u662f\u5426\u6839\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u90fd\u88ab\u5c01\u9501\u4e86\uff0c\u5982\u679c\u662f\u5c31\u8868\u660e\u8fd9\u4e2a\u65f6\u95f4\u53ef\u884c\uff0c\u5426\u5219\u5c31\u8868\u793a\u4e0d\u53ef\u884c\u3002\n\n## $\\text{Code}$\n\n```cpp\n#include <cstdio>\n#include <cstring>\nlong long value[100001],last[100001],to[100001],bz[100001],jd[100001],h[100001],d[100001];\nlong long g[100001][21],f[100001][21];\nstruct node{ long long v,w; } b[100001],c[100001];\nlong long len=0,n=0,m=0,l=0,r=0;\nvoid ins(long long x,long long y,long long c)\n{\n    len++;\n    to[len]=y;\n    value[len]=c;\n    last[len]=h[x];\n    h[x]=len;\n}\nvoid dfs(long long x,long long y)\n{\n    for(long long i=h[x];i>0;i=last[i])\n    {\n        if(y!=to[i])\n        {\n            d[to[i]]=d[x]+1;\n            g[to[i]][0]=x;\n            f[to[i]][0]=value[i];\n            dfs(to[i],x);\n        }\n    }\n}\nvoid color(long long x)\n{\n    long long a=1,b=0;\n    for(long long i=h[x];i>0;i=last[i])\n    {\n        if(to[i]!=g[x][0])\n        {\n            color(to[i]);\n            a=a&bz[to[i]];\n            b=1;\n        }\n    }\n    if(a==1 && b==1 && x!=1)\n    {\n        bz[x]=1;\n    }\n}\nvoid px1(long long l,long long r)\n{\n    long long x=l,y=r,mid=b[(l+r)/2].v;\n    while(x<=y)\n    {\n        while(b[x].v<mid)\n        {\n            x++;\n        }\n        while(b[y].v>mid)\n        {\n            y--;\n        }\n        if(x<=y)\n        {\n            node dq=b[x];\n            b[x]=b[y];\n            b[y]=dq;\n            x++;\n            y--;\n        }\n    }\n    if(l<y)\n    {\n        px1(l,y);\n    }\n    if(x<r)\n    {\n        px1(x,r);\n    }\n}\nvoid px2(long long l,long long r)\n{\n    long long x=l,y=r,mid=c[(l+r)/2].v;\n    while(x<=y)\n    {\n        while(c[x].v<mid)\n        {\n            x++;\n        }\n        while(c[y].v>mid)\n        {\n            y--;\n        }\n        if(x<=y)\n        {\n            node dq=c[x];\n            c[x]=c[y];\n            c[y]=dq;\n            x++;\n            y--;\n        }\n    }\n    if(l<y)\n    {\n        px2(l,y);\n    }\n    if(x<r)\n    {\n        px2(x,r);\n    }\n}\nbool check(long long ti)\n{\n    memset(bz,0,sizeof(bz));\n    long long tot=0,top=0;\n    for(long long i=1;i<=m;i++)\n    {\n        long long y=jd[i],z=0;\n        for(long long j=20;j>=0;j--)\n        {\n            if(g[y][j]!=0 && z+f[y][j]<=ti)\n            {\n                z+=f[y][j];\n                y=g[y][j];\n            }\n        }\n        if(y!=1)\n        {\n            bz[y]=1;\n        }\n        else\n        {\n            tot++;\n            b[tot].v=ti-z;\n            y=jd[i];\n            for(long long j=20;j>=0;j--)\n            {\n                if(g[y][j]>1)\n                {\n                    y=g[y][j];\n                }\n            }\n            b[tot].w=y;\n        }\n    }\n    color(1);\n    for(long long i=h[1];i>0;i=last[i])\n    {\n        if(bz[to[i]]==0)\n        {\n            top++;\n            c[top].v=value[i];\n            c[top].w=to[i];\n        }\n    }\n    px1(1,tot);\n    px2(1,top);\n    long long j=1;\n    c[top+1].v=2147483647;\n    for(long long i=1;i<=tot;i++)\n    {\n        if(bz[b[i].w]==false)\n        {\n            bz[b[i].w]=true;\n        }\n        else if(b[i].v>=c[j].v)\n        {\n            bz[c[j].w]=true;\n        }\n        while(bz[c[j].w]==true)\n        {\n            j++;\n        }\n    }\n    if(j>top)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nint main()\n{\n    scanf(\"%lld\",&n);\n    for(long long i=1;i<=n-1;i++)\n    {\n        long long x=0,y=0,c=0;\n        scanf(\"%lld %lld %lld\",&x,&y,&c);\n        ins(x,y,c),ins(y,x,c);\n        r+=c;\n    }\n    scanf(\"%lld\",&m);\n    for(long long i=1;i<=m;i++)\n    {\n        scanf(\"%lld\",&jd[i]);\n    }\n    d[1]=1;\n    dfs(1,0);\n    for(long long j=1;j<=20;j++)\n    {\n        for(long long i=1;i<=n;i++)\n        {\n            g[i][j]=g[g[i][j-1]][j-1];\n            f[i][j]=f[g[i][j-1]][j-1]+f[i][j-1];\n        }\n    }\n    while(l<r)\n    {\n        long long mid=(l+r)/2;\n        if(check(mid)==false)\n        {\n            l=mid+1;\n        }\n        else\n        {\n            r=mid;\n        }\n    }\n    if(check(l)==true)\n    {\n        printf(\"%lld\",l);\n    }\n    else\n    {\n        printf(\"-1\");\n    }\n    return 0;\n}\n```",
        "postTime": 1552087671,
        "uid": 48269,
        "name": "Drinkkk",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u82b1\u4e86\u4e00\u4e0a\u5348\u6572\u5b8c\u53c8\u82b1\u4e86\u4e00\u8282\u8bfe\u5361\u8fdb1s~~\u5176\u5b9e\u662f\u56e0\u4e3a\u5fc3\u6001\u5d29\u4e86\u5e72\u8106\u5f00\u4e86$O_2$\u4f18\u5316~~\n\n\u8fd9\u9053\u9898\u7684\u60f3\u6cd5\u662f\n\n(\u66b4\u529b)\n\n\u679a\u4e3e\u6240\u82b1\u8d39\u7684\u65f6\u95f4,\u7136\u540e\u8ba9\u519b\u961f\u66b4\u529b\u5730\u5411\u4e0a\u8df3\n\n\u53d1\u73b0\u8fd9\u4e24\u6b65\u90fd\u80fd\u4f18\u5316\n\n\u5982\u679cT\u79d2\u53ef\u4ee5\u90e8\u7f72\u5b8c\u6240\u6709\u519b\u961f,T+1\u663e\u7136\u4e5f\u884c,\u53ea\u662f\u6d6a\u8d39\u4e00\u4e9b\n\n\u636e\u6b64\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848.\n\n\u7136\u540e\u8df3\u8dc3\u4e5f\u53ef\u4ee5\u50cf\u627eLCA\u90a3\u6837\u500d\u589e\u9884\u5904\u7406\n\n\u7136\u540e\u8fd8\u9700\u8981\u4e00\u6b65\u8d2a\u5fc3:\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9,\u5982\u679c\u519b\u961f\u8fd8\u80fd\u8d70\u7684\u6b65\u6570\u591a,\u90a3\u4e48\u4f18\u5148\u8003\u8651\u7528\u8fd9\u4e9b\u519b\u961f\u53bb\u5efa\u7acb\u68c0\u67e5\u7ad9.\n\n\u849f\u84bb\u7684\u4ee3\u7801\n\n```\n#include<bits/stdc++.h>\n#define siz 500010\n#define debug(x) cerr<<#x<<\"=\"<<x\n#define gc getchar()\n#define tp to[p]\n#define ll long long\n#define rep(i,s,n) for (register int i=s;i<=n;i++)\n#define drep(i,n,s) for (register int i=n;i>=s;i--)\n#define il inline\nusing namespace std;\n\nil ll r()\n{\n\tchar c; ll x,f=1;\n\tfor (c=gc;!isdigit(c);c=gc) if (c=='-') f=-1; x=c-'0';\n\tfor (c=gc;isdigit(c);c=gc) x=(x<<1)+(x<<3)+c-'0';\n\treturn f*x;\n}\n\nint head[siz],to[siz],nxt[siz],num,len[siz],A[siz],B[siz];\nint f[siz][25],dep[siz],n,m,rt,loc[siz];\nll g[siz][25],dis[siz],pos[siz],rem[siz];\nbool sfi[siz],vis[siz],isleaf[siz],vis2[siz],sta[siz];\nvector<int> tank[siz];\n\nvoid add(int x,int y,int z)\n{\n\tnum++; to[num]=y; len[num]=z; nxt[num]=head[x];head[x]=num;\n}\n\nvoid dfs(int x)\n{\n\tbool fg=0;\n    for (int p=head[x];p;p=nxt[p])\n      if (!vis[tp])\n      {\n      \tfg=1;dep[tp]=dep[x]+1;dis[tp]=dis[x]+len[p];\n\t\t  f[tp][0]=x;g[tp][0]=len[p];vis[tp]=1;dfs(tp);\n      }\n    if (!fg) isleaf[x]=1;\n}\n\nvoid bz()\n{\n    rep(j,1,16) rep(i,1,n) f[i][j]=f[f[i][j-1]][j-1];\n    rep(j,1,16) rep(i,1,n) g[i][j]=g[i][j-1]+g[f[i][j-1]][j-1]; \n}\n\nbool cmp1(int x,int y) {return dis[x]<dis[y];}\nbool cmp2(int x,int y) {return rem[x]<rem[y];}\n\nbool isclean(int x,int fa)\n{\n\tif (isleaf[x])\n\t\tif (!sfi[x]) return sta[x]=0;\n\t\t\telse return sta[x]=1;\n\tsta[x]=1;\n\tfor (int p=head[x];p;p=nxt[p])\n\t\t\tif (tp!=fa&&!sfi[tp]&&!isclean(tp,x)) sta[x]=0; \n\treturn sta[x];\t\t\n}\n\nbool judge(ll road){\n    memset(sfi,0,sizeof(sfi));\n    int ant=0,bnt=0;\n    for(int p=head[1];p;p=nxt[p]) tank[tp].clear();\n    for(int i=1;i<=m;i++)\n    {\n        int x=pos[i];ll k=road;\n        if(x==1)\n\t\t{\n            B[++bnt]=i;\n            rem[i]=k;\n            continue;    \n        }\n        for(int j=20;j>=0;j--)\n        if(f[x][j]>1&&g[x][j]<=k)\n\t\t{\n            k-=g[x][j];\n            x=f[x][j];\n            if(!k)break;\n        }\n        rem[i]=k;\n        if(f[x][0]==1&&g[x][0]<rem[i])\n\t\t{\n            rem[i]-=g[x][0];\n            tank[x].push_back(i);\n        }\n        else sfi[x]=true,sta[x]=true; \n    }\n    bool b=isclean(1,-1);\n    if(sta[1])return true;\n    for(int p=head[1];p;p=nxt[p])\n\t{      \n        if(!sta[tp]) A[++ant]=tp;\n        for(int x=0;x<tank[tp].size();x++)B[++bnt]=tank[tp][x],loc[tank[tp][x]]=tp;\n    }\n    if(bnt<ant)return false;\n    sort(A+1,A+ant+1,cmp1);\n    sort(B+1,B+bnt+1,cmp2); \n    int posA=1,posB=1;\n    while(posB<=bnt&&posA<=ant){\n        if(sta[A[posA]]){ posA++; continue; }\n        while(rem[B[posB]]<dis[A[posA]]&&posB<=bnt&&loc[B[posB]]!=A[posA]) \n\t\tsta[loc[B[posB++]]]=true;\n        if(posB>bnt)break;\n        posB++;posA++;\n    }\n    while(sta[A[posA]]&&posA<=ant)posA++;\n    return posA>ant;\n}\n\nint main()\n{\n\n\tn=r(); rt=1;\n\trep(i,1,n-1) \n\t{\n\t\tint x=r(),y=r(),z=r(); add(x,y,z); add(y,x,z);\n\t} \n\tdep[rt]=1; vis[rt]=1;  dfs(rt);bz(); m=r();\n\trep(i,1,m) pos[i]=r(); \n\tll lb=0,rb=1e15,mid,ans=-1;\n\twhile (lb<=rb)\n\t{\n\t\tmid=(lb+rb)>>1;\n\t\tif (judge(mid)) ans=mid,rb=mid-1;\n\t\telse lb=mid+1;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n\n```\n\n\n",
        "postTime": 1520838193,
        "uid": 44273,
        "name": "\u786b\u4ee3\u786b\u9178\u94a0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u662f\u771f\u7684\u5751\uff0c\u5199\u4e86\u6211\u5c06\u8fd1\u4e09\u4e2a\u5c0f\u65f6\uff0c\u6bd5\u7adf\u662f\u7b2c\u4e09\u9898\uff0c\u4e0d\u8fc7\u8fd8\u662f%%%\u90a3\u4e9b\u5728\u8003\u573a\u4e0a\u5c31\u5199\u51fa\u6765\u7684\u5927\u4f6c\n\n\u7136\u540e\u6211\u4eec\u9759\u4e0b\u5fc3\u6765\u5bf9\u8fd9\u9053\u9898\u8fdb\u884c\u5206\u6790\uff0c\u5f88\u660e\u663e\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u540d\u57ce\u7ba1\uff0c\u79fb\u5230\u8d8a\u63a5\u8fd1\u6839\u8282\u70b9\u7684\u4f4d\u7f6e\u8d8a\u4f18\u3002\uff08\u6bd5\u7adf\u90fd\u662f\u4ece\u9996\u90fd\u51fa\u6765\u7684\uff09\n\n\u90a3\u4e48\u50cf\u8fd9\u79cd\u6700\u5927\u503c\u6c42\u6700\u5c0f\u7684\u95ee\u9898\u6216\u6700\u5c0f\u6c42\u6700\u5927\u7684\u95ee\u9898\u4e00\u822c\u786e\u5b9e\u7528\u4e8c\u5206\u3002\u3002\u3002\u51ed\u611f\u89c9\u7684\n\n\u7136\u540e\u770b\u4e86\u770b\u697c\u4e0b\u5927\u4f6c\u7684\u9898\u89e3\uff0c\u4e00\u4e0b\u5b50\u5c31\u628a\u519b\u961f\u5206\u4e3a\u4e86\u4e24\u7c7b\uff0c\u4e00\u5f00\u59cb\u4e0d\u662f\u5f88\u61c2\uff0c\u4ed4\u7ec6\u60f3\u4e86\u4e00\u4e0b\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u4e0d\u80fd\u5230\u8fbe\u6839\u8282\u70b9\uff0c\u80af\u5b9a\u662f\u8d8a\u5f80\u4e0a\u79fb\u7ba1\u7684\u8def\u5f84\u8d8a\u591a\uff0c\u6240\u4ee5\u8fd9\u4e00\u7c7b\u7684\u57ce\u7ba1\u53ef\u4ee5\u76f4\u63a5\u5c06\u6700\u5f80\u4e0a\u7684\u70b9\u7ed9\u8986\u76d6\u6389\uff0c\u4e8e\u662f\u6211\u4eec\u5f00\u4e86\u4e00\u4e2aflag\u6765\u8bb0\u5f55\u8fd9\u4e2a\u70b9\u662f\u5426\u8986\u76d6\u6389\n\n\u90a3\u4e48\u5bf9\u4e8e\u80fd\u5230\u6839\u7684\u70b9\u5462\uff1f\u663e\u7136\u5982\u679c\u6211\u4eec\u80fd\u79fb\u5230\u6839\u8282\u70b9\u90a3\u5c31\u80fd\u7ba1\u6240\u6709\u8def\u4e86\uff08\u7136\u800c\u5e76\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff09\uff0c\u90a3\u5bf9\u4e8e\u8fd9\u4e2a\u5c0f\u57ce\u7ba1\uff0c\u5b83\u8981\u4e48\u5c31\u5446\u5728\u5b83\u7b2c\u4e00\u6b21\u5f80\u4e0a\u500d\u589e\u8dd1\u5230\u7684\u70b9\uff0c\u8981\u4e48\u5c31\u8d70\u4e00\u6ce2\u9996\u90fd\u5230\u53e6\u4e00\u4e2a\u4e0e\u9996\u90fd\u76f8\u8fde\u7684\u70b9\u53bb\u5e2e\u5b83\u7ba1\u3002\uff08\u5982\u679c\u90a3\u91cc\u6ca1\u4eba\uff09\u7136\u540e\u8bb0\u4e00\u4e0b\u90a3\u4e9b\u57ce\u7ba1\u80fd\u5230\uff0c\u5230\u9996\u90fd\u4e4b\u524d\u5728\u54ea\u4e00\u4e2a\u513f\u5b50\u8282\u70b9\uff0c\u5230\u9996\u90fd\u540e\u8fd8\u6709\u591a\u5c11\u65f6\u95f4\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u5224\u5b9a\u90a3\u4e2a\u70b9\u9700\u8981\u7ba1\u4e86\n\n\u56e0\u4e3a\u521a\u521a\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7ba1\u6839\uff0c\u6240\u4ee5\u5047\u5982\u6211\u4eec\u80fd\u7ba1\u6389\u6240\u6709\u6839\u7684\u513f\u5b50\u4e5f\u80fd\u63a7\u5236\u6240\u6709\u8def\u5f84\u3002\u3002\u3002\u7136\u540e\u6211\u5c31\u6ca1\u60f3\u51fa\u6765\u3002\u3002\u53bb\u95ee\u4e86\u95ee\u5927\u4f6c\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u5c31\u662f\u4e2adfs\u8d70\u4e00\u904d\uff0c\u5982\u679c\u513f\u5b50\u90fd\u63a7\u5b8c\u90a3\u81ea\u5df1\u4e5f\u88ab\u8986\u76d6\uff0c\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0a\u8dd1\u5c31\u5b8c\u4e86\u3002\u3002\u5c3c\u739b= =\u6211\u8fd8\u60f3\u4e86\u8fd9\u4e48\u4e45\u3002\u8dd1\u5b8cdfs\u62ff\u4e2a\u6570\u7ec4\u8bb0\u4e00\u4e0b\uff0c\u90a3\u4e9b\u9996\u90fd\u7684\u513f\u5b50\u8282\u70b9\u6ca1\u88ab\u8986\u76d6\uff0c\u8ddd\u9996\u90fd\u65f6\u95f4\u591a\u5c11\n\n\u5982\u679c\u6ca1\u8986\u76d6\u7684\u70b9\u6bd4\u80fd\u5230\u9996\u90fd\u7684\u57ce\u7ba1\u591a\uff0c\u5c31\u522b\u8dd1\u4e86\uff0c\u53cd\u6b63\u7ba1\u4e0d\u5b8c\n\n\u7136\u540e\u628a\u8fd9\u4e24\u6570\u7ec4\u6839\u636e\u5269\u4f59\u65f6\u95f4sort\u4e00\u4e0b\uff0c\u4ece\u5927\u5230\u5c0f\u4ece\u5c0f\u5230\u5927\u90fd\u53ef\u4ee5\uff0c\u6211\u662f\u4ece\u5c0f\u5230\u5927\n\n\u5c31\u5f88\u597d\u7406\u89e3\u561b= =\u5982\u679c\u80fd\u76f4\u63a5\u8986\u76d6\u7684\u70b9\u80af\u5b9a\u662f\u76f4\u63a5\u8986\u76d6\u4f1a\u6bd4\u8f83\u597d\uff0c\u5982\u679c\u4e0d\u80fd\u80af\u5b9a\u662f\u7531\u5269\u4f59\u65f6\u95f4\u8d8a\u5c11\u7684\u70b9\u53bb\u8986\u76d6\u8ddd\u79bb\u8d8a\u8fd1\u7684= =\uff08\u53cd\u6b63\u4e00\u6ce2\u7384\u5b66\u64cd\u4f5c\uff09\u7136\u540e\u5c31A\u4e86\n\nP.S \u6ce8\u610f\u8fd9\u5c3c\u739b\u662f\u4e2a\u53cc\u5411\u8fb9\uff0c\u6211\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u624d\u770b\u51fa\u6765\u81ea\u5df1\u6ca1\u8fc7\u662f\u56e0\u4e3a\u5199\u7684\u5355\u5411\u8fb9QAQ\n\n\u53c8P.S \u4ee3\u7801\u4e11\u8f7b\u55b7\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long ne[100200],head[100020]={0},to[100020],tot=0,len[100020],n;//\u90bb\u63a5\u8868\nlong long army[60000],grand[60000][20],load[60000][20],m;//\u57ce\u7ba1\uff0c\u500d\u589e\nbool flag[60000];//\u8986\u76d6\nstruct data\n{\n    friend bool operator<(data x,data y){return x.left<y.left;}\n    long long last,left;\n}arrive[60000],cant[60000];//\u80fd\u5230\u7684\uff0c\u4e0d\u80fd\u8986\u76d6\u7684\ninline long long read()\n{\n    long long x=0;char ch=getchar();\n    while(ch<'0'||ch>'9')ch=getchar();\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x;    \n```\n}//\u8bfb\u4f18\n```cpp\nvoid add(long long u,long long v,long long w)\n{\n    to[++tot]=v;\n    ne[tot]=head[u];\n    head[u]=tot;\n    len[tot]=w;\n```\n}//\u90bb\u63a5\u8868\u52a0\u8fb9\n\n```cpp\nvoid dfs(long long now)\n{\n    for(long long i=1;i<=17;++i)\n    {\n        grand[now][i]=grand[grand[now][i-1]][i-1];\n        load[now][i]=load[now][i-1]+load[grand[now][i-1]][i-1];\n        if(!grand[now][i])break;\n    }\n    for(long long i=head[now];i;i=ne[i])\n    {\n        if(grand[now][0]!=to[i])\n        {\n            grand[to[i]][0]=now;\n            load[to[i]][0]=len[i];\n            dfs(to[i]);\n        }\n    }\n```\n}//\u500d\u589e\n```cpp\nvoid find(long long now)\n{\n    long long num=0;\n    for(long long i=head[now];i;i=ne[i])\n    {\n        if(to[i]!=grand[now][0])\n        {\n            find(to[i]);\n            if(!flag[to[i]]&&now!=1)\n            {\n                num=0;\n                return ;\n            }\n            else\n            num=1;\n        }\n    }\n    if(num==1)\n    flag[now]=1;\n    return ;\n```\n}//\u8dd1\u4e00\u904d\u770b\u90a3\u4e9b\u70b9\u65e0\u6cd5\u76d6\u4f4f\n    \n```cpp\nbool check(long long mid)//\u4e8c\u5206\u5e38\u7528\u51fd\u6570\u540d\n{\n    memset(flag,0,sizeof(flag));\n    long long cnt1=0,cnt2=0;\n    for(long long i=1;i<=m;i++)\n    {\n        long long now=army[i],t=0;\n        for(long long j=17;j>=0;j--)\n        {\n            if(grand[now][j]&&load[now][j]+t<=mid)\n            {\n                t+=load[now][j];\n                now=grand[now][j];\n            }\n        }\n        if(now!=1) \n        flag[now]=1;\n        else\n        {\n            arrive[++cnt1].left=mid-t;\n            now=army[i];\n            for(long long i=17;i>=0;i--)\n            {\n                if(grand[now][i]>1)\n                {\n                    now=grand[now][i];\n                }\n            }\n            arrive[cnt1].last=now;\n        }\n    }\n        find(1);\n        for(long long i=head[1];i;i=ne[i])\n        {\n            if(!flag[to[i]])\n            {\n                ++cnt2;\n                cant[cnt2].last=to[i];\n                cant[cnt2].left=len[i];\n            }\n        }\n        if(cnt2>cnt1)\n        {\n            return 0;\n        }\n        sort(arrive+1,arrive+cnt1+1);\n        sort(cant+1,cant+cnt2+1);\n        long long j=1;//\u63a5\u4e0b\u6765\u5c31\u662f\u4e00\u6ce2\u9a9a\u64cd\u4f5c\n        for(long long i=1;i<=cnt1;i++)\n        {\n            if(!flag[arrive[i].last])\n            {\n                flag[arrive[i].last]=1;\n            }\n            else\n            {\n                if(cant[j].left<=arrive[i].left)\n                {\n                    flag[cant[j].last]=1;\n                    j++;\n                }\n            }\n            while(flag[cant[j].last]&&j<=cnt2) j++;\n        }\n        if(j<=cnt2)\n        return 0;\n        else\n        return 1;\n}\nint main()\n{\n//    freopen(\"testdata.in\",\"r\",stdin);\n    n=read();\n    for(long long i=1;i<n;i++)\n    {\n        long long u,v,w;\n        u=read();v=read();w=read();\n        add(u,v,w);    \n        add(v,u,w);    \n    }\n    dfs(1);\n    m=read();\n    for(long long i=1;i<=m;i++)\n    {\n        army[i]=read();\n    }\n    long long s=0;\n    for(long long i=head[1];i;i=ne[i])//\u5982\u679c\u519b\u961f\u6570\u6bd4\u4f60\u9996\u90fd\u7684\u513f\u5b50 \u8282\u70b9\u90fd\u5c11\uff0c\u90a3\u8986\u76d6\u7684\u5b8c\u4e2a\u6bdb\n    {\n        ++s;\n    }\n    if(m<s)\n    {\n        printf(\"-1\");\n        return 0;\n    }\n    long long mid,l=0,r=150000,ans=0;\n    while(l<=r)//\u8fd9\u4e2a\u4e8c\u5206\u5199\u6cd5\u5f88\u6a21\u7248\u554a\n    {\n        mid=(l+r)>>1;\n        if(check(mid)){r=mid-1;ans=mid;}\n        else\n        l=mid+1;\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n```",
        "postTime": 1509533228,
        "uid": 52576,
        "name": "moye\u5230\u7897\u91cc\u6765",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u6709\u4eba\u7528\u500d\u589e\uff1f\n\n\u90a3\u6211\u6765\u4e00\u53d1\u9898\u89e3\u3002\n\n\u505a\u6cd5\u8fd8\u662f\u4e8c\u5206\uff0c\u7136\u540e\u901a\u8fc7\u500d\u589e\u6a21\u62df\u3002\n\n\u5bf9\u4e8e\u80fd\u5230\u8fbe1\u53f7\u70b9\u7684\u513f\u5b50\u7684\u90a3\u4e9b\u519b\u961f\uff0c\u6254\u5230\u4e00\u4e2a\u6570\u7ec4\u91ccsort\u4e00\u4e0b\u3002\n\n\u7136\u540e\u8d2a\u5fc3\u5373\u53ef\u3002\n\n\uff08\u81ea\u8ba4\u4e3a\u81ea\u5df1\u7684\u4ee3\u7801\u5f88\u6e05\u695a\u4e00\u770b\u5c31\u61c2\uff09\n\n```cpp\n#include<vector>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define ll long long\n#define o 100001\nusing namespace std;\nint head[o],nxt[o*2],point[o*2],weight[o*2],army[o],A[o],B[o],sign[o];\nll dis[o],f[o][22],d[o][22],remain[o]; \nbool son[o],build[o],ok[o];\nint n,m,tot,ui,vi,wi;\nvector<int> vec[60001];\nvoid in(int &x){\n    char c=getchar();bool b=0;x=0;\n    while(c<'0'||c>'9'){if(c=='-')b=1;c=getchar();}\n    while('0'<=c&&c<='9'){x=(x<<3)+(x<<1)+c-48;c=getchar();}\n    if(b)x=-x;\n}\nvoid addedge(int x,int y,int cap){\n    tot++;nxt[tot]=head[x];head[x]=tot;point[tot]=y;weight[tot]=cap;\n    tot++;nxt[tot]=head[y];head[y]=tot;point[tot]=x;weight[tot]=cap;\n}\nvoid dfs(int now,int dad){\n    f[now][0]=dad;int cnt=0;\n    if(now!=1){\n        for(int i=1;i<=20;i++) f[now][i]=f[f[now][i-1]][i-1];\n        for(int i=1;i<=20;i++) d[now][i]=d[f[now][i-1]][i-1]+d[now][i-1];\n    }    \n    for(int tmp=head[now];tmp;tmp=nxt[tmp]){\n        int v=point[tmp];\n        if(v!=dad){\n            cnt++;\n            dis[v]=dis[now]+weight[tmp];\n            d[v][0]=weight[tmp];\n            dfs(v,now);\n        }\n    }\n    if(!cnt)son[now]=true;\n}\nbool cmpA(int x,int y){ return dis[x]<dis[y];}\nbool cmpB(int x,int y){ return remain[x]<remain[y];}\nbool Run(int now,int dad){\n    if(son[now]){\n        if(!build[now]) return ok[now]=false;\n        else return ok[now]=true;\n    }\n    ok[now]=true;\n    for(int tmp=head[now];tmp;tmp=nxt[tmp]){\n        int v=point[tmp];\n        if(v!=dad&&!build[v]&&!Run(v,now)) ok[now]=false;\n    }\n    return ok[now];\n}\nbool check(ll road){\n    memset(build,0,sizeof(build));\n    A[0]=B[0]=0;\n    for(int tmp=head[1];tmp;tmp=nxt[tmp]) vec[point[tmp]].clear();\n    for(int i=1;i<=m;i++)\n    {\n        int x=army[i];ll k=road;\n        if(x==1){\n            B[++B[0]]=i;\n            remain[i]=k;\n            continue;    \n        }\n        for(int j=20;j>=0;j--)\n        if(f[x][j]>1&&d[x][j]<=k){\n            k-=d[x][j];\n            x=f[x][j];\n            if(!k)break;\n        }\n        remain[i]=k;\n        if(f[x][0]==1&&d[x][0]<remain[i]){\n            remain[i]-=d[x][0];\n            vec[x].push_back(i);\n        }\n        else build[x]=true,ok[x]=true; \n    }\n    Run(1,0);\n    if(ok[1])return true;\n    for(int tmp=head[1];tmp;tmp=nxt[tmp]){\n        int v=point[tmp];\n        if(!ok[v]) A[++A[0]]=v;\n        for(int x=0;x<vec[v].size();x++)B[++B[0]]=vec[v][x],sign[vec[v][x]]=v;\n    }\n    if(B[0]<A[0])return false;\n    sort(A+1,A+A[0]+1,cmpA);\n    sort(B+1,B+B[0]+1,cmpB);\n    int la=1,lb=1;\n    while(lb<=B[0]&&la<=A[0]){\n        if(ok[A[la]]){ la++; continue; }\n        while(remain[B[lb]]<dis[A[la]]&&lb<=B[0]&&sign[B[lb]]!=A[la]) ok[sign[B[lb++]]]=true;\n        if(lb>B[0])break;\n        lb++;la++;\n    }\n    while(ok[A[la]]&&la<=A[0])la++;\n    return la>A[0];\n}\nint main(){\n    in(n);\n    for(int i=1;i<n;i++){\n        in(ui),in(vi),in(wi); \n        addedge(ui,vi,wi);\n    }\n    in(m);\n    for(int i=1;i<=m;i++) in(army[i]);\n    dfs(1,0);\n    ll l=0,r=1e12,mid,ans=-1;\n    while(l<=r){\n        mid=l+r>>1;\n        if(check(mid)) ans=mid,r=mid-1;\n        else l=mid+1;\n    }\n    printf(\"%lld\\n\",ans);\n}\n```",
        "postTime": 1506672759,
        "uid": 24559,
        "name": "Treeloveswater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u4e2a \u6bd4\u8f83\u7b80\u6d01 \u7684C++\u7a0b\u5e8f\uff0c\u601d\u8def\u540c\u697c\u4e0b~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\nusing namespace std;\nint n,m,fi[100001],ne[100001],w[100001],v[100001];\nint cnt,x,y,val,tot,arm[50001],ho[50001],dis[50001];\nint ti[50001],gra[50001],na,nc,cal[50001];\nbool b[50001];\nstruct node{\n    int x,v;\n}arre[50001],coo[50001];  //\u591a\u51fa\u6765\u7684\uff0c\u7f3a\u5c11\u7684 \nbool cmp(node u,node v)\n{\n    return u.v>v.v;\n}\nvoid addedge(int u,int vv,int z)\n{\n    w[++cnt]=vv;ne[cnt]=fi[u];fi[u]=cnt;v[cnt]=z;\n}\nvoid dfs(int u)\n{\n    int maxx=-1,now1=0,now2=0;\n    for(int i=fi[u];i;i=ne[i])\n      if(w[i]!=ho[u])  //\u4fdd\u8bc1\u5411\u4e0b\u8d70 \n      {\n          dfs(w[i]);\n          if(ti[w[i]]==-1) now2=1;  //\u8be5\u70b9\u9700\u8981\u519b\u961f\u5f25\u8865 \n          if(ti[w[i]]>=v[i]) now1=1;  //\u53ef\u4ee5\u8d70\u5230\u8be5\u70b9 \n          maxx=max(maxx,ti[w[i]]-v[i]);\n      }\n    if(u!=1 && ne[fi[u]])  //\u4e0d\u662f\u6839\u8282\u70b9\u4e14\u4e0d\u662f\u72ec\u82d7\uff08\u5373\u6709\u591a\u4e2a\u5b50\u8282\u70b9\u7684\u975e\u6839\u8282\u70b9\uff09 \n    {\n        if(now1) ti[u]=max(ti[u],maxx);  //\u6240\u6709\u70b9\u4e2d\u8d70\u5f97\u6700\u957f\u7684\u4e00\u4e2a\u8bb0\u4e3a\u8be5\u70b9\u5269\u4e0b\u7684\u957f\u5ea6 \n        else if(now2) ti[u]=max(ti[u],-1);  //\u6ca1\u6709\u519b\u961f\u5230\u8fbe\u5b50\u8282\u70b9\uff0c\u6700\u4f4e\u8bb0\u4e3a-1 \n        else ti[u]=max(ti[u],0);  //\u6bcf\u4e2a\u5b50\u8282\u70b9\u90fd\u6709\u519b\u961f\uff0c\u4f46\u5728\u8be5\u70b9\u7684\u5b50\u8282\u70b9\u4e0e\u8be5\u70b9\u4e4b\u95f4\u7ed3\u675f \n    }\n}\nvoid maketi(int u)\n{\n    for(int i=1;i<=m;i++)\n      if(dis[arm[i]]>=u) ti[arm[i]]=u;  //\u519b\u961f\u5728\u65f6\u95f4\u9650\u5236\u5185\u7684\u5df2\u77e5\u8ddd\u79bb\uff0c\u65e0\u6cd5\u8d70\u51fa\u6839\u8282\u70b9\u5219\u8bb0\u4e3a\u65f6\u95f4 \n    dfs(1);  //\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u904d\u5386 \n}\nvoid makeaa(int u)\n{\n    for(int i=1;i<=m;i++)\n      if(dis[arm[i]]<u) arre[++na].x=gra[arm[i]],arre[na].v=u-dis[arm[i]];  //\u8bb0\u5f55\u53ef\u7528\u6765\u5f25\u8865\u7684\u8ddd\u79bb\u53ca\u5176\u73b0\u5728\u4f4d\u7f6e(\u6839\u8282\u70b9\u76f4\u7cfb\u5b50\u8282\u70b9) \n    sort(arre+1,arre+na+1,cmp);  //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n    for(int i=1;i<=na;i++)\n    {\n        if(!cal[arre[i].x]) cal[arre[i].x]=i;  //\u6bcf\u4e2a\u5b50\u8282\u70b9\u519b\u961f\u7684\u6700\u5c0f\u5f25\u8865\u503c\u7684\u5e8f\u53f7 \n        else if(arre[cal[arre[i].x]].v>arre[i].v) cal[arre[i].x]=i;\n    }\n}\nvoid makecc()\n{\n    for(int i=fi[1];i;i=ne[i])  //\u6240\u6709\u9700\u8981\u5f25\u8865\u7684\u6839\u8282\u70b9\u76f4\u7cfb\u5b50\u8282\u70b9 \n      if(ti[w[i]]==-1) coo[++nc].x=w[i],coo[nc].v=v[i];\n    sort(coo+1,coo+nc+1,cmp);  //\u8ddd\u79bb\u4ece\u5927\u5230\u5c0f\u6392\u5e8f \n}\nbool ans()\n{\n    if(na<nc) return 0;  //\u7edd\u5bf9\u65e0\u6cd5\u5f25\u8865 \n    memset(b,0,sizeof(b));\n    int i=1,j=1;  //\u7528\u6765\u5f25\u8865\u7684\u519b\u961f\uff0c\u987b\u5f25\u8865\u7684\u8ddd\u79bb \n    for(;i<=nc;i++)\n      if(!b[cal[coo[i].x]] && cal[coo[i].x]) b[cal[coo[i].x]]=1;  //\u6709\u519b\u961f\u521a\u597d\u53ef\u4ee5\u5f25\u8865\uff0c\u65e0\u9700\u7ecf\u8fc7\u6839\u8282\u70b9 \n      else\n      {\n          while(b[j] && j<=na) j++;\n          if(j>na || arre[j].v<coo[i].v) return 0;  //\u65e0\u6cd5\u5f25\u8865 \n          b[j]=1;j++;\n      }\n    return 1;\n}\nbool pan(int u)\n{\n    memset(cal,0,sizeof(cal));na=nc=0;\n    memset(ti,-1,sizeof(ti));\n    maketi(u);\n    makeaa(u);\n    makecc();\n    return ans();\n}\nint erfen()  //\u4e8c\u5206\u7b54\u6848 \n{\n    int l=-1,r=999999999;\n    while(l+1<r)\n    {\n        int mid=(l+r)/2;\n        if(pan(mid)) r=mid;\n        else l=mid;\n    }\n    return r;\n}\nvoid getho(int u)\n{\n    for(int i=fi[u];i;i=ne[i])\n      if(ho[u]!=w[i])\n      {\n          if(u==1) gra[w[i]]=w[i];  //\u8bb0\u5f55\u8be5\u70b9\u8df3\u8f6c\u76f4\u7cfb\u7956\u5148\uff08\u8be5\u7956\u5148\u4e3a1\u53f7\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff09 \n          else gra[w[i]]=gra[u];\n          ho[w[i]]=u;dis[w[i]]=dis[u]+v[i];  //\u8be5\u70b9\u7236\u8282\u70b9\uff0c\u8ddd\u6839\u8282\u70b9\u8ddd\u79bb \n          getho(w[i]);\n      }\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<n;i++)\n    {\n        scanf(\"%d%d%d\",&x,&y,&val);\n        addedge(x,y,val);addedge(y,x,val);\n        if(x==1 || y==1) tot++;\n    }\n    scanf(\"%d\",&m);\n    getho(1);\n    if(m<tot)\n    {\n        printf(\"-1\\n\");return 0;\n    }\n    for(int i=1;i<=m;i++) scanf(\"%d\",&arm[i]);  //\u519b\u961f\u4f4d\u7f6e \n    sort(arm+1,arm+m+1);  //\u519b\u961f\u4f4d\u7f6e\u7531\u8fd1\u5230\u8fdc\u6392\u5e8f \n    printf(\"%d\\n\",erfen());\n    return 0;\n}\n```",
        "postTime": 1476880609,
        "uid": 16334,
        "name": "licone",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    },
    {
        "content": "1.dfs\u627e\u51fa\u500d\u589e\u5e8f\u5217\n\n2.\u4e8c\u5206\u7b54\u6848\uff1a\u5728\u7ed9\u5b9a\u65f6\u95f4ans\u5185\n\n1)\u5bf9\u4e8e\u67d0\u4e2a\u519b\u961f\uff1a\u82e5\u80fd\u5230\u8fbe\u9996\u90fd\uff0c\u8bb0\u4e0b\u5230\u8fbe\u9996\u90fd\u540e\u7684\u5269\u4f59\u65f6\u95f4\n\n\u82e5\u4e0d\u80fd\uff0c\u8ba9\u5b83\u5c3d\u53ef\u80fd\u7684\u5411\u9996\u90fd\u8d70\n\n2\uff09dfs\u627e\u51fa\u6765\u54ea\u4e2a\u8fb9\u5883\u57ce\u5e02\u9700\u8981\u519b\u961f\u9a7b\u5b88\uff0c\u5219\u9700\u8981\u8d70\u5230\u4ece\u8fd9\u4e2a\u8fb9\u5883\u57ce\u5e02\u51fa\u53d1\u5411\u9996\u90fd\u8d70\u6240\u9700  \u7ecf\u8fc7\u7684\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u6309\u8fd9\u4e2a\u70b9\u5230\u9996\u90fd\u8ddd\u79bb\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\n\n\u82e5\u8fd9\u4e2a\u70b9\u6709\u519b\u961f\u901a\u8fc7\u5b83\u8fdb\u5165\u9996\u90fd\uff0c\u9009\u62e9\u5269\u4f59\u65f6\u95f4\u4e0d\u80fd\u8d70\u5230\u8fd9\u4e2a\u70b9\u4e14\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u80fd\u5230\u9996\u90fd\u7684\u519b\u961f\u3002\u5426\u5219\u4ece\u5230\u8fbe\u9996\u90fd\u7684\u6240\u6709\u519b\u961f\u4e2d\u9009\u4e00\u4e2a\u5269\u4f59\u65f6\u95f4\u6700\u5c0f\u7684\u519b\u961f\u9a7b\u5b88\u3002\n",
        "postTime": 1380713043,
        "uid": 1187,
        "name": "AKB48",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1084 \u3010\u75ab\u60c5\u63a7\u5236\u3011"
    }
]